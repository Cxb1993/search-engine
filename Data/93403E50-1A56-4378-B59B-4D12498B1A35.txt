 I
中文摘要 
真實世界的知識經常含有不明確及不確定的資訊，而傳統知識管理工具缺乏處理模糊
知識的能力，因此，本研究計畫提出提出模糊知識管理的系統化架構，稱為 FKM (Fuzzy 
Knowledge Management)，以達成模糊知識管理之目標，並利用物件導向軟體工程方法實作
出 FKM 模糊知識管理工具。首先，使用圖形化的知識表示法，讓使用者容易了解及表達知
識，並將知識表示法予以模糊化，以作為建立模糊知識模型的圖形表示法與正規化基礎；
其次，提出模糊知識模型，使用一致性的模糊知識表示法來同時表達宣告性知識與程序性
知識，並提供模糊知識推論之能力，研究模糊知識表示法的推論規則，以提供查詢模糊知
識之推論基礎；第三，發展一個階層式的 ontology 系統來儲存模糊知識模型，並提供模糊
知識的分類機制，處理共同知識與個別特定知識的問題；第四，提供具語意基礎的模糊化
知識查詢語言，讓使用者可以很方便地查詢所需知識，並整合 FuzzyCLIPS 模糊專家系統程
式語言，透過模糊推論規則推論出進一步的解答，以減輕資訊超載的問題；最後，整合多
個 GoF 及 Sun J2EE 的設計模式來解決開發過程中遭遇到的設計問題，以確保 FKM 模糊知
識管理系統能具有彈性與擴充性，並提升系統執行之效率。 
關鍵詞：知識管理、模糊邏輯、設計模式、物件導向軟體工程。 
 1
報告內容 
一、前言 
知識管理是利用資訊科技將企業組織內的經驗與知識有效地取得、分類、儲存、散播、
及更新的過程[3,13,33]。隨著知識經濟時代的來臨，知識管理成為未來建構企業競爭力的最
大利基，因此，知識管理的研究逐漸受到相當大的重視[11,29,44]。隨著數位化科技時代的
來臨及網際網路的快速發展，知識常需透過電腦化形式描述與儲存，並加以應用或傳播。
因此，如何以有效的資訊技術應用在知識管理上，一直是研究者探討的重要議題。然而，
真實世界中的知識經常具有不確定及不精確的特性，Zadeh[53,54]指出目前知識處理的工
作，最欠缺的能力有兩點，包括(1)缺乏知識推論能力，通常只能搜尋知識而無法針對某一
個查詢推論出適當的解答出來，以及(2)真實世界中的 perceptional knowledge，本質上皆為
模糊的，傳統的二價邏輯無法處理知識中的部份確定、部份可能、和部份真實等問題。Yang
等人[50]分析了 fuzzy logic、first order predicate logic、與 non-monotonic logic 作為知識表示
法的優缺點後，進一步指出以模糊邏輯作為知識管理的知識表示法可以更準確地表達知識
的語意。因此，本論文將實作一模糊知識管理工具，應用模糊集合理論[52]以管理不同模糊
型態的知識。 
知識管理所涵蓋的知識範圍非常廣泛，包括企業流程、市場行銷、產業活動、人力資
源、策略規劃、風險管理、危機處理、專案研發、生產品質、工作程序、客戶服務、企業
資源規劃、及供應鏈管理等，所有生活上及業務上的知識皆可以為其範疇。為了能有效地
表達及應用這些不同類型的複雜知識，需要一個系統化的架構來表示、儲存、查詢、和推
論知識，如同 Liebowitz[27]與 Preece 等人[37]所指出的，傳統的知識管理活動只著重在管
理層面，而且大多是完全只倚賴資料庫和網路系統，無法做到系統化地表達和應用知識。 
目前已有許多知識管理領域和模糊理論領域的專家學者用各種不同的觀點來探討知識
管理系統，包括以模糊邏輯的觀點探討真實世界中知識的不明確性與不確定性[50,53,54]、
以設計觀點的知識管理架構強調知識不斷地建立與更新[15]、著重資訊科技的方法討論如何
運用資訊科技達成各種轉換與連結[34,47]、以管理的角度來討論知識管理系統的基本要素
與問題挑戰[20]、以及強調知識工程與人工智慧的重要性[27,37]等。這些研究指出目前知識
管理工具除了缺乏處理模糊知識的能力，並且普遍存在以下問題：(1)缺乏系統化的架構整
 3
二、研究目的 
本研究之目的在於提出系統化知識工程架構以達成模糊知識管理之目標，並以物件導
向軟體工程方法開發 FKM 模糊知識管理工具，包含下列四個部份： 
(1) 模糊知識表示法：將知識表示法予以模糊化，以作為建立模糊知識模型的圖形表
示法與正規化基礎。 
(2) 模糊知識模型：使用一致性的模糊知識表示法來同時表達宣告性知識與程序性知
識，並提供模糊知識之推論能力。 
(3) 模糊知識儲存：發展一個階層式的 ontology 系統來儲存模糊知識模型，並提供模
糊知識的分類機制，以處理共同知識與個別特定知識的問題。 
(4) 模糊知識查詢：提供具語意基礎的模糊化知識查詢語言，讓使用者可以很方便地
查詢所需知識，並整合 FuzzyCLIPS 模糊專家系統程式語言，透過模糊推論規則推
論出進一步的解答，以減輕資訊超載的問題。 
在 FKM 系統的實作上，我們整合多個 GoF [17]及 Sun J2EE [56]的設計模式(Design 
Pattern)來解決開發過程中遭遇到的設計問題，以確保 FKM 模糊知識管理系統能具有彈性
與擴充性，並提升系統執行之效率。本研究計畫針對系統的主要架構、介面設計及功能設
計等三方面分析探討如何達成系統彈性與擴充性的設計目標，以及如何提升系統內部資料
在存取資料庫及物件間傳輸的效率。 
 
 5
 當有多個 input places 或是 output places 時，可透過“and＂及“or＂將它們做結合，此
種類型的 rule稱為複合的 fuzzy production rule，在[28]的文獻中指出，複合的 fuzzy production 
rule 可分為四種型態，如圖 3 到圖 6 所示，而在日後的學者多以此四種型態為基礎進一步
研究模糊推理的演算法推理知識，其中，第四種型態的 rule 並不適合進行推理，因為它無
法產生明確的含意，因此，通常不被加入討論。 
          
圖 3. A Type-1 marked fuzzy Petri net.     圖 4. A Type-2 marked fuzzy Petri net. 
          
圖 5. A Type-3 marked fuzzy Petri net.     圖 6. A Type-4 marked fuzzy Petri net. 
 Chen[8]等人針對 Type-1、Type-2 及 Type-3 等模糊規則型態，提出 output place 的符合
程度運算方式，進一步對知識做推理及運算以得到最後的結果。首先，Type-1 的運算是採
用取最小值的方式得出最後的結果，計算出每一個 input places 的 truth value 與 transition 的
CF 值做乘積後再取其中最小的數值；而 Type-2 由於僅有唯一的 input place，因此各 output 
places 的符合程度，由此 input place 的 truth value 與 transition 的 CF 值做乘積後的值；最後，
Type-3 的運算是採用取最大值的方式得出最後的結果，計算出每一個 input places 的 truth 
value 與各自的 transitions 之 CF 值做乘積後再取其中最大的數值。 
 Chen[5]更延伸了原本的 FPN 表示法，加入 fuzzy numbers 來表示 FPN 中的 CF 及 truth 
value(如表 1 所示)，其中這些 fuzzy numbers 的隸屬函數都屬於 π function 的模糊函數，因
此可透過α-cut的方式得到兩數值(如圖7所示)，而三種型態的運算方式本質上與原始的FPN
相似，當 A 及 B 兩 fuzzy members 做“AND＂或“OR＂的運算時，必需透過 α-cut 所取得
的兩數值做運算來得到最後的結果，而 output place 的 truth value 也將是一個 fuzzy number。 
 7
間存在的相依關係＂ 之能力，因此，有部分學者將 Fuzzy Semantic Networks 運用在不同學
術領域的研究上，以下為相關的文獻探討。 
 Ding 等人[12]透過 Fuzzy Semantic Networks 找出 Flash movie 中的片段影像與概念的相
關及關係程度，以達到自動化的方式對每一時間點的影像、鏡頭做註解。作者將 Fuzzy 
Semantic Networks 的架構分為三個 Layers：semantic layer、context layer 及 element layer，
semantic layer 採用階層式樹狀結構的方式建置概念間的關係及其關係程度；context layer 是
由 Flash movie 中的場景、鏡頭所擷取出來的，semantic layer 到 context layer 擁有多個具單
一方向的箭頭相連接，以表示概念與場景的“related to＂關係；element layer 構成的元件為
組成場景的物件元素，例如風景圖，它的組成元素可能有天空、雲、山水…等，而 context layer
到 element layer 同樣擁有多個具單一方向的箭頭相連接，以表示場景與元素間的
“composed by＂的關係。Fuzzy Semantic Networks 可藉由 relevance feedback 的方式來學
習，以改善 FUSE networks 的精確性。 
 Omri 等人 [35,36]提出一理論的觀點在於實現線上智慧型援助 (on-line Intelligent 
Assistance)系統，使用者輸入欲解決的問題語句，系統將輸出解決的方式或問題的解答，在
查詢的過程中系統也能透過使用者的查詢學習出更理想的知識。作者採用 Fuzzy Semantic 
Net 的模糊知識表示法來表達 Novice User 的模糊知識及查詢語句，而 Fuzzy Semantic Net
中的詞彙間存在“kind of＂及“is-a＂的關係，並擁有必要性(necessity)及可能性(possibility)
兩數值來表示兩概念的不確定性關係程度，系統透過比對 Novice User 的 Fuzzy Semantic Net
及已建立的 Ideal Expert Semantic Nets 來回答使用者的問題，當知識庫中不存在使用者所查
詢的詞彙時，系統會以自然語言詢問使用者詞彙的意思，並更新系統中的知識庫。 
 Fuzzy Semantic Networks 具有很好的模糊知識表示能力，但字彙或概念間因為僅存在
“is-kind-of＂或“is-a＂的關係，因此在推理上受到相當的限制，很少用於模糊推理之用途。 
3.1.3 Fuzzy Conceptual Graphs 
 FCGs 是以 Conceptual Graphs 為基礎加入模糊邏輯理論，通常包含兩個基本的圖形元
件 fuzzy concept 及 fuzzy conceptual relation 來表示模糊知識，如圖 8 所示，fuzzy concept
以長方形的圖示表示，用來描述一個模糊物件，而 fuzzy conceptual relation 以橢圓型的圖示
表示，用來表達 fuzzy concepts 之間所存在的關係，節點之間以具有方向性的箭頭相連結，
由相關文獻指出，FCGs 的模糊化通常在於 fuzzy concept 及 fuzzy conceptual relation 上著墨，
而 FCGs 的應用，通常可透過圖形的模糊比對計算及模糊推理，運用在知識的推理及不同
學術領域上。以下為 FCGs 的相關文獻探討。 
 9
FCG fact(以 FCG 表示)及“if u then v＂形式的 FCG rule，其中 u 與 v 為 FCGs，如圖 9 所示，
此 FCG Program 透過 FCG fact 及 rule 推理後，可以推論出以下結果，對於一個“fairly red＂
的“my_apple＂蘋果而言，它的果實成熟度為“fairly ripe＂。 
 
圖 9. A Fuzzy Conceptual Graphs program for reasoning 
 相較於其他兩種圖形化模糊知識表示法，正規化的 FCGs 表示法具有以下優點：(1)良
好的模糊知識表達能力、(2)具有模糊知識推理之能力、(3)FCGs 圖形具有模糊比對之能力，
以計算 FCGs 圖形間的相似度。對於目前 FCGs 表示法的相關研究，發現 FCGs 圖形元件的
糢糊化，普遍只有 Concept 及 Conceptual Relation 等圖形元件，然而模糊化的 Concept 及
Relation 僅能表達宣告性的模糊知識，並無法表達程序性的模糊知識，而本論文採用的 FCGs
模糊知識表示法加入了 Actor 及 Demon 等模糊化圖形元件，加強了表達模糊知識的能力，
並進一步研究 FCGs 的推理的規則，以提供系統更完善的模糊知識推理及模糊比對之能力。 
3.2 模糊知識儲存 
FKM 系統的模糊知識是由 FCGs 表示法建立的模糊知識模型來表示，因此，模糊知識
儲存的方式與傳統儲存知識有所差異，因此，以有效的儲存機制分類及儲存模糊知識亦是
知識管理的重要研究之一。FKM 系統以階層式的 ontology 系統儲存模糊知是模型，以下為
ontology 的定義及應用之相關文獻探討。 
近年來，ontology 的研究已經越來越受重視[16,43]，許多研究學者對 ontology 的定義
與作法各不相同，一般來說， ontology 的意義是 ”an explicit specification of a 
conceptualization”，可以用來作為智慧型代理人之間對於知識的共同定義與解釋機制，
ontology 由四個元素所構成，包括 terms、their definitions、axioms relating them、和 a taxonomy 
of terms。William 和 Austin 等人[46]對 ontology 的定義是，用於描述或表達某一領域知識的
一組概念或術語，可用來組織知識庫較高層次的共通知識，也可用來描述特定領域的知識。 
 11
 Chen[7]等人整合關聯式資料庫與模糊查詢，提供使用者輸入具語意的查詢條件，讓使
用者可以更彈性的使用關聯式資料庫，並利用fuzzy number的α-cut將具有模糊項的查詢條件
轉換為傳統關聯式資料庫的SQL查詢條件，以進行模糊查詢，藉由定義門檻值的方式來避
免計算不必要的歸屬程度，以提升模糊查詢之效率。 
 巢狀式的模糊查詢條件提供使用者表達較複雜的查詢條件，然而卻會降低系統處理查
詢的效能，Yang [51] 等人延伸 unnesting techniques來處理數種型態的巢狀模糊查詢，且延
伸merge-join用來處理非巢狀的模糊查詢，以改善執行巢狀式模糊查詢的效能，並提供實驗
結果來說明其方法使得查詢的處理時間有顯著的降低。 
3.3.2 模糊資訊檢索(Fuzzy Information Retrieval) 
模糊資訊檢索方法，目前許多相關研究是藉由建立概念間及概念與文件之間的關係來
進行文件或資訊的檢索，概念間及概念與文件之間的關係來不是絕對的 0 與 1 的關係，對
於每個關係給予一個程度值，程度值∈ [0,1]，用來表示彼此間的相關程度。 
 Chen 等人[9]提出一個文件檢索方法，透過計算使用者的查詢條件與文件之間的符合程
度，擷取出適當的文件。以模糊概念網(Fuzzy Concept Network)的方式組織概念間及概念與
文件間的關係，如圖 10 所示，模糊概念網是由節點(Nodes)及鏈結(Links)所形成的圖示，節
點表示一個概念或是文件，當節點之間有關聯時則以鏈結的方式，並存在一個程度值。概
念間的符合程度計算是以 max-min 的運算方式得到最後的關係程度值，例如，當要計算 c3
與 d2 的符合程度時，有三條路徑 c3Æc1Æd2、c3Æc4Æc2Æd2 及 c3Æc4Æc5Æd2 可以到
達 d2，首先，先取出每條路徑最小關係程度值，分別為 0.5、0.8 及 0.6，再取三條路徑關
係程度的最大值 0.8 做為最後的 c3 與 d2 的符合程度。 
 
圖 10.  A Conceptual Network 
Horng 和 Chen 等人[19]更提出一個 Fuzzy-valued 的概念網進行文件的檢索，此模糊概
念網的模糊關係是以 fuzzy number 所表示，例如，“close to 5＂， fuzzy number 可以使用
 13
 Kim[21]等人結合模糊文件檢索的技術，提出藉由模糊概念網(fuzzy concept network)的
方式建立一個個人化的搜尋引擎，其中模糊概念網的內容(Nodes 的資訊及 Links 的值)來自
於使用者的 profile，除了搜尋上更加精確，搜尋結果也更符合使用者的需求。 
 Widyantot[45]等人提出在個人化搜尋引擎上，以重新定義使用者查詢條件的方法，讓
查詢結果能更加符合使用者的需求。系統如何自動化精練使用者的查詢條件，作者利用 term 
association 的方式，將資料庫裡的相關資料建立成一 fuzzy ontology 架構，透過此 fuzzy 
ontology 能推薦使用者選取更好的查詢條件，而建立的過程包含兩個步驟，首先，作者以
fuzzy narrower 的關係表示 terms 之間的關聯，以建立初步的 fuzzy ontology 架構，所謂的
fuzzy narrower 關係，是指某一個 term a 為另一個 term b 的特別化關係，例如，“Fuzzy 
Clustering is fuzzy narrower than Fuzzy Systems＂可以表示成圖 13 的關係，fuzzy narrower 有
一數值表示兩個 terms 之間的關係程度，關係程度∈ [0,1]；第二步驟，是當資料量過大時，
所建立的 fuzzy ontology 架構勢必會很大，而其中也許會包含部份不必要的關聯，如圖 13
所示，“Fuzzy Systems＂與“Fuzzy C-means Algorithm＂的關係可以透過“Fuzzy 
Clustering＂間接得到，當有此情況發生時，就必須將這些關係除去以簡化 fuzzy ontology
架構(如圖 14)。 
 
圖 13. 簡化前的 Fuzzy Ontology        圖 14. 簡化後的 Fuzzy Ontology 
Choi[10]將模糊理論應用在網路搜尋引擎，藉由讓使用者輸入模糊項來方便使用者查
詢，此系統結合了 DI(Document Index) 及 PI(Perception Index) 能夠同時處理明確
(keyword-based)及模糊(perception-based)的項目，作者提出PI除了表達方式更接近人類自然
語言外，藉由PI可以建立個人化搜尋及結果排名。系統將模糊查詢分為兩個步驟，先將使
用者查詢條件中明確項目當作篩選條件，再依模糊項的α-cut轉換成為SQL查詢。 
目前的模糊知識管理技術已普遍應用在各領域上，透過正規化模糊知識表示法來擷取
及建立不同領域之模糊知識，透過適當的儲存方式儲存已建立的模糊知識，並以不同的模
糊查詢技術達到知識分享之目標，然而這些模糊管理技術卻面臨以下共通之問題：(1)缺乏
 15
四、研究方法 
為了能夠管理不同種類之模糊知識，並且達到不同知識管理活動間之整合，本研究計
畫使用系統化的知識工程方法來完成模糊知識管理工具，稱之為 Fuzzy Knowledge 
Management (FKM)，包含 Fuzzy Knowledge Modeling、Fuzzy Knowledge Storage 及 Fuzzy 
Knowledge Querying 等三個主要功能，圖 15 顯示 FKM 模糊知識管理方法之架構圖。 
 
圖 15. FKM 模糊知識管理方法之架構圖 
 Fuzzy Knowledge Modeling 負責建立模糊知識模型，知識工程師將擷取的知識經過分析
後，使用一致性的模糊知識表示法建立出此模糊知識的模糊知識模型，此模糊知識表示法
具有描述人類自然語言及輔助模糊知識推理之能力，以組織或表達不同種類之模糊知識。 
 Fuzzy Knowledge Storage 負責模糊知識模型之儲存，我們採用階層式的 ontology 系統
將建立之模糊知識模型分類並加以儲存，在 ontology 系統中，上層的模糊知識模型可用來
定義子領域之間的共同認知，下層的模糊知識模型則可用來描述各個子領域的特定知識。 
 Fuzzy Knowledge Querying 提供模糊知識之查詢，透過我們提出的 Fuzzy knowledge 
querying language(FKQL)查詢語言，系統經由比對及推理已建立之模糊知識模型來取得模糊
知識，以達到知識重複使用、傳播及分享之目標，而模糊知識查詢結果之評估則可引導模
糊知識進行更新的程序。 
4.1 Fuzzy Knowledge Modeling 
為了組織與表達各種不同類型的模糊知識，我們將 Conceptual Graphs(CGs) [24,41]知識
表示法予以模糊化來建立模糊知識模型，CGs 是知識工程領域常用之正規知識表示法，我
們引入模糊邏輯理論之概念，擴充為 FCGs 模糊知識表示法，以提供模糊知識管理的正規
化基礎。 
 由於真實世界中的情況或知識經常是以各種不同的方式呈現其不確定性及不明確性，
因此，探討各種不同層面的模糊化有助於將模糊理論導入概念圖形法(CGs)中，並建立各種
模糊知識之模型。許多研究文獻探討了模糊性(fuzziness)的分類，我們可整理出如表 2 模糊
型態的各種截面分類，模糊性可以在四個層面下被分類，分別為：資訊(information)、觀點
 17
糊(perceptual fuzziness)、語意模糊(linguistic fuzziness)、命題模糊(propositional fuzziness)及
關係模糊(relational fuzziness)。感知模糊描述實體和其型態名稱之間的相符程度；語意模糊
則描述在實體屬性中各種不精確量度的語意；命題模糊描述一個具不確定性 proposition 的
信心程度量度；而關係模糊則描述對於具不確定性關係的信心程度量度。 
 在分析模糊型態的分類後，我們將進一步探討如何利用 FCGs 描述不同類型之模糊知
識，並建立其模糊知識模型，除此之外，由於我們的系統採用 FuzzyCLIPS 的應用程式進行
模糊知識的推理，因此，我們必須探討如何將模糊知識模型轉換成 FuzzyCLIPS 程式語言，
以進行推理之程序。 
4.1.1 利用 Fuzzy Conceptual Graphs 建立模糊知識模型 
在 FCGs 中，我們使用(1) concept 和其 referent 之間的相符程度來表達感知模糊
(perceptual fuzziness)， (2) 屬性的模糊量度值來表達本質模糊 (intrinsic)和語言模糊
(linguistic)，(3) context 和 situation 的不確定性量度來表達命題模糊(propositional)，(4) actor
和 situation 的 constrain 模糊量度來表達資訊模糊(informational)，(5) relation 的不確定性量
度來表達關係模糊 (relational)， (6) concept 中 measure 的隸屬函數來表達數量模糊
(cardinality)，(7) type hierarchy 中 type 之間的相符程度來表達 gen-spec 模糊，(8) demon 狀
態轉換的信心程度來表達行為模糊(behavior)。 
 此外，由相關的文獻[1,22,30,42]指出，真實世界中須描述的基本知識元件包括：
objects、relations、structure、context、situation、constrain、function 及 behavior 等，在我們
的模糊知識管理工具裡，將使用一致性的模糊知識表示法 FCGs 來表達這些不同類型的知
識元件。以下，我們定義如何以模糊化的概念圖形元件表示這些模糊化的知識元件。 
 Fuzzy Object 
 模糊物件可以用 fuzzy concept 來表示，fuzzy concept 可以表達 perceptual fuzziness 及
linguistic fuzziness 兩種模糊特性，perceptual fuzziness 描述某一物件與某一模糊概念的符合
程度，例如，好投手是一個模糊概念，我們可以用王建民符合好投手的程度為 0.9 來表達
此感知的模糊特性；另一方面，linguistic fuzziness 則用以描述物件屬性中的模糊化語意，
例如，我們要描述身高是高的，可以用一個 high 的模糊集合來描述此屬性的模糊量度。 
使用一個模糊集合 }))(,{(~ ~ UxxxT T ∈= μ 表示一個模糊概念型態T~ ，因此，模糊概念的
FCGs 可表示為： 
 19
 Fuzzy Relation 
 模糊關係可以用 CF 值(Certainty Factor)表示對於此關係的確定程度，CF∈[0,1]，沒有
給予 CF 值時將視為 CF=1。例如，某一部電腦被感染 Autorun 病毒的確定程度為 0.8，可以
表示成圖 18 的 FCGs。 
 
圖 18. 模糊關係的確定程度 
 Fuzziness in Structure  
 結構關係可分為 assembly structure 及 classification structure 兩種。assembly structure 表
示多個 fuzzy concept 與 relation 之間的組合關係，可以直接用 FCGs 的 fuzzy concept 及 fuzzy 
relation 元件來表示，例如，高階 LCD 螢幕包含消耗電量低、亮點少、dpi 值高、反應時間
快、螢幕大及可視角度大等屬性，可以表示成圖 19： 
 
圖 19. Assembly structures 的 FCGs 
Classification structures 則表示模糊概念型態間(fuzzy concept type)的包含關係及其程
度，以 fuzzy type hierarchy 的方式描述特別化與一般化關係，例如，硬碟屬於存取速度快
的儲存裝置的程度為 0.9，光碟屬於存取速度快的儲存裝置的程度為 0.7，及隨身碟屬於存
取速度快的儲存裝置的程度為 0.7，可以表示成圖 20 的 FCGs： 
 
圖 20. Classification structures 的 FCGs 
 Fuzzy Context and Fuzzy Situation 
 21
掉，同時 assert 所有的 output concept/situation。我們在 fuzzy demon 上加上 CF 值，表示對
此狀態轉換的信心程度，沒有給予 CF 值時將視為 CF=1，fuzzy demon 可用來表達狀態轉換
的 non-determinism，各種不同狀態發生信心程度的可能性機率，其總和加起來為 1。例如，
圖 23 表示 DVD 拷貝機的複製功能，此功能開始於兩片 DVD 光碟片分別放入 DVD-ROM
和 DVD-R/RW 的狀態，此時，按 Start 按鈕會進入 ready-to-copy 狀態，發出一聲長嗶聲後
開始進行複製。若沒按 Start 按鈕，則經過一段時間後，也會自動發出五聲短嗶聲後進入複
製狀態，一直到拷貝機發出兩聲長嗶聲代表複製完成。此外，若拷貝機發出三聲短嗶聲則
代表 50%的可能性(CF=0.5)為來源光碟片無法讀取，另有 50%的可能性為目地光碟片無法
讀取，在這些狀態下有 80%的可能性(CF=0.8)必須更換新的光碟片，另有 20%的可能性僅
須調整一下再重新讀取光碟片即可。 
 
圖 23. Fuzzy Demon 表達功能與行為 
4.1.2 將模糊知識轉換成 FuzzyCLIPS 程式語言 
 為了能達到自動化模糊知識推理，我們採用 FuzzyCLIPS 專家系統程式語言達到此目
的，FuzzyCLIPS 是 CLIPS 的擴充，除了保有 CLIPS 基本功能外，加入了模糊邏輯理論以
處理模糊化的推理能力。FuzzyCLIPS 包括事實(facts)、規則(rules)及推理引擎(inference 
engine)三種基本元件，推理引擎根據規則進行知識的推理以推論出新的事實，而規則是由
條件式(conditions)及行為式(actions)所組合而成，當規則的所有條件都滿足時，推理引擎將
觸發此規則並執行行為式的所有動作，其中條件式的比對是針對現有的事實做處理，當條
 23
(type-h (super null) (sub external-clock) (relation 1)) 
(type-h (super null) (sub clock-speed) (relation 1)) 
(relation-h (super null) (sub attr) (comformance 1)) 
(deftemplate l2-cache 0 999 ((large (3 0) (8 1)))) 
(deftemplate clock-speed 0 999 ((high (2 0) (4 1)))) 
(deftemplate external-clock 0 999 ((high (100 0) (400 1)))) 
 
圖 24. CPU 效能好的限制條件及 Fuzzy measure 的隸屬函數 
4.2 Fuzzy Knowledge Storage 
 領域相依性是知識的一個重要特性，也就是在不同領域中同一概念名稱的意義可能有
所不同。為了能分類模糊知識並降低複雜度，我們提出一階層式 ontology 分類系統來組織
及儲存模糊化知識模型，如圖25所示，ontology系統是以樹狀架構所建立而成的。在ontology
系統中，每個模糊知識模型都會隸屬於某一特定知識領域及其 ontology，透過父節點及子
節點的關係，可表示一般化知識領域與其特別化知識領域之間的相依關係，而兄弟節點間
的關係，則表示模糊知識模型間擁有共同的基本認知之相依關係；除此之外，透過 ontology
做分類時，相同的概念在不同的知識領域間也可定義出不同的意思，以處理特別化之模糊
知識。而進行模糊知識之查詢時，透過階層式的儲存方式，使用者可選出適當的模糊知識
模型，達成重複利用模糊知識的目的及減少搜尋時的範圍。 
 25
FKQL 模糊查詢語言的語法結構如圖 26 所示，包含以下六個基本語法：use、select、
where、mfunction、threshold 及 max-count。 
 use 
 FKM 模糊知識管理工具採用階層式的 ontology 系統儲存不同領域之知識，不同領域中
的名詞可能會有不同含意，因此，在 FKQL 的語法中，我們提供“use＂語法讓使用者可明
確地選擇適當的 ontology 來提供正確的知識定義。選擇上層的 ontology 可以應用共同的一
般知識定義，選擇下層的 ontology 可以應用各領域個別的知識定義。同時，選擇適當的
ontology 也可以減輕資訊超載的問題，不但減少查詢所需的搜尋空間，而且所查詢得到的
解答知識將會更符合領域所需。 
 select 
 為了讓查詢之問題更加明確，我們提供“select＂語法讓使用者選擇查詢問題，不會有
模稜兩可，有助於知識工作者組織所要查詢的問題重點，同時系統也可以很正確地從查詢
問題所相對應的模糊知識元件中擷取查詢者所要的解答， FKQL 定義了八個不同型態的問
題，這些問題型態分別為：When、Where、Who、Whom、What、Why、How 及 Which 等。
不同的問題型態需要不同的知識元件來解答： 
 (1) When 問題型態的解答，可從一個 fuzzy situation 中，模糊概念型態為 Time 或其子
型態所連結的 fuzzy concept 來比對得出。 
 (2) Where 問題型態的解答，可從一個 fuzzy situation 中，模糊概念型態為 Place 或其子
型態所連結的 fuzzy concept 來比對得出。  
 (3) Who 問題型態的解答，可從一個模糊概念透過模糊關係所連結指向的另一個 fuzzy 
context 或 fuzzy concept 來比對得出。  
 (4) Whom 問題型態的解答，可從一個模糊概念被另一個 fuzzy context 或 fuzzy concept
透過模糊關係連結指向來比對得出。  
 (5) What 問題型態的解答，可從一個包含此 statement 的 fuzzy context 概念圖來比對得
出。  
 27
以減少過多不必要的結果，max-count 為一正整數值。 
4.3.2 FCGs 的圖形比對 
FKM 系統在進行模糊知識查詢時，必須先將 FKQL 模糊查詢產生的 FCGs 與 use 的模
糊知識模型進行比對，取出符合的模糊知識後再執行模糊推理以得到問題的解答。FCGs
表示法由五個基本的圖形元件所組成：fuzzy concept、fuzzy relation、fuzzy context、fuzzy actor
及 fuzzy demon，因此當要計算查詢圖與模糊概念圖間的相似度時，可藉由計算這些基本元
件來完成相似度的運算。透過圖形比對(graph matching)的方式可以比對查詢條件的 FCGs
與模糊知識模型中的 FCGs，先找出相似程度超過 threshold 值的模糊概念圖，再將模糊推
論規則應用在取出的模糊知識上加以推理，以找出使用者所需的解答。 
 兩個 fuzzy concept 間的比對方式，是藉由以下(1)(2)(3)所計算的符合程度做相乘後，得
到最後的比對結果。 
(1) 兩 fuzzy concept type 的符合程度：當兩 type 的名稱相同時，則符合程度為 1；反之，
則透過 type hierarchy 找出其其符合程度。 
(2) 兩 fuzzy concept type 的 referent 間的符合程度：當兩 referent 名稱相同時，則符合
程度為 1；當其中一個為 generic (*)時，符合程度為另一個 referent 與 type 的符合
程度；否則當兩 referent 名稱不相同也不為*時，符合程度為 0。 
(3) 兩 fuzzy concept type 的 measure/cardinality 間的符合程度：當 measure/ cardinality
的名稱相同時，則符合程度為 1；當 cardinality 均為 crisp 的數字型態時，則代入以
下公式求得符合程度，match degree = ( ca(A’) -|ca(A)-ca(A’)| ) / ca(A’)，ca(A’)及 ca(A)
為兩 type 的 cardinality 的 crisp 數值；當 ca(A’)為 fuzzy cardinality 時，則直接將 ca(A)
的數值代入 type A 的隸屬函數計算出符合程度；當兩者皆為 fuzzy 
measure/cardinality 時，則利用 fuzzy composition 求出其符合程度，fuzzy composition
的運算是取兩模糊概念型態的隸屬函數圖形之交點所對應的μ值，當存在兩個交點
時，則取最大的μ值做為最後比對結果。 
 兩個 fuzzy relation 間的比對方式，則是直接比對兩 relation 的名稱以得到最後的比對結
果。當 fuzzy relation 的名稱相同時，符合程度為 1，反之，則必須透過 relation hierarchy 找
出其符合程度。 
 兩個 fuzzy context 間的比對方式，是利用模糊相似性（fuzzy similarity）[23,38]來計算
兩組模糊概念圖之間的相似性，模糊邏輯中的必然性（necessity）可用來表達對查詢圖中的
 29
 
圖 28. Fuzzy Constraint 的限制關係 
此 FKQL 式子會產生如圖 27 的查詢圖，透過 FuzzyCLIPS 的模糊比對可以找到圖 21
的模糊知識模型，FKM 系統會根據此比對結果繼續透過 FCGs 推理規則來對擷取出的模糊
知識作自動推理，找出此兩者對於圖 28 中每個 fuzzy constraint 的符合值，以計算兩 CPU
對於圖 28 中 situation 的符合程度。因此，FKM 系統會將三個 fuzzy constraint 與模糊知識
模型中的現有知識(如圖 29)進行比對。 
     
圖 29. 模糊知識模型中的現有知識 
[CPU:AMD-Athlon64-4200+]對於三個 fuzzy constraint 的符合值分別為 0、0.33、和 0.1，而
[CPU:Intel-PentiumD-3.4G]對於三個 fuzzy constraint 的符合值分別為 0.6、1、和 0.7。經由
圖 13 的 FCGs 推理運算，[CPU:AMD-Athlon64-4200+]→(attr)→ [Performance:@good]的符
合程度為 0*(0.9/2.6)+0.33*(0.8/2.6)+ 0.1*(0.9/2.6)= 0.127，而[CPU:Intel-PentiumD-3.4G] → 
(attr)→[Performance:@good]的符合程度為 0.6*(0.9/2.6)+1*(0.8/2.6)+0.7*(0.9/2.6) = 0.758。因
此，最後的查詢結果為如下所示的排序結果： 
1. [CPU:Intel-pentiumD-3.4G] performance is good, degree of matching = 0.758 
2. [CPU: AMD-Athlon64-4200+] performance is good, degree of matching = 0.127 
 例 2，當欲查詢“哪些 CPU 擁有較大的 L2 Cache”的問題時，其 FKQL 查詢語言如下： 
use D2 
select who 
 31
0.5； 
[CPU: Intel-Celeron-D-346-3.06GHz-533]→(attr)→[L2-Cache:@0.5M] 的符合程度為 (0.5-0)/(2-1) = 
0.5/2 = 0.25； 
[CPU: Intel-Pentium4-(541)-3.2GHz-800]→(attr)→[L2-Cache:@1M] 的符合程度為 (1-0)/(2-1) = 1/2 = 
0.5； 
[CPU: Intel-Core-2-Duo-E6700-2.66GHz-1066]→(attr)→[L2-Cache:@4M] 的符合程度為 1； 
[CPU: Intel-Pentium4-(531)-3.0GHz-800]→(attr)→[L2-Cache:@1M] 的符合程度為 (1-0)/(2-1) = 1/2 = 
0.5； 
由於此 FKQL 查詢語言，包含使用者輸入的符合程度門檻值 0.5 及最大顯示結果筆數 5
筆，因此，系統將排除符合程度不足 0.5 的結果，並依符合程度的高低做排序，結果顯示
如下： 
1. CPU: Intel-Core-2-Duo-E6700-2.66GHz-1066, degree = 1. 
2. CPU: AMD-ATHLON-64X2-AM2-3800+, degree = 0.5. 
3. CPU: AMD-ATHLON-64X2 AM2-5000+, degree = 0.5. 
4. CPU: Intel-Pentium4-524-3.06GHz-533, degree = 0.5. 
5. CPU: Intel-Pentium4-(541)-3.2GHz-800 , degree = 0.5. 
6. CPU: Intel-Pentium4-(531)-3.0GHz-800, degree = 0.5. 
 由於 2 至 6 的結果，其符合程度皆為 0.5，因此，即使使用者設定的最大筆數為五筆，
輸出結果仍顯示六筆資訊。 
 
 
 33
 在接下來的篇幅裡，將進一步對每個 FKM 的使用案例(use case)做詳細地分析，首先是
Fuzzy Knowledge Modeling，此功能提供圖形化方式編輯知識，以 FCGs 表示法來表達知識
及建立模型，FCGs 表示法包含五個基本元件：Concept、Relation、Context、Actor 及 Demon，
除了五個基本元件的編輯功能，也提供了點選節點、連結節點、刪除節點、編輯節點之屬
性以及移動節點等功能。圖 41 顯示 Fuzzy Knowledge Modeling 的使用個案圖，參與者主要
是知識工程師，包含 13 個 use case： 
 1. 新增一個 Concept 節點 
 2. 新增一個 Relation 節點 
 3. 新增一個 Context 節點 
 4. 新增一個 Actor 節點 
 5. 新增一個 Demon 節點 
 6. 點選一個節點 
 7. 連結節點 
 8. 刪除點選節點 
 9. 編輯點選節點之相關屬性 
 10.移動圖形 
 11.改變圖形大小 
 12.清除編輯之模糊知識模型 
 13.儲存編輯之模糊知識模型        
 
圖 41. Fuzzy Knowledge Modeling 的使用案例圖 
 Fuzzy Knowledge Storage 是儲存模糊知識的機制，提供新增、刪除及開啟欲編輯的知
識領域等功能，本功能的參與者為知識工程師，負責建立系統的知識庫。圖 42 顯示 Fuzzy 
Knowledge Storage 的使用個案圖，包含 6 個 use case： 
 35
5.2 物件導向系統分析 
 在系統分析階段，將以循序圖進一步對每個使用個案(use case)作分析及描述單元的功
能，並以套件圖描述系統主要架構。FKM 系統主要以 MVC 架構來設計的，因此系統包含
了三大單元： Presentation Package、Application Package 及 Storage Package。圖 44 顯示 FKM
系統的系統套件及這些套件的關係所呈現出的架構概念圖。 
 
圖 44. FKM 套件圖 
Presentation Package： 
 此 layer 負責系統介面的呈現，提供使用者使用系統功能的操作介面及操作介面之顯示
與更新。本套件實作 FKM 的五個主要操作介面： 
 1. 針對 Fuzzy Knowledge Modeling 功能實作的模糊知識管理介面，本系統提供知識工
程師四個編輯模糊知識的介面以達到截取模糊知識之目的，分別為主要的模糊知識模型之
建立、模糊概念之定義(Type Definition)、定義模糊化概念間的階層關係(Type Hierarchy)和
定義模糊關係(relations)間的階層關係(Relation Hierarchy)；每個編輯介面包含四個功能子介
面：(1)FCGs 元件及編輯功能的選取介面，由 Concepts、Relation、Context、Actor、Demon、
Delete、Clear 及 Save 八種按鍵所組成，(2)畫布介面，提供圖形化繪圖介面繪製模糊知識模
型，及呈現已編輯之模糊知識模型，(3)Ontology 儲存介面，負責存取不同領域之模糊知識，
提供樹狀結構的儲存方式對模糊知識作分類，讓知識工程師清楚知道不同知識領域間的關
係，以提升管理知識的能力，此介面負責 Fuzzy Knowledge Storage 功能的實作，(4)元件屬
性表格，提供知識工程師編輯 FCGs 元件之屬性內容。 
 2. 針對 Fuzzy Knowledge Querying 功能實作的模糊知識查詢介面，設計一個 FKQL 的
輸入介面，提供使用者輸入 FKQL 及啟動 FuzzyCLIPS 進行推理，並將查詢結果呈現於查
詢介面。 
Application Package： 
 此套件負責實作系統主要核心功能，針對操作介面所觸發的事件，都有相對應的處理
動作，包含模糊知識的建立行為、模糊知識的存取動作、元件屬性編輯行為、模糊查詢的
動作及通知 Storage Layer 做知識庫更新的動作等； 
 37
 節點間的關係以單向的箭頭相連結表示，知識工程師透過編輯介面點擊連結按鈕，並
連結兩個圖形節點，當連結的事件發生後，Application Layer 則處理節點相關的屬性內容，
例如，Relation 之屬性內容“from＂及“to＂需做更新，並更新介面相關資訊，如圖 46。 
 
圖 46. 連結圖形節點之循序圖 
 當要刪除已編輯模型之節點時，知識工程師必須先點選欲刪除的節點，並透過編輯介
面點擊刪除的按鈕，當此事件發生時，Application Layer 則處理刪除節點的動作，並更新介
面之相關資訊，如圖 47。而點選節點的動作，知識工程師透過滑鼠點擊已編輯的圖形節點，
交由 Application Layer 取得該節點之屬性內容，並更新該節點的表格內容。 
 
圖 47. 刪除圖形節點之循序圖 
 在點選欲編輯的節點後，知識工程師透過編輯介面的屬性表格，編輯所點選的節點之
屬性內容，Application Layer 則在每次編輯時修改所儲存的屬性內容，並更新介面的表格內
容，如圖 48。 
 39
 
圖 50. 改變圖形大小之循序圖 
 欲清除已編輯之模糊知識模型時，知識工程師透過編輯介面，點擊清除按鍵，當此事
件發生時，Application Layer 將該知識領域的所有節點之屬性內容作清除的動作，並更新介
面資訊，如圖 51。 
 
圖 51. 清除模糊知識模型之循序圖 
 欲儲存已編輯之模糊知識模型時，知識工程師透過編輯介面，點擊儲存按鍵，當此事
件發生時，Application Layer 將該知識領域的所有節點之屬性內容傳送至 Storage Layer 作儲
存的動作，並儲存到資料庫，如圖 52。 
 41
 
圖 54. 刪除選取知識領域之循序圖 
  欲新增新的知識領域，包含新增某知識領域的子節點或兄弟節點，知識工程師透
過編輯介面點選欲新增節點的知識領域，並點擊 Ontology 介面的新增子節點/新增兄弟節點
按鍵，當此事件發生時，Application Layer 負責新增新的樹狀節點，並透過 Storage Layer
從資料庫中新增此知識領域，以及更新 Ontology 介面，如圖 55。 
 
圖 55. 新增知識領域之循序圖 
 欲編輯知識領域的名稱時，知識工程師透過編輯介面，點擊三次欲編輯的知識領域，
並輸入修改的名稱，當此事件發生時，Application Layer 接收修改的知識領域名稱，並透過
Storage Layer 從資料庫中更新此知識領域之名稱，以及更新 Ontology 介面，如圖 56。 
 43
 
圖 58. 清除 FKQL 之循序圖 
5.3 物件導向系統設計 
 在系統設計階段，將進一步說明各個 layer 的細部設計、使用者介面之更新機制及 layer
之間的互動機制，並以 ER Diagram 分析及建立系統的資料模型。 
5.3.1 Presentation Layer 之設計 
 Presentation Layer 是用來呈現系統的操作介面，包含四個編輯知識的介面及一個模糊
知識查詢介面。為了能達到以組合的方式設計操作介面，本系統在設計 Presentation Layer
的介面時，主要由基本的介面元件來完成，例如，JFrame、JPanel 等，如圖 59，MainFrameUI
類別利用 JFrame 建立底層框架，並利用 JPanel 組成系統五個主要功能介面：mainPanel、
TypeDPanel、TypeHPanel、RelationPanel 及 QueryPanel 等操作介面之類別，除此之外，
MainFrameUI 類別也負責系統的啟動，初始系統操作介面。 
 
圖 59. Presentation Layer 之類別圖 
 45
介面的設計，以下我們將探討如何加入 Abstract Factory 設計模式設計 FKM 系統的編輯介
面。為了達到組合的目的，首先必須建立 PanelFactoy 抽象類別定義組合介面的基本流程，
由 mainPanel、TypeDPanel、TypeHPanel 及 RelationHPanel 等類別繼承並實作出組合的程序，
並建立 ButtonPanel、AttributePanel、DomainPanel 及 CanvasPanel 等抽象類別定義出子介面
的抽象部分，而各編輯介面之間，只有使用的功能按鍵有些微差異，因此除了 ButtonPanel
需要四個類別實作出不同功能的子介面，其它子介面只要實作出一個類別，所以我們建立
了 Concrete_AttriburPanel 、 Concrete_DomainPanel 、 Concrete_CanvasPanel 及
mainButtonPanel、TypeDButtonPanel、TypeHButtonPanel 及 RelationHButtonPanel 等七個類
別來實作出組合的元件。加入 Abstract Factory 設計模式後的 Presentation Layer 的類別圖如
圖 60。 
5.3.2 Application Layer 之設計 
 Application Layer 負責系統核心功能處理，針對本系統，Application Layer 主要負責介
面的事件處理及類別間的資料傳送，並通知 Storage Layer 做知識的儲存，當使用者對
Presentation Layer 下達操作指令時，Application Layer 就必須有相對應的處理，因此在本套
件裡，我們將建立 ButtonPanel_Controller、Attribute_Controller、Domain_Controller、
Canvas_Controller 及 RunFClips 等五個類別，如圖 61。 
1. ButtonPanel_Controller：負責點擊繪製節點之按鍵及 save、delete、clear 等按鍵的事件
處理，包含初始節點屬性內容、刪除節點及其相關資料、清除及儲存該知識領域所有元件
屬性內容等動作。 
2. Attribute_Controller：負責編輯屬性表格及利用下拉式選單選取節點時所要處理的動
作，包含更新該節點之屬性內容，及呈現指定節點之屬性內容於 AttributePanel，而
AttributePanel 之屬性表格利用 TableModel_類別負責初始及呈現屬性名稱和內容。 
3. Domain_Controller：負責處理知識領域之管理，包含開啟選取的知識領域之模糊知識
模型及新增、刪除知識領域和編輯名稱等動作，這些動作將直接與 Storage Layer 做新增、
刪除及取得相關的模糊知識元件資料，並及時更新 CanvasPanel 和 AttributePanel 等介面的
內容。 
4. Canvas_Controller：負責繪製及編輯時的處理，例如，連結節點，移動節點、改變大小
等 ， 由 於 我 們 的 CanvasPanel 類 別 實 現 了 滑 鼠 事 件 類 別 (MouseListener 、
MouseMotionListener)，因此可透過滑鼠點擊、拖曳等動作完成模型的建立及呈現點選節點
之屬性內容於 AttributePanel，對於編輯的動作，將更新被修改節點的相關屬性內容。 
 47
 在前一章我們提到介面更新的問題，因此在這節裡，將呈現如何利用 Observer 設計模
式設計 FKM 系統以解決此問題。由於不同介面間存在著不同的相依關係之因素，我們設計
三個 observer interface 來達到介面的同步更新，分別為 main_observer、edit_observer 及
editFV_observer。 
1. main_observer：建立此介面的目的是為了能使各編輯介面及查詢介面的知識領域達到
同步化的更新，這些介面實現了 main_observer 介面，並將自己登錄到被觀察者
Domain_Controller 類別，如圖 63 所示。因此，當編輯介面更新其知識領域時，
Domain_Controller 會通知這五個介面更新其 ontology 的資訊。 
2. edit_observer：建立此介面的目的是為了能同步更新編輯介面的資訊，因此我們將
ButtonPanel、AttributePanel、DomainPanel 及 CanvacPanel 等類別實現 edit_observer 介面
(EditPanel 為四個編輯介面的集合，必非真實類別)，並將自己登錄到各_Controller 類別，以
達到更新的目的，如圖 64。當編輯介面之子介面的資料有更動時，_Controller 類別將會通
知各子介面做即時更新的動作。每個編輯介面為獨立個體，當某一編輯介面的子介面改變
時並不會影響到其他編輯介面。 
3. editFV_observer：建立此介面的目的在於，當元件的屬性資料需要指定模糊值(Fuzzy 
Value)時，例如，Referent 及 Cardinality 兩個屬性，必須開啟模糊值的編輯視窗(分別為
Cardinality_FuzzyValueP 和 Referent_FuzzyValueP 兩編輯視窗的類別)，進行模糊值的編輯及
模糊值的選擇，因此，AttributePanel 必須實現 editFV_observer 介面，並將自己登錄給兩編
輯視窗的類別進行觀察，當使用者確定模糊值並按下確定鍵時，系統將自動指定此模糊值
給該屬性並更新屬性表格內容，如圖 65。 
 
圖 63. 使用 main_observer 之類別圖 
 49
建立一個 DataAccess 類別做為存取資料庫的介面，並利用 VO 設計模式建立 ConceptVO、
RelationVO、ContextVO、ActorVO、DemonVO 及 LinkVO 等六個類別，分別封裝 Concept、
Relation、Context、Actor、Demon 及 Link 等元件的相關屬性內容，包含 shapeA(元件屬性
內容)及 shapeXY(圖形座標位置)等類別，為了能產生及使用這些_VO 類別的物件，我們將
DataAccess 類別移至 Application Layer，負責存取相關資料及封裝這些資料於_VO 等類別，
其中 EditPanel_Controller 為 Button_Controller、Domain_Controller、Attribute_Controller 及
Canvas_Controller 的集合，並非實際類別。在每次開啟知識領域的模糊知識模型時，會存
取一次資料庫，在之後的更新或是刪除動作，都直接對_VO 等類別作修改，只有在儲存時
才再存取資料庫，如此便能漸少存取資料庫的次數，以提升系統運作效能。當然，物件間
也能以_VO 物件做資料傳輸，提升資料傳送的效率，而在_VO 類別的設計上，為了確保只
產生唯一的物件，我們以 Singleton 設計模式設計之。 
 
圖 66. 使用 DAO 及 VO 設計模式之類別圖 
 為了有彈性的存取任何資料庫類型，我們加入 Factory 設計模式達成此目標，由於目前
只使用到 Access 的資料庫，所以現階段的類別圖如圖 67 所示，只有 AccessDAOFactory 類
別產生 AccessConceptDAO、AccessRelationDAO、AccessContextDAO、AccessDemonDAO、
AccessActorDAO 及 AccessLinkDAO 等類別之物件以封裝屬性資料於 VO 物件中，其中，
Access_DAO 等類別實現了_DAO 介面。 
 51
5.3.6 系統資料模型之設計 
 在這節裡，我們將利用 ER Diagram 分析及建立系統的資料模型(如圖 69)，並建立
relational database schema(如圖 70)。 
 
圖 69. 模糊知識管理工具的 ER Diagram 
 
圖 70. 資料庫之關聯表 
5.4 系統實作 
 最後進入系統的實作階段，這階段主要是撰寫類別對應之程式碼，實作出 FKM 系統。
 53
 
圖 71. FKM 系統之套件類別圖 
圖 72 顯示建立模糊知識的編輯介面，視窗左上的部份為繪製節點的選擇鍵及功能選擇
鍵；左下為繪製 FCGs 模糊知識模型的畫布；右上為知識領域管理的子介面，有四個按鍵
負責開啟、刪除及新增知識領域的編輯動作；右下部份為屬性編輯表格及下拉式選單，包
含編輯屬性內容及選擇節點，並有兩個按鍵負責開啟及選取編輯模糊值的視窗(如圖 73、74
所示)。 
 55
    
圖 76. Type Hierarchy 之編輯介面       圖 77. Relation Hierarchy 之編輯介面 
 圖 78 為查詢模糊知識之介面，介面左上為輸入 FKQL 查詢語言的下拉式選單及編輯欄
位，左下部份為呈現結果的子介面，點擊 Run 的按鍵進行模糊知識查詢，點擊 Clear 按鍵
清除及初始 FKQL 及結果介面等資訊；介面右上為 Type Search 功能，藉由下拉選單選取知
識領域範圍，點選要查詢的 Type 種類，輸入 Type 名稱，點擊 Start Search 開始查詢 Type
的定義，結果將呈現於 Type Definition 的子介面。圖 79 為 FuzzyCLIPS 的執行畫面。 
 
圖 78. 模糊知識查詢介面 
 
圖 79. FuzzyCLIPS 程式的執行畫面 
 57
參考文獻 
[1] H.B. Ajroud, A. Jaoua, “Abstraction of  objects by conceptual clustering, ＂ 
Information  Sciences 109:79-94, 1998. 
[2] P. Bosc and O. Pivert. “SQLf: a relational database language for fuzzy querying,” IEEE 
Transactions on Fuzzy Systems, 3(1):1-17, Feb. 1995. 
[3] N.H.M. Caldwell, P.J. Clarkson, P.A. Rodgers, and A.P. Huxor. “Web-based knowledge 
management for distributed design,” IEEE Intelligent Systems, pp. 40-47, May 2000.  
[4] T. H. Cao, P. N. Creasy and V. Wuwongse, “Fuzzy Unification and Resolution Proof 
Procedure for Fuzzy Conceptual Graph Programs,“ In Proceedings of the Fifth international 
Conference on Conceptual Structures: Fulfilling Peirce's Dream, LNAI No.1257, 
Springer-Verlag, pp. 386-400, 1997. 
[5] S.M. Chen,“Representing fuzzy knowledge using extended fuzzy Petri nets,＂Proceedings 
of the Second International Symposium on Uncertainty Modeling and Analysis, College 
Park, Maryland, U.S.A., pp. 339-346, April 1993. 
[6] S.M. Chen, Y.J. Horng, and C.H. Lee, “Fuzzy information retrieval based on 
multi-relationship fuzzy concept networks,” Fuzzy Sets and Systems, vol. 140, no. 1, pp. 
183-205, November 2003.  
[7] S.M. Chen, W.T. Jong. “Fuzzy Query Translation for Relational Database Systems,” IEEE 
Transactions on Systems, Man, and Cybernetics-Part B: Cybernetics, 27(4):714-721, Aug. 
1997. 
[8] S.M. Chen, J.M. Ke, and J.F. Chang, “Knowledge representation using Fuzzy Petri Nets,” 
IEEE Transaction on Knowledge and Data Engineering, vol. 2, no. 3, pp. 311-319, 1990. 
[9] S. M. Chen and J. Y. Wang, “Document retrieval using knowledge-based fuzzy information 
retrieval techniques,” IEEE Transactions on Systems, Man, and Cybernetics, vol. 25, no. 5, 
pp. 793-803, May 1995.  
[10] D.Y. Choi.“Enhancing the power of Web search engines by means of fuzzy 
query,”Decision Support Systems, 35:31-44, 2003. 
[11] J.H. Cook. “XML sets stage for efficient knowledge management,” IT Pro, pp. 55-57, May 
2000. 
[12] Dawei Ding, Qing Li, Bo Feng, Liu Wenyin, “Automatic Annotation of Flash Movies with 
a Fuzzy Semantic Network,” Proc. 1st European Conference on Visual Media Production 
(CVMP2004) (poster), The IEE, Savoy Place, London WC2R 0BL: 15-16 March 2004. 
[13] J. Domingue and Motta. “PlanetOnto: from news publishing to integrated knowledge 
management support,” IEEE Intelligent Systems, pp. 26-32, May 2000. 
[14] A. Farquhar, R. Fikes, and J. Rice. The Ontolingua Server: a Tool for Collaborative 
Ontology Construction. In Proceedings of the 10th Knowledge Acquisition for 
Knowledge-Based Systems Workshop (KAW’96), 1996 
[15] G. Fischer and J. Ostwald. Knowledge management: problems, promises, realities, and 
 59
[32] P. Mulhem, W. Leow, and Y. Lee. “Fuzzy conceptual graphs for matching images of 
natural scenes,” In IJCAI, 2001.  
[33] D.E. O’Leary. “Enterprise knowledge management,” Computer, pp.54-61, Mar. 1998. 
[34] D.E. O’Leary. “ Knowledge-management system: converting and connecting. IEEE 
Intelligent Systems,＂pp.30-33, May. 1998. 
[35] M.N. Omri. “Fuzzy Knowledge Representation Learning and Optimization with Bayesian 
Analysis in Fuzzy Semantic Networks,” Proceedings of ICONIP '99. 6th International 
Conference on Neural Informational Processing, vol. 1, pp. 412-417, Nov. 1999. 
[36] M.N. Omri, C. Tijus , S. Poitrenaud, B. Bouchon-Meunier. “Fuzzy Sets and Semantic Nets 
for On-line Assistance,” Proceedings of the 11th Conference on Artificial Intelligence 
for Applications”, pp. 374-379, Feb. 1995. 
[37] A. Preece, A. Flett, D. Sleeman, D. Curry, N. Meany, and P. Perry. “Better knowledge 
management through knowledge engineering,” IEEE Intelligent Systems, pp. 60-72, Jan. 
2001. 
[38] E. Ruspini. “On the semantics of fuzzy logic.＂ International Journal of Approximate 
Reasoning, 5:45-88, 1991.  
[39] T.L. Saaty. “Exploring the interface between hierarchiness multiples objectives and fuzzy 
sets,＂ Fuzzy Sets and Systems, 1:57-68,1978. 
[40] R. Soodamani and Z.Q. Liu, "Object recognition using fuzzy modeling and fuzzy matching", 
in Proc. IEEE World Congress on Computational Intelligence., 1998, pp. 165-170, Vol. 1 
[41] J.F. Sowa. “Conceptual Structures: Information Proceeding in Mind and Machine,＂ 
Reading, MA:Addison-Wesley, 1984. 
[42] W.T. Tsai, R. Vishuvajjala, D. Zhang, “Verification and validation of knowledge- based 
system,＂ IEEE Transaction on Knowledge and Data Engineering 11(1): 202-212, 1999. 
[43] P.E. van der Vet and N.J.I. Mars, Bottom-Up Construction of Ontologies, IEEE Transactions 
on Knowledge and Data Engineering. Vol. 20, No. 4, pp. 513-526, Jul. 1998. 
[44] A. Tiwana and B. Ramesh. “Integrating knowledge on the web,” IEEE Internet Computing, 
pp. 32-39, May 2001. 
[45] D.H. Widyantot, J. Yen, “Using Fuzzy Ontology for Query Refinement in a Personalized 
Abstract Search Engine,＂ In: Proceedings of Joint 9th IFSA World Congress and 20th 
NAFIPS International Conference, Vancouver, Canada, 2001. 
[46] S. William, T. Austin, “Ontologies＂, IEEE Intelligent systems, pp. 18-19, 1999. 
[47] L.T. Wilson and C.A. Snyder. Knowledge management and IT: how are they related? IT Pro, 
pp.73-75, Mar. 1999. 
[48] V. Wuwongse and M. Manzano. “Fuzzy conceptual graphs,” In G.W. Minean, B. Moulin, 
and J.F. Sowa, editors, Conceputal Graphs for Knowledge Representation, pages 430-449, 
1993. 
[49] V. Wuwongse, and C. H. Tru, “Towards Fuzzy Conceptual Graph Programs,“ In 
Proceedings of the 4th international Conference on Conceptual Structures: Knowledge 
 61
計畫成果自評 
一、研究內容與原計畫相符程度 
本計畫之研究成果與原提案計畫之內容大致上相符，原計畫內容所提出之模糊知識表
示法、模糊推論規則、模糊知識模型、模糊知識儲存、及模糊知識查詢等部分皆已完
成，並實作出可執行的 FKM 系統，相符程度達九成以上。 
二、達成預期目標情況 
本研究計畫已達成預期目標，首先，將概念圖模糊化以作為模糊化知識管理架構的模
糊知識表示法，讓使用者容易了解及表達知識，有助於內隱知識的取得，並可作為建
立模糊知識模型的圖形表示法與正規化基礎。同時，模糊化概念圖的推論規可以提供
模糊知識的驗證與查詢之正規化推論基礎。針對各種不同類型的模糊知識，我們使用
一致性的模糊化概念圖表示法來表達與推論，有助於整合不同類型的模糊知識，並讓
使用者可從所搜尋到的宣告性知識中，進一步應用程序性知識與模糊推論規則來推論
出所需的解答。其次，我們提出模糊知識模型，可以利用模糊化概念圖形法來完整表
示 Mineau [5]所提出的各種知識基本元件，使用一致性的模糊知識表示法來同時表達
宣告性知識與程序性知識。同時，發展一個階層式的 ontology 系統來儲存模糊知識模
型，提供模糊知識的分類機制。最後，提供具語意基礎的 FKQL 模糊化知識查詢語言，
讓使用者可以很方便地查詢所需知識，並可經由模糊推論規則推論出進一步的解答，
以減輕資訊超載的問題。 
三、研究成果之學術或應用價值 
本研究計畫的成果提供下列幾項優點，有助於達成系統化的模糊知識管理： 
● 使用模糊邏輯來擴充知識表示法，使得概念圖形法可以更準確地表達知識的語
意，以及處理知識中的部份確定、部份可能、和部份真實等問題。使用一致性的
FCGs 正規化模糊知識表示法來表達不同類型的模糊知識，有助於模糊知識之整合
與推論。 
● 採用系統化的知識工程方法管理模糊知識有助於不同知識管理活動間之整合，並
以 FuzzyCLIPS 程式語言提供模糊知識查詢自動推論之能力，透過模糊推論規則推
論出進一步的解答，有助於減輕知識超載的問題，並可藉由結果之回饋指引系統
中的模糊知識模型之更新。 
● 以標準化的物件導向軟體工程方法開發 FKM 系統，透過 UML 描述系統需求與系
統規格，並依循 RUP 的開發流程規範，以確保整個軟體專案的品質，使 FKM 系
統具有容易維護之特性。 
● 應用多個 GoF 及 Sun J2EE 的設計模式來設計 FKM 系統架構，使 FKM 系統更具
有彈性及維護能力，有助於未來模糊知識管理工具的更新及修改，並能有效地提
升 FKM 系統執行之效率，此外，透過適當的設計模式能有效地解決開發過程中遭
遇之設計問題。 
