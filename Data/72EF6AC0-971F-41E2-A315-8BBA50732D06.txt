 2
[Warmer03]；此方法亦被應用於 Model 
Driven Architecture（MDA）之中用以
描述模型[Evans03]。 
Bertrand Meyer 將 DBC 的概念實
作於 Eiffel 語言中[Meyer91]，並發展
一個整合開發環境 EiffelStudio 以支援
上述理念[EiffelStudio09]。由於 Eiffel
語言為現今唯一完全直接支援DBC的
商業語言，有許多研究嘗試將 DBC 移
植到其他程式語言中，其中包含 C++ 
[Edwards04][Maley99][Maley01][Ottos
en04] 、 Java [Abercrombie02] 
[Bartezko01] [Contract4J05] [Duncan98] 
[JContract05] [Kramer98] [Leavens99] 
[Lackner02] [Sun02]、C# 與 Dot Net 
[Arnout01][Barnett04][Tran03][Wu04]
、以及 Python [Plösch97]等。在本研究
中我們提出一個在 Java 語言中支援
DBC 的新方法。 
 
三、研究方法 
為了說明本研究所提出方法優於
現有方法之處，我們首先分析目前現
有 Java 工具對於 DBC 的支援，接著說
明本研究方法的設計原則 
 
3.1 現有實作 DBC 方法之分類 
我們比較了 11 種不同的工具，將
其依據下列五種類別加以分類，其結
果如圖 1 所示。 
 
1. Keyword extension: 透 過 擴 充
Java 語言的關鍵字來達到描述合
約的目的，例如 Kopi[Lackner02]。 
2. Naming convention: 合約被描述
在標準的 Java methods 之中，這些
methods 必須依循一定的命名方
式，以模擬 Eiffel 語言中用來定義
合約的關鍵字，例如，jContractor 
[Abercrombie02] 和
Contract4JBeans[Contract4JBeans0
5]。 
3. Contracts in comment: 將合約以
特定的標記（tags）描述在程式的
註 解 中 ， 例 如
iContract[Kramer98] 、
Jass[Bartezko01] 、 JMSAssert 
[JMSAssert08] 、 JML 
[Leavens99] 、 Jcontract 
[JContract05]。 
4. Contracts in Java annotation: 合約
以字串的形式用 Java annotations
來 標 記 ， 例 如 Contract4J5 
[Contract4J05]與 Cona [Cona08]。 
5. Contract in aspect-like construct: 
在此分類中合約被視為一種相當
於 aspect-oriented programming 
(AOP) languages所定義的 aspects
（cross-cutting concerns）。這些
aspects 從 目 標 程 式 （ target 
programs）中抽離出來被各別描
述。屬於此分類的有 HandShake 
[Duncan98]。 
 
 
圖 1：支援合約描述的 Java 工具
分類 
 
 4
合 約 以 新 關 鍵 字 、 comments 、
annotations、aspect-like constructs 描述
的方法將無法被標準的編譯器與 IDE
所直接支援。 
Collocation of contract and target 
(COCAT). 為了提高可讀性與可寫
性，合約應該儘可能與其標註對象靠
近在一起 [Balzer06]。在現有的方法
中，採用新關鍵字、 comments 、
annotations 等方法可以達到此要求。 
Contract specification without 
source code (CSWSC). 現存的軟體元
件或函式庫，通常只提供二進制程式
碼。如果要為這些元件/函式庫撰寫合
約，則 DBC 工具必須要支援合約與原
始程式可以被分別描述的功能。 
Decommissioning impact (DI). 當
DBC 不再被使用時，可被開發者所查
覺得影響，包含語言相容性、程式可
讀性、可了解性等。通常，當開發者
不使用 DBC 時，他們希望能恢復使用
標準的語言、編譯器、IDE。不同的
DBC 方法會造成不同的 DI，哪些有著
較小 DI 的工具將比較容易鼓勵開發者
嘗試使用。例如，如果採用新關鍵字
來描述合約，則當不使用 DBC 而恢復
使用標準的 Java 編譯器，留在程式中
的合約將造成語法錯誤而需要逐一加
以處裡。相反地，如果將合約寫在註
解中，則放棄使用 DBC 除了造成寫在
註解中的合約變的沒有意義之外，將
不會對程式造成任何影響。 
表 1 列出了五種合約描述方法分
類與七種品質屬性的相對關係。以採
用 naming convention 方 法 的
jContractor 為例，其特點為：它符合
source compatible 因為它採用 Java 語
言來描述合約；它會造成 symbolic 
barrier 因為合約被寫在特殊命名規則
的不同方法之中；當合約被違反時，
它 可 以 提 供 行 號 ； 它 滿 足 了
syntax-aware specification 因為合約本
身採用標準的 Java 語言撰寫；它違反
了 collocation 因為合約被寫在分別的
方法之中，與其標註的程式沒有緊密
相連；它允許在沒有原始碼的情況下
撰 寫 合 約 ； 它 達 到 中 等 的
decommissioning impact 因為用來撰寫
合約的方法雖然不會造成語法錯誤，
但是除非將其移除不然將會汙染程式
的介面。 
在我們的評估框架下，開發者將
可以比較客觀地分析 DBC 工具的優缺
點並且判斷是否符合自身所需。例
如，雖然 jContractor 滿足了大多數的
品質屬性，但是其造成 symbolic barrier
的問題使其無法和自動 refactoring 工
具一起使用。因此，如果開發者經常
表 1. 六種合約描述方法與品質因素的分類比較 
 6
 
圖 4：IStack 介面的合約 
 
3.3.3 分開的合約檔案 
 理想上，用 ezContract 所描述的合
約應該相鄰於其所標註的對象。但是
如果我們沒有獲得原始程式碼，例如
由第三方所提供的軟體元件，則便無
法描述合約。為了達到 CSWSC，
ezContract 支援將合約描述在個別的
合約檔案中而不需要原始程式碼。為
了幫類別或介面定義合約檔案，我們
必須新增一個類別/介面，並繼承或實
做所要定義合約的那個類別或介面。
圖 5展示一個為 Stack類別所定義的合
約檔案。這個合約檔案繼承 Stack 類別
並且重新定義 Stack 中的方法以便在
其中撰寫合約，如圖 5 中 4-6 行所示 
 
3.3.4 Markers  
Markers 只是用來標記合約種類
與位置的類別方法與類別成員，其實
作並沒有什麼程式邏輯，參考圖 6 所
展示 Ensure marker 類別的程式碼。為
了避免 marker 類別被不小心誤用，所
以我們並不允許使用者建立 marker 類
別的實體，因此我們將 marker 類別的
建 構 元 宣 告 為 私 有 的 (private 
constructors)。 
 
 
圖 5：合約檔案 
 
 
圖 6：Markers  
 
 
圖 7：ezContract 轉換程式流程  
 
3.4 轉換方法 
 在此我們簡述 ezContract 的轉換
方式，詳細方法可參考 [Cheng07]以及
ezContract 原始碼 [ezContract09]。 
 圖 7說明將採用 ezContract所標註
的合約轉換成可執行程式的流程。在
類別中的合約程式或是合約檔案首先
被標準的 Java 編譯器所處理（在編譯
階段同時會參考我們所開發的 marker
類別），產生 Java bytecode。接著，我
們所開發的 bytecode instrumentor 程式
 8
回報。 
 
4.2 例外處理模式 
例外處理模式與錯誤回報模式不
同之處在於對 checked exception 的判
斷。在此模式下 checked exception 本質
上為可以回復的例外（因為 checked 
exception 在 Java 中預設的意涵為
recoverable），因此當呼叫者捕捉到底
層函式丟出的 checked exception 時，便
立即處理該例外。若是處理失敗並判
定其上一層的呼叫者能夠接續處理，
則轉換成 recoverable exception，反之
轉換成 irrecoverable exception。 
在此模式中 unchecked exception
本 質 上 為 不 以 回 復 ， 因 此 對 於
unchecked exception 的處理與錯誤回
報模式完全相同。值得注意的是，礙
於 client interface 的限制，不能夠轉換
成 recoverable exception 時，要轉換成
具有 recoverable 語意的 irrecoverable 
exception。由於在此模式不會針對
unchecked exception 進行捕捉處理，所
以 丟 出 具 有 recoverable 語 意 的
irrecoverable exception，其上ㄧ層的
exception hander 不會加以處理，故在
Recoverable 與
RecoverableRTException 之間以虛線
表示。 
 
4.3 容錯模式 
容錯模式適用於開發人員對系統
容錯能力有較高的要求時，因此是三
種模式中較為嚴格的一個。此模式認
為 checked 與 unchecked exceptions 本
質上都有可能可以修復，因此呼叫者
對 checked exceptions 的處理與例外處
理模式相同，但是 uncheck exceptions
的處理則是比較謹慎。 
當函式發出 unchecked exception
時，呼叫者必須決定處理與否。是的
話立即進行處理，若處理失敗或是在
一開始時覺得自己不能夠處理的話，
再判斷第二層的呼叫者能不能夠接續
處理。若第二層的呼叫者可以處理，
則轉換成 recoverable exception（因為
 
圖 8：例外處理架構概念圖 
 
 10
z ILog ger： 負責記錄錯誤訊息，與
傳統的 logger 程式不同，ILogger
需要解決錯誤訊息被重複紀錄的
問題（over-logging）[Stelting05] 。 
z IUncaughtExceptionHandler：提供
一個預設的 handler 用以處理未被
捕捉的例外。當我們套用 fault 
reporting model 時 ， 可 利 用
IUncaughtExceptionHandler 來記錄
與回報所有未被捕捉的例外。 
 
五、DBC 工具開發 
有了描述合約的工具 ezContract
以及例外處理的三個模式之後，我們
開發一個支援 DBC 的 Java IDE 工具
組，用以解決 lack of tools support 的問
題。該工具將有效地協助降低 symbolic 
barrier 與 conformance with the Java 
language 所造成的影響。為了使該工具
能夠實際地被軟體開發團隊所使用，
我們將該工具開發成 Eclipse 上的外掛
程式（plug-ins） [Clayberg04]。Eclipse
是目前主流且廣為使用的開放原始碼
Java IDE 與工具開發平台，目前有眾
多的商業產品與研究計畫皆是架構在
Eclipse 平台之上。由於其開放軟體平
台架構的特性，使得工具開發者可以
將不同的工具無縫地整合入 Eclipse 
IDE 之中。藉由此特性，我們開發一組
包 含 contractor builder （ bytecode 
instrumentor）與 contract syntax checker 
and resolution 工具。這些工具可與
Eclipse 的 Java IDE 環境緊密地整合在
一起，提供一個方便、容易使用的 DBC
開發環境。 
 
5.1 Eclipse 架構介紹 
在 Eclipse 架構中，所有的軟體功
能都是以外掛程式的形式呈現。圖 10
為 Eclipse 平台架構與 Java DBC 工具
組之關係示意圖。其中 Platform 
Runtime 與外掛程式架構是 Eclipse 平
台核心的部份，訂定 Eclipse 平台物件
與資料交換的介面並提供基本服務。
其他模組功能分別為：Workspace 提供
了對於軟體專案的管理；Workbench
則是 Eclipse 圖形使用者介面的模組，
由底層的 SWT 與 JFace 圖形使用者介
面元件庫所構成（SWT 與 JFace 類似
Java 的 Swing GUI Toolkit）；Team 負責
提供軟體原始碼控管的支援；Help 則
是提供一個說明文件的管理平台。 
圖 10 右方為使用者所撰寫的工
具，以外掛程式的形式存在。Eclipse
定義了許多擴充點（extension points）
讓外掛程式可以整合入該平台之中。
本計劃所開發之工具就是以外掛程式
的形式整合入 Eclipse 開發環境。 
 
圖 10：以 Eclipse 平台為整合基礎之
架構圖 
 
5.2 Contract syntax checker 設計 
圖 11 為 contract syntax checker 設
計概念圖，其重要概念說明如下： 
ASTVisitor ：負責實作 contract 
syntax checker 功能。在 Eclipse 中 Java
原始程式將以 abstract syntax tree
（AST）的方式呈現，且該 AST 實作
了 Visitor pattern [Gamma95]，因此我
們可藉由提供不同的 visitor 來操作該
 12
bytecode 做後處理並產生 DBC 程式
碼。DBCBuilder 必須繼承 Eclipse 所提
供的 IncrementalProjectBuilder 類別，
其核心程式實作 visitor 設計樣式 []，
圖 11 為其核心程式碼。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
public class DBCBuilder extends IncrementalProjectBuilder { 
    private class DBCResourceDeltaVisitor implements IResourceDeltaVisitor   { 
        public boolean visit(IResourceDelta delta) throws CoreException     { 
            IResource res = delta.getResource();             
            if (res.getType() != IResource.FILE)  return true;             
            String ext = res.getFileExtension(); 
            if ((ext == null) || (!ext.equalsIgnoreCase("java"))) return true; 
            IFile file = (IFile) res.getAdapter(IFile.class); 
            ICompilationUnit cu = JavaCore.createCompilationUnitFrom(file); 
            IType [] types = cu.getTypes();      IType theType = types[0];             
            IMarker[] markers = null;     int depth = IResource.DEPTH_INFINITE; 
         markers = delta.getResource().findMarkers(IMarker.PROBLEM, true, depth); 
            DBCBuilderUtil.clearDBCWarringMarkers(cu.getResource()); 
            if (!DBCBuilderUtil.isSupportingDBC(theType))  { 
                switch (delta.getKind())     { 
                 case IResourceDelta.ADDED: 
                  DBCBuilderUtil.performShouldNotUseDBCCheck(cu); 
                  break; 
                 case IResourceDelta.CHANGED: 
                     DBCBuilderUtil.performShouldNotUseDBCCheck(cu); 
                  break; 
                 default:   break;  }  } 
            else  { 
                switch (delta.getKind())   { 
                 case IResourceDelta.ADDED: 
                  DBCBuilderUtil.performDBCBlockPairCheck(cu); 
                  DBCBuilderUtil.performInsideDBCBlockCheck(cu); 
                  DBCBuilderUtil.performClassInvariantInvokingCheck(cu); 
                  break; 
                 case IResourceDelta.CHANGED: 
                        DBCBuilderUtil.performDBCBlockPairCheck(cu); 
                  DBCBuilderUtil.performInsideDBCBlockCheck(cu); 
                  break; 
                 default:     break;    }    } 
            return true;  } } 
    } 
圖 12：DBCBuilder 程式片斷 
 14
了一個抽象化的概念，用以簡化例外
處理的分析與設計，然而實務上大部
分程式的行為並非遵循 IFTC。例如，
該 model 規定一個軟體元件只能丟出
interface exception (i.e., precondition 
exception) 與 failure exception (無法
成功提供該元件所賦予任務時所丟出
的例外)。但實際上，當軟體元件被執
行時，可能會丟出許多不可預期的 
runtime exceptions（例如硬碟空間不
足、null point exception）由於這些
runtime exceptions，特別是 null point 
exception，可能發生在每一行的程式敘
述中，所以我們不可能將其逐一列舉
為 failure exception。因此，一個軟體
元件的 exceptional activity 並無法僅
依靠  interface exception 與 failure 
exception 來設計。 
另一種套用軟體架構的方法，是
直 接 採 用 所 謂 的 軟 體 架 構 樣 式
(software architecture patterns) 
[Buschmann]。某些特定的軟體架構樣
式，例如 layered architecture，在架構
上已經有若干明確定義的例外處理方
式可供依循 [Buschmann]。例如，如果
一個例外需要跨越不同的 layer，則該
例外應該要被轉換 (wrap) 成上一層
layer 所能了解的型態  (type) 或語
意。但是，對於大部分的 software 
architecture styles 而言，其例外處理的
方式並未被定義。因此，當軟體開發
人 員 直 接 套 用 這 些 software 
architecture patterns，並無法立即得知
如何設計例外處理。 
相較於現有的研究，我們則提出
例外處理軟體架構的概念。我們認為
例外處理本身也應該有一個獨立於應
用程式的例外處理軟體架構。我們所
提出的例外處理軟體架構，可採用演
進式的方法來逐步增強系統的強健
性，同時對於在 Java 語言中如何處理
checked 與 unchecked exceptions 提供
了明確的指導方法。 
 
七、計畫成果自評 
本計劃成功設計並實作一個在
Java 語言中支援依合約設計的新方法
與工具軟體。我們也從軟體架構的角
度探討 Java 例外處理困難之處，並提
出三個漸進式的例外模式來支援 Java
例外處理設計。計劃結果符合原本預
期之目的。 
在與其他相關研究比較之後，我
們的方法同時具有相容於現有 Java 語
言與開發工具，且容易撰寫與閱讀等
特性，為一創新方法。我們所提出的
例外處理架構同時涵蓋 Java 語言的
checked 與 unchecked 例外，並支援演
進式例外處理設計。 
我們研究成果已發表 2 篇國際研
討會論文[Chen06][Chen09]、2 篇 SCI
期刊論文[Chen08][ Chen09]、以及一份
自由軟體[ezContract09]。 
 
八、參考文獻 
[Abercrombie02] P. Abercrombie and M. 
Karaorman, jContractor: Bytecode 
Instrumentation Techniques for 
Implementing Design by Contract in 
Java, in Proceedings of Second 
Workshop on Runtime Verification, 
2002. 
[Anderson81] T. Anderson and P.A. Lee, 
Fault Tolerance: Principles And Practice, 
Prentice-Hall, 1981. 
 16
volume 82, issue 2, 2009, pp. 333-345. 
[Cheng07] Y. C. Cheng, C.-T. Chen, and 
C.-Y. Hsieh, "ezContract: Using Marker 
Library and Bytecode Instrumentation to 
Support Design by Contract in Java," 
Proceedings of the 14th Asia-Pacific 
Software Engineering Conference 
(APSEC 07), December 5-7, 2007, 
Nagoya, Japan. 
[Daconta03] M. C. Daconta, K. T. Smith, 
D. Avondolio, and W. Clay Richardson, 
More Java Pitfalls: 50 New Time-Saving 
Solutions and Workarounds, Wiley, 
2003. 
[Denney05] R. Denney, Succeeding with 
Use Cases : Working Smart to Deliver 
Quality, Addison-Wesley, 2005. 
[Duncan98] A. Duncan and U. Holzle. 
Adding Contracts to Java with 
Handshake. Technical Report 
TRCS98-32, University of California, 
Santa Barbara. Computer Science, 
December 9, 1998. 
[Eclipse09] Eclipse.org, 
http://www.eclipse.org, accessed 2009. 
[Edwards04] S. H. Edwards, M. 
Sitaraman, B. W. Weide, and J. 
Hollingsworth, Contract-Checking 
Wrappers for C++ Classes, IEEE 
Transactions on Software Engineering, 
Vol. 30, no. 11, Nov. 2004. 
[EiffelStudio09] Eiffel Software, Web 
Site, http://www.eiffel.com/, accessed 
Feb. 2009. 
[Evans03] E. Evans, Domain-Driven 
Design: Tackling Complexity in the 
Heart of Software, Addison-Wesley, 
2003. 
[ezContract09], ezContract, 
http://sourceforge.net/projects/ezcontract
. 
[Filho06] F. C. Filho, P. H. da S. Brito, 
and C. M. F. Rubira, “Specification of 
Exception Flow in Software 
Architectures,” Journal of Systems and 
Software, 2006, pp. 1397-1418. 
[Fowler04] M. Fowler, UML Distilled, 
third edition, Addison-Wesley, 1999. 
[Fowler05] M. Fowler, Language 
Workbenches: The Killer-App for 
Domain Specific Languages, 
http://www.martinfowler.com/articles/la
nguageWorkbench.html, 2005.  
[Gamma95] E. Gamma, R. Helm, R. 
Johnson, and J. Vlissides, Design 
Patterns: Elements of Reusable 
Object-Oriented Software, 
Addison-Wesley, 1995. 
[Helm90] R. Helm, I. Holland, and D. 
Gangopadhyay, Contracts: Specifying 
Behavioral Compositions in 
Object-Oriented Systems. In Proc. of 
OOPSLA/ECOOP'90, Ottawa, Ont., 
Canada, 1990. 
[JContract05] JContract, 
http://www.parasoft.com. 
[Jézéquel97] J.-M. Jézéquel and B. 
Meyer: Design by Contract: The 
 18
Exception Handling, Testing and 
Debugging, Prentice hall PTR, 2005. 
[Sun02] Sun Microsystems: Java 
Assertion Facility, 
http://java.sun.com/j2se/1.4/docs/guide/l
ang/assert.html, 2002. 
[Tran03] N. Tran, C. Mingins and D. 
Abramson, Design and Implementation 
of Assertions for the Common Language 
Infrastructure, IEE Proc. on Software, 
Vol. 150, No. 5, Oct. 2003 
[Warmer03] J. Warmer, A. Kleppe, The 
Object Constraint Language: Getting 
Your Models Ready for MDA, 2nd, 
Addison-Wesley, 2003 
[Wu04] R. H. Wu, W. Mitchell, C. 
Zhang, Support for Design by Contract. 
in the C# Programming Language, in 
Journal of Object Technology, vol. 4, no. 
7, September-October 2004, pp. 65-82. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
