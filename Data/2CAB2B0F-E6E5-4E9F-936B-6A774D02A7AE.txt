implemented to navigate an ALV in outdoor 
environment and prove high potential for 
practical application.  
 
 
Figure 1. The flowchart of ALV navigation. 
 
 
Figure 2. The flowchart of correspondence. 
 
2. SYSTEM HARDWARE 
ARCHITECTURE 
 
Figs. 3 and 4 show the architecture and 
prototype of the ALV system respectively in 
the study. A personal computer (PC), 
consisting of AMD 2.02GHz dual core 
processor and 2.0 Gage bytes memory, is used 
to control the system of ALV. Computer 
vision part consists of two color CCD cameras 
and two Picolo image capture cards. They are 
equipped to capture two images with 640x480 
pixels resolution simultaneously. Motor 
control system is divided into two parts. One 
part is direction control by server motor and 
another part is control with DC motor to make 
progress and back. The MPC-3024 motion 
control card of PC is used to communicate 
with the ALV motor control system. The sense 
system is the TDCM3 digital compass. The 
serial port of PC is used to communicate with 
the electric compass. The power of the system 
is supplied through two 400 VA 
Uninterruptible Power Supplies (UPS). The 
UPS and DC power are supplied from two 
12V DC batteries. The language of Microsoft 
Visual C++ is used to develop system and 
RS232 driver. 
 
 
Figure 3. ALV system architecture. 
 
 
Figure 4. The lateral view of ALV. 
 
3. STEREO CORRESPONDING 
 
After camera calibration, we can get the 
3D information of one location in WCS from 
out this mapping is a correlation, that is a 
projective mapping from points to lines, which 
is represented by a matrix F, the fundamental 
matrix. In Fig. 7 the co-ordinate system of the 
left view can be transformed to the right view 
by a translation t from the left camera center 
LC  to the right camera center RC , and the co-
ordinate system can then be transformed by 
the rotation R [6] [8].  
 
 
Figure 7. The fundamental matrix F.  
 
0
~~
=R
T
L uFu                              (1) 
We employ eight feature points as the 
known points in left and right image buffers to 
calculate fundamental matrix. In Eq. (1), we 
can get 
0
33
32
31
23
22
21
13
12
11
1
1
888888888888
111111111111
=
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢
⎣
⎡
f
f
f
f
f
f
f
f
f
vuvvvuvuvuuu
vuvvvuvuvuuu
RRLRLRLLRLRL
RRLRLRLLRLRL
MMMMMMMMM
                                                                         
(
2
) 
i.e. 
0=Af  
Several methods are possible to solve this 
problem 2min Af , we subject to 12 =f . The 
solution is the eigenvector of AAT  associated 
with smallest eigenvalue. 
 
3.3. The Fundamental Matrix with Epipolar 
Geometry 
 
The fundamental matrix is the algebraic 
representation of epipolar geometry. Suppose 
epipolar line Ll  and Rl  are vertical with Ll⊥  
and Rl⊥  respectively. Since 0
~~
=R
T
L uFu  and 
0
~
=⊥L
T
L lu , we can get Eq. (3) 
~
RL uFl =⊥                              (3) 
In the same way, 
~
LTR uFl =⊥                             (4) 
Since 
~
RL uFl =⊥  and 0=⊥ LTL el , we can 
rearrange to 0
~
=LT
T
R eFu .  And 0
~
≠Ru , we 
can get Eq. (5) 
0=LT eF                              (5) 
In the same way, 
0=RFe                               (6) 
In Eq. (13) we can get  
0
1333231
232221
131211
=
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢
⎣
⎡
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢
⎣
⎡
R
v
R
u
e
e
fff
fff
fff
                (7) 
We rearrange Eq. (7) 
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢
⎣
⎡
−
−
−
=⎥⎥⎦
⎤
⎢⎢⎣
⎡
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢
⎣
⎡
33
23
13
3231
2221
1211
f
f
f
e
e
ff
ff
ff
R
v
R
u                 (8) 
i.e.
21 FR
v
R
u
F Ae
eA =⎥⎥⎦
⎤
⎢⎢⎣
⎡
 
Then we can use the linear least square 
method 
( ) 21111 FTFFTFR
v
R
u AAAA
e
e −=⎥⎥⎦
⎤
⎢⎢⎣
⎡
                (9) 
In section 3.2, we calculate the 
fundamental matrix, then we can calculate 
the epipolars and epipolar lines. For example 
in Fig. 8, we select a point in left image 
buffer, we can draw a epipolar line in right 
image and contrariwise. 
 
   
 
Figure 10. Classification of image points 
using cornerR . 
 
   Contours of constant cornerR  are shown by 
the fine lines in Fig.10. cornerR  is positive in 
the corner region, negative in the edge 
regions, and small in the flat region. Finally 
we take the point of local maxima of cornerR  
to be the corner point. 
 
3.5. Finding Candidate Matches by 
Correlation 
 
Any corner point which in left image 
buffer, we can find the corresponding 
epipolar line in right image buffer. Through 
the epipolar line we can find the possible 
points, which could be corresponding to left 
corner point, are close to the epipolar line. 
Then, we should establish a few 
correspondences between left and right 
image buffers. A classical correlation 
technique is used to establish matching 
candidates between the two image buffers 
[12]. 
 
 
Figure 11. Correlation 
 
Given a corner point Lm  in left image 
buffer, we use a correlation window of size 
( ) ( )1212 +×+ nm  centered at this point. Then we 
select the range p , which neighbor to the 
epipolar line in right image buffer, and 
perform a correlation operation on a given 
window between point Lm  in left image 
buffer and all possible points Rjm  lying 
within the search range in the right image. 
The search range reflect some a priori 
knowledge about the disparities between the 
matched points. This is equivalent to 
reducing the search area for a corresponding 
point from the whole image to a given range. 
The correlation score is defined as 
( ) ( ) ( ) ( ) ( )( )( )1212
,,,,
, ++
⎥⎦
⎤⎢⎣
⎡ −++−⎥⎦
⎤⎢⎣
⎡ −++
=
∑ ∑∑ ∑
−= −=−= −=
nm
vuIjviuIvuIjviuI
mmScore
n
ni
m
mj
RRRRRR
n
ni
m
mj
LLLLLL
RL
                                                             (21) 
where 
( ) ( )( )( )1212
,
, ++
++
=
∑ ∑
−= −=
nm
jviuI
vuI
n
ni
m
mj
kkk
kkk                  (22) 
The score of correlation approach to zero 
are identical. A constraint on the correlation 
score is applied in order to select the most 
consistent match. For a given couple of 
points to be considered as a candidate match, 
the correlation score must be lower than a 
given threshold. The threshold we take 
1<Score . If above constraint is fulfilled, we 
say that the pair of points considered is self 
consistent and form a candidate match. For 
each point in the left image buffer, we thus 
have a set of candidate matches from the 
right image buffer. However, the set may be 
possible nil. 
 
3.6. Disambiguation Matches Through 
Relaxed Correlation 
 
Using the correlation technique described 
above, a point in the left image may be paired 
to several points in the right image which we 
call candidate matches. Several techniques 
exist for resolving the matching ambiguities. 
We propose the disambiguating matches 
through relaxed correlation. 
Consider a candidate match ( )RjLi mm ,  where 
L
im  is a point in the left image buffer and Rjm  
is a matching point in the right image buffer. 
Let ( )LimN  and ( )RjmN  be, respectively, the 
neighbors of Lim  and Rjm  within a disc of 
the “max” operator. The measure of matching 
support defined above. After “max” operator, a 
point in left image will match one point in 
right at most. Finally, we sorted the SM in 
decreasing order. Then we take the front of q 
% for our corresponding points. 
  
(a)                                          (b) 
Figure 15. The result of relaxed correlation (a) 
Left image (b) Right image. 
 
3.7. Road Expanded 
We segment the 640x480 pixels to 40x40 
regions. Every region is 16x12 pixels. From 
our realization results the road usually appears 
in the similar saturation. In the several 
corresponding points, we choose the height 
lower than 15 cm to be the road information. 
First, we use the window of size 15x15 
centered at the point, then we calculate the 
average saturation in the window ( ageiS ) [10]. 
Second, we search the region from the point to 
up, left, right, and down. If the region of 
average saturation is lower than Thagei SS +  and 
higher than Thagei SS − , we defined the region is 
road. Until the region of average saturation is 
higher than Thagei SS +  or lower than Thagei SS − , 
we stop the search with this direction, and 
change the search with direction. Above is 
after corresponding to expand the road. In 
order to reduce programming time we will not 
find the corresponding points in every time. So, 
we need the second method to expand the road. 
In second method, first we had calculated the 
all ageiS  in above. Then we search the region 
from the middle of last region to left, right, 
and up. Until the region of average saturation 
is higher than Thagei SS +  or lower than 
Thage
i SS − , we stop the search with this 
direction, and change the search with direction. 
The results of road expanded shown in Fig.16. 
 
   
(a)                                            (b) 
Figure 16. (a) The first method to expand road 
(b) The second method to expand road. 
 
4. ALV NAVIGATION 
 
In this chapter, we will propose a 
navigation approach and fuzzy control the 
motor for the direction with ALV. And 
demonstrate the proposed approach is 
workable and feasible. To navigate like 
human in dynamic outdoor environment, we 
propose an AI-based approach discussed in 
Section 5.2. The proposed approach is on-
line guidance of the ALV which begins 
execution without a priori map. That is 
locally optimal in the sense of minimizing 
the hitting probability based on what is 
currently known about the world. In the 
study we employ an AI-based approach to 
perform path plan [3] [11] and fuzzy control 
[4] [7] to smooth the change direction make 
ALV navigate and avoid obstacle easily on 
road. 
 
4.1. AI-Based Navigation Method 
 
After section 3.7, we can construct the 
local map, we employ the A* search to obtain 
the angle that the wheel has to turn. 
Greedy search cost as ( )nh  minimizes the 
estimated cost to the goal. Unfortunately, it is 
neither optimal nor complete. On the other 
hand, Uniform-cost search cost as ( )ng  
minimizes the cost of the path so far; it is 
optimal and complete, but can be very 
inefficient. It would be nice if we could 
combine these two strategies to get the 
advantages of both. Fortunately, we can 
exactly combine the two evaluation functions 
simply by summing them: 
