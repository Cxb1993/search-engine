I 
1. 中、英文摘要 
在音樂資訊查詢領域(music information retrieval)中，高效率的查詢和過濾系統是
可以提供靈活的服務和應用的關鍵部份所在。與此同時，MusicXML 被認為是其中一
個對音樂的物件可以更有組織作描述的資料格式。基於串流式的資料模組，我們提出
一個有效率的過濾系統，資料格式為 MusicXML。使用者會下達查詢，格式為指定一
個音樂符號序列((Simplified Music Notation Sequence)。在本計劃裡，我們對三個問題
進行研究及探討，包括：橫跨小節(crossing measures)的音符查詢、多音音樂查詢
(Polyphonic music query)以及音符查詢的次序(order)。我們提出一個自動化的方法，並
利用 MusicXML 作為資料格式，使系統更有效率地找出合乎使用者的查詢。 
 
In the research field of music information retrieval, an efficient querying and filtering 
system are critical to provide flexible services and applications. Meanwhile, the 
MusicXML is considered as one of the most popular data format for a better structured 
description on music objects. Based on the streaming data model, we propose an efficient 
filtering system against streaming MusicXML. User queries are specified in Simplified 
Music Notation Sequence. Three key issues are investigated in this system, including query 
notes of crossing measures. Polyphonic music query, and the order of query notes. We 
propose an automation-based method to efficiently resolve user queries against streaming 
MusicXML. 
 
關 鍵 詞 ： XML 串 流 處 理 (Streaming XML processing) ， XPath(XPath) ，
MusicXML(MusicXML)，自動機(automata)。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 2
濾，之後再儲存在利用XPath表示式表達的使用者檔案(User Profiles)內。對於每個過
濾的伺服器，利用XPE特徵去預測出轉換的負苛(load)，並找出最有效的資料分佈狀況。 
[5]則著力於對XML串流中大量的XPath表示式的評估及計算。[5]提出了決定性有
限自動化(Deterministic Finite Automata，DFA)的系統去作評估。但隨著XPath表示式
的數目增加，DFA的大小也會以指數方式上升。因此DFA需要降低其大小以達到其狀
態(states)的數目減少，可透過lazy DFA以完全之。Lazy DFA是處理線性化的XPath表
示式，而分享式的NFA狀態表(shared NFA state table)在[6]中已提出。透過NFA狀態集
(NFA state set)和 DFA狀態去處理XPath表示式的分支部份。 
[7]提出了一個新的逼近方法(approximate method)，這個方法是利用Bloom Filter
去表達path的查詢。為了要改善過濾時的效率，[7]提出了一個新的資料結構，Prefix 
Filter。Prefix Filter可以更有效率降低非後選者的path。但Bloom Filter-based的方法不
能處理過於複雜化的使用者path查詢。例如：XPath表示式中的XP1和XP2。 
[8]提出了自動化的階層式推下變換器(hierarchical pushdown transducer，HPDT)方
法。在這個方法中，一個只有一個XPath的表示式會產生一個HPDT。[8]把XPath的表
示式中的每一個位置步驟(location step)定義為一個推下變換器(pushdown transducer)
樣版。接著將多個pushdown transducer樣版組合起來成為一個 hierarchical pushdown 
transducer HPDT。然後進入系統的串流XML文件與HPDT比較以評估出使用者的查詢
是否符合。 
[9]提出了XPush機器去處理串流式的XML文件。[9]也同樣著力對於同一時間點上
處理多個XPath表示式以及去評估出XPath表示式中的predicate表示式。根據使用者所
下達的多於一個XPath表示式而建立了XPush機器，而串流式的MusicXML也透過
XPush機器作過濾。 
 
3. XPush Machine 
在[9]中所提出的XPush機器可以用來處理串流式的XML文件。同時著力對於同一
時間點上處理多個XPath表示式以及去評估出XPath表示式中的predicate表示式。先前
所提出的XML串流處理精確度並不高，透過XPush機器可以找出一些經常出現在
XPath表示式的predicate表示式(common predicate expressions)及作刪除的動作。基於過
濾系統的效能是受predicate表示式的影嚮, 並由其為評估之參考，因此XPush機器在串
流式的XML文件能更有效率地處理。例如：XP1和XP2為使用者的查詢。predicate表
示式[pitch/step/text() =“A”]為XP1和XP2的common predicate expressions。在此我們對
XPush機器的運作作簡單的說明，如下： 
給予一使用者查詢為XP3，根據 [9]和XP3，首先建立一個Alternating Finite 
Automata(AFA)。 
XP3=/measure/note[pitch/step/text() =“A”and note/pitch/step/text() = “B”] 
 
AFA是一個有ε轉換(transitions)的非決定性有限自動化的系統(Non-Deterministic 
Finite Automata，NDFA)。如Figure 2為根據XP3所建立的AFA。 
 4
 
Figure 4: 外部輸入的串流式MusicXML文件以及輔助stack(auxiliary stack) 
 
我們較有興趣的部份是在處理文字A的時候，根據AFA狀態6，把現在狀態設定為
q1。之後我們處理/step，透過觀察tpop轉換表(transition tables)，我們應該需要把現在的
狀態設定為q３。在我們設定q３為之前，透過觀察tadd轉換表(transition tables)，需要先把
在auxiliary stack上面的元素pop出來，其且與q３作連集(union)。這代表系統在聚集所有
符合狀態的元素。這個過程也稱為call-back函數，由endElement事件(event)所觸發的。
把全部的MusicXML文件處理完後，假若現有的狀態集中有包含到AFA的狀態1，這代
表著MusicXML文件有符合到使用者所下達的查詢XP3。 
 
 
Figure 5: 系統架構 
 
4. 問題(Problem) 
4.1. 使用者查詢 (User Query) 
參考我們的系統架構，如Figure 5，使用者下達的查詢，格式為指定一個音樂符
號序列(Simplified Music Notation Sequence，SMN)。SMN序列包含了7個音高的音符符
號，分別為“(C, D, E, F, G, A, B)”， “(”， “)”和“|”。SMN的符號序列代表著音樂查詢
的音符順序。例如：使用者查詢 |A B | C | ，代表著“A”和“B”為同一個小節，而 “C”
 6
 
Figure 7 (a)：音樂物件的片段  Figure 7 (b)：(a)的MusicXML表示格式. 
 
4.2.3. 音符查詢的順序(The order of query notes) 
音符的音高範圍由A到G。例如：假若使用者查詢的音符順序是ABC，輸入進來
的串流式MusicXML音符是ABC、ACB、BAC、BCA、CAB、CBA。但當中只有ABC
為正確的答案。音符的次序對於詢問音樂物件來說是很重要的，因為不同次序的音
符，在聽起來的時候就會有不一樣的感覺。 
雖然這3項議題是在探討串流式MusicXML文件時才會討論，但是這也可以看作為
處理串流式XML時的基本議題。用在被查詢的音符上的交叉測量(crossing measures)
為一般串流式的XML上的sibling音符查詢。而音符查詢的順序這個議題的本質其實為
一般串流式的XML上的same tag name sibling 音符順序。所以我們的系統不但可應用
於串流式的MusicXML上，連一般的串流式XML也可行。 
 
4.2.4. 問題定義(Problem Formulation) 
Definition 1 一串流伺服器Sp和一系統伺服器Sf。使用者集合 U={u1,u2,…,un}。對
於每個使用者ui(i=1~n)可以下達一組查詢Qi，而Qi則針對Sf以SMN序列表達，對於每
一位使用者ui, Sf會建立一XPush機器Mi (i=1~n)。對於每個由Sp所輸入的MusicXML文
件d，所有在Sf 的Mi會根據d而找出合乎Qi的答案。並把答案傳給相對應之使用者ui。 
 
5. 研究方法(Proposed Method) 
5.1. 音符查詢的交叉測量(Query Notes of Crossing Measures) 
因為使用者不知道有關MusicXML文件屬性中的<measure>，所以會造成使用者會
 8
 
Figure 9: 音符查詢的交叉測量例子。使用者SMN序列：ABC(因為空時限制，我們   
    把<pitch>及<step>忽略) 
 
5.2. 多音音樂查詢(Polyphonic Music Query) 
有時候在同一時間播放多個音符時稱作和音(chord)。因此使用者的查詢可能包含
了chord，而MusicXML利用<chord>和<backup>去表達這些音符。假如這些音符用一
個stem所連接，除了第一個音符外，MusicXML會以<chord>標示。如Figure7。 
若這些音符不是由stem所連接，MusicXML則用<backup>去標示出consequent音符
於多久(duration)後會追溯(trace back)回來。例如：Figure 11表達出第5個音符會在16
個durations後與第1個音符出現在同一個時間點。 
 
Figure 11：多音樂音陣列，使用者SMN序列為(D G) 
 
使用者SMN序列(DG) C中，“D”和“G”是在同一時間點出現，而“C”則是consequent
音符。其extended XPath表示式如下： 
<(/measure[note/pitch/step/text()=”D” and 
note/pitch/step/text()=”G”]) and 
//note/pitch/step/text()=”C”> 
 
“(” 和 “)”之間的表示式代表chord的音符。Figure 10則是根據上面的extended XPath表
示式而建立的AFA。 
 10
最後，當XPush機器利用串流MusicXML去表示出符合的狀態時，系統需要去比
較PMA 第1行中，找出發生於同一時間點之音符。而這個方法可以保證我們可以找出
在輸入進來的串流MusicXML中的chord。 
 
5.3. 查詢音符的順序(The Order of Query Notes) 
給多使用者查詢的SMN序列為ABC，我們需找出存在於串流MusicXML中音符序
列中的順序。根據Figure 8建立出AFA，透過使用者的查詢我們可以知道那些狀態的
順序才是符合的。當處理輸入的串流MusicXML時，我們根據使用查詢的順序去設定
現在的狀態集合。假如輸入的串流MusicXML並不符合使用者查詢的序列，則不予考
慮並處理consequent資料。這樣可以確保系統正確地把輸入的串流MusicXML作順序性
的過濾。 
Figure 12為一個例子。使用者SMN序列為ABC(q1,q2,q3為在XPush機器中的狀態集
合)，當處理輸入的串流MusicXML的第一個音符時，我們找出符合狀態集合的不是
q1。因此我們忽略第一個音符其開始處理第二個音符。符合第二個音符的狀態集合為
q1(為使用者查詢的第二個音符)。假如找出來的不是q2，系統需要重新開始，並與q1
作比較。這個方法可以確保我們所處理的輸入的串流MusicXML與使用者的查詢有一
樣 的 順 序 。
 
Figure 12：查詢音符的順序的例子  
 
6. 實驗 
6.1. 建立層面(Construction Phase) 
Figure 13(a)為XPush機器的狀態數目隨著查詢音符數目增加而成線性成長的圖表
結果。因為使用者查詢中每個音符皆會建立出一個固定數目的XPush機器的狀態。因
此當查詢音符數目上升，XPush機器的狀態也呈線性上升。 
Figure 13(b)為tpop和tadd表格的大小隨著查詢音符的數目增加4~5倍時，而增迅速改
變的圖表結果。XPush機器的狀態數目隨著查詢音符數目增加而成線性成長的圖示。
因為使用者查詢中每個音符代表著XPush機器的狀態。更多XPush機器的狀態代表更
多的tadd組合。所以當查詢音符數增加時，表格的大小也會迅速地成長。 
Figure 13(c)為建立XPush機器所需時間隨著查詢音符的數目增加而增迅速改變的
圖表結果。XPush機器建立時間是以表格(table)大小作為依據。透過上面的討論結果，
當表格大小迅速增加，XPush機器建立時間也會隨著迅速地成長。 
 12
將會是我們另一個未來可以著力研究的地方。當使用者更新了查詢，我們的系統必須
再建立一次。針對於這方面，我們或許可以在舊的XPush機器上建立一個新的XPush
機器。我們相信如何建立出更有效的XPush機器會是一個很有趣的研究題目。 
 
8. 計劃成果自評 
在本計劃中，我們的研究已經達到當初預期的目標。當然，我們希望能夠做得更
好。我們提出了一個自動化的方法去更有效地解決音樂音符查詢，不管輸入格式為
MusicXML或者是一般的XML的文件。未來則希望可以朝這方面作更進一步的研究。 
我 們 的 研 究 已 經 在 International Conference on Multimedia Systems and 
Applications(MSA’07),Las Vegas,Nevada,USA。而我們也將會把這項研究繼續投稿到其
他音樂資訊與data mining等相關的期刊或會議，希望能對這個領域的研究有所幫助。 
 
參考文獻 
[1] A.-T. Chiu and J.-L. Hsu, “An automaton-based filtering system for streaming 
   musicxml,” in Proceedings of the International Conference on Semantic Web and   
   Web Services, 2006, pp. 177–178. 
[2] MusicXML, “http://www.recordare.com/.” 
[3] V. Josifovski, M. Fontoura, and A. Barta,“Querying XML streams,” 
   The VLDB Journal, vol. 14, no. 2, pp. 197–210, April 2005. 
[4] H. Uchiyama, M. Onizuka, and T. Honishi, “Distributed XML stream filtering system  
   with high scalability,” in Proceedings of the 21st International Conference on Data   
   Engineering, 2005, pp.968–977. 
[5] T. J. Green, G. Miklau, M. Onizuka, and D. Suciu, “Processing XML streams with   
  deterministic automata,” in Proceedings of the 9th International Conference on  
  Database Theory, 2002, pp.173–189. 
[6] M. Onizuka, “Light-weight XPath processing of XML stream with deterministic    
  automata,” in Proceedings of Conference on Information and Knowledge Management, 
2003, pp. 342–349. 
[7] X. Gong, W. Qian, Y. Yan, and A. Zhou, “Bloom filter-based XML packets filtering for 
millions of path queries,” in Proceedings of the 21st International Conference on Data 
Engineering, 2005, pp.890–901. 
[8] F. Peng and S. S. Chawathe, “XPath queries on streaming data,” in Proceedings of the  
   ACM SIGMOD International Conference on Management of Data, 2003, pp. 31–442. 
[9] A. K. Gupta and D. Suciu, “Stream processing of XPath queries with predicates,” in  
   Proceedings of the ACM SIGMOD International Conference on Management of Data,     
2003, pp. 419–430. 
o Content analysis and data mining 
o Multimedia processing techniques (audio, image, video,…) 
o Audio and music processing for multimedia 
o Multimedia computing 
 
這些主題跟我的研究領域有相關，其中不乏許多關於多媒體內涵式查詢以及多媒體
資料庫的研究報告，這些研究資料除了讓人對以往熟知的領域有著不同的見解之外，同
時也提供很多新的想法以及目標，讓人不得不印象深刻。 
這次的出席，除了發表論文以外，亦可與同領域的研究學者互相討論，在討論並接
觸許多相關領域的研究成果後，讓人訝異的是，當在與會的過程時，自己竟會產生很多
有趣的想法，這些想法中有些甚至是前所未有，我想，這應該算另外一種新的體驗吧!
這次的 WORLDCOMP 之行，我相信能對未來的學術研究產生更多良性衝擊、並能提升
學術品質。 
based methods” .
In [3], the authors proposed the TurboXPath sys-
tem. The system processes XML documents by for-
let-where constructs of XQuery. The TurboXPath
avoids the translation of the query into a finite state
automaton, but translates the query into a parse tree.
In [4], the authors proposed a distributed XML
stream filtering system. The system filters the in-
coming XML streams and publish the filtered data
by user profiles. User profiles are written in XPath
expressions. The proposed method focuses issue on
forecasting the transfer load for each filtering servers
by XPE features to find the most efficient distribution
of data.
In [5], the authors focus issue on evaluating a large
number of XPath expressions on a XML streams.
They proposed an Deterministic Finite Automaton
(DFA) to address this issue. However, the size of
DFA can be exponential in the number of XPath
expressions. Therefore, DFA must be constructed
lazily for small number of states, called lazy DFA. Be-
cause lazy DFA processes linear XPath expressions,
the shared NFA state table has been proposed in [6].
The Non-Deterministic Finite Automata (NFA) state
set is shared among the DFA states to support the
ability of processing of branching XPath expressions.
In [7], the authors introduced a novel approximate
method, which uses Bloom Filter to represent path
queries. To improve the filtering performance, the
authors introduce a new data structure, Prefix Filter.
Prefix Filter can decrease the number of candidate
paths efficiently. But the Bloom Filter-based method
can not process complicated user path queries, such
as XPath expressions (XP1 and XP2).
In [8], the authors proposed an automaton-
based method, called hierarchical pushdown trans-
ducer (HPDT). In this method, single XPath ex-
pression (user query) constructs a hierarchical push-
down transducer (HPDT). The authors defined push-
down transducer template for each location step in
an XPath expression. Then, lots of pushdown trans-
ducer templates are combined into one hierarchical
pushdown transducer. The incoming streaming XML
documents are navigated through the HPDT to eval-
uate the user query is matched or not.
In [9], XPush Machine has been proposed to pro-
cess streaming XML documents. They also focus is-
sues on processing many XPath expressions in the
same time, and each of the XPath expressions has
many predicate expressions need to be evaluated.
XPush Machine is constructed based on user queries
(more than one XPath expression), and incoming
streaming MusicXML is filtered by XPush Machine.
q0
q1
q2
q3
q4
q5
q6
q7
q8
q9
q10
q11
q12
q13
q14
q15
q16
q17
q18
q19
q20
emptyset
{6}
{10}
{5}
{9}
{5,9}
{4}
{8}
{4,8}
{4,5}
{5,8}
{4,5,8}
{4,9}
{8,9}
{4,8,9}
{4,5,9}
{5,8,9}
{4,5,8,9}
{3}
{7}
{3,7}
……
2
7
8
9
AND
note
pitch
1
measure
3
4
5
note
pitch
İİ
6
A
step
10
step
B
Figure 2: AFA constructed based on XP3, and the
states of XPush machine.
2 XPush machine
XPush machine has been proposed to process stream-
ing XML documents. The authors also focus issues
on processing large number of XPath expressions,
and each of them may have more than one predi-
cate expression need to be evaluated. Previous ap-
proaches of XML stream processing does not scale,
and XPush machine has addressed this issue by iden-
tifying and eliminating common subexpressions in the
XPath expressions. Moreover, XPush machine iden-
tifies and eliminates common predicate expressions
in the XPath expressions. Since the performance of
filtering system is dominated by the predicate ex-
pressions evaluation, XPush machine is efficient for
processing XML stream. For example, XP1 and
XP2 are the user queries. The predicate expres-
sion [pitch/step/text() = “A”] is common to the two
XPath expressions. We briefly describe the execution
of XPush machine roughly as follows.
Given an user query XP3, we first construct the
Alternating Finite Automata (AFA) [9] based on
XP3.
XP3 = /measure[note/pitch/step/text() = “A” and
note/pitch/step/text() = “B”]
Alternating Finite Automata (AFA) is an nonde-
terministic finite automata with ε transition. Fig. 2
shows the corresponding AFA which is constructed
based on XP3.
Then, we construct transition tables for future
look up, including tadd and tpop, as shown in Fig.
3.
The incoming streaming MusicXML document
and the auxiliary stack are described in Fig. 4. The
current state set is above the dotted line, and the
auxiliary stack is below the dotted line. Before pro-
cessing the <measure>, the current state set is q0
Figure 6: (a) A piece of music object. (b) The corre-
sponding MusicXML document of (a).
Figure 7: (a) A piece of music object. (b) The corre-
sponding MusicXML document of (a).
is described by MusicXML. MusicXML employs two
tags to indicate that notes appeared in the same time,
including <chord> and <backup>.
For example, Fig. 7(a) shows a piece of music ob-
ject. The first four notes are appeared in the same
time and connected with a stem (i.e., a chord), and
Fig. 7(b) shows the corresponding MusicXML. Mu-
sicXML will add <chord /> to these notes which
are appeared in the same time, except the first note.
If the notes are appeared in the same time but not
connected with a stem, then MusicXML will add a
<backup> to identify how many duration should the
consequent notes trace back.
The order of query notes: The pitch range of a
note is from A to G. For example, if the order of user
query notes were: A B C, and the order of incoming
streaming MusicXML notes were: A B C, or A C B,
or B A C, or B C A, or C A B, or C B A. Therefore,
XPush machine will match all six incoming stream-
ing MusicXML. However, only the first one (i.e., A
B C) is the correct answer. This is very important
for querying music objects, because different order of
notes are quite disparity for listening.
Although, the three issues emerge from processing
streaming MusicXML. They can be viewed as fun-
damental issues when processing general streaming
XML. The query notes of crossing measures issue is
the sibling nodes query issue in the general stream-
ing XML. The essence of the order of query notes
issue is the order of the same tag name sibling nodes
issue in the general streaming XML. Therefore, our
system can be applied to process not only streaming
MusicXML, but also general streaming XML when
dealing with these issues.
3.3 Problem Formulation
Definition 1 A streaming server Sp and a system
server Sf . User set U = {u1, u2, ..., un}. Each user
ui(i = 1 ∼ n) subscribes a set of queries Qi described
in SMN sequence to Sf , and Sf constructs an XPush
machine Mi(i = 1 ∼ n) for ui. For each incoming
MusicXML document d from Sp, all Mi in Sf will be
evaluated against d to match Qi. The matched results
of Mi decide to forward d to which ui.
4 Proposed Method
4.1 Query Notes of Crossing Mea-
sures
The reason why user query notes may cross many
measures is that user does not know the attribute
of <measure> in MusicXML documents. It means
that this situation happens frequently and must be
solved. This issue can be viewed as query crossing
sibling nodes in XML tree. A stack is employed in
XPush machine to maintain current matched states
of automata against incoming streaming XML. If user
query notes of crossing measures happened, we have
to retain the matched states in the first measure and
combined with other matched states in the next mea-
sure.
For example, the user SMN sequence is: A B C.
This SMN sequence means that user is not sure that
all notes are in the same measure or not, and the
corresponding extended XPath expression will be:
<//note/pitch/step/text() = “A” and
//note/pitch/step/text() = “B” and
//note/pitch/step/text() = “C” >
All expressions described between “ < ” and “ > ”
mean that notes “A,” “B,” and “C” should appear
Figure 11: An example of the polyphonic music array.
User SMN sequence: (D G).
pi,1 is set to the value subtracted the numeral be-
tween <backup> from pi−1,2. Then pi,2 and pi,3 will
maintain the original process procedure.
Fig. 11 shows an example of employing the poly-
phonic music array. The incoming streaming Mu-
sicXML document are described in the top of the fig-
ure. Before the fifth note in the measure, there is
a tag named backup which is responsible to identify
how many duration should the fifth note trace back.
The numeral between <backup> is 16. This implies
that the fifth note should appear with the first note
in the same time.
When applying XPush machine to process in Fig.
11, the AFA is constructed based on user query. After
processing the first </note>, the row 1 of polyphonic
music array p can be easily filled in as follows. p1,1 is
initialized to 0. p1,2 is set to the duration of current
note (i.e., 4), and p1,3 is set to the pitch (range from
A to G) of current note (i.e., D).
After processing the second </note>, the row 2 of
array p is filled in as follows. p2,1 is set to p1,2 (i.e.,
4). p2,2 is set to the sum of current note’s duration
and p2,1 (i.e., 4 + 4 = 8). This means that we aggre-
gate duration of current measure for future use. p2,3
is set to the pitch of current note (i.e., B). The corre-
sponding rows in array p of the third and the fourth
notes are filled in similarly in this way.
The interesting part starts when we process the
</backup>. We know the value between the
<backup> is 16, so the corresponding row of the
consequent note is filled in as follows. p5,1 is set
to the value which is subtracted the numeral be-
tween <backup> from p5−1,2 (i.e., 16− 16 = 0). p5,2
and p5,3 will maintain the original process procedure
(this process procedure is similarly when processing
<chord>).
Finally, when the XPush machine processes the
streaming MusicXML to identify the matched states,
it also needs to compare the column 1 of array p to
find out which notes are appeared in the same time.
This method makes sure that we can find out the
<measure> <note> B </note> <note> A </note> <note> C </note> </measure>
|
|
|
|
|
|
q0 q0
q0
q0
q0
q0
|
|
q0
q0
q0
|
|
q0
q0
|
|
q0
q0
q0
|
|
q1
q0
q0
|
|
q4
q0
|
|
q0
q4
q0
|
|
q0
q4
q0
|
|
q0
q0
=q1? =q1? =q2?
. . .
Figure 12: An example of the order of query notes.
chord in the incoming streaming MusicXML.
4.3 The Order of Query Notes
Given an user query of SMN sequence: A B C, we
need to match the exactly order of note sequence in
the streaming MusicXML. We construct AFA (de-
scribed in Fig. 8) based on user query, hence we
know what order of the matched states should be (by
user query). When processing the incoming stream-
ing MusicXML, we sets current state set based on
the user query order. If the incoming streaming Mu-
sicXML is not matched with the order of user query,
we ignore it and process the consequent data. It
makes sure that system filters incoming streaming
MusicXML in the correct order.
Fig. 12 illustrates an example. The user SMN se-
quence is A B C (i.e., q1, q2, q3 state sets in XPush
machine). When processing the first note of the in-
coming streaming MuiscXML, the matched state set
is not q1. Therefore we ignore the first note and pro-
cess the second note. The matched state set of second
note is q1 (it matches the first note of user query),
then we compare the matched state set of third note
with q2 (second note of user query). If it were not q2,
then we need to start from the beginning to compare
with q1. This method makes sure that we process the
incoming streaming MusicXML with the exact order
of user query.
5 Experiments
5.1 Construction Phase
Fig. 13(a) shows the number of XPush machine
states with varying the number of query notes, the
number of XPush machine states is linearly growing.
This is because that each notes in the user query con-
structs constant number of XPush machine states.
Therefore, when the number of query notes increases,
the number of XPush machine states grows linearly.
Fig. 13(b) shows the table (tpop and tadd) size
with varying the number of query notes. When the
number of query notes increases from 4 to 5, the table
size rapidly grows. This is because more query notes
number implies more XPush machine states. More
XPush machine states means that more combination
