I中文摘要
路徑規劃問題是在具有障礙物的環境
中，按照某個評估標準(如最短路徑長度、
最短行進時間、最小能量消耗等)，規劃一
條從起始點到目標點最優(或次優)的無碰
撞路徑。
採用可視圖表達環境、建立環境模
型，將即時平行路徑規劃中最優路徑問題
轉化成為從起點到目標點經過可視直線的
最短路徑問題，使之成為研究工作的基
礎。
以可視圖模型為基礎，應用蟻群優化
演算法從理論和應用兩個層面研究在動態
環境中即時平行路徑規劃演算法。得到的
結果不僅可直接應用於路徑規劃演算法的
設計與實作，而且還可應用於計算幾何中
相關問題的求解。因此，本研究工作具有
重要理論意義和實際應用價值。實驗結果
顯示，本演算法在大部分情況可取得最佳
解。
關鍵字：路徑規劃、可視圖、蟻行演算法
Abstract
Path planning problem is able to be stated
as follows: in obstacle environment, based on a
certain evaluation criterion(such as the shortest
length of path, the shortest time of moving, the
minimal consuming of energy, and so on),
from start point to destination point, plans a
optimal (or sub-optimal) collision free path.
The visibility graph is used to represent
environment and construct the model of
environment in this project, the optimal path
problem of real-time parallel path planning is
transformed into the problem of shortest path
through visibility line from start point to
destination point, this is the base of the
research.
Baese on the model of visibility graph,
uses the methods of ACO, studies the
algorithm for real-time parallel planning path
in dynamic environment at two levels of theory
and application. The obtained results can not
only been applied to the design and
implementation of algorithm for path planning,
but also been used to solve the problems of
computational geometry. So, this study has the
important theory significance and the practical
application value. Our numerical results show
that the proposed algorithm may obtain the
optimal solution in most case.
Keywords: path planning; visibility graph;
ant algorithm.
2等學者提出在分散交談應用 (distributed
interactive application, DIA)可視路徑尋找之
混合策略模型 [30]。
動態最短路徑計算方式，又稱為路徑
規劃 (path planning)。動態路徑其最短路
徑是外界環境不斷發生變化，亦即，在不
能預測的情况下計算最短路徑。例如在遊
戲中敵人或障礙物不斷移動的情況下。典
型演算法有D*演算法 [31]。D*演算法即
是動態A*演算法（D-Star, Dynamic A*）是
由卡内基美隆機器人中心的Stentz在1994和
1995年两篇文章提出，主要用於機器人探
路。是火星探測器採用的路徑規劃演算
法。D*演算法在動態環境中尋找路徑非常
有效，在往目標點移動的過程中，只需檢
查最短路徑之下一個節點或臨近節點的變
化情況，就如同機器人尋找路徑等情况。
對於遠距離的最短路徑上發生變化，則較
不適用。D* Lite演算法，首先假設從起始
點到目的地之間無任何障礙阻隔，規劃出
一條路徑。繼而在移動過程中，先按照第
一次規劃出的最短路徑前進，每當偵測到
它目前的路徑不能穿越(亦即遇到障礙物)
時，再進行路徑的重新規劃（replanning），
直到抵達目的地為止 [32] 。勢場法
(potential field method)原理是假設目標存在
一較低的勢場，障礙物存在一較高的勢
場，規劃沿著勢場梯度方向前進，如此目
標相當於提供一個吸引力，而障礙物相當
提供了一個排斥力，此方法缺點是會產生
振盪問題 [33-34]。
蟻行演算法(ant system, AS)是近年來
出現的一種新型的模擬進化演算法。它是
由意大利學者M.Dorigo等學者首先提出，
利用蟻群搜尋食物的過程與旅行銷售員問
題(traveling salesman problem, TSP)之間的
相似性，求解TSP問題 [35-36]，獲得很好
成效。隨後，蟻行演算法被用來求解各種
NP-complete問題 [37-40]，顯示其優越
性。Chung等學者，提出了自適應的蟻行
演 算 法 (adaptive ant colony algoritm ，
AACA)，採用確定性選擇和隨機選擇相结
合的策略，在搜尋的過程中動態的調整選
擇的機率，實現了選擇機率的自適性，提
高了演算法的速度和性能 [41]。David
Gorden在其論文中，將動差因素加入到轉
移函數中，以增進其動態環境之適應性
[42]。Bolondi等學者透過將每隻螞蟻分配
到 單 個 的 處 理 機 單 元 上 ， 在
CM-2(Connection Machine）上實現了第一
個求解TSP問題的並行AS演算法 [11]。
Bullnheimer等學者提出了兩種AS演算法的
平 行 模 型 ， 分 別 稱 為 同 步平行實作
（synchronous parallel implementation, SPI）
和部分異步平行實作（partially asynchronous
parallel implementation, PAPI），SPI演算法
中，通訊量和通訊頻率非常高。在PAPI
中，經過一定迭代次數後，各子蟻群之間
交換信息。在時間和加速度方面PAPI比SPI
具有更高的性能，因為在PAPI中減少了子
蟻群之間的通訊 [12]。Talbi等學者設計及
實作ANTabu平行演算法，運用於求解二項
次分配問題 [13]。Michel等學者提出基於
島嶼模型（island model）平行蟻群演算法，
將其嵌入遺傳演算法求解最短超序列問題
（shortest supersequence problem） [14]。
Meddendorf 則將其改良，而採用處理器間
資訊分享之基礎構架 [15]。Randall 與
Lewis 則提出蟻群演算法在分散式系統中
五個通用平行策略 [16]。
由於蟻群演算法的特性，近年來有許
多學者，直接將其應用於路徑規劃，大多
採用正規網格（regular grid）環境表述方式
[17-21]。Hao 提出混合遺傳演算法與蟻群
演算法 [19]。Zhang 提出針對動態未知環
境中移動的機器人，進行滾動路徑規劃
[20]。而 Zhu 則提出演算法探討複雜環境
下機器人路徑規劃，但並未將移動之障礙
物納入考量 [21]。在靜態環境下，有學者
利用鏈接圖法（MAKLINK）作為環境之表
述方式，以 Dijkstra 演算法建立初始的最
短路徑，再運用蟻行演算法針對此路徑，
進行微調，以得到更佳路徑 [22-23]。
四、研究方法
路徑規劃問題涉及環境表述、規劃方
法和路徑搜尋策略，其複雜度極高。在進
行路徑規劃前，必須找出一個適合離散化
(discretization)的基礎以建立圖形。採用可
4由於環境是在動態情況下不斷改變，
因此每隻螞蟻必須根據本身目前所能看見
的區域可視圖，採用平行 ACO 演算法
(parallel ACO algorithm)進行路徑之尋
找、並且依規劃行進至下一個可行位置。
如果已抵達目標點則結束路徑規劃。
否則，偵測各個動態障礙物所移動之新位
置，隨時監視動態環境資訊(DVG)以反應
障礙物之移動、新增及刪除，並調整及更
新可視圖資訊，然後重新規劃(replanning)
路徑。如此重複進行，直到完成為止。在
尋找過程中、仍將目標點當成一個基點，
做為引導螞蟻行進之方向和距離。
定義1:可行域FS為所有可行節點之集合，
禁入域 NFS 為禁入節點之集合。
定義 2:任意可視點間的距離為兩個可視點
之間的連線長度，亦即
22 )()(),( jijiji yyxxggd 
定義 3:螞蟻 k在 ig 的視野域記為 )( igBR ，
而 k在 it 時刻的視野域中的可行域
表示為 )( ii gWk
定義 4:子目標 subg 選擇原則為
),(minmin xubP qpJ  ,其中 p為視野
域內之可行節點。
定義 5:在 t 時間，視野域中靜態障物集合
表示為 SW(t)，移動障物集合表示
為 DW(t)
定義 6:移動障礙物的 t-膨化模型，乃表
示當障礙物之移動方向及速度不確
定下，預測其在將來某時間段 t
內所能到達的區域
定義 7:原始路徑是表示在滾動窗口中不考
慮移動障礙物時所規劃出來的最佳
化路徑
定義 8:原始路徑可避開表示在 ],0[ Tt 時
間區間內，物體 R可依原始路徑行
使而不會與任一移動障礙物碰撞，
反之則稱原始路徑不可避開
定義 9:永久可行域乃是動態障物所無法到
達的可行可視點集合
動態路徑規劃演算法如下：
4.1 蟻行演算法之局部路徑規劃
將 m 隻螞蟻置於 )(tPR ，以 subg 為子目
標，依最近鄰居選擇可視點策略及啟
發函數，選擇並走到下一可行節點。
其步驟如下：
演算法 A
Step0:將m隻螞蟻置於出發點 )(tPR ，並記
錄在禁忌表中 tabuk中
(k=1,2,…,m)。設置循環計數器為
n=0，最大循環次數為 MAX。
Step1: k ,以當前節點 FSg i  為中心，
依最近鄰居可視點選擇策略選擇並
行走至下一節點 jg ，且有
kjiij tabuggWkg  ),( ,節點選擇
演算法如下.並將選擇的節點 j加
到禁忌表 ktabu 中。
)6(,
)()]([
)()]([
)(
)5(
)}()](max{[arg
||
0
k
Zq
iqiq
ijijk
ij
ijij
tabuj
gn
gn
np
S
qqgn
j



 








否則
若
其中， Cj ,螞蟻 k 所選 jg 的節
點，S 由(6)式決定的機率,q 為隨
機數(0<q1), 0q 初始化設定值，
)( jj g 為啟發資訊，在邊 ije 上殘
留費洛蒙強度，z 為螞蟻 k 在當前
節點鄰域內的可行可視點集合，
)(npkij 為螞蟻在n代過程中，k由可
視點 i轉移到可視點 j的機率。
Step2:每一隻螞蟻選擇完一個可視點後，
依下式進行費洛蒙之更新。
)7(
否則,0
走過邊當螞螞,
)()()1()1(
1
1








w
l
ljb
ij
jb
k
ij
k
ijijij
dl
ek
l
Q
nnn


其中， 1Q 為常數， ld 為螞蟻k所走
過的邊數， jbl 為目前已走過的總
6六、參考文獻
[1] Christoph Niederberger, Dejan Radovic,
and Markus Gross, Generic path
planning for real-time applications,
Computer Graphics International,
Proceedings, pp. 299-306, 2004.
[2] E. by Dante Treglia., Game Programming
Gems 3, Charles River Media, Hingham,
MA, 2002.
[3] E. by Mark DeLoura., Game
Programming Gems, Charles River
Media, Hingham, MA, 2000.
[4] E. by Mark DeLoura., Game
Programming Gems 2, Charles River
Media, Hingham, MA, 2001.
[5] E. by Steve Rabin., AI Game
Programming, Wisdom, Charles River
Media, Hingham, MA, 2002.
[6] J. Canny., The Complexity of Robot
Motion Planning, MIT Press, 1988.
[7] V. Scott Gordon, and Zach Matley.,
Evolving Sparse Direction Maps for
Maze Pathfings, Evolutionary
Computation, vol. 1, pp. 835-838, 2004.
[8] Michael J. Fuerstman, Pascal
Deschatelets, Ravi Kane, Alexander
Schwartz, Paul J. A. Kenis, John M.
Deutch, and George M. Whitesides.
Solving mazes using microfluidic
networks, Langmuir, vol. 19, pp.
4714-4722, 2003.
[9] Richard Rasala, Jeff Raab, and Viera K.
Proulx., The SIGCSE 2001 Maze
Demonstration Program,
www.ccs.neu.edu/home/vkp/Papers/Maz
e-sigcse2002.pdf.
[10] David B. Suits., Playing With Mazes,
www.rit.edu/~dbsgsh/MAZES.pdf.
[11] M. Bolondi and M. Bondanza,
Parallelizzazione di un algoritmo per la
risoluzione delproblema del commesso
viaggiatore, Master's thesis,
Dipartimento di Elettronica,
Politecnicodi Milano, Italy, 1993.
[12] B. Bullnheimer, G. Kotsis, and C.
Strauss, Parallelization strategies for the
ant system[R]. Technical Report POM
9-97, Institute of Management Science,
University of Vienna, Austria, 1997.
[13] O. Roux, C. Fonlupt, E. Talbi, and D.
Robilliard, ANTabu –enchanced version
LIL-99-1,
htt[://fmatbhpl.tu-graz.ac.at/%7Ekarisch/
qaplib/, 2001.
[14] R. Michels and M. Middendorf, An ant
system for the shortest common
supersequence problem, Technical
Report 378, Institute AIFB, University of
Karlsruhe, Gemany, June 1998.
[15] M. Middendorf, F. Reischle and H.
Schmeck, Multi colony ant algorithms,
Journal of Heuristics, vol. 8, pp. 305-320,
2002.
[16] M. Randall, and A. Lewis, A parallel
implementation of ant colony
optimization, Journal of parallel and
distributed computing, vol. 62, no. 9, pp.
1421-1432, 2002.
[17] Ying-Tung Hsiao, Cheng-Long Chang,
and Cheng-Chih Chien, Ant colony
