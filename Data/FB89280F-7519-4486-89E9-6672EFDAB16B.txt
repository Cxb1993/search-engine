應用於 ADSL 系統之低成本可變點數 DFT 處理器設計及實現 
“A Low Cost Variable Length DFT Processor Design for ADSL Application” 
計畫編號：NSC94－2215－E－239－005－ 
執行期間：94 年 8 月 1 日至 95 年 7 月 31 日 
主持人：陳漢臣 聯合大學電子工程系 
 
一、 中文摘要 
對於通訊系統上的應用，本研究使用所提出之
低硬體成本群組式分散式算數設計方法來實
現長點數且為可變點數之二的次方長度之離
散傅利葉轉換。我們使用 Cooley-Tukey 演算
法先對離散傅利葉轉換進行分解，再使用
pseudocirculant matrix factorization 演算法對
分解後的離散傅利葉轉換迴旋疊積式進行進
一步的分割，使得一長點數的問題仍可利用低
硬體成本之群組式分散式算數加以實現。在離
散傅利葉轉換的設計中，於演算法層次，我們
還利用了其係數的對稱性，使得在群組式分散
式算數之離散傅利葉轉換設計上可再降低一
半的記憶體成本。與現存的心脈式陣列架構及
其他分散式算數架構之離散弦轉換設計比
較，所提出之群組式分散式算數架構可節省超
過 29% 的延遲時間-硬體成本乘積(delay-area 
product)值。所提出之以群組式分散式算數設
計為基礎的可變點數離散傅利葉轉換架構可
適用於 64/128/256/512/1024/2048/4096 等長
度之離散傅利葉轉換。此外，所提出之架構亦
適用於任意長度之離散傅利葉轉換實現。與現
存的長點數及可變點數 FFT 架構比較，除了潛
在延遲較短及高硬體使用率的優點外，在單位
產出率下，當長度小於 256 時，本架構可節省
超過 9.6% 的硬體成本；因此，所提出的是一
個具相當競爭力的硬體架構實現。除了上述有
關離散弦轉換的應用外，本研究所提出之設計
方法亦適用於任何有關迴旋運算的數位信號
處理方面的應用上。 
英文摘要 
Abstract 
This research presents a power-of-two variable length 
discrete Fourier transform (DFT) design for 
communication systems with the group distributed 
arithmetic (GDA) approach. The proposed up to 4096 
point DFT designs, instead of commonly used FFT, are 
first decomposed into 2-D short length DFT by the 
Cooley-turkey algorithm and are further factorized into 
shorter cyclic convolution form by the pseudocirculant 
factorization algorithm. Then we implement the design by 
the GDA approach that can significantly reduce the 
memory cost by sharing the memory contents. Compared 
with the existing variable-length FFT design, in additional 
to the feature of short latency, the proposed design can 
achieve competitive hardware cost under the same 
throughput rate. 
 
Key words: variable length DFT, distributed arithmetic, 
Cooley-turkey, cyclic preserving partitioning 
 
 
I. Introduction 
The orthogonal frequency division multiplexing 
(OFDM) technique has been widely adopted in high-speed 
data transmission, such as asymmetry digital subscriber 
lines (ADSL), very high speed digital subscriber lines 
(VDSL), and digital audio/video broadcasting (DAB/DVB) 
systems. In these systems, the discrete Fourier transform 
(DFT) plays a main role. Table 1 shows the lengths of 
DFT required in these systems, where the required length 
of DFT is proportional to the data-rate as well as the 
distance. Thus a configurable dedicated hardware for the 
DFT computation with variable length would be desired in 
the various high data-rate communication applications. 
 
Table 1: DFT sizes for several communication systems 
Communication 
system  
DFT length application 
IEEE 802.11a
64 
Wireless 
Ethernet 
HIPERLAN/2 64 Wireless ATM
ADSL 256/512 Internet access
VDSL 512/1024/2048/4096/8192 Internet access
DAB 256/512/1024/2048 Digital Audio 
example shown in (1) 
 
 
III. Algorithm representation of long length 1-D DFT 
For the long-length GDA DFT design, in this section, 
we will derive the presented long-length 1-D DFT 
algorithm, including DFT formulation in cyclic 
convolution and the decomposition issues on long-length 
transform and long-length cyclic convolution. 
 
3.1 1-D DFT in cyclic convolution [13] 
 
For the any length 1-D N-point DFT with an input 
sequence {y(n), n=0,1,…,N-1} is defined as 
∑−
=
−=⋅= 1
0
,110
N
n
 ,...,N,;kWy(n)Y(k) nkN  (2) 
where WN
nk denotes .
2
N
nk
e
π−
 
Using the identity 
[ ] ,)( 
2
1 222 knknkn −−+×=×    (3) 
we can express (2) as  
   ,110);(2
2
−=×= ,...,N,kkTWY(k)
k
N
  (4) 
where 
∑−
=
−=⋅= −
−1
0
,110
2)(
2
1N
n
  ,...,N,;kWx(n)T(k)
kn
N
(5) 
and 
     .)(
2
2
1 n
NWnyx(n) ×=           (6) 
The T(k) in (4) is expressed as a cyclic convolution. 
To facilitate the GDA design of T(k), we expressed T(k) in 
a commutative form as  
∑−
=
⋅+=
−1
0
)(
2)(
2
1N
n
  W)knx(T(k)
n
NN
        (7) 
2
2
1n
NW in (6) denotes the complex multiplication for the 
input sample, and the 2
2k
NW  in (4) denotes the complex 
multiplication for the result of cyclic convolution 
operation. Hence the extra pre-processing and 
post-processing step are necessary for the cyclic 
convolution of any length DFT. However, since the final 
GDA design is bit level approach, these processing steps 
can be easily realized by the CORDIC (CO-ordinate 
Rotation Digital Computer) [14][15] complex multiplier 
that has lower area cost than direct serial multipliers. 
 
3.2 Decomposition of long length DFT 
 
A. Cooly-Tukey Algorithm 
For the long-length 1-D DFT with non-prime length, 
firstly we can apply Cooly-Tukey FFT algorithm [13] to 
decompose a 1-D N-point DFT into a 2-D DFT with the 
lengths of N1 by N2. Based on the common factor map 
(CFM) [13], this algorithm can map the time index n and 
frequency index k in 1-D DFT into the time indices n1, n2 
and frequency indices k1, k2 as 
 
211
212  
kNkk
nnNn
⋅+=
+⋅=
               (8) 
 
where 1,0 111 −≤≤ Nkn , 1,0 222 −≤≤ Nkn . 
Thus, the 1-D N-point DFT can be decomposed into a 2-D 
N1 x N2 DFT as shown in the following 
 
∑
∑
∑ ∑
∑
−
=
−
=
−
=
−
=
−
=
⋅=
⋅⋅=
⋅⋅⎥⎦
⎤⎢⎣
⎡ ⋅+=
+=
−=⋅=
1
0
12
1
0
12
1
0
1
0
212
211
1
0
2
2
22
2
2
2
22
2
12
2
2
22
2
12
1
1
11
1
),(~              
]),([              
)(              
)(              
1,1,0;)()(
N
n
kn
N
N
n
kn
N
kn
N
N
n
kn
N
kn
N
N
n
kn
N
N
n
nk
N
WknG
WWknG
WWWnnNx
kNkY
NkWnxkY L
 (9) 
     where 
12
1
11
1
),( ),(~,)(),( 1212
1
01
21212
kn
N
N
n
kn
N WknGknGWnnNxknG ⋅=⋅+= ∑−
=
 
 
In the above derivation, we can see that Y(k) can be 
viewed as a 1-D N2-point DFT with input ),(
~
12 knG , 
and ),( 12 knG  can be viewed as a 1-D N1-point DFT 
with input x(N2n1+n2). We can obtain ),(
~
12 knG  by 
multiplying ),( 12 knG  with a twiddle factor 12
kn
NW . 
These twiddle factors multiplications can be absorbed into 
the post-processing in the cyclic convolution formulation 
of 1-D N1-point DFT. By realizing the computation of  
),(~ 12 knG  and ),( 12 knG  based on the proposed GDA 
approach, we can achieve the design of long-length 1-D 
DFT 
 
B. Cyclic Preserved Partitioning 
To preserve the cyclic property for GDA design, we 
use the pseudocirculant matrix factorization algorithm [16] 
for further partitioning the long-length cyclic convolution. 
With this algorithm, shown as (10) and (11), the cyclic 
convolution with the length of N can be factorized as the 
factors of N/r and r. 
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
⋅
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
=
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
−
−
−
−
−
−
−
N
N
NN
NN
NN
NN
NN
N
N
v
v
v
v
v
ccccc
ccccc
ccccc
ccccc
ccccc
u
u
u
u
u
1
3
2
1
1132
2113
3211
1321
1321
1
3
2
1
M
L
L
MOM
L
L
L
M
 (10) 
 
architectures to realize this design example illustrated in 
(15).  
 
 
Fig. 2: The GDA architectures to realize this design 
example illustrated in (15). 
 
 
IV. Architecture design 
Fig. 3 shows the block diagram of the proposed 
GDA-based DFT architecture with variable length with the 
Cooley-Turkey decomposition. This architecture consists 
of two configurable GDA units for respectively computing 
the row and column 1-D 8/16/32/64-point DFT, a 
multiplier for performing the twiddle factor multiplications 
serially, and a transpose memory for data transposition. 
錯誤! 找不到參照來源。 shows the block diagram more 
detail with real input data and complex output data. For 
efficiently realizing the twiddle factor multiplications, the 
complex number multiplier with serial manner, such as 
CORDIC processor or the serial multiplier set, can be a 
proper choice combined with DA-based design. In cyclic 
convolution formulation, the architecture in 錯誤! 找不
到參照來源。 can be redrawn as Fig. 5. It is composed of 
serial multiplication for preprocessing, GDA computation 
for Tij ( ), and serial multiplication for post-processing. 
Each the Tij ( ) block can be configured for the 1-D DFT 
computation with different length, where i, j denote the 
computation with real part of input data and real part of 
DFT coefficient (i.e., RR), imaginary part of input data and 
imaginary part of DFT coefficient (i.e., II), real part of 
input data and imaginary part of DFT coefficient (i.e., RI), 
or imaginary part of input data and real part of DFT 
coefficient (i.e., IR). In Fig. 5, we can see that the output 
data of Tij ( ) is sequentially multiplied by the 
post-processing coefficient of row 1-D DFT, the twiddle 
factor, and preprocessing coefficient of column 1-D DFT. 
Thus we can combine the three multiplications, and 
replace with one multiplication only.  
 
),(~ 12 knG),( 12 knG
)( 212 nnNx + )( 211 kNkY +
21nk
NW  
Fig. 3: Block diagram of the proposed variable-length 
DFT architecture 
 
 
 
Fig. 4: Architecture design of the 2-D DFT in cyclic 
convolution formulation 
 
 
Fig. 5: The reduced architecture of 2-D DFT in cyclic 
convolution formulation 
 
 
For the purpose of performing the variable-length 
DFT computation with identical hardware, we adopt the 
pseudocirculant matrix factorization algorithm to factorize 
the cyclic convolution Tij( ) in 1-D DFT with different 
length as the composition of 8-point cyclic convolutions. 
For the case of 64-point cyclic convolution, as shown in 
Fig. 6, the matrix of input data can be decomposed as an 
eight by eight blocked matrix. Since each block in the 
matrix has preserved as an 8-point cyclic convolution, we 
can allocate the computation of every eight row blocks 
into eight 8-point GDAU and sum up the outputs of 
GDAUs to have eight outputs of the 64-point cyclic 
convolution. Observing the matrix form in left side of the 
Fig. 7, we can see that each computation of eight row 
blocks with rotated order can be folded onto the identical 
eight 8-point GDAUs. Totally, eight iterations are needed 
to compute all the outputs of 64-point cyclic convolution. 
For the case of 32-point cyclic convolution, due to it is 
composed of four by four blocked matrix with 
pseudocirculant, as shown in Fig. 7, we can compute every 
eight outputs of the 32-point cyclic convolution by 
summing up the results of four 8-point cyclic convolution. 
With the same amount of GDA computation hardware 
resource, it needs two iterations to compute all the 32 
outputs of 32-point cyclic convolution. With the same way, 
the case of 16-point cyclic convolution can also be 
2
2
1
i
i
n
NW
 
(a) 
 
1-bit 3-D
 rotator
2
2
1
i
i
k
NW
Post-processing
PISO
 groups
Re[Output data]
+
Computing 
GDA-based
Variable-length
TII( )
GDA-based
Variable-length
TRR( )
GDA-based
Variable-length
TIR( )
GDA-based
Variable-length
TRI( )
+
Im[Output data]Im[Input data]Re[Input data]
O
B
U
F groups
O
B
U
F groups
C
O
R
D
IC
/SM
U
L groups
 
(b) 
Fig. 8: Detail architecture of (a) the row 1-D DFT with 
input buffer and (b) the column 1-D DFT with output 
buffer. 
 
 
Fig. 8 shows the proposed variable-length DFT 
design more detail in row stage and column stage, 
including input buffer (IBUF), serial multiplier (SMUL), 
parallel-in-serial-out (PISO), 1-bit three-dimension (3-D) 
rotator, variable-length GDA-based module, and output 
buffer (OBUF). The length of DFT in each stage can be 
configured with 8/16/32/64-point. In the following, we 
will illustrate detail design of the modules in the proposed 
variable-length DFT. 
Similar to most of the DA-based designs, Fig. 9 (a), 
(b), and (c) show the input buffer for serially storing input 
data, the parallel-in serial-out (PISO) module for issuing 
the input data of DA with word-parallel-bit-serial manner, 
and the output buffer for serially outputting the output 
data. 
 
IBUF
D
D
D
D
D
Input data
 
(a) 
 
 
       
(b)                              (c) 
 
Fig. 9: Detail design of (a) input buffer groups, (b) PISO 
groups, and (c) output buffer groups in the proposed 1-D 
DFT architecture. 
 
 
On the consideration of input data permutation for 
GDAUs, according to the formulation of any-length cyclic 
convolution in (2.6), the input data of the eight 8-point 
GDAUs in each of the iterations is block rotated and 
in-block rotated. Then a 1-bit rotator is needed for 
preparing the exact data on the inputs of GDAUs. Since 
the rotator needs to work with different lengths for 
variable-length DFT, a specific 1-bit 3-D barrel rotator is 
designed as Fig. 10 (a). The mode of 1-bit 3-D rotator can 
be decided by three variables for how many bits are 
rotated in a block, how many blocks are rotated in cyclic 
convolution for the chosen length of DFT, and which 
length of DFT is chosen. It performs the in-block rotation 
with 8-bit barrel rotator (BR) in stage 1. For the block 
rotation, in the stage 2, the barrel rotator group (BRG) 
with eight 2-bit barrel rotators is used in 16-point DFT in 
each dimension of the 256-point DFT. In the stage 3, the 
barrel rotator group (BRG) with eight 4-bit barrel rotators 
is used in 32-point DFT in each dimension of the 
1-D DFT architecture. 
 
 
From the eight GDAUs
Adder-group
Adder-group
Adder-group
M
UX
M
UX
To
SMUL group7
Adder-group
Adder-group
Adder-group
M
UX
M
UX
Adder-group
To
SMUL group6
To
SMUL group5
To
SMUL group4
To
SMUL group3
To
SMUL group2
To
SMUL group1
To
SMUL group0
 
Fig.12: Data-flow of the adder-group tree follows the 
GDAUs in the proposed variable-length DFT design. 
 
 
As the formulation mentioned above, the 
multiplications need for pre- and post- processing of the 
1-D DFT in cyclic convolution. For reducing hardware 
cost of the multiplications, we combine the multiplication 
of pre-processing in row DFT and the multiplication of 
post-processing in column DFT with the multiplication of 
twiddle-factor processing such that only one multiplier is 
remained between row DFT and column DFT. With the 
feature of serial manner in DA computation, the complex 
multiplier with serial manner should be a proper choice for 
the multiplication. 
 
 
 
 
Fig. 13: Detail design of serial multiplier groups in the 
proposed 1-D DFT architecture. 
 
 
Since the output data is out of order in the row DFT, 
shown as Fig. 14, for the usage of column DFT, we can 
reorder these data while writing them into the transpose 
memory by using a specific address generator. 
 
 
 
Fig. 14: The transpose memory with the specific address 
generator 
 
 
V. Design evaluation 
In this section, we analyze the complexity of FFT 
algorithm and the proposed GDA-based DFT algorithm at 
first. And then we illustrate the hardware cost evaluation 
of proposed design with the UMC 0.18µm cell-library, and 
compare this design with some of the existing FFT 
designs. 
 
5.1 Complexity Analysis 
Before designing the DFT architecture with GDA 
approach, we intend to analyze the complexities of the 
FFT algorithm and the proposed GDA algorithm first. 
With the Cooley-Tukey algorithm, the computation 
complexity of FFT algorithm is around Nlog2N, including 
1/2Nlog2N computations of complex-multiplication and 
Nlog2N computations of complex-addition, that is 
equivalent to 2Nlog2N computations of real-multiplication 
and 2Nlog2N computations of real-addition. Based on 
Cooley-Tukey algorithm, there are two popular 
architecture designs. One is single processing element (PE) 
design which provides adequate performance with low 
hardware cost. The other is pipeline based design for the 
application with high throughput. Because of regularity, 
modularity, locality, and high throughput with moderate 
hardware cost, one dimensional linear array is more 
popular 錯誤! 找不到參照來源。. Besides, in order to 
compute DFT via FFT, the input data and the intermediate 
results need to be buffered and reordered by using some 
memory buffers, where the size of the memory buffers is 
around N(N-1) words. There are two existing buffering 
strategies proposed for the pipeline FFT architecture [18]. 
One is delay-commutator (DC) architecture. The other is 
delay-feedback (DF) architecture. 
 
 
 
 
5. L2 denotes the word-length of input data. 
 
 
100
1000
10000
100000
1000000
10000000
100000000
0 512 1024 1536 2048 2560 3072 3584 4096
Length of DFT
ha
rd
w
ar
e-
co
st 
(g
at
es
)
FFT
GDA-DFT
 
Fig. 15: Hardware cost of the original FFT versus the 
proposed GDA-based DFT 
 
 
100
1000
10000
100000
1000000
0 256 512 768 1024
Length of DFT
ar
ea
-d
el
ay
 p
ro
du
ct
FFT
GDA-DFT
  
Fig. 16: Delay-area product of the FFT versus the 
proposed GDA-based DFT 
 
 
5.2 Design verification 
Based on the proposed GDA-based 1-D variable 
length DFT architecture as Fig. 8, the number of cycle 
consumed for computing the 64/256/1024/4096-point DFT 
with the 8/16/32/64-point DFT in two dimensions is 
proportional to )8( 3log2 LO N ×− , where N denotes the 
length of 1-D DFT, and L denotes the word-length of 
GDA input data. Referring to the simulation results of the 
DFT with lengths of 8, 16, 32, and 64, we can further 
evaluate the DFT designs with the lengths of 128 (i.e., 8 * 
16), 512 (i.e., 16 * 32), and 2048 (i.e., 32 * 64), 
respectively. However, since the cycle count consumed in 
two stages of 8-point DFT and 16-point DFT in the 
128-point DFT design as well as in the 512- and 
2048-point DFT designs, are not the same, we must take 
the largest one of the two stages. 
We have evaluated the proposed design with UMC 
0.18um cell-library. For fairly compared with the existing 
long-length and variable-length FFT designs [8]-錯誤! 找
不到參照來源。, we eliminate the factor of different 
technology by normalizing all the design areas with the 
normalized index 錯誤! 找不到參照來源。 as (16). As 
the simulation result, except for the advantages of short 
latency and high hardware utilization efficiency in the 
GDA-based design, checked with the hardware cost 
analysis mentioned above, 錯誤! 找不到參照來源。6 
also reveals that the power of two variable-length DFT 
realized with the proposed decomposition approach and 
GDA design can achieve competitive hardware cost under 
the same throughput rate, especially the length of DFT is 
ranged between 64 and 512. Thus the proposed 
variable-length DFT can be a more efficient dedicated 
design to the application of ADSL system. 
 
 
2)18.0/log(
 
umyTechno
AreaAreaNormalized =     (16) 
 
 
 
Table 6: Comparison of the existing FFT designs and our DFT design 
 Bidgt [8] Jia [9] Kuo [10] Pao [11] 
Lin 錯誤! 
找不到參照
來源。 
ours 
DFT size 8192 8192 64 ~ 2048 512 ~ 8192 512~2048 64 ~ 4096 
Algorithm Radix-4 FFT 
Radix-2/4/
8 FFT 
Cached 
FFT 
Radix-4 
DHT-based 
FFT 
Radix-2/4/8 
FFT 
Cooly-Turkey/ 
cyclic convolution/ 
Pseudocirculant 
factorization/GDA DFT 
