I 
 
中文摘要 
為這個多核心嵌入式硬體系統平台打造一組提供可移植性的嵌入式軟體開發工具，從
多核心程式設計模型、多核心編譯器至執行時期最佳化系統，都將考量如何降低多核心應
用程式開發者的負擔，並且提供嵌入式軟體可移植性的需求。因此本計畫將提出多核心嵌
入式可移植性程式開發架構，此架構在靜態時期透過多核心程式設計模型與多核心編譯器
的幫助，能夠輕易地撰寫多核心平行程式，取得編譯時期的優化效果；進而透過執行時期
的最佳化引擎，輔助在系統層級上不容易獲得的優化效果，例如在系統耗能的優化上，需
要應用程式執行時才能正確地評估與優化。透過子計劃C 的系統剖析框架所提供的資訊來
進行靜態時期與執行時期的最佳化；並且子計畫D 將使用本計畫所提出的多核心程式設計
模型，產生高效能且具有可移植性的嵌入式系統應用程式。 
 
關鍵詞：多核心嵌入式硬體系統平台、多核心嵌入式軟體開發工具、多核心程式設計模型、
多核心編譯器最佳化引擎 
 
 
Abstract 
 Multi-core Computing and Embedded Computing recently have become the hottest topics 
under the technology developing trend, and at this time the architecture based on multi-core can 
be considered as the most efficient way to achieve high computation performance and low power 
consumption. Nevertheless an integrated multi-core developing tool is critical for the current 
multi-core embedded systems. Hence the goal of this project is to develop a multi-core 
programming development tool for multi-core embedded systems. This tool includes multi-core 
programming model, multi-core tool chain, and multi-core run time optimization system. The 
multi-core programming model will provide application APIs for programmers to write 
multi-core applications. The multi-core tool chain will provide a set of tools for programmers to 
develop their multi-core programs. The multi-core run-time optimization system will provide 
automatically and dynamically adjust the multi-core program execution behavior in order to get 
better performance. 
This project will provide a full set of multi-core embedded system development tools. In 
addition, specific run time optimization environment will further improves the performance of 
multi-core embedded system without modifying any code for programmers. 
 
Keywords: multi-core embedded systems, multi-core development tool, multi-core programming 
design model, multi-core run time optimization system
1 
 
一、 前言 
為這個多核心嵌入式硬體系統平台打造一組提供可移植性的嵌入式軟體開發工
具，從多核心程式設計模型、多核心編譯器至執行時期最佳化系統，都將考量如何降
低多核心應用程式開發者的負擔，並且提供嵌入式軟體可移植性的需求。因此本計畫
將提出多核心嵌入式可移植性程式開發架構，此架構在靜態時期透過多核心程式設計
模型與多核心編譯器的幫助，能夠輕易地撰寫多核心平行程式，取得編譯時期的優化
效果；進而透過執行時期的最佳化引擎，輔助在系統層級上不容易獲得的優化效果，
例如在系統耗能的優化上，需要應用程式執行時才能正確地評估與優化。透過子計劃
C 的系統剖析框架所提供的資訊來進行靜態時期與執行時期的最佳化；並且子計畫 D 
將使用本計畫所提出的多核心程式設計模型，產生高效能且具有可移植性的嵌入式系
統應用程式。 
 
二、 研究目的 
本子計畫的目的在於提供多核心嵌入式系統的軟體開發環境，要發揮多核心系統
架構所帶來的助益和效能，多核心嵌入式系統程式發展工具是非常重要的。多核心嵌
入式系統程式發展工具不僅可以讓開發人員可以更快速且容易地發展可以有效利用多
核心系統效能的程式，在面對多核心系統的不確定性，也能做一些檢查，讓開發人員
可以開發出正確的程式。為了讓開發人員可以輕鬆的發揮多核心帶來的好處，多核心
嵌入式系統程式發展工具提供了一些應用程式設計介面 (API, Application 
Programming Interface) 來幫助開發人員用更少的程式碼，發揮更多的效能。 
由於多核心系統可以一次執行多個工作，傳統的程式將無法發揮其效能，作業系
統會單純使用對稱多處理器模式(SMP, Symmetric Multi-Processor)來進行排程，多
核心嵌入式系統程式發展工具提出了一套新的程式設計方法，不僅提供了一個快速可
以把傳統程式改寫成可以發揮多核心效的平行處理程式的程式設計模型(Programming 
Model)，亦可讓多核心編譯器來自動尋找程式中的平行度，或混合使用兩種方式來發
揮更大的效能。如此一來將可以大大減少開發人員發展高效能平行處理程式的時間。 
除此之外，多核心嵌入式系統程式發展工具提供了一套全新的方法，可以讓傳統
的程式或是新型的平行處理程式，能在不更改程式的狀況下大幅提升效能。它是一個
全新的而且專注於多核心嵌入式系統的執行引擎，這個執行引擎被稱為「多核心執行
時期最佳化引擎」，它可以在動態執行時期根據程式剖析的結果調整程式的運作與硬
體資源的利用，提高執行時期的效能與負載平衡。動態執行時期的最佳化能夠彌補靜
態編譯時期最佳化的限制，正確地掌握程式的執行流程與工作資料集的大小，進而達
到動態調整排程與資源分配。在目前多核心系統的程式往往以多執行緒的方式運作，
因此透過多核心執行時期最佳化引擎掌握應用程式中多執行緒程式的執行特徵與快取
記憶體的分配，並且採取最有效的排程方式，將成為系統效能提升的關鍵。 
 
三、 文獻探討 
(一)、 Multi-core Compiler 和 Multi-core System 發展現況 
隨著 Multi-core System 系統的普及化[1]，Multi-core Toolkit 也相對的日趨
重要，儘管 Multi-Core Compiler 和 Multi-Core System 的研究目前還在萌芽階段。
不過他們有一個很不起眼的最高指導原則，就是平行化，[2]中提到就編譯器而言基本
上就必須產生高度平行化的指令讓每個 Core 能充分的發揮其效能。就多核心嵌入系
統而言，就是要找出放置多少 Core 最符合效能的前提下最具經濟效益。 
 
3 
 
 
圖二、profiler model 
 
就程式員而言，程式員能做的平行化動作會比編譯器多很多。因為平行的程
式大部份是要更變演算法的，如果平行化這個動作能夠交給程式員來控制，那將
可以得到更多的效能，據統計，編譯器作平行化的效率如果有接近 40%，就已經
是非常好的編譯器了，可是由程式員介入，通常平行化的效率都可以達到 200%以
上。所以導入程式設計模型，在這個研究領域也是非常重要的。程式設計模型推
行的最成功的非 OpenMP [12]莫屬。OpenMP 全名為 Open Multi-Processing，基
本上就是一個多核心的應用程式介面。他主要用來支援共享記憶體的平台，目前
有 C/C++和 Fortran 的介面並且在 Unix 和 Microsoft Windows 都有實作版本。
他主要包含了以下幾個重要的項目： 
 
1. 前端應用程式介面：編譯器指引(compiler directives) 
2. 執行程式庫：OpenMP 的實作版本通常會利用執行程式庫來實踐OpenMP 裡
面所定義的功能 
3. 環境變數：主要用來描述硬體平台。 
 
由於嵌入式系統受到上市時間的影響(Time To Market)，有些程式就無法經
過新的程式設計模型(如 OpenMP)來取得更大的平行度。如此一來，在多核心的環
境中就會有另外一個問題發生：核心空閒。有一些研究指出，可以利用這些空閒
核心來進行執行時期最佳化的動作，這在國內外的研究中，也是屬於萌芽階段。
大部份的執行時期最佳化系統考慮的都是最佳化的部份，大部份都是利用預取、
快取…等來達到效果。不過在多核心的執行時期最佳化系統多半考慮的是執行最
佳化的時機，在平行化的程式在使用多個處理器時進行，顯然不是一個好的主意。
怎樣的時候算是核心空閒，空閒核心的組態，是同質性的，還是異質性的，是多
核心的執行時期最佳化系統比較需要關切的。 
 
四、 研究方法 
為了建立並實作高效能的多核心嵌入式系統發展工具，本計畫提出了三大研究主
軸─多核心程式設計模型、多核心程式開發工具、及多核心執行時期最佳化環境。本
子計畫和其他子計畫的關係，多核心發展工具可以使用在子計畫 A 所產生的嵌入式多
核心系統平台上。子計畫 C 所提供的硬體執行的資訊，可以提供多核心執行時期最佳
環境來判斷空閒的核心的數量和要進行何種執行時期最佳化。另外本計畫提供的多核
心程式模型可以讓子計畫 D 用更短的時間開發出更好的應用程式。 
以下為三大研究主軸的研究方法： 
5 
 
 
圖三、三層式多核心程式開發工具架構圖 
 
以下分述多核心編譯器，二元工具組(組譯器，連結載入器)兩個部分的
研究方法： 
i. 多核心編譯器設計 
本計畫的多核心編譯器會以現有的OpenMP Compiler 的編譯器框架
(Compiler Framework)為基礎，採取三層式的架構，如圖三所示，分別
由前端程式來處理程式語言的頗析和最佳化，然後產生編譯器中間格
式，再由後端程式經由若干個最佳化流程在由程式碼產生器產生平台中
間格式，最後在由編譯器的平台抽象層來進行最後的平台最佳化動作，
並經由自動化產生的平台抽象層程式碼產生器來建立出平台的目的碼。
本計畫的編譯器主要的目標是平行化能力和快速重新轉移目標的能力。
根據平台描述檔的硬體架構來分析程式的平行性來產生對應的多核心指
令碼。 
第一部份是完成多核心程式碼產生器的部分。由於本計畫編譯器必
須用在虛擬平台中，所以他必須能夠產生平台中間格式，再利用平台抽
象層，將平台中間格式轉換成目標平台的二進位程式。由於這個設計可
以讓編譯器在對平台進行一次最佳化，產生更好的程式碼。第二個部份
就是最佳化。多核心編譯器最佳化在於產生高度平行化的指令，產生平
行化的指令最大的困難處在於程式碼之間會有一些相依性 (i.e. 
register flow dependence, register anti dependence, register 
output dependence, memory dependence 等)。一些false dependences
可用一些方法打破(i.e. register renaming, splitting 等)。由於flow 
dependence 比較平凡的編譯器技巧解決，所以會影響parallelization 
的程度，嚴重影響效能，主要會使用speculation execution 的方式來
解決。 
就編譯器實作而言，主要有三個工作項目要進行：前端程式語言頗
析器、後端程式碼產生器、及編譯器最佳化動作。前端語言頗析器的取
得相當容易，GCC 的前端就是一個很好的參考目標。GCC 的前端程式是
開放原始碼，而且有多種語言平台，並且對語言標準性的支援也相當完
善。本計畫編譯器的實作由於需要支援OpenMP的編譯器指引，前端語言
7 
 
台抽象層來建立一些消費模型來影響執行時期狀態分析引擎，並且可以對平
台作一些最佳化，讓執行時期引擎能充分發揮平台的威力。 
 
 
圖四、執行時期最佳化引擎架構圖 
 
五、 執行步驟 
1. 第一年: 
將完成下列項目： 
 多核心程式設計模型 
 建立應用程式介面 
 建立基礎類別庫 
 多核心程式開發工具 
 第一版多核心編譯器(無最佳化) 
 多核心執行時期最佳化環境 
 效能資訊收集介面 
 研究執行時期最佳化的方法 
 研究執行時期狀態分析的模型 
 
2. 第二年: 
將完成下列項目： 
 多核心程式開發工具 
 第二版多核心編譯器(含最佳化) 
 組譯器 
 連結載入器 
 多核心執行時期最佳化環境 
 實作執行時期最佳化引擎 
 實作執行時期狀態分析引擎 
 實作執行時期平台抽象層 
 
 
六、 結果與討論（含結論與建議） 
本計畫透過對多核心程式設計模型原理、與多核心執行時期運作分析的研究，以
多核心程式的標籤式設計模型，能在多核心嵌入式硬體系統平台打造一組提供可移植
性的嵌入式多核心軟體開發工具。從多核心程式設計模型、多核心編譯器至執行時期
9 
 
行緒的方式運作，因此透過多核心執行時期最佳化引擎掌握應用程式中多執行緒
程式的執行特徵與快取記憶體的分配，並且採取最有效的排程方式，將成為系統
效能提升的關鍵。目前整體基礎架構正在建置當中，約六月中旬可完成基礎架構
建置。接著搭配子計畫A目前正在設計的硬體資訊擷取介面去獲取程式執行時期的
資訊，整個資訊擷取介面會在七月底之前完成。 
 
以下將介紹子計畫二在第二年的現有成果。 
4. 多核心程式開發工具(第二年) 
多核心程式開發工具主要包含了多核心編譯器，二元工具組(組譯器，連結載
入器)。第二版多核心編譯器(含最佳化)主要是基於第一年所完成的第一版多核心
編譯器(無最佳化)，經由分析子計畫A: 嵌入式多核心系統平台的特性，並且根據
子計畫D:嵌入式多核心系統應用程式的程式特性，對多核心編譯器進行優化。二
元工具組則是包含了組譯器和連結載入器這些程式執行時必須要的工具。我們以
GCC 所提供的二進位輔助程式為基礎，發展適用於目標平台上的多核心組譯器及
連結載入器。我們已經完成建置工作，並且提供編譯器和其他相關工具給其他子
計畫使用。 
   
5. 多核心執行時期最佳化環境(第二年) 
依據所提出的理論我們實作了兩種不同的多核心編譯器最佳化，分別是利用
資料區塊化及執行緒分組以提升多核心平台快取資源之使用效率和雙核心平台動
態負載平衡最佳化技術這兩種方法: 
 
i. 利用資料區塊化及執行緒分組以提升多核心平台快取資源之
使用效率 
資料區塊化的主要考量是在於資料量大小與快取資源大小之間的關係。根據
快取的大小來進行資料佈局的切割，透過區塊化的方式將全部資料分成數塊能夠
適合快取資源大小的區塊，使得程式在運作時，不再是以全部的資料作為一個計
算輪次(即從頭到尾走過資料一遍，並且在下一輪時重新從頭來過)，而是以資料
區塊作為計算資料的單位(即算完一個區塊，再算下一個區塊)，透過資料區塊化
使得資料再使用(Reuse)的機會提高，便大大降低快取失誤的發生，自更高更快的
階層降低存取的延遲。 
執行緒分組是為了降低一般多執行緒程式在執行上對於快取資源互相爭搶造
成資料相互置換的情形。對於一般的平行程式而言，執行緒之間的資料相依性
(Dependency) 都很低，因此這樣的執行模型將會造成每一個執行緒都是處理不同
區塊的資料，所以所有的執行緒都會同時競爭快取的資源，但若將執行緒做分組
的動作，使得同一組別的執行緒是針對相同的資料區塊，如此也可藉由降低競爭
情形來達到降低快取失誤的目的。 
研究著重於在多核心平台上因應不同的多執行緒架構提出適合的執行模型作
為有效降低快取失誤發生的優化方法，然而不單單是透過提出多執行緒的執行模
型來達到優化，更根據執行模型上實體硬體的快取資源分配多寡，對運算執行時
的目標資料進行良好的分配，所以執行模型與實際快取資源多寡相互牽扯。結合
兩者提出資料區塊化與執行緒分組這個優化技術來降低快取失誤發生的情形。 
本研究之測試程式包含矩陣乘法程式、NAS Parallel Benchmarks(NPB)與
PARKBENCH；在實驗的比較與分析上，除了以GCC作為程式的編譯器，還使用了另
一套編譯器Open64，作為程式效能增進對照實驗的編譯器，圖五及圖六分別為實
11 
 
行緒執行模型，能為平行程式效能帶來多些提升。 
3、針對本研究方法及源碼轉機器碼編譯器在快取資源使用上的改善進行
詳細的分析後，發現到編譯器中的優化機制與本研究中的資料區塊化結合
後，將有助於程式資料的區域性的提升，降低快取失誤發生的次數，增進系
統與程式的執行效能，達到相輔相成的效果。 
 
ii. 雙核心平台動態負載平衡最佳化技術 
在多核心平台上，可能同時有多支不同程式在同時執行，如果在平行程式執
行時沒有考慮到系統資源的使用情況，很可能沒有辦法達到程式的負載平衡，因
此本研究結合了CPU使用率資訊、編譯器和程式設計師，讓程式在執行時，能依照
現有可用CPU資源的不同，改變程式執行的方式，增進程式的執行效能。 
 
 
圖七、程式執行流程圖，在從循序執行部分進入平行執行部分時，會依照系統資
訊，調整各個不同執行緒上的負載 
 
圖七是程式執行流程圖，當一 OpenMP 平行程式執行時，可以分成循序執行部
分和平行執行部分，在 OpenMP平行程式中，程式開始時會以循序方式執行，當進
入需要平行的區域時，主執行緒會創造一組子執行緒，此時我們就可以依照所取
得的 CPU 使用率資訊，決定如何分配每個不同執行緒上的工作份量，並且將每個
執行緒指定到對應的 CPU 上，這樣可以避免因為工作分配不均而造成有些 CPU 提
早將工作完成的情況，當程式不斷的進入和離開平行執行部分時，程式就不斷重
複上面的動作，最後達到在考量 CPU使用率下的負載平衡。 
依照上面的程式執行流程，當執行新的平行程式時，如果某一顆 CPU 上已經
有較多的工作需要完成，分配到此 CPU 上的工作就會減少，如果某一顆 CPU 上所
要完成的工作很少，分配到此 CPU上的工作就會增加，也就是在考量負載平衡時，
同時考慮 CPU使用率資訊，讓程式能完整的發揮 CPU上的剩餘效能。 
本研究的測試程式為 OmpSCR v2.0中的四個程式(PI Generator、Mandelbrot 
Set Area、Molecular Dynamics Simulation 和 Loop with Dependences)，圖八
為實驗結果。 
 
13 
 
 連結載入器：完成 
 多核心執行時期最佳化環境 
 實作執行時期最佳化引擎：完成 
 實作執行時期狀態分析引擎：完成 
 實作執行時期平台抽象層：完成 
 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                    日期：98年 9月 14日 
                                 
一、參加會議經過 
二、與會心得 
三、考察參觀活動(無是項活動者略) 
四、建議 
五、攜回資料名稱及內容 
六、其他 
 
 
 
 
 
計畫編號 NSC  98-2220-E-007-020 
計畫名稱 系統層級之多核心嵌入式系統發展與驗證環境--子計畫二：多核心嵌
入式系統程式發展工具(2/2) 
出國人員
姓名 
鍾葉青 
服務機構
及職稱 
國立清華大學資訊工程學系 
教授 
會議時間 
98年 8月 29日至 
98年 8月 31日 
會議地點 
Renaissance Vancouver Hotel,  
Vancouver, BC, Canada 
會議名稱 
(中文) IEEE/IFIP國際嵌入暨普及計算會議 
(英文) IEEE/IFIP International Conference on Embedded and 
Ubiquitous Computing (EUC-09) 
發表論文
題目 
(中文)在非對稱 SRAM上降低 JPEG影像的漏電流功耗 
(英文) Reducing Leakage Power of JPEG Image on Asymmetric SRAM 
三、考察參觀活動(無是項活動者省略) 
無 
四、建議 
參與國際會議可以讓國內的研究人員了解目前國際上相關研究的發展現況與未來趨勢，也可
以拓展其國際視野，對於國內的研究人員幫助相當大，因此國內研究人員應該積極參與大型的國
際會議。 
另外，若是國內學術單位有爭取到在國內舉辦大型國際會議的機會，不僅能促進國際學術交
流與合作，還能夠開拓國內的研究生的視野。 
五、攜回資料名稱及內容 
 大會論文集。 
六、其他 
 無 
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100字為限） 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500字為限） 
本計畫這兩年來的研究成果，大致達到計劃預期之目標。目前開發工具已可支援多核心程
式的開發功能，像是迴圈任務切割、平行任務排班執行方式等功能均已具備。而多核心執
行時期最佳化環境經過了兩年的時間，也提出了兩種基於不同考量及不同方式的最佳化方
法，並經由實驗證明，確實對多核心上程式的執行效能有明顯的幫助。 
