適用於網路回聲消除之新型可適性濾波器設計與實作 
“New Adaptive Filter Design and Implementation for Network Echo Cancellation” 
計畫編號：NSC99-2221-E-035-095 
執行期間：99 年 8 月 1 日 至 100 年 7 月 31 日 
主持人：陳德生 逢甲大學資訊工程系副教授 
一、 前言 
Network echo cancellation has been an active 
research area for years. Typical network echo 
cancellers employ adaptive filters to update a small 
number of filter coefficients that produce the actual 
echo.  
Adaptive filters can track statistical time 
variations and alter their coefficients to minimize a 
function of difference between the desired output 
and its actual output. The computational 
complexity of adaptive filtering algorithms is 
proportional to the number of filter coefficients 
being adapted. So far, Normalized Least Mean 
Square (NLMS) algorithm [1] is the most popular 
adaptive filter algorithm for its simplicity and easy 
implementation.  
Digital Signal Processor (DSP) has traditionally 
been the common mean for building adaptive 
filters. Application Specific Integrated Circuit 
(ASIC) is another choice when performance is the 
key requirement. Recently, Field Programmable 
Gate Array (FPGA) has become attractive for 
realizing adaptive filters. FPGAs exhibit excellent 
flexibility in terms of reprogramming the same 
hardware and at the same time achieving good 
performance by enabling parallel computation at 
short processing time. Moreover modern FPGAs 
contain embedded microprocessors within the 
FPGA fabrics. This mix of hardware and 
embedded software on a single chip is ideal for 
fast filter structures with arithmetic intensive 
adaptive algorithms. 
 
二、 研究目的 
As FPGAs have grown larger and developed the 
capability to include many resources that support 
DSP applications such as embedded multipliers, 
multiply accumulate units, and processor cores, 
FPGAs can be considered processing platforms in 
their own right. The challenge accompanying this 
potential capability is that design complexity has 
risen. It is common to have different opinions 
about what portions of the design are to be 
implemented in hardware (HW) and which are to 
be implemented in software (SW). This is a form 
of HW/SW Co-design, which requires profiling 
the software to efficiently partition it between HW 
and SW. This solution could result in a more 
efficient implementation as part of the algorithm is 
accelerated using HW while the flexibility is 
maintained in SW. Implementation of adaptive 
filter using this method makes a good performance 
[2][3][4].  
In this project we explore the use of HW/SW 
Co-design solution that modern FPGAs offer and 
develop a new NLMS adaptive filter for the 
application of Network Echo Cancellation. 
 
三、 文獻探討 
The network echo impulse response is sparse in 
nature. A typical network echo impulse response 
is shown in Figure 1. The coefficients with 
significant values (active region) occupy only 
small portion, spans less than 100 taps, and all 
others are just zero or unnoticeably small values 
(inactive region). The inactive region is principally 
due to the presence of bulk delay caused by 
unknown network propagation, encoding, and 
jitter buffer delays. 
 
 
Figure 1 Impulse response of a network echo path. 
 
D. HW/SW Co-Design Architecture 
The basic spirit of our HW/SW co-design 
implementation is the part of more complex is 
processed using software, like computing the 
normalized step size; The part has amount 
computation but more simple, we using hardware 
to implement, like FIR Filter. Based on this 
concept, we propose an architecture shown in 
Figure 3. It is built on Cyclone II FPGA with 32 
bit fixed-point precision. The left block contains 
NIOS II processor and the work of software is 
done here. The right block is a custom design FIR 
filter module implemented in VHDL. After 
building these blocks, we use SOPC builder [11] 
to assemble the adaptive filter system such that the 
part of software performed in the NIOS II core 
processor and the large number of regular 
computation executed in FPGA for hardware 
acceleration.  
 
Figure 3. Proposed HW/SW NLMS architecture 
 
The FIR filter task logic is realized using 
direct-form. We note that each Cyclone II FPGA 
has 300 9x9 embedded multipliers, which can also 
be grouped to different configurations such as 
18x18 embedded multipliers. To take advantage of 
a large number of embedded multipliers within an 
FPGA, we first put all input signals and the 
corresponding coefficients from the memory into 
the hardware register. Then parallel processing all 
data to obtain their products and accumulate these 
products to get the output signal. 
 The detail of FIR filter module is shown in 
Figure 4. As mentioned, Avalon Bus is needed to 
connect the FIR filter module with the rest of 
system components; otherwise it cannot 
communicate with NIOS II processor and 
SDRAM. The interface specification of Avalon 
Bus is given in [12]. The use of Avalon-MM 
(Memory Mapped) Slave is when NIOS II 
processor sends requests to FIR filter module, 
Avalon-MM Slave will follow the Avalon Bus 
interface specification to handle the signals that 
are transmitted to the FIR filter task logic. After 
calculating the filter output, it waits for the request 
of NIOS II processor to send back the result. 
 
Figure 4 Custom FIR Filter logic on Avalon bus. 
 
In addition to computing the normalized step 
size on NIOS II processor, the software part also 
includes the calculation of weight update and input 
energy calculation. These two tasks add extra 
overhead to the embedded processor as the 
number of executing cycles increase with the filter 
length. Fortunately, the problem can be alleviated 
by adding custom instructions to the Nios II 
processor instruction set to accelerate the 
time-consuming software functions.  
NIOS II processor custom instructions [13] are 
custom logic blocks adjacent to the ALU in the 
CPU data path. With custom instructions we can 
reduce a complex sequence of standard 
instructions to a single instruction implemented in 
hardware. Custom instructions give you the ability 
to tailor the NIOS II processor core to meet the 
needs of a particular application. The NIOS II 
CPU configuration wizard provides a facility to 
add up to 256 custom instructions to the processor. 
The custom instruction logic connects directly to 
the NIOS II processor ALU logic. 
Now we run a 512 taps NLMS adaptive filter on 
our proposed co-design architecture to illustrate 
the overall data processing flow. First, the input 
signal x(n) and desired signal d(n) are moved from 
the fresh memory to SDRAM. The coefficients 
w(n) are set to an initial values and stored in 
Table 1. Execution time of different methods for 120000samples 
Architectures Exec. time(sec) 
SW, floating-point 1077.25 
SW, fixed-point 90 
HW/SW Co-design, fixed-point 31.75 
 
Table 2. Comparison of the number of logic elements and embedded 
multipliers for software and proposed HW/SW Co-design architectures. 
Architecture SW HW/SW % inc in 
area 
utilization 
# of logic 
elements 
4906 11900 19% 
 
# of embedded 
9x9 multipliers 
10 268 89% 
 
The availability of embedded processors and 
many resources that support intensive 
computations in modern FPGAs opens up the 
architectural choices and increases the complexity 
of the design task by a significant margin. Issues 
like platform selection, application mapping, and 
hardware/ software partition are closely related. In 
addition, the use of an FPGA has historically 
required significant hardware expertise to design. 
These are all interesting design challenges that 
need more research work to be done. 
 
六、 參考文獻 
[1] Simon Haykin, Adaptive Filter Theory, 4th ed., 
Pearson Education Pte. Ltd., Singapore, 2003. 
[2] A Elhossini, Shawki Areibi, R. Dony, “An FPGA 
Implementation of the LMS Adaptive Filter for 
Audio Processing,” IEEE International Conference 
on Reconfigurable Computing and FPGA's, 2006. 
[3] Chaitanya, K.S., Muralidhar, P. Rao, C.B.R. 
“Implementation of Reconfigurable Adaptive 
Filtering Algorithms” IEEE International 
Conference on Signal Processing Systems, 2009  
[4] Choo, P. Padmanabhan, S. Mutsuddy, “An 
Embedded Adaptive Filtering System on FPGA,” 
Department of Electrical Engineering, San Jose 
State University, CA 95198-0084 USA 
[5] A. Di Stefano, A. Scaglione, and C. Giaconia. 
“Efficient FPGA implementation of an adaptive 
noise canceller” In Proceedings of Seventh 
International Workshop on Computer Architecture 
for Machine Perception, 2005 (CAMP 05), pp. 
87–89, July 2005. 
 
 
 
 
[6] Daniel J. Allred, Walter Huang, Venkatesh 
Krishnan, Heejong Yoo, and David V. Anderson. 
“An FPGA implementation for a high throughput 
adaptive filter using distributed arithmetic”. In 
Proceedings of the 12th Annual IEEE Symposium 
on Field-Programmable Custom Computing 
Machines (FCCM04), pp. 324 – 325, April 2004. 
[7] Y. Yi, R. Woods, L. K. Ting, and C. F. N. Cowan. 
“High speed FPGA based implementations of 
delayed-lms filters”, J. VLSI Signal Process. Syst., 
39(1-2):113–131, 2005. 
[8] C.M. Kim, H.M. Park, T. Kim, Y.K. Choi, and S.Y. 
Lee, “FPGA Implementation of ICA Algorithm for 
Blind Signal Separation and Adaptive Noise 
Canceling,” IEEE Transactions on Neural 
Networks, vol. 14, no. 5, pp. 1038–1046, 2003. 
[9] Tian Lan and Jinlin Zhang, “FPGA Implementation 
of an Adaptive Noise Canceller,”, 2008 
International Symposiums in Information 
Processing (ISIP), May 2008, pp.553–558. 
[10] “Nios II Tutorial,” Altera Corporation  
[11] “SOPC Builder Tutorial,” Altera Corporation 
[12] “Avalon Memory-Mapped Interface Specification,” 
Altera Corporation 
[13] “Nios II Custom Instruction User Guide, Altera 
Corporation 
三、結語： 
亞太地區在消費性電子產業與嵌入式系統的發展上已在世界上扮演舉足輕重的地位，而且這個
角色會越來越重要。整體而言， ISCE 在研究與經驗分享上提供兩岸學界與業界一個非常好的交流
的機會。最後要感謝學校的經費補助，使得本次的會議行程能圓滿順利完成。 
四、攜回資料名稱及內容 ： 
1、紙本論文摘要集一本  
2、Proceedings CD-ROM 一份  
 
 
99 年度專題研究計畫研究成果彙整表 
計畫主持人：陳德生 計畫編號：99-2221-E-035-095- 
計畫名稱：適用於網路回聲消除之新型可適性濾波器設計與實作 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 1 1 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
