I摘要
本研究提出顧客訂單平行機台排程問題，分成三年進行。所謂顧客訂單平行
機台排程問題乃是指每ㄧ機台在任何時間只能加工一個工件，但是同一訂單的工
作可同時於多機台上加工，且工作完成後之運送是同一訂單的所有工作完成後整
批運送，亦即，將同一顧客的訂單視為一批次，因此，一批次的完成時間是以此
批次最後一個工作之完成時間來計算。由於此問題是屬於NP-hard問題，因此本
研究計畫目的在於發展多個快速有效率的啟發式演算法，計算這些啟發式方法的
worst case及進行模擬實驗。
第一年研究為探討總完成時間及最大延遲時間最小化之顧客訂單平行機台
排程問題，並分為兩個部份：第一部分主要是最小化平行機台顧客訂單的總完工
時間，本計畫利用最大處理時間優先原則(LPT)初步發展出3個不同的演算法，再
針對各個演算法的特性進行分析與研究，並且算出每個演算法的worst case
bounds，且證明此bound為緊緻的；第二部份是最小化平行機台顧客訂單的最大
延遲時間，以EDD為原則發展出演算法，並且算出每個演算法的worst case bounds；
第二年研究為探討多廠區最大延遲時間最小之顧客訂單平行機台排程問題，利用
第一年針對Lmax所發展出的演算法，修改後應用在新問題上。再針對演算法進行
分析與研究，並且建構每個演算法的worst case，且證明此bound為緊緻的；第三
年研究為探討雙廠區在運送車輛有限制下的問題，目標為最小化加權總完時間，
與前兩年相同，本研究建構此問題的演算法，並且計算每個演算法的worst case，
且證明此bound為緊緻的。計畫之成果可以提供學術界與產業界解決排程問題與
供應鏈管理的理論架構。
關鍵詞：顧客訂單、平行機台排程、加權總完工時間、最差狀態比值
III
目錄
摘要................................................................................................................................ I
Abstract ......................................................................................................................... II
目錄..............................................................................................................................III
圖目錄..........................................................................................................................IV
表目錄...........................................................................................................................V
1 前言............................................................................................................................1
2研究目的.....................................................................................................................1
3文獻探討.....................................................................................................................2
2.1 顧客訂單相關文獻.........................................................................................2
2.2 平行機台總完工時間相關文獻.....................................................................3
2.3 平行機台最大延遲時間相關文獻.................................................................4
4研究方法.....................................................................................................................4
4.1 第一年研究結果.............................................................................................4
4.1.1研究方法...............................................................................................4
4.1.2研究成果.....................................................................................................19
4.2第二年研究結果............................................................................................23
4.2.1研究方法.............................................................................................23
4.3 第三年研究結果...........................................................................................30
4.3.1研究方法.............................................................................................30
5 參考文獻..................................................................................................................35
V表目錄
表 1 演算法 H1例子 ...................................................................................................6
表 2 演算法 H2例子 .................................................................................................11
表 3 演算法 H3例子 .................................................................................................13
表 4 演算法 H4例子 .................................................................................................16
表 5 演算法 H1例子 .................................................................................................28
2(2) 第二年計畫我們進一步將顧客訂單單一工廠的問題擴充為多廠區問題，每個
廠區分別位於不同的區域，但各有多台相同的平行機台，每一張顧客訂單僅
能選擇一個廠區進行加工，目標為總完工時間最小化及最大延遲時間最小化。
並且分別利用先前發展出的三個演算法進行修正與應用，再建構出每個啟發
式演算法的worst case bounds，並且證明其worst case bounds是緊緻的。
(3) 在第二年計劃中我們假設每個廠區運送零組件到配送中心所需的配送時間
皆相同，而在第三年計畫我們則是將配送時間加入探討，雙廠區在運送車輛
有限制下加權總完成時間(total weighted completion time)最小之客製化訂單
平行機台排程問題。在每個廠區中的機台環境為完全相同的平行機台
(identical parallel machines)，每個工作的完成時間為完成最後一個該工作所
需的零組件的時間，而一個訂單的完成時間為當此訂單中所有工作皆完成的
時候，工作流程如圖1。
圖 1 雙廠區工作流程圖
3文獻探討
2.1 顧客訂單相關文獻
針對顧客訂單問題，最先是由 Peterkofsky和 Daganzo(1990)提出，並被應用
於貨船進港問題。他們發現平均每一艘貨船花費 60%的時間在港口等待裝貨或是
卸貨，每一台貨船裝有多個貨櫃，貨櫃的裝卸需要使用起重機，每一台起重機代
表一台機台，每ㄧ貨船及貨櫃分別代表ㄧ張顧客訂單與工作，每一起重機在一時
間內只能裝貨或是卸貨ㄧ個貨櫃，但是多個起重機可同時處理同一艘貨櫃船的貨
櫃，其目標為總完工時間(Total Completion Time)最小化，而此問題為典型的顧客
訂單平行機排程問題。其後，Jordan(1996)將此問題廣泛的應用在批量排程問題。
Blocher et al.(1996)證明了此問題為 NP-hard問題，同時也發展多個啟發式方法以
及兩個下限值方法。Yang和 Posner(2005)進ㄧ步提出兩個顧客訂單應用於雙機排
程問題的啟發式演算法，目標為完成時間加總並且建構出此兩個啟發式演算法的
worst case bounds分別為 6/5與 9/7。Wagneur和 Sriskandarajah(1993)探討顧客訂
單專用雙機問題，並且證明目標為完成時間加總問題為 NP-hard問題，但 Leung
et al.(2005)推翻Wagneur和 Sriskandarajah(1993)的証明，不過 Ahmadi et al.(2005)
與 Yang(2005)再證明此問題為 NP-hard 問題。Sung et al.(1998)與 Ahmadi et
al.(2005)也探討了一個廣義的問題，目標為加權總完工時間最小化，並且針對這
4algorithm，此方法可以求出 P2||Cmax問題的最佳解。Lin和 Liao(2004)利用 TMO
演算法發展出 m-IMO 演算法，此演算法為多機平行機台總完工時間最佳化，其
使用之方法為字典搜尋法，首先先將工件依 LPT（Longest Processing Time）方法
排序並計算其下限值，在依下限值將工件依序排入直到工件排序符合下限值或所
有結果中最小之最大完工時間即為最佳解。。Graham(1969)針對 P||Cmax 問題，
提出一個通用的 worst case bounds為 m/12 ，另外證明出 LPT演算法於 P||Cmax
問題的 worst case bounds為 m3/13/4  。
2.3 平行機台最大延遲時間相關文獻
Jackson(1955)針對 1||Lmax問題提出 EDD(Earliest Due Date)演算法。Garey和
Johnson(1979)證明 2||Lmax問題為NP-hard。Gusfield(1984)針對P||Lmax提出一worst
case bound 。Masuda et al.(1983)亦針對此問題提出一緊緻的 worst case bound。
Koulamas和 Kyparisis(2000)針對 P||Lmax，提出 EDD rule的 worst case bound。
4研究方法
4.1 第一年研究結果
4.1.1研究方法
第一年研究中為探討總完成時間及最大延遲時間最小化之顧客訂單平行機
台排程問題，並分為兩個部份：第一部分主要針對平行機台顧客訂單的總完工時
間最小化的特性，利用最大處理時間原則(LPT)初步發展出 3 個不同的演算法。
再針對各個演算法的特性進行分析與研究，並且算出每個演算法的 worst case
bounds。第二部份主要針對平行機台顧客訂單的最大延遲時間最小化的特性，將
前面介紹的三個演算法利用 EDD發展出適合此問題的演算法，並且算出每個演
算法的 worst case bounds，而其基本假設以及符號說明如下：
基本假設
 本生產排程研究為靜態排程(Static Scheduling)，所有工作與機台在時間點零
時即可開始加工。
 不考慮工作的設置時間(Setup Time)。
 所有機台皆等效，即同一個工作於任一台機器的作業時間皆一致。
 每部機台在同時間只能加工一個工作。
 工作不能被分割 (Splittable)，每一個工作在同時間只允許在一台機台上加
工。
 每一個批量開始加工後，必須等到批量內的所有工作都已被加工完成，或正
在加工，才可以加工下一個批量。
 機台在加工的過程中不會有當機故障的情形發生，持續到所有工作都完成。
 各工作的加工時間均互相獨立。
6重複步驟 2直到所有批量 i裡的工作都被指派完成。
Step 3 如果 bi ,則令 1ii 並且回到步驟 2。
否則，輸出 maxC 並且停止。
定理 1 針對 maxP batch C 這個問題，可以得出 */
1 zz H  m/12 。
證明：
11 max { } { }max
j
j
b
i j niH
j n
P p
pz
m


 
 1 1( ) max { }j
b
i
i
j n
P
m
p
m m



 (1)
根據公式(1)可以得到以下的結果：
*)
1
2( z
m
 *)1(* z
m
m
z
 1 1{ }max { }j
b
i
i
j n
P
m
p
m m


 

1Hz
我們舉一個實際的例子，來證明啟發式演算法 H1的 worst case bounds是緊
緻的， mb ， 1)1(  mbn ， jp 及 in 如表3.1。由圖 3.1可以清楚的看出 mz * ，
以及 121  mz H ,，zH1/z*=
m
m 12 
。
表 1 演算法 H1例子
in jp
in = m , for 1,...,2,1  bi 1jp for mbj )1(,...,2,1 
in =1, for bi jp m for nj 
8Step 2 指派批量 i裡的工作 j到機台 }min{' 'kFk  ，並且令
jkk pFF  '' ， 1jj .
重複步驟 2直到所有批量i內的工作j都被指派完成。
Step 3 將 'kF 由小到大做排序，可以得到 1''  kk FF ， 1,...,2,1  mk 。
將 kF 由大到小做排序，可以得到 1 kk FF ， 1,...,2,1  mk 。
令 'kkk FFF  ， mk ,...,2,1 。
Step 4 如果 bi ，令 1ii ， 0' kF ，並且回到步驟 2。
否則，輸出 maxC =
1,2,..
max k
k m
F

並且停止。
為了證明其 worst case bounds，我們將每個機台上的完工時間由大到小最排
序， )()( 1 kiki CC  ， 1,...,2,1  kk 。並且定義所需的符號，令 )( ki  為批量
i在機台 1M 及機台 kM 上總完工時間的差值，k = 2,3,..,m，如圖 3.2。
)( 2i
)( mi 
)( ki 
1M
2M
mM
kM
圖 3 圖解 )( ki 
)( ki  = )(iC )( kiC  ，for 2,3,...k m (2)
假設Q是一組被指派在批量 i之前的所有批量，可以得到以下式子：
m
P
C Qi
m
k kii
i
   2 )()(  (3)
定理 2 max
2 )( PHki  ， 2,3,...k m ，i = 2,3,..,b， ii PP Bmax max  。
證明：
令 2H 為利用 H2演算法的排序結果， )( 2max HC  = 2Hz 為利用 H2演算法排
10
根據 Case1以及 Case2，我們可以知道對於每一個批量 i， )(max 2HkiMk  都
會出現兩種情況，如果一直是 Case2的情況，會得到 max1
2
1 )(max PP
H
kMk   。
所以對於每個批量 i， max
2 )( PHki  ，如果中間出現 Case1的情況，會直接得到
max
2 )(max)(max PPi
L
kiMk
H
kiMk    。
定理 3 針對 maxP batch C 問題， z
H2/z*
P
PmP max)1(  ， 


b
i
PiP
1
證明：
根據公式(3)，可以得到以下式子：
m
P
C
b
i
m
k
H
kbiH    1 2
2
2
max
)(
)(


再根據定理 2，可以得到：

*
2
z
z H
 
 
 
 


b
i
m
k kbi
b
i
m
k
H
kbi
P
P
1 2
1 2
2
*)(
)(













 m
k kb
b
i i
m
k
H
kb
m
k kb
b
i i
b
i i
PP
P
21
2
2
21
1
*)(
)(
*)( 





 b
i i
m
k
H
kb
P
1
2
2 )(
1

P
Pm max)1(1

我們舉一個實際的例子，來證明啟發式演算法 H2的 worst case bounds是緊
緻的， 1mb ， 1)1(  mbn ， jp 及 in 如表 3.2。其中， 2max mP  ，
mmmmbP  32)1( 。由圖 3.4 我們可以清楚的看見 1* 2 mz ，以及
1)1(22  mmmz H ，並可求得兩者間的比值為
*
2
z
z H
1
1)1(
2
2


m
mmm
P
PmP
mm
mmmm max
3
23 )1()1( 

 。
12
j+1 iB 。令 i j 1，以及 0kF ， mk ,...,2.1 。
Step 2 指派批量 i裡的工作 j到最早開始機台 }min{ kFk  。
令 jkk pFF  以及 1jj .
重複步驟 2直到批量i裡的所有工作都被指派完成。
Step 3 如果 bi ，令 1ii 並且回到步驟 2。
否則，輸出 maxC =
1,2,..
max k
k m
F

並且停止。
為了證明其 worst case bounds，我們將每個機台上的完工時間由大到小最排
序， )()( 1 kiki CC  ， 1,...,2,1  kk 。並且定義所需的符號，令 )( ki  為批量
i在機台 1M 及機台 kM 上總完工時間的差值，k = 2,3,..,m。令
3H 為利用 H3演算
法的排序結果， )( 3max
HC  = 3Hz 為利用 H3演算法排序後的總完工時間。
定理 4 針對每一個 k 2, 3,…, m， max3 )( PHki 
證明：
根據定理 3，可以得知每一個 )( 3Hki  也都會出現兩種情況，但都會小於等
於 maxP 。
定理 5針對 maxP batch C 問題，z
H3/z*
P
Pm max)1(1

證明:
根據公式(3)，可以得到以下式子。
3
3 1 2
max
( )
( )
b m H
i bkH i k
P
C
m
 
  

 
再根據定理 4，可以得到：

*
3
z
z H
 
 
 
 


b
i
m
k kbi
b
i
m
k
H
kbi
P
P
1 2
1 2
3
*)(
)(













 m
k kb
b
i i
m
k
H
kb
m
k kb
b
i i
b
i i
PP
P
21
2
3
21
1
*)(
)(
*)( 


14
圖 6 演算法 H3 worst case bounds
max|| LbatchP 啟發式演算法
針對平行機台顧客訂單的最大延遲時間最小化的特性，將前面介紹的三個演
算法利用 EDD發展出適合此問題的演算法，並且算出每個演算法的 worst case。
啟發式演算法 H4
啟發式演算法 H4是根據 H1演算法將步驟 1改成以 EDD為批量排序，以下
為 H4演算法的步驟：
Step 1 將每一批量利用EDD排序，可以得到 1 ii dd ， i 1, 2,…, 
b-1.。
令 i j 1，以及 0kF ， mk ,...,2.1 。
Step 2 選擇可以最早開始的機台 k min }{,...,2,1 kmk F 。派批量 i裡的
工作 j到機台 k。令 jkk pFF  ，以及 1jj 。
重複步驟 2直到所有批量 i裡的工作都被指派完成。
Step 3 令 iii dCL  。
如果 bi ，令 1ii 並且回到步驟 2。
否則，輸出 iLL maxmax  並停止。
我們針對 maxP batch L 提出一個下限值(lower bound)，並且定義為單一機台
的新問題 1/ 1jP , max
1 / Ld j ，將每個批量視為一個工作，加工時間為 mPP jj /
1  ，以
及到期時間為 jj dd 1 。
令 )(
1
][ tC 以及 )(][ tC 分別為 1/
1
iP ,
1
max/id L 問題及 maxP batch L 問題第 t個位
置的總完工時間，並且將每個機台上的完工時間由大到小最排序，
)()( 1][][  ktkt CC  ， 1,...,2,1  kk 。根據公式(3)可以得到：
m
P
C
t
i i
t
 11 ][ )( , 1 2 [ ][ ] ( )
t m
i ki t k
t
P
C
m
    (5)
16
*)(][ tC *)(1 ][1 t
t
i i C
m
P
 (9)
令 ][
1
][
1
][ *)(*)( ttt dCL   ， ][][][ *)(*)( ttt dCL   以及
*)}({max*)( ][max  tBt LL  ， *)}({max*)( 1 ][1max  tBk LL  , then from (8)
*)(*)()( max
1
max
1
max  LLL EDD  (10)
定理 6. 針對 maxP batch L 問題，可以得到 *)()( max
4
max  LL H  max)
1
( P
m
m
證明.
根據公式(8)及公式(10)，我們可以推導出以下的式子
*)()
1
()(*)()( maxmax
1
maxmax
4
max  LPm
m
LLL EDDH  max)
1
( P
m
m
我們舉一個實際的例子，來證明啟發式演算法 H4的 worst case bounds是緊
緻， 2b , 12 mn ,， jp 及 in 如表 3.4。其中 mP max , mdd  21 。如圖 3.6，
我們可以清楚的看見 mmmL H 2)( 4max  ， max ( *) 1 1L m m  ，
 *4 zz H max
1
1 P
m
m
m
 。
表 4 演算法 H4例子
in jp
in =
2m , for 1i 1jp for 2,...,2,1 mj 
in =1, for 2i jp m for nj 
18
定理 7 在 maxP batch L 問題下，
5
max max( ) ( *)
HL L  max)
1
( P
m
m ，
6
max max( ) ( *)
HL L  max)
1
( P
m
m
證明：
進一步討論演算法H5及演算法H6，會發現在推導公式(7)時，都會得到相同
的結果，因為 )( 5][
H
kt  及 )( 6][ Hkt  都會小於等於 maxP ，再根據定理6，不論是H4、
H5或H6與最佳解的差值都會小於等於 max)
1
( P
m
m
。
m-IMO演算法
以上提出的是啟發式方法，本研究利用m-IMO來求得最佳解。Lin and Liaw
[11]曾對於平行機台問題 max|| CP 提出一最佳解方法，本研究計劃利用 m-IMO為
基礎，找出平行機台顧客訂單的總完工時間最小化的最佳解。m-IMO之方法如
下：
Step 1 將每一個工作利用LPT排序，可以得到 1 jj pp ， j 1, 2,…, 
n-1。
令  nj jpP 1 ， s /P m ， max{max C mP / , 1p }，
1j ， C

， 0s ， 1l 。
Step 2 如果 max1 Cp  ， 將剩餘的工作用(m-1)-IMO做排程，可以得
到 maxc，以及 121 ,...,,    mm 。令  m
 ，
),max( max1max CpC 

， 112211 ,...,,   

mmmm ，並
且到步驟 9。
Step 3 令 1jj 。如果 nj ，則到步驟 6;否則 jl )1( 。
Step 4 如果 sP l )1( ，則 1ll 並且到步驟 6。
Step 5 如果 sP l )1( ，則 1ll 並且回到步驟 2。
20
二、工作加工時間( jp )：加工時間為 ,a b 符合 100,1 、 75,25 、 60,40 三個不同
區間內獨立均勻分配數值。
三、批量數目(b )：有 1、4、10、25、50共五種水準。
四、機台數目(b )：有 1、4、10、25、50共五種水準。
綜合此四個因素共有 225種實驗組合，各重複測試 30次再計算平均值，並
且比較演算法 H2、演算法 H3與 m-IMO的求解誤差及求解時間，本研究評估求
解誤差的公式如下：
100%)
-
((%) 


IMOm
m-IMO
Dev
啟發解
演算法 H2、H3及 m-IMO在每一組實驗組合下，實驗 30次的平均求解誤差，分
析出下列資訊：
一、機台數增加，求解誤差提高。
當機台數增加，啟發解與 m-IMO 的總完工時間都會減少，對於誤差公式中
的分子而言，兩者的差距沒有太大的影響，但分母 m-IMO 的總完工時間降低，
因此，會造成求解誤差提高。
二、期望工作數增加，求解誤差降低。
當期望工作數增加，啟發解 m-IMO的總完工時間都會提高，對於誤差公式
中的分子而言，兩者的差距沒有太大的影響，但分母 m-IMO的總完工時間提高，
因此，會造成求解誤差降低。
三、批量數增加，求解時間提高。
當批量數增加，在 m-IMO外圍批量次序的排列組合會增加，因此，求解時
間會增加。
四、機台數增加，求解時間提高
當批量數增加，對 m-IMO而言，在排入工作時會不斷重複(m-1)-IMO，因此，
求解時間會增加。
五、期望工作數增加，求解時間提高。
當工作數增加，對 m-IMO而言，當工作數目越多，則需要較長的時間去測
試可行的工作排程。
六、加工時間差異減少，求解時間降低。
當加工時間差異減少，表示每個工作時間相等的機會提高，在測試可行的排
程時，加工時間相等的工作會省略，因此，求解時間會降低。
七、批量數等於 1，兩演算法的求解誤差相等。
在批量數等於 1時，兩者在批量的的排序都是採用 LPT排序，因此，兩者
的 makespan會相等，求解誤差也會相等。
八、機台數等於 1，求解誤差等於 0。
當機台數等於 1時，啟發解與 m-IMO的總完工時間會等於所有工作時間的
總和， *
32 zzz HH  。
22
一、由測試結果顯示，求解誤差隨 E值增加而提高。
當 E 值增加時，到期日 id 也會增加，在總完工時間不變的情況下，啟發解
與 EDD 的 maxL 都會減少。在兩者都減少的情形下，對於求解誤差公式中分子兩
者的差距沒有明顯影響，但是，分母中 EDD求解值降低，求解誤差的比值相對
會增加。E=0.05，H5的平均求解誤差為 0.530256，H6的平均求解誤差為 0.528464，
E=0.25，H5的平均求解誤差為 0.662363，H6的平均求解誤差為 0.659484，E=0.5，
H5的平均求解誤差為 0.981096，H6的平均求解誤差為 0.978457。
二、批量數增加，求解誤差提高。
當批量數越多，啟發式演算法所排出的批量順序，就可能與最佳解的批量順
序有極大的差異，導致 maxL 變大，求解誤差相對會增加。
三、機台數增加，求解誤差提高。
EDD 演算法是單一機台的求解，每個批量的加工時間會會等於總加工時間
除以機台數，因此，當機台數增加，相除後的加工時間會減少，EDD 演算法的
總完工時間會變小， maxL 也會變小。但是在啟發式演算法中，加工時間並沒有除
以機台數，只要有一個工作的加工時間突出，就會造成求解誤差提高。
四、期望工作數增加，求解誤差降低。
當工作數增加，總加工時間會變大，因此到期日 id 也會增大，我們以 100
個工作與 2500個工作為例，工作數增加了 25倍，總加工時間也增加了 25倍，
但是根據到期日的公式 ]*}}{max,max{}},{max,[max{ PEp
m
P
p
m
P
jbj
i
jbj
i
ii
 ， id
僅是上限增加 25倍，而非每個到期日都增加 25倍。因此，期望工作數增加的情
況下，啟發式演算法與 EDD演算法的 maxL 都會增加，對求解誤差公式中的分子
而言，兩者間的差距沒有影響，但是分母中的 maxL 增大，求解誤差的比值會降低。
五、批量數等於 1，兩演算法的求解誤差相等。
在批量數等於 1 時，兩個演算法都演變為求 makespan，兩者在批量的的排
序都是採用 LPT排序，因此，兩者的 makespan會相等， maxL 也會相等。
綜合上述的實驗分析，機台數、批量數、期望工作數與 E 值都會影響求解
誤差，其中期望工作數與批量數更會影響求解時間，當工作數越多求解時間便會
拉長，但批量數增加求解時間會縮短。H5與 H6的平均求解時間分別為 0.56305
(sec)及 0.56270 (sec)，且兩者的平均求解誤差分別為 0.724%及 0.722%，並沒有
太大的差距。兩演算法的批量排序以及批量內的工作排序完全相同，且兩演算法
的目標都在於平均機台上的完工時間，因此每一批量的完工時間會相近，所以兩
演算法的 maxL 極有可能發生在同一批量，兩演算法的 maxL 也相近。
本研究針對平行機台顧客訂單排程問題，分別以平行最小化總完工時間及最
大延遲為目標，分別提出三個啟發式演算法，並且證明其 worst case bonds。
而根據上述，第一年計畫所得的總結如下：
1. maxP batch C 結論
24
所需的零組件，因此一個工作的完成時間為該工作在各廠區所需要的生產活動皆
完成的時間點。而一張訂單的完工時間為該訂單中各個工作皆處理完畢。利用第
一年針對 maxL 所發展出的演算法，修改後應用在新問題上。再針對演算法進行分
析與研究，並且建構每個演算法的 worst case。而其基本假設與符號說明如下：
基本假設
 機台在加工的過程中不會有當機故障（Breakdown）的情形發生。
 在同廠區內的機台為完全相同的平行機台，不同廠區內的任兩個機台皆不相
同。
 一張訂單中包含多個工作，而每個工作需要不同的廠區來處理。
 各工作所需要安排的廠區皆互相獨立並且加工時間也互相獨立。
 不允許機台佔先（preemption）的情形，任何一個工作開始加工就必須持續
到加工完成，中間不能安插其他工作。
 同ㄧ時間每一部機器只允許加工一個工作。
 在任一廠區內同ㄧ時間每一個工作只允許在ㄧ台機台上進行加工，不同廠區
內的任兩個工作則不受此限制。
 每個廠區運與配送中心的配送時間皆相等。
符號定義
n : 工作數量
N : 代表所有工作的集合
b : 訂單數量
B : 訂單的集合 {1, 2,..., }b
id : 訂單 i的交期, 1, 2,...,i b
in : 訂單 i中所包含的工作個數， i B
l : 廠區數量
L : 為一組廠區的集合 = {1, 2,…, l}
m : 總機台數量
h
kM : 廠區h的第 k台機台，h L ， 1,2,..., hk m
hm : 廠區 h的機台數量
M : 所有機台的集
hM : 廠區 h裡機台的集合，  1 2, , ..., hh h hmh L M M M 
,
h
i jp :
訂單 i的工作 j在廠區 h所需要的工作時間， h L ， i B ，
1, 2,..., ij n 。
h
i
P : ,
1
in
h
i j
j
p

 = 訂單 i在廠區 h的工作時間加總 ， ,i B h L  。
 : 一組工作的排序
k : 屬於機台 k上的工作排序(a partial schedule on machine k) k M
( )
k
h
iC  : 訂單 i 在廠區 h的機台 k的完工時間， i B , h L and hk M
( )
k
h
iC  : 訂單 i在廠區h的完工時間， i B
26
工時間為 ,1* /h h hi iP P m ，以及到期時間為 1*i id d 。令 EDD 為利用 EDD 演算法
的排序結果，Jackson提出在 1 1 max1| , |i iP d L 問題下，EDD演算法為此問題的最佳
解。
 ,1*[ ]h EDDtC  為廠區 h在 1 1 max1| , |i iP d L 問題下，根據 EDD演算法排序後，第
t個批量的完成時間。
 ,1* ,1*[ ]
1
1
t
h EDD h
t i
i
t
h
i
i
h
C P
P
m






 (1)
令 *及 1H 為 max,P decentralize batch L 問題下的一組最佳解排序及利用演算法
H1所得到的排序，  *[ ]tC  為 max,P decentralize batch L 問題下根據 *排序後第 t個
批量的總完工時間，  *[ ]htC  為 max,P decentralize batch L 問題下根據 *排序後，廠區
h中第 t個批量的總完工時間     * *[ ] [ ]max ht th LC C  。
在每個子問題中(以廠區 h為例)可以發現，因為每個工作都會排到該廠區中
最早可以開始的機台上,因此可以得到
 
 
 
 
,1 , 1,2,...,1 1
[ ] ,1 , 1,2,...,
1
,1 , 1,2,...,
max
max
1
max
i
i
i
t
h h
i i ji t j nh H hi
t i jh i t j n
t
h
hi
hi
i jh h i t j n
P p
C p
m
P
m
p
m m
  
 

 

 
   
 


(2)
令  1[ ]h HtL  為廠區 h 中利用演算法 H1 所得到第 t 個批量的延遲時間，
 ,1*[ ] EDDhtL  為廠區 h的 1 1 max1| , |i iP d L 問題下利用 EDD演算法所得到第 t個批量的
延遲時間
   
     
 
1 ,1*
[ ] [ ]
1 ,1* 1*
[ ] [ ] [ ] [ ]
,1 , 1,2,...,
1
max
i
EDDh H h
t t
h H h EDD
t t t t
h
h
i jh i t j n
L L
C d C d
m
p
m

 
 


   
 
 
 
(3)
令  1maxh HL  表示廠區 h 中利用演算法 H1 所得到的最大延遲時間，
28
       
   
   
1 * 1 *
max max max max
1 *
max max
1 *
max max
b H b H
a H b
a H a
L L L L
L L
L L
   
 
 
  
 
 
   
 
1 * max
max max max
max
max , max, ,
1
, max , max{ }
H
h
i ji B j N h L h L
m
L L p
m
p p m m
 
   
   
 
 
(7)
從 Case 1 跟 Case 2 都可得到結果
   1 * maxmax max max
max
1H mL L p
m
     
 
我們舉一個實際的例子，來證明起發式演算法H1的worst case bound 是緊緻
的，如表1。
表 5 演算法 H1例子
2l ， 2 1n m  1 2( 2 3, 2)n m n   ，
2b
1m m 2 1m m 
1i
1d m
1
1, 1jp m  for
1, 2,..., 1j m 
1
1, 1jp  for
, 1,...
, 2 2
j m m
m
 

2
1, 1jp m  for
1,2,..., 2j m 
2
1, 1jp  for
1, ,...
, 2 3
j m m
m
 

2i
2d m
1
2,1p m 22,1 1p m 
1
1M
1
2M
1
mM
1m
1
1,1p
1
1,2p
1
1, 1mp 
1
2,1p
2 1m
1 1 1
1, 1, 1 1,2 2, ,...,m m mp p p 
2
1M
2
2M
2
2mM 
2
1mM 
m
2
1,1p
2
1,2p
2
1, 2mp 
2
1,mp
2
1, 1mp 
2
1,2 3mp 
2
2,1p
圖 8 演算法 H1之排程
30
Step 4. 如果 lh，則令 1hh ， 1j 並且回到step2.，否則輸出
 hk
mkLh
i FMC h,...,2,1,
max


Step 5. 將 hkFM 由大到小做排序，可以得到
h
k
h
k FMFM 1 ， mk ,...,2,1 ，
lh ,...,2,1 。如果 bi ，則令 1ii ， 1j 以及 1h 並且回到step2.否則，輸出
 iiBi dCL  maxmax 並停止。
啟發式演算法 H3
Step 1. hkFM 表示廠區h中機台k的可開始時間將訂單重新排序使 1 ii dd ，
1,...,2,1  bi 。並利用LPT將廠區h中每張訂單的加工時間重新排序，使
h
ji
h
ji pp 1,,  ， 1,...2,1  bi ， Lh 。 hhk mkFM ,...2,1,0  ，令 1 khji 。
Step 2.選擇廠區中最早可開始的機台u，h，h=1,2,...l，  hkmk FMu h,...,2,1minarg  ，
指派 h jip , 到機台u。令
h
ji
h
u
h
u pFMFM , 以及 1jj 。重複step2.直到訂單i中
所有工作屬於廠區h 的部分都排入。
Step 2. 如果h<l，則令h=h+1，j=1並且回到step1.否則輸出  hk
mkLh
i FMC h,...,2,1,
max


Step 3. 如果i<b，則令i=i+1，j=1以及h=1並且回到step2.否則，輸出
 iiBi dCL  maxmax 並停止。
而根據上述，第二年計畫所得的總結如下：
由文獻中得知平行機台最大延遲時間最小化，必須讓到期日小的批量優先完
成加工，且要讓該批量的總完工時間最小，因此，啟發式演算法是由 EDD 與
LPT 演算法而來。本實驗提出在多廠區平行機台顧客訂單下求解最小化最大延
遲時間，進一步討論 H2 及 H3 演算法的 worst case bounds，會發現在推導公式
(2)時， 都會得到相同的結果所以不論是 H1、H2 或 H3 與最佳解的差值都會小
於等於 max
max
max 1 p
m
m



 
，可以得知若某一廠區內的機台數較多，或是有某個工作
的加工時間較長，本研究所提出的三個演算法與最佳解的差值也會增加。
4.3 第三年研究結果
4.3.1研究方法
第三年研究為針對雙廠區平行機台客製化訂單的加權總完工時間最小化的
32
( )
i
C  : 訂單 i以安排下的完工時間， ( )
i
C  = max{ ( ) }hi hC   ， h L 。
h : 指由廠區h運送到出貨中心的時間， h L 。
iw : 指批量 i的加權指數。
( )iWC  : 指批量 i的加權總完工時間 ( )iWC  = 1 ( )
b
i ii
w C  。
*z : 最佳解的加權總完工時間。
H1演算法
使用WSPT針對所有的批量做排序，而每一批量內的工作則採用隨機順序，
然後依序將未指派的工作排入廠指定廠區內最早開始的機台，直到所有工作都指
派完成，以下為演算法 H1的步驟：
步驟 1 將每一批量先利用WSPT排序，可以得到 11 //  iiii wpwp ，
max{ }hi ip P ， i 1, 2,…, b-1， 2,1h 。
令 i j 1 以及 0khF ， mk ,...,2.1 。
步驟 2 選擇該工作指定的廠區h，h=1,2。
步驟 3 選擇該指定廠區h內最早開始的機台 k min }{,...,2,1 khmk F 。
指派批量 i裡的工作 j到機台 k。令 jkhkh pFF  ，以及 1jj 。
回到步驟 2直到所有批量 i裡的工作都被指派完成。
步驟 4 如果 bi ,則令 1ii ，及 1 21 2( ) max( ( ) , ( ) )i i iC C C       並且
回到步驟 2。
否則，輸出 ( )iWC 。
定理 1.針對  BiCbatchzedecentraliP |,| ，可以得到 1 */ 3HZ Z  。
證明.
假設 x為 H1中任一批量，可以推導出批量 x完工時間如下：
1 2
1 1 1
1 2
1 2
( ) max
x x
i iH i i
x j Bx j
P P
C p
m m
        
  (1)
最佳解的加權總完工時間如下：
*z  * * *1 1 2 2( ) ( ) ... ( )b bw C w C w C    

1 2 1 1 2 2
1 1 1 2 1 2
1 1 2 2 1 2
1 2 1 2
max{ , } max{ , }
P P P P P P
w w
m m m m
        
34
1jj 。
回到步驟 2直到所有批量 i裡的工作都被指派完成。
步驟 4
如果 bi ,則令 1ii ，及 1 21 2( ) max( ( ) , ( ) )i i iC C C      
並且回到步驟 2。
否則，輸出 ( )iWC 。
H3演算法
因為演算法 H1與演算法 H2的 worst case都相同，所以我們僅選擇 H2中
WSPT的排序條件做延伸，並且使用 SPT對每一批量內的所有工作做排序，發
展出針演算法H3。之後再依序將未排定工作指派到指定廠區內最早開始的機台，
直到批量內的每一工作都指派完成。以下為演算法 H3的步驟：
步驟 1 將每一批量先利用WSPT排序，可以得到 11 //  iiii wpwp ，
i 1, 2,…, b-1，以及 2/)( 21 iii PPp  。
將每一批量內的工作用SPT做排序，可以得到 1 jj pp ， i
1, 2,…, b， 以及j, j+1 iB 。
令 i j 1 以及 0khF ， mk ,...,2.1 ， 2,1h 。
步驟 2 選擇該工作指定的廠區h，h=1,2。
步驟 3 選擇該指定廠區h內最早開始的機台 k min }{,...,2,1 khmk F 。
指派批量 i裡的工作 j到機台 k。令 jkhkh pFF  ，以及
1jj 。
回到步驟 2直到所有批量 i裡的工作都被指派完成。
步驟 4
如果 bi ,則令 1ii ，及 1 21 2( ) max( ( ) , ( ) )i i iC C C      
並且回到步驟 2。
否則，輸出 ( )iWC 。
而根據上述，第三年計畫所得的總結如下：
由文獻中得知平行機台總完工時間最小化，必須讓工作時間短的工作優先完
成加工，再加上加權指數的影響，加權指數大的工作要優先完成，因此，啟發式
演算法是由 SPT演算法而來與加權指數W相除而來。本實驗提出在雙廠區平行
機台顧客訂單下求解最小化加權總完工時間，進一步討論 H2及 H3演算法的
worst case bounds，會發現在推導公式(1)時，都會得到相同的結果所以不論是H1、
H2或 H3與最佳解的比值都會小於等於 3。
36
1996.
[17] Koulamas C., and Kyparisis G..J., Scheduling on uniform parallel machines to minimize maximum
lateness., Operational Research Letters., 2000;26;175-179.
[18] Leung J.Y.T., Li, H., Pinedo, M. Scheduling orders for multiple product types with due date related
objectives. European Journal of operational Research. 2006;168;370-389.
[19] Li C.L., Vairaktarakis G.. Coordinating production and distribution of jobs with bundling operations.
IIE Transactions. 2007;39;203-215.
[20] Li C.L., Ou J. Coordinated scheduling of customer orders with decentralized machine locations. IIE
Transactions. 2007;39;899-909.
[21] Lin C.H. Liao C.J., Makespan minimization subject to flowtime optimality on identical parallel machines.
Computers & Operations Research 2004;31;1655-1666.
[22] Liu C.H., A coordinated scheduling system for customer orders scheduling problem in job shop
environments. Expert Systems with Applications, 2010 December Pages 7831-7837.
[23] Lin C.J., and Liao C.J., Makespan minimization subject to flowtime optimality on identical parallel
machines., Computers & Operations Research., 2005; 1655-1666.
[24] Lee C.Y., Cheng T.C.E., Lin B.T., 1993, Minimizing the makespan in the 3-machine assembly-type
flowhop scheduling problem. Management Science, 39(5) 616-625.
[25] Masuda T., Ishii H., and Nishida T., Some bounds on approximation algorithms for max/1// Lmn and
max//2/ LFn scheduling problems., J. Oper. Res. Soc. Japan., 1983;26.
[26] Mason S.J. Chen J.S. Scheduling multiple orders per job in a single machine to minimize total
completion time. European Journal of Operational Research
Volume 207, Issue 1, 16 November 2010, Pages 70-77
[27] Peterkofsky, R I, Daganzo, C F,1990, A branch and bound solution method for the crane scheduling
problem.TRANSP. RES. Vol. 24B, no. 3, pp. 159-172. 1990.
[28] Wagneur E., Sriskandarajah C., 1993, Open shops with jobs overlap. European Journal of Operational
Research, 71, 366-378.
[29] Wang G. Cheng T. C.E. Customer order scheduling to minimize total weighted completion time.
Omega, Volume 35, Issue 5, Octomber 2007, pages 623-626
[30] Wang X. and Cheng T.C.E., Aheuristic approach for two-machine no-wait flowshop scheduling with
due dates and class setups., Computers and Operations Research., 2006;33;1326-1344.
[31] Wu X., Zhou X. Stochastic scheduling to minimize expected maximum lateness. European Journal of
Operational Research, 1 October 2008, Pages 103-115.
[32] Yang J., The complexity of customer order scheduling problems on parallel machines. Computer &
Operations Research. 2005;32;1921-1939.
[33] Yang J, Posner ME. Scheduling parallel machines for the customer order problem. Journal of
Scheduling 2005;8: 49-74.
97 年度專題研究計畫研究成果彙整表 
計畫主持人：蘇玲慧 計畫編號：97-2221-E-033-038-MY3 
計畫名稱：客製化訂單平行機排程問題 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 4 4 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 1 100% 
SCHEDULING ON 
PARALLEL 
MACHINES TO 
MINIMIZE MAXIMUM 
LATENESS FOR THE 
CUSTOMER ORDER 
PROBLEM 
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
