the scalability of simulation. The memory references and the barrier 
operations in a multi-threaded program are analyzed by our method 
in parallel to estimate the lower bound and the upper bound for the 
coherence misses in each parallel region. The results from our 
experiments show that our approach is useful in finding the source 
of coherence misses and detecting false-sharing data structures in 
parallel program. 
 
 
子計畫三：以虛擬平台實現異質多核心應用快速原型設計之技術研究 
 2 
目錄 (Contents) 
中英文摘要..........................................................................................................3 
中文摘要 ..............................................................3 
Abstract...............................................................4 
一、前言...............................................................................................................5 
二、研究目的......................................................................................................6 
三、文獻探討......................................................................................................6 
1.Full-System Simulation.......................................................................................................7 
2. Multicore Simulation..........................................................................................................7 
3. COREMU...........................................................................................................................8 
4. Coherent Cache Simulation................................................................................................8 
四、研究方法......................................................................................................10  
1.Collecting Parallel Traces on Virtual Platform.........................................................10 
2. Multi-threaded Coherence Cache Emulation………………….………………..………13 
3. Detection of False-Sharing Cache Lines………………………….……………...……..16 
五、結果與討論….............................................................................................17  
六、參考文獻………..........................................................................................25 
子計畫三：以虛擬平台實現異質多核心應用快速原型設計之技術研究 
 4 
Abstract  
On today’s multicore systems, developing correct and efﬁcient parallel programs can be very challenging. On 
a shared memory system, communications among threads/processes may result in resource contention (e.g., 
memory and cache contention) and cause signiﬁcant performance degradation which is difﬁcult for 
application developers to analyze. Simulation tools would be useful for identifying such problems. However, 
traditional approaches with detailed caches models scale poorly and become impractical for many-core 
systems. In the first year of the project, we have built a simulation environment to facilitate the development 
of parallel programs on heterogeneous multicore systems by offering an inter processor communication 
library and tools for debugging software and monitoring system performance. Moreover, with the proposed 
performance monitoring facilities in the simulation environment, the communications among different type of 
processor cores can be characterized for further performance analysis. 
 While the communications among different types of processing cores have been addressed in the first year, 
we focus on the estimating the performance for the data sharing among a homogeneous multicore processor. 
We propose a method to estimate the coherence misses of parallel programs across and within 
synchronization barriers. We integrated the proposed method into an open-source system-level emulator, 
COREMU, to evaluate the scalability of simulation. The memory references and the barrier operations in a 
multi-threaded program are analyzed by our method in parallel to estimate the lower bound and the upper 
bound for the coherence misses in each parallel region. The results from our experiments show that our 
approach is useful in ﬁnding the source of coherence misses and detecting false-sharing data structures in 
parallel program. 
 
Keywords- Functional Simulator , virtual platform, heterogeneous multicore, interprocessor 
communication, synchronization, cache coherence 
子計畫三：以虛擬平台實現異質多核心應用快速原型設計之技術研究 
 6 
 
bound and the upper bound for the coherence misses in each parallel region. The results from our experiments 
show that our approach is useful in finding the source of coherence misses and detecting false-sharing data 
structures in parallel program.  
 
二、 研究目的  
 
With the advent of multicore technology in early 2000’s, it has been on almost all of microprocessor 
vendors’ roadmap today – including embedded processors, GPUs and GPGUPs. One of the major driving 
forces behind this has been the performance-power considerations. We no longer could afford to continue 
riding the performance curve as we did in the last few decades for uniprocessors without considering the 
consequences of power and thermal costs. Hence, designing multicore processors has become a major 
endeavor in computer industry. With the advance of semiconductor technology, the number of cores that can 
be integrated in a single chip is continuously increasing by Moore Law. We can expect to see a hundred-core 
chip within a decade. The examples of Tera-scale chip (80 cores) by Intel, TILE64™ of Tilera, and the 
crossfire mode by AMD even indicate that the era of many-core (more than 16 cores) is coming.  
Unfortunately, multicore or many-core design complicates software development and architectural 
exploration. As the number of cores could continue to increase exponentially for multicores, assuming the 
Moore’s Law still holds in the near future (i.e. the number of transistors could double every 2 years), the 
required simulation effort will also increase exponentially if no other strategies are used to deal with such a 
complexity. In particular, detailed cycle-accurate simulation has been notoriously time consuming. A slow 
down factor of 10,000x is not unusual when detailed simulation and a comprehensive logging of machine and 
memory states are required. Here, 1-minute worth of real program execution could require more than 1-week 
worth of simulation effort.  
In this project, we integrate the cycle-accurate simulation and functional simulation at the same time to 
allow different accuracy-performance tradeoffs. We also pursue the multicore simulation speedup by taking 
advantages of large parallelism in a multicore host. The speedup can be substantial as the simulation of each 
core or each pipeline behavior in multicore is basically independent and can be in parallel modeled without 
much overhead. We will further investigate the applicability of sampling simulation in the multicore. We 
believe the speedup can be even attractive as most applications on multicore have apparent regularity. 
However, the transitions between cycle-accurate modeling and function modeling, or even between 
simulation sampling intervals will become the key technology we need to address in this joined project.  
 
三、 文獻探討 
 
There are several existing multicore simulators, which are developed for different purposes. In this section, 
we will compare the existing multicore simulators and explain why we chose COREMU to form the basis of 
our framework. In addition to these simulators focusing on processor simulation, we also reviewed the 
existing approaches which are simulating the coherent cache of multicore systems. 
子計畫三：以虛擬平台實現異質多核心應用快速原型設計之技術研究 
 8 
and each is assigned one or more simulated processors. Within each thread, processors are simulated in a 
round-robin fashion using an inner timeslice. The host threads synchronize on a barrier upon the completion 
of each outer timeslice. This ensures that processors remain approximately synchronized. 
Parallel Embra [12] extended the Embra [13] functional simulator, to support threadparallel execution and 
allow dividing up target hardware components at the granularity of a host multiprocessor system. It only 
supports outdated host and target systems, which are Standford FLASH machine and Irix operating system. 
Parallel Mambo [14] is a multi-threaded implementation of Mambo [15], the simulation engine of which 
supports both functional and cycle-accurate modes for PowerPC architecture and is implanted as a user-level 
thread-scheduler. Parallel Mambo also proposed a multi-scheduler method to adapt the engine to 
multi-threaded execution. On top of the method, the core-based module partition scheme, which simulated 
one core by a thread, was presented to achieve high inter-scheduler parallelism and low inter-scheduler 
dependency. 
 
3.COREMU 
 
COREMU is a QEMU-based parallel emulator, therefore, it inherits the advantages of QEMU [2, 6], 
including the fast dynamic binary translation engine, full-system emulation, and multiple target ISAs support. 
QEMU has been widely used in many software projects, such as Google Android emulator [16], Openmoko 
[17], etc., and has been shown to be helpful for the software development. However, QEMU is not scalable 
for multicore emulation due to its sequential emulation model mentioned above. 
  COREMU is designed to be a scalable parallel full-system emulator, and thus adopts the multicore on 
multicore model in which each virtual core is emulated by a software thread. Each emulation thread executes 
the binary translation engine of QEMU in parallel, and has its own code cache to buffer translated codes. 
Moreover, the binary translation scheme of QEMU translates and executes a basic block at a time for better 
performance, resulting in the determinism of emulated instructions within a basic block. In the original 
QEMU emulation model, even though it will not affect the correctness of parallel programs, the behavior may 
be different from executing on real multicore machines. The scheduling at the granularity of basic blocks 
guarantees there is no interleaving execution within the block. On the other hand, COREMU is able to reflect 
the non-determinism of parallel programs with the multicore-onmulticore emulation model. 
  Besides, COREMU is open and public available with x86_64 and ARM target ISAs supported. Therefore, 
our framework used COREMU to achieve the fast multicore emulation and analyze the communication 
behavior of multi-threaded applications. 
 
4. Coherent Cache Simulation 
 
In most shared-memory multicore systems, each individual core has a private data cache for its own use. 
Private data are used only by a single core, while shared data are accessed by multiple cores. By accessing the 
shared data in the shared-memory, it provides an essential way for processors to communicate with each other. 
However, caching shared data in the private caches could lead to the inconsistency problem of multiple copies 
of the same data. A cache coherence protocol is required to avoid the inconsistency problem in the data caches. 
子計畫三：以虛擬平台實現異質多核心應用快速原型設計之技術研究 
 10 
can execute, and threads release the lock before calling a blocking system call, or after they have been running 
for specified code blocks. The serialization of the parallel execution generates the execution order of memory 
references that would hardly occur on a real multicore system. 
CMP$im [23] is a Pin-based [24] multicore cache simulator. It achieves a fast simulation speed with the 
dynamic binary instrumentation of Pin. The Pin-based approach does not sustain any translation overhead, 
however, it can only support the user program that is built for the x86 ISA. 
 
四、 研究方法 
 
In previous section, we described that a full cache simulator suffers heavy synchronization overhead. 
Although, it simulates the behavior of coherent caches faithfully and reports accurate results, the simulation 
speed can be very slow with poor scalability. To relax the massive synchronization overhead of a full cache 
simulator, we proposed a simplified multi-threaded execution model with barrier-based synchronization 
scheme. 
Since the non-determinism of parallel programs, the interleaved order of memory accesses by different 
threads may be different from run to run. In a parallel execution, the coherence misses are intermixed and 
difficult to identify during runtime. With the barrier information in the memory traces, memory references are 
separated into stages. The execution order of the stages is fixed by the barrier operations. However, the actual 
memory reference sequence among threads within the same stage is uncertain. 
Our approach makes use of the these information to estimate the coherence misses of a multi-threaded 
program. We first estimate the lower bound and upper bound of coherence misses of a multi-threaded 
application. By analyzing the memory traces in parallel, we could efficiently estimate the lower bound and 
upper bound to obtain a brief characterization of the program behavior. Also, we developed a method to 
further estimate the possible coherence misses. Later, we will present the methodology of coherence misses 
estimation in more detail. 
  In our multi-threaded emulator, each thread is responsible for the memory references of an emulated private 
cache, and we would like them to execute in parallel as much as possible. We chose the barrier operations of a 
multi-threaded program as the synchronization points, since a barrier operation is a global event that enforce 
all threads to synchronize. The temporal order of memory references on a local cache happening before a 
barrier synchronization must not interleave with those references of a remote cache happening after the barrier. 
Based on this idea, each thread of our emulator executes independently until a barrier synchronization had 
been reached. Therefore, we could significantly reduce the synchronization overhead and benefit from the 
modern multicore hardware to achieve a scalable emulation speed. 
 
1. Collecting Parallel Traces on Virtual Platform   
 
Memory system simulators fall into two main categories, i.e., the trace-driven and the execution driven, 
respectively [25]. The trace-driven approach relies on existing tools to generate memory address traces, and it 
takes the traces as input to perform the memory simulation. For some target ISAs, it may require a 
sophisticated hardware tool for addresses collection. On the other hand, the execution-driven approach 
子計畫三：以虛擬平台實現異質多核心應用快速原型設計之技術研究 
 12 
 
Figure 3. The evaluation flow of the trace-driven approach 
 
Generating Parallel Traces 
COREMU maintains its memory manage unit (MMU) during the emulation. We monitor every memory 
operation in the dynamic binary translation engine. For generating the memory traces, we first record memory 
references into a local buffer. When the buffer is full or at the end of the emulation, the emulation thread 
creates a worker thread to flush the data and allocates another buffer to continue the emulation. Each virtual 
processor, i.e., each emulation thread, has its own buffer to record memory references and writes to its own 
trace file. With the independent buffers and trace files, we prevent additional synchronizations among the 
emulation threads. 
  To support the proposed barrier-based approach, we must include the barrier information into memory 
traces. In COREMU’s dynamic binary translation engine, it is difficult to know the high level information of 
the emulated system. We can only obtain instruction-level information and the state of virtual CPUs. To 
capture the interested information of emulated system, a tracing mechanism for the dynamic binary translation 
is required. Alternatively, we applied the source-level instrumentation on the high-level programming 
constructs such as PARMACS macros in the SPLASH-2 benckmark suite [26]. When the instrumented code 
are executed, it triggers an event to inform COREMU that a barrier synchronization has been reached, and 
thus it can generate the barrier information into the trace file. 
 
Generating Sequential Traces 
Because each emulation thread of COREMU executes its own instruction stream in parallel, the global order 
of the memory accesses is non-deterministic. For comparing the estimation accuracy, we must generate 
sequential traces for the full cache simulator, GEMS, which takes memory references in execution sequence 
as the input. 
  To serialize the parallel execution, we introduce a global counter protected by a mutex lock. Whenever a 
virtual processor requests a memory reference, the emulation thread has to compete for the lock to increment 
the global counter, and then records this reference with the value of the global counter. The generated parallel 
memory traces contain the global order information as shown in Figure 4. Therefore, we can generate the 
子計畫三：以虛擬平台實現異質多核心應用快速原型設計之技術研究 
 14 
 
Figure 6. Emulation flow 
 
Figure 7 presents the performance issue of our approach. The simulation speedup is related to the 
parallelism of the multi-threaded applications. Moreover, our approach needs to pay a synchronization 
overhead whenever a barrier point is encountered. However, the experimental result in section 4 shows that 
our performance scales well when simulating more processors. Here, we identify two types of inter-thread 
communications: 
 
 Required communications, which are independent of the actual memory reference order. 
 Optional communications, which are influenced by the interleaved order of memory references. 
 
 
Figure 7. Performance issue of our approach 
 
The amount of optional communication can be estimated by the number of reads and writes in the stage. 
We use the method described in section 3.2.2 to calculate the upper bound of optional communications, and 
then the estimated coherence misses can be bounded by:  
 Lower bound = required communications. 
 Upper bound = required communications + optional communications. 
 
子計畫三：以虛擬平台實現異質多核心應用快速原型設計之技術研究 
 16 
Heuristic Reference Distance 
The actual number of coherence misses is hardly to reach the upper bound of optional communications, 
which assume the worst situation that the interleaving of references will cause the most misses. In addition to 
estimate a proper optional communication, we apply another method with the concept of processor locality. 
The reference run [27], a performance metric for parallel programs, means the stream of uninterrupted 
references by one processor to a cache line. We define the conjectural reference run (CRR) to estimate the 
optional communications in a heuristic approach. We assume that if a thread accesses the same cache line 
within a short distance, i.e. CRR, it will not be invalidated. 
In the parallel processing phases, the number of accesses is accumulated with a restriction. The references 
are ignored if they are near the previous accesses to the same cache line, as shown in Figure 8. The calculation 
in synchronization phases is the same with equation A-3. With different values of CRR, the estimated 
coherence misses can vary from the upper bound to the lower bound. The larger CRR value is applied, then 
the estimation of optional communications is lower. 
 
 
Figure 8. The illustration of CRR 
 
3.Detection of False-Sharing Cache Lines 
 
The contention of a cache line in a parallel program can occur due to true-sharing or falsesharing of the cache 
line. The false-sharing is the case that two or more processors operate on independent data in the same cache 
line, the cache coherency mechanisms will force the whole line to be synchronized. Therefore, the 
false-sharing problem imposes unnecessary conherence misses resulting in the performance degradation of 
parallel programs. 
In order to detect the false-sharing of cache lines, we need to further record the accessed block offsets in the 
parallel processing phases. Performing the false-sharing detection in the synchronization phrases by 
comparing the history of accessed offsets of all shared cache lines. If there exists writing words that have not 
been accessed by another thread, this cache line is treated as a false-sharing cache line. 
When the feature of false-sharing detection is enabled, our emulator generates a report for understanding 
the shared cache lines of the program. The report contains the statistics of shared cache lines in each stage, 
includeing the address, accessing count of each thread, and the accessed offsets of each thread if the line is a 
子計畫三：以虛擬平台實現異質多核心應用快速原型設計之技術研究 
 18 
communications. Since the estimation of the lower bound is to capture the cross-barrier communications. 
Figure11 shows the relation among the estimation results, the actual coherence misses, and the number of 
cores. If the threads of benchmarks increase, the coherence misses also increase. Therefore, it shows the trend 
that the overestimation in the case of small number of cores becomes much better in the case of many-cores. 
Figure 12 presents the emulation speed of each benchmark running with different threads. The emulation 
speed of various benchmarks may be different. However, it still shows that the amount of emulated memory 
references per second scale up well when the number of threads increases. Figure 14 shows the emulation 
speed of all tested benchmarks. The ocean benchmark has relatively worse scalability, because it contains 
more than two thousand barrier operations, while other benchmarks contain tens of barrier operations. 
 
 
Figure 9. Coherence misses of benchmarks running on different number of cores 
子計畫三：以虛擬平台實現異質多核心應用快速原型設計之技術研究 
 20 
 
Figure 11. Comparing the results with coherence misses 
子計畫三：以虛擬平台實現異質多核心應用快速原型設計之技術研究 
 22 
 
Figure 13. Emulation speed of the x86 case study (alternate) 
 
Figure 14. Emulation speed of benchmarks 
子計畫三：以虛擬平台實現異質多核心應用快速原型設計之技術研究 
 24 
our approach has a good scalability that can quickly estimate the coherence misses of a multi-threaded 
application for users to optimize their programs. 
Our coherence misses estimation scheme is only based on the barrier synchronization operations. To 
improve the estimation results, we may need to support more synchronization events, or develop a mechanism 
to further capture the inter-thread communications within parallel regions. One of the challenges is to acquire 
the information from the dynamic binary translator, we may resort to a developed tracing facility for more 
advanced studies. 
We would also like to enrich the framework on COREMU. We may build a performance model for 
multicore system, and the estimated cache misses can be used to support the performance model to calculate 
the cache access penalties. 
 
 
Figure 15. False-shared lines of benchmarks 
 
 
Figure 16.  False-shared lines of benchmarks running with different configurations of  
cacheline size 
 
子計畫三：以虛擬平台實現異質多核心應用快速原型設計之技術研究 
 26 
[17] “Openmoko,” http://www.openmoko.org. 
[18] J. Hennessy, D. Patterson, and A. Arpaci-Dusseau, Computer architecture: a quantitative approach, ser. 
The Morgan Kaufmann Series in Computer Architecture and Design. Morgan Kaufmann, 2007. 
[19] L. Benini, D. Bertozzi, A. Bogliolo, F. Menichelli, and M. Olivieri, “Mparm: Exploring the 
multi-processor soc design space with systemc,” VLSI Signal Processing, vol. 41, no. 2, pp. 169–182, 2005. 
[20] M. M. K. Martin, D. J. Sorin, B. M. Beckmann, M. R. Marty, M. Xu, A. R. Alameldeen, K. E. Moore, M. 
D. Hill, and D. A. Wood, “Multifacet’s general execution-driven multiprocessor simulator (gems) toolset,” 
SIGARCH Comput. Archit. News, vol. 33, pp. 92–99, November 2005. [Online]. Available: http: 
//doi.acm.org/10.1145/1105734.1105747 
[21] C. Keenan, HP-UX CSE: official study guide and desk reference, ser. HP Professional Series. Prentice 
Hall PTR, 2004. 
[22] N. Nethercote and J. Seward, “Valgrind: a framework for heavyweight dynamic binary instrumentation,” 
in Proceedings of the 2007 ACM SIGPLAN conference on Programming language design and 
implementation, pp. 89–100. [Online]. Available: http://doi.acm.org/10.1145/1250734.1250746 
[23] A. Jaleel, R. S. Cohn, C. keung Luk, and B. Jacob, “Cmp$im: A pin-based on-the-fly multi-core cache 
simulator,” in Proceedings of The Fourth AnnualWorkshop on Modeling, Benchmarking and 
Simulation(MoBS), 2008, pp. 28–36. 
[24] “Pin,” http://www.pintool.org. 
[25] R. Uhlig and T. N. Mudge, “Trace-driven memory simulation: A survey,” ACM Comput. Surv., vol. 29, 
no. 2, pp. 128–170, 1997. 
[26] S. C. Woo, M. Ohara, E. Torrie, J. P. Singh, and A. Gupta, “The splash-2 programs: characterization and 
methodological considerations,” in Proceedings of the 22nd annual international symposium on Computer 
architecture, ser. ISCA ’95. New York, NY, USA: ACM, 1995, pp. 24–36. [Online]. Available: 
http://doi.acm.org/10.1145/223982.223990 
[27] J. B. Rothman and A. J. Smith, “Analysis of shared memory misses and reference patterns,” in ICCD, 
2000, pp. 187–198. 
[28] C. Bienia and K. Li, “Parsec 2.0: A new benchmark suite for chip-multiprocessors,” in Proceedings of 
the 5th Annual Workshop on Modeling, Benchmarking and Simulation, June 2009. 
子計畫三：以虛擬平台實現異質多核心應用快速原型設計之技術研究 
 28 
 
 2
才找到會場。 
此次的會議共有兩個專題演講，分別在第一天與最後一天的早上舉行。第
一天早上的專題演講由 Aloysius Mok教授討論即時系統的未來趨勢。Mok教授
提到自 1973年由 Liu與 Layland的即時排程論文發表後，時至今日及時系統在
理論與實務方面俱以發展成熟，而現今多樣化的資訊服務(如：cyber-physical 
systems, CPS)皆須以『即時』的方式提供給人們使用。而由於 CPS之多樣性與
不確定性，目前對於 CPS的未來發展與演進，相關研究人員尚未有定論。而此
為 CPS研究人員所遇到的挑戰。 
第二場專題演講由 Luis Miguel Pinho教授主講，主要為討論即時系統的程
式的模型（實施範例:paradigm）與工具（程式語言）對未來即時系統的發展有
很大的關係，而目前對於這方面的研究相對偏少。相反的，在網路、、中介軟
體（middleware）、作業系統與硬體（多核心系統），方面在過去數十年來有令人
不可置信的進展。如何讓即時計算與上述的技術結合，進而讓即時系統利用這
些先進的科技為目前重要的課題。其中，程式撰寫時所使用的模型由於是 10~20
年前發明的，不是太過於低階就是太過於高階，而目前編譯器與作業系統的研
究均將問題隱藏起來，自行解決，以致於沒有辦法使用正確的 level of abstraction
來完整解決這個問題。另外，在程式語言方面，目前對於即時且平行的系統並
沒有足夠的支援。因此，對現有的程式語言加上平行（concurrent）的機制似乎
是比較可行的一個方法。 
本年度的 RTCSA會議中，主要的 session為： 
· Real-time multiprocessor systems 
· Ubiquitous computing I and II 
· Timing analysis I and II 
· Power/Energy-aware design 
· Real-time scheduling I, II and III  
· Memory Storage Management 
 1
 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                     日期：99 年 11 月 30 日 
一、參加會議經過 
 此次行程主要是參加 RACS 2010，並在第二天的會議上報告新發表的論文。期間
觀摩其他學者在多核心計算機架構與無線網路上的研究，並與其他國家的教授進行
學術性的交流。其中主要與 South Dakota State University 的王偉教授討論美國
無線感測網路近期的發展方向，並與 Hansung University 的 Junyoung Heo 討論基
於虛擬機器的程式保護的機制。 
 RACS 2010 在美國喬治亞州的的亞特蘭大舉辦，主要議題是可靠自主運算的理論
計畫編號 NSC 99－2220－E－002－026－ 
計畫名稱 在多核平台上之多核虛擬環境研發-子計畫三:以虛擬平台實現異質多核心應用快速 原型設計之技術研究(2/2) 
出國人員
姓名 李振邦 
服務機構
及職稱 台灣大學資訊工程系研究助理 
會議時間 
99年10月27 日
至 
99 年 10 月 30 日 
會議地點 亞特蘭大 
會議名稱 
(中文)2010 年可靠自主計算之電腦科學國際會議 
(英文) International Conference on Reliable and Autonomous 
Computational Science 2010 
發表論文
題目 
(中文) 使用虛擬機器之動態轉譯機制保護緩衝區過載攻擊 
(英文) Protection against Buffer Overflow Attacks via Dynamic 
Binary Translation 
 3
 
三、攜回資料名稱及內容 
會議論文集(Reliable and Autonomous Computational Science, International 
Conference RACS 2010, Atlanta, GA, USA, October 27-30, 2010) 
 
99 年度專題研究計畫研究成果彙整表 
計畫主持人：洪士灝 計畫編號：99-2220-E-002-026- 
計畫名稱：在多核平台上之多核虛擬環境研發--子計畫三:以虛擬平台實現異質多核心應用快速原型設
計之技術研究(2/2) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 2 2 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 4 4 100%  
博士生 1 1 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 1 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100 字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100 字為限） 
1.Migrating Android Applications to the Cloud 
2.CSR: a Cloud-assisted Speech Recognition Service for Personal Mobile Device
3.A Cloud-Based Virtualized Execution Environment for Mobile Applications 
4.Developing Collaborative Applications with Mobile Cloud-A Case Study of Speech 
Recognition 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
學術成就: 
研究種基於同步屏障(Barrier)指令劃分平行區域的方法，對平行程式的緩存存取一致性
失誤所造成的效能影響進行評估。我們將這個方法整合到一個系統層級的開放原始碼模擬
器，COREMU，以便用來評估整個模擬的擴充性。 
技術創新: 
在效能分析技術上，利用 COREMU 的虛擬平台技術得以針對 Phase 的執行碼快速全面分析
其執行的行為，並提供各個核心處理器相關的執行時間、執行週期數、執行頻率等資料協
助後續對 cycle accurate 的執行碼分析，以取得快速又精確的參考結果，協助應用程式
及系統設計人員優化其設計。 
社會影響: 
本計畫設計之效能分析技術及工具，有助於填補國內對各種多核心平行處理的程式及產品
開發分析平台工具欠缺的環節，可具體協助提升國內廠商之競爭力。 
研究成果之學術或應用價值: 
可進一步考慮程序執行於同質/異質多核心與其他硬體資源間的交互作用，進行驗證、除
