 2
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■  達成目標 
□ 未達成目標（請說明，以 100 字為限） 
□ 實驗失敗 
□ 因故實驗中斷 
□ 其他原因 
說明： 
 
 
 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：□已發表 □未發表之文稿 ■撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100 字為限） 
    
研究成果已在國際研討會 16th IEEE International Conference on Embedded and 
Real-Time Computing Systems and Applications (RTCSA 2010) 中發表。 
 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
 
本為期一年的專題研究計畫提出了一個針對多層單元快閃記憶體儲存系統所
設計的機制，同時考慮了多層快閃記憶體所帶來的新挑戰與檔案系統的存取
特性，因此在效能優於其他相關的機制。我們的機制會針對不同的存取行為，
採取不同的管理方式，並且採用混合型的對應方式，在效能與記憶體需求之
間取得平衡。我們的研發成果不但可以立即應用在最新的快閃記憶體產品
上，所有參與計畫的學生也於相關的快閃記憶體儲存系統發展上，獲得很好
的研究經驗。 
 
 
 4
 
 
 
Figure 1: The Structure of a FAT File System. 
Figure 2 is a trace extracted from a set of file creations in a FAT file system. Figure 2.(a) shows the write flow 
associated with creating two 4KB files, while Figure 2.(b) presents the write flow associated with creating two 
64KB files after the previous file creations. We align the two traces for comparison purpose. In the figure, the 
column labeled with “Address” gives the starting address of the data accessed by a request with “WAddr” 
indicating a write operation. It shows the sector address associated with a request, with each sector being 512 
bytes in length. The column labeled with “Count” gives the size of the data associated with a request. In the 
trace, the basic space allocation unit is 32KB in size. The column labeled with “Area” indicates the part of the 
FAT file structure that is accessed. 
 
 
 
 
 
 
 
 
 
 
Figure 2: Trace of File Creations under a FAT File System. 
From the trace, the following observations are noteworthy: (1) The root directory and FAT tables are updated 
frequently; (2) As shown in Figure 2.(a), although only 4KB of data are written to the storage, 32KB space is 
occupied; the second 4KB file starts from 0x00004080, rather than 0x00004048; (3) For those files that are 
larger than 32KB, the FAT system allocates space continuously. As shown in Figure 2.(b), for creation of the 
 6
The physical block address (PBA) of the allocated block is recorded in BlockTable[VBA]. 
Since out-place update is a widely adopted solution for handling data-update requests, an extra replacement 
block (physical flash-memory block) is assigned to store the newly updated data. To keep track of the latest 
version of data, an UpdateRec is created whenever a replacement block is allocated for a virtual block. Each 
UpdateRec contains the following fields: 
 VBA records the corresponding virtual block address. 
 Primary records the physical block address of the associated primary block. 
 Replace records the physical block address of the associated replacement block. 
 LWP is the index of the last written page in the associated replacement block. 
 Count maintains the number of backward updates occurred in this record. The initial value of 
Count is 0. 
 Mode is a one-bit flag indicating whether the mapping is in block mapping mode (0) or page 
mapping mode (1).1 
 Priority is the priority for UpdateRec replacement. When a write/update request arrives, Priority of 
the corresponding UpdateRec (if any) is set to 0xFF, while Priority of other UpdateRec's would be 
decreased by 1. 
Finger 3 shows an instance of UpdateRec. To simplify the drawing, we assume that each flash-memory block 
contains eight pages. As shown in the figure, the physical block 3 is allocated for the virtual block 9 as its 
primary block. Starting from page 0, two continuous pages have already been updated. The physical block 1 
is allocated as its replacement block, and the mapping is in block mapping mode. LWP is updated to 1 to 
indicate the index of the last written page in the replacement block. The value of Count is initialized to 0, 
and the initial value of Priority is set to 0xFF. 
 
Figure 3: An Instance of UpdateRec. 
Since data updates might be random and data amount of each update might be small, only UpdateRec is 
insufficient if fast data access is required. To deal with small and random updates, page-level mapping 
scheme might be an adequate solution. However, page-level mapping scheme must be used carefully since it 
will consume a large amount of RAM. In the proposed MFTL, PageMapStatus is created to work with 
UpdateRec whenever the mapping switches to page mapping mode. Each PageMapStatus contains two 
elements: 
                                                 
1 Initially, the mapping is in block mapping mode. When the Count value exceeds a pre-defined threshold, it will switch to page 
mapping mode. 
 8
replacement block of the victim UpdateRec will be merged to a newly allocated block, and the victim 
UpdateRec could then be released and reassigned to the new request. After the UpdateRec is located, MFTL 
determines the mapping mode of the UpdateRec. Different mapping mode would affect the manner how 
MFTL writes data to flash memory. 
 
Figure 5: Flowchart of an Update Operation. 
If the mapping mode is in block mapping mode, some further checks are required. According to the index of 
starting target page for the update request (i.e., STP) relative to the index of the last written page in the 
replacement block (i.e., LWP), the update request is treated differently. For the case in which STP is larger 
than LWP, the request is treated as a forward update. Otherwise, some previously updated data is to be 
updated again by the request, and the request is treated as a backward update. Since backward updates incur 
higher page-copying overheads, page-mapping mode is thus introduced to deal with small, random, and 
frequently updated data. 
As mentioned previously, the Count field in UpdateRec is used to maintain the number of backward updates 
that had occurred in this record. When it exceeds a threshold, the mapping is switched to page mapping 
mode. If a backward update occurs but does not result in a switch to page mapping mode, MFTL will 
examine whether page-copying after updating data is required. The primary reason behind page-copying 
after updating data is the assurance of data integrity, since the primary block or the replacement block would 
be reassigned in this case. 
Read Flow 
For a read request, MFTL locates the target data through either BlockTable or UpdateRec's (and 
PageMapStatus's, if required). Figure 6 shows the flowchart of a read operation. When a read request arrives, 
MFTL first derives the corresponding VBA and STP via the logical address of the request. Then, MFTL 
determines whether the derived VBA matches the VBA field of any UpdateRec. If no such UpdateRec is 
 10
BAST or FAST over MLC flash memory would incur extra overhead, we compare the three schemes over 
SLC flash memory. The flash memory chip used in the experiment is Samsung K9WAG08U1B 16G-bit SLC 
flash memory, in which each block contains 64 2KB pages. All of the traces were captured by the SD/MMC 
card protocol analyzer VTE2100 [3]. The cluster size was set as 16KB, where the cluster size was the 
minimum allocation unit for a file. For example, FAT16 file system will allocate 16KB space for a 4KB file 
with internal fragmentation and allocate 4×16KB space for a 64KB file without any internal fragmentation. 
Table I summarizes the characteristics of the seven evaluation patterns. 
Table I: Characteristics of Evaluation Patterns. 
Pattern Description 
4KB-S Sequentially copy 5,000 4KB files into a directory to emulate a large amount of small file creations 
with internal fragmentation. 
64KB-S Sequentially copy 5,000 64KB files into a directory to emulate a large amount of small file 
creations without internal fragmentation. 
4KB-R Randomly create 120,000 4KB files and process up to 4,000,000 file write/update operations to 
emulate a tremendous amount of random small-file accessing with internal fragmentation. 
64KB-R Randomly create 30,000 64KB files and process up to 4,000,000 file write/update operations to 
emulate a tremendous amount of random small-file accessing without internal fragmentation. 
ROOT Copy files/directories of different sizes into the root directory to emulate a synthetic situation. 
SUB Copy files/directories of different sizes into a subdirectory to emulate a synthetic situation. 
MP3 Copy mp3 files and photos to NAND flash storage. 
 
Experiment Results 
Figure 8 and Figure 9 compare the number of extra page writes and the number of total block erasures for 
BAST, FAST, and MFTL, under different number of extra blocks over a 2GB flash memory. Except for the 
extreme cases (i.e., the patterns 4KB-R and 64KB-R), FAST performs better than the other two schemes when 
the number of extra blocks is very limited. In fact, its performance saturates at three extra blocks. This is 
because extra blocks are shared by all logical blocks with FAST. As the number of extra blocks is increased, 
BAST demonstrates better performance than FAST for patterns 4KB-S and SUB. For patterns 64KB-S, ROOT, 
and MP3, BAST and FAST perform similarly. However, MFTL outperform both BAST and FAST when four 
extra blocks are provided. In particular, the performance improvement with our scheme is significant when 
the number of extra blocks falls between four and six. This is due to the following two reasons: (1) At least 
four extra blocks are required in order to well support updates of two FAT tables, root directory, and data area, 
which are needed when writing a file to storage; (2) Windows XP uses two threads to carry out writing 
operations for files with sizes over 64 KB; hence five extra blocks are enough to support update operation for 
a large file. Additional extra blocks do not offer obvious improvement. 
 12
(a) ROOT, Page Writes 
 
(b) ROOT, Block Erasures 
(c) SUB, Page Writes (d) SUB, Block Erasures 
(e) MP3, Page Writes 
 
(f) MP3, Block Erasures 
Figure 9: Performance Comparison of BAST/FAST/MFTL under Different Number of Extra Blocks for 
Accessing Synthetic Files over a 2GB Flash Memory. 
Memory Requirement 
We now discuss memory requirements for the three hybrid mapping schemes. Since block mapping tables are 
of the same size for all schemes, we focus on memory requirements for managing update requests. Table II 
lists memory requirements for each extra block and for managing page mapping information. 
Table III lists the memory requirements for these schemes with respect to different number of extra blocks. As 
shown in the table, when the number of extra blocks is six, MFTL can save about 40.85% memory space 
 14
與執行計畫相關之論文或專利發表 
[1] Yuan-Hao Chang, Jian-Hong Lin, Jen-Wei Hsieh, and Tei-Wei Kuo, “A Strategy to Emulate NOR Flash 
with NAND Flash,” ACM Transactions on Storage, Volume 6, Issue 2, Article No. 5, July 2010. 
[2] Jen-Wei Hsieh, Chung-Hsien Wu, and Ge-Ming Chiu, “Design and Implementation for Multi-Level Cell 
Flash Memory Storage Systems,” the 16th IEEE International Conference on Embedded and Real-Time 
Computing Systems and Applications (RTCSA 2010), Macau SAR, P.R.C, August 23-25, 2010. 
[3] 中華民國發明專利，證書號：I331337，卷號：37，期號：28，公告日期：2010/10/01，張原豪, 謝
仁偉, 郭大維, 楊政智，『快閃記憶體之高效率靜態平均抹除方法』 
[4] 中華民國發明專利，證書號：I329804，卷號：37，期號：25，公告日期：2010/09/01，謝仁偉, 張
立平, 郭大維, 謝享奇，『快閃記憶體之高效率資料特性辨識方法』 
[5] 中華民國發明專利，證書號：I329805，卷號：37，期號：25，公告日期：2010/09/01，蔡易霖, 郭
大維, 謝仁偉, 張原豪, 謝享奇，『可調式快閃記憶體管理系統及方法』 
[6] 中華民國發明專利，證書號：I329860，卷號：37，期號：25，公告日期：2010/09/01，謝仁偉, 吳
柏良, 張原豪, 郭大維, 楊政智，『 硬碟資料讀寫快取裝置及方法』 
[7] 中華民國發明專利，證書號：I313871，卷號：36，期號：24，公告日期：2009/08/21，謝仁偉, 郭
大維, 謝享奇，『快閃記憶體資料存取可靠性提昇方法』 
無衍生研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
獲邀參與以下學術活動： 
1. General Chair, International Workshop on Software Support for 
Portable Storage (IWSSPS 2010)  
 
2. Session Chair (Session 10 Architecture and Practice I), the 16th IEEE 
International Conference on Embedded and Real-Time Computing Systems and
Applications (IEEE RTCSA 2010) 
 
3. Local Arrangement Chair, the 8th IEEE International Symposium on 
Parallel and Distributed Processing with Applications (IEEE ISPA10) 
 
4. Workshops Chair, the 8th IEEE International Symposium on Parallel and 
Distributed Processing with Applications (IEEE ISPA10)  
 
5. Program Committee Member, International Workshop on Software Support 
for Portable Storage (IWSSPS 2010) 
 
6. Program Committee Member (Track on Embedded Systems), the 12th IEEE 
International Conference on High Performance and Communications (HPCC)
 
7. Program Committee Member (Track 3. Ubiquitous Computing and Mobile 
Systems), the the 3rd International Conference on Human-centric 
Computing (HumanCom-10) 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
