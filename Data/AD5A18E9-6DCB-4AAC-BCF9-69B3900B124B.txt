is of L+1 levels (from the zeroth to the Lth levels) and
has Ns = 2m states at each level. The corresponding tail-
biting paths for codewords of C∼ should constrain on the
same initial and final state. By relaxing such constraint,
we denote by C∼s the super code of C∼, which consists of
all paths that may end at a final state different from the
initial state. Define the received vector r = (r0, r1, . . .,
rN−1), where N = nL.
Wang et al. extended the received vector to rext =
(r0, r1, . . . , rN−1, r0, r1, . . . , rαN−1), where 0 < α ≤
1 [1]. Thus, the size of rext equals (1 + α)N and the
trellis becomes of (1 + α)N + 1 levels. The VA is then
applied to rext by initializing the metrics of all states
at the zeroth level equally likely (usually, zero). When
the final level is reached, the path with the best metric is
traced back. Obviously, the performance of the algorithm
is strongly related to α. In general, a larger α implies a
higher complexity and a lower WER at a fixed signal-
to-noise ratio (SNR).
The wrap-around Viterbi algorithm (WAVA) also ex-
ecuted the VA by starting from all states with the same
zero initial metric [2]. If the best path, upon the comple-
tion of the first VA trial, is a tail-biting one (namely, in
C∼), then it is outputted as the final decision. Otherwise,
the VA needs to be re-executed but the initial metrics
should be set as the metrics at level L, obtained in the
previous VA trial. This process is repeated until either
the best path belonging to C∼ or the maximum number
of iterations, I , is reached. For most CTBC, the BER
performance of the WAVA is nearly optimal with I = 2.
Since this algorithm examines whether the best path is
the tail-biting path at the end of every iteration, it may
have an early stop. Therefore, although its maximum
complexity is I VA trials, its average complexity is much
less than this number.
Both the above algorithms are sub-optimal. To ob-
tain an optimal decoding algorithm for the CTBC, a
straightforward one is to perform the VA on all of the
tail-biting subtrellises. However, such approach may be
impractical due to its high computational complexity.
Very recently, an ML decoding algorithm of practical
decoding complexity has been proposed [4]. The scheme
has two phases. In the first phase, the VA is applied to
the trellis of the CTBC to obtain the trellis information.
Based upon the trellis information, the algorithm A* is
then performed on all subtrellises in the second phase
to yield the ML decision. It has been shown that the
decoding complexity has been reduced from Ns VA
trials to equivalently 1.3 VA trials without sacrificing
the optimality in performance.
III. RELIABILITY-BASED DECODING
Denote the binary codeword of C∼ as
v  (v0, v1, . . . , vN−1) ∈ {0, 1}N . Define the hard-
decision sequence y = (y0,y1,. . .,yN−1) corresponding
to the received vector r = (r0,r1,. . .,rN−1) as
yj 
{
1, if φj < 0;
0, otherwise,
where φj  ln[Pr(rj |vj = 0)/Pr(rj |vj = 1)]. Then, it
can be derived by the Wagner rule that the ML decoding
output u for received vector r satisfies
N−1∑
j=0
(uj ⊕ yj)|φj | ≤
N−1∑
j=0
(vj ⊕ yj)|φj | (1)
for all v ∈ C∼, where “⊕” is the exclusive-or operation.
Let the estimated information bits corresponding to u
be z  (z0, z1, . . . , zL−1). Then, u can be generated
according to z through the following L state transitions:
S0 → S1 → · · · → S → S+1 → · · · → SL,
where S ∈ {0, 1, . . . , 2m − 1} and S0 = SL.
From (1), it is obvious that if r is circularly
shifted left by np positions, where 0 ≤ p ≤ L −
1, and is used as the input of the decoding al-
gorithm, the ML decoding output becomes u′ =
(unp, unp+1, . . . , uN−1, u0, u1, . . . , unp−1). This can be
verified by
N−1∑
j=np
(uj ⊕ yj)|φj |+
np−1∑
j=0
(uj ⊕ yj)|φj | ≤
N−1∑
j=np
(vj ⊕ yj)|φj | +
np−1∑
j=0
(vj ⊕ yj)|φj |
for all v ∈ C∼. Since u′ can be generated through the
following state transition:
Sp → Sp+1 → · · · → SL−1 → S0 → S1 → · · · → Sp,
the information bits corresponding to u′ are
(zp, zp+1, . . . , zL−1, z0, z1, . . . , zp−1). In other words,
z can be obtained through circularly right-shifting z′ by
p bits. This confirms that the ML decision still can be
found when r′, instead of r, is used as the input of an
ML decoding algorithm. We may then choose a better
value of p such that the complexity of the ML algorithm
can be reduced or the non-ML algorithm can find the
ML solution with a higher probability (equivalently, the
WER performance of the non-ML algorithm can be
improved.)
Recall that the VA for the CZTC starts its decoding
from the all-zero state. Branches of the trellis of the
CZTC are not merged until the mth level. On the other
2
2 2.5 3 3.5 4 4.5 5
10
−4
10
−3
10
−2
10
−1
10
0
SNR
b
 (dB)
W
or
d 
E
rr
or
 R
at
e 
(W
E
R
)
 
 
Wang, α=0.25
Wang+R, α=0.25
Wang, α=0.75
Wang+R, α=0.75
Fig. 1. Performance comparison in word error rates (WERs) between
the algorithm proposed by Wang et al. [3] (denoted by “Wang”)
and its improvement using the reliability-based decoding (denoted by
“Wang+R”)
2 2.5 3 3.5 4 4.5
10
−4
10
−3
10
−2
10
−1
10
0
SNR
b
 (dB)
W
or
d 
E
rr
or
 R
at
e 
(W
E
R
)
 
 
WAVA, I=1
WAVA+R, I=1
WAVA, I=2
WAVA+R, I=2
Fig. 2. Performance comparison in word error rates (WERs) between
WAVA and its improvement using the reliability-based decoding (de-
noted by “WAVA+R”)
WER performance of WAVA in the case of I = 2 only
has little improvement, the computational complexity as
listed in Table I reduces. Since A* is already an ML
decoding algorithm, the WER performance cannot be
improved. However, its complexity is reduced through
the reliability-based decoding as shown in Table II.
In Figure 3, we did the comparison among our pro-
posed algorithm with different α, the WAVA, and the
A*. When α is larger, the WER performance of the
proposed algorithm can outperform the other algorithms
in the price of a little higher complexity. To be specific,
the performance of the proposed algorithm in the case of
α = 0.75 is very close to the WAVA while the proposed
TABLE I
RATIOS THAT THE WAVA AND THE WAVA+R DO NOT STOP AT THE
FIRST ITERATION
SNRb 2 dB 3 dB 4 dB
WAVA 0.316 0.147 0.060
WAVA+R 0.277 0.119 0.048
TABLE II
COMPARISON OF AVERAGE (AVE) AND MAXIMUM (MAX) NUMBERS
OF BRANCH METRIC COMPUTATIONS PER INFORMATION BIT IN THE
SECOND PHASE
SNRb 2 dB 3 dB 4 dB
algorithm ave max ave max ave max
A* 652 59870 359 22575 243 9231
A*+R 487 54026 185 18657 74 8259
algorithm and the WAVA needs respectively 1.75 and 2
maximum VA trials.
V. CONCLUSION
This work proposed the concept of the reliability-
based decoding for the convolutional tail-biting code
(CTBC). The concept can be applied to the existing
algorithms surveyed, and improve their performance in
terms of word error rate (WER) or/and computational
complexity. Furthermore, an exemplified CTBC decod-
ing algorithm based on the reliability concept is estab-
lished. This new algorithm can provide a good tradeoff
between the WER performance and the computational
complexity.
2 2.5 3 3.5 4
10
−4
10
−3
10
−2
10
−1
SNR
b
 (dB)
W
or
d 
E
rr
or
 R
at
e 
(W
E
R
)
 
 
Proposed, α=0.25
Proposed, α=0.5
Proposed, α=0.75
WAVA, I=2
A*
Fig. 3. Performance comparison in word error rates (WERs) among
A*, WAVA and the proposed algorithm
4
