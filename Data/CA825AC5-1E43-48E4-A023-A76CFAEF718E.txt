 2
行政院國家科學委員會專題研究計畫成果報告 
網路服務整合工具之設計與實作 
Design and Implementation of Web Service Integration Tool  
計畫編號：NSC 95-2221-E-036 -039 – 
執行期限：95年8月1日至96年7月31日 
主持人：鄭福炯(fccheng@ttu.edu.tw) 大同大學資工所 
計畫參與人員：洪泰昌, 張立楷, 吳嘉峰, 林其鴻 
 
一、中文摘要 
 
根據 Internet Systems Consortium, Inc. 
(ISC) 的 Internet 調查報告[1], 到 94 年一月為
止，有超過 300,000,000 伺服器主機在 Internet
上.  而根據 Google 得報告指出有超過 80 億的網
頁已被其蒐尋引擎所搜尋過[2]。WWW (World Wide 
Web) 已經變成人類有史以來最大的資訊及服務資
源中心。但是目前大多數的服務都是獨立而分散的
(例如，網路股票資訊與電子郵件服務)；當我們需
要一個在特定股價就能以電子郵件自動通知我們
的服務時，我們就需要有一整合工具，來串接與整
合網路股票資訊及網路電子郵件服務。而一個新整
合出來的服務，如果無法正確無誤被執行，對使用
者可能會造成重大損失。因此，我們亦提出網路服
務整合之例外分析與處理機制，來確保新的服務可
被正確、可靠的執行。 
 
而龐大之網路資源如何可以被重複再利用呢? 
我們採用了 Service-oriented Architecture (SOA) 
架 構 設 計 概 念 ， 發 展 出 可 以 模 組 化 服 務
(Modeling)、整合服務(Composition)、執行服務
(Execution)之方法及工具。Service-oriented 
Architecture (SOA) [3][4][5][6]已成目前全球
所矚目之重點技術。 SOA 是一種業務 (Business) 
導向應用程式系統的架構設計風格，但可以應用於
其他系統，包括中間件(Middleware)技術，例如網
格計算(Grid Computing)[7]。SOA 旨在將單個應
用程式功能彼此分開，以便這些功能可以被當成個
別"元件"，而這些元件可輕易被重新組合成新的應
用或服務。藉由 SOA 架構設計，我們可利用現有網
路上龐大資源，進而創造出許多新的服務出來。 
我們已利用爪哇程式語言及網際網路技術
[8]，發展一套服務整合的應用軟體(WSIT: Web 
Service Integration Tool)。這一套服務整合的
應用軟體，利用爪哇技術結合 SOA 設計架構，使得
網路服務整合變的非常容易。並且希望透過
WSIT[9][10]能利用現有網路資源來創造出更多新
得服務出來。 
本計劃我們針對網路現有資源，利用 SOA 架構
發展出一種方便而強大之整合方法與工具，來整合
現存網路服務。並設計將現有龐大網路資源轉化為
Web Service 之方法；同時設計網路服務整合之自
動化例外處理機制及演算法。且實作於 WSIT 中。
主要研究目標有五： 
z 現有網路服務資源如何轉化、包裝為標準網
路服務之研究及工具之發展。 
z 網路服務測試方法之研究與測試工具模組
之發展。 
z 網路服務整合之伺服器端解決方案之研究。 
z 網路服務整合之自動化例外處理機制演算
法。 
z 網路服務整合之容錯處理機制之設計。 
 
關鍵詞：全球資訊網、串接網路服務、網路服務
整合工具、例外處理、可擴展標記語言、統一模
式語言、服務導向架構。 
 
 
二、前言 
 
根 據 Internet Systems Consortium, Inc. 
(ISC) 的 Internet 調查報告[1], 到 96 年八月為
止，有超過 500,000,000 伺服器主機在Internet
上 (圖一).  而根據Google的報告指出有超過 80
億的網頁已被其蒐尋引擎所搜尋過[2]。WWW 
(World Wide Web) 已經變成人類有史以來最大
的資訊及服務資源中心。但是目前大多數的服務
被儲存為 XML 格式之記錄。 
III. (Replayer)執行引擎： 
z 執行引擎在我們的設計中必須包含
兩種功能，一是必須執行 (重新產
生 ) 使用者行為，在此功能實作
上，執行引擎模組 (圖二之 (C) 元
件) 會從紀錄檔的XML紀錄中讀入
使用者記錄，而後呼叫 JRex API  
(D 元件 ) ，JRex API  則呼叫
Mozilla GECKO 引擎 (E 元件) 去
執行相對應之動作，去和  Web 
Server 作溝通，而後再將執行結果
反饋給 JRex，透過 JRex API 再將
執行結果傳回執行引擎。  
z 而執行引擎之另一功能為執行邏輯
元件之功能，我們將邏輯元件功能
實作在該邏輯元件程式功能中，以
便執行各邏輯元件所應負擔之角
色，例如，值的賦予、條件的判斷、
工作起始、結束等，邏輯功能之迴
圈則隱含於流程線設計中。 
以下，已開發完成的 Reorder，Designer
與 Replayer Tools，以簡單的股票警示服務整
合為例，展示其成果。 
股票警示服務流程如下： 
(1). 到雅虎奇摩網查詢遠傳股價。 
(2). 如果遠傳股價≦37 元則等待 30 秒
後，重新執行步驟 1 杏則執行步驟 3。 
(3). 寄發"遠傳股價>37 元"警示郵件，並結
束跳回執行引擎。 
 
 
 
 
 
 
 
 
1.開啟 Reorder 程式，來模組化股票查詢
服務以及發送 Web mail 服務。 
(b)Reorder(a) Reorder Control Panel
Select record 
file
Open 
Recorder
Start 
Record
Workbench of Recorder
 
2. 開啟 Designer 並匯入上一步驟所模組化
之股票查詢服務 
 
 
3. 進一步匯入上一步驟所模組化之發送
Web mail 服務 
 
 
 
 
 
4. 將以匯入之服務串接，並加上邏輯控制元
件。得到新的股票警示服務 
 4
服端之服務執行環境，以替使用者建立一個
服務不間斷之執行環境。 
  
四、研究方法 
在本計畫中包含三部分：（1）Service Wrapper 
and Publishing tool (WIST Wrapper)：將模組化之
單一網路應用包裝標準之 Web Service 介面，使
網路應用得以發佈於公開之 UDDI 伺服器，使現有
龐大網路資源可以被再利用及再創新。（2）
Evaluation and Testing tool (WSIT Tester)：藉由
Evaluation and Testing 可測試模組化服務之正確
性與可靠性，並能在可能發生執行例外(Exception)
時，主動建議例外處理機制給使用者。（3）Server 
Side Solution：藉由伺服器端的實作，可提供單一
服務模組公佈(Publishing)機制、同時伺服器端可
提供穩定可靠之新服務執行環境，使用者只要將設
計好之新服務上傳至伺服器端，伺服器端即可為使
用者執行期所要之新服務。 
我們將以此三個部分，搭配之前研究專案已完
成的成果，以 SOA 之設計架構針對網路服務模組
化、網路服務發佈、網路服務整合以及測試和服務
品質之方面進行研究及實作。以期使服務再利用、
服務組合更加有效率、更容易，同時也使服務更可
靠。 
I. Service Wrapper and Publishing tool 
(WIST Wrapper)： 
 
 
 6
圖四  Wrapper 及 Publishing 架構 
 
Wrapper and Publishing 工具目的是將已模組
化之單一服務模組加以包裝成標準之 Web 
Service，並且能將此 Web Service 發佈至公開
UDDI server。我們計劃遵循以下標準來開發
Wrapper and Publishing: XML(Extensible Markup 
Language),HTTP/HTTPS, SOAP(Simple Object 
Access Protocol), WSDL(Web Services 
Description Language), UDDI(Universal 
Description, Discovery and Integration)。Wrapper
及 Publishing 架構如圖四。以下我們詳述 Wrapper 
and Publishing 工具分述如下： 
 
z Wrapper 工具部分主要利用已被 Recorder 模
組化之服務模組，將其重新包裝成 Web 
service，圖四為 WSIT Wrapper 工具架構。為
更 清 楚 說 明 ， 我 們 以 Greatest Common 
Devisior (GCD)之服務封裝成 Web Service 為
例，說明如下：: 
1. 以 Java Servlet 技術來封裝服務本體，圖
五為 GCD 之 Java 的實作。而此 Java 
Code 以 UML activity diagram 來描述
即 為 圖 六 中 之 GCD 的 Service 
Module，即為我們所要封裝之服務本
體。服務本體為一 UML activity diagram 
所描述之一網路行為流程；其來源是使用
者用 WSIT Reocrder 所產生的。當一流
程行為執行時，有可能需要輸入資料，例
如計算 GCD 時需要輸入兩個參數 a 和 
b。 
2. 在封裝本體中封裝工具必須自動去解譯
流程行為，判斷其輸入及產出。例如 GCD
服務中，a 和 b 號是輸入，而 gcd 為產出。 
3. 最 後 封 裝 工 具 可 依 照 WSDL 
specification 定義之標準自動為此服務
產生 WSDL 文件。如圖七為此 GCD 服
務封裝後之 WSDL 文件。 
 
 
 
而 如 果 以  呼 叫 API (Application 
Programming Interface) 作為比喻，這樣
的狀況就有如遠端伺服器上之API名稱已
經被改變，這當然會造成服務執行的失
敗。 
4. Structure of Web page change: 網頁結
構有可能在做成紀錄後，由於網站改版因
素而被改變，例如: node 位置改變、node 
attribute 的值改變等。 
5. Web service flow change: 服務流程網頁
順序有可能因為網站改版或調整而使得
順序發生變化。如果是在記錄完成後發
生，則服務模組之記錄的次序將會發生錯
誤。 
 
而這些原因都將導致網路服務執行失敗。而我們
希望在此計畫能設計出例外處理之自動評估機
制以及服務容錯評估機制。 
z 例外處理之自動評估機制：必須開新發演算法
來評估並處理例外狀況。由於每種網路行為之
不同，每個動作所可能產生之例外之可能亦不
一樣，我們可藉由分析各種網路行為間不同之
關係，開發出一個適用的例外處理演算法。我
們希望藉由新演算法的開發可以做到自動的例
外處理機制。 
z 服務容錯評估機制：在評估服務時，Evaluation
工具可在服物資料庫(UDDI registry)中找尋、比
對相等之服務，並據以將其作成作成備援服務
將，如此將可提高服務之可靠性。 
z Testing 工具主要用來測試服務模組的正確
性。我們計劃開發自動測試工具。並藉由測試
工具來測試經過評估之服務模組，以提升服務
模組之正確性與可靠性。 
 
 
III. Server side solution: 
 
 
圖八  伺服器架構解決方案 
第三個重要部分為伺服器端之實作。由於對
一般使用者而言，擁有一個穩定而且可長時間運轉
之執行環境是相當昂貴的(網路、硬體設備等)。因
此本計劃預計設計一伺服端之解決方案。將以往單
一應用程式延伸為 client-server 架構如圖六。 
伺服器端主要功能有三個功能區塊，分述如
下： 
z 提供服務執行環境：使用者透過 Java Web 
Start 機制，下載 WSIT Recorder 及 WSIT 
Designer 至客戶端。使用者可利用此工具來
進行服務模組化，及服務整合之工作。當完
成新服務後使用者可將新服務(XML file)上傳
至伺服器端。伺服器將可依照新設計之服務
加以忠實的執行。如圖八中步驟 1~5。 
z 提供服務模組的發佈：使用者亦可將其模組
化後之服務單元發佈至伺服端，然後公開出
來。而這些公佈出來之服務將可作為其他使
用者再利用之基礎。亦即其他使用者可利用
這些服務單元創造出更多服務出來。如圖八
中步驟 6~7。 
z Service template 提供：伺服端亦提供許多已
經過整合測試完成之 service template。使用
者只要下載這些 template 經過修改或填入所
需資訊，即可得到其所要之服務。例如，提
供股票警示服務 (股票查詢+發送簡訊 )之
template。使用者只要填入個人所想要得到通
知之股票代號及價格水準，及個人所擁有之
簡訊服務帳號、密碼，即可完成此服務設計。 
伺服端之解決方案可解決服務發現  (service 
discovery)之問題，同時亦提供 SOA 架構下最佳
 8
大同大學補助教師出席國際會議報告 
95 年 1 月 17 日修訂 
報告人姓名 中文: 鄭福炯 
英文: Fu-Chiung Cheng 
單位及職稱 資訊工程學系副教授 
中文: IEEE 電腦設計國際會議 會 議 正 式        
名     稱       英文: IEEE International Conference on Computer Design 
中文: 軟體物件硬體化之設計與實作 發表論文題目 
英文: Design and Implementation of Software Objects in Hardware 
會 議 時 間        自 95年 10月 1日 至 95年 10月 4日 地點 (國、州、城市) USA, CA, San Jose 
報告內容：(應包括參加會議心得、建議、攜回資料名稱及內容、其他) 
 
此次參加由IEEE Computer Society於美國加州San Jose所舉辦的第24屆
International Conference on Computer Design會議，此會議自2006年10月1日到2006
年10月4日共計四天在Doubletree hotel San Jose舉行，其中10月1日為報到日，正式
會議則從10月2日開始。大會安排了二個Keynotes: Professor Bill Dally from Stanford 
University (Computer Architecture in the Many-Core Era), and Fabio Angelillis Vice 
President of Engineering in the Silicon Engineering Group at Synopsys(Scaling 
Manufacturability Software to Thousands of Processors)和三個special sessions on 
“Hardware Equivalence Verification”, “Nano Technologies,” and “Interconnect 
Technologies.” 
 
本次會議從231篇投稿論文中接受72篇論文接受率為31%，分成五個領域計三組
進行研討。此次會議的所涵蓋的內容廣泛，如: 
z Computer Systems Design and Applications 
z Processor Architecture 
z Logic and Circuit Design 
z Tools and Methodologies 
z Verification and Test 
其他更詳盡的資料可參考該研討會的網站：http://www.iccd-conference.org
 
 
 
 
 
 
 
本報告請以 A4 紙張依式書寫。 
 一、 會議心得 
  
此次研討會分組討論計有五個領域三十個組別，總共 72 篇論文發表；此外尚
有一個 panel discussion、二個 keynote 和八個 special talks。由於研討會涵蓋領域頗
廣，有利於吸取不同領域之研究方法與經驗，以擴展個人之研究層面。同時，在
會場及晚宴時間與多位國內外學者認識，相互切磋獲益良多。 
 
Bill Dally 的 Keynote 中 Computer Architecture in the Many-Core Era 暢談由於
散熱問題單一 CPU 的速度進展受限，因而整個電腦發展又進入 parallel processing 
and multi CPU 的時代，Compiler and parallel programming 相對變得愈來愈重要。 
另一場 Keynote 中 Fabio Angelillis (Vice President of Engineering in the Silicon 
Engineering Group)指出為了達到 Design for manufacturing ，Optical proximity 
correction 必須利用來製造良率高的晶片，但其 computation time 是非常高的，故
須 parallel processing 技術來計算 optical proximity correction。 
 
Brown University 的 Professor Bahar 在 Trends and Future Directions in Nano 
Structure Based Computing and Fabrication 提到當 CMOS devices 縮到 nano-scale
時，這些 devices 有 high manufacturing defect rates and operate at reduced noise 
margins, exposing computation to higher soft error rates.新的設計與製造挑戰是如何
設計 defect-tolerant circuits。 
 
 
 
 
 
 
。
