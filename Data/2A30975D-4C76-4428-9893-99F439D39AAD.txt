 I 
中文摘要 
 
二維空間排列問題及三維空間長方體物件堆疊問題皆是在給定之空間內，尋求最佳
之空間安排計畫，以達成空間使用率最大化或資源浪費量最小化之決策目標。因此二維
及三維空間之排列、堆疊問題之演算法，實可在類似之演算邏輯下一併設計完成。若欲
針對二維及三維空間之排列、堆疊問題發展最佳解求法，絕對需付出極大之演算時間代
價，因此往往無法直接應用於需求分片/長方體物件種類及數量甚多時之大型實務問題。
可快速求得近似最佳排列方式之啟發式演算法或萬用啟發式演算法便成為近年來研究此
類問題最常使用之求解方式之一。由以往之研究經驗我們深知，不論是二維或三維空間
之排列、堆疊問題仍然存在極大之研究空間及價值，特別是在如何求算大型、具實務應
用價值之題目上亟代突破性之研究成果。而就現階段求解技術之研究趨勢而言，萬用啟
發式演算法短期內仍應是較佳的選擇。本研究因此依循如上認知，在所提出之「二維、
三維方形物件排列/裝載系統設計及開發」三年研究計畫中，冀望針對上述兩類問題以萬
用啟發式演算法中在過去文獻中有極為優異演算表現之演算法，發展成為解答核心。 
再者，目前因平行演算技術的提昇，使得利用電腦叢集的分散處理環境來提昇計算
效能，成為研究的新趨勢。本研究亦經由「平行處理」之演算技術來建立一個高效率平
行計算模式，利用萬用啟發式演算法搜尋的能力，加上可平行處理之特質，充分利用目
前電腦叢集之技術，配合MPI 平行程式語言之操作，建構一兼具經濟彈性及高效率的平
行演算求解計算模式，提供相關業者一可靠且易於使用之排列/裝載系統。 
 
關鍵詞：方形物件切割排列、方形物件裝載堆疊、萬用啟發式演算法、平行演算 
 
 III 
目錄 
中文摘要.....................................................................................................................................I 
ABSTRACT ............................................................................................................................. II 
目錄..........................................................................................................................................III 
一、 緒論 ................................................................................................................................ 1 
1.1 研究計畫背景及目的 ...................................................................................................... 1 
1.2 問題描述與假設 .............................................................................................................. 3 
二、文獻探討............................................................................................................................ 5 
2.1 二維空間方形物件排列問題/切割問題 ......................................................................... 5 
2.2 三維空間長方體物件堆疊問題...................................................................................... 7 
2.3 平行處理技術 .................................................................................................................. 9 
三、二維單原片問題之研究 .................................................................................................. 13 
3.1 模擬退火演算法設計 .................................................................................................... 13 
3.2 演算結果及分析 ............................................................................................................ 15 
3.3 結論及建議 .................................................................................................................... 21 
四、二維多原片問題之研究 .................................................................................................. 22 
4.1 問題定義 ........................................................................................................................ 22 
4.2 演算結果與分析 ............................................................................................................ 32 
4.3 結論與建議 .................................................................................................................... 46 
五、三維單容器堆疊問題－以多尺寸長方体為例 .............................................................. 48 
5.1「下後左」啟發式堆疊法則 ......................................................................................... 48 
5.2 結合堆疊法則之協力演化遺傳演算法 ........................................................................ 50 
5.3 演算結果及分析 ............................................................................................................ 55 
5.4 結論及建議 .................................................................................................................... 58 
六、三維多容器堆疊問題 ...................................................................................................... 59 
6.1 問題定義 ....................................................................................................................... 59 
6.2 演算結果與分析 ............................................................................................................ 69 
6.3 結論 ................................................................................................................................ 73 
參考文獻.................................................................................................................................. 74 
技術學刊發表論文一(技術學刊第 22 卷，2007 年)............................................................. 79 
技術學刊發表論文二(技術學刊第 23 卷，2008 年)............................................................. 88 
出席國際學術會議心得報告 .................................................................................................. 97 
出席國際學術會議發表之論文 ............................................................................................ 101 
 1 
一、 緒論 
1.1 研究計畫背景及目的 
  隨著科技進步、工商業的發達以及外在環境的變遷，如工資上漲、擴廠困難等因素，
工業界莫不亟思要如何精減人力以提昇效率，全面降低生產成本。然而，在如此競爭的
環境裡，我們卻不難發現尚有部分產業仍在利用人工方式來處理切割/排列(Cutting and 
Packing，C&P)等相關作業。如製鞋業裡，其皮料排刀作業乃是由相關人員依經驗及目
視法，將眾多不同形狀之分片依照其外觀，擺放在皮料原片上，試圖模擬出一近似最佳
或令人滿意之排列方式。然而此種方法缺乏科學之分析，恐造成皮料使用率偏低及浪費
之現象。此類問題亦常見於鋼鐵/造船、傢俱、紡織、玻璃，…，等相關產業。因此在這
些產業中，最令人關切的課題乃在於如何以科學之方法來取代人工作業，亦即如何快速
地產生一 “最佳”或“近似最佳”的切割/排列方式，達成原物料使用率最大化之目標。由
於切割/排列兩問題間，存在一材料有效使用與空間有效利用之一體兩面關係。因此，本
計畫書自此以「排列」一詞來代表一般性的切割/排列作業。所謂排列問題乃是將已知形
狀及數量之方形、不規則多邊形及不規則形的物件，安排擺放在一已知大小之空間裡，
使達空間利用率最大、浪費量最小之目標。各種排列問題若就難易度而言，以不規則形
物件之排列問題最為複雜；但不論是方形物件或是不規則形物件之排列問題之計算複雜
度(Computational Complexity)皆甚高。 
上述的排列問題實乃欲在二維空間(Two-Dimension)中尋求最佳的空間利用方式，
然而類似的問題─堆疊問題，亦常見於三維空間(Three-Dimension)中：例如在各類產業
中，棧板(Pallet)及立體方形倉儲空間/儲存容器(Container)普遍被使用。在生產部門裡，
零件、半成品、成品等物件在倉庫及棧板上空間的擺放方式，均以達成空間浪費最小為
目標。因為有效的利用空間放置材料和成品，將可節省倉庫的儲存空間及提高貨車裝載
率。 
堆疊問題是在一個預先給定的容器或空間中，將所要放置的物件堆疊在預先給定的
空間裡，使得空間浪費率最低。在各種堆疊的問題當中，隨著產品種類的不同，如物件
的尺寸、形狀、重量、材質、方向限制，及容器在尺寸、形狀、承載量、數量上的差異，
可衍生出各種不同類型的堆疊問題，表 1.1 為欲堆疊物體與容器的各種特性狀況。由表
1.1 可知，在堆疊問題中可探討的特性相當多；探討特性愈多，其困難度相對地亦提高
許多，也愈難在允許的時間內得到滿意的結果，因此目前文獻所探討的問題都大多僅考
慮少數特性。其中最常探討的要屬長方體物件堆疊至長方體容器內，此問題較簡單且在
實務上較普遍。傳統長方體物件堆疊問題中，在容器方面，大多討論單一長方體容器和
多個單一尺寸之長方體容器；在長方體物件方面，雖然多種尺寸和固定擺置方向的限制
已被廣泛討論，但在長方體堆疊方式上尚有改善空間。為更符合實際情況，例如車隊中
各車輛之容量不盡相同，因此在長方體容器方面，本研究摒除過去只能使用單一尺寸容
器之假設，允許以多種不同尺寸的長方體容器來裝載物件。 
 
 
 3 
再者，目前因平行演算(Parallel Computing)技術的提昇，使得利用電腦叢集（PC 
Cluster）的分散處理環境來提昇計算效能，成為研究的新趨勢。本研究擬在第三年計畫
經由「平行處理」之演算技術來建立一個高效率平行計算模式，利用計畫第一、二年所
發展之萬用啟發式演算法搜尋的能力，加上可平行處理之特質，充分利用目前電腦叢集
之技術，配合 MPI平行程式語言之操作，建構一兼具經濟彈性及高效率的平行演算求解
計算模式，並設計合適之使用者輸入及排列/裝載計畫結果輸出介面，最終提供相關業者
一可靠且易於使用之排列/裝載系統。 
本計畫之研究目的彙整如下： 
1. 針對二維空間排列問題，考慮欲排列之物件形狀，發展 GA, SA 及混血方式之
啟發式排列演算模式，開發易於使用之介面系統，並透過此一模式/系統產生一
最佳或近似最佳之物件排列方式，以達到原物料使用率最大及原物料浪費量最
小之目標，提供業者一科學、快速且可節省成本之物件排列系統。 
2. 以二維空間排列問題所發展之啟發式排列演算模式為基礎，採用類似邏輯並加
入三維空間堆疊問題額外之限制及考量，特別是在長方體物件方面，摒除過去
只能使用單一尺寸容器之假設，允許以多種不同尺寸的長方體容器來裝載物
件，發展出一套理想的堆疊演算模式來求解，並開發易於使用之介面系統，期
望透過模式/系統所產生的最終解，能夠達到容器空間使用率最高之決策目標。 
3. 導入「平行處理」之演算技術以加快系統運算之時間，迅速且即時提供使用者
可靠之排列/裝載計畫。 
4. 利用結合平行處理及萬用啟發式演算法之演算架構，將可廣為推展至其他實務
決策問題之解算，特別是有即時性需求之問題。 
1.2 問題描述與假設 
本計畫所探討之兩類決策問題之定義及相關研究假設，分述如下： 
1.2.1 二維空間物件排列問題 
二維空間物件排列問題旨在尋求一排列計畫，以求將所有外觀大小不同之分片排入
所提供之目標原片中，並達成原片使用率最大化、浪費量最小化之決策目標。因著分片
外觀不同（規則方形、不規則形狀），切割方式（對齊切割、非對齊切割），及原片數量
（單一原片、多重原片），二維空間排列問題又可區分成數種不同題型。此類問題之研究
限制主要為： 
1. 分片在排列之過程中不能超出原片周緣。 
2. 各分片間不允許有重疊的情況發生。 
1.2.2 三維空間長方體物件堆疊問題 
長方體物件堆疊問題是在一個預先給定的容器或空間中，將所要放置的長方體物件堆疊
在預先給定的空間裡，使得空間浪費率最低。三維空間長方體物件堆疊問題之各項分類
已描述如表 1.1 所示。傳統長方體物件堆疊問題中，在容器方面，大多討論單一長方體
容器和多個單一尺寸之長方體容器；在長方體物件方面，雖然多種尺寸和固定擺置方向
 5 
二、文獻探討 
  本節文獻探討依二維空間方形物件排列問題/切割問題、三維空間長方體物件堆疊問
題、及平行處理技術等三類文獻分別探討如下： 
2.1 二維空間方形物件排列問題/切割問題 
  二維空間排列問題由於在本質上屬於組合最佳化問題，很難在可接受時間內找到最
佳解。事實上，該問題為一 NP-Hard 之問題[47]，因此隨著問題愈複雜，解題時間呈現
出指數遞增之情形。所以在以往的研究中，大部分仍著重於發展快速的啟發式解法，以
產生“好的”或“近似最佳”之排列/切割方式，雖然在解答的精確度上有所犧牲，卻可使解
題效率快速凌越最佳解。Dagli and Tatoglu [34] 及 Babu and Babu [8] 提供了二維排列問
題之數種問題分類方式。就所提供的方形物料原片之數目而言，可分為單一原片(Single 
Plate)及多張原片(Multi-Plate)。多數的文獻著重於單一原片之方形排列問題。當需求圖
形之數量超過單張物料原片所能容納時，自然需要用到多張原片。這類問題的處理方法
大多是以數學規劃方式[40, 53]或啟發式解法[12, 34]求解問題：首先將所有需求方形大略
地指派到各張物料原片上，然後再進行各單張原片之排列。就排列之方式而言，可概分
為啟發式及最佳化。啟發式解法原則上即是透過一些圖形特徵法則(如面積、長、寬、高)
來決定圖形置入之次序及置入之位置[33, 64, 86]；另一種類型之演算法則是透過各需求
圖形間事先的聚合(Grouping)，經過逐步的迭次累積，直到所有的圖形皆被聚合完成[62, 
63]。至於最佳化技術應用於方形排列問題之文獻，依(1)決策目標，及(2)演算效率，分
別探討如下。在決策目標部分，大致可歸納為(a)使用物料原片張數最小化，如[26, 28]；
及 (b)使用率最大或浪費量最少 [13, 34]。在演算效率部分，由於排列問題本身為
NP-Hard，若嘗試以最佳化方式來求取使用率最大或浪費量最少之排列方式，由於演算
效率低劣，勢必無法應用到實務問題。為了提升排列效率，一系列之研究[11, 98]針對演
算法之最差情況(Worst Case Analysis)加以分析來評定演算法之好壞。稍後亦有研究提出
應當針對演算法之平均表現效率加以分析，而非最差情況。Biro 等人[17]利用網路結構
之解題效率較佳之特色，將排列問題視為一網路問題，惟演算結果並不如預期來得理想。
Chen[28]建構了一數學模式，用以求解不同大小的方形盒擺放在棧板上，而達成棧板
使用量最少之目標。 
  在切割問題之求解方面，就切割的方式而言，對齊切割(Guillotine Cut)的文獻佔了大
部分。所謂對齊切割意謂切割動作必須從物料原片的某一邊開始，然後平行於原片的另
外二緣進行切割，此類文獻如[30, 55]；惟方形切割並不必要受到對齊切割之限制。
Morabito 等[77]及 Hifi[58] 以一樹狀結構圖(Graph)來表示二維對齊切割問題:樹狀圖中
各節點代表不同階級中之分片切割結果。他們結合兩種啟發式解法：向下優先(Depth-First)
及上坡攀爬(Hill-Climbing)成為一混合型搜尋解法(DF-HC)。透過向下優先法之邏輯，由
於當問題規模甚大時，需要搜尋之節點數將大幅攀升，因此作者再發展出三個自定之啟
發式法則 H1、H2、H3，試圖有效降低所有可能之組合總數，來提昇演算效率。Hifi[58]
所探討之問題其實與上一篇類似，但於此各分片之價值不一定要與分片面積成正比。作
者採用 Morabito 之混合型啟發式解法(DF-HC)以及動態規劃法求解一維方箱問題組合而
 7 
矩形原片上。他們採用左下角優先放置原則，且利用投影座標來記錄各個矩形分片在矩
形原片上的排列位置，以產生出具最佳使用率之排列方式。該研究並透過遺傳基因演算
法程序，配合有效的複製方法、交配程序和突變機率，經過數百至數千次個迭次演算之
後，求得最佳解。Wu 等人[99] 針對 Babu and Babu [8]演算法中未有效利用部分空間之
缺點，提出一結合 SA 演算法及物件排列邏輯之混合式演算法。經執行文獻例題後，顯
示其結果明顯優於 Babu and Babu [8]之結果，特別是在中大型例題上，此種優勢更為明
顯。他們更進一步地利用此方形排列演算法至不規則物件排列問題。其作法乃是先找出
各個不規則物件之最小包覆方形(Rectangular Enclosure)，再應用方形排列演算法，排列
完成後先去除外觀之包覆方形，再尋求所有可能之緊靠(Shriking)。 
2.2 三維空間長方體物件堆疊問題 
  本節針對長方體物件堆疊解題方法與物件分類作說明，並對相關文獻進行分析與探
討。 
2.2.1 長方體物件與長方體容器 
堆疊問題的演進由最早期的一維問題直到目前大部分學者所研究二維的切割、排列
和三維的堆疊問題。而在三維的堆疊問題裡，堆疊物件會隨著產品種類的不同，其物體
的尺寸、形狀、重量、材質、方向都不一樣，容器也有尺寸、形狀、承載量、數量上的
差別，由此可發現堆疊問題之種類繁多。但若考量現實狀況太多，其問題複雜度將會遽
增，因此目前文獻所探討之問題大多只考量某些現實狀況，且依實際問題而採用特定的
解題方式。本研究將長方體物件堆疊問題之文獻大略分成下列三類： 
 
A、單一尺寸的長方體物件和單一長方體容器 
在堆疊問題中，以長方體物件大小相同且使用單一長方體容器最為簡單。由於大小
相同，往往會被簡化成二維裝載的問題來探討。張美忠[1]探討棧板裝載問題，尚不考慮
長方體物件的高度，而將問題簡化成二維裝載問題，並發展一整數規劃 (Integer 
Programming, IP)求解，再以此 IP 模式為基礎將其延伸應用在多種規格長方體的棧板裝
載問題上。Liu and Hsiao [73] 探討相同的問題，且把問題簡化成二維裝載模式進行求
解：他們將長方體物件不同的三個面各視為二維的問題去排列，且具相同高度之長方體
才能排在同一層，如此一來，層與層堆疊時才能平穩，然後再以數學模式求得最佳解。 
 
B、多種尺寸的長方體物件和單一長方體容器 
Ngoi 等人[79]發展出一個啟發式的堆疊方法，在堆疊時，每堆疊一個物體，都會考
慮其位置與方向的空間浪費最小。他們使用陣列的方式來記錄物件擺放的座標，使得長
方體物件堆疊時，能有效的在時間容許範圍內完成，而且解的品質也能在接受的範圍。
其長方體物件在堆疊時，可選擇由容器的底下往上堆疊或由容器的後面往前堆疊等兩種
方式。Bischoff and Ratcliff [19]指出大部分文獻均只針對某些特殊題型提出演算法，而忽
略了堆疊過程中有許多之實務考量，例如物體堆疊方向之限制、物體之受重能力、物體
搬運過程之限制、裝載穩定度、相同大小物體聚集堆疊、各物體卸貨時間先後不同、互
 9 
之因素，例如物體重量分佈、堆疊穩定度等，Davies and Bischoff [37]提出了一可事後調
整堆疊方式之演算法，試著同時重視空間使用率及重量分佈均勻。Chen 等人[29]提出一
0-1 混合整數規劃數學模式來求解此類問題。然而，如同眾人所知的，此模式僅能針對
非常小型之問題求算出最佳解。 
2.2.2 其他 
  Letchford 及 Amaral [72]分析、比較幾種文獻中以上界來求解堆疊問題的方法，文獻
裡所探討的方法都是求得長方體物件最佳的擺放數量，並證明某些方法結合起來能求得
更好的解。Dowsland [39]求解大小不一樣的長方體物件的堆疊問題，發展一個結合文獻
演算邏輯的演算法來求最佳使用率。Dowsland 等人[41]在 1992 年提出一篇搜集所有堆疊
排列相關問題的文獻回顧專文，探討了許多相關模式的構建及解題技巧的分析。  
  綜合以上文獻可以發現，在二維空間方形排列問題上，單原片問題之求解雖然較容
易獲取最佳或近似最佳之排列方式，惟在實務上之應用仍以多原片方形排列問題較為常
見。理論上，若能發展出一針對多原片(且允許原片大小皆不同)方形排列問題有效之演
算法，單原片方形排列問題可自然迎刃而解。至於三維空間之堆疊問題，由於困難度甚
高且最佳化數學模式無法在可容許的時間內求得最佳解，是故目前文獻大部分皆僅探討
長方體物件堆疊在單一長方體容器內，甚少考慮長方體物件可擺放之方向性限制，甚至
不見文獻有任何關於多重容器(且各容器大小不一定相同)之討論。此種情形在實務上是
可能發生的。有鑑於此，為了能更符合實際狀況，本計畫所探討的長方體物件堆疊問題
除了傳統的多種尺寸的長方體物件堆疊在單一長方體容器之外，特別針對多重容器(且各
容器大小不一定相同)之長方體物件堆疊問題發展演算法，並進一步考慮各種影響堆疊之
實務因素在空間使用率上之影響。文獻中亦可見模擬退火演算法、遺傳基因演算法、及
混合法等皆可獲致令人滿意之演算結果，因此本計畫也採用上述三種方法，進行演算法
設計，期望能有效求解各類二維空間方形排列問題及三維長方體物件堆疊問題。 
2.3 平行處理技術 
目前因平行技術的提昇，使得利用電腦叢集的分散處理環境來提昇計算效能，成為
研究的新趨勢。就演算法與平行處理結合之文獻中，遺傳基因演算法可謂是最常見的。
在過去相關研究中，已經有很多將遺傳基因演算法平行化的成功案例，有些平行的方法
只產生單一的人口數，並將人口數依電腦處理器個數切割成數個獨立的子人口
(Sub-population)，有些則於各電腦處理器中自行產生獨立的子人口群。陳飛文[4]參考文
獻並加以調整，將平行遺傳基因演算法歸納出三種主要的類型，(1)主僕式平行遺傳演算
法(Master-Slave GAs)；(2)細粒型平行遺傳演算法(Fine-Grained GAs)；(3)島嶼型平行遺
傳演算法(Island Model 或稱 Coarse-Grained GAs)。就平行環境而言，根據計算過程中不
同處理器間資料傳輸及記憶體的存取方式，可將其分成共享式記憶體平行電腦與分散式
記憶體平行電腦。共享式記憶體平行電腦，是由多個同行之 CPU 共用一個記憶體，每個
CPU 與公用記憶體間透過十字交叉網(Crossbar)或用系統巴士(System Bus)連接，即可進
行資料傳輸；而所謂的分散式記憶體平行電腦系統，是指多個獨立電腦的集合體中，每
一個處理器皆有自己的記憶體與操作系統，不同處理器間無法直接互相傳遞資料。唯有
 11 
行處理之效能，他們除了發展平行式的演算法外，也發展出序列型的演算法。演算結果
顯示序列型的演算法優於文獻中現有之結果；而平行式演算法之結果更優於序列型演算
法。至於考量時窗限制之車輛途程問題，Badeau 等人[9]一樣是比較平行式及序列型之禁
忌搜尋演算法兩種方式。結果證明在相同之求解時間下，平行式禁忌搜尋演算法並不會
降低解答之品質，反倒是可以大量減少演算時間。 
 
三、模擬退火演算法結合平行處理技術 
Chu 等人 [31]提出了一以模擬退火演算法為基礎之平行式最佳化方法，應用於分析
控制人類胚胎發展之基因網絡。他們先觀察並聚集處理所有平行處理器之結果，接著再
透過系統化地混合來自於各處理器之結果，以期獲得適切之波茲曼能量函數。Bevilacqua 
[16]透過導入平行處理技術來改進傳統模擬退火演算法收斂太慢之缺點。雖然曾經出現
以平行方式執行模擬退火演算法之文獻，但卻尚未有人將之應用於「雙向對稱型多處理
器」(Two Way Symmetric Multiprocessors)之系統環境。值得一提的是，該文在平行架構
中共享之記憶體可自適性地調整，導致執行時間不一定每次相同，但卻可保證整體平行
架構之效能最佳。最終他們以旅行銷售員問題來驗證系統之績效。Meise[76]則是以數種
不同之參數及搜尋策略來比較各種平行式模擬退火演算法之收斂速率。Durand and White 
[42] 在執行平行式模擬退火演算法中，常見的方式是針對現有解同時產生數個擾動；然
而所需付出之代價則是需同步進行方能得到正確之目標函數值。他們仔細分析了目標值
誤差產生之過程，試著以降低「同步化」之程度，雖然導致小部分誤差，卻可換取較快
之解題速度。Steinhöfel 等人[92]針對傳統之零工式排程問題提出一以模擬退火演算法為
基礎之搜尋策略，再架構至平行演算環境。由於在他們的模擬退火演算法中採用兩種等
長式的馬可夫鏈長度(Homogeneous Markov Chains)以及一種不等長式的馬可夫鏈，文中
針對這三種不同設定之演算時間/複雜度亦作了理論上之推導。Leite and Topping [71] 指
出傳統 SA 演算法之最大缺點為收斂過慢，而為了改善這種情形，人們往往採用較短或
較粗造之退火程序。但如此之做法卻絲毫無法改進 SA 容易陷入區域最佳解之問題。針
對一般常見之工程問題，他們發展一平行式的 SA，並宣稱不僅可縮短演算時間，亦可
獲致較佳之解答。Ram 等人[84]認為平行處理技術的確優於序列型演算法，惟文獻中出
現之平行處理技術幾乎皆依不同問題而有不同之設計。在該文中他們提出兩個通用型之
平行處理技術，並以零工式排程問題及旅行銷售員問題為例來說明。Mahfoud and 
Goldberg [75] 引用遺傳基因演算法之觀念結合模擬退火演算法，提出一所謂平行重組式
模擬退火演算法(Parallel Recombinative SA)。換言之，他們的 SA 解答並非單一答案，而
是類似於 GA，具有母體搜尋之架構。該文並仔細檢視此種混合式演算法之收斂行為，
解答之分布並與 SA 中之波茲曼分布作一比較。 
 
四、遺傳基因演算法結合平行處理技術 
Lee and Kim [68] 發展一平行式遺傳基因演算法來求算單機零工式排程問題，透過
先過濾部分之工作再將之放入子母體中以加速解答之搜尋。Cochran 等人[32]針對多目標
(總完工時間最小、總加權延遲時間最小)平行機排程問題採用不同於過去 GA 單一母體
之觀念，改採雙階段、多重母體(Multi-population)同時運行之演算架構。在階段一中，
 13 
三、二維單原片問題之研究 
  針對本研究所討論之單原片物件排列問題，本研究採用 Wu et al. [99]所提出之 IBH
之擺放法則，並提出一加入升溫機制之 SA 演算法，其主要訴求為於解答品質持續無法
改善時，除了使用傳統之波茲曼函數來接受較差解外，再導入升溫機制，並搭配合適之
SA 參數設計，提出一能跳脫區域解之演算法。希冀在合理之求解時間內，本研究所提
出之 SA 演算法搭配 IBH 擺放法則，能獲得最佳解或近似最佳解。IBH 擺放法則之內容
乃在決定各個方形物件在原片內擺放之位置/座標。為能有效決定各物件可以擺放之所有
候選位置，IBH 採用了「參考點」之觀念，如圖 3.1 內之 14 個小圓點。IBH 首先會對所
有參考點依其座標，以左下(先下後左)方向進行排序，並挑出座標位於最左下角者，為
物件之置入位置。假設現有 6 個方形物件，物件之編號依序為#8, #2, #3, #1, #7, 及#5。
首先將編號#8 之物件擺放於原片之最左下角後，隨即產生兩個參考點，分別為點 1 及點
2。接著置入編號#2 之物件，由於評估現有兩個參考點中，點 2 位於最左下角，因此將
編號#2 物件之左下角對齊點 2 後，置入原片內。此項置入動作連帶又將產生兩個參考點，
點 3 及點 4。接著對於現有參考點集合內之點 (點 1、點 3、點 4)依左下方向進行排序，
獲致點 4>點 3>點 1 之排序結果，因此下一物件欲置入時，則必須對齊點 4 後才能擺放。
但若此項擺放會造成物件超出原片或物件重疊時，則略過點 4，改採下一排序順位，點 3，
為置入點。依此類推，直至所有物件均已被置入原片中。原始之 IBH 擺放法則流程圖，
如圖 3.2 所示。 
3.1 模擬退火演算法設計 
由於 SA 演算法內容包含目標函數定義、起始解之產生、鄰域解移步設計、降溫程
序及終止條件等元素，本研究所提出之 SA 演算法之元素將逐項說明於後： 
3.1.1 目標函數定義 
於物件排列問題中，我們定義目標函數為其原片之使用率，即所有需求分片之面積
總和除以原片之面積。 
3.1.2 起始解 
對於各類啟發式演算法而言，起始解品質好壞對於最終結果皆有一定程度之影
響。本研究在產生起始解時，先將所有之分片進行預處理，依分片面積由大至小排列並
依序編號；換言之，編號愈小，其面積愈大，愈優先被置入原片。最後，再依 IBH 擺放
法則進行擺放，至此產生出起始之物件排列計畫。 
 
 
 
 
 
 
 15 
步驟 2： 經由鄰域解移步法則針對現有解 K 的鄰域尋找出一新的可行解 K’，再透過 IBH
擺放法則，計算對應之目標函數 C(K’)。 
步驟 3： 當能量差距 E=C(K’)-C(K)<0，顯示目標函數值下降，則 K’取代 K 成為現有最
佳解，同時升溫計數器歸零，進入步驟 5。若 E≧0，計算波茲曼函數值
EXP(-E/k*Tn)，其中 Tn 為現在溫度，k 為波茲曼常數，通常設為 1。產生一 0
至 1 間的亂數值 R，若 R<EXP(-E/k*Tn)，則接受此較劣解 K’為現有可行解，升
溫計數器則維持不變。若是較劣解 K’不被接受，升溫計數器便累加一次。 
步驟 4： 當升溫計數器達到預設之數值 TR 時，則升高目前溫度 Tn至 Tn+1，回到步驟 2。
其中： ，β 為升溫率，0<β<1。 
步驟 5： 設 i = i+1，當 i 達到馬可夫鏈長度時，進入步驟 6；反之則回到步驟 2。 
步驟 6： 降低溫度使下個迭代溫度 Tn+1 = αTn，i＝0，0<α<1，其中 α 為冷卻率。如果溫
度小於預設之停止溫度後，則結束整個演算流程，否則持續執行步驟 2。 
  溫度在 SA 中扮演著相當關鍵的角色：其一為當溫度低於終止溫度時即結束整個降
溫程序；另一為判斷是否接受較劣解之波茲曼函數，亦為溫度之函數。冷卻率控制溫度
下降的快慢，也會影響使用率的品質。每個溫度下執行馬可夫鏈的次數對實驗的品質也
有一定的影響：馬可夫鏈長度設定的太短，其演算時間縮短，但卻無法有效改善目標值，
且所求得的最終解品質不易達到期望水準；反之若設定過大，解的品質與效果提升，但
演算時間將因此變長。不同於冷卻率，經過大量測試後，我們發現升溫率 β 之設定，於
演算過程中並未有太大之影響，我們最終設定其值為 0.02。類似之觀察亦發生在預設之
升溫計數值 TR 上。我們嘗試了幾個設定，分別是：0.1*分片數、0.15*分片數、0.2*分
片數、0.3*分片數。經過多次之嘗試，並在效能及效率上之妥協後，設定 TR = 0.15*分
片數。 
3.1.5 終止條件 
本演算法之終止條件有二項：當溫度降至終止溫度時，或原片使用率達到 100％，
則終止演算法。 
3.2 演算結果及分析 
此節首先以部分例題對此 SA 演算法之參數進行實驗，以期能獲取最佳參數組合，
求算出最佳演算結果。 
 
 
 
 
 
 
 
 
 
 17 
表 3.1 測試例題基本資料表 
題號 
[引用文獻
編號] 
分片
數 
題號 
[引用文獻
編號] 
分片
數 
1[64] 25 20[59] 25 
2[64] 50 21[59] 25 
3[36] 16 22[59] 28 
4[36] 19 23[59] 29 
5[36] 50 24[59] 28 
6[36] 50 25[59] 49 
7[66,70] 10 26[59] 49 
8[66,70] 15 27[59] 49 
9[66,70] 20 28[59,70] 73 
10[66,70] 10 29[59,70] 73 
11[66,70] 10 30[59,70] 73 
12[66,70] 15 31[59,70] 97 
13[66,70] 15 32[59,70] 97 
14[66,70] 20 33[59,70] 97 
15[69] 30 34[59,70] 196 
16[59] 16 35[59,70] 197 
17[59] 17 36[59,70] 196 
18[59] 16 37[70] 40 
19[59] 25 38[70] 50 
 
由於是將原片完全的利用，所以最佳使用率均為 100％。在 Hopper and Turton [59]
所提供之範例中，分片數目從 16~197 片，包含各種問題規模之題型，因此下節參數分
析中我們將選用其所提供之例題來測試，以求得一組較適合的 SA 參數，並以此參數組
合求解本研究所有測試例題。 
3.2.2 SA 演算法參數分析 
SA 的關鍵參數皆須經由實驗測試，才能將 SA 之效能發揮到極致。本節中將針對本
研究所提出之 SA 演算法之起始溫度、冷卻率、馬可夫鏈長度等參數進行實驗測試。本
研究依循過去文獻之慣例，固定波茲曼常數 k＝1。而且由於本問題之目標函數值為原片
使用率，數值大小介於 0 與 1 間，前後迭次目標差 E 自然為一非常小之數值，因此可推
算出若起始溫度設定在 0.1～0.01 之間，得到的波茲曼函數值即可介於 0～1 之間，因此
本研究設定起始溫度最高為 0.1，終止溫度為 0.001。本研究中 SA 的參數為起始溫度、
冷卻率、馬可夫鏈長度三種，各參數的水準設定如表 3.2 所示，計有 18 種不同之參數組
合。針對例題進行測試時，各種參數組合選取二組不同的例題。由於在所有文獻例題中，
分片數 30 是比較接近一般題型的片數，因此我們考慮以分片數為 30 為主，在測試例題
 19 
3.2.3 執行結果與分析 
本節將使用由實驗分析後所建議之參數組合進行所有測試例題之演算，並與文獻所
得之演算結果進行比較。經執行例題後，執行結果如表 3.4 所示。 
在平均使用率的部分，大部分例題均可達到 95.00％之使用率，與文獻最佳結果相比，
普遍提高了 1~2％的使用率，明顯超越了文獻之結果；在最佳使用率的部分，編號 7、8、
16～19、21 更是達到 100％的使用率。整體看來，在 38 題測試例題中，本研究所提出之
SA 演算法有 24 題之結果超越文獻最佳解，2 題與文獻最佳解相同，演算績效非常優異。 
若將所有測試例題以分片數 30 片上下粗分成二個類型，本研究所提出之 SA 演算法
在分片數 30 片以上之中大型例題中有較顯著的改善，圖 3.3 為本研究所獲致之最佳結果
與文獻結果之比較圖。 
 
 21 
在 14 個 30 片以上的例題中，11 個例題結果優於文獻結果。如此之優勢，我們推論
可能因為在降溫程序達到溫度末段時，本研究所提出之升溫機制引導演算法在搜尋鄰近
解時能不被陷入於區域解，而有更大的機會跳脫，進而收斂至最佳或近似最佳解。也因
為分片數較多的題型有著更大的解空間，只要不陷入區域解，就有更大之機會找到更多
較好的鄰近解，因此表現也較佳。由如上之演算結果顯示，本研究所提出具升溫機制之
SA 由於能有效避免落入區域解，在演算效能及效率上均有非常優異之表現。 
圖 3.3 中大型例題本研究所獲致之最佳結果與文獻結果之比較圖 
3.3 結論及建議 
  本研究針對單原片方形物件排列問題，依循文獻 IBH 之擺放法則，設計一導入升溫
機制之 SA 演算法，其主要訴求為於解答品質持續無法改善時，除了使用傳統之波茲曼
函數來接受較差解外，更可透過升溫機制來維持 SA 跳脫區域解之能力，並搭配合適之
SA 參數設計，提出一同時兼具效能及效率之演算法。本研究首先對所提出之 SA 演算法
之起始溫度、冷卻率、馬可夫鏈長度等參數進行實驗測試，以求得最佳之參數組合，並
以此建議之參數組合進行所有測試例題之演算，並與文獻所得之演算結果進行比較。透
過文獻例題之演算，在平均使用率的部分，本研究所提出之 SA 演算法在大部分例題之
原片使用率均可達到 95%以上之水準，與文獻最佳結果相比，普遍提高了 1~2％的使用
率；在最佳使用率的部分，編號 7、8、16～19、21 更是達到 100％的使用率，在全部 38
題測試例題中，本研究所提出之 SA 演算法有 24 題之結果超越文獻最佳解，2 題與文獻
最佳解相同，演算績效明顯優於文獻結果。如此之優勢在分片數 30 片以上之中大型例題
中，更為顯著。能獲致如此優異之表現，應當是在降溫程序達到溫度末段時，本研究所
提出之升溫機制引導演算法在搜尋鄰近解時能跳脫而不被陷入於區域解，進而收斂至最
佳或近似最佳解。因此本研究所提出具升溫機制之 SA 由於能有效避免落入區域解，在
演算效能及效率上均有非常優異之表現，如此之演算經驗值得推廣並供後續使用 SA 演
算法之讀者參考。 
95.000% 
96.000% 
97.000% 
98.000% 
99.000% 
25 26 27 28 29 30 31 32 33 34 35 36 37 38 
題號 
使用率 
文獻最佳結果 
本研究結果 
 23 
從整個搜尋空間中挑選出所需數量的個體當作最原始的母代。由於隨機的關係，挑選出
之初始個體的基因序列有好有壞，但也因為如此，它自已可以提供演化過程中充分的個
體差異度，避免發生小範圍內的重組情況(小區域的最佳化)。 
母體大小之選擇也是十分重要之課題。若母體數太少則演算法收斂太快，具常會因
為母體提供之訊息不足而導致得到較差的解；反之，母體數過大則母體收斂速度太慢而
使演算的時間過久而不具效率。所以，適當的染色體數和優良的母體可快速得到近似最
佳解。因此，本研究因為在編碼的部分已經將分片旋轉的因素考慮進去，所以在產生母
體時，物件的排列順序盡量讓面積大的在前面，小的在後面。母體大小之決定須由實驗
測試得知。 
4.1.1.3 編碼 
在基因演算法中，每個染色體就代表一個問題的解答，染色體中的基因則表示每個
影響因素的猜測值。在此以原片與分片之編號作為基因進行編碼，每條染色體之基因順
序均代表所使用原片與排列分片之順序，由於分片在擺放的過程當中可以作旋轉 90 度的
動作，因此在此就先將此因素考慮進去，以期能達到最佳使用率。如圖 4.1 所示，染色
體裡粗黑字體的代表原片排列順序，右半部為分件排列順序，而在分片裡，陰影部分表
示分片作旋轉 90 度之後的編號。其中，編號 1 與編號 8 為同一分片，但卻代表不同維度；
編號 2 與編號 9 亦同，因此在圖 4.1 中，表示有 3 張原片和 7 張分片。 
 
 
 
 
 
圖 4.1 編碼 
4.1.1.4 計算適合度函數 
適合度函數代表系統的性能指標。有較高的適應函數值，即系統有較好的性能。基
因演算法藉著保留有較高適應函數值的物種與物種間互換基因的方式，一個世代接著一
個世代的進化，使系統性能提昇。基因演算法根據問題的需求定義一個適應函數，以決
定染色體的適應程度，藉以評估該物種是否該生存下來。族群中染色體的適應函數值越
大，代表該染色體的適應程度越高，則被選取的機率越大；反之，適應函數值越小，被
淘汰的機率也越大。如果每一子代的族群，其適應函數值增大，即表示子代比母代優良
進步。 
因此本研究之適合度函數值主要目的在於評估各染色體的好壞，在此的適合度函數
可視為原片的使用率。對「使用率」之定義，文獻中有兩種定義： 
定義一. ： 
 
  (3.1) 
 
=
所有需求分片之總面積使用率 能將所有需求方形所佔部份包含於其內之最小包覆方形之面積
1098765432121 133 1211 14
分片編號
原片編號
 25 
佔有比例%
13%
11%
11%
13%13%
13%
12%
14%
1
2
3
4
5
6
7
8
體如表 4.1，當進行篩選時，首先以隨機的方式產生一亂數，如果該亂數落於 0~0.12934
的區間表示個體 1 被選中；若是在 0.12934~0.24053 之間則是個體 2 中選。重複以上步
驟並同時將選中的個體放入交配槽內，直到交配槽中的個體數等於母代之個體數目為
止。圖 4.3 為用輪盤法將表所列個體的適合度值計算其複製機率所製成。 
 
 
表 4.1 適合度函數值 
個體 適合度函數值 佔有比例 % 
1 87.542 12.934  
2 75.258 11.119  
3 74.365 10.987  
4 85.248 12.595  
5 92.258 13.631  
6 89.654 13.246  
7 78.247 11.561  
8 94.258 13.926  
總和 676.83 100 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
圖 4.3 適合度函數值佔有比例 
 
 
 
 
 
 27 
 
 
 
 
 
 
 
 
 
 
 
圖 4.5 突變過程 
4.1.1.8 精英策略 
精英策略(elitism strategy)就是母代的染色體在經過複製、交配與突變運算之後，產
生子代新的染色體，這些新的染色體必須取代舊的染色體成為新的族群，以繼續下一世
代的進化。也就是將舊族群中適合度函數最大者或前幾名的染色體保留下來，其餘的以
新染色體取代舊族群中的染色體，成為新的族群。 
在本研究中，以 Pe 為菁英策略的選擇機率。當 Pe 等於 0.4 時，代表有 40%的染色
體保留下來，而其餘的 60%以排行較好的前 60%的適合度函數染色體取代舊族群中 60%
的染色體，成為新的族群，而每當經過幾個世代時，會重複上述的動作，不斷的更新族
群中的染色體。 
 
4.1.1.9 終止條件 
演算法的終止，代表程式將執行之最佳結果輸出。本演算法的終止條件有二種： 
一、 連續 N 次迭代，解都沒改善時，則終止演算法。N 需由實驗測試得知。 
二、 當所有分片全部排列到原片中，則終止演算法。 
4.1.1.10 基因演算流程 
步驟一：預處理、讀取資料，編碼。 
步驟二：產生原始母體內 P 條染色體(P=分片數+原片數)，迭代計數器Ｎ=0。 
步驟三：計算每條染色體的適合度函數。若已達 N 次迭代次數，跳到步驟六。當分片全
部排列至原片時，跳到步驟六。 
步驟四：此迭代的 P 條染色體與上一迭代所挑選出最好的 P 條染色體混在一起，並依照
精英策略更新族群中的染色體。若解沒改善，Ｎ=Ｎ+1，若解有改善Ｎ=0。 
步驟五：複製的 P 條染色體進行交配、突變。回步驟三。 
步驟六：終止演算法。 
 
1 765432
1 735462
突變前
突變後
 29 
4.1.2 平行基因演算法求解 
本研究的平行分散式計算部分是使用 MPI(Message Passing Interface)系統，目前最
通用的MPI軟體是美國的 Argone National Lab和Mississippi州立大學所發展出來的免費
軟體 MPICH(Argonne National Lab, 1994)，在各種電腦平台上，都可發現其衍生的版本。 
4.1.2.1 平行處理技術 
由於在計算複雜之環境優選問題時常遭遇計算量過於龐大之問題，故針對所選用之
搜尋方法－基因演算法，利用其潛在平行之特性進行平行化之工作。首先，隨機產生所
要進行優選問題的初始族群，並進行編碼與預處理，各族群於電腦叢集之處理程序上計
算其適合度值，並將結果傳回至 Master 上，進行適合度之比較，選擇較優的個體進行繁
衍機制，並比對所設定之終止條件是否達到所要解的品質。 
本研究將主電腦(Master)定位在接收僕電腦(Slave)的資料，並且判斷其是否達到終
止條件。若無，則 Master 將其比較後的資料，擇優傳回給 Slave 當其起始解，繼續如
0 節單機之基因演算法過程進行演化；僕電腦(Slave)最主要的工作便是依照 4.1.1 節單機
之基因演算法過程執行其程式。如圖 4.7 中將 Master 設定為 P0，Slave 設定為 P1、P2、
P3 和 P4，並針對平行計算執行的步驟作說明： 
 
步驟一：Slave CPU 即 P1、P2、P3、P4 分別進行基因演算法，其設定均與 4.1.1 節單機
之基因演算法雷同。 
步驟二：當 Pi(假設 i=1)達到傳送資料標準時(當代迭代結束)，將最好的計算結果 U1(適
合度函數值和染色體基因)傳回 Master CPU，並且繼續執行下一次迭代的基因
演算法。 
步驟三：此時 P0 接收來自 Pi(假設 i=1)的計算結果 U1(適合度函數值和染色體基因)，並
且保留之。 
步驟四：當 Pi(假設 i=2)達到傳送資料標準時(當代迭代結束)，將計算結果 U2(適合度函
數值和染色體基因)傳回 P0，此時 P0 接收來自 Pi(i=2)的計算結果 U2(適合度函
數值和染色體基因)，並且與原有的計算結果 U1 比較，選取較佳解保留並將其
傳回 Pi(i=2)。 
步驟五：當 Pi(假設 i=4)達到傳送資料標準時(當代迭代結束)，將計算結果 U4(適合度函
數值和染色體基因)傳回 P0，此時 P0 接收來自 Pi(i=4)的計算結果 U4(適合度函
數值和染色體基因)，並且與原有的計算結果 U2 比較。選取較佳解保留並將其
傳回 Pi(i=4)。 
步驟六：其他 Slave CPU 都如同 Pi(i=2、4)兩台一樣的步驟進行其在 MPI 的執行過程。
而 Master CPU 僅負責收集並比較 Slave 的資料，將較好的染色體保留下來，以
供 Slave 使用。 
步驟七：當每一台 Slave CPU 均達到終止條件即停止平行基因演算法，而在 P0 的結果即
為所需之最終結果。 
 
 31 
CPU 數目 
加
速
因
子
 
Ideal Line 
Real Line 
4.1.2.2 平行程式效能分析 
要評估一個平行程式的效能，一般最常用的評估參數有效率 E(Efficiency)與加速因
子 S(Speed-Up)，其中效率 E 定義為： 
 
(3.4) 
 
其中 T1為程式在單機的執行時間；P 是 CPU 數目；Tp為程式在第 P 顆 CPU 上的
執行時間。 
另外一評估參數，加速因子 S 定義為： 
 
(3.5) 
 
上述兩式可知 E=S/P，若對一理想的平行程式其效率為 1 時，則加速比為 P，則我
們稱此為完美加速比(Perfect Speed Up)，且提昇倍數與 CPU 數目之函數關係為一直線且
斜率為 1 時，此直線稱為理想線(Ideal Line)，如圖 4.8 所示。但通常平行程式受限於機
器之架構而不可能完全理想平行化，因而導致其提昇倍數與 CPU 數目之關係並非為理想
直線關係。當處理器數目增多時，其加速因子與處理器數目之函數關係將趨於 0 之水平
線。 
本研究之目標為求解方形物件排列問題之最佳化，由於基因演算法每次之搜尋收斂值皆
不全然相同，不過由測試結果可觀察出一個現象，當每次搜尋之結果越接近最佳解時，
其計算時間亦有越長之趨勢，而且影響每次搜尋結果之最大因素為演算之總迭代數
(Number of generation)與母體數(Population size)。當演算之總迭代數與母體數越大時，交
配與突變的機會就會變多，找到最佳解之機會亦隨之增加，但其與計算時間是成一正比
關係。 
 
 
 
 
 
 
 
 
 
 
 
 
 
圖 4.8 加速因子表示圖 
p
1
PT
T
E =
p
1
T
T
S =
 33 
表 4.2 平行處理運算環境 
 Master*1 Slave*4 
作業系統 Microsoft Windows XP Professional 
平行程式 MPI Version 1.2.4 
HUB D-Link DES-1005D 
中央處理器 Intel Pentium III 
667 MHz 
Intel Pentium 4 
3.0 GHz 
主機板 AOpen MX64 Intel D865GKD 
記憶體 512 MB SDRAM 256 MB DDR x2 
硬碟機 Maxtor 60 GB 
7200 RPM 
Maxtor 80 GB 
7200 RPM 
網路卡 D-Link DFE-530TX PCI 
Fast Ethernet 
Intel(R) PRO/100 VE 
Network Connection 
光碟機 TEAC CD-540E 
(40x CD-ROM) 
DVD-ROM 
(16x/52x DVD-ROM) 
顯示卡 ATI RAGE PRO AGP 
(4 MB) 
Intel(R) 82865G Graphics 
(96 MB) 
 
而選用之程式設計語言往往影響到應用程式平行化所耗費之時間和精力，甚至不同
的編譯器和執行環境會讓程式設計語言限制到平行化之效率，本研究選用 MPI(Message 
Passing Interface)平行語言，其為 Argonne National Laboratory MPI Forum 定義之一組標
準訊息傳遞通訊，而 MPI 呼叫之語法和功能為標準化形式，因此滿足高效能計算所需
要之高效率和可攜性，由於在多電腦系統上比較容易撰寫平行程式，而 MPI 可當成在多
電腦系統完成平行的工作之橋樑，因為只要根據 MPI 標準寫成的平行程式，就可以在任
何多電腦系統內執行。 
4.2.2 文獻例題說明 
本節將針對國際文獻範例來說明 GA 和 PGA 的演算品質與效率，並且比較兩者之
間的差異來說明其優缺點。範例中之最佳使用率皆為 100%，其作法乃是將一大塊方形
原片分割成數十個，甚至百個不同大小之方形分片，然而每篇的目標函數表示方法不盡
相同，為求在資料分析上得以方便比較，因此以 Wu[99]之使用率定義為標準，其他不同
文獻的表示方法便將其轉換為相同模式。 
在參數方面，由於 Babu and Babu[8]在其文獻中證明了突變率、和交配率分別為 0.6
和 0.25 時，可得到較佳解；且 Wu[99]在其文獻中亦證明如此可得較佳解。因此，本研
究亦採用此參數設定值，而在母體數的多寡分別以(原片數+分片數)、(原片數+分片
數)/2、(原片數+分片數)*2 進行分析；迭代數分別選取 25、50 和 100 次迭代；精英策略
 35 
表 4.4 實驗參數詳細結果一 
實驗例題一 實驗例題二 實驗例題三 參數* 
使用率 時間 使用率 時間 使用率 時間 
25-25-0.2 0.9419 72.656 0.9434 77.547 0.9524 87.547 
25-25-0.4 0.9544 92.655 0.9578 77.198 0.9554 74.951 
25-25-0.6 0.9524 79.437 0.9449 69.571 0.9302 95.357 
25-50-0.2 0.9554 76.547 0.9626 92.655 0.9569 91.906 
25-50-0.4 0.9302 77.719 0.9626 79.437 0.9557 127.93 
25-50-0.6 0.9569 148.61 0.9434 76.547 0.9574 71.625 
25-100-0.2 0.9499 65.750 0.9524 77.719 0.9375 64.563 
25-100-0.4 0.9419 66.484 0.9474 148.61 0.9419 74.860 
25-100-0.6 0.9419 70.048 0.9536 71.625 0.9554 102.00 
50-25-0.2 0.9554 151.89 0.9474 64.563 0.9554 71.516 
50-25-0.4 0.9554 74.547 0.9536 74.860 0.9557 87.542 
50-25-0.6 0.9557 83.719 0.9569 102.00 0.9554 68.795 
50-50-0.2 0.9574 71.516 0.9474 71.625 0.9302 71.516 
50-50-0.4 0.9375 87.542 0.9554 88.547 0.9569 151.89 
50-50-0.6 0.9419 68.795 0.9554 67.852 0.9499 74.547 
50-100-0.2 0.9585 71.516 0.9557 95.278 0.9419 83.719 
50-100-0.4 0.9375 127.93 0.9554 102.32 0.9387 71.516 
50-100-0.6 0.9419 71.625 0.9557 99.687 0.9617 87.542 
註一：*表迭代數－母體數－精英策略選取範圍 
 
 
表 4.5 實驗參數詳細結果二 
實驗例題一 實驗例題二 實驗例題三 參數* 
使用率 時間 使用率 時間 使用率 時間 
100-25-0.2 0.9387 86.522 0.9536 102.10 0.9536 88.517 
100-25-0.4 0.9569 91.906 0.9404 99.109 0.9569 86.497 
100-25-0.6 0.9474 127.93 0.9527 118.82 0.9474 77.719 
100-50-0.2 0.9554 71.625 0.9479 79.587 0.9554 148.61 
100-50-0.4 0.9554 64.563 0.9477 88.597 0.9557 65.750 
100-50-0.6 0.9557 74.860 0.9519 67.497 0.9574 66.484 
100-100-0.2 0.9574 102.00 0.9471 100.28 0.9375 70.048 
100-100-0.4 0.9375 71.625 0.9441 69.547 0.9474 151.89 
100-100-0.6 0.9587 88.547 0.9479 66.287 0.9678 120.55 
註一：*表迭代數－母體數－精英策略選取範圍 
 
 37 
表 4.8 本研究與國際範例題號對照表 
編號 出處 題數 題號 
1 Jakobs[64] 2 1~2 
2 Dagli and Tatoglu[34] 4 4~7 
3 Lai and Chan[66] 8 8~15 
4 Leung, Chan and Troutt[69]  1 16 
5 Hopper and Turton [59] 21 17~37 
6 Leung, Yung and Troutt [70] 19 8~15，29~39 
7 Babu and Babu[8] 1 3 
8 Wu, Chen, Low and Tang[99] 13 3，40~51 
 
 
表 4.9 單原片資料表 
題號 原片數 原片尺寸 題號 原片數 原片尺寸 
1 1 77×120 21 1 15×40 
2 1 77×122 22 1 15×40 
4 1 57×93 23 1 30×60 
5 1 57×93 24 1 30×60 
6 1 108×280 25 1 30×60 
7 1 108×280 26 1 60×60 
8 1 200×400 27 1 60×60 
9 1 200×400 28 1 60×60 
10 1 400×400 29 1 60×90 
11 1 93×120 30 1 60×90 
12 1 93×120 31 1 60×90 
13 1 93×120 32 1 80×120 
14 1 93×120 33 1 80×120 
15 1 93×300 34 1 80×120 
16 1 45×65 35 1 160×240 
17 1 20×20 36 1 160×240 
18 1 20×20 37 1 160×240 
19 1 20×20 38 1 110×150 
20 1 15×40 39 1 120×160 
 39 
表 4.11 多原片資料表 
題號 原片數 原片尺寸 
3 27 
20×100(4)、60×80(10)、 
60×90(3)、80×100(2)、120×130(8) 
40,41,42 5 
58×66(1)、60×62(1)、 
61×67(1)、62×67(1)、63×64(1) 
43 5 
61×74(1)、62×74(1)、 
65×72(1)、65×76(1)、75×76(1) 
44 6 
56×65(1)、57×63(1)、58×60(1) 
61×62(1)、61×64(1)、65×65(1) 
45 6 
61×74(1)、62×74(1)、65×72(1) 
65×76(1)、73×77(1)、75×79(1) 
46 8 
71×72(1)、71×76(1)、71×86(1)、73×83(1) 
75×75(1)、78×80(1)、85×87(1)、88×88(1) 
47 8 
61×76(1)、62×71(1)、65×87(1)、68×80(1) 
68×88(1)、70×75(1)、71×86(1)、73×83(1) 
48 8 
61×76(1)、62×71(1)、63×83(1)、65×68(1) 
65×87(1)、66×71(1)、68×75(1)、70×75(1) 
49 8 
69×99(1)、70×78(1)、77×85(1)、79×97(1) 
84×87(1)、89×95(1)、89×98(1)、93×94(1) 
50,51 1 
65×89(1)、67×79(1)、67×84(1)、67×85(1) 
68×70(1)、68×89(1)、69×99(1)、74×93(1) 
4.2.4 演算結果與分析 
本節經由實驗分析後的參數組合進行十次的方形物件排列演算，並與過去國際文獻
例題進行比較。最後在實驗證明平行基因演算法能使分片排列的更為緊密，使得原片能
夠更有效的利用。 
4.2.4.1 單原片執行結果與分析 
經執行國際文獻單原片例題後，GA 與 PGA 執行結果如表 4.12 與表 4.13。表中的
第一欄位為文獻的 38 題例題，這 38 題例題的分片數在 10~197 之間，如表 4.10。第二
欄位為 Jacobs[64]、Dagli and Tatoglu[34]、Lai and Chan[66]、Leung, Chan and Troutt[69]、
Hopperp and Turton [59]和 Leung, Yung and Troutt [70]等人的文獻執行結果，第三欄位為
GA 的執行結果與時間，時間以秒(Sec)計算。第四欄位為 PGA 的執行結果與時間，時間
以秒(Sec)計算。而在表 4.12 和表 4.13 中，「N/A」表示國際文獻中無此資料。 
由於國際文獻對於單原片的執行結果，大多僅將平均使用率與部分執行時間表列出
來，因此本研究針對上述例題進行分析，並將所有國際文獻例題執行完畢。由圖 4.10 得
知，GA 與 PGA 對於分片數較少的例題有明顯的改善；在分片數較多的例題當中，雖然
平均使用率沒有相對較好，但是在最佳使用率有超越的情形發生，表示演算法還有進步
 41 
表 4.12 單原片實驗結果分析一 
 
 
 
 
 
GA(100) PGA(100) 
單原片 國際範例 
使用率 使用率 
問
題 
分片
數 使用率 
執行 
時間 平均 最佳 
執行 
時間 平均 最佳 
執行 
時間 
1 25 88.230% N/A 93.290% 95.157% 5.512 95.238% 95.694% 4.062 
2 20 93.750% N/A 92.948% 94.268% 41.956 95.364% 96.360% 34.656 
4 16 N/A N/A 96.000% 100.000% 95.748 96.000% 100.000% 68.547 
5 19 N/A N/A 84.211% 84.211% 51.908 96.463% 96.618% 34.908 
6 50 N/A N/A 90.741% 90.741% 285.828 95.491% 95.745% 73.359 
7 50 N/A N/A 93.825% 94.526% 375.783 95.238% 97.035% 71.015 
8 10 N/A N/A 100.00% 100.000% 90.313 100.00% 100.000% 68.954 
9 15 N/A N/A 99.686% 100.000% 28.700 100.00% 100.000% 17.987 
10 20 N/A N/A 97.157% 99.379% 73.241 96.360% 97.157% 44.547 
11 10 94.800% 15.000 95.283% 96.188% 1.583 95.541% 95.745% 0.953 
12 10 97.100% 18.000 93.135% 95.586% 1.264 95.694% 95.745% 0.468 
13 15 92.200% 356.000 93.797% 96.361% 3.241 95.949% 97.403% 1.922 
14 15 94.400% 165.000 94.590% 95.372% 1.503 95.694% 96.360% 1.219 
15 20 94.600% 160.000 95.905% 97.017% 7.069 95.745% 97.035% 5.578 
16 30 N/A N/A 97.794% 100.000% 12.677 97.403% 100.000% 7.656 
17 16 96.000% N/A 98.000% 100.000% 0.563 99.727% 100.000% 0.328 
18 17 96.000% N/A 96.154% 96.154% 0.547 98.463% 100.000% 0.376 
19 16 96.000% N/A 94.118% 100.000% 0.469 99.292% 100.000% 0.347 
20 25 94.000% N/A 95.300% 99.510% 4.049 98.681% 100.000% 2.006 
 43 
表 4.14 多原片實驗結果分析 
 
 
 
 
 
 
 
 
 
 
 
國際範例 GA(100) PGA(100) 
多原片 
使用率 使用率 使用率 
問 
題 
原 
片數 
分 
片數 平均 最佳 
執行 
時間 平均 最佳 
執行 
時間 平均 最佳 
執行 
時間 
3 27 50 93.4% 96.2% 344.223 94.2% 96.1% 113.490 95.3% 96.3% 61.281 
40 5 20 92.6% 95.4% 0.698 94.8% 96.6% 3.141 95.6% 95.6% 2.047 
41 5 20 92.7% 96.8% 0.457 92.8% 96.1% 3.461 95.6% 96.1% 2.328 
42 5 20 92.1% 96.1% 0.757 92.4% 95.9% 4.091 95.6% 97.0% 2.375 
43 6 30 94.3% 97.1% 2.632 94.2% 96.9% 16.973 95.6% 96.3% 8.656 
44 6 30 92.9% 96.7% 3.719 93.8% 94.9% 195.742 95.2% 95.7% 107.750 
45 6 30 93.1% 95.8% 3.167 93.3% 95.1% 189.735 94.1% 96.3% 95.188 
46 8 40 93.3% 96.4% 8.522 93.2% 96.2% 305.455 95.2% 96.9% 156.750 
47 8 40 94.0% 95.7% 7.712 92.4% 95.3% 228.433 95.6% 96.1% 152.766 
48 8 40 94.7% 97.2% 13.390 94.7% 96.1% 262.169 95.5% 96.4% 150.890 
49 8 50 95.0% 96.3% 28.819 95.3% 95.9% 372.055 95.2% 96.1% 160.328 
50 8 50 94.8% 96.4% 24.113 95.4% 96.2% 350.447 95.5% 96.9% 230.047 
51 8 50 95.2% 96.7% 21.654 94.9% 96.2% 366.491 95.2% 96.3% 121.078 
 45 
0
50
100
150
200
250
300
350
400
3 40 41 42 43 44 45 46 47 48 49 50 51
題號
時
間
(s
ec
)
國際範例 GA(100) PGA(100)
 
圖 4.13 多原片執行時間比較圖 
4.2.4.3 平行程式執行結果與分析 
本節針對平行基因演算法的運算能力作一分析，一般最常用的評估參數有效率 E 
(Efficiency)與加速因子 S (Speed-Up)如 4.1.2.2 節所述，由於物件排列問題在文獻上較少
人提及平行演算機制，因此本節針對單原片與多原片測試範例做說明，如表 4.15 和表
4.16。 
採用平行計算環境與程式平行化的目的，最主要是希望藉由多處理器同時運算已得
到更佳的運算環境，所以必須有適當指標來衡量平行運算的效能，從表 4.15 與表 4.16
中很清楚的看到在效率方面均有平行架構所要的效果，但通常平行程式受限於機器之架
構而不可能完全理想平行化，因而導致其提昇倍數與 CPU 數目之關係並非為理想直線關
係。而加速因子大多介於 1.5~3.0 之間，顯示在平行程式中的基因演算法並不是最佳化
的演算法，但仍然能夠求解目前所需之方行物件排列問題。 
 
表 4.15 單原片問題效率與加速因子 
問題 1  2  4  5  6  7  8  9  10  
E 0.339 0.303 0.349 0.372 0.974 1.323 0.327 0.399 0.411 
S 1.357 1.211 1.397 1.487 3.896 5.292 1.310 1.596 1.644 
問題 11  12  13  14  15  16  17  18  19  
E 0.415 0.675 0.422 0.308 0.317 0.414 0.429 0.364 0.337 
S 1.661 2.701 1.686 1.233 1.267 1.656 1.715 1.455 1.350 
問題 20  23  24  25  26  27  28  29  30  
E 0.505 0.466 0.586 0.434 0.541 0.583 0.466 0.469 0.589 
S 2.019 1.865 2.345 1.737 2.165 2.331 1.863 1.877 2.356 
問題 31  32  33  34  35  36  37  38  39  
E 0.596 0.370 0.372 0.396 0.262 0.261 0.261 0.281 0.424 
S 2.384 1.480 1.490 1.586 1.050 1.046 1.045 1.122 1.696 
 47 
時，雖然處理器數目增加，但其效率仍維持在 0.4 左右，且在加速上亦維持一定
比例上升。 
4.3.2 建議 
一、 本研究所使用的程式都是基於 C++的架構之下完成，但由於程式的架構仍可藉由
不同基因演算法的編寫方式來使其有著不同的效率與發展，建議未來能於本研究
的基礎架構上，搭配其他啟發式演算法，已達到原片之最佳使用率。 
二、 由於各啟發式演算法具有不同之搜尋方式及特性，因此可以朝發展混合模式提升
解之品質，同時將其平行化以減少大量求解時間，可作為未來探討之方向。 
三、 本研究所架設的個人電腦叢集系統因為使用者僅限研究室成員，且使用的電腦沒
有對外提供額外的服務，故未加裝叢集系統管理程式，如 PBS(Portable Batch 
System)、DQS(Distributed Queuing System)等免費軟體，建議若能增加上述系統，
更可以提升整體系統管理與平性化程式的效率。 
 49 
5.1 中之容器「下後左」置入點 O，而物件堆疊時也以其“下後左”角，如圖 5.1 中之物件
「下後左」堆疊點 A 對齊點 O 後置入物件，此時物件的長、寬、高分別投影在 X 軸、Y
軸和 Z 軸的座標即可產生 X1、Y1、Z1 三個參考點(reference point)座標。每堆疊一個物
件時，物件會和容器或已堆疊的物件產生新的參考點，這些參考點即為下一個物件可以
置入之候選點。因此後面接續堆疊的物件，依序按照「下後左」邏輯，自所有候選點中
選擇適當之置入點。例如物件 2 在堆疊時，先選擇 X1 參考點，若 X1 參考點不能堆疊，
再選擇 Y1 參考點，若 Y1 參考點也不能堆疊，最後才選擇 Z1 參考點。物件 2 堆疊在
X1 參考點後又新增了 X2、Z2、X1Y2 和 Y2Z1 等四個可以堆疊的參考點，因此物件 3
就有 Y1、Z1、X2、Z2、X1Y2 和 Y2Z1 等六個參考點可以堆疊。重覆以「下後左」之邏
輯來選擇堆疊座標順序，則此六個參考點之選擇順序依序為 X2、X1Y2、Y1、Z1、Y2Z1、
Z2。圖 5.1 中若物件 3 不能堆疊到 X2，則依照表 5.1 改變物件 3 其他的堆疊情況來置入；
若依然不可行，則依物件順序尋找下一個可堆疊的物件。若仍然無法進行堆疊，則仍依
「下後左」原則，更換下一個可堆疊的參考點。因所有物件皆無法堆疊到 X2、X1Y2 和
Y1 等三個參考點，物件 3 最後因此堆疊到 Z1 參考點。重複此「下後左」之啟發式堆疊
原則，直到所有物件皆已堆疊完畢才終止此程序。 
 51 
昇搜尋之品質及效率。本節之內容即是以所發展之「下後左」啟發式堆疊法則為核心，
再由協力演化遺傳演算法作為外部控制及改善解答品質之工具。 
5.2.1 協力演化遺傳演算法概念 
從「協力演化」這個名辭中，不難想像至少要有兩個以上的母體，經由某種「資訊
交換」的溝通模式，達到「合作進化」的目的，因此實可將協力演化遺傳演算法(cooperative 
coevolutionary genetic algorithm, CCGA)視為一個包含數個遺傳演算法之集合。在此模式
下，每一個遺傳演算法負責演化一個族群，而族群間彼此各自搜尋問題空間的不同區域，
最後再透過某些結合機制將各族群逐漸整合。然而應用在不同的問題領域上，每個族群
所代表的意義互異，因此彼此交換的資訊及結合機制可能不同。 
5.2.2 結合堆疊法則之協力演化遺傳演算 
CCGA 之內容仍為一遺傳演算法，因此本節就其編碼、母體產生、適合度函數、複
製、交配、突變等運算子分別介紹。由於 CCGA 乃透過多個子族群同時演化，因此各子
族群均需使用到前述之運算子。 
5.2.2.1 編碼 
假設物件總類有 M 種，而各種尺寸的物件數量為 iN , }M,...,1{i = ，並且按照物件尺寸
種類之體積由大到小依序編號，相同尺寸的物件編在同一群組且給予相同之編號，即可
合成一條染色體，代表物件被置入容器之次序，如圖 5.2 所示。在本研究中我們定義物
件最長的邊為長、次長的邊為寬、最短的邊為高。 
5.2.2.2 起始母體產生及染色體數目 
母體的大小(population size)及其內染色體之組成對於遺傳演算法之績效有絕對之影
響，良好的母體與恰當的染色體數有助於快速求得近似最佳解，因此產生母體時，為因
應 CCGA 多個母體同時演化之概念，我們將物件群組區分為 P 個子族群，例如大型物件
與小型物件等兩個子族群，每一子族群同時進行演化，其餘編碼方式如上節所述。母體
內之染色體數目(令其為 S)過多雖然帶來更多元之組成，卻也將在演化進行時造成演算之
負擔，因此適當 S 值之決定，實需要經由大量實驗測試得知。 
母體中第一條染色體之產生乃是按物件之體積大小排列，其餘 S-1 條染色體則是各自
在大小物件兩大子族群中隨機排列基因而產生。假設現有 8 種不同尺寸之物件欲進行堆
疊、各尺寸之物件僅有一件，且 S=4、P=2。 
 
 
 
 
 
 
圖 5.2  染色體編碼示意 
N4=3 N3=4 N2=4 N1=2 
物件種類=4 
1 1 2 2 2 2 3 3 3 3 4 4 4 
 53 
 
 
 
 
 
圖 5.4  母體中其餘三條染色體之編碼示意 
 
 
  
 
 
圖 5.5  染色體交配示意 
5.2.2.6 終止條件 
直至所有物件皆已堆疊進入容器內，或達到事先設定之演化代數，程式將自動結束
並輸出最終結果。 
5.2.2.7 CCGA 演算法 
CCGA 之演算邏輯乃透過數個「子族群」分別進行演化，再透過逐漸整合各子族群，
以交換各子族群間之演化資訊。子族群數目越多，雖有能探索更多元解答空間之潛在優
點，但整合之過程將耗費相當多之演算時間。反之，太少之子族群數(例如 2)又恐無法獲
得分群演算之優點。著眼於演算效能及效率間之取捨，決定採用三個子族群。研究一開
始將產生大、中、小物件三個子族群，各子族群之編碼與起始解已於上節說明。CCGA
演算法之精神在於程式執行之初，各子族群各自進行 GA 之演算步驟；當三個子族群歷
經一定迭次之演化後，挑選當代最佳的基因群體，將此基因群體由原先三個子族群區分，
合併為兩個子族群，再重複如上步驟，各自進行 GA 至一定的迭次後，挑選當代最佳的
基因群體，再將兩個子族群的基因合併為單一群體的基因，再進行最終之 GA 運算，直
至滿足終止條件。這樣的演算邏輯表現出 CCGA 經由某種「資訊整合」之溝通模式及平
行搜尋之方式，達到「合作進化」的目的。本研究之 CCGA 流程圖如圖 5.6 所示。對於
子族群之合併過程，除了現有之(大、中、小)、(大＋中、小)、(大＋中＋小)，我們亦嘗
試過其他選擇，例如(大、中、小)、(大、中＋小)、(大＋中＋小)，但是在演算結果上並
未有顯著之差異，我們因此選擇了現行之合併過程。 
 
 
 
 
 
 
 
2 4 3 1 7 6 8 5 
1 3 2 4 8 6 7 5 
3 2 1 4 6 5 8 7 
1 2 3 4 5 6 7 8 
4 3 2 1 8 7 6 5 
1 3 2 4 5 7 6 8 
4 2 3 1 8 6 7 5 
 55 
5.3 演算結果及分析 
本研究針對單一容器、多尺寸長方體物件之堆疊問題發展協力演化遺傳演算法。首
先以部分例題對此 CCGA 演算法之參數進行實驗，以期能獲取最佳參數組合，進而有效
率地求算出最佳演算結果。本研究所採用之程式編譯軟體為 Visual C++ 6.0，測試環境
為 Pentium IV 3.2G 及 RAM 為 DDR 512M 之個人電腦。 
5.3.1 文獻例題介紹 
Bischoff and Ratcliff [18]所提出的 BR 系列例題，是眾多文獻中常被廣泛使用測試
的，因此本研究亦採用這些例題做為測試本研究所發展之 CCGA 演算法之演算績效，所
有例題皆能從如下網址之連結取得： 
http://people.brunel.ac.uk/~mastjjb/jeb/orlib/files/ 。例題 BR1 到 BR7 每一大類各有 100 小
題，共計 700 測試題。BR1 是單一容器有三種不同尺寸大小之物件群組，BR2 則是五種
不同尺寸大小之物件群組，隨著越後面的題目，物件群組也跟著增加，至 BR7 時則有二
十種不同尺寸大小之物件群組，因此編號愈大的題目，由於其物件尺寸增多，求解的難
度與所耗用的時間也相對地增加。 
5.3.2 CCGA 演算法參數分析 
    在決定 CCGA 演算參數設定時，由於 BR1~BR3 等三類問題之物件尺寸大小差異不
大，屬於難度較小之測試例；相較之下，BR4~BR7 較為困難。因此本研究分別從 BR4、
BR5、BR6 與 BR7 的國際例題中，各抽取一題做為參數測試範例。演算參數則考慮「迭
代數」及「母體染色體數」兩因子。由於本研究進行之 CCGA 分成三個階段：先由三個
子族群結合成兩個子族群，最終再結合成一個族群，因此參數組合之格式為「第一階段
迭代數 ― 第二階段迭代數 ― 第三階段迭代數 ― 母體染色體數」。若在各階段之迭代
數設定太大，對於某些規模較大之測試例題，單單演算某類例題所花費之時間可能超過
數小時，因此我們設定「迭代數」之水準分別為迭代數 3 及 6；母體染色體數則有 2、3、
4、5 及 10 等五種水準，總計有 40 種參數組合。各種參數組合之演算結果詳列於表 5.2，
表 5.2 內之數值為三次演算之平均數值。由表 5.2 可發現，當染色體數目愈大時，往往
能求得較佳之容器使用率；但相對地，也花費更多的演算時間。在迭代次數方面，也有
類似之觀察：迭代數愈大，所花費之演算時間愈多，然而所求得之結果並未明顯較佳。
表 5.2 列出各種參數所獲致之使用率及演算時間外，為方便評斷各種參數之綜合表現，
亦列出各種參數之四題平均容器使用率及對應之演算時間，再由其中挑出四題平均容器
使用率最高之五種參數組合如表 5.3 所示。 
 
 
 57 
 
表 5.3  四題平均容器使用率最高之五種參數組合 
參數組合 平均容器使用率 平均演算時間 
6-3-3-3 84.629 1344.50 
3-6-3-10 84.647 2103.75 
6-3-3-5 84.753 3311.75 
6-3-3-10 84.861 4789.75 
6-3-6-10 85.001 5533.50 
 
 
表 5.4  CCGA 與文獻最佳結果比較 
 
 
 
 
 
 
 
 
 
 
 
 
綜觀表 5.3 之五種參數組合為表現較佳之參數組合，在求解品質上皆有不錯的表
現。雖然參數組合 6-3-6-10 所獲致之平均容器使用率最高，但在演算績效與演算時間之
取捨後，本研究建議使用參數組合 6-3-3-5，做為下節演算測試的參數設定。 
5.3.3 執行結果與分析 
接著使用上節建議之參數組合，對 BR 國際例題進行測試。每一演算例進行五次之
演算，並記錄五次演算之最佳及平均結果，再與國際文獻演算結果進行比較，如表 5.4
所示。表四中第一欄為測試例題類別，其後之數字則是該題型中物件之尺寸數，例如
BR4(10)意指 BR4題型中之物件尺寸有 10種不同大小。第 2欄為 Bischoff and Ratcliff [18] 
(B/J/R)之最佳執行結果。為了測試本研究所提出之 CCGA 是否會因子族群數目不同而有
不同之演算績效，我們提出 CCGA1 及 CCGA2，分別代表 2 個子族群及 3 個子族群之
CCGA，並且將它們之演算結果列於表 5.4 中。觀察表 5.4 之內容，我們發覺 CCGA1 在
BR1~BR7 七種題型中，有兩類題型之演算結果優於文獻之表現，分別為 BR1 及 BR6；
CCGA2 則有六種題型之演算結果優於文獻之表現，除了 BR5 外。CCGA2 之演算績效優
於 CCGA1 應來自 CCGA2 提供較多之子族群，讓 CCGA“平行搜尋”及“協力”之機制有充
分發揮之空間。當然較多之子族群數在演算過程中需要耗費更多之演算時間，從表三中
CCGA1 CCGA2 
No. 
B/J/R 
[18] % 
CPU 
(sec) 
 
% 
CPU 
(sec) 
BR1 (3) 85.40 86.45 41.43  86.81 65.13 
BR2 (5) 86.25 86.22 213.16  86.82 249.71 
BR3 (8) 85.86 85.20 246.43  86.26 310.04 
BR4 (10) 85.08 84.79 618.09  85.66 701.17 
BR5 (12) 85.21 84.43 842.46  84.95 1119.43 
BR6 (15) 83.84 84.15 1241.73  84.73 1628.33 
BR7 (20) 82.95 82.79 1356.16  83.44 1911.67 
 59 
六、三維多容器堆疊問題 
  本章首先確立長方體物件的描述及問題定義，利用田邦廷[5]所提出的堆疊規則配合
本研究發展的遺傳基因演算法與深度搜尋的觀念跟演算邏輯設計，期望能在滿意的時間
內尋得最佳解或近似最佳解。以下針對長方體物件堆疊問題的定義與解題方式作詳細介
紹。 
6.1 問題定義 
長方體物件堆疊當中，本研究在長方體容器性質方面，考慮單一尺寸容器與多種尺
寸容器；在長方體物件性質方面，考慮多種尺寸，並依長方體物件與長方體容器的特性
發展演算模式。因本研究均探討長方體容器和長方體物件，因此以下內容均以容器和物
件來描述。 
6.1.1 物件擺放方向的分析 
本研究在執行「下後左角」優先之啟發式擺放準則前，會預先決定各物件的擺放方
向，再進行擺放步驟，而各物件的擺放方向的決定方式採以隨機方式。而擺放方向的詳
細說明如下所述。 
長方體物件在堆疊時，會因產品的特性而有限定的堆疊方向，例如冰箱，雖然它在
運送時已被裝箱成長方體物件，基本上長方體物件的六個面均可當成“底”來堆疊，但是
因為冰箱裡有冷煤，所以一定要正擺，而不能橫擺或倒擺。因此，每個產品有它限定的
堆疊方向，有的產品可橫擺，即長或寬可當成高，而高變成長或寬。表 3.2.1[5]為分析各
種條件下可堆疊的情況。 
 
表 6.1 各種條件的堆疊情況[5] 
類別 長轉成高 寬轉成高 高 可堆疊的情況 
1 0 0 1 2 種 
2 1 0 1 4 種 
3 0 1 1 4 種 
4 1 1 1 6 種 
 
表 6.2[5]裡的 1 代表長或寬可以轉成高來堆疊，0 代表不可以，所以堆疊方向就是表
示長、寬、高是否能當成“高”來堆疊，而高本來就是高，所以一定有此堆疊方向。在類
別 1 裡，長和寬均不能轉成高，所以只有一種堆疊方向，而每一種堆疊方向都有兩種堆
疊情況，即以高當旋轉軸，把長和寬轉 90 度，長和寬位置互換之後，就形成另一種堆疊
情況，如圖 6.2[5]所示。 
類別 2 的寬和高都可以以高來堆疊，因此有兩個堆疊方向，如圖 6.3[5]所示。所以
共有 4 種堆疊情況，類別 4 的長、寬、高都可以轉成高，所以有 6 種堆疊情況。因此，
一個長方體物件最少有 2 種堆疊情況，最多有 6 種堆疊情況。 
 
 61 
6.1.2.2 編碼 
以遺傳基因演算法而言，起始解的好壞對最後結果的品質有一定的影響程度。本研
究在求起始堆疊方式的作業中，在容器方面，將所有的容器依體積由大到小排列且編號，
如圖 6.4 所示。編號越小，其容積越大。 
在物件方面，亦如容器一般，物件依其體積由大到小排列，並將同尺寸的物件編成
一個群組，若有些尺寸只有一個物件，那就單一個物件編成一個群組，所有群組再依體
積由大到小編號，如圖 6.4，物件的編號愈小，體積愈大；編號一樣，代表物件的尺寸
一樣。然後再依各物件的所有可堆疊情況進行搜尋，找出最大的邊為長、次大的邊為寬、
最小的邊為高的堆疊情況，然後依物件堆疊邏輯進行堆疊。 
 
 
圖 6.4 產生起始解 
 
上述產生的起始解，屬於遺傳基因演算法的起始解中的一條染色體，其在遺傳基因
演算法中的編碼方式如圖 6.5。將物件尺寸種類編號加在容器編號後面，如此，即合成
為一條染色體。如圖 6.5，假設容器數為 C，物件尺寸種類數為 M 種，且各種尺寸的物
件數量為 iN , },...,1{ Mi = ，染色體裡粗黑線的左半部為容器排列順序，右半部為物件排列
順序。 
 
 
圖 6.5 編碼 
6.1.2.3 染色體數與產生母體 
遺傳基因演算法的母體大小和母體的產生很重要，適當的染色體數和優良的母體可
快速得到近似最佳解。所以在產生母體時，物件的排列設定為，將同尺寸的物件視為一
個群體排列在一起。母體大小之決定須由實驗測試得知。 
產生母體： 
假設染色體數為 S，第一條染色體的產生，就依“編碼”所產生的排列順序來當第一
條染色體。即為模擬退火演算法的起始解。其餘 S-1 條染色體，包含容器順序與物件排
列順序，均以隨機方式產生。結果如下圖： 
 
 63 
素，填入 C 染色體中的相同位置上。若當中有已經填入的元素者，便略過該元
素不填入。 
步驟三：將 B 染色體中的元素，依序填入 C 染色體中。如遇已填入的元素者，便略過不
填，直到所有 C 染色體完成為止。 
步驟四：完成交配。 
以圖 6.7 舉例說明，A、B 為兩條要交配的染色體，C 染色體即將為 A、B 染色體交
配而產生。圖中的物件編號表示為第幾群組，並不是指物件個數。在容器交配上，比較
兩條染色體的合適度，合適度大的染色體就把容器基因放到 C 染色體中，再隨機選取兩
個容器交換其使用順序。如 1=i 。在物件交配上，先將 A、B 染色體上相同位置的染色
體元素保留至 C、D 染色體上，即圖中的元素 4、6、7，如 2=i 。再隨機決定兩點 a、b，
並將 A 染色體中 a、b 間的元素填入 C、D 染色體上的相同位置內，如 3=i 。再將 B 染
色體中的元素，依序填入 C 染色體中，但已填入的物件則不填，如 4=i 。 
 
 
圖 6.7 物件交配流程 
6.1.2.6 突變 
突變的目的是在於防止複製和交配過程中，陷入區域最佳解。突變率設定為 0.2，
即每條染色體有 20％的機會進行突變步驟。本研究採用的突變僅用於物件編碼的染色體
上，步驟如下： 
步驟一：隨機挑選染色體上的任兩點，令為 c、d。 
步驟二：將染色體上挑選到的最末點，即 d 點，移至挑選到的最先點的前方，即 c 點，
其餘元素依序後移。 
步驟三：完成突變。 
如圖 6.8 所示，將挑選到的 d 點移至 c 點之前，如此即完成突變。 
 65 
步驟二、產生原始母體，迭代計數器 n=0。（S 組染色體） 
步驟三、依物件堆疊演算法求得各條染色體的使用率，並計算每條染色體的合適度。若
已達 M 次迭代次數，跳到步驟七。單一容器時，當物件全部堆疊至容器，跳到
步驟六。 
步驟四、開始進行鄰近解搜尋，針對每一條染色體做鄰近解搜尋，並評估其合適度，若
搜尋後的合適度較之前者好，則替換之，若否，則保留原先進行鄰近解搜尋的
染色體。 
步驟五、此迭代的 S 條染色體與上一迭代所挑選出最好的 S 條染色體混在一起，挑出合
適度最好的 S 條染色體，並由各條染色體的合適度求得複製數目，再依序由合
適度最大的染色體開始複製，共複製 S 條染色體。若解沒改善，n=n+1，若解
有改善 n=0。 
步驟六、複製的 S 條染色體進行交配、突變。回步驟三。 
步驟七、開始進行堆疊方向的搜尋，若已達 N 次迭代次數，跳到步驟八 
步驟八、終止演算法。 
 
 
 
 
 
 
 67 
在單一機台時，第二階段的搜尋方法是，「物件序列中的每一個物件之堆疊方向均需
改變」，但在平行機台中，由於在有多個 CPU 的優勢下，本研究將把計算加以分割，不
同的 CPU 將做不同的運算。分割的方式為，不同的 CPU 只需改變某部分的物件的堆疊
方向。 
舉例來說，若本次運算的例題共有 20 個物件，而本研究使用了 4 個 CPU 來進行運
算，那第一個 CPU 只需改變序列中的前 1 至 5 的物件之擺放方向，其餘物件不變；第二
個 CPU 只需改變序列中第 6 至第 10 的物件之擺放方向，其餘物件不變，直到最後的一
個 CPU。使用這樣的分類法，讓各個 CPU 自行尋找各自解空間範圍內的最佳解，進而
求得全域的最佳解。 
 
最後簡單敘述平行基因演算法與單機演算法的不同點： 
1、 在物件數少於 10 的情況下，每一迭代時每一個物件的擺放方向均需改變，並以隨
機方式來決定。重複步驟直達終止條件為止。 
2、 在物件數較多時，各個 CPU 針對物件序列中不同部分的物件進行「堆疊方向」的
改變，採隨機方式來選擇堆疊方向。重複步驟直達終止條件為止。 
 
各機台在執行完第二階段的解之後，將其結果以檔案方式寫出，之後再進行資料彙
整，並進行相關分析。下圖為平行遺傳基因演算法的架構說明。 
 
 
 69 
6.2 演算結果與分析 
本研究針對長方體物件堆疊至單一容器與多種尺寸容器的堆疊問題求解，使用「下後
左角」優先之啟發式堆疊邏輯為核心，並結合遺傳基因演算法之設計，搭配平行機台的架
構求解。並以例題針對 GA 的參數進行實驗，藉由參數的說明，更瞭解參數的選取對演算
結果之影響，並得到最佳的參數組合做為建議，為了驗證所提出的堆疊方法和兩種演算模
式的處理效能，本研究以兩種演算法對單一容器與多容器的解法和文獻結果相比。程式編
譯軟體為 Microsoft Visual C++ 6.0，測試環境為 Pentium 4 3.0G及 RAM 為 512M。 
6.2.1 平行遺傳基因演算法實驗分析 
本節針對迭代次數、母體染色體數、育種池大小與第二階段搜尋的迭代次數進行
實驗測試，並得到最佳的參數組合。測試例題的資料見附錄一。 
6.2.1.1 遺傳基因演算法實驗參數 
遺傳基因演算法的參數為迭代次數、母體染色體數與育種池大小等三種，各參數的水
準如表 6.2。 
表 6.2 GA實驗參數 
  參 數     
水 準 母體染色體數 育種池大小 迭代次數 
1 6 1/3 10 
2 12 1/2 20 
3 18 2/3 30 
 
表 6.3列出所有參數組合的執行結果，表示方式依序為染色體數-育種池保留大小-迭代
次數。在測試時發現，堆疊物件數在 200 個左右時，有的例題執行時間會增加，但是解的
品質也相對的提高許多，因此以時間來換取解的品質是可接受的。所以分析參數時，以考
慮使用率為主，時間次之。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 71 
6.2.2 執行結果與分析 
本節將使用國際上關於堆疊問題的測試資料，以實驗分析後的參數組合進行堆疊演
算，並與過去文獻的結果相比較。 
本研究使用的國際例題是採用文獻中 Bischoff與 Ratcliff[19]在 1995年時自行產生的測
試例題，共有 BR1-BR7等七大類型的各式例題，每一種類中各有 100題測試例題。BR1中
共有三種不同的物件類型，依種類遞增，至 BR7 中則含有 20 種類的物件類型。其中，每
大類型採用長 587 公分、寬 233 公分、高 220 公分的標準容器，物件的邊長由[30,120]、
[25,120]、[20,80]中挑選產生，各問題中的所有物件的總體積，均小於容器的體積。 
6.2.2.1單一容器執行結果與分析 
本研究每小題均執行三次，並取其平均值來進行比較。測試例題後的結果列於表 6.4。
表中測試例題的欄位下，括弧內表示的是該類型問題中的物件種類數。第一個欄位是
Bischoff、Janetz 等人[18]，第二個欄位是 Bischoff與 Ratcliff[19]，第三個欄位是田邦廷[5]GA
的程式執行結果。第四欄是本研究使用的單機兩階段式遺傳基因演算法的演算結果，分別
列出了平均與最佳的解，與其相對之計算時間。第五欄則為使用平行機台的運算結果，也
一併列出了平均與最佳解。本研究所使用的相關測試例題於  
http://people.brunel.ac.uk/~mastjjb/jeb/orlib/thpackinfo.html取得。 
 
表 6.4 平行兩階段式 GA與文獻(BR)比較結果 
單機 GA 平行 GA Test 
Case 
B/J/R B/R 
田
(Ave) Ave. T(s) best T(s) Ave. T(s) best T(s) 
BR1 
(3) 
81.76 83.37 84.7 85.94  4.4  87.30 4.08  84.77 1.8  87.97 2.4 
BR2 
(5) 
81.70 83.57 83.79 84.96  15.1  86.85 13.84  86.01 8.4  88.62 10.3 
BR3 
(8) 
82.98 83.59 83.08 84.02  87.3  85.53 93.00  84.89 40.9  87.33 45.7 
BR4 
(10) 
82.60 84.16 82.37 83.15  151.8 84.78 153.7  84.85 79.4  86.35 86.2 
BR5 
(12) 
82.76 83.89 81.92 83.80  275.3 84.25 259.9  84.81 135.9  84.79 169.7 
BR6 
(15) 
81.50 82.92 81.57 82.17  409.1 84.15 414.2  83.16 231.9  84.55 250.2 
BR7 
(20) 
80.51 82.14 79.45 82.50  597.3 81.38 595.4 83.4 291.6  83.93 329.1 
Ave. 81.97 83.38 82.41 83.51  220.1 84.89 219.2 84.77 112.8 86.22 127.7 
註：陰影部分為目前最佳解 
 
在表中可以發現，隨著物件數的增加，各演算法的使用率也跟著下降，由於問題複雜
度的提高，相對於解的品質也有下滑的趨勢。在本研究的單機結果中，雖然均比國際範例
來的好，但無顯著的超越田邦廷[5]的測試數據，兩者約在伯仲之間。而將單機的演算法套
 73 
另一作為衡量平行機台效能的指標之定義如下： 
加速因子= =
×
使用單一處理器的執行時時間
使用n個處理器執行時間×處理器個數
s
p
t
t n  
根據上述定義，本研究平行機台之加速因子與效率的詳細資料列於下表。 
表 6.6 加速因子與效率表 
Test Case 加速因子 效率(%) 
BR1 1.67 41.77 
BR2 1.35 33.72 
BR3 2.04 50.92 
BR4 1.78 44.57 
BR5 1.53 38.30 
BR6 1.67 45.38 
BR7 1.81 45.24 
6.3 結論 
本研究針對長方體物件堆疊問題包括單一容器和多種尺寸容器的堆疊問題，提出一兩
階段式的演算模式，在可允許的時間內得到最佳或近似最佳之堆疊結果。 
6.3.1 結論 
在堆疊問題中存在著許多的變數，不僅有物件的排列順序，亦需考量物件的擺放方式，
這兩點與容積使用率均是息息相關。本研究提出了先以物件序列為主，再進一步以擺放方
式為搜尋步驟的演算法，期望能求得全域的最佳解。經過演算機制的運算後，配合使用「下
後左角」優先之啟發式堆疊機制的準則，並搭配兩階段式演算法，在平行機台上的執行結
果，在可接受的時間內獲得具相當品質的解。 
在科技的進步下，運用平行機台的技術也越見成熟，以往超級電腦的計算能力，也可
在目前家用電腦上實現。利用數台電腦的串連與程式撰寫的結合，平行化的計算便可運用
在困難問題的求解運算上。平行化的搜尋概念主要源於多方向的搜尋程序，在本研究中，
藉由平行化的演算方式，求解長方體物件堆疊問題，並獲得了明顯的改善。 
在求解的過程中，兼具深度與廣度的搜尋是很重要的，以往類似的運算內容往往受限
於電腦的計算能力，但藉由平行機台的架設，將可更加強化演算能力，並進一步在合理時
間內求解複雜問題中的最佳解。 
6.3.2 建議 
  本研究使用平行機台求解 NP-hard 問題，在演算法與長方體物件堆疊的研究與探
討，期望得到的結果能應用於業界，在此前提下，提出兩點建議：  
 
1、 演算法的部分，或許可藉由兩種演算法的結合，改善廣度與深度搜尋的機制，進一步
發揮平行機台的演算能力，降低演算時間。 
2、 長方體物件的堆疊已被廣為研究，將來或可試著將本演算法進一步發展為針對不規則
或圓形物件來進行排列堆疊，以供業界在實務上的相關協助。 
 75 
the container loading problem,” Parallel Computing, 29, 641-662 (2003). 
24.  Brown, D. J., “An improved BL lower bound,” Information Processing Letters, 11, 
37-39, (1980). 
25.  Caricato, P., G. Ghiani, A. Grieco, and E. Guerriero, “Parallel tabu search for a pickup 
and delivery problem under track contention,” Parallel Computing, 29, 631-639 (2003). 
26.  Chauny, F., R. Loulou, R. Sadones and F. Soumis, “A two phase heuristic for the 
two-dimensional cutting stock problem,” Journal of Operational Research Society, 42, 
39-47 (1991). 
27.  Chazelle, B., “The bottom-left bin-packing heuristic: an efficient implementation,” 
IEEE Transactions on Computers, C-32, 697-707 (1983). 
28.  Chen, C. S., S. Sarin and B. Ram, “The pallet packing for non-uniform box sizes,” 
International Journal of Production Research, 29, 1963-1968 (1991). 
29.  Chen, C. S., S. M. Lee, and Q. S. Shen, “An analytical model for the container loading 
problem,” European Journal of Operational Research, 80, 68-76 (1995). 
30.  Christofides, N. and C. Whitlock, “An algorithm for two dimensional cutting 
problems,” Operations Research, 25, 30-44 (1977). 
31.  Chu, K.-W., Y. Deng, and J. Reinitz, “Parallel simulated annealing by mixing of states,” 
Journal of Computational Physics, 148, 646-662 (1999). 
32.  Cochran, J. K., S.-M. Horng, and J. W. Fowler, “A multi-population genetic algorithm 
to solve multi-objective scheduling problems for parallel machines,” Computers and 
Operations Research, 30, 1087-1102 (2003). 
33.  Coffman, E. G., M. R. Garey and D. S. Johnson, “Approximation algorithms for bin 
packing - an updated survey,” in : G. Ausiello, N. Lucertini, and P. Serafini (eds.) 
Algorithm Design for Computer Systems Design, Springer, Vienna, 49-106 (1984). 
34.  Dagli, C. H., and M. Y. Tatoglu, “An approach to two-dimensional cutting stock 
problems,” International Journal of Production Research, 25, 175-190 (1987). 
35.  Dagli, C. H., “Neural networks in manufacturing: possible impacts on cutting stock 
problems,” Proceedings of Rensselaer’s Second International Conference on Computer 
Integrated Manufacturing, IEEE Computer Society Press, 531-537 (1990). 
36.  Dagli, C. H. and Hajakbari A., “Simulated annealing approach for solving stock cutting 
problem,” Proceedings of Rensselaer’s Second International Conference on Computer 
Integrated Manufacturing, IEEE Computer Society Press, 221-223 (1990). 
37.  Davies, A. P., and E. E. Bischoff, “Weight distribution considerations in container 
loading,” European Journal of Operational Research, 114, 509-527 (1999). 
38.  De Cani, P., “A note on the two-dimensional rectangular cutting-stock problem,” 
Journal of the Operational Research Society, 41,141-150 (1978). 
39.  Dowsland, K. A., ”A combined data-base and algorithmic approach to the 
pallet-loading problem”, Journal of the Operational Research Society, 38, 341-345 
(1987). 
40.  Dowsland, K. A., “An exact algorithm for the pallet loading problem,” European 
Journal of Operational Research, 31, 78-84 (1987). 
41.  Dowsland, K. A., and W. Dowsland, “Packing Problems,” European Journal of 
Operational Research, 56, 2-14 (1992). 
42.  Durand M.D. and Steve R.White, “Trading accuracy for speed in parallel simulated 
annealing with simultaneous moves,” Parallel Computing, 26, 135-150 (2000). 
43.  El-Bouri, A., N. Popplewell, S. Balakrishman, and A. S. Alfa, “A search-based heurist 
ic for the two-dimensional bin-packing problem,” INFOR, 32, 265-274 (1994). 
44.  Eilon, S., and N. Christofides, “The loading problem,” Management Science, 17, 
259-268 (1971). 
45.  Eley, M., “Solving container loading problems by block arrangement,” European 
Journal of Operational Research, 141, 393-409 (2002). 
46.  Faina, L., “An application of simulated annealing to the cutting stock problem,” 
European Journal of Operational Research, 114, 542-556 (1999). 
47.  Garey, M. R. and D. S. Johnson, Computers and Intractability: A Guide to the Theory 
 77 
70.  Leung T.W. , C. H. Yung, and D. M. Troutt, “Applications of genetic search and 
simulated annealing to the two-dimensional non-guillotine cutting stock problem,” 
Computer and Industrial Engineering, 40, pp.201-214 (2001). 
71.  Leite, J. P. B. and B. H. V. Topping, “Parallel simulated annealing for structural 
optimization,” Computers and Structures, 73, 545-564 (1999). 
72.  Letchford, A. N., and A. Amaral, “Analysis of upper bounds for the pallet loading 
problem,” European Journal Operational Research, 132, 582-593 (2001). 
73.  Liu, Fuh-hwa F., and C-J. Hsiao, “A three-dimensional pallet loading method for 
single-size boxes,” Journal of Operational Research Society, 48, 726-735 (1997). 
74.  Lutfiyta, H. and B. Mcmillin, “Composite stock cutting through simulated annealing,” 
Mathematical Computing and Modeling, 16, 57-74 (1992). 
75.  Mahfoud, S. W. and D. E. Goldberg, “Parallel recombinative simulated annealing:a 
genetic algorithm,” Parallel Computing, 21, 1-28 (1995). 
76.  Meise, C., “On the convergence of parallel simulated annealing,” Stochastic Processes 
and their Applications, 76, 99-115 (1998). 
77.  Morabito, R. N., and Arenales, M. N., “An and-or-graph approach for two-dimensional 
cutting stock problems,” European Journal of Operational Research, 58, 263-271 
(1992). 
78.  Morales, D., F. Almeida, F. Garcia, J.L. Roda and C. Rodriguez, “Design of parallel 
algorithms for the single resource allocation problem,” European Journal of 
Operational Research, 126, 166-174 (2000). 
79.  Ngoi, B. K. A., M. L. Tay, and E. S. Chua, “Applying spatial representation techniques 
to the container packing problem”, International Journal of Production Research, 32, 
111-123 (1994) 
80.  Parada, V., M. Sepulveda, M. Solar, and A. Gomes, “Solution for the constrained 
guillotine cutting problem by simulated annealing,” Computers and Operations 
Research, 25, 37-47 (1998). 
81.  Pisinger, D., “Heuristics for the container loading problem,” European Journal of 
Operational Research, 141, 382-392 (2002). 
82.  Porto, S. C. S., P. F. W. Kitajima, and C. C. Ribeiro, “Performance evaluation of a 
parallel tabu search task scheduling algorithm,” Parallel Computing, 26, 73-90 (2000). 
83.  Potter, M. A., “The Design and Analysis of a Computational Model of Cooperative 
Coevolution,” Ph.D. Thesis, George Mason University, (1997). 
84.  Ram, D. J., T. H. Sreenivas and K. G. Subramaniam, “Parallel simulated annealing 
algorithms,” Journal of Parallel and Distributed Computing, 37, 207-212 (1996). 
85.  Reda, M. S. and E. A. Abd, “An interactive technique for the cutting stock problem 
with multiple objectives,” European Journal of Operational Research, 78, 304-317 
(1994). 
86.  Rego, C., “Node-ejection chains for the vehicle routing problem: sequential and parallel 
algorithms,” Parallel Computing, 27, 201-222 (2001). 
87.  Rode, M., and O. Rosenberg, “An analysis of heuristic trimloss algorithm,” 
Engineering Costs and Production Economy, 12, 71-78 (1987). 
88.  Romeijn, H. E. and R. L. Smith, “Parallel algorithms for solving aggregated 
shortest-path problems,” Computers & Operations Research, 26, 941-953 (1999). 
89.  Scheithauer, G., “LP-based bounds for the container and multi-container loading 
problem,” International Transactions in Operational Research, 6, 199-213 (1999). 
90.  Schoneveld A., J.F. de Ronde and P. M. A. Sloot, “Task allocation by evolutionary 
computing,” Journal of Parallel and Distributed Computing, 47, 91-97 (1997). 
91.  Solar, M., V. Parada, and R. Urrutia, “A parallel genetic algorithm to solve the 
set-covering problem,” Computers and Operations Research, 29, 1221-1235 (2002). 
92.  Steinhöfel, K., A. Albrecht and C. K. Wong, “Fast parallel heuristics for the job shop 
scheduling problem,” Computers and Operations Research, 29, 151-169 (2002). 
93.  Talbi, E. G., Z. Hafidi, and J-M. Geib, “A parallel adaptive tabu search approach,” 
Parallel Computing, 24, 2003-2019 (1998). 
 吳泰熙：以加入升溫機制之模擬退火演算法求解單原片方形物件排列問題 79 
 
79 
以加入升溫機制之模擬退火演算法求解單原片方形物
件排列問題 
吳泰熙 
台北大學企業管理系 
 
鄭豐聰 
逢甲大學工業工程與系統管理系 
 
趙楷 
大葉大學工業工程與科技管理系 
摘 要 
工業界莫不亟思要如何精減人力以提昇效率，全面降低生產成本。然而在
如此競爭的環境裡，尚有部分產業仍利用人工方式來處理原物料切割/排列等
相關作業。此類複雜之「物件切割」問題需要有合適之演算法來迅速求得原物
料切割計畫。由於模擬退火演算法(SA)利用機率性攀爬搜尋演算法則，來搜尋
能量函數之總體最小值，且使用者亦能輕易地針對不同的問題發展其適合的演
算架構，因此已被大量運用於求解困難的決策問題。雖然 SA 藉著使用波茲曼
函數來接受品質較差之解，以期能跳脫區域解而達到搜尋全域最佳解之目標。
但當退火過程進行、溫度越降越低時，SA 陷入區域解之機率越來越大。因此
實有必要發展進一步之機制，以維持 SA 能跳脫區域解之功能。本研究因此藉
著導入升溫機制之觀念，讓 SA 跳脫區域解之能力不致因溫度高低不同而受太
大之影響，並應用此 SA 演算法於快速時間內求算出最佳或近似最佳之單原片
方形物件排列計畫。 
關鍵詞：模擬退火演算法、方形物件排列問題、升溫機制。 
 
 
SOLVING A TWO-DIMENSIONAL PACKING PROBLEM USING A 
SIMULATED ANNEALING ALGORITHM WITH A RISING 
TEMPERATURE MECHANISM 
Tai-Hsi Wu 
Department of Business Administration 
National Taipei University 
Taipei, Taiwan 237, R.O.C. 
 
Feng Tsung Cheng 
Department of Industrial Engineering and Systems Management 
Feng Chia University 
Taichung, Taiwan 407, R.O.C. 
 
Kai Chao 
Department of Industrial Engineering and Technology Management 
技術學刊 第 xx 卷 第 x 期 民國 xxx 年  1 
Journal of Technology, Vol. xx, No. x, pp. xx-xx (200x) 
 吳泰熙：以加入升溫機制之模擬退火演算法求解單原片方形物件排列問題 81 
 
81 
二、文獻回顧與探討 
本節對相關文獻進行回顧與探討，包含方形物件排列
問題之相關解法及研究。過去在圖形切割的文獻當中，隨
著產品種類的不同，如物件在尺寸、形狀、方向、數量上
的差異，可衍生出各種不同類型的排列問題，由於本研究
對於方形切割與排列問題提出演算法，因此在文獻探討部
份將專就方形切割與排列問題之文獻加以描述。 
事實上，二維物件排列問題為一 NP-Hard 之問題[1]，
因此隨著問題愈複雜，解題時間呈現出指數遞增之情形。
所以在以往之研究中，大部分仍著重於發展快速的啟發式
解法，以產生“好的”或“近似最佳”之排列/切割方式，雖然
在解答的精確度上有所犧牲，卻可使解題效率快速凌越最
佳解。Dagli and Tatoglu [2] 及 Babu and Babu [3] 提供了二
維排列問題之數種問題分類方式。就所提供的方形物料原
片之數目而言，可分為單一原片及多張原片，惟多數的文
獻仍著重於單一原片之方形排列問題。就排列之方式而
言，可概分為啟發式及最佳化：啟發式解法原則上即是透
過一些圖形特徵法則(如面積、長、寬、高)來決定圖形置
入之次序及置入之位置[4, 5]；另一種類型之演算法則是透
過各需求圖形間事先的聚合(grouping)，經過逐步的迭次累
積，直到所有的圖形皆被聚合完成[6]。至於最佳化技術應
用於方形排列問題之文獻，依(1)決策目標，及(2)演算效
率，分別探討如下。在決策目標部分，大致可歸納為(a)使
用物料原片張數最小化，如 Chauny et al. [7]及 Chen et al. 
[8]；及(b)使用率最大或浪費量最少，例如 Beasley [9]; Dagli 
and Tatoglu [10]。在演算效率部分，由於排列問題本身為
NP-Hard，若嘗試以最佳化方式來求取使用率最大或浪費量
最少之排列方式，由於演算效率低劣，勢必無法應用到實
務問題。 
在切割問題之求解方面，就切割的方式而言，對齊切
割(guillotine cut)的文獻佔了大部分。所謂對齊切割意謂切
割動作必須從物料原片的某一邊開始，然後平行於原片的
另外二緣進行切割，此類文獻如 Christofides and Whitlock  
[10]及 Gilmore and Gomory [11]；惟方形切割並不必要受到
對齊切割之限制。Morabito and Arenales [12] (1992)及 Hifi 
[13]以一樹狀結構圖來表示二維對齊切割問題:樹狀圖中各
節點代表不同階級中之分片切割結果。他們結合兩種啟發
式解法：向下優先及上坡攀爬成為一混合型搜尋解法。透
過向下優先法之邏輯，由於當問題規模甚大時，需要搜尋
之節點數將大幅攀升，因此作者再發展出三個自定之啟發
式法則 H1、H2、H3，試圖有效降低所有可能之組合總數，
來提昇演算效率。Hifi [13]所探討之問題其實與上一篇類
似，但於此各分片之價值不一定要與分片面積成正比。作
者採用 Morabito 之混合型啟發式解法(DF-HC)以及動態規
劃法求解一維方箱問題組合而成 DH/KD 法。 
如上述，排列/切割問題最佳解之求得需付出太大之演
算時間代價，因此往往無法直接應用於實務上需求分片種
類及數量甚多時之大型問題[14, 15]。雖然如此，仍有部份
研究投入於此類問題確切解之獲得。 
除了數學規劃方式外，針對問題專門量身定做而發展
演 算 法 者 ， 例 如 Yanasse et al. [16] ， Lamousin and 
Waggenspack [17]。由於萬用啟發式演算法在求解組合最佳
化問題中有極為優異之表現，因此也有許多文獻使用這些
演算技術來求解此類問題，例如 Ismail 及 Hon [18]使用遺
傳基因演算法 GA；Dagli and Hajakbari [19]、Lutfiyya and 
McMillin [20]、Theodoracatos and Grimsley [21]、Lai and 
Chan [22]。Lai and Chan [22]利用 SA 配合 DP (difference 
process algorithm)擺放邏輯，並在 SA 降溫程序中使用文獻
所定義的降溫程序，經實例測試後可以成功地降低原物料
的剩餘浪費。Leung et al. [23]分別使用 SA 與 GA，再配合
DP 擺放邏輯。到 2003 年時[24]，更將原本的演算法加以
改良，提出混合式 SA 演算法，雖然在使用率上有不錯的
表現，但相對的在執行時間上也花費了更多的時間。Bennell 
and Dowsland [25]使用禁忌搜尋演算法；Dagli [26]使用類
神經網路演算法；Babu and Babu [3]發展 GA 演算法，求解
二維物件排列問題，將矩形分片排列至矩形原片上。他們
採用左下角優先放置原則，且利用投影座標產生參考點，
來記錄各個矩形分片在矩形原片上的排列位置。該研究並
透過遺傳基因演算法程序，配合有效的複製方法、交配程
序和突變機率，經過數百至數千次個迭次演算之後，求得
最佳解。 
Wu et al. [27]針對 Babu and Babu [3]演算法中未有效
利用部分空間之缺點，提出一結合 SA 演算法及物件排列
邏輯之混合式演算法 IBH。他們針對二維物件排列問題進
行求解，考慮所有可排列之參考點以求得較精確的排列結
果。經執行文獻例題後，顯示其結果明顯優於 Babu and 
Babu [3]之結果，特別是在中大型例題上，此種優勢更為明
顯。他們更進一步地利用此方形排列演算法至不規則物件
排列問題。其作法乃是先找出各個不規則物件之最小包覆
方形，再應用方形排列演算法，排列完成後先去除外觀之
包覆方形，再尋求所有可能之緊靠。 
由如上文獻介紹中不難發覺，SA 已被廣為使用於各
類型物件排列/切割問題之求解，實乃因為 SA 透過其退火
程序之執行，及其能跳脫區域解之能力，而且使用者亦能
輕易地針對不同的問題發展其適合的演算架構。然而不可
諱言的，SA 跳脫區域解之能力將隨著溫度下降而變差，因
此本研究以過去之研究為基礎，更進一步地發展更為全能
之 SA 演算法：藉著導入升溫機制之觀念，當 SA 接受品質
較差解之能力越來越差，超過一事先設定次數後，即啟動
SA 升溫機制，讓傳統的 SA 加入一些必要之擾動，以期能
有效地收斂至最佳或近似最佳解。 
 
 
 
 吳泰熙：以加入升溫機制之模擬退火演算法求解單原片方形物件排列問題 83 
 
83 
尋而達到熱平衡。產生起始解K，透過使用 IBH
擺放法則，計算求得對應之目標函數值 C(K)，
迭代 n=0，記錄馬可夫鏈長度值 i＝0。 
步驟 2： 經由鄰域解移步法則針對現有解 K 的鄰域尋
找出一新的可行解 K’，再透過 IBH 擺放法則，
計算對應之目標函數 C(K’)。 
步驟 3： 當能量差距 E=C(K’)-C(K)<0，顯示目標函數值
下降，則 K’取代 K 成為現有最佳解，同時升
溫計數器歸零，進入步驟 5。若 E 0≧ ，計算波
茲曼函數值 EXP(-E/k*Tn)，其中 Tn 為現在溫
度，k 為波茲曼常數，通常設為 1。產生一 0
至 1 間的亂數值 R，若 R<EXP(-E/k*Tn)，則接
受此較劣解 K’為現有可行解，升溫計數器則維
持不變。若是較劣解 K’不被接受，升溫計數器
便累加一次。 
步驟 4： 當升溫計數器達到預設之數值 TR 時，則升高
目前溫度 Tn 至 Tn+1，回到步驟 2。其中： ，β
為升溫率，0<β<1。 
步驟 5： 設 i = i+1，當 i 達到馬可夫鏈長度時，進入步
驟 6；反之則回到步驟 2。 
步驟 6： 降低溫度使下個迭代溫度 Tn+1 = αTn，i＝0，
0<α<1，其中 α 為冷卻率。如果溫度小於預設
之停止溫度後，則結束整個演算流程，否則持
續執行步驟 2。 
 
溫度在 SA 中扮演著相當關鍵的角色：其一為當溫度低於
終止溫度時即結束整個降溫程序；另一為判斷是否接受較
劣解之波茲曼函數，亦為溫度之函數。冷卻率控制溫度下
降的快慢，也會影響使用率的品質。每個溫度下執行馬可
夫鏈的次數對實驗的品質也有一定的影響：馬可夫鏈長度
設定的太短，其演算時間縮短，但卻無法有效改善目標值，
且所求得的最終解品質不易達到期望水準；反之若設定過
大，解的品質與效果提升，但演算時間將因此變長。不同
於冷卻率，經過大量測試後，我們發現升溫率 β 之設定，
於演算過程中並未有太大之影響，我們最終設定其值為
0.02。類似之觀察亦發生在預設之升溫計數值 TR 上。我們
嘗試了幾個設定，分別是：0.1*分片數、0.15*分片數、0.2*
分片數、0.3*分片數。經過多次之嘗試，並在效能及效率
上之妥協後，設定 TR = 0.15*分片數。 
 
（五）終止條件 
本演算法之終止條件有二項：當溫度降至終止溫度
時，或原片使用率達到 100％，則終止演算法。 
四、演算結果及分析 
此節首先以部分例題對此 SA 演算法之參數進行實
驗，以期能獲取最佳參數組合，求算出最佳演算結果。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
圖 2  IBH 擺放法則(Wu et al., 2003) 
 
本研究所採用之程式編譯軟體為 Visual C++ 6.0，測試環境
為 Pentium IV 2.6G 及 RAM 為 DDR 512M 之個人電腦。 
1. 文獻例題介紹 
文獻中有大量的單原片方形物件排列例題可供測
試，本研究所採用之測試例題來源及基本資料如表一所
示。在所有提供例題中，分片規格是將原片裁剪出各種不
同大小及數量的方形物件。 
 
 
開始 
選取字串中之第一片原片 
選取字串中之第一片分片 
將分片擺放在原片之左下
建立初始可擺放點 
以左下角優先之方式 
排序可行擺放點 
是否還有 
其他分片? 
選取下ㄧ分片 
堆疊在第一個可行擺放點 
是否出界? 
停止 
是 
選取下ㄧ片原片 堆疊在下一個 可行擺放點 
否 
是否有其他 
可行擺放點? 
否 
否 是否重疊? 
更新可
行擺放
點 
是 
是 
否 
 吳泰熙：以加入升溫機制之模擬退火演算法求解單原片方形物件排列問題 85 
 
85 
表四 本研究 SA 演算法與文獻最佳結果比較表 
本研究結果 
題
號 
分片
數 
文獻 
最佳結果
(%) 
平均 
使用率
(%) 
最佳 
使用率
(%) 
CPU 
(sec) 
1 25 83.470 91.468 92.157 1.083 
2 20 84.800 90.738 90.738 0.589 
3 16 80.300 80.000 80.000 0.367 
4 19 86.400 84.211 84.211 0.425 
5 50 93.500 90.741 90.741 5.323 
6 50 91.800 94.526 94.526 19.469 
7 10 100.000 99.760 100.000 4.463 
8 15 100.000 99.520 100.000 5.552 
9 20 100.000 95.484 97.264 92.328 
10 10 94.800 92.006 92.006 0.120 
11 10 97.100 92.718 95.586 0.125 
12 15 92.200 92.033 92.792 0.325 
13 15 94.400 92.987 95.372 0.198 
14 20 94.600 91.315 91.920 23.291 
15 30 N/A 94.900 96.400 1.721 
16 16 96.000 97.300 100.000 0.068 
17 17 96.000 98.000 100.000 0.126 
18 16 96.000 99.100 100.000 0.074 
19 25 94.000 98.400 100.000 0.389 
20 25 94.000 97.600 98.400 0.928 
21 25 94.000 100.000 100.000 0.666 
22 28 96.000 95.100 96.600 1.850 
23 29 96.000 94.400 95.700 2.106 
24 28 96.000 94.300 96.500 1.764 
25 49 97.000 94.300 97.100 15.227 
26 49 97.000 94.307 97.087 13.978 
27 49 97.000 95.445 97.561 14.436 
28 73 97.000 96.600 98.100 143.230 
29 73 97.000 95.028 97.297 192.447 
30 73 97.000 96.358 98.397 141.122 
31 97 97.000 95.700 97.300 461.884 
32 97 97.000 95.414 96.852 387.397 
33 97 97.000 95.981 97.999 435.295 
34 196 96.000 96.100 97.400 50617 
35 197 96.000 96.981 97.692 53337 
36 196 96.000 96.022 97.258 41298 
37 40 98.198 95.262 96.266 4.911 
38 50 97.674 95.829 96.850 7.030 
 
在 14 個 30 片以上的例題中，11 個例題結果優於文獻
結果。如此之優勢，我們推論可能因為在降溫程序達到溫
度末段時，本研究所提出之升溫機制引導演算法在搜尋鄰
近解時能不被陷入於區域解，而有更大的機會跳脫，進而
收斂至最佳或近似最佳解。也因為分片數較多的題型有著
更大的解空間，只要不陷入區域解，就有更大之機會找到
更多較好的鄰近解，因此表現也較佳。由如上之演算結果
顯示，本研究所提出具升溫機制之 SA 由於能有效避免落
入區域解，在演算效能及效率上均有非常優異之表現。 
圖 3. 中大型例題本研究所獲致之最佳結果與文獻結果
之比較圖 
五、結論及建議 
本研究針對單原片方形物件排列問題，依循文獻 IBH
之擺放法則，設計一導入升溫機制之 SA 演算法，其主要
訴求為於解答品質持續無法改善時，除了使用傳統之波茲
曼函數來接受較差解外，更可透過升溫機制來維持 SA 跳
脫區域解之能力，並搭配合適之 SA 參數設計，提出一同
時兼具效能及效率之演算法。本研究首先對所提出之 SA
演算法之起始溫度、冷卻率、馬可夫鏈長度等參數進行實
驗測試，以求得最佳之參數組合，並以此建議之參數組合
進行所有測試例題之演算，並與文獻所得之演算結果進行
比較。透過文獻例題之演算，在平均使用率的部分，本研
究所提出之 SA 演算法在大部分例題之原片使用率均可達
到 95%以上之水準，與文獻最佳結果相比，普遍提高了 1~2
％的使用率；在最佳使用率的部分，編號 7、8、16～19、
21 更是達到 100％的使用率，在全部 38 題測試例題中，本
研究所提出之 SA 演算法有 24 題之結果超越文獻最佳解，
2 題與文獻最佳解相同，演算績效明顯優於文獻結果。如
此之優勢在分片數 30 片以上之中大型例題中，更為顯著。
能獲致如此優異之表現，應當是在降溫程序達到溫度末段
時，本研究所提出之升溫機制引導演算法在搜尋鄰近解時
能跳脫而不被陷入於區域解，進而收斂至最佳或近似最佳
解。因此本研究所提出具升溫機制之 SA 由於能有效避免
落入區域解，在演算效能及效率上均有非常優異之表現，
如此之演算經驗值得推廣並供後續使用 SA 演算法之讀者
參考。 
參考文獻 
1. Garey, M. R. and Johnson, D. S., Computers and 
Intractability: A Guide to the Theory of NP-Completeness, 
W. H. Freeman and Company, San Francisco (1979). 
2. Dagli, C. H., and Tatoglu, M. Y., “An Approach to 
Two-Dimensional Cutting Stock Problems,” 
International Journal of Production Research, Vol. 25, 
pp. 175-190 (1987). 
95.000% 
96.000% 
97.000% 
98.000% 
99.000% 
25 26 27 28 29 30 31 32 33 34 35 36 37 38 
題號 
使用率 
文獻最佳結果 
本研究結果 
 吳泰熙：以加入升溫機制之模擬退火演算法求解單原片方形物件排列問題 87 
 
87 
Possible Impacts on Cutting Stock Problems,” 
Proceedings of Rensselaer’s Second International 
Conference on Computer Integrated Manufacturing, 
IEEE Computer Society Press, pp. 531-537 (1990). 
27. Wu, T.-H., Chen, J.-F., Low, C., and Tang, P.-T., “Nesting 
of Two-Dimensional Parts in Multiple Plates Using 
Hybrid Algorithm,” International Journal of Production 
Research, Vol. 41, pp. 3883-3900 (2003). 
28. Hopper, E. and Turton, B. C. H., “An Empirical 
Investigation of Meta-Heuristic and Heuristic Algorithms 
for A 2D Packing Problem,” European Journal of 
Operational Research, Vol. 128, pp. 34-57 (2001). 
 
 吳泰熙：以協力演化遺傳演算法求解容器堆疊問題 89 
 
89 
Intensive testing is implemented to search for proper CCGA parameter 
combinations.  Promising computational results are obtained and reported 
by running examples from the literature. 
 
一、緒 論 
長期以來，如何在容器內堆疊物體，以減少空間的浪
費，是眾多產業持續面臨的重要作業問題之一。例如在貨
品運送或工廠的生產部門中，往往使用棧板(pallet)或方形
容器(container)作為堆疊零件、半成品與成品之工具。而物
體堆疊方式是否能有效利用容器空間，絕對地影響了貨車
的裝載率、運送頻次，以及倉庫的儲存空間等各項作業成
本是否能有效降低。 
容器堆疊問題(container loading problem)之定義為：在
已知尺寸大小的容器中，按照某一特定法則，在不得超出
容器邊界的限制下，依序將物體堆疊、擺放在容器內，直
至所有物體均已置入容器中，或容器內已無空間可允許剩
餘物體繼續置入時，方停止擺放動作。然而因應各項考量
因素不同，伴隨而來則有諸多不同類型之堆疊問題，例如
需要考量物件的尺寸、形狀、重量、材質、方向，及容器
的尺寸、形狀、載重等特性。考量的特性越多，問題的難
度越高，求解過程所需之演算時間也隨之遽增。雖然如此，
文獻中大多數之研究仍是討論如何將長方體物件堆疊擺放
至長方體容器內。 
因著容器堆疊問題之兩大要件(堆疊物體、容器)之變
化，相關之文獻可分為下列三類：(1)多個單一尺寸的長方
體物件和單一長方體容器、(2)多種尺寸的長方體物件和單
一長方體容器、(3)多種尺寸的長方體物件和多個不同尺寸
之長方體容器。 
第一類問題之複雜度較低，屬於較易解的問題。由於
長方體物件的大小均相同，所以也有研究將其簡化成二維
裝載之問題加以探討。張美忠[1]探討棧板裝載問題，將問
題簡化成二維問題，利用整數規劃來求解，並以此數學模
式為基礎將其延伸應用在多種規格之長方體容器裝載問題
上。Liu and Hsiao[2]探討相同的問題，亦把問題簡化成二
維裝載模式進行求解。他們把長方體物件不同的三個面各
視為二維的問題進行排列，且具相同高度之長方體才能排
在同一層，使得物體能平穩堆疊，然後再以數學模式求得
最佳解。 
多種尺寸的長方體物件和單一長方體容器堆疊問題在
目前的討論最為廣泛。此類問題之長方體容器只有一個，
且其尺寸大小固定；而長方體物件的尺寸較為多樣，至少
有三種以上之不同尺寸。當然隨著物件的尺寸更為多樣，
問題複雜度自然增加。Gehring and Bortfeldt [3]曾提出以塔
式堆疊來擺放物件，將物件中底面積較大者放置在最下
方，如欲往上擺放時，該物件的底面積需小於其下已放置
好之物件。如此重複放置，成一塔型擺放。完成數個塔型
之後，再考慮交換各個塔型之間的物件，並以啟發式演算
法來控制其演算機制。Bortfeldt and Gehring[4]亦提出了另
一種堆疊邏輯：先將數個物件堆疊成「層」，再以堆好的各
個「層」，來考慮其擺放順序。Nagoi 等人[5]則是使用陣列
來記錄物件擺放之座標點，而長方體物件在堆疊時，可選
擇在容器中由後往前堆疊，或是由下往上堆疊。Eley[6]則
應用貪心法則來產生物件堆疊而成之區塊(block)，接著再
透過使用樹狀搜尋策略(tree search)來改善原先之區塊位置
安排。George and Robinson[7]等人也是採用區塊的方式堆
疊，但是當每個區塊堆疊完時會彼此結合，以減少空間的
浪費。 
在多個單一尺寸長方體容器與多種不同尺寸的長方體
物件中，Terno 等人[8]使用分枝界限法來逼近，求得最少
的長方體容器數量與最大容器使用率。他們先找出長方體
容器數量的下界和上界，然後從容器的上界開始堆疊。堆
疊時，首先將物件均分給各容器來進行堆疊，然後再依次
減少一個容器，再把物件均分給剩下容器來進行堆疊，直
至容器無法再減少。Scheithauer[9]則是針對單一及多容器
堆疊問題之數學模式建立對應之鬆弛模式(relaxation)。此
鬆弛後之線性規劃模式，可產生極佳之限值(tight bounds)。 
由如上之文獻回顧，不難發覺：針對容器堆疊問題，
過去文獻通常直接發展啟發式堆疊計畫；少數則是在堆疊
完成後，再應用改善策略進一步產生更佳之堆疊計畫。由
於容器堆疊問題之結構複雜，實屬於組合最佳化問題
(combinatorial optimization problem)。對於組合最佳化問題
之求解，由於問題結構之複雜，且隨著問題規模增加，解
題時間會呈現指數遞增之情形。因此近年來之研究通常避
免使用雖能保證獲致最佳解、但卻演算耗時之數學規劃工
具，而改採能於效率上更勝一籌且品質不惶多讓之啟發式
演算法，特別是萬用型啟發式演算法(meta-heuristic)，例如
模擬退火演算法 (simulated annealing, SA) 、禁忌搜尋法 
(tabu search, TS)、遺傳演算法 (genetic algorithm, GA) 等。
採用萬用型啟發式演算法來求解容器堆疊問題之文獻通常
延續過去先產生可行堆疊計畫之方式，再透過萬用型啟發
式演算法於外部控制之機制，持續地讓內部之堆疊計畫改
善，直至達到演算終止之條件。例如 Gehring and Bortfeldt 
[3]使用遺傳演算法；Bortfeldt and Gehring [4]使用混合遺傳
演算法 ；Bortfeldt 等人 [10]則是採 用平 行禁忌 搜尋法
(parallel TS)。 
遺傳演算法是由 Holland 於 1975 年首先提出[11]，為
一根據物競天擇、適者生存之道理所發展出之優選技術，
近年來已被廣泛應用於各領域中。它透過選擇物種中具有
較好特性的上一親代，並隨機的相互交換親代中彼此基因
之資訊及特性，以適合度函數為引導，希望保留親代中較
被喜好之特性並繁衍至子代，以產生較上一親代更為優秀
 吳泰熙：以協力演化遺傳演算法求解容器堆疊問題 91 
 
91 
 
容器「下後左」置入點 
 
物件「下後左」堆疊點 
 
單一物件堆疊及參考點產生 
 
多重物件堆疊及參考點產生 
圖 1 「下後左」啟發式堆疊法則示意圖 
三、結合堆疊法則之協力演化遺傳演算法 
遺傳演算法即是模仿遺傳學上物競天擇、適者生存之
原理，再運用電腦模擬所發展出來的一種人工智慧搜尋演
算法。其主要流程係經由程式的編譯決定一個由眾多染色
體所組成之起始母體，其內之染色體則是對應到欲求解問
題之一組解。經由考量每條染色體對於環境的適應度
(fitness)，模擬大自然優化選擇(selection)之觀念，再決定如
何複製(reproduction)適應較佳之染色體，經由染色體間之
交配(crossover)及突變(mutation)機制，讓母體不斷地演
化，一直演化至最適合染色體出現或是達到預設的迭代數。 
協力演化遺傳演算法乃採用 GA 之基本概念，但是更
加強其「平行搜尋」之功能。其透過一次產生數個 GA 母
體，並讓其同時進行演化，各自搜尋不同之解答空間，以
提昇搜尋之品質及效率。本節之內容即是以所發展之「下
後左」啟發式堆疊法則為核心，再由協力演化遺傳演算法
作為外部控制及改善解答品質之工具。 
1. 協力演化遺傳演算法概念 
從「協力演化」這個名辭中，不難想像至少要有兩個
以上的母體，經由某種「資訊交換」的溝通模式，達到「合
作 進 化 」 的 目 的 ， 因 此 實 可 將 協 力 演 化 遺 傳 演 算 法
(cooperative coevolutionary genetic algorithm, CCGA)視為
一個包含數個遺傳演算法之集合。在此模式下，每一個遺
傳演算法負責演化一個族群，而族群間彼此各自搜尋問題
空間的不同區域，最後再透過某些結合機制將各族群逐漸
整合。然而應用在不同的問題領域上，每個族群所代表的
意義互異，因此彼此交換的資訊及結合機制可能不同。 
2. 結合堆疊法則之協力演化遺傳演算 
CCGA 之內容仍為一遺傳演算法，因此本節就其編
碼、母體產生、適合度函數、複製、交配、突變等運算子
分別介紹。由於 CCGA 乃透過多個子族群同時演化，因此
各子族群均需使用到前述之運算子。 
 
(一)編碼 
假設物件總類有 M 種，而各種尺寸的物件數量為
iN , }M,...,1{i = ，並且按照物件尺寸種類之體積由大到
小依序編號，相同尺寸的物件編在同一群組且給予相同之
編號，即可合成一條染色體，代表物件被置入容器之次序，
如圖 2 所示。在本研究中我們定義物件最長的邊為長、次
長的邊為寬、最短的邊為高。 
 
(二)起始母體產生及染色體數目 
母體的大小(population size)及其內染色體之組成對於
遺傳演算法之績效有絕對之影響，良好的母體與恰當的染
色體數有助於快速求得近似最佳解，因此產生母體時，為
因應 CCGA 多個母體同時演化之概念，我們將物件群組區
分為 P 個子族群，例如大型物件與小型物件等兩個子族
群，每一子族群同時進行演化，其餘編碼方式如上節所述。
母體內之染色體數目(令其為 S)過多雖然帶來更多元之組
成，卻也將在演化進行時造成演算之負擔，因此適當 S 值
之決定，實需要經由大量實驗測試得知。 
母體中第一條染色體之產生乃是按物件之體積大小
排列，其餘 S-1 條染色體則是各自在大小物件兩大子族群
中隨機排列基因而產生。假設現有 8 種不同尺寸之物件欲
進行堆疊、各尺寸之物件僅有一件，且 S=4、P=2。 
 
 吳泰熙：以協力演化遺傳演算法求解容器堆疊問題 93 
 
93 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
圖 6  本研究 CCGA 流程圖 
 
四、演算結果及分析 
本研究針對單一容器、多尺寸長方體物件之堆疊問題
發展協力演化遺傳演算法。首先以部分例題對此 CCGA 演
算法之參數進行實驗，以期能獲取最佳參數組合，進而有
效率地求算出最佳演算結果。本研究所採用之程式編譯軟
體為 Visual C++ 6.0，測試環境為 Pentium IV 3.2G 及 RAM
為 DDR 512M 之個人電腦。 
1. 文獻例題介紹 
Bischoff and Ratcliff [18]所提出的 BR 系列例題，是眾
多文獻中常被廣泛使用測試的，因此本研究亦採用這些例
題做為測試本研究所發展之 CCGA 演算法之演算績效，所
有例題皆能從如下網址之連結取得： 
http://people.brunel.ac.uk/~mastjjb/jeb/orlib/files/ 。例題 BR1
到 BR7 每一大類各有 100 小題，共計 700 測試題。BR1
是單一容器有三種不同尺寸大小之物件群組，BR2 則是五
種不同尺寸大小之物件群組，隨著越後面的題目，物件群
組也跟著增加，至 BR7 時則有二十種不同尺寸大小之物件
群組，因此編號愈大的題目，由於其物件尺寸增多，求解
的難度與所耗用的時間也相對地增加。 
2. CCGA 演算法參數分析 
在決定 CCGA 演算參數設定時，由於 BR1~BR3 等三
類問題之物件尺寸大小差異不大，屬於難度較小之測試
例；相較之下，BR4~BR7 較為困難。因此本研究分別從
BR4、BR5、BR6 與 BR7 的國際例題中，各抽取一題做為
參數測試範例。演算參數則考慮「迭代數」及「母體染色
體數」兩因子。由於本研究進行之 CCGA 分成三個階段：
先由三個子族群結合成兩個子族群，最終再結合成一個族
群，因此參數組合之格式為「第一階段迭代數 ― 第二階
段迭代數 ― 第三階段迭代數 ― 母體染色體數」。若在各
階段之迭代數設定太大，對於某些規模較大之測試例題，
單單演算某類例題所花費之時間可能超過數小時，因此我
們設定「迭代數」之水準分別為迭代數 3 及 6；母體染色
體數則有 2、3、4、5 及 10 等五種水準，總計有 40 種參數
組合。各種參數組合之演算結果詳列於表二，表二內之數
值為三次演算之平均數值。由表二可發現，當染色體數目
愈大時，往往能求得較佳之容器使用率；但相對地，也花
費更多的演算時間。在迭代次數方面，也有類似之觀察：
迭代數愈大，所花費之演算時間愈多，然而所求得之結果
並未明顯較佳。表二列出各種參數所獲致之使用率及演算
時間外，為方便評斷各種參數之綜合表現，亦列出各種參
數之四題平均容器使用率及對應之演算時間，再由其中挑
出四題平均容器使用率最高之五種參數組合如表三所示。 
 
 
 
是 
是 
否 
將物件分為大、中 
、小三個子族群 
大物件 
子族群 1 
 
交配 
突變 
中物件 
子族群 2 
 
交配 
突變 
小物件 
子族群 3 
 
交配 
突變 
合併染色體、計算合適度 
是否達到 
預定迭代數 
合併大物件子族群 1 
與中物件子族群 2 
 
合併染色體、計算合適度 
是 
否 
大物件 
子族群（1+2） 
 
交配 
突變 
小物件 
子族群 
 
交配 
突變 
是否達到 
預定迭代數 
否 
合併大物件與小物件子族群
（1+2+3） 
 
恢復完整基因編制 
 
交配 
突變 
是否達到 
預定迭代數 完成 
合併染色體、計算合適度 
 吳泰熙：以協力演化遺傳演算法求解容器堆疊問題 95 
 
95 
綜觀表三之五種參數組合為表現較佳之參數組合，在 
求解品質上皆有不錯的表現。雖然參數組合 6-3-6-10 所獲
致之平均容器使用率最高，但在演算績效與演算時間之取
捨後，本研究建議使用參數組合 6-3-3-5，做為下節演算測
試的參數設定。 
 
3. 執行結果與分析 
接著使用上節建議之參數組合，對 BR 國際例題進行
測試。每一演算例進行五次之演算，並記錄五次演算之最
佳及平均結果，再與國際文獻演算結果進行比較，如表四
所示。表四中第一欄為測試例題類別，其後之數字則是該
題型中物件之尺寸數，例如 BR4(10)意指 BR4 題型中之物
件尺寸有 10種不同大小。第 2欄為Bischoff and Ratcliff [18] 
(B/J/R)之最佳執行結果。為了測試本研究所提出之 CCGA
是否會因子族群數目不同而有不同之演算績效，我們提出
CCGA1 及 CCGA2，分別代表 2 個子族群及 3 個子族群之
CCGA，並且將它們之演算結果列於表四中。觀察表四之
內容，我們發覺 CCGA1 在 BR1~BR7 七種題型中，有兩類
題型之演算結果優於文獻之表現，分別為 BR1 及 BR6；
CCGA2 則有六種題型之演算結果優於文獻之表現，除了
BR5 外。CCGA2 之演算績效優於 CCGA1 應來自 CCGA2
提供較多之子族群，讓 CCGA“平行搜尋”及“協力”之
機制有充分發揮之空間。當然較多之子族群數在演算過程
中需要耗費更多之演算時間，從表三中亦得到了驗證。 
五、結論及建議 
本研究針對單一容器、多尺寸長方體物件之堆疊問題
發展協力演化遺傳演算法。首先設計一「下後左」之啟發
式堆疊法則為核心模組，但在外部控制機制上則導入「協
力演化」之觀念，數個 GA 同時進行演化，各自搜尋不同
之解答空間，最後透過逐次結合子族群，發揮協力演化遺
傳演算法「平行」搜尋之能力，以提昇搜尋之品質及效率。 
協力演化遺傳演算法設計完成後，本研究再對 CCGA
演算法之演算迭代數、母體染色體數目等參數進行實驗測
試，以求得最佳之參數組合，並以此建議之參數組合進行
所有測試例題之演算，並與文獻所得之演算結果進行比
較。透過文獻例題之演算，本研究所提出之 CCGA 演算法
在大部分例題之容器使用率均優於文獻最佳結果。本研究
亦發現較多之子族群數，讓 CCGA“平行搜尋”及“協
力”之機制有充分發揮之空間，唯必須付出更多演算時間
之代價。 
參考文獻 
1. 張美忠，「貨物運輸棧板裝載問題啟發式解法之應用」，
碩士論文，交通大學士木工程研究所，新竹(1992)。 
2. Liu, F.-H. and Hsiao, C-J., “A Three-dimensional Pallet 
Loading Method for Single-size Boxes,” Journal of 
Operational Research Society, Vol. 48, pp. 726-735 
(1997). 
3. Gehring, H., and Bortfeld, A., “A Genetic Algorithm for 
Solving the Container Loading Problem,” International 
Transactions of Operational Research, Vol. 4, pp. 401-418 
(1997). 
4. Bortfeldt, A. and Gehring, H., “A Hybrid Genetic 
Algorithm for the Container Loading Problem,” European 
Journal Operational Research, Vol. 131, pp. 143-161 
(2001). 
5. Ngoi, B. K. A., Tay, M. L., and Chua, E. S., “Applying 
Spatial Representation Techniques to the Container 
Packing Problem,” International Journal of Production 
Research, Vol. 32, pp. 111-123 (1994). 
6. Eley, M., “Solving Container Loading Problem by Block 
Arrangement,” European Journal Operational Research, 
Vol. 141, pp. 393-409 (2002). 
7. George, J. A., and Robinson, D. F., “A Heuristic for 
Packing Boxes into a Container,” Computers & 
Operations Research, Vol. 7, pp. 147-156 (1980). 
8. Terno, J., Scheithauer, G., Sommerweiβ, U., and Riehme, 
J., “An Efficient Approach for the Multi-pallet Loading 
Problem,” European Journal Operational Research, Vol. 
123, pp. 372-381 (2000). 
9. Scheithauer, G., “LP-based Bounds for the Container and 
Multi-container Loading Problem,” International 
Transactions in Operational Research, Vol. 6, pp. 199-213 
(1999). 
10. Bortfeldt, A., Gehring, H., and Mack, D., “A Parallel Tabu 
Search Algorithm for Solving the Container Loading 
Problem,” Parallel Computing, Vol. 29, pp. 641-662 
(2003). 
11. Holland, J. H., “Adaptation in Natural and Artificial 
Systems,” Ph.D. Thesis, University of Michigan Press, 
Ann Arbor, MI, (1975). 
12. Potter, M. A., “The Design and Analysis of a 
Computational Model of Cooperative Coevolution,” Ph.D. 
Thesis, George Mason University, (1997). 
13. Garcia-Pedrajas, N., Hervas-Martinez, C., and 
Munoz-Perez, H., “CONVET: A Cooperative 
Coevotionary Model for Evolving Artificial Neural 
Networks,” IEEE Transactions on Neural Networks, Vol. 
14, 575-596 (2003). 
14. Garcia-Pedrajas, N., Hervas-Martinez, C., and Ortiz-Boyer, 
 97 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                         94 年 05 月 15 日 
報告人姓名 吳泰熙 
服務機構 
及職稱 
大葉大學工業工程與科技管理系教授 
時間 
會議 
地點 
94/4/23~94/4/25 
中國瀋陽 
本會核定 
補助文號 
NSC 93-2213-E-212-014 
一般型研究計書 
會議 
名稱 
(中文) 第十一屆工業工程與工程管理國際研討會 
(英文) The 11th International Conference on Industrial Engineering and 
Engineering Management 
 
 
與本系同仁於會場 Peter Chang Hall 合影 
 
本會議(11th International Conference on Industrial Engineering and Engineering Management)於
2005 年 4 月 23 日至 25 日假中國瀋陽東北大學舉行。IEEM 國際會議每年舉辦一次，本次為
第十一屆，由來自世界各地例如美國、日本、韓國、新加坡、及台灣等各國學者發表工業工
程及其相關領域之論文，共計 315 篇。這些子題包括： 
 
Global Manufacturing and Management 
 
 99 
  
論文發表及問題交流 
 
此外個人亦參加多場與研究興趣較相關之發表場次，並對於其他學者發表內容提出詢
問，也與來自大陸、香港、新加坡的學者討論交流，對於各國研究環境亦互相觀摩、瞭解，
亦對爾後可能之互訪提出口頭邀請。借助國際學術交流機會，將研究論文與來自世界各地之
專家學者共同討論，利用在不同的社會環境與學術環境中提出問題、探討問題並分享經驗，
尋求共通的學術真理來與現實環境相契合，是非常寶貴的經歷。 
此次參加會議另一巨大之收穫為與香港科技大學曾明哲教授有深入之互動及討論。曾教
授於 1994 年應香港科技大學之聘任，由美國至香港任教，其「工業工程與管理」之專長亦由
於當年中國積極發展工業之需，而受到重視，被蔚為導入工業工程進入中國大陸之先驅者之
一。個人就台灣、中國在發展工業工程之歷史經驗，以及未來之走向，與曾教授有深入之對
談、請益及交換意見。 
 
  
與香港科技大學曾明哲教授互動及合影 
 
 101 
HEURISTIC APPROACH FOR THE MULTIPLE FACILITY TYPE FLOW-CAPTURING LOCATION 
ALLOCATION PROBLEM 
 
Tai-Hsi Wu
1
, Hsiu.-Kuei. Kuo
2
, and Kevin H.-M. Meng
3
 
 
1
Department of Industrial Engineering and Technology Management, Da-Yeh University, Taiwan 
2
 Department of Transportation Technology and Management, National Chiao Tung University, Taiwan 
3
Gigabyte Technology, Taiwan 
 
ABSTRACT 
 
It is often that customers purchase service as part of 
routine preplanned trips.  Examples include 
convenience stores, gas stations, automatic teller 
machines, etc.  The decision objective for service 
providers is to find the optimal locations for such 
facilities to achieve objectives such as maximization of 
customers captured.  In one of our study, we developed 
mathematical formulations for the multiple-objective and 
multiple-facility-type location allocation problem.  For 
such problems with larger sizes, it is very difficult and 
time-consuming to obtain the optimal solutions.  We 
hence present greedy-based heuristic approaches for 
solving the above problem.  The computational results 
indicate that the greedy heuristic proposed performs very 
well in terms of the solving efficiency and the solution 
quality. 
 
Keywords. Location-allocation problem, flow-capturing, 
greedy heuristic algorithm.  
 
 
INTRODUCTION 
 
In the traditional location allocation models, the optimal 
locations of facilities can be found by minimizing the 
summation of total distance or traveling time from 
demand points (home or workplace) to the facilities.  
Many services, however, are now consumed in 
discretionary way.  Customers purchase service as part 
of routine preplanned trips, i.e., the daily commute to and 
from home and workplace.  Examples are convenience 
stores, gasoline stations, and automatic teller machines.  
Hence in this type of consuming behavioral model, 
demand in a network, instead of being at nodes as usual, 
is now expressed as flow.  The model locates facilities 
to maximize the flow of customers passing at least one 
service facility on their preplanned tours, so called the 
“flow-capturing location allocation problem” (FCLAP) 
[9].  Berman et al. published a series of papers for the 
same topic [2,3,4,5].  For the FCLAP discussed above, 
no deviation from the preplanned path is allowed, i.e., the 
service facility must be located at some points exactly on 
preplanned travel path.  This assumption is relaxed in 
[3], and three generalizations/models, representing 
different decision objectives, are proposed.  They are: 
delta coverage maximization (P1), market size 
maximization (P2), and inconvenience minimization (P3).  
Hodgson et al. [10] applied the FCLAP model to an 
authentic urban road traffic network in Edmonton, 
Canada. 
The three generalizations in [3], in some sense, represent 
three different decision objectives though they seem 
similar at a first glance, at least not much different.  Wu 
et al. [13] proposed mathematical model for the 
multi-objective FCLAP and concluded from the 
computational results from test problems that the last two 
objectives of [3] coincide with each other. 
In addition, it is assumed in the original FCLAP model 
that all facilities in the network provide identical service 
and thus no customer needs to stop at more than one of 
them.  That is, all facilities are of the same type.  
However, it is quite usual that the customers would 
consume several different types of services in one trip.  
The limitation of homogeneous facility type obviously 
makes the original model inapplicable to real cases.  Wu 
et al. [13] also discussed the multiple facility type 
FCLAP and the corresponding mathematical model was 
developed.  Note that the assumption of allowing 
customers to detour is still followed in this research.  It 
is widely known that for problems with larger sizes, it is 
very difficult and time-consuming to obtain optimal 
solutions.  The primary purpose of this paper is to 
present solution approach that can solve problems both 
efficiently and effectively.  Greedy-based heuristic is 
hence presented. 
This paper is organized as follows.  The mathematical 
model of the multiple facility type FCLAP appeared in 
[13] is given in Section 2, accompanied with a 
corresponding greedy heuristic we developed.  
Computational results of test problems are provided in 
Section 3.  Section 4 summarizes the conclusion of this 
paper.  Assumptions made throughout this research 
follows those appeared in [13]. 
 
MULTIPLE FACILITY TYPE FCLAP 
 
Basic notations of this study are defined in this section. 
 103 
facility cannot be removed.  The procedure is repeated 
until either all types of facilities are located or all flow in 
the network has been captured.  Greedy algorithms for 
two different objectives, expected potential customers 
maximization (P1) and expected customers’ 
inconvenience minimization (P2) are described below 
respectively. 
 
Greedy Algorithm for Expected Potential Customers 
Maximization 
The steps of the algorithm are as follows: 
Step1. Let A =∅，B = { nodes not yet located } = N. 
Step2. Take one node at a time from set B 
sequentially in union with the nodes in set A and 
calculate the corresponding flow captured.  Find the 
node which results the most flow captured. 
Step3. Let jmax be the node which results the 
maximum flow captured..  Perform the following 
operation: B = B - j
max
、A = A + j
max
. 
Step4. Stop the algorithm if A =m, or no more flow 
can be captured.  Otherwise, go to Step 2. 
 
Greedy Algorithm for Expected Customers’ 
Inconvenience Minimization 
 
This algorithm calculates and compares the deviation 
distance for every node in the network if one facility is to 
be located.  The nodes are then ranked in ascending 
manner according to the deviation distances obtained.  
This sequence gives the priority for nodes to be located.  
The procedure repeats until all types of facilities have 
been located. 
Step1. Calculate the deviation distance for each 
node in the network if one facility is to be located (m=1). 
Step2. Sequence the nodes in ascending manner 
based on the deviation distances.  That is, the less 
deviation distance a node results, the higher priority it is 
given. 
Step3. Place facilities on nodes based on sequences 
determined in Step2 until all types of facilities have been 
located. 
 
EXAMPLES AND COMPUTATIONAL RESULTS 
 
The proposed algorithms were tested with examples 
adopted from the literature.  Mathematical model of 
FCLAP with multiple facility types is solved by the 
branch-and-bound based software, LINGO for Windows; 
for the greedy heuristics proposed, they were coded in 
Turbo C++.  All programs are implemented on personal 
computer with CPU Pentium III 400. 
Consider the example network with 7 nodes and 10 arcs 
in Figure 1.  The total number of path in this network is 
19.  Suppose there are 3 types of facility to be located, 
and only one facility for each type is allowed.  The 
information regarding flow and path are given in Table 1. 
 
Table 1.  Flow and length information of paths in the 
example network  
 
Path  
Starting 
node 
Ending 
node 
Length of 
path 
Flow on 
this path 
p1 1 2 4 20 
p2 1 5 7 10 
p3 1 6 6 40 
p4 1 3 2 30 
p5 2 1 4 20 
p6 2 4 7 25 
p7 3 4 4 30 
p8 3 6 4 10 
p9 3 7 5 10 
p10 3 5 5 10 
p11 6 4 6 20 
p12 5 3 5 30 
p13 4 3 4 10 
p14 5 6 3 20 
p15 6 1 6 20 
p16 7 5 4 30 
p17 7 2 8 25 
p18 5 1 7 20 
p19 4 6 6 25 
 
The proposed greedy heuristics and the optimal models 
developed for the FCLAP involving multiple facility 
types were tested with the example network.  
Computational results of the greedy and the optimal 
approach are given in Table 2.  The optimal decisions 
regarding the locations of facilities for both P1 and P2 are 
the same, indicating that these two objectives are 
coincident with each other.  Both greedy heuristics (for 
P1 and P2) perform quite well in terms of the solution 
quality, 96% of the optimal in P1; 91% of the optimal in 
P2.  Besides, the run times consumed in greedy 
heuristics are much less than that of the optimal. 
1
7
2
45
3
6
5 1
4
2
3
4 5 4
3 3
 
Figure 1.  Example network [4] 
Table 2.  Solution result comparisons of the optimal and 
greedy heuristic approaches 
 
 Optimal  Greedy heuristic 
 P1 P2  P1 P2 
Location 
Decision 
Nodes 
3,6,7 
Nodes 
3,6,7 
 Nodes 
3,1,6 
Nodes 
3,1,6 
Objective 
Value 
317.31 4125.00  304.15 4515.00 
Run Time 
(sec) 
5610.00 13.00  0.05 0.05 
 105 
計畫成果自評 
    本計畫三年研究成果尚屬豐碩，詳細之研究成果及內容已描述於本次完整報告內
文之第三到第六章。研究過程所衍生之成果，除已發表兩篇論文並或刊登於 EI 期刊中
（技術學刊 22 卷(2007 年)、23 卷(2008 年)），並有一篇英文論文正在撰寫中。因此本
計畫之實際執行情形與計畫書高度符合，已達成預期之目標，所衍生之研究成果亦具學
術或應用價值。 
本、韓國、新加坡、及台灣等各國學者發表工業工程及其相關領域之論文，
共計 315篇。這些子題包括： 
 
Global Manufacturing and Management 
Product Development and Design 
Supply Chain Management/Logistics Engineering 
Total Quality Management and Quality Engineering 
Production Planning and Control 
Decision Analysis/Decision Theory and Method  
Manufacturing Systems/ Manufacturing Theory and Methodology  
Service Engineering and Management/Service Operations Management 
System Modeling and Simulation 
Computer-Aided Design and Intelligent Manufacturing 
Facilities Planning, Location Design and Material Handing 
AI Applications in Industrial Engineering and Management 
Engineering Economy and Cost Management  
Applied Operations Research/Operations Research and Application 
Organization and Management 
Maintenance Engineering and Management 
Industrial Ergonomics/Human Factors and Safety 
Web-based Applications, E-Business and E-Commerce 
Engineering/Project Management  
Technology Management and Innovation 
Knowledge Management 
Customer/Supplier Relationship Management 
Ethics, Industrial Engineering Education and Training 
 
本次研討會內容安排與此次會議主題相關之工業工程與工程管理專題
演講與論文發表，再依不同論文主題，每天分多個時段，同時有數個平行
Session 進行發表。本人在會中發表一篇學術論文，標題為  “Heuristic 
Approach for the Multiple Facility Type Flow-Capturing Location Allocation 
Problem”，個人的論文被安排於第一天下午 16:00~ 17:30的場次發表，於發
表後其他學者亦表示對此研究的高度興趣，詢問本研究之相關理論推導及
在實務應用上之可行性與相關問題，個人並作完整回答，互動甚佳。 
與香港科技大學曾明哲教授互動及合影 
 
由於此次研討會乃由東北大學工商管理學院主辦，因此個人亦主動與
東北大學工商管理學院院長介紹本校之管理學院及工業工程系現況，希望
尋求繼去年東北大學「朱偉勇」教授至大葉短期訪問及講學後，再一次之
學術交流。 
這幾天當中，個人有非常強烈之感受，中國之高等教育發展迅速，而
且現階段之策略為積極與世界名校結盟、交流，相較於兩三年前，台灣愈
來愈不會成為中國高等教育發展之參考、質詢對象，如何把握最後尚未完
全熄滅之可能性，找出台灣大學發展之利基，讓中國仍有與台灣高等教育
進行交流之意願，恐怕是本校，甚至其他各校需要趕快思考及因應之課題
了。 
此次會議中的各項活動安排都可發現主辦單位頗為用心，對於遠道造
訪之學者給予多項貼心之服務。個人藉由此行提出以下建議作為國內主辦
相關會議之參考：  
會議主辦地點需審慎考量交通問題：大會的主辦地點，國際交通必須較為
方便，才能吸引來自世界各國之專家學者，若再加上主辦單位之用心，將
會是一個成功的國民外交，這也是將國家推向國際舞台之一個機會。整體
而言，個人於此行收穫豐富，且結識多位國際學者，希望能於未來建立更
長遠的交流與合作。 
 
 
本、韓國、新加坡、及台灣等各國學者發表工業工程及其相關領域之論文，
共計 315篇。這些子題包括： 
 
Global Manufacturing and Management 
Product Development and Design 
Supply Chain Management/Logistics Engineering 
Total Quality Management and Quality Engineering 
Production Planning and Control 
Decision Analysis/Decision Theory and Method  
Manufacturing Systems/ Manufacturing Theory and Methodology  
Service Engineering and Management/Service Operations Management 
System Modeling and Simulation 
Computer-Aided Design and Intelligent Manufacturing 
Facilities Planning, Location Design and Material Handing 
AI Applications in Industrial Engineering and Management 
Engineering Economy and Cost Management  
Applied Operations Research/Operations Research and Application 
Organization and Management 
Maintenance Engineering and Management 
Industrial Ergonomics/Human Factors and Safety 
Web-based Applications, E-Business and E-Commerce 
Engineering/Project Management  
Technology Management and Innovation 
Knowledge Management 
Customer/Supplier Relationship Management 
Ethics, Industrial Engineering Education and Training 
 
本次研討會內容安排與此次會議主題相關之工業工程與工程管理專題
演講與論文發表，再依不同論文主題，每天分多個時段，同時有數個平行
Session 進行發表。本人在會中發表一篇學術論文，標題為  “Heuristic 
Approach for the Multiple Facility Type Flow-Capturing Location Allocation 
Problem”，個人的論文被安排於第一天下午 16:00~ 17:30的場次發表，於發
表後其他學者亦表示對此研究的高度興趣，詢問本研究之相關理論推導及
在實務應用上之可行性與相關問題，個人並作完整回答，互動甚佳。 
