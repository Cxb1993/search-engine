anomalous event occurs and resets it when such an event dis-
appears for an appropriate period, to ensure temporal local-
ity. LA-TinyOS notifies the same task on neighboring nodes
that are within a specific number of hops to reduce the pe-
riod in advance to deal with spatial locality. The presented
design flexibly specifies the configurations of a locality-aware
task in a table-driven manner. TinyOS’s FIFO scheduler is
modified into a multi-level scheduler where a task is always
scheduled before normal tasks. Finally, LA-TinyOS pro-
vides a mechanism for a locality-aware task to execute its
self-adaptive functions when it enters and leaves its locality.
An anomalous event is commonly treated as a critical sit-
uation in a WSN application. Therefore, when a task enters
its locality, no energy is saved and all of the available pro-
cessor capacity is utilized to reduce the period. The alloca-
tion of processor utilization becomes complicated when more
than one task enters their localities. LA-TinyOS has an ef-
ficient bandwidth-allocation policy to provide soft real-time
scheduling for a workload of mixed periodic and aperiodic
tasks, and in-locality and normal tasks.
LA-TinyOS provides a more reliable and efficient frame-
work to develop locality-aware tasks than does TinyOS. As a
demonstration, LA-TinyOS takes only a few lines of code to
implement one locality event while TinyOS has more than
50 lines of code. Therefore, LA-TinyOS requires less flash
memory. However, both LA-TinyOS and TinyOS use simi-
lar amounts of RAM memory. Finally, a locality-aware ap-
plication was implemented using LA-TinyOS, and deployed
in the reading room of the public library at our campus.
The application monitors temperature, light and noise vol-
ume periodically and records noise violation events. A field
study demonstrates that this application smoothly exhibits
locality-aware features.
Many projects have been performed to construct mid-
dleware for WSN applications [4, 9, 6, 5]. However, none
has addressed the problem of providing self-adaptive locality
awareness for WSN applications. VigilNet [6] is an energy-
efficient surveillance system. It allows an administrator to
configure remotely the period of a monitoring task. The
configuration is performed manually and cannot adapt well
to dynamic situations, such as anomalous events. Instead,
LA-TinyOS automatically adjusts the periods of the tasks,
according to anomalous situations and available processor
utilization. Both Delicato et al. [4] and Liu et al. [9] pro-
posed an adaptive middleware to switch the network pro-
tocol dynamically to save energy. This adaption is based
on the current state of the system and the required service
level. If processor utilization is ignored, such an adaption
may result in system overload and performance degradation.
A similar concern also arises in relation to the system pro-
posed by Fok et al. [5] which uses a mobile agent to inject
code dynamically into WSN for event tracking. In contrast,
LA-TinyOS utilizes a feedback scheme to utilize the proces-
sor fully for periodic monitoring and to provide a bounded
response time for other tasks.
This paper is organized as follows. Section 2 describes
configuration elements to support both temporal and spa-
tial locality. Section 3 presents a brief overview of TinyOS.
Section 4 introduces LA-TinyOS. Section 5 describes the
bandwidth-allocation policy. Section 6 statically compares
LA-TinyOS and TinyOS in supporting locality-aware appli-
cations. Section 7 discusses the performance of LA-TinyOS
in a real WSN application, deployed in the public library
default 
period
reduced 
period
graceful 
period
locality
begins
locality
 ends
time
:  anomaly occurrence: sensor sampling
in-locality
Figure 1: The period of a task and its graceful length
at our campus. Finally, Section 8 concludes this paper and
discusses future work.
2. LOCALITY-AWARE CONFIGURATION
ELEMENTS
AWSN application consists of a set of periodic tasks to be
executed at regular intervals, called the period. A periodic
task first senses and checks whether the sensed data reveals
an anomaly. If no anomaly is detected, it returns along a
normal path. Otherwise, a special action is performed to
alert the occurrence of this anomaly. Each anomaly may
have its own set of temporal and spatial locality character-
istics, and therefore requires particular adjustments to be
made. A comprehensive list of configuration elements to
construct a locality-aware WSN application is provided.
Period: The period of a task determines how frequently it
is executed to monitor the environment. The period
of a task that detects an anomaly should be reduced
to improve observations of this anomaly.
Graceful Length: A graceful length defines a period of
time during which a task executes at its reduced pe-
riod and no anomaly is detected, as shown in Figure 1.
A task resets its period after its graceful length of time
expires.
Task Priority: A task in its locality matters more than a
task that is outside its locality. A WSN operating sys-
tem requires a priority-driven or multi-level scheduler
to favor in-locality tasks.
Alerting Area: When a node detects an anomaly, by spa-
tial locality, this anomaly is likely to be detected by
neighboring nodes shortly. An alerting area can be
configured as nodes within a specific number of broad-
casting hops.
Self-Adaption Functions: When a task enters its local-
ity, it may demand certain application-specific adap-
tion, in addition to execute at a reduced period. Such
an adaption can be operating its radio module at a
high-power mode to produce reliable wireless trans-
mission. When a task leaves its locality, all adaptions
must be restored to their default settings.
Table 1: The LA-TinyOS locality-configuration table
Event Timer ID Graceful Length Tasks Hops Adaption Functions
“A” 1 2000 dataTask 2 enterl() / leavel()
“B” 2 1000 getMax 1 Null / Null
ful length, associated tasks, the number of broadcasting
hops and self-adaptive functions. This table is called the
locality-configuration table. The LocalityControl interface
implements three commands;
registerEvent(string EventName);
configureLocality(event table entry T e,
uint 8 TimerID,
uint 32 GracefulLength,
uint 8 HopCount,
(void∗) FuncEnter,
(void∗) FuncLeave);
triggerEvent(string EventName);
where registerEvent registers a new entry in the locality-
configuration table, configureLocality specifies locality con-
figurations, and triggerEvent is called when an an anomalous
event is detected to enter its locality. LA-TinyOS provides a
new reg internal operator to associate a task with an event.
Figure 4 presents partial code of a locality-aware Oscillo-
scope in LA-TinyOS. It first registers an event named “A”
in the locality-configuration table (line 8). It then calls con-
figureLocality to specify locality configurations of this event
(line 9). The reg operator associates dataTask with this
event (line 11). The first row in Table 1 shows the locality
configurations of this event. When the sensed data exceeds
a specific value (0x03B0), an anomaly is detected and the
event “A” is triggered to enter its locality (line 14 to 15). By
Table 1, when “A” is detected, LA-TinyOS executes enterl
to enter its locality and executes leavel to leave its locality.
Both enterl and leavel are pointers to self-adaption functions
provided by this application.
4.2 Temporal and Spatial Locality
The TinyOS TimerM component maintains a list of soft-
ware timers, as shown in Table 2. Each software timer has
an ID, indicating whether it is a one-shot timer or a periodic
timer, its default period and the time left before it expires.
Whenever a timer interrupt fires, the interrupt handler of
HWClock reduces the value in the Time-to-Expired field of
each software timer and executes a corresponding handler
when it reaches zero. LA-TinyOS increases TimerM in steps
to include a new API,
setLocailityTimer(unit8 t TimerID,
unit32 t ReducedPeriod);
to change the period of the software timer. When an event
enters its locality, LA-TinyOS calculates its reduced period
and uses this API to update its period in the software timer
list. Its TimerID is obtained by looking up the locality-
configuration table. The default period will be saved in a
kernel data structure. When an event leaves its locality, set-
LocailityTimer is again applied to reset its period. Section 5
will explain how the calculation of a reduced period depends
on available processor utilization.
The third column in Table 1 records the graceful length of
each event. When an event enters its locality, LA-TinyOS
reduces its graceful length counter at each timer interrupt.
Whenever an anomaly is detected, this counter is reset to
its full value. When the counter reaches zero, the period of
its associated software timer in Table 2 is reset to its default
value, to indicate this event’s leaving its locality.
LA-TinyOS implements the spatial locality by broadcast-
ing alerting messages. Upon receiving an alerting message,
a node activates a corresponding anomalous event to enter
its locality. The alerting area is defined by the number of
broadcasting hops, which are also available in the locality-
configuration table.
4.3 Multiple-Level Scheduler
TinyOS provides a non-preemptive FIFO scheduler. Such
a scheduler fails to distinguish tasks that are associated with
an anomalous event from regular, non-urgent tasks. LA-
TinyOS improves its FIFO scheduler to a three-level sched-
uler without changing TinyOS non-preemptive scheduling.
Normal tasks are in the third-level FIFO queue and are
served only when the other queues have no tasks. When
an anomalous event is detected, its associated tasks regis-
tered in the locality-configuration table are queued in the
first-level and are scheduled to be executed next. Tasks as-
sociated with an event that is triggered to enter its locality
by an alerting message are queued in the second-level FIFO
queue. This three-level FIFO scheduler ensures that LA-
TinyOS performs tasks according to their importance.
5. SCHEDULABILITY ANALYSIS
Reducing the period of a periodic task increases the pro-
cessor utilization and consumes more energy. An anoma-
lous event is considered as a critical situation. Therefore,
LA-TinyOS is designed to utilize all of the available proces-
sor capacity when an anomaly is detected. Aperiodic tasks
are also associated with non-periodic activities. LA-TinyOS
is equipped with an efficient bandwidth-allocation policy to
provide a bounded response time for aperiodic tasks and
dynamically-adjusted periods for periodic tasks.
5.1 Task Model
We define each periodic task τi as (ei, pi), where pi is
its period set by its software timer and ei is its execution
time. The execution time ei includes the execution time of
the periodic task itself, associated interrupt handlers, and
issued anomaly-processing tasks. Take Oscilloscope in Fig-
ures 3 and 4 as an example. Its ei includes the execution
time of Timer.fired, ADC.dataReady, and dataTask. Because
these code is rather simple and easy to analyze, we can ob-
tain their execution time by traditional timing-analysis tools
such as [8] or a TinyOS instruction-level emulator such as
Avrora [10]. We use ui to denote the processor utilization of
τi, where ui = ei/pi. Let n be the number of periodic tasks
in the system. Let Up denote the total processor utilization
implementation{ 
command result_t StdControl.start(){ 
 call SensorControl.start(); 
 call Timer.start(TIMER_REPEAT, 1500); 
 … 
}
async event result_t ADC.dataReady(uint16_t data){ 
if (data > 0x03B0){ // an anomaly 
 struct LocalityMsg *send; 
 uint32_t new_period = LocalityAdapt(); 
call SetTimer.setLocalityTimer(1, new_period); 
      enterl(); // self-adaption function 
 // send spatial locality message 
      send = (struct LocalityMsg *)Msg.data; 
      send -> eid = 0; 
      send -> count = 2; 
      post SpatialLocality(); 
      HOT_0 = TRUE; 
 // start to monitor for a graceful length 
 call Timer3.start(TIMER_REPEAT, 1000);  
}
else  HOT_0 = FALSE; 
pack->data[packetReadingNumber] = data; 
post dataTask(); 
}
uint32_t LocalityAdapt(){ 
// caculate a new period based on the current  
// processor utilization and workload 
return new_period; 
}
task void SpatialLocality(){ 
call SendSpatial.send(TOS_BCAST_ADDR,  
sizeof(struct LocalityMsg), &Msg); 
}
event result_t Timer3.fired() {  // gracefully restore the system 
atomic{ 
    if (HOT_0 == FALSE){ 
     call SetTimer.setLocalityTimer(1, 1500);           
        leavel(); // self-adaption function 
   call Timer3.stop(); 
       } 
   } 
   return SUCCESS; 
}
event TOS_MsgPtr ReceiveSpatial.receive(TOS_MsgPtr m) { 
    struct LocalityMsg *pack = (struct LocalityMsg *)m->data;     
    atomic { 
     if (pack->eid == 0 && HOT_0 == FALSE){ 
          struct LocalityMsg *send; 
   uint32_t new_period = LocalityAdapt(); 
               call SetTimer.setLocalityTimer(1, new_period);     
               enterl();             
               HOT_0 = TRUE;                            
               send = (struct LocalityMsg *)Msg.data; 
               send -> eid = 0; 
               send -> count = count_0 - 1;                     
               if (count_0 - 1 > 0) 
                post SpatialLocality();  
         }                       
    } 
    return m; 
}
}
Figure 6: A locality-aware Oscilloscope in TinyOS
˃
ˈ˃
˄˃˃
˄ˈ˃
˅˃˃
˅ˈ˃
ˆ˃˃
ˆˈ˃
ˇ˃˃
˄ ˅ ˆ ˇ ˈ ˉ ˊ ˋ
́̈̀˵˸̅ʳ̂˹ʳ˿̂˶˴˿˼̇̌ˀ˴̊˴̅˸ʳ˸̉˸́̇̆
˧˼́̌ˢ˦
˟˔ˀ˧˼́̌ˢ˦
Figure 7: The lines of nesC code
while it takes TinyOS more than 50 lines of code. The dif-
ference in the amount of required code between TinyOS and
LA-TinyOS grows significantly larger when there are more
events. This result well demonstrates how much LA-TinyOS
reduces the effort of locality-aware programming.
Figures 8 and 9 compare the memory usage of LA-TinyOS
and TinyOS in executing the application shown in Figure 7.
Particularly, Figure 8 gives the usage of flash memory and
Figure 9 gives the usage of dynamic memory (RAM). The
flash memory stores data such as code segments and static
data. When there is only one event, LA-TinyOS consumes
580 more bytes of flash memory: 270 bytes are used by the
LocalityM component and 310 bytes are used by the multi-
level scheduler. The flash usage of TinyOS grows larger
when there are more events, due to its redundant code for
˄˄ˈ˃˃
˄˅˃˃˃
˄˅ˈ˃˃
˄ˆ˃˃˃
˄ˆˈ˃˃
˄ˇ˃˃˃
˄ˇˈ˃˃
˄ˈ˃˃˃
˄ˈˈ˃˃
˄˅ˆˇˈˉˊˋ
number of locality-aware events
TinyOS
LA-TinyOS
Figure 8: The usage of flash memory
locality awareness. In contrast, LA-TinyOS only slightly in-
creases its flash usage and uses less flash memory when there
are 3 events or more. On the other hand, RAM stores dy-
namic data such as runtime variables. Because both TinyOS
and LA-TinyOS make use of similar runtime variables to im-
plement locality-aware events, their RAM usage is almost
identical.
7. CASE STUDY: ENVIRONMENT MONI-
TORING IN PUBLIC LIBRARY
LA-TinyOS was used to implement a locality-aware WSN
application in the reading room of the public library at our
campus. The reading room has an area of about 45 square
feet. The application monitors environmental changes in
