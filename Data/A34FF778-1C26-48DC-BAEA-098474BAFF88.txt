- 2 - 
化樹建構的方法，尚未定論。於是許多近似演算法被提出來解決這些問題。 
螞蟻族群最佳化藉由設計人工螞蟻，模仿現實生活中的螞蟻覓食的行為特
性，來找尋組合問題的近似最佳解。本計畫提出用螞蟻族群最佳化演算法，來建
構使所有序列的共同子序列 (common subsequence) 儘可能長的導引樹 (guided 
tree)，再經由漸進式排比 (progressive alignment) 來完成所有序列的排列比較。
我們也設計了求解以距離為基礎的最小各對距離總和 (minisum) 演化樹建構的
螞蟻族群最佳化演算法。 
現階段的實驗結果顯示，在各對距離總和的評估標準下，所提演算法所求出
解的品質優於被廣泛使用的工具軟體 (如 Clustal W) 或演算法 (如禁忌搜尋或
UPGMA)。 
關鍵詞: 多重序列排比、導引樹、漸進式排比、螞蟻族群最佳化、最長共同子序
列、演化樹、最小總和演化樹、禁忌搜尋。 
 
1. Introduction 
Multiple sequence alignment and evolutionary tree construction construction are 
two of the most important problems in computational biology. Multiple sequence 
alignment is an essential tool for many biological sequence analysis problems. It is 
wildly used in the computational biology community. Multiple sequence alignment 
has been proved to be NP-hard in the computational sense. How to achieve a most 
significant approach for multiple sequence alignment is still open in the biological 
sense. Therefore many approximation algorithms for this problem have been proposed 
to obtain the sub-optimal solution. One of the most popular approaches is the 
tree-alignment which adopted a guide tree to determine the order of the sequences to 
be aligned iteratively. Moreover, the criterion of the sum of the distances of all pairs 
(sum of pairs, in short) is applied as the evaluation basis for multiple sequence 
alignment.  
By designing artificial ants which simulate the foraging behavior of ant colonies, 
Ant Colony Optimization (ACO) can search for sub-optimal solutions for the problem 
considered. We devise an ACO algorithm to construct a good guide tree based upon 
which the longest common subsequence of all input sequences can be found as long 
as possible. Then the progressive alignment is conducted by using this guide tree to 
obtain the alignment of all input sequences. The preliminary experimental results 
indicate that the solution quality of the proposed approach is better than that of Clustal 
W, a commonly used tool by biologists. 
Evolutionary tree construction leads to the similar problem that the solution 
space increases exponentially with the number of the included taxa. The NP-hardness 
of the phylogeny inference drives the researchers to use clustering algorithms or 
heuristic search strategies to construct near optimal solutions in a reasonable time. In 
- 4 - 
The local pheromone updating rule is defined as follows: 
( ) 01 ϕττϕτ +−= ijij               (3) 
where τ0 is the initial value of pheromone and φ is the decay coefficient.  
The whole ACO algorithm is called ACOtree shown in the following: 
ACOtree  
Input: S= {S1, S2, ... , Sn} and the corresponding graph G = (V, E)，V = {1, 2, ... , n} 
且 E = {(i, j) | i, j∈V}  
Output: a guided tree based upon the lengths of pair wise longest common 
subsequences 
1.  // Initiation of ants, pheromone trails and connectivities 
1.1  Initial the ants’ local memory; 
1.2  Let τij = 1 and compute connectivity ηij for each pair (i, j), i, j∈V; 
2.  // Initiation of a rooted binary tree 
2.1  Create leaf node ti (subtree Ti) for i∈V and label it as Si  ; 
2.2  solution = ∅ ; 
3.  while (termination criterion not satisfied) do   
3.1   genbest = ∅ ; 
3.2   for (each ant a in the colony) do  
3.2.1   T = { T1, T2, ... , Tn }; 
3.2.2   for (k = 1 to n-1) do 
3.2.2.1    Select one edge (i, j) according to (1); 
     // Let the subtree contain i (j) be Ti (Tj); 
3.2.2.2  Create a new internal node tn+k to be the parent of ti and tj;  
3.2.2.3  Let the new subteee rooted at tn+k be Tn+k ; 
3.2.2.4    Label tn+k as the longest subsequence of lcs(ti, tj); 
3.2.2.5  Perform local pheromone updates on all (i, j)’s, (i, j)∈Tn+k 
according to (3); 
3.2.2.5    T = T − {Ti, Tj} U {Tn+k} 
endfor    // end of an iteration; a tree is found 
3.2.3   if (len(t2n-1)>len(genbest)) then 
     genbest = t2n-1 ; Q+ = len(genbest) ; 
     if (Q+>len(solution)) then solution = genbest; 
   endif  // update generation-best solution 
3.2.4   reset ant a’s local memory ;   // including feasa 
endfor   // end of a generation 
3.3   Perform global pheromone update according to (2); 
endwhile 
 
Based upon the order of the internal nodes in the guided tree, we use progressive 
alignment to align the sequences considered.  
 
- 6 - 
favorite of the chosen node (not in the partial tree yet) to the selected nodes (already 
in the partial tree), the higher pheromone trails the favorite node. Therefore we keep 
two independent pheromone trails corresponding to there two decisions respectively 
on the edges. 
For the first decision, the ant u who is on node h after k steps would choose to 
move to node i according to the probability: 
⎪⎩
⎪⎨
⎧
=uhip
                otherwise0
                   and  if
][ 
                  }{max    arg  and   and  if1         
0
0
u
k
Tk
hihi
hihi
hihi
u
k
Tiqq
iTiqq
u
k
∉>×
×
×=∉≤
∑
∉
β
β
β
ητ
ητ
ητ
(4) 
where ukT  is the partially constructed subtree by ant u after k steps, hiτ  is the 
density of the pheromone trails whose value is updated by the pheromone updatig 
rules described in the following and hiη  is the heuristic function defined as the 
inverse of the distance from h to i, i.e. 1)( −hid . 
For decision 2, the ant u who has moved to node i would select node j in Tk 
based upon which to create a new internal node by the probability: 
⎪⎩
⎪⎨
⎧
=′uijp
                otherwise0
                   and  if
][ 
                  }{max    arg  and   and  if1         
0
0
u
k
Tk
ijij
ijij
ijij
u
k
Tjqq
jTjqq
u
k
∈>×′
×′
×′=∈≤
∑
∉
β
β
β
ητ
ητ
ητ
(5) 
where ijτ ′  is the density of the pheromone trails for decision 2 which is different 
from hiτ  mentioned above. These two probability functions indicates that the ants 
prefer to move the nodes with shorter distance from where they are and with higher 
density of pheromone trails. 
The global pheromone updates for both of the two decisions are performed after 
each iteration by the following rule: 
hihihi τρτρτ Δ+−= )1(            (6) 
and 
⎪⎩
⎪⎨
⎧ ∈=Δ +
otherwise0
),( if Sih
C
n
hiτ  
where ρ is the evaporation rate, 0≤ρ≤1, S+ is the path in decision 1 (or the edges in 
decision 2) of the iteration best solution obtained by the ants in the current iteration 
- 8 - 
numerical results obtained by applying the three approaches and the exact algorithm 
are averaged and tabulated in Table 2. 
Table 2. Solution values of approximate and exact algorithms for small problem 
instances 
Minisum Cost CPU Time (sec.) n 
UPGMA TS ACO OPT UPGMA TS ACO OPT 
8 5353 5055 5055 5055 0.000 0.030 0.240 0.230 
9 8325 7827 7726 7726 0.000 0.050 0.330 3.790 
10 8510 7918 7918 7918 0.000 0.080 0.730 32.671 
11 12535 12242 12157 12157 0.000 0.140 0.510 1012.569 
12 12229 11592 11587 11587 0.000 0.200 0.570 1088.795 
13 18896 16385 16385 16385 0.000 0.500 0.510 1434.196 
The results listed in Table 2 clearly evince that TS and ACO can almost obtain 
optimal solutions for small problem instances. The time needed by TS and ACO is 
also reasonable as compared to that by OPT. Though UPGMA is a popular 
distance-based heuristic for evolutionary tree construction, it does not produce quality 
solutions under the minisum criterion.  
Experiment 2 
For large testing problem instances, the numbers of taxa n was set to be 50, 70, 
90, 100, 150 or 200. The results of solution values and the CPU time needed are 
summarized in Table 3.  
Table 3. Solution values and CPU time results of approximate heuristics for large 
problem instances 
Minisum Cost Minisum Time (sec.) n 
UPGMA TS ACO UPGMA TS ACO 
50 350400 312406 306305 0.000 81.639 15.770 
70 685764 598436 606879 0.000 467.651 48.020 
90 1210028 1090164 1087937 0.010 1488.229 197.027 
100 1449192 1361671 1323136 0.010 1961.780 161.142 
150 3401511 3138998 3087220 0.020 16242.000 840.372 
200 6170627 5737673 5622874 0.040 57763.838 1323.533 
In this experiment, ACO outperforms UPGMA and TS to deliver quality 
solutions for constructing the minisum evolutionary tree. Though the time needed by 
ACO is longer than UPGMA, it is still acceptable. For a particular problem instance, 
say n = 200, ACO takes about 22 minutes to find a much better tree than that by using 
UPGMA under the minisum criterion. 
4. Concluding Remarks 
We have proposed and implemented ACO algorithms for multiple sequence 
alignment and evolutionary tree construction problems respectively. The preliminary 
