 2
擾通道，使其他的節點偵測到通道忙碌，以取得
無線媒介使用權的相關機制[10-14]被提出來保
障即時資料流的服務品質(QoS)。無論如何，以上
所提的機制不是存在低優先權資料流始終無法
取得服務的問題，就是需要有難以在 Ad-Hoc 網
路上實現的時脈同步設計。有鑒於以上的缺點，
本計劃所提出的具有動態優先權調整的以雜訊
為基礎的媒介存取控制機制(JMAC)是先將無線
網路上的多媒體資料流分成兩種以上的優先
權，讓所有等級的資料流一開始就使用我們所提
的機制競爭無線媒介使用權；再者，為了防止低
優先權資料流的 Starvation，特別設計在發送雜訊
(Jamming Noise)之後夾帶優先權的訊息，使得移
動結點可以動態調整競爭媒介的優先權。如此一
來，我們所發展的機制能夠根據資料流的優先權
給予各種 QoS 的保證，特別是在網路擁塞時。 
 
三、JMAC 機制 
 
我們所提出的 JMAC 機制考慮 M 種不同的
資料類別；假使 m1 小於 m2，則資料流 m1 的優
先權低於 m2 的。當網路上的移動結點欲傳送資
料時，先等傳輸媒介閒置一段 AIFS 時間之後，
發出長度不等的 Jamming Noise 來干擾媒介，基
本上是優先權越高者所發出的 Jamming Noise 越
長，越有可能搶得媒介使用權。以下是一個移動
結點 i 在本機制中所使用的相關參數。 
․ mi: 移動結點 i 的資料類別。 
․ Li: 移動結點 i 的局部優先權。 
․ Ci: 移動結點 i 所經歷的失敗競爭回
合數。 
․ Lcfi: 移動結點 i 可以發出的 Jamming 
Noise 長度。 
․ S: 各個節點的 Jamming Noise 長度
之間的差異調整因數。 
․ G: 總體優先權，其值為最新的競爭
優勝者的局部優先權。 
․ Rlimit: 一個訊框最多可參與的競爭回
合數。 
圖 3-1 所示為 JMAC 演算法的 pseudo- code。
在每一競爭回合中，只有移動結點 i 的局部優先
權(Li)大於或等於網路的總體優先權(G)才可以加
入競爭。在發出長度為 Lcfi 的 Jamming Noise 後，
若偵測到媒介為閒置狀態，表示自己所發出的
Jamming Noise 長度最長，即贏得此一回合的競
爭。接著傳送帶有優先權訊息的廣播訊框讓其他
的節點更新所記錄的總體優先權值，然後傳送資
料訊框。除了發出最長的 Jamming Noise 以贏得
媒介使用權，JMAC 演算法還包括了以下所敘述
的 collision avoidance, deadlock prevention, 和
starvation prevention 三個處理程序。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
圖 3-1 JMAC 演算法 
1. Collision avoidance: 當兩個或兩個以上
的節點偵測得知自己所發出的 Jamming 
Noise 最長時，碰撞便發生了。在這種情
況下，在下一競爭回合的 Jamming Noise
長度計算公式中的亂數範圍會加倍。 
2. Deadlock prevention: 當網路上一個擁有
最高局部優先權的節點完成了所有的資
料傳輸，其他的節點都無法進入下一回合
的競爭，Deadlock 就發生了。這種情形就
是發生在媒介閒置一段 AIFS 時間之後，
仍然為閒置的狀態。此時，結點 i 會自動
將所記錄的總體優先權還原成初始值。 
3. Starvation prevention: 當網路上有許多的
For node i do 
{ 
//initial values associated with a node 
Set Li = mi, G = mi, and Ci = 0; 
If iC Rlimit≤  
If iL G≥  
Compute 
Lcfi = (Li – G) S + Random (0, S-1) + Ci; 
Issue the jamming noise for Lcfi; 
If no jamming noise can be sensed after Lcfi 
         // node i is the winner 
Broadcast the local priority; 
Transmit the data frame;  
If collision is detected 
   //collision avoidance phase 
   Ci++; 
Recompute 
Lcfi = (Li – G) S 
+Random (0, 2 1iC S× − ) + Ci; 
Else 
Receive the local priority of the winner; 
// to update the global priority 
Ci++; 
Else // Li is smaller than G  
If the medium is still idle after AIFS 
// deadlock prevention phase 
G = mi; 
Else // starvation prevention phase 
Receive the local priority of the winner; 
If a data frame is waiting 
Li++; // increase my local priority 
 
Else // iC Rlimit>  
Drop the frame; 
} 
