參考文獻 
ㄧ、已發表論文 
[1] Hsin-Hsiung Huang, Hui-Yu Huang, De-Jing Huang and Tsai-Ming Hsieh*, “An Efficient 
Rectilinear Steiner Tree Algorithm with Obstacles,” Proceedings of the 5th WSEAS International on 
Circuits, Systems, Electronics, Control and Signal , pp. 54-59, Dallas, Texas, U.S.A., 2006. (EI) 
[2] Hsin-Hsiung Huang, De-Jing Huang and Tsai-Ming Hsieh*, “Rectilinear Steiner Tree Construction 
with Obstacles,” in 2006 International Workshop on Computer Architecture, VLSI, and Embedded 
Systems, pp. 83-86, 2006. 
[3] Hsin-Hsiung Huang, Hui-Yu Huang, De-Jing Huang and Tsai-Ming Hsieh*, “Efficient 
Obstacle-Avoiding Rectilinear Steiner Tree Construction Algorithms,” WSEAS Transactions on 
Circuits and Systems, pp. 1775-1782, 2006. (EI)  
[4] Hsin-Hsiung Huang, Yu-Cheng Lin, Hui-Yu Huang, and Tsai-Ming Hsieh*, “Partition-based 
Routing Tree Algorithm with Obstacles,” accepted by IEEE International Symposium on Integrated 
Circuits, 2007. (EI) 
 
二、學生畢業論文 
學生姓名：黃惠瑜 
中文論文題目：效能導向多層繞線系統 
英文論文題目：Performance-Driven Routing Tree Construction with Obstacles in Multilayer Systems 
 
三、與本論文實驗結果相比較之相關論文 
[5] Z. Feng, Y. Hu, T. Jing, X. Hong, X. Hu and G. Yan, “An O(n log n) algorithm for 
obstacle-avoiding routing tree construction in the λ-geometry plane,” in Proc. of  ACM/IEEE 
International Symposium on Physical Design, pp. 48-55, 2005. 
[6] Y. Shi, T. Jing, L. He and Z. Feng, “CDCTree: novel obstacles-avoiding routing tree construction 
based on current driven model”, in Proc. of IEEE/ACM Asia and South Pacific Design Automation 
Conference, pp. 630-635, 2006. 
 
    本計劃的部份結果發表在[1][2][3]，最完整實驗結果發表在[4]，詳如後所附。
chip
D C B A
C4 C3 C 2 C1
chip
AB
D
C 1C 2
C 3 C4
l=1
l=2
B A
DC
2 0 < den(B) < 3 0
2 0 < den(B) < 3 0 2 0 < den(B) < 3 0
2 0 < d en(B)< 3 0
B A
DC
 den(D) = 2 0
 den(B) = 2 0  den(A) = 1 5 
 den(C) = 4 5
AB
D
C1
C3 C4
C2
 num (A)  <  1 5 0  num (B)  <  1 5 0 
 num (D)  <  1 5 0  num (C)  <  1 5 0 
 num (A)  >  1 5 0  num (B)  >  1 5 0 
 num (D)  >  1 5 0  num (C)  >  1 5 0 
between the total wirelength and runtime. The importance of 
analyzing chip distribution and balances the impact on the total 
wirelength and runtime is shown in Fig.1. Assume there are ten pins 
and two obstacles in a chip of Fig. 1(a). If we only apply the 
spanning-graph method, it takes t1 constructs the tree which the total 
wirelength is l1. If only the sequential method is used, it takes t2 to 
construct the routing tree with length l2. Generally speaking, the 
relationships of two kind of routing algorithm are (t1>t2) and (l1<l2). 
To simplify, the chip is divided into a set of k (=4) sub-regions 
according to the density distribution and one of the two proposed 
methods is applied to the regions after analyzing the distribution, see 
Fig. 1(b). We assume the hybrid method takes t3 to construct tree 
with l3 length. Relationships ( 2 3 1  t t t< < and 1 3 2  l l l< < ) are observed. 
From the above discussion, we know that the density distribution 
plays an important role during the routing tree construction. By 
observation, it motivates us to study the hybrid method which 
balances the total wirelength and runtime.  
III.  PRELIMINARY   
In this section, we discuss the density function to evaluate the 
density distribution of a region, the partition-region technique and 
the problem solved in the paper. 
A.  Two Density Functions 
To balance the wirelength and runtime, we propose two density 
functions to evaluate the density distribution. By the two density 
functions, the terminals of each region are automatically determined 
to route by using the proper algorithms. It means that the effective 
algorithm and the efficient algorithm are used for the space and the 
dense regions, respectively. Two density functions are described as 
follows. The first function which considers the number of pins and 
obstacles at region i is defined as follows. 
 and  are at region 
( ) 4  
i i
i i
n m i
num i n m= + ×∑        (1) 
where ni and mi are the number of pins and obstacles at region i. 
Besides, the number threshold (nt) is a user defined number. If the 
num(i) is less than nt, we treat the region i  as the “Thinness” which 
is used in Fig. 8. If The num(i) is larger than nt, we need the second 
function to determine if the region i should be divided again. The 
second function, which considers the pins and the obstacles to 
evaluate the density of region i, is defined as follows.  
 
( ) 100 ( 4 ) /( 4 )i iden i n m n m= × + × +          (2)  
where n (ni) and m (mi) are the number of the pins and the obstacles 
of chip (sub-region i), respectively. Besides, the density threshold (dt) 
is a user defined number. If the den(i) is less than dt, the region is 
labeling as balance. The region i is defined as unbalance if the den(i) 
is larger than dt. If den(i)=100, it means all pins and obstacles is 
located at sub-region i. Obviously, the density distribution is 
unbalance. If den(i)=25, it means that there are 1/4 total pins and the 
obstacles located at region i. With the tolerance, we define the den(i) 
is at the range from 25±5 (e.i. 20 to 30). If the den(i) value of region 
i is from 20 to 30, we define the region is as balance. When the den(i) 
value of region i is over 30 (or less than20), we treat the regions is as 
unbalance. According the density functions, the terminals of each 
sub-region will be routed by the proper routing algorithm. We 
directly use the effective routing algorithm to route the region i if the 
num(i) is less than the number threshold (nt). If the num(i) is large 
than the nt and the region is balance, we use the efficient routing 
algorithm for region i. While the num(i) is large than the nt and the 
region is unbalanced, the chip is divided into four sub-regions 
iteratively. Take Fig. 3 as example, if the density of region i, den(i) , 
is less than density threshold (dt), we name the four sub-regions are 
balance (Fig. 2(a)) and the chip will not be divided anymore. If the 
num(i) is larger nt and the den(i) is over dt, the chip will be divided 
into four sub-regions, see Fig. 2(b) and (c).  
 
 
 
 
 
 
 
  (a)                   (b)                  (c) 
Fig. 2. (a) Balance, (b) unbalance and (c) divisions for dense region C. 
B.  Partition-Region Technique  
The pin distribution is not always equally, and the pins may be 
located at the small area for the worst case. Therefore, the pins 
should be partition according the numbers of pins instead of the area 
of each sub-region. To balance the runtime and the routing quality, 
we should apply the effective algorithm for the dense region and the 
efficient method for the spare region, respectively.     
The chip is divided into four sub-regions by the chip center. To 
speedup the runtime of the proposed method, we limit the number of 
pins at each sub-region (i.e. the user defined density threshold) [17]. 
If the density of a certain region is over the density threshold, the 
region is divided into four sub-regions again. By iteratively 
partitioning the chip into a set of sub-region, the proper method is 
applied to the different sub-region by the density (Fig. 3(a)). To 
deserve to mention, the iterative improvement approach, which is 
based on the irregular-size grid, can be easily maintain by the 
Quad-tree data structure (Fig. 3(b)). The value of k denotes the level 
of the Quad-tree, and the higher value of k will take the less runtime 
due to the smaller number of the pins and obstacles. We also observe 
that the large number of the leaf (i.e. the more sub-regions) will 
degenerate the total wirelength. Therefore, to balance the total 
wirelength and runtime, we only apply the more effect method for 
the densest region and use the more efficient method for the spare 
region (chip excludes the densest region), respectively.   
  
 
 
 
 
 
 
 
(a)                     (b) 
Fig. 3. (a) Subregions of a chip and (b) the corresponding quad-tree (l=2). 
C.  Problem Definition 
Let P = {pi |i=1,2,..,n} to be a set of the n pins and m obstacles 
B = {bi|i=1,2,. . .,m} with corner points C = { ci|i=1,2, . ..,4m}. For the 
pins, a graph G = (V, E) is constructed as an intermediate solution, 
where V = P C∪ and E = {eij | vi, vj ∈V, i ≠ j}. For each vi∈V, it 
has coordinate (xi, yi) and the distance between vi and vj is estimated 
as | xi-xj | + | yi-yj |. The objective is to construct routing tree which 
simultaneously minimizes the total wire-length and the runtime. 
IV.  PARTITION-BASED ROUTING TREE ALGORITHM  
In this section, we focus on the partition-based routing tree 
algorithm, which balances the total wirelength and runtime. We first 
discuss the effective algorithm which exhaustively searches the 
spanning graph to construct the routing tree. Then an efficient 
algorithm is proposed to construct the routing tree by the two-step 
sequential method. Finally, we introduce the partition-based 
approach which the dense and spare regions are applied by the 
effective and efficient methods by the two density functions.   
A. Spanning Graph-based Routing Tree Construction (SRT) 
The method constructs the spanning graph by exhaustive 
searching the potential paths as much as possible. Unlike the 
previous method [14], SRT records all two-pin edges outside 
obstacles to minimize the number of bending. To simplify the edge 
connections, only the nodes located at the searching regions is 
regarded as the potential candidates. 
A, C, D
B F R T
 S R T
AB
C D
An example is used to illustrate in Fig. 9. To simplify, we only 
let l=1 and assume the density threshold (dt) and number threshold 
(nt) are 30 and 8, respectively. First, the number of pin is over the 
number threshold (nt = 8), and the density of region B is over 30 (i.e. 
it is unbalance and see Fig. 3), the chip is first divided into four 
sub-regions by the center (Fig. 9(a). Then two density functions are 
used to check if we should divide the sub-regions. Because four 
regions are balance, the chip will not be divided anymore. In Region 
B, den(B) is larger than dt(=30), therefore the terminals are routed by 
FRT. Besides, the other regions are routed by SRT (Fig. 9(b) and (c)). 
Finally, Fig. 9 (d) is the result after merging two sub-trees into a 
routing tree. 
 
 
 
 
  (a)              (b)             (c)            (d) 
Fig. 9. Example of HRT with l=1. 
V.  EXPERIMENTAL RESULTS 
The experiments were implemented by using C++ language in 
an AMD 1.81G machine with 1GB memory. The objective is to 
obtain a RSMT with minimal wire-length and runtime among the 
obstacles. We compare the proposed algorithms with the academic 
routing tree algorithms [15][17] by using the same benchmarks. To 
minimize the additional wirlength, we only implement the routing 
tree with l=1according to the chip center. We observe that SRT will 
be degenerated for the case with over 100 pins and 10 obstacles. 
Therefore, two measurements are set by dt = 25±5 (20 ~ 30) and nt = 
150, respectively.  
We compare the total wirelength among the obstacles. The 
results are summarized in TABLE I. From the table, the total 
wrielength of HRT is shorter than FRT and the runtime of HRT is 
shorter than SRT. In other word, HRT balances the impact on total 
wirelength and runtime. Compared to SRT, HRT achieves the 5.2% 
(= (1-1.052)/1) additional total wirelength and 99.2% (= (1-0.08)/1) 
improvement on runtime.  
 
VI.  CONCLUSION  
This paper proposes a hybrid method which introduces the 
concept of analyzing the density distribution of chip followed by 
applying SRT or FRT for the spare and dense regions, respectively. 
It shows experimental that hybrid algorithm, HRT, can obtain the 
good results in both the routing quality and runtime. Our future work 
will focus on the timing-driven routing tree by the partition-region.  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Total is the sum of RC1 to RC11and (*) is normalized to SRT.     
REFERENCES 
[1]J. Ganley and J.P. Cohoon, “Routing a multi-terminal critical net: Steiner tree 
construction in the presence of obstacles,” in Proc. of IEEE International Symposium on 
Circuits and Systems, Vol. 1, pp. 113-116, 1994.  
[2]C. Y. Lee, “An algorithm for connection and its application,” IRE Transaction on 
Electronic Computer, pp. 346-365, 1961. 
[3]M. Borah, R.M. Owens and M.J. Irwin, “ An edge-based heuristic for Steiner routing,” 
IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, Vol. 
13, pp. 1563-1568, 1994. 
[4]J. Soukup, “Fast maze router,” in Proc. of ACM/IEEE Design Automation Conference, 
pp.100-102, 1978. 
[5]A. B. Kahng and G. Robins, “A new class of iterative Steiner tree heuristics with good 
performance,” IEEE Transactions on Computer-Aided Design of Integrated Circuits and 
Systems, Vol. 11, pp. 893-902, 1992. 
[6]H. Zhou, “Efficient Steiner tree construction based on spanning graphs,” IEEE 
Transactions on Computer-Aided Design of Integrated Circuits and Systems, Vol. 24, 
No. 7, pp. 704-710, 2005. 
[7]E. Bozorgzadeh, R. Kastner,and M. Sarrafzadeh, “Creating and exploiting flexibility in 
Steiner trees,” IEEE Transactions on Computer-Aided Design of Integrated Circuits and 
Systems, pp. 605-615, 2003. 
[8]H. Chen, C. Qiao, F. Zhou, and C.K. Cheng, “Refined single trunk tree: a rectilinear 
Steiner tree generator for interconnect prediction,” in Proc. of ACM International 
Workshop on System-Level Interconnect Prediction, pp. 85-89, 2002. 
[9]C. Chu and Y. C. Wong, “Fast and accurate rectilinear Steiner minimal tree algorithm 
for VLSI design,” in Proc. ACM/IEEE International Symposium on Physical Design, pp. 
28-35, 2005. 
[10]A.B. Kahng, I. Mandoiu, and A. Zelikovsky, “Highly scalable algorithms for rectilinear 
and octilinear Steiner trees,” in Proc. of ACM/IEEE Asia and South Pacific Design 
Automation Conference, pp. 827-833, 2003. 
[11]J. Cong and X. Yuan, “Routing tree construction under fixed buffer locations,” in Proc. 
of ACM/IEEE Design Automation Conference, pp. 379-385, 2000. 
[12]Y. Yang, Q. Zhu, T. Jing, and X.L Hong, “Rectilinear Steiner minimal tree among 
obstacles,” in Proc. of International Conference on ASIC, pp. 348-351, 2003. 
[13]Y. Hu, T. Jing, X. Hong, Z. Feng, X. Hu and G. Yan, “An-OARSMan: obstacle-avoiding 
routing tree construction with good length performance, ” in Proc. of IEEE/ACM Asia 
and South Pacific Design Automation Conference, pp. 7-12, 2005. 
[14]Z. Shen, C.N. Chu and Y.M. Li, “Efficient rectilinear Steiner tree construction with 
rectilinear blockages,” in Proc. of IEEE International Conference on Computer Design, 
pp. 38-44, 2005. 
[15]Z. Feng, Y. Hu, T. Jing, X. Hong, X. Hu and G. Yan, “An O(n log n) algorithm for 
obstacle-avoiding routing tree construction in the λ-geometry plane,” in Proc. of  
ACM/IEEE International Symposium on Physical Design, pp. 48-55, 2005. 
[16]J. Xu, X. Hong, T. Jing and Y. Yang, “Obstacle-avoiding rectilinear minimal-delay 
Steiner tree construction toward IP-block-based SOC design,” IEEE Transactions on 
Computer-Aided Design of Integrated Circuits and Systems, Vol. 53, No. 4, pp. 309-313, 
2006. 
[17]Y. Shi, T. Jing, L. He and Z. Feng, “CDCTree: novel obstacles-avoiding routing tree 
construction based on current driven model”, in Proc. of IEEE/ACM Asia and South 
Pacific Design Automation Conference, pp. 630-635, 2006. 
[18]H. H. Huang, H.Y. Huang, D. J. Huang and T. M. Hsieh, “Efficient obstacle-avoiding 
rectilinear Steiner tree construction algorithms,” WSEAS Transactions on Circuits and 
Systems, pp. 1775-1782, 2006. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
(**) denotes runtime obtaining from the different machine.  
[15]    [17]   SRT    FRT   HRT Case PIN    OB 
WL Time   WL Time   WL Time    WL Time    WL Time
RC1 10 10 30410 0 26970 0.49 26120 1< 28790 1< 26120 1<
RC2 30 10 45640 0 41700 1.03 43130 1< 46110 1< 43130 1<
RC3 50 10 58570 0 62380 8.79 55980 1< 63540 1< 55980 1<
RC4 70 10 63340 0 66560  67.6 60400 1< 68580 1< 60400 1<
RC5 100 10 83150 0 80010 595.1 76080 1< 84670 1< 76080 1<
RC6 100 500 149750 0.06 NA NA 82406 107 87411 1< 87411 1<
RC7 200 500 181470 0.06 NA NA 113859 153 119336 1< 119336 1<
RC8 200 800 202741 0.10 NA NA 118686 336 127365 1< 127356 1<
RC9 200 1000 214850 0.13 NA NA 116361 497 125502 1< 125502 1<
RC10 500 100 198010 0.03 NA NA 171280 44 182950 2 182950 2
RC11 1000 100 250570 0.04 NA NA 237725 323 255283 10 255283 10
RC12 1000 10000 1723990 2.82 NA NA NA NA  814307 14 814307 15
Total   -   -  1478501  3.24 NA NA 1102027 1460 1189537 12 1166278 12
 Norm*   1.34 **   1 1 1.079 0.008 1.052 0.008
TABLE I 
 COMPARISION WITH [15] and [17]
推廣及運用的價值
隨著製程技術進步到奈米時代，繞線的優劣深深影響到晶片的
時序的效能和繞線資源的分配。因而本計畫提出一個新的混合型演
算法來針對繞線總長度和執行時間等目標進行最佳化，在兼顧繞線
總長度和執行時間下，達到最佳繞線結果。 
※ 1.每項研發成果請填寫一式二份，一份隨成果報告送繳本會，一份送 貴單位研發成
果推廣單位（如技術移轉中心）。 
※ 2.本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。 
※ 3.本表若不敷使用，請自行影印使用。 
    我們在 2006年 9月 19日收到 CSECS 2006 大會通知，我們的論文 
   “ An Efficient Rectilinear Steiner Tree Algorithm with Obstacles” 
被大會接受。 
 
   我 10月 26日搭乘長榮航空 BR0028班機出發，中途轉 American Airlines 班
機赴 Dallas，於 11月 4日返國。 
 
   此會議是 2006年 11月 1日至 11月 3日在美國 Dallas, Texas舉行。 
   大會開始，有 3場 Plenary Lectures 
1. Data Mining and Furry Neural Networks 
Professor Arun Kulkarni 
The University of Texas at Tyler, USA 
2. Computational Trust Models and their Issues 
Assc. Professor Keon Myung Lee 
School of Electrical and Computer Engineering 
Chungbuk National University, Korea 
3. Secure Power Systems Through Autonomous Microgrids 
Assc. Professor Joydeep Mitra 
The Klipsch School of Electrical & Computer Engineering 
New Mexico State University, USA 
的研究，能與 Nanoelectronics的研究結合，做更進一步的研究。 
 
    此次會議，與其他 conference比較可能不是集中在 circuits and systems但更
具多樣性，使參與者能了解其他領域的研究，可進一步思考跨領域的研究。 
    此次會議，我們攜回大會 Proceedings及其 CD-ROM，是今後研究之重要參
考資料。 
 
 
 
 
 
 
 
 
 
 
 
 
 
b1
b2
b3
b4
b5
b 1 
b 4
d 12
p 1
p 2
p 3
R 2
R 1
R 3
R 4
d 13
b 1
b 4
p1
p2
p3
R 5R 4R 3
R 6
R 7R 8R 1
R 2
b1
b2
b3
b4
b5
obstacles is presented. The proposed method can connect 
the edge with the idea of global view of pins and the 
obstacle boundaries, and its time complexity is O ((8m + 
2n) ×s log s), where m denotes the numbers of obstacles, 
n denotes the numbers of the given pins and s denotes the 
sum of the numbers of given pins plus the corner points 
of the obstacles. (2) An efficient heuristic method, which 
first constructs the MST and then removes the 
intersection inside obstacles iteratively, is presented. 
Time complexity is only O (n log n), where n denotes the 
number of pins. (3) Compared to the results without 
obstacles, the effective methods and the efficient 
approach can obtain extra total wirelength by 1.26% and 
6.4%, respectively. (4) Not only the shorter total 
wirelength but also the less via count can obtained the 
two proposed methods.  
We organize the paper as follows. Section 2 
describes the motivation, terminology and problem 
definition. Section 3 explains the spanning-graph based 
method in detail. A two-stage heuristic algorithm is 
discussed in Section 4. Experimental results are shown in 
Section 5, and we make some conclusions in Section 6. 
2 Preliminary 
The section discusses motivation, notations, terminology 
and problem definition. The following is the motivation 
of the paper. 
2.1 Motivation 
The RSMT problem with obstacles is usually solved by 
the graph-based and the sequential approach. The former 
methods usually first construct the spanning graph and 
then perform the searching algorithm to obtain a 
sub-graph. The latter approaches first build the routing 
tree without obstacles and then remove the edges inside 
obstacles. We know that the result of the sequential 
method will be limited to the initial routing tree and the 
proposed method obtain solution efficiently. Therefore, 
the spanning graph method is applied to construct better 
routing tree due to the global view of the obstacle 
boundaries and pins. Besides, the two-stage sequential 
method which obtains routing solution efficiently is also 
presented.  
 The importance of considering the issues of total 
wire-length and via counts at the global routing is listed 
in Fig. 1. Assume there are five obstacles and four pins in 
a chip. If we search the nearest point by the concept of 
greedy, the result may contains 7 via counts and longer 
total wire-length (47 unit length), see Fig. 1(a). With the 
global view, our method can find the routing solution 
with 2 via counts and the shorter wire-length (41 unit 
length) in Fig. 1(b).  
By the observation of Fig. 1, it motivates us to find a 
spanning graph-based approach which obtains the 
solution with minimization of total wire-length and the 
via counts. 
In the section, we first describe the terminology used 
in the paper and then formulate the problem that we will 
solve in this paper. 
 
 
     
 
 
 
 
 (a)                          (b) 
Fig. 1 (a) The previous method iteratively finds the nearest 
point and results in a little of bending with the greedy concept. 
(b) We record properly the useful information to reduce the 
total wire-length and via count. 
 
 
 
 
 
 
 
 
 
    
(a)                       (b) 
Fig. 2 (a) Perform edge connection for search region R6 of b1. 
(b) The routing path d12 (d13) which is not inside the obstacle 
within the bounding box is selected as the edge connection for 
region R3 (R4) with the increasing order of x+y (x-y).  
2.2 Notations 
The following are notations used in this paper: 
●  T (TM) : the Steiner tree (minimal spanning tree).  
●  Rj (Ri) : the search region of the obstacle j (pin i). 
●  uijp ( lijp ) : the upper-L (lower-L) Steiner point of eij of TM.  
●  fijd ( bijd ) : the forward (backward) distance from vi to vj. 
●  bj : the rectangular obstacle j. 
●  cjo: the four cornet points of obstacle j.(o=1,2,3,4).  
●  vi : the union of the pins and the corner points. 
●  eij : the edge between vi and vj. 
●  dij : the distance from vi and vj. 
●  ui : the neighbor of node vi.(i=1,2…w) 
●  vc: the current nearest node of the boundaries of obstacle. 
2.3 Terminology 
For a set of n pin of a multi-pin net (Fig. 3(a)) and a set 
of rectilinear obstacles (Fig. 3(b)), a spanning graph G is 
an undirected graph to connect all pins. G is regarded as 
an intermediate step in the minimal spanning tree 
construction.  
In Fig. 2, we define the searching regions which are 
used to construct the spanning graph. For each obstacle 
bi, the plane is partitioned into eight regions by the four 
boundaries of the obstacles, see Fig. 2(a). For each pin pi, 
the full chip in Fig. 2(b) is divided into four regions by 
the horizontal, vertical line passing through pi.  
For the spanning graph G, we iteratively use the 
searching techniques, including the traversal and tracking 
back, to find a spanning tree T. For each vi in G, we find 
the neighbor nodes connected to vi and add the nodes ui 
into T if ui is also the pins. 
vi
vj
vi
vjb1
b2
b3
b4
b5
b1
b2
b3
b4
b5
b1
b2
b3
b4
b5
TM
TM
b1
b2
b3
b4
b5
TM
b
1
b
3
b
5
b1
b2
b3
b4
b5
b1
b2
b3
b4
b5
p2
p1
p3
p4
p2
p1
p3
p4
p2
p1
p3
p4 p2
p1
p3
p4
d23
d13
p2
p1
p3
p4
p2
p1
p3
p4
TM
T
 
 
 
 
 
  
 
 
 
 
(a)                     (b) 
 
 
 
 
 
 
 
 
 
(c)                   (d) 
 
 
 
 
 
 
 
 
 
 
(e)                   (f) 
Fig. 5 (a) Take a random node as the starting node. (b) 
Traversal each path connecting the starting node. (c) 
Trace back and add the pin into the spanning tree TM. (d) 
The BFS-like traversal and add the shorter path d23 into 
the spanning tree if the length of d13 is greater than d23. (e) 
TM is obtained by iteratively touring and tracing back. (f) 
Transform TM into T.  
After discussing the adjust_line() procedure, the 
whole algorithm (ALG2) is proposed. The proposed 
algorithm contains two stages, including constructing a 
minimal spanning tree without obstacles, followed by the 
procedure of transforming the MST into a rectilinear 
Steiner by removing the intersection inside the obstacles. 
The Prim is used to construct the MST and the main 
procedure of ALG2 is how to transform a MST into a 
Steiner tree. For each edge of a MST, the forward and 
backward operations are utilized to calculate the two 
distances and the routing path with the shorter distance is 
chosen, see Fig. 6. The criteria of cost is as follows,  
                            (1)cost WL VIAα β= × + ×  
where WL and VIA denote the total wirelength and the 
numbers of via, respectively. The value of βis set to be 
zero in this paper. The algorithm will be explained 
completely in Fig. 8. 
 
 
 
 
(a)                      (b) 
Fig. 6 Two kinds of adjusting line: (a) The backward operation 
vj→vi (b) the forward operationvi→ vj.   
 
  
 
: adjust_line ( )
 A directed edge  from node to .
A smaller routing path and its length, .
    ( box ( , ))    // if there is obstacle within th
i j
i j i j
i j
i j
e
e v v
d
v v
Algorithm
Input   :
Output :  
Method :
while
  
e bounding box
             find the next node   on the obstacle boundaries.  
            ( box ( , ))
                         adjust_line ( ); 
            
                        con
c
c j
c j
v
v v
e
if
 else
nect the  and ; 
               
       connect the  and ;
   
i j
i j
v v
v v
      endif  
endwhile
 
Fig. 7 The pseudo code of adjusting line. 
A simple example which each edge could be routed 
beyond the obstacles is listed in Fig. 9 and another 
complex example is used to illustrate the operation of 
adjusting line, see Fig. 10. Because two L-shaped routing 
paths interest the obstacles and the current nearest node, 
vc, is labeled, see Fig. 10(a) and (b). The next vc is visited 
because the two L-shaped routing paths intersect obstacle 
and the shorter path is selected, in Fig. 10(c). A node, vc, 
is iteratively selected and checks if there is safe routing 
path, see Fig. 10(d) and (e). The ALG2 will terminate 
until the vj is connected to vi. 
: A Sequential Rectilinear Steriner Tree with obstacles (ALG2)
 A set of point,  with the sef of obstacles .
A rectilinear steiner tree . 
    //Stage 1: Constuct t
V P C B
T
= ∪
Algorithm
Input   :
Output :
Method :
he Minimal Spanning Tree, , without obstacles
       = MST-Prim ( );
   //Stage 2: Adjust line iteratively to obtain a   with obstacles.
     each 
          (  and  are located 
M
M
ij M
u l
ij ij
T
T P
T
e T
p p
∈ for
 if 
 
at obsctacle )         
                       =  adjust_line( );
                       =  adjust_line ( );
                     ( > ) 
                               =  { };
      
v
f ij
b ji
f b
ji
b
d e
d e
d d
E E e∪
if 
              
                               =  { };
         
     
ijE E e∪
 else 
  endif   
endfor
 
Fig. 8 The pseudo code of ALG2. 
 
