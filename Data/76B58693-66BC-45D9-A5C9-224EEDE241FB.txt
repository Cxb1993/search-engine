 2 
一、 摘要 
 
本計劃完成一個結合硬體化即時核心(hardwired real-time kernel)的機器人系統晶片。基於先前已
完成的機器人控制用途的嵌入式計算平台，結合底層的機器人週邊控制器硬體IP模型，本計劃進一步
設計一個高效能的硬體化即時核心，也就是將即時作業系統的微核心(microkernel)以平行和管線化技
術實作成硬體整合在嵌入式處理器，此一新架構將具有極為優異的即時系統性能，低功耗和快速嵌
入式機器人應用軟體開發等優點。本計畫以嵌入式處理器整合此一即時核心，並以FPGA為基礎的可
重組計算架構驗證結合硬體即時核心的機器人系統晶片的性能優勢。最後完整的軟硬體平台實作在
六足機器人上，並展示多種智慧型機器人的運動控制和仿生漫遊行為。本研究可對智慧型機器人的
系統晶片設計提供有效的系統層級的解決方案，也針對未來的智慧型機器人產業，提供了少量、多
樣用途機器人控制器快速原型化晶片設計的方法和技術。 
關鍵詞：智慧型機器人；即時核心；系統晶片 
Abstract 
This research aims to integrate a hardwired real-time kernel in a SoC for intelligent robots. Based on the 
embedded computational platform developed for robot control, the product of our previous research, the 
present project will further design a hardwired real-time kernel with high performance combining basic 
peripheral device controllers for robots. In other words, the microkernel of a real-time system will be 
implemented and integrated in the embedded processor using parallel and pipelining techniques. This brand 
new architecture provides an excellent real time performance, low power consumption and enables rapid 
development of embedded software. The FPGA based reconfigurable computing architecture will be used to 
verify and demonstrate the functionalities and performance of the SoC with hardwired real-time kernel. The 
software/hardware integrated system will be carried out on a hexapod robot which will demonstrate the 
motion control and bionic behaviors of a hexapod robot. This research provides the future robot industry with 
chip design approaches and techniques for the rapid prototyping of intelligent robot characterized by small 
volume production and wide range of applications. 
 
Key-words: Intelligent Robot; Real Time Kernel; System-On-A-Chip 
 
二、前言與目的 
面對智慧型機器人系統複雜度的不斷攀升和應用產業未來的成長趨勢，我們將需要更高性能、
更具設計彈性和更短的設計週期的智慧型機器人系統晶片。由於典型機器人應用系統設計使用數位
 4 
三、研究方法 
在95年國科會計畫「仿昆蟲智慧型六腳機器人的運動控制」中，我們提出一個結合高階生物中
樞神經運動控制模型和低階生物反射運動控制模型的六腳機器人運動控制策略，並將其實作於階層
化的六腳機器人運動控制器，並設計一個仿生行為的六腳機器人硬體平台，最後完成六腳機器人運
動平台的軟硬體整合測試和三種步態行為控制的驗證。在96年的國科會計畫「智慧型機器人的嵌入
式計算平台」，我們提出一個基於可重組計算架構的智慧型機器人嵌入式計算平台[8]，如圖1。此一
平台由上而下具有Application、Operating system、Processor、Bus和Device controller層。我們採用一
個可重配置的8位元嵌入式處理器核心作為平台的計算核心，並針對感測器和制動器分別設計硬體電
路自動產生器，用來快速地生成平行的週邊控制器IP。在此嵌入式處理器上，我們移植了一個即時作
業系統uC/OS-II，以便提供智慧型機器人應用程式的快速開發。最後，我們在具有18個自由度的六腳
機器人進行此一計算平台的實作，並以步態行為控制和超音波感測避障實驗來驗證藉由此一平台所
開發的機器人系統晶片。 
 
圖1、智慧型機器人的嵌入式計算平台架構 
在此一基礎上，本計劃提出一個新的系統晶片架構，用以大幅提升機器人應用系統的性能和可
靠度。我們設計一個硬體化即時核心，也就是將即時作業系統的微核心(microkernel)以平行和管線化
技術實作成硬體整合在嵌入式處理器，此一新架構將具有極為優異的即時系統性能，低功耗和簡易
的嵌入式機器人應用軟體開發優點。本計畫所開發的硬體化即時核心將可以很容易的整合在不同的
嵌入式處理器，如8位元的8051處理器或32位元OpenRISC處理器分別進行整合驗證，最後以FPGA驗
證此一硬體即時核心系統晶片的可行性和性能。 
本計劃採行如下 6 個步驟進行： 
 6 
行程取得CPU 的控制權是由排程器(Scheduler)來決定，排程器根據行程佇列配置每一個task的
CPU控制權，一旦被中斷，task被推入佇列尾端，排程器在再給予下一個行程的CPU控制權，如此達到
分時多工的目的。 
2. 即時核心功能模組的離散事件系統(discrete-event system)建模和硬體合成 
我們先對即時核心進行階層式和模組化的分析，進而透過平行和管線化控制的離散事件建模來描述
即時核心的硬體行為，最後將其轉換為硬體描述語言VHDL形式。 
本計畫採用本人和戴嘉宏於 2006 年所提出的系統設計與高階合成方法論[11]來設計和實作平行和
管線化硬體電路。此一方法論先採用階層式、模組化的功能架構設計方法─IDEF0。一個系統被由粗到
細(coarse to fine)分解成一組獨立的功能模組；隨後針對每一個功能獨立的模組，使用 GRAFCET 圖形
化工具建立其離散事件模型，也就是行為建模(behavior modeling)。再根據方法論的合成法則，所有
GRAFCET 模型得以轉譯為 VHDL 硬體描述語言的控制器硬體架構，最後結合一些通用的組合邏輯建
構單元，便可實現完整的系統硬體高階合成。完整的方法論架構如圖 3 所示。 
系統
分析
階層化
模組化
設計
離散事
件系統
建模
VHDL
合成
硬體
驗證
系統
描述
行為
模擬
邏輯
元件庫
 
圖 3、離散事件系統設計與硬體合成方法論 
3. 可重組計算架構的機器人系統晶片設計 
基於各式服務型、玩具型機器人應用產品快速發展，系統功能複雜度迅速增加和產品生命週期不斷
縮短，機器人的嵌入式計算平台的建構便成為最重要的課題之ㄧ。由於研發時程、成本與效能需求的
多重挑戰，可重組計算(reconfigurable computing)的觀念益顯重要[12]。可重組計算利用可調整的彈性化
處理器架構和可重組的高性能硬體邏輯單元，可針對不同應用快速的產生最佳的系統晶片架構。可重
組式計算在智慧型機器人系統晶片的設計，具備下列優點： 
─處理器可藉由硬體邏輯單元輔助大幅提升機器人即時計算性能；  
─易於轉換至不同的機器人硬體平台和多樣性應用服務功能； 
─縮短智慧型機器人系統開發時程。 
在 96 年的國科會計畫「智慧型機器人的嵌入式計算平台」，我們設計了一個以 8051 為核心的可
重組式系統晶片平台[8]。8051 是 80 年代由 Intel 公司所製造的 8 位元微控制器，具有體積小、耗電低、
電路穩定性高等特性，特別是它的晶片支援廠商和開發資源，包括周邊電路、原始碼、模擬器、編譯
器等等均非常完整便利，是全世界應用最廣泛的微處理器核心[13,14]。 
 8 
 
 
 10 
(3) 硬體電路設計和驗證，如圖； 
 
(4) 可重組計算架構的機器人系統晶片設計，如圖； 
硬體化
即時核心
UARTs
SPI
I2C PMU
Timer
Sensor 
Controller
Actuator 
Controller
User 
Defined 
Bus
JTAG
感測器訊號
馬達控制訊號
電源管理
串
列
通
訊
clock
可重組
邏輯單元
嵌入式
處理器
機器人行為程式
M
N
 
(4) 智慧型機器人行為程式的應用系統整合，如圖； 
 12 
台，而計畫中產出的硬體化即時核心、可重組架構的機器人系統晶片、智慧型機器人行為程
式除了具有學術和技術創新的價值外，更可以加快電子寵物、服務型機器人或智慧型行動載
具相關創新產品研發。 
本研究成果於今年 9 月 30 日~10 月於 2010 年台北國際發明暨技術交易展代表國科會
以「智慧型機器人系統晶片平台」為題參展，獲得大會最佳人氣獎，顯示本計會成果具體並
具有社會大眾的普及推廣價值。 
六.參考文獻: 
[1] Ugobe Pleo, http://www.ugobe.com/ 
[2] Ching-Han Chen, Sz-Ting Liou, “An Embedded Computing Platform for Intelligent Robots” , submitted 
to 2008 IEEE International Workshop on Embedded Processors, Sensors, and Actuators, 2008, 
p.445-p.450. 
[3] G. Brebner. A Virtual Hardware Operating System for the Xilinx XC6200. In Proceedings of the 6th 
International Workshop on Field-Programmable Logic and Applications (FPL), pages 327–336. Springer, 
1996. 
[4] G. Wigley and D. Kearney. Research Issues in Operating Systems for Reconfigurable Computing. In 
Proceedings of the International Conference on Engineering of Reconfigurable System and 
Algorithms(ERSA), pages 10–16. CSREA Press, Juni 2002. 
[5] H. Simmler, L. Levinson, and R. M a¨nner. Multitasking on FPGA Coprocessors. In Proceedings of the 
10th International Workshop on Field Programmable Gate Arrays (FPL), pages 121–130. Springer, 2000. 
[6] H. Walder and M. Platzner. Online Scheduling for Block-partitioned Reconfigurable Devices. In 
Proceedings of Design, Automation and Test in Europe (DATE), pages 290–295. IEEE Computer Society, 
March 2003. 
[7] J.-Y. Mignolet, V. Nollet, P. Coene, D. Verkest, V. S., and R. Lauwreins. Infrastructure for Design and 
Management of Relocatable Tasks in a Heterogeneous Reconfigurable System-on-Chip. In Proceedings of 
Design, Automation and Test in Europe (DATE), pages 986–991. IEEE Computer Society, March 2003. 
[8] Ching-Han Chen, Sz-Ting Liou, “An Embedded Computing Platform for Intelligent Robots” , submitted 
to 2008 IEEE International Workshop on Embedded Processors, Sensors, and Actuators, 2008, 
p.445-p.450. 
[9] C. Steiger, H. Walder, and M. Platzner, “Operating Systems for Reconfigurable Embedded Platforms: 
Online Scheduling of Real-time Tasks,” IEEE Transaction on Computers, vol. 53, no. 11, pp. 1392–1407, 
November 2004. 
[10] Jean LaBrosse, MicroC/OS-II, The Real Time Kernel, second editio, CMP Books, 2002, 648 pages. 
[11] Ching-Han CHEN, Jia-Hong DAI, “High-Level Modeling and Hardware Synthesis Methodology for 
Discrete-Event /Continuous-Time System”, WSEAS Transactions on Circuits and Systems, vol.5, no.8, 
August, 2006, pp.1296-1303. 
[12] Patrick P. Geisnger, "Microprocessor for the new millennium: Challenges, Opportunities, and New 
Frontiers", ISSCC 2001, pp.22-25. 
[13] Intel’s free source 8051 core, http://developer.intel.com/design/mcs51, 2008. 
 1 
 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                     日期：99 年 10月 31日 
                                 
一、參加會議經過 
照片一、研討會廠商參展區，許多學者與廠商交流： 
 
照片二、研討會會場 
計畫編號 NSC－ 98-2221-E-008 -053 
計畫名稱 結合硬體化即時核心的機器人系統晶片 
出國人員
姓名 
陳慶瀚 
服務機構
及職稱 
國立中央大學資工系 
會議時間 
98 年 12 月 1 日至 
 98 年 12 月 3 日 
會議地點 法國 Grenoble 
會議名稱 
(中文)IP-ESC 2009(矽智財-嵌入式系統研討會) 
(英文) IP-ESC 2009(IP-Embedded Systems Conference) 
發表論文
題目 
(中文)串流訊號處理的管線化多處理器系統晶片設計方法論 
(英文) A Pipelined Multiprocessor SoC Design Methodology for Streaming Signal Processing 
IP-ESC'09 Conference – December 1-3, 2009 1 
 
Abstract : 
 
We proposed a Pipelined Multiprocessor 
System-on-a-Chip (PMPSoC) design flow. The 
PMPSoC design flow consists of modular design of 
algorithm, data arrangement, pipelined controller 
design, HW/SW co-simulation and HW/SW 
co-synthesis. For the streaming data processing 
system, we can divide it into several individual and 
independent modules. Each independent module 
function is completed by embedded processor by 
software. And applying the pipelining technology 
synthesize the hardware of main controller to 
integrate all modules and increase the totally system 
performance. We completed a simulator of pipelined 
multiprocessor system. The advantages of proposed 
design methodology are: the simulation level is 
increasing from register transfer level (RTL) to 
transaction-level model (TLM). It can reduce the 
time of system verification immensely. Additionally, 
after the system architecture is decided, the 
simulator can produce a simulation platform of 
pipelined multiprocessor system automatically. We 
can verify the accuracy of multiprocessor system 
function before the accomplishment of system 
hardware circuit to reach purpose of rapid prototype. 
We also completed the corresponding of TLM’s 
pipelined controller and processor’s RTL circuit. 
When we finish the system TLM verification, the 
hardware circuit is also synthesized.  
 
1. INTRODUCTION 
 
Due to the improvement of IC manufacturing, 
embedded SoC design can accomplish much more 
complicated functions. However, the design and 
verification of SoC is becoming more and more 
difficult since problems needed to be considered 
include design cycle, cost, performance, power 
consumption and reliability and so on. In the design 
of high performance SoC, the traditional design 
method is mainly divided into two ways: 
The first solution uses a single processor with high 
clock frequency and powerful functions to 
accomplish the design. The merit of using a 
processor is that, when the system function needs to 
be modified, software is more flexible than hardware 
and the developing time can be significantly 
shortened. However, since the instruction execution 
of the processor is sequential, the data processing 
ability can only be improved by increasing the clock 
frequency or the bit width of data processing. 
Physically, since the clock frequency of the 
processor is not possibly increased without limits, 
the ability of data processing is also limited. Since 
the bit length during the procedure of data 
processing is not maintained unchanged, increasing 
the data processing bit length of the processor will 
cause the waste of system resource.  
The alternate solution uses dedicated hardware 
circuit to accomplish the design has the merits of 
high parallelization and greater data processing 
ability than processor. However, from the system 
design point of view, the design level of hardware 
circuit is lower. Because each parallel hardware 
circuit needs to consider the details of signals and 
register level, it is difficult to correct system 
functions and taking more time for a design cycle. 
Recently, many researches[1-2] are using 
multiprocessor design which has the advantages of 
being able to increase processed data amount and 
resource using efficiency without increasing the 
clock frequency. Although a designer can consult 
conventional experiences for designing embedded 
single processor platform so as to increase 
approaching speed and reliability of system design, 
many problems which were not faced in single 
processor systems are introduced, including: how to 
share the huge calculations between processors 
properly, how to achieve fast and reliable 
communications between processors and how to 
verify and test multiprocessors system. 
This paper elaborates a design methodology for 
embedded pipelined multiprocessor system. In the 
proposed architecture, the multiprocessors share the 
computational tasks and memory for achieving high 
throughput data exchange. Aims at this objective, 
we develop a simulation platform of multiprocessor 
system to verify, simulate and test the embedded 
software for the rapid development of 
application-specific pipelined multiprocessor 
system. This simulation platform can be used to 
estimate and verify the functionalities, resource 
 IP-ESC’09 
 
A Pipelined Multiprocessor SoC Design Methodology for Streaming Signal Processing 
 
Ching-Han Chen, Department of CSIE, National Central University, Taoyuan, Taiwan 
Jia-Hong Dai, Department of EE, I-Shou University, Kaohsiung, Taiwan 
 
  
IP-ESC'09 Conference – December 1-3, 2009 3 
of the merits to use ANSI C language is to quickly 
port the program code from PC platform to 
embedded processor since software needs only few 
or even no modification. 
 
 
Figure 3. Hierarchical and modular decomposition using 
IDEF0 
 
Task1
{...
  for(...)
  {
            
  }...
}
Taskn
{...
  for(...)
  {
       
  }...
}
0 1( , )d d
1 0( )=subtask1( ( ));d j d j
1−( , )n nd d
−1( )=subtaskn( ( ));n nd j d j
Task2
{...
  for(...)
  {
            
  }...
}
1 2( , )d d
2 1( )=subtask2( ( ));d j d j
 
Figure 4. for-loop structure in modules 
 
2.2 Data Arrangement 
 
Once the modulization of algorithm has been 
finished, the followed steps are that: (1) Cutting the 
streaming data of each module into smaller data 
elements block for each computational cycle, i.e. 
cutting a task into many smaller subtasks. A subtask 
is a minimal computation cycle which is executed by 
a processor with a sequence data. We use a 
reservation table to rearrange and allocate the 
sequence data for the multiprocessor. Figure 5 
shows a reservation table example. The sequencing 
data is arranged for each subtask Tij shown in Figure 
5(a). After the data arrangement, the processor can 
be allocated for manipulating the data sequences 
shown in Figure 5(b). 
 
0
P1
P2
P3
P4
11T
21T
12T
22T
13T
23T
1 2 3
41T 42T 43T
31T 32T 33T
4mT
 3mT
 2mT
 1mT
 
0
P1 11T 12T 2mT1mT
1 2
21T 22T nmT
 
4
 
3mT31T 32T
(a)
(b)
Processors
Processors
m
m 2m 3m 4m
Time(cycles)
Time(cycles)
 
Figure 5. Reservation table for multiprocessor 
 
Given n tasks, each task can be divided into m 
subtasks, the executing time of n tasks needed by a 
single processor is 1τ  and that needed to be 
executed by n processors is nτ . The acceleration 
ratio can be defined as 
 
1
( 1)n n
m nS
m n
τ
τ
⋅
= =
+ −
   (1) 
 
If the memory buffer for input and output data of 
each task is also m, i.e. each subtask will generate 
one datum. Assuming that the required memory size 
of execution by a single processor is 
1l  and by n 
processors is nl , therefore memory decreasing ratio 
can be defined as 
 
 
1
2 2( 1)
( 1)
n
n
l m n -R
l m n
+
= =
⋅ +
   (2) 
 
Where 2(n-1) represents that (n-1) data buffers exist 
among n processors with a size of 2, and that is the 
required size for input and output between 
processors within an execution cycle.  
  
2.3 Pipelined Controller 
 
In order to control efficiently the parallel execution 
of multiprocessor, the pipelined controller plays a 
critical role. A pipelined multiprocessor can be 
formed by integrating a pipelined controller in the 
distributed multiprocessor system. The controller 
transmit control signals and decide the execution 
state by means of flag signal come from each 
processor module. The generic architecture is shown 
in Figure 6(a), Pn_STR represents the control signal 
for starting the processor n, and Pn_FIN signal is 
return while an execution cycle of the processor n is 
finished.The start time Tstart(Pi) and the end time 
Tfinish(Pi) for processor Pi can be obtained from the 
reservation table. The pipelined controller is divided 
to two parts. The discrete event model of main 
controller represented by GRAFCET as shown in 
Figure 6(b), The controller G0 takes responsibility 
for controlling the parallel synchronization of the 
cycle counter Tcycle. The stage controllers G1, …, Gn 
in Figure 6(c) takes responsibility for judging 
whether the corresponding processors are initiated 
in the current Tcycle. The initial condition Cstart(Pi) is 
defined as equation (3). 
 
start cycle finish
start
start cycle cycle finish
( ) ( )1
( )
( )  and ( )0
i i
i
i i
T P T T P,
C P
T P T T T P,
≤ ≤
=  > >
 (3) 
 
When the value of Tcycle is between Tstart(Pi) and 
Tfinish(Pi), Cstart(Pi) and Pi will be initiated; otherwise, 
IP-ESC'09 Conference – December 1-3, 2009 5 
simulation granularity and efficiency. Several TLM 
(Transaction Level Model) are used for simulation 
propose, like as component-assembly model, 
bus-transaction model, bus-functional model and 
cycle-accurate commutation model etc[5].  
As for our methodology, the main purposes of 
designing simulator include: (1) Arise the pipelined 
controller described by HDL and processor IP 
elements from register transfer level (RTL) Model to 
TLM so as to increase simulation speed and obtain 
system execution parameter quickly, such as 
execution time, function accuracy and monitorable 
debug information of each module. (2) It is able to 
amend the setting parameter of the hardware 
structure flexibly and to generate needed execution 
environment for testing system software quickly and 
automatically. (3) Save time and cost to amend 
hardware structure. Therefore, we use a 
cycle-accurate computation model which is one of 
TLM, not only for increasing the simulation speed, 
but also for obtaining higher precision of the 
software execution time information. When the 
algorithm of each module of the system have been 
tested by the simulator, as show in Figure 8, it is able 
to evaluate the performance of each module and fine 
tune the system architecture and parameters for 
obtaining the optimal performance of the MPSoC. 
The block diagram of PMPSoC simulator was 
showed in Figure 9. 
 
RAM
(RTL)
Pipelined Controller
(RTL)
ROM (RTL)
Embedded
Instruction Code
(SW)
Processor Cores
(RTL)
RAM
(TLM)
Pipelined Controller
(TLM)
ROM (TLM)
Embedded
Instruction Code
(SW)
Processor Cores
(TLM)
Figure 8. Transfer RTL to TLM for reducing the 
simulation time 
 
Multiprocessor 
Initial File Program File
(Machine Code)
Test Data File
Pipelined Controller 
Generator
Virtual Processor  
Components 
Generator
Virtual RAM 
Components 
Generator
Pipelined Controller Interface Connection & Communication 
Simulation 
Process log File
Processor Print 
Command 
Output File
Simulation
Result File
User Interface of Simulator 
Pipelined Multiprocessor Simulator 
 
Figure 9. The block diagram of PMPSoC simulator. 
 
2.5 HW/SW Co-synthesis 
 
After verifying the program code of every module in 
simulator, it starts to integrate the software and 
hardware. First, configure the program code of each 
module into ROM element, and then synthesize the 
elements such as processor, RAM and pipelined 
controller. After they are compiled by the FPGA 
EDA software tool, they can be burned to FPGA to 
perform the testing and verification on MPSoC 
hardware, as shown in Figure 10. 
 
RAM
(HW)
Pipelined Controller
(HW)
Instruction Code
(SW)
Processor Cores
(HW)
HW/SW 
Co-synthesis
by EDA Tool
HDL Code
FPGA 
hardware 
Verification
Netlist
ROM (HW)
 
Figure 10. HW/SW co-synthesis 
 
Concerning the pipelined controller part, the 
discrete event model of pipelined controller can be 
synthesized automatically to VHDL according to 
Chen and Dai[6] This controller can be divided into 
two parts, Figure 11(a) G0 takes the responsibility 
for the counting and control action of parallel 
synchronization of the cycle counter Tcycle, Figure 
11(b) G1~Gn takes the responsibility for judging 
whether the processor is initiated in the current Tcycle. 
About the element part of the processor, in 
considering of the exoteric character and 
enrichment, we use Oregano 8051 IP core [7]. This 
IP core is accomplished by using VHDL description 
and the instruction is compatible to standard 8051 
processor. The compile tools of the compatible 
assembly language or C language are also complete, 
such as the developing tool µVision of Keil [8].  
 
 
 (a) 
IP-ESC'09 Conference – December 1-3, 2009 7 
(VLSI) Systems, vol. 14, no. 2, pp.148-160, Feb. 
2006. 
[5] L. Cai, D. Gajski, “Transaction level modeling: 
an overview”, Proceedings of the 1st 
IEEE/ACM/IFIP international conference on 
Hardware/software co-design and system synthesis, 
pp. 19-24, Oct. 2003. 
[6] C. H. Chen   J. H. Dai, “Design and high-level 
synthesis of hybrid controller”, IEEE International 
Conference on Networking, Sensing and 
Control(March 2004), vol. 1, pp.433- 438, 2004. 
[7] 8051 open core, http://www.oregano.at/ip/index. 
htm. 
[8] 8051 development tool µVision, http://www.keil. 
com/  
[9] G. J. Colquhoun, R.W. Baines  “A generic 
IDEF0 model of process planning”, Int. J. 
Production Research, Vol.29, No. 11, pp. 2239-2257, 
1991. 
98年度專題研究計畫研究成果彙整表 
計畫主持人：陳慶瀚 計畫編號：98-2221-E-008-053- 
計畫名稱：結合硬體化即時核心的機器人系統晶片 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 2 0 100%  
博士生 1 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 2 0 100%  
博士生 1 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
