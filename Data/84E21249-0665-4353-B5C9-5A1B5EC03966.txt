 2
二、緣由與目的 
藉由網路連到遠端電腦，使用圖形化
界面(而不是命令模式)在遠端電腦上執行
更多樣與複雜的工作，例如：遠端網頁瀏
覽、網管程式、繪圖、應用程式執行…等。
此種遠端電腦執行方式跟  thin client 
computing 或 network computing 做法類
似，所謂的thin client computing system或
network computing的架構是由伺服器端和
用戶端組成，且通常伺服器端的功能都比
用戶端強大。然後透過網路的傳遞，用戶
端把要執行的工作交給sever去執行，伺服
器端執行完時再把結果傳回給用戶端。就
以windows的遠端桌面就是屬於此種架
構，其他的還有跨平台的VNC 等，它們
各有自己的遠端桌面機制(remote desktop 
mechanism)。遠端桌面機制是用戶端連接
到伺服器，然後由用戶端去操作伺服器
端，伺服器端只是在畫面有所變動的時
候，才把畫面變動的相關資料傳送給用戶
端，然後由用戶端去更新畫面。使用此架
構的好處有1)用戶端硬體需求不用很高，
即可以執行CPU bound 或 IO bound 的應
用程式(如做複雜的數學運算、資料的壓
縮)，2)如果用戶端裝置很容易損壞或是資
料保護安全性低(例如：機器受到撞擊或是
遭竊)，此架構可提供穩定安全的機房，即
不會有此顧慮。 
 
依照上述的討論，我們有了一個新的
想法，即用戶端畫面可以透過網路直接傳
送到伺服器端上顯示，這樣做有什麼好處
呢?以一般投影片報告為例，報告者通常需
將自己的筆記型電腦帶到投影機旁，連接
投影機的VGA線，因此每當要換另一個報
告者時將轉換VGA線並且重新設定，所以
如果我們能讓用戶端畫面透過無線網路的
技術直接傳送到伺服器端上顯示，那麼將
可以減少不必轉換VGA線並且重新設
定，架構圖如圖一。 
 
 
圖一 遠端投影架構圖 
 
還有以教學廣播系統為例，教師在主
控端裝有控制器，然後利用視訊分流器和
每一個學生端連結起來，但此方法將必須
要增加硬體成本以及佈線裝置時間，因此
若能利用本計劃所提出的構想，讓用戶端
畫面可以透過無線網路傳送到伺服器端上
顯示的技術，那麼教學廣播系統中的電腦
只需要安裝遠端桌面機制的軟體，就能把
教師目前的電腦畫面透過無線網路廣播給
學生的電腦，因而可以減少硬體成與佈線
裝置以及維護時間，架構圖如圖二。 
 
 
圖二 教學廣播系統架構圖 
 
本計畫中我們探討目前幾個主流的遠
端桌面軟體實做方式，並且實做出我們所
架構的遠端桌面機制，系統包含三個子系
統，分別為用戶端發送系統、伺服器接收
與監控管理系統，其中伺服器端可接受用
戶端的畫面，並即時顯示用戶端的改變。
在此我們先探討1)跨平台Virtual network 
computing，2)MS windows RDP。 
 
1. 跨平台Virtual network computing： 
Virtual network computing (縮寫為
VNC)為一套2台互動的遠端控制的軟體，
一台是伺服器端程式，另一是viewer（用
戶端）程式，允許單一桌面可以被多個人
 4
因為每次都要伺服器端傳送訊息來詢問，
所以會增加頻寬浪費以及一半的封包來回
時間。我們的系統並不像某些系統，以
THINC為例，THINC有暫存區(buffer)的功
能，其可能會因為網路突然壅塞或是其他
原因，因此先將更新資料或指令先暫存起
來，為了避免資料的重覆，一些額外的程
式來管理此暫存區是必要的。例如：一些
重覆的指令和過時的指令必須從暫存區刪
除掉。而我們的方法則是當訊息送給伺服
器端之後過了一段時間，計算出上一次給
伺服器端訊息到目前螢幕有更新過的區
域，使用此方法的好處是不需要額外的記
憶體來儲存資料，也不須要定時的對暫存
區做更新動作。 
 
1. 偵測畫面變化(Update message) 
在偵測畫面的改變方面，我們只傳送
畫面改變的地方但不含指令，並且以
Mirror Drive的方式來偵測與記錄變動畫
面。在Windows 2000以後的系統提供一種
稱為Mirror driver的裝置驅動程式，它可以
將原本的DDI calls完全複製一份相同的需
求到Mirror driver，因此Mirror driver可以
得知原本的顯示驅動程式到底收到什麼樣
的DDI calls。然後我們可以根據DDI calls
的參數得知螢幕上那邊被改變。這種技術
只會使用非常輕微的CPU資源，安裝後即
可使用不用重開機。但只有Windows 2000
以上的OS可以使用，我們目前是採用此種
方式來偵測。其架構圖如圖五。 
 
 
圖五 mirror driver架構圖 
 
2. 抓取畫面(Capture) 
當我們經由mirror driver得知畫面的
更改區域時，接下來的步驟就是如何去把
更改區域的畫面抓下來，然後做處理傳給
用戶端去顯示出來。那要如果抓圖呢？我
們利用GDI API 中的 Bitblt 指令來做畫
面 的 拷 貝 。 使 用 此 方 式 連 續 抓 取
1024x768x16的畫面100次大概只要2.2秒
左右，即每秒可抓大概近50次，不過其抓
圖時間會隨著抓圖範圍和系統負載有所改
變 ， 但 此 種 抓 圖 方 式 無 法 抓 取 到
DirectDraw與Overlay的畫面，像滑鼠游標
就無法抓到，但是由於mirror driver會把
DirectDraw功能關掉而以GDI指令來繪
圖，所以僅無法抓到Overlay的畫面。所以
下一小節我們必須去偵測目前滑鼠位置。 
 
3. 處理滑鼠 
對於滑鼠位置的偵測，我們採取
polling的方式，此種方式為每隔一段時間
去詢問一下目前的滑鼠位置，然後根據目
前的取得的滑鼠位置去做相關處理。至於
要隔多少時間去詢問呢? 由於人類的眼睛
大概只要在每秒有23個frames下，就不會
對影片有延遲感覺，而在我們的實驗結果
下即使每秒做20次詢問滑鼠位置也不會有
延遲感覺。 
 
4. 畫面合併(merge) 
當我們得到畫面更新的訊息時，我們
並不會立即把更新資料傳給用戶端，因為
這麼做的話將會很耗頻寬和CPU資源，就
以撥放投影片來說的話，我們每秒可能獲
得將近100個更新的訊息，因此如果我們立
即把更新資料傳給用戶端，那麼所需的頻
寬和CPU資源是非常可觀的，所以我們還
是根據人類的眼睛大概只要在每秒有23個
frames下，就不會對影片有延遲感覺，我
們以50ms為一間隔時間，在這50ms所得到
的更新的訊息，將會被我們做合併的處
理，以節省頻寬和CPU資源。 
 
下面是我們依照時間的經過所會得到
的更新訊息示意圖如圖六： 
 
 
圖六 更新訊息示意圖 
 6
表示，而編碼用4Byte是為了以後的擴充
性，至於Size方面，在Screen update的資料
是用4Byte，因為螢幕解析度為1024*768，
像素為16bits，所以至少要有1024*768*16
的 type大小來表示，在此為了memory 
alignment的方便我們使用4byte表示，滑鼠
的Size大小為2byte，是滑鼠大小為32*32，
像素為16bits，所以其大小為32*32*16，所
以用2Byte表示即可，另外滑鼠還有多2個
欄位OffsetX和OffsetY，是因為在Windows
中，我們在得到滑鼠座標時，其真正影像
開始之處並不是那個位置而是會有偏移情
形，下面是我們抓取一般Windows預設的
滑鼠外觀，其大小為32*32，與抓取立體銅
色滑鼠，其大小為32*32如圖如圖九。 
 
  
圖九 (a) 預設的滑鼠外觀, 
       (b) 抓取立體銅色滑鼠 
 
由上面可以得知他們得起始位置是不
一樣的，所以每次要去畫滑鼠時必須要再
重定位，否則可能會因為滑鼠不同，顯示
出來的位置也會有所不同。當伺服器端收
到從用戶端傳送的資料時，伺服器端會根
據Encoding欄位將Payload的部分編碼，然
後將編碼後的資料先畫到我們的暫存區
上，等到更新訊息一到再把暫存區中的資
料拷貝到影像緩衝區上，這樣是為了避免
每次收到新的資料時就把資料立即寫到影
像緩衝區上而造成的閃爍情形。 
 
7. 傳輸方式 
本計劃實做兩個系統，其最大的分別
就在此步驟。遠端無線投影系統使用TCP
將壓縮後的資料傳輸到Server端，由於是
一對一的傳輸，故採TCP保證資料的完整
性。而研究教學廣播系統則因為一對多，
所以使用UDP廣播的方式來傳輸影像壓縮
資料，並針對UDP之封包遺失做特別的處
理。不論是遠端無線投影系統或研究教學
廣播系統，傳送到Server端的影像資料都
需再經過解壓縮與重組再繪到螢幕上。以
下將介紹兩種不同的傳輸方式。 
 
(A)遠端無線投影系統（使用 TCP） 
在我們的系統中，用戶端和伺服器端
會建立2個連線，分別為control和data，在
一開始時用戶端和伺服器端和先建立
control connection來向伺服器端註冊連
線，再由伺服器端通知用戶端可以傳送資
料，等到要換人報告時伺服器端可以終止
他的所有連線。因此control connection的功
能有1)建立雙方溝通連線，2)建立資料連
線，3)註冊，4)通知用戶端開始，5)結束用
戶端。 
 
Control 連線是開始和結束才會用到
的，大部份時間都是data連線，所謂的data
連線是傳送更新資料用的，其資料內容如
上所示，而Control連線和data連線所用得
傳輸協定都是用TCP/IP，在Control 連線
時其每次所傳的資料都是很重要的不可以
被丟掉，因此必須用可信賴的傳輸協定而
不能用udp，至於data連線雖然其資料並不
是那麼重要(因為我們只要顯示最新的畫
面，所以如果這次更新區域的資料被傳丟
了，只要下一次又傳送了相同區域的更新
資料時，那麼上次傳丟的資料就不重要
了)，可是還是要用可信賴的傳輸協定不能
用UDP，這是因為如果我們可以讓資料傳
丟的話，那麼我們要能保證過不久之後會
有相同更新區域的資料會被再一次傳送過
來，否則那塊區域的資料將無法和用戶端
同步，還有如果我們使用UDP，那麼所傳
送的資料可能會無法按照順序抵達，因此
如果有一個區域分別在時間T1和T2有被
更新，且T1比T2的資料舊，若再傳輸過程
中，T1比T2晚被伺服器端收到，此時T2
可能已經被畫上去了，當伺服器端再收到
T1時，伺服器端並不知此已經是一個過時
的封包，所以伺服器端還是以一般封包處
理方式處理它，因此我們反而得到一個舊
的畫面。 
 
當伺服器端收到資料時，做完編碼之
後就是把資料顯示螢幕上，在此我們使用
了linux 2.2 kernel 之後支援的frame buffer 
device，使用frame buffer device的好處是可
以將硬體的細節隱藏起來, 所以我們只要
