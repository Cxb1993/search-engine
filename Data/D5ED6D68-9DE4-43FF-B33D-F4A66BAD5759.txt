plug-in installation required and no other client-end 
software needed. There are Web & WebSocket Server, X 
Server Manager, Application Manager, and Input 
Handler on the server side. The Web & WebSocket 
Server realize the communication interface between 
server and clients while X Server Manager, 
Application Manager, and Input Handler deal with user 
input and requests from client side. The user 
interface on the client side is achieved by a web 
page. The development of this X window remote 
operation system features four main characteristics. 
First, the output display produced by remote 
application is presented by drawing instructions. 
Forwarding drawing instructions consumes less 
bandwidth than forwarding pictures of the application 
output. Second, web browser is used as the unified 
platform. A drawing library for HTML5 canvas element 
is implemented which realizes drawing application 
screen on the web page. Third, server directly pushes 
screen update information to client. This project 
uses HTML5 WebSocket as the communication protocol 
between client and server, which allows the 
connection established by a client to remain open. 
Fourth, this system supports multiple connections. 
The connections are isolated and will not interfere 
with each other. This project achieves the goals of 
decreasing the response latency and reducing the 
amount of data transferred over network from remote X 
window operation system. As a result, users can 
operate remote X window applications easily and 
smoothly. 
 
英文關鍵詞： Embedded Software, WebOS, Embedded Operating System, 
Embedded System, Mobile Device, Cloud Computing, 
Window System 
 
 2
1. 計畫簡介 
近年來隨著基礎通信網路的佈建，網際網路(Internet)已成了現代人生活中不
可或缺的一部分；人們可使用不同的方式連結至網際網路，例如：使用行動裝置
藉由電信網路連結網際網路。在網際網路中最為大眾所使用的服務為全球資訊網
(World Wide Web, WWW)；使用者透過全球資訊網得以瀏覽各式各樣的資訊，甚
至由此獲得各種不同的資訊。全球資訊網也由原本僅是單純的提供文件發展到現
今可以與使用者互動的多樣化網際網路應用程式 (Rich Internet Application, 
RIA)[1]。 
Web 2.0 的概念隨即被提出。Web 2.0 並不是一項新的技術；Web 2.0 是由
Tim O’Reilly 所提出的一個概念[2][3]，將 Web 視為一個平台，而不再只是單純
的提供網頁資訊。Web 2.0 改變了使用者的使用習慣，將 Web 視為一個平台，可
以在平台上作任何事。Web 2.0 帶來了更便利的使用模式並且強化了使用者介面
的呈現。另一個更大的改變是資料可以存放在這個「平台」上，只要在任何可以
存取 Web 的地方都可以取得個人的資料。甚至透過 Web 可以執行應用程式，例
如 Google docs 所提供的文字編輯器與試算表軟體。目前 Google 已透過 Web 提
供了許多服務(Gmail, Google Map, Google Calendar…)，試圖打造一個網路平台。 
WebOS(Web Operating System)[4]或是 Web Desktop 則是另一個新興的名
詞。如本計畫過往之研究所述，透過瀏覽器，使用者可以體驗到與傳統作業系統
相同的桌面環境。WebOS 營造出一個虛擬電腦(virtual computer)的使用環境。透
過 WebOS 執行的程式可能是在網際網路的任何一台運算伺服器。執行程式所用
到的資料亦存放在網際網路的任何一台伺服器上。透過 WebOS 的實現，使得使
用者即使不是坐在自己的電腦前也可以使用專屬於自己的虛擬電腦。 
 由上可知瀏覽器已經成為現代人每天必用的應用程式，甚至於一部運算平台
只需要有瀏覽器與基本的連線功能就可以提供使用者每日所需的工作或娛樂。因
此有了把瀏覽器當成是運算平台的想法，如[5]所提到的概念： 
1. 將 World Wide Web 視為是一平台。 
2. 將瀏覽器視為作業系統。 
3. JavaScript 為此系統上之程式語言。 
Google 隨及於 2009 年也呼應了這樣的概念提出了 Chromium OS[6]。Google
期許能建置一個只具備瀏覽器程式的個人裝置，除此之外不需要其他的應用程式
安裝在此裝置上。而 Google 也提供了 App Engine[7]的環境讓應用程式開發人員
可以開發不同的應用程式，並且將應用程式放置於 Google 的伺服器上。因此所
有的應用程式都可透過瀏覽器連結至網路上的應用伺服器使用。這也正是雲端運
算(Cloud Computing)中 Saas(Software as a service, 軟體即服務) 概念的實現。Saas
透過將應用程式佈建於網際網路，應用程式的執行不是在使用者端而是在遠端伺
服器上；使用者得以在任意地點、任意裝置上使用該應用程式，並且無須擔心其
所使用之裝置若損毀所造成的影響，因為所有的程式與資料都是在遠端。 
 4
幾種遠端顯示系統，並針對其使用之畫面呈現方法探討。VNC[11]使用的傳輸協
定為 Remote Frame Buffer Protocol，它將客戶端機器視為遠端的顯示設備。將本
機端的 Frame Buffer 內容透過 RFB 協定傳送至客戶端。客戶端軟體再依座標資
訊，將圖像資料放置在客戶端 Frame Buffer 顯示。VNC 只提供一種繪圖命令：
將某區塊的圖像放置到指定的座標上。由於 VNC 直接擷取 Frame Buffer 畫面，
完全喪失了畫面組成的資訊。RDP[12]顯示畫面的方法為透過繪圖指令呈現畫
面，並利用快取機制將文字與圖片快取在記憶體中，以減少重複傳輸的資料量，
加快圖形顯示速度。ICA[14]使用較高階的繪圖指令。伺服器傳送繪圖指令到客
戶端，客戶端再依繪圖指令重現視窗畫面。THINC[15]藉由在顯示設備裝置驅動
程式設立攔截點，將驅動程式的繪圖動作轉換為幾種更為簡單的繪圖指令；傳送
這些繪圖指令至遠端裝置上執行，遠端裝置便能重現伺服器應用程式畫面。 
 由於本計畫使用瀏覽器為平台，應用程式畫面以網頁方式呈現，表 1 列出不
同網頁通訊方式。 
表 1. 網頁通訊方式比較 
 瀏覽器相依性 是否建立新連線 資料更新方式 即時性
Polling 否 是 Client-Pull 差 
Long Polling 否 是(次數較少) Client-Pull 中 
XHR Streaming 是 否 Server-Push 佳 
Iframe 
Streaming 
否 否 Server-Push 佳 
WebSocket 否 否 Server-Push 佳 
 
 
圖 1 系統平台概念 
 6
3.1 Web & WebSocket Server 
 Web & WebSocket Server 為客戶端與伺服器溝通介面，支援 HTTP 與
WebSocket 通訊協定。客戶端瀏覽器以 HTTP 取得系統頁面時，由於系統頁面包
含將 HTTP 連線升級為 WebSocket 之連線資訊，客戶端瀏覽器於收到此升級資訊
後便會要求 Web & WebSocket Server 將連線升級為 WebSocket 通訊協定。本系統
使用 WebSocket 通訊協定的原因為：WebSocket 通訊協定支援瀏覽器與網頁伺服
器雙向溝通。藉由此項特性，系統的畫面更新資訊便可以由伺服器主動送至客戶
端瀏覽器。 
Web & WebSocket Server 需要與伺服器端 Input Handler、X Server Manager、
Application Manager 溝通，如此才能將客戶端送過來之訊息轉送至這些處理程
序。Web & WebSocket Server 也需要建立一個監聽埠等待 X Server 建立連線，並
將 X Server 傳送過來之畫面更新訊息轉送至客戶端。 
3.2 X Server 
 本系統採取傳送繪圖指令方式呈現遠端應用程式畫面，作法為於 X Server
內部設立攔截點；將攔截到的繪圖請求加入繪圖資訊，重新封裝為繪圖指令，再
傳送至 Web & WebSocket Server 以轉送至客戶端繪製。由於 X Server 於 X 視窗
系統中負責繪製應用程式畫面，於 X Server 攔截繪圖請求為直接有效的作法。 
 本系統將攔截點設立於 X Server 中間層，取得客戶端繪圖負擔與網路頻寬消
耗的平衡，將此處獲得的繪圖資訊，重新封裝再傳送至客戶端。客戶端瀏覽器接
收到的為繪圖指令，相較於應用程式畫面圖片能有效減少頻寬消耗，且繪圖指令
內容包含之繪圖資訊已經過處理，客戶端瀏覽器不須複雜運算便可將應用程式畫
面繪出。 
3.3 X Server Manger 
 本系統支援多人連線，避免使用者之間畫面與輸入互相干擾，每位使用者皆
會配置一 X Server，X Server Manager 負責配置與回收 X Server。當使用者連線
建立時，Web & WebSocket Server 通知 X Server Manager 配置 X Server 給使用者；
當使用者離線時，Web & WebSocket Server 通知 X Server Manager 回收 X Server。 
3.4 Application Manger 
 本系統支援多人連線，每位使用者可開啟不同應用程式同時操作，
Application Manager 負責啟動與結束應用程式。當使用者點選系統頁面應用程式
以啟動應用程式時，Web & WebSocket Server 通知 Application Manager 啟動應用
程式；當使用者在系統頁面按下結束應用程式，Web & WebSocket Server 通知
Application Manager 結束應用程式。 
3.5 Input Handler 
 Input Handler 負責傳送使用者輸入事件至 X Server。當使用者在系統頁面上
操作應用程式，系統頁面上之擷取輸入事件函式將擷取使用者操作應用程式之輸
 8
表 2 驗證系統之應用程式列表 
應用程式名稱 應用程式類型 測試目的 
xclock 時鐘 
以靜態程式測試畫面呈
現效果 
xterm 終端機 
測試鍵盤事件與文字呈
現 
xcalc 計算機 測試滑鼠事件 
gnomine 踩地雷遊戲 
測試幾何圖形繪製與圖
片呈現效果 
 
(A)  使用者介面 (B) 應用程式啟動畫面 
圖 5 系統頁面 
 圖 5 為系統頁面呈現畫面，圖 5 之(A)右下角紅色方框處為應用程式選單，
這些應用程式都是一般 Linux 系統上之應用程式。如圖 6 之應用程式畫面驗證
所示，這些應用程式都未經修改即可直接運行於本系統，並且可順利將畫面傳送
至使用者端之瀏覽器；而使用者亦可透過瀏覽器與該應用程式互動。 
 
5. 計畫成果自評 
 本計畫延續以往有關 WebOS 之研究成果，建構伺服端服務以驗證在行動裝
置上可透過瀏覽器執行所需之服務。因為手持裝置與行動網路已越來越普及，希
望透過本計畫的執行讓 Netbook 等裝置的應用更為廣泛。對於經費有限之機關單
位，可以使用成本較低之行動裝置或是設備，但仍可執行一般之桌面應用程式。
此外，隨著近年雲端運算的發展，眾多軟體服務皆尚未完善；本計畫之系統可作
為一過渡時期之解決方案。 
 10
[10] Ricardo A. Baratto, Shaya Potter, Gong Su, and Jason Nieh, MobiDesk: Mobile 
Virtual Desktop Computing, Proceedings of the 10th Annual ACM 
International Conference on Mobile Computing and Networking, 2004. 
[11] Tristan Richardson, Quentin Stafford-Fraser, Kenneth R. Wood, and Andy 
Hopper, Virtual Network Computing, IEEE Internet Computing Volume2 
Number1, 1998. 
[12] 宋卓翰, Thin-client 應用呈現平台的最佳化設計與實作, 碩士論文, 國立交
通大學, 2006. 
[13] Nathaniel Borenstein and James Blake, Cloud Computing Standards, IEEE 
Internet Computing, May/June 2011. 
[14] Independent Computing Architecture (ICA), 
http://en.wikipedia.org/wiki/Independent_Computing_Architecture. 
[15] Ricardo A. Baratto, Leonard N. Kim, and Jason Nieh, THINC: A Virtual 
Display Architecture for Thin-Client Computin, ACM Symposium on 
Operating Systems Principles, 2005. 
[16] Ian. Fette, and Alexey Melnikov, The WebSocket Protocol, IETF, 2011. 
[17] X Window System, http://en.wikipedia.org/wiki/X_window_system. 
[18] X.Org, http://www.x.org/wiki/. 
[19] 蕭炳輝, 虛擬遠端電腦之實作, 碩士論文, 大同大學資訊工程研究所, 2009. 
[20] 洪義欣, WebOS架構之設計與實作, 碩士論文, 成功大學電通所, July 2009. 
[21] 戴驛權, X 視窗應用程式分享系統之設計與實作, 碩士論文, 成功大學電通
所, July, 2010. 
[22] 石振豪, WebOS 操作環境之行動裝置虛擬桌面系統, 碩士論文, 成功大學
電通所, July, 2010. 
[23] 蔡侑縉, Web 作業系統環境音訊傳輸機制之設計與實作, 碩士論文, 成功大
學電通所, July, 2011. 
[24] 林建宏, XHTML5:基於 HTML5 之雲端計算環境 X 視窗遠端操作系統, 碩
士論文, 成功大學電通所, July, 2012 
 2
2 日上午之專題演講外，全程參與會議各議程，並於 9 月 4 日上午第一場分組論文發表會擔任分
組主席，主持以系統架構為主題之論文口頭報告議程。 
 
表一、 IEEE HPCC-2011 與 IEEE/AHPCN-2011 聯合國際學術研討會名稱表 
類別 代號 簡  稱 全  稱 
MC-1 HPCC-2011 
The 13th IEEE International Conference on High Performance 
Computing and Communications 
MC-2 UIC-2011 
The 8th International Conference on Ubiquitous Intelligence and 
Computing 
MC-3 ATC-2011 
The 8th International Conference on Autonomic and Trusted 
Computing 
同 
 
地 
 
舉 
 
辦 
MC-4 AHPCN-2011 
International Symposium on Advances of High Performance 
Computing and Networking 
WS-1 FTDCS-2011 
The 13th IEEE International Workshop on Future Trends of 
Distributed Computing Systems 
WS-2 ESCAPE-2011 
The 2011 International Workshop on Extreme Scale Computing 
Application Enablement - Modeling and Tools 
WS-3 SHPCC-2011 
The 2011 International Workshop on Sustainable HPC Cloud 
Computing 
WS-4 EMCA-2011 
The 2011 International Workshop on Embedded Multi-Core 
Computing and Applications 
WS-5 USST-2011 
The 2011 International Workshop on Ubiquitous Service 
Systems and Technologies 
WS-6 USWAN-2011 
The 2011 International Workshop on Ubiquitous Services, 
Wireless Applications and Networking 
聯 
 
 
合 
 
 
舉 
 
 
辦 
WS-7 MELT-2011 
The 4th International Workshop on Mobile Entity Localization 
and Tracking 
 
 
2011年IEEE高效能計算與網路進展國際學術研討會(IEEE/AHPCN-2011)與第13屆IEEE高效
能計算與通訊國際學術研討會於9月2日舉行正式開幕典禮，會場地點設於班夫會議中心(Banff 
Conference Center)之會議廳與研討室。本次會議之議程安排除了各論文發表與討論之場次外，另
有專題演講(Keynote Address)，專題座談會(Panel Discussion)等場次。因會期時間有限並有聯合舉
辦之國際學術會議與研討會各議程，故論文發表議程以多軌進行，故與會者必須事先規劃並選擇
參與之場次，甚至於議程進行中趕赴另一場次；會議進行中因此常見場內外多人來往穿梭之場景，
使本次會議顯得頗為熱鬧。本人係第一次參與AHPCN國際學術研討會，主要目的包含：(1)將本人
與研究團隊之研發成果與國際學者分享，並汲取與會者專業之意見與評論，以作為改進與繼續努
 4
三、考察參觀活動(無是項活動者略) 
本次參與國際會議發表論文並未安排考察參觀活動。 
四、建議 
1. 鼓勵國內舉辦之國際學術會議或研討會以聯合舉辦方式舉行以擴大學術交流範圍。 
2. 盡量增加補助參與國際學術會議發表論文之經費。 
五、攜回資料名稱及內容 
AHPCN-2011，HPCC-2011，UIC-2011，ATC-2011 及本次聯合舉辦之各研討會亓論文及合
輯光碟片ㄧ片。 
六、其他 
1. 瞭解 IEEE 舉辦聯合學術會議與研討會之作業方式與舉辦模式。 
2. AHPCN-2011 發表論文英文摘要： 
  Title: Building A Multi-Kernel Embedded System with High Performance IPC Mechanism 
  Abstract: 
Many consumer embedded system products nowadays are built on platforms with 
System-On-a-Chip (SOC) in which two or more processor cores, which are not 
necessarily of the same type, are put into a single chip and form the architecture of 
Chip-level Multi-Processor (CMP). Although such platform is capable of achieving high 
performance at relatively low cost, the system architecture of CMP brings new 
challenges in system development and increases complexity in developing embedded 
software especially at the level of kernel or operating system. This paper presents our 
experience and some preliminary results from building a multi-kernel embedded system 
with high performance Inter-Process Communication (IPC) mechanism for application 
software running on the platform of a newly developed multi-core SOC, namely PAC 
Duo SOC, which is the latest product from the PAC (short for Parallel Architecture Core) 
Project implemented at Industry Technology Research Institute (ITRI) in Taiwan. PAC 
Duo SOC is a heterogeneous multi-processor SOC composed of one ARM926 core 
serving as the general purpose processor (GPP) and two ITRI PAC DSP cores serving as 
the special purpose processors (SPP). We ported Linux operating system to run on the 
ARM926 processor and ported the real-time kernel C/OS-II to run on one PAC DSP 
core, leaving the other PAC DSP core with the option of running either another C/OS-II 
or a different kernel. To address the issues in IPC, a high performance message-passing 
mechanism is developed. Its design not only takes application-specific requirements into 
account but also takes advantages of hardware features. 
 
 
100年度專題研究計畫研究成果彙整表 
計畫主持人：陳敬 計畫編號：100-2221-E-006-191- 
計畫名稱：研製雲端計算環境行動裝置之軟體服務平台 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 1 1 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
