I 
 
計畫中文摘要 
此計畫預計於兩年期間完成低功率電路技術應用於可調視訊編碼之研究，目前已完成
關鍵模組－高效能細緻可調性(Fine Granularity Scalable; FGS)材質編碼器與高產出率去區
塊濾波器電路設計，所提出之高效能細緻可調性材質編碼器與硬體共用設計方式相比，硬
體成本接近、運算複雜度為 1/3 且產出率為三倍，編碼基礎層附加一或二層 FGS 層時 R-D
效能可提升約 1dB 左右。經由 TSMC0.18μm 製程技術實現並測試，我們提出的高效能畫
質可調性材質編碼器可支援 HDTV1080p@60fps 即時性三層 FGS 編碼且邏輯閘數(gate 
counts)僅為 65k，非常適合低功率之應用。相關成果已刊登於 SCI 國際期刊並發表多篇 EI
國際研討會論文，相關專利或智慧財產權亦正申請中。 
 
關鍵詞： H.264、晶片設計、可調視訊編碼 
 
計畫英文摘要 
This project tends to study the applications of low-power techniques to Scalable Video Coding 
(SVC) in two years. In this year, we have realized and presented a high performance and low cost 
fine granularity scalable (FGS) texture encoder hardware architecture design which supports 
HDTV 1080p@60fps real time SVC encoding. FGS method, one of the key features of SNR 
scalability is especially important when video transmits across channel with bandwidth 
fluctuation. The FGS coding bitstream can be truncated at any byte-aligned position and decoded 
as lower quality picture. In the aspect of re-quantization (REQ) loops design, we propose a new 
re-quantization scheme called Fast-REQ. Comparing with conventional time multiplexing REQ 
scheme, the proposed Fast-REQ owns 2/3 computation complexity reduction and three times 
throughput improvement at similar hardware cost. The Fast-REQ scheme can increase coding 
performance about 1 dB PSNR at low bitrate applications. Being implemented using TSMC 0.18
μm technology, the proposed FGS texture encoder can achieve the real-time requirement of 
HDTV 1080p@60fps at the cost of 65k gates. Compared with previous works, the proposed 
design not only achieves higher real-time performance requirements but also possesses higher 
hardware computing efficiency. 
 
Key words: H.264, IC design, SVC, video coding 
3 
This work presents a single-loop RE-Quantization (REQ) design for FGS video encoders to 
dramatically lower down the computation complexity caused by multiple re-quantization loops. 
Adopting the proposed single-loop re-quantization coding scheme can reduce the hardware cost and 
increase the data throughput rate of the FGS encoder. As for a three-layer FGS system, the proposed 
single-loop REQ coding scheme reduces 66.7% computation complexity of the re-quantization loop by 
simplifying multiple coding loops to single loop through algorithmic level optimization. Besides, plenty 
of experimental results demonstrate that the proposed scheme reaches very similar video quality as the 
conventional scheme in terms of both objective and subjective tests. After being implemented by using 
the TSMC0.18-μm technology, this work can achieve real-time performance of 4K× 2K @ 30 fps 
(frames per second) when operated at 90 MHz at the cost of 12.9K gates.  
 
Fig.  1. Original picture and corresponding reconstructed pictures of base layer and FGS layers (CIF, 
30fps, base layer QP = 42) 
The rest of this report is organized as follows: Section II briefly reviews the existing 
re-quantization loop and illustrates the design challenges. Section III accordingly proposes the 
single-loop re-quantization scheme. Since the proposed scheme is optimized from the fundamental 
algorithmic level, the improvement is remarkable. The implementation, verification, and comparison 
details of this work are disclosed in Section IV. At last, we give the conclusions in Section V.
Base layer Original Base layer + FGS 
Base layer + FGS layers Base layer + FGS layers 
 2 
parameter Q0, to get data w1. After that, the FGS coefficients z1, i.e. the coefficients of the first 
FGS layer, are calculated from data w1 according to (1), shown in the following: 
   ⎩⎨
⎧ ==
otherwisewClip
sbw
z
;)1- ,1 ,1(
    00;                1
1                                       (1) 
⎪⎩
⎪⎨
⎧
<
>
=
otherwisex
bxb
axa
baxClip
;
        ;
         ;
) , ,(where                  
If the base layer residual sb0 is zero, the enhancement layer coefficient z1 becomes important so 
that the whole bits of the corresponding residual datum w1 are reserved for the enhancement 
layer 1. On the other hand, if the base layer residual sb0 is not zero, a clipping operation is 
applied to the corresponding residual datum w1 to generate z1. Then, the first enhancement layer 
coefficient z1 can be delivered for entropy coding. Besides, the first enhancement layer residual 
sb1 can be reconstructed from z1 and sb0, as illustrated in Fig. 3.  By using similar steps as 
displayed above, the second FGS layer coefficient z2 and the third FGS layer coefficient z3 can 
be generated as well. The major realization challenge is that each FGS enhancement layer 
requires a complete re-quantization loop. Meanwhile, each re-quantization loop consists of three 
multiplications and six additions. Therefore, it becomes unpractical to implement a three-layer 
FGS system in a straightforward manner.   
II. THE PROPOSED SINGLE-LOOP REQ DESIGN 
The proposed scheme includes three stages of optimization presented in details in the 
 4 
 
 
Fig. 3. Block diagram of the conventional multi-loop re-quantization (REQ) scheme 
 
B. Replacing quantization with right shift 
The quantization parameter of the REQ loop 3 is also half of that of the loop 2, and so 
on. These quantizations can be replaced by simple right shift operations. Hence, the three 
quantizations can be performed by sharing a single hardware quantizer with two right 
shifters.   
C. Sharing single-loop for multi-loop REQ 
The mathematical model for the REQ is demonstrated from (2) to (4) as follows: 
 6 
( )
]0[     
   1)1(     
2)2(1)1(2)2(     
11)2(1
302)2(303
r
rr
rrrr
rr
brbrw
=
<<>>−=
<<>>+<<>>−<<>>−=
<<<<>>−>>
−<<+<<>>−<<−=
                      (7) 
From (1) and (5) to (7), we can have the coefficients z1 to z3, respectively for FGS layer 1 to 
layer 3, as shown in the following: 
]0[3
]1[2
;)1- ,1 ,1(
    00;                1
1
rz
rz
otherwisewClip
bw
z
=
=
⎩⎨
⎧ ==
                                       (8) 
Eq. (8) denotes that z2 and z3 are respectively the bit-1 and bit-0 of the quantized residual r. 
Thus, only z1 needs computation. Consequently, we can diminish the high computation 
complexity of the multi-loop REQ scheme and propose the single-loop REQ architecture, as 
illustrated in Fig. 4, with much lower costs. Comparing with the conventional multi-loop 
REQ scheme shown in Fig. 3, using the proposed REQ scheme can reduce almost 2/3 
computation complexity. 
The Rate-Distortion (R-D) comparison of the proposed single-loop REQ scheme with the 
conventional one is shown in Fig. 5. We just illustrate an R-D plot of plenty of experiment 
results we have finished because all plots show the same trend. Fig. 5 shows the R-D 
performance of this work when encoding Soccer sequence with frame size of 4CIF 
(704× 576), frame rate of 30 fps, and base layer quantization parameter of 30. 
From Fig. 5, we observe that the proposed scheme, denoted by fast-REQ, performs 
almost as well as the conventional one, denoted by JSVM, in terms of the R-D index. This 
 8 
nLint tool. After being synthesized by using the TSMC 0.18-μm technology, this work costs only 
12.9K equivalent two-input NAND gates.   
The evaluation and comparison of this work are shown in Table I. The work [10] is a 
time-multiplexing design which reuses the same piece of hardware circuit to finish the 
calculations of three REQ loops shown in Fig. 3 in turn. Thus, the numbers of multiplications of 
[10] is three times higher than this work. Besides, the data throughput of [10] is only 1/3 of this 
work. The proposed single-loop algorithm enables the data throughput rate of this work to be 
three times higher than that of [10]. As for comparing with parallel computing architectures, one 
can expect that although the parallel computing architectures can reach the same data throughput 
rate as the proposed work, they may be unpractical due to the much higher area costs. 
TABLE I 
EVALUATION AND COMPARISON OF THIS WORK WHERE N DENOTES THE SYSTEM PARALLELISM.  
 Re-designed [10]
Parallel 
computing Proposed 
Number of 
multiplications 9N 9N 3N 
Number of additions 18N 18N 7N 
Throughput 
(pixel/cycle) N 3N 3N 
Operating frequency 
(MHz) 120 90 (Estimated) 90 
Area (Gates) 13.8K 40K (Estimated) 12.9K 
Achieved 
performance 
HDTV720p 
@30fps 
4Kx2Kp 
@30fps 
4Kx2Kp 
@30fps 
 
 10 
[9] Joint Video Team of ISO/IEC MPEG and ITU-T VCEG, “Joint scalable video model 10,” 
Apr. 2007.  
[10] Y. J. Chen, Y. H. Chen, T. D. Chuang, C. T. Li, S. Y. Chien, and L. G. Chen, “Architecture 
Design of Fine Grain SNR Scalable Encoder with CABAC for H.264/AVC Scalable 
Extension,” IEEE Workshop on SIPS , pp. 515–520, Oct. 2007. 
 
計畫成果自評 
 
研究內容與原計畫相符，並已達成原計畫內預期完成之各項目標，研究成果具學術價值，
本計畫成果已投稿至國際學術期刊與國際研討會並進行專利申請，目前已刊登之論文如下： 
 
1. Kuan-Hung Chen, and Kuei-An Chen, “Single-loop Re-quantizer for FGS Encoding,” IEEE 
Trans. Consumer Electronics, vol. 55, no. 4, pp. 2066-2071, November 2009. (SCI&EI) 
2. Kuan-Hung Chen, and Hsian-Pin Chen, “Quadruple Filtering Schedule for H.264/AVC 
Deblocking Filter,” in Proc. IEEE Int. Symp. VLSI Design, Automation & Test, Hsinchu, 
Taiwan, 26-29 April 2010. (EI) 
3. Kuan-Hung Chen, Yueh-Shu Li, and Kuei-Chung Chang, “A Low-Energy Multi-Length FFT 
Processor for DVB-T/H Systems,” in Proc. the 14th World Multiconference on Systemics, 
Cybernetics and Informatics, Orlando, USA, 29 June -2 July 2010. (EI) 
4. Kuan-Hung Chen, Kuei-An Chen, Chun-Hsien Yeh, and Kuei-Chung Chang 
“Low-complexity, Single-loop Re-quantizer for Multi-layer FGS Video Encoding,” in Proc. 
the 20th VLSI Design/CAD Symposium, Hua-lien, Taiwan, August 2009. 
 12 
可利用之產業 
及 
可開發之產品 
可利用之產業：消費電子產業 
可開發之產品：數位多媒體攝錄/播放器 
技術特點 
低功率/高效能之電路設計 
推廣及運用的價值 
可降低數位多媒體攝錄/播放器的功率消耗與面積成本 
※ 1.每項研發成果請填寫一式二份，一份隨成果報告送繳本會，一份送 貴單位
研發成果推廣單位（如技術移轉中心）。 
※ 2.本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。 
※ 3.本表若不敷使用，請自行影印使用。 
頁  2 
 
(b) Regular sessions: 本次大會包含 211 篇 Lectures 及 Posters，主題包含： 
1. Biomedical engineering 
2. Human information systems 
3. Communication and network systems 
4. Image and speech processing 
5. Control systems, technologies, and applications 
 
二、與會心得 
冠宏所發表之論文：A Low-Energy Multi-Length FFT Processor for DVB-T/H 
Systems 於七月一日上午以口頭演說方式發表，與會國際學者相當多(圖二)，因我
們所提設計深具學術與實用價值，發表後有許多學者發問討論，反應良好。除發表
論文之外，冠宏也充份利用時間參與其他論文之研討，收穫良多；其中，Optical 
systems, technology, and applications/Image and speech processing 中編號 7 來自馬來
西亞的論文開發偵測 Oil palm 的果實是否成熟，個人認為相當實用且尚有改善空
間，根據講者表示未來他們將實現該系統於 PDA 之上，以便利農民。以下為冠宏
主要參與研討之論文： 
        Biomedical engineering: 
(1) Orientation of cells cultured in vortex flow with swinging plate in Vitro 
(2) Effects of electric field on myocytes in Vitro 
(3) Effects of electric simulation on penetration of molecules into Agarose gel 
(4) Effects of medium flow on cultured cells 
(5) Effects of static magnetic field on muscle cells in Vitro 
        Optical systems, technology, and applications/Image and speech processing: 
(1) Non-invasive diagnostic breast imaging using a hand-held optical imager 
(2) A fast and accurate approach image identification based on general randon 
transform 
(3) An improved accuracy rate for face authentication with pose adjustment based on 
2D-3D transform 
(4) Visualization study of helium-air exchange flow using optical systems 
(5) Segmentation of printed gray scale dot matrix characters 
(6) A new reference-free infrared image quality metric for nonuniformity correction 
(7) Hui optical properties to model oil palm fresh fruit bunches maturity index 
          Communication systems, technologies and applications: 
(1) A low-energy multi-length FFT processor for DVB-T/H systems 
頁  4 
 
 
圖三、冠宏(右)與日本大阪工業大學 Hashimoto 教授(中)及澳門大學麥炳源教授(左)合影 
we disclose the mathematical model of the 8K-point FFTs based on 
the chosen algorithm as an example for illustrating the derivation 
of multi-length FFT computation. Such arrangement is to keep the 
paragraph succinct. This derivation also inspires us the innovation 
of designing the proposed multi-long-length FFT processor.  
The N-point Discrete Fourier Transform (DFT) of a sequence 
x(n) is defined as Eq. (1) in the follows: 
∑−
=
−== 1
0
10,)()(
N
n
nk
N NkWnxkX K
                   (1) 
where x(n) and X(k) are respectively the input and the output 
sequence composed of complex numbers. The twiddle factor is 
shown in Eq. (2).  
)2sin()2cos(
)2(
N
nkj
N
nkeW N
nkjnk
N
πππ −== −             (2) 
The computational complexity of Eq. (1) is O(N2) when the 
required computations are directly executed. The computational 
complexity can be reduced to O(N Nrlog ) by using Cooley-Tukey 
decomposition [17], where r denotes the radix number of the 
adopted FFT algorithm. Seemingly, the computational complexity 
decreases as the radix increases for a fixed-length FFT computation. 
This indicates that lager radices are more suitable for long-length 
FFT computations. However, the FFT algorithm with excessive 
large radix may be difficult to implement. 
A. Algorithmic Analysis 
According to [11], higher radix FFT algorithms will induce 
higher circuitry complexity. This is the main reason that algorithms 
with radix number higher than eight are seldom used. Consequently, 
this work explores higher radices, e.g. radix-16 and radix-32 
algorithms, which may still be realizable. Table 1 analyzes the 
computation complexity of FFT algorithms in terms of the numbers 
of multiplications and additions based on the radix numbers from 
radix-2 to radix-32. This work concerns the lengths of 2K-, 4K-, 
and 8K-point of FFT, but one cannot finish these three kinds of 
FFT by using some certain radices. Hence, not all of them are listed 
in the second column of Table 1. Furthermore, to have a common 
length for easy comparison, we use smaller radices to compensate 
the remainder part of the 8K-point FFT computation in some 
algorithms and calculate the complete complexity of the 8K-point 
FFT. In the FFT decompositions with radix number larger than four, 
the complex multiplications can be further classified into 
non-trivial multiplications and trivial ones such as these with 
multipliers of 1±  or j± . Again, for easy comparison, we 
convert the complex multiplications and complex additions to 
equivalent real multiplications and real additions by using the 
following facts:  
(1) one nontrivial complex multiplication involves four real 
multiplications and two real additions; 
(2) one trivial complex multiplication includes two real 
multiplications and two real additions; 
(3) one complex addition consists of two real additions.  
The equivalent data are listed respectively in the last two 
columns of Table 1. These data are further normalized as shown in 
Table 2 where we find that using radix-16 algorithm can result in 
lower computation complexity than using algorithms with smaller 
radices. Although using radix-32 algorithm is also more efficient 
than using radix-16 algorithm, the circuitry complexity may be too 
high to implement. Besides, using radix-16 algorithm can reduce 
about 7000 real multiplications than using radix-8 algorithm; 
however, using radix-32 algorithm reduces only about 3000 real 
multiplications than using radix-16 algorithm. Therefore, we 
decide to adopt radix-16 algorithm in this work. 
B. Mathematical Model for 8K-point FFT 
  Here we take the longest FFT, i.e. 8K-point FFT, as an example 
for demonstrating the mathematical derivation. Because 8K-point 
FFT cannot be exactly calculated using only radix-16 algorithm, 
radix-2 algorithm is also required. We first apply radix-2 algorithm 
on 8K-point FFT computation and get the following intermediate 
results:  
Let 
409501
2
81920,4096
2
8192
12121 LL =−=+=+= nnnnnn
 
                         1,02 =n  
409501
2
81920,2 121 LL =−=+= kkkk
 
              1,02 =k  
Filling n and k into Eq. (1), it turns into Eq. (3) 
∑ ∑
∑ ∑
=
−
=
= =
++
⎪⎭
⎪⎬
⎫
⎪⎩
⎪⎨
⎧ +=
+=+
4095
0
40968192
int2
1
0
221
4095
0
1
0
)2)(4096(
81922121
1
1121
2
22
1 2
2121
)4096(
)
2
8192()2(
n
kn
factorTwiddle
kn
FFTpo
n
kn
n n
kknn
WWWnnx
WnnxkkX
3214444 34444 21
 (3) 
TABLE 2 
 NORMALIZED DATA OF EQUIVALENT REAL MULTIPLICATION AND REAL 
ADDITION FOR 8K-POINT FFT SHOWN IN TABLE 1 
Algorithm Normalized real multiplication 
Normalized real 
addition 
Radix-2 1.55 1.05 
Radix-4 1.40 1.02 
Radix-8 1.07 0.99 
Radix-16 1 1 
Radix-32 0.97 1.00 
TABLE 1 
 COMPUTATION COMPLEXITY ANALYSIS OF SEVERAL COMMON FFT 
ALGORITHMS 
Complex 
multiplication Algori- 
thm Length Non- 
trivial Trivial 
Complex 
addition 
Equiva- 
lent real 
multipli- 
cation 
Equiva-
lent real 
addition
2048 8194 0 22528 32776 61444
4096 18434 0 49152 73736 135172Radix-2 
8192 40962 0 106496 163848 294916
4096 13996 0 49152 55984 126296
Radix-4 
8192 36864 0 106496 147456 286720
4096 10168 4096 49152 48864 126832
Radix-8 
8192 23992 8192 106496 112352 277360
4096 7408 7680 49152 44992 128480
Radix-16 
8192 18672 15360 106496 105408 281056
Radix-32 8192 16864 17408 106496 102272 281536
concentrate on the management tasks such as work allocation, data 
flow control, interrupt operation, etc. The hardware blocks own the 
advantages like high performance, low power consumption, and 
low area cost; however, they are usually not flexible to accelerate 
multi-length computations. To provide enough flexibility to a 
hardware block without weakening its good features, particular 
design efforts are required.  
A. Proposed Multi-Length FFT Processor 
Because the cache size of the cached-memory architecture 
grows exponentially as the radix number increases and we adopt a 
rather large radix size, i.e. radix-16, the cached-memory 
architecture is not suitable for this work. The pipeline architecture 
may be more proper; nevertheless, the hardware cost is too high, 
especially for long-length, e.g. the 8K-point, FFT computations. If 
we re-classify the FFT architectures according to the degree of 
time-multiplexing, the memory-based architecture (including the 
cached-memory architecture) and the pipeline architecture are 
located on the extremely two different ends [19]. Consequently, 
this work proposes a new architecture which compromises the 
opposite features between the memory-based architecture and the 
pipeline architecture.  
In this study, both the 2K- and the 4K-point FFTs can be 
calculated in three stages of computation, and the 8K-point FFT 
can be finished in four stages of computations. From the processor 
design point of view, each stage of the FFT computation can be 
implemented in a coarse-grain pipeline stage. These coarse-grain 
pipeline stages may be folded due to their high similarity as Fig. 
1(a) and the mathematical model presented in Section II show. 
Take the 8K-point FFT for example, Eq. (3), Eq. (5), Eq. (8), and 
Eq. (10) respectively represent four computation stages of the FFT. 
Except the first stage which is a radix-2 FFT, each stage consists of 
a radix-16 FFT computation. Besides, the first three stages require 
non-trivial multiplications for twiddle factors while the last stage 
does not. The situations are very similar in the 2K- and the 
4K-point FFT.  
Fig. 1 inspires us to develop a novel low-energy VLSI 
architecture which provides a bright trade-off between the pipeline 
architecture and the memory-based architecture. Fig. 2 illustrates 
the proposed FFT processor that possesses a memory block, a 
multi-radix butterfly unit, a complex multiplication block, 
commutators, and a controller. The memory block exists for 
temporal input data storage, intermediate data storage, and data 
regulation. The multi-radix butterfly unit, a central computation 
unit of the proposed architecture, is designed as a reconfigurable 
pipeline data-path to implement the multi-radix computations, i.e. 
the radix-16, radix-8, and radix-2 algorithms, in a cost-efficient 
way. The commutators regulate the data-flow of FFT computation. 
The controller sends proper signals to all components to finish the 
FFT computation seamlessly.  
This work possesses the features such as low area cost and 
high flexibility. The high flexibility is achieved by using the 
controller unit and the reconfigurable butterfly unit shown in Fig. 2 
and Fig. 3. Owning high flexibility enables this work to compute 
multi-length FFTs. The proposed multi-radix butterfly unit shown 
in Fig. 3, composed of four radix-2 butterfly units, is designed 
according to the signal-flow plots illustrated in Fig. 4. Two simple 
hard-wired multipliers are respectively located at the ends of the 
first and the second butterfly stage for trivial multiplications. 
Furthermore, there is a simple interchanging and complementing 
circuitry for multiplications of –js at the end of the third butterfly 
stage. The two complex multipliers are arranged outside the 
butterfly unit as shown in Fig. 2. Hence, the proposed multi-radix 
butterfly unit can process two intermediate data per cycle. By 
Fig. 3.  The proposed multi-radix butterfly unit based on a two-way MDC architecture 
Fig. 4.  The signal flow plot of radix-16 algorithms Fig. 2.  The proposed PIMA-based FFT processor 
architecture offers a major advantage of higher flexibility. 
Nevertheless, it also induces additional cache overhead, higher 
controller complexity, and lower data throughput rate. To increase 
the data throughput rate, [8] uses four pairs of complex multipliers 
and butterfly units to speed up the processing capability. Besides, 
the size of the cache memory inside [8] may increases 
exponentially as the radix number of the adopted algorithm 
augments. This keeps the cached-memory architecture from 
adopting higher radix algorithms which are beneficial to 
long-length FFT computation. The design [14] exploits pipeline 
architecture which possesses the advantage of high data throughput 
rate. Nevertheless, the pipeline architectures spend higher area and 
power overheads. The design [22] presents a low-power and 
multi-length FFT processor that can compute 1K/2K/4K/8K points, 
based on the cache-memory architecture. From Table 3, the area 
cost of this work is smaller than that of both [8] and [22] because 
this work saves at least two complex multipliers. Based on the 
8K-point FFT, this work consumes only 11.8 μJ of energy which is 
lower than all of the three previous works. In addition, we find that 
this work improves at most more than 53% higher energy 
efficiency for low-energy FFT implementation from the normalized 
energy index shown in Table 3. Compared with the 
cached-memory designs, the proposed work saves the energy 
consumption by reducing the memory access. Compared with the 
pipeline designs, this work uses less circuitry capacitance that leads 
to lower energy dissipation. By seeking a good compromise 
between memory access and circuitry capacitance, the proposed 
work provides a novel FFT architecture that is energy-efficient for 
DVB-T/H systems.  
 
5. CONCLUSION 
    Based on the proposed multi-length architecture, this paper 
presents a low-energy 2K/4K/8K-point Fast Fourier 
Transformation (FFT) processor for Digital Video 
Broadcasting-Terrestrial/Handheld (DVB-T/H) systems. The 
proposed architecture provides a bright trade-off between hardware 
overhead and memory access. This work possesses the advantages 
of high flexibility, high energy efficiency, and low controller 
complexity. Besides architectural improvement, further energy 
reductions are obtained by optimizing the main memory block and 
the complex multipliers. After being implemented by using the 
TSMC 1P6M 0.18-μm CMOS technology, the proposed FFT 
processor can complete the 2K/4K/8K-point FFT in the 
performance budget specified in DVB-T/H with the operating 
frequency of 20 MHz, and dissipates less than 11.8 μJ of energy. 
This measuring result shows that this work enhances more than 
53% higher energy efficiency for multi-long-length FFT 
implementation. 
 
6. REFERENCES 
[1] ETSI, “Digital video broadcasting (DVB); Framing structure, channel 
coding and modulation for digital terrestrial television,” ETSI EN 300 
744 v1.5.1, 2004. 
[2] ETSI, “Digital video broadcasting (DVB); transmission systems for 
handheld terminals (DVB-H),” ETSI EN 302 304 v1.1.1, 2004. 
[3] C. L. Wey, W. C. Tang, and S. Y. Lin, “Efficient memory-based 
architectures for digital video broadcasting,” IEEE Int. Sympo. VLSI 
Design, Automation and Test, pp. 1-4, 2007. 
[4] C. Wang, W. S. Gan, C. C. Jong, and J. Luo, “A low-cost 256-point 
FFT processor for portable speech and audio applications,” IEEE Int. 
Sympo. Integrated Circuits, pp. 81-84, Sept. 2007. 
[5] V. Baireddy, H. Khasnis, and R. Mundhada, “A 64-4096 point 
FFT/IFFT/windowing processor for multi-standard ADSL/VDSL 
applications,” IEEE Int. Sympo. Signals, Syst., Electronics, pp. 
403-405, Aug. 2007. 
[6] B. M. Baas, “A Low-Power, High-Performance 1024-Point FFT 
Processor,” IEEE J. Solid-State Circuits, vol. 34, no. 3, pp. 380-387, 
Mar. 1999. 
[7] N. Miyamoto, L. Karnan, K. Maruo, K. Kotani, and T. Ohmi, “A 
small-area high-performance 512-point 2-dimensional FFT 
single-chip processor,” IEEE Euro. Solid-State Circuits Conf., pp. 
603-606, Sept. 2003. 
[8] Y. W. Lin, H. Y. Liu, and C. Y. Lee, “A Dynamic Scaling FFT 
Processor for DVB-T Applications,” IEEE J. Solid-State Circuits, vol. 
39, no. 11, pp. 2005-2013, Nov. 2004. 
[9] C. C. Wang, J. M. Huang, and H. C. Cheng, “A 2K/8K mode 
small-area FFT processor for OFDM demodulation of DVB-T 
receivers,” IEEE Trans. Consumer Electronics, vol. 51, no. 1, pp. 
28–32, Feb. 2005. 
[10] K. Maharatna, E. Grass, and U. Jagdhold, “A 64-point Fourier 
transform chip for high-speed wireless LAN application using 
OFDM,” IEEE J. Solid-State Circuits, vol. 39, no. 3, pp. 484-493, 
Mar. 2004. 
[11] W. C. Yeh, and C. W. Jen, “High-speed and low-power split-radix 
FFT,” IEEE Trans. Signal Processing, vol. 51, no. 3, pp. 864-874, 
Mar. 2003. 
[12] H. Lee, and M. Shin, “A high-speed low-complexity two-parallel 
radix-24 FFT/IFFT processor for UWB applications,” IEEE Asian 
Solid-State Circuits Conf., pp. 284-287, Nov. 2007. 
[13] Y. Chen, Y. C. Tsao, Y. W. Lin, C. H. Lin, and C. Y. Lee, “An 
indexed-scaling pipelined FFT processor for OFDM-based WPAN 
applications,” IEEE Trans. Circuits Syst. II, vol. 55, no. 2, pp. 
146-150, Feb. 2008. 
[14] H. Y. Lee, and I. C. Park, “Balanced binary-tree decomposition for 
area-efficient pipelined FFT processing,” IEEE Trans. Circuits Syst.
－I: Regular Papers, vol. 54, no. 4, pp. 889-900, Apr. 2007. 
[15] K. H. Chen, and Y. S. Li, “A multi-radix FFT processor using 
Pipeline In Memory-based Architecture (PIMA) for DVB-T/H 
Systems,” IEEE Int. Mixed Desig. Integrated Circuits Syst., pp. 
549-554, June 2008. 
[16] K. H. Chen, and Y. S. Chu, “A spurious-power suppression technique 
for multimedia/DSP applications,” IEEE Trans. Circuits Syst.－I: 
Regular Papers, vol. 56, no. 1, pp. 132-143, Jan. 2009.  
[17] J. W. Cooley, and J.W. Tukey, “An algorithm for the machine 
calculation of complex Fourier series,” Math. Compt., vol. 5, no. 5, pp. 
87-109, 1965. 
[18] K. K. Parhi, “VLSI digital signal processing systems,” A 
Wiley-Interscience Publication, 1999. 
[19] A. P. Chandrakasan, and R. W. Brodersen, “Low power digital 
CMOS design,” Kluwer Academic Publishers, 1995. 
[20] “Virtual silicon preliminary data sheet on 
single-port/dual-port/two-port SRAM compiler for UMC 0.18 m 　
(L180GII),” pp. 1-3, 2004.  
[21] L.G. Johnson, “Conflict free memory addressing for dedicated FFT 
Hardware,” IEEE Trans. Circuits Syst.－ II, vol. 39, no. 5, pp. 
312-316, May 1992. 
[22] C. L. Hung, S. S. Long, and M. T. Shiue, “A low-power and 
variable-length FFT design for flexible MIMO OFDM systems,” 
IEEE Int. Symp. Circuits Systs., pp. 705-708, May 2009.  
 
頁  2 
 
(b) Regular sessions: 本次大會包含 211 篇 Lectures 及 Posters，主題包含： 
1. Biomedical engineering 
2. Human information systems 
3. Communication and network systems 
4. Image and speech processing 
5. Control systems, technologies, and applications 
 
二、與會心得 
冠宏所發表之論文：A Low-Energy Multi-Length FFT Processor for DVB-T/H 
Systems 於七月一日上午以口頭演說方式發表，與會國際學者相當多(圖二)，因我
們所提設計深具學術與實用價值，發表後有許多學者發問討論，反應良好。除發表
論文之外，冠宏也充份利用時間參與其他論文之研討，收穫良多；其中，Optical 
systems, technology, and applications/Image and speech processing 中編號 7 來自馬來
西亞的論文開發偵測 Oil palm 的果實是否成熟，個人認為相當實用且尚有改善空
間，根據講者表示未來他們將實現該系統於 PDA 之上，以便利農民。以下為冠宏
主要參與研討之論文： 
        Biomedical engineering: 
(1) Orientation of cells cultured in vortex flow with swinging plate in Vitro 
(2) Effects of electric field on myocytes in Vitro 
(3) Effects of electric simulation on penetration of molecules into Agarose gel 
(4) Effects of medium flow on cultured cells 
(5) Effects of static magnetic field on muscle cells in Vitro 
        Optical systems, technology, and applications/Image and speech processing: 
(1) Non-invasive diagnostic breast imaging using a hand-held optical imager 
(2) A fast and accurate approach image identification based on general randon 
transform 
(3) An improved accuracy rate for face authentication with pose adjustment based on 
2D-3D transform 
(4) Visualization study of helium-air exchange flow using optical systems 
(5) Segmentation of printed gray scale dot matrix characters 
(6) A new reference-free infrared image quality metric for nonuniformity correction 
(7) Hui optical properties to model oil palm fresh fruit bunches maturity index 
          Communication systems, technologies and applications: 
(1) A low-energy multi-length FFT processor for DVB-T/H systems 
頁  4 
 
 
圖三、冠宏(右)與日本大阪工業大學 Hashimoto 教授(中)及澳門大學麥炳源教授(左)合影 
we disclose the mathematical model of the 8K-point FFTs based on 
the chosen algorithm as an example for illustrating the derivation 
of multi-length FFT computation. Such arrangement is to keep the 
paragraph succinct. This derivation also inspires us the innovation 
of designing the proposed multi-long-length FFT processor.  
The N-point Discrete Fourier Transform (DFT) of a sequence 
x(n) is defined as Eq. (1) in the follows: 
∑−
=
−== 1
0
10,)()(
N
n
nk
N NkWnxkX K
                   (1) 
where x(n) and X(k) are respectively the input and the output 
sequence composed of complex numbers. The twiddle factor is 
shown in Eq. (2).  
)2sin()2cos(
)2(
N
nkj
N
nkeW N
nkjnk
N
πππ −== −             (2) 
The computational complexity of Eq. (1) is O(N2) when the 
required computations are directly executed. The computational 
complexity can be reduced to O(N Nrlog ) by using Cooley-Tukey 
decomposition [17], where r denotes the radix number of the 
adopted FFT algorithm. Seemingly, the computational complexity 
decreases as the radix increases for a fixed-length FFT computation. 
This indicates that lager radices are more suitable for long-length 
FFT computations. However, the FFT algorithm with excessive 
large radix may be difficult to implement. 
A. Algorithmic Analysis 
According to [11], higher radix FFT algorithms will induce 
higher circuitry complexity. This is the main reason that algorithms 
with radix number higher than eight are seldom used. Consequently, 
this work explores higher radices, e.g. radix-16 and radix-32 
algorithms, which may still be realizable. Table 1 analyzes the 
computation complexity of FFT algorithms in terms of the numbers 
of multiplications and additions based on the radix numbers from 
radix-2 to radix-32. This work concerns the lengths of 2K-, 4K-, 
and 8K-point of FFT, but one cannot finish these three kinds of 
FFT by using some certain radices. Hence, not all of them are listed 
in the second column of Table 1. Furthermore, to have a common 
length for easy comparison, we use smaller radices to compensate 
the remainder part of the 8K-point FFT computation in some 
algorithms and calculate the complete complexity of the 8K-point 
FFT. In the FFT decompositions with radix number larger than four, 
the complex multiplications can be further classified into 
non-trivial multiplications and trivial ones such as these with 
multipliers of 1±  or j± . Again, for easy comparison, we 
convert the complex multiplications and complex additions to 
equivalent real multiplications and real additions by using the 
following facts:  
(1) one nontrivial complex multiplication involves four real 
multiplications and two real additions; 
(2) one trivial complex multiplication includes two real 
multiplications and two real additions; 
(3) one complex addition consists of two real additions.  
The equivalent data are listed respectively in the last two 
columns of Table 1. These data are further normalized as shown in 
Table 2 where we find that using radix-16 algorithm can result in 
lower computation complexity than using algorithms with smaller 
radices. Although using radix-32 algorithm is also more efficient 
than using radix-16 algorithm, the circuitry complexity may be too 
high to implement. Besides, using radix-16 algorithm can reduce 
about 7000 real multiplications than using radix-8 algorithm; 
however, using radix-32 algorithm reduces only about 3000 real 
multiplications than using radix-16 algorithm. Therefore, we 
decide to adopt radix-16 algorithm in this work. 
B. Mathematical Model for 8K-point FFT 
  Here we take the longest FFT, i.e. 8K-point FFT, as an example 
for demonstrating the mathematical derivation. Because 8K-point 
FFT cannot be exactly calculated using only radix-16 algorithm, 
radix-2 algorithm is also required. We first apply radix-2 algorithm 
on 8K-point FFT computation and get the following intermediate 
results:  
Let 
409501
2
81920,4096
2
8192
12121 LL =−=+=+= nnnnnn
 
                         1,02 =n  
409501
2
81920,2 121 LL =−=+= kkkk
 
              1,02 =k  
Filling n and k into Eq. (1), it turns into Eq. (3) 
∑ ∑
∑ ∑
=
−
=
= =
++
⎪⎭
⎪⎬
⎫
⎪⎩
⎪⎨
⎧ +=
+=+
4095
0
40968192
int2
1
0
221
4095
0
1
0
)2)(4096(
81922121
1
1121
2
22
1 2
2121
)4096(
)
2
8192()2(
n
kn
factorTwiddle
kn
FFTpo
n
kn
n n
kknn
WWWnnx
WnnxkkX
3214444 34444 21
 (3) 
TABLE 2 
 NORMALIZED DATA OF EQUIVALENT REAL MULTIPLICATION AND REAL 
ADDITION FOR 8K-POINT FFT SHOWN IN TABLE 1 
Algorithm Normalized real multiplication 
Normalized real 
addition 
Radix-2 1.55 1.05 
Radix-4 1.40 1.02 
Radix-8 1.07 0.99 
Radix-16 1 1 
Radix-32 0.97 1.00 
TABLE 1 
 COMPUTATION COMPLEXITY ANALYSIS OF SEVERAL COMMON FFT 
ALGORITHMS 
Complex 
multiplication Algori- 
thm Length Non- 
trivial Trivial 
Complex 
addition 
Equiva- 
lent real 
multipli- 
cation 
Equiva-
lent real 
addition
2048 8194 0 22528 32776 61444
4096 18434 0 49152 73736 135172Radix-2 
8192 40962 0 106496 163848 294916
4096 13996 0 49152 55984 126296
Radix-4 
8192 36864 0 106496 147456 286720
4096 10168 4096 49152 48864 126832
Radix-8 
8192 23992 8192 106496 112352 277360
4096 7408 7680 49152 44992 128480
Radix-16 
8192 18672 15360 106496 105408 281056
Radix-32 8192 16864 17408 106496 102272 281536
concentrate on the management tasks such as work allocation, data 
flow control, interrupt operation, etc. The hardware blocks own the 
advantages like high performance, low power consumption, and 
low area cost; however, they are usually not flexible to accelerate 
multi-length computations. To provide enough flexibility to a 
hardware block without weakening its good features, particular 
design efforts are required.  
A. Proposed Multi-Length FFT Processor 
Because the cache size of the cached-memory architecture 
grows exponentially as the radix number increases and we adopt a 
rather large radix size, i.e. radix-16, the cached-memory 
architecture is not suitable for this work. The pipeline architecture 
may be more proper; nevertheless, the hardware cost is too high, 
especially for long-length, e.g. the 8K-point, FFT computations. If 
we re-classify the FFT architectures according to the degree of 
time-multiplexing, the memory-based architecture (including the 
cached-memory architecture) and the pipeline architecture are 
located on the extremely two different ends [19]. Consequently, 
this work proposes a new architecture which compromises the 
opposite features between the memory-based architecture and the 
pipeline architecture.  
In this study, both the 2K- and the 4K-point FFTs can be 
calculated in three stages of computation, and the 8K-point FFT 
can be finished in four stages of computations. From the processor 
design point of view, each stage of the FFT computation can be 
implemented in a coarse-grain pipeline stage. These coarse-grain 
pipeline stages may be folded due to their high similarity as Fig. 
1(a) and the mathematical model presented in Section II show. 
Take the 8K-point FFT for example, Eq. (3), Eq. (5), Eq. (8), and 
Eq. (10) respectively represent four computation stages of the FFT. 
Except the first stage which is a radix-2 FFT, each stage consists of 
a radix-16 FFT computation. Besides, the first three stages require 
non-trivial multiplications for twiddle factors while the last stage 
does not. The situations are very similar in the 2K- and the 
4K-point FFT.  
Fig. 1 inspires us to develop a novel low-energy VLSI 
architecture which provides a bright trade-off between the pipeline 
architecture and the memory-based architecture. Fig. 2 illustrates 
the proposed FFT processor that possesses a memory block, a 
multi-radix butterfly unit, a complex multiplication block, 
commutators, and a controller. The memory block exists for 
temporal input data storage, intermediate data storage, and data 
regulation. The multi-radix butterfly unit, a central computation 
unit of the proposed architecture, is designed as a reconfigurable 
pipeline data-path to implement the multi-radix computations, i.e. 
the radix-16, radix-8, and radix-2 algorithms, in a cost-efficient 
way. The commutators regulate the data-flow of FFT computation. 
The controller sends proper signals to all components to finish the 
FFT computation seamlessly.  
This work possesses the features such as low area cost and 
high flexibility. The high flexibility is achieved by using the 
controller unit and the reconfigurable butterfly unit shown in Fig. 2 
and Fig. 3. Owning high flexibility enables this work to compute 
multi-length FFTs. The proposed multi-radix butterfly unit shown 
in Fig. 3, composed of four radix-2 butterfly units, is designed 
according to the signal-flow plots illustrated in Fig. 4. Two simple 
hard-wired multipliers are respectively located at the ends of the 
first and the second butterfly stage for trivial multiplications. 
Furthermore, there is a simple interchanging and complementing 
circuitry for multiplications of –js at the end of the third butterfly 
stage. The two complex multipliers are arranged outside the 
butterfly unit as shown in Fig. 2. Hence, the proposed multi-radix 
butterfly unit can process two intermediate data per cycle. By 
Fig. 3.  The proposed multi-radix butterfly unit based on a two-way MDC architecture 
Fig. 4.  The signal flow plot of radix-16 algorithms Fig. 2.  The proposed PIMA-based FFT processor 
