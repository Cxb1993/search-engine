I中文摘要
本計畫使用一個基於蟻行可靠度導向
工作分派方法，以計算在分散式工作指派
可靠度問題。所提出的演算法，利用蟻行
演算選取一個具有系統最大或趨近最大可
靠度之程式及檔案指派之集合。實驗結果
顯示，本演算法在大部分實例中可獲得正
確解，而所需計算時間亦比窮舉法明顯較
短。
關鍵字：分散式系統可靠度、工作指派、
分散式程式可靠度、蟻行演算法
Abstract
This project uses an ant-based
reliability-oriented task assignment
methodology (AntDTA) for computing the
distributed task assignment (DTA) reliability
problem. The proposed algorithm uses an ant
algorithm to select a program & file
assignment set that is maximal, or nearly
maximal with respect to system reliability. Our
numerical results show that the proposed
algorithm may obtain the exact solution in
most cases, and the computation time seems to
be significantly shorter than that needed for the
exhaustive method.
Keywords: distributed system reliability; task
assignment; distributed program reliability;
ant algorithm.
2f2 兩個資料檔，而 p2 需要 f1, f2, f3三個資
料檔。下圖是其中的一種分派方式。
v2
f2
v3
e3,4
e2,3v1 v4
e1,2
e1,3
e2,4
f3
p1, f1 p2
對程式 p1而言，有三個最小檔案生成
樹（minimal files spanning trees, MFSTs），
即 v1 v3 e1,3, v1 v3 e1,2 e2,3, v1 v3 e1,2 e2,4 e3,4。其
中vi 代表第i個節點，ei,j代表鏈結(I,j)。因
此分散式程式 p1 之可靠度（distributed
program reliability, DPR(p1) ）DPR(p1) =
pr( MFST ii1
3 )，可利用互斥項之和（a sum
of mutually disjoint terms）求解[4]，其中ai,j
代表鏈結(I,j)可正常運作之機率，bi,j代表
1-ai,j。
DPR(p1) = b1,2 a1,3 + a1,2 a1,3 b2,3 b2,4 + a1,2
a1,3 b2,3 a2,4 b3,4 + a1,2 a2,3 a2,4 b3,4 +
a1,2 a2,3 b2,4 + a1,2 a2,4 a3,4。
假設每條鏈結之可正常運作之機率為
0.9，則 DPR(p1) = 0.98829。
依相同方式，可求得程式 p２之8個最小檔
案生成樹MFSTs）及其
DPR(p2) = pr( MFST ii1
8 ) = 0.97686。
依此兩個程式所求得之分散式系統可靠度
（distributed system reliability, DSR）DSR =
pr( p iiP1 ) = pr( MFST p iiP ( )1 )= 0.97686。
詳細演算法請參閱附件。
五、結果與討論
附件所示表中明列以兩種不同方法處
理不同程式及資料檔之分派結果。對照窮
舉法其可靠度計數次數會隨著分散式系統
的節點數、程式及資料檔的增加呈快速成
長，本演算法則為常數次，而與可擺脫上
列因素。如果未獲得最佳解，本演算法所
得的解，其誤差值非常小。因此，本演算
法比傳統方法有較高的效率。
六、參考文獻
[1] Frank A. Tillman, Ching-Lai Hwang,
Way Kuo,“Optimization Techniques for 
System Reliability withRedundancy - A
Review”, IEEE Transactions
onReliability, vol. R-26, no. 3, 1977
August, pp. 148-155.
[2] David E. Fyffe, William W. Hines, Nam
Kee Lee,“System Reliability Alocation 
And a ComputationalAlgorithm”, IEEE
Transactions on Reliability, vol. R-17,
no. 2, 1968 June, pp. 64-69.
[3] Yuji Nakagawa, Satoshi Miyazaki,
“SurogateConstraints Algorithm for 
Reliability OptimizationProblems with
Two onstraints”, IEEE Transactionson
Reliability, vol. R-30, no. 2, 1981 June,
pp. 175-180.
[4] Krishna Behari Misra, Usha Sharma,
“An EficientAlgorithm to Solve 
Integer-Programming ProblemsArising
in System-Reliability Design”, 
IEEETransactions on Reliability, vol.
40, no. 1, 1991 April,pp. 81-91.
[5] Ching-Lai Hwang, Frank A. Tillman,
Way Kuo,“Reliability Optimization by 
Generalized Lagrangian-Function and
Reduced-Gradient Methods”, 
IEEETransactions on Reliability, vol.
R-28, no. 4, 1979October, pp. 316-319.
[6] Frank A. Tillman, Ching-Lai Hwang,
Way Kuo,“Determining Component 
Reliability and Redundancyfor
Optimum System Reliability”, IEEE 
Transactionson Reliability, vol. R-26,
no. 3, 1977 August, pp. 162-165.
2007 第一屆創新管理學術與實務研討會
1
An ant algorithm for optimal reliability-oriented task assignment
Chin-Ching Chiu
Department of Management Information System
Private Takming College, Taipei, Taiwan, R.O.C.
E-mail: chiu@takming.edu.tw
Abstract
This paper presents an ant-based reliability-oriented task assignment methodology (AntDTA)
for computing the distributed task assignment (DTA) reliability problem. The proposed algorithm
uses an ant algorithm to select a program and file assignment set that is maximal, or nearly maximal
with respect to system reliability. Our numerical results show that the proposed algorithm may
obtain the exact solution in most cases, and the computation time seems to be significantly shorter
than that needed for the exhaustive method.
Keywords: distributed system reliability; task assignment; distributed program reliability;
ant algorithm
1. Introduction
The ant system (AS), introduced by Colorni et al. [1], Dorigo [2], and Dorigo et al. [3], is
recent distributed metaheuristic for hard combinatorial optimization problems and was first used
on the well-known traveling salesman problem (TSP).
For a given distribution of programs and data files in a DS, distributed program reliability (DPR) [4]
is the probability that a given program can be run successfully and will access all of the required files
from remote sites despite faults occurring among the processing elements and communication links. The
second measure, distributed system reliability (DSR), is defined as the probability that all of the
programs in the system can be run successfully. Kumar, Hariri and Raghavendra [4] demonstrated that
redundancy in resources such as computers, programs, and data-files can improve the reliability of
distributed systems [4]. The study of program and data-file assignment with redundancy considerations is
therefore important in improving DSR.
Hwang & Tseng [5] proposed the k-DTA (distributed task assignment with k copies)
problem. The k-DTA models the assignment of k copies of both distributed programs, and their
data-files to maximize the DSR within some resource constraints. This study proposes an
algorithm based upon the ant algorithm to find an approximate solution. The simulation results
show that the exact solution can be obtained in most cases using the proposed algorithm. When
the proposed algorithm fails to obtain an exact solution, the deviation from the exact solution is
very small.
2. Problem description
Assume that there are n processing nodes, P programs, F data files and k copies. The s(pi)
denotes the size of program pi and s(fi) the size of data file fi. when a program pj is assigned to a
node vi, set bit pai,j-1 of PAi= 1, otherwise, set bit pai,j-1 of PAi= 0. The main problem can be
mathematically stated as follows:
2007 第一屆創新管理學術與實務研討會
3
of required nodes. We used the following formula to evaluate the weight of each program and data
file. The APL(fi) denotes list of files required for pi to complete its execution and AFL(pi) denotes
list of programs which are required fi to complete their execution.
w(pi)=s(fi), where fi APL(fi); (3)
w(fi)=s(pi), where pi AFL(pi).
3.4. Construct AR-list
An access relate list (AR-list) represents that the sequence of programs and data file
assignment will be considered. We constructed an AR-list according to each APL(fi) and AFL(pi).
3.5. Allocate each program and data file according to the AR-list
The most reliable assignment for k copies of some program or data file is to assign these copies to k
distinct nodes [5]. The total number of programs and file size assigned to a node is at most as large as the
capacity of the node.
3.6. The concept of ant colony optimization
ACO works as follows: m ants (agents) are initially positioned at m nodes chosen according
the weight of nodes in a descending order, where m is at most as n. using the AR-list, the task
assignment is processed by each agent. If there are some copies of programs or data files has not
been assigned, agent apply the state transition rules (formula 4 and 5) to select another node to
move to. While constructing its task assignment, an agent also modifies the amount of pheromone
on the selected edges by applying the local updating rule (formula 6). When all agents have
terminated their task assignment, the amount of pheromone on the edges is modified again by
applying the global updating rule (formula 7).
      


  
otherwiseJ
qqifriGri
j iTr z
,
,,.,maxarg 0)(

(4)
Let z be an agents whose task is to go on to construct a task assignment. Associated with z is a
list Tz(i) of nodes to be selected. An agent z situated in node i moves to node j based on formula 4,
whereλ(i,r) is the amount of the pheromone trail on the edges from node i to r. G(i,r) is a heuristic
function of formula 2.αis a parameter which weights the relative importance level ofλ(i,r).βis a
parameter which weights the relative importance level of G(i,r). q is a value randomly generated
between 0 and 1, and 0q is a user specified parameter, where 10 0 q . J is a random variable
generated according to the probability distribution function given by formula 5, where ),( jipz is
the probability of selecting node j.
  
  




 

otherwise
iTjif
riGri
jiGji
jip
z
iTr z
,0
)(,
),(.),(
),(.),(
),(
)(




(5)
Formula 6 is used to update the pheromone when an agent z moves from node i to node j.
0.),().(1(),(   jiji (6)
2007 第一屆創新管理學術與實務研討會
5
Step 9. If the end condition (usually defined as a number of cycles) is not met, then:
- Set t = t + 1
- Goto step 5
Step 10. Compute the reliability of DTA using SYREL, output the DTA and its reliability
End AntDTA
4. Comparison and discussion
Table 1 presents the data on the results obtained using three different methods for various
DS topologies with different allocated programs and data files. In contrast to the exhaustive
method, the number of reliability computations grows rapidly when the size of the DS topology,
or the number of programs and data files, is increased. The proposed method is constant, and
independent of the size of the DS topology, and the number of programs and data files. The
deviation is very small when the proposed method cannot obtain an optimal solution. These data
show that the proposed method is more effective than the conventional methods.
Table 1. The results obtained using the exhaustive method, and our proposed method for
various DS topologies & k
~
-DTA(where k
~
= k).
Size k
~
-DTA afl(pα)
Exhaustive
Meth.1
Proposed method
n e k
~
2 P F p1 p2 p3
Global
Optimal
solution
NRC3
time
(sec)
time
(sec)
NRC3 tng ps absoluteerr
6 8 1 2 3 f1,f2 f1,f3 - 0.9883041 4032 16 0.97 1 190 100 0
6 8 1 2 4 f1,f2,f3 f3,f4 - 0.9883041 18756 145 0.72 1 90 100 0
6 8 1 3 3 f1,f2 f2,f3 f1,f3 0.9883041 13968 55 1.39 1 100 100 0
6 8 1 3 4 f1,f3,f4 f2,f3 f1,f4 0.9745220 57624 266 1.48 1 100 100 0
6 8 1 3 5 f1,f3,f4 f2,f3,f5 f1,f4 0.9745220 210168 1072 1.07 1 70 100 0
6 8 2 2 3 f1,f2,f3 f1,f3 - 0.9998719 21312 97 0.77 1 190 100 0.0002047
1 Exhaustive Meth.: the exhaustive method
2 k
~
: the number of copies of programs and data files
k=1, set c(v0)=5, c(v1)=4, c(v2)=6, c(v3)=6, c(v4)=5, c(v5)=5, s(p1)=2,s(p2)=3, s(p3)=3, s(f1)=2, s(f2)=3, s(f3)=3, s(f4)=2,
s(f5)=2.
k=2, set c(v0)=6, c(v1)=5, c(v2)=7, c(v3)=7, c(v4)=6, c(v5)=6, s(p1)=2,s(p2)=3, s(p3)=3, s(f1)=2, s(f2)=3, s(f3)=3, s(f4)=2,
s(f5)=2.
3 NRC: the number of reliability computation
