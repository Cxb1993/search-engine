Eugene Lai, Ching-Tang Hsieh and Kuo-Ming Hung, “Blind watermarking technique Based on 
Integer Discrete Cosine Transform and AC Prediction”,8th WSEAS International Conference 
Automation and Information,June 2007,Vancouver,Canada,pp.289-294. 
2 
reduce blocking artifacts caused from 8x8 DCT 
transform. And we modify the AC estimation 
scheme[9] [10] to predict AC(1,1) as error-checking 
code. Using the error-checking code, we can 
enhance the robustness of watermark. 
The reminder of this paper is organized as follow. 
Section 2 describes IntDCT and AC Prediction. 
Section 3 presents the watermarking algorithm. 
Section 4 presents the experimental results. Section 
5 provides concluding remarks. 
2 IntDCT and AC Prediction 
2.2.1 Integer Discrete Cosine Transform 
The proposed watermarking technique uses the 
Integer DCT(IntDCT) which is used in H.264 video 
standard[11]. H.264 applies this new 4x4 transform 
instead of the 8X8 discrete cosine transform (DCT) 
traditionally used in many video coding standards. 
IntDCT has at least two advantages over DCT. First, 
IntDCT needs no floating-point multiplications. The 
floating-point multiplications are replaced by lifting 
steps that need only integer operations and shifting. 
This is very important for applications in mobile 
devices since it is easier and cheaper (power saving) 
to realize integer operations than to implement 
float-point multiplications. Second, if sufficient 
word length is used to represent the intermediate 
data of IntDCT, the round-off error can be 
eliminated completely. There is no information lost 
after the transform even if it is computed in a 
fixed-point computer. 
The 4x4 IntDCT transform can reduce blocking 
artifacts resulted from 8x8 DCT transform. The 
integer transform is designed such that the 
transformation involves only additions and shift 
operations, and no mismatch exists between the 
forward and inverse transforms. This reduces the 
computational complexity and it is much easier for 
hardware implementation. J. Zhang and Anthony T. S. 
Ho[12] describe DCT as follows: 
To develop this integer DCT, they examine the 4x4 
DCT of a 4x4 matrix X: 
T
cbbc
aaaa
bccb
aaaa
X
cbbc
aaaa
bccb
aaaa
Y
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
−−
−−
−−
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
−−
−−
−−= **  (1) 
where a=1/2, )8/πcos(2/1=b , )8/π3cos(2/1=c  
The matrix multiplication can be expressed to the 
following form: 
QBXBY T ⊗= )**(  (2) 
where 
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
−−
−−
−−=
dd
dd
B
11
1111
11
1111
  
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢
⎣
⎡
=
22
22
22
22
babbab
abaaba
babbab
abaaba
Q  
)B*X*B( T  is a “core” 2-D transform. Q is a matrix of 
scaling factors and the symbol ⊗  indicates that each 
element of )B*X*B( T  is multiplied by the scaling 
factor in the same position in matrix Q. d is c/b 
(approximately 0.414).  
To simplify the implementation of the transform, d is 
approximated by 0.5. To ensure that the transform 
remains orthogonal, b also needs to be modified so that:  
2/1=a ， 5/2=b ， 2/1=d  
The 2nd and 4th rows of matrix B and the 2nd and 4th 
columns of matrix TB a r e scaled by a factor of 2 
and the post-scaling matrix Q is scaled down for 
compensation. This avoids multiplications by 1/2 in 
the core transform )B*X*B( T , which would result 
in loss of accuracy using integer arithmetic. The 
final forward 4x4 IntDCT becomes:  
f
T
ff QBXBY ⊗= )**(  (3) 
Where 
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
−−
−−
−−=
1221
1111
2112
1111
fB
，
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢
⎣
⎡
=
4/2/4/2/
2/
4/2/4/2/
2/
22
22
22
22
babbab
abaaba
babbab
abaaba
Qf  
This transform is an approximation to the 4x4 DCT. 
The inverse transform is given by 
ii
T
i BQYBX *)(*' ⊗=  (4) 
where 
Eugene Lai, Ching-Tang Hsieh and Kuo-Ming Hung, “Blind watermarking technique Based on 
Integer Discrete Cosine Transform and AC Prediction”,8th WSEAS International Conference 
Automation and Information,June 2007,Vancouver,Canada,pp.289-294. 
4 
If Wn(k)= -1 
⎪⎭
⎪⎬
⎫
⎪⎩
⎪⎨
⎧ ==ΔΔ=
otherwisevuF
vuifvuFQvuF
k
k
k
),(
0)
),(
(*),( 1'  (10) 
Where )x(Q0  indicates to turn the value of x 
to the most approximate even number, 
and )x(Q1  indicates to turn the value of x to 
the most approximate odd number, and △ is 
the parameter of quantization.  
Step5 predict the coefficients of AC(1,1),and replace 
the actual value with its predicted values. 
We modify Gonzales’s[9] method described 
in section 2.22. Eq.(11) is the modified 
Estimation method.  
)DCDCDCDC(*)1,1(AC 7391 −−+=α  (11) 
Where α =0.02, which is experimental result 
that we use ten natural images to test. When α =0.02, the average quality of image is the best  
Step6. Inverse IntDCT transform to obtain watermarked 
image 
3.2 Watermark Extracting 
The steps of extracting approach are listed as the 
following: 
Step1. The watermarked image )y,x(f *  is divided 
into k non-overlapping blocks of size 4x4 
pixels. Each 4x4 block is denoted by *kB . 
4j,i0,)j,i(fB)y,x(f *k
1K
0k
*
k
1K
0k
* <≤== −
=
−
=
UU  (12) 
Step2. Transform each 4x4 block by Integer DCT 
4v,u0)),j,i(f(IntDCT)v,u(F *k
*
k <≤=  (13) 
Step3. extracted the repeated watermarking series 
from coefficients of DC as Eq.(14) 
1wtheneven)
)0,0(F
(Qif *k
*
k −==Δ  (14) 
1wthenodd)
)0,0(F
(Qif *k
*
k ==Δ  
where )x(Q  is a function rounding x to 
integer. 
Step4 Compare *AC  and )1,1(F*k to find if the 4x4 
block is attacked 
⎪⎭
⎪⎬⎫⎪⎩
⎪⎨⎧ ==
otherwise,0
AC)1,1(F,)v,u(F)v,u(d
**
k
*
k*
k  (15) 
4v,u0,)v,u(d)y,x(d *k
1K
0k
* <≤= −
=
U  (16) 
⎪⎭
⎪⎬
⎫
⎪⎩
⎪⎨
⎧ >−
=
otherwise,1
|AC)1,1(F|,0
)k(E
**
k
*
ρ
 (17) 
where )1,1(F*k  is the actual AC(1,1) vale of 
each 4x4 block by step2. *AC  is its 
predicted value by Eq.(11), )v,u(d*k is 4x4 
denoted subimage, )y,x(d*  is the denoted 
image, ρ  is the parameter of sensitivity to 
attacking. )k(E*  is error-checking code. When 
)k(E* =0, indicted that the block is attacked. We 
can find attacked area from image )y,x(d* . 
Step5. Use the recorded random seed to retrieve the 
repeated watermark )k(w* . 
Step6: Use error-checking code )k(E*  and the 
repeated watermark series )k(w*  to find 
extracted original watermark series )(** kw , 
the algorithm is shown as Eq.(18). 
⎪⎪⎭
⎪⎪⎬
⎫
⎪⎪⎩
⎪⎪⎨
⎧
≥∑
<∑−
=
0)n(E*)n(Wif1
0)n(E*)n(Wif1
)i(w
*
i
*
i
n
*
i
*
i
n**  (18) 
where )i(w **  is the ith bit of the original 
watermark series, n is the repeated times of 
watermark series.  
Step7: convert the extracted original watermark 
series into watermark image 
4. EXPERIMENT RESULT 
To test the algorithm, we use nine 512x512 
images(Lena、Baboon、F16、Aerial、Pepper、Couple、
Splash、Sailboat on Lake、Stream and Bridge) as host 
images. Watermarks(64x64) are embedded to these 
images. In the general digital image processing, we 
usually measure the degree of the image distortion 
with the PSNR value (the peak signal-to-noise ratio). 
The PSNR value was defined as 
=)dB(PSNR  
Eugene Lai, Ching-Tang Hsieh and Kuo-Ming Hung, “Blind watermarking technique Based on 
Integer Discrete Cosine Transform and AC Prediction”,8th WSEAS International Conference 
Automation and Information,June 2007,Vancouver,Canada,pp.289-294. 
6 
co
rr
ec
t 
 d
ec
od
in
g 
R
at
es
 
0 10 20 30 40 50 60 70 80 90 100
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
 JPEG quality 
figure 3 The correct decoding rates under attacks of 
different JPEG quality compression 
5 Conclusion 
This paper has present an watermarking technique 
bases on the 4x4 Integer Cosine Transform(IntDCT)  
and AC prediction. The 4x4 IntDCT transform can 
reduce blocking artifacts caused from 8x8 DCT 
transform and improve imperceptibility and 
watermark capacity greatly. Moreover, we utilize AC 
prediction value as error-checking code to enhance 
robustness of watermark. For future work, the 
proposed watermarking technique will be extend to 
video watermarking based on the H.264 standard. 
Acknowledgment 
The research is supported by National Science 
Council, Taiwan, at the contract number NSC 
95-2221-E-032-047  
References 
[1] R G. van Scbyndel, A. 2. Tirkel, and C. F. 
Shamoon,“Secure spread specbum watermarking 
for multimedia,”IEEE Trans. Image Processing, 
vol. 6, pp. 1673-1687, Dec.1997. 
[2] C. Langelaar, J. C. A. Vea der Lubbe, and R L. 
Lagendijk, “Robust labeling method for copy 
protection of images,” Proceedings of SPWIS&T 
Electronic lmaging, San Jose, CA, vol. 3022, pp. 
298-309, Feb. 1997. 
[3] M. Bami, F. Bartolini, V. Cappelhi, and A. F’iva, “A 
DCT domian system for robust image 
watermarking,” Signal Processing (Special Issue 
on Watermarking), vol. 66, no. 3, pp. 357-372, 
May 1998. 
[4] C.-W. Tang and EL-M. Hang “A feature-based 
robust digital image watermarking scheme,” IEFE 
Transactions on Signal Processing, vol. 51, no. 4, 
pp. 950-959, Apr.2003. 
[5] H. Zhang, L.Z. Cai, X.F. Meng, X.F. Xu, X.L. 
Yang, X.X. Shen and G.Y. Dong, “Image 
watermarking based on an iterative phase 
retrieval algorithm and sine–cosine modulation 
in the discrete-cosine-transform domain”, 
Optics Communications, In Press, Uncorrected 
Proof, Available online 4 May 2007.  
[6] Santa Agreste, Guido Andaloro, Daniela 
Prestipino and Luigia Puccio, ”An image 
adaptive, wavelet-based watermarking of 
digital images”, Journal of Computational and 
Applied Mathematics, In Press, Corrected Proof, 
Available online 1 February 2007. 
[7] W. Bender, D. Gruhl, N. Morimoto, and A. Lu, 
“Techniques for Data Hiding,” IBM Systems Journal, 
vol. 35, no. 3-4, 1996, IBM,USA, pp. 313-336. 
[8] I.J. Cox, J. Killian, T. Leghton, and T. Shamoon, 
“Secure Spread Spectrum for Multimedia,” IEEE 
Trans. on Image Processing, vol. 6, no. 12, 1997, 
pp. 1673-1687. 
[9] Gonzales, C.A., Allman, L., Mccarthy, T., Wendt, P., 
“DCT coding for motion video storage using 
adaptive arithmetic coding”, Signal Processing: 
Image Comm. 2 (2), 1990. 
[10] Wang Yulin, Pearmain, Alan, “Blind image data 
hiding based on self reference”, Pattern 
Recognition Letters Volume: 25, Issue: 15, 
November, pp. 1681-1689, 2004 
[11] “H.264/MPEG-4 Part 10: Transform & 
quantization,” ITU-T Rec. H264/ISO/IEC 
11496-10, Final Committee Draft, Document 
JTV-F100, Dec. 2002. (Latest version modified on 
19.03.2003) [Online] Available: 
http://www.vcodex.fsnet.co.uk/h264.html 
[12] J. Zhang and Anthony T. S. Ho,” An efficient 
digital image-in-image watermarking algorithm 
using the integer discrete cosine transform 
(IntDCT)”, ICICS-PCM 2003,15-18 December 
2003,Singapore. 
