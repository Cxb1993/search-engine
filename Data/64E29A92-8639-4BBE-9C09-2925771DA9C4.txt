interesting regions of trajectories, DivCluST focuses 
more on typical movements in local regions of a 
bounded area and takes the temporal information into 
account when designing the criteria for trajectory 
dividing and the distance measurement for adaptive k-
means clustering. Extensive experiments on three 
types of real data sets with specially designed 
visualization are presented to show the effectiveness 
of DivCluST. 
英文關鍵詞： moving objects profiling, moving behavior, 
spatiotemporal, trajectory dividing and clustering 
 
2(a) Raw trajectories. (b) DivST results. (c) CluST results.
Fig. 1. Illustration of DivCluST.
can discover different moving styles while excluding
the redundant information. As the speed change, length
of the moving path, and the directions are equally
important, we need to design a distance measurement
that considers all these factors simultaneously, which is
absolutely not a trivial process. Second, an important
characteristic of a trajectory is that its movement is not
uniform in both the spatial and temporal domains. For
example, one can drive along one path with various
speeds due to different road conditions or speed limits.
Therefore, we need a method to divide the original
trajectories into segments of sub-trajectories, each of
which has little variations in both speeds and directions,
before we can cluster them to find the typical moving
styles. The design of dividing criteria should consider
both the spatial and temporal information, while keeping
the number of segments low.
To tackle the above problems, we develop DivCluST,
an approach to finding regional typical moving styles by
dividing and clustering the trajectories in consideration
of both the spatial and temporal constraints. We use an
example in Fig. 1 to illustrate our idea, where the set of
raw trajectories is given in Fig. 1(a). In essence, DivCluST
is comprised of two phases: the DivST phase and the
CluST phase. In the DivST phase, the trajectories are
online divided into segments according to both the given
spatial and temporal criteria by a sliding window based
method, such that each divided sub-trajectory has little
speed and direction variations and can be represented by
a replacement line. As shown in Fig. 1(b), different colors
represent different average speed of the replacement
lines. Meanwhile, we keep the number of segments as
small as possible. The online dividing algorithm can deal
with a large number of trajectories streaming in with
limited memory. In the CluST phase, where a k-means
based algorithm with a newly designed spatiotemporal
distance measurement for directional lines is applied.
Through visualizing the cluster representatives, each of
which is also a line representing the overall position,
speed (color), direction (arrow), and member count of
that cluster (line width), we can have a profile that shows
the regional moving behaviors of the area spanned by
the given trajectory set, as shown in Fig. 1(c).
Our profiling idea of finding typical moving styles
is novel and different from the main related research
works as follows. First, most existing works of sub-
(a) TraClus representatives. (b) Region of interest T-patterns.
Fig. 2. Output compared with main references.
trajectory clustering such as TraClus [1] consider only
the spatial information of trajectories, i.e., the physical
position and the shape of trajectories, on both trajectory
segmenting and clustering. Also, the goal in [1] is to
find one representative trajectory describing the overall
movement of each cluster found, where only paths with
significantly different directions will be revealed but
some regional moving styles were omitted. For exam-
ple, on the same set of trajectories given in Fig. 1(a),
we simulated the TraClus algorithm and illustrated the
results in Fig. 2(a). Only two clusters were generated by
DBSCAN, of which the two representative trajectories
were found as shown in blue lines. We can see that two
clusters of objects moving shorter along the A→ B path,
such as A → F and A → D, were missing. Moreover,
the speed differences between D → E and E → C or
between F → C and E → C were ignored. On the other
hand, works such as [2] [3] only care the trajectories
or paths between the identified interesting locations. As
illustrated in Fig. 2(b), suppose only A, B and C were
recognized as the interesting locations, the main turning
points in location D would be omitted. Also, the two
paths A → D → C and A → F → C would not be
distinguished as they spent similar time to pass.
To the best of our knowledge, we are the first to tackle
the trajectory profiling problem of a given set of mov-
ing objects, considering both the temporal and spatial
changes simultaneously. We make several contributions
as follows.
• We propose a new way to look the collected trajecto-
ries and design DivCluST, an approach to automat-
ically reporting the regional typical moving styles
over a wide bounded area. By visualizing the cluster
representative associated with the physical location,
speed, direction, and cluster size information, we ef-
fectively present the profile of the given trajectories
4consideration either.
To the best of our knowledge, our work is the first
one to take both the spatial and temporal criteria into
account for trajectory dividing, while clustering them
with a distance measurement designed in consideration
of the spatial and temporal information at the same time.
3 PROBLEM STATEMENT
Given a set of moving objects, we want to profile them
by analyzing their accumulated trajectories. To be more
specific, we want to group those similar sub-trajectories
while separating dissimilar ones apart. The resulting
profile should reflect distinct moving behaviors over
the regions passed by the objects. Intrinsically, a tra-
jectory, composed of consecutive points with positions
and timestamps, which may imply various speeds and
directions in different parts, can be defined as follows.
Definition 1 (Trajectory and element line). A trajectory
is composed of a sequence of N data points. Namely,
TR : {pt1, pt2, ..., ptN} = {(p1, t1), (p2, t2), ..., (pN , tN )},
where pi and ti indicate the position and corresponding
recorded time of point pti, respectively, and t1 < t2 <
... < tN . Two consecutive points constitute an element line
L : (pti, pti+1). Therefore, a trajectory can also be viewed as
a sequence of element lines. 
If we treat each complete trajectory as an object and
cluster them directly, it is hard to find similar ones as
each trajectory has various length and contains different
position and speed changes. Instead, it makes more sense
to divide trajectories into homogeneous characteristic
partitions, while considering both the spatial and tempo-
ral conditions, before any further processing. Therefore,
we define the following terms.
Definition 2 (Sub-trajectory). A sub-trajectory is a subset
of a trajectory, a part of consecutive data points in the
trajectory. STR : {ptm, ptm+1, ..., ptq}, where 1 ≤ m <
q ≤ N . Similarly, a sub-trajectory can be regarded as a set of
consecutive element lines. 
Definition 3 (Line, its direction and speed). A directional
line L is composed of two end points pts and pte as L :
(pts, pte), where pts = (ps, ts) and pte = (pe, te). With ts <
te, we say its direction is from pts to pte, and its speed sL
is defined as
sL = s(pts, pte) =
d(ps, pe)
(te − ts)
,
where d(ps, pe) is the non-negative direct distance between
pts and pte. 
If some consecutive element lines of a sub-trajectory
have similar speed and direction characteristics, we can
summarize them with a replacement line, which is defined
as follows.
Fig. 3. Illustrations of data points and lines.
Definition 4 (Replacement line). If a sub-trajectory is
viewed as a sequence of points in ascending chronological
order, a replacement line is the directional line connect-
ing the point with earliest timestamp and the one with
latest timestamp. That is, the replacement line of STR :
{ptm, ptm+1, ..., ptq} is L : (ptm, ptq). 
The illustration of data points and a line with direction
along with the relationship between element lines and a
corresponding replacement line is shown in Fig. 3.
With the above definitions, we can state the two main
problems studied in this paper.
Problem Definition 1 (Spatiotemporal Trajectory Divid-
ing). Given a trajectory TR, a spatial threshold and a temporal
one, we would like to divide TR into a set of sub-trajectories
{STR1, STR2, ..., STRM} with an efficient algorithm. The
divided sub-trajectories must meet the following requirements:
1) the variation in speeds (for temporal domain) and in direc-
tions (for spatial domain) of the element lines in each STRi
must be as small as possible, and 2) the number of generated
sub-trajectories, i.e., M , must be as small as possible. Each
sub-trajectory can then be replaced by a replacement line, and
the whole set of replacement lines summarizes the trajectory
TR. Meanwhile, the dividing algorithm should be able to
online handle the endless in-coming time-location data. 
Problem Definition 2 (Spatiotemporal Replacement
Line Clustering). Given a collection of replacement lines
{L1, L2, ..., LO} generated from a given trajectory set
{TR1,TR2, ...,TRN}, we would like to cluster them into
k clusters {C1, C2, ..., Ck}. We want to adapt the k-means
clustering algorithm and make it suitable for line items, and
design a spatiotemporal distance function for these line objects.
In other words, the line objects in the same cluster share
similar speed and distribution characteristics. Each cluster
Cj is then represented by a mean line, which shows the
average position, length, direction, and speed information of
the objects inside Cj . The mean lines of all clusters then gives
the summary of distinct moving types of the trajectory set
{TR1,TR2, ...,TRN}. 
To solve the two problems defined above, we pro-
posed DivCluST. Through comprising of the two phases,
DivST for dividing trajectories and the CluST for cluster-
ing replacement lines, the regional typical moving styles
are profiled from trajectory data. We shall elaborate on
more details of the algorithm DivCluST in the following
sections.
6(a) thlen and thspd. (b) Only thlen. (c) Only thspd.
Fig. 4. Illustrations of element lines L1, L2 passing the
dividing criteria thlen and thspd and being replaced by LR.
approximates to the length of LR. For Fig. 4(b), although
the direction difference between L1 and L2 is rather
big, it can satisfy the spatial dividing criterion since
their lengths are also very different and the length of
L1 dominates the test. However, it would not satisfy the
temporal criterion as the speed variance is large between
L1 and L2. In both Fig. 4(a) and Fig. 4(c), L1 and L2 have
similar speed value and pass the temporal test (2), the
dividing is then decided by the spatial criterion (1).
4.2 Selection of Thresholds in DivST
The goal of DivST is to generate a minimum number of
replacement lines while ensuring the lines to preserve as
many spatiotemporal properties of the original trajectory
data as possible, as stated in Problem Definition 1.
The goal can be reached through a proper selection of
thresholds thlen and thlen, to find the balance between
concision (quantity) and precision (quality) when dividing
a given trajectory data set.
A better precision can be reached by setting lower thlen
and thspd such that the differences of length and speed
between a original sub-trajectory and its replacement
line would be smaller. However, by doing so, more
replacement lines would be generated, which increases
the computation load of later steps. On the other hand,
suppressing the number of replacement lines sacrifice
precision. Hence, we make a proper selection of thlen
and thspd through evenly taking both preciseness and
conciseness into account when dividing trajectories and
generating replacement lines. Regarding this, we pro-
pose the two measurements, Rprecise and Rconcise, de-
fined as follows.
Rprecise = (thlen + thspd)/2, and (3)
Rconcise = f(thlen, thspd) =
total replacement lines
total element lines
.
The Rprecise would be lower as thlen and thspd are
smaller, which makes the criteria more strict. On the
other hand, Rconcise would be lower as the number
of total replacement lines decreased, which is reached
by assigning larger thlen and thspd. Thus, the decrease
of Rprecise and Rconcise contradicts to each other by
natural. To make the best trade-off between precision
and concision, we choose thlen and thspd that derive the
minimum sum of Rprecise and Rconcise as follows.
(thlen, thspd) = argmin(Rprecise +Rconcise). (4)
The best-fit criteria thlen and thspd can be determined
heuristically by observing the historical trajectories. They
can also be adjusted dynamically to meet different pre-
cise and concise requirements and produce line segments
accordingly while introducing proper weights to the
criteria in (3) and obtaining thresholds according to (4).
This shows DivST can provide better flexibility when
dealing with huge amounts of trajectory data under
different available memory space or other computing
resources.
5 CLUST: SPATIOTEMPORAL REPLACEMENT
LINE CLUSTERING
In CluST, we deal with Problem Definition 2 and cluster
the replacement lines of trajectories obtained from the
DivST phase. As a replacement line is representing those
consecutive element lines with homogeneous speeds and
directions inside a trajectory, we do not need a special
designed model-based clustering algorithm as what [10]
[6] [7] [8] [9] [11] do. Instead, we choose to use a typical
clustering method to find convex clusters of replacement
lines that are similar in geographic positions, lengths,
directions, and speeds, then determine a representation
for each cluster. Under this goal, the density based
clustering method perhaps is not a good choice as it
was in [1]. Although the density reachable idea makes
it possible to find a cluster with an arbitrary shape,
it may include replacement lines that are in fact quite
different apart but connected due to the similar ones in-
between. As a result, we adapt the k-means idea, which
is the most popular partition-based clustering method in
practice [23], to design our CluST method.
5.1 Spatiotemporal Line Distance
Measuring the distance between objects is the basis of
a clustering method. We propose that a proper line dis-
tance measurement should consider both the spatial and
temporal characteristics. As a result, the line distance
function is constructed by two major parts, the shift
distance dsht and the speed distance dspd. The shift distance
measures the spatial difference between lines with its
displacement and alignment parts. In the meantime, the
speed distance indicates the temporal difference of two
lines, which measures the variance between their for-
ward speeds. Thus, the spatiotemporal distance d(La, Lb)
between a pair of lines La and Lb is as below.
d(La, Lb) = wsht×dsht(La, Lb)+wspd×dspd(La, Lb), (5)
where wsht and wspd are weights for the shift and speed
distances respectively. The weights can be adjusted to
strengthen either of spatial or temporal information,
or to normalize the value range of different distance
measure granularities used for the two parts [24].
5.1.1 Shift Distance
Here we illustrate the spatial distance, measured by
dsht, between two lines. When taking one of the lines
as reference base, the relative positions between two
8(a) d(pas, pae) = d(pbs, pbe),
tae − tas = tbe − tbs.
(b) d(pas, pae) = 3d(pbs, pbe),
tae − tas = 3(tbe − tbs).
Fig. 9. Cases of zero speed distances: sLa = sLb .
Algorithm 2 CluST: Spatiotemporal Line Clustering
Input: a set of replacement lines: L1, L2, . . . , LM , number of
cluster: k
Output: line clusters: C1, C2, . . . , Ck and k cluster means
Randomly choose k lines as the initial cluster means
repeat
for i = 1 to M do
Assign Li to the cluster with the closest mean line using
the spatiotemporal line distance function
end for
for j = 1 to k do
Update the mean line of cluster Cj
end for
until no new cluster assignment for any Li
return k clusters and their corresponding mean lines
the cluster members, which are replacement lines. We
denote the mean of our line cluster as
Lmean : (pmean s, pmean e, smean),
where pmean s, pmean e are two end points describing
the position of mean line and smean is the average
speed of cluster members, respectively. The initial idea
of obtaining pmean s and pmean e is to simply average
the start ps and end pe positions of every line in the
cluster, as illustrated in Fig. 10(a), where the thin lines
indicate cluster members and the thick line is their mean.
However, the length and direction information of lines
is blurred during the averaging process. Instead, we
propose to compute the mean line that preserve average
position, length, direction and speed, respectively, from
all the members in a line cluster, as shown in Fig. 10(b).
First we compute the average center position cmean,
average length lmean, and unit vector amean for the
direction of all line members Ln in a cluster C as follows.
cmean =
∑
Ln∈C
(pns + pne)/2
|C|
, (10)
lmean =
∑
Ln∈C
d(pns, pne)
|C|
, and
amean =
∑
Ln∈C
((pne − pns)/d(pns, pne))
|C|
,
where pns and pne are the two end points of Ln, and |C|
is the number of lines in cluster C. Then, the mean line
Lmean is computed using (11) based on (10).
pmean s = cmean −
lmean × amean
2
, (11)
pmean e = cmean +
lmean × amean
2
, and
smean =
∑
Ln∈C
sLn
|C|
.
(a) Average two end points. (b) Deal each property separately.
Fig. 10. Illustration of mean line computation in CluST.
5.3 Profiling Moving Objects by Interpreting Trajec-
tory Clustering Results
By properly interpreting the cluster means found out in
CluST, we can profile the given set of moving objects
well. The output mean lines give an overall picture
of the original trajectory set with properties as their
laying positions, spanning lengths, stretching directions,
moving speeds as well as the distribution densities of
the input trajectory data. We carefully design a method
to visualize the clustering results and demonstrate the
characteristics of each cluster. Besides drawing the mean
lines on their related geographical positions and spans,
we also put a mark on the end point of each mean line
to show their forward directions, use different colors to
represent the speeds and use line widths to represent the
cluster sizes. Thus, the graph of cluster means becomes
a well profile that summarizes the moving patterns of
given trajectories.
To approximate a proper range of k, we can apply the
cluster validation methods such as those in [14] [26] [27]
with the spatiotemporal distance defined here. We check
the range of k based on the inter-cluster and intra-cluster
scattering measurements.
CDinter = min
1≤i,j≤k,i6=j
d(Lmean i, Lmean j), and(12)
CDintra =
∑
Ln∈C
d(Li, Lmean n)
k × |C|
,
where Lmean n is the mean of Cn and 1 ≤ n ≤ k. A
small enough CDintra and a relatively larger CDinter are
required for a proper k selection. And of course, to get a
more precise k, the parameter selection requires expertise
of domain experts. The profiling results are presented
using the cluster mean lines. The results would only
reveal those significant and dominated spatiotemporal
properties at smaller k’s while some details would be
omitted. On the other hand, more information would be
uncovered accompanying with more noise at larger k’s.
6 EXPERIMENT RESULTS
We conducted extensive experiments on three different
real trajectory data sets to evaluate DivCluST, and to
show their profiling results. In addition, we compared
the results of DivCluST with those considered only the
spatial or temporal information in the trajectory dividing
phase and in the line clustering phase. Moreover, we
analyzed the impact of different thresholds in the DivST
10
(a) Bus trajectory DivCluST (k = 160, thlen = 0.1, thspd = 0.9)
121.53 E 121.54 E 121.55 E 121.56 E
25.033 N
25.038 N
25.043 N
(b) S-only dividing and clustering.
121.53 E 121.54 E 121.55 E 121.56 E
25.033 N
25.038 N
25.043 N
(c) T-only dividing and clustering.
121.53 E 121.54 E 121.55 E 121.56 E
25.033 N
25.038 N
25.043 N
(d) S-only dividing and CluST.
121.53 E 121.54 E 121.55 E 121.56 E
25.033 N
25.038 N
25.043 N
(e) T-only dividing and CluST.
121.53 E 121.54 E 121.55 E 121.56 E
25.033 N
25.038 N
25.043 N
(f) DivST and S-only clustering.
121.53 E 121.54 E 121.55 E 121.56 E
25.033 N
25.038 N
25.043 N
(g) DivST and T-only clustering.
Fig. 13. Profiling results on bus trajectory and corre-
sponding spatial-only and temporal-only comparisons.
haviors and verified the effectiveness of DivCluST. By
plotting the cluster means, we can see a clear outline of
the road network, of which the real road map is shown
in Fig. 11(b). We easily identified the main bus routes
with the wider lines that obviously fall on those main
streets in the chosen area. The average speed of each
cluster never exceeded 40 km/hr, which is the limit
of the city. In addition, there are close parallel lines
in opposite directions, showing those bi-directional bus
routes. There are also overlapped lines with different
colors from red, yellow, green to cyan, which implied
the different speeds, from fast to slow, of bus movement
under different traffic conditions. We also notice some
big blue spots that clearly showing the zero speed of
buses at the main bus stops or crossroads on their routes.
Third, we show the profiling results of the taxi tra-
jectory data. We used the same parameters as bus data
in DivST, i.e., thlen = 0.1 and thspd = 0.9, and got
31,144 replacement lines after dividing. The results, with
k = 160, were shown in Fig. 14. Compared to Fig. 13(a),
we observed the same main road networks while many
new lines appeared. These new lines indicated those
road segments that were never passed by buses. Mean-
while, since the movement of taxis were faster and more
erratic compared to buses, we observed more red color
lines and various short lines indicating some fast and
irregular moving behaviors in Fig. 14.
The experiment results on the three real data sets,
which locate in very different geographic scopes and
have distinct moving styles, well sketch their different
Fig. 14. Profiling results on taxi trajectory data
regional moving behaviors and successfully shown the
effectiveness of DivCluST.
6.3 Comparisons with Spatial-only and Temporal-
only Profiling
Here we show the importance of considering both of spa-
tial and temporal properties when dividing and cluster-
ing trajectories. Focusing only on the spatial or temporal
domain cannot capture the whole picture of trajectory
moving behaviors. To compare with the results of Div-
CluST algorithm, we profiled the trajectory set by using
only the spatial or temporal criterion when dividing
trajectories and measuring only the spatial or temporal
part of line distance when clustering the replacement
lines. In other words, we have the following settings.
First, in spatial-only trajectory dividing, we applied only
the criterion (1) and ignored (2). In temporal-only trajectory
dividing, we used only the criterion in (2) and skip that in
(1). Next, we set wspd = 0 in (5) for spatial-only trajectory
clustering, and wsht = 0 in (5) for temporal-only trajectory
clustering. Also, to be fair, we set the parameters thlen,
thspd, wsht, wspd and k the same as those in Section 6.2,
if not specifically specified.
The results of dividing and clustering two real trajec-
tory sets with only spatial information were shown in
Fig. 12(b) and 13(b). The cluster mean lines were with
much less speed variety (in much similar colors) compar-
ing to those obtained by DivCluST in Fig. 12(a) and 13(a).
It is because here a long trajectory was segmented only
at significant direction change, while the speed changes
along the same direction were omitted. The condition
was even more obvious on the bus trajectory data. We
observed many straight and long cluster mean lines,
since the replacement lines tended to be straight and
long along roads, and were clustered into one group
even if their speeds were significantly different. More-
over, the stops of bus trajectory shown as blue spots in
Fig. 13(a) almost totally vanished in Fig. 13(b).
The results of spatial-only trajectory dividing with
regular CluST on two real data sets were shown in
Fig. 12(d) and 13(d). We observed similar phenomenons
as in Fig. 12(b) and 13(b). Only more speed variety was
revealed as the clustering phase considered the speed
distance. We then show what if we divided trajectories
with DivST but clustering the replacement lines with
only the spatial distance. The results were in Fig. 12(f)
and 13(f). Although the outcome had a layout similar to
Fig. 12(a) and 13(a), we still lost some speed information
12
180 E160 E140 E120 E100 E
10 N
30 N
50 N
(a) typhoon track: k = 200
(thlen = 0.15, thspd = 0.25)
121.53 E 121.54 E 121.55 E 121.56 E
25.033 N
25.038 N
25.043 N
(b) Bus trajectory: k = 400
(thlen = 0.1, thspd = 0.9)
Fig. 19. CluST results with too large k.
several green clusters at the low latitude area are longer
in length and have larger longitude spread than those
of Fig. 16(b). The profiling results of too small and
too large thspd (0.125 and 1.0, respectively) were shown
in Fig. 17. As thspd decreased, the trajectory dividing
phase would be more sensitive to the speed variance.
In Fig. 17(a), we see clusters of different speeds but
all the mean lines were short. It is because many short
replacement lines were generated in the dividing phase
due to the small thspd. In contrast, when thspd was large
as shown in Fig. 17(b), most trajectories were not easily
divided and we see many long cluster mean lines. At
the bottom of Fig. 17(b), there are many cluster lines with
similar speeds, comparing to Fig. 12(a). The above results
verified what we discussed in Section 4.2. We have to
properly select thlen and thspd for effectively dividing
trajectories.
Next, we show how DivST can work better in dividing
the trajectories when compared with the approximate
MDL method described in [1]. We selected trajectories
including up to 6,000,000 GPS points from the taxi data
sets. We implemented the approximate MDL method by
adopting our spatial distance functions and adding in
the temporal measurements. The L(H), which described
the compressed trajectory, is defined as the summation
of the lengths of all replacement lines, plus the sum of
dspd between each element line and its corresponding
replacement line. As to L(D|H), which described the
difference between the compressed and the raw trajec-
tories, we use summation of dal between each element
line and its relative portion of the candidate replacement
line, plus the sum of dspd between the two.
We show the accumulated processing time to divide
whole trajectory set and the generated line numbers from
its first record to the last in Fig. 18(a) and Fig. 18(b),
respectively. Under the proper threshold selection of
DivST, where thlen = 0.05 and thspd = 0.3, we can see the
approximate MDL method was much slower when sim-
ilar numbers of replacement lines were generated. This
showed that DivST was able to get the same compres-
sion quality with a smaller time cost. Moreover, as we
mentioned earlier in Sec. 4, DivST had better flexibility
to adapt different compression ratios in consideration of
the memory space limit.
6.5 Analysis of CluST
One main challenge of the k-means based clustering is
the decision of k. Here we discuss the impact of k on the
180 E160 E140 E120 E100 E
10 N
30 N
50 N
(a) typhoon track: k = 10
(thlen = 0.15, thspd = 0.25)
121.53 E 121.54 E 121.55 E 121.56 E
25.033 N
25.038 N
25.043 N
(b) Bus trajectory: k = 20
(thlen = 0.1, thspd = 0.9)
Fig. 20. CluST results with too small k.
121.53 E 121.54 E 121.55 E 121.56 E
25.033 N
25.038 N
25.043 N
(a) wsht : wspd = 5 : 1
121.53 E 121.54 E 121.55 E 121.56 E
25.033 N
25.038 N
25.043 N
(b) wsht : wspd = 1 : 5
Fig. 21. Impacts of wsht and wspd on bus data profiling.
profiling and provide some guidelines for choosing k.
Based on (12), k between 30 and 55 was recommended
for the typhoon track data, and k from 60 to 160 was
suggested for the bus trajectory data. After we can
decide a range of k based on some clustering validation
measurements as in [27], the exact k selection should
base on the domain expertise of the data. In our exper-
iments, for typhoon tracks, clusters should tell different
parts of the moving characteristics along their paths
of typhoons from low latitudes to high latitudes and
distinguish different patterns. For bus trajectories, the
number of clusters must be large enough to separate
traffic on different segments of roads and distinguish
those with different speeds on one road.
Finally, we show the clustering results if too small or
too large k was used in Fig. 19 and Fig. 20 on both
the typhoon tracks and the bus trajectories. When k
was too large as shown in Fig. 19, too many similar
and close-by clusters were generated, which gave us too
many redundant information. On the other hand, when
k was too small, many basic typhoon track moving styles
vanished as shown in Fig. 20(a) while the bus routes that
were originally on different roads were grouped into one
cluster as shown in Fig. 20(b).
The weights in distance function (5) can be adjusted to
strengthen either of spatial or temporal information. The
impact of wsht can be shown by comparing Fig. 13(a),
Fig. 21(a) and Fig. 13(f), where the wsht : wspd = 1 : 1,
5 : 1 and 1 : 0, respectively. The speed diversity
decreased as ratio of wsht increased, while the gener-
ated clusters fit better into the real road network. In
the mean time, the impact of wspd is shown through
comparing Fig. 13(a), Fig. 21(b) and Fig. 13(g), where the
wsht : wspd = 1 : 1, 1 : 5 and 0 : 1, respectively. The speed
diversity increased as ratio of wspd got larger, while
the generated clusters distributed more randomly and
the original road network was totally vanished when
wsht = 0. With the above observations, the wsht and wspd
should be adjusted according to the importance of the
spatial and speed information.
14
regarded as a kind of trajectory sketches, which may be
useful in trajectory data warehousing. Last but not least,
we may find relationships such as the temporal order
between clusters so that we can do trajectory prediction
according to these profiles.
REFERENCES
[1] J.-G. Lee, J. Han, and K.-Y. Whang, Trajectory clustering: a
partition-and-group framework, in Proceedings of the 2007 ACM
SIGMOD. ACM, 2007, pp. 593-604.
[2] A. T. Palma, V. Bogorny, B. Kuijpers, and L. O. Alvares, A
clustering-based approach for discovering interesting places in tra-
jectories, in Proceedings of the 2008 ACM symposium on Applied
computing. New York, NY, USA: ACM, 2008, pp. 863-868.
[3] F. Giannotti, M. Nanni, F. Pinelli, and D. Pedreschi, Trajectory
pattern mining, in Proceedings of the 13th ACM SIGKDD. ACM,
2007, pp. 330-339.
[4] J. Han, J.-G. Lee, and M. Kamber, An Overview of Clustering
Methods in Geographic Data Analysis, 2nd ed. CRC Press, 2009.
[5] Y. Zheng and X. Zhou, Computing with Spatial Trajectories, 1st ed.
Springer Publishing Company, Incorporated, 2011.
[6] S. Gaffney, A. Robertson, P. Smyth, S. Camargo, and M. Ghil,
Probabilistic clustering of extratropical cyclones using regression
mixture models, Climate Dynamics, vol. 29, pp. 423-440, 2007.
[7] F. P. Mitsubishi, Trajectory distance metric using hidden markov
model based representation, 2004.
[8] J. Ni and C. V. Ravishankar, Indexing spatio-temporal trajectories
with efficient polynomial approximations, IEEE Transactions on
Knowledge and Data Engineering, vol. 19, pp. 663-678, 2007.
[9] Z. Fu, W. Hu, and T. Tan, Similarity based vehicle trajectory
clustering and anomaly detection, vol. 2, 2005, pp. II-602-5.
[10] E. Frentzos, K. Gratsias, and Y. Theodoridis, Index-based most
similar trajectory search, Data Engineering, International Confer-
ence on, pp. 816-825, 2007.
[11] A. Anagnostopoulos, M. Vlachos, M. Hadjieleftheriou, E. Keogh,
and P. S. Yu, Global distance-based segmentation of trajectories, in
Proceedings of the 12th ACM SIGKDD. ACM, 2006, pp. 34-43.
[12] Y. Zheng, L. Zhang, X. Xie, and W.-Y. Ma, Mining interesting
locations and travel sequences from gps trajectories, in Proceedings
of the 18th international conference on World wide web, ser.
WWW 09. New York, NY, USA: ACM, 2009, pp. 791-800. [Online].
Available: http://doi.acm.org/10.1145/1526709.1526816
[13] G.-P. Roh, J.-W. Roh, S.-W. Hwang, and B.-K. Yi, Support-
ing pattern-matching queries over trajectories on road networks,
Knowledge and Data Engineering, IEEE Transactions on, vol. 23,
no. 11, pp. 1753-1758, nov. 2011.
[14] J.-G. Lee, J. Han, X. Li, and H. Cheng, Mining discriminative
patterns for classifying trajectories on road networks, IEEE Trans-
actions on Knowledge and Data Engineering, vol. 23, pp. 713-726,
2011.
[15] Z. Fu, W. Hu, and T. Tan, Similarity based vehicle trajectory
clustering and anomaly detection, in Image Processing, 2005. ICIP
2005. IEEE International Conference on, vol. 2, sept. 2005, pp. II-
602-5.
[16] J.-G. Lee, J. Han, X. Li, and H. Gonzalez, Traclass: trajectory
classification using hierarchical region-based and trajectory-based
clustering, Proc. VLDB Endow., vol. 1, pp. 1081-1094, August 2008.
[17] H. Liu, L.-Y. Wei, Y. Zheng, M. Schneider, and W.-C. Peng,
Route discovery from mining uncertain trajectories, in Data Mining
Workshops (ICDMW), 2011 IEEE 11th International Conference on,
dec. 2011, pp. 1239-1242.
[18] Y. Zheng, Q. Li, Y. Chen, X. Xie, and W.-Y. Ma, Understanding
mobility based on gps data, in Proceedings of the 10th inter-
national conference on Ubiquitous computing, ser. UbiComp 08.
New York, NY, USA: ACM, 2008, pp. 312-321. [Online]. Available:
http://doi.acm.org/10.1145/1409635.1409677
[19] K. Buchin, M. Buchin, M. van Kreveld, and J. Luo, Finding long
and similar parts of trajectories, in Proceedings of the 17th ACM
SIGSPATIAL. ACM, 2009, pp. 296-305.
[20] M. Buchin, A. Driemel, M. van Kreveld, and V. Sacristan, An
algorithmic framework for segmenting trajectories based on spa-
tiotemporal criteria, in Proceedings of the 18th SIGSPATIAL. ACM,
2010, pp. 202-211.
[21] P. Gru¨unwald, I. Myung, and M. Pitt, Advances in minimum
description length: theory and applications. MIT Press, 2005, ch.
A Tutorial Introduction to the Minimum Description Length Prin-
ciple.
[22] J. Chen, M. K. Leung, and Y. Gao, Noisy logo recognition using
line segment hausdorff distance, Pattern Recognition, vol. 36, no.
4, pp. 943-955, 2003.
[23] A. K. Jain, Data clustering: 50 years beyond k-means, Pattern
Recognition Letters, vol. 31, no. 8, pp. 651-666, 2010.
[24] C. Bettini, S. Jajodia, and S. Wang, Time granularities in databases,
data mining, and temporal reasoning. Springer, 2000, ch. Granu-
larity Systems.
[25] E. Williams. (2011, April) Aviation formulary v 1.46. [Online].
Available: http://williams.best.vwh.net/avform.htm
[26] R. Tibshirani, G. Walther, and T. Hastie, Estimating the number
of clusters in a data set via the gap statistic, Journal Of The Royal
Statistical Society Series B, vol. 63, no. 2, pp. 411-423, 2001.
[27] O. Maimon and L. Rokach, Data mining and knowledge discovery
handbook. Springer, 2005, ch. Clustering Method.
[28] Joint typhoon warning center. [Online]. Available:
http://www.usno.navy.mil/JTWC
[29] Taipei e-bus system. [Online]. Available: http://www.ebus.
taipei.gov.tw/
[30] K. Emanuel, Divine Wind - The History and Science of Hurri-
canes. Oxford University Press, Sep. 2005.
[31] M. Ester, H.-P. Kriegel, J. Sander, and X. Xu, A density-based
algorithm for discovering clusters in large spatial databases with
noise, Computer, vol. 96, pp. 226-231, 1996.
Huey-Ru Wu received her B.S. degree in electrical engineering from
National Taiwan University, Taiwan, and M.S. degree in computer sci-
ence from National Chiao Tung University, Taiwan. She is currently
a Ph.D. candidate in the Electrical Engineering Department, National
Taiwan University, Taiwan. Her research interests include data mining
and databases.
Mi-Yen Yeh received her B.S. and Ph.D. de-
gree Electrical Engineering, both from National
Taiwan University, Taipei, Taiwan, in 2002 and
2009, respectively. She is now an assistant re-
search fellow at Institute of Information Science,
Academia Sinica. Her research interests include
data mining and databases, especially time se-
ries analysis, trajectory data mining, and social
network analysis. She received Exploration Re-
search Award of Pan Wen Yuan Foundation in
2011. She is a member of IEEE and ACM.
Ming-Syan Chen received the M.S. and Ph.D.
degrees in Computer, Information and Control
Engineering from The University of Michigan,
Ann Arbor, MI, USA. He is now a Distinguished
Research Fellow and the Director of Research
Center of Information Technology Innovation
(CITI) in the Academia Sinica, Taiwan, and is
also a Distinguished Professor jointly appointed
by EE Department at National Taiwan University.
He was a research staff member at IBM Thomas
J. Watson Research Center, Yorktown Heights,
NY, USA, the Director of Graduate Inst. of Comm. Eng. at NTU, and
also the President/CEO of Institute for Information Industry (III), which
is one of the largest organizations for information technology in Taiwan.
His research interests include databases, data mining, cloud computing,
and multimedia networking, and he has published more than 300 papers
in his research areas. Dr. Chen is a Fellow of ACM and a Fellow of IEEE.
享目前實務搜索工作上會遇到的技術和市場問題。下午的 keynote 請到美國 UIUC 的 Prof. Jiawei Han，
講題為「Mining Heterogeneous Information Networks: The Next Frontier」，主要闡述在異質資訊網路上，各
項重要的分析與探勘工作，以及未來可能發展的方向。除了兩個 keynote 之外，本日也安排了許多重
要的 sessions。其中我去聽了 Time series、Social Network Analysis、以及 Social and web mining applications
這些 session 中的幾篇論文的報告，收獲不少。另外，我還參加了一個業界座談的 session，由 Dr. Wei-Ying 
Ma 和 Dr. Christian Posse 分別介紹 Microsoft Research 和 LinkedIn 兩家公司目前重點研究項目。晚上，
KDD 大會舉行 reception, 同時同地也安排了會議論的 poster 展示。讓大家能在輕鬆愉快的氣氛之中，
互相了解彼此的研究。 
8/14 是 KDD2012 會議的第二天，早上安排的 keynote 邀請美國 UC Berkeley 的 Prof. Michael I. Jordan，
講題為「Divide-and-Conquer and Statistical Inference for Big Data」，從統計學的角度來分析巨量資料處理
的問題。下午的 keynote 則邀請到 University of Pennsylvania 的 Prof. Michael Kearns，講是為「Experiments 
in Social Computation (and the Data They Generate)」，和大家分享他們做的社群運算模擬實驗，以及從這
些實驗中所獲得的資訊。此日同樣也安排了眾多的 research session，有很多精彩的論文報告。晚上亦
有 poster session 以及 reception。 
8/15 是 KDD2012 會議的最後一天。早上安排了 Best paper presentation，把今年的 best paper award
以及 best student paper award 得主，共三篇論文，一起放在同一個 session 來發表。下午比較重要的一個
event 就是大會安排了一個 Panel, 討論的主題為目前資料分析與探勘領域最熱門的話題「Big Data」。
會中請到各專家學者討論有關 big data 的本質、定義、各式研究議題、新的研究挑戰、與未來研究的
方向。Panelists 們討論熱烈，席間聽眾的問題也很踴躍，彼此間激盪出許多不同的想法和觀點。 
最後，KDD2012 年的會議在 8/15 晚間落幕。我於 8/16 返回台灣。 
 
二、與會心得 
這次是本人首次參與 IEEE GrC 與 ACM SIGKDD 國際會議。GrC 國際會議結合數學理論與電腦
科學，包含資料庫與資料探勘，算是跨領域學科的研究。本人此次主持之 special session「mining and 
analysis with graphs」，期能結合圖形理論與圖形探勘管理兩大領域的研究，最後有幸選出四篇論文
發表，包括了社群網路中的社群關係與互動預測、異常偵測、以及利用硬體和圖形方法來加速資
料探勘的工作。四篇報告內容皆非常精彩充實，亦獲得許多在場聽眾的問題與迴響。 
 另外，ACM SIGKDD 是資料探勘領域最著名且最重要的會議。每年均吸引上百甚至上千的產
官學界相關人士參加。根據大會資料提供，今年註冊人數達到歷史新高，約有一千兩百人左右。
特別是這次會議舉辦地點在北京，有非常多的中國學者到場參與。此次來自台灣一同與會的學者
也不少。能夠以觀摩身份參與此盛會，讓我見識到了探勘領域大師們的風采，與其互動，並了解
最新的探勘研究工作，獲益良多。  
 
國科會補助計畫衍生研發成果推廣資料表
日期:2013/03/02
國科會補助計畫
計畫名稱: 以城市交通分析為主之軌跡探勘
計畫主持人: 葉彌妍
計畫編號: 100-2221-E-001-023- 學門領域: 資料庫系統及資料探勘
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
