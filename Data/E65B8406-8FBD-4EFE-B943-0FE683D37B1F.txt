constraints. The considered tasks are malleable, 
which means that they can be executed on any 
arbitrary number of processors, its processing time 
of each task depends on the number of processor 
allocated to it. The considered objective criterion 
of algorithm is the makespan (maximum completion 
time). In the project, Jansen et al. [8] propose an 
approximation algorithm that has a ratio 
100/43 + 100(\sqrt{4349}-7)/2451≈4.730598 . We 
propose an algorithm that uses 
dynamic rounding technique to obtain a ratio at most 
200/129 + (\sqrt{26641} + 29)/20253  ≈3.4486 in best 
case. We also set a constraint to bind our ratio. 
英文關鍵詞： Approximation algorithms, scheduling, malleable 
tasks, precedence constraints. 
 
第一年計劃結果：
摘要
在本研究計劃中，我們研究可展延任務與優先限制之排程問題。假設我們有m個相同處理器與n個任務，且每
一個任務經由優先限制所連接。每一個任務的處理時間為一個以分配的處理器數量為索引之函數。其演算法考慮
的目標準則為makespan(最大完成時間)。在本報告中，我們提出一個近似比為4/3+512(
√
24112+48)/65424 ≈
2.9242之多項式時間演算法。此結果改良Jansen所提出的近似比為100/43+ 100(
√
4349− 7)/2451 ≈ 4.7306之近
似演算法 [8]。
關鍵詞：近似演算法, 排程, 可展延任務, 優先限制
abstract
The classical scheduling problem for the malleable tasks under general precedence constraints in-
volves finding a minimum makespan (maximum completion time) by a feasible allotment. In this project,
we present a new polynomial-time approximation algorithm which can achieve approximation ratios of
4/3 + 512(
√
24112 + 48)/65424 ≈ 2.9242. Our results improve on the previously best-known results that
achieve approximation ratios of 100/43 + 100(
√
4349− 7)/2451 ≈ 4.7306 [8].
Key words: Approximation algorithms, scheduling, malleable tasks, precedence constraints.
1 Introduction
Given a directed graph G = (V,E) with processing time functions for each vertex where E ⊆ V × V repre-
sents the set of precedence constraints among the vertices. A computational model called malleable tasks
has beenproposedby Turel et al. [17] (numerous variants of themodel have beenproposed: Culler et al. [2];
Hwang et al. [5]; Prasanna and Musicus [16]); in this model, malleable tasks are computation units which
the processing time depends on the number of processors allocated to it. The influence of communica-
tions, synchronization and other overhead are included in the processing time. The scheduling problem
for themalleable tasks under general precedence constraints involves finding a feasible allotment with the
minimum makespan in G. The problem with arbitrary precedence constraints is strongly NP-hard for the
total number of processors m = 2 and the problem of scheduling independent malleable tasks (without
precedence constraints) is also stronglyNP-hard form = 5 (Du and Leung [3]); thus, efficient approximation
heuristics are sought instead of exact algorithms.
Previously, Garey and Graham [4] and Ludwing and Tiwari [12] addressed approximation algorithms
with a ratio of 2 for the problem of scheduling independent malleable tasks. This was improved to
√
3 by
Mounie´ et al. [14], and further to 3/2 (Mounie´ et al. [13]). Jansen and Porkolab [7] proposed a polynomial
time approximation scheme (PTAS) for the case of fixed m. If p(l) ≤ 1, l ∈ {1, . . . ,m}, for arbitrary m an
AFPTAS was addressed by Jansen [6].
Lenstra and Rinnooy Kan [9] shown that there is no polynomial time algorithmwith approximation ratio
less than 4/3 for scheduling malleable tasks with precedence constraints, unless NP=P. Lepe´re et al. [10]
proposed a 4-approximation algorithm for the tree precedence graph. The idea of the two-phase algo-
rithms was proposed initially in Lepe´re et al. [10] and used in Lepe´re et al. [11] to obtain an approximation
algorithm for general precedence constraints with a ratio of 5.236. Moreover, the ratio was improved to
2.618 for the tree precedence graph. Recently, Jansen et al. [8] was proposed the previous best known
approximation algorithm for general precedence constraints with a ratio of 4.731.
The makespan of generated in Jansen et al. [8] was used linear program formulation and the rounding
technique to generate solution. However, the optimal fractional work of this algorithm was underesti-
mated that leads a low optimal fractional solution. Thus, we will propose a new linear program and a new
rounding technique. The innovative feature of the algorithm is that, our algorithm is iteratively to gener-
ate an improved scheduling malleable tasks in each iteration, which utilize the previous solution to modify
constraints of linear program and then call linear program to regenerate a new solution whose makespan
is smaller than that of the previous scheduler. That is, as the number of iterations increases, the obtained
solution approaches OPT .
The remainder of this report is organized as follows: In the next chapter, we introduce basic definitions,
notation, and properties. In chapter 3, we present our algorithms, the Iterative Linear Program algorithm
ILP. The approximation ration analysis for the ILP is provided in chapter 4. In chapters 5, we show approx-
imations ratio results for our algorithm and Jansen et al. [8] algorithm. Finally, some concluding remarks
are given in chapter 6.
1
Figure 1: The diagrams of the work function wj(pj(l)).
Wealsodenote t(·)by the correspondingprocessing time function in thework, that is, forwj ∈ [Wj(1),Wj(m)],
if l = min{k|k ∈ {1, . . . ,m},Wj(k) = wj}, then tj(wj) = pj(l). If wj ∈ (Wj(l),Wj(l + 1)) and l = 1, . . . ,m − 1,
then
tj(wj) = (pj(l)− pj(l + 1))
(
1− wj −Wj(l)
Wj(l + 1)−Wj(l)
)
+ pj(l + 1) (2.4)
where tj(w∗j ) is equal to the corresponding processing time of task Jj that may not equals to x∗j (see Figure
1).
WedenoteL∗,W ∗, C∗max by theoptimal critical path lengths, theoptimal totalwork andoptimalmakespan
by our algorithm. Moreover, denote by L,W,Cmax and by L′,W ′, C ′max the critical path lengths, the total
works and the makespans of the final schedule delivered by our algorithm and the schedule correspond-
ing to the first phase solution, respectively. Let OPT be the overall optimal makespan (over all feasible
schedules with integral number of processors allotted to all tasks). In any schedule, any critical path length
should be bounded by the makespan. In addition, the makespan is an upper bound on the average work
(total work divide bym). Therefore,
max {L∗,W ∗/m} ≤ C∗max ≤ OPT (2.5)
3 Approximation Algorithm
Jansen et al. [8] proposed two-pahase approximation algorithm that was used linear program formulation
and the rounding technique to generate solution. However, the optimal fractional work of this algorithm is
underestimated that leads a low optimal fractional solution. Thus, we propose a new linear program and a
new rounding technique. Moreover, themain algorithm, namely ILP, is presented to generate an improved
scheduling malleable tasks in each iteration, which utilize the previous solution to modify constraints of
linear program and then call linear program to regenerate a new solution whose makespan is smaller than
that of the previous scheduler.
Our algorithm is also two-phase approximation algorithm. In the first phase, we used a iterative al-
gorithm to solve the allotment problem. And then, we round its fractional solution and obtain a feasible
allotment α′. We also compute the value of the allotment parameter µ which is depended on rounding
parameter ρ and total number of processors m. In the second phase, the algorithm generates a new al-
lotment α that is based on the resulting allotment α′ and the pre-computed allotment parameter. Finally,
after the new allotment generates, the algorithm runs LIST.
Themain ideas of the approximation algorithm for the discrete time-cost tradeoff problem is based on
Skutella [15] but do not directly use them because work function and processing function may not convex.
We split work function and processing function intom−1 fragments which call the virtual task. Each virtual
3
min C
s.t. 0 ≤ Cj ≤ L, ∀j;
Cj + xk ≤ Ck, ∀j and k ∈ Γ+(j);
xj = x
s
j +
∑sj2
i=sj1
(xji − pj(i+ 1)), ∀j;
xlji ≤ xji ≤ xuji , ∀j and i = sj1 , · · · , sj2 ;
xji−pj(i+1)
pj(i)−pj(i+1) ≤
xji+1−pj(i+2)
pj(i+1)−pj(i+2) , ∀j and i = sj1 , · · · , sj2 − 1;
wˆj(xj) = w
s
j +
∑sj2
i=sj1
w¯ji(xji), ∀j;
P =
∑n
i=1 pj(1);∑n
j=1 wˆj(xj) + P ≤W ;
L ≤ C;
W/m ≤ C;
(3.6)
We then propose a iterative algorithm, that is ILP, which utilize the previous solution to remove vir-
tual tasks to modify constraints of linear program and then regenerate a new solution whose makespan
approaches OPT . In our algorithm, we have two cases as following:
Case 3.1. xj ≥ x∗j ;
Case 3.2. xj < x∗j .
In the Case 3.1, since wj(x∗j ) ≥ w∗j , we remove virtual tasks that pj(i) ≤ x∗j , and remove virtual tasks
that pj(i + 1) ≥ xj (e.g. in Figure 2, virtual tasks xj1 and xj4 will be removed) for all i ∈ {1, . . . ,m − 1}. And
then, the remaining virtual tasks are xjsj1 , . . . , xjsj2 where 1 ≤ sj1 ≤ sj2 ≤ m − 1. The renewed solution
will lie between x∗j and xj . We call (x∗j , xj) by a solution area in the processing time. In the Case 3.2, since
tj(w
∗
j ) ≥ x∗j , we remove virtual tasks that pj(i+ 1) ≥ tj(w∗j ), and remove virtual tasks that pj(i) ≤ xj (e.g. in
Figure 1, virtual tasks xj3 and xj4 will be removed). The renewed solution will lie between w∗j and wj(xj).
We also call
(
w∗j , wj(xj)
)
by a solution area in the work.
We apply the rounding technique for the fractional solution to linear program (3.6). For any solution
x∗ji ∈ [xlji , xuji ], if x∗ji − pj(i + 1) < ρ · (pj(i)− pj(i+ 1)), we round it to xji = pj(i + 1); otherwise, we round it
to xji = pj(i), where ρ ∈ (0, 1) is a rounding parameter and sj1 ≤ i ≤ sj2 . In this report, we set
ρ = 1/2.
And then, the rounded solution xj = xsj +
∑sj2
i=sj1
(xji − pj(i+ 1)). We are able to idenify an alloted proces-
sors l′j such that pj(l′j) = xj . This gives an allotment α′ where each job Jj is allotted a number l′j processors.
4 Analysis of the Approximation Algorithm
Wefirst analyze the complexity of our algorithm. In each iteration, the running time contains linear program
and rounding step. The linear program (3.6) has O(mn) variables and O(n2 +mn) constraints. Moreover,
the rounding step needs atmostO(mn) time. Thus, each iteration running time isO(mn+LP (mn,n2+mn)),
where LP (p, q) is the time to solve a linear program with p variables and q constraints. In addition, we can
observe the change of the solution area to obtain the number of iterations. For maximizing soultion area,
if xj round to pj(sj1), then the processing time x∗j ≥ xsj + ρ (pj(sj1)− pj(sj2 + 1)); or if xj round to pj(sj2 +1),
then theworkwj(x∗j ) ≥ pj(1)+wsj+(1−ρ)
∑sj2
i=sj1
w¯ji(pj(i+1)). We can obtain that the solution area decrease
with a factor at last 1/2 by each iteration. Therefore, Algorithm ILP executes at most O(logm) iterations.
The running time in the first phase isO(mn logm+LP (mn,n2+mn) logm). In the second phase, algorithm
LIST has a complexity O(mn). Thus, the overall running time is also O(mn logm+ LP (mn,n2 +mn) logm).
In the next step, we shall show the approximation ratio of our algorithm. It is worth noting that here
W ∗ = P+
∑n
j=1 wˆj(x
∗
j ) andW ′ =
∑n
j=1 l
′
j ·pj(l′j). Our algorithm iteratively remove virtual tasks and remaining
virtual tasks are bounded by index of sj1 to sj2 for all 1 ≤ j ≤ n. In particular, the virtual task of boundary
may not provide a complete part to regenerate a new solution. Therefore, we define that the number of a
remaining virtual task is (xuji − xlji)/(pj(i) − pj(i + 1)) where sj1 ≤ i ≤ sj2 . Our algorithm has a property as
following.
Lemma .1. The number of remaining virtual tasks is decreasing as iteration increasing.
5
the Case 4.3, the number of the virtual task in index sj2 increase at most ρ but the number of the virtual task
in index sj1 decrease more then 1− ρ. In the Case 4.4, the number of the virtual task in index sj1 increase at
most 1− ρ but the number of the virtual task in index sj2 decrease more then ρ. Since ρ = 1/2, the number
of remaining virtual tasks is also reduced in the Case 4.3 and 4.4. The lemma follows.
According to the Lemma .1, we can observe a property, that is, as the number of iterations increases, the
obtained xj and wˆj(xj) approache x∗j and wˆj(x∗j ). Thus, we stop iterating when sj1 = sj2 for all j = 1, . . . , n,
namely each task has just one remaining virtual task. Therefore, we have the following bounds on L′ and
W ′:
Lemma .2. If sj1 = sj2 for all j ∈ {1, . . . , n},
L′ ≤ 2L
∗
1 + ρ
and W ′ ≤W ∗ + ρP.
Proof. According to the rounding technique, if x∗ji − pj(i + 1) < ρ · (pj(i)− pj(i+ 1)), then xji = pj(i +
1), which implies that x∗ji − pj(i + 1) ≥ ρ · (xji − pj(i+ 1)). On the other hand, if x∗ji − pj(i + 1) ≥ ρ ·
(pj(i)− pj(i+ 1)), then xji = pj(i), which also can obtain that x∗ji − pj(i + 1) ≥ ρ · (xji − pj(i+ 1)). Thus,
we obtain
∑sj2
i=sj1
(
x∗ji − pj(i+ 1)
) ≥ ρ ·∑sj2i=sj1 (xji − pj(i+ 1)). Therefore, by Assumption 2 that sj1pj(sj1) ≤
(sj2 + 1)pj(sj2 + 1), we can derive the following chain of inequalities:
x∗j = x
s
j +
sj2∑
i=sj1
(
x∗ji − pj(i+ 1)
)
≥ xsj + ρ
sj2∑
i=sj1
(xji − pj(i+ 1))
= (1− ρ)xsj + ρ(xsj +
sj2∑
i=sj1
(xji − pj(i+ 1)))
= (1− ρ)xsj + ρxj
≥ sj1
sj2 + 1
(1− ρ)xj + ρxj
=
(
sj1
sj2 + 1
(1− ρ) + ρ
)
xj
=
(
sj2
sj2 + 1
(1− ρ) + ρ
)
xj
≥
(
1
2
(1− ρ) + ρ
)
xj
=
1 + ρ
2
xj . (4.7)
Based on Eq. (4.7), the critical path length increase with a factor at most 21+ρ by rounding.
In the optimal solution of Eq. (3.6), if x∗ji − pj(i + 1) < ρ · (pj(i)− pj(i+ 1)), we round it to xji =
pj(i + 1); thus, its processing time is not increasing while the work may increase. By the (2.1), the vir-
tual work of xji is w¯ji(xji) = Wj(i + 1) − Wj(i) and the virtual work of optimal solution x∗ji is w¯ji(x∗ji) =
(Wj(i+ 1)−Wj(i))
(
1− xji−pj(i+1)pj(i)−pj(i+1)
)
≥ (Wj(i+ 1)−Wj(i)) (1 − ρ). On the other hand, if x∗ji − pj(i + 1) ≥
ρ · (pj(i)− pj(i+ 1)), we round it to xji = pj(i); such that the virtual work w¯ji(xji) = 0, which implies that
w¯ji(x
∗
ji
) ≥ (1−ρ)w¯ji(xji). Since each task has just one remaining virtual task, wˆj(xj)−wsj ≤max{Wj(i+1)−
7
For any job Jj in T2 ∩ P , there are two cases. In the first case, a job Jj is allotted l′j ≤ µ processors in α′.
This is same as the case before andwe also have 1+ρ2 pj(lj) ≤ x∗j . In the second case, a job Jj is allotted l′j > µ
processors in α′ and the final allotment lj = µ. Then, we have two sub-cases that are l∗j ≥ µ and l∗j < µ. In
the first sub-case, we have l∗j ≥
⌊
l∗j
⌋ ≥ µ ≥ lj since µ is an integer. According to the Assumption 2 and Eq.
(4.10), we can obtain that ljpj(lj) = Wj(lj) ≤ Wj(µ) ≤ Wj(
⌊
l∗j
⌋
) ≤ w˜j(x∗j ) = l∗jx∗j ≤ Wj(
⌈
l∗j
⌉
). Since l∗j ≤ m
and w˜j(x∗j ) = l∗jx∗j ≥ ljpj(lj) = Wj(lj), it holds that pj(lj) ≤ l∗jx∗j/lj ≤ mx∗j/µ. In the second sub-case, since
l∗j < µ and l′j ≥ µ, the processing time must be rounded down from x∗j to pj(l′) by the rounding procedure.
Then, in the second phase, Jj is allotted µ processors and ljpj(lj) ≤ l′jpj(l′j) by the Assumption 2. Since
that are at most m processors allotted to Jj in α′, we can obtain pj(lj) ≤ l′jpj(l′j)/lj ≤ mpj(l′j)/µ ≤ mx∗j/µ.
Therefore for any job Jj in T2 ∩ P,min
{
1+ρ
2 ,
µ
m
}
pj(lj) ≤ 1+ρ2 pj(l′j) ≤ x∗j .
By our construction, the tasks on the directed path P cover all time slots in T1 ∪ T2 in the final schedule
α. Let us estimate the length L′(P ) of the path P under the allotment α′. The tasks that are executed during
time slots in T1 contribute a total length of at least 1+ρ2 |T1| toL∗(P ). The tasks that are executed during time
slots in T2 contribute a total length of at least min
{
1+ρ
2 ,
µ
m
} |T2| to L∗(P ). Since the critical path L∗(P ) is not
more than the makespan C∗max, our proof is completed.
In addition, we consider the fixed cost P =
∑n
j=1 pj(1). We have its lower bound as follows:
Lemma .5. |T1|+ |T2|+ |T3| ≤ P
Proof. Let us consider a schedule with makespan exactly the amount of P . The schedule is constructed by
scheduling all tasks on the one processor. Therefore, the makespan is equal to or larger than any feasible
schedule. The inequality is proven.
Moreover, we show the following upper bound onW :
Lemma .6. W ≤W ∗ + ρP
Proof. The allotment α is min{α′, µ}, that is, the number of processors allotted in α is not more than the
number of processors allotted in α′. By the Assumption 2, its work does not increase. ThereforeW ≤ W ′.
By the Lemma .2, we have that
W ≤ W ′
≤ W ∗ + ρP. (4.11)
We define the normalized overall length of the ith type of time slots by xi = |Ti|/C∗max for i = 1, 2, 3. We
also define xp = P/C∗max. Therefore, we are able to obtain a min-max nonlinear program as follows where
its optimal value is an upper bound on the approximation ratio r:
Lemma .7. The optimal approximation ratio of our algorithm is bounded by the following min-max non-
linear program.
minµmaxx1,x2,x3,xp x1 + x2 + x3
s.t. x1 + x2 + x3 ≤ xp;
x1 + µx2 + (m− µ+ 1)x3 ≤ m+ ρxp;
1+ρ
2 x1 +min
{
1+ρ
2 ,
µ
m
}
x2 ≤ 1;
x1, x2, x3, xp ≥ 0;
ρ = 0.5;
µ ∈ {1, . . . , ⌊(m+ 1)/2⌋} .
(4.12)
Proof. We normalize the inequalities in Lemma .5 and Lemma .4, and then we have the first and the third
constraints in Eq. (4.12). Since the total workW ≥ |T1|+µ|T2|+(m−µ+1)|T3|with Lemma .6, we obtain the
second constraints. The rest constraints come from the definitions of the parameters. Because the total
makespan Cmax = |T1| + |T2| + |T3|, the approximation ratio r = sup {Cmax/OPT} ≤ sup {Cmax/(C∗max)} =
maxx1,x2,x3 {x1 + x2 + x3} according to inequality (2.5). The goal is to minimize the approximation ratio
over all feasible µ. Thus the lemma is proven.
Moreover, we can simplify the min-max nonlinear program Eq. (4.12) as follows:
9
Case 4.1. 21.5 ≤ 2m and mµ ≤ mµ−0.5 ;
Case 4.2. 21.5 ≤ 2m and mµ ≥ mµ−0.5 ;
Case 4.3. 21.5 ≥ 2m and mµ ≤ mµ−0.5 .
Case 4.4. 21.5 ≥ 2m and mµ ≥ mµ−0.5 .
Since µ − 0.5 < µ, so the Case 4.2. and 4.4. are not exist. The Case 4.3 is also not exist because m ≥ 2.
the polytope defined by E1, E2 and E3 is inside the polytope defined by E1, E4 and E5. So the constraint
C2 can be removed, and we just need to consider the following min-max nonlinear program:
minµmaxx1,x2
(m−µ)x1+(m−2µ+1)x2+m
m−µ−ρ+1
s.t. 1+ρ2 x1 +
µ
mx2 ≤ 1;
x1, x2 ≥ 0;
ρ = 0.5;
µ ∈ {1, . . . , ⌊(m+ 1)/2⌋} .
(4.18)
It is obvious that the maximum value is not in extreme point E1. Substituting E2 : (x1, x2) = ( 21.5 , 0) and
E3 : (x1, x2) = (0,
m
µ ) to objective function, we have
A(µ) =
7m− 4µ
3m− 3µ+ 1.5
=
4
3
+
1
3
3m− 2
m− µ+ 0.5 (4.19)
and
B(µ) =
m2 −mµ+m
µ(m− µ+ 0.5) . (4.20)
It is obvious that A(µ) is increasing in µ and B(µ) is decreasing in µ. According to Lemma .10, there exist
only one feasible root (the other is grater than (m+ 1)/2)
µ∗ =
10m−√52m2 − 48m
8
(4.21)
to the equation A(µ, ρ) = B(µ, ρ). Hence, we have the following lemma:
Lemma .11. For a fixed rounding parameter ρ = 0.5, the optimal objective value of Eq. (4.18) is bounded
by the optimal objective value for fixed µ = µ∗ in (4.21).
4.2 Approximation Ratio of Algorithm
In this section, we analyze the approximation ratio of Algorithm ILP for scheduling malleable tasks under
precedence constraints. The analysis is basedon the approximation ratio functionsA(µ) andB(µ) in Section
4.1.1. Thus, the following bound holds
Lemma .12. In the case 1+ρ2 ≥ µm andm ≥ 2, our algorithm has an approximation ratio r bounded by
r ≤
{
2.9231, if m ≤ 22;
4
3 +
(24m−16)(√52m2−48m+2m+4)
144m2−192m−48 , otherwise.
(4.22)
Proof. Since µˆ∗ is a fractional number. Therefore, we need to consider integer value ⌈µˆ∗⌉ and ⌊µˆ∗⌋. In
Section 4.1.1, we have two objective functions that areA(µ) andB(µ). As we shouldminimize the objective
function, the approximation ratio is bounded by
min {max {A(⌈µˆ∗⌉), B(⌈µˆ∗⌉)} ,max {A(⌊µˆ∗⌋), B(⌊µˆ∗⌋)}}
Since A(µ) is increasing in µ and B(µ) is decreasing in µ for a fixed ρ = 0.5. Thus, the approximation ratio
is r ≤ min {A(⌈µˆ∗⌉), B(⌊µˆ∗⌋)} ≤ A(µˆ∗ + 1). Therefore, substituting µˆ∗ from Eq. (4.21) in A(µˆ∗ + 1) gives
r ≤ A(µˆ∗ + 1). And then, r ≤ min {A(⌈µˆ∗⌉), B(⌊µˆ∗⌋)} ≤ 2.9231 for allm ≤ 22 (see Table 1).
We have the following corollary for the upper bound of approximation ratio:
11
Figure 3: The diagrams of the ratio functions; solid line belong to A(µ∗), dashed line belong to
min {A(⌈µˆ∗⌉), B(⌊µˆ∗⌋)}, and dotted line belong to A(µ∗ + 1).
Table 1: The Approximation Ratios of the Proposed Algorithms
m µ(m) r(m) m µ(m) r(m) m µ(m) r(m) m µ(m) r(m)
2 1 2.6667 10 4 2.7692 18 7 2.8406 26 10 2.8687
3 2 2.8889 11 5 2.9231 19 7 2.8229 27 10 2.8381
4 2 2.6667 12 5 2.8444 20 8 2.8800 28 10 2.8757
5 2 2.8571 13 5 2.7843 21 8 2.8395 29 11 2.8649
6 3 2.8571 14 6 2.9020 22 8 2.8448 30 11 2.8376
7 3 2.7407 15 6 2.8421 23 9 2.8736 31 11 2.8869
8 3 2.9091 16 6 2.7937 24 9 2.8387 32 12 2.8618
9 4 2.8485 17 7 2.8889 25 9 2.8620 33 12 2.8372
References
[1] E. Blayo, L. Debreu, G. Mounie´, and D. Trystram, ``Dynamic load balancing for ocean circulation model with adap-
tive meshing,'' in In Proceedings of the 5th European Conference on parallel computing (Euro-Par 1999), volume
1685 of LNCS. SpringerVerlag, 1999, pp. 303--312.
[2] D. E. Culler, R. M. Karp, D. Patterson, A. Sahay, E. E. Santos, K. E. Schauser, R. Subramonian, and T. von Eicken,
``Logp: a practical model of parallel computation,'' Commun. ACM, vol. 39, no. 11, pp. 78--85, 1996.
[3] J. Du and J. Y.-T. Leung, ``Complexity of scheduling parallel task systems,'' SIAM Journal on DiscreteMathematics,
vol. 2, no. 4, pp. 473--487, 1989.
[4] M. R. Garey and R. L. Graham, ``Bounds for multiprocessor scheduling with resource constraints,'' SIAM Journal
on Computing, vol. 4, no. 2, pp. 187--200, 1975.
[5] J.-J. Hwang, Y.-C. Chow, F. D. Anger, and C.-Y. Lee, ``Scheduling precedence graphs in systemswith interprocessor
communication times,'' SIAM Journal on Computing, vol. 18, no. 2, pp. 244--257, 1989.
[6] K. Jansen, ``Scheduling malleable parallel tasks: An asymptotic fully polynomial-time approximation scheme,''
Algorithmica, vol. 39, no. 1, pp. 59--81, 2004.
[7] K. Jansen and L. Porkolab, ``Linear-time approximation schemes for scheduling malleable parallel tasks,'' Algo-
rithmica, vol. 32, no. 3, pp. 507--520, 2002.
[8] K. Jansen and H. Zhang, ``An approximation algorithm for scheduling malleable tasks under general precedence
constraints,'' ACM Trans. Algorithms, vol. 2, no. 3, pp. 416--434, 2006.
[9] J. K. Lenstra and A. H. G. Rinnooy Kan, ``Complexity of Scheduling under Precedence Constraints,'' OPERATIONS
RESEARCH, vol. 26, no. 1, pp. 22--35, 1978.
[10] R. Lepe´re, G. Mounie´, and D. Trystram, ``An approximation algorithm for scheduling trees of malleable tasks,''
European Journal of Operational Research, vol. 142, no. 2, pp. 242 -- 249, 2002.
[11] R. Lepe´re, D. Trystram, and G. J. Woeginger, ``Approximation algorithms for scheduling malleable tasks under
precedence constraints,'' International Journal of Foundations of Computer Science, vol. 13, no. 4, pp. 613 -- 627,
2002.
13
第二年計劃結果： 
摘要 
在本研究計劃中，我們研究使用動態進位法在可展延任務與優先限制之排程問題。
假設我們有m個相同處理器與n個任務，且每一個任務經由優先限制所連接。每一個任務
的處理時間為一個以分配的處理器數量為索引之函數。其演算法考慮的目標準則為
makespan(最大完成時間)。在本報告中，在最佳的情況下，我們提出一個近似比為200/129 + 200(√26641 + 29)/20253 ≈ 3.4486之多項式時間演算法。此結果改良
Jansen所提出的近似比為100/43 + 100√4349 − 7/2451 ≈ 4.730598之近似演算法
[8]。 
關鍵詞： 近似演算法, 排程, 可展延任務, 優先限制 
abstract 
In this article, we study the problem of scheduling the malleable tasks of a parallel 
application that are subject to precedence constraints. The considered tasks are malleable, 
which means that they can be executed on any arbitrary number of processors, its processing 
time of each task depends on the number of processor allocated to it. The considered 
objective criterion of algorithm is the makespan (maximum completion time). In the project, 
Jansen et al. [8] propose an approximation algorithm that has a ratio 100/43 + 100√4349 − 7/2451 ≈ 4.730598 . We propose an algorithm that uses 
dynamic rounding technique to obtain a ratio at most 200/129 + 200(√26641 +29)/20253 ≈ 3.4486 in best case. We also set a constraint to bind our ratio. 
Keywords: Approximation algorithms, scheduling, malleable tasks, precedence constraints. 
1. Introduction 
An efficient task scheduling on the resources of a parallel and distributed system or a 
multiprocessor system is highly desirable for malleable tasks application. In the high 
performance computing, traditional super-computers have been gradually replaced by 
multi-processor systems. This system have homogeneous environment, that is, all the 
processor has same ability and all the communication has same bandwidth. To manage these 
resources, efficient scheduling and load-balance are central issue. However, classical 
scheduling algorithms are usually not able to guarantees performance, mostly due to the large 
amount of communications in the system. There have been many models for this problem, 
such that Culler et al. [2], Hwang et al. [5], Prasanna and Musicus [15] and Turel et al. [17]. 
Among them scheduling, a computational model called malleable tasks has been proposed by 
Turel et al. [17]. In this model, malleable tasks are computation units which the processing 
time depends on the number of processors allocated to it. The influence of communications, 
For the problem of scheduling independent malleable tasks, Garey and Graham [4] and 
Ludwing and Tiwari [13] proposed approximation algorithms with a ratio 2. This proposed by 
Mounié et al. [14] that gave a polynomial time approximation algorithm with a performance 
guarantee of √3. Jansen and Porkolab [7] proposed a polynomial time approximation scheme 
(PTAS) for the case of fixed m. For arbitrary m, an AFPTAS was addressed by Jansen [6]. 
The results of Lenstra and Rinnooy Kan [10] for makespan minimization of precedence 
constrained sequential tasks imply that is no polynomial time algorithm with approximation 
ratio less than 4 3⁄ , unless => = >. 
Lepère et al. [11] proposed a 4-approximation algorithm in the tree of structured precedence 
task. The idea of the two-phase algorithms was proposed in Lepère et al. [12] that obtain an 
approximation algorithm for general precedence constraints with a ratio 5.236. This was 
improved to 4.730598 by Jansen et al. [8]. An allotment is computed via an approximation 
algorithm for the discrete time-cost tradeoff problem developed in Skutella [16] that used in 
two-phase algorithms. 
2. Approximation Algorithm 
Our algorithm is two-phase approximation algorithm that is based on Jansen et al. [8]. In the 
first phase, they used a linear program and a rounding parameter to solve allotment problem. 
The rounding parameter is not fixed. In fact, that is generated by the number of processor. 
However, the rounding parameter is fixed on all tasks. That is, after the rounding parameter is 
generated, it does not change anymore. Our idea is that the rounding parameter is liked the 
power of determining allotment to reduce the executing time of task. When the rounding 
parameters of task are same, the power is the same. That is unreasonable. Because of the 
performance of task is different, the rounding parameter is also different. Thus, we split the 
rounding parameter into two parts. The first part is fixed that is generated by the number of 
processor. The second part is changed that is generated by the performance of task. We also 
split the set of task into two sub-sets that are high performance task and low performance task. 
Especially, each set has different rounding parameter. 
In the initialization step, we compute the value of the fixed rounding parameter @A . 
According speedup function, we split the set of task into two sub-sets and compute the value 
of dynamic rounding parameter @B. 
In the first phase, we are used a linear program to solve the allotment problem. By four 
coefficients we are able to determine that “which task can obtain what rounding parameter”. 
Therefore, we rounding its fractional solution and obtain a feasible allotment C′. We also 
compute the value of the allotment parameter D depending on rounding parameter @, total 
number of processors ' and task coefficient. 
are 
N = !|'! ≤ 'JK, ! ∈ , (3) 
and 
O = !|'! > 'JK, ! ∈ . (4) 
Finally, we denote by @B the dynamic rounding parameter that is 
@B = @A × ^, (5) 
where ^ is the standard deviation of '!. 
2.2 The First Phase of the Algorithm 
In first phase of our algorithm, we use linear program formulation and the rounding technique. 
Especially, we focus on the rounding parameter to obtain better approximation ratio. 
According to Jansen et al. [8] that proposes the approximation algorithm, we borrow the ideas 
of linear program formulation. For any malleable task #%, we obtain that the processing time 
(%& and work 1%& = 2%(& = &(%& on l processors are satisfied Assumption 1 and 
2. We denote by _% the processing time of task #% in a solution to the allotment problem. We 
construct m virtual tasks #%` , … , #%b  by each task #% . After rounding technique, the 
processing time _%c of virtual task #%c ,  = 1, … , ' − 1, has two possible value: 0 and (% . 
Then the corresponding virtual works we%c_%c are 1% + 1 − 1%  and 0, respectively. 
However, the processing time _%b  of virtual task #%b  can only choose one processing time 
(%' and its virtual work 2e%b_%b is 0. Finally, we denote by L the critical path length 
and by W the total work of an allotment. The goal is to minimize ) = 'K_f, 1 '⁄  in  
allotment problem. Based on the ideas of Jansen et al. [8], we need to solve the following 
linear program: 
kO =
∑ 9` <9l9∈v
∑ 9` <9l9∈v x∑ 9` <9l9∈v
, 
(9) 
klN = ∑ ,9
9∈mnopomqr sqpt∩v
∑ ,99∈mnopomqr sqpt∩v x∑ ,99∈mnopomqr sqpt∩v
  
(10) 
and 
kN =
∑ 9<9l9∈vy
∑ 9<9l9∈v x∑ 9<9l9∈v
, 
(11) 
where _% be the rounded solution and 2% be the work of rounded solution in the case 
 = 1, 2. 
 
Using the algorithm DRA, we are able to give an allotment C′ where each job #% is allotted 
a number &%H  processors. The processing time (%&%H  equals to the rounded solution 
'K_l$* _%c ∈ P(%', … , (%1Q. 
3. Analysis of the Approximation Algorithm 
In analysis of the approximation algorithm we make use of the min-max non-linear program. 
We show that the approximation ratio depends on task coefficient. And then, the 
Algorithm DRA (klO, kO,  klN,  kN) 
If klO ≥ kO and klN ≥ kN then 
  If klO1 − @A − kO@A > klN1 − @A − kN@A then 
 @O = @A + @B and @N = @A − @B 
    else 
 @N = @A + @B and @O = @A − @B 
else if klO ≥ kO then 
 @O = @A + @B and @N = @A − @B 
else if klN ≥ kN then 
 @N = @A + @B and @O = @A − @B 
else 
 @O = @N = @A 
end 
 
processing time is not increasing while the work may increase. By the (7), the virtual work of _%c  is 2e%c_%c = 71%( + 1) − 1%( );  and the virtual work of optimal solution _%c∗  is 2e%c_%c∗  = 71%( + 1) − 1%( ); 7(%( ) − _%c∗ ; (%( )h ≥ 71%( + 1) − 1%( );(1 − @) . Again, 
by Lemma 3.1, there exist some & ∈ 1, … , ' and _%c = 0 for all  < & and _%c = (%( ) 
for all  ≥ &. We can obtain 2g%_%∗ = ∑ 2e%c_%c∗ *$l ≥ 7&%(%&% − (%(1);(1 − @). Assume 
the rounding parameter of O is @A + @B, otherwise is @A − @B. Therefore, 
1∗ −  = ∑ 2g%%∈ _%∗ + ∑ 2g%%∈ _%∗  (13) 
≥ 1 − @A − @B ∑ 7&%(%&% − (%(1);%∈ + 1 − @A + @B ∑ 7&%(%&% − (%(1);%∈   = 1 − @A + (1 − 2k)@B(1H − )  
where k is the total increasing works of O divided by the total increasing works in the 
rounding solution. The lemma follows. □ 
Lemma 3.4. For any malleable task #%, if (%(& + 1) ≤ _%∗ ≤ (%(&) for some & ∈ 1, … , ' −1, then & + 1 ≤ &∗ ≤ &. 
Proof. This lamma is shown in Jansen et al. [8]. □ 
Lemma 3.4 shows that &%∗ is well defined. As Lepère et al. [12], in final schedule, the time 
interval [0, )*+,] is partitioned into three types of time slots: During the first type of time 
slot, at most D − 1 processors are busy. During the second type, at least and D at most ' − D processors are busy, and during the third type at least ' − D + 1 processors are busy. 
Denote the sets of the three types time slots by  l,   and  ¡, and | $| the overall lengths 
for  ∈ 1,2,3. In the boundary case that D = ' + 1 2⁄ ,   = ∅. In other cases, these 
three types of time slots may exist. Then, we have the following bound on | l| and | |: 
Lemma 3.5. kl7@A + @B| l| + ' P@A + @B, D/'Q| |; 
            +1 − kl7@A − @B| l| + ' P@A − @B, D/'Q| |; ≤ )*+,∗ .  
Proof. The idea is to construct a ‘heavy’ directed path > in the final schedule, similar to 
Lepère et al. [12], Jansen et al. [8], Jansen et al. [9] and Zhang [18]. The last task in the path 
> is any multiprocessor task #l that completes at time )*+, in the final schedule. After we 
have defined the last  ≥ 1 tasks #$ → #$<l → ⋯ → # → #l on the path >, we find the next 
task #$xl as follows: Consider the latest time slot t in  l ∪   that is before the starting time 
of task #$ in the final schedule. Consider the set ′ of tasks that consists of task #$ and of 
all its predecessor tasks that start after time t in the schedule. Since during time slot t at most 
' − D processors are busy, and since final schedule allots at most D processors to any task 
in ′, all the tasks in ′ cannot be ready for execution during the time slot t. Hence, for 
Proof. Let us consider a schedule with the processing time of each task is (%1. That is, the 
makespan is exactly the amount of  which is equal to or larger than any feasible schedule. 
The inequality is proven. □ 
Moreover, we show the following upper bound on : 
Lemma 3.7.1 ≤ 1∗/1 − @A + 1 − 2k@B − @A − 1 − 2k@B/1 − @A +
1 − 2k@B. 
Proof. The allotment C is ' CH, D, that is, the number of processors allotted in C is not 
more than the number of processors allotted in CH. By the Assumption 2, its work does not 
increase. Therefore 1 ≤ 1′. By the Lemma 3.3, we have that 
1 ≤ 1H ≤ 1∗/1 − @A + (1 − 2k)@B− @A − (1 − 2k)@B/1 − @A + (1 − 2k)@B (15) 
□ 
Lemma 3.8. If (kll) ≥ kl , (kl) ≥ k  and kll1 − @A − kl@A > kl1 − @A − k@A 
then §l ≤ §. 
Proof. According to Lemma 3.2, we obtain that when the λl increase the first phase solution 
is closed to optimal solution. Similarly, according to Lemma 3.3, we know that when the λ 
decrease the first phase solution is closed to optimal solution. So we have conclude that the 
approximation ratio is decreasing in λl and is increasing in λ. We have upper bound of 
approximation ratio in λl = λ = 1 2⁄ . Since our algorithm is bi-criteria version problem, by 
Lemma 3.2 and Lemma 3.7, we can omit the second part of (15), then we have  
l<©ªl<©ª(l<(l<«)¬) = ©ª©ª(lx(«`<l)¬)  (16) 
We obtain the relation of kl and k that is kl1 − @A = 1 2⁄ − k@A. Consequently, when kll1 − @A − kl@A > kl1 − @A − k@A , the first solution is more closed to optimal 
solution, §l ≤ §. Thus the lemma is complete. □ 
We define by _$ = | $| )­®∗⁄  the normalized overall length of the ith type of time slots for 
 = 1,2,3. We also define _ =  )­®∗⁄ . Therefore, we are able to obtain a min-max 
nonlinear program as follows: 
Lemma 3.9. The optimal approximation ratio of our algorithm is bounded by the following 
min-max non-linear program. 
Proof. We are eliminated the additional variable _ in the first step. Substituting the first 
constraint _l + _ + _¡ ≤ _ in (17) to the third constraint with simplification, we have 
_l + 7(D − 1)1 − @A + (1 − 2k)@B + 1;_ + 7(' − D)1 − @A +(1 − 2k)@B) + 1;_¡ ≤ '  (19) 
As (17) is linear in _$, we want to maximize _¡ with a fixed pair of _l and _, we can set 
that 
_¡ = *<,`<7(°<l)l<©ªx(l<«)©µxl;,(*<°)l<©ªx(l<«)©µxl ≥ 0  (20) 
to find the optimum. Then the objective function is replaced by 
_l + _ + _¡ = *x(*<°)l<©ªx(l<«)©µ,`x(*<°xl)l<©ªx(l<«)©µ,(*<°)l<©ªx(l<«)©µxl   (21) 
and constraint (19) can be removed. However, to guarantee _¡ ≥ 0, an additive constraint is 
needed _l + 7(D − 1)1 − @A + (1 − 2k)@B + 1;_ ≤ ' . The dynamic rounding 
parameter @B  can be replaced by @A × ^ . Therefore, we can obtain the new min-max 
nonlinear program (18). □ 
3.1. Analysis of the Min-Max Non-linear program 
We need to consider three cases that are @A(1 − ^) ≤ @A(1 + ^) ≤ D/' , @A(1 − ^) ≤D/' ≤ @A(1 + ^) and D/' ≤ @A(1 − ^) ≤ @A(1 + ^) by the first constraint of (18). In the 
following, we will solve it by case study. 
3.1.1. Solve (18) for the Case ¸¹(º − ») ≤ ¸¹(º + ») ≤ ¼/½. 
In this case, we need to solve the following min-max nonlinear program: 
' 7D − @A(D − 1)(1 − (1 − 2k)^);⁄ . Thus, the polytope defined by El , E  and E¡  is 
inside the polytope defined by El, E¿ and E¾. So the constraint C can be removed. It is 
obvious that the maximum value is not in extreme point El. Substituting E and E¡ to 
objective function, we have 
ÃD, @A = *©ª(lx(«`<l)¬)x(*<°)±l<©ª(l<(l<«)¬)²(*<°)±l<©ª(l<(l<«)¬)²©ª(lx(«`<l)¬)x©ª(lx(«`<l)¬)  (23) 
and 
ÄD, @A = *©ª(lx(«`<l)¬)x(*<°xl)±l<©ª(l<(l<«)¬)²(*<°)±l<©ª(l<(l<«)¬)²©ª(lx(«`<l)¬)x©ª(lx(«`<l)¬)  (24) 
As D ≥ 1 , ' − D ≥ ' − 2D + 1 . Then we have ÃD, @A ≥ ÄD, @A. The problem is 
reduced to minimize ÃD, @A. Since kl = k = 1 2⁄ , the first order partial differentiation of ÃD, @A with respect to D is 
Ã′D, @A° = l<©ª*©ª<l©ª7(*<°)l<©ªxl;, (25) 
The only root to equation Ã′D, @A° = 0 is @A = 1 '⁄ . Since D ≥ 1, @A ≤ D '⁄ < 1 is 
infeasible in Case 1. Therefore, it is required that @A > 1 '⁄ . As ÃD, @A is increasing in D 
and we are going to minimize ÃD, @A, we can set D∗ = 1. And then, we can obtain @A∗ = 1 '⁄ . According to Lemma 3.8, ÃD, @A is decreasing in kl and is increasing in k. 
Thus, we can set kl = 1  and k = 0  to minimize ÃD, @A . Then the optimal 
approximation ratio is 
§ = Ã(1, 1 '⁄ ) = *(lx¬)x*(*<l)(l<(l<¬) *⁄ )(*<l)(l<(l<¬) *⁄ )(lx¬)x(lx¬) ≈ 1 + *<l(lx¬)  (26) 
It shows that the approximation ratio § is decreasing in ^. In this paper, we can set ^ = 0.5. 
Then § is bound on (2' + 1) 3⁄ . 
We turn to study Case 3, since @A ≤ 1 '(1 + (2kl − 1)^)⁄ ≤ D ['(1 + (2kl − 1)^) + (D − 1)(1 − (1 − 2k)^)]⁄   that 
have 1 @A(1 + (2kl − 1)^)⁄ ≥ ' 7D − @A(D − 1)(1 − (1 − 2k)^);⁄  and 1 @A(1 + (2kl − 1)^)⁄ ≥ '. Thus, the polytope defined by El, E¿ and E¾ is inside the 
polytope defined by El, E and E¡. So the constraint Cl can be removed. It is obvious that 
_Ì = *±©ª(lx(«`<l)¬)²<l©ª(lx(«`<l)¬)±l<©ª(l<(l<«)¬)²(°<l)  (32) 
It means the polytope defined by the constraints has four extreme points El, E, E¾ and M. 
Similarly, it is obvious that the maximum value is not in extreme point El. Substituting E, E¾ and M to objective function, we have 
ÃD, @A = *©ª(lx(«`<l)¬)x(*<°)±l<©ª(l<(l<«)¬)²(*<°)±l<©ª(l<(l<«)¬)²©ª(lx(«`<l)¬)x©ª(lx(«`<l)¬)  (33) 
ÄD, @A = *x
b(bÅÆÇ`)`ÅÈª(`Å(`ÅÉ)Ê)ÆÅÈª(ÆÅ`)(`Å(`ÅÉ)Ê)(*<°)±l<©ª(l<(l<«)¬)²xl   
(34) 
)D, @A = *x(*<°)±l<©ª(l<(l<«)¬)²,`Îx(*<°xl)±l<©ª(l<(l<«)¬)²,Î(*<°)±l<©ª(l<(l<«)¬)²xl   
= l©ª(lx(«`<l)¬)  
(35) 
Since ÃD, @A ≥ )D, @A, we can remove function )D, @A. As showed in the analysis of 
Case 1&3, the result is ÃD, @A ≥ (' + ^) (1 + ^)⁄  and ÄD, @A ≤ ' . It means the 
approximation is (' + ^) (1 + ^) ≤ § ≤ '⁄ . 
Lemma 3.11. For a fixed rounding parameter @A ≤ D/(1 + ^)', our algorithm has an 
approximation ratio (' + ^) (1 + ^) ≤ § ≤ '⁄ . 
3.1.2. Solve (18) for the Case ¸¹(º − ») ≤ ¼/½ ≤ ¸¹(º + »). 
In this case, we need to solve the following min-max nonlinear program: 
and E¾: (_l, _) = 0, ' 7D − @A(D − 1)(1 − (1 − 2k)^);⁄ . 
Since 1/' ≤ D/' ≤ @A(1 − ^) ≤ @A(1 + (2kl − 1)^) , that yields 1 @A(1 + (2kl − 1)^)⁄ < '. We then have @A(1 − (1 − 2k)^) ≤ D@A(1 − (1 − 2k)^), 
that yields D ±1 − @A(1 − (1 − 2k)^)² + @A(1 − (1 − 2k)^) ≤ D . So 
'/D ≤ ' 7D − @A(D − 1)(1 − (1 − 2k)^);⁄ . Thus, the polytope defined by El, E and E¡ is inside the polytope defined by El, E¿ and E¾. So the constraint C can be removed. 
It is obvious that the maximum value is not in extreme point El. Substituting E and E¡ to 
objective function, we have 
ÃD, @A = l©ª(lx(«`<l)¬) Ï1 + *©ª(lx(«`<l)¬)<l(*<°)±l<©ª(l<(l<«)¬)²xlÐ  (38) 
and 
ÄD, @A = *°x*(*<°xl)±l<©ª(l<(l<«)¬)²°(*<°)±l<©ª(l<(l<«)¬)²x°   (39) 
It is obvious that ÃD, @A is increasing in D and ÄD, @A is decreasing in D. Then we 
have equation 
D − D' ±1 + 2@A(1 + (2kl − 1)^)² + (' + ')@A(1 + (2kl − 1)^) = 0  (40) 
that is ÃD, @A =  ÄD, @A. We can show the two roots to this equation 
D = *±lx©ª(lx(«`<l)¬)²∓Ò*lx¿©ª(lx(«`<l)¬)<¿*©ª(lx(«`<l)¬)   (41) 
Since D ≤ (' + 1) 2⁄ , we obtain the only one root 
D∗ = *±lx©ª(lx(«`<l)¬)²<Ò*lx¿©ª(lx(«`<l)¬)<¿*©ª(lx(«`<l)¬)   (42) 
Lemma 3.12. In the case of @A ∈ (D/(1 − ^)', 1), the optimal objective value of (37) is 
bounded by the optimal objective value for fixed D = D∗ in (42) 
3.2. Approximation Ratio of Our Algorithm. 
' ≥ ÖÖlÚ + ÖÖlÚ (lÚ*<ÖÖ)ÛÜ.¾√ÕÕ¿l*<¾ÜÖÖ*xÛÕ.¾*<¿¡ÖÖl¾ÜÚÜÕl*<l¡Ú¿ÖÜl*<lÜ¿ÚÖÖ   (47) 
This inequality can be simplification that is 
(lÚ*<ÖÖ)ÛÚ¿Ú*<Ú¿Õ*x¡¡ÛÕ<ÛÜ.¾√ÕÕ¿l*<¾ÜÖÖ*x¿¡ÖÖl¾ÜÚÜÕl*<l¡Ú¿ÖÜl*<lÜ¿ÚÖÖ ≥ 0  (48) 
Solving equation of the numerator, we obtain the following five roots: 'l = 1.5504, ' = 2.1655, '¡ = 0.9939, '¿ = −0.1171 and '¾ = −0.7160. Solving equation of the 
denominator, the roots are exactly '¡  and '¿  above. Thus, both numerator and 
denominator are positive in the interval (', ∞). If ' ≥ 3, then the inequality holds and we 
compute @ÓA∗  and D̂∗ to obtain the approximation ratio bounded in Lemma 3.13. If ' = 2, 
then we set @A∗ = 1 ' = 1 2⁄⁄  and D∗ = 1 to obtain an approximation ratio 2. The theorem 
follows. □ 
Corollary 3.15 For all ' ∈ ℕ and ' ≥ 2, the approximation ratio 
§ ≤ ÖÖlÚ + ÖÖ√ÕÕ¿lxÚÖ¾¡ ≈ 3.4486  (49) 
Moreover, the upper bound is tended to 3.4486 in Theorem 3.14 
Proof. When ' = 2, the approximation ratio § = 2 is satisfied the inequality. We now 
consider the case that ' ≥ 3. We need to prove that 
ÖÖlÚ + ÖÖlÚ (lÚ*<ÖÖ)ÛÜ.¾√ÕÕ¿l*<¾ÜÖÖ*xÛÕ.¾*<¿¡ÖÖl¾ÜÚÜÕl*<l¡Ú¿ÖÜl*<lÜ¿ÚÖÖ ≤ ÖÖlÚ + ÖÖ√ÕÕ¿lxÚÖ¾¡   (50) 
which is equivalent to 
(lÚ*<ÖÖ)ÛÜ.¾√ÕÕ¿l*<¾ÜÖÖ*xÛÕ.¾*<¿¡ÖÖl¾ÜÚÜÕl*<l¡Ú¿ÖÜl*<lÜ¿ÚÖÖ ≤ √ÕÕ¿lxÚl¾Û   (51) 
We then obtain the denominator is 157(1589861' − 1394081' − 184900). Solving 
equation of the denominator, the roots are exactly '¡ and '¿ as the Theorem 3.14. The 
numerator is √26641 + 29(1589861' − 1394081' − 184900) − 157(129' −200)78.5√26641' − 25800' + 2276.5' − 4300. So we can obtain inequality that 
the set O is decreased or unchanged. Thus, we can obtain the relations as following 
klN = çl(1 − klO)  (56) 
kN = ç(1 − kO)  (57) 
where 0 ≤ çl ≤ 1 and 1 ≤ ç ≤ 1 (1 − kO)⁄ . 
 
FIG. 1. The approximation ration of three cases without constraint 
In this section, we will discussion of the results that are different constraints in our algorithm. 
Besides, we assume the parameters ' = 1000, @A = 0.43 and ^ = 0.5. In FIG. 1, we 
illustrate the approximation ratio of three cases without constraint where λl = 1/2 , λ ∈ (0,1), çl = 0.8 and ç = 1.2. We observe that the real line is increasing, the stared 
line is decreasing and the dotted line is stable. And then, the approximation ratio of our 
algorithm is bounded on the shadow. 
In the next, we will discussion of the results that are different constraints in our algorithm. 
For convenience to discuss the results, we assume that the parameters are çl = ç = 1. In 
FIG. 2, we illustrate the approximation ratio for kl, k ∈ (0,1) without constraint. This 
result is satisfied Lemma 3.8, that is, the approximation ratio is decreasing in λl and is 
increasing in λ. The approximation ratio is smaller than case of @O = @N = @A in large λl 
and small λ. However, that has large approximation ratio in opposite case. 
 FIG. 4. The approximation ration with kl ≥ 1 2⁄ ≥ k 
Therefore, we set a constraint from Theorem 3.16. We illustrate the approximation ratio for kl, k ∈ (0,1) with (kl) ≥ k in FIG. 5. We observe the result that has smoothing in the 
boundary and have low approximation ratio bound on 3.4 in best case. As this result means 
our algorithm have a better approximation ratio in constraint and is not greater than 4.7 in 
worse case. 
 
FIG. 5. The approximation ration with (kl) ≥ k 
5. Conclusion 
We have proposed an algorithm which employs the linear program and the dynamic rounding 
[11] LEPÉRE, R., MOUNIÉ, G., AND TRYSTRAM, D. 2002a. An approximation algorithm 
for scheduling trees of malleable tasks. Europ. J. Oper. Res. 142, 2, 242-249. 
[12] LEPÉRE, R., TRYSTRAM, D., AND WOEGINGER, G. J. 2002b. Approximation 
algorithms for scheduling malleable tasks under precedence constraints. Inter. J. Found. 
Comput. Sci. 13, 4, 623-627. 
[13] LUDWING, W., AND TIWARI, P. 1994. Scheduling malleable and nonmalleable 
parallel tasks. In proceedings of the 5th ACM-SIAM Symposium on Discrete 
Algorithms (SODA 1994). ACM, NEW YORK, 167-176. 
[14] MOUNIÉ, G., RAPINE, C., AND TRYSTRAM, D. 1999. Efficient approximation 
algorithms for scheduling malleable tasks. In Proceedings of the 11th Annual ACM 
Symposium on Parallel Algorithms and Architectures (SPAA 1999). ACM, New York, 
23-32. 
[15] PRASANNA, G. N. S., and MUSICUS, B. R. 1991. Generalised multiprocessor 
scheduling using optimal control. In Proceedings of the 3rd Annual ACM Symposium 
on Parallel Algorithms and Architectures (SPAA 191). ACM, New York, 216-228. 
[16] SKUTELLA, M. 1998. Approximation algorithms for the discrete time-cost tradeoff 
problem. Math. Oper. Res. 23, 909-929. 
[17] TUREL, J. WOLF, J. and YU, P. 1992. Approximate algorithms for scheduling 
parallelizable tasks. In Proceedings of the 4th Annual Symposium on Parallel 
Algorithms and Architectures (SPAA 1992). ACM, New, York, 323-332. 
[18] ZHANG, H. 2004. Approximation algorithms for min-max resource sharing and 
malleable tasks scheduling, Ph.D. dissertation University of Kiel, Kiel Germany, 2004. 
 
二、參與會議 
   此次參加2010分散式多媒體系統(DMS2010)相關會議及論文發表，會議期間
活動分述如下： 
 
10月13日：註冊 
1. 下午前往會場註冊，並與國內外學者專家討論研究相關問題。 
 
10月14日：參加DMS會議(一) 
1. 參與多場口頭論文發表並與國內外學者專家討論研究相關問題。 
 
10月15日：參加DMS2010會議(二) 
1. 發表論文“RFID Applications in Hospitals –A Case Study for Emergency 
Department” 
 
10月16日：參加DMS2010會議(三) 
1. 參與多場口頭論文發表並與國內外學者專家討論研究相關問題。 
 
10月17日： 搭機返國 
 
三、攜回資料 
1. DMS2010 之 CD 論文集。 
 
四、心得 
1. 此次會議議題相當廣泛，大家參與會議時討論亦非常熱烈，大會安排多場 
海報式發表，使得大家可以針對自己興趣之主題充分與發表者深入討論， 
因此收獲相當多。 
2. 此次會議台灣參加之人員約十幾位，可說相當熱烈，也由於有多人參會， 
大家亦可交換心得及了解目前在各個領域之研究情形。 
3. 經由這次會議的參與，不但得以認識一些相關領域之學者，互相交換研究 
心得，而且可吸收最新資訊，對日後計劃之執行將有所助益。 
and providing even better medical care environment 
in the emergency room through the use of 
information technology are now the common goals in 
the health care industry. The scope of this Study 
focuses on improving medical treatment safety 
through RFID applications in medical treatment 
process for the patients in the emergency room, 
including alert of excessively prolonged queue, 
patient location tracking, and alert of excessively 
prolonged stay. 
 
II. LITERATURE REVIEW 
A RFID system, in the simplest form, consists 
of three components: a Tag or Transponder, a Reader 
and an antenna. A passive tag (or powerless tag) has 
no battery built in and requires external energy to 
trigger and initiate signal transmission. An active tag, 
another common tag, has built-in battery to provide 
power to actively transmit signal. Both types of tag 
have a chip inside to carry and process information. 
Upon entering an electromagnetic zone a passive tag 
is triggered by the interrogating signal sent by the 
reader, from which it obtains power through induced 
current, and begins transmitting the product 
information stored on its chip. An active tag, on the 
other hand, as its name suggests, actively and 
constantly transmits the information on its own. As 
the reader receives the information, it relays the 
information to a central information processing center 
for further application. Other hardware and software 
are required to support RFID application [6, 7]. A tag 
may come in different shapes and sizes: business card, 
coin, button, price tag, wristband, and grain; the list 
can go on and on. In general, a tag may be passive, 
semi-passive, or active [8]. A passive tag has no 
battery built in to supply power and requires external 
induced current to power and trigger signal 
transmission. This is why its working range is limited 
to one meter or shorter. Both semi-passive and active 
tags have built-in battery, and that is the reason why 
their working distance ranges from several meters to 
tens of meters, only that a semi-active tag still needs 
external induced current from the reader to activate 
the built-in battery to supply power for signal 
transmission. An active tag will constantly transmit 
signal; if it detects the presence of a reader, it begins 
to transmit information. Because a passive tag is 
powered externally by a reader, its service length is 
virtually unlimited (until it is damaged). The service 
length of an active tag may last up to 8 years 
theoretically or merely one month in practice as it is 
limited to the battery life and power consumption.  
 
The Ministry of Economic Affairs (MOEA) has 
taken initiatives to seek for preventive 
countermeasures since the SARS epidemic, and 
RFID application in medical care is one of them. 
Currently the pilot projects have been rolled out at 
the Taipei Medical University Hospital, Show Chwan 
Hospital, Sun Yat-sen Cancer Center, and Kaohsiung 
Veterans General Hospital. With financial support 
from the MOEA, the Industrial Technology Research 
Institute is also cooperating with Hsinchu Dong Yuan 
Hospital for RFID trial project. Each of these medical 
institutes concentrates on different subjects of RFID 
applications: SARS control, area control, restricted 
area control, bio-medical waste control and monitor, 
and patient contact tracking.  
Some hospitals in the United States are keen to 
adopt new technology for medical care application 
[9]. For examples, RFID time sheet for ER personnel 
[10] and medical record tracking by RFID [11]. 
These pilot projects have achieved quite satisfying 
results and these hospitals use 2.45GHz active tags, 
for which readers have a scope of signal interrogation 
as long as 30 meters, far more accurate than passive 
tags that allow less than one meter of scope.  
Several human right groups in the United States 
oppose RFID applications on patients for the reason 
of privacy violation by unauthorized RFID tracking 
[12]. Some manufacturers in return respond with 
erasable tags [13].   
RFID applications in Taiwan are still very 
limited. The policies of the Bureau of National 
Health Insurance have caused great reduction in 
hospital profitability and, consequently, displaced the 
available budget for the induction and application of 
new technology. Another factor is that it is inherently 
difficult to change the status quo of the operational 
workflow already in place and accustomed to hospital 
employee. The most critical issue, eventually, is the 
price of RFID system is not yet attainably acceptable 
to the majority of consumers. There are, practically, 
difficulties in applying RFID for any medical 
institute. The pilot projects of RFID, subsidized by 
the MOEA, are currently implemented at the Taipei 
Medical University Hospital, Show Chwan Hospital, 
Sun Yat-sen Cancer Center, Kaohsiung Veterans 
General Hospital, and Hsinchu Dong Yuan Hospital. 
Nonetheless, these projects are all not comprehensive 
and have still a long way to go before the full scale 
implementation [14,15,16,17].  
Shiumn-Jen Liaw et al. (2002) had studied the 
factors of patient premature departure from 
emergency room with incomplete diagnosis 
procedure and categorized such patients into four 
types: (1) departure without diagnosis, (2) departure 
due to denied insurance of emergency coverage, (3) 
departure without excuse, and (4) voluntary departure. 
The departure without excuse is further 
sub-categorized as incompletely diagnosed and 
completely diagnosed. Liao concludes that these 
patients departed mostly because the excessively long 
waiting time for diagnosis, time poverty, or 
unpleasant encounter with hospital personnel. Liao 
suggests 42% of the patients expect the waiting time 
not to exceed 15 minutes, and 49% do not accept 
more than one hour of waiting time. Failure of either 
one shall result in dissatisfaction with the medical 
 
    Five areas of the process of emergency 
department are highlighted in Figure 1 as possible 
procedural problems. The first one is patients’ 
excessively long waiting time for diagnosis by 
physician after triage and registration. In some cases 
large amount of patients are rushed to the emergency 
room, and the patients with critical conditions are 
prioritized by the physicians, causing longer waiting 
time for other patients. In some other cases the 
physician on duty at the emergency department is not 
specialized for the patient’s condition and must wait 
for the qualified specialist, such as an eye-related 
problem shall wait for an ophthalmologist, and an ear, 
throat, or nose (collectively referred as ENT) issue 
should be determined by an otolaryngologist. If a 
specialist is not available or not present, the patient 
will have to wait for even long time. Therefore, the 
first problem is excessively long waiting time for the 
patients. The second factor is patient after being 
determined as hospitalization is not necessary by 
physician receives no attention during provisional 
observation due to medical personnel is preoccupied 
by other tasks, causing the patients to endure 
excessively long waiting time. Therefore the second 
problem is excessively long stay in the provisional 
observation area for the patients, resulting in patients’ 
departure without excuse compelled by their 
dissatisfaction toward the hospital personnel. This 
leads to the third problem: departure without excuse. 
A patient may depart from the hospital for certain 
reasons before the process of cashier after being 
acknowledged that leave is authorized. For examples, 
lack of money to pay the hospital or no medication is 
prescribed. This is the fourth problem: departure 
without payment. The fifth issue is no occupancy of 
sickbed after a patient is instructed after diagnosis to 
proceed with hospitalization process, causing the 
patient to wait in the emergency room for sickbed. 
The availability of sickbed in some popular hospital 
often runs out, and the waiting time for a sickbed 
may last for as long as two or three days, causing 
patients’ dissatisfaction. Therefore, the fifth problem 
is no occupancy that drives patients back to 
emergency department to wait.    
Because an emergency process is prone to 
negligence, the application of RFID in emergency 
department, as shown in Figure 2, by immediate 
printing and mounting a RFID wristband on the wrist 
of a patient at triage by the medical personnel before 
the patient is redirected to the waiting area. If a 
physician fails to diagnose the patient in due time 
stipulated by the hospital, a short message is 
immediately sent to the management center where 
high management may initiate an emergency protocol. 
For example, dispatching extra physician may avoid 
excessively long waiting time for the patient. This 
measure solves the first problem mentioned in above. 
A patient in the provisional observation area may be 
waiting for examination report or intravenous drip. 
However, if such patient is made to wait for 
excessively long time without further attention form 
the medical personnel, the RFID will not be read for 
a predetermined amount of time. The information of 
the patient will be automatically sent to the 
management center where the management of the 
hospital may respond accordingly, such as instructing 
the medical personnel to give further attention 
provide more medical service, or request the 
examination reports to be completed within a certain 
amount of time. This measure may solve the second 
problem mentioned in above. In the case that a 
patient is not yet authorized to leave, or that a patient 
is notified that leave is authorized before the cashier 
process, and the patient departs without excuse, the 
RFID reader at the exit of the hospital will 
automatically send an instant message to remind the 
medical personnel that the patient has departed. The 
intention of this message is helping the medical 
personnel to realize the absence of the patient, not 
necessarily policing on the patient’s departure 
without excuse. There are times the patient is simply 
going out for lunch or having a cigarette outside. This 
measure takes care of the third and the fourth 
problems. Before a patient in need of a sickbed is 
assigned with one, the RFID will not receive the 
information of the completion of hospitalization 
process of the patient at admission counter. If the 
RFID after a predetermined period of time receives 
no such information, then it means the patient is 
suffering from excessively long waiting time and the 
RFID system will automatically send a short message 
to alert the management center where decision can be 
made to direct the medical personnel to assist the 
patient to proceed with transfer, and patient 
dissatisfaction of waiting time may be avoided. This 
measure eliminates the fifth problem.  
 
IV. RESULT 
 As consumerism continues to rise in recent 
years, more scholars are studying the quality of the 
medical care provided by medical service providers 
form the aspect of consumer. The term of medical 
quality in the eyes of the patients has escalated from 
the simple treatment result to customer satisfaction of 
the entire medical service experience. This 
phenomenon has confirmed that the medical service 
concept based on patient’s right shall be the direction 
of medical quality development in the future. RFID 
can be adopted by a hospital for a variety of 
applications. The Emergency Department of the 
Kaohsiung Veterans General Hospital has adopted 
RFID for reconfirmation of medication distribution 
and injection. Dong Yuan Hospital has adopted RFID 
to manage SARS patient contact history. The 
Operation Room of Chang Gung Memorial Hospital 
has adopted RFID for reconfirmation of the surgical 
target.  
 
to other applications in the hospital and encourage the 
acceptance of RFID among the personnel concerned. 
The Information Management department is not only 
a logistic unit of a hospital; it should make the best 
use of information technology and apply in every 
process of a hospital to increase operational 
efficiency and competitiveness, assuring the 
sustainability of the hospital. 
ACKNOWLEDGMENT 
 The author would like to express appreciation 
to Dr. Zong-long Yang, Radiology Department of the 
Kaohsiung Veterans General Hospital, for accepting 
the study team’s interview and offering 
recommendations for this Study.  
 
REFERENCES 
[1] Donna, Y., (2004), “FDA embraces RFID to 
protect drug supply”, Am J Health-System 
Pharmacy, Vol. 61, No. 24, pp.2612-2615. 
[2] Rui-Yu Rao, (2002), “Use PDCA management 
style to improve emergency patients’ 
healthcare”, Annual Conference of Emergency 
Medicine, pp.133. 
[3] Shiumn-Jen Liaw, Pai-min Hu, and  How-chin 
Liao, (2002), “Patients Who Leave Emergency 
Departments Prematurely”, Journal of Taiwan 
Emergency Medicine, Vol. 4, No. 2, pp.40-49. 
[4] Li-Hsiang Wang, (2001), “The difference of 
Patient Needs Among Patient, Caregiver and 
Nurse in The Observation Room of Emergency 
Department”, Master Thesis, Chang Gung 
University, Taiwan.  
[5] Su-chou Siao, (2002), “Case of emergency 
observation to improve patient retention”, 
Annual Conference of Emergency Medicine, 
pp.136. 
[6] Wei Zhang, (2003), “RFID Application 
Discovery”, Journal of the Mechatronic 
Industry，Vol. 249, pp.88-94. 
[7] Yu-Hong Chen, (2004), “RFID System 
Introduction”, Unalis, Taipei Taiwan. 
[8] Xiang-Qi Zhou, (2004), “RFID Technology and 
Application”, Flag, Taipei Taiwan. 
[9] Glenn, M.H., Robert, D.R., and Mark, E.M., 
(2004), “Report to the Congress: New 
Approaches in Medicare,” New Jersey, 
pp.157-181. 
[10] Intermec, (2005), Saving Time and Improving 
Patient Care, http://www.imtermec.com/. 
[11] Jonathan, C., (2005), Tracking Medical 
Emergencies, RFID Journal, 
http://www.rfidjournal.com/. 
[12] David, M., and David, W., (2004), “Privacy: 
Privacy and security in library RFID: issues, 
practices, and architectures”, Proceedings of 
the 11th ACM conference on Computer and 
communications security. 
[13] Ari, J., Ronald, L.R., and Michael, S., (2003), 
“The Blocker Tag: Selective Blocking of RFID 
Tags for Consumer Privacy”, Proceedings of 
the 10th ACM conference on Computer and 
communications security, pp.103-111. 
[14] Zhi-Qiang Wei, (2004), “Survey Research of 
RFID application to discuss the RFID 
promotion in our country.” Ministry of 
Economic Affairs E-navigation, Vol.6, No. 20, 
pp.1-11. 
[15] Rong-Xing Xiao, Wei-Ru Wang and Wei-Ren 
Su, (2004), “RFID Application Case Study”, 
Ministry of Economic Affairs E-navigation, 
Vol.6, No. 15, pp.1-16. 
[16] Rong-Xing Xiao, Wei-Ren Su, and Yu-Jai Xu, 
(2004),“The nerve center of RFID 
technological operation- RFID Middleware”,  
Ministry of Economic Affairs E-navigation, 
Vol.6, No. 14, pp.1-13.  
[17] Rong-Xing Xiao, and Yu-Jai Xu, (2004), “The 
application of FRID and development trend”, 
Ministry of Economic Affairs E-navigation, 
Vol.6, No. 13, pp.1-15. 
 
 
 
98 年度專題研究計畫研究成果彙整表 
計畫主持人：朱治平 計畫編號：98-2221-E-006-094-MY2 
計畫名稱：基於動態進位法之近似策略在優先限制條件下可展延平行任務之排程研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 1 1 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 1 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
