2 
 
在資源有限且不具備 MMU 的嵌入式系統上之高可靠度機制的
設計與實作 
計畫編號：NSC98－2221－E－005－061－ 
執行期限：98年8月1日至99年7月31日 
主持人：張軒彬    
國立中興大學資訊科學與工程學系 
 
ABSTRACT 
Incremental checkpointing has been shown as an effective 
method to significantly reduce the checkpoint overhead. 
Nevertheless, previous incremental checkpointing scheme 
heavily relies on the page protection hardware to identify 
which pages are modified during each checkpoint period. 
Since sensor nodes do not have the page protection hardware, 
as a result, previous incremental checkpointing cannot be 
applied in sensor network environments.  In this report, we 
thus propose three incremental checkpoint methods in MMU-
less sensor network environment. These three methods differ 
in the granularity of checkpoint unit and the module execution 
overhead. We have implemented the three incremental 
checkpointings on SOS in the mica2 mote sensor nodes. 
According to the experimental results, we can checkpoint and 
restore the application state successfully. Besides, depending 
on the characteristics of a module, each application modules 
can select its own incremental checkpoint scheme to minimize 
the checkpoint overhead. 
Keywords 
Checkpointing, incremental checkpointing, fault tolerance, 
SOS, sensor networks. 
1. INTRODUCTION 
A wireless sensor network (WSN) typically consists of 
hundreds or thousands of sensor nodes. Usually, sensor nodes 
are expected to be long-lived. However, hardware reliability 
issue, e.g., aging or wear-out, infant mortality, design defects 
etc., would make the expectation disappointed [4]. This 
problem is getting more serious since some sensor nodes are 
deployed in harsh environments such as the forest canopy, 
volcano, or the ocean, that would cause the hardware further 
prone to fail [1, 7, 12]. Nevertheless, for some applications 
such as nuclear monitoring, node failure is unsustainable and 
unacceptable. Furthermore, some sensor nodes play an 
important role in a sensor network and failure of these nodes 
could at worst render a senor network useless. For example, 
the failure of a cluster head in cluster-based routing schemes 
would cause the forwarding path to the sink broken. As a 
result, the sensor data have no way to send back to the sink. 
Responding to a hardware failure of a node would require 
physical access to the node. Unfortunately, WSNs are usually 
deployed far from human access. Once sensor nodes are 
deployed, it is impractical and impossible to physical access 
each individual node. Consequently, a failure resilient sensor 
network that can automatically detect and recover from 
hardware failures is important and in fact, necessary. 
One possible solution is to use space-redundant technique 
so that the system can continue to operate when a hardware 
component fails. Consequently, in this report, on the basis of 
mica2 motes [2], we propose a dual-motes sensor node 
architecture that connects two motes by an UART link. 
Besides, we also employ the checkpoint and recovery 
technique. However, checkpoint is an expensive operation. 
Thus, lots of improvements have been proposed to reduce the 
checkpoint overhead [10]. One of the well-known 
optimization schemes is the incremental checkpointing. It 
utilizes the page protection hardware to identify the 
unchanged portion of a checkpoint and saves only the 
changed portion to reduce the amount of data written to the 
storage. Unfortunately, due to the cost consideration, sensor 
nodes do not have the page protection unit and thus the legacy 
incremental checkpoint cannot be applied in WSNs. 
Consequently, in this report, we design and implement 
three software-based incremental checkpoint schemes in the 
MMU-less sensor nodes. These three incremental checkpoint 
schemes differ in the checkpoint data size and module 
execution overhead. We have implemented these three 
incremental checkpoint schemes in the mica2 motes on the 
SOS kernel [6]. According to the experimental results, our 
proposed three incremental checkpoint schemes can be 
applied for different application modules and reduce the 
checkpoint overhead significantly. 
The remainder of this report is organized as follows. 
Section 2 describes the previous checkpoint schemes and 
introduces the SOS operating system. Section 3 presents the 
design and implementation of our base checkpointing and 
three incremental checkpointing methods. The experiment 
results are shown in Section 4. Finally, Section 5 gives 
conclusions and future work. 
2. BACKGROUND 
In subsection 2.1, we first review previous checkpoint 
schemes. Then, since our work is based on the SOS operating 
system, we introduce the SOS in subsection 2.2. 
2.1 Checkpointing 
Checkpointing saves application program state and provides a 
recovery ability for application programs when system failures. 
Nevertheless, checkpointing is an expensive operation and 
many techniques have been proposed to reduce the 
checkpointing overhead. These techniques can be divided into 
two classes [11]. One is the latency hiding techniques such as 
forked checkpointing and copy-on-write checkpointing [9] 
that attempt to hide the checkpoint execution from application 
programs. The other is the size reduction technique such as 
incremental checkpoining [9] and memory exclusion 
checkpointing [10] that minimizes the amount of checkpoint 
data written to the storage. 
4 
 
 
(a)                    (b) 
Figure 2. (a) surge state structure (b) SurgeMsg structure. 
 
Consequently, we first parse the mod_bin data structure to 
save all the modules’ states. Then, we parse the malloc_heap 
data structure, which is used by SOS to maintain the heap area, 
to saves the dynamically allocated memory. However, not 
only the heap memory content, but also the malloc_heap data 
structure is saved during checkpointing. This is because the 
malloc_heap at the primary node is changed when modules 
dynamically allocate and free memory at run time while the 
malloc_heap at the backup node is still in its initial state. By 
contrast, we do not have to save the module_bin data structure, 
since if a new module is dynamically added into the systems, 
it will be uploaded to both the primary and backup nodes. 
Thus, the two module_bin structures in primary and backup 
nodes are always the same. 
Finally, messages that are queued in the message queue 
and timers that have not yet been expired are also saved. 
Consequently, the malloc_heap, the messages and the timers 
are the only kernel data structures that have to be saved during 
checkpointing.  
3.3 Incremental Checkpointing 
In this subsection, we show our proposed three incremental 
checkpointings for MMU-less WSNs. 
3.3.1 Method 1: Scheduler-Based Scheme 
During a checkpointing period, some of the modules may not 
be executed. Nevertheless, as stated above, the base 
checkpointing saves the memory area of all of the modules, no 
matter they are executed or not. Consequently, the first 
incremental checkpointing intercepts the message scheduler to 
keep track of the modules that are executed. We maintain a 
module_bit_map data structure with each bit corresponding to 
a module. If a module is selected to run by the message 
scheduler, the bit that is corresponding to the module is set. 
When checkpointing, only those modules whose bits are set in 
the module_bit_map are checkpointed. 
Nevertheless, as stated in subsection 2.2, in addition to the 
message passing, a module can also be invoked when another 
module calls its exported functions. In SOS, functions that are 
provided and subscribed by a module are all maintained in the 
module’s module header. Consequently, when a module is 
selected to run by the message scheduler, we also check the 
module header of this module to see if it also calls other 
modules’ provided functions. If it does, we also set the bits of 
these modules called by this module and the process is 
continued until the bits of modules that are called either 
directly or indirectly by this module are all set. 
3.3.2 Method 2: iCALL-Based Scheme 
Nevertheless, not all subscribed functions will be invoked 
during execution. For example, although module A subscribes 
the exported function F of module B, nevertheless, module A 
may not invoke function F during its execution. However, the 
method 1 would also checkpoint the memory area of module 
B. 
To address this problem, we intercept all module calls and 
insert a new kernel function call called 
module_called(unsigned module_id) in all provided functions 
of all modules. The module_called() is passed with the 
module’s identifier as the parameter. When the 
module_called() function is invoked, we set the bit 
corresponding to the module’s identifier in the 
module_bit_map and also checkpoint this module during the 
checkpointing.  
Compared with method 1, method 2 can correctly 
checkpoint the modules that are indeed executed. 
Nevertheless, method 2 pays the extra execution overhead due 
to the inserted module_called() statement in all provided 
functions. 
3.3.3 Method 3: Store-Based Scheme 
The checkpoint unit in both method 1 and 2 is the complete 
address space used by a module, i.e, the all memory area 
occupied by a module is checkpointed. Nevertheless, not all 
variables in either the module state structure or the 
dynamically allocated memory are modified during a 
checkpoint period. In other words, the checkpoint unit in both 
method 1 and 2 is too coarse. 
 
 
Figure 3. modifications of the store instructions. 
 
Consequently, we proposed the third incremental 
checkpoint scheme that traces the memory write instructions 
to keep track of the part of memory that are modified during 
each checkpoint period. Firstly, we divide the memory into a 
number of micro blocks and each micro block consists of a 
number of bytes. Then, we maintain a micro_block_bit_map 
data structure with each bit corresponding to a micro block. 
Finally, as shown in Figure 3, we insert a program block 
before each store instruction. The inserted program block 
invokes a new kernel function called mem_access_recorder(), 
which finds the micro block that the target address belongs to 
and then sets the corresponding bit in the 
micro_block_bit_map structure. Besides, we also modify the 
free() system call that clears the bits of the micro block which 
the free() system call releases.  
 
 
6 
 
and 2. Furthermore, for method 3, intuitively, the size of 
micro_block_bit_map is increased with the decrease of the 
size of micro block. Thus, the data size overhead is least 
significant when the micro block size is 8 bytes and is the 
largest when the micro block size is 2 bytes. 
Table 1. Code size and memory overhead comparison 
(bytes) 
 Code Size Data Size 
Original SOS 48282 2948 
Method 1 55028(+13%) 3512(+19%) 
Method 2 54452(+12%) 3512(+19%) 
Method 3 (2 bytes)  
55804(+15%) 
3640(23%) 
Method 3 (4bytes) 3576(21%) 
Method 3 (8 bytes) 3544(20%) 
 
4.2 Module Execution Overhead 
Since method 2 and 3 would insert a sequence of instructions 
in application modules, in this subsection, we measure the 
code size, execution time, and the energy consumption of 
each module by each checkpoint method. Firstly, we compare 
the code size of the original application modules with that of 
the modified ones by each checkpoint scheme. The 
experimental result is shown in Table 2. From Table 2, since 
method 1 does not insert any statement, it does not increase 
the code size. By contrast, the code sizes of tree routing and 
photo temp module are increased in method 2 since both of 
them have exported functions that are called by the surge 
module. The code sizes of other three modules remain the 
same since they do not have any exported functions. Finally, 
except the photo_temp module, the code size is increased 
most significantly in method 3 since method 3 must insert 
instructions for each store instruction. 
Table 2. Code size increase of applications modules (bytes) 
 Original Method 1 Method 2 Method 3 
Blink 158 158 158 196 
Surge 530 530 530 720 
Neighbor 1222 1222 1222 1748 
Tree 
routing 
920 920 926 1152 
Photo 
temp 
420 420 464 450 
DVM 10976 10976 10976 13740 
 
In addition to the code size, the execution time would also 
increase due to the inserted instructions by method 2 and 3. 
Thus, Table 3 shows the performance impact on module 
execution by the three incremental checkpoint schemes. For 
each module, we measure the execution time of its message 
handlers twenty times and the average value is used for 
performance comparison. Nevertheless, except init and final 
message handlers which are invoked at module start up and 
termination, photo_temp module does not embed any message 
handler. Consequently, Table 3 does not show the execution 
time of the photo_temp module. In fact, since photo_temp is 
called by the surge module, the execution time of surge 
module thus includes the execution time of functions exported 
by the photo_temp module. 
From Table 3, similar to that shown in Table 2, method 1 
does not incur any extra execution overhead. Besides, in 
method 2, modules that do not invoke other modules’ 
exported functions have the same execution time as that of the 
original modules. This includes the blink module, neighbor 
module, tree routing module and DVM module. By contrast, 
since surge module calls the exported functions of 
photo_temp and tree routing modules, the execution time is 
thus increased due to the inserted module_called() function. 
Finally, as expected, for all modules, method 3 increases the 
most significant execution overhead. 
Table 3. Comparisons of run time overheads (ms) 
 Original Method 1 Method 2 Method 3 
Blink 0.27137 0.27137 0.27137 0.407056 
Surge 2.161872 2.225237 2.587056 2.786024 
Neighbor 2.496608 2.686567 2.618725 4.966079 
Tree 
routing 
1.139756 1.166893 1.248304 1.940299 
DVM 13.30841 13.31967 13.37626 24.72863 
 
Finally, we compare the energy consumption of each 
module under each checkpoint scheme and the results are 
shown in Table 4. The result is similar to the Table 3. Method 
3 consumes the most significant energy consumption. 
Table 4. Comparisons of energy consumption 
(microJ)  
 Original Method 1 Method 2 Method 3 
Blink 6 6 6 9 
Surge 47.7999 52.2 57.20001 61.5999 
Neighbor 55.2 57.9 62.4 109.8 
Tree 
routing 
25.2 25.8 27.6 42.9 
DVM 294.50001 294.24999 295.74999 546.75 
4.3 Checkpoint Performance 
Finally, we measure the checkpoint performance. Firstly, we 
measure the checkpoint sizes by each checkpoint method. At 
startup, we perform the base checkpointing and then perform 
five incremental checkpointing with each checkpoint is 
invoked every 5 minutes, and the average value is used for 
performance comparison. The experimental result is shown in 
Table 5. Firstly, for blink module, since the module state of 
blink is only 2 bytes, the checkpoint size by method 1 and 2 is 
thus 2 bytes. Nevertheless, in method 3, the checkpoint size is 
4 or 8 bytes when the micro block size is 4 or 8 bytes, which 
is larger than that in method 1 and 2. This is because the 
module state of blink is too small (only 2 bytes) that the size 
of a micro block may be larger than that of the blink module 
state. 
Secondly, for photo_temp, tree routing, and neighbor 
modules, the checkpoint sizes of method 1 and method 2 are 
the same since tree routing and photo_temp modules are 
called each time when the surge module executes. In method 
3, when the micro block size is 2 or 4 bytes, the checkpoint 
size is smaller than that of method 1 and 2. Nevertheless, 
similar to the blink module, when the micro block size is 8 
bytes, the checkpoint size is larger than that of both method 1 
and 2. In other words, the size of a micro block is too big such 
that it covers the memory areas that are not used by the 
checkpointed modules.  
 
Table 5. Comparisons of checkpoint sizes (bytes) 
 Blink 
modules 
Surge + 
Photo_temp + 
Tree_routing + 
Neighbor 
modules 
DVM + 
CntToLed 
scripts 
 Base Inc. Base Inc. Base Inc. 
8 
 
In the future work, we will derive formulas to calculate 
the energy consumption of each method to automatically 
select a proper method used for a particular module. Besides, 
since method 3 must insert a program block for each store 
instruction, it thus causes significant execution overhead. In 
the future work, we will investigate how to optimize the 
method 3 to reduce the run time execution overhead.  
6. REFERENCES 
[1] A. Arora et al, “A Line in the Sand: A Wireless Sensor 
Network for Target Detection, Classification and 
Tracking,” Computer Networks, vol. 46, no. 5, pp. 605-
634, December 2004. 
[2] Berkeley mica motes, http://www.xbow.com/  
[3] Rahul Balani, Chih Chieh Han, Ram Kumar 
Rengaswamy, Ilias Tsigkogiannis,  Mani Srivastava, 
“Multi-level software reconfiguration for sensor 
networks,” Proceedings of the 6th ACM & IEEE 
International conference on Embedded software, pp. 112 
- 121, 2006. 
[4] Shekhar Borkar, “Designing Reliable Systems from 
Unreliable Components: The Challenges of Transistor 
Variability and Degradation”, IEEE Micro, Vol. 25, No. 
6, 2005. 
[5] E. N. Elnozahy, “How Safe is Probabilistic 
Checkpointing?,” 28th Annual International Symposium 
on Fault-Tolerant Computing, pp. 358 – 363, 1998. 
[6] C. C. Han, et. al., "SOS: A dynamic operating system for 
sensor networks", the Third International Conference on 
Mobile Systems, Applications, And Services, Seattle, pp. 
163-176, June 2005. 
[7] K. Lorincz, et al., “Sensor Networks for Emergency 
Response: Challenges and Opportunities”, IEEE 
Pervasive Computing, Vol.3 No.4, pp.16-23, October 
2004. 
[8] H. C. Nam, J. Kim, S. J. Hong, and S. Lee, “Probabilistic 
Checkpointing,” 27th Annual Int’l Symposium on Fault-
Tolerance Computing, pp. 48-57, 1997. 
[9] J. Plank, M. Beck, G. Kingsley, and K. Li, "Libckpt: 
transparent checkpointing under unix," In Proceedings of 
the Usenix Winter Technical Conference, pp. 213-223, 
1995. 
[10] J. S. Plank, “An Overview of Checkpoint in 
Uniprocessors and Distributed systems, Focusing on 
Implementation and Performance,” Technical Report 
UT-CS-97-372, Department of Computer Science, 
University of Tennessee, Knoxville, TN. July 1997. 
[11] J. Plank, Y. Chen, M. B. K. Li, andG. Kingsley, 
"Memory Exclusion: Optimizing the Performance of 
Checkpointing System," Software Practice and 
Experience, Vol. 29, No. 2, pp. 125-142, 1999. 
[12] R. Pon et al., “Networked infomechanical systems: a 
mobile embedded networked sensor platform,” in Proc. 
of the 4th International Symp. on Inform. Processing in 
Sensor Networks, pp. 376-381, 2005. 
[13] Ben L. Titzer , Daniel K. Lee , Jens Palsberg, "Avrora: 
Scalable Sensor Network Simulation with Precise 
Timing", Proceedings of the 4th International 
Symposium on Information Processing in Sensor 
Networks, pp. 477 – 482, 2005. 
. 
 
 10
 
國科會補助計畫衍生研發成果推廣資料表 
日期：99 年 10 月 1 日 
國科會補助計畫 
計畫名稱：在資源有限且不具備 MMU 的嵌入式系統上之高可靠度
機制的設計與實作 
計畫主持人：張軒彬 
計畫編號：NSC98－2221－E－005－061－領域：資訊學門一 
研發成果名稱 
（中文）應用於不具備 MMU 的檢查點機制 
（英文）An Incremental Checkpoint Scheme in MMU-less 
Systems 
成果歸屬機構 中興大學 發明人 (創作人) 
張軒彬 
技術說明 
（中文）incremental checkpoint 可以大幅減少傳統 checkpoint 的執
行負擔，不過，以前提出的 incremental checkpoint 方法必須仰賴
MMU(Memory Management Unit)來找出記憶體分頁中，哪些有被
修改。不過，有一些系統並不具備 MMU，因此，本計畫提出應
用於不具備 MMU 系統上的 checkpoint 機制；並針對不同的應用
程式特色，提出三種不同的 incremental checkpoint 的方法。我們
以成功將我們的方法實作於 SOS 作業系統上。 
（英文）Incremental checkpointing has been shown as an effective 
method to significantly reduce the checkpoint overhead. Nevertheless, 
previous incremental checkpointing scheme heavily relies on the page 
protection hardware to identify which pages are modified during each 
checkpoint period. In this project, we propose three incremental 
checkpoint methods in MMU-less environments. These three methods 
differ in the granularity of checkpoint unit and the module execution 
overhead. We have implemented the three incremental checkpointings 
on SOS in the mica2 mote sensor nodes. 
產業別 產業：通訊產業，嵌入式系統產業 
技術/產品應用範圍 1. 不具備 MMU 的嵌入式系統 2. 有高可靠度需求的嵌入式系統 
技術移轉可行性及預
期效益 
我們已實作我們提出的三種 incremental checkpoint 方法，技
術移轉上可以達到無縫轉移。在預期效益上，可以利用軟體達到
incremental checkpoint 的目標，一來提升系統的可靠度，二來
可以解省硬體上的成本。 
     註：本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。 
 
 
附件三 
98年度專題研究計畫研究成果彙整表 
計畫主持人：張軒彬 計畫編號：98-2221-E-005-061- 
計畫名稱：在資源有限且不具備 MMU 的嵌入式系統上之高可靠度機制的設計與實作 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 0%  
研究報告/技術報告 2 2 100%  
研討會論文 2 1 200% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 4 2 200%  
博士生 0 1 0%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 1 100% 期刊論文正在撰寫中！ 
研究報告/技術報告 0 0 100%  
研討會論文 0 1 100% 
篇 
正在審查中 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
