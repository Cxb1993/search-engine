I. Introduction 
For future high-definition consumer electronics products, like HD-DVD (Figure 1), 
HDTV (Figure 2) or HD-DV, the H.264/AVC video coding standard will play an 
important role.  
 
Fig. 1 Sharp’s HD-DVD Product 
 
Fig. 2 Sharp’s HDTV Product 
 
The challenges to designing such chips are that both high control complexity and high 
Fig. 3 Amphion's HD H.264 Decoder (CS7050) 
 
The architecture of the CS7050 H.264 decoder is shown in Figure 3. The H.264 video 
stream to be decoded is input to the Byte Stream Decoder, which, in conjunction with 
the embedded microcontroller, parses the stream and decodes the variable-length 
coded data. The sample differences are then decoded in the Pixel Decode module. 
This also performs the intra-prediction function. Simultaneously the inter-prediction 
sample are assembled in the Inter Prediction module and are passed to the Pixel 
Decode module. The output data is then written to the de-blocking filter. This 
de-blocking filter performs the loop filtering operation, if enabled by the stream, prior 
to the final write of the decoded picture data to the Decoded Picture Buffer. 
2. Ultradata’s HD H.264 Decoder 
1. Minimizes off-chip memory access 
2. Two-port data memories and FIFOs 
3. Eliminates memory access stalls 
z Smart two-dimensional DMA controller 
1. Reads source data early 
2. ILP never waits for data 
III. H.264/AVC Techniques 
In common with earlier standards (such as MPEG1, MPEG2 and MPEG4), the 
H.264/AVC standard does not explicitly define an encoder. Rather, the standard 
defines the syntax of an encoded video bitstream together with the method of 
decoding this bitstream. In practice, however, a compliant encoder and decoder are 
likely to include the functional elements shown in Figure 5 and Figure 6. Whilst the 
functions shown in these Figures are likely to be necessary for compliance, there is 
scope for considerable variation in the structure of the CODEC. The basic functional 
elements (prediction, transform, quantization, entropy encoding) are little different 
from previous standards (MPEG1, MPEG2, MPEG4, H.261, H.263); the important 
changes in H.264 occur in the details of each functional element. 
The Encoder (Figure 5) includes two dataflow paths, a “forward” path (left to right, 
shown in blue) and a “reconstruction” path (right to left, shown in magenta). The 
dataflow path in the Decoder (Figure 6) is shown from right to left to illustrate the 
similarities between Encoder and Decoder. 
Fig. 6 H.264/AVC Decoder 
 
In Figure 6, the decoder receives a compressed bitstream from the NAL. The data 
elements are entropy decoded and reordered to produce a set of quantized coefficients 
X. These are rescaled and inverse transformed to give Dn’. Using the header 
information decoded from the bitstream, the decoder creates a prediction macroblock 
P, identical to the original prediction P formed in the encoder. P is added to Dn’ to 
produce uF’n which this is filtered to create the decoded macroblock F’n. 
IV. Two-Tiered Finite State Machine Based Hardware/Software 
Codesign 
For satisfying both the performance and the time-to-market requirements from this 
high-definition H.264/AVC CODEC design, some compromise has been taken into 
our design approach. To shorten the design time and alleviate the burdens of 
implementing all of the details of the HD H.264/AVC hardware, a software approach 
is attractive to this work. However, considering the dense computing that HD H.264 
CODEC needs, it seems impossible to implement this chip just by using pure 
high-level software programming languages like C or C++. Hence, between pure 
hardware and pure high-level C software, we selected assembler as our programming 
language for building the key modules that compose our HD H.264/AVC CODEC 
chip. For further avoiding interface communication overhead that exists in many SoC 
designs, especially in our work, a distributed control mechanism composed of several 
tiny, control-oriented, 8-bit RISCs has been proposed in this project as shown in 
Figure 7. 
In Figure 7, the so called two-tiered FSM controllers have been drawn. Above a 
datapath, a low-level controller (LL-FSM) using conventional Mealy/Moore/one-hot 
finite state machine technique is in charge of directly controlling the datapath. On the 
top of LL-FSM, a high-level controller (HL-FSM) based on a tiny, control-oriented, 
8-bit RISC (by assembler), is responsible to managing the rest complicated control 
Fig. 8 Design Steps with SystemC 
 
Behavioral-level design also focuses on the functionality of the DUT, but unlike the 
algorithmic level design, it has cycle information, which defines when a specific 
VI. FPGA Evaluation System 
To evaluate the video quality and processing performance of our HD H.264/AVC 
CODEC, we have built an FPGA evaluation system prior to ASIC fabrication. The 
specification of our FPGA evaluation board is as Figure 10: 
FPGA Chip Xilinx Virtex2 4000 
HD Video-In Interface DVI  
HD Video-Out Interface DVI 
PC Interface USB 2.0 
Video Resolution 1920x1080 
Frame Rate 20 fps 
Encoding Rate 7 Mbps 
Fig. 10 The Specification of the FPGA Evaluation Board 
 
The total test environment, including two PCs, two FPGA evaluation boards and a 
24-inch HD LCD display, is shown in Figure 11. One PC is used to feed original HD 
video contents (in YUV422 format) to HD H.264/AVC encoder board via DVI 
interface. Another PC is used for storing and sending encoded streams from encoder 
board or to decoder board via USB 2.0 interface. The decoded frames are finally 
displayed on a 24-inch LCD display with high-definition capability. 
Fig. 11 The Total HD H.264/AVC CODEC FPGA Test Environment 
 
Orig. Audio/Video Streams 
DVI Video Input 
Compressed Streams 
H.264 Encoder
FPGA Board 
H.264 Decoder 
FPGA Board 
Audio Input 
USB 2.0  USB 2.0  
DVI Video Output 
 To HDTV 
Audio Output 
 To Speaker
  
(a) 
(b) (c) 
(d) (e) 
Fig. 12 (a) Original 10HD_Streetcar Video Clip, Region of Assessment in Red Box (b) 
Divx Decoded Block of Image (c) WMV Decoded Block of Image (d) H.264 Decoded 
Block of Image (e) Original Block of Image 
 
VII. Conclusions 
In this project, we have successfully implemented a high-definition H.264/AVC 
CODEC by using distributed two-tiered finite state machine based hardware/software 
codesign architecture, for which the controllers are divided into two-tiered: the 
High-Level Finite State Machine (HL-FSM) and the Low-Level Finite State Machine 
(LL-FSM). The control jobs which suit LL-FSM are those induced by vector 
computing, typically they are regular and less complicated. Due to the basic 
programming capability and the relative easiness to verification, the HL-FSM can 
significantly reduce the design impacts from the much more complicated 
next-generation video coding standards. In addition, since the proposed architecture is 
compatible with both ASIC and FPGA technologies, it can raise the add-on values of 
the design. 
References 
z F. Vahid and D.D. Gajski, “Incremental Hardware Estimation During 
Hardware/Software Functional Partitioning,” IEEE Trans. VLSI Systems, Sept. 
1995, pp. 459-464. 
z M. Chiodo et al., “Hardware/Software Codesign of Embedded Systems,” IEEE 
Micro, Aug. 1994, pp. 26-36. 
z Kalavade and E.A. Lee, “The Extended Partitioning Problem: 
Hardware/Software Mapping, Scheduling, and Implementation-Bin Selection,” 
Design Automation for Embedded Systems, Mar. 1997, pp. 125-163. 
z W. Wolf, “An Architectural Cosynthesis Algorithm for Distributed, Embedded 
Computing Systems,”IEEE Trans. VLSI Systems, June 1997, pp. 218-229. 
z B. -Y. Hsieh, Y. -W. Huang, T. -C. Wang, S. -Y. Chien, and L. -G. Chen, “Fast 
motion estimation algorithm for H.264/MPEG-4 AVC by using multiple 
reference frame skipping criteria,” in Proceedings of 2003 SPIE International 
Conference on Visual Communications and Image Processing (VCIP 2003), 
Lausanne, Switzerland, July 2003. 
z Y. -W. Huang, T. -W. Chen, B. -Y. Hsieh, T. -C. Wang, T. -H. Chang, and L. -G. 
Chen,“Architecture design for deblocking filter in H.264/JVT/AVC,” in 
