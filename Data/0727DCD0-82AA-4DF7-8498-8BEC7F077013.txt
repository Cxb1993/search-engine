小從民間組織，大至政府相關單位之人力調配問題皆
可屬之，從管理學的觀點來說即是在適當的時間安排
適當人員於適當的工作上，而管理者在處理人員排班
問題時往往需面對 3 個主要層面：效率(efficiency);公
平(equality);合理性(reasonability)。Felton [4]對護理人
員排班的定義，是在滿足單位部門護理人力需求的情
況下，對該單位護理人員的休假及工作班次加以計劃
的程序。 
根據 Gillies [6]與 Rowland[7]認為排班的好壞與其原則
有密切關聯性，一般依據下述六點來評值。適當的人
力(Coverage)；品質性(Quality)；穩定性(Stability)；彈
性(Flexibility)；公平性(Fairness)；成本(Cost)。 
 
2.2 護理人員排班方法的相關研究 
由於排班時必須考量的因素頗多，常常耗費護理行政
管理者無數時間及精力，因此在排班的方法上，如何
能使排班確實發揮管理的功能並且降低管理者的負擔
，以下將以現有的排班種類與方式加以比較與分析。 
 
2.2.1 護理人員排班的種類 
護理人員排班的種類，依權力的狀況可分為集權式排
班、分權式排班及自我排班法三種[1]。 
 
A.集權式排班 
排班者為單位的最高行政主管或一、二級主管，依其
主觀的方式排班，它不需透過溝通及協調，亦不考量
工作人員的個別需求，排班者整體評估各單位人力及
病患需求，而逕自調配及平衡各單位人力。此種排班
方式對於各單位合理的人力配置可做較靈活及快速的
安排，但此僅限於排班者主觀之判斷，客觀上無法了
解各單位人力需求，對於個別狀況既無法全盤掌握。 
 
B.分權式排班 
此種排班方式是目前最常見的排班方式，排班者通常
為護理長，依工作人員個人意願排班。此方式優點在
於護理長較能掌握單位的人力需求，且部分工作人員
亦有彈性依個別狀況調整排班。但礙於權限，對整體
人力運用較無法靈活合理的來配置。 
 
C.自我排班 
自我排班的排班方式是由單位的工作人員集體決定，
此種排班依據許多實證研究，較能激勵員工士氣及增
加工作滿意度，降低人員流動率。自我排班屬於開放
性的排班方式，在採行前，必須由單位內的全體人員
先行討論訂立良好的排班規則，但此項排班規則不可
與醫院的作業規定及工作品質相衝突；雖然如此，護
理人員彼此間仍存在極大之妥協要克服。 
護理人員的排班方法有許多種，Sitompul [8]等將護理
人員排班的方式，分為週期性排班及非週期性排班兩
種；左如梅[1]等學者，將護理人員排班的方式，區分
為輪班制、週期性排班及固定班制三種。 
 
A.輪班制 
由排班者依病房性質、護理需求及現有人員，分配所
屬的工作人員輪轉於白班、晚班、夜班、休假等班別
，其上班時間、班別、週期、休假均為不定。 
 
B.週期性排班 
為改善輪班制之缺點，而發展出週期班制，運用預先
設定好之週期，重複分配所屬工作人員值班。謝漢雄[2]
認為所謂週期性排班法，就是先建立一組合理且為護
理人員樂意接受的執勤表，然後一期一期重複下去。
週期性排班法不但能滿足循環服務的需求，且能在各
種護理人員排班政策的規定下，使每位人員得到公平
的輪班輪休機會。 
 
C.固定班制 
固定班制是工作人員在符合醫院管理政策及滿足護理
服務品質原則下，依其意願選擇固定值班別。 
 
2.3 遺傳演算法 
遺傳演算法(Genetic Algorithm, GA)是 John Holland 於
1975 年所提出的一套演算法則，以達爾文「物競天擇
，適者生存，不適者淘汰」的進化法則為其基本架構
。藉由演算法本身的演化過程逐步淘汰適合度低的個
體(以護理人員排班問題之說法則是，逐步淘汰不合適
的班表)，並由適應力高的個體(合適度高之班表)再經
過複製、交配與突變繁衍出適合度更高的下一代，以
達成搜尋最佳解的目的。於此研究中，所產生之一個
過幾世代的演化仍無改變時，即可視為找到最佳解。 
 
3. 個案醫院需求描述及研究方法 
本節首先針對個案醫院之需求及排班限制、喜好加以
說明，接著描述如何應用 GA 來求解護理人員排班問
題。 
 
3.1 個案醫院描述 
本研究以台中署立醫院各單位的護士排班作為個案研
究。院內之護理人員包含正、副護理長、資深護理員
和資歷較淺之護理員。在管理上，依照各人之技術嫻
熟程度畫分為 A、B、C 級護理人員。院內之排班班制
有「白班(0800~1700)(8)」、「小夜班(1600~2400)(E)」、「大
夜班(2400~0800)(N)」；少數護理單位因為成本之考
量，尚有「兩頭班(0800~1200;1800~2200)(D)」、「AM
班(0800~1200)」、及「PM 班(1300~1700)」。經與多位
護理長及護理管理階層主管溝通後，分別列出「排班
目標」、「排班限制」、及「排班喜好」於後： 
 
A. 排班目標 
護理人員們最在乎「排班公平性」，因此護理長們公認
此為最重要之排班目標。「公平」於案例醫院中，又反
應於兩項指標：一為週休及國定假日排休(off)之公平
性，另一則為累計休假總天數之公平性。指標 1 之定
義為：上月累計假日休假差異+本月週休及國定假日總
數-本月實際於週休及國定假日排休之天數。指標 2 之
定義為：上月累計數+本月應有之排休天數-本月實際休
假天數。 
 
B. 排班限制 
排班限制中包含勞基法對工作時數之限制、各單位各
級護理人力基本需求等。分述如下： 
限制式 1：每週連續上班天數不得超過 6 天。 
限制式 2：兩週上班天數總數不得超過 11 天，且定義
每個星期的起迄分別為星期一及星期日。 
限制式 3：因考量人體負荷，大夜班(N)隔天只能繼續
上大夜班或是排休。 
限制式 4：每日班表中，同一排班單位之 A 級加上 B
級護理人員數必須超過 C 級護理人員數，避免無法照
顧現場之情事發生。 
限制式 5： 班表必須符合各級人力之基本需求數，方能
有足夠護理強度照顧病患。 
 
C. 排班喜好 
除了在「硬性」限制外，護理長們希望班表能反映出
「軟性」之人性喜好。經整理後，列述於下： 
喜好 1：護理人員希望班表能以週期方式呈現，使其對
未來之班表能有一定程度之熟悉及預期。 
喜好 2：護理人員希望同單位內之同僚們彼此的班表能
盡量類似，以求公平。 
喜好 3：護理人員希望盡量讓某一班制能持續數天後再
做班制變動，以免生理時鐘無所適從。 
 
3.2 研究方法 
本節詳述本研究所發展之 GA 演算法。 
 
3.2.1 編碼及起始解產生法則 
產生每個個體大小分別為 N*P 的矩陣，橫座標為
排班日期，縱座標為護理人員編號，字元值分別為 1~6
的整數，其中 1 代表白班、2 代表兩頭班、3 代表小夜
班、4 代表大夜班、5 代表休假、6 代表不可動的休假
（解釋於後）。 
首先依照各單位小夜班(3)及大夜班(4)的基本人力需
求，依照法則一產生染色體內幾小段基因；接著再依
照法則二，加入亂數選取之 1、2、5 值，製造出符合
小夜班及大夜班基本人力需求的母體染色體。 
我們依照案例單位常見之排班型態加以構建出染色體
內幾小段基因，例如 EENNOO (兩天小夜班、兩天大
夜班，排休兩天)。此排班型態需依照各醫院之習慣適
度更改。排列於小夜(E)及大夜(N)之後之休假 O，乃是
應護理人員們要求之固定排班型態，稱之為「不可動
的休假」，即為編號 6 之含意。  
法則一： 
步驟 1：護理人員分群。視人員多寡決定單群或多群排
班。 
步驟 2：產生母體內各染色體之小夜、大夜班區段基因。 
步驟 3：產生不可動之休假 6。連續小夜班後加入一個
不可動的休假 6，產生 3336 或 33336 的區段；連續大
夜班後加入二個不可動的休假 6，產生 4466、44466、
444466 的區段。 
母代 2 
 
圖 2. 交配前的母代個體 
 
               
ｔ＝１  ｔ＝2  ｔ＝3  ｔ＝4 ｔ＝5   ｔ＝6   ｔ＝7   ｔ＝8  ｔ＝9  ｔ＝１0 
子代 1   
 
              ｔ＝１  ｔ＝2  ｔ＝3  ｔ＝4 ｔ＝5   ｔ＝6   ｔ＝7   ｔ＝8  ｔ＝9  ｔ＝１0 
子代 2   
 
圖 3. 交配後的子代個體 
 
4. 系統開發 
本自動排班系統採用Apache Server作為WEB Server的
架設，以PHP語言來撰寫動態網頁，並以MySQL為資
料庫。因此用戶端(Client)的使用者可以透過以PHP語
言所開發的動態網頁來與Server端進行互動，故用戶端
的使用者可以透過本系統直接於網路上執行排班作
業。因各排班單位共用同一系統及資料庫，故可節省
系統架設所需的成本及時間，且因共用同一資料庫，
所以可確保資料的一致性。WWW 中Client-Server 與
PHP程式互動關係如圖4所示)。以下將針對本系統所採
用的Apache Server、PHP、MySQL逐項說明於後。 
 
4.1 Apache Server 
Apache Server是一個高效率的免費WEB Server軟體，
已經超越Microsoft IIS，成為Internet 上的 Web 伺服
器之最大宗。因此本研究採用Apache Server作為護理
人員自動排班系統之伺服器。 
 
4.2 PHP 
PHP (全名PHP Hypertext Preprocessor) 是一種伺服器
端的嵌入式Scripting語言，具有跨平台的特性且表現並
不遜於其他的同類伺服端介面語言，如iHTML、JSP、
ASP...等，執行效率和開發速率也比 Perl、C-CGI等迅
速許多，因此本研究採用PHP語言來撰寫網頁。 
 
4.3 MySQL 
MySQL 是一個快速、多執行緒（multithread）、多使
用者且功能強大的關聯式資料庫管理系統（relational 
database management system, RDBMS），可以容易地與 
C、C++、Java、Perl、PHP 等語言連結，並且運行於
多種平台上，例如：Solaris、RedHat、Linux、FreeBSD、
OS/2、Windows ...等。因此本研究採用MySQL作為系
統開發所使用之資料庫。 
 
 
圖4. WWW 中Cline-Server 與程式關係圖 
 
4.4 系統架構 
本系統之架構共分為「管理者登入」及「排班登入」
兩大模組(如圖5所示)。此兩大模組詳細說明於後： 
ㄧ、管理者登入(圖6) 
此功能僅開放給系統管理者登入，模組內包含新增排
班單位、刪除排班單位、排班單位負責人資料變更及
系統負責人資料變更四大部分(圖7)。 
二、排班登入 
此功能開放給各排班單位管理者登入。模組內包含人
員資料維護、班表維護及班表規劃三部分。人員資料
3 4 4 6 6 2 1 1 5 1 
3 4 4 6 6 2 1 1 5 2 
3 4 4 6 6 1 2 1 5 1 
 
圖 8. 排班作業資料輸入畫面 
 
6. 結論 
本研究採用遺傳演算法之演算技術，以求解多限制條
件下之護理人員排班問題，嘗試找出並建立最適合之
班表，做為排班者在製作最終班表之參考，以期能夠
節省排班者在排定班表時所浪費巨額之時間，更重要
地是能提升醫院護理人員之工作滿意度與醫院之服務
品質。核心排班演算法發展完成後，再透過系統之開
發，完成一自動護理人員排班系統。 
 
 
圖 9. 系統自動產生之建議班表 
 
於系統開發過程中，經由與護理管理人員多次溝通
後，確認決策目標、排班限制，及護理人員們對班表
之喜好，方能在排班演算法中正確地反映出案例單位
之需求。 
經由實際執行案例醫院之多個護理單位後，本研究所
開發之排班系統確實能迅速提供建議班表於護理長們
作為必要微調之依據，大大減低了護理長們過去投入
在排班作業之心力。此外，由本系統依據之排班邏輯
所產生之班表讓同單位內之人員，具有彼此間非常類
似之班表，經由班表右方所整理之護理人員休假資
訊，我們可以發覺本系統所建議之班表，已達成員工
們最在乎「公平性」的目標。 
 
 
圖 10. 各單位內護理人員休假情形摘要 
 
參考文獻 
1. 左如梅，<護理行政學>，華杏出版社，2000。 
2.  謝漢雄，<人員排班技術之研究>，政治大學企業
管理研究所碩士論文，1981。 
3. Buffa, E. S. ”An Integrated Work Shift Scheduling 
System,” Decision Sciences, pp.620~630, 1976. 
4. Felton, G, Scheduling, Nursing Management – A 
System Approach, pp.258-268, 1994. 
5. Gen, M. and Cheng. R., Genetic Algorithms and 
Engineering Design, John Wiley & Sons, 2000. 
6. Gillies, D.A. Nursing Management: A System’s 
Approach (2nd ed.), Philadelphia, USA, 1994. 
7. Rowland, H. S., Rowland, B. L. Nursing 
Administration Handbook (2nd ed.). Maryland, USA, 
1985. 
8. Sitompul, D. and Randhawa, U. S., “Nurse 
Scheduling Model: A State-of-the-Art Review,” 
Journal of the Society for Health System, Vol.2, No.1, 
pp.62-72, 1990. 
algorithm in which an initial solution is first generated by 
a new similarity coefficient-based method and is later 
improved iteratively by a fast, effective tabu search 
algorithm. 
Each of the aforementioned meta-heuristic algorithms 
has different strengths and weaknesses.  GA explores the 
solution space by means of a population of search points 
and operators such as selection, crossover and mutation.  
It produces diversified solutions yet suffers from poor 
convergence properties.  In contrast with GA, SA 
converges easily at local optima but may not be able to 
explore the solution space and find the global optima.  A 
strategy which combines GA and SA can reasonably be 
expected to give rise to complementary strengths.  This 
idea has been implemented in many researches and has 
obtained positive results (Wong, [15]). 
The purpose of this study is to develop a procedure 
that is efficient and effective for the cell formation 
problem with alternative process routings.  Test 
problems with various sizes are used to test the 
performance of the proposed hybrid algorithm.  The 
corresponding results are compared to the best results of 
several well-known published algorithms. 
 
2. Problem definition 
 
Cell formation in a given 0-1 machine-part incidence 
matrix involves rearrangement of its rows and columns 
to create part families and machine cells.  Researches 
usually attempt to determine a rearrangement by which 
the inter-cellular movement can be minimized and the 
utilization of the machines within a cell can be 
maximized.  Cases in which each part may have more 
than one process routing, such as the case shown in 
Figure 1, are even more complicated than the simple cell 
formation problem.  Formation of part families, 
formation of machine cells, and selection of routings for 
each part need to be determined in order to achieve the 
decision objectives, such as the minimization of inter-
cellular movement or the maximization of grouping 
efficacy. 
 
3. Proposed algorithm 
 
SA was originally proposed by Metropolis et al. [7] 
to simulate the annealing process.  After generating an 
initial solution, SA attempts to move from the current 
solution to one of the neighborhood solutions.  The 
changes in the objective function values are calculated.  
If the new solution results in a better objective value, it is 
accepted.  However, if the new solution yields a worse 
value, it can still be accepted according to a probability 
function, i.e., the Boltzmann function. 
GA is inspired by the evolution of living things that 
occurs in natural biology.  Some individuals are selected 
as parents to generate offspring via the crossover 
operator.  All the individuals are then evaluated for 
fitness and the fittest are selected to survive.  The 
process of reproduction, evaluation, and selection is 
repeated until the stopping criterion is met.  There is 
usually a certain probability that a mutation operator 
might be applied to the individuals; mutations can cause 
GA to escape from local solutions and can prevent 
premature convergence.  It is used mainly to increase the 
diversity of the population and to ensure that an 
extensive search will be performed. 
 
  Parts 
  1 1 2 2 3 4 4 5 5 5 5 6 6 
  a b a b a a b a b c d a b 
1     1   1 1     
2 1 1 1 1  1 1     1  
3  1      1 1 1 1   
4   1 1 1 1 1 1  1 1 1 1 
5 1  1   1   1  1   
Machines 
6 1 1 1 1   1      1  
Figure 1 Incidence matrix of sample problem 
 
We anticipate the synergy effect between the SA and 
the GA by presenting a hybrid algorithm employing the 
SA, together with the mutation operator from the GA to 
increase the quality and efficiency of solutions.  The 
solution procedure of the proposed algorithm consists of 
two stages:  initial solution construction and later 
solution improvements. 
 
3.1. Initial solutions 
 
A large number of similarity coefficients methods 
(SCM) have been proposed for grouping entities such as 
parts or machines in the simple CF problem, far fewer 
SCMs have been designed especially for the CF problem 
with alternate routings.  Kusiak and Cho’s method [4] is 
a part-based approach which uses a similarity coefficient 
defined between part routings, while Won and Kim’s 
study [14] defined a machine-based similarity coefficient 
Algorithm HSAM 
Step 1. Set ( )**** r,mE =∞, NC = 



U
M
. 
Step 2. Initialize counters, SA and other parameters: T0, 
Tf, α, L, p, counter_MC = 0, counter_BF = 0, 
and set Tk=T0. 
Step 3. Generate an initial solution of machine cells, m0.  
Let m = m0, m
* 
= m0.  On the base of initial 
solution m0, generate an initial solution of 
routing selection and assignment to machine 
cells, r0.  Let r = r0, r
* 
= r0. 
Step4. If fk TT ≥ and 0)r ,E(m
** ≠  , repeat Steps5 to 
6; otherwise, go to Step7. 
Step5. If counter_MC < L, repeat Steps5.1 to 5.6; 
otherwise, go to Step6.  
Step5.1. If counter_BF ≥ 1, apply mutation operator 
to m
*
 and generate a new solution of machine 
cells m’. 
Step 5.2. If counter_BF < 1, generate a new solution 
of machine cells m’ through neighborhood 
searching for m by performing the insertion -
move. 
Step 5.3. Read new solution of machine cells m’ from 
above steps and generate corresponding 
solution of routing selection and assignment 
to machine cells r’ using procedure in 
Section 3.1.2. 
Step5.4 Calculate )r,m(E)'r,'m(EE −=∆ .  
If 0E ≤∆ , m =m′ , 'rr = , counter_BF = 0, 
go to Step 5.6 ; otherwise, go to Step5.5. 
Step5.5. Generate )1,0(Uu∈ , if u)
T
E
exp(
k
>
−∆
, 
m =m′ , 'rr = , counter_BF = 0 ; otherwise, 
counter_BF = counter_BF + 1. 
Step 5.6. counter_MC = counter_MC + 1. 
Step 6. α×= kk TT , counter_MC = 0, counter_BF = 0. 
Step 7. If )r,m(E)r,m(E ****** <  then )r,m(E)r,m(E
****** = , 
*** mm = , *** r r =  , NC = NC+1, go to Step 
2; otherwise report the current 
)r,m(E **** ,
**m , 
**r , NC-1, and stop the 
algorithm. 
 
Initial temperature T0, final temperature Tf, cooling 
rate α, and the Markov chain length L of the SA 
procedure are set at 10, 1, 0.9, 2000, respectively.  The 
mutation probability p of each gene is set at 0.8 in this 
study. 
4. Result 
 
This section uses test problems from the literature to 
illustrate the proposed solution method HSAM for cell 
formation considering alternative process routings.  The 
computational results are compared with those of 
algorithms reported in the literature.  The proposed 
algorithm HSAM was coded in C and implemented on a 
Pentium III 933MHz personal computer with 256MB 
RAM.  Because of the stochastic features of SA, five 
independent runs were performed for each test instance.  
For each instance, Table 1 shows the problem source, 
size in terms of the number of machines, number of parts, 
and the number of alternative process routings, the 
minimum (L) and maximum (U) number of machines 
allowed in each cell, and the number of exceptional 
elements found.  The computational results were 
compared with the best results found in the literature, i.e., 
the P0 [3], MP1 [13], MP2 [13], and TSPA [16].  
According to Table 1, the best results obtained by 
HSAM are as favorable as the reported best results in all 
test problems.  It can also be observed that HSAM solves 
all the test problems in an extremely efficient manner.  
The run time consumed has never been longer than 0.134 
seconds. 
 
5. Conclusions 
 
A hybrid SA algorithm with a GA mutation operator 
for the cell formation problem considering alternative 
process routings, HSAM, has been proposed in this 
research.  It is anticipated that complementary strengths 
and synergy effects of both the GA and the SA can be 
realized to increase the quality and efficiency of 
solutions.  In the solution improvement stage of the 
proposed algorithm, the insertion-move has been utilized 
iteratively to guide the solution search.  In addition, 
several counters have been used and collocated with the 
insertion-move in the algorithm to speed up the solution 
search process and to escape from the local optima. 
Several preexisting test problems have been used to 
verify the proposed algorithm.  Computational results 
obtained from running nine test instances from the 
literature have shown that HSAM is capable of obtaining 
quick and favorable solutions.  More test problems from 
the open literature are to be adopted in the near future to 
fully confirm the efficiency and effectiveness of the 
proposed algorithm; meanwhile, further analyses are to 
be conducted to examine how the mechanisms designed 
in HSAM affect the solution results. 
