a given class may be changed in various 
classification applications. For example, the 
class ’National Taiwan University’ will have 
different training datasets when we are trying to 
classify the classes of ’National Taiwan 
University’ and ’National Chiao Tung University’, 
and the classes of ’National Taiwan University’ 
and ’Veterans General Hospital’. This is because 
the former ’National Taiwan University’ stands for 
a ’school’ but the latter stands for 
a ’hospital.’ 
 
In the first year, we plan to develop a Web-based 
unsupervised learning method, which doesn’t require 
manually-labelled training data. The method acquires 
training data from the Web in an automatic way to 
deal with the three problems. Several experiments 
will be conducted on the reuters-21578 dataset to 
evaluate the performance of the proposed method. 
In the second year, we plan to apply the Web-based 
learning method to the application of search-result 
clustering. Combined with query log mining, the 
search-result clustering problem is converted to the 
unsupervised search-result classification problem. A 
real search-result clustering system will be 
developed to demonstrate our ideas. 
英文關鍵詞： Unsupervised Classification, Web Mining, Search-
result Clustering 
 
  
 
 
摘要: 
 
本研究計畫以兩年為期,旨在發展「基於網路之非監督式分類技術」及其在「搜 尋結果分群」上的應
用。 
 
傳統的分類技術採用監督式學習方式,需要訓練資料訓練分類模型,以預測未 看過資料的可能類別,相
關的研究假設「每個類別已有適當標記好的訓練資料」,可 是,在真實的分類應用上,卻面臨三個問題:(1)
以人工的方式大量地標記所有訓練 資料類別,成本高且費時費力;(2)不一定所有實際的分類應用,都可
以容易取得足夠的訓練資料,如:分類垃圾電子郵件;(3)過去已標記好類別的訓練資料不一定仍然適用於
新的分類問題,如:分類「台大」和「清大」之訓練資料不同於分類「台大」和「榮總」,前者「台大」
屬於「學校」,後者屬於「醫院」。 
 
本計畫第一年預期建立一個「基於網路之非監督式分類」機制,不需任何人工 標記資料,採用網路探勘
技術,自動從網路蒐集訓練資料,負責解決上述三個問題, 所提方法將在標準分類測試集(reuters-21578)
上進行效能評估。 
 
本計畫第二年將應用第一年的成果於「搜尋結果分群」上,結合搜尋引擎使用 者查詢記錄之探勘技術,
將「搜尋結果分群」的問題轉變成「非監督式搜尋結果分 類」問題,並基於此技術開發一「網頁搜尋
結果分群」系統。 
 
關鍵字: 非監督式分類、網路探勘、訓練資料蒐集 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 1. Introduction 
Document classification has been extensively studied in the fields of data mining and 
machine learning. Conventionally, document classification is a supervised learning task [1, 2] 
in which adequately labeled documents should be given so that various classification models, 
i.e., classifiers, can be learned accordingly. However, such requirement for supervised text 
classification has its limitations in practice. First, the cost to manually label sufficient amount 
of training documents can be high. Secondly, the quality of labor works is suspicious, 
especially when one is unfamiliar with the topics of given classes. Thirdly, in certain 
applications, such as email spam filtering, prototypes for documents considered as spam 
might change over time, and the need to access the dynamic training corpora 
specifically-tailored for this kind of application emerges. Automatic methods for data 
acquisition, therefore, can be very important in real-world classification work and require 
further exploration. 
 
Previous works on automatic acquisition of training sets can be divided in two types. One of 
which focused on augmenting a small number of labeled training documents with a large pool 
of unlabeled documents. The key idea from these works is to train an initial classifier to label 
the unlabeled documents and uses the newly-labeled data to retrain the classifier iteratively. 
Although classifying unlabeled data is efficient, human effort is still involved in the 
beginning of the training process. 
 
The other type of work focused on collecting training data from the Web. As more data is 
being put on the Web every day, there is a great potential to exploit the Web and devise 
algorithms that automatically fetch effective training data for diverse topics. A major 
challenge for Web-based methods is the way to locate quality training data by sending 
effective queries, e.g., class names, to search engines. This type of works can be found in [3, 
4, 5, 6], which present an approach that assumes the search results initially returned from a 
class name are relevant to the class. Then the search results are treated as auto-labeled and 
additional associated terms with the class names are extracted from the labeled data. By 
sending the class names together with the associated terms, appropriate training documents 
can be retrieved automatically. Although generating queries is more convenient than 
manually collecting training data, the quality of the initial search results may not always be 
good especially when the given classes have multiple concepts. For example, the concepts of 
class “Apple” include company and fruit. Such a problem can be observed widely in various 
applications. 
 
The goal of the project is, given a set of concept classes, to automatically acquire training 
corpus based merely on the names of the given classes. Similar to our previous attempts, we 
To carefully examine the possibility of querying search engines for acquiring training data, 
we did an evaluation with different search engines, search-result types (snippet or document), 
and the number of search results. 5 CS-related classes were taken into account, including 
“Architecture”, “IR”, “Network”, “Programming”, and “Theory”. Each class name ci was 
sent to 3 search engines, including Google
1
, Yahoo!
2
, and Live Search
3
. Top 100 snippets 
were extracted as training data. We also gathered the research papers from the corresponding 
conferences to the 5 classes as the testing documents. Table 1 shows the performance of 
different search engines. Querying by the class names can achieve classification accuracy at a 
range from 0.35 to 0.56. More specifically, the three search engines perform well in 
“Programming” and “Theory” but poorly in the others on average. This arises from the fact 
that irrelevant documents may be located for those classes with ambiguous names. The way 
to query by the class names is not reliable due to the ambiguity of the class names (the first 
challenge). For example, the word “architecture” is widely used in CS, art and construction. 
From the results, we select Google as our backend search engine in this project. 
 
We further explore if the classification performance can be improved by downloading Web 
pages for training. The result is shown in Table 2. It reveals that Web pages might introduce 
more noises than snippets do, while the snippets summarize Web pages and capture the 
concepts of classes C by their context. Moreover, to download Web pages is time-consuming. 
Our methods, therefore, only retrieve snippets as the training source. 
Table 1. Accuracy of different search engines for classification of CS papers. 
Engine Architecture IR Network Programming Theory Avg. 
Google 0.075 0.382 0.899 0.723 0.762 0.568 
Yahoo! 0.112 0.022 0.094 0.863 0.665 0.351 
Live Search 0.269 0.006 0.083 0.784 0.815 0.391 
 
Intuitively, collecting more snippets or documents might enhance the performance. Table 3 
shows the results of changing training data sizes from 100 to 900. It could be found that 
classification accuracy does not increase obviously when the numbers of snippets and 
documents reach 200 and 300, respectively. This is because much relevant information can 
be retrieved in top ranked search results returned by the search engine. Noises are 
unavoidably included from longer lists. Hence, simply fetching a large amount of snippets or 
documents from a single search result cannot achieve satisfactory performance. Even if we 
expand the queries, i.e., the class names, using pseudo-relevance feedback (PRF) [7, 8, 9], the 
improvement is still minor since the generated expanded keywords cannot effectively 
discriminate different classes (our second challenge). The performance comparison between 
our methods and PRF will be given in Section 4.2. 
 
                                               
1 The Google search engine: http://www.google.com/search 
2 The Yahoo! search engine: http://search.yahoo.com/search 
3 The MSN Live search engine: http://search.live.com/ 
DMOZ by each class name ci and get a set of the nodes relevant to ci in the DMOZ directory. 
Suppose the set of the nodes is N(ci). The least common ancestors (LCA) of all of the nodes 
N(ci) (i=1…n) are viewed as the common concepts of C. The LCAs are the shared ancestors 
of N(ci) (i=1…n) located farthest from the roots of the DMOZ directory. For example, by 
searching class “Architecture”, we get the path “Arts: Architecture” and “Computers: 
Emulators: Intel x86 Architecture”. When search the class “Programming”, we find it has the 
same common concept of “Computers” (from “Computers: Programming”) with 
“Architecture”. Thus the concept “Computers” would be the common concepts between the 
two classes “Architecture” and “Programming”. 
 
Although Open Directory Project covers diverse topics and is very precise, sometimes we 
might get few or even no common concepts among C. The problem is serious for those 
classes not so popular such as names of person or organizations. For example, if we query the 
class “Cornell”, we only get 5 paths for the class, which contains few candidates of concepts 
to select and expand. To deal with this problem, we extract terms co-occurring with each 
class ci in Web pages, cluster the terms, and treat the representative term for each class as one 
of the common concepts. More specifically, all of the classes {c1, c2, … , cn}C are 
combined into one query “c1 + c2 + … + cn”, and then submitted to a search engine. After 
stemming and removing stopwords, we extract 20 high-frequency terms as candidates for 
common concepts from top 100 snippets returned from the search engine. To group these 
candidates, we send them separately to the search engine and generate corresponding feature 
vectors based on their top 100 snippets. Uni- and bi-grams are adopted as feature terms and 
TF-IDF is used to calculate feature weights. Next, a graph G = (V, E) is constructed, where v
V represents one candidate term, and eE is the cosine similarity between two feature 
vectors. Finally, we perform the star clustering algorithm [10] to choose the star centers, 
which are the common concepts among C. 
 
In this project, we adopt both of LCAs from DMOZ and co-occurring terms from Web pages 
as our common concepts among C. After common concepts generated, we can either use it to 
sample the Web and acquire good training data, or utilize them while discriminative concepts 
are generating. 
 
3.2 Expansion by Discriminative Concepts 
A discriminative concept is a concept that can help distinguish one certain concept class of 
interest (say, c) from all the classes (c'≠c). Such a concept contributes more relevance to one 
specific class than to the others. Unlike common concepts, which are shared by all the 
concept classes in C, any discriminative concept has a specific concept class to contribute 
relevance to, called the host. Let fc be the feature vector of concept class c. Let the similarity 
between any two concepts x and y be denoted asσ x,y = cos(fx, fy). An ideal discriminative 
concept k for concept c must satisfy all the following constraints: 
 
1. Concept k should exhibit high similarity to its host c. 
 This procedure can be repeated several times for each class so that the total number of 
discovered training instances can reach our expectation. However, certain changes on 
definitions and notations required by the adaptation needs to be clarified in advance. First, we 
can no longer expect that the feature vector for a concept class c remains the same throughout 
multiple iterations. In each iteration, when new training instances added to the collection, 
feature vectors for c actually changes. Next, the set of discriminative concepts 𝜅𝑐  discovered 
in each iteration would vary, as similarity measure suffers from the change as well. Certain 
modification in definitions should be taken care of so as to seamlessly fit the aforementioned 
criteria into the framework, while treating notations for a concept and for a concept class 
differently might clutter up the framework. For simplicity, no explicit treatment will be done 
to the equations in the following text. Readers should take caution that, when 
class-to-concept or class-to-class similarity computation is considered in discussions, the 
feature vector referred to a concept class is in fact derived from its current training set (rather 
than SRc). On the other hand, we will use 𝜅𝑐
(i)
 in place of plain 𝜅𝑐  in the rest of the work. 
 
Assume that the algorithm repeats t times. The initial training data for concept class c is 
denoted as Dc
(0)
, and in each iteration i [1,t], a new training set for c is produced and 
represented by Dc
(i)
. Consider a simple framework as follows. For all cC, we have: 
Dc
 0 = SRc                                                  
Dc
(i) = Dc
(i) ∪k∈κc (i) SRc∪k , i > 0 
where Dc
(i)
 and 𝜅𝑐
(i)
 is the set of training instances and the set of discovered discriminative 
concepts, respectively, for concept class c at iteration i. Eventually, the algorithm stops after 
the t-th iteration. The content of Dc
(t)
 will serve as the final training data for all concept class 
c. 
 
Since practically it is infeasible to populate the entire set of κc , several heuristics are 
involved in creation of the set: 1) We look for terms with high discrimination power 
(specifically, unigram and bigrams) in the context of D
(i-1)
 using commonly-used 
information-theoretic measures, such as information gain and inverse document-frequency. 
These candidates are then examined with the decision criteria and disqualified ones are 
discarded immediately; 2) candidates that survived the test are ranked accordingly by the 
score function, which is a simple rewrite of the criteria that indicates the average degree of 
deviation for the candidate k: 
1
 c − 1
  
σc,k
σc ′,k
− δ(1 − σc,c ′) 
c ′≠c
 
The summands will not cancel out since the score is calculated for the candidates satisfying 
the criteria. Generally, testing all the candidate terms may result in an extremely inefficient 
procedure. In practice, we set up a strict threshold on the information gain and idf in light of 
reducing the number of candidates. We test only the top m concepts selected by the filter in 
the end. The value m is set to be 15 throughout the work. 
 
 
4.2 Text Classification 
Table 5 compares the classification accuracy between different methods. For each class, the 
baseline method is to use only the class name as query, submit to the search engine, and 
collect snippets as training data. The method from query expansion (QE) is to use 
pseudo-relevance feedback (PRF) for each class, where the terms with high TF-IDF values in 
the snippets are selected as expansion terms which used for acquiring training data. LC is the 
method implemented based on LiveClassifier [3]. With the concept hierarchy of each class, 
all the concepts are used to combine with the class name as a query, then submit to the search 
engine and collect the snippets as training data. 
 
From Table 5, we find that merely sending class names as queries cannot retrieve quality 
training data. It only achieves the accuracy at 0.57 on average. Even if we expand the class 
names with PRF (the method of QE), the accuracy cannot be improved by QE in this case. 
This is because PRF is a general solution to the keyword mismatching problem and thus 
would not be well applied to our classification problem. LC manually labels some concepts 
of the class names, e.g., the concept of “Architecture” is about computer architecture, so that 
more relevant training data to original classes can be fetched. LC gets higher accuracy at 
about 0.71. But such concepts labeled by people are often few. Our CM method can discover 
more useful common concepts, as shown in Table 6, where keywords “computers”, 
“conference”, and “proceeding” are all helpful in searching relevant data for each class when 
combined with original class name. CM, on the other hand, might introduce noisy keywords 
often co-occurring with the class names such as keyword “web”. Due to the assistance of 
more common concepts, we collect more quality training data by CM. The accuracy for CM 
comes to 0.76, which is much better than LC and QE. 
 
In addition, we observe that the performance for class “Network” is originally high in 
baseline method. To realize what makes the result, we check the process for getting training 
data in advance. Except for the accurate semantic for the term “Network”, we discover that 
the snippets from search engine are suitable and with good quality for the class “Network”. 
This is related to the characteristic of the Web. To our experience, the documents ranked from 
search engines might be mostly relevant to the fields about computer or network. 
 
The results of Web pages classifications, as shown in Table 7, are similar to previous 
experimental results except the average accuracy obtained here is lower in general due to the 
noisy Web pages that are unreliable for testing. Moreover, sometimes the concepts derived 
from the Web are not effective in classification (even they are correct). For example, from the 
Web, DM learns two discriminative concepts of “ut” and “milwaukee” for classes “Texas” 
and “Wisconsin”, respectively. But their impacts on classifying our testing data are futile. 
Although there are some noises in the Web page dataset and the concepts found are correct 
but less useful, CM+DM does an improvement while training by the snippets from these 
concepts, and surpasses the performance of LiveClassifier (LC). By our methods, the quality 
training data are fetched and the classifier learns better, thus become more robust for text 
classification. 
Both datasets are divided into training and testing data. We combine the training data 
collected from the Web and sample α  % of the training data as a new training corpus. For 
comparison, we also train a classifier with just those α  % of the labeled data only. The α  
value varies from 1 to 100. α  =100 means to use all the labeled data from original divided 
training set, thus become a supervised learning. 5-fold cross validation is used to evaluate the 
classification accuracy. 
 
Figure 1 and 2 show the two experimental results, respectively. We find that the Web corpus 
improves the classifier’s accuracy more than 6% when α is small for both datasets. In other 
words, when the labeled data is insufficient or even with no quality, sampling training data 
from the Web could substantially complements the manually-labeled data. The performance 
of both classifiers increases when more labeled data are included. However, when more and 
more manually-labeled data is given, the improvement by the Web becomes less obvious or 
even slightly worse. This is because once we add more data from the Web, we also introduce 
the noises such that the accuracy glows slowly when the quality documents are enough. In CS 
papers classification, the performance reaches as higher as all training data used when 50% 
labeled data is added. For Web pages classification, we have the same performance as 
supervised learning when only use 20% labeled data. The performance even exceeds the 
result from supervised learning when 40% labeled data is joined. It explains more quality 
data from the Web is helpful in classification. This result also shows that using all the labeled 
data is not always as good as expected because some of the labeled data are not in good 
quality. 
  
Fig. 1. Accuracy of training data from the Web plus % 
labeled data for CS papers classification. 
Fig. 2. Accuracy of training data from the Web plus % 
labeled data for Web pages classification. 
This experiment shows us that the training data from the Web does help to improve the text 
classification. Moreover, we could use a very few number of labeled data, plus the Web 
corpus our methods collect, to train a desirable classifier. The Web helps the classifiers to 
learn the unseen concepts which do not exist due to the insufficiency or the unreliable quality 
of labeled data. It also tells us that the suitable training data might change by time, thus the 
original labeled data performs worse in new classification tasks. From the result, we believe 
that our methods can benefit the task of text classification, and other advanced applications. 
 
80
82
84
86
88
90
92
94
96
98
100
1% 3% 5% 7% 9% 20% 40% 60% 80% 100%
web+labeled pure labeled α=100
55
60
65
70
75
80
85
90
1% 3% 5% 7% 9% 20% 40% 60% 80% 100%
web+labeled pure labeled α=100
quality training data from the Web. Without labeled data and associated terms given by 
human, our methods perform well and classify documents accurately for the text 
classification problem. 
 
6. Discussions and Conclusions 
In this project, we propose two methods to automatically sample the Web and find quality 
training data for text classification. We first examine the effects of different search engines, 
retrieved data types, and sizes of retrieved data. Moreover, from the subset of documents and 
the method by associated terms, we know that sampling the Web for concepts of classes and 
fetching training data can substantially improve the performance of classification. It might be 
hard to distinguish the classes with the ambiguity and close relationship without labeled data. 
By the discovering of common concepts and discriminative concepts, the ambiguity of class 
names is eliminated and more relevant concepts are utilized for sampling suitable and quality 
training data from the Web. Several experiments conducted in this work show that our 
methods are useful and robust for classifying documents and Web pages. Furthermore, our 
experiments show that the training data sampled from the Web helps the conventional 
supervised classification, which need quality and labeled data. The result demonstrates that 
the quality of labeled data might not always desirable due to the lack of useful key concepts, 
and we can provide proper training data from the Web to further improve the results of text 
classification. In additions, two dataset with different characteristics are used for our 
experiments and the analysis from different dataset is carefully conducted in this project. 
Compared to previous works, the advantage of our methods is the fully automatic processes 
during the concepts expansion and the training data collecting. Our methods are independent 
of classification models, thus existing models can be incorporated with the proposed 
methods. 
 
However, our work has some limitations. The classes we choose are related to each other. In 
other words, the performance would be better while the classes are in the same level in the 
hierarchy of topic classes. With the relationships between the classes, our methods can 
perform the context-aware technique among the classes to acquire more relevant documents, 
making the classifiers robust. To go a step further, there are more challenges to choose the 
quality documents in the training corpus sampled from the Web. We can also sample good 
training documents while a pool of unlabeled data is provided. We believe that these 
challenges are worth studied and would be the research directions in our future work. 
References 
[1] Y. Yang and X. Liu, “A re-examination of text categorization methods,” in Proceedings of the 22nd 
Annual International ACM SIGIR conference, 1999, pp. 42–49. 
[2] Y. Yang, “An evaluation of statistical approaches to text categorization,” Information Retrieval, 
vol. 1, pp. 69–90, 1999. 
[3] C.-C. Huang, S.-L. Chuang, and L.-F. Chien, “Liveclassifier: Creating hierarchical text classifier 
through web corpora,” in World Wide Web Conference, 2004. 
  
  
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500字為限） 
 
傳統的分類技術採用監督式學習方式，在真實的分類應用上，以人工的方式大量地標記
所有訓練資料類別，成本高且費時費力。本計畫利用採用網路探勘技術，自動從網路蒐集訓
練資料，不需任何人工標記資料，自動建立一個「基於網路之非監督式文件分類」機制，並
探討如何結合少數人工標記的資料，增加分類效能的準確度。計畫成果適用於許多實際的分
類應用，例如：協助搜尋引擎取得足夠的訓練資料, 進行網頁搜尋結果的自動分類。 
部份相關研究成果已發表於資訊檢索領域(CIKM)之代表性國際會議及(ROCLING)國內
會議，及數位圖書館領域(IJDLS)相關的國際期刊。 
已發表之相關論文如下： 
 
Ting-Chu Lin and Pu-Jen Cheng. Query Sampling for Learning Data Fusion. In Proc. of ACM 
International Conference on Information and Knowledge Management (CIKM), 2011. 
(Acceptance rate: 15%) 
Wei-Yen Day, Chun-Yi Chi, Ruey-Cheng Chen, and Pu-Jen Cheng. Sampling the Web as 
Training Data for Text Classification. International Journal of Digital Library Systems (IJDLS), 
1:4, 2010. 
Jen-Wei Kuo, Pu-Jen Cheng, and Hsin-Min Wang. Learning to Rank from Bayesian Decision 
Inference. In Proc. of ACM International Conference on Information and Knowledge 
Management (CIKM), 2009. (Acceptance rate: 14.5%) 
Wei-Yen Day, Chun-Yi Chi, Ruey-Cheng Chen, Pu-Jen Cheng, and Pei-Sen Liu. Web Mining 
for Unsupervised Classification. In Proc. of Conference on Computational Linguistics and 
Speech Processing (ROCLING), 2009. 
 
無研發成果推廣資料 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
兩篇 CIKM 論文, CIKM 為資訊檢索領域非常具有代表性的國際會議, 平均接受
率僅有 15% 
 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
