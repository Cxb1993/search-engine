  1
中文摘要 
本計畫之目的為發展嵌入式(Embedded)
網路通訊裝置之網路核心系統與通訊協定行
為的整合測試、分析與評量工具。嵌入式網
路通訊裝置的通訊行為中，除了基本的網路
存取 (Access)能力，我們也關心傳輸延遲
(Delay)、反應時間(Response Time)以及封包
遺漏(Packet Loss)等效能。目前網路封包擷取
工具(Packet Sniffer)，僅能夠協助分析網路通
訊裝置外顯的(External)傳輸延遲、反應時間
與封包遺漏，並無法協助分析網路通訊裝置
核心系統(Kernel)內部的(Internal)網路協定
堆 壘 (Protocol Stack) 核 心 函 式 (Kernel 
Functions)之處理延遲以及所造成的封包遺
漏。本計畫之終極目標即針對嵌入式網路通
訊裝置，發展核心系統與網路協定行為的整
合分析與評比之技術與工具，以協助嵌入式
裝置開發者診斷通訊行為的缺點和瓶頸，縮
短研發週期。 
本年度計畫是以追蹤及記錄核心系統內
部之通訊協定堆疊處理封包的程序與延遲。
目前我們已研發完成核心函式追蹤的補釘嵌
入(Patching)技術，並且開發完成一套核心函
式追蹤記錄的系統雛型。為了降低核心系統
受到本系統的影響程度，我們利用暫存機制
以減少追蹤記錄程序對核心函式本身執行的
影響。實測結果顯示，本核心函式追蹤記錄
系統雛型，不僅可成功紀錄核心函式處理網
路封包的程序與時間，對於核心系統本身的
執行時間之影響微乎其微。 
 
關鍵字：嵌入式系統、可攜裝置、網路通訊、
Linux、網路通訊協定堆疊、開放原始碼 
 
報告內容 
一、 前言 
 
近幾年來隨著電腦科技的進步與網際網
路的興起，資訊產品的研發技術不斷地進步
與創新，使得多種規格的無線網路(例如
GPRS、WLAN、3G 之 CDMA2000、WiMAX
等)及網路通訊裝置應運而生。此外，為了減
少網路通訊裝置的體積、重量與成本，嵌入
式系統(Embedded Systems)技術則扮演著極
重要的角色，像是今日隨處可見為因應不同
需求的可攜裝置(Portable Device)，例如個人
數位助理(Personal Digital Assistant, PDA)、行
動電話(Mobile Phone)等，都是利用嵌入式系
統來實現這些裝置，另有一類網路通訊裝置
為了穩定性及安全性考量，也常以嵌入式系
統技術實現，例如行動路由器(Mobile Router)
等。此外，由於各式應用的嵌入式網路通訊
裝置需求不斷增加，因而驅使業界及學術界
皆投入大量研究人力參與新產品的開發。嵌
入式網路通訊裝置的通訊行為，除了基本的
網路存取能力外，更包括有傳輸延遲、反應
時間以及封包遺漏等相關研究議題，所以如
何縮短各類的延遲和反應時間以及減少封包
遺漏是主要研究重點。 
 
二、 研究目的 
 
本計畫之目的是在 Linux 作業系統的網
路通訊協定堆疊上，設計與實作一套高效率
之指令嵌入平台，讓使用者發展嵌入式網路
通訊裝置之網路核心系統與通訊協定行為的
整合測試、分析工具。 
一個嵌入式網路通訊裝置的通訊協定行
為，除了基本的網路存取能力外，我們經常
關心的是通訊協定行為中的傳輸延遲、反應
時間以及封包遺漏等效能指標。傳輸延遲、
反應時間與封包遺漏會受到使用的網路類型、
作業系統(Operating Systems)及通訊協定等
種種因素的影響而有所變化[1]。 
尤其當嵌入式網路通訊裝置在網路上漫
遊(Roaming)期間進行與各個無線基台間換
手 (Handover)時，從應用程式 (Application 
Program)到網路協定，乃至作業系統內網路
相關的核心行為，都會因應換手而有所動作，
所以也會造成傳輸延遲與封包遺漏。因此有
必要開發一套合適的輔助工具，協助嵌入式
網路通訊裝置的開發者正確界定造成傳輸延
遲與封包遺漏的原因，進而分析問題及改善
缺失。 
目前，對於網路通訊裝置核心系統中的
網路協定處理函式的延遲以及核心事件
(Kernel Event)的發生，沒有一套完整的工具
能夠協助開發者了解傳輸延遲、反應時間以
  3
(2) 記錄(Logging) 
配合核心補釘，並選擇 printk 的預設 log 
level(DEFAULT_MESSAGE_LOGLEVEL)，
會將所有 printk 的輸出訊息全部導向
/var/log/message 中[4]，然而，由於原始作業
系統也會將系統除錯及重要訊息的 kernel 
log 輸出到這個檔案，所以在發展此工具的
時候，還必須針對 log 檔案另外執行過濾
(filtering)的動作。 
(3) 分析(Analysis) 
主要是針對核心在處理網路封包時傳送
及接收的過程做分析，所以所經過核心網路
通訊協定堆疊的重要函式都會被記錄下來；
此外，為了瞭解網路在傳送及接收經過網路
各層所花費的時間，所以在每個函式被執行
到的時間點也都會被精準地記錄。 
而 Naive Approach 實際上會面臨許多缺
失而導致系統實作的不方便性以及效能不佳
等問題。如在完成核心補釘時，在每次修改
完畢之後都必須要以下動作：(1)重新編譯核
心、(2)安裝新核心於 bootloader、(3)最後再
重新開機啟動新的核心。 
假設我們想要修改某個核心函式的輸出
資訊，抑或是想要新增對某個核心函式的監
看，我們就必須重複這個循環動作，才能使
用修改完畢的核心來執行我們想要的分析動
作。一旦在核心補釘確定之後，就很難在執
行工具時動態去調整想要監看的內容。而且
因為 printk 本身必須牽扯到系統輸出入
(system I/O)，使用 printk 來輸出想要的資訊
對 系 統 本 身 而 言 是 個 嚴 重 的 負 擔
(overhead)。 
在了解 Naive Approach 之後，接著介紹
本計畫所採取的方法來改進之。本計畫所提
出的系統架構主要分做四大部分，包括了：
(1) Linux Kernel Patching (2) Instrument 
Modules (3) Instrument Configuration 
Interface (4) Log File Generator and Analyzer。
主要將針對於動態的指令嵌入功能與核心效
能上改善 Naive approach 所遇到的種種問題。
圖表 3 為本計畫所發展的追蹤工具之系統架
構圖，圖中主要有兩大部分：(1)淺藍色部分
為原始作業系統所擁有的部分，包括中間區
域的作業系統(Operating System)以及其中的
網路通訊協定堆疊(包括 Transport, Network, 
MAC layer)之外，還有下層對應的網路介面
(Network Interface，包括 Ethernet, WIFI, 
WiMAX)及驅動程式(Driver)，以及上層的網
路應用程式(Network applications，包括 FTP, 
HTTP, SIP 通訊協定)；(2)斜線的深色部分為
本計畫新增的主要元件，包括分布在核心網
路堆疊裡的虛線區域，此為核心補釘 Linux 
Kernel Patching 之程式碼，而在作業系統內
部的左方還有 Instrument Modules，此部分是
用來控制核心補釘的主要模組，使用 Linux 
Kernel Module 所寫成[5][6]，主要功能是用
來輸出想要記錄的重要資訊。此外，在作業
系統之上還有兩個主要元件，分別是
Instrument Configuration Interface 及 Log File 
Generator and Analyzer，前者是用來設定
Instrument Modules 所要監看的核心函式，後
者是負責輸出 log 檔案以及分析 log 檔案的
主要元件。
 
圖表 3、系統架構圖 
  5
一個是 Instrument Configuration Interface，其
實就是針對 Instrument Modules 所提到的設
定檔案做設定的動作。本元件提供一個使用
者操作介面來對這個設定檔案做設定，而
Instrument Modules 將會再針對這個設定檔
案來選取需要監看的核心網路函式，如圖表
6。 
 
圖表 6、Instrument Configuration Interface 示意圖 
 
另一個元件則是 Log File Generator and 
Analyzer，由於本系統所用來記錄 log 檔案的
方式是使用直接記憶體的 proc File System
來處理輸出資訊，好處是可以避免使用
printk 的方式而導致過度利用系統輸出入
(System I/O)所造成的額外負擔。然而，由於
使用 proc File System 所記錄的所有資訊都
放在記憶體中，並沒有實際以檔案的方式存
在檔案系統中，所以本系統在使用完此追蹤
工具之後，會將 Instrument Modules 儲存在
proc File System 中的資訊再轉存成一個 log
檔案放在真實的檔案系統中，負責此工作的
元件便是 Log File Generator。 
Log File Generator 的另一個好處是所有
的工作都是在｢離線(Off-line)｣的狀態下進行，
亦即是說對所有的核心網路函式記錄的資訊
並不會馬上進行處理，而是先存在記憶體中，
等到關閉了監看功能之後再執行 Log File 
Generator 將所有的資訊存成 log 檔案。如此
一來，所有監看核心網路函式的動作都可以
很精準地被記錄下來，而不會受到 Log File 
Generator 一邊記錄一邊使用系統輸出入的
干擾，對於監看網路通訊協定堆疊所需的高
精確度而言是非常重要的。 
而 Log File Analyzer 在本計畫中僅將此
log 檔案以一個較容易閱讀的方式將結果呈
現出來，讓使用者可以很清楚地看出每一個
封包在此網路通訊協定堆疊中的流向，以及
經過每個重要函式的時間點，藉以了解整個
網路行為並對網路延遲的時間做一些假想猜
測。然而，智慧型的診斷功能並不在本計畫
的討論之中，將列為未來工作中之項目。 
 
四、 結果與討論 
 
此部分將針對以下三個實驗做介紹，分
別是(1)Kernel Patching 的 Linux 核心之網路
效能測試，及(2)procfs 與 printk 輸出 log 資
訊之比較(3)FTP 通訊協定實際測試。 
 
(1) Kernel Patching 的 Linux 核心之網路效能
測試 
本實驗主要是在測量 Linux Kernel 進行
完 Kernel Patching 的動作而尚未開啟
Instrument Modules 功能時，針對新的 Linux 
Kernel 之網路功能進行測試，所以本實驗將
會比較做完 Kernel Patching 後的 Linux 
Kernel 以及原始的 Linux Kernel 在不同的網
路通訊協定下的網路功能，在此將以傳輸速
率與傳輸時間來做比對。 
此實驗將分作三個通訊協定來做測試，
分別是 FTP、HTTP 及 ICMP，希望得到的結
果皆是進行完 Kernel Patching 的 Linux 核心
在進行三種不同協定的網路傳輸時都能與原
始的 Linux 核心一樣順暢。 
 
 
圖表 7、Kernel Patching 網路效能之傳輸速率 
 
圖表 7 為在不同通訊協定下測量 Kernel 
Patching 前後網路效能之傳輸速率比較， 
FTP 以及 HTTP 通訊協定為多次下載同一個
檔案之平均值。而 ICMP 通訊協定是使用
ping程式測量遠端機器(在此以 tw.yahoo.com
為測量機器)之 RTT(Round Trip Time)來回反
578.2
598.6
586.8
609.4
560
565
570
575
580
585
590
595
600
605
610
615
FTP HTTP
KB
/S
patched unpatched
  7
 
圖表 11、Test Case : FTP- Transmiting 
 
五、 結論 
 
隨著網路與電腦科技的進步，嵌入式網
路通訊裝置已經逐漸普遍於市面上，然而，
目前對於嵌入式網路通訊裝置的相關效能評
估工具仍不多，使得我們有必要開發一套合
適的輔助工具，協助嵌入式網路通訊裝置的
開發者正確界定造成延遲與封包遺漏的原
因。 
本計畫所提出｢嵌入式網路通訊裝置核
心系統與通訊行為分析與評量工具｣便是希
望可以讓開發者能夠針對 Linux 網路通訊協
定堆疊有更深入的了解，並經由相關通訊協
定的測試更了解核心內部的運作；此外，藉
由這些測試的資料記錄，可以用來分析核心
內部網路各層的處理時間，進一步分析內部
的封包傳輸及接收時間延遲。 
 
未來工作與研究 
我們的終極目標是希望可以發展一套整
合核心系統與通訊行為的網路通訊裝置的評
比工具，主要的整合內容重點有三：(1)核心
內部通訊協定堆疊之分析(2)核心內部網路
事件通知機制(3)封包擷取工具。而本計畫已
經完成第一部分，綜合(1)、(2)兩部分將完成
嵌入式網路通訊裝置的內部(Internal)分析，
而(3)的部分將整合現有的網路封包分析工
具來完成外顯的(External)分析。因此，未來
工作的首要目標便是能夠整合此三大方向，
將現有的工具及文獻做整合，完成一套完整
的整合分析工具。 
 
參考文獻 
[1]  Chuanxiong Guo and Shaoren Zheng, 
“Analysis and Evaluation of the TCP/IP 
Protocol Stack of Linux,” International 
Conference on Communication 
Technology Proceedings, vol 1, pp. 
444 –453, Aug. 2000. 
[2]  Wikipedia – “GNU,” Available from: 
http://en.wikipedia.org/wiki/GNU 
[3]  Ying-Dar Lin, and Ping-Tsai Tsai, 
“Trace Linux TCP/IP kernel – Using 
remote debugging.” http://speed.cis. 
nctu.edu.tw/~ydlin/miscpub/remote_deb
ug.pdf 
[4]  Peter Jay Salzman, Michael Burian, and 
Ori Pomerantz, “The Linux Kernel 
Module Programming Guide,” Dec. 
2005. 
[5]  Bryan Henderson, “Linux Loadable 
Kernel Module HOWTO.” http://www. 
tldp.org/HOWTO/Module-HOWTO/ 
[6]  Jongmoo Choi, “Kernel aware module 
verification for robust reconfigurable 
operating system,” Journal of 
Information Science and Engineering, 
Vol. 23 No. 5, pp. 1339-1347, Sep. 2007. 
[7]  Moore, R. J., “Dynamic probes and 
generalized kernel hooks interface for 
Linux,” Proceedings of the fourth annual 
Linux showcase and conference. Atlanta, 
GA, USA, pp. 139-145, 2000. 
[8]  Nicolas Loriant and Jean-Marc 
MenaudGeneralized, “Dynamic Probes 
for the Linux Kernel and Applications 
  9
附錄 A、範例程式碼 
 
Table A-1 顯示在 Linux 下，程式開發人員如何針對 Linux 網路通訊協定堆疊中每個重要
的函式都加入探針，之後交給 Instrument Modules 來執行主要功能。以 ip_finish_output 函式(位
於 net/ipv4/ip_output.c)作為範例說明，而其他函式使用安插探針的方式也相同。一開始先定
義一個函式指標變數，即 ip_finish_output_Func_Start，當核心一但執行到這個函式的時候，
便會先檢查此函式指標值是否為零，即是否有指向某個函數(定義在 Instrument Modules 中)。
若沒有定義此函數指標時便會直接跳過此部分，而繼續執行原始網路通訊堆疊的功能；而倘
若 Instrument Modules有對此函數指標作設定的話，便會用此函式指標呼叫 Instrument Modules
裡的對應函數。 
 
 
Table A-1、顯示在 Linux 下，如何對網路通訊協定堆疊中的函式加入探針 
 
 
 
 
 
 
 
 
 
 
 
  
