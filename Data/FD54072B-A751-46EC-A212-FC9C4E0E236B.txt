the correctness of software products. Non-
deterministic behavior is the major difficulty for 
testing concurrent programs. The reachability testing 
is proven to be a good scheme for testing this kind 
of concurrent programs. Researchers applied the 
reachability testing to a variety of synchronization 
models. Nevertheless, for concurrent programs with 
busy-waiting loops, the current model has some 
defects which make the reachability testing 
infeasible.  
 
In this project, we will extend the reachability 
testing with the concepts of DTDcp (dynamic 
termination decision) and DETcp (dynamic effective 
testing) to form a state-covered and transition-
covered testing scheme for concurrent system. 
Otherwise, we also proposed the solutions of some 
special issues for embedded system such as power 
consuming and WCET (worst-case execution time) 
estimation based on the viewpoint of FSM. Finally, to 
complete the toolset of multi-core embedded software 
testing, we will implement all tools and libraries 
based on Android platform and cloud environment. 
 
英文關鍵詞： Android, concurrent testing 
 
 1 
1. 中文摘要 
近年來，隨著雲端計算快速發展，許多功能方面的需求日益繁雜，已逐漸成為
個人生活中的一部分，另一方面嵌入式平台為主的消費型電子產品領域，利用
多個異質核心、強調多功能整合雲端的嵌入式平台已成為市面上的趨勢。然而，
當整體的系統架構日趨複雜的同時，確保軟體品質的工作也隨之困難。SQA 
(Software Quality Assurance)一直是開發過程中，確保軟體品質重要的一環；而
軟體驗證中，藉由動態測試的方式更是能有效而準確地來確保軟體產品的正確
性。並行程式的非決定性行為是造成測試時主要的困難所在，在針對非決定性
行為的測試研究方面，可達性測試法已證實具有完整測試的能力、效能卓著，
並廣泛被研究以符合各種存取模式；但在基礎架構上，當待測程式具忙碌等待
迴圈時，可達性測試法尚無可行的解決方案。 
 
在此子計畫中，我們將基於可達性測試法，並進一步利用 DTDcp (Dynamic 
termination decision) 與 DETcp 的概念，建構一兼具有 state-covered 及
transition-covered 特性的並行軟體測試架構，用以針對多核心嵌入式系統的軟體
搭配雲端環境進行測試。除此之外，面對嵌入式系統關注的耗電量與最差執行
時間 (WECT)估算等議題，計畫中亦從程式實際執行時的有限狀態機的角度，
提出更為精確的計算方式。在實作方面，計畫將針對 Android 平台配合雲端環
境，開發一系列的工具組及函式庫，使得多核心嵌入式系統的軟體測試得以有
效廣泛地進行。 
 
關鍵詞：Dynamic testing, Reachability testing, Dynamic effective testing, 
Concurrent testing, Android, Cloud computing 
 
Abstract 
With the development of cloud computing, it plays very important role in our life. On 
the other hand, embedded platform based consumer electronics products and their 
functional requirements are growth rapidly in recent years. Multi- functional 
integration with embedded platform and cloud computing has become the market 
trend, and the systems for single special purpose have been unable to meet market 
demand. However, to ensure the quality of software is also difficult when the overall 
system architecture become increasingly complex in the meanwhile. SQA (Software 
Quality Assurance) has been an important development process to ensure software 
 3 
高效能以及高便利性的應用程式將是重要的關鍵。 
 
3. 研究目的 
不同於以往單一核心處理器的思維，如何將工作分配到各個處理器甚至雲端上，
且隨著整體的系統架構日趨複雜的同時，確保軟體品質的工作也隨之困難。SQA 
(Software Quality Assurance)一直是開發過程中，確保軟體品質重要的一環；而
軟體驗證中，藉由動態測試的方式更是能有效而準確地來確保軟體產品的正確
性。在使用多核心或雲端並行處理的過程中，首要面對的即是各個程式的運作
將會相互競爭及共享資源及資料，形成非決定性行為(non-deterministic behavior)。
一般所謂非決定行為指的是：當程式重複執行時，即使給定相同的輸入值，程
式因為並行協同工作的緣故，可能產生不同的執行結果。這與單一核心系統執
行循序程式(sequential program)時的情形是大不相同的。 
 
由非決定性[1,2]衍生的可能問題[3,4]是：(a) 並行程式中某次執行結果的正確，
並無法保證其後的執行都能得到正確的結果；(b) 甚至是當程式開發人員針對
某個程式錯誤進行修正後，測試中重複多次執行都得到正確的結果，卻仍然無
法確認程式的錯誤已確實被修正。然而，對於軟體測試工作人員而言，儘可能
找出軟體中潛在的錯誤一直是努力的目標；換言之，如何處理並行程式的非決
定性行為，並妥善完成測試是使用多核心、並行架構必須面對的課題。 
 
在嘗試處理並行程式的非決定性行為時，首先面對的是：並行程式中不同的程
序(processes)可能會存取相同的物件，這些存取動作彼此間會相互競爭特定的順
序，即 race condition，是造成非決定性行為影響程式執行結果的主因。為了或
得特定的執行結果，避免非決定性行為所帶來的執行錯誤，程式撰寫人員往往
被要求妥善地使用某些系統呼叫 (synchronization primitives)，例如：signal, 
semaphore, monitor, lock 等[5,6]，來達到同步這些存取動作的目的，最終讓這些
動作能按照軟體系統設計時要求的順序執行；因此這些相互競爭的動作被稱為
synchronization events。就軟體開發人員的角度而言，面對目前複雜的系統架構，
適當地設計與使用同步用的系統呼叫並不是容易的事，研究並發展完整的測試
方法，才是確保正確地使用系統呼叫與並行程式正確性的最佳手段。 
 
爲了解決並行程式執行衍生的非決定性行為，將執行過程中所有 synchronization 
events 的執行順序記錄下來、作為當錯誤產生時除錯的依據，是一種常見的方
式。根據前面所提到：程式執行的結果影響自 synchronization events 間特定的
執行順序；因此如果想要在反覆的執行過程中得到相同的執行結果，藉由記錄
 5 
Reachability testing 是一種用來測試並行程式非決定性行為的方法，由本計畫主
持人黃冠寰博士於 1995 年的 International Journal of Software Engineering and 
Knowledge Engineering (IJSEKE’95)首先提出。在架構上 reachability testing 揉合
了 deterministic testing 與 nondeterministic testing 兩者的概念；透過 reachability 
testing，系統開發人員可確認並行程式的正確性與否[9,14]。由於 reachability 
testing 創新的概念與完整測試並行程式的能力，在 Parallel and Distributed 
Computing Handbook 一書中的 Chapter 33.3.4 就專門對此一技術作探討；另外美
國許多知名大學與研究所課程中，也將 reachability testing 列為課程內容.目前亦
有數個知名大學的研究團隊都分別帶領研究群持續從事 reachability testing 的相
關研究，如：George Mason University的Richard Carver教授及University of Texas
的 Yu Lei 教授等。 
 
Reachability testing 整個測試過程如圖一可粗分成兩個階段：monitor phase 與
replay phase。在 monitor phase 中，受測程式的執行如同 nondeterministic testing
一般，是完全不受控制的，系統的排程可自由地組合任何可能 SYN-sequence
並完成執行。對於 reachability testing 整體架構而言，monitor phase 所需要作的
僅是將受測程式執行的 SYN-sequence 作確實記錄，供作後續的分析與執行需要。
至於 replay phase，顧名思義其目的在於重現前次的執行，應用 deterministic 
testing 的概念，受測程式在執行時需指定 synchronization events 的 partially order
關係，藉由 reachability testing 提供的協定，將所有 synchronization events 按指
定的次序完成執行。 
 
圖一：Reachability testing 架構圖 
很明顯地，單純地實作 monitor phase 與 replay phase 並不能解決 nondeterministic 
testing與 deterministic testing的不足，reachability testing因此導入了 race analyzer
的機制，將 monitor phase 與 replay phase 作完美的結合。Race analyzer 的主要工
作在於從 monitor phase 記錄的 SYN-sequence 中，分析出其他不同於此
SYN-sequence 但又可能出現的 partially order 關係，稱作 race variant。換言之，
Execution P with input X
Race analyzer
(To derive race-variants)
Prefix-based replay of R
…………
A SYN-sequence S
Queue to store race variants
Derived race variants
Remove a race variant R from 
queue
Obtain a SYN-sequence
 7 
2.  由於之前於 reachability testing 及 DET 的技術進行 race analysis 時
所用的分析技術必頇配合 SYN-sequence 格式，所以我們必頇研究新的 
race analysis 技術。預計根據於 15 所提出的 race graph 來加以改良。 
3.  目前許多 reachability testing 及 DET 的技術需要將整個測詴過程放在
同一平台上執行，對於嵌入式平台而言，受至於硬體資源的精簡，集中
式的測詴架構在效率上將大打折扣，將實際執行與後續分析分開於不同
平台上，採取主從式、分散式的測詴架構─僅將必要的執行過程放在嵌
入式平台，將複雜的後續分析(race analysis)交由更具硬體效能的桌上式
電腦或 server 完成。主從式、分散式架構將是測詴嵌入式系統必然的
趨勢，研究目的將完成具備以下特色的測詴架構： 
 對於單一個嵌入式裝置而言，每次執行只針對特定的 
SYN-sequence 進行測詴，多個 SYN-sequences 將可分散至不
同的嵌入式裝置執行，加快測詴時效。 
 架 構 中 將 設 置 一 中  控 的 server ， 蒐 集 各 個 嵌 
入 式 裝 置 測 詴 產 生 的 SYN-sequences，加以分析並引
導後續測詴產生其他的 SYN-sequences，利用主從式解決嵌入
式裝置硬體資源缺乏的問題。 
 
在 cloud computing 的 concurrent testing 方面我們計畫依以下的進行步驟： 
 Study 各式 cloud computing 所使用的 synchronization model，此部分
預計將花費許多時間及研究能量。 
 設計各式  cloud computing 所使用的  synchronization model 所需的 
SYN-sequence 格式，並據此發展所需的 prefix-based replay 技術。 
 由於之前於 reachability testing 及 DET 的技術進行 race analysis 時
所用的分析技術必頇配合 SYN-sequence 格式，所以我們必頇研究新的 
race analysis 技術。預計根據於 15 所提出的 race graph 來加以改良。 
 
在實際應用層面，有鑒於目前許多開放式嵌入式平台不斷被提出，但針對嵌入式
特性設計的並行程式測試工具上仍相當缺乏；加上考量各家嵌入式平台的完整性，
Open Handset Alliance 提出的 Android 因為具有以下特性： 
  
 採用嵌入式 Linux 作為底層架構，相關文件較為完整，針對此開發的程
式碼也將較容易移植到其他同為 Linux 底層的嵌入式系統。 
 面對應用程式開發人員的是一變形的 Java Virtual Machine─Dalvik，
Open Handset Alliance並提供工具可將現有 bytecode格式的 Java程式轉
換至該平台上執行，不但有利於軟體人員開發應用，亦可重複利用既有
的 Java 函式庫。 
 Open Handset Alliance 以 Google 為首，投入相當多資源對整體平台進行
 9 
 研讀 Android 系統文件。 
 完成主從式測試的系統架構規劃，將複雜的分析運算移到 server 端執行。 
 
第二年我們預計完成的目標如下目標 
 Study 各式 cloud computing 所使用的 synchronization model。 
 設計各式  cloud computing 所使用的  synchronization model 所需的 
SYN-sequence 格式，並據此發展所需的 prefix-based replay 技術。 
 研究各式 cloud computing 協定所需的 race analysis 技術。 
 整合其他子計畫研究成果，將整個測詴模擬平台移植至多核心嵌入式系統。 
 
 
5. 結果討論 
5.1. 簡介 
目前為止已經完成於 Android platform上的並行測試。我們發展出一套協定
用來記錄使用 Java monitor 之並行程式，透過將協定插入受測程式之中，可以將
測試所需之狀態資訊與執行順序記錄下來，並接著傳入 Race analyzer 分析。圖 二
代表一個 Java monitor 的基本構造，包含三個群集、四種狀態和七種運算。當一
個執行緒 A 要使用 monitor 時，要先執行 enter()運算，此時 JVM 會暫時將執行
緒 A放置於 entry set 裡，假若 entry set 中沒有其他的執行緒 B 存在且沒有其他
執行緒 C 現在也想使用同一個物件時，執行緒 A 就可執行 acquire()運算進入
owner 獲得 monitor 的使用權，反之，則執行緒 A、B、C 要一起競爭，最後會由
JVM 挑選出一個最適當地進入 owner 中，當執行緒擁有控制權後，它可以執行
wait()運算來暫時休息讓自己進入 waiting set 中或是執行 notify()運算來叫醒等待
中的執行緒，在 waiting set 中的執行緒，會一直等待直到下面幾種情況發生： 
 另一個執行緒對此執行緒執行 notify()或是 notifyAll()運算。 
 發生對此執行緒的中斷。 
 達到一開始呼叫設定的等待時間。 
 欺騙性的喚醒動作產生。 
另外，由於 notify()運算呼叫完後，除非自行釋放使用權，不然不會像 wait()
運算馬上離開 owner，所以被喚醒的執行緒並不會馬上獲得控制權，而是轉變成
復甦(resurrected)狀態並繼續等待執行 notify()運算的執行緒離開 monitor，最後才
與 entry set 中的執行緒一同競爭。 
另一方面，Java 提供兩種型態的 notify 運算：notify()和 notifyAll()。這兩個運算
最大的差異是 notify()運算會任意地從 waiting set 中，挑選一個執行緒喚醒並標記
 11 
5.2. 程式碼轉換 
為了因應七種運算，我們為其各設計一組對應的協定，並配合兩種宣告方式，
提出如何修改受測程式的方法，圖四表示如何對 acquire()及 release()運算插入我
們的協定，圖五為所有運算的轉換方式。 
 
圖四：Acquire 和 Release 協定插入轉換圖 (A)使用 synchronized method (B)使用 synchronized 
block 
 
(A) 
 
(B) 
 13 
5.3. 協定介紹 
在測試過程中，我們需要清楚地了解執行緒的執行狀況，然而，由於內文轉換
(context switch)是由 CPU 自行控制，單純地紀錄不足以獲得真實的資訊，有鑑於
此，我們為每一個 monitor 運算個別設計對應的協定，以下是每一個協定的內容： 
I. Acquire 與 Release 運算相關協定 
AcquireEntry和AcquireExit協定是負責記錄執行緒執行acquire()運算想要存
取的 object 和控制執行緒進入 monitor。因為在測試過程中，有可能發生死結，
我們利用兩階段的方式將 acquire()運算紀錄下來，在 entry部分使用
Mark_Acquire_Entry()來將執行緒當時的狀態暫時標記下來，我們稱此為
AcquireEntry協定，如圖六所示，接著當執行緒實際獲得 monitor 後會執行
AcquireExit 協定，會先判斷是在哪一個模式下，若是在監測模式下會將之前標
記下來的資訊刪除掉，最後將相關資訊紀錄下來，如圖七所示。執行完
AcquireExit 協定後，執行緒就可以開始對共享變數存取，當要釋放這個共享變
數的控制權時，要先執行 ReleaseEntry協定，這個協定是用來記錄和控制執行
緒離開 monitor 時候的狀態，如圖八。 
 
// acquire of Java monitor U in thread T 
 
IF(the execution mode is “replay”)   { 
   IF(Number_of_not_replayed_events==0)   { 
      // Start switching to monitor phase. 
      Sem_mutex.acquire(); 
      Number_of_processes_finish_replay++; 
      Sem_mutex.release(); 
      WHILE(Number_of_processes_finish_replay!=Number_of_processes); 
      Set the execution mode as “monitor”; 
   } 
   ELSE   { 
      // Current operation is nested. 
      IF(Acquire_level_of_U_in_T>=2)   { 
         // Wait until the current version of U equals to Ver. 
         WHILE(Current_Version_U!=Ver); 
      } 
      ELSE   { 
         // Wait until the current version of U equals to (Ver-1). 
         WHILE(Current_Version_U!=Ver-1); 
         // Wait until all the read events to the version (Ver-1) are finished. 
         WHILE(Number_of_read_U_Ver-1!=0); 
      } 
   } 
} 
ELSE  {// the execution mode is “monitor” 
   Mark_Acquire_Entry(AC(U,Current_Version_U,L,Value_of_U)); 
} 
圖六：Pseudo code of entry protocol for Java monitor acquire operation  
 
 15 
使用，用來把等待中的執行緒叫醒，我們分別使用 Notify 和 NotifyAll 協定來
記錄。 
Wait()運算表示執行緒想要進入 waiting set，釋放出 monitor 的使用權，只有
當其他執行緒呼叫 notify()或 notifyAll()或等待時間到達時，才會離開 waiting set，
我們利用 WaitEntry來記錄執行緒執行 wait()運算的動作，如圖九，當執行緒
要從 resurrected 狀態離開時，會執行 re-acquire()運算，亦即執行緒想要從
waiting set 離開，我們使用 WaitExit 協定記錄，當執行緒重新獲得控制權時，
要先執行 WaitExit 協定，如圖十所示，一開始要先判斷是在哪一種模式之下，
當在 monitor mode 時，要將之前標記起來的 re-acquire()運算刪除，若在 replay 
mode，要檢查是否還有 event 需要做重播，若有則等待，反之則轉換到監測模
式，其中，在轉換過程中，不需要將 Number_of_processes_finish_replay加一，因為在
WaitEntry協定中已經事先執行過，最後，判斷這個執行緒是否在 waiting set
中，如果存在則將他移除，接著將 re-acquire()記錄下來。 
 
// wait or waittime of Java monitor U in thread T 
 
IF(the execution mode is “replay”)    { 
   IF(Number_of_not_replayed_events==0)   { 
      // Start switching to monitor phase. 
      Sem_mutex.acquire(); 
      Number_of_processes_finish_replay++; 
      Sem_mutex.release(); 
      WHILE(Number_of_processes_finish_replay!=Number_of_processes); 
      Set the execution mode as “monitor”; 
   } 
   ELSE   { 
      Get the next event of T from the race variant. 
      IF(the event is the last event in the replay phase of T)   { 
         Sem_mutex.acquire(); 
         Number_of_processes_finish_replay++; 
         Sem_mutex.release(); 
      } 
   } 
} 
ELSE   { 
   Mark_Wait_Entry(RAC(U,*,L,*)); 
} 
Value_of_U[Number_of_waiting_processes]++; 
Value_of_U[Owner_Thread] = null; 
Current_Version_U++; 
Add T to the waiting set of U. 
IF(the current operation is wait of Java monitor U) 
   Store W(U,Current_Version_U,L,Value_of_U,N,P,WT) into SYN-sequence. 
ELSE   // The current operation is waittime of Java Monitor U. 
   Store W(U,Current_Version_U,L,Value_of_U,N,P,WTM) into SYN-sequence. 
圖九：Pseudo code of entry protocol for Java monitor wait operation  
 17 
// notify of Java monitor U 
 
IF(the execution mode is “replay”) 
{ 
   IF(Number_of_not_replayed_events==0) 
   { 
      // Start switching to monitor phase. 
      Sem_mutex.acquire(); 
      Number_of_processes_finish_replay++; 
      Sem_mutex.release(); 
      WHILE(Number_of_processes_finish_replay!=Number_of_processes); 
      Set the execution mode as “monitor”; 
      Randomly remove a thread Q from the waiting set of U. 
      Q.interrupt(); 
   } 
   ELSE 
   { 
      // M is the thread ID which would be notified by current event. 
      Get the next event and assume that it is NOT(U,Ver,L,C,P). 
      IF(P==null) 
      { 
         Randomly remove a thread Q from the waiting set of U. 
         Q.interrupt(); 
      } 
      ELSE 
      { 
         Remove P from the waiting set of U. 
         P.interrupt(); 
      } 
   } 
} 
ELSE  // the execution mode is “monitor” 
{ 
   Randomly remove a thread Q from the waiting set of U. 
   Q.interrupt(); 
} 
 
// Note that the notify operation may not be effective if the waiting set of U is empty. 
IF(Value_of_U[Number_of_waiting_processes]>0)  // The waiting set of U is not empty. 
{ 
   Value_of_U[Number_of_waiting_processes]--; 
} 
Current_Version_U++; 
Store W(U,Current_Version_U,L,Value_of_U,N,P,NOT) into SYN-sequence. 
圖十一：Pseudo code of substitute protocol for Java monitor notify operation  
 
// notifyall of Java monitor U 
 
IF(the execution mode is “replay”) 
{ 
   IF(Number_of_not_replayed_events==0) 
   { 
      // Start switching to monitor phase. 
      Sem_mutex.acquire(); 
      Number_of_processes_finish_replay++; 
      Sem_mutex.release(); 
      WHILE(Number_of_processes_finish_replay!=Number_of_processes); 
      Set the execution mode as “monitor”; 
   } 
} 
Clear the waiting set of U. 
Value_of_U[Number_of_waiting_processes] = 0; 
Current_Version_U++; 
Store W(U,Current_Version_U,L,Value_of_U,N,P,NTA) into SYN-sequence. 
圖十二：Pseudo code of entry protocol for Java monitor notifyall operation 
 
 
 
 19 
5. “A Survey of Synchronization Methods for Parallel Computers,” A. Dinning, 
IEEE Computer, July 1989. 
6. “Operating System Concepts, 6th Edition,” A. Silberschatz, P. B. Galvin, and G. 
Gagne, John Wiley & Sons, ISBN: 0471417432, June 2001. 
7. “Testing concurrent Java programs using randomized scheduling,” S. D. Stoller, 
Proceedings of the 2
nd
 Workshop on Runtime Verification (RV’02), Electronic 
Notes in Theoretical Computer Science, Volume 70, Issue 4, Elsevier, pp. 
142-157, December 2002. 
8. “Heuristics for finding concurrent bugs,” Y. Ben-Asher, E. Farchi, Y. Eytani, 
Proceedings of the 17
th
 International Parallel and Distributed Processing 
Symposium (IPDPS 2003) PADTAD Workshop, IEEE Computer Society Press, 
April 2003. 
9. “Reachability Testing: An Approach to Testing Concurrent Software,” G.-H. 
Hwang, K.-C. Tai, and T.-L. Huang, International Journal of Software 
Engineering and Knowledge Engineering, Volume 5, Number 4, December 
1995. 
10. “Model Checking,” Clarke, Jr., E. M., O. Grumberg and D. A. Peled, MIT Press, 
1999. 
11. “Logic in Computer Science: Modelling and Reasoning About Systems,” Huth, 
M. and M. Ryan, Cambridge University Press, 2004. 
12. “Java PathFinder,” http://javapathfinder.sourceforge.net/. 
13. “MAGIC website,” http://www.cs.cmu.edu/~chaki/magic. 
14. “A Systematic Parallel Testing Method for Concurrent Programs,” G.-H. 
Hwang, Master Thesis, Institute of Computer Science and Information 
Engineering, National Chiao-Tung University, Taiwan, 1993. 
15.  “Technology for Testing Nondeterministic Client/Server Database 
Applications,” G.-H. Hwang, S.-J. Chang, and H.-D. Chu, IEEE Transaction on 
Software Engineering, Volume 30, Number 1, pages 59-77, January 2004. 
16. Spontaneous Detection of Infinite Loops and Livelocks in Dynamic Testing of 
Concurrent Programs, by Che-Sheng Lin and Gwan-Hwan Hwang. IEEE 2009 
International Symposium on Theoretical Aspects of Software Engineering 
(IEEE TASE'09) , July 29 - 31, 2009, Tianjin, China.   
17. “Che-Sheng Lin and Gwan-Hwan Hwang, “Dynamic Effective Testing: An 
Approach to Testing Concurrent Programs,” Technical Report, National Taiwan 
Normal University, 2010. http://www.csie.ntnu.edu.tw/~ghhwang/DET2010.pdf. 
(This paper had been submitted to journal for publication) 
表 Y04 
(component-based software development), now are further turned into 
self-contained, autonomous and adaptive software services in 
service-oriented computing of state-of-arts. These software entities will 
be coordinated by coordinators statically and dynamically in various kinds 
of interaction styles (passively and actively) such as integration, 
cooperation, orchestration to achieve flexible design objectives. So a 
so-called "software-web" instead of information-web is weaved. This 
software-web as a whole is able to perceive the changes of open, dynamic, 
and uncertain environment and respond them in the way of transforming the 
architecture. Furthermore, the flexible design objective of the 
software-web is reflected by its exhibiting several compatible 
goal-directed behaviors according to its up-to-date knowledge about the 
outside environment. A portmanteau term "Internetware" is used to denote 
the future software-web in open and dynamic environment, which can be defined 
as follows: an Internetware system is a software system consists of 
self-contained, autonomous entities situated in distributed nodes of the 
Internet and coordinators connecting these entities statically and 
dynamically in various kinds of interaction styles (passively and actively). 
As a whole, it is able to perceive the changes of open and dynamic environment 
such as Internet, respond to changes in the way of architectural 
transformation, and exhibit context-aware, adaptive and trustworthy 
behaviors in the open and dynamic environment in order to meet its flexible 
design objectives. Internetware challenges many aspects of software 
technologies, from operating platforms, programming models, to engineering 
approaches, etc. 
    
我們所發表的論文被排在 Session 2 的第一篇，題目是“The Design and 
Implemenation of A Secured Workflow Management System for Cloud 
Environment”。大家的討論都十分熱烈，也和幾位從事軟體工程的學者認識。會
後也繼續和幾位專精於工作流程系統的教授進一步討論，收穫十分多。 
 
二、與會心得 
 
除了筆者本身論文之發表外，我也積極的和與會的各國專家學者交換研究的心得，
也認識許多進行相同領域研究的朋友，除此也發現數個可以進行的研究方向，收穫
甚多。 
 
三、考察參觀活動(無是項活動者省略) 
 
參訪廣西大學  
表 Y04 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                           2012 年 12 月 15日 
報告人姓名  
黃冠寰 
 
服務機構 
及職稱 
國立台灣師範大學 
資訊工程學系 
教授 
會議時間地點 Shanghai, China, May 21-25, 2012 
會議 
名稱 
 (中文) 2011 雲端上之工作流程模式、系統、服務及應用會議  
 (英文) First International Workshop on Workflow Models, Systems, 
Services and Applications in the Cloud (CloudFlow 2012) 
發表 
論文 
題目 
 (中文) 在雲端環境下具不可否定、可延展、及跨企業的工作流程系統 
 (英文) A Framework for Nonrepudiatable and Scalable 
Cross-Enterprise Workflow Management Systems in the Cloud. 
六、參加會議經過 
CloudFlow 2012 是 26th IEEE International Parallel & Distributed Processing 
Symposium (IEEE IPDPS 2012)下的一個 Workshop，其中接受的論文都會被 IEEE 
digital library所收錄。以下是此會議的主旨： 
 
Cloud computing is gaining tremendous momentum in both academia and 
industry, more and more people are migrating their data and applications 
into the Cloud. We have observed wide adoption of the MapReduce computing 
model and the open source Hadoop system for large scale distributed data 
processing, and a variety of ad hoc mashup techniques that weave together 
Web applications. However, these are just first steps towards managing 
complex task and data dependencies in the Cloud, as there are more 
challenging issues such as large parameter space exploration, data 
partitioning and distribution, scheduling and optimization, smart reruns, 
and provenance tracking associated with workflow execution. 
 
Cloud needs structured and mature workflow technologies to handle such 
issues, and vice versa, as Cloud offers unprecedented scalability to 
workflow systems, and could potentially change the way we perceive and 
conduct research and experiments. The scale and complexity of the science 
and data analytics problems that can be handled can be greatly increased 
on the Cloud, and the on-demand nature of resource allocation on the Cloud 
will also help improve resource utilization and user experience. 
 
As Cloud computing provides a paradigm-shifting utility-oriented computing 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/02/24
國科會補助計畫
計畫名稱: 子計畫二：嵌入式移動裝置及雲端環境之並行測試(1/2)
計畫主持人: 黃冠寰
計畫編號: 100-2219-E-003-001- 學門領域: 嵌入式軟體(網通國家型)
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
辦理學術活動如下： 
擔任期刊 Advanced in Software Engineering Special Issue 之 leading guest 
editor 
 
Software Engineering Solutions for Service-Oriented Architectures and 
Workflow Management Systems in Cloud 
Guest Editors: Gwan-Hwan Hwang, Wei-Tek Tsai, Feng-Jian Wang, Xiaoying 
Bai, Guoquan Wu 
Manuscript Due: Friday, 29 June 2012 
Publication Date: Friday, 16 November 2012 
http://www.hindawi.com/journals/ase/osi/ 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
