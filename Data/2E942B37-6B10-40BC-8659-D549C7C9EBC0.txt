2三、文獻探討：
The Byzantine-recovery failure model has been previously investigated in [9, 10]. It was
first applied to the problem of clock synchronization for a distributed system [11-14]. Such a
failure model is motivated by long-lived applications in the space domain, where transient and
repeated bit-flips phenomena may affect processors of the computing system. Furthermore,
mission times can be extremely long. These scenarios make impractical the assumption that there
is a limitation on the number of faults that may occur during the application life and that only a
subset of the processors can be influenced by these faults. All processes can become faulty in this
system and need recovery mechanism to proceed. The recovery mechanism guarantees that faulty
process can recover some operational state, especially recover a correction code. Therefore, in
such a system, every process may temporarily deviate from its specified behavior and thus all
processes may send out spurious messages during the whole execution. Such a dynamic failure
model obviously makes achieving consensus more difficult since identifying and removing
spurious messages is not as easy as in the static failure model.
四、研究方法：
Several consensus protocols proposed in the literature are round-based. Particularly,
processes execute a sequence of rounds. A process executing a certain round ignores messages
from lower-numbered rounds. Correspondingly, if it receives a message from a higher-numbered
round, then it begins executing the high-numbered round. If consensus is not reached in some
round, then a timeout mechanism will cause some process to abort such a round and begin the
next round. Furthermore, an individual round is usually made up of two phases. The first phase of
every round is a global exchange, i.e. processes exchange information they know so far with
other processes and updates their information as well. The second phase is then trying to achieve
consensus by checking some predefined conditions. These two phases are employed to achieve
the properties of Termination and Agreement. Moreover, a Byzantine protocol must also ensure
the Validity property. To this end, a consensus protocol mainly employs the following principle:
the value that occurs most often will be decided if the number of its occurrences exceeds some
predefined threshold. Otherwise, a mechanism is used to eventually force a value to be adopted
by enough processes so that the previous situation becomes satisfied.
The basic concept of solving consensus for the static failure model considered in the
literature is described as below: Because at most f processes can be faulty during the whole
execution, when a correct process receives f+1 messages, it knows that at least one was sent by a
correct process. Subsequently it also sends such a message to all. Upon receipt of the same
message from n−f ≥ 2f +1processes, a process knows that all correct processes receive at least
n−2f ≥ f+1of this message from other process, and then make a common decision. Hence, if there
are sufficient rounds, there must exist at least one round where all correct processes have the
same information to decide on the same value. Thus consensus is achieved.
In this project, we try to propose a consensus protocol based on Byzantine-recovery failure
model for synchronous systems. First, we have to model transient and dynamic process failures,
namely, processes may temporarily deviate from the specified behavior. Note that permanent
process failures are just a special case. Here, the notion of “corect” and “faulty” processes must 
4Furthermore, we found that like the static Byzantine failure model, the new dynamic
Byzantine-recovery model also needs n > 3f to achieve consensus in a synchronous system.
Finally, a process must get rid of messages which it receives from a faulty process for future
rounds. In the static failure model, this is simpler to overcome since such messages are sent just
by the at most f faulty processes during an execution. However, in the dynamic model, such
messages may be sent by every process at times it does not follow its algorithm. Therefore, our
consensus algorithm for the dynamic model needs more rounds to achieve consensus, and the
condition that an early decision can be achieved is also more constrained, in comparison to
existing consensus algorithms for the static model.
參考文獻：
[1] L. Lamport, R. Shostak and L. Pease, “The Byzantine general problem,” ACM Trans.
Programming Languages and Systems, vol. 4, no. 3, pp. 382-401, 1982.
[2] L. Pease, R. Shostak and L. Lamport, “Reaching agreement in presence of faults,” J. the ACM,
vol. 27, no. 2, pp. 228-234, 1980.
[3] T. D. Chandra and S. Toueg, “Unreliable failure detectors for reliable distributed systems,” J.
the ACM, vol. 43, no. 2, pp. 225-267, Mar. 1996.
[4] M. J. Fischer, N. Lynch and M. S. Paterson, “Impossibility of distributed consensus with one
faulty process,” J. the ACM, vol. 32, no. 2, pp. 374–382, Apr. 1985.
[5] J. A. Garay and Y. Moses, “Fuly polynomial Byzantine agreement for n > 3t processes in t+1 
rounds,” SIAM J. Computing, vol. 27, no. 1, pp. 247-290, 1998.
[6] H. Attiya and J. Welch, Distributed computing: Fundamentals, simulations and advanced
topics, McGraw–Hill, 1998.
[7] N. A.Lynch, Distributed algorithms, Morgan Kaufmann Pub., San Francisco, CA, 1996.
[8] M. Raynal, “Consensus in synchronous systems: A concise guided tour,” Proc. the 2002
Pacific Rim Int’l Symp. Dependable Computing, pp. 221-228, Dec. 2002.
[9] E. Anceaume, C. Delporte-Galet, H. Fauconnier, M. Hurfin, and G. L. Lann, “Designing 
modular services in the scatered Byzantine failure model,” 3rd Int’l Symp. Paralel and 
Distributed Computing, pp. 262-269, 2004.
[10] B. Barak, S. Halevi, A. Herzberg, and D. Naor, “Clock synchronization with faults and 
recoveries,” Proc. 19th annual ACM Symp. Principles of Distributed Computing, pp. 133-142,
2000.
[11] C. Fetzer and F. Cristian, “An optimal internal clock synchronization algorithm,” Proc. the
10th IEEE Conf. Computer Assurance, 1995.
[12] A. Daliot, D. Dolev, and H. Parnas, “Linear time Byzantine self-stabilizing clock
synchronization,” Proc. the 7th Int’l Conf. Principles of Distributed Systems, vol. 3144, pp. 7-19,
2003.
[13] S. Dolev and J. L. Welch, “Self-stabilizing clock synchronization in the presence of
Byzantine faults,” J. the ACM, vol. 51, no. 5, pp. 780-799, 2004.
[14] E. Anceaume, C. Delporte-Galet, H. Fauconnier, M. Hurfin, and J. Widder, “Clock 
synchronization in the Byzantine-recovery failure model,” Int’l Conf. Principles of Distributed 
Systems, Dec. 2007.
表 Y04
行政院國家科學委員會補助國內專家學者出席國際學術會議報告
98 年 10 月 13 日
報告人姓名 蔡智強 服務機構
及職稱
國立中興大學電機系
副教授
時間
會議
地點
98年 8月 10日至 11日
澳門
本會核定
補助文號
NSC 97-2221-E-005-045
會議
名稱
The 2009 IEEE Taiwan/Hong Kong/Macau Joint Workshop on Information
Theory and Communications
發表
論文
題目
Achieving Consensus with Unknown Participants Regardless of Process
Crashes
報告內容應包括下列各項：
一、參加會議經過
此次由 IEEE Society所舉辦之 The 2009 IEEE Taiwan/Hong Kong/Macau Joint Workshop
on Information Theory and Communications在 2009年 8月 10日至 8月 11日於澳門的澳
門大學舉行。這是一個一年一度的國際會議，與會人士主要包含了台灣、香港以及澳門
三地的學者，今年也有南非的學者參與。於會議中，大家共同討論資通訊領域方面最新
的研究主題與方向，並且交換研究心得。本次會議採用 Invited Speeches與 Poster Sessions
的方式進行，本人在這會議上以 Poster方式發表一篇論文。
本人於8月9日下午自行從台北出發，並於當天晚上抵達澳門。休息一晚調整體力後，10
日上午便前往澳門大學開始參加會議。上午九時舉行開幕式後，立即開始進行各場Invited
Speeches，由台港澳的著名專家學者輪流上台演講，發表研究成果與心得，其中包含了
台灣交通大學、香港中文大學與城市大學，以及地主澳門大學的優秀教授。中場休息時
間為Poster Session，本人被安排於上午第一場Poster Session發表論文，期間並與其他學
者討論自己的研究成果。晚上則參加了會議所舉辦之晚宴，與港澳專家學者們交換研究
心得，相談甚歡。
11日整天也是繼續參加會議，聆聽其他優秀學者的研究成果發表，包含了 Communication
Networks and Systems, Network Coding, Cryptography and Source Coding 以及 Signal
Processing 等領域的精采內容，獲益良多。當天下午與其他學者道別並相約下次會議時
見後離開會場。之後，前往澳門市區觀光，參觀了世界遺產之大三巴等景點，晚上便返
回旅館休息。12日上午搭機返回台灣，並於當天下午回到台中。
附
件
三
