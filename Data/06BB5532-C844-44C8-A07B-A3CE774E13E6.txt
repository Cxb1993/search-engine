2行政院國家科學委員會專題研究計畫期末報告
內嵌式記憶體有效之內建資源分析與自我修復技術之研究
Efficient Built-In Redundancy Analysis and Self-Repair Techniques for Embedded
Memories
計畫編號：NSC 95-2221-E-030-021-MY2
執行期限：95年 8月 1日至 97年 7月 31日
主持人：呂學坤 教授 輔仁大學電子系
計畫參與人員：王振宇、傅煥軒、黃俊源、蕭淵丞
一、 中文摘要
此本計劃主要的研究目標為內嵌式記憶體
之內建自我測試 (Built-In Self-Test)、內建資
源分析 (Built-In Redundancy Analysis) 與內
建自我修復 (Built-In Self-Repair) 技術之開
發，由於記憶體內建自我測試技術目前已有
BIST Compiler 可供使用，然而在修復技術上
目前仍待提出更有效之技術，因此我們的研究
重點為內建資源分析，為更有效率的使用內建
之備用資源，我將同時採用 DWL 與 DBL
架構之備用資源機制，在此備用資源機制下，
我們對備用資源配置之問題進行複雜度分
析，並證明其複雜度為 NP-complete，之後我
們並提出有效之 Heuristic 資源分析演算法，
並開發模擬器以分析所提出的資源分析演算
法之修復率、良率與硬體成本等。我們也進行
完整 Built-In Self-Repair 記憶體之設計，實
現一 16K 32 之 SRAM，晶片大小為 3.04
mm2，而 BISR 電路之硬體成本為 6.28%。
關鍵詞: 內建自我診斷、內建自我修復、嵌入
式記憶體、良率、可靠度
AbstractIn this project, built-in self-test,
built-in redundancy analysis, and built-in
self-repair techniques are proposed for
embedded memories. In order to efficiently use
the redundancy, we will adopt both the divided
bit-line and divided word-line architectures
(hybrid architecture). The complexity of the
spare allocation problem was and shown to be
NP-complete. Therefore, an efficient heuristic
algorithm was then proposed to solve the spare
allocation problem. A simulator was
implemented and used to evaluate the repair rate,
yield, and reliability of the proposed approach.
We have also implemented a memory chip with
BISR circuitry. The chip area is 3.04 mm2. The
hardware overhead of the BISR circuitry is
6.28%. Experimental results show that the repair
rates and reliabilities can be improved
significantly.
Keywords: Built-In Self-Test, Built-in
Self-Diagnosis, Embedded Memory, Divided
Word Line, Yield
二、前言與研究目的
依據 ITRS2004 的統計資料顯示，在 2014
年時內嵌式記憶體將佔整個系統晶片高達
94% 的 Die 面積，由於記憶體部份較容易受
到 Defect 的影響，因此整個單晶片系統的可
靠度與良率將為內嵌式記憶體所主宰，因此內
嵌式記憶體的測試與修復技術的重要性與日
俱增。
第一年時我們的研究重點在尋求內嵌式記
憶體之容錯架構，傳統的記憶體模組晶片均有
加 (Redundant row) 或 備 用 行 (Redundant
Column) [1, 2, 3, 4, 5, 6, 7, 8]，因此除了加上錯
誤更正碼 (Error Correction Code) 可自動做
有限的錯誤更正外，備用列或備用行也可用來
取代故障的列或行，然而因為記憶體模組的列
寬度或行的長度越來越大，尤其在單晶片系統
的內嵌式記憶體其列寬度可達256 位元以
上，因此使用傳統整個列或行取代很明顯的效
率並不高 [9, 10, 11, 12]，因此尋求更有效的
備用機制是很重要的議題。然而，隨著記憶體
的密度增加，電路變為更複雜及更容易有缺陷
4標column bank 中可用之行區塊，我們所提
出的ELRM 演算法示於下面的pseudo code
中，其主要包括兩個步驟: bitmap construction
(BC) 與 block allocation (BA)，分別表示為
BCFLRM() (LRM 之 BC) 與 BAFLRM()
(LRM 之 BA)，每個 column bank 的 local
bitmap 使用 BCFLRM() 加以建立，備用列
(行) 區快則使用BAFLRM() 加以配置。
圖三: ELRM 演算法所使用之bitmap。
Procedure BCFLRM()
LBMij: 0 ≤ i ≤ p-1, 0 ≤ j ≤ q-1: an individual bit in the ith row and the
jth
column of the local bitmap
(tag) ARBi:0 ≤ i ≤ b-1: available row blocks in row bank i.
(tag) ACB: available column blocks of the target column bank
(tag) LRA: local row address tags to store the m/a row addresses of
the faulty cells that are recorded in the local bitmap.
(tag) LCA: local column address tags to store the n/b column addresses
of the faulty cells that are recorded in the local bitmap.
(counter) CounterLRA: fault counters to count the faulty flags for
LRA tags.
(counter) CounterLCA: fault counters to count the faulty flags for
LCA tags.
(counter) CounterR: count the no. of faulty cells in a row of the
bitmap.
(counter) CounterC: count the no. of faulty cells in a column of the
bitmap
Begin
clear ARBi, ACBj, LBMij, repairFailFlag;
Start:
for each faulty cell detected ( ) {
set currentFaultycell = [local_row : local_col][RBj];
for (ColumnBankIndex i = 0; i < a; i++) {
for all RBj, 0≤ j ≤ b-1{
for (LCAIndex y = 0; y < q/b; y++) {
if (local_col = LCAy) {
if (CounterLRA< p)
store in bitmap [NextAvailableLRAx, LCAy];
CounterLRA = CounterLRA + 1
else
BAFLRM( );    /bitmap’s row is ful
}
else {
for (LRAIndex x = 0; x < p/a; x++) {
if (local_row = LRAx) {
if (CounterLCA < q)
store in bitmap [LRAx, NextAvailableLCAy];
CounterLCA= CounterLCA + 1
else
BAFLRM ( ); }}}}  /bitmap’s column is ful}
BAFLRM ( ){
for all i, 0 ≤ i ≤ p-1{
if (ARBi = 0 and ACB = 0)
set RepairFailFlag;
elseif (ACB = 0)
for all RowBankIndex j, 0 ≤ j ≤ b-1{
if (ARBi < CounterLRA) //check early termination
setRepairFailFlag;
else AllocateSpareRow( )};
}
elseif (ARBi = 0){
if (ACB < CounterLCA) //check early termination
setRepairFlag;
else AllocateSpareColumn( ); }
else{
if FinalFaultyCell
RepairAll( );
else
RepairMost ( );
go to Start;}}
我們所實現之含 BISR 電路之內嵌式記憶
體架構如圖四所示，其包括有BIST 模組與
BIRA 模組，BIST 模組執行給定的 March
演算法以對主記憶體模組與備用記憶體模組
進行功能性與測試，BIRA 模組進行前述之
ELRM 演算法以修復故障的列或行區塊，在
正常模式時則做為位址轉換器，wrapper 則將
輸出入埠於原本記憶體埠與 BISR 模組間做
切換。而完成之電路佈局圖則如圖五所示。
四、結果與討論
若我們將修復率定義為成功重組之機率，在我
們的模擬中，我們注入 17 個隨機記憶體細胞
之故障至一 1024 64 記憶體陣列中，注入
的故障包括stuck-at faults, 故障細胞，故障列
圖四: 含BISR 架構之內嵌式記憶體。
6[2] S. K. Lu, Y. C. Hsiao, C. H. Liu, and C. L. Yang,
“Low-Power Built-In Self-Test Techniques for
Embedded SRAMs,”VLSI Design, vol. 2007, pp. 1-6,
2007. (SCI, Full paper)
[3] S. K. Luand C. H. Hsu, “Fault Tolerance Techniques 
for High Capacity RAMs,”IEEE Trans. Reliabilities,
vol. 55, no. 2, pp. 293-306, June 2006. (SCI, Full
paper)
[4] S. K. Lu, etc, “Efficient Built-In Redundancy
Analysis for Embedded Memories with 2-D
Redundancy,” IEEE Trans. VLSI Systems. vol. 14, no.
1, pp. 34-42, Jan. 2006. (SCI, Full paper)
六、參考文獻
[1] A. Allan et al., “2001 Technology Roadmap for 
Semiconductors,”Computer, vol. 35, no. 1, Jan. 2002,
pp. 42-53.
[2] D. K. Bhavsar, , “An algorithm for row-column
self-repair of RAMs and its implementation in the
Alpha 21264,” in Proc. Int’l Test Conf., pp. 311-318,
Sep. 1999.
[3] I. Kim, Y. Zorian; G. Komoriya, H. Pham, F. P.
Higgins,, and J. L. Lewandowski, “Built in self repair
for embedded high density SRAM,” in Proc.Int’l Test
Conf., pp. 1112-1119, Oct. 1998.
[4] W. K. Huang, Y. H. Shen, and F. Lombrardi, “New 
approaches for the repairs of memories with
redundancy by row/column deletion for yield
enhancement,” IEEE Transactions on
Computer-Aided Design, vol. 9, no. 3, pp. 323-328,
Mar. 1990.
[5] M. Horiguchi, J. Etoh, M. Aoki, K. Itoh, and T.
Matsumoto, “ A flexible redundancy technique for 
high-density DRAM’s” IEEE Journal of Solid-State
Circuits, vol. 26, no. 1, Jan. 1991.
[6] P. Mazumder and Y. S. Jih, “A new built-in self-repair
approach to VLSI memory yield enhancement by
using neural-type circuits,” IEEE Transactions on
Computer Aided Design, vol. 12, no. 1, Jan. 1993.
[7] H. C. Kim, D. S. Yi, J. Y. Park, and C. H. Cho, “A 
BISR (built-in self-repair) circuit for embedded
memory with multiple redundancies,” in Proc. Int’l 
Conf. on VLSI and CAD, pp. 602-605, Oct. 1999.
[8] S-Y. Kuo and W. K. Fuchs, “Eficient spare alocation 
in reconfigurable arrays,” IEEE Design & Test, vol. 4,
pp. 24-31, 1987.
[9] M. Yoshimoto, K. Anami, H. Shinohara, T.Yoshihara,
H. Takagi, S. Nagao, S. Kayano, and T. Nakano, “A 
divided word-line structure in the static RAM and its
application to a 64K ful CMOS RAM,” IEEE Journal
of Solid-State Circuits, vol. SC-18, No. 5, Oct. 1983.
[10] A. Karandidar and K. K. Parhi, “Low power SRAM
design using hierarchical divided bit-line approach,” 
in Proc. Int’l Conference on Computer Design, pp.
82-88, Oct. 1998.
[11] C-H Hsu and S-K Lu, “Novel fault-tolerant
techniques for high capacity RAMs,” in Proc. Pacific
Rim International Dependable Computing Symposium,
pp. 11-18, 2001.
[12] M. Tarr, D.Boudreau, and R. Murphy, “Defect 
analysis system speeds test and repair of redundant
memories,” Electronics, pp. 175-179, Jan 1984.
[13] J. R. Day, “A fault-driven comprehensive
redundancy algorithm for repair of dynamic RAM’s” 
IEEE Design & Test, vol. 2, no. 3, pp. 33-44, 1985.
[14] T. Kawagoe, J. Ohtani, M. Niiro, T. Ooishi, M.
Hamada, and H. Hidaka, “A built-in self-repair
analyzer (CRESTA) for embedded DRAMs,” in
Proc. Int’l Test Conference, pp. 567-574, Oct. 2000.
[15] C.-L. Wey and F. Lombardi, “On the repair of 
redundant RAM’s,” IEEE trans. Computer-Aided
Design, vol. CAD-6, pp. 222-231, 1987.
[16] W.-K. Huang, Y.-N. Shen, and F. Lombardi, “New 
approaches for the repair of memories with
redundancy by row/column deletion for yield
enhancement,” IEEE Trans. Computer-Aided Design
of Intergrated Circuits and Systems, vol. 9, pp.
323-328, Mar. 1990.
[17] C.-T. Huang, C.-F. Wu, J.-F. Li, and C.-W. Wu,
“Built-in redundancy analysis for memory yield
improvement,” IEEE Trans. Reliability, vol. 52, pp.
386-399, Dec. 2003.
[18] S.-K. Lu, “Built-in self-repair techniques for
embedded RAMs,” IEE Proceedings- Computers &
Digital Techniques, vol. 150, no. 4, pp. 201-208, July
2003.
[19] S.-K. Lu, “A novel built-in self-repair approach for
embedded RAMs,” Journal of Electronic Testing:
Theory and Applications, vol. 19, pp. 315-324, June
2003.
[20] J.A. Mchugh, “Algorithm graph theory,” Prentice 
Hall, 1990.
[21] C. H. Stapper, “Improved yield models for
fault-tolerant memory chips,” IEEE Trans.
Computers, vol. 42, no. 7, pp. 872-881, July 1993.
[22] W. Kuo and T. Kim,“An overview of manufacturing
yield and reliability modeling for semiconductor
products,” Proceedings of the IEEE, vol. 87, no. 8,
pp. 1329-1344, Aug. 1999.
[23] I. Koren and Z. Koren, “Defect tolerance in VLSI 
circuits: techniques and yield analysis,” Proceedings
of the IEEE, vol. 86, No. 9, pp. 1819-1836, Sep.
1998.
[24] A. J. van de Goor, “Testing Semiconductor
Memories– Theory and Practice,” Apr. 1996.
[25] A. J. van de Goor and I. Schanstra, “Address and
data scrambling: causes and impact on memory
tests,” in Proc. Int’l Workshop on Design, Test and
Applications, pp 128-136, Jan. 2002.
[26] J. Day, “A fault-driven comprehensive redundancy a
algorithm,” IEEE Design & Test of Computers, vol.
2, no. 3, pp. 35-44, June 1985.
[27] J.-F. Li, J.-C. Yeh, R.-F. Huang, and C. W. Wu, “A
built-in self-repair scheme for semiconductor
memories with 2-D redundancy,” in Proc.
International Test Conference, vol. 1, pp. 393-402,
2003.
[28] S.-K. Lu and S.-C. Huang, “Built-In Self-Test and
Repair (BISTR) Techniques for Embedded RAMs,”
in Proc. Int’l Workshop on Memory Technology, 
Design and Testing, pp. 60-64, Aug. 2004.
[29] S.-K. Lu and C.-H. Hsu, “Built-In Self-Repair for
Divided Word Line Memory,”in Proc. Int. Symp.
on Circuits and Systems (ISCAS2001), pp. IV13-IV16.
表 Y04
一、 參加會議經過
此研討會共舉行 3 天，第一天早上為 Keynote Address, 討論議題為 Wireless
Multimedia Networking: From Theory to Practice"，由美國華盛頓大學 J. Hwang 教
授主講，其說明由目前類比多媒體轉換至數位多媒體的時代，其將由 push-based
多媒體轉播切換至 pull-based 多媒體 streaming, 由有線連接變成無線連接，也趨
使多媒體標準如 MPEG-2, H.264/AVC, H.264/SVC, MP3, AAC 等及 wireless
networking protocols (802.11, 802.15, 802.16, 3GPP 等的進步。
第一天上午為論文發表，Session 1 為 Power Circuits and Systems，下午則為
Session 2 SOC and Networks 。 第二天上午為 Session 3 Digital Circuits and
Systems 與 Session 4 DSP。下午為 Tutorial Presentation - “Configurable Processors
for SOC Design”，由 Dr. Zoran Stamenković主講，其說明在現今 SOC 的世代，
如何延長產品的 Life Cycle，則需靠可重組設計來竟其功。
第三天上午為 Session 5 –Power Electronics and Systems 與 Session 6 –Mixed
Mode Circuits，後半段則進行 Session 7 –RF Circuits，下午則進行 Session 8 –
Applications and CAD。本人此次會議獲邀擔任 Session 3 Digital Circuits and
Systems 之 Session Chair 並發表論文 C. L. Yang and S. K. Lu, “Modified
Essential Spare Pivoting Algorithm for Embedded Memories with Global Block-Based
Redundancy,” in Proc. IASTED 5th Int’l Conf. Circuits, Signals, and Systems, pp.
76-79, July 2007.
會議心得:
此次能參加 IASTED CSS 2007 的機會非常的難得，國內目前有許多專家學者均
會來參加這個研討會，對其主要內容均有相當的了解 (多篇學術論文發表)，因為
大部份的演講內容均為工業界與學術界目前所開發之關鍵性技術，因此非常值得
參加，雖然工業界發表的技術常無法讓我們很清楚其 Detail, 但是仍然能一窺其
全貌。
