combination of stocks t1, t2, ··· , tc. A major 
property of such a function that is proper for 
defining the new risk and return is that the 
function should be monotone for proportion 
reasons [2]. Sum and average, for instances, are 
monotone functions and therefore oftenly used 
in these applications. 
For convenience when there is no worry of 
confusion, we refer to a combination of stocks 
(such as each row in Figure 2) as a tuple too, just 
as referring to a single stock in Figure 1 as a 
tuple. We say that tuple A dominates tuple B if 
the values of the concerned attributes (such as 
risk and return) of A are not worse than those of 
B and at least one of them is better [2, 3, 4, 5, 6]. 
The problem of finding the portfolio is quite 
complicated because we need to search all single 
stocks, all combinations of two stocks, all 
combinations of three stocks, up to all 
combinations of, say, c stocks for the dominating 
tuples so as to form the portfolio, where c is 
given by the user. We call such a query the 
Combinatorial Skyline Query (CSQ). If only the 
top-k dominating tuples are returned to the user 
where the sorting is based on a preference order 
P specified by the user, then the query is a 
Top-K Combinatorial Skyline Query (k − CSQ). 
For a table of n tuples, the number of possible 
combinations where each has a cardinality of c 
(i.e., each combination is composed of c stocks) 
would be ∑ ቀni ቁ
ୡ
୧ୀଵ . If the number of stocks n is 
1000 and the user wants to find the portfolio 
with a cardinality not greater than 5, the search 
space of a combinatorial skyline would Consist 
∑ ቀ1000
i
ቁହ୧ୀଵ ൎ 10
ଵଶ  combinations. This 
number increases exponentially with the number 
of stocks and the cardinality. An extremely high 
computation cost is incurred unavoidably in 
resolving such a query. 
In this research, we propose an algorithm 
named the Restricted Construction Algorithm 
(RCA) to resolve the top-k combinatorial skyline 
query problem. RCA progressively composes 
the combinations and prunes the combinations 
that are impossible to be the combinatorial 
skyline result, and then uses a filtering 
mechanism to retrieve the top-k combinatorial 
skyline tuples without enumerating all 
combinations. Major contributions of this work 
include (1) a new problem, the combinatorial 
skyline query, is identified and investigated, (2) 
an efficient algorithm is proposed for processing 
a top-k combinatorial skyline query, (3) the 
correctness of the answer is guaranteed, (4) 
of ways that c tuples can be chosen from among 
n objects regardless of the order and 1 ≤ c ≤ n. 
This property is often described recursively as 
ቀ
n
cቁ ൌ ቀ
n െ 1
c
ቁ ൅ ቀn െ 1
c െ 1
ቁ  We refer to 
c-combination as a combination of a cardinality 
of c, and CT(n, c) as the set that contains all 
c-combinations of a dataset with n tuples {t1, 
t2, · · · , tn}. For example, {t1, t2, t3, t4} is a 
dataset of four tuples, and CT(4, 2) = {[t1, t2], 
[t1, t3], [t1, t4], [t2, t3], [t2, t4], and [t3, t4]}. 
Also we define  ♁ as an adding operator such 
that S  ♁ ti means to add ti to each element of 
the set S. For example, {[t1, t2], [t1, t3]}  ♁ t5 = 
{[t1, t2, t5], [t1, t3, t5]}. For another example, 
CT(4, 1)  ♁ t5 = {[t1, t5], [t2, t5], [t3, t5], [t4, 
t5]}. By applying this to the binomial 
coefficients mentioned above, we have  
CT(n, c) = CT(n − 1, c)  ∪ (CT(n − 1, c − 1) 
 ♁ tn),  (1) 
where 1 ≤ c ≤ n and  ∪ is the set union operator. 
CT(n, c) is an empty set if c = 0 or c > n.  
Equation 1 gives all c-combinations of dataset 
D = {t1, t2, · · · , tn}, where each of the 
combinations is either a combination that 
contains tn (i.e., CT(n − 1, c − 1)  ♁ tn) or one 
that does not (i.e., CT(n − 1, c)). Equation 1 tells 
us that if CT(n − 1, c) and CT(n − 1, c − 1) are 
derived, then we can utilize them to construct 
CT(n, c). This can, in turn, be applied to 
obtaining CT(n − 1, c − 1) if CT(n − 2, c − 2) 
and CT(n − 2, c − 1) are known. Following this, 
the whole problem can be divided into a number 
of subproblems and the result of each 
subproblem can be applied to resolving the 
subproblem of the next stage. We use a table T, 
called the solution table, to store the solution of 
each subproblem. Figure 4 shows the solution 
table while processing CT(5, 3). T can be 
thought of as a data structure of a 
two-dimensional array, consisting of n rows and 
(c+1) columns if there are n tuples in D and the 
cardinality is c. In Figure 4, T has 5 rows and 4 
columns. An arrow pointing from CT(h, k) to 
CT(i, j) means that the solution of CT(h, k) is 
used to construct the solution of CT(i, j). For 
instance, CT(3, 2) = CT(2, 2) ∪ (CT(2, 1)  ♁ t3). 
Hence, there are arrows pointing from CT(2, 2) 
and CT(2, 1) to CT(3, 2). Note that Col 0 is also 
listed in Figure 4. Although all the entries in this 
column (i.e., CT(i, 0)) are empty sets, they can 
be combined with CT(i, 1) to generate 
meaningful combinations (i.e., CT(i+1, 1)). 
Hence, they cannot be excluded from the table. 
Also note that there are three shadowed cells in 
the solution table. Each of them is also an empty 
set because c > n makes CT(n, c) meaningless. 
The complete solution table of this particular 
example is shown in Figure 5. 
The combinations shown in a solution table 
include all possible combinations of CT(n, c). In 
the following, we propose a mechanism to find 
the top-k combinatorial skyline without 
enumerating all these combinations. We will use 
a concept, called descendant, in the process of 
pruning the unnecessary comparisons on the 
combinations. Given a combination g’p, we say 
that g’p is a descendant of gp if g’p is (1) gp 
the following rows. For example in terms of 
Row 1, the remaining tuples in D are t2, t3, t4, t5, 
and t6. And in terms of Row 2, the remaining 
tuples in D are t3, t4, t5, and t6. The descendants 
of φ in row 3 are (1) φ itself, (2) φ combined 
with one of the remaining tuples in D which 
gives [t4], [t5], and [t6], and (3) φ combined 
with two of the remaining tuples in D which are 
[t4, t5], [t4, t6], and [t5, t6]. Then, we compare 
the preference of the k-th (i.e., third in this 
example) combinatorial skyline, [t2, t3], with 
that of each of these descendants. We find that 
[t1, t4] ՜ [t2, t3] (< 16, 26 >՜ < 15, 25 >). 
This means that one combination which is to be 
constructed in a future row will dominate [t2, t3]. 
Hence, the current top-3 combinatorial skyline 
tuples cannot be the final result. Therefore, the 
process should continue. 
Now, the problem is “can this process stop as 
early as possible so that we do not need figure 
out all descendants of each combination?” We 
find an elegant and efficient way to accelerate 
the processing of finding the top-k combinatorial 
skyline tuples. Instead of comparing the k-th 
combinatorial skyline to each descendant, we 
compare the k-th combinatorial skyline to the 
most preferred descendant (MPD) of each 
combination. The MPD of a combination gp 
(denoted as MPD(gp)) is a descendant of gp and 
MPD(gp) has the highest user preference among 
all gp’s descendants. In other words, the user 
preference of any gp’s descendant is always 
equal to or lower than that of the MPD(gp). Let 
us go back to Row 3 of the example in Figure 7. 
Since [t1, t4] has the highest user preference 
among all descendants of [t1], MPD([t1]) is [t1, 
t4]. Following this idea, we can find the MPD of 
each combination (i.e., MPD(φ) = [t4, t5], 
MPD([t1]) = [t1, t4], MPD([t2]) = [t2, t4], 
MPD([t3]) = [t3, t4],, MPD([t1, t2]) = [t1, t2], 
MPD([t1, t3]) = [t1, t3], and MPD([t2, t3]) = [t2, 
t3]). Then, we compare the preference of the k-th 
combinatorial skyline ([t2, t3]) with the 
preference of these MPDs. In this example, since 
the preference of MPD([t1]) is higher than that 
of [t2, t3] (i.e., < 16, 26 >՜ < 15, 25 >, we 
know that the current top-k combinatorial 
skyline tuples are not the final results. The 
algorithm will proceed to the next row. 
As the number of MPDs is much less than the 
number of all descendants, comparing the k-th 
combinatorial skyline tuple with these MPDs is 
therefore much faster and more efficient than 
comparing with the descendants. However, 
locating the MPD of gp requires to construct all 
descendants of gp, which is still a very costly 
process. In the following, we propose a method 
to find the MPD of a combination without 
having to enumerate all its descendants. Given a 
combination gp, where |gp| = u ≤ c, and a set of 
remaining tuples D’ = {tj, tj+1, · · · , tn}. D’ is 
sorted according to the user preference P which 
means that tj ՜ tj+1, j = 1, 2, · · · , |D’| − 1. Let 
g௣௨ା௜be a descendant of gp that is obtained by 
combining gp with the first i tuples in D’, where 
i =0, 1, · · · , (c−u). g௣௨ା௜ has the following 
interesting properties: (1) g௣௨ା௜ is a descendant 
of gp, (2) the cardinality of g௣௨ା௜ is u + i, and (3) 
g௣௨ା௜ is the most preferred combination among 
the descendants of gp whose cardinality is u + i 
(the third property is to be proved in Lemma 1). 
The following equation can be used to determine 
MPD(gp). 
MPD(gp) = MAX(g௣௨ା଴,g௣௨ାଵ,… , g௣
௨ାሺୡି୳ሻሻ. (2) 
For example in Row 3 of Figure 7, the 
remaining tuples which are sorted according to P 
  
 
[2, 3, 5, 6]. These two datasets are commonly 
used in skyline research. We normalize all 
dimension values into [0, 100].The generation of 
the datasets of these two different distributions is 
based on the paper in the literature [3]. We 
divide our experiments into two categories: the 
performance evaluation over (1) a small and (2) 
a large scale datasets. In the first category, a set 
of small-scale datasets is used so as to restrict 
the running time of the Brute-Force method to a 
measurable period of time. In the second 
category, a set of large-scale datasets are 
adopted to show the scalability of RCA. The 
parameters and their varying ranges are 
summarized in Figure 8, in which default values 
are marked in boldface. All experiments are run 
on a PC with Intel Core2 CPU 2.4GHz and 2 GB 
main memory. The programs are compiled with 
Java v6 in Windows Vista system. 
(A) Effect of Dataset Size: The performance 
results are shown in Figure 9. We use the dataset 
with the dimensionality 6 and vary the size of 
the dataset from 50 to 200 tuples. The result 
shows that RCA significantly outperforms the 
Brute-Force method. The query time of RCA is 
very small, only a fraction of a millisecond. 
However, the performance of Brute-Force 
degrades rapidly as the size of the dataset 
increases, especially when the data distribution 
is anti correlated (note that only a small portion 
of the Brute-Force method can be shown in the 
figure because the query time is too high). This 
implies that RCA can successfully reduce the 
computation cost by using the concept of the 
MPD, which eliminates unnecessary 
comparisons on combinations. In the next 
experiment, we adopt large size datasets which 
vary from 200 to 100K. The query time of RCA 
is shown in Figure 9(b) and note that this time is 
in millisecond. The result of Brute-Force is not 
shown because its performance is over the scale 
of this figure. The result shows that the size of 
the dataset has a small impact on RCA. RCA 
achieves a satisfactory running time (i.e., within 
1 sec.) even when the dataset size is so large. 
The result also shows that even when data is 
anti-correlated, its impact on RCA is limited. Its 
performance is only slightly worse than the 
performance of uniformly distributed data. The 
increase in computation cost for anti-correlated 
datasets is mainly due to the fact that the number 
of combinatorial skyline tuples in an 
anti-correlated dataset is greater than that in a 
uniformly distributed dataset.  
(B) Effect of Dimensionality (d): The datasets 
with dimensionality d varying from 4 to 10 and 
data size = 100 are used in the experiment.  
[5] Li, C., Ooi, B.C., Tung, A.K.H., Wang, S.: Dada: a data 
cube for dominant relationship analysis. In: SIGMOD 
Conference, June 2006, pp. 659–670 (2006) 
[6] Tan, K.L., Eng, P.K., Ooi, B.C.: Efficient progressive 
skyline computation. In: Proceedings of the 27th 
International Conference on Very Large Data Bases, 
September 2001, pp. 301–310 (2001) 
[7] Anderson, I.: A First Course in Discrete Mathematics. 
Springer, Heidelberg (2000) 
[8] Su, I.F., Chung, Y.C., Lee, C.: Top-k combinatorial 
skyline queries. Technical report, Department of Computer 
Science and Information Engineering, National Cheng Kung 
University(2009), 
http://dblab.csie.ncku.edu.tw/~emily/techreportgroupskyline
2009.pdf 
 
5 結果與討論 
本次計畫所提出的「針對前k筆群組天際線
的查詢系統框架」是前一年研究計畫「分散式
的無線感測網路中如何有效率的支援群組天
際線的查詢」。而在本年度的計畫中，相較於
前一年的計畫，我們完成了以下數項工作。 
z 前一年度的計畫主要針對分散式的感測
環境。而本次計畫內容主要針對集中式的資料
庫系統。我們在分散式的環境下，主要考量如
何在能力有限的傳輸媒介下產生群組資料，並
且提出適合分散式環境的方法找出群組天際
線。而在集中式的資料庫環境中直接套用感測
器環境中的方法來處理群組天際線的查詢是
非常沒有效率且不實用的。因此，本次計畫主
要針對集中式的環境探討如何有效率的解決
群組天際線的問題。 
z 除了環境的不同之外，我們發現在分散
式的感測環境中，每一個感測器所要處理的資
料量是有限的。而在集中式的資料庫系統中則
匯集眾多的資料。由於群組天際線的組合是隨
著原始的資料呈指數成長。換言之，當資料越
來越多的時候，所產生的組合個數也越多。越
多的組合產生，尋找符合使用者需求的組合天
際線就越困難。因此我們需要提出一個更有效
率的方法來完成此演算法。 
z 我們在這一次的計畫中，使用者可以在
搜尋群組天際線的過程中，根據個人的喜好給
定條件，例如針對組成群組的資料個數限制，
或針對一個或多個屬性給定條件的限制，及針
對使用者的偏好決定回傳資料的個數。我們在
這裡主要探討如何有效率的找出前 k 筆符合
使用者需求的群組天際線。由於每一個使用者
的需求不同，給定條件後搜尋的方式也必須不
同。因此直接套用我們在上一年度所提計畫中
用來解決群組天際線的方法是不適用的。我們
必須針對這些問題做更詳盡的探討，並且提出
更有效率的方式。 
 
6 計劃成果自評 
研究內容與原計畫相符程度：100 % 
達成預期目標情況：100 % 
研究成果的學術或應用價值： 
目前完成演算法模擬並可在實際系統中
去運作。同時，我們也將相關的理論基礎寫成
論文投到國際知名的會議期刊上。迄今，我們
已發表的和本計劃相關的著作有： 
1. I-Fang Su, Yu-Chi Chung, Chiang Lee, 
Yi-Ying Lin,“Efficient Skyline Query Processing 
in Wireless Sensor Networks,” accepted and to 
appear in Journal of Parallel and Distributed 
Computing (JPDC), 2010. 
2. I-Fang Su, Yu-Chi Chung, and Chiang Lee, 
“Top-K Combinationatorial Skyline Queries,” 
Proceeding on DASFAA , 2010. 
3. Yi-Chung Chen and Chiang Lee,“Depth-k 
Skyline Query for Unquantifiable Attributes in 
Distributed Systems,” in International 
Conference on Artificial Intelligence and Soft 
Computing (ASC), Crete, Greece, June 22-24, 
2011. 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/26
國科會補助計畫
計畫名稱: 設計與實作一個針對前k筆群組天際線的查詢系統框架
計畫主持人: 李強
計畫編號: 99-2221-E-006-133- 學門領域: 資料庫系統及資料工程
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
