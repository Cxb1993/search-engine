摘要 
邊線是用來偵測道路標識及車牌之重要依據之一，而路標及車牌一般
都有其特定的顏色，因此經由特定顏色間邊線的偵測，可以更準確的找到
屬於路標或車牌上的邊線，減少其它邊線的存在，如此我們可以更快速及
有效的偵測到路標及車牌所在的位置。在本專題中，我們設計了一個可以
即使偵測路標及車牌上邊線的硬體架構，此硬體架構不但可以用來偵測路
標及車牌上的邊線，亦可依據使用者的需要來偵測一些特定顏色目標物之
邊線，最後我們以 FPGA來實施此一硬體架構。 
關鍵詞：道路標識、車牌、彩色邊線偵測 
 
Abstract 
Edge is the important feature to detect road sign and license plates. In 
general, road sign and license plate have the special colors, so we can detect the 
edges that belong to road signs or license plates by detecting the edges between 
two special colors. By the special color edges we can effectively and precisely 
locate the road sign and license plate. In this project, we design a hardware 
architecture that not only can detect the edges of road sign or license plate, but 
also can detect the edges of any special color object. Finally, we use FPGA to 
implement this architecture. 
Keywords: road sign, license plate, color edge, FPGA 
 
 1
 
研究方法 
 在本年度計劃中，我們以彩色邊線偵測的方法來偵測道路標識及車牌上的邊
線，並上年度計劃中所完成的可程式形態學處理器，將道路標識或車牌上的邊線
聚集成塊，並去除其它非屬於路標或車牌上的邊線，使得我們更可以準確的找到
路標及車牌的位置，最後我們以 FPGA完成此硬體架構。而在此報告中我們將著
重於彩色邊線的方法，及其硬體架構。 
 
1. Color Edge Detection 
 因為任何顏色都是由紅、綠、藍(Ｒ，Ｇ，Ｂ)三種基本顏色所組成的，因此
要找出不同顏色間的邊線，可以針對這三種不同顏色成份(Ｒ、Ｇ、Ｂ)做邊線偵
測，其邊線偵測的方法有 difference operator, Prewit operator, and Sobel operator
等。在本計劃中我們採用 difference operator，即對 R、G、B三種顏色成份，分
別去計算左右相鄰兩點的差值，以及上下相鄰兩點的差值，如(1)、(2)式所示。
並取此兩個差值之絕對值中的最大值，做為此種顏色成份的邊線，如(3)式所示
如此即可以得到 R、G、B三種顏色成份上的邊線。如圖 1所示，圖 1(a)為輸入
影像，圖 1(b)、(c)、(d)分別為紅、綠、藍三種顏色之邊線。若是取此三者(R、G、
B之差值)的最大值當邊線的話，亦即 ),,( ),(),(),(),( yxyxyxyx bgrMaxEdge ∆∆∆= 則可
以找到影像中的所有顏色之邊線，如圖 1(e)所示。 
⎪⎩
⎪⎨
⎧
−=∆
−=∆
−=∆
−
−
−
),1(),(),(1
),1(),(),(1
),1(),(),(1
yxyxyx
yxyxyx
yxyxyx
BBb
GGg
RRr
                          (1) 
⎪⎩
⎪⎨
⎧
−=∆
−=∆
−=∆
−
−
−
)1,(),(),(2
)1,(),(),(2
)1,(),(),(2
yxyxyx
yxyxyx
yxyxyx
BBb
GGg
RRr
                           (2) 
⎪⎪
⎪⎪
⎪
⎩
⎪⎪
⎪⎪
⎪
⎨
⎧
⎪⎩
⎪⎨
⎧ ∆>∆=∆
⎪⎩
⎪⎨
⎧ ∆>∆=∆
⎪⎩
⎪⎨
⎧ ∆>∆=∆
otherwise       ∆
if       ∆
otherwise       ∆
if       ∆
otherwise       ∆
if       ∆
2
),(2y)1(x,1
),(
2
),(2y)1(x,1
),(
2
),(2y)1(x,1
),(
(x,y)
yx(x,y)
yx
(x,y)
yx(x,y)
yx
(x,y)
yx(x,y)
yx
b
bbb
b
g
ggg
g
r
rrr
r
               (3) 
 
     
(a)     (b)     (c)     (d)     (e) 
圖 1 三原色之邊線 
 
然而在絕大多數的應用中，我們不需要找出所有的邊線，而是要找出我們所
需要的邊線，如此可以大量的減少其它不相關的顏色間邊線之干擾，所以在本計
劃中我們以找出所要的顏色邊線為主。基本上所有的顏色間的邊線都可以由紅、
 3
)()( 2sgn),,(1sgn),,( xbgrxxbgrx CXCXSgn ⊗Π+⊗Π= ∈∈             (6) 
其中 Π是邏輯的 AND運算 
⊗為還輯的反互斥-或(Execution-Nor)運算 
+為邏輯的 OR運算 
 
 當然我們並不需要去檢查每一個差值的極性，只要檢查我們所需要的顏色極
性就可以了，例如要找紅-白間的邊線，則紅色點為[1,0,0]T，白色點為[1,1,1]T，E 
= [1,0,0]T⊕[1,1,1]T=[0,1,1]T，表示我們只需考慮綠色跟藍色成份就可以了，不需
考慮紅色成份，所以也不需考慮紅色差值的極性，因此(6)可以被重新定義如下： 
 )()( 2sgn),,(1sgn),,( xxbgrxxxbgrx ECXECXSgn +⊗Π++⊗Π= ∈∈         (7) 
其中 Π 為邏輯的 AND operator 
⊗為還輯的反互斥-或(Execution-Nor operator)運算 
＋為邏輯的 OR operator 
  為邏輯的
1.d
B 為 ,1] R、G、B值都會很高
NOT operator 
. 差值的大小比較： 
不同顏色間的邊線，其R、G、B三種顏色的差值也會有明顯的大小之分，藉
由這些差值的比較我們可以判定那些邊線是我們所需要的。例如以紅-白間的邊
線為例，紅色以[1,0,0]表示紅色點中R、G、B值的大小，除了R值較高(1)外，其
它、G、 的值都會較低(0)，而白色 [1,1 表示其 ，所以R
的差值 r∆ 應該小於G、B上的差值 g∆ 和 b∆ 亦即 brg ∆<∆∆  and 。而這些
差值的大小與E=[E
r <∆
r,Eg,Eb]是一致的，亦即當 1),,( =∈ bgrxE 時表示該顏色應該會有一
個較高的差值。再 此紅-白間邊線為例，E=C以 ⊕[1,1,1] 1⊕C2=[1,0,0]T T =[0,1,1] T，
其中Er=0，表示 r∆ 是一個較小的值，而Eg，Eb都為 1表示 g∆ 和 b∆ 是比較大的
值。因此由[Er,Eg,Eb]我們就可以知道所要的邊線之R、G、B三種顏色的差值大小
為何，如表 1.所示。而這些差值的比較Dc可以用(8)式之布林方程式來表示，當
Dc=0時，表示 的  
表 1. 不 邊線
這些邊線不是我們所需要 。
同顏色間的 r∆ g∆， 和 b∆ 之大小比較 
E=[ b]Er,Eg,E r∆ ， g 和∆ b∆ 大小關係
0,0,0 Don’t care 
0,0,1 bbr ∆<∆∆<∆ g  and   
0,1,0 ggr ∆<∆∆<∆ b  and  
0,1,1 gbr ∆<∆∆<∆ r  and   
1,0,0 gbr ∆>∆∆>∆ r  and   
1,0,1 brg ∆<∆∆<∆ g  and  
1,1,0 grb ∆<∆∆<∆ b  and  
1,1,1 g∆≈∆≈∆ br  
 5
G(x,y)、B(x,y)經過水平差值計算後，可以R、G、B三者的差值之絕對值 1r∆ ， 1g∆
和 1b∆ 以及這些差值的極性R１sgn、G1sgn、B1sgn這些差值及極性經由邊線選擇器作
選擇之後就可以找出垂直方向的邊線(Vertical Edge)EV(x,y)。而當I(x,y)經過垂直差值
計算及邊線選擇之後就可以得到水平方向的邊線(Horizontal Edge) EH(x,y)。取垂直
邊線EV(x,y)跟水平邊線EH(x,y)的最大值就是我們所要的彩色邊線。而在實際的應用
中或許我們只需單獨使用水平邊線，或垂直邊線，因此我們多加了垂直邊線的選
擇控制VeS及水平邊線的選擇控制HeS來決定我們是否要使用垂直邊線或水平邊
線，或者兩者皆要使用。 
 
Horizontal Difference 
Calculator 
Vertical Difference 
Calculator 
Edge 
Selector 
Max I(x,y) 
Ev(x,y) 
Eh(x,y) 
Edge(x,y) Edge 
Selector 
VeS 
HeS 
Color 
identifier 
 
MUX 
 “0” 
 
圖 2 邊線偵測之硬體架構 
 
 以下我們將分別針對整個系統控制、差值計算及邊線選擇等加以介紹。 
 
2.1 系統的控制 
 為了使整個系統達到可程式規劃的目的，我們設計了一個控制字組來規劃整
個系統的運作，控制字組的格式如圖 3.所示，分為 9個位元，其中C1r,C1g,C1b用
來選擇第一種顏色，C2r,C2g,C2b是用來選擇第二種顏色，HeS則是用來選擇是否偵
測水平邊線，VeS則是用來選擇是否偵測垂直邊線，最後FcS是用來選擇所有顏色
的邊線。 
 
FcS HeS VeS C2b C2g C2r C1b C1g C1r
圖 3. 控制字組(Control Word)之格式 
 
2.2 差值的計算 
 在本計劃中我們對R、G、B三種顏色分別計算其水平方向的差值及垂直方向
的差值。以紅色為例，其差值計算的電路如圖 5.所示，首先將輸入R(x,y)延遲一個 
T時間(one clock cycle)成為R(x-1,y)就可以跟目前所輸入的R(x,y)做相減的動作以求
出其差值 。而減法器的借位輸出(Borrow-Output, Bo)，則是用來做為此差
值的極性位元(Sign Bit)，而此極性位元也可以用來控制取絕對值的電路
(Absoluter)，當此極性位元為 0時，則表示
),(1 yxr∆
),(1 yxr∆ 為一正數，不須做任何改變，
否則表示 為一負數，須取其 2補數以求得其絕對值),(1 yxr∆ ),(1 yxr∆ 。所以在紅色的
水平差值計算電路中，我們可以得到水平方向的差值之絕對值 ),(1 yxr∆ 及其極性
R1sgn(x,y)。 
 7
 Color Enable主要是用來決定那些顏色是我們需要的，那些顏色不是我們需
要的。其方法是由我們所要偵測的兩種顏色成份C１=[C1r, C1g,C1b]T及
C2=[C2r,C2g,C2b]T，來決定那些顏色的差值是我們所需要的，我們以E=[Er,Eg,Eb]T來
表示，而E= C１⊕C2，即Er= C1r⊕C2r、Eg= C1g⊕C2g、Eb = C1b⊕C2b，其中⊕為
Exclusive-OR Operator。 
 
b. 差值選擇器(Difference Selector)： 
 差值選擇主要就是要實現(4)、(5)式，也就是要從我們所要的顏色中選擇一
個最小的差值(mD)做為所要的邊線，其架構如圖 7.所示。在圖 6.中我們以三個
差值致能電路來過濾不需要的顏色差值，當致能控制 =1時，表示我們會
用到x這種顏色，所以其輸出為
),,( bgrxE ∈
x∆ ；否則若Ex=0，表示我們不會用到x這種顏色，
所以其輸出為一個最大值(255)。最後這些被選到的顏色差值，經過兩個取最小
值電路後，就可以得到我們所要的最小差值(mD)。 
 
Difference 
Enable 
Difference 
Enable 
Difference 
Enable 
r∆  
b∆  
g∆  
Er 
Eg 
Eb 
Min 
Min mD 
dr 
dg 
db 
 
圖 6 差值選擇 
 
c. 差值比較器(Difference Comparator)： 
 差值比較器主要是根據我們所選擇的顏色，來比較 R、G、B三種顏色差值
的大小，以決定是否偵測到所要的邊線，其架構如圖 7.所示。在圖 7.中我們以三
個比較器來比較三種顏色差值的大小，及一個相近值檢查電路來檢查這三種顏色
差值是否接近。這些比較器比較的結果及近似值檢查結果，最後經由一個 8對 1
的多工器(Multiplexer)就可以實現(8)式之運算。此架構亦可用來做顏色的確認。 
  
 
Comparator 
Approximation
Check 
Comparator 
Comparator 
b∆  
r∆  
g∆  
a 
b 
a 
b 
a 
b 
a>b 
b>a 
a>b 
b>a 
a>b 
b>a 
 
8 to 1 
Multiplexer 
I0
I1 
I2 
I3 
I4 
I5 
I6 
I7 20 21 22 
Dc 
Er Eb Eg 
0 
R>G 
G>R 
B>R 
B>G 
G>B 
R>B 
 
圖 7. 差值比較器 
 
 9
