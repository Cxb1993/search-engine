行政院國家科學委員會輔助專題研究計畫成果報告
計畫名稱:硬即時系統的相依性工作之節能排程方法
（Energy-Efficient Scheduling of Dependent Tasks in Hard Real-Time Systems）
計畫編號：NSC 99-2628-E-251-001
執行期限：計畫自民國99年8月1日起至民國100年7月31日止
主持人： 吳卓俊 國立屏東商業技術學院資訊工程系
計畫參與人員：周世民、柯凱朧、王宏竹、林家康、宋怡萱
國立屏東商業技術學院資訊工程
中文摘要
節能省電是當前軟硬體設計與實作的重
要課題，具備動態電壓調整能力的DVS處
理器可提供數個不同的處理速度，若能適
切地決定工作執行所採用的速度，將可為
即時系統節省大幅的電源消耗。本研究計
畫針對會存取共享資源的相依性即時工
作的節能排程問題，探討如何能兼顧即時
系統的時間限制與節省耗電量的需求。
以固定式優先權的rate monotonic schedulng
(RMS)排程方法為基礎，提出固定式優先
權的節能排程方法，並搭配priority ceiling
protocol(PCP)，針對可搶先的相依性即時工
作進行排程。透過數理分析與實驗驗證，
我們所提出的方法具備良好的系統效能與
節能表現。
關鍵字：動態電壓調整、即時系統、工作
排程、工作同步、相依性工作。
Abstract
Energy-efficient designs have become an
important issue in modern hardware and software
implementations. Dynamic voltage scaling (DVS)
processors, which support different operating
voltages and speeds, can efficiently reduce energy
consumption by making appropriate decisions
on the processor voltage/speed for scheduling of
real-time tasks. This project addresses the prob-
lem of energy-efficient real-time task scheduling
where the tasks are dependent due to exclusive
access shared resources. We are interested in
how to find a schedule in which all tasks will
meet their deadlines and the energy consumption
is minimized. We will propose scheduling
algorithms for preemptible, dependent periodic
real-time tasks with a fixed assignment policy,
such as the rate monotonic (RM). The proposed
algorithms also have capability to function with
a resource access protocol, such as the priority
ceiling protocol (PCP). Based on theoretical
analysis and experiments, it showed that the
proposed algorithms outperform existing work.
Keywords: Dynamic Voltage Scaling, Real-
Time Systems, Task Scheduling, Task Synchro-
nization, Dependent Task
1 Introduction
Based on the dynamic voltage scaling (DVS)
technique, energy-efﬁcient scheduling of real-
time tasks has been extensively explored in the
recent years [1, 2, 3, 4, 5, 6, 7]. Most work,
however, has focused on dynamic energy man-
agement  for  scheduling  of  independent  real-
time tasks. Little work is done in scheduling
and synchronizing of dependent real-time tasks
for minimizing energy consumptions.
A dependent  real-time  task  may  mutually
exclusive  access  shared  resources. When  a
1
arrival time Ai,j plus the relative deadline Di of
the task. We say a task instance τi,j meets the
deadline if it is completed at or before its dead-
line (i.e., Ai,j +Di), and it misses the deadline
otherwise. Moreover, we deﬁne the utilization
of a task τi as Ui =
Ei
Ti
to represent the ratio
of total processing time used to execute τi on
the processor. Furthermore, we consider well
formed tasks which satisfy 0 ≤ Ci ≤ Di ≤ Ti,
∀τi ∈ τ . We also assume that the relative dead-
line is equal to the period, i.e., Di = Ti.
A task may access one or more shared re-
sources (e.g., shared variables, data objects, or
ﬁles) during its execution. We assume that a set
of m shared resources R = {r1, r2, . . . , rm}
can  be  accessed  in  the  system. The  access
control of shared resources is assumed to be
guarded by semaphores. For convenience, we
assume  that  before  a  task τi accesses  a  re-
source rj , the task must lock the correspond-
ing semaphore semj and, when a task termi-
nates, it must unlock all of its semaphore locks
(release them in the reverse order). A task τi
is said to be blocked when the lock of semj
is rejected due to the conﬂict access with an-
other lower priority task. Let Bi be the max-
imum blocking time of a task τi which is the
maximum time that τi can be blocked by an-
other lower priority task. On the other hand, a
task is said to be executed in its critical section
when the task has granted access to a shared re-
source. Let Zi =< zi,1, zi,2, . . . , zi,ni > be the
list of critical sections of a task τi, where zi,j is
the jth critical section of τi and it corresponds
to the code segment between the jth locking op-
eration and its corresponding unlocking oper-
ation. We assume that tasks and their critical
sections are preemptible. In this project, we as-
sume that critical sections are properly nested.
Particularly, locks are released in the reverse or-
der from which they were obtained.
For  ease  of  presentation, we  deﬁne  some
sets  to  represent  the  resource  usages. Let
ResourceSet(τi) and AccessedBy(rj) be the
set of shared resources which may be accessed
by τi and the set of tasks which may access rj .
Let Status(rj) = {Lock|Unlock} be the status
of the resource rj . We also use LockedBy(rj)
to denote the task which locks rj .
2.2 Processor Model
In this project, we are interested in real-time
task scheduling and synchronization on a non-
ideal DVS processor which supports a set of
k discrete speed levels S = {s1, s2, · · · , sk},
where s1 < s2 < · · · < sk. Note that the pro-
cessor speed is approximately proportional to
the supply voltage. The supply voltage of a pro-
cessor speed si is denoted as vi, for 1 ≤ i ≤ k.
Let smin and smax denote the lowest and high-
est speed levels (i.e., smin = s1 and smax = sk),
respectively. Without lose of generality, we as-
sume the smax is 1 and all other speed levels are
normalized with respect to the maximum speed
smax.
The dynamic power consumption is deﬁned
by a function of processor speeds PC(si) for
si ∈ S . We assume that the power consumption
function is a convex and increasing function.
Note that this assumption is widely adopted in
the literatures (e.g., Aydin et al. [[1];[18];[19];
[20]], [4], [7], [10], Elewi et al. [[13]; [14]],
Chen et al. [[21];[22]]). Let s(t) be the pro-
cessor speed adopted in time t, the energy con-
sumption in  time interval (t1, t2] can be  ob-
tained by
∫ t2
t1
PC(s(t)) dt.
2.3 Problem Deﬁnitions
Let lcm denotes the least common multiple
of all tasks' periods (also called hyperperiod).
Since the task set T repeats an identical execu-
tion trace every hyperperiod, we only need to
examine the time interval (0, lcm] for analyz-
ing the performance and schedulability of the
entire schedule [15]. The research problem and
its NP-hardness are as follows:
Problem 1 DVS Scheduling and Synchroniza-
tion of Hard Real-Time Tasks (DVS-SS Prob-
lem)
Given a set of n dependent hard real-time tasks
T = {τ1, τ2, . . . , τn} and a set of m shared re-
sources R = {r1, r2, · · · , rm}. The problem is
to schedule T and to synchronize their accesses
of  shared  resources R on  a  DVS processor
which supports a set of k discrete speed levels
NSC 99-2628-E-251-001 精簡報告 共 8頁 第 3頁
inherit the execution speed of τx,y (i.e.,Hx) dur-
ing the blocking. After the blocking, τi,j will
resume its execution speed to L. Note that the
speed inheritance is transitive.
3.4 Dynamic Speed Adjustment
In this subsection, we will propose a dynamic
speed adjustment method to save more energy.
Let τi,j and τx,y be two task instances in INT
mode and BLK mode, respectively. The prior-
ity of τi is less than τx's priority, i.e., P (τi) <
P (τx). According to DEMS algorithm, the ex-
ecution speeds of τi,j and τx,y are L and Hx,
respectively. We shall adjust tasks' execution
speeds dynamically when the following situa-
tions occur:
1. the execution speed of τi,j will be adjusted
temporary from L to Hx when τi,j blocks
τx,y. After the blocking, τx,y will resume
its execution and τi,j 's execution speed will
be adjusted back to L.
2. the execution speed of τx,y can be adjusted
form Hx to L when τx,y ﬁnishes its execu-
tion of the critical section and there is no
blocking situations was happened.
Note that the algorithm with the proposed dy-
namic speed adjustment method is denoted as
DEMS-SA.
3.5 Reduce The Processor Speed
The low speed L can be reduced to reduced
low speed L′ for saving more energy.
L′ = max
1≤i≤n
{L′i} (3)
whereL′i = min
sx∈S
{sx| min
(k,l)∈Requesti
∑i
j=1Ej
1
lTk
⌈ lTkTj ⌉
≤ sx} and Requesti = {(k, l)|1 ≤ k ≤ i, l =
1, · · · , ⌊Ti/Tk⌋}
We also derive a reduced H ′i (or called re-
duced high speed) of τi as follows:
H ′i = min
sj∈S
{(1 + Bi
Ei
)L′ ≤ sj} (4)
The algorithm is called E-DEMS (enhanced
DEMS) if the low speed L and the high speed
Hi are  replaced  by L
′
and H ′i, respectively.
Note  that  if  the  dynamic  speed  adjustment
method is adopted, the algorithm is called E-
DEMS-SA.
4 Performance Evaluation
The experiments described in this section are
meant to assess the capability of the proposed
algorithms DEMS, DEMS-SA, E-DEMS and
E-DEMS-SA in scheduling of dependent real-
time tasks in a DVS environment. In order to
understand and evaluate the performance of our
approaches, we have implemented a simulation
model of a DVS environment. The speed lev-
els of the DVS processor was 0.05 to 1 with an
increment of 0.05, i.e., smin = s1 = 0.05, s2 =
0.1, s3 = 0.15, . . . , sk = Smax = 1.
We  ran  simulations  with  8  approaches:
DEMS,  DEMS-SA,  E-DEMS,  E-DEMS-SA,
constant static slowdown (CSS) algorithm [4],
dual mode (DM) algorithm [3], and the base-
line  (BASE).  Similar  to  our  proposed  algo-
rithms, the  CSS algorithm schedules  depen-
dent tasks by the RM scheduling policy and
synchronizes them with the PCP. By consid-
ering the worst case blocking time of a task,
the CSS calculates a ﬁxed processor speed for
each task's execution. The DM algorithm de-
rives two speeds for task executing in two dif-
ferent modes. Although the DM algorithm and
our proposed DEMS algorithm share the same
concept of dual execution mode, DM uses SRP
as its concurrency control protocol. Note that
we  made  some assumptions  for  SRP imple-
mentation. We assumed that  the  number  of
each shared resource was 1. The preemption
level  of  each  task τi was  set  as  its  priority.
Also notice that  our approach can determine
task's execution mode earlier than the DM al-
gorithm. Therefore, more energy saving could
be obtained. The performance of the above al-
gorithms were normalized with respect to the
baseline algorithm for easy comparison. The
baseline algorithm, denoted by BASE, always
use the maximum speed (i.e., smax) to execute
tasks.
NSC 99-2628-E-251-001 精簡報告 共 8頁 第 5頁
 0
 0.1
 0.2
 0.3
 0.4
 0.5
 0.6
0.1 0.2 0.3 0.4 0.5 0.6
N
or
m
al
iz
ed
 E
ng
er
gy
 C
on
su
m
pt
io
n
Utilization
E-DEMS
E-DEMS-SA
DEMS
DEMS-SA
CSS
DM
 0
 0.1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
0.1 0.2 0.3 0.4 0.5 0.6
N
or
m
al
iz
ed
 E
ng
er
gy
 C
on
su
m
pt
io
n
Utilization
E-DEMS
E-DEMS-SA
DEMS
DEMS-SA
CSS
DM
(a) Type A workloads (b) Type B workloads
Figure 1: Normalized energy consumption with varying utilization for type A and type B workloads.
tions and non-critical sections) and ﬁxed prior-
ity. Based on the well-known rate monotonic
scheduling policy and priority ceiling protocol,
we propose a DVS scheduling algorithm, called
dual execution mode scheduling (DEMS) al-
gorithm, to divide the executions of tasks’ in-
stances into two modes and run at different pro-
cessor speeds such that the energy consump-
tion could be reduced without violating their
timing constraints. Furthermore, we also pro-
pose a dynamic speed adjustment method and
an enhanced DEMS algorithm to save more en-
ergy. We also perform a series of experiments
to evaluate the capability of  our approaches.
As a result, the performance can be more pre-
dictable while the energy consumption can be
reduced signiﬁcantly compared with other ex-
isting work.
For future research, we shall explore the min-
imization of energy consumption with a con-
sideration on a more complicated system archi-
tectures with different types of resources. We
believe  that  the  research  in  such  a  direction
could beneﬁt many energy-aware applications
for real-time systems.
6 計畫成果自評
本計畫之主要研究成果為即時系統的節
能排程方法. 由於目前相關研究成果大多聚
焦於indepent tasks,本計畫是少數針對相依性
工作進行探討的研究, 因此對於相關研究領
域與應用之拓展具備重要性. 相較過去其它
研究, 我們所提出的雙工作模式之判定與雙
執行速度之給定方法, 可有效降低系統的耗
電量並確保即時工作的可排程性. 相關成果
亦於2011年IEEE RTAS會議中進行報告並且
和與會專家學者進行交流, 目前本計畫衍生
的成果除一篇國際會議論文外, 另有一篇期
刊論文投稿ACM TECS審查中, 以及一篇期
刊論文撰寫中. 十分感謝國科會各位先進對
本計畫的支持, 讓本計畫得以順利執行. 未
來仍有待進一步探討包含動態優先權工作
與更複雜的系統架構下之節能排程方法. 希
望能在此一研究課題上得到更多更完整的
研究成果.
References
[1] H. Aydin, R. Melhem, D. Mosse´, and P. Mej´ıa-
Alvarez. Determining  optimal  processor
speeds for periodic real-time tasks with differ-
ent power characteristics. In Proceedings of
the IEEE EuroMicro Conference on Real-Time
Systems, pages 225--232, 2001.
[2] R. Jejurikar and R. Gupta. Energy aware task
scheduling with task synchronization for em-
bedded real time systems. In Proceedings of
the  International  Conference  on  Compilers,
Architecture and Synthesis for Embedded Sys-
tems (CASES), pages 164--169, 2002.
[3] Ravindra Jejurikar and Rajesh K. Gupta. Dual
mode algorithm for energy aware ﬁxed priority
scheduling with task synchronization. In Pro-
ceedings of the Workshop on Compilers and
Operating Systems for Low Power (COLP'03),
New Orleans, Louisiana, USA., September 27
2003.
[4] R. Jejurikar and R. Gupta. Energy aware task
scheduling with task synchronization for em-
bedded real time systems. IEEE Transactions
on Computer Aided Design of Integrated Cir-
cuits and Systems, 25(6):1024--1037, 2006.
[5] Jianli Zhuo and Chaitali Chakrabarti. Energy-
efﬁcient  dynamic  task  scheduling  algorithm
for dvs systems. ACM Transactions on Em-
bedded  Computing  Systems, 7(2), February
2008.
[6] P. Mej´ıa-Alvarez, E. Levner, and D. Mosse´.
NSC 99-2628-E-251-001 精簡報告 共 8頁 第 7頁
A Prediction-Based Approach for Energy-Efficient DVS Scheduling of
Dependent Real-Time Tasks ∗
Jun Wu
Department of Computer Science and Information Engineering
National Pingtung Institute of Commerce
Pingtung, Taiwan, R.O.C.
junwu@npic.edu.tw
Abstract
In this paper, we proposed an energy-efﬁcient algorithm
with a prediction method to schedule dependent real-time
tasks such that the energy consumption can be reduced.
The proposed prediction method divides task instances into
two execution modes: independent mode and blocked mode.
Our proposed DVS scheduling algorithm will assign two
processor speeds for executing tasks according to their ex-
ecution modes. The capability of our proposed approach
was evaluated by a series of experiments, for which we have
some encouraging results. In particular, the schedulability
can be guarantee and the performance could be more pre-
dictable while the energy consumption can be reduced sig-
niﬁcantly compared with other existing work.
1. Introduction
In the recent decade, many excellent scheduling algo-
rithms have been proposed to minimize the energy con-
sumption of real-time tasks based on the emerging dynamic
voltage scaling (DVS) technique. However, most previous
work focused on independent real-time tasks, little work
has been done for scheduling of dependent real-time tasks
which may exclusive access to shared resources.
Based on the well-known rate monotonic algorithm
(RM) [5] and priority ceiling protocol (PCP) [7], Jejurikar
and Gupta [1] ﬁrst proposed two algorithms for schedul-
ing dependent real-time tasks with ﬁxed priority and pre-
emptible critical sections. Their ﬁrst proposed algorithm,
called critical section maximum speed, always let the criti-
cal sections to be executed at the maximum available speed
and computes a ﬁxed processor speed for the executions of
non-critical sections. Their second algorithm, called con-
∗Supported in part by a grant from the National Science Council under
grant number NSC-99-2628-E-251-001.
stant static slowdown (CSS), uses one processor speed for
the executions of all tasks (both of critical sections and non-
critical sections) to reduce speed switches occurred in the
CSMS. Furthermore, Jejurikar and Gupta [3] have extended
their work to dynamic priority real-time tasks. They have
also introduced a concept, called frequency inheritance [2],
to reduce the blocking time when a task is blocked by a
lower priority task.
In this paper, we are interested in scheduling of depen-
dent real-time tasks with ﬁxed priority and preemptible crit-
ical sections in a DVS platform. We shall propose a predic-
tion method to divide task’s instances into two modes, and
an algorithm to schedule tasks with two processor speeds.
The capability of the proposed methodology is evaluated by
a series of experiments, for which we have some encourag-
ing results.
2. System Model and Problem Definition
2.1. Task Model
Consider a set of n hard real-time tasks T =
{τ1, τ2, . . . , τn} to be executed on a non-ideal DVS pro-
cessor. Each task τi is characterized by (Ai, Ti, Di, Ei).
A task τi is arrived at time Ai and releases an instance ev-
ery Ti time units. The worst case execution time and the
relative deadline of a task τi are deﬁned by Ei and Di, re-
spectively1. Note that the jth instance of task τi is deﬁned
by τi,j . We also deﬁne the utilization of task τi as Ui = EiTi .
The priority of a task τi is deﬁned by P (τi).
We assume that a set of m shared resources R =
{r1, r2, . . . , rm} can be accessed in the system. The ac-
cess control of shared resources is assumed to be guarded
by semaphores. A task is said to be executed in its criti-
cal section when it has granted access to a shared resource.
1The value of Ei is given by assuming that the processor is running at
the maximum speed level. We also assume that the Ti = Di for all τi ∈ T .
33
3.2. Execution Speeds
We derive two processor speeds, called the low speed
and the high speed, for tasks’ executions. The low speed,
denoted as L, is assigned to a task instance if it will not be
blocked by other lower-priority tasks (i.e., the task instance
is in INT mode); the high speed, denoted as Hi, is assigned
to a task instance τi,j if it might be blocked by other lower-
priority tasks (i.e., τi,j is in BLK mode). The deﬁnitions of
L and Hi are as follows:
L = min
Sj∈S
{Sj |
∑n
i=1
Ei
Ti
n(2
1
n − 1)
≤ Sj} (1)
Hi = min
Sj∈S
{(1 +
Bi
Ei
)L ≤ Sj} (2)
3.3. The PDS Algorithm
The prediction-based dual speed (PDS) algorithm is
summarized in the Algorithm 1.
Algorithm 1 PDS ALGORITHM
1: Task Scheduling The task which has the highest prior-
ity among all ready tasks can execute on the processor
(tie can be broken arbitrarily).
2: Concurrency Control When a task τi attempt to lock
a shared resource rj , the priority of τi must be higher
than the priority ceilings of all shared resources cur-
rently locked by tasks other than τi and rj is unlocked;
otherwise, the lock request is blocked.
3: Priority Inheritance A task τi uses its assigned prior-
ity, unless it locks some shared resources and blocks
higher-priority tasks. If a task blocks a higher-priority
tasks, it inherits the highest priority of the task blocked
by τi. When a task unlocks a shared resource, it re-
sumes the priority it had at the point of obtaining the
lock on the shared resource. The priority inheritance is
transitive.
4: Execution Speed For each task τi, we assign two pro-
cessor speed levels L and Hi for its execution. When τi
is predicted to be in INT mode, we will set its execution
speed as L; otherwise, it will be executed at Hi.
5: Speed Inheritance Let τi,j is a task instance in INT
mode, it is executed at speed L, unless it blocks another
higher-priority task. If τi,j blocks τx,y (we assume that
the priority of τi,j is lower than τx,y), it inherits the
execution speed of τx,y (i.e., Hx) during the blocking.
After the blocking, τi,j resumes its execution speed it
had at the point of the blocking occurs. The speed in-
heritance is transitive.
4. Properties
Let AEi,j denote the actual execution time of a task in-
stance τi,j . The following lemma shows that the actual ex-
ecution time always less than or equal to Ei
L
.
Lemma 1 The actual execution time of a task instance τi,j
is no more than Ei
L
no matter that the task is in INT mode
or BLK mode, i.e., AEi,j ≤ EiL for every τi ∈ T .
Proof. Let τi,j be an instance of task τi, for 1 ≤ i ≤ n.
Consider the following two cases:
1. If τi,j is in INT mode.
In this case, the actual execution time can be repre-
sented by AEi,j = EiL .
2. If τi,j is in BLK mode.
The actual execution time of a BLK-mode task in-
stance can be represented by
AEi,j =
Ei +Bi
Hi
Since Hi = min
Sj∈S
{(1 + Bi
Ei
)L ≤ Sj}, we have
AEi,j ≤
Ei+Bi
(1+
Bi
Ei
)L
= 1
L
Ei(Ei+Bi)
Ei+Bi
= Ei
L
According to the above two cases, the actual execution time
of τi,j both less than or equal to EiL .
Theorem 1 Given n dependent periodic real-time tasks
sorted in non-decreasing order of their periods. They can
be feasibly scheduled by PDS algorithm when the low speed
L and the high speed Hi for all τi ∈ T are exist.
Proof. The proof can be done by considering the utiliza-
tion factor of the given task set. Since Ei
L
/Ti is the frac-
tion of processor time spent in executing task τi (based on
Lemma 1), for all tasks, the utilization factor is
U ≤
n∑
i=1
(
Ei
L
/Ti) =
1
L
n∑
i=1
Ei
Ti
Since L = min
Sj∈S
{Sj|
∑
n
i=1
Ei
Ti
n(2
1
n −1)
≤ Sj}, we have
U ≤
n(2
1
n −1)
n∑
i=1
Ei
Ti
·
n∑
i=1
Ei
Ti
= n(2
1
n − 1)
The utilization is no more than the achievable utilization
factor derived from [5]. The proof is completed.
35
 1 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                   日期「 2011 年 4 月 22 日 
                                 
一︾參加會議經過 
第十七屆即時與嵌入式技術與應用會議(IEEE Real-Time and Embedded Technology and 
Applications Symposium︽RTAS)與 International Conference on Information Processing in Sensor 
Networks (IPSN)︾International Conference on Hybrid Systems (HSCC)︾International Conference on 
Cyber-Physical Systems (ICCPS)以及 Conference on Languages, Compilers, and Tools for Embedded 
Systems (LCTES)等會議共同組成Cyber-Physical Systems Week (CPSWEEK)於 2011年 4月 11-14日於
美國芝加哥 JW Marriott 飯店舉行︽其中 RTAS 的議程是從 4月 12 至 14 日〈 
本人於 2011/04/11 日中午抵達美國芝加哥 O’Hare 國際機場︽旋即於當日下午抵達會場完成
會議註冊並領取會議議程與論文集等相關資料︽並立即參與相關的 workshops 與 tutorials〈次日
RTAS 議程正式展開︽首先是由 UC Berkeley 的 David E. Culler 教授主講的 Keynote︽其講題為
Enabling A Sustainable Energy Infrastructure – A CPS Grand Challenge︽其後隨即展開為期三天的會
議〈與會首日除 Keynote 外,本人亦全程參加後續 Session 的論文發表︽包含上午 Session 1: 
Real-Time Communication︽以及下午的 Session 2: Scheduling (I)︾Work-in-Progress Session 以及 Poster 
and Demo Session︽晚間並參加 Reception〈本人所發表的論文係於Working-in-Progress Session 中進
行口頭報告︽並於稍後的 Poster and Demo Session 和與會的專家學者廣泛地討論交流研究議題〈第
二日早上則由 Pennsylvania 大學的 George J. Pappas 教授以 Wireless Control Networks: Modeling, 
Synthesis, Robustness, Security 為題進行 Keynote︽後續本人亦全程參與當日所有議程〈上午參加
Session 3: Formal Techniques and Modeling︽下午因為有平行 Sessions︽因本人研究興趣選擇參加
Session 4A: Scheduling II 以及 Session 5: Operating Systems︽晚上並參加 Banquet〈第三日則參加
Session 6: Timing Analysis and Compilers︾Session 7: Multiprocessors︾Session 8: Design for 
Predictability 以及 Session 9: Wireless Sensor Networks〈會議結束後︽因配合回程班機於 4/16 日上午
前往 O’Hare 國際機場搭機返回台灣︽攜回會議論文集與 CD片〈 
計畫編號 NSC≒99≒2628≒E≒251≒001 
計畫名稱 硬即時系統的相依性工作之節能排程方法 
出國人員
姓名 吳卓俊 
服務機構
及職稱 
國立屏東商業技術學院資工系 
助理教授 
會議時間 
2011 年 4 月 11 日至 
2011 年 4 月 14 日 會議地點 Chicago, Illinois, USA 
會議名稱 
第十七屆 IEEE 即時與嵌入式技術與應用會議 
17th IEEE Real-Time and Embedded Technology and Applications 
Symposium (IEEE RTAS) 
發表論文
題目 
一個以預測為基礎的相依性即時工作 DVS 排程方法 
A Predication-Based Approach for Energy-Efficient DVS Scheduling of 
Dependent Real-Time Tasks 
A Prediction-Based Approach for Energy-Efficient DVS Scheduling of
Dependent Real-Time Tasks ∗
Jun Wu
Department of Computer Science and Information Engineering
National Pingtung Institute of Commerce
Pingtung, Taiwan, R.O.C.
junwu@npic.edu.tw
Abstract
In this paper, we proposed an energy-efficient algorithm
with a prediction method to schedule dependent real-time
tasks such that the energy consumption can be reduced.
The proposed prediction method divides task instances into
two execution modes: independent mode and blocked mode.
Our proposed DVS scheduling algorithm will assign two
processor speeds for executing tasks according to their ex-
ecution modes. The capability of our proposed approach
was evaluated by a series of experiments, for which we have
some encouraging results. In particular, the schedulability
can be guarantee and the performance could be more pre-
dictable while the energy consumption can be reduced sig-
nificantly compared with other existing work.
1. Introduction
In the recent decade, many excellent scheduling algo-
rithms have been proposed to minimize the energy con-
sumption of real-time tasks based on the emerging dynamic
voltage scaling (DVS) technique. However, most previous
work focused on independent real-time tasks, little work
has been done for scheduling of dependent real-time tasks
which may exclusive access to shared resources.
Based on the well-known rate monotonic algorithm
(RM) [5] and priority ceiling protocol (PCP) [7], Jejurikar
and Gupta [1] first proposed two algorithms for schedul-
ing dependent real-time tasks with fixed priority and pre-
emptible critical sections. Their first proposed algorithm,
called critical section maximum speed, always let the criti-
cal sections to be executed at the maximum available speed
and computes a fixed processor speed for the executions of
non-critical sections. Their second algorithm, called con-
∗Supported in part by a grant from the National Science Council under
grant number NSC-99-2628-E-251-001.
stant static slowdown (CSS), uses one processor speed for
the executions of all tasks (both of critical sections and non-
critical sections) to reduce speed switches occurred in the
CSMS. Furthermore, Jejurikar and Gupta [3] have extended
their work to dynamic priority real-time tasks. They have
also introduced a concept, called frequency inheritance [2],
to reduce the blocking time when a task is blocked by a
lower priority task.
In this paper, we are interested in scheduling of depen-
dent real-time tasks with fixed priority and preemptible crit-
ical sections in a DVS platform. We shall propose a predic-
tion method to divide task’s instances into two modes, and
an algorithm to schedule tasks with two processor speeds.
The capability of the proposed methodology is evaluated by
a series of experiments, for which we have some encourag-
ing results.
2. System Model and Problem Definition
2.1. Task Model
Consider a set of n hard real-time tasks T =
{τ1, τ2, . . . , τn} to be executed on a non-ideal DVS pro-
cessor. Each task τi is characterized by (Ai, Ti, Di, Ei).
A task τi is arrived at time Ai and releases an instance ev-
ery Ti time units. The worst case execution time and the
relative deadline of a task τi are defined by Ei and Di, re-
spectively1. Note that the jth instance of task τi is defined
by τi,j . We also define the utilization of task τi as Ui = EiTi .
The priority of a task τi is defined by P (τi).
We assume that a set of m shared resources R =
{r1, r2, . . . , rm} can be accessed in the system. The ac-
cess control of shared resources is assumed to be guarded
by semaphores. A task is said to be executed in its criti-
cal section when it has granted access to a shared resource.
1The value of Ei is given by assuming that the processor is running at
the maximum speed level. We also assume that the Ti =Di for all τi ∈ T .
33
3.2. Execution Speeds
We derive two processor speeds, called the low speed
and the high speed, for tasks’ executions. The low speed,
denoted as L, is assigned to a task instance if it will not be
blocked by other lower-priority tasks (i.e., the task instance
is in INT mode); the high speed, denoted asHi, is assigned
to a task instance τi,j if it might be blocked by other lower-
priority tasks (i.e., τi,j is in BLK mode). The definitions of
L andHi are as follows:
L = min
Sj∈S
{Sj |
∑n
i=1
Ei
Ti
n(2
1
n − 1)
≤ Sj} (1)
Hi = min
Sj∈S
{(1 +
Bi
Ei
)L ≤ Sj} (2)
3.3. The PDS Algorithm
The prediction-based dual speed (PDS) algorithm is
summarized in the Algorithm 1.
Algorithm 1 PDS ALGORITHM
1: Task Scheduling The task which has the highest prior-
ity among all ready tasks can execute on the processor
(tie can be broken arbitrarily).
2: Concurrency Control When a task τi attempt to lock
a shared resource rj , the priority of τi must be higher
than the priority ceilings of all shared resources cur-
rently locked by tasks other than τi and rj is unlocked;
otherwise, the lock request is blocked.
3: Priority Inheritance A task τi uses its assigned prior-
ity, unless it locks some shared resources and blocks
higher-priority tasks. If a task blocks a higher-priority
tasks, it inherits the highest priority of the task blocked
by τi. When a task unlocks a shared resource, it re-
sumes the priority it had at the point of obtaining the
lock on the shared resource. The priority inheritance is
transitive.
4: Execution Speed For each task τi, we assign two pro-
cessor speed levelsL andHi for its execution. When τi
is predicted to be in INT mode, we will set its execution
speed as L; otherwise, it will be executed atHi.
5: Speed Inheritance Let τi,j is a task instance in INT
mode, it is executed at speed L, unless it blocks another
higher-priority task. If τi,j blocks τx,y (we assume that
the priority of τi,j is lower than τx,y), it inherits the
execution speed of τx,y (i.e., Hx) during the blocking.
After the blocking, τi,j resumes its execution speed it
had at the point of the blocking occurs. The speed in-
heritance is transitive.
4. Properties
Let AEi,j denote the actual execution time of a task in-
stance τi,j . The following lemma shows that the actual ex-
ecution time always less than or equal to Ei
L
.
Lemma 1 The actual execution time of a task instance τi,j
is no more than Ei
L
no matter that the task is in INT mode
or BLK mode, i.e., AEi,j ≤ EiL for every τi ∈ T .
Proof. Let τi,j be an instance of task τi, for 1 ≤ i ≤ n.
Consider the following two cases:
1. If τi,j is in INT mode.
In this case, the actual execution time can be repre-
sented by AEi,j = EiL .
2. If τi,j is in BLK mode.
The actual execution time of a BLK-mode task in-
stance can be represented by
AEi,j =
Ei +Bi
Hi
SinceHi = min
Sj∈S
{(1 + Bi
Ei
)L ≤ Sj}, we have
AEi,j ≤
Ei+Bi
(1+
Bi
Ei
)L
= 1
L
Ei(Ei+Bi)
Ei+Bi
= Ei
L
According to the above two cases, the actual execution time
of τi,j both less than or equal to EiL .
Theorem 1 Given n dependent periodic real-time tasks
sorted in non-decreasing order of their periods. They can
be feasibly scheduled by PDS algorithm when the low speed
L and the high speedHi for all τi ∈ T are exist.
Proof. The proof can be done by considering the utiliza-
tion factor of the given task set. Since Ei
L
/Ti is the frac-
tion of processor time spent in executing task τi (based on
Lemma 1), for all tasks, the utilization factor is
U ≤
n∑
i=1
(
Ei
L
/Ti) =
1
L
n∑
i=1
Ei
Ti
Since L = min
Sj∈S
{Sj|
∑
n
i=1
Ei
Ti
n(2
1
n−1)
≤ Sj}, we have
U ≤ n(2
1
n−1)
n∑
i=1
Ei
Ti
·
n∑
i=1
Ei
Ti
= n(2
1
n − 1)
The utilization is no more than the achievable utilization
factor derived from [5]. The proof is completed.
35
國科會補助計畫衍生研發成果推廣資料表
日期:2011/09/27
國科會補助計畫
計畫名稱: 硬即時系統的相依性工作之節能排程方法
計畫主持人: 吳卓俊
計畫編號: 99-2628-E-251-001- 學門領域: 計算機結構與計算機系統
無研發成果推廣資料
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
本計畫之主要研究成果為即時系統的節能排程方法。由於目前相關研究成果大
多聚焦於 indepent tasks，本計畫是少數針對相依性工作進行探討的研究，因
此對於相關研究領域與應用之拓展具備重要性。相較過去其它研究，我們所提
出的雙工作模式之判定與雙執行速度之給定方法，可有效降低系統的耗電量並
確保即時工作的可排程性。 
 
相關成果亦於 2011 年 IEEE RTAS 會議中進行報告並且和與會專家學者進行交
流，目前本計畫衍生的成果除一篇國際會議論文外，另有一篇期刊論文投稿 ACM 
TECS 審查中，以及一篇期刊論文撰寫中。十分感謝國科會各位先進對本計畫的
支持，使本計畫得以順利執行。未來仍有待進一步探討包含動態優先權工作與
更複雜的系統架構下之節能排程方法，希望能在此一研究課題上得到更多更完
整的研究成果。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
