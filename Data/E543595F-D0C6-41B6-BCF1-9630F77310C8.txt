（三）研究成果摘要。 
本研究計劃完成一個雛形對局計算器(combinatorial game calculator)之
設計。研究成果將發表於 2006 年 12 月舉行之 11th Conference on 
Artificial Intelligence and Applications，原稿請參見附錄。 
本計算器之主要功能包括： 
z 允許使用者以簡單的語法輸入遊戲規則。 
z 允許使用者以簡單的語法輸入遊戲的棋形位置。 
z 計算器會自動化簡遊戲棋形位置的數學描述式。 
z 計算器會自動分析遊戲棋形位置的結果狀態(outcome)。 
傳統的數字計算器(number calculator)只能用來計算數字運算式，本研究
計劃所設計的對局計算器(combinatorial game calculator)可進行組合對
局運算式的計算。廣義地說，組合對局是傳統數字的擴充，本計劃於組合數
字理論(combinatorial number theory)的發展將扮演一定之重要性。 
除了對於組合數字理論的研究學者提供一項有力的分析工具外，對局計算器
的本身亦可作為遊戲分析引擎，本計劃執行的成果對於電腦遊戲產業的未來
發展將有積極正面意義。有關泛用型組合對局計算機之應用研究，本計劃主
持人已獲國科會繼續補助，自 2006 年 8 月開始執行為期一年之研究，並預
計可完成該計算機之應用程式介面(API)設計。 
 
 
The first subgroup is numbers. A game G is 
called a number if all the elements in GL and GR are 
numbers and there is no element in G greater than or 
equal to any elements in GR. Integers are defined as: 
1 = {0|∅}, 
2 = {1|∅}, 
3 = {2|∅}, 
… 
n = {n-1|∅}.                         (9) 
 
Rationals are defined as: 
1/2 = {0|1}, 
1/4 = {0|1/2},               3/4 = {1/2|1}, 
… 
m/2k = { (m-1)/2k |(m+1)/2k }.       (10) 
These numbers (integer and rational) can be 
added as the usual ways. Numbers are well-orders, 
and there relations with 0 are clear. Hence, one can 
easily determine the outcome the any sum of 
numbers. 
 
1.4 Nimbers 
 
Another well-known game subgroup is nimber 
[3]. A game G is a nimber if all the elements in GL 
and GR are numbers and GL = GR. Nimbers are 
defined as: 
*1 = { 0 | 0}, 
*2 = {0, *1 | 0, *1}, 
… 
 *n = {0, *1, *2,…, *(n–1) |0, *1, *2,…, *(n–1)} (11) 
The addition of numbers is simple: adding the 
numbers binary without carrying. For example: *2 + 
*6 = *4. Clearly, nimber is closed under addition. For 
simplicity, *1 is denoted as * and named star. 
Each nimber (other than 0) is confused with 0. 
Hence one can easily determine the outcome of any 
sum of nimbers. 
 
1.5 Sumbers 
 
For each number d, there is a corresponding up: 
↑(d) = {↑(dL) , * | ↑(dR) ,*}.                      (12) 
The negation of up is called down. 
↓(d) = −↑(d).             (13) 
We use the notation m.↑(d) to denote the sum of m 
copies of ↑(d). A sumber S is a sum of ups, downs 
and star(*). 
S = ∑k=1,n ak. ↑(dk) + a0.* ,             (14) 
where ak , 0 ≤ k ≤ n, are integers. Clearly, sumbers 
are closed under addition. We use the notation G << 
H to denote that the sum of any copies of G is less 
than H. The ups have the following properties: 
0 < ↑(d1) < ↑(d2),  0 < d1 < d2,                  (15) 
0 << ↑(dn+1) –↑(dn) << ↑(dn) –↑(dn-1),       (16) 
↑(dn+1) + ↑(dn+1) –↑(dn) > *.                      (17) 
These properties are sufficient to determine the 
outcome of any sumber.
 
2. Game Calculator Overview 
 
In general, the analysis of combinatorial games 
contains the following steps: 
z Determine the mathematical rules of a 
combinatorial game. 
z Describe the positions of the game. 
z Simplify each of the positions. 
z Calculate the outcome of the game (sum of the 
positions). 
These steps usually involve heavy calculation; 
hence, a game calculator has become the common 
need from both combinatorial game researchers and 
users. Our goal is to design a calculator with the 
following functions: 
z Allow the user to input the mathematical rules 
of a combinatorial game. 
z Allow the user to input the positions of the 
game. 
z Automatically simplify each of the positions. 
z Help the user to calculate the outcome of the 
game. 
The game calculator indeed is a high-level 
language interpreter. Hence, users of the calculator 
may feel like writing a computer program. We call 
the language G. 
 
2.1 Game Notation 
 
The basic data type of G-language is game. There 
are three types of build-in games in the calculator: 
number, nimber and up. The following are some 
examples:  
 
number nimber sumber 
1 * ^ 
2.011 *(2) ^(2.011) 
  3^(2) 
 
Each number has an integer section and an 
optional rational section. The integer section is an 
integer expressed by the conventional way; the 
rational section is a string of 0’s and 1’s leading by a 
decimal point. The rational value is interpreted binary. 
program. Users of this game calculator are allowed to 
input the rules of various games through the 
definition of game functions and input the positions 
of various games through the description of game 
expressions; the system can thereafter analysis the 
optimal strategies for the games. In each of the next 
sub-section, an example game is illustrated. 
 
3.1 The Game of Nim 
 
Nim game is a classical combinatorial game. The 
game is played on a number of heaps of counters. 
Two players, L and R, alternatively take turns to 
move. On each of the players turn, the player is 
allowed to pick one heap and remove any number of 
counters from the heap. The player who removes the 
last counter is the winner. Nim game can be defined 
by the following function: 
Nim(n) 
{ 
 case 0:  0; 
default:  { Nim(k) : k = 0.. n −1 |  
    Nim(k) : k = 0.. n −1 }; 
} 
A Nim heap of n counters has the value Nim(n). 
Once the above function has been input into the 
calculator, users can query the value of any heap. For 
examples, when the user input “Nim(3)”, the 
calculator will output “*(3)”; when the user input 
“Nim(3) + Nim(7)”, the calculator will output “*(4)”. 
Users can also query the outcome of a Nim game. 
For example, when the user inputs “? Nim(3) + 
Nim(7)”, the calculator will output “first player win”. 
Indeed, each Nim heap of n counters has the value 
*(n). 
 
3.2 The Game of Kaleys 
 
The game of Kayles was introduced by Dudency 
and Sam Lord [1]. Two players, L and R, take turns 
knocking down one single pin or two adjacent pins in 
a row of bowling pins. The player who knocks down 
the last pin is the winner. Kaley game can be defined 
by the following function: 
Kaley(n) 
{ 
case 0: 0; 
 case 1: *(1); 
 default:  Kaley(k)+Kaley(n−k−1):k = 0.. n-1, 
  Kaley(k)+Kaley(n−k−2):k = 0.. n-2| 
  Kaley(k)+Kaley(n−k−1):k = 0.. n-1, 
              Kaley(k)+Kaley(n−k−2):k = 0.. n-2}; 
} 
A row of n bowling pins has the value Kaley(n). 
Once the above function has been input into the 
calculator, users can query the value of any bowling 
pins in a row. For examples, when the user input 
“Kaley(4)”, the calculator will output “*(1)”; Indeed, 
each Kaley row of n bowling pins has a value equal 
to some nimber. The nimbers for Kayles exhibit 
periodicity. The period is 12, but with 14 exceptional 
values at 0, 3, 6, 9, 11, 15, 18, 21, 22, 28, 34, 39, 57 
and 70. 
 
3.3 The Game of Partisan Kaleys 
 
This sub-section introduces the partisan version 
of Kayles. In partisan Kayles, L is allowed to knock 
down one single ping at a time. R is allowed to knock 
down two adjacent pins at a time, except for a single-
pin row. In the later case, R is allowed to knock down 
one single pin. This game can be defined by the 
following function: 
PK(n) 
{ 
 case 0: 0; 
 case 1: *(1); 
 default: { PK(k) + PK (n−k−1) : k = 0.. n-1| 
  PK(k) + PK(n−k−2) : k = 0.. n-2 }; 
} 
A row of n bowling pins has the value PK(n). 
Once the above function has been input into the 
calculator, users can query the value of any bowling 
pins in a row. For examples, when the user input 
“PK(3)”, the calculator will output “^(1)”; Indeed, 
each row of n bowling pins has a value equal to some 
sumber. The sumbers for partial Kayles exhibit 
periodicity. The period is 8. 
Table 1. The periodicity of partisan Kayles. 
n 8m+
0 
8m+
1 
8m+
2 
8m+
3 
8m+
4 
8m+
5 
8m+
6 
8m+
7 
 0 * ↓ ↑ * 0 ↓* ↑* 
 
4. Further Considerations 
 
We have finished a proto-type of the calculator. 
As illustrated in the previous section, the calculator 
can help the analysis of many combinatorial games. 
However, there is still much room to improve.  
 
z Recognize more elementary games. Currently, 
the calculator can recognize numbers, numbers 
and sumbers. It is a long-term effort in the 
combinatorial game community to explore 
more knowledge about game subgroups. We 
haven’t implement bynumbers [1] in this 
calculator yet, and expect to include them in a 
short time. In general, a well-studied game 
subgroup should have two minimum 
requirements; the simplification rule and the 
outcome rule should be known. We hope this 
calculator can keep updated when there is any 
new well-studied game subgroup. 
