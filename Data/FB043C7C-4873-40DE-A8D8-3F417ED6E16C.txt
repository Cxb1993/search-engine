中文摘要 
 
軟體發展就如同其他工程領域一樣，需要一個度量的機制提供軟體發
展過程中各種活動與產出的回饋與評估。然而，如何有效地協助軟體發展
人員實現軟體度量的程序與討論分析之結果是目前實務上最為關心的問
題。而在所有以目標為導向的軟體度量方法中，GQM是最廣為人所熟知，
也是目前業界應用最為廣泛的方法之一。GQM經由定義明確的度量目標開
始，透過問題的引導，不斷地細化度量目標，以協助度量人員根據度量目
標產生相對應的度量指標。此外，由於網路的迅速發展，訊息的存取與應
用有了革命性的改變－由原來的區域性、封閉性、與同質性擴展為全球性、
開放性、與異質性。為了有效的運用這些複雜的資訊，軟體代理人的觀念
漸漸的受到重視。由於代理人技術具備許多特性是傳統軟體所缺乏的，其
中又以自主性以及目標性更可以表現代理人技術有別於傳統軟體的特點。
因此，本研究計畫結合多代理人架構，將度量流程所牽涉之相關功能，利
用代理人服務的方式，設計一個以多代理人服務導向架構為基礎的軟體度
量系統，此系統由使用者輸入度量目標開始，協助問題的導入以及度量指
標的產生，以幫助軟體度量人員將GQM的方法導入軟體開發專案之中。 
 
關鍵詞：軟體度量、GQM、目標導向軟體度量分析、代理人、網路服務。
表 Y04 
一、前言 
Victor R. Basili教授指出[3]，軟體發展就如同其他工程領域一樣，需要一個度量的機制提供
軟體發展過程中各種活動與產出的回饋 (feedback) 與評估 (evaluation)。透過度量的機制，可以
幫助發展者了解、控制、預測、以及改善相關的流程、產出與資源。針對如何度量軟體發產過程
中的產出，許多研究人員提出許多的度量指標，協助度量軟體發展過程中的不同階段以及不同產
出，然而，軟體度量的目的不在於如何產生這些度量指標，而在於為何需要這些指標，希望透過
這些指標的度量，幫助我們了解什麼，又可以從中學習到哪些東西。因此，透過目標的方式，引
導出度量這些目標的度量指標，逐漸受到學術研究與工業界的重視。 
近年來，結合以目標為基礎和以使用者為中心的軟體發展方法，在軟體工程的研究領域上引
起了不少研究學者的注意。由於目標(goal)資訊在分辨、組織、校正軟體需求上提供軟體建置過
程中很多的資訊，因此，不僅在軟體開發流程中，有越來越多的研究學者將注意力投注在以目標
為軟體系統的需求分析與設計方法上[4, 5]，同時在軟體度量與分析領域中，透過目標為基礎的度
量方法也日益受到重視 [6, 7, 8] 。在這些以目標為基礎的軟體開發方法中，主要之焦點在於了解
系統為何被建置，而這項資訊於軟體系統開發過程中提供了軟體需求調整的動機與理由。基於相
同的觀點，在軟體度量的方法上，透過目標的導入與確認，可以幫助了解軟體系統為何需要被度
量，以及需要哪些度量指標(metrics)，以提供了解、控制、預測、進而改善軟體流程、軟體系統
以及相關資源的機制。 
在軟體度量技術中，GQM[1, 2, 3]扮演著一個重要的角色，其不僅在研究上具有重要的指標，
並且於工業的應用上更是廣泛地得到肯定，然而，GQM在問題 (questions) 的引導、目標的優先
性 (priority) 等方面缺少一個系統化的分析機制與工具，同時目前對於GQM的軟體支援也十分缺
乏，因此，我們結合之前對於目標的相關研究以及GQM的方法，發展一個目標導向度量與分析的
方法 (Goal-Driven Measurement and Analysis based on GQM; G2QM)，此方法以GQM為基礎，
透過GDUC[6]的分析機制，改進GQM的不足，並且利用服務導向架構實作相關的軟體系統。在本
計畫中，我們發展出一個利用GDUC擴充GQM的分析方法，透過GDUC所提供的目標結構 (goal 
structure)、目標導向使用案例 (goal-driven use cases)、以及目標互動 (goals interaction) 與目
標階層 (goals hierarchy) 的機制，幫助引導出相關的問題以產生度量指標與探討目標之間的優先
性。並制訂目標導向軟體度量與分析的相關步驟，描述目標導向軟體度量之各階段所使用的流程 
(processes)、方法 (methods) 與使用之工具 (tools)。 
 
表 Y04 
圖一：軟體度量系統之多代理人整體架構圖 
三、結果與討論 
 
本計劃利用GDUC的方法，我們可以得到各個使用者對於不同目標之系統循序圖，當
不同使用者的目標產生衝突時，我們可以利用衝突解決的方法，循序地(incremental)建立
系統之詳細類別圖 (detailed class diagram)(此類別圖包含物件類別、角色類別，角色類別
會進一步的細化為代理人類別)。這個類別圖包含不會產生目標衝突之靜態的物件類別關
係。同時，根據系統規格書中所定義之代理人服務以及互動關係，將代理人進行細部分類，
並且制定一個代理人服務與網際服務的對應關係圖，此對應關係圖可以將代理人服務對應
至以網際服務為基礎的服務導向架構之中。我們採用Gaia的方法來進行多代理人系統的設
計。Gaia將一個多代理人系統分為角色模型(role model)以及互動模型(interaction model)，
角色模型描述系統具備哪些角色，而互動模型展現這些角色之間的互動關係，以完成系統
的功能。因此，根據GQM所定義的方法與步驟(原始GQM可大致區分為三個步驟，GQ(I)M
則將之擴充為10個步驟)，我們制定五個GQM的步驟，分別由五種角色扮演，並且透過分
析這五種角色之間的互動關係，以詳細定義他們所具備的服務功能。 
 
以下我們所開發之多代理人服務導向架構的概念圖。 
 
表 Y04 
 
 
圖 3:使用者介面代理人之內部架構 圖 4:服務代理人之內部架構 
 
 
本年度我們也根據上述的架構，實作一個測試平台，以作為下階段整合代理人技術與網際
服務架構的實驗平台。該平台是以Java SE 5.0為實作語言，以Tomcat 5.0 for Java WSDP 1.4
為網頁伺服器，AppServ with MySQL 5為資料庫管理系統，以Eclipse 3.0.1為Java開發環境。
系統環境如下所述。我們配置一台Web Server與Client端溝通，一台DB Server負責資料庫
處理。我們使用Web Services以及Agent做為後端主要的架構。 
 
 
 
 
圖5為該平台的系統架構圖。我們的系統分為三個部分：網頁呈現（UI）、後端程式
（Core）以及資料庫（Database）。網頁呈現放了一般使用者登入之後會看到的網頁；後
表 Y04 
五、參考資料 
[1] V.R. Basili, C. Caldiera, and H.D. Rombach. Experience factory. in J.J. Marciniak (ed.), 
Encyclopedia of Software Engineering, Vol. 1, John Wiley & Sons, 1994. 
[2] V.R. Basili, C. Caldiera, and H.D. Rombach. Goal/Question/Metric paradigm. J.J. 
Marciniak, ed., Vol. 1, John Wiley, 1994.  
[3] V.R. Basili, R.W. Selby, and D.H. Huthchens. Experimentation in software engineering. 
IEEE Transactions on Software Engineering, (7):733--743, July, 1986. 
[4] A. Dardenne, A. van Lamsweerde, and S. Fickas. Goal-directed requirements acquisition. 
Science of Computer Programming, pages 3--50, 1993. 
[5] J. Mylopoulos, L. Chung, and B. Nixon. Representing and using nonfunctional 
requirements: A process-oriented approach. IEEE Transactions on Software Engineering, 
(6):483--497, 1992. 
[6] J. Lee and N.L Xue. July/August 1999. Analyzing user requirements by use cases: A 
goal-driven approach. IEEE Software, 16 (4):92-101. 
[7] Latum, Solingen, Oivo, Rombach, Hoisl, and Ruhe. Adopting GQM-based measurement 
in an industrial environment. IEEE Software, Jan/Feb 1998. 
[8] R. van Solingen and E.W. Berghout. The Goal/Question/Metric method: a practical guide 
for quality improvement of software development. McGraw-Hill Publishers, 1999. 
 
II. 與會心得 
 
本次會議，除了發表論文以外，大會邀請的 Keynote Speech 的確提供了很多未來複合式智
能系統領域的研究與發展之展望。本人亦參加了其中多場分組論文發表，從中學習不少新的技
術與知識，並與來自世界各國之學者互相交流彼此研究之成果與心得，此乃此次參與國際學術
與技術發展研討會之主要收穫之一。此外，本人此次除了在會議所在地瀋陽市參訪外，同時也
利用時間去北京旅遊參訪，對於中國大陸的各項進步印象深刻，尤其是會中大陸學生的認真程
度，因此回國後也將所見所聞與本人所指導的研究生討論交流。這次的出席，除了發表論文以
外，亦可與同領域獲不同領域的研究學者互相討論，在討論並接觸許多相關領域的研究成果後，
讓人訝異的是，當在與會的過程時，自己竟會產很多有趣的想法，我想，這應該算另外一種新
的體驗吧。這次的 HIS2009 之行，我相信能對未來的學術研究產生更多良性衝擊、並能提升學
術品質。 
 
 
III.考察參觀活動與建議 
 
此次會議在中國遼寧省瀋陽市舉行，本人利用會後時間，參觀瀋陽師範大學，以及瀋陽故
宮，對於其校園以及故宮之傳統歷史留下深刻印象。本次會議上，本人與一些研究學者、工業
界研發人員以及部分舊識交換了一些複合式智能系統的創新應用資訊，將對於本人未來在研
究、教學及指導學生從事研究有相當大的幫助。因此，在此特別感謝國科會之補助出席此次會
議，也希望未來本人的持續研究能夠對學術界及國內產業界有所貢獻。並且希望未來依舊有機
會獲得此項補助。以下是一些建議: 
1. 政府相關單位應該多鼓勵並補助國內學者參加大型學術研討會。 
2. 鼓勵國內各公私立大學爭取各學術研究學會來台舉辦國際學術研討會，提高台灣的國際
能見度，並能增加台灣觀光事業。 
3. 提升台灣國際語言如英語等外語能力。 
 
IV. 攜回資料名稱及內容 
 
本次國際複合式智能系統研討會共攜回資料如下： 
1. 研討會論文集光碟--Proceedings of Ninth International Conference on Hybrid Intelligent 
Systems (HIS 2009) 紙本與 CD 。 
2. 研討會紙本手冊(內含研討會簡介以及議程表) 
3. 主題演講投影片--Slides of keynote speech。  
 
V. 其他 
無。 
 
 
 
 
表 Y04 
2.1 Web Services 
IDC (International Data Corporation) points out 
that the future software design trend will be 
transferred from the Software as a Product to the 
Software as a Service. Therefore, service-oriented 
architecture (SOA) [4, 11] will become the 
mainstream in the future software design 
gradually. Web service [4] served as one kind 
implementation of SOA is gotten attention in 
recent years to provide a flexible interface for 
resources integration in the enterprise. The core 
parts (Fig. 1) of the service-oriented architecture 
are combined with service registry, service 
provider, and service requester (client). The 
service provider publishes the services to service 
registry by UDDI. The core functionality of the 
UDDI is to support the matchmaking mechanism 
for service requester and service provider. The 
service request can find the suitable services 
through UDDI and bind the services from service 
provider directly. SOAP is utilized to support the 
standard service access protocol between 
requester and provider, and the information 
exchange formats are provided by WSDL [6]. 
 
Fig. 1: The concept of the service-oriented 
architecture 
 
2.2 Goal/Question/Metric 
The Goal-Question-Metric (GQM) method is a 
goal-driven approach for software measurement 
based on the measurement goals. GQM model is a 
three level hierarchical structure (Fig. 2): 
conceptual level, operational level, and 
quantitative level. 
● Conceptual level (Goal). Measurement goals 
are determined in this level including the 
targets, purposes, and roles in the 
measurement program. 
● Operational level (Question). Questions 
derived from goals in this level to serve as an 
operational mechanism. 
● Quantitative level (Metric). A set of metrics 
for collecting data and analyzing the impact 
between data and goals. 
 
 
Fig. 2: The Concept of GQM 
 
Fig. 3 depicts the four phases of applying GQM 
method. The main activities of the planning phase 
are GQM team established and relevant resources 
prepared. In definition phase, the main 
functionalities of GQM method is applied to 
define the measurement goals, refine the goals 
into several questions, and then provide a set of 
data or metrics associated with the questions. 
Collection data phase executes the data collection 
based on the metrics specifying in the definition 
phase. Finally, the interpretation phase interprets 
and analyzes the collected data according to the 
questions and measurement goals. 
 
 
Fig. 3: four phases for GQM 
 
Goal (conceptual level)  
Major goals of the development project 
Questions (operational level) 
Questions derived from goals that must be 
answered to determine if the goals are achieved 
Metrics (quantitative level) 
Measurements that provide the most 
appropriate information for answering the 
questions 
表 Y04 
to refine the measurement goals into several 
questions. Metrics defining agents elaborate the 
measurement goals and questions to obtain the 
relative metrics and define the procedures of 
collecting and analyzing the measurement data. 
Measurement planning agents provide service for 
the user to integrate the measurement procedures 
and establish the software measurement plan. 
Finally, the measurement data agents are response 
for managing the collected measurement data. 
At the beginning of applying the system, the user 
interface agents and service agents will be 
registered into UDDI, and then the user can 
initialize the GQM process through the user 
interface (UI) provided by the user interface agent. 
User's interface agent looks for suitable service 
agents to offer services through UDDI 
matchmaking. Besides, the service agents can also 
find other service agents to provide integration 
services. Finally, the Measurement planning 
agents will complete the measurement plan 
integrated with goals, questions, and metrics and 
then present it to the user through user interface 
agents. 
 
 
Fig.5: Internal architecture of user interface agent 
 
The agents’ inside structure are shown in Fig. 5 
and Fig. 6, respectively. The Fig. 5 expresses user 
interface agent's inside structure. The inside 
structure of user interface agent is divided into 
three parts which are GUI module, Information 
Interpreter module, and Communication module. 
GUI module provides the data sheets and 
messages as well as accepting user’s input data. 
Information Interpreter module interprets and 
analyzes incoming message between the user and 
other agents’ input data and then translates it into 
the applicable formats for communication (for 
example, the data sheets to user and KQML to 
agents). Communication module is response for 
message exchange. 
 
 
Fig. 6: Internal architecture of service agent 
 
The internal structure of service agents is depicted 
in Fig. 6. Service agents are similar with user 
interface agent for providing the Interpreter and 
Communication model, but it does not need the 
GUI module and increases other two modules:  
Service Computing and Mental States. The Mental 
States is inspired from the BDI agents to describe 
the agent’s autonomy and proactively. The Service 
Computing module provides the different GQM 
services based on the type of service agents. 
 
Fig. 7: System architecture 
 
