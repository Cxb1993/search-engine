可組態仲裁器設計與效能分析 
Design and Performance Analysis of a Reconfigurable Arbiter 
計畫編號：NSC 95-2221-E-214-082 
執行期間：95年 8月 1日 至 96年 7月 31日 
主持人：黃有榕 義守大學電子工程系教授 
 
一、 中文摘要 
 
本研究計劃提出一個可組態之混合演算法
仲裁器和一個能夠快速模擬晶片匯流排系統的
效能分析平台。此混合仲裁器具備了最高優先
權、平均循環、先進先服務、隨機存取等四種
動靜態演算法，我們並針對此仲裁器在系統單
晶片上的效能進行模擬分析。根據不同仲裁演
算法配置下所得到的分析結果，可以得到一組
比一般傳統仲裁演算法更高效能的仲裁配置。
並藉由硬體的演算法選擇器和軟體的效能分
析，讓使用者針對整體的設計需求來調整仲裁
器的仲裁方式，增加其靈活性。本計劃研究重
點，主要是完成一個應用於晶片匯流排之可組
態混合仲裁器和軟體分析平台，並透過 FPGA
的硬體電路驗證。最後，藉由 Synopsys Design 
Compiler 以 TSMC 0.18 mµ 來合成仲裁器的邏
輯電路。 
關鍵詞: 系統單晶片; 晶片匯流排; 仲裁器; 仲裁演算
法 
 
英文摘要 
This project presents the performance 
analysis and implementation of an arbiter with a 
hybrid arbitration algorithm. The hybrid 
arbitration algorithms include static fixed priority, 
round robin, first come first service, and random 
access algorithms. The analysis of various 
combinations of the arbitration algorithms 
indicates a better performance can be achieved as 
compared with the traditional arbitration 
assignment scheme. Based on the performance 
analysis, the hybrid arbitration can be 
custom-tuned to meet the design requirements. 
The implementation of the arbiter with hybrid 
arbitration scheme for On-Chip Bus applications 
is also explained and was implemented by FPGA. The 
RTL model of the reconfigurable arbiter is 
synthesized to gate-level using Synopsys Design 
Vision with TSMC 0.18 mµ  technology file.  
Key Words: System-on-Chip; On-Chip Bus; Arbiter; 
Arbitration Algorithm 
 
二、 計畫的緣由與目的 
嵌入式系統是當今 IC 設計產業發展的重
心。現今可以將以前由 CPU和其他 I/O晶片合
成所實現的功能在一小塊晶片中實現出來，這
就是系統單晶片(System on Chip；SoC)。它能簡
化系統的複雜度、有效的提升設計使用率，縮
短開發的時程，減少設計時發生的錯誤，降低
系統的功耗[1]。在增加整個系統模組元件的數
量時，仲裁器的優劣對整體系統上扮演十分重
要的角色。一般傳統的晶片匯流排所採用的仲
裁演算法為靜態的最高優先權仲裁演算法和動
態的平均循環仲裁演算法[2]，此種演算法容易
造成匯流排渴求(bus starvation)的缺點。常見商
業上所發展制定的傳輸通訊架構，譬如 ARM 
的 AMBA bus [3] ，Silicore 的 Wishbone [4]，
OMI 的  PI-Bus [5]， Mentor Graphics 的 
FISPbus [6]，IBM 的 CoreConnect [7]，Sonics 
的 SiliconBackplane [8] ，VSIA 的 Bus[9] ，
 
圖二: 仲裁演算法的效率分析圖 
 
多次循環測試平均等待時間
0
100
200
300
400
500
600
M
0
M
1
M
2
M
3
M
4
M
5
M
6
M
7
M
8
M
9
M
10
M
11
M
12
M
13
M
14
M
15
平
均
等
待
時
間
)
42244
11111
 
圖三: 不同仲裁組態下的平均等待時間 
 
多次循環測試平均 Grant_Rate
0
20
40
60
80
100
120
M
0
M
1
M
2
M
3
M
4
M
5
M
6
M
7
M
8
M
9
M
10
M
11
M
12
M
13
M
14
M
15
G
ra
nt
 R
at
e
43342
11111
 
圖四: 不同仲裁組態下的 Avg. Grant Rate 
 
Avg.waiting time
0
50
100
150
200
250
300
350
400
450
43
31
4
11
34
1
44
31
1
11
11
1
43
13
1
43
23
1
43
22
1
13
43
1
31
33
1
13
13
1
13
33
1
13
31
1
31
13
1
33
33
1
13
14
1
13
23
1
32
13
1
33
33
3
44
44
4
22
22
2
平
均
等
待
時
間
數列1
 
圖五: 不同仲裁組態下 Avg. Waiting Time 
 
 
31344 33424 34344
31434 32314
13332 43332 23332
23332 13332
0
1000
2000
3000
4000
5000
6000
c8b32
c16b32
c32b32
c8b64
c32b64
c8b32
c16b32
c32b32
c8b64
c32b64
Block Size
A
vg
 w
ai
tt
in
g
 ti
m
e
Best Case Worst Case  
圖六: 不同資料傳輸方式下最佳與最差的仲裁
組態 
 
將本研究所提出的可組態之混合仲裁器電
路用 Verilog 撰寫完成後，再經 Design Compiler 
合成其 Gate-Level 電路。圖七為仲裁器經由 
Design Compiler 完成合成後所產生的區塊圖，
其中在合成後的訊息如表一所示。圖八為完成
合成步驟後，經由 SOC Encounter 來接序完成
佈局(Layout)的處理所產生的佈局圖。 
 
 
 
圖七: Design Complier 合成後的區塊圖 
 
表一:Design Compiler Report 
 Single layer 
Combinational area (µ㎡) 23155 
Noncombinational area (µ㎡) 44613 
Total cell area (µ㎡) 67768 
Cell Internal Power (mW) 46 
Net Switching Power  (mW) 4 
Total Dynamic Power (mW) 51 
Cell Leakage Power  (µW) 290 
計畫成果自評 
 
本研究內容與計畫相符並達成預期目標情況，先前研究成果已發表於國內外學術會議，參與之
學生亦將原構想之功能驗證並完成在其碩士論文之撰寫，希望國科會繼續補助此計畫以便繼續進行
此方面之研發改良，將成果進一步充實完善，使其成果發表於學術期刊或應用於實際 SOC 的匯流排
平台上。 
三、 考察參觀活動(無是項活動者省略) 
 
 
四、 建議 
本次會議由日、韓、中國大陸及其他亞太及歐亞國家前往比台灣為多，希望
政府可在此方面再資助經費讓更多人加入此研發領域。 
 
五、 攜回資料名稱及內容 
1. 攜回研討會論文集及光碟各一份 
 
六、 其他 
出席國際學術會議發表之論文詳見附件二 
 
 
 
ii
 2.  Reconfigurable Arbiter  
The Advanced Microcontroller Bus Architecture 
(AMBA) is an open System-on-Chip bus protocol 
for high-performance buses on low-power devices. 
The AHB is a pipelined system backbone bus, 
designed for high-performance operation. It can 
support up to 16 bus masters and slaves that can 
delay or retry on transfers. It consists of masters, 
slaves, an arbiter and an address decoder. It supports 
burst and split transfers. The address bus can be up 
to 32 bits wide, and the data buses can be up to 128 
bits wide. The AMBA uses conventional fixed 
priority arbiter. Fig. 1 shows the architecture of the 
reconfigurable arbiter presented in this work. As 
shown in Fig. 1, this reconfigurable arbiter can serve 
up to a maximum 16 masters and all of them are 
divided into four groups F1-F4 for the first level 
competition. According to different arbitration 
algorithms assigned in F1 ~ F4 blocks, each block 
will select one master from four input masters for the 
second level competition. The final granted master 
will then be determined by the arbitration algorithm 
chosen in block 5.  
 
 
Fig.1  Architecture of the reconfigurable arbiter 
  
In Fig. 1, each group (F1 ~ F5) can be reconfigurable 
to adapt a specific dynamic algorithm. For example, 
either one of the round-robin algorithm, random 
access algorithm or first-come-first-serve algorithm 
can be combined together to decide the functionality 
of the reconfigurable arbiter. With the reconfigurable 
functionality, it can assign different arbitration 
algorithms for specific groups of masters. In the 
following, each block (F1 ~ F5) will be assigned a 
number to denote the status of the reconfigurable 
arbiter. The notation 1, 2, 3, and 4 are used to 
represents fixed priority, round robin, first come first 
serve and random access algorithm, respectively. For 
example, the arbitration state (12141) denotes the 
fixed priority algorithm is assigned to functional 
blocks F1, F3 and F5, round robin algorithm is 
assigned to functional block F2, and random access 
algorithm is assigned to functional block F4. 
 
3.  Performance Analysis Methodology  
A system performance analytical module is proposed 
to examine the efficiency of the hybrid arbitration 
algorithm. The simulation strategy for performance 
analysis of the arbiter with hybrid arbitration schemes 
is divided into two parts: Traffic Pattern Generation 
(TPG) and Arbitration Simulator Generation (ASG) 
as shown in Fig. 2. The traffic patterns are generated 
based on the statistic distribution such as Bernoulli, 
Binomial, equilikely, Geometric, Pascal, Possion, 
Uniform, Exponential, Erlang, Normal, lognormal, 
Chisquare … etc. The simulations in this paper are 
based on the TPG which assign various distributions 
to indicate the data amount and bus request time for 
each master. For ASG, a behavior bus arbiter model 
based on Fig. 1 is used to take into account the effect 
of the shared bus communication architecture on 
system performance.  
 
 
Fig. 2 System performance analytical module 
 
 
The arbiter configuration states for F1 to F5 in 
Figs. 6 and 7 are 22222 and 13133, respectively. As 
shown in Fig. 7, the average waiting time is much 
shorter as compared with conventional round robin 
arbitration scheme indicated in Fig. 6. 
 
 
 
Fig. 6 Waiting time for arbiter configuration state as 
22222 
 
 
Fig 7  Waiting time for arbiter configuration state as 
13133 
 
The average waiting time for arbiter configuration 
as 13141, 23232, and 11111 is shown in Fig. 8. The 
longest waiting time is obtained when the arbiter 
configuration is 23232. The average waiting of 
13141 can gain the shortest waiting time, which is 
better than the conventional fixed priority arbitration 
scheme. 
In order to speed efficient transmission of large 
bursts of data, buses usually provide a block transfer 
mode for multiple bus cycles. Fig. 9 shows the effect 
of block size on performance. The worst case occurs 
when the arbitration configuration is set to be 43332 
for F1~F5 block and the block size is chosen 
0
1000
2000
3000
4000
5000
6000
7000
8000
9000
M
aster0
M
aster1
M
aster2
M
aster3
M
aster4
M
aster5
M
aster6
M
aster7
M
aster8
M
aster9
M
aster10
M
aster11
M
aster12
M
aster13
M
aster14
M
aster15
av
g.
 w
at
tin
g 
tim
e F1:1 F2:3 F3:1
F4:4 F5:1
F1:2 F2:3 F3:2
F4:3 F5:2
Fixed-priority
 
 
Fig. 8  Waiting time for various arbiter configuration 
states 
 
 
31344 33424 34344
31434 32314
13332 43332 23332
23332 13332
0
1000
2000
3000
4000
5000
6000
c8b32
c16b32
c32b32
c8b64
c32b64
c8b32
c16b32
c32b32
c8b64
c32b64
Block Size
A
vg
 w
ai
tt
in
g
 ti
m
e
Best Case Worst Case  
 
Fig. 9 Block size effect for various arbitration 
scheme  
 
 
to be 16x32 bits/s. The block size c16b32 denotes in 
the x-axis of Fig. 9 indicating the data transmission 
rate is 32 bit/s, and the period is 16 clock cycles. The 
best performance is obtained by 32314 assignment 
state and the block size is 32x64 bits/s.  
Simulation tests using normal distribution for data 
amount and exponential distribution for master request 
are conducted for 1000 times and results are average 
out. Based on 1024 permutations of arbitration 
algorithms for blocks F1 ~ F5 under the same traffic 
distribution pattern, Table 1 shows the simulation 
results of the grant rate and through put at various 
configurations. For the present case study, it 
indicates that the reconfigurable arbiter with 22221 
configuration has the best bus utilization rate, 13431 
configuration has the best average grant rate, 22221 
configuration has the best throughput performance. 
 
 
 
 
