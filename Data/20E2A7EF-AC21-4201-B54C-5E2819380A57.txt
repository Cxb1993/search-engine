 以蟑螂演算法解機組排程問題  
A Cockroach Colony Algorithm For Solving Unit Commitment Problem 
 
鄭富升      呂昌鴻      林崇倫 
 
摘要 
機組排程的基本目標為適當地安排所有機組的開機
與關機狀態，並滿足各項限制條件，並使總發電成本達
到最小。過去，由於缺乏易於獲得「可行的經濟調度解」
的有效技術，因此只能藉著「懲罰函數」使不可行解演
化為可行解。由於很難設定適當的懲罰函數的參數，所
以可能會花費很久的計算時間才可以將不可行解演化
成可行解。本計畫結合「修補策略」去產生「可行的排
程」，然後再利用蟑螂演算法所發展的「可行解邊界」
的數學式來求得「可行的經濟調度解」。 
 
關鍵字：蟑螂演算法、可行解、機組排程 
 
Abstract 
The basic goal of solving the Unit Commitment (UC) 
problem is to properly schedule the on/off states of all the 
units in the system, and minimize the system production 
cost during the period while simultaneously satisfying 
operational constraints. Most researchers propose Feasible 
Unit Committing Schedules (FUCS); however, FUCS lacks 
of efficient techniques to easily obtain Feasible Economic 
Dispatch Solutions (FEDS), penalty functions that are 
difficult to set nice coefficients are therefore used to 
transfer infeasible economic dispatch solutions into feasible 
regions. In addition, this paper presents useful algorithms 
for FUCS, and uses Cockroach Colony Algorithm (CCA) 
combine repairing strategy for FUCS, especially to form 
modified boundary equations of the feasible region to CCA 
for FEDS. 
 
Key words: Cockroach Colony Algorithm (CCA), feasible 
solutions, Unit Commitment (UC), Dynamic Economic 
Dispatch. 
 
I. 前言 
目前在高漲的環保意識之下，除了興建中的核四，
其他如火力發電廠的設置有都面臨相當大的困難。因
此，火力發電廠在有限機組情況下，利用「機組排程」
的方法來提升發電的安全性，並期望能達到最高的經濟
效益。 
許多國內外的學者教授在「機組排程」上有許多卓
越的創見，例如楊宏澤教授用的 Genetic Algorithm [1]、
William L. Peterson 與 Steven R. Brammer 提 出
Lagrangian Relaxation[2] ， A. H. Mantawy, Y. L. 
AbdeI-Magid and S. Z. Selim 的 Tabu Search [3]。然而，
當機組排程考慮較複雜的限制式時（如考慮上升率及下
降率限制），使用上述的演算法，雖然容易獲得「可行
的排程」，但是卻有機會獲得不可行的經濟調度解。如
果使用懲罰函數去處理不可行解，對於成本最小化的問
題來說懲罰函數係數設得太小，可能將使族群內產生過
多的不可行解，影響其他可行解繼續演化的機會；懲罰
函數係數設的太大，可能使族群內有潛力的不行解失去
競爭力，而無法對求解過程有實質的幫助。因此，設定
最適當的懲罰函數的參數，目前仍是一個困難的問題。 
蟑螂演算法（Cockroach Colony Algorithm, CCA）[4]
是一種不需懲罰函數的演算法，對於含閥點效應的靜態
經濟調度問題有相當不錯的結果。在動物分類學上，蟑
螂是屬於節肢動物門之昆蟲。美考古學家發現生存年代
遠較恐龍早 5500 萬年的蟑螂化石，三億年前已存在地
球上。據估計，全世界之蟑螂大約有 4000 種。本省之
蟑螂已知者有六十多種，其中於居家環境中較常見者有
七種，而以美洲蟑螂、德國蟑螂為數最多，其次為澳洲
蟑螂、棕色蟑螂、家屋蟑螂、灰色蟑螂、潛伏蟑螂等。
蟑螂性喜溫暖潮濕，具雜食性、夜行性、群聚性、趨觸
性、遷移性、靈敏性、精簡性[5,6]。為了回顧上一個國
科 會 計 畫 （「 蟑 螂 演 算 法 的 發 展 與 應 用 」 
NSC-95-2221-E-230-037）[7]的主要研究成果，現在以圖
1 來比較「進化計算演算法（Evolutionary Computation 
Algorithm, EC ） 如 （ Genetic Algorithm, GA ）、
（Evolutionary Programming, EP）、（ Particle Swarm 
Optimization, PSO）…等」與「蟑螂演算法」的求解特
性。由於「進化計算演算法」在搜尋的過程裡面所產生
的解含有不可行解與可行解，此時希望利用懲罰函數使
不可行解演化為可行解（其成功率與限制式的難易程度
與懲罰函數係數的設定有關）；然而，蟑螂演算法所獲
得的解皆為可行解。因為一般要求整體最佳解（Global 
Optimum）必須為可行解，所以蟑螂演算法可增加找到
整體最佳解的機會。 
 
 
圖 1.：進化計算演算法與蟑螂演算法求解特性比較 
 
II. 機組排程經濟調度理論 
本計畫與一般機組排程問題（燃料成本曲線採用二
次式）最大的不同點是：主要希望針對含閥點效應燃料
成本曲線機組進行最佳排程，以更加符合實際發電機的
燃料成本曲線。因此經濟調度成為含有多個局部最佳解
的問題（如圖 2 含閥點效應燃料成本與發電量關係[8,9]
所示），一般的「進化計算演算法」容易陷入局部最佳
解，以下進行問題描述。 
  
圖 4：蟑螂演算法的解型式 
 
步驟二、決定初始解並計算適應函數 
要決定每隻蟑螂的初始解（k=1）時，第一個階段是將
排程矩陣的每個元素隨機設定狀態為 0 或 1，其次利用
修補策略（Repairing Strategy）（詳見[4]）讓「不可行排
程」修正為「可行的排程」。因為當使用隨機方式產生
排程必會容易形成有違反限制條件（如發電量不足、不
滿足最小開機時間與不滿足最小關機時間，及無法滿足
備轉容量的限制式）的不可行排程出現。第二個階段則
是利用「可行解邊界」公式。首先在所有運轉發電機的
發電量中，選定
tiP max, 當成相依變數，其餘作為獨立變
數。獨立變數的可行解邊界如下： 
 
當i＝1時 
( ) ⎪⎪⎪
⎪
⎭
⎪⎪
⎪⎪
⎬
⎫
⎪⎪
⎪⎪
⎩
⎪⎪
⎪⎪
⎨
⎧
⎟⎟⎠
⎞
⎜⎜⎝
⎛ ∑ +−
−
⎟⎟⎠
⎞
⎜⎜⎝
⎛ ∑−
=
+= −
−
+=
max
1
1,,
1,
min,
max
1
max,,
, max
i
ij
jtjtLoad
iti
i
i
ij
jtLoad
ti
RUP P
RDP
P
PP
P          (9) 
 
( )
 
RDPP
RUP
P
PP
P
i
ij
jtjtLoad
iti
i
i
ij
jtLoad
ti
⎪⎪
⎪⎪
⎭
⎪⎪
⎪⎪
⎬
⎫
⎪⎪
⎪⎪
⎩
⎪⎪
⎪⎪
⎨
⎧
⎟⎟⎠
⎞
⎜⎜⎝
⎛ ∑ −−
+
⎟⎟⎠
⎞
⎜⎜⎝
⎛ ∑−
=
+= −
−
+=
max
1
1,,
1,
max,
max
1
min,,
, min       (10) 
 
當 i＞1 時 
( ) ⎪⎪⎪
⎪
⎭
⎪⎪
⎪⎪
⎬
⎫
⎪⎪
⎪⎪
⎩
⎪⎪
⎪⎪
⎨
⎧
⎟⎟⎠
⎞
⎜⎜⎝
⎛ ∑ ++∑−
−
⎟⎟⎠
⎞
⎜⎜⎝
⎛ ∑+∑−
=
+= −
−
=
−
+=
−
=
max
1
1,
1
1
,,
1,
min,
max
1
max,
1
1
,,
, max
i
ij
jtj
i
x
txtLoad
iti
i
i
ij
j
i
x
txtLoad
ti
RUPPP
RDP
P
PPP
P  (11) 
 
( ) ⎪⎪⎪
⎪
⎭
⎪⎪
⎪⎪
⎬
⎫
⎪⎪
⎪⎪
⎩
⎪⎪
⎪⎪
⎨
⎧
⎟⎟⎠
⎞
⎜⎜⎝
⎛ ∑ −+∑−
+
⎟⎟⎠
⎞
⎜⎜⎝
⎛ ∑+∑−
=
+= −
−
=
−
+=
−
=
max
1
1,
1
1
,,
1,
max,
max
1
min,
1
1
,,
, min
i
ij
jtj
i
x
txtLoad
iti
i
i
ij
j
i
x
txtLoad
ti
RDPPP
RUP
P
PPP
P (12) 
 
為了使所有變數皆需要位於真正上下邊界之間，形成可
行解，因此必須利用以下式子來修正「第 n 個解在第 k+1
次疊代產生之第 i 個機組於 t 時段的實功率」： 
 
  
PPifP
PPPifP
PPifP
P
kn
tititi
ti
kn
titi
kn
ti
ti
kn
titi
kn
ti
⎪⎪⎩
⎪⎪⎨
⎧
<
≤≤
<
=
+
++
+
+
1,
,,,
,
1,
,,
1,
,
,
1,
,,
1,
,          (13) 
因為獨立變數為依序產生，因此「已決定的獨立變數」
將會影響「即將決定的獨立變數」。另外，相依變數可
利用下面方式求出。 
 
 ∑−= −
=
1max
1
,,,
i
i
titLoadtimax PPP                    (14) 
 
按照上面的方式，可以獲得一個可行的經濟調度矩陣。
然後將矩陣中的發電量代入(1)，可以獲得這個初始解所
對應的適應函數值。最佳的適應函數所對應的解，即為
目前最佳解。 
 
步驟三、開始演化過程 
當疊代次數大於 1 時，開始演化過程。首先決定排
程矩陣。第 n 個解在第 k+1 次疊代產生之第 i 個機組於
t 時段的機組狀態如下： 
                                     
⎪⎩
⎪⎨
⎧
−+<= ++
                                        ,0
 
)rexp(
rand          ,
X k,nt,i
k,n
t,i
其他
11 1
11
        (15) 
 
其中 k,nt,ir 可利用下面方式求出 
 ( )
)( ,,,22
,
,
,
,11
,
,
kn
ti
gbest
ti
kn
ti
pbestn
ti
kn
ti
1kn,
ti,
XXrandc
XXrandcrr
−×+
−×+=+
  (16) 
 
其中 k,nt,ir 為第 n 個解在第 k+1 次疊代產生之第 i 個機組
於 t 時段的參數， pbest,nt,iX 為第 n 個的最佳機組狀態（第
i 個機組，t 時段）， gbestt,iX 為目前全部最佳機組狀態（第
i 個機組，t 時段）。另外，為使求解初期的重心放在局
部最佳解附近以及求解末期的重心放在整體最佳解附
近，c1和 c2以下式(17) 、(18)計算： 
c1和 c2設定如下： 
 
 傳統進化計算演算法往往需要大量的疊代才有辦
法找到一個可行解。隨著限制條件的增加，搜尋到可行
解的困難度也跟著提高，整個搜尋過程變得極不穩定，
很容易發生找到最後的收斂解是一個有違反限制條件
的不可行解的情形。表4為不可行解個數比較表（50個
解X 200代）。由於蟑螂演算法會先計算出各機組的真正
上限與下限值，雖然比PSO-TVAC多一道計算程序，可
以很準確的搜尋到可行解的排程與機組發電量。但
PSO-TVAC卻有很大的比例會搜尋到不可行解。表5為蟑
螂演算法所求出24小時的最佳排程與調度結果，可知：
不論在排程或是各機組的上升率與下降率皆能符合限
制條件。 
 
表 4：不可行解個數比較表（10000 個解） 
方法 CCA PSO-TVAC 
不可行解個數 0 4876 
 
表 5： 24 小時的最佳排程與調度結果 
Unit status Ramp-Up and Ramp-Down Rate Limits 時
間 
負載 
(MW) 
1 2 3 4 1 2 3 4 
1 320 0 320 0 0 0 0 0 0 
2 500 0 324.37 50 125.63 0 4 0 0 
3 850 200 400 100 150 200 76 50 24 
4 450 300.15 0 99.85 50 100 0 0 100 
5 160 100.15 0 59.85 0 200 0 40 50 
6 170 100 0 70 0 0 0 10 0 
7 380 299.43 0 80.57 0 199 0 11 0 
8 1030 498.62 390.8 140.57 0 199 0 60 0 
9 750 299.25 249.63 151.13 50 199 141 11 50 
10 650 399.54 100 100.46 50 100 150 51 0 
11 500 299.85 100 50.15 50 100 0 50 0 
12 550 199.73 250 50 50.27 100 150 0 0 
13 750 399.73 250.27 50 50 200 0 0 0 
14 450 199.73 100.27 100 50 200 150 50 0 
15 430 0 250.27 54.48 125.26 0 150 46 75 
16 26 0 250 0 50 0 0 54 75 
17 270 0 171.22 0 98.78 0 79 0 49 
18 150 0 150 0 0 0 21 0 0 
19 400 400 0 0 0 0 0 0 0 
20 450 450 0 0 0 50 0 0 0 
21 600 398.03 0 151.97 50 52 0 0 0 
22 650 399.24 0 200 50.76 1 0 48 1 
23 700 400.03 100 149.97 50 1 0 50 1 
24 660 309.92 250 100.08 0 90 150 50 50 
 
最後，本計畫也利用上一次計畫所提的演算法（CCA 
[7]），重新執行這個問題。從圖 7（最後一代的 50 個解）
可知：雖然兩種方法均可以獲得最佳解，但是本計畫所
提的 CCA 由於結合了 PSO-TVAC 的特性，因此有較佳
的收斂性，而且解的品值也改善了。 
 
V. 結論 
    隨著時代變遷，世界各地用電需求的增加，導致電
廠發電機組變多，因此規劃機組發電的排程變得複雜許
多。發電業者使用傳統進化計算演算法處理機組排程或
經濟調度問題時，必須達到滿足系統負載需求以及符合
機組本身的限制條件，通常需要經過大量的疊代次數與
採用適當懲罰函數的方式才可以找到一個可行解。本計
畫所提的方法則能有效的避免各種限制條件所產生的
問題，並且可以得到可行解。並且，當限制式較嚴格時
也可以有效的計算出可行解邊界，避免機組排程的一些
盲點。當然，本計畫搜尋到的可行解通常都是不錯的
解，可以供作業人員選擇使用。另外，由於本文所提的
蟑螂演算法利用「修補策略」與「可行解邊界」確實強
化了 PSO-TVAC 的搜尋效果。因此，似乎可以進一步推
斷：若將傳統進化計算演算法加入「修補策略」與「可
行解邊界」，可能會有改善收斂解的效果。 
 
致謝 
感謝國科會計畫（計畫編號：NSC-96-2221-E-230-029.）
經費提供使我們能順利完成相關研究。 
 
參考文獻 
[1] Hong-Tzer Yang, Pai-Chuan Yang and Ching-Lien Huang, “A Parallel 
Genetic Algorithm Approach to Solving the Unit Commitment Problem: 
Implementation on the Transputer Networks,” IEEE Transactions on 
Power Systems, Vol. 12, No. 2, pp. 661-668, May 1997. 
[2] William L. Peterson and Steven R. Brammer, “A Capacity Based 
Lagrangian Relaxation Unit Commitment with Ramp Rate Constrains,” 
IEEE Transactions on Power Systems, vol. 10, no. 2, pp. 1077-1084, May 
1995. 
[3] A. H. Mantawy, Y. L. AbdeI-Magid and S. Z. Selim, “Unit 
commitment by tabu search,” IEE Proc.-Gener. Tronsm. Distvib., Vol. 145, 
No. 1, pp. 56-64, January 1998. 
[4] 研究生涂嘉勝、指導教授鄭富升，蟑螂演算法的發展與應用，正
修科技大學電機工程學研究所碩士論文，民國九十六年。 
[5] 紀錄片「蟑螂Ｘ檔案」，國家地理頻道監製，台灣師大生命科學系
教授林金盾企劃。 
[6] 李學進，蟑螂之生態與防治，居家害蟲生態與防治技術研討會，
國立中興大學農學院推廣叢書第88016號，1999，13-20頁。 
[7] 主持人鄭富升，蟑螂演算法的發展與應用，國科會計畫
(NSC-95-2221-E-230-037)，民國九十五年。 
[8] D. C. Walters and G. B. Sheble, “Genetic algorithm solution of 
economic dispatch with valve point loading,” IEEE Transactions on 
Power Systems, vol. 8, no. 3, pp. 1325 -1332, Aug. 1993. 
[9] W. M. Lin, F. S. Cheng, and M. T. Tsay, “An Improved Tabu Search 
for Economic Dispatch With Multiple Minima,” IEEE Transactions on 
Power Systems, vol. 17, no. 1, pp. 108-112, Feb. 2002. 
[10]A. Ratnaweera, S.K. Halgamuge and H.C. Watson, “Self-organizing 
hierarchical particle swarm optimizer with time-varying acceleration 
coefficients” Evolutionary Computation, IEEE Transactions on Volume 
8,  Issue 3, pp. 240 – 255, June 2004. 
0 5 10 15 20 25 30 35 40 45 50
1.2
1.22
1.24
1.26
1.28
1.3
1.32
1.34
x 10
5
個數
成
本
 
 
CCA (本計畫)
CCA [7]
 
圖7 最後一代的50個解（兩種CCA） 
