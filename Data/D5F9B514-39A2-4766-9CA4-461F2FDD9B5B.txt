new Volunteer Computing System to solve Computer 
Games, and use this system to solve lots of computer 
games which could not be solved in the past. This 
sub-project will use this volunteer computing system 
to solve Othello. Computer games are a quite 
important issue in the field of Artificial 
Intelligence, and all the strategies used in all 
kinds of games in the design of Artificial 
Intelligence catch people＇s eyes very much. This 
project plans to construct a complete Othello game 
tree database, and it is predicted that it can 
strongly solve 6*6 Othello, weakly solve 7*7 Othello, 
and solve part of the 8*8 Othello game which is one 
of the main goals in this project. 
 
英文關鍵詞： Computer Games, Volunteer Computing, Othello, Weakly 
solved, Strongly solved 
 
 1
行政院國家科學委員會補助專題研究計畫 
完整報告 
適用於電腦對局遊戲之志願型計算系統及其應用問題--運用志願型計算
系統解黑白棋遊戲問題 
1 前言 
在電腦對局的研究中，對各種對局遊戲中都可以用不同的演算法來達到加強程式本身的棋力，
但是這樣的審局函數與搜尋遊戲樹的過程並不能完全地代表此種對局遊戲。換句話說，無論審局函
數多麼地精確，都還只是在搜尋遊戲樹的過程中使用人的經驗來判斷盤面的好壞，對於遊戲樹的葉
節點勝負結果，仍屬於未知，因此如果可以知道葉節點的勝負結果時，就可以使用 minmax 的演算
法來推導出一條或多條必勝的遊戲樹路徑，依循此路徑與人對下時就能得到最佳的結果。 
以 Othello(黑白棋)來做討論，以遊戲樹的複雜度來看，在 8x8 的黑白棋盤面裡每一手的遊戲樹
分支度約為 8，從開局到終局平均約 60 手，因此我們可以得到 8x8 的黑白棋的遊戲樹複雜度為 608 ，
約 5810 。以空間的複雜度來看，8x8 黑白棋有 64 個位置，而每個位置有 3 種變化(黑子、白子、未
落子)，因此可以推論得到空間複雜度為 643 ，然而在其中有些不合法的盤面，扣除後其空間複雜度約
為 2810 。以現在的電腦能力資源並沒有能力在短時間內運算出8x8 黑白棋的結果。雖然4x4 的Othello 
可以被完全強勁解決(見本文 2.2.4)，但 5x5 以上的 Othello 據我們所知，目前尚無人使用一般的個人
電腦加以完全強勁解決。因此本計畫研究如何在適用於電腦對局遊戲之志願型計算系統上強勁解決
6x6 及弱解 7x7 甚至 8x8 的 Othello。 
本篇報告為執行計畫三年的完整報告，在本篇報告中，首先敘述本計畫研究目的及研究步驟，
然後敘述本計畫的研究成果。最後我們列出成果及討論，並且對本計畫自評。 
 
2 研究目的 
本計畫的研究將利用大量的桌機建立的志願型系統，來強勁的解決 Othello。計畫的成果不僅可
以幫助研發出棋力高強的電腦對局程式，也可應用於電腦遊戲上。這些開發出的技術，也可幫助國
內遊戲廠商開發相關遊戲，提高國際競爭力。執行計畫的學生，將來畢業時，能夠將此方法應用在
產業界與國防工業。我們將提出一套新的志願型計算系統(Volunteer Computing System)，簡稱為志願
型計算系統(VCS)，及利用此志願型計算系統，解決許多過去無法解決的應用問題（尤其是電腦對局
遊戲應用問題），本計畫即利用 VCS 來解出 Othello（黑白棋），本計劃可提升我們電腦對局研究團隊
的競爭力。 
計畫進行時，也開發出一些於志願型系統與電腦對局上的理論，將發表數篇相關論文。所研發
製作出完整遊戲樹，將可以應用在未來在其他演算法可以快速搜尋的方式的參數調整最佳化，這也
是未來在人工智慧中極具發展應用價值的方向。 
 3
3.1 最佳化黑白棋審局函數 
Othello 的審局函數最常被人討論與使用的有以下幾種： 
 
(一) 最多子策略 (The Maximum Disc Strategy) 
(二) 位置權重策略 (The Weighted Square Strategy) 
(三) 行動能力策略 (The Mobility Consideration Strategy) 
(四) 穩定子策略 (The Stability Disc Strategy) 
3.1.1 最多子策略(The Maximum Disc Strategy) 
由於黑白棋決定勝負的條件在於遊戲結束比較何種顏色下子的數量最多，最多的一方即獲得勝
利，此一策略即以此衍生而來。使用此一策略下子時，會判斷下在那一個位置可以造成己方最多的棋
子數，亦指判斷下在那一個位置可以翻動對手最多的棋子，進而得到最後的勝利。 
 
 此一策略所使用的是一種貪婪的演算法，是最直接、最簡單的一種策略。假如可以一次搜尋到遊
戲樹的最底層時，使用此一策略就可以準確地表示。然而在6x6 以上的黑白棋是無法在短時間內一次
完整地搜尋整棵遊戲樹，所以使用此一策略將會在初期佔據大量的棋子並取得優勢，但隨著遊戲的進
行將不難發現之前的佔據的棋子並非不會再被對手所佔據的穩定子，且讓對手有更多下子的位置的可
以選擇，因此很容易地在接近終局時被對方逆轉局面，反而失去原有的領先。 
3.1.2 位置權重策略 (The Weighted Square Strategy) 
棋盤上的每個位置都有各自對整個盤面變化產生的價值，因此將每個位置不同的價值做為下子時
考慮的權重，如圖二 所示在角落的位置(圖一 中的* )因為對盤面有較大的影響力，因此也就擁有比
其他位置較高的權重，一旦佔領角落後，不僅此位置不會被對手再佔領，且將可以此位置為錨，進而
佔領盤面上其他的位置，所以在位置權重策略上對角落位置給予較高的權重。而在盤面上C 與X 被
賦予較為低的權重如圖一，因為下子在這些位置時將有可能對盤面發展狀況造成不利的影響，下子在
C、X 會讓對手有機會佔領角落，而讓自己處於不利的局面。為了避免去下子在這些位置，因此給予
較低的權重。此外在A、D 位置會給予次高的權重，下子在這些位置時，將有可能讓對手被迫下子在
C、X的位置，而讓對手陷於困境，因此在A、D 位置也是兵家必爭之處，所以有次高的權重。 
 
 
圖一、位置權重策略 
 5
 「邊」的位置在棋盤上有重要的價值，「邊」是次於「角」位置能發動大量佔領對手的錨點，較
內部點不易被對手再佔領，因為在黑白棋的規則中下子後要翻動對手子，必須考慮到八個方向(水平、
垂直、斜線各兩個方向)延伸有無對手子的狀況，但在「邊」位置時，能翻動其位置的只有水平的兩
方向或者是垂直的兩方向，如圖四(a)的B1 位於「邊」上，而能對它造成翻動的只有來自A1 或者來
自C1 與D1，假設我們佔領A1 (如圖一(a))或者來C1 與D1(如圖四(b))的話，B1 不可能再被對手所翻
動佔領，成為我們的穩定子。 
 
             
圖四 (a) A1 對B1 造成穩定子              (b) C1、D1 對B1 造成穩定子 
 
C. 內部 
 所謂的「內部」係指在棋盤面上「角」與「邊」除外的區域，如圖五(a)中的B2、C2、B3、C3 就
屬於此。在「內部」的棋子不若「角」與「邊」那般穩固，水平、垂直、斜線方向的下子都可能對它
造成翻動，因此在判定是否為穩定子時也較為繁複。以B2 為例，我們可以分成幾個部分來討論穩定
子發生的情況。在圖五(a)中黑子佔領A1、A2 穩定住A 行的邊，讓B2 不至於因A 行而被翻動，此
外A1、B1、C1 的佔領不但也穩定住1 行且C1 的佔領也阻止對手在斜線翻動B2 的可能，因此在黑
子佔領B2 時我們可以檢查A1、B1、C1、A2 是否也為黑子所佔領，如果是的話，就可以判斷B2 為
穩定子。同樣的在圖五(b)也是如此。在圖五(a)~(f)中我們可以發現在B2 位置的黑子，如果有相鄰的
黑子延伸至兩個相接「邊」與「角」時，即可將其位置的子認定為穩定子不會再被對手所翻動。 
 
 7
3.2 設計黑白棋搜尋演算法 
A. MinMax Sreach 
 MinMax 搜尋演算法是由Von Neumann 和Morgenstern 在1944年所提出，用以解決，有限，二人，
完全資訊(finite two-person perfect information) 的對局遊戲。在遊戲的過程中，將所有可行的合法著手
從開始盤面到終端節點為止，反覆地拓展成為一個完整的遊戲樹。 
 
 而MinMax 搜尋演算法就從終端節點開始，各依據雙方選擇對自己對有利的下子，因此在輪到自
己下子時選擇分數較高的，在對手下子時選擇分數較低的( 對方較有利時，則可以看為對自己較不
利，故分數較低)，一直到開始的節點為止，即可推導出一條主要的路徑(principal continuation)，而這
路徑的下一個著手即為我們將要下子的最佳著手。 
 
 MinMax 演算法在奇數層的分數要取極大，在偶數層分數要取極小，因此在圖六 我們可以看到
在左子樹的部分，在第二層屬於偶數層因此我們從其子樹中取極小值，因此把分數11 傳回；在第一
層屬於奇數層因為我們要從其子樹中取極大值，最後可以得到分數為11。 
  
圖六 MinMax 對局樹 
 由於MinMax 演算法雖然可以找出遊戲的主要路徑，但隨著遊戲樹的拓展，節點數目將以幾何級
數不斷地增加，對搜尋的時間造成巨大影響，因此就需用到αβ切捨來增進搜尋的效率。αβ切捨是
α值與β值來切捨(Cutoff)較差的走法，藉由切捨的動作來達到增加搜尋的效率，換言之也將可以做
更深入的搜尋。我們使用深度優先(depth first)以及後續追蹤(post order traverse)的搜尋方式來拓展，所
以在圖九 的對局樹裡，我們可以得到一條主要的路徑。 
 由於在奇數層要選最大值，我們可以知道，將來A 盤面至少一定會有37 分。這個奇數層節點的
目前最大值，就是該節點的α值。同樣的道理，當評估G 盤面之後，由於偶數層要選最小值，所以
將來C 盤面最多只能有-59 分。這個偶數層節點的目前最小值，就是該節點的β值。 
 9
3.4.1 極弱解 (ultra-weakly solved) 
極虛弱的解決意指從理論上去證明，在雙方都不犯錯的情況下，先下的一方在遊戲最後是輸或贏
或平手。 
3.4.2 弱解 (weakly solved) 
弱解意指提供一個演算法，在雙方都不犯錯的情況下，從起始盤面起可以確定每一手的黑子與白
子的最佳著手，最後可得知先下的一方是贏或輸或平手。 
3.4.3 強解 (strongly solved) 
強解意指提供一個演算法，在任意盤面都可以知道其黑子與白子的最佳著手，以及該盤面的最佳
結果。在8x8 的黑白棋由於其遊戲樹複雜度高達1058，因此以目前的電腦能力並沒有辦法解決，6x6 的
黑白棋部分在1997 年由Amenor 找出兩條路徑16-20 與17-19 都是後下子獲得勝利[9]，雖然Amenor 
解決6x6 的黑白棋問題，但這樣的解決屬於弱解(weakly solved)程度而不是強勁的解決 (strongly 
solved)。儘管可以用演算法來加以解決部分對局遊戲，但大部分的對局遊戲的遊戲樹其複雜度仍然相
當的高，無法在有限的時間內加以解決，但隨著電腦能力的增長，在過去無法被解決的對局遊戲問題
在未來也就存在著被解決的可能。 
 
3.5 參考文獻 
1. 翁慈孝，「電腦五子棋程式珠連設計與製作」，東華資訊工程研究所，碩士論文，2003。 
2. 許舜欽，「電腦對局的搜尋技巧」，台大工程學刊，第 51 期，Feb.1991，pp. 17-31。 
3. 許舜欽、曹國明，「電腦象棋開局知識庫系統之研製」，台大工程學刊，第 53 期，Oct. 1991，pp. 
75-86。 
4. 陳志昌，「電腦象棋開局知識庫系統之設計與製作」，台大資訊工程研究所碩士論文。 
5. 陳志昌、徐明煒、顏士淨，「Othello 開局資料庫系統之研製」，TAAI 2002，pp225-229。 
6. 陳俊傑，「具備學習能力的 6x6 Othello 程式設計與製作」，長榮資訊管理研究所，碩士論文。 
7. 柯建呈，「黑白棋完全解之初步研究」，長榮資訊管理研究所，碩士論文, 2008。 
8. Anderson, D. P. Boinc: A system for public-resource computing and storage. In Proceedings 
of the Fifth IEEE/ACM International Workshop on Grid Computing (GRID'04), IEEE CS Press, 
Pittsburgh, USA, 4-10, 2004. 
9. Background Pi, available at http://defcon1.hopto.org/pi/index.php. 
10. BOINC, available at http://boinc.berkeley.edu/.  
11. C. E. Shannon, “Programming a Computer for Playing Chess,＂Philosophical Magazine, Vol.41, 
1950, pp.256-257 
12. Chen, S.T. and Lin, S.S., Optimal Algorithms for 2xn AB Games - A Graph-Partition Approach. 
Journal of Information Science and Engineering, 2004. 
13. Gelly, S., Wang, Y., Munos, R., Teytaud, O., Modification of UCT with patterns in Monte-Carlo 
Go. Technical Report 6062, INRIA. 2006. 
14. Jaap van den Herik H, Jos W Uiterwijk, and Jack van Rijswijck.,“Games solved: Now and in 
the future,＂ Artificial Intelligence Journal,Vol. 134, No. 1-2, January 2002, pp. 277-311. 
15. J.Feinstein, Amenor wins world 6x6 championships!, British OthelloFederation 
Newsletter(July1993) Alsoavailable at URL 
16. M. Buro , “Improving heuristic mini-max search by supervisedlearning＂, Artificial 
Intelligence, Volume 134, Number 1, January 2002,pp. 85-99 
17. M. Buro, “The Othello Match of the Year: Takeshi Murakami vs.Logistello, ＂ ICCA Journal, 
Vol. 20, No. 3, 1997, pp. 189-193. 
 11
4 研究方法 
4.1 第一年：研究共享記憶體架構下解黑白棋的方法及整合應用志願型系統 
 （2010 年 8 月至 2010 年 10 月）研究在共享記憶體架構下解黑白棋的方法及設計並實作於單機
之解黑白棋的方法， 
 （2010 年 11 月至 2011 年 1 月）研究適用於黑白棋之志願型計算系統設計及與其他子計畫研究
及討論之整合技術及規格， 
 （2011 年 2 月至 2011 年 4 月）研究應用簡易的志願型計算系統(含 Job Scheduling Server)
於解黑白棋。 
 （2011 年 5 月至 2011 年 7 月）研究建構 6*6 黑白棋遊戲樹資料庫。以下敘述各個步驟的內容。 
4.1.1 研究在共享記憶體架構下解黑白棋的方法 
為了達到本子計畫強勁解決黑白棋的目的，我們需要建構黑白棋的全局知識庫。以下以 5x5 黑
白棋為例來解說，我們使用檔案來儲存全部棋局的過程。首先透過樹狀結構的儲存方式，來記錄盤
面的狀態。在盤面產生出來後，我們透過 hash table 方法的輔助，讓黑白棋的遊戲樹可快速地拓展
至終端節點。我們以最後的分數差距做為審局函數，使用 MinMax 的方法由終端節點將分數回傳至
起始盤面(initial board)，進而推導出一條主要路徑，這樣就可以解決黑白棋的問題。 
對於 5x5 以上的黑白棋遊戲，為了建構全局知識庫，我們使用檔案來儲存全部棋局的過程，透
過樹狀結構的儲存方式，來記錄盤面的狀態。一般黑白棋遊戲樹的樹狀結構如下： 
我們把每個盤面編號來加以說明。在圖八中，起始盤面(0)黑子有四個可行步，也就是會產生四
個不同的盤面(1、2、3、4)；若黑子選第一個可行步下子後產生盤面(1)，換白子下子時，白子將產
生盤面如(5、6、7)，以此類推可以得到一棵完整的遊戲樹，記錄不同走法時所產生的盤面。利用共
享記憶體的技術，使我們可以把下圖四個盤面(1、2、3、4)分成四個不同的子樹來建立遊戲樹。因為
其為共享記憶體，可以在各盤面走完後，整合即為一顆完整的遊戲樹。 
 
 
圖八 5x5 遊戲樹表示 
 
 
 13
4.2 第二年：研究具有 MapReduce 計算模式之黑白棋桌機格 
 （2011 年 8 月至 2011 年 10 月）研製志願型雲端之 MapReduce 系統及志願型雲端之資料發佈系
統 
 （2011 年 11 月至 2012 年 1 月）研究解黑白棋的演算法於多機運算的方法與其他子計畫研究及
討論系統功能及規格之改良 
 （2012 年 2 月至 2012 年 4 月）應用志願型雲端系統解黑白棋 
 （2012 年 5 月至 2012 年 7 月）研究建構 7*7 黑白棋完整遊戲樹資料庫。 
4.2.1 研製適用於黑白棋之志願型計算之 MapReduce 與資料發佈系統 
為了達到本子計畫強勁解決黑白棋的目的，建構黑白棋的全局知識庫。我們使用檔案來儲存全
部棋局的過程，透過樹狀結構的儲存方式，來記錄盤面的狀態。 
在盤面產生出來後，我們透過 hash table 方法的輔助，讓黑白棋的遊戲樹可快速地拓展至終端節
點。我們以最後的分數差距做為審局函數，使用 MinMax 的方法由終端節點將分數回傳至起始盤面
(initial board)，進而推導出一條主要路徑，這樣就可以解決黑白棋的問題。 
對於 6x6 以上的黑白棋遊戲，為了建構全局知識庫，我們使用檔案來儲存全部棋局的過程，透
過樹狀結構的儲存方式，來記錄盤面的狀態。一般黑白棋遊戲樹的樹狀結構如下： 
我們把每個盤面編號來加以說明。在圖九中，起始盤面(0)黑子有四個可行步，也就是會產生四
個不同的盤面(1、2、3、4)；若黑子選第一個可行步下子後產生盤面(1)，換白子下子時，白子將產
生盤面如(5、6、7)，以此類推可以得到一棵完整的遊戲樹，記錄不同走法時所產生的盤面。利用共
享記憶體的技術，使我們可以把下圖四個盤面(1、2、3、4)分成四個不同的子樹來建立遊戲樹。在建
立遊戲樹中，計算落子後顏色的速度耗時較多，因此我們提出了一個方法可以快速地變換顏色，如
圖十所示，因為其為共享記憶體可以在各盤面走完整合即為一顆完整的遊戲樹。 
 
 
圖九 6x6 遊戲樹表示 
 15
數量運作且對於多機運算演算法的改良及相關參數調正，將可以發揮出所計畫的效能。包含在 Job
如何分配排序讓系統中有的計算資源可以更快的配發使用，在 Job Scheduling Server 目前只有在另一
子計畫學校執行，未來會有更多的 Job Scheduling Server 在參與計畫學校執行可以避免有一些問題產
生，例如對外網路斷線，目前也正式上線也對系統的特性調整相關參數，相信在此架構下可以完成
我們所要解出的強勁解。 
4.2.4 建構 7*7 黑白棋遊戲樹資料庫 
本計畫在第二年已經建置完成成一個志願型計算系統下，已建構了 6*6 部分的遊戲樹資料庫，
目前也在正式系統上運作，可以把 6*6 完整的遊戲樹建立，且輸出到資料庫中，再對程式最佳化後
以利第二度解 6x6 的強勁解且繼續建構 7x7 的遊戲樹展開的建立資料庫的作業。 
 
 17
4.3.2 研製適用於黑白棋之志願型計算之 Reliability 與 Resources 管理系統 
我們利用計畫 V1 的架構在程式中，呼叫其 Framework 來進行計算的工作，在平行計算的程
式中我們需要在程式結合到完整的遊戲樹中需要有更完善的 Reliability 與 Resources 管理系統。
完整遊戲樹是以檔案的形式存在於硬碟當中，每一個節點大小為 128bytes，在盤面產生出來後，
我們使用雜湊函數(hash function)將盤面資訊加以計算來產生一組 60bits 的 hash number，再從
hash 區的 hash number 位置找到它所串連的溢流區(over flow)節點，並且比對此一節點所儲存的
盤面資訊與輪黑或輪白下子資訊。 
我們將 6x6 黑白棋或更大的盤面使用 2 個長整數 long 型態來表示一個完整的盤面資訊，因
此本計畫預計使用的雜湊函數是將其盤面資訊以每 2 個位元以及每 3 個位元做 XOR 運算，之
後再做 shift 運算產生一組的整數，如圖十二所示。 
為了降低碰撞的機率，在代入函數之前我們先比對上下盤面的長整數值大小，來調整 XOR 
的位元運算。若上盤面(UpBoard)大於下盤面(DownBoard)，則上盤面以每 2 個位元做 XOR 運
算，下盤面以 3 個位元來運算。反之，若上盤面小於等於下盤面，則上盤面先以每 3 個位元做
XOR 運算，下盤面則以 2 個位元來運算。黑白棋利用此方法驗證其在志願型系統計算的結果，
可以讓完整的遊戲樹可以更快速產生及有可有正確的資訊。 
 
圖十二 節點儲存的方式 
 19
5 結果與討論 
5.1 本計畫完成工作項目 
第一年：完成具有基本之黑白棋在桌機格網系統中的基本演算法及程式，可開始使用此志願型
計算系統，對程式最佳化後以利第二度解 6x6 的強勁解。第一年完成的主要工作項目如下︰ 
 研究在共享記憶體架構下解黑白棋的方法。  
 設計並實作於單機之解黑白棋的方法。  
 研究適用於黑白棋之志願型計算系統設計。  
 與其他子計畫研究及討論之整合技術及規格。  
 應用簡易的志願型計算系統(含 Job Scheduling Server)於解黑白棋。  
 建構 6*6 黑白棋完整遊戲樹資料庫。 
發表的論文如下： 
Shi-Jim Yen, Tsan-Cheng Su and Shun-Chin Hsu, "An efficient algorithm for solving Fillomino," 2011 
IEEE International Conference on Fuzzy Systems, June 27-30, 2011. (研討會論文) 
Bo-Nian Chen, Pangfeng Liu, Shun-Chin Hsu, and Tsan-sheng Hsu, 'Knowledge Abstraction in Chinese 
Chess Endgame Databases,' Computers and Games, CG 2010, LNCS 6515, Jan. 2011, pp. 176-187. (研討
會論文) 
 
第二年：完成具有 MapReduce 計算模式之黑白棋桌機格網。可開始利用 MapReduce 技術的志願
型計算系統之桌機格網。第二年的完成主要工作項目如下︰ 
 研製適用於黑白棋之志願型計算之 MapReduce 與資料發佈系統。  
 研究解黑白棋的演算法於多機運算的方法。  
 與其他子計畫研究及討論系統功能及規格之改良。  
 應用志願型計算系統於解黑白棋。 
 建構 7*7 黑白棋遊戲樹資料庫。 
本計畫第二年目前已經發表相關 2 篇 SCI 期刊論文與相關 2 篇會議論文(如下表)： 
Shi-Jim Yen, Tsan-Cheng Su and I-Chen Wu, "The TCGA 2011 Computer-Games Tournament,"  ICGA 
Journal, vol. 34, no. 2, 2011, pp. 108–110. (期刊論文) 
B. N. Chen, B. F. Liu, S. C. Hsu and T. S. Hsu, 'Aggregating consistent endgame knowledge in Chinese 
Chess,' KNOWLEDGE-BASED SYSTEMS, Vol. 34, Special Issue, Oct. 2012, pp. 34-42. (SCI 期刊論文) 
Shi-Jim Yen, Cheng-Wei Chou, Tsan-Cheng Su, Shun-Chin Hsu, Hsin-Hung Chou and Jr-Chang Chen, 
"Monte Carlo Tree Search in Chinese Dark Chess," the 16th Game Programming Workshop (GPW-2011), 
November 4-6, 2011, Hakone Seminar House, Kanagawa, Japan. GPW-2011. (研討會論文) 
Rou-Yu Lai, Hsin-Hung Chou, Shun-Chin Hsu and Shi-Jim Yen, "The Design and Implementation of a 
Pattern-directed MCTS-based Computer Go Program -- WINGO," the 16th Game Programming Workshop 
(GPW-2011), November 4-6, 2011, Hakone Seminar House, Kanagawa, Japan. GPW-2011. (研討會論文) 
 
第三年：第三年研究工作之主要目標是黑白棋網站，提供上網使用，並可收集開局棋譜，設計
回饋之問題及建議，做適度的調整及建構 8*8 黑白棋開局庫與遊戲樹資料庫，預計可解出部分盤面。
因此，第三年的主要工作項目如下︰ 
 
 21
Tournament," ICGA Journal, vol. 35, no.1, pp. 53-54, 2012. (期刊論文) 
B. N. Chen, B. F. Liu, S. C. Hsu and T. S. Hsu, “Aggregating consistent endgame knowledge in Chinese 
Chess,” KNOWLEDGE-BASED SYSTEMS, Vol. 34, Special Issue, Oct. 2012, pp. 34-42. (SCI 期刊論文) 
Tsan-Cheng Su, Shi-Jim Yen, Jr-Chang Ches and I-Chen Wu, "TAAI 2012 Computer Game Tournaments 
Report," submitted to ICGA Journal, 2013. (期刊論文) 
 已發表相關會議論文： 
Shi-Jim Yen, Tsan-Cheng Su and Shun-Chin Hsu, "An efficient algorithm for solving Fillomino," 2011 
IEEE International Conference on Fuzzy Systems, June 27-30, 2011. (研討會論文) 
Shi-Jim Yen, Cheng-Wei Chou, Tsan-Cheng Su, Shun-Chin Hsu, Hsin-Hung Chou and Jr-Chang Chen, 
"Monte Carlo Tree Search in Chinese Dark Chess," the 16th Game Programming Workshop (GPW-2011), 
November 4-6, 2011, Hakone Seminar House, Kanagawa, Japan. GPW-2011. (研討會論文) 
Rou-Yu Lai, Hsin-Hung Chou, Shun-Chin Hsu and Shi-Jim Yen, "The Design and Implementation of a 
Pattern-directed MCTS-based Computer Go Program -- WINGO," the 16th Game Programming Workshop 
(GPW-2011), November 4-6, 2011, Hakone Seminar House, Kanagawa, Japan. GPW-2011. (研討會論文) 
Shi-Jim Yen, Tsan-Cheng Su, Jr-Chang Chen and Shun-Chin Hsu, "Local Network Parallelization 
Computing System for Computer Game Programs," The 17th Game Programming Workshop (GPW-2012), 
November 9-11, 2012, Hakone Seminar House, Kanagawa, Japan. (研討會論文) 
Bo-Nian Chen, Pangfeng Liu, Shun-Chin Hsu, and Tsan-sheng Hsu, 'Knowledge Abstraction in Chinese 
Chess Endgame Databases,' Computers and Games, CG 2010, LNCS 6515, Jan. 2011, pp. 176-187. (研討
會論文) 
 
 
A Simple Tsumego Generator  
 
 
Ping-Chiang Chou1, *Shi-Jim Yen2, Cheng-Wei Chou2, Ching-Nung Lin2 
Chang-Shing Lee3, Olivier Teytaud4, Hassen Doghmen4, Tai-Ning Yang5  
 
 
Abstract: Generating problems is an interesting challenge, for both pedagogical purpose and for assessment. We propose a 
simple solution for generating problems, which can be used on a wide range of games and simulators, and evaluate it in the 
framework of the game of Go, providing problems from lowest amateur range to problems which are not trivial even for 
professional players. 
 
Keywords: Go, tsumego, problem generator 
 
 
 
1. Problems and Tsumegos     
Generating an interesting test case is a classical important 
problem. A nice test bed is the case of games; but generating 
problems is also an issue in industry. Most approaches for the 
game of Go are based on specific generators [3-5]; such tools 
provide very good Tsumegos, interesting for players of arbitrary 
strength. Other game-specific tools for generating problems are 
those based on complexity results, like [7] (generating 
incredibly complicated ko-fights) and [8] (which provides 
boards which are not so much bigger than the 19x19 board). 
However, these tools generate very artificial problems, and are 
usually too big for the 19x19 board, which makes them not that 
interesting for humans. Here we focus on methods which can be 
used for any game. Such a generalist approach has been 
proposed in [6]; however, the point there was to generate very 
surprising, unnatural situations; here we want to generate 
situations: 
 possible difficult (we provide a player, and we want 
the situation to be too hard for him); 
 which can occur in real life. 
 
2. A Simple Algorithm: STG 
We propose the simple Tsumego generator (STG) as follows, 
for generating a Tsumego (i.e. an interesting position). The 
algorithm depends on a strong player (supposed to be strong 
enough for correctly evaluating positions) and a “weak” player 
                                                                
 †1 Taiwan Go Association. cabon1224@hotmail.com 
†2 Dept. of Computer Science and Information Engineering, National 
Dong Hwa University, Hualien, Taiwan. Email: 
sjyen@mail.ndhu.edu.tw, kapakapa@gmail.com, 
jironglin@gmail.com 
 †3 Dept. of Computer Science and Information Engineering, 
National University of Tainan, Taiwan. Email: 
leecs@mail.nutn.edu.tw 
 †4 TAO team, Inria Saclay IDF, LRI, UMR 8623(CNRS - Universite 
Paris-Sud), France. Email: olivier.teytaud@gmail.com, 
hassen.doghmen@gmail.com 
†5Department of Computer Science and Information Engineering, 
Chinese Culture University, Taipei, Taiwan. Email: 
tnyang@faculty.pccu.edu.tw 
(the position will be too hard for the weak player); it starts in a 
position which is in favor of the weak player: 
 
Inputs: 
1. a turn-based game, which is unfair, i.e. easier for one 
side than for the other (e.g. “7x7 Killall-Go with no 
handicap”, or Go with komi 30.5) 
2. a strong player 
3. supposed to be practically perfect on this game; 
4. playing the difficult side. 
5. a weak player 
6. playing the easy side; 
7. supposed to do at least occasionally some mistakes. 
 
Algorithm: 
1. found=false 
2. While (not found) 
3. play one game of the weak player against the strong 
player, until 
4. either the strong player loses the game 
5. or the strong player detects that the situation is a win; 
then: 
6. found ← true. 
7. Output the last situation which was a win for the weak 
player 
8. Output the move chosen by the strong player on this 
situation 
 
Outputs: 
1. a situation 
2. an optimal move for this situation 
 
The algorithm is quite simple, but it is efficient, as we will 
see in next sections. 
3. Experiments on the game of Go 
We consider two games: 
 7x7 Killall-Go, with no handicap, as in Fig. 1-6. This 
means that black plays first, then players play as usual, 
and White wins if and only if he can have at least one 
 3.2 7x7 Go 
It is widely assumed that the fair Komi in 7x7 Go is 9, 
which means that with komi 8.5, 
Black should win. Therefore, we can apply STG for 
generating Tsumegos as follows: 
 Game = 7x7 Go with Komi 9.5. 
 Weak player = MoGo with 100 000 000 simulations per 
move and automatically generated opening book 
(generated by Meta-MCTS [1]). 
 Strong player = MoGo with 100 000 000 simulations per 
move and handcrafted opening book (designed from the 
games in Taipei 2011 and Brisbane 2012 [2], using 
discussions with professional players and strong 
amateurs). 
 
Incidentally, this was helpful for checking the automatically 
generated opening book. 
 This generated (in roughly 48 hours, Intel Celeron 2.2 
GHz) the following Tsumego: Black should play E2 to win. 
Importantly, this move is difficult, even for a professional 
player; the optimal move is E2 in Chinese rules. 
 
 
Fig. 7: A difficult Tsumego (Black to win, komi 8.5) 
 
 
Fig. 8: Solution by Ping-Chiang Chou (5P). 
 
4. Conclusion and Future work 
4.1 Conclusion 
We proposed a simple algorithm for generating problems. 
This algorithm can be used in the following case: 
 There should be a safe strategy. 
 There is a solver strong enough for checking where is the 
mistake in  a game. 
 We can design a player roughly of the expected strength 
of the Tsumego. 
 Its outputs are problems: (1) at the level of the weak 
player; (2) not necessarily at endgame level;(3) 
accompanied with a solution; (4) as natural as the game 
style of the weak and strong player. 
 
Some by-products of this work: 
 including the solution to the 7x7 Tsumego with komi 9.5, 
we get a 7x7 Go player which never lost games, among 
many trials against strong MCTS programs: 
 before including Ping-Chiang's correction, there was an 
opening for White leading to many losses for Black, in 
spite of komi 8.5, even for 10^8 simulations per move; 
 after including Ping-Chiang's correction, there were still 
losses, for permutations of this opening; 
 after including these permutations, we got no loss with 
10^7 and 10^8 simulations per move (out of 64 and 73 
games played as Black and White respectively, including 
24 as Black against the specific opening on which MoGo 
was losing as black before Ping-Chiang correction); 
 however we still get  18% and 9% loss respectively for 
Black and White, when playing with 10000 simulations 
per move, so the opening book is not enough for making 
the game trivial. 
 several Tsumegos of various amateur levels (including 
seki situations); 
 one Tsumego of strong amateur or professional level. 
 
4.2 Future work 
STG is here applied to Go, but it can be applied to other 
games, and also to other problems. The strong player decide the 
faults (with a constraint such as “no more than K faults”), the 
weak player makes the operator decisions, then the equivalent of 
a Tsumego is a situation in which the optimal decision by the 
human operator is not trivial. There is for sure a gap between 
our tests, in this paper, in a game, and an industrial application, 
but conceptually nothing prevents such a transfer, and as we 
have access to such simulators and solvers this further work is 
our priority. 
 
Acknowledgements. The authors are grateful to NSC for 
support NSC 100-2811-E-024-001, to Bielefeld Search 
methodologies seminar, to BIRS game theory seminar, to 
Dagstuhl's seminar on Theory of Evolutionary Computation. 
 
References 
 
1) C.-W. Chou, P.-C. Chou, H. Doghmen, C.-S. Lee, T.-C. Su, F. 
Teytaud, and O. Teytaud, “Towards a solution of 7×7 go with 
meta-MCTS,” in Proceedings of Advances in Computer Games 
2011. 
2) Chang-Shing Lee, Olivier Teytaud, M.-H. Wang, S.-J. Yen. Science 
meets the game of Go, Computational Intelligence Magazine, 
國科會補助計畫衍生研發成果推廣資料表
日期:2013/11/15
國科會補助計畫
計畫名稱: 運用志願型計算系統解黑白棋遊戲問題
計畫主持人: 許舜欽
計畫編號: 99-2221-E-309-003-MY3 學門領域: 人工智慧與仿生計算
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
比賽部分，Mini Shogi 共獲得 TCGA 2012 銅牌，TAAI 2012 銀牌，TCGA2013 金
牌，成果相當豐碩。 
計畫也預計收集更多的棋譜庫以利提供解出 6x6 的強勁解及 7x7 的弱解,推至
8x8 的部分盤面。對於黑白棋的棋力將可以更進一大步，未來可以隨著電腦硬
體的提升在短時間內解出強勁的解答，也運用了目前熱門技術桌機網格計算系
統於解決利用 Sreach 的方式可以快速且有效的計算出我們所需的解。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
