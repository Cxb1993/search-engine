 2
一、中文摘要 
軟體工廠的生產模式早在 70 年代就
被提出，但軟體工廠的概念卻未獲得認
同，究其原因在於軟體的應用領域既廣泛
而複雜，而工廠生產機制卻僅能生產一定
類 型 的 產 品 。 本 計 劃 提 出 Pseudo 
Software，並發展其相關工具，並進一步
提出軟體生產線模型，使得類似工廠生產
模式的軟體工廠能夠實際存在，進而提升
軟體生產速度，並確保軟體品質。 
關鍵字：軟體工程、軟體工廠、Pseudo 
Software、生產管理、軟體生產線 
Abstract 
As early as in the 1970’s, the notion of 
software factory that treats software 
development as a kind of factory production 
had been proposed. However, software 
factory has not yet been accepted by the 
software development community. The 
major cause of failure is that the factory 
model restricted to produce fix-type 
products. In this research, we propose the 
Pseudo Software and corresponding software 
product line models. Based on these models, 
the software factory as resembling hardware 
factory model can be existed.  
Keywords：software engineering, software 
factory, production tools, production 
management, pseudo software 
 
二、前言 
本計劃中所預計發展的軟體工廠模
式，目標是希望可以模仿硬體生產的工廠
運作機制。以往硬體廠商長久以近似工程
技術來設立一個產品生產線，用以一群生
產外觀、功能相近的產品，並透過大量生
產(Mass Production)來降低生產成本，這
是屬於一種規模經濟。然而，硬體廠商為
符合市場需求，相同的產品再也無法滿足
不同族群的顧客，而逐漸發展成少量多樣
的 生 產 模 式 (High-Mix, Low-Volume 
Production, HMLV Production)，透過市場
區隔來提升產品附加價值而獲利，這是屬
於範籌經濟。而少量多樣的生產模式，其
關鍵在於生產的硬體產品，原則上還是屬
於同一種類型的產品。硬體廠商在生產線
上對於同一類型的產品，也可說是屬於同
一種 pattern，儘管各有不同，但生產者
可以根據明確的物料清單 BOM 與生產
說明，即能實際生產出這些少量多樣的產
品。因此，我們模仿這樣的概念，於第一
年構想的 SoftBOM，亦即軟體的物料清
單，還須配合一個可以在需求面上描述預
計開發軟體的表達方式。儘管 Use case
是一個非常理想的需求定義機制，然而僅
利用 Use Case 顯然也無法直接與
SoftBOM 銜接，然後提交軟體工廠付諸
生產。 
我們所發展的 Pseudo Software 概
念，基本上可以解決上述所提及的困難。
當 Pseudo Software 概念得以落實後，對
應 SoftBOM 精神的需求表達方式也才可
以落實。因此，就像硬體工廠一樣，當一
個 軟 體 工 廠 可 以 事 先 發 展 出 其
SoftBOM，而需求發展者則利用 Pseudo 
Software 中對應該工廠的 SoftBOM 來定
義軟體需求時，這個 Pseudo Software 描
述的軟體需求，就可以被該軟體工廠接受
作為生產依據。而最重要的是，這樣的生
產概念具有以下幾個優點： 
• 軟體生產者與需求提供者間，在生產
過程中的耦合度大量降低。 
• 需求錯誤與變更大量降低。 
• 由於需求定義時已採用自己工廠的
SoftBOM，可以提升軟體生產速度，
並確保軟體品質。 
• 類似硬體工廠生產模式的軟體工廠得
以實際存在。 
Android是近幾年中是一大熱門的應
用，Google 將 Android 發展為開放式手
持裝置平台，且為開放原始碼 (Open 
Source)，由於其應用程式發展迅速且具
豐富變化的特性，我們希望能透過
Pseudo Software來發展及驗證Android應
用程式的需求模型。因此，在本年度的成
果中，我們以 Android 應用程式為例，實
現了一個發展軟體工廠所需相關工具，並
進一步提出一種模仿硬體工廠的軟體工
廠生產方式。 
 
 4
4.2 發展軟體工廠所需相關工具 
我們希望能透過 Pseudo Software 來發
展及驗證 Android 應用程式的需求模型，
使 Pseudo Software 能夠具象化，令使用者
能夠透過操作Pseudo Software來發展及驗
證需求。我們針對 Android 應用程式的需
求發展工具並實現Pseudo Software概念性
框架，將需求以 Pseudo Software 模型保
存。透過 Pseudo Software 需求模型能將需
求具象化以循序的方式播放需求讓關係人
能像真實軟體般地操作，也提供需求導覽
地圖呈現需求靜態結構讓開發團隊掌握需
求全貌。透過本工具讓需求擁有可操作、
可閱讀以及完整之特性，以減少溝通上的
鴻溝並有效萃取出需求以滿足多變的手持
裝置應用程式需求。 
圖 2 為 Pseudo Software 發展工具的領
域模型圖，Manager 負責管理 Pseudo 
Software，Pseudo Software 的 Presentation
由 Widget 構成。Manager 藉著修改 Widget
之屬性以更改 Presentation；也能描述
Widget 的 Field Constraints。當場景繪製完
成 後 ， 可 以 在 場 景 與 場 景 間 建 立
Navigation，由場景中 Widget 的 Event 所
觸發，會導向另一個場景。然而場景轉換
中可能有一些邏輯處理與資料傳遞是外觀
所無法呈現的，因此可以為 Navigation 撰
寫 Business Logic 以描述這些邏輯等。最
後，撰寫 Test Cases 描述如何驗證 Business 
Logic 與 Field Constraint，作為開發時的參
照。 
 
4.3 類似硬體工廠生產模式的軟體生產線
模式 
本節將說明我們所提出的軟體工廠模
型，從需求規格到產生最終軟體之間的整
個運作流程。為發展出類似硬體工廠之生
產模式之軟體生產線模型，我們將所提出
之的 SoftBOM 作為可被管理的軟體資
產，用以在軟體生產線中重複使用。圖 3
即為我們所提出以Pseudo Software為基礎
之軟體生產線模型，Target Product 為軟體
生產線最終所生產的產品，我們運用
Pseudo Software 需求模型來塑模所要發展
之軟體需求，其 Target Product Pseudo 
Software 即為塑模後之需求模型，透過
Pseudo Software 使得軟體開發團隊能在早
期階段得以確認軟體需求，並解決
IKIWISI 的困擾。而每一個 SoftBOM 均可
分為 SoftBOM Pseudo Software 模型及
SoftBOM Skeleton 兩個部份。前者運用
Pseudo Software 來塑模 SoftBOM 的需求
模型，以 Scene 的方式具體描述軟體需求
的使用情境、Interface Component 描繪其
GUI 操作介面、Business Logic 描述其商業
邏輯等方式，並在 Test Case 中記錄軟體通
過使用者可接受度測試之所必須檢驗的測
試案例。 SoftBOM Skeleton 則提供與
SoftBOM 實作相關之程式碼骨架、參考函
式庫及元件等內容，並提供許多程式碼範
例協助程式撰寫人員能夠正確、無誤地實
作該 SoftBOM 的功能，SoftBOM Skeleton
包含 UI Layer、Business Layer、Data Layer
及可執行的測試程式等實作內容，用以對
應於 SoftBOM Pseudo Software 模型中所
描述的各個元素，而 Service Layer 則提供
整個生產線共用的資源，如共用函式庫、
系統資源及資料庫等。 
 
 
圖 2: Pseudo Software 發展工具 
之領域模型圖 
 6
 
圖 4: 以 Pseudo Software 為基礎之軟體工廠生產模式 
五、結果與討論 
5.1 軟體工廠所需相關工具 – PS4Android 
在本年度的計劃中，我們發展了一個
支援 Pseudo Software 之需求發展工具，作
為軟體工廠中用以定義欲開發軟體之需求
模型，我們的工具提供簡單容易操作的使
用者介面，其中圖 5 為進行塑模時所操作
的介面環境，以下分別描述各區塊主要功
能(○1 ~○7 )：○1 為專案工作區，工作區中有
兩 個 分 頁 分 別 為 “ Stories ＂ 與
“Resources＂，其中 Stories 分頁為專案目
錄，根目錄為專案名稱；專案子節點為故
事名稱；而故事的子結點為場景名稱，雙
擊場景可以打開該場景。Resources 分頁為
該專案可使用之資源，使用者可以匯入圖
片與字串以供繪製場景時使用。○2 為元件
區，使用者可以在此挑選適當的元件加入
場景中，例如按鈕(Button)、文字區塊(Text 
Field)、檢核鈕(Check Box)等。○3 為場景
繪製區，使用者可以在此區域中繪製場景
並對以加入的元件進行拖拉或放大縮小等
動作。而此區域中以分頁的方式區隔不同
故事的場景，同一個故事的場景會被呈現
在同一個分頁中。○4 為元件列表區，正在
編輯的場景中包含的所有元件都會被列在
此。○5 為屬性編輯區，在場景繪製區中選
擇一個元件，此區會顯示該元件之屬性同
時也能透過此區修改元件之屬性，而每個
元件的屬性也不完全相同，如 Image Label
可以選擇欲顯示之圖片、Text 可以編輯文
字內容等。○6 為顯示屬於該場景中未指派
的 navigation，這些 navigation 都沒有指派
給任何一個元件，在稍後做場景繪製時可
以再指派給元件。○7 為需求規格顯示區，
當使用者點選任一元件時此區會將其
Navigation 、 Business Logic 、 Field 
Constraint 與 Test Case 顯示出來。 
 
圖 5: PS4Android 繪製外觀 
 
5.2 類似硬體工廠之軟體生產線模型 
當 Pseudo Software 概念得以實現，並
發展軟體工廠所須之各種 SoftBOM 後，配
 8
12. M. A. Cusumano, "The Software Factory: A Historical Interpretation," IEEE 
Software, vol.06, no.2, March/April, 1989, pp. 23-30. 
13. M. W. Evans, The Software Factory, Wiley, New York, 1989. 
14. C. Fernström, “The Eureka Software Factory: Concepts and Accomplishments,” 
Proceedings of the 3rd European Software Engineering Conference, LNCS No. 
550, pringer-Verlag, 1991, pp. 23-36. 
15. C. Fernstrom; K.-H. Narfelt; and L. Ohlsson, "Software Factory Principles, 
Architecture, and Experiments," IEEE Software, vol.9, no.2, pp.36-44, Mar 1992  
16. A. Fuggetta, L. Lavazza, S. Morasca, S. Cinti, G., Oldano and E. Orazi, “Applying 
GQM in An Industrial Software Factory,” ACM Trans. Softw. Eng. Methodol. 7, 4 
(Oct. 1998), pp. 411-448. 
17. J. Greenfield, K. Short, S. Cook, and S. Kent, Software Factories, Assembling 
Applications with Patterns, Models, Framework, and Tools, Wiley, 2004. 
18. M. L. Griss, and K. D. Wentzel, “Hybrid Domain-Specific Kits for A Flexible 
Software Factory,” In Proceedings of the 1994 ACM Symposium on Applied 
Computing, Phoenix, Arizona, United States, March 06 - 08, 1994, pp. 47-52. 
19. J.D. Herbsleb, and D. Moitra, “Global Software Development,” IEEE Software, 
Vol. 18, Issue 2, 2001, pp.16-20. 
20. W. S. Humphrey, “Software and The Factory Paradigm,” Software engineering 
Journal, Vol.6, Issue 5, September, 1991, pp. 370-376. 
21. IEEE, “IEEE standard for developing software life cycle processes”, IEEE Std 
1074 – 1995 , April, 1996. 
22. B. Langlois, and D. Exertier, “MDSoFa, A Model-Driven Software Factory,” 
OOPSLA 2004, MDSD Workshop. 
23. C. Li, H. Li, and M. Li, “A Software Factory Model Based on ISO 9000 and 
CMM for Chinese Small Organizations,” Proceedings of the Second Asia-Pacific 
Conference on Quality Software, December, 2001, pp.288–292. 
24. N.K. Lim, J.S.K. Ang, and F.N. Pavri, “Diffusing Software-Based Innovation with 
A Software Factory Approach for Software Development,” Proceedings of the 
2000 IEEE International Conference on Management of Innovation and 
Technology, Vol. 2, November, 2000, pp. 549 -555.  
25. M. S. Mahoney, "Finding a History for Software Engineering," IEEE Annals of 
the History of Computing, January–March 2004, pp. 8-19. 
26. Y. Matsumoto, "Japanese Software Factory," in Encyclopedia of Software 
Engineering, (ed.) Marciniak, J.J., FIRST EDITION, Johon Wiley & Sons, N.Y, 
pp.593-605. 
27. J. Nandhakumar, "Managing Time in a Software Factory: Temporal and Spatial 
Organization of IS Development Activities," The Information Society, Volume 18, 
Number 4, 1 July 2002 , pp. 251-262(12) 
28. L.J. Osterweil, “Software Processes are Software Too,” Proc. 9th Int’l Conf. 
Software Eng. (ICSE 9), IEEE Computer Soc. Press, 1987, pp. 2-13. 
29. K. Pillai, and V.S. S. Nair, “A Model for Software Development Effort and Cost 
Estimation”, IEEE Transactions on Software Engineering, Volume 23, Issue 8, 
August, 1997 pp: 485 – 49. 
30. K. Potosnak, “Human Factors-Management: The Key to Success”, IEEE Software, 
Volume 6, Issue 2, March, 1989, pp: 86 – 88. 
31. W. Schäfer, and H. Weber, „European Software Factory Plan—the ESF profile,” 
In Modern Software Engineering, Foundations and Current Perspectives, P. A. Ng 
 10
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
▓ 達成目標 
說明： 
在本計劃中，我們發展軟體工廠所需之相關工具，使得類似於硬體生產的軟體工廠生產方式
成為一種可行的方案。另一方面，本計劃也提出一個軟體生命週期管理的快速導入方法，用
以幫助軟體團隊簡單且快速導入軟體生命週期管理工具。 
研究成果在學術期刊發表或申請專利等情形： 
論文：▓已發表 □未發表之文稿 □撰寫中 □無 
 
本計畫執行至今的研究成果已逐一發表在國內外的會議及期刊上： 
國際期刊與研討會論文: 
• 論文「Pseudo Software: a Mediating Instrument for Modeling Software Requirements」
已發表至國際期刊 Journal of Systems and Software, Volume 83 ,  Issue 4  (April 
2010), Pages: 599-608 
• 論文「Rapid Application Lifecycle Management: a new Approach with Tool Support」 已
被國際研討會 SoMeT2010 接受。 
•  
國內研討會論文: 
• 論文「一個以 Pseudo Software 為基礎之 Android 需求發展工具」已發表至第五屆台灣
軟體工程研討會論文集(TCSE2009) 
• 論文「一個結合 Problem Frames 與 Pseudo Software 的需求發展方法」已發表至第二
十一屆物件導向技術及應用暨第六屆台灣軟體工程研討會論文集 
• 論文「RALM –VSTS 的快速導入法,」 第四屆台灣軟體工程研討會論文集」已發表至
第四屆台灣軟體工程研討會論文集(TCSE2008) 
請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以 500
字為限） 
計畫執行至今已獲致如下成果： 
1. 提出 Pseudo Software 新概念：基於 Pseudo Software，將 IKIWISI (I＇ll Know It When 
I See It)的困擾得以提前在需求階段解決外，更重要的是需求能夠以 Pattern 的方式記
錄下來。同時 Pseudo Software 也可以與軟體工廠的 SoftBOM 存在相對應關係，如此才
能夠使軟體工廠能夠模仿硬體工廠的生產模式。 
2. 提出一個軟體生命週期管理的快速導入方法，稱為 RALM。RALM 首先提供一個軟體生命週
期管理的參考模型與定義樣版。透過參考模型與定義樣版，中小型軟體團隊可以快速發
展出所需的軟體生命週期管理定義。而發展完成的軟體生命週期管理需求，可進一步利
用 RALM 所提供的工具 ALMTranslator 產出 VSTS 流程範本以及 VSTS 設定指引，幫助軟
體團隊簡單且快速導入微軟公司的 VSTS 軟體生命週期管理工具。 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                           日期： 99  年 3  月 25  日 
 
一、參加會議經過 
本人於 3/14 自桃園出發至東京，並於 3/17 返台。其中 3/15 參加 GRACE 國
際高等軟體工程會議，3/16 則參加 AsianPLoP 2010。隨著 design patterns 在
軟體設計上的逐步成熟，PloP 會議也開始受到更大的關注，因此，當 PloP
首次在亞洲由日本國立情報研究所的軟體研究中心 NII GRACE Center 召開
主辦，台灣能夠積極參與此項會議，將會有助於提升我方在物件導向與軟體
計畫編號 NSC 98-2221-E-029-022- 
計畫名稱 適用於企業計算之軟體工廠模式-II 
出國人員
姓名 
周忠信 
(計畫主持人） 
服務機構
及職稱 
東海大學資訊工程與科
學系副教授 
會議時間 2010 年 3 月 15 日至 2010 年 3 月 17 日 會議地點 Tokyo, Japan 
會議名稱 
(中文) 
第一屆亞洲程式樣式語言會議暨 2010 GRACE 國際高等軟體
工程會議 
(英文) 
 AsianPLoP 2010: 1st Asian Conference on Pattern Languages of 
Programs and  2010 GRACE International Symposium on 
Advanced Software Engineering 
發表論文
題目 
(中文) N/A 
(英文) N/A 
三、考察參觀活動(無是項活動者略) 
無考察參觀活動。 
 
四、建議 
PloP 的會議型式，個人認為很適合於軟體工程相關的 workshop 型式研討會，
因為這對於與會者與作者雙方而言，在該領域議題上將能有更大的收穫。 
 
五、攜回資料名稱及內容 
AsianPLoP 2010 論文集（available from 
http://patterns-wg.fuka.info.waseda.ac.jp/asianplop/program.html ） 
 
六、其他 
無。 
98 年度專題研究計畫研究成果彙整表 
計畫主持人：周忠信 計畫編號：98-2221-E-029-022- 
計畫名稱：適用於企業計算之軟體工廠模式-II 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 3 3 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 1 1 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 1 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 1 1 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
