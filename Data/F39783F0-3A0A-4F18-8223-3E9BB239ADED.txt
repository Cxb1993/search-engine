 行政院國家科學委員會補助專題研究計畫
■成果報告   
□期中進度報告 
 
可攜輕薄型多核心嵌入式系統核心間通訊程式庫之設計與開發 
 
計畫類別：■個別型計畫   □整合型計畫 
計畫編號：NSC  99－2220－E－002－028 
執行期間：99年 8月 1日至 100年 7月 31 日 
 
執行機構及系所：國立臺灣大學資訊工程學系暨研究所 
 
計畫主持人：洪士灝 助理教授 
共同主持人： 
計畫參與人員：涂嘉恆、邱柏勳、陳泓叡、張育碩、陳君翰 
 
 
成果報告類型(依經費核定清單規定繳交)：■精簡報告  □完整報告 
 
本計畫除繳交成果報告外，另須繳交以下出國心得報告： 
□赴國外出差或研習心得報告 
□赴大陸地區出差或研習心得報告 
□出席國際學術會議心得報告 
□國際合作研究計畫國外研究報告 
 
處理方式：除列管計畫及下列情形者外，得立即公開查詢 
            □涉及專利或其他智慧財產權，□一年□二年後可公開查詢 
 
 
中   華   民   國  100 年 10 月 31 日 
 
可攜輕薄型多核心嵌入式系統核心間通訊程式庫之設計與開發 
 
 3 
Abstract  
Multicore architectures have become increasingly popular for embedded systems, but diversified inter-core 
communication schemes provided by various vendors have impacted the portability of multicore applications 
on embedded systems and slowed down the software development. In general, parallel applications written 
with the message-passing paradigm are relatively portable. While MPI programs can run across a variety of 
systems, from PC, clusters, to supercomputers, the MPI library is simply too large for embedded systems. 
Previously, we designed a library called MSG, which emphasizes on the portability and efficiency of 
multicore applications on resource-constrained embedded systems. The work described in this paper further 
reduces the memory usage for many-core systems by incorporating two scalable buffer management schemes. 
We also present mathematical models and experimental results to evaluate the performance of the library. Our 
results show that our library is both portable and scalable, as it has been ported to several embedded platforms 
and outperforms MPICH2, a popular MPI library that has been optimized over the years. The findings also 
provide some insights on the design of communication architecture for a many-core system. 
 
Keywords- embedded systems, multicore, portability, scalability, performance, message-passing 
可攜輕薄型多核心嵌入式系統核心間通訊程式庫之設計與開發 
 
 5 
and high performance computing (HPC). On the other hand, heterogeneous multicore processors, such as IBM 
Cell processor, TI OMAP processors, Nvidia Tegra APX series processors, and Qualcomm Snapdragon 
platforms are designed to carry out domain-specific embedded applications and may achieve high power 
efficiency with specialized acceleration engines. Unlike homogeneous systems, heterogeneous systems do not 
share standard programming languages and inter-core communication libraries, and there are very few 
performance tools available on these systems.  
  The lack of a standard inter-core communication library is the biggest problem that impacts the portability 
of embedded multicore applications and slows down the software development. Without a standard inter-core 
communication library, the application developed for one multicore system cannot run on another multicore 
system at all. The inter-core communication libraries that are commonly available on multicore PC’s and 
servers, such as the POSIX Threads, OpenMP, MPI (Message Passing Interface), etc., are not suitable for 
embedded programming because (1) they demand too much amount of resources from each processor core, 
and (2) they are not efficient in supporting embedded applications. 
 In this project, we would like to integrate these works and use our experience to develop a highly portable 
inter-core communciations that enable embedded applications to run across many multicore systems. We aim 
to develop the software architecture and a set of API's of a light-weight communication library, called MSG, 
with the portability, efficiency, and low memory usage in mind. The philosophy behind our design is to keep a 
small set of supported interfaces and minimize the efforts of porting existing programs. As shown in Figure 1, 
we have chosen the essential functions supported by both MCAPI and MPI to be included into our design. In 
addition, to improve the performance and portability of the communication library, we use layered approach 
to design the library, protocol layer and porting layer. The protocol layer is responsible for executing the 
handshake protocol to ensure a requested communication operation is done corrected, while the porting layer 
should take advantage of underlying communication facilities provided by the target platform. 
  We have prototyped the proposed MSG library on the IBM Cell platform and have gathered some 
preliminary experimental results to confirm our approach. And we believe that a standard inter-core 
communication library is important to Taiwan’s embedded system industry and developer’s community, we 
would like to future  develop the MSG library and extend it to cover more multicore embedded systems. We 
plan to release our work as an Open Source project and collaborate with the developers. 
 
Figure 1.  The essential functions in MPI, MCAPI and MSG 
 
可攜輕薄型多核心嵌入式系統核心間通訊程式庫之設計與開發 
 
 7 
(platform-independent) functions to support the MSG API and the internal operations in the library. The 
following subsections will discuss the design for these three layers. 
Collective 
communication
Point-to-point 
communication
One-sided
communication
OS dependent 
configuration 
functions
API 
Layer
MSG-Core
Layer
Porting
Layer
Shared memory 
architecture
Distributed memory 
architecture
Resource
management
Internal Protocols
Management
function
Platform dependent
configuration functions
 
Figure 2. The software architecture of MSG library. 
1.The API Layer 
The application layer provides 14 functions as the programming interface to application developers. As shown 
in Table 1, each of these functions corresponds to a function defined by the MPI standard to maximize the 
compatibility with existing MPI applications. The functions are divided into four categories: resource 
management functions, point-to-point operations, collective operations, and one-sided operations.  
Table 1. The API supported by MSG and the mapping to MPI. 
 
2.The MSG-Core Layer 
The MSG-core layer contains two components: resource management module and internal protocol module. 
The resource management module maintains all the data structures including control messages, request 
queues and relay buffer pools. The internal protocol module contains the five functions that are needed to 
support the functions defined in the application layer, as shown in  
Table 2. For these five functions, we provide two sets of implementations, so that the MSG library will adopt 
the user memory copy scheme if shared memory is present or deliver messages via the network interface on a 
distributed memory system. Although both submodules are included, the library builder should use a 
compile-time flag to choose one and minimize the code size. Based on the choice, msgi_init() calls 
msgi_sm_init() or msgi_dm_init() to allocate the relay buffer pools in the shared memory fashion or the 
distributed memory fashion. Likewise, msgi_exit() calls msgi_sm_exit() or msgi_dm_exit() to release 
resources. 
可攜輕薄型多核心嵌入式系統核心間通訊程式庫之設計與開發 
 
 9 
the throughput for short messages as the service processor became the bottleneck for control messages in this 
case. 
 
Figure 3. Projected throughput based on the performance model. 
 
 
Figure 4. Measured throughput for point-to-point operations. 
 
Figure 5. Measured throughput of 16 pairs of point-to-point operations among 32 processor cores. 
無研發成果推廣資料 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
參與 2010 年教育部嵌入式系統設計競賽，奪得系統軟體組特優(第一名) 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
