2 
 
中文摘要 
隨著資訊爆炸時代的來臨，個人化推薦服務成為各類資訊系統中，非常重要
的元件。以中興大學為主的研究團隊，從 2006 年開始，針對圖書館的圖書借閱
服務，建立了一個以個人本體論為基礎的圖書館推薦系統，並將之命名為 PORE 
( Personal Ontology REcommender System)。這個系統是目前所知，第一個將個人
本體論應用在圖書推薦的系統，具有相當的前瞻性。然而，在實作上，這個系統
仍有需要改善的地方。本論文便是針對其視覺化展現推薦結果，以及合作式過濾
的效能，提出改善。 
在推薦結果視覺化方面，本論文使用開放原始碼的工具 OntoSphere 3D，將
個人本體論以及其與推薦圖書的關係，以 3D 的方式呈現。在三度空間中，物件
可以旋轉、收縮、移動、變化形狀，以更豐富的視覺效果，提供讀者更真實的查
閱界面。在合作式過濾的執行效能方面，我們也透過預先分群的方式，將有重疊
借閱分類紀錄的讀者先歸為一群，並在該群讀者中去找相似的讀者。在實驗中，
新的演算法，將可以節省 96%的運算次數。本研究的成果，使 PORE 系統的運
作更為快速，並具有優良的讀者介面，對系統的推廣，將有極大的幫助。 
 
 
 
 
 
關鍵字：個人本體論，本體論視覺化，OntoSphere 3D，樹距離，三角不等式 
   
4 
 
1. 前言 
十幾年來，網際網路快速發展。網路發展的初期，其目標為『製造對顧客有
用的』資訊。到後來資訊爆炸，此時『快速找到顧客想要的』資訊，為這個時代
各家的資訊系統的重點。而在未來，『預期什麼是顧客想要的』資訊，將是系統
發展的重點。在理想的資訊系統中，一旦讀者登入網路，不等讀者發出指令，系
統便先分析讀者的特性，而積極的推薦有用的資訊給讀者。 
圖書館當然也不例外，圖書館的讀者也就是相當於是圖書館的客戶一般，圖
書館的使用率高低，也象徵著圖書館的經營成功與否。大約在 10 年前開始資訊
化的普及，各家圖書館也紛紛引進圖書館的自動化系統，取代原本的紙本作業，
經過這一段時間的經營，圖書館也累積了相當的讀者借閱資料與書籍資料於系統
內。然而圖書的藏書量年年成長，在茫茫書海中，如何找出讀者喜愛的書籍推薦
給讀者，進而提高圖書館的使用率，因此也變成一個值得探討的議題。在圖書館
的服務中，以讀者為中心的服務理念，是針對讀者在需求資訊的差異性下，善用
個人化服務技術來調整圖書館的資訊服務，把最貼切的館藏資訊傳達給讀者個人，
進而提升館藏資料的利用率和圖書館的經營績效，是圖書館服務行銷重要的方式
之一[8]。 
本實驗室為圖書館所發展的PORE(Personal Ontology Recommender System)
系統[9-11]，是一個植基於個人本體論，並具備合作是推薦功能的個人化圖書推
薦系統。該系統能以縮放清單的方式展示讀者的個人本體論，並依據讀者的個人
本體論，找出與個別讀者最相似的一群讀者。並將這群讀者喜愛但尚未被開讀者
借閱的館藏書籍，推薦給讀者。目前系統所展示的個人本體論及圖書推薦如圖 1
所示。 
PORE 系統使用個人本體論來做為推薦的依據，為圖書館推薦系統的創舉，相
當具有前瞻性。然而，在其 2009 年所發表的版本中，仍有以下缺點：(1) 讀者
的個人本體論以縮放清單的方式呈現給讀者，其介面太過單調，無法呈現本體論
樹狀結構的變化，以及其與相似讀者的連結關係。(2) 目前系統合作式過濾的效
能在讀者人數過多時，速度不佳。而中興大學圖書館目前的系統人數已累積到兩
萬多人，因此系統的運作將遇到運算速度的瓶頸。
6 
 
2. 相關研究 
2.1. 本體論視覺化技術 
在本體論的呈現方面，呈現的策略是非常多樣的，從不同的結構、角度、縮放等，
呈現本體論。在 Akrivi Katifori, Constantin Halatsis, et al. [1]的論文中，大致上把
視覺得化的方式歸類為下面幾種： 
z 縮放清單(Indented List) 
z 節點連結與樹(Node–Link and Tree) 
z 可縮放(Zoomable)[2] 
z 空間填充(Space filling ) 
z 焦點 +語境與扭曲(CONTEXT + FOCUS AND DISTORTION )[3] 
每個方式從不同的結構、角度、縮放等，呈現本體論。各個軟體與呈現方式，
都會有它的特色、適用的時候、優點與缺點。 
在『縮放清單』呈現上，Prot´eg´e 軟體有易於實做與表示、容易熟悉、與快
速瀏覽的優點，但是它僅代表了樹狀結構，僅顯示單一繼承關係，且不能顯示角
色的關係，也不易全展開與全縮回。在『節點連結與樹』適合用於表達『結構』
與『轉向關系(trends‐related)』方面的問題，但是採用 Tree  node‐link  method會
使得畫面的使用率低落。而在『可縮放』的呈現上，易於瞭解節點間的關係與詳
細資料，但是有標籤重疊、不易顯示整體階層關係等缺點…等。 
雖然本體論視覺化的軟體不勝枚舉，但真正做到 3D 的卻不多，開放原始碼
提供修改的更是少之又少，在考察的過程中僅發現『OntoSphere  3D』與『3D 
Hyperbolic Tree』是三維又有開放原始碼之軟體，但 3D Hyperbolic Tree  是屬於『焦
點  +語境與扭曲(CONTEXT + FOCUS AND DISTORTION )  』的呈現方式，雖然說在
標示出關注的節點與其相關節點的關係有一個好的表現方式，但在本論文裡，必
須呈現個人本體論之階層關係『焦點  +語境與扭曲』並不是一個很好的呈現方式，
且『3D Hyperbolic Tree』無法提供不同顏色或形狀等，去表現本體論多樣的資訊。
因此本論文挑選『OntoSphere 3D』做為本論文的呈現軟體。 
2.2. 本體論喜好度的計算 
本體論喜好度的計算本實驗室的PORE系統使用Liao(2006)[4]半衰期方式遞
公式(2)： 
……….....(2) 
上述 Sub(x,y)的定義，其所計算出來的值，將介於 0 到 Del(x)+Ins(y)之間。
當 x 與 y 的關鍵字及其喜好度完全鄉同時，則 Sub(x,y)會等於 0；若 x 與 y 的關
鍵字完全不同時，則 Sub(x,y)會等於 Del(x)+Ins(y)。 
個人本體論相似度資料集則須根據公式(2)由讀者-讀者間計算出相似度，產
生一個User-User 結構的相似度矩陣(如圖 2)，矩陣中每一個Cell 保存讀者之間
的個人本體論相似度[10]，亦即俗稱的暴力破解法。 
 
圖 2. 個人本體論之 User-Item 陣列 
中興大學圖書館之借閱資料內，有借閱紀錄之讀者為兩萬七千四百三十人，
2,7430 平方為七億多，這是第一層讀者與讀者的比對，若比對到讀者有相同的喜
好類別，在往下比對其關鍵字，需計算的次數將會是一個天文數字。因此本實驗
室在先前王煥宇(2009) [11]，「一個應用三角不等式的個人本體論相似度演算法」
提出了 TDTI 的方法，加速其計算速度。 
TDTI 先將讀者先行分群分類之後再做計算，求近似解的作法，很有可能發
生一個狀況：讀者 A 與讀者 B，兩人的本體論是相似的，若分群分類的方法做
的不好，易在分群分類的時候就被分為不同的群，使得系統認為這兩個人是不相
似的，進而造成計算效能低落的問題。因此，本篇研究提出了一個改善 TDTI 的
方法，命名為 TDTI+，事先作資料刪減，大幅降低計算量，進而提昇整體計算效
能。而本研究的另一目標，則是利用『OntoSphere 3D』，將本體論以 3D 的方式
呈現，以便讀者查看推薦書籍與讀者。 
  
8 
 
10 
 
先計算出每位讀者的下界（Maxβ），以取出最相似的 10 人為目標，至少要先完
整的計算出 10 個人與所有人的相似度，但本論文為取得一個比較良好的下界，
先行計算出 50 個人與所有人的相似度，以取得較佳之下界值。 
根據王煥宇(2009) [11] Dist()的計算方法而改良得到的TDTI+，本研究僅挑出有
共同節點之讀者來做計算，在計算之前，也使用三角不等式之原理，判斷是否需
要計算之後，再行計算。再計算完五十人與所有人完整的相似度之後，隨機挑選
尚未計算相似度的 10 個人，先觀看一下他們原本需要比對的人數，以及用三角
不等式後，需要比對的人數，數據表格如表 1。 
表 1. TDTI+ 對隨機 10 位讀者的效能提升 
讀者(學號)  所有有共同節 點的讀者數量 
用 TDTI取下界(10人) 
後該計算的數量 
減少比
對人數 減少比對人數比率
59656006  3074  1662 1412 45.93%
59656016  3587  2551 1036 28.88%
49253123  408  36 372 91.18%
49724034  9689  8219 1470 15.17%
79667002  627  159 468 74.64%
79544015  6443  1481 4962 77.01%
49331037  6042  1192 4850 80.27%
49765001  159  74 85 53.46%
K00899  3791  354 3437 90.66%
79662319  1497  669 828 55.31%
平均值  3531.7  1639.7 1892 61.25%
 
由表 1可看出，若暴力破解法也僅計算有相同節點之讀者，在不分群的狀況
下TDTI對隨機 10 位讀者的計算量平均約可以節省 61.25%的計算量。 
先前的 TDTI演算法為逐一的取出比較，若小於下界值（β）再做運算，否
則不計算，本論文提出的 TDTI+改善點為計算前先檢取出有共同節點的讀者，在
依三角不等式判斷，若小於下界值  β  再做運算。其演算法運算流程如下： 
1. 從資料庫中取出有借閱紀錄之讀者 
2. 過濾掉沒有相同節點的讀者 
3. 使用 TDTI 再過濾掉大於下界值β  的讀者 
4. 計算相似度 
5. 存放計算結果 
 Procedure: CalculateAndModifyMostSim 
Input: i: the user number 
     j: the second calculated user 
Output: the similarity 
BEGIN 
1. s←CalculateSim(i, j) 
2. for t←1 to k  // k is the numbers of users. 
3. do  if s < MostSim[i,t]  
4.     then if t<k  
5.         then  push the tth and later elements of MostSim[i] backward one 
6.           put j on the tth position of MostSim[i] 
7.           break 
8.  end 
END 
圖 6. TDTI+ 之子函數 
4. 本體論視覺化：OntoSphere 3D 
用戶端的OntoSphere 3D軟體則是從OntoSphere 3D網站[5]下載Eclipse版本原
始碼加以修改，OntoSphere 3D是以JAVA的PDE (Eclipse Plug‐in Development 
Environment)環境再加入JAVA 3D套件、本體論相關套件等，開發而成；其架構如
圖 7。 
 
圖 7. OntoSphere 3D 架構 
12 
 
本 3D本體論視覺化系統使用JAVA的技術設計及撰寫而成，伺服器端，由
JAVA程式計算讀者的相似度與推薦之書籍存於伺服器端的資料庫，當用戶端予
伺服器端要求OWL檔，伺服器端經由Tomcat中的JSP程式，轉換成本體論的OWL
檔案傳送予用戶端的OntoSphere 3D軟體；當OntoSphere 3D接收到伺服器端傳來
之OWL檔，經由軟體的運算、處理等，呈現於使用者的畫面上。系統架構如圖 9。 
OntoSphere 3D  
 
Response 
request 
 
14 
 
 
 
 
 
 
計算讀者相似度與推薦書籍
圖 9. 系統架構圖 
Data
Database 
本研究中，所使用的PORE資料集名稱與紀錄筆數如表 2所示。 
表 2. 實驗資料集筆數 
資料集名稱  筆數
讀者資料  64,832
讀者借閱記錄 805,930
有借閱記錄的讀者 27,430
中文館藏資料 223,184
英文館藏資料 103,513
參考本體論 14,602
個人本體論資料 411,389
個人本體論關鍵字資料 3,558,062
6.2. 實驗數據與分析 
6.2.1. TDTI+效能分析 
使用本研究之TDTI+計算經過濾後所有人之相似度，需比對之數量為
13,116,011，相較於原本暴力破解法所需計算之比較次數減少 96.51%的資料比對。
將所有比對的時間加總為 685,380,656 毫秒，大約等於八天的時間；兩位讀者比
對的平均時間大約等於 52.26 毫秒，數據分析整理如表 3： 
   
 (1)  本體論裡面的各個節點有許多屬於自己的值，使用本體論中的”hasValue” (屬
性值：一個屬性可以被要求擁有一個特定的個體作為它的值[10])，將喜愛程度、
長度等值標示上去。 
(2)  將『PersonalOnto』節點附加上”inverseOf” (一個屬性可以被聲明為另一個屬
性的逆屬性。如果 P1被聲明為 P2的逆屬性，那麼如果 X通過 P2關聯到 Y，則 Y
通過 P1關聯到 X [1])給交點讀者 
(3)  將推薦給讀者的書籍，根據個人本體論的分類，以”subClassOf “的方式掛在其
喜好類別下。 
6.2.3. 個人本體論視覺化 
本研究以OntoSphere 3D套件，實做個人本體論視覺化呈現如圖 10。依序解
說如下： 
左欄：Indented List 的方式呈現階層關係，包含了『主要讀者』、『與此位讀者
相似的讀者』、『讀者的個人本體論』、『此位讀者喜好的類別』、『推薦予此位讀
者的書籍』。 
右欄：3D場景呈現，提供讀者操作。其中，白色表示有物件被遮蔽，黑色為
關注的焦點，綠色為進入關係，紅色為出去關係，藍色表示此元素的屬性。可
透過左鍵點擊擴展其物件關係，或是拖曳以平移、縮放、旋轉等。中鍵為元素
的展開縮放，右鍵則為次選單，亦加入航行之功能，其呈現如圖 12。由於顧
及多數讀者不具本體論之專業知識，我們亦加入醒目文字，加強畫面之說明，
如圖 11之藍圈處。 
 
16 
 
 
圖 11. 系統 3D 介面 
 
18 
 
from http://www.ida.liu.se/~janma/SemWeb/Slides/ontologies1.pdf  
[2] Akrivi Katifori, Constantin Halatsis, George Lepouras, Costas Vassilakis, Eugenia 
Giannopoulou,”Ontology Visualization Methods—A Survey” , ACM Computing 
Surveys (CSUR) Volume 39 , Issue 4, 2007 
[3] T. Gruber, ”A translation approach to portable ontology specifications”. In: 
Knowledge Acquisition. 5: 199-199, 1993 
[4] I-En Liao, Shu-Chuan Liao, Kuo-Fong Kao, and Ine-Fei Harn, “A Personal 
Ontology Model for Library Recommendation System,” Proceedings of 9th 
International Conference on Asian Digital Library, S. Sugimoto et al. (Eds.), 
Lecture Notes in Computer Science, Vol. 4312, Springer-Verlag, pp. 173-182, 
2006 
[6] Keith Andrews, Josef Wolte, Michael Pichler, “Information PyramidsTM :A New 
Approach to Visualising Large Hierarchies”, IEEE Visualization’97, Phoenix, 
Arizona , pp. 49–52, 1997. 
[5] OWL Web本體語言概述-推薦標準，線上檢索日期：2010 年 5 
月http://zh.transwiki.org/cn/owloverview.htm 
[8]卜小蝶，「淺析個人化服務技術的發展趨勢對圖書館的影響」。國立成功大學
圖書館刊，2，63-73，1998。 
[9] 張益龍，「提昇圖書館推薦系統效率與視覺化的演算法」，中興大學資訊科學
與工程研究所，碩士論文，2010。 
[10] I-En Liao, Wen-Chiao Hsu, Ming-Shen Cheng, and Li-Ping Chen, “A Library 
Recommender System Based on Personal Ontology Model and Collaborative 
Filtering Technique for English Collections,” The Electronic Library, Vol. 28, No. 
3, 2010, pp. 386-400. 
operational system, it is still evolving toward a more efficient and more user-friendly 
recommender system. For most of the collaborative filtering based recommender 
systems, one challenging problem is to cope with high computational requirements for 
computing similarity between any two users. We are currently developing a more 
efficient algorithm based on triangle inequality of edit distance on trees for computing 
similarity between two personal ontologies. Preliminary experimental results show 
that the number of data comparisons can be reduced by 95.95% compared to that of 
brute force algorithm. 
 
 Figure1. System architecture of PORE system 
 
We are also working on implementing a personal ontology visualization tool using 
OntoSphere 3D to present personal ontology, top 10 like-minded users, and top 10 
recommendations in three dimensional images as shown in Figures 2-3. 
出席國際學術會議心得報告 
                                                             
計畫編號 NSC 98-2221-E-005 -083 
計畫名稱 提升圖書館個人本體論相似度計算速度之研究 
出國人員姓名 
服務機關及職稱 
廖宜恩 
中興大學資訊科學與工程學系教授 
會議時間地點 July 7-9,2010 在捷克布拉格(Prague, Czech Republic) 
會議名稱 Second International Conference on Networked Digital Technologies 
發表論文題目 An Efficient Indexing and Compressing Scheme for XML Query Processing 
 
一、參加會議經過 
 
    本次研討會於 2010 年 7 月 7-9 日，在舉行捷克布拉格(Prague, Czech Republic)的 Charles 
University 舉行。這次會議總共有 85 篇來自 34 國的論文發表，論文接受率是 39%。論文集也
由 Springer 出版，成為 Communications in Computer and Information Science 系列書籍
的 Vol.87-88。我的論文報告安排在第一天上午。  
 
 
二、與會心得 
 
本研討會是較中型的國際會議，主辦單位特別邀請知名的學者作主題演講(Keynote 
Lecture)，如德國的 Theo Härder 教授主講 ”Implementing updates and transaction isolation in 
XML DBMSs”，他的演講讓我受益良多。我報告論文後，也引起蠻熱烈的討論，成果受到與
會者的肯定。本人對於能出席這次會議並發表論文，並和來自不同國家的學者交換意見，深
覺獲益良多，尤其是能認識主辦人之一的 Dr. Eyas El-Qawasmeh，他非常支持由我在中興大學
資工系主辦一個國際研討會，他將透過” Society of Digital Information and Wireless 
Communications”，鼓勵更多國際學者投稿參加。我所發表之論文附錄如下： 
 
 
An Eﬃcient Indexing and Compressing Scheme for XML Query Processing 71
the XML tree for matching patterns, and this process may be time-consuming
because the matching patterns may be scattered at diﬀerent locations in the
document. Various indexing techniques have been proposed in the literature for
improving the performance of query processing. They can be categorized into
three main classes [3]: structural summary indices, structural join indices, and
sequence-based indices. However, these indexing methods focused mainly on how
to speed up the query processing of XML documents. They suﬀer from some of
the following problems in various degrees. First, some indexing methods require
huge size of index structures, which could be bigger then the original XML doc-
ument in some cases. Second, some of them require long index construction time
in order to minimize the size of index structures. Third, some of them cannot
support complex queries eﬃciently.
To overcome the aforementioned problems, we propose a novel indexingmethod
called NCIM (Node Clustering Indexing Method), which uses hash-based tables
to build indices. The merits of the proposed method are two folds:
1. By clustering nodes with the same tag name, NCIM is not only an indexing
method but also a compressing scheme for XML documents. The proposed
method has very low index construction time as well as small index size.
2. The index structures of NCIM are stored using hash-based tables which
support fast access to data and eﬃcient processing of various queries, such as
twig queries, partial matching queries, and content queries with constrained
predicates.
The rest of this paper is organized as follows. We review the related work in
Section 2. In Section 3, we introduce the concept of NCIM and demonstrate
how it works to process various queries. The experimental results are reported
in Section 4, and the conclusion is given in Section 5.
2 Related Work
In this section, we brieﬂy present some research results in the literature on
indexing XML documents.
2.1 Structural Summary Indexing Methods
The basic idea of the structural summary indexing methods is to merge the same
sub-structures in an XML document. Two common ways to summarize structure
are summary by label paths [4,5,6,7] and summary by bisimulation [8,9,10,11].
DataGuides [6] summarize all label paths in the XML document(Fig. 1). A
label path is a sequence of one or more labels from root to a speciﬁc node.
Each node in a DataGuide has an extent for the corresponding nodes in the
original XML document. The advantage is to reduce the search space for simple
regular expression. However, DataGuide is not feasible for twig queries, since the
summarized structure is not the same as the original XML document.
An Eﬃcient Indexing and Compressing Scheme for XML Query Processing 73
Fig. 3. (a) The Structural Index and (b) the Content Index
Each node n is labelled with a quadruple (level, n, n, p), where “level”
represents the depth of n with the root as level 1, “n” is the serial number of n
derived from a depth-ﬁrst traversal of the tree (the root node is assigned 1 also),
“n” is the largest serial number of n’s descendents, and the “p” is the position
of the corresponding content in the Content Index. The PCIM reduces the index
space with a high compression ratio and eﬃciently process complex queries.
2.2 Structural Join Indexing Methods
Most of the structural join indices rely on encoding the XML document to cap-
ture the position and the structural relationship between document elements.
The codes of elements are clustered by the tag name. A given query is broken
down into individual simple paths. The query processor determines elements
that match sub-query tree nodes and then joins the obtained sets together with
a merge-join algorithm [3]. This approach produces huge amount of intermediate
results that cause unnecessarily high processing cost. Various techniques have
been proposed to speed up merge-join processing.
Chien et al. [14] proposed a structural join algorithm, that based on B+-tree,
improves the performance by inserting sibling pointers in the indexes, which al-
lows descendants to be skipped if they do not match the required structural rela-
tionship. However, it is not eﬀective in skipping ancestors. XR-tree [15] extends
B+-tree and indexes element nodes on their region codes in pair (start, end). XR-
tree eﬀectively skips not only descendants but also ancestors. A problem of this
approach is that it is ineﬃcient in handling recursive ancestor elements. When a
node happens to be ancestor of two or more other nodes, it will be searched for
and retrieved as many times as the number of its descendant nodes [16]. Catania
et al. [17] proposed a new lazy approach to handle XML updates and structural
join processing in an eﬃcient way. This approach uses segments, labelled by the
global position, local position and length, as the unit of updates. The traditional
structural join algorithm is improved by the segment-based extended algorithm,
which improves query performance. One shortcoming is that the update log must
be maintained in order to manage the segments.
The XCut [18] is a comprehensive holistic twig matching algorithm to expedite
XML query processing. XCut takes advantage of double-ended queues to queue
An Eﬃcient Indexing and Compressing Scheme for XML Query Processing 75
Fig. 5. An XML document and query examples
Table 1. False alarm and false dismissal in diﬀerent methods
3 Overview of NCIM
In this section, we introduce the methodology of the proposed NCIM (Node Clus-
tering Indexing Method) method and demonstrate how queries can be processed
eﬃciently using NCIM.
3.1 The Methodology of NCIM
The construction of NCIM can be divided into two phases: document labelling
and index construction. Practically, these two phases can be done in parallel
through traversing XML document once. We explain these steps using the XML
data tree shown in Fig. 6, where ovals represent elements with tags’ name inside,
and rectangles represent plain texts. We treat the attributes as elements and add
the character “@” in the front of attribute name.
The document labelling scheme of NCIM applies only to the element nodes
(the text nodes are not included) of an XML data tree. A element node n of an
XML data tree is labelled with a 3-tuple (level, n, n) for non-leaf nodes and
a 2-tuple (level, n) for leaf nodes, where “level” is the depth of n, “n” (start
number) is the serial number of n derived from a depth-ﬁrst traversal of the data
tree, and “n” (end number) is the serial number after visiting all child nodes of
n. Leaf nodes omit n for saving space. An attribute node has the same values
of level and n as its parent for identifying to whom it belongs, and it does not
have n for the same reason as leaf nodes.
An Eﬃcient Indexing and Compressing Scheme for XML Query Processing 77
Fig. 8. (a)Non-leaf node index and (b) Leaf node index
Fig. 9. Level indices of (a) non-leaf nodes and (b) leaf nodes
query contains the ancestor-descendant axis (“//”). It is hard to determine the
level of the tag after “//”. To solve this problem, we create the other two hash
tables, namely, the level index of non-leaf nodes and the level index of leaf nodes,
as shown in Fig. 9. The tag name is used as the hash key, and the levels with
same tag name are clustered together in a linked list.
Most of the indexing methods store the indices in the memory for fast access.
In order to reduce the required space, we use integer labelling scheme to represent
structure information where possible. Besides, we cluster nodes with same tag
name and level to compress repetitive sub-structures in the XML documents.
3.2 Query Processing in NCIM
A query expressed as an XPath expression can be represented as a query tree.
There are several basic types of query. The single-path query is a simple query
starting from the root, e.g., /dblp/article. The partial matching(or recursive)
query contains “//”, e.g., //article/author. The twig query contains “[ ]”, e.g.,
/dblp/article[year]/title). The content query with constrained predicates is a
query with predicates constraining on the retrieved text, e.g., //article/year=
“1997”. Any query is basically composed of one or more basic types of query.
The pseudo-code of the query evaluation algorithm is presented in Fig. 10.
Given a path expression Q, it is evaluated by calling a recursive function Path-
Match(line 6). The PathMatch retrieves the ﬁrst path relation symbol, “/”, “//”
or “[”, and the following tag name segment, the substring between the ﬁrst and
the second symbols in subQ(lines 11-12). If the symbol is “[”, it encounters a twig
structure and should recrusively call the PathMatch funcrion(lines 13-17). If the
symbol is “/”, the level of the node is set to pLevel + 1(line 19). If the symbol
is “//”, use the tag name as a search key, get the levels from level indices, and
An Eﬃcient Indexing and Compressing Scheme for XML Query Processing 79
ﬁlter out the levels that are less than pLevel+1 (line 20). Funcrtion CheckMatch
is called(line 21) to retrieve the corresponding linked lists in leaf or non-leaf
nodes indices by using the tag name in nNode and the value of nLevel(lines
26-30). Finally, compare the start and end numbers in the linked lists and check
whether they are suitable for the query(lines 31-37). The results, stored in M,
are produced at the end of procedure QueryEvaluation (line 7).
We demonstrate a complex query, //Mastersthesis[author =“Frank”]/title, to
show how NCIM processes the query. The segment of “//Mastersthesis” is ﬁrst
retrieved. Because it starts with “//”, we get “2” as the level of “Mastersthesis”
form level index of non-leaf nodes and then ﬁnd the location of (Mastersthesis,
2) in the non-leaf node index. There are two nodes in the linked list. Keep them
as candidates and proceed to the next step. Since we encounter a twig structure,
[author =“Frank”], we keep the parent node “author” and deal with the twig
structure. Because “author” contains a content predicate, i.e., author =“Frank”,
only the level index of leaf node has to be checked. Then we search the leaf nodes
index and get the positions of “author” using (author, 3) as the search key. There
is only one node of “author” selected. Compare the start numbers and the end
numbers of “Masterthesis” and “author”, a matched result is produced, i.e.,
the second node of (Masterthesis, 2), and the third node of (author, 3). The
remaining sub-query, /title, is processed in the same way. The ﬁnal matched
structure is the second node of (Masterthesis, 2), the third node of (author, 3),
and the third node of (title, 3).
4 Experimental Results
In this section, we report the experimental results of the proposed indexing tech-
nique. We compare the performance of NCIM with the PCIM [13], Wang/Meng’s
method [21], and XQEnging [25] on three datasets: DBLP, Swiss-Prot, and
XMark. All algorithms are implemented in java, and the experiments have been
performed on a Windows XP system with a 1.86GHz Intel Core2 CPU, 2GB
RAM, and 1132MB page size.
4.1 Datasets
We chose the DBLP [26], the XMark [27], and the Swiss-Prot [28] as the datasets
for experiments because they have diﬀerent characteristics and are widely used
in benchmarking XML indexing methods. The DBLP has many repetitive struc-
tures comparing to the other two datasets. The XMark has the largest maximum-
depth among these three datasets. The total number of nodes in Swiss-Prot is
largest among three datasets. The statistical data of datasets are shown in Ta-
ble 2, where the size of contents is equal to the size of strings in the text nodes,
and the size of structure is deﬁned to be the total size minus the size of contents.
4.2 Performance Analysis
We examined the performance with respect to the index construction time, re-
quired index size, and query processing time.
An Eﬃcient Indexing and Compressing Scheme for XML Query Processing 81
The Wang/Meng’s method, a sequence-based indexing method, records the
ancestor’s tag name from root for each node and requires larger index size.
The XQEngine, an open source embedded Java component, requires the largest
index space. The index size of the PCIM is the smallest one among four methods
because it is a summarized structure. There is a modest increase in the index
size of NCIM comparing to PCIM in each dataset. This is the trade-oﬀ between
time and space. Obviously, it is worth because NCIM saves a lot of time in
building index than PCIM. Using the compression ratio deﬁned in Equation (1),
the PCIM and the NCIM can compress an XML document up to 88% and 74%,
respectively, that are much better than Wang/Meng’s method (7% at most) and
XQEngine (-9% at most). The compression ratio charts are shown in Fig. 13.
Comp.Ratio =
uncomp.size− comp.size
uncomp.size
× 100% (1)
Fig. 13. Compression ratio of diﬀerent methods
We compared the query processing time using the 20 queries, as listed in
Table 3, on diﬀerent datasets. Each query is composed of one or more basic
types of query. Fig. 14 shows the comparison of query processing time among
Wang/Meng’s method, XQEngine, PCIM, and NCIM. Both PCIM and NCIM
store indices in hash tables and are more eﬃcient than the other two methods.
In most of the cases, the NCIM outperforms the PCIM for some reasons. First,
PCIM stores text contents in the other tables, whereas NCIM stores them in
the leaf node index under the corresponding tag name, which results in reducing
search time on processing queries with selection predicates. Second, the integer
comparisons are much faster than string comparisons. The PCIM uses strings to
represent labels, but NCIM uses integers where possible. Third, in PCIM, the
contents with the same path are combined and separated by two full-form char-
acters, “ | ” and “ ; ”. It takes time to decompose them during query processing.
An Eﬃcient Indexing and Compressing Scheme for XML Query Processing 83
and stores them in the hash-based tables. The experimental results show that
the NCIM can compress XML documents eﬀectively with average compression
ratio of 66.6%. The index construction time of NCIM is below 30 seconds on
three tested datasets, and it also supports complex queries eﬃciently.
A limitation of the NCIM is that we assume the indices can ﬁt into the main
memory. Although the NCIM can compress XML documents eﬀectively, it may
not be suitable when the index size of XML document exceeds the size of main
memory. There are some recent work [29,30] discussing storing the indices in the
secondary memory. The future work will be on solving that problem as well as
supporting update operations.
References
1. Clark, J., DeRose, S.: XML path language (XPath) version 1.0. W3C Recommen-
dation (1999), http://www.w3.org/TR/xpath
2. Boag, S., Chamberlin, D., Fernandez, M., Florescu, D., Robie, J., Simeon, J.,
Stefanescu, M.: XQuery 1.0: An XML query language. Working Draft (2001),
http://www.w3.org/TR/2001/WD-xquery-20011220
3. Catania, B., Maddalena, A., Vakali, A.: XML document indexes: A classiﬁcation.
IEEE Internet Computing 9(5), 64–71 (2005)
4. Chung, C., Min, J., Shim, K.: APEX: an adaptive path index for XML data. In:
2002 ACM SIGMOD International Conference on Management of Data (SIGMOD
’02), pp. 121–132. ACM Press, New York (2002)
5. Cooper, B., Sample, N., Franklin, M.J., Hjaltason, G.R., Shadmon, M.: A fast
index for semistructured data. In: 27th International Conference on Very Large
Data Bases, pp. 341–350 (2001)
6. Goldman, R., Widom, J.: DataGuides: enabling query formulation and optimiza-
tion in semistructured databases. In: 23rd International Conference on Very Large
Data Bases, pp. 436–445 (1997)
7. Zhang, B., Geng, Z., Zhou, A.: SIMP: eﬃcient XML structural index for multi-
ple query processing. In: 9th International Conference on Web-Age information
Management (WAIM), pp. 113–118. IEEE Computer Society, Washington (2008)
8. Chen, Q., Lim, A., Ong, K.W.: D(k)-index: an adaptive structural summary for
graph-structured data. In: 2003 ACM SIGMOD international Conference on Man-
agement of Data (SIGMOD ’03), pp. 134–144. ACM Press, New York (2003)
9. Chen, Q., Lim, A., Ong, K.W.: Enabling structural summaries for eﬃcient update
and workload adaptation. Data Knowl. Eng. 64(3), 558–579 (2008)
10. Kaushik, R., Shenoy, D., Bohannon, P., Gudes, E.: Exploiting local similarity for
indexing paths in graph-structured data. In: 18th International Conference on Data
Engineering (ICDE), pp. 129–140. IEEE Computer Society, Washington (2002)
11. Milo, T., Suciu, D.: Index structures for path expressions. In: Beeri, C., Bruneman,
P. (eds.) ICDT 1999. LNCS, vol. 1540, pp. 277–295. Springer, Heidelberg (1998)
12. Haw, S., Lee, C.: Evolution of structural path indexing techniques in XML
databases: A survey and open discussion. Advanced Communication Technology 3,
2054–2059 (2008)
13. Hsu, W.-C., Liao, I.-E., Wu, S.-Y., Kao, K.-F.: An eﬃcient XML indexing method
based on path clustering. In: 20th IASTED International Conference on Modelling
and Simulation (MS ’09), pp. 339–344 (2009)
無衍生研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
本實驗室所開發的圖書館個人化推薦系統，已在中興大學圖書館上線使用中，
本研究乃持續針對原系統改善其效能，並增加新的視覺化功能。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
