 1
Fault Tolerant Non-trivial Repeating Pattern Discovering for Music Data1 
 
 
 
                                                          
1 Published in the 5th IEEE/ACIS International Conference 
 on Computer and Information Science (ICIS 2006), Honolulu,  
Hawaii, July 10-12, 2006, pp. 130-135. 
摘要 
非 不 重 要 重 覆 片 段 (non-trivial 
repeating pattern)常用於分析音樂的重
覆片段與尋找主旋律。在所有重覆片段
中，扣除該片段已全包含於其他更長片段
中的項目，即非不重要重覆片段。如此能
減少重覆片段的個數，並大幅提昇音樂搜
尋的效率。在本研究之前，找尋音樂旋律
中重覆片段之研究，全都著重於片段之完
全重覆出現，不允許部份的差異，亦即只
差一個音的兩個片段也不能視為相同，如
此在實際運用上就受到了限制，例如查詢
範例若橫跨兩片段，可能就無法被尋獲。 
如果在一定差異範圍內的片段也能視為同
一重覆片段，則此找尋允許容錯之重覆片
段技術，將不只可減少非不重要重覆片段
的數量，同時也可提高查詢的尋獲率。 
關鍵字：音樂資料庫、內容擷取、重覆片
段、非不重要重覆片段 
 
Abstract 
A non-trivial repeating pattern is commonly 
used in analyzing the repeated part of a music 
object and looking for the theme. Non-trivial 
repeating patterns exclude those patterns 
included in other longer patterns such that 
they can reduce the redundancy and speedup 
music search. So far, existing approaches 
discover a repeating pattern in such a way 
that the sequence of notes in a music object 
appears more than once in exactly matching. 
If we allow the similar sequences with partial 
different notes also being a repeating pattern, 
it can reduce the number of repeating patterns 
and construct more efficient music indexes. 
The more accurate music theme also could be 
analyzed. Therefore, in this paper, we propose 
a fault-tolerant non-trivial repeating pattern 
discovering technique. The experimental 
results show that our approach can not only 
reduce the number of non-trivial repeating 
patterns but also improve the hit ratios of 
queries for music databases. 
Keywords:  music database, content-based 
retrieval, repeating pattern, non-
trivial repeating pattern 
 
1. Introduction 
 
Recent years, how to efficiently manage 
music data is getting more attentions 
[2][3][4][5][6][7][10][11][17] [18][19]. In the 
researches of music content-based retrieval, 
we can extract the features, such as melodies, 
rhythms and chords, from the music data and 
develop indices that will help to retrieve the 
relevant music data quickly. Most reports 
point out that these music features can be 
presented in string formats then develop 
efficient string indices for retrieving music 
data [2][4][5][7][8][12][15][17][18]. We can 
find some sequence of notes appeared more 
than one time in a music object, which are 
called the repeating patterns. For example, the 
sequence in song of the Little Bee -- “so-mi-
mi-fa-re-re” is called a repeating pattern that 
repeatedly appears three times in that song. A 
repeating pattern is commonly used in 
analyzing the repeated part of music data and 
looking for themes [7][8][13][17]. A lot of 
 3
3, we present our algorithm for finding fault 
tolerant non-trivial repeating patterns for a music 
object. A performance study is given in section 
4 to show the contribution of our proposed 
approach. Finally, we make a conclusion and 
point out the possible future application in the 
last section. 
 
2. Existing Techniques 
 
Recently, several schemes have been 
proposed to discover non-trivial repeating 
patterns in music data. Tseng [17] developed 
the music search system and proposed an 
approach of key melody extraction to discover 
the repeating patterns. They compute the 
frequency of the repeating pattern by 
combining the adjacent musical symbols to 
form 2 to 3 musical symbols and up to the 
longest of the repeating pattern sequentially. 
Hsu et al. [7] proposed the Correlative Matrix 
approach which can be done by creating an 
upper-right-triangular matrix and based on the 
length of the music object. In addition, the RP-
tree proposed by Hsu et al. [8][12] and 
Adaptive Correlative Matrix proposed by Lo 
et al. [13] are more efficiently for finding non-
trivial repeating patterns. However, all these 
schemes discover non-trivial repeating 
patterns in the exactly matching sequences 
such that fault tolerance is not allowed. Since, 
our approach will like Correlative Matrix [7] 
using a 2 dimensional array for computing, we 
briefly describe Correlative Matrix approach 
as follows. 
Let’s assume that there is a melody 
presented by a string S consisted of 12 notes – 
“caaccaacdcbc”. There is a 12×12 upper-right-
triangular matrix created, as shown in Figure 1. 
Let Ti,j indicate the entry of the grid located in 
i-th row and j-th column of this matrix. If the 
note in row i is the same as the note in column 
j, the value of the Ti,j can be computed by the 
equation of Ti,j = T (i-1),(j-1) +1. The computed 
results of melody string S are shown in Figure 
1. 
 
c a a c c a a c d c b c
c - 1 1  1  1 1
a - 1 2 1    
a - 1 3    
c - 1  4  1 1
c -  1  1 1
a - 1    
a -    
c  -  1 1
d   -  
c    - 1
b     -
c     -
Figure 1. Correlative matrix 
Completed the construction of matrix, they 
find out all repeating patterns and their 
frequencies. There is a candidate set, denoted 
CS, used to record repeating patterns and the 
frequencies. The candidate set consists of 
three parameters which are represented as 
(pattern, rep_count, sub_count), where pattern 
is a repeating pattern, rep_count denotes the 
pattern’s frequency in the music object, and 
sub_count indicates the frequency that the 
string appears on other sub-strings. The 
parameters, rep_count and sub_count, can be 
used to verify whether the repeating pattern is 
a non-trivial repeating pattern or not. If both 
parameters are with the same value (rep_count 
= sub_count), the repeating pattern is not a 
non-trivial repeating pattern. 
Initially, CS is an empty set. For each entry 
of Ti,j in correlative matrix T not 0,  there is 
information has to be recorded into the 
candidate set CS. Considering the conditions  
Ti,j≧1 and ((T(i+1),(j+1) =0) or (T(i+1),(j+1)≠0)) , 
there are four possible situations. 
Case 1: (Ti,j =1 and T(i+1),(j+1) = 0). For example, 
in Figure 1, T1,4=1 and T2,5 =0, it indicates 
‘c’ appears on this position once and the 
length of repeating pattern is 1. A record of 
(‘c’, 1, 0) has to be inserted into the 
candidate set CS. 
Case 2: (Ti,j =1 and T(i+1),(j+1) ≠0). For example, 
in Figure 1, T1,5=1 and T2,6 ≠ 0, it denotes 
‘c’ is the sub-string of a repeating pattern - 
 5
 … b c h d a e … 
b  000 000 000 000 000 000 … 
c   000 000 000 000 000 … 
f    000 000 000 000 … 
d     000 000 000 … 
a      000 000 … 
…
 
…
 
…
 
…
 
…
 
…
 
…
 
…
 
…
 
Figure 2.  Matrix structure 
(1) When Si ≠ Sj: 
If Mi-1,j-1,[1], Mi,j-1,[1] and Mi-1,j,[1] are all 
equal to zero, do nothing.  If any one of Mi-1,j-
1,[1], Mi,j-1,[1] and Mi-1,j,[1] is not zero, there 
are two possible conditions to determine 
Mi,j[k]. 
Condition 1: If  (Si+a = Sj+a) OR ( Si = Sj+a) 
OR (Si+a = Sj), where 1 ≤ a ≤ F, they 
imply Si ≠ Sj matching the fault tolerant 
cases – different note, surplus note, and 
deficient note, respectively. In addition, 
we check whether there is any Mi,j[x] 
equal to 0, where 1 ≤ x ≤ F. If x is 
found, every Mi,j[k] for k ≤ x is 
determined by Rule (1). However, if 
there is no such x found, let Mi,j[x] be 
the largest value in the array of grid Mi,j 
then all array entries of Mi,j[k] will be 
determined by Rule (1) again. 
⎪⎪
⎪
⎩
⎪⎪
⎪
⎨
⎧
+=
==
==
==
=
−−
+
+
++
1;][  ][  ELSE}
 3;-  ][THEN     IF
2;-  ][THEN     IF
1;-  ][THEN     IF  
{THEN  IF
1,1,,
,
,
,
kMkM
kMSS
kMSS
kMSS
xk
jiji
jijai
jiaji
jiajai  …Rule (1) 
Condition 2: If  (Si+a ≠ Sj+a) AND ( Si ≠ Sj+a) 
AND (Si+a ≠ Sj), where 1 ≤ a ≤ F, for 
every array entry in the grid is set Mi,j[k] 
= -1. 
(2) When Si = Sj: Mi,j[k] is determined by Rule 
(2). 
 
 
 
 
…Rule (2) 
An example of partial result for constructed 
matrix is shown in Figure 3. After matrix 
constructing completed, we start phase 2 for 
finding repeating patterns. 
Phase 2: Repeating Pattern Discovering 
In phase 2, there are four steps to find the 
repeating patterns. 
Step 1: In the upper-right-triangular of matrix, 
we look for the largest entry, k, of array 
in each grid, such that (Mi,j,[k] > 1 AND 
(Si+1 ≠ Sj+1 OR  j = n)). It means that 
there is a repeating pattern found, then go 
to step 2. If there is no such k found, do 
nothing. 
  8 9 10 11 12 13 14 15 16 17
… a b c d a e b c h …
1 b 100    100   …
2 c 200     200  …
3 f 3-30     3-10 …
4 d 410      …
5 a  520     …
6 e   630    …
7 a    74-3   …
8 a －    -351   …
9 b －    162   …
10 … 
…
 
…
 
…
 
…
 
…
 
…
 
…
 
…
 
…
 
…
 
…
 
Figure 3. Partial result for constructed matrix 
Step 2: Suppose that Mi,j,[k] = r, in which the 
repeating pattern occurs from Sj-r+1 to Sj 
with length r. If Mi,j,[x] > 0 for any x, 
where x ≠ y and 1≤ x ≤ F+1,  the 
(r−Mi,j,[x])-th symbol is a fault tolerant 
note in this repeating pattern. Go to step 
3 looking for frequency of this repeating 
pattern. 
⎪⎪
⎪⎪
⎪⎪
⎩
⎪⎪
⎪⎪
⎪⎪
⎨
⎧
≠+=
==<
≠+=
==<
≠+=
==<
+=
≥≥≥
 ; allfor  1][][AND
for  1  ][THEN   0 ][for  found isany  IF ELSE
; allfor  1][][AND
for  1  ][THEN   0 ][for  found isany  IF ELSE
 ; allfor  1][][AND
for  1  ][THEN   0 ][for  found isany  IF ELSE
1; ][  ][THEN  
  allfor  0) ][(AND0) ][(AND0) ][( IF
1,-,
,1,-
1-,,,
,1-,
1-1,-,
,1-1,-
1-1,-,,
1,-1-,1-1,-
xkkMkM
xkkMxMx
xkkMkM
xkkMxMx
xkkMkM
xkkMxMx
kMkM
kkMkMkM
jiji
jiji
jiji
jiji
jiji
jiji
jiji
jijiji
 7
generated from the 137 melody strings for 
searching in each of non-trivial repeating 
pattern sets discovered by allowing 0 to 3 
notes of fault tolerance. The performance is 
determined by the query hit ratios for 1, 2, and 
3 notes fault tolerance allowed comparing to 
the hit ratio of no fault tolerance allowed. The 
experimental result is presented in Figure 6. 
The improvements are 49%, 61%, and 63% for 
allowing 1, 2, and 3 notes fault tolerance, 
respectively. It means that using fault tolerant 
non-trivial repeating patterns to create index 
for searching can improve the hit ratio for the 
music queries. We would like to explain it in 
more details. Suppose that “ab” and “cd” are 
non-trivial repeating patterns for melody 
string – “abycdxyabxcd”. If database index is 
constructed by “ab” and “cd”, query strings 
“byc” and “bxc” won’t be found in the index. 
However, if fault tolerance is allowed, the 
non-trivial repeating pattern will be “ab?cd” 
only. After index constructed, since ‘?’ could 
be any note, both “byc” and “bxc” queries will 
be found. Therefore, finding fault tolerant non-
trivial repeating patterns for creating music 
index can improve the query hit ratios. 
Figure 6. effect on query searching 
 
5. Conclusion  
 
The non-trivial repeating patterns are 
usually the themes in music objects. If we can 
create an index for music database by using 
these non-trivial repeating patterns, it may 
effectively help not only reducing the index 
space but also speeding the query search. So 
far, existing approaches discover the exact 
repeating patterns in which the repeated parts 
of music object have exact the same sequence 
of notes and length. If repeating patterns with 
partial different notes in the sequences is 
allowed, such fault tolerance discovering 
approach should reduce the number of 
repeating patterns. In this paper, we propose a 
fault tolerant non-trivial repeating pattern 
discovering scheme. The performance study 
shows that our approach not only reduces the 
number of non-trivial repeating patterns but 
also improves the query hit ratios. Therefore, 
discovering fault tolerant non-trivial repeating 
patterns could analyze more accurate music 
theme and construct more efficient music 
indexes.  
In the future work, we would like to 
simplify our algorithm and improve its 
efficiency in computing time. Hopefully, we 
also expecting our approach can be used on 
discovering similar repeating sequences on the 
DNA and protein. 
 
6. References 
 
[1] V. Bakhmutova, V. Gusev, and T. Titkova, 
“The search for adaptations in song 
melodies,” Computer Music Journal, vol. 
21, no. 1, pp. 58~67,  1997. 
[2] S. Blackburn and D. DeRoure, “A Tool for 
Content-based Navigation of Music,” Proc. 
of ACM Multimedia, pp. 361-368, 1998. 
[3] James C.C. Chen and Arbee L.P. Chen, 
“Query by Rhythm An Approach for Song 
Retrieval in Music Databases,” Proc. of 
Int'l Workshop on Research Issues in Data 
Engineering, pp. 139-146, 1998. 
[4] Arbee L.P. Chen, M. Chang, J. Chen, J.L. 
Hsu, C.H. Hsu, and Spot Y.S. Hua, “Query 
by Music Segments: An Efficient 
Approach for Song Retrieval,” In Proc. of
 IEEE Int'l Conf. on Multimedia and Expro, 
2000. 
[5] T.C. Chou, Arbee L.P. Chen, and C.C. Liu, 
“Music Databases: Indexing Techniques 
and Implementation,” Proc. of IEEE Int'l 
Workshop on Multimedia Data Base 
Management Systems, 1996. 
49.18% 61.08% 
63.46
0% 
20% 
40% 
60% 
80% 
100% 
1 2 3
no. of fault tolerant notes allowed 
im
pr
ov
em
en
t 
