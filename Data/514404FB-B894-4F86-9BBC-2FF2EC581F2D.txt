 1
 
1. Introduction 
Recently, multi-agent systems have been applied in many fields such as 
manufacturing control, supply chain collaboration and e-commerce. It can be found 
that the agents required many business functions in order to interact properly among 
one another. For instance, in the supply chain collaboration, it might require the 
agents with planning, forecasting, production and inventory control capabilities to 
cooperate among each other. It also required frequent communications among these 
agents to achieve an acceptable performance. Therefore, as the application domain 
became more complicated, the interactions schema among the related agents also 
would be more sophisticated.  
On the other hands, there are many approaches developed to design and develop a 
multi-agent system. Basically, the system development can be categorized as 
modeling stage, and system developing stage. In the system modeling stage, most of 
the developed modeling approaches, such as MaSE and WARP, were based on UML. 
That is, the designer can apply various UML constructs such as use case diagram, 
sequence diagram and class diagram to model the behaviors of an agent system. In the 
system developing stage, several tools have been developed to assist the construction 
of an agent system. For instance, ZEUS is a graph based tool, users can generate 
agents and built rules in terms of several build-in constructs. Another popular agent 
development tools is JADE. It is a JAVA based environment contained many 
components can be used to construct an agent system. 
Currently, most of the development tools still lack of the capability of system 
verification. That is once an agent system was constructed, it is necessary to assure 
that the system can be operate feasibly. In this research, an evaluation approach was 
developed, which extracted the process log file from a developing agent system and 
then transferred into a Petri Net model in terms of α algorithm. The agent system 
feasibilities were evaluated in terms of analyzing the deadlock of the Petri-net model.   
 
2. Background 
Cooperation among various organization units through internet has been addressed 
heavily in the recent period. Applications such as collaborative design/production 
activities in terms of product development management (PDM) tools, or Collaborative 
Planning Forecasting and Replenishment (CPFR) through a supply chain are the few 
examples. Among the various collaborative application methodologies, agent based 
approaches had been focused in many areas. In the shop floor manufacturing, agent 
systems had been used to support the collaboration among the controllers of various 
manufacturing facilities. For instance, an agent-based discrete shop floor control 
 3
level aspects of a design and has developed its own modeling constructs and language 
[Wooldridge 00]. As for the graphic-based implementation tools, ZEUS seems a 
convenient tool. It is a JAVA based toolkit, which provides a visualized design 
environment. Also, an agent library is provided such that the designer can easily 
extend the functions of related agents [Nwana 99]. 
 Once an agent-based system has been developed, its performance should be 
verified. Various methods have been used. For instance, a simulation approach has 
been used to Most of the research works in system verification were based on 
simulation. For instance, a simulation approach has been used to verify that the 
strategies made by a cooperative agent system could reach a convergence value for a 
manufacturing environment [Deen 06]. Another verification rule schema has been 
developed for a cooperative traffic agents system to validate the situation such as the 
worst case behaviors of a traffic system [Damm 06].  
 In addition to the works on performance verification, very few researches were 
addressed on the agent system feasibilities verification. The system feasibilities 
indicated that an agent system could be carried out smoothly in most of the conditions. 
The methods for feasibilities verification can be found in few modeling tools such as 
Petri net. For instance, the deadlock of a Petri-net can be analyzed by calculating the 
state transformation matrix of the net. The system bounded condition can verified in 
terms of the place invariant properties of the net.  
As for the agent system feasibility verification, the UML based modeling tools 
still cannot verify certain feasibility situation such as deadlock or infinite-loop of an 
agent system. However, these situations could occur and difficult to observe for a 
complicated multi-agent system during its developing stage. For instance, for a 
multi-agent system with three agents and each agent contained many rules. If there 
were three rules: IF A THEN B; IF B THEN C; IF C THEN A, in each of the three 
agents respectively. Then, an infinite loop might occur in the agent system if these 
rules were triggered one after another. However, it would be very difficult to observe 
these situations if the system designer only inspected the rules in each agent 
separately.  
In this research, an evaluation approach which extracted the process log files 
from an agent system and transferred into a Petri-net model in terms of α algorithm 
would be proposed. This transferred model was imported into a Petri net simulation 
package CPN. The agent system feasibilities were evaluated in terms of analyzing the 
deadlock and infinite looping phenomena of the Petri-net model. 
 
3. The Proposed Evaluation Framework 
A three stage approach has been proposed to support the feasibility analysis of 
 5
applied and modified to fulfill this goal. 
Table-1 showed the hypothetical data extracted from an agent system. Basically, 
each “case” represented a process carried out by the agent system and each “task” 
indicated a rule fired by a specific agent. Therefore, in this test data, there are five 
processes carried out by the agent system in a common period of time, and five rules 
were fired by various agents during that time period.  
Based on Table-1, the recorded data can be represented as: case 1: {a,b,c,d}, case 
2 :{a,c,b,d}, case 3 :{a,b,c,d}, case 4:{a,c,b,d} and case 5:{e,f}. It means that for 
process “case 1”, four rules were fired as the sequence of a, b, c, d. 
Appendix-A showed α algorithm. The related PN can then be transferred based on 
the following procedure: 
1. Find the transition set: TW={a,b,c,d,e,f}. 
2. Find the set of initial transitions: TI={a,e}. 
3. Find the set of final transitions: TO={d, f} 
4. Find the set of transitions which has only one directional precedence: XW={(a,b), 
(a,c), (b,d), (c,d), (e,f)} 
5. Remove the duplicated transition sets. YW={(a,b), (a,c), (b,d), (c,d), (e,f)} 
6. Develop the place set: 1. add a place construct to each of the transition set, 2. add 
the initial and final place constructs. Pw={iW, p(a, b), p(a, c), p(b, d), p(c, d), p(e, f), oW} 
7. Develop the arrow set to link the places and transitions. Fw={(iW, a), (a, p(a, b)), (a, 
p(a, c)), (p(a, c), c), (p(a, b), b), (b, p(b, d)), (c, p(c, d)),( p(b, d), d) , (p(c, d), d) ,(d, ow), (iw, e), (e, 
p(e, f)), (p(e, f), f), (f, oW)} 
8. Complete the final PN: α(w)=(PW, TW, FW) 
 The transferred PN was shown in Fig-3. It can be found that α algorithm is 
suitable for transforming one process log file into respective PN model. However, in 
the multi-agent system, each agent might have its own log file. Therefore, α algorithm 
should be modified to reflect this situation.  
 
3.2.2 Multi-Agent System Application and Modified α Algorithm 
This research would be addressed on a multi-agent system where a pair of agents 
would be interacted with one another each time. That is, although there were several 
agents in a system; however, only two agents would be communicated with one 
another each time. 
 According to Aalst et al. work, if a task was directly followed task b in a log file, 
then task b is “direct succession” of task a [Aalst 04]. This situation could occur in a 
multi-agent system. If one agent sent a request signal to another agent and wait until 
the reply signal was received, then the tasks of sending and receiving signals would 
form a “direct succession” relation. However, in a multi-agent system with this 
 7
 
4. Empirical Verification  
The proposed approach has been implemented and verified in terms of a robotic 
assembly cell example from Zhou’s book. [Zhou 93]. In this book, Zhou modeled the 
assembly behaviors as a PN model and then proved that possible deadlock might 
occur in this system.  
Fig-6 showed the assembly cell. There are two robots and two assembly stations. 
Each station required both of the robots to carry out an assembly job. If workstation 1 
required performing the task, it would acquire robot 1 first. Once it got the 
authorization of robot 1, it would acquire robot 2. For workstation 2, the sequence of 
acquiring robots would in a reverse way. Therefore, it could be found that if both of 
the workstation 1 and 2 acquired robots at the same time, then, neither of them could 
get another robot. The assembly cell would be in a deadlock situation.  
The empirical assembly cell has been implemented as a multi-agent system in 
terms of JADE. Fig-7 showed the implementation framework. In general, four agents 
would be developed to represent the control behaviors of two robots and two 
workstations respectively. In the JADE distributed agent platform, each agent should 
register and get a unique ID from Agent Management System (AMS). During the run 
time, two robot agents should register in the Directory Facilitator (DF) first. Once an 
assembly workstation agent required a robot service, it could require the DF to search 
for the available robot agent. These agents would be communicated among one 
another through the Agent Communication Channel (ACC). Therefore, the ACC 
would store the communication data. A sniffer agent would be developed to extracted 
the data and generate the log files for each agent. 
 
4.1 Log Files Generation 
Fig-8 showed the window of the sniffer agent and its retracted information. In the 
left side of the window, it showed that the four developed agents (R1: Robot 1, R2: 
Robot 2, WS1: Workstation 1, and WS2: Workstation 2) as well as the AMD and DF. 
The right side of the window showed the sequence diagram for the process of WS1 
requesting R1 agent and R2 agent. The communication messages among these agents 
were shown in the bottom of the diagram. The information about the log files was 
extracted from the message files.  
The sequence diagram showed in the sniffer agent window indicated the 
sequence for WS1 requesting R1 and R2 robots. Mainly, the WS1 would send a 
“request” to DF for searching required robot. Then, DF would acknowledge WS1’s 
request through “inform” message. In the third stage, W1 would “request” R1 for 
service, and R1 would “agree” the service in the fourth stage. Then W1 would 
 9
to the modified algorithm, a place can be added to the first “AGREE” transition in the 
PN model. The similar situation also can be found in the log files for W1 and R2 
agents (link 3 and 4 in Fig-9). Therefore, another place can be added to the second 
“AGREE” transition in the PN model. The PN model from the W1 agent point of 
view was shown in Fig-10-1. 
The third task was to build the PN model based on the log file of W2 agent 
(Table-3) and to add the information about R2 agent (link 5 in Fig-9) into the model. 
The PN outcome was shown in Fig-10-2.  
The above model was built based on the situation that W1 would issue requests to 
R1 and R2 before W2 agent. Another situation was that W2 would issue requests to 
R1 and R2 earlier than W1. Since the dilemma would be the same as the previous 
case, except that the contents of the log files for W1; W2 and R1; R2 would be 
inter-changed with each other when compared with log files shown from Table-2 to 
Table-5. Therefore, the transformation process of the PN model basically would be 
the same as the previous tasks, and the final PN model was shown in Fig-10-3. 
The constructed PN model was simulated through CPN (Colored Petri-Net) tool. 
As mentioned before, the empirical assembly cell would encounter a deadlock if W1 
issued a request to R1 and W2 sent a request to R2 at the same time. This situation 
can be simulated through the PN model by issuing two tokens at place “WS1” and 
WS2” respectively. The CPN report was shown in Table-8. It can be found that two 
tokens were halted in place P5 and P12 respectively. From the PN model, P5 indicated 
that W1 was waiting the response from R2, and P12 specified that W2 was waiting 
the response from R1. Since both of the assembly workstation occupied a robot and 
waited another robot, a deadlock would happen. 
 
5. Discussion and Conclusions 
This research tried to bridge the gap between a multi-agent systems and a PN tool, 
such that the developed PN model can be used to simulate and to assist the analyzing 
the feasibility situation, such as deadlock, of the multi-agent system. The major 
contributions of this work were: 
1. The concept of verifying the feasibility of a multi-agent system during its 
developing stage can be accomplished.  
2. A transformation approach was developed to transfer the log files of a multi-agent 
system into its respective PN model. 
Several possible issues were also worth to be considered. One was that in this 
work, α algorithm was modified such that the log files for two interactive agents can 
be transformed to a PN model. The main assumption of the modification was based 
that two agents should have “direct succession” relation. That was two agents would 
 11
Reference 
[Aalst 04] W.M.P. van der Aalst, A.J.M.M. Weijters, and L. Maruster, “Workflow 
Mining: Discovering Process Models From Event Logs”, IEEE Transactions on 
Knowledge and Data Engineering, Vol. 16, No. 9, Sep 2004. 
[Caridi 05] M. Cardid, R. Cigolini and D.D. Marco, “Improving Supply Chain 
Collaboration by Linking Intelligent Agent to CPFR”, International Journal of 
Production Research, Vol.43, No.20, 2005, p4191-p4218. 
[Chiu 04] M. Chiu and G. Lin, “Collaborative Supply Chain Planning Using the 
Artificial Neural Network Approach”, Journal of Manufacturing Technology 
Management, Vol.15, No.8, 2004, p787-p796. 
[Damm 06] W. Damm, H. Hungar and E.R. Olderog, „Verification of cooperating 
traffic agents”, International Journal of Control, Volume 79, Number 05, 2006, 
p395-p421.  
[Deen 06] S. M. Deen and R. Jayousi, “A Preference Processing Model for 
Cooperative Agents”, Journal of Intelligence Information System, Vol.26, 2006, 
p115-p147.  
[DeLoach 99] S.A. DeLoach, “Multiagent Systems Engineering: A Methodology and 
Language for Designing Agent Systems”, Proceeding of Agent-Oriented Information 
Systems (AOIS), 1999. 
[Fan 05] Y. Fan, C. Huang, Y. Wang and L. Zhang, “Architecture and Operational 
Mechanism of Networked Manufacturing Integrated Platform“, International Journal 
of Production Research, Vol. 43, No.12, 2005, p2615-p2629. 
[Ivezic 99] N. Ivezic, T.E.  Potok, L. Pouchard, “Multiagent Framework for Lean 
Manufacturing”, IEEE Internet Computer, Volume: 3 Issue: 5, 1999, p58-p59. 
[Kowalczyk 02] R. Kowalczyk, B. Franczyk, A. Speck, P. Braun, J. Eismann, and W. 
Rossak, “InterMarket-Towards Intelligent Mobile Agent e-Marketplaces”, 
Proceedings of 9th Annual IEEE International Conference and Workshop on 
Engineering of Computer-Based Systems. 2002,  p268 -p2752. 
[Lau 05] J.S.K. Lau, G.Q. Huang, K.L. Mak and L. Liang, “Distributed Project 
Scheduling with Information sharing in Supply Chains: Part i: an Agent-based 
Negotiation Model”, International Journal of Production Research, Vol. 43, No.22, 
2005, p4813-p4838. 
[Lin01] F.R. Lin and K.Y. Chang, “A Multi-Agent Framework for Automated Online 
Bargaining”, IEEE Intelligent Systems, Volume 16 Issue 4, 2001, p41-p47. 
[Lu 05] T.P. Lu, T.M. Chang and Y. Yih, “Production Control Framework for Supply 
Chain Management-an Application in the Elevator Manufacturing Industry”, 
International Journal of Production Research, Vol. 43, No.20, 2005, p4219-p4233. 
[Nwana 99] H. Nwana, D. Ndumu, L. Lee and J. Collis, “ZEUS: A Tool-Kit for 
 13
 
C
onceptual Stage 
D
esign Stage 
Agent Rules 
Design
Agent 
System 
Simulation
Record Log File Build PN
PN 
Simulation 
and 
Analysis
Modify 
Agent 
System
Construct & 
Implement Agent 
System
α algorithm
Yes No
Im
plem
entation Stage 
 
Fig-1 Proposed framework 
 
 15
 
 
Process Operation Notation 
Case 1 Task a Beginning Task 
Case 1 Task b(Request) Agent I send a request to Agent 
II 
Case 1 Task c(Agree) Agent II agree with Agent I 
Case 1 Task d Ending Task 
(1) 
 
Process Operation Notation 
Case 2 Task b(Request) Agent I send a request to Agent II 
Case 2 Task c(Agree) Agent II agree with Agent I 
(2) 
 
 
 
 
(3) 
 
Fig-4 Information for scenario 1, (1) log file for agent I, (2) log file for agent II, (3) 
The PN for agent I and agent II 
Task a Task b Task c Task d
Agent I 
Agent II
 17
 
 
Fig-6 The robotic assembly cell 
 
 
 
Fig-7 Robotic assembly cell in JADE 
 19
WS1/R2CANCEL8
WS1/R1CANCEL7
R2/WS1AGREE6
WS1/R2REQUEST5
R1/WS1AGREE4
WS1/R1REQUEST3
DF/WS1INFORM2
WS1/DFREQUEST1
sender/receiverMessagesStage
R2/WS2REFUSE4
WS2/R2REQUEST3
DF/WS2INFORM2
WS2/DFREQUEST1
sender/receiverMessagesStage
WS1/R1CANCEL3
R1/WS1AGREE2
WS1/R1REQUEST1
sender/receiverMessagesStage
R2/WS2REFUSE5
WS2/R2REQUEST4
WS1/R2CANCEL3
R2/WS1AGREE2
WS1/R2REQUEST1
sender/receiverMessagesStageW1 Agent
W2 Agent
R1 Agent
R2 Agent
1
2
3
4
5
 
Fig-9 The interactions among the four agents  
 21
 
(1) 
 
(2) 
 
(3) 
Fig-10 (1) W1 agent oriented PN model, (2) W2 agent oriented PN model, (3) the 
final PN model
 23
 
Stage Messages sender/receiver 
1 REQUEST WS1/DF 
2 INFORM DF/WS1 
3 REQUEST WS1/R1 
4 AGREE R1/WS1 
5 REQUEST WS1/R2 
6 AGREE R2/WS1 
7 CANCEL WS1/R1 
8 CANCEL WS1/R2 
 Table-2 The log file for W1 (workstation1 ) agent 
 
 
 
Stage 
Messages sender/receiver 
1 REQUEST WS2/DF 
2 INFORM DF/WS2 
3 REQUEST WS2/R2 
4 REFUSE R2/WS2 
Table-3 The log file for W2 (workstation2 ) agent 
 
 
Stage Messages sender/receiver 
1 REQUEST WS1/R1 
2 AGREE R1/WS1 
3 CANCEL WS1/R1 
Table-4 The log file for R1 (Robot1 ) agent 
 
 
Stage Messages sender/receiver 
1 REQUEST WS1/R2 
2 AGREE R2/WS1 
3 CANCEL WS1/R2 
4 REQUEST WS2/R2 
5 REFUSE R2/WS2 
Table-5 The log file for R2 (Robot2 ) agent 
