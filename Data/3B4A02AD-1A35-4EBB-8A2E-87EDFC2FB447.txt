2literature. For the single-machine problem,
Lee and Lin [1] assume that the unavailable
time is unknown but with a probabilistic
distribution. Two breakdown cases are
discussed in the study, i.e., the resumable and
nonresumable case. They study the
rate-modifying maintenance problems with
objective functions such as expected
makespan, total expected completion time,
maximum expected lateness, and expected
maximum lateness. For the two-machine
problem, Allahverdi [2] considers a
two-machine problem and shows that if only
the first machine breaks down, the LPT
(Longest Processing Time) policy will
minimize the maximum lateness; while if
only the second machine breaks down, the
SPT (Shortest Processing Time) policy will
be used. Mosheiov [3] solves the
two-parallel-machine scheduling problem for
minimizing total completion time by
assuming each machine is available in a
specified interval. Lee [4, 5, 6] provides the
researches for the problem including single
and parallel machines with different
performance measures such as makespan,
total weight completion time, tardiness, and
number of tardy jobs.
2. Notation and problem setting
The following notation will be used
throughout this study:
jJ = job number j.
jp = processing time of job j.
jd = due date of job j.
jC = completion time of job j.
jL lateness of job j, where jjj dCL  .
jT tardiness of job j,  jj LT ,0max .
Tn number of tardy jobs.
t amount of time to perform one
maintenance.
T time interval between two maintenance
periods.
In addition, jJ denotes the job placed at
the jth position, and   jjj Cdp ,, , jL ,
and jT are defined accordingly.
In this study, we consider a single-machine
scheduling problem where jobs are
nonresumable (i.e., once a job is interrupted,
it must be restarted from the beginning when
machine becomes available). It is assumed
that all jobs are ready for processing at time
zero and that, for simplicity, processing times
and due dates can take only integral values.
For each maintenance, it requires an amount
of time t for the performance. There is a time
interval T between two consecutive
maintenance periods, in which jobs can be
scheduled for processing. In our discussion, a
periodic maintenance schedule consists of
several maintenance periods and each
maintenance is required after a fixed time
interval. Further, we also define a batch as a
set of jobs in each interval T. Under the
above assumption, the heuristic will be
presented to minimize the number of tardy
jobs with periodic maintenance and
nonresumable jobs.
3. The proposed heuristic
In this section, the heuristic is based on the
Moore’s algorithm (French [7]), which is 
used to minimize the number of tardy jobs
for the scheduling problem, is incorporated
into our procedure to create the initial
schedule with the smallest number of tardy
jobs. We now have the following definitions,
which will be used in the heuristic.
Definition 1. Consider a schedule with
several batches. The slack time of a batch is
defined as the unscheduled time in a batch.
Definition 2. Consider a schedule with
several batches. The potential position is
defined as the position immediately after the
last position of the first batch where its slack
time is not smaller than the processing time
of the considered job.
The steps of the proposed heuristic are
outlined as follows:
Step 1. Obtain a schedule with the smallest
number of tardy jobs by the
following procedure:
(i) Sequence all jobs by the
EDD (Earliest Due Date)
rule.
(ii) If two jobs have the same
4than that of the incumbent schedule,
then it is eliminated. Use the
dominance rules given in Theorems
1-2 to eliminate any possible newly
created partial schedules.
Step 3. Bounding. For each newly created
partial schedule, calculate Tn by
using the proposed scheme stated
earlier.
Step 4. Fathoming. Fathom those newly
created partial schedules whose Tn
values are no better than the
incumbent schedule. Update the
incumbent schedule if a new partial
schedule has a smaller Tn value.
Step 5. Stop. If there are nodes remaining
unfathomed, go to Step 2;
otherwise, stop.
5. Computational results
In this study, the effectiveness of the
proposed heuristic is evaluated by
comparison with optimal schedules obtained
by the B&B algorithm. Both the heuristic and
the B&B algorithm were coded in Visual
BASIC and ran on a PC-686. To demonstrate
the heuristic, it was tested by using the data
from the experiments. The processing times
were randomly generated from a discrete
uniform distribution (DU) over [1, 10]. The
due dates were selected from another DU
over[ )2/1( QC 

n
k
kp
1
, )2/1( QC


n
k
kp
1
], with restriction  0id , where Q
and C denote the due date range and tardiness
factor, respectively. In our experiments, the
same data were used in both the heuristic and
the B&B algorithm. The experimental
procedure consists of a full factorial design
with two settings of Q )6.0,2.0( Q and
two settings of C )6.0,2.0( C . For
convenience, the four combinations 2.0C ,
2.0Q ; 2.0C , 6.0Q ; 6.0C ,
2.0Q ; and 6.0C , 6.0Q are
referred to as data set I, II, III, and IV,
respectively. We set three levels of T (10, 15,
20) and two levels of t (3, 6) in the
experiments.
In each complete trial, we randomly drew n
( 20,15,10,5n ) jobs. The number of testing
problems in each n-job trial is 30. The
computational results show that problems with
smaller C value produce smaller number of
tardy jobs and spend less computation time.
We also find that problems with larger T value
and smaller t value produce smaller number of
tardy jobs. This is due to the fact that in this
case a smaller number of maintenance periods
is generated, and hence a smaller number of
potential positions is produced. This results in
a smaller Tn value of the heuristic.
6. Conclusions
This study considers a single-machine
scheduling problem involving periodic
maintenance activities. The problem differs
from that of other maintenance scheduling
problems in that several maintenance periods
are under consideration and each
maintenance is required after a periodic time
interval. Although such a scheduling problem
is important, it is relatively unexplored. The
purpose of this study is to find a schedule
that minimizes the number of tardy jobs
subject to periodic maintenance and
nonresumable jobs. An efficient heuristic has
been developed to derive the near-optimal
schedule. The performance of the heuristic
has been evaluated by comparing its solution
with the optimal solution obtained by the
proposed B&B algorithm. Several theorems
associated with the problem have been
implemented in the algorithm. As shown in
the computational results, the average
computation time is small and hence the
selection of the near-optimal schedule
becomes much easier. In other words, we can
easily derive a feasible schedule in a short
time by using the proposed heuristic, even for
large sized problems. However, the heuristic
and the B&B algorithm are appropriate for
those companies where maintenance is
performed periodically and jobs are
nonresumable. Currently, the author is
conducting future research by considering
semi-resumable case.
