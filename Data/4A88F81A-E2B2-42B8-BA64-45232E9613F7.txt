 1
new PSS mechanism using the standard 
benchmarks such as NAS, SPEC2000 and 
Perfect Benchmark to obtain the real 
performance results for the Processor-in- 
Memory platform. The execution of this 
project not only can enhance the 
practicability and popularization of the 
Processor-in-Memory but also can offer a 
reference for other researchers who intend to 
develop new parallelizing and optimization 
strategies for high-performance SoC 
architectures. 
 
Keywords: Processor-in-Memory 
Architecture, SAGE II, Pair-Selection 
Scheduling, System-on-a-Chip (SoC). 
 
二、緣由與目的 
本實驗室先前曾針對 Processor-in- 
Memory 架構提出了一個新的程式平行化
系統，稱為 SAGE II (Statement- Analysis- 
Grouping-Evaluation II) [3][4]。有別於以往
使用迴圈輪次(Loop Iteration)為基本分析
單位，SAGE II使用陳述(Statement)為基本
分析單位，它可分析原始程式碼，透過陳
述分割(Statement Splitting)將程式切分為
許多區塊，並依其相依關係，產生一對應
之權重分割相依圖 (Weighted Partition 
Dependence Graph，WPG)，再決定每一區
塊的權重值，利用排程技巧，依主處理器
與記憶體處理器不同的運算能力，將每一
個區塊分配給適當的處理器執行，以減少
處理器彼此等待的時間，增進程式在此平
台上執行的效能。 
在初步之研究成果中[3][4]，我們發現
此一分析機制的確可行，若能針對其基本
分析模組予以擴充改進，增加其平行化分
析之能力，並針對 Processor-in-Memory架
構不同於傳統計算機結構之特點，予以特
殊的最佳化轉換，則能充分發揮此新一代
計算機結構之特點，因而提出了本計畫
案：PSS (Pair-Selection Scheduling) 排程
模組，以擴充 SAGE II的分析轉換能力，
希 
在今年的計畫裡我們撰寫上述之
Pair-Selection Scheduling 排程模組，結合
先前所發展的 SAGE II 系統與相關技術
[3][4]，使其能自動地分析轉換原始程式，
以充分發揮 Processor-in-Memory 架構的
效能。本次計畫針對下述三個方向發展此
系統 
1.發展 Pair-Selection Scheduling 排
程模組：承續先前所提出 SAGE II之程式
分割機制模組，包括陳述間資料相依分析
(Statement Dependence Analysis)、陳述分
割 (Statement Splitting)、WPG 產生器
(Weighted Partition Dependence Graph 
Generation) ， 研 發 適 合 Processor-in- 
Memory 架構之新型排程機制，並在初期
的研究成果之上，實作出相關程式模組。 
2.提出更精確的區塊權重評估機制
(Block Weight Evaluation)：為了達到一個
好的工作分配與排程，我們需要一個準確
的評估機制做為工作切分的依據，我們在
在今年的計畫裡，提出並實作出更精確的
區塊權重評估機制。 
3.系統整合：整合上述最佳化與平行
化技術，並設計最後之程式碼產生器
(Source Code Generation)，使得 SAGE II 
系統可以自動地分析轉換原始程式，並實
際運用於一般程式。 
最後我們以 FlexRAM 模擬器為實驗
平台，應用上述之技術，將最具代表性之
測速程式 SPEC2000、Perfect 與 NAS 
Benchmark 最佳化與平行化，以驗證這些
方 法 的 可 行 性 ， 並 強 化
Processor-in-Memory架構的實用性。 
 
三、結果與討論 
圖一是PSS與SAGE II系統[2]整合後
之各個基本轉換模組架構圖。其中包含陳
述分割階段、區塊權重評估階段、決定執
行計畫階段、以及程式碼產生器(Source 
Code Generation)模組。 
 
 
 3
四、計劃結果自評 
 
在今年的計劃裡，我們發展 PSS演算
法 ， 並 整 合 在 SAGE II 。 在
Processor-in-Memory模擬器上，驗證 PSS
演算法的功能。在實際撰寫程式實作
PSS、測試模組間的資料傳遞、與實驗模
擬系統安裝時，我們學到許多原本我們所
忽略到的知識；相關參與這項研究計劃的
學生們也能夠藉此學習研究的方法與作學
問的態度。本計劃的部份研究成果，也發
表在國際會議與期刊[2][3]。 
 
五、參考文獻 
 
[1] W. Blume, R. Eigenmann, K. Faigin, J. 
Grout, J. Hoeflinger, D. Padua, P. 
Petersen, B. Pottenger, L. Rauchwerger, 
P. Tu, S. Weatherford, Effective 
Automatic Parallelization with Polaris, 
International Journal of Parallel 
Programming (May 1995). 
[2] An Energy Reduction Scheduling 
Mechanism for a High-Performance 
SoC Architecture, Slo-Li Chu; in 
Lecture Notes in Computer Science. 
(EUC 2005), Vol.  3824, 
Springer-Verlag, Page(s): 281 – 290, 
2005. (SCI, EI) (NSC 94-2213-E-033 
-032 -) 
[3] POERS: A Performance-Oriented 
Energy Reduction Scheduling 
Technique for a High-Performance 
MPSoC Architecture; Slo-Li Chu ; in 
Proceedings of 11th International 
Conference on Parallel and Distributed 
Systems (Fukuoka, Japan, July 20 - 22, 
2005,) (ICPADS'05); Vol.2, Page(s): 
699-703. (NSC93-2213-E-033-022) 
[4] S. L. Chu, T. C. Huang, SAGE: An 
Automatic Analyzing System for a 
New High-Performance SoC 
Architecture -- Processor-in-Memory, 
in Proc. Ninth Workshop on Compiler 
Techniques for High-Performance 
Computing; (Mar. 2003) 1-10. 
[5] M. Hall , P. Kogge , J. Koller , P. 
Diniz , J. Chame , J. Draper , J. 
LaCoss , J. Granacki , J. Brockman , A. 
Srivastava , W. Athas , V. Freeh , J. 
Shin , J. Park, Mapping Irregular 
Applications to DIVA, a PIM-Based 
Data-Intensive Architecture, in: Proc. 
1999 Conference on Supercomputing 
(Jan. 1999). 
[6] W. Huang, Exploiting Application 
Parallelism Using Advanced Intelligent 
Memory – The FlexRAM approach, 
MS Thesis, Department of Computer 
Science, University of Illinois at 
Urbana-Champaign, 1999. 
[7] D. Judd and K. Yelick, Exploiting 
On-Chip Memory Bandwidth in the 
VIRAM Compiler, in: Proc. 2nd 
Workshop on Intelligent Memory 
Systems (Cambridge, MA, Nov. 2000). 
[8] Y. Kang, W. Huang, S. Yoo, D. Keen, 
Z. Ge, V. Lam, P. Pattnaik, J. Torrellas, 
FlexRAM: Toward an Advanced 
Intelligent Memory System, in: Proc. 
International Conference on Computer 
Design (Austin, Texas, Oct. 1999). 
[9] K. Keeton, R Arpaci-Dusseau, 
D.A.Patterson, IRAM and SmartSIMM: 
Overcoming the I/O Bus Bottleneck, in: 
Proc. ISCA Workshop on Mixing 
Logic and DRAM (1997). 
[10] D. Landis, L. Roth, P. Hulina, L. 
Coraor, S. Deno, Evaluation of 
Computing in Memory Architectures 
for Digital Image Processing 
Applications, in: Proc. International 
Conference on Computer Design (1999) 
146-151. 
[11] C. A. Moritz, M. Frank, S. 
Amarasinghe, FlexCache: A 
Framework for flexible Compiler 
Generated Data Caching, in: Proc. 2nd 
Workshop on Intelligent Memory 
Systems (Cambridge, MA, Nov. 2000). 
[12] M. Oskin, F. Chong, T. Sherwood, 
Active Pages: A Computation Model 
for Intelligent Memory, in: Proc. 25th 
Annual International Symposium on 
 5
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
演算法（一）：陳述分割  (Statement Splitting) 
Given a loop L = ( 1I , 2I ,…….. dI )( 1S , 2S ,…….. dS ) 
Step 1: Construct dependence Graph G by analyzing subscript expressions and index 
pattern. 
Step 2: Establish a node partition Π  on G as we defined in Definition 2. If there are 
large blocks arisen from control dependence relations, convert control dependence 
into data dependence [10] first, then partition the dependence graph. 
Step 3: On the partition Π , establish a weighted partition dependence graph WPG(P,E) 
as in Definition 3 
 
 
程式碼產生器
(Source Code
Generation)
原始程式
(Source
Program)
適合P.Host執行
的原始程式碼
(Source Codes for
PHost)
適合P.Mem執行的
原始程式碼
(Source Codes for
PMem)
區塊權重評估
(Block Weight
Evaluation)
陳述分割
(Statement Splitting)
陳述間資料相依
分析
(Statement
Dependence Analysis)
WPG 產生器
(Weighted Partition
Dependence Graph
Generation)
區塊配對選擇
排程
(Pair-Selection
Scheduling)
圖一：SAGE II 系統基本的分析階段組織圖 
 7
temp = Exec_in_ph ( Replace_optr( Si, existed_op ) ); 
ph_opw = original – temp + existed_op_weight; 
call Add_weight_value ( “P.Host”, Weight_Table, 0, ph_opw ) 
 
/* Execute Si in P.Mem. */ 
original = Exec_in_pm ( Si );  
temp = Exec_in_pm ( Replace_optr( Si, existed_op) ); 
pm_opw = original – temp + existed_op_weight; 
call Add_weight_value ( “P.Mem”, Weight_Table, 0, pm_opw ); 
End 
 
 
演算法（三）：.區塊對配選擇排程演算法 (Pair-Selection Scheduling Algorithm) 
[Input] 
WPG=(P,E): original weighted partition dependence graph after weight and order of blocks 
are determined. 
[Output] 
An execution order schedule EO={EO1, EO2….} where EOi={PM(ba.… bb), PM(bc.… bd)} 
in which PH(ba.… bb) means that blocks ba.… bb will be assigned to P.Host in oreder i, 
PM(bc.… bd) means that blocks bc.… bd will be assigned to P.Mem in order i. 
[Intermediate] 
W: a working set of nodes ready to be visited.  
R: a working set of blocks ready to be scheduled 
min_pred_O(bi): the minimum execution order for all bi’s predecessor blocks. 
PHW(bi): the weight of bi for P.Host. 
PMW(bi): the weight of bi for P.Mem. 
ph_tmp(h),pm_tmp(m): working arrays to insert blocks for scheduling. 
Weight_Temp(i,j):store weight difference between PH and PM 
[Algorithm] 
/*Initialization and weight determination for each blocks */  
for each bi∈ Pdo  
iO = 0 
end for 
 
/* Execution order assignment */ 
W=P 
 
W=P-{ bs },where bs is the start block of WPG 
O(bs)=1 
h=m=0 
R=φ  
while W≠φ AND A≠P do  
call Ready Set Determination (W,R) 
If W≠φ  then 
call Sort Block ( R, h, m, ph_temp, pm_temp ) 
