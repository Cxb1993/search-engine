 2 
HTML pages into DOM trees. For 
example, supposed a person name is 
recognized in the text of a HTML page, 
we will add tags <PERSON> and 
</PERSON> to both sides of that name.  
l Nodes in Element Trees are associated 
with attributes that describe properties of 
nodes. For example, suppose node u  in 
the DOM tree is a hyperlink pointing to a 
file with extension "ps" or "pdf" in its 
filename. We may add an attribute-value 
pair FileType=PaperFile to indicate that 
this node is a link pointing to a paper. 
 
Figure 1 gives an example of HTML pages for 
publication paper lists, and Figure 2 gives its 
corresponding element tree. Note that tag 
<Person> will be added automatically by 
Named Entity Recognizer. 
 
<HTML>
   <HEAD>
         <TITLE>paper list</TITLE>
   </HEAD>
   <BODY>
      <UL>
         <LI><PERSON>authorA</PERSON><A HREF="paperA.ps">download A</A></LI>
         <LI><PERSON>authorB</PERSON><A HREF="paperB.ps">download B</A></LI>
      </UL>
   </BODY>
</HTML>  
Figure 1: An HTML page for Publication 
Paper List 
 
 
Figure 2: Corresponding Element Tree of 
Publication Paper List 
 
3. Object Specification 
 
In WISE, an object is defined as a complete 
subtree of an Element Tree. A node in the 
Element tree is a target node if it is the root 
node of a complete subtree that corresponds 
to a target object. Thus, identification of an 
object in a HTML page is defined as 
identification of its corresponding target node 
in the Element Tree. The task of object 
extraction from HTML pages is thus 
formulated as the task of classification of 
nodes in Element Trees into target and 
non-target nodes. In this project, we propose 
TEL(Tree Extraction Language) to specify the 
class of target nodes in Element trees. 
 
TEL consists of Object Patterns, Word 
Patterns and Element Patterns. Specification 
of a class of target objects consists of a set of 
rules that are specified by TEL. The Object 
Pattern specifies the constraints that must be 
satisfied at the target node itself. Word 
Patterns and Element Patterns can be satisfied 
by any node within the scope defined by the 
Position constraint. The scopes defined by 
Position constraint can be within the object, in 
the object Page, in the Anchor Text of the link 
pointing to the object page, in the Back Page 
of the object page, or in the Forward Page of 
the object page, which are defined as values 
Object, ObjectPage, AnchorText, BackPage 
and FordwardPage, respectively. A node 
satisfies a rule, and is classified as a target 
node, if that the Object Pattern in the rule is 
satisfied by that node, and every Word and 
Element Pattern in the rule is satisfied by a 
node within the scope defined by its 
corresponding Position constraint. Patterns in 
TEL are specified by the following default 
types of constraints. It is possible to extend 
TEL to include application-dependent 
constraints. 
 
l Tag constraint that specifies a set of 
possible tags, i.e. labels, such as, for 
example, {li, p, tr}, and is satisfied if 
one of the tags is assigned as the label of 
that node. 
l Path constraint that specifies a set of tags, 
such as, for example, {head, title},  that 
must all appear in labels of the nodes in 
the path from the root of the Element 
Tree to that node. 
l Word constraint specifies a set of 
 4 
and href=\{"BC",".","ps"\}, the result is the 
attribute-value pair href=\{".", "ps"\}. 
 
4. Experimental Result 
 
We carry out experiment for the following two 
tasks:(i) extraction of items in paper lists, and 
(ii) extraction of lists of lecture notes in 
algorithm courses. The two tasks extract 
objects at different levels: one at the level of 
items in lists, and the other at the level of 
lists. 
 
For the first experiment, we collect a set of 
related Web pages by querying Google with 
query "paper+list". We then marked the 
objects in the first 250 pages, using the visual 
tool. These 250 pages are the labeled data set 
for this experiment. We  pick 50 of the 250 
pages for training. The remaining 200 pages 
are used for testing. To study the learning 
curve, we carry out experiment for different 
numbers of training pages. Figure 4 gives the 
learning curve for Precision, Recall and 
F-measure. Overall, it shows that the best 
performance is achieved when the number of 
training pages is about 30-40. When the 
number of training pages is 30, WISE is able 
to extract 150 true positive (with 52 false 
positive) instances from the remaining 300 
pages. The precision is about 0.74 and the 
recall is about 0.46. When the number of 
training pages is 40, the number of true 
positive is decreased to 119, and the number 
of false positive is deceased to 21, too. The 
precision is improved to 0.85. However, the 
recall goes down to 0.36. The best 
F1-measure is about 0.57 that is achieves 
when the number of training pages is 30. 
 
For the extraction of lists of lecture notes in 
algorithm courses,  we collect 690 pages by 
querying Google with two queries: 
"dynamic+algorithms+lecture+course" and 
"greedy+algorithms+lecture+course". We then 
mark objects in the first 690 returned pages. 
 
Figure 4: Learning Curve for Paper Item 
Extraction 
 
Figure 5 gives the learning curve for 
Precision, Recall and F-measure. Note that in 
this task, the number of positive instances is 
usually small as each page may contain at 
most one list for lecture notes. We thus require 
more training pages to provide a sufficient 
number of instances for training. When the 
number of training pages is 300 that contain in 
total 41 positive instances, WISE is able to 
extract 24 true positive (together with 3 false 
positive) instances from the remaining 390 
pages that contains in total 54 positive 
instances. In such case, the precision is about 
0.89 and the recall is about 0.44. 
 
 
 
Figure 5: Learning Curve for Lecture Note 
Extraction 
