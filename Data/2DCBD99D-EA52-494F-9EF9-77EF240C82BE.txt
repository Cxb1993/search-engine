2all processes in the network do not know any other processes, no processes can
communicate and cooperate with other processes to achieve consensus. Hence, every
process somehow has to get partial knowledge about system participants in the
beginning. The aggregate knowledge of all processes is represented by a directed
graph (digraph) in [1], and is called the knowledge connectivity graph in [7]. It is
shown in [1] that the knowledge connectivity graph satisfying the One Sink
Reducibility (OSR) property is necessary and sufficient for solving the CUP problem.
More specifically, a digraph that meets the OSR property have only one sink
strongly-connected component, i.e. a strongly-connected component without any
outgoing edges. A consensus algorithm based on the foregoing knowledge
connectivity condition has also been provided in [1].
On the basis of their previous work of [1], the authors continued to explore the
knowledge connectivity conditions that allow achieving consensus in self-organized
networks in spite of process crashes in [8]. This new variant of the traditional
consensus problem is called Fault-tolerant Consensus with Unknown Participants
(FT-CUP). In order to preserve the same minimal knowledge connectivity
requirement as the CUP problem, their algorithms for solving the FT-CUP problem
demand the strongest synchrony condition, namely, a synchronous system. However,
strong synchrony violates the highly decentralized and self-organized natures of
unstructured networks. Furthermore, even with strong synchrony, consensus is still
unable to be accomplished in some systems with a knowledge connectivity graph
satisfying the OSR property [8]. Recently, the FT-CUP problem has also been
investigated in [7]. The authors sharpened the OSR property so as to solve the FT-
CUP problem merely under the minimal synchrony assumption. Their new knowledge
connectivity condition is called k-One Sink Reducibility (k-OSR) for any integer k > 0,
and can be regarded as the k-strongly-connected version of OSR. In particular, the
FT- CUP problem with at most f process crashes can be worked out in a system with a
knowledge connectivity graph satisfying the k-OSR property for k > f [7]. Note that
like the OSR property, a graph with the k-OSR property possesses merely a sole sink
strong-connected component as well.
四、研究辦法：
Every process in a system with unknown participants actually knows in advance
what property the PD attached by it satisfies such that the process can safely exploit
the corresponding consensus algorithm to solve the CUP problem with other
processes. For example, in a system equipped with the OSR PD, processes in it learn
first that their PDs satisfy the OSR property, namely, the knowledge connectivity
4embedded in the property of this class of PDs and denotes the exact number of the
required procedures of removing all sink SCCs, the graph can be transformed into an
OSR one by an asynchronous distributed algorithm. Then, we can employ the
consensus algorithm proposed in [1] to achieve consensus among all processes. In
other words, our new d-ROSR PD is also sufficient for solving the CUP problem.
五、結果與討論：
This project addressed the problem of Consensus with Unknown Participants
(CUP). We have proposed a new class of PD, called d-ROSR for any integer d 0,
for solving the CUP problem. This new class treats the OSR PD introduced in [1] as a
special case. Furthermore, algorithms for achieving consensus based on the d-ROSR
PD for a predefined integer d have been provided. Interestingly, because the
knowledge connectivity graph induced by a d-ROSR PD may contain more than one
sink SCC, we validate the possibility of finding a less restrictive knowledge
connectivity condition than OSR, based on which consensus can still be achieved on
self-organized networks. In light of such a result, the CUP problem can be solved in a
more flexible way.
參考文獻：
[1] D. Cavin, Y. Sasson, and A. Schiper, “Consensus with unknown participants or
fundamental self-organization,”Proc. 3rd Int'l. Conf. Ad-Hoc Networks and Wireless,
pp. 135{148, Vancouver, July 2004.
[2] M. J. Fischer, N. A. Lynch, and M. S. Paterson, “Impossibility of distributed
consensus with one faulty process,”Journal of the ACM, vol. 32, no. 2, pp. 374{382,
1985.
[3] N. Lynch, Distributed Algorithms, Morgan Kaufmann, San Francisco, 1996.
[4] C. Dwork, N. Lynch, and L. Stockmeyer, “Consensus in the presence of partial
synchrony,”Journal of the ACM, vol. 35, no. 2, pp. 288{323, 1988.
[5] T. D. Chandra and S. Toueg, “Unreliable failure detectors for reliable distributed
systems,”Journal of the ACM, vol. 43, no. 2, pp. 225{267, 1996.
[6] T. D. Chandra, V. Hadzilacos, and S. Toueg, “The weakest failure detector for
solving consensus,”Journal of the ACM, vol. 43, no. 4, pp. 685{722, July 1996.
[7] F. Greve and S. Tixeuil,“Knowledge connectivity vs. synchrony requirements for
fault-tolerant agreement in unknown networks,”Proc. 37th IEEE/IFIP Int'l Conf.
Dependable Systems and Networks, pp. 82{91, June 2007.
[8] D. Cavin, Y. Sasson, and A. Schiper, “Reaching agreement with unknown
1國科會補助專題研究計畫項下出席國際學術會議心得報告
日期：2011 年 10 月 11 日
一、參加會議經過
此次由 IEEE Society 所舉辦之二 O 一 O 年太平洋週邊可靠計算國際會議(PRDC 2010)在 2010
年 12 月 13 日至 12 月 15 日於日本的東京市舉行。這是一個一年一度的大型國際會議，與會專家
學者包含了美國、日本、法國、瑞典、韓國、英國、加拿大、葡萄牙、西班牙、瑞士、香港、大
陸、義大利以及中華民國等十幾個國家。大家共同討論可靠計算方面最新的研究主題與方向，並
且交換研究心得。Keynote Speech 與發表的論文均相當先進，對國內學術研究有很大的幫助。本
人在這會議上口頭報告發表一篇論文。
本人於 12 月 11 日早上自行從桃園機場出發，並於當天下午抵達日本東京市。休息兩晚調整體
力與準備投影片後，13日開始參加會議的歡迎晚宴。接著，隔天 14日上午九時舉行開幕式後，立
即開始進行一場 Keynote Speech，由日本當地 Sony Computer Science Laboratories 的 Mario
Tokoro 博士主講，講題為「朝向開放系統之可靠度」。隨後，便開始各場 Sessions，本人選擇較
有興趣的幾個 Session 去聆聽其他優秀學者的論文發表，如 Virtual Machines、Chip
Multi-Processors 與 Real-Time/Networked Systems 等。其中，本人被安排於下午第二場 Session:
Real-Time/Networked Systems 中發表論文，並回答數位提問者的問題，晚上則繼續參加了會議所
舉辦之晚宴。第三天主要是進行 Fast Abstract 的口頭報告，接著便是一些研究生研究成果的展
示，本人於會場中聆聽報告與觀看海報，並與各國專家學者交換研究心得。下午則是本次會議的
重頭戲登場，大會邀請 Sony Corporation 的 Tadashi Morita 博士進行一場關於日本電子付款系
統之可靠度研究的演講，讓本人了解日本目前於電子經濟方面所下的努力，獲益良多。聽完演講
後則與各國專家學家道別並約下次會議再聚後離開會場，之後便前往成田機場搭機返回台灣，並
計畫編號 NSC 99－2221－E－005－063－
計畫名稱 具未知參與者之雲端計算環境中解決ㄧ致問題的研究
出國人員
姓名
蔡智強
服務機構
及職稱
國立中興大學電機工程系副教授
會議時間
2010 年 12 月 13
日至 2010 年 12
月 15 日
會議地點 日本東京市
會議名稱
(中文)二０一０太平洋週邊可靠計算會議
(英文) The 16th IEEE Pacific Rim International Symposium on
Dependable Computing
發表論文
題目
An Improved Knowledge Connectivity Condition for Fault-Tolerant
Consensus with Unknown Participants
An Improved Knowledge Connectivity Condition for Fault-Tolerant Consensus with
Unknown Participants
Jichiang Tsai
Department of Electrical Engineering
National Chung-Hsing University
Taichung, Taiwan
Email: jichiangt@nchu.edu.tw
Che-Cheng Chang
Department of Electrical Engineering
National Chung-Hsing University
Taichung, Taiwan
Email: d9864001@mail.nchu.edu.tw
Abstract—For self-organized networks that possess highly
decentralized and self-organized natures, neither the identity
nor the number of processes is known to all participants
at the beginning of the computation because no central au-
thority exists to initialize each participant with some context
information. Hence, consensus, which is essential to solving
the agreement problem, in such networks cannot be achieved
in the ways for traditional ﬁxed networks. To address this
problem of Consensus with Unknown Participants (CUP), a
variant of the traditional consensus problem was proposed
in the literature, by relaxing the requirement for the original
knowledge owned by every process about all participants in the
computation. Correspondingly, the CUP problem considering
process crashes was also introduced, called the Fault-Tolerant
Consensus with Unknown Participants (FT-CUP) problem. In
this paper, we propose a knowledge connectivity condition
sufﬁcient for solving the FT-CUP problem, which is improved
from the one proposed in our previous work.
Keywords-self-organized networks; unknown participants;
agreement; consensus; asynchronous algorithms;
I. INTRODUCTION
Without any statically deployed infrastructure and cen-
tral administrative authority, Mobile Ad-Hoc Networks
(MANETs) and Wireless Sensor Networks (WSNs) allow
participating processes to access services independently of
their locations. Therefore, these unstructured peer-to-peer
networks possess highly decentralized and self-organized na-
tures. Due to these inherent natures, such self-organized net-
works can beneﬁt tremendously from consensus to achieve
self-organization and robustness.
Consensus is a fundamental building block for solving
important fault-tolerant distributed problems that require
agreement among a set of processes. This set of processes
has to agree on a common value, called the decision
value, which must be the initial value proposed by one
of the processes [1]. Consensus is easier to accomplish
in traditional ﬁxed networks, where processes are aware
of the network topology and have full knowledge of all
participants. Unfortunately, traditional consensus solutions
are not able to apply to self-organized networks.
To address this issue, a variant of the traditional consensus
problem adjusted to the self-organized network, Consensus
with Unknown Participants (CUP), was ﬁrst introduced in
[2]. This novel problem preserves the same speciﬁcations
as the traditional one except the initial knowledge about
the set of participants in the execution. Consensus has been
extensively studied in traditional ﬁxed networks with pro-
cess failures. Several algorithms based on different system
models have been proposed as well [3]-[6]. The difﬁculty of
solving the classical consensus problem is the assumption
that processes may crash. Nevertheless, the CUP problem is
hard to work out because of unknown participants. So the
work in [2] focuses on solving the CUP problem under the
assumption that processes do not crash.
It is trivial that if all processes in the network do not
know any other processes, no processes can communicate
and cooperate with other processes to achieve consensus.
Hence, every process somehow has to get partial knowledge
about system participants in the beginning. The aggregate
knowledge of all processes involved in the computation is
represented by a directed graph (digraph) in [2], and is called
the knowledge connectivity graph in [7]. It is shown in [2]
that the knowledge connectivity graph satisfying the One
Sink Reducibility (OSR) property is necessary and sufﬁcient
for solving the CUP problem in an asynchronous fault-
free system. A consensus algorithm based on the foregoing
condition has also been provided in [2]. Recently, in [8],
by showing that the CUP problem can be still solved in
a knowledge connectivity graph with more than one sink
strongly-connected component, a serious gap in the necessity
proof of OSR for the CUP problem presented in [2] has
been identiﬁed. Furthermore, based on the d-time Removing
to One Sink Reducibility (d-ROSR) property proposed in the
same paper, the author ﬁlled such a gap and produced a
correct proof of the OSR necessity.
On the basis of their previous work of [2], the authors
in [9] continued to explore the knowledge connectivity
conditions that allow to achieve consensus in self-organized
networks in spite of process crashes. The new problem
is called Fault-tolerant Consensus with Unknown Partici-
pants (FT-CUP). In order to preserve the same minimal
knowledge connectivity requirement as the CUP problem,
2010 Pacific Rim International Symposium on Dependable Computing
978-0-7695-4289-8/10 $26.00 © 2010 IEEE
DOI 10.1109/PRDC.2010.20
109
Correspondingly, another type of failure detector that can
also encapsulate eventual synchrony is the leader detector:
• Leader Detector (Ω). This type of failure detector even-
tually provides the identity of a certain correct process to
each process [13].
It has been shown that the leader detector Ω exactly has the
same computational power with the weakest class of FD that
can help achieve consensus [14]. In this paper, like the work
in [7], we consider how to solve the FT-CUP problem in an
asynchronous system equipped with Ω.
III. PARTICIPANT DETECTORS
If a process in Π does not know any other process,
it cannot send a message to another process. Obviously,
consensus cannot be achieved. The notion of the participant
detector (PD) is thus proposed in [2] to offer a process some
hints about processes participating. Particularly, the PD of
process pi is denoted by PDi in this paper. As queried
by pi, PDi returns a subset of processes in Π, including
pi itself. Moreover, the information returned by a PD will
evolve between queries and satisﬁes the following two
properties [2]: i) The information returned by a PD is non-
decreasing over time; ii) A PD does not make a mistake by
returning a process not belonging to Π. Note that querying
the PD just once can obtain a knowledge connectivity graph
sufﬁcient for solving the considered problem. Therefore, it
is redundant for a process to query the PD more than once.
Hence, like related works in [2],[7]-[11], a PD is also queried
by its process exactly once in this paper.
To deﬁne a participant detector, we have to employ the
following two types of graphs [2], [7]:
Deﬁnition 1: A knowledge connectivity graph of Π is a
digraph Gdi(V,Edi), where V = Π and (pi, pj) ∈ Edi if
and only if pj ∈ PDi, i.e. pi knows pj .
Deﬁnition 2: An undirected knowledge connectivity
graph of Π is an undirected graph G(V,E), where V = Π
and (pi, pj) ∈ E if and only if pj ∈ PDi or pi ∈ PDj .
In the following, the deﬁnition of a seminal class of PD
introduced in [2] is described:
Deﬁnition 3: A PD satisﬁes the One Sink Reducibility
(OSR) property iff:
1) The undirected knowledge connectivity graph induced
by it is connected.
2) The DAG obtained by reducing the knowledge con-
nectivity graph induced by it to the SCCs has one and
only one sink.
Figure 1 depicts an example knowledge connectivity graph
induced by an OSR PD. It has been demonstrated that
the OSR PD is necessary and sufﬁcient to solve the CUP
problem [2], [8]. Furthermore, all important types of PDs
proposed in the literature [2],[7]-[11] are derived from the
OSR PD, as well as the one introduced in this paper.
Recently, the authors in [7] demonstrated that a more
restricted property than OSR, called k-One Sink Reducibility
P1
P5
P9
P7
P10
P3
B
C
P2
P4
P6
P8
P11 
A
Figure 1. The knowledge connectivity graph induced by an OSR PD.
(k-OSR), is sufﬁcient to solve the FT-CUP problem for
f < k, based on the assumption that every process is
equipped with a leader detector. Such a class of PD is
formally deﬁned below [7]:
Deﬁnition 4: A PD satisﬁes the k-One Sink Reducibility
(k-OSR) property for k > 0 iff:
1) The undirected knowledge connectivity graph induced
by it is connected.
2) The DAG obtained by reducing the knowledge con-
nectivity graph induced by it to the k-SCCs has one
and only one sink.
3) For any two k-SCCs A and B, if there is a directed
path from A to B, there are k vertex-disjoint directed
paths from A to B.
Hence, a k-OSR PD can be regarded as the k-strongly con-
nected version of its corresponding OSR PD. Particularly,
the DAG obtained by reducing the resultant graph to the
SCCs is still the same as the one obtained by reducing the
original graph to its SCCs. This means that solving the FT-
CUP problem based on a k-OSR PD can be accomplished
via a similar algorithm to that for solving the CUP problem
based on an OSR PD [7]. Figure 2 shows an example
knowledge connectivity graph induced by a k-OSR PD for
k = 2. In comparison with the graph in Figure 1, the
knowledge connectivity requirement of the k-OSR PD is
obviously much higher than that of the OSR PD.
Yet, it is still possible to solve the FT-CUP problem
with at most f process crashes by simply ensuring that
the resultant graph obtained by removing any f vertices
from the considered knowledge connectivity graph owns a
unique sink SCC containing all remaining vertices of the
original sink SCC. Doing so can signiﬁcantly lessen the
connectivity requirement of a knowledge connectivity graph
sufﬁcient for the FT-CUP problem. Such an idea yields a less
constrained type of PD in [10], called f -tolerant One Sink
Reducibility (f -tolerant OSR). Prior to its formal deﬁnition,
a new technical term is ﬁrst described [10]:
Deﬁnition 5: In a digraph Gdi(V,Edi), a vertex u of an
SCC A is called a crossing point if and only if there exists
a vertex v in a different SCC than A such that (u, v) ∈ Edi.
111
P1
P3
P2
P4
P6
P7
P5
P9
P8
A
B
C
D
(a) 
P2
P4
P6
P7
P5
B
C
(b) 
Figure 4. (a) The knowledge connectivity graph induced by a 1-ROSR PD; (b) The resultant graph after being reduced by one sink-removing operation.
instances of the same algorithm. Note that a process must
know in advance the identities of processes from which it
omits replies; otherwise, the process cannot send queries to
these processes and then waits for their replies. Second, the
deﬁnition of the d-ROSR PD, i.e. Deﬁnition 8, only requires
that the initial undirected knowledge connectivity graph G is
connected and the ﬁnal reduced graph Gddi satisﬁes the OSR
property, namely, its corresponding undirected knowledge
connectivity graph Gd is also connected. This means that
an intermediate graph Gk, ∀ 1 < k < d, derived from
the knowledge connectivity graph Gdi of a d-ROSR PD for
d > 1 may be disconnected. We also have to address this
issue for the FT-CUP problem since a disconnected sink
SCC produced by a sink-removing operation cannot directly
obtain the decision value propagated from a process in the
ﬁnal reduced graph Gddi.
In light of the previous discussions, a general new knowl-
edge connectivity condition, called f -tolerant d-time Remov-
ing to One Sink Reducibility (f -tolerant d-ROSR), improved
from the d-ROSR one for the FT-CUP problem is formally
deﬁned below:
Deﬁnition 9: A PD satisﬁes the f -tolerant d-time Remov-
ing to One Sink Reducibility (f -tolerant d-ROSR) property
for f ≥ 0 and d ≥ 0 iff:
1) The undirected knowledge connectivity graph G in-
duced by it is connected.
2) Every sink SCC in the subgraph Gkdi of the knowledge
connectivity graph Gdi induced by it owns more than
f+1 vertices and is (f+1)-strongly connected, ∀ 0 ≤
k < d.
3) For any sink SCC S in Gkdi, ∀ 0 < k ≤ d,
there exist f + 1 vertices u0, u1, . . . , uf in S and
f + 1 vertices v0, v1, . . . , vf in some sink SCC(s)
of Gk−1di (V
k−1, Ek−1di ) such that (ui, vi) ∈ Ek−1di ,
∀ 0 ≤ i ≤ f .
4) Gdi can be divided into several zones as follows:
a) Every SCC in the ﬁnal reduced graph Gddi be-
longs to Zone 1.
b) A sink SCC S in Gkdi, ∀ 0 ≤ k < d, belongs to
Zone x, where x > 1 and is even, if and only if
for some vertex u in S that is not a cross point,
SCC2
SCC1
SCC3
SCC6
SCC4
SCC5
SCC7
SCC9 SCC12
SCC10
SCC8Zone 1 Zone 2
Zone 3
SCC11 SCC13
Zone 4
Figure 5. An example knowledge connectivity graph with the f -tolerant
d-ROSR property for d = 3 and f ≥ 0.
there exist f +1 vertices v0, v1, . . . , vf in some
SCC(s) other than S of Zones 1, 2, . . . , x such
that vi can reach u through f +1 vertex-disjoint
directed paths, ∀ 0 ≤ i ≤ f .
c) A sink SCC S in Gkdi, ∀ 0 ≤ k < d, belongs to
Zone x, where x > 1 and is odd, if and only if
for some vertex u in S that is not a cross point,
there exist f +1 vertices v0, v1, . . . , vf in some
SCC(s) other than S of Zones 2, 3, . . . , x such
that there are f+1 directed paths P0, P1, . . . , Pf ,
where Pi is from u to vi, ∀ 0 ≤ i ≤ f , no two
of which have a vertex, except u, in common.
5) Gddi satisﬁes the f -tolerant One Sink Reducibility (f -
tolerant OSR) property.
Note that in our earlier work of [11], a preliminary version
of the considered f -tolerant d-ROSR property was proposed.
But we only consider a graph with two zones in [11].
Figure 5 depicts an example knowledge connectivity graph
Gdi induced by an f -tolerant 3-ROSR PD for f ≥ 0, which
can be divided into four zones.
Next, we clearly explain the purposes of those conditions
deﬁning such a PD, i.e. conditions of Deﬁnition 9. However,
due to the space limitation, we do not present formal proofs
on these purposes here. The ﬁrst condition is necessary for
achieving consensus in a network with unknown partici-
pants. As for the second condition, even with f process
crashes, every sink component in Gkdi, ∀ 0 ≤ k < d, is
113
The k-th level instance of the sink-removing algorithm for process pi
reduce_sinks(k)(): 
input: 
(01) prev_remaindersi: set of processes; 
variables: 
(02) now_remaindersi: set of processes 
(03) in_sinki: boolean; 
(04) waiti: integer; 
init: 
(05) now_remaindersi ← prev_remaindersi; 
(06) in_sinki ← is_in_sink(prev_remaindersi); 
(07) waiti ← | prev_remaindersi | - f; 
(08) for ∀pj ∈ prev_remaindersi do
(09)  send are you in a k-th level sink? to pj; 
upon receipt of are you in a k-th level sink? from
pj:
(10) if in_sinki = true then
(11)  send (in a k-th level sink, prev_remaindersi) 
to pj; 
(12) else
(13)  send not in a k-th level sink to pj; 
upon receipt of (in a k-th level sink, prev_ 
remaindersj) from pj:
(14) now_remaindersi ← now_remaindersi \ 
prev_remaindersj; 
(15) waiti ← waiti - 1; 
(16) if waiti = 0 then
(17)  return now_remaindersi; 
upon receipt of not in a k-th level sink from pj:
(18) waiti ← waiti - 1; 
(19) if waiti = 0 then
(20)  return now_remaindersi; 
Figure 6. The k-th level instance of the sink-removing algorithm.
its participant set becomes empty or exactly d operations
are performed (lines 14 - 20). Furthermore, during the sink
removing course, pi in a removed sink component has to
ask all its participants, excluding processes in the same
component, for the decision value (lines 16 - 18) since it
has no idea whether its components will be disconnected
from other components during the sink removing course and
which of its participants can obtain the decision value earlier.
Subsequently, those processes with a nonempty remainder
set proceed with negotiating the decision value (line 21 - 30).
More speciﬁcally, a process pi not belonging to the unique
sink SCC of the ﬁnal reduced graph sends a tell me the
decision value message to all processes in its ﬁnal reminder
set, exactly including all processes in the current sink SCC,
to request for the decision value (lines 23 - 25). Oppositely,
if pi resides in the current sink component, it negotiates
the decision value with all other processes in the same
component, which are included in its prev remaindersi
set, via an Ω-based indulgent consensus algorithm able to
tolerate up to f process crashes (lines 27). After making
the decision (lines 28), pi informs all its participants except
those in the same SCC of the decision value (lines 29 - 30),
letting some processes in the removed sink components be
able to decide. On the other hand, in response to the query
tell me the decision value from a process pj , a process in the
sole sink SCC can immediately send the decision value back
to pj (lines 31 - 32). As for a process not in the sink SCC,
if it has decided, it informs the decision value to the queried
process (lines 34 - 35). If not, it records pj in its ask mei
set (lines 37), which is initialized to an empty set (lines 13).
Correspondingly, upon receipt of the decision value from
some process, if pi has not decided, it decides such a value
(lines 38 - 39). Moreover, right after pi decides (line 40), it
diffuses the decision value to all its participants, excluding
those in the same component, as well as processes asking
it the decision value (lines 41 - 42). Doing so makes all
correct participants of pi obtain the decision value.
VI. CONCLUSIONS
This paper addressed the problem of Fault-Tolerant Con-
sensus with Unknown Participants (FT-CUP), where not
only processes may crash but also participants are unknown
initially. In the text, we have proposed a weaker knowledge
connectivity condition than the k-OSR property proposed in
[7], based on which the FT-CUP problem can still be solved,
also under the minimal synchrony assumption. Our new type
of PD is called f -tolerant d-ROSR, and is more viable in
practice than the k-OSR PD.
ACKNOWLEDGMENT
This work was supported by the National Science Council,
Taiwan, ROC, under Grant NSC 99–2221–E–005–063.
REFERENCES
[1] M. J. Fischer, N. A. Lynch, and M. S. Paterson, “Impossibility
of distributed consensus with one faulty process,” Journal of
the ACM, vol. 32, no. 2, pp. 374–382, 1985.
[2] D. Cavin, Y. Sasson, and A. Schiper, “Consensus with un-
known participants or fundamental self-organization,” Proc.
3rd Int’l. Conf. Ad-Hoc Networks and Wireless, pp. 135–148,
Vancouver, July 2004.
[3] N. Lynch, Distributed Algorithms, Morgan Kaufmann, San
Francisco, 1996.
115
國科會補助計畫衍生研發成果推廣資料表
日期:2011/08/31
國科會補助計畫
計畫名稱: 具未知參與者之雲端計算環境中解決ㄧ致問題的研究
計畫主持人: 蔡智強
計畫編號: 99-2221-E-005-063- 學門領域: 計算機結構與計算機系統
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
