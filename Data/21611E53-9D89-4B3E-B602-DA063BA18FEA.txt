C2 
C3 
C4 
C5 
C1 
studied one. The key reason is that B&B chooses a bound to 
prune the sub-solution tree when the current solution at 
current level of the solution tree is already over the bound. 
However, different touring sequences result in different 
Euclidean length in spite of having an identical sub-solution 
tree. For instance, in Fig. 2, the dotted path is touring from C1, 
C2, C3, C4, C5, and then C1, whereas the dashed path is touring 
via C1, C2, C3, C5, C4, and then C1. Both solutions have the 
same sub-solution tree of C1, C2, C3, but the shortest 
Euclidean length of the identical sub-solution tree C1, C2, C3 
are different in both cases.  
 
Figure 2. Different Euclidean length with identical sub-solution tree. 
 
As illustrated in Fig 2, in spite of having an identical 
sequenced sub-solution path, the length of the sub-solution 
paths are still different. Therefore, the classical B&B 
technique cannot be used in the studied problem. However, if 
we can find proper upper and lower bounds, revised B&B 
methodology can be conducted to solve the studied problem. 
The main problem can thus be restricted to compute a shortest 
Euclidean path touring a given sequenced of circles. Next 
section introduces the core computing algorithm for the 
reduced bounded problem. 
III. THE BASE ALGORITHM 
The most fundamental case of the studied problem is when 
n=3. The problem of touring three circles in 2D plane with an 
open path can be simplified by traversing a point-circle-point 
problem in the author’s previous work [13]. In that paper, the 
authors resolved the closed-form generic roots equation of the 
shortest path of two points and one circle in the 2D plane. This 
equation is resolved based on Snell’s Law [14, 15] and Fermat 
Principle [16] in physics accompanying several algebraic and 
geometric inferences. Since it is a closed-form generic roots 
solution, it can be applied in computer system to immediately 
obtain a shortest path.  
Given a touring sequence, say C1, C2, ..., Cn, the calculation 
on the shortest Euclidean path is not a combinatorial problem 
since it uses π. With the closed-form generic roots equation of 
the shortest path of two points and one circle, the author 
further proposed an efficient algorithm [11] computing the 
shortest path on this bounded problem where the touring 
sequence is fixed. The algorithm is called “Odd-Even” in the 
author’s paper [11] and the time complexity is O(kn) where 
1≤k≤n under a small computational threshold. The Odd-Even 
algorithm is depicted by Algorithm 1. 
Algorithm 1. Odd-Even 
Input: a computing threshold ε and a graph G containing n 
disjoint ordered circles numbered as C1, C2, …, and Cn; 
Output: min-n-gon and its length Lmin; 
1: Choose an arbitrary point on the border of each circle as the 
initial contact point. Successively connect these points 
according to the number of the circles forming an initial n-
gon and its initial side length L0; 
2: j ← 1; 
3: Do { 
4:      Fix the contact point on each odd circle and applying the 
generic roots equation of the point-circle-point problem 
to adjust the contact point on each even circle yielding 
the new n-gon and its length ejL ; //The superscript e 
represents the local optimization on every even number 
circle. 
5:      Fix the contact point on each even circle and applying 
the generic roots equation of the point-circle-point 
problem to adjust the contact point on each odd circle 
yielding the new n-gon and its length ojL ; //The 
superscript o represents the local optimization on every 
odd number circle. 
6:        j++; 
7: } Until e oj jL L ε− ≤ ; 
8: min-n-gon ← n-gon and its length Lmin ← ojL ; 
The correctness of Algorithm 1 is given in [11]. Algorithm 
Odd_Even is as the base algorithm of the proposed algorithm 
described in the next section. 
IV. PROPOSED ALGORITHM 
Since this work presents an exact algorithm, it must prove 
that the proposed algorithm can cover all solution space. In 
this section, we will introduce a useful bound that prevents 
from the full scan to the solution space so that the coverage of 
the proposed algorithm is confirmed and the performance is 
raised against the brute force approach. The useful bound, 
represented by B, is to calculate the length of the n segments 
which connect the centers of the n circles successively and 
then subtracts the 2-fold values of the summation of the radii 
of all n circles. The proof of B is first to discuss the most 
fundamental situation, i.e., n=2 and n=3. Based on the lemma 
of n=3 is proven, when n>3, the situation can be regarded as a 
consecutive n=3 pieces. Finally the theorem that B is a bond 
can be built. Since B is a useful bound, a revised B&B 
algorithm can be conducted to the proposed algorithm to 
guarantee that all solution space is examined. Empirical 
results in section 5 have shown that the useful bound can save 
a significant searching time so that it is applicable to be 
applied in the computer systems. Now we start from the most 
fundamental case where n=2. 
 
 
 
Algorithm 2. Refined-B&B 
Input Ci; 
Output: Shortest path = min ℓ; 
1: Span solution path tree as ss; //solution space=(n-1)! 
2: Reduce ss ← ss/2; //solution space=(n-1)!/2 
3: lb ← ∞; //lb is the current lower bound (a current shortest 
path); 
4: Do { //examine all ss. 
5:       Do { //check this branch from top to bottom. 
6:             Compute the current B; 
7:             IF current B ≤ lb and it’s the end of this branch { 
8:                 Call Algorithm 1 to compute ℓ; 
9:                 IF ℓ ≤ lb  
10:                    lb ← ℓ;} 
11:            Else { 
10:                Prune the branches on beneath; 
11:                Update ss; } 
12:     } Until the end of this branch; 
13: } Until whole ss is done; 
18: Return min ℓ ← lb; 
 
V. EXPERIMENTS 
Experiments are addressed by three typical cases. Case 1 
scatters the circles uniformly. In case 2, the circles are 
clustered by three groups. Case 3 divides the plane into two 
half-planes and places the circles in the two half-planes with a 
little bit monotonous. The three cases can represent a certain 
number of real cases.  
In Case 1, the length of the initial state is 
965.490803425996. The length of the final state is 
677.647178207549 which is the shortest. And the shortest 
touring sequence is C1, C2, C6, C3, C4, C5, C10, C7, C8, C9, and 
then C1. The number of the reduced solution space (ss) is 
33432. 
In Case 2, the length of the initial state is 
714.241264669883. The length of the final state is 
648.985552723333 which is the shortest. And the shortest 
touring sequence is C1, C3, C4, C5, C7, C6, C10, C9, C8, C2, and 
then C1. The number of the reduced ss is 30707. 
In Case 3, the length of the initial state is 
1364.62122627742. The length of the final state is 
707.358736585573 which is the shortest. And the shortest 
touring sequence is C1, C5, C10, C7, C8, C9, C6, C2, C4, C3, and 
then C1. The number of the reduced ss is 19092. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
(a) Initial state. 
 
(b) Final state. 
Figure 5. Case 1. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
0 5 100 150 200 250
50
100
150
200 
250
0 
C1
C2 C3 
C4 
C5
C6 
C7 
C8 
C9 
C10 
C1 
C2 C3 
C4 
C5 
C6 
C7 
C8 
C9 
C10 
0 50 100 150 200 250
50 
100 
150 
200
250 
0 
heuristic algorithms are recommended for large number of 
circles. 
VI. CONCLUSION 
This paper presents the problem on computing the shortest 
Euclidean path touring n disjoint circles in a 2D plane. The 
problem has many applications such as layered manufacturing 
of rapid prototyping and the placement of wireless sensor 
networks. The author’s previous work had proposed the base 
algorithm computing a shortest Euclidean path touring a given 
sequenced of circles. In this base problem, the circles are 
toured according to their numbers. This paper relaxes the 
constraint where the touring sequences are not fixed. The 
studied problem is not a purely combinatorial problem. 
Traditional exact method such as B&B algorithm cannot be 
applied in resolving the studied problem. This paper refines 
the B&B algorithm and takes advantage of the author’s base 
algorithm (Odd_Even) to establish an exact algorithm that can 
solved the studied problem in an average time about 4.443( )O n . 
Empirical results have shown the effectiveness of the 
proposed exact algorithm so that can be conducted in 
computer systems. 
The future works can consider some more general problems. 
For instance, in 2D, consider the shortest path touring a given 
number of conics instead of circles only. While the concerned 
circle in this paper becomes ellipse, parabola and hyperbola, 
the applications are essentially broadened. 
 
ACKNOWLEDGMENT 
This work was supported by the National Science Council 
Taiwan, R.O.C, under the grant NSC 99-2221-E-262-019. 
 
 
REFERENCES 
[1]  E.L. Lawler, J.K. Lenstra, A.H.G. Kan Rinnooy, and D.B. Shmoys, The 
Traveling Salesman Problem, Ch2, John Wiley & Sons, 1985. 
[2]  G. Gutin and A.P. Punnen, The Traveling Salesman Problem and Its 
Variation, Ch1, The Netherlands, Dordrecht: Kluwer Academic 
Publishers, 2002. 
[3]  M. Fischetti, J.J. Salazar-González, and P. Toth, “Solving the 
orienteering problem through Branch-and-Cut,” INFORMS Journal on 
Computing, vol. 10(2), pp. 138−148, 1998. 
[4]  H. Hernández-Pérez and J.J. Salazar-González, “Branch and cut 
algorithm for a travelling salesman problem with pickup and delivery,” 
Discrete Applied Mathematics, vol. 145(1), pp. 126−139, 2004. 
[5]  M. Jünger and S. Thienel, “Introduction to ABACUS- A Branch-and-
Cut System,” Operations Research Letters, vol. 22, pp. 83−95, 1998.  
[6]  C. Huang and Y. Tseng, “The coverage problem in a wireless sensor 
network,” In Proceedings of International Workshop on Wireless Sensor 
Networks and Applications, San Diego, California, USA, pp. 115–121, 
2003. 
[7]  B. Wang, W. Wang, V. Srinivasan, and K.C. Chua, “Information 
coverage and its applications in sensor networks,” IEEE 
Communications Letters, vol. 9(11), pp. 967–969, 2005. 
[8]  M. Dror, A. Efrat, A. Lubiw, and J.S.B. Mitchell, “Touring a sequence 
of polygons,” In Proceedings of 35th ACM Symposium on Theory of 
Computing San Diego, California, USA, pp. 473–482, June 9–11, 2003. 
[9]  A. Efrat, S.P. Fekete, P.R. Gaddehosur, J.S.B. Mitchell, V. Polishchuk, 
and J. Suomela, “Improved approximation algorithms for relay 
placement,” In Proceedings of European Symposium on Algorithms, 
Lecture Notes in Computer Science, vol. 5193, pp. 356–367, 2008. 
[10]  V. Polishchuk and J.S.B. Mitchell, “Touring convex polytopes – A conic 
programming solution,” In Proceedings of 17th Canadian Conference on 
Computational Geometry, pp. 290–293, 2005. 
[11]  C.C. Chou, “An efficient algorithm for relay placement in a ring sensor 
networks,” Expert Systems with Applications, vol. 37(7), pp. 4830–4841, 
2010. 
[12]  K. Tang and A. Pang, “Optimal connection of loops in laminated object 
manufacturing,” Computer-Aided Design, vol. 35, pp. 1011–1022, 2003.  
[13]  S.Y. Chou, C.C. Chou, and Y.K. Chen, “A base function for generating 
contour traversal paths in stereolithography apparatus applications,” 
Expert Systems with Applications, vol. 35(1,2), pp. 235−244, 2008. 
[14]  J. Dijksterhuis, “Once Snell breaks down, from geometrical to physical 
optics in the seventeenth century,” Annals of Science, vol. 61, pp. 165–
185, 2004. 
[15]  A. Kwan, J. Dudley, and E. Lantz, “Who really discovered Snell’s law,” 
Physics World, vol. 15(4), pp. 64, 2002. 
[16]  A. Schuster, An Introduction to the Theory of Optics, London: Edward 
Arnold, 1904. 
[17]  C.C. Chou, “A Base Algorithm for Computing the Shortest Path of 
Spheres,” European Journal of Scientific Research, vol. 37(1), pp.110–
133, 2009. 
 
 
 
C2 
C3 
C4 
C5 
C1 
studied one. The key reason is that B&B chooses a bound to 
prune the sub-solution tree when the current solution at 
current level of the solution tree is already over the bound. 
However, different touring sequences result in different 
Euclidean length in spite of having an identical sub-solution 
tree. For instance, in Fig. 2, the dotted path is touring from C1, 
C2, C3, C4, C5, and then C1, whereas the dashed path is touring 
via C1, C2, C3, C5, C4, and then C1. Both solutions have the 
same sub-solution tree of C1, C2, C3, but the shortest 
Euclidean length of the identical sub-solution tree C1, C2, C3 
are different in both cases.  
 
Figure 2. Different Euclidean length with identical sub-solution tree. 
 
As illustrated in Fig 2, in spite of having an identical 
sequenced sub-solution path, the length of the sub-solution 
paths are still different. Therefore, the classical B&B 
technique cannot be used in the studied problem. However, if 
we can find proper upper and lower bounds, revised B&B 
methodology can be conducted to solve the studied problem. 
The main problem can thus be restricted to compute a shortest 
Euclidean path touring a given sequenced of circles. Next 
section introduces the core computing algorithm for the 
reduced bounded problem. 
III. THE BASE ALGORITHM 
The most fundamental case of the studied problem is when 
n=3. The problem of touring three circles in 2D plane with an 
open path can be simplified by traversing a point-circle-point 
problem in the author’s previous work [13]. In that paper, the 
authors resolved the closed-form generic roots equation of the 
shortest path of two points and one circle in the 2D plane. This 
equation is resolved based on Snell’s Law [14, 15] and Fermat 
Principle [16] in physics accompanying several algebraic and 
geometric inferences. Since it is a closed-form generic roots 
solution, it can be applied in computer system to immediately 
obtain a shortest path.  
Given a touring sequence, say C1, C2, ..., Cn, the calculation 
on the shortest Euclidean path is not a combinatorial problem 
since it uses π. With the closed-form generic roots equation of 
the shortest path of two points and one circle, the author 
further proposed an efficient algorithm [11] computing the 
shortest path on this bounded problem where the touring 
sequence is fixed. The algorithm is called “Odd-Even” in the 
author’s paper [11] and the time complexity is O(kn) where 
1≤k≤n under a small computational threshold. The Odd-Even 
algorithm is depicted by Algorithm 1. 
Algorithm 1. Odd-Even 
Input: a computing threshold ε and a graph G containing n 
disjoint ordered circles numbered as C1, C2, …, and Cn; 
Output: min-n-gon and its length Lmin; 
1: Choose an arbitrary point on the border of each circle as the 
initial contact point. Successively connect these points 
according to the number of the circles forming an initial n-
gon and its initial side length L0; 
2: j ← 1; 
3: Do { 
4:      Fix the contact point on each odd circle and applying the 
generic roots equation of the point-circle-point problem 
to adjust the contact point on each even circle yielding 
the new n-gon and its length ejL ; //The superscript e 
represents the local optimization on every even number 
circle. 
5:      Fix the contact point on each even circle and applying 
the generic roots equation of the point-circle-point 
problem to adjust the contact point on each odd circle 
yielding the new n-gon and its length ojL ; //The 
superscript o represents the local optimization on every 
odd number circle. 
6:        j++; 
7: } Until e oj jL L ε− ≤ ; 
8: min-n-gon ← n-gon and its length Lmin ← ojL ; 
The correctness of Algorithm 1 is given in [11]. Algorithm 
Odd_Even is as the base algorithm of the proposed algorithm 
described in the next section. 
IV. PROPOSED ALGORITHM 
Since this work presents an exact algorithm, it must prove 
that the proposed algorithm can cover all solution space. In 
this section, we will introduce a useful bound that prevents 
from the full scan to the solution space so that the coverage of 
the proposed algorithm is confirmed and the performance is 
raised against the brute force approach. The useful bound, 
represented by B, is to calculate the length of the n segments 
which connect the centers of the n circles successively and 
then subtracts the 2-fold values of the summation of the radii 
of all n circles. The proof of B is first to discuss the most 
fundamental situation, i.e., n=2 and n=3. Based on the lemma 
of n=3 is proven, when n>3, the situation can be regarded as a 
consecutive n=3 pieces. Finally the theorem that B is a bond 
can be built. Since B is a useful bound, a revised B&B 
algorithm can be conducted to the proposed algorithm to 
guarantee that all solution space is examined. Empirical 
results in section 5 have shown that the useful bound can save 
a significant searching time so that it is applicable to be 
applied in the computer systems. Now we start from the most 
fundamental case where n=2. 
 
 
 
Algorithm 2. Refined-B&B 
Input Ci; 
Output: Shortest path = min ℓ; 
1: Span solution path tree as ss; //solution space=(n-1)! 
2: Reduce ss ← ss/2; //solution space=(n-1)!/2 
3: lb ← ∞; //lb is the current lower bound (a current shortest 
path); 
4: Do { //examine all ss. 
5:       Do { //check this branch from top to bottom. 
6:             Compute the current B; 
7:             IF current B ≤ lb and it’s the end of this branch { 
8:                 Call Algorithm 1 to compute ℓ; 
9:                 IF ℓ ≤ lb  
10:                    lb ← ℓ;} 
11:            Else { 
10:                Prune the branches on beneath; 
11:                Update ss; } 
12:     } Until the end of this branch; 
13: } Until whole ss is done; 
18: Return min ℓ ← lb; 
 
V. EXPERIMENTS 
Experiments are addressed by three typical cases. Case 1 
scatters the circles uniformly. In case 2, the circles are 
clustered by three groups. Case 3 divides the plane into two 
half-planes and places the circles in the two half-planes with a 
little bit monotonous. The three cases can represent a certain 
number of real cases.  
In Case 1, the length of the initial state is 
965.490803425996. The length of the final state is 
677.647178207549 which is the shortest. And the shortest 
touring sequence is C1, C2, C6, C3, C4, C5, C10, C7, C8, C9, and 
then C1. The number of the reduced solution space (ss) is 
33432. 
In Case 2, the length of the initial state is 
714.241264669883. The length of the final state is 
648.985552723333 which is the shortest. And the shortest 
touring sequence is C1, C3, C4, C5, C7, C6, C10, C9, C8, C2, and 
then C1. The number of the reduced ss is 30707. 
In Case 3, the length of the initial state is 
1364.62122627742. The length of the final state is 
707.358736585573 which is the shortest. And the shortest 
touring sequence is C1, C5, C10, C7, C8, C9, C6, C2, C4, C3, and 
then C1. The number of the reduced ss is 19092. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
(a) Initial state. 
 
(b) Final state. 
Figure 5. Case 1. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
0 5 100 150 200 250
50
100
150
200 
250
0 
C1
C2 C3 
C4 
C5
C6 
C7 
C8 
C9 
C10 
C1 
C2 C3 
C4 
C5 
C6 
C7 
C8 
C9 
C10 
0 50 100 150 200 250
50 
100 
150 
200
250 
0 
heuristic algorithms are recommended for large number of 
circles. 
VI. CONCLUSION 
This paper presents the problem on computing the shortest 
Euclidean path touring n disjoint circles in a 2D plane. The 
problem has many applications such as layered manufacturing 
of rapid prototyping and the placement of wireless sensor 
networks. The author’s previous work had proposed the base 
algorithm computing a shortest Euclidean path touring a given 
sequenced of circles. In this base problem, the circles are 
toured according to their numbers. This paper relaxes the 
constraint where the touring sequences are not fixed. The 
studied problem is not a purely combinatorial problem. 
Traditional exact method such as B&B algorithm cannot be 
applied in resolving the studied problem. This paper refines 
the B&B algorithm and takes advantage of the author’s base 
algorithm (Odd_Even) to establish an exact algorithm that can 
solved the studied problem in an average time about 4.443( )O n . 
Empirical results have shown the effectiveness of the 
proposed exact algorithm so that can be conducted in 
computer systems. 
The future works can consider some more general problems. 
For instance, in 2D, consider the shortest path touring a given 
number of conics instead of circles only. While the concerned 
circle in this paper becomes ellipse, parabola and hyperbola, 
the applications are essentially broadened. 
 
ACKNOWLEDGMENT 
This work was supported by the National Science Council 
Taiwan, R.O.C, under the grant NSC 99-2221-E-262-019. 
 
 
REFERENCES 
[1]  E.L. Lawler, J.K. Lenstra, A.H.G. Kan Rinnooy, and D.B. Shmoys, The 
Traveling Salesman Problem, Ch2, John Wiley & Sons, 1985. 
[2]  G. Gutin and A.P. Punnen, The Traveling Salesman Problem and Its 
Variation, Ch1, The Netherlands, Dordrecht: Kluwer Academic 
Publishers, 2002. 
[3]  M. Fischetti, J.J. Salazar-González, and P. Toth, “Solving the 
orienteering problem through Branch-and-Cut,” INFORMS Journal on 
Computing, vol. 10(2), pp. 138−148, 1998. 
[4]  H. Hernández-Pérez and J.J. Salazar-González, “Branch and cut 
algorithm for a travelling salesman problem with pickup and delivery,” 
Discrete Applied Mathematics, vol. 145(1), pp. 126−139, 2004. 
[5]  M. Jünger and S. Thienel, “Introduction to ABACUS- A Branch-and-
Cut System,” Operations Research Letters, vol. 22, pp. 83−95, 1998.  
[6]  C. Huang and Y. Tseng, “The coverage problem in a wireless sensor 
network,” In Proceedings of International Workshop on Wireless Sensor 
Networks and Applications, San Diego, California, USA, pp. 115–121, 
2003. 
[7]  B. Wang, W. Wang, V. Srinivasan, and K.C. Chua, “Information 
coverage and its applications in sensor networks,” IEEE 
Communications Letters, vol. 9(11), pp. 967–969, 2005. 
[8]  M. Dror, A. Efrat, A. Lubiw, and J.S.B. Mitchell, “Touring a sequence 
of polygons,” In Proceedings of 35th ACM Symposium on Theory of 
Computing San Diego, California, USA, pp. 473–482, June 9–11, 2003. 
[9]  A. Efrat, S.P. Fekete, P.R. Gaddehosur, J.S.B. Mitchell, V. Polishchuk, 
and J. Suomela, “Improved approximation algorithms for relay 
placement,” In Proceedings of European Symposium on Algorithms, 
Lecture Notes in Computer Science, vol. 5193, pp. 356–367, 2008. 
[10]  V. Polishchuk and J.S.B. Mitchell, “Touring convex polytopes – A conic 
programming solution,” In Proceedings of 17th Canadian Conference on 
Computational Geometry, pp. 290–293, 2005. 
[11]  C.C. Chou, “An efficient algorithm for relay placement in a ring sensor 
networks,” Expert Systems with Applications, vol. 37(7), pp. 4830–4841, 
2010. 
[12]  K. Tang and A. Pang, “Optimal connection of loops in laminated object 
manufacturing,” Computer-Aided Design, vol. 35, pp. 1011–1022, 2003.  
[13]  S.Y. Chou, C.C. Chou, and Y.K. Chen, “A base function for generating 
contour traversal paths in stereolithography apparatus applications,” 
Expert Systems with Applications, vol. 35(1,2), pp. 235−244, 2008. 
[14]  J. Dijksterhuis, “Once Snell breaks down, from geometrical to physical 
optics in the seventeenth century,” Annals of Science, vol. 61, pp. 165–
185, 2004. 
[15]  A. Kwan, J. Dudley, and E. Lantz, “Who really discovered Snell’s law,” 
Physics World, vol. 15(4), pp. 64, 2002. 
[16]  A. Schuster, An Introduction to the Theory of Optics, London: Edward 
Arnold, 1904. 
[17]  C.C. Chou, “A Base Algorithm for Computing the Shortest Path of 
Spheres,” European Journal of Scientific Research, vol. 37(1), pp.110–
133, 2009. 
 
 
 
99 年度專題研究計畫研究成果彙整表 
計畫主持人：周昌筧 計畫編號：99-2221-E-262-019- 
計畫名稱：3D 空間中連接 n個有序球最短路徑之研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 1 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
