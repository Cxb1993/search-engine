1一、 前言
由於電腦科技的蓬勃發展再加上網際網路的成熟，越來越多的多媒體資料透過網際網路散播出
去。因此，要如何有效率的從網際網路上取得我們心目中理想的多媒體資料便成為了一個很重要的
研究課題。在眾多的多媒體資料之中，時序性資料像是音樂、動畫或是視訊資料包含了相當豐富的
資訊內容，因此，要如何對於時序性資料建立索引並提供快速而有效率的查詢處理是兩個很重要的
研究課題。從過去的研究中可以發現，多媒體資料可以用許多不同的特徵資料來表示。對於一些時
序性的多媒體資料而言，其特徵值將會隨著時間產生不同的變化。由於一般使用者對於特徵值的變
化較為敏感，因此，多媒體資料的內涵資訊將可以利用特徵值變化產生的序列來表示。傳統的內涵
式多媒體查詢系統主要是針對記錄在資料庫當中的多媒體資料（例如音樂或視訊資料）分析其內涵
資訊並建立索引，提供使用者查詢之用。
然而，隨著網路傳輸技術的成熟發展，越來越多的各式資料會透過網路隨著時間快速的以串流
（stream）的形式產生或散播出去。由於這些資料產生的特性有別於傳統的持久型資料型態，因此
傳統的資料庫管理技術難以有效的應用於這種新興的資料型態之上。此種新興的資料型態，一般稱
之為串流資料（stream data）。除了網際網路的應用之外，其他像是電話、交通流量與探測器網路
（sensor network），所產生出來的資料型態均可視為串流資料。由於串流資料型態與傳統資料型
態的差異再加上許多新興的應用的支援，使得串流資料管理便成了目前資料管理領域當中十分熱門
的研究課題。
由於串流媒體技術的成熟，有別於傳統多媒體資料庫，越來越多的時序性多媒體資料是以串流
的形式藉由網際網路加以散播。要如何從網路上各個不同的多媒體資料來源快速的過濾與尋找使用
者期望的多媒體資料是一個新興而重要的研究課題。
儘管資料串流逐漸的變成當前資料工程領域當中的重要研究趨勢，國內投入資料串流相關研究
的努力仍屬有限，一些相關的研究散見於多媒體與無線網路的研究範疇之中，這部份的研究主要著
重在串流資料的即時呈現之上，而非資料管理與分析的研究。本計劃之研究目標主要從多屬性序列
資料的近似查詢處理技術的研究，進一步擴展到串流序列資料之分析、索引與查詢處理技術。
二、 背景
串流資料的管理是一門新興的研究課題，目前已開發之資料串流管理系統（DSMS）基本上是
承襲傳統的資料庫管理系統而來，因此其查詢目標仍舊是傳統的表格資料。但由於傳統的DBMS
並未完全的支援時序性資料的查詢，例如在視訊資料（包括視訊影片、監視錄影帶、電腦動畫等）
播放時搜尋是否有滿足使用者心中所期待的視訊內容出現或是在音樂電台頻道播放音樂時搜尋是
否出現某些特定的音樂片段；這些應用都必須要能夠進行序列資料的比對與查詢處理，同時更需要
能夠提供容許些為誤差的近似比對（approximate matching）功能。
在過去的研究之中，針對序列資料庫（sequence database）已經提出許多不同類型的索引方法
以及查詢處理的技術，藉以提供快速而有效率的查詢比對能力。除了找到完全相符的序列片段之
外，另外有些索引方法可以配合相似度衡量的方法（similarity measurement）來找到與查詢相近的
近似答案。然而，過去在序列資料庫查詢的研究多半是著重在靜態資料庫的查詢，只要對於存放在
資料庫中的資料建立索引結構，再配合查詢資料從索引結構之中找到相符的資料即可。在DSMS之
中，由於資料是不斷的流入系統之中，其終止的時間並不確定，甚至沒有終止結束的時候，在這樣
的環境下，如果要利用傳統的索引方式為流入DSMS中的所有序列資料均建立索引結構，不管是儲
存空間或是建立索引的時間都會對DSMS造成相當沉重的負擔；對於使用者的查詢也難以快速的回
3流相同數量的屬性。一般而言，若資料以N種屬性表示，而使用者查詢包含Q種屬性，則Q N；
如此一來，內容篩選的問題便轉換成一個N-屬性序列與多個Q-屬性序列間近似比對的問題了。在
資料串流環境下，多個查詢（Q-屬性序列）會持續地儲存在系統中，並與陸續流入的資料（N-屬
性序列）進行比對，以辨認現階段資料符合哪些查詢；在本計畫中，我們將針對查詢序列建立索引，
並開發一套可快速完成近似比對的方法。
四、 文獻探討
資料串流的管理是目前資料工程領域中一項新興的研究主題，目前國內外有許多DSMS相關的
計畫正在進行，同時也有著相當多的研究成果發表。然而，目前相關的研究多著重於傳統資料庫應
用與資料串流的整合，例如：連續型查詢處理相關之研究[3][6][21][22][26][27]、查詢與資料串流之
監控[25][31]-[34]；這些研究並未深入探討時序性資料例如序列資料或是多媒體資料的處理。然而，
隨著串流應用的普及，有許多的序列資料與多媒體資料都以串流的形式出現。因此，我們必須進一
步研究在資料串流上序列資料查詢處理的技術。
由於序列資料之中包含了大量的資訊，為了要加速查詢處理，可以將序列資料簡化成符號序
列，亦即相近的序列值以相同的符號來代表。因此，傳統的字串比對技術將可以應用於串流序列之
查詢處理上。
而從過去多媒體資料庫的研究當中亦可發現，有許多不同的特徵可以用來表示資料的內涵。以
音樂資料為例，其內涵資訊可藉由和絃（chords）[8][20]，旋律（melody）[9]，節拍（rhythm）[5]，
以及段落（segments）[4]來表示。利用這些特徵，音樂資料的內涵可以表示成紀錄這些特徵值變化
的字串。因此，內涵式音樂擷取的問題可以轉換成傳統字串比對的問題。而對視訊資料而言，它的
內涵資訊可以表示成由視訊物件不同的移動特性[15][16][28]所形成的字串，這些移動特性包括了視
訊物件的移動速度、加速度以及方向。此外，視訊資料的內涵也可以表示成視訊物件彼此之間在空
間與時間上的關聯性，並且將它表示成一個三維字串[19]（three-dimensional string）。因此，內涵
式視訊資料的擷取問題也可以轉換成為一個字串比對的問題。
在過去的研究中已開發出許多不同的字串比對演算法，其中，KMP 演算法[10]與Boyer-Moor
演算法[2]是兩個廣為人知的精確字串比對（exact string matching）演算法。然而，要比對一個查詢
字串，所有儲存在資料庫當中的字串必須要一一的擷取出來與查詢字串作比較，此等比對過程效率
明顯不佳。字尾樹（suffix tree） [23][29]是一個針對部分字串比對問題所提出來的索引結構，資料
庫當中所有字串的字尾（suffix）都會被紀錄在一個樹狀結構之中。要處理一個使用者的查詢只需
要比對樹狀結構中的一條路徑（path）即可，並不需要將資料庫中所有的字串擷取出來比對，因此，
查詢處理的效率也就大幅度的增加。然而，建立字尾樹索引的過程是十分費時的。此外，字尾樹索
引所佔的記憶空間也較龐大。1D-List結構[20]是針對音樂資料建立索引的一個鏈結串列結構。要處
理一個查詢字串，只需要將與查詢字串相關的串列資料擷取出來就可以了，不需要將整個完整的索
引結構載入記憶體之中，因此，記憶空間的需求也相對較少。除此之外，作者也開發了一個有效率
的演算法來進行精確以及近似的字串比對。除了精確字串比對之外，由於多媒體資料的特性，近似
比對也就成為了一個重要的考量。在過去的研究之中，通常以兩個字串之間的編輯距離（editing
distance）作為兩個字串之間的相似程度[1][7][11][24][30]。
然而，在大部分的應用之中，使用者往往會同時考慮多種不同的屬性，因此，要如何針對多屬
性字串來進行比對是一個值得研究的問題，在過去的研究中曾經考慮若干種不同的方式來解決之。
不過，這些方法都是著重在屬性數目較少的情況之下。在[4]中，作者設計了放大字尾樹（augmented
suffix tree）的結構，它是一個字尾樹的結構，主要是將音樂資料當中的持續時間（duration）、音
高（pitch）、以及輪廓（contour）等三種特徵，整合到一個單一的字尾樹之中，藉以提供使用者
針對這三種屬性所下達的查詢。在[13]中，作者提出了成對字尾樹（twin suffix tree）的結構，它將
旋律與節奏這兩種音樂特徵所建立兩棵的字尾樹利用節點之間的一些連結整合在一起，用來處理使
5基於上述流程圖，為了能夠快速地檢驗流經系統的所有資料，我們需要提供有效率的索引結構
與查詢處理機制，得以及時比對使用者查詢與所接收字串之間的相關性。索引結構可將所有查詢濃
縮成一個單一結構，而查詢處理機制方能達成快速比對的目標。本研究項目主要分成以下幾個進行
步驟：
圖一：單一屬性資料串流之內容篩選流程架構
a、 查詢字串索引之建構（Construction of Query String Index）
有別於傳統字串比對問題，資料字串當中只須有部分字串符合使用者查詢即可；我們的查詢字
串必須要被完整的比對。因此，我們將以Trie的結構為所有查詢字串建立索引，若要檢驗某一段資
料字串滿足哪些查詢，只需持續追蹤索引結構中具有相符查詢字串的路徑。
b、 查詢比對（Query Matching）
當接收到一段資料串流後，系統會依其符號到索引中找尋符合的查詢字串。由於資料字串的每
個符號都可能對應到查詢字串的某個起始符號，因此，在比對過程中，系統須持續追蹤所有可能滿
足的查詢字串。如資料字串為abcd時，系統須檢驗查詢字串索引內是否存在abcd、bcd、cd、d等路
徑，因為所有以這些字串為字首（prefix）的查詢，abcd都有可能滿足。
c、 字尾串接（Suffix Links）
由上述過程中我們可以發現，一旦資料字串滿足某一路徑時，它也一定會滿足這條路徑所代表
字串的所有字尾（suffix），例如：滿足abcd也必然滿足bcd、cd、d。因此，為了減少查詢比對時
同時追蹤多條路徑的成本，我們將藉著字尾關係串接每條路徑與其相關字尾所對應的路徑。查詢比
對只需持續追蹤一個節點，其他相關的路徑均可透過字尾串接的方式來取得，藉以避免需同時追蹤
多條路徑的負荷。
d、 查詢串接（Query Links）
然而，在上述的追蹤過程中可能會有一些查詢字串會被遺漏，因為這些查詢字串位於該路徑目
標結點之上層，最直覺的解決方式是在透過字尾串接之後再回溯路徑上所有的節點，並將節點上相
符的查詢回報出來。但這種做法增加了追蹤的時間，因為不管上層節點是否儲存查詢，都必須要重
新回溯一遍。為了避免這樣的情況，我們採用了查詢串接的形式來加速處理。也就是說，在建立字
尾串接的同時，如果所串接的節點指向某個查詢時，便將同時建立一個查詢串接指向該查詢。此時，
當追蹤任何一條路徑時，如果路徑中某個節點擁有查詢串接，則該串接所連接的查詢必須加以回
報，因此，只要路徑中的一段子字串滿足查詢時，必然可以透過查詢串接得到，並加以回報，因此
可以避免掉必須要經常回溯的問題，並加快查詢比對的速度。
7圖三：多屬性串流查詢索引建立流程
b、 多屬性字串之查詢比對（Query Matching for Multi-attributed Strings）
多屬性字串比對與單一屬性字串比對最大的差異在於符號相配（match）的定義。在單一屬性
字串比對的問題之中，只有在兩個符號完全相同的情況之下才稱為相配；然而在多屬性字串比對的
問題之上，由於查詢之中所包含的屬性數目可能會小於資料當中的屬性數目，因此，我們必須要重
新定義符號的相配。我們將依據多媒體資料特性定義「符號包含」（symbol containment）關係，
作為符號相配的依據。假設資料字串中包含了N種屬性，而查詢字串中包含了Q種屬性，若一個Q-
屬性符號包含於一個N-屬性符號，則N-屬性符號對應的Q -屬性值會和Q-屬性符號對應的屬性值完
全相同；此時，我們稱這個Q-屬性符號和N-屬性符號相配。換言之，假如資料字串中對應於查詢
字串Q種屬性其值相符的話，這段資料字串即視為符合該查詢。基於這個定義，我們只需要修改單
一屬性字串的查詢比對方法，利用新的符號相配定義來從單一屬性索引結構之中找到相符的查詢，
進而再加以整合確認即可找到真正相符的Q-屬性序列查詢。其執行步驟如圖四所示。
圖四：多屬性串流查詢處理流程
c、 路徑壓縮（Path Compression）
由於在上述的符號相配定義之下，一個多屬性符號會對應到多個單一屬性符號，因此，在比對
的過程當中要同時追蹤多個符號與路徑。在前一研究項目之中，我們利用路徑結合的方式來將具有
相同字首與字尾的路徑相連，進而減少路徑的數目。再配合字尾串接與查詢串接可以只追蹤單一路
徑即可找到所有相符的查詢。然而，在一個多屬性符號會對應到多個單一屬性符號的情形之下，每
一個符號進來系統時可能會對應到查詢索引中的多個符號，因此還是會產生必須要同時追蹤多條路
徑的問題。為了進一步加速查詢比對的速度，我們開發一演算法來將路徑中所有的共通部分
9Databases,”IEEE 8th International Workshop on Research Issues in Data Engineering, pp.139-146,
1998.
[6] J. Chen, D.J. DeWit, F. Tian, and Y. Wang, “NiagaraCQ: A Scalable Continuous Query System for 
Internet Databases,” ACM SIGMOD Conference, pp. 379-390, 2000.
[7] T.H. Corman, C.E. Leiseson, and R.L. Rivest, Introduction to Algorithms, The MIT Press:
McGraw-Hill, 1993.
[8] T.C. Chou, A.L.P. Chen and C.C. Liu, “Music Databases: Indexing Techniques and 
Implementation,”IEEE Intl. Workshop on Multimedia Data Base Management Systems, 1996.
[9] A. Ghias, J. Logan, D. Ghamberlin and B. C. Smith, “Query by humming: Musical information
retrieval in an audio databases,”in Proc. ACM Multimedia, pp.231-236, 1995.
[10] H.V. Jagadish, N. Koudas, and D. Srivastava, “On Efective Multi-dimensional Indexing for
Strings,” ACM SIGMOD Conference, pp. 403-414, 2000.
[11] T. Kahveci and A. Singh, “Eficient Index Structures for String Databases,” VLDB Conference, 
2001.
[12] T. Kahveci, A. Singh, and A. Gurel, “Similarity Searching for Multi-atribute Sequences,” 
International Conference on Scientific and Statistical Database Management, pp. 175-184, 2002
[13] W. Lee and A.L.P. Chen, “Eficient Multi-Feature Index Structures for Music Data Retrieval,” SPIE 
Conference on Storage and Retrieval for Media Databases, pp. 177-188, 2000.
[14] S.L. Lee, S.J. Chun, D.H. Kim, J.H. Lee, et al., “Similarity Search for Multidimensional Data 
Sequences,” IEEE Conference on Data Engineering, pp. 599-608, 2000.
[15] C.H. Lin and A.L.P. Chen, “Motion Event Derivation and Query Language for Video Databases,”
Storage and Retrieval for Media Databases 2001, Proc. SPIE Vol. 4315, pp. 208-218, 2001.
[16] C.H. Lin and A.L.P. Chen,“Processing Concept Queries with Object Motions in Video Databases,”
IEEE International Conference on Image Processing, 2001.
[17] C.H. Lin and A.L.P. Chen, “Indexing and Matching Multiple-Attribute Strings for Efficient
Multimedia Query Processing,”IEEE Transactions on Multimedia, 2005. (accepted)
[18] C.H. Lin and A.L.P. Chen, "Approximate Video Search Based on Spatio-Temporal Information of
Video Objects," The First IEEE International Workshop on Multimedia Databases and Data
Management 2006.
[19] C.C. Liu and A.L.P. Chen, “3D-List: A Data Structure for Efficient Video Query Processing,” IEEE 
Transactions on Knowledge and Data Engineering, Vol. 14, No. 1, pp. 106-122, 2002.
[20] C.C. Liu, J.L. Hsu and A.L.P. Chen, “An Approximate String Matching Algorithm for 
Content-Based Music Data Retrieval,” IEEE Conference on Multimedia Computing and Systems, pp. 
105-112, 1999.
[21] S. Madden and M.J. Franklin, “Fjording the Stream: An Architecture for Queries Over Streaming
Sensor Data,” IEEE Conference on Data Engineering, 2002. 
[22] S. Madden, M. Shah, J. Helstein, and V. Raman. “Continuously Adaptive Continuous Queries Over 
Streams,” ACM SIGMOD Conference, pp. 49-60, 2002.
[23] E. McCreight, “A Space-Economical Sufix Tree Construction Algorithm,” Journal of Association 
for Computing Machinery, pp. 262-272, 1976.
[24] G. Navaro, “A Guided Tour to Approximate String Matching,” ACM Computing Surveys, Vol. 33, 
No. 1, pp. 31–88, March 2001.
[25] S. Qin, S. Gu, and A. Zhou, “Detecting Bursts in Data Streams,” International APWeb Conference, 
2005.
