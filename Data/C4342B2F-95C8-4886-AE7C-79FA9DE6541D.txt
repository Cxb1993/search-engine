 2
challenge to satisfy both of deadline and 
value. Highest Reward and Urgency 
(HRU) scheduler considers these two 
factors and make the appropriate 
combination [7]. We can adjust the 
weight ratio according to different 
system loads. With the rapid 
development of Internet, Flexible High 
Reward (FHR) for a distributed 
environment is proposed to reduce the 
unnecessary waiting time due to 
communication delay for a remote 
transaction [8].  
Nowadays, numerous researchers have 
studied the topic of transaction 
scheduling in real-time databases 
systems. In spite of that, concurrency 
control factor (CC factor) is not 
considered in these researches and lead 
to poor system performance, especially 
repetitively executed transactions. In 
other words, these transactions always 
missed deadline at each executing 
process. Furthermore, most transactions 
in real-time database systems are routine 
and executed repeatedly but not 
necessarily periodically [9]. Hence, the 
fairness principle designed by CC factor 
is indicated clearly to avoid starvation 
occurrences. It considers the following 
facts: (1) repetitively missed 
transactions should be assigned higher 
priority; (2) transactions with larger 
access cost will get higher priority. More 
specifically, there may be an opportunity 
for such transactions to meet their 
deadlines. In this paper, an improved 
priority assignment policy called 
Flexible High Reward with CC factor 
(FHR-CF) is proposed to reduce the 
MissRatio and lessen the unnecessary 
restarting for repetitively executing 
transactions. Simulation results 
demonstrate that the FHR-CF 
outperforms current priority assignment 
policies such as ED, HV and HRU. 
三、優先權指定策略 
Priority assignment policies for 
distributed real-time database systems 
are developed on the basis of real-time 
constraints, such as ED, HV and HRU. 
Generally, such systems will execute the 
transaction with the highest execution 
priority assigned to it, based on a 
particular formula. We briefly describe 
the following transaction scheduling 
policy and the notations used are listed 
below. 
Ti a transaction in the system 
Crt(Ti) remaining communication 
delay of transaction Ti 
Ert(Ti) remaining execution time of 
transaction Ti 
F(Ti) the failure ratio of executing 
transaction Ti 
Lrt(Ti) remaining locking time of 
access item for transaction Ti 
P(Ti) priority of transaction Ti 
S(Ti) slack time of transaction Ti 
V(Ti) value of transaction Ti 
W Weight of adjusted 
transaction’s value and 
urgency 
3.1. ED 策略 
ED assigns high priorities to 
transactions with early deadlines [5]. All 
transactions have the same deadline. The 
priority assignment formula is given by  
i
i
1P(T )  
D(T )
←             
3.2. HV 策略 
The disadvantage of ED is that it does 
not consider the values of transactions. 
Assigning high priorities to transactions 
with high values is called HV [6]. The 
priority assignment formula is given by  
P(Ti) ← V(Ti)              
3.3. HRU 策略 
In contrast to ED, HV focuses on 
completing transactions with high values. 
However, a transaction’s urgency is not 
considered. To eliminate the 
disadvantage, HRU considers both the 
deadline and value as design factors. It 
gives a high priority to a transaction 
with high value and shortest remaining 
 4
Table 1. Workload parameters and base values 
Parameter Description Value 
sites number of sites  4 
db_size number of pages in database 1200 pages 
cache_size number of pages in cache memory 400 pages 
tran_size average pages accessed /transactions 16 pages 
page_cpu average CPU time for accessing a data page 0.03 ms 
page_io average disk time for accessing a data page 4.8 ms 
write_prob write probability for accessed page 0.5 
arrival_rate the rate of transaction arrivals 8 
restart_delay time delay to restart a transaction 5 ms 
weight_factor weight between value and time urgency 1 
mean_value mean value of transactions 100 
lookup_cost processing cost of locating a data item 5 ms 
remote_trans the ratio of remote transactions in the system 0.2 
commit_time commit time for completing a decision phase 40ms 
transfer_rate transfer rate of the network 100Mbps 
comm_delay communication delay between any two sites dynamic 
 
represents the delay time caused by 
restarting the transaction. The parameter 
weight_factor is used to adjust the 
weight between the value and timelines 
of a transaction. 
4.1 效能矩陣 
The main performance metrics are the 
MissRatio and LossRatio as given in 
[7-8, 12] and are restated below: 
number of transactions missing the deadline = *100%
total number of submitted transactions
MissRatio
totally offered value - totally final-obtained value = *100%
totally offered value
LossRatio
 
Where the offered value refers to the 
value given by the application when a 
transaction is submitted and the 
final-obtained value indicates the net 
value after the transaction has completed. 
We compared the priority assignment 
policies of the ED, HV, HRU, and 
FHR-CP under various conditions, and 
also investigated the variety of 
WastedRatio, which measures the 
spending time on executing the aborted 
transactions or servers their request of 
the disk access [9]. The formula 
definition of WastedRatio is presented as 
the follows: 
totally spending time for each aborted transaction= *100%
total usage time
WastedRatio
 
For the concurrency control protocol we 
used two-phase locking with high 
priority [12] because it is a simple and 
effective protocol for most types of 
real-time database research. 
4.2 基本模組實驗 
In this experiment, we varied the arrival 
rate from 20 real-time 
transactions/second (abbreviated as 
real-time trans/sec) to 100 real-time 
trans/sec in increasing steps of 20 in 
order to model different system loads. 
As shown in Figs. 1 and 2, the 
performance order based on the 
MissRatio and LossRatio metrics is 
FHR-CF > HRU > HV > ED (i.e., the 
FHR-CF performs the best and the ED 
performs the worst). The excellent 
performance of the FHR-CF is due to its 
adjustment policy of fairness principle to 
repetitively missed transactions. These 
transactions can get higher priorities 
based on higher frequent of missing 
their deadlines or larger cost of disk 
access. That is, more real-time 
transactions can be executed completely 
and responsible for the better system 
performance. The effective fairness prin-
