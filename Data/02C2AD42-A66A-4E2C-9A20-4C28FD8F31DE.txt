  
Abstract 
This project provides an intelligent system, a fuzzy-genetic algorithm (FGA) with local search, 
for multiple sequences alignment. The general multiple sequence alignment, known as NP-hard 
problem, refers to search for maximal similarity in three or more sequences. The proposed algorithm 
is to enhance the performance of genetic algorithm by incorporating local search and fuzzy set theory 
for multiple sequence alignment. In the proposed algorithm, genetic algorithms perform a multiple 
directional search by maintaining a set of solutions. Local search operators are performed to explore 
the neighborhood in an attempt to enhance the fitness of the solution in a local manner. Moreover, 
fuzzy set theory is designed to dynamically adjust the probability of crossover, mutation and local 
search during evolutionary process. Results from our experiments indicate that our approach can 
obtain good performance in the majority of data sets with both low similarity and high diversity. 
Keywords: Hybrid System, Multiple Sequence Alignment, Genetic Algorithm, Local Search, Fuzzy 
Logic. 
 
 
 
中文摘要 
 
本計劃提供模糊遺傳算法的(FGA)的混合式系統來協助分子生物學家去搜尋與分析多重序列
排比資料，多重序列排比問題乃是NP-complete 類型問題，此類型問題不易求得最佳的解。在
這個計劃中,我們提出一個「智慧型混合式演算法於多重序列排比之應用」。基本上,我們所提
出的演算法是在基因演算法和模糊數學中加入區域搜尋(local search)的方法來提升基因演算法
的性能。在這個計劃中，基因演算法可提供多方向搜尋最佳解的方法。而模糊數學被用於在演
化的過程期間可提供動態調整參數，區域搜尋方法可在可行解的鄰近地區找到更好的解。由實
驗的結果可證明本計劃能獲得較好的性能。 
關鍵字 : 混合式系統, 多重序列排比, 基因演算法, 區域搜尋法, 模糊數學 
 
1 Introduction 
Biological sequences are aligned with each other vertically in order to show the similarities and 
differences among these sequences [1]. The information of similarity/difference can then be used to 
predict the secondary or tertiary structure of new sequences or to discover the relationship among 
closely related protein or DNA sequences. There exist various surveys on algorithms for the multiple 
sequence alignment [2-6]. This approach has the great advantages of speed and simplicity. On the 
other hand, the main disadvantage is the local minima problem. It means that if mistakes are made in 
intermediate alignments, those mistakes cannot be corrected later as more sequences are added into the 
alignment process. Another approach is to use an extension of dynamic programming for 
simultaneously aligning multiple sequences. In general, these algorithms often have higher quality 
solutions than those of progressive approach. However, they have drawbacks of complexity in running 
time and in memory requirements. Thus, they can only be applied to problems with limited number of 
sequences. There are also iterative, stochastic approaches for multiple sequence alignment. Isokawa et 
al. [3] applied a simple GA with bit matrices to the MSA problem. Notredame et al. [4] also used GA 
to solve the problem and provided an associated software package called SAGA. They also used a 
3 The Proposed Algorithm 
 The diagram of the proposed algorithm is shown in Figure 1. The initial parent alignment 
matrices are first generated completely and then these alignment matrices are optimized using our 
proposed algorithm. Crossover operators and mutation operators are used to produce variations among 
the parent alignment in order to generate offspring alignments. Crossover operators allow two 
alignments to exchange their information with each other. Mutation operators provide possible 
variation on the alignments. After offspring alignments are generated via mutation and crossover 
operators, the original parent alignments and all offspring alignments are put into a selection pool. A 
selection scheme usually based on the fitness values is then employed to determine which alignments 
are suitable to survive in the next generation and which alignments are culled from the selection pool. 
Thereafter, P2 = [P/5] ([x] represents the smallest integer greater than or equal to x) alignments are 
randomly selected from the population to perform local search. After local search, these alignments 
with better fitness values replace the original alignments. In each generation, the procedure of our 
algorithm is to apply crossover, mutation, fitness evaluation, selection, and then local search. Finally, 
fuzzy set theory is used to adjust the probability of crossover, mutation and local search. In the 
proposed algorithm, these above procedures are iterated until a pre-specified termination criterion is 
satisfied. We will discuss these procedures latter. 
3.1 Representation 
Consider k sequences to be aligned. These k sequences are generally of different lengths, say, 
from l1 to lk. In our approach, a candidate alignment or parent alignment in the MSA problem is 
represented as an array of the sequences or simply a matrix, where each sequence is encoded as an 
array of characters in the considered alphabet set. The maximum number of columns in the matrix is 
limited to , where  and maxw lα= ×⎡⎢ ⎤⎥ lmax 1 2max{ , ,..., }kl l l= x⎡ ⎤⎢ ⎥  is the smallest integer grater than or equal to 
, and the parameter x α  is a scaling factor. In our study, each matrix candidate may have different 
number of columns, and the value α =1.2 is chosen independent for each candidate according to the 
probability distribution N(1.3,0.2), where 2( , )N µ σ  denotes a Gaussian distribution with its mean µ  and 
variance 2σ . 
3.2 Selection Operator and Terminations 
In this project, tournament selection is implemented for selection operator. This selection scheme 
is to determine which alignments in the selection pool are to become parents for the next generation in 
the algorithm. In the selection process, each alignment is compared with 10 opponents that are 
randomly selected from the selection pool. For each comparison in which the fitness of the alignment 
is equal to or higher than that of the opponent, the alignment receive a win. The P alignments with the 
highest number of wins are selected to be the parent alignments for the next generation. 
The termination conditions are as follows: (1) The number of generations exceeds the maximum 
number of generations (Gmax) permitted. (2) The best fitness does not improve over a given number of 
generations. When the termination conditions are satisfied, the resultant alignment matrix is obtained. 
It is easy to transform the obtained alignment matrix into the form of actual alignment through 
eliminating all full space columns in the resultant alignment matrix. 
3.3 Genetic Operators and Local Search 
Crossover operators are responsible for exchanging information of the parent alignments to 
produce offspring alignments. In this project, crossover operators include four operators, namely, 
SinglePointSexualReproduction operator, MatchColumnSexualReproduction operator, 
operator, and Un  operator. Mutation operators perform RecombineMatchColumns iformExchangeBlock
[4] C. Notredame and D. G. Higgins, “SAGA: sequence alignment by genetic algorithm”, Nucleic 
Acids Research, vol. 24, no. 8, pp. 1515-1524, 1996. 
[5] C. Notredame, E. A. O’Brien, and D. G. Higgins, “Raga: Rna sequence alignment by genetic 
algorithm”, Nucleic Acids Research, vol. 25, no. 22, pp. 4570-4580, 1997. 
[6] C. Zhang and A. K. C. Wong, “A genetic algorithm for multiple molecular sequence alignment”, 
Computer Applications in the Biosciences, vol. 13, no. 6, pp. 565-581, 1997. 
[7] D. E. Goldberg, Genetic Algorithm in Search, Optimization, and Machine Learning, Addision-
Wesley, New York, 1989. 
[8]   L. A. Zadeh,  Fuzzy sets, Inf. Comt.,  vol. 8, pp.338-353, 1965. 
[9] J. D. Thompson, D. G. Higgins, and T. J. Gibson, “CLUSTAL W: improving the sensitivity of 
progressive multiple sequence alignment through sequence weighting, position-specific gap 
penalties and weight matrix choice”, Nucleic Acids Research, vol. 22, pp. 4673-4680, 1994. 
[10]  D. F. Feng and R. F. Doolittle, Progressive sequence alignment as a prerequisite to correct 
phylogenetic trees, Journal of Molecular Evolution, vol. 25, pp. 351-360, 1987. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Fig. 1: The diagram of the proposed algorithm.  
M M M M L M
M H L L M M
H ----- H H H H 
L L H M H M
L M M M M L 
L H L L L L 
------ L H H M H 
------ H L L L L 
L ---- LOW, M ---- MEDIUM, H ---- HIGH 
 
Table 2: List of DataSet. 
 
ID Number of 
sequences 
Mean sequence length 
(min , max) 
Similarity 
COG2178 3 211 (196 , 222) 0.1760 
COG2157 4 72 (57 , 78) 0.1500 
COG1476 5 71 (66 , 79) 0.2588 
COG2097 6 96 (81 , 113) 0.1043 
COG1510 6 170 (152 , 158) 0.0213 
COG0219 9 158 (151 , 166) 0.1404 
 
 
Table 3: The simulation results. The Bold-faced text indicates the best score among these algorithms. 
 
Our result ClustalW result Central-star resultID 
Score M.C. Score M.C. Score. M.C. 
COG2178 653 44 384 41 362 50 
COG2157 608 18 499 12 438 13 
COG1476 1668 21 1657 22 1620 22 
COG2097 1993 12 1781 12 1421 13 
COG1510 2156 6 1650 4 395 4 
COG0219 10358 25 9734 24 7445 27 
 
 
