 2
 
計畫摘要： 
 
網際網路多媒體傳輸一直是網際網路所要達到的一個重要目標，而語音的傳輸可說是比較成熟的
一項網際網路應用，近年來，VoIP 已然成為網際網路的一個非常重要的應用，我們在本計畫主要是利
用自由軟體整合設計實作出伺服器端與使用者端之網際網路多媒體傳輸應用，計畫內容分成兩個部
分：首先我們將利用自由軟體設計並實作一個 SIP (Session Initiation Protocol)為通訊協定的網路多媒體
伺服器(Multimedia Communication Server，MCS)，提供以語音應用為主的功能，並且整合部分之影像
方面的相關應用，另一方面，我們也將延續我們過去計劃所自行開發之嵌入式 VoIP 主機板，使用
embedded Linux 系統，開發使用者端語音為主之 CPE (Customer Premises Equipment)，以提供一個先進
且可靠之 peer-to-peer 多媒體影像及語音整合系統，讓使用者透過 CPE，使影像及語音得以透過 IP 網
路互相連接，藉由 Voice/Video over IP 技術之「連接容易」與「多元化之應用方式」等特性，讓使用
者可以獲得傳統語音所無法提供之新的影像及語音應用服務。 
 
網際網路多媒體應用，最重要的議題在於 QoS 的管控，計畫中我們在伺服器端，與使用者端都將
對於 QoS 參數如：delay、delay jitter、以及 packet loss 等因素加以管控，研究語音品質與 QoS 參數之
關聯性，利用本校校園骨幹網路平臺交換器 Extreme8810、X450 與主要路由器 Juniper T640、M160 等，
做為測試平臺，觀察語音 real time RTP 封包之傳輸行為表現。另外，也將觀察研究語音在本校 IEEE 
802.11 (WiFi)與 WiMAX 無線區域網路的傳輸行為，比較固定有線網路與無線網路上的語音品質的差異
性。無線網路使用越來越普遍，許多 VoIP 在有線網路中不曾發生過的問題也跟著接踵而至。其中一個
較為嚴重的問題是由終端使用者的移動特性所導致的，它會使得網路資料的傳輸方式不同於以往。對
於這個問題，有一個目前被普遍使用的解決方案－ Mobile IP，但是 Mobile IP 本身卻也存在了會造成
長時間傳輸延遲的困擾。這項困擾起因於進行漫遊的節點必須要在完成所有的註冊機制後才能夠再繼
續進行資料的接收，如此一來，便使得完成這一段註冊機制所需要花費的時間成為了資料傳輸上的瓶
頸。在這計畫中，我們將探討在 peer-to-peer 的網路服務模式下的 VoIP 的服務品質相關議題，我們預
計提出一個連結層換手（link layer handoff）方法，這個設計能夠幫助資料在 Mobile IP 的註冊機制被完
成之前，資料就能夠被持續傳遞，而順利地送達目的地，且所欲提出的方法是完全獨立於網路層
（network layer）的，因此不論所使用的是 Mobile IPv4 或是 Mobile IPv6，我們所提出的方法都能夠正
常運作，並且不需要修改到現存的 Mobile IP 規格。此外在本計畫中我們也將探討 admission control、
channel assignment、及 scheduling 等問題以保證 VoIP 的語音品質。 
 4
 
SIP係服務導向的協定，由國際Internet Engineering Task Force (IETF)協會定義， 此SIP的標準
規格定案於1999年2月2日，並且公佈為RFC 2543標準文件(增修版為RFC 3261)。SIP 通信協定是
文字為基準的協定，類似超連結語言(Hypertext Transfer Protocol - HTTP)，可以啟動即時，多媒
體通信整合語音數據影像為一體。 
 
SIP文字式的結構特性，比目前其他的多媒體通信協定更增加其運用之彈性及擴充性。使用
SIP協定，一些個人化，多媒體化的服務均能於任何時間，傳送到任何地點。這些含有SIP-enabled
的服務不但提高生產力，增強了移動可攜性，更增強了通信的互動性。 
 
本計畫中的MCS SIP伺服器系統的設計是專為位於IP 網路上的終端用戶能有效的利用IP通
訊協定達到通訊的目的。MCS的用戶可以直接與其他位於IP網路上的用戶溝通。此外，我們使用
網域(Domain)的觀念來進行用戶管理，再加上動態IP位址指定方式，如DHCP (Dynamic Host 
Configuration Protocol)，能使SIP伺服器的使用者不再被侷限於某個特定的地理位置。同時，我們
將設計支援多種語音閘道器來界接IP及現有的公眾電話網路，讓IP終端用戶可以與傳統PSTN用戶
通信。MCS功能上將包含： 
 加密的即時訊息(Secure instant messaging) 
 經由多媒體伺服器可支援網路會議電話(Audio conferencing) 
 整合的郵件系統，以整合語音留言與電子郵件(Unified messaging voice to email) 
 
網際網路語音方面的功能(Internet Voice Facilities)： 
 緊急服務繞徑路由(Emergency services routing) 
 公眾電話閘道器位置(PSTN Gateway location) 
 來話方姓名電話號碼圖像傳送(Calling Party Name / Number / Picture Delivery) 
 撥號區隔(Enhanced call screening) 
 會議電話(Audio conferencing (需配合會議伺服器conference server required)) 
 來話身分(含名字, 號碼及主旨)(Calling Line ID (w/Name，Number & Subject)) 
 來話等待(Call Waiting (with CLID))、Call Forward、Call Transfer、Call Hold、Call Mute 
 來話轉向/拒絕(Call redirect / reject) 
 語音信箱整合(MWI (with voicemail integration)) 
 來話紀錄、來電歷史紀錄、點撥呼叫(Call logging / call history / click-to-call) 
 
影像方面的功能(Video)： 
 影像呼叫(Desktop Video calling) 
 
SIP用戶間的多媒體功能(Multimedia between SIP clients)： 
 上線提醒/同意(Presence notification / subscription) 
 自動上線偵測-動態偵知離線或電話中(Automatic presence detection – dynamic detection of 
`inactive’ and `on the phone’ user states) 
 即時訊息(Instant messaging) 
 網路電話簿(Network based directories) 
 6
中，必須在有線網路上設置 HA（Home Agent）以及 FA（Foreign Agent），這些 MA（Mobile Agent）
會週期性地在無線區域網路中廣播 Mobile IP advertisement 的封包。當無線節點由一個子網路
（subnet）遷徙到另一個子網路的時候，它就會接收到由目前相對應的 FA 所發送出的 Mobile IP 
advertisement 封包。在經過一些驗證之後，會有一條 IP-over-IP 的通道（tunnel）被建立，從此之
後，無線節點與伺服器之間所交換的資料封包就全部透過這條雙向的通道來傳輸。如果無線節點
再一次遷徙到了一個新的外部子網路，那麼它就必須要與在新的外部子網路中的 FA 建立關連性，
並且解除與之前的 FA 所建立的關連性。這些動作是每當無線節點進入到一個新的無線子網路時都
必須執行的。而這整個當無線節點在鄰近的無線子網路間遊走時的 MA 間的切換過程就稱之為
Mobile IP 換手(handoff)。 
 
在 Mobile IP 換手完成之前，要發送給無線節點的封包將無法被順利接收，事實上，無線節點
就像與有線網路中斷了連線一樣。這段換手延遲將會造成通訊品質下降，尤其是對需要及時性的
應用（例如：影像、聲音）的網路影音電話而言，影響將會更大。移動越快速的連線將會導致越
多的封包在換手期間遺失。此外，如果在資料傳輸時所使用的是 TCP 通訊協定，那麼就可能因為
TCP 的重傳機制而導致漫遊的無線節點的傳輸效能降低。因此，縮短換手延遲就成為了一項緊要
的議題。 
 
在這個研究計畫當中，我們 MCS 提供具行動性之使用者服務，所以需要發展一個嶄新的連結
層(link layer)換手方法，這個設計能夠幫助資料在 Mobile IP 的註冊機制被完成之前就順利地送達
目的地，並且不需要修改到現存的 Mobile IP 規格。因為所提出的方法是基於連結層的關係，所以
不論在網路層所使用的是 Mobile IPv4 或是 Mobile IPv6，我們所提出的方法都能夠順利運行。且
根據我們的過去的研究結果指出，這類的方法在同類型網路下具有最佳的效果。 
 8
 Power Supply：+1.8V and +3.3V 
 
 
圖 2-1 系統發展板 
VINETIC-2CPE 
 VINETIC 為一 DSP 晶片，專門用來處理數位語音資料和數位類比電話訊號，具有 comport noise 
generation、語音編碼解碼、Analog line module 訊號處理、Voice avoidance detection、Line echo 
cancellation、DTMF(Dual Tone Multi Frequency) Detection、Ringing、Tone Playing、Caller-ID Generation
等功能。由於 VINETIC 的 Firmware 在邏輯上分成 Coder Module、Analog Line Module、Signal Module，
各形成 Data Channel 和 Phone Channel，其意義在於 Data Channel 是與 Host Interface(CPU)連接而 Phone 
Channel 則是連接外接話機。如圖 2-2，網路訊息由 Host Interface(CPU-AMD5120)接收，透過 Coder 
Module 解碼後轉為類比訊號後送至 Analog Module 輸出到話筒上，反過來話筒上的訊息會透過 Analog 
Module 轉為語音訊號，CPU 會經由 VINETIC driver 提供的 read/write 介面控制 Coder Module 包裝成封
包，再傳送出去。 
 
 
圖 2-2 VINETIC DSP 架構 
FLASH-RAM 
 為此系統之儲存裝置，所有完整的程式以及作業系統的 Image 會放在 FLASH-RAM 中，當 gateway
 10
 
 
圖 2-3 VoIP Gateway 軟體架構圖 
 
WEB：為一支嵌入式的 WEB 伺服器程式，能讓使用者透過網頁介面對整個系統做設定，例如：選擇
網路連線方式、設定網路電話號碼、選定 Codec、查詢當月費用、開啟其他附加功能等，如圖 2-5、2-6。 
 
圖 2-4 Network Configuration 
 12
2. 讀取設定檔並依照內容選取網路連線方式、Codec、使用者帳號密碼等相關設定。 
3. 對使用者設定的註冊伺服器進行註冊。 
4. 執行 SIP Event Thread，負責接收及回應 SIP 訊息、FXS Event thread-偵測話機狀態並控制 LED
燈號、SIP Registration thread-持續更新使用者的帳號及位址，這樣註冊伺服器才會知道使用者
在線上。 
 
圖 2-7 SIP 運作圖 
 
SIP UA 軟體運作流程 
 
圖 2-8 SIP 軟體運作流程 
 14
III. 研究與實作 
伺服器端： 
OpenSIPS 介紹 
OpenSIPS[12]是承接 OpenSER 計畫的一個新名字。在 2005 年，Voice 系統宣稱他們創造了
OpenSER，這是為了 SER 計畫所欠缺的穩定發展和貢獻而誕生的計劃。而在 2008 年，此計畫正式更
名為 OpenSIPS。OpenSIPS 可以安裝在 Linux、FreeBSD、Solaris 等 OS 下。 
OpenSIPS 是用 C 語言去寫成的一個 project，可以處理各種 SIP 訊息，而處理的依據和流程則是
會視 OpenSIPS 設定檔(opensips.cfg)來做決定。Opensips.cfg 雖然是個文字檔，用一般的編輯軟體就可
以作編輯和修改，但其實是個 lex 與 yacc 的輸入格式，在 OpenSIPS 的 source code 裡面可以找到 lex
與 yacc 的 source code，所以 opensips.cfg 算是個由大量 token 所組成的一個文字檔，就像在寫 compiler
一樣，定義 token 的感覺。Opensips.cfg 裡面所定義的 token 都必需符合本身所提供的規則才可被辨識。
只要瞭解 OpenSIPS 所撰寫的 module 規則，便可以寫一個新的 module，並且 OpenSIPS 會動態載入所
撰寫的 module。因此，在 opensips.cfg 上面決定想要載入的 module，這包含 module 的功能，甚至是自
己撰寫的 module。一般照著 source 的 INSTALL 說明檔安裝 OpenSIPS 的話，基本上會安裝在
/usr/local/etc/opensips 下，可以在此目錄夾下發現 opensips.cfg。以安裝 opensips-1.5.1-tls 這版本來說，
在/usr/local/etc/opensips 下我們可以發現 opensips.cfg 和 opensipsctlrc 這兩個主要設定檔。 
 
A. opensips.cfg 
設定 Global 的參數 
 在 opensip.cfg 裡可以設定 OpenSIPS 執行的模式和環境參數，例如 debug level、alias。De-bug level
是在發展系統時很重要的選項，將 level 調高，能看到處理的過程或是錯誤訊息越多。Alias 也是個很
重要的選項，在 routing 裡面，判斷 uri==myself 時，便會根據 alias 的值帶入去判斷，這對於伺服器的
壓力分散很重要。 
載入模組 
這邊決定載入哪些 module，值得注意的是，會有相依性的問題，也就是說 module 必須有順序地
載入。假如要載入 auth.so 和 authdb.so 這兩個 modules 之前，必需先將 mysql.so module 先載入，也就
是 mysql.so 要放在 auth.so 和 authdb.so 的位置之上。只要打 loadmodule “/路徑/名稱”便可以載入。在
OpenSIPS 中，有提供一個 Global 參數名為“mpath”，用來定義 module 的存放路徑，要載入時，只需
打 loadmodule“名稱”就可以載入了。OpenSIPS 提供了很多 module 可以使用，要實作認證、授權、計
費，就必需用到 auth_radius 和 acc。要提供其他服務，就載入提供此服務的 module，比如儲存使用者
的位址，就載入 usrloc。 
 
設定模組參數 
 16
 
圖 3-1 RADIUS rule 
其定義了在 NAS (Network Access Server, 網路存取伺服器) 和集中存放認證信息的 RADIUS 伺服
器之間傳輸認證、授權和配置信息的協議。其協議的標準最新的定義在 RFC 2865[13]和 2866[14]中。
主要特徵有： 
 用戶端/伺服器端 模式 
一個NAS作為RADIUS伺服器的用戶端，負責將外部訊息傳入RADIUS 伺服器，然後按照RADIUS 伺
服器不同的回應來採取相應動作。另外，RADIUS 伺服器還可以充當別台的 RADIUS 伺服器或者其他
種類認證伺服器的代理伺服器。在本論文中，SIP 伺服器即為一個 NAS。 
 網絡安全性 
用戶端和 RADIUS 伺服器之間的訊息經由絕不會透過網路傳送的資料共用密碼(Secret Key)來驗
證。為確保傳輸的安全性，在用戶端和伺服器端之間傳送的數據均以 MD5 方式加密。 
 認證機制 
RADIUS 支持多種認證機制，可以驗證來自 PAP、CHAP、EAP 和 UNIX 系統上用戶端訊息的有效性。 
 協定可擴展性 
所有的認證協定都是基於“屬性-長度-屬性值＂而組成的。所以協定可以加入新的屬性質。 
NAS 一旦收到訊息，就發送一個“Access-Request＂的請求訊息給 RADIUS 伺服器，其中就包含了
Username、Password（MD5 加密）、NAS 的 IP 和用戶端登入的 Port，如表 4-1。 
Type Length 
USERNAME ≧3 
PASSWORD 6 
IP-ADDRESS 6(NAS 地址) 
NAS-PORT 6(登入 PORT)
PORT-TYPE 6 
STATE ≧3 
CALLING-STATION-ID ≧3(撥打者) 
CALLED-STATION-ID ≧3(受話者) 
ACCT-SESSION-ID ≧3 
 18
RADIUS 伺服器 
RADIUS 伺服器主要設定部分為讓指定的用戶可登入伺服器並且阻擋其他不合法的用戶，還有給
定認證以及授權的協定。可登入的用戶都是寫在”clients.conf”這個設定檔，可以根據下面的格式加入新
的一筆，在黃色的部分分別填入”client IP”、”secret key”、”client hostname”。如果用戶端沒有 hostname
也可填入其 IP 位址。 
 
對於認證的協定，SIP 提供一種應用層的認證方法 Digest Authentication 來處理伺服器端與用戶端
的認證。Digest Authentication 是一種挑戰式的認證法，衍生至 HTTP 提供的認證方法，定義在 RFC2617-
「HTTP Authentication: Basic and Digest Access Authentication」[15] 。 因此在 RADIUS 伺服器這邊要
載入 Digest module，好讓 OpenSIPS 伺服器可以配合 RADIUS 伺服器進行認證跟授權。這些設定都
在＂radius.conf”這個設定檔，在”module”部分將Digest module給載入，並開啟在認證及授權的Digest 協
定。 
 
RADIUS 用戶端 
而 RADIUS 用戶端主要設定檔為”radiusclient.conf”，用來設定認證以及計費的伺服器位址。如下
所示，黃色部分即填入 RADIUS 伺服器的位址：  
除了要設定伺服器的位址，也要提供可以與 RADIUS 伺服器溝通的”Secret Key”。主要設定檔
為”servers”。如下所示，黃色部分填入 RADIUS 伺服器的位址以及溝通的 Secret Key： 
 
 
 
OpenSIPS server 
 
OpenSIPS 伺服器主要是在＂opensips.cfg”上面設定認證、授權和計費的功能。經由前面的介紹，知道
需要在 opensips.cfg 上面幾個部分做設定。在 load module 方面，需要將 usrloc.so、acc.so、auth_radius.so
等 module 給 load 進來。在設定模組參數方面，設定 usrloc 模組的資料庫的路徑及 dbmode 參數為 2，
讓 OpenSIPS 伺服器將有改變的資料確實寫回資料庫；告知 acc.so 及 auth_radius.so module，radius_config
#Server Name or Client/Server pair              Key 
#----------------                              --------------- 
#portmaster.elemental.net                      hardlyasecret 
#portmaster2.elemental.net                     donttellanyone 
diedangel.net.nsysu.edu.tw         516806 
# General settings 
… 
authserver      diedangel.net.nsysu.edu.tw 
… 
acctserver      diedangel.net.nsysu.edu.tw 
client 140.117.171.48{ 
secret   =   516806 
shortname =  140.117.171.48  
} 
 20
 
 
做好了所有的設定後，註冊的流程就會是用戶端向 OpenSIPS 伺服器註冊，而 OpenSIPS 伺服器則對
RADIUS 伺服器做 Digest Authentication 的認證動作。計費的流程則是用戶端向 Opensips 伺服器送
INVITE 訊息後再收到 ACK 訊息時，OpenSIPS 伺服器就對 RADIUS 伺服器送出 Accounting Start 的
訊息，便開始計費；用戶端向 OpenSIPS 伺服器送 BYE 訊息，OpenSIPS 伺服器則對 RADIUS 伺服器
送出 Accounting Stop 的訊息，便結束計費，之後會詳細介紹。 
 
實際系統架構 
以下是實作的伺服器硬體架構 
 RADIUS 伺服器： 
IP：140.117.171.45 
 OS：Ubuntu 8.04  
CPU：VIA Eden Processor 1200MHz 
Memory: real memory = 970160 kB (947 MB) 
 OpenSIPS 伺服器 1： 
if(is_method("INVITE")) 
{    
setflag(1); 
}; 
//判斷 SIP 訊息的 method 是否為 INVITE，如果是就設定 accounting 
flag ，並在收到 ACK 訊息時送出＂Accounting-request”的訊息給
RADIUS 伺服器達到開始計費的目的。 
 
if (uri==myself) { 
if (method=="REGISTER") { 
if (!radius_www_authorize("diedangel.net.nsysu.edu.tw")) 
    { 
www_challenge("diedangel.net.nsysu.edu.tw", "0"); 
        exit; 
    }; 
save("location"); 
    exit; 
//判斷 SIP 訊息的 method 是否為 REGISTER，如果是就透
過”radius_www_authorize” 此 function 去對 RADIUS 伺服器做
Digest Authentication 的認證動作，而”www_challenge” function
本身就是做 Digest Authentication 的認證動作，所以在此處不會
有做用。如果認證成功，用戶是正確的，則將用戶的位址利
用”save” function 存在資料庫裡的 location 資料表。 
}; 
 22
 
圖 3-4 詳細計費流程 
 
系統採用 RADIUS 伺服器搭配 MySQL 資料庫做為認證計費的核心。用戶的帳號及密碼儲存在
MySQL 資料庫的 radcheck 資料表中，計費相關資訊則儲存在 radacct 資料表。話機啟動時必需先向
OpenSIPS 伺服器註冊目前的所在位址並核對用戶身份，無誤之後才能撥打電話。 
圖 3-4 為 SIP 網路電話認證計費的過程，包含有註冊、邀請、認證請求、認證接受、計費開始、及計
費結束等過程。詳細流程說明如下表 3-3 及 3-4： 
流程 執行動作 
S1 
PHONE 1 發出 REGISTER 註冊訊息。OpenSIPS 伺服器在更新位置資
訊前會要求 RADIUS 伺服器確認使用者的身份。 
S2 
OpenSIPS 伺服器會啟動 RADIUS 用戶端軟體，將 PHONE 1 所送來的
使用者帳號、密碼等相關資訊封裝在 UDP 封包中，然後送出
Access-request 給 RADIUS 伺服器的 UDP port 1812。如圖 4-5。 
S3 
RADIUS 伺服器收到這個 Access-request 後，會查尋 radcheck 資料
表。如果帳號密碼正確，則回覆 Access-accept 給 OpenSIPS 伺服器；
如圖 4-6。反之，則送出 Access-reject 表示認證失敗。 
S4 OpenSIPS 伺服器會送出 200 OK 給 PHONE 1，告知註冊成功。 
表 3-3 詳細流程表 1 
 24
入 Authorization 欄位後，再送出第二次註冊的要求。伺服器利用此方法確保 REGISTER 的訊息沒有
被竄改。如圖 3-7 所示。 
 
圖 3-7 Register Authentication 
流程 執行動作 
S5~S6 
當 PHONE 1 向 OpenSIPS 伺服器發出 INVITE 訊息來邀請 PHONE 2 通話。INVITE 訊息
會攜帶著 message body，當中的 SDP 描述了 PHONE 1 想使用的多媒體格式、媒體種類、
IP 位址、Port Number 等訊息。OpenSIPS 伺服器將 INVITE 訊息轉送給 PHONE 2。 
S7~S10 
當 PHONE 2 收到這個 INVITE 訊息後，PHONE 2 會依據 PHONE 2 所提出的訊息，做出
接受或拒絕的回覆。 
S11 雙方達成協議後將建立一條 RTP session，雙方通話的語音便可透過該 session 來傳送。 
S12 
OpenSIPS 伺服器收到 200 OK（S7）後會送出 Accounting start 訊息給 RADIUS 伺服器，
訊息中包含有 AcctSessionId、用戶端帳號、OpenSIPS 伺服器的 IP 位址、計費開始時間、
撥打者、受話者等資料。這些參數會被封裝在 UDP 封包中，傳送給 RADIUS 伺服器的 UDP 
1813 port，如圖 4-8。RADIUS 伺服器將資料儲存在 radacct 資料表的對應欄位中。 
S13~S16 PHONE 1 送出 BYE 要求結束通話。PHONE 2 收到後回應 200 OK。 
S17 
OpenSIPS 伺服器收到 200 OK 時會送出 Accounting stop 訊息給 RADIUS 伺服器，如圖
4-9。RADIUS 伺服器將通話結束時間存入 radacct 資料表中。 
表 3-4 詳細流程表 2 
 26
負載平衡 
如之前動機所述，目前 SIP 是一般傳統的 client-server 架構，並不能保證 VoIP 服務可以一直不中
斷。當伺服器發生問題導致無法連線時，VoIP 服務也隨之停止。所以我們得做好壓力負載的機制來確
保 VoIP 服務是永續的運作。 
目前最常見的壓力負載機制為 LinuxVirtualServer (LVS)。在 LVS 中，主要需要一台伺服器來做分派流
量的工作，稱之為 Director 伺服器或負載平衡伺服器或是虛擬主機。Director 伺服器藉由管理員設定
的演算法將收到的封包或是請求決定要配送到哪一台後端伺服器，讓後端伺服器去處理服務。 
但是對於本篇論文的架構，要實現 LVS 就得再多架設一台伺服器去做流量分配。因此設計另外一種壓
力負載機制，循環式領域名稱服務(Round-Robin DNS，RR-DNS)搭配 RADIUS 的架構。 
Round-Robin DNS 
 Round-Robin DNS，RR-DNS[16]，是目前網路上常用的負載平衡機制，可利用多台伺服器，藉由
共用同一主機名稱來達到分擔負載的目的。RR-DNS 是最簡單且經濟的網路服務負載平衡機制。所謂
RR-DNS 是將多台伺服器的 IP 位址都對應到同一名稱，當用戶端至 DNS 伺服器詢問該名稱時，DNS 
伺服器會以循環的方式提供不同優先順序的 IP 位址資料，將任何服務要求平均地分配至每一台伺服器
上，來達到負載平衡的目的。這種利用 RR-DNS 的負載平衡機制只把服務要求平均地分配至每一台，
雖然無法保證真正的負載平衡，不過採用 RR-DNS 只需做簡單的設定，不需要任何額外特別的硬體，
因此是目前網路上很常見的負載平衡方式。 
RR-DNS 搭配 RADIUS 伺服器 
現在實體架構上有 3 台 OpenSIPS 伺服器，IP 分別是 140.117.171.48，140.117.171.42 及 140.117.171.41，
並選擇 liveangel.net.nsysu.edu.tw 做為此三台伺服器共同的領域名稱，則在 DNS 伺服器的部分區域設
定檔案(zone file)內容如下： 
 
當有三個用戶端依序查詢 liveangel.net.nsysu.edu.tw 的 IP 位址時，DNS 伺服器會以循環(即
round-robin)的方式回應相對應的 IP 位址串列。以下以 nslookup 指令查詢三次，回應內容如圖 3-10。 
@ IN  SOA  net.nsysu.edu.tw. dns.net.nsysu.edu.tw. ( 
   … 
   ) 
liveangel IN A 140.117.171.48 
liveangel IN A 140.117.171.42 
liveangel IN A 140.117.171.41 
 28
 
圖 3-12 不同伺服器上的使用者進行對談 
MySQL 同步 
在壓力平衡系統上面，雖然將使用者的名稱、密碼、電子郵件信箱等資訊都放在 RADIUS 伺服器
上，在註冊認證方面沒有問題，但會有一個問題產生。使用者對某一台 OpenSIPS 伺服器註冊時，會順
便把自己所在的位置存進 location 資料表，但這個位置只會儲存在已註冊伺服器上的 MySQL 資料庫，
其他 OpenSIPS 伺服器並不會知道此使用者的位置，導致要進行通話時會找不到對方的位置。這時候
有兩種方法可以解決： 
1. 將所有 OpenSIPS 伺服器上的 MySQL 資料庫做同步，也就是複製。 
2. 將所有 OpenSIPS 伺服器上，使用者的位置都儲存到同一個 MySQL 資料庫，也就是將所有資
訊匯集在一起。 
MySQL 支援單向複製，複製之前要先選擇一個 Server 充當 Master，而一個或多個其它 Server 充
當 Slave。Master 將更新的部分寫入日誌檔案，這些日誌可以發送到各個 Slave，使其可以做更新動作。
當一個 Slave 連接 Master 時，Slave 告知 Master 讀取的最後一次成功更新的位置。而 Slave 接收從那時
起發生的任何更新，並且去更新本身的資料表，然後等待 Master 下一次通知新的更新。 
除了單向複製之外，還可以設置鏈式複製，Slave 本身也可以充當 Master，如圖 4-。也就是 Server
同時身兼 Master 及 Slave 兩角色，形成一個鏈狀關係，變成雙向複製。這樣做的好處是不用在特定一
台 Server 上做更新動作。但在實作之後發現，OpenSIPS 伺服器只是對 MySQL 資料庫做存取的動作，
負擔不大；但 MySQL 資料庫本身另外做同步的動作反而導致負擔過大。所以本篇論文最後還是選用
第二個方法，將使用者的資訊都匯集到同一個 MySQL 資料庫裡。 
 30
IV. 行動網路 Handoff 相關研究 
Layer 2 
Layer 2 的 Handoff，也就是所謂 intra-domain 的 Handoff，由圖 4-6 可以看出，Layer 2 的 Handoff
不需要經過 IP re-configuration，是非常簡單的，只需要執行 data link layer 的程式而已。 
 
圖 4-14 Intra-domain 
 
圖 4-15 Data Link Layer 
Layer 3 
隨著無線通訊技術發展迅速，各式應用蓬勃發展，因此行動化成為現代通訊的一大主軸。在 All-IP 
的時代下，能夠針對無線網路移動性而保有其原 IP 位址的議題，最耳熟能詳的方法，莫過於 Mobile IP。
但是 Mobile IP 主要的問題在於三角繞送(Triangle routing)，所面臨的訊號中斷時間及封包遺失，如此
將無法提供 QoS 保證，亦不適用於作為即時性應用的移動管理協定。另一方面來看，若使用者在高速
移動下進行資料的收送，將必須頻繁的更動 IP，頻繁的換手 (Handoff) 將導致大量的封包遺失，尤其
 32
Layer 4 
SCTP 概述 
 
圖 4-17 OSI model 
SCTP (Stream control transmission protocol)是 IETF 的一個傳輸層協定[9]，提供可靠的訊息導向資
料傳輸[10][11]。由圖 4-9 可以看到，SCTP 與 TCP 是屬於同一層級的通訊協定，SCTP 提供的服務有點
像 TCP，同時又將 UDP 的一些優點和 TCP 作結合，是一種可靠、高效、有序的資料傳輸協定。SCTP
位於 IP Network 之上，其最大的特性，就是支援傳輸資料的兩端點可擁有一個以上 IP 位址。透過圖 4-10
我們可以了解 SCTP 的架構。 
 34
 
圖 4-20 SCTP multi-homing 
SCTP 的封包格式和 TCP 是完全不一樣的，SCTP 的每個封包擁有一個 SCTP General Header，還
有一個以上的Chunk(在SCTP，control information和data information分別在不同的 chunk中，而且 control 
chunk 在 data chunk 之前)，每個 chunk 擁有的各自的 chunk header 跟 data。Chunk 類型有：DATA、INIT、
INIT ACK、SACK、HB、HB Ack、ABORT、SHUTDOWN 等。總括來說，SCTP 一個封包能夠同時包
含多個 chunk，因此能減低傳輸的次數及資料量。SCTP 的封包格式如圖 4-13，而圖 4-14 為 Chunk 共
同的配置。 
 
圖 4-21 SCTP 封包格式 
 36
進行回應，其中就包括了 Cookie，之後 Client 就會傳送 Cookie-ECHO 的 chunk 進行回應，包含了 Server
所發送的 Cookie。接著，Server 為了要為這個連結分配資源，並向 Clinet 端發送一個 Cookie-ACK chunk
來進行為應。這樣就 Association 就被成功的建立了。如圖 4-16。 
                 
圖 4-24 Four-way handshaking 
 
圖 4-25 Chunks table for association establishment 
在 SCTP 中，如果有任何一端有終止的要求時，連線就會被終止，如圖 4-18 所示，Client 使用
SHUTDOWN 來發起一個 termination，連接接著 Server 回傳一個 SHUTDOWN-ACK 來進行回應，之後
Client 就會傳送 SHUTDOWN-COMPLETE 來關掉這個連結。這樣就 Association 就被成功的終止了。 
 38
 
圖 4-28 Association establishment 
如圖 4-20，Client 先用 Location A 的 IP 位址與 Server 做連線。 
•  
圖 4-29 Add IP 和 Set Primary IP 
如圖 4-21，Client 移動到 Location A 與 Location B 重疊的範圍，取得 Location B 的 IP 位址，並且通
知 Server 把 Location B 的 IP 位址加入 SCTP association。在此重疊範圍中決定是否要將 Primary IP
換至 Location B 的 IP 位址。 
 
圖 4-30 Remove IP 
如圖 4-22，Client 完全移動至 Location B 之後，告 知 Server 把 Location A 的 IP 位址移除。 
SCTP Mobility 研究情況 
過去的研究大都針對路徑切換時機，例如對網路 RTT (Round Trip Time)進行測量，或者對無線網
 40
Network
C
S
Client interface
Server interface
Eeeap-1
Eeeap-2
Intra-domain
 
圖 5-32 實驗設計 A 環境架設 
實驗設計 B 
Server和Client之間傳輸DATA，傳輸的方式是利用未改良的SCTP，開始的時候資料將透過Ethernet
來傳輸，Handoff 之後透過 WiFi 來繼續作傳輸，如下圖 5-2 所示： 
 
圖 5-33 實驗設計 B 環境架設 
實驗設計 C 
Server 和 Client 之間傳輸 DATA，傳輸的方式是在 SCTP 的模組中加入 timeout 作傳輸，開始的時
候資料將透過 Ethernet 來傳輸，Handoff 之後透過 WiFi 來繼續作傳輸，如下圖 5-3 所示： 
 42
圖 III-36 實驗設計 E 環境架設 
實驗結果和分析 
由於要突顯出改良之後的 SCTP 傳輸 DATA 轉換的速度，所以提出五個實驗來做比對，主要是觀
察轉換的過程中，花了多少時間，Delay 是否能縮短，還有 DATA 傳送的模式是否相同。 
實驗設計 A 
首先，在這個實驗中，我們利用了 Eeeap，Eeeap 是一個 Layer 2 的 switch。Layer 2 的 switch，是
在 DATA 傳輸中以第二層(MAC 層)的資訊作為傳輸與 DATA 交換之依據，也就是說，我們用 Layer 2
的 switch 所以可以不用換 IP 來做繼續傳送的動作。由於 Layer 2 的 Switch 只判斷第二層的資訊所以
處理效能佳，可以提昇網路的傳輸效能，我們的方法是以傳統的 TCP 傳輸，切換不同的 AP，抓取封
包來做比對，如下圖 5-6 所示： 
 
圖 5-37 實驗設計 A 封包圖(一) 
如圖 5-6，在 NO.49559 的封包中，Server(IP 位址為 140.117.11.143)傳送 DATA 給 Client(IP 位址為
140.117.171.101) ，此時 Sequence number 為 47346341。 
 44
 
圖 5-40 實驗設計 A封包圖(四) 
如圖 5-9，在 NO.49562 的封包中，出現了 TCP Retransmission，這表示 Client 回傳的 ACK Server
並未收到，所以重新傳送了 Sequence number 為 47346341 的 DATA 給 Client。 
 
圖 5-41 實驗設計 A 封包圖(五) 
如圖 5-10，在 NO.49563 的封包中，Client 回傳給 Server 的 Dup Ack 為 47349261。 
 46
SCTP(也就是實驗設計 B)。 
實驗設計 B 
首先，在這個實驗中，我們使用 Linux kernel SCTP 系統呼叫(需要 libsctp-dev 及 lksctp-tools)，建
構於 Trajectory-aware 之上(這是由於 IP 位置必須於連線(association)建立時告知)，對於 SCTP 的端點可
以擁有一個以上的 IP 的特色，稱之為 multi-homing 進行測試，也就是說，兩端都擁有一個以上的 IP
位址，當其中一個無法使用的時候，不需要中斷連線仍然可以使用其他 IP 繼續傳送資料，我們的方法
是以未經過改良的 SCTP 作傳輸，切換 Ethernet 和 WiFi(創造出 multi-homing 的環境)，抓取 Server 和
Client 封包來做比對，我們先對 Server 的封包做分析，如下圖 5-13 所示： 
 
圖 5-44 實驗設計 B Server 封包圖(一) 
如圖 5-13，在 NO.1162 到 NO.1166 的封包中，Server(IP 位址為 140.117.171.106)傳送 DATA 給 Client 
IP1 (IP 位址為 140.117.171.101)，此時 TSN(Transmisson sequence number)為 2973776902、2973776903、
2973776904、2973776905、2973776906。 
 
圖 5-45 實驗設計 B Server 封包圖(二) 
 48
 
圖 5-48 實驗設計 B Server 封包圖(五) 
如圖 5-17，在 NO.1185 和在 NO.1186 的封包中，Server 傳送 TSN 為 2973776911 和 2973776912 的
DATA 給 Client IP1。在 NO.1188 的封包中，Client IP2 回傳給 Server SACK 的 Cumulative TSN ACK 為
2973776910，接著在 NO.1189，delay 了 4 秒才對 Client IP2 傳送 TSN 為 2973776911 的 DATA。 
 
圖 5-49 實驗設計 B Server 封包圖(六) 
如圖 5-18，在 NO.1191 和在 NO.1192 的封包中，Server 傳送 TSN 為 2973776913 和 2973776914
的 DATA 給 Client IP1。在 NO.1194 的封包中，Client IP2 回傳給 Server SACK 的 Cumulative TSN ACK
為 2973776912，接著在 NO.1195，delay 了 8 秒才對 Client IP2 傳送 TSN 為 2973776913 的 DATA。 
 50
 
圖 5-52 實驗設計 B Client 封包圖(一) 
如圖 5-21，在 NO.1162 的封包中，Server 傳送 DATA 給 Client IP1，此時 TSN 為 2973776902。 
 
圖 5-53 實驗設計 B Client 封包圖(二) 
如圖 5-22，在 NO.1163 的封包中，回傳給 Server 的 SACK，卻是由 Client IP2 所發送的，此時
Cumulative TSN ACK 為 2973776902。在 NO.1164，Server delay 了 1 秒才對 Client IP2 傳送 TSN 為
2973776903 的 DATA。 
 52
 
圖 5-56 實驗設計 B Client 封包圖(五) 
如圖 5-25，在 NO.1167 的封包中，Server 傳送 TSN 為 2973776906 的 DATA 給 Client IP2。 
 
圖 5-57 實驗設計 B Client 封包圖(六) 
如圖 5-26，在 NO.1168 的封包中，Client IP2 回傳給 Server Cumulative TSN ACK 為 2973776904 的
SACK。 
 54
 
圖 5-60 實驗設計 B Client 封包圖(九) 
如圖 5-29，在 NO.1171 的封包中，Server 傳送 TSN 為 2973776905 的 DATA 給 Client IP2。 
 
圖 5-61 實驗設計 B Client 封包圖(十) 
如圖 5-30，在 NO.1172 的封包中，Client IP2 回傳給 Server Cumulative TSN ACK 為 2973776906，
Number of gap ACK blocks=1、Gap ACK block #1 start TSN offset=2973776908、ACK block #1 end TSN 
offset=2973776908 的 SACK。 
 56
 
圖 5-64 實驗設計 B Client 封包圖(十三) 
如圖 5-33，在 NO.1178 的封包中，Client IP2 回傳給 Server Cumulative TSN ACK 為 2973776910 的
SACK。在 NO.1179，Server delay 了 4 秒才對 Client IP2 傳送 TSN 為 2973776911 的 DATA。 
 
圖 5-65 實驗設計 B Client 封包圖(十四) 
如圖 5-34，在 NO.1182 的封包中，Client IP2 回傳給 Server Cumulative TSN ACK 為 2973776912 的
SACK。在 NO.1183，Server delay 了 8 秒才對 Client IP2 傳送 TSN 為 2973776913 的 DATA。 
 58
 
圖 5-68 實驗設計 B Client 封包圖(十七) 
如圖 5-37，在 NO.1199 的封包中，Server 對 Client IP2 傳送 TSN 為 2973776918 的 DATA，從這時
候開始， Server 便開始把 DATA 都傳送給 Client IP2。 
由 Ethereal 抓出來的封包顯示，在從 Ethernet 切換到 WiFi 的時候，會發現 Server 傳送給 Client IP1 
DATA，卻是 Client IP2 回傳 SACK，所以 Server 便開始把 DATA 傳送給 Client IP2，然後送 HEARTBEAT 
chunk(HB)給 Client IP2，來測試路徑是否是有效的，而在轉換過程中，會對 Client IP1 連續傳送五次的
DATA(1sec、2sec、4sec、8sec、16sec、32sec)，如果 DATA 遺失，就會認定這個路徑是不通的。圖 4-38
為整個轉換過程的封包整理。 
 60
 
圖 5-70 實驗設計 B 之 IO Graphs 
在圖 5-39 的 IO Graphs 可以明顯的看出，在從 Ethernet 切換到 WiFi 的時候，開始有 HB 出現，這
主要是要來測試路徑是否是有效的，在這段期間中，Server 分別會對 Client IP1 和 Client IP2 傳送 DATA，
而直到穩定傳輸這段時間，足足花了 63 秒(1sec、2sec、4sec、8sec、16sec、32sec)來做轉換，這是由
於路徑切換過程中，sender 會同時對 receiver Ethernet 及 WiFi 網路介面傳輸資料，對語音傳輸來說，即
使做了切換，斷斷續續的結果，造成語音的品質大大的降低，可能會遺漏掉一些重要的對談，所以我
們想要改善這個 delay 的現象，讓開始切換直到穩定的這段時間縮短，所以我們開始研究在 SCTP 的模
組中加入 timeout 作傳輸(也就是實驗設計 C)。 
實驗設計 C 
首先，在這個實驗中，我們更改了 RTO (retransmission time out) ，RTOmin 即 RTO 的最小值，RTOmax
即 RTO 的最大值，MPR 是 retransmission 的次數，如圖 5-40。 
 
圖 5-71 RTO 
在實驗 C 中，我們的方法是以在 SCTP 的應用程式中加入 timeout 作傳輸，切換 Ethernet 和 WiFi(創
造出 multi-homing 的環境)，抓取封包來做比對，如下圖 5-41 所示： 
 62
 
圖 5-74 實驗設計 C 封包圖(三) 
如圖 5-43，接下來 Server 再次傳送給 DATA 給 Client IP1，在 NO.30984 中 TSN 為 2594121514。 
 
圖 5-75 實驗設計 C 封包圖(四) 
如圖 5-44，可是由NO.30985到NO.30988的SACK中，Cumulative TSN ACK為 2594121512，Number 
of gap ACK blocks=1、Gap ACK block #1 start TSN offset=2594121514、ACK block #1 end TSN 
offset=2594121514，這就表示 TSN 為 2594121513 的封包仍然未收到，也就是說 Client IP1 這條路徑可
能已經無效了。所以開始對 Client IP2(IP 位址為 140.117.171.102)傳送 HB，而 Client IP2 也回送
Heartbeat_ack。 
 64
 
圖 5-78 實驗設計 C 封包圖(七) 
如圖 5-47， Server 開始傳送 TSN 為 2594121515 的 DATA 給 Client IP2，從這裡開始，Handoff 已
經達成，我們對這個結果，畫了一張 IO Graphs，如下圖 5-47 所示： 
 
圖 5-79 實驗設計 C 之 IO Graphs 
在圖 5-48 的 IO Graphs 可以明顯的看出，在從 Ethernet 切換到 WiFi 的時候，DATA 傳輸中斷到開
始有 HB 出現，且轉換 IP 之後開始傳送 DATA 這段時間，只花了一秒半，對語音傳輸來說，這是一個
勉強可以接受的結果，但是做了切換之後，斷斷續續直到傳輸穩定需要花上七秒，這樣的結果，造成
語音的品質不高，可能會遺漏掉一些重要的對談，同時，我們想要了解，改變 Traffic，是否影響切換
時間(也就是實驗設計 D)。 
實驗設計 D 
首先，在這個實驗中，我們的方法是以在 SCTP 的應用程式中加入 timeout 作傳輸之外，發送 VoIP
RTO = 100ms 
RTO = 700ms 
 66
如圖 5-51，接著，Server 把 DATA 傳送給 Client IP1，在 NO.1042 中 TSN 為 4037570394。 
 
圖 5-83 實驗設計 D 封包圖(四) 
如圖 5-52，然而 NO.1043 中 SACK 的 Cumulative TSN ACK 雖然為 4037570394，可是卻是由 Client 
IP2(IP 位址為 140.117.171.102)回傳的，之後的 DATA 就會傳給 Client IP2，在同一個時間點，我們在
Server 端點抓封包，發現 Handoff 的時候 Server 剛開始會陸陸續續傳送封包給 Client IP1，舉例來
說:Server 對 Client IP1 傳送了 TSN 為 4037570393、4037570394、4037570395、4037570396 的 DATA 之
後，發現已經送了好幾個 DATA，但卻沒有收到 Client IP1 回傳的 SACK，所以 Server 會開始把 DATA
傳送給 Client IP2，這也就是為什麼 Client IP2 才會回傳 SACK 的 Cumulative TSN ACK 為 4037570394
的原因。 
 
圖 5-84 實驗設計 D 封包圖(五) 
如圖 5-53，開始把 DATA 傳送給 Client IP2 之後，也會對 Client IP2 傳送 HB，而存在的 Client IP2
也會回送 Heartbeat_ack，從 NO.1046 開始 Server 開始傳送 TSN 為 4037570397 的 DATA 給 Client IP2。 
 
 68
 
圖 5-88 實驗設計 D 之 IO Graphs 
在圖 5-57 的 IO Graphs 可以明顯的看出，在從 Ethernet 切換到 WiFi 的時候，DATA 傳輸中斷到開
始有 HB 出現，且轉換 IP 之後開始傳送 DATA 這段期間，只花了 700ms，對語音傳輸來說，這是一個
可以接受的結果，同時，如下圖 4-58，我變換了 Y 軸的 scale 為 100(Packets/Tick)，可以明顯看出在穩
定期間中的封包在每一個 Tick 的值非常地平均(5 Packets/Tick)，然而做了切換之後，斷斷續續直到傳
輸穩定仍需要花上三秒半的時間，這樣的結果，雖然改善了單純加入 timeout 作傳輸所花費的時間，但
是由於 Traffic application 的傳輸速率不能隨意更改，所以我們必須尋找另外的解決方法。 
上面幾個實驗的結果我們發現，轉換直到穩定所帶來的 delay 主要是因為 Server 要經過五次的詢
問，才知道 Client IP1 已經不存在，所以我們開始研究在 Client 端收到 DATA 之後回送 1bytes 的 DATA
給 Server，這樣的方式是否可以縮短切換到穩定的時間(也就是實驗設計 E)。 
 
圖 5-89 實驗設計 D 之 Packets/Tick 
實驗設計 E 
首先，在這個實驗中，我們的方法是開始研究在 Client 端收到 DATA 之後回送 1bytes 的 DATA 給
 70
圖 5-92 實驗設計 E 封包圖(二) 
如圖 5-61，在 NO.944 的封包中，Client IP1 傳送 DATA 給 Server，此時 TSN 為 674263841。 
 
圖 5-93 實驗設計 E 封包圖(三) 
如圖 5-62，在 NO.945 的封包中，Server 傳送 SACK 和 DATA 給 Client IP1，此時 Cumulative TSN 
ACK 為 674263841，TSN 為 4168182295。送出 DATA 和回覆 SACK 之間相隔 0.2 秒。 
 
圖 5-94 實驗設計 E 封包圖(四) 
如圖 5-63，在 NO.948 的封包中，Server 傳送 DATA 給 Client IP1，此時 TSN 為 4168182296。 
 72
 
圖 5-97 實驗設計 E 封包圖(七) 
如圖 5-66，在 NO.951 的封包中，Server 便開始傳送 DATA 給 Client IP2，此時 TSN 為 4168182297。 
 
圖 5-98 實驗設計 E 封包圖(八) 
如圖 5-67，在 NO.952 的封包中，Server 回傳 SACK 給 Client IP2，此時 Cumulative TSN ACK 為
674263843。送出 DATA 和回覆 SACK 之間一樣相隔 0.2 秒。 
 74
 
圖 5-101 實驗設計 E 封包圖(十一) 
如圖 5-70，在 NO.1012 的封包中，Server 傳送 DATA 給 Client IP2，此時 TSN 為 4168182313。到
這裡為止，Server 在每個 Tick(10ms)只傳送 1 個封包給 Client IP2 行為結束，開始恢復每個 Tick(10ms)
傳送 2 個封包。 
由 Ethereal 抓出來的封包顯示，在從 Ethernet 切換到 WiFi 的時候，會發現 Server 傳送給 Client IP1 
DATA 和 SACK，卻是 Client IP2 回傳 SACK 和 DATA，所以 Server 便開始把 DATA 傳送給 Client IP2，
不同於以往，這個實驗中，Client IP2 除了回覆 SACK 之外，也同時承接了 Client IP1 傳送 DATA 的部
份，所以 Server 便可以很快速的了解到 Client IP1 已不存在，轉而傳送 DATA 和 SACK 給 Client IP2，
而在轉換過程中，也不會再對 Client IP1 連續傳送五次的 DATA(1sec、2sec、4sec、8sec、16sec、32sec)，
因為如此，Client IP2 Handoff 過程快速完成。圖 5-71 為整個轉換過程的封包整理。 
 
 76
 
圖 5-103 實驗設計 E 之 IO Graphs 
在圖 5-72 的 IO Graphs 可以明顯的看出，在從 Ethernet 切換到 WiFi 的時候，由於 Client IP2 馬上
取代了 Client IP1 傳送 DATA，所以自此之後 Server 只會對 Client IP2 傳送 DATA，對語音傳輸來說，
這是一個可以完全接受的結果，即使切換過程封包比較少，但是卻也沒有斷斷續續，而直到穩定傳輸
這段時間，只花了兩秒多鐘來做轉換， 而且也相鄰兩個 Tick 的封包個數相加的值相等，所以感覺幾
乎沒有切換之時間間隔，這是因為 Receiver 的 Ethernet 斷線後，1 byte-封包立即切換至 WiFi 送至
Sender，Sender 接到這個封包時，SACK 封包會 piggyback 原要傳輸之資料至 Receiver 的 WiFi，不再
傳至 Ethernet，故 Sender 沒有發生切換延遲現象。
 78
 
參考文獻 
[1]  M. Handley, H. Schulzrinne, E. Schooler and J.Rosenberg, “SIP: Session Initiation Protocol”, RFC-2543, 
March 1999. 
[2]  H. Schulzrinne, S. Casner, R. Frederick, and V. Jacobson, “RTP: A Transport Protocol for Real-Time 
Applications”, RFC-3550, July 2003. 
[3]  M. Handley, V. Jacobson, “SDP: Session Description Protocol”, RFC-2327, April 1998. 
[4]  J. Rosenberg, H. Schulzrinne, G. Camarillo, A. Johnston, J. Peterson, R. Sparks, M.Handley and E. 
Schooler, “SIP: Session Initiation Protocol”, RFC 3261, June 2002. 
[5]  “ADM-5120 Data Sheet Rev. 1.1”, Infineon Technologies., March 2005. 
[6]  “ADM-5120 HOME GATEWAY CONTROLLER”, AMDtek Inc.,2003. 
[7]  “EASY 5120 2-Channel VoIP Router Reference Package Hardware Description”, Infineon Technologies. 
[8]  “EASY 5120P-ATA Fxo System Description”, Infineon Technologies, Jul. 2004. 
[9]  “Telephony Application Programming Interface for Infineon Voice Codec Devices”, Infineon 
Technologies. 
[10] “VINETIC-2CPE System Description, v1.1”, Infineon Technologies. March 2006. 
[11] “VINETIC-2CPE Device Driver and API Description, v2.1”, Infineon Technologies. Jan. 2006. 
[12] The Open Source SIP Server , http://www.opensips.org/ 
[13] C. Rigney, S. Willens, A. Rubens and W. Simpson, “Remote Authentication Dial In User Service 
(RADIUS)”, RFC 2865, June 2000. 
[14] C. Rigney, “RADIUS Accounting”, RFC 2866, June 2000. 
[15] J. Franks, P. Hallam-Baker, J. Hostetler, S. Lawrence, P. Leach, A. Luotonen, L. Stewart, “HTTP 
Authentication: Basic and Digest Access Authentication”,RFC 2617, June 1999. 
[16] T. Brisco, “DNS Support for Load Balancing”, RFC 1794, April 1995. 
[17] MySQL Replication, http://dev.mysql.com/doc/refman/5.0/en/replicationhowto.html 
[18] MySQL Replication, http://twpug.net/docs/mysql-5.1/replication.html 
 80
[36] “VINETIC-2CPE Device Driver and API Description, v2.1”, Infineon Technologies. Jan. 2006. 
[37]“Telephony Application Programming Interface for Infineon Voice Codec Devices”, Infineon 
Technologies. 
[38] H. Schulzrinne, S. Casner, R. Frederick, and V. Jacobson, “RTP: A Transport Protocol for Real-Time 
Applications”, RFC-3550, July 2003. 
[39] Daniel P. Bovet, Marco Cesati, “Understanding the Linux Kernel, 3/e”, O’Relly, November 2005. 
[40] W. Richard Stevens, Bill Fenner, Andrew M. Rudoff, “Unix Network Programming: The Sockets 
Networking API, Vol. 1, 3/e”, Addision Weslsy. 2004. 
[41] 蔣承翰, “SCTP 上的延遲取向無縫式轉換之研究＂, 國立交通大學資訊工程學系,    碩士論文, 
June 2007. 
[42] A Network Protocol Analyzer: Wireshark (http://www.wireshark.org/) 
[43] Behrouz A. Forouzan, Sophia Chung Fegan, “TCP/IP Protocol Suite, 3/e” , February 2005. 
[44] Riegel, M. and Tuexen M., "Mobile SCTP",draft-riegel-tuexen-mobile-sctp-05, July 2005. 
[45] 黃鼎鈞，“在 All-IP 異質網路環境下可與 TCP 互通之 SCTP 交遞平台之設計與實作＂，國立清華
大學資訊工程所，碩士論文，June 2006。
 82
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
 
SCTP 常被視為備援路徑(multi-paths)之網路傳輸之指標性通訊協定，但實際使用上，
路徑之切換(handoff)並不如我們所期待，相當緩慢，在實際應用上，有相當的困難。我們
之研究成果，開發出來的 SCTP 可以非常即時的切換路徑，對於服務品質(QoS)保證的多
媒體串流傳輸服務應用，將提供無線網路路徑不穩定的容錯的解決方法。而在目前電信公
司希望以 wifi 網路來減輕 3G 網路之負荷的目標下，SCTP 的 multipaths 被視為是重要可行
的解決方案，我們 real-time handoff 機制將有重要貢獻。 
P2P 分散式網路服務是最近一個重要的服務模式，我們在本計畫中研究及探討 SIP 多
媒體服務的設計與實作。其中亦考量 WiFi/3G 無線行動網路的多媒體服務，特別是語音傳
輸，必然是未來 VoIP 的服務品質的一項重要議題。網際網路電信產業，其未來之相關應
用與週邊產業，將帶動相當之經濟規模。P2P 是非常重要服務模式，在網際網路電信產業
將舉足輕重，伴演極為重要的角色，我們克服許多研究上之障礙，相信本計畫可以帶動相
關領域的學術研究，促進國內對於 P2P 網路的研究、行動計算及網路電信服務等方面科
技的提升。另外，本計畫涵蓋語音壓縮與傳輸，應用層之設計與製作，網路系統核心的設
計與開發實現、多媒體即時資料傳輸、漫遊管理、SIP 網路服務管理、P2P 網路技術等重
要議題。對於參與之工作人員，所獲得之訓練為： 
(1) 學習收集資訊，集體研究等能力； 
(2) 對 SIP 網路電信方面技術有充分的研究； 
(3) 對 VoIP 網路技術有充分研究； 
(4) 對 P2P 網路技術有深入探討； 
(5) 獲得開發多媒體即時系統之訓練； 
(6) 學習實作標準通訊協定，及制定系統程式之界面； 
(7) 了解行動網路之標準協定，並且了解如何在既有之網路架構上，嵌入一個新協定之系
統整合問題，對於無線網路之系統、管理、軟硬體有深刻的瞭解。 
(8) 對行動網路有更深的認識，並有助於解決將來整合 VoIP 與 PSTN 系統所將遭遇的問
題，日後將是我國網路電信研究設計及管理領域上的人才。 
 
 
 
 
 
 
 
 
 1
      本計畫發表之論文 
2 IEEE COMMUNICATIONS LETTERS, VOL. 14, NO. 8, AUGUST 2010
Proof:
𝑑𝑖 ≤ 𝑑𝑗 , ∀𝑗 ∈ 𝐿𝑆𝑘 ⇒ 1
𝑑𝑖
≥
∑
𝑗∈𝐿𝑆∗𝑘 (𝑑𝑗)
−1
𝑛𝑘 − 1
⇒ 𝑛𝑘 − 1 ≥ 𝑥𝑑𝑖 (𝑥 =
∑
𝑗∈𝐿𝑆∗𝑘
1
𝑑𝑗
)
𝑇ℎ∗𝑘 − 𝑇ℎ𝑘 =
𝑛𝑘 − 1
𝑥
− 𝑛𝑘
𝑥+ (𝑑𝑖)−1
=
𝑛𝑘 − 1
𝑥
− 𝑛𝑘𝑑𝑖
1 + 𝑥𝑑𝑖
=
(𝑛𝑘 − 1)− 𝑥𝑑𝑖
𝑥(1 + 𝑥𝑑𝑖)
≥ 0
This completes the proof.
By Lemma 1, the maximum channel throughput 𝑇ℎ𝑘 can be
achieved as long as we remove all links from 𝐿𝑆𝑘 except the
link with the largest data rate. In other words, the interferences
among links on co-channel are useless to increase the channel
throughput. Furthermore, the maximum amount of data suc-
cessfully transmitted by the network, which is often referred
to as the network capacity, can also be computed and achieved
by the following lemma.
Lemma 2: The network capacity is
∑𝐾
𝑖=1 𝑑𝑖, which can
be achieved by the channel assignment 𝐿𝑆𝑘 = {𝑑𝑘}, 𝑘 =
1, 2, . . . ,𝐾 .
Proof: Suppose that there is a CA of 𝐿𝑆∗1 , 𝐿𝑆
∗
2 , . . . , 𝐿𝑆
∗
𝐾
whose throughput 𝑇ℎ∗𝑡𝑜𝑡𝑎𝑙 is strictly larger than 𝑇ℎ𝑡𝑜𝑡𝑎𝑙, which
is the throughput of the CA in this lemma. Let 𝑇ℎ∗𝑖 be the
smallest 𝑖, 1 ≤ 𝑖 ≤ 𝐾 , such that 𝑇ℎ∗𝑖 > 𝑇ℎ𝑖. By Lemma 1,
we know that it’s impossible to increase 𝑇ℎ𝑖 by just assigning
channel 𝑖 to certain links whose data rates are smaller than
𝑑𝑖. Therefore, there is a 𝑑𝑙 such that 𝑑𝑙 > 𝑑𝑖 and 𝑙 ∈ 𝐿𝑆∗𝑖 .
Since 𝑇ℎ∗1 ≥ 𝑇ℎ∗2 ≥ . . . ≥ 𝑇ℎ∗𝑖 > 𝑇ℎ𝑖 = 𝑑𝑖, there are at
least 𝑖 data rates with each strictly larger than 𝑑𝑖, resulting
in a contradiction that 𝑑𝑖 is the 𝑖-th largest data rate. As a
result, the network capacity is
∑𝐾
𝑖=1 𝑑𝑖 made by the channel
assignment 𝐿𝑆𝑘 = {𝑑𝑘}, 𝑘 = 1, 2, . . . ,𝐾 .
The network capacity in Lemma 2 can be regarded as
a tight upper bound on the total network throughput, and
hence, we compute it for comparison in the next section.
Since the number of orthogonal channels is considerably less
than the number of active links in general, i.e., 𝐾<<𝑁 ,
the occurrence of inference is undoubted. Once there are
interferences, the network throughput is on the decrease.
Consequently, a well CA is to reduce the gap between the
network capacity and throughput as far as possible. Now,
assume that 𝐿𝑆1, 𝐿𝑆2, . . . , 𝐿𝑆𝐾 is a CA of 𝑖 − 1 (≥𝐾)
links with data rates 𝑑1 ≥ 𝑑2 ≥ . . . ≥ 𝑑𝑖−1. Note that the
corresponding channel throughputs 𝑇ℎ1, 𝑇ℎ2, . . . , 𝑇ℎ𝐾 are
also sorted in descending order. Consider two identical channel
assignments 𝐶𝐴 and 𝐶𝐴∗ on the first 𝑖−1 links but different
on the 𝑖-link: 𝐶𝐴 assigns channel 𝑐 (<𝐾), whereas 𝐶𝐴∗ allots
channel 𝐾 to the 𝑖-link. The network throughput of 𝐶𝐴 and
𝐶𝐴∗ are 𝑇ℎ𝑡𝑜𝑡𝑎𝑙 and 𝑇ℎ∗𝑡𝑜𝑡𝑎𝑙, respectively.
Theorem 1: Let 𝑥 =
∑
𝑗∈𝐿𝑆𝑐
1
𝑑𝑗
and 𝑦 =
∑
𝑗∈𝐿𝑆𝐾
1
𝑑𝑗
. If
𝑥 ≤ 𝑦, then 𝑇ℎ𝑡𝑜𝑡𝑎𝑙 ≤ 𝑇ℎ∗𝑡𝑜𝑡𝑎𝑙.
Proof: The difference between 𝑇ℎ∗𝑡𝑜𝑡𝑎𝑙 and 𝑇ℎ𝑡𝑜𝑡𝑎𝑙 de-
pends on two channel throughputs, namely 𝑇ℎ𝑐 and 𝑇ℎ𝐾 .
Since 𝑇ℎ𝑐 ≥ 𝑇ℎ𝐾 by assumption, we have 𝑛𝑐𝑥 ≥ 𝑛𝐾𝑦 , and
hence, 𝑦𝑛𝑐 ≥ 𝑥𝑛𝐾 . Besides, due to 𝑑𝑖 ≤ 𝑑𝑙, 1 ≤ 𝑙 ≤ 𝑖 − 1,
we know 1𝑑𝑖 ≥
𝑦
𝑛𝐾
, i.e., 𝑛𝐾 ≥ 𝑦𝑑𝑖. Then,
𝑇ℎ∗𝑡𝑜𝑡𝑎𝑙 − 𝑇ℎ𝑡𝑜𝑡𝑎𝑙
=
(
𝑛𝑐
𝑥
+
𝑛𝐾 + 1
𝑦 + (𝑑𝑖)−1
)
−
(
𝑛𝑐 + 1
𝑥+ (𝑑𝑖)−1
+
𝑛𝐾
𝑦
)
=
𝑛𝑐
𝑥
+
(𝑛𝐾 + 1)𝑑𝑖
𝑦𝑑𝑖 + 1
− (𝑛𝑐 + 1)𝑑𝑖
𝑥𝑑𝑖 + 1
− 𝑛𝐾
𝑦
=
𝑥𝑛𝑐𝑑𝑖 + 𝑛𝑐 − 𝑥𝑛𝑐𝑑𝑖 − 𝑥𝑑𝑖
𝑥(𝑥𝑑𝑖 + 1)
+
𝑦𝑛𝐾𝑑𝑖 + 𝑦𝑑𝑖 − 𝑦𝑛𝐾𝑑𝑖 − 𝑛𝐾
𝑦(𝑦𝑑𝑖 + 1)
=
(𝑛𝑐 − 𝑥𝑑𝑖)(𝑦2𝑑𝑖 + 𝑦) + (𝑦𝑑𝑖 − 𝑛𝐾)(𝑥2𝑑𝑖 + 𝑥)
𝑥𝑦(𝑥𝑑𝑖 + 1)(𝑦𝑑𝑖 + 1)
(Set 𝛼 = 𝑥𝑦(𝑥𝑑𝑖 + 1)(𝑦𝑑𝑖 + 1).)
=
1
𝛼
{(𝑥2𝑦 − 𝑥𝑦2)(𝑑𝑖)2 + (𝑦2𝑛𝑐 − 𝑥2𝑛𝐾)𝑑𝑖 + (𝑦𝑛𝑐 − 𝑥𝑛𝐾)}
≥ 1
𝛼
{𝑥𝑦(𝑥− 𝑦)(𝑑𝑖)2 + (𝑦 − 𝑥)𝑥𝑛𝐾𝑑𝑖} (∵ 𝑦𝑛𝑐 ≥ 𝑥𝑛𝐾 )
=
1
𝛼
(𝑥 − 𝑦)𝑥𝑑𝑖(𝑦𝑑𝑖 − 𝑛𝐾) ≥ 0 (∵ 𝑥 ≤ 𝑦 and 𝑦𝑑𝑖 ≤ 𝑛𝐾)
This completes the proof.
IV. ALGORITHM
We assume for convenience that links have distinct data
rates, although virtually everything that we do extends to
the situation of links with repeated data rates. According
to Theorem 1, our CA algorithm can be presented in the
following:
Alg. 1 Top (𝐾−1) Full-Speed Channel Assignment (TFS-CA)
Let 𝑑𝑟𝐾−1 be the (𝐾 − 1)-th largest link data rate
𝑖 = 1, 𝑘 = 1
while 𝑖 ≤ 𝑁 and 𝑘 < 𝐾 do
if 𝑑𝑖 ≥ 𝑑𝑟𝐾−1 then
𝐿𝑆𝑘 contains the link 𝑖
𝑘 = 𝑘 + 1
end if
𝑖 = 𝑖+ 1
end while
𝐿𝑆𝐾 contains the residual links
First, we give an example to show how TFS-CA works. If
there are 3 channels (𝐾 = 3) and 5 links with data rates,
𝑑1 = 54, 𝑑2 = 18, 𝑑3 = 36, 𝑑4 = 54, and 𝑑5 = 24, then
𝑑𝑟𝐾−1 = 54. When the while loop in TFS-CA terminates,
𝐿𝑆1 = {1} and 𝐿𝑆2 = {4}. In the end, the remaining links
are all assigned to channel 3 by TFS-CA, i.e., 𝐿𝑆3 = {2, 3, 5}.
Next, we examine the time complexity of TFS-CA as follows:
the (𝐾 − 1)-selection can be done in 𝑂(𝑁) time [5], and the
while loop costs 𝑂(𝑁) time at most. As a result, the total run-
ning time of TFS-CA is 𝑂(𝑁), which is linear to the number
of links. TFS-CA is a simple algorithm for allocating channels
to all 𝐶𝑛2 links under the saturated traffic load. However, it is a
challenging work for giving a rigorous argument to appraise its
performance, due to the complicated interference calculation.
Consequently, the next section contains extensive simulations
to build up our confidence in achieving the maximum network
throughput by TFS-CA when the traffic load is saturated.
Measurement and Improvement of the Delay of
SCTP Multihoming Path Switch
Kuang-Yuan Tung∗, Richard Chun-Hung Lin∗, Ying Chih Lin∗ and Yu-Hsiu Huang∗†
∗Department of Computer Science and Engineering
National Sun Yat-Sen University, Kaohsiung, 80424, Taiwan, R.O.C
†Department of Computer Science and Information Engineering
Cheng Shiu University, Kaohsiung, 833, Taiwan, R.O.C
Email: {beck,lin,yclin,yhhuang}@cse.nsysu.edu.tw
Abstract—SCTP multihoming feature has been widely ex-
ploited to develop schemes for mobile host handoff, e.g., mSCTP.
However, there is no research work on the measurement of
path switch delay in practical SCTP implementations. As a
matter of fact, the delay cost could be excessive, up to a couple
of seconds or even one minute in the worst case, such that
SCTP is inappropriate for mobile network handoff schemes,
especially for delay-sensitive applications like VoIP. In this paper,
we consider the possible case of SCTP path switch delay on
common Linux system testbed with SCTP implementation. Our
experiment demonstrates that many packets are blocked in the
duration of path switch, where the delay usually results from
the timeout/retransmission trial process. SCTP retransmission
mechanism cannot be disabled at will since it can avoid mak-
ing incorrect path switch decision. Therefore, we propose an
approach to intelligently bypass retransmission phase without
modifying the SCTP protocol. The experiment results show that
the path switch delay can be significantly reduced and has no
negative impact on the whole performance.
Keywords- SCTP; handoff; delay; mobility
I. INTRODUCTION
Mobility is the most important feature of a wireless mobile
network. Usually, seamless service is achieved by supporting
handoff from one subnetwork to another. The type of mobile
host handoff can be classified according to the handling
responsibility of the communication protocol layers. Mobile
host does not need to go through IP re-configuration during
the data link layer handoff. Hence, just the handoff process
of the data link layer has to be involved. Mobile IP is a
well known method to support host mobility at the network
layer. Mobile IP uses original IP domain (home network) and
new IP domain (foreign network) to construct a tunnel, so
it can keep the signal not interrupt when the mobile node
moves to different domain. This way results in longer handoff
delay and wasting more bandwidth, and cannot meet the QoS
requirement of real-time application. In contrast, Mobile SCTP
(mSCTP) [1]–[3] has proposed to deal with host mobility
based on the Stream Control Transmission Protocol (SCTP)
[4], which is a message-oriented and reliable protocol with
good features of UDP and TCP. SCTP provides two core
features, multihoming and multistreaming, and allows a set of
IP addresses at both source and destination end points to be
decided in the association establishment phase. Furthermore,
mSCTP extends the base SCTP to facilitate mobility in the
Internet at the transport layer [5]. The dynamic address recon-
figuration process [6] of mSCTP allows two SCTP end-points
to add new IP addresses, and subsequently, reset primary IP
addresses for the association after the deletion of IP addresses
from an active association.
II. HANDOFF HANDLING OF SCTP
A. Overview of SCTP
A TCP connection involves a pair of source and destination
IP addresses. This means that even if the sender or receiver is
a multihomed host , only one of these IP addresses per end can
be utilized during the connection. An SCTP association, on the
other hand, supports multihoming service [7]. The sending and
receiving hosts can define multiple IP addresses in each end
for an association. Once one path fails, another interfaces can
be used for data delivery without interruption.
B. Mobile SCTP
SCTP with the ADDIP extension (or mSCTP) would pro-
vide seamless or soft handoff for the mobile host without
support of routers or agents in the networks by making use
of address configuration (ASCONF) messages to add, delete,
and modify IP address. A large amount of packets are blocked
and lost in the duration of path switch because SCTP uses
retransmission to make sure if the original path is broken.
The excessive path switch delay makes SCTP unsuitable
to design mobile network handoff schemes, especially for
delay-sensitive applications like VoIP. We will demonstrate
the SCTP path switch delay with using Linux kernel SCTP
library [8], [9] in our experiments. Furthermore, we propose
an approach which intelligently bypasses retransmission phase
without modifying the SCTP protocol.
III. EXPERIMENTS AND PERFORMANCE ANALYSIS
A. Experimental Setup
The client and the server machines were running Ubuntu
Linux 8.10 operating system in the experiment environment. In
addition, both machines installed Linux kernel SCTP library,
i.e., libsctp-dev and lksctp-tools, as our experiment hosts.
The client host is equipped with two network interface cards
(NICs), Ethernet and WiFi, and the server is with Ethernet
However, retransmission procedure is necessary in SCTP and
cannot be disabled to avoid incorrect path switch decision.
In the next experiment, we will propose our approach which
makes the path switch immediately and correctly without
doing retransmission trials.
Fig. 2. The IO Graphs of Experiment. B
3) Experiment C: From the above two experiment results,
we can figure out the main delay to be taken in the detection
of path broken. Consider the mobile network applications.
The mobile client handoff will make the path broken. So in
most cases, the client can detect the path failure immediately.
However, the server side cannot get this information and
must use timeout and retransmission scheme to make sure
the path failure. It is time-wasting. So we can exploit the
characteristic of client site’s immediate path failure detection
to make server switch path earlier without enabling time-
wasting retransmission. In our approach, when the client finds
the path broken, it immediate sends a short data packet (the
payload can be empty or just one byte dummy data) to server
from the new path (i.e., new NIC’s IP address). The server
receives this dummy data packet from client through new path.
It must send a SACK to client for acknowledgement through
new client NIC. Like TCP, SCTP is always piggybacking data
over SACK packet to save the transmission cost. Thus, the
data flow from server to client will be unconsciously directed
into the new path to client. In this experiment, the server
no longer enables the retransmission procedure to make data
flow path switch decision. But it is a client triggered path
switch. This is shown in Figure 3. When the client finds the
IP1 NIC disconnected, it immediately sends 1-byte dummy
data packet to server to direct data flow of server to client
into IP2 NIC. The following experiment results will show our
approach to be very useful and efficient, and will completely
avoid retransmission delay.
Receiver
Sender
SACK(S)+1byte DATA(R)
SACK(R)+DATA(S)
(Mobile Client)
(Server)
IP1
IP2
SACK(S)
DATA(S)
Fig. 3. 1 byte pseudo data from receiver to sender.
In our experiment, we let IP1 be Ethernet NIC and IP2
be WiFi NIC. The server has only Ethernet NIC. The data
flow is coming from the server to the client. SACK(S) and
SACK(R) mean the acknowledgements for server and client,
respectively. DATA(S) is the regular data flow from server
to client, and DATA(R) is 1-byte dummy packet to speedup
server path switch. From the output of Wireshark network
analyzer, the data flow is completely matching our expectation
to switch to the new path without enabling retransmission. So
the path switch delay is much reduced.
Fig. 4. The IO Graphs of Experiment. C
Figure 4 is the Wireshark IO Graph output. We could see old
NIC replaced by new NIC very quickly. It is almost seamless
(no gap existing) during the path switching. The result is
absolutely accepted by mobile network application, e.g., VoIP.
The duration is lasting for 2.5 seconds until data flow into
new NIC is stable. Also, the throughput is almost keeping
the same during the path switch (Observe that the time ticks
become twice faster than the original flow and the number
of data flow received becomes half). So we never feel any
interruption during the path switching. When sender receives
the 1 byte data, it piggybacks its data to SACK to client IP2,
and no longer sends data to client IP1. This is why we do not
feel any interruption.
IV. CONCLUSION
SCTP’s retransmission-based switching decision policy re-
sults in excessive path switch delay. We demonstrate the
poor performance of the current SCTP implementation (Linux
kernel SCTP library), and subsequently, propose an approach
to intelligently bypass the retransmission-based path switching
policy. The experiment results show that the path switch delay
can be significantly reduced and has no negative impact on the
performance.
REFERENCES
[1] S. Koh, Q. Xie, and S. Park. (2005) Mobile sctp (msctp)
for ip handover support. Internet draft. [Online]. Available:
http://tools.ietf.org/html/draft-sjkoh-msctp-01
[2] L. Ma, F. Yu, V. Leung, and T. Randhawa, “A new method to support
utms/wlan vertical handover using sctp,” vol. 11, no. 4, pp. 44–51, 2004.
[3] M. Riegel and M. Tuexen. (2005) Mobile sctp. Internet draft. [Online].
Available: http://tools.ietf.org/html/draft-riegel-tuexen-mobile-sctp-05
[4] A. Hakkinen, “Sctp - stream control transmission protocol,” In Seminar
on Transport of Multimedia Streams in Wireless Internet, Dep. Comp.
Sci., Univ. Helsinki, Oct. 2003.
The 16th Asia-Pacific Conference on Communication 
(APCC 2010) 
 
第十六屆亞洲太平洋國際通訊會議 
出席報告 
 
林俊宏 
國立中山大學資訊工程學系 
 
1.會議重要性 
 
隨著網際網路的不斷發展，網路應用的多樣化，以及硬體設備的快速進步，網
路應用技術也向著更多樣、更複雜的方向發展。而經過多年的發展，網際網路已經
在社會的各個層面為全人類提供更多的便利性。但是伴隨著行動網路、P2P 分享系
統、即時訊息、視訊會議，多媒體串流傳輸、電子商務等各式服務的推出，卻也衍
生出許多尚待探討的服務品質及效能問題。網路與通訊工程領域的相關研發人員極
需一個能討論未來網路通訊技術發展方向的交流機會。APCC 2010 會議在網路應用
服務、先進網際網路協定、行動隨意網路、無線感測網路等方面均安排有相關議程，
能讓與會工程界及學界人士進行研究成果分享及議題研討。 
本次 APCC 2010 (第十六屆)由 KICS、IEEE、IEICE、CIC (中國通信學會) 、
AUT University 等共同舉辦之國際會議於民國九十九年十月二十九日至十一月三日
在紐西蘭奧克蘭市的 Langham Hotel 召開為期四日的會議，旨在針對各項最新無線
通訊與電腦網路議題進行論文發表及意見交換。APCC 是亞洲太平洋尖端網際網路
技術領域內的重要會議，每年均會收到許多資料網路通訊領域最新的論文投稿，大
會並擇優進行發表及研討，今年已是第十六屆了，是一個相當有歷史的國際會議，
會議規模及與會人員有逐年擴大之趨勢。會議包含 Workshop、Tutorials、技術論文
分組發表等部分。與我個人研究相關的主題場次有：無線網路、無線感測網路、ad hoc
行動網路、網路控制與分析、Cross-layer Design、Relay & Cooperative 
Communications、Cognitive Radio and Networks、Handover in Wireless Networks 等領
域，分別進行論文發表與研討。 
 
2. 參加會議經過 
 
得並進行有趣的文化交流。與會人士均為各國知名學者及公司研發人員，藉此機會
讓出席本會議的人士都能夠彼此認識並分享研發心得與資訊，可說是一次非常成功
的學術活動。 
 
3. 重點議程紀要 
 
本次會議中有多個與我們的研究領域及興趣緊密相關的議程及論文發表。如
【Ad Hoc & Sensor Network – Optimization and Security】議程，在探討 Ad Hoc 
Wireless Networks 通訊網路架構下可能遭遇的資源分配及網路管理等挑戰。而提昇
服務效能的技術發展過程中相關的研發瓶頸所在也被廣泛地提及。{Opportunistic 
Node Authentication in Intermittently Connected Mobile Ad Hoc Networks}一文探討
以分析方法來觀察若干網路行為進而建議能有效增進通訊效能的提案。與會研究人
員熱烈地在議程結束後交流彼此研發經驗，也讓我們對未來技術發展趨勢有更深刻
的認識。 
在【Wireless Networks】及【Network Control and Analysis】中，新型態無線
通訊系統及其應用服務有完整的研討。無論是異質無線網路系統整合或無線骨幹
(backhaul)效能改進，均是目前最迫切的研發重點。精闢的報告內容擴大了我們在無
線通訊領域下的研究視野，並且也加入了當前備受關注的車載網路應用的議題。
{Multi-User and Channel Dependent Scheduling Based Adaptive Power Saving for 
LTE and Beyond System}便是探討多通道網路通訊的相關論文，在系統基礎架構及
節能應用等方面也都有多篇報告發表。許多新穎的技術被相繼提出，相關應用亦備
受期待，所以車輛通訊系統也成為我們爾後重點研發領域。 
各類網路服務的 QoS 始終是最受矚目的議題。在{A TCP Congestion Control 
Method for Real-Time Communication Based on Channel Occupancy of a Wireless 
LAN}文章中即針對 TCP-based 多媒體串流通訊進行最新的 QoS 控制研究成果發
表，配合優先權分派技術來讓不同型態的網路多媒體服務品質得以維持，並提供了
新穎的相關技術研發方向。 
 
4. 與會心得與未來工作 
 
APCC 2010 國際學術會後，我們深感在研發方向及學術情報交流上獲益良多。
能與來自全球同屬相近研究領域的專家學者共同針對最新的研究成果進行交流，機
國科會補助計畫衍生研發成果推廣資料表
日期:2011/02/10
國科會補助計畫
計畫名稱: 設計與實作Linux VoIP多媒體代理伺服器與嵌入式行動使用者端平臺
計畫主持人: 林俊宏
計畫編號: 96-2628-E-110-010-MY3 學門領域: LINUX推動計劃
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
