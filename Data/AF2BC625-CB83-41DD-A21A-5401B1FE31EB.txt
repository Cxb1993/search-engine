 - 2 -
 
用於嵌入式多媒體並行處理之低功率可重置式處理器矽核之研製--總
計畫(3) 
Low Power Reconfigurable Processor Cores for Embedded Multimedia Parallel Processing (III) 
計畫編號：NSC 95-2221-E-006-067 
執行期間：95 年 8 月 1 日 至 96 年 10 月 31 日 
主持人：周哲民  國立成功大學電機工程學系(所) 
 
中文摘要 
伴隨著半導體工業的快速進步，對於可攜式的通訊多媒體系統應用需求越來越龐大。此
外，越來越多的電晶體能被置入一個單一的晶片上，將構成一單晶片系統(SoC)。但是目前廣
泛使用的晶片內匯流排架構缺乏可調節性（scalability），無法滿足未來複雜通訊多媒體系統內
部大量的通訊需求，而近年來漸受重視的單晶片網路（Network-on-Chip, NoC）架構則是解決
此一問題的有效方法。本整合型總計畫即設計與實現一個適用於多媒體資料處理的可重置低功
率單晶片網路系統平台，用於未來複雜可攜式通訊多媒體單晶片系統的設計。 
 
 
 
英文摘要 
As the advance of semiconductor industry, the demand of the portable communication and 
multimedia system is more and more huge. Besides, more and more transistors can be put into a 
single chip to compose a system-on-chip (SoC). Current on-chip bus lacks scalability, which will 
result in unacceptable performance degradation of the communication and multimedia system in the 
future. Network-on-Chip (NoC) architecture, which consists of an on-chip packet-switched 
micro-network of interconnection, better supports the trend of SoC integration. The project is to 
design and implement a low power reconfigurable NoC platform for multimedia processing to 
satisfy the design of complex single-chip portable communication and multimedia system in the 
future. 
 
 
 
 
 
 
 
 - 4 -
一、研究目的 
在導線延遲(wire delay)效應和 SoC 需求凸顯的今日，如何有效運用晶片上巨額電晶體？
又如何整合連接大量異質性硬體 IP？再者，如何進行高速且量大的晶片內資料傳輸？已使晶
片上相互連接網路(on-chip interconnection network)成為 SoC 研究者專注的焦點。而隨著製程技
術進步，SoC 要整合連接的異質性硬體越來越多，導致 SoC 內之通訊架構與整合能力直接的
決定了系統效能、運作與功能，但現今卻沒有一般化可行有效之連接通訊方法。本總計畫研發
一新穎的系統平台—可重置 NoC (reconfigurable Networks -on-a-Chip) 平台及其系統軟體工具 
(compilation and mapping) ，將可有效解決上述的難題。而另一方面，視訊(video)資料傳輸是
現今產學界所強調的應用重點之一：如 PDA、cell phone、遠距教學、遠端監控、隨選影像播
放系統等。也因此，如何在晶片內部連接網路上傳輸視訊資料，也是我們必須探討的課題。最
後，晶片上連接網路所需使用到的可重置性通訊網路介面電路，以及使用在網路上的可重置晶
片內路由器，將是我們整合 IP 硬體的關鍵技術所在，冀能達成適應性、可重用性之最終目標。
本總計畫之達成，當可有效幫助國內 SoC 技術之提昇與人才之培養。 
 
二、研究方法 
子計畫一之可重置式低功率處理器核心之指令集定義與對應工。本子計畫第三年發展一個
以塔布演算法為基礎的多重電壓系統對應工具。我們建立了一個管線化排程設計流程並且把此
排程方法做為塔布演算法的目標函數。在效能限制和系統架構限制下，先利用塔布搜尋來找出
多個工作電壓對應和資源對應的解(鄰居)，再利用線性管線化排程決定工作的排程、資料傳輸
的排程和檢查所有解的正確性，從塔布搜尋產生的所有解中，挑出其中最好的解當作下次產生
鄰居的參考解，經過上述多次重複步驟，挑出最佳解為我們最終的結果。我們將整體演算法分
為塔布搜尋（Tabu Search）和管線化排程。 
塔布搜尋演算法是由科羅拉多大學 Fred Glover 教授在 1997 年所發表的啟發式搜尋法，主
要常用於解決最佳化的問題。其精神是利用塔布串列（Tabu list）記錄最近幾個移動（move），
避免搜尋過程中，重複走過相同的路徑。每次移動都由上一次移動中的區域最佳解（第一次移
動從初始解開始）產生並且搜尋所有附近鄰居，找出鄰居中的區域最佳解，再利用塔布串列、
凌駕規則和記憶架構來協助避免陷入區域最佳化，以完成全域搜尋的目標。 
圖一為整體演算法的流程圖，其中輸入 DFG 是指應用程式的資料流程圖，MLIB 則描述
著系統架構。鄰居(解)的編碼是本演算法特色之一，我們將資源和電壓對應一起編碼。以圖二
為例，F2 可以被對應到 3 種資源，其中 2 種資源各有 3 種電壓，所以共有 7 種可能性，最後
再利用功率排序，圖三顯示編碼後值越低功率越小，此種編碼利於用 branch and bound 加速塔
布搜尋。 
 
 
 
 - 6 -
 
根據圖一可將塔布搜尋分為 7 個重點： 
1. 初始解(initial solution) 
越好的初始解就越快收斂，我們初始解是利用 CNPT 產生並給予最高電壓，其目的是為讓
搜尋方向更自由。 
2. 鄰居(neighbor) 
每一次移動都由上一次移動的區域最佳解為基準產生鄰居，鄰居產生的方式只更改編碼中
的其中一個位元(bit)。所以上個移動的區域最佳解和目前移動的區域最佳解的編碼只會相
差一個位元。 
3. 移動(move) 
從產生鄰居到找區域最佳解的所有步驟(圖一紅色虛線圈包含所有步驟)，稱為一個移動。 
4. 塔布串列(tabu list) 
塔布串列會記住以前固定次數移動所選擇的位元，避免搜尋過程中重複走過相同的路徑。 
5. 記憶架構(memory structure) 
記憶結構的功用是為了跳脫區域最佳化，主要分為長期與短期記憶結構。短期記憶結構為
上述的塔布串列；而長期記憶結構分為加強性(Intensification)和多樣性(Diversification)。
加強性會記住以前所有區域最佳解，避免重複走過；當搜尋已經陷入區域性，多樣性會重
新選擇初始解，重新搜尋。 
6. 凌駕規則(aspiration criterion) 
凌駕規則用來彌補塔布串列的缺點。被塔布串列鎖住的 bit，理論上不會被產生鄰居，但有
可能被鎖住的 bit 會產生比目前最佳解還要更好的解，此時這解就會被接受。 
7. 停止規則(Stopping criterion) 
停止規則用來決定塔布搜尋何時結束。 
根據 DFG 和 MLIB 的資訊，我們利用 CNPT 產生資源對應並給予最高電壓，當作初始解，
再利用初始解和塔布串列產生鄰居，檢查加強性，淘汰以前走過的解，找出此移動區域中的最
佳解。最後檢查停止條件，如果不符合，圖一的 current solution 是此移動中區域最佳解，經過
多樣性，利用 current solution 產生鄰居，進行下一次移動。重複上述動作，直到滿足終止條件，
所有移動最好解為塔布搜尋結果。 
在每一個移動中，會產生大量鄰居，每一個鄰居(解)都必須經過管線化排程，以決定工作
的排程、資料傳輸的排程並且檢查所有解的正確性。為了使塔布搜尋更有效率，我們希望管線
化排程可以強力且快速，而我們發現串列排程（list schedule）非常適合我們需求。CNPT 是多
種串聯排程中，較適合同時解決對應和排程問題的方法，所以我們以 CNPT 為基礎，修改成
串列管線化排程。串列排程有兩個重點，第一個是如何決定工作執行的順序；其次是如何決定
工作開始執行的時間。下面將詳細說明兩個重點： 
1. 排程順序(schedule ordering) 
因為考慮到每一個解只需要一組排程順序，所以我們捨去一般的權限或啟發式搜尋的做
法，改用排程順序池（schedule ordering pool）。再利用圖四（動態排程順序取代）的方法，
（經由軟體）的方式實現，因此在執行緒的發配、管理、切換上仍然效能不足，而在本設計中
將以硬體的方式支援，透過擴充舊有的指令集來配合硬體，實現出高效能的多執行緒 JVM。
此設計亦具有延展（Scalable）的特性，使用者可以依照需求擴充 PE（處理單元）數目，透過
硬體動態地分配執行緒到每個 PE 上，並能互相地同步與溝通，達到執行緒並行處理（Thread 
Level Parallelism）。 
 
圖 5 為主要的系統方塊圖，上/下分別代表軟體與硬體功能區塊： 
 
 
 - 8 -
 
 
 
 
 
 
 
 
 
 
 
 
 
 
圖 5  MTJVM 系統架構 
 
架構特色： 
1. 軟硬體共同設計（HW/SW Co-Design） 
2. 指令集延伸與最佳化（Optimized Instruction Set） 
3. 不需重新設計編譯器 
4. 硬體支援之執行緒管理 
5. 執行緒並行執行（TLP-Thread Level Parallelism） 
6. 不需軟體或作業系統輔助 
7. 效能、面積具有延展性（Scalability） 
以下範例擷取至 FIR.class 中，其程式碼與類別檔可在附錄（一）取得。（圖 6 左）舉出程
式 FIR 在執行時期（Run-Time）呼叫副程式所需之動作；（圖 3-2 右）為 FIR.class 解譯之常數
區。 
Bytecode Stream Example:    
aload_0 (從區域變數中讀出 Reference) 
invokespecial -> CP[1]（到常數區編號 1 中抓取資訊） 
 
CP[  1] = Method :   4 , 23
CP[  2] = Field_Info :   3 , 24
CP[  3] = Class  :  14
CP[  4] = Class  :  25
CP[  5] = UTF : temp
CP[  6] = UTF : [C
CP[  7] = UTF : <init>
CP[  8] = UTF : ()V
CP[  9] = UTF : Code
CP[ 10] = UTF : LineNumberTable
CP[ 11] = UTF : LocalVariableTable
CP[ 12] = UTF : this
CP[ 13] = UTF : LFIR;
CP[ 14] = UTF : FIR
CP[ 15] = UTF : ([C[S)V
CP[ 16] = UTF : i
CP[ 17] = UTF : C
CP[ 18] = UTF : X
CP[ 19] = UTF : Y
CP[ 20] = UTF : [S
CP[ 21] = UTF : SourceFile
CP[ 22] = UTF : math.java
CP[ 23] = NameAndType :   7 ,  8
CP[ 24] = NameAndType :   5 ,  6
CP[ 25] = UTF : java/lang/Object
 
 
 
 
 
 
 
 
 
ja
 
va/lang/Object
Tag:1->UTF
Name&Type_index:23
Class_index:4
Tag:10->Methodref
Descriptor_index:8
Name_index:7
Tag:12->Name&Type
Name_index:25
Tag:7->Class_Info
<init>
Tag:1->UTF
()V
Tag:1->UTF
圖 6 副程式呼叫 
 
執行副程式呼叫前，該副程式所在之索引（Reference）會從區域變數中載入到堆疊最上
層，並執行呼叫指令（invoke）。Invoke 指令會有 2Byte 之資訊指向常數區，以此範例來講為
常數區 1 號的位置（CP[1]）：首先到 CP[1]中抓取 Tag 解譯，取得方法索引（Method Reference，
Tag:10），並得到一對 2Byte 之資訊（4 與 23），分別指向常數區 4 號與 23 號，再依序展開後
可得到完整的方法資訊 java/lang/Object.<init>()V 利用此資訊於 MethodTable 中找尋真正的跳
躍資訊，方能進行副程式呼叫。（詳細可參考 JVM Spec.） 
當類別載入者沒有對副程式的呼叫進行解析，則每次呼叫副程式就必須完成上述之動作，
經由層層的 Symbolic Reference 才能得知跳躍資訊，此舉往往造成相當高的負載，因此可在類
別載入者的設計上，將此情形考慮進來，在解譯完整個的類別檔後，建構出解析的必要資訊，
並將 invoke 類指令之常數區指引（Constant Reference）直接換成跳躍地址，例如 invokespecial 
-> CP[1]置換為 invokespecial -> 0x00XX，令副程式呼叫的 Overhead 降至最低。類別載入者執
行完畢後，會產生執行時期所需要的記憶體資訊，供處理器使用。 
 
多執行緒程式（MultiThreading Program） 
 - 10 -
 - 12 -
（時間點 2）：（PE1）B1 循序執行，直到非預期的 Context Switch 發生（Exception）， 
切換程式 A2.1 進入 PE1、程式 B1 會進入 Wait Set 等候條件結束，才會回至 Ready 
Set。 
（時間點 3）：（PE0）C1 順利執行完畢，且新生出兩執行緒（C2、C3:Priority 2）， 
切入 A3 到 PE0。 
（時間點 4）：（PE0）A3 順利執行完畢，此時在 Wait Set 中的程式 B1 已被喚醒， 
回至 Ready Set 中，成為優先權最高的執行緒，隨即切入 PE0。 
（時間點 5）：（PE1）A2.1 執行到 I/O Request 發生，並進入到 Wait Set 等候、 
   切入 C3 到 PE1。 
（時間點 6）：（PE1）C3 對 C2 要求資料失敗（C2 尚未執行），切入 C2 到 PE1。 
（時間點 7）：（PE1）C2 順利執行完畢(C1 資料已 Ready)，再切回 C3 至 PE1。 
（時間點 8）：(PE0)B1 結束，切入 A1 執行（A2 I/O 已結束）。 
 
 
討論：多執行緒程式的撰寫將直接影響到硬體效能，若時間點 6 時，PE1 所切入的執行緒
為C2而非C3，使得C3執行前所需要的資料已準備好，即可省掉一次環境切換（Context Switch）
所造成的 Overhead；因此當程式設計師撰寫程式時，應具備有基本的硬體觀念，才能充分運
用資源資源，達到較佳的效能。 
 
 
 
 
硬體架構 
指令集（Instruction Set） 
 本架構中完成了 JVM ISA 中 6 成的指令（約 110 道），並額外增加了 11 道指令，用來支
援多執行緒的處理與 7 道輔助指令，支援較複雜的 Bytecode。表 6 為 JVM 指令集總覽，藍體
字代表硬體所支援之指令，灰斜體字代表未實作，表最下方兩欄為新增指令。 
Type Java Bytecode 
load  aload, iload, lload, dload, fload,  
load (short) aload_0, aload_1, aload_2, aload_3, iload_0, iload_1, iload_2, iload_3, 
lload_0, lload_1, lload_2, lload_3 
dload_0, dload_1, dload_2, dload_3, fload_0, fload_1, fload_2, fload_3, 
store astore, istore, lstore, dstore, fstore  
store (short) astore_0, astore_1, astore_2, astore_3, istore_0, istore_1, istore_2, istore_3, 
lstore_0, lstore_1, lstore_2, lstore_3 
表 7 為操作碼（8-bit）編排後的範例，經編排後，許多特性可以輕易地被解碼：當解出
OP[7:4]（0001）後，OP[3]可直接當作控制訊號（0：代表指令型態為整數 integer、 1：代表
指令型態為索引 reference）、OP[2]（0：代表指令型態為載入 load 、 1：代表指令型態為儲存
store）、OP[1:0]為區域變數的取值偏移量，上述之動作幾乎不必耗費邏輯閘，僅僅是拉線的動
作而已，而其他操作碼經適當安排後，均有助於解碼速度的提升與面積節省。（附錄（二）為
最佳化之操作碼） 
然而變更操作碼會衍生出相容性問題，使得原有的 Bytecode 無法順利執行，在此提供兩
種解決方法： 
（一）更改編譯器中操作碼對應表，產生最佳過後的操作碼。 
（二）類別載入者在載入 Bytecode 時，將舊有的 Bytecode 操作碼置換為最佳過後的操作碼。 
 
若採用方法（一）會使得硬體不能執行正規的類別檔（*.class），只適用於該編譯器所產
生的指令，通用性因此而下降；故本設計中採用方法（二），使正規的類別檔能繼續延用，但
此舉亦會增加類別載入者的負擔（相當於硬體複雜度由軟體吸收）；由於類別載入者每載入一
個類別檔，就能夠重複一直使用，因此經評估過後，方法（二）是可行的。 
基本處理單元（Processing Element）設計 
 圖 8 為基本 PE（Processing Element）之功能方塊圖，包含 6 級的管線設計： 
（1） 指令擷取，Instruction Fetch 
（2） 指令解碼，Instruction Decode 
（3） 運算元擷取，Operand Fetch 
（4） 執行運算，EXecution  
（5） 記憶體存取，Memory Access 
（6） 寫回，Write Back 
 
 - 14 -
 
 
 
 
 
 
 
 
 
暫存器所需要的暫存器大小，在相關論文中有進行探討，應付一般用途的程式，32x32-bit 的
暫存器大小已足夠，故本架構在每個 PE 均配置有一組 32x32-bit 暫存器可供使用，但當應用
程式使用超過 32 個暫存器時，則必須寫回記憶體再作存取。 
 
此級的功能包括運算元的擷取、立即值有號擴充（調整不同長度的立即值）以及堆疊指標
的更新、管理與復原（分支成立或副程式返回）。 
 
（圖 10）舉出執行時期，程式 1 呼叫程式 2 時所產生的堆疊框（Stack Frame）變化情形：（Frame 
1/2 分別代表程式 1/2 執行時期可使用的堆疊，藍色方框代表執行時期正在活動的堆疊框
（Active Frame）） 
 
時間點 0： 
暫存器均尚未被使用（0 號暫存器，永遠為 0） 
時間點 1： 
程式 1（Frame 1）被載入堆疊，形成 Active Frame。 
載入程式之前，特別設計了一道輔助指令Set_Stack_Frame1（Args，MaxLV），用來設定兩
個堆疊指標（Top Of Stack：堆疊頂標、Buttom Of LocalVariable：堆疊底標）TOS：會依
據每道指令使用堆疊的情形增減；BOL：程式消失前均保持不變，該指標用來索引區域變
數，例如指令aload_0，其所代表的物理意義為：到區域變數 0（LV0）的位置取值並放到
堆疊頂端： 
reg[TOS+1] Å reg[BOL+0] & TOSÅTOS+1;（reg[N]=N 號暫存器） 
Note: LV0 存放的內容通常為該程式之（This）索引 
 - 16 -
  
  
 
 
 
 
 
 
圖 10 呼叫副程式所產生之堆疊變化 
                                                 
31
……
13
12
11
10
9
8
Stack 27
Stack 16
Always 0
1 指令 Set_Stack_Frame {Args，MaxLV}長度為 3個 Byte，包含兩個參數 Args、MaxLV，分別代表該副程式所傳
入的參數數目與最大的區域變數使用量，此兩參數可由類別檔中獲得。 
Stack change on method invocation
R
eg
is
te
r F
ile
LV 0
LV 1
LV 2
LV 3
Stack 05
4
3
2
1
0
Time 0
31
……
13
12
11
10
9
8
7
6
Always 0
5
4
3
2
1
0
31
……
13
12
11
10
9
8
Arg 17
Arg 06
Always 0
LV 0
LV 1
LV 2
LV 3
Ref5
4
3
2
1
0
31
……
13
12
11
10
Stack 19
Stack 08
LV 27
LV 16
Always 0
LV 05
4
3
2
1
0
TOS
Time 1 Time N Time N+1
… Frame 2BOL
TOS
Frame 1
Active
Frame
BOL
Æ{0x4, 0x5, 0x2, 0x1} 
 步驟五：寫回記憶體 mem[N]Å{0x4,0x5,0x2,0x1} 
  
 完成上述之步驟將花費許多時脈；而 4 Bank 的記憶體架構可以有效解決， 
（圖 11）中 Bytecode 所代表的物理意義與（範例 3-1）相同，3 個欄位（5、2、0x000N）代
表堆疊最上方的 3 筆資料，而指令 bastore（= Byte Array Store）代表對單位為位元組（Byte）
的陣列（Array）進行寫入；本架構中將以兩個時脈完成： 
時脈 1： 利用堆疊最上方兩筆資訊（5、2）， 
將“5”左移 2 ByteÆ{0x0,0x5,0x0,0x0} 
時脈 2： 利用堆疊最下方兩筆資訊（2、0x000N）透過微指令（baddr_conv） 
完成：首先計算出位址 0x000N + 2>>2；產生記憶體致能訊號 0100’b4 (Enable Bank 
3)，並將時脈 1 所完成的運算 0x0500 寫入 Bank 3。（將 2 右移 2 位元是因為該陣列的
單位為 Byte，所以陣列[0~3]，均位於記憶體位址 N 裡） 
 
 - 18 -
 
 
 
 
 
圖 11  bastore 指令實現流程 
 
而非整數資料的讀取則以反向手法完成，這種獨立控制 Bank 的方式，可以擁有很好的效
能，特別在大量的非對齊式存取。 
 
寫回： 將 ALU 運算結果或記憶體資料寫回暫存器。 
執行緒管理者（Thread Manager） 
 本架構將以硬體方式實做出 JVM 中的一些執行緒原型（Primitive）表 8，如 java.lang.Thread
中的 yield（）、wait（）、notifyall（）、sleep（）以及同步（synchronization）與優先權（priority）
的管理，其好處是不需 OS 的輔助、執行緒可以快速的反應（若透過軟體則需耗費數百~數千
個時脈）。透過此硬體（執行緒管理者）更可與 Processing Element(s)所構成的 Processing Unit
進行整合，來達到執行緒的並行處理（TLP）。 
 
mem(0x000N + 2>>2) Å0x0500
0x000N
2
5
bastore
Cycle 1 :   0x0005 Æ 0x0500
Cycle 2 :   Address (0x000N + 2>>2) = N
124
MEM_EN = (0100) Î Bank3 is enable.
1234
5
Bank4 Bank2 Bank1Bank3
mem[N]
mem[N]
訊號；矽核和匯流排傳輸過程中所溝通的 signals definition，則被定義 control set。因此，透
過此規則化的分類和分析後，我們可針對不同的匯流排規格產生統一的矽核傳輸包裹表示式
(transfer representation)。最後，矽核核心(Core)可藉由此 transfer representation 對 MCI 發出匯
流排要求。Control signals 將於 MCI 與不同匯流排溝通電路所使用，我們描述於步驟 3 內。
MCI 並非在產生新的 VCI 協定，我們旨在簡化矽核核心與介面的溝通方式。 
步驟 2. Functional template development: 圖 13 為 MCI 介面硬體電路，其中 Multi-mode 
module 由 dynamic engine、Communication generator 和 Trigger generator 所組成。Dynamic 
engine 將分析一連串的 bus interactions 且判別 MCI 內匯流排傳輸的狀態。Communication 
generator 會轉譯 Dynamic engine 的輸出和傳輸包裹(矽核核心放置於 MCI 內部 Queue)為目標
匯流排的規格。Trigger generator 依據 MCI 內部系統匯流排設定來分析匯流排的 reponses 給
Dynamic engine。由我們的經驗，開發一個 dynamic engine 是很費時的工作；我們的方法是
開發 bus functional templates，此 bus functional templates 定義矽核核心與所選定的匯流排規
格所對應的 interactions。Functional template 是一個矽核與不同匯流排規格溝通的抽象描述，
且可被再利用於其他的多模組介面的開發。 
 
 
圖 13. Multi-mode Communication Interface Architecture 
 
Functional template 由一組 states 和 edges 所組成。 State 代表一個匯流排傳輸目前的處理
狀態，例如：矽核正發出一個匯流排傳輸要求或 MCI 正在等待匯流排資料的回應等。State
的切換由 edge 上的訊號(signals)所決定，此 signals 抽象地表示匯流排或 MCI 內部處理的回
應，例如：一個 single read/write transaction 所對應的 functional template 可被以 initial state、
bus request state 和 data transfer state 所表示。當匯流排同意控制權於矽核且資料也 readys 時，
bus request state 將切換至 data transfer state。 此外，多個 functional templates 可被實現在一
個 MCI 內。 
步驟 3. Template mapping:在步驟 1 中我們分解了所選擇的匯流排規格的 signals definition
為 qualifier signals 和 control signals。步驟 2 中我們分析了所選擇的匯流排規格且開發
functional templates，但在 functional templates 中的 edge 為 general-case signal definition，並無
法直接與不同匯流排溝通。此步驟中，我們將一對一地 map 步驟 2 所開發的 functional 
templates 於所選擇的匯流排規格中。換句話說，不同匯流排規格的 control signals 將被 map
到 functional templates 的 edge 或 state 的輸入/輸出。此外，我們也需依據匯流排規格來安排
qualifier data 的輸出時間，以致於 MCI 可與不同的匯流排規格進行溝通。  
步驟 4. Design optimization:完成步驟 3 後，每一匯流排規格會擁有一組 MCI 接線定義。
 - 20 -
問題核心在於找出動作向量(MV)來還原此巨方塊，由於 H.264 高壓縮比的特性，載疑失風包實
很有可能造成 MV 以及 DCT 之資訊，因此必須尋找出可能的動作向量。 
由於 MV 是時間還原演算法中的關鍵，因此找出正確的 MV 非常重要。一般而言，遺失區塊之
MV 通常與鄰近區塊 MV 相似，一般而言就是需要從周圍的 MV 中挑選比較適合的 MV 用來彌補遺
失的區塊。如圖 16 可以選擇候補的 MV 有 
1. 水平方向的 MVh ; 
2. 垂直方向區塊的 MVv ; 
3. 依據周圍動作向量參考方向區塊之 MVd . 以圖 16 為例即左上方之 MV 
4. 在周圍區塊中找出中位數之 MV 
5. 將周圍區塊之動作向量取平均 
6. 前一張畫面中相同位置之 MV 
7. 無動作向量 
 
圖 16 Refined temporal concealment 
在眾多時間錯誤還原演算法中，包含動作向量補償以及動作向量預測之演算法可以達到較好的
還原效果。以下列出比較用的時間還原演算法之細節，雖然此方法之動作向量已經接近真實動
作向量(True Motion)，但此演算法仍然不夠完美。 
Motion vector recovery algorithm using polynomial model 
在這個章節裡，我們提出了一個有效率的動態向量補償演算法，在編碼端，每個圖片被切
割成一整群的巨方塊，稱為片段，而每一個片段的檔頭則包含了一個同步訊號，同步訊號則可
以減低傳輸失誤所造成的影響，在 H.264 裡，有兩個方法可以將巨方塊指定到片段裡，就如同
圖 17 所示 
在第一個方法，同一個水平方向的鄰近巨方塊會指定到同一個片段裡。如果封包遺失的
話，我們只能用垂直方向的巨方塊來修復，因為水平的巨方塊已經被破壞，無法使用。令一種
指定方法，是使用交錯法，巨方塊在水平和垂直方向上都有不同封包裡的巨方塊，基於這種交
錯的原則，我們可以假設被破壞的方塊四周都有完好解碼的巨方塊，所以我們就可以有更多資
 - 22 -
 圖 19 Corresponding coordinates of motion vector 
xi 代表位置，yi 代表動態向量，然後我們就可以利用多項式模型來描述鄰近巨方塊的動態向
量的關係，這個多項式表示如下 
 
( ) mmm xaxaaxP +++= ...10      (1) 
其中 a0,a1,…,am 代表著一組可以由給入的點算出來的係數，而這些係數必須滿足在 Pm(x)和
yi 裡面有著最小平方差，然後我們就可以用一個以 Pm(x)以及 yi 所組成的函式來表示平方差。 
當我們有了四個動態向量之後，我們便可以藉由三階多項式來做內插。因為一階多項式沒辦法
做到非線性的內插，而三階多項式擁有快速震盪的特性，所以便非常適合來做內插。不過由於
在自然影片，小區域內的動態向量變化沒有那個迅速，所以三階多項式就顯得沒那麼必要，而
且階數越高，所需要的複雜度也越高，所以我們在這裡便用一個二階多項式來做內插。當鄰近
的巨方塊是作線性移動的時候，二階多項式裡面的二階係數便為零，便會趨近於一個一階多項
式，基於鄰近巨方塊動態向量的關係，我們便可以用來預測在遺失的巨方塊裡面的 Mv1 和 Mv2。 
以物件基礎導向之還原演算法 
為了減少運算複雜度，許多 H.264 的特性被歸納出來。H.264 有兩大特性，第一：有 76.82%
的巨方塊只需參考前一張的畫面便可以被修復。第二：80%的最佳動態向量通常就在遺失的巨
方塊的附近，雖然 H.264 擁有可以參考數張畫面的功能，但是很難去評斷到底哪一張才是最好
的參考畫面，所以為了減少運算量，基於以上兩個結論，我們便簡化成只去找上一張的畫面，
並且我們大部分都只找 P畫面，因為 P畫面出現的頻率最高。 
 
根據上面的第二個結論，鄰近的方塊總是擁有相同的動態向量，所以我們便去定義，假如
鄰近的方塊都有同樣的動態向量的話，我們便稱呼他為一個物件。因為 H.264 傳輸的最小單位
是一個片段，所以我們便假設我們修復的是一個片段，以片段修復為主。 
 
假設在傳輸過程中產生錯誤，以致於一個片段的資料被解碼端所捨棄的話，那我們便從前
一個畫面去找相關的物件來填補所遺失的片斷資訊，過程示意圖就如圖 20 所示 
 
 - 24 -
去限制兩者動態向量的差異，假如與鄰近的動態向量小於這個臨界值的話，我們就稱他為一個
物件，然後加以修補。不過由於這個方法，有可能會同時存在許多的物件可以提供修補，為了
簡化這個問題，我們必以最後找到的物件來作為修補，雖然最後的這個物件不一定是真實動態
向量，但通常都非常接近真實動態向量。示意圖如圖 21 以及圖 22 
 
 
圖 21 藉由可靠的 MV 尋找參考區塊 
 
圖 22 還原物件錯誤的切片 
在圖 21 裡，左邊的是前一張畫面，右邊的則是現在的畫面。B(i＇,j＇)是被 B(i,j)參考到
的區域，B(i＇,j＇)會跟周圍的動態向量做比較，假如與附近的動態向量差異小於一個臨界
值，就遞回的繼續找，直到找部到任何一塊新的動態向量滿足這個條件則停止，底下是虛擬碼。 
 
但是我們並不能保證被破壞的片斷可以用物件完全的修補好，因為有些被破壞的方塊可以在前
一張畫面找的到物件修補回來，但是有些卻沒有辦法找到，尤其是當越複雜的區域，他的動態
向量也相對的越複雜，所以也夠難找到物件來做修補，因為相鄰間的動態向量差異本來就很
大，在這種情況下，通常都是找到非真實的向量來做修補。雖然是非真實的動態向量，但是也
還是可以利用鄰近的方塊來做修補。 
 - 26 -
 - 28 -
三、結果與討論 
子計畫一所產生的結果 : 為了測試此一多重電壓系統對應工具的效能，我們利用 CNPT 
所提供的 DFG 隨機產生器（Random Graph Generator）產生 50 個例子，其中每一個例子的工
作（task）數目是介於 10 個至 50 個，每一個例子的系統架構和限制都不一樣。表 1 顯示出我
們利用『延遲』和『最佳選擇』技巧之後，大部分例子的確比未使用此方法時擁有更好的解，
而少數解不好的例子在執行更多的移動之後，極大部分皆可以得到比較好的解（如表 2 所示）。
表 3 顯示出使用動態電壓調整（DVS）所節省的功率。表 4 為最終實驗的結果，其中 CPU Time
單位為秒，在塔布搜尋中我們使用 300 個移動和 100 個排程順序。我們將塔布搜尋方法與 ILP
作比較，如果 ILP 在我們可接受時間內沒有得到解，我們將和塔布搜尋執行 3000 個移動結果
比較。實驗結果顯示出我們的塔布搜尋方法只需要用 300 個移動和 100 個排程順序，即可在短
時間內收斂到接近最佳解或塔布搜尋極限可達的解。 
 
 
表1、 『延遲』和『最佳選擇』增進結果 
 10 nodes 20 nodes 30 nodes 40 nodes 50 nodes 
Case1 0% 0% 0% 0% +1.26% 
Case2 0% -1.09% -12.47% +2.55% -3.65% 
Case3 0% 0% 0% 0% 0% 
Case4 0% -1.36% -1.21% -1.06% 0% 
Case5 0% +0.30% -6.08% 0% 0% 
Case6 0% 0% -0.49% -1.98% -1.06% 
Case7 0% 0% 0% 0% 0% 
Case8 0% 0% -3.17% 0% +1.26% 
Case9 0% 0% -0.45% -1.19% 0% 
Case10 0% 0% 0% +2.30% -0.51% 
 
 
表2、 更多移動的結果 
Nodes-case Moves Both 
20-5 2200 -0.0% 
40-2 3000 +2.5% 
40-10 500 -2.3% 
50-1 1000 -2.4% 
50-8 5000 -0.6% 
 
 - 30 -
Quartus II 6.0 上編譯，得到實際的 FPGA - Place and Route/Timing/Area，最後於 ModelSim 上
完成 Post-Simulation. 表 9 為實驗所使用之硬體配備、軟體工具與程式語言列表； 
 
硬體配備 軟體工具 程式語言 
CPU P4 3.0G Windows 2000 SP4  
RAM 768MB JBuilder 2005 Java 
 Microsoft Visual C++ C 
 ModelSim 6.0 VHDL 
 Synplify 7.2 Pro VHDL 
 Altera Quartus II 6.0 SP1 VHDL 
表 9 實驗之硬體配備、軟體工具與程式語言 
 
實驗結果 
 測試結果包含了多執行緒的平行處理與同步，並分析效能瓶頸所在，以充分發揮硬體能
力；此外亦說明了本架構之硬體限制以及改善方式。 
 
硬體面積與效能探討 
 本架構之硬體與效能幾乎可達到等比例的成長；在硬體面積評估方面，主要可區分為兩部
分：（1）PE 面積，（2）中央控制控制器（Thread-Manager、Memory-Manager）。表 10、圖 25
為合成於 Altera FPGA Stratix II Family 後所測得之數據；由數據可得知，當 PE 數目增加時，
中央控制器僅會在仲裁電路部分少量增加。因此面積評估可以下列公式簡單代表（表 10）： 
 
 
總面積理論公式 N*P + {G + (N-1)*A}  單位 ALUTs 
第一項（N*P）為 PE 總面積（62%為 Register File, 64-Entry 32-bit Width）。 
第二項{ G + (N-1)*A }為中央控制控制器所佔之面積。 
ALUTs 代表 Adaptive-Look-Up-Table 使用量。 
N：所使用的 PE 數目。 
P：一個 PE 所佔之面積 := 4312 ALUTs（62%為 Register File）。 
G：基本中央控制電路所佔之面積 := 633 ALUTs。 
A :每增加一個 PE，仲裁器所增加的面積 := 55 ALUTs。   
 
公式的推導是由一組 PE 的合成資訊所導出：當系統只存在一個 PE 時，總面積
 
Scalability of Performance
0
50
100
150
0 1 2 3 4 5 6 7 8 9 PE(s)
M
ax
 C
lo
ck
 
 
 
 
 
 
 
 
 
圖 26 系統時脈資訊 
 
 
 
執行緒狀態轉移效能評估 
 執行緒機制以硬體方式實現於本架構上，因此擁有較佳的效率，表 11 列舉出執行緒狀態
轉移所花費的最少時脈數: 
執行緒狀態轉移 最少時脈數 說明 
初始與生成 Æ 準備區 5 執行緒的初始化必須先將索引與初始 PC 寫入記
憶體中的執行緒空間內（Thread Frame Space），最
後生成執行緒並進入準備區（Ready Set）中。 
準備區Æ 執行 2 準備區中每個時脈會輸出一筆優先權執行緒，直
到第二個時脈執行緒確定進入執行狀態後，才會
被清除。 
執行中 Æ 睡眠 2 執行緒睡眠前需經過一個時脈的仲裁，當取得仲
裁後，在第二個時脈寫入睡眠區（Sleep Set）。 
執行中 Æ 等待 2 執行緒進入等待前需經過一個時脈的仲裁，當取
得仲裁後，在第二個時脈寫入等待區（Wait Set）。
同步成功 Æ 繼續執行 2 執行緒同步前，第一個時脈需先檢查同步區中是
否已存在同步資源，若沒有，則第二個時脈取得
同步，並繼續執行。 
同步失敗 Æ 準備區 3 承上，若同步失敗，則多需花費一個時脈，進入
準備區。 
 - 32 -
效能探討：當執行緒數目只有一個時，即使有多個 PE 仍然不會提升效能，因為其他 PE
處於閒置狀態；當 2 個執行緒執行於 2 個 PE 上時，效能有 1.91 倍的提升；當 4 個執行緒執行
於 4 個 PE 上時，則有 3.72 倍的提升。因為 DCT 執行緒能夠平行處理，而不必互相通訊，因
此效能很高，但相對的需犧牲記憶體空間來保持平行度，每個 DCT 執行緒需擁有獨立的影像
讀取/寫入的緩衝空間，不像單一 DCT 執行緒只需擁有一塊共用空間即可重複使用。 
另外可由數據得知，效能無法成理想的線性成長，在此提出探討：因為主程式需執行一段
時間後才會產生出執行緒，並作一些初始的動作，在執行緒完全進到 PE 前，這段期間有些 PE
是處於閒置狀態，因此效能稍微下降，如圖 28： 
 
 
 
 
 
 
 
 
 
 
圖 28 4 個 DCT 執行緒於 4 個 PE 上之執行狀態 
{7,0}PE0
PE1
PE2
PE3
{7,0} –
DCT Main
{7,0} {5,1}
{4,1}
{5,1} {5,2}
{5,2}
{4,2}
{5,3}
{4,3}
{5,3}
{5,4}
{5,4}
{4,4}
…
…
…
…
{Priority, ID}
Ask Thread
New Thread
Get Thread
Switch Overhead
Waste
R
ea
dy
 S
et
R
ea
dy
 S
et
 
為了避免 PE 被閒置，可以同時執行 2 個以上的程式，使 Ready Set 盡量充滿等待被執行
的執行緒。 
 
（B）Accumulation（參考附錄四）：圖 29 為累加測試程式由 1 累加到 10000，主程式將原本
由單一迴圈完成的運算拆解成多個迴圈執行於多執行緒上，並透過同步的機制將每個執行緒運
算完的結果加總。比較基底為單一迴圈執行緒執行於一個 PE。 
 - 34 -0
0.5
1
1.5
2
2.5
3
3.5
4
Sp
ee
dU
p 
10
0%
 
 
 
1 Thread
 2 Thread
4 Thread 
8 Thread
 
 
1 PE 2 PE 4 PE
1 Thread 1 1 1
2 Thread 0.83 1.66 1.66
4 Thread 0.83 1.66 3.31
 [5,3] DWT
0
0.5
1
1.5
Sp
ee
dU
p 
10
0%
1 Thread
6 Thread
1 Thread 1 1 1
6 Thread 0.11 0.141 0.165
1 PE 2 PE 4 PE
 
 
 
 
 
 
 
 
 
 
圖 31 Workload of [5,3] DWT（X 軸為 PE 數；Y 軸為效能的提升，單位為 100%） 
 
效能探討：此範例說明了執行緒並非必定能提升效能，反而有時會造成效能瓶頸所在。從公式
5-1、5-2 得知，求得一組高通與低通濾波資料，其實僅需少數時脈；但若將公式 5-1、5-2 改
寫成同步多執行緒，其同步程式所佔的比重大於等於資料運算量，反而增加許多不必要的複雜
度；在此範例中對多執行緒做初始化所花費的時脈數甚至是單執行緒總執行時間的 5 倍（初始
化過程，多組 PE 為閒置狀態），其餘的效能下降則耗費在同步與環境切換上。 
 
硬體限制 
 由於執行緒是以硬體支援方式實現於本架構上，擁有較佳的效能（執行緒能夠快速反應），
而不必再透過 OS 或軟體管理，但相對地彈性較差，因為實際上硬體資源是有限的，可使用的
執行緒為 16 道（ID 0~15）、Ready/Sleep/Wait/Synchronization Set 亦有數量上的限制（表 12），
若完全以硬體支援，必定會遭受限制且成本上升，因此軟體的輔助仍然是必需的，例如執行緒
消失後可回收 ID，或是當 Set 容量滿時，可暫時擺置於記憶體內等待硬體資源，這些動作可
以利用軟體來完成，達到效能與彈性的平衡。 
硬體限制 
0 Heap 可使用的空間受限制。 
1 執行緒數目上限為 16 個（ID 0~15）。 
2 Ready Set 內允許存在 8 組等待執行之執行緒。 
3 Sleep Set 容量為 4 組執行緒。 
4 Wait Set 容量為 8 組執行緒。 
 - 36 -
Address N/A HADDR Mn_ABus 
RNW N/A HWRITE Mn_RNW 
TYPE/ 
TIMES 
N/A N/A Mn_BE 
TYPE/ 
TIMES/ 
SIZE 
N/A N/A Mn_Size 
SIZE N/A HSIZE N/A 
TYPE/ 
TIMES 
N/A HBURST N/A 
N/A STATE HTRANTS N/A 
N/A RdBurst N/A Mn_WrBurst 
Communic 
-ation 
Generator 
N/A WrBurst N/A Mn_RdBurst 
 
表 14. TRIGGER GENERATOR I/O 
Input Output 
 From 
AHB Bus
From 
PLB Bus 
To Dynamic Engine 
HRESP N/A RESCDN 
HREADY Mn_AddrAck AddrAck 
HREADY/
HWRITE
Mn_RdAck ReadAck 
Trigger 
Generator 
HREADY/
HWRITE
Mn_WrAck WriteAck 
 
 
 
 
圖 33. AHB/PLB Multi-mode Communication Interface Architecture 
 
 - 38 -
圖 36. FPGA simulation for proposed interface 
 
 
2) Energy-Efficient Dual-Edge Triggered Level-Converting Flip-Flop  
A. Simulation Setup 
我們的模擬環境設計如圖 37 所示，每一個正反器(flip-flop)的輸入都是一個五倍的標準反
向器組成的緩衝器，而其負載皆為一個十倍的標準反向器，而在所設計的 D2LCFF 中，還加
入了具有控制休眠模式的休眠控制訊號，模擬的低電壓是 1.25V，是高電壓 1.8V 的百分之七
十，利用百分之七十的電壓作為較低供應電壓是在雙重供應電壓系統中具有效率的設計方
法。在比較上，由於 SLLS 和 PPR 等架構比起 PHL，SPFF，或 CD-LCFF 擁有較高的 PDP
特性，因此我們以下將只比較 PDP 特性比較好的後三架構。 
為了公平比較每個架構，所有的 flip-flop 都會以 TSMC 0.18um 的電晶體來實現，所有的
架構將以雙重臨界電壓的電晶體重新設計，並且根據同一個 sizing 的原則作最佳化。由於
TSMC 0.18um 並未直接提供兩種臨界電壓的電晶體，因此我們將以其中一個中等臨界電壓
(medium-Vth)作為低臨界電壓電晶體的應用，然而，此一應用所必須留意的是其面積的消耗
與閘極(gate)端所展現的負載電容將提升。此一現象已包含在設計最佳化的過程之內。 
 
 
圖 37. Simulation environment (Supply voltage of colored inverters is low voltage, VDDL; and 
high voltage, VDDH, is the supply of those white inverters.) 
 
B. Experimental Results 
我們將實驗的結果列如表 15，其中包含了最小 D-Q 延遲時間，setup time， hold time，不
同轉換頻率 (switching activity,α)，功率消耗以及 PDP 的比較結果。PDP 的結果是由最小
D-Q 延遲時間乘上α=50%時的功率消耗而得。模擬的條件是使用 TSMC 0.18um，使用電壓
為 VDDH =1.8V，VDDL =1.25V，模擬頻率對於雙緣觸發的 level-converting flip-flop (包含
D2LCFF 和 CDLCFF)為 250MHz，然而對於單緣觸發的 level-converting flip-flop (包含 PHL
和 SPFF)則為兩倍，500 MHz。 
 
 
 
 - 40 -
張頁面還原完成時，遺失的切片亦會接著被還原，在圖 39 中描述一張頁面會有 13 個切片，
而在圖 40 中描述第 5個切片被遺失的狀態。 
 
 
圖 39 整張畫面中之切片 
 
 
圖 40 切片 5遺失 
由於錯誤還原是在解碼中執行，在損壞的切片周圍之區塊級成為還原的關鍵，藉由改變 QP 的
大小，影片編碼的流量亦跟著改變。由於動作向量預估之演算法依靠在 H.264 的編碼上，隨著
編碼演算法的不同，錯誤還原得到的動作向量亦跟著改變。H.264 的編碼上要求尋找出像素差
異量最小之動作向量，此法計算的結果經常會因為平滑的畫面導致找出來的動作向量並非真實
 - 42 -
 表 17 測試 ｀Mobile＇影片之結果 sequence IPPPIPPP... 
Video 
sequence QP Bitrate Original
    (Kbit/s) PSNR 
PSNR of Different Macroblock Lost rate 
      (db) Continues 
        Method 5% 8% 16% lost slice16%
Mobile 24 1240.9 36.96 Proposed 34.18 32.71 31.24 31.91 
      Polynomial 33.69 32.16 30.40   
IPPPPIPPP…     Neighbor 33.20 31.41 28.36   
      Zero 32.75 30.67 27.55 27.96 
      None 25.33 20.35 17.84 19.92 
  30 673.68 31.72 Proposed 30.28 29.81 28.87 28.54 
      Polynomial 29.80 29.13 28.13   
      Neighbor 29.12 27.02 25.97   
      Zero 28.93 26.15 24.70 24.57 
      None 22.81 18.49 16.63 16.50 
 
5%  macroblock lost
31.00
32.00
33.00
34.00
35.00
36.00
37.00
24 30 36
QP
PS
NR
Proposed
Polynomial
Neighbor
Zero
 
圖 41 5%切片錯誤 
 - 44 -
5%  macroblock lost
28.00
29.00
30.00
31.00
32.00
33.00
34.00
35.00
24 30 36
QP
PS
NR
Proposed
Polynomial
Neighbor
Zero
 
圖 44 5% 切片錯誤 
8%  macroblock lost
27.00
28.00
29.00
30.00
31.00
32.00
33.00
34.00
24 30 36
QP
PS
NR
Proposed
Polynomial
Neighbor
Zero
 
圖 45 8% 切片錯誤 
 - 46 -
 - 48 -
Multi-Threaded JVM)架構，達成了研究設計可重置嵌入式處理器矽核的目標。另外，我們這幾
年的相關研究成果，有許多的論文發表，針對相關的 issues 做不同的研究，令有專利申請中。
整體來說，我們已達成本計劃這一年的研究進度，有很好的研究成果。 
子計畫三 Multi-mode Communication Interface (MCI)的概念在於矽核開發時產生一可相
容於多個匯流排的溝通介面，使得系統整合者可於矽核整合時期，藉由設定矽核，直接連接矽
核與多種匯流排規格。從匯流排規格的觀察和分類，我們發展了一 MCI 開發流程來加速此多模
組介面電路的開發。MCI 包含 transfer smooth queue、dynamic engine 和 signal type 
converters。另一方面，我們也發表了一 energy-efficient flip-flop 設計。此 flip-flop
擁有較小的 PDP。 
總合以上，這個計畫開發了一 AHB/PLB multi-mode communication interface 且發展了
一 bus multi-mode communication interface 開發方法。我們相信嵌入 MCI 的矽核將可快速
地被整合 於系統中，降低整合的困難。我們已發表了一些論文於國際的會議上 
子計畫四，我們找到一個有效率，以新制定標準 H.264 為依歸，物件基礎的時域錯誤還
原演算法。在 H.264 中，鄰近的動作像量比之前的標準有更高的相關性。藉由鄰近的動作向量
相關性，我們可以修正鄰近動作向量至物件基礎模式，其能產生一個相近物件去形容動作向量
的改變趨勢。然後我們可以假設其遺失的動作向量，可藉由此模擬物件和其鄰近動作向量還
原。因為此物件是由鄰近遺失巨方塊的動作向量尋找出來的，所以它可以估算近 4x4 的遺失巨
方塊動作向量，其遺失的巨方塊是可被重建的。此演算法的運算負擔很低，所以非常適合作為
即時視訊傳輸。 
 此外，以物件為基礎的重建策略，對錯誤重建而言是一種非常原始的概念。它提供了許多
不同於其他方法的好處，使用物件基礎演算法，重建片段中的物件會被重建得非常完整；就算
在鄰近動作向量混亂的區域，也不會有區塊效應產生。 
就算 PSNR 不算很好，它仍然提供了不錯的人眼感官舒適度，亦為重建損害區域大過一行巨區
塊的問題提供了一個解決辦法。 
 
 
 
五、本計畫研究成果發表情形 
[1] Shiann-Rong Kuang, Chin-Yang Chen and Ren-Zheng Liao, “Partitioning and Pipelined 
Scheduling of Embedded System Using Integer Linear Programming,” The IEEE/IFIP 
International Workshop on Parallel and Distributed Embedded Systems, July 2005. (子計畫一) 
 
[2] Jiun-Ping Wang and Shiann-Rong Kuang, “Design of Parallelized Controllers for 
High-performance Controller-Datapath System” The 9th IEEE International Workshop on 
Cellular Neural Networks and their Applications, May 2005. (子計畫一) 
 
[3] Jiun-Ping Wang, Shiann-Rong Kuang, andYuan-Chih Chung, “Design of Reconfigurable 
Low-Power Pipelined Array Multiplier,” The 4th International Conference on Communications, 
Circuits and Systems, June 2006. (子計畫一) 
 - 50 -
Haoi Yang, “A Multi-tile Reconfigurable Platform Design for DSP Applications,” ACIT-SIP 2005, 
Novosibirsk, Russia, June 20-24, 2005. (子計畫二) 
 
[15] Shih-Lun Chen, Jer-Min Jou, Chien-Ming Sun, Yuan-Chin Wu, Haoi Yang, Hong-Yi 
Su,"Reconfigurable Processor Core Design for Network-on-a-Chip," International Computer 
Symposium, 2004. (子計畫二) 
 
[16] Lih-Yih Chiou, Hsieh-Wei Lee, Sheau-Fang Lei and Bin-Da Liu,”Design and implementation 
of an efficient architecture for high order statistics with DWT”, IEEE International symposium 
on VLSI Design, Automation & Test (VLSI-TSA-DAT), pp.282-285, 2005. (子計畫三) 
 
[17] Yen-Ting Liu, Lih-Yih Chiou and Soon-Jyh Chang, ”Energy-Efficient Adaptive Clocking Dual 
Edge Sense-Amplifier Flip-Flop”, in Proc. ISCAS May, 2006. (子計畫三) 
 
[18] Lih-Yih Chiou and Shien-Chun Luo, "An Energy-Efficient Dual-Edge Triggered 
Level-Converting Flip-Flop", International Symposium on Circuit and System (ISCAS) 2007, pp. 
1157-1160, 2007. (子計畫三) 
 
[19] An Object-base Motion Vector Recovery Strategy for H.264/AVC 1 Chien-Shine Hong (洪健翔)    
2 Bo-Jhih Chen (陳柏誌)  3 Shen-Chuan Tai (戴顯權)  Department of Electrical Engineering, 
National Cheng Kung University(子計畫四) 
 
六、參考文獻 
 
[20] M. Baleani, F. Gennari, Yunjian Jiang, Y. Patel, R.K. Brayton, and A. Sangiovanni -Vincentelli, 
“HW/SW partitioning and code generation of embedded control applications on a 
reconfigurable architecture platform,” 10th International Symposium on Hardware/Software 
Codesign, pp. 151-156, 2002. 
 
[21] J. M. P. Cardoso and M. Weinhardt, “Fast and guaranteed C compilation onto the 
PACT-XPP/spltrade/ reconfigurable computing platform,” 10th Annual IEEE Symposium on 
Field-Programmable Custom Computing Machines, pp. 291-292, 2002. 
 
[22] J. Liu, F. Chow, T. Kong, and R. Roy, “Variable instruction set architecture and its compiler 
support,” IEEE Transactions on Computers, Vol. 52, No. 7, pp. 881-895, 2003. 
 
[23] N. Dutt, A. Nicolau, H. Tomiyama, and A. Halambi, “New directions in compiler technologyfor 
embedded systems,” Proceedings of the ASP-DAC, pp. 409-414, 2001. 
 
 - 52 -
 
[36] T. Hagras and J. Janecek, “A static Task scheduling Heuristic for Homogeneous Computing 
Environment,” The 12th Euromicro Workshop on Parallel, Distributed and Network-Based 
Processing, pp. 192-199, 2004. 
 
[37] Shiann-Rong Kuang, Chin-Yang Chen and Ren-Zheng Liao, “Partitioning and Pipelined 
Scheduling of Embedded System Using Integer Linear Programming,” The IEEE/IFIP 
International Workshop on Parallel and Distributed Embedded Systems, July 2005. 
 
[38] Jiun-Ping Wang and Shiann-Rong Kuang, “Design of Parallelized Controllers for 
High-performance Controller-Datapath System” The 9th IEEE International Workshop on 
Cellular Neural Networks and their Applications, May 2005. 
 
[39] Jiun-Ping Wang, Shiann-Rong Kuang, andYuan-Chih Chung, “Design of Reconfigurable 
Low-Power Pipelined Array Multiplier,” The 4th International Conference on Communications, 
Circuits and Systems, June 2006. 
 
[40] S.-R. Kuang and J.-P. Wang, “Low-error configurable truncated multipliers for 
multiply-accumulate applications,” Electronics Letters, Vol. 42, No. 16, pp. 904-905, August 
2006. 
 
[41] S.-R. Kuang and J.-P. Wang, “Design of power-efficient pipelined truncated multipliers with 
various output precision,” IET Computers & Digital Techniques, Vol. 1, No. 2, pp. 129-136, 
March 2007. 
 
[42] Jiun-Ping Wang and Shiann-Rong Kuang, “Area-Efficient Signed Fixed-Width Multipliers with 
Low-Error Compensation Circuit,” IEEE Workshop on Signal Processing Systems, Oct. 2007. 
 
[43] M. Schoeberl, JOP: A Java Optimized Processor for Embedded Real-Time Systems, PhD thesis, 
Vienna University of Technology, 2005. 
 
[44] M. Pfeffer and T. Ungerer, “Dynamic Real Time Reconfiguration on a Multithreaded 
Java-Micorcontroller”, 7th IEEE International Sympo. on Object-Oriented RT Distributed 
Computing, 2004 
 
[45] M. Watheq, et.al., “A design space analysis of Java processors”, Proce. of IEEE 
Communications, Computers and signal Pacific Rim Conference, 2003.  
 
[46] P. Watcharawitch, S. Moore, “MulTEP: MultiThreaded Embedded Processors”, International 
Symposium on Low-Power and High-Speed Chips IV, vol. I. the IEEE/IEICE/IPSJ /ACM 
 - 54 -
Su,"Reconfigurable Processor Core Design for Network-on-a-Chip," International Computer 
Symposium, 2004. 
 
[58] D. D. Gajski, Allen C.-H. Wu, Viraphol Chaiyakul, Shojiro Mori, Tom Nukiyama and Pierre 
Bricaud, “Embedded tutorial: essential issues for IP reuse,” in Proc. Conf. Asia South Pacific 
design automation ASP-DAC, Jan. 2000, pp.37-42.  
[59] J. Akella and K. McMillan, “Synthesizing converters between finite state protocols,” in IEEE 
Int. Conf. VLSI in computers and processors,  Oct. 1991, pp.410-413. 
[60] R. Passerone, J. A. Rowson and A. L. Sangiovanni-Vincentelli, “Automatic synthesis of 
interface between incompatible protocols,” in IEEE Int. Conf. Design Automation,  Jun. 1998, 
pp.8-13. 
[61] R. Passerone, L. de Alfaro, T. A. Henzinger and A. L. Sangiovanni-Vincentelli, “Convertibility 
verification and converter synthesis: two faces of the same coin[IP block interfaces],” in 
IEEE/ACM Int. Conf. Computer Aided Design, Nov. 2002, pp.132-139. 
[62] P. Bhaduri and S. Ramesh, “Synthesis of synchronous interfaces,” in IEEE Int. Conf. 
Application of Concurrency to System Design, June. 2006, pp.208-216. 
[63] D. Shin and D. Gajski, “Interface synthesis from protocol specification,” Center for embedded 
computer systems, Irvine, CA , Technical Report CECS-02-13, April 2002,  
[64] V. Androutsopoulos, D. M. Brookes and T. J. W. Clarke, “Protocol converter synthesis,” in 
IEEE Journal of Computers and Digital Techniques, vol. 151, issue 6, pp. 391-401, Nov. 2004. 
[65] P. Bong-II, C. Hoon, P. In-Cheol amd K. Chong-Min, “Synthesis and optimization of interface 
hardware between IP’s operating at different clock frequencies,” in IEEE Int. Conf. Computer 
Design, Sept. 2000, pp.519-524. 
[66] V. D’silva, S. Ramesh, and A. Sowmya “Automated interface synthesis,” TR-325, School of 
Computer Science and Engineering, University of New South Wales, 2003 
[67] AMBA Specification Rev 3.0. ARM Ltd. [Online]. Available:http://www.arm.com, 2003. 
[68] The CoreConnect ™  Bus Architecture. IBM Corp. [Online].Available: 
http://www.chips.ibm.com/products/coreconnect/index.html, 1999 
[69] V. D’silva, S. Ramesh and A. Sowmya, “Synchronous protocol automata: a framework for 
modeling and verification of SoC communication architectures,” in IEEE Journal of Computers 
and Digital Techniques, vol. 152, issue 1, pp. 20-27, Jan. 2005. 
[70] Open Core ProtocolTM Specification, OCP-IP Association, Available:http://www.ocpip.com, 
2001 
[71] Zhang Su, Gao Minglun, Hu Younghua and Li Li, “An approach to PVCI-based wrapper 
design,” in IEEE Int. Conf. ASIC, Oct. 2003, pp.433-437. 
[72] Ming-Yan Yu, Qing-Li Zhang, Jin-xiang Wang, Yi-zheng Ye and Feng-chang Lai, “The Design 
of AMBA/VCI wrapper,” in IEEE Int. Conf. ASIC, Oct. 2003, pp.438-442. 
 - 56 -
1056–1061, Jul. 1998. 
 
[87] S. Tsekeridou and I. Pitas, “MPEG-2 error concealment based on blockmatching principles,” 
IEEE Trans. Circuits Syst. Video Technol., vol. 10, pp. 646–658, Jun. 2000. 
 
[88] Yanling Xu; Yuanhua Zhou;” H.264 video communication based refined error concealment 
schemes” Consumer Electronics, IEEE Transactions on Volume 50,  Page(s):1135 – 1141  Nov. 
2004  
 
[89] Y. Zhang and K.-K. Ma, “Error concealment for video transmission with dual multiscale 
Markov random field modeling,” IEEE Trans. Image Processing, vol. 12, no. 2, pp. 236–242, Feb. 
2003. 
 
[90] M. Bystrom, V. Parthasarathy, and J. W. Modestino, “Hybrid error concealment schemes for 
broadcast video transmission over ATM networks,” IEEE Trans. Circuits Syst. Video Technol., vol. 
9, pp. 868–881, Sep. 1999. 
[91] S. Cen and P. C. Cosman, “Decision trees for error concealment in video decoding,” IEEE 
Trans. Multimedia, vol. 5, no. 1, pp. 1–7, Mar. 2003. 
 
[92] X. Li and M. T. Orchard, “Novel sequential error-concealment techniques using orientation 
adaptive interpolation,” IEEE Trans. Circuits Syst. Video Technol., vol. 12, pp. 857–864, Oct. 2002. 
 
[93] Mei-juan Chen; Che-Shing Chen; Ming-Chieh Chi; “Temporal error concealment algorithm by 
recursive block-matching principle” Circuits and Systems for Video Technology, IEEE Transactions 
on Volume 15,  Page(s):1385 - 1393 Nov. 2005 
 
[94] Jinghong Zheng; Lap-Pui Chau; “Efficient motion vector recovery algorithm for H.264 based 
on a polynomial model” Multimedia, IEEE Transactions on 
Volume 7,  Page(s):507 – 513 June 2005 
 
[95] Y.Wang, M. M. Hannuksela,V.Varsa, A. Hourunranta, and M. Gabbouj, “The error 
concealment feature in the H.26L test model,” in Proc. Int. Conf. Image Processing, vol. 2, pp. 
729–732. Sep. 2002, 
 
[96]M. Flierl, T. Wiegand, B. Girod, “Rate-constrained multihtpothesis prediction for 
motion-compensated video compensated video compression”, IEEE Trans. Curcits System Video 
Technology, vol. 12, pp. 957-969, Nov, 2002. 
 
