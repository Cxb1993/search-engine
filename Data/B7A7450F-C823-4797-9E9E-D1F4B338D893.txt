  2
considering the time distribution of fault- isolation process 
based on a concept of a delayed S- Shaped SRGMs. In 
addition, Musa [4] reported that there are three resources 
that govern the pace of debugging, and each resource 
represents an important part of software debugging process. 
He used the type of queueing model in the failure correction 
process and thought that software testing and fault 
correction are performed by different people during testing.  
Yang [14] also proposed an ISQ model to predict 
software reliability and the model used queueing theory to 
explain the software debugging process. It divided the 
debugging process into detection and removal processes 
and assumed the number of debuggers is infinite so that the 
faults do not need to wait for service. Yang also illustrated 
the problem by giving a real example and reported that 
detected faults take months to remove for large software 
systems. The fault removal time was about 86 months for 
system P1, a military software system [14].  
Besides, Dohi et al. [15-16] proposed an approach to 
use ISQ model to describe the software debugging behavior. 
They showed that it can involve representative NHPP 
models with a finite and an infinite number of faults. 
Besides, they also provided two parameter estimation 
methods for the unified NHPP based software reliability 
models from both standpoints of Bayesian and 
non-Bayesian statistics.  
In the following section, we will show how to 
incorporate both FSQ and ISQ models into software 
reliability estimation and prediction, considering the perfect 
debugging (PD) and imperfect debugging (ID). 
 
2.2 軟體可靠度成長之塑模 
 
First, we assume that software fault detection and 
correction (removal) processes as a queueing system. The 
possible debugging behaviors and activities are depicted in 
Figure 1. Note that Nd(t) and Nr(t) represent the number of 
faults detected and removed by time t, respectively [4, 14, 
17]. When failure correction personnel receive the failure 
reports, they have to isolate the bugs, determine the factors 
which produce the bugs, and devote their time and effort to 
the program to correctly diagnose and correct the root 
causes of failures. 
2.2.1. 考量完美除錯之無限排隊理論模型 
The proposed model is based on the following 
assumptions [3, 14, 17]:    
1. The fault detection process follows the Non- 
Homogeneous Poisson Process (NHPP). 
2. The software is subject to failures at random times 
caused by the manifestation of remaining faults in the 
system. 
3. The mean number of faults detected in the time interval 
(t, t+Δt] is proportional to the mean number of 
remaining faults in the system. Besides, all faults in a 
program are mutually independent from the failure 
detection point of view. 
4. The fault removal time is non-negligible so that the 
number of removed faults lags behind total number of 
detected faults. 
5. Each time a failure occurs, the fault that caused it will 
be eventually removed. The fault detection activity 
continues while faults are being removed and fault 
removals do not affect the detection process. 
6. The proposed queueing model for describing fault 
detection and removal activities is an infinite server 
queue with NHPP arrival and general service time 
distribution. 
7. When we remove a fault, it will not introduce a new 
fault. 
Based on assumptions (1)-(3), we have the following 
differential equation [5, 6, 17]: 
)]()[()( tmatbtm
dt
d
dd −= ,         (1) 
where md(t) is the expected number of failure detected at 
time t, a is the expected total number of faults and b(t) is 
the failure detection rate. By assigning different values to 
b(t), we can get different NHPP models [5]. Consider the 
following three cases. 
 
Case 1: b(t) = b. Mathematically, assuming that b(t) = b and 
solving Eq. (1) under boundary condition md(0) = 0, we 
obtain 
)1()( btd eatm
−−= ,         (2a) 
where b is the fault detection rate per fault in the steady 
state. This model is called the Goel-Okumoto model. 
 
Case 2: b(t) = b2t/(1 + bt). Substituting b(t) = b2t/(1 + bt) 
into Eq. (1) and assuming the initial condition md(0) = 0, we 
obtain the mean value function md(t) as follows: 
))1(1()( btd ebtatm
−+−= .           (2b) 
Eq. (2b) is the delayed S-shaped model. 
 
Case 3: b(t) = b/(1 + ce−bt). Solving Eq. (1) under boundary 
condition md(0) = 0, we have 
bt
bt
d ce
eatm −
−
+
−=
1
1)( ,             (2c) 
where c is the inflection factor. Eq. (2c) is called the 
inflection S-shaped model. 
In practice, when test engineers (or programmers) found 
errors, they have to isolate the bugs and determine the 
factors which produce the bugs. As seen from Figure 1, we 
know that software debugging process is very similar to a 
queueing system. Firstly, we assume that there are n faults 
that have been detected in (0, t]. Under this condition, we 
also let p be the probability that a fault is detected at time x 
and will be completely removed in [x, t]. Thus, from total 
probability theorem [17-18], we obtain 
  4
environment, if r is the probability that a fault is detected at 
a particular time x but has to queue for correction at time t, 
thus,   
1=++ rqp .             (16) 
Let Nrd(t) and Nq(t) represent the number of faults in 
removal-debugging and waiting for debugging at time t, 
respectively. In this case, we have  
})(|)(,)(,)({
})(,)(,)({
kjitNktNjtNitNP
ktNjtNitNP
dqrdr
qrdr
++=====
===
})({      kjitNP d ++=×                 (17) 
.
!
])([
!
])([
!
])([
)!(
)]([
!!!
)!(
)()()(
)(
rtm
k
dqtm
j
dptm
i
d
tm
kji
dkji
ddd
d
e
k
rtm
e
j
qtm
e
i
ptm
e
kji
tm
rqp
kji
kji
−−−
−
++
=
++
++=
  
(18) 
Again, by total probability theorem, we obtain 
ptm
i
d
r
de
i
ptmitNP )(
!
])([})({ −== .        (19) 
Since Nr(t), Nq(t) and Nrd(t) are independent of each other, 
we can obtain the mean of Nr(t) is mr(t)=md(t)×p. Therefore, 
the departure process is an NHPP with mean value function 
∫ −= t
d
d
xdr dxtm
xm
xtGmPtmtm
0 )(
)('
)()()( )(     
.)(')()(         
0∫ −= t dx dxxmxtGmP        (20) 
Eq. (20) can also be written as  
∫ −= t dxr dxxmxtgmPtm 0 )()()()( ,    (21) 
where g(•) is the PDF of the service time.  
When we have exponential service time distribution, let’s 
consider the following four cases.   
z If md(t) is the Goel-Okumoto model, mr(t) is given by  
∫ −−− −= t bxxtxr dxeaemPtm 0 )( )1()()( μμ .    (22) 
z If md(t) is the inflection S-shaped model, in this case, 
from Eq. (21), mr(t) is given by 
∫ −−−− +−=
t
bx
bx
xt
xr dxce
eaemPtm
0
)(
1
1)()( μμ .    (23)  
z If md(t) is the delayed S-shaped model, from Eq. (21), 
mr(t) is  
∫ −−− +−= t bxxtxr dxebxaemPtm 0 )( ))1(1()()( μμ .  (24) 
z If md(t) is the Yamada Weibull model, from Eq. (21), 
mr(t) is given by 
∫ −−− −= t xbWxtxr dxeaemPtm 0 )()( )1()()( μμ ,   (25) 
where W(x) is the cumulative testing effort consumption at 
time x. 
2.2.3. 考量不完美除錯之無限排隊理論模型 
Most SRGMs assume that each time a failure occurs, 
the fault that caused it is immediately removed and no new 
faults are introduced. Sometimes these assumptions can 
help to reduce the complexity of modeling software 
reliability. In reality, developers experience cases where 
they fix one bug but could create another new one. Thus, 
we try to modify the assumption (7) in Section 2.2.1 to be 
as follows:  
When a fault is detected and removed, new faults may be 
generated. Besides, when removing and/or fixing a detected 
fault, the probability of introducing another fault is a 
constant β. 
When the distribution of service time is exponential, let 
us consider the following several software reliability 
models. 
z If md(t) is the inflection S-shaped imperfect debugging 
model [23], that is 
])
1
)1((1[
1
)( 1 ββ
−
−
−
+
+−−= bt
bt
d ce
ecatm ,       (26) 
from Eq. (9), mr(t) is given by 
∫ −−−−− ++−−=
t
bx
bx
xt
r dxce
ecaetm
0
1)( ])
1
)1((1[
1
)( βμ βμ
. (27) 
z If md(t) is the Ohba-Chou imperfect debugging model 
[23], i.e., 
  ]1[
1
)( )1( btd e
atm ββ
−−−−=
,        (28) 
from Eq. (9), mr(t) is given by 
∫ −−−− −−=
t bxxt
r dxe
aetm
0
)1()( ]1[
1
)( βμ βμ
.   (29) 
z If md(t) is the delayed S-shaped imperfect debugging 
model [23], i.e., 
])1(1[
1
)( )1(1 tbd ebt
atm βββ
−−−+−−=
,      (30) 
from Eq. (9), mr(t) is given by 
∫ −−−−− +−−=
t xbxt
r dxebx
aetm
0
)1(1)( ])1(1[
1
)( ββμ βμ
. (31) 
z If md(t) is the Yamada imperfect debugging model #1 
[24], i.e., 
        ) ()( bttd eeb
abtm −−+=
α
α ,          (32) 
from Eq. (9), mr(t) is given by 
∫ −−− −+=
t bxxxt
r dxeeb
abetm
0
)( )()( αμ αμ ,    (33) 
where α is the increasing rate of the number of introduced 
faults to the initial fault content. 
z If md(t) is the Yamada imperfect debugging model #2 
[24], i.e., 
at
b
eatm btd αα +−−= − )1)(1()( ,      (34) 
from Eq. (9), mr(t) is given by 
∫ +−−= −−−t bxxtr dxaxbeaetm 0 )( ])1)(1([)( ααμ μ .  (35) 
z If we have the Yamada Weibull imperfect debugging 
model [23], i.e., 
   )1(
1
)( )()1( tWbd e
atm ββ
−−−−=
,     (36) 
from Eq. (9), mr(t) is given by 
  6
positive constant. For the ease of discussion, below we will 
name four proposed models to be analyzed in this example.    
 
Models Descriptions 
#1 md(t): Eq. (2c), mr(t): Eq. (12) ISQ-PD model  
#2 md(t): Eq. (2c), mr(t): Eq. (23) FSQ-PD model 
#3 md(t): Eq. (26). mr(t): Eq. (27) ISQ-ID model 
#4 md(t): Eq. (26). mr(t): Eq. (38) FSQ-ID model 
 
The estimated parameters of four proposed models are 
listed in Table 1. It is noted that the value of parameter m 
can be treated as the number of debuggers. If we can know 
this parameter in advance, it will greatly help project 
managers to plan ahead, and to manage the testing & 
debugging processes. From Table 1, we can see that the 
estimated value of m is very close to the number reported 
by Musa [4], i.e., 9 programmers. In fact, Musa thought that 
available debuggers cannot always be fully employed 
during the failure-correction-personnel-limited period due 
to the unpredictable identification times of failures and 
inequality in load among the debuggers [4].  
In addition, we also see that the estimated value of fault 
introduction rate β is 0.0463. This means that, on the 
average, about 5 faults will be introduced per 100 fault 
removals. Figure 2 depicts the actual and estimated number 
of remaining faults versus time. Table 2 lists the estimated 
parameters of the delayed S-shaped model, the inflection 
S-shaped model, and the Goel-Okumoto model. Finally, 
Figures 3 and 4 plot the RE curves of md(t) and mr(t) for 
Models #1~4, respectively. Tables 3 and 4 also give the 
performance comparisons in terms of MSE, KD, 
REend_of_testing, Bias, Variance, and RMSPE. We can see that 
the proposed models almost have the smallest values 
compared to the delayed S-shaped model, the inflection 
S-shaped model, and the Goel- Okumoto model. Overall, 
the proposed models give a better fit to the observed data. 
 
四、結論與討論 
 
Software reliability is a very important quality measure 
which quantifies the operational profile of computer 
systems. Failures will not occur if the software is not 
executed on demand. Debugging is not an easy thing, but 
most of SRGMs assumed that the fault removal time is 
negligible so the fault can be removed immediately. This 
does not conform to the real world because debuggers need 
some time to analyze the failure data and then correct it. In 
this paper, we study how to incorporate both FSQ and ISQ 
models into software reliability modeling, under perfect and 
imperfect debugging development environments. New 
SRGMs are proposed and some simulations are performed 
based on the real software failure data set. Experimental 
results show that the proposed models give a better fit to the 
observed data and predict the future behavior well for the 
real failure data. 
 
五、參考文獻 
 
[1] American Institute of Aeronautics and Astronautics, 
Recommended Practice for Software Reliability, 
ANSI/AIAA R-013-1992, Feb. 1993. 
[2] M. R. Lyu, Handbook of Software Reliability 
Engineering, McGraw Hill, 1996. 
[3] M. Xie, Software Reliability Modeling, World 
Scientific Publishing Company, 1991. 
[4] J. D. Musa, A. Iannino, and K. Okumoto, Software 
Reliability, Measurement, Prediction and Application, 
McGraw-Hill, 1987. 
[5] H. Pham, Software Reliability, Springer-Verlag, 2000. 
[6] C. Y. Huang, M. R. Lyu, and S. Y. Kuo, “A Unified 
Scheme of Some Non-Homogenous Poisson Process 
Models  for  Software  Reliability  Estimation,” 
IEEE Trans. on Software Engineering, Vol. 29, No. 3, 
March 2003, pp. 261-269. 
[7] B. Hailpern and P. Santhanam, “Software Debugging, 
Testing, and Verification,” IBM Systems Journal, Vol. 
41, No. 1, 2002, pp. 4-12. 
[8] X. Zhang, X. Teng, and H. Pham, “Considering Fault 
Removal Efficiency in Software Reliability 
Assessment,” IEEE Trans. on Systems, Man, and 
Cybernetics — Part A: Systems and Humans, Vol. 33, 
No. 1, Jan. 2003, pp. 114-120. 
[9] C. Y. Huang and C. T. Lin, “Software Reliability 
Analysis by Considering Fault Dependency and 
Debugging Time Lag,” IEEE Trans. on Reliability, 
Vol. 55, No. 3, Sept. 2006, pp. 436-450. 
[10] Y. S. Dai, M, Xie, and K. L. Poh, “Modeling and 
Analysis of Correlated Software Failures of Multiple 
Types,” IEEE Trans. on Reliability, Vol. 54, No. 1, 
Mar. 2005, pp. 100-106. 
[11] K. Goševa-Popstojanova and K. S. Trivedi, “Failure 
Correlation in Software Reliability Models,” IEEE 
Trans. Reliability, Vol. 49, No. 1, Mar. 2000, pp. 
37-48. 
[12] D. Wallace and C. Coleman, Application and 
Improvement of Software Reliability Models, 
Technical Report, Software Assurance Technology 
Center, NASA Goddard Space Flight Center, 2001 
http://satc.gsfc.nasa.gov/support/index. html 
[13] S. Inoue and S. Yamada, “A Software Reliability 
Growth Modeling Based on Infinite Server Queueing 
Theory,” Proceedings of the 9th ISSAT International 
Conference on Reliability and Quality in Design, Aug. 
2003, Honolulu, Hawaii, USA, pp. 305-309. 
[14] K. Z. Yang, An Infinite Server Queueing Model for 
Software Readiness Assessment and Related 
Performance Measures, Ph.D. Dissertation, 
Department of Electrical Engineering and Computer 
Science, Syracuse University, NY, 1996. 
[15] T. Dohi, S. Osaki, and K. S. Trivedi, “An Infinite 
  1
 
Table 1. Parameter estimates for the proposed Models # 1~4 
Models A b c β μ m ρ 
Model #1 154 3.50×10−1 173 − 9.00×10−1 − − 
Model #2 154 3.50×10−1 173 − 9.00×10−1 8.65 7.00×10−2 
Model #3 155.34 3.15×10−1 104.85 4.63×10−2 1.37×10−1 − − 
Model #4 155.34 3.15×10−1 104.85 4.63×10−2 1.49×10−1 9.66 4.64×10−2 
 
Table 2. Estimated parameters of the Delayed S-shaped model, the Inflection S-shaped model, and the 
Goel-Okumoto model 
a b c Models Detected Removed Detected Removed Detected Removed 
Delayed S-shaped model 237.19 208 9.63×10−2 1.01×10−1 − − 
Inflection S-shaped model 154 186.82 3.50×10−1 3.00×10−1 173 169.75 
Goel-Okumoto model 137.2 138.87 1.56×10−1 1.10×10−1 − − 
 
Table 3. Comparison result (i) 
 MSE KD REend_of_testing Models Detected Removed Detected Removed Detected Removed 
Model #1 11.22 25.03 7.02×10−2 8.40×10−2 3.52×10−2 −1.48×10−2 
Model #2 11.22 25.03 7.02×10−2 8.40×10−2 3.52×10−2 −1.48×10−2 
Model #3 18.44 27.47 9.71×10−2 7.99×10−2 3.47×10−2 −2.53×10−2 
Model #4 18.44 25.19 9.71×10−2 8.63×10−2 3.47×10−2 −1.99×10−2 
Delayed S-shaped model 340.36 595.28 2.12×10−1 3.55×10−1 4.35×10−2 4.53×10−2 
Inflection S-shaped model 11.22 49.02 7.02×10−2 9.30×10−2 3.52×10−2 −4.29×10−2 
Goel-Okumoto model 3017.19 2623.80 6.39×10−1 6.48×10−1 −2.92×10−2 −7.87×10−2 
 
Table 4. Comparison result (ii) 
Bias Variance RMSPE Models Detected Removed Detected Removed Detected Removed
Model #1 9.64×10−2 –6.19×10−1 3.43 5.08 3.43 5.12 
Model #2 9.64×10−2 –6.19×10−1 3.43 5.08 3.43 5.12 
Model #3 1.84 1.06 3.97 5.51 4.38 5.61 
Model #4 1.84 –6.10×10−1 3.97 5.10 4.38 5.14 
Delayed S-shaped model −14.02 −17.20 11.92 17.72 18.41 24.70 
Inflection S-shaped model 9.64×10−2 1.22 3.43 5.33 3.43 5.47 
Goel-Okumoto model −45.77 −41.67 31.11 30.52 55.34 51.65 
 
 2
???IEEE???????(Proceedings)?????????????????
????Sessions???????????????????TENCON 2006??
????? 
z Antennas and Microwave Devices 
z Bioinformatics 
z Computational Intelligence & Intelligent Systems 
z Computer Architecture & VLSI 
z Computer Graphics & Visualization 
z Control and Systems Engineering 
z Data Communications & Networking 
z Database Systems & Data Management 
z Design Automation 
z Digital Circuits and Systems 
z Distributed & Fault Tolerant Computing 
z Electromagnetics 
z Fiber and Integrated Optics 
z Grid Computing & Service Computing 
z Information Theory 
z Microelectronics and Photonics 
z Multimedia Computing 
z Pattern Recognition & Image Processing 
z Power Systems, Power Electronics and Drives 
z Programming Languages & Software Engineering 
z Real-Time & Embedded Systems 
z Re-newable & Energy-saving Technology 
z RFID & Sensor Networks 
z Security and Privacy 
z Signal Processing 
z Web & Internet Technology and Applications 
z Wireless & Mobile Computing 
 
???? 
IEEE TENCON???????????????????????????
