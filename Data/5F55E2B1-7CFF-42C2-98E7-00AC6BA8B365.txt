我們現今完成之成果已經在兩個
字串的字串比對上有良好的成果，對
於在時間與空間(linear space)上可
以比傳統的 forward dynamic progr-
aming 來的更好的效能；時間上：以平
行處理及區塊式動態規劃法實作在共
享式記憶體環境上和分散式記憶體環
境上，可大大降低計算所需時間；而
空間上已經由原本所需的 )(mnO 降低
為 )(mO ，其中m、n分別為兩個字串
長度，實驗數據顯示將可以比 forward
dynamic programming 所考慮的 DNA
長度來的更長，因此可以提供生物學
家一個良好的字串比對程式在有限的
空間與時間內。
而我們所要做的工作如下：(1)考
慮gaps以求有更精確的字串比對，(2)
擴充我們二個字串平行線性空間的成
果至三個字串比對的問題。
造成 gaps 的主要原因如下：
1. 因為一些單一的突變事件(mutat-
ional event)往往會造成原先的兩個
字串其中一個字串的插入(insertion)
會刪除(deletion)，尤其是 DNA 字串
上更是容易發生，所以在生物上的應
用 gaps 就相當的重要。
2. 大部份的這些突變事件(mutatio-
nal event)都會造成 gap 的長度都會
非常的大。
3. 單一的突變事件(mutational eve-
nt)也會造成許多的重複性 DNA(repe-
titive DNA)的產生，將會複製 DNA 片
段並且插入(insertion)在DNA字串中
。
4. 其他的突變機制也會造成很長的
插入(insertion)或者是刪除(delet-
ion)在 DNA 字串中包含了：在減數分
裂(meiosis)中的不等位交換(unequ-
al crossing-over)，也就是在一條染
色體上的某一 DNA 片段刪除，而在另
一條上則出現了相對應的插入。
5. 另一個就是複製滑脫(replicati-
on slippage)，這類事件發生在含有
連接短重複序列的 DNA 區域中，在 DNA
複製期間，滑脫可因為連接重複間的
誤配而引起，而滑脫又可造成某一 DNA
片段的缺失或重複的後果，至於是缺
失還是重複，則要看滑脫是發生在 5’
→ 3’還是與之相反的方向。
6. 以及滑脫鏈誤配(slipped strand
mispairing)，滑脫誤配也可能發生在
非複製的 DNA 中，造成 DNA 序列插入
或刪除。
7. 在DNA中可輸送元素(transposab-
le elements)又稱為跳躍基因(jumpi-
ng genes)的插入，這牽涉到非同源鹼
基序列的基因重組，其機制為可輸送
元素從 DNA 的一處移至另一處。
8. DNA 經由反轉錄病毒(retrovirus-
es)的插入和DNA在染色體(chromoso-
mes)間的轉位(translocations)。
由以上幾點原因都是會造成 gaps
的產生，考慮gaps將使得計算 align-
ment 後的結果更符合生物模型並且會
是比較有意義的，而我們要探討基因
體中未知的片段來推衍出對人體中有
意義的部份，因此可能藉由與其他的
動植物的基因體來做字串比對，所以
在字串比對中共同的 gaps(common g-
aps)將有意義地在推衍整個演化歷史
(evolutionary history)中會有極大
的幫助。
4 研究方法
三個字串的問題可以說是將二個
個字串中任一個字串的字元數為零或
一個時就是遞迴結束的時候，因此將
每一次找到的最大值連結起來就是我
們要的最佳路徑。由以上的遞迴式可
以了解我們只需利用 quadratic spa-
ce 的表格和一些一維的陣列即可完成
三個字串之平行演算法，因此計算上
半部或下半部的任一個平面之時，我
們應用二個字串之平行演算法，如以
上所提的以列(Row)的方式處理，將可
以在計算任一平面所需的時間減少，
因此在運用Hirschberg演算法的同時
下將有效地減少所需時間，以提高效
能。
5 效能分析
在二次方空間下，以區塊式計
算所需的計算時間為
cTp
rsk
p
rspk
p
mnk





 



3
11
1)
1
1(
33
4
2







s
mk
prs
mnk
3
21
1
7
4
3 syn
T
p 




 2
1
1
(5.2)
.proof 計算時間有平行時間與循序計
算時間以及同步時間三種情形
1.平行計算時間：處理器以區塊代替
格子計算動態規劃表，每個平面可以
被分成
s
m
r
n 個區塊。我們以 p 個處理
器使用 Hirschberg 演算法計算表格，
可知隨著每次遞迴，表格被分成
2
k
nm
、 
422
kmn
等等大小，而且最多有
p2log 次遞迴。處理器計算一個區塊
需要 rs個單位時間，因為總共有
s
m
r
n 個區塊。在第 p 個處理器需要多
等待 )1( prs 時間才能開始計算。所以
第一次遞迴的計算時間為
2
1
2
2 k
rs
p
rsp
mn 


  、第二次遞迴的計
算時間為 
4
1
4
k
rs
p
rsp
mn 


  第
p2log 次遞迴的計算時間為
ppp
k
rs
p
rsp
mn
222 loglog1log 2
1
22
2 


  ，因
此歸納及加總每次計算時間可得平行
計算時間為









 


p
i
iii
k
rs
p
rsp
mn2log
1
1 2
1
22
2









 
p
rsk
p
rspk
p
mnk 1
1
1
1
33
4
2
(5.3)
2.循序計算時間︰在 p2log 次遞迴之
後，因為處理器數目不足，無法平行
計算。其餘的路徑只能用單個處理器
以循序方法計算。因為我們假設中間
列的最大值平均出現在中間，所以在
第 p2log 次遞迴時，每個處理器會分
配到約 3logloglog 222 222 p
mnkkmn
ppp  大小
的表格，然後以循序方法計算，所以
循序計算時間為
3
1
3
4
14
4 333

p
mnk
p
mnk
p
mnk

(5.4)
3.同步計算時間︰我們知道當第一次
遞迴時，表格大小為
s
m
r
n 



 1 ，因
圖 6.3 SGI3800、三個字串於行行與循
序演算法執行時間
所以由實驗數據表示，我們的平行動
態規劃法可以有效率的減少時間，節
省計算的時間。我們三個字串的平行
演算法目前只有實作於共享式記憶體
環境。
參考文獻
[1]Alberts, B., Bray, D., Johnson,
A., Lewis, J., Raff, M., Robert-
s,K., and Walter, P. Essential
Cell Biology. 1997.
[2]Baldauf, S., and Palmer, J. A-ni
mals and Fungi are Each Other’s
Closest Relatives: Congruent
Evidence from Multiple Proteins.
Proc. Of the Natl. Acad. Science
90, 11 (1993), 558–562.
[3] Bellman, R. Introduction to
Matrix Analysis. McGraw Hill,
New York, 1957.
[4] Bellman, R. Introduction to
Matrix Analysis, second ed.
McGraw-Hill, New York, 1970.
Reprinted by Society for Indu-
strial and Applied Mathematic-
s, Philadelphia, PA, USA, 1997.
ISBN 0-89871-399-4.
[5] Chao, K. M., Hardison, R., and
Miller, W. Recent Developments
in Linear-Sapce Alignment Met-
hods: a Mini Survey. J. Comp.
Biol (1994), 271–291.
[6] Chen, J. H. A Study of Linear
Spaced Parallel Dynamic Progr-
amming for Sequence Alignments.
Master’s thesis, Feng Chia
University, 2004.
[7] Dayhoff, M., Schwartz, R., and
Orcutt, B. Atlas of Protein Se-
quence and Structure, vol. 5.
National Biomedical Research
Foundation, Silver Spring, Ma-
ryland, 1978, ch. A model of
evolutionary change in protei-
ns., pp. 345–352.
[8] Deacon, N. J., Mills, J., and
et al. Genomic Structure of an
Attenuated Quasi Species of
HIV-1 from a Blood Transfusion
Donor and Recipients.Science
270 (1995), 988–911.
[9] Galil, Z., and Park, K. Parall-
el Dynamic Programming. Tech.
Rep. CUCS-040-91, University
of Columbia, 1991.
[10] Galper, A. R., and Brutlag, D.
L. Parallel Similarity Search
and Alignment with the Dynam-
ic Programming Method. ACM
(1990).
[11] Gotoh, O. Alignment of Three
Biological Sequences with an
E?cient Traceback Procedure.
J. Theor. Biol. 121 (1986),
327–337.
[12] Graur, D., and Li, W. H.
Fundamentals of Molecular
Evolution. Sinauer Associat-
