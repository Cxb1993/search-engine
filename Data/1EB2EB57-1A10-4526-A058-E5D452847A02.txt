行政院國家科學委員會補助專題研究計畫成果報告 
 
開發生物資訊新工具去探索 RNA 病毒序列、結構、功能與演化— 
以流感病毒與腸病毒為應用模型 
子計畫五: 以序列比對技術為核心的 RNA 病毒研究 
Sequence Alignment Based Techniques for RNA Viruses Research 
 
計畫編號: NSC 97-2221-E-182-033-MY3 
執行期限: 97 年 08 月 01 日至 100 年 07 月 31 日 
計畫主持人: 林俊淵 助理教授 長庚大學資訊工程學系 
cyulin@mail.cgu.edu.tw 
計畫參與人員：朱家漢、劉至善、黃名遠、林郁珊、楊博偉、林正峰、洪蔚奇、
許皓源、齊孝傑、黃仁正李昇達、林郁翔 
 
中文摘要 
 
本整合型計畫的目標就在於探索核糖核酸
病毒序列、結構、功能與演化的關係，並以
流行性感冒病毒與腸病毒做為目前的研究
對象，而本子計畫的目標就在於希望利用序
列比對的技術進行核糖核酸病毒的研究，並
著重於序列與演化關係的探討。本子計畫第
一年的目標是發展新的多序列比對技術，包
含三條全序列比對的技術、三條序列剖面比
對技術等，並使其適用於去氧核糖核酸、核
糖核酸、胺基酸序列。本子計畫第二年的目
標是除了延續第一年持續發展新的多序列
比對技術，包含以三條序列剖面比對技術為
核心的特徵識別工具以及序列重組分析演
算法，並從事病毒間比較基因體研究，著重
於腸病毒間序列同源、變異及演化關係。本
子計畫第三年的目標是著重於流感病毒間
序列同源、變異及演化關係，除此之外，也
將發展平行化多序列比對技術、分支與結合
技術，並期望發展相關技術以進行大量序列
或全基因體的研究。在三年的計畫期間已確
實完成上述工作目標。 
 
關鍵字詞: 核糖核酸病毒、流行性感冒病
毒、腸病毒、多序列比對、動態程式規劃、
平行處理 
 
Keywords: RNA virus, Influenza, Enterovirus, 
Multiple Sequence Alignment, Dynamic 
Programming, Parallel Processing 
 
 
Abstract 
 
The goal of the integrated project is to 
discovery sequence, structure, function and 
evolution for RNA Viruses, especially for 
Influenza and Enterovirus.  The goal of this 
sub-project is tried to do the research for RNA 
viruses by sequence alignment based 
techniques and focuses on discovering 
sequence and evolution relationships for RNA 
viruses. The goal of the subproject in the first 
year is to develop new multiple sequence 
alignment techniques, such as the global 
three-sequence alignment technique, 
three-profile alignment technique and etc.  
These techniques will be extended to be useful 
for DNA, RNA and Protein sequences.  The 
goal of the subproject in the second year is 
still to develop new multiple sequence 
alignment techniques, such as Feature 
Amplified Voting Algorithm with 
Three-profile alignment tool and genome 
rearrangement algorithm by considering 
reversals and block-interchanges. Besides, we 
also do the compare genomic research for 
Enterovirus which is focused on sequence 
conserved, sequence variation and evolution 
relationship. The goal of the subproject in the 
first year is to do the compare genomic 
research for Influenza A virus which is 
focused on sequence conserved, sequence 
variation and evolution relationship. Besides, 
we also develop parallel techniques for 
sequence alignment based methods. We hope 
to design related techniques for analyzing 
large scale or whole genome data. These goals 
have been reached during these three years. 
第二年:  
 
第二年研究計畫的目的主要有二，其一為持
續發展新的多序列比對技術，在這個部份我
們主要發展了一特徵識別的工具及序列重
組分析演算法，其二，我們先針對近年來在
中國大陸、日本及本國對幼童危害較大的腸
病毒 71 型進行比較基因體研究，並以過去
同樣危害較大的小兒麻痺病毒 1, 2, 3 型及
危害較小的克沙奇病毒 16 型來一同分析彼
此間同源、變異及演化關係，以上針對這兩
個目的在第二年計畫年度中皆獲得不錯的
研究成果。 
 
A. 特徵識別工具(FAVAT) 
 
首先在發展新的多序列比對技術部
份，我們先針對第一年計畫中所發展的三條
序列剖面比對技術來探討，由於所提出來的
技術可以針對大規模的序列來進行分析，同
時，在序列比對時我們可以先針對序列進行
分群，再藉由三條序列剖面比對方式來獲得
較好的序列比對結果(這部份成果請看第一
年計畫期中報告)，在過去的研究中，生物
學家不斷在探討不同序列間相似度、功能以
及結構的關係，在大部份的情況下，兩條序
列相似的序列在功能以及結構上應可獲致
類似的結果，但在少數的情況下，則兩條序
列相似的序列卻有可能有迥然不同的功能
或結構。 
 
針對這樣的情況，我們發現當生物學家
想要了解一目標序列(A)的特徵，我們可以
由相關的資料庫中尋找與目標序列功能類
似但序列相似度較低的一群序列(G2)，同樣
地，我們亦可以找尋到與目標序列功能不一
致但卻序列相似度較高的一群序列(G1)，針
對這三群資料(A, G1,G2)，我們可以透過三
條序列剖面比對技術獲得一特殊的序列比
對結果，而在這結果中，生物學家往往想要
知道的是那些序列位點在目標序列(A)以及
G2 序列間是一致的，但卻在 G1 序列間是不
同的，這樣的序列位點便可以推測為一特徵
位點(或功能位點)，因此，透過發展一投票
技術我們可以在大量序列位點中找尋較具
可能的特徵位點，因此，我們發展了一特徵
辨識工具 FAVAT，我們亦利用這個工具針對
Human rat imidase 的目標序列來進行分
析，並發現在該序列上有十個序列位點
Ala34, His67, His69, Ala134, Lys159, His248, 
Met297, Arg302, Asp326 and His459 為可能
的功能位點，透過文獻的尋找我們發現這十
個位點皆與其功能表現有關，這樣的結果比
利用過去的比對工具如 ClustalW 找尋序列
相似位點能獲得更好的預測結果，並建立
FAVAT 的網站供生物學家使用。 
 
B. 序列重組演算法 
 
序列重組是一個不同於以往序列比對
的概念，序列重組的概念在於發現兩條序列
A 及 B，在序列 A 中基因出現的次序與方
向，在序列 B 中則可能有不同的次序或方
向，若以數列的方式來表示，亦即序列 A
的基因組成為(1, 2, 3, 4, 5)，而在序列 B 的
基因組成則可能為(1, 3, 4, 2, -5)，其中基因
5 及基因-5 表示其方向是相反的，例如基因
5 序列為 ATGC，則基因-5 序列為 CGTA。 
 
一開始在 1938 年 T. Dobzhanski 等人在
果蠅中就有發現這樣的現象，而 1988 年 J.D. 
Palmer 等人在花椰菜與青江菜中的發現開
始這個研究的潮流，從計算的角度來思考，
序列重組的現象將大大影響序列比對結果
的正確性，因為在序列比對的過程中往往希
望將兩條序列間相同為點比對在一起，而這
樣的比對方式若序列間存在序列重組的現
象，如上面例子中 A 與 B 的序列，由於基
因 2 跟基因 3 的不同將導致序列 A 及 B 的
序列相似低，進而在演化分析上被認為是截
然不同的序列，但實際上序列 A 及 B 確可
能是來至於同一祖先，也因此往往生物學家
在分析其目標序列的演化關係時常得到令
人無法解釋的結果。近幾年來，在腸病毒及
流感病毒的研究中也常看到生物學家提出
這些 RNA 病毒有序列重組現象的可能，因
此，在本計畫年度中我們針對序列重組問題
發展其分析演算法。 
 
在過去，序列重組的研究已經發展出相
當多的演算法及工具，這些方法及工具最常
探 討 的 重 組 現 象 為 reversal 及
block-interchanges，而一個演算法同時考量
這兩個現象時，往往必須先針對這兩個現象
給予不同的權重值，在依據所設定的權重值
來分析最佳的現象組合，這樣的方式固然使
問題簡化，但其權重值的設定便成為分析結
果的關鍵，因此，我們提出了一個可調式的
演算法，該演算法可以針對不同的權重值來
進行計算，並依據不同的權重值選擇不同的
同源、變異及演化關係。流感病毒在過去幾
十年間對於全球造成數次重大的危害，首次
爆發大流行於 1918 年，根據世界衛生組織
的調查，在 1918 年爆發的流感病毒至今已
造成超過 5 千萬人以上的傷亡，後來在 1957
年以及 1968 年在亞洲地區亦發生兩次的大
規模傳染，亦造成數十萬以上的傷亡人數，
而在 2009 年爆發的新流感病毒傳染，亦造
成大規模的擴散並造成上萬人的傷亡，因
此，我們希望能研究在人流感病毒的基因序
列上重要的功能位點，除此之外，在流感病
毒快速的變異以及不同基因型的流感病毒
威脅下，生物學家們亦十分關心流感病毒跨
越不同宿主的機制，因此，我們也希望藉由
進行人流感病毒、禽流感病毒以及豬流感病
毒的比較基因體研究來預測可能的重要位
點。 
 
我們分析的方向主要有三個: 
 
首先，我們利用 NCBI 資料庫上關於人
流感病毒的部份下載不同年代的病毒序
列，包含 1918 年、1957 年、1968 年以及
2009 年的病毒序列，也納入其它年代較完
整的病毒序列，共超過 1 萬 5 千條以上的蛋
白質序列資料被下載，接著我們利用在第二
年計畫所發展的 FAVAT 工具針對流感病毒
11 個蛋白質分別進行功能位點的預測，在過
去的研究中，由於流感病毒的 HA 以及 NA
蛋白的變異速率過快，以致於難以進行比對
以及進行後續的分析工作，針對這個問題，
我們提出利用 Evolutionary trace 的技術來
求得 HA 以及 NA 蛋白的一致性序列，並藉
由演化樹的建立及驗證來說明所建立的一
致性序列的可性度，藉由所提出的方法，我
們可以成功的進行功能位點的預測，針對 11
個蛋白質的功能位點預測，我們的預測結果
除了部份與其它研究團隊獲致一樣的結果
之外，亦能得到新的結果。 
 
其二，我們亦利用 NCBI 資料庫上關於
禽流感病毒以及豬流感病毒的部份下載不
同年代的病毒序列，在禽流感病毒部份，我
們下載了近 2 萬條的蛋白質序列，而在數量
較少的豬流感病毒部份則下載了 3 千多條
蛋白質序列，同樣的，我們利用所發展的
FAVAT 工具針對 11 個蛋白質進行跨宿主重
要位點的預測，在預測的結果上，我們除了
可以預測到如已知的 PB2 627 位點之外，亦
有部份位點被其它團隊所預測，同樣地，我
們也獲得若干新的位點，在過去的研究中，
其它團隊的預測結果並無法區別出所預測
的位點與自身物種流感病毒間的關聯，藉由
第一個方向的預測結果，我們可以進行交叉
比對，並能將所預測的結果進行區隔，希望
能降低所預測的位點數量並提高精確度。 
 
其三，我們觀察所預測的位點在其蛋白
質結構上的意義，我們針對 HA、NA、NP、
NS1 等四個已知結構的蛋白進行分析，我們
先利用 1918 年流感病毒的蛋白質結構建立
2009 年新流感病毒的預測結構，並進行所
預測位點的分析，我們可以發現所預測的位
點多處於蛋白質的表面上，同時，亦能觀察
該位點在不同年代的結構表現，透過這樣的
結構分析，或許能提供生物學家在進行生物
實驗之前的佐證。(上述的研究成果正在整
理相關的論文資料以及後續的實驗規劃，暫
不提供於成果報告之中) 
 
B. 全基因體快速比對工具 
 
雖然在過去有相當多的序列比對工具
被提出來，但是面對序列長度較長或是序列
數量很多的分析工作，生物學家往往得費時
相當多的時間等待序列比對的結果，在過去
的經驗裡，比對約 50 條的腸病毒全基因體
序列(長度約 7 千)需費時數小時，也因此，
往往會限制了序列比對的條數，間接也影響
了分析的結果及正確性。因此，發展一個快
速的多序列比對工具是一個值得進行的研
究，不過，如何在比對的精確度以及時間的
拿捏，是工具發展上必須注意的課題。 
 
在過去的研究中，我們曾經發展一個基
因預測的工具 GeneAlign，該工具主要藉由
一條已知的全基因體序列來預測另一條未
知的全基因體序列上的保留基因，因此，如
果比對兩條全基因體序列是一個首先面臨
的難題，在 GeneAlign 工具裡，我們提了一
個快速的兩條全基因體序列比對工具
CORAL，並成功的預測在老鼠的全基因體
序列上的保留基因，因此，在這部份的研究
工作，我們主要將 CORAL 工具擴展到多序
列比對上，這部份的研究工作主要的困難在
於比對分數上的設計以及決定區間比對的
好 壞 ， 針 對 第 一 年 計 畫 所 發 展 的
CORAL-T，我們進行機率公式的推導及延
伸，我們設計出針對多序列比對的工具
CORAL-M，並在實測上能快速的比對近百
Heuristic COding Region ALignment Method for Three Genome 
Sequences 
 
Method 
COding Region ALignment for Three genome sequences – CORAL-T 
 
The main idea of CORAL-T is that a near-optimal alignment among three conserved coding 
regions is found when the number of exact matches is much higher than that of mismatches 
within a window with a fixed length.  The alignment is performed by three sliding windows, one 
for each coding region.  The number of matches for the sequences in the three windows is 
computed.  If the number of matches is higher than the threshold, then the alignment of the 
sequences in the windows is accepted and the alignment is continued.  Conversely, a shifting 
mutation (insertions or deletions) may happen and the alignment is suspended if the number of 
matches is lower than the threshold.  A local search is then performed to determine a proper 
shifting situation.  In the either case above, one, two or all of the sliding windows are then 
moved downstream and the alignment procedure is repeated.  A probabilistic filtration model (to 
be described in next section) is adopted to determine when a local search should be performed.  
CORAL-T enjoys a linear time behavior in practice without substantially sacrificing accuracy 
when the three coding regions are similar.  Moreover, the wobble mask rule with the pattern 
XXO, has been employed in the CORAL to efficiently align homologues sequences, is applied in 
CORAL-T due to the codon degeneracy.  In practice, three nucleotides spread out in the pattern 
XXO, where the X indicates “absolute matching” and the O means “don’t care”, are utilized 
instead of translating nucleotides to amino acids as the basis of alignments. 
 
Probabilistic filtration model 
 
Let S1, S2 and S3 be the three nucleotide sequences with lengths n1, n2 and n3, respectively.  A 
codon is defined as a string of three continual nucleotides of a sequence.  Let C1i, C2j and C3k be 
the ith, jth and kth codons of sequences S1, S2 and S3, respectively.  The similarity among 
sequences S1, S2 and S3 is defined as: 
1 2 3min{ / 3 , / 3 , / 3 } 1
1 2 3
0, 0, 0
1 2 3
1 2 3
( , , )
( , , )
max{ / 3 , / 3 , / 3 }
n n n
i j k
i j k
sim C C C
sim S S S
n n n
−
= = =
=
∑
, 
where sim(C1i, C2j, C3k) = 1 if the first two nucleotides of codons C1i, C2j and C3k are the same, 
otherwise sim(C1i, C2j, C3k) = 0. 
An alignment of sequences S1, S2 and S3 is to determine whether that the alignment of 
codons C1i, C2j and C3k is optimal or not.  If the alignment of codons C1i, C2j and C3k is the 
optimal, then the triple of codons is termed as a right-positioned triple and as an ill-positioned 
Shifting mutation 
 
When an ill-positioned triple is detected, the shifting mutation will occurs in one/two of three 
sequences.  There are six possible shifting mutations: insert the gap on sequence S1; insert the 
gap on sequence S2; insert the gap on sequence S3; insert the gap on sequences S1 and S2, 
respectively; insert the gap on sequences S1 and S3, respectively; insert the gap on sequences S2 
and S3, respectively.  These six shifting mutations are presented in Fig. 1.  Each possible 
shifting mutation has the corresponding similarity scoring function which is defined as follows: 
1. sim(ωm+t(S1), ωm(S2), ωm(S3))  
2. sim(ωm(S1), ωm+t(S2), ωm(S3))  
3. sim(ωm(S1), ωm(S2), ωm+t(S3)) 
4. sim(ωm+t(S1), ωm+t(S2), ωm(S3)) 
5. sim(ωm+t(S1), ωm(S2), ωm+t(S3)) 
6. sim(ωm(S1), ωm+t(S2), ωm+t(S3)), 
where ωm+t(S1), ωm+t(S2) and ωm+t(S3) represent that the sequence S1, S2 and S3 slides t condons to 
the right direction of the mth codon, respectively. 
 
According to these six similarity scoring functions, the most possible mutation is decided by 
the maximum score of these functions.  Thereby, the best alignment at the mth codon is 
depending on the maximum value and is shown in the following:  
1 2 3
1 2 3
1 2 3
1 2 3
1 2 3
1 2 3
1 2 3
( ( ), ( ), ( )),
( ( ), ( ), ( )),
( ( ), ( ), ( )),
( , , , ) max
( ( ), ( ), ( )),
( ( ), ( ), ( )),
( ( ), ( ), ( ))
m t m m
m m t m
m m m t
m
m t m t m
m t m m t
m m t m t
sim S S S
sim S S S
sim S S S
sim S S S t
sim S S S
sim S S S
sim S S S
ω ω ω
ω ω ω
ω ω ω
ω ω ω
ω ω ω
ω ω ω
+
+
+
+ +
+ +
+ +
⎧⎪⎪⎪⎪
= ⎨
⎩
⎪⎪⎪⎪
By the threshold θ to find the ill-positioned 
triple, and the maximum value of similarity scoring functions can efficiently produce a significant 
alignment among a triple of sequences.   
Suppose that an ill-positioned triple has occurred if the hamming distance is greater than the 
threshold, gap (on one of three sequences)/gaps (on two of the three sequences) could be inserted 
at this codon position depending on the similarity scoring functions.  The segment as the sliding 
window will be shifted to the next codon position with inserting gap/gaps to find the 
right-positioned triple.  This step will be repeated until either of the sequences is completely 
aligned.  For aligning the coding region of three sequences with the length n, the worst time 
complexity of CORAL-T is w(6wt+1)n/3 = O(n) since it is a linear method without the recursion 
or backtracking procedure, which suffers from the great computational time within the dynamic 
programming algorithm. 
 
 
Three-Profile Alignment Method 
 
Method 
 
TPA algorithm 
 
The previous work [25] has presented a dynamic programming based algorithm of three-way 
alignment utilizing the variable gap penalty, and the time and space complexities are O(n3) and 
O(n2), respectively.  In this paper, the first proposed three-profile alignment algorithm, TPA, is 
extended from the previous work, to align three profiles simultaneously.  Let P1, P2 and P3 be 
three profiles with the profile lengths L1, L2 and L3, respectively.  Each profile has one or more 
sequences.  All of these sequences are over an alphabet set Σ.  The alphabet set Σ contains 
various symbols to represent biology sequences, such as 20 symbols for protein sequences.  The 
symbol “-” denotes a “gap” in the sequence alignment.  A three-profile alignment consists of 
ordered elements in Σ∪{-}.  The basic idea to calculate the score at each column for three 
profiles is illustrated in Figure 1.  The score of each column is calculated according to the pair 
profiles or the gap penalty.  The definition of scoring pair profiles, P1-P2, is shown as follows: 
( )1( , ) 2( , )
1 1
12 ( , )
m n
a b a i b j
a b
W W M r r
Sp i j
m n
= =
⎡ ⎤ ⎡ ⎤× × ⎣ ⎦ ⎣ ⎦
=
×
∑∑ , 
where Sp12 is the score at the ith and jth columns on P1 and P2, respectively.  P1 has m sequences 
and P2 has n sequences.  Wa and Wb are the sequence weights for sequence a in P1 and sequence 
b in P2.  The residue is denoted by r1(a,i) as the residue at ith column for sequence a in P1.  M is 
the value of the substitute matrix for r1(a,i) and r2(b,j).  There are many substitute matrices have 
been proposed to improve the accuracy of alignments, such as BLOSUM [30] and PAM [1].  
These substitute matrices were included into TPA.  Similarly, the definitions of scoring pair 
profiles, P1-P3 and P2-P3, are similar to that of pair profiles P1-P2.   
Let S(i, j, k) be the score of an optimal alignment at ith column of P1, jth column of P2 and 
kth column of P3.  The one-gap column is that the gap is at the column of each sequence in one 
of three profiles.  The two-gap column is that the gap is at the column of each sequence in two 
of three profiles.  The S(i, j, k) can be computed along with the auxiliary matrices according to 
the recurrences.  The matrices G, E and F save the scores that the one-gap columns open at kth 
column of P3, jth column of P2 and ith column of P1, respectively.  The matrices H, I and J save 
the scores that ith column of P1, jth column of P2 and kth column of P3 match two-gap columns, 
respectively.  The definitions of auxiliary matrixes are listed as follows. 
opening penalty for one-gap column and two-gap column, respectively.  For example, GOP1(i) 
return the value of one gap opening penalty if one-gap column is opened at the ith column of P1.  
GEP1 and GEP2 are denoted as the gap extension penalty for one-gap column and two-gap 
column, respectively.  In these matrices, the gap penalty function can be changeable.  For 
example, GOP and GEP can return fixed value at any column position (affine gap penalty 
strategy).  Conversely, GOP and GEP can return variant values at any column position (variable 
gap penalty strategy).  In this work, the affine gap penalty strategy is used for the experiments.   
Once S(L1, L2, L3) is computed, an optimal alignment of best score S(L1, L2, L3) can be found 
by a trace back procedure.  Since the entire matrices have to be kept, the trace back procedure 
requires O(L1L2L3) space.  For reducing the space requirement to O(L2), the divide-and-conquer 
algorithm of D.S. Hirschberg [26] is also applied into TPA.  The main idea that underlies the 
divide-and-conquer approach is the division of the original three-profile alignment into two 
smaller three-profile alignments.  Each smaller alignment can be further divided into another 
two ones and so on recursively until no further partitioning is possible.  The position that divides 
the alignment is called the “middle point” (imid, jmid, kmid) on an optimal path from S(0, 0, 0) to 
S(L1, L2, L3).  The optimal three-profile alignment is obtained by merging the series of the 
computed middle points.  In TPA, there are four phases, initial, forward, reverse, and middle 
point.  In the initial phase, the scores at each column of three pair profiles are calculated and 
save to the three matrixes.  To find the middle point, kmid is set to 32
L⎢ ⎥⎢ ⎥⎣ ⎦ .  In the forward phase, 
the matrices, S, E, F, G, H, I, J, are computed, where 0≤ i ≤ L1, 0 ≤ j ≤ L2 and 0 ≤ k ≤ kmid.  Let R, 
T, U, V, W, X and Y be the set of scores that are similar to the scores given above, where R 
corresponds to S, T to E, U to F, V to G, W to H, X to I and Y to J.  In the reverse phase, these 
matrices, R, T, U, V, W, X, Y, are also computed, where 0≤ i ≤ L1, 0 ≤ j ≤ L2 and 0 ≤ k ≤ kmid.  
Oppositely, the matrices in the reverse phase are computed in a decreasing order of indices.  In 
the middle point phase, the middle point (imid, jmid, kmid) is found by using the optimal paths from 
the score S(0, 0, 0) to the score S(L1, L2, kmid) and from the score R(L1, L2, kmid) to the score R(0, 0, 
kmid) obtained in the forward and the reverse phases, respectively.  The middle point of an 
optimal alignment of P1, P2 and P3 is one which has the score 
Score = max{S(i, j, k) + R(i, j, k), E(i, j, k) + U(i, j, k) + GOP1(j), F(i, j, k) + V(i, j, k) + GOP1(i), 
J(i, j, k) + Y(i, j, k) + GOP2(i,j)} 
After the middle point (imid , jmid , kmid) has been determined, the optimal alignments of subsequences 
from the score of (0, 0, 0) to the score of (imid , jmid , kmid) and from the score of (imid + 1, jmid + 1, kmid + 1) 
to the score of (L1, L2, L3) can be recursively computed.  The result of this optimal alignment is 
obtained by merging the series of the computed middle points.  The pseudo code of the TPA is 
presented as below.  
 
 
reverse.  To implement PTPA, only eight matrices, S, E, F, J, R, U, V and Y need to be compute 
in these two phases.  These matrices store the values computed according to the recurrences 
defined before.  The pseudo code of forward phase is shown as below: 
_____________________________________ 
Forward phase 
For(k=0 to k=kmid) { 
Processor rank_0: 
Step 1: Compute matrixes: S, E, F and J 
Step 2: Send the scores of last columns of S, E, F and J to processor rank_1 
Processor rank_i, for 1 ≤ i ≤ p − 2 : 
Step 1: Receive the scores of last columns of S, E, F and J from rank_(i-1) 
Step 2: Compute S, E, F and J 
Step 3: Send the scores of last columns of S, E, F and J to rank_(i+1) 
Processor rank_(p-1): 
Step 1: Receive the scores of last columns of S, E, F and J from rank_(p-2) 
Step 2: Compute S, E, F and J } 
_____________________________________ 
 
The pseudo code of reverse phase is shown as below: 
_____________________________________ 
Reverse phase  
For(k=L to k=kmid) { 
Processor rank_(p-1): 
Step 1: Compute R, U, V and Y 
Step 2: Send the scores of last columns of R, U, V and Y to rank_(p-2) 
Processor rank_i, for p − 2 ≥ i ≥ 1 : 
Step 1: Receive the scores of last columns of R, U, V and Y from rank_(i-1) 
Step 1: Compute R, U, V and Y 
Step 2: Send the scores of last columns of R, U, V and Y to rank_(i+1). 
Processor rank_0: 
Step 1: Receive the scores of last columns of R, U, V and Y from rank_(p-2). 
Step 2: Compute R, U, V and Y } 
_____________________________________ 
 
After above two phases are completed, these matrices are merged to find the middle point.  In 
each processor, a middle point is found and is send to processor rank_0 as a candidate middle 
point.  Processor rank_0 determines the middle point with the best score among these candidate 
FAVAT: Functional Analysis in Protein Superfamily by Feature Amplified 
Voting Algorithm with Three-profile alignment 
 
Algorithm 
FAVAT was progressed in two steps. The first step was to align the target enzyme, functionally 
identical enzymes (property A proteins) and sequence related proteins (~A proteins) by a 
three-profile alignment. The three-profile alignment algorithm, based on the dynamic 
programming three-way alignment approach, was designed to align three profile in space, such 
alignment would help to get best result for each vote among the three protein groups (Target, ~A 
and A).  
Let P1, P2 and P3 be three profiles, and P1i, P2j and P3k refer to the ith, jth and kth position in 
P1, P2 and P3, respectively, counting from 1. The symbol “-” denotes a “gap” in the alignment. 
Scores for the alignment of two columns are denoted by Sp(α, β).  The definition of scoring pair 
profiles, P1-P2, is shown as follows: 
( )1( , ) 2( , )
1 1
12 ( , )
m n
a b a i b j
a b
W W M r r
Sp i j
m n
= =
⎡ ⎤ ⎡ ⎤× × ⎣ ⎦ ⎣ ⎦
=
×
∑∑ , 
where Sp12 is the score at the ith and jth columns on P1 and P2, respectively. P1 has m sequences 
and P2 has n sequences.  Wa and Wb are the sequence weights for sequence a in P1 and sequence 
b in P2.  The residue is denoted by r1(a,i) as the residue at ith column for sequence a in P1.  M is 
the value of the substitute matrix for r1(a,i) and r2(b,j).  There are many substitute matrices have 
been proposed to improve the accuracy of alignments, such as BLOSUM. Similarly, the 
definitions of scoring pair profiles, P1-P3 and P2-P3, are similar to that of pair profiles P1-P2. Gap 
penalties are determined from gap opening (GOP) and gap extension (GEP) scores. The best 
score of the alignments of the prefixes P1i, P2j and P3k is denoted by S(i, j, k) if the residues (P1i, 
P2j, P3k) are aligned; G(i, j, k) is the best score given that (P1i, P2j,-) is the last column of the 
partial alignment, and H(i, j, k) is the best score given that the last column is of the form (P1i, -, -). 
E(i, j, k), F(i, j, k), I(i, j, k) and J(i, j, k) are defined analogously. It is not difficult to verify that 
these quantities must satisfy the recursions summarized in Fig. 6.  
When alignment was done, we expect to identify amino acid residues critical for imidase 
activity exist in target and property A proteins, but absent in ~A proteins. In the second step, a 
voting score (V-score) was given based on previous assumption then the V-score was sum up in 
each comparison. In this step, a substitution scoring matrix (BLOSUM62) was used to give score 
when each sequence of property A and ~A was compared to target sequence. BLOSUM62 scoring 
matrix is generally used in protein or nucleic acid sequence alignment. In our algorithm, each 
V-score would be given and accumulated to a total score (T-Score) till all sequences of property A 
and ~A were compared. The higher T-Score presents that the residue of target sequence is more 
interesting. The voting score calculation is shown in Fig. 7. Detailed FAVAT algorithm is shown 
as follows. 
CORAL-M: Heuristic COding Region ALignment Method for 
Multiple Genome Sequences 
 
Method 
 
In general, a progressive multiple sequence alignment method consists of three main stages: 
(i) A distance matrix is calculated by aligning all pairs of sequences separately; (ii) a guide tree is 
calculated from the distance matrix; (iii) the sequences are progressively aligned according to the 
branching order in the guide tree. CORAL-M follows these three stages.  In the third stage, 
CORAL-M adopts the extended CORAL program to align sequences. Figure 1 illustrates the 
procedure of CORAL-M.  
 
The distance matrix and guide tree 
 
In the CORAL-M, the distance of a pair of sequences is calculated using a fast approximate 
alignment method. This method allows very large number of sequences and very long sequences 
to be aligned. The scores are calculated as the number of ktuple matches in the best alignment 
between two coding region sequences. The trees used to guide the final multiple alignment 
process are calculated from the distance matrix using the Neighbour-Joining method. This 
produces unrooted trees with branch lengths proportional to estimated divergence along each 
branch. The root is placed by a 'mid-point' method at a position where the means of the branch 
lengths on either side of the root are equal. 
 
Extended CORAL 
CORAL is developed on the basis that the nucleotide sequences of coding exons are conserved 
at the amino acid level. Relative to SPA, which adopts the probability analysis and a greedy 
method to align homologous nucleotide sequences, CORAL employs a different probabilistic 
filtration method for efficiently aligning coding exons. The main concept of CORAL is based on 
the idea that, within a window of fixed length, an optimal alignment between two conserved 
coding regions is reached when the number of exact matches is much higher than that of 
mismatches. The alignment is performed by two sliding windows, one for each coding region. 
The number of matches for the sequences in the two windows is computed. If the number of 
matches is higher than the default value, then the alignment of the sequences in the windows is 
accepted and the alignment is continued. Conversely, a shifting mutation may exist and the 
alignment is suspended. A local search is then performed to determine a proper shifting. In either 
case, one or both of the sliding windows are then moved downstream and the alignment 
procedure is repeated. The essence of CORAL lies in a probabilistic rule (to be described later) to 
determine when a local search should be performed. CORAL enjoys a linear time behavior in 
practice without substantially sacrificing accuracy when the two coding regions are similar.  
P(X = x) = 
⎪⎩
⎪⎨
⎧
=−⎟⎟⎠
⎞
⎜⎜⎝
⎛
−
otherwise,0
,...,1,0,)1( wxpp
x
w xwx , 
where X is the random variable for the number of matches. Then P(X ≤ x) = ∑ ≤≤ =xk kXP0 )(  is the 
probability of at most x matches within these positions. For x < w, P(X ≤ x) decreases 
significantly as p increases. The true value of p is unknown unless Ax and Ay are optimally 
aligned; however, the value of p can be estimated by the prior genomic analysis of the organisms 
of which the input sequences derived. 
 
Shifting mutation. Let Wi(Sx) be the ith w-window in Ax, i.e., Wi(Ax) = Cx,[i..i+w−1]. Wj(Ay) is defined 
as the  Wi(Ax). The algorithm begins with i = 1 and j = 1, and increases these values of i and j as 
the alignment progresses. When values of i and j are larger than 1, an alignment of Cx,[1..i − 1] and 
Cy,[1..j − 1] is generated. In each step, the number of codon matches x of Wi(Ax) and Wj(Ay), i.e.,  
( ) ( )( )yjxi AWAWCMx ,= , 
is computed. If P(X ≤ x) ≥ threshold, Cx[i] and Cy[j] are aligned together and the algorithm 
proceeds to i + 1 and j + 1. In this case, Wi(Ax) and Wj(Ay) are assumed as right-positioned and the 
pair of Cx,i and Cy,j is assumed as a right-positioned pair. Otherwise, Wi(Ax) and Wj(Ay) are 
assumed as ill-positioned. Thus, Wi(Ax) and Wj(Ay) are unlikely to correspond to the same 
positions in an optimal alignment, because the probability is low to have only x or less matches in 
w consecutive positions of an optimal alignment. In the later case, the pair of Cx,i and Cy,j is 
assumed as an ill-positioned pair and a shifting mutation is likely to exist at these positions. 
Subsequently, the algorithm searches locally within g (the maximum number of gaps) for the best 
t to obtain the maximum number of codon matches x’, where  
x’ = max{ max0≤t≤g{CM(Wi+t(Ax), Wj(Ay))}, max0≤t≤g{CM(Wi(Ax), Wj+t(Ay))} }. 
If x’/w is smaller than the expected codon identity p of Sx and Sy, the algorithm proceeds to i + 1 
and j + 1, and Cx,i and Cy,j are aligned together. Otherwise, a shifting mutation is inferred to occur. 
In the case of x’ = CM(Wi+t(Ax), Wj(Ay)), t gaps are inserted into Ay and the algorithm proceeds to 
i + t + 1 and j + 1. In the other case of x’ = CM(Wi(Ax) Wj+t(Ay)), t gaps are inserted into Ax and 
the algorithm proceeds to i + 1 and j + t + 1. Extended CORAL adopts an approach based on 
probabilistic analysis to reduce the influence of any single false decision. The followings briefly 
summarize the decision rule.  
 
Decision rule. If the number of codon matches of segments Wi(Ax) and Wj(Ay) is x with P(X ≤ x) 
< threshold, then the pair of Cx,i and Cy,j is assumed as an ill-positioned pair, resulting from a 
shifting mutation. Figure 2 illustrates an example of shifting mutations. The distribution function 
F(x) = P(X ≤ x) can be computed before the alignment is generated, and therefore the assessment 
by the decision rule applied in each step can be achieved in constant time. For example, the 
 
Figure 2. An example of the six shifting mutations. A 3-codon sliding window is depicted. The 
optimal alignments are found by shifting a sliding window in (a) and (b). The ill-positioned is 
happen in the sliding window that the first codon in the two sliding windows are not matched 
each other. 
 
 
 
 
 
 
 
 
 
 
 
Figure 1: The alignment matrix showed the row-direction computing. 
 
 
 
Figure 2: The alignment matrix show the diagonal-direction computing. 
 
 
ARST (Asynchronous Row Single Thread) and ARMT(Asynchronous Row Multiple 
Threads): Different from SRST and SRMT, it did not wait for a single thread to finish a row block, 
the threads continue to be assigned the next row block for the other thread which named ARST. In 
the same conception, but a row block assigned to multiple threads, named ARMT. (Fig. 4) 
SDST (Synchronous Diagonal Single Thread) and SDMT (Synchronous Diagonal Multiple 
Threads): It replaced the row block to diagonal block of the SRST and SRMT, named SDST and 
SDST respectively. (Fig. 5) 
ADST (Asynchronous Diagonal Single Thread) and ADMT (Asynchronous Diagonal 
Multiple Threads): It replaced the row block computation to diagonal block computation of the 
ARST and ARMT, named ADST and ADMT respectively. (In Fig. 7.) 
In this paper, we adopted SRMT to implement the GPU-REMuSiC. There are N alignment 
sequences, a float type pointer matrix distant_matrix, and an array which have N2X (X: size of 
float type) bytes size was allocated in GM. For getting the better performance in accessing GM, we 
noted the coalesced access problem. For all threads in a half-warp coalesced by their keeping 
contiguous in address. Liu et al.[25] had already discussed the issue of the coalesced access in the 
GM about accessing strings. They take the string allocation into the memory slot which can be 
divided into two approaches by inter-task parallelization and intra-task parallelization. 
 
Figure7: Distance matrix and the thread blocks allocation. 
 
 
Figure 8. The load balancing cutting technology by two GPUs. 
 
 
GPU-REMuSiC used intra-task parallelization in this paper. Sequences were allocated in a 
memory slot indexed from left to right; therefore, it can use contiguous address threads to access 
continuous address in the memory. seqMaxLength was the maximum length among N sequences. 
If the length of a sequence was less than seqMaxLength, the dummy symbols were appended to 
the end of sequence until the sequence length equaled to the seqMaxLength. In this approach, 
two-dimensional array gpu_seq with size of N．X．seqMaxLength was allocated which can avoid 
to index and query for different sequences. Following code representedthe thread in a thread block 
read two characters from two sequences respectively. Then stored in the c and d character 
variables (c, d character variables was the register of GPU). In a thread block which got two 
sequences  and  from N sequences: 
 
 
In the NW algorithm, the substitution matrix (scoring matrix) is always read. GONNET, 
BLOSUM, PAM were common used scoring matrices for the protein alignment approach. 
Proposed algorithm pre-queried any two characters (include all residue) from a scoring matrix and 
stored the results in score_table array. Moreover, a 26x26 scoring table was constructed, and a 
hash function was used to calculate the c, d alignment score of  and [26].. Using tThe hash 
function can immediately get the value of : 
With SRMT computing model, the sequential algorithm (pseudo-code A) could be re-designed as 
multi-threaded parallel algorithm (pseudo-code B): 
 
1 threadID from 1 to ; 
2 for(  = 1; ; ++){  
3  c = [ ]; 
4  d = [threadID]; 
5 
6  A[ ][threadID] = A[ -1][threadID] + G; 
7  synchronization all threads; 
8   
9  A[ ][threadID] = max(A[ ][threadID],  
A[ -1] [threadID-1] +  
SCORE(ascii(c)- 65, ascii(d) - 65)); 
10  synchronization all threads; 
11 
12  if(threadID = = 1){ 
13   for(  = 1; ; ++) 
14    A[ ][ ] = max(A[ ][ ], A[ ][ -1] + G); 
15  } 
16  synchronization all threads; 
17 } 
 
Each thread is responsible for a computing element  in an alignment matrix 
(Pseudo-code B). For each  had three directions needed to be computed, from the 
upper element to upper-left element .Elements 
were independent, therefore, threads could parallel compute it. But it must make the threads 
synchronization to avoid next directional computing to get the wrong value between two 
directional. Because there had data dependence issue from the left element , 
therefore, a thread was assigned to execute the sequential computation. In the CUDA architecture, 
PBSM was used to store . In the same thread block, all the threads can access it. The access 
speed of PBSM is very fast in GPU (only less than register). The space complexity was O(n2).In 
order to make sequences with long length in PBSM, we use the concept of Divide-and-Conquer 
algorithmto implement pseudo-code C: 
 
ANALYSIS 
Assume that the lengths of a pairedsequences were  and , respectively. The computation time 
(CT) of one operation in CPU was , the CT of one store operation was ,a arithmetic CT was 
, and the CT of query a scoring table was . Therefore, the internal loop of pseudo-code A 
from 4 to 7 lines can be expressed as a pseudo-code D: 
 
1 tmp1 = A[ -1][ ] + G; ......... (P) 
2 tmp2 = A[ -1][ -1] + SCORE(ascii(c) - 65, ascii(d) - 65)); (Q) 
3 tmp3 = A[ ][ -1] + G;(R) 
4 tmp4 = max(tmp1, tmp2);(PQ)   
5 A[ ][ ] = max(tmp4, tmp3);((P|Q)R) 
 
In the above pseudo-code, line 1 was P-operation, the line 2 was Q-operation, the line 3 was 
R-operation, line 4 was PQ-operation, and line 5 was (P|Q)R-operation.The CT of 
P-operationwas + + , the CT of Q-operation was 3 + + +  (3  is the CT of load 
 and c and d), the CT of R-operation was + + , the CT of PQ-operation 
was + + , and the CT of (P|Q) R-operation was + + . The CT of internal loop can be 
estimated as: 
Ⅹ[P CT+ Q CT+ R CT+ PQ CT+ (P|Q)R CT] = 
Ⅹ[( + + )+( + + + )+( + + )+( + + )+( + + )] 
 
The total CT of the sequence alignment can be estimated as: 
TimeCPU= Ⅹ[( + + ) +(3 + + + )+ ( )+( + +  
= Ⅹ[ + + ] 
 
In this paper, SRMT was used to implement the sequence alignment of GPU-REMuSiC. The 
numbers of threads were  in a thread block, where . The access time with different 
memory was assumed the same in GPU. The CT of one load operation in GPU was , the CT of 
one store operation was ,the arithmetic CT was , and the CT of query a scoring table was 
.There have two steps of CT required to be analyzed in SRMT. The first step was all threads in 
the same row which processed P-operation in parallel, then computed Q and PQ-operation in 
parallel. The second step in the same row executed the sequential R and (P|Q) R-operation, then 
the CT of steps can be estimated as follows. 
The GPU have B thread blocks, and the distant matrix can be divided into the same amount 
of partitions. The elements assigned to different thread blocks to compute in parallel. TimeGPU 
could be estimated the CT as: 
TimeGPU= ⅩlⅩ [(3l+6) +(2l+3) +(2l+3) + ]， 
 
In fact, the GPU-REMuSiC used a row as a computing unit which was assigned into different 
thread blocks. There had a limited number of thread blocks in once parallel computing. Even if 
there were many thread blocks in a kernel, it cannot use the completely computing resources with 
GPU. Therefore, the estimated CT in a real GPU cannot truly reflect the actual performance. 
 
對於日後我的研究來講，或許都可以對這些技術再做延伸或者實際開發應用。而
此次的會議較不一樣的地方是他有許多廠商前來展覽，我們也可以看見許多
GPU上實際開發後的應用成果，這對於我日後所想要選擇的研究方向也很有幫
助，因為知道現今產業界的產品應用，就可以知道現在還缺甚麼，或是需要改進
的地方，就這些我們可以再進行一些研究。 
 
三、建議 
 國內若也有這樣的大型研討會，可以讓各界不同領域的學者來分享他們的研
究成果，就算是不同的領域但是都有同樣的一個環境平台來進行研究，這樣學者
們就可以就一樣的平台上的不同應用來做延伸研究，這可讓各界的研究可以更有
交流更有合作的機會。 
 
 
 
 
 
 
 
(a) DP computation time                           (b) overall computing time 
Figure 1: The speedup ratios by comparing GPU-REMuSiC and RE-MuSiC. 
We implemented the GPU-REMuSiC on two NVIDIA GeForce GTX 260 graphics cards and installed in a PC 
with an Intel i7 920 2.6GHz CPU and 12GB DDRIII-1333 RAM running the Linux operating system. The test 
data are randomly generated protein sequences: 400 sequences in 856 characters length, 2000 sequences in 266 
characters length, 1000 sequences in 858 characters length, 2000 sequences in 858 characters length. The set of 
gap open penalty is 10.0, gap extension penalty is 0.2, scoring matrix is GONNET 250, regular expression 
constraint is "[st]-x(2)-[de]". We set up 512 and 192 for the number of thread blocks and per block threads, 
respectively, in GPU-REMuSiC.  
 
 
 
 
 
97 年度專題研究計畫研究成果彙整表 
計畫主持人：林俊淵 計畫編號：97-2221-E-182-033-MY3 
計畫名稱：開發生物資訊新工具去探索 RNA 病毒序列、結構、功能與演化--以流感病毒與腸病毒為應
用模型--以序列比對技術為核心的 RNA 病毒研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 4 4 100%  
研究報告/技術報告 0 0 100%  
研討會論文 4 4 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 10 10 100%  
博士生 2 2 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
