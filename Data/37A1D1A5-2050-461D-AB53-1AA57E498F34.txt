無循序性之管線化 CORDIC 旋轉機制的研究與實現以相關硬體產生器的開發(I) 
“Research and Implementations of a Non-Sequential Pipelined CORDIC Rotation Mechanisms and the 
Related Hardware Generator Development (I)” 
計畫編號：NSC-96-2221-E-251-005 
執行期間：96 年 8 月 1 日 至 97 年 7 月 31 日 
主持人：國立屏東商業技術學院資訊科技系莊作彬助理教授
中文摘要 
座標旋轉數位計算機(CORDIC)可以產生
許多有用的數學函數，它具有三種座標系統
(分別為圓周座標、雙曲線座標以及線性座標
系統)，並且各有兩種運算模式(旋轉模式以及
向量模式)，可以執行許多的函數計算，像是
乘除法、三角函數、對數、指數、根號運算與
雙曲線函數等。這些函數的主要用途是在數位
信號處理，矩陣運算及算術處理器的應用，近
年來更有將 CORDIC 應用在網路處理器上，
CORDIC 的應用相當廣泛。因為 CORDIC 的
架構中所應用到的元件很單純，大部分是加法
器、移位器以及少數的唯讀記憶體(ROM)，在
超大型積體電路(VLSI)上就可以直接實現出
來。本計畫主要探討的是 CORDIC 的旋轉模
式下的效能提升。 
    有一項可以提升計算量的技術是管線化
執行，也就是將原先計算的工作分成好幾個階
段並且將這些階段的工作重疊執行，以提升整
體的計算效能。然而，CORDIC 的管線化旋轉
運算卻具有循序執行的特性，也就是每一次的
微旋轉必須根據當時的角度正負值決定，無法
在一開始就根據輸入角度決定全部所需執行
的微旋轉方向，因此，在本研究計畫當中，我
們的研究目的是針對管線化 CORDIC 旋轉機
制能夠找到一個有系統化的方法，以設計出更
快速的 CORDIC 旋轉機制的硬體，同時對於
每個階段的微旋轉能夠具有使用冗餘數字實
作上的效能且保有傳統二進位資料的特性，在
這些方法都找到後，我們已經設計出高效能的
管線化 CORDIC 旋轉機制，並且以硬體描述
語言設計合成出硬體以及執行相關之計算，進
行不同精確度下的效能比較。 
英文摘要 
The CORDIC (COordinate Rotation DIgital 
Computer, CORDIC) can be applied to generate 
many useful mathematic functions. It has three kinds 
of coordinate types, including circular, hyperbolic 
and linear types; also it has two kinds of operation 
modes including rotation and vectoring modes. The 
CORDIC can be applied to perform many kinds of 
function computations, such as 
multiplication/division, triangle, logarithm, 
exponential, square root and hyperbolic functions, etc. 
The applications of these functions are related to 
digital signal processing (DSP), matrix operation and 
arithmetic processing. In recent years, CORDIC can 
be even applied to network processor, we can 
understand that the CORDIC has very wide range of 
applications. Due to the elements in CORDIC 
architecture are very simple, including adders, 
shifters and a few ROMs, these can be implemented 
in VLSI very easily. In this project, we expect to 
focus on the performance of CORDIC rotation mode. 
There is one technique which can boost the 
throughput is to pipelining the execution. That is, to 
CORDIC 在管線化的執行具有循序的特性，無
法提升其效能。這樣的特性引起我們的興趣，
希望在本研究計畫來提升 CORDIC 圓形座標
中旋轉模式下的執行效能：CORDIC 圓形座標
中旋轉模式的運算結果可以應用在各種轉
換、正餘弦角度產生、旋轉器、等化器與網路
處理器上，所以我們預期我們在本計畫中所研
究的 CORDIC 旋轉機制，將可以具有以上所
述的應用。 
三、 研究方法及成果 
在本研究計畫執行迄今，我們已經針對管
線化 CORDIC 旋轉機制已經找到一個有系統
化的方法，以設計出更快速的 CORDIC 旋轉
機制的硬體，同時對於每個階段的微旋轉能夠
具有使用冗餘數字實作上的效能且保有傳統
二進位資料的特性，並且已經設計出高效能的
管線化 CORDIC 旋轉機制，並且將我們所提
出的方法推廣到雙曲線模式下的座標系統。在
這一年度計畫執行剩餘時段當中，我們預期利
用 Verilog 硬體描述語言實作出我們所提出的
新CORDIC旋轉架構，並且利用 0.18µm TSMC
標準元件庫作合成，以實作出硬體以及執行相
關之計算。 
要完成管線化 CORDIC 旋轉機制的執行必須
克服前 m-1 次（  3/)3log( 2−= Bm ）迴圈中
循序執行的特性，因此，要完成無循序性之管
線化 CORDIC 旋轉機制，必須要解決前 m-1
次迴圈中 CORIDC 旋轉具有的特性： 
1. 每一次迴圈中，微旋轉的方向（ iσ ）必須
根據θ 當時的正負值決定; 
2. 對於 B 位元精確度且輸入角度為θ 而言，
輸 入 角 度 可 以 被 表 示 成
)2(tan...)2(tan)2(tan 1212111 BB −−−−−− +++= σσσθ
; 
理想中的管線化 CORDIC 旋轉機制可以
根 據 輸 入 角 度 值
（ 0 1 2. ... , {0,1}, 0 ~B ib b b b b i Bq = = = ）中每個位
元值直接決定微旋轉的方向。我們所採用的資
料表示是固定小數點(fixed point)的表示法，如
果假設輸入角度初始值為正值，我們可以將 0b
值設定為 0，可以簡化我們的考量，當初始角
度為負值時，仍然可以利用該架構執行，僅需
要輸出值稍作符號值的修正即可。 
如 果 我 們 限 定 輸 入 的 角 度 範 圍
/ 4θ pi≤ ，則可以省略第 0 次迴圈的微旋轉階
段，要完成去除傳統管線化 CORDIC 旋轉機
制的循序性這樣的目的，我們必須要利用以上
所說的重要特性，納入到我們的研究方法當
中，我們可以觀察到，輸入的角度採取一般的
二進位表示，然而每次微旋轉所需要的 iσ 值為
+1 或是-1（ 1 ~i B= ），所以如果要以輸入的角
度值來直接完成管線化的 CORDIC 旋轉機
制，就必須要考慮到兩者之間轉換的處理情
形；再者，要用輸入的角度值接決定每次微旋
轉所需要的 iσ 值，因為原先輸入的角度在每次
迴圈是跟 1tan 2 i- - （ 1 ~i B= ）作加減，因此我
們必須要找到前 m-1 次迴圈中，每個位元其二
進 位 權 重 （ 即 2 , 1 ~i i B- = ） 跟 1tan 2 i- -
（ 1 ~i B= ）之間的關係，來決定每次微旋轉
需要執行的次數。 
根據以上的推論，我們先以 16 位元的輸
入角度值為例，解釋我們的研究方法以及成
果。 
為了讓輸入角度初始值每個位元直接決
定每次微旋轉所需要的 is 值為+1 或是 -1
（ 1 ~i B= ），我們可以利用數位信號處理中數
字轉換的技巧完成，稱之為二進位轉換極位數
字編碼（Binary to bipolar recoding，簡稱 BBR）
以 4 位元為例，假設原始資料為 0.1010，則經
過轉換後，可以表示成 40.1111 2-- ，其中1表示
為-1，我們只需要將原始資料中小數點後的資
料往右移一位，原始資料為 0 的轉換成-1、為
1 的則保有原值，轉換後的小數點第一位的值
則根據輸入角度的初始值的正負值決定：正值
是 1、負值則為-1，這樣的做法相當簡單，不
需要任何硬體的花費。我們可以看到第一項的
每次迴圈微旋轉的 iσ 都可以在運算前得知，所
以我們所提出的無循序性的管線化 CORDIC
旋轉機制的架構可以表示成多運算元的加總
方式（Multi-operand summation），像是乘法以
及加法運算中多個運算元的情形，可以利用進
位儲存或是其他高速的加法運算來加速我們
所提出的架構。表 3-1 列出了我們初步提出的
研究方法與先前 CORDIC 旋轉方法之比較。 
1σ
2σ
3σ
4σ
5σ
'1 Kxx •= '1 Kyy •=
x′ y ′
0b 1b 2b 4b 5b 16b
Hθ
6b
1e 4e52--
1 4σ σ→
1 5σ σ→
Lθ
5σˆ
6σˆ
16σˆ
17σˆ
x′ y′
0 1 4.
L b b bθ = 
Hθ
4 5 16ˆ .
H b b bθ = × × ×   
7σˆ
8σˆ
LBBR
4 5
1
2H ii eθ
−
=
+ −∑
HBBR
18x
(5)S
(6)S
(7)S
(8)S
(16)S
(17)S
1σ
18y
圖 3-1：無循序性管線化 16 位元 CORDIC 旋轉機制的架構圖
可供推廣之研發成果資料表 
█ 可申請專利  □ 可技術移轉                                      日期：97 年 8 月 26 日 
國科會補助計畫 
計畫名稱：無循序性之管線化 CORDIC 旋轉機制的研究與實現以及
相關硬體產生器的開發(I) 
計畫主持人：莊作彬 
計畫編號：NSC-96-2221-E-251-005 學門領域：積體電路與系統 
技術/創作名稱 無循序性之管線化 CORDIC 旋轉機制 
發明人/創作人 莊作彬 
中文：更快速的 CORDIC 旋轉機制的硬體，同時對於每個階段的
微旋轉能夠具有使用冗餘數字實作上的效能且保有傳統二進位資
料的特性，在這些方法都找到後，我們已經設計出高效能的管線化
CORDIC 旋轉機制， 
 
技術說明 英文：A systematic method is deveolped that can derive that non-sequential 
pipelined CORDIC rotation mechanism, also have the same performance as 
redundant implementations with binary number representations. 
可利用之產業 
及 
可開發之產品 
通訊應用上的正交轉換器、直接數位頻率合成器等。 
技術特點 
無循序性之 CORDIC 管線化旋轉機制，加速管線化處理。 
推廣及運用的價值 
可實作於通訊應用上，以加速運算。 
※ 1.每項研發成果請填寫一式二份，一份隨成果報告送繳本會，一份送 貴單位
研發成果推廣單位（如技術移轉中心）。 
※ 2.本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。 
※ 3.本表若不敷使用，請自行影印使用。 
A Novel VLSI Iterative Divider Architecture for Fast 
Quotient Generation 
Tso-Bing Juang, Sheng-Hung Chen 
Department of Information Technology 
National Pingtung Institute of Commerce 
Pingtung City, Taiwan 
tsobing@npic.edu.tw 
Shin-Mao Li 
Department of Computer Science and Engineering 
National Sun Yat-sen University 
Kaohsiung City, Taiwan 
Abstract—In this paper, a novel VLSI iterative divider architecture 
for fast quotient generation that is based on radix-2 non-restoring 
division is proposed. To speed up the quotient generation, our 
method makes use of the magnitude difference between the partial 
dividend and the divisor for the next iteration so that the proper 
weight of the quotient can be obtained more rapidly than the 
conventional methods. Our proposed architecture is very simple 
compared to the multiplication-based methods such as those that 
are based on Newton-Raphson. Simulation results show that our 
proposed method can achieve less than half the number of 
iterations required by the conventional division (i.e. less than n/2 
vs. n, where n is the bit-width of the dividend and the divisor). The 
proposed architecture has been synthesized in 0.13μm CMOS 
standard cell library to demonstrate the delay and the power 
efficiency. 
I. INTRODUCTION
Division [1] [2] is one of the most important and time-
consuming operations that are widely found in 3D graphic 
processing and other applications, which require function 
generations. Unlike addition/multiplication, division demands 
more execution latencies. In general, the division architecture 
can be classified into two categories: iterative and multiplication-
based. Iterative division [2] generates one or more quotient bits 
after each iteration, which consists of shift-and-subtract 
operations. The most common iterative division is radix-2 
restoring and non-restoring division. In a radix-2 restoring 
division, the quotient set is restricted to be {0, 1}, which may 
require a correction step. On the other hand, the radix-2 non-
restoring division generates a quotient which is +1 or -1 after 
each iteration. It does not require a correction step and the 
quotient can be converted into two’s complement representations 
on-the-fly [3]. The architecture of the radix-2 division is very 
simple but requires n cycles of shift-and-subtractions, where n
denotes the bit-width of dividend and divisor.  
High radix iterative division has been employed to generate 
more quotient bits. The most common high radix division 
method is radix-4 SRT division [4]. Although high radix division 
can produce more quotient bits than radix-2 division, it demands 
a complex architecture for higher radixes [5-9]. The other type of 
division is called multiplication-based division. The most 
commonly used techniques are based on Newton-Raphson 
convergence equations and Talor-MacLaurin expansions [10-12]. 
This method is based on using function-solving techniques to 
obtain quadratic convergence instead of relying on iterative 
computations. However, these methods require ROMs and 
multipliers to perform the division operations. When the bit-
width of dividend and divisor increases, the area of ROMs and 
multipliers will increase exponentially, leading to inefficient 
hardware implementations. 
In our work, we propose a novel VLSI iterative radix-2 non-
restoring division that leads to significant reduction in the 
execution iterations when compared to conventional non-
restoring division. Our proposed method leads to the following 
advantages: 1) a more area efficient architecture than the 
multiplier-based methods and 2) reduced average number of 
execution iterations when compared to the conventional iterative 
methods. 
The rest of this paper is organized as follows. In section II we 
introduce the basic concept of radix-2 non-restoring divisions. 
Our proposed new division architecture and architecture are 
described in section III. The simulation results and discussions 
are given in section IV. Section V draws the conclusions. 
II. BASIC CONCEPT OF RADIX-2 NON-RESTORING DIVISIONS
In this section, we introduce the basic concept of the radix-2 
non-restoring division method. Suppose P1 is the n-bit dividend, 
D is the n-bit divisor and Q is the final quotient, where 0< P1 < D
<1, are fixed-point representations shown in Figure 1, where the 
Sign bit denotes the sign (0 denotes positive and 1 denotes 
negative), the Integer bit is 0 or 1, and the Fraction part has n bits. 
•
Figure 1. Data representations in our work 
In each iteration, the digit of Q (defined as qi) is obtained by 
Algorithm 1: 
Algorithm 1: Radix-2-Non-Restoring-Division (Q, Dividend, 
Divisor). 
This research is supported by National Science Council, Taiwan, under 
grant number 96-2221-E-251-005. 
978-1-4244-1684-4/08/$25.00 ©2008 IEEE 3358
The architecture to implement magn(f) rely on the Leading 
Zeros Detector (LZD) [13] to detect the leading zeros of the 
fractional part of the value of f. LZD is very important for the 
normalization of floating-point operations as it can detect the 
leading zeros to produce the result for shifting the mantissa 
properly, which is then subtracted by the exponent part to get 
the correct representations. To use the LZD proposed in [13], 
the architecture for obtaining the result of diff can be shown in 
Figure 4. where S denotes the value of sign bit of Pi and the 
frac(Pi) denotes the n-bit fractional part of Pi and D.
There is another point which should be taken into account: 
the value of Pi can be negative during the operations. In [13] the 
author did not mention the treatment of detecting the leading 
ones of the negative input. The sign of Pi is taken into 
consideration by exclusive-OR every bit of the fractional part of 
P with qi before it is fed into the LZD to produce the value of 
diff.
( )iS frac P⊕
Figure 4. The architecture for obtaining the value of diff
For example, if Pi=-0.075, then it’s two’s complementations 
will be 11.1110110011001101. After the n-bit fractional parts 
are logically exclusive-OR by the sign bit, the value input to 
LZD is 0001001100110010. The LZD will produce the value of 
diff to be 3. 
According to the above analysis, we can derive the novel 
iterative division algorithm that is shown in Figure 5. 
iq
•
iq
1iP+
2 diff−×
iP
Figure 5. The novel iterative division architecture 
In addition to the use of LZD, one can derive the architecture 
using Leading Zeros Anticipation (LZA) circuit proposed in 
[14-18] to produce the value of diff while performing the 
addition/subtraction simultaneously. The corresponding 
architecture is straightforward and will not be discussed in this 
paper. 
From Figure 5, we know that adding a LZD can help to 
speedup the iterative division and to generate the quotient faster. 
We will show the simulation results in the next section. 
IV. SIMULATION RESULTS AND ANALYSIS
We have input 536,870,912 normally distributed test data to 
our proposed architecture, where the range of dividend is from 
2-2 to 2-1-2-16, and the divisor ranges from 2-1 to 1-2-16. The 
simulation results for 16-bit input data is shown in Figure 6, 
where the horizontal axis denotes the number of iterations 
required to achieve 16-bit accuracy in our proposed division 
architecture. The vertical axis denotes the weighted percentage 
of input data. According to Figure 6, we can derive that the 
average number of iterations required is 7.322689, which is 
smaller than n/2(=8) (the conventional radix-2 non-restoring 
division architecture require n iterations). Figure 7 compares the 
number of inputs which could achieve 16-bit accuracy after 4, 8 
and 12 iterations for the conventional and proposed architecture. 
Using our proposed architecture, if we fix the number of 
iterations to be 8, there are 78.24% of test data that could 
achieve 16-bit accuracy, and 99.35% that could achieve the 
same accuracy if we fix the number of iterations to 12. This 
comparison shows that if we fixed the number of iterations in 
our proposed architecture, we have more results that achieve n-
bit accuracy compared with the conventional division 
architecture.  
˃ˁ˃˃ʸ
ˈˁ˃˃ʸ
˄˃ˁ˃˃ʸ
˄ˈˁ˃˃ʸ
˅˃ˁ˃˃ʸ
˅ˈˁ˃˃ʸ
ˆ˃ˁ˃˃ʸ
P
e
r
c
e
n
t
a
g
e
(
%
)
˄ ˅ ˆ ˇ ˈ ˉ ˊ ˋ ˌ ˄˃ ˄˄ ˄˅ ˄ˆ ˄ˇ ˄ˈ ˄ˉ
Number of iterations
Figure 6. Simulation results for our proposed novel division architecture using 
16-bit input data
ˁ˃˃˃ʸ
˄ ˁ˃˃˃ʸ
˅ ˁ˃˃˃ʸ
ˆ ˁ˃˃˃ʸ
ˇ ˁ˃˃˃ʸ
ˈ ˁ˃˃˃ʸ
ˉ ˁ˃˃˃ʸ
ˊ ˁ˃˃˃ʸ
ˋ ˁ˃˃˃ʸ
ˌ ˁ˃˃˃ʸ
˄˃ ˁ˃˃˃ʸ
P
e
r
c
e
n
t
a
g
e
(
%
)
ˇ ˋ ˄˅
Number of iterations
Conventional Ours
Figure 7. Comparisons of the percentage which could achieve 16-bit accuracy 
between our proposed novel division architecture and the conventional 
architecture for 4, 8 and 12 iterations, respectively
3360
