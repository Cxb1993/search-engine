應用電路型態辨認於選擇走訪波形鬆弛演算法，漸增電路模擬，和對於多設計
參數之暫態敏感度的同步計算
Applying circuit type identification on STWR, Incremental circuit simulation, and simultaneous
computations for transient sensitivities with respect to multiple design parameters
計畫編號：NSC94-2215-E-034-001
執行期間：94 年 8 月 1 日 至 95 年 10 月 31 日
主持人：陳俊榮 中國文化大學資訊科學系副教授
中英文摘要
中文摘要
關鍵字：線路模擬，漸增模擬，信號流，暫態敏感度
本計畫進行電腦自動化設計領域線路模擬方面的研究，包含三個主題，分別為使用靜態
電路型態辨認於選擇走訪波形鬆弛演算法(STWR Algorithm)，時序及敏感度的漸增模擬和
對於多設計參數之敏感度的同步計算方法。
我們之前的國科會計畫研究成果指出了應用靜態電路型態辨認於基於鬆弛線路模擬可
以大幅加強模擬效能，其中線路分成了有迴授部分和無迴授部份兩種型態。在本計畫的第
一個主題中，我們提出將線路型態進一步分成三種的做法，那就是無迴授部分，相鄰交聯
部份和迴圈交聯部份，然後搭配 STWR 進行模擬，由於 STWR 的高效率和較詳細的線路型
態分辨，模擬效能進一步提高了。
漸增線路模擬是很實用的模擬技巧，使用前一次模擬所得的波形，加速後續的模擬，使
用於電路設計過程中可以大幅減少線路驗證的時間。過去已有多種技術，但在最好的
Incremental-in-Time 技術中仍有不少多餘的子線路計算發生；我們提出可以精確追蹤子線路
變化度，只模擬真正有波形變化的子線路的做法，此做法配合 STWR ，成為
Incremental-in-Change 法，程式測試結果驗證了其優異的效能。另外，於自動化電路設計方
面敏感度漸增模擬也是很實用且被需求的技術，但未有人發表此方面的研究，我們在此主
題中一併提出其做法。
電路的敏感度資訊矩陣是由電路變數對所有設計參數的微分得到的，其中橫列是某電
路變數對所有設計參數的敏感度，而縱行是所有電路變數對某設計參數的敏感度，使用時
經常是以橫列為單位被要求的，亦即需要的是某電路變數對所有設計參數的敏感度；傳統
的敏感度計算法有 Direct 法和 Adjoint 法，Direct 法較好計算，但不幸的是其使用
column-major 的順序計算敏感度，使計算效率打了折扣，而 Adjoint 法是利用 row-major 方
式計算，但是其計算方式較複雜。我們提出了使用基於鬆弛法計算敏感度的新做法，其中
子線路計算採 Direct 法且使用 row-major 計算順序，新方法在設計參數個數較多時確實可
大幅的效率改進。
英文摘要
Keyword: Circuit simulation, incremental simulation, signal flow, transient sensitivity
There are three subjects in this report, which are using static circuit type identifications in
或是 STWR 處理，實做上是以 WR 作為主程式，feedback portion 則視做 WR 之下的
macro-subcircuit(也是子線路)然後以 ITA 模擬，我們發展了數種版本，但可以 ITA-WR[1](以
WR 為主程式，以 ITA 處理 macro-subcircuit)做為代表。我們認為以上的做法可以透過更精
密的做法以獲得改進，那就是將線路分辨成更多種型態，如將 feedback portion 更進一步分
辨成為 adjacent coupling portion(子線路間彼此有強烈交聯)和 directed loop portion(單純有向
迴授圈的子線路)，因為這兩類電路型態在交聯(coupling)強度上其實是有差別的。但是
ITA-WR 的架構限制了這種更進一步的處理，於是我們轉向去利用較有彈性的 STWR 演算
法。
STWR 使用精確的子線路排序法(subcircuit scheduling，子線路排序後以進行計算)，精
確到一個子線路一個時間點的規格，任何一個子線路的的排序都要符合 exact-condition[5]
的規定，如此精細的子線路排序方式使得 STWR 演算法很有計算效率，它擁有較低的子線
路計算總次數，另外它也有動態視窗(dynamic windowing) 的功能，它是 WR 的進階改良
版，具有較好的計算效率，而且也有較好的收斂性。但是我們發現 STWR 還是有若干缺點，
主要是處理強烈交聯電路(比如說 shift registers)和大的迴圈電路(比如是 ring oscillator)時其
效率較差，因為雖然可以收斂，但會用掉多次的迴圈數。STWR 的缺點恰巧可用前述的電
路型態辨認的做法彌補，所以此主題的目的就是利用 STWR 搭配電路型態辨認以獲取更好
的演算法。
第二個主題討論漸增模擬(incremental simulation)[6][7][8]，這是用來模擬輕微變更設計
(或變更輸入信號)的電路，而之前電路模擬的暫態波形被保存著可以加以利用，模擬的原則
是盡量利用此保存的波形，比如說模擬時檢查電路模擬過程，只模擬有波形變化(和上次模
擬結果不同)的部分，省去未變化部分的模擬而直接以上次的波形代替；若設計或輸入信號
變更得很少，則漸增模擬可以省去許多模擬時間，大幅加快線路模擬的驗證速度。在 IC 設
計過程中常會用到漸增模擬，設計過程中的人為調整或是電路最佳化程式的自動調整都會
要求多次的線路模擬，而每次模擬所處理的電路設計通常只有稍微的變化，所以漸增模擬
是很實用的一種技術。
一開始，漸增模擬是應用在數位電路的模擬上[6]，之後才應用到線路模擬上[7][8]，在
線路模擬裡採用漸增模擬較為困難，這是因為子線路間常有雙向交聯關係，使得計算較為
複雜；針對線路模擬的漸增模擬先後有兩種技術被提了出來，首先是使用
Incremental-in-Space 技術配合 ITA 演算法的做法[7]，後來則有使用 Incremental-in-Time 技
術配合 WR 演算法的做法[8]，這些方法都是搭配基於鬆弛演算法，其原因是它們的彈性。
但此兩種做法的缺點是效率性不佳，其中 Incremental-in-Space 的效率明顯極差，一旦某個
子線路開始計算，就會計算到終點時間，而 Incremental-in-Time 較好，但是在某個 window
中，某子線路的計算也是從頭到尾的，也就是其子線路計算量的解析度成為 window 的大
小。由於子線路計算量解析度的大小影響計算效率，所以我們希望使用最小的解析度，那
就是時間點解析度，以獲取最佳的計算效率，我們就使用 STWR 演算法，因為它的子線路
排序是精確到時間點的規格。
第三個主題討論的是多設計參數下敏感度計算的效率問題。傳統上敏感度的計算方法分
兩種，是 Direct 法[9]和 Adjoint 法[10]，其中 Direct 法是比較自然好計算的方法，原電路經
過微分處理後得到的敏感度電路，可以和原電路一起處理，我們可以使用原電路使用過的
數值資料(Jacobin 等)和 time step 資訊，經濟快速地算出暫態敏感度；另一種 Adjoint 法則較
不好計算，必須求取 Adjoint circuit 上的電路變數之值，再和原電路的電路變數一起計算以
Table 1: Number of Subcircuit Calculations in Simulating Fig. 2.
Algorithm S1 S2 S3 S4 Total
STWR 5,555 8,721 5,536 2,058 21,870
STWR+ 3,832 4,083 4,261 3,333 15,509
Table 2: Specifications of Tested Circuits
Circuit Node# MOSFET# Subckt#
1: 8-bit ALU 400 800 224
2: 8-bit Shift Register 32 48 16
3: 4-bit Binary Counter 88 176 44
4: CPU 465 946 224
Table 3: Running Results of Algorithms
Subcircuit Calculation # CPU Time*Circuit
ITA WR STWR+ ITA WR STWR+
1 1,107K 222K 196K 17 11 7
2 70K N. A.+ 88K 2 N. A. 5
3 600K 261K 195K 9 16 9
4 3,401K 98.6K 94.1K 46 4.2 3.9
*: CPU time is in Pentium IV 1.4G second. +: Due to divergence.
確實有較好的執行成效。
本計畫的第二個主題就是研究以 STWR 演算法進行漸增線路模擬的方法，我們將使用
STWR 作 為 模 擬 演 算 法 ， 配 合 較 精 準 版 本 的 Incremental-in-Time 技 巧 ( 較
Incremental-in-Time 要精密，原來是 incremental in time“window”，這個做法是 incremental in
“time point”)，也就是稱為 Incremental-in-Change 的技術來獲致更好的漸增模擬效能，做法
列示如下：
(1) STWR 演算法可以動態地自動計算 window 大小，有效解決一般 WR 演算法這方面的
問題。
(2) 利用 STWR 以 time point 規格精密度 schedule 子線路的特點，精確追蹤子線路的變化
度，子線路一旦停止波形變化(亦即又和儲存的波形吻合)便馬上停止模擬，以節省計
算能量，如此便解決了前述 Incremental-in-Time 法中 global window 所引發的計算效率
問題；我們稱呼這種擁有精密的子線路變化度追蹤效能的漸增模擬方法為
Incremental-in-Change，表示漸增模擬的啟動完全是根據子線路波形的變化度。
詳盡的演算法和效能比較還是一樣的參考到[11]。表格五列出了漸增模擬的效能，新方
法叫做 IIC，測試電路中括號標示了設計有所變更的子線路，我們將變更大致調成 10%的範
圍左右，可以見到模擬時間有大幅的減少，但是和子線路計算數減少的比例比起來卻沒那
麼好，可見 IIC 的 overhead 是大的，這部分是需要繼續改善的地方。
Table 5: Running Results of Incremental Simulations
Subcircuit Cal. # CPU Time*Circuit
STWR IIC STWR IIC
8-bit ALU(Vcin) 135K 10.2K 5.3 1.8
Inv10(S1)+ 53.3K 53.0K 1.3 1.4
Inv10(S6) 53.4K 41.7K 1.4 1.5
Inv10(S10) 53.3K 7.53K 1.4 0.9
4-bit Shift Register(S8) 85.7K 42.2K 4.2 2.6
+: S1 is the 1st subcircuit, counted from the end connected to primary inputs. *: CPU time is in Pentium IV 1.4G second.
第三個主題提到的是使用 Direct 法以 Row-major 方式求暫態敏感度的做法，我們所提
出方法的重點列示如下：
(1) 推導出 Direct 使用的 row-major 敏感度計算公式。
(2) 基本做法是去使用基於鬆弛演算法計算敏感度。計算敏感度子線路時，根據子線路中節
點數目，設計參數數目，和外接節點數等決定要用 row-major 或是標準的 Direct 法計算。
(3) 可以利用 row-major 法所產生的信號流強度以加速時序模擬的速度[12]，這麼做時敏感
8. Y. C. Ju, and R. A. Saleh, “Incremental circuit simulation using waveform relaxation,”Proceeding of the
ACM/IEEE DAC, pp. 8-11, 1992.
9. D. A. Hocevar, P. Yang, T. N. Trick, and B. D. Epler, “Transient sensitivity computation for MOSFET circuits,” 
IEEE trans. on CAD, vol. CAD-4, pp. 609-620, Oct. 1985.
10. S. W. Director and R. A. Rohrer, “The generalized adjoint network and network sensitivities,” IEEE Trans. 
Circuit Theory, vol. CT-16, pp.318-323, Aug. 1969.
11. Chun-Jung Chen, Jung-Lang Yu, and Tai-Ning yang, “Selective-tracing waveform relaxation algorithm for
Incremental circuit simulation,”International Symposium on Intelligent Signal Processing and Communication
Systems, Hong Kong, pp. 205-208, December 13-16, 2005.
12. Chun-Jung Chen, Wen-Pin Tai, and Jenn-Dong Sun, “Strength of signal flow in circuit simulation and its
application,”Symposium on Design, Test, Integration, and Packaging of MEMS/MOEMS, Canne France, May
2002, NSC-90-2215-E-034-001.
13. Chun-Jung Chen, and W.S. Feng, “Transient sensitivity computations of MOSFET circuits using Iterated Timing 
Analysis and Selective-tracing Waveform Relaxation,” Proceeding of 31st Design Automation Conference, pp.
581-585, San Diego CA, June 1994.
計畫成果自評
此次國科會計畫的執行相當徹底，在第一和第二個主題方面都有完整的良好的結果，第
二個主題有關漸增模擬的部分更發表了國際研討會的論文，於 2005 年底於香港中文大學發
表；但是第三個主題的結果較不動人，這個主題研究使用 row-major 順序去計算子線路裡
面的暫態敏感度，希望減少計算的時間，因為子線路的大小已經受限，常常較好的做法就
是直接使用 Direct Approach 去求解，用 row-major 法較有利的情況只發生在較大子線路的
情形下，此類子線路較為稀少，所以相對下使得這個方法的功效打了折扣，不過這個方法
是可行的，可以繼續發展，我們已經計畫在新的國科會計畫中繼續研究之。總之，很欣慰
的，這次國科會執行順利，獲得了良好的結果。以下就各項目逐一說明。
研究內容與原計畫相符程度：可以說是完全相符。
達成預期目標情況：第一和第二個主題可說是完全達到預期目標，第三個主題也照預期
製作完成，惟效果不如預期顯眼。
研究成果之學術或應用價值：在線路模擬和敏感度計算的應用價值是很高的。在
EDA(Electrical Design Automation)的學術價值也是高的。
是否適合在學術期刊發表或申請專利：適合發表論文，已經有國際研討會論文發表(見
附錄)；因為是軟體，較不適合申請專利。
主要發現或其他有關價值：研究漸增模擬之後發現利用設計者的使用習慣可以大幅加速
線路模擬，既然如此，似乎可以就這個方向進一步發揮，比如需求模擬
(Simulation on Demand)的研究，只模擬設計者需要的部分電路，這將是
我們未來的研究方向。
附錄
Chun-Jung Chen, Jung-Lang Yu, and Tai-Ning yang, “Selective-tracing waveform relaxation algorithm
for Incremental circuit simulation,”International Symposium on Intelligent Signal Processing and
Communication Systems, Hong Kong, pp. 205-208, December 13-16, 2005, NSC-94-2215-E-034-001.
IEEE supported.
modified circuit. The traditional electrical-level
incremental simulations are those based on ITA and
based on WR [4]. We utilize the detailed-scheduling
characteristic of STWR to manage influence of design
changes more exactly, which also be reflected on the
saving of computation time.
The outline of this paper is as follows. Section 2
explains STWR and the reinforcing techniques, Section
3 describe the STWR-based incremental simulation, and
Section 4 demonstrates experimental results of proposed
methods. Finally, Section 5 gives a conclusion remark.
2. STWR ALGORITHM AND REINFORCING
TECHNIQUES
The simulated circuit can be described as following
time-varying differential equation:
0)),(),((
.
ttYtYF (1)
Where Y is the vector of circuit variables, t is the
time, F is a continuous function and “.” means 
differentiation with respect to time. The simulated
circuit must be partitioned into subcircuits, and the ith
subcircuit is:
0)),(),(),(),((
..
ttDtDtYtYF iiiii (2)
For convenience, the subcircuit, say a, is expressed
in the abbreviate form:
0)),(),(),(),((
..
ttwtwtytyf (3)
Where y (Yi, a sub-vector of Y) is the vector of circuit
variables in a, w (Di, the decoupling vector) is the
vector of circuit variables not in a, and f is a continuous
function. In this paper, a subcircuit calculation means
the computation efforts to solve (3) for y(tn+1), tn+1 is a
time point, which include applying integral formula to
(3), and solving the derived nonlinear algebraic
equations by Newton’s method. Algorithm 1 lists
pseudo codes of STWR.
Algorithm 1 (STWR Circuit Simulation Algorithm):
Input: Simulated circuit partitioned into subcircuits, primary
inputs, and simulation time duration [Tbegin, Tend].
Output: Time waveforms of all circuit nodes.
// tn: previous time point; tn+1: current solving time
// tc: converged newest time point; tex: exactness checking time
STWR() {
Reset al subcircuits’ tc to Tbegin;
// PQ is a minimum priority queue, and q is a normal
queue.
1: Clear PQ and q;
2: for(k = 1; Tconvergence != T ; k++) {
// k is the relaxation index, and following is a WR
relaxation
3: for(all subcircuit x whose tc != Tend ) {
4: x.tn+1 = x.tc;
5: Put x into PQ;
}
6: while(PQ is not empty) {
7: Delete the subcircuit a having minimum tn+1 from
PQ;
8: Put a into q;
8a: // synchronizing(a, q);
9: while(q is not empty) {
10: Delete one subcircuit a from q;
11: Solve a, (3), at a.tn+1 for answer a.y(tn+1);
12: if(The calculation is failed or a.y(tn+1)
is unacceptable) {
13: Shrink the time step of a, and add a into PQ;
14: continue;
}
// set convergence time
15: if(a.tn is converged) a.tc = tn+1;
16: else Increase a’s divergent counts;
17: Store a.y(tn+1), the transient responses, into
tables;
18: Estimate a’s next time point and store it into 
a.tn+1;
// exact(a) implements the exact-condition
19: if(exact(a)) add a into PQ;
20: for(all fan-out subcircuit of a, say w) {
21: if(w is not in PQ and exact(w)) add w into
PQ;
}
22: if(k > 1 && a has been not converged
for toldivergent time points) {
// toldivergent is a constant for window sizing
23: Tconvergence = the smallest tc of all subcircuits;
24: break;
}
}
}
}
}
// exact(x) == true if all x’s fan-insubcircuits’tn > x.tn+1
25:boolean exact(x) {
26: tex = min{ w.tn | w is fan-in subcircuits of x};
27: if(x.tn+1≤tex) return(true);
28: else return(false);
}
STWR uses selective-tracing scheme of ITA [2] to
schedule subcircuits for calculation (line 20, 21). The
traced subcircuit will not be calculated until it meets the
exactness condition (all fan-in subcircuits have been
calculated at time points newer than the solving time
point, coded in exact() at line 25-28). Subcircuits are
calculated at their own time steps, so multi-rate
behaviors can be utilized (local time steps are estimated
in line 18, and used at line 11). Besides the order of
subcircuit calculations, STWR is very similar to WR
since it performs relaxation technique on subcircuits’
nonlinear differential equations and also exploits the
windowing technique [1] (at line 22, STWR decides the
sizes of windows according to subcircuits’convergence
situations, i.e. that any subcircuit has been not
situations appear, disappear, and propagate, and other
actions by following rules.
Rule 1 (STWR-based Incremental Circuit Simulation):
1. Simulation Rule: The s-state of a subcircuit is either
“changing”or “following.”During simulation, only the
changing-subcircuits is re-simulated.
2. Subcircuits’Design Change Rule: The subcircuit whose
internal design has been modified always in changing
situation.
3. Inputs’Design Change Rule: Primary inputs are viewed
as “pseudo” subcircuits that have s-states, too, and
contents of whose s-states are dynamically determined by
whether the values of primary inputs differ from those of
previous simulation.
4. Vanishing Rule: Once a changing-subcircuit has been
calculated, the obtained waveform will be compared to
that of previous simulation to see whether the changing
situation vanishes.
5. Propagation Rule: A changing-subcircuit passes the
changing situation to its fan-out subcircuits.
The pseudo codes, more practical for implementation,
for these rules are:
Algorithm 3 (Incremental Simulation Programs):
/* For #1 rule. To replace line 11 of Algorithm 1 */
25:if(a.s_state == CHANGING)
26: Solve a at a.tn+1 for values of circuit variables;
27:else Copy the stored waveforms as a’s answer;
/* For #4 rule. To replace line 19 of Algorithm 1 */
28:if(exact(a)) {
29: Add a into PQ;
30: if(a.s_state == CHANGING &&
31: a’s solution is equal to the stored waveform)
32: a.s_state = FOLLOWING;
}
/* For #5 rule. To replace line 21 of Algorithm 1 */
33:if(w is not in PQ and exact(w)) {
34: Add w into PQ;
35: if(w.s_state == FOLLOWING &&
a.s_state == CHANGING) w.s_state =
CHANGING;
}
These codes have been implemented, and the
experimental results are shown in Section 4.
4. EXPERIMENTAL RESULTS
The proposed methods have been implemented in the
experimental circuit simulator MOSTIME [3, 5] that
contain several relaxation-based algorithms. To
emphasize simulation algorithms’effects, we use the
simple analytic model for MOSFET and partition
circuits manually. We use the circuit in Fig. 1, which
has four strongly coupled subcircuits, to demonstrate the
synchronizing-scheme. Since all subcircuits are in a
SCC, they all use the same time points. Running results
are collected in Table 1, which shows about 25% of
calculations have been saved. We then compare
STWR+ with other algorithms. Four circuits in Table 2
are tested, and their schematics are shown in Fig. 2.
Table 3 summarizes the simulation results. We can see
that STWR+ has used fewest subcircuit calculations and
simulation time in all cases, and it is more robust than
WR (see circuit #2), which justify that STWR+ is robust
as well as efficient.
We now compare the incremental simulations. The
new method (called Incremental-in-change since it
intends to simulate changing subcircuits only) is
compared to Incremental-in-space by simulating Fig.
2(d), Gated-chain(V2) (where “(V2)”means V2 is
modified). In our experiments, ratios of design changes
are made to be about 10% for all examples. Table 4
records the results. We note that both algorithms don’t
calculate S8 since S8 doesn’t change all the time, and
IIC has performed less subcircuit calculations for S5
since S5 only changes for a period only. The over-traced
ratio of IIC is obviously smaller than that of IIS. Now
we use IIC to simulate larger circuits. Table 5 is the
running results. The waveforms of first example, 8-bit
ALU, are shown in Fig. 3 (with Vcin modified for about
10% of the time interval). We can see that IIC has
generated correct waveforms. This example also shows
considerable speedup on simulation time.
(a)
(b)
Fig. 1: (a) The schematic of one-bit shift register; dashed
circles are subcircuits. (b) Two-bit shift register; it has four
subcircuits.
Table 1: Number of Subcircuit Calculations in Simulating Fig.
1.
Algorithm S1 S2 S3 S4 Total
STWR 5,555 8,721 5,536 2,058 21,870
STWR+ 3,832 4,083 4,261 3,333 15,509
Table 2: Specifications of Tested Circuits
Circuit Node# MOSFET# Subckt#
1: 8-bit ALU 400 800 224
2: 8-bit Shift Register 32 48 16
3: 4-bit Binary Counter 88 176 44
4: CPU 465 946 224
Table 3: Running Results of Algorithms
Subcircuit Calculation # CPU Time*Circuit
ITA WR STWR+ ITA WR STWR+
1 1,107K 222K 196K 17 11 7
2 70K N. A.+ 88K 2 N. A. 5
3 600K 261K 195K 9 16 9
4 3,401K 98.6K 94.1K 46 4.2 3.9
*: CPU time is in Pentium IV 1.4G second. +: Due to divergence.
出席國際學術會議心得報告
計畫編號 NSC 94-2215-E-034-001
計畫名稱 應用電路型態辨認於選擇走訪波形鬆弛演算法，漸增電路模擬，和對於多設計參數之暫態敏感度的同步計算
出國人員姓名
服務機關及職稱
陳俊榮副教授 中國文化大學資科系
會議時間地點 Hong Kong, December 13-16, 2005
會議名稱 International Symposium on Intelligent Signal Processing and Communication Systems
發表論文題目 Selective-tracing waveform relaxation algorithm for Incremental circuit simulation
一、參加會議經過
在 2005年末本人使用 94年國科會的經費出席此國際性會議，此會議的主題鎖定在智慧信
號處理和通信系統，包含有本人計劃的領域。會議選在中國的香港舉行，會址在香港中文大
學。我的部分是 poster 發表，由於是個中型的研討會，所以與會的學者頗多，因此也被許多
人問到了相關問題，也有了許多的討論，這使我我獲得了許多收穫；另外聆聽其他學者的報
告也讓我受益良多。
二、與會心得
本人發表論文所使用的方法是新奇的，但是還有許多發展的空間，主要是在實作層面的，
因為我的方法理論上可以獲得最佳結果(漸增模擬的比例和擾動的比例相當)，但是計算時間
上卻沒有類似的結果，這就是實作的問題了，所以這個研究有必要繼續下去。另外，要進行
漸增模擬有許多的另類方法，我在這趟旅程中也思考這個問題，綜合和學者討論的結果，將
一些想法都寫到了 95年的國科會計畫申請書中，而這個計畫現在正在進行中，這也是參加此
次研討會的收穫。
此次與會有許多收穫，看了到別人最新的研究成果，開拓了眼界，有了未來研究方向的概
念，我看了許多新研究的 EDA Tool論文，知道 EDA工具的進展狀況，也詢問他們設計 tool
所遇到的問題，以及未來可能的作法等，如此，可以多多掌握最新的狀況，總之，此次會議
之後我對於電路驗證的研究有了些一些新的想法，可以作為我未來研究主題題目。我對於大
