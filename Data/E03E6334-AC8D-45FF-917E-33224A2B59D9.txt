lows the user to parse documents at different ab-
straction levels and switch between these levels
on the fly in a typesafe manner. The implemen-
tation makes essential use of Objective Caml’s
module facility and achieves a very satisfactory
performance.
In [5], we overview the recent Web develop-
ments on social tagging through user partici-
pation and collaboration. Social tagging has
changed the traditional online communication
process. The interpretation of tagging between
humans and machines may create new problems
if essential questions about how social tagging
corresponds to online communications, what
objects the tags refer to, who the interpreters
are, and why they are engaged are not explored
systematically. Since all reasoning is an inter-
pretation of social tagging among humans, tags,
and machines, it is a complex issue that calls
for deep reflection. In the paper, we investigate
the relevance of the potential problems raised
by social tagging through the framework of C.
S. Peirce’s semiotics. We find that general phe-
nomena of social tagging can be well classified
by Peirce’s ten classes of signs for reasoning.
This suggests that regarding social tagging as
a sign and systematically analyzing the inter-
pretation are positively associated with the ten
classes of signs. Peircean semiotics can be used
to examine the dynamics and determinants of
tagging; hence, the various uses of this catego-
rization schema may have implications for the
design and development of information systems
and Web applications.
In [6], we first overview disaster response sys-
tems that are designed to make prompt de-
cisions based on results from processing large
amount of heterogeneous geographical infor-
mation. Most geographic information sys-
tems (GISs) use relational databases to achieve
high performance in manipulating information.
They however suffer from interoperability is-
sues because they need to make significant ef-
fort to map heterogeneous geographical infor-
mation, which may have complicated structure,
into relational data models, and vice versa. Ge-
ography Markup Language (GML) has been ac-
cepted as a standard for expressing, storing,
and exchanging geospatial data, and has been
applied to help solve interoperability problem.
However, there has been no GIS built on native
XML/GML technologies so far. There are two
possible reasons: current XML processors are
incapable of processing geospatial information,
and they are inefficient in manipulating large
XML documents. In the paper, we overcome
these two difficulties and move forward to real-
izing GML-based (Web) GISs.
Keyword: Collaborative Software, Commu-
nity Mapping, Online Community, Online Map-
ping, Open Access, Geospatial Data; DOM,
GIS, GML, SAX, SVG, Web, Web-based GIS,
XML Prefiltering, XPath, XQuery; Categoriza-
tion, C.S. Peirce, Interpretation, Online Com-
munication, Semiotics, Social tagging.
1 Introduction to Paper 1:
The Web and Collaborative
Geospatial Mapping: A Po-
sition Paper
1.1 The Web and Collaborative Do-
main Mapping
Online, open, and collaborative exploration of
domain spaces is one of the most successful
web paradigms. Examples include collabora-
tive compilation of fact and knowledge, collab-
orative mapping of web resources, and collabo-
rative open source software development. On-
line collaborations nevertheless predate the Web
era. Probably the best example is the “Jar-
gon File,” a public domain comprehensive com-
pendium of hacker slang that has been freely
used, shared, and modified since the very be-
ginning of the Internet. Another example is the
Internet Movie Database (IMDb), which started
out in the Usenet newsgroup rec.arts.movies
as FAQs on bibliographic and biographical in-
formation about movies and their makers. The
IMDb endeavor was later incorporated and pur-
chased by Amazon.
There are several reasons for the Web to suc-
cess as a medium for open collaboration. The
2
2 Introduction to Paper 2: Ef-
ficient GML-native proces-
sors for Web-based GIS:
Techniques and tools
2.1 Motivation
The nature of geospatial phenomena is complex,
diverse, and multi-scaled. In geographic infor-
mation science, geospatial data models, which
are used to abstract physical geospatial objects,
are becoming increasingly sophisticated. Of-
ten geographic data models are mapped to re-
lational database models for data storage, op-
eration, analysis, and visualization. Many well-
known GIS products/databases, such as ESRI’s
ArcGIS/ArcGIS, Autodesk’s MapGuide, Ora-
cle’s GIS database, and open source software
PostgreSQL/PostGIS, use relational data mod-
els. With their robust index and query ca-
pabilities, relational-based GIS are able to ac-
cess geospatial data efficiently. However, prob-
lems arise when geospatial data cannot be ex-
pressed naturally and efficiently by using the
relational data model. In addition, the data
formats used in the above products/databases
are usually proprietary and/or specific to the
products/databases. Thus, it is more difficult to
share, exchange, and manipulate geospatial in-
formation across different products/databases.
Geography Markup Language (GML), which
provides a rich vocabulary and flexible docu-
ment structure, is considered an effective ap-
proach for expressing increasingly complicated
geospatial data, as well as non-geospatial data.
GML has been used as a standard markup lan-
guage for the transportation, storage, and mod-
eling of geospatial data. Intuitively, existing
XML processors, such as XPath, XQuery, and
SAX (Simple API for XML), may help pro-
cess GML documents. However, the large size
of documents, the flexible document structures,
and the rich vocabulary, increase the difficulty
of manipulating GML documents. Moreover,
the geographic information contained in GML
documents is not well understood by the usual
library functions, e.g., string and numeric func-
tions, provided by the existing XML processors.
Therefore, there is an urgent need to adapt ex-
isting XML techniques, to support the process-
ing of large XML/GML documents and geospa-
tial functionalities.
The XQuery language is sufficiently flexible
to query a broad spectrum of XML informa-
tion sources, including databases and docu-
ments. XQuery processors can also be easily
extended by calling external function libraries
without modifying or recompiling their source
codes. The XQuery language has been extended
to support geospatial functionalities, and pro-
totype GML query processors have been imple-
mented by others. Although extended XQuery
processors can process geospatial information,
they may not be able to query large GML
documents efficiently. Similarly, existing tech-
niques for XML document processing, either
streaming-based (e.g., SAX) or memory-based
(e.g., DOM, the Document Object Model), may
not be suitable for processing GML documents
efficiently. The DOM model consumes a large
amount of main memory, typically about five
times the size of the XML documents; while
SAX parses over a document in a linear man-
ner to locate interesting fragments. Thus,
both models waste a large amount of compu-
tational resources by processing uninteresting
fragments. To accomplish GML-based Web
GIS, there is a need to adapt existing XML tech-
niques to support the processing of large XML
documents, as well as to express GML-native
geospatial operations.
2.2 Our Results
In this paper, we propose and implement an ef-
ficient GML query processor, GPXQuery, and a
GML-aware streaming parser, GPSAX, by ex-
tending an XQuery processor and a SAX parser,
respectively, to support GML-native geospa-
tial functionalities. An XML prefiltering tech-
nique is also applied to the processors to speed
up GML-native geospatial operations over large
GML documents. The GPXQuery and GP-
SAX processors are then employed to imple-
ment a GML-based Web GIS with a geospatial
4
<page>
<title>Algeria</title>
...
<text xml:space="preserve">Algeria
Introduction
Background: After a century of rule...
</text>
...
</page>
Figure 1: A short excerpt of an XML dump of
Wikipedia
erences and no CDATA sections were to be ex-
pected.
In a desperate bid to regain acceptable pro-
cessing speed, our colleague resorted to brute-
force pattern matching, doing away with the
XML parser and working with raw character
data instead. While in this case practicable,
such a solution is of course not satisfactory. We
thus came up with the design of a layered XML
streaming processing library to solve this issue.
In our design, an XML document can be
viewed at four different abstraction levels:
1. as a stream of characters,
2. as a stream of (raw) tokens, e.g., start and
end tags, and character data,
3. as a normalized stream of tokens, where
proper nesting of start and end tags is en-
sured, and
4. as a stream of “typed” tokens, which have
been checked against a DTD to make
sure that tags only refer to declared ele-
ments and are provided with appropriate
attributes
These four levels are built on each other with
each stream of a higher level being layered on
top of a stream of the next lower level. The pro-
grammer can now choose the level she desires to
work at, and if the need should arise, she can
not only switch to a higher level (by building a
more abstract stream on top of a more primi-
tive one), but also switch back to a lower level
(by recovering the primitive stream underlying
a more abstract one).
In this way, the task described above can very
efficiently be solved by first reading from a high-
level stream looking for a title start tag; if the
title is not the desired one, the lowest-level char-
acter stream can be recovered to quickly skip
forward until the closing tag of the current page
is found. Then one can again go back to the
higher level to look for the next title.
This framework should be implemented in a
general way so as to make it possible for the
user to supply their own stream implementa-
tions. Thus, the framework has to provide an
abstract account of streams and their transfor-
mations, as well as mechanisms for applying
transformations to low-level streams and for re-
covering underlying streams. Above all, this
should be possible in a typesafe manner such
that the process of layering and un-layering can
be statically checked at compile time and does
not rely on run-time type information or related
mechanisms.
In the rest of this report, we describe how
to implement such a framework using Objective
Caml’s module system and present some bench-
marks showing the feasibility of our approach1.
4 Introduction to Paper 5: So-
cial Tagging, Online Com-
munication, and Peircean
Semiotics: A Conceptual
Framework
4.1 Introduction
Online communications are changing because of
the nature of the collaborative and participa-
tory Web. Several “Web 2.0” phenomena are
indicative of this trend, as the lines between
system designers and online users, as well as
between information creators and receivers, be-
come blurred. People can collaborate through
1A prototype implementation is avail-
able on the second author’s homepage at
http://www.iis.sinica.edu.tw/∼xiemaisi/.
6
difficulty lies in the interpretation along techni-
cal and social dimensions. User-generated tags
can be used freely to link different Web re-
sources. Tags, as a form of descriptive and vis-
ible metadata, need a conceptual framework so
that they can be constructed, presented, and
processed systematically. Since human factors
are deeply involved in tagging, interpreting the
tagging process is a complex issue. Thus, an
integrated approach that combines human and
machine interpretations of social tagging is re-
quired.
In the paper, we present an analytical ap-
proach that combines semiotics and social tag-
ging. First, we define a sign in terms of its tri-
adic relations. Next, we apply the principle of
Peirce’s three universal categories, and Morris’s
three dimensions of signs (namely, the syntac-
tical, semantic and pragmatic dimensions) , to
social tagging. Then, we use Peirce’s ten classes
of signs to describe the ten classes of social tag-
ging.
4.3 Discussions and Implications
In this paper we presented the interrelationships
between social tagging, online communication,
and the concepts of Peircean semiotics. By now,
social tagging, as a term and as a concept, is
best understood as a triadic sign with social tag-
ging as Representation, online communication
as Object, and Peircean semiotics as Interpre-
tatio. The representations of social tagging are
in three basic forms (Mark, Token and Type),
which refer to online communication on three
different levels (Icon, Index, and Symbol). The
social tagging phenomenon as a sign is inter-
preted here through Peircean semiotics, and as
a result there are ten classes of categorizations.
As social tagging is still relatively new, in this
study we have mainly focused on the conceptual
framework. It is not our goal to develop specific
design guidelines in incorporating social tagging
into online communication systems. Additional
investigation and experimentation are needed in
order to develop a full set of detailed implemen-
tation guidelines and rules for system design-
ers on using social tagging techniques. This re-
mains an area of intensive research and appli-
cation development. Nevertheless, our concep-
tual framework gives out a direction in which
individual application scenarios can be inter-
preted or derived. In the following we discuss
several specific application scenarios where our
conceptual framework is applicable to system
design. We begin by first review and discuss
several tagging techniques in view of the frame-
work of Peirces ten classes of sign. We then
describe the frameworks implications for user-
community designs.
Here are some implications we can derive
from categorizing tagging techniques by the
framework of ten classes of signs. From the
point of view of system designers, techniques of
tag clustering, as previously discussed in Sign
(3), are used to implement Indexical Tokens,
hence are methods to direct community users
interests. Tag RSS, being also for Indexical To-
ken, however is used to direct personal prefer-
ence hence better serves as a method in Sign
(4). Here is another implication. The designs of
triple tagging, geo tagging, or tag recommenda-
tions are in Sign (10), and, by the same reason-
ing, are methods to facilitate user participation
and collaboration. As they are rules made by
designers, so are highly applicable to computer-
mediated communications. In particular, since
the Replica of a suggested tag (Sign (10)), is a
personomy (Sign (4)), a tag suggesting mech-
anism could be better designed if it is based
on individual writers tag vocabulary across
various systems. We view these concepts from
semiotic engineering and their differentiations
as particularly useful in human computer inter-
action design.
Applications of this new concept for system
designers rely mainly on the specific purpose of
the social tagging systems which the designer
wants to design. Take the tag list as an exam-
ple. This design, if considered in a context of
general social tagging phenomena, the designer
may need to pay special attentions to the direct
relation between Sign (3), Sign (6) and Sign (8).
The reason is that the three signs have replica
relations, and this relation may assist the de-
signer in considering the technology use and in
8
expected that, by using XML/GML technolo-
gies rather than DB technologies as the core of
GISs, the GISs are more adaptable to support
such standards.
In fact, XML/GML technologies have been
applied to develop GML-native processors, for
example GQuery. GQuery further has been ap-
plied to a geographic mediation system. Un-
fortunately, generic XML processors, including
GQuery, suffer from being unable to process
large documents efficiently. This is an inher-
ent weakness of generic XML processors. In-
terestingly, the GML specification does not ad-
dresses the performance issue. This might im-
ply that GML is not designed for being used
in performance-sensitive or online applications.
Our goal in this paper is to fill this gap.
We briefly review two XML processing mod-
els: Document Object Model (DOM) and the
streaming model, such as Simple API for XML
(SAX). Most standard XML processors, such as
XPath and XQuery, use DOM (a tree structure)
to represent XML documents in memory. DOM
typically needs internal memory space of five
times the size of the external documents. Also,
it is a time consuming task to build a DOM tree
for a large document. In contrast, the stream-
ing model views an XML document as a data
stream. A streaming parser scans over a doc-
ument and triggers corresponding events while
XML elements are visited. The main advan-
tage of using a streaming processing model is
that it consumes a constant and small amount
of memory space. Unlike DOM, a streaming
model however cannot access documents ran-
domly and cannot be used for evaluating user
queries directly. To sum up, standard XML pro-
cessing models are insufficient for manipulating
large documents, which are common in GISs.
Therefore, again, to realize GML-based (Web)
GISs, this performance issue must be addressed.
In this paper, we elaborate to realize GML-
based Web GISs, in which geographical infor-
mation is stored and manipulated in GML. We
briefly summarize this work and our previous
effort toward this goal as follows. We have in-
troduced an XML prefilter, and have applied
it to an XQuery processor to support geospa-
tial information processing. In this work, the
XML prefilter has been extended in the follow-
ing areas. We model the efficiency of the XML
prefilter. The model guides us to optimize the
prefilter. Another achievement is that we de-
velop an efficient index engine for the prefilter
to better manage indexes.
In short, we summarize our contributions to
the GIS community as follows.
• Our work shows that it is possible to use
XML/GML as the core technologies in de-
veloping GML-based Web GISs. To the
best of our knowledge, this is the first
work that addresses and realizes GML-
based Web GISs.
• We develop two GML-native processors by
adapting, respectively, a streaming-based
XML parser and an XQuery processor to
support the processing of geospatial infor-
mation.
• We present an XML/GML prefilter, a
tiny indexing and search engine, that is
used to increase the performance of generic
XML/GML processors. We then apply it
to improve the performance of the GML-
native processors.
• We have successfully replaced the database
component of a DB-driven Web GIS proto-
type with the enhanced GML processors.
• We conduct an intensive experiment study
on the performance of the prefilter and the
GML-native processors. Experiment re-
sults show that the prefilter improves the
performance of GML-native processors up
to hundreds-fold. We also observe that the
performance of the GML-based Web GIS
is in the same order of magnitude as the
DB-driven Web GIS.
• We provide the source code of software
packages mentioned in the paper for pub-
lic access. Users just need the GML-native
processors and prepare GML documents to
test and realize a simple GIS. Also, they
can use the APIs of the prefilter to enhance
their XML-based processors.
10
There are a few categorization systems we
may borrow to represent geographic features
in document-centric GML. One of the most fa-
mous one is ADL Feature Type Thesaurus used
in Alexandria Digital Library (ADL) Gazetteer.
The thesaurus provides a set of terms for cat-
egorizing geographic places, and can be viewed
as templates for organizing and searching the
geographic places. Another example is the on-
tologies used in the semantic web for earch and
environmental terminology (SWEET) project,
which provides a semantic framework for vari-
ous Earth science initiatives. More geographic
ontologies and their comparison are detailed by.
To sum up, the rapidly development of
XML/GML technologies has opened up oppor-
tunities for GIS communities to design new
(or complementary) GISs, which enable geo-
scientists to easily manage geographical infor-
mation in a form that supports their domain
knowledge.
References
[1] Chin-Lung Changa, Yi-Hong Chang, Tyng-
Ruey Chuang, Dong-Po Deng, Andrea Wei-
Ching Huang, and Chia-Hsin Huang. The
Web and collaborative geospatial mapping:
A position paper. Technical Report TR-
IIS-06-011, Institute of Information Science,
Academia Sinica, September 2006.
[2] Chia-Hsin Huang, Tyng-Ruey Chuang,
Dong-Po Deng, and Hahn-Ming Lee. Effi-
cient GML-native processors for Web-based
GIS: Techniques and tools. In 14th ACM
International Symposium on Geographic In-
formation Systems, pages 91–98. Arlington,
Virginia, USA, November 2006.
[3] Tyng-Ruey Chuang, Dong-Po Deng, and
Andrea Wei-Ching Huang. Collaborative
geospatial mapping. Science Development,
August 2007. Note: In Chinese and by invi-
tation.
[4] Tyng-Ruey Chuang and Max Scha¨fer. Sta-
tus report: Layered streaming xml pro-
cessing with modules. In The 2007 ACM
SIGPLAN Workshop on ML, pages 53–58.
Freiburg, Germany, October 2007.
[5] Andrea Wei-Ching Huang and Tyng-Ruey
Chuang. Social tagging, online communica-
tion, and peircean semiotics: A conceptual
framework. Journal of Information Science,
2009 (in press).
[6] Chia-Hsin Huang, Tyng-Ruey Chuang,
Dong-Po Deng, and Hahn-Ming Lee. Build-
ing gml-native web-based geographic infor-
mation systems. Computers & Geosciences,
2009 (in press).
12
