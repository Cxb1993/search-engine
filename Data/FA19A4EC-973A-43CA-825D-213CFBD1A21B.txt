摘要 
本研究考慮無等待時間的雙機流程型工廠下，所有的工作在機台上有其加工時
間與設置時間，然而在無等待時間的限制下，每個工作在第一台機台上完工後，
必須馬上至第二台機台上繼續加工，中間不能有停頓時間；每個工作在各機台加
工之前，需要有一個設置的時間，此設置動作須由單一設置人員執行之，即在兩
台機台上的設置動作不能同時進行，本研究目標為使總完工時間 (Total 
Completion Time)最小化。過去的文獻中提到類似的問題已證明為 NP-hard，而本
研究將提出一些特殊情況下之最佳解演算法，且針對一般情況下提出一些特性，
並以這些特性發展啟發式演算法與分支界限演算法；經實驗後證明本研究所提出
的啟發式演算法與最佳解平均誤差不會超 0.5%，並且在特殊情況下與
Aldowaisan 和 Allahverdi (1998)所提出的演算法相比能得到較好的結果。 
 
關鍵字：無等待時間、雙機流程型工廠、總完工時間、單一設置人員 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
一、緒論 
1.1 研究背景與目的 
 台灣一直以來在全球高科技的生產製造，佔有非常重要的地位，然而隨著中
國大陸、印度和東歐等開發中國家的崛起和全球化市場的影響，導致生產中心有
逐漸向世界各地外移的趨勢，因此為了提昇生產製造的競爭力，有效降低生產時
的人力成本與減低生產後的存貨成本已經是刻不容緩的課題。但隨著科技的日新
月異，產品的演變速度越來越快，加上生產製造業也趨向多樣少量的生產型態，
使得生產條件的限制越來越嚴苛，因此更快速且精準的達到所求目標，才是提升
競爭力的主要因素；雖然目前的電腦科技運算速度發展快速，但實務上許多的排
程問題大多屬於 NP-Hard 的問題，當所要求的工作數目一多時，仍需耗費很長
的演算時間才能求得最佳解，實在不符合實際需求；所以要在有限的時間下，考
慮各種生產限制，並且將各個不同的工作安排其加工順序，以獲得最理想的生產
排程是非常困難的。 
 在生產現場中，流程型工廠的生產型態極為常見，在流程型工廠裡，所有工
作皆有固定相同的加工順序，然而在特定的加工情況下，工作在每個製程中間不
能有等待時間(No-Wait)，如鋼鐵業或食品加工業，此種類型的加工主要是因為生
產技術之限制，或物料之特性(如：溫度、黏度、化學連續反應等)，若其在生產
過程中若有停頓時間，則易導致半成品發生變質，造成瑕疵品的產生，勢必也會
增加生產成本。 
 
1.2 研究範圍與內容 
本研究探討在雙機流程型工廠下，考慮每一個工作在加工之前必須先在機台上作
設置的動作，而兩台機台上的設置動作只有一位操作人員來處理，即兩台機台上
的設置動作不會同時發生，而每個工作皆有無等待時間(No-Wait)的特性，所以工
作在機台 1 上加工完後必須直接到機台 2 上繼續加工，中間不能有等待時間，並
且為了使存貨成本最小化，因而將本問題的決策目標定為總完工時間(Total 
Complete Time)最小化。 
 
 
 
二、文獻探討 
本研究探討雙機流程型工廠其設置時間與加工時間分開且設置動作由ㄧ設
置人員為之，因此會針對兩部分的文獻來做探討，一為雙階段流程型工廠的相關
文獻，另一部分為在單一設置人員的文獻探討。 
 
2.1 雙階段流程型工廠與設置時間之相關文獻 
人員的平行機台問題，以最小完工時間為目標提出了兩個特殊情況和一個複雜度
的啟發式演算法，2005 年 Guirchoun[12]等人則以最小總完工時間(Total 
Completion Time)為目標，把平行機台和設置機器的關係考慮成一個混合型的雙
機流程型機台( Two-Stage Hybrid Flowshop)，並提出ㄧ個 的啟發式演算
法，且該啟發式演算法針對在設置時間均為單位時間 1 時會有最佳解。 
( log )O n n
( log )O n n
1999 年 Cheng[16]考慮在單一操作者在雙機流程工廠的完工時間最小化
(makespan)問題，其操作者必須操作加工機臺上設置工件和卸除工件的動作，並
把問題分作設置動作和卸除動作可以分開和不可以分開，兩種類型來探討，並提
出一些演算法和 worst case 的討論。2000 年 Glass[3]則對連續性的雙機流程型工
廠在單一設置機台下之完工時間最小化，提出了複雜度 的最佳解求
法，2005 年 Brucker[10]等人則針對流程型工廠在單一設置機器下的相關排程問
題做了整理，針對特殊情況提出一些複雜度分析，且提出無等待時間之雙機流程
型機台在單一設置人員下以總完工時最小化目標(
( log )O n n
2 : 1 no-wait iF S C∑ )為
NP-Hard 問題。 
 
 
 
三、模式建構 
本研究討論無等待時間雙機流程型工廠在單一設置人員下之總完工時間最
小化排程問題，因此除了要考慮工作的無等待性，還要考慮兩機台的設置時間不
能重複，故本章先對本問題提出假設，再針對問題來建構數學模型，並探討在某
些特殊情況下的最佳解與演算法，接著研究該題目的特性，進而發展啟發式演算
法和分支界限法。 
 
3.1 本研究之基本假設 
一、本生產排程研究假設為靜態排程(static scheduling)，所有工作皆在時間 0 時
到達，因此所有工作在第一台的設置時間，皆可從 0 開始。 
二、只有一個設置人員負責位兩台加工機台的作設置動作，所以兩台機台上的設
置加工時間不能通時一起運作。 
三、不允許機台佔先（Preemption）的情形，任何工作一但開始就必須持續到加
工完成，中間不能安插其他工作。 
四、工作從第一台機台上開始加工到第二台機台上加工結束之間不會有停頓或
等待的時間。 
五、設置時間是與工作獨立的(sequence independent job setup times)，所以設置時
間不會受到前一個工作的影響而改變。 
機台不會有故障的情形產生，所以所有加工動作或設置動作不會中途停止。 
間和加工時間有關，所以 的公式可以寫成如下： [ ]iC
[ ] [ ] [ ] [ ] [ ] [ ]1     1, ,  and 0i i i i iC C I t b i n C−= + + + = =… 0
1ib −
.………….…………...…...……. (1) 
而在第二台機台上的停頓時間公式以下面表示之： 
[ ] [ ] [ ] 01max( max( ,0),0)     1, ,  and =0 i ii i iI s b a t i n b−= − + − = … .…………...…(2) 
把公式(2)套入公式(1)推導後，可以得到與工作的設置時間和加工時間相關
的每個工作的完工時間公式，其公式如下： 
[ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ]
1
1 1
2 1 2 1 1 1
1
    max( max( ,0),0)
    max( max( ,0),0)
               max( max( ,0),0)            
i i i i i
i i i i i i i
i i i i i i
i i i i i i
C C I t b
C s b a t t b
C s b a t t
s b a t t b
−
− −
− − − − − −
−
= + + +
= + − + − + +
= + − + − + +
+ − + − + +
 
[ ] [ ] [ ] [ ] [ ] [ ]1
1
    max( max( ,0),0)
i
j j j j j
j
s b a t t b−
=
= − + − +∑ j+
j
i
it
.…………...…….….…(3
) 
 
由上面的公式可以得到每個工作的完工時間，接下來把每一個工作的完工時
間加總起來，其公式如下： 
  
[ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ]
1
1 1 1
1
1
max( max( ,0),0) 
         ( 1) max( max( ,0),0) 
n n i
i j j j j j
i i j
n
i i i i i i
i
C s b a t t b
n i s b a t t b
−
= = =
−
=
⎡ ⎤= − + − + +⎣ ⎦
⎡ ⎤= − + − + − + +⎣ ⎦
∑ ∑∑
∑
[ ] [ ] [ ] [ ] [ ] [ ]1
1 1
         ( 1) max( max( ,0), ) 
n n
i i i i i
i i
n i s a t b t b−
= =
⎡ ⎤= − + + − + +⎣ ⎦∑ ∑ .…………(4
) 
 由公式(4)可以看出 [ ] [ ] [ ] [ ] [ ]1max( max( ,0), ) i i i is a t b −+ − +
it+
i
為第 個工作的 開
始到 結束的時間，而每個工作的完成時間為本身的 値加上本身和排在其前
面所有工作的 値的和，因此若有一個已排 k  
(1 )個工作的排序 ，則可以用以下的公式來表示已排工作的總完工時間
和影響之後工作完成時間的時間和： 
i [ ]is
[ ]ia ib
[ ] [ ] [ ] [ ] [ ]1max( max( ,0), ) i i i is a t b −+ −
k n≤ ≤ lS
[ ] [ ] [ ] [ ] [ ] [ ], 1
1 1
( 1) max( max( ,0), ) 
k n
l k i i i i i
i i
n i s a t b t bλ −
= =
⎡ ⎤= − + + − + +⎣ ⎦∑ ∑ .…………(5) 
例外特性︰若所有的工作在機台1上的加工時間均大於或等於在機台2上得
特性 3：有工作 i和工作 j 要排入一個已排 1k − 個工作的排序之後，若
且符合以下兩種情況的其中之ㄧ項，則工作
i jb b=
j 必定會比工作 優於排在第 個位
置。 
i k
Case1. [ ]1max( ,0) max( ,0)i i i j j j ks a t s a t b −+ − > + − > ，               
 。 max( ,0) max( ,0)i i i i j j js a t t s a t+ − + > + − jt+
Case2. [ ]1max( ,0) max( ,0)i i i j j j ks a t s a t b −+ − < + − < ， 。 it t> j
 
 
 
四、研究方法 
4.1 啟發式演算法 
 本演算法主要是以能最早完成作業的工作優先排入，並搭配上述特性
來改善本演算法的求解品質，則啟發式演算法步驟如下︰  
STEP1： 找一工作 i，其 [ ]
1
max( ,0) min max( ,0)i i i i r r rr ns a t t s a t≤ ≤+ − + = + − + rt ，且再
找一工作 j 其 [ ]
1
max( ,0) min max( ,0)j j j r r rr ns a t s a t≤ ≤+ − = + − ；並令 A = ∞且
。 0k =
STEP2： 依特性 1 來找尋適合排在第一個位置的工作，若 max( ,0)i j j jb s a t≤ + −
則令 k 和 ，並令 為以 為第一個工作的排序，接著進行
STEP5；若 則進行 STEP3。 
n= 1w = kS iJ
max( ,0)i j j jb s a t> + −
STEP3： 令n個排序 為分別以 為第一個工作時的排序，若
這n個排序的第一個工作其 且 則捨棄該排
序，若 或 則保留該排序；接著進行 STEP4。 
1 2, ,..., nS S S 1 2, ,..., nJ J J
[ ]1 ib b> [ ]1 max( ,0)i i ib s a t> + −
[ ]1 ib b≤ [ ]1 max( ,0)i ib s a t≤ + − i
p
STEP4： 令 若無 這個排序則進行 STEP10，若有 這個排序則令
並進行 STEP5。 
1k k= + kS kS 1w =
STEP5： 令b 為 內最後一個工作在機台二上的加工時間，找一工作 不在
內且 ( 1
kS p kS
) max( max( ,0), ) ( )p p p pn w s a t b t n w b⎡ ⎤− + × + − + + − ×⎣ ⎦ 值為未排
STEP2： 從集合B 選出最小的 值，並且從集合T 選出最小ib max( ,0)j js a t j+ −
值，並進行 STEP3。 
STEP3： 如果 ，則令max( ,0)i j j jb s a t≤ + − max( ,0)j j j js a t jtμ = + − +
j
j
；若  
，則令集合V 為U 的子集合，在集合V 裡的
均小於 ，則
ib >
max( ,0)j js a t+ −
max( ,0)j js a t+ − ib minj i jj Vb tμ ∈= + 。 
STEP4： 將 從集合ib B 裡刪除，且 max( ,0)j js a t j+ − 從集合T 裡刪除；若集合T 為
空集合則到 STEP5，反之則進行 STEP2。 
將 jμ 由小排到大，使得 [1] [2] [ ]... n kμ μ μ −≤ ≤ ≤ ，則排序 的下限值算法為1S
[ ]1,
1
( 1
n k
k l
l
LB n l k )λ μ−
=
= + − − +∑ 。 
4.3 分支界限演算法之建立 
 本研究將採用分支界限法來尋求最佳解，以評估啟發式解的優劣；本
研究所的分支界限法是採用深度搜尋，因此會以排工作數最多且下限值越小的點
來作為下一個分支的依據，並且在產生新節點時，也會依照上述的特性來作刪點
的依據，以減少非最佳解的節點產生；而分支界限法之開始前，會先以啟發式演
算法所求出來的解作為分支界限法的上限值，以作為一開始新點產生時，其下限
值比較的依據。其分支界限法求解步驟如下︰ 
STEP1： 以啟發式演算法求得一初始排法 ，並以其解為上限值UB； 為已
排工作數與排法 為初始節點插入分支中，接著進行 STEP2。 
0S 0k =
0S
STEP2： 利用深度搜尋來找要分支的節點，並把該節點從分支中移除，且令 為
該點之排法， 為該點之已排工件數；若
1S
k 2k n< − 則進行 STEP3；若
則進行 STEP4。 2k n= −
STEP3： 將未排的工作，分別排在 的第1S 1k + 位置，來產生新的節點，且新節
點的已排工作數為 ，並將各個新節點以特性 1、特性 2 和特性 3 來
判斷排在第 位置上得工作適不適合；若有不適合的工作排在第
位置上，則把該節點捨棄；若工作無不適合排在第 位置，則
計算新節點的
1k +
1k +
1k + 1k +
LB ，並比 LB 和UB的大小關係，若 則捨棄新節
點，若 則把新節點以已排工作數為
LB UB>
LB UB≤ 1k + 插入分支中；分支完畢
後，接著進行 STEP5。 
STEP4： 將未排工作依工件順序排入 內，並計算排法 的總完工時間 ，若
則捨棄 排法，若
1S 1S 1TC
1TC UB≥ 1S 1TC UB< 則令 1UB TC= 且 ；再將排法* 1S S=
次內其V 的最大值、最小值和平均值，與紀錄 HA 與 HB 的執行時間和 HA 大於
等於 HB 的次數。 
本實驗可以分析在例外特性下下 HB 在同一個α 值與均勻分配下，隨著工作
數越多時V 值也越大，代表越多工作數則 HB 解的品質比 HA 解的品質越好，而
在同一個均勻分配下，α 值越小的情況下所求得的V 值也就越大，而且隨著工作
數越多，V 值的差距也就越明顯；而在不同分配的比較下，在工作數大的時候可
以觀察出，在同一個α 值的情況下，均勻分配為[ ]1,10 比均勻分配為[ ]1,100 所求
來的V 值還大，代表食參數在均勻分配[ ]1,10 下 HB 的解比 HA 更加接近最佳解；
但是 HB 的演算時間在 100 個工作後，其演算時間越來越大，尤其是在均勻分配
為[ ]1,100 時，演算時間增加的比率越大，主要是因為本研究使用特性 1 與特性 2
來增加啟發式演算法搜尋解的品質，但卻需而外花費更多的演算法時間來判斷解
是否符合特性 1 與特性 2，因此在多工作的條件下，本研究的啟發式演算法執行
時間會大於 HA 演算時間。 
5.2 比較演算法與最佳解差距 
 本研究將比較在一般情況下啟發式演算法和最佳解的差距，因此會以分支界
限法來求得最佳解，而啟發式演算法和最佳解的求解差距評估方法為以下公式： 
( )% 100%−⎡ ⎤= ×⎢ ⎥⎣ ⎦
啟發式演算法解 分支界限法解求解差距 分支界限法解  
 而在實驗中加工時間也是分為[ ]1,10 與[ ]1,100 兩種均勻分配來探討，設置時
間與加工時間的比率α 值則設定為 5、2、1、0.75、0.5 和 0.25 這 6 個值，而在
工作數n方面則以 10、15、20、25、30、45、50、60、65 和 70 這 10 個值來做
實驗，因為隨著α 值與工作數n的改變，分支界限法可能花費的時間越來越多，
因此在實驗的過程中若分支界限法執行時間超過 7200 秒，則停止求解過程，而
每一組實驗參數組合必須求得 50 個可以在 7200 秒內完成的最佳解，若一組實驗
參數組合中出現 25 個超過 7200 秒的問題，則代表分支界限法無法在 7200 秒內
求得該組參數所產生的大部份問題，因此捨棄該組實驗所求得的平均求解差距。 
 本實驗結果可以得知α 值為 0.25得時候分支界限法在 7200秒內只能求到 25
個工作，而α 值為 0.5 和 0.75 時能求到 30 個工作，α 值為 1 時則能求到 35 個工
作，而α 值為 2 和 5 時，則分支界限法能處理較多的工作數，且在α 值為 2 和 5
時加工時間為均勻分配[ ]1,100 比[ ]1,10 能多處理 5 個工作，代表當設置時間越小
的情況下則分支界限法所需花的時間就越多，尤其在α ≤ 1的情況下，當工作數
為 20 與 25 時平均求解時間急遽上升，因此當工作數到達 30 個以上時大部分的
問題就無法在 7200 秒內解出來。 
