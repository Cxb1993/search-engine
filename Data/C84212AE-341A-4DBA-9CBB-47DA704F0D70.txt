Time-Progress Evaluation for Dense-Time 
Automata with Concave Path Conditions 
Abstract 
The evaluation of successor or predecessor state spaces 
through time progress is a central component in the 
model-checking algorithm of dense-time automata. The 
definition of the time progress operator takes into 
consideration of the path condition of time progress and 
usually results in high complexity in the evaluation. 
Previous algorithms in this aspect usually assume that the 
original location invariance conditions of an automaton are 
convex in the dense-time state space. Based on this 
assumption, eﬃcient algorithms for convex path conditions 
can be designed for reachability analysis. However, it is not 
clear whether the path conditions are still convex in the 
general setting of TCTL model-checking. In this work, we 
discuss the concept of time-convexity that allows us to relax 
the restrictions on the application of time-progress 
evaluation algorithm for convex path conditions. Then we 
give examples in TCTL model-checking that engenders 
time-concave path conditions even when the original 
automaton location invariance conditions are time-convex. 
Then we present two techniques that allow us to apply the 
evaluation algorithms for time-convex path conditions to 
time-concave path conditions. Finally, we report our 
experiment with the techniques. For some benchmarks, our 
techniques may enhance the performance of 
model-checking by an order of magnitude. 
. 
Keywords: timed automaton, time progress, 
model-checking, TCTL, convex, concave 
1 Introduction 
In the last two decades, we have witnessed significant 
progress in both theory and applications of the 
model-checking technology of dense-time systems [1, 4, 
11, 8]. One popular framework in this regard is called 
TCTL model-checking [1] which assumes a given 
dense-time system description as a timed automaton (TA) 
[3] and a given specification formula in Timed 
Computation Tree Logic (TCTL) [1] and checks whether 
the TA satisfies the TCTL formula. The TCTL 
model-checking technology could be an attractive choice 
to the industry as long as the performance of the related 
verification algorithms could handle industrial projects. 
However, at this moment, many algorithms used in 
TCTL model-checking still suﬀer from low performance. 
To achieve the promise of TCTL model-checking, the 
performance of related algorithms has to be enhanced. 
 
One important algorithm in TCTL model-checking is the 
time-progress evaluation algorithm. For simplicity, we 
focus on the backward time-progress operation. However, 
the ideas discussed in this work should also apply to the 
forward counterpart. Usually we are given a path condition 
φ and a destination condition ψ and want to compute the 
condition, Tbck(φ, ψ) in symbols, of those states that can 
go to a state satisfying ψ through a time progression along 
which all states satisfying φ. For convenience, given t ∈ 
R≥0 , we let φ + t be the condition for states that satsify φ 
after the progression of t time units [1]. Then Tbck(φ, ψ) 
can be formulated as follows [7]. 
The reason is that for two states ν and ν , that respectively 
represent the starting state and the destination state of a time 
progression, we know that the following two conditions are 
true. 
  • Both ν and ν are in the convex space characterized by φ. 
  • All states that happen during this time progress actually 
form a straight line segment between ν and ν . 
According to the definition of convexity, then all states in 
this straight line segment (and time progression) must also 
be in the space characterized by φ. As can be seen from 
Tbck (), one existential quantification and two 
complementations can be avoided with this assumption. It 
will be interesting to see to what extent in TCTL 
model-checking [1,10], we can use Tbck () in place of 
Tbck(). According to our knowledge, there is no related 
work in this regard. In this work, we have the following 
contributions. 
 
Tbck(φ, ψ) = ∃t ∈ R≥0 ψ + t ∧ ∀t ∈ R≥0 (t ≤ t → φ + t ) 
                                            . 
         ≡ ∃t ∈ R≥0 ψ + t ∧ ¬∃t ∈ R≥0 (t ≤ t ∧ ¬φ + t ) (T) 
The outer quantification on t specifies the “through a 
time progression” part. The inner quantification specifies 
that every state along the finite computation also satisfies 
φ. As can be seen, Tbck(φ, ψ) incurs two existential 
quantifications (or Fourier-Motzkin elimination [6]), two 
complementations, and two conjunctions. Since the 
time-progress algorithm is fundamental to TCTL 
model-checking, such an involved formulation usually 
results in significant performance degradation. 
   One way to enhance the evaluation eﬃciency of 
Tbck() is to make an assumption of the TAs. An 
observation is that if the path condition φ characterizes a 
convex1 state space, then Tbck(φ, ψ) can be rewritten as 
follows. 
Tbck (φ, ψ) = ∃t ∈ R≥0 (ψ + t ∧ φ ∧ φ + t) (T’) 
1 A space is convex if for any two points in the space, any 
point in the straight line segment between the two points is 
also in the space. A space that is not convex is concave. 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
γ2 
γn 
4 Time-Concavity and Convexity in Verification 
Problems 
   Given a zone predicate φ that describes a 
time-concave state space, we want to characterizes those 
states in [[φ]]A that can first go through a state outside 
[[φ]]A through time progression and then again end up at 
a state in [[φ]]A . To calculate the time progress 
operation to such states in [[φ]]A , we cannot use Tbck () 
in place of Tbck() since such states are evidence for the 
time-concavity of φ. Formally speaking, such states can 
be characterized as follows. 
In this section, we show two things for TCTL 
model-checking. First, time-convexity of the location 
invariance condition HA is good enough to guarantee the 
time-convexity of all path conditions used in the 
reachability analysis of A. Second, time-convexity of HA is 
not good enough to guarantee the time-convexity of all path 
conditions in the TCTL model-checking of A. TConcave(φ) = φ ∧ ∃t ∈ R≥0 φ + t ∧ ∃t ∈ R≥0 (t < t ∧ (¬φ) + t ) 
4.1 For Reachability Analysis Lemma 3. Given a zone predicate φ for a TA A, [[φ]]A
− [[TConcave(φ)]]A is time-convex. 
The most used verification framework is reachability 
analysis. In this framework, we are given a TA A and a 
safety predicate η and want to check whether there is an 
initial run of A along which some state satisfies ¬η. The 
system is safe iﬀ A satisfies ∀ η ≡ ¬∃true U¬η. According to 
formula (∃U ) in page 263, we find that all the path 
conditions used in the time progress evaluation is exactly 
the HA of a TA A. Thus we have the following lemma. 
 
Lemma 2. For reachability analysis of a TA A, if HA is 
time-convex, then Tbck () can be used in place of Tbck() in 
formula (∃U) without aﬀecting the result of analysis. 
 
Lemma 4. Suppose we are given two zone predicates φ 
and φ such that [[φ]]A is not time-connected to [[φ ]]A 
and vice versa. Then for every zone predicate ψ, 
[[Tbck(φ, ψ)]]A ∪ [[Tbck(φ , ψ)]]A = [[Tbck(φ ∨ φ , 
ψ)]]A . 
Lemma 5. Given a TA A and a zone predicate φ, [[φ]]A − 
[[TConcave(φ)]]A is not time-connected to 
[[TConcave(φ)]]A and vice versa. 
4.2 For TCTL Model-Checking 
We have identified some generic cases in examples 6 
through 10 that can cause time-concave path conditions in 
model-checking. 
 
Example 6. Disjunction in the path conditions in modal 
formulas. We may have a formula: ∃(q1 ∧ (x ≤ 5 ∨ y > 
7))Uq2 . Given a TA A with a time-convex HA , according 
to formula (∃U ) in page 263, the path condition is q1 ∧(x ≤ 
5 ∨ y > 7) ∧ HA . As can be checked, the path condition is 
time-concave when [[q1 ∧x ≤ 5∧HA ]]A = ∅, [[q1 ∧y > 
7∧HA ]]A = ∅, and [[q1 ∧x > 5∧y ≤ 7∧HA ]]A = ∅. 
    For another example, according to formulation (∃ ) in 
page 262, formula ∃ (q1 ∧ (x ≤ 5 ∨ y > 7)) also incurs 
time-concavity in path condition. 
 
Example 7. Complementation in the path conditions in 
modal formu- 
las. We have a formula: ∀♦(q1 → (x > 5 ∧ y ≤ 7)) which can 
be rewritten as ¬∃ (q1 ∧ (x ≤ 5 ∨ y > 7)). According to 
formulation (∃ ) in page 262, the path condition q1 ∧ (x ≤ 5 
∨ y > 7) ∧ HA is time-concave when [[q1 ∧ x ≤ 5 ∧ HA ]]A 
= ∅, [[q1 ∧ y > 7 ∧ HA ]]A = ∅, and [[q1 ∧ x > 5 ∧ y ≤ 7 ∧ 
HA ]]A = ∅. 
 
6 Algorithm with Approximate 
Time-Concavity Checking 
   As can be seen in section 5, procedure TConcave() 
can be executed many times in procdeure 
CascadingConvexities() and incur great computation cost. 
We want to investigate if it may pay oﬀ to use an 
alternative technique that avoids the eval- 
uation of procedure TConcave(). Given a path zone 
predicate φ and a destination zone predicate ψ, this 
alternative technique works in the following two steps. 
There is a global clock called Time. There are two TTCN 
commands, START (to start the ticking of a clock from 
zero) and READTIMER() (to read the current reading of 
a clock and save the reading in a variable). The test case 
can be used to check if a sender retries the transmission 
within 52 time unit after a bus collision is detected. 
Given a symbolic trace ρ, we denote the test case 
constructed out of ρ as testcase(ρ). A symbolic trace in 
ZoneForest(A, φ) is root-to-leaf if its 
(1) Partition φ into two zone predicates φ1 and φ2 such 
that [[φ1 ]]A ∩ [[φ1 ]]A = ∅, [[φ1 ]]A ∪ [[φ1 ]]A = 
[[φ]]A , [[φ1 ]]A is time-convex, and [[φ1 ]]A and 
[[φ2 ]]A are time-disconnected to each other. 
(2) Then we return Tbck (φ1 , ψ) ∨ Tbck(φ2 , ψ) as the 
result of time progress evaluation. 
5 Algorithm with Cascading Convexities 
We have experimented with several techniques for 
performance enhancement of time progress evaluation for 
time-concave path conditions. We present one such 
technique that we have found useful. The technique breaks 
a time-concave zone predicate into time-convex ones and 
then applies Tbck () on each time-convex ones for the 
evaluation of time progress. 
Lemma 7. Given a zone predicate φ, if φ is time-concave, 
then there are (q, η), (q, η ) ∈ ZoneSet(φ) satisfying 
ConcavityNecessaryφ ((q, η), (q, η )). 
Lemma 8. With the φ1 and φ2 defined in the last 
paragraph, for any ψ, [[Tbck(φ, ψ)]]A = [[Tbck (φ1 , ψ) 
∨ Tbck(φ2 , ψ)]]A . 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Efficient Model-Checking of Dense-Time Systems 
With Time-Convexity Analysis 
Abstract 
The evaluation of successor or predecessor state spaces 
through time progress is a central component in the model- 
checking algorithms of dense-time automata. The time 
progress operator takes the concavity of a path condition 
into consideration and usually results in high complexity in 
the evaluation. Previous algorithms in this aspect usually 
assume that the location invariance condition of an 
automaton are convex in the dense-time state space and use 
a more efficient algorithm for time progress evaluation. In 
fact, the restriction of location invariance condition 
convexity can be further relaxed to that of time-convexity 
for a broader range of application of the more efficient 
algorithm. In this work, we present techniques for the 
efficient model-checking of dense-time automata by taking 
the time-convexity of path conditions into consideration. 
We first identify a class of TCTL formulas that only 
characterize time-convex state spaces. The class includes 
several important types of TCTL formulas, including some 
timed inevitabilities (of the form like ∀♦[0,d] φ) with 
deadlines. We then present a new formulation for the 
efficient evaluation of timed inevitabilities with 
time-convex path conditions. The new formulation also 
leads to a new technique for the approximate evaluation of 
timed inevitabilities with better precision. Finally, we report 
our implementation and experi- 
ment. 
    In [7], formulation (T) was proposed for the calcula- 
tion of time progress precondition for TAs through con- 
cave path conditions. Various tools for reachability anal- 
ysis are now available with formulation (T’) based on the 
convexity assumption of the location invariance condition 
of TAs [4, 8, 13]. 
    In [12], performance-enhancing techniques for timed 
in- 
evitabilities were presented. They also presented an early 
decision technique for the evaluation of timed inevitabili- 
ties. They also discussed how to pick the time length value 
for the efficient evaluation of states that start non-Zeno runs. 
    In [9], a model-checking algorithm for timed inevitabil- 
ities with event constraints and weak/strong fairness as- 
sumptions was presented and implemented. 
    In [11], the concept of time-convexity was discussed. 
For convenience, given t ∈ R≥0 (the set of non-negative 
reals), we let φ + t be the condition for states that satsify φ 
after the progression of t time units [1]. Then Tbck(φ, ψ) 
can be formulated as in table 1 [7]. The outer quantifica- 
tion on t specifies the “through a time progression of t time 
units” part. The inner quantification specifies that every 
state along the time progression satisfies φ. As can be seen, 
this formulation (T) of Tbck(φ, ψ) incurs two existential 
quantifications [6], one complementation, and two conjunc- 
tions. Since the time-progress algorithm is fundamental to 
TCTL model-checking, such an involved formulation usu- 
ally results in significant performance degradation. 
    One way to enhance the evaluation efficiency of formu- 
lation (T) is to take the shape of the path condition φ into 
consideration. An observation is that if the path condition 
φ characterizes a convex1 state space, then formulation (T) 
can be rewritten as formulation (T’) in table 1. The reason 
is that for two states ν and ν , that respectively represent 
the starting state and the destination state of a time progres- 
sion along path condition φ, we know that the following two 
conditions are true. 
   • Both ν and ν are in the convex space characterized by 
      φ. 
   • All states that happen during this time progress actu- 
      ally form a straight line segment between ν and ν in 
      the state space. 
According to the definition of convexity, then all states in 
this straight line segment (and time progression) must also 
be in the space characterized by φ. 
 
2 Related work 
Keywords: timed automaton, time progress, model- 
checking, TCTL, verification, timed inevitability, convex, 
concave 
1 Introduction 
    A popular framework for the verification of embedded 
systems [1, 4, 8, 13] is the TCTL model-checking problem 
[1]. In this framework, we are given a dense-time system 
description as a timed automaton (TA) [3] and a specifica- 
tion formula in Timed Computation Tree Logic (TCTL) [1] 
and checks whether the TA satisfies the TCTL formula. To 
achieve the promise of TCTL model-checking, the impor- 
tance of performance enhancement of related algorithms 
cannot be over-emphasized. One important algorithm in 
TCTL model-checking is the time-progress evaluation al- 
gorithm. For simplicity, we focus on the backward time- 
progress operation. However, the ideas discussed in this 
work should also apply to the forward counterpart. Usually 
we are given a path condition φ and a destination condi- 
tion ψ and want to compute the condition, Tbck(φ, ψ) in 
symbols, of those states that can go to a state satisfying ψ 
through a time progression along which all states satisfy φ. 
  
 
 
 
 
 
 
 
 
 
 
 
5 Time-convexity checking from the syntax 
  of TCTL formulas 
6 New formulation of timed inevitabilities 
    With formulation (∃ N Z ), formula (A) in example 2 is 
evaluated with the formula in table 4. As can be seen in 
table 4, the path condition in time progress evaluation is 
m < 5 ∨ m > 10 ∨ ¬alarm which is time-concave.4 This 
means that we cannot use Tbck () in place of Tbck() with 
formulation (∃ N Z ). 
    However, we can see that for a non-Zeno run ρ to sat- 
isfy c,d φ, it means ρ can be decomposed into three run 
segments ρ1 , ρ2 , ρ3 such that 
   • states in ρ1 happen at time in [0, d − c, d and satisfy 
      HA , 
   • states in ρ2 happen at time in c, d and satisfy φ∧HA , 
      and 
   • ρ3 is a non-Zeno run with all states happening at time 
      in c, ∞) − c, d and satisfy HA . 
This observation leads to the new formulation for a formula 
like ∃ c,d φ in table 5. The advantage of the new formula- 
tion is that it may happen that for each segment of ρ1 , ρ2 , ρ3 , 
its individual path condition could be time-convex and the 
corresponding time progress evaluation can be done with 
the more efficient formulation (T’) in place of (T). Specifi- 
cally, for example, for ∃ [c,d]φ, we have the following map- 
ping between the syntax structure of its new formulation in 
table 5 and the three run segments. 
   • The path condition of the outer ∃ -formula character- 
      izes the time progress along ρ1 . It can be evaluated 
      with formulation (T’) if HA ∧ m < c is time-convex. 
   • The destination condition of the outer ∃ -formula and 
      the path condition of the inner ∃ -formula together 
      characterize the time progress along ρ2 . It can be eval- 
      uated with formulation (T’) if φ∧HA ∧m ≥ c∧m ≤ d 
      is time-convex. 
   • The destination condition of the inner ∃ -formula and 
      NZ(true) together characterize the time progress along 
      ρ3 . It can be evaluated with formulation (T’) if HA is 
      time-convex. 
Given a TA A and a TCTL formula φ, we use [[φ]]new to 
                                                        
A 
denote the zone predicate obtained for φ from the algorithm 
in tables 1 and 2 except that formulation (∃ ˆ N Z ) in table 5 
is used in place of formulation (∃ N Z ) in table 2. The 
following lemma establishes the correctness of the new 
formulation in table 5. 
 
   Note that at the end of the last section, we present predi- 
cate time concave() to check if a zone predicate is con-
cave. This checking incurs a complementation, three con- 
junctions, and two existential quantifications and could still 
be costly. In this section, we present techniques for avoid- 
ing this checking. The first idea is to recognize the syntax 
structures in TCTL that yield only time-convex zone pred- 
icates. This syntax checking could be much less expensive 
than invoking time concave(). 
   Given a TA A, two TCTL formulas φ and ψ are 
location-disjoint if there is a Q ⊆ QA such that φ A ⊆ 
    q∈Q q A and ψ A ⊆q∈QA −Q q A . 
   The following lemmas characterize classes of TCTL 
thatonly yield time-convex zone predicates. 
Lemma 16 Assume we have a TA A, an interval c, ∞) ⊆ 
R≥0 , and two time-convex TCTL formulas φ and ψ such 
that φ and ψ are location-disjoint. ∃φ c,∞) ψ A is time- 
convex. 
Lemma 26 Given a TA A and a TCTL formula φ, φ A = 
      new 
  [[φ]]AA. 
Lemma 19 Assume we have a TA A, an interval [0, d ⊆ 
R≥0 , and two time-convex TCTL formulas φ and ψ such 
that φ and ψ are location-disjoint. ∀φ [0,d ψ A is time- 
convex. 
   The following corollary is important in that it cap- 
tures the time-convexity of the important class of timed in- 
evitabilities in TCTL formulas. 
Lemma 22 Given a TA A, a time-convex TCTL formula 
φ, and an interval c, ∞) ⊆ R≥0 , ∀ c,∞) φ A is time- 
convex. 
Lemma 23 Given a TA A, a time-convex TCTL formula φ, 
and an interval [0, d ⊆ R≥0 , ∃ [0,d φ A is time-convex. 
Definition 24 TCTLtc Only TCTL formulas of the follow- 
ing forms are members of TCTLtc . 
   • η, a zone predicate such that time concave(η) is 
     unsatisfiable. 
   • φ1 ∧ φ2 , with φ1 ∈ TCTLtc ∧ φ2 ∈ TCTLtc . 
   • ∃φ c,∞) ψ with the following two properties. 
       − φ and ψ are in TCTLtc . 
       − φ and ψ are location-disjoint. 
   • ∃φ c,∞) ψ with φ ∈ TCTLtc and c, ∞) ⊆ (0, ∞). 
   • ∀φ [0,d ψ with the following properties. 
       − φ ∈ TCTLtc and ψ ∈ TCTLtc . 
       − φ and ψ are location-disjoint. 
   • ∀ c,∞) φ with c, ∞) ⊆ R≥0 and φ ∈ TCTLtc . 
   • ∃ [0,d φ with [0, d ⊆ R≥0 and φ ∈ TCTLtc . 
