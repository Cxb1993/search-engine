2 
之外 [10]，工作匹配與排程問題的一般型式
已被證實為一 NP-完備問題 [11]。由於求
解此一問題所需耗用之時間會隨著問題規
模的增加而呈現指數方式的爆炸性成長，因
此許多學者一直以來皆致力於發展各種近
似解演算法 (approximation algorithm)，試圖
在可接受的合理時間內求得問題的近似解 
[4-7]。 
求解工作匹配與排程問題的近似解演
算法可被概分以下兩種類型：以優先權為基
礎 的 串 列 演 算 方 法  (priority-based list 
scheduling) [4] 與泛用啟發式演算方法 
(metaheuristics) [5-7]。串列演算方法  (list 
scheduling) 在處理工作匹配與排程問題時
首先會分析每一個工作的特性 (例如：工作
量) 以及工作間彼此的關聯 (例如：工作執
行先後順序限制)，然後決定所有工作的優
先權。之後，以特定的準則 (例如：工作最
早開始時間或最早完成時間) 為依據，將適
當的處理單元分派給具有最高優先權且尚
未被處理的工作。各演算法依所使用的準則
不同而有所不同。串列演算方法的主要特色
在於具有執行速度的優勢，因此在處理小規
模問題時往往可以在極短時間內找出問題
的最佳解。然而，此一類型的演算方法同時
也有為人所詬病的缺點。例如：吾人無法藉
由增加程式執行時間以改進解的品質。此
外，對於大規模的工作匹配與排程問題，串
列演算方法亦無法保證其所求解的品質 
[13]。有鑑於此，許多文獻便提出以泛用啟
發式演算方法求解工作匹配與排程問題的
構想。 
傳統的泛用啟發式演算方法包括基因
演算方法  (Genetic Algorithms, GAs) [3, 
13]、模擬退火方法 (Simulated Annealing, 
SA) [1] 以及禁制搜尋方法 (Tabu Search, 
TS) [8]。在求解組合最佳化的研究領域中，
泛用啟發式演算方法已經被廣泛應用且成
功地獲致相當不錯的成效。例如：旅行推銷
員 問 題  (Traveling Salesman Problem, 
TSP)、二次分派問題 (Quadratic Assignment 
Problem, QAP)、資源限制專案排程問題 
(Resource-Constrained Project Scheduling 
Problem, RCPSP) 等。模擬退火方法、禁制
搜尋方法以及基因演算方法皆可被視為是
迭代式演算法  (iterative algorithms) 的一
種。其基本運作方式係由一個或多個已知的
問題初始解開始，然後反覆執行改進現行解
的處理程序直到滿足終止條件為止。以上所
提及之泛用啟發式演算方法應用在求解最
佳化問題時大多以隨機方式產生初始解。此
一方法之優點在於產生初始解的速度極
快，但卻也往往導致問題求解的收斂時程過
長。 
為了改進傳統的泛用啟發式演算方法
在設計上的缺陷，馬可‧朵麗哥  (Marco 
Dorigo) 等學者於 90 年代初期提出著名的
螞蟻系統  (Ant System, AS) 演算方法 
[7]。螞蟻系統的設計構想主要源自於對自然
界螞蟻覓食行為的觀察。在真實世界中，螞
蟻利用一種名為「費洛蒙」 (pheromone) 的
化學物質彼此溝通進而達成協同合作的目
的，藉此找出巢穴與食物之間的最短路徑。
螞蟻系統便是以人工螞蟻模擬此一行為模
式並將之應用在旅行推銷員問題的求解。基
本上，螞蟻系統在運作時的核心為狀態轉移
規則與費洛蒙更新規則。狀態轉移規則主要
是以費洛蒙機率模型為工具，用以引導人工
螞蟻在決定其下一步的行進路線時有較大
的機率選擇費洛蒙累積濃度較高的路線前
進，如此反覆執行直到該人工螞蟻完成一條
合法的路徑為止。換言之，狀態轉移規則係
採用逐步建構的方式以產生一個完整的問
題可行解。此係螞蟻系統與傳統泛用啟發式
演算方法在設計上的最大不同之處。另一方
面，就費洛蒙更新規則而言，當系統中所有
的人工螞蟻都已經順利建構出問題解之
後，便將所有人工螞蟻於本迭代中所走過的
路徑累積適量的費洛蒙，以使得人工螞蟻在
下一次執行狀態轉移規則之時有較高機率
選擇較多螞蟻所行經過的路線。如此經過一
定的迭代數之後，所有的人工螞蟻便會趨向
於往費洛蒙累積濃度最高的路線前進，吾人
最後便可以獲致理想的問題解。基於此一設
計概念，近年來陸續有許多文獻提出新的設
計方法，而這些方法也都被成功地應用在傳
統組合最佳化問題的求解 [7]。 
在嘗試以螞蟻系統演算方法求解工作
匹配與排程問題的過程中，吾人面臨一些必
須要克服的問題。例如：系統中人工螞蟻數
量的設定。毫無疑問地，人工螞蟻的數量會
直接影響演算方法的執行效能。若人工螞蟻
的數量太多，將可能產生過多的重複運算且
導致陷入區域最佳解的困境；反之，若人工
螞蟻的數量太少且又缺乏相關的配套措
施，則將無法有效地進行解空間的搜尋。為
4 
名為 FANT-TMS，其與傳統的螞蟻系統相
關演算方法有以下的不同之處： 
• 單一螞蟻求解：我們之所以採用單一螞蟻
求解主要是有利於平行化的實作，而且可
以讓求解的速度較快速較有效率。 
• 兩階段求解過程： FANT-TMS 係以快速
螞蟻系統決定工作執行的先後順序，然後
再以 串列演算方法分派工作給適當的處
理單元執行。此一設計主要目的是要讓演
算法的計算時間減少，進而使得演算法能
在較短的時間內搜尋更多的解空間。 
• 動態能見度設計：FANT-TMS 的能見度會
隨著全域最佳解的改變而有所不同。此一
設計方法可以讓演算法在求解剛開始的
過程中有較佳的目標可以參考，而不會漫
無目的的搜尋。 
• 動態費洛蒙更新設計：FANT-TMS 使用機
率判斷式來決定所要執行的費洛蒙更新
規則，此使得吾人可以根據目前所求得的
解選擇出最佳的費洛蒙方式更新。 
為了有效獲得高品質的解，我們在本計
畫中亦發展出一個區域搜尋方法。此一方法
與傳統區域搜尋技術最大的不同在於允許
一次置換數個工作的處理單元。實驗結果顯
示，我們所提出的 FANT-TMS 方法在單一
機器執行上都較其它演算法要好。除此之
外，我們也將 FANT-TMS 演算法以平行化
的方式實作。在實驗的過程中我們發現以較
多機器以及每部機器間具有資訊交換機制
的結果可獲致較佳品質的解。 
 
五、參考文獻 
 
[1] E. Aarts and J. Korst, Simulated 
Annealing and Boltzmann Machines: A 
Stochastic Approach to Combinatorial 
Optimization and Neural Computing, 
John Wiley & Sons, 1989. 
[2] E. D. Taillard, "FANT: Fast Ant System," 
Technical report IDSIA-46-98, IDSIA, 
Lugano, Switzerland, 1998. 
[3] E. S. H. Hou, N. Ansari, and H. Ren, "A 
Genetic Algorithm for Multiprocessor 
Scheduling," IEEE Trans. Parallel and 
Distributed Systems, Vol. 5, No. 2, pp. 
113-120, February 1994. 
[4] H. EI-Rewini, H. Ali, and T. Lewis, 
"Task Scheduling in Multiprocessing 
Systems," Computer, Vol. 28, No. 12, pp. 
27-37, December 1995. 
[5] L. Wang, H. J. Siegel, V. P. 
Roychowdhury, and A. A. Maciejewski, 
"Task Matching and Scheduling in 
Heterogeneous Computing Environments 
Using a Genetic-Algorithm-Based 
Approach," J. Parallel and Distributed 
Computing, Vol. 47, No. 1, pp.8-22, 
November 1997. 
[6] M. Dorigo, and L. M. Gambardella, "Ant 
Colony System: A Cooperative Learning 
Approach to the Traveling Salesman 
Problem," IEEE Trans. Evolutionary 
Computation, Vol. 1, No. 1, pp. 53-66, 
April 1997. 
[7] M. Dorigo, V. Maniezzo, and A. Colorni, 
"Ant System: Optimization by a Colony 
of Cooperating Agents," IEEE Trans. 
System, Man and Cybernetics-Part B: 
Vol. 26, No. 1, February 1996. 
[8] M. Lin, L. Karlsson, and L. T. Yang, 
"Heuristic Techniques: Scheduling 
Partially Ordered Tasks in a 
Multi-processor Environment with Tabu 
and Genetic Algorithm," Proc. of the 7th 
International Conference on Parallel and 
Distributed Systems, pp.515-523, July 
2000. 
[9] M. Y. Wu, W. Shu, and J. Gu, "Efficient 
Local Search for DAG Scheduling," 
IEEE Trans. Parallel and Distributed 
System, Vol. 12, No 6, pp. 617-627, June 
2001. 
[10] R. Sethi, "Scheduling Graphs on Two 
Processors," SIAM J. Computing, Vol. 5, 
No. 1, pp. 73-82, March 1976. 
[11] W. H. Kohler and K. Steiglitz, 
"Characterization and Theoretical 
Comparison of Branch-and-Bound 
Algorithms for Permutation Problems," J. 
ACM, Vol. 21, No. 1, pp 140-156, 
January 1974. 
[12] Y. K. Kwok and I. Ahmad, "FASTEST: A 
Practical Low-Complexity Algorithm for 
Compile-Time Assignment of Parallel 
Programs to Multiprocessors," IEEE 
Trans. Parallel and Distributed System, 
Vol. 10, No 2, pp. 147-159, February 
1999. 
[13]Y. K. Kwok and I. Ahmad, "Efficient 
Scheduling of Arbitrary Task Graphs to 
Multiprocessors Using a Parallel Genetic 
Algorithm," J. Parallel and Distributed 
Computing, Vol. 47, No. 1, pp. 58-77, 
November 1997. 
