 1
中文摘要 
隨著消費性電子產品及個人化產品需求的增加，許多產品具有少量多樣以及
短暫產品生命週期的特性，因此目前許多製造廠商多改採接單式生產(Build to 
Order；BTO)模式以因應客製化(Customization)生產之策略目標。BTO生產模式
的運作不但對生產排程、訂單預測、存貨模式、及運籌管理等議題造成影響，更
直接影響了設計端的作業，使得傳統的產品資料管理(Product Data Management；
PDM)系統在功能面與使用面上存在某種程度的不足。然而，過去卻鮮少有學者
對針BTO生產模式下的模組化產品資料管理相關議題進行探討。 
有鑑於此，本研究提出一為期三年的「模組化產品資料管理系統之研究」計
劃，以產品BOM(Bill of Material)資料為基礎，建構出一個適用於BTO生產模式
的PDM系統，加強PDM系統中的產品構形管理與產品分類管理功能，以期能提
供連接器製造廠商有效與正確的生產預測、存貨管理與採購管理等所需要的資
料。在第一年計劃中，我們以資料探勘研究領域中的關聯規則技術(Association 
rule)和BOM樹狀結構中的單階樹(Single-Level tree；SLT)為基礎，針對大量的產
品BOM資料之樹狀結構，發展一多樣產品共同性模組探勘系統，以協助產品工
程師能有效率地完成產品零組件模組化分析的工作。 
第二年計劃的主要研究目的，在於評估第一年計劃「多樣產品共同性模組探
勘系統」所探勘出的共同性模組進行成本分析。利用專案產生程序將共同模組組
合成可行的專案。最後，透過成本分析計算執行ㄧ專案所需花費的成本，並將花
費最小成本之專案回傳給使用者。在此研究計劃中，我們將分析每個專案中共同
模組的組裝成本、庫存成本和其他的管理與人工成本，透過成本分析可得到每個
專案的總成本，並挑選出成本最小的專案來進行生產或訂購。此研究所提出的模
組化生產，不僅可以達成產品多樣化及彈性化的目標，亦能幫助企業提昇生產效
率，並以最低的花費得到最大的效益。 
第三年計劃的主要研究目的，在於多樣產品分群和簡化產品組裝過程。利用
階層式分群演算法(Hierarchical Clustering Algorithm)將多樣產品中相似產品分成
同一群，並運用apriori演算法從這些產品群去探勘共同性組件模組，並依循組件
模組將產品群內之產品間組裝過程簡化成共同性組裝生產線。在此研究計劃中，
我們以產品結構相似性為基礎並運用階層式分群演算法將相似的產品分成同一
群。並運用共同模組探勘方法對產品群內的SLT結構進行分析並取得共同模組並
利用共同模組來簡化產品組裝過程，並能簡化成一條共同組裝生產線。此研究所
提出的模組化組裝線，不僅可以降低組裝時間和生產成本，亦能幫助企業提昇生
產效率，並快速回應客戶需求。 
 
關鍵字：接單式生產模式、模組化、產品資料管理、關聯規則、群集分析 
 
 3
1 Introduction 
In current market-oriented business environment, product variation and 
customization is necessary to satisfy customers’ diverse requirements. To face the 
change, enterprises are now transferring their production model from the traditional 
mass production to the mass customization production. This transition makes the 
problem of how to keep productivity and reduce cost in mass customization 
production becomes one of the major concerns for enterprises.  
To balance the issues of product variety and economic production scale, many 
companies adopt the modularity management strategy. The modular concept can be 
traced back to Schlesinger’s interpretation of the building block system (BBS) on 
1930. Modularity product architecture designs provide the foundation for firms to 
flexibility design and create the desired amount of product variety to customers. 
Through such a module generalization process, common module is assembled to form 
other components, so that the number of parts can be reduced. In addition, common 
modules can also rapidly be assembled on manufacturing and reduce cost dramatically. 
Therefore, modular products and reconfigurable processes are crucial to agile 
manufacturing and provide a way to produce a variety of products that satisfy various 
customer requirements in time (Kidd, 1994). 
There have been many studies on modularity. Gu and Sosale (1999) presented an 
integrated modular design methodology for life cycle engineering. The methodology 
identifies the factors related to design objectives, relates these factors to design 
components through interaction analysis, and clusters components into modules. 
Romanowski and Nagi (2005) proposed a similarity metric for finding the distance 
between existing products based on bills of materials (BOMs), a class of unordered 
trees. They showed that exist editing operations for unordered trees are not consistent 
for BOMs, and presented a similarity metric based on the symmetric difference. They 
also provided a polynomial time algorithm for finding the minimum weighted 
symmetric difference between a pair of unordered trees. These researches mainly 
focused on modular design encompassing all aspects of a product’s life cycle from 
initial conceptual design. Although this study can find similar product structure, 
however, users still can not know what common module existed among all product 
structures and hard to understand common feature of variants product, especially in 
current complex design environment. Besides, cost management is an important 
concern for enterprises. 
To bridge the gap, this study proposed a three-year in-deep study on the modular 
product data management issue. In the first year, we developed an association mining 
method and single-level tree for determining the common modular structures based on 
 5
postpone the addition of the components that differentiate the product until the later 
stages of the process. Second, a company can manufacture different modular products 
at the same time, which significantly reduce the total time required for production. 
Third, a company can more easily find out production problems and isolate potential 
quality problems.  
A number of researches related modular products have been conducted in recent 
years. Modular product design which is considered a key enabler for efficient mass 
customization reduces the cycle time and increases the manufacturers’ strategic 
flexibility in a fast-paced market environment (Partanen and Haapasalo, 2004). He 
and Kusiak (1997) used a tabu search based algorithm to solve configuration 
problems for an assembly system. The assembly system is decomposed into two 
subsystems based on the structure of modular products. Gonzalez and Otto (2000) 
developed a general optimization formulation for a product family design based on a 
traditional decision model, in which module and product constraints were applied and 
module instances were selected. Yigit et al. (2002) introduced a nonlinear integer 
programming model to select subsets of module instances for products with two 
modules in reconfigurable manufacturing systems. Gu and Slevinsky (2003) proposed 
a new concept of MechBus for facilitating modular and platform product design. The 
characteristics and features of MechBuses have been identified including bus 
functions, locking and release mechanism, as well as safety and intelligent features. A 
design method as well as a set of software tools for implementing modular platform 
design using MechBuses has been developed. Kreng and Lee (2004) used a non-linear 
programming to identify separable modules and simultaneously optimize the number 
of modules. A heuristic grouping genetic algorithm is used to search for the optimal or 
near-optimal modular architecture. Some modules may be reusable, recyclable or 
re-manufacture upon product retirement. Thus, modular design can provide benefits to 
many aspects of product life cycle. 
Besides, some researchers discussed the cost concept on the modular product or 
product family. Newcomb et al. (1998) proposed the hypothesis that modular 
architecture will lead to decreased life-cycle cost even if the modules are not made 
with other life-cycle characteristics specifically in mind. Module allows ease of 
recycling and remanufacturing. Reducing cost for recycling and remanufacturing 
necessitates that assemble parts often within a module so they can be accessed easily 
(Graedel and Allenby, 1995). Besides, Hopwood (1995) regarded that labor cost 
would be reduced when manufacturers use module to produce products. Lapp and 
Golay (1997) proposed a methodology for making the modular design and 
construction process more systematic and efficient. This methodology is applied to 
both the design and fabrication processes for power plant modules. The design is 
 7
 
Figure 1 The framework of the proposed common module mining system. 
 
3.1 Single level tree generation procedure 
Product structure is a hierarchical decomposition of a product and the bill of 
materials (BOM) is a well known one. With the product structure, we can clear 
understand the components and attributes of the product. The product structure shows 
the materials, components parts, subassemblies, and other items in the hierarchical 
structure. In the product structure tree, the root node represents the completed product; 
the internal nodes stand for assembled-parts, and the leaf nodes are the end-parts. 
Figure 2 shows an example of a product structure. The completed product is 
composed of one part B, one part C, one part D and one part E. Besides, each part B 
requires one part F, one part G, two part Hs and one part I, and each part D requires 
two part Fs, one part J and one part K, and each part E is composed of two part Hs 
and one part I, and each part G is composed of two part Ls and one part M and one 
part N. The location of each part in the product structure tree is indexed with the depth. 
The completed-product is located at depth 0. Accordingly, the assembled-parts of the 
completed product are location at depth 1, and so on. 
 9
 
SLT generation procedure 
Input: the set of nodes, V 
Output: the set of SLTs 
 
Method: 
1. int i = 1 
2. for (int j = 1; j++; j <｜V｜) 
3. { 
4.   if(children[j] ≠φ) { 
5.     SLT[i] = j; 
6.     i++; 
7.   } 
8. } 
Figure 3 The pseudo-code for SLT generation procedure. 
 
3.2 Product clustering procedure 
3.2.1 Product similarity measurement 
A product structure compose of several SLTs. The SLT similarity measurement 
can be used to find similar product structure. When two product structures both 
contain similar (or the same) SLTs, the two products might have high similar structure. 
Let product similarity value in PTi and PTj is defined as:  
( )
( , )( , )
max | |,| |i j
TMSV i jPTS i j
S S
=   
where ( , )TMSV i j  is the function that evaluates the sum of similarity of similar SLTs 
in PTi and PTj, iS  is the number of SLTs in ith product structure tree (PTi) and 
( )max | |,| |i jS S  is the max number of SLT in PTi and PTj. Figure 4 show the entire 
process of product similarity measurement. Initially, given two product structures P1 
and P2 can be decomposed two and three SLTs respectively. To evaluate the similarity 
in any pair of SLTs in P1 and P2, we can get the highly similarity between SLT(2) of 
P1 and SLT(3) of P2 and delete the row of SLT(2) of P1 and column of SLT(3) of P2. 
We can get product similarity value until all rows and columns are deleted. 
 
 11
 
Input: a set P = {1,…,N}; St = {1,…,M}  
Output: The matrix of product structure similarity PS(i,j) 
1. For each product structure i in P { 
2.   For each product structure j in P { 
3.     For each single level tree k in Si { 
4.       For each single level tree l in Sj { 
5.         calculate SS(k,l) = SV(k,l) 
6.       } 
7.     } 
8.     TVS = TMSV(i,j) 
9.     PS(i,j) = PTS(i,j)   
10.   } 
11. } 
12. TMSV(i,j) 
13. { 
14.   Do until Stopping = true 
15.     For k = 0 to Si.length { 
16.       For l = 0 to Sj.length { 
17.         If Max < SS(k,l) then { 
18.           Max = SS(k,l)  
19.           row = k 
20.           column = l 
21.         Else 
22.           Stopping = true 
23.         } 
24.       } 
25.     } 
26.     TVS += Max 
27.     Max = 0 
28.     For k = 0 to Sj.length { 
29.       SS(row,k) = 0 
30.     } 
31.     For n = 0 to Si.length { 
32.       SS(n,column) = 0 
33.     }       
34.   } 
35.   return TVS 
36. } 
Figure 5 The pseudo-code of the proposed structure parsing algorithm. 
3.2.2 Hierarchical clustering algorithm 
In this study, the hierarchical clustering algorithm is used to cluster similar 
product structures into groups according to product similarity matrix. The steps of 
hierarchical clustering algorithm are described in Figure 6. 
 13
{ }NS ,,1…=  be the set of all SLTs decomposed from all product structures where N 
is the total number of all SLTs. In addition, let α represent the minimum similarity 
degree between SLT i and SLT j which is decided by users depending on their needs. 
Finally, since frequent pattern mining concept is adopted in the procedure to obtain 
common modules, the threshold of support counts, min_sup, should be decided by 
users depending on their needs. 
The pseudo-code of the proposed common module mining procedure is 
illustrated in Figure 7. The procedure first calculates the dissimilarity value jiS ,  for 
each pair of SLTs using Equation (1), which is as shown in lines 1-3. Let SS be a 
matrix to indicate whether each pair of SLTs are similar enough or not. If jiS ,  is 
larger than α, SSi,,j will store 1 as shown in lines 4-5. If jiS ,  is equal to or less than 
α, SSi,,j will store 0. The root node of SLT i can be derived using root[SLT[i]] and 
also a set of children nodes of SLT i can be derived as children[root[SLT[i]]]. Next, 
we transform each row i of the SS matrix into a set of transactions (Ti) where each 
children[root[SLT[i]]].name represents an item of a transaction, as shown in lines 
9-24. In the concept of the frequent pattern mining, an item with more than one 
quantities in a transactions set will be seen as one item. Therefore, the procedure will 
conduct a proper transformation so that an item with more than one quantity can be 
identified. As shown in lines 12-13, if the quantity of a child node in 
children[root[SLT[j]]] is larger than one, the child node will be subtracted from 
children[root[SLT[j]]] as shown in line 14. Then, the children[root[SLT[j]]].name 
add k will become children[root[SLT[j]]].name1, children[root[SLT[j]]].name2 and 
so on and the SP represents these changed children node which be subtracted as 
shown in lines 15-16. Next, put SP into the children[root[SLT[j]]] as shown in line 
17. 
 
Common module mining procedure, CMMP 
Input:  
■ a set { }NS ,...,1=  
■ α is threshold of dissimilarity 
■ min_sup, the minimum support count threshold 
Output: a set { }SiFi ∈  
 
Method: 
1.  for each i in S { 
2.    for each j in S { 
 15
50.  for each i in S { 
51.    for each x in Fi { 
52.      for each j in S and ji ≠ { 
53.        for each y in Fj { 
54.          if ( ) ( ) φ=∩−∪ yxyx  then { 
55.            { }yFF jj −= ; 
56.          } 
57.        } 
58.      } 
59.    } 
60.  } 
Figure 7 The pseudo code of the proposed common module mining procedure. 
Next, we use frequent pattern mining developed by Agrawal and Srkant (1994) 
to derive common module from Ti. The frequent pattern mining is to find a set of 
items that appear frequently in the database through several iterations. In frequent 
pattern mining, a set of items is termed as an itemset. If an itemset contains k items, it 
is called a k-itemset. Furthermore, the support of an itemset is defined as the fraction 
of the itemset in the records of a database. If the support of an itemset exceeds the 
user assigned threshold, called as minimum support, the itemset is considered as a 
frequent itemset. Let kC  denote the set of candidate k-itemsets, kL  denote the set 
of candidate k-itemsets and min_sup is threshold of minimum support counts which is 
decided by users depending on their needs. The procedure will make a database scan 
over the data set to determine the support of each item. Upon completion of this step, 
the set of all frequent 1-itemsets 1L  will be known, as shown in lines 27. Next, the 
procedure will iteratively generate new candidate k-itemsets using the frequent 
(k-1)-itemsets found in the previous iteration, as shown in lines 28. To count the 
support of the candidates, the algorithm needs to make an additional database scan 
over the data set, as shown in lines 29 and 32. The subset function is used to 
determine all the candidate itemsets in kC  that are contained in each transaction t. 
After counting their supports, the algorithm eliminates all candidate itemsets whose 
support counts are more than min_sup, as shown in lines 34. The algorithm terminates 
when there are no new frequent itemsets generated and put the largest frequent, Lk-1 in 
the set Fi as shown in lines 36 where Fi represents a set of the candidate common 
modules generated from each Ti. Next, the algorithm screens out inappropriate 
modules from Fi. If the module can not add additional part(s), it should be deleted as 
shown in lines 38-49. Finally, a set of common modules { }SiFi ∈  which are not 
repeated as shown in lines 50-60. 
 17
3.5 Cost analysis 
The following assumption is made in this study. Assume that the factory will 
conduct assembly tasks only. Therefore, all parts are ordered from suppliers. If an 
enterprise decides to adopt modules, the modules are ordered from suppliers too. In 
addition, the annual demand for all products is stable. That is, the number of products 
the factory wants to produce in one year is known and will not change.  
There are three different costs should be considered when execute a project 
which adopting modules into the production system. The first one is assembly cost 
(CA). Assembly cost will be different since the assembly tasks in the factory are 
changed. The second one is inventory cost (CI) which includes holding cost and order 
cost. As mentioned in assumption, if an enterprise wants to produce products using 
modules, the modules are ordered from suppliers. Therefore, enterprise will increase 
the holding cost and order cost on modules. Oppositely, the holding cost and order 
cost for parts might decrease. The third one is other cost (CO) which includes 
production lines rearrangement, labor training and so on. The total cost is formulated 
as: 
TC=CA+CI+CO   
 
3.5.1 Assembly cost 
Assembly cost is a measurement to evaluate the ease of assembling a part (Eng et. 
al, 1999). The cost is based on several parameters, which include the degree of 
freedom, the number of free faces, manipulability rating, etc. The higher the assembly 
cost indicates the difficulty in the corresponding assembly operation. In this study, the 
assembly cost (CA) can be decomposed to two parts. The first is the assembly cost for 
parts and the second is the assembly cost for modules. Therefore, CA can be further 
formulated as: 
∑ ∑ ∑ ⎟⎟⎠
⎞
⎜⎜⎝
⎛ ×⎟⎟⎠
⎞
⎜⎜⎝
⎛ ×+×=
kall
k
iall jall
kjkjkikiA qnACMmACPC
   
,,,,                    
where 
ACPi,k: the unit assembly cost of part i for product k; 
ACMj,k: the unit assembly cost of module j for product k; 
mi,k: the amount of part i for product k; 
nj,k: the amount of module j for product k; 
qk: the annual demand of for product k. 
 
 
 19
Therefore, the CI can be further formulated as: 
∑∑ ⎟⎟⎠
⎞
⎜⎜⎝
⎛ ×+×+⎟⎟⎠
⎞
⎜⎜⎝
⎛ ×+×=
jall
j
j
j
j
j
iall
i
i
i
i
i
I SQ
D
H
Q
S
Q
DHQC
  22
                        
where 
Di: the annual demand of part i for all products; 
Dj: the annual demand of module j for all products; 
Hi: the holding cost of part i for all products; 
Hj: the holding cost of module j for all products; 
Qi: the order quantity of part i for all products; 
Qj: the order quantity of module j for all products; 
Si: the order cost of part i for all products (per order); 
Sj: the order cost of module j for all products (per order). 
The annual holding cost of inventory H is multiplied by the average number of 
units in inventory. Since the model assumes that inventory is depleted at a constant 
rate, the average number of units is equal to Q/2. The total orders cost per year is S 
multiplied by the number of orders per year, which is equal to the annual demand 
divided by the number of orders, or D/Q. We can represent holding cost, order cost 
and inventory cost with order quantity diagrammatically as Figure 10 (Stevenson, 
William J., 2005). Typically, the optimal order quantity can de derived as: 
H
DSQ 2= . 
                                                 
 
Figure 10 The cost curve of order quantity. 
 
3.5.3 Cost model 
As mentioned in the last section, the common module mining procedure will 
generate more than one common module if different minimum similarity degree (α ) 
and minimum support (min_sup) are specified. That is, a project may not produce 
products using only one common module. 
The objective in this study is to minimize the total cost TC and is formulated as 
 21
 
Figure 11 Thirty product structures. 
 
4.2 Product clustering  
In the proposed clustering common module mining method, minimum similarity 
value (α) and minimum support (γ) might dramatically affect the mining result. 
Therefore, in order to understand how the variations of α and γ will affect the result, a 
set of experiments are conducted. Due to structural similarity should be higher, α is 
set as greater than 0.5. γ is set between 0 and 1 in order to get all modules. 
According to above setting, we get six product clusters. First cluster includes 
product X1, X3 and X5. Second cluster includes X2, X4 and X8. Third cluster 
includes X9 and X24. Fourth cluster includes X11, X18 and X30. Fifth cluster 
includes X10, X12, X14, X15, X17, X19, X20, X21, X23, X25, X26, X27 and X29. 
Sixth cluster includes X22 and X28. The result of clustering is shown in Table 1.  
 23
Figure 12 Assembly module model in the first cluster. 
 
4.4 Cost analysis 
When α is 1 and min_sup is 0.9, the assembly cost of each project, and the 
inventory cost of each project can be evaluated. Figure 13 shows the assembly cost, 
the inventory cost, the other cost, and the total cost for each project. Note that when 
the enterprise does not purchase any common module to produce product, the 
assembly cost is 13,956,505, the inventory cost is 1,310,672 and the other cost is 0. 
Therefore, the total of conducting no project is 15,267,177. When the enterprise 
adopts the project 31 to produce products, the total cost is the smallest, 13,531,972. 
That means that the enterprise adopts the common modules, {I, J, K}, {B, E, F} and 
{M, L} to produce products.  
 25
In the proposed system, different combination of minimum similarity value (α) 
and the minimum support (min_sup) can be adjusted to find appropriate common 
module according to enterprises’ need. The minimum similarity value (α) represents 
quantity similarity of the same children nodes between two SLTs, while the minimum 
support (min_sup) represents the threshold of frequent common module. If users want 
to know which modules are frequent common modules, user can set higher min_sup.  
Enterprises can benefit from this framework to cluster similar products and find 
common modules from ever-increase number of part. These common modules can be 
quickly assembled into different variant products. The framework can help 
manufacturer to use similar production process to generate similar products, so that 
manufacturer can reduce production time and cost in manufacturing and assembly. 
The designer can reuse common modules to create new products flexibly thus 
reducing design time and cost. Manager can understand common modules and feature 
of variant products and decide differentiation marketing strategy to offer customers 
more choices of products. 
 
6. Reference 
1. Agrawal, R. and Srikant, R. (1994), “Fast Algorithm for Mining Association Rules 
in Large Databases,” Proceeding of the 20th International Conference on Very 
Large Data Bases, pp. 487-499. 
2. Blecker,T., Friedrich, G., Kaluza, B., Abdelkafi, N. and Kreutler, G. (2005), 
“Product Modularity in Mass Customization,” Integrated Series in Information 
Systems 7(3), pp. 163-179. 
3. Gonzalez-Zugasti, J.P. and Otto, K.N. (2000), “Platform-based spacecraft design: 
A formulation and implementation procedure,” IEEE Aerospace Conference 
Proceedings 1, pp. 455-463.  
4. Graedel, T. E. and Allenby, B. R. (1995), Industrial ecology, Englewood Cliffs, 
NJ: Prentice Hall. 
5. Gu, P. and Slevinsky, M. (2003), “Mechanical bus for modular product design,” 
CIRP Annals - Manufacturing Technology 52 (1), pp. 113-116.  
6. Gu, P. and Sosale, S. (1999), “Product Modularization for Life Cycle 
Engineering,” Robotics and Computer-Integrated Manufacturing 15 (5), pp. 
387-401. 
7. He, D.W. and Kusiak, A. (1997), “Design of Assembly Systems for Modular 
Products,” IEEE Transactions on Robotics and Automation 13 (5), pp. 646-655.  
8. Hillstrom, L. (2006), “Economic Order Quantity Law & Legal Definition,” Online 
Available at:USLEGAL, http://definitions.uslegal.com/e/economic-order-quantity/. 
 27
design for reconfigurable manufacturing,” Journal of Intelligent Manufacturing 13 
(4), pp. 309-316. 
 29
本研究第一年計畫發展出一個以SLT (Single-Level Tree)結構為基礎之多樣
產品共同性模組探勘系統。此系統已經在2008年 IEEE International Conference on 
System, Man, and Cybernetics Conference 發表(詳細資料如下所示)。第二年計畫
提出以成本分析為基礎之共同模組探勘方法和第三年計劃所提出以共同性模組
為基礎之多樣產品分群和簡化產品組裝過程方法，已經在整理準備當中，預計將
在明年可發表一到二篇的SCI國際期刊，將研究成果與學術界先進分享。  
1. Tsai, Chieh-Yuan and Chen, Chih-Jung, “A common module mining method for 
variant products,” Proceedings of the 2008 IEEE International Conference on 
Systems, Man, and Cybernetics (SMC 2008), Singapore, October 12-15, 2008. 
[EI] 
 
z 主要發現或其他有關價值等 
本研究成果最主要是以SLT (Single-Level Tree)結構為基礎的概念，從多樣產
品結構中探勘出共同性模組。並且利用產品之間的SLT相似性來衡量產品結構相
似性，進而將多樣產品分成產品群並利用共同性模組簡化產品群內的組裝過程。
此想法與發展在產品結構領域中是一種新穎的做法。 
         
A common module mining method for variant 
products 
 
 
Chieh-Yuan Tsai* and Chih-Jung Chen 
Department of Industrial Engineering and Management 
Yuan Ze University  
Chungli City, Taoyuan County, TAIWAN, R.O.C. 
 e-mail*: cytsai@staturn.yzu.edu.tw 
 
 
Abstract—It is obvious that product variation and 
customization have become the current trend to fulfill the 
customer requirements in severe competitive environment. 
However, how to manage the ever-increasing number of variant 
products becomes a critical challenge for enterprises. To address 
this problem, this research proposes a common module mining 
method to derive common modules from variant products. First, 
each product is decomposed into a set of single-level trees (SLTs). 
Then, SLT similarities in any pair of SLTs in the product 
database are derived. Finally, a mining algorithm is developed to 
generate common modules. A set of experiments are conducted to 
show the feasibility of the proposed method. These common 
modules are found so that similar production and maintain 
approaches can be applied. The result shows that the proposed 
method is a valuable tool to manage massive variant products. 
Keywords—Variant products, Modularity, Single-level tree 
(SLT), Data mining 
I.  INTRODUCTION 
Product variation and customization is the 
differentiation strategy that an enterprise often 
adopts in current market-oriented manufacturing 
environment. Although variant products have 
become the key factor for enterprises to survive in 
the global market competitions, how to mange the 
ever-increasing number of variant products becomes 
a thorny challenge for enterprises. 
To balance the issues of variant products and 
economic production scale, most companies 
develop their own modularity management strategy. 
Modularity management is a component 
generalization process of decomposing all products 
into various components, and grouping these 
components as general-level components. The 
general-level components are then considered as 
common module components since they occur 
frequently in products. Through such a module 
generalization process, the number of different parts 
can be reduced. It makes product designers can 
flexibly create new products and manufacturing 
engineers product new products efficiently. 
Previous researches in modularity management 
mainly focused on design for modular. That is, 
modularity functions are designed at the beginning 
of product design stage based on functional 
requirements and parameters. Although this 
approach can systematically decompose parts and 
summarize possible modules, such method might be 
time-consuming and highly related to engineer’s 
experience. Moreover, not all enterprises adopt 
design for modular strategy when they first initial 
their product development. It is worth while to 
develop a systematic approach to help them to 
summarize possible modules (or common parts) 
from their large existed products. 
To fulfill the above requirements, this research 
proposes a common module mining method for 
variant products. The proposed method consists of 
three main steps. The first step is to decompose each 
product into a set of single-level tree (SLTs). All 
SLTs in a product can be extracted by starting from 
the root node of a product structure and traveling 
the branches in the structure with the 
breadth-first-search way. The second step is to 
evaluate the similarity in any pair of SLTs. Finally, a 
common module mining algorithm is developed to 
generate common modules from variant products. 
Through such common module mining method, 
enterprises can quickly find possible module (or 
common parts) from a large number of products. 
II. MODULAR PRODUCT DESIGN 
Modular design is the design technique that can be 
used to develop complex products using similar 
components [1]. Modular design can be viewed as 
         
unique path from the root node Root(T) to node v. 
The level of T is the maximum among the levels of 
all nodes v∈V. Node v∈V is said to be the parent of 
node Vw∈ , denoted by Parent(w), if  (v,w)∈E 
and, in such a case, node w is said to be a child of 
node v. The children of node Vv∈  are the set of 
nodes VW ⊆  denoted by Children(v) such that 
(v,w)∈E for all w∈W. A node having no children is 
said to be a leaf node. Besides, the content 
information of node v is denoted v.content, the 
quantity of v.content is denoted as v.quantity. 
Therefore, the all information of a SLT can be got as 
root, parent, children, content and quantity. For 
example, the as shown in Figure 1, the root node of 
SLT(1) can be obtained  by Root(SLT(1)) = 
“node1”, Children(Root(SLT(1))) will be “node 2” 
and “node 3”, Root(SLT(1)).content will be “X”. 
 
X 
 
B(2)
 
C
 
D(3)
 
E
 
E(2)
 
F(2)
 
E(2)
 
level
0
1
2
3
X 
 
B(2)
 
C
 
D(3)
 
E
 
E(2)
 
F(2)
 
E(2)
 
B
 
C
 
D
 
)1(SLT )2(SLT )3(SLT )4(SLT
node 1 node 2 node 3 node 7
node 1
node 2 node 3
node 4 node 5
node 8
node 6 node 7
node 2 node 3 node 4 node 5 node 6 node 7
node 8
Figure 1. Four single-level trees from the product structure tree 
B. SLT Similarity Measurement 
In this study, a common module is defined as a 
frequent tree structure consisting of several SLTs in 
variant product structures. When two product 
structures both contain similar (or the same) SLTs, 
the two products might have similar (or the same) 
module. In this study, we adopt two step similarity 
evaluation strategies. First, the component diverse 
number in two SLTs is evaluated. If the number of 
the diverse content in the children nodes in two 
SLTs is little, the similarity in two SLTs should be 
high. Let component diverse number (CDN(i,j)) 
evaluates the number of diverse content in the 
children nodes in Children(Root(SLT(i))) and 
Children(Root(SLT(j))), and can be shown as:  
CDN(i,j) = MN(i,j) - SN(i,j)  (1) 
where MN(i,j)  be 
Max(|Children(Root(SLT(i)))|,|Children(Root(SLT(j)
))|) and SN(i,j) is the number of the same content in 
Children(Root(SLT(i))) and Children(Root(SLT(j))). 
Second, the quantity of the same contents in the 
children nodes in two SLTs must be considered. Let 
quantity similarity value of the same contents in 
Children(Root(SLT(i))) and Children(Root(SLT(j))) 
be defined as:  
),(
),(1),(
jiTQSC
jiTDQjiQSV −=  (2) 
where ),( jiTQSC  is the total quantity of the same 
contents in Children(Root(SLT(i))) and 
Children(Root(SLT(j))) and ),( jiTDQ  is quantity 
difference in the same contents in 
Children(Root(SLT(i))) and Children(Root(SLT(j))).  
C. Common Module Mining Algorithm 
Let { }NS ,...1=  be the set of all SLTs decomposed 
from all product structures where N is the total 
number of SLTs. Let α represent the minimum 
similarity degree in SLT(i) and SLT(j), β represent 
the minimum component diverse number and γ 
represent the minimum support, which are all 
decided by users depending on their needs. Figure 2 
shows the pseudo-code of the proposed common 
module mining algorithm. The S, α, β and γ is the 
input to the algorithm and get sets of }|{ SiFi ∈  and 
}|{ SiDCi ∈  as the output, where }|{ SiFi ∈  be the set 
of common components and }|{ SiDCi ∈  be the set 
of diverse components. The algorithm first 
calculates component diverse number CDN(i,j) and 
quantity similarity value QSV(i,j) for each pair of 
SLTs, as in (1) and (2), as shown in lines 1-9. If 
component diverse number CDN(i,j) is smaller than 
or equal to β and QSV(i,j) is greater than or equal to 
α, j will be storesd in SS(i,j). Notes that SS(i,j) is a 
matrix that stores the number j of SLT(j). Otherwise, 
the similarity in the two SLTs is not high enough 
and will not be further discussed. Each row in SS 
         
represented common component of all SLTs in 
transaction t. 
Apriori (Ti , γ) 
1. { 
2.   k= 1 
3.   {}{ }γσ ×≥Λ∈= NiIiiFk )(  
4.    repeat 
5.      k = k +1  
6.      Ck=apriori-gen(Fk-1) 
7.      for each transaction Tt ∈ { 
8.        Ct = subset(Ck, t) 
9.        for each candidate itemset 
tCc∈ { 
10.          ( ) ( ) 1+= cc σσ  
11.        } 
12.      } 
13.      { }{ }γσ ×≥Λ∈= NcCccF kk )(  
14.    until  Fk =φ  
15.    return Random(Fk-1) 
16. } 
Figure 3.  The modified pseudo-code of the Apriori algorithm 
IV. IMPLEMENTATION AND EXPERIMENTAL RESULTS 
A simulation experiment is conducted to understand 
the effects of the proposed a common module 
mining method for variant products. The proposed 
method is implemented on a PC using Visual 
Basic.Net language with 3.0G CPU and 1.5G 
memory. 
A. A Set of Product Structures 
Thirty product structures are used to demonstrate 
the feasibility of the proposed a common module 
mining method. The thirty product structures, X1 to 
X30, are visually illustrated in Figure 4.  All SLTs 
in the thirty product structures can be extracted by 
starting from the root node of a product structure 
and traveling the branches in the structure with the 
breadth-first-search way. Therefore, we have totally 
125 SLTs. 
B. The Parameter Settings 
In the proposed common module mining method, 
minimum quantity similarity value (α), minimum 
component diverse number (β) and minimum 
support (γ) might dramatically affect the mining 
result. Therefore, in order to understand how the 
variations of α, β and γ will affect the result, a set of 
experiments are conducted. Due to structural 
similarity should be higher, α is set as greater than 
0.6. On the other hand, if β is higher than 3, there 
will be no common module. Therefore, β should be 
less than or equal to 3. In addition, when γ is 0.1 to 
0.3, the same mining result is the same. However, if 
γ is higher than 0.5, there will be no common 
module generated.  
X2
T
VNM
X1
ED
CBA
RT
JV
X3
M
ED
IBA C
X8
R
X7
D FE
MA L B
X6
DE
I CA
X4
A
K
ZN
R
MM
RT
JNV
X5
T
Y
X10
RT
VM J
X
ED
A BM L
F
Q
X9
KT R
Z
ED
A BC
O
X29
VM N
P
A IBC
D E RT
H
X30
NV M
P
M JNV
T R T R
...
 
Figure 4. Thirty product structures 
Tables I summarizes the common modules among 
thirty product structures, using minimum quantity 
similarity value (α) as 0.6~1 and minimum 
component diverse number (β) as 1~3 and minimum 
support (γ) as 0.3. We can get the eleven common 
modules from M1 to M11. In each module, the gray 
nodes represent common components whereas the 
white nodes represent diverse components that can 
be added. When β is 2, the part when node L and M 
are assembled together to M9 will be the same as 
the part when nodes L and M are assembled 
together to M11. In addition, the part when node C 
is assembled to M2 or the part when node B is 
assembled to M5 is the same as the part when nodes 
C and I are assembled together to M11. Similarly, 
the parts generated from M4 and M6 can also be 
found from M10. It is clear that M11 and M10 are 
         
time and cost. Manager can understand common 
module and feature of variant products and decide 
differentiation marketing strategy to offer customers 
more choices of products. 
The proposed method can successfully find 
common modules from variant products, we can use 
these common modules to explore product family 
and make this study more valuable. Product family 
is a group of products which share common form 
features, functions and components. Future work 
can focus on how to generate product family using 
the proposed algorithm. 
REFERENCES 
[1] A.K. Kamrani and S.M. Salhieh, “Product Design for Modularity,” 
Springer; 2nd ed. Edition, 2002. 
[2] G. Pahl and W. Beitz, “Engineering Design: a Systematic Approach,” 
Springer; 2nd ed. Corr. 2nd printing edition, 1996. 
[3] D.W. He and A. Kusiak, “Design of Assembly Systems for Modular 
Products,” IEEE Transactions on Robotics and Automation, vol. 13, pp. 
646-655, 1997. 
[4] P. Gu and S. Sosale, “Product Modularization for Life Cycle 
Engineering,” Robotics and Computer Integrated Manufacturing, vol.15, 
pp.387-401, 1999. 
[5] J.P. Gonzalez-Zugasti and K.N. Otto, “Platform-based spacecraft design: 
A formulation and implementation procedure,” IEEE Aerospace 
Conference Proceedings, vol. 1, pp. 455-463, 2000. 
[6] R. Sanchez, “Fitting together a modular approach,” IEEE Manufacturing 
Engineer, vol. 81, pp. 216-218, 2002. 
[7] A. Ericsson and G. Erixon, “Controlling design variants: modular 
product platforms,” Society of Manufacturing Engineers, 1999. 
[8] J.K. Gershenson, G.J. Prasad and S. Allamneni, ”Modular Product 
Design: A Life-Cycle View,” Society for Design and Process Science 
Printed in the United States of America, vol. 3, pp. 13-26, 1999. 
[9] A.S. Yigit and A.G. Ulsoy, Allahverdi, A., “Optimizing modular product 
design for reconfigurable manufacturing,” Journal of Intelligent 
Manufacturing, vol. 13, pp. 309-316, 2002. 
[10] Z. Xu and M. Liang, “Concurrent Optimization of Product Module 
Selection and Assembly Line Configuration: A Multi-Objective 
Approach, Journal of Manufacturing Science and Engineering,” 
Transactions of the ASME, vol. 127, pp. 875-884, 2005. 
[11] C.J. Romanowski and R. Nagi, “On Comparing Bills of Materials: A 
Similarity/ Distance Measure for Unordered Trees,” IEEE Transactions 
on Systems, Man, and Cybernetics Part A: Systems and Humans. vol. 35, 
pp. 249-260, 2005. 
[12] R. Agrawal and R. Srikant, “Fast algorithms for mining association 
rules”, International Coference on the Very Large data Bases, pp. 
487-499, 1994. 
