1 
 
行政院國家科學委員會補助專題研究計畫 ■ 成 果 報 告   □期中進度報告 
 
（計畫名稱） 
以硬體解決 Malfatti 問題 
 
計畫類別：■ 個別型計畫  □ 整合型計畫 
計畫編號：NSC 99－ 2221  － E － 031 － 003  － 
執行期間： 2010 年 8 月 1 日至 2011 年 7 月 31 日 
 
計畫主持人：江 清 水 
共同主持人： 
計畫參與人員： 謝一婷、許耀坤、吳欲致、廖冠智、陳勁宏 
 
成果報告類型(依經費核定清單規定繳交)：■精簡報告  □完整報告 
 
本成果報告包括以下應繳交之附件： 
□赴國外出差或研習心得報告一份(附件一) 
□赴大陸地區出差或研習心得報告一份 
□出席國際學術會議心得報告及發表之論文各一份（附件二） 
□國際合作研究計畫國外研究報告書一份 
 
處理方式：除產學合作研究計畫、提升產業技術及人才培育研究計畫、
列管計畫及下列情形者外，得立即公開查詢 
          □涉及專利或其他智慧財產權，□一年□二年後可公開查詢 
          
執行單位: 東吳大學資訊管理系 
中   華   民   國  2011   年    月     日 
3 
Abstract 
 
Malfatti’s problem, first published in 1803, is commonly understood to ask fitting three circles 
into a given triangle such that they are tangent to each other, externally, and such that each circle 
is tangent to a pair of the triangle’s sides.  There are many solutions based on geometric 
constructions, as well as generalizations in which the triangle sides are assumed to be circle arcs.  
A generalization that asks to fit six circles into the triangle, tangent to each other and to the 
triangle sides, has been considered a good example of a problem that requires sophisticated 
numerical iteration to solve by computer.  We analyze this problem and show how to solve it 
quickly. 
Keywords:  Malfatti’s problem, circle packing, geometric constraint solving, GPU 
programming. 
 
CoAuthors: Christoph M. Hoffmann, and Paul Rosen, Purdue University, West Lafayette, IN, 
USA 
 
5 
            
Figure 2: The Generalized Malfatti Problem 
In this paper, we revisit these two problems and solve them efficiently – without the need for 
homotopy continuation – but not without iteration. Section 2 reviews some definitions and 
concepts, Section 3 deals with the classical case of fitting three circles.  Two direct solutions are 
given, one using the GPU to solve equation systems, the other using classical formulae.  We 
develop an inverse approach as well and introduce an angle-clamping method that allows us to 
change two angles of the triangle while keeping the third one fixed. Section 4 considers the 
six-circle generalization.  Here, we derive a direct solution for isosceles triangles, requiring no 
iteration first.  Then, we develop an inverse method that solves the six-circle problem efficiently.  
Section 5 discusses the implementation of the various methods and the speeds that we have 
measured.  Section 6 concludes with some thoughts on the problems and on GPU-based 
approaches to solving them. 
Our problem is related to the circle-packing problem [7] that asks, in its basic form, to place a 
number of circles (externally) tangent to each other such that a particular topology is realized.  
The topology is expressed by a graph whose vertices represent the circles and whose edges 
represent tangencies between them.  Variations of the problem include that circles could overlap 
and that a cycle of tangent circles winds multiply around an interior circle.  A solution of this 
circle-packing problem is a radius assignment to the graph vertices such that the tangencies are as 
required and the vertices of the resulting graph embedding are centers of circles with the assigned 
radii.  The problem can be considered in non-Euclidean geometry as well. 
In this paper, we require no multiple coverings and consider only Euclidean geometry.  The 
graph K of [7] is then the central net considered in Section 4.2.  Stephenson’s algorithm 
iteratively solves the circle packing problem for arbitrary graphs using iteration.  The conditions 
that express whether a particular radius assignment solves the packing problem are formulated by 
angle constraints on the triangles in the embedded graph.  This leads to a general iterative 
method for the packing problem that has been demonstrated to pack large numbers of circles.  
The performance, however, has only been reported as estimate of the number of floating point 
operations.  Such estimates do not account for latency and memory transfers that can adversely 
impact performance, especially when considering GPU implementations. 
The angle conditions underlying Stephenson’s algorithm elegantly solve the packing problem in 
multiple geometries.  We believe that they can be modified, in principle, so as to express 
tangency conditions to the sides of a given triangle.  See also Figure 13.  It remains to be seen 
7 
the circle 1, with a negative u1, is tangent to the sides b and c, as required, but its center lies 
outside the triangle.  Circle 3 is tangent to sides b and a, but it intersects the side c.  We 
conclude that the solution(s) of interest require positive uk . 
 
 
Figure 4: A solution in which u1 is negative and the other variables are positive.  Circle 1 is tangent to the (extended) sides b 
and c.  The intersection of circle 3 with side c of the triangle is not an error, since the equations only require tangency with sides 
a and b.  Similarly, circle 1 intersects side a. 
The derivation of the three quadratic equations describing the eight solutions is best understood 
from Figure 5; see also [18].  The circles with radius r1 and r2 touch side c and touch each other.  
The length of side c is the sum , which can be expressed as 
.  We substitute , where k = 1, 2, 3, and 
obtain the equation system 
 
 
 
 
Figure 5:  Length equation for side c.  The circle centers lie on the (red) angle bisectors. 
Since all angles in a proper triangle are less than 180o, the half angles cannot exceed 90o and 
therefore the coefficients of the quadratic terms are all positive.  The type of the conic depends 
on the discriminant of the quadratic terms which is, for the third equation, 
.  The half angles have to be large for the cotangent to be small, 
but the sum of the two half angles is less than 90o in a proper triangle. Since  
9 
lengths of the central triangle are  
	
	
 
Equivalently, we have: 
	
	
 
Thus, the central triangle uniquely determines three circles that are pairwise tangent from the 
outside.  Given the central triangle, we can construct the outer tangents, so defining the 
containing triangle.  The angle  between the common exterior tangent and the center line is 
given by  
 
 
Figure 6: Angle between tangent and center line. 
φ is positive when r2 > r1.  See Figure 6. 
To construct the exterior tangent from the radii partitioning the sides of the central triangle, erect 
the segments with lengths r1 and r2 at the angle 90−, tilting away from the larger radius vertex.  
The endpoints of those segments then define the outer triangle sides, Figure 7.  The details are 
routine. 
 
Figure 7:  Constructing the triangle from the central triangle. 
The implementation of the inverse three-circle construction is simple.  The central triangle can 
be manipulated interactively and the problem solution, including rendering, requires less than 5 
sec. 
3.4. Angle Locking 
Recall that a solution for a similar triangle can be scaled trivially to the required size.  If we fix 
11 
4. Scale the resulting triangle to the size of the original triangle. 
Let the angles of the triangle be  and  and note that C1 and C2 are congruent and symmetrically 
placed. 
         
Figure 10: Isosceles case – construction of the lower three circles. 
Two equations for the circle C12 express that the circle center is on the y-axis, at (0,−m), and that 
it is tangent to circle C13, and to a line parallel to the x-axis at distance m+r12 below: 
	
 
The equations for C1 have to account for the fact that the sides are not parallel to the y-axis, so 
that the length of the scaled triangle side c is unknown.  The quantity n is the distance between 
the contact points of C1 and C13 on (the extended) side b.  Thus, the line parallel to the x-axis 
and tangent to C1 from below is 
 
The length of the new side c is unknown.  It is determined by 
 
and the tangency between C1 and C12 is stipulated by 
 
The final equation system is then 
	
	
	
 
We eliminate n and obtain 3 equations in the variables  : 
	
13 
 
Figure 12:  Inverse construction, unconstrained. 
In these unconstrained operations, interactive manipulation does not determine an enclosing 
triangle directly.  To accomplish that, when dragging vertex Ck, we will adjust the three circles 
that are only indirectly affected and are shown in blue in Figure 12.  The idea is to vary the radii 
of those circles, while holding the red circles fixed, so that the angles between the corresponding 
external tangents become zero.  Note that, by fixing the red circles, we have fixed the angle .  
The other two angles of the enclosing triangle depend on the outcome of the radius adjustments. 
A brute-force iteration to obtain the enclosing triangle would be to sample the three blue radii and 
measure the angle discrepancies.  For the three circles touching side c of the outer triangle the 
problem is illustrated by Figure 13.  Note that the distances u and v are given by  
and .  Moreover, for the tangents to match, the distance between U and V must be 
.  Thus, for an interactive operation we can maintain an enclosure by 
sampling the blue radii to pixel accuracy and testing whether the tangents match.  The condition 
can be put in terms of angles: 
 
 
Figure 13: Common tangent condition. 
where  is the angle between the two lines connecting the circle centers.  Alternatively, we could 
measure the distance  and require it to be equal to . 
We reduce the search space utilizing the bisector between circle and tangent.  In the following, 
assume that k=3, and consider adjusting the radii.  By fixing the three red circles we fix two 
15 
three-circle configuration.  The angle-locking routine of Subsection 3.4 is used for this purpose 
on the top three circles.  At any position of C3 we adjust the remaining radii, r1, r12, r2, using the 
iteration of Subsection 4.2 to obtain a triangle enclosure as already described.  See also Figure 
15. 
 
Figure 15:  Angle locking for the top three circles.  In this example  = 57o. 
As illustrated, we construct the tangent to C13 and C23, shown in blue.  The intersection with the 
tangent to C13 and C3, and with the tangent to C23 and C3 defines two of the vertices of the 
triangle in which to solve the three-circle problem. The tangent to C13 and C23 defines a secant of 
the circum circle of the triangle, as shown.  Vertex C3 is then clamped to this circle.  Vertex C3 
is repositioned on the arc.  Using the direct solution of the three-circle problem, we determine 
the three radii r3, r13, r23, from which the top triangle in the central net is constructed.  Then, the 
inverse method for the six-circle configuration is used to complete the larger triangle. 
When moving C3, say, the angle variation of the six-circle enclosure, that is, of the angles  and , 
is greater than it would be if we could clamp the base line c of the six-circle enclosure.  To keep 
the length of side c of the larger triangle fixed, a scaling step has to be added.  The details are 
routine. 
5. Implementation	and	Results	
The performance measurements quoted here were obtained on a PC running Windows Vista 
(32-bit) with the following configuration: Intel Xeon X5460 CPU at 3.16GHz, 4GB main 
memory, and an nVidia GeForce GTX 285 graphics card driving a display with 2560x1600 pixels.  
The program was implemented in C++ and was run in release mode alongside routine 
applications such as Outlook and Word.  The performance is summarized in the table using 
frames-per-second (fps) as performance measure.  Measurements are taken by averaging the 
actual fps over the period of about 1 second. 
Classical Malfatti – Three Circles 
        GPU method  direct  Section 3.1  225‐230 fps 
        CPU only  direct  Section 3.2  2300‐2400 fps 
        Angle lock  direct  Section 3.4  1150‐1250 fps 
Generalized Malfatti – Six Circles 
        Isosceles case  direct  Section 4.1  200+ fps (est.) 
17 
6. Discussion	
We began our investigation with the intention to further explore the utility of GPU 
implementations in constraint solving, the subject of [5,6].  There, GPU implementations have 
simplified enormously the previously known algebraic methods for variable-radius circle 
constructions, both in sequential as well as in simultaneous settings.  Key to that success has 
been the simplicity with which the graph of the Euclidean distance function of various shape 
elements can be constructed.  More complicated, the problems of [6] require configuration space 
surfaces that have considerable algebraic complexity, yet their geometry permits simple 
algorithms for faceting them. 
Our conclusion is that the utility of the GPU approach depends in large measure on the number 
and structure of the equations.  Roughly speaking, the ideal case is characterized by three 
equations that define surfaces that are easy to tessellate and to render.  Conic cylinders derived 
for the classical Malfatti problem are especially simple to facet since the tessellation is essentially 
two-dimensional.  Another requirement, for an attractive GPU-based solution, is that the 
solutions of interest, represented by the intersection of the surfaces, are exposed from above or 
below, thus allowing their identification using the depth buffer hardware setting.  This is indeed 
the case for the method of Subsection 3.1, since only the positive octant needs to be rendered.  
Moreover, considering the high-degree univariate polynomial proposed in [18], whose roots 
would be needed to solve the equations articulated there algebraically, we would strongly 
advocate the GPU approach over algebraic root finding.  However, the geometric solutions in 
the literature, such as Malfatti’s original formulae given in [17], have such simplicity that a GPU 
approach for the classical Malfatti problem is rather cumbersome.  So, the classical, three-circle 
problem is not a good argument for a GPU-based implementation. 
The six-circle generalization is another matter.  Only for the isosceles case do we have a 
GPU-ready system of equations at this time.  The general case has not yielded a comparable 
system so far.  The value of our solution with the inverse method is that, in principle, the 
concept of a two stage solution in which 
1) three circles are determined using the classical problem and  
2) the configuration is completed by determining the remaining radii separately,  
should permit an equation system for the second step that lends itself to a GPU-based 
implementation.  Short of having found such a system, we chose an iteration instead to complete 
the solution.  Even with GPU-ready equations, ours would still remain an inverse solution since 
the circles determine the triangle, not the other way around. 
The angle-locking computation justifies our claim to have a complete solution of the six-circle 
problem.  As the chosen corner is moved on the clamped arc, the other two angles of the 
enclosing triangle can be read out in real time, and since they monotonically depend on the 
direction of motion, we can easily find the solution of the generalized problem after scaling.  All 
this can be done very fast with our implementation. 
As mentioned before, Stephenson’s algorithm is more general than our work and can solve 
problems with hundreds of circles to be packed with prescribed topology, but not at the speeds we 
19 
16. J. Owen. Algebraic solution for geometry from dimensional constraints. In SMA’91: Proceedings of 
the first ACM symposium on Solid modeling Foundations and CAD/CAM applications, 397–407, 
New York 1991. ACM, ACM Press. 
17. M. Stefanović. “Triangel centers associated with the Malfatti circles.” Forum Geometricorum 3, 
83-93, 2003. 
18. Wolfram MathWorld. “Malfatti Circles,” http://mathworld.wolfram.com/MalfattiCircles.html  
 
2 
出席國際研討會心得報告 
 
出席人員:東吳大學資訊管理系 江清水 
研討會名稱:The International Conference on Computing and Security 
研討會日期:2011/7/8-11 
研討會地點: Ulaanbaatar, Mongolia 
 
研討會報告內容: 
The International Conference on Computing and Security, ICCS)是由台北科技大學和
蒙古大學(National University of Mongolia)合辦的研討會。研討會探討Cloud Computing, 
Information security in Internet, Fault Tolerant Computing, Biometrics 
technologies, Biometrics Performance Evaluation 和 Biometrics Applications.  
 
研討會總共四天，本人任 Session C 的 Chair 以外，並發表一篇文章。本人所主持的 session
發表了六篇論文，除了本人的一篇論文外，其他五篇論文的題目是: 
1. Migrating Java Threads with Fuzzy Control on Asymmetric Multicore Systems for 
Better Energy Delay Product by Hsin-Ching Sun, Bor-Yeh Shen, Wuu Yang and 
Jenq-Kuen Lee.  
2. A Memory-efficient Packet Classifier for Network Security Appliances by 
Sheng-Hsu Cho, Chen-Mou Cheng and Sheng-De Wang. 
3. An Omnipresent Personal Health Management System by Wei Chen, Don-Lin Yang, 
Ming-Chuan Hung and Jungpin Wu. 
4. A Visual Context-Awareness System for Computer Room Classes-an Automatic 
Roll-Call System by Jiann-Shu Lee and Seng-Fong Lin 
5. Cloud of Knowledge Management Systems Planning and Design by Yann-Jong Hwang, 
Hui-Yi Ho and Kun-Hung Ma. 
 
本人所發表的文章名稱是”Simulation of Autonomous Vehicle Behavior in Non-Lane 
Environment”，主要內容是探討自主性控制車輛在無車到高速公路上的行為模式，同時與
有車道的狀況做比較。 被接受的 acceptance letter 請見附件一，詳細的論文內容請看附件二。 
 
本人曾蒙國科會補助餐與多次的國外研討會，曾經參與歐、美相關的研討會，大部分出席
的較少有台灣的學者，這是第一次餐與蒙古的研討會，參與者有不少的國內學者，學校遍
及國內各大專院校，包括台大、清大、中山、台科大等大學。主辦學校台科大與蒙古大學
兩校原本就有不錯的合作關係，這種跨校的國際交流，同時吸引其他國家的學者一起參與，
值得鼓勵。 
 
另外，研討會的進行都是單一 Session 進行，每個 Session 兩個小時，有六篇論文報告，
因此每一篇論文有二十分鐘。會議場地除了少數幾個座位外，無電源插頭。如果主講者的
4 
 
附件一  
本人論文被接受發表
之大會證明文件
6 
 
 
 
附件二  
本人發表於 ICCS＇11
之論文
8 
that of humans, road safety will be enhanced. 
Coupled with the maturity of Global Positioning 
System (GPS) technology, the road may not need a 
solid road marking. Through its intelligent computer 
calculations, the car can sense the location, speed, 
direction, and other information of other adjacent 
cars. The routes and speed of the vehicles can be 
planned, thereby reducing journey time and 
increasing driving efficiency. A series of transport 
revolution can be expected. 
But whether it is a simulation of the animation or 
research and development of unmanned vehicle in 
practice, the most vehicles driven still retain the old 
framework. That is, lane planning on the highway is 
still being done, while less is done to break the 
stereotypes and eliminate the complexity of human 
mode of thinking. Under the circumstances of 
non-lane planning, the autopilot can flexibly adjust 
the speed and direction. Therefore, this research will 
take the simulation of the vehicle autonomy in the 
field of computer animation as the main research 
direction, to simulate the highway driving 
conditions of unmanned vehicles under non-lane 
planning. We refer to the past scholars’ [5] [8] 
method, to establish an unmanned autonomous 
vehicle motion model of 360° self-sensitivity. To 
change the distance to the adjacent cars to the 
distance of front and rear and the distance of left 
and right, the car before and after the vehicle 
acceleration and deceleration determine the weight 
of the vehicle’s forward movement (called forward 
component), while the car at left and right 
determine the direction of the vehicle to adjust the 
weight of the vehicle’s side movement (or so called 
left/right components). These two components 
generate a new direction and speed of the vehicle. 
Finally, the experiments verified the comparison of 
vehicle driving in traffic lanes and the non-traffic 
lanes. The non-traffic lane has the feasibility of 
increasing the speed as well as increasing the 
highway traffic loading. 
In the next section, we illustrate the known traffic 
literature and describe group simulation research 
related to this study. Section 3 describes roughly the 
vehicle motion model of the real driver’s behavior, 
which is designed on a basis of a lane planning. 
Section 4 is an unmanned autonomous vehicle 
motion model design that describes the basic design 
of environment within the simulation system and 
the technology applied in vehicle movement. 
Section 5 explains the experimental results after a 
comparison of simulations with a lane and without a 
lane. The final part describes our conclusions and 
future development. 
II. Related Researches 
A. The Traffic Related Literature 
The purpose of this study is to simulate unmanned 
vehicles driving on the highway without lane 
planning and compare that to lane planning, to 
assess whether it can increase the speed and traffic 
flow. So, to assess the speed and traffic flow, it is 
necessary to find a basis for assessment from the 
known traffic flow literature and establish 
appropriately in the environment of the virtual road 
the same scenario and conditions as the basis of 
experiments. 
From the report of Ministry of Transportation and 
Communication (MOTC) and  Mr. Lin Greu-Shii 
research reports [1] [2] on the characteristics of the 
traffic flow operation, describes how the driver and 
the vehicle under the interactions of factors of the 
different road and environment results in the 
formation of traffic. Therefore, we refer to the 
literature [1] [2] as basis, to define the three 
parameters of road traffic volume, road average 
speed, and the number of vehicles per unit length 
for description, described as follows: 
1) The Road Traffic Volume: Road traffic volume 
refers to the number of vehicles passing through a 
particular place in a certain period of time. The 
commonly used unit is vehicles/hour. 
2) The Road Average Speed: The distance a 
vehicle moved per unit of time; namely, the mean 
value of the speeds for all vehicles passing through a 
particular location in a certain period of time. The 
commonly used unit is km/hour. The calculation 
method is to find the speed of each car and then 
determine the average. The equation is shown 
below: 
The road average speed = )1...(..............................
n
t
d
i i

 
Where d is the distance traveled through a 
10 
III. The	Vehicle	Motion	Model	that	
Simulates	the	Behavior	of	the	Real	
Driver	
This section describes the two models proposed by 
Treiber et al. in the field of traffic simulation. The 
first model, known as IDM (Intelligent Driver 
Model) [11], calculates the vehicle acceleration and 
deceleration, to improve driving safety. The second 
model simulates the vehicle changing lanes, known 
as the MOBIL model (Minimizing Overall Braking 
Induced by Lane Change) [3]. The purpose of these 
two models is to accurately simulate the driving 
behavior of the real driver driving on the highway. 
IDM simulates the acceleration and deceleration 
behavior of the rear vehicle following the front 
vehicle in the movement of the vehicles. The 
equation and parameters are indicated as follows 
[11]: 
)4........(..............................).........
2
(
)3....(..............................].........)()(1[
0
*
2
*
0
ab
vvTvss
s
s
v
va
dt
dv
ii
i
i
ii

 
 
Where v0 is the expected speed of vehicles, the 
vehicle will usually move slower than this speed. 
With s0 as the smallest vehicle spacing between 
vehicles, the vehicle spacing is defined as the 
distance between the tail of the front car and the 
nose of the rear vehicle. The equation si(t) 
xi+1(t)xi(t)length of vehicle, is the vehicle spacing 
between vehicle i (the rear vehicle) and vehicle i1 
(the front vehicle). T is the driver’s reaction time in 
emergency situations. That is, when the vehicle is at 
the speed of vi, viT is the distance the vehicle moved 
when the driver recovers the senses during an 
emergency situation. Δvi(t)  vi+1(t)vi(t) is the 
speed difference between vehicle i and the vehicle 
in front; a is the maximum acceleration; b(b>0) is 
the expected deceleration; and δ is the acceleration 
index parameter greater than 0. The s* in equation 
(4) is the driver’s expected vehicle spacing obtained 
from judgment based on the current situation (the 
speed difference between the vehicle and the 
vehicle in front). The value of this variable is to 
avoid the vehicle collision. The main purpose of the 
equation (3) is to calculate the new acceleration of 
i-th vehicle dvi/dt, which is between ∞ and a, that 
is∞≦[1(vi/v0)δ(s*/si)2]≦1. Noting the (vi/v0)δ  
range from 0 to 1, when its value is 1, that is, vi v0, 
the speed has reached maximum speed, and we 
expect the new acceleration to be negative a(s*/si)2. 
In this paper, we call both acceleration and 
deceleration the acceleration, depending on the 
positive and negative values determining whether to 
accelerate or decelerate. Now consider (s*/si)2. 
When the vehicle spacing (si) between the vehicle 
and the vehicle in front is much larger than the safe 
distance (s*), (s*/si)2 will be a very small number, so 
there is little effect on the calculation of 
acceleration. When the vehicle spacing (si) between 
the vehicle and the vehicle in front is equal to the 
safe distance (s*), the acceleration will be a(vi/v0)δ, 
the value is negative and thus decelerate. When the 
vehicle spacing (si) between the vehicle and the 
vehicle in front is less than the safe distance (s*), 
that is, when the vehicle gradually hits the vehicle 
in front, (s*/si)2 will be more than 0. The 
acceleration we have calculated is a large negative 
value; therefore, the vehicle needs to rapidly slow 
down. 
To simulate vehicles changing lanes, the MOBIL 
model needs to meet two criteria [3]: Incentive 
criterion and Safety criterion. For example: a 
potential new target lane is attractive, and the 
vehicle lane changing can be safely performed. The 
equation and parameters are as follows: 
)6.........(....................)~~(~
)5(.............................~
follower oldfollower newdriver
thoonncc
safen
aaaaapaa
.............................................ba



 
The ac is the current acceleration of the vehicle c 
wishing to change lanes; an is the current 
acceleration of the vehicle n that was on the new 
target lane following vehicle c; ao is the acceleration 
of the vehicle o following the vehicle c on the 
current lane; ãc, ãn, ão are the expected accelerations 
of each vehicle through the calculation by the IDM 
equation (3) (4) after the lane change of the vehicle 
c; bsafe is the maximum safety deceleration value; 
Δath is the threshold value for the lane change; and 
p is the politeness factor. The larger the p factor, the 
more driving courtesy the driver has. Equation (5) is 
the safety criterion. Assuming the vehicle c changed 
12 
 
Figure 1.  The simulation screen of the system 
Assuming that the highway road traffic volume is 
set to x (No. of vehicles/hour), indicating about 
(x/3600) (No. of vehicles/sec) entering, the 
simulation time is (dt) seconds/time, so each time 
(x/3600)dt (No. of vehicles/time) vehicles should 
be entering. We set up a TH(x/3600)dt (No. of 
vehicles/time) value to control the vehicle access. 
When the random number taken each time is r≦TH, 
then the vehicles are allowed to enter the lane. And 
the total number of vehicles entering the simulation 
is expected to be close to the setting value of x. In 
the simulation process, we calculate the number of 
vehicles that should enter now (called nin), deduct 
the number of vehicles that has entered, and use an 
N value to record if too many vehicles have entered 
(nin is negative) or too few (nin is positive). When 
too many vehicles are entering (nin < N), the entry 
of vehicles is banned (no matter what random 
number r we have taken); and when the number of 
vehicles entering is too few (nin > N), more vehicles 
are forced to enter. 
C. The Autonomous Vehicle Motion Model 
This study mainly simulates the behavior of 
unmanned autonomous vehicles traveling on the 
highway under non-lane planning. All vehicles can 
automatically control their direction, thus ruling out 
the complexity of mode of human thinking and the 
need to definitely follow restrictions on the 
driveway. We refer to the method of the individual 
models by Reynolds [5] and Couzin [8] and change 
the distance to nearby vehicles to the front-rear and 
left-right distance. By judging the vehicles in front 
or at the rear, acceleration or deceleration as the 
component for the vehicle to move forward (called 
forward component) is determined, and by the 
vehicles on the left or right as the component, the 
side direction of the vehicle (called side component) 
is decided. These two components generate a new 
direction and speed of the vehicle. 
Figure 2 sets the autonomous vehicle model to 
360° sensing range for this study. The red rectangle 
in the figure represents a virtual vehicle, while the 
blue region represents the sensing range. The size of 
the sensing range is mainly determined by the 
sensing width and length. We set the sensing width 
to twice the width of the vehicle, and the sensing 
length to three times the length of the vehicle. We 
assume that all detection of the sensors is correct all 
the time.  
 
Figure 2.  The autonomous vehicle sensing range chart 
We divided the sensing range of the autonomous 
vehicle into 4 areas (as shown in Figure 3): the front 
area, the rear area, the left area, and the right area. 
The width of the front and rear areas is the width of 
the sensing range, and the length is: (the sensing 
length the length of the vehicle)/2; the width of 
the left and right areas is: (the sensing width  
width of the vehicle)/2. The length is the length of 
the vehicle. 
 
Figure 3.  The sensing range area map 
D. Forward Component Value 
Assuming the current speed of the vehicle is X0, we 
expect to accelerate (decelerate) in t seconds the 
speed to X. According to the basic laws of motion, 
we can by X X0at calculate the acceleration a 
and the speed for the next simulation time, Xnext  
14 
time was 1.5 minutes), as each experiment was 
conducted 10 times. In this experiment, a detection 
point was set at the end of the 10 km road, with the 
goal of obtaining statistics on the number of 
vehicles passing through this detection point and 
computing the road average speed. Table II sets up a 
common environment for these two systems. 
TABLE II.  THE SIMULATION ENVIRONMENT PARAMETER SETTING TABLE 
Environment setting items Setting value 
Road length 10 km 
Road width 10 m 
Vehicle width 4 m 
Vehicle length 6 m 
Expected speed 120 km/hr 
Interval for each computing 0.025 s 
Simulation time for each computing (dt) 0.25 s 
Entering lane buffer value N 3 
 
Figure 4 and Figure 5 are the experimental results. 
The number of vehicles passing through the 
detection point is shown in Figure 4, and the road 
average speed in Figure 5 is the mean value of the 
experiment conducted 10 times. In Figure 4, we 
found that the number of vehicles passing through 
the detection point has a linear growth as the road 
traffic volume increases and growth in the non-lane 
model is faster. So, the gap in the number of 
vehicles passing the detection point between the 
non-lane planning and the lane planning increased 
with the increase of road traffic volume. In Figure 5, 
regarding the road average speed, the non-lane 
simulation system has remained higher than that of 
lane planning. And the greater the traffic, the greater 
is the difference of road average speed between the 
non-lane system and the lane planning system. 
Therefore, based on the experimental results, we 
proved that unmanned autonomous vehicle driving 
in the non-lane planning can shorten the time course 
of traffic and increase traffic efficiency. 
 
 
Figure 4.  The number of vehicles passing through the detection point vs. 
road traffic volume 
 
 
Figure 5.  The road average speed vs. road traffic volume 
VI. Conclusions	and	Future	
Development	
To compare the non-lane simulation system and the 
lane planning simulation system by experiments, 
the number of vehicles passing through the 
detection point set at 10 kilometers at the end of 
road in the non-lane system is greater than that in 
the lane planning, and the same is applied to the 
road average speed, which verified the feasibility of 
unmanned autonomous vehicles to increase the 
speed and improve the highway traffic under the 
non-lane planning. The experimental lane planning 
is designed as the dual-lane. If the lanes are 
extended to three or four times, or the journey 
distance is increased and compared to the non-lane 
simulation system, we believe that the results will 
show that the non-lane planning will still be better 
than the lane planning. 
The incomplete simulation scene built by this 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/12/16
國科會補助計畫
計畫名稱: 以硬體解決Malfatti問題
計畫主持人: 江清水
計畫編號: 99-2221-E-031-003- 學門領域: 計算機圖學
無研發成果推廣資料
其他成果 
(無法以量化表達之
成果如辦理學術活
動、獲得獎項、重要
國際合作、研究成果
國際影響力及其他
協助產業技術發展
之 具 體 效 益 事 項
等，請以文字敘述填
列。) 
此研究與國外學者 Purdue University 的 Prof. Christoph Hoffmann 和其博士班
學生 Paul Rosen 一起研究，屬國際合作的一部分。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
