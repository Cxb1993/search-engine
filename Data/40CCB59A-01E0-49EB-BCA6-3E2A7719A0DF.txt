使用可程式化邏輯陣列實現時域有限差分法 
摘要 
我們利用 FPGA 來縮短 FDTD 的運算時間，首先設計 FPGA 專注在 FDTD 的運算；並透過時脈分配
設計成管線化，縮短指令的運算時間；再搭配 Block RAM 雙埠及高速的特性減少 FDTD 處理資料讀取
的時間；最後再加入平行運算到設計中；綜合以上各項方法可以使速度明顯提升。數值表示方法是使用 
IEEE-754  32 bit 的單精確度浮點數的規格。 
結果顯示，即使在沒有平行處理的情況下，將 FPGA 設計在 100 MHz 的工作頻率，在 1D FDTD 的結
果中，運算速度約是一般 2.01 GHz 個人電腦的 30 倍；在 2D FDTD 的結果大約是 15 倍，當 FPGA 跟
一般個人電腦工作在相同的頻率下，FPGA 的速度可以一般個人電腦的數百倍。最後在 1D FDTD 中加入
兩組平行運算處理後，在使用兩組平行運算處理後，計算速度大約可以增加為兩倍。 
 
Abstract 
We use FPGA to reduce FDTD computation time. First, FPGA is designed to dedicate to FDTD calculation. 
Second, pipelining is achieved by means of clock arrangement to reduce computation time of instruction. Third, 
data access time is reduced by handling recursive calculation and temporary value with high-speed dual-port 
Block RAM. Finally, parallelism is added into design. Combining the strength above, the computation is greatly 
speeded up. The numerical representation complies with the IEEE-754 32 bit single-precision floating-point 
specification. 
Our results show that the computation speed of 1D FDTD simulation is 30 times faster than that of an ordinary 
2.01 GHz personal computer when FPGA operated at clock rate of 100 MHz, and 15 times faster for 2D FDTD 
simulation even without parallelism. Equivalently, it can be hundreds times faster at the same clock rate. Finally, 
computation speed is doubled approximately by using two parallel computation units for 1D FDTD simulation.  
 
Keywords: 時域有限差分法、可程式化邏輯閘陣列、電磁與光電模擬、硬體計算、特用架構、管線
化、平行處理。 
Keywords: Finite-difference time-domain method (FDTD), field programmable gate array (FPGA), 
electromagnetic and optoelectronic modeling, hardware computing, specific hardware, pipelining, 
parallel computing. 
 
 
前言 
FPGA 簡介 
FPGA 的全名是 Field Programmable Gate Array 由具有 Lookup Table為基本單元的可組態邏輯區塊 
(CLB) 及開關陣列所組成，基本規劃為 SRAM 的架構，具有可重複程式規劃的優點。以硬體描述語言所
完成的電路設計，可以經過簡單的合成與佈局，燒錄至FPGA 上進行測試，是現代 IC 設計驗證的技術主
流。本文採用的是 XC3S1500 的 FPGA。與電腦相較，運用FPGA做計算具有三大優點： 
一、資源集中。電腦的軟硬體是多用途的設計，資源分散，於計算上常伴有多餘動作，效率低；但FPGA 
的計算則是專注在計算並最佳化，可以非常有效率執行。 
二、平行運算。FDTD非常適合平行運算，但是以電腦的架構，必須多個CPU或多部電腦才可做到；反觀一 
顆FPGA上就可有多個乘法器同時運算，可輕易達到平行計算。 
三、管線化。在FPGA上可藉由時脈的分配，達到管線化：利用這設計，一組輸入進入管線的同時，可以
得到另一組已完成運算的結果，其速度又可大幅提升。上述三種效果相乘，FPGA可以在低時脈達到
數十倍於電腦的計算速度。 
 
研究方法 
設計流程 
首先請參考設計流程圖1，一開始先做初始化的動作，初始化的動作包括決定電場的來源是點波源或者是 
一個穩定的電磁場、設定空間及時間的參數及各項係數，接著將初始化的設定值預先寫入到來源  
Block RAM 中。 
 
 
以 1D FDTD 為例，在圖6中， FPGA 開始計算 H 時 會先讀取來源 Block RAM 上的資料，跟 Previous H 
以及 Tmp E Block RAM 上的資料運算後將結果寫到 Output H 和 Tmp H 的 Block RAM 中，這樣算完成
一個 H 的週期計算，之後計算 E 時再從 Tmp H 的 Block RAM 中讀回所需要的值，跟 Previous E Block 
RAM 上的資料運算後將結果寫到 Output E 和 Tmp E  的 Block RAM 中，這樣算完成一個 E 的週期計
算，如此不斷的重複算，直到所有的格點做完運算為止。最後再經由傳輸介面將結果輸出做分析。 
在設計的過程中，首先利用 Xilinx 所提供的 IP 產生器，產生可相容於 IEEE-754 標準規格的浮點數
減法器、加法器和乘法器，並將其嵌入到 FDTD 中，同時使用管線化設計的設計如圖7，將 FDTD 方程式
中所需的各種運算串接在一起。  
 
圖4: 1D Initial field 圖5: 1D Point Source  
 
 
圖6: 記憶體配置 圖7: 1D FDTD Pipelining Design   
 
              
圖8: TM case, 黑色圓點表示 Ez, 箭
頭朝上的是 Hy, 箭頭朝右的是 Hx 
圖9: 有初始場值的系統，紅色圓點
表示已有電場存在的位置 
 
結果 
比較 1D FDTD 的運算效能時請參考圖 12，當 FPGA 設定在 10 MHz 的工作頻率，執行效率約為 Matlab 
程式的三倍，若將 FPGA 往上提升到 20 MHz 的工作頻率，效率會變為 6 倍，再將 FPGA 的工作頻率慢
慢往上提升，本實驗板可支援至 100 MHz，就會有 30 倍的效果。 
在 2D FDTD 時，將 FPGA 往上提升到 100 MHz 的工作頻率，也有 15 倍的效果產生，如圖 13。 
以 1D FDTD 為例，若將 FPGA 的工作頻率提升到 PC 的 2G MHz ；將可以加速 600 倍，這是未加平行
處理的結果，在加入 2 個平行處理後，速度可以提升 2 倍，就可以輕易地達到 1000 倍以上的效果。 
  
圖12: 1D FDTD, Time Step=50 的執行速度
比較圖, FPGA=10 MHz, AMD 2.01G 1.5GB RAM
圖13: 2D FDTD, Time Step=50 的執行速度比
較圖, FPGA=10 MHz, AMD 2.01G 1.5GB RAM  
 
結論 
FPGA 不像一般電腦是多用途的設計，資源分散，計算上常有多餘動作導致效率低。FPGA 可以完全專
注在計算方面，所以可以非常有效率地執行 FDTD 的計算，並將一個複雜的運算分解, 藉由時脈的分配
及輸入的控制，達到管線化的設計，並利用 Block RAM 雙埠及高速的特性縮短記憶體存取的時間, 最後
在 1D FDTD 中加入兩組平行運算處理後，約可以再減少一半的計算時間。 
FPGA 可以完全專注在計算方面，所以可以非常有效率地執行 FDTD 的計算，藉由時脈的分配及輸入
的控制，達到管線化的設計，並利用 Block RAM 雙埠及高速的特性縮短記憶體存取的時間， 
即使在沒有平行處理的情況下，也可以使其加乘效果可以達到相同時脈時，FPGA 的計算速度是一般
個人電腦的數百倍。使用 IEEE-754 單精確度浮點數的數值表示法，使系統能在精確度與成本上取得一
個平衡點。並加入 SPI 的輸入介面及透過 VGA 輸出介面將結果讀出分析，完成 FDTD 的模擬系統。短
期而言，可以加速本實驗室電磁模擬之速度，增加研究的成效；長期而言，對於產業的發展也會有正面
的助益。 
參考文獻 
[1] A. Taflove and S. C. Hagness, Computational Electrodynamics: The Finite-Difference Time-Domain 
Method, 3rd ed., Boston: Artech House, 2005.  
[2] Xilinx,Inc.,http://www.xilinx.com. 
[3] W. Chen, P. Kosmas, M. Leeser, and C. Rappaport, “An FPGA implementation of the two dimensional 
finite-difference dime-domain (FDTD) algorithm,” 12th, ACM/SIGDA International Symposium on 
Field-Programmable Gate Arrays (FPGA), 2004 
[4] H. Suzuki, Y. Takagi, R. Yamaguchi and S. Uebayashi, “FPGA implementation of FDTD algorithm,”              
IEEE, Microwave Conf. Proc. APMC.  Vol.5, pp.1-4, 2005. 
