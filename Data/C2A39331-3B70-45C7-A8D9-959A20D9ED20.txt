  
2
一、中文摘要： 
    虛擬化技術是解決電腦硬體快速發展所導致資訊設備嚴重閒置情況的最佳選擇，虛擬化技術也是
產業界及開放原始碼社群最夯的領域，從 Kernel-based Virtual Machine、VirtualBox、及 Linux 
container 等開放原始碼虛擬機器不斷地推陳出新即為明證。新發表的虛擬機器不僅提供新的功能也
提高虛擬機器的執行效能，對使用 User-mode Linux 虛擬機器執行平行計算的虛擬叢集而言，將效能
較低的 UML 虛擬機器以較高效能的 KVM 虛擬機器取代，是提升虛擬叢集效能及真實主機 throuput 最
有效的方法。對系統管理者而言，重新安裝高效能虛擬機器固然簡單，然而對一般使用者而言，重新
安裝所需軟體及設定執行環境，無疑是一大難題。因此，如何將現有之虛擬機器執行環境移轉到新的
高效能虛擬機器上，是提升虛擬叢集效能最關鍵的課題。 
    一般而言，Linux 虛擬機器由 Linux kernel、root filesystem、及 virtual machine utilities
所構成；其中 Linux kernel 及 virtual machine utilities 由開放原始碼社群負責維護，而 root 
filesystem 則由使用者建立與管理。因此，如何將原虛擬機器之檔案系統在保留使用者軟體設定的
前提下順利地移轉到新虛擬機器上，是更換高效能虛擬機器以提升虛擬叢集效能最重要的技術。在本
計畫中，我們先驗証虛擬機器移轉的可行性，再針對 paravirtualization 的 UML 與 Xen 及 full 
virtualization 的 KVM 等幾種常見的開放原始碼虛擬機器，分析比較其檔案系統的目錄架構與所安
裝的套件，以及 Master Boot Record 內容的差異，開發虛擬機器自動移轉工具，以期在兼顧使用者
的便利及管理者的效率下，藉由更換高效能虛擬機器以提升虛擬平行計算叢集效能，進而達到物盡其
用的目標。 
 
關鍵字：Linux、虛擬化、虛擬叢集、虛擬機器移轉 
 
二、英文摘要： 
    Virtualization has become indispensable to get the most from today’s underutilized computing resources, 
and attracts considerable interests of commerical and open-source community. Open-source offers several 
advantages (such as better flexibility and  functionality, fast feedback, and free) in developing virtualization 
solutions. This can be showed that several open-source virtual machines are anounced one after another (e.g., 
Kernel-based Virtual Machine, VirtualBox, and Linux container, etc.). It is the most effective way to improve 
the performance of virtual cluster by replacing traditional virtual machine (such as UML) with 
higherperformance virtual machine (such as KVM).It is shown that the migration of an UML to either Xen or 
KVM is possible. The migration of the virtual machines takes less effort than installing the host machine and setting up 
the software environment. Therefore, how to smoothly transfer original virtual machines of a virtual cluster to high 
performance virtual machines is the critical technology for improving the performance of virtual cluster. 
 
    In general, a Linux virtual machines consists of Linux kernel, root filesystem, and virtual machine 
utilities. The Linux kernel and virtual machine utilities are mantained by the open-source community, and the 
only role played by users is just to update them periodically. On the other hand, the root filesystems are 
created and maintained by users. In order to transfer the paravirtualization virtual machine to the full 
virtualization virtual machine with unchanged software configuration, we will establish XML native database 
to maintain the directory structure of root filesystem, the list of installed packages, and the content of Master 
Boot Record. Based on the database, we will develop automatic virtual machine transferring tool to migrate 
  
4
功能(如：migration)，我們亦需要在新 (如：KVM)舊(如：UML)虛擬機器軟體間作快速轉換。此外，
由於設備新舊不一，並非所有機器皆有支援硬體虛擬化技術，為了達到虛擬機器的一致性，在較舊設
備上使用 UML，在新設備上使用 KVM 來充分發揮系統資源，我們亦需要在兩者之間的檔案系統
(file-system)作轉換。本計劃之主要目的如下： 
1. 分析 UML 與 KVM 等開放原始碼虛擬機器之檔案系統架構、安裝套件，及 MBR 的開機資訊； 
2. 開發 UML 與 KVM 之檔案系統轉換工具以保留使用者之軟體設定並減輕系統管理者的負擔； 
3. 定義 XML DTD以描述虛擬叢集環境，並作為虛擬叢集環境管理之用； 
4. 實作 KMLN虛擬叢集管理系統； 
5. 以 KVM 取代 UML 之效能實測。 
 
五、相關研究 
    擬化技術依其架構可概分為半虛擬化技術(Paravirtualization)、全虛擬化技術(Full 
Virtualization)、與硬體輔助虛擬化技術(Hardware-assisted Virtualization)。半虛擬化技術提
供了一種軟體介面給予虛擬機器，使得虛擬機器擁有相似但不完全相同的底層裝置。客體系統(Guest 
OS)為了向硬體送出指令，需要中間的軟體溝通媒介 Hypervisor，客體系統從原本直接向硬體傳遞指
令，轉而向 Hypervisor 傳遞 Hypercall，因此需要對客體系統的核心進行修改，所以一些非開放原
始碼的作業系統(如：Windows)則不容易修改。 
    全虛擬化技術正如其名地指的是一種完整模擬底層硬體的虛擬化技術，全虛擬化模擬包括了完整
的指令集、處理器、輸入輸出等週邊設備等環境，因此也被稱作硬體模擬。因為全虛擬化技術模擬了
需要用的硬體裝置，在作業系統的安裝上具有較高的獨立性，因此作為軟體開發測試環境，在跨平台
開發上有相當程度的便利性。而其最大的缺點也在於此，因其模擬了大量硬體裝置，宿主系統(Host OS)
需要花費較多的額外資源進行模擬，介面之間的溝通也需要經過較多層的轉換，因而導致效能較為低
落的現象。 
    硬體輔助虛擬化技術為處理器廠商為了提升虛擬機器的效能在 CPU 內加入了虛擬化相關的指令
集(Instruction Set)，使用硬體輔助虛擬化後，虛擬機器不必透過半虛擬化技術的 Hypercall 或全
虛擬化技術 Binary Translation 即可傳給硬體執行，如此一來大幅增進宿主系統之效能，也使得半
虛擬化或全虛擬化之虛擬機器皆具有高獨立性與高效能，如 AMD的 AMD Virtualization Technology 
(AMD-V)與 Intel 的 Intel® Virtualization Technology (Intel® VT-x)等技術，User Mode Linux 
(UML)：UML 是第一個以 GPL 授權發行的 Linux virtualization 計畫。UML 將 Linux Kernel 移植到
user-space 上，使得這個”修改過的核心”可以當作一般的 Linux process 來執行，當使用 UML 時
如同在使用 Linux 實體機器一般。 
    虛擬叢集由虛擬網路設備連結虛擬機器而成，在 Linux Kernel 2.4.5 版本以後，UML 的網路經
過完整的重製，並且加入了 TUN/TAP、ethertap、slip、與 slirp transports 等功能，使得 UML 的
網路環境變得更方便容易使用。TUN/TAP， ethertap， slip， and slirp transports 等功能使得 UML
得以與宿主系統(host)交換封包。在 Linux 環境中，經常使用 TUN/TAP 當作虛擬網卡，相同的技術
應用在 UML 上，UML 便可直接與宿主系統溝通，或者利用宿主系統當作路由與其他虛擬機器溝通。 
此外，由 uml_switch延伸而來的 Virtual Distributed Ethernet (VDE)專案所支援的軟體較多，且
效能亦優於於 uml_switch。為提供更好的網路環境，KMLN 也提供了 VDE 供使用者選用。KVM 版本
kvm-72[28 jul 2008]以上即原生提供 VDE 功能；而 kernel 2.6.21 版以後亦原生提供 VDE，即 UML
在使用 2.6.21 或更新版本的 kernel時，將 VDE功能編譯即可使用 vde_switch。因此，在本計畫中
  
6
$ sudo kvm -hda boot.img –hdb 
  DebSqz.img -cdrom  
  debian-testing-amd64-netinst.iso 
2. 設定 UML 檔案系統： 
在取得或安裝完成一可開機虛擬硬碟之後，我們必須修改原先 UML 檔案系統設定，因為在
使用 UML 時我們做過一些最佳化設定，必須更改檔案系統內容使其適用於 KVM，因此對檔
案系統做好備份預防萬一。在此我們使用的開機程式為 grub2。 
$ sudo mount -o loop DebSqz-UltraLight.ext3 /mnt/tmp/ 
# Modify fstab 
$ diff /mnt/tmp/etc/fstab /mnt/tmp/etc/fstab.orig 
1a2 
> /dev/ubd0 / ext3 defaults 0 1 
3，4d3 
< /dev/sdb  / ext3 errors=remount-ro 0 1 
< /dev/sda1 /boot ext2 defaults 0 2 
# Remove UML kernel modules. 
$ sudo rm -r /mnt/tmp/lib/modules/2.6.32/ 
$ sudo modprobe nbd max_part=8 
$ sudo kvm-nbd --connect=/dev/nbd0 boot.img 
$ sudo mount /dev/nbd0p1 /mnt/tmp/boot 
$ sudo emacs /mnt/tmp/boot/grub/grub.cfg 
在 grub.cfg 中 set root=’(hd0，1)’指的是開機時 grub 的 root位置，並非檔案系統根目錄，檔案
系統根目錄位置設定在 linux 行中的 root=/dev/sdb。 
3. 安裝核心： 
在此必須注意，安裝的核心版本需與 UML 所用核心相同，以避免軟體因版本相依性而造成
不穩定現象。 
$ sudo chroot /mnt/tmp/ 
# apt-get update 
# apt-get install linux-image-2.6.32-5-amd64 
# apt-get install linux-headers-2.6.32-5-amd64 
# exit 
$ sudo umount /mnt/tmp/boot 
$ sudo umount /mnt/tmp 
$ sudo kvm-nbd --disconnect /dev/nbd0 
$ sudo rmmod nbd 
4. 修改 inittab： 
1：2345：respawn：/sbin/getty 38400 tty1 
5. 測試開機： 
$ sudo kvm -hda boot.img -hdb UML-rfs.ext3 -m 512M 
KVM檔案系統轉換至 UML檔案系統： 
使用 UML 開啟 KVM 檔案系統前，必須先確認其使用的核心版本是否相同，以避免軟體因版本相
依性而造成不穩定現象。由於兩者檔案系統結構不同，我們提供兩種解決方案。 
1. 使用 Network Block Device 技術 
使用這種方式可說是直接使用 UML 開啟 KVM 的分割區(較建議)。使用這種方式開啟，不需做
多餘的轉換，因此風險最低。 
2. 使用 disk dump 將 KVM 的分割區導出 
  
8
skip = Start 
3. 逐一修復檔案系統並重新調整大小： 
$ e2fsck -f KVM-rfsp2.ext3 
# 按一下 n 以進行修復 
$ resize2fs KVM-rfsp2.ext3 
4. 掛載並設定掛載點 
5. 建立 ubd掛載點 
6. 修改 fstab、inittab 
7. 複製 UML modules至檔案系統中 
KMLN 之 KVM 整合環境 
本小節描述 KMLN 如何整合 KVM 虛擬化技術，利用擴充後的系統描述語言來撰寫 script，使
得 KMLN 得以使用 KVM 虛擬化技術來建置虛擬叢集環境。 
KMLN 實作支援 KVM 的主要程式 configure_host_KVM，主要是參照 configure_host_UML修改而
來。去除一些在 KVM 當中不會使用的參數，再加上一些 KVM 特有的參數所構成。在建立專案的過
程中，絕大部分的參數來源都是專案檔案，這也是為什麼專案檔案迫切需要驗證性與嚴謹性的原因。 
KMLN 啟動流程與關閉流程大同小異，經由 start 指令或是 stop 指令加上-p 參數指定專案名稱，
KMLN 到該專案的目錄下解析專案檔案後取得一些基本的資訊來做開機或關機。(專案建立的過程會將
專案檔案複製一份在專案目錄下供往後使用。)解析完專案檔案後 KMLN 便得知有哪些機器需要執行
開啟或關閉，接著依序執行專案目錄下的 script，順序如下： 
開啟順序： 
1. start_${Switch 名稱}.sh 
2. start_${執行優先權}_${機器名稱}.sh 
在此優先權預設為 99，執行順序是由小而大。 
關閉順序(與開啟順序相反) 
1. stop_${執行優先權}_${機器名稱}.sh 
在此優先權預設為 99，執行順序是由小而大。 
2. stop_${Switch 名稱}.sh 
 
七、計畫成果 
自 2006 年 Google 提出雲端運算 (Cloud Computing) 的概念以後，與雲端相關的研究不斷推陳
出新。然而細究其根本為虛擬叢集環境與 API 服務的整合應用。在雲端的包裝之下，使用者已不需與
往常一般管理與維護雲端環境的硬體設備及系統維護，透過雲端提供的 API 即可隨時隨地使用雲端的
設備與資源。基於雲端的概念，延伸出三種服務類型：基礎即服務(Infrastructure as aservice， IaaS)、
平台即服務(Platform as a service， PaaS) 與軟體即服務(Softwareas a service， SaaS)。透過虛擬化技術
來虛擬雲端上的設備，即構成基礎即服務。利用虛擬化的設備建立雲端平台，供軟體開發人員使用，
便構成平台即服務。藉由平台上整合好之雲端軟體資源提供給使用者，使用者不需要擔心顧慮背後的
架構，即可運用雲端上的資源，如雲端儲存設備等，即是軟體即服務。支持這些雲端服務的根本技術
是虛擬化技術，所以若將虛擬化管理軟體(KMLN)加以包裝即可躍上雲端。 
  
10
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。 
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
  達成目標 
□ 未達成目標（請說明，以 100 字為限） 
□ 實驗失敗 
□ 因故實驗中斷 
□ 其他原因 
說明： 
 
 
 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：□已發表 □未發表之文稿 撰寫中 □無 
專利：□已獲得 □申請中 □無 
技轉：□已技轉 □洽談中 □無 
其他：（以 100 字為限） 
 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
    系統管理者的職責在於對系統及套件隨時 update 與 upgrade 以保持系統的穩定與避
免因軟體的漏洞遭致外來的攻擊；然而對使用者而言卻希望盡量減少系統的更動以避免軟
體的重新設定甚至重新安裝。在本計畫中，我們提出 UML 與 KVM 虛擬機器之根檔案系統移
轉的方法，使得原本在 UML 虛擬機器上穩定使用的軟體套件可以不須重新設定或安裝而移
轉到具較高效能的 KVM 虛擬機器上使用，以滿足系統管理者與使用者的需求。 
    雲端運算是一場正在進行中的資訊產業革命，且虛擬化技術乃雲端運算的核心技術。
在本計畫中，我們以 MLN 為基礎使用異質性虛擬化技術與檔案系統移轉技術開發 KMLN 虛
擬叢集管理工具，使用者可依計算的特性便捷地部署異質虛擬叢集環境。應用本計畫之方
法，未來 KMLN 亦能管理新發展之虛擬機器並提供雲端 IaaS及 PaaS 服務。 
 
附件二 
99 年度專題研究計畫研究成果彙整表 
計畫主持人：顏增昌 計畫編號：99-2220-E-005-002- 
計畫名稱：以虛擬機器移轉提升 Linux 虛擬叢集之效能 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 2 2 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
