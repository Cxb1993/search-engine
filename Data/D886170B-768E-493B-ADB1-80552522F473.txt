造成這樣的問題其實其來有自，這裡
面除了管理上是否能落實安全品管與開
發人員經驗是否充足外，從更基礎的技術
層次來看，我們認為系統開發人員與管理
人 員 往 往 受 限 於 現 有 的 程 式 機 制
(programming mechanism)、開發工具與架
構，而無法盡如所願的對各個應用系統進
行徹底的安全防範措施。因為傳統的開發
工具與程式語言也是以滿足縱向的功能
需求為主，欠缺支援像安全需求這樣橫跨
性的功能，使得貫徹安全需求的程式碼必
須散落在系統的各個模組中，與系統功能
面的程式碼糾結(tangled)在一起，不但不
易確認其正確性，也對修改維護上造成相
當大的負擔。 
2. 研究目的 
有鑑於現行程式機制與開發工具無法
有效支援像安全這樣的橫跨性需求，目前
學者專家提出了剖面導向程式設計的構
想 (Aspect-Oriented Programming)[12]，以
有效支援橫跨性需求的發展與整合。AOP
的原則就是軟體工程上著名的關注分離
原則 (Separation of Concerns)，它強調橫
跨性的需求應該與縱向的功能需求有所
區隔，程式開發工具應該要提供不同的模
組機制來分別支援二者，並提供整合機制
將二者的模組整合成完整的程式，其中橫
跨性需求的模組單位稱之為 aspect，整合
的動作則稱為織入(weaving)。 
本計畫根據 aspect-oriented 的原則，採
用 AspectJ 語言為主要工具，研究如何針
對 Web 應用程式的 A&A 需求，發展一套 
可設定式的宣示性存取控管機制與工具 
[15]。以下是我們的研究目地： 
(1) 延續前一年計畫對於應用 AOP 製作
存取控管的研究。 
(2) 將製作存取控管的 aspect 工作簡
化，以程式語言的先關技術發展出
自動合成存取控管 aspects 的工具，
據以建構一可實現宣示性存取控管
的機制。 
(3) 建立測試個案的 Web 系統，評估分
析我們的機制的特性與優缺點。 
 
3. 文獻探討 
因篇幅關係，請參照附錄中我們的論
文 ” An  Aspect-Oriented Approach to 
Declarative Access Control for Web 
Applications”中 Related Work 一節中的相
關說明。 
 
4. 研究方法 
我們以前一年計畫發展出了的剖面導
向安全框架為基礎[3]，將全球資訊網應用
程式在認證與授權方面的安全需求抽離
應用程式模組，制定成數種可重用的
aspect templates, 並為存取控管規則與應
用程式規格檔(application specification)方
式來協助系統安全管理人員與開發人員
來將系統的存取控管需求訂出規格；並且
設計 XML schema，將個別應用程式的存
取控管需求轉化為應用程式的 XML 設定
檔，再透過我們開發的 rule translator 自動
合成出 access control aspects，最後織入應
用程式適當的模組來貫徹存取控管，圖一
揭示我們的可設定式存取控管作法的概
要。 
 
圖一：系統架構與運作方式概要 
依據我們的方法，在應用系統規則需
[6] Fonseca, C.A., Extending JAAS for Class 
Instance-Level Authorization. IBM 
DeveloperWorks, April 2002. 
http://www-106.ibm.com/developerworks/jav
a/library/j-jaas/
[7] Gamma, Helm, Johnson and Vlissides, 
Design Patterns. Addison-Wesley, 1995.   
[8] Goodwin, R., Goh, S.F., and Wu, F.Y., 
Instance-level access control for 
business-to-business electronic commerce, 
IBM System Journal, vol. 41, no. 2, 2002. 
[9] Hilsdale, E. and Hugunin, J., Advice 
Weaving in AspectJ, Proceedings of the 3rd 
International Conference on Aspect-Oriented 
Software Development, Lancaster, 2004, pp. 
26-35. 
[10] JPetstore Demo Application, Shipped with 
the Spring Framework. 
http://www.springframework.org/ 
[11] Kiczales, G., Lamping, J., Menhdhekar, A., 
Maeda, C., Lopes, C., Loingtier, J.-M., and 
Irwin, J., Aspect-Oriented Programming, in 
ECOOP '97, LNCS 1241, pp. 220-242.  
[12] Kiczales, G., Hilsdale, E., Hugunin, J., 
Kersten, M., Palm, J., and Griswold, W.G., 
Getting Started with AspectJ, 
Communications of ACM, vol. 44, no. 10, pp 
59-65, Oct. 2001.  
[13] Lin, C.W., An Aspect-Oriented Approach 
to Fine-Grained Access Control for Web 
Applications, M.S. Thesis, National 
Chengchi University, July, 2005.  
[14] Open Web Application Security Project: 
The Top Ten Most Critical Web Application 
Security Vulnerabilities. 
http://www.owasp.org/documentation/topten
[15] Probst, S. and Kueng, J., The Need for 
Declarative Security Mechanisms, IEEE 
Proceedings of the 30th EUROMICRO 
Conference (EUROMICRO’04), Aug. 2004. 
[16] Sandhu, R., Coyne, E., Feinstein, H., and 
Youman, C., Role-Based Access Control 
Models, IEEE Computer, 29(2):38–47, 1996. 
[17] Sun Microsystems, Java Authentication 
and Authorization Service (JAAS), 
http://java.sun.com/products/jaas/index.jsp 
[18] Sun Microsystem, Java 2 Platform, 
Enterprise Edition (J2EE), 
http://java.sun.com/j2ee/
[19] W.S. Jian et al., The Development of 
Taiwan Electronic Medical Record Template, 
Draft. Templates download : 
http://emr.doh.gov.tw/html/kaisya-annai.html 
 
7. 計畫成果自評 
本計劃的成果包含： 
(1)一套可用來捕捉 Web 應用程式的各種
A&A 常用需求的高階規則描述式與
其 XML schema，可方便安全管理人員
與系統開發人員溝通與制定系統
A&A 安全需求與規則。 
(2)以 AspectJ 語言發展出一組可重用的存
取控管用的 aspect templates，並據以建
構一自動合成完整 aspects 的規則轉譯
工具。 
(3) 測試用 Web applications: JPetstore，以
利進一步評估從我們的機制與工具，
分析其特性與優缺點以及執行效能。 
(4) 我們並擴充存取規則，將像電子病歷
這樣的階層式的資料納入我們的處理
範圍，以 Taiwan Medical Records(TMT) 
[19]為測試對象，建立更具彈性的自動
合成機制與工具。 
 
這些成果已發表於 APWeb 06 國際會
議論文與兩篇碩士論文，在內容上不僅符
合當初計畫所設定的目標，甚至還拓展至
階層式資料的存取控管。 
 An Aspect-Oriented Approach to Declarative Access Control for Web Applications 177 
the difficult cases of data-contents-related access control. For example, in a B2B E-
Commerce site, users from any registered organizations have the privilege to execute 
the “viewOrder” function, but they are allowed to view only orders of their own 
organization. This is called instance-level access control [8]. Furthermore, within a 
data record, certain fields, such as credit card number, may have to be excluded from 
screen view to protect the user’s privacy. We refer to this as attribute-level access 
control. Such fine-grained constraints are beyond the scope of popular declarative 
mechanisms such as JAAS [16][6].    
This paper presents an aspect-oriented approach that can not only address many 
fine-grained access control constraints but also accomplish it in a declarative manner 
without incurring extra runtime overhead. Aspect-oriented programming (AOP) [10] 
uses separate modules, called aspects, to encapsulate system-wide concerns such as 
access control. Our previous work [3] has demonstrated the feasibility of 
implementing fine-grained access control for Struts-based Web applications [1] using 
AspectJ [11]. Here we extend it and devise a translation scheme that will 
automatically synthesize the desired aspect modules from access control rules defined 
in centrally managed XML configuration files using some properly designed aspect 
templates. The generated access control aspect modules will then be compiled and 
integrated into designated functional modules of the underlying application using 
standard aspect tools. At runtime, these aspect codes will be executed like common 
functional codes to enforce the required access control, no runtime interpretation 
overhead incurred. Furthermore, management and maintenance tasks are greatly 
simplified since future changes in access control rules can also be effectively realized 
through these mechanisms without actual coding. In short, our approach can be 
characterized by central management and distributed enforcement. 
The rest of this paper is organized as follows. Section 2 gives a brief introduction 
to AOP and describes related work. Section 3 outlines our approach to declarative 
access control. Section 4 describes our access control rules and aspect templates. 
Section 5 presents the design and implementation of our translation scheme. Section 6 
concludes and sketches future work. 
2   Background and Related Work 
In this section, we highlight the basics of AOP and review the relevant features of 
AspectJ. In addition, we also describe related work. 
2.1   AOP and AspectJ 
In AOP, a program consists of many functional modules, e.g. classes in OOP, and 
some aspects that capture concerns that cross-cut the functional modules, e.g. 
security. The complete program is derived by some novel ways of composing 
functional modules and aspects. This is called weaving in AOP [10]. Weaving results 
in a program where the functional modules impacted by the concern represented by 
the aspect are modified accordingly. In languages such as AspectJ, the weaver tool is 
tightly integrated into the compiler and performs the weaving during compilation.    
 An Aspect-Oriented Approach to Declarative Access Control for Web Applications 179 
a set of predefined relationship, as opposed to our general constraint, is defined for 
each resource type. The major concern is instance-level constraints, no attribute-level 
constraint covered, though. Second, they also adopt an MVC-like architecture for 
Web applications. The controller intercepts all user commands and queries a 
centralized manager to make the authorization decision. Hence there will be some 
runtime interpretation overhead incurred by the manager. Furthermore, they did not 
consider different authentication types and neither did they use AOP in their 
framework.  
3   Overview of Our Approach 
Figure 1 illustrates the system architecture and mechanisms of our approach. We 
worked towards declarative access control for Web applications from two opposite 
ends and managed to meet in the middle. At one end, the objective is to accommodate 
requirements. We use a flexible modeling scheme based on user-function-data 
relationship that can satisfy a wide range of access control requirements of various 
granularity levels, including both instance and attribute levels. A high-level form of 
access control rules is derived from it. At the other end, since access control is a 
system-wide crosscutting concern, we must impose considerable architectural 
disciplines on Web applications to layout a good foundation for enforcing the 
required access control modularly. In particular, we follow the well-accepted Model-
View-Controller (MVC) [7] architectural pattern and adopt the popular Apache Struts 
framework [1] to structure our Web applications.      
 
Fig. 1. System architecture and mechanisms for declarative access control 
Next, we apply AOP to devise a declarative implementation scheme that bridges 
these two ends. We developed our implementation scheme in two stages. In the first 
stage, we did an in-depth analysis of the structures of aspect code that we developed 
 
Struts-based 
Web Application 
B
ro
w
ser 
 
Access control 
Rules in XML  
Access control 
rule translator 
Model 
Action 
class
 
 Access control 
aspect code 
Security  
administrator 
Weaving 
Controller 
View 
Aspect  
templates 
Application 
specification 
Developer 
 An Aspect-Oriented Approach to Declarative Access Control for Web Applications 181 
determine which access tuples are allowed and which must be denied. They are 
derived from the application’s access control requirements. 
In designing the form of our access control rules, we focus on the functionalities of 
an application and specify the access control rules in a function-oriented manner. 
Furthermore, as authentication is required prior to authorization, we also make 
authentication type part of the rule; the type can be id/password (PWD), digital 
certificate (DC), or any other supported methods of user identification. Specifically, 
the access control rules take the following form: 
Rule: <funName, authType,  constraint, [attributeActions]> 
Here funName is the name of a function whose access needs to be restricted, authType 
is the required user authentication type, and the constraint is a Boolean expression 
which must be evaluated to true to grant the attempted access. The attributeActions 
component is optional. When present, it specifies the attribute-level access constraints 
and actions we impose on the designated function. It takes the following form:   
constraint1 Æ action1;   … ;  constraintn Æ actionn 
where constraints are also Boolean expressions and the typical action is field masking, 
mask(specified_attributes). 
Clearly, the more data entities we can refer to in the constraint expression the wider 
the scope of access control requirements we can support. For generic purposes, we 
take an object-based approach to specify the constraints and supply five generic 
objects: User, Form, Data, Cxt, App, with various attributes that the constraint 
expression can refer to. The specific set of attributes for each object depends on 
individual application’s needs. Conceptually, the Form object and the Data object 
serve as the input and output of a function to execute, respectively. Typical attributes 
for the User object include user’s name and roles in an organization. The attributes of 
the Form object include the arguments passed to the protected function, while the 
attributes of the Data object refer to the data fields returned after executing the 
designated function. As will be shown later, the presences of the Data object in a 
constraint expression call for fine-grained access control.   
In addition, the context object (Cxt) provides methods to retrieve the datetime and 
location of any attempted access. This is the most often used contextual information 
for access control. The application object (App) is global to an application and stores 
various parameters related to access control. For example, certain functions are 
accessible only during working days and from specific machines. The definitions of 
working days and designated machine addresses will be the attributes of the App 
object.  
Example: the following is a set of access control constraints and corresponding rules 
for an online shopping system. (“&&” is the and operator, and “||” the or operator.) 
C1: All registered (authenticated) users can create order, but only VIP customers  
           can create orders whose total amount exceed $100,000. 
R1: <createOrder, PWD,  ( lessEq(Form.getAttr(“total”), 100000) 
    || equals(User.getAttr(“VIP”), true) ) > 
C2: Only sales managers authenticated through digital certificates can delete 
orders.  
 An Aspect-Oriented Approach to Declarative Access Control for Web Applications 183 
     protected String getErrorMessage(){ 
          return "Error !! Not enough authority. Access denied"; 
     } 
     protected Collection getCollection 
                         (HttpServletRequest request) 
     {    return (Collection) <collection>    } 
 } 
The rule-specific part of an aspect includes the authentication type, the pointcut 
definitions, the constraint expression to evaluate, and the optional removal of 
unauthorized data contents. Authentication type specifies which authentication 
aspects to use. The choice of pointcuts is crucial to obtaining all the various data 
entities we need to evaluate the access control constraints. As discussed in [3], we 
choose the execute method of user action classes as the targets for access control 
aspect weaving.  
The other rule-specific parts will be generated by the rule translator and put into a 
concrete aspect inheriting from one of the generic aspects described above. Basically, 
the code to be generated is the set of abstract methods declared in the generic aspects. 
To facilitate the translation, we have prepared three aspect templates that will be 
expanded to rule-specific concrete aspects. For example, Listing 1 shows the aspect 
template corresponding to the PostfilterCollection aspect. 
5   Synthesizing Access Control Aspects 
This section describes the design and implementation of our translation scheme for 
synthesizing access control aspects. Due to space limitation, interested readers are 
referred to [12] for the complete schema and examples of synthesized aspect code. 
5.1   XML Schema for Access Control Rules and Application Specification 
The translation tasks are greatly facilitated by an application specification file that 
supplies the definitions of the real entities referenced in the access control rules. We 
now describe the XML schemas for these two input files to our translator.     
5.1.1   Access Control Rules 
In designing the XML schema for specifying the access control rules, we have, as 
much as possible, followed the structure of the rule format described in Section 4.1. A 
major deviation is taking out the authentication type item and grouping all the access 
control rules by it. In other words, all access control rules with the same authen- 
tication type requirement will be grouped together. This is also compliant with security 
practices, for different authentication types imply different security levels. Figure 2 
highlights the structure of the XML schema for specifying the access control rules. 
To distinguish the high-level access control rules specified in Section 4.1 from 
their XML counterparts, we refer to them by abstract rules. Each abstract rule 
corresponds to an EnforcePoint element in our schema. Abstract rules requiring the 
same authentication types are grouped into a composite element called Enforce 
Domain.  
 An Aspect-Oriented Approach to Declarative Access Control for Web Applications 185 
           <DataConstraint>  
        _Library.equals($User.getAtr(“name”), $Data.getAttr(“owner”)) 
           </DataConstraint>  
         </Rule> 
       <Rules>  
       <AttributeAction> 
          <Constraint> true </Constraint> 
          <Action type=”Mask”> 
          <Attributes> 
             <AttributeName>CreditCardNo</AttributeName> 
           <Attributes> 
       </AttributeAction>  
     </EnforcePoint> …    
  <EnforceDomain> 
</AccessControl> 
5.1.2   Application Specifications 
The main purpose of an application specification file is to map the generic objects, 
User, Form, Data, Cxt, and App, and other operations to the real entities in the 
underlying application. Figure 3 outlines the structure of the XML schema for 
application specification files. We group the required mappings into four sections: 
AuthTypeMapping, EnforcePointMapping, AttributeGroupMpping, and 
FunGroupMapping. The AuthTypeMapping handles the binding of the User object, 
which provides user-related attributes for access control purpose. Since different 
authentication types need different user account objects, the mapping of User object is 
associated with the AuthTypeMapping element. The FunGroupMapping specifies the 
bindings for the operations referenced in the constraint expressions through the 
_Library object. 
 
Fig. 3. The partial structure of the XML schema for application specification 
 An Aspect-Oriented Approach to Declarative Access Control for Web Applications 187 
collection requirement is specified in the AttributeGroup element associated with the 
Data object. Once the proper aspect template is selected, the remainder of the work is 
to synthesize constraint evaluation codes based on the binding specifications given in 
the application specification file.  
6   Conclusions and Future Work 
In this paper, we have presented an aspect-oriented approach to declarative access 
control for Struts-based Web applications. Our access control modeling scheme can 
satisfy a wide range of requirements with different granularity. By employing aspect-
oriented technology, we have obtained a highly modular implementation of fine-
grained access control and the aspect code for enforcing access control is 
automatically synthesized. We argue that our scheme has achieved a proper balance 
between expressiveness of access control and runtime efficiency.  
We plan to further explore this line of study along two directions. First, we shall 
extend the Rules element. Currently, each EnforcePoint allows one Rule element 
only. It would be more convenient if the security administrator can specify the 
constraints using multiple rules. This is doable, but will complicate the code 
generation step a little and may have some minor impact on runtime performance. 
Second, we shall extend the aspect template set to cover more sophisticated 
application scenarios. It is conceivable that the three aspect templates cannot handle 
all application scenarios.  
Acknowledgements. This work was supported in part by the National Science 
Council, Taiwan, R.O.C. under grant number NSC-94-2213-E-004-012. 
References 
[1] The Apache Struts Web Application Framework: http://struts.apache.org/ 
[2] Beznosov, K. and Deng, Y., Engineering Application-level Access Control in Distributed 
Systems, in Handbook of Software Engineering and Knowledge Engineering, Vol. 1., 
2002. 
[3] Chen, K. and Huang, C.H., A Practical Aspect Framework for Enforcing Fine-Grained 
Access Control in Web Applications, First Information Security Practice and Experience 
Conference (ISPEC 2005), LNCS 3439, pp. 156-167. 
[4] De Win, B., Piessens, F., Joosen, W. and Verhanneman, T., On the importance of the 
separation-of-concerns principle in secure software engineering, Workshop on the 
Application of Engineering Principles to System Security Design, 2002.  
[5] De Win, B., Vanhaute, B. and De Decker, B., Security Through Aspect-Oriented 
Programming, Advances in Network and Distributed Systems Security, Kluwer Academic, 
pp. 125-138, 2001. 
[6] Fonseca, C.A., Extending JAAS for Class Instance-Level Authorization. IBM 
DeveloperWorks, April 2002. http://www-106.ibm.com/developerworks/java/library/j-
jaas/ 
[7] Gamma, Helm, Johnson and Vlissides, Design Patterns. Addison-Wesley, 1995.   
