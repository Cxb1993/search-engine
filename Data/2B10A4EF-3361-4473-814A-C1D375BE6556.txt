2 
⎩⎨
⎧=
                       0
 1
其他
涵蓋任務表勤務 ij
aij ，  
  其中 FD ,T ∈∈ ji  
jc  可行勤務 j 之成本 
2. 集合涵蓋模式 
∑
∈
×
FD
Min 
j
jj xc  (1) 
s. t. 
T1
FD
∈∀≥×∑
∈
ixa
j
jij  (2)  
{ } FD1 ,0 ∈∀∈ jx j  (3) 
於模式中，式(1)為最小化勤務成本目標式，
即代表以最少成本來滿足所有工作任務；式(2)
為集合涵蓋限制式，即最後求解的所有勤務中，
每個列車任務至少需被涵蓋一次，若限制式(2)
改為等式，則為集合分割模式，即每個列車任務
僅能被一個勤務涵蓋；式(3)為變數限制式， jx 為
二元決策勤務變數，表若最後排班結果包含可行
勤務 j，其值為 1，否則為 0。 
在實務的排班問題中，勤務集合通常相當龐
大，以 100 個任務，每個勤務包含 4 個任務為例，
其勤務組合即高達 6109.3 × ，為一大規模
(Large-scale)的排班問題。目前在此類問題的求
解上，大多以啟發式的架構來求解，方法大致可
分為以下幾類： 
1. 以數學規劃為基礎(MP Based)的變數產生法
(Column Generation)求解架構：為多數研究
所使用的方法。變數產生法是由 Dantzig 與
Wolfe (1960) [4]兩位學者提出，其概念為將
原來的大規模主問題分為受限制主問題與
子問題，然後運用線性規劃的對偶理論將受
限制主問題與子問題串連並求解。而在排班
問題中，主要即先利用人工或其他方法求得
一組涵蓋所有任務的可行勤務(變數)集合，
然後將產生的可行勤務集合加入放鬆的受
限制主問題，藉以求解一組對應每個限制式
的對偶變數向量，接著利用此對偶變數向量
於子問題中尋找對放鬆的受限制主問題目
標有貢獻的新變數，並將其加入放鬆的受限
制主問題中，如此反覆運算至無改善的勤務
為止，所得之解即為放鬆後受限制主問題的
最佳解。最後再檢查所求解出的最佳解是否
為整數解，若是則此解即為該問題的最佳
解，若否則需利用其他方法求解其整數解。 
而在此架構中，受限制主問題主要列式為集
合涵蓋(分割)模式，其最大的差異係在勤務
產生(子問題)的方法。在勤務產生上，以往
多將之轉換為網路模式的型態。即將勤務產
生構建成一考慮公司與法規限制的網路，網
路中的每個節點代表一個工作任務，每條路
徑代表一可行的勤務組合。透過放鬆受限制
主問題所求解出的對偶變數值與最短路徑
演算法，找尋最佳改善的可行勤務集合。相
關研究如 Desrochers and Soumis (1989) [6] 
與 Desrochers et al. (1992) [5]探討加拿大蒙
特婁市(Montreal)的公車人員排班問題；林錦
翌(1995) [18]探討單基地空勤組員排班問
題；湯敦台(1996) [20]探討多基地空勤組員
排班問題；Barnhart et al. (1998) [1]探討長程
航線之空服員排班問題；盧宗成(2000) [21]
探討台北捷運司機員排班問題；Huisman et 
al. (2005) [8]探討多場站之車輛與人員排班
問題。 Mesquita and Paias (2008) [10]探討公
車與人員排班問題。或是將勤務產生問題轉
換為動態規劃模式求解其勤務集合，如
Boschetti et al. (2004) [2] 探討多場站的組員
排班問題。 
2. (巨集)啟發式解法：不同於變數產生法利用
集合涵蓋(分割)模式求解排班問題，啟發式
解法主要在產生一組起始解後，利用不同的
交換改善法來逐步改善目標值，求解近似最
佳的勤務集合。相關研究如 Chu 與 Chan 
(1998) [3]利用三階段啟發式解法求解香港
輕軌組員排班。其中，前兩階段為利用最短
路徑法與最小加權配對法產生勤務集合，第
三階段則將尚未指派的工作任務組合成新
勤務或加入現有勤務中，或是改善現有的勤
務集合；Park and Ryu (2006) [12]則是利用基
因演算法來求解地鐵組員排班問題；
Vaidyanathan et al. (2007) [14]利用連續限制
產生法與二次分成本擾動的兩階段啟發式
求解北美鐵路組員排班問題。 
3. 以限制規劃為基礎(CP Based)的變數產生法
(Column Generation)求解架構：為近幾年發
展的變數產生法求解架構。不同於以往利用
網路模式來產生可行勤務，由於組員的勤務
係在滿足公司與法律規定下的工作任務組
合，其本質為一限制滿足問題，故有學者即
利用求解限制滿足問題的限制規劃法
(Constraint Programming, CP)做為排班問題
的勤務集合模式，且有不錯的結果。相關研
4 
(4) dine_UBj 表該班別最晚開始用餐時間。 
(5) max_rest_timej 表該班別最大休息時間。 
個案的班別分成早班(D)、午班(N)、夜班(M)
與動班(F)四類共 14 種班別。但因動班時間橫跨
中午與晚餐的用餐時間，因此本研究再將動班分
成中午用餐與晚上用餐兩類。測試的 16 種班別
與輸入資料如表 2 與表 3 所示： 
表 2 排班班別資料 
班別 Start End dine_LB
早 A 7:00 15:00 10:00 
早 B 7:30 15:30 10:00 
早 C 6:30 14:30 10:00 
早 D 5:30 13:30 10:00 
早 G 8:00 16:00 10:00 
午 A 14:30 22:30 16:00 
午 B 15:00 23:00 16:00 
午 C 14:00 22:00 16:00 
午 D 15:30 23:30 16:00 
夜 A 22:00 8:00 NA 
夜 B 22:30 8:30 NA 
夜 C 21:30 7:30 NA 
動 A1 11:00 19:00 10:00 
動 A2 11:00 19:00 16:00 
動 B1 11:30 19:30 10:00 
動 B2 11:30 19:30 16:00 
於表 3 中，夜班的最大休息時間不同於其他
班別，主要係由於台北捷運非 24 小時營運，末
班車的結束時間與第一班車的開始時間相差約 3
小時半，因此夜班的最大休息時間必會遠大於其
他班別的休息時間。本研究將夜班最大休息時間
設定為 270 分鍾。 
3. 排班法規資料參數： 
(1) min_rest_time 表最少的休息時間。係指
在兩個非連續的列車任務間，應給
予司機員的最少休息時間。以圖 1
為例，列車 3 與列車 4 為非連續駕
駛的列車任務，因此在這兩任務
間，需給予一定的休息時間。 
(2) min_dine_time 表最少用餐時間。指若班
別橫跨用餐時間，則應給予司機員
的最少用餐時間。 
(3) max_dine_time 表最多用餐時間。 
(4) max_cont_driving_time 表最大可連續
駕車時間。以圖 1 為例，列車 1 與
列車 2 為連續的列車任務，此兩任
務的運行時間總和不得大於最大
可連續駕車時間。 
表 3 排班班別資料(續) 
班別 dine_UP max_rest_time
早 A 13:00 30 
早 B 13:00 30 
早 C 13:00 30 
早 D 13:00 30 
早 G 13:00 30 
午 A 19:00 30 
午 B 19:00 30 
午 C 19:00 30 
午 D 19:00 30 
夜 A NA 270 
夜 B NA 270 
夜 C NA 270 
動 A1 13:00 30 
動 A2 19:00 30 
動 B1 13:00 30 
動 B2 19:00 30 
(5) booking_on_time  表司機員簽到所需
時間。 
(6) booking_off_time 表司機員簽退所需
時間。 
排班法規的輸入資料如下所示： 
(1) min_rest_time = 15。 
(2) min_dine_time = 30。 
(3) max_dine_time = 60。 
(4) max_cont_driving_time = 180。 
(5) booking_on_time = 5。 
(6) booking_off_time = 5。 
2. 2 個案問題目標與限制 
台北捷運司機員排班問題主要在尋求司機
員的成本最小化，且由於每個司機員的薪資均相
同，因此本研究的目標即定義為最小化勤務數，
且每個勤務的成本(Cj)為 1。目標式如下所示： 
∑
∈FD
Min 
j
jx  (4) 
在排班限制方面，可分為時間限制與換班地
點限制兩類，敘述如下： 
1. 時間限制： 
H1:  各班別指派的任務其開始時間需大於
該班別開始時間。 
6 
入集合涵蓋整數規劃模式，求解啟發式
架構的最小勤務集合(任務卡數)整數解
ZI*與 XI*，即完成求解。 
3. 2 勤務產生 CP 模式 
不同於網路模式需先將工作任務轉為時空
網路架構的勤務產生法，限制規劃法提供一直覺
且容易建構限制滿足問題的方法，並藉由智慧型
的搜尋策略快速刪除不可行的解空間，繼而找尋
可行解。本研究的捷運司機員勤務產生模式構建
如下： 
1. 參數說明： 
除第二節的列車、班別與法規參數外，勤務
產生模式尚需其他參數如下： 
Nt  表總列車任務數。 
Depot 表 司 機 員 換 班 地 點 集 合 。
{ }G3 CH, O19, R26, R28,Depot =
，其中 R28 表復興崗站；R26 表北
投站；O19 表南勢角站；CH 表中
和站；G3 表七張站。 
Task 表 列 車 任 務 集 合 。
{ }Nt , 1, K∈Task 。 
dinej  表該班別是否用餐，其定義如下： 
S∈∀
⎩⎨
⎧= jjdine j                     0
  1
其他
有用餐表班別
 
deadhead_num 表勤務中可空載的次數。 
min_total_ in_car_timej 表勤務最少總車上
時間，其中 S∈j 。 
max_total_ in_car_time 表勤務最多總車上
時間。 
Dtrip_time Org, Des 表不同場站間的空載時
間。 
2. 變數與值域： 
Task∈ix  表在勤務 x 中，第 i 個指派的列車
任務，其中 N∈i 。 
N) ,( 1 ∈+ii xxrest  表兩接續任務間的休息時
間。 
N) ,(_ 1 ∈+iii xxTdine  表兩接續任務間的用
餐時間。 
N∈ing_timeCont_drivi  用於記錄第 i 段連續
駕駛時間的變數，其
中 N∈i 。 
N_ ∈DTFin  用於記錄最後工作任務結
束時的空載時間變數。 
N )_ ,Dtrip_time ,OT(
1Org ,Des
∈
+
DTFinTDT
ixixix
 
用於記錄總車上時間的變數，由
每個工作任務的運行時間與空載
時間所組成。 
3. 限制式： 
(1) 用餐與空載啟動限制： 
C1: 用餐啟動限制，即若勤務 x 可用餐，則
勤務需給予一次的用餐時段；若勤務 x
無用餐，則無用餐時段。此限制式定義
如下： 
S N, dine)0( ∈∈∀=>∑ jidine_T j
i
i  
C2: 空載啟動限制，即在勤務 x 中，空載次
數需小於等於設定的可空載次數。此限
制不包含最後任務結束後的空載，限制
式定義如下： 
N
umdeadhead_n)OrgDes(
 taskepenultimat
1
1
∈∀
≤≠∑
= +
i
i
xx ii  
(2) 排班法規限制： 
C3: 對應硬限制 H1，即勤務 x 所指派的任務
其開始時間需大於該班別開始時間加簽
到時間。此限制式定義如下： 
S N,
_timebooking_onstartDept
∈∈∀
+≥
ji
jxi  
C4: 對應硬限制 H2，即勤務 x 所指派的任務
的結束時間加上空載時間需小於該班別
結束時間加簽退時間。此限制式定義如
下： 
S N,
f_timebooking_ofEnd
_Arr
∈∈∀
−
≤+
ji
DTFin
j
xi
 
C5: 對應硬限制 H3、H4、H5 與 H7，休息
與用餐時間限制，共分為兩部份。即若
第 i 個任務的到達時間不等於第 i+1 個
任務的開始時間，則需給予休息時間，
且休息時間需介於最少休息時間與最多
休息時間之間；或是給予用餐時間，且
用餐時間需介於最少用餐時間與最多用
餐時間之間，開始時間需介於可用餐時
8 
2. 求解時間與結果分析 
本研究於 ILOG OPL Studio 3. 7. 1 軟體上撰
寫程式，並於 1.8G Hz 的處理器上求解。模式各
階段的執行時間與結果如表 6 所示。由表中可
知，以 CP 為基礎的變數產生法其求解時間約為
13 分鐘，相較於人工排班約需一星期的時間，
本研究所構建的排班模式可快速的求解司機員
所需執行的勤務集合。 
在總勤務數(即任務卡張數)的結果分析上，
由表 6 亦可知線性規劃模式的最佳解為 56.92，
證明本研究所求解出的 57 個勤務數卻為最佳的
整數解，且少於捷運公司人工所排的 59 個勤
務。證明本研究所構建的模式除可確保解品質
外，亦可實際減少公司營運時所需的司機員數，
即減少司機員僱用成本。 
表 6 變數產生法求解時間表 
產生勤務數 1209 
CP 勤務產生時間(秒) 93.56 
目標值 70.87 起始解 
LP 求解時間 4.5 
總運算回合數 2 
總新增勤務 16544 
目標值 56.92 
變數產
生法架
構 總運算時間(秒) 589.91 
總求解勤務數 17753 
目標值 57 整數 最佳解 
IP 求解時間(秒) 54.2 
總運算時間(秒) 742.17 
就勤務結果在班別的分布上來分析，班別的
勤務數分布如圖 2 所示，在 16 個班別中，本研
究所求解出的勤務僅需 11 個班別即可全部涵
蓋。此結果在下一階段組員輪值問題的換班問題
上則有相當大的助益，因所使用的班別越少，即
代表司機員連續值班日的上班時間與下班時間
越固定，故可減少司機員經常性的換班。 
12
2
0
6
1
0
8
5
7
6
1
7
0 0 0
2
0
2
4
6
8
10
12
14
早
A
早
B
早
C
早
D
早
G
午
A
午
B
午
C
午
D
夜
A
夜
B
夜
C
動
A
1
動
A
2
動
B
1
動
B
2
班別
勤務數
 
圖 2 班別所含勤務數分佈圖 
另外，由於勤務的總車上時數，會直接影響
下一階段組員輪值問題的車上時間公平性，因此
若能求解出駕駛時數差異小的勤務組合，也可進
一步提升最後司機員輪值班表的公平性結果。本
研究勤務的總車上時間結果如表 7 所示，由表中
可知，早班、午班與動班的平均總車上時間均在
330 分鍾以上，其標準差差異亦不大，分別為早
班 16.78 分；午班 17.05 分與動班 2.12 分，意味
就司機員的車上時間來說，會有比較公平的分
配。就夜班而言，其平均車上時間為 294 分，遠
少於其他種班別，探其原因，主要係因夜班所能
涵蓋的列車任務原本即不多，而造成此差異。另
外，雖然夜班勤務的最小與最大車上時間相差
76 分鐘，但在時間的標準差上亦只差 28.69 分，
故在夜班上的車上時間亦可有較公平的分配。 
表 7 勤務結果之總車上時間結果分析表 
勤務平均總車上時間(分) 338.76 
勤務車上時間標準差(分) 16.78 
勤務最小車上時間(分) 315 
早 
班 
勤務最大車上時間(分) 360 
勤務平均總車上時間(分) 332.2 
勤務車上時間標準差(分) 17.05 
勤務最小車上時間(分) 303 
午 
班 
勤務最大車上時間(分) 360 
勤務平均總車上時間(分) 294 
勤務車上時間標準差(分) 28.69 
勤務最小車上時間(分) 250 
夜 
班 
勤務最大車上時間(分) 326 
勤務平均總車上時間(分) 357.5 
勤務車上時間標準差(分) 2.12 
勤務最小車上時間(分) 356 
動 
班 
勤務最大車上時間(分) 359 
由上述結果可之，以 CP 為基礎的變數產生
法不論在求解效率、勤務數、班別分佈與總車上
時間的分配上，均有不錯之結果，可作為實務排
班參考之用。 
五、結論與建議 
本研究以台北捷運為例，構建以 CP 為基礎
的變數產生架構求解捷運司機員排班問題，並以
淡水線與中和線為範例，測試本研究模式。玆整
理相關結論如下： 
1. 模式構建：有別於以往利用網路模式為基礎
的變數產生法，本研究構建以 CP 為基礎的
變數產生法來求解台北捷運司機員排班。相
較於網路模式需建立網路時空架構，利用限
