21. 前言
在網際網路興起之後，各式各樣的網路服務與應用軟體如雨後春筍般的出
現，而因為 Java 本身具有網路的功能，以及跨平台的特性與強固性，讓它成為
最適合用來開發網路相關應用的語言與平台[1,2,5,11,14]。而在企業 e 化的風潮盛
行與 J2EE 推出之後，Java 更是在伺服器應用領域中佔有極重要的地位，許多著
名的伺服器軟體開發廠商，如 IBM、BEA、Oracle 等，都選擇使用 Java 來開發
產品。我們可知，Java 的應用已不僅只侷限在過去的網頁美化的功能而已，現在
更是在企業應用上嶄露頭角。
而在 Java 盛行的同時，另一個問題亦衍然而生，那就是 Java 類別檔的版權
問題[1]。我們知道，Java 可以在網路應用與企業應用領域廣為被使用的一大主
因乃是因為其跨平台性。而 Java 的跨平台性是透過 Java 虛擬機器(Java Virtual
Machine, JVM)與 Java 類別檔(class file)來達成。JVM 負責載入類別檔，然後進行
解譯並執行。Java 類別檔為了減少檔案大小以便於在網路上傳輸，以及可以在各
種平台下都可以執行，因此採用「位元組碼(bytecode)」的格式來存放執行時期
所需的資訊[5,14]。因此為了增加載入的速度與執行的效率，Java 類別檔的格式
是十分簡單。而這也使得對 Java 類別檔進行反編譯的困難度下降，目前有許多
的工具軟體，如 JAD、Mocha 等，都可以將類別檔轉換成為原來的原始碼格式[1]。
而部分的有心人士就可以利用這一點來破壞使用 Java 所開發的軟體，使其能夠
非法使用甚至盜取軟體內的重要元件或是函式庫(library)。這個問題在 Java 日漸
流行的現今，更顯現其嚴重性。因此，如何防範 Java 應用軟體遭到盜用或盜取，
以及如何找出破壞版權之人，是我們的研究動機。
我們的研究目的是希望提出一種新的方法可以在不影響類別檔的執行的情
況下，可以保護類別檔的版權資訊。而且即使在類別檔遭到攻擊之後，版權資訊
仍然可以存在，不會被破壞。而透過這樣的版權資訊，既可以保護類別檔的原作
者的智慧財產權，亦可以利用它來追查破壞版權之人[1,2,7,8,11,12]。
2. Java 類別檔浮水印介紹
在 2000 年的時候，Akito Monden、Hajimu Iida、Ken-ichi Matsumoto、Katsuro
Inoue 與 Koji Torii 共同提出了一種針對 Java 類別檔所設計的浮水印方法，我們
稱之為 Monden’s method[1]。Monden’s method 的作法是透過修改類別檔中的特
定 method 的 “code attribute”裡面的 bytecode，來隱藏浮水印。
 編碼步驟(encoding steps)
Monden’s method 的編碼步驟總共有 3 個。第一個步驟是對想隱藏浮水印的
Java 原始碼檔作 “dummy method”的置入動作。在置入 dummy method 時，需注
意到它是否能產生足夠的 replaceable byte 來容納浮水印。另外，在 Monden’s
method 的作法中，也建議要在該類別檔中的其他 method 對此 dummy method 作
呼叫的動作，但是這個呼叫必須在一個夠複雜的條件判斷式成立時才會執行，而
這個判斷式也將永遠不會成立。這樣的用意是在於混淆攻擊者，以避免 dummy
43.3 附加式攻擊
附加式攻擊就是在原有的類別檔中再放置另一個 Monden’s method 浮水印，
讓在驗證的時候無法辨識哪一個浮水印才真的。所以攻擊的第一步驟是透過反編
譯器取得原始碼檔，然後依據 Monden’s method 的做法在放置另一個浮水印。
4. 改良式浮水印作法之研究
4.1 方法概論
在我們所提出的方法中，依舊是使用 method_info 裡的 code attribute 來作為
浮水印編碼結果的儲存空間，但是我們有 3 點的改變，使得其安全性與實用性提
昇，其內容如下：
 不再使用 replaceable opcode 作為編碼空間。
 使用特定的隨機亂數產生器(random number generator)與隨機亂數種子
(random seed)來產生部分資訊，以處理浮水印資料。
 利用 Secret Sharing 的編碼概念，將原本的浮水印資料轉換成為多個離
散的數對。
我們所提出的方法，在編碼方面，主要是將原始的浮水印資料轉換成為 bit
sequence，然後再利用亂數產生器與亂數種子去處理此 bit sequence，套用 Secret
Sharing 的作法將它製作成一個數學多項式，之後產生多個數對，最後隱藏至
method_info 中；而在驗證方面，我們是採用與編碼相同的方式，去重新產生數
對，然後再檢驗 method_info 中是否有出現這些數對的方式。我們將在以下的小
節詳細解說編碼程序與驗證程序。
4.2 編碼程序
我們所提出的浮水印方法，其編碼程序共有下列幾個步驟：
1. 將浮水印資訊轉換成 bit sequence
因為浮水印資訊大多是字串資料，而我們是採用數學多項式來處理浮水印資
訊，所以並不適合。因此必須先將浮水印字串轉換成為 bit sequence。圖 4.1 是一
個轉換的範例，我們將浮水印 “AAJC, THU, 2003”換成為一個 bit sequence。
2. 分割 bit sequence，並轉換成多項式各項的係數
AAJC,THU,2003
100000110000011001010…
圖 4.1 浮水印轉換 bit sequence
6在產生 Segmentation number sequence Sseg 之後，我們依次從 Sseg 中取出一
值，並依據此數值再從 bit sequence 中取出同長度的 bit sequence。以這樣的步驟
將 bit sequence 分割成 n 個數值，這個數值就是多項式的係數，我們稱之為
“Watermarking Polynomial Coeficients”。圖 4.3 是利用 Segmentation number
sequence Sseg 來分割 bit sequence 的範例。
3. 建構多項式並產生數對
在取得多項式係數 Watermarking Polynomial Coefficients 之後，我們依據項
數與係數來產生一個 n 項多項式，我們稱之為 fw(x)。圖 4.4 為產生多項式 fw(x)
的範例。
在產生多項式 fw(x)之後，必須代入 n 個 x 值來產生 n 個數對。因此我們也
是利用一個特定的亂數產生器 Rx 與一個亂數種子 Sx 來產生一組 x 值的序列
Seqx。而為了不產生重複的數對，因此在 Seqx中的 x 值不得重複，又因為 x 值介
於 0～250，因此 Seqx最多會有Cn
251
種組合出現。因為我們限制 n 至少大於 20，
故 Seqx 至少大於
29251
20
1086.1 C 種以上。若是攻擊者在已知 Rx 的情況下，則攻
擊者找出正確的 Seqx的機率取決於 Sx 的所有可能值的總數。
AAJC,THU,2003 100000110000011001010…
Length: 85
Random Number Generator R
Random Seed S
S = 1000
Segmentation Number Sequence:
6 2 4 1 5 5 5 6 3 6 5 7 4 2 3 4 1 1 7 6 2
圖 4.2 產生 Segmentation number sequence 之範例
Watermarking Polynomial Coefficients:
32 3 0 0 25 10 3 44 5 18 8 85 11 0 6 5 1 0 12 12 3
Polynomial:
fw(x) = (32X20 + 3X19 + 0X18 + 0X17 + 25X16 + 10X15 + 3X14 +
44X13 + 5X12 + 18X11 + 8X10 + 85X9 + 11X8 + 0X7 + 6X6 +
5X5 + 1X4 + 0X3 +12X2 +12X + 3) mod p
n = 21
圖 4.3 利用 Segmentation number sequence Sseg來分割 bit sequence 的範例
8當 k=64 時，Exception type mapping table 的可能狀況有
149250
64
1021.4 P 種，
而 Sx 的可能值有
442616536864
56
C 種，所以透過 Rx 與 Sx 可以產生的 Seqx 有
4426165368 種。因此，我們建議 k 值應該在 64 以上，以確保安全性。取得 Seqx
之後，再將它依序代入 fw(x)，以取得對應的 y 值，如圖 4.6 所示。則所取得之 y
值即為最後的浮水印字串的編碼結果。
4. 將所產生的數對與其他相關資訊放置到類別檔中
將浮水印字串轉換成為 n 個數對之後，最後的步驟就是將結果放置於類別檔
之中。因為我們所提出的做法也是使用 dummy method 來存放浮水印的編碼結
果，所以也必須先在 Java 類別的原始碼中放置一 dummy method，並且在放置之
後進行編譯，產生類別檔。
Type name value Type name value
ClassCastException 0 StringIndexOutOfBoundsException 8
ArrayIndexOutOfBoundsException 1 ArithmeticException 9
ClassNotFoundException 2 EOFException 10
IndexOutOfBoundsException 3 IOException 11
InterruptedException 4 NotSerializableException 12
NoSuchFieldException 5 UnsupportedEncodingException 13
NoSuchMethodException 6 FileNotFoundException 14
NumberFormatException 7 StreamCorruptedException 15
…
表 4.1 Exception Type Mapping Table
Random Number Generator Rx
Random Seed Sx
Sx = 13·15·10 = 1950
Seqx:
122 231 182 103 91 180 154 0 28 45 59 101 86 246
174 14 35 222 191 213 134
Select 1~8 values from Exception Type Mapping Table:
13, 15, 10
圖 4.5 使用 Sx 產生 Seqx 之範例
10
entry，而其中以下列 3 種 opcode 所構成的指令是來存取常數資料的 entry：ldc、
ldc_w 與 ldc2_w。由此 3 種 opcode 所組成之指令的 operand 部分則是所存取的
constant pool entry 的索引值。因此，在找尋可存放的空間時，是循序地從 dummy
method 的 code attribute 內的第一個 bytecode 開始尋找，若是找到 replaceable
operand，則直接記錄 operand 的位置；若是找到的是包含上述 opcode 的指令，
則依據 operand 的值，到 constant pool 中找出 constant pool entry，然後記錄該 entry
的型態。我們稱這些可用空間為 “Watermark storage”。圖 4.7 是在 dummy method
中找尋 Watermark storage 之範例。在找出 dummy method 中可存放的空間之後，
我們依序將 n組數對中的 y值寫入這些空間，而這些 y值就是我們的浮水印主體。
在寫入 y 值之後，我們亦將 Constant Pool 的最後一個 entry 的索引值記錄到
dummy method 的 Watermark Stroage 中，位置是放置在於所有 y 值的最後。放置
此索引值的目的是在於抵擋附加式攻擊。因為我們知道想在類別檔中在附加上一
個 dummy method，則與其 dummy method 有關的 Constant Pool Entry 將必須附加
在原有的 entry 之後。在將浮水印主體寫入 dummy method 之後，我們亦必須將 S
與 Sx 一併記錄在 dummy method，以便以後進行驗證。我們將 S 隱藏於 method
descriptor 之中。因為我們知道 method descriptor 是用來描述 method 呼叫時所需
的參數的個數、型態與順序以及傳回值的型態，若是任意修改，則會造成 method
在呼叫時發生錯誤而導致軟體執行錯誤或失敗，所以攻擊者在未知 method 是否
有無被呼叫的情況下，是無法對它進行修改。另外一點，JVM 對 method descriptor
的驗證，僅限於確認它所描述的各個參數與傳回值的型態字串格式是否正確，因
此在修改上的限制也較少。由於 method descriptor 所記錄的內容皆為型態描述字
串，而我們所要隱藏在 method descriptor 的 S 則是一整數，因此我們定義出一個
轉換表來將型態描述字串與整數值作對應，我們稱之為 “Parameter type mapping
table”。因為 obfuscator 不處理 Java core API 的部分，因此我們在 Parameter type
mapping table 中的型態都是由 Java core API 中選出，而除了 Java core API 中的類
別可以使用之外，一般的基本型態如 int、long 等亦可以使用。在目前 Java 2 的
平台上，可以使用在 Parameter type mapping table 的型態至少有 500 種以上，而
我們從中選取出 m 個來製作出 Parameter type mapping table，對每一個被選出的
型態給予一個不重複的整數值，數值的範圍是 0～m-1。因此可知我們可以製作
出的 Parameter type mapping table 至少可有
500
mP 種。表 4.2 是 Parameter type
mapping table 的範例。以表 4.2 為例，該表格選取 20 個型態來製作 Parameter type
mapping table，因此 m=20，所以攻擊者要從 Java core API 中找出這組表格的機
率是
500 53
20
1 1
6.48 10P


。
12
replaceable bytecode 轉換成為 bit sequence，最後將 bit sequence 再轉換回字串格
式，就可以識別出該字串是否為原有的浮水印字串。Monden’s method 的作法是
將 replaceable bytecode「解碼」成為浮水印字串來確認是否有所要檢驗的浮水印
的存在，而我們的作法則是是利用原有的浮水印字串與隱藏在 method descriptor
中的 S 與 Sx 來重新產生浮水印的主體，然後在 method_info 所找出的可用空間裡
的 bytecode 中確認所產生的浮水印主體是否有出現。以下所列就是我們用來驗證
浮水印的步驟：
(1). 取得欲驗證之浮水印字串，並將之轉換為 bit sequence
(2). 讀取method descriptor與 exception table中的資訊，並利用Parameter type
mapping table 與 Exception type mapping table 將它們轉換成為 S 與 Sx
(3). 利用所取得的 bit sequence、S 與 Sx 來重新建立多項式 fw(x)與 n 組數對
(4). 找出並讀取 method_info 中的 Watermark storage
(5). 檢驗重新產生的 n組數對中的 y值是否與從Watermark storage中所存放
的浮水印主體吻合
在第一步驟中，雖然我們從 Secret Sharing 得知，可以利用 n 組數對來還原
原來的 n 項多項式；而我們在 dummy method 中隱藏了可以產生 n 組 x 值的隨機
亂種子 Sx，在 dummy method 中所找出的 Watermark storage 中也存放有 n 組的 y
值，因此理論上可以利用它們來還原多項式 fw(x)。但是，因為 fw(x)的項數是透
過 S 所產生的 Segmentation number sequence 來分割由浮水印字串所轉成的 bit
sequence 而所得到的分割數，而我們亦未將 n 值儲存在 dummy method 中，因此
若是在未知原來的浮水印字串的情況下，我們將無法得知 n 值的大小，所以也就
無法透過 dummy method 中所隱藏的 Sx 與 Watermark storage 中的浮水印主體來
還原出原來的浮水印字串。因此，在驗證浮水印的第一步就是必須先取得原來的
浮水印字串，以便於產生多項式 fw(x)。在取得浮水印字串之後，我們將他轉會
成為 bit sequence 格式，轉換的方式必須與編碼時所採用的方法相同，以確保能
夠產生相同的結果。在獲得由浮水印字串所轉換成的 bit sequence 之後，仍然必
須有 S 才能重新產生原來的 fw(x)，而因為 S 是隱藏在 method descriptor，所以第
type value type value
boolean 0 short 10
Float 1 float 11
Byte 2 byte 12
Boolean 3 long 13
Double 4 double 14
Long 5 int 15
Short 6 Hashtable 16
Iterator 7 Vector 17
Properties 8 String 18
Integer 9 Object 19
表 4.2 Parameter Type Mapping Table
14
出浮水印，所以我們可知攻擊者是無法採用消去式攻擊來移除我們的浮水印。而
在曲解式攻擊的部分，我們知道攻擊者必須在 method 中插入無作用的位元組
碼，但是因為我們的浮水印格式是無順序性與連續關係，因此不管攻擊者插入多
少無作用的位元組碼，也都不會影響最後的驗證結果，所以我們可知攻擊者也無
法透過曲解式攻擊來破壞我們的浮水印。而在附加式攻擊方面，透過 Constant
Pool entry 的索引值的辨識，我們亦可以找出附加式攻擊。另外，因為透過調整
所選用的亂數種子即可改變浮水印的結果，因此使用者也無須針對每一個類別檔
來編寫一個 dummy method，所以實用性大增。因此本研究所提出的方法，讓 Java
類別檔浮水印技術更能使用在實際狀況上。
參考文獻
[1] Akito Monden, Hajimu Iida, Ken-ichi Matsumoto, Koji Torii and Katsuro Inoue , "A
Practical Method for Watermarking Java Programs," Proceedings of the The
Twenty-Fourth Annual International Computer Software and Applications Conference.
[2] Monden, A., Hajimu, I., Matsumoto, K., Katsuro, I. and Tori, K., “Watermaring Java 
programs”, in Proc. 4th International Symposium on Future Software 
Technology(ISFST'99), Software Engineers Association, Nanjing, China, Oct. 1999, pp.
119 - 124.
[3] Shamir A.,“How to Share a Secret”, Communication of the ACM, Vol. 22, No. 11, Nov.
1979, pp. 612-613.
[4] Benjamín Barán, Santiago Gómez and Víctor Bogarín, "Steganographic Watermarking for
Documents," Proceedings of the 34th Hawaii International Conference on System
Sciences - 2001.
[5] Bill Venners,“Inside the JAVA 2 Virtual Machine”, McGraw-Hill, 1999.
[6] Chenghui Luo, and Jian Zhao, "Obfuscating and Watermarking Java Software for
Copyright Protection", Computer Graphik topics Issue 4 1999
[7] Christian Colberg, Clark Thomborson, “Watermarking, Tamper-Proofing, and
Obfuscation - Tools for Software Protection” , IEEE Transactions on Software 
Engineering 28:8, 735-746, August 2002
[8] Christian Colberg, Clark Thomborson, Douglas Low, “Manufacturing Cheap, Resilient, 
and Stealthy Opaque Constructs”,ACM POPL'98.
[9] Christian Collberg, Clark Thomborson, Douglas Low, “Breaking Abstractions and 
Unstructuring Data Structures” , IEEE ICCL'98.
[10] Donovan Artz, "Digital Steganography: Hiding Data within Data," Internet Computing,
Vol. 5, No. 3, May/June 2001, pp. 75 - 80.
[11] D. Curran, N. J. Hurley, M. O Cinneide,"Mathematics of computing: Securing Java
through software watermarking", Proceedings of the 2nd international conference on
Principles and practice of programming in Java, June 2003
[12] J. Palsberg, S. Krishnaswamy, Minseok Kwon, D. Ma, Qiuyun Shao, Y. Zhang,
"Experience with software watermarking," 16th Annual Computer Security Applications
Conference (ACSAC'00), December 11 - 15, 2000
[13] Patrick Cousot, Radhia Cousot, "An abstract interpretation-based framework for
software watermarking", ACM SIGPLAN Notices , Proceedings of the 31st ACM
SIGPLAN-SIGACT symposium on Principles of programming languages, Volume 39
Issue 1, January 2004
[14] Tim Lindholm, Frank Yellin, "The Java Virtual Machine Specification Second Edition",
http://java.sun.com/docs/books/vmspec/2nd-edition/html/VMSpecTOC.doc.html
[15] Xiangyu Zhang, Rajiv Gupta, "II: Hiding program slices for software security",
Proceedings of the international symposium on Code generation and optimization:
feedback-directed and runtime optimization, March 2003
可供推廣之研發成果資料表
□ 可申請專利 ■ 可技術移轉 日期：95 年 09 月 30 日
國科會補助計畫
計畫名稱：Java 類別檔的數位浮水印研究
計畫主持人：周忠信
計畫編號：NSC 94-2213-E-029-027 學門領域：
技術/創作名稱 Java code watermark
發明人/創作人 周忠信
中文：近幾年來，Java 被應用來開發各種不同類型的應用。Java
儼然成為目前最熱門的技術之一。但是，伴隨著而來的問題就是
Java 類別檔的安全性問題與版權問題。因為 Java 類別檔的格式使
得它很容易的被竊取或是修改，而目前大部分的研究都是著重在針
對整個應用軟體的保護，而非針對單一個類別檔進行保護。在本研
究中，會介紹目前幾種常見的保護方式及其缺點。而想要對 Java
類別檔進行版權的保護，最有效的方法就是使用數位浮水印，將版
權資訊隱藏在其中。本研究旨在於提出一個針對 Java 類別檔的數
位浮水印方法，來保護版權資訊。這個新的數位浮水印方法所針對
的目標是單一個類別檔，並且可以抵擋目前大部分的攻擊方式。本
研究在最後會說明新的數位浮水印是如何抵擋各種攻擊方式。
（100~500 字）
技術說明
英文：Recently, Java becomes one of the most popular technologies for
many kinds of applications. However, since Java class file format is
open and simple, copyright issue for Java classes becomes one of the
important topics to study. Most of the solutions for Java copyright are
focusing in application level, not in class file level. In this thesis, we
introduce software watermark technology for Java. The current
available technology for Java watermark is easy to attack. Therefore, in
this research we purpose a new watermarking solution for Java class
files. It can avoid several kinds of attacks, especially to the most
difficult additive attack.
可利用之產業
及
可開發之產品
軟體開發、軟體工程、資訊安全相關產業
可發展成為程式智慧財產權保護工具
技術特點
目前最具保護 Java code 智慧財產權的技術
