 I 
 
摘    要 
 
汽車電子產業發展近三十年，為了滿足省能、安全、舒適、智慧化等創新需求，汽車內所搭載的
車用電子系統產品比例持續成長。提升了各種需求的同時，卻也大幅增加車用電子環境的複雜度，使
得電子系統整合愈來愈困難，這對於各大車廠以及電子元件製造商車是個重要且急需解決的議題。為
了解決這個議題，在 2003 年歐美日主要車廠成立 AUTOSAR(AUTomotive Open System ARchitecture) 
汽車開放系統架構聯盟，提供一標準化汽車軟體架構，透過整合或通用軟體元件以提高軟體的交換及
可再利用性，幫助車用電子產業的成長。 
在本計畫中，首先針對 AUTOSAR 的軟體架構做研究，從 AUTOSAR Software、AUTOSAR 
Run-Time Environment、AUTOSAR Basic Software 到底層 ECU-Hardware 進行分析，其中，再進一步
對 AUTOSAR 核心 RTE 做深入的探討，除了分析 RTE 與 Basic Software Scheduler、Basic Software OS
相互關係，並了解 RTE 通訊與排程機制，提供車用電子開發人員對於 AUTOSAR 架構更深入的了解。
其次，本計畫針對車用 OpenCL 架構，設計了 compiler framework 來幫助車用馬達控制 DSP 達到到加
速的效果。此期末報告，主要包含下列三項重點研究： 
z AUTOSAR 軟體架構之研究。 
z RTE 層中軟體元件(Software Components)之間的通訊與排程機制之研究。 
z 在嵌入式車用 DSP 多核心系統上開發 OpenCL compiler。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
關鍵詞：AUTOSAR、車用電子、軟體元件、ECU、OpenCL 
 1 
 
壹、 前言 
在此計畫中，首先，本子計畫對 AUTOSAR 的軟體架構從 AUTOSAR Software、AUTOSAR 
Run-Time Environment、AUTOSAR Basic Software 到底層 ECU-Hardware 做分析與研究；其中，再針
對 AUTOSAR 核心 RTE 進行進一步的探討，除了分析 RTE 與 Basic Software Scheduler、Basic Software 
OS 相互關係，並了解 RTE 通訊與排程機制，提供車用電子開發人員對於 AUTOSAR 架構更深入的了
解。 
 其次，為了改善車用影像軟體的效能，本計畫針對 OpenCL 架構進行研究，並在車用 DSP 平台上
設計 OpenCL compiler framework，將 OpenCL 中的 work-item 分配到這個平台上的 register clusters 上，
藉以達到加速的效果。除此之外，我們也有做 SIMD 來加速車用應用程式的執行，以及使用 c++ vector
來幫助程式的可讀性，來加強車用影像處理器的效能及方便開發人員撰寫程式。 
 
貳、 研究背景及目的 
車用電子產業發展迅速，汽車內所搭載的車用電子系統愈來愈多，舉凡從與行車控制相關的電子
控制元件(ECU)、微控制元件(MCU)到行車安全防護系統(Active/Passive Safety)、車載導航系統(In-Dash 
Navigation)和資訊娛樂系統(In-Vehicle Information)，這些車用電子系統提高了行車的安全度、便利性
以及滿足了資訊娛樂的需求，但大大增加車用電子電機環境的複雜度。當一台車內所搭載的車用電子
系統愈來愈多，使得軟硬體整合的困難度也逐漸提升，拉長了汽車生產的周期同時也增加了後續維護
的費用，這對於各大車廠以及電子元件製造商車是個重要且急需解決的議題。為了增加車用電子軟體
的重覆使用性，追求一致的標準與加速車用電子系統的整合，在 2003 年歐美日主要車廠成立
AUTOSAR(AUTomotive Open System ARchitecture) 汽車開放系統架構聯盟，由各大車廠、一級供應
商、工具製造商以及晶片製造商所組成，提供一個標準化汽車軟體架構，透過整合或通用軟體元件以
提高軟體的交換及可再利用性，縮短整個車用電子元件系統的軟硬體開發時程，同時達到降低開發成
本的目的。 
藉由 AUTOSAR 此模組化的開發方法，幫助車電系統製造商從上描述 ECU 的硬體規格，以及定
義共同的軟體溝通介面，最後產生與硬體控制相關的基礎軟體(OS, ECU abstraction, drivers, services, 
communication, …)以及相關的 runtime 環境(APIs, data types, … )、跟應用程式，縮短整個車電元件的
軟硬體開發時程，遵循國際標準的車電元件軟體介面，可在不同汽車平台上運作，同時可重複使用，
將大大降低汽車電子軟體整合成本，提高車廠採購意願提昇其產值。由此看出，AUTSOAR 對於車電
系統軟體開發尤其重要，因此，本計畫進行 AUTOSAR 標準化架構之研究，並針對 AUTOSAR 核心
RTE 層進行分析與探討，為國內車用電子技術帶來寶貴經驗。 
在另一方，為了加速車用馬達控制 DSP 的效能，本計畫在車用 DSP 平台上進行 OpenCL 相關研
究。OpenCL 是由 Khronos Group 針對 heterogeneous device 進行平行化運算所設計的標準 API 以及
程式語言，主要設計目的是要提供一個容易使用、且適用於各種不同裝置的平行化計算平台。目前，
最為常見的就是所謂的 GPGPU 應用，由於各家廠商的 GPGPU 方案都是互不相容的，而這對 
GPGPU 的發展也是不利的，所以 Apple 決定提出一個統一的 GPGPU 方案。這個方案得到包括 
AMD、IBM、Intel、NVIDIA 等相關廠商的支持，並很快就交由 Khronos Group 進行標準化。OpenCL
 3 
 
圖 1.  OSEK 系統架構 
 作業系統 OS：為一個嵌入式作業系統，此規範是代表一個統一的環境，支持汽車控制單元
應用軟體資源的有效利用。對一個分散式嵌入式控制單元而言，OSEK 作業系統就是一個單
處理器系統。但與 AUTOSAR 不同的地方在於，OSEK OS 允許應用程式與底層硬體直接連
接。 
 通訊 COM：此規範會增加應用軟體模組的可移植性，它為內部(在單顆 ECU 內的通訊)和外
部(兩個汽車節點之間的網路)的通訊定義了常用的軟體通訊介面和行為。 
 網路管理 NM：一個網路管理的協議，目標是為了確保 ECUs 的安全性和通訊網路的可靠性。 
 OSEK 實現語言 OIL：為了增加 OSEK/VDX 軟體開發的可移植性，定義了一套描述
OSEK/VDX 系統的方式－OSEK/VDX Implementation language（OIL），這種語言對一個特定
的應用程式描述其所有系統物件的靜態宣告。因此，對於每一個應用程式，我們可以藉由宣
告應用程式裡需要的所有系統物件來定義一個客製化的作業系統。 
z GENIVI Alliance 於 2009 年成立，主要推動車用電子娛樂(IVI)系統的標準化，並以海外的汽車製
造商為中心，積極地推動以開放原始碼的概念來開發 GENIVI 平台。此聯盟聯合各汽車公司、消
費電子產品、通訊和應用軟體開發公司來做 IVI 市場的投資，促進該行業的創新，使產品上市時
間縮短，並降低所需成本。GENIVI 的共享平台由聯盟的創始成員 BMW GROPU、Delphi、General 
Motors Corp.、Intel、Magneti Marelli 合作開發，如圖二所示，GENIVI 平台包含 standardized 
middleware、application layer interfaces 和 frameworks，為一標準化的軟體架構，可幫助產品線和
產品的擴展與開發，將會加速汽車製造商產品開發的速度，使其更為接近消費型設備的使用週期。 
 
 5 
 
 
圖 4.  AUTOSAR 基本概念圖 
AUTOSAR 的基本概念如上圖二所示，為一階層式模型。藉由虛擬功能匯流排(Virtual Function Bus, 
VFB)可將整體系統中的某部分應用程式給抽出，其中應用層包含上圖之軟體元件描述 (SW-C 
Description)所產生之汽車開放系統架構軟體元件(SW-C)；而虛擬功能匯流排則提供軟體元件間的標準
通訊機制與服務，再依據系統條件描述(System Constraint Description)與電子控制元件(ECU)描述，藉
由適當的工具將其建構成具體的 ECUs，對於每個 ECU 的 AUTOSAR RTE 與 AUTOSAR BSW 有獨立
之設定與生成。在此針對其中幾個部分做更細部的介紹： 
z System Constraint and ECU Descriptions 
系統條件描述與 ECU 描述，為了將軟體元件整合到 ECUs 網路上，AUTOSAR 對系統以及單顆
ECU 的資源和結構都提供了說明格式。 
 7 
 
 
圖 5.  Sensor/Actuator 軟體元件與硬體互動關係 
z Virtual Function Bus(VFB):  
虛擬功能匯流排，為整個車用系統中所有軟體元件互相連接的抽象概念，提供這些彼此相連的軟
體元件標準的通訊機制與服務。如下圖四所示，VFB 可將 AUTOSAR 軟體元件以及 BSW 層中的
Complex Device Driver、ECU Abstraction、AUTOSAR Services 互相連接，其中 AUTOSAR Services 的
通訊介面為標準介面，而其它通訊介面則屬於特定介面。介面的分類可由上圖三所知，共分為以下三
種介面： 
 9 
 
 
圖 7.  AUTOSAR 軟體架構圖 
z AUTOSAR Software :  
在 RTE 之上的 AUTOSAR 軟體階層包含著所有之後要形成 ECU 裡的各個 AUTOSAR 軟體元件，
所有的 AUTOSAR 軟體元件與不可分割的軟體元件(包含其它 AUTOSAR 軟體元件、AUTOSAR 
Services、ECU Abstraction、Complex Device Drivers)之間的連接與通訊都是透過 AUTOSAR RTE
層來幫忙，而軟體元素之間的連接都是藉由 AUTOSAR 介面來確保它們在 RTE 層的連接性。 
z AUTOSAR Runtime Environment, RTE :  
在 AUTOSAR RTE 層，它幫忙 ECU 與 ECU 之間、ECU 裡交換資訊與溝通，提供給上層的
AUTOSAR 軟體元件相同的介面與服務來做互相溝通。對於同個 ECU 裡的溝通，RTE 提供 IOC
模組來實作，例如函式呼叫的方式；當軟體元件與其它 ECU 裡的軟體元件溝通時，RTE 使用 COM 
message 來實作，例如透過 CAN 來幫忙與其它 ECU 溝通，從 RTE 層經由 BSW 中 Communication
軟體模組、ECU Abstraction 軟體模組連接到 Microcontroller Abstraction 軟體模組裡面的溝通管道
(如 CAN、LIN、FlexRay、MOST )，進而來與其它 ECU 互相溝通。為了讓資源使用較有效率以
及得到較好的效能，通常每顆 ECU 裡的 RTE 並不完全相同。  
z AUTOSAR Basic Software, BSW :  
提供 AUTOSAR 軟體元件所需要的服務，將會執行應用軟體中功能性的部分，分為標準元件(前
四項)和特定 ECU 元件(後二項)，如下： 
1. Services: 系統提供的服務，如診斷協定、NVRAM、flash、記體管理等。 
 11 
 
C.  RTE、BSW Scheduler、AUTOSAR OS之間的相互關係 
 
圖 8.  Scope of the section on Basic Software modules 
如圖六所示，RTE、BSW Scheduler、AUTOSAR OS 之間的連接方式是透過 AUTOSAR 所定義的
標準介面(Standardized interface) - AUTOSAR OS API 來溝通。在 RTE 配置的階段會使 RunableEntitys
和 BSW Schedulable Entities 對應到 OS tasks，RTE generator 階段則是負責產生 OS task 的內容，包含對
RunableEntitys 和 BSW Schedulable Entities 的呼叫。因為此二種 Entities 和 OS 並無關，所以並不可以
直接使用到OS的服務，必須透過RTE的RTE API和Basic Software Scheduler的Basic Software Scheduler 
API 來幫忙呼叫 RunableEntitys 和 BSW Schedulable Entities 起來執行。以下分別對 OS Objects、
RunableEntitys 和 BSW Schedulable Entities 做介紹： 
z OS Objects 
1. Tasks 
9 由RTE generator產生TASK的內容，為一段程式碼，用來描述OS object的配置內容。 
9 在OS配置的時候，RTE configurator必須生成所分配的tasks。 
9 RTE和Basic Software Scheduler負責控制TASK的活動與中止，可選擇 (1)直接呼叫OS 
services 像是 SetEvent() 或 ActivateTask() 、 (2) 間接地初始化 OS alarms 、 (3) 使用
Schedule-Tables來讓RunableEntitys起來執行；當task要結束時，在TASK的內容裡會呼叫
TerminateTask()或ChainTask()。 
2. OS applications 
 13 
 
9 藉由OS的排程方法，RTE可以決定所需要採用的資料一致性的機制 
9. Hook functions 
9 由使用者自己實作function的內容，在某種情況下，OS會呼叫它起來執行，例如錯誤產
生、任務轉換、系統開始執行或結束時。 
9 Hook functions在系統整合時就必須實作完成而不是藉由RTE generator。 
z Runnable Entities 
RunableEntity 裡為一段指令碼，包含一個進入點以及相關的資料，每個進入點裡面定義 symbol
用來提供 RunableEntitys 的實作。 
在 RunableEntitys 中除了”reentrant sever runnable”是藉由直接函式呼叫的方式，其它 runnable 都必
須被 map 到 task 來執行，這個 map 的過程會用 ECU Configuration Description 來描述。RunableEntitys
的分類如下： 
Category 1.  
RunableEntitys 中不允許進入等待的狀態也沒有辦法結束，又區分為 Category 1A 和 Category 
1B，前者只允許使用 impicit API，後者允許呼叫 Server 而且可以使用 expicit API。 
Category 2.  
至少擁有一個 WaitPoint，通常會被 map 到 Extended Tasks 執行(只有 Extended Tasks 提供
WAINTING 的狀態)。 
z Basic Software Schedulable Entities ( BasicSchedulableEntitys ) 
BasicSchedulableEntitys 由 BSW Scheduler 所控制，其實作內容為主要的處理函式。
BasicSchedulableEntitys 可 允 許 被 map 為 basic tasks 以 及 extended tasks 二 種 型 別 。
BasicSchedulableEntitys 也可以選擇要不要 map 為 RunableEntitys，如果會使用到 AUTOSAR Services、
ECU Abstraction、Complex Device Drivers 則必須 map 為 RunableEntitys。如果不 map 到 RunableEntitys
則會被分類到 Runnable Entities 中的 Category 1。 
D.  RTE層中元件(Components)之間的通訊與排程機制 
AUTOSAR 之核心架構 RTE 層為 AUTOSAR VFB 中對於某顆 ECU 介面的實現，提供軟體元件間
或軟體元件與 BSW 元件之間互相溝通的介面，下圖七為 RTE 的服務的對象以及主要的概念，幫助軟
體元件之間的通訊以及軟體元件之間的運行活動(concurrency)或稱之為排程。 
 15 
 
 
圖 10.  軟體元件調用 BSW 層之運行活動 
z Communication 
AUTOSAR 之間的元件都是透過定義好的 port 來與其它元件連接。為了定義某元件的 port 它所需
及提供的服務和資料， AUTOSAR 介面支援二種通訊機制：Client-Server(定義 operation 的集合來讓
元件呼叫)以及 Sender-Receiver(使用資料導向的通訊機制)。 
port 分為 PPort(Provide port)和 RPort(Require port)，PPort 提供 AUTOSAR 介面、RPort 要求
AUTOSAR 介面。當某元件的 port 屬於 PPort，對於 AUTOSAR 介面中的 Client-Server 介面它提供定
義好的 operations 實做，對於 Sender-Receiver 介面它則產生資料導向中的資料描述；反之，port 如果
屬於 RPort，對於 Client-Server 介面它會呼叫 operations，對於 Sender-Receiver 介面它則讀取所描述的
資料。 
1. Client-Server 
在分散式系統中通常使用此通訊機制，Server 端為服務的提供者，而 Client 端為服務的使用者。 
Client 端一開始會先做初始化的動作，然後向 Server 端請求某些服務，另外可決定需不需要轉換
目前的狀態；而 Server 端會等待 Client 端發出的請求，執行所請求的服務，並且回應 Client 端的需求。
一個元件可同時為 Client 端或是 Server 端，通常會依據有無初始化來決定一個 AUTOSAR 軟體元件是
Client 端亦或是 Server 端。 
此外，Client 端可以決定為同步或非同步，當 Client 端向 Server 端送出請求後，到 Server 端回覆
要求前，可以決定是否要被 block 住。下圖九為 Client-Server 通訊機制的介面，它提供多對一的溝通
方式，讓多個 Clients 端可以同時和相同的 Server 端進行溝通。 
 17 
 
自行初始傳輸的動作；若為 Explicit 傳輸模式，元件將使用明確的 RTE API 的呼叫來傳送資料區塊。
下表一為較詳盡 Implicit 與 Explicit 的接收與傳送比較。 
 
表 1.  Implicit versus explicit data reception and transmission 
E. 車用DSP平台上的OpenCL開發 
z 平台介紹 
 
我們以車用 DSP 當作實驗的平台，平台上包含一顆 ARM 和兩顆由 DSP 組合而成的，每顆 DSP
搭載有 VLIW 的指令集並且是 five-way issue 的 DSP，同時，在 DSP 上有三個 cluster，其一主要是負
責 control flow，另外兩個主要是負責計算。錯誤! 找不到參照來源。主要是 OpenCL platform model
和memory model在DSP平台上的對應關係，而錯誤! 找不到參照來源。則是將OpenCL execution model
在平台上的處理方式。 
 19 
 
和 local ID 依序執行。 
Vector Intrinsic Mapping[19]：OpenCL 提供了許多的 vector data type，而同時 DSP 也搭載著 SIMD
的指令，為了消弭這兩者之間的隔閡，我們利用 vector intrinsic mapping 將 OpenCL 的 vector data type
和 DSP SIMD intrinsic 指令做 mapping，若是 SIMD intrinsic 指令不支援的 data type，我們則以 structure 
manner 的方式實做。 
Built-in Function Overloading：由於 C 並沒有支援 OpenCL kernel 中的 built-in function，所以在這
個步驟我們則是將這些 built-in function 做適當地對應。  
Cluster-aware Work-item Dispatching(CWD)：經由上述的四個前製作業之後，我們便可以使用我們
所開發的 CWD optimization，將兩個 work-item 利用 CWD 分配到 DSP 上的兩個 cluster 同時執行，進
而達到效能的提昇。首先，CWD 會搜尋 kernel code 中與 work-item 有關的變數(work-item dependent 
variable, WDV)，將它們都複製一份，並對複製出來的變數重新命名，再來則是複製有定義或使用 WDV
的 statement，並將複製出來的 statement 插入到原本的 statement 之後，最後就可將這些帶有 cluster 資
訊的指令分配到 DSP 上的兩個 cluster，並同時執行。 
 
z 實驗結果 
我們從 ATI OpenCL testsuite 中挑出 10 支 kernel program 做為 performance 量測的 benchmark，表
2 錯誤! 找不到參照來源。為 benchmark 的敘述，而圖 16 則是最後 performance 的結果，根據數據顯
示，使用 CWD optimization 之後，我們的 performance 最多可以增進 1.68 倍，而平均的 performance
也可以增進 1.33 倍。 
BitonicSort  Sorts 1024 values.  
DCT  Performs Discrete Cosine Transform.  
DwtHaar1D  One-dimensional Haar Wavelet transform 
EigenValue  Calculates Eigen Value intervals of two values.  
FastWalshTransform  Applies Fast Walsh Transform on 1024 elements.  
FloydWarshall  Calculates the shortest path between each pair of nodes.  
MatrixTranspose  Transpose a 64x64 matrix  
Histogram & Permute Both are parts of RadixSort with 1024 elements.  
PrefirxSum  Produces the prefixsum of 512 values  
表 2.  Benchmark 描述 
 21 
 
[9]  AUTOSAR GbR: Specification of Interaction with Behavioral Modes V1.0.5 (2008) 
[10]  AUTOSAR 1st AUTOSAR Open Conference & 8th Premium Member Conference: AUTOSAR 
Tutorial V1.5.1 (2008) 
[11]  AUTOSAR Specification: Conformance Test Process AUTOSAR DS CT Path A-C V2.0.0 (2009) 
[12]  AUTOSAR Specification: Conformance Test Process AUTOSAR DS CT Path D V1.1.0 (2009) 
[13]  Alain Gilberg, Bernd Kunkel, Alain Ribault, Philippe Robin, and Noë Spinner, “Conformance Testing 
for the AUTOSAR Standard”, 
[14]  Fennel, Helmut et al.: Achievements and Exploitation of the AUTOSAR Development Partnership, 
SAE Convergence Congress, Detroit, 2006 
[15]  Heinecke, Harald et al.: AUTOSAR – Current results and preparations for exploitation, Euroforum 
conference May 3rd 2006 
[16]  Simon Fürst, BMW Group, “AUTOSAR – A Worldwide Standard is on the Road”, 14th International 
VDI Congress Electronic Systems for Vehicles, Baden-Baden,  2009 
[17]  Scharnhorst, Thomas et al.: AUTOSAR – Challenges and Achievements 2005. Electronic Systems for 
Vehicles 2005, VDI Congress, Baden-Baden, 2005 
[18]  Lee, J., Kim, J., Seo, S., Kim, S., Park, J., Kim, H., Dao, T.T., Cho, Y., Seo, S.J., Lee, S.H. ,Cho, S.M., 
Song, H.J., Suh, S.B., Choi, J.D. :An OpenCL framework for heterogeneous multi cores with local 
memory. In: Proceedings of the 19th international conference on Parallel architectures and compilation 
techniques. pp.193 -204. PACT'10, ACM, New York, NY, USA (2010). 
[19]  Kuan, C.B., Lee, J.K.: SIMD intrinsic supports for VLIW DSP processors with distributed register files. 
In:15th Workshop on Compilers for Parallel Computing (2010) 
[20]  Butenhof, D.R.: Programming with POSIX threads. Addison-Wesley (1997). 
[21]  Li,J.J.,Wang,S.C.,Hsu,P.C.,Chen,P.Y.,Lee,J.K.:Amulti-coresoftwareAPI for embedded MPSoC 
environments. In: Proceedings of the Second Russia-Taiwan conference on Methods and tools of 
parallel programming multi computers. pp. 40{50.MTPP'10, Springer-Verlag,Berlin,Heidelberg(2010) 
 
2 
 
memory_order_release可確保 memory_order_acquire取得正確數值。 
6/9 10:00 ~ 10:30 由Min Zhao報告 Open64 Phase Componentization，由於目前
Open64中各個 optimization phase並不是模組化設計，因此要新增一個編譯器最佳化
或是編譯分析方法於 Open64中並不是很直覺，相關的編譯流程也必需要隨著修改，
這場演講說明了目前在 Open64模組化中做了哪些工作，報告中將新增模組於 Open64
分成四個步驟，包含 1. Adding a new component name. 2. Creating a component class. 3. 
Component Invocation. 4.Passing component options to the backend.，後半段並用了實際
例子來說明這四個步驟。 
6/9 10:30 ~ 11:00 由 Jaewook Shin報告WHIRL SSA Enhancements，目前 Open64
的中間表示式WHIRL tree並不是以 SSA形式呈現，因此在某些最佳化如 LNO與 IPA
仍然會有一些不足的地方，這場演講說明目前在WHIRL tree上加入 SSA資訊所作的
修改，在 Side-Data structure的部分不需新增 operator於WHIRL tree，memory SSA的
部份利用 k以及 u 來表示 memory aliases，並用 virtual symbols來代表 indirect 
loads/stores，目前WHIRL SSA的資訊在 high WHIRL至 low WHIRL已具有相當高的
可靠度，介紹完WHIRL SSA後演講者也報告了WHIRL CFG的實作，WHIRL CFG可
提供在WHIRL階段的 control flow資訊，亦可方便找出 dominator或 post-dominator
的資訊，相關原始碼的設計也同時被說明，如 BB_NODE class及 Iterators等，報告最
後則說明建立WHIRL SSA的步驟，包括 1. Mu/Chi/virtual symbol generation. 2. Phi 
insertion. 3.Renaming.，目前WHIRL SSA的工作尚未完成仍持續進行中。 
6/9 11:10 ~ 12:10 由 AMD的Michael Lai與Michael C. Berg兩人報告 Open64 
performance optimizations，在 Aggressive Loop Optimizations的部分介紹了 loop 
unrolling、loop peeling、triangular loop optimization、proactive loop fusion、
multi-versioning等最佳化，在 Redundancy Elimination提到在 calloc()之後如何刪除不
必要的memory clearing動作以及如何刪除在 inner loop裡多餘的 stores，在Vectorization
的部分則希望 Open64可以認得更多的 vector指令如 max、min、shift等，vectorized loop 
4 
 
做到 global peephole optimizations，global register allocation也可做得更好。 
6/9 14:20 ~ 15:20則由老師、我以及一位實驗室學長報告 OpenCL Updates，報告
中由老師一開始先簡介 OpenCL，並說明我們如何在 embedded multi-core DSP的環境
下去支援 OpenCL Compiler。之後由我來報告如何在 Open64中支援 OpenCL語法並產
生 ATI GPU的 back-end，我一開始先簡介我們去年在 front-end所做的修改，之後說明
如何支援 ATI GPU的 back-end，像是新增了哪些指令、為了支援 register components
在 CGIR需做哪些修改、WHIRL Lowering的修改、built-in function的支援等，報告中
我也說明了一些 OpenCL相關最佳化的實作如 Redundant Literal Declaration 
Reduction、Register Sub-component Aggregation、Loop Unrolling等，在我報告的最後
則展示了我們目前 compiler code generation的狀況以及相關實驗數據，在我報告完之
後則由實驗室學長來說明如何利用 variance analysis來減少 GPU上的 branch 
divergence，其中引進了機率化的模型，讓 compiler編譯 OpenCL程式做最佳化時能有
更好依據，Q&A時 NVIDIA的人員建議我們可利用多個 TNs來表示 register 
components，我們也將在之後實作時評估可行性。 
6/9 15:30 ~ 16:00由 Hucheng Zhou報告 An SSA-based Algorithm for Optimal 
Speculative Code Motion under an Execution Profile，這也是會議的最後一個 section，報
告一開始介紹了 Partial Redundancy Elimination (PRE)，主要是可用來刪除一部分
program path上的 redundant expressions，PRE通常被視為 Placement的問題，可分為
Determine where to perform insertions以及 Delete fully redundant computations兩個部
分，其中 Determine where to perform insertions為較困難的部分，目前常用的 PRE演算
法為 Lazy Code Motion與 SSAPRE，而這篇 paper則提出了一個MC-SSAPRE新的演
算法，透過建立 essential flow graph (EFG)，之後將 Basic Block的 execution frequencies
對應到 EFG，最後再用 min-cut於 EFG上可得到所要的結果，實驗結果顯示
MC-SSAPRE在 CINT2006上平均可以比傳統 SSAPRE快 2.13%，在 CFP2006則可以
比 SSAPRE快 2.76%。 
OpenCL Update
(Extended Version of Open64 Forum)
Yu-Te Lin∗, Shao-Chung Wang∗, Ming-Yu Hung∗, Jia-Jhe Li∗ and Jenq-Kuen Lee∗
∗Department of Computer Science,
National Tsing-Hua University, Hsinchu, Taiwan
Abstract—OpenCL is known to be an efficient programming
framework for developing applications on heterogeneous multi-
core processors. For OpenCL has specific linguistics of C99
extensions with address qualifiers and vector operations, the
compiler support becomes an important issue in OpenCL frame-
work. In this paper, we describe how we support OpenCL based
on Open64 compiler infrastructure for embedded multi-core
DSPs and high-end GPUs. Open64 is an open source compiler
infrastructure with many advanced compiler optimizations can
contribute to performance improvements for OpenCL programs.
We extend our prior work on compiler front-end parser in
2010 Open64 Developers Forum to involve OpenCL platform
mapping and back-end code generation for DSPs and GPUs.
Some optimization issues for OpenCL programs will also be
discussed. The preliminary experimental results show that our
Open64 based OpenCL compiler is able to generate efficient
codes for OpenCL programs.
I. INTRODUCTION
In recent years, heterogeneous multi-core architectures are
commonly used to deliver high performance on specific ap-
plications. Many processor vendors also have designed their
heterogeneous multi-core processors such as IBM Cell [1], [2],
Intel Sandy Bridge [3], and AMD Fusion APU [4]. However,
most of traditional programming languages are designed for
homogeneous computing. Simply adopting traditional pro-
gramming languages into heterogeneous development envi-
ronment will result in bad performance and difficulty in
programming. To address this issue, OpenCL was proposed for
programming across heterogeneous multi-core environments.
Currently, there are many OpenCL software developer tools
available such as Apple Xcode [12], Intel OpenCL SDK [14],
and AMD APP SDK [17]. Most of the OpenCL compiler
implementations take LLVM [11] as their compiler infrastruc-
tures, which present an interesting question if OpenCL can
be effectively implemented on other compiler infrastructures.
This will have the opportunity to bring more academic inno-
vations to help the OpenCL efforts.
In 2010 Open64 Developers Forum, we demonstrated our
initial work on supporting OpenCL front-end in Open64. The
experimental result on X86 back-end was also presented. In
this paper, we extend our prior work on compiler front-end
to involve OpenCL platform mapping and back-end code
generation for DSPs and GPUs. We choose PAC Duo as the
DSP platform and choose ATI GPU as the GPU platform. We
extend the high-level intermediate representations of Open64
to have OpenCL linguistics in the front-end and change the be-
havior of compiler transformation in the back-end to meet both
the OpenCL language and hardware platform requirements.
The preliminary experimental result shows that our Open64
based OpenCL compiler is able to generate efficient codes for
OpenCL programs.
The remainder of this paper is organized as follows. Section
2 briefly introduces OpenCL, Open64 compiler infrastructure,
and PAC Duo platform. Section 3 presents implementation
details. Next, Section 4 gives the experimental results. Finally,
Section 5 concludes this paper.
II. BACKGROUND
A. OpenCL Language
OpenCL is a programming framework for developing ap-
plications on heterogeneous platforms consisting of CPUs,
GPUs, DSPs and other processors. It defines a C99 extension
programming language for kernel programming. OpenCL was
initially developed by Apple Inc. After collaborating with
other technical teams, like AMD and NVIDIA, Apple sub-
mitted the first proposal to Khronos Group [8]. In 2008, the
OpenCL specification was approved by Khronos Group and
released. Now OpenCL is an open and royalty-free program-
ming standard.
OpenCL platform is composed of a host device and many
target compute devices as shown in Fig. 1. The host device
dispatch jobs and transfer data to certain compute devices
for computation. The target compute devices might be any
high performance processors such as GPUs or DSPs. In the
viewpoint of OpenCL platforms, a compute device could be
further divided into many compute units (CU); each compute
unit can have many processing elements (PE) to have many
multithreadings.
OpenCL language provides many address qualifiers (e.g.,
__global, __local, __constant, and __private)
for users to specify data locations, which will rely on the
support of compiler front-end parser and back-end instruction
selector. Besides, OpenCL also supports vector data types and
vector operations. Vector data types, such as float4, consist
of multiple homogeneous primitive data types in an instance.
The vector component permutations and replications are also
supported. All of these linguistic features of OpenCL make
the support of compiler important.
B. Open64 Infrastructures
Open64 [9] is an open-source compiler infrastructure de-
rived from SGI MIPSPro compiler. It was released in 2000.
Work-groups
Cluster 1
Cluster 2
X Y WZ
X Y WZ
DSP 0
Work-groups
Work-items
Fig. 3. PAC DSP to OpenCL Mapping
B. OpenCL Address Qualifiers
Since OpenCL is a C extension language which has many
memory address qualifiers that can be used by programmers
to access different memory spaces, the first thing we have to
do is to make the front-end parser of Open64 to be able to
parse these address qualifiers. We add the address qualifiers,
__global, __local, __constant, and __kernel, into
the front-end parser to be reserved words and then extend the
data structure of the symbol table in the parser so that the
parser can record required information in the symbol table
while encountering the qualifiers. The extended symbol table
will provide sufficient information for data layout at later
compiler phases.
C. Extension for CGIR Framework
The most common nouns in Open64’s low level interme-
diate representation, CGIR, are TN and OP, which are used
to map to hardware registers and instructions respectively.
For most common processors, there is no problem for the
representations of TNs and OPs. However, for most GPU
architectures, the hardware registers can have four components
internally and the instructions can also specify which register
component it will be operated on. The TNs and OPs of Open64
do not have the concept of register components so that it will
cause some problems while generating instructions. Therefore,
we modify the internal data structure for TN and OP. The TNs
can have four components to be matched to hardware registers
and the OPs also can select register components.
D. Flow Control Statement Transformation
While generating code for flow control statements such as
if-else statement and while loop statement, traditional
compiler will translate the flow control statement into a
sequence of basic blocks and then generate a comparison
instruction to setup a condition code. According to the result
of the condition code, the program can decide whether to
branch to the target basic block or just fall through to the
next basic block. For Open64, this transformation is per-
formed in WHIRL lowering phase. However, ATI GPU has
no jump or branch instructions thus we can not do this
transformation for flow control statements. ATI GPU directly
use IF-ELSE-ENDIF instruction block for control flow
statement so we have to avoid the transformation in WHIRL
a = (1.0f - tmp) * 30.0f + tmp * 5.0f;
b = (5.0f - tmp) * 1.0f + tmp * 30.0f;
(a)
dcl_literal  l10,  1084227584
dcl_literal  l11,  1106247680
dcl_literal  l12,  1065353216
sub  r24,  l12,  r23
mul  r25,  r24,  l11
mul  r26,  r23,  l10
add  r27,  r25,  r26
sub  r29,  l10,  r23
mul  r30,  r29,  l12
mul  r31,  r23,  l11
add  r32,  r30,  r31
(c)
dcl_literal  l10,  1065353216
sub  r24,  l10,  r23
dcl_literal  l11,  1106247680
mul  r25,  r24,  l11
dcl_literal  l12,  1084227584
mul  r26,  r23,  l12
add  r27,  r25,  r26
dcl_literal  l13,  1084227584
sub  r29,  l13,  r23
dcl_literal  l14,  1065353216
mul  r30,  r29,  l14
dcl_literal  l15,  1106247680
mul  r31,  r23,  l14
add  r32,  r30,  r31
(b)
Fig. 4. Remove Redundant dcl literal
lowering and preserve the high level control flow statements
to CGIR for code generation.
E. Remove Redundant Literal Declaration
The first optimization we implemented in Open64 for ATI
GPU is to reduce the redundant dcl literal instructions which
are used to declare immediate values. Since all of the ATI
instructions excluding dcl literal can not have immediate value
as their operands, whenever immediate values are required to
do operations, the dcl literal instructions have to be generated
to declare the immediate value in registers first. Without any
optimizations, there will be a lot of dcl literal instructions in
the program and many of which are redundant. To address this
issue, we can simply move each dcl literal instructions to the
beginning of the program and then check each dcl literal pair.
If the second dcl literal declare the same immediate value as
the first dcl literal, we scan the whole program to find the
use of the register defined by the second dcl literal and then
replace them to use the register defined by the first dcl literal.
Finally the second dcl literal can be removed. Since registers
will never be spilled, we can always have this transformation.
Fig. 4 shows a simple example for this optimization. Fig. 4(b)
is the generated code for the program in Fig. 4(a) without this
optimization. After applying this optimization, the generated
code can be reduced to Fig. 4(c).
IV. EXPERIMENT
To evaluate our Open64 based OpenCL compiler for DSPs
and GPUs, we select the benchmarks from OpenCL samples
of ATI Stream SDK that includes many common applications
such as DCT, MatrixMultiplication, and EigenValue. Besides,
the scalar operations and vector operations are also included,
which is able to evaluate the functionality of the compiler
front-end for vector parsing. By using these benchmarks,
our Open64 based OpenCL compiler is proved to have high
reliability.
Fig. 5 shows the experimental result for PAC Duo platform.
We use -O2 optimization level for the compiler and compare
the speedup of the original PAC Duo environment with PAC
Duo that using OpenCL. The result shows that with the support
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/30
國科會補助計畫
計畫名稱: 子計畫一：車用電子系統開發平台工具組(I)
計畫主持人: 李政崑
計畫編號: 99-2220-E-007-018- 學門領域: 晶片科技計畫--整合型學術研究
計畫
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
衍生計畫 1件 
計畫名稱：車用電子軟體系統開發平台之研究 
合作單位：工研院資通所 
金額 70 萬 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
