行政院國家科學委員會專題研究計畫成果報告 
 
記憶體線性成長之快速指數及多指數運算 
Fast Exponentiation and Multi-exponentiation with Linear Memory Requirement 
 
z 中文摘要 
 
關鍵字: 指數運算、多指數運算、聯合稀疏表示法、非同步策略 
 
利用摺疊(folding)技巧，可將多指數運算之技巧應用於指數運算，因此改善多指
數運算之演算法，如預先計算法(pre-computation method)及表示重編法(recoding 
method)，皆可用於改善指數運算。前者多用於記憶體充足之環境，後者常見於記憶
體受限之環境。本計劃以記憶體受限制之環境為出發點，考慮記憶體呈線性成長之
演算法。 
有別於重新編碼之策略，本計劃採用我們所提出來一個全新之非同步策略，來
設計多指數運算演算法。非同步策略在計算過程中並不一定同時處理相同權位之數
字，以利於將非 0 數字能夠盡量一起處理。這個方式可藉由將 x 或 y 之數字移位來
達成。正因為非同步策略未做編碼之動作，因此也可用於單一編碼形式之二進位表
示法，目前最通用的為我們法展之 SUt法。考慮 a bx y 之計算，其中 x 及 y 為 n 位元整
數，其效能與空間之描述如下表所示： 
 
s 0 1 2 … t 
不含平方之 
乘法次數 0.750n+1 0.667n+3 0.636n+5 … 
1
1
3 2
5 3 2
(2 1)t tt t t
−
−
−
⋅ − + +  
所需之 
暫存器個數 4 6 (5) 7 … t+5 
 
為了實現記憶體呈線性成長之快速指數及多指數運算之演算法，我們提出之全
新演算法證明效率是理想的且記憶體呈線性成長。相關理論與技術於今年 2 月發表
於 IEEE Transactions on Computers。 
 
 
 ii
行政院國家科學委員會專題研究計畫成果報告 
 
記憶體線性成長之快速指數及多指數運算 
Fast Exponentiation and Multi-exponentiation with Linear Memory Requirement 
 
一、前言 
多指數運算是 ElGamal 類型密碼元件[1, 2, 3, 4]中最重要也是最耗費時間之運算，此外
應用折疊(folding)之概念也可將其應用於快速指數運算。由此有效率之多指數運算演算法研
究有其必要性。本計畫探討加速多指數運算之策略及應用，提出一個全新之非同步策略概
念，藉以在不同之環境實現相關密碼元件時，都能夠挑選出最適當有效之演算法來設計。 
關於多指數運算基礎演算法之整理與重要概念，包括單一指數運算演算法與多指數運
算觀念等，可容易在相關書籍及文獻論文中發現[1, 2, 3, 4, 5, 6]，這些演算法提供多重運算
良好之運算基礎。進一步加速多指數運算之基本演算法策略包括以下兩大類： 
(1) 重新編碼策略(Recoding strategy)：將二進位帶號數字(Binary Signed-digit, BSD)表
示法之最低加權表示法加以重新編碼，以便進一步找出較低平均聯合加權(Average 
joint Hamming distance, AJHD)之表示法。此類型最基本演算法包括 Dimitrov、
Jullien、及 Miller 提出之 8 項法則(DJM 法則)[7]以及 Solinas 所提出之聯合稀疏表
示法(Joint sparse form, JSF)[8]。此類方法之記憶體需求只需因應 BSD 表示法所需
少量空間。因此一般應用於記憶體較受限制之環境。 
(2) 預先計算策略(Pre-computing strategy)：將一些計算可能應用到之數值預先計算出
並儲存，主要之技巧在於如何以最少之記憶體達到最佳之效益。典型之演算法包
括：基本之滑動視窗法(Sliding window methods) [2, 6]、由 Brickelland、Gordon、
McCurley、及 Wilson 提出之 BGMW 演算法[9]以及 Lim 及 Lee 提出之 Lim-Lee 演
算法[10]，我們在此一部份亦有改善[16]。由於往往需要使用大量之表格，因此大
都應用於記憶體充足之環境。此外，預先計算策略可搭配重新編碼策略使用來進
一步改進效能，亦即對於帶號數字表示法來儲存預先計算之資料。 
由於多指數運算策略之各演算法效能取決於預先計算次數(Pre-computing Count, 
PCNT)及非零欄位之個數(即 AJHD)。PCNT 與整數長度無關而 AJHD 與整數之長度有關。
為了方便介紹各演算法之效能，我們假設本文使用於運算之整數長度均為 n 位元，如採用
基本之二進位多指數運算演算法[1, Section V.B]，其效能之參考指標為 341 n+ (須預先計算
AB, PCNT=1；非零之數字對為 34 n，AJHD= 34 n )。在純粹考慮重新編碼策略之效能，由於
PCNT 較小可以忽略，因此往往論文之分析只考慮 AJHD，本文亦以 AJHD 為基準來分析相
關演算法之效能。 
 1
之聯合加權。因此才有更進一步之論文提出，如DJM法及JSF，這些方法之描述可參考 [7, 8, 
21, 28]。 
三、非同步策略 
重新編碼策略之相關演算法在編碼成 JSF 時，被證明效率為 AJHD=0.5n，已為最佳。
但仍有論文不斷突破，包括使用 w-NAF(數字 2 為底但不侷限於 0,1,及-1，有結合視窗法與
NAF 之感覺) [22, 23, 24, 25, 26, 27]，以及非同步策略(以不同加權數字運算) [11, 13, 14, 15]。 
基本之重新編碼策略主要是針對相同加權之數字做計算，為了進一步降低 AJHD，我
們可嘗試去尋找不同加權之數字，使得零與非零之整數對齊得更好，一個最簡單的想法如
下：當兩個數字同為零或同為非零時(考慮到未來之拓展，記作 xi~yi)，我們就直接處理相關
運算，一為零一為非零時(記作 xi ~/ yi)，可固定一數字(如 xi)，在往後掃描另一整數之下一數
字(如 yi-1)，以獲得效能改善。這個概念可由如下圖 3 之狀態圖來描述。當執行與一般相同
加權數字之運算時，狀態記為 S0，當往後掃描執行不同加權運算時，狀態記為 Sx。由 S0 轉
換為 Sx時，只需考慮 xi之計算效應，反之由 Sx轉換為 S0時，便需考慮 xi、yi、及 yi+1之計
算效應。如果狀態轉換條件設計好的話，便可進一步改進之效能。 
針對上述觀念，我們可列出各相關狀態轉換時，附屬之計算如表 1 所示： 
(xi,yi,yi+1) 
(xi)
Sx 
(xi,yi+1) 
S0 
(xi,yi) 
Shift xi 
Reverse shift xi 
圖 2 基本非同步策略之狀態圖 
 
表 1 非同步策略狀態轉換時附屬之計算 
狀態 附屬之計算 
S0 → S0 2 ( )i ix yc c a b= ⋅  
S0 → Sx 2 ( )ixc c a= ⋅  
Sx → Sx 122 ( )i ix yc c a b += ⋅  
Sx → S0 1 2( ) (i iy xc c b a b+= ⋅ ⋅ )iy  
為了降低 AJHD，當 xi ~/ yi可採用觀望之方式來促使零(或非零)數字能一起計算，此時
可先處理 xi之相對效應，將 yi保留與下一個 xi–1來一起處理(在下一回合即變成 yi+1與 xi)。
並將狀態從 S0 轉換為 Sx。在 Sx狀態下，如果 yi+1~xi則狀態維持不變。但返回時之計算需考
 3
 Algorithm 2 SU1 演算法 
I/P: a, b, x, y. 
O/P: c = axby 
Step:  
1. Compute and store ab and ab2; 
2. c = 1, state = S0; 
3. for (i = n–1 ; i ≥ 0; i= i–1) { 
4.   if (state = S0) { 
5.     if ( i ix y∼ ) 2 ( )i ix yc c a b= ⋅ ; 
6.     else state = Sx, 2 ( )ixc c a= ⋅ ;  
7.   } else { 
8.     if ( 1~i ix y +/ ) { 
9.       if ( i ix y∼ ) state = S0, )iya b⋅ ; 1 2( ) (i iy xc c b += ⋅
10.       else 2 )i( ) ( xc c b= ⋅ a⋅ ;  
11.     } 
12.     else 12 ;  2 ( )i ix yc c a b += ⋅
13.   } 
14. } 
15. if (state = Sx) C = C + (y0B); 
16. output C ; 
圖 4 SU1 演算法 
 
表2 SU1演算法之效能分析 
State yi+1 xiyi Computation ωi 1i i i+y x yP Line 
S0 → S0 x00 C = 2C 0 1/12 5 
S0 → Sx x01 C = 2C 0 1/12 6 
S0 → Sx x10 C = 2C + (A) 1 1/12 6 
S0 → S0 x11 C = 2C + (A+B) 1 1/12 5 
Sx → Sx 00x C = 2C 0 1/6 12 
Sx → Sx 010 C = 2C + (A) 1 1/12 10 
Sx → S0 011 C = 2C + (A+B) 1 1/12 9 
Sx → S0 100 C = 2(C+B) 1 1/12 9 
Sx → Sx 101 C = 2(C+B) 1 1/12 10 
Sx → Sx 11x C = 2C + (A+2B) 1 1/6 12 
 5
預備定理 3: 若 x、y 為兩個獨立之 NAF，則
1 1|i i i ix y x y
P + + 的概率如下： 
(1)  ˆ ˆ00|11 1P = , 
(2)  1ˆ ˆ ˆ ˆ ˆ ˆ 200|01 10|01 00|10 01|10P P P P= = = = , 
(3)  1ˆ ˆ ˆ ˆ00|00 401|00 10|00 11|00P P P P= = = = , 
(4)  . ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ01|11 10|11 11|11 01|01 11|01 10|10 11|10 0P P P P P P P= = = = = = =
預備定理 4: 若 x、y 為兩個獨立之 NAF，則
1 1i i i ix x y y
P + + 之值有 9 個為非零，分別為 、 、
、 、 、 、 、 及 ，其值均為
0000P ˆ0001P
ˆ0100
P ˆ ˆ0101P ˆ ˆ1010P ˆ0010P ˆ ˆ0110P 1ˆ000P ˆ ˆ1001P
1
9 。 
定理 2: SS1 演算法中，AJHD 49= 0.444n n≈ ( 1 1 1 19 n+ + + ，效能分析如表 3)。 
表3 SS1演算法之效能分析 
State xi+1yi+1 xiyi Computation ωi Paαbβ Line 
S0 → S0 00 00 C = 2C 0 1/9 5 
S0 → Sx 00 01ˆ C = 2C 0 1/9 6 
S0 → Sx 00 1ˆ 0 C = 2C ± A 1 1/9 6 
S0 → S0 00 1ˆ 1ˆ C = 2C ± (A±B) 1 1/9 5 
S0 → S0 1ˆ 1ˆ  00 C = 2C 0 1/9 5 
Sx → S0 0  1ˆ 00 C = 2(C±B) 1 1/9 9 
Sx → Sx 0  1ˆ 1ˆ 0 C = 2C ± (A±2B) 1 1/9 8 
Sx → S0 1ˆ 0 00 C = 2C 0 1/9 9 
Sx → Sx 1ˆ 0 01ˆ C = 2C 0 1/9 8 
從演算法之分析中，會發現當 ~i ix y/ 時，先處理值為零之數字較能減少乘法次數，由此
可將 SS1 改進為 DS1，意即先處理的數字不一定只侷限於 xi，而是 xi與 yi中值為零的那個數
字我們將演算法稱為 DS1 演算法(意即 Double-Signed one-stage)。因此 DS1 狀態轉變之判別
條件可由 SS1 增編，如圖 7 所示。 
Shift yi 
 7
 
圖 7 基本非同步策略之狀態圖轉換條件(DS1) 
Shift xi 
Reverse shift xiReverse shift yi
S0 
Sx Sy 
i ix y∼
ˆ( , ) (0,1)i ix y =ˆ( , ) (1,0)i ix y =
i ix y∼ i ix y∼
i ix y∼/ i ix y∼/   
定理 3: DS1 演算法中，AJHD 1127= 0.407n n≈ ( 1 1 1 19 n+ + + ，效能分析如表 5)。 
表5 DS1演算法之效能分析 
State xi+1yi+1 xiyi Computation ωi Paαbβ Line 
S0 → S0 00 00 C = 2C 0 1/9 5 
S0 → Sx 00 01ˆ C = 2C 0 1/9 6 
S0 → Sy 00 1ˆ 0 C = 2C 1 1/9 7 
S0 → S0 00 1ˆ 1ˆ C = 2C ± (A±B) 1 1/9 5 
S0 → S0 1ˆ 1ˆ  00 C = 2C 0 1/9 5 
Sx′ → S0 0  1ˆ 00 C = 2(C±B) 1 2/27 10 
Sx′ → Sx″ 0  1ˆ 1ˆ 0 C = 2C ± (A±2B) 1 2/27 9 
Sx″ → S0 1ˆ 0 00 C = 2C 0 1/27 10 
Sx″ → Sx′ 1ˆ 0 01ˆ C = 2C 0 1/27 9 
Sx″ → S0 0  1ˆ 00 C = 2C 0 1/27 13 
Sx″ → Sx′ 0  1ˆ 1ˆ 0 C = 2C 0 1/27 12 
Sx′ → S0 1ˆ 0 00 C = 2(C±A) 1 2/27 13 
Sx′ → Sx″ 1ˆ 0 01ˆ C = 2C ± (2A±B) 1 2/27 12 
概括而論，非同步策略只是一個方向我們可以定出效果良好之轉換條件與附屬計算來
提升多指數運算之效率。在此所介紹之方法如 SU1、SS1、及 DS1 所演算法需要之額外記憶
體不多，分別為 1、2、及 4 個暫存器，但在效能上確有良好之效果。 
四、比較、討論及一般化 
廣義而言，非同步策略也可視為另一種層面之之重新編碼，但在效能上比一般型態之
重新編碼法來的好，一個很有趣的想法是，如果將這些策略應用於已經重新編碼之表示法，
效果是否會互相排斥抑或再度增強。我們以 Algorithm 1, 4, 5 對 NAF、DJM、及 JSF 三種編
碼來模擬(SU1 因為是二進位表示法，因此無重新編碼之考量)，可得如表 6 之重要結果。 
表6 應用非同步策略於不同BSD表示法之效能比較 
AJHD Algorirthm 1(Basic) Algorithm 4(SS1) Algorithm 5(DS1) 
2 NAFs 0.556n 0.444n 0.407n 
Recode by DJM 0.534n 0.453n 0.414n 
Recode to JSF 0.500n 0.469n 0.438n 
上述之結果是模擬 10,000 個 1,024 位元之整數 (這些整數是由 Java 2 平台之
java.security.SecureRandom所產生符合 FIPS 140-2 對亂數之要求)，我們發現非同步策略
對於基本之 NAF 型式之亂數具有較佳之結果。 
在二進位表示法中 SU1 的方法可推廣到 m 位元版本 ，亦即基底以 取代 2。 
圖 9 之演算法表示出這個構想。但是由於可能出現之值變多了，因此需要的記憶體也會指
數成長。比較確定的數據為在以 為基底情形，必須要有
1
mSU ( 2 )mβ =
( 2 )mβ = 2(2 5)β − 暫存器來儲存各種
 9
 之前所應用之非同步策略演算法一階(one stage)之方式，意即在下一回合沒有找到搭配
之數字，即返回原狀態。比較實用之方式將勢將其擴展為多階以期有有更好之結果。以 SU1
為基礎，一個可行如構想如下：當(xi,yi)=(0,1)時，就往後面的數字看，意即再來所處理的數
字對為 (xi,yi+1)=(0,1)，再一級一級往下看(因為可能可以減少一個乘法 )。反之遇到當
(xi,yi)=(1,0)時，就返回前一級(可避免級數增加，且不增加運算)。當然要設一個終點，以 t
級而言，簡稱為 SUt演算法，如圖 11 所示。 
S0 
(xi,yi) Stage 
 11
圖 10 SUt 演算法之狀態轉換考量 
SUt之分析如定理 4， [14,15]。不同 t 值對應之 AJHD 如表 9。 
定理 4: SUt演算法中，AJHD
1
1
3 2
5 3 2
= t tt t n
−
−
−
⋅ − 。 
證明:   
設 tp a′′ =  ,則 1 1 24 2 3t t t tp p p p′ ′ ′′ ′= + → = a     
1 1 1 2
1 12 4 2 3t t t t tp p p p p− −′′ ′′ ′ ′′ ′′= + + → = a     
21 1 1 2
1 1 1 14 4 4 3( )t t t t tp p p p p− − − −′ ′ ′ ′′ ′= + + → = a     
21 1 1 1 2
1 1 1 2 24 4 4 2 3( )t t t t t tp p p p p p− − − − −′′ ′ ′′ ′ ′′ ′′= + + + → = a  
   :    
11 1 1 2
14 4 4 3( )
t i
i i i i ip p p p p
− +
+′ ′ ′ ′′ ′= + + → = a     
11 1 1 1 2
1 1 14 4 4 2 3( )
t i
i i i i i ip p p p p p
− +
+ − −′′ ′ ′ ′′ ′′ ′′= + + + → = a  
Sx1 
(xi,yi+1) Stage 
Sx2 
(xi,yi+2) Stage 
Sxt 
(xi,yi+ ) Stage t
01
00,10,11 
01
10 
00,11
01
10
00,11
10 
00,01,11 
p0 
p1 p2 pt 
 表8 SUt演算法之效能與記憶體需求 
SUt 0 1 2 … T … ∞ 
AJHD 0.750n 0.667n 0.636n …
1
1
3 2
5 3 2
t t
t t
−
−
−
⋅ −  … 0.600n 
memory 4 6 (5) 7 … t+5 … ∞ 
 
四、結論 
在記憶體受到限制之環境下，多指數運算重新編碼策略之相關演算法，除了基本之重
新編碼演算法外，計畫中發展非同步策略之概念，基本一階形式之SU1、SS1、及DS1 等演
算法，就能對效率有明顯提升，而這類演算法之特色與優點：具有良好之效能、不侷限於
BSD表示法。此外衍生到多階之SUt時、記憶體需求呈線性成長等。多指數運算也可再應用
於單一指數運算。假設計算c=dz為例，一個最簡單之方法是z摺疊來計算。設z=(zh,zl)，其中
zh為高的 12 n位數字而zl為低的 12 n位數 ，如此，可令 a d字 = 、 lz 、 lb d= x z= 、 hy z= ，則 z= 
axb 。換言之，若使用SS1 演算法於n個數字之單一指數運算時，其AJHD=
c=d
y 1 4
2 9 0.222n n× ≈ ，
若使用DS 數字之單一指數運算時，其 J D=1 演算法於n個 HA 1 112 27 0.204n n× ≈ ，效果相當不錯
(計算b所需之 12 n個平方計算及後來作多指數運算之 12 平方計算，與原來計算所需之n個
計算需求相同)。 
n個
平方
在軟硬體設計時，都是值得參考之觀點。若以單一 NAF 之非零數字為 13 n 的角度來觀，
這類演算法之 AJHD 仍有可資成長之處，此外多階運算在 BSD 表示法之分析仍是一個待探
討之領域，在研究與實務設計上都是一個有趣的研究課題。 
 
參考文獻 
[1] T. ElGamal, “A public key cryptosystem and a signature scheme based on discrete 
logarithms,” IEEE Transactions on Information Theory, vol. 31, no. 4, pp. 469–472, Jul. 
1985. 
[2] D. E. Knuth, The Art of Computer Programming, vol 2. Seminumerical algorithms, 
Addison-Wesley, 1969, 2nd edition 1982, 3rd edition 1998.  
[3] Ç. K. Koç, “High-speed RSA implementations,” RSA Laboratories, Technique Notes TR201, 
Available from URL: http://www.rsasecurity.com/ rsalabs/, pp. 9–32, Nov. 1994. 
[4] D. M. Gordon, “A survey of fast exponentiation methods,” Journal of Algorithms, vol. 27, pp. 
129–146, 1998. 
[5] S. M. Yen, C. S. Laih, and A. K. Lenstra, “Multi-exponentiation,” IEE Proceedings, 
Computers and Digital Techniques, vol. 141, no. 6, pp. 325–326, 1994. 
 13
 15
 
[22] H. Cohen, A. Miyagi, and T. Ono, “Efficient elliptic curve exponentiation using mixed 
coordinates,” in Advances in Cryptology–AsiaCrypt’98, LNCS 1514. Springer-Verlag, pp. 
51–65, 1998.  
[23] J. Muir and D. Stinson, “Minimality and other properties of the width-w nonadjacent form,” 
University of Waterloo, Tech. Rep. CORR 2004-08, 2004, http://www.cacr.math.uwaterloo.ca. 
Aug., 2005.  
[24] J. Muir and D. Stinson, “Minimality and other properties of the width-w nonadjacent form,” 
University of Waterloo, Tech. Rep. CORR 2004-08, 2004, http://www.cacr.math.uwaterloo.ca. 
Aug., 2005.  
[25] E. Dahmen, K. Okeya, and T. Takagi, “An Advanced Method for Joint Scalar Multiplications 
on Memory Constraint Devices,” 2nd European Workshop on Security and Privacy in Ad hoc 
and Sensor Networks -- ESAS 2005, LNCS 3813, Springer-Verlag, pp. 189-204, 2005. 
[26] B. Kuang, Y. Zhu, and Y. Zhang, "An Improved Algorithm for uP+vQ using JSF3,” 
Proceedings of Applied Cryptography and Network Security ACNS 2004, LNCS 3089, 
Springer-Verlag, pp. 467-478, 2004. 
[27] R. M. Avanzi, “The Complexity of Certain Multi-Exponentiation Techniques in 
Cryptography,” Journal of Cryptology, vol 18, no.4, pp. 357-373, 2005. 
[28] W. C. Yang, “Cryptographic Multi-computation with Integer Similarity Strategy,” Final 
Report of NSC project (NSC 94-2213-E-156-004-), 2006. 
 
行政院國家科學委員會專題研究計畫成果報告 
 
記憶體線性成長之快速指數及多指數運算 
Fast Exponentiation and Multi-exponentiation with Linear Memory Requirement 
 
z 中文摘要 
 
關鍵字: 指數運算、多指數運算、聯合稀疏表示法、非同步策略 
 
利用摺疊(folding)技巧，可將多指數運算之技巧應用於指數運算，因此改善多指
數運算之演算法，如預先計算法(pre-computation method)及表示重編法(recoding 
method)，皆可用於改善指數運算。前者多用於記憶體充足之環境，後者常見於記憶
體受限之環境。本計劃以記憶體受限制之環境為出發點，考慮記憶體呈線性成長之
演算法。 
有別於重新編碼之策略，本計劃採用我們所提出來一個全新之非同步策略，來
設計多指數運算演算法。非同步策略在計算過程中並不一定同時處理相同權位之數
字，以利於將非 0 數字能夠盡量一起處理。這個方式可藉由將 x 或 y 之數字移位來
達成。正因為非同步策略未做編碼之動作，因此也可用於單一編碼形式之二進位表
示法，目前最通用的為我們法展之 SUt法。考慮 a bx y 之計算，其中 x 及 y 為 n 位元整
數，其效能與空間之描述如下表所示： 
 
s 0 1 2 … t 
不含平方之 
乘法次數 0.750n+1 0.667n+3 0.636n+5 … 
1
1
3 2
5 3 2
(2 1)t tt t t
−
−
−
⋅ − + +  
所需之 
暫存器個數 4 6 (5) 7 … t+5 
 
為了實現記憶體呈線性成長之快速指數及多指數運算之演算法，我們提出之全
新演算法證明效率是理想的且記憶體呈線性成長。相關理論與技術於今年 2 月發表
於 IEEE Transactions on Computers。 
 
 
 ii
行政院國家科學委員會專題研究計畫成果報告 
 
記憶體線性成長之快速指數及多指數運算 
Fast Exponentiation and Multi-exponentiation with Linear Memory Requirement 
 
一、前言 
多指數運算是 ElGamal 類型密碼元件[1, 2, 3, 4]中最重要也是最耗費時間之運算，此外
應用折疊(folding)之概念也可將其應用於快速指數運算。由此有效率之多指數運算演算法研
究有其必要性。本計畫探討加速多指數運算之策略及應用，提出一個全新之非同步策略概
念，藉以在不同之環境實現相關密碼元件時，都能夠挑選出最適當有效之演算法來設計。 
關於多指數運算基礎演算法之整理與重要概念，包括單一指數運算演算法與多指數運
算觀念等，可容易在相關書籍及文獻論文中發現[1, 2, 3, 4, 5, 6]，這些演算法提供多重運算
良好之運算基礎。進一步加速多指數運算之基本演算法策略包括以下兩大類： 
(1) 重新編碼策略(Recoding strategy)：將二進位帶號數字(Binary Signed-digit, BSD)表
示法之最低加權表示法加以重新編碼，以便進一步找出較低平均聯合加權(Average 
joint Hamming distance, AJHD)之表示法。此類型最基本演算法包括 Dimitrov、
Jullien、及 Miller 提出之 8 項法則(DJM 法則)[7]以及 Solinas 所提出之聯合稀疏表
示法(Joint sparse form, JSF)[8]。此類方法之記憶體需求只需因應 BSD 表示法所需
少量空間。因此一般應用於記憶體較受限制之環境。 
(2) 預先計算策略(Pre-computing strategy)：將一些計算可能應用到之數值預先計算出
並儲存，主要之技巧在於如何以最少之記憶體達到最佳之效益。典型之演算法包
括：基本之滑動視窗法(Sliding window methods) [2, 6]、由 Brickelland、Gordon、
McCurley、及 Wilson 提出之 BGMW 演算法[9]以及 Lim 及 Lee 提出之 Lim-Lee 演
算法[10]，我們在此一部份亦有改善[16]。由於往往需要使用大量之表格，因此大
都應用於記憶體充足之環境。此外，預先計算策略可搭配重新編碼策略使用來進
一步改進效能，亦即對於帶號數字表示法來儲存預先計算之資料。 
由於多指數運算策略之各演算法效能取決於預先計算次數(Pre-computing Count, 
PCNT)及非零欄位之個數(即 AJHD)。PCNT 與整數長度無關而 AJHD 與整數之長度有關。
為了方便介紹各演算法之效能，我們假設本文使用於運算之整數長度均為 n 位元，如採用
基本之二進位多指數運算演算法[1, Section V.B]，其效能之參考指標為 341 n+ (須預先計算
AB, PCNT=1；非零之數字對為 34 n，AJHD= 34 n )。在純粹考慮重新編碼策略之效能，由於
PCNT 較小可以忽略，因此往往論文之分析只考慮 AJHD，本文亦以 AJHD 為基準來分析相
關演算法之效能。 
 1
之聯合加權。因此才有更進一步之論文提出，如DJM法及JSF，這些方法之描述可參考 [7, 8, 
21, 28]。 
三、非同步策略 
重新編碼策略之相關演算法在編碼成 JSF 時，被證明效率為 AJHD=0.5n，已為最佳。
但仍有論文不斷突破，包括使用 w-NAF(數字 2 為底但不侷限於 0,1,及-1，有結合視窗法與
NAF 之感覺) [22, 23, 24, 25, 26, 27]，以及非同步策略(以不同加權數字運算) [11, 13, 14, 15]。 
基本之重新編碼策略主要是針對相同加權之數字做計算，為了進一步降低 AJHD，我
們可嘗試去尋找不同加權之數字，使得零與非零之整數對齊得更好，一個最簡單的想法如
下：當兩個數字同為零或同為非零時(考慮到未來之拓展，記作 xi~yi)，我們就直接處理相關
運算，一為零一為非零時(記作 xi ~/ yi)，可固定一數字(如 xi)，在往後掃描另一整數之下一數
字(如 yi-1)，以獲得效能改善。這個概念可由如下圖 3 之狀態圖來描述。當執行與一般相同
加權數字之運算時，狀態記為 S0，當往後掃描執行不同加權運算時，狀態記為 Sx。由 S0 轉
換為 Sx時，只需考慮 xi之計算效應，反之由 Sx轉換為 S0時，便需考慮 xi、yi、及 yi+1之計
算效應。如果狀態轉換條件設計好的話，便可進一步改進之效能。 
針對上述觀念，我們可列出各相關狀態轉換時，附屬之計算如表 1 所示： 
(xi,yi,yi+1) 
(xi)
Sx 
(xi,yi+1) 
S0 
(xi,yi) 
Shift xi 
Reverse shift xi 
圖 2 基本非同步策略之狀態圖 
 
表 1 非同步策略狀態轉換時附屬之計算 
狀態 附屬之計算 
S0 → S0 2 ( )i ix yc c a b= ⋅  
S0 → Sx 2 ( )ixc c a= ⋅  
Sx → Sx 122 ( )i ix yc c a b += ⋅  
Sx → S0 1 2( ) (i iy xc c b a b+= ⋅ ⋅ )iy  
為了降低 AJHD，當 xi ~/ yi可採用觀望之方式來促使零(或非零)數字能一起計算，此時
可先處理 xi之相對效應，將 yi保留與下一個 xi–1來一起處理(在下一回合即變成 yi+1與 xi)。
並將狀態從 S0 轉換為 Sx。在 Sx狀態下，如果 yi+1~xi則狀態維持不變。但返回時之計算需考
 3
 Algorithm 2 SU1 演算法 
I/P: a, b, x, y. 
O/P: c = axby 
Step:  
1. Compute and store ab and ab2; 
2. c = 1, state = S0; 
3. for (i = n–1 ; i ≥ 0; i= i–1) { 
4.   if (state = S0) { 
5.     if ( i ix y∼ ) 2 ( )i ix yc c a b= ⋅ ; 
6.     else state = Sx, 2 ( )ixc c a= ⋅ ;  
7.   } else { 
8.     if ( 1~i ix y +/ ) { 
9.       if ( i ix y∼ ) state = S0, )iya b⋅ ; 1 2( ) (i iy xc c b += ⋅
10.       else 2 )i( ) ( xc c b= ⋅ a⋅ ;  
11.     } 
12.     else 12 ;  2 ( )i ix yc c a b += ⋅
13.   } 
14. } 
15. if (state = Sx) C = C + (y0B); 
16. output C ; 
圖 4 SU1 演算法 
 
表2 SU1演算法之效能分析 
State yi+1 xiyi Computation ωi 1i i i+y x yP Line 
S0 → S0 x00 C = 2C 0 1/12 5 
S0 → Sx x01 C = 2C 0 1/12 6 
S0 → Sx x10 C = 2C + (A) 1 1/12 6 
S0 → S0 x11 C = 2C + (A+B) 1 1/12 5 
Sx → Sx 00x C = 2C 0 1/6 12 
Sx → Sx 010 C = 2C + (A) 1 1/12 10 
Sx → S0 011 C = 2C + (A+B) 1 1/12 9 
Sx → S0 100 C = 2(C+B) 1 1/12 9 
Sx → Sx 101 C = 2(C+B) 1 1/12 10 
Sx → Sx 11x C = 2C + (A+2B) 1 1/6 12 
 5
預備定理 3: 若 x、y 為兩個獨立之 NAF，則
1 1|i i i ix y x y
P + + 的概率如下： 
(1)  ˆ ˆ00|11 1P = , 
(2)  1ˆ ˆ ˆ ˆ ˆ ˆ 200|01 10|01 00|10 01|10P P P P= = = = , 
(3)  1ˆ ˆ ˆ ˆ00|00 401|00 10|00 11|00P P P P= = = = , 
(4)  . ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ ˆ01|11 10|11 11|11 01|01 11|01 10|10 11|10 0P P P P P P P= = = = = = =
預備定理 4: 若 x、y 為兩個獨立之 NAF，則
1 1i i i ix x y y
P + + 之值有 9 個為非零，分別為 、 、
、 、 、 、 、 及 ，其值均為
0000P ˆ0001P
ˆ0100
P ˆ ˆ0101P ˆ ˆ1010P ˆ0010P ˆ ˆ0110P 1ˆ000P ˆ ˆ1001P
1
9 。 
定理 2: SS1 演算法中，AJHD 49= 0.444n n≈ ( 1 1 1 19 n+ + + ，效能分析如表 3)。 
表3 SS1演算法之效能分析 
State xi+1yi+1 xiyi Computation ωi Paαbβ Line 
S0 → S0 00 00 C = 2C 0 1/9 5 
S0 → Sx 00 01ˆ C = 2C 0 1/9 6 
S0 → Sx 00 1ˆ 0 C = 2C ± A 1 1/9 6 
S0 → S0 00 1ˆ 1ˆ C = 2C ± (A±B) 1 1/9 5 
S0 → S0 1ˆ 1ˆ  00 C = 2C 0 1/9 5 
Sx → S0 0  1ˆ 00 C = 2(C±B) 1 1/9 9 
Sx → Sx 0  1ˆ 1ˆ 0 C = 2C ± (A±2B) 1 1/9 8 
Sx → S0 1ˆ 0 00 C = 2C 0 1/9 9 
Sx → Sx 1ˆ 0 01ˆ C = 2C 0 1/9 8 
從演算法之分析中，會發現當 ~i ix y/ 時，先處理值為零之數字較能減少乘法次數，由此
可將 SS1 改進為 DS1，意即先處理的數字不一定只侷限於 xi，而是 xi與 yi中值為零的那個數
字我們將演算法稱為 DS1 演算法(意即 Double-Signed one-stage)。因此 DS1 狀態轉變之判別
條件可由 SS1 增編，如圖 7 所示。 
Shift yi 
 7
 
圖 7 基本非同步策略之狀態圖轉換條件(DS1) 
Shift xi 
Reverse shift xiReverse shift yi
S0 
Sx Sy 
i ix y∼
ˆ( , ) (0,1)i ix y =ˆ( , ) (1,0)i ix y =
i ix y∼ i ix y∼
i ix y∼/ i ix y∼/   
定理 3: DS1 演算法中，AJHD 1127= 0.407n n≈ ( 1 1 1 19 n+ + + ，效能分析如表 5)。 
表5 DS1演算法之效能分析 
State xi+1yi+1 xiyi Computation ωi Paαbβ Line 
S0 → S0 00 00 C = 2C 0 1/9 5 
S0 → Sx 00 01ˆ C = 2C 0 1/9 6 
S0 → Sy 00 1ˆ 0 C = 2C 1 1/9 7 
S0 → S0 00 1ˆ 1ˆ C = 2C ± (A±B) 1 1/9 5 
S0 → S0 1ˆ 1ˆ  00 C = 2C 0 1/9 5 
Sx′ → S0 0  1ˆ 00 C = 2(C±B) 1 2/27 10 
Sx′ → Sx″ 0  1ˆ 1ˆ 0 C = 2C ± (A±2B) 1 2/27 9 
Sx″ → S0 1ˆ 0 00 C = 2C 0 1/27 10 
Sx″ → Sx′ 1ˆ 0 01ˆ C = 2C 0 1/27 9 
Sx″ → S0 0  1ˆ 00 C = 2C 0 1/27 13 
Sx″ → Sx′ 0  1ˆ 1ˆ 0 C = 2C 0 1/27 12 
Sx′ → S0 1ˆ 0 00 C = 2(C±A) 1 2/27 13 
Sx′ → Sx″ 1ˆ 0 01ˆ C = 2C ± (2A±B) 1 2/27 12 
概括而論，非同步策略只是一個方向我們可以定出效果良好之轉換條件與附屬計算來
提升多指數運算之效率。在此所介紹之方法如 SU1、SS1、及 DS1 所演算法需要之額外記憶
體不多，分別為 1、2、及 4 個暫存器，但在效能上確有良好之效果。 
四、比較、討論及一般化 
廣義而言，非同步策略也可視為另一種層面之之重新編碼，但在效能上比一般型態之
重新編碼法來的好，一個很有趣的想法是，如果將這些策略應用於已經重新編碼之表示法，
效果是否會互相排斥抑或再度增強。我們以 Algorithm 1, 4, 5 對 NAF、DJM、及 JSF 三種編
碼來模擬(SU1 因為是二進位表示法，因此無重新編碼之考量)，可得如表 6 之重要結果。 
表6 應用非同步策略於不同BSD表示法之效能比較 
AJHD Algorirthm 1(Basic) Algorithm 4(SS1) Algorithm 5(DS1) 
2 NAFs 0.556n 0.444n 0.407n 
Recode by DJM 0.534n 0.453n 0.414n 
Recode to JSF 0.500n 0.469n 0.438n 
上述之結果是模擬 10,000 個 1,024 位元之整數 (這些整數是由 Java 2 平台之
java.security.SecureRandom所產生符合 FIPS 140-2 對亂數之要求)，我們發現非同步策略
對於基本之 NAF 型式之亂數具有較佳之結果。 
在二進位表示法中 SU1 的方法可推廣到 m 位元版本 ，亦即基底以 取代 2。 
圖 9 之演算法表示出這個構想。但是由於可能出現之值變多了，因此需要的記憶體也會指
數成長。比較確定的數據為在以 為基底情形，必須要有
1
mSU ( 2 )mβ =
( 2 )mβ = 2(2 5)β − 暫存器來儲存各種
 9
 之前所應用之非同步策略演算法一階(one stage)之方式，意即在下一回合沒有找到搭配
之數字，即返回原狀態。比較實用之方式將勢將其擴展為多階以期有有更好之結果。以 SU1
為基礎，一個可行如構想如下：當(xi,yi)=(0,1)時，就往後面的數字看，意即再來所處理的數
字對為 (xi,yi+1)=(0,1)，再一級一級往下看(因為可能可以減少一個乘法 )。反之遇到當
(xi,yi)=(1,0)時，就返回前一級(可避免級數增加，且不增加運算)。當然要設一個終點，以 t
級而言，簡稱為 SUt演算法，如圖 11 所示。 
S0 
(xi,yi) Stage 
 11
圖 10 SUt 演算法之狀態轉換考量 
SUt之分析如定理 4， [14,15]。不同 t 值對應之 AJHD 如表 9。 
定理 4: SUt演算法中，AJHD
1
1
3 2
5 3 2
= t tt t n
−
−
−
⋅ − 。 
證明:   
設 tp a′′ =  ,則 1 1 24 2 3t t t tp p p p′ ′ ′′ ′= + → = a     
1 1 1 2
1 12 4 2 3t t t t tp p p p p− −′′ ′′ ′ ′′ ′′= + + → = a     
21 1 1 2
1 1 1 14 4 4 3( )t t t t tp p p p p− − − −′ ′ ′ ′′ ′= + + → = a     
21 1 1 1 2
1 1 1 2 24 4 4 2 3( )t t t t t tp p p p p p− − − − −′′ ′ ′′ ′ ′′ ′′= + + + → = a  
   :    
11 1 1 2
14 4 4 3( )
t i
i i i i ip p p p p
− +
+′ ′ ′ ′′ ′= + + → = a     
11 1 1 1 2
1 1 14 4 4 2 3( )
t i
i i i i i ip p p p p p
− +
+ − −′′ ′ ′ ′′ ′′ ′′= + + + → = a  
Sx1 
(xi,yi+1) Stage 
Sx2 
(xi,yi+2) Stage 
Sxt 
(xi,yi+ ) Stage t
01
00,10,11 
01
10 
00,11
01
10
00,11
10 
00,01,11 
p0 
p1 p2 pt 
 表8 SUt演算法之效能與記憶體需求 
SUt 0 1 2 … T … ∞ 
AJHD 0.750n 0.667n 0.636n …
1
1
3 2
5 3 2
t t
t t
−
−
−
⋅ −  … 0.600n 
memory 4 6 (5) 7 … t+5 … ∞ 
 
四、結論 
在記憶體受到限制之環境下，多指數運算重新編碼策略之相關演算法，除了基本之重
新編碼演算法外，計畫中發展非同步策略之概念，基本一階形式之SU1、SS1、及DS1 等演
算法，就能對效率有明顯提升，而這類演算法之特色與優點：具有良好之效能、不侷限於
BSD表示法。此外衍生到多階之SUt時、記憶體需求呈線性成長等。多指數運算也可再應用
於單一指數運算。假設計算c=dz為例，一個最簡單之方法是z摺疊來計算。設z=(zh,zl)，其中
zh為高的 12 n位數字而zl為低的 12 n位數 ，如此，可令 a d字 = 、 lz 、 lb d= x z= 、 hy z= ，則 z= 
axb 。換言之，若使用SS1 演算法於n個數字之單一指數運算時，其AJHD=
c=d
y 1 4
2 9 0.222n n× ≈ ，
若使用DS 數字之單一指數運算時，其 J D=1 演算法於n個 HA 1 112 27 0.204n n× ≈ ，效果相當不錯
(計算b所需之 12 n個平方計算及後來作多指數運算之 12 平方計算，與原來計算所需之n個
計算需求相同)。 
n個
平方
在軟硬體設計時，都是值得參考之觀點。若以單一 NAF 之非零數字為 13 n 的角度來觀，
這類演算法之 AJHD 仍有可資成長之處，此外多階運算在 BSD 表示法之分析仍是一個待探
討之領域，在研究與實務設計上都是一個有趣的研究課題。 
 
參考文獻 
[1] T. ElGamal, “A public key cryptosystem and a signature scheme based on discrete 
logarithms,” IEEE Transactions on Information Theory, vol. 31, no. 4, pp. 469–472, Jul. 
1985. 
[2] D. E. Knuth, The Art of Computer Programming, vol 2. Seminumerical algorithms, 
Addison-Wesley, 1969, 2nd edition 1982, 3rd edition 1998.  
[3] Ç. K. Koç, “High-speed RSA implementations,” RSA Laboratories, Technique Notes TR201, 
Available from URL: http://www.rsasecurity.com/ rsalabs/, pp. 9–32, Nov. 1994. 
[4] D. M. Gordon, “A survey of fast exponentiation methods,” Journal of Algorithms, vol. 27, pp. 
129–146, 1998. 
[5] S. M. Yen, C. S. Laih, and A. K. Lenstra, “Multi-exponentiation,” IEE Proceedings, 
Computers and Digital Techniques, vol. 141, no. 6, pp. 325–326, 1994. 
 13
