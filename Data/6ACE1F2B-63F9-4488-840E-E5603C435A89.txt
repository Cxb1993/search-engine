IEEE Transactions on Circuits and Systems for Video Technology, April, Vol. 18, 
No. 4, 2008, pp. 478-486 (SCI/EI) 
3. (2008) Yu-Shuen Wang, Tong-Yee Lee, “Curve Skeleton Extraction Using 
Non-Linear Least Squares Optimization,” IEEE Transactions on Visualization and 
Computer Graphics, July/Aug, Vol. 14, No. 4. 2008, pp. 926-936 (SCI/EI). 
4. (2008) Yu-Shuen Wang, Tong-Yee Lee, ““Example-driven Animation Synthesis ” 
The Journal of Visual Computer (selected as a special issue of CGI 2008, Graphics 
International 2008, accepting rate: 39/220=17%,Istanbul, Turkey, June 2008) 
(SCI/EI) 
5. (2008) Yu-Shuen Wang, Chao-Hung Lin, Tong-Yee Lee, “Interactive Model 
Decomposition Using Protrusive Graph,” International Journal of Innovative 
Computing, Information and Control (IJICIC), Vol.4, No.8, August 2008, pp. 
1887-1896. (SCI/EI) 
6. (2008) Tong-Yee Lee, Ping-Hsien Lin, Shao-Wei Yen, Ming-Te Chi, Zhi-Yuan Yao, 
Jin-Lung Lin, “Exaggeration Cloning From Example Sequence,” (Invited paper) to 
appear International Journal of Computer Sciences and Engineering Systems 
(preliminary version appeared in CASA 2007, June 11th-13th, 2007,Belgium) 
7. (2007) Tong-Yee Lee, Chao-Hung Lin, Hung-Kuo Chu, Yu-Shuen Wang, 
Shao-Wei Yen, Chang-Rung Tsai, "Mesh Pose-Editing Using Examples", Computer 
Animation and Virtual Worlds Journal, Volume 18, Issue 4-5 (September - 
December 2007), pp. 235-245. (SCI/EI) 
8. (2006) Tong-Yee Lee, Yu-Shuen Wang , Tai-Guang Chen, “Segmenting a 
Deforming Mesh into Near-Rigid Components,” The Journal of Visual Computer 
(special issue of The 14th Pacific Conference on Computer Graphics and 
Applications, (Pacific Graphics 2006, accepted rate = 17%) Vol. 22, No. 9-11, 
Sept. 2006, pp. 729-739 (SCI/EI) 
 
 
 
 
 
can specify proper and fewer markers between the meshes and thus saving the operating 
time on this tedious work. 
 
The main contribution of this paper is providing an easy-to-use animating system for 
non-professionals, which assembles existing animations to create a new animation. The 
proposed method also informs the user about putting markers on the proper and right 
positions. Novice users do not have to learn complicated operations and are able to create 
animations easily. 
 
 
Fig. 1 We transfer the animation of the eagle’s wings, horse’s body and the warrior’s arms 
to the celestial monster. The different parts of the animations are well-blended and 
synthesize a new and natural animation 
 
2  Related Work 
 
Computer animation is a very active area of research. In the past, a significant number of 
techniques have been proposed. Therefore, we are not going to give a very thorough 
overview of such large research topics, but review the related works in the following 
categories. 
 
Skeleton-based Animation:  The most common method used to create animations is 
skeleton subspace deformation. In this category the mesh is driven by editing the skeleton. 
The greatest advantage of this method is its speed, which can be accelerated by hardware. 
However, it is always time-consuming to rig and skin a model for even professional 
animators. In addition, the skeleton-based method cannot deal with non-rigid models like 
a face and potentially suffers from the so-called ``collapsing joint'' or ``candy wrapper'' 
defects, and thus requires better solutions such as [5, 8, 13, 15] to reduce this 
shortcoming. 
 
Motion Capture Based Animation: The motion capture system can be used to create 
realistic animations by recording an actor's motion in the real world. There is a number of 
conventional marker sets varying from markers for capturing the sequence of human 
poses [1, 2, 6] or facial expressions [4] to hundreds for capturing detailed skin 
deformations [18]. However, the equipment is very expensive and only a few people can 
access it to record the motion from real world. 
we can still obtain the correct animation. 
 
In [22], although they put more markers on the horse's head to better approximate the 
elephant's head, we found that it was not necessary and only increased the user's effort. 
We believe the work in [22] can also work well when the user selects the markers based 
on Section 3.1.1. However, in some cases like  
Fig. 4, their algorithm computes incorrect correspondence and therefore the deformation 
was transferred to the wrong triangles. Our correspondence algorithm does not have this 
problem. 
 
3.1.1  Marker Indication 
 
Similar to [11, 12], we computed the maximum difference from the deformation gradients 
between adjacent faces among all frames of the given animation to represent the 
flexibility of each triangle. The equation is formulated as:  
 
 { } ,,,2
1
max UjiDDG Ffjfi
kf
ij ∈−=
= …
 (1) 
 
where  is the set of adjacent faces,  is the number of frames in the animation 
sequence, and  is the deformation gradient that transforms the triangle from the 
reference pose to the animation pose. The flexibility of triangle  is thus determined by 
averaging . As  
Fig. 3 shows, the colors close to red represent the regions are flexible and the 
deformations around these regions are quite different. The user needs to set markers at 
these positions to enhance the accuracy of correspondence. Otherwise, the deformation 
transferred to improper triangles will cause serious mistakes.   
 
 
 ,,2 CcccVL iii ∈−′+′ ∑ω  (2) 
 
where  is the Laplacian operator,  is the reconstructed vertices,  denotes 
the set of constrained vertices and  is a large number to enforce the soft constraint 
(  in our experiment results). Here, we set coefficients of the Laplacian 
operator by the mean value coordinate, where  
 
  
 
( ) ( )
{ }∑∈=−
+=
Eki
ki
ji
ijij
ij iq
,
,
2tan2tan δυυ
βαδ  (3) 
 
 is the set of edges between two nearby vertices and  and  are the angles 
depicted in Fig. 5. To solve for the vertex positions of the deformed mesh, we transform 
the equations into an over- determined linear system  
 
 ⎥⎦
⎤⎢⎣
⎡=⎥⎦
⎤⎢⎣
⎡ ′⎥⎦
⎤⎢⎣
⎡
CC
VL 0
|0 ω  (4) 
 
Since the sparse matrix can be solved with very low cost, our algorithm computes the 
correspondence efficiently. 
 
Fig. 5 The angles used in the mean value coordinates for edge {i, j}. 
 
3.1.3  Correspondence Map 
 
Once the source and the target meshes are warped into similar shapes, we determine the 
Fig. 7, the careless scribbling causes kinematic problems. The elephant's forelegs are bent 
at the wrong positions and look very strange. In addition, the angle at the joint is too 
sharp because the two deformations are not well-blended. Thus the selection system must 
be more intelligent and the different deformations between partitions must be smoothly 
interpolated. In the following, we will describe how to obtain natural and smooth 
animations. 
 
 
Fig. 8 Our system refines the regions after the user's selection. The regions in blue are the 
triangles refined by our system. The colors between blue and white mean that the regions 
are used to blend the different deformations. 
   
3.2.1  Intelligent Scribbling 
 
The source and the target meshes are compatible after establishing the correspondence 
map. Therefore, we can obtain the flexibility of the target triangle from the source mesh 
and then separate the target mesh into several partitions according to a threshold  
(usually is 0.1). In the beginning we set each triangle as an individual partition. After that, 
we merge the nearby partitions if their flexibilities are both less than . This process will 
loop until there is no partition left to merge. We consider the partitions with more than 
one triangle as stiff partitions which copy the deformations of the source meshes, and 
the rest are flexible partitions, which are used to blend the animations between different 
stiff partitions. Note that the smaller  means the deformations within the partition are 
more similar, and thus the extracted stiff partitions are more rigid. 
 
When more than half the number of triangles in a partition is selected, we consider that 
all triangles in that partition are selected. Otherwise we remove all the triangles from 
being transferred deformation. We call this approach intelligent scribbling. This is 
because the deformation in the same stiff partition must be similar, especially when 
kinematic deformations are transferred. From our experience, we observed that this is 
very convenient and helpful for the user to scribble the regions of interest. In addition, 
this intelligent design can prevent some unexpected artifacts caused by careless selection. 
For example in  
Fig. 8, with the aid of our intelligent scribbling, the refined regions are adequate for the 
kinematics, and the boundaries are well-blended. 
 
3.2.2  Deformation Blending between Partitions 
 
When the source animation is transferred to the target mesh, we should blend this 
animation with the transferred animation by the triangles in the flexible partitions. For 
this reason, we first compute the blending weight of each triangle and then determine the 
to modify the orientation of the selected partition. In addition, we also provide a 
user-friendly interface for the user to edit the target pose. The user selects the regions of 
interest with our intelligent scribbling system, and then adjusts the orientation of the 
partition to edit the reference pose. The rotation axis is based on the screen coordinate 
system so that the operation can be more intuitive to the user. In addition, the target mesh 
is solved in real-time to achieve interactive editing. 
 
4  Results 
 
We used our system to create several interesting animations by assembling existing 
animations. The program is written in C++ and run on a Pentium 4 3.4GHz PC, with 2Gb 
RAM. The timing data and model information we use in this paper are shown in Table 1. 
The animation sequence is solved efficiently because the linear system can be factored 
and stored in the pre-computation step. The interface for the user to edit the kinematic 
pose can be operated in real-time. 
 
For example in  
Fig. 9, we assembled Dino, King Kong, and Lizard animations to create a new interesting 
animation. The Dino first stomps its feet, beats its breast and waves its tail to show its 
majestic appearance. The animations are applied on different partitions at different times 
so that they can work well together and perform surprising results. Another example is 
shown in  
Fig. 10. We compounded the running animation with the morph sequence [10, 14] 
together so that the elephant mesh can morph into the horse while running. In this way, 
the two deformation gradients are multiplied together before the objective function is 
solved to obtain the running morphing sequence. 
 
Table 1 Model information and the timing statistic for blending weights, factorization and 
solving animation. 
 
  Mesh   Triangle   Blending  Factorization  Solve  
 Monster   39998   2.312s   5.687s   0.156s  
Dino   20000   1.063s   1.688s   0.078s  
Elephant   85796   6.922s   11.574s   0.391s  
David   64021   6.344s   7.922s   0.344s  
 
 
 
partitions, selected, unselected, and the intermediate partitions. Similar to what we 
mentioned in Section 3.2.2, we set all of the faces in the selected partition as 1.0 and all 
of those in the unselected partition as 0.0. Equation 5 is solved to obtain the blending 
weights of the triangles in the intermediate partition, therefore blending the two 
expressions naturally. 
      
5  Conclusions and Limitations 
 
We introduce a new approach to create animations that are harmonically assembled from 
several existing animations. The proposed system is designed for novice users, requiring 
only a little manual effort. The main idea behind our algorithm is animation reuse on 
partial meshes and therefore the shapes of different meshes are not required to be similar. 
We also propose a new approach for computing the correspondence, which can obtain 
reasonable results with fewer markers and consequently saving user's time. This 
simplification does not affect the results in our application because the deformation 
gradients in the stiff partitions are nearly identical. 
 
Although different animations can be assembled smoothly in our system, there are still 
some remaining artifacts on the created animation. This is because the animation may not 
satisfy the momentum conservation requirement. Moreover, the constraint vertex is fixed 
in the same position through the entire sequence. The mesh only acts on different poses 
and always stays where it is, making the animation strange. Therefore, in our next 
research step, we will add kinematic factors to our animation system to solve these 
problems. In addition, the self-intersection problem still occurred. With improper 
assembling operations, different parts of the mesh will collide with others and artifacts 
occur. We take this problem into consideration in our future work. 
 
Acknowledgement 
 
We would like to thank the anonymous reviewers for helping us to improve this paper. 
This work is supported by the Landmark Program of the NCKU Top University Project 
under Contract B0008 and is supported in part by the National Science Council under 
Contracts NSC-95-2221-E-006-193-MY2 and NSC-96-2628-E-006-200-MY3.  
 
Reference 
 
1. Allen, B., Curless, B., Popovi´c, Z.: Articulated body deformation from range scan data. 
ACM Trans. Graph. 21, 612–619 (2002) 
2. Anguelov, D., Srinivasan, P., Koller, D., Thrun, S., Rodgers, J., Davis, J.: Scape: shape 
completion and animation of people. ACM Trans. Graph. 24, 408–416 (2005) 
3. Der, K.G., Sumner, R.W., Popovi´c, J.: Inverse kinematics for reduced deformable 
models. ACM Trans. Graph. 25(3), 1174–1179 (2006) 
17. Noh, J.Y., Neumann, U.: Expression cloning. In: Proceedings of ACM SIGGRAPH 
2001, pp. 277–288. ACM Press, New York (2001) 
18. Park, S.I., Hodgins, J.K.: Capturing and animating skin deformation in human motion. 
ACM Trans. Graph. 25, 881–889 (2006) 
19. Shoemake, K., Duff, T.: Matrix animation and polar decomposition. In: Proceedings 
of Graphics Interface ’92, pp. 258–264. Morgan Kaufmann Publishers Inc., San 
Francisco, CA (1992) 
20. Sorkine, O., Cohen-Or, D.: Least-squares meshes. In: Proceedings of Shape Modeling 
International, pp. 191–199. IEEE Computer Society Press, Washington, DC (2004) 
21. Sorkine, O., Lipman, Y., Cohen-Or, D., Alexa, M., Rössl, C., Seidel, H.P.: Laplacian 
surface editing. In: Proceedings of the Eurographics/ACM SIGGRAPH, Symposium on 
Geometry Processing, pp. 179–188. Eurographics Association, Aire-la-Ville, Switzerland 
(2004) 
22. Sumner, R.W., Popovi´c, J.: Deformation transfer for triangle meshes. ACM Trans. 
Graph. 23, 399–405 (2004) 
23. Sumner, R.W., Zwicker, M., Gotsman, C., Popovi´c, J.: Mesh-based inverse 
kinematics. ACM Trans. Graph. 24, 488–495 (2005) 
24. von Funck, W., Theisel, H., Seidel, H.P.: Vector field based shape deformations. ACM 
Trans. Graph. 25(3), 1118–1125 (2006) 
25. Weng, Y., Xu, W., Wu, Y., Zhou, K., Guo, B.: 2D shape deformation using nonlinear 
least squares optimization. Vis. Comput. 22(9), 653–660 (2006) 
26. Yu, Y., Zhou, K., Xu, D., Shi, X., Bao, H., Guo, B., Shum, H.Y.: Mesh editing with 
poisson-based gradient field manipulation. ACM Trans. Graph. 23, 644–651 (2004) 
27. Zhou, K., Huang, J., Snyder, J., Liu, X., Bao, H., Guo, B., Shum, H.Y.: Large mesh 
deformation using the volumetric graph laplacian. ACM Trans. Graph. 24, 496–503 
(2005) 
 
 2
 
2008 ACM SIGGRAPH 年會 
(ACM Annual Conference Series SIGGRAPH 2008) 
 
一、 目的 
ACM SIGGRAPH 2008 國際電腦繪圖年會 (SIGGRAPH Annual 
Conference)是由屬 ACM Society 圖學特別興趣(SIG)委員會所主辦的大
型國際研討會。本人參加本次會議目的主要是為1)發表2篇SIGGRAPH
論文與 2)了解電腦圖學界與工業界最新發展，特別是與執行計畫相關
主題，以幫助計畫執行。由於很多知名學者參與此盛會本，趁此機會
與他們進行學術交流，並尋求國際合作機會。 
 
二、 過程 
本次會議從 2008/08/10 至 2008/08/17，本次大會，會場是座落在加州洛
杉磯市 convention center。本人(計畫主持人), 2 名博士班研究生與林
昭宏教授與林炳賢教授從 2008/08/10 高雄小港機場搭港龍航空飛機，轉
香港國泰航空飛機，與香港中文大學黃田津教授會合-再轉洛杉磯與會，
本人並於 2008/8/17 回國。此次會議，有來自全世界，超過二萬人來參加，
各家著名硬體廠商如 SGI 和 Nvidia、Intel，皆推出目前各公司最新款 CG
產品參與，各家著名軟體廠商也都在這次會場發表新板的軟體。大會提供
 4
四、 心得與建議 
本次與會的國內學者計有筆者、台大─歐陽明教授、陳炳宇教授、莊永
裕教授、台藝大許素珠教授、交大莊榮宏與林文杰教授成大林昭宏教
授與彰師大林炳賢教授等，還有不少研究單位，如：高速電腦中心參
加與工研院，此次在休息時間，也能趁此機會經驗交流，獲益良多。
而由數位內容學院主辦，台灣大學協辦的 Taiwan reunion，更是將參與
SIGGRAPH 的台灣人士齊聚一堂，促進了海內外業界和學術界的交
流，使溝通聚會的管道更加通暢。 
 
關於 Surface/Mesh 方面的議題，比起以往較少創新文章，傳統題目不
少但非常深人，篇篇是傑作。本人今年在此議題與香港科技大學戴秋
蘭教授發表一篇 skeleton extraction 文章。此外去參加有關 Surface 
Parameterization and Applications 的課程，這是一個 Mesh 領域的一個高
階課程，不過其內容相當紮實，由淺入深，而這門課程在台灣的大學
中十分少見，因此筆者希望能夠將這門學科，在未來的課程中傳授給
學生們，此外與 Israel Tel Aviv Univ. Professor Daniel Cohen-Or 有不錯
互動、Daniel 也是我们 skeleton extraction 的 co-author 並當面請
教撰寫 SIGGRAPH papers 心得，讓筆者獲益良多並討論合作新的題
目。此外關於 NPR 方面的議題，本人今年在此議題與香港中文大學黃
田津教授發表一篇 self-animating images 文章，並接受 New Scientist 
