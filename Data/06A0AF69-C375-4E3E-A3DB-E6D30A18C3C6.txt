2構動力學及工程數學為基礎，並配合數值分析法分
析結構物之損壞條件，近年來亦成為土木工程領域
熱門之研究方向之一。以有限元素法或數學理論作
結構物之損壞診斷分析，其數學模式基本上是求結
構物因不同損壞條件相對所產生不同的動態反應
（例如：位移、加速度之反應歷時或自然頻率、振
動模態或應變模態等之變化）或靜態反應（繞角、
位移）之反解問題。由於以數學理論作既有結構物
之損壞評估，必需先具備正確充分的結構資料、量
化的損壞程度及材料的力學性質，分析結果才能確
實，而事實上這些正確資料對比較老舊的建築物而
言可能不易獲得；又進行現場量測結構物之動力（或
靜力）反應，通常很容易受到外在因素的干擾，使
量測到的資料與實際現象有不小的誤差或欠缺完
整，而影響該損壞診斷方法分析結果之精確度[1]。
因此，以數學理論作結構物之損壞診斷分析研究，
其診斷對象通常是針對單一材料建造之結構（如鋼
結構），也因此以數值分析及數學理論作結構物之損
壞診斷，在實際應用時自然會受到比較多的限制為
其缺點。
除前述傳統之結構物損壞診斷方法外，近一、
二十來以人工智慧（Artificial Intelligence）作結構
物之損壞診斷研究可謂是異軍突起而且獨樹一幟，
因此被冠以「現代非破壞檢測技術」名稱，使之與
「傳統非破壞檢測技術」有所區別。而人工智慧技
術則包含進化計算（Evolutional Computing）、類神
經網路（Artificial Neural Networks）與模糊邏輯
（Fuzzy Logic）等三種不同演算方式。由於現代非
破壞檢測技術普遍具有高非線性問題處理能力、高
容錯能力、高學習精度、以及可配合平行運算之技
術，處理龐大的輸入資料，使求解結果更趨迅速及
精確。因此，被應用於診斷結構物時，當結構分析
使用之各項材料參數與實際情形不甚相符，或現場
量測的反應資料不準確或欠缺完整時，以現代非破
壞檢測技術作結構物之損壞診斷，均可免除該等資
料不確定性之因素所引致之困擾。如以結構反應或
模態參數為基底，採人工智慧技術結合不同的演算
模式為診斷模式之主要架構，即可迅速建立一套極
為簡便、有效，而且可針對整體結構作損壞診斷的
模式。前人研究例如在類神經網路方面：Pandey 及
Barai（1995）以靜力載重作用產生的結點位移及類
神經網路作桁架鋼橋之損壞診斷[2]； Hung 與 Kao
（2002）分兩階段方式診斷單自由度及多自由度剛
架結構之損壞位置和損壞程度[3]； Tsai 與 Hsu
（2002）以倒傳遞類神經網路及位移歷時反應作既
有 RC 樑結構之損壞診斷等[4]。在基因演算方面例
如：Chou 和 Ghaboussi（2001）以基因演算法作鋼
桁架橋樑之損壞診斷[5]。
又近年來電腦科技隨著日新月異的材料、硬體
及軟體技術（例如超大型積體電路技術，VLSI）不
斷地研發，新一代的中央處理器(Central Processing
Unit，CPU)例如 Pentium IV，其產生系統匯流排
（System Bus）的速度已可達到 400MHz，傳輸速
度可達到 3.2GB/sec 的高速，且其算數邏輯單元
ALUs（Arithmetic Logic Units）的運作時脈甚至可
高達 2.8GHz，是 Pentium III處理器的 3 倍以上，可
大幅提昇個人電腦的運算效能。雖然配備高效能處
理器之個人電腦能有效處理小尺度運算量的工作；
但對於須要快速求最佳解或處理大尺度運算量的工
作，個人電腦僅憑單高效能處理器之計算能力則仍
顯不夠。因此，一方面為改善此計算能力不足問題，
一方面為顧及設備成本，以處理大尺度或極複雜問
題，適當擴充處理器數量的「高效能計算技術
（High-Performance Computing）」亦即所謂的「平
行電腦技術」乃發展而出。
「高效能計算技術」基本上可分為「多處理器
超級電腦之平行運算（ Parallel processing on
multiprocessor supercomputers）」與「叢集式處理系
統之分散計算（Distributed computing on a clustering
System）」等二種平行運算方式[6]。如僅就「叢集
式處理系統」而言，其架構為多部個人電腦的共同
體，每一個人電腦擁有個自的 CPU、記憶體及作業
系統，個人電腦彼此之間是透過乙太網路（Ethernet）
或 FDDI 網路來連接，並採用訊息傳送（Message
Passing）語言例如 MPI（Message Passing Interface）
等撰寫程式作平行計算。除此之外，「叢集式處理系
統」亦可串聯同時採用二個、四個或甚至更多的處
理器所架構的多處理器超級電腦，再例如配合採用
Linux 作業系統的伺服器（Sever），形成所謂的
「LINUX 叢集式平行電腦系統」，已被用來有效解
決傳統單處理器在處理大尺度或極複雜問題所無法
克服的「耗時問題（Time Consuming）」，目前在各
個科學領域並已蔚為風潮[7]。
而「高效能計算技術」最早應用在機械及土木
結構工程之研究大概是在 1987 年，但自 1993 以後
才陸續有較多研究論文在學術期刊上發表，且研究
內容大都以「結構分析」、「最佳化」及「控制」三
個方向為主，相較於單處理器電腦之計算結果，「高
效能計算技術」執行後之「平行效益（Performance）」
均能遠超過單處理器電腦之運算效能。前人研究例
如在「多處理器超級電腦之平行運算」方面， Lin 等
（1997）以 Transtech Paramid MIMD（Multiple
Instructions Multiple Data）超級電腦和非同步平行
計算法（Asynchronous Parallel Algorithms）針對平
面桁架及剛架分別求結構物之振動反應[8]；Romero
等（2002）結合有限元素及平行計算法作 RC 建築
結構之非線性分析[9]。Patnaik 等（2000）介紹基以
「次結構策略（Substructure Strategy）」之超大型結
構最佳化設計方法，他們強調過多的計算量會使一
般最佳化設計法之成效受到限制，且根據他們的研
究結果次結構最佳化之平均成效是一般最佳化設計
法結果的 6.62 倍[10]。而在「叢集式處理系統之分
散計算」方面，例如： Weinert 和 Eschenauer（1996）
發展 Coarse-Grained Decomposition Strategy 之平行
化運算法，可用於有效處理任何結構最佳化問題
[11]；Jones 及 Plassmann（2000）研究非結構格網
（Unstructured Mesh）計算法，認為影響其平行效
益之主要因素包括：各個 CPU 處理問題之尺度、工
作站使用 RAM 之有效容量，以及網路之連結型式
[12]。此外，近十年來亦有不少學者成功開創了人
4六種損壞配置情形，每一種有 50~100
組，共隨機製作 800~1200 組）不同損壞
配置建築結構受外在動力載重作用時，
取 8 個（僅 X 向）或 16 個（含 X 及 Y
向）自由度所產生的加速度及位移反應
歷時（自由度位置詳如圖二所示）。
項目（5）：製作倒傳遞神經網路之學習範例及測試
範例。將步驟（4）分析所得 800~1200
組之反應歷時資料，與各自所對應之損
壞配置結合成網路之學習範例及測試範
例，其中網路輸出層計有 4 個輸出單
元，輸出值分別代表 1~4 樓之損壞指數
（損壞指數 1 表示該樓層柱有損壞，損
壞指數 0 則表示該該樓層柱無損壞）。
項目（6）：依據基因演算法製作之各個可能是最佳
解的隱藏層處理單元數組合進行倒傳遞
神經網路系統之學習與測試，並反覆依
據基因演算法交配、突變等過程所調整
之參數組合進行網路之校核與分析，而
獲得最佳之參數組合能使網路收斂性趨
於良好，學習錯誤率及測試錯誤率均能
低於預設之容許值。
第二階段（針對第一階段診斷結果有損壞之樓層，
進一步診斷該樓層那些柱子有損壞且損
壞的程度分別如何？）
項目（1~4；6）：均同第一階段。
項目（5）：製作倒傳遞神經網路之學習範例及測試
範例。將步驟（4）分析所得 800~1200
組之反應歷時資料，與各自所對應之損
壞配置結合成網路之學習範例及測試範
例。其中「集中式診斷」網路輸出層計
有 4N（N 表示第一階段診斷出有損壞之
樓層數）個輸出單元，輸出值分別代表
各損壞樓層第 1~4 支柱子之損壞程度；
「分散式診斷」網路輸出層則計有 4 個
輸出單元，輸出值分別代表該損壞樓層
第 1~4 支柱子之損壞程度。
上述第一、二階段所列工作項目（6）之基因演算
部分是由伺服端依設計之訊息傳遞程式規定，平
均分配給各個處理器運算；同時，神經網路之迭
代分析亦由各個處理器負責運算。
（B）研究流程及平行策略
圖三為本研究建立之診斷模式，以及伺服端和
使用端分別負責各項研究工作之流程圖。其中伺服
端主要負責讀取網路訓練範例及測試範例、隱藏層
數、學習速率、慣性因子等網路參數，同時尚須監
控使用端之運算過程及顯示最後之運算結果。使用
端內各個 CPU 則主要負責處理每一平行工作項
（Process）之工作，而每一 Process 又包括下列四
個主要工作項目：（一）、由伺服端獲得其所讀取之
資料；（二）、進行基因演算；即隨機產生或交配及
突變產生的各個染色體，經解碼後即產生一組含第
一層及第二層隱藏層處理單元數之最佳組合，且經
代入倒傳遞類神經網路作疊代分析即可獲得誤差均
方根約略之收斂情形，依據設計之適存函數計算公
式即可獲得適存值，再據以判斷該基因是否被保
留、交配、突變或淘汰，且產生新世代之染色體；
（三）、交換基因；基因演算每達某一設定之迴圈世
代數時，即將分別獲得之最佳之參數值傳遞到其他
平行電腦，由各 Process 篩選符合最優要求之參數
組合，並依原設定之交配、突變法則產生新族群，
再重複進行另一迴圈世代數之分配及計算工作；
（四）、決定最佳隱藏層處理單元數及進行實際網路
診斷用之疊代分析，據以獲得各個網路診斷損壞條
件之權值矩陣及閥值向量。
（C）基因演算之適存函數
在基因演算法中適存函數的定義，將直接影響
最佳解的優劣程度。本研究設計之適存函數定義如
下：
每一 Process 內產生每一組基因分別代表第
一、二層隱藏層之處理單元數，將其代入倒傳遞網
路使用之網路參數內，經網路迭代分析並計算前
500 次循環次數誤差均方根收斂曲線以下所含蓋之
面積 err_sum，該基因表現之適存值即為該面積值
之倒數，並以此適存值 f 作為比較各個基因表現優
劣之依據，即分別詳如公式一、二所示：
2
22
_ 12499500
EEEE
sumerr
  （公式一）
sumerr
f
_
1 （公式二）
（D）程式平行效益
當一個程式可以將所有執行工作完全平均分給
各個 Process，而沒有任何重複執行或浪費執行時間
時，可以視為 100%平行化。例如：原程式執行須
時 10 秒，在分為二個 process 後，執行時間僅須 5
秒即可完成，則可稱為 100%平行化。
本研究採用二台雙 CPU 主機，期待在儘量不降
低執行速度下，將程式分成四個 Process 進行平行
計算，但由於各作業系統對 CPU 資源掌控的情形不
一，因此，即使是雙 CPU 主機，在不同作業系統下，
仍多少會因為 Process 的增加而降低執行速率，經
測試結果即由表一可以看出本研究針對任一台主
機，其 Process 數量和所需時間之變化關係。因此，
在考量程式的平行度時，本研究則將系統延誤時間
做些微修正，即可較正確評估該程式的平行效益。
本研究程式平行效益的計算公式定義如下：
Process 數 N，單一 Process 執行所需時間 t1，程式
實際執行所需時間 t2，作業系統延誤時間 t3，則 100%
平行化實際所須時間 t100 及程式之平行效益 P，分
別如公式三、四所示。
6網路的學習效率。另外，本研究在平行運算部
分採用四個 Process 和只用一個 Process 的求解
速度，大概可以節省約 60%以上的計算時間，
此亦即充分顯示以基因演算法尋求倒傳遞神經
網路最佳隱藏層處理單元數之組合時，採用平
行運算的重要性。
6. 謝誌
本 NSC95-2211–E–194–074 專題研究計畫承行
政院國家科學委員會給予主要經費補助，謹此致上
最深摯之謝意。
7. 參考文獻
[1]. Hearn, G., and Testa, R.B., “ Modal Analysis for
Damage Detection in Structures,” Journalof
Structural Engineering, ASCE, Vol.117, No.10,
pp. 3042-3063 (1991).
[2]. Pandey, P. C., and Barai, S. V., “Multilayer 
Perceptron in Damage Detection of Bridge
Structures, “Computers and Structures, Vol.54,
No.4, pp.597-608 (1995).
[3]. Hung, S. L., and Kao, C. Y.,“ Structural Damage 
Detection Using the Optimal Weights of the
Approximating Artificial Neural Networks,” 
Earthquake Engineering Structure Dynamic,
Vol.31, pp.217-234 (2002).
[4]. Tsai, C. H., and Hsu, D. S., “Diagnosis of RC 
Structural Damage Based on Displacement Time
History Using the Back-Propagation Neural
Network Technique, “Journal of Computing in
Civil Engineering, ASCE, Vol.16, No.1, pp.
49-58 (2002).
[5]. Chou, J.H., and Ghaboussi, J., “Genetic 
Algorithm in Structural Damage Detection,” 
Computer & Structures, No. 79, pp. 1335-1353
(2001).
[6]. Adeli, H. A., “High Performance Computing for
Large-Scale Analysis, Optimization, and
Control.” Journalof Aerospace Engineering,
ASCE, Vol.13, No.1, pp.1-10 (2000).
[7]. Yang C. T. Homepage, http://aho. cis.nctu.
edu.tw/~ctyang.
[8]. Lin, J., Wang, X., and Willams, F. W.,
“Asynchronous Parallel Computing of Structural
Nonstationary Random Responses.” 
International Journal of Numerical Methods in
Engineering, Vol.40, pp.2133-2149 (1997).
[9]. Romero, M. L., Miguel, P. F., and Cano, J. J., “A 
Parallel Procedure for Nonlinear Analysis of
Reinforced Concrete Three-Dimensional
Frames,” Computer and Structure, Vol.80,
pp.1337-1350 (2002).
[10]. Patnaik, S. S., Coroneous, R. M., and Hopikns,
D. A., “Substructuring for Structural
Optimization in Parallel Processing
Environment,” Computer-Aided Civil and
Infrastructure Engineering, Vol.15, No.3 (2000).
[11]. Weinert, M., and Eschenauer, H.A., “ A
Parallel Decomposition Algorithm in
Application to Structural Design.” Advance in
Engineering Software, Vol.26. pp.1-12 (1996).
[12]. Jones, M. T., and Plassmann, P. E.,
“Unstructured Mesh Computations on Networks
of Workstations.” Computer-Aided Civil and
Infrastructure Engineering, Vol.15, No.3, (2000).
[13]. Park, H. S., and Sung, C. W., ”Optimization of 
Steel Structures Using Distributed Simulated
Annealing Algorithm on a Cluster of Personal
Computers,“ Computers and Structures, Vol.80,
pp.1305-1316 (2002).
[14]. Papadrakakis, M., Lagaros N. D., and Fragakis.
Y., “Paralel Computational Strategies for
Structural Optimization,” International Journal of
Numerical Methods in Engineering, Vol.58,
pp.1347-1380 (2003).
[15]. MPICH webaddress：/www-unix.mcs.anl.gov/
mpi/mpich
8表二 類神經網路診斷模式各階段診斷使用參數及數值範例測試結果
誤差均方根（RMS,%）
網 路 名 稱
網路架構
（輸入層-第一層
隱藏層-第二層隱
藏層-輸出層）
訓練範例數 測試範例數
學習速率
（最大值-折減率-
最小值）
慣性因子 學習循環數
訓練範例 測試範例
網路I 網路I 80-65-51-4 200 200 3.0,0.98,0.1 0.7 4302 0.972 2.189
網路II-1 80-89-35-4 200 200 3.0,0.98,0.1 0.9 4866 13.25 12.58
網路II
網路II-2 80-75-32-4 200 200 3.0,0.98,0.1 0.9 5681 13.01 13.07
網路III-1 80-58-24-8 200 200 2.0,0.98,0.1 0.7 6345 13.15 13.55
網路III-2-1 80-65-23-4 200 200 2.0,0.98,0.1 0.7 4215 11.98 12.69網路III
網路III-2-2 80-74-26-4 200 200 2.0,0.98,0.1 0.7 4538 12.34 13.65
說明：網路名稱欄內各項符號說明如下：
1. I：第一階段損壞診斷（診斷建築物何層有發生損壞）。
2. II：第二階段損壞診斷（診斷僅單層樓損壞之樓層各根柱子之勁度損失程度）。
3. III：第二階段損壞診斷（診斷多數層樓損壞之樓層各根柱子之勁度損失程度）。
4. 1：診斷第一層樓各柱之損壞程度。
5. 2：診斷第二層樓各柱之損壞程度。
6. 粗體數字：測試範例經所屬網路識別結果，可詳見另圖說明。
10
CPU_0
Get_data()
{
讀取網路學習及測試範
例、隱藏層數、學習速
率、慣性因子……等網
路參數資料}
Broadcast()
{
以MPI_Bcast()指令
將讀取的資料 到
其它Process
}
CPU_1 CPU_2 CPU_3
MPI_Bcast(&data,MPI_Datatype,Root,Comm)
隨機產生初始基因
(每一組基因分別代
表第一層及第二層
隱藏層處理單元數)
If 繁殖世代達到一定
值
{
將CPU_0目前最優良的
基 因 到 其 它
Process
if CPU_0最差的基
因比其它Process最優
良基因差
{
最差的基因被
最優良基因基因取代
}
}
MPI_Bcast(&bestgenetic,MPI_Datatype,Root,Comm)
存留最優良基因
依適存值大小
將基因排序
基因交配及突變,
完成新世代
完成設定總次數的繁
殖後,輸出最佳之基因
並進行網路迭代分析
If 繁殖世代達到一定
值
{
將CPU_1目前最優良的
基 因 到 其 它
Process
if CPU_1最差的基
因比其它Process最優
良基因差
{
最差的基因被
最優良基因基因取代
}
}
存留最優良基因 存留最優良基因 存留最優良基因
資料傳遞方向 程式執行順序
是否達到設定
之總世代次數?
是
否
基因交配及突變,
完成新世代
是否達到設定
之總世代次數?
是
基因交配及突變,
完成新世代
是否達到設定
之總世代次數?
是
基因交配及突變,
完成新世代
是否達到設定
之總世代次數?
是
否 否 否
If 繁殖世代達到一定
值
{
將CPU_2目前最優良的
基 因 到 其 它
Process
if CPU_2最差的基
因比其它Process最優
良基因差
{
最差的基因被
最優良基因基因取代
}
}
If 繁殖世代達到一定
值
{
將CPU_3目前最優良的
基 因 到 其 它
Process
if CPU_3最差的基
因比其它Process最優
良基因差
{
最差的基因被
最優良基因基因取代
}
}
Broadcast()
{
以MPI_Bcast()指令
接收CPU_0 的資
料
}
Broadcast()
{
以MPI_Bcast()指令
接收CPU_0 的資
料
}
Broadcast()
{
以MPI_Bcast()指令
接收CPU_0 的資
料
}
隨機產生初始基因
(每一組基因分別代
表第一層及第二層
隱藏層處理單元數)
依適存值大小
將基因排序
隨機產生初始基因
(每一組基因分別代
表第一層及第二層
隱藏層處理單元數)
依適存值大小
將基因排序
隨機產生初始基因
(每一組基因分別代
表第一層及第二層
隱藏層處理單元數)
依適存值大小
將基因排序
圖三 診斷模式資料平行處理方式示意圖
12
E type 試体(rms=6.4%)
圖六 Net II-2 診斷結果
D type 試体(rms=3.1%)
圖七 Net III-1 診斷結果
D type 試体（NetIII-2-1） D type 試体（NetIII-2-2）
圖八 Net III-2 診斷結果(rms=2.7%)
