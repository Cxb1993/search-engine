 2
二、緣由與目的 
 本實驗室先前曾針對 Processor-in- 
Memory 架構提出了一個新的程式平行化
系統，稱為 SAGE II (Statement-Analysis- 
Grouping-Evaluation) [2][4][5]。有別於以
往使用迴圈輪次(Loop Iteration)為基本分
析單位，SAGE II使用陳述(Statement)為基
本分析單位，它可分析原始程式碼，透過
陳述分割(Statement Splitting)將程式切分
為許多區塊，並依其相依關係，產生一對
應之權重分割相依圖(Weighted Partition 
Dependence Graph，WPG)，再決定每一區
塊的權重值，利用排程技巧，依主處理器
與記憶體處理器不同的運算能力，將每一
個區塊分配給適當的處理器執行，以減少
處理器彼此等待的時間，達到最佳的負載
平衡狀態(Load Balancing)，獲得最好的效
能。然而，以“效能＂為考量的排程結果，
通常不符合低耗能的需求，因此本計劃將
改進原 SAGE II系統中排程的機制，提出
了一個新的原始碼階層(Source code level)
的排程方法。此排程方法稱為耗能導向低
耗 能 排 程 (Energy-Oriented Power 
Reduction Scheduling; EOPRS)，使用者可
依照實際的程式行為與工作特性，給定所
期望的耗能限制參數。此排程方法會依照
所輸入的參數，依耗能參數優先決定排
程，在達到使用者設定之耗能限制參數
後，再依效能參數排程，以平衡耗能降低
與執行效能兩個相拮抗之因子，並分配適
當的工作給主處理器與記憶體處理器執
行。我們希望能透過本計畫案的提出，發
展 EOPRS 的相關技術，透過理論的發展
與系統的設計，逐步完成上述之目標，並
在此一領域上能與美國幾所大學同步進行
研究。 
我們以去年發展的 SAGE II系統[2]為
基礎，使用陳述(Statement)為基本的分析
單位，分析原始程式碼，產生一個權重分
割相依圖(Weighted Partition Dependence 
Graph，WPG)，並決定每一個區塊的權重
值，再依照使用者輸入的參數，利用各種
高階編譯技術，將每一個區塊分配給適當
的處理器執行，以達到降低耗能的目的。
本計劃所發展之 EOPRS 演算法有下列幾
項特點： 
1. 因 採 用 陳 述 為 基 本 分 析 單 位
(Statement-base)與啟發式(Heuristic)的
排程機制，本演算法能依照系統的實際
結構，產生適當的執行程序。 
2. 提供使用者在不低於使用者可接受的
Speedup下排程，並且盡可能的減少能
量消耗，我們稱之為“耗能導向低耗能
排程＂  
3. 本演算法容易使用，程式設計者易獲得
低耗能的成果，不僅適用於我們所提出
的 Processor-in-Memory 架構，也可應
用於其他種類的 Processor-in-Memory
系統和傳統的多處理器電腦系統。 
最後我們以 Processor-in-Memory模擬
器為實驗平台，應用上述之技術，將最具
代表性之測速程式 SPEC95、Perfect 與
NAS Benchmark最佳化與平行化，以驗證
這 些 方 法 的 可 行 性 ， 並 強 化
Processor-in-Memory架構下，低耗能研究
的實用性。 
 
三、結果與討論 
 
圖一是 EOPRS與 SAGE II系統[2]整
合後之各個基本轉換模組架構圖。其中包
含陳述分割模組、耗能－延遲權重評估模
組、波前產生模組、耗能導向低耗能排程
法模組、以及副程式產生器 (Subroutine 
Generation)模組。 
在陳述分割(Statement Splitting) 模
組 ， 我 們 使 用 迴 圈 分 配 (Loop 
Distribution)[2]的機制，把原本的相依關係
圖 (Dependence Graph)轉換成區塊分割
(Node Partition) Π，並建構出權重分割相
依圖(Weighted Partition Dependence Graph, 
WPG )，以便讓接下來的耗能－延遲權重
評估、波前產生、與耗能導向低耗能排程
法機制使用 
在 Processor-in-Memory架構中，每一
個相同的指令，在不同的處理器中執行，
 4
作學問的態度。本計劃的初期研究成果，
已發表在國際會議[1] [2]。而部份研究成
果，亦將發表於專書中[3]。 
 
五、參考文獻：  
[1][2][3]為國科會計畫補助之研究成
果。 
 
[1] S. L. Chu, An Energy Reduction 
Scheduling Mechanism for a 
High-Performance SoC Architecture; in 
Lecture Notes in Computer Science. 
(EUC 2005), Vol.  3824, 
Springer-Verlag, Page(s): 281 – 290, 
2005. (SCI, EI) (NSC 
94-2213-E-033-032). 
[2] Toward to Fully Utilize the Multiple 
Processors in the Chip Multi-Processor 
System; in Proceedings of The 13th 
Workshop on Compiler Techniques for 
High-Performance Computing; 
(National Chung Hsing University, 
Taichung, Taiwan; March 15-16, 2007). 
Page(s): 24-33. (NSC 95-2221-E-033 
-022 -) 
[3] S. L. Chu,” Design an Energy 
Reduction Scheduling Mechanism for a 
MPSoC Architecture”. To be appeared 
in Embedded Systems: Status and 
Perspective, American Scientific 
Publishers. (NSC 95-2221-E-033 -022 
-) 
[4] Y. Kang, W. Huang, S. Yoo, D. Keen, 
Z. Ge, V. Lam, P. Pattnaik, J. Torrellas, 
“FlexRAM: Toward an Advanced 
Intelligent Memory System”, in: Proc. 
International Conference on Computer 
Design (Austin, Texas, Oct. 1999). 
[5] A. K. Snip, D.G. Elliott, M. Margala, N. 
G. Durdle, “Using Computational 
RAM for Volume Rendering”, in: Proc. 
13th Annual IEEE International 
Conference on ASIC/SOC (2000) 
253 –257 
[6] A. Parikh, M. Kandemir, N. 
Vijaykrishnan, and M.J. Irwin, 
“Energy-Aware Instruction 
Scheduling”, in: Proc. of 7th 
International Conference on High 
Performance Computing-HiPC 2000, 
pp. 335-344, Dec. 2000.  
[7] V. Krishna, N. Ranganathan, 
N.Vijaykrishnan, “Energy Efficient 
Datapath Synthesis Using Dynamic 
Frequency Clocking and Multiple 
Voltages”, in: Proc. of Twelfth 
International Conference on VLSI 
Design, pp. 440-445, 1999. 
[8] Mehta, R. Owens, R.M. Irwin, M.J. 
Chen, R. Ghosh, D., “Techniques for 
low energy software”. In: Proc. of 1997 
International Symposium on Low 
Power Electronics and Design, pp. 
72-75, 1997. 
[9] M. Huang, J. Renau, S. M. Yoo, and J. 
Torrellas,  “A Framework for 
Dynamic Energy Efficiency and 
Temperature Management”, in: Proc. of 
33rd International Symposium on 
Microarchitecture, Dec. 2000. 
[10] S. Tiwari, S. Malik, A. Wolfe, “Power 
analysis of embedded software: a first 
step towards software power 
minimization”. IEEE Transactions on 
A Very Large Scale Integration (VLSI) 
Systems, Volume: 2 Issue: 4, pp. 
437-445, 1994 
 
 6
energy_temp = 0 
 
for j = 1 to max_wf 
 
wf_tmp = ph_tmp = pm_tmp = {φ} 
h = m = Opt_energy(j) = PHEW_origin(j) = Deadline(j) = 0 
ph_d_wei(j) = ph_e_wei(j) = pm_d_wei(j) = pm_e_wei(j) = 0 
store all of bi whose Oi = j  in wf_tmp 
for each  bi∈ wf_tmp 
if  PHEW(bi ) - PMEW(bi) ≤ 0 
h = h + 1 
Store bi in ph_tmp (h) 
ph_d_wei(j) = ph_d_wei(j) + PHDW(bi ) 
ph_e_wei(j) = ph_e_wei(j) + PHEW(bi ) 
else  
m = m + 1 
Store bi in pm_tmp (m) 
pm_d_wei(j) = pm_d_wei(j) + PMDW(bi ) 
pm_e_wei(j) = pm_e_wei(j) + PMEW(bi ) 
end if 
 
PHEW_origin(j) = PHEW_origin (j)+ PHEW(bi ) 
Opt_energy(j) = Opt_energy(j) + Min(PHEW(bi ), PMEW(bi )) 
Sort ph_tmp (h) in decreasing order by PHDW(bi )  
Sort pm_tmp (m) in decreasing order by PMDW(bi)  
 
end for 
Deadline(j) = Opt_energy(j) + (PHEW_origin(j) – Opt_energy(j)) 
           * (1 – Percent) 
Deadline(j) = Deadline(j) + energy_temp 
p = q = 0 
done = FALSE 
 
if  ph_d_wei(j) ≥ pm_d_wei(j) 
for p =1 to h 
ph_e_wei(j) = ph_e_wei(j) – PHEW ( ph_tmp(p)) 
pm_e_wei(j) = pm_e_wei(j) + PMEW ( ph_tmp(p)) 
ph_d_wei(j) = ph_d_wei(j) – PHDW ( ph_tmp(p)) 
pm_d_wei(j) = pm_d_wei(j) + PMDW ( ph_tmp(p)) 
 
if  ph_e_wei(j) + pm_e_wei(j) ≤ Deadline(j) 
ph_tmp = ph_tmp – {ph_tmp(p)} 
pm_tmp = pm_tmp + {ph_tmp(p)} 
else 
pm_d_wei(j) = pm_d_wei(j) – PMDW ( ph_tmp(p)) 
ph_d_wei(j) = ph_d_wei(j) + PHDW ( ph_tmp(p)) 
pm_e_wei(j) = pm_e_wei(j) – PMEW ( ph_tmp(p)) 
ph_e_wei(j) = ph_e_wei(j) + PHEW ( ph_tmp(p)) 
end if 
end for 
 
else 
 
for q =1 to m 
