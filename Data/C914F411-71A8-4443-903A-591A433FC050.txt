2) The software is subject to failure at random times
caused by the manifestation of the remaining faults
in the system.
3) The mean number of faults detected in the time
interval (t, t+Δt) is proportional to the mean number
of remaining faults in the system. All faults in a
program are mutually independent from the failure
detection point of view.
4) The failure rate of each detectable fault is identical.
5) Each time a failure occurs, the fault that caused it is
immediately and perfectly removed. No new faults
are introduced.
Based on the above assumptions, we can obtain the
following differential equation:
)]([)(
)(
tmatr
dt
tdm  , (1)
where a is the expected total number of faults to be
eventually detected (i.e., the initial faults) and r(t) is the
failure detection rate function by time t. Then different
types of SRGMs can be derived by replacing different
conditions of r(t) and solving Eq.(1) under the boundary
condition m(0)=0 [11]. In Table 1, we present four
commonly used SRGMs and their mathematical forms.
In practice, these models have good prediction ability as
long as they can fit the data well [17, 19, 20, 24, 28].
Table 1. Selected SRGMs.
Model Name r(t) m(t) (t) Eq.
Goel-Okumoto (GO) model r )1()( rteatm  rtaret )( (2)
Yamada delayed S-shaped
(DeS) model rt
tr
1
2
))1(1()( rtertatm  rtteart  2)( (3)
Inflection S-shaped (InfS)
model rte
r
1 rt
rt
e
ea
tm 



1
)1(
)( 2)1(
)1(
)( rt
rt
e
tare
t 




 (4)
Generalized GO (GGO) model rctc-1 )1()(
crteatm  crtc earctt  1)( (5)
a: the number of failures; r: fault detection rate;: the inflection parameter; c: test quality;(t): failure intensity function.
2.2. GAs in Software Engineering
GA is a searching technique firstly studied by John
Holland at the University of Michigan in the early
1970s [7]. Theoretically, GA is based on the mechanism
of natural evolution, the concept of which can be
analogically applied to evolve the solution of
complicated optimization problems. Over the past three
decades, GA has been used as an adaptive algorithm for
solving practical problems and widely adopted across
different scientific fields [5, 23].
In the field of software engineering or in its
sub-area software reliability, GA has also attracted the
attention of researchers with solving the optimization to
their specific problem domains [1, 6], such as optimal
scheduling [16], optimal test data generation [21],
optimal module clustering [3], etc. In the past, Huang
and Chiu [12, 13] investigated the estimated accuracy of
adopting GA to determine weighted similarity measures
in either analogy-based software effort estimation
models or grey relational analysis models. Moreover,
Jiang et al. [15] provided a profound basis on the
applicability of GA to software engineering problems
and formulated a theory-based measure to predict
expected time required for obtaining the optimal or
near-optimal solutions.
In the past, Minohara and Tohma [22] ever applied
GA to the parameter estimation of the hyper-geometric
distribution SRGM (HGDM). Their experimental result
showed that GA is effective in the parameter estimation
and removes restrictions from SRGMs. Further, Costa et
al. [2] explored a new approach based on genetic
programming and proposed the use of boosting
techniques to improve the performance of software
reliability models. On the other hand, Wadekar and
Gokhale [26] investigated the tradeoff between cost and
reliability by using GA in complex software
architectures. Similarly, Dai and Xie [3] also presented a
GA to allocate the limited testing resources with respect
to achieve maximum reliability, when the software
systems is complex, and also when they have multiple
objectives to stop testing.
From above surveys, there are some advantages of
applying GA. Fundamentally, GA is free from
restrictive assumptions and is simple to describe large
search spaces [2, 22]. Most importantly, it is easy to
program computational processes, which its evolution
of solutions is just based on simple bit operators [5, 7,
23]. However, the formulated model of SRGMs is
generally an intrinsically nonlinear and multivariable
form [19, 24, 28]. Moreover, we have noticed that the
traditional genetic operators may not be effectively
incorporated within our problem domain (see the
discussion in sections 3.1-3.2). Hence, some
modifications of GA for accommodating to the
parametric estimation of SRGMs are worthy and
necessary.
三、改良式基因演算法
In this section, we show how to modify the
traditional GA to estimate the parameters of SRGMs.
The detailed algorithm of MGA is shown in Figure 1. It
is noted that all the proposed mechanisms of MGA are
built by using C++ programming language. When we
implement the MGA, there are some issues that have to
be considered: 1) chromosome representation; 2) fitness
function; 3) selection scheme; 4) crossover operator; 5)
mutation operator.
guarantee that the fittest chromosome will always be
selected for generating more offspring in evolution
process. This may spend more numbers of generations
on finding a solution. Thus, we further propose a
rebuilding mechanism. Among each generation, one
best chromosome is kept at the end of the population to
avoid disappearance after a selection operator or the
other genetic operators (please refer to Figure 1). This
mechanism does not violate GA’s original purpose. The
kept chromosome is reserved for the next generation
and does not participate in genetic operators. However,
if the next generation produces a much more suitable
chromosome, the previous kept chromosome will be
replaced.
In crossover operator, two chromosomes are
chosen from the population and are exchanged in part
with each other in order to improve their fitness value.
The uniform crossover is one of the simplest form [5, 7].
The crossover may happen at different bits with a
probability called crossover rate, Pcross. This rate
typically ranges from 0.5 to 0.8 from GA literatures [16,
22]. We decide to adopt uniform crossover in our
experiments. As for mutation operator, the purpose of it
is to prevent the evolution process from prematurely
converging to a local optimum. This operator randomly
flips one bit in a chromosome. Mutation can occur at
one bit position with a probability called mutation rate,
Pmut. Generally, there is a small probability of mutation
[2, 12, 13, 26].
According to the IEEE floating-point standard, we
found that some bits are less efficient during bit
mutation. For example, if we mutate at sign bit (i.e., the
31th bit), the whole string will be changed from a plus
to a minus. In fact, this mutation may not be meaningful
because the estimated parameters are usually a positive
real number. On the other hand, if we mutate at the 30th
bit of exponent, the string will be 2128 or 2-128 times the
original. It may also be a nonmeaningful mutation.
Instead, if we mutate at the lower bits (i.e., bit 0, 1, 2,
and etc.), this may only change the parameters slightly
and still be less meaningful. Thus, these types of
mutation may affect the performance. The reason is that
the equal probability on mutated positions is biased
within the evolution process.
For the above reasons, here we propose a new
mechanism of weighted bit mutation, where decisive
bits should be given a higher probability of mutation
than others. In section 4.2, we will conduct a sensitivity
analysis on mutation bits. After that, we find that bit
15-27 are more influential on estimated efficiency and
decide to set a higher weight of mutation on these bit
positions. Figure 2 shows the weighted value of
mutation on different bit positions.
四、實驗分析與討論
4.1. Failure Data and Comparison Criteria
Three sets of real software failure data [14, 25, 27]
are used for the following experiments. All these data
are also widely used as a comparative standard in many
other studies [8, 9][18, 20]. The detailed information of
these datasets is listed in Table 2. Further, some criteria
are used to evaluate the estimated performance of
different models and MGA, as given below:
Table 2. Software Failure Data Information.
Dataset Time Units # ofFailures Remark
DS1 [25] 19 weeks 328 PL/I database applicationtest data
DS2 [27] 20 weeks 100
A subset of products for four
software releases at Tandem
computers company
DS3 [14] 34 weeks 181
A wireless network product
obtained from system test
interval
1) Number of Generation: The initial population may
require many elapsed generations to evolve into an
appropriate parameter [5, 7, 23]. Hence, we can
record the needed number of generations for
comparison. The more effective algorithm should
have lower numbers of generations.
2) Computation Time: Likewise, we can also record the
needed computation time in terms of finding the best
parameters. Although this criterion may be
influenced by different CPU status or software
executions, it can still be taken as a preliminary
criterion for comparison. In our later experiments,
we try to control the influential factors to make each
running condition consistent.
3) Long-term predictions: The Mean Square Error
(MSE) is used for quantitative comparisons for
long-term predictions, because it provides a
better-understood measure of the differences
between actual and predicted values. It is defined as
[10, 14, 17]:



n
t
tmtmn
MSE
1
2])([
1 . (8)
In our quantitative comparisons, we use MSE
because we believe that it is easier to understand. A
smaller MSE indicates a smaller fitting error, and
better overall performance.
4) Akaike Information Criterion (AIC): AIC takes
account of the statistical goodness of fit, and the
number of parameters that have to be estimated to
achieve this particular degree of fit. It can be defined
as [17, 29]:
KlogMAIC 22  , (9)
where K is the number of parameters in the model. A
lower AIC measure indicates the preferred model.
5) Relative Error (RE) is defined as [19, 24]:
t
t
m
mtm
tRE
 )()( . (10)
To compare prediction accuracy, a boxplot can be
used to present the distribution of REs with different
models.
Table 3. Conditional Setting of MGA.
Population Size Np =100
Selection
Method
Roulette Wheel
Selection
Crossover Rate Pcross =0.5
Crossover
Method
Uniform
Crossover
Mutation Rate Pmut =0.1
Mutation
Method
Weighted Bit
Mutation
repeatedly run each model 100 times and take the
average of the needed time and the number of
generations. The performance between GA and MGA
over three datasets is shown in Tables 4 and 8-9. Please
notice that the number of generations is rounded to an
integer; the computation time is counted by using C++
“CTime”function.
Table 4. Summary of Model Parameters and Comparisons (DS1).
LSE-based fitness function MLE-based fitness function
a # of Gen. & Comp.Time (sec.) a
# of Gen. & Comp.
Time (sec.)
Dataset Model
r
 MSE
GA MGA
Improve
ment
(%) r
 AIC
GA MGA
Improve
ment
(%)
760.53 13,415 5,341 60.18% 513.14 18,980 10,507 44.64%GO
0.0323
 139.815
15.7 4.4 71.97% 0.0537
 220.760
16.9 10.2 39.64%
382.36 78,664 15,664 80.08% 355.05 68,123 15,948 76.58%
DS1
InfS
0.1787
2.88 82.704
57.7 13.7 76.25% 0.2128
3.62 205.011
52.3 15.9 69.59%
0 5 10 15 20
0
50
100
150
200
250
300
350
Data
GO
InfS
Cumulative
Number
of
Failures
Time Unit
0 5 10 15 20
0
50
100
150
200
250
300
350
Data
GO
InfS
Cumulative
Number
of
Failures
Time Unit
(a) LSE-based Fitness Function. (b) MLE-based Fitness Function.
Figure 5. Cumulative Number of Failures (DS1)
From Table 4, we can see that MGA with
LSE-based fitness function can obtain suitable
parameters for the GO and the InfS models in DS1. It is
also noticed that the MSE criterion can fit failure data
very well. On the other hand, as for the MLE-based
fitness function, MGA can derive appropriate
parameters for the GO and the InfS models. We can
observe that the AIC criterion is acceptable in this
dataset as well. By comparing the GO and the InfS
models in DS1 dataset, however, we can find that the
InfS model has better accuracy than GO model.
Next, we display the boxplot of the relative error
related to the GO and the InfS models in DS1. Notice
that the outlier value denotes the value between 1.5 and
3 box lengths from the upper or lower edge of the box,
and the extreme value denotes the value more than 3
box lengths from the upper or lower edge of the box,
where the box length means the interquartile range.
From Figure 5, we can see that the InfS model is much
better than the GO model in a smaller box length of
relative errors. Also, the upper and lower quartiles of the
InfS model are smaller than that of the GO model. This
reveals that at least 75% the predictions of the InfS
model are more accurate than those of the GO model.
Basically, this finding is in part consistent with the
finding of Table 4.
InfS
(MLE-based)
InfS
(LSE-based)
GO
(MLE-based)
GO
(LSE-based)
0.8
0.6
0.4
0.2
0.0
-0.2
-0.4
R
el
at
iv
e
E
rr
or
* Extreme
o Outlier
Figure 5. Boxplot of Relative Error (DS1).
Comparing the performance between GA and
MGA, we can see that MGA can further reduce the
generation numbers and the computation time.
Regarding the improvement percentage of MGA, the
number of generations individually has a decrement of
60.18% and 80.08% in LSE-based fitness function, and
has improvement of 44.64% and 76.58% in MLE-based
fitness function. Moreover, the computation time can be
decreased as 71.97% and 76.26% in LSE-based fitness
function, and can be improved by 39.64% and 69.59%
in MLE-based fitness function, respectively. Hence, we
can say that the proposed MGA is indeed more effective
than the traditional GA in finding the parametric
solution of SRGMs. These improvements might be
0 5 10 15 20
0
20
40
60
80
100
120
Data
GO
InfS
Cumulative
Number
of
Failures
Time Unit
0 5 10 15 20
0
20
40
60
80
100
120
Data
GO
InfS
Cumulative
Number
of
Failures
Time Unit
(a) LSE-based Fitness Function. (b) MLE-based Fitness Function.
Figure 5. Cumulative Number of Failures (DS2)
Table 9. Summary of Model Parameters and Comparisons (DS3).
LSE-based fitness function MLE-based fitness function
a # of Gen. & Comp.Time (sec.) a
# of Gen. & Comp.
Time (sec.)
Dataset Model
r
 MSE
GA MGA
Improve
ment
(%) r
 AIC
GA MGA
Improve
ment
(%)
804.24 39,209 3,350 91.45% 718.52 39,046 2,650 93.21%GO
0.0076
 22.863
38.4 3.8 90.10% 0.0085
 168.417
37.2 2.3 93.81%
229.23 83,578 20,749 75.17% 216.15 80,425 21,779 72.92%
DS3
InfS
0.0876
3.69 5.820
68.4 20.2 70.46% 0.0977
4.19 164.557
66.0 22.2 66.36%
0 5 10 15 20 25 30 35
0
20
40
60
80
100
120
140
160
180
200
Data
GO
InfS
Cumulative
Number
of
Failures
Time Unit
0 5 10 15 20 25 30 35
0
20
40
60
80
100
120
140
160
180
200
Data
GO
InfS
Cumulative
Number
of
Failures
Time Unit
(a) LSE-based Fitness Function. (b) MLE-based Fitness Function.
Figure 5. Cumulative Number of Failures (DS3)
五、結論
The accurate parameter estimation of SRGMs is
necessary in that it allows for the analysis of reliability
requirements and resource allocations. With the
estimation of SRGMs, project managers can acquire
enough and useful information for improving the
reliability of developed software products. In this paper,
we proposed an MGA for the parametric estimation of
SRGMs integrated with MLE-based and LSE-based
fitness functions, weighted positions of mutation, and
rebuilding mechanisms. In our experiments, the
parametric estimations and the efficiency of MGA were
also demonstrated and discussed in details. The
experimental results show that the MGA is more
effective than traditional GA, and the estimated results
fit failure data very well. Finally, we can then conclude
that MGA is a workable and feasible method in
parametric estimation of SRGMs.
六、參考文獻
[1] C. K. Chang, M. J. Christensen, and T. Zhang,
"Genetic Algorithms for Project Management,"
Annals of Software Engineering, vol. 11, no. 1, pp.
107-139, 2001.
[2] E. O. Costa, G. A. de Souza, A. T. R. Pozo, and S.
R. Vergilio, "Exploring Genetic Programming and
無研發成果推廣資料 
博士後研究員 0 0 100%  
專任助理 0 0 100%  
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
為了確保軟體品質與可靠度，過去三十年間，許多軟體可靠度成長模型
(Software Reliability Growth Models, SRGMs)已被相繼提出；在模型中，其
中二種最被廣為使用的參數評估方法為最大相似法(Maximum Likelihood 
Estimation, MLE)與最小平方法(Least Squares Estimation, LSE)。然而，這
二種方法於軟體可靠度成長模型中會造成許多使用上限制，例如微分需要複雜
計算、最大相似函數求解困難等；因此，本篇論文提出改良式基因演算法於軟
體可靠度模型參數評估之研究，並且使用實際錯誤資料庫驗證所提出的方法，
實驗結果證實改良式基因演算法可以有效且快速解決參數評估問題。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
