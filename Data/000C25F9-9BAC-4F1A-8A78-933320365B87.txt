2theory. These generalized conjugate
gradient methods are used TFQMR
(transpose free quasi-minimal residual
algorithm), CGS (conjugate gradient
square algorithm), Bi-CGSTAB
(bi-conjugate gradient stabilized
algorithm), and QMRCGSTAB
( quasi-minimal residual variant of
bi-conjugate gradient stabilized
algorithm . These subroutines are
connected to computer program TORT.
Several problems are tested in personal
computer with 586 CPU. It is the
reasons to choose the generalized
conjugate gradient methods that the
methods have better residual (equivalent
to error) control procedures in the
computation and have better convergent
rate. The pointwise incomplete LU
factorization ILU and modified
pointwise incomplete LU factorization
MILU are the preconditioning
techniques used in the several testing
problems. In Bi-CGSTAB, CGS,
TFQMR and QMRCGSTAB algorithms,
we find that Bi-CGSTAB algorithm
combined with preconditioner ILU is the
most efficient algorithm in these
methods in the problem 6. The
numerical solution of flux by
preconditioned CGS, Bi-CGSTAB,
TFQMR and QMRCGSTAB method
have same results with those results,
obtained by either point successive
relaxation method or line successive
relaxation method combined with
Gaussian elimination in TORT with
AMD Athlon-XP 2400+ central
processing unit (CPU) and using
Mandrake Linux 10.0 operation
system.computer.
Key words: neutron and photon
transport equations; Generalized
conjugate gradient methods; TORT;
Neutron transport; CGS; Bi-CGSTAB;
Preconditioner.
二、計畫緣由與目的
1. Introduction
The generalized conjugate
gradient (CG) method and its variants
[Fletcher, 1976; Concus and Golub,
1976; Eisenstat, Elman and Schultz,
1983; Saad and Schultz, 1985, 1986;
Dennis and Turner, 1987; Sonneveld,
1989] have been found effectively in
solving the large sparse linear systems
of equations [Brussino and Sonnad,
1989; Joly and Eymard, 1990]. The
convergence rate of the CG-like
methods takes the advantage of the
eigenvalue distribution of the coefficient
matrix [Axelsson and Lindskog, 1986].
The convergence rate of the CG-like
methods can be further accelerated by
preconditioning idea, which results in a
linear system having more favorable
eigenvalue distribution and
well-conditioned than those of A itself.
Instead of solving the original linear
system of equations
Ax = b, (1)
the main idea of the preconditioned
CG-like methods is to solve
C-1Ax = C-1b (2)
by CG-like methods. Here the matrix
4reference to an arbitrary origin and 
is the solid angle of the direction of
particle. The function ( , , )r E  is
the flux of particles at r with
energy E and moving in the direction
. The function s is the cross
section for scatering from energy E’
and direction ’  to energy E  and 
direction . Also, the functions t
and f are the macroscopic cross
section for total interaction and fission,
respectively. The functions  and 
represent the total fission yield and
the corresponding energy distribution.
The function Q represents an
extraneous source. In the numerical
computation of the three-dimension
discrete ordinates transport program
TORT for equation (3), a seven bands
matrix equations is always involved to
solve the flux [Rhodes and Simpson,
1995]. According to the program and
manual of the TORT version 3, the
matrix equations is described by
ai-1,j,kxi-1,j,k + ai,j,kxi,j,k + ai+1,j,kxi+1,j ,k
+ai,j-1,kxi,j-1 ,k
+ai,j+1,kxi,j +1,k + ai,j,k-1xi,j,k + ai,j,kxi,j,k +
ai,j,kxi,j,k+1 = bi,j,k
i=1,2,...,I, j=1,2,...,J, k=1,2,...,K. ( 4)
We can write (4) as the form of
7-stripe matrix solution
Ax=b (5)
where vectors x and b represent flux and source
in all space grid point.
The matrix equation is solved by
either point successive relaxation
method or line successive relaxation
method combined with Gaussian
elimination in TORT. The rounding
error of the Gaussian elimination can be
significant if the matrix is not diagonally.
The of solution of flux can be also
solved by the other method. For
example, preconditioned CGS and
Bi-CGSTAB, TFQMR, QMRCGSTAB.
The popularity of these methods is
due to several reasons as the following
[ Axelsson, 94].
(a) The rate of convergence of
theses methods can be improved
with various preconditioning techniques.
(b) The parameters of the these
method are estimated and updated by
the each iteration, automatically.
(c) These methods usually
have relatively high rate of convergence
and the rounding off error are
acceptable.
(d) The short recurrence
relations in each iteration makes
memory requirements and the
computing time to be acceptable.
Next, we find the solutions of system
(5) with the preconditioned Bi-CGSTAB
method which results in faster
acceleration of the convergence of
Bi-CGSTAB method. The basic idea
of the preconditioned CGS method is to
transfer the origin system (5) to a
well-conditioned matrix system
6it is easy to invert, a good approximation
for A and less storage requirement. In
other words, we should try to choose C
so that the matrix C-1A is being close to
the identity matrix. The eigenvalues of
C-1A should be more clustered
together about one than are those of A
for the problem (4).
The simple choice of the
preconditioning matrix C is as the
product of a lower triangular, L and
upper triangular, U i.e. C=LU or
C=LDU with diagonal matrix D. In
general, the relaxed pointwise
incomplete factorization method will
be applied to construct the lower
triangular, L, and upper triangular, U,
for preconditioning matrix C. The
choice of preconditioning matrix C as
described in the above is a special
case in for how to construct modified
incomplete LU preconditioning matrix C
in the references [Axelsson 1994;
Ortega, 1988].
We recall general procedures to
construct modified incomplete LU
preconditioning matrix C as the
followings for convenience
Let A=[aij], L =[lij] and U=[uij]
J={(i,j); aij0}.
The modified incomplete factorization
applied to the MM matrix A is
expressed as follows [Axelsson, 1984].
For k=1,2..., M, we perform the
operations for
lik =aik
(k)/akk
(k), i=k+1,...,M
(8)
and
aij
(k+1)= aij
(k) - lik akj
(k) ,
if aij 0 , and i j
aij
(k+1)= 0 ,
if aij = 0,
aij
(k+1)= aij
(k) - lik aki
(k) +
m k
M


1
( lik akm
(k) )  if (i,m)
J and i=j,
where = 0, or 0.95.
We define the upper triangular matrix U
and lower triangular L by
uij =0 for j < i,
uij = aij
(i) for i= 1,2,....,M,
j=1,i+1,.......M,
and
lij =0 for j > i ,
lij =1 for j = i ,
lij = lij for j < i,
respectively. Then we choose C= LU.
If the parameter  is chosen as zero,
matrix C is called ILU
preconditioner. If the parameter ωis
chosen as nonzero, for example 1,
matrix C is called MILU
preconditioner. The value of ω is
chosen to be 0.95, 0.9, 0.975, 0.8 and
0.5 in our numerical studies. The
choice of preconditioning matrix C as
described in the above is one of the
cases in the references, which discuss
how to construct incomplete LU
preconditioning matrix C more detail
8for m=2k+1;
wm+1= rk
for m=2k;
m= wm+1/m-1;
cm= 1/(1+)1/2;
m= m-1mcm;
dm= ckym + c-1dm-1;
ym= qk for m=2k+1
ym= uk for m=2k
xm= xm-1+dm;
If xmhas converged; stop;
(c) k+1=(h0, rk+1);
k= k+1/k;
qk+1= rk+1+kuk;
pk+1= qk+1+k(kpk+uk).
For algorithm 3 to be effective
iterative method, the linear system of
form
C z = f
where f= t, y must be easily solved.
The choice of a good preconditioner C
can have dramatic effect on the rate of
convergence. The matrix C, called
preconditioner, should be chosen so that
it is easy to invert, a good approximation
for A and less storage requirement. In
other words, we should try to choose C
so that the matrix C-1A is being close to
the identity matrix. The eigenvalues of
C-1A should be more clustered
together about one than are those of A.
In the paper [Chan et al, 1994],
they develop the QMRCGSTAB
algorithm which applied the
quasi-minimization principle to the
Bi-CGSTAB in the same way that
TFQMR is derived from CGS. A version
of QMRCGSTAB for the
preconditioned linear system
C-1Ax=C-1b
is described as the followings.
QMRCGSTAB Method for
C-1Ax=C-1b
(1) Start:
Choose x0 (e.g., solve Cx0=b);
Solve Cr0=b-Ax0;
Let p0=q0=r0 choose !0 such that
(h0, r0)0, e.g., h0=r0;
Let d0=0, 0=0, 0 = 1 = r0,
0=(h0,r0);
(2) For k=0, 1,... do
(a) y= Apk;
Solve Cv=y;
k= k/(h0,v);
sk=rk-kv;
w=Ask
Solve tk from Ctk =w;
k =(sk,tk)/(tk,tk);
rk+1= sk-ktk;
(b) For m = 2k+1, 2k+2, do
m+1 = sk
for m=2k+1,
m+1= rk
for m=2k+2,
m= m+1/m-1;
cm= 1/(1+)1/2;
10
(10)
where x is the solution being obtained
by either preconditioned CGS,
Bi-CGSTAB, TFQMR and
QMRCGSTAB or the line successive
relaxation method combined Gaussian
elimination, respectively.
However, we find that TFQMR
and QMRCGSTAB methods can’t
converge the limit of 150 iterations
with preconditioner MILU and ILU in
this testing problem. A breakdown of the
preconditioned TFQMR and
QMRCGSTAB occur at this testing
problem. It is the reason for the
breakdown of preconditioned TFQMR
and QMRCGSTAB that these methods
are divided by very small number during
the iteration. The 2-norm (length) of
residual can not be reduced by a factor
of 106 to the 2-norm of the initial
residual with the limit of 150
iterations .
However, the upper bound of
the residual for TFQMR and
QMRCGSTAB is available as the
following
||C-1b-C-1A xm|| τm (m+1) 1/2 (11)
where m andτm is defined in algorithm
3 and 4. [Saad , 2003]. The estimate
(11)
can be employed to the criterion of
convergence with the value of τm .
Thus, we list the convergent behavior of
the (inner) flux iterations completed at
each (outer) source iteration in
TFQMR and QMRCGSTAB
algorithms in Figures 4-5.
In the report, we also list the numerical
result for the comparison of
preconditioned CGS, Bi-CGSTAB,
TFQMR and QMRCGSTAB methods
with line SOR method being used in the
program TORT. Table 2 lists numerical
results of the flux at 10 key locations
with different methods. If we compare
the Table 2 for the test problem 6
involved with 8 set of matrix equations
with unknowns 24255 in TORT package,
the preconditioned CGS, Bi-CGSTAB,
TFQMR and QMRCGSTAB methods
have same results with the results which
is obtained by the line SOR method in
TORT. In the numerical computations,
we also find that both preconditioned
Bi-CGSTAB and CGS have similarly
convergent behavior in the test
problem in TORT package.
REFERENCES
1. Abu-Shumays I. K. (1987) Trans. Am.
Nucl. Soc. 55, 316.
2. Abu-Shumays I. K. (1990) SIAM J.
Sci. Stat. Comput. 11, 545.
3. Axelsson O. and Lindskog G. (1986)
Numer. Math. 48, 499.
4. Axelsson (1994) Iterative Solution
Methods Cambridge University Press,
New York.
5. Azmy Y. Y, Johnson J. O, Lillie R. A,
Rennich M. J, and Santoro R. T,
(2001)
Progress in Nuclear Energy, 39,321.
12
Table 1. Position data of the 10 key flux locations
Location X(cm)
Y
(cm)
Z
(cm)
1 0.00000E+00 0.00000E+00 1.30000E+02
2 -2.81400E+03 -6.92000E+02 1.30000E+02
3 2.81400E+03 -6.92000E+02 1.30000E+02
4 -2.81400E+03 6.92000E+02 1.30000E+02
5 2.81400E+03 6.92000E+02 1.30000E+02
6 0.00000E+00 0.00000E+00 4.80000E+02
7 -2.81400E+03 -6.92000E+02 4.80000E+02
8 2.81400E+03 -6.92000E+02 4.80000E+02
9 -2.81400E+03 6.92000E+02 4.80000E+02
10 2.81400E+03 6.92000E+02 4.80000E+02
Figure 1. Building model and 10 key flux locations in the sample problem.
Table 2. Numerical results of the flux at 10 key locations with different methods
for test problem 6 in Tort program.
bicgstab-ilu bicgstab-milu cgs-ilu cgs-milu tfqmr_ilu tfqmr_miluqmrscgstab_iluqmrscgstab_milu
2.41225E-22 2.41225E-22 2.41225E-22 2.41222E-22 2.41E-22 2.41E-22 2.41E-22 2.41E-22
2.61046E-21 2.61046E-21 2.61046E-21 2.61043E-21 2.61E-21 2.61E-21 2.61E-21 2.61E-21
2.70775E-21 2.70775E-21 2.70775E-21 2.70772E-21 2.71E-21 2.71E-21 2.71E-21 2.71E-21
2.08801E-23 2.08801E-23 2.08801E-23 2.08799E-23 2.09E-23 2.09E-23 2.09E-23 2.09E-23
1.22112E-22 1.22112E-22 1.22112E-22 1.22114E-22 1.22E-22 1.22E-22 1.22E-22 1.22E-22
3.03374E-22 3.03374E-22 3.03374E-22 3.03375E-22 3.03E-22 3.03E-22 3.03E-22 3.03E-22
2.74585E-21 2.74585E-21 2.74585E-21 2.74581E-21 2.75E-21 2.75E-21 2.75E-21 2.75E-21
3.01805E-21 3.01805E-21 3.01805E-21 3.01802E-21 3.02E-21 3.02E-21 3.02E-21 3.02E-21
5.84265E-23 5.84265E-23 5.84265E-23 5.84260E-23 5.84E-23 5.84E-23 5.84E-23 5.84E-23
3.36063E-22 3.36063E-22 3.36064E-22 3.36056E-22 3.36E-22 3.36E-22 3.36E-22 3.36E-22
