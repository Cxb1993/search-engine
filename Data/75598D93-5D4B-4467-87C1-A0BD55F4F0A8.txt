 2
擇分類規則 b，並執行其設定之動作，也就是將拒絕傳送此封包。 
 
Filter Source 
Address 
Destination 
Address 
Source 
Port 
Destination 
Port 
Protoco
l 
Cost Actio
n 
a 11* 01* 2-4 0-15 TCP 10 fwd 7
b 01* 0010 3-15 3-15 UDP 2 deny 
c 0101 * 3 * * 7 fwd 2
d 1101 101* * * ICMP 5 fwd 5
圖一：具有五個欄位的分類器範例 
在上述的例子中，我們稱分類規則 b 與分類規則 c 為互相衝突的兩個分類規則，因為
一個封包可能同時符合這兩個分類規則，而這兩個分類規則所設定的動作可能是彼此衝突
的。例如分類規則 b 的動作是拒絕傳送此封包，而分類規則 c 的動作卻是將此封包傳送至
路由器的第 2 個輸出埠。Hari 等[19]將分類規則衝突(filter conflict)以下列的方式表示： 
兩個分類規則 f 與 g 為互相衝突，若且唯若，以下三個條件均成立： 
1. 至少存在一個封包同時符合 f 與 g。 
2. 至少存在一個封包符合 f，但是不符合 g。 
3. 至少存在一個封包符合 g，但是不符合 f。 
衝突偵測可以分成下列兩種模式： 
1. 靜態(static)：已知 n 個分類規則，此模式將找出其中所有發生衝突的任何兩個分
類規則。此種模式適用於分析防火牆或提供服務品質的路由器中既有的分類器。 
2. 動態(dynamic)：已知 n 個分類規則與一個新的分類規則 f，此模式將找出 f 與原有
的 n 個分類規則之間所有的衝突。這種模式適用於會對分類器新增或刪除分類規
則的應用，如次世代的訊號程式(signaling programs)，這類的程式會傳送分類規則
與相對應的封包處理資訊。當訊號資訊在網路中傳遞時，路由器可以利用衝突偵
測演算法得知此訊號要求是否有與既有的分類規則發生衝突，並且將結果傳送回
傳送端。如果偵測不到衝突發生，分類器便會將此分類規則與相對應的封包處理
資訊加入分類器中。 
研究目標 
由於封包分類在網際網路上的重要性，近年來不管在學術界或業界均有許多研究者投
入心力於研發高效率的封包分類演算法，並且有相當不錯的研發成果。但是另外一個相關
的問題，也就是分類規則的衝突偵測問題，並沒有獲得太多的注意。現有的封包分類演算
法通常假設欲處理的分類規則並不包含有衝突的分類規則，或是使用簡單的方式來偵測是
否有分類規則發生衝突。而為了提高封包分類的速度，通常無法避免使用額外的資料結構
來協助比對與搜尋。但是由於記憶體需求也是封包分類演算法的一個重要考量，這些協助
搜尋的資料結構通常會被壓縮後才存放於記憶體中，而這也意味者在動態增加或刪除分類
規則時將十分的複雜，同時也使得衝突偵測演算法的效率變差。對於分類規則很少變動的
應用而言，增加或刪除分類規則的速度並不會造成重大的問題。但是隨著如網路入侵偵測
 4
a c
d
b
 
圖三：在二維空間中表示圖二的分類規則 
針對上述的選擇，分類規則所設定的成本必須滿足下列條件： 
1. cost(a) < cost(d) 
2. cost(d) < cost (c) 
3. cost(c) < cost (b) 
4. cost(b) < cost (a) 
由上述的條件中可以得到下列的不等式： 
 cost(a) < cost(a) 
很明顯的，這表示我們無法找到一種設定成本的方式，能同時滿足所有之前對於分類規則
發生衝突時的所做的選擇。為了解決上述的問題，Hari 等[19]提出利用增加額外的分解分類
規則(resolve filter)的作法。所謂的分解分類規則，即是一個表示兩個衝突的分類規則重疊
區域的分類規則。以分類規則 a 與 d 為例，需增加的分解分類規則 e 為（001*, 110*），而
其動作為分類規則 a 的動作，且成本必須小於 a 與 d。依照上述的方式，我們可以加入四
個分解分類規則至圖二的分類器中，如圖四所示，如此一來便能滿足原本的要求。為了說
明的方便，圖四中加入圖二中沒有的動作與成本欄位。 
 
Filter Source Address Destination Address Cost Action 
a 001* * 10 fwd 2 
b * 001* 25 fwd 1 
c 110* * 20 deny 
d * 110* 12 fwd 4 
e 001* 110* 8 fwd 2 
f 110* 110* 11 fwd 4 
g 110* 001* 12 deny 
h 001* 001* 8 fwd 1 
圖四：圖二在增加分解分類規則後的分類器 
假設給定一個分類器，Lu 與 Sahni [20]證明要決定需要加入的分解分類規則的最小數
目是一個 NP-hard [21]的問題。為了提高增加分解分類規則的執行效率，Hari 等[19]提出的
解決方式是對任何兩個衝突的分類規則增加一個分解分類規則，這可以保證任何衝突的分
類規則都能找到適當的成本設定以滿足任何需求。除了增加分解分類規則之外，該論文同
時也提出二維的單位元 trie 結構，並用它來偵測二維分類規則之間的衝突。 
利用單位元二維 trie 結構與切換指標(switch pointer)，任何兩個發生衝突的分類規則可
 6
規則 欄位 1  欄位 2 
R0 000000* 111001* 
R1 1001* 0000101* 
R2 10110* 111* 
R3 1111* 0000100* 
R4 00000100* 100010* 
R5 10111* 000000* 
R6 10* 1111* 
R7 0001010* * 
R8 000111* 100011* 
R9 000000* 111* 
R10 * * 
圖五：具有 11 個規則的二維資料庫 
規則 欄位 1  欄位 2 
R0 * * 
R1 000000* 111001* 
R2 000000* 111* 
R3 00000100* 100010* 
R4 0001010* * 
R5 000111* 10011* 
R6 10* 1111* 
R7 1001* 0000101* 
R8 10110* 111* 
R9 10111* 000000* 
R10 1111* 0000100* 
圖六：圖五資料庫經過以欄位 1 排序後的結果 
壓縮，結果如圖九與圖十所示。 
5. 針對步驟 1 選擇之欄位(即欄位 1)所建立的 Trie 進行處理，每個節點不再如 SBV
需儲存兩組位元向量，而是儲存兩組數字(L1, R1)與(L2, R2)，各組數字的產生方式
說明如下： 
z (L1, R1)：記錄資料庫中欄位 1 完全符合該節點所代表之前置位元串列的所有
規則的最小編號(L1)與最大編號(R1)。例如資料庫中欄位 1 為 000000*的規則
有 R1 與 R2，因此 L1 為 1，R1 為 2。很明顯的，非有效節點由於在資料庫並
有欄位 1 值完全符合的規則，因此 L1 與 R1 值為空白。 
z (L2, R2)：記錄資料庫中欄位 1 部份符合該節點所代表之前置位元串列的所有
規則的最小編號(L2)與最大編號(R2)。例如資料庫中欄位 1 部份符合 10*的規
則有 R6、R7、R8 與 R9，因此節點 10*的 L2 為 6，R2 為 9。 
根據上面所述，我們可以得知有效節點同時具有(L1, R1)與(L2, R2)，而非有效節點
僅具有(L2, R2)。此外，樹葉節點具有相同的(L1, R1)與(L2, R2)。 
6. 其他欄位所建立的 Trie 依參考文獻 [23] 所提出的方法進行處理，每個節點會儲
存兩個位元向量，方式如下： 
z BitVector1：如步驟 3 所敘述之方式。 
z BitVector2：如果節點所代表之前置位元串列部份符合資料庫中的規則 i 之相
 8
0 100
00 1
010    11
000         1
111
01
0
0 1
11
00,00
00,10
,   
01,05
,   
06,10
,   
01,03
01,02   
01,02
03,03   
03,03
04,04   
04,04
05,05   
05,05
07,07   
07,07
06,06   
06,09
10,10
10,10
08,08   
08,08
09,09   
09,09
,   
08,09
 
圖九：圖七經過路徑壓縮所得到的 Trie 
00 10
0  1
0000         1
11
0
0001
001 11
1000 1000 000
1111 1111 111
0000 0010 000
0000 0010 000
0100 0000 000
0100 0000 000
0001 0000 000
0001 0000 000
0000 0100 000
0000 0100 000
0000 0000 010
0000 0000 010
0000 0000 001
0000 0000 001
0000 0001 011
0010 0000 100
0110 0010 100
0000 0001 001
0000 0001 000
0000 0001 000
0111 0110 100
0001 0100 000
 
圖十：圖八經過路徑壓縮所得到的 Trie 
接下來我們說明如何檢查一個規則是否與既有規則發生衝突，假設欲檢查的規則為
(1*,1*)，檢查的過程如下： 
1. 對建立 Tries 過程步驟 1 所選擇的欄位(即欄位 1)而言，儲存由根節點至完全符合
1*的所有節點上的(L1, R1)清單，此例的儲存清單為(0,0)，然後將具有 1*為前置位
元串列的最小高度節點上的(L2, R2)加入之前的清單。因此，最後儲存的清單為(0,0)
與(6,10)。 
2. 對其他欄位則依參考文獻 [23] 所提出的方法計算出一個位元向量，將由根節點至
完全符合 1*的所有節點上的 BitVector1 與具有 1*為前置位元串列的最小高度節點
上的 BitVector2 執行聯集(即位元 OR)運算，結果為 11111110100。 
3. 依步驟 1 所儲存的清單取出步驟 2 計算出的位元向量中相對應的位元，位元值為
1 者，即表示該規則可能與(1*,1*)發生衝突。因此，我們可以得到 R0、R6 與 R8
為可能與(1*,1*)發生衝突之規則。 
