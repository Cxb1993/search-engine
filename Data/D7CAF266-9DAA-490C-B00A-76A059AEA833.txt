智慧型搜尋學習物件使用語意網技術之研究與實作 
 
Studying and Implementing an Intelligent Discovery of Learning Objects with 
Semantic Web Technologies 
 
 
 
摘要 
在數位學習的應用領域中主要是透過後設
資料對學習物件的描述，來提昇學習物件
的存取性、再利用性與可互動性。為了達
到這個目標，首要的工作是要能有智慧的
能力來發現學習物件，但現存的學習物件
後設資料(Learn Object Metadata, LOM)
並無法提供有智慧能力來描述學習物件，
因為學習物件後設資料是以 XML 標準所制
定出來的後設語言，其優點是強調語法與
資料格式，以便利資料的交換，但 XML 並
無提供電腦可解讀的語意來描述學習物
件。而本研究目的就是要採用知識本體的
技術來改善學習物件後設資料在語意描述
上的能力，透過 XML 名稱空間與屬性的設
定，將知識本體嵌入學習物件後設資料
中，這方式的主要優點是現存的學習物件
後設資料可以繼續被使用，不會被新發展
知識本體語言所取代，又可以達到有語意
描述的能力。在本研究中完成將學習物件
後設資料與知識本體的結合應用，並以
java 語言實作一個智慧型系統來輔助學生
在學期的選課。 
 
關鍵詞：學習物件後設資料、可擴展標示
語言、語意網、知識本體 
 
Abstract 
The concept of learning objects has 
been introduced in the e-learning field 
to enhance the accessibility, 
reusability, and interoperability of 
learning content. For reaching these 
functions, the first important affair 
needs to provide intelligent 
capabilities for finding relevant 
learning objects. The main problem of 
LOM is that it is an XML-based 
development, which emphasizes syntax 
and format rather than semantics and 
knowledge. Hence, even though LOM has 
the advantage of data transformations 
and digital libraries, it lacks the 
semantic metadata to provide reasoning 
and inference functions. In this study, 
ontologies can be integrated with LOM 
by the XML namespaces and attributes. 
That is, ontologies do not change the 
original schema of LOM. Hence, the 
existing LOM can continue to be used. 
This study proposes a novel integration 
approach that combines the LOM and 
ontologies. To demonstrate the 
feasibility of this approach, this 
study implements a prototype 
java-based intelligent system that 
offers dynamic recommendation lists to 
assist student to plan semester 
courses. 
 
Keyword: LOM, XML, Semantic Web, 
Ontology 
 
1. 前言 
在這資訊爆炸的世紀，我們開始重視數
位的資料或是電子的檔案，如何將這些枯
燥乏味的文字透過一些工具來將資料重新
包裝成有用的資訊。但電子檔案為什麼如
此重要呢？原因不外乎是資料數位化後所
帶來的便利性，也因此這些需要龐大資料
量的研究單位等機構都必須將這些寶貴的
資料蒐集歸納後，再帶入研究系統中，將
這些單純的文字訊息透過數位工具來得到
人類所需的結果，更因這些便利性，人們
逐漸將早期的紙本資料轉換成電子檔案，
透過電腦加以轉換，將紙本文字數位化，
而光將這些資料電子化是不夠的，當電腦
還沒普及的時候，每個工作單位或是服務
單位都會有自家的表單需要填寫，倘若當
中的資料都有些相似或相關之處，在進行
修什麼課可以修得較適合的課程或是可修
得更多的學程，也就是電腦藉由推論引擎
呈現知識。 
 
3. 研究方法 
本論文主要是植基於 LOM 檔案描述格
式，而 LOM 是架構於 XML 與 XML Schema 之
上，透過這些標準可確保資料在交換或是
轉換可以迅速正確的處理，並可導入 RDF
與 RDF Schema，使電腦也可以解讀檔案；
而 RDF、RDF Schema、OWL 都是依循 XML 格
式所撰寫，更因此可以資料交換時不會造
成無法判讀。當電腦可以相互溝通時，就
可以為電腦加入知識層面的語言，透過 OWL
定義各課程為一個類別，再透過關係描述
來定義課程間的相互關係，假若有 OWL 無
法描述的關係，可藉由 Rule 來協助訂出新
的關聯性。當上述前置作業完成後，就可
將原先的 LOM 檔案透過 XML 剖析器擷取所
需的資訊，而後依序透過 OWL 與 Rule 推論
引擎進行知識的找查，最後會將所需的資
料包成適當的格式作輸出即可。 
圖 1. 本論文知識本體階層圖 
 
3.1 LOM (Learning Object Metadata) 
LOM 是一資料描述模組，一般都是使用
XML 進行撰寫，其主要用於物件學習並可讓
數位的系統如電腦、手持裝置等進行存取
或是應用。而 LOM 主要目的是讓物件學習
可重複使用、提升互用性，其標準是由 IEEE 
1484.12.1 標準所規範。 
 
3.2 XML (Extensible Markup Language) 
本論文主要是建構於 XML 之上，也就
是 XML 檔案必須為"Well-fomed"。早期的
Html 格式所需的嚴謹性太低，標簽定義的
需求上也非常鬆散，其原因是希望可讓使
用者快速上手，而缺點是，假若想要從龐
大的 Html 文件中撈出些許所需資料，這可
是非常困難的是，原因是現在的網頁瀏覽
器已經將Html常遇到的錯誤狀況進行自動
修補的功能，假若原始的標籤的使用上是
不合法的，瀏覽器也會自行判讀成不需要
的資料，並不會顯示，想要在這種檔案中
抓出些資料可說是難上加難。倘若如今規
範出 XML 檔案，只要網頁遵循 XML 標準進
行撰寫，最後可透過 XML 剖析器來協助驗
證該檔案是否為＂Well-formed＂，而後只
需透過 XML 剖析器即可輕易將當中的資料
取出並加以應用。下列為 XML 所規範出幾
個基本規定： 
1. 必須有起始標籤與結束標籤。 
2. 每個標籤必須有結束符號＂\＂。 
3. 每個標籤必須為一對，不可以交錯定
義。 
4. 所有的元素必須使用雙引號註明。 
5. 不可以的符號有：「<, >, [, ], &」。 
6. 標籤命名規則：標籤起始值必須為 a-z 
或_，而後的值必須為 a-z, 0~9, .,- , _。 
7. 標籤大小寫必須一致。 
 
3.3  XML Schema 
XML 是一個明確的標記語言，並規範了
所有標籤定義，依照所有 XML 所制定的標
準所轉寫的文件稱＂Well-formed＂，而後
透過 XML 剖析器將所需的資訊擷取出，也
因此將 XML 文件給不同的使用者進行修改
更是簡單不過的事。然而，光是定義出文
件標準是不夠的，假設今天規定所有學校
須將學生基本資料透過 XML 格式撰寫，這
對每所學校是件簡單的事情，但是可發現
每所學校所定義出的學生基本資料格式與
標籤名稱略有差異，假設今天有十所學校
要將資料進行交換並新增至資料庫，將會
有十種 XML 檔案格式必須去判斷，這是非
常不便利的動作。如今，若透過 XML Schema
定義出資料型態、標籤名稱、標籤出現次
數與順序，將這些訴求依照學生基本資料
規範出統一格式，往後只需依照 XML 
Schema 去撰寫學生基本資料，最後再透過
XML驗證工具判斷XML檔案是否依照該XML 
Schema 去撰寫，假若這分檔案有符合 XML 
Schema 之規定，我們稱該檔案為＂
Valid＂，也就是所有的 XML 文件只需透過
相同的判斷與法去判讀即可，不需依照各
單位的格式去進行判別。如此一來，要將
資料進行交換或是加以使用只需依照 XML 
Schema 來更改 XML 剖析器的使用即可，比
起以往需要依照各各單位去更改程式方便
圖 3: OWL 與 RDF 關係 
 
本論文主要是使用 Windows XP 系統進
行開發，而開發程式是使用 Java 的 J2SE 
1.5 版，所用的 Java API 是 Eclipse 3.3。
至於知識本體推論引擎原先是以 Jena 
2.4.5 進行開發，但是發現 Jena 並無支援
完整的 OWL DL，而 Jena 的使用手冊是推薦
使用 Jena 與 Pellet 做 OWL DL 的推論引擎
[11]，其原因是 Jena 推論引擎會將所有的
資料一一推論出，無論是之前定義過的關
係，或是 OWL 資料陳述都會毫無篩選的輸
出，經過多番測試 Pellet 所推論出的結果
非常精確，但是資程式撰寫上相當不便
利，因此本文之系統還是使用 Jena，並自
行撰寫篩選程式，最後使用的版本是 Jena 
2.5.5，而本專計畫所使用之工具如下表所
示。 
 
表格 1: 開發工具 
 項目 使用工具 
剖析
器 XML 剖析器 JDOM 1.1 
Semantic Web 
toolkit Jena 2.5.5 推論 
引擎 OWL Inference 
Engine Jena 2.5.5 
Operation 
System Windows XP 
Java  J2SE 1.5 
開發 
環境 
Java API Eclipse 3.3 
4. 系統架構 
本論文所呈現部份可分為：知識本
體、課程、實例這三大部分，課程與實例
部分主要是舉用學校的範例，而實例這部
份是使用早期的 LOM 系統所定義出的 XML
檔案，由此可清楚得知將早期的 LOM 加上
知識本體即可讓一個不起眼的 XML 檔案搖
身一變，變成了具有知識推理的檔案。在
這知識本體的檔案中，我們必須定義出所
有的課程作為子類別，並找出所有課程間
的相互關係，當這些知識被清楚定義後，
我們找一學生之前修過的課程資料做為實
例，並依照原先的 LOM 格式進行撰寫。本
論文假是一服務單位的推論工具，故預設
服務單位可把學生與課程描述檔轉換成
CSV 檔，藉由 CSV 檔描述學生修課的資訊或
是下學期將要開授的課程，當這兩個檔案
備妥後即可進行推論。以此系統為例，推
論前必須準備兩個檔案：學生修課檔案、
下學期開課檔案、學程規劃檔案，並依序
命名為：Student test.csv 和 Course 
test.csv，備妥這兩個檔案後，視窗畫面
選擇所要推論的學生檔案與開課檔案後，
先轉成以 XML 為基礎的 LOM 格式，再將檔
案透過 RDF 的格式將原先的 LOM 資料轉換
成實例的描述格式，最後再將所轉換出的
學生修課實例、下學期所開的課程實例、
學成的規範一一整合成最終實例檔，將以
下學期所開的課程為主，假若學生已經修
過該堂課，會將學生代號併入課程實例
中，而後將學生修課實例檔與學程檔案進
行合併，假若學生有修過的課程，將會以
學號取代，反之則保留原先代號，最後將
所合併出來的檔案包成 FinalFact.owl 檔
後，即可開始推論。 
現在，我們已將最重要的知識本體檔
案與學生課程實例檔案準備好即可開始推
論，以本論文為例，我們將整個系統切成
三個部份，分別為： OWL Fact 、 OWL 
Inference 和 OWL Rule，當成是開始執行
時，會先讀取 LOM.xml 檔案，並使用 JDOM
剖析器將 XML 檔案中所需的資料依照所需
的格式轉換成實例，而後將所轉換的資料
合併於原先的知識本體檔案。現在已經有
了實例與知識本體檔案，可以開始使用推
論引擎進行推論，一開始會先使用 OWL 的
推論引擎進行推論，將較基礎較簡易的部
份先行推論，倘若有較深入的關係需描
述，可藉由 Rule 表達並推論之。 
 
4.1OWL Fact 
程式。Jena 提供了一些語意網的 API，諸
如：RDF、RDFS、OWL、SPARQL 和 Rule 的推
論引擎。 
本論文在進行 Rule 推論時，會先讀取
並載入 rules 檔案，而後才可開始推論，
所推論出的結果會先行轉換成 OWL 格式並
顯示於對話框中。 
 
 
 
 
圖 8. Rule 流程圖 
 
當開始使用 Rule 推論引擎推論時，我
們必須先設定之是本體的 namespace，之後
才可以建立一個預設的模組和資源，如果
已經先將所有的規則存入 rules 檔案中即
可透過函式載入即可，假若沒事先預備，
則必須在程式中加註 rule 以供推論；當
rule 載入後則建立一實例函式並載入知識
本體檔案，最後在建立一個實例模組即
可。在 Jena 的 rule 推論引擎可設定是要
找哪個資源、特性或是哪個領域；舉例來
說，如果要找 inverseof 的特性，可直接
在輸出的函式上設定，而要找所有的特性
則必須一一的透過函式找出。 
圖 9. Jena rule 推論流程圖 
 
當我們選擇有所的rule作為我們的輸
出 後 ， 我 們 必 須 使 用 “listen 
statement“和“get inference result＂
取出推論結果，但不是所有的推論引擎使
用相同的資料輸出格式，因此我們還必須
將所推論的結果進行重整，並將最後推論
出的結果顯示於對話框中，此時，整個系
統推輪才算完成，最後可以語原先的實例
檔案進行比較，可發現會有幾門課程被推
薦。 
5. 系統執行 
本論文主要呈現的知識部分有二，但
這些知識部分都是在描述課程代號的關
係，對使用者來說是非常毫無意義的檔
案，最重要的是如何將這些資料轉換成對
學生、對使用者會帶來很大助益，以下將
介紹本論文的執行成果。 
 
5.1 必備檔案 
本論文主要有課程描述檔、下學期開
課描述檔、學成規範描述檔、OWL 知識本體
檔、與 Rule 規則描述檔。本論文以學校系
統為考量，若要將學生資料或是課程資料
取出並進行推論必須以一通用且簡易之格
式呈現資料，故本論文以最基本的 CSV 檔
呈現，只要將學期、課程代號、課程名稱、
學號轉換成 CSV 檔，即可透過程式轉換成
符合描述 LOM 格式的 XML 檔案，透過 LOM
的描述，可以將最後所推論出的結果反向
找出相對的關連性，最後所推論出的資料
將不再是以課號呈現，而是以學號或是課
程名稱所表示，使其更具有人性化。 
Start
Set namespace by 
URI
Create a default 
model
Create a resorce Finish
Set rule mode and 
axiom
Create an instance
Listen Statement
Get inference result
Output to 
SoProRule.owl
Load ontology file
Create inference 
model
Set which property 
want to get
Reorganization 
result
然而，推論引擎功能甚強，但是以 OWL
部分僅提供簡易的資料敘述，OWL 將定義一
為 Course 的類別作主類別，而所開的課程
都是 Course 的子類別，並透過 OWL 描述其
關連性，進而得知這學期所開課程之關連
性。如圖 10 第一行可得知，現正描述的關
連性是 Security_Practice，而所對應到的
物件是第二行，子物件則位於第三行，而
從第六行所對應的關連性與第七行的關連
性是成 inverseOf 的。如今要進行較龐大
的規範則必須使用 Rule 呈現，而本論文將
透過Rule的判斷式判別是否有修滿學程之
規定，若修滿學程學分數，將會有訊息告
知，故必須要有一檔案來呈現學成的規
定，Rule 部分主要是協助 OWL 描述不足的
部份，透過多個課程代號與關連性推論出
是否有修完學程。 
系統即可推論出是否有修得學程。圖 13 為
使用 Rule 推論引擎程式片段，系統執行時
必須先設定所對應的的 URI 與設定稱謂，
而後讀入 rules 檔案與實例檔案，最後建
立InfModel並使用回圈將推論結果顯現出
來。 
 
 
圖 13、Rule 推論引擎程式片段 
 
系統右半邊的Result按鈕將會把左邊
所推論出來的資訊，透過 LOM 的檔案去尋
找所代表的意義，並將課程與學生修課的
關係以口語化表示之，由圖 11 可發現左邊
都是課程間的描述，而所用的都是課號而
不是課程名稱，此時將這些課號與之前的
實例檔進行對照即可找出課程名稱，使系
統更加人性化。 
6. 結論 
以本論文實例為例，每當開學前後，學
生最常見的問題是要修什麼課，或是修哪
些課才好；而後學生總是會依照過去的經
驗選擇較輕鬆的課程。然而，若要到學校
讀書，本該是多學一點，學的專一點，修
完所有課程後可以讓學生得到更多的證照
或是學程，而這些相關資訊通常系上會以
紙本或是網頁進行相關公告，但是學生未
必會去查看，或是可以找得較適合的課程
或是資訊。為此，該系可依照各系所需求
使用 OWL 建立這些相關知識本體，往後學
生進行網路選課時可立即告知推薦課程，
透過網路選課提供學生選擇適合的課程。
如此一來，網頁與電腦不再是提供使用者
選取相關功能，而是有智慧的提供使用者
是當訊息。雖然本系統可以推論出是否有
修得學程，但在 rules 規範上並非依照真
正學程給的要求去設計，往後可 rules 強
化，使的系統更有實際的效益存在。 
 
 
 
 
 
 
7. 參考文獻 
[1.]T. Bray, J. Paoli, C. M. 
Sperberg-McQueen, E. Maler, and F. 
Yergeau. Extensible Markup 
Language (XML) 1.0 (Fourth 
Edition). 
http://www.w3.org/TR/2006/REC-xm
l-20060816/ [10 July 2008]. 
[2.]E. Wilde. XML technologies 
dissected. IEEE, Internet 
Computing, Vol. 7, No 5, pp. 74-78, 
2003. 
[3.]Fallside, D. C. & Walmsley, P. W3C 
Recommendation (2004). XML Schema 
Part 0: Primer Second Edition. 
available at: 
http://www.w3.org/TR/2004/REC-xm
lschema-0-20041028/ [accessed 16 
July 2008] 
[4.]D. Brickley, and R. V. Guha. RDF 
Vocabulary Description Language 
1.0: RDF Schema. 
http://www.w3.org/TR/rdf-schema 
[16 May 2008]. 
[5.]D. L. McGuinness, and F. v. 
Harmelen. OWL Web Ontology 
Language Overview. 
http://web5.w3.org/TR/owl-featur
es/ . 
[6.]IEEE (2005). IEEE LOM. available at: 
http://ltsc.ieee.org/wg12/ 
[accessed 25 July 2008]. 
[7.]Hsu I-C. SXRS: An XLink-based 
Recommender System using Semantic 
Web technologies Expert Systems 
with Applications 
2008.doi:10.1016/j.eswa.2008.02.
062. 
[8.]Hsu I-C, Kao SJ. An OWL-based 
extensible transcoding system for 
mobile multi-devices. Journal of 
Information Science 2005; Vol. 31, 
No 3, pp. 178-195 . 
[9.]Dragan Gaevi DD, Vladan Devedi. 
MDA-based Automatic OWL Ontology 
