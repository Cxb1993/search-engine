2 
 
中文摘要 
 
能力成熟模型綜合(CMMI)是當今最廣為接受的指導原則，此原則通盤考量公司組織營運模式、軟體
發展程序以及整體互動狀況。以需求發展過程為例，此成熟模型幫助公司組織有效的發展軟體需求，有
系統的管理需求發展過程。現今有許多研究針對需求發展等相關問題進行探討，但諸多尚未提出有效方
法。 
根據我們的觀察，一般的軟體公司多半僅僅涉獵幾個特定應用領域。然而，每個領域有其既定特質，
因此不同領域在實踐 CMMI 指導原則上有其差異。在此，我們透過多年在工作流程軟體上的研究，加上
CMMI 發展原則，對於發展工作流程軟體需求，歸納出一套有效的發展模式，這套模式遵循 CMMI 發展
原則，透過模式的執行可促使公司組織及應用軟體達到相對應的成熟度。 
 
Abstract. 
 
Capability Maturity Model  Integration  (CMMI)  is  the most popular one used  to guide 
process  improvement  across  a  project,  a  division,  or  an  entire  organization.  One  CMMI 
benefit expected  is  increasing  the  focus  and  consistency  in  the  requirement development 
and  management.  There  are  lots  of  researches  which  address  related  problems  in 
requirement development process.   
On the other hand, a software company usually works in several application areas only. 
Each  area  has  its  own  characters,  thus  the  CMMI  guidance  for  one  company  might  be 
different from others’. We aim at   the  problem  from  another  viewpoint:  software 
development  in  an  area  might  be  summarized  as  a  set  of  templates.  The  development 
processes associated with these templates might cause them to satisfy CMMI 3. With years 
of  experiences  on WfMS  researches  and  advices, we  developed  a model  for  requirement 
development of the area to satisfy the goals of the requirement development process area in 
CMMI level 3. The validation shall be down further.   
 
1. Introduction 
During requirement development, we encounter many problems  that occur again and 
4 
 
such as questionnaire and template as well as to get the expected products, which fulfill the 
goals then.   
 
The report  is structured as follows: In Section2, we summarize the templates designed 
in  our  previous  work  and  role  of  ISO  in  developing  process  improvement  strategies.  In 
Section 3, we present two patterns which are defined for validating the template instances. 
Section  4,  a  Tree‐based  Document  Model  is  presented  for  constructing  the  templates 
presented in the model proposed in our previous research. Conclusion of our work is given in 
Section 5. 
6 
 
In development customer requirement stage, developers elicit customer needs with the 
questionnaire, e.g.  the  sample  shown  in Table2‐1, designed with high  level  concepts  (e.g., 
goal, need, expectation, operation, and  constrain). The  replies got  from  the questionnaire 
are used to roughly identify the components in the application (e.g., the number of business 
processes, applications, and relevant data). Our model adopts the information based on the 
questionnaires,  shown  as  in  Table  2‐2  and  2‐3,  to  elicit  the  stakeholder  candidates  who 
satisfy the conditions, and then select the candidates based on their current status such as 
busy or idle. 
Table 2‐1: customer requirements elicited from original needs 
Module Name  Purchase Module  Date  8.3.06 
Module ID  M00001  Designer  Chris 
Workflow platform  Agentflow 2.1  Version  1.1 
Module Description 
Fetch the data of orders from ERP purchase system, and then instantiate an approval workflow. After 
the approval, the new application updates the related data of original database. 
The number of workflows  2 
Description 
1. A workflow of periodical checking of purchase order 
2. Approval workflow 
The number of e‐forms  2 
Description 
1. Purchase order 
2. the hard copy of purchase order with pdf format 
The number of applications  1 
Description 
1. Inquiry order application 
Others: System Architecture 
 
 
8 
 
(CRDvM). When  there  is an acceptable  request change,  the corresponding  tasks should be 
executed to  fix the problem to generate the appropriate output. Meanwhile, the traceable 
records to denote the scope affected are saved.   
Table 2‐4: the identification of purchase order workflow periodical checking     
 
 
   
Figure 2‐2 the form of approval workflow.   
Module 
Name 
A workflow of periodical checking of purchase order   
Module ID  Wf000001 
Date  8.3.06  Version  1.0 
Designer  Christina  Platform  Agentflow2.1 
Description 
The workflow application checks the data of purchase order and preserves the check records. 
Process Initiator    System automated execution 
Participant Dispatch    Random dispatch one candidate   
Process Accomplishment Time  No limitation 
Timing Control  No   
Periodical Initiation    No   
Involved Form    Approval form   
Others   
10 
 
activities recommended in the guideline. Concluding in [7], implementing the processes with 
these  activities  could  enhance  process  reliability.  Therefore,  all  the  RD‐PA3  validation 
processes proposed in this research are established with them. The details of these activities 
are listed below. 
(1) To approve documents for adequacy prior to issue. 
(2) To review and update as necessary and re‐approve documents. 
(3) To ensure that changes and the current revision status of documents are identified. 
(4) To ensure that relevant versions of applicable documents are available at points of use. 
(5) To ensure that documents remain legible and readily identifiable. 
(6) To  ensure  that  documents  of  external  origin  are  identified  and  their  distribution 
controlled. 
(7) To  prevent  the  unintended  use  of  obsolete  documents,  and  to  apply  suitable 
identification to them if they are retained for any purpose. 
With the seven activities, the management patterns and the document model are presented.   
12 
 
succeeding procedure.   
 
 Create ‐ The activity establishes a raw document which may have predefined format.   
 
 Retrieve  ‐  The  activity  checks  out  (duplicates)  an  existing  document  from  a 
repository and leaves the primitive document there.   
 
 Update ‐ The activity performs a serious of edit and modification operations on the 
document content, including “add”, “alter”, and “erase” of the subject matter.   
 
 Comment  ‐ The optional activity offers a  service  for all  involved  staffs  (defined  in 
apply activity) to share their opinions about the manipulation  indicated  in apply or 
the document content modified within update. These commentaries are attached to 
support the execution of the succeeding activities such as review and approve.   
 
 Review ‐ The activity is performed at the following two cases.   
 The first case is that reviewing the manipulation (a serious of activities) generated 
in  apply  activity  and  deciding  whether  the  content  of  associated  document  is 
operated by the manipulation, e.g., obsoleting or updating a document. All these 
activities are executed referring to the comment(s) attached with the reviewal.   
 Secondly, it reviews the document content updated by the nearest update activity 
in preceding process referring the comment(s) attached with the reviewal.   
 
 Approve ‐ The activity is responsible for authorizing the content agreed in preceding 
review(s). 
 
14 
 
 
 If distributing a document published is queried, a distribute activity is performed at 
the end of a documentation process. 
 
 
In accordance with RD‐PA3 and the activities depicted upon, two patterns for document 
control  are  presented:  (1)  DocumentEvolvement  and  (2)  ManageObsolescence.  The 
notations  introduced with BPMN [8‐9] are partially used  in these control patterns. They are 
shown in Table 3‐1. In addition, the elements used in the pattern descriptions are specified in 
Table  3‐3  and  3‐4.  The  two  tables  show  the  detailed  descriptions  of  these  two  patterns, 
respectively. 
 
The DocumentEvolvement control pattern provides the basis for managing documents. 
The manipulation  in  the pattern denotes  to “create”, “modify”, or “review”  (periodically) a 
document.  As  regards  the  ManageObsolescence  pattern,  the  apply  activity  implies  to 
“obsolete” or “recover” a document. As a  result of obsolescence, user ought  to  revive  the 
document firstly before further utilization. 
 
 
 
 
 
 
 
 
 
Rule 6: … + Approve + Publish 
Rule 7: … + Publish + Distribute 
Task (Activity) 
Table 3‐1 Notations used in Document Control Patterns 
 ProcessStart 
Normal Flow 
ProcessEnd 
Default Flow 
Multiple Instances 
Exclusive Decision (XOR)
16 
 
for staffs to develop some document.   
 Structure:   
 
 
 
   
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Apply 
Update 
Publish 
agree 
cancel 
Comment  Review2 
Approve 
Distribute 
Review1 
agree 
submit 
agree 
reject to apply 
reject to previous stage 
reject to update 
reject to update reject to 
processEnd 
Create  Retrieve
create  retrieve 
18 
 
purchase budget  in next annual) according to the  information generated from 
update  to  review2 activity. The approver could make  three possible decisions 
which are:   
1) authorizing  the  involvement(s)  to  execute  the  actions  mentioned  in  the 
document and submit the document to publish activity,   
2) rejecting  the  request(s)  mentioned  in  the  document  and  asking  the 
reviewer to re‐inspect the document, or   
3) rejecting the request(s) and asking the updater to modify again.   
(g) Publish 
The activity publishes  the document received  from an approve activity  into a 
general repository. 
2. Control Node: 
An XOR gateway connects with more than one outflow. The evaluation result of the 
XOR gateway decides one of the outflows to continue. The logic of the outflows is 
based on the manipulation of apply or the parameters (described in Chapter 4) set 
in design time. 
 Consequence:   
The  quality  of  a  document  created  and/or  updated  according  to  the  processes 
generated by the pattern is maintained.   
 
 
 Name: ManageObsolescence 
 Context: The charge of mis‐obsoleting a useful document or getting a wrong recovery
to corrupt a normal order is unpredictable.   
 Problem: 
Intent:  constructing  a  generic  process  for  building  the  families  of  customized 
processes  with  concerning  specific  obsolete  or  recovery  policies  of  the 
involving document.   
Forces: 1. A company wants to give a rule to authorize appropriate staff(s) to obsolete 
or recover a document at a right time. 
2. For preventing unexpected damage, a document  is obsoleted or recovered 
after getting agreements from related managers. 
Table 3‐4 Document Control Pattern 2 ‐ ManageObsolescence 
20 
 
The performer(s) of the activity comments on the document retrieved and  its 
following manipulation produced in the proceeding apply activity. 
(c) Review 
The  review  activity  performs  an  inspection  on  the  document  and  its 
manipulation. The inspection could have two possible outcomes.   
1) The first one is that the reviewer agrees to discard or recover the document 
with the manipulation. After getting the agreement, the document  is sent 
to approve activity.   
2)  The  second  one  is  that  the  reviewer  disagrees  to  discard  or  recover  the 
document with the manipulation. The execution is terminated immediately. 
(d) Approve 
The approver decides to authorize the involvement(s) to discard or recover the 
document according  to  the  information generated  from comment and  review 
activity. The approver could make two possible decisions which are:   
1) authorizing  the  involvement(s)  to  discard  or  recover  the  document  and 
submit the document to publish activity or   
2) rejecting  the  discard  or  recover  request  and  terminating  the  execution 
immediately.   
(e) Publish 
The activity publishes  the document received  from an approve activity  into a 
general(obsolete) repository.   
2. Control Node: 
It is the same as the description of pattern Document Evolvement. 
 Consequence: 
The  pattern  provides  methods  of  preventing  the  unintended  use  of  obsolete 
documents or discard of useful documents.     
 
 
22 
 
 
 
 
 
 
Figure 4‐1  is a document example whose  Id={i1,i2,i3,i4,i5,i6} and  Ld={a1,a2,a3,a4,a5,a6}.  In 
the  Figure, a  rectangle means a node  (portion) and  the directed arc  connects  two nodes, 
where the head is the child and the tail is the parent. All nodes shown in the Figure are typed 
with  the  stereotypes defined. The node  r which has no  superior  is  typed with <root>. All 
nodes belonging to  Id and Ld are the descendants of r which are typed with <internal> and 
<atomic>, respectively.   
 
The  content  of  a  document  d  is  developed within  a  boundary  that  is  enclosed  by  a 
specific  (main)  subject assigned  to d’s  root. The  root node  is added  for  the  tree  structure 
when d  is created with a subject.  In general, the main subject can be divided  into a set of 
sub‐subjects recursively according to some  logic: A subject  is not divided when  it  is explicit 
enough to be specified directly. The division  logic  is out of the scope of this thesis, and not 
concerned here.   
 
 
– CD : ID∪{ro} ND* is a function mapping node n1 to its child set N1={n ND| PD(n) = n1} 
ؿND and denoted as CD(n1) = N1.   
– DCD contains a set of documents which are referred by D through R. 
– R: RD՜DCD is a function creating the relation between reference node r of D and Di, 
Di DCD, denoted as R(r) = Di. R is an onto function.   
Figure 4‐1 the tree structure of a basic document d 
24 
 
4.3, respectively.   
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Let document d = (Nd, Pd, Cd, Dcd, R) be instantiated upon Definition 4.1 and represented 
in a tree structure. The content of d presented  in the form  is  interpreted by the bottom‐up 
procedure. The procedure is executed iteratively from leaves to root ro within the tree. In an 
iteration, child nodes Cd(i) transfer the data to their parent  i,  i {ro}∪Id. For node  i, the data 
gotten from i’s child nodes is denoted as si(m0,m1,…mj,…,mk) where the subject si depicted in 
i  is  treated  in data mj  of nj,  nj Cd(i)  k=|Cd(i)|‐1  and  0≤j≤k.  The procedure  is  executed 
iteratively till ro gets the data transferred from all descendants.   
 
Definition 4.3 (Compound Document): 
Let a compound document D=(Nd, Pd, Cd, Dcd, R) be a document, where   
– Nd={ro}∪Id∪Ld, Ld=Rd∪Ad and Rd്׎, 
– n {ro}∪Id∪Ad, the definition of n is the same as the one of the basic document, 
– r Rd, reference node r cites a document D’, D’אDcd, by R to support D on the 
subject si held by Pd(r). Here, DבDcd and Dcd്׎.   
 The main subject sd’ of D’ is part of si. 
 sd’ is different to the subject(s) of r’s sibling(s).   
Definition 4.2 (Basic Document): 
Let a basic document D=(Nd, Pd, Cd, Dcd, R) be a document, where Nd={ro}∪Id∪Ld, Ld=Ad and 
Dcd=׎ 
– a Ad, a describes the information focused on the subject associated with its parent 
Pd(a).   
– ׊iאId, i declares a sub‐subject being part of the subject stated on its parent Pd(i). ׍i, 
jאId, i്j and Pd(i)=Pd(j), the subjects of i and j are the same.   
– Node ro indicates the main subject of document D. 
26 
 
works on the three nodes, i4, i5 and i1, the data held by i1 is si1(si4(ca1,ca2), si5(ca3,ca4)). 
Condition4: Cd(i)תAd≠׎ ר Cd(i)תId≠׎ ר the data of the nodes in Cd(i)תId are generated.   
In this example, the statement specified in conidtion4 is satisfied by <internal> node i3, 
when si6(ca6)  is produced. The  information 5, denoted as ca5, and data si6(ca6) belonging  to 
<atomic>  node  a5  and  <internal>  node  i6  depict  the  subject  si3  holding  by  i3.  After  the 
propagation operation works on  the  three nodes, a5,  i6 and  i3,  the data held by  i3  is si3(ca5, 
si6(ca6)). 
 
The  content  of  d  is  generated  at  the  end  of  the  procedure,  denoted  as 
sr(si1(si4(ca1,ca2),si5(ca3,ca4)), si2( ), si3(ca5,si6(ca6))).   
 
Besides, when d is a compound document, the content of d is contributed by d and d’s 
supporting document(s). The propagation operations working on d are  similar  to  that of a 
basic document, when the data of d’s supporting documents are generated. For example, the 
subject  si’3  of  the  compound  document  d’  shown  in  Figure  4‐2  is  supported  by  the  basic 
document d shown in Figure 4‐1. Let the content of d be generated. The data propagated to 
i’3  are  c’4’and  sr(si1(si4(ca1,ca2),si5(ca3,ca4)),  si2(  ),  si3(ca5,si6(ca6))).  The  data  are  used  in  the 
following operations as which work on a basic document.   
 
A  document  is  accessed  under  certain  control  which  permits  or  denies  the  use 
requested  by  a  particular  entity  (system  or  operator).  The  access  control  mechanism 
identifies the authorization of a requester such as the visible region of a document. The DMS 
displays  the  information  described  in  the  portions  of  a  document, when  a  requester  has 
permission. Otherwise, the information is hidden. In order to support the function requested 
by DMS, we define  four attributes of a document, which are visible, modifiable, status and 
28 
 
 
 
 
 
 
 
 
 
Definition 4.5 (Comment): 
A comment is a tuple CO = (D, S, M) which remarks the portions modified in document D, 
such that   
– D = (ND, PD, CD) is a document of which some portions are modified.   
– All these portions modified are stored in S, S⊆ND. 
– M denotes the remark attached to D because of the modification.   
30 
 
References 
[1] R. Darimont, A. Lamsweerde, “Formal Refinement Patterns for Goal‐Driven Requirement 
Elaboration,” Proc. 4th ACM  Symposium on  the  Foundations of  Software Engineering, pp. 
179‐190, Oct., 1996. 
[2] M.Paulk et al.,  “Key Practices of Capability Maturity Model  for Software,” Version 1.1, 
Technical Report CMU/SEI‐93‐TR‐25, Software Eng. Inst., Carnegie Mellon Univ., Pittsburgh, 
Penn.,1993http://www.sei.cmu.edu/pub/documents/93.reports/pdf/tr24.93.pdf. 
[3]  CMMI  Product  Team,  “Capability  Maturity  Model,  Integration  (CMMI),”  Version  1.1, 
Technical  Report  CMU/SEI‐2002‐TR‐011,  Software  Eng.  Inst.,Carnegie  Mellon 
Univ.,Pittsburgh,Penn.,2002, 
http://www.sei.cmu.edu/pub/documents/02.reports/pdf/02tr011.pdf. 
[4]CMMI  Product  Team,  “CMMISM  for  Systems  Engineering/Software 
Engineering/Integrated  Product  and  Process  Development/Supplier  Sourcing,  Version  1.1, 
Staged  Representation  (CMMI‐SE/SW/IPPD/SS,  V1.1,  Staged),”  Technical  Report 
CMU/SEI‐2002‐TR‐012,  Software  Eng.  Inst.,  Carnegie  Mellon  Univ.,  2002, 
http://www.sei.cmu.edu/pub/documents/02.reports/pdf/02tr012.pdf. 
[5]Capability  Maturity  Model  Integration  (CMMI)  from  the  Carnegie  Mellon  University 
Software Engineering Institute, http://www.sei.cmu.edu/cmmi/. 
[6]WfMC,  Workow  Management  Coalition  Terminology  &  Glossary,  WfMC‐TC‐1011,  Feb 
1999. 
[7] B. Mutafelija and H. Stromberg, Process Improvement with CMMI® v1.2 and ISO 
Standards, Oct., 2008. 
[8] “BPMN 1.0” OMG Final Adopted Specification 2006 
[9] “Introduction to BPMN” Stephen A. White ‐ IBM 2004 
[10] (1999) The Unified Extensional Versioning Model 
