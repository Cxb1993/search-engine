組合對局計算機之應用介面設計 
Application Interface Design of Combinatorial Game Calculator 
（一） 計畫中文摘要 
自從 1970 年代以來，組合對局理論已經成為許多小型益智遊戲分析的共同
基本數學模型。對局分析的計算過程繁複，往往需要大量的計算，因此，對局計
算機逐漸成為組合對局理論研究學者及應用者的共同需求。本計劃將延伸目前進
行中之「組合對局計算機之設計研究」計劃，並進一步發展組合對局計算機之應
用程式介面。 
目前我們所設計的組合對局計算機具有獨立的操作介面，使用者可以透過對
局函數的定義來輸入各種不同遊戲的規則，利用對局運算式的描述來輸入個別局
型的狀態，對局計算機可以進而根據使用者的輸入自動分析出該局的對局值。為
了讓一般的電腦應用程式能夠使用到本計算機之內建計算功能，本計劃將進一步
發展對局計算機之應用程式介面，提供標準函式庫供一般應用程式使用，以簡化
電腦益智遊戲的開發過程。 
 
關鍵詞: 人工智慧、組合對局、對局計算機、對局、最佳策略、電腦對局、遊戲
引擎 
（二） 計畫英文摘要 
Since 1970, combinatorial game theory has become the common fundamental 
mathematical model for the analysis of many intelligent games. The analysis of games 
is a tedious process, usually involves heavy calculation. Thus, a game calculator has 
become the common needs from both combinatorial game researchers and users. This 
project extends our undergoing game calculator design project and plan to develop the 
application program interface. 
Our current game calculator has an independent user interface, users are allowed 
to input the rules of various games through the definition of game functions and input 
the positions of various games through the description of game expressions; the 
system can thereafter analysis the optimal strategies for the games. To share the 
build-in function of the game calculator with other game application programs, this 
project further develops the application program interface and helps simplifying the 
develop process of intelligent computer games. 
 
Keywords: artificial intelligence, combinatorial game, game calculator, games, 
optimal strategy, computer games and game engine. 
 
Paper: jc*-**-**-****
Design and Implementation of Combinatorial Game Calculator
Kuo-Yuan Kao
Department of Information Management
National Penghu University, Penghu, Taiwan
E-mail: stone@npu.edu.tw
[Received 06/30/07; accepted 00/00/00]
Abstract. This paper presents a universal game cal-
culator based on combinatorial game model. The
main feature of this new game calculator is that it
is a general-purpose game analysis engine, distin-
guished from other game-specific playing program.
Users of this game calculator are allowed to input the
rules of various games through the definition of game
functions and input the positions of various games
through the description of game expressions; the sys-
tem can thereafter analyze the optimal strategies for
the games.
Keywords: combinatorial game theory, artificial intelli-
gence, computer games, number theory, nimber, sumber.
1. Introduction
Since 1970s, combinatorial game theory has become
the common fundamental mathematical model for the
analysis of many intelligent games. In this introductory
section, we briefly review some fundamentals of combi-
natorial game theory [1][2].
1.1. Basic definitions
Combinatorial game theory starts from a simple defini-
tion of game: A game is an ordered pair of sets of games.
Conventionally, a game G is denoted as:
G = {GL|GR}, . . . . . . . . . . . . . (1)
where GL and GR are sets of games.
When both GL and GR are empty sets ( /0), the game is very
special and named 0.
0 = { /0| /0}. . . . . . . . . . . . . . . (2)
Each game has a negation; the negation of a game G is
defined as
−G = {−GR|−GL}. . . . . . . . . . . (3)
Games are closed under addition; the sum of two games
G and H is defined as
G+H = {GL+H,G+HL|GR+H,G+HR}. (4)
There is a partial order defined on the sets of games.
G≥ 0, if and only if there is no element in GR ≤ 0,(5)
G ≤ 0, if and only if −G ≥ 0, . . . . . . . (6)
G ≥ H, if and only if G−H ≥ 0. . . . . . . (7)
One can further define an equivalence relation on the sets
of games.
G ≡ H, if and only if G ≥ H and G ≤ H. . . (8)
The equivalence classes form an algebraic group.
1.2. Outcome of Games
The mathematical games defined in the previous sec-
tion can be used to describe the positions of many real-life
games. In general, these real-life games have the follow-
ing common properties:
• There are 2 players (say L and R) move alternatively.
• The game is a sum of positions; each position has
two sets of next positions; one for each player.
• On each player’s turn, the player can choose one po-
sition and move to one of its next positions.
• The player who can not find a move is the loser.
For each game G, there are 4 types of possible outcomes.
The corresponding relations between G and 0 are de-
scribed as below:
• G = 0: The first player cannot win the game.
• G < 0: L cannot win the game.
• G > 0: R cannot win the game.
• G||0: The first player can win the game.
(G||0 denotes neither G ≥ 0 nor G ≤ 0; pronounced as G
confused with 0).
There are several subgroups of games whose addition and
outcome properties are well-studied. In the next 3 sub-
sections, 3 well-studied subgroups are reviewed.
Vol.0 No.0, 200x Journal of Advanced Computational Intelligence 1
and Intelligent Informatics
Each number has an integer section and an optional ra-
tional section. The integer section is an integer expressed
by the conventional way; the rational section is a string of
0s and 1s leading by a decimal point. The rational value
is interpreted binary. For example, 2.011 is interpreted as
2+ 3/8 = 2.375. Each nimber is expressed by a ∗ fol-
lowed by a quoted integer; ∗(1) can be short-handed as ∗.
Each up is expressed by an ↑ followed by a quoted num-
ber; ↑ (1) can be short-handed as ↑. An integer n followed
by an up represents the sum of n copies of the up. For ex-
ample, 3 ↑ (2) represents ↑ (2)+ ↑ (2)+ ↑ (2). Games are
closed under addition and negation. The two operators are
+ and− . For example: 4+2.011+∗(3)+∗−↑+ ↑ (2).
A game can be an ordered pair of sets of games. Each
set of game is a list of games separated by ”,”. For exam-
ples: {|}, {0,∗|0,↑,↑ (2)}. The following is a partial list
of the grammar.
<game>:: <number>
| <nimber>
| <up>
| <game>
| <game> + <game>
| <game> - <game>
| { <game-set> | <game-set> }
| <function-name> ( <parameter> )
;
<game-set>:: <empty-set>
| <game-set>, <game>
| <game> : <range>
;
2.2. Game Simplification
One of the most important features of this calculator is
its ability to simplify games. We emphasize on the impor-
tance of game simplification, because it is where combi-
natorial exploration are reduced. Users can input compli-
cated games and the calculator will output the simplified
games. The calculator knows how to add, recognize and
simplify numbers, nimbers and sumbers. For examples:
user input system output
----------------- -------------
2.11 + 1.11 4.1
{{|}|{{|}|}} 0.1
{1|2.011} 2
* + *(3) *(2)
{{|}|{|}} *
{0,*(3)|0,*(3)} *(2)
ˆ + ˆ + ˆ(2) 2ˆ + ˆ(2)
{{|}|{{|}|{|}}} ˆ
{0|ˆ} 2ˆ + *
The simplest number theorem[1] is applied to simplify
numbers; Grundys theorem[4] is applied to simplify nim-
bers. The algorithm to simplify sumbers is based on Kaos
paper[5].
2.3. Variable, Assignment and Outcome
Like many other high-language, the G-language allows
the user to create variables storing temporary result. All
variables have the same data type: game. Other than re-
served words, the variable naming convention is similar
to C-language. Users can also create variable arrays. The
reference of an element in the array is denoted by a vari-
able name followed by an index quoted by brackets. For
example, x[10]. Users have no need to specify the size
of the array. The interpreter will automatically allocate
sufficient size. Users can assign values to variables. The
following is the grammar of assignment statement.
<assignment-stmt>:: <variable>=<game>;
Each assignment statement will return a value which
equals the value of the game in the statement. There are
four types of outcome of a game: greater than, less than ,
equal to or confused with 0. The calculator allows users
to query the outcome of any game. To query the outcome
of a game, simply place ? before the game to be queried.
<query-stmt>:: ? <game>;
2.4. Game Function
G-language has a special way to deal with functions.
Each function definition has three parts: function name,
parameter name and function body. The function body
contains case list and a default case.
<function-definition>::
<function-name>(<parameter-name>)
{
<case-list>
<default-case>
}
;
<case-list>:: <case-list><case>;
<case> :: case <number>: <game>;
<default> :: default: <game>;
Currently, each function only takes one parameter (can be
extended in the future). The function will return a game
value based on the value of the parameter. The case list
provides a mapping between the parameter value and the
return value.
3. Application Examples
The main feature of this new game calculator is that it
is a general-purpose game analysis engine, distinguished
from other game-specific playing program. Users of this
game calculator are allowed to input the rules of various
games through the definition of game functions and input
the positions of various games through the description of
game expressions; the system can thereafter analysis the
optimal strategies for the games. In each of the next sub-
section, an example game is illustrated.
Vol.0 No.0, 200x Journal of Advanced Computational Intelligence 3
and Intelligent Informatics
