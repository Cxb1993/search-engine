 2
 
Abstract 
 
Concurrent programs exhibit non-deterministic behavior. Multiple executions of a 
concurrent program with the same input may exercise different sequences of synchronization 
events and produce different results. Moreover, the number of feasible synchronization sequences 
of a concurrent program which contains busy-waiting loops is always infinite. First, the execution 
of some of the processes in a concurrent program may get stuck in infinite loops; we propose a 
scheme called the spontaneous detection of an infinite loop to solve this problem. Second, we 
address this problem and introduce the concept of an effective test. Assume that there exists a 
DFA F representing the execution of P with input X. An effective testing of P with input X is 
consisted of a finite set of tests ET of P with X. The associated SYN-sequences in ET traverse all 
the states and transitions in F. We develop a scheme to perform the effective testing for a 
concurrent program. The experimental results demonstrate the feasibility of the proposal scheme. 
 
Keywords: Concurrent program, Nondeterministic behavior, Concurrent testing, Reachability 
testing, SYN-sequence 
 4
problem have been proposed [7,8, 9,10]. 
 
3. 文獻探討 
Hwang et al. first proposed the idea of reachability testing for overcoming the problem of 
nondeterministic behavior of concurrent programs [11,12]. Figure 1A illustrates the concept of 
reachability testing. Assume that S is the SYN-sequence of an execution of P with input X. 
Reachability testing of P with input X and SYN-sequence S involves the following steps: 
(1) Use S to derive a set of prefixes of other feasible SYN-sequences of P with input X. Such 
prefixes (race variants of S) are derived by changing the outcome of race conditions in S. 
An execution that follows a race variant of S will always exercise a SYN-sequence that is 
different from S. 
(2) For each new race variant derived in step 1, perform a prefix-based replay of P with input X 
and the race variant to execute and collect an additional SYN-sequence for P with input X. 
The prefix-based replay of P with a race variant R comprises two phases: 
(i) Replay phase: replay all the synchronization events in R. 
(ii) Monitor phase: subsequent synchronization events are recorded after replaying R. 
(3) For each new SYN-sequence collected in step 2, repeat steps 1 and 2. 
 
Note that R is not a complete SYN-sequence of an execution of P. Thus, after replaying R, 
we have to record the subsequent synchronization events to obtain a SYN-sequence of an 
execution of P. The prefix-based replaying of a race variant comprises two steps: (1) controlling 
the execution of the program by following the execution order specified in the race variant, and 
(2) executing the program without any control and recording the order of the executed 
synchronization events. This test produces a SYN-sequence. Figure 1B shows how to modify the 
original concurrent program to perform the prefix-based replay of a race variant. Some variables 
must first be added to the modified program to control the replay of and to monitor the program. 
These variables can be divided into two classes: (1) those shared between processes and (2) those 
local to a process. These variables should be initialized before performing the prefix-based replay. 
An entry and exit protocol must be inserted before and after each synchronization event E in the 
original program, respectively. The design of entry and exit protocols are detailed elsewhere 
[11,16]. 
The concept of reachability testing was invented by Hwang et al. [11,12], who showed how 
to perform reachability testing of concurrent programs using read and write operations to shared 
memory as well as in the semaphore synchronization model. Tai [13] described how to apply 
reachability testing to concurrent programs that employ message-passing as a synchronization 
model. Lei and Tai [14] showed how to derive all race variants for asynchronous message-passing 
programs for efficient searching and insertion without using prefix-based testing. Carver and Lei 
presented an algorithm for deriving race variants by constructing a race table [15]. Their model, 
based on message-passing synchronization primitives, was subject to several limitations: it could 
not support non-blocking message reading, and the messages in a queue could only be received 
by a single process. Hwang et al. [16] described how to apply reachability testing to the 
 6
subsequent synchronization events to obtain a SYN-sequence of an execution of P. If some 
process gets stuck in a loop during the monitor phase, the prefix-based replay will not stop and 
will eventually exhaust all the available memory space allocated for storing the synchronization 
events. 
The second problem is that even if the executions of all the processes in a concurrent 
program do not get stuck in an infinite loop, the existence of the busy-waiting loop makes the 
number of feasible SYN-sequences infinite (see Figure 3). Considering only statements S0,0, S0,1, 
and S1,0, the shortest execution sequence of this concurrent program is {S1,0, S0,0, S0,1}; a longer 
one is {S0,0, S0,1, S1,0, S0,0, S0,1}. It is obvious that the execution of S1,0 is the condition required to 
allow the busy-waiting loop of statements S0,0 and S0,1 to exit. It is trivial that the loop within 
statements S0,0 and S0,1 is not infinite since S1,0 of process P1 will eventually be executed in the 
normal task scheduling of the operating system. However, because traditional reachability testing 
will attempt to exhaust all the feasible SYN-sequences, it will guide the testing to perform 
execution sequences that have one, two, or even infinite executions of loops for statements S0,0 
and S0,1. That is, traditional reachability testing will generate tests for execution sequences {(S0,0, 
S0,1,)i, S1,0, S0,0, S0,1}, where 0≦i≦∞ (note that (S0,0, S0,1,)i means that “S0,0, S0,1,” repeats i times; 
and that the repeated pattern “S0,0, S0,1” only contains statements of the same process.). In this 
situation, the queue used for storing race variants shown in Figure 1A will keep on increasing and 
hence never become empty. Thus, the reachability testing will not terminate and the queue will 
exhaust all the memory space of the computer system. 
 “a” is a shared variable and its initial value is 0. 
Process P0 Process P1 
... 
S0,0   DO { ... } 
S0,1   WHILE(a==0) 
... 
... 
S1,0   a = 1 ; 
... 
Figure 3: The second problem in traditional reachability testing 
In the follows, we demonstrate that the traditional reachability testing cannot be applied to 
test this kind of concurrent program. One of the schemes for deriving race variants from a 
SYN-sequence S involves constructing the RV-diagram for S, which is a tree with the path from 
the root to the node representing a feasible prefix or race variant of S. The nodes in the 
RV-diagram for S are generated by considering all possible interleavings of the synchronization 
events in S. Note that this is an n-ary tree if the number of concurrent processes is n. The path 
from the root node of the RV-diagram of S to another node is a totally ordered sequence of the 
synchronization events in S. The RV-diagram scheme was first proposed in [11,12], which uses 
the version number of variable access to determine if there exists a different race outcome in the 
nodes of the RV-diagram. Let P be a concurrent program using read and write operations. Each 
shared variable in P is assigned a version number that is initialized to 0 and increased by 1 after 
each write operation on it. An execution of P involves two types of synchronization events: read 
and write. A read event is denoted as R(U,V), which refers to a read operation on variable U with 
the version number being V, and a write event is denoted as W(U,V). Thus, if W(A,1) and R(A,1) 
are issued by different processes in the concurrent program, we can determine that W(A,1) and 
 8
busy-waiting loop. 
We now present a more complicated example in which the repeated pattern consists of 
statements from different processes. We employ the code fragment shown in Figure 5 to 
demonstrate the third problem. One of the shortest execution sequences of this program is {S1,0, 
S0,0, S0,1, S1,1}. However, we can easily see that the feasible execution sequences contain {(S0,0, 
S1,0, S0,1, S1,1,)i , S1,0, S0,0, S0,1, S1,1}, where 0≦i≦∞. Similar to the second problem in Figure 3, 
there exists a repeated pattern “S0,0, S1,0, S0,1, S1,1” that makes the number of feasible execution 
sequences infinite. The repeated pattern contains statements from processes P0 and P1. The 
program will also cause the state invariant problem in the traditional reachability testing. 
“a” is a shared variable.  
Process P0 Process P1 
... 
S0,0   DO { a = 1;} 
S0,1   WHILE(a==0) 
... 
... 
S1,0   DO { a = 0;} 
S1,1   WHILE(a==0) 
... 
Figure 5: The third problem in traditional reachability testing 
 
4. 研究方法 
4.1 Spontaneous Detection of an Infinite Loop 
In this paper we present techniques for solving the above three problems. We first propose a 
scheme called the spontaneous detection of an infinite loop, which is used to solve the first type 
of problem (as shown in Figure 2). We develop new entry and exit protocols for the prefix-based 
replay so that when a process gets stuck in an infinite loop, it can stop the execution itself. This is 
accomplished by the codes in the entry and exit protocol examining the states of the program 
execution in an attempt to determine if it is stuck in an infinite loop. Although we prove that it is 
impossible to guarantee that the process is aware of being stuck in an infinite loop in any 
particular situation, we propose a heuristic algorithm for coping with this.  
Second, for the second and third problems (presented in Figure 3 and Figure 5), we 
introduce the concept of the effective testing.  The basic idea is that we do not exhaust all the 
possible tests, since the number of the feasible SYN-sequences is usually infinite. For a 
concurrent program P with input X, we show that the execution of P with X can be represented by 
a deterministic finite automata (DFA) F in which the finite sets of states of F are the possible 
execution states of P with X and the transitions are labeled with synchronization events. Since it 
is impossible to travel all the states in F in a single test of P, the effective testing of P with X is 
consisted of a finite set of tests ET of P with X. The associated SYN-sequences of ET traverse all 
the states and transitions in F. 
In this section we describe how to develop the entry and exit protocols for the prefix-based 
replay of reachability testing so that when a process gets stuck in an infinite loop, it can stop the 
execution itself. The halting problem is one of the simplest of the problems that are known to be 
unsolvable [17], and this was proved by Alan Turing in 1936 for all possible inputs. We say that 
the halting problem is undecidable over Turing machines. Programs contain loops that may be 
infinite or finite in length. An obvious method for testing if a program contains an infinite loop is 
/* loop body */ 
... 
} 
 
New_boolean_func(V0,V1,V2,...,Vn-1) { 
if(boolean_func(V0,V1,V2,...,Vn-1)==TRUE)  { 
if(Each_associated_counter is zero(V0,V1,V2,...,Vn-1)==TRUE) 
Report_infinite_loop(Pi); 
else 
return TRUE; 
} else 
return FALSE; 
} 
Figure 7: The modified pretested loop 
Figure 8A, B, and C show a more complicated example that cannot be handled by the protocol 
shown in Figure 7. The example has three shared variables “a”, “b”, and “c”, which we assume 
are initially equal to 0. It is obvious that loops L0, L1, and L2 are infinite (see loop L0 of process 
P0). As process P1 is also executing in loop L1 (i.e., statement S0,1 has not been executed), the 
associated counter of variable “a” must be greater than or equal to 1. The modified function 
New_boolean_func in Figure 7 will not report that it is in an infinite loop. Actually, whether loop 
L0 is infinite depends on whether loop L1 is infinite. Similarly, L2 depends on L1 and L1 
depends L0. The dependent relationships of these three loops form a circle (see Figure 8D). This 
situation is very similar to the circular wait that is one of the four necessary conditions for the 
existence of a deadlock [4]. In this case the protocol shown in Figure 7 makes all the loops in the 
circle wait for some loop to exit. It cannot declare itself to be an infinite loop because it is waiting 
for the counter of some of its guard variables to become equal to 0. However, the condition in 
which the values of counters can be decreased is actually the exit condition of some loops. 
“a”, “b”, “c” are shared variables.  
(A) Process P0 (B) Process P1 
/* Loop L0 is S0,0 and S0,1 */
 
S0,0   DO {...} 
S0,1   WHILE(a==0) 
S0,1   c = 1; 
/* Loop L1 is S1,0 and S1,1 */ 
 
S1,0   DO {...} 
S1,1   WHILE(b==0) 
S0,1   a = 1;  
(C) Process P2 (D) 
/* Loop L2 is S2,0 and S2,1 */
 
S2,0   DO {...} 
S2,1   WHILE(c==0) 
S2,1   b = 1; 
L0
L1 L2
 
Figure 8: An example of a concurrent program with three processes 
We now present a scheme to solve the problem shown in Figure 8. We first need an 
algorithm for detecting the circular-dependence relationship during the execution of the target 
concurrent program (see Figure 9). We construct a loop-dependency graph related to the target 
program, and employ the more complicated example shown in Figure 10 to illustrate the 
algorithm. 
 10
Algorithm 1: Generate the loop-dependency graph of a concurrent program CP. 
Input: A concurrent program CP. 
/* Loop L0 is S0,0 and S0,1 */
/* Loop L1 is S0,2 and S0,3 */ 
 
S0,0    DO {a=1;} 
S0,1    WHILE(a==0) 
S0,2    DO {...} 
S0,3    WHILE(a==0) 
S0,4    c=1; 
/* Loop L2 is S1,0 and S1,1 */ 
 
S1,0    DO {...} 
S1,1    WHILE(b==0) 
S0,1    a=1; 
 
(C) Process P2 (D)  
/* Loop L3 is S2,0 and S2,1 */
 
S2,0   DO {a=0;} 
S2,1   WHILE(c==0) 
S2,1   b=1; 
L0 L1
L2 L3  
Figure 10: An example of a concurrent program with three processes, and its loop-dependency 
graph 
/* Code for process Pi */ 
 
WHILE (CW_Detection_Boolean_func(V0,V1,V2,...,Vn-1)) { 
... 
/* loop body */ 
... 
} 
 
CW_Detection_Boolean_func(V0,V1,V2,...,Vn-1) { 
if (Boolean_func(V0,V1,V2,...,Vn-1)==TRUE) { 
if (Each_associated_counter is zero(V0,V1,V2,...,Vn-1)==TRUE) { 
Report_infinite loop(Pi); 
} else {   
/* Start to detect circular wait of an ILG */ 
for each ILGs G which processes Pi belonged to { 
G.number_of_iterations(Pi)++; 
if (the number of iterations of all the processes in G are larger than 
their ITERATION_LIMITATION) { 
Report_may_have_infinite loop(G);  
}   /* end if*/ 
}   /* end for */ 
}   /* end else */ 
return TRUE; 
} else { 
return FALSE; 
} 
} 
Figure 11: The modified pretested loop for detecting a circular wait 
 
4.2 Effective Testing of a Concurrent Program 
Because the possible SYN-sequences of a concurrent program P with busy-waiting 
behaviors are usually infinite, we must find an effective way to perform tests over a finite set of 
its SYN-sequences rather than trying to exhausting all possible SYN-sequences. In this section, 
we first show that the execution of a concurrent program P with input X can be represented in a 
deterministic finite automata and then present the definition of the effective testing. 
First, we give the definition of the execution state of a concurrent P as shown in Definition 1. 
According to this definition, the execution state of a concurrent program can be represented by an 
execution location and a variable value vector. Note that one statement in the source code of a 
 12
states in F are the states in which each element in the execution location vector reaches the end 
of the execution of the corresponding process. It is trivial that the possible synchronization event 
which causes the execution state of P changed from Si to Sj is unique and the number of states are 
finite, F is deterministic finite automata. QED 
 
Figure 13A, B and C shows the DFA of the concurrent programs in Figure 2, Figure 3 and Figure 
5, respectively. 
Q0: {(S0,0,S1,0),(X)}
Q1: {(S0,1,S1,0),(1)}
Q2: {(S0,0,End),(0)}
Q3: {(End,S1,0),(1)}
Q4: {(S0,1,End),(0)}
Q5: {(S0,1,End),(1)}
Q6: {(End,End),(0)}
Q7: {(End,End),(1)}
Q0
Q1
Q2
Q3
Q4
Q5
Q6
Q7
Q0: {(S0,0,S1,0),(X)}
Q1: {(S0,0,S1,0),(0)}
Q2: {(S0,0,End),(1)}
Q3: {(End,End),(1)}
Q0
Q1
Q2 Q3
S 0,0
S 0,2
S1,0
S1,0
S1,0
S0,0 S0,2
S0,2
Q0: {(X,X),(X)}
Q1: {(L0,1,X),(1)}
Q2: {(X,L1,1),(0)}
Q3: {(L0,2,X),(1)}
Q4: {(L0,1,L1,1),(0)}
Q5: {(L0,1,L1,1),(1)}
Q6: {(X,L1,0),(0)}
Q7: {(L0,2,L1,1),(0)}
Q8: {(L0,0,L1,1),(0)}
Q9: {(L0,1,L1,0),(0)}
Q10: {(L0,2,L1,1),(1)}
Q11: {(L0,1,L1,2),(1)}
Q12: {(L0,1,L1,0),(1)}
Q13: {(L0,2,L1,0),(0)}
Q14: {(L0,0,L1,0),(0)}
Q15: {(L0,2,L1,2),(1)}
Q16: {(L0,2,L1,0),(1)}
Q0
Q1
Q2
Q3
Q4
Q5
Q6
Q7
Q8
Q9
Q10
Q11
Q12
Q13
Q14
Q15
Q16
(A)
(B) (C)
: A start state : An end state
S 0,1
S1,0
S0,1
S1,0 S0,1
 
Figure 13: Examples of the DFA representation of the execution of concurrent programs 
 
Finally, we can give the definition of effective testing as follows. 
 
Definition 2: Assume that there exists a DFA F representing the execution of P with input X. 
An effective testing of P with input X is consisted of a finite set of tests ET of P with X. The 
associated SYN-sequences in ET traverse all the states and transitions in F. 
 
The scheme for performing monitoring and replaying of concurrent shared-memory 
programs was first presented in [19]. It is called the instant replay in which only the version 
number of the accessed variables should be recorded. For the race analysis in the reachability 
testing, the RV-diagram scheme must have the name and version number of the accessed variable 
be recorded [11,12]. As we have mentioned, the read and the write events are denoted R(U,V) 
and W(U,V), respectively. Note that U and V are the name and version number of the variable, 
respectively. According to the example shown in Figure 4, the traditional reachability testing will 
not stop when it causes state invariance in the race analysis. It is because the RV-diagram does 
not consider the execution states of the analyzed SYN-sequence. According to [16], the algorithm 
for deriving race variants from a race graph is much more efficient than the algorithm that 
constructs the RV-diagram. One of the experimental results reported in [16] is that the race graph 
 14
 16
replaying. F is defined as follows: 
 
z Case 1: See Figure 14A. Assume that the reiterated state set attached to S contains n 
states, α0,α1,…, αn-1. First, α0,α1,…, and αn-1 do not occur during the execution of S. 
Second, the execution after @ meet some identical execution states multiple times. They 
are called reiterated states. It is possible that there are more than one reiterated states. We 
assume that A is the first reiterated state. Third, the first and last occurrences of A are after 
@. We have F(S)={S1, S1′}. S1 contains all the events in S. However, an analysis 
delimiter @ is moved to the location after the last A. Put on another way, S1′ is obtained 
from S by removing all the events after the first A. Also, state A is added to the reiterated 
state sets of S1 and S1′ and A is associated with the event id of the last A in S1. 
z Case 2: See Figure 14B. First, α0,α1,…, and αn-1 do not occur during the execution of S. 
Second, the execution after @ meet some identical execution states multiple times. We 
assume that A is the first reiterated state. Third, the first and last occurrences of A are 
before and after @, respectively. We have F(S)={S2}. S2 is obtained from S by moving 
the @ to the location just after the last A. Also, state A is added to the reiterated state sets 
of S2 and A is associated with the event id of the last A in S1. 
z Case 3: See Figure 14C. First, α0,α1,…, and αn-1 do not occur during the execution of S. 
Second, the execution after @ meet some identical execution states multiple times. We 
assume that A is the first reiterated state. Third, the first occurrence of A is before @ and 
the last occurrence of A is just after @. We have F(S)=∅.  
z Case 4: See Figure 15A. First, no one in α0,α1,…, and αn-1 occurs before @. Second, ∃ αi, 
0≤i<n, αi appears in the execution of Q. Without loss of generality, we assume that αi is 
the first one. We have F(S)={S4}. S4 is obtained by removing all the events happened 
after αi. 
z Case 5: See Figure 15B. ∃ αi, 0≤i<n, αi appears in the execution of R only once. We have 
F(S)=∅. 
z Case 6: See Figure 15C. The requirement of case 5 does not hold and ∃ αj, 0≤j<n, αj 
appears in the execution of R more than once and the event id of the last αj in R is not 
equal to the associated event id of αj in the reiterated set of S. We have F(S)=∅. 
z Case 7: See Figure 15D. The requirements of case 5 and 6 does not hold. ∃ αj, 0≤j<n, αj 
appears in the execution of R more than once and the event id of the last αj in R is equal to 
the associated event id of αj in the reiterated set of S. Note that there may be multiple 
states which satisfies this requirement. We assume that αj is the first one which occurs in 
Q. In case that does not appear in Q, then Q′=Q. Subsequently, we first generate S7 which 
is obtained from S by removing all the events after the first αj in Q. Finally, we have 
F(S)= F′(S7).  
 If there does not exist reiterated state in S7, then F′(S7)=S7  
 If there exists reiterated states in S7, then F′(S7) performs the same transformation as 
shown in case 1, 2, and 3 without considering the reiterated state set of S7. 
z Case 8: The execution of S does not have any state identical to states in its reiterated state 
process, only one edge is added to PG in which R(v,i) is the lastest event in the process. 
 
Definition 4: Assume that e is a synchronization event in a partial order graph PG. (f,e) is one 
of the in-edges of e if (f,e) is an edge of PG, and f and e are not in the same process. (e,f) is one 
of the out-edges of e if (e,f) is an edge of G, and e and f are not in the same process. 
 
 18
e(1,1)
e(1,2)
e(1,3)
e(2,1)
e(2,2)
e(2,3)
e(3,1)
e(3,2)
e(3,3)
In-edge of e(2,2)
Out-edge of e(2,2)
A partial-order graph of a synchronization sequence
Process 0 Process 1 Process 2
 
Figure 16: In-edges and out-edges of a synchronization event in a partial order graph 
 
Definition 5: A group joint node of a partial order group PG is the node N which contains one 
or more in-edges.  
 
Algorithm 3: Generate the total order sequence of group joint nodes from a partial order graph.
Input: A partial order graph PG. 
Output: A sequence of events ES  
(1) Invoke the topology sort algorithm upon nodes in PG. Store the obtained sequence in ES.  
(2) Delete nodes in ES in which they are not group joint nodes. 
 
Algorithm 4: Derive race variants from a SYN-sequence and avoid state invariance. 
Input: A SYN-sequence S. Each synchronization event in S is either R(U,V,L,R) or 
W(U,V,L,R). The U, V, L, R are the name, version number, execution location, and 
value of the variable respectively. 
Note that S is obtained from the prefixed-based replay of a race variant. Each event is either 
“monitored” or “replayed” after the prefixed-based replay. Also, to avoid state invariance, 
we have to record those execution states which can be reached during a single 
SYN-sequence twice or more. We attach these states to the race variants or 
SYN-sequences. They are called reiterated states. For the SYN-sequence which is obtained 
from the prefixed-based replay, its attached reiterated states were inherited from the race 
variant which it was replayed. 
 20
(5) For each subgraph Q in SSG 
/* There is no any state invariance found in Step (4)*/  
(a) Add all the nodes from PG happened after the nodes in Q to the subgraph Q, and mark 
the added nodes as “New added” 
(b) Apply Algorithm 4 to Q and S to perform state invariance analysis. Assume RV′ and B is 
the output values from Algorithm 4. RV=RV∪ RV′. 
End for 
(6) Return RV 
 
Algorithm 5: Perform the state invariance analysis. It generates race variants only if the state 
invariance happens. 
Input: A subgraph Z and a SYN-sequence S. 
Output: A set RV′ that contains race variants of SYN-sequence S. A boolean variable B 
indicates that the merge of subgraphs in Algorithm 4 should be aborted or not. 
(1) Generate the total ordered sequence of the events marked “New added” in Z by applying 
the topology sort. Assume that the derived sequence is TS. 
(2) Label the execution state for each event in TS. Note that the execution state is represented 
by the execution location vector and variable value vector. As the read and the write events 
are denoted R(U,V,L,R) and W(U,V,L,R). We can easily derive all the execution states 
according to the order of the TS. Set B = False. 
(3) For each event e which is marked “New added” and “Replayed” in Z.  
y Assume that the δ is the execution state of e. 
y If (there exists a state γ identical to δ in the reiterated states of S) 
If (γ occur only once in the “Replayed” events of TS) 
RV′=∅, B=True. Stop the algorithm. 
Else if (γ occur more than once in the “Replayed” events of TS) 
y Assume event e′ is the last one. 
y If (the event_id of e′ is not identical to the last_event_id of γ) 
RV′=∅, B=True. Stop the algorithm. 
End if 
End if (γ occur more than once in the “Replayed” events of TS) 
End if 
End for 
(4) For each event e which is marked “New added” and “Monitored” in Z. Assume the 
execution state of e is δ. Let PG′ be the partial order graph of S. 
For each attached reiterated state γ of S 
If (γ is identical to δ and the state never repeated in the “Replayed” events of TS) 
y Delete all the events marked “Monitored” and not happened before e in PG′. 
B=True. 
Else if (γ is identical to δ and the state repeated in the “Replayed” events of TS) 
perform the state invariance analysis. The derived total ordered sequences in step (1) and (2) 
in Algorithm 5 of the two subgraphs are shown in  Figure 17F and G, respectively. Since both the 
two sequences are without any “replayed” node and attached reiterated state. Step (3) and (4) are 
skipped. In the step (5), only the sequence shown in  Figure 17G is with repeated states. Note that 
efirst and elast are the first and the last repeated states. The generated PG1 and PG2 are shown in  
Figure 17H and I, respectively. The race analysis of PG1 does not generate any race variant. The 
PG2 derives four race variants as shown in  Figure 17J. Algorithm 5 stops with 
RV′={RV1,RV2,RV3,RV4} and B=False. Then, in step (4,e) of Algorithm 4, it is the end of the 
algorithm. 
 
W(a,1)
R(a,1)
W(a,2)
P0 P2
R(c,1)
W(b,1)
R(b,0)
P1
R(b,0)
R(b,0)R(a,1)
W(c,1) R(b,1)
W(a,3)
A “replayed” node
A “monitored” nodeN0
N1
N2
N3
N4
*
 22
Indicates the node is marked “New added”.
Reiterated state set={}
PG
(A)
W(a,1)
R(a,1)
P0
R(a,1)*
*
*
Set of processes = {P0}
(B)
W(a,1)
R(a,1)
P0
R(a,1)*
*
*
TS of Z
{(X,X,X),(X,X,X)}
{(L0,1,X,X),(1,X,X)}
{(L0,2,X,X),(1,X,X)}
{(L0,3,X,X),(1,X,X)}
(C)
W(a,1)
R(a,1)
P0
R(a,1)
W(a,2)
P2
W(c,1)*
R(c,1)*
*
Set of processes = {P0,P2}
(D)
R(b,0)
P1
R(b,0)
R(b,0)
*
*
*
Set of processes = {P1}
(E)
P0
W(a,1)
R(a,1)
R(a,1) W(a,2)
P2
R(b,0)
P1
W(c,1)* R(c,1)*
*
{(L0,3,X,L2,1),(0,X,X)}
{(L0,4,X,L2,1),(0,X,1)} {(L0,4,X,L2,2),(0,X,1)}
(F) (G)
R(b,0)
*
*
* R(b,0)
{(X,X,X),(X,X,X)}
{(X,L1,0,X),(X,0,X)}
{(X,L1,0,X),(X,0,X)}
{(X,L1,0,X),(X,0,X)}
efirst
elast
R(b,0)
P1
*
W(a,1)
R(a,1)
W(a,2)
P0 P2
R(c,1)
W(b,1)
R(b,0)
P1
R(b,0)
R(b,0)R(a,1)
W(c,1) R(b,1)
W(a,3)
*
*
*
(H)
(I)
R(b,0)
P1
R(b,0)
R(b,0)
R(b,0)
*
*
*
W(a,1)
R(a,1)
W(a,2)
P0 P2
R(b,0)
P1
R(b,0)
R(b,0)
*
*
*
W(a,1) W(a,2)
P0 P2
R(b,0)
P1
R(b,0)
R(b,0)
*
*
*
W(a,1)
P2
R(b,0)
P1
R(b,0)
R(b,0)
*
*
*
RV1
RV2
RV3
RV4
(J)
Reiterated state set=
{{(X,L1,0,X),(X,0,X)} (P1,0)}
Reiterated state set=
{{(X,L1,0,X),(X,0,X)}(P1,2)}
Reiterated state set=
{{(X,L1,0,X),(X,0,X)}(P1,2)}
Reiterated state set=
{{(X,L1,0,X),(X,0,X)}(P1,2)}
Reiterated state set=
{{(X,L1,0,X),(X,0,X)}(P1,2)}
Reiterated state set=
{{(X,L1,0,X),(X,0,X)}(P1,2)}
 
Figure 17: The first running example for illustrating Algorithm 4 and Algorithm 5 
 24
platform is a PC with one 2.66GHz Intel Pentium4 processor and 1280MB main memory. 
 P1 P2 P3 P4 P5 
Total number of tests 3 3 11 1 133 
Total testing time (seconds) 0.156 0.188 1.828 0.203 38.250
Number of different SYN-sequences 3 3 11 1 133 
Number of SYN-sequences get stuck in infinite loop 1 0 7 1 47 
Figure 19: Experimental results 
Figure 19 shows the experimental results from the testing of five each concurrent program. For 
the results of P1, the total number of tests is 3. Compare with the number of different 
SYN-sequence, each test exactly performs a different SYN-sequence respectively. Otherwise, 
with the help of spontaneous detection of infinite loops algorithm, the execution of P1 can be 
terminated when get stuck in the infinite loop and continue the other two tests. For the results of 
P2, there are three different SYN-sequences and no one will get stuck in the infinite loop. If we 
try to traverse the DFA of P2 in Figure 19 with these three different SYN-sequences, the state 
transitions could be: Q0Q2Q3, Q0Q1Q2Q3, and Q0Q1Q1+Q2Q3. It shows our method can cover all 
the states and possible state transitions effectively if the testing target contains no infinite loops. 
For the results of P3 and P5, the concept of effective test shows its efficiency even all the 
possible interleaves of synchronization events is more complicate than other three concurrent 
programs. Finally, there is only one test during the testing of P4 because of all the values of 
shared variables would be always the same and keep the three processes get stuck in the infinite 
loops. 
 
6. 討論 
Previous work on reachability testing can be applied to overcome the nondeterministic 
behavior of a concurrent program, but it cannot test a concurrent program containing 
busy-waiting loops for two reasons: (1) the execution of this type of concurrent program may get 
stuck in infinite loops, and (2) the busy-waiting behavior makes the number of feasible 
SYN-sequences infinite. In this paper, we propose how to test a concurrent program containing 
busy-waiting loops in which shared variables are repeatedly read and updated. In addition to the 
spontaneous detection of an infinite loop for this type of concurrent program, we introduce the 
concept of the effective testing. When the spontaneous detection mechanism warns that an 
infinite loop may exist, the programmer checks the collected feasible prefix to determine if an 
infinite loop is indeed present. When the reachability testing terminates, all the feasible effective 
tests are executed. For any models that require polling synchronization, such as nonblocking 
reads in a message-passing concurrent program or semaphore operations within a loop, the 
number of feasible SYN-sequences is also infinite in the general case. The proposed scheme can 
also be applied to the testing of this type of concurrent software system. 
 
7. 參考文獻 
[1]  Charles E Mcdowell and David P. Helmold, “Debugging Concurrent Programs,” ACM 
Computing Surveys, Volume 21, Number 4, December 1989. 
 26
[19]  Thomas J. LeBlanc and John M. Mellor-Crummey, “Debugging Parallel Programs with 
Instant Replay,” IEEE Transactions on Computers, C-36(4), pp. 471-482, April 1987. 
 
8. 計畫成果自評 
本研究計畫針對具迴圈行為的並行程式提出了一系列完整的測試方法。憑藉著動態分
析程式的狀態，確保了程式在整個測試的過程中，每一次執行都將是在極有效率的情況下，
不僅相同的程式狀態可避免一再重複出現，在許多實際的例子中，我們甚至能夠達到每次
執行的 SYN-sequences 皆為相異。比較過去許多相關的研究，本研究首先克服了並行程式
中無窮迴圈的問題，無論就方法的創新，乃至於效率，都是很大的突破；相信對於後續相
關問題的研究能夠帶來很大的幫助。目前正積極準備將此研究成果發表至相關的會議及期
刊。 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                            96 年 2 月 13 日 
報 告 人 
姓 名 黃冠寰 服務機構及職稱 
國 立 台 灣 師 範 大 學
資 訊 工 程 學 系
副 教 授
會議      時間 
地點 
2007/1/29~2007/2/2 
Ballarat, Australia, 
本會核定
補助文號
95-2221-E-003-004- 
會議名稱 第十八屆澳大利亞資料庫國際會議 
The 18th Australasian Database Conference (ADC 2007) 
發表論文題目 
用 XQuery 來進行最佳化的 XML 文件存取模式 
A Processing Model for the Optimal Querying of Encrypted XML 
Documents in XQuery 
 
一、參加會議經過 
 
ADC 已舉辦十八屆，今收到 35 submission，只有 16 篇獲接受於會議中發表。參
加的人員來自Australia, New Zealand, Canada, Japan, France, United Kingdom, 
China, Germany, Finland, South Korea Kuwait, Taiwan, Italy, 及 Vietnam,
等。為國際上關於 Database 領域上，重要的會議之一。 
 
這次 ADC 會議於 2007/1/29~2007/2/2於澳洲東南方的小城 Ballarat舉行。三天 ADC
的行程安排的非常緊湊，雖然只要發表 16 篇論文，但是每一篇文章都充分安排半
個小時以上的時間報告。會議主持人要求報告者於時限內完成報告，然後有充足
的討論時間，而且每個 Session 結束，Session chair 都會再發表他對於此 Session 發
表論文的觀感。我的報告安排在 XML database 這 Session，幾乎所有與會人員均
出席，於報告完後的討論也十分熱烈。我所發表的論文題目是” A Processing Model 
for the Optimal Querying of Encrypted XML Documents in XQuery”。參與我們這個
Session 的研究人員都是這方面的專家，因此大家的討論都十分熱烈，這是參加國
際會議很少見的狀況。 
 
二、與會心得 
 
除了筆者本身論文之發表外，我也積極的和與會的各國專家學者交換研究的心
得，也認識許多進行相同領域研究的朋友，除此也發現數個可以進行的研究方向，
收穫甚多。 
 
 
附件三
 
