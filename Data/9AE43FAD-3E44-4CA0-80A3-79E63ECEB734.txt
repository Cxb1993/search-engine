 II
Abstract 
With the rapid change of worldwide competition environment, using Business 
Process Management (BPM) methodologies to improve process operation has become 
the most important way for competitiveness improvement. Therefore, process analysis 
has become the center of business process engineering (BPE) system. Process 
Benchmarking (PB) and Business Process Reengineering (BPR) usually discover a lot 
of improvement opportunities by comparing the best practice processes with company 
business processes. Although several concepts of the structure analysis of business 
processes have been proposed in the literature, research in this area lacks efficiently 
analytical approach. Also, the methods provided by existing BPE systems for business 
process analysis aim at the reachability, simulation and diagnosis, verification and 
performance analysis of business process models. Few BPE systems actually support 
the gap analysis of process logic (GAPL) between business process models. 
Since the data structure used by existing BPE systems to store the information of 
business process models is not suitable for the GAPL between business process 
models, this research developed a suitable business process representation and 
integrate it into existing BPE systems to assist project teams in the GAPL. First, a 
high-level business process representation suitable for GAPL is developed. Then, 
based on the proposed business process representation, the method for the structural 
analysis and comparison of business processes is proposed. Finally, this research 
integrated the proposed representation and analytical method into the existing BPE 
systems. 
 
Keywords: Business Process, Represpentation, Gap Analysis of Process Logic, 
Business Process Engineering, Business Process Management 
 IV
2.5.3 工作流程模板(Workflow patterns)................................................................................... 39 
第三章 研究方法 .................................................................................................................................. 48 
3.1GAPL-Oriented 流程模型表示法 .............................................................................................. 48 
3.1.1 Business Scenario Level ..................................................................................................... 49 
3.1.2 Processing Mode Level ...................................................................................................... 52 
3.2 GAPL-Oriented 流程模型表示法之轉換及對應方法 ............................................................. 60 
3.2.1GAPL-Oriented 流程模型表示法之 PPath 轉換及儲存方法 ......................................... 60 
3.2.2GAPL-Oriented 流程模型表示法之 PPattern 轉換及儲存方法 .................................... 63 
3.2.3GAPL-Oriented 流程模型表示法之觀念整合 ................................................................. 68 
流程邏輯差異分析方法 ................................................................................................................... 73 
3.3.1 Business Scenario Level 差異分析 .................................................................................... 75 
3.3.2 Processing Mode Level 差異分析 ..................................................................................... 81 
第四章 實例應用 .................................................................................................................................. 94 
4.1 公司流程與最佳實務流程之分析 ............................................................................................ 94 
4.2 流程邏輯差異分析方法之應用 .............................................................................................. 108 
第五章 系統整合 ................................................................................................................................ 120 
第六章 結論 ........................................................................................................................................ 127 
6.1 研究成果及貢獻 ....................................................................................................................... 127 
6.2 未來研究方向 ........................................................................................................................... 128 
參考文獻 .............................................................................................................................................. 130 
中文文獻 ......................................................................................................................................... 130 
英文文獻 ......................................................................................................................................... 131 
 
 VI
圖 3.15 Remove SA from PM2. ppath Com3 .
PSSppattern2  ...................................................................... 91 
圖 4.1 (a)公司生產流程模型 (b)最佳實務生產流程模型 .................................................................. 95 
圖 4.2 PPath Analysis of PM1 ................................................................................................................. 96 
圖 4.3 PPatern Analysis of PM1.PPath ................................................................................................... 99 
圖 4.4 PPath Analysis of PM2 ............................................................................................................... 102 
圖 4.5 PPatern Analysis of PM2.PPath ................................................................................................. 105 
圖 4.6 PPatern Analysis of PM2.PPath(續) ........................................................................................... 105 
圖 4.7 Remove SA from PM1.ppath Com3 . ppattern
Se
1  and PM2.ppath
Com
3 . ppattern
Se
1  ....................... 116 
圖 5.1 The “Purchase order processing” flowchart for stock material and known vendor ................... 121 
圖 5.2 The “Purchase order processing” flowchart for consumable material ....................................... 122 
圖 5.3 The PPaths searched out from (a) 圖 5.1 的 model and (b) 圖 5.2 的 model ........................ 123 
圖 5.4 The SSDs of the PPath pairs ...................................................................................................... 124 
圖 5.5 Processing sequence comparison for PPath pair ........................................................................ 125 
圖 5.5(續) Processing sequence comparison for PPath pair ................................................................. 126 
圖 6.1 以 ppattern 為節點的儲存方式 ............................................................................................... 129 
 
 
 
 
 
 
 VIII 
於 Processing Mode Level 之差異分析表............................................................................................ 117 
表 4-8 PM 1 與 PM 2 之總差異表 .......................................................................................................... 118 
 2
模方法與電腦軟體結合的系統，其可以用來繪製流程和對流程作一連串的分析像
是 ARIS、IDEF。這些塑模方法或 BPE 系統幾乎都採取類似連結串列或圖形表示
法(graph representation)的方式(如 G(V,E)的資料結構或其變形)，來描述或儲存企
業流程模型資料，而 G(V,E)這樣的表示法大都只儲存「某一節點與其流入/流出
箭頭」或「某一箭頭與其流入/流出節點」之低階且片段的流程資料型態，如圖
1.1 所示，一個流程模型(PM)可以用 G(V,E)的資料來表達。 
 
 
 
 
 
(a) 
PM = G(V, E) 
V={a, b, and, c, d, e}，E ={(a, b),(b, and),(and, c),(and, d),(d, e),(c, e)} 
(b) 
Source:本研究提供 
圖 1.1 Process model representation by G(V,E) 
 
此類表示法缺乏構成流程邏輯之流程路徑，活動執行順序及方式等之高階且
整體之流程資訊，故不適合用在 GAPL。 
a 
b 
c d 
e e 
 4
不考慮物件語意不一致的情形，因為 Whitten et al.(2002)提到大部分的公司
都有其命名標準，並將其記載在資料字典(data dictionary)上，其可以避免物
件語意不一致的情形發生。 
2. 由於每個流程塑模方法對其使用之塑模元件及塑模方法均有所差異，本研究
所發展之流程表示法對流程範圍內所應包含的元件定義如下： 
i. 每一個流程模型具有開始(start)與結束(end)的活動。 
ii. 流程模型內的邏輯運算子包含 AND、OR、XOR。 
iii. 活動之間利用箭頭來代表執行方向。 
iv. 流程模型是由活動(activities)、箭頭(arrow)、邏輯運算子    
(logic operator)所構成。 
3. 許多以活動為基礎架構下發展的塑模方法，像是 IDEF3、ARIS 中的 eEPC 可 
先轉換成本研究之流程模型，再利用本研究所發展之流程表示法找出流程邏
輯差異。 
4. 只適用於流程路徑是由循序之流程模版組成的狀況(其細節將於未來研究方
向中說明)。 
 
 
 
 
 
 
 
 
 
 
 6
程度等。 
4. 假設以顧客的觀點來界定流程，組織必須從事一些可以符合顧客價值觀的必
要工作。 
綜合上述學者的意見，本研究對企業流程下了一個定義，如下：「企業流
程是一連串的活動，其具有開始與結束，並需要輸入不同詳細狀況的資料和根據
適當的流程邏輯來為顧客創造價值。」 
2.1.2  企業流程管理生命週期 
Aalst et al. (2003)將企業流程管理(business process management; BPM)定義
為，使用特定方法、技術和軟體，包含人員、組織、應用、文件及其他的資訊服
務，以支援企業流程的設計、執行、控制及分析。Stephen (2001)對 BPM 的定義
為提供有彈性的軟體架構，對企業的流程、系統、人員，做流程的分析、整合及
改善。 
Aalst et al. (2003)提出 BPM 生命週期應分成四個階段： 
1. 流程設計(process design)：主要是針對企業的整個流程進行設計及規劃。 
2. 系統組態(system configuration)：在設計完流程後，將其導入資訊系統裡。 
3. 流程執行(process enactment)：以資訊系統執行企業流程內的作業性活動。 
4. 流程診斷(process diagnosis)：利用資訊系統對整個企業流程進行分析，找出問
題並改善。 
由圖 2.1 可知，工作流程管理只包含了流程設計、系統組態及流程執行，缺
乏了對企業流程的診斷部分，BPM 則補足了工作流程管理不足的地方。流程診
斷的部分對企業流程的改善非常的重要，因為要進行企業流程改善前必須先進行
流程的診斷以找出問題點，而目前常見的企業流程改善方法為 PB 及 BPR，將於
2.1.3 節中做一介紹。 
 8
而在Grover and Malhotra (1997) 的研究中指出，BPR應該包含下面五個特
點﹕ 
1. 組織間和組織內的工作流程的分析和設計。 
2. 使用資訊技術來完全整合流程且因此達到企業的主要目標。 
3. 企業重組以資訊技術為重要的方法。 
4. 企業流程和組織的詳細檢查以達到有競爭力、有效力的組織。 
5. 企業流程的分析和徹底再設計以達到重要績效指標大幅改善 
目前已有多家 ERP 業者與管理顧問公司將其最佳實務經由流程塑模，而得
到所謂的「參考流程模型」，以供其顧客進行流程改善參考之用。參考流程模型
是一個具有一般性的有效模型，且可作為發展企業流程可行方案的起始點，並可
依狀況調整成適合特定企業環境的可行方案(Scheer,1992;Scheer,1994)。雖然有部
份公司已透過參考流程模型的協助而獲得流程的重大改善；但大部份的公司卻蒙
受企業現行流程或未來流程與參考流程差異過大所導致的風險與成本。因此，找
出公司流程與參考流程間的差異並調適之，已成為成功利用參考流程模型導入
BPR 專案所不可或缺的步驟。 
2.1.3.2  流程標竿學習 
標竿學習(benchmarking)的觀念就是以任何產業中卓越的公司做為模範，學
習其優點來改善與提升本身流程的績效，透過尋找最佳實務的過程來強化本身的
競爭優勢。 
Camp (1989)、Fisher (1996)、APQC (1993)、Bendell et al. (1998)、Watson(1993)
及Mittelstaedt (1992)等人將標竿學習分成內部標竿學習(internal benchmarking)、
競 爭 標 竿 學 習 (competitive benchmarking) 、 功 能 標 竿 學 習 (functional 
benchmarking)、及通用標竿學習(generic benchmarking)等四類。而Spendolini 
(1992)、Finnigan (1996)、Karlof and Ostblom (1993)等人則將功能標竿學習與通用
 10
 
Source: Tenner and DeToro, 1997 
圖 2.2 Flowchart comparisons 
 
綜合上述分析及如圖 2.2 所示，流程標竿學習主要是以產業內或產業外具有
「最佳實務流程」的企業作為學習對象，並嘗試以有系統、有組織的方式，將企
業本身的流程與之比較，並學習其經驗，以期與之並駕齊驅，甚至超越競爭者
(Watson,1992)。而利用 ERP 進行 BPR，則是以 ERP 所內建的「最佳實務流程」
為參考，再依企業本身特定需求對 ERP 進行客製化，以得到落實改造後企業流
程的整合性資訊系統。 
因此，運用標竿企業或 ERP 業者所提供的「最佳實務流程」作為流程改善
的參考，則是上述兩種流程改善方法的共同點。然而，Rajala et al. (1997)指出，
瞭解流程的變異(process variation)，已成為 BPM 成功的關鍵因素。因此，找出公
司流程與最佳實務流程間的差異，以供流程改善及 ERP 選用的參考，實為運用
「最佳實務流程」進行流程改善的首要工作。 
前述提及為運用「最佳實務流程」進行流程改善，必須先找出公司流程與最
佳實務流程間的差異，在這裡指的差異包括時間、成本及流程之間的邏輯差異分
析，關於流程邏輯差異分析之細節將於 2.2 節中介紹。 
 
 12
來分析兩流程模型間之處理邏輯差異的研究(王志明,1996;Zhuge,2002;吳仁和及
辛信興,2003; Juan and Ou-Yang,2004)。王志明(1996)主要是以 IDEF0 進行企業流
程塑模，並將 IDEF0 流程資訊轉入電腦，以活動伴隨矩陣的資料邏輯儲存單一
流程內各個活動間的連接關係。接著，用演算法求出流程形狀字碼(shape string)。
最後，再用流程相似公式找出類似流程。在流程相似性分析部份，他首先將 IDEF0
可描述之流程活動連接關係分成 Input connection (IC)、Control connection (CC)、
Output mechanism (OM)、Control feedback (CF)、及 Input feedback (IF)等五類，並
以此五類做為流程形狀字碼的基本編碼元件，配合「+」(表相連關係)、「·」 (表
會合關係)、「x」 (表分流關係)、「^」 (表控制回饋)、「v」 (表輸入回饋)等連接
符號，來對流程進行形狀編碼。接著，將兩流程之形狀字碼進行比對。他提出一
個三階段字碼修正的比對方式，並修正 Sze and Yang (1981)所提字碼比對方法，
做為流程形狀相似度分析的指標，但是此方法無法判別出流程中各活動之執行順
序和執行方式的差異。 
至於在流程模型的差異分析方面，Zhuge (2002)認為兩流程的相似程度決定
於其子流程間與活動間之匹配程度。因此，其以 activity specialization graph (ASG)
為分析工具，分別定義兩活動的匹配程度指標及兩流程相似程度指標，以找出兩
流程中相似之子流程。此方法依舊是以發現兩流程之相似子流程為主，對不同流
程路徑、執行順序和執行方式的差異分析，仍有不足之處。 
吳仁和及辛信興(2003)以 ADEPT (Reichert et al.,1998)做為流程塑模工具。首
先，以兩流程擁有共同活動物件的百分比做為兩流程活動匹配程度指標。接下來
是針對兩流程中相同活動部份，找出連接條件差異(connection condition gap)，其
亦以兩流程擁有相同連接條件的百分比做為兩流程連接條件匹配程度的指標。最
後，透過相鄰矩陣(adjacent matrix)的分析，找出兩流程中連接差異(connection gap)
的部份。其將相等的連接定義為兩流程中具有兩組相同活動，且兩活動之流動方
向亦相同。而透過兩流程中連接相同與相異的分析，以找出 ERP 之最佳實務流
 14
2.3 企業流程塑模方法論 
2.3.1  企業流程塑模方法 
企業流程塑模法指的是在系統分析及設計過程中，所產生用以描繪系統的概
念圖形，而這些模型圖示，代表的是一種概念、規格以及實作，這些圖形的作用
就如同樂譜中的音符一般，透過這些符號、語意及陳規(Stereotype)，我們可以與
領域專家溝通，可以與其他系統分析及設計專家溝通，也可以與程式設計師溝
通，與程式稽核及測試者溝通，甚至和使用者溝通。因此塑模法必須選取簡單、
清楚的描述方式。除了塑模法的選擇之外，模式中必需定義各項必要的元件及屬
性，以便於日後對流程的管理與分析。 
    目 前 ， 已 有 數 種 流 程 塑 模 法 被 提 出 ( Winograd and Flores,1987; 
Georgakopoulos et al.,1995;Georgakopoulos and Rusinkiewicz,1997; 
Harbour ,1994)，如下所示： 
1. Communication-based methodologies (Winograd and Flores,1987 ) 
此類塑模法以Conversation with Action Model為代表，著重在人與人之間的互
動。它是將每一個流程模型或活動都視為是一執行者 (performer)和一客戶
(customer)間的溝通。此溝通又可分為四階段：準備、協商、處理、和接受，流
程中的活動全部以準備、協商、處理、和接受四種型態表示之，如圖2.3所示。 
 
 
 16
限制存在。 
 
 
Source: Gregory et al.,2001 
圖 2.5 Hybrid workflow model  
 
4. Process Analysis Worksheet (Harbour,1994) 
此類塑模法注重每一個活動的分析，如表 2-1 所示，先將所有工作步驟列出，然
後依照步驟形態選出代表的符號，並標明於右半部的表格，再註明所需花費的時
間。以生產流程為例，第一步驟是接到訂單，接到訂單屬於事件的形態，於是選
擇○符號，而事件是沒有處理時間的，只是表達當時的一個狀態，其他的步驟也
依此類推。等全部的步驟記錄完整，即可由右半部的點狀圖看出各種工作形態的
分佈情形。但是流程分析工作表沒有辦法看到工作流程的全貌，並且無法表示流
程的平行(Parallel)、分枝(Branch)的型態。 
 
 
 
 
 
 
 18
 
Source:本研究提供 
圖 2.6 生產流程全貌塑模法 
 
因為本研究目的是解決 GAPL 的問題，而在以活動為基礎的塑模法中，流
程係以下面三種元件來描述：(1)工作流程(workflow)：企業中依照一定規則進行
一連串工作步驟，以達成一特定目標。這一群為達成一定目標所執行的工作及工
作間的傳遞，共同形成一個工作流程。(2)活動(activity)：是指流程中的每個邏輯
步驟，它可以是一自動、非自動、或半自動的活動。(3)遞移(transition)： 描述不
同活 動 之間的 相 互關 係，活 動之間 的連 接 就是依 靠 資訊 的傳遞 (transition 
information)，綜合上述可知以活動為基礎的流程塑模法可以利用工作流程、活動
及遞移三種元件來表達流程的邏輯、執行順序和相互關係。因此，本研究決定利
用以活動為基礎的流程塑模法作為本研究所提出之企業流程表示法之基礎。 
2.3.2 以活動為基礎之企業流程塑模方法論 
前述提及在進行流程改善前會先對公司流程及最佳實務流程進行塑模，這
時一個合適的塑模方法就顯得非常重要，一個合適的流程塑模方法一定要擁有三
類主要的能力，那就是表達能力、綜合分析能力和預測能力(M.Kellner,1989)。所
 20
而 Petri Nets 之組成元素如表 2-3 所示: 
 
表 2-3 Petri Nets 之組成元素 
Petri Nets之元素 代表意義 
Place 
(穩態) 
Place 是一種狀態，舉個例子，紅綠燈，
那麼 Place 就可以是紅燈、綠燈或黃燈。 
Token 
(標註) 
Token 指的是一個物件，可以代表任何東
西，每個 Place 或 Transition 中可以有零
個或多個 Token，當 Token 足夠時才能夠
由一個狀態變成另一個狀態。 
Transition 
(態變) 
Transition 是由一個狀態轉成另一個狀態
的過程，例如由紅燈變綠燈，綠變黃，黃
變紅等。 
Arc 
 (方向弧線) 
Arc 主要是連接 Place 及 Transition 的一
個有方向的線段，可以從 Place 指向
Transition 或從 Transition 指向 Place，但 
Place 與 Place 或 Transistion 與 Transition
之間不能有 Arc 相連，因為它的狀態不能
直接變成另一個狀態，中間一定要經過一
個過程，而過程與過程之間也會存在著一
種狀態。 
Source:本研究整理 
 
Petri Nets 的性質分成： 行為性質 (Behavioral properties) 與 結構性質 
(Structural properties) 。行為性質指與 Petri Nets 的初始狀態 (Initial marking) 有
關的性質。結構性質 (Structural properties) 是與初始狀態 (Initial marking) 沒有
關係的性質，專門探討 Petri Nets 的結構，其分類如表 2-4 所示: 
 
 
 
 22
徑由初始位置到達某一個節點，則該節點稱為可達的節點。 
2. 存活性分析(liveness) 
存活性基本的定義為一個 Petri Nets 在執行中能否完全避免於死結(deadlock)、
無限等待等性質而順利執行完成。簡單的來說就是當 Petri Nets 由起始位置開始
執行之後，必須保證標註能到達終止位置。在這個定義之下，死節點、迴圈就
是典型存活性不良的問題。 
3.有限性分析(boundedness) 
所謂的有限性是指在 Petri Nets 中，位置上具有一參數 K﹙capacity﹚，代表在這
個位置上最多可存放幾個標註。當標註數目大於 k 時，即產生了溢位或成為不
安全的狀況。 
應用 Petri Nets 來分析工作流程有下列優點： 
1. 圖形化表達：透過 Petri Nets 模型可以模擬(simulate)系統在運作時的動態行為。 
2. 正規的語意(formal semantic)：Petri Nets 除了提供圖形化的表達之外，也提供
正規的語意以數學的方式表示(Murata, 1989)。 
3. 分析技術：Petri Nets 提供許多分析的行為屬性(behavioral property)以驗證 Petri 
Nets Modles(Murata, 1989)。 
綜合上述學者的觀點，可以發現 Petri Nets 主要的缺點在於面對複雜的問
題時，即使是小型的系統運用 Petri Nets 來塑模時，其 models 也會變得大而難
以分析，因此它時常需要額外加些修改或限制才能適合某些特殊的應用，而且
從邱世彬(2002)與李志偉(2004)這兩位學者研究中可以發現其實 Petri Nets 是可
以根據一些規則轉換成以活動為基礎的流程表示法。 
 
 
 
 24
表 2-6  IDEF 系列方法論(續) 
IDEF8 User Interface Modeling 
IDEF9 Scenario-Driven IS Design 
IDEF10 Implementation Architecture Modeling 
IDEF11 Information Artifact Modeling 
IDEF12 Organization Modeling 
IDEF13 Three Schema Mapping Design 
IDEF14 Network Design 
Source:本研究整理 
 
在流程建構及分析之中，IDEF 主要運用到了以下三個模組，分別是 IDEF0、
IDEF1X、IDEF3，它們也為發展較成熟的模組，但在上述三種模組中以 IDEF3
與本研究所發展以活動為基礎的流程表示法較為相近，因此本研究將針對 IDEF3
作介紹： 
IDEF3 Model: 
相對於 IDEF0 是用來建立企業功能模型， IDEF3 則是利用程序流程圖以
有順序性的事件來擷取與描述企業的程序。除了模型中的物件、資源、系統與作
業功能之外，IDEF3 可以利用工作流程的表達來設定程序的時間順序、程序方
塊、交點以及鏈結都是程序流程所支援的特性。 
每一個程序利用情境 (scenario)的方式，也就是以說故事的方法來描述程序
中的事件、動作與決策，以及其中執行、參與或新增、更改或刪除的物件。另外，
還包含說明性的資訊，如事實，程序的限制、決策與物件等。工作流程分析的首
要工作，就是先識別出所要研究的情境，並加以命名。命名的是一個重要的步驟，
因為它界定了系統或子系統研究的範圍。情境中所列出的程序與物件，則提供組
織化與範圍認定的機制，這些都是定義系統所不能缺少的。在找出所有的程序之
後，便可以開始發展系統的程序流程圖 (process flow diagram) ，如圖 2.7 為程序
流程圖的範例。 
 26
表 2-7 IDEF3 組成元件 
 
 
 
 
 
 
 
Source:本研究整理 
 
圖 2.8 將接合(junction)的分流與合流做一個分類 
 
 
 
 
 
 
 
Source:本研究整理 
圖 2.8 分流合流點之分類 
 
表 2-8 及表 2-9 分別提供合流(fan-in)與分流(fan-out)之語法及意義 
 
 
 
 
Component Sign Meaning 
 28
從上述所介紹的 IDEF 模組中可以發現，IDEF3 是利用程序流程圖來描述企
業的運作程序，與以活動為基礎的流程表示法，具有很高的相似度，像是其使用
UOB 來代表活動，利用 Junction 來代表流程邏輯的運作，其 link 的功能等同於
以活動為基礎的表示法中的 arrow。其意義代表 IDEF3 也可以經由一些規則轉換
成以活動為基礎的流程表示法，也可以說 IDEF3 是以活動為基礎的流程表示法
為基礎架構來發展的。 
2.3.2.3 ARIS 
ARIS 全名為 Architecture of Integrated Information System(整合性資訊系統
架構) 是德國 IDS Scheer 公司的 A. W. Scheer 於 1985 年所發展出來的，其設
計理念，是希望提出一個整合性的概念，目的是希望把描述企業程序的所有基
本觀念通通納入。ARIS 架構如圖 2.9 所示，並將系統發展架構分成四個構面
(functions、organization、date、control) （Scheer,2000），在組織、功能、資料
三個觀點中，先省略彼此觀點間無數的交互關係，只專注於觀點內的事物，之
後各觀點的模型在控制觀點（control View）當中整合成完整的流程架構，而不
會有任何的重複，如圖 2.10 所示。 
 
 
Source: Scheer, 2000 
圖 2.9 ARIS 架構圖 
 30
Event
Function
New employee
is planned
Define position
Fix wages
and salary
categorization
Work out
position
description
Work contract
prepared
Determine
support person
Determine
qualification and
career path
Procure work
equipment
New employee
is fit for
service
Introduce
buildings
and locations
Introduce job
safety
Introduce
QM system
Complete
personnel
documents
Introduction
is finished
Create
orientation
plan
 
Source:本研究整理 
圖 2.11 Personnel assignment 
 
事件導向程序鏈結圖(eEPC diagram)，它主要是以「事件」(event)以及「功
能」(function)為主要的表達元件。此兩元件的定義及說明如下： 
        事件(event):  
事件是功能的起因與結果有點像是 petri net 中的態變(transition)，它被定義成一
事件的發生或是經功能處理後狀態之改變。例如收到訂單、訂單送出等。其本
身不具有時間性，事件的發生代表其下活動發生的那一個時間點。 
         功能(function): 
ARIS 對「功能」定義是：為達成企業目標而執行的活動。功能之產生必開始
於事件的發生，也必終止於事件的發生，其具有時間性，時間的計算為上一個
輸入事件的起始到下一個輸出事件的起始。功能可被視為一個作業活動或是一
個處理方法。 
而在 eEPC 中主要是利用箭頭     及邏輯運算子{              }來連結
事件及功能，但是要注意的是由事件觸發功能時，其下不能出現需要做判斷的邏
 32
在流程運作順序之中，ARIS 可以於控制面中，表達出關於特定功能需由哪些部
門運作以完成。同時由此亦可以清楚的看出，由部門經過功能所輸出或者是輸入
的資料。亦可單就組織面而言，透過 ARIS 提供的工具繪出整體組織架構關聯圖。  
5. 流程表達清晰 
在此概括了上列四個優點，將複雜的企業流程分成四個面。運用功能、組織、資
料等三面，除了可以分別顯示個別的架構圖，並且可以運用控制面整合此三面。
控制面中包含完整的邏輯運算子，提供了 AND、XOR、OR 等描述流程。  
在看完上述企業流程塑模方法後，可以發現 IDEF、Petri Net、ARIS 三者之
間與以活動為基礎的流程表示法之間的共同性，如表 2-10 所示: 
 
表 2-10 企業流程塑模方法與以活動為基礎之流程塑模法之共同性 
塑模方法 IDEF ARIS Petri net 
Activity based 
process 
representation 
類似以活動
為基礎的
model 
IDEF3 eEPC Petri net 本身 
代表活動的
元件 UOBs Function Transition Activities 
活動之間的
連結 Links Arrow Arrow Arrow 
執行程序邏
輯判斷 Junction 
Logic 
operator 
- Logic operator 
Source:本研究整理 
 
從上表可以發現在塑模方法中以 IDEF 中的 IDEF3 及 ARIS 中的 eEPC 與以
活動為基礎的表示法最為相似，而 Petri net 表面上看起來雖然沒有類似的部分，
但卻可經由轉換的方式來得到類似以活動為基礎的流程表示方法。 
 34
模方法之共通性，以表 2-12 中的元件做為本研究之流程塑模方法。圖 2.13 即以
表 2-12 之模型元件所繪製之流程模型。 
 
表 2-12 以活動為基礎的流程塑模方法 
元件名稱 圖形 意義 
始末點 
(Start/End 
Point) 
 流程模型的起始與結束點，每個流程模型
只有一個起始點 Start 及一個結束點 End。 
活動 
(Activity) 
 完成該流程任務所需執行的工作。若一個
活動無後 續活動且 無連接流程結束點
End，該活動則稱為「流程中斷活動」。 
箭頭 
(Arrow) 
 描述始末點與不同活動之間的執行順序。 
邏輯運算子 
(Logical 
Operator) 
 
Xor ,And ,Or 表達流程的執行行為。 
Source:本研究提供 
 
 
                  Source:本研究提供 
圖 2.13 以活動為基礎的流程模型 
 
在這裡利用圖 2.13 來說明表 2-12 中元件的意義及使用，如圖 2-13 所示該流
 36
=G(A,S,L,F,E)，其中 E=(A,S,F,L)×(A,S,F,L)為 PM 中所有有向邊(directed Edge)
或箭頭所形成的集合。(A 是 PM 中活動集合；S 是 PM 之起始點 Start；F 是 PM
之結束點 End；L 是 PM 中所有邏輯運算子的集合。) 
 
 
Source:本研究提供 
圖 2.15 Purchasing Management Process Model 
 
以圖 2.15 之採購管理流程模型為例，該流程模型在 BPE 系統中所儲存之資
料結構可以 PM=G(A,S,F,L,E)表示(在這裡為了方便表達將以圖 2.15 內每一活動
節 點 括 符 內 之 ID 來 說 明 ， 如 「 Start 」 其 ID 為 S) ， 其 中
A={a,b,c,d,e,f,g},S={S},F={F},L={and1,and2},E={(S,a),(a,b),(b,and1),(and1,c),(and1,d
),(c,e),(e,and2),(d,and2),(and2,f),(f,g),(g,F)} 。透過目前 BPE 所儲存 PM=G(A,S,F,L,E)
資料結構的搜尋，可利用節點所連接的箭頭搜尋到其上一個或下一個節點，亦即
該節點之「先行作業」與「後續作業」的相鄰關係，定義 2.2 即說明如何從 BPE
系統現有 PM=G(A,S,F,L,E)結構判別節點相鄰關係方法。 
 
定義 2.2  Adjacent relation 
PM=G(A,S,F,L,E)為一流程模型. 假如 PM 中有一有向邊或箭頭從節點
B∈(A,S,F,L)到節點 A∈(A,S,F,L)，則將節點 B 稱為另一節點 A 之「先行作業」，
反之亦然，節點 A 稱為節點 B 之「後續作業」，其相鄰關係可從其箭頭或有向
邊得知。該相鄰關係可以用(1)及(2)的通式來表達: 
beforehand task (A) ={ EA) (B, |L)(A,S,F,B ∈∈ }………………………..(1) 
and 
follow-up task (A)={ EB) (A, |L)(A,S,F,B ∈∈ }………………………… ..(2) 
 
因此無論 BPE 系統其前端採何種流程塑模方法(IDEF，eEPC，Petri net)在完
成 PM 繪製後，BPE 系統再將這些 PM 資訊，轉換成類似 PM=G(A,S,F,L,E) 之資
 38
 
Source: Richard,2003 
圖 2.16 機會流程圖 
 
2.5.2 流程情境(Process scenario) 
每一個企業流程，如採購流程或生產流程，都有屬於自己的流程情境
(process scenario) 。 Juan and Ou-Yang (2005) 及
www.processdriven.org/process_scenarios.html 提到，流程模型中的每一條路徑，
都代表一個不同的流程情境，並以流程內所輸入的詳細屬性和被執行的活動為
基礎。 
Keller and Teufel(1998)則認為流程邏輯是為了因應各式各樣的流程情境而
在流程模型內所設計可供選擇(alternative)的流程路徑及路徑內各活動執行順序
(sequences)的組合。 
Abeysinghe and Phalp( 1997)認為當不同的流程情境發生時，應選擇並執行流
程模型中某一個流程路徑來加以因應。  
 
 
 40
 
Source:本研究整理 
圖 2.17 Business process and workflow patterns 
 
 
 
 
 
 
 
 
 
 
Source: van der Aalst et al., 2003 
圖 2.18 工作流程模板 
Patterns involving Multiple Instances 
 Pattern 12 (Multiple Instances Without 
Synchronization) 
 Pattern 13 (Multiple Instances With a 
Priori Design Time Knowledge) 
 Pattern 14 (Multiple Instances With a 
Priori Runtime Knowledge) 
 Pattern 15 (Multiple Instances Without a 
Priori Runtime Knowledge) 
Cancellation Patterns 
 Pattern 19 (Cancel Activity) 
 Pattern 20 (Cancel Case) 
State-based Patterns 
 Pattern 16 (Deferred Choice) 
 Pattern17(Interleaved Parallel 
Routing) 
 Pattern 18 (Milestone) 
Structural Patterns 
 Pattern 10 (Arbitrary Cycles) 
 Pattern 11 (Implicit Termination) 
Advanced Branching and 
Synchronization Patterns 
 Pattern 6 (Multi-choice) 
 Pattern 7 (Synchronizing Merge) 
 Pattern 8 (Multi-merge) 
 Pattern 9 (Discriminator) 
Basic Control Flow Patterns 
 Pattern 1 (Sequence) 
 Pattern 2 (Parallel Split) 
 Pattern 3 (Synchronization) 
 Pattern 4 (Exclusive Choice) 
 Pattern 5 (Simple Merge) 
 42
表 2-13 工作流程模板說明表(續) 
Advanced 
Branching and 
Synchronization 
Patterns 
Pattern 6: 
 Multi- 
choice 
A point in the workflow process where, based 
on a decision or workflow control data, a 
number of branches are chosen. 
Pattern 7:  
Synchronizing 
Merge 
A point in the workflow process where 
multiple paths converge into one single 
thread. If more than one path is taken, 
synchronization of the active threads needs to 
take place. If only one path is taken, the 
alternative branches should re-converge 
without synchronization. It is an assumption 
of this pattern that a branch that has already 
been activated, cannot be activated again 
while the merge is still waiting for other 
branches to complete. 
Pattern 8:  
Multi-merge 
A point in a workflow process where two or 
more branches reconverge without 
synchronization. If more than one branch gets 
activated, possibly concurrently, the activity 
following the merge is started for every 
activation of every incoming branch. 
 
Pattern 9: 
Discriminator 
The discriminator is a point in a workflow 
process that waits for one of the incoming 
branches to complete before activating the 
subsequent activity. From that moment on it 
waits for all remaining branches to complete 
and ignores them. Once all incoming branches 
have been triggered, it resets itself so that it 
can be triggered again (which is important 
otherwise it could not really be used in the 
context of a loop). 
Source: van der Aalst et al., 2003 
 
 
 
 
 
 44
表 2-13 工作流程模板說明表(續) 
 
Pattern 15: 
Multiple 
Instances 
Without a Priori 
Runtime 
Knowledge 
For one case an activity is enabled multiple 
times. The number of instances of a given 
activity for a given case is not known during 
design time, nor is it known at any stage 
during runtime, before the instances of that 
activity have to be created. Once all instances 
are completed some other activity needs to be 
started. The difference with Pattern 14 is that 
even while some of the instances are being 
executed or already completed, new ones can 
be created. 
State-based 
Patterns 
Pattern 16: 
Deferred 
Choice 
A point in the workflow process where one of 
several branches is chosen. In contrast to the 
XOR-split, the choice is not made explicitly 
(e.g. based on data or a decision) but several 
alternatives are offered to the environment. 
However, in contrast to the AND-split, only 
one of the alternatives is executed. This 
means that once the environment activates 
one of the branches the other alternative 
branches are withdrawn. It is important to 
note that the choice is delayed until the 
processing in one of the alternative branches 
is actually started, i.e. the moment of choice is 
as late as possible. 
 
Pattern 17: 
Interleaved 
Parallel Routing 
A set of activities is executed in an arbitrary 
order: Each activity in the set is executed, the 
order is decided at run-time, and no two 
activities are executed at the same moment 
(i.e. no two activities are active for the same 
workflow instance at the same time). 
 
Pattern 18: 
Milestone 
The enabling of an activity depends on the 
case being in a specified state, i.e. the activity 
is only enabled if a certain milestone has been 
reached which did not expire yet. 
Source: van der Aalst et al., 2003 
 46
表 2-14 工作流程模板形狀(續) 
6 Multi-choice 
 
7 Synchronizing 
merge 
 
8 Multi-merge 
 
9 Discriminator 
 
10 Arbitrary Cycles 
 
19 Cancel Activity 
 
20 Cancel Case 
 
Source: van der Aalst et al., 2003 
 
表 2-14 只有列出 12 種工作流程模板形狀是因為有些模板並不適合用靜態的
圖形來表達，這種類型的工作流程模板如果只看靜態的圖形很容易誤解其意思，
而模板 11~18 就是屬於這種類型，因此在這裡並沒有列出其圖形。而且有些模板
屬於必須藉由人的決策來判定而不是邏輯運算子，像是 No.19 Cancel Activity 及
No.20 Cancel Case，所以並不是該學者所提出的所有模板都適合本研究所發展支
 48
第三章 研究方法 
本研究主要是為了解決前述 BPE 系統目前儲存之低階且片段資料結構不適
合 GAPL 的問題，如圖 3.1 所示，本研究首先透過 GAPL-Oriented 流程模型表示
法之發展與定義；接著，發展一轉換方法，以建立 BPE 系統現有低階流程模型
表 示 法 與 GAPL-Oriented 流 程 模 型表 示法 間 的 對應 關 係 ； 最後 ， 一 個 以
GAPL-Oriented 流程模型表示法為基礎之 GAPL 方法將被提出，用以分析兩流程
模型間的流程邏輯差異。 
 
 
 
 
 
 
 
 
 
 
 
 
Source:本研究提供 
圖 3.1 研究架構圖 
 
3.1GAPL-Oriented 流程模型表示法 
如 2.4 節所述，由於 BPE 系統目前採用之 PM=G(A,S,F,L,E)流程模型表示法
所提供之低階且片段的流程模型資料並不適合處理需高階且整體流程模型語意
之 GAPL 的工作，因此本研究整合了 2.5 節中諸位學者針對流程模型所提之不同
層級的流程邏輯語意特性，發展出一具有多層次之 GAPL-Oriented 流程模型表示
 
PM=G(A,S,F,L,E) 
 
轉換 
及 
對應 
GAPL-oriented
流程模型表示
流程邏輯
差異分析
(GAPL) 
Existing BPE System GAPL-Extended BPE System 
Process 
Logic Gaps 
Process 
Models 
 50
Ou-Yang (2005)對 PM 中之 ppath 定義修正如定義 3.1 所示。 
 
定義 3.1  Process Path 
    PM 中任一 ppath 之起始、產生及終結定義如下： 
1. 起始：ppath 開始於 PM 的起始點 S。 
2. 產生：沿著 PM 而下，每逢一個 Xor-split 節點，均會產生新的 ppath，假設
Xor-split 的分流數量為 n，可擇其中任一分流延續原有 ppath，其餘 n-1 條
分流則為新產生的ppath，而新產生的n-1 條ppath 必須包含分流前原有ppath
的所有活動，然後接續分流後的活動，延續 PM 而下。 
3. 終結：ppath 可結束於 PM 之終結點 F、流程中斷活動節點、或 ppath 中重
複出現的活動結點。 
此外，根據不同的流程情境可將 ppath 分為三種類型(type)： 
1. 「完成情境(completion scenario)」的流程路徑：指流程順利完成，以 ppathCom
表示之。PPathCom={ppathppath 結束於 PM 之終結點 F}(在這裡所指的
PPathCom 代表所有 ppathCom 的集合)。 
2. 「取消情境(cancellation scenario)」的流程路徑：指流程執行途中，因某些
狀況發生而取消，以 ppathCan 表示之。PPathCan={ppathppath 結束於 PM 中
之流程中斷活動節點}(在這裡所指的 PPathCan 代表所有 ppathCan 的集合)。 
3. 「重工情境(rework scenario)」的流程路徑：指流程因某些狀況發生而須回
到之前執行過的活動，以 ppathReW 表示之。PPathReW={ppathppath 結束於
PM 中重複出現的活動節點}(在這裡所指的 PPathReW 代表所有 ppathReW 的集
合)。 
 
當分析完一個 PM 之所有 ppath 後，BPE 系統即可根據定義 3.2 所示表示法，
以 ppath 為基礎儲存該 PM 的 ppath 組成資訊。 
 
定義 3.2  Process Model Representation by PPath 
PM 指一流程模型，該 PM 在 BPE 系統內之表示法可定義成 PM = 
PPath={ppath}(在本研究中用粗體大寫英文字母 PPath 代表每一條獨立流程路徑
(ppath)的集合)，∀ppathi in PMk can denoted by PMk.ppath typei 。 
 
在這裡舉個例子來說明「Business Scenario Level」中的相關任務及定義。每
一個 PM 可以想像成一具有處理不同「商業情境」的流程。如圖 3.3 「Order 
 52
關係，可知該 ppath 中各活動之執行先後順序；第二條 ppath2 結束於 PM 中之流
程中斷活動節點 “d”稱為具「取消情境的流程路徑(ppath Can2 )」，可能因為人為疏
忽而取消該 ppath，而該 ppath 對應到 G(A’,S’,L’,F’,E’)中的 A’={a,b,d}；第三條
ppath 結束於 PM 中重複出現的活動節點 “a”，將其稱為具「重工情境的流程路
徑(ppath WRe3 )」，必須要重複執行該作業直到滿足某一停止條件才能繼續下一步
驟，其所對應 G(A’,S’,L’,F’,E’)中的 A’={a,b,c}相同的依定義 2.2 也可知其活動執
行的順序。 
因此根據定義 3.2，圖 3.3 中的 PM 在 BPE 系統內之表示法可定義成
PM=PPath={ ppath Com1 , ppath Can2 , ppath WRe3 }。由此可知，「Order Monitoring Process 
Model」內含了可處理三種不同情境的能力。另外必須注意的是利用 Xor 邏輯運
算子找出 PM 中的所有 ppath 後，該 Xor 邏輯運算子在 ppath 中將失去作用，因
為不再具有找出新流程路徑的功能，但在本研究中考慮到可逆性的問題因此當利
用 Xor 邏輯運算子找出 PM 中的所有 ppath 後，將不會移除該 ppath 中的 Xor 邏
輯運算子(如圖 3.3 所示)，至於如何於現行 BPE 系統所儲存之 PM=G(A,S,F,L,E)
流程資料中搜尋 PM 的 PPath，其細節將於 3.2 節中做進一步說明。 
3.1.2 Processing Mode Level 
處理模式層的任務是利用 van der Aalst (2003)所提出之 workflow pattern 概
念將「Business Scenario Level」中的每一條 ppath 拆成流程模板 (process pattern; 
ppattern)。該學者將工作流程型態分成六大類共二十種，在本研究中將引用該學
者提出由邏輯運算子搭配活動所組成的七種 workflow patterns，包括 sequence、
parallel split、synchronization、multi-choice、synchronizing merge、multi-merge、
arbitrary cycles ， 本 研 究 還 新 增 一 種 pattern 稱 為 parallel split and 
synchronization 是 由 表 2-14 中 的 pattern 2 parallel split 和  pattern 3 
 54
表 3-1  Process Patterns(續) 
Synchronizing Merge 
(ppatternSM) 
 
A point in the workflow process where multiple 
paths converge into one single thread. If more 
than one path is taken, synchronization of the 
active threads needs to take place. If only one 
path is taken, the alternative branches should 
re-converge without synchronization. It is an 
assumption of this pattern that a branch that has 
already been activated, cannot be activated again 
while the merge is still waiting for other 
branches to complete. 
Multi-Merge 
(ppatternMM) 
 
A point in a workflow process where two or 
more branches reconverge without 
synchronization. If more than one branch gets 
activated, possibly concurrently, the activity 
following the merge is started for every 
activation of every incoming branch. 
Arbitrary Cycles 
(ppatternAC) 
 
A point in a workflow process where one or 
more activities can be done repeatedly. 
Source: 修改自 van der Aalst (2003) 
為了清楚表達本研究中流程路徑內每一段的 ppattern，利用表 3-1 的流程模
板圖可以避免從 ppath 中拆解 ppattern 時所產生的「灰色地帶」，「灰色地帶」指
的是兩 ppattern 接合處的活動到底該歸屬哪一邊，如圖 3.4(a) 所示(假設該路徑
為採購流程模型中的一條路徑)，若根據 van der Aalst(2003)所定義的 workflow 
pattern 型態(表 2-15)，則可以拆解出 3 個 process patterns 分別是 Sequence、
Parallel split and Synchronization、Sequence，如圖 3.4(b)所示，可是如果依照這
樣的拆解方法當在執行 GAPL 的工作時就無法看出 Start、a、b、c 四個活動原本
是循序執行的流程行為，因此必須利用表 3-1 中修正後的拆解方法，如圖 3.4(c)
所示。 
 
 56
動為基礎的流程表示法搭配邏輯運算子來表達流程執行的順序及流程的行為，因
此像 Discriminator 這樣的流程模板在本研究中將不考慮。 
另外該學者所提之工作流程模板中另外有兩種 ppattern 將不會出現在本研
究中，因為如前述所述在利用 Xor-split 找出 PM 中的所有 ppath 後，將不再需
要 Xor 這個邏輯運算子，所以從每一條 ppath 中所拆解出來的 ppattern 將不可能
出現表 2-14 中 Xor 的相關型態，如 Pattern 4: Exclusive Choice、Pattern 5: Simple 
Merge (細節請參考 3.1.1)，因此在本研究中將只引用該學者所提之七種 ppattern
以及本研究所新增之 parallel split and synchronization pattern，圖 3.5 將
Processing Model Level 中使用到的 process pattern 用一結構化的圖形來表示。 
 
 
 
 
 
 
Source:本研究提供 
圖 3.5 Elements of processing model level  
 
當藉由表 3-1 分析完一個 ppath 所擁有之 ppattern 後，BPE 系統即可根據定
義 3.4 所示之表示法，以 ppattern 為基礎儲存該 ppath 的 ppattern 組成資訊。 
 
定義 3.4  ppath Representation by PPattern 
ppath 指流程模型中一流程路徑，該 ppath 在 BPE 系統內之表示法可定義成: 
ypeppath t  =PPattern={ ppattern }= 
ppattern1→ppattern2→ppattern3→......→ppatternn ，其中∀ ppatterni, ppatterni ∈ 
{ ppatternSe , ppatternPS , ppatternSy , ppatternPSS , ppatternMC , ppatternSM , ppatternMM , 
ppatternAC }(在本研究中用 ppattern 代表 process pattern 之縮寫，PPattern 代表在
ppath 中所有獨立 ppattern 之集合)。 
Process Path 
Process Pattern 
is compose of 
Parallel split Synchronization 
Multi-choice Synchronization merge 
 
Multi-merge 
Arbitrary cycles 
Sequence 
Parallel split and 
Synchronization 
 
 58
點一 ID，如 Start 節點之 ID 為 “S”， Process customer inquiry 節點之 ID 為 “a”)
由於其未碰到曾經出現過的活動節點因此從表 3-1 可知該 ppattern1=ppatternSe，
而該 ppattern Se1 可對應至 BPE 系統中 G(A,S,F,L,E) 的子集 G(A’’,S’’,F’’,L’’,E’’)
其中 A’’={a},S’’={S}，相同的繼續利用邏輯運算子從該 ppath 中找出其它
ppattern，分別是 ppattern MC2 及 ppattern PS3 及 ppattern Se4 ，並將該 ppath 中所有的
ppattern 都儲存於 BPE 系統中本研究所發展 GAPL-Oriented 流程表示法中的
「Processing Mode Level」，而利用定義 2.2 所提利用箭頭連接的節點關係可以找
出 ppath 中 ppattern 的執行順序，因此可知該 ppath 在 BPE 系統內可儲存成
ppath==PPattern { ppattern Se1 , ppattern MC2 , ppattern PS3 }= ppattern Se1 → 
ppattern MC2 → ppattern
PS
3 的形式。 
如前所述利用「Business Scenario Level」中的 ppath 以及「Processing Mode 
Level」中的 ppattern 相較於 BPE 系統內部的 G(A,S,F,L,E)低階流程模型表示法
已經可以表達出具高階語意的流程模型表示法，如圖 3.7 所示為本研究所發展
GAPL-Oriented 之流程表示法概念其中一個流程模型擁有很多條 ppath，而每一
條 ppath 也各自擁有相對應的 ppattern。 
但是「Business Scenario Level」以及「Processing Mode Level」中的元素並
不是憑空跑出來的，而是藉由 BPE 系統內部所記錄的這種低階且片段的
G(A,S,F,L,E)資料型態所組成的，因此這三層其實是相輔相成的，在 3.2 節將介
紹目前 BPE 系統所儲存的低階流程模型表示法與本研究所發展 GAPL-Oriented
流程模型表示法之間該如何轉換及彼此間的對應關係。 
 
 
 60
3.2 GAPL-Oriented 流程模型表示法之轉換及對應方法 
如前所述本節主要在說明如何建立 BPE 系統現有低階流程模型表示法與
GAPL-Oriented 流程模型表示法間的「轉換」及「對應」關係，在「轉換」方面
首先必須先利用 Xor 邏輯運算子搜尋出 PM 中每一條 ppath，接下來從表 3-1 可
知找出流程路徑中 ppattern 的重點在於邏輯運算子，因為本研究所定義之
ppattern 皆產生於 ppath 中的邏輯運算子處，所以「轉換」方面的重點在於如何
利用邏輯運算子的搜尋找出所有相對應的 ppath 及 ppattern；而由於 ppath 及
ppattern 均為 PM 的子集，故在「對應」方面重點在於建立 ppath 及 ppattern 與
儲存於 BPE 系統中 PM= G(A,S,F,L,E)子集的對應關係。 
利用前述所提之轉換方法找出 ppath 及 ppattern 後，還必須發展一「對應的
儲 存 方 法 」來 儲 存 ppath 及 ppattern 所 對 應 至 PM=G(A,S,F,L,E) 之 子 集
ppath=G(A’,S’,F’,L’,E’)及 ppattern=G(A’’,S’’,F’’,L’’,E’’)，其細節於 3.2.2 中介紹。 
3.2.1GAPL-Oriented 流程模型表示法之 PPath 轉換及儲存方法 
如前所述「轉換」方面的重點在於如何利用邏輯運算子的搜尋找出所有相
對應的 ppath 及 ppattern，在這裡先介紹如何從 PM 中搜尋出 ppath，並將其儲存
於「Business Scenario Level」，其方法可依下列步驟取得: 
 
Step 1. 建立一起始流程路徑於該 PM 的 PPath 中。將此流程路徑指派為目前的
流程路徑(current process path,Cppath)，並將 PM 的開始節點 Start 指派
為目前的節點(CNCppath)，並將此節點放入 Cppath 中的 S’(這裡用 S’來儲
存開始節點，F’儲存結束節點，A’儲存活動節點，L’來儲存邏輯運算子)。 
Step 2. 檢索 PM 中 CNCppath 的下一個節點，根據節點的型態將從其下選擇一任 
務執行。 
(a) 假如該節點為一活動節點，且從未出現在 Cppath 中，將此節點放入
Cppath 中的 A’，而且將該節點指派為 CNCppath，跳到 Step 3.。 
 
 62
(a) 檢索分流中的第一條分流，並將第一條分流的第一個節點指派為
CNCppath 的下一個節點，跳到 Step 5.。 
 
(b) 從之前該分流邏輯運算子所記錄後續作業的相鄰關係中找到下一條分
流，並將該分流邏輯運算子重新指派為 CNCppath，並將下一條分流的第
一個節點指派為 CNCppath 的下一個節點，跳到 Step 5.；若無法找到下一
分流，代表該分流邏輯運算子的所有分流上的節點都已檢索完，回到
Step 2.。 
Step 5. 檢索 PM 中 CNCppath 的下一個節點，根據節點的型態將從其下選擇一任    
務執行。 
(a) 假如該節點為一活動節點，且從未出現在 Cppath 中，將此節點放入
Cppath 的 A’ 中，指派此節點為 CNCppath，跳到 Step5.。 
 
(b) 假如該節點為一合流的 And 節點，且從未出現在 Cppath 的 L’中，將此
合流的 And 節點指派為 CNCppath 並放入 Cppath 的 L’中，結束目前的分
流，跳到 Step 4.(b)。 
 
(c) 假如該節點為一合流的 And 節點，且曾經出現在 Cppath 的 L’中，將此
And 節點指派為 CNCppath，結束目前的分流，跳到 Step 4.(b)。 
 
(d) 假如該節點為一合流的 Or 節點，且從未出現在 Cppath 的 L’中，將此合
流的 Or 節點指派為 CNCppath 並放入 Cppath 的 L’中，結束目前的分流，
跳到 Step 4.(b)。 
 
(e) 假如該節點為一合流的 Or 節點，且曾經出現在 Cppath 的 L’中，將此合
流的 Or 節點指派為 CNCppath，結束目前的分流，跳到 Step 4.(b)。 
 
Step 6. 回到 Step 2.。 
Step 7. 從 PM 的{ppath}檢索 Cppath 的下一條 ppath，並另該 ppath 為 Cppath。
此外，檢索此 ppath 的目前節點而且指派其為 CNCppath 。假如無法再檢
索到其他的 ppath 則結束 ppath 搜尋的動作。 
Step 8. 回到 Step 2.。 
 
在這裡舉一例子來說明如圖 3.3 所示，建立一起始流程路徑於該 PM 的
PPath 中。將此流程路徑指派為 Cppath，而且將此 PM 的起始節點「Start」指派
為 CNCppath 並將此節點放入 Cppath 中的 A’ (Step 1)。接著，將第一個合流的 Xor
 64
Step 1. 從該 PM 儲存於「Business Scenario Level」的 PPath 中擷取一 ppath。
將此 ppath 指派為目前的流程路徑(current process path,Cppath)。 
Step 2. 建立一新的 ppattern 於 Cppath 的 PPattern 中，同時產生一空集合
G(A’’,S’’,F’’,L’’,E’’)以儲存該 ppattern 資料，將此 ppattern 指派為目前的
流程模板(Cppattern) ，並將 Cppattern 的開始節點 Start(該 Start 節點資
料來自 Cppath 所對應的 G(A’,S’,F’,L’,E’))指派為目前的節點(CNCppattern)
且將其放入 Cppattern 的 S’’。 
Step 3. 檢索 CNCppattern 的下一個節點，根據節點的型態將從其下選擇一任務執
行。 
(a) 假如該節點為一活動節點，而且從未出現在 Cppattern 的 A’’中，將此節
點放入 Cppattern 的 A’’中，而且將該節點指派為 CNCppattern，回到 Step 3.。 
 
(b) 假如該節點為一活動節點而且曾經出現在 Cppattern 的 A’’中，結束
Cppattern 且將 Cppattern 記錄為 ppatternAC，並將 Cppattern 放入 Cppath
的 PPattern，跳到 Step 7.(b) 。 
 
(c) 假如該節點為一結束節點，將此節點放入 Cppattern 的 F’’ 中，結束
Cppattern 且將 Cppattern 記錄為 ppatternSe，接著將 Cppattern 放入 Cppath
的 PPattern 中，跳到 Step7.(b) 。 
 
(d) 假如該節點為一流程中斷活動節點，將此節點放入 Cppattern 的 A’’ 中，
結束 Cppattern 並且將 Cppattern 記錄為 ppatternSe 並將 Cppattern 放入
Cppath 的 PPattern，跳到 Step 7.(b)。 
 
(e) 假如該節點為一 Xor 節點，將此節點放入 Cppattern 的 L’’ 中並將其指派
為 CNCppattern，跳到 Step 3.。 
 
(f) 假如該節點是一個分流的 And 節點，結束 Cppattern 先將 Cppattern 的型
態記錄為 ppatternSe 並將 Cppattern 放入 Cppath 的 PPattern。產生一空集合
G(A’’,S’’,F’’,L’’,E’’) 以 儲 存 該 新 ppattern 資 料 ， 指 派 新 的 ppattern 為
Cppattern，而且將其放入 Cppath 的 PPattern 中，指派分流的 And 節點為
CNCppattern 並將其放入新 ppattern 的 L’’中，利用前述定義 2.2 所提之相鄰關
係找出其 follow-up task(And)={(a,b)∈(A,S,F,L)|((And,a),(And,b))∈E}(這裡假
設該 And 節點後連接兩平行活動節點 a 與 b)，因此可得知該 And 節點具有
兩條分流，並將其相鄰關係記錄下來，跳到 Step 5.(a)。 
 
(g) 假如該節點是一合流的 And 節點，從 Cppattern 的 L’’中檢索是否具有分
 66
任務執行。 
(a) 假如該節點為一活動節點，且從未出現在 Cppattern 中，將此節點放入
Cppattern 的 A’ 中，指派此節點為 CNCppattern，跳到 Step 6.。 
 
(b) 假如該節點為一合流的 And 節點，且從未出現在 Cppattern 的 L’中，將
此合流的 And 節點指派為 CNCppattern 並放入 Cppattern 的 L’中，結束目
前的分流，跳到 Step5.(b)。 
 
(c) 假如該節點為一合流的 And 節點，且曾經出現在 Cppattern 的 L’中，將
此 And 節點指派為 CNCppattern，結束目前的分流，跳到 Step 5.(b)。 
 
(d) 假如該節點為一合流的 Or 節點，且從未出現在 Cppattern 的 L’中，將
此合流的 Or 節點指派為 CNCppattern 並放入 Cppattern 的 L’中，結束目前
的分流，跳到 Step 5.(b)。 
 
(e) 假如該節點為一合流的 Or 節點，且曾經出現在 Cppattern 的 L’中，將
此合流的 Or 節點指派為 CNCppattern，結束目前的分流，跳到 Step 5.(b)。 
Step 7.  
(a) 重新檢索 Cppath 上所有 ppattern 其所對應的 G(A’’,S’’,L’’,F’’,E’’)，從 E’’
中利用定義 2.2 的定義可得知該 ppattern 中節點執行的順序，若從該
ppattern 的 E’’中發現其最後的節點必須回到該 ppattern 中之前曾出現過
的節點則將 ppattern 的型態改記錄成 ppatternAC ；若 ppattern 的 L’’中未
出現 And 或 Or 邏輯運算子且從該 ppattern 的 E’’中發現其最後的節點沒
有回到該 ppattern 中之前曾出現過的節點則將 ppattern 的型態改記錄成
ppatternSe；若 ppattern 的 L’’中只具有一 And-split，將 ppattern 的型態
改記錄成 ppatternPS；若 ppattern 的 L’’中只具有一 And-join，將 ppattern
的型態改記錄成 ppatternSy；若 ppattern 的 L’’中同時具有一 And-split 與
一 And-join，將 ppattern 的型態改記錄成 ppatternPSS；若 ppattern 的 L’’
中只具有一 Or-split，將 ppattern 的型態改記錄成 ppatternMC；若 ppattern
的 L’’中同時具有一 Or-split 與一 And-join，將 ppattern 的型態改記錄成
ppatternSM；若 Cppattern 的 L’’中同時具有一 Or-split 與一 Or-join，將
ppattern 的型態改記錄成 ppatternMM，結束 Cppath，跳到 Step 7.(b)。(至
於該邏輯運算子是屬於 split 或是 join 可從定義 2.2 所提之相鄰關係得
知，若同時具有兩個以上的「後續作業」，則該邏輯運算子屬於 split 型
態；若同時具有兩個以上的「前行作業」，則該邏輯運算子屬於 join 型
態，而且在這裡若 L’’中出現 Xor 節點則不管它，因其不影響 ppattern 的
型態)  
 68
發現為一活動節點 “i”，且從未出現在 Cppattern 中，將此節點放入 Cppattern 的
A’ 中，繼續檢索下一節點發現為一 And-join 節點，且從未出現在 Cppattern 的
L’中，將此合流的 And2 節點指派為 CNCppattern 並放入 Cppattern 的 L’中(Step 
6.(b))，從之前該分流邏輯運算子所記錄後續作業的相鄰關係中找到下一條分
流，並將該分流邏輯運算子 And1 重新指派為 CNCppattern，並將下一條分流的第一
個節點指派為 CNCppattern 的下一個節點(Step 5.(b))，檢索 CNCppattern 下一節點發現
為一活動節點 “j”，且從未出現在 Cppattern 中，將此節點放入 Cppattern 的 A’ 
中，繼續檢索下一節點發現為一 And-join(And2)節點，且曾經出現在 Cppattern 的
L’中(Step 6.(c))，無法從 And1 中找到下一條分流，回到 CNCppattern(And2)結束
Cppattern 將其型態先記錄成 ppatternPSS，並將 Cppattern 放入 Cppath 的
PPattern，而且準備一組新 ppattern 所對應的 G(A’’,S’’,F’’,L’’,E’’)來記錄新
ppattern 的節點，並將該新 ppattern 指派為 Cppattern (Step 5.(b))，繼續檢索下
一節點，將活動節點 “k”,“l”放入 Cppattern 的 A’’中，繼續檢索下一節點發覺該
節點為一結束節點 “F”， 將此節點放入 Cppattern 的 F’’ 中，結束 Cppattern 且
將 Cppattern 記錄為 ppatternSe，接著將 Cppattern 放入 Cppath 的 PPattern 中
(Step3.(c)) ， 接 下 來 重 新 檢 索 Cppath 上 所 有 ppattern 其 所 對 應 的
G(A’’,S’’,L’’,F’’,E’’)，並依據 L’’中出現的邏輯運算子重新紀錄該 ppattern 的型態
(Step7.(b))。 
從上述例子可知從 ppath Com1 中可搜尋出三 ppattern，而其在在 BPE 系統中
的 「 Processing Mode Level 」 將 儲 存 成 ppath Com2 ={ppattern Se1 , ppattern PSS2 , 
ppattern Se3 }= ppattern Se1 →ppattern PSS2 →ppattern Se3 。 
3.2.3GAPL-Oriented 流程模型表示法之觀念整合 
在這裡將 BPE 系統內部原有之 G(A,S,F,L,E)資料(本研究歸為「Process 
Primitive Level」)與本研究所發展之 GAPL-Oriented 表示法中的「Business Scenario 
 70
型後，經由 3.2 節所提之轉換及對應方法可以得到兩 PM 所有 ppath 資料，並將
其儲存於本研究所發展 GAPL-Oriented 流程表示法中的「Business Scenarion 
Level」以供進一步的分析如圖 3.10 及圖 3.11 所示。 
 
      Source:本研究提供 
圖 3.9 (a)PM 1  (b)PM 2  
 
 
(a) (b) 
 72
相同的從圖 3.11 中的箭頭處可利用以下步驟取得 PM2 中的所有 ppath: 
 
Step 1. 專案團隊利用現有 BPE 系統繪製 PM2。 
Step 2. BPE 系統會將 PM2=G(A,S,F,L,E)之 
A={a,b,c,d,e,f,g,h,m,n,i,j,k,l} 
S={S}，F={F} 
L={Xor1,Xor2,Xor3,And1,And2,And3,And4} 
E={(S,Xor1),(Xor1,c),(Xor1,b),(c,a),(b,d),(d,Xor2),(Xor2,e),(Xor2,Xor3),(a, 
Xor3),(Xor3,And1),(And1,f),(And1,m)(f,g),(g,n),(n,h),(h,And2),(m,And2),( An
d2,And3),(And3,i),(And3,j),(i,And4),(j,And4),(And4,k),(k,l),(l,F)}等資料儲存
於「Process Primitive Level」中。 
Step 3. 利用 3.2 節所提之轉換方法將 PM2=PPath={ppath WRe1 ,  ppath Com2 ,  
ppath Com3 }找出，並儲存於「Business Scenario Level」。 
Step 4. 同樣利用 3.2.2 節所提之 ppattern 轉換及對應方法將    
ppath WRe1 =PPattern={ppattern Se1 } 
  ppath Com2 =PPattern={ppattern Se1 , ppattern PSS2 , ppattern PSS3 , ppattern Se4 }, 
ppath Com3 =PPattern={ppattern Se1 , ppattern PSS2 , ppattern PSS3 , ppattern Se4 }。 
Step 5. 當專案團隊需要進行 Gap Analysis 時，則從中相對應的 level 中擷取出所
需的資料。 
 
Com
2
WRe
1
Com
3
Source:本研究提供 
圖 3.11 PPath of PM 2  
 74
 
||||
||
21 PP
21
2),( AA
CAPP
+
=SSD
 
其中 
P 1 , P 2 : 指兩 ppath 或兩 ppattern 
A
1P
, A
2P
: 指 P 1 及 P 2 所擁有之活動節點集合 
 A
1P
,  A
2P
 : 指 A
1P
及 A
2P
中之活動節點數目 
CA : 指 P 1 及 P 2 所擁有之相同活動節點集合 
CA : 指 CA 中之活動節點數目 
SSD 值:0≦SSD≦1 
 
在本研究中所定義的情境相似度指標主要是用來判斷兩 ppath 或兩 ppattern
之間的語義或情境相似程度，該 SSD 值將由專案團隊設定，以作為比較之基礎，
假設專案團隊將該值設為 0.8 代表兩 ppath 或兩 ppattern 之情境相似度必須大於
0.8 的門檻以上才有比較的意義，因為 SSD=0 代表兩 ppath 或兩 ppattern 不具有
任何相同的活動節點；0＜SSD＜1 代表兩 ppath 或兩 ppattern 中具有某幾個相同
的活動節點，而其他不同的活動節點可能就是改善的重點，在本研究中將兩要比
較的 PM、ppath 或 ppattern 之間所具有的不同活動差異稱為特殊活動(special 
activities；SA)的差異，但在這裡要注意的是在 PM 中的 SA 與 ppath 中所發現的
SA 和 ppattern 中所發現的 SA 是有差異的，其細節將於 3.3.1 及 3.3.2 中說明；若
SSD=1 代表兩要比較之 ppath 或 ppattern 不管是在活動的數量或者是語意上都相
同，但是從 SSD 無法看出其兩要比較之 ppath 或 ppattern 之間活動執行的順序是
否相同，這是該指標無法提供的資訊，至於如何比較出活動執行的順序其細節將
於 3.3.2 節說明。 
 76
Step 1.  
利用本研究所發展之GAPL-Oriented流程模型表示法可以從BPE資料庫
中  直接 取得 PM1. PPath及 PM2. PPath相關 資料，如 |PM1.PPath| 和
|PM2.PPath|分別代表PM1. PPath所擁有的ppath數量及PM2.PPath所擁
有的ppath數量(Gap 1)，以及PM1和PM2可處理的情境(Gap 2)，並進行分
析可以得知Gap1及Gap2之差異，接下來利用各PM所儲存相對應的
G(A,S,F,L,E)資料進行比較以找出SA的差異(Gap3.1)，其方法為: 
APM 1 - APM 2 =SA PM 1 …(1) 
APM 2 - APM 1 =SA PM 2 …(2) 
其中 APM 1 代表 PM 1 所擁有的活動節點集合，APM 2 代表 PM 2 所擁有的
活動節點集合，SA
 PM 1 代表 PM 1 相對於 PM 2 來說所擁有的特殊活動集
合，SA
 PM 2 則代表 PM 2 相對於 PM 1 來說所擁有的特殊活動集合。 
利用(1)及(2)式可得 SAPM，「SAPM 為 PM 中特殊活動的集合，指的是兩
欲比較之 PM 其中一方擁有另一方所沒有的活動稱之」(在這裡用粗體加
上上標斜體代表為專有名詞，若置於下標中則代表某一 PM 或某一條
ppath 或 ppath 中某一個 ppattern 所擁有的特殊活動集合，如 SA PM 1 代表
PM 1所擁有的特殊活動集合)。 
Step 2. 計算(ppathi , ppathj)的 SSD，where ppathi∈PM1. PPath，ppathj∈PM2 . 
PPath，且 ppathi 與 ppathj 擁有相同情境型態。利用 Step 2.所計算出之
SSD 可以知道在不同 PM 中有哪些(ppathi, ppathj)是具有相同情境型態
且 SSD≥threshold，接下來利用 SSD≥threshold 但小於 1 的(ppathi , ppathj)
所對應的 A’資料可得知 SAppath 之差異(Gap3.2)，「SAppath 為 ppath 中特殊
活動的集合指的是兩欲比較之 ppath 其中一方擁有另一方所沒有的活動
稱之，但是該活動相對於整個 PM 來說可能不是特殊的，只是存在於其
他 ppath 中」，其找尋方法為: 
A’ PM 1 .ppath i -A’ PM 2 .ppath j =SA PM 1 .ppath i …(3) 
 78
表 3-2 兩流程模型於 Business Scenario Level 之差異分析表 
 PM1 (company) PM2 (best practice) 
Gap1 擁有的 ppath 數量 |PM1.PPath|=3 |PM2.PPath|=3 
Gap2 擁有的 ppath 型態 
ReW(1) ReW(1) 
Com(2) Com(2) 
Can(0) Can(0) 
Gap3.1 SAPM 0 {m,n} 
Source:本研究提供 
 
由表 3-2 可知兩 PM 於「Business Scenario Level」Gap1 及 Gap2 並無差異，
同樣具有三條 ppath，而且三條 ppath 所擁有的情境型態都相同，都具有一條具
「重工情境的流程路徑(PM1. ppath WRe1 ；PM2. ppath WRe1 )」，以及兩條具「完成情
境的流程路徑(PM1. ppath Com2 , PM1. ppath Com3 ；PM2. ppath Com2 , PM2. ppath Com3 )」，在
特殊活動方面可以知道 PM2 擁有的活動 m 及 n 是 PM1 所沒有的，繼續下一步驟。 
 
Step 2.  
 
(a) 計算(ppathi , ppathj)的 SSD，where ppathi∈PM1. PPath，ppathj∈PM2 .  
PPath，且 ppathi 與 ppathj 擁有相同情境型態，在計算 SSD 前先將所有
ppath 所擁有的活動節點數以及相同的活動節點數利用之前所提
PM=G(A,S,F,L,E)與 PPath=G(A’,S’,F’,L’,E’) 之對應關係擷取出並整
理如表 3-3 以方便計算表 3-4 的 SSD 值(PS.表 3-3 括弧中的數字為該路
徑所擁有的活動節點數)。 
 
 
 
 
 
 80
大 於 等 於 threshold 但 小 於 1 的 ppath 進 行 比 較 ， 則 可 得 SA
 
PM 1 .ppath 3 ={b,d,f,g,h,i,j,k,l}-{b,d,f,m,g,n,h,i,j,k,l}=0 代表 PM1. ppath Com3 中
的 活 動 都 包 含 在 PM2. ppath Com2 中 繼 續 計 算 SA 
PM 2 .ppath 2 ={b,d,f,m,g,n,h,i,j,k,l} – {b,d,f,g,h,i,j,k,l} ={m,n}，同樣可得 SA 
PM 1 .ppath 2 =0 及 SA PM 2 .ppath 2 ={m,n}，並將結果列於表 3-5 中。 
 
Step 3. 從表 3-5 中可以知道(PM1. ppath WRe1 ,PM2. ppath WRe1 )、(PM1. ppath Com3 ,PM2. 
ppath Com2 )、(PM1. ppath Com2 ,PM2. ppath Com3 )都符合專案團隊所設立的門檻
值，將此三對流程路徑記錄下來利用「Processing Mode Level」進行下一
步的差異分析。 
 
如前所述利用「Business Scenario Level」所提供的 ppath 資訊以及「Process 
Primitive Level」中 ppath 相對應的 G(A’,S’,F’,L’,E’)資訊以及 PM 所對應的
G(A,S,F,L,E)資訊，只能比較出兩 PM 中的「流程路徑數量差異」及「型態差異」
及那些 ppath 是「相似」的以及 SAppath 的差異，再利用專案團隊所設立的門檻值
篩選出需進行進一步分析與比較的流程路徑，這時已經無法再利用「Business 
Scenario Level」中所提供的 ppath 比較出進一步的差異了，接下來將利用
GAPL-Oriented 表示法資料庫中的「Processing Mode Level」從需要進一步分析與
比較的 ppath 中找出其他差異，其細節將於 3.2.2 中說明。 
這裡要注意的是 SAPM 及 SAppath 所代表的改善意涵不同，SAPM 代表的是兩
PM 之間的活動差異，將其找出只是反應給專案團隊此兩活動可能是需要注意
的；SAppath 則代表兩欲比較之 ppath，其中一方想找出與另一方的差異並評估加
入該活動或減少該活動對於此 ppath 是否有幫助，但是該 SAppath 對於整個 PM 來
說並不一定是特殊的，可能存在其他 ppath 中，舉個例子來說，將圖 3.10 PM1. 
ppath Com2 與圖 3.11 中 PM2. ppath Com2 拿來比較，從表 3-2 可知其 SA 2PM ={m,n}，而
A’’PM 1 .ppath 2 ={a’,c’,f’,g’,h’,i’,j’,k’,l’}，A’’PM 2 .ppath 2 ={b’,d’,f’,m’,g’,n’,h’,i’,j’,k’,l’}，
 82
  
Source:本研究提供 
圖 3.13 Gap Analysis of Processing ModeLevel 
 
在介紹「Processing Mode Level」差異分析前先提一「位元比較方法」，該位
元比較方法是設計用來比較出兩 ppattern 之間執行順序的差異，首先從定義 2.2
及 E’’所記錄之相鄰關係及先後作業可知 ppattern 中的分流數以及其併行活動的
狀態，若該 ppattern 為 sequence 或 arbitary cycles 型態則只具有一條分流，比如
說如圖 3.14 中 PM2. ppath Com3 .ppattern PSS2 可知其有兩條分流，而且該 ppattern 中
具有兩活動節點 “i”與 “j”將兩 pattern 所對應的 A’’資料先轉成矩陣的形式，在
這裡先定義一式子(5)如下: 
 
 
 
      
 84
 
(6)-(7)= 





−
−−
cb
bcaa
= 





−
−
cb
bc
….(8) 
 
從(8)式中可得此兩 ppattern 內部活動執行順序差異在於 b 及 c，要注意的是
由於其型態屬於併行的因此只能找出整組區塊的差異，其細節再由人為判斷其差
異，而沒辦法像 sequence 型態直接可找出活動執行順序的差異，這裡舉一例子來
說明循序型態的比較順序方法，若 A’’ Se
kppattern ={a,b,c}(假設其執行順序為 a、b、
c)，A’’ PSS
lppattern ={a,b,c}(假設其執行順序為 b、a、c)，則先將其利用(5)的公式
轉換成適合位元比較的形式，如(9)、(10)式所示: 
 
[A’’ Se
kppattern ]=[a,b,c]……(9)     
[A’’ PSS
lppattern
]=[b,a,c]….(10) 
 
接下來利用(9)-(10)可得[A’’ Se
kppattern ]-  [A’’ PSSlppattern ]=[a-b,b-a,-]，代表
ppattern k 和 ppattern l 之差異在於 “a” 及 “b”兩活動執行順序的差異。 
介紹完位元比較法之後，繼續在「Processing Mode Level」的差異分析，在
取得 PM1 及 PM2 間那些 ppath 組合(假設為 PM1.ppathi 及 PM2.ppathj)須做進一步
「Processing Mode Level」差異分析後，接著就是要找出 PM1.ppathi 及 PM2.ppathj
間各活動執行的順序和方式(如循序或併行)差異，其步驟如下。 
 
 86
 
(iii) 若兩欲比較之 pattern 其 SSD≈1，代表其具有 SAppattern 差異，且其
型態都為 sequence 或 arbitrary cycles 或一為 sequence 另一為
arbitrary cycles，跳到 Step 4.(a)。 
 
(iv) 若 兩 欲 比 較 之 pattern 其 SSD≈1 且 其 型 態 都 為 併 行 的 ( 如
ppatternPSS、ppatternSM…等)，先比較其型態是否完全相同，若型態
完全相同跳到 Step 4.(a)；若其型態不同則可發現 pattern 型態差異
(Gap 5) 並跳到 Step 4.(a)。 
 
(v) 若兩欲比較之 pattern 其 SSD=1 且其型態一為 sequence 或 arbitrary 
cycles 另一為併行的(如 ppatternPSS、ppatternSM…等) 則第一個差異
為 pattern 型態差異(Gap 5)，第二個差異則為利用位元比較法的方
式找出區塊差異，跳到 Step 6.。 
 
(vi) 若兩欲比較之 pattern 其 SSD≈1 且其型態一為 sequence 或 arbitrary 
cycles 另一為併行的(如 ppatternPSS、ppatternSM…等)，則可得第一
個差異為 pattern 型態差異(Gap 4) 並跳到 Step 4.(a) 
 
(c) 一對多，所謂一對多代表 PM1.ppathi. ppatternk 與 PM2.ppathj.PPattern
內一些 ppattern(假設為 ppatternm 及 ppatternn)都具有一些相似度，而且
ppatternk 中的活動是散佈在相對應 PM2.ppathj 的 ppatternm 及 ppatternn
中。將 PM2.ppathj 中的 ppatternm 及 ppatternn 其 SSD 值相加，若超過專
案團隊所設立的 threshold，代表需要做進一步的比較，跳到 Step 4.(b)。 
 
Step 4.  
(a) 利用 patternk 及 patternl 所對應的 A’’ kppattern 及 A’’ lppattern 的資料找
出 SA kppattern 及 SA lppattern ，其方法可從(11)及(12)式得知: 
A’’ kppattern -A’’ lppattern = SA kppattern …(11) 
A’’ lppattern -A’’ kppattern =SA lppattern …(12)  
接下來將 SA kppattern 及 SA lppattern 分別從 PM1.ppathi. ppatternk 及
PM2.ppathj. ppatternl 中移除，跳到 Step 5.。 
 
(b) 先 利 用 ppatternk 所 對 應 的 A’’ kppattern 資 料 與 PM2.ppathj 中
(ppatternm ∪ ppatternn) 所 對 應 的 A’’ nm ppatternppattern ∪ 資 料 可 以 找 出
SAppattern 其作法是利用下面 (13)及 (14)式可分別得到 SA kppattern 及
SA
nm ppatternppattern ∪ : 
 88
Com
2
Com
3
 
Source:本研究提供 
圖 3.14  ppatterns in PM1. ppath Com2 and PM2. ppath Com3  
 
首先從「Business Scenario Level」取得需進一步分析的 ppath 組合(這裡為
PM1. ppath Com2  與 PM2. ppath Com3 )(Step 1.)。接下來利用 ppath 所對應的 G 
(A’,S’,L’,F’,E’)資料利用前述所提轉換方法找出該 ppath 相對應的 ppattern 並儲存
於「Processing Mode Level 中」，在這裡為 PM1. ppath Com2 =G(A’,S’,L’,F’,E’)又
A’={a,c,f,g,h,i,j,k,l} 
S’={S},F’={F} 
L={Xor1,And1,And2} 
E’={(S,Xor1),(Xor1,a),(a,c),(c,f),(f,g),(h,And1),(And1,i),(And1,j),(i,And2),(j,And2),(An
d2,k),(k,l),(l,F)} 
利用上述 G (A’,S’,L’,F’,E’)資料再利用前述所提轉換方法即可得 PM1. 
ppath Com2 ={ppattern Se1 , ppattern PSS2 , ppattern Se3 }= 
 90
 
表 3-7 SSD between PM1. ppath Com2 .PPattern and PM2. ppath Com3 .PPattern 
SSD 
PM2. ppath Com3  
Seppattern1  
PSSppattern2  
PSSppattern3  
Seppattern4  
PM1. 
ppath Com2  
ppattern Se1  0.57 0.85 0 0 
ppattern PSS2  0 0 1 0 
ppattern Se3  0 0 0 1 
Source:本研究提供 
 
從表 3-7 中可以發現 PM1. ppath Com2 .ppattern Se1 與 PM2. ppath Com3 .ppattern Se1 、
PM2. ppath Com3 .ppattern PSS2 其 SSD 值是相近的(屬於一對多的型態， Step 3.(c))，
代表 PM1. ppath Com2 .ppattern Se1 中的活動散佈於 PM2. ppath Com3 .ppattern Se1 、PM2. 
ppath Com3 .ppattern PSS2 中，將 PM1. ppath Com2 .ppattern Se1 與 PM2. ppath Com3 .ppattern Se1 、
PM2. ppath Com3 .ppattern PSS2 之 SSD 值相加為 1.42 大於專案團隊設立的 SSD 值為
0.8，表示需做進一步的活動差異分析，利用 A’’ SeCom ppatternppathPM 121 ..  ={a,c,f,g,h}，同
樣可得 A” SeppatternppathPM 12 .. Com3 ={c,a}與 A” PSSppatternppathPM 22 .. Com3 ={f,m,g,n,h}，利用前
述 所 提 Step4.(b) 得 SA SeCom ppatternppathPM 121 ..  = A’’ SeCom ppatternppathPM 121 ..  - A” 
PSSSe ppatternppathPMppatternppathPM 2212 ....
Com
3
Com
3   
∪  =0，代表 PM1. ppath Com2 .ppattern Se1 內的活動
完全包含於 PM2. ppath Com3 . ppattern Se1 及 PM2. ppath Com3 . ppattern PSS2 中，同樣可得
SA PSSSe ppatternppathPMppatternppathPM 2212 .... Com3Com3   ∪ = A” 
PSSSe ppatternppathPMppatternppathPM 2212 .... Com3Com3   
∪ - A’’ SeCom ppatternppathPM 121 ..  ={m,n}代表 m 及 n 兩
活動節點對於 PM1. ppath Com2 .ppattern Se1 來說屬於特殊活動，這裡要注意的是{m,n}
也屬於 SAppath 及 SAPM，因此此兩特殊活動是屬於要密切注意的活動。 
 92
SAppattern 後兩 ppattern 之差異在於 a 及 c 的活動執行順序差異(Gap 6)。 
接下來繼續從表 3-7 中可發現 PM1. ppath Com2 .ppattern PSS2 與 PM2. ppath Com3 . 
ppattern PSS3 和 PM1. ppath Com2 . ppattern Se3 與 PM2. ppath Com3 . ppattern Se4 都為一個
ppattern 對一個 ppattern 的型態(Step 3.(b))，其 SSD 都為且型態都相同，再從各
自所對應的 A’’資料利用位元比較的方式比對可知其活動執行順序也相同。 
最後可以從表 3-8 中得知 PM1. ppath Com2  與 PM2. ppath Com3 在「Processing 
Mode Level」可處理的差異: 
 
表 3-8 兩流程路徑(PM1. ppath Com2 和 PM2. ppath Com3 )於 Processing Mode Level 之差    
異分析表 
 PM1. ppath Com2  PM2. ppath
Com
3  
Gap 5 執行順序差異 [a’’,c’’]∈ ppattern
Se
1    [c’’,a’’]∈  ppattern Se1 (new) 
Gap4 執行方式差異 
因為 SAPM={m,n}=SAppattern 的關係導致 PM2. 
ppath Com3 . ppattern 2 為 PSS 的型態，將 SAPM 移除後
則會得到新的 ppattern 型態 
Source:本研究提供 
從表 3-8 中可以知道 PM1. ppath Com2 與 PM2. ppath Com3 在「Processing Mode 
Level」可以比較出的差異，分別是執行順序的差異{a,c}及{c,a}以及執行方式的
差異(SAPM={m,n}引起的)，代表兩 PM 中的流程路徑因為特殊活動的差異也改變
了其流程的行為，這是專案團隊必須注意的地方，而上述所舉的例子只為了簡略
說明 3.3.2 所提之差異分析方法，其細節將於第四章中說明。 
從 Processing Mode Level 的差異分析中可以發現，特殊活動(SAppattern)的差
異可能改變流程的行為與結構，但該 SAppattern 相對於另一 PM 來說未必是特殊的
可能存在其他 ppattern，除非與此例相同其 SAppattern=SAPM={m,n}，則專案團隊
必須時時注意其帶來的變化，因為該特殊活動通常為其改善流程增加效率的關
鍵，尤其是屬於 SAPM 的特殊活動。比如說若該特殊活動(SAPM)出現在欲比較之
 94
第四章 實例應用 
在 這 個 章 節 將 舉 一 實 際 例 子 完 整 的 說 明 如 何 利 用 本 研 究 所 發 展 之
GAPL-Oriented 流程表示法中所提具高階語意的「ppath」 及「ppattern」，從兩
欲比較之 PM 中找出除了活動以外的其他差異(包括 ppath 的數量及可處理的情
境差異、ppattern 的型態差異、活動執行順序及方式、SA 的差異..等)，而如前所
述為找出這些差異除了必須利用本研究所發展之 GAPL-Oriented 流程表示法中的
兩個層次「Business Scenario Level」及「Processing Mode Level」中所儲存的 ppath
及 ppattern 相關資訊，還必須藉助本研究歸為「Process Primitive Level」中現行
BPE 系統所儲存之 G(A,S,F,L,E)資料才能找出這些具高階語意的差異。 
4.1 公司流程與最佳實務流程之分析 
如圖 4.1(a)及(b)所示，(a)為公司之生產流程模型，(b)則為最佳實務之生產
流程模型，該公司想參考最佳實務之生產流程模型，找出與公司生產流程模型之
差異，藉由發現這些差異找出流程中可供改善的活動或可消除的活動以增加流程
執行的效率。如前所述由於每家公司的流程模型其對於內部活動的命名皆不同，
但在本研究中不考慮活動名稱語意不一致的情況，因此在這裡所舉最佳實務生產
流程模型的例子將假設其命名標準跟公司一樣，不會有明明指的是相同的活動，
但是一個命名為「訂單輸入」另一個則稱為「輸入訂單」的這種情形產生，以避
免因這類語意不一致的情況而導致分析出的差異不具改善的意義。 
 
 
 
 
 96
接下來將利用前述所提本研究發展之 GAPL-Oriented 流程表示法對公司生
產流程模型作一分析，其作法是利用前述所提轉換及對應方法先將公司生產流程
模型之所有 ppath 找出並將 ppath 儲存於 GAPL-Oriented 流程表示法中的
「Business Scenario Level」，繼續下一步驟則是將該 PM 中所有 ppath 內的
ppattern 搜尋出，同樣的將 ppattern 的資料儲存於本研究所發展之「Processing 
Mode Level」以供進一步的分析，從圖 4.2 中的箭頭處知可利用以下步驟取得「公
司生產流程模型」(在這裡稱為 PM1)中的所有 ppath。 
 
Process Model Representation
GAPL oriented
Processing Mode Level
ppath ={ ppattern  }
=  ppattern1 ppattern2 ...... ppatternn
Business Scenario Level
PM = PPath= { ppath }
Process Primitive Level
PM=G(A,S,L,F,E)
Existing
Process Model Representation
ppath=G(A ,S ,L ,F ,E )
 ppattern =G(A ,S ,L ,F ,E )
Customer
Contact
(b)
Contact
Unsuccessful
(c)
Contact
Successful
(d)
Order
Cancel
(e)
Order
Receive
(f)
Made it self
(g)
Manufacturing
(i)
Manufacturing
Complete
(k)
Outsourcing
(h)
Contact a
factory
Owner
(j)
Inquiry
Price
(l)
Transactions
Successful
(m)
Product
Receive
(n)
Deliver to
Warehouse
(o)
Goods
Transport
(p)
V
Customer
Contact
(b)
Contact
Unsuccessful
(c)
Customer
Contact
(b)
Contact
Successful
(d)
Order
Cancel
(e)
Customer
Contact
(b)
Contact
Successful
(d)
Order
Receive
(f)
Made it self
(g)
Manufacturing
(i)
Manufacturing
Complete
(k)
Outsourcing
(h)
Contact a
factory
Owner
(j)
Inquiry
Price
(l)
Transactions
Successful
(m)
Product
Receive
(n)
Deliver to
Warehouse
(o)
Goods
Transport
(p)
V
PM1. ppath
Can
1 PM1. ppath
WRe
2 PM1. ppath
Com
3PM1
Step 1.
Step 2.
Step 3.
(Xor1)
(Xor2)
(Xor3)
(And1)
V
V
(And2)
Start
(S)
Start
(S)
Start
(S)
Start
(S)
End
(F)
End
(F)
 
Source:本研究提供 
圖 4.2 PPath Analysis of PM1 
 
 98
新產生的 ppath，將其設為 Cppath 而其 CNCppath 則為 Xor2，繼續該分流
的下一節點為 “c”為一流程中斷活動節點，將此節點放入 Cppath 的 A’ 
中，結束 Cppath 並將其 ppath 型態記錄為「ppathCan」，如圖 4.1 的
PM1.ppath Can1 。 
 
(g) 從 PM1 的 PPath 中檢索 Cppath 的下一條 ppath，這裡繼續處理第三條
ppath，將其設為 Cppath 而其 CNCppath 則為 Xor3，將下一活動節點 “e” 
放入 Cppath 中的 A’，繼續檢索下一節點為合流的 Xor1 將被跳過並被放
入 Cppath 的 L’中，而其下一活動節點曾經出現在 Cppath 的 A’中，因
此 結 束 Cppath 並 將 Cppath 記 錄 為 「 ppathReW 」， 如 圖 4.1 中
PM1.ppath WRe2 。 
 
 
(h) 最後可得 PM1=PPath={ ppath Can1 , ppath WRe2 , ppath Com3 }之資訊。 
Step 3. 將 PM1=PPath={ ppath Can1 , ppath WRe2 , ppath Com3 }的資料儲存於本研究所
發 展 之 「 Business Scenario Level 」 中 ， 而 各 ppath 所 對 應 到 的
G(A’,S’,L’,F’,E’)則儲存於「Process Primitive Level」中以供進一步分析。 
 
接下來繼續分析 PM1.PPath 中每一條 ppath，利用前述所提之轉換方法從中
搜尋出所有 ppattern，如圖 4.3 所示: 
 
 
 
 
 100 
ppatternSe，將該 ppath 所擁有的 ppattern 都記錄於「Processing Model 
Level」中的 PPattern 中。 
 
(c) 從「Business Scenario Level」的 PPath 中取出下一條 ppath，這裡取
出 PM1.ppath WRe2 ，將此 ppath 指派為 Cppath，繼續輸入一新的 ppattern
於 Cppath 的 PPattern 中，將此 ppattern 指派為 Cppattern，並將
Cppattern 的開始節點指派為 CNCppattern。 
 
(d) 首 先 如 圖 4.2 所 示 將 PM1.ppath WRe2 中 的 開 始 節 點  “S” 指 派 為
CNCppattern 並將 “S”放入 Cppattern 的 S’’，繼續檢索下一節點，將 Xor1
節點放入 Cppattern 的 L’’中，將 “b”放入 Cppattern 的 A’’中，將 Xor2
節點放入 Cppattern 的 L’’中，將 “d” 放入 Cppattern 的 A’’中，將 Xor3
節點放入 Cppattern 的 L’’中，將 “e” 放入 Cppattern 的 A’’中，繼續檢
索下一節點，遇到 Xor1 節點跳過，接下來發現下一活動節點 “b”曾經
出現在 Cppattern 的 A’’中，結束 Cppattern 並且將 Cppattern 記錄為
ppatternAC，將該 ppath 所擁有的 ppattern 都記錄於「Processing Model 
Level」的{ ppattern}中。 
 
(e) 從「Business Scenario Level」的 PPath 中取出 Cppath 的下一條 ppath，
這裡取出 PM1.ppath Com3 ，同樣的將開始節點 “S”指派為 CNCppattern 並
將  “S”放入 Cppattern 的 S’’中，如前所述將  “b”, “d”, “f” 放入
Cppattern 的 A’’中，將 Xor1，Xor2，Xor3 放入 Cppattern 的 L’’中，接
下來碰到一分流的 And1 節點，結束 Cppattern，將 Cppattern 先記錄
為 ppattern Se ，產生一空集合 G(A’’,S’’,F’’,L’’,E’’)以儲存該新 ppattern
資料，指派新的 ppattern 為 Cppattern，而且將其放入 Cppath 的
PPattern 中，指派分流的 And1 節點為 CNCppattern並將其放入新 ppattern
的 L’’中 ，利用前 述定義 2.2 所提之相鄰關係 找出其 follow-up 
task(And1)={(g,h) ∈ (A,S,F,L)|((And1,g),(And1,h))∈ E}，因此可得知該
And1 節點具有兩條分流，並將其相鄰關係記錄下來，接下來檢索每一
分流上的所有節點，最後得到“g,h,i,j,k,l,m,n”及一合流的 And2 節點將
這些活動節點放入 Cppattern 的 A’’，將合流的 And2 節點放入 Cppattern
的 L’’中，結束 Cppattern，將 Cppattern 紀錄為 ppatternPSS，將 Cppattern
放入 Cppath 的 PPattern 中。 
 
(f) 開始一新的 ppattern，繼續之前的動作將 “O,P,F”放入 Cppattern 的 A’’
中，由於 “F”為一結束節點將 F 放入 Cppattern 的 F’’中，結束 Cppattern
並將 Cppattern 紀錄為 ppatternSe，結束 Cppath。 
 102 
WRe
2
Com
3
Com
4
Can
1
 
Source:本研究提供 
圖 4.4 PPath Analysis of PM2 
 
Step 1. 專案團隊利用現有 BPE 系統繪製「最佳實務生產流程模型」(PM2)，而
BPE 系統會將 PM2 內所有節點及相鄰關係儲存於 BPE 資料庫中之
「Process Primitive Level」。 
Step 2. 接著利用 3.2 節所提轉換及對應方法將 PM2 內所有 ppath 找出。 
(a) 首先，建立一起始流程路徑於該 PM2 的 PPath 中並將此流程路徑指派
為 Cppath， 而且將 PM2 的起始節點「Start」指派為 CNCppath 並將此節
點放入 Cppath 中的 S’，接著檢索 PM2 中 CNCppath 的下一個節點，第一
個合流的 Xor1 節點將被跳過並放入 Cppath 的 L’ 中，而下一活動節點 
“b”將被放入 Cppath 中的 A’，直到遇到第二個分流的 Xor2 節點先將其
放入 Cppath 的 L’ 中，而該 PM2 的第二條 ppath 將會先從 Cppath 複製
出 來 並 將 其 放 入 PPath 中 ， 並 準 備 一 組 新 ppath 所 對 應 的
G(A’,S’,F’,L’,E’)來儲存新 ppath 中的節點，而且將其目前節點設置在此
 104 
放入 Cppath 的 L’ 中，而其下一活動節點曾經出現在 Cppath 的 A’中，
因此 結束 Cppath 並將 Cppath 記錄為「 ppathReW 」， 如圖 4.4 中
PM2.ppath WRe2 。 
 
(h) 從 PM2 的 PPath 檢索 Cppath 的下一條 ppath，這裡繼續處理第四條
ppath，將其設為 Cppath 而其 CNCppath 則為 Xor4，將其下一活動節點 “q”
放入 Cppath 中的 A’，接下來為一分流的 And1 節點，如前所述將此分
流的 And1 節點放入 Cppath 中的 L’，而其之後的平行活動則如前所述藉
由 2.2 所提之相鄰關係可得知其分流數，並檢索所有分流上的節點為“s”, 
“t”並將其放入 Cppath 的 A’ 中，並檢索到一合流的 And2 節點，將 And2
節點放入 Cppath 的 L’ 中，並將 And2 節點指派為 CNCppath。 
 
(i) 檢索 CNCppath 的下一節點，將其後的活動節點 “p”也放入 Cppath 的 A’ 
中，由於下一節點為結束節點 “F”將此節點放入 Cppath 的 F’ 中，結束
Cppath 並 將 其 ppath 型 態 記 錄 為 「 ppathCom 」， 如 圖 4.4 中 的
PM2.ppath Com4 。 
 
(j) 最後可得 PM2=PPath={ ppath Can1 , ppath WRe2 , ppath Com3 , ppath Com4 }。 
Step 3. 將 PM2=PPath={ppath Can1 , ppath WRe2 , ppath Com3 , ppath Com4 }的資料儲存於
本研究所發展之「Business Scenario Level」中，而各 ppath 所對應到的
G(A’,S’,L’,F’,E’)則儲存於「Process Primitive Level」中以供進一步分析。 
 
接下來繼續分析 PM1.PPath 中每一條 ppath，利用前述所提之轉換方法從中
搜尋出所有 ppattern，如圖 4.5 及 4.6 所示: 
 
 106 
 
搜尋 ppattern 的方法可依下列步驟取得: 
Step 1.  
(a) 開始且從 PM2的 PPath 中擷取一 ppath。PPath 的 input 同時來自 Business 
Scenario Level 以 及 Process Primitive Level ， 在 這 裡 先 擷 取
PM2.ppath Can1 ， 將 此 ppath 指 派 為 Cppath ， 同 時 產 生 一 空 集 合
G(A’’,S’’,F’’,L’’,E’’)以儲存該 ppattern 資料，將此新 ppattern 指派為
Cppattern，並將 Cppattern 的開始節點指派為 CNCppattern。 
 
(b) 首先如圖 4.5 所示將 PM2.ppath Can1 中的開始節點 “S”指派為 CNCppattern
並將 “S”放入 Cppattern 的 S’，繼續檢索下一節點，將 Xor1 節點放入
Cppattern 的 L’’中，將 “b”放入 Cppattern 的 A’’中，將 Xor2 節點放入
Cppattern 的 L’’中，接下來檢索到一流程中斷活動節點 “c”， 將 “c”放
入 Cppattern 的 A’’中，結束 Cppattern 並且先將 Cppattern 記錄為
ppatternSe，將該 Cppath 所擁有的 ppattern 都記錄於「Processing Model 
Level」中的 PPattern 中，如圖 4.5 PM2.ppath Can1 .ppattern Se1 。 
 
(c) 從「Business Scenario Level」PM2 的 PPath 中取出下一條 ppath，這裡
取出 PM2.ppath WRe2 ，將此 ppath 指派為 Cppath，繼續輸入一新的 ppattern
於 Cppath 的 PPattern，同時產生一空集合 G(A’’,S’’,F’’,L’’,E’’)以儲存
該 ppattern 資料，將此新 ppattern 指派為 Cppattern，並將 Cppattern 的
開始節點指派為 CNCppattern。 
 
(d) 首先如圖 4.5 所示將 PM2.ppath WRe2 中的開始節點 “S”指派為 CNCppattern
並將 “S”放入 Cppattern 的 S’’，繼續檢索下一節點，將 Xor1 節點放入
Cppattern 的 L’’中，將 “b”放入 Cppattern 的 A’’中，將 Xor2 節點放入
Cppattern 的 L’’中，同樣的將 “d” 放入 Cppattern 的 A’’中，將 Xor3 節
點放入 Cppattern 的 L’’中，同樣的將“e” 放入 Cppattern 的 A’’中，遇到
Xor1 節點跳過繼續檢索下一節點，發現該活動節點 “b”曾經出現在
Cppattern 的 A’’中，結束 Cppattern 並且將 Cppattern 記錄為 ppatternAC，
將該 ppath 所擁有的 ppattern 都記錄於「Processing Model Level」中的
PPattern 中，如圖 4.5 中的 PM2.ppath WRe2 .ppattern AC1 。 
 
(e) 從「Business Scenario Level」PM2 的 PPath 中取出 Cppath 的下一條
ppath，如圖 4.6 所示這裡取出 PM2.ppath Com3 ，同樣的將開始節點 “S”
指派為 CNCppattern 並將 “S”放入 Cppattern 的 S’’中，如前所述將 “b”, “d”, 
“f” ,“r”放入 Cppattern的 A’’中，並將 Xor1，Xor2，Xor3，Xor4放入 Cppattern
 108 
並重新紀錄所有 ppattern 之型態於「Processing Mode Level」中。 
Step 2.  
(a) 由 Step 1. 所 找 出 的 ppattern 相 關 資 料 可 儲 存 如 下 ，
PM2.ppath Can1 ={ppattern Se1 }= ppattern Se1 ，PM2.ppath WRe2 ={ppattern AC1 }= 
ppattern AC1 ，PM2.ppath Com3 ={ ppattern Se1 , ppattern MM2 , ppattern Se3 }= 
ppattern Se1 →ppattern
MM
2 →ppattern
Se
3 ， PM2.ppath Com4 ={ ppattern Se1 , 
ppattern PSS2 , ppattern
Se
3 }= ppattern Se1 →ppattern PSS2 →ppattern Se3 。 
 
(b) 在這裡會將所有 ppattern 相關資料儲存於「Processing Mode Level」中，
而各 ppattern 所對應到的 G(A’’,S’’,L’’,F’’,E’’)資料則儲存於「Process 
Primitive Level」中。 
 
利用本研究所發展之支援 GAPL 的流程表示法完成 PM1 及 PM2 之所有分析
後，接下來將利用前述所提之 GAPL 方法找出 PM1 及 PM2 之差異，其細節將於
4.2 節中介紹。 
4.2 流程邏輯差異分析方法之應用 
如前所述當兩欲比較之 PM1 及 PM2 都繪製於現有 BPE 系統中並完成所有分
析後，即可利用以下所提之步驟一步一步找出兩 PM 於「Business Scenario Level」
之差異，如下: 
 
Step 1. 利用本研究所發展之 GAPL-Oriented 流程表示法可以從 BPE 資料庫中 
的「Business Scenario Level」及「Process Primitive Level」直接取得 PM1. 
PPath 及 PM2. PPath 相關資料，並進行分析可以得知 Gap1 及 Gap2 之
差異，接下來利用前述所提計算 SAPM 的式子計算 SAPM，首先由 PM1
及 PM2 所 對 應 的 A 資 料 可 得 SA 
PM 1 ={b,c,d,e,f,g,h,i,j,k,l,m,n,o,p}-{b,c,d,e,f,q,r,m,g,n,h,i,j,k,l,s,t,o,p}=0 代表
PM1 的 活 動 都 包 含 於 PM2 中 ， 繼 續 計 算 SA 
PM 2 ={b,c,d,e,f,q,r,m,g,n,h,i,j,k,l,s,t,o,p}-{b,c,d,e,f,g,h,i,j,k,l,m,n,o,p}={q,r,s,t}
 110
表 4-2 兩 PM 中所有路徑各自擁有的活動節點數及具相同的活動節點數 
相同活動 
節點數 
PM2.ppath Can1  
 (2) 
PM2.ppath WRe2  
(3) 
PM2. ppath Com3  
(14) 
PM2.ppath Com4  
(7) 
PM1.ppath Can1  
(2) 2 - - - 
PM1.ppath WRe2  
(3) - 3 - - 
PM1. ppath Com3  
(13) - - 13 4 
Source:本研究提供 
 
表 4-3 SSD of (PM1. ppathi , PM2.ppathj) 
SSD PM2.ppath Can1  PM2.ppath WRe2  PM2. ppath
Com
3  PM2.ppath
Com
4  
PM1.ppath Can1  1|2||2|
|2|2
=
+
 
- - - 
PM1.ppath WRe2  - 1|3||3|
|3|2
=
+
 
- - 
PM1. ppath Com3  - - 96.0|13||14|
|13|2
=
+
 4.0|13||7|
|4|2
=
+
 
Source:本研究提供 
 
表 4-4 PM1 及 PM2 於 Business Scenario Level 之差異分析表(續) 
 
大於等於 threshold
的 ppath 
(PM1.ppath Can1 , PM2.ppath Can1 )(SSD=1) 
(PM1.ppath WRe2 , PM2.ppath WRe2 )(SSD=1) 
(PM1. ppath Com3 , PM2. ppath Com3 )(SSD=0.96) 
Gap3.2 SAppath SAPM 1 .ppath 3 =0                SAPM 2 .ppath 3 =r 
Source:本研究提供 
 
Step 3. 假設專案團隊設立的 SSD 門檻值為 0.8，代表兩具相同型態的 ppath 其
SSD 必須大於等於 0.8 才具有比較的必要，若低於專案團隊所設立的門
檻值，代表雖然兩 ppath 具有相同的型態，但達成同樣目的的活動卻不
夠多如 (PM1. ppath Com3 , PM2.ppath Com4 )，其 SSD 值只有 0.4，因為
PM2.ppath Com4 這條 ppath 是專門設計給最佳實務生產流程模型的，其採
 112
 PM2.ppath Com3 ={ ppattern Se1 , ppattern MM2 , ppattern Se3 }= 
ppattern Se1 →ppattern
MM
2 →ppattern
Se
3  
接下來先將各 ppath 中所有 ppattern 擁有的活動節點數及相同的活動節點數
整理於表 4-5 中，以方便計算表 4-6 中所有 ppattern 的 SSD 值。 
 
表 4-5 Activities number between corresponding ppattern 
相同活動節點數 
PM2. 
ppath Can1  
PM2. 
ppath WRe2  
PM2. 
ppath Com3  
ppattern Se1  
(2) 
ppattern AC1  
 (3) 
ppattern Se1  
(4) 
ppattern MM2  
(8) 
ppattern Se3  
(2) 
PM1.ppath Can1  
ppattern Se1  
(2) 
2 - - - - 
PM1.ppath WRe2  
ppattern AC1  
(3) 
- 3 - - - 
PM1.ppath Com3  
ppattern Se1  
(3) 
- - 3 0 0 
ppattern PSS2  
(8) 
- - 0 8 0 
ppattern Se3  
(2) 
- - 0 0 2 
Source:本研究提供 
 
 
 
 
 
 
 
 
 
 
 114
資料為 A’’={b,c}，先比較其 ppattern 型態為相同的(sequence)，接著利用位
元比較法比對，將此兩 ppattern 所對應到的[A’’]資料相減為[b,c]-[b,c]=0，
代 表 不 具 有 執 行 順序 的 差 異 。 最 後 可知 PM1.ppath Can1 . ppattern Se1 與
PM2.ppath Can1 . ppattern Se1 完全沒有差異，不管是在 ppattern 的型態上或是所
擁有的活動、甚至活動的執行順序都相同。 
(b) 接著繼續進行分析發現 PM1.ppath WRe2 . ppattern AC1 其所對應的活動節點資料
為 A”={b,d,e}又 PM2.ppath WRe2 . ppattern AC1 其所對應的活動節點資料為
A”={b,d,e}同樣的也是先比較 ppattern 型態，都為 arbitrary cycles 型態，接
著利用位元比較法比對，同樣發現兩 ppattern 其內部活動執行順序及執行方
式完全相同。 
(c) 繼續進行分析發現 PM1.ppath Com3 .ppattern PSS2 其所對應的活動節點資料為
A”={g,h,i,j,k,l,m,n}又 PM2.ppath Com3 .ppattern MM2 其所對應的活動節點資料為
A”={g,h,i,j,k,l,m,n}，首先比較兩 ppattern 的型態發覺一個是具有 PSS 型態
的 ppattern，另一個則是具有 MM 型態的 ppattern，由於此兩型態都屬於併
行的方式所以在這裡可以得到前述所提 Gap 4 的差異(執行方式差異)(請參
考 3.2.2 節)。接下來將 PM1.ppath Com3 . ppattern PSS2 所對應的 A’’資料與
PM2.ppath Com3 . ppattern MM2 所對應的 A’’資料先轉換成適合位元比較法的形
式，接下來利用位元比較法比較: 
[A’’ PSSppattern 2 ]= 




nmljh
kig
.(4.1)   
[A’’ MMppattern 2 ]= 




nmljh
kig
.(4.2) 
(4.1)-(4.2)= 





−−−−−
−−−
nnmmlljjhh
kkiigg
=0 
利用位元比較法比對發現其結果為 0，代表兩 ppattern 在活動執行順序上沒
有差異。 
 116
Com
3
Se
1
Com
3
Se
1
 
Source:本研究提供 
圖 4.7 Remove SA from PM1.ppath Com3 . ppattern Se1  and PM2.ppath Com3 . ppattern Se1  
 
(f) 將移除 SAppattern 之後的活動節點資料利用位元比較法比對，分別為[A’’
 
PM 1 .ppath 3 .ppattern 1 ]=[b,d,f] ， [A’’ PM 2 .ppath 3 .ppattern 1  (new)]=[b,d,f] 則 [A’’ 
PM 1 .ppath 3 .ppattern 1 ]- [A’’ PM 2 .ppath 3 .ppattern 1 ](new)=0，代表因為特殊活動才造成兩
ppattern 的差異。 
 
最後從表 4-7 中則可得知 PM1.ppath Com3 與 PM2.ppath Com3 在「Processing Mode 
Level」可處理的差異: 
 
 118
表 4-8 PM 1 與 PM 2 之總差異表 
Business Scenario Level PM1  PM2  
Gap1 擁有的ppath 數量 |PM1. PPath|=3 |PM2. PPath|=4 
Gap2 擁有的ppath 型態 
ReW(1) ReW(1) 
Com(1) Com(2) 
Can(1) Can(1) 
Gap3.1 SAPM 0 
{q,s,t}∈  PM2.ppath Com4  
{r}∈  PM2.ppath Com3  
Gap3.2 SAppath SAPM 1 .ppath 3  =0                SAPM 2 .ppath 3 =r 
大於等於 threshold 的 ppath (PM1.ppath Can1 , PM2.ppath Can1 )(SSD=1) 
(PM1.ppath WRe2 , PM2.ppath WRe2 )(SSD=1) 
(PM1. ppath Com3 , PM2. ppath Com3 )(SSD=0.96) 
Processing Mode Level PM1. ppath Com3  PM2. ppath
Com
3  
Gap 4 具有型態差異的ppattern 
ppattern PSS2         ppattern
MM
2  
Gap 5 執行順序差異 將特殊活動 r 移除後將不具有執行順序差異 
Source:本研究提供 
 
從表 4-8 中可知 PM1 及 PM2 具有 ppath 數量的差異，首先|PM1. PPath|=3
代表 PM1 擁有 3 條 ppath 且從 Gap2 可知 PM1 可以處理三種不同的情境，分別是
ReW 的 情 境 (PM1.ppath WRe2 ) 、 Com 的 情 境 (PM1.ppath Com3 ) 、 Can 的 情 境
(PM1.ppath Can1 )，而 PM2 也一樣可處理三種不同的情境，分別是 ReW 的情境
(PM2.ppath WRe2 )、Com 的情境 (PM2.ppath Com3 , PM2.ppath Com4 )、 Can 的情境
(PM2.ppath Can1 )，主要差異在於 PM2 具有兩條 Com 情境的 ppath，在特殊活動方
面可以知道 PM2 擁有的的活動{q,r,s,t}是 PM1 所沒有的，而且因為{q,s,t}∈  
PM2.ppath Com4 但是在 PM1 中並沒有與其對應的 ppath，因為 PM2.ppath Com4 這條
ppath 是專門設計給最佳實務生產流程模型的，其採取「存貨生產方式」供應，
而此方式是目前 PM1 未採用的。 
 120 
第五章 系統整合 
本章選擇一商用 BPE 系統 ARIS Toolset 做為流程塑模工具，並試圖將所發
展之 GAPL-Oriented 流程表示法整合其中，發展一雛型系統。ARIS Toolset 係一
綜合性企業流程塑模及分析系統，它從功能觀點、資料觀點、組織觀點、及流程
觀點等提供了多種的塑模方法。此外，它提供了 ARIS API 的功能，以利使用者
能順利從 ARIS Toolset 之資料庫中擷取到流程模型的資料。 
本系統是以 C++ 程式語言透過 ARIS API 函式的呼叫，以擷取 ARIST 
Toolset 中流程模型的資料，並加以分析。 
圖 5.1 及 5.2 是以 ARIS Toolset 對兩「採購訂單處理」流程塑模，接著系統
會透過 ARIS API 將此二流程模型之資料讀入，並分析其 PPath 及 PPattern，如圖
5.3 所示；再透過 PPath 相似度分析（如圖 5.4 所示），找到語意相似之 PPath 做
進一步的邏輯差異分析；圖 5.5 即三組 PPath 之處理順序的差異分析及比較。 
 122 
Enter import
data
Enter
account
assignment
category
Enter
purchasing
document type
Check
whether
items are to
be changed
Enter partner
roles
Enter item
category
Enter
process
account
assignment data
Enter
material
group and
description
Edit texts
Determine
release
strategy
Enter vendor
Process
conditions
Enter GR/IR
control
Enter
delivery
schedule
Send
purchasing
document
Choose item
data
Enter
confirmation
Enter item
and
additional
data
Enter header
data
Check budget
availability
Enter
receiving
plant
Enter material
Start
End
 
圖 5.2 The “Purchase order processing” flowchart for consumable material 
 124 
 
圖 5.4 The SSDs of the PPath pairs 
 126 
 
 
 
圖 5.5(續) Processing sequence comparison for PPath pair 
 
 
 
 
 
(c) 
 128 
6.2 未來研究方向 
1.由於目前 BPE 系統都採用 G(V,E)的資料結構來儲存企業流程模型相關資
訊，使得現有 BPE 系統幾乎沒有辦法提供企業流程模型的邏輯差異分析能力。
所以首先希望將本研究所提之 GAPL-Oriented 流程表示法及 GAPL 方法普遍地結
合至現有現有 BPE 系統之流程塑模及資料儲存基礎中，以補強其對企業流程模
型整體流程邏輯差異分析能力，使得現有 BPE 系統所能從事之企業流程分析項
目更加完善，而且藉由電腦的運算能力可以解決目前人工判別流程差異這類無效
率的問題。 
2.目前的 BPE 系統其塑模方式多為一個物件接一個節點在接一個物件這種
個別的塑模方式，若能引進本研究所發展 GAPL-Oriented 表示法的概念，提供一
個整體情境的塑模方式，像是直接提供整條 ppath 或整塊 ppattern 的塑模方法如
同 CAD 系統中 Boundary Representations(B-Rep)產 品 表 示 法 的 概 念 ， 則
不 僅 可 以 提 高 流 程 塑 模 的 效 率 ， 對 於 執 行 GAPL 的 工 作 來 說 也 更 為 方
便 。  
3.在 本 研 究 中 對 於 在 ppath 中 ppattern 的 表 達 方 式 是 考 慮 一 個
ppattern 接 著 一 個 ppattern 的 方 式 (圖 3.4(c))， 而 未 考 慮 ppattern 之 分
流 內 還 具 有 ppattern 的 形 式 (圖 6.1)，若 考 慮 此 種 較 複 雜 的 形 式， 則 需
以 G(PPattern,E)的 方 式，將 ppattern 儲 存 於「 Processing Mode Level」
中 以 解 決 此 問 題 。  
 
 
 130 
參考文獻 
中文文獻 
1. 王志明，1996，「企業流程改造」類比思考支援工具：BASS，國立台灣工業
技術學院管理技術研究所資訊管理學程碩士論文。 
2. 王貳瑞，2001，「流程管理」，華泰文化事業股份有限公司。 
3. 吳仁和、辛信興，2003，「ERP套裝軟體功能與企業需求差異之研究」，中
國工業工程學會九十二年度年會暨學術研討會大會手冊及論文摘要，頁：35。 
4. 李志偉，2004，「以 Petri Nets 為基礎的網路服務組合前置驗證及簡化方
法」，碩士論文，中原大學資訊管理研究所。 
5. 邱世彬，2002，「UML 與 Petri-net 為基礎之多位代理人供應鏈模型分析」，
碩士論文，高雄科技大學運輸與倉儲營運研究所。 
6. 耿伯文、黃怡瑾，1997，電腦科技對企業作業流程與組織績效的影響之研究，
第二屆資訊科技與社會轉型研討會論文。 
7. 張緯良、陳育亮，2002，「ERP 成敗關頁鍵－企業流程再造」，＜資訊與電
腦＞， 頁:14-17。 
8. 陳俊源，2001，「以本體論為基礎之企業流程分析方法論」，碩士論文，國
立清華大學工業工程所。 
9. 黃崇洋，1999，「產品開發模式之建立與分析」，碩士論文，國立中山大學機
械工程研究所。 
10. 詹瑜蕙，1999，「企業流程改造」，＜品質管制月刋＞，頁：60-65。 
碩士論文，國立高雄第一科技大學運輸與倉儲營運所。 
11. 管康彥，1996,「超越顛峰的管理」，＜標竿管理—向企業典範借鏡序文＞，
天下出板社。 
 132 
9. Burlton, R.T. (2001) Business Process Management: Profiting from Process, 
SAMS. 
10. Camp, R.C. (1989). Benchmarking: The Search for Industry Best Practices that 
Lead to Superior Performance, Milwaukee , Wisconsin :American Society 
forQuality Control(ASQC). 
11. Davenport, T.H. (1993). Process Innovation: Reengineering work through 
information technology, Harvard Business School Press. 
12. Davenport, T.H. (1998). Putting the enterprise into the enterprise system. Harvard 
Business Review, July–August, pp.121–131. 
13. Davenport, T.H., and Short, J. (1990). The New Industrial Engineering: 
Information Technology and Business Process Redesign. Sloan Management 
Review, Vol. 32, pp.11-27. 
14. Davis, T.R.V. (1993). Reengineering in Action. Planning Review, July/August, pp. 
49-54. 
15. Earl, M. (1989). Management strategies for information technology, Prentice–Hall, 
New York. 
16. Earl, M.J. (1994).The New and Old of Business Process Redesign. Journal of 
Information System, Vol.3, No.1, pp.5-22. 
17. Finnign, J.P. (1996).The Manager’s Guide to Benchmarking : Essential Skills for 
the New Competitive-Cooperative Economy, San Francisco : Jossey-Bass 
Publisher. 
18. Fisher, J.G. (1996).How to Improve Performance Through Benchmarking, 
London :Clays Ltd. 
19. Furey, T.R. (1993). A Six-step Guide to Process Reengineering, Planning Rev 
March/April:20–23. 
 134 
30. Kellner, M. (1989). Software process modeling: Value and experience, SEI 
Technical Review. 
31. Kirchmer, M. (1999). Business Process Oriented Implementation of Standard 
Software: How to Achieve Competitive Advantage Efficiently and Effectively 
(Berlin: Springer). 
32. Kirchmer, M. (1999). Business Process Oriented Implementation of Standard 
Software: How to Achieve Competitive Advantage Efficiently and Effectively, 
Springer, Berlin Heidelberg New York 
33. Knolmayer, G. and Endl, R. and Pfahrer, M. Guidelines for Business Process 
Modeling. In W. van der Aalst et al. (2000) Business Process Management: 
Models, Techniques, and Empirical Studies, Lecture Notes in Computer Science 
1806, 16-29. Springer-Verlag, Berlin. 
34. Mati, G. and Avigdor, G. (2005).Flexible Business Process Management Using 
Forward Stepping and Alternative Paths, Springer, Israel Institute of Technology. 
35. Mortenson, M. E. (1985). Geometric Modeling (New York: John Wiley and Sons). 
36. Murata, T. (1989). Petri Nets: Properties, Analysis and Application, Proceeding of 
IEEE, Vol.77, No.4, pp.541-580. 
37. Mittelstaedt, R.E. (1992). Benchmarking: How to Learn from Best-In-Class 
Practices.National Productivity Review, pp.301-315. 
38. MeMo, R., Wong, K. T., and Flores, P. (1993).Action Workflow as the Enterprise 
Integration Technology.IEEE Computer Society, p.49-52. 
39. Mayer, R. J., Painter, M. K. and Dewitte, P. S. (1994). IDEF family of methods for 
concurrent engineering and business reengineering applications. Knowledge Based 
Systems, College Station, TX. 
40. Porter, M. E. and Millar V. E. (1985). How information gives you competitive 
 136 
54. van der Aalst, W.M.P. and Berens, P.J.S. (2001) Beyond Workflow Management: 
Product-Driven Case Handling. In S. Ellis, et al., editors, International ACM 
SIGGROUP Conference on Supporting Group Work (GROUP 2001), 42-51. 
ACM Press, New York. 
55. van der Aalst, W.M.P. and ter Hofstede, A. H. M., and Weske, M. (2003) Business 
process management: a survey. Proceedings of the International Conference on 
Business Process Management: On the Application of Formal Methods to 
Process-Aware Information Systems (BPM 2003), pp.1-12. 
56. van der Aalst, W.M.P., Hofstede, Arthur. H. M. ter., Kiepuszewski, Bartek, Barros, 
Alistair, P. ( 2003) Workflow Patterns, Distributed and Parallel Databases Vol. 14, 
No. 1, pp.5-51. 
57. van der Aalst, W.M.P. and ter Hofstede, A.H.M. and Mathias Weske. (2003) 
Business Process Management：A Survey, Springer-Verlag Berlin Heidelberg, 
pp.1-12. 
58. Watson, G.H. (1992) The Benchmarking Workbook: Adapting Best    Practices 
for Performance Improvement (Oregon: Productivity). 
59. Watson, G.H. (1993) Strategic Benchmarking, Chichester :John Willey and Sons.  
60. Whitten, J.L. and Bentley, L.D. and Dittman, K.C. (2002)  Systems Analysis and 
Design Methods, Irwin/McGraw-Hill, NY. 
61. Winchester and Hampshire. (1999) The Workflow Management Coalition 
Terminology and Glossary. 
62. Winograd, T.,and Flores, R. (1987) Understanding computers and 
cognition.Reading,MA:Addison-Wesley. 
63. Workflow management coalition (1995) The workflow reference 
model(wfmc-tc-1003). 
 138 
可供推廣之研發成果資料表 
□ 可申請專利  □ 可技術移轉                               日期：96 年 7 月 31 日 
國科會補助計畫 
計畫名稱：發展一適用於企業流程結構分析之企業流程表示法及企
業流程工程系統(2/2) 
計畫主持人： 阮業春        
計畫編號： NSC 95-2221-E-211-026 學門領域：工業工程與管理 
技術/創作名稱 適用於企業流程結構分析之企業流程表示法 
發明人/創作人 阮業春 
技術說明 
中文：本研究發展了一適合的企業流程表示法，並將之整合至現有
的 BPE 系統中，以協助專案團隊利用 BPE 系統進行企業的 GAPL。
首先，本研究發展出一個適合 GAPL 的高階企業流程表示法；接
著，以該表示法為基礎的結構分析與比較方法被提出；最後，本研
究將所提之表示法及分析方法，整合至現有的 BPE 系統中。 
英 文 ： This research developed a suitable business process 
representation and integrate it into existing BPE systems to assist 
project teams in the GAPL. First, a high-level business process 
representation suitable for GAPL is developed. Then, based on the 
proposed business process representation, the method for the structural 
analysis and comparison of business processes is proposed. Finally, this 
research integrated the proposed representation and analytical method 
into the existing BPE systems. 
可利用之產業 
及 
可開發之產品 
企業流程工程軟體業之企業流程塑模及分析系統 
技術特點 
1. BPE 系統中流程模型資料擷取方法。 
2. 解析企業流程低階資料以取得高階流程結構元件之方法。 
3. BPE 系統中高階企業流程表示法之建構方法。 
4. BPE 系統之流程表示法建構模組之開發。 
5. BPE 系統之流程結構分析模組之開發。 
推廣及運用的價值 
無論是公司、ERP 業者、或管理顧問公司，都已建置了許多的企業
流程模型，但如前所述，ERP 大廠 SAP 的參考模型中就有高達 170
個主要的流程物件和 800 個流程模型，這樣複雜的企業流程模型若
是透過人工比對來找出其間差異，則是非常沒有效率且沒有效果
的。本研究所發展整合於現有 BPE 系統中之適用於企業流程模型
結構分析的企業流程表示法，及以此表示法為基礎之企業流程模型
