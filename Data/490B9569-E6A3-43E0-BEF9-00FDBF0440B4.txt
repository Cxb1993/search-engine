 2
行政院國家科學委員會專題研究計畫成果報告 
 
  整合無線網路、行動代理人與網格之無線校園網格系統 
之研製(I)  
Design and Implementation of a Mobile Campus Grid System that Integrates 
a Wireless System and a Mobile Agent System on Grid (I) 
計畫編號：NSC 95－2221－E－029－016－ 
執行期限：九十五年八月一日至九十六年七月三十一日 
主持人：呂芳懌  副教授  東海大學資訊工程與科學系 
計畫參與人員：王泰翔 胡凱崴 李志揚  李國財 
  東海大學資訊工程與科學系 
 
 
Abstract 
Recently, Grid computing infrastructures are quickly growing up, but most of them connect nodes with 
hard-wired links. Seldom adopt wireless technology and mobile devices. However, if we can integrate a Grid 
system with wireless network devices, techniques and resources to form a wireless accessible infrastructure which 
provides different kinds of terminal devices, Grid will soon be popularly and widely deployed in different domains 
and applications to serve people in the world. This occurrence will make Grid become much more practical and 
useful. In this article, we propose a Grid-based system, named Wireless Grid-based mobile agent system (WGMAS) 
which integrates mobile agents and wireless user environment with a Grid system, to provides a wireless accessible 
mobile agent system. 
Keywords: Grid, mobile agent, communication, session initiation protocol (SIP) 
 
1. Introduction 
Recently, many commercial and industry wireless communication standards have been 
developed. By the transmission distance and application domain, they can be classified into 
several types, including: Wireless Wide Area Network (WWAN), Wireless Metro Area Network 
(WMAN), Wireless Local Area Network (WLAN) and Wireless Personal Area Network 
(WPAN), among which WLANs have been widely built around us. Users worldwide can access 
the Internet through them. This occurrence provides us with a convenient network environment 
to enrich our daily life. 
Besides, Grid computing infrastructures are quickly growing up, but most of them are used 
in scientific computing or to provide huge storage to their users only, not very helpful to 
 4
communication stability.  
Srinivasan [2] proposed a new suppose: Wireless devices were primary integration devices. 
All peripherals could use short distance wireless communication (e.g., Bluetooth, Ultra Wide 
Band (UWB), Zigbee) to form a PLAN to share resources, such as monitor, disk, or input 
devices. However, the UWB is still in draft and Bluetooth is widespread but too slow to transfer 
huge amount of information.  
MEFS [3] proposed Chasing Message Register and Over-speed Agent Waiting mechanism. 
A message was considered as a chasing message after C times of failed delivery. While the 
migration frequency of an agent was over the threshold V, it stoped moving and checked if any 
chasing message was stored in the Chasing Message Register.  Some problems on the other 
hand were raised, e.g. the configuration of system parameter V. 
Resending-based protocol [4] was another reliable communication by using sliding-window 
for error control. When some messages were lost, S resent them. After several trails, S requested 
the receiver’s new location from the server and sent message again. However, there was no 
upper limit of resending times. For frequently migrating agents, this protocol suffered from 
communication overhead. 
Voyager [5] and Epidaure [6] raised a forwarding-pointer protocol on agent’s migration path. 
Each time before moving to the next node N, agent A left a forwarding pointer pointing to N on 
the node it currently resided. Messages were sent to the agent homeserver H which forwarded 
them along A’s migration path based on the forwarding pointers. However, this approach could 
not solve the message chasing problem when the receiver changed its location very frequently. 
Other schemes such as Mailbox-based scheme [7], ARP [8], forwarding-based MAS [5-8], 
resending-based approaches [3, 4], and some earlier systems proposed by AgentTcl [9] and 
Odyssey [10], all had their own drawbacks to be solved. 
3. System Architecture 
In this article, we propose a Wireless Grid System, named Wireless Grid-based Mobile 
Agent System (WGMAS) which is a hard-wired Grid integrated with wireless network and a 
Session Initiate Protocol based (SIP-based) communication mechanism to establish a wireless 
Grid environment. Users can access Grid resources through wired and/or wireless networks. Fig. 
1 illustrates the WGMAS architecture in which Grid Mobile Agent Proxy (GMAP) is the 
management center taking charge of agent login, registration, dispatch, and recall. STUN 
(Simple Traversal of UDP through NATs), as a NAT Traversal solution of SIP, makes packets 
routable when users are now inside a Network Address Translation (NAT) environment. 
Sendbox, as a storage subsystem of WGMAS, stores messages Ms that are unable to be safely 
delivered to their destinations, and forwards Ms when receivers are ready. It can be used to 
solve the message chasing problem. 
Users can establish a wired or wireless connection and register their SIP to GMAP through 
Grid Mobile Agent (GMA) which is an MA implemented on Grid. After that, they can check 
 6
commanding GMAs, e.g., order a GMA to access some types of documents or stop accessing 
when an error occurs. 
3.2. GMAP Database 
The GMAP database is to save GMA’s information, such as: GMA’s SIP, status (online or 
offline), location (staying at some IP address or moving), port number (must be provided while 
the device is under a NAT environment), registration time, device type (laptop, personal digital 
assist, smart phone, etc). The database like others also provides query interface so that users can 
conveniently access the contents. 
3.3. Sendbox 
A Grid node is equipped with a sendbox to store messages Ms to be re-sent. Accompanied 
with M should be sender’s SIP, receiver’s SIP, Time Of Arrival (TOA), Current Life Time 
(CLT), Max Life Time (MLT), message priority, and contents. If CLT reaches the MLT set by 
the sender or system administrator, Sendbox Monitor (SM), a rule-based sub-system that 
manage sandbox, will detect M to avoid “Sendbox fully filled” caused by receiver being offline 
for a long time. “If the free space is less than 30%, SM will delete the oldest message first based 
on the CLT field, otherwise, delete the messages of which CLT > 3hr.” is an example of rules. 
3.4. Wired/Wireless Connectivity 
To achieve a high usability of GMAP and the goal of pervasive computing, both of GMAP’s 
wired and wireless connections must be reliably maintained. We propose an architecture that 
uses Grid nodes as local gateways to improve network connectivity and hence accessibility. 
3.4.1. Wireless Connection. We connect those wireless APs with no routing function to their 
nearby Grid nodes (GNs), which provide the DHCP (Dynamic Host Configuration Protocol) 
service through direct wired links. Using this type of APs, we can not only significantly reduce 
system construction cost, but also effectively manage multiple APs’ IP assignment without 
modifying their firm wares. The resource usage of a Grid node can be markedly maximized as 
well. 
3.4.2. Wired Connection. Similar to wireless connection, when a user U connects his/her 
terminal T to the Internet by directly wiring T to a switch or hub, T will then receives a 
temporary IP from DHCP server so as to communicate with others.  
3.5. Traversal through NAT 
WGMAS uses the STUN [11] protocol to make packets “routable” especially when they are 
tunneled by an NAT. The process is as follows. GMA A inside a NAT sends a query packet P to 
the STUN server which is outside the NAT to retrieve the “source port #” in P. The server 
replies with the port number N to A, which will send N to GMA B. Thus, with N GMA B can 
directly communicate with A as in a normal situation. 
 8
URI is the host that GMA currently resides. 
            Fig. 3 Agent State Diagram             
4.3. Agent States 
An agent has three states, as shown in Fig. 3. Normally an agent is in the active state, in 
which it may perform its requested operation or be free to migrate to any other host. When an 
active agent attempts to send requests to or receives requests from server or agent, it switches to 
the waiting state to continue its communication session. After sending or receiving responses, it 
switches from waiting to active. As sending a unregister request to and acknowledged from 
GMAP, agent turns into moving state. After reaching a node, and registering to GMAP again, it 
switches state from moving to active. 
In addition, we have to set a feasible threshold for the waiting limit of the waiting-state agent 
in order to avoid indefinite postponement which occurs when a message can not arrive at its 
destination on time due to some possible failures encountered in the lower layer transmission 
during a communication. We redo the previous action if the waiting timer expires. Other state 
transitions are described in the following sections. 
4.4. Distributed Sendbox Scheme 
In the distributed sendbox scheme, if recipient agent is staying on a node, the sendbox could 
send messages to it directly, Direct mode so-called. Otherwise, Forward mode is used. 
4.4.1. Direct Mode. As illustrated in Fig. 4, sender S staying at Grid node X, and receiver R, 
residing at Grid node Y, has registered to GMAP. Each of S and R is in either active or waiting 
state. With a desire to send a message to R, S first initiates an Invite request to GMAP for 
inquiring R’s location.  
After checking R’s current state and location, GMAP replies with R’s SIP URI and sends a 
Notify request to R asking R waiting for messages. Now the two interested agents reach their 
synchronization.  Later, S sends a message directly to R with the informed address and waits 
for the response. After R receives the message and delivers an OK response to S, the 
communication resumes to its original situation, i.e, both S and R switch to their Active state. 
Once receiving a Notify request, R stays and waits until the message arrives. This occurrence 
Active WaitingMoving
Unregister
Register Send/Get Response
Send/Get Request
Request:
1. Invite
2. Subscribe
3. Message
4. Notify
Response:
1. Moved-Temporarily
2. Temporarily Unavaliable
3. OK
 10
5.1. Instant Query Service (IQS) 
IQS is the basic user service mode of this system. Wanting to query Grid node status or 
request services, a user dispatches a GMA to the node first. WGMAS sends the results to user 
devices also through a GMA. IQS is implemented by direct mode. However, if the user device is 
offline suddenly, the direct mode fails. The system will buffer the remaining messages and 
switch to SNS mode automatically. 
5.2. Subscription and Notify Service (SNS) 
Traditionally, if a network disconnection happens during a browsing/querying session, users 
must start a new session to get the result. Besides, it is inconveniently for a user to periodically 
or frequently self-browse a system to access new information (e.g., checking a node status) 
and/or new resources (e.g., searching a new article). In WGMAS, a mobile user U can subscribe 
his/her required information Inf. All the following operations, including subscription, 
notification, and communication, are performed by GMAs. Users only need to select their 
service type, service provider, and subscription period (e.g., from time 1 to time 2). GMAs first 
search the provider automatically, collect Inf newly updated or published, send Inf with 
messages to the Sendbox, and splash a screen/message on devices when U is still online. After 
sending a subscription, U may move or go offline immediately. GMAs perform the same 
operations but notify U with a short message service instead of splashing screen. When U goes 
online again, two GMAs will be generated. One notifies the sendbox to resend Inf. The other 
receives Inf and shows it on device screen. Then, U will never lose his/her desired information 
even U is busy, moving or the receiving devices are temporality offline. 
6. Experiments 
In the following, we analyze the two communication mode and present their communication 
times. WGMAS prototype and our communication protocol are developed with Java. The 
test-bed of the WGMAS system are implemented with: 1. our campus LAN and 5 Grid nodes as 
the mobile agent network; 2. 100MBit/s Ethernet adaptors to interconnect Grid nodes, 802.11g 
54Mbps WLAN AP to serve the wireless network connection; 3. IBM R40 laptop as the mobile 
device; 4. agent size=20 Kb; 5. the size of SRM  = 10 KB. 
R roams in the WGMAS network, visiting nodes randomly, staying at a node for a given time 
stayT , and then migrating to other node. S sends SRM  to R periodically, once every msgI  time 
interval.  
Some experiments concerning the communication time are performed. The results are shown 
in Fig. 6 and Fig. 7. The communication time of direct mode varies from 14~41ms, while the 
communication time of forward mode ranges from 49~133ms, as we can see, in the forward 
mode, the sendbox spends more time for buffering and sending messages. 
 
 12
[4]  M. Ranganathan, M. Beddnarek and D. Montgomery, “A Reliable Message Delivery 
Protocol for Mobile Agents,” In Proc. of the Joint International Symposium 
ASA/MA’2000. 
[5]  ObjectSpace Inc., “Objectspace voyager”, http://www.objectspace.com/voyager, 1997. 
[6]  J. Desbiens, M. Lavoie and F. Renaud, “Communication and Tracking Infrastructure of a 
Mobile Agent System,” In Proc. of the International Conference on System Science, vol.7, 
1998, pp.54-63. 
[7]  X.Y. Feng, J.N. Cao, et al., “An Efficient Mailbox-Based Algorithm for Message Delivery 
in Mobile Agent Systems,”G. P. Picco (Ed.), Mobile Agents, LNCS 2240, Spintger-Verlag, 
2001, pp. 135-151. 
[8]  J.N. Cao, X.Y. Feng, et al., “Design of Adaptive and Reliable Mobile Agent 
Communication Protocols,” In Proc. of International Conference on Distributed Computing 
Systems, 2002, pp.471-472. 
[9]  R.S. Gray, G. Cybenko, D. Kotz, and D. Rus, “Agent Tcl. In Itinerant Agents: 
Explanations and Examples with CDROM.” Manning, 1996. 
[10]  General Magic Inc., “Introduction to the Odyssey”, http://www.genmagic.com/agents, 
1997. 
[11]  Internet Engineering Task Force (IETF), “RFC 3489 (STUN: Simple Traversal of UDP 
through NATs)”, 2003, http://www.faqs.org/rfcs/rfc3489.html. 
[12]  Internet Engineering Task Force (IETF),”RFC3261 (SIP: Session Initiation Protocol),” 
1999, http://www.cs.columbia.edu/sip/drafts.html 
[13]  3GPP TS 23.002: "Network architecture" (Release 5), v.6.1.0, 2003, 
http://www.3gpp.org/ftp/Specs/html-info/23002.htm 
[14]  C.W. Thompson, “Agents, Grids and Middleware,” IEEE Internet Computing, Sep./Oct. 
2004, pp.97-99. 
 
7 月 13 日 7:45 到會場聆聽由 IBM 歐洲資深 e-government 顧問 Mr. Soren Duus 
Questergaard 主講之 Keynote speech，題目是 From e-Government to e-Society –Challenges 
and Opportunities。 
9:30-12:00 則必須單獨主持一個 session，主題是 Computing/Information Systems and 
Technologies，並於期間發表一篇論文，題目是 A Real-Time Intrusion Detection System 
Using Data Mining Technique，報告完後，提問者依然踴躍，討論狀況也非常熱烈，不過
因準備充分皆一一仔細回答之。 
7 月 14 與 15 日也都是 7:45 到會場吃早餐與聆聽各場論文之發表。7 月 15 日下午
16:00 是頒獎典禮，個人獲頒該 session 最佳論文獎。會議結束也結束了個人在佛羅里達
兩篇論文之發表，離去前大夥兒相約明年在同一地點再見。次日離開佛羅里達轉往紐約
搭機返國。 
 
二、與會心得 
7 月 10 日之 keynote speaker Dr. Dale 對未來之 learning process 有一些悲觀，他認為
再過去二十年當中，因為技術上一直沒有重大突破，雖如此，但他認為技術仍需不斷創
新與進步，方能推動 learning process 之進展，會議中並不斷強調 learning 之各項意義與功
能。 
7 月 10 日報告完論文後，會場上所提出之問題大部分都是 GRID 相關知識，其中
一位更提到他們也在使用 GRID，但限於使用而不是研究如何運用與改善其功能，其他
者對 data base 之 cost model 亦有諸多問題，只是問題之深度不太深，因而答案皆能為大
夥兒所接受。最後因時間到了，不得不由我宣布散會，大家才往餐廳移動前去吃晚餐。 
7 月 13 日的 keynote speaker Mr. Soren 提出近年來各國從事 E-government 之評分，
亞洲國家中我們和南韓連續幾年皆在全世界排名前三名，讓在會場上的我和鄰座之南韓
弘益大學教授李斗馥皆感到與有榮焉，會場上我提出一問題，那就是雖然 e-government
程度高，但我國民卻感受不到政府執政或執行效率變高變好，其優點只是民眾變方便罷
了，而我們的國民所得金額卻未因此而獲益，該金額進展很慢。他的答案是 e-government
會改變社會大眾之習性與降低社會成本，讓民眾有更多的時間去做其他的事，以增加國
民之生產力，而國民生產毛額雖和 e-government 有關，但是該金額尚涉及許多複雜之金
融政策、投資市場與人力素質，當然和國家之對內對外貿易之榮景也有重大影響，他說
大陸現在是世界工廠與市場，台灣和大陸同文同種應有許多機會才是，他又特別強調政
治之穩定性對投資也有許多影響，Soren 特別強調南韓在 e-government 和其國民生產毛額
才是一個正常的現象。聽完後，我好像被打了一記悶棍，心中久久不能釋懷。 
given, the corresponding transmission time can be 
then obtained. We analyze its probability density 
function and expected value of this environment to 
estimate its transmission cost. 
However, in the following we use data fragments 
instead of databases as the representative example 
and assume the database has been properly 
partitioned. In fact, a fragment can be viewed as a 
small database. The second assumption is that a task 
accesses exact one fragment. This implies the way to 
partition a job. 
The rest of this article is organized as follows. 
Section 2 introduces background of this paper. 
Section 3 analyzes the proposed model. Section 4 
concludes this article and addresses our future work. 
2. Background and Related Work 
2.1. Cost Model 
 
The cost functions of cluster and distributed 
database system [1] are similar. Their total cost 
( TOC ) can be defined 
as
i k j
i jk
t Q N N F F
TOC TPC DSC
∀ ∈ ∀ ∈ ∀ ∈
= +∑ ∑ ∑  
where 1 2{ , ,... }nN N N N=  and 
1 2( , ,... }mF F F F=  respectively represent the sets 
of given cluster nodes and data fragments, 
jkDSC cost of storing fragment jF  at node kN . 
iTPC task it ’s processing cost 
and 1 2{ , ,... }pQ Q Q Q= is the set of tasks 
decomposed from the job submitted. jkDSC  can be 
represented as jk k jDSC USC F= ∗ where kUSC  is 
the unit storage cost at kN and | |jF is the size of 
fragment jF  . Nodes are homogenous. So the kUSC  
for all k are equal. Thus 
k j
jk
N N F F
DSC
∀ ∈ ∀ ∈
∑ ∑  is a 
constant, no matter where| |jF is stored, j=1,2,3,…m. 
iTPC contains processing cost ( )iPC  and 
transmission cost ( )iTC (assume 
that it accesses | |jF at kN ) , i.e., 
i jk jkTPC PC TC= +  
where iPC  comprises access cost ( )jkAC , 
integrity enforcement cost ( )jkIEC  and 
concurrency control cost ( )jkCCC . We also assume 
that in N the algorithms and execution strategies of 
( )jkIEC  and ( )jkCCC  are themselves the same, 
i.e., tanjkIEC cons t= , tanjkCCC cons t= , for all j, 
no matter where | |jF is stored. In a retrieval-only 
environment, 0jk jkIEC CCC= =  for all i. 
'*i k jAC UAC F=  where 'jF  is the subfragment 
retrieved by it at kN , and kUAC is the unit access 
cost at kN , tankUAC cons d= , for all k. So the 
total access cost 
i
i
t Q
TAC AC
∀ ∈
= ∑  is a constant since 
'
k
i
N N
F
∀ ∈
∑  is also a constant, no matter 
where| |jF and it are allocated. Thus we can conclude 
that the dominant factor of iTPC is iTC . This is 
why only transmission cost is addressed in this paper. 
In detail, transmission cost is generated by 
database update and retrieval. The latter transmits 
data to the node the concerned task it is executed. The 
former retrieves 'jF  and sends the updated 
'
jF  
back, i.e.,  
, '
, '
i i
i
i i
TCU for t s update
TC
TCR for t s retrieval
⎧= ⎨⎩
 
In this study, only iTCR  is addressed. Furthermore, 
i ii C D
TCR TCR TCR= +  
where 
iCTCR and iDTCR  are the costs of 
transmitting commands and data respectively. 
Usually, 
iCTCR  is relatively smaller than iDTCR , so 
3.1. Analytical Procedure 
 
The transmission cost models are analyzed with 
the following steps. 
Step1 Fragment allocation: Determine the possibility 
of allocating m fragments to n nodes 
constrained on one-node one-fragment and 
random allocations. 
Step2 Task allocation: Determine the possibility of 
allocating q tasks to n nodes constrained on 
one-node one-task and random allocations. 
Step3 Local access: Decide the possibility that 
fragment F is accessed by a local task t, i.e., 
initially t and F are allocated to the same node.  
Step4 Remote access: Decide the possibility that 
fragment F is accessed by a remote task t. 
Step5 Expected value calculation: Calculate the 
expected value of the transmission cost. 
 
3.2. Fragment Allocation – Step1 
 
Allocating fragments to nodes needs to consider 
two-fold, quantity of fragment that a node can hold 
and fragment allocation strategy. The former can be 
one-node one-fragment (ONOF), i.e., one node can 
store at most one fragment (i.e., r fragments, 
,r N∈ 1r ≤ ) at all time, and one-node 
multiple-fragment (ONMF), i.e., 2r ≥ . The latter 
(i.e., fragment allocation strategy) can be analyzed 
under different situations, including random, 
k-random or contiguous. Random means that m 
fragments are randomly allocated to k nodes which 
are selected from n nodes. Continuous means m 
fragments are allocated to k consecutive nodes (e.g., 
1 1{ , ,... }i i i kD D D+ + − ), in which no node are 
allocated no fragments. Hence, it should be m≧k. 
k-random is a mixed environment of the previous two 
in which m fragments are randomly allocated to k 
consecutive nodes within which several nodes may 
have more than one fragment, whereas others have no 
fragment. In fact, continuous is a special case of 
k-random which in turn is a special case of random. 
Also, for simplicity only random fragment allocation 
strategy is addressed in this paper. 
Under one-node one-fragment environment, it 
should be that n k m≥ ≥ , otherwise, some nodes 
will hold more than one fragment, contradicting the 
assumption. Under this environment, there are 
( )n n km k mP P P= i  choices. 
 
3.3. Task Allocation – Step2 
 
Similarly, allocation of tasks to nodes needs to 
consider quantity of tasks that a node can hold and 
task allocation strategy. The former can be one-node 
one-task, i.e., one node can process at most one task 
(i.e., r tasks, , 2)r N r∈ <  at all time, or one-node 
multiple-task, i.e., 2r ≥ . Like fragment allocation, 
the latter can be random, k-random or contiguous. k 
represents the number of nodes to be allocated tasks. 
However, also for simplicity, only one-node one-task 
and random task allocations are addressed in this 
study. 
Under one-node one-task environment, it should 
be that q k≤ (recall, q is the number of tasks), 
otherwise, some nodes should process more than one 
task simultaneously. Under this environment, there 
are ( )n n kq k qP P P= ⋅  choices. 
 
3.4. Local and Remote Accesses – Step3 & Step4 
 
Now, we analyze the probability that a task 
accesses local and remote fragments. Let 
1 2
is a node allocated at least one 
, ,...,
frgament, 1
j
s
N
NG N N N
j s m
⎧ ⎫⎪ ⎪= ⎨ ⎬≤ ≤ ≤⎪ ⎪⎩ ⎭
                                                
( )
'
1 2
'
''
0
''
0
( ... ) ( 1)
1       1 *( )!
( )!
i uc
r w
i uc
ju ju x ju
TG
t
i u t t t t
t
TG
t
x c
t TIC Y T TIC
D N a a a S
T n i t
n i
=
= ∀ ∈ ∀ ∈
= = −
⎛ ⎞⎛ ⎞⎛ ⎞⎜ ⎟⎜ ⎟⎜ ⎟= − − −⎜ ⎟⎜ ⎟⎜ ⎟− ⎝ ⎠⎝ ⎠⎝ ⎠
∑
∑ ∑ ∏
 
Therefore, the general formula of allocating i tasks to 
n nodes for some ci  is 
( * )
c c r
i u ic c
i i u i u
TIG Y
Q L D
∀ ∈
= ∑                                          
'0
c
c
i
i TG
Q Q
≤ ≤
= ∑                                                       
 
3.5. Probability density function and expected 
Value – Step5 
 
Let ( )cLAP i  (Local Access Probability) be the 
probability of exact ci  LATs and exact ri RATs in q 
tasks. Let α  represent “the probable ways of 
allocating exact ci  tasks” and β  “the probable 
ways of allocating q tasks”. Then ( )cLAP i  will be 
3* 4( ) =
2c
Step StepLAP i
Step
α
β= =
ci
n
q
Q
P
  
Actually, the total transmission cost is generated 
from ri  tasks. Let utu  ( ut  is a RAT) be a decision 
variable. 
1,
0,u
u
t
if task t remotely retrieves its fragment
u
otherwise
⎧= ⎨⎩
 
Therefore, the formula estimating the expected value 
EV of RATs is  
1 0 1
1( ( )* *(1 ( ))* )*  
n
m c
u u
c
P q iq
t t c n
ms i u
EV size D u LAP i UTC
P
−
= = =
= −∑∑∑
 
where 
utD  is the data retrieved by ut and UTC is 
unit of transmission cost. Figure 1 shows the 
comparison of  ( )cLAP i in the environments of 
one-node one-task with and without global directory. 
      
Figure 1. LAP(ic) in the environments of one-node 
one-task with and without global directory 
 
4. Conclusion and Future work 
 
Efficiently accessing data from distributed 
systems is one of the objectives of database research. 
How to correctly allocate data fragments and tasks to 
nodes of a cluster system is still in its research stage. 
In this article, we discuss the transmission cost of a 
read-only cluster database system, like human DNA 
sequence database, particularly when global directory 
is unavailable. We analyze one-node one-fragment, 
one-node one-task and random allocation model and 
derive its probability density function and expected 
value. Java-based environment is used to simulate 
cluster database and the model. The result of 
environments with and without global directory is 
compared. 
In the future, we would like to deal with more 
arguments, e.g., establishing a one-node multi-task 
model, and allowing a task to write and to access 
more than one fragment, and derive their 
transmission costs and access cost /performance 
models. 
 
Reference 
[1] M.T. Özsu and P. Valduriez, Principles of 
Distributed Database Systems, 2nd. Ed. Englwood 
Cliffs, N.J.：Prentice-Hall Inc., 1999. 
[2] National Center for Biotechnology Information. 
http://www.ncbi.nlm.nih.gov/ 
[3] X.M. Lin, M.E. Orlowska, and Y. C. Zhang, 
“Database placement in communication networks 
A Real-Time Intrusion Detection and Identification System on 
Command-Line-Interface Computers using Data Mining and Forensic 
Techniques in an Intranet 
Fang-Yie Leu and Kai-Wei Hu 
Department of Computer Science and Information Engineering, Tunghai University, Taiwan 
leufy@thu.edu.tw 
ABSTRACT 
Presently, most computers authenticate user ID and 
password before users can login these systems. However, 
danger soon comes if the two items are known to hackers. 
In this paper, we propose a system, named Intrusion 
Detection and Identification System (IDIS), which builds a 
profile for each user in an intranet to keep track his/her 
usage habits as forensic features with which IDIS can 
identify who the underlying user in the intranet is. Our 
experimental results show that the recognition accuracy of 
students of computer science department is up to 98.99%. 
Keywords:  Forensic Features, Data Mining, 
Identifying Users 
1. INTERODUCTION 
Most current computers check UID and password as an 
authentication. But hackers may install Trojans to pilfer 
victims' security patterns before they can “legally” login a 
system. Most current host-based security systems can find 
out an intrusion from a user’s logged history afterward. 
Most network-based system can detect an intrusion online 
[1-3]. However, to identify who the attacker is real-time is 
difficult since attack packets are often issued with forged 
IPs. 
  In this paper, we propose a security system, named 
Intrusion Detection and Identification System (IDIS), 
which mines log data to identify commands and their 
sequences (together named command sequences), that a 
user is used to submit and follow respectively as the user’s 
forensic features. When an unknown user logins a computer, 
IDIS starts monitoring the user’s input commands to detect 
whether he/she is issuing an attack. 
The rest of this article is organized as follows. Section 2 
describes the framework and details of IDIS. Experimental 
results are shown in section 3. Section 4 concludes this 
paper and addresses our future work.  
 
System kernel
Honey pot
Detection 
server
Mining 
server
User 1 User 2 User n...
User 
profile
User  
log file
Intelligent monitor
 
Fig. 1 The IDIS system architecture 
m atched
Sy stem  call filte r
S ensitive  call tab le
N
Y
Inpu t in te rcep te r
U ser
S ystem  k ernel
R eceiv ing  
user inpu t
In terrup t 
se rv ice  
ro u tine
S ystem  call 
In te lligen t m on ito r
com m and S h ell
 
Fig. 2 Control flow of intelligent monitor on intercepting 
user inputs 
2. SYSTEM FRAMWORK 
The IDIS framework, as shown in Fig.1, consists of 
intelligent monitor, detection server and mining server. 
Intelligent monitor collects input commands from 
underlying user and transfers the command sequences to 
detection server which compares these commands with 
attack patterns real-time to discover attacks. In IDIS, attack 
patterns are represented by a reverse tree, a tree of which 
commands are organized in the reverse order of their 
arrival from the root. If matched, detection server notifies 
intelligent monitor to disconnect the session established for 
the user. Mining server analyzes log data with data mining 
techniques to identify user habits. The IDIS can 
discriminate who a underlying user is in a concerned 
intranet by comparing the user’s current inputs with all 
others’ habits.  
 
common sequence appears, the higher probability the 
sequence is the user’s habit. After the habit file is 
constructed, each time when the user logins and logouts 
later, algorithm 1 will be invoked under the situation that 
current session is treated as a L-window and log file 
sessions are processed by C-window to generate new habits 
and to increase habit counts. 
Furthermore, we can apply algorithm 1 to known attackers’ 
log files to extract their usage habits as attack patterns. 
 
Create User Profiles 
A user’s profile is a habit file, but each habit is ended by a 
discrimination score instead of appearance frequency. Let 
DScij be the discrimination score of command sequence j, a 
usage habit, submitted by a user i. 
1
0
ij
ij n
tj
t
H
D Sc
H
−
=
=
∑
  ……Eq. (1) 
Where n is the number of users in the intranet concerned, 
and Hij is command sequence j’s appearance frequency in 
user i's habit file. ijDSc  is a floating number ranging from 0 
to 1 for all i and j. A user’s habitual command sequence, 
that rarely appears or has not appeared in others’ habit files, 
will obtain a high score. Those given low scores are 
commonly used command sequences. 
 
Similarity Scores 
We deploy Eq. (2), which is frequently used to assign a 
weight to a term in information retrieval domain, to 
calculate a weight for a command sequence. Given a set of 
user habit files D = {UP1, UP2, …, UPN} where N is the 
number of users in an intranet. Let T = {CS1, CS2 …, 
CSMi} be the set of the sequences retrieved from D where 
Mi is the number of sequences. The weight Wij of CSi in 
UPj is defined as where sfij is appearance frequency of CSi 
in UPj, nsj total number of sequences in UPj, AVG(ns) the 
average number of C-sequences a UP has, and 
log((N+0.5)/Mi)/log(N+1) is the ICPF (inverse 
characteristics profile frequency) [7]. Given an unknown 
user x’s current input commands CMDs (1≦x≦N), the 
similarity score between CMDs and UPj  
is defined as 
1
p
xj ij
i
SimS W
=
= ∑  where p is the number of 
sequences appearing in both of CMDs and UPj.  
Ranking   Profile      Similarity score 
Rank 0   sXX2845.pro 1267.878 
Rank 1   sXX2816.pro 1256.459 
Rank 2   sXX2819.pro 940.535 
...                   … 
Rank 174   sXX2852.pro 0.0 
a total of 655 user profiles, @ rank 2, decisive rate: 
99.695%, cost 1906ms 
Fig. 4 The identification of user x given sXX2819’s input 
commands as an unknown user’s current inputs. x is ranked 
the second. 
Fig. 4 lists experimental results given a user x 
(=sXX2819)’s input commands as an unknown user’s 
current inputs. The higher a similarity score, the higher 
probability x is the user who submits these input 
commands.  
 
Detection Server 
As stated above, attackers' common behaviors are 
represented by a reverse tree, named common reverse tree. 
Fig. 6 gives an example. Nodes of the first level are last 
commands of attackers' common behaviors. Monitored 
command list consists of all commands of the first levels of 
the common reverse tree. Assume that user has entered m 
commands {C1, C2,…Cm} after his/her login where Ci is 
submitted prior to Ci+1, i = 1, 2, … , m-1. To detect 
intrusion on-line, the underlying input command Ci, 1≦i≦
m, is compared with monitored command list first. If 
matched, a modified deep-first search traversal algorithm 
will start traversing the sub-tree of the common reverse tree 
which is rooted at Ci to see whether the user’s inputs, Cj 
to Ci-1, j = 1, 2,….or i-2, in the reverse order of their 
arrival can finally reach a leaf node or not.  
In this algorithm, when one input command Cj matches 
node Nk, a node at level k, in the common reverse tree, and 
Cj-q, q = 1, 2, …, or j-1, with the smallest q (if there are 
several such Cj-q) also matches one of Nk’s immediate child 
nodes, e.g., Nk+1, then let Cj = Cj-q and try to find another 
Cj-q that matches one of Nk+1’s immediate child nodes. Each 
time when no such Cj-q can lead the algorithm to arrive at a 
leaf, the algorithm backtracks to the last second matched 
node and tries to find Cj-q’ that matches Nk’s another 
immediate child where Cj-q’ locates between C1 and Cj-q 
(since on last match on Nk, the smallest q is chosen as the 
next command that matches Nk+1, therefore, it should be 
that q’≧q), and q’ is the smallest integer if several q’s 
exist. When one is found  (at level k+1), the algorithm 
looks for a matched node at level k+2. The procedure 
repeats until no such Cj-q can match Nk’s immediate child 
or the algorithm reaches a leaf node. The latter is 
considered as an attack. Detection server replies
cat cat ls cd ls AC9 
cat cat ls ls AC3 
cat cd cd AC2 
cd vi AC6 
ls cd quota AC1 
ls clear ls w AC8 
… 
Fig. 7 User habits, each line is ended by a single command 
attack pattern 
From 459 user log files, we extracted 76,341 commands, 
from which 1423 attack patterns were extracted. Let a = b = 
15 and a sliding window of size ten is used to mix an attack 
pattern and legal commands. Table 1 shows the mixed 
patterns and the detection results. The field “ID of an 
inserted pattern (inserted location)” lists IDs of single 
command attack patterns followed by their locations. They 
are generated by the following procedure. Given an attack 
pattern (C1, C2, … , Cx), which were mixed with 10-x 
consuetude log file commands R={ C’q-(10-x), C’q-(10-x)+1,…, 
C’q-1} in the underlying session by randomly inserting Ci, i 
= 1, 2, 3, …x-1, to any position among the elements of R 
under the constraint that Cx is located at C’q position and Ci 
should be prior to Ci+1 where Ci is ith command of the 
pattern. After insertion, Ci might be adjacent to Ci+1 or 
separated by several commands, and now the location of Cx 
became q+x-1. For example, #793(11) in the first record of 
Table 1 represents that the last command of attack pattern 
#793 (cd cd ls AC2), x=|#793| = 4, is inserted into the 8th 
(i.e., qth) position of log 01982. Original C’8 becomes C’9. 
Commands cd, cd and ls are mixed with those in { C’2, 
C’3, … , C’7 }. After that, Cx becomes the 11th command.  
Table 1 Patterns obtained by mixing log contents with 
single command attack pattern and the detection results 
 Mixed patterns Detected attack patterns
User 
log file 
No. of  
inserted 
patterns 
ID of an 
inserted 
pattern 
(inserted 
location) 
No. of 
detected 
patterns 
ID of a detected 
pattern (detected 
location) 
log019
82 
2 #632(4), 
#793(11) 
2 #2000(4), 
#1657(11) 
log028
64 
19 #7(5), 
#1603(12), …
19 #1(5), #100(12), 
#2670(20),… 
log028
71 
9 #1515(6), 
#1845(15), …
9 #1991(6), 
#2106(15), … 
… … … … … 
Nevertheless, the commands coming from both of #793 and 
R individually follow their original submitted sequence.  
The field “ID of a detected pattern (detected location)” 
represents the ID of a detected pattern followed by a 
detected location which is the position of the pattern’s last 
command. For example, #1657(11) in the first record 
shows that attack pattern #1657 (ls AC2), ended at position 
11 of log01982, is detected. Basically, a shorter pattern may 
be contained in a longer one. Hence, the ID of a detected 
pattern may be different from that of the inserted since 
#1657 is a proper subset of #793. From Table 1, we can 
conclude that the number of patterns inserted is equal to 
that of discovered, i.e., precision = recall = 100%. The 
detection process costs 348 ms. 
Detection of Multi-stage Attack Pattern 
A log file consisting of multi-stage attack patterns. Each 
line has several stages. Each stage in turn is a user habit 
ended by a single command attack pattern. For detecting 
multi-stage attack patterns, again, let a = b = 15 given 
nineteen stages, S1 to S10, from which 58 different attack 
commands are retrieved, i.e., 
19
1
| { | , }| 58r r r i
i
C C is a command C S
=
∈ =∪  where 
{ | , }p p p iC C is a command C S∈ ∩
{ | , }q q q jC C is a command C S φ∈ = , i, j = 1, 2, …9, 
and i ≠ j. That means, S1 to S10 are 
non-cross-reference patterns so that all the 
IDs of detected patterns are exact the same 
as those of the inserted ones. The common 
reverse tree is six levels in height, and 
76,341 commands extracted from 459 user 
log files were compared, costing 210 ms. 
Also, the precision = recall = 1. 
 
4. CONCLUSIONS 
In this article, we bring up an approach to find out users' 
habits by deploying data mining and forensic techniques. 
To identify the representative C-sequences for a user, the 
frequency that a habitual command sequence appears in the 
user’s log file is counted and its discrimination score is 
calculated so that the user’s profile can be established. By 
comparing a user's current input commands with all others’ 
profiles, the IDIS can identify who the user is. The accuracy 
is high enough to make the IDIS be a valuable auxiliary 
subsystem in a closed environment to assist the 
identification of an internal hacker. Of course, a new user 
whose user profile has not been established will not be a 
candidate to be identified. Meanwhile, a user’s input 
commands are compared with the common reverse tree in 
which all commands of an attack pattern are organized in 
their reverse order so as to real time detect whether 
underlying inputs are an attack or not. Employing the 
common reverse tree can lightweight IDIS and lower the 
load of detection server. 
Moreover, accurately and completely collecting user 
behaviors on much more basic operations, such as system 
calls instead of commands, is much more helpful in 
detecting hackers and identifying a user. Such will also help 
us to collect intrusion behaviors in a system that employs 
GUI interface. 
