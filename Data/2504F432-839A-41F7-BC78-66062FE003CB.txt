 2
1. Introduction 
It is difficult for a computer to automatically parse citations because there are a lot of different citation formats. 
Citations always include author, title, and publication information. Publication information format varies 
according to publication type, e.g., books, journals, conference papers, research reports, and technical reports. 
Publication information can include publication name, volume, number, page number, year published, month 
published, and publisher’s address. Citations can be presented in either structured or semi-structured form. Semi-
structured citation form is more flexible, so bibliographies created by different people may have different citation 
forms. Metadata order may be different as well as their attributes. Bibliographies on the Internet are usually in 
semi-structured form. If we want to use their data, we must first transform the semi-structured bibliography into 
structured bibliography. We have to analyze the metadata of each citation, and build up an index for bibliography 
searches and citing statistics. In this paper, we discuss how to transform semi-structured bibliographies into 
uniform structured data, the core problem of citation data processing. 
CiteSeer [1][2][3][4], which use heuristics to extract certain subfields, can “find the titles and authors in citations 
roughly 80% of the time and page numbers roughly 40% of the time” [1]. Another system, ParaTools [5][6][7][8] 
(short for ParaCite Toolkit) is a collection of Perl modules used for reference parsing. It uses a template-based 
reference parser to extract metadata from references. Our approach is similar to ParaTools in that we also use a 
template-based reference parser, but we found a better alignment from BLAST [9][10]. 
There are about 30 billion nucleotides in a human genome, and for about every 1,000 base pairs, there will be a 
nucleotide difference in genomes. We can use BLAST to compare sequence to identify whether the sequences 
belong to the same person. We realized that we could use this method to identify citation. In our system, we use a 
form translation program to translate citations into a form that we can process more easily. The form we use is a 
protein sequence because we can use BLAST, a well-developed protein sequence matching program, to process it. 
BLAST needs a scoring table to search for most similar sequences in a protein sequence database. This database 
stores the templates of known citations that have been translated into protein form. After finding the most similar 
sequence template, we use a pattern extraction program to parse the citation metadata according to the template. 
Once the metadata are correctly parsed, we manually validate them and add them into our knowledge database. 
The basic concept of our system is using a protein sequence to represent a citation format. We split one 
citation up into several tokens and use the symbol of amino acid to represent each token. Therefore, the 
combinations of the amino acids become a protein sequence, shown as in Figure 1. The protein sequence contains 
the information of the citation format, such as the order of fields and the field separators. We treat this protein 
sequence as template, so we can build a template database to store different citation formats. When we want to 
parse a citation, we translate the citation into a protein sequence by knowledge database, and use this protein 
sequence to find the most similar sequence in template database. Since the template includes the information of 
citation format, we can extract the metadata from this citation by the template. 
 
 
Figure 1: The translation between the citation string and the protein sequence. 
 
 4
2.1 BLAST 
BLAST is a similarity search tool developed by Altschul et al. (1990), it is based on dynamic programming. It is 
used to search for optimal local alignments between sequences. BLAST breaks the query and database sequences 
into fragments (words). It searches the matches for the word of length W that scores at least T. Matches are 
extended to generate an MST(maximal sequence pair) with a score exceeding the threshold of S. The quality of 
each pair-wise alignment is represented as a score. Scoring matrices are used to calculate the score of the 
alignment amino acid by amino acid. The significance of each alignment is computed as a P-value or an E-value 
[10]. P-value is the likelihood that two random sequences will have an MST with a score greater than or equal to 
S. E-value is the expected number of MSTs to be found with score S or higher in two random sequences. 
2.2 Tokens 
When transforming citation into protein sequence, we can divide the process into three phases: 
Token_Form, Brief_Form and Template. In Token_Form phase, we directly translate each token of citation into 
amino acid by the following rules: 
 
A: Match to Author 
T: Match to Title 
L: Match to Journal 
F: Match to Volume 
H: Match to Page 
W: Match to Number 
M: Match to Month 
Y: Match to Year 
N: Match to general number 
D: Match to “.” 
R: Match to “，＂ or “；＂ 
G: Match to “〃＂ 
I: Match to “(” 
K: Match to “)” 
Q: Match to other punctuation 
P: Match to keyword “page” 
S: Match to keyword “number” 
V: Match to keyword “volume” 
X: Match to unknow 
 
To identify tokens, we maintain a knowledge database, which includes author, punctuation, date and some 
keyword information, and do token matching by this knowledge database. Since it is difficult to recognize the 
title and journal field by token matching, we recognize the title and journal field only when we have the correct 
answer. Figure 3 shows an example of transforming a citation to a Token_Form. 
 6
.2.5 Parsing System 
Parsing system is similar to template generating system in early stage. The difference is that parsing system can’t 
reference the correct answer, therefore, after the form translation, it only produce the Token_Form and the 
Brief_Form. We use the Brief_Form as a query string to find the most similar template, which includes 
Brief_Form and Template, in the template database by using BLAST. After finding the Template, we do a 
sequence alignment between Token_Form and Template, shown as in Figure 6. 
 
Figure 6: Brief Form Translation 
 According to this alignment, we modify the Token_Form by adding A(author), L(journal), and T(title) 
into the correct position. We then change N to their corresponding amino acids. An amino acid N may become F 
(value of volume) or W (value of number). Finally, by checking the original citation, we can parse out all the 
metadata correctly. 
After transforming the citation into a prototype protein sequence, we search for the most similar sequence in the 
template database by using BLAST. The parsing system is like a reverse process of the template generating 
system. After we find a template, we use it to extend the prototype protein sequence into a complete protein 
sequence. Now the metadata can be parsed. If we want to parse the citation shown in Figure 7(a), we must 
transform it into prototype protein sequence as Figure 7(b). By entering this sequence into BLAST, we find the 
template AAAAAAAAARGTTTTTTTTTGRLLLLLLLRVDFRSDWRMDYD. In this template, author is in the 
first position. The field of author and the field of title are separated by RG. (punctuation marks), as are the title 
and journal fields. Modifying Figure 8(b) according this template, we get Figure 9(c). Then, by checking the 
original citation, we can parse out all the metadata correctly. 
 
Yieh-Ran Huang and Jan-Ming Ho, “Distributed Call Admission Control for a Heterogeneous PCS Network” 
,   to   appear   IEEE   Trans.   On    Computers,    Vol. 51,   no.   11,      Nov.    2002. 
Figure 7(a). The original citation we want to parse. 
 
Figure 8 (b). The citation in the Fig. 2(a) transforms into its protein sequence as 
QAMQARGGRDRVDNRSDNRMDYD. Each blank in the table represents a token in the citation. 
 
Q A Q R G G
R D R V D N R S D N R M D Y D
A M 
A R G G
R R V D F R S D W R M D Y D
A A A A A A A A T T T T T T T T T
L L L L L L L 
 8
recallprecision
recallprecisionmeasureF +
××=− 2 (4) 
The F-measure is also used in the template filter. 
fieldthisabouttokensofnumberTotal
fieldthisabouttokensextractedcorrectlyofnumberTotalAccuracyField =  
We illustrate the effect of template completeness on precision in Table 3. Our system performs better than 
ParaTools for all tested template completeness. In Table 3, we present the quality of parsing result. Our quality is 
better than ParaTools’. The parsing results will be used in the future. If the quality is not good, it is insignificant 
for reusing. 
Table 3: The new Evaluation for the different citation styles 
 
 
 
