 2
???????????????????? 
 
??????????????????????????????? 
Exploring the optimal solutions for several single-machine problems with learning effect 
and deterioration consideration 
 
????:NSC 96-2221-E-035-034 
????:2007?08?01??2008?07? 31 ? 
???:???  ??????? 
??????:??????????????????????? 
 
?????? 
Pinedo (2002)??????????????
??????????????????????
??????????????????????
??????????????????????
??????????????????????
??????????????????????
?????????????????????
??????????????????? 
????????????????????
?????????????????????
??????????????????????
?????????????????????
Heiser?Render (1999), Russell?Taylor (2000)
?????????????????????
????????????????? Birskup 
(1999)???????????????????
?????????????????????? 
????????????????????
??????????????????????
??????????????????????
?????????????????????
?????????(?? Kunnather ? Gupta 
1990; Mosheiov, 1995)? 
????????????????????
????????Wang (2007)????????
??????????????????????
??????????????????????
??????????????????????
?????????????????????
??????????????????????
???? 
????????????????????
??????????????????????
??????????????????????
??????????????????????
??????????????????????
????? 
??????????????????? 
 
Abstract 
Pinedo (2002) pointed out that single-machine 
models are important for various reasons. The 
single-machine environment is very simple and a 
special case of all other environments. Single-machine 
models often have properties possessed by neither 
machines in parallel nor machines in a series. Results 
obtained for single-machine models not only provide 
insights into the single-machine environment but also 
provide a basis for heuristics that are applicable to 
more complicated machine environments. In practice, 
scheduling problems in more complicated machine 
environments are often decomposed into 
sub-problems that deal with single machines.  
However, in literature of the classical 
single-machine scheduling problems, most researchers 
assumed that job processing time is constant and fixed. 
In fact, they are not true in some situations. For 
instance, Heiser and Render (1999) and Russell and 
Taylor (2000) both claimed that in several industries 
have verified that unit costs decline as firms produce 
more of a product and gain knowledge or experience. 
Biskup (1999) also indicated that repeated processing 
of similar tasks improves worker skills; workers are 
able to perform setup, to deal with machine operations 
and software, or to handle raw materials and 
com onents at a greater pace. Therefore, people and 
organizations become better at their task as the task 
are repeated in real production situation. The process 
of improvement can be represented by a learning 
effect.  
On the other hand, the actual processing time of a 
job in a schedule is modeled as an increasing function 
of its starting time due to deteriorating effect. This 
model also reflects a variety of real-life situations 
such as steel production, resource allocation, fire 
fighting, maintenance or cleaning, etc. (see Kunnathur 
and Gupta,1990; Mosheiov,1995), in which any delay 
in processing a job may result in an increasing effort 
to accomplish the job. 
However, to the best of our knowledge, there exist 
only a few research results on scheduling models 
considering the effects of deterioration and learning at 
the same time, although the phenomena can be found 
in many real-lif situations. For example, Wang (2007) 
pointed out that as the manufacturing environment 
becomes increasingly competive, in order to provide 
customers with greater product variety, organizations 
 4
??????????????????Biskup 
(1999) ? ? ????????????
learning effect ?????? ???
Mosheiov (2001) ?????????????
???????????????却?????
??????????????Lee t al.(2004)
????????????????????
??????total completion time??????
?(maximum tardiness)?????????Lee 
? Wu (2004)?????????(two-machine 
flowshop)???? ??????????
?(mean flow time)????????????
??????Mosheiov ?Sidney (2005)???
???????????????????
(number of tardy jobs)??????????
???(polynomial time)?Wang ? Xia (2005)
????????????????????
?????????????????????
?????????Wu(2005)????????
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?
(makespan)????????????
Wu(2006)????????????????
???????(weighted total completion 
time)???????Wu et al.(2006)????
?????????????????????
?????????????????????
?????????????????????
Chen et al.(2006)????????????
?????????????????????
???????????????????
????????????????????
??Wu et al.(2006)???????????
?????????(maximum lateness)???
?????????????????????
???????????--?? earliest due date 
(EDD) ??????????????????
??????(SA)(simulated annealing )????
Lee et al.(2006)?????????????
?????????????????????
?????????????????????
??Wu ? Lee (2006)???????????
?????????(total completion time)
????????? Lee? Wu(2006)?????
????????????????????
???????(makesapn)????????
??? 
???????????????????
?????????????????????
?????????????????????
?????????????????????
???????????? 
 
????????? 
???????????????????
?????????????????????
????? (??Alidaee and Wormer,1999; 
Cheng et al, 2004; Birskup,1999; Mosheiov,2001, 
Chen et al. 2006; Koulamas and Kyparisis, 2006; 
Kuo and Yang, 2006)?????????????
??????????????????????
??????????????(Wang, 2007; 
Wang and Cheng 2007)????????????
(makespan)?????????????????
?????(total completion time)?????
?????WSPT rule (weighted shortest 
processing times first) ??????????
?????(weighted total completion time)?
??????????????????????
?(maximum lateness)????????????
agreeable condition?(??????)????
?? ??????????????????
?????(??????)? 
                                                           
?. ?????? 
?????????(learning effect)??
????????????????????
(single-machine scheduling)????????
?????????????(makespan) ???
??????????????????????
????????????????????
(Criterion)????????????
????? SCI????(??????)????
??????????. 
 
 
?????? 
???????????? 
1.  Biskup D. (1999) Single-machine scheduling with learning 
considerations, European Journal of Operational 
Research 115, 173-178.  
2.  Chen P., Wu C.C. and Lee W.C. (2006) A bi-criteria 
two-machine flowshop scheduling problem with a learning 
effect. Journal of the Operation Research Society, 57, 
1113-1125.  
3.  Lee W.C. and Wu C.C. (2004) Minimizing total completion 
time in a two-machine flowshop with a learning effect, 
International Journal of Production Economics 88,85-93. 
4.  Lee W.C., Wu C.C. and Sung H.J. (2004) A bi-criterion 
single-machine scheduling problem with learning 
considerations, Acta Informatica 40, 303-315. 
5.  Mosheiov G. (2001) Scheduling problems with a learning 
effect, European Journal of Operational Research 132, 
687-693. 
6.  Mosheiov G. and Sidney J.B. (2003) Scheduling with 
general job-dependent learning curves, European Journal 
of Operational Research 147, 665-670. 
7.  Mosheiov G. and Sidney J.B. (2005) Note on scheduling 
with general learning curves to minimize the number of 
tardy jobs, Journal of the Operational Research Society 56, 
110-112. 
 6
tasks improves workers’ skills, e.g., workers are able to perform 
setups, deal with machine operations or software, or handle raw 
materials and components at a faster pace. Heizer and Render [11], 
and Russell and Taylor [21] demonstrated through empirical studies 
in several industries that unit costs decline as firms produce more of 
a product and gain knowledge or experience. Besides, Lee et al. [15] 
utilized the genetic learning mechanism to elicit participants’ 
meeting behavior. Chen and Hsiang [6] pointed out that 
corporations have felt the pressure of fast-paced innovations and 
knowledge transfer as major driving forces in raising their 
sustainable competitive advantage and organizational total 
productivity. Thus, the development of the knowledge community 
through e-learning is an important strategy in implementing 
knowledge management policy. 
The impact of learning on productivity in manufacturing in the 
aircraft industry was first discovered by Wright [28], and it was 
subsequently confirmed in many industries in both the 
manufacturing and service sectors [30]. Although the learning effect 
had been investigated in a variety of industries, it had not been 
unexplored in the field of scheduling until Biskup’s [2] study. He 
introduced a scheduling model with learning effects in which the 
actual processing time of a job is a function of its position in the 
schedule. He showed that the single-machine problems to minimize 
total deviations of job completion times from a common due date 
and to minimize the sum of job completion times are polynomially 
solvable. Mosheiov [18] found that under Biskup’s learning effect 
model the optimal schedules for some classical scheduling problems 
remain valid, but they require much greater computational effort to 
obtain. Mosheiov and Sidney [19] extended the model in which the 
learning effects gained from doing some jobs are stronger than those 
from the other jobs, i.e., the so-called job-dependent learning model. 
Lee et al. [16] studied a bi-criterion scheduling problem on a single 
machine. Chen et al. [4] considered a two-machine flowshop 
scheduling problem in which the objective is to minimize the 
weighted sum of total completion time and maximum tardiness. 
Eren and G u ner [8] applied the 0-1 integer programming approach 
to derive the optimal solution, and used a random search, the tabu 
search, and simulated annealing to obtain near-optimal solutions for 
the total tardiness problem. Cheng et al. [5] considered some 
permutation flowshop scheduling problems with learning effects on 
no-idle dominant machines. Eren and G u ner [9] further considered 
a bi-criterion flowshop scheduling problem. 
Besides the job-position-based learning effect scheduling model, 
there are several other learning effect scheduling models in the 
literature. For instance, Wang and Cheng [24] considered a 
single-machine scheduling problem with a volume-dependent, 
piecewise linear processing time function to model the learning 
effect. They showed that the maximum lateness problem is NP-hard 
in the strong sense and identified two special cases that are 
polynomially solvable. Wang and Xia [27] studied the flowshop 
problems when the learning effect is present. They provided the 
worst-case bound for the shortest processing time (SPT) rule for the 
problems to minimize makespan and total completion time. They 
also showed that the problems remain polynomially solvable for two 
special cases. Wang [25] studied a model in which the job 
processing times are functions of their starting times and positions 
in the sequence. Recently, Koulamas and Kyparisis [14] introduced 
a general sum-of-job-processing-times-based learning effect 
scheduling model in which employees learn more if they perform a 
job with a longer processing time. Bikup [3] provided a 
comprehensive review of the scheduling models and problems with 
considerations of the learning effect. Moreover, he gave detailed 
descriptions of the models and the authors’ works. Janiak and 
Rudek [13] proposed a new approach to studying the learning effect 
in scheduling. Wang et al. [26] studied several single-machine 
scheduling problem with a time-dependent learning effect. 
Biskup [3] classified learning models into two types, namely 
position-based learning and sum-of-processing-time-based learning. 
He further claimed that position-based learning assumes that 
learning takes place by processing time independent operations like 
setting up of machines. This seems to be a realistic assumption for 
the case where the actual processing time of a job is mainly 
machine-driven and has (or is near to) none human interference. On 
the other hand, sum-of-processing-time-based learning takes into 
account the experience workers have gained from producing the 
same or similar jobs over time. This might, for example, be the case 
for offset printing, where running the press itself is a highly 
complicated and error-prone process. 
In this paper we study a new learning effect scheduling model in 
which the learning effects of machines and humans are both present, 
i.e., the actual processing time of a job is a function not only of the 
total normal processing times of the jobs already processed, but also 
of the job’s scheduled position. The remainder of this paper is 
organized as follows. The solution procedures for the 
single-machine problems to minimize makespan, total completion 
time, total weighted completion time, and maximum lateness 
minimization under the proposed model are presented in the next 
section. In Section 3 we consider special cases of the flowshop 
problems to minimize makespan and total completion time. We 
conclude the paper in the last section. 
2. Some single-machine problems 
Suppose that there are n  jobs to be scheduled on a single 
machine. Each job i  has a normal processing time ip  and a due 
date id . Specially, the actual processing time of job j if it is 
scheduled in the rth position in a sequence is 
21)1(
1
1
1 ][
][
aa
n
l l
r
l l
jrj r
p
p
pp ∑
∑
=
−
=−= , 
where jp  is the basic processing time of job j, ][lp  denotes 
the basic processing time of the job scheduled in the lth position in 
the sequence, and 1a  and 2a  denote two learning indices with 
11 ≥a  and 02 <a . This learning effect scheduling model is 
adapted from the sum-of-processing-time-based learning effect 
scheduling model by Koulamas and Kyparisis [14] and the 
job-position-based learning effect scheduling model by Biskup [2]. 
Under the proposed model, the actual processing time of a job 
depends not only on the job’s scheduled position, but also on the 
processing times of the jobs already processed. It is observed from 
the model that the longer the jobs that have already been processed 
or the later a job is scheduled, the stronger the learning effect is on 
the subsequent jobs that are yet to be processed. 
  In this section we will discuss several single-machine problems 
under the proposed learning model. The makespan and the total 
completion time problems are shown to be polynomially solvable, 
while the total weighted completion time and the maximum lateness 
problems are shown to be polynomially solvable under certain 
agreeable conditions. Suppose that S and S ′  are two job 
schedules. The difference between S and S ′  is a pairwise 
interchange of two adjacent jobs i and j, i.e., ),,,( ππ ′= jiS  
and ),,,( ππ ′=′ ijS , where π  and π ′  each denote a 
partial sequence.  Furthermore, we assume that there are r-1 jobs in π . Thus, jobs i and j are the rth and (r+1)th job in S, whereas jobs 
j and i are scheduled in the rth and (r+1)th position in S ′ . In 
addition, let B  denote the completion time of the last job in π . 
Under S, the completion times of jobs i and j are respectively 
1
2
1
[ ]
1
1
( ) 1
ar
l
al
i i n
l
l
p
C S B p r
p
−
=
=
   = + −   
∑
∑
,                  
(1) 
and 
1 1
2
1 1
[ ] [ ]
1 1
1 1
( ) 1 1 ( 1
a ar r
l l i
al l
j i jn n
l l
l l
p p p
C S B p r p r
p p
− −
= =
= =
   +      = + − + − +         
∑ ∑
∑ ∑
.               (2) 
 8
seen from Theorem 1 that ( ) ( )j iC S C S ′≤ . Thus, to show 
that S dominates S ′ , it suffices to show that 
( ) ( ) ( ) ( )i i j j j j i iw C S w C S w C S w C S′ ′+ ≤ + . From 
equations (1) to (4), we have 
)]()([)]()([ SCwSCwSCwSCw jjiiiijj +−′+′  
1 2 1 2 1 2
1 1 1
[ ] [ ] [ ]
1 1 1
1 1 1
{ [ (1 ) ] [ (1 ) (1 ) ( 1) ]}
r r r
l l l j
a a a a a al l l
j j i j in n n
l l l
l l l
p p p p
w B p r w B p r p r
p p p
− − −
= = =
= = =
+
= + − + + − + − +
∑ ∑ ∑
∑ ∑ ∑
1 2 1 2 1 2
1 1 1
[ ] [ ] [ ]
1 1 1
1 1 1
{ [ (1 ) ] [ (1 ) (1 ) ( 1) ]}
r r r
l l l i
a a a a a al l l
i i j i jn n n
l l l
l l l
p p p p
w B p r w B p r p r
p p p
− − −
= = =
= = =
+
− + − + + − + − +
∑ ∑ ∑
∑ ∑ ∑
1 2
1
[ ]
1
1
( )(1 )
r
l
a al
i j j i n
l
l
p
w p w p r
p
−
=
=
= − −
∑
∑
1 2 1 2
1 1
[ ] [ ]
1 1
1 1
[(1 ) (1 ) ( 1) ]
r r
l l i
a a a al l
j j n n
l l
l l
p p p
w p r r
p p
− −
= =
= =
+
+ − − − +
∑ ∑
∑ ∑
         
1 2 1 2
1 1
[ ] [ ]
1 1
1 1
[(1 ) (1 ) ( 1) ]
r r
l l j
a a a al l
i i n n
l l
l l
p p p
w p r r
p p
− −
= =
= =
+
− − − − +
∑ ∑
∑ ∑
.                        (9) 
Substituting 1
/
/ ≥=
ii
jj
wp
wpλ , 
1
[ ]
1
1
(1 )
r
l
l
n
l
l
p
t
p
−
=
=
= −
∑
∑
, 
1
[ ]
1 1
i
n r
l l
l l
px
p p
−
= =
=
−∑ ∑
, and 
i
j
w
w
k =  into equation (9), we 
have 
[ ( ) ( )] [ ( ) ( )]j j i i i i j jw C S w C S w C S w C S′ ′+ − +  
1 2 {( 1)a aj iw p t r λ= − 1 21[1 (1 ) ( ) ]a ark x rλ
++ − −
1 2
1 1[1 (1 ) ( ) ]}a arkx
k r
λ +− − − .       (10) 
From Lemma 5, the value of equation (10) is non-negative, so we 
have 
( ) ( ) ( ) ( )j j i i i i j jw C S w C S w C S w C S′ ′+ ≥ + . 
Thus, repeating this interchange argument for all the jobs not 
sequenced in the WSPT order completes the proof of Theorem 3. 
 
Let i i iL C d= −  denote the lateness of job i, for i = 1, 
2,…, n. Ordering jobs according to the earliest due-date (EDD) rule 
provides the optimal sequence for the classical maximum lateness 
problem. However, this policy is not optimal under the proposed 
learning model, as shown by the example below. 
Example 2. Given 2n = , 1 20p = , 2 30p = , 
1 30d = , 2 28d = , 21 =a and 322.02 −=a . The 
EDD sequence (2, 1) yields a maximum lateness of 2.56, while the 
sequence (1, 2) yields the optimal value of 0.64. 
Although the EDD order does not rovide the optimal solution 
for the maximum lateness problem under the proposed model, it is 
still optimal if the job processing times and the due dates are 
agreeable, i.e., ji dd ≤  implies ji pp ≤  for all jobs i and j. 
The result is stated in the following theorem. 
Theorem 4. For the maximum lateness problem under the proposed 
learning model, an optimal schedule is obtained by sequencing jobs 
in non-decreasing order of id  (i.e., the EDD order) if the job 
processing times and the due dates are agreeable, i.e., ji dd ≤  
implies ji pp ≤  for all jobs i and j. 
Proof. Suppose that ji dd ≤ . This implies that ji pp ≤ . 
Thus, it is seen from Theorem 1 that ( ) ( )j iC S C S ′≤ . To 
show that S dominates S ′ , it suffices to show that 
)}(),(max{)}(),(max{ SLSLSLSL ijji ′′≤ . By 
definition, the lateness of jobs i and j in S and jobs j and i in S ′  
are respectively 
iii dSCSL −= )()( , 
jjj dSCSL −= )()( , 
jjj dSCSL −′=′ )()( , 
and 
iii dSCSL −′=′ )()( . 
Since ji pp ≤ , we have from Theorem 1 that 
 ( ) ( )j iC S C S ′≤ .                 
(11) 
With the condition that ji dd ≤ , we have 
( ) ( )j iL S L S′≤ .                  
(12) 
From equation (11), and since job i is processed before job j in S, we 
have 
 ( ) ( )i iL S L S′≤ .                  
(13) 
From equations (12) and (13), we have 
 max{ ( ), ( )} max{ ( ), ( )}i j i jL S L S L S L S′ ′≤ . 
Thus, repeating this interchange argument for all the jobs not 
sequenced in the EDD rule completes the proof of Theorem 4. 
 
3. Two flowshop problems 
In most manufacturing environments, a set of processes is 
sequentially performed in several stages to complete a job. Such a 
system is referred to as the flow shop environment [1, 7, 10, 12, 17, 
20, 23, 29]. Formulation of the flowshop scheduling problem is 
described as follows. Suppose that there is a set of n jobs, say N = 
{1, 2, …, n}, to be processed on m machines M1, M2, …, Mm. Each 
job j consists of m operations jO1 , jO2 , …, jmO , where 
jiO  must be processed on machine Mi, i = 1, 2, …, m. Processing 
of operation jiO ,1+  can start only after jiO  has been 
 10
1 2
1
[ ]
1
1
, (1 ) ( 1) }
r
l j
a al
in
l
l
p p
r p
p
−
=
=
+
− +
∑
∑
 
[1]max{ ,p≥
1 2 1 2
1 1
[ ] [ ]
1 1
1 1
, , (1 ) , (1 ) ( 1) }
r r
l l i
a a a al l
i jn n
l l
l l
p p p
r p r p
p p
− −
= =
= =
+
− − +
∑ ∑
∑ ∑
…
.         (17) 
 From equations (15) and (16), we have 
( ) ( )i jC S C S′ − = {
1 2 1 2
1 1
[ ] [ ]
1 1
1 1
(1 ) (1 ) ( 1)
r r
l l j
a a a al l
j in n
l l
l l
p p p
r p r p
p p
− −
= =
= =
+
− + − +
∑ ∑
∑ ∑
 
1 2
1
[ ]
1
[1]
1
( 1) max{ ,..., (1 )
r
l
a al
jn
l
l
p
m p r p
p
−
=
=
+ − −
∑
∑
1 2
1
[ ]
1
1
, (1 ) ( 1) }
r
l j
a al
in
l
l
p p
r p
p
−
=
=
+
− +
∑
∑
} 
− {
1 2 1 2
1 1
[ ] [ ]
1 1
1 1
(1 ) (1 ) ( 1)
r r
l l i
a a a al l
i jn n
l l
l l
p p p
r p r p
p p
− −
= =
= =
+
− + − +
∑ ∑
∑ ∑
 
1 2
1
[ ]
1
[1]
1
( 1) max{ ,..., (1 )
r
l
a al
in
l
l
p
m p r p
p
−
=
=
+ − −
∑
∑
1 2
1
[ ]
1
1
, (1 ) ( 1) }}
r
l i
a al
jn
l
l
p p
r p
p
−
=
=
+
− +
∑
∑
. (18) 
Substituting 
1
[ ]
1
1
1
r
l
l
n
l
l
p
t
p
−
=
=
= −
∑
∑
, 
j
i
p
p
λ = , 
1
i
n
l
l
py
p
=
=
∑
, 
and 
yx
t
=  into equation (18), we have 
( ) ( )i jC S C S′ − =
1 2 1 2 1 2
1 1{ [1 (1 ) ( ) ] [1 (1 ) ( ) ]}a a a a a ai
r rt r p x x
r r
λ λ+ +− − − − −
 
             
1 2
1
[ ]
1
[1]
1
( 1) (max{ ,..., (1 )
r
l
a al
jn
l
l
p
m p r p
p
−
=
=
+ − × −
∑
∑
1 2
1
[ ]
1
1
, (1 ) ( 1) }
r
l j
a al
in
l
l
p p
r p
p
−
=
=
+
− +
∑
∑
 
[1]max{ ,p−
1 2 1 2
1 1
[ ] [ ]
1 1
1 1
, , (1 ) , (1 ) ( 1) })
r r
l l i
a a a al l
i jn n
l l
l l
p p p
r p r p
p p
− −
= =
= =
+
− − +
∑ ∑
∑ ∑
…
.  
From equation (17) and Lemmas 1 and 2, we have 
( ) ( ) 0i jC S C S′ − ≥ . 
Thus, S  dominates S ′ . Therefore, repeating this interchange 
argument for all the jobs not sequenced in the SPT order completes 
the proof of the theorem. 
Theorem 6. For the flowshop total completion time problem under 
the proposed learning model, the optimal schedule is obtained by 
sequencing jobs in the SPT order if ij jp p= . 
Proof. The proof is similar to that of Theorem 5 and so is omitted.  
 
4. Conclusions 
Scheduling problems with learning effects have captured many 
scheduling researchers’ attention in recent years. However, most of 
the research assumed that the learning effects depend on job 
positions. Recently, a sum-of-processing-times-based learning effect 
has been proposed by Koulamas and Kyparisis [14]. In this paper 
we considered a new learning model in which the actual processing 
time of a job depends not only on the job’s scheduled position, but 
also on the processing times of the jobs already processed. In 
particular, we showed that the single-machine makespan and total 
completion time problems are polynomially solvable under the 
proposed learning model. In addition, we showed that the total 
weighted completion time and the maximum lateness problems are 
polynomially solvable under certain agreeable conditions. Finally, 
we presented polynomial-time optimal solutions for two flowshop 
problems to minimize makespan and total completion time under the 
assumption of identical processing times on all the machines. For 
large-size problems, the normal processing time will be shortened 
significantly due to the two learning effects. Thus, to develop new 
learning models when both learning effects are present will be an 
interesting issue for future research. 
Acknowledgments 
We are thankful to two anonymous referees for their 
constructive comments on an earlier version of our paper. 
References 
[1] H. Allaoui, S. Lamouri, A. Artiba, E. Aghezzaf, Simultaneously 
scheduling n jobs and the preventive maintenance on the 
two-machine flow shop to minimize the makespan International 
Journal of Production Economics 112 (2008) 161–167. 
[2] D. Biskup, Single-machine scheduling with learning 
considerations, European   Journal of Operational 
 12
Appendix 
Lemma 1. 
1 2 1 21
1
1 11 (1 ) ( ) (1 ) ( ) 0a a a ar ra x x x
r r
− + +− − − − ≥  
for 10 ≤≤ x , 11 ≥a , 02 <a , and 
1...,,2,1 −= nr . 
Proof. Let 
2121 )1()1()1()1(1)( 11
aaaa
r
rx
r
rxxaxf +−−+−−= −
. Taking the first derivative of )(xf  with respect to x, we have 
212121 )1()1()1()1()1()1()1()( 11
2
11
1
1
aaaaaa
r
rxa
r
rxxaa
r
rxaxf +−++−−++−−=′ −−−
 
21 )1()1()1( 211
aa
r
rxxaa +−−= −  
0≥  
for 10 ≤≤ x , 11 ≥a , 02 <a , and 
1...,,2,1 −= nr . Thus, this implies that )(xf  is a 
non-decreasing function on 10 ≤≤ x . Since 
0)1(1)0( 2 >+−= a
r
rf  for 02 <a  and 
1...,,2,1 −= nr , we have 
0)( >xf  
for 10 ≤≤ x , 11 ≥a , 02 <a , and 
1...,,2,1 −= nr . This completes the proof. 
 
Lemma 2. 
1 2 1 2
1 1[1 (1 ) ( ) ] [1 (1 ) ( ) ] 0a a a ar rx x
r r
λ λ+ +− − − − − ≥
 for x/11 ≤≤ λ , 10 ≤≤ x , 11 ≥a , 02 <a , and 
1...,,2,1 −= nr . 
Proof. 
Let
])1()1(1[])1()1(1[)( 2121 aaaa
r
rx
r
rxg +−−−+−−= λλλ
. Taking the first and second derivatives of )(λg  with respect to 
λ , we have                                        
2121 )1()1()1()1(1)( 11
aaaa
r
rxxa
r
rxg +−−+−−=′ −λλ
 
and 
21 )1()1()1()( 2211
aa
r
rxxaag +−−=′′ −λλ . 
Since 11 ≥a  and x/11 ≤≤ λ , it implies that 
0)( ≥′′ λg . Therefore, )(λg′  is a non-decreasing function 
for x/11 ≤≤ λ . From Lemma 1, we have  
0)1()1()1()1(1)1( 2121 11 >+−−+−−=′ − aaaa r
rxxa
r
rxg
. 
Using the fact that )(λg ′  is a non-decreasing function for 
x/11 ≤≤ λ , this implies that 
0)1()( >′≥′ gg λ . 
Therefore, it also implies that )(λg  is a non-decreasing function 
for x/11 ≤≤ λ . Since 0)1( =g , we have 
0)( ≥λg  
for x/11 ≤≤ λ , 10 ≤≤ x , 11 ≥a , 02 <a , and 
1...,,2,1 −= nr . This completes the proof. 
 
Lemma 3. 
0)1()1(])1()1(1[1 2121 11 ≥+−−+−−+ − aaaa r
rkxxa
r
rxk
 for 1 1a ≥ , 2 0a < , 1k ≥ , 1 0 x k< < , and 
1 , 2 , , 1r n= −" . 
Proof. Let 
2121 )1()1(])1()1(1[1)( 11
aaaa
r
rkxxa
r
rxkxf +−−+−−+= −
. Taking the first derivative of )(xf  with respect to x , we 
have 
2121 )1()1()1()1()( 11
1
1
aaaa
r
rkxa
r
rxkaxf +−−+−=′ −−
21 )1()1()1( 211
aa
r
rkxkxaa +−−+ − . 
Since 1 1a ≥ , 2 0a < , 1k ≥ , 1 0 x k< < , and 
1 , 2 , , 1r n= −" , we have 0)( >′ xf . This implies 
that )(xf  is a non-decreasing function for 1 0 x
k
< < . 
Since 0])1(1[1)0( 2 >+−+= a
r
rkf , we have 
0)( >xf . This completes the proof. 
 
Lemma 4. 
0])1()1(1[1])1()1(1[ 2121 >+−−−+−− aaaa
r
rkx
kr
rxk
 for 1 1a ≥ , 2 0a < , 1k ≥ , 
1
11, 1, 0a k x
k
≥ ≥ < < , and 1 , 2 , , 1r n= −" . 
Proof. Consider the following function 
])1()1(1[1])1()1(1[)( 2121 aaaa
r
rkx
kr
rxkxf +−−−+−−=
. 
Taking the first derivative of )(xf  with respect to x , we 
have 
2121 )1()1()1()1()( 11
1
1
aaaa
r
rkxa
r
rxkaxf +−−+−=′ −−
. 
Since 1
11, 1, 0a k x
k
≥ ≥ < < , and 
 14
 
 
 
 
 
 
 
???: 
 
A note on single-machine group scheduling problems with 
position-based learning effect 
 
Wen-Chiung Lee and Chin-Chia Wu* 
Department of Statistics, Feng Chia University, Taichung, 
Taiwan 
 
June 12, 2007 
Abstract 
In many situations, the skills of workers continuously improve when 
repeating the same or similar tasks. This phenomenon is known as 
the “learning effect” in the literature. However, most studies 
considering the learning effect ignore the fact that production 
efficiency can be increased by grouping various parts and products 
with similar designs and/or production processes. This phenomenon 
is known as “group technology” in the literature. In this paper, we 
propose a new group scheduling learning model where the learning 
effect not only depends on the job position, but also depends on the 
group position. We then show that the makespan and the total 
completion time problems remain polynomially solvable under the 
proposed model.  
 
Keywords: scheduling; learning effect; makespan; total completion 
time; group technology 
 
 
*Correspondence: Department of Statistics, Feng Chia University, 
Taichung, Taiwan. 
E-mail: cchwu@fcu.edu.tw. 
1.  Introduction 
Conventionally, most research assumes that job processing 
times are constant from the first job to be processed until the 
last job to be completed; in particular, job processing times are 
independent of their position in the schedule. However, this 
assumption might be unrealistic in many situations. Recent 
empirical studies in several industries support this observation 
by demonstrating that unit costs decline as firms produce more 
of a product and gain knowledge or experience [1, 2]. For 
instance, Biskup [3] pointed out that repeated processing of 
similar tasks continuously improve the worker skills; workers 
are able to perform setup, to deal with machine operations and 
software, or to handle raw materials and components at a 
greater pace. This phenomenon is now generally recognized and 
known as the “learning effect” in the literature. 
The impact of learning on productivity in manufacturing was 
first found by Wright [4] in the aircraft industry and was 
subsequently discovered in many industries in both 
manufacturing and service sectors [5]. Although numerous 
studies have been devoted to investigating the learning effect in 
a variety of industries, its research is still limited in the 
scheduling fields. Biskup [3] and Chen and Wang [6] are among 
the pioneers that brought the concept of learning into the field 
of scheduling. Biskup [3] proposed a job-position-based learning 
model where the job’s processing time is a decreasing function 
of its position in a sequence. He proved that the single-machine 
scheduling problem remains polynomially solvable if the 
objective is to minimize the deviation from a common due date 
or to minimize the sum of flow times. Chen and Wang [6] 
considered a single machine scheduling problem with a 
volume-dependent piecewise linear processing time function to 
model the learning effects. They showed that the maximum 
lateness problem is NP-hard in the strong sense and then 
identify two special cases which are polynomially solvable. They 
also proposed two heuristics and analyzed their worst case 
performance. Since then, scheduling problems with learning 
effects have received tremendous attention.  A comprehensive 
review of different learning models and problems was given by 
Biskup [7]. Recently, Eren and G uner [8] developed an integer 
programming model to solve the single machine total tardiness 
problem with learning consideration. In addition, they proposed 
three heuristics, including the tabu search, the simulated 
annealing, and the random search, to obtain near-optimal 
solutions. Wu and Lee [9] considered a model in which the 
actual job processing time not only depends on its scheduled 
position, but also depends on the sum of the processing times of 
jobs already processed. They showed that the single-machine 
makespan and the total completion time problems are 
polynomially solvable. In addition, they proved that the total 
weighted completion time has a polynomial optimal solution 
under certain agreeable conditions.  
However, all the studies mentioned above ignore the fact that 
production efficiency can be increased by grouping various 
parts and products with similar designs and/or production 
processes. This phenomenon is known as “group technology” in 
the literature [10]. Many advantages have been claimed through 
the wide applications of group technology [11, 12, 13]. To the 
best of our knowledge, the learning effect has not been 
investigated in the context of group scheduling problems until 
recently. Guo and Wang [14] investigated the makespan 
minimization problem where the actual processing time is given 
by ( ) ( )ij ijp t p a bt= + . They showed that the problem is 
polynomial solvable under the group technology assumption. 
Under the same model, Xu et al. [15] proved that the total 
weighted completion time minimization problem remains 
polynomial solvable. Moreover, Wang et al. [16] showed that 
single-machine group scheduling problems are polynomially 
solvable where the objectives are to minimize the makespan and 
the total completion time under the model that 
( )ij ij ijp t a b t= − . In this paper, we propose a new group 
scheduling learning model which is an extension of the Biskup’s 
[3] model. We then develop the optimal group and job sequences 
for the makespan and the total completion time problems under 
the proposed model. The rest of the paper is organized as 
follows. The problem is formulated in the next section. In 
Section 3, we first develop the optimal group and job sequences 
for the makespan problem. In Section 4, the procedures to 
derive the optimal group and job sequences for the total 
completion time problem are presented. A brief conclusion is 
given in the last section. 
 
2. Problem formulation 
In this section, we will develop a new group scheduling learning 
model by extending Biskup’s [3] idea to the context of group 
technology. Two group scheduling problems on a single machine 
are studied and the objectives are the makespan and the total 
completion time, respectively. Let ijJ  denote job j in group i, and 
r  and k  denote the group position and the job position. The 
learning phenomenon is implemented by defining the actual 
processing time of ijJ  when scheduled in the r th group and in 
the kth position is 
1 2, a ar k
ij ijp p r k= , 
where ijp  is the normal processing time of ijJ , and 1a  and 
2a  denote the group and the job learning effects with 1 0a <  
and 2 0a < . 
Moreover, the actual setup time of group iG  if scheduled in the 
r th group is given by 
1ar
i is s r=  
where is  is the normal setup time of group iG . 
 
3.  The makespan problem 
In this section, a single-machine group scheduling problem with 
the learning consideration is studied. It is assumed that the actual 
 16
and groups are arranged in non-decreasing order of 
( )
1
n
i i k
k
s p
=
+∑ , 1, 2,...,i m=  
if the numbers of jobs in each group are the same, and the setup time 
and the job processing times are agreeable. 
Proof. Suppose that iu ivp p≤ . Let S and S ′  be two job 
sequences where the difference between S and S ′  is a pairwise 
interchange of two adjacent jobs Jiu and Jiv, that is,  
S ( )iu ivJ Jπ π ′=  and S ( )iv iuJ Jπ π′ ′= , where  
π  and π ′  denote the partial sequences.  Furthermore, we 
assume that there are k-1 jobs in π . Thus, Jiu and Jiv are the kth 
and (k+1)th in the rth group in S, meanwhile Jiv and Jiu are 
scheduled the kth and (k+1)th in the rth group in S ′ . In addition, 
let A denote the completion time of the last job in π . To show S 
dominates S ′ , it suffices to show that (S) (S )iv iuC C ′≤  
and  (S) (S) (S ) (S )iu iv iv iuC C C C′ ′+ < + . By 
definition, the actual processing times of Jiu and Jiv in S  are 
1 2( ) a aiu iuC S A p r k= + ,                                                 
(6) 
and 
1 2 1 2( ) ( 1)a a a aiv iu ivC S A p r k p r k= + + + .                                    
(7) 
Similarly, the actual processing times of Jiv and Jiu in S ′  are 
1 2( ) a aiv ivC S A p r k′ = +                                                  
(8) 
and 
1 1 2( ) ( 1)a a aiu iv iuC S A p r p r k′ = + + + .                                      
(9) 
From equation (3), we have 
( ) ( )iv iuC S C S ′≤ .                                                    
(10) 
Since iu ivp p≤ , we have 
( ) ( )iu ivC S C S ′≤ .                                                  
(11) 
Thus, 
( ) ( ) ( ) ( )iu iv iv iuC S C S C S C S′ ′+ ≤ + .                                    
(12) 
From equations (11) and (12), it implies that S  dominates S ′ . 
Therefore, repeating this interchange argument for all jobs in each 
group not sequenced according to the SPT rule yields the first part 
of the theorem. 
Similar to the proof of the first part, we assume that Q and Q′  be 
two group sequences where the difference between Q and Q′  is a 
pairwise interchange of two adjacent groups Gi and Gj, that is,  
Q ( )i jG Gσ σ ′=  and Q ( )j iG Gσ σ′ ′= , where  
σ  and σ ′  denote the partial group sequences. To show Q 
dominates Q′ , it suffices to show that ( ) ( )jn inC Q C Q′≤  
and 
1 1 1 1
( ) ( ) ( ) ( )
n n n n
il jl jl il
l l l l
C Q C Q C Q C Q
= = = =
′ ′+ < +∑ ∑ ∑ ∑
. By definition, the sum of the completion times in groups Gi and Gj 
in Q and Q′  are obtained as follows;  
1 1 2
( )
1 1
( ) ( 1)
n n
a a a
il i i l
l l
C Q nA ns r n l p r l
= =
= + + − +∑ ∑
,                            (13) 
1 1
( )
1 1
( ) ( ) ( 1) ( 1) ( 1)
n n
a a a
jl in j j l
l l
C Q nC Q ns r n l p r l
= =
= + + + − + +∑ ∑
,               (14) 
1 1 2
( )
1 1
( ) ( 1)
n n
a a a
jl j j l
l l
C Q nA ns r n l p r l
= =
′ = + + − +∑ ∑
,                           (15) 
and 
1 1
( )
1 1
( ) ( ) ( 1) ( 1) ( 1)
n n
a a
il jn i i l
l l
C Q nC Q ns r n l p r l
= =
′ ′= + + + − + +∑ ∑
.               (16) 
After taking the difference between the sum of equations (13) and 
(14) and that of equations (15) and (16), we have ( ) ( )( ) ( ) ( ) ( )jl il il jlC Q C Q C Q C Q′ ′+ − +∑ ∑ ∑ ∑
 
2 2
( ) ( )
1 1
( 1) ( 1)
n n
a a
j j l i i l
l l
ns n l p l ns n l p l
= =
    = + − + − + − +        ∑ ∑
 
1 1 1 2 2
( ) ( )
1 1
( 1) ( ) ( )
n n
a a a a a
j j l i i l
l l
r r r n s p l n s p l
= =
  − + + + − +    ∑ ∑
                 
0≥ .                  
(17) 
It implies that Q dominates Q′ . Therefore, repeating this 
interchange argument for all groups which are not sequenced 
according to the SPT rule yields the second part of the theorem. ?  
 
A simple algorithm based on the result of Theorem 2 to determine 
an optimal schedule for the total completion time problem is 
described as follows. 
Algorithm 2. 
Step 1. Sorting the jobs in each group in non-decreasing 
order of their normal processing times ijp , i.e., 
(1) (2) ( )i i i np p p≤ ≤ ≤" , 
1, 2,...,i m= . 
Step 2. Sorting the groups in non-decreasing order of 
 1( )
1
n
a
i i l
l
s p l
=
+∑ . 
 
5.  Conclusion 
Recently, there has been research that assumes the job processing 
times are decreasing functions of their job positions; this is known 
as the learning effect. However, the learning effect is seldom 
discussed in the context of group technology scheduling problems. 
In this paper, we develop a new group scheduling learning model 
where both the setup times and job processing times are shortened 
as jobs and/or groups are scheduled later on a single machine. We 
show that the makespan minimization problem remains 
polynomially solvable. For the total completion time problem, we 
show that the problem remains polynomially solvable under the 
assumption of equal job size within each group and the agreeable 
condition. 
 
Acknowledgements. The authors are grateful to the editor and the 
referees, whose constructive comments have led to a substantial 
improvement in the presentation of the paper. This work was partly 
supported by the National Science Council of Taiwan, Republic of 
