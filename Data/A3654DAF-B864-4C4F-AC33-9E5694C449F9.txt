 2
行政院國家科學委員會專題研究計畫成果報告 
採用快速方塊模式決策機制之 H.264 編碼器 
 Fast Variable Block Size Motion Estimation for H.264 
計畫編號：NSC  94 – 2213 – E – 027 – 015 – 
 執行期限：94 年 8 月 1 日至 95 年 7 月 31 日 
主持人：郭天穎   國立台北科技大學電機系 
計畫參與人員：鄧翔中 盧信儒 晉伯芸 賴正偉 
蕭立賢 林政毅 徐俊傑 
國立台北科技大學電機研究所 
 
一、中文摘要 
 
最新的視訊壓縮系統 H.264/AVC 提供
了七種可變方塊大小動態補償 (variable 
block size motion compensation)。使用不同
方塊大小來執行動態補償能更正確地描述
視訊影像中物體的移動，也因此降低了許
多預測誤差(residual)。然而，在編碼端對
所 有 的 方 塊 模 式 做 動 態 估 測 (motion 
estimation)尋找最佳的方塊模式組合，不但
緩慢且耗費處理器龐大的運算量。我們提
出的方法是根據在一巨方塊中其動態場的
分佈及相關性,來有效地決策適合的方塊模
式。實驗結果證實了我們所提出的決策機
制不但在 位元率-失真 效能的表現上接
近於全搜尋，同時也降低了運算複雜度。 
 
關鍵詞：H.264/AVC、動態估測、最大概
似法、可變區塊大小、區塊模式決策 
 
Abstract 
 
For motion compensation, H.264/AVC 
supports seven inter modes of different block 
sizes and shapes. Variable block size motion 
compensation can represent the motion 
characteristic in a macroblock more 
accurately, and therefore reduce the 
prediction error. However, the motion 
estimation at the encoder end exhaustively 
performed over all modes to find the best 
mode for inter coding is slow and 
computationally involved. The proposed 
method efficiently determines a suitable 
block mode according to the motion field 
distribution and correlation within a 
macroblock. The experimental results show 
that the proposed method reduces a 
considerable amount of complexity at 
encoder, while the R-D performance of the 
proposed method is comparable to that of full 
mode search. 
 
Keywords: H.264/AVC, motion estimation, 
maximum likelihood, variable block size, 
block mode selection 
 
二、緣由與目的 
 
Variable block size motion 
compensation has been adopted by the 
emerging video coding standard H.264 
[1][2][3]. It can represent the motion 
characteristic in a macroblock more 
accurately, and therefore reduces the 
prediction error to achieve high compression 
gains. On the other hand, it causes high 
computational complexity in motion 
estimation at the encoder. Fig. 1 shows the 
seven inter modes of H.264. The motion 
estimation exhaustively performed over all 
modes to find the best mode for inter coding 
is slow and computationally involved. 
In literature, there are several 
approaches to speed up variable block size 
motion estimation for H.264. The 
straightforward one is to directly apply fast 
motion estimation algorithm in H.264. For 
example, in Choi's method[4], sixteen basic 
motion vectors of all 4x4 blocks were found 
by MVFAST (Motion Vector Field Adaptive 
Search Technique)[5]. According to the 
deviation of the basic motion vectors, either 
large diamond search or small diamond 
 4
 
 
Fig.2: The flowchart of the proposed 
FVBSME method 
 
3.1 Prediction by Motion Field 
Classification - PMFC  
 
For motion compensation, H.264 
supports seven inter modes of different block 
sizes and shapes, including the sizes of 
16x16, 16x8, 8x16, 8x8, 4x8, 8x4, and 4x4. 
Thus, we can focus on the predefined 4 
macroblock partition, and use maximum 
likelihood classification to find which mode 
is most likely. 
 
(a) The best mode is mode T1 (Suzie). 
 
 
 
(b) The best mode is mode T4 (Stefan). 
 
Fig. 3: The seed motion vector distribution in 
a macroblock. 
 
Examples of the seed motion vector 
distribution in a macroblock are shown in Fig. 
3, when the best mode is T1, the motion field 
usually forms only one major cluster in it, 
and T4 forms four clusters. We observe that 
each mode forms in the different types of the 
distribution. It motivates us to calculate 
maximum likelihood of the 4 modes Tj, j = 
{1, 2, 3, 4} in Fig. 1(a)-(d). In addition to 
motion field, we also introduce the residual 
(r) into our formulation. The problem is 
formulated as  
 Mode of macroblock partition 
ˆ max ( | , )jjT P T= mv r
( | , ) ( | ) ( )
max
( | ) ( )
j j j
j
P T P T P T
P P
=
mv r r
mv r r
         (1) 
Equation (1) can be simplified as 
ˆ max ( | ) ( | )j jjT P T P T= mv r
, ,
1
max ( | ) ( | )
jN
k k j k k jj k
P mv M P r M
=
= ∏         (2) 
Where Mk,j denotes the kth partition in Tj; Nj 
is the number of partitions in a macroblock, 
and equals to 1, 2, 2, 4 for mode 1 to 4, 
respectively; mvk denotes the seed motion 
vectors belong to the partition Mk. Since, the 
motion field is usually modeled as Laplacian 
distribution. The term ,( | )k k jP mv M in 
Equation(2) can be expressed as 
 6
two clusters are separable when S is larger 
than 2. 
 
3.4 Fast mode Decision for 
Sub-macroblock Partition by Internal 
Motion Characteristic-FMDSP 
 
    We use the corresponding seed motion 
vectors of each sub-macroblock partition 
(size of 8x4 or 4x8) to determine the initial 
search position and search range for motion 
estimation. For each sub-macroblock 
partition, the initial search position is set at 
its corresponding seed motion vector which 
has minimal cost, and the search range for 
motion estimation is determined by 
 
Search range = max( , )x yD D             (10) 
where 
 
max(| ( ) |) min(| ( ) |)
max(| ( ) |) min(| ( ) |)
x
y
D X X
D Y Y
= −
= −
MVs MVs
MVs MVs
    (11) 
MVs  denotes the set of motion vectors in the 
sub-macroblock partition, where ∈MVs mv . 
By comparing the four costs of modes 8x8, 
8x4, 4x8 and 4x4, the one giving the minimal 
cost will be selected as the final mode for 
sub-macroblock partition. 
 
四、結果與討論 
 
    Our experimental environment is based 
on H.264 reference encoder of JM9.8. In 
addition to our proposed algorithm, four 
different methods of variable block-size 
motion search are faithfully implemented 
into JM9.8 for the performance evaluation, 
including two JM9.8 reference methods, fast 
full search (FFS) and fast motion estimation 
(FME)[7][8], and two fast search methods in 
the literature involving fast block mode 
decision by Yin [11] and Lee [15]. 
 
4.1 Comparisons of Coding Efficiency 
 
    First, the coding efficiency of each 
method is evaluated. The R-D curves of each 
method for the test sequences are plotted in 
Figs. 4 (a) to (d). Since the curves are very 
close each other for most cases, we use the 
BDPSNR (Bjontegaard delta PSNR ) and 
BDBR (Bjontegaard delta bitrate) [16] 
recommended by JVT to measure the 
performance difference between methods, 
which basically calculate the average PSNR 
and bitrate distance between two R-D curves 
of two methods, respectively. Table II shows 
the BDPSNR and BDBR of four methods 
using FFS as the comparing basis, because 
the performance of full search theoretically is 
the metrics for the upper bound. The negative 
BDPSNR or positive BDBR indicates the 
coding loss to FFS and is not preferred. In 
Table II, FME provides the best R-D 
performance in terms of BDPSNR, which is 
even slightly better than upper metrics FFS 
by 0.05 dB on average. This phenomenon is 
explained by that the R-D estimator used in 
motion search of JM9.8, as shown in 
Equation (8), may not truly reflect the 
encoded R-D value. Another reason is that 
the differential motion vector encoding, i.e., 
the term of mvdk in Equation (8), is related to 
the block modes of the causal neighboring 
macroblocks, if those block modes are 
determined differently by different methods, 
it may result in different R-D minima (i.e., 
the motion search and block mode decision 
of the target block are optimized based on the 
causal blocks, and not optimized by taking 
the incoming non-causal blocks into account). 
As shown in Table II, our proposed 
algorithm is the second best with two 
sequences performing better than FFS, and 
our average R-D performance is very close to 
FFS with only slight BDPSNR drop 0.05 dB 
or 1.26 percent of bitrate increase. YIN is 
also a good algorithm by 0.07 dB BDPSNR 
decrement, while LEE gives the biggest 
BDPSNR degradation to FFS among all 
methods. 
 
4.2 Comparisons of Computational 
Complexity 
 
    Next we will discuss the computational 
complexity of each method in Tables III. 
Table III lists the speed-up factor of each 
method to FFS based on the execution time 
of total encoding process and that of 
everypart related to the variable block-size 
motion estimation.  As shown in Table III, 
our FVBSME is the fastest algorithm among 
all algorithms, and achieves around 2.26 
 8
 
 
 
 
 
 
                                      
                                      
0 50 100 150 200 250
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
Bit-rate (kbit/s)
P
SN
R
 (d
B)
Container
FFS
FME
FVBSME
YIN
LEE
          
0 50 100 150 200 250 300 350 400 450
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
Bit-rate (kbit/s)
P
SN
R
 (d
B)
Foreman
FFS
FME
FVBSME
YIN
LEE
 
              (a)                                         (b)   
 
0 1000 2000 3000 4000 5000 6000 7000 8000
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
Bit-rate (kbit/s)
PS
NR
 (d
B
)
Mobile
FFS
FME
FVBSME
YIN
LEE
          
0 1000 2000 3000 4000 5000 6000 7000
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
Bit-rate (kbit/s)
PS
NR
 (d
B
)
Tempete
FFS
FME
FVBSME
YIN
LEE
 
(c) (d) 
 
Fig. 4: Rate-Distortion curves comparisons among FFS, FME, YIN, LEE, and proposed 
method FVBSME 
Table III. 
Execution Time Speed-up of FME, YIN, LEE and the proposed FVBSME to FFS. 
Method FME YIN LEE FVBSME
Speed up 
Total 
Encodin
g Time 
Motion 
Estimatio
n Time 
Total 
Encodin
g Time 
Motion 
Estimatio
n Time 
Total 
Encodin
g Time 
Motion 
Estimatio
n Time 
Total 
Encodin
g Time 
Motion 
Estimatio
n Time 
Containe 1.83 2.40 2.11 3.17 2.06 3.12 2.49 4.31 
Foreman 1.64 2.03 1.83 2.51 1.88 2.69 2.18 3.28 
Mobile 1.55 1.92 1.72 2.38 1.77 2.57 2.19 3.58 
Tempete 1.56 1.92 1.76 2.44 1.81 2.62 2.19 3.46 
Average 1.65 2.07 1.86 2.63 1.88 2.75 2.26 3.66 
