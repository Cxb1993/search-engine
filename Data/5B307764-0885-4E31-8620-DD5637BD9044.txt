影像瑕疵偵測與修補技術之研究 
Photo defect detection and inpainting 
計畫編號： NSC 94-2213-E-032 -017 
執行期限： 94/08/01 ～ 95/07/31 
計畫主持人：施國琛 
 
ABSTRACT 
 
Image inpainting (or image completion) techniques use 
textural or structural information to repair or fill 
damaged potions of a picture. However, most techniques 
request a human to identify the portion to be inpainted. 
We developed a new mechanism which can automatically 
detect defect portions in a photo, including damages by 
color ink spray and scratch drawing. The mechanism is 
based on several filters and structural information of 
damages. Old photos from the author’s family are used 
for testing. Preliminary results show that most damages 
can be automatically detected without human involvement.  
The mechanism is integrated with our inpainting 
algorithms to complete a fully automatic photo defects 
repairing system. 
Key words: image inpainting, defect detection, structural 
features, image processing, image restoration 
 
1. INTRODUCTION 
The discussion of image and video inpainting were found 
in the literature. In most image inpainting projects, users 
have to select the defect area. On the other hand, since it 
is impossible to select defects on all video frames, video 
inpainting uses motion estimation, shape features, and 
Kokaram’s model [1] to detect defects such as line scratch 
and spike on video. Unfortunately, motion estimation and 
Kokaram’s models can not be used in defect detection of a 
single photo image. Thus, we propose a naïve but 
effective algorithm to detect photo defects. The detection 
of defects is similar but different from color image 
segmentation [5] to find fore ground objects. The 
detection is also different from finding defects in random 
color textures [4], using color cluster scheme. Basically, 
ink sprayed on image will destroy the homogeneity of a 
photo. Thus, the detection mechanism relies on the 
property of ink (e.g., ink color, shape, and decadence of 
gradient). Our mechanism can further distinguish the two 
types of damages (ink spray and scratch) in different ink 
colors. The proposed algorithms contain several filters, 
which will be discussed in the next section. The 
experimental results include more than 40 damaged 
photos. Some old photos are collected from the author’s 
family history, with real cases of damages. A few photos 
are new photos with real ink spray and scratches scanned 
for testing.  
 
2. THE DEFECT DETECTION ALGORITHM 
 
2.1 The Defect Intensity Detector 
We propose an algorithm which automatically adjusts 
threshold values to achieve the best results of detection. 
We use HSI color space since it is closer to human 
perception. It has been discussed that RGB color space is 
not quite suitable for comparing image colors due to the 
discontinuity of color values. Our experiments on 
different color spaces also reveal that HSI color space can 
be used in several successful examples.  
In this paper, we aim at handling the ink spray defects, 
with an extension to detect scratch by color pens. There 
are plenty type of ink colors, and photo images usually 
contains lots of different colors. Hence, if we try to detect 
ink with color information, it would be almost impossible. 
We consider the intensity and shape of photo defects. 
Though, it is almost not possible to discriminate ink 
regions from objects in photo images. The intensity 
variation of ink regions is usually quite smooth and steady 
while comparing with objects in photos. Thus, we use the 
HSI color space and use intensity in the first filter. We 
decrease the value of I (i.e., intensity) from 255 to 0 at 
each step. In each step, we record the number of pixels 
detected. It has been mentioned that the intensity variation 
of ink is usually low. In decreasing the intensity of a 
photo, the ink part will remain while other parts will be 
filtered, up to an estimated I value. In the second filter, we 
compute a pixel histogram, with pixel numbers on y-axis 
and adjustment of I values on x-axis. That means we 
record the number of pixels been detected in each I 
variation. The histogram is represented as a curve chart in 
our tool (see Figure 1). We calculate the variance of pixel 
number been detected between two different steps of 
adjustment. If the variance is low, it means that pixels 
been detected in the last adjustment are not much affected 
by the present adjustment of I. And the pixels been 
detected are possible to be pixels of ink spray because of 
its steady intensity. Keeping on the calculation of variance 
of pixels been detected, a collection consists of 
consecutive adjustments of I can be constructed. The 
collection needs to be analyzed since sometimes the 
variance of pixels been detected is low only because it has 
low discrimination in a step of I adjustment. Then the 
collection been record has no use and we can’t detect the 
ink. Thus, if the collection of adjustment contains too 
In this section, we present the experimental results from a 
variety of tests. We divide the photos into two categories, 
with damages by spray of color ink (blue, red or black) 
and scratch by ink pen. Examples of defect pictures and 
detections are presented in Figure 2 to 6. Figure 2 shows a 
defect photo by blue ink. In this experiment, we set the 
threshold of object size μ to 10 pixels. Therefore, there are 
some small objects not detected. Figure 3 has defects by 
black ink. The threshold of object size μ is also 10 in this 
case. Note that, the strings in black of figure 3 (a) is not 
changed mostly. 
 
(a) The defect photo 
 
(b) The detection result 
Figure 2: Detection of Defect with Blue Ink Spray 
 
 
(a) The defect photo 
 
(b) The detection result 
Figure 3: Detection of Defect with Black Ink Spray  
 
(a) The original picture (b) The detection result 
Figure 4: Defect Detection with Ink Pen Scratch (some 
thin line scratches are not detected) 
A simple example of scratching defect is shows in Figure 
4. Scratch lines are hard to detect, especially when the line 
is very thin. In figure 4, we take an alternative strategy, 
which use gray levels of image. The gray value detected is 
128. Table 1 summarizes parameters used in our 
algorithm for figures 2 to 6. 
Table 1: Parameters for Defect Detection 
Figures δ α μ Gray value
2 46 300 10  
3 37 100 10  
4  100 5 128 
5(a) 43 100 10  
5(b) 19 100 10  
5(c) 28 100 10  
5(d) 26 100 10  
6(a) 50/37 200 10  
6(b) 50/40 100 10  
6(c) 60/22 200 10  
 
We also consider the type of defects. A naive but effective 
strategy is to compute the ratio of area to perimeter on 
defect objects. We use a line detection algorithm to find 
the approximation of pixel numbers of perimeters. 
Roughly speaking, ink sprays will have a ratio higher than 
line scratches due to shape. In figure 5, we illustrate four 
sets of photos with type of defects separated. We found 
that the ratio of ink spray is usually higher than 1 and the 
ratio of line scratch is close to 1. However, small ink 
spray with a diameter close to line thickness is detected as 
a line. A threshold set to 2.0 is used to separate the two 
types of defects, using red to show ink spray and blue to 
show line scratch. Table 2 shows the ratios of defect 
objects in figure 5. Each photo contains from 2 to 3 defect 
variance of IB is below the threshold α, there is not much 
difference of pixels in IB. No subdivision is required (i.e., 
no need of looking at the next level of details). Thus, the 
algorithm further divides IB into several pixel blocks (i.e., 
PBs). If the percentage of damaged pixels in a PB is too 
high (i.e., greater than β2), the mean color of IB is used. 
One example is that the entire PB is damaged (thus we 
need to use the mean color of IB). Alternatively, if the 
percentage is still high (i.e., greater than β1), the mean 
color of PB is used. Note that, the computation of mean 
colors does not take damaged pixels into the account. If 
the percentage is low, neighbor pixels are used for 
inpainting. Finally, if the color variance of IB is not below 
the threshold α, the algorithm is called recursively to 
handle the next level of details. In the article [6], a 
complete analysis is given to show the inpainted results 
are satisfiable. There are three thresholds in the 
algorithm,α, β1 and β2. We use α = 80, β1 = 85, and β2 = 
95. The experiments to obtain these values are discussed 
in [6]. 
 
 
Algorithm inPaint(block DIB) 
  if DIB is a small block then return 
   for each image block IB 
      if var < α then 
      { 
       for each PB in the image block 
       { 
        if the percentage of damaged pixels in PB > 
β2 
           inpaint the damaged pixels using Mcolor 
else  
if the percentage of damaged pixels in PB 
> β1 
              inpaint the damaged pixels using Ncolor 
        else 
               inpaint the damaged pixels using 
neighbor pixels 
       } 
        for each pixel in the boundary of each PB 
              smooth boundary pixels using neighbor 
pixels 
       }   
      else  
            call inPaint(IB) 
Figure 7. The inpainting algorithm  
 
Figure 8. Damaged Image Block (DIB), Image Block 
(IB) and Pixel Block (PB) 
 
5. PRELIMINARY EXAMPLES 
Some test results of defect photo inpainting are shown in 
Figure 9 and Figure 10. Different categories of real photo 
are tested on different types of defects.  
 
 
(a) The Defect Photo by Ink 
 
(b) The Detected Result 
 
(c) The Inpainting Result 
Figure 9. Inpainting Result of Defect Photo with Black 
Ink Spray 
