Correctness of self-stabilizing algorithms under the Dolev
model when adapted to composite atomicity models
Tetz C. Huang1,∗, Ji-Cherng Lin1, Cheng-Pin Wang1, and Chih-Yuan Chen2
Abstract
In this report, we first clarify that it is not a trivial matter whether or not a self-stabilizing
algorithm under the Dolev model, when adapted to a composite atomicity model, is also
self-stabilizing. Then we employ a particular “simulation” approach to show that if a self-
stabilizing algorithm under the Dolev model has one of two certain forms, then it is also
self-stabilizing when adapted to one of the composite atomicity models, the fair daemon
model. Since most existing self-stabilizing algorithms under the Dolev model have the above-
mentioned forms, our results imply that they are all self-stabilizing when adapted to the fair
daemon model.
Keywords: Silent self-stabilizing algorithm; Composite atomicity; Read/write atomicity; Fair daemon
model; Adaptation of algorithm
1 Introduction
A distributed system consists of a set of loosely connected processors that do not share a global
memory. It is usually modelled by a connected simple undirected graph G = (V,E), with each
node x ∈ V representing a processor in the system and each edge {x, y} ∈ E representing the link
connecting processors x and y. Each processor has one or more shared registers and possibly some
non-shared local variables, the contents of which specify the local state of the processor. Local
states of all processors in the system at a certain time constitute the global configuration (or,
simply, configuration) of the system at that time. The main restriction of the distributed system
is that each processor in the system can only access the data (i.e., read the shared data) of its
neighbors. Since a distributed algorithm is an algorithm that works in a distributed system, it
cannot violate this main restriction. In this report, we adopt the point of view in Dolev et al.
[6]. Thus, an atomic step is the “largest” step that is guaranteed to be executed uninterruptedly.
A distributed algorithm uses composite atomicity if some atomic step contains (at least) a read
operation and a write operation. A distributed algorithm uses read/write atomicity if each atomic
step contains either a single read operation or a single write operation but not both.
∗Corresponding author.
E-mail:cstetz@saturn.yzu.edu.tw
1
The weakly fair daemon model (or, simply, fair daemon model) is a different restricted version
of the distributed daemon model. Precisely, an execution Γ under the distributed daemon model is
called an execution under the fair daemon model if for any suffix Γ′ of Γ, no node can be privileged
infinitely many times without making any move in Γ′. It follows immediately from this definition
that every finite execution is a fair-daemon-model execution.
1.1.2 Dolev’s read/write atomicity model
The above three computational models assume the composite atomicity. A single move (or atomic
step) by a processor consists of reading registers of all its neighbors, making internal computations
and then rewriting its own register (or registers). In 1993, Dolev et al., introduced a new type
of computational model (we shall call it Dolev’s read/write atomicity model, or simply, the Dolev
model) in their famous paper [6] (cf. also [2, 4, 5]). Their model reflects more truthfully a
real distributed system. Firstly, it assumes the more real read/write atomicity. Under such an
assumption, each atomic step in the system consists of internal computations and either a single
read operation or a single write operation. Secondly, under this model, it is assumed that each
processor in the system runs its own program indefinitely and at its own pace; and the running
of the program has to follow the order of the statements in the program. Therefore, algorithms
operating under the Dolev model have different looks from algorithms operating under composite
atomicity models (e.g., one can compare Algorithm DM with Algorithm ADV in Section 2). Under
the Dolev model, the behavior of the system under the action of the algorithm can still be described
by a sequence of configurations Γ = (γ1, γ2, . . .). As in Dijkstra’s central daemon model, in any
configuration γi (i ≥ 1), a unique processor of the system is selected by a daemon to make a move
in the ith step γi → γi+1, which changes the system configuration from γi to γi+1. However, we
should point out that due to the content of the algorithm and the way in which the algorithm is
executed, the selection by this daemon is no longer random here under the Dolev model. In other
words, any execution of the algorithm under the Dolev model has to obey certain restrictions. (In
Section 2, a precise definition of an execution under the Dolev model, given for a certain class of
algorithms in which we are interested, will almost completely reflect such restrictions.)
1.2 Self-stabilization
A distributed algorithm and a subset of executions (of the algorithm under a certain computa-
tional model), called legal executions, are designed to solve a specific problem such as the shortest
path problem, the bridge-finding problem, or the mutual exclusion problem, etc. Legal executions
are designed in such a way that if the system is engaged in any legal execution, the solution of
the problem can be easily seen. For instance, for the single-source shortest path problem, the
legal executions are so designed that in every configuration of any legal execution, a shortest path
between any processor and the source can be identified. A configuration γ is called a safe config-
uration or legitimate configuration (with respect to an algorithm under a particular computational
model) if any execution (of the algorithm under that computational model) starting with γ is a
legal execution.
An algorithm is self-stabilizing under a certain computational model (with respect to a partic-
ular problem) if any execution of the algorithm under that computational model contains a safe
configuration. A self-stabilizing algorithm under a certain computational model is silent if any
3
In Section 5, we consider another abstract form (Algorithm DMM) of a certain class of silent
self-stabilizing algorithms under the Dolev model, and its adapted version (Algorithm ADV′)
to composite atomicity models. Then we sketch a proof to show that Algorithm ADV′ is self-
stabilizing under the fair daemon model. Finally, we provide an example to illustrate the discussion
in this section.
2 Adaptation from Algorithm DM into Algorithm ADV
As before, let G = (V,E) denote a distributed system and for each x ∈ V , let N(x) denote the
set of all neighbors of x. Suppose Algorithm DM is a silent self-stabilizing algorithm under the
Dolev model, with which G is equipped to solve a certain problem. Suppose Algorithm DM has
the following abstract form:
Algorithm DM
{For any node x}
1 repeat forever
2 for each y ∈ N(x) do
3 read (ryx := wy)
4 endfor
5 if wx ̸= Ax(ry1x, ry2x, . . . , ryδ(x)x) then
6 write (wx := Ax(ry1x, ry2x, . . . , ryδ(x)x))
7 endif
8 endrepeat
where
1) wx is a shared register of x, in which x writes and from which all neighbors of x read,
2) ryx is a local variable of x, in which x stores the value that it reads from the shared register
wy of its neighbor y,
3) δ(x) is the number of neighbors of x, and
4) y1, y2, . . . , yδ(x) are all the neighbors of x.
Since Algorithm DM is a silent self-stabilizing algorithm under the Dolev model, a legal ex-
ecution of Algorithm DM is defined to be an execution in any configuration of which the guard
condition [wx ̸= Ax(ry1x, ry2x, . . . , ryδ(x)x)] for each processor x is always false, and ryx = wy always
holds for each processor x and each neighbor y of x. Hence a safe configuration with respect to
Algorithm DM is a configuration in which both conditions [∀x ∈ V , wx = Ax(ry1x, ry2x, . . . , ryδ(x)x)]
and [∀x ∈ V and ∀y ∈ N(x), ryx = wy] hold.
As mentioned previously in Section 1, due to the content of the algorithm and the way in
which the algorithm is executed, any execution of Algorithm DM under the Dolev model has to
obey certain restrictions. For the rigor of our later proofs, we give here a precise definition to an
execution of Algorithm DM under the Dolev model: A sequence Γ = (γ1, γ2, . . .) of configurations
is called an execution of Algorithm DM under the Dolev model if:
5
{For the root r}
1 repeat forever
2 for each y ∈ N(r) do
3 read (read pathyr := write pathy)
4 endfor
5 if write pathr ̸= ⊥ then
6 write (write pathr := ⊥)
7 endif
8 endrepeat
{For any node x ̸= r}
1 repeat forever
2 for each y ∈ N(x) do
3 read (read pathyx := write pathy)
4 endfor
5 if write pathx ̸= min≺lex{rightN(read pathyx ◦ αy(x)) | y ∈ N(x)} then
6 write (write pathx := min≺lex{rightN(read pathyx ◦ αy(x)) | y ∈ N(x)})
7 endif
8 endrepeat
In the above algorithm, for root or non-root x,
1) write pathx is a shared register of x, in which x writes and from which all neighbors of x
read,
2) read pathyx is a local variable of x, in which x stores the value that it reads from the shared
register write pathy of its neighbor y,
3) αx is a pre-given ordering of all the edges incident to x, and αx(y) is the rank of edge {x, y}
in the ordering αx,
4) the value of either write pathx or read pathyx is a sequence of at most N items, where N ≥ n
(the number of nodes in G) is a constant positive integer, and each item in the sequence is
either a positive integer or a special symbol ⊥,
5) ≺lex is a lexicographical order over the set of all finite sequences of at most N items, and ⊥
is the minimal character (for example, (⊥, 1) ≺lex (⊥, 1, 1) ≺lex (⊥, 2) ≺lex (1)),
6) read pathy◦αy(x) is the concatenation of read pathy with αy(x) (for example, if read pathy =
(1, 2, 1) and αy(x) = 3, then read pathy ◦ αy(x) = (1, 2, 1, 3)), and
7) the notation rightN(w) refers to the sequence of the N least significant items of w (for
example, right6(⊥, 3, 2, 1, 2, 1, 1) = (3, 2, 1, 2, 1, 1) and right6(2, 1, 2, 1, 1) = (2, 1, 2, 1, 1)).
Since Algorithm DFS DM is a silent self-stabilizing algorithm under the Dolev model, a legal ex-
ecution of Algorithm DFS DM is defined to be an execution in any configuration of which the guard
conditions “write pathr ̸= ⊥” for the root r and “write pathx ̸= min≺lex{rightN(read pathyx ◦
αy(x)) | y ∈ N(x)}” for each processor x ̸= r are always false, and “read pathyx = write pathy”
7
1. For each i = 1, 2, . . ., let NPi be the set of the nodes which are not privileged in γ
′
i, and PMi
be the set of the nodes which are privileged in γ′i and chosen by the fair daemon to make
moves in the step γ′i → γ′i+1.
2. Define γ1 to be the configuration of the system G equipped with Algorithm DM such that
for each x ∈ V , the value of wx in γ1 is equal to the value of w′x in γ′1; and for each x ∈ V
and each neighbor y of x, the value of ryx in γ1 is equal to the value of w
′
y in γ
′
1.
3. Starting with the configuration γ1,
(a) let nodes in NP1 ∪ PM1 one by one make read operations (i.e., let them execute state-
ments 2-4 of Algorithm DM), and then
(b) let nodes in PM1 one by one make write operations (i.e., let them execute statements
5-7 of Algorithm DM).
(Note that the behavior of the system G under all these operations in (a) and (b) above
can be represented by a finite sequence S1 of configurations starting with γ1. Let the last
configuration of S1 be γ2, that is, S1 = (γ1, . . . , γ2). One can easily see that for each node
x ∈ V , the value of wx in γ2 is equal to the value of w′x in γ′2.)
4. Similarly, for any i ≥ 2, starting with the configuration γi,
(a) let nodes in NPi ∪ PMi one by one make read operations (i.e., let them execute state-
ments 2-4 of Algorithm DM), and then
(b) let nodes in PMi one by one make write operations (i.e., let them execute statements
5-7 of Algorithm DM).
(Note that the behavior of the system G under all these operations in (a) and (b) above
can be represented by a finite sequence Si of configurations starting with γi. Let the last
configuration of Si be γi+1, that is, Si = (γi, . . . , γi+1). One can easily see that for each node
x ∈ V , the value of wx in γi+1 is equal to the value of w′x in γ′i+1.)
5. From the above, we finally obtain an infinite sequence Γ = (γ1, . . . , γ2, . . . , γ3, . . .) of config-
urations of G equipped with Algorithm DM.
Claim. Γ is an execution of Algorithm DM under the Dolev model.
Proof of claim.
(1) According to the above construction process of Γ, it is obvious that except for the initial
configuration γ1, any configuration in Γ is obtained from the preceding configuration after a
processor makes either a single read operation or a single write operation.
(2) Suppose there exists a processor x that makes a read operation only a finite number of times
in Γ. Then there exists a configuration γt in Γ such that x can not make any read operation
after γt. According to the construction process of Γ, for all l ≥ t, x /∈ NPl ∪PMl. Thus, x is
privileged, but is not selected by the fair daemon to make any move in the suffix (γ′t, γ
′
t+1, . . .)
of Γ′. This contradicts the fairness of Γ′. Therefore, any processor makes a read operation
infinitely often in Γ.
9
7 write (wxy := Bx(ry1x, ry2x, . . . , ryδ(x)x))
8 endif
9 endfor
10 endrepeat
where
1) wxy is a shared register of x, in which x writes and from which its neighbor y reads,
2) ryx is a local variable of x, in which x stores the value that it reads from the shared register
wyx of its neighbor y,
3) δ(x) is the number of neighbors of x, and
4) y1, y2, . . . , yδ(x) are all the neighbors of x.
Note that Algorithm DMM can be naturally adapted to composite atomicity models, and the
resulting adapted version is as follows:
Algorithm ADV′
{For any node x}
R1 : w′x ̸= Bx(w′y1 , w′y2 , . . . , w′yδ(x))→ w′x := Bx(w′y1 , w′y2 , . . . , w′yδ(x))
where
1) w′x is the only shared register of x,
2) δ(x) is the number of neighbors of x, and
3) y1, y2, . . . , yδ(x) are all the neighbors of x.
In view of the previous discussion in this report, the following question comes out naturally: If
Algorithm DMM is a silent self-stabilizing algorithm under the Dolev model, is Algorithm ADV′
a silent self-stabilizing algorithm under the fair daemon model?
The answer to the above question is affirmative, as we now sketch its proof: First, we modify
Algorithm DMM (in which each processor maintains for all its neighbors only a unique shared
register) in a natural way into Algorithm DM′ (in which each processor maintains for each of its
neighbors an individual register).
Algorithm DM′
{For any node x}
1 repeat forever
2 for each y ∈ N(x) do
3 read (ryx := wy)
4 endfor
5 if wx ̸= Bx(ry1x, ry2x, . . . , ryδ(x)x) then
6 write (wx := Bx(ry1x, ry2x, . . . , ryδ(x)x))
7 endif
8 endrepeat
where
11
{For node x ̸= s}
1 repeat forever
2 for each y ∈ N(x) do
3 read (ryx := dyx)
4 endfor
5 for each y ∈ N(x) do
6 if dxy ̸= min
z∈N(x)
(rzx + w(x, z)) then
7 write (dxy := min
z∈N(x)
(rzx + w(x, z)))
8 endif
9 endfor
10 endrepeat
In the above algorithm, for any node x, and for any y ∈ N(x),
1) dxy is a shared register of x, in which x writes and from which y reads,
2) ryx is a local variable of x, in which x stores the value that it reads from the shared register
dyx of its neighbor y, and
3) w(x, y) is the weight (or length) pre-assigned to the edge {x, y} connecting x and y.
In view of the results in [10], one can be easily convinced that Algorithm SP DMM is a silent
self-stabilizing algorithm under the Dolev model. Note that Algorithm SP DMM has the form of
Algorithm DMM. So if we apply the above adaptation in this section to Algorithm SP DMM, the
following adapted version to composite atomicity models can be obtained:
Algorithm SP ADV′
{For the source s}
R0 : ds ̸= 0→ ds := 0
{For any node x ̸= s}
R1 : dx ̸= min
z∈N(x)
(rz + w(x, z))→ dx := min
z∈N(x)
(rz + w(x, z))
A slight modification of Algorithm SP DMM (in which each processor maintains for each of its
neighbors an individual register) gives us Algorithm SP DM′ (in which each processor maintains
for all its neighbors only a unique shared register).
Algorithm SP DM′
{For the source s}
1 repeat forever
2 for each y ∈ N(s) do
3 read (rys := dy)
4 endfor
5 if ds ̸= 0 then
6 write (ds := 0)
7 endif
13
ecb
da
2)( =dcα
1)( =cdα2)( =baα
3)( =edα3)( =eaα
1)( =bcα2)( =cbα
1)( =acα
2)( =adα1)( =daα
r
3)( =reα
1)( =erα
1)( =aeα 2)( =deα
Figure 1: A distributed system G labelled with edge ranks.
[3] E.W. Dijkstra, Self-stabilizing systems in spite of distributed control, Comm. ACM, vol. 17,
643-644, 1974.
[4] S. Dolev, Self-stabilization, MIT Press, 2000.
[5] S. Dolev, A. Israeli, and S. Moran, Self-stabilization of dynamic systems assuming only
read/write atomicity, In 9th Annual ACM Symposium on Principles of Distributed Computing,
Quebec, Canada, pp. 103-117, 1990.
[6] S. Dolev, A. Israeli, and S. Moran, Self-stabilization of dynamic systems assuming only
read/write atomicity, Distrib. Comput., vol. 7, 3-16, 1993.
[7] S. Ghosh and A. Gupta, An exercise in fault-containment: Self-stabilizing leader election,
Inform. Process. Lett., vol. 59, 281-288, 1996.
[8] S. Ghosh, A. Gupta, T. Herman, and S.V. Pemmaraju, Fault-containing self-stabilizing algo-
rithms, In 15th ACM Symposium on Principles of Distributed Computing, Philadelphia, USA,
pp. 45-54, 1996.
[9] S. Ghosh, A. Gupta, and S.V. Pemmaraju, A fault-containing self-stabilizing spanning tree
algorithm, J. Comput. Inform., vol. 2, 322-338, 1996.
[10] T.C. Huang, A self-stabilizing algorithm for the shortest path problem assuming read/write
atomicity, J. Comput. Syst. Sci., vol. 71, 70-85, 2005.
[11] S.T. Huang and N.S. Chen, A self-stabilizing algorithm for constructing breadth-first trees,
Inform. Process. Lett., vol. 41, 109-117, 1992.
15
[20] V. Turau, Linear self-stabilizing algorithms for the independent and dominating set problems
using an unfair distributed scheduler, Inform. Process. Lett., vol. 103, 88-93, 2007.
[21] V. Turau, B. Hauck, A self-stabilizing algorithm for constructing weakly connected minimal
dominating sets, Inform. Process. Lett., vol. 109, 763-767, 2009.
[22] C.H. Tzeng, J.R. Jiang, S.T. Huang, A self-stabilizing (∆ + 4)-edge-coloring algorithm for
planar graphs in anonymous uniform systems, Inform. Process. Lett., vol. 101, 168-173, 2007.
17
國科會補助計畫衍生研發成果推廣資料表
日期:2011/09/27
國科會補助計畫
計畫名稱: 多勒夫計算模式下的自我穩定演算法改版成讀寫合併計算模式下的演算法後
的正確性
計畫主持人: 黃哲志
計畫編號: 99-2221-E-155-050- 學門領域: 計算機理論與演算法
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
