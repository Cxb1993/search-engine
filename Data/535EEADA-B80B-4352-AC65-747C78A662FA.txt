自動機與有限狀態機方程解於數位電路最佳化之應用（第 3 年） 
Digital Circuit Optimization through Automata/FSM Equation Solving 
計畫編號：95-2218-E-002-064-MY3 
執行期間：95 年 10 月 1 日至 98 年 9 月 30 日 
計畫主持人：江介宏副教授 台灣大學電機系暨電子所  
 
摘要 
數位電路的最佳化問題在資訊科技的發展扮演著非
常重要的角色。當一個系統由許多模組所組成，系統
最佳化的有效方法是藉由疊代的方式，漸進式的進行
最佳化，並在各步驟中確認每一步驟的改善與正確
性。自動機/ 有限狀態機方程式 X•Context ⊆ Spec 的
解可用來處理上述最佳化問題。(在此方程中，X 為
我們所要求得的未知模組，Context 為X 所處的環境
電路，而Spec 為所要設計電路的總體規格。我們可
將此方程解讀為：若我們將X 置於Context 環境電路
下，這X 與Context 連接後的系統行為，不能超出Spec 
的規範。) 此方程式的最大解包含了所有“等效”於所
要處理模組的所有可能實現方式。因而我們能從此最
大解中，更進一步根據電路設計要求(像是可靠性、系
統容錯能力、通訊線路最小數目、延遲、面積…等) 挑
選出最理想的解來實現此模組。基於此優點，找尋自
動機/有限狀態機方程式的最大解成為極重要的課題。 
在此國際合作計畫，主要研發成果包括：第一
年的函數關聯性 (functional dependency) 計算
[1,2]，電路再合成(circuit resynthesis)[3]，結
合結構與狀態分析之高效率有限狀態機初始化方法
[4]，數學歸納法於時序電路再時整再合成(retiming 
and resynthesis)之等同驗證技術[5]，新演算法做
同步語言方程(synchronous language equation)的
構 組 步 進 (compositional progressive) 求 解
[6.7]。第二年的最佳化要求探究[8]，時序電路之拆
解最佳化方法[9,10,11]，具確定限狀轉換之有限狀態
機的最大解化簡[12]，平行有限狀態機方程之最大步
進解[13][14]，二元函數分解[15]，Ashenhust 函數分
解 [16] 。 第 三 年 的 非 決 定 性 布 林 關 係
(non-deterministic Boolean relation)之函數粹取
[17]，利用無關項(don’t care)之電路最佳化[18]，
電路對稱性最佳化[19]，量詞消去技術[20]，ω-語言
之平行等式求解[21,22]，電路最佳化軟體[23] ，語
言方程解於測試技術之運用[24]等。 
關鍵詞 
自動機/ 有限狀態機方程，語言方程，電路最佳化 
Abstract 
The optimization problem for digital circuits is well 
known and remains a challenging problem for 
developing new information technologies. When a 
system has a modular structure, the best approach for its 
optimization seems to be an iterative optimization along 
with a checking at each step for conformance and 
improvement. Such an approach can be done based on 
solving an automata/FSM equation X • Context ⊆ Spec. 
(This equation has to be solved in order to capture all the 
machines that combined with all other component 
machines (Context) keep the reference behavior Spec of 
the overall composition.) A general solution to this 
equation can be viewed as a reservoir for all possible 
implementations of a component of interest, from which 
an optimal implementation can be chosen with respect to 
design criteria such as reliability, fault-tolerance, 
minimal number of communication lines, delay, area, etc. 
The main problem to apply the approach is the 
formidable computational complexity as the Context and 
Spec are too sophisticated in practical sequential circuits. 
To decrease the complexity, a windowing approach is 
proposed, where a component is optimized only with 
respect to its immediate neighbor modules. In this case, a 
single equation is replaced by a collection of smaller 
equations. Moreover, there are other problems that 
also discussed quantifier elimination in quantified 
Boolean formulas and some other applications of 
FSM/automata equation solving. In particular, we 
showed how automata equation solving can be used in 
supervisory control theory for optimizing supervisors 
and how equation solving can be used for testing digital 
circuits.  
2. Main Results 
In addition to the research reported for the previous two 
years, we summarized our third year results as follows. 
This year, we studied the problem of the 
determinizing a nondeterministic Boolean relation when 
optimizing digital circuits.  Boolean relations are an 
important tool in system synthesis and verification to 
characterize solutions to a set of Boolean constraints. For 
physical realization as hardware, a deterministic function 
often has to be extracted from a relation. A frame for 
optimization is extracted from a digital circuit; the 
extracted frame is divided into two parts and the 
maximum flexibility for each part is provided by the 
largest solution to an appropriate FSM equation 
represented as a nondeterministic Boolean relation. We 
check whether one or some output functions of each part 
can be replaced by a simpler function, while preserving 
the behavior of the overall fragment. As symmetric 
functions are useful in many applications [29], the 
analysis is performed whether symmetric functions can 
be used when implementing each part of the frame. We 
also continue our theoretical study of FSM/automata 
equation solving and discuss how FSM/automata 
equations can be used for optimizing supervisors [30] 
and for testing digital circuits. 
2.1  Determinizing Non-Deterministic 
Boolean Relations 
When optimizing a circuit, we iteratively extract a 
combinational frame of an appropriate size from a given 
digital circuit, represent it as a sequential composition of 
two combinational component circuits (head and tail 
components) and optimize them based on the idea that in 
general, a number of combinational circuits can replace a 
head (or a tail) component without changing the 
behavior of the overall frame. All permissible 
replacements are represented by a nondeterministic 
Boolean relation that is derived as the largest solution to 
an appropriate FSM equation.  The extraction of an 
optimal implementation then is reduced to extracting 
from the nondeterministic relation an optimal 
deterministic relation according to some optimization 
criteria. Two approaches are used when extracting such a 
deterministic relation.  
In the first approach, we check whether one or some 
output functions of each part can be replaced by a simple 
function of two primary input variables that can be 
implemented as a single gate, while preserving the 
behavior of the overall fragment.  
From the scalability standpoint the second 
approach demonstrates how interpolation can be 
exploited to extend determinization capacity. A 
comparative study is performed on several proposed 
computation techniques.  Experimental results show 
that Boolean relations with thousands of variables can be 
effectively determinized and the extracted functional 
implementations are of reasonable quality. 
2.2 Quantifier Elimination via Functional 
Composition 
The following basic question is posed in [20]: Given a 
quantified Boolean formula ∃x.ϕ, what should a 
function/formula f be such that substituting f for x in ϕ 
yields a logically equivalent quantifier-free formula? Its 
answer leads to a solution to quantifier elimination in the 
Boolean domain, alternative to the conventional 
approach based on formula expansion. Such a composite 
function can be effectively derived using symbolic 
techniques and further simplified for practical 
applications. In particular, Craig interpolation is 
functions.  
We propose a procedure for determinizing a 
nondeterministic relation in order to get a frame that 
implements Boolean functions with high degree of 
symmetry. By exploiting the circuit flexibility of 
multi-level logic, we derive a system of symmetric 
Boolean functions that can be used to rewrite a circuit. 
Through such rewriting, more symmetric signals are 
present in the circuit, which may be used later in the 
electronic design automation (EDA) flow for 
optimization. 
2.7 Software Implementation 
Software packages for optimizing digital circuits, 
including functional extraction from Boolean relations, 
quantifier elimination, and flexibility derivation and 
simplification of digital circuits have been developed. 
Joint experiments conducted by researchers at Tomsk 
State University and National Taiwan University for a 
set of benchmark suits were performed. The preliminary 
experimental results show that using the developed 
packages the number of gates of a digital circuit as well 
as the length of paths from primary inputs to primary 
outputs can be reduced. 
3. Accomplishments and Future Work 
In the third year of the project, in addition to 
digital circuit optimization based on equation solving, 
we explored ways of circuit optimization through the 
determinization of a nondeterministic Boolean relation.  
This project in the three years has in part led to 
publications [1-24], including several papers in the most 
prestigious conferences of the field of electronic design 
automation (EDA) and formal verification, and in 
outstanding journals such as Discrete Event Dynamic 
Systems and IEEE Transaction on Computers. Further 
results are under preparation for publication. During the 
course of the international joint project, many important 
research subjects are identified and joint computer 
experiments have been conducted. 
Based on our results, we are looking forward to 
continuing the international collaboration to make 
important contributions on the optimization and 
verification of digital circuits. 
References 
[1] C.-C. Lee, J.-H. R. Jiang, C.-Y. Huang, and A. 
Mishchenko. Scalable Exploration of Functional 
Dependency by Interpolation and Incremental SAT 
Solving. In Proc. IEEE/ACM Int’l Conf. on 
Computer-Aided Design, 2007. 
[2] J.-H. R. Jiang, C.-C. Lee, and A. Mishchenko, C.-Y. 
Huang. To SAT or Not to SAT: Scalable 
Exploration of Functional Dependency. IEEE Trans. 
on Computers, (to appear). 
[3] A. Mishchenko, R. Brayton, J.-H. R. Jiang, and S. 
Jang. SAT-based logic optimization and resynthesis. 
In Proc. Int’l Workshop on Logic and Synthesis, 
2007.  
[4] Chun-Min Li. Effective FSM Initialization through 
Graph- and State-based Techniques. Master’s 
Thesis, National Taiwan University, 2007. 
[5] J.-H. R. Jiang and W.-L. Hung. Inductive 
equivalence checking under retiming and 
resynthesis. Accepted to. IEEE/ACM Int’l Conf. on 
Computer-Aided Design, 2007. 
[6] N. Yevtushenko, T. Villa, R. K. Brayton, A. 
Petrenko, and A. L. Sangiovanni-Vincentelli. 
Compositionally progressive solutions of 
synchronous FSM equations. Discrete Event 
Dynamic Systems, 2008, 18, pp. 51-89, 2008. 
[7] T. Villa, S. Zharikova, N. Yevtushenko, R. Brayton, 
and A. Sangiovanni-Vincentelli. A new algorithm 
for the largest compositionally progressive solution 
of synchronous language equations. In Proc. Great 
Lake Symposium on VLSI, (GLSVLSI) 2007. 
[24] A.Petrenko, N. Yevtushenko, T. Villa. Testing in 
Context and Synthesis of the Unknown Component: 
Two Faces of the Same Coin. In Proc. Int’l 
Workshop on Logic and Synthesis, 2009. 
[25] A. Mishchenko and R. Brayton. A theory of 
nondeterministic networks. In Proc. IEEE/ACM 
Int’l Conf. on Computer Aided Design, 2003. 
[26] N. Yevtushenko, T. Villa, R. Brayton, A. Petrenko, 
and A. Sangiovanni-Vincentelli. Solution of parallel 
language equations for logic synthesis. In Proc. 
IEEE/ACM Int’l Conf. on Computer Aided Design, 
2001. 
[27] S. Zharikova and N. Yevtushenko. Minimization of 
communication wires in FSM composition.  In 
Proc. IEEE EAST-WEST Design and Test 
Symposium, 2006. 
[28] J.-H. R. Jiang and R K. Brayton. Functional dependency 
for verification reduction. In Proc. Computer Aided 
Verification, pp. 268-280, 2004. 
[29] J. Zhang, A. Mishchenko, R. K. Brayton, and M. 
Chrzanowska-Jeske, “Symmetry detection for large 
Boolean functions using circuit representation, simulation, 
and satisfiability,” in Proc. Design Automation 
Conference, pp. 510-515, 2006. 
[30] P.J. Ramadge, W.M. Wonham, “The Control of Discrete 
Event Systems”, Proceedings of the IEEE, Vol. 77, No. 1, 
1989, pp. 81-98. 
[31] A. Petrenko, N. Yevtushenko, G. Bochmann, and R. 
Dssouli. Testing in context: framework and test 
derivation. Computer Communications, Vol. 19, pp. 
1236-1249, 1996. 
[32] A. Petrenko and N. Yevtushenko. Testing from 
Partial Deterministic FSM Specifications, IEEE 
Transactions on Computers, 2005, Vol. 54, No. 9, 
pp.1154-1165. 
 
Similar Programs” by Ofer Strichman (Technion, Israel). My presentation about “Quantifier 
Elimination via Functional Composition” was on Day 2 (6/30, Tuesday) morning.  
 
二、與會心得 
CAV is one of the flagship venues in the verification field. Many distinguished researchers are 
frequent participants. The technical papers were grouped into 12 sessions. Aside from two tool 
sessions, the session topics include concurrency, decision procedures, reduction techniques, 
program termination, hybrid systems, composition and probability, games, and applications. Due to 
the emerging multi-core hardware architectures, concurrency and memory issues gain much 
research attention. Progress of satisfiability (SAT) solvers encouraged the development of 
satisfiability modulo theories (SMT) solvers and other decision procedures. These decision 
procedures make verification more practical and applicable to larger and broader verification 
instances. Among other subjects, the application of verification techniques on biological systems is 
in its infancy and has great potential to have high impact results. More and more research attentions 
have been attracted to the automation of analyzing and designing biological systems. There are 
many efforts devoted to the software development for simulating, analyzing, and synthesizing 
biological systems. Interdisciplinary collaborations are essential to make important contributions. 
Taking part in this emerging area may turn out to be promising and fruitful. 
 
三、攜回資料 
Proceedings of CAV 2009 
 
decision diagrams (BDDs), and-inverter graphs (AIGs), and other data struc-
tures for Boolean function representation and manipulation can be adopted
for the computation. BDDs tended to be a popular approach to such compu-
tation, the so-called image computation [3]. BDD-based computation how-
ever has its intrinsic memory-explosion limitation. On the other hand, recent
progress in AIG packages [14, 13] has made AIG-based quantiﬁcation a viable
alternative to BDD-based one. For example, AIGs have been directly used
in unbounded model checking [17]. Our approach to quantiﬁer elimination
also uses AIGs extensively.
Normal-form conversion. Eliminating the existential (respectively universal)
quantiﬁer of formula ∃x.ϕ (respectively ∀x.ϕ) is easy1 when ϕ is in dis-
junctive normal form (DNF) (respectively conjunctive normal form (CNF)).
Thereby the normal-form conversion between CNF and DNF can be ex-
ploited for quantiﬁer elimination, as was suggested in [15] in application to
unbounded model checking.
Satisﬁability solving. Using a decision procedure, the quantiﬁer-free equiva-
lent of ∃x.ϕ can be generated by searching through all satisfying assignments
to the non-quantiﬁed variables. By collecting these satisfying assignments,
one can construct an equivalent quantiﬁer-free formula. A detailed exposition
of this method can be found, e.g., in [7] and the references therein.
Despite these existing approaches, there is not a single best one to quantiﬁer
elimination for all problem instances. Diﬀerent approaches may have their own
strengths and weaknesses.
This paper adds to the above list a new item, a compositional approach
to quantiﬁer elimination, which is by nature closer to the formula-expansion
approach. We ask, given a quantiﬁed Boolean formula ∃x.ϕ, what should a func-
tion/formula f be such that substituting f for x in ϕ, denoted as ϕ[x/f ], yields
a logically equivalent quantiﬁer-free formula. This paper characterizes the com-
plete ﬂexibility of such a composite function f . Furthermore, an eﬀective and
scalable derivation of f with reasonable quality is proposed using Craig inter-
polation. An analysis shows that, under the sparsity assumption of ϕ (which is
common in certain practical applications), the new compositional approach is
superior to the conventional one based on formula expansion. Practical expe-
rience suggests that the new approach often yields much more compact AIGs
than the conventional one when the sparsity condition holds. Several problem in-
stances that suﬀer from exponential blow-up by formula expansion are eﬀectively
resolvable by functional composition.
Quantiﬁer elimination in ﬁrst-order logic is much more complicated and rel-
atively less explored. In fact, exhaustive formula expansion does not work in
ﬁrst-order logic as variables can take on inﬁnite values. Moreover, not every
1
When ϕ is in DNF and CNF, respectively, removing every appearance of literals
x, ¬x and the so-induced illegal logic connectives from ϕ yields a quantiﬁer-free
equivalent of ∃x.ϕ and ∀x.ϕ, respectively. So the computation is achievable in linear
time and the size of the resultant quantiﬁer-free formula is non-increasing compared
to that of ϕ.
there is a unique structure B with |B| = {0, 1}. In propositional logic, the
positive and negative cofactors of formula ϕ with respect to variable x are ϕ[x/1]
and ϕ[x/0], respectively.
Propositional satisﬁability and Craig interpolation. A brief introduc-
tion to SAT solving and circuit-to-CNF conversion, essential to our development,
can be found in [16]. To introduce terminology and convention for later use, we
restate the following theorem.
Theorem 1 (Craig Interpolation Theorem). [5]
Given two Boolean formulas φA and φB, with φA ∧ φB unsatisﬁable, then there
exists a Boolean formula ψA referring only to the common variables of φA and
φB such that φA → ψA and ψA ∧ φB remains unsatisﬁable.
The Boolean formula ψA is referred to as the interpolant of φA with respect
to φB . Modern SAT solvers can be extended to construct interpolants from
resolution refutations [16]. In the sequel, we shall assume that Boolean functions,
circuits, and interpolants are represented using AIGs, which can be converted
to CNF formulas in polynomial time.
3 Propositional Logic
In this section we consider quantiﬁer elimination of propositional logic aug-
mented with quantiﬁers over propositional variables.
3.1 Composability for Quantiﬁer Elimination
Putting propositional logic in the context of ﬁrst-order logic, we note that it
has a unique structure/interpretation. Under this unique structure, terms, func-
tions, predicates, and formulas all coincide. This simplicity is crucial to the
following development for propositional logic, and will become apparent when
we encounter ﬁrst-order logic.
Theorem 2. A quantiﬁed Boolean formula ∃y.ϕ(x, y) is logically equivalent to
the quantiﬁer-free formula ϕ(x, f(x)) for some function f : Bn → B if and only
if every pair a ∈ Bn, b ∈ B with f(a) = b satisﬁes ϕ(a, b) ∨ ∀y.¬ϕ(a, y).
Proof. (=⇒) For f(a) = b, then ϕ(a, f(a)) = ϕ(a, b). If ϕ(a, b) is true, then
∃y.ϕ(a, y) is true. On the other hand, if ¬ϕ(a, b) is true, then ¬∃y.ϕ(a, y) is true
due to the logical equivalence between ϕ(x, f(x)) and ∃y.ϕ(x, y). Hence every
pair a ∈ Bn, b ∈ B with f(a) = b satisﬁes ϕ(a, b) ∨ ∀y.¬ϕ(a, y).
(⇐=) For the sake of contradiction, assume ∃y.ϕ(x, y) and ϕ(x, f(x)) are
not logically equivalent. Then there exists some a ∈ Bn such that ¬∃y.ϕ(a, y) ∧
ϕ(a, f(a)) or ∃y.ϕ(a, y) ∧ ¬ϕ(a, f(a)). The former is trivially unsatisﬁable; the
latter contradicts with the premise, ϕ(a, f(a)) ∨ ∀y.¬ϕ(a, y).
In essence the above theorem answers the following question: Given a quantiﬁed
Boolean formula ∃y.ϕ(x, y), what should a function f be such that the compo-
sition ϕ(x, f(x)) equals ∃y.ϕ? It also implies the existence of such a function.
Interpolation can be seen as a way to derive simple functions as long as the
don't-care set is reasonably large. When the don't-care set is large, proving the
unsatisﬁability of φA ∧ φB is easy and the corresponding refutation proof is
simple. So the interpolant size (in term of AIG nodes) is likely to be small.
3.3 Analysis of Applicability
We compare expansion- and composition-based quantiﬁer-elimination procedures
assuming that AIGs are the underlying data structure. The AIG sizes of ϕ[y/0]∨
ϕ[y/1] and ϕ[y/f(x)] are analyzed.
The AIGs of ϕ[y/0] and ϕ[y/1] are obtained from ϕ through constant prop-
agation. From practical experience, the sizes of ϕ[y/0] and ϕ[y/1] are rarely
reduced much, especially for large AIGs. It is possible to apply aggressive mini-
mization using don't cares. Speciﬁcally, in building ϕ[y/0]∨ϕ[y/1], ϕ[y/0] can be
used as the don't-care condition to minimize ϕ[y/1], or vice versa (but simultane-
ous minimization of ϕ[y/0] and ϕ[y/1] is forbidden). For instance, in minimizing
ϕ[y/1] using don't-care condition ϕ[y/0], the optimization is constrained by
φA = ϕ[y/1] ∧ ¬ϕ[y/0] and (3)
φB = ¬ϕ[y/1] ∧ ¬ϕ[y/0] (4)
being the tightest onset and oﬀset, respectively. Notice that interpolation or
other symbolic techniques can be applied here to extract a function, say f ′,
hopefully simpler than ϕ[y/1]. So ϕ[y/0]∨f ′ can be simpler than ϕ[y/0]∨ϕ[y/1]
for quantiﬁer elimination. (With interpolation, such simpliﬁcation however was
not empirically observed in our experiments. It may be due to the small size of
the don't-care set, which results in ineﬀective interpolation.)
2
Observe that Equations (1) and (3) are identical, whereas Equations (2) and
(4) diﬀer only in the second term. This slight diﬀerence in fact makes substantial
impact on interpolation. When ϕ is a sparse function (with relatively few onset
minterms), ϕ[y/0] is very likely a sparse function as well. In this case, the oﬀset
corresponding to φB of Equation (2) is much smaller than that of Equation (4).
Accordingly, proving the unsatisﬁability of φA ∧ φB of Equations (1) and (2) is
easier to establish than that of Equations (3) and (4). The derived interpolant
with respect to Equations (1) and (2) can be much smaller. On the contrary, for
dense function ϕ the derived interpolant with respect to Equations (3) and (4)
can be smaller.
The above sparsity condition commonly holds in practical applications. For
instance, the transition relation built up from a set of transition functions of a
sequential system appears to be sparse. In fact, the more the transition functions
2
Practical experience suggests that the size of an interpolant can be sensitive to the
amount of don't cares. It was observed that, for a function f , the AIG size of the
interpolant of φA = f and φB = ¬f (i.e., interpolation without don't cares) is typi-
cally much (e.g., two orders of magnitude) larger than that of f . Therefore, quantiﬁer
elimination of ∃y.ϕ(x,y) by interpolating φA = ϕ(x,y) and φB = ¬∃y.ϕ(x,y) is
ineﬀective.
Unlike propositional logic, the nice coincidence of terms, functions, predi-
cates, and formulas no longer holds in predicate logic. In fact all of them are
distinct. Terms are built up from constant symbols, variables, and function sym-
bols. They represent names of objects and should be distinguished from func-
tions. Substituting terms for variables is legitimate, but substituting functions
or formulas for variables is not. Quantiﬁer elimination through substitution is
achievable only when a function can be conditionally expressed by a ﬁnite set of
terms. Therefore quantiﬁer elimination by exhaustive formula expansion does not
work in predicate logic. Diﬀerent from propositional logic, a function in predicate
logic may not be always expressible with a single term, and sometimes not even
ﬁnitely expressible. With these diﬀerences in mind, we generalize Theorem 2 in
the context of predicate logic as Theorems 3 and 4.
Theorem 3. Given a ﬁrst-order language L and a structure A, if a formula
∃y.ϕ(x, y) is equivalent to
ϕ[yi/tf ] = ϕ(x, tf ),
by substituting for y some term tf (ﬁnitely expressible in the language) that
represents f(x) for some function f : |A|n → |A|, then ϕ(a, b) ∨ ¬∃y.ϕ(a, y) is
satisﬁed for any a ∈ |A|n, b ∈ |A| with f(a) = b.
Unlike the necessary and suﬃcient condition of Theorem 2, the converse of Theo-
rem 3 is not true because in general the composite function f may not be ﬁnitely
expressible in the language. For ﬁnitely expressible f , however, the converse holds
by Theorem 4.
Theorem 4. Given a formula ϕ(x, y) of some ﬁrst-order language L and a
structure A, if a function f : |A|n → |A| with f(a) = b satisfying ϕ(a, b) ∨
¬∃y.ϕ(a, y) is ﬁnitely expressible in the language with
f =

f1 if γ1
.
.
.
fm if γm
such that each fi can be expressed with some term tfi , where guard γi is the
predicate deﬁning the applicability of fi over |A|n, then the quantiﬁed formula
∃y.ϕ(x, y) is equivalent to ∨
i
γi ∧ ϕ(x, tfi).
The above theorems can be applied for universal quantiﬁer elimination by
∀x.ϕ = ¬∃x.¬ϕ, and thus work for nested quantiﬁer elimination.
With the following examples, we illustrate the usefulness of the complete
ﬂexibility of a composite function to simplify quantiﬁer elimination.
Example 1. Consider the ﬁrst-order language LG with equality, 1-place function
symbol S, 2-place predicate symbol R. Let structure A= ({0, . . . , 4};S (successor
ϕ asserts that x is greater than 1, y is greater than x, and, if y is prime, then x
is prime. By the property of Mersenne numbers, the quantiﬁcation of ∃y.ϕ can
be eliminated by substituting 2x − 1, shorthand for S−1(S(S(0))Ex), for y in ϕ
as
(S(0) < x) ∧ (x < (2x − 1)) ∧ (∀a,∀b.((2x − 1) = a · b→ (a = S(0) ∨ b = S(0)))
→ ∀a,∀b.(x = a · b→ (a = S(0) ∨ b = S(0)))),
which can be further simpliﬁed to
(S(0) < x) ∧ (∀a, ∀b.((2x − 1) = a · b→ (a = S(0) ∨ b = S(0)))
→ ∀a,∀b.(x = a · b→ (a = S(0) ∨ b = S(0)))).
Example 3. Consider the following ﬁrst-order formula over real closed ﬁelds.
(The notation and symbols are used in the conventional arithmetic sense.)
∃x.(a · x2 + c = 0) (5)
Let
f(a, c) =
{√−c/a if c/a < 0 or c/a = 0
0 if 0 < c/a
.
(For 0 < c/a, the value of f(a, c) can be arbitrary and is set to 0.) Quantiﬁer
elimination by substituting f(a, c) for x in Equation (5) yields
((c/a < 0 ∨ c/a = 0) ∧ a · (
√
−c/a)2 + c = 0) ∨ (0 < c/a ∧ a · 02 + c = 0),
which can be simpliﬁed to c/a < 0 ∨ c/a = 0. Alternatively, let
f(a, c) =
√√
(−c/a)2.
The corresponding quantiﬁer-free formula becomes
a ·
(√√
(−c/a)2
)2
+ c = 0.
As this paper focuses on the characterization of the complete ﬂexibility of
a composite function, how to eﬀectively exploit such ﬂexibility in simplifying
quantiﬁer elimination in predicate logic remains an open problem. In fact inter-
polation is not directly extensible to generate composite functions due to the
diﬀerence between formulas and functions in predicate logic.
5 Experimental Results
The proposed compositional approach to quantiﬁer elimination was implemented
in the ABC package [1]; the experiments were conducted on a Linux machine
with Xeon 3.4GHz CPU and 6Gb RAM.
Table 1. Quantiﬁer elimination with formula expansion and functional composition.
circuit (#in, #reg, #n, #l)
rel before QE QE-Exp QE-Cmp
#n #l #n #l time mem #n #l time mem
prolog (36, 136, 1656, 26) 1474 29     1088 31 6.27 38.0
s1196 (14, 18, 529, 24) 548 22 3473 21 5.15 37.3 21881 2532 123.15 37.3
s1269 (18, 37, 569, 35) 622 37 31005 39 59.24 37.5 1694 116 41.05 37.5
s13207.1 (62, 638, 8027, 59) 5272 45     4741 44 50.60 40.6
s1423 (17, 74, 657, 59) 757 63 17619 59 25.45 38.1 3142 452 6.19 38.1
s1488 (8, 6, 653, 17) 686 19 1269 21 2.90 38.1 515 48 3.82 38.1
s1494 (8, 6, 647, 17) 696 20 1261 21 2.98 38.1 607 42 2.54 38.1
s1512 (29, 57, 780, 30) 697 28 1187 24 2.64 37.7 823 53 3.78 37.7
s15850.1 (77, 534, 9786, 82) 5679 57     180597 14247 49409.27 427.4
s208.1 (10, 8, 104, 11) 103 14 65 11 0.08 37.4 49 12 0.06 37.4
s298 (3, 14, 119, 9) 157 15 117 12 0.08 37.4 122 12 0.23 37.4
s3271 (26, 116, 1573, 28) 1565 32 1549 29 3.08 38.0 1604 62 7.11 38.0
s3330 (40, 132, 1789, 29) 1434 29     1029 28 6.37 38.0
s3384 (43, 183, 1702, 60) 1801 63 1307 58 6.94 38.3 1276 58 17.29 38.3
s344 (9, 15, 160, 20) 164 19 140 19 0.33 37.1 155 19 0.81 37.1
s349 (9, 15, 161, 20) 168 19 140 19 0.26 37.5 155 19 0.82 37.5
s382 (3, 21, 158, 9) 220 19 179 16 0.10 37.7 189 16 0.27 37.7
s38417 (28, 1636, 22397, 47) 15762 44 15705 40 44.79 48.7 18865 106 149.13 46.8
s38584.1 (38, 1426, 19407, 56) 18094 48 57105 45 1382.97 71.4 38089 1362 268.94 46.0
s386 (7, 6, 159, 11) 189 15 217 16 0.62 37.8 166 25 0.48 37.8
s400 (3, 21, 162, 9) 228 20 180 16 0.13 37.7 190 16 0.27 37.7
s420.1 (18, 16, 218, 13) 223 17 137 19 0.03 37.4 105 20 0.05 37.4
s444 (3, 21, 181, 11) 234 19 179 16 0.09 37.6 191 16 0.24 37.6
s499 (1, 22, 152, 12) 274 25 299 17 0.10 37.4 368 31 0.22 37.4
s510 (19, 6, 211, 12) 236 16 431 21 1.08 37.7 177 13 1.49 37.7
s526 (3, 21, 193, 9) 284 16 188 17 0.09 37.6 210 14 0.27 37.6
s5378 (35, 164, 2779, 25) 1995 25 957759 43 63744.28 49.1 37072 2602 415.18 38.5
s635 (2, 32, 286, 127) 317 42 312 35 0.21 37.6 280 42 0.28 37.6
s641 (35, 19, 379, 74) 221 30 1202 18 4.5 37.5 277 27 5.82 37.5
s6669 (83, 239, 3148, 93) 3218 90     2428 79 68.58 39.0
s713 (35, 19, 393, 74) 235 30 1060 18 5.36 37.5 324 39 3.88 37.5
s820 (18, 5, 289, 10) 364 19 1821 19 3.71 37.9 460 49 2.85 37.9
s832 (18, 5, 287, 10) 374 19 1579 20 3.25 37.9 419 37 2.77 37.9
s838.1 (34, 32, 446, 17) 463 22 281 35 0.04 37.7 217 36 0.08 37.7
s9234.1 (36, 211, 5597, 58) 2790 44 109835 45 955.24 39.2 18898 653 119.83 39.2
s938 (34, 32, 446, 17) 463 22 281 35 0.10 37.4 217 36 0.08 37.4
s967 (16, 29, 394, 14) 483 20 9020 27 13.05 37.3 2159 244 12.58 37.3
s991 (65, 19, 519, 59) 372 46 3227475 41 32425.76 90.7 1287 124 33.57 37.8
sbc (41, 27, 1023, 22) 764 21 39023 31 72.07 38.0 2300 213 21.41 38.0
b01 (2, 5, 42, 6) 59 11 61 11 0.23 37.2 75 19 0.26 37.2
b02 (1, 4, 23, 5) 36 9 40 9 0.02 37.3 40 12 0.07 37.3
b03 (4, 30, 127, 10) 247 17 247 16 0.14 37.6 239 16 0.34 37.6
b04 (11, 66, 660, 28) 809 32 33633 46 50.24 38.2 5271 302 9.83 38.2
b05 (1, 34, 963, 55) 965 39 552 37 0.06 38.1 512 35 0.13 38.1
b06 (2, 9, 46, 5) 77 10 80 9 0.11 37.4 92 17 0.29 37.4
b07 (1, 49, 391, 31) 560 35 661 28 0.14 37.6 566 27 0.13 37.6
b08 (9, 21, 153, 16) 238 27 212 18 0.29 37.7 205 18 0.77 37.7
b09 (1, 28, 141, 9) 247 19 237 17 0.03 37.6 237 17 0.08 37.6
b10 (11, 17, 178, 12) 247 17 1510 26 2.12 37.6 353 26 1.23 37.6
b11 (7, 31, 732, 34) 734 35 618 25 0.50 37.9 590 25 0.96 37.9
b12 (5, 121, 952, 19) 1485 26 1740 24 0.65 38.3 1908 41 2.21 38.3
b13 (10, 53, 299, 20) 472 20 435 16 0.49 37.6 423 16 1.15 37.6
ratio 1.000 1.000 1.000 1.000 0.036 8.064 0.013 0.952
#in: number of primary inputs; #reg: number of registers; #n: number of AIG nodes; #l:
AIG circuit depth; time: CPU time (sec); mem: memory (Mb)
Under predicate logic, our quantiﬁer elimination is similar to virtual substi-
tution [23] with the following diﬀerences: In virtual substitution, a ﬁnite elimina-
tion set of terms is identiﬁed for quantiﬁer elimination. The notion of composite
functions is not explicit in [23]. Our emphasis, on the other hand, is on the char-
acterization of the complete ﬂexibility of composite functions. In eliminating a
quantiﬁed variable, a single composite function is characterized, rather than a
set of terms of the underlying language. We do not address how to represent a
composite function by terms, but suggest the usefulness of ﬂexibility in reducing
elimination sets.
7 Conclusions and Future Work
We have presented a compositional approach to quantiﬁer elimination. The com-
plete ﬂexibility of composite functions was characterized; Craig interpolation
was exploited for eﬀective computation. Experiments showed promising results
on extending the capacity of quantiﬁer elimination when the sparsity assump-
tion holds. For ﬁrst-order logic, our results may shed light on elimination-set
minimization as motivated by the examples of Section 4.
As this paper just showed the ﬁrst step, much work remains to be done.
The eﬀectiveness of our method on unbounded model checking and on circuit
optimization suggested in Section 3.4 needs further investigation. Quantiﬁcation
scheduling under the new compositional approach awaits improvement. More-
over, a hybrid approach to quantiﬁer elimination by combining the expansion-
and composition-based methods may be pursued to keep both AIG sizes and
depths small. We anticipate applications of the new quantiﬁcation method in
scalable logic synthesis, where Craig interpolation is evidently gaining impor-
tance [10, 9, 11, 12].
Acknowledgments
This work was supported in part by NSC grants 95-2218-E-002-064-MY3 and
96-2221-E-002-278-MY3.
References
1. Berkeley Logic Synthesis and Veriﬁcation Group. ABC: A System for Sequential
Synthesis and Veriﬁcation, 2005. http://www.eecs.berkeley.edu/∼alanmi/abc/
2. B. F. Caviness and J. R. Johnson (editors). Quantiﬁer Elimination and Cylindrical
Algebraic Decomposition. Springer, 1998.
3. O. Coudert and J. C. Madre. A uniﬁed framework for the formal veriﬁcation of
sequential circuits. In Proc. Int'l Conf. Computer-Aided Design, pp. 126-129, 1990.
4. G. E. Collins. Quantiﬁer elimination for real closed ﬁelds by cylindrical algebraic
decomposition. In Automata theory and formal languages, Lecture Notes in Comput.
Sci., Vol. 33., Springer, pp. 134-183, 1975.
