3 
 
中文摘要 
 
關鍵詞：視訊壓縮、H264解碼、向量圖形、貝茲曲線、反鋸齒 
 
隨著軟硬體技術的發展及系統整合能力之提昇，許多桌上型電腦的應用如今逐漸
可以在個人行動電子裝置實現，而其中針對如視訊解碼及電腦圖形呈像等多媒體
應用，由於牽涉運算量及功率消耗都非常大，如何設計適當的多媒體處理核心，
以加速行動平台各種即時應用的處理，一直是近年來受重視的研究議題。本計畫
針對這些應用提出一些改進的設計方法，首先在視訊解碼應用上完成針對 H.264
標準之像素預測器矽智產的設計，不僅將像框內及跨像框的像素預測功能整合同
一模組，也提出一個二維快取記憶體的電路，可以大幅降低像素預測處理所須的
記憶體資料讀寫次數達 70%以上。此外對於如何利用圖形處理單元模組加速視訊
解碼的運算也進行研究，發現圖形處理器在視訊格式的轉換及整數餘弦轉換之運
算上都有極佳的加速效果，至於動態補償的處理上的效果則有限。而在圖形呈現
的應用上，本計畫針對新一代向量圖形的繪圖標準，完成呈像系充核心軟體上的
實現，可以呈像複雜的二維圖形。而為了加速圖形呈現，對於如何繪製構成圖形
物件最重要的基礎曲線線段，提出一個快速曲線產生器的平行處理架構，藉由改
進演算法以突破一般遞迴電路在平行運算所遇到處理週期增長的問題。向量圖形
的繪圖功能一般都會支援線段筆觸功能的設定，尤其是產生具厚度的線段，而繪
製具厚度之曲線是相當複雜的工作，對此本計畫提出各種可能的繪製方法做進一
步的比較，提出了一個回朔機制以降低繪製厚度可能造成線段不連續的機會。為
了將圖形物件做內部填色工作，必須建構內部邉緣串列，本計畫提出了一個相鄰
邉緣點座標差動壓縮方法，可以降少邉緣串列所須記憶空間達 90%。為了達到更
平順優質的圖形呈像結果，進階的繪圖系統會採用各種不同的反鋸齒技巧，本計
畫將一個在三維圖形中的反鋸齒取樣方式應用於向量圖形，可以降低 25%的反鋸
齒記憶空間及處理複雜度。此外在整個圖形呈像處理過程，本計畫也陸續發展出
圖形加速清除功能、圖形裁剪加速功能，以加速圖形呈像速度及運算所須之記憶
體大小及頻寛須求。 
5 
 
的目標，即在盡可能低的位元率（或存儲容量）下獲得盡可能好的圖像品質。而且，
隨著市場對圖像傳輸需求的增加，如何適應不同通道傳輸特性的問題也日益顯現出
來。於是IEO/IEC 和ITU-T 兩大國際標準化組織聯手制定了視訊新標準H.264 來解
決這些問題。H.264/AVC 標準是由ITU-T 和ISO/IEC 聯合開發的，定位於覆蓋整
個視頻應用領域，包括：低碼率的無線應用、標準清晰度和高清晰度的電視廣播應
用、Internet 上的視頻流應用，傳輸高清晰度的DVD 視頻以及應用於數碼相機的高
質量視頻應用等。ITU-T 給這個標準命名為H.264。H.264 和目前通用的MPEG-4 相
比(更精確地說應當是H.264 與MPEG-4 Part 2 的比較)最大的優勢就是在極低碼率
(32-128Kbps)的情況下，H.264 與MPEG-4 相比具有性能倍增效應，也就是在相同
碼率的H.264 媒體流和MPEG-4 媒體流相比，H.26L擁有大約3 個分貝的增益(畫質
水平倍增)。32Kbps 的H.264 媒體流，其信噪比與128K 的MPEG-4 媒體流相近。
即在同樣的畫面品質下，H.264 的碼率僅僅為MPEG-4 的二分之一。雖然MPEG-4 
已針對Internet 傳遞環境而設計，提供比MPEG-2 更高的視訊壓縮率，更靈活與彈
性調適的播放取樣率，但就視訊會議而言希望有更進一步的傳壓精進，所以才需要
另訂H.264。因此透過兩大國際標準化組織的共同制定的H.264 能夠適應不同通道
的傳輸特性，再加上比以前MPEG-4 更為強大的壓縮編碼效果，其應用前景應是不
言而喻的。 
多媒體除了在影像傳輸上發展迅速之外，圖形繪圖的應用需求也不曾減少過。
現在的二維(Two dimensions，2D)即時繪圖開始由點陣圖形朝向向量圖形(Vector 
Graphic)格式發展。向量圖形與圖片解析度無關，它的構圖方式是通過用數學方程
的指令集來描述點、線、圓、弧線、矩形、多邊形、內部填充、漸變、位置、顏色、
大小等。在顯示和列印時都會以繪製後最精確方式表現出來，圖形完全不會變形或
呈鋸齒狀，而且物件之間還可以保有次序的層次關係，此外檔案儲存空問可以很
小。例如要表示一個圓，只需記錄其圓心、半徑以及它是個圓形，不需要記錄在這
個圓邊框的所有點座標。向量圖形不僅可以存儲平面圖形，還可以存儲三維立體圖
形。對於幾何圖形而言，這個方式可以說相當的簡便，但是對於照片、自然景色等
影像圖案，則不容易以這個方法表示。目前最具潛力的一種向量圖形格式，稱為可
縮放性向量圖形（Scalable Vector Graphics，SVG）[2]。SVG 本身可以純粹被視為
圖形及動畫的格式，也可以與XML、JavaScript、SMIL 及HTML 等介面相結合而
產生更多豐富且多樣的應用。SVG 是一種以XML 語言為基礎的新檔圖標準，主要
用來改善網頁圖片的品質，可以讓瀏覽器上的圖檔更有效率，更多效果。SVG 可
讓網頁上顯示出各種高品質的向量圖形，同時也支援文字、動畫、遮罩效果，對於
幾何圖形色彩、透明度、變形、修剪路徑、濾鏡效果都能有充分的支援。而將SVG 
的技術應用在行動裝置上面的Mobile Scalable Vector Graphics（Mobile SVG），則
是剛獲得Third Generation Partners Program（3GPP）採用的最新影像標準，主要用
來支援多媒體簡訊應用，是行動裝置支援動態繪圖和影像的關鍵性新技術。Mobile 
SVG 是由World Wide Web Consortium（W3C）所發展，最近已成為支援多媒體簡
訊的未來無線裝置「應該支援」或必備功能之一，可實現各種2.5G 和3G 多媒體簡
7 
 
素來源來自於同一張frame，稱之為Intra prediction。若是參考的像素來源來自於
reference frame，稱之為Inter prediction。 
 
 
圖表一 H.264解碼流程示意圖 
 
如圖表一所示，inter prediction與intra prediction的關係為互斥執行，即在作inter 
prediction時不需要同時作 intra prediction，反之亦然。因此本計劃在設計 inter 
prediction的過程中，提出了將inter prediction與intra prediction整合在同一塊硬體的想
法，若是inter與intra prediction可以整合在同一個模組，則可以有效的減少硬體面積
所消耗的成本。近幾年來，單純就inter/ intra prediction共存的設計已被討論[4]、[5]，
但[4]、[5]只侷限於介面的整合。而真正整合於同一塊硬體的設計[6]乃是使用systolic 
array來組成計算的運算路徑，每個systolic array由數個算術運算模組所組成以逹到
硬體共享的目的。 
另一方面，H.264 在解壓縮的過程需要用大量的資料運算，就高解析度的畫面
而言，對於頻寬的需求就更高。以高畫質電視來說，[7]顯示了H.264 整體的解壓縮
過程需要637MBps 的資料量，inter prediction 就占了388MBps 的資料量。若以一
個100Hz 的滙流排系統為例，每個記憶體位置所儲存的資料為三十二個位元，它最
多只能提供400MBps 的頻寬量。若是系統的工作頻率無法超過100Hz，則inter 
prediction 模組便會因為不能快速產生資料而無法達到即時(real time)解碼的目的，
進而成為了H.264 解碼器設計中的瓶頸。因此，本計劃也提出了inter prediction 的
頻寬最佳化方法，以降低inter prediction 所需的頻寬。 
在使用GPU和運用在H.264的議題上，先前已經有一些相關研究，像是[8]提到
使用GPU來做 FFT(Fast Fourier Transform) 和 convolution 的加速。 以及[9]使用
H.264和可程式化的3D Graphics製作多媒體的省電行動裝置之系統晶片等等。 使用
GPU在加速H.264的研究方面，[10]中提到利用Direct3D 控制GPU中的vertex和pixel 
shader來處理H.264中MCP(Motion Compensation) 和Reconstruction Video Bitstreams
的部分。[11]則是將H.264中解碼的主要部分MCP和CSC(Color Space Conversion) 以
DirectX 8進行加速。[11]中對H.264解碼的一些主要部分進行分析，見圖表二 
(Block-wise意指以一個block為處理單位，而vertex shader可以有效的處理block的
9 
 
))(),(()( tYtXtP   
 





n
i
i
iin xtt
i
n
tX
0
1)(
 
 
   1,0,1)(
0





 tytt
i
n
tY
n
i
i
iin
 方程式一 貝茲曲線數學式 
 
貝茲曲線的繪製方法，乃是基於如方程式一所示之曲線方程式，將在0與1之間
取許多參數t值，針對每個t值找出相對應的公式值，構成一組(x,y)座標，即可視為
對應到貝茲曲線上的一個取樣點。若要得到繪製品質較好的曲線，則相鄰曲線的取
樣點在輸出螢幕的x和y座標的值必須要小於一。相對地若曲線繪製品質的要求不
高，則取樣點的數目可以少一些，最後將得到的取樣點再用直線相連，亦可逼近所
要繪製的曲線。從上述的說明可以得知貝茲曲線繪製上要解決兩個議題，一是如何
有效率的找出相對應於t值的一組公式值。若採用直接的暴力法（Brute-Force），可
以發現算出x或y座標都需要許多乘法的運算，以三階貝茲曲線為例，總共需要十二
個乘法算出一組(x,y)座標。無論是軟體或硬體去實作都相當的耗費資源。另一個貝
茲曲線繪製上的議題是如何決定t值要取的點數及位置，若要達到最好的繪製品質，
所需要的取樣點則會與要繪製的曲線位置大小有關，如何決定也是重要的議題。其
中在OpenVG官方網站所提供的參考實做[20]，在貝茲曲線繪製上採用最簡單、直接
的暴力法，無論何種貝茲曲線都固定計算出256個取樣點，取樣點之間再用直線相
連。可以預期其效能將非常的低。 
為了避免計算取樣點座標所需的大量乘法運算，傳統上有兩種常用方式可以採
用，一個是回向差值(Forward Difference)和子切割(Subdivision)演算法，以下分別就
這二種方式作說明。 
 
Forward Difference 
Forward Difference[21]的方法為了減少乘法的使用，乃引入回向差值的概念。
這個方法不直接計算取樣點的x座標或y座標，而是將相鄰取樣點的座標值取其差
值。若差值的計算仍然需要用到乘法，可以將相鄰點的差值再取一次差值。利用此
一多階差值的做法，可以使得最終在計算貝茲曲線座標值時，只要設定好適當的函
數初始值，就可以完全不需要用到乘法計算。這算是相當有效率的演算法。但值得
注意的是，一般的Forward Difference方法的條件是每個相鄰取樣點所對應的t參數值
的相差必須要一樣，而無法隨著描繪整條曲線過程中依曲線變化的弧度做不等矩離
取樣點選擇，很有可能造成所算出的取樣點個數遠小於最終繪製於螢幕上的像素個
數。因此[22]提出了一個在Forward Difference實作上，另外加入動態調整t值間距大
11 
 
（ )(3 tfx ）公式為： 
3
232
2322
6)(
)26(6)(
)()23(3)(
3
2






x
xxx
xxxxxx
atfx
batatfx
cbatbatatfx
 
其中等於 N/1 ，其中 N為取樣點數。根據 forward-difference演算法，可以設計如
圖表四產生器電路的電路圖： 
D
36)(3  xanfx
)(  nfx )( nx)(2  nfx
D D
D
)0(2fx )0(fx )0(x  
圖表四貝茲曲線產生器電路 
 
上述貝茲曲線產生器電路每個週期可以產生一個曲線點的輸出，若要提高曲線
產生速度，得採用平行化的電路架構。一個常用的平行電路設計方法是採用
unfolding的做法，假設平行程式為 2，其平行電路會成為： 
 
36)2(3  xanfx
)2(  nfx)2(2  nfx
)0(2fx )0(fx )0(x
))12(( nx
D
D
)2( nx
D D
 
圖表五 平行化貝茲曲線產生器電路 
這個電路的主要缺點在於雖然每個週期可以處理兩個點的輸出，然而因為原來
圖五的電路有包含遞迴電路，unfolding後的電路critical path會被拉長，造成整體的
繪製線段產出率無法實質提昇，如何設計高產出率的平行貝茲曲線產生器電路是本
計畫要探討的議題之一。 
 
呈像向量圖形的處理步驟除了描繪出路徑方程式之外，還得處理額外附著於此
路徑的一些型態定義，以產生線段寬度(Line width)效果。線段寛度的輪廓描繪處
理，會比線段本身的描繪複雜度更高。一般而言，要產生路徑寛度的輪廓處理，必
須要將繪圖路徑上每一點的切線取其垂直向量，並且乘上所設定的寛度，以產生一
個外圍輪廓，或稱為路徑平行曲線(Parallel Curve)的點。如同在貝茲曲線繪製的討
13 
 
段寬度效果的差別，圖表七(a)中，方形代表曲線的控制點，將方形控制點移動得到
圓形控制點和三角形控制點並以圓形控制點和三角形控制點描繪出的兩條曲線代
表寬度效果，比較圖表七(a)和圖表七(b)顯示出移動控制點的作法所產生的寬度效果
有明顯的誤差，因此在要求精準的描繪時，移動控制點作法並不適合。 
 
 
圖表七 線段寬度產生方式:(a)移動控制點(b)平行曲線方程式  
 
 
圖表八 反鋸齒取樣樣式:(a)OGSS (b)RGSS (c)8-queen (d)FLIPQUAD 
 
本計劃也探討了如何實作向量圖形的反鋸齒效果。在過去關於研究反鋸齒的文
獻中，Ordered Grid Super-Sampling (OGSS)[36]是將一個像素切割成4 個子像素，如
圖表八(a)所示。OGSS 取樣點策略然後將每個子像素的中心點設為取樣點，這是作
法比較容易的反鋸齒處理。Rotated Grid Super-Sampling (RGSS) [36][37]也是像素切
割成4個子像素，但是將取樣點做了旋轉般的位移如圖表八(b)，改變取樣點的位置
其目的在於盡可能的利用少數的取樣點萃取出線段經過該像素的情況，換句話說，
利用少數的取樣點，即可代表整個像素對於經過線段的覆蓋率情況。[38]將每個像
素切成64等份，並配置8個取樣點，稱為8-Queen。8-Queen的取樣點配置可以參考圖
表八(c)，每個取樣點所在的行與列皆不重疊。OpenVG 官方實作中，其中快速反鋸
齒效果即採用8-Queen的取樣樣式。另外，[37]根據NVIDIA 公司的專利Quincunx 取
樣點[38]的想法沿生出新的取樣樣式，稱為FLIPQUAD，其取樣點的方法如圖表八
(d)，總共有四個取樣點，每個取樣點位移到像素的邊界，故取樣點的結果可被分享
邊界的像素所共用。 
15 
 
Data Alignment Unit
G1 Acc. buffer
G2-Scheduling Buffer Synchronization Buffer
G1-Scheduling Buffer
Group 2  
2-tap MAC #4
Group 2 
2-tap MAC #3
Group 2 
2-tap MAC #2
Group 2 
 MAC #1
Row-wise 
2-tap MAC #4
Row-wise 
2-tap MAC #3
Row-wise 
2-tap MAC #2
Group 1 
MAC #1
Shifter left
G2 Acc. buffer
Data Selection Unit
Row-wise buffer Intra buffer
clip1
output
input
Stage 1
Stage 2
Stage 3
: Intra only module : Inter only module  
圖表九 Inter及intra prediction整合架構 
 
圖表九為所提出之inter及intra prediction整合後的架構。我們將方程式三採用
Multiply-ACcumulation(MAC)的方式實作成硬體。為了增加效能，此設計採用了二
組MAC group，每一組MAC group擁有4份MAC硬體來同時處理4x4方塊中每一列的
運萛。本架構分三個階段，第一階段由Row/Column-wise buffer儲存inter或intra輸入
的像素之後，作MAC輸入資料的選擇。第二及第三階段皆為MAC的累加運算。Group 
2的 MAC的資料來源可來自Group 1而形成pipeline運算；也可來自第一階段而與
Group 1構成平行運算。最後再透過多工器選擇要通過clip1模組的來源。而在MAC
模組實際實現的方法上，本計畫也使用了shift-add與多工器的組合來取代乘法器，
更可以節省核心運算單元的硬體大小。圖表十為inter及intra prediction整合硬體所採
用的MAC硬體架構。 
圖表十一說明了 inter prediction輸出的像素方塊分割方式有巨方塊分割
（macroblock partition）與子方塊分割(sub-macroblock partition)這兩種，而每個分割
又可以分為不同尺寸的大小，以圖表十二為例，圖中顯示了有兩個8x8像素方塊的
分割：Partition A和Partition B。每個分割可以視為4個4x4方塊來處理。因此A0和A1
之間有9x5個像素重覆，同樣的A0和A2之間也有重覆的像素。於是相關的研究提出
以暫存的方法來再利用這些像素，全部只要抓取13x13的像素方塊就好而不需要抓
17 
 
(4,14)的參考像素方塊。同樣的，為了產生Partition B，我們需要去抓取坐標位置為
(4,6)到(7,18)的參考像素方塊。但實際上，圖表十二的紅色虛線框所包圍參考像素方
塊的記憶體資料在產生Partition A時就已經抓取回來，如果可以將這些資料儲存下
來，在產生Partition B時就不需要重覆抓取。我們將此方法稱之為＂inter-partition data 
reuse＂，利用這個技巧，inter prediction的頻寬需求將可以再進一步的減少。 
 
圖表十二 inter prediction的像素方塊參考像素示意圖 
 
但也正由於Partition A和Partition B屬於不同的資料分割，所以他們之間的位移
向量差異會隨著分割區塊的不同而不同。因此，並無法確切預知哪些資料是否可以
再利用。為了更加規律地利用不同資料分割間的資料，本計劃採用快取記憶體的概
念來儲存已經抓取的資料，以便在作inter-partition data reuse時，可以自動且有規律
的運用。 
 
圖表十三 inter prediction頻寬最佳化的系統架構 
19 
 
再以這兩種轉換模式組成原本 H.264的運作模組演算法。以下根據此兩種存放方式
進行探討，假設程式所需處理之計算如下： 
 
D1 = A1 + B1 + C1; 
D2 = A2 + B2 + C2; 
D3 = A3 + B3 + C3; 
方程式四 H.264的運算式例子 
 
 
圖表十五 垂直運算方式示意圖 
垂直方式 
垂直方式是將運算完全相同算式，以垂直方式將變數存放置頂點，透過同步的
運算，將計算完成，其示意圖如圖表十五所示，方程式四中之可透過以下 3步驟完
成： 
1. 將 A1～A3的值存到一個頂點中的三個座標值中，B1～B3、C1～C3亦然，其中
x，y，z為頂點的三維坐標。 
2. GPU模擬器端讀入頂點資料，並將變數初始化，此時所有的 vertex都會初始化
為(0,0,0)。 
3. 執行方程式四運算之指令如表格二。 
 
 三維座標值 
頂點 X y z 
1 A1 A2 A3 
2 B1 B2 B3 
3 C1 C2 C3 
表格一 採用垂直方式存放之頂點資料檔 
21 
 
向量圖形呈像 
平行化貝式曲線產生器架構 
如前所述，藉由傳統 Unfolding技術所得著的平行曲線電路之產出率並無法有
效提昇，為了能得著高效率的平行電路，本計畫提出一個新的做法，以二倍平行度
為例，主要的方法乃是先將原來 forward-difference方式的取樣點間距拉大兩倍變為： 
33
232
2
2322
2
4886)(
)4286(46)(
)248()2243(23)(
3
2






xx
xxx
xxxxxx
aatfx
batatfx
cbatbatatfx
 
接著，將有兩組 forward-difference公式同時運行，但兩組公式初始值的點設定為兩
個相距取樣點的結果。藉此可以得到以下平行電路圖： 
D
348
)2(3


xa
nfx
)2(  nfx )2( nx)2(2  nfx
D D
D
)0(2fx )0(fx )0(x
D
)2(  nfx)2(2  nfx
D D
D
)(2 fx )(fx )(x
)2( nx
 
圖表十七 本計畫提出之高效率平行貝茲曲線產生器電路 
這個電路架構不僅每個週期產生兩筆輸出，同時電路運作頻率可以比從 unfolding
得來的電路快。 
 
線段寬度描點 
 
本計劃也探討產生線段寬度的硬體設計方法。在現有的方法中，若是以等份化
參數取樣方法，或是 foreward difference，或是以 subdivision這三種方法產生具線段
寬度效果的曲線描繪電路，會對於呈像品質，而有因曲線的狀況造成極大的落差的
情形。假設以 AFD 為基礎的具寬度效果曲線描繪電路，描繪曲率不同的曲線，依
照曲率的大小，可能產生如圖表十八的情形。當曲線扭曲程度較小時，如圖表十八
(a)的情況，在配合 AFD描繪方式下外殼並無斷裂，在曲線扭曲程度較大的狀況下，
如圖表十八(b)，使用 AFD 方式描繪的曲線並不會產生斷裂，但是外殼的寬度效果
部份則發生斷裂情形。 
 
23 
 
而在 Cycle i+2 時，Adaptive Forward Difference 運行 Adjust up將取樣間隔 h 增大，
接著 Cycle i+3 進行 forward 產生下一點，但在 Cycle i+6 時，Cycle i+3 所產生的
取樣點被檢查出斷裂問題，因此發生回朔。由此觀察可發現，在 Cycle 3 所運行的
Adjust Up 可能造成了Cycle i+6 的回朔。再觀察圖表十九(b)，當連續的Adjust up 被
運行後，於 Cycle i+6 後將有很大機會發生和連續 Adjust up次數相同的回朔狀況。 
當取樣間隔被切細至可以滿足外殼不斷裂的長度時，則可以推斷，此時的取樣
間隔對於相鄰的取樣點所對應的外殼不斷裂的機會應是相當大的，在圖表 3-15 
中，Cycle i+6 檢查出 P(t+3h)造成斷裂，因此回朔至取樣點 P(t+h)、取樣間隔 2h 的
狀況，若是回朔至 P(t+h)、取樣間隔 h 的狀況，則可以省下 Adjust down的時間，
若是如圖表 3-16 的狀況，則回朔至 P(t+h)、取樣間隔 h 的狀況，則可節省更多回
朔的時間。 
圖表二十為 AFD 硬體配合回朔法的硬體架構。為了增加回朔功能於 Adaptive 
Forward Difference 硬體中，且用以描繪曲線的 Adaptive Forward Difference 硬體產
生取樣點的速度高於寬度效果硬體，在考慮硬體使用率的情況，必須額外使用五個
FIFO 緩衝區，暫存所有曲線取樣點所對應的 First Difference、Second Difference、
Third Difference 和曲線取樣參數 t，每個 FIFO 緩衝區可容納的資料數量至少要等
於 Stroke Module 運作的延遲時間才能保證能回朔到發生斷裂的位置，而 FIFO 中
每筆資料大小則至少必須容納曲線描繪資訊如目前取樣點、FD、SD、TD 或 t，當
寬度效果硬體產生一個取樣點輸出時，將會檢查和前一個取樣點的對應像素座標的
X、Y 值是否是相鄰的，如果是相鄰的狀況，則輸出寬度效果的取樣點，若否，則
將目前 FIFO 最前端的資料傳送給 Adaptive Forward Difference 硬體進行描點的回
朔並將 FIFO 清空，從寬度效果斷裂處作更密集的描點。圖表二十中，Adaptive 
Forward Difference 硬體產生的取樣點、First Difference、Second Difference、Third 
Difference 和曲線描繪參數 t 會存入 FIFO中，stroke module 根據曲線的取樣點、
first difference 和曲線厚度 w 計算寬度效果的取樣點，在寬度效果的取樣點輸出後
計算與前一個產生的取樣點的 X、Y 座標差，接著交由控制單元(CU)判斷是否發生
斷裂。 
 
圖表二十 採用回朔方法的避免曲線寬度效果斷裂硬體架構示意圖 
25 
 
表二十四(a)所示。一但確立了象限方向之後，此象限的下一個輪廓像素點可再分為
三個方向，如圖表二十四(b)所示，每一個方向可用二個位元來編碼，以減少用來邉
緣串列的資料量。 
 
圖表二十三 邉緣串列資料結構建立 
 
圖表二十四 邉緣串列壓縮方法示意圖 
漸層色彩加速 
除了減少邉緣串列的資料儲存量，本計劃另外以 GPU 來加速填色過程的漸層
填色樣式的顏色產生。由於其漸層色彩可視為填色的一種材質，與三維圖形的貼圖
功能具有高度相似的重覆性。本計劃以 GPU的 Fragment Shader來作漸層色彩的加
速運算，我們採用了 GLSL(OpenGL Shading Language)[44]，它是，透過 GLSL我們
能夠以高階程式語言來撰寫 Shader，而不受限於硬體的指令集。OpenVG所定義的
填色方式有三種，單色、線性漸層與放射漸層。單色填色較為單純，只要使用 OpenGL
中指定色彩的 API即可達到。以下將對漸層填色做說明。 
 
圖表二十五 一維漸層示意圖 
27 
 
的顏色。使用 Fragment Shader進行放射漸層的方式與線性漸層相似，只有運算方程
式不相同，如圖表二十七(b)所示。而在進行漸層呈像時，也可以同時進行圖像混合，
如圖 32所示。圖像也是以 Texture方式存在於 GPU中，在進行漸層著色時，亦可
同時從圖像中取得像素色彩與漸層色彩進行混合。 
 
接著說明的是漸層材質的生成方法，本計劃可以利用 OpenGL的畫線功能搭配
RenderToTexture技術來達成。RenderToTexture技術即是將 GPU圖形管線的呈像結
果繪製到一張材質上，也就是繪製到一個材質記憶體區塊中，而非在能夠看見的螢
幕上。如圖表二十八所示，依漸層的定義，共有三個停駐點，並且假設我們需要的
材質大小為 n。接著則在螢幕上以直線的方式畫上與停駐點數目相同的三個點，並
使用與停駐點定義相同的顏色，而點的 x 座標為停駐點位置乘上材質大小，y 座標
則為 0。而因為我們畫的是一條直線，在這幾個頂點之間的色彩 GPU會進行內差運
算來漸變兩兩頂點之間的色彩。最後 Render到材質上，我們即可得到一個一維的漸
層材質。 
 
 
圖表二十八 漸層材質生成方式 
 
在完成填色之後，在邊緣的部份會因為過度彎曲與解析度過低，而會有鋸齒狀
的影像呈現，因此，本計劃亦實作了反鋸齒功能。本計劃將原本應用於三維圖像的
FLIPQUAD 反鋸齒技術應用於 OpenVG 上，讓二維向量圖形也能支援取樣點共用
的反鋸齒技術。 
 
29 
 
 
Test sequence [43] 
Average data 
cycle/MB 
Proposed 1 
(WxH=4x16) 
Proposed 2 
(WxH=3x16) 
Proposed 3 
(WxH=4x9) 
Average data 
cycle/MB 
Reduction %
Average data 
cycle/MB 
Reduction % 
Average data 
cycle/MB 
Reduction %
Foreman 123.08 98.92 19.6% 120.12 2.4% 127.26 -3.3% 
Akiyo 81.2 64.43 20.65% 64.61 20.4% 64.63 20.3% 
Mother &  
daughter 
86.46 68.57 20.69% 70.93 17.96% 71.95 16.7% 
Miss America 90.73 72.48 20.11% 78.56 13.41% 80.36 11.4% 
Carphone 115.62 93.82 18.85% 110.71 4.24% 114.25 1.1% 
Salesman 94.84 70.76 25.39% 74.93 20.9% 75.75 20.1% 
Average - - 20.89% - 13.2% - 11.08% 
Reuse buffer  1344 bits 2688 bits 2112 bits 1656 bits 
表格六 在不同快取記憶體大小之下亮度樣本的 QCIF解析度頻寬節省量 
 本計劃利用軟體GPU模擬器輔助執行H.264解碼，表格七顯示H.264軟體解碼程
式與GPU模擬器在ARM926EJ-S處理器上運算程式碼時，所使用之指令數之比較。
可以發現，藉由GPU的運算，所須執行指令數在經Intra Prediction運算上減少約50
％-60％，動態補償運算上減少約10％-40％，YUV轉RGB減少約90％，在Intra 
Prediction Plane Mode以及反整數餘弦轉換（IDCT）兩部分，指令數也有減少約50
％以上。以上之統計雖然是指令數，然而仍然顯示出在YUV轉RGB運算及IDCT運
算上非常適合GPU的處理，其主要原因是這兩部分的運算量雖然大，但其可以平行
化程度比其餘運算高。其餘部分的處理，由於配合GPU現有資料處理模式乃是採用
SIMD的方式，運用GPU來處理必須先將資料安排整齊，這部分目前會花費相當多
的指令週期，未來若要能充分利用GPU，現有GPU指令必須要進一步修正，尤其必
須增加資料封裝的功能；另一個解決方案為可用專門的硬體來作加速。 
                  指令數 
解碼部分 
模式 CPU 
指令數 
GPU 
指令數 
YUV_RGB － 153 14 
Intra-Prediction 4x4 block 
DC 12~20 40 
Non-DC 61~94 30~50 
Intra-Prediction 16x16 block Plane 332 144 
IDCT 
4x4 luma 39 16 
4x4 DC 206 72 
Motion Compensation － 21~44 12~32 
表格七 H.264解碼程式在 ARM926EJ-S使用之指令數與 GPU使用之指令數比較 
31 
 
 up down forward time break_dis
Direct Computation(256) 0 0 671160 671160 2693.808
AFD(Non-backtracking) 1151 5425 21028 27604 14111.66
SUBDIVISION 0 0 37198 185990 9756.131
AFD,CORDIC(backtracking) 4073 13285 43359 553377 81.72345
AFD,arithmetic(backtracking) 4073 13285 43359 208515 81.72345
表格十 線段厚度為 10個像素，解析度 600x800 時的 dude 曲線描繪數據 
 
 tiger dude 
資料壓縮前 4,606,720 bits 2,126,912 bits 
資料壓縮後 343,166  bits 81,631   bits 
壓縮比例 7.4 % 7.9 % 
表格十一 邉緣串列資料壓縮前後比較表 
 
在本計劃的GPU加速向量圖形的漸層塗色的成果方面，目前主要針對幾個
OpenVG實作來進行效能比較，包括了本計畫引以為基礎的ShivaVG[24]、商業性質
的AmanithVG[49]、開放源碼的KompazzVG[50]及Khronos官方所提供的參考實作
Official Reference Implementation (RI)[20]。從圖表二十九可以看出在flower的測試圖
形中，我們的計畫成果都擁有不錯的效能增益表現。FPS主要都擁有比其他實做增
加一至二倍甚至到達五倍以上的效能。 
 
 
圖表二十九 效能測試之數據結果(Frames/Sec)及效能增益 
 
取樣點策略 計算成本 儲存空間 
No AA w w 
OGSS w*4 w*4 
RGSS w*4 w*4 
8-Queen w*8 w*8 
FLIPQUAD w*3 w*3 
表格十二 各式取樣點成本 
33 
 
 
圖表三十一 不同反鋸齒方法的呈像結果(a) no AA (b)OGSS (c)RGSS (d)8-queen 
(e)FLIPQUAD 
參考文獻 
[1]. Joint Video Team, “Draft ITU-T Recommendation and Final Draft International 
Standard of Joint Video Speciation,” ITU-T Recommendation H.264 and ISO/ITC 
14496-10 AVC, May 2003. 
[2]. Scalable Vector Graphics (SVG) 1.1 Specification, W3C SVG Working Group, 
2003. 
[3]. Khronos Group: OpenVG Specification 1.1 (2008) http://www.khronos.org/openvg 
[4]. J. W. Chen, C. C. Lin, J. I. Guo, and J. S. Wang, “Low Complexity Architecture 
Design of H.264 Predictive Pixel Compensator for HDTV Application,” Int. Conf. 
on Acoustics, Speech and Signal Processing (ICASSP’06), Vol. 3, pp. 932–935, 
Toulouse, France, May 2006. 
[5]. M. Alle, J. Biswas, and S. K. Nandy, “High Performance VLSI Implementation for 
H.264 Inter/Intra Prediction,” Int. Conf. on Consumer Electronics, pp. 1-2, Las 
Vegas, USA, Jan. 2007. 
[6]. C. H. Li, C. C. Chen, W. C. Su, M. J. Wang, W. H. Peng, G. G. Lee and T. Chiang, 
"An Unified Systolic Architecture for Combined Inter and Intra Predictions in 
H.264/AVC Decoder," Int’l Wireless Communications on Mobile Computing 
Conference, Vancouver, July 2006. 
[7]. Jiahui Zhu, Ligang Hou, Wuchen Wu, Ronggang Wang, Chao Huang, and JinTao 
Li, “High Performance Synchronous DRAMs Controller in H.264 HDTV Decoder,” 
in Proc. IEEE ICSICT’04, Dec. 2004. 
35 
 
SVG-Tiny Support,” Computer Standards and Interfaces, vol. 31, issue 4, pp. 
661-668, June 2009.  
[20]. Hybrid Graphics Forum, OpenVG Reference Implementation (2005), 
http://forum.hybrid.fi 
[21]. Steven A. Coons, Surfaces for Computer-Aided Design of Space Forms, Project 
MAC, MIT, MAC-TR-41,June 1967. 
[22]. Sheue-Ling Lien , Michael Shantz and Vaughan Pratt, “Adaptive forward 
Differencing for Rendering Curves and Surfaces, ” International conference on 
computer graphics and interactive techniques, vol.21, no.4, pp.111-118, July 1987.  
[23]. S.-L. Chang and M. S. R. Rocchetti, “Rendering Cubic Curves and Surfaces with 
Integer Adaptive Forward Differencing, ” ACM SIGGRAPH Computer Graphics, 
vol. 23, issue 3, pp.157-166, July 1989. 
[24]. ShivaVG http://sourceforge.net/projects/shivavg/ 
[25]. In-kwon Lee, Myung-soo Kim and Gershon Elber, “Planar Curve Offset Based on 
Circle Approximation,” Computer-Aided Design, vol. 28, no. 8, pp. 617-630, 
Augest 1996. 
[26]. Gershon Elber, In-kwon Lee and Myung-soo Kim, “Comparing Offset Curve 
Approximation Methods,” IEEE Computer Graphics and Applications, vol. 17, 
issue 3, pp. 62-71, May 1997. 
[27]. B. Pham, “Offset Approximation of Uniform B-splines,” Computer-Aided Design, 
vol. 20, issue. 8, pp. 471-474, Oct. 1988. 
[28]. Elizabeth Susan Cobb, “Design of Sculptured Surfaces Using The B-spline 
Representation, ” University of Utah, pp. 1-148, 1984. 
[29]. G. Elber and E. Cohen, “Error Bounded Variable Distance Offset Operator for Free 
Form Curves and Surfaces,” International Journal of Computational Geometry and 
Applications, vol. 1, no.1, pp.67-78, 1991.  
[30]. J. Hoschek, “Spline Approximation of Offset Curves,” Computer Aided Geometric 
Design, vol. 5, issue 1, pp.33-40, June 1998. 
[31]. J. Hoschek and N. Wissel, “Optimal Approximate Conversion of Spline Curves and 
Spline Approximation of Offset Curves,” Computer-Aided Design, vol. 20, no. 8, 
pp.475-483, Oct. 1988. 
[32]. R. Klass, “An Offset Spline Approximation for Plane Cubic Splines,” 
Computer-Aided Design, vol.15, no. 4, pp.297-299, Sept. 1983. 
[33]. S. Coquillart, “Computing Offset of B-spline Curves,” Computer-Aided Design, 
vol.19, No.6, pp.305-309, July 1987. 
[34]. W. Tiller and E. Hanson, “Offsets of Two Dimensional Profiles,” IEEE Computer 
Graphics and Applications, vol. 4, issue 9, pp.36-46, Sept. 1984. 
[35]. Elber, G., and Cohen, E., Offset Approximation Improvement by Control Points 
37 
 
[49]. AmanithVG. Available from: http://www.amanith.org/project.html.  
[50]. KompazzVG. Available from: http://kaarthik.wordpress.com/category/kompazzvg/. 
[51]. Y.-N. Chang, and T.-C. Tong, “An Efficient Design of H.264 Inter Interpolator with 
Bandwidth Optimization,” in Journal of signal processing systems for signal image 
and video technology, vol 53,issue 3,pp. 435-448, Dec. 2008.  
[52]. Y. –N. Chang, “A Fast Spline Curve Rendering Accelerator Architecture,” in IEEE 
Transactions on Circuits and Systems-II, pp.870-874, Vol. 56, no 11,Nov 2009.  
[53]. Y.-N. Chang, “Digit-Serial Pipeline Sorter Architecture,” in Journal of signal 
processing systems, pp.241-249, Vol. 61, no.2, Nov 2010. 
[54]. Y.-N. Chang and T.-C. Tong, “An Efficient Design of H.264 Inter Interpolator,” in 
Proc. of 2007 IEEE International Conference on Consumer Electronics, Las Vegas, 
USA, Jan, 2007. 
[55]. Yun-Nan Chang and Chien-Jung Fu, “Design of VLSI Sorting Accelerator 
Architecture,” Proc of 2008 IEEE Midwest Symposium on Circuits and Systems, pp. 
878-881, Knoxville, USA, August 10-13, 2008.  
[56]. Yun-Nan Chang and Ting-Chi Tong, “A Lossless Buffer Compression Scheme for 
3D Graphic System,” Proc of 2009 International Conference on Computer Graphics 
and Virtual Reality, Las Vegas, USA, July 13-16, 2009. 
[57]. Yun-Nan Chang and Ting-Chi Tong, “An Edge-List Compression Scheme for 2-D 
Graphic System,” Proc of 2010 IEEE Midwest Symposium on Circuits and Systems, 
pp. 513-516, Seattle, USA, August 1-4, 2010.  
[58]. Ting-Chi Tong and Yun-Nan Chang, “A Low-cost 2D Graphic Anti-aliasing 
Rendering Scheme,” Proc of 2010 IEEE International Symposium on 
Next-Generation Electronics, pp. 207-516, Kaohsiung, Taiwan, November 18-19, 
2010 
 
 2
在會場的飯店，因此並沒有待到很晚等抽獎。8/4 日最後一天只安排一個上午兩個平行技術
session，我主要還是參加一個有關具能源效率之嵌入式系統設計單元，之後就離開會場，結束整
個會議的活動。參加會議結束後我續留在西雅圖市並參與附近一些著名景點。 
 
二、與會心得 
這是我第二次參與這個會議，上次參加是兩年前在美國田納西州舉辦的。那一次主辦單位在
大會晚宴前還特地安排遊覽車帶領與會者參觀舉辦地的大學城，也安排到附近的一座美國國家實
驗室參觀，今年大會沒有安排任何的參訪活動，也沒準備午餐。當然西雅圖市非常繁榮，交通及
餐飲都非常方便，用餐及參觀附近景點都沒有太大問題，但對於外國參與者總覺得大會整體安排
似乎缺少了一些誠意，只是單純的安排技術議程，對於學者間的交誼活動並不熱心。相對於兩年
前所參加那一次所展現的熱情有段差距，或許是當時舉辦地屬於傳統美國南部城市，就顯得比較
有人情味，城鄉民情表現的差距似乎舉世皆然。 
 
這次大會安排一段彰顯對於電路系統界有卓越貢獻的教授 Dr. Swamy 的議程，雖然由於他的
貢獻在於傳統類比電路系統設計，因此我對他並不熟悉，但是這樣的安排卻讓人覺得很有意義，
藉由對於前人的尊重無形中有激勵後輩及精神傳承的效果。這位教授應該至少有六十歲，仍然在
指導學生做研究，也有論文在本次會議發表，就剛好安排在我報告的 session，這位教授還親自來
到我們這個 session 聆聽報告，似乎無形中也增添我們論文報告者的心理壓力。 
這次大會安排的主題演講談到有關於如何利用新的雙閘道場效電晶體架構於電路設計，分析
它對於降低深微米技術下電路漏電流問題，以及如何推展到目前數位電路的設計應用。或許是本
人以往比較著重在於上層系統電路架構，比較沒注意到這方面電路基礎架構的研究，對於這個主
題感到很有興趣，這個議題也值得國內晶片設計產學業界持續的關心與重視。 
 
三、考察參觀活動 
 
本次大會並沒有安排任何的參觀活動。 
 
四、建議 
這次參與的國際會議是電機資訊領域中有關電路與系統設計方面深具歷史意議的會議，而利用這
樣的大會彰顯對於領域內具卓越貢獻人士是一個很好的做法。這次大會的議程安排並沒有特別突
出之處，反倒在促進學者社交友誼交流上沒有積極安排，這是在安排類似國際會議上不應該有的
遺憾，值得國內安排相關會議引以為鑑。 
 
五、攜回資料名稱及內容 
大會議程暨論文摘要手冊及論文光碟一片。 
 
六、其他 
無 
 
 
 
96年度專題研究計畫研究成果彙整表 
計畫主持人：張雲南 計畫編號：96-2221-E-110-041-MY3 
計畫名稱：行動裝置之多媒體核心矽智產設計 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 6 6 100%  
博士生 1 1 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 3 3 100%  
研究報告/技術報告 0 0 100%  
研討會論文 5 5 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
