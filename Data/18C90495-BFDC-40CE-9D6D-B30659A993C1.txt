  
 
Jin and Agrawal [11] proposed an algorithm, called 
StreamMining, for in-core frequent itemset mining over 
online data streams. Yu et al. [19] discussed the issues of false 
negative or false positive in mining frequent itemsets from 
high speed offline transactional data streams. 
Chang and Lee [5] proposed a BTS-based algorithm, called 
SWFI-stream, for mining frequent itemsets in online data 
streams with a transaction-sensitive sliding windows model. 
Li et al. [13] proposed a DSM-MFI-based algorithm called 
DSM-RMFI to find maximal frequent itemsets over offline 
data streams with a transaction-sensitive sliding window. 
Teng et al. [16] proposed a regression-based algorithm, called 
FTP-DS, to find temporal patterns (frequent inter-transaction 
itemsets) across multiple online data streams in a 
time-sensitive sliding window. Teng et al. [17] proposed a 
resource-aware algorithm called RAM-DS, to mine temporal 
patterns in multiple online data streams with a time-sensitive 
sliding window. Lin et al. [14] proposed an incremental 
mining algorithm to find the set of frequent itemsets in offline 
data streams with a time-sensitive sliding window. Wong and 
Fu [18] proposed an efficient algorithm to mine top-k frequent 
itemsets in offline data streams with a transaction-sensitive 
sliding window without a user-defined minimum support 
constraint. Chi et al. [6] proposed a transaction-sensitive 
sliding window based algorithm, called MOMENT, which 
might be the first to find frequent closed itemsets (FCI) from 
online data streams with a transaction- sensitive sliding 
window. A summary data structure, called CET, is used in the 
MOMENT algorithm to maintain the information of closed 
frequent itemsets. 
Chang and Lee [4] developed a damped window based 
algorithm, called estDec, for mining frequent itemsets in 
online streaming data in which each transaction has a weight 
decreasing with age. In other words, older transactions 
contribute less toward itemset frequencies, and it is a kind of 
damped windows model. Giannella et al. [7] proposed a 
frequent pattern tree (abbreviated as FP-tree) [9] based 
algorithm, called FP-stream, to mine frequent itemsets at 
multiple time granularities by a novel titled-time windows 
technique. FP-stream focuses on offline data streams. 
    The purpose of this paper is on frequent itemsets mining 
over online data streams with a transaction-sensitive sliding 
window, we mainly address it by comparison with the 
SWFI-stream algorithm proposed by Chang and Lee [5]. An 
efficient algorithm, called MFI-TransSW (Mining Frequent 
Itemsets over Transaction-sensitive Sliding Windows), is 
proposed to mine frequent itemsets over online data streams 
with a transaction-sensitive sliding window. The experiments 
show that the MFI-TransSW algorithm not only attain highly 
accurate mining results, but also run significant faster and 
consume less memory than SWFI-stream algorithm for mining 
frequent itemsets over recent data streams.  
    The remainder of this paper is organized as follows. The 
problem of FI mining in a transaction-sensitive sliding 
window is defined and the algorithm MFI-TransSW is 
proposed in Section 2. Experiments are discussed in Section 3. 
Finally, we conclude the work in Section 4. 
II. MINING OF FREQUENT ITEMSETS OVER TRANSACTION 
SENSITIVE SLIDING WINDOWS 
A. Problem Definition 
Let Ψ = {i1, i2, …, im} be a set of items. A transaction T = (tid, 
x1x2…xn), xi ∈ Ψ, for 1 ≤ i ≤ n, is a set of items, while n is 
called the size of the transaction, and tid is the unique 
identifier of the transaction. An itemset is a non-empty set of 
items. An itemset with size k is called a k-itemset. A 
transaction data stream TDS = T1, T2, …, TN is a continuous 
sequence of transactions, where N is the tid of latest incoming 
transaction TN. 
    A transaction-sensitive sliding window (TransSW) in the 
transaction data stream is a window that slides forward for 
every transaction. The window at each slide has a fixed 
number, w, of transactions, and w is called the size of the 
window. Hence, the current transaction-sensitive sliding 
window is TransSWN－w+1 = [TN−w+1, TN−w+2, …, TN], where 
N−w+1 is the window id of current TransSW. The support of 
an itemset X over TransSW, denoted as sup(X)TransSW, is the 
number of transactions in TransSW containing X as a subset. 
An itemset X is called a frequent itemset (FI) if sup(X)TransSW 
≥ s⋅w, where s is a user-defined minimum support threshold 
(MST) in the range of [0, 1]. The value s⋅w is called the 
frequent threshold of TransSW (FTTransSW). 
    Given a transaction-sensitive sliding window TransSW, and 
a MST s, the problem of online mining of frequent itemsets in 
recent transaction data streams is to mine the set of all frequent 
itemsets by one scan of the TransSW. 
 
 
Transaction Data Stream FIs in TransSW1  FIs in TransSW2  
      <T1, (acd) > 
      <T2, (bce) > 
      <T3, (abce) > 
      <T4, (be) > 
(a), (b), (c), (e), 
(ac), (bc), (be), 
(ce), (bce) 
(b), (c), (e), (bc), 
(be), (ce), (bce) 
A transaction data stream is formed by transactions arriving in series 
Figure 1: An example transaction data stream and the frequent itemsets over 
two consecutive TransSWs      
 
Example 1 Let the first four transactions in a transaction data 
stream be <T1, (acd)>, <T2, (bce)>, <T3, (abce)>, and <T4, 
(be)>, where T1, T2, T3, and T4 are transactions and a, b, c, d, 
and e are items. Let the size of sliding window w be 3 and the 
user-defined minimum support threshold s be 0.6. Hence, the 
transaction data stream consists of two transaction-sensitive 
sliding windows, i.e., TransSW1 = [T1, T2, T3] and TransSW2 = 
[T2, T3, T4], where first window TransSW1 contains the 
transactions T1, T2, and T3, and the second window TransSW2 
contains the transactions T2, T3, and T4. The example is shown 
in Figure 1.     
    In Figure 1, the frequent itemsets in TransSW1 are (a), (b), 
(c), (e), (ac), (bc), (be), (ce), and (bce), and the frequent 
In IEEE SMC 2006
  
 
dropped since Bit(d)=000, i.e., sup(d)TransSW = 0. 
c) Frequent Itemsets Generation Phase 
The phase is performed only when the up-to-date set of 
frequent itemsets is requested. In this phase, MFI-TransSW 
algorithm uses a level-wise method to generate the set of 
candidate itemsets CIk (candidate itemsets with k items) from 
the pre-known frequent itemsets FIk−1 (frequent itemsets with 
k-1 items) according to the Apriori property [1]1. The step is 
called CIGA (Candidate Itemset Generation using Apriori 
property). Then, the proposed algorithm uses the bitwise AND 
operation to compute the support (the number of bit 1) of these 
candidates in order to find the frequent k-itemsets FIk. The 
candidate-generation-then-testing process is stopped until no 
new candidates with k+1 items (CIk+1) are generated. The 
MFI-TransSW algorithm is shown in Figure 4. 
    For instance, consider the bit-sequences of TransSW2 in 
Figure 3, and let the minimum support threshold s be 0.6. 
Hence, an itemset X is frequent if sup(X)TransSW ≥ 0.6⋅3 = 1.8. 
In the following, we discuss the step of frequent itemset 
mining of TransSW2. The generated patterns are shown in 
Figure 1.  
    First, MFI-TransSW algorithm generates three candidate 
2-itemsets, (bc), (be) and (ce), by combining frequent 
1-itemsets: (b), (c) and (e), where Bit(b) = 111, i.e., sup(b) = 3, 
Bit(c) = 110, i.e., sup(c) = 2, and  Bit(e) = 110, i.e., sup(e) = 2. 
1-itemset (a) is an infrequent itemset, since its Bit(a) = 010, 
i.e., sup(a) = 1. All these candidates are frequent itemsets 
after using bitwise AND operations to count the supports of 
these candidates. Because the Bit(bc) is 110, the support of 
candidate 2-itemset bc are 2, i.e., sup(bc) = 2. Similarity, 
sup(be) = 3, and sup(ce) = 2. Second, MFI-TransSW 
generates one candidate 3-itemset (bce) according to Apriori 
property and uses bitwise AND operation to count the sup(bce) 
= 2, i.e., Bit(bc) AND Bit(be) AND Bit(ce) = 110. Because 
no new candidates are generated, the generation-then-test 
process is stopped. Hence, there are six frequent itemsets, (b), 
(c), (bc), (be), (ce), (bce), generated by MFI-TransSW 
algorithm in TransSW2. The process is shown in Figure 5.  
    
 
  Transactions in 
TransSW2 
Bit-Sequences in 
TransSW2 
FI1 in TransSW2 (s = 
0.6) 
sup 
    <T2, (bce) > 
    <T3, (abce) >         
    <T4, (be) > 
Bit(a) = 010 
Bit(c) = 110 
Bit(b) = 111 
Bit(e) = 111 
{(b) | Bit(b) = 111} 
{(c) | Bit(c) = 110} 
{(e) | Bit(e) = 111} 
3 
2 
3 
 
CI2 in SW2 FI2 in TransSW2 sup 
{(bc) | Bit(b) = 111 AND Bit(c) = 110} 
{(be) | Bit(b) = 111 AND Bit(e) = 111} 
{(ce) | Bit(c) = 110 AND Bit(e) = 111} 
{(bc) | Bit(bc) = 110} 
{(be) | Bit(be) = 111} 
{(ce) | Bit(ce) = 110} 
2 
3 
2 
 
CI3 in TransSW2 FI3 in TransSW2 sup 
{(bce) | Bit(bc) = 110 AND Bit(be) = 
111 AND Bit(ce) = 110} 
{(bce) | Bit(bce) = 
110} 
2 
 
Figure 5: Steps of frequent itemsets generation in TransSW2    
 
 
1
 It is a downward closure property, i.e., if a pattern is frequent, all of 
its sub-patterns will also be frequent. 
    In the next section, we will discuss the problem of online 
mining of frequent itemsets over time-sensitive stream sliding 
windows and extend the MFI-TransSW algorithm to solve this 
problem. 
III. EXPERIMENTS 
In this section, we report the experimental results of the 
proposed algorithm MFI-TransSW. All the programs are 
implemented using Microsoft Visual C++ Version 6.0 and 
performed on a 1.80 GHz Pentium(R) PC machine with 512 
MB memory running on Windows 2000. For testing frequent 
itemset mining over sliding windows, we generate online data 
streams using IBM synthetic data generator proposed by 
Agrawal and Srikant [1, 2]. The synthetic data stream, denoted 
by T5.I4.D1000K, of size 1 million transactions (D1000K) 
has an average transaction size of 5 items (T5) with average 
maximal frequent itemset size of 4 items (I4). In all 
experiments, the transactions of T5.I4D1000K are looked up 
in sequence to simulate the environment of an online data 
stream. 
A. Performance Evaluation of MFI-TransSW algorithm  
Because the the purpose of the paper is on frequent itemsets 
mining over online data streams with a transaction-sensitive 
sliding window, we mainly address it by comparison with the 
SWFI-stream algorithm [5]. The experiments of memory 
usage are shown in Figures 6, 7, and 8, and the processing 
times are shown in Figures 9 and 10. The minimum support 
threshold s and the size of a sliding window w are set to 0.1% 
and 20,000, respectively.  As shown in these experiments, 
MFI-TransSW significantly outperforms SWFI-stream for 
both memory consumption and CPU cost. 
Figure 6 shows the memory usage of the window 
initialization phase. As shown in Figure 6, MFI-TransSW 
algorithm requires only about 2.1 MB in window initialization 
phase, but the memory requirement of SWFI-stream is 
increased linearly from 11.2 MB to 109.7 MB. Figure 7 shows 
the memory usage of the window sliding phase. In this phase, 
the memory requirement of MFI-TransSW is also 
approximately 2.1 MB, but that of SWFI-stream is between 
109.7 MB to 120.3 MB. Figure 8 gives the memory usage of 
the frequent itemsets generation phase. In this phase, the 
memory requirement of MFI-TransSW is between 33.5MB to 
39MB. As shown in Figures 6-8, MFI-TransSW algorithm 
outperforms SWFI-stream for memory consumption.  
    Figure 9 shows the processing time of window initialization 
phase under different window sizes from 20,000 (200K) 
transactions to 100,000 (1,000K) transactions. Figure 10 
shows the total time of window sliding time and pattern 
mining time at each 100K transactions using various window 
sizes from 200K transactions to 1000K transactions. As 
shown in Figures 9 and 10, MFI-TransSW algorithm 
outperforms SWFI-stream for processing time consumption.  
 
 
In IEEE SMC 2006
