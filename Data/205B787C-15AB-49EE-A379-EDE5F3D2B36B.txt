中文關鍵詞： 時脈閘道,時脈偏斜,功率損耗,時鐘樹,時脈最佳化 
英 文 摘 要 ： In this three-year project, we will investigate 
several important clock related optimization 
techniques for VLSI circuit designs considering power 
consumption.  
Clock signal design has become extremely important 
due to its strong relation with power and performance 
of a design. First, a large proportion of total power 
consumption comes from the clock tree because of its 
high switching activity and heavy loading. To reduce 
power consumption, several previous works have 
proposed intelligent ways of deriving a clock gating 
function which determines the associated circuit＇s 
function will be clock gated or not.  Recently, we 
have observed an important inter-correlation between 
the clock gating function and the circuit＇s 
function. The observation may lead to a novel ways of 
delivering clock gating functions considering power 
minimization. 
Moreover, another clock related parameter, clock 
skew, the maximum difference among the clock 
latencies of sequential elements, imposes important 
constraints on the system performance.  Despite many 
studies on the clock tree optimization, the clock 
skew minimization is still very difficult to achieve 
due to the following reasons.  First, in advanced 
power-saving methodologies where various modules 
operate in different voltage modes in different 
times, a single piece of clock network must satisfy 
skew constraints in all possible power modes. As far 
as we know, none of the previous works consider the 
problem of complicated power modes in the context of 
the clock skew minimization.  In addition to 
complicated power modes, Process, Temperature, and 
Voltage (PVT) variations also put another dimensional 
of difficulties to the clock skew minimization.  In 
this 3-year proposal, we would like to achieve the 
following topics. 
(1)Sequential Circuit Optimization with Clock Gating 
Logic(2)Power Mode Aware Clock Tree Synthesis(3)Self-
Calibration Architecture for Clock Skew Minimization 
 1
□期中進度報告 行政院國家科學委員會補助專題研究計畫 ■期末報告 
 
 
針對超大型積體電路設計與時脈相關的功率與效能最佳化之方法(3/3) 
 
計畫類別：■個別型計畫   □整合型計畫 
計畫編號：NSC 98－2221－E－007－085－MY3 
執行期間：100 年 8 月 1日至 101 年 7 月 31 日 
 
執行機構及系所：國立清華大學資訊工程系 
 
計畫主持人：張世杰 
共同主持人： 
計畫參與人員：周宣明、陳聿廣、鄭名延、沈君謙、蔡念豫、吳鴻昌 
 
 
 
 
 
本計畫除繳交成果報告外，另須繳交以下出國報告： 
□赴國外移地研究心得報告 
□赴大陸地區移地研究心得報告 
■出席國際學術會議心得報告及發表之論文 
□國際合作研究計畫國外研究報告 
 
 
處理方式：除列管計畫及下列情形者外，得立即公開查詢 
            □涉及專利或其他智慧財產權，□一年□二年後可公開查詢 
 
 
 
中   華   民   國 101 年 10 月 30 日 
 3
different voltage modes in different times, a single piece of clock network must satisfy skew constraints in all 
possible power modes. As far as we know, none of the previous works consider the problem of complicated 
power modes in the context of the clock skew minimization.  In addition to complicated power modes, 
Process, Temperature, and Voltage (PVT) variations also put another dimensional of difficulties to the clock 
skew minimization.  In this 3-year proposal, we achieve the following topics : 
Sequential Circuit Optimization with Clock Gating Logic: In the first year, we first analyze the 
inter-correlation between the clock gating functions and a circuit＇s function. Then, we intend to propose an 
iterative optimization technique to construct effective both clock gating functions and a circuit＇s Boolean 
function for power and performance minimization. 
Power Mode Aware Clock Tree Synthesis: In the second year, we first investigate the problem 
complicated power modes affecting the clock skew.  Then, we intend to propose a two-level power mode 
aware CTS methodology. Among all different power modes, we globally reduce the skew among modules and 
locally reduce the skew of a single module. 
Self-Calibration Architecture for Clock Skew Minimization: In the third year, taking into account of PVT 
variation, we study the use of a self-calibration architecture using Adjustable Delay Buffers and Phase 
Detectors for clock skew minimization. Although ADB placement issues have been discussed previously, the 
overall architecture still has many issues for study. In the third year, we intend to propose the automation 
technologies related to the self-calibration architecture for clocks. 
 
（三）研究計畫之背景及目的 
This proposal intends to propose several important clock related optimization techniques for VLSI circuit 
designs considering power consumption and performance optimization. Our major tasks include the 
followings: (A) Power and Performance Circuit Optimization with Clock Gating Logic, (B) Power Mode 
Aware Clock Tree Synthesis, and (C) Self-Calibration Architecture for Clock Skew Minimization. In the 
following, we discuss the background and the motivation of each of the tasks.  
 
(A) Power and Performance Circuit Optimization with Clock Gating Logic 
A sequential circuit consists of combinational elements to compute next states and sequential elements 
such as Flip-Flops (FF) to store the current states. When a clock pulse arrives, a circuit re-evaluates the states. 
Normally, clock signals are delivered to all FFs periodically; however, it has been shown that it is not 
necessary to deliver a clock pulse to an FF in every clock cycle. Techniques such as clock gating 
[1][3][4][5][6][9][10][11][12][13][14][15] shut off clock signals when a circuit is in the idle state or when FFs 
need not change their states so as to save the power consumption. The structure with the clock gating is shown 
in Figure 1. The next-state function provides the next-state value of the Flip-Flop. The clock-gating function 
controls the clock signal of the Flip-Flop. If the clock-gating function is asserted, the clock is gated and is not 
delivered to the Flip-Flop. In addition, a Clock-Gating (CG) Cell consisting of a latch and an AND gate is 
used to avoid glitches. There should also be logic circuits computing the primary outputs which are omitted in 
the figure. 
 5
state value will still be correct because the next state is the same as the current state. 
 
Since FFa does not change its value for those current states in S, a clock pulse does not need to arrive at 
FFa and can be gated. We can derive a Boolean function b'+c' to characterize current states in S. Since no 
clock pulse is delivered to FFa when the condition b'+c' is true, we can randomly assign the output of the 
next-state function for those conditions; in other words, we can use b'+c' as the don’t-care function to 
minimize the original next-state function ab'+ac'+a'bc. The result of minimization is an inverter, a'. The new 
implementation of the 3-bit counter is shown in Figure 3. The interpretation of the new counter is that when 
(b,c) is equal to (1,1), FFa needs a clock pulse to change its state; otherwise, the clock is gated and FFa 
remains at its previous value. The concept differs from that of a traditional counter, which assumes a 
periodical clock signal. The new concept for the counter is to find the appropriate conditions so that a clock 
pulse is required to deliver. Still, the Boolean conditions to determine when there should be a clock pulse can 
be complicated for some sequential circuits.  
   
Figure 3: 3-Bit Counter with the Clock Gating for FFa 
CLK 
FFa 
FFb
FFc
a 
b 
c 
Clock-Gating Function 
Next-State Function
CG
Cell 
0  0  1
0  1  0 
0  1  1 
1  0  0 
1  0  1 
1  1  0 
1  1  1 
0  0  0 
0  0  0
0  0  1 
0  1  0 
0  1  1 
1  0  0 
1  0  1 
1  1  0 
1  1  1 
Current State Next State 
a  b  c a  b  c 
Figure 2: State Transition Table of a 3-Bit Counter 
 7
construct a clock tree for SoC. 
Despite many studies on clock tree optimization, the clock skew minimization is still very difficult to 
achieve in advanced power-saving methodologies where many different power modes are used. Figure 5 
shows an industrial example with over 40 modules in the design, some of which may operate in 1.2 V or 1.0V 
or may completely shut down. The design has a total of 64 power modes to fit various operating requirements. 
Some power modes are shown in Figure 5. For example, in power mode Full Speed, all three modules MPU, 
DSP1 and DSP2 operate in 1.2V while in power mode Suspend all three modules operate in 1.0V in Figure 5. 
Also, since the operating voltage has great influence on the delay of a clock buffer, the clock arrival times of 
FFs in a module may vary greatly when the module performs in a different operating voltage. As a result, it is 
extremely difficult to implement a single piece of clock network that satisfies the clock skew constraints in all 
possible power modes. As far as we know, none of the previous works consider the problem of complicated 
power modes in the context of clock skew minimization. 
   
   
Power Modes MPU DSP1
Full Speed 1.2V 1.2V 
Active1 1.2V 1.2V 
Active2 1.2V 1.0V 
Suspend 1.0V 1.0V 
Inactive 1.0V 0V 
 
 
   
Figure 5: Industrial example. 
In the second year, our objective is to optimize clock skew considering the complicated power modes in 
an SoC design. There are several challenges.  First, in the module level, since a module can operate in 
different voltages, the clock skew between different modules are large. Therefore, in the module level, we 
may need to design a clock tree taking care of clock skew difference.  On the other hand, within a module, 
even though the voltage of a module may change, all components in a module change their voltage at the 
same time.  Still, the delay differences of a component operate in different voltages may deviate. In other 
words, within a module, there is still a clock skew caused by changing the voltage mode. Therefore, we may 
need to design a clock tree which taking into account the mode change for a module.  
 
(C) Self-Calibration Architecture for Clock Skew Minimization 
Again, clock skew is the difference between the arrival times of two sequential elements such as 
Flip-Flops (FFs) or latches. A large clock skew can degrade the performance of a circuit and cause functional 
errors. Therefore, the clock skew must be restrained.  However, in the advanced technologies, various 
variations such as PVT variations may greatly affect a circuit’s delay and therefore the clock skew of a design. 
Since large clock skews may negatively impact the system performance, it is desirable to reduce the clock 
skew due to variation.  
Due to the severity of Process, Voltage, and Temperature (PVT) variations, traditional buffer sizing 
techniques might reduce the clock skew for certain PVT conditions but fail under other PVT conditions. Thus, 
 9
adjust the clock skew based on the results from PDs through the test access ports. Also, with the four-level 
buffer network, this architecture doesn’t need a global reference clock signal. Every ADB only needs to 
compare its results with that of its neighbors. 
Figure 9 shows a multi-level buffer network proposed to reduce the clock skew in [41]. In Figure 9, each 
circle means an ADB and the each edge represents the comparing pair of an ADB. For example, the FF of 
ADB53 will compare its clock arrival time with ADB45, ADB52, and ADB62.   
 
(a) The Architecture of the ADB with the Local Controller 
(B) The Architecture of the Delay Circuit The Architecture of the Local Controller 
Figure 7: The Architecture of the ADB in [43] 
 
 
Figure 8: (a) The Logic Diagram of the Self-Recalibration Architecture (b) The Four-Level Buffer 
Network 
 11
[3] M. Alidina, J. Monteiro, S. Devadas, and A. Ghosh, “Precomputation-Based Sequential Logic 
Optimization for Low Power,” Proc. of ICCAD, pp. 74-81, 1994. 
[4] L. Benini, and G. De Micheli, “Automatic Synthesis of Low-Power Gated-Clock Finite-State 
Machines,” IEEE Trans. on CAD, vol. 15, no. 6, Jun. 1996. 
[5] M. Müch, B. Wurth, R. Mehra, J. Sproch, and N. When, “Automating RT-Level Operand Isolation to 
Minimize Power Consumption in Datapaths,” Proc. of DATE, pp. 624-633, 2000. 
[6] V. Tiwari, S. Malik, and P. Ashar, “Guarded Evaluation: Pushing Power Management to Logic 
Synthesis/Design,” Proc. of ISPLED, pp. 221-226, 1995. 
[7] J. Oh, and M. Pedram, “Gated clock routing for low-power microprocessor design,” Proc. of ICCAD, 
pp. 715-722, 2001. 
[8] A. H. Farrahi, C. Chen, A. Srivastava, G. Téllez, and M. Sarrafzadeh, “Activity-Driven Clock 
Design,” IEEE Trans. on CAD, vol. 20, no. 6, Jun. 2001. 
[9] H. Kapadia, L. Benini, and G. De Micheli, “Reducing Switching Activity on Datapath Buses with 
Control-Signal Gating,” IEEE J. of Solid-State Circuits, vol. 34, no. 3, March 1999. 
[10] M. Onishi, A. Yamada, H. Noda, and T. Kambe, “A Method of Redundant Clocking Detection and 
Power Reduction at RT Level Design,” Proc. of ISLPED, pp. 131-136, 1997. 
[11] L. Benini, G. De Micheli, E. Macii, M. Poncino, and R. Scarsi, “Symbolic Synthesis of 
Clock-Gating Logic for Power Optimization of Synchronous Controllers,” ACM Trans. on Design 
Automation Electronic Systems, vol. 4, no. 4, pp. 351-375, 1999. 
[12] G. Lakshminarayana, A. Raghunathan, K. S. Khouri, N. K. Jha, and S. Dey, “Common-Case 
Computation: A High-Level Technique for Power and Performance Optimization,” Proc. of DAC, pp 
56-61, 1999. 
[13] Y. Luo, J. Yu, J. Yang, and L. Bhuyan, “Low Power Network Processor Design Using Clock 
Gating,” Proc. of DAC, pp. 13-17, 2005. 
[14] H. M. Jacobson, “Improved Clock-Gating through Transparent Pipelining,” Proc. of ISLPED, pp. 
26-31, 2004. 
[15] N. Banerjee, K. Roy, H. Mahmoodi, and S. Bhunia, “Low Power Synthesis of Dynamic Logic 
Circuits Using Fine-Grained Clock Gating,” Proc. of DATE, pp. 6-10, 2006. 
[16] A. P. Hurst, “Automatic Synthesis of Clock Gating Logic with Controlled Netlist Perturbation,” 
Proc. of DAC, pp. 654-657, 2008. 
[17] A. Agarwal, D. Blaauw, and V. Zolotov. “Statistical Clock Skew Analysis Considering Intra-Die 
Process Variations,” in Proc. of ICCAD, pp. 914-920, 2003. 
[18] K.D. Boese and A.B. Kahng, “Zero-Skew Clock Routing Trees with Minimum Wirelength,” in 
Proc. of IEEE 5th Int. ASIC Conf., pp. 1.1.1-1.1.5, 1992. 
[19] T.H. Chao, Y.C. Hsu, J.M. Ho, K.D. Boese and A.B. Kahng, “Zero Skew Clock Routing with 
Minimum Wire Length,” in IEEE Trans. on Circuits Systems, vol. 39, pp. 799-814, 1992. 
[20] C.M. Chang, S.H. Huang, Y.K. Ho, J.Z. Lin, H.P. Wang and Y.S. Lu, “Type-Matching Clock Tree 
for Zero Skew Clock Gating,” in Proc. of DAC, pp. 714-719, 2008 
[21] J. Cong and K.S. Leung, "Optimal Wiresizing Under the Distributed Elmore Delay Model," in IEEE 
Trans. on CAD, vol.14, pp. 321-336, Mar. 1995. 
 13
[40] Nasser A. Kurd, Javed S. Barkatullah, Rommel O. Dizon, Thomas D. Fletcher, and Paul D. 
Madland, "A Multigigahertz Clocking Scheme for the Pentium 4 Microprocessor," IEEE Journal of 
Solid State Circuits, vol. 36, 2001. 
[41] Patrick Mahoney, Eric Fetzer, Bruce Doyle, Sam Naffziger, "Clock Distribution on a Dual-Core, 
Multi-Threaded Itanium-Family Processor," Proceedings of the IEEE International Solid-State Circuits 
Conference, 2005. 
[42] Simon Tam, Rahul Dilip Limaye, and Utpal Nagarji Desai"Clock Generation and Distribution for 
the 130-nm Itanium® 2 Processor with 6-MB On-Die L3 Cache," IEEE Journal of Solid State Circuits, 
vol. 39, 2004. 
[43] Simon Tam, Stefan Rusu, Utpal Nagarji Desai, Robert Kim, Ji Zhang, and Ian Young, "Clock 
generation and distribution for the first IA-64 microprocessor," IEEE Journal of Solid State Circuits, 
vol. 35, 2000. 
[44] Thomas H. Cormen, Charles E. Leiserson, and Ronald L. Rivest, “Introduction to Algorithms,” 
pp970, The MIT Express, 1998 
[45] Uday Padmanabhan, Janet Meiling Wang, Senior Member, IEEE, and Jiang Hu, "Robust Clock 
Tree Routing in the Presence of Process Variations," IEEE Transaction on Computer-aided Design of 
Intergated Circuits and Systems, VOL. 27, NO. 8, 2008. 
[46] Vishal Khandelwal and Ankur Srivastava, "Variability-Driven Formulation for Simultaneous Gate 
Sizing and Postsilicon Tunability Allocation," IEEE Transaction on Computer-aided Design of 
Integrated Circuits and Systems, vol. 27, 2008. 
[47] Yi Wang, Wai-Shing Luk, Xuan Zeng, Jun Tao, Changhao Yan, Jiarong Tong,Wei Cai,and Jia Ni, 
"Timing Yield Driven Clock Skew Scheduling Considering non-Gaussian Distributions of Critical 
Path Delays," Proceedings of the 45th ACM/IEEE conference on Design automation, 2008. 
（四）研究方法及行步驟 
In this section, we describe the steps to achieve our three objectives namely (A)Power and 
Performance Circuit Optimization with Clock Gating Logic. (B) Power Mode Aware Clock Tree Synthesis. 
(C) Self-Calibration Architecture for Clock Skew Minimization. 
 
(A) Power and Performance Circuit Optimization with Clock Gating Logic 
A. Basic definitions and key facts 
We first present two simple but very important facts about the relationship between the clock-gating 
function and the next-state function for a single FF. The facts form the foundations of all following equations 
and heuristics. Note that the clock of an FF is shut off when the clock-gating function is asserted in Figure 1. 
FACT1: When the clock of an FF is gated, the next state of the FF remains the same regardless of whether the 
next-state function is zero or one. Therefore, the on-set of the clock-gating function can be the 
don’t-care set for the next-state function. 
FACT2: When the next state and the current state value of the FF are the same, the FF remains its state value 
 15
where FNS*(a) is the simplified next-state function and FCG*(a) is the simplified clock-gating function.  
Our iterative optimization requires initial Boolean functions of FNS and FCG. Since we have the initial 
next- state function FNS = FORI-NS(a), we need to find an appropriate initial clock-gating function FCG = 
FINI-CG. How FINI-CG is determined will be described later. Let us assume FINI-CG is available. According to 
EQ(1), we can use FNS = FORI-NS as the on-set and FCG = FINI-CG as the don't-care set to obtain a simplified 
FNS*. In other words, 
FNS*(a) <= {on-set = FORI-NS(a), dc-set = FINI-CG(a)}. 
Once the simplified next-state function FNS* is determined, according to EQ(2), we can use FCG = FINI-CG as 
the on-set and (a≣FNS*(a)) as the don’t-care set to obtain simplified FCG*.  
FCG*(a) <= {on-set = FINI-CG(a), dc-set = (a≣FNS*(a))}. 
After that, we can assign FCG = FCG* and FNS = FNS* and then use EQ(1) and EQ(2) to iteratively simplify 
both functions again.  
The above iterative process requires an initial clock- gating function. We now describe our selection for 
the initial function of FCG called FINI-CG. In our heuristic, we choose either of the following two Boolean 
functions.  
FINI-CG(a) = a' * ((a≣FORI-NS(a))| a = 0).     EQ(3) 
FINI-CG(a) = a * ((a≣FORI-NS(a))| a = 1).     EQ(4) 
where the symbol “|” denotes the cofactor operator. In our heuristic, if the number of fanouts of variable a' in 
FNS is larger than the number of fanouts of variable a, we choose EQ(3); otherwise, we choose EQ(4). It is 
because EQ(3) has better chance to minimize equations containing a' while EQ(4) is better for a.  
The iterative heuristic method can be extended to simplify a whole circuit for the timing optimization. 
First, we perform a trial run of delay optimization to obtain the critical FFs whose inputs or outputs are in the 
“long” paths. The long paths can be defined as those paths whose path delay is less than 20% of the delay of a 
longest path. We then choose several FFs that are the end points of the critical paths and then apply our 
iterative heuristic method to these FFs for at most k times of iteration loops where k is chosen to be 5 in our 
experiments.  
 (B) Power Mode Aware Clock Tree Synthesis 
Given the positions of k ADBs and the arrival time for each leaf node (such as Flip-Flop) in a clock tree, we 
describe a linear time algorithm of ADB’s assignment so that the clock tree achieves optimal skew among all 
assignments. For ease of discussion, we first present our algorithm with certain assumptions regarding the 
positions of ADBs. However, our algorithm can easily be modified and will perform without any 
assumptions.  
Although ADBs can be placed anywhere in the clock tree, it is inefficient to place ADB at the root because 
skew will not be improved. Also, the positions of ADBs should not form a “cut” that isolates the root node 
 17
After the partition computations, we now describe our skew-optimal algorithm. Our basic idea is that since 
arrival times of a partition move at the same pace, if the earliest arrival times of all partitions can be aligned, 
the clock skew will be equal to the largest skew of all partitions. According to Lemma 2, the skew must be 
optimal, since this is the best we can achieve. Since arrival times of partition(ADBroot) cannot be changed, we 
attempt to align the earliest arrival time of all partitions with the earliest arrival time of partition(ADBroot). 
First, we process the assignments of ADBs in the order such that an ADB close to the root is processed first. 
For example, in Figure 3(a), the process sequence is ADB1, ADB2, ADB3, and ADB4. Now, suppose ADBi is the 
one under consideration for its value assignment. We assign its value as follows: 
 
 
After the assignment of ADBi, we update the arrival times influenced by ADBi. We continue to process the 
next ADB until all ADBs are assigned. For example ADB1 is processed first because ADB1 is close to the root 
node. The difference of the earliestAT(ADB1) and earliestAT(ADBroot) is equal to 10-4=6. We assign ADB1 to 
be 6. Similarly, we assign (10-8=) 2 to ADB2 and (10-6=) 4 to ADB3. Finally, ADB4 is assigned 0 because 
earliestAT(ADB4) is larger than earliestAT(ADBroot) as in EQ(1). Figure 3(b) shows the final skew of each 
partition. As in Figure 3(b), the assignment forces the earlier arrival time of each partition to be the same. The 
final clock skew under these assignments of ADBs is 5 compared to the original clock skew 12. The following 
theorem shows that our algorithm is optimal.  
Theorem 1: After the ADB assignment algorithm, the clock skew is optimal among all possible assignments. 
Proof:  Omit. 
It is possible to assign 0 for ADBs. The ADB with assignment of 0 is referred to as a "redundant ADB." A 
redundant ADB can be removed from the clock tree without increasing the circuit’s clock skew. For example 
in Figure 3(b), ADB4 is a redundant ADB. After removing redundant ADBs, we can merge partitions and 
re-compute the partitions’ skews. 
If a design does not contain any redundant ADBs, we have the following theorem.   
Theorem 2: The optimal clock skew of all possible assignments is equal to the largest partition skew if there 
is no redundant ADB.  
Proof: Omit. 
For example in Figure 3(b), the final clock skew is equal to the largest partition’s skew, 5.  
   After obtaining an optimal ADB assignment, we turn to clock latency. In this section, we describe our 
approach to reduce the clock latency, which is also a concern in the clock tree design. Since we align the 
earliest arrival time of each partition in our algorithm, it is possible that the latest clock arrival time could 
become larger after ADB assignment. For example in Figure 3, the latest arrival time of partition(ADB4) 
becomes 15, which is larger than the original maximum clock latency  14.  
   Our idea is to iteratively “pull back” the largest clock latency of partitions while maintaining the optimal 
skew. The following lemma shows a way of possibly reducing the largest latency while guaranteeing that the 
value of skew will not be changed. 
Lemma 3: The clock skew is still optimal when the partition with the largest clock latency can be aligned 
with the second largest arrival time by decreasing the value of the ADB. 
Proof: Omit 
)2(
)1(
);()(
)()(;0
EQ
EQ
otherwiseADBearliestATADBearliestAT
ADBearliestATADBearliestAT
ADB
iroot
rooti
i ⎩⎨
⎧
−
>=
 19
clock skew in a partition cannot be adjusted by ADBs. For example, in Figure 6, since FF3 and FF5 are only 
affected by ADB2, we cannot adjust the clock skew between FF3 and FF5. Therefore, we need not compare the 
clock arrival times among FFs in a partition. As a result, in each partition, we choose one representative FF 
whose clock signal would be sampled by a PD. In Figure 5, there are 3 partitions, {(FF1, FF2), (FF3, FF4, 
FF5), (FF6, FF7, FF8, FF9, FF10)}, and the chosen representative FFs are FF1, FF5, and FF7.  Normally, a 
“critical” FF is chosen as the representative one in a partition. 
 Before performing the worst-case clock skew analysis, we must understand the difficulty of this problem 
caused by the limitation of the practical designs. In the first place, a practical ADB has discrete resolution, 
meaning that the delay of an ADB cannot be adjusted to any desired delay value. For example, in [43], the 
minimum resolution of an ADB is 8.5ps and the ADB’s delay can be adjusted only in the pace of 8.5ps. As a 
result, after the self-recalibration process, the clock skew between two FFs can only be guaranteed within the 
resolution of an ADB. We call the clock skew caused by the finite resolution of an ADB the resolution skew. 
Secondly, wires must connect two representative FFs and a PD.  Unbalancing wire delays and the 
location-based variation (LOCV) can cause a PD to sample inaccurate clock information. For example, in 
Figure 5, wire w2 is longer than w1. Therefore, the sampling clock phases of FF1 and FF5 to PD1 already have 
a skew compared to the “real” clock phases of FF1 and FF5. We define the clock skew caused by unbalanced 
wire delays as the sampling skew. 
 
Figure 10: The Adjustable Delay Buffer in [40] 
In a practical design of ADBs, the delay of an ADB cannot be adjusted to a desired value. Figure 10 shows 
a practical ADB implementation in [40], where the delay of the ADB depends on a 3-bit control signal. In this 
example, there are eight different equal-spaced delays. The space between two consecutive delays is the 
resolution of the ADB. Due to the minimum resolution, one can guarantee to adjust the skew only within the 
resolution. In this paper, we define resSkew as the skew caused by the resolution of an ADB. In the worst case, 
resSkew equals to the resolution of the ADB. Though it is possible that the clock arrival times of two FFs are 
out of the tuning range of ADBs, we ignore such cases as being irrelevant for our purpose.  
The main cause of the sampling inaccuracy is the delays of extra connecting wires. In Figure 11, the 
sampling clocks of PD1 are clk1’ and clk2’ whereas the “real” clocks are clk1 and clk2. The difference between 
the sampling clocks clk1’ and clk2’ can deviate due to the delay of w1 and w2. The sampling inaccuracy is 
defined to be |(clk1-clk2)-(clk1’-clk2’)|. For example, assume that in Figure 11 the clock arrival times of clk1, clk2, 
 21
First, two FFs can be synchronized through serial connections of FFs and PDs even if they are not directly 
connected by a PD. Let us consider FF1 and FF3 in Figure 12 where the intrinsic inaccuracy between FF1 and 
FF2 is Inaccuracy12 and between FF2 and FF3 is Inaccuracy23. We will show that the in the worst case, the 
intrinsic inaccuracy between FF1 and FF3 is equal to the summation of Inaccuracy12 and Inaccuracy23. The 
reason is as follows. Due to the intrinsic inaccuracy, the clock signal of FF1 may arrive Inaccuracy12 earlier 
(later) than FF2, and FF2 may also arrive Inaccuracy23 earlier (later) than FF3. As a result, in the worst case, 
FF1 will arrive (Inaccuracy12 + Inaccuracy12) earlier (later) than FF3.  
 
Figure 12. The accumulation of intrinsic inaccuracy through PD connection 
structure. 
We can extend to the general case when two FFs are synchronized through N serially connected FFs. The 
intrinsic inaccuracy between these two FFs in the worst case is the summation of all intrinsic inaccuracies 
between FFs in the serial chain. For example, the intrinsic inaccuracy between FF1 and FF4 in Figure 12 is 
Inaccuracy12 + Inaccuracy23 + Inaccuracy34. The summation of the intrinsic inaccuracy suggests that we 
should not create a long serial chain for a PD tree structure.  
Similar to the global clock skew which describes the largest clock skew among all pairs of FFs, this section 
discusses how to compute the global intrinsic inaccuracy which describes the largest intrinsic inaccuracy 
among all pairs of FFs. Since we assume the PD connection structure is a PD tree structure, our objective is to 
find the pair of FFs which has the largest intrinsic inaccuracy.  
Figure 13 shows a simplified PD tree structure of Figure 12 where only representative FFs are shown in the 
graph. In Figure 13, the number on an edge represents the intrinsic inaccuracy. Since the intrinsic inaccuracy of 
two serially connected FFs are the summation of all intrinsic inaccuracies in the serial chain, the global 
intrinsic inaccuracy of this tree is 22 (=11+4+7) which is the intrinsic inaccuracy between FF5 and FF4. 
 
Figure 13. A simplified PD tree structure. 
Given a PD tree structure, the problem of finding the global intrinsic inaccuracy can be transformed to the 
known problem of finding the longest path in a tree graph, which can be solved in O(N) where N is the number 
of FFs. Figure 14 shows the method of finding the global intrinsic inaccuracy in a tree. 
 23
  
(a) (b) 
Figure 15. Skew synchronization graph and 
the optimal PD tree structure. 
Figure 15(a) shows a skew synchronization graph where the number on an edge is the wire length. Figure 
15(b) shows a selection of five edges to form a tree structure. In this PD tree structure, the diameter is 25 
between FF5 and FF6. This tree in fact has the minimum diameter among all possible trees. 
The min-max problem of finding the best spanning tree is also known as the Minimum Diameter Spanning 
Tree (MDST) problem or a special case of the k-source maximum eccentricity spanning tree problem which 
has been discussed in the discrete applied mathematics field. The MDST problem is to construct a spanning 
tree in a graph so that the diameter of the tree is minimized. The research shows that the MDST problem can be 
solved in O(|V|3). In the following, we explain how to adopt the algorithm [7] to construct a PD MDST 
structure. 
Find_Best_Spanning_Tree(G)  
do 
min_diameter = INF; 
for each node vi in skew synchronization graph G do 
for each node vj in V-{vi} do 
Connect {vi, vj}; 
for each node vk in V-{vi, vj} do 
if (sjk > ski) { 
Connect {vi, vk}; 
}else{ 
Connect {vj, vk}; 
} 
end for 
current_diameter = Find_Global _Intri_Inacc(G); 
if (min_diamter > current_diameter) { 
min_diamter = current_diamter; 
best_focal_pair = {vi, vj}; 
} 
Remove_All_Edges; 
end for 
end for 
Construct the two-focal tree with the focal FFs as best_focal_pair
end do 
Figure 16. The pseudo code of the MDST algorithm.  
First, we need some definitions. A vertex in a tree is a leaf node if the vertex has only one edge. A non-leaf 
vertex is called a focal node. A two-focal tree is a tree with exactly two focal nodes. It has been proven that 
there is an MDST which has two focal nodes. Our algorithm which finds a two-focal tree with the minimum 
diameter is described as follows.  
Given a skew synchronization graph, we iterate through every pair of FFs. Let a pair of FFs be under 
consideration. Using the two FFs as the two focal nodes, our algorithm tries to construct an optimal two-focal 
tree. We illustrate the procedure by an example in Figure 15(b). Suppose FF1 and FF4 are chosen as the two 
focal nodes. Then, for a node other than FF1 and FF4, we try to connect the node to either FF1 or FF4. We use 
the length of edges as the choice of the connection. If the node has a shorter wire length to FF1 than to FF4, we 
connect the node to FF1; otherwise, we connect to FF4. For example, in Figure 15(b), FF2 should connect to 
FF1 (length= 3) rather than FF4 (length= 9). We repeat connecting all other leaf nodes until all leaf nodes are 
 25
Our basic ideas are based on two observations. First, extremely long wires may have unpredictable large 
sampling inaccuracy. In addition, reducing the load of focal nodes may also reduce the interference effect of 
focal nodes and therefore improve the sampling inaccuracy. Our method greedily reduces the worst intrinsic 
inaccuracy in the structure. We iteratively search a PD connection with the largest intrinsic inaccuracy and try 
to reconnect to others. Based on our observations, we try to reconnect a long wire to a shorter wire and also 
try to reduce the loading of the focal node if possible. If the reconnection result is better or equal to the 
previous one, we accept the reconnection. For example, suppose that the edges in Figure 17(a) show the real 
intrinsic inaccuracies. The edge between FF3 and FF6 has a very large intrinsic inaccuracy. Thus, we remove 
the edge between FF6 and FF3, and try to reconnect FF6 to the FF5. If the reconnection has better global 
intrinsic inaccuracy such as Figure 17(b), we accept this modification. We greedily perform the reconnection 
process until the global intrinsic inaccuracy cannot be improved. 
（五）結果與討論 
In this section, we show the experimental results of our three objectives, Power and Performance Circuit 
Optimization with Clock Gating Logic, (B) Power Mode Aware Clock Tree Synthesis, and Self-Calibration 
Architecture for Clock Skew Minimization, respectively.  
(A) Power and Performance Circuit Optimization with Clock Gating Logic 
We implemented the method in Section 2.3 and applied it to iscas89 sequential benchmark circuits. We 
use TSMC 0.13μm library as the technology libraries and Synopsys Design Compiler® for timing 
optimization. Table 1 shows the results of TSMC library. Columns 1 and 2 show the name and the number of 
FFs of a benchmark circuit. Column 3 shows the longest delay after using SIS script.delay. Column 4 shows 
the longest delay of the whole circuit. Column 5 shows the longest delay of only the next-state functions FNS, 
Timing (ns)  Area (μm2) 
Optimized Circuit  # FFs 
Original 
Whole   FNS  FCG 
Improvement 
(%) 
Original Optimized 
Overhead 
(%) 
Runtime(
sec.) 
s27  3  0.11  0.10 0.10 0.10 9.09 156.16  151.07  -3.26  7.1 
s820  5  0.88  0.66 0.63 0.61 25.00 4877.13 5302.35  8.73  58.0 
s832  5  0.89  0.69 0.63 0.61 22.47 5103.24 5229.24  2.48  57.9 
s1494  6  1.38  1.22 1.19 1.01 11.59 3829.33 4114.50  7.45  22.3 
s510  6  0.75  0.67 0.46 0.67 10.67 3951.76 3805.40  -3.70  47.9 
s208  8  0.61  0.55 0.02 0.25 9.84 1111.02 758.42  -31.74  37.2 
s344  15  1.17  0.91 0.89 0.83 22.22 909.81  1351.13  48.51  60.9 
s349  15  1.14  0.90 0.89 0.78 21.05 906.41  1378.29  52.06  71.3 
s641  19  0.83  0.75 0.67 0.59 9.64 6879.00 7770.47  12.96  89.1 
s526  21  0.59  0.53 0.48 0.42 10.17 3206.65 2780.87  -13.28  95.3 
s526n  21  0.59  0.53 0.48 0.42 10.17 3206.65 2780.87  -13.28  95.2 
s1423  71  3.61  3.02 2.68 2.18 16.34 3846.31 4056.79  5.47  1341.3
Table 1: Results using Synopsys Design Compiler® with TSMC 0.13 μm library 
 27
88.04ps among all power modes. In this case, the clock latency penalty due to the ADB assignment is 1.14%. 
The area overhead of the ADB insertion is 0.18% of the total cell area, which doesn’t consider the controller 
of the ADB and routing overhead.  
For several circuits such as s38417, the maximum clock latency is not affected by ADB insertion. It’s 
because for those circuits, the positions of ADBs are not on the path with maximum latency. In addition, the 
addition and removal of an ADB can alter the capacitance loading in a clock tree and therefore, changing the 
arrival times of lead nodes. Since the change is insignificant compared to the delay adjustment by ADBs, we 
do not consider the loading effect in our algorithm. However, the final arrival times and the skew of the clock 
tree are reported using CAD tools which consider all loading effects caused by insertion of ADBs. 
(C) Self-Calibration Architecture for Clock Skew Minimization 
We integrate our approach with the conventional design flow and the new design flow is shown in Figure 18. 
First, we place and route a synthesized circuit by the commercial tool, SOC Encounter, and obtain the timing 
and physical information of the circuit. With the physical information of FFs, we construct the PD connection 
structure from the algorithm After that, we apply ECO placement and routing flow by SOC Encounter. Finally, 
we perform our iterative heuristic. 
We apply the new design flow of Figure 18 on three large industrial designs in TSMC 90nm library. The 
clock arrival times to PDs are obtained from the clock tree browser of the SOC Encounter. With clock arrival 
time information, we can calculate all the sampling inaccuracies. The resolution inaccuracy is 8.5ps. For the 
purpose of comparison, we generate two other different tree structures. The central tree structure with one-focal 
tree is constructed by choosing a focal FF which is located is in the medium position of all FFs. The MST 
structure is the minimum spanning tree structure. We would like to mention that the central tree structure is best 
for reducing the overall resolution inaccuracy while the MST tree structure is good for reducing the sampling 
inaccuracy. 
 
Figure 18. The experimental flow chart. 
 
 29
z Y.S. Su, W.K. Hon, C.C. Yang, S.C. Chang, and Y.J. Chang, ＂Value Assignment of Adjustable Delay 
Buffers for Clock Skew Minimization in Multi-Voltage Mode Designs,＂ Proc. of International 
Conference on Computer Aided Design, ICCAD 
z Y.C. Kao, H.M. Chou, K.T. Tsai, and S.C. Chang, ＂An Efficient Phase Detector Connection Structure 
for the Skew Synchronization System,＂ Proc. of Design Automation Conference, DAC 
（七）結論 
In this project, we have full analyzed the effect of the clock skew to the performance and power. We not 
only investigated the influence of the clock skew, but also proposed several design methodologies to deal with 
the important problems in power and performance issue. The experimental results show that our methods 
outperform pervious works significantly. We would like to thank the National Science Council of Taiwan for 
supporting this project. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 31
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
時脈相關的效能與功率問題已經在許多重要的研討會上不停地被強調，本計
畫的完成有效地深入討論時脈對於功率與效能的影響並提出獨特且有效的看
法，我們的研究不僅發表在期刊之上，更在本領域最重要的幾個研討會中被
選為論文。我們相信未來在更先進的製程之下，我們在計畫中研究的架構能
夠針對效能與功率有更佳的結果。在研究方面，本計畫產出了一篇 IEEE 
Transaction journal paper一篇 ACM Transaction journal paper以及四篇 IEEE國
際會議(一篇 DAC，兩篇 ICCAD，一篇 DATE)，其研究成果獲得國際上的肯
定。對於人才的培育方面，子計畫除了完整的課程訓練之外，也讓計畫人員
參與國際會議，發表論文，對於產學界的幫助十分顯著。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 2
論文接受函: 
 
---------- Forwarded message ---------- 
From: Ki-Seok Chung <kchung@hanyang.ac.kr> 
Date: 2011/8/10 
Subject: Acceptance Notice for ISOCC 2011 Special Session 
To: scchang@cs.nthu.edu.tw, "Shi, Yiyu" <yshi@mst.edu> 
副本： Woo-Young Choi <wchoi@yonsei.ac.kr>, "\"윤광섭\"" 
<ksyoon@inha.ac.kr>, 이한호 <hhlee@inha.ac.kr>, 임신일 <silim@skuniv.ac.kr> 
 
Dear Prof. Shih-Chieh Chang and Yiyu Shih, 
 
We are happy to tell you that your proposal for ISOCC 2011 Special Session 
(Three-dimensional Stacking: Theories, Tools and Tapeouts) has been 
accepted. 
We would like to inform you and the participants in your special session of 
the following: 
 
-  A full paper (2~4 pages) for each presentation in the special session 
has to be submitted to www.isocc.org from Sep. 1 to Sep. 14, 2011. 
- The submitted paper will go through the reviewing process by the TPC and 
notification of acceptance will be sent out by Oct. 1, 2011. The review by 
TPC is needed so that we can select candidates for the best paper award. 
- Each presenter in the special session as well as the organizer  has to 
register for the conference by Oct. 15, 2011, the early registration 
deadline. We may have to cancel the paper if the presenter does not make 
the early registration. 
- ISOCC 2011 will reimburse the early registration fee to the special 
session organizer and half the early registration fee to special session 
presenters during the conference. 
 
Would you kindly forward above information to the participants in your 
session? 
If there are any questions, please do not hesitate to ask us. 
Once again, we thank you very much for your interest and participation in 
ISOCC 2011. 
We look forward to seeing you in Jeju during ISOCC 2011. 
 
Best Regards, 
Woo-Young Choi (wchoi@yonsei.ac.kr) and Hanho Lee (hhlee@inha.ac.kr) 
 -page number- ISOCC 2011 
redundancy in semiconductor chip interconnects. To address the 
reliability issues, in the double TSV technique, each original TSV 
will be paired with an additional spare TSV. Figure 2 illustrates the 
concept of the double TSV technique. In normal condition, the signal 
is transferred through the two TSVs simultaneously. Once a TSV is 
faulty, there is still a redundant TSV to pass the signal. By applying 
this technique, the only failure condition is that both TSVs in a pair 
are faulty, which has a much lower probability. Since the two TSVs 
are used to conduct the same signal, no additional circuits are 
required. While effective, this method uses up a lot of area; given the 
large size of TSVs (10-125 um2) from industrial report [5], [6], [18], 
[21], it is less practical.  
B. Shared-spare TSV Technique 
To lower the area cost induced by the redundant technique, 
another technique is proposed by grouping a set of TSVs, and 
assigning spare TSVs to each group. By inserting multiplexers and 
arranging the reconfigurable routing properly, the spare TSVs can be 
used to deliver the signal in the presence of faulty TSV. In Figure 3, 
the TSVs in solid lines are signal TSVs, and the TSV in dotted line is 
spare TSV. For each TSV, two MUXs are added to shift the signal to 
the neighboring TSV when a TSV is failed. When all TSVs are good, 
all signals are transferred by original TSVs in Figure 3(a). When a 
TSV fails, the signal of the faulty TSV needs to be shifted. This in 
turn causes all signals between the faulty TSV and the spare TSV to 
be shifted. Figure 3(b) shows the operation when the second TSV is 
faulty. When a signal is shifted, a larger delay is induced due to 
longer wires and extra components. In addition, only one faulty TSV 
can be recovered in each group in this architecture. Therefore, the 
recovery rate is decided by the ratio between the number of signal 
TSVs and the number of spare TSVs in each TSV-group. Although 
this method reduces the area overhead compared with the double 
TSV technique, we have to cluster a few TSVs together physically, 
and that introduces wiring and delay overhead. 
This concept was first presented in 2008. For both NOC-based 
and bus-based 3D interconnects, a simple and efficient defect-
tolerant architecture is proposed in [13]. By taking advantage of the 
NOC switch architecture, the area overhead can be minimized. The 
physical level evaluation demonstrates the significant yield 
improvements and the lower cost. 
Samsung realized this technique in an 8Gb 3D DDR3 DRAM [5]. 
Since there is no distinction between regular and redundant TSVs, in 
that design, they didn’t specify dedicated redundant TSVs. Different 
from conventional structures which have dedicated and fixed-
location of redundant TSVs, relaxing this constraint can decrease the 
detour path, reduce the routing complexity and loading. In addition, 
they also evaluated two different configurations, 4:2 group (four 
signal TSVs with two redundant TSVs) and 2:1 group (two signal 
TSVs with one redundant TSVs). The statistical analysis shows that, 
the yield rate of 4:2 group is higher than that of 2:1 group. The 
reason is that the chip has more repair flexibility and fewer TSV 
groups with the 4:2 configuration. In addition, each TSV will go 
through an open-short testing, and faulty TSVs will be repaired using 
e-fuses. 
For regular layout style such as NOC and memory designs, the 
above two methods [5], [13] can improve the yield significantly. 
Considering ASIC designs, there are certain issues, such as timing 
problems and routing strategy, need to be solved The TSV-chain 
architecture for ASIC designs was suggested in [3]. First, they 
suggest to forming a TSV-chain in each TSV block. Then, according 
to the direction of connections, three chaining styles are discussed to 
control the timing overhead. Finally, the author explained the 
required modifications on the design flow. The researchers from 
IMEC discuss the cost and efficiency of different ratio between the 
number of TSVs including spare TSVs and electrical paths [19]. 
The aforementioned methods all assuming the information of 
defective TSVs is given and concentrating on dealing with the repair 
scheme. However, giving the large number of used TSVs, to obtain 
the faulty TSV information from external facilities will induce 
considerable cost. To address this issue, on-chip testing mechanisms 
are needed. The inventors from Qualcomm shows that the failure 
analyzing, routing controlling and signal path rerouting can be 
carried out by built-in redundancy analysis units (BIRA) units [7] 
and TSV defect Checker (TDC) units [9]. The methodology 
presented in the BIRA techniques is relatively intelligent when the 
control algorithms can be applied wisely. Furthermore, a BISTR 
(built-in self-test/repair) scheme [4] is presented. In that scheme, test 
patterns are generated from a built-in generator, then transmits 
through TSVs. An analyzer compares the test pattern with the output 
response to determine whether the TSV is defective or not. After that, 
Figure 2. Illustration of the concept of double TSV technique 
 
(a) 
 
(b) 
Figure 3. Illustration of the concept Shared-spare TSV Technique. (The TSVs 
in blue color are signal TSVs, and the TSV in green color is spare TSV)  (a) 
Operation when all TSVs are valid. (b) Operation when the second TSV is 
faulty. 
 -page number- ISOCC 2011 
test/repair scheme for TSV-based three-dimensional integrated circuits. 
In Proc. of APCCAS, 56-59 
[5] Kang, U. and et al. 2009. 8Gb 3D DDR3 DRAM using through-
silicon-via technology. IEEE ISSCC. 130-132. 
[6] Kawano, M. and et al. 2006. A 3D packaging technology for 4 Gbit 
stacked DRAM with 3 Gbps data transfer. IEDM Dig. Tech. Papers. 
581-584. 
[7] Kim, J., Wang, F., and Nowak, M. 2010. Method and apparatus for 
providing through silicon via (TSV) redundancy. United State Patent 
Application Publication. US 2010/0295600 A1 (Nov. 25, 2010). 
[8] Kim, T. Y. and Kim, T. 2010. Clock tree synthesis with pre-bond 
testability for 3D stacked IC designs. In Proc. of DAC. ACM, New 
York, NY, 723-728. 
[9] Laisne, M., Arabi, K., and Petrov, T. 2010. System and methods 
utilizing redundancy in semiconductor chip interconnects. United State 
Patent Application Publication. US 2010/0060310 A1 (Mar. 11, 2010). 
[10] Lewis, D. L. and Lee, H.-H. S. 2007. A scan-island based design 
enabling prebond testability in die-stacked microprocessors. In Proc. of 
ITC. 1-8. 
[11] Lung, C. L., Zeng, Z. Y., Chou, C. H., and Chang, S. C. 2010. Clock 
skew optimization considering complicated power modes. In Proc. of 
DATE. European Design and Automation Association, 3001 Leuven, 
Belgium, Belgium, 1474-1479. 
[12] Lung, C. L., Su, Y. S., Huang, S. H., Shi, Y. and Chang, S. C. 2011. 
Fault-Tolerant 3D Clock Network. In Proc. of DAC. ACM, New York, 
NY, 645-651. 
[13] Loi, I., Mitra, S., Lee, T. H., Fujita, S., and Benini, L. 2008. A low-
overhead fault tolerance scheme for TSV-based 3D network on chip 
links. In Proc. of ICCAD. IEEE Press, Piscataway, NJ, 598-602. 
[14] Minz, J., Zhao, X., and Lim, S. K. 2008. Buffered clock tree synthesis 
for 3D ICs under thermal variations. In Proc. of ASP-DAC. IEEE 
Computer Society Press, Los Alamitos, CA, 504-509. 
[15] Mondal, M., Ricketts, A. J., Kirolos, S., Ragheb, T., Link, G., 
Vijaykrishnan, N., and Massoud, Y. 2007. Thermally robust clocking 
schemes for 3D integrated circuits. In Proc. of DATE. EDA 
Consortium, San Jose, CA, 1206-1211. 
[16] Pavlidis, V. F., Savidis, I., and Friedman, E. G. 2008. Clock 
distribution networks for 3-D integrated circuits. In IEEE CICC. 651-
654. 
[17] Peng, M. S., 2008. Clocking architecture in stacked and bonded dice. 
United State Patent Application Publication. US 2008/0204104 A1 
(Aug. 28, 2008) 
[18] Plas, G. V. d., and et al. 2010. Design issues and considerations for 
low-cost 3D TSV IC technology. IEEE ISSCC. 148-150. 
[19] Velenis, D., Marinissen, E. J., and Beyne. E. 2010. Cost effectiveness 
of 3D integration options. In Proc. of 3DIC, 1-6 
[20] Wang, P. C., Bonaccio, A. R., Guo, J. R., and Hsu, L. L. C. 2011. 
Three-dimensional chip-stack synchronization. United State Patent. 
US 7863960 B2 (Jan. 4, 2011). 
[21] Yoshikawa, H. and et al. 2009. Chip-scale camera module (CSCM) 
using through-silicon-via (TSV). IEEE ISSCC. 476-477. 
[22] Zhao, X., Lewis, D. L., Lee, H. H. S., and Lim, S. K. 2009. Pre-bond 
testable low-power clock tree design for 3D stacked ICs. In Proc. of 
ICCAD. ACM, New York, NY, 184-190. 
 
98年度專題研究計畫研究成果彙整表 
計畫主持人：張世杰 計畫編號：98-2221-E-007-085-MY3 
計畫名稱：針對超大型積體電路設計與時脈相關的功率與效能最佳化之方法 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 2 2 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 2 2 100%  
研究報告/技術報告 0 0 100%  
研討會論文 4 4 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
