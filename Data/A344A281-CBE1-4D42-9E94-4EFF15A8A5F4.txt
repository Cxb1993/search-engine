 
應用於數位電視之低功率基頻接收器 
“The study of low power baseband receiver for DTV applications＂ 
計畫編號：NSC94-2215-E009-044, NSC95-2221-E-009-291, NSC96-2221-E-009-181 
執行期間：94年 8月 1日 至 97年 7月 31日 
計畫主持人：李鎮宜 交通大學電子工程系教授 
中文摘要 
對於數位電視行動接收的低功率需求，我們針對數位電視基頻接受器(DVB-T 
OFDM baseband receiver)中功率消耗最多的兩個主要元件 Viterbi decoder、FFT core提出
架構設計上的改進，期待有效降低基頻接收器中功率消耗的問題。在此報告中，將分成
兩個部分討論。在第一部份，我們將討論 Viterbi decoder在運算過程中，關鍵模組 ACS
的運算複雜度、功率消耗問題，並提出相關的改進。第二部分，我們將針對數位電視基
頻處理器中另一個功率消耗甚多的 FFT core，在架構上進行討論與改進，並提出一個架
構可延伸的 FFT core，以應用於各種點數的 FFT應用。 
在此計畫的補助下，過去三年我們在相關研究領域發表了多篇國際期刊論文，近十
篇會議論文，其中包括 JSSCC, T-CAS-I, T-CAS-II, T-VLSI, ISSCC…等，同時也有多項
專利提出申請。其詳細清單附錄於本報告文末。 
Abstract: 
In this report, we studied the two main components, Viterbi decoder and FFT core, in 
term of low power design in DVB-T OFDM baseband receiver for portable applications. 
We'll explore low-power design techniques at different levels, especially at algorithm and 
architecture, to achieve better power performance indices. This report is composed of two 
parts. In the first part, we will discuss the key component, ACS in Viterbi decoder processing 
flow, and then propose a new architecture to achieve low power consumption by taking into 
account system I/O behavior. In the second part, we will exploit memory hierarchy and 
dynamic scaling for FFT processor to reduce power consumption and storage space. In the 
same time, we propose an index-scalable pipelined architecture for several kinds of size FFT 
applications. 
In past three years, we published more than fifteen papers in journals and conferences, 
and several patents in progress. All those results supported by this project are listed in the end 
of this report. 
The re-encoder then encodes i(D) to a new codeword 
z(D). 
* Re-encoder output: 
ˆz(D) = i(D) G(D) =  C(D)⋅     (3) 
* Decoder input: 
ˆy(D) = r(D) + z(D) = C(D) + e(D) + C(D)  (4) 
In high SNR condition, y(D) is nearly an all zero 
sequence. Therefore, the decoded information sequence 
ˆo(D) = i(D) + n(D) = u(D) + ε    (5) 
where ε is nearly all zero. 
If the channel condition is good enough, the input of the 
decoder is nearly all zero in SST decoding. The ACS 
circuit almost selects the same branch and the correct path 
in survivor memory is almost an all zero sequence. 
Therefore, the dynamic power is reduced. 
3. Power Reduction with Variable Truncation 
Length 
3.1 Path Merging Property 
As the Viterbi algorithm indicated, the decoder output 
is the codeword that minimizes the conditional probability 
of the received sequence. Therefore, entire received 
sequence should be stored and analyzed before any 
decoding output. In practical applications, the received 
sequence length may be large. To reduce storage 
requirement and decoding latency, the survivor path should 
be truncated to a finite length. If the truncation length T is 
large enough, the performance could achieve that of 
maximum-likelihood decoding. 
Fig.4 illustrates the survivor paths stored in the survivor 
memory. If the truncation length T is long enough, all 2υ 
survivor paths will merge with high probability for a 
2υ-state Viterbi decoder. When all 2υ paths merge, it is 
more efficient to store the merged path rather than 2υ paths. 
If the channel noise is not serious, all paths will merge 
rapidly. The average required truncation lengths for path 
merging in different channel conditions are analyzed and 
listed in TABLE 1. Based on path merging property, we 
design path merging detection unit to reduce the power 
consumption of the survivor memory. 
 
Fig.4: Survivor paths stored in the survivor memory. 
Table 1: Average required truncation length for path merging in 
different channel condition. 
Eb/N0 1.0 2.0 3.0 4.0 5.0 
Truncation length 33.78 26.86 23.34 21.54 20.54
3.2 Variable Truncation Length 
The Viterbi decoder for the MB-OFDM UWB system 
has 64 states. Fig.5 illustrates the survivor memory by 
radix-4 trellis diagram. D0 to D64 are the decisions provided 
by ACS for survivor path selection. Base on path merging 
property, the values of 64 states tend to be equivalent from 
the left stages to the right stages. Therefore, the values in 
right stage are more reliable.  
We exploit path merging detection unit to find the 
merge point. Obviously, if the values of 64 states are 
equivalent at some stage, the 64 survivor paths merge. 
However, it is complex to check if 64 2-bit (radix-4) values 
are equivalent. To reduce the hardware complexity, the 
proposed Viterbi decoder detects path merging by dividing 
64 states into 16 groups and checking them separately. The 
simulation result proves this condition will not cause 
performance loss. We assume the 64 survivor paths have 
merged and the value in state 0 is already reliable if every 
group (the circles in Fig.6) contains equivalent values at 
some stage. After detecting the merge point, we apply 
clock gating to the registers in the shadow region and shift 
out the value of state 0 directly. The state 0 path is seen as 
the merged path and other 62 paths are not stored. 
 
Fig.5: Path merging detection scheme. 
Fig.6 illustrates the survivor memory architecture with 
variable truncation length. The registers of each stage are 
connected to the path merging detection unit. The path 
merging detection unit decides the merge point and 
generates clock signals of each stage. Based on the scheme, 
we can adjust truncation length dynamically. In high SNR 
environment, shorter truncation length is required and 
clock gating can be applied to more registers. Therefore, 
the access of survivor memory is very efficient especially 
as the channel noise is not serious. 
channel condition is 2.56e-6. Fig.9(A) indicates survivor 
memory power is a critical factor in conventional decoder 
design. With SST and variable truncation length schemes, 
the ratio of survivor memory power is reduced significantly 
as Fig.9(B) illustrates. Furthermore, the SST unit and path 
merging detection unit consumes less than 2% decoder 
power. 
 
Fig.9: The power profiling of (A) conventional re structure and (b) 
proposed structure in as eb/n0 is 5.0 db. 
5. Conclusions 
In this paper, we present a low-power Viterbi decoder 
combining the SST approach and the variable truncation 
length scheme. Reducing the state transition activities, the 
SST reduces the dynamic power in the decoder. The 
variable truncation length scheme provides a more efficient 
survivor memory management that pursues the sufficient 
truncation lengths for real channel conditions. 
Consequently, the redundant data movement can be 
abandoned for low power. Furthermore, high SNR 
environment causes the survivors merge rapidly, leading to 
more gated register elements. The overhead due to 
additional control logics is 10% gate count increase. 
Experimental results indicate the power reduction of the 
whole decoder and the survivor memory unit can achieve 
more than 30% and 60% respectively. 
Reference 
[1] A. J. Viterbi, “Error bounds for convolutional codes and 
asymptotically optimum decoding algorithm,” IEEE Trans. 
Inform. Theory, vol. IT-13, no. 2, pp. 260-269, Apr. 1967. 
[2] G. Feygin and P. G. Gulak, “Architectural tradeoffs for 
survivor sequence memory management in Viterbi 
decoders,” IEEE Transactions on Communications, vol. 41, 
no. 3, pp. 425-429, March, 1993. 
[3] C. C. Wu, “A High-Performance and Low-Power Viterbi 
Decoder,” MS. thesis, National Chiao Tung Univ., 2003. 
[4] A. Batra et al., “Multi-band OFDM physical layer proposal 
for IEEE 802.15 task group 3a,” submitted to IEEE 
P802.15 working group for WPANs, Sept. 2004. 
[5] P. J. Black and T. H. Meng, “A 140-Nb/s, 32-state, radix-4, 
Viterbi Decoder,” IEEE J. Solid-State Circuits, vol. 27, no. 
12, pp. 1877-1885, Dec. 1992. 
[6] S. Kubota and S. Kato, “Novel Viterbi Decoder VLSI 
Implementation and its Performance,” IEEE Trans. 
Commun., vol. 41, no. 8, pp. 1170-1178, Aug. 1993. 
[7] L. H. C. Lee, D. J. Tait, and P. G. Farrell, 
“Scarce-State-Transition Syndrome-Former Error-Trellis 
Decoding of (n,n-1) Convolutional Codes,” IEEE Trans. 
Commun., vol. 44, no.1, pp. 7-9, Jan. 1996. 
[8] S. Kubota, K. Ohtani, and S. Kato, “High-Speed and 
High-Coding-Gain Viterbi Decoder with Low Power 
Consumption Employing SST (Scarce State Transition) 
Scheme,” Electron. Lett., vol. 22, no.9, pp. 491-493, Apr. 
1986. 
[9] C. C. Lin, Y. H. Shih, H. C. Chang, and C. Y. Lee, “Design 
of a Power-Reduction Viterbi Decoder for WLAN 
Applications,” IEEE Trans. Circuit and Syst. I, vol. 52, no. 
6, pp. 1148-1156, June 2005. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Fig.2. FFT stage block diagram in I/O operation 
 
Fig.3. Proposed indexed-scaling method flow diagram in I/O 
operation (a)Exponent information storage, (b)Scaling operation 
2) Indexed-Scaling Method in BU Operation: After the 
FIFO is filled with feed-in data, the butterfly unit (BU) is 
ready for FFT computations. As illustrated in Fig.4, the 
FIFO output is aligned to the input exponent (down scaled 
if necessary) by the ALI unit for BU processing. The 
overflow detection and scaling (ODS) units detect the 
possible overflow and scale the data for BU outputs to 
maintain the same word-length. If an overflow occurs, the 
output data is scaled to half (one-bit right shift) and the 
output exponent is increased by one. In our ODS design, 
the output data will always be considered as “overflow” if 
its input exponent is smaller than the previous output 
exponent. In this way, incremental exponents can always 
be assured in both feedback and output paths which 
simplifies the operation of data alignment. This 
incremental exponent technique has been proposed in [7] to 
reduce the number of stored exponents. The scaling flow 
diagram is shown in Fig.5. To store the information for 
follow-up scaling, both the maximum value and the 
transition indexes of feedback exponents are stored in 
EXPFB and INDFB respectively as illustrated in Fig.5(a) 
which is similar to the feed-in processing in Fig.3(a). As 
for the data-path scaling, the FIFO output data are first 
scaled to the same exponent EXPFI according to the 
transition indexes INDFI and then aligned to the stage 
inputs. Since EXPFI is always smaller than or equal to the 
input exponent because of the incremental exponents, only 
down scaling is required. After the BU computation is 
finished, the overflow detection and scaling together with 
exponent generation are performed for feedback and output 
path independently. The scheduling of the proposed 
indexed-scaling method in both I/O and BU operations for 
the entire FFT stages is summarized in Fig.6. 
 
Fig.4. Block diagram of one FFT stage in BU operation 
 
Fig.5. Proposed indexed-scaling method flow diagram in BU 
operation (a)Exponent information storage, (b)Scaling operation 
 
Fig.6. Operation of proposed indexed-scaling method for the entire 
FFT computation 
3. FFT architecture 
The block diagram of the proposed 2048-point 
indexed-scaling FFT processor is shown in Fig.7. To 
achieve the high-throughput requirement with low 
hardware cost, both the proposed indexed-scaling method 
and the MRMDF architecture [10] are exploited in this 
design. As illustrated in Fig.7, the 2048-point FFT 
processor is partitioned into four processing modules using 
radix-22/23 algorithm [18] to reduce the number of complex 
multiplications. The scaling controller stores the scaling 
information for each module and controls the scaling 
operations according to the proposed scaling method. The 
detailed description of each module will be given below. 
 
Fig.7. Block diagram of proposed 2048-point FFT processor 
Scaling controller: The scaling controller is responsible 
for storing the exponent information (EXPFI, EXPFB, INDFI, 
INDFB), generating the control signals for each FFT stage, 
and producing the final exponent outputs. Since multipath 
delay feedback structure is employed in this design, we 
design a single scaling controller generating the same 
22 2 , 1 logi
i
FIFOM W N i N= × ≤ ≤ (1) 
where N is the FFT size. For the feed-in path at stage i, 
up to i-1 indexes are required to be stored in INDFT and 
each of them needs log2N-i bits for encoding. Thus, the 
total size of scaling storage for feed-in path at stage i is 
2 2 2
_ _ _ _
( 1)(log ) log ( 1) 1, 2 log
i
FI FI
FI
size of IND Size of EXP
M i N i i i N= − − + − + ≤ ≤⎢ ⎥⎣ ⎦	
 	

(2) 
Similarly, the scaling storage size for feedback path at 
stage i is 
2 2 2
_ _ _ _
(log ) log 1, 1 log
i
FB FB
FB
size of IND Size of EXP
M i N i i i N= − + + ≤ ≤⎢ ⎥⎣ ⎦	
 	
 (3) 
where ⋅⎢ ⎥⎣ ⎦  denotes the floor operator. By summation 
of (1), (2), and (3) for all FFT stages, the memory 
requirement of the proposed indexed-scaling method is 
listed in Table II. Also, a summary of the memory costs for 
other scaling-based algorithms is given in Table II for 
comparison. Note that CBFP is not employed in the first 
two stages of CBFP FFT to save the intermediate buffers 
[15] and thus the word-length of these stages is increased 
to prevent overflows. Besides, we assume 
tailored-exponents are employed for data scaling and 
co-optimization FFTs as described in [17]. Di-1 is the 
optimal intermediate buffer size in the co-optimization 
algorithm which can be calculated [17]. From Table II, the 
memory costs of both scaling overhead and data FIFOs are 
plotted with 9-bit input word-length in Figs. 12 and 13.We 
can find that the proposed algorithm has the minimum 
memory requirements in both scaling elements and FIFOs. 
The total memory cost of the proposed method is only 
about 66% of that of CBFP FFT. When compared to the 
co-optimization algorithm, a memory reduction of 11% can 
still be achieved by the proposed indexed-scaling 
algorithm. 
5. Chip implementation 
A test chip of a 2048-point indexed-scaling FFT 
processor has been implemented using UMC 90nm 1P9M 
CMOS technology. Our target application is a 16-QAM, 
1.2 Gsample/s wideband OFDM system which can provide 
over 2 Gbps data rate. A 9-bit word-length is chosen to 
meet 32.7 dB SQNR and the core area of this FFT chip is 
0.97 mm2 as illustrated in Fig.12. From post-layout prime 
power simulation, it is shown that our FFT processor 
consumes about 117 mW at 300 MHz. For comparison, a 
2048-point FFT processor with fixed-point radix-22/23 
MRMDF structure described in [10] is also implemented 
under the same throughput and SQNR specifications. The 
chip comparison between the proposed indexed-scaling 
FFT processor and fixed-point FFT processor is given in 
Fig.13. It is clear that both area and power can be greatly 
reduced by the proposed scheme with little scaling 
overhead. Compared to the fixed-point FFT processor, 
about 26% area and 28% power can be saved using the 
proposed indexed-scaling method. 
 
Fig.12. Chip layout summary of the proposed FFT processor 
 
Fig.13. Chip comparison between and proposed FFT processors 
Table II: Memory requirement for different scaling methods 
 
6. Conclusion 
In this brief, an indexed-scaling pipelined FFT 
processor has been proposed for wideband OFDM 
applications such as the next-generation gigabit WPAN 
systems. With a new indexed-scaling method and the 
MRMDF structure, both very high through put requirement 
and lower hardware cost can be achieved. Compared to the 
previous scaling-based algorithms, it is shown that at least 
11% memory size is reduced. Moreover, from the 
post-layout simulation, the proposed FFT processor can 
save about 26% chip area and 28% power consumption 
under the same throughput and SQNR specifications 
compared to conventional high-throughput FFT processors 
Reference 
[10] Y.-W. Lin, H.-Y. Liu, and C.-Y. Lee, “A 1-GS/s FFT/IFFT 
processor for UWB applications,” IEEE J. Solid-State 
Circuits, vol. 40, no. 8, pp. 1726–1735, Aug. 2005. 
[11] J. Lee, H. Lee, S.-I. Cho, and S.-S. Choi, “A high-speed, 
low-complexity radix-2 FFT processor for MB-OFDM 
UWB systems,” in Proc. IEEE Int. Symp. Circuits Syst. 
(ISCAS), 2006, pp. 4719–4722. 
[12] Y.-W. Lin and C.-Y. Lee, “Design of an FFT/IFFT 
processor for MIMO OFDM systems,” IEEE Trans. 
Circuits Syst. I, Reg. Papers, vol. 54, no. 4, pp. 807–815, 
Apr. 2007. 
[13] Y.-W. Lin, H.-Y. Liu, and C.-Y. Lee, “A dynamic scaling 
FFT processor for DVB-T applications,” IEEE J. 
