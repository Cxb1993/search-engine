 2
Abstract 
Informally, a geometric constraint problem consists of a (finite) set of geometric elements and 
a (finite) set of constraints between them. Variable-radius circles are common constructs in planar 
constraint solving and are usually not handle fully handled by algebraic constraint solvers when the 
geometric elements contains the parametric curves.  
 
This works offers a set of basic constructive methods for the complete treatment of 
variable-radius circle determined by the simultaneous placement of two other rigid geometric 
objects. There are two constraints between the variable radius circle and each of the rigid geometric 
objects. We extend the geometric entities in rigid geometric objects from the set of point, line and 
circle to the set contains parametric curves. We also extend the way we solve the geometric 
constraint problem in geometric space to volume space, so that we can find a initial guess of the 
solution, and via numerical method, such as Newton method, can refine the solution of the problem.  
 
Keywords: Variable-radius circles, , Volume space, Geometric constraint solving,  
CAGD(Computer Aided Geometric Design) , Cyclographic map. 
 
 4
三、研究方法 
  本計劃為擴充幾何限制求變動圓(變動圓心和變動半徑)之問題，主要分為二個部份，第
一部份是擴充能處理的幾何物件，將貝氏曲線(Bezier Curve)納入考量，求變動圓(變動圓心和
變動半徑)同時和三個不同的幾何物件(線、圓或貝氏曲線)相切之方法；第二部份則是擴充實
體合併問題(Cluster Merge Problem)，將原本僅處理線或圓的幾何物件，擴充至能處理貝氏曲
線。我們逐步詳細說明本研究之方法： 
 
在立體空間建置貝氏曲線的 Cyclographic Maps 
基於緣由與目的所述之問題，得知貝氏曲線為參數曲線之一，其 Cyclographic Maps 並無
一函數之變數有隱函式所以造成我們求解的困難度，本節更進一步做詳細說明，現考慮貝氏
曲線 C(t)、貝氏曲線的 tangent T(t)、貝氏曲線的 normal N(t)和貝氏曲線的 Cyclographic maps 
Cyclo(s,t)之等式如下： 
 
∑
=
=⎥⎦
⎤⎢⎣
⎡=
n
i
i
n
i PtBtY
tX
tC
0
)(
)(
)(
)(  
∑−
=
+
− −⋅=⎥⎦
⎤⎢⎣
⎡=
1
0
1
1 ])[(
)('
)('
)(
n
i
ii
n
i PPtBntY
tX
tT  
=)(tN ∑−
= +
+−
−
−⋅=⎥⎦
⎤⎢⎣
⎡− 1
0 ..1
.1.1 ])[(
)('
)(' n
i xixi
yiyin
i PP
PP
tBn
tX
tY
 
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢
⎣
⎡
Δ
Δ−
+
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢
⎣
⎡
=
1
/)('
/)('
0
)(
)(
),( tX
tY
stY
tX
tsCyclo  , where 22 )(')(' tYtX +=Δ  
 
注意到在貝氏曲線的Cyclographic maps之等式中有 Δ， 使得我們計算 Cyclo(s,t)時會因為有 Δ
之故，造成 Cyclo(s,t)計算的複雜度和 degree 的遞增。 
由上所述我們更清楚得知加入貝氏曲線不易在 Geometric Space 求得 Cyclographic Maps，
為了解決此問題，我們利用 Volume Space 來處理貝氏曲線的 Cyclographic Maps，在 Volume 
Space 中需避免我們所建置貝氏曲線的 Cyclographic Maps 過於鬆散以造成缝隙過大，容易漏
掉我們要求的解，且不能因為要讓貝氏曲線的 Cyclographic Maps 在 Volume Space 能夠緊密，
而增加貝氏曲線的 Cyclographic Maps 之厚度，造成我們求得錯誤或重覆之交點，所以我們在
Volume Space 中建置貝氏曲線的 Cyclographic Maps 需特別注意緊密度和厚度的問題。以圖 1
說明，現考慮二度空間某一貝氏曲線 C(t)，我們想在三度空間產生介於 C( 0t )到 C( tt Δ+0 )之
間的 Cyclographic Maps，而由於產生數位化後之 Cyclographic Maps 過於鬆散，使得當我們要
計算某一直線 L(數位化後)，與此段 Cyclographic Maps 相交時，由二個 Rotated Normal 之間
穿過，因而未找到交點，相反的，當此段數位化後之 Cyclographic Maps 過厚，數位化後之 L
將與其交於一點以上。 
 6
注意到在步驟 1 中，我們可依求解之範圍在 Geometric Space 中設置足夠大的 Bounding 
Box，並依其比例來決定 Volume Space 中的解析度，以避免產生 distortion。 
現考慮利用 Bresenham’s algorithm 來產生一條從(x1,y1,z1)至(x2,y2,z2)之直線，比較Δ x,Δy
與Δ z, where Δ x =x2-x1, Δ y =y2-y1, and Δ z=z2-z1 並且找出Δ x,Δy 與Δ z 三者間的最大值，三
者間的最大值決定我們需延著 I, J 或 K 軸來做主軸產生 Voxel。注意到在步驟 3 中，我們利用
Bresenham’s algoirthm 來繪製從點 pi至點 qi之直線，先求出二點之間的Δ x,Δ y 與Δ z, where 
Δ x=pi.x-qi.x, Δ y=pi.y-qi.y, Δ z=Zmax-Zmin (Δ z 為三者間的最大值)，所以我們決定以 K 為主軸來
繪製直線 Li，即表示每一條直線 Li (貝氏曲線的 Rotional normal)和 K=k 平面(k 為常數)相交
時，僅交於一個 Voxel。注意到在演算法 1 中當直線 Li (貝氏曲線的 Rotional normal)經運算
後，若與 K=k 平面相交時，發現該 Voxel 早已被標示，則仍可交於同一個 Voxel，這表示當
我們在 Volume Space 中建置貝氏曲線的 Cyclographic maps 時，會依貝氏曲線方向性的不同，
使得直線 Li (貝氏曲線的 Rotional normal)和 K=k (其中 k=0,…,nz-1)平面可能會交於同一個
Voxel。 
在步驟 4 中，我們透過 Voxel 之表示來建置貝氏曲線的 Cyclographic Maps，依序選出一
平面 K=k (k=0,…,nz-1)，而在步驟 4.1 中，我們利用 3D 的 Bresenham’s algorithm 求出並標示
Li (i=0,…,n)穿過該平面的所有有順序的 Voxel 稱之為 Pk,i，且在步驟 4.2 中，我們針對這些有
順序的 Voxel 點 Pk,i到 Pk,i+1 (其中 i=0,…,n-1)利用 2D 的 Bresenham’s algorithm 依序連接平面
上所有的 Voxel，如圖 2 所示我們延著 K 軸利用 Bresenham’s algorithm 依序連接 K=k (其中
k=0,…,nz-1)平面上有順序的 Voxel。 
 
 
圖 2 延著 K 軸依序連接 K=k 平面上的 Voxel 
 
在立體空間中求變動圓同時和三個不同的幾何物件相切 
在此研究中我們擴充能處理的幾何物件，將貝氏曲線(Bezier Curve)納入考量，以進一步
求變動圓同時與三個不同幾何物件相切之問題，我們利用符號 L 來表示幾何物件的線，利用
符號 C 來表示幾何物件的點(半徑為零之圓)或圓，利用符號 B 來表示幾何物件的貝氏曲線，
進而產生出十類求變動圓同時與三個不同幾何物件相切之子問題，如表 1 所示第一欄的
Problem 列出三個不同幾何物件如 L(線)、C(點、圓)或 B(貝氏曲線)，求變動圓(變動圓心和變
 8
//(i, j, k)即表示 )()()( 321 EEE ζζζ ∩∩ 之交點。 
3.1 將 Volume Space 中 index 為(i, j, k)之 Voxel 轉換至 Geometric Space 中相對應的空
間座標(x, y, z)。 
3.2 利用數值方法(如牛頓法)，將(x, y, z)做最後微調，得出新點( ',',' zyx )。最後求得
變動圓之圓心為( ',' yx )，半徑為 'z 。 
 
注意到在步驟 1 中，我們可依求解之範圍在 Geometric Space 中設置足夠大的 Bounding 
Box，並依其比例來決定 Volume Space 中的解析度，以避免產生 distortion。 
而在步驟 2 中我們可利用 Bresenham’s algorithm 針對 )( iEζ 來進行轉換，且針對第五例至
第七例的問題，我們於步驟 2 可先在 Geometric Space 中求出 )()( 21 EE ζζ ∩ 之交線，之後將
求出之交線轉換至 Volume Space 中，並標示 )()( 21 EE ζζ ∩ 所佔的 Voxel。 
 在步驟 3.2 中，當我們在 Geometric Space 中求出空間座標(x, y, z)，此時可利用數值方法
來做最後微調，舉例來說，利用牛頓法給予三個幾何物件求變動圓之函數，並令起始點為(x, y, 
z)，透過迭代來逐漸逼近函數的根，得到新的座標點( ',',' zyx )，其詳細計算過程非本論文之
重點，在此不加以論述。 
 
在立體空間中之實體合併問題 
本研究已在立體空間中求出變動圓同時和三個不同的幾何物件(線、圓、貝氏曲線)相切
之後，接下來我們擴充其方法將貝氏曲線(Bezier Curve)納入考量，進一步解決實體合併問題
(Cluster Merge Problem)。首先我們先以二個實體(rigid)中個別含著二個幾何物件(點、線、圓
或貝氏曲線)為研究基礎，將主要問題分類成 21 個子問題分別列於表 2 和表 3 之中。 
 
表 2 Cluster Merge Problem of Geometric Space. Solve in [1,2,3] 
Problem Working Space 
E1: E(LL,LL) Geometric 
E2: E(CL,LL) Geometric 
E3: E(CL,CL) Geometric 
E4: E(CC,LL) Geometric 
E5: E(CC,CL) Geometric 
E6: E(CC,CC) Geometric 
 
 10
3. 將每個 Voxel 的 Index 內被標示為 3 或 4 的 Voxel (i, j, k)，沿 I 軸平移 m 個距離，並
將平移後所佔的 Voxel 之 Index (i+m, j, k)依原編號標示。 
4. 針對每個 Voxel 的 Index 內同時有標示為 1,2, 3 和 4 的 Voxel (i, j, k)與距離 m。 
// (i, j, k)即表示 ),(),()()( 4321 mEmEEE ζζζζ ∩∩∩ 之交點。 
4.1 將 Volume Space 中 index 為(i, j, k)之 Voxel 轉換至 Geometric Space 中相對應的空間
座標(x, y, z)，且將 I 軸上 m 個 voxel 間的距離 d 求出。 
4.2 利用數值方法(如牛頓法)，將(x, y, z)及 d 做最後微調，得出新點( ',',' zyx ) 'd 。 得
知 2S 平移 'd 距離，即求出變動圓之圓心為( ',' yx )，半徑為 'z 。 
 
注意到在步驟 1 中，我們可依求解之範圍在 Geometric Space 中設置足夠大的 Bounding 
Box，並依其比例來決定 Volume Space 中的解析度，以避免產生 distortion。 
透過上述演算法所產生的結果得知，當我們將 Cluster S2平移距離 d 後，我們可找到一圓
心在(x, y)且半徑為 z 的變動圓同時和四個幾何物件(線、圓、貝氏曲線)相切。且 在 步 驟
4.2 中，當我們在 Geometric Space 中求出空間座標(x, y, z)及距離 d，此時可利用數值方法來做
最後微調，舉例來說，利用牛頓法給予四個幾何物件求變動圓和距離之函數，並令起始點為
(x, y, z)及 d，透過迭代來逐漸逼近函數的根，得到新的座標點( ',',' zyx )及 d’，其詳細計算過
程非本研究之重點，在此不加以論述。 
上述步驟是針對平移的實體合併問題(Cluster Merge Problem)，若要解決旋轉的實體合併
問題 C(E1E2,E3E4)，只要在步驟 3 中針對 K 軸做旋轉並記錄旋轉之角度，並在步驟 4.1 中計算
出對應至 Geometric Space 中旋轉之度數，而其它步驟皆和演算法 3 相同，透過此方法我們就
能一併解決旋轉的實體合併問題。 
 
 12
體整合。本計畫實作之部份是使用Microsoft Visual C++ 6.0編譯器，2D與3D繪圖採用OpenGL 
API，硬體採用 P4 2.8GHz CPU 來完成。在此我們利用本研究之方法來進行實作，列舉表 1
和表 3中的三個範例來說明在立體空間中關於變動圓同時和三個不同的幾何物件相切與平移
或旋轉的實體合併問題之實體整合，而在實例中有關數值方法(如牛頓法)之分析並非本研究
之重點，所以未加入實作之中加以討論。 
 
範例一： The LCB Problem 
在範例一中討論變動圓同時和三個不同的幾何物件(點、線、圓和貝氏曲線)相切，在此
我們令 L1、C2 和 B3 分別為圖 4 中在二度空間內的直線、圓與貝氏曲線，其方程式和控制點
座標如下所示： 
 0
73
4226
219
77
1 =−+−= ZyxL  
 0)
10
926()25()26( 2222 =−−+++= ZYXC  
 )]105,145(),73,110(),114,20(),81,52[(],,,[ 32103 −−−−−−−== PPPPB  
 
接著我們令 Bounding box (Xmin, Xmax, Ymin, Ymax, Zmin, Zmax)= (-250, 250, -250, 250, -100, 100)
和解析度(nx,ny,nz)=(1500,1500,300)，利用演算法 2 我們找到一變動圓心為(4,-34)和變動半徑
為 58 之變動圓同時和直線、圓與貝氏曲線相切(如圖 4 所示)。而在圖 4 中右邊的部份則表示
直線、圓、貝氏曲線和變動圓在三度空間的 Cyclographic Maps。 
經由前面所描述的軟硬體平台，並透過系統執行演算法 2 來解決問題 LCB，在本例中我
們花費了 0.312 秒求出變動圓之解。 
 
 
圖 4  LCB 的系統使用介面 
 14
46 之變動圓同時和 '4'321 ,,, LBCB 相切(如圖 6(a)所示)，第二組解是當 S2 平移-11 pixel (即向左
平移)可找到一變動圓心為(19,-13)和變動半徑為 99之變動圓同時和 '4'321 ,,, LBCB 相切(如圖 6(b)
所示)，在圖 6 中虛線部份表示 Cluster S2 尚未平移前的座標位置，而實線部份表示固定 Cluster 
S1 經運算後求得已平移的 Cluster S2 和變動圓(變動圓心和變動半徑)之座標位置。 
經由前面所描述的軟硬體平台，並透過系統執行演算法 3 來解決問題 L(B1,C2,B3,L4)，在
本例中我們花費了 0.342 秒求出變動圓之解。 
 
  
(a)  d=147, C(101,-3), r=46    (b)  d=-11, C(19,-13), r=99 
圖 6 平移後的 L(B1,C2,B3,L4) 
 
範例三：C(B1,B2,B3,B4) 
我們令 B1、B2 為 Cluster S1(圖 7 中在二度空間內位於左邊部份的二條貝氏曲線)和 B3、
B4 為 Cluster S2(圖 7 中在二度空間內位於右邊部份的二條貝氏曲線) ，而在圖 7 中右邊的部
份則表示旋轉前四個不同的貝氏曲線在三度空間的 Cyclographic Maps，其控制點座標如下所
示： 
 
)]9,171(),1,93(),46,46(),94,22[(],,,[ 32101 −−−−−== PPPPB  
)]76,178(),72,115(),17,72(),50,103[(],,,[ 32102 −−−−−−−== PPPPB  
)]64,115(),58,76(),67,0(),151,5[(],,,[ 32103 −−−−−== PPPPB  
)]12,168(),23,109(),48,68(),114,64[(],,,[ 32104 −−−−== PPPPB  
 
 16
   
(a) 74.153−=θ , C(-125,36),  r=-26   (b) 89.133−=θ , C(-1,-32), r=95 
圖 8 旋轉後的 C(B1,B2,B3,B4) 
 
 18
六、參考文獻 
[1] Christoph M. Hoffmann, Ching-Shoei Chiang, “Variable-Radius Circles in Cluster Merging, 
Part I：Translational Clusters,” CAD, 34, pp. 787-797, 9, 2002. 
[2] Christoph M. Hoffmann, Ching-Shoei Chiang, “Variable-Radius Circles in Cluster Merging, 
Part II：Rotational Clusters,” CAD,34 ,pp. 799-805, 9, 2002. 
[3] Ching-Shoei Chiang, Robert Joan-Arinyo, “Revisiting Variable Radius Circles in Constructive 
Geometric Constraint Solving”, CAGD, 21, pp. 371-399, 4, 2004. 
[4] William E.Wright, “Rendering: Parallelization of Bresenham's Line and Circle Algorithms”, 
IEEE Computer Graphics and Application, 10, pp. 60-67, 1990. 
[5] Bouma, W., Fodos, I., Hoffman, C.M., Cai, J. and Paige, R. “A Geometric Constraint Solver,” 
CAD, Vol. 27(6), pp. 487-501, 1995. 
[6] Fudos I., “Constraint Solving for Computer Aided Design”, Ph.D. thesis, Department of 
Computer Science, Purdue University, 1995. 
[7] Hoffmann C.M., Vermeer P, “Geometric constraint solving in 2R  and 3R “, Computing in 
Euclidean Geometry, World Scientific Publishing, pp. 266-298, 1995 
[8] Joan-Arinyo, R., Soto, A., “A Correct Rule-Based Geometric Constraint Solver”, Computer and 
Graphics, 21(5), pp. 599-609, 1997. 
[9] Fudos I, Hoffmann C.M., “Constraint-Based Parametric Conics for CAD”, CAD, 28(2), pp. 
91-100, 1996. 
[10] Hoffmann C.M., Peters J., “Geometric Constraints for CAGD”, Mathematical Methods for 
Curves and Surfaces, Vanderbilt University Press, pp. 237-254, 1995. 
[11] Muirhead, F.R., “On the number and nature of the solutions of the Apollonius contact 
problem,” Proceedings of the Edinburgh Mathematical Society, 14, pp. 135-147, 2002. 
[12] Bruen, A., Fisher, J.C., Wilker, J.B., “Apollonius by Inversion” Mathematics Magazine, Vol.56, 
No.2, 1983. 
[13] Pottmann, H., Wallner J., Computational Line Geometry, pp. 327-425, Springer 2001. 
[14] Allner, J., Krasauskas, R., Pottmann, H., “Error propogation in geometric constructions”, CAD, 
Vol. 32, No. 11, p631-641, 2000. 
[15] Cassino Durand, C.M. Hoffmann, “A systematic framework for solving geometric constraints 
analytically”, J. Symbolic Computation, Vol. 30, pp. 493-519, 2000. 
[16] Muller E, Krames L., “Vorlesungen Uber Darstellende Geometric II: Die Zyklographie”, 
Deuticke, Leipzig und Wien, 1929. 
[17] Hoffmann C.M., George Vanecek, Jr, “Fundamental Techniques for Geometric and Solid 
Modeling”, Leondes, C.T., Advances in Control and Dynamics, Academic Press, 1991. 
[18] Bresenhams, J.E., “Algorithm for computer control of a digital plottor”, IBM Syst. J., 4(1), pp. 
25-30, 1965. 
[19] X-W Liu, K Cheng, “Three-dimensional extension of Bresenham’s algorithm and its 
application in straight-line interpolation”, SC02401, 2002. 
