1. Introduction∗ 
As the wireless computing environments emerge and evolve, wireless networks with 
inexpensive sensor devices become prevalent in various areas, such as surveillance and 
monitoring. One of the essential issues in the deployment of a wireless sensor network is the 
coverage problem evaluating the quality of service of a particular sensor network. Some 
applications such as hazard monitoring may require higher coverage as delayed information or 
incomplete data may cause tragedies. A sensor network designer might want to know how to 
improve the coverage by deploying extra sensor nodes such that the quality of monitoring can be 
improved and the environment is secured.  
Coverage problems in sensor networks studied by the researchers include the worst-case and 
best-case coverage problem, the area coverage, and connectivity maintenance, etc. The 
worst-case coverage of a sensor network defined in Meguerdichian and et al. [1] quantifies the 
quality of service by find a path with the lowest observability among all the possible paths from a 
given starting point to a given destination point. Such path is called maximal breach path as the 
path is the most far away from the sensors. Similarly, the best-case coverage [1] identifies the 
path with the maximal observability (support) along all the possible paths between the given two 
border points.  
The proposed polynomial-time solution combines the existing computational geometry 
techniques and the graphic algorithms, Voronoi diagram, Delaunay triangulation, and graph 
search algorithms, to calculate coverage. The centralized best-case coverage algorithm later is 
extended to a distributed algorithm by Li and et al. [2]. The authors transfer the problem into the 
relative neighborhood graph which can be constructed locally. 
Meguerdichian and et al. [1] also presented heuristics for deploying additional sensor nodes 
to improve coverage, while our proposed solution can find the optimal deployment, with the 
maximum coverage, in polynomial time. The previous research uses Delaunay triangulation as 
the searching space to solve the best-case coverage problem, and the heuristic for deploying one 
additional sensor adds the new sensor to a certain Delaunay edge. However, in this research we 
prove that the search space should include not only the Delaunay edges but also the line segments 
formed from the sensors and the proposed solution can optimally deploy multiple sensors at a 
time.  
2. Preliminaries 
2.1 Sensor Network Model 
In the study of coverage problem, we assume that the sensors are deployed inside a 
two-dimensional field, and all the sensors belong to the same isotropic class. The sensor’s 
sensitivity to a phenomenon decreases as the distance increases, and all sensors have identical 
sensitivity. Besides, we assume that sensor locations are known. The location of sensors could be 
found by Global Positioning System (GPS), or other location discovery techniques, as described 
in [3]. 
2.2 Computational Geometry 
Voronoi diagram and Delaunay triangulation [4-6] are widely used and studied in many 
domains. The related computational geometry theory will be used in the proposed solution and, 
hence will be introduced as follows. 
Let the sensor nodes are represented as a set of n sites, S, in a two-dimensional field. A 
partition of a plane, or a sensor field, can be made by assigning every point in the plane to the 
nearest site. All the points assigned to the same site p form the Voronoi region, V(p). The set of all 
                                                 
This work has been published in ("Node Placement for Optimal Coverage in Sensor Networks," IEEE International Conference on Sensor 
Networks, Ubiquitous, and Trustworthy Computing (SUTC), 5-7, June, 2006.) 
 
 Figure 2. An illustration of dist(x, V). 
 
Figure 3. An illustration of cover(U, V). 
Given a path from a starting point s to an ending point t, P(s, t), the support of P(s, t) is 
defined as cover(P(s,t), S) which specifies the smallest observability of the points on the path, and 
the breach of P(s, t) is defined as dist(P(s,t), S) which specifies the largest observability of the 
points on the path. Let support(P) represent the support value of path P, and breach(P) denote the 
breach value of path P. The support of an edge, uv, is defined as cover(uv, S). According to a 
property of Gabrie graph, if uv is an edge of GG(S), uv must cross only one Voronoi edge. 
Therefore, cover(uv, S) equals to a half of the length of uv. 
For a wireless sensor network, the best and worst-case coverage problems are defined as 
follows: 
Definition: Best Support Path. A path P(s, t) that has the minimum support, cover(P(s, t), S), is 
called a best support path. 
Definition: Maximal Breach Path. A path P(s, t) that has the maximum breach, dist(P(s, t), S), 
is called a maximal breach path. 
The support of the best support path is also called the support of the sensor network, and the 
breach of the maximal breach path is also called the breach of the network associated with the 
end points s and t. Thus, the coverage problem for wireless sensor networks is to identify the best 
support path and the maximal breach path in the networks.  
To improve the coverage of a sensor network, the proposed problem is how to deploy new 
sensor nodes such that the coverage is optimized. Therefore, the following two coverage 
deployment problems are defined.  
Definition: Best Coverage Deployment problem is finding the deployment locations for 
additional k sensor nodes such that the improvement of the support of the sensor network is 
maximized. 
Definition: Worst Coverage Deployment problem is finding the deployment locations for 
additional k sensor nodes such that the improvement of the breach of the sensor network is 
maximized. 
For a source point s and a destination point t, Li and et al. [2] proved that there exists a best 
coverage path in the sensor network that connects s to its closest sensor node us and connects t to 
its closest sensor node ut. Therefore, without loss of generality, we will only consider the best 
coverage path connecting a pair of sensor nodes. 
3. The Best Coverage Deployment Problem 
 
3.1 Proposed Algorithm 
To maximize the improvement of the coverage, the proposed approach attempts to maximize 
the improvement of the support distance of the path. The main idea is to find the most possible 
candidate path in the search space and then to improve the support distance of the path. The 
Dijkstra’s algorithm [10] finding the shortest path is adapted to find the candidate path. Instead of 
the sum of the weight of all the edges in the path, the cost of a path is redefined in the proposed 
solution as the maximal weight of the path, presented in PATH-COST (P, k), where weight[e] 
represents the weight of edge e, n[e] denotes the number of new sensor nodes deploying on edge 
e, and key[e] keeps track of the weight of edge e during the deployment of new sensors. The 
maximal weight of a path decreases as a new node is deployed of the edge of the path with the 
maximal weight. The new sensors are then deployed along this path. 
 
PATH-COST (P, k) 
1.  for each edge e in path P 
2.     do {  key[e]Åweight(e) 
3.           n[e]Å0  } 
4.  for i=1 to k 
5.     do { e Å the edge with maximal key value in path P 
6.           n[e] Å n[e] + 1 
7.           key[e] Å weight[e] / (n[e] + 1)   } 
8.  e Å the edge with maximal key value in path P  
9.  return key[e] 
 
In PATH-COST (P, k), the weight of edge e, weight[e], is initially set to a half of the 
Euclidean distance between the two end points of the edge, u and v, i.e., 1/2|uv|. If we deploy 
additional n[e] nodes uniformly between the end points in the edge e and k nodes totally along 
the path, the return value of PATH-COST(P, k), the maximal weight of edges in the final path, 
equals to 
1][
][max +∈ en
eweight
Pe
.                (1) 
The above value is minimal and can be proved by induction. The best coverage deployment 
algorithm is presented below, where the source and destination points are assumed to be sensor 
nodes. Based on the duality property, the dual problem, the worst coverage deployment, can be 
solved accordingly. 
BEST-COVERAGE-DEPLOY  
1. For every pair of sensors, u and v, construct edge uv, and set the weight to 1/2|uv|. 
2. Apply the adapted shortest path algorithm based on Dijkstra’s algorithm to compute the 
shortest path, Pc, from s to t. 
3. Add k new sensor nodes along the path found in step 2:  For each edge e in Pc, add n[e] 
nodes uniformly between the end points in the edge e. 
3.2 Correctness of the Proposed Algorithm 
This section presents the correctness of the proposed algorithm. The topology of the sensor 
network changes only locally, each time when a new sensor is deployed. If the new sensor 
improves the best support, the new best support path on the Delaunay triangulation must contain 
the Delaunay edges created or affected by the new sensor, or the support will not be improved. 
Several properties of the proposed algorithm will be described before we show its correctness. 
The first lemma has been proven by Li [2] and will be restated here for integrity purpose. 
||)1/(||)1(|| stkstke
Pe
=++<∑
∈
       (3) 
which is impossible. Therefore, the maximal support of the edges in P is at least 1/2|st|/(k+1). 
Thus, support(P) is also at least 1/2|st|/(k+1). The equality holds when the maximal support of 
the edges equals to 1/2|st|/(k+1), which implies that all the support of the edges are 1/2|st|/(k+1), 
i.e., the k new nodes are uniformly deployed on edge st. 
 
Theorem 1. (The correctness of the proposed algorithm) 
Given a sensor network, a source, and a destination sensor node, deploying k new sensors at 
the locations found in the proposed algorithm along the shortest path from the source node to the 
destination node optimally improves the support of the given sensor network.  
Proof. Suppose there are other locations for the new-node deployment and the resulting topology 
can have better support which is smaller than the proposed solution. By Lemma 3, there exists a 
best support path, P, in Gabriel graph of the sensor network and P contains all the new nodes. Let 
u0, u1, …, um be the path excluding the newly-deployed nodes from P, and Pi be the subpath from 
ui to ui+1 in P, and n(i) be the number of new nodes in Pi. By lemma 4, the support of a subpath Pi 
from ui to ui+1 is no less than 1/2|uiui+1|/(n(i)+1). Therefore, the support of path P would be no 
less than that of any subpath in P, i.e.,  
)1)(/(||
2
1max )support(Pmax 11-m  to0i1  +≥ +=−= inuu iiimtooi .  (4) 
 
Which is not smaller than the value found by PATH-COST(P, k). By this contradiction, the 
theorem follows. 
3.3 The Time Complexity 
Given a sensor network with n sensors, the number of edges created in step 1 of the proposed 
algorithm equals to n2; hence, the first step takes O(n2) to assign the initial weight of the edges. 
Step 2 finding a candidate path applies the adapted shortest path algorithm, and it needs O(nlogn 
+ n2) = O(n2). Step 3 requires O(k) time to add the new nodes. Therefore, the proposed algorithm 
yields to time complexity of O(n2). 
4. Experimental Results 
The proposed coverage deployment algorithm is evaluated and compared with the heuristic 
deployment algorithm proposing by Meguerdichian and et al. [1]. Two experimental 
environments are considered: a sensor network with 25 and 80 nodes initially. 
Figure 7 shows the support distance improvement from adding 1 node to adding 4 nodes in a 
sensor network with 25 nodes initially. We could observe that our method outperforms the other 
method. Figure 8 shows the results with a sensor network with initially 80 nodes. The proposed 
algorithm improves significantly and the discrepancy of the improvement with the previous work 
increases as more new nodes are deployed. 
