and nondeterministic properties. We studied how to 
implement an execution environment in the Android 
platform. In order to effectively the Android-based 
operating system, we intended to import the 
technologies of Markov decision processes and 
probabilistic computation tree logic to verify the 
system behavior.  
 
英文關鍵詞： Markov Chains, Markov decision processes, 
probabilistic model checking, probabilistic 
computation tree logic, and formal verification. 
 
 2 
中文摘要 
人們生活從過去由農村型態轉變成用智慧生活科技所打造的智慧化城市，
因此如何發展安全而有效率又穩定的資通訊相關系統是非常重要的。雖然目前工
業界都是採用「後系統驗證法」來檢查系統，如軟體驗證常用的同儕評審和軟體
測試，但這些方法大多數用於系統設計完成後，因此有較高的成本，而且不易找
出系統內的全部錯誤。有鑑於此，本研究計畫的主要目的是以一種正規化驗證方
法稱或然率模型檢查法來協助設計高效率、高穩定度的資通訊系統。 
本計畫的主要目的以 Android 為基礎的高階嵌入式系統建構或然性模型檢
查法行動裝置測試環境以及整合 CAN Bus、 IEEE 802.11p 等通訊介面。我們將
利用此模型來分析以 Android 為基礎的資通訊產品在或然性選擇及非決定性等
特質的行為模式。為了能有效地驗證 Android 作業系統，我們導入馬可夫決策過
程的技術，並以或然性計算樹狀邏輯(PCTL)來描述系統特性，進而以 PCTL 模型
檢查來驗證系統的行為。 
關鍵詞：馬可夫鏈、馬可夫決策過程、或然性模型檢查、或然性計算樹狀邏輯、
正規化驗證。 
Abstract 
People living from in the past in the rural areas into intelligent city developed by 
intelligent life technologies, how to develop safe, efficient, and stable information 
communication systems is very important. Although the industry used posteriori 
system verification methods to check systems, such as software validation and peer 
review commonly used in software testing, but most of these methods used in after 
completing system design have a higher cost and not easy to find all the errors. In 
view of this, the main purpose of this project is to use a formal verification method 
called probabilistic model checking to help that we design high efficient and high 
reliability information communication systems. 
The purpose of this project is to construct an environment of probabilistic model 
checking based on an Android-based embedded system with integrating several 
communication interfaces, including CAN Bus, IEEE 802.11p. We used this model 
to analyze the behaviors of Android-based information and communication products 
in the probabilistic selection and nondeterministic properties. We studied how to 
implement an execution environment in the Android platform. In order to effectively 
the Android-based operating system, we intended to import the technologies of 
Markov decision processes and probabilistic computation tree logic to verify the 
system behavior.  
Keywords: Markov Chains, Markov decision processes, probabilistic model 
checking, probabilistic computation tree logic, and formal verification. 
 4 
建模作業，以便獲得產品特性規格及系統模型，然後再利用這兩項資訊進
行模型檢查，驗證系統模型是否滿足系統特性，若無法滿足模型檢查法可
以協助我們找到反例，最後再利用模擬方式找到錯誤的所在地。 
 
圖 2 模型檢查法驗證的示意圖 
本計畫重點放在建構模型檢查法行動裝置測試環境以及導入「馬可夫決
策過程（Markov Decision Processes）」模型，首先我們採用高階嵌入式系統
搭配開放式行動平台Android作業系統，以及整合常用的通訊介面，如RS232、
CAN Bus、Bluetooth、ZigBee、IEEE 802.11p、GPRS、GPS 等。由於資通訊
產品大多數 具備 或然性選擇 （ Probabilistic Choices ）及非決定性
（Nondeterminism）特質非常適合使用馬可夫決策過程模型來進行行為分析。
我們將利用此模型來分析以 Android 為基礎的資通訊產品在通訊過程中的行
為模式。並以或然性計算樹狀邏輯（Probabilistic Computation Tree Logic，簡
稱 PCTL）來描述系統特性，進而以 PCTL 模型檢查來驗證系統的行為。 
二、系統架構 
一部汽車有許多資通訊設備，這些設備大多數採用嵌入式系統來設計，
例如：車載閘道器及電子控制單元等都是屬於嵌入式系統。車載閘道器是由
硬體和軟體組成，硬體是由一些實體設備所組成，如：控制滙流排（CAN）、
串列埠（COM）等。在驅動程式方面，可以分成三類：字元型驅動（Char Driver）、
區塊型驅動（Block Driver）、網路型驅動（Network Driver）。車身電子網路
CAN 是和常用的串列通訊（COM）都是屬於字元型驅動程式，如下圖所示。
一般磁碟設備都是採用區塊型驅動；網路設備則使用網路型驅動。 
如圖 4 所示，說明車載資通訊系統中最重要的兩項設備車載閘道器和電
子控制單元，當這兩項設備經由控制器區域滙流排連接時，他們的軟硬體的
堆疊模型包括那些元件。一般來說，電子控制單元都是以系統晶片的設計方
式，將 CAN 晶片和微控器製在同一顆晶片上，若 CAN 晶片和微控器之間連
系統 需求 
特性規格 系統模型 
滿足 違反+反例 定位錯誤 
正規化 建模 
模型檢查 
模擬 
 6 
及其形為預先定義好，當要開發應用程式時不但可以更快速地產生所需要
的程式碼，也因預先設計好的藍圖可以讓應用程式執行起來更加順暢而穩
定。 
 
圖 5 以 Android 為基礎的車載閘道器軟體堆疊 
Linux 核心提供許多車載相關的驅動程式，如 CAN、LIN、MOST、
DSRC、WIFI、GPRS、及 Binder 等。其中 CAN 驅動提供 CAN 原生服務函
式庫使用；而 Binder 則是提供 IPC 的分享記憶體的驅動能力。CAN、LIN、
及 MOST 是屬於車身電子網路負責收集車身的資訊或提供多媒體娛樂服務；
而 DSRC、WIFI、及 GPRS 則是建立車子和外在環境的溝通管道，它們能
使車上服務結合環境，包括連結網際網路上的各項服務。 
三、效能評估 
將展現如何評估簡化虛擬儀器軟件框架的性能。其中軟體的框架有 4
層，包括：車載應用層，車載應用框架層，車載函式庫層和 Linux 核心層。
除了 Linux核心層在特權模式運作外，其它三層執行於使用者模式下執行。
自從 1950 年開始，馬可夫鏈模式已經被廣泛用來評估系統的效能。馬可夫
鏈模式是一種 “狀態-空間”分析模型，它是由一組狀態和一組轉移矩陣組合
而成的各種狀態。我們使用此模型來評估嵌入式系統的效能。大部分的通
訊系統使用馬可夫鏈來評估效能和可靠度，由其是使用連續時間馬夫鏈
(CTMCs)。 根據 Kwiatkowska 等學者所提出的 CTMC 定義，一個具有標記
的 CTMC 是一個元素的組合，  (       )由下列 4 個元素構成: 
(1) S 是一個狀態的有限集合。 
(2)  ∈   𝑠是屬於 S 的起始狀態。 
(3)  :  ×  → ℝ≥0 是一個轉移矩陣。 
  
  
  
  CAN LIN MOST DSRC WiFi GPRS Binder 其他驅
動 
Linux 核心 
虛擬儀錶 定位導航 多媒體 防盜保全 車身診斷 車載應用 其他應用 
車載應用程式 
 
核心函式 
Dalvik虛擬機 
Android  
Runtime 
活動管
理 
視窗管
理 
位置服
務 
地圖服
務 
CAN服務 
多媒體
服務 
其他服
務 
車載應用程式框架 
介面管理 
多媒體框
架 
WebKit 
CAN原
生服務 
Libc 
其他函
式庫 
車載系統函式庫 
 8 
針對我們設計的模型時，每一個基礎的任務定義於每一組狀態中。例如：
驗證屬性如”系統最終達到閒置狀態的機率等於 1”。首先，我們宣告常數 T
為系統執行時間，第二步驟設定 P 為機率事件發生的次數。如圖 8，屬性 P
命令，描述為 P>=1[G F ("Idle")]，如上述的宣告，定義>=1是界限，G F (“Idle”)
是路徑屬性。G 為”always”的意思，於語法上稱為”globally”。F 是”eventually”
的意思，於語法上稱為”future”。因此屬性語法 P>=1[G F ("Idle")]表示系統
總是或最終達到閒置的狀態其機率值 P 大於等於 1。總之我們使用屬性命
令的方式來做為檢測我們的模型是否在活動情況下或處於閒置狀態。 
表 1 虛擬儀表的應用程式馬可夫鏈狀態說明表 
狀態 說明 
0 閒置狀態 
1 Andriod 活動元件使用 IPC 呼叫服務 
2 Android 服務元件使用 JNI 呼叫原生服務 
3 原生服務呼叫 CAN 驅動程式中的函式 
4 驅動呼叫 CAN 函式 
5 CAN 要求函式 
6 CAN 回覆函式 
7 驅動將結果傳給 JNI 函式 
8 JNI 函式將結果回傳給 CAN 服務元件 
9 CAN 服務元件回傳結果給活動元件 
10 活動元件顯示結果並返回閒置模式 
有時候我們更在乎有關於長時間執行或者稱之為穩定狀態的行為。在
PRISM 中，另一種 S 的語法是被使用於觀測系統最後於穩定狀態的行為。
屬性語法 S=? [ ("Idle") ]就是系統穩定狀態行為下處於閒置的機率為多少?
最終，我們使用 R 的屬性語法來評估我們的系統傳送訊息的次數。 
 
圖 7 使用 PRISM 簡易塑模虛擬儀錶應用程式的運作 
ctmc 
const int poll; 
module VM 
 s:[0..10] init 0; 
 [] s=0->(1/poll):(s'=1); 
 [] s=1->0.01:(s'=2); 
 [] s=2->0.01:(s'=3); 
 [] s=3->0.01:(s'=4); 
 [] s=4->0.1:(s'=5); 
 [request] s=5->(1/260):(s'=6); 
 [] s=6->(1/260):(s'=7); 
 [] s=7->0.01:(s'=8); 
 [] s=8->0.01:(s'=9); 
 [] s=9->0.01:(s'=10); 
 [] s=10->0.1:(s'=0); 
endmodule 
 
label "Idle" = s=0; 
 
rewards "msgcnt" 
 [request]true:1; 
endrewards 
 10 
於不同系統狀態我們可以給予不同時間獎賞值，這樣就能輕易地經由
PRISM 系統來協助求得。 
5. Hybrid 引擎不能用於獎賞值運算 
PRISM 系統提供三種計算引擎，分別是 Hybrid、Sparse、MTBDD，在
PRISM 中使用馬可夫決策過程模型計算獎賞值時只能選用 Sparse 或
MTBDD，不能選用 Hybrid，系統預設值是 Hybrid。 
四、結論 
此計畫中，我們以 Android 為基礎來探討的行動載具上成功地實作虛擬儀
器的框架及其性能評估，對於 Android 行動載具上有關於虛擬儀器的框架，我
們採用馬爾可夫鏈來進行分析虛擬儀器軟件由四個層次組成的。我們成功地
嘗試使用 PRISM 工具來建立馬爾可夫鏈並評估虛擬儀器軟體的效能。經由軟
體觀測閒置狀態的情況，包括：閒置狀態下的機率值和預期可以發送訊息數
量。我們也研究使用馬可夫決策模型來進行對 IEEE802.11 模型的研究，並提
出幾項看法，包括：碰撞形成、隨機延遲時間、流逝時間、馬可夫獎賞模式
以及 Hybrid 引擎不能用於獎賞值運算。本計畫成果也包括在異質感測與驅動
器網路中協調式互通與相依性聚合架構之研究[7]。由於即時性的行為分析[5-6]
在軟體發展上是非常重要性，未來我們將持續進行研究，期能有助於我國產
對在嵌入式系統上的發展。 
參考文獻 
[1] 經濟部，「2010 年產業技術白皮書」，http://doit.moea.gov.tw/itech/。 
[2] J. Jezequel and B. Meyer, “Design by Contract: The Lessons of Ariane, 
Computer,” January 1997. 
[3] C. Baier and J. P. Katoen, “Principles of Model Checking,” The MIT Press, pp. 
1-16, 2008. 
[4] M. Kwiatkowska, G. Norman and J. Sprostion, “Probabilistic Model Checking 
of the IEEE 802.11 Wireless Local Area Network Protocol,” Proc. 
PAPM/PROBMIV’02, Vol. 2399 of Lecture Notes in Computer Science, pp. 
169-187, July 2002. 
[5] G. Norman, D. Parker and J. Sproston, “Model Checking for Probabilistic 
Timed automata,” to appear in Formal Methods in system Design, Springer, 
2012. 
[6] M. Kwiatkowska, G. Norman and D. Parker, “PRISM 4.0: Verfication of 
Probabilistic Real-time Systems,” in Proc. 23rd International Conference on 
Computer Aided Verification (CAV’11), vol. 6806 of LNCS, pp. 585-591, 
Springer, July 2011. 
[7] 邱仁成, “在異質感測與驅動器網路中協調式互通與相依性聚合架構之研
究”, 逢甲大學博士論文, February, 2012. 
一、參加會議經過 
去年12月16-18日參加由中國深圳哈爾濱工業大學舉行的第二屆創新仿生計算國
際研討會(Second International Conference on Innovations in Bio-inspired 
Computing and Applications)，此會議涵蓋14個主題，包括：人工免疫系統、人工
智慧、人工神經網路、細胞自動機、認知模型、模糊邏輯等議題。 
本人在深圳舉行的創新仿生計算國際研討會上，與本校鄧所長恢綱、鍾教授秋嬌、
林教授志鴻等同仁共發表四篇文章，分別是「Benchmark Dalvik and Native for Android 
System」、「An Implemntation for Connecting Android Powered Device to External 
World」、「Bluetooth-based Android Interactive Applications for Smart Living」、
「Design and Implement Augmented Reality for Supporting Driving Visual Guidance」
分別由本人、鄧教授恢綱、鍾教授秋嬌、林教授志鴻進行口頭報告。「Benchmark Dalvik 
and Native for Android System」文章，全文如附件一。 
二、與會心得 
「Benchmark Dalvik and Native for Android System」是今年國科會計畫執行
的初步研究成果，谷歌的Android原生開發套件（NDK）是一個工具集，可以用來發展
原生函式庫，使用原生程式碼來提升Android應用程式的效能。NDK使開發人員能夠輕
鬆地編譯C / C++程式供Android開發平台使用。若開發人員不關心如何有效地使用原
生程式碼和Dalvik的Java程式碼，將導致系統整體效能低落。雖然有一些研究討論關
於Java和C / C++評估效能的標竿程式但是他們不考慮Dalvik和原生程式碼的Android
編譯結果或評估在真正的Android設備的效能。因此在這項工作中，我們在真正的
Android設備上使用了一個更完整的方法為基準的Dalvik的Java原生碼和原生程式碼。
我們進行了12次測試程序的性能進行分析，發現原生程式碼的速度比約34.2％的
Dalvik的Java程式碼。 
此次參加國際會議，除了向與會者說明我們所實作的技術及新的方法，也可以聽
取與會者的意見，進而改善我們的系統及理論。 
Benchmark Dalvik and Native Code for Android System 
 
 
Cheng-Min Lin 
Department of Computer and Communication 
Engineering, Nan Kai University of Technology, 
Caotun Township, Nantou County, Taiwan (R.O.C.) 
e-mail: lcm@nkut.edu.tw 
Jyh-Horng Lin 
Department of Electrical Engineering,  
Nan Kai University of Technology, 
Caotun Township, Nantou County, Taiwan (R.O.C.) 
e-mail:jhlin@nkut.edu.tw
Chyi-Ren Dow 
Department of Information Engineering and Computer 
Science, Feng-Chia University 
TaiChung City, Taiwan (R.O.C.) 
e-mail: crdow@fcu.edu.tw 
Chang-Ming Wen 
Graduate Institute of Information Engineering and 
Computer Science, Feng-Chia University, 
TaiChung City, Taiwan (R.O.C.) 
e-mail: m9740977@fcu.edu.tw
 
 
Abstract—Google's Android Native Development Kit (NDK) is 
a toolset that lets you embed components to use of native code 
in your Android applications. It makes possible for developers 
to easily compile in C/C++ for the Android development 
platform. Generally, developer does not concern how effective 
between native code and Dalvik Java code that will causes poor 
performance of Android. There are some researches discussed 
about benchmark Java and C/C++. But they do not consider 
the issues of Dalvik and native code for Android programming 
or evaluate them in real Android device. In this work, we use a 
more complete approach to benchmark Dalvik java code and 
Native code on real Android device. We conducted 12 test 
programs to analyze the performance and found that native 
code faster than Dalvik Java code for about 34.2%. 
Keywords-Component; Android; NDK; Benchmark; Native 
code ; Dalvik Java code; 
 INTRODUCTION 
Google Android is an operating system which includes 
middleware, key applications, and software stack for mobile 
devices [6]. The first Google’s Android phone T-Mobile G1 
was announced at Guastavino’s in New York City unveiled 
September 23 2008. Over the past years, the market of 
Google Android continues growing rapidly. Today, many 
devices install the Android system as the operating system. 
To developing Android program, the Google Inc 
provides two kits for the Android development platform: 
The Android Software Development Kit (SDK) provides 
necessary tools and libraries for programmers to 
begin developing applications that run on 
Android-powered devices [3]. The first Android 
SDK (m3-rc20a) was released on 12 December 2007. 
Now, the latest version is SDK Tools, Revision 12 
was released on July 2011. This version supports 
Android 2.3.4 and 3.2 Platform developments. 
The Android Native Development Kit (NDK) is a toolset 
that lets programmers to embed components that 
make use of native code in Android applications [7]. 
The first Android NDK (Android 1.5 NDK, Release 
1) was released on June 2009. Now, the latest 
version of Android NDK, Revision 6 was released 
on July 2011. This version supports ARM and X86 
platforms. 
Generally, developer does not concern how effective 
between native code and Dalvik Java code that will causes 
poor performance of Android. 
In additional, there are some researches [9-11] discussed 
about benchmark Java and C/C++. But they do not consider 
the issues of Dalvik and native code for Android 
programming or evaluate them in real Android device [1]. In 
this work, we use a more complete approach to benchmark 
Dalvik java code and Native code on real Android device. 
We refer to the benchmark programs of predecessors [12] 
and port them to the Android platform.  
The reset of this paper is organized as follows. In Section 
2, we discuss related works. While in Section 3, we describe 
the contents of the comparison benchmarks. Section 4 
demonstrates the experimental results. Lastly, we conclude 
this paper in Section 5. 
RELATED WORKS 
A few related studies indicating performance analysis 
have been made. Keith’s web [12] evaluates 14 kinds of 
algorithms in Java and C + + performance comparison. The 
work shows that Java has better performance than C++. But 
the performance analysis for native code and Dalvik Java 
code in Android platform was not evaluated. However, we 
refer the author’s programs and port them to the Android 
platform for comparing native code and Dalvik Java code. 
L. Batyuk et al. [1] benchmarks Native code on Android 
emulator and Linux x86 PC. The work shows that native 
applications can be up to 30 times as fast as an identical 
algorithm running in Dalvik VM and java applications can 
speed-up to 10 times if utilizing JNI. But there are too few 
experimental methods evaluated and experiments were down 
附件一、會議論文全文 
HTC DESIRE A8181 SPECIFICATION 
CPU Qualcomm 8250, 1GHz 
RAM 576MB 
ROM 512MB 
Android Version 2.2 Froyo 
DEVELOPMENT ENVIRONMENT 
Operating System Microsoft Windown XP SP3 
IDE Eclipse 3.5.2 
SUN Java Version 1.6.0_26 
Android SDK Revision 12 . 
Android NDK Revision 6. 
GCC/G++ Version Cygwin / 4.3.4 
Android Emulator Android 2.1-update1 / API 7 
 
Typically, Default heap size of Android phone is 24MB. 
To avoid out memory error caused by the program, we adjust 
the heap size to 64MB. 
Figure 2 is one of the program screenshot that it shows 
the performance of the Nestedloop test program. 
 
Mestedloop program screenshot. 
Results 
Figure 4 shows the experimental results. The x-axis of 
the graph represents input parameter. The y-axis of the graph 
represents execution time in milliseconds. The blue line of 
the graph represents Dalvik Java code and red line of the 
graph represents native code. 
According to the results, most experiment using the 
native code is faster than using the same algorithm running 
on Dalvik Java code. Throughout of the recursive experiment 
Ackermann in Dalvik Java code performance is very bad. 
When we set the input parameter to 6, it produces a 
“StackOverflowError” error and then the program crash. 
Another result from the entire experiment, we found that 
Hash, Heapsort and Random testing of Dalvik Java code was 
faster than native code. In the native code, Nested loops has 
best performance. 
In the separate analysis, we set input parameter to let the 
entire program's execution time to 3 seconds. Figure 3 shows 
the results of all evaluation results.  
 
The program's execution time is about 3 seconds. 
Table 4 shows the detail experimental results of Figure 3. 
We found that native code faster than Dalvik Java code 
about 34.20%.  
DALVIK JAVA CODE WITH NATIVE CODE COMPARED 
Test program Input Dalvik Native Compare 
Ackermann 14 
Program 
Crash 
202065 - - 
Fibonacci 35 540439 72648 86.56% 
Hash 290000 11873 30679 -158.39% 
Hash2 10000 234268 147226 37.15% 
Heapsort 1000000 4378 5543 -26.61% 
Matrix 100000 115306 24703 78.58% 
Methcall  1E+09 411370 30276 92.64% 
Objinst 1E+08 487266 172997 64.50% 
Nestedloop 35 35406 7 99.98% 
Random 1E+07 5126 7521 -46.72% 
Sieve 100000 61035 22244 63.56% 
Strcat 1400000 1657 250 84.91% 
Average 34.20% 
a. Dalvik and Native execution time in milliseconds  
CONCLUSIONS AND FUTUREWORK 
In this work, we benchmark Dalvik java code and native 
code with Android phone HTC Desire. We rewrite 12 
programs and port them to the Android platform for 
comparing native code and Dalvik Java code. 
We evaluate different algorithms in Dalvik Java code and 
native code. According to the results, we found that there are 
three tests that the Dalvik Java code faster than native code. 
Also, we found that a one item that Dalvik Java code 
performance is very bad. In addition, the overall performance 
assessment of native code is faster than Dalvik Java code 
about 34.2%. This will help software designers to create 
efficient Android applications. 
In our future work, we will continue analysis of dual-core 
mobile CPU performance and battery power consumption 
comparison in Dalvik Java code and native code that help 
software designers to create efficient Android applications. 
ACKNOWLEDGMENT 
0
500
1000
1500
2000
2500
3000
3500
Ti
m
e
(m
s)
Dalvik
Native
  
  
  
  
  
  
Experimental results 
 
0
50000
100000
150000
200000
250000
1 2 3 4 5 6 7 8 9 10 11 12 13 14
Ti
m
e
(m
s)
Ackermann
Dalvik
Native
Input
0
100000
200000
300000
400000
500000
600000
1 4 7 10 13 16 19 22 25 28 31 34 37 40 43 46
T
im
e
(m
s)
Fibonacci
Dalvik
Native
Input
0
5000
10000
15000
20000
25000
30000
35000
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29
Ti
m
e
(m
s)
Hash
Dalvik
Native
Input(10^4)
0
50000
100000
150000
200000
250000
1 2 3 4 5 6 7 8 9 10
Ti
m
e
(m
s)
Hash2
Dalvik
Native
Input(10^3)
0
1000
2000
3000
4000
5000
6000
1 2 3 4 5 6 7 8 9 10
Ti
m
e
(m
s)
Heapsort
Dalvik
Native
Input (10^5)
0
20000
40000
60000
80000
100000
120000
140000
1 2 3 4 5 6 7 8 9 10
Ti
m
e
(m
s)
Matrix
Dalvik
Native
Input(10^4)
0
5000
10000
15000
20000
25000
30000
35000
40000
45000
1 2 3 4 5 6 7 8 9 10
Ti
m
e
(m
s)
Methcall
Dalvik
Native
Input(10^7)
0
10000
20000
30000
40000
50000
60000
1 2 3 4 5 6 7 8 9 10
Ti
m
e
(m
s)
Objinst
Dalvik
Native
Input(10^6)
0
5000
10000
15000
20000
25000
30000
35000
40000
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35
Ti
m
e
(m
s)
Nestedloop
Dalvik
Native
Input
0
1000
2000
3000
4000
5000
6000
7000
8000
1 2 3 4 5 6 7 8 9 10
Ti
m
e
(m
s)
Random
Dalvik
Native
Input(10^6)
0
1000
2000
3000
4000
5000
6000
7000
1 2 3 4 5 6 7 8 9 10
Ti
m
e
(m
s)
Sieve
Dalvik
Native
Input(10^3)
0
200
400
600
800
1000
1200
1400
1600
1800
1 2 3 4 5 6 7 8 9 10 11 12 13 14
Ti
m
e
(m
s)
Strcat
Dalvik
Native
Input(10^5)
100年度專題研究計畫研究成果彙整表 
計畫主持人：林正敏 計畫編號：100-2221-E-252-011- 
計畫名稱：以馬可夫決策過程為基礎的高效能即時嵌入式系統驗證環境之研究與實作 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 1 1 100%  
研討會論文 1 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 4 2 100%  
博士生 2 1 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 1 40%  
研究報告/技術報告 0 0 100%  
研討會論文 5 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 2 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
