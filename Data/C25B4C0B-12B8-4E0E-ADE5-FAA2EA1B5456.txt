  i
目錄 
一、 摘要 ............................................................................................... 1 
1.  中文摘要 ....................................................................................... 1 
2.  英文摘要 ....................................................................................... 3 
二、  前言與研究目的 ........................................................................... 5 
三、  實驗環境 ....................................................................................... 8 
1.  Crossbow ....................................................................................... 8 
2.  系統架構 ....................................................................................... 8 
3.  硬體說明 ..................................................................................... 10 
4.  作業系統(TinyOS) ..................................................................... 10 
5.  通訊協定 ..................................................................................... 11 
6.  提供服務 ..................................................................................... 12 
7.  開發環境建置說明 ..................................................................... 13 
8.  Demo 範例程式與說明封包格式 .............................................. 23 
9.  NesC Programming Language .................................................... 25 
  iii
圖目錄 
  
圖表 1 ...................................................................................... 12 
圖表 2 ...................................................................................... 12 
圖表 3 ...................................................................................... 13 
圖表 4 ...................................................................................... 16 
圖表 5 ...................................................................................... 16 
圖表 6 ...................................................................................... 17 
圖表 7 ...................................................................................... 18 
圖表 8 ...................................................................................... 27 
圖表 9 ...................................................................................... 28 
圖表 10 .................................................................................... 30 
圖表 11 ..................................................................................... 31 
圖表 12 .................................................................................... 33 
圖表 13 .................................................................................... 34 
  v
圖表 29 .................................................................................... 55 
圖表 30 .................................................................................... 55 
圖表 31 .................................................................................... 56 
圖表 32 .................................................................................... 57 
圖表 33 .................................................................................... 60 
圖表 34 .................................................................................... 60 
圖表 35 .................................................................................... 60 
圖表 36 .................................................................................... 60 
圖表 37 .................................................................................... 61 
圖表 38 .................................................................................... 61 
圖表 39 .................................................................................... 61 
圖表 40 .................................................................................... 62 
 
  1
一、 摘要 
1. 中文摘要 
隨著科技的突飛猛進，現今在感應器、網路和計算領域的發展使
我們可部署大量既便宜且小的感應器，來達成許多複雜應用所需。尤
其以 Distributed Sensor Network (DSNs)技術不斷的被改進再改進、價
錢不斷的降低而使得在軍事、消防、醫療、生態研究等項目上被廣泛
的利用。 
然而，傳統的架構中，所有的 DSNs 感應器資料是集中送到一個
資訊中心。但是在軍事部署的 DSNs 中，傳送非必要的資料會增加被
偵測到的風險，而且也會消耗電池的動力與頻寬。供電問題，DSNs
配置的靈活度、DSNs Nodes 間資訊傳遞的安全性、DSNs System 的
存活性(Survivability)…等問題也待解決。 
計劃將行動代理人的技術應用在 Sensor Network 環境中，可逐步
改善 DSNs 的問題，例如：提高 DSNs System 的存活率，以及增加
DSNs Nodes 間資訊傳遞的安全性…等。行動代理人(Mobile Agent)會
選擇性的拜訪感應器，並且逐漸的整理合適的資料。它可以自來源端
派遣到遠端執行。執行相關動作收集所需的資訊後，行動代理人會帶
著結果離開。因此將可以透過行動代理人解決 DSNs 的安全性問題並
提升 Sensor Nodes 的存活率。 
本期的研究的首先是研究學習 Distributed Sensor Network，了解
DSN 的運作原理與方法，且分析已開發之 DSN 系統並安裝、架設該
  3
2. 英文摘要 
With the progress of science and technology, the progress in sensor, 
network and computer enables us to dispose a large amount of cheap and 
small sensor node to approach a lot of complicatedness applications.  
Especially improvement of Distributed Sensor Network (DSNs) and price 
reducing make applications in military, fire control, medical treatment, 
ecological research, etc. useful. 
Unfortunately, the traditional sensor network, all sensor nodes’ data must 
be sent to an information center.  This way will increase the detected 
risk of data, and will consume the battery and bandwidth.  In addition, 
power supply, flexibility dispose, security, and survivability of sensor 
nodes are remained to be solved, too. 
The project is to apply the mobile agent technology on Sensor Network 
environment.  It will solve some problems of DSNs, for example, 
improving the survivability of DSNs system, enhancing the security of 
communication between DSNs nodes, etc..  The mobile agent visits 
sensor node selectively and arranges the information.  It is issued form 
source and executed remotely.  After executing the collecting useful 
information, the mobile agent leaves with results to the next node or back 
to the center.  Thus the security problem of DSNs can be solved by 
using mobile agent and improves the survivability concurrently. 
The main object in this stage is focus on Distributed Sensor Network. 
We will learn the principle and functions of DSN and setup an 
experiment environment. Furthermore, our team discusses the security 
technologies on DSN. The result of this research brings the next research 
  5
二、 前言與研究目的 
自 1990 年代起，Multiple Sensor Systems 成為許多研究的目標，
尤其是在 Distributed Sensor Network (DSNs)。這當中技術不斷的被改
進再改進、價錢不斷的降低而使得在軍事、消防、醫療、生態研究等
項目上被廣泛的利用。由於 DSNs 能夠提供的應用層面廣而彌補以往
傳統的網路不足的地方，因此 DSNs 能夠迅速而廣泛的應用。 
DSNs 是被許多以電池為動力的微處理器所組成，而此微處理器
上面附著了許多極小的感應器。因而形成了所謂的 Wireless Ad Hoc 
Network。由於感應器的體型很小且數量很多，因此相較於以往的系
統上提供了較好的解決方法，可以解決問題的規模也較為廣大。例如:
我們居住地的環境監控、局部性的氣候研究、醫療護理和架構上的監
控、動植物生態研究等。 
隨著科技的突飛猛進，現今在感應器、網路和計算領域的發展使
得我們可以部署大量既便宜且小的感應器，來達成許多複雜應用所需
的品質需求。在一個部署遠端操作的 DSNs 子課題中，透過低頻寬
的無線網路往往是感應器間通訊的唯一手段。這些感應器通常在處理
能力、電池能力和通訊頻寬上具有限制。在這些感應器間作通訊會消
耗有限的電力，為了保證他們所能負擔的操作，在電力上的消耗必須
保持最小。顯然的，DSNs 必定成為將來的主流，而他們勢必朝向更
廉價、更容易操控且更靈活的方向邁進。 
然而，現在的 DSNs 依然存在許多問題仍需解決，諸如：供電問
題，DSNs 配置的靈活度、DSNs Nodes 間資訊傳遞的安全性、DSNs 
  7
System 的存活性(Survivability)…等。將行動代理人的技術應用在
Sensor Network 環境中，將可逐步改善 DSNs 的問題，例如：提高 DSNs 
System 的存活率，以及增加 DSNs Nodes 間資訊傳遞的安全性…。等。 
本計劃將研究透過定期發送行動代理人對 Sensor Nodes 進行監
控，一但有任何 Sensor Nodes 因為任何原因不能運作順暢，例如：電
池電力不足、網路中斷…等，DSNs Center 就可以及時知道問題所在，
並且準確地針對有問題的 Sensor Node 或是其相關路徑上的障礙排
除，這樣就可以提高 DSNs Nodes 的存活率。 
本計劃亦希望研究透過行動代理人本身可攜帶資料以及可運算
的特性，將密碼學與資訊安全的技術運用於行動代理人。設計使所有
DSNs Nodes 間的資訊傳遞都由行動代理人負責，以增加 DSNs Nodes
間資訊傳遞的安全性。 
  9
Mote 
MICAz/ 
MPR2400 
主要負責資料無線的接收
和發送(符合 Zigbee 技術
無線傳輸模組) 
當 serial port plug 不同的
device 則會有不同的角色
z plug sensor board： 
該角色為 sensor node，
sensor board 感應，則感
應的資訊可以藉由
mote 的無線傳輸 
z plug MIB510： 
該角色可為資料收集
者，把收集到的資訊藉
由 RS-232 serial port 傳
送到電腦。 
 
Gate- 
way 
•MIB510 Serial 
Interface 
Boards 
–Using RS-232 
serial port 
 
z 使用 RS-232 serial port
與電腦連接 
z Sensor programming 
board 
(當要 load program to 
mote，需 MIB510 當
interface) 
z 可當資料收集者的角
色 
 
  11
TinyOS 可作為超過 12 個 platform 跟許多的 sensor board 的 port。
許多人使用 TinyOS 去發展和測試各種的 algorithms 與 protocols。超
過 500 個研究團體跟公司使用 TinyOS on the Berkeley/Crossbow 
Motes。在 open-source 的環境下許多的團體積極的捐獻程式和建立標
準規格、跨平台的網路服務，根據他們直接的經驗或是分析。 
5. 通訊協定 
IEEE 802.15.4/ZigBee 
通訊協定以 IEEE 802.15.4 低速率無線個人區域網路(Low-Rate 
Wireless Personal Area Network, LR-WPAN)結合 ZigBee 無線標準為基
礎的發展。ZigBee 主要是由 IEEE 802.15.4 小組與ZigBee Alliance 組
織，分別制訂硬體與軟體標準。它是一種低傳輸速率 (250kbps)、短
距離 (一般約為 50-100 m，依耗電量之不同，可提昇至 300m)、低消
耗功率、架構簡單的技術。目前制定的頻段為全球的 2.4GHz ISM 頻
段、美國的 915MHz 頻段，以及歐洲的 868MHz 頻段。ZigBee 支援
主從式或點對點方式運作，同時最多可有 255 個裝置鏈結，具有高
擴充性。逐漸成為產業共通的短距離無線通訊技術之一。 
IEEE802.15.4 做為實體層與媒體存取控制層的傳輸標準，ZigBee
則專注於提供上層所需之網路層、應用層、以及加密機制等功能。 
  13
z Sounder ( Sounder detections ) 
z Photocell ( Light detections ) 
z Thermistor ( Temperature detections ) 
z Accelerometer ( Movement, seismic detections ) 
z Magnetometer 
7. 開發環境建置說明 
安裝 Tiny OS 
執行平台：Windows XP 
執行步驟: 
1. 到 光 碟 片 TinyOS Install 目 錄 下 ， 執 行
tinyos-1.1.0-1is.exe，預設安裝路徑為 c:\tinyos 
 
圖表 3 
2. 此時 TinyOS 已安裝成功，但還需 update 一些資料。 
  15
¾ rpm –qa 
B. check  programming 環境 
¾ 開啟cygwin window 
¾ cd /opt/tinyos-1.x/tools/scripts 
¾ toscheck  (執行完toscheck，最後一行應該會出
現”toscheck completed without error”) 
7. 更新到 tinyos 1.1.15 版: 
A. 將 tinyos-1.1.15Dec2005cvs-1.cygwin.noarch.rpm 複製
到 C:\tinyos\cygwin\tmp 
(可由 http://webs.cs.berkeley.edu/tos/dist-1.1.0/tinyos/ 
windows/tinyos-1.1.15Dec2005cvs-1.cygwin.noarch.rp
m 下載) 
B. 將 C:\tinyos\cygwin\opt 裡的 tinyos-1.x 資料夾更改名
字(tinyos-1.x_o) 
C. 開啟 cygwin window 執行以下命令 
¾ cd /tmp 
¾ rpm --nodeps --force --ignoreos –Uvh tinyos-1.1.15 
Dec2005cvs-1.cygwin.noarch.rpm 
D. 灌好後,將 C:\tinyos\cygwin\opt 下的 tinyos-1.x(新灌好
的)更名為 tinyos-1.1.15 
E. 將 tinyos-1.x_o 更改回 tinyos-1.x 
 
Tiny OS 檔案架構 
當執行完成 2.6.1 的「安裝 Tiny OS」後，在執行的平台上會有
以下的檔案架構 
  17
 
圖表 6 
安裝 MoteView 
安 裝 光 碟 中 MoteView Installer 資 料 夾 裡 的
MoteView_1.4.A_Setup.exe 。或是到 http://www.xbow.com/Support/ 
wSoftwareDownloads.aspx 下載最新版本，然後安裝程式。 
程式開發環境 
z 程式語言： 
使用 NesC。NesC language 是設計給 embeded system 例如 sensor 
network使用的。NesC為C-like語法，但是支援TinyOS concurrency 
model ，有 structuring ， naming 和  linking together software 
component。主要目的是讓應用程式設計者去建立 components，
且可容易的組成一個完整、concurrent 的系統。 
NesC Language Reference Manual 可在 http://www.tinyos.net/ 
tinyos-1.x/ doc/ nesc/ ref.pdf 下載 
  19
B. 如果只要compiler的話，執行命令 make micaz。 
C. 如果執行命令make <platform> reinstall,<n> <programmer>,<port>則
會直接load pre-compiled的程式進mote。 
4. 當mote都被load好程式後，將node 0接在Mib510上，當base station。 
5. 看packet data可用XListen (Crossbow提供)。第一次用XListen前，須先設
定，用Cygwin到usr/local/bin 執行命令 
ln –s /opt/tinyos-1.x/contrib/xbow/tools/src/xlisten/xlisten.exe xlisten 之
後就可以用指令＂xlisten -r＂看raw packet data 詳細說明在光碟中
Manuals and Docs\Getting_Started_Guide.pdf的5.3小節 
6. 看packet data也可用Listen (TinyOS提供) 
第一次用Listen前，須先用Cygwin到tools/java 
執行命令 make 
export MOTECOM=serial@COM1:57600 
之後使用時先開SerialForwarder(在第7部份會說明)用來read packet data 
from a serial port and forward it over an Internet connection。 
然後用指令＂java net.tinyos.tools.Listen＂ show packet data。 
7. SerialForwarder使用方法： 
兩種方法可開啟： 
A. 用Cygwin到 /opt/tinyos-1.x/tools/java打指令 
java net.tinyos.sf.SerialForwarder -comm serial@COM1:57600 
B. 或是到C:\Surge-View執行SerialForwarder.exe 然後先Stop 
Server，將Mote Communications改為serial@COM1:57600再
Start Server。 
  21
舉例說明 
執 行 命 令
的 所 在 位
置 
MoteView 的 Program Mote 
執行命名 
1. 在 Select File to be Uploaded 裡選擇程式 compile 完畢所產生的 exe
檔 
2. Mote ID 填入 nodeID n 
3. Group ID 預設為 125 
4. 按下 Program 按鈕 
  23
8. Demo 範例程式與說明封包格式 
Packet 格式定義在 opt\tinyos-1.x\tos\platform\micaz\AM.h 的
struct TOS_Msg{} 
．Destination address (2 bytes) 
．Active Message handler ID (1 byte) 
．Group ID (1 byte) 
．Message length (1 byte) 
．Payload (up to 29 bytes) 
 
Dist 
Addr 
(2) 
Handler 
ID 
(1) 
Group 
ID 
(1) 
Length
(1) 
    Payload 
 
範例程式： 
在 Base 上用 apps\TOSBase 
在 Mote 上用 apps\OscilloscopeRF 
 
Mote 會傳 message 到 Base station 上 
用 xlisten 看封包 
7e42ffff0a7d5d1a06000a000100b803b403b903b103b703b803b003b
803b703b003fdd8[36] 
 
[0] 7e ： Framing byte, denoting start of packet 
[1] 42 ： Ack/noAck 
[2-3] ffff ： dist addr 
[4] 0a ： Type 
[5] 7d ：Group 
[6] 5d ： 
[7] 1a ： length 
[8-33]： Payload 
  25
9. NesC Programming Language 
NesC 是 programming language，是 C language 的 extension，在
microcontroller 上提供更有效率的 code，且簡化在存取硬體上的需求
與互動。NesC 主要是設計網路嵌入式系統 (networked embedded 
systems)使用的程式語言。什麼是網路嵌入式系統？舉例來說，sensor 
network：整個網路佈滿上千個且低耗能的motes，該mote皆有memory
與 power 的限制。 
NesC 的基本概念 
z Separation of construction and composition： 
程式是以許多個 components所組成，把 components “wire＂
則可以構成一個完整的程式。Component 則是以兩個部份組成，
一個是 component specification 與 component implementation。 
sensor 通常用於監控環境和收集資料，所以 sensor 都是事件
觸發的運作方式，因為環境的變化而做出反應，或是紀錄改變的
資料。nesC 是事件觸發的「component model」，每個 component
有其不同功能，負責對各類事件發生時，分別作不同的處理動
作，如此作法不但精簡了程式碼，讓每個 component 都可以重複
使用在不同的應用程式上，節省使用者重新設計的時間；並且若
是某部分出錯時，只需要檢查相關的 component 即可，讓除錯的
過程變得較容易。 
z Specification of component behavior in terms of set of interfaces： 
  27
式是由多個不同功能的 components 組合而成，因此要使用前必須先
瞭解 component 的特性。Component 本身可提供的功能是由 interface
來定義，component 也是利用 interface 去使用其他 component 的功能。 
Components 之間唯一溝通的橋樑是透過 component 的 interface，
不同的 interface 代表的意義也不同。而 component 可宣告＂provides＂
與＂uses＂ 兩種不同的 interface，描述如下： 
z provides interface：當 component 「provides」某種 interface 
時，即代表此 component 實作了某項功能，提供給自己或是
其他 component 使用。 
z uses interface： 當 component 「uses」某種 interface 時，即
代表此 component 使用到別人提供的某項功能。 
 
圖表 8 
  29
簡單來說，一個 nesC 的應用程式可以是： 
z 單獨一個 configuration component。當此程式需要的功能都已
經被其他 component 實作完，剩下的步驟只是把它們連結在
一起，所以只需要 configuration 來描述就足夠。 
z module 和 configuration 兩個 component 彼此輔助。當程式
不僅僅需要已經存在的功能，本身也要求一些計算或儲存等
等，就得靠兩者並行運作，這也是程式通常的寫法。 
介紹在 nesC 的一些關鍵字： 
z command f 或是 event f，屬於 interface i，以「i.f」來表示它
們的關係。 
z 欲定義「i.f」時，則在前面加上「command」or「event」關
鍵字。 
z 呼叫 command 或 event 時，使用「call」command 和「signal」
event。 
Module SurgeM： 
  31
Configuration TimerC： 
 
圖表 11 
上面舉的例子是 TimerC configuration 的部份程式碼： 
z 圖中為 TimerC configuration，連結「TimerM」和「HWClock」
這二個 components 而成。 
z 將 TimerC 本身提供的 interface 對應到 TimerM 裡： 
StdControl = TimerM.StdControl 
Timer = TimerM.Timer 
z 並且利用 TimerM 提供的 interface 去跟 HWClock 連接： 
TimerM.Clk -> HWClock.Clockz. 
NesC Reference 
(1) http://nescc.sourceforge.net/ 
(2) The nesC Language: A Holistic Approach to Networked 
Embedded Systems, David Gay, Phil Levis, Rob von Behren, 
Matt Welsh, Eric Brewer, and David Culler. In Proceedings 
  33
mib510,com1 
D、 node 0 為 base station 同樣也是灌 Surge.  
E、 到 tools/java  
打 java net.tinyos.sf.SerialForwarder -comm serial@COM1: 
57600 
會出現 GUI SerialForwarder 
 
圖表 12 
F、 用 Cygwin 打 java net.tinyos.surge.MainClass <GroupId> 
GroupId 預設為 125 即可跑出 
  35
 
圖表 14 
H、 用 Cygwin 打指令 java net.tinyos.tools.Listen 可看到
raw data 
 
圖表 15 
 
  37
Surge.nc 部份程式碼： 
z Main.StdControl -> SurgeM.StdControl; 
z Main.StdControl -> Photo; 
…… 
以這部份的程式碼內容，代表 Main Component 可透過 StdControl 
interface 執行 SurgeM 與 Photo 的 StdControl interface 所定義的
StdControl.init()，StdControl.start()，StdControl.stop()。更詳細的解說，
當 Main component 執行＂command StdContol.init()＂，即是在執行
SurgeM 與 Photo 的 StdControl.init()。 
主要解釋“由上層的 component 去 call 下層的 component，當下
層的 component 執行結束，則會發送 signal 傳送到上層的 component
做處理＂。在 Surge.nc 裡有一行程式碼 ＂SurgeM.ADC -> Photo;＂代
表 SurgeM component 的 ADC interface wire Photo component 的 ADC 
interface。SurgeM.nc 執行 call ADC. getData()，則會去執行 Photo 
component 裡 ADC.getData() function，該 function 的內容裡有嘗試
sensor，當成功 sensor 到 data，則 Photo component 會 “signal ADC. 
dataReady()＂，SurgeM component 收到該 signal，即會去執行
ADC.dataReady() function。 
Timer interface 有定義三個功能，start()，stop()，fired()。SurgeM 
componet 的 Timer wire TimerC，因此執行 call Timer.start()，則會執行
TimerC component 的 TimerC.start() function，該 function 會去計算時
間是否到達，當到達會 signal TimerC.fire()，SurgeM component 收到
該 signal，即可知道時間已到。  
  39
方，也就是 ISO 七層當中的 MAC layer。但 TinyOS 並沒有明確切割，
而 trace 結果，發現 CC2420RadioM component 有點類似 ISO 的 MAC 
layer 與 PHY layer。因此決定把 security code 加到該 component。 
下圖是簡單的示意圖為 Figure 3-4.的延續，若需得知詳細的內
容，請讀者自行 trace code： 
 
圖表 17 
CC2420RadioM component 主要功能： 
z CC2420 晶片可以 buffer 等待傳送的封包與接收從 radio
傳送來的封包，send buffer/receive buffer size = 128/128 
bytes。判斷 radio 是否 idle；若 busy，暫緩封包的傳送，…
等等。因此該 CC2420RadioM component 顧名思義可解釋
為 CC2420 晶 片 的 driver 。  ( 可 參 考
  41
¾  新增 Timer component，定期通知 nodes 要定期
update key，通知 nodes 需 update key 的封包的
header 為特定內容，因此 nodes 收到該封包，解
讀 header 即可知道需要 update key，而做相對應
的動作。在此的相對應動作也是我們新增的
code，該 code 主要是讓 nodes 之間互相溝通產生
nonce value，並 call Security.Key_Create() function
把產生一把新的 key。 
下圖為新增 security code 後的 packet data，紅色框中的 5 bytes 為
payload data 的前 5 bytes 加密後得出的值。即 payload data 的前 5 bytes
為原本數據，後 5 bytes 為前 5 bytes 加密後得出的值。 
 
圖表 18 
五、 目前 CrossBow 平台上可實現的
  43
key counter sequence 
counter 
external frame 
counter 
sequence counter 
 
z AES-CTR input block 
｛ flag / Nonce / Counter (1 byte / 13 bytes / 2 bytes) ｝  
在加密時，會加入一個 AES-CTR input block 值，則代表同一把
128-bits Key 每次加密過程後都會產生出不同的結果。主因是每次加
密時會動態產生出 AES-CTR input block，並且加入 AES-CTR 運算
中，用來增加駭客惡意破解的難度。 
接下來來討論如何產生出 AES-CTR input block。(AES-CTR input 
block 由 flag 與 Nonce/Counter 值組合成 16 bytes 
 
 
 
1 bytes 8 bytes 4 byte 1 byte 2 bytes 
Flag Source 
Address 
Frame 
Counter 
Key sequence 
counter 
Block counter 
 
 
 
 
 
 
7 6 5 4 3 2 1 0 
Res Res 0 0 0 L 
AES-CTR input block 
CTR mode flag byte 
Nonce Counter 
 
 
 
表格 4 
Res 保留欄位，always be set to 0 
  45
Ciphertext Data 為 Ciphertext1 || Ciphertext2 || … || Ciphertextn 
 
圖表 19 
 
z AES-CTR protected payload field 
當傳送的封包是 AES-CTR 模式時，則 MAC layer Frame format： 
Header Payload FCS 
 
4 bytes 1 byte Variable 
Frame counter Key sequence 
counter 
Encrypted payload 
  
圖表 20 
A、 封包的 Header 有儲存 IEEE address，可讓 Receiver 取
得 Source address 的資訊。 
B、 再傳送成功 frame後，會更新MAC PIB裡的 Frame counter
值。 
Receiver : 
  47
Plaintexti = E( Key , input block i ) ♁ Ciphertexti , for i = 1, 
2, …, n 
Plaintext Data 為 Plaintext1 || Plaintext2 || … || Plaintextn 
 
圖表 22 
  49
Res 保留欄位，always be set to 0 
 
Adata 
Adata = 0，當 l(a) = 0 
Adata = 1，當 l(a) > 0 
( l(a) 代表 additional authenticated data a 的長度，byte 為單位，0<l(a)<264 ) 
 
 
M 
M 參數的設定會對 message expansion 與 attacker 是否易於 modify message 有所
影響。 
M 參數合法的值：4, 6, 8, 10, 12, 14, 16 bytes，代表 message integrity code (MIC)
長度。 
M 欄位有 3bits，儲存(M 參數-2)/2，因此 M 欄位數值範圍 1~7 
 
 
L 
L 參數的設定會對 message size 與 nonce size 有所影響。 
nonce size： 15 - L 
message size： 
  l(m) 代表 message m 的長度，byte 為單位，0<l(m)<28L 
L 參數數值 2~8(1 被保留) 
L 欄位有 3bits，儲存( L 參數-1 )，因此 L 欄位數值範圍 1~7。 
  
z CBC-MAC input blocks 與 CBC-MAC 演算法 
 
1 byte n bytes M bytes 
Length = n + m Header MAC Payload(不包含 MIC)  
 
Input 1 
16 bytes 
Input 2 
16 bytes 
Input 3
16 bytes
Input n 
16 bytes 
Input 1 
CIPHK 
Output 1 
Input 2 
CIPHK 
Output 2 
Input 3 
CIPHK 
Output 3 
Input n 
CIPHK 
Output n 
 
圖表 24 
M 參數主要是設定 MIC size，若 MIC size < 16 bytes，則取 
“Output n＂左邊開始算 M 個 bytes 當 MIC。( M 參數可參考 CCM 的
  51
3. CCM mode Encryption and 
Authentication security suite 
Sender： 
z Encryption and authentication 所共同需要使用到的變數 
A. MAC PIB formats: 當 security mode 設定為 CCM mode
時，在 macDefaultSecurityMaterial 或 ACL-SecurityMaterial 
field 會儲存一些參數，而這些參數會在加解密時使用到。 
表格 7 AES-CCM security material 
16 bytes 4 bytes 1 byte (4) bytes (1) byte 
Symmetric 
 key 
Frame  
counter 
Key 
sequence 
counter 
Optional 
external frame 
counter 
Optional external key 
sequence counter 
  
B. CCM nonce 
表格 8 
 8 bytes 4 byte 1 byte 
Source 
Address 
Frame 
Counter 
Key sequence 
counter  
C. flag 值與 CBC-MAC flag 設定一樣 
z Authentication algorithm 
A. String a 代表額外增加的認證資料 
(a) l(a) = 0，L(a) is the empty string 
(b) 0 < l(a) < 216-28，L(a)用 2 bytes 表示 l(a) 
(c) 216-28 <= l(a) < 232，L(a)用 4 bytes 表示 l(a)，右邊兩個
byte 值為 0xfffe 
  53
Bo AuthData 
 
 
 
Input n 
CIPHK 
Output n 
MIC 
Input 1 
CIPHK 
Output 1 
Input 2 
CIPHK 
Output 2 
Input 3 
CIPHK 
Output 3 
Input 1(Bo)  Input 2  Input 3  Input n ... …   
16 bytes  16 bytes  16 bytes 16 bytes 
 
圖表 26 
M 參數主要是設定 MIC size，若 MIC size < 16 bytes，則取 
“Output n＂左邊開始算 M 個 bytes 當 MIC。 
z Encryption algorithm 
A. 解釋 CCM encryption 的 flag，與 AES-CTR 的 flag 定義一
樣。 
 
7 6 5 4 3 2 1 0 
Res Res 0 0 0 L  
B. 把 MAC layer 的 Plaintext Data 切割成 16bytes 大小的
blocks 
  55
4. AES-CTR protected payload field 
當傳送的封包是 CCM 模式時，則 MAC layer Frame format： 
Header Payload FCS 
 
 
4 bytes 1 byte Variable 4, 8 or 16 
bytes 
Frame 
counter 
Key sequence 
counter 
Encrypted 
payload 
Encrypted 
MIC 
 
MAC Layer 
 
圖表 29 
A. 封包的 Header 有儲存 IEEE address，可讓 Receiver 取得
Source address 的資訊。 
B. 再傳送成功 frame後，會更新MAC PIB裡的 Frame counter
值。 
Receiver： 
A. 收到 Frame 
Header Payload FCS 
 
 
4 bytes 1 byte Variable 4, 8 or 16 
bytes 
Frame 
counter 
Key sequence 
counter 
Encrypted 
payload 
Encrypted 
MIC 
  
圖表 30 
B. 從 Payload 取得 Frame counter 與 Key sequence counter，以及
Encrypted payload 與 Encrypted MIC 
C. Check Frame counter 與 Key sequence counter 是否 freshness 
  57
 
... …   
MIC  Plaintext1  Plaintextn 
Encrypted 
  MIC 
Ciphertext1  Ciphertextn 
Counter 0 
Input Blk0 
CIPHK 
Output Blk 0 
Counter 1 
Input Blk1 
CIPHK 
Output Blk 1 
Counter n 
Input Blk n 
CIPHK 
Output Blk n 
Payload
... …   
 
圖表 32 
G. 認證 Payload: 與 Sender 處理流程一樣，計算出的 MIC 與解
密完成的 MIC 做比較，若相同，代表認證成功；若不相同，
代表認證失敗。 
  59
的增加，是在可以接受的範圍。 
D. Ease of use 
 Security platform 
TinySec 有提供相鄰的 node 可產生 pairwise key 進行
通訊的機制。而為了讓 user 易於使用該功能，TinySec
提供了呼叫該機制的 interface。 
 Transparency 
 Portability 
E. Existing schemes are inadequate 
在 network環境下，已經有許多不錯的安全機制，Ex：IPSec, 
SSL/TLS, and SSH …等等。對 device、頻寬…等有所限
制的 WSN 環境下，使用這些安全機制似乎是大材小用。
因此 TinySec 機制是針對在 WSN 環境所定義出的安全機
制。 
F. TinySec supports two security options 
 Authenticated encryption (TinySec-AE) 
該機制有對 Message 加密以及認證。 
 Authenticated only (TinySec-Auth) 
該機制僅對 Message 認證。 
G. Notation 
IV(initial vector) 為 8 bytes 
H. Packet format： 
 TinySec-AE packet format： 
 加密/解密部分為 Data，計算 MAC 時是整個 packet
為 input。 
  61
¾ Information only leaks when one node sends two 
different packets with the same first 8 bytes and IV, 
to the same destination, with the same AM type, and 
of the same length. 
¾ If IV reuse is imminent, a key update protocol can 
be used to exchange new TinySec keys. 
 Energy Cost: 由 以 下 數 據 來 講 ， TinySec 的 
overhead ，在 WSN 下是可以接受的。 
 
 
圖表 37 
 
圖表 38 
 
 
圖表 39 
