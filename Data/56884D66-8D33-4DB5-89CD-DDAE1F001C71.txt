is very expensive. Visually rich multimedia contents 
are large, often in the order of hundreds of mega-
bytes, and are the main cause of such bandwidth 
crisis. In this project, we develop an efficient 
multimedia dissemination platform to fully utilize 
the heterogeneous networks accessible by multihomed 
smartphones and other mobile devices in order to 
reduce the traffic load on cellular networks. We will 
design, implement, and evaluate a hybrid cellular and 
ad hoc network to efficiently disseminate multimedia 
contents to/from/among smartphones. The proposed 
hybrid network harvests the free ad hoc spectrums to 
improve user experience and to reduce loads of 3G/4G 
cellular networks. Furthermore, in the proposed 
hybrid network, the cellular base stations act as 
centralized coordinators, which may improve the 
performance of existing algorithms designed for ad 
hoc networks. To the best of our knowledge, using 
hybrid networks to optimize delay-sensitive 
multimedia applications has not been thoroughly 
studied. 
 
In this project we prototype a multimedia 
dissemination platform as a middleware between 
application- and transport-layers. Multiple 
multimedia application can be implemented on top of 
the middleware, and various optimization algorithms 
can be implemented as new modules within the 
middleware. Such a prototype system allows us to: (i) 
identify performance bottlenecks, (ii) evaluate 
optimization algorithms via real experiments, and 
(iii) demonstrate the benefits of our proposed 
platform. Utilizing the platform, we study research 
problems in the multimedia dissemination platform, 
including: (i) energy-aware clustering, (ii) handoff 
among clusters and cells, (iii) admission control, 
(iv) multimedia quality adaption, and (v) incentive 
and micro-billing mechanism. We address several 
research problems, and validate our solutions in our 
prototype platform. The resulting multimedia 
dissemination platform can be used in many scenarios 
including mobile social networks, military 
 1 
行政院國家科學委員會補助專題研究計畫	 
□期中進度報告	 
þ期末報告	 
	 
計畫名稱:	 為多網路智慧手機設計之高效能多媒體傳播平台	 
An	 Efficient	 Multimedia	 Dissemination	 Platform	 for	 Multihomed	 Smartphones	 
	 
計畫類別：þ個別型計畫	 	 	 □整合型計畫	 
計畫編號：NSC	 100－2218－E－007－015－MY2	 
執行期間：2011	 年	 09 月 01	 日至	 2013	 年	 07 月 31 日	 
	 
執行機構及系所：國立清華大學資訊工程系	 
	 
計畫主持人：徐正炘	 
共同主持人：無	 
計畫參與人員：李育賢，林庭安，林庭毅，廖宸誌，侯庭芳，陳建彰。	 
	 
	 
	 
本計畫除繳交成果報告外，另含下列出國報告，共	 _1_	 份：	 
□移地研究心得報告	 
þ出席國際學術會議心得報告	 
□國際合作研究計畫國外研究報告	 
	 
	 
	 
處理方式：除列管計畫及下列情形者外，得立即公開查詢	 
	 	 	 	 	 	 	 	 	 	 	 	 □涉及專利或其他智慧財產權，□一年□二年後可公開查詢	 
	 
中	 	 	 華	 	 	 民	 	 	 國	 	 102	 	 年	 	 9	 	 月	 3	 	 日	 
	 	 
 3 
In this project we prototype a multimedia dissemination platform as a middleware between application- and 
transport-layers. Multiple multimedia application can be implemented on top of the middleware, and various 
optimization algorithms can be implemented as new modules within the middleware. Such a prototype system 
allows us to: (i) identify performance bottlenecks, (ii) evaluate optimization algorithms via real experiments, 
and (iii) demonstrate the benefits of our proposed platform. Utilizing the platform, we study research 
problems in the multimedia dissemination platform, including: (i) energy-aware clustering, (ii) handoff among 
clusters and cells, (iii) admission control, (iv) multimedia quality adaption, and (v) incentive and micro-billing 
mechanism. We address several research problems, and validate our solutions in our prototype platform. The 
resulting multimedia dissemination platform can be used in many scenarios including mobile social networks, 
military operations, crisis responses, video conferencing calls, and broadcasting sport events.  
 
Keywords: Middleware, dissemination, multimedia, reliability, wireless networks 
	 
前言	 
 
The amount of mobile data traffic consumed and produced by smartphones, tablets, and laptops has increased 
tremendously in the past few years, and such an increasing trend shows no sign of slowing down. Among all types of 
mobile traffic, multimedia contents, including music, images, and videos, are very popular consume the majority of 
mobile network bandwidth. Reliable and timely multimedia dissemination among a large number of mobile devices 
therefore is important in many scenarios, including mobile social networks, military operations, crisis responses, 
video conferencing calls, and broadcasting sport events. For example, tactical networks supporting interactive maps 
can better support soldiers in battle fields and emergency networks allowing video sharing can reduce the 
unnecessary delay due to time-consuming and error-prone verbal communications in rescue missions. 
Conventionally, data dissemination in military and emergency scenarios is done over multi-hop mobile ad hoc 
networks (MANETs). Such approach, however, may be unreliable and not suitable to multimedia contents, because 
ad hoc networks are inherently vulnerable to network segmentations. In contrast, data dissemination over cellular 
networks is more reliable because they have much longer ranges than ad hoc networks. However, disseminating 
multimedia contents over bandwidth-limited cellular networks may lead to network congestion and thus degraded 
service quality. This is partially because the deployed cellular technologies are not suitable for multimedia 
dissemination, as they do not support efficient multicast. In fact, these networks only support multicasting 
90-character messages for alarm and warning purpose, while disseminating multimedia contents with unicast 
connections results in tremendous redundancy, which effectively lowers the effective network capacity. Although 
there are proposals, such as Multimedia Multicast Broadcast Services (MBMS), extending cellular networks for 
better multicast support, deploying these extensions requires upgrading cellular base stations and all mobile devices, 
which incurs high deployment cost and may not be commercially-viable in the near future.  
 
 5 
and ad hoc networks (such as WiFi Direct, WiFi ad hoc, and Bluetooth) to form a hybrid network for efficient 
multimedia dissemination to/from smartphones and other mobile devices. Designing such a hybrid network to adhere: 
(i) high reliability, (ii) low latency, and (iii) low complexity is not an easy task. We emphasize on two main 
challenges below:  
• Large content dissemination. Multimedia contents are large, from hundreds of kilo-bytes to mega-bytes. To 
deliver such a large content, we need to divide the content into multiple chunks with the size smaller than the 
maximum allowable size defined by the underlying communication protocol. A smartphone can reconstruct the 
original content only if all chunks of that content are successfully received. Packet loss in wireless networks is 
common due to mobility, interference, collision, and fading. Dividing content into more chunks, therefore, leads 
to a higher probability of content delivery failure. 
• Ad hoc network dynamics and interference. The system should utilize the ad hoc network as much as possible 
to save the cellular network's bandwidth because the cellular network's resources are costly and more valuable. 
However, managing ad hoc networks is difficult. Connections between mobile devices are easily broken due to 
mobility since ad hoc links have rather short ranges. Thus, chunk dissemination from a mobile device to another 
mobile device along multi-hop paths frequently fails in high mobility environments. In addition, mobile devices 
share the same frequency bands, and are vulnerable to high interference in dense and heavily loaded 
environments. Hence, ad hoc networks often suffer from high packet loss rates and high delivery latency.  
 
In this project, we studied several critical research problems in the considered hybrid network. We designed new 
algorithms to solve these research problems in order to improve the efficiency of disseminating multimedia contents 
to multihomed smartphones. We evaluated our algorithms using large-scale simulations. The resulting multimedia 
dissemination platform enables mobile application developers to fully utilize the network interfaces on multihomed 
mobile devices.  
	 
研究目的	 
 
The major outcomes of this project include a testbed and three hybrid network systems. The testbed was published in 
ACM/IFIP/USENIX Middleware 2011, and summarized in our midterm report. The three hybrid network systems 
tackle three important research problems: (1) optimized video dissemination, (2) energy-aware clustering, and (3) 
user incentive in hybrid networks. These three hybrid network systems were published/under-review in IEEE 
Transactions on Mobile Computing (to appear), IEEE International Symposium on Reliable Distributed Systems 
2013 (published), and IEEE Transactions on Mobile Computing (revised). In the rest of this report, we summarize 
the three hybrid network systems. 
 
 7 
CrowdMAC, a crowdsourcing approach in which mobile users create marketplaces for mobile Internet access. Using 
CrowdMAC, mobile users with residue quotas in their data plans are willing to share their access with other nearby 
mobile users for small fees. CrowdMAC is designed and implemented as a distributed middleware framework that 
includes (i) a Lyapunov-based admission control procedure for mobile users who own and wish to share mobile 
Internet access, (ii) service selection strategies for those who wish to access the Internet through the sharing mobile 
users, and (iii) a family of techniques for mobility management. We evaluate CrowdMAC on a testbed of Android 
smartphones and in a well-known simulator, Qualnet. Our evaluation results show that CrowdMAC effectively 
exercises the trade-off between revenue and transfer delay. CrowdMAC also adequately satisfies user-specified delay 
quality levels, and properly adapts to device mobility and achieves performance very close to the predicted upper 
bound. 
	 
文獻探討	 
 
I. Optimized Video Dissemination. Using an auxiliary ad hoc network to augment a cellular network has been 
considered in prior literature for enhancing data transfer and video dissemination. We classify the existing approaches 
to speed up data transfer over a cellular network using an ad hoc network into two groups: unicast and multicast data 
transfers. In the former group [1], [2], data are unicast from a base station to mobile devices over a cellular network, 
and these devices relay the data to other mobile devices over an ad hoc network. In the latter group [3], [4], [5], [6], 
via multicast-enabled base stations, data is simultaneously sent to multiple mobile devices, which then propagate the 
data to other devices through multi-hop paths in an ad hoc network. Although, multicast data transfer may improve 
the system performance, current cellular networks only employ multicast for disseminating short messages (at most 
90 characters) [7], which is inapplicable for disseminating videos. Unicast Data Transfer. Luo et al. [1] design a 
hybrid network that uses a WiFi ad hoc network to route cellular data via other mobile devices with higher cellular 
data rates. Two neighbor discovery and routing protocols, proactive and on-demand, are proposed. With the former 
protocol, all devices proactively maintain the states of their immediate neighbors. When a device wants to discover a 
route to the base station, it issues a route discovery message to a neighbor with the highest cellular data rate. The 
message is further relayed by the neighbor to its highest rate neighbor until there is no neighbor with higher rate than 
the relayer or the hop count limit is reached. The final relayer is the one which receives data from the cellular network 
and propagates data to the original requester. With the on-demand protocol, devices do not maintain their neighbors’ 
states. A requester discovers a route to the base station by flooding a route discovery message to all its neighbors 
within a given range. Devices with higher data rates than that of the previous hops forward the message to the base 
station, which eventually selects the best path to the requester. Simulation results show that the on-demand protocol 
typically incurs higher traffic overhead on the cellular network, while the proactive protocol consumes more energy. 
Through simulations, Hsieh and Sivakumar [2] show that generic ad hoc protocols do not work well in hybrid 
 9 
relaying data over the ad hoc network. Lao et al. [5] optimized data throughput by structuring the hybrid network into 
groups, each receiving data through either the multicast cellular network or the ad hoc network. Law et al. [6] 
employed the results from Gupta et al.’s work [12] to estimate the capacity of the hybrid network. In their 
architecture, a base station increases multicast data rate by reducing transmission range. Devices, which receive data 
from the base station, relay the data to devices, which do not receive data due to being out of the base station’s range. 
While the solutions employing multicast cellular transfer significantly improve the data throughput, multicast in 
cellular networks may not be deployed in the near future because existing technologies do not support multicast of 
larger content. In practice, cellular network providers only support multicast short messages that are shorter than 90 
characters for emergency situations [7]. Therefore, we do not use multicast as well as compare our work with the 
multicast based solutions. Problems addressed by unicast-based solutions include effective proxy selection [14], [13], 
optimal live video streaming [10], and video ads dissemination [15]. In [14], [13], a requesting device, which wishes 
to download data from a base station, looks for a proxy, which is a device with highest cellular data around it and 
establishes a path from the proxy to itself. Data is unicast from base station to the found proxy and then pushed to the 
requesting device along the found route. Do et al. [10] proposed scheduling algorithms to optimize live video 
streaming from a server to a set of devices. Videos are encoded into layers using a novel coding standard H.264/SVC 
to be scalable with the fluctuations of wireless network capacity. Hanano et al. [15] designed a system for reliable 
video ads dissemination. Devices interested in video ads register with a server and keep pulling video chunks from 
the server over the cellular network or from neighboring devices over the ad hoc network until they get all chunks to 
recover the ads. 
 
None of the aforementioned studies rigorously address the problem of achieving high reliability and low latency for 
rich content dissemination over a hybrid cellular and ad hoc network. Mostly, reliable dissemination of rich content 
has been studied in ad hoc networks. This is however challenging due to the characteristics of such networks, i.e., 
high levels of interference, short range, and high mobility. These properties generally cause high packet loss ratios, 
which in turn reduce reliability. Existing efforts either deal with small content dissemination [16], [17] or aim to 
support rich content dissemination over a small number of nodes [18].  
 
III. User Incentive. Modern mobile phones have been extended to incorporate multiple networking interfaces 
beyond traditional cellular and WLAN capabilities, which enable them to form opportunistic networks using 
technologies such as WiFi Direct, WiFi Tether, and Bluetooth. Opportunistic networks complement infrastructure 
net- works with new capabilities such as (i) cellular network throughput improvement [6], [13] and (ii) rich content 
distribution [19], [20]. Research efforts to enhancing cellular network throughput for mobile devices that suffer low 
cellular data rates have been proposed in [6], [13]. Luo et al. [13] employ a hybrid network that uses a WiFi 
peer-to-peer network to unicast cellular data from a mobile device with higher cellular data rate (known as proxy) to 
 11 
	 
研究方法	 
I. Optimized Video Dissemination. 	 
SYSTEM OVERVIEW AND NOTATIONS 
We consider a hybrid network (see Figure 1), which consists of a cellular base station and several mobile 
devices. Table 1 summarizes the notations used in the report. The base station concurrently transmits K 
videos to U mobile devices, where each mobile device receives and renders a video chosen by its user. 
Throughout this report, we use node to refer to both the base station and mobile devices. All mobile devices 
are equipped with two network interfaces for cellular and ad hoc networks, respectively. Examples of cellular 
networks include EDGE, 3G, and 4G cellular networks, and examples of ad hoc networks are WiFi ad hoc 
and Bluetooth networks. Mobile devices can always receive video data from the base station via cellular links. 
They also form an ad hoc network and exchange video data over it. Unlike cellular networks, ad hoc 
connectivity is not guaranteed because ad hoc networks, such as WiFi ad hoc and Bluetooth networks, have a 
rather short range, less than a few hundreds of meters, and are prone to disconnections due to user mobility.  
 
Distributing videos in a hybrid network is challenging because: (i) wireless networks are dynamic in terms of 
connectivity, latency, and capacity, and (ii) video data requires high throughput and low latency. To cope with 
these challenges, we employ layered video coding, such as H.264/SVC, to encode each video into L layers. 
Layer 1 is referred to as the base layer, which provides a basic video quality. Layers 2, 3, …,  L are 
enhancement layers, which provide incremental quality improvements. An enhancement layer is decodable if 
all layers below it are received. With layered videos, we can dynamically adjust the number of layers sent to 
each mobile device. While the adjustments may be done very frequently, a subject user study reveals that 
frequent quality changes lead to degraded viewer experience. Therefore, we divide each video into multiple 
D-sec video segments, where D is a small number (e.g., 1 or 2 seconds). Quality changes are only allowed at 
boundaries of segments. We let S be the total number of segments of every video, and we let 𝑡!,!,! (1 ≤ k ≤ 
K, 1 ≤ s ≤ S, 1 ≤ l ≤ L) be the transmission unit of video k, segment s, and layer l.  
 
 13 
base station, and the base station maintains the state of availability and device location for all mobile devices 
1 ≤ u ≤ U.  
 
Given that the base station maintains a global view of the hybrid cellular and ad hoc network, the scheduler on 
the base station computes the schedule for all cellular and ad hoc links. The base station sends a new schedule 
to mobile devices every DW′ secs. The mobile devices then distribute transmission units following the 
schedule. To maintain the tractability, our schedule does not explicitly specify the transmission time of each 
transmission unit. Rather, the order of transmission units is determined by the importance of transmission 
units. We denote the list of transmission units sorted by their importance as a precedence list. Mobile devices 
skip transmission units that have not been received, and check their availability again whenever a 
transmission unit is completely sent.  
 
Figure 2 illustrates a scheduling window. Each rectangle represents a transmission unit. The dark units are the 
units already available at the receiving mobile device. The shaded units are the units scheduled by the 
schedulers. As the figure illustrates, the scheduler considers for scheduling only transmission units that are: (i) 
not available at the receiver and (ii) in the scheduling window W.  
 
Figure 3 presents a different view on a schedule, in which circles represent mobile devices, rectangles are 
transmission units, and arrows indicate multicast trees for dissemination. This figure illustrates that, 
depending on unit availability, a schedule may specify different multicast trees for different transmission units. 
For example mobile device 4 receives unit 𝑡!,!,! through the path consisting of base station 0 and devices 6, 7, 
while it receives unit 𝑡!,!,! through the path including only device 5. Figure 2 and Figure 3 show the 
generality of our scheduling problem. 
 
 
Figure 2: Scheduling window of a specific link 
 15 
Thus, if there is an efficient algorithm for our scheduling problem, it can be used to solve MDK01 problem 
and all other NP-hard problems. This completes our NP-Hard proof. 
 
Since the scheduling problem in a hybrid network is NP-Hard, we formulate it as an MILP problem in the 
next section. 
 
Optimization Problem Formulation 
We first build up the video and network models. Then, we formulate the considered scheduling problem. 
 
Rate-Distortion Model 
Our objective is to maximize the video quality under network bandwidth constraints. A popular method to 
achieve such quality-optimized system is to use a rate-distortion (R-D) model, which describes the mapping 
between video rates and degrees of quality degradation in reconstructed videos. R-D models capture the 
diverse video characteristics and enable media-aware resource allocation. Due to flexible and complicated 
prediction structures of layered video streams, existing scalable R-D models are fairly complex and may not 
be suitable for real-time applications. Hence, we adopt a low-complexity discrete R-D model below. The 
distortion caused by not sending a transmission unit 𝑡!,!,! to a mobile device can be divided into two parts: (i) 
truncation distortion and (ii) drifting distortion. Truncation distortion refers to the quality degradation of 
pictures in segment s itself, and drifting distortion refers to the quality degradation of pictures in other 
segments due to imperfect reconstruction of reference pictures. We assume each segment s contains multiple 
groups-of-picture (GoPs) and thus can be independently decoded. This practical assumption eliminates the 
needs to model drifting distortion.  
 
We let 𝑞!,!,! be the quality improvement when receiving 𝑡!,!,! in addition to the previously received 𝑡!,!,!!, 
where 𝑙′ = 1, 2, . . . , 𝑙 − 1. While quality improvement can be in any video quality metric, we use Peak 
Signal-to-Noise Ratio (PSNR) throughout this paper for concrete discussions. PSNR is a widely-used 
objective video quality metric, which is in dB scale and inversely related to mean-squared error. We let 𝑧!,!,! 
be the size of 𝑡!,!,!. The sets 𝑄! = {  𝑞!,!,! | 1 ≤ s ≤ S, 1 ≤ l ≤ L} and 𝑍! = {  𝑧!,!,! | 1 ≤ s ≤ S, 1 ≤ l ≤ L} 
model the R-D characteristics of video stream k. 𝑄! and 𝑍! are computed during the encoding time, and 
sent to the base station as meta-data along with the video stream k itself. The base station uses them as inputs 
to solve the scheduling problem. Notice that 𝑞!,!,! and 𝑧!,!,! are merely two numbers and thus sending them 
along with the video data, typically in the order of kilo-bytes, leads to negligible overhead. 
 
Network Capacity Model 
We let 𝑐!,! be the link capacity between nodes u and v under the assumption of minimized interference. In 
practical systems, 𝑐!,! may be derived by various approaches. For example, Riiser et al. propose to look up 
link capacity based on each node’s location. In our simulation and experiments, we adopt this location-based 
approach, and use the device location 𝜔! to estimate the link capacity in both cellular and ad hoc networks. 
More specifically, we empirically measure the mapping between the node location and link capacity several 
times, and use the resulting values for capacity estimation. In the following paragraphs, we explain how the 
interference is minimized in: (i) cellular networks and (ii) ad hoc networks.  
 
 17 
∈ A!,!,! in the breadth-first tree, where 1 ≤ h ≤ H. Mathematically, we write: 
Equation 1 
 
 
where N!,!,!!,!  includes u’s neighbors (note that N!,!,!!,!  = {  𝑢}). Equation 1 defines nodes in level h by 
finding all nodes that are neighbors of nodes in level h− 1 ( N!,!,!!,!!  ∈  !!,!,!!,!!! ) and then excluding nodes in 
levels h− 1 (\N!,!,!!,!!! ) and h− 2 (\N!,!,!!,!!! ) from the found nodes. 
 
 
Figure 4: An illustrative breadth-first tree for unit delivery 
 
Figure 4 presents an example of a breadth-first tree which is formed to deliver unit 𝑡!,!,! from device 1 in A!,!,! to four receivers. Device 1 is the root of the tree, and nodes 2 and 3 are in level 1. Using Equation 1, our 
technique determines nodes in level 2 (i.e., h = 2) to be receivers 4 and 5 because N!,!,!!,!!! = {2, 3}, N!,!,!!,!!  ∈  !!,!,!!,!!!  = {1, 2, 3, 4, 5}, N!,!,!!,!!! = {2, 3}, and N!,!,!!,!!! = {1}. Using breadth-first trees for path 
selection helps eliminate long and inefficient paths. For example, path 1-2-4-5 should not be chosen to deliver 
to data from 1 to 5 because there is a shorter path 1-3-5.  
 
Distributing transmission units over breadth-first trees not only limits the distribution latency and avoids 
loops, but also reduces the complexity of the considered problem without sacrificing the solutions’ quality. 
This is because paths that do not follow breadth-first trees are inefficient and should be avoided. 
 
Formulation 
We define 𝑥!,!,!!,!,! ∈ {0, 1} to be a decision variable: 𝑥!,!,!!,!,! = 1 if transmission unit 𝑡!,!,! is scheduled to be 
sent from node v to node u over the breadth-first tree rooted at node 𝑎; 𝑥!,!,!!,!,! = 0 otherwise. The 
scheduling problem in a hybrid cellular and ad hoc network is formulated in Equation 2a-Equation 2h. In this 
formulation, we refer to the base station as node 0. The objective function in Equation 2a is the average video 
quality achieved by all U mobile devices. The objective function contains two terms (within the square 
brackets): the first term considers the breadth-first tree rooted at the base station, and the second term 
considers the breadth-first trees rooted at gateways, which directly receive the transmission unit from the base 
station. We note that, if the objective function only has the first term, a new transmission unit would only 
have a breadth-first tree rooted at the base station with height one because all mobile devices are one hop 
away from the base station. Consequently, the transmission units would never be exchanged over ad hoc 
networks. Hence, the second term is critical to the utilization of the ad hoc network, and overall video quality.  
 19 
problems by revising the definition of the scheduling priority. 
 
The priority-based algorithm works as follows. First, the shortest path between the source-destination pair of 
each flow is calculated. Then, the number of shortest paths traversing through each link is used as its priority. 
Next, the algorithm uses an anchor link to iterate through the links from high to low priority. For each anchor 
link, the algorithm scans through all links that are not its neighbors in the conflict graph, and creates a set of 
new maximal independent sets, where every maximal independent set contains the anchor link. A link covered 
by any maximal independent set will not be considered as an anchor link. The algorithm stops once all links 
are covered by at least a maximal independent set. Readers are referred to Li et al. for more details on this 
algorithm.  
 
We define a new priority function for each ad hoc link to achieve the following four design goals:  
1) The links into mobile devices with more descendants in breadth-first trees are given higher priorities. 
2) The links into mobile devices on breadth-first trees of transmission units with higher quality 
improvement values are given higher priorities.  
3) The links with higher ad hoc link capacities are given higher priorities.  
4) The links from mobile devices with higher cellular link capacities are given higher priorities. 
Specifically, we define the priority function 𝑓(𝑢, 𝑣) of an edge from u to v as: 
 
Equation 3 
 
 
where 𝑓!(𝑣) and 𝑓!(𝑢) are the “importance” factors due to the ad hoc network and the cellular network, 
respectively. They are computed as: 
 
Equation 4 
 
 
Equation 5 
 
 
where 𝑚!,!,!!,!  is the number of descendants of mobile device v on the breadth-first tree rooted at node 𝑎 for 
video k, segment s, and layer 𝑙.  
 
 21 
between the total transmission unit size sent over link u− v during DW′ secs and DW′. Upon getting 
demand capacity 𝑐!,!, we compute the maximum ad hoc network capacity by solving a Linear Program (LP): 
 
Equation 7 
 
 
This formulation maximizes the total ad hoc capacity in Equation 7a, while guaranteeing the demand capacity 
is met in constraint in Equation 7c. Formulation in Equation 7 can be efficiently solved by LP solvers. Let λ!∗  
(1 ≤ q ≤ 𝑄 ) be the optimum air-time allocation, we compute the optimum effective ad hoc link capacity 
between mobile device u and v as: 
 
Equation 8 
 
 
We next traverse through the precedence list, and we go through the transmission units of different videos on 
the descending order of the ratio of quality improvement and transmission unit size. We consider the 
transmission units with higher ratios earlier in order to achieve higher quality improvement under the same 
link capacity. Next, for each transmission unit, we sort the mobile devices that already hold that transmission 
unit on the numbers of descendants on their breadth-first trees. We iterate through these mobile devices, and 
schedule the transmission unit as long as the remaining link capacity permits. We stop once the current 
transmission unit is distributed to all mobile devices. If the transmission unit cannot be received by some 
mobile devices, we instruct the base station to transmit the unit to these devices over the cellular network. The 
algorithm stops upon both maximum ad hoc link capacity and cellular data air-time allocation δ are 
saturated.  
 
The next lemma shows that the MTS algorithm runs in polynomial time.  
 
Lemma 2 (Complexity of MTS Algorithm): The MTS algorithm runs in polynomial time in the worst-case, if 
the formulation in Equation 7 is solved by a polynomial time LP solver. For example, with Karmarkar’s 
interior point method, the MTS algorithm has a time complexity of 𝑂[𝑄!.!𝐸! +𝑊𝐿𝐾𝑈𝐸!], where E = |E| is 
the number of edges in the network graph. 
 
A Tree-Based Heuristic Algorithm: THS  
Both POPT and MTS algorithms employ optimization problem solvers. Although commercial and 
open-source solvers are available, these solvers might lead to long running time in the worst-case scenarios. 
 23 
 
Figure 5: Tree-Based Heuristic Scheduling (THS) algorithm 
 
The next lemma reports the complexity of THS. Compared to the MTS algorithm, THS has a smaller time 
complexity.  
 
Lemma 3 (Complexity of THS Algorithm): Assuming H is a small constant, the THS algorithm given in 
Figure 5 has a time complexity of 𝑂[𝑊𝐿𝐾𝑈!𝐸], where E = |E| is the number of edges in the network graph.  
 
II. Energy-Aware Clustering. 
HybCAST SYSTEM ARCHITECTURE 
HybCAST uses a dissemination server to structure the hybrid network, store and disseminate rich contents to 
mobile devices. Figure 6 shows the system architecture, in which a middleware is installed on the server and 
on every mobile device. Note that, contents may be generated with a workstation on the Internet or a mobile 
devices on a cellular network. These contents are first uploaded to the server and saved in the Data Storage 
module.  
 25 
 
Figure 8: Content dissemination in HybCAST 
 
CONTROL PLANE 
The task of the control plane is to (a) notify mobile devices about an ongoing dissemination and (b) manage the 
hybrid network by coordinating information exchange between the server and mobile devices. The control plane 
activities provide information to other components in the Data Plane.  
 
Metadata Management 
HybCAST employs the Metadata Management component to provide mobile devices information about an 
ongoing dissemination. Because mobile devices that are interested in a content or a category of contents need 
to sign up with the server, the server is able to maintain a list of receivers. The server performs a metadata 
dissemination before an actual content distribution. Once a device receives metadata about a content, it is 
content-aware, and the Pull component at the device can retrieve any or all chunks of the content. The 
metadata message also works as a request to a mobile device to turn on the 802.11 interface and start forming 
the 802.11 ad hoc network. Later, the mobile device turns off the 802.11 interface for energy conservation 
when it receives the entire content and is no longer needed for ad hoc data transfer. 
 
The metadata is a message containing information about the content to be disseminated; it include the content 
name, content ID, and the number of chunks. The Metadata Management module at the server transmits a 
metadata message to each mobile device over the cellular network. Every mobile device, upon receiving the 
metadata, must confirm this to the server. The server resends metadata to the device until a confirmation is 
received. Notice that the metadata is small, and thus disseminating it to mobile devices consumes much less 
network resources than an actual rich content distribution does. 
 
Network Management 
The Network Management at mobile devices deals with the problem of structuring and maintaining the 802.11 ad 
hoc network. Each mobile device has a distinct ID, and communicates with other mobile devices over the 802.11 
channel. To scale with network density, content size, and network mobility, mobile devices are grouped into clusters. 
We connect every two neighboring clusters via multiple links to enable clusters to communicate under device 
 27 
 
We denote a mobile device to be a gateway (GW) if it connects to other clusters. By exchanging HELLO messages, 
the Network Management at CHD or GW is able to maintain a data structure, a management table, which is useful 
for pushing chunks from a cluster to its neighboring cluster. A management table entry for each CHD contains: (i) a 
neighboring cluster, (ii) a gateway leading to that cluster, and (iii) the hop count from the gateway to that cluster. For 
instance, Figure 9, CHD 1’s management table has three records. The first record <2, {10(1), 11(1)}> indicates that 
CHD 1 is able to forward packets to cluster 2 through GW 10 or GW 11 which is one hop away from CHD 2. 
 
Network Structuring Policy 
HybCAST employs the cellular rate as the utility function by default. That is, a device with the highest data 
rate will be chosen as a CHD. However, doing so might quickly drain the CHDs’ batteries because they not 
only receive data over the cellular network but also relay the data to MEMs over the 802.11 ad hoc network. 
 
Service providers may address this issue by structuring the hybrid network using a composite utility function 
of the energy consumption and cellular data rate, such as: 𝑢 𝐸! ,𝐶! =    𝑤!( !!!!"#)! +   𝑤!( !!!!"#)!, where 𝐸! 
and 𝐸!"# are the residual energy and the maximum energy of the battery, and 𝐶! and 𝐶!"# are cellular 
data rate and the maximum rate of the cellular network, 𝑤! and 𝑤! are weights for energy and data rate 
such that 𝑤! +   𝑤! = 1. Note that, with 𝑤! = 1, this structuring policy degrades to cellular rate based CHD 
and GoCH selections. With 𝑤! = 1 this structuring policy becomes battery-biased (and rate-agnostic) CHD 
and GoCH selections. 
 
DATA PLANE 
Content Push 
The Push component in the Data Plane at the server initiates the dissemination process by querying the 
Control Plane to get information about GoCs in the 802.11 ad hoc network. For each GoC, the Push 
component at the server unicasts chunks to the corresponding GoCH. Upon receiving chunks from the server, 
the GoCH employs its Push component to relay the chunks to all neighboring CHDs in the GoC using the 
802.11 network. To do so, a GoCH has to choose a set of gateways for pushing the chunks to the neighboring 
CHDs. The algorithm of gateway selection is presented later. Once gateways are selected, paths toward the 
neighboring CHDs are attached as routing information into the chunks, and the chunks are broadcast to the 
gateways and other MEMs. The gateways further forward the chunks to the neighboring CHDs by looking up 
their management tables. When the neighboring CHDs receive the chunks, they broadcast the chunks to their 
MEMs. Thus, all nodes in each GoC will receive the chunks. 
 
Figure 9 gives an illustrative example. A content’s chunks are pushed by Push component at the server to CHD 1, 
whose Push component then relays the chunks to CHDs 2, 4, and 5 over the 802.11 ad hoc network. CHD 1 selects a 
set of gateways (such as GW 10 for CHDs 2 and 5, and GW 3 for CHD 4), attaches information of the gateways into 
the chunks, and broadcasts the chunks to gateways. When CHD 1 broadcasts, MEMs in cluster 1 including devices 3, 
10, 11, 12, 17 will receive the chunks. The gateways forward the chunks to the neighboring CHDs with next hops 
selected from their management tables. For example, GW 10 picks up GW 13 to forward the chunks to CHD 5 with 
the minimum cost, and uses CHD 2 for forwarding chunks to MEMs in CHD 2’s cluster. 
 29 
otherwise. Let 𝑤!,! be the weight of the edge connecting i to j. The formulation is written as: 
 
Equation 9 
 
 
The objective function in Equation 9a minimizes the cost of the obtained tree. The constraint in Equation 9b 
ensures that at most one edge enters a node in 𝑙!. Equation 9c guarantees that all nodes in 𝑙! must be picked 
up in the obtained tree. Finally, Equation 9d ensures that if the edge directed from a node in 𝑙! is selected in 
the obtained tree, then the edge directed to that node must be selected. 
 
Solving the ILP problem may take a prohibitively long time due to intensive computations. Therefore, we 
develop an efficient algorithm for the problem, which achieves a tight approximation factor in the following. 
Our approximation algorithm is based on GS tree’s three properties: (i) the tree has only two levels; (ii) in the 
tree, the weights of edges are either 1 or 2; and (iii) in any solution, the sum of the weights of edges into nodes 
in 𝑙! is equal to or greater than that of the weights of edges out of the root. 
 
Assume we have a GS tree T, we make the following observations about the tree. 
 
Lemma 1: Another tree, T′, is constructed from T by removing all weight 2 edges ingoing to a node in 𝑙! if 
there is at least a weight 1 edge ingoing to this node. If there is a subtree that is an optimal (OPT) solution 
found in T′, it is also OPT in T. 
 
Lemma 2: In T′, if a node in 𝑙! is selected by some approximation algorithm, then all of its children can be 
safely picked up. 
 
 31 
chunks. Upon receiving the pull message, a neighbor transmits a requested chunk with a random delay to the 
requesting CHD to avoid bottleneck at this CHD. The 802.11 ad hoc network should be given a higher 
priority to save bandwidth for the cellular network. That is, so far collecting and providing missing chunks at 
CHDs have been performed in the 802.11 ad hoc network. 
 
The pull mechanism described above works efficiently for exchanging missing packets within a cluster, and 
between two clusters if the shortest path between two CHDs is less than three hops. For chunks that are not 
delivered by above mechanisms, the Pull component at CHDs requests these chunks over the cellular network. 
More specifically, the Pull component at CHDs informs missing chunk gaps to the Pull component at the 
server. Once receiving missing chunks from the server, CHDs continue providing them to their neighbors. 
However, the Pull component at a CHD contacts the Pull component at the server only when (i) the CHD has 
all chunks that its neighboring nodes have, (ii) CHD’s neighbors have all chunks owned by the CHD, and (iii) 
the CHD still has missing chunks. These conditions are to save the cellular network bandwidth for other 
purposes. 
 
III. User Incentive. 
CHALLENGES AND APPROACHES  
In this section, we describe the challenges of designing the CrowdMAC crowdsourcing system that enables 
mobile devices to hire mobile APs to upload and download data. The goals of CrowdMAC’s design are: (i) 
provide a market-based approach to motivate users to participate in the system, (ii) support bidirectional 
traffic efficiently (progressive upload and download) for diverse data types, (iii) handle heterogeneous devices 
and networks. Among the three goals, the first requirement is especially critical since the success of any 
crowdsourcing system lies in the ability to encourage participation from the “crowd”. 
 
Challenges and Scope  
Creating a meaningful incentive-based design for CrowdMAC to ensure robust data transfers despite 
dynamics of mobile users and connectivities is very challenging. The following questions need to be 
addressed:  
1) How does a mobile AP make an admit/reject decision upon receiving a request from a mobile device? 
Admitting a larger number of requests brings higher revenues, but causes buffer overflow at the mobile 
APs and a longer end-to-end delay for file transfer. Higher delays may turn users away from the system.  
2) How does a mobile device select a mobile AP and a corresponding service (Cellular or WiFi 
network)? Services charge different fees and provide different quality-of-services.  
3) How do mobile devices and mobile APs deal with uncertain channel conditions caused by mobility? 
The system has to solve the situation where a mobile device is moving out of its range before its file is 
completely transferred to the mobile AP.  
4) How does the system handle security issues and legal implications of sharing mobile access? How 
does this scheme fit into ISP provider ecosystem?  
 
In this report, we focus on the mechanisms to enable crowdsourced mobile access to the Internet where 
mobile APs with direct access are able to offer connectivity to mobile devices without direct access (i.e., 
 33 
In general, a mobile AP with congested last connections can hire another mobile AP to transfer data. For 
illustration, C in Figure 11 may access the Internet through mobile AP D. Nonetheless, for brevity, we assume 
that a smartphone can be either a mobile device or a mobile AP, but not both simultaneously in the rest of this 
paper.	 
 
 
Figure 12: Components and workflow (upload case) in the middleware system 
 
Software Architecture  
CrowdMAC is envisioned as a distributed middleware system that resides on mobile devices, mobile APs, and 
the network proxy/broker. A mobile AP may provide concurrently multiple services, each for a last 
connection. Figure 12 depicts the key software components/modules in CrowdMAC: (i) AAAModule, (ii) 
Control PlaneModule, (iii) Data Plane Module, and (iv) Connection Manager. Figure 12 also illustrates the 
operational workflow of a CrowdMAC session. Without loss of generality, we illustrate the system workflow 
using a data upload scenario, and minor modifications are required for a download session, which will be 
presented later.	 
 
AAA Module: The module maintains information about users in the system and their mobile access sessions 
in databases at the proxy/broker. Mobile devices and mobile APs register themselves with the proxy/broker 
and provide identity information stored in database Users. During operation, logs are maintained about the 
amount of data transferred by mobile APs for mobile devices and the corresponding monetary fees in database 
Billing. Our initial implementation uses a prepaid option. Mobile devices (i.e., users) make a monetary deposit 
to their account before they can use services provided by mobile APs. Prior to transferring data for a mobile 
device, the mobile AP accesses the proxy/broker to verify if the mobile device is able to cover the fees for the 
transfer. 
 
Control Plane Module: The control plane modules at different nodes cooperate to establish and maintain 
 35 
Moreover, Lyapunov based techniques can be efficiently put into practice in wireless networks. Using 
Lyapunov framework for designing admission control algorithms has been studied before for cellular base 
stations and WiFi Hotspots where resources are not an issue. Our problem considered here is much more 
challenging because mobile APs are resource constrained. 
 
Basic Models and Problem Formulation  
Consider a network consisting of a set of mobile APs M, a set of mobile devices D, and a set of wireless 
links L. Let us also assume that time is divided into slots of t units and requests are made by mobile devices 
to mobile APs for wireless services in a specific time slot. 
 
Services. Each mobile AP m provides a set of services 𝑆! – which in our case represents disparate last hop 
connections (Cellular or WiFi Hotspot). Let S be a set of all services in the network. When mobile device d 
wishes to upload a file to the Internet, it selects a service 𝑠! provided by mobile AP m and waits for an 
accept or reject decision from 𝑠!. 
 
Monetary costs. Mobile device d, who wishes to upload/ download a file with size 𝑓! through a service, 
must pay a price or cost, which is a function of 𝑓!. In this report, this is the revenue earned by the service and 
we consider this as monetary cost. If d selects service 𝑠! provided by mobile AP m, d will be charged a 
cost denoted by C(𝑠!, 𝑓!). Typically, C(𝑠!, 𝑓!) incorporates two subcosts: (a) a local resource consumption 
cost, 𝐶!(𝑠!, 𝑓!), that captures the cost incurred due to use of resources at m , and (b) a provider cost, 𝐶!(𝑠!, 𝑓!), paid by the mobile AP to the network provider (e.g., telco) for covering the data plan cost of 𝑠!’s 
last connection. For simplicity, we consider the provider cost also includes cost paid for the proxy/broker 
provider. Hence, C 𝑠!, 𝑓! =   𝐶! 𝑠!, 𝑓! +   𝐶!(𝑠!, 𝑓!). 
 
Our system works well with any cost function C 𝑠!, 𝑓!  chosen by mobile APs (in fact, by their users). For 
example, a mobile AP m with a 200 MB, $10 data plan may employ a linear function such as 𝐶! 𝑠!, 𝑓! =   !"!!!""(!"#$)! to cover the provider cost. Energy consumption, a dominating portion of the local resource cost for 
mobile devices 𝐶! 𝑠!, 𝑓! , can be modeled as a nondecreasing concave function of the amount of transmitted 
data. Thus, in this example, C 𝑠!, 𝑓!  is a nondecreasing concave function. 
 
Workload arrival and departure. A mobile AP m may have many mobile devices requesting to use its 
services for file upload/download. We assume that each mobile device has only one file to upload/download 
at a time, and the maximum file size is 𝐹!"#. A mobile device approaches m when it wants to use m’s 
services, and departs when it completes the transmission or moves out of m’s range. Let 𝑅!!(𝑡) denote the 
set of mobile devices requesting to use service 𝑠! provided by m in time slot t, and 𝐴!!(𝑡) denote the 
total workload requested from service 𝑠! in time slot t. That is, 𝐴!! 𝑡 =    𝑓!!∈!!!(!) . Assume that 𝐴!! 𝑡   ≤ 𝐴!"#    ∀𝑠!, 𝑡, where 𝐴!"# is the maximum possible workload at any mobile AP. We assume that 
mobile device arrival rate to m is i.i.d. over time slot. Every time slot, 𝑠! admits a set of mobile devices 𝑟!! 𝑡 ∈   𝑅!!(𝑡) with an admitted workload of 𝑎!! 𝑡 ≤   𝐴!!(𝑡). The time average data amount admitted to 𝑠! is defined: 𝑎!!   ≜    lim!→! !! E{𝑎!!(𝜏)}!!!!!! .  
 37 
 
Our Admission Control Algorithm – MAPA  
To solve the problem Equation 10a-Equation 10c, we design an admission control algorithm using the 
Lyapunov framework. To ensure the two constraints (Equation 10b) and (Equation 10c), we maintain real and 
virtual queues for a service 𝑠! in S.	 
	 
Real queue and the system stability - Constraint (Equation 10): Data transmitted to/from mobile devices 
from/to 𝑠! is stored at a queue before it can be transmitted further. Each service has one real queue to store 
request data; let 𝑄!!(𝑡) denote the queue backlog, which is the number of bytes in that queue, at the 
beginning of time slot 𝑡 for service 𝑠!. The queue backlog’s evolution is: 
 
Equation 11 
 
 
Now, we define stability of our network system as finite average queue backlog: 
 
Equation 12 
 
 
If Equation 12 is maintained then constraint (Equation 10b) is satisfied. In real implementations, the real 
queue at mobile devices can be ignored, as a mobile device may read files on-demand rather than prefetching 
them into memory. 
 
Virtual queue and the admitted data - Constraint (Equation 10c): To satisfy constraint (Equation 10c) 
without breaking the Lyapunov framework, we employ the concept of a virtual queue that captures the 
projected load over time based on requests admitted by the service. Each service 𝑠! maintains a virtual 
queue 𝑈!!(𝑡) that is just a software counter, i.e., does not hold actual data packets. 𝑈!!(0) is set to 0 and 𝑈!!(𝑡) evolves over time: 
 
Equation 13 
 
 
Lemma 1: If the virtual queue is stable, i.e., 
 
 39 
where B =    𝑆 𝛽, 𝑆  is the number of services in the network, and 𝛽 is a constant. 
 
Since our goal is to design a control algorithm that not only stabilizes the system but also maximizes the time 
average revenue for each service, we maximize the subtraction of a weighted cost from the drift: 
 
Equation 18 
 
 
where V is a revenue weight working as a parameter providing a trade-off between revenue and stability. 
 
By inserting Equation 17 to Equation 18, we will control our system to maximize the following equation: 
 
Equation 19 
 
 
where 
 
Equation 20 
 
 
Notice that compared to Equation 17, we do not have B and E{𝑈!!(𝑡)𝑔!!(𝑡)|𝜑(𝑡)}!!∈!  in Equation 19 
because 𝛽 is a constant and we cannot control 𝑔!!(𝑡) which is the loss due to disconnection between 
mobile devices and mobile AP. Also, note that 𝑎!! 𝑡 =    𝑓!!∈!!!(!) .  
 
We design MAPA algorithm to solve Equation 19. Every time slot, every service 𝑠! performs three tasks: 
(1) determining which mobile devices requesting to use 𝑠! will be admitted (maximize Θ!(𝑡)); (2) 
determining if mobile devices that 𝑠! is serving should transmit data to 𝑠!’s real queue or not 
(maximizeΘ!(𝑡)); and (3) transmitting data out of the real queue 𝑄!!(𝑡) whenever the queue is not empty 
 41 
Theorem 1 (Revenue lower bound): MAPA algorithm achieves a lower bound of the time average revenue: 
 
Equation 22 
 
 
where 𝛽 is a constant. 
 
Next, we show there is a trade-off 𝑂(1/𝑉,𝑉) between the achieved revenue and the quality-of-services in 
the MAPA algorithm.  
 
Theorem 2 (Worst case bounds on real and virtual queues): 
MAPA algorithm provides worst case bounds of the service’s real and virtual queue size: 
 
Equation 23 
 
 
where 𝑦!! is a service based function with respect to 𝑓! (𝑓! ≤   𝐹!"#) defined as 𝑦!! = !(!!,!!)!! and 𝑦!!∗  is 
the maximum value of 𝑦!!, 𝑄!!∗  and 𝑈!!∗  are the maximum queue backlog of 𝑠!’s real and virtual queues. 
 
The above two theorems illustrate the trade-off between the time average revenue and the worst case queue 
bounds. If service 𝑠! increases its time average revenue 𝑂(1/𝑉), then the size of both real and virtual 
queues increases 𝑂(𝑉). For example, when queue sizes reach infinity, 𝑠! achieves the time average revenue 
arbitrarily close to the optimal value. 
 
However, note that a large queue size may lead to high end-to-end delay. The following lemma shows that 
MAPA leads to a linear relationship between the end-to-end delay and the backlogs of the queues. 
 
Lemma 3 (Relating queue size and delay): Let’s denote the current backlogs of the real and virtual queues as 𝑄!!!  and 𝑈!!! , respectively. Assume that the incoming and outgoing data rates 𝜇!!!"  and 𝜇!!!"# of service 𝑠! 
are unchanged over time slots. The MAPA algorithm achieves the worst case delay 𝑇 =    𝑡 +   𝑇 slots, to send 
all data in the queues to the Internet, where: 
 
 43 
running time on the video streaming performance. The goal here is to use POPT as a benchmark to evaluate 
the performance of MTS and THS. In practical systems, such as the testbed implementation presented in later 
section, we do not pause the dissemination system. 
 
For comparisons, we also implement a cellular only optimal scheduler, which is referred to as Current* in the 
figures. We emphasize that Current* is not a naive algorithm. Rather, it achieves optimal streaming quality 
without leveraging on the auxiliary ad hoc network.  
 
In our simulations, we employ WiMAX to establish connections between base station and mobile devices, and 
use IEEE 802.11b to form an ad hoc network. WiMAX supports a peak bit rate of 1.2 Mbps, while the 
maximum data rate of 802.11b is 6 Mbps. Mobile devices are randomly placed in a network with a terrain of 
1000 x 1000 𝑚!. We vary the number of mobile devices U = 10, 20, 30, 40, 50, 60, 70 watching live videos. 
WiMAX is configured so that the base station can reach all mobile devices and vice versa while 802.11 range 
is set to be 200 m. We employ Two-Ray propagation model in the simulations. UDP is used as the underlying 
transport protocol. We use Random Waypoint model to simulate mobile device mobility. By default, 
maximum speed is 2 m/s with 60 second pause time, unless it is otherwise specified. The cellular network 
reserves air-time fraction δ = 0.75 for data traffic. Maximum hop count H is set to be 3 by default. All the 
experiments are run on a Linux workstation with a dual-core AMD 2.2 GHz CPU and 8 GB RAM.  
 
We adopt the video traces of H.264/SVC layered videos from an online video library. The mean bit rate and 
average video quality for each layer of the considered videos are given in Table 2. In this report, we report 
sample simulation results of distributing Crew. However, the proposed formulation and solutions are general 
and also work for the scenarios where mobile devices watch different videos. The video is divided into D= 2 
sec segments. Each simulation lasts for 90 secs, so the number of segments streamed is 45. We let W= 6 and W′= W/2 if not otherwise specified. We assume an initial buffering time of 3 secs when determining whether 
a transmission unit misses its playback deadline. 
 
Table 2: Videos Used for Evaluations 
 
 
We consider the following performance metrics. 
l PSNR: received video quality in dB. 
l Running time: the time an algorithm takes to solve a scheduling problem. 
l Transmitted data amount: the total traffic amount in each simulation. 
 45 
MTS, we do not consider MTS in the remaining comparisons.  
 
To have a deeper look at how much the ad hoc network contributes to the success of the proposed systems, we 
show the transmitted data amount due to video streaming in Figure 13c. The amount of data transmitted 
through the cellular network by Current* is less than 10 MB regardless to the increasing number of devices. 
This is because the cellular network’s resources are used up. With a 70-device network, the achieved PSNR of 
THS is 20+ dB higher than that of Current*, because the data amount THS transmits in the hybrid network is 
more than 90 MB. This clearly shows the benefit of forming a hybrid network. 
 
Next, we plot the decodable segment ratio in Figure 13d. This figure shows that the fraction of decodable 
segments with Current* decreases from 99% (20 devices), to 83% (30 devices), and eventually to 42% (70 
devices). This reveals that without ad hoc networks, the cellular only network cannot even deliver the base 
layer units to all mobile devices, once the network is larger than 20 devices.  
 
Figure 13e plots the delivery ratio with different scheduling algorithms. During streaming, units scheduled for 
transmission are lost due to packet loss and missed deadline. It is observed that the schedulers employing 
hybrid networks lose more transmission units. There are two reasons: (i) the ad hoc network is more 
vulnerable for packet loss due to interference and mobility, (ii) with the schedulers employing the hybrid 
network, the average number of hops per unit is higher, which contributes a higher probability of the unit loss. 
Nonetheless, because ad hoc networks provide additional network capacity, after accounting for these lost 
units, POPT and THS algorithms still outperform Current*, both in terms of average video quality and quality 
variation among mo- bile devices, as shown in Figure 13a.  
 
Summarizing, the THS algorithm achieves almost optimal video quality and terminates in real-time. 
Therefore, we no longer present the results of Current* and POPT in the rest of this section.  
 
Mobility and Window Size. We first investigate the performance of the system with varied device speed 
when w and W′ are set to 6 and 3, respectively. The number of devices investigated is varied among: 30, 
50, and 70. Figure 14 shows that with W = 6 and W′ = 3, the PSNR achieved by the THS algorithm does 
not drop significantly when the nodes move faster. Its PSNR drops only 0.5 dB when the nodes’ speed 
increases from 2 m/s to 22 m/s. We attribute this merit to a short time period between two consecutive 
scheduling times (6 secs). This short time period allows the THS algorithm to adapt to the dynamic network 
conditions, and the ad hoc links are likely to remain connected.  
 
 47 
 
Figure 15: THS is sensitive to the maximum hop count setting 
 
TESTBED EXPERIMENTS 
We next report the experimental results gathered from a real testbed. We implement a Linux streaming server 
on a 2 GHz Pentium IV machine with 1 GB RAM. The server connects to the Internet via a Fast Ethernet link. 
We also implement a streaming client on Android, and deploy it on 5 Android smartphones. This testbed is 
located at University of California Irvine campus. The smartphones connect to the streaming server over 
T-Mobile 3G network, and are equipped with GPS readers. In our testbed, we adopt a location-based 
interference control method inspired by Evensen et al.. More precisely, a history database containing data 
rates at locations on our campus is built up at the streaming server. We employ the same videos used in earlier 
section (see Table 2). The server follows the traces to generate UDP packets. We stream a video in each 
experiment, but our testbed is general and can handle multiple videos concurrently. Each video is split into 
2-sec segments, each segment is encoded into 4 layers. We use W = 10 and W′ = W/2. The initial buffering 
time is 5 sec. We consider the following metrics: 
l PSNR: video quality in dB. We consider two PSNR metrics in this section. Expected PSNR indicates the 
video quality scheduled to be received at mobile devices by the scheduler. Received PSNR indicates the 
video quality achieved at mobile devices after transmissions. If not explicitly specified, by PSNR, we 
refer to received PSNR. 
l Decodable segment ratio: see earlier section. 
l Delivery ratio: see earlier section. 
l Delay: the average time duration for a unit to be delivered from the streaming server to mobile device.  
 
We first report the performance of the proposed THS algorithm. Figure 16a shows the average PSNR. In this 
figure, Current*, and Current* S refer to the received and expected PSNR values over the cellular-only 
network, respectively. Moreover, THS and THS S are the received and expected PSNR values of the THS 
algorithm, respectively. With both videos, the hybrid network outperforms the cellular network. The gap 
between THS and Current* when streaming Crew (8.6 dB) is higher than that of Star War (4.5 dB) because 
Crew has a higher bit rate. This shows that the ad hoc network significantly improves the video streaming 
quality, compared to cellular-only networks. Figure 16b partially explains why the cellular network suffers 
from such a low PSNR when streaming Crew: there are only 93% of decodable segments. Figure 16c depicts 
 49 
Table 4: Experimental Results from the Testbed: POPT vs THS Algorithms 
 
 
The experimental results from the actual testbed confirm the observations we made in Qualnet simulations: 
the THS algorithm clearly outperforms the Current* algorithm. Furthermore, the THS algorithm may 
outperform POPT in real systems, which can be attributed to the long running time of the POPT algorithm. 
This demonstrates that the THS algorithm is practical and efficient. 
 
CONCLUSION  
We studied the problem of optimally leveraging an auxiliary ad hoc network to boost the overall video quality 
of mobile users in a cellular network. We formulated this problem as an MILP problem to jointly solve the 
gateway selection, ad hoc routing, and video adaptation problems for a global optimum schedule. We 
proposed three algorithms: (i) an MILP-based algorithm, POPT, (ii) an LP-based algorithm, MTS, and (iii) a 
greedy algorithm, THS. Via packet-level simulations, we found that neither POPT nor MTS scale to large 
hybrid networks. This is because they both employ numerical methods to solve optimization problems. 
Therefore, we recommend the THS algorithm, which terminates in real-time even when there are 70+ mobile 
devices in the hybrid network.  
 
The simulation results indicate that the THS algorithm not only runs fast, but also achieves overall video 
quality close to the optimum: at most 2-dB difference is observed, compared to the POPT algorithm. In 
contrast, optimum schedules over the cellular network achieves much lower video quality compared to POPT: 
more than 15 dB difference is observed. We also validated the practicality and efficiency of the THS 
algorithm using a real testbed in a live cellular network. The experimental results confirm that the THS 
algorithm result in high video quality. Moreover, the THS algorithm could outperform the POPT algorithm in 
real systems. This is because although POPT could generate optimal schedules, its high running time may 
lead to many late segments, which in turn render inferior video quality.  
 
We believe that massive delivery of rich information is useful in a range of mission critical scenarios such as 
military command-and-control and emergency response applications where existing infrastructure may be 
damaged, inaccessible, or overloaded. For example, customized notifications in emergency alerting situations 
will make it possible for users to receive rich alerts (such as evacuation maps and traffic routes) based on their 
current context for a more effective response. The ability to combine multiple infrastructure and ad hoc 
connections to achieve faster and improved information exchange on a societal scale, as demonstrated in this 
report, is key to enabling richer mobile applications for the future. 
 
II. Energy-Aware Clustering. 
IMPLEMENTATION: A PROOF-OF-CONCEPT  
We have implemented HybCAST in C and Java to demonstrate its practicality and efficiency. The server 
 51 
 
Figure 19: Battery Life – HybCAST implementation vs. baseline system 
 
Reliability: Our results (Figure 17) show that HybCAST achieves 100% reliability under all data sizes, while 
the baseline system exhibits only 60% reliability, i.e., only 3 out of 5 smartphones get the file, when data file 
is larger than 1.5 MB.  
 
Latency: Figure 18 reports the latency. The figure shows that the baseline system suffers from a much longer 
latency, about 7 times longer than HybCAST. We note that the latency of HybCAST already included the 
time of enabling the 802.11 interface upon receiving metadata message over the 3G network.  
 
Energy consumption: We conduct the following experiments to study the implications of HybCAST on 
battery life. We fully charge the smartphones, and repeatedly disseminate a 1 MB data file until the battery 
level is below 15%. We report battery levels measured from the same smartphone, as batteries have diverse 
discharge patterns. We set the screen brightness at 50%. We record the battery level after each dissemination 
round; in each round a data file is fully disseminated to all smartphones. We consider the baseline system, and 
divide smartphones into CHD and nonCHD when using HybCAST for dissemination. We present the results 
in Figure 19. This figure shows that the battery of a HybCAST nonCHD lasts 6.84 times longer than that of a 
baseline system. However, we notice that a HybCAST CHD has an inferior battery life, about 49% of the 
baseline system, which is attributed to the 802.11 power consumption. Nevertheless, the average energy 
consumption across all five smartphones is much lower than the baseline system. We also employ the 
battery-biased network structuring policy described earlier, and we denote its CHDs’ energy consumption as 
PowerAware in Figure 19. This figure shows that, with PowerAware, even CHDs results in 1.84 times longer 
battery life than the baseline system. This alleviates the concerns of additional energy consumption caused by 
enabling the 802.11 interface. 
 
SIMULATION BASED EVALUATION  
While the proof-of-concept implementation shows the practicality of HybCAST, we acknowledge that the 
experimental results are limited by the number of smartphones. To cope with this limitation, we conduct 
large-scale simulations to evaluate HybCAST under diverse network conditions. 
 
Settings 
We have implemented HybCAST in a well-known packet-level simulator: Qualnet 5.0. In all simulations, 
 53 
 
 
Figure 21: HybCAST results shortest latency with any content size 
 
 
Figure 22: HybCAST incurs low overhead with any content size 
 
 
Figure 23: HybCAST conserves energy even two interfaces enabled 
 
 55 
shows that HybCAST consumes the least energy. This is because faster dissemination and lower overhead 
allow mobile devices to put their network interfaces into sleep more often for higher energy saving.  
 
Impact of mobile device density (Figure 24 and Figure 25): We vary the number of devices in the network 
from 20 to 70, and disseminate a 1 MB content. All simulations achieve 100% reliability. We plot the latency 
in Figure 24, which shows that Cell_PushPull incurs long latency up to 8 minutes to deliver the content to 70 
devices. VideoAds achieves a better latency than Cell_PushPull only in dense networks. In contrast, 
HybCAST constantly achieves the shortest latency: less than 1 minute. Our results show that VideoAds 
suffers from a significantly higher overhead than the other two systems, which is consistent with Figure 22. 
Figure 25 shows that Cell_PushPull consumes up to 3 times more energy than HybCAST, and VideoAds 
consumes up to 6 times. This figure is consistent with Figure 23.  
 
Impact of mobility (Figure 26): We vary the maximum speed from 3 to 18 m/s and disseminate a 1 MB 
content. We investigate the performance of HybCAST with 30-, 50-, and 70-device networks. All simulations 
achieve 100% reliability. Figure 26 reports the achieved latency as the speed changes. This figure shows that 
HybCAST is scalable against node speed: increasing speed by six folds from 3 to 18 m/s only increases 
latency by about 10 seconds, which is merely a 10% increase. This is because connectivity between clusters is 
well maintained against mobility due to the existence of multiple links between them. 
 
 
Figure 26: HybCAST is scalable against node mobility 
 
Energy consumption at CHDs and Policy (Figure 27): HybCAST’s default policy uses the cellular data rate 
to select CHDs (i.e., 𝑤! = 0, 𝑤! = 1). This may lead to faster battery draining of CHDs than that of 
nonCHDs because CHDs not only receive data over the cellular network but also relay the data over the 
802.11 ad hoc network. In this section, we study the impact of a power aware policy for CHD selection (i.e., 𝑤! = 1, 𝑤! = 0), which is denoted as PowerAware in the figures. We perform 100 dissemination rounds in a 
static 70-device network. In each round, the server disseminates a 5 MB content. Figure 27 compares two 
policies: default and PowerAware. With PowerAware, mobile devices take turns to be CHDs and thus 
consume roughly the same amount of energy: 3,667 J for 100 dissemination rounds (i.e., 500 MB). With the 
default policy, a device on average consumes less energy: only 2,153 J. This is because when CHDs are 
selected with high cellular date rate, dissemination terminates earlier, which leads to lower overall energy 
consumption. In particular, the default policy takes only 174 seconds on average to deliver a 5M content to 70 
 57 
accept/reject decision. Second, the transmission scheduling procedure in Algorithm 2 keeps track of the 
backlogs of virtual and real queues on mobile APs. Once a mobile AP sends a STOP message, the 
corresponding mobile device stops transmitting data to that mobile AP. Since MAPA algorithm does not 
require synchronized timers, it can be readily implemented in the CrowdMAC system.  
 
We deploy our system on multiple types of Android phones: a Samsung Galaxy SII as a mobile AP 
connecting to the T-Mobile network, and four mobile devices including Google Nexus, Nexus S, HTC Nexus 
One and Motorola Atrix. The phones run Android OS versions from 2.3.6 to 4.0.4. They are placed in a 
labroom with no mobility and connect to each other over a WiFi peer-to-peer network using WiFi Tether. The 
mobile AP is equipped with a data plan of $30 for 5 GB, and it charges $5 per GB for local resource 
consumption. The T-Mobile network is measured to have bandwidth between 311 and 748 Kbps throughout 
our experiments. In each experiment, each mobile device uploads 50 equal-sized files. For each file, a mobile 
device sends a request to the mobile AP and waits for its decision. If the request is rejected, the mobile device 
waits for 2 secs before it resends the request. The mobile device skips the current file if its request is rejected 
for 5 times. 
 
Experimental Results  
We consider two metrics: (i) Revenue, which is the total revenue generated by the service in each experiment, 
and (ii) Transfer delay, which is the average per-file transfer time, from the instant a request is admitted to the 
instant when the last packet is transferred.  
 
 
Figure 28: Tradeoff due to diverse V values: (a) revenue and (b) transfer delay. Diverse user-specified delay quality level: (c) 
revenue and (d) transfer delay 
 
Reliable transfer. We repeat the experiments with various parameter V ∈ [0, 1500], and we consider two file 
sizes: 512 KB and 1 MB. Across all experiments, we find that all the admitted requests lead to successful file 
uploads. This confirms that the proposed CrowdMAC system and MAPA algorithm do work.  
 
Trade-off between revenue and transfer delay. Figure 28a and Figure 28b present the revenue and transfer 
delay, respectively, under different V. This figure shows that smaller V leads to fewer admitted requests, and 
thus lower revenue. Furthermore, fewer admitted requests means lighter-loaded networks, and thus shorter 
transfer delay. For example, with V = 10, the mobile AP only admits half of the 512 KB files at the end; while with V = 1000, the mobile AP admits all the requests. This indicates the effectiveness of V: the MAPA algorithm 
supports wide ranges of revenues and transfer delays.  
 
 59 
mobile device sequentially transfers 50 equal-sized files. We conduct each simulation with two file sizes: 512 
KB and 1 MB.  
 
Generality of the MAPA algorithm. We compare MAPA against two heuristic algorithms: HEU! and HEU!, which optimize for revenue and service quality, respectively. More specifically, HEU! tries to accept 
as many requests from mobile devices as possible, in order to maximize its revenue. In contrast, HEU! 
attempts to provide high service quality, and only accepts the first request. Table 5 shows the results from the 
two heuristic algorithms. MAPA employs a system parameter V to tradeoff revenue and service quality. We 
repeat the MAPA simulations with V ∈ [0, 2000] and find that HEU! and HEU! achieve similar revenue, 
profit, and end-to-end delay as MAPA with V = 10 and V = 2000, respectively. Hence, MAPA is a general 
algorithm for diverse quality-of-service needs.  
 
Table 5: Comparison between the two heuristic algorithms 
 
 
 
Figure 29: Trade-off between revenue and transfer delay under different V values: (a) revenue and profit and (b) transfer delay for 
512 KB file transfers; (c) revenue and profit and (d) transfer delay for 1024 KB file transfers 
 
 
Figure 30: Trade-off controlled by diverse delay quality levels: (a) revenue and profit and (b) transfer delay for 512 KB file transfers; 
(c) revenue and profit and (d) transfer delay for 1024 KB file transfers 
 
Trade-off between revenue and transfer delay. We plot the resulting revenue and transfer delay for 512 KB 
file transfers in Figure 29a and Figure 30a. Figure 29a shows that, with a small V, service A achieves higher 
 61 
3) Segmentation: The performance achieved by using technique File Segmentation for handling mobility.  
4) Segmentation + Prediction: The performance of the combination of two techniques: File 
Segmentation and Mobility based Service Selection.  
 
 
Figure 31: Results from mobile scenarios: (a) cost that a mobile device pays to download all files; (b) delay that a mobile device 
takes to download a file; (c) number of interruptions a mobile device suffers during a file’s download; and (d) traffic overhead 
generated of our system. 
 
Mobility with Random Waypoint model 
We examine how CrowdMAC works against mobility using the Random Waypoint model. We set up a 700 × 
700 𝑚! network with 40 devices. Among these devices, there are 8 stationary mobile APs connecting to a 
WiMAX base station and offering Internet access services. The other mobile devices travel with Random 
Waypoint model unless otherwise specified and download 50 files with a size of 512 KB. A mobile device 
downloads only one file each time, and starts the next download 30 secs after it finishes the previous one. 
Mobile APs are randomly placed in the network such that they cover about 65% of the network area. Some 
mobile APs are placed overlapped such that a mobile device can have a chance to discover more than one 
mobile AP. We configure all mobile APs to use the same cost functions 𝑆! and 𝑆! (i.e., totally $11 per GB). 
Unless otherwise specified, mobile devices select service using cost based strategy.  
 
Figure 31a shows that No Segmentation pays the highest cost up to 42 cents to download the files, i.e., 16 
cents higher than Ideal, at the speed of 18 m/s. It is because the increase of the speed leads to a higher link 
breakage frequency and a higher amount of data which is downloaded to the real queue yet transferred to the 
mobile device. The Segmentation technique significantly improves the performance. Segmentation leads to 
the cost close to Ideal, only 1 cent higher to download 25 MB at the high speed of 18 m/s. Segmentation + 
Prediction even reduces the cost more, approximately equal to Ideal at that speed.  
 
Figure 31b shows that the end-to-end delay of No Segmentation is approximately twice higher than that of 
Segmentation. Segmentation + Prediction further reduces the end-to-end delay to 2 secs shorter than that of 
Segmentation. The higher end-to-end delay can be attributed to more link breakages due to the mobility. We 
plot the number of interruptions in Figure 31c, which confirms our conjecture. Last, Figure 31d reports the 
relative overhead achieved by different techniques. This figure clearly shows that CrowdMAC produces 
negligible traffic overhead. It also reveals the effectiveness of File Segmentation.  
 
Impact of the incentive mobility. We have shown that CrowdMAC works well even when mobile devices 
follow Random Mobility model. Next we consider a more realistic mobility model, Incentive Mobility Model. 
In this model, the mobile devices, after selecting services, try to keep the links between themselves and the 
 63 
Table 7: End-to-end delay of downloading a 10 MB file 
 
 
CONCLUSIONS  
In this report, we showed how to design and implement a middleware framework that incorporates a 
Lyapunov based admission control algorithm for mobile APs to serve multiple requesting mobile devices 
optimally and stably, strategies for mobile devices to select mobile APs appropriately, and techniques for 
handling device and AP mobility. CrowdMAC has been implemented and evaluated on a testbed of diverse 
Android phones with varying capabilities indicating feasibility of the approach. Our experimental and 
simulation results show that CrowdMAC: (i) effectively exercises the trade-off between revenue and transfer 
delay, (ii) adequately satisfies user-specified (delay) quality level, and (iii) properly adapts to device mobility 
and achieves performance very close to the ideal case (upper bound). Creating localized networks to support 
data exchange is becoming a commodity technology. We believe that the ability to crowdsource/share local 
wireless access can offer a new perspective that may change the scale and scope of mobile data delivery just 
as VoIP has changed the landscape of telephony today. 
	 
References 
[1] H. Luo, R. Ramjee, P. Sinha, L. Li, and S. Lu, “UCAN: a unified cellular and ad-hoc network architecture,” 
in Proc. of ACM International Conference on Mobile Computing and Networking (MobiCom’03), San 
Diego, CA, September 2003, pp. 353–367. 
[2] H. Hsieh and R. Sivalumar, “On using peer-to-peer communication in cellular wireless data networks,” 
IEEE Transactions on Mobile Computing, vol. 3, no. 1, pp. 57–72, March 2004. 
[3] J. Park and S. Kasera, “Enhancing cellular multicast performance using ad hoc networks,” in Proc. of IEEE 
Wireless Communications and Networking Conference (WCNC’05), New Orleans, LA, March 2005, pp. 
2175–2181. 
[4] R. Bhatia, L. Li, H. Luo, and R. Ramjee, “ICAM: Integrated cellular and ad hoc multicast,” IEEE 
Transactions on Mobile Computing, vol. 5, no. 8, pp. 1004–1015, August 2006. 
[5] L. Lao and J. Cui, “Reducing multicast traffic load for cellular networks using ad hoc networks,” IEEE 
Transactions on Vehicular Technology, vol. 55, no. 3, pp. 317–329, May 2006. 
[6] L. Law, K. Pelechrinis, S. Krishnamurthy, and M. Faloutsos, “Downlink capacity of hybrid cellular ad hoc 
networks,” IEEE Transactions on Networking, vol. 18, no. 1, pp. 243–256, February 2010. 
[7] E. Stanley and J. Sutton, “Public response to alerts and warnings on mobile devices,” The National 
Academics, April 2011. 
 65 
networks. In Proc. of ACM CHANT, pages 43–48, Las Vegas, NA, February 2011. 
[23] Foxfi. http://foxfi.com/, January 2013. 
[24] Open garden. http://opengarden.com/, January 2013. 
[25] G. Ananthanarayanan, V. Padmanabhan, and L. Ravindranath. COMBINE: Leveraging the power of 
wireless peers through collaborative downloading. In Proc. of MobiSys, pages 286–298, San Juan, Puerto 
Rico, June 2007. 
[26] R. Chakravorty, S. Agarwal, S. Banerjee, and I. Pratt. MoB: a mobile bazaar for wide-area wireless services. 
In Proc. of ACM MOBICOM, pages 228–242, Istanbul, Turkey, August 2005. 
 67 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以 500
字為限）	 
	 
本計劃至今已產生3篇期刊論文,11篇研討會論文,與5篇海報摘要 (摘列如下).由此足見
本計劃之成效卓越.此外, 本計劃已有效率的培養六位碩士級研究助理. 相信這些學生在
將來能對本計劃, 甚而對台灣產業界產生直接與間接的貢獻. 
 
• S. Nirjon, A. Nicoara, C. Hsu, J. Singh, and J. Stankovic, “MultiNets: A system for 
real-time switching between multiple network interfaces on mobile devices,” ACM 
Transactions on Embedded Computing Systems, Accepted to appear, May 2013. 
• N. Do, C. Hsu and N. Venkatasubramanian, “Video dissemination over hybrid cellular and 
ad hoc networks,” IEEE Transactions on Mobile Computing, Accepted to appear, 
November 2012. 
• Y. Wang, T. Lin, C. Hsu, and X. Liu, “Region- and action-aware virtual world clients,” 
ACM Transactions on Multimedia Computing, Communications, and Applications, vol. 9, 
no. 1, pp. 6:1-6:21, February 2013. 
• C. Huang, D. Chen, C. Hsu, and K. Chen, “GamingAnywhere: an open-source cloud 
gaming testbed,” in Proc. of ACM International Conference on Multimedia 
(Multimedia’13), Barcelona, Spain, October 2013, OSS Paper. 
• Y. Li, C. Chen, T. Lin, C. Hsu, Y. Wang, and X. Liu, “An end-to-end testbed for scalable 
video streaming to mobile devices over HTTP,” in Proc. of IEEE International Conference 
on Multimedia  and Expo (ICME’13), San Jose, CA, July 2013. 
• T. Lin, T. Lin, C. King, and C. Hsu, “Context-aware decision engine for mobile cloud 
offloading,” in Proc. of IEEE Workshop on Mobile Cloud Computing and Networking 
(MCC’13), Shanghai, China, April 2013, pp. 111-116. 
• C. Liao and C. Hsu, “A detour planning algorithm in crowdsourcing systems for 
multimedia content gathering,” in Proc. of ACM Workshop on Mobile Video (MoVid’13), 
Oslo, Norway, February 2013, pp. 50–60. 
• C. Huang, C. Hsu, Y. Chang, and K. Chen, “GamingAnywhere: An open cloud gaming 
system,” in Proc. of ACM SIGMM Conference on Multimedia Systems (MMSys’13), 
Oslo, Norway, February 2013, pp. 36–47. 
• N. Do, C. Hsu, and N. Venkatasubramanian, “CrowdMAC: A crowdsourcing system for 
mobile access,” in Proc. of ACM/IFIP/USENIX International Conference on Middleware 
(Middleware’12), Montreal, Canada, December 2012, pp. 1–20. 
	 
□ 赴國外出差或研習 
□ 赴大陸地區出差或研習 
þ 出席國際學術會議 
□ 國際合作研究計畫出國 
心得報告 
計 畫 名 稱 為多網路智慧手機設計之高
效能多媒體傳播平台 
計 畫 編 號 
100-2218-E-007-015-MY2 
報 告 人 
姓 名 徐正炘 
服 務 機 構 
及 職 稱 
國立清華大學資工系, 助理
教授 
會議/訪問時間 
 地點 
挪威, 奧斯陸, 民國 102年 2月 27日至 102年 3月 1日 
會 議 名 稱 ACM Multimedia Systems Conference 2013 (ACM MMSys’13) and ACM Mobile Video 2013 (ACM MoVid’13) 
發表論文題目 
（檢附論文檔案） 
(1) GamingAnywhere: An Open Cloud Gaming System (MMSys’13) 
(2) A Detour Planning Algorithm in Crowdsourcing Systems for Multimedia 
Content Gathering (MoVid’13) 
 
一、主要任務摘要（五十字以內） 
 
I attend MMSys/MoVid for two reasons. First, I publish two papers there, and have to 
present the paper and hopefully get some constructive feedbacks from the audience. Second, 
I’m the TPC Co-Chair of MoVid, and I need to host the workshop. On top of these two 
reasons, I also look forward to meet the ACM SIGMM colleagues and get to know the latest 
developments in Multimedia Systems. 
 
二、對計畫之效益（一百字以內） 
 
The two papers I presented are partially sponsored by this NSC project. They both can be 
considered as potential applications on the multihomed streaming platform for smartphones. 
For example, the GamingAnywhere paper develops a cloud gaming platform that 
outperforms the state-of-the-art cloud gaming systems. By leveraging multiple network 
interfaces on smartphone, a GamingAnywhere client can achieve even higher gaming 
quality, which is one of our current tasks. As for the geospatial information gathering paper, 
employing multiple network interfaces of smartphones used by workers may save teleco 
costs on them and potential achieve better streaming quality. We are also looking into this 
possible extension.  
 
三、經過 
 
The two workshops (MoVid and NOSSDAV) are held on the first day. As a TPC Co-chair, I 
am pretty occupied the whole day. In the workshop opening, I present some statistics about 
the workshop this year, and Carsten (University of Oslo, the general chair of MMSys this 
year) describe all the logistics such as conference room locations. We have one technical 
session in the morning, followed by a joint keynote with NOSSDAV. The keynote speaker is 
from Disney Research, and he presents quite some cool facts about 3D filming they have 
learned from experiences. In the afternoon, we have two technical sessions, separated by a 
one-hour panel discussion. The panel discussion is organized by Shivajit (Motorola 
run into more colleagues during MMSys, such as Klara (University of Illinois) and Ali 
Began (Cisco Inc.). Overall, a very nicely organized event.  
 
四、心得 
 
We receive very positive feedback for both of our papers. For the MoVid paper, we look 
forward to collaborate with Prof. Roger Zimmerman’s group at National University of 
Singapore. For the MMSys paper, we will continue our collaboration with Prof. Huang 
(National Taiwan Ocean University) and Prof. Chen (Academia Sinica), and I’m sure our 
collaboration will be fruitful.  
 
I have been the TPC Co-chair of MoVid for two consecutive years. It has been a very nice 
experience, and I learned a lot from other colleagues on how to organize the 
conferences/workshops. More importantly, I get to know many more colleagues in SIGMM 
while organizing the events. I look forward to working with them on organizing other 
conferences/workshops in the near future. 
 
五、建議與結語 
 
The conference travel goes very well, and I successfully deliver two presentations and host a 
full-day workshop. The social events are well organized and I get to meet new colleagues in 
this field as well as well-known scholars. I also closely work with my student, Hua-Jun 
Hong, at National Tsing Hua University over Skype, during that week. It turns out that Mr. 
Hong finishes his paper before the submission deadline; so we didn’t waste a week for the 
conference. 
 
六、攜回資料 
 
The Proceedings of ACM MMSys 2013, ACM MoVid 2013, ACM NOSSDAV 2013 in 
a USB drive.  
 
 打字編印注意事項 
1. 用紙 
使用 A4紙，即長 29.7公分，寬 21公分。 
2. 格式 
中文打字規格為每行繕打（行間不另留間距），英文打字規格為 Single Space。 
3. 字體 
報告之正文以中英文撰寫均可。在字體之使用方面，英文使用 Times New  
  Roman Font，中文使用標楷體，字體大小請以 12號為主。 
4. 文字內序號請依下列順序編列 
  一、 
   （一） 
   1.  
   (1)  
   A.  
   (A)  
   
 
100年度專題研究計畫研究成果彙整表 
計畫主持人：徐正炘 計畫編號：100-2218-E-007-015-MY2 
計畫名稱：為多網路智慧手機設計之高效能多媒體傳播平台 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 6 6 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 3 3 50%  
研究報告/技術報告 5 5 33%  
研討會論文 11 11 80% 
篇 
(1) IEEE RTAS'12 
Best Paper Award 
and (2) IEEE 
GLOBECOM TAOS 
Best Paper Aware
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
