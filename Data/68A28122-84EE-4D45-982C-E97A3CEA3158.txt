 2
一、簡介 
在普及計算(Pervasive computing)、無所不在計算(Ubiquitous computing)或環境智慧
(Ambient intelligence)等研究領域中，情境感知計算(Context-aware computing)是一項相當重
要的研究主題。情境感知系統(Context-aware system)的主要目的是希望達到自動感知使用者
的即時地點、狀況，用以預測或判斷使用者的意圖或需求，然後適時、適地的提供適當可
行的服務。在應用方面，主要的情境感知系統包括有家庭生活(Smart home)、居家安全(Home 
security)、辦公環境(Smart Office)、健康照護(Health care)、購物娛樂、文化藝術展演與欣賞
及行動學習(Mobile e-learning)等諸多領域。 
使用情境感知計算技術來達成智慧環境或行動服務的時候，使用者對人機介面有較高
的需求，因此使用者的行動與環境的變化與互動，均以情境資料(Context)來描述與運作。
為了要能透過情境資料的描述，使情境感知系統獲知使用者與目前所處環境的相關情境，
並進而採取適當的回應來滿足使用者的需求，需要的技術層次所涵蓋的範圍相當廣泛，包
含：感知器(Sensors)的設定、情境原始資料的蒐集擷取(Context acquisition) 、情境資料處
理與解譯(Context interpretation)、情境儲存與管理(Context storage and management)、應用服
務(Application Service)使用者介面等各種不同層次的技術。為了整合以上的各種技術，傳統
情境感知系統在架構上是採用緊密結合(Tightly coupled)的設計方式，針對單一特定系統的
服務需求、環境與對象，由感知器、驅動程式、情境定義到執行系統等，各個層次均特別
訂製、各層完全相依結合。這樣的系統構建方式在雖然在效能與系統完整性上有很好的表
現，然而當需求、對象或環境有所變動時，此一系統便無法提供正常的服務，同時也不易
維護；加上系統的可移植性太低，不利於相似應用系統的建構與普及。 
為了解決系統建構不易，以及避免特定硬體設備與開發軟體的相容性問題，一般化情
境感知系統服務平台(Generalized Service platform)是近年來的主要研究議題之一；而有關情
境感知系統服務平台的問題中，我們發現無論有關情境資料的擷取(Context extraction)與解
譯(Context interpretation)、系統服務的驅動(Service activation)與觸發(Trigger)，或是系統中
情境衝突(Context conflict)的感知偵測與各種情境不一致(Context inconsistency)的認知等研
究子題，有關機器學習技術中的學習方法、學習模型等，都能提供不錯的解題概念與解題
策略。因此，如何運用機器學習的相關技術來協助構建與發展情境感知系統服務平台，用
以提升情境環境應用系統的構建效能與增強情境系統的調適能力，對於生活情境感知研究
領域及機器學習技術研究領域而言，均是非常值得深入探討的議題。 
 
二、研究目的 
有關情境感知應用系統的開發，通常只能符合單一型態的應用，系統也僅配合特定環
境而設計，並沒有考量日後各方面可能的擴充，缺乏延展性與客製化能力。本計畫中，我
們提出一如圖 1 所示的一般化情境感知服務系統平台(A generalized intelligent context-aware 
service platform)，整體系統包含：感知器(Sensor)與致動器(Actuator)、相關的設備管理子系
統(Sensor manager & Actuator manager)、情境解譯器(Context Interpreter)、設備環境與使用
者的領域知識(Domain Knowledge)、情境資料庫(Context Database)、情境管理模組(Context 
management)與服務提供者(Service Provider)等元件。主要目的為達成以下幾項主要功能： 
1. 提供情境資訊解譯器與服務供應者的一般化建構方法與介面工具。 
2. 情境不一致的偵知與解決，以及情境衝突的避免等協調管理功能。 
3. 主動的情境資訊偵測與情境服務發現等能力。 
原計畫預訂三年完成，然而在計畫通過以一年執行的情形下，本計畫調整為針對第一年的
研究子題目標：一般化情境資訊解譯器與服務供應者介面工具系統，構建智慧型情境資訊
解譯與服務提供之介面及相關功能，主要包含：情境建構工具(Context constructor)、服務提
供編輯工具(Service provider)、一般化情境解譯器(Generic context interpreter)、感應器與情
境綱要映對(Sensor-Context schema mapping)等功能。 
 4
 
圖 2：綱要配對方法分類  
四、研究方法 
在目前所知的系統與研究中，不同的感知器通常需要撰寫不同的情境解譯器(Context 
interpreter)軟體或程式來解譯感知器的情境資訊，這是造成情境感知系統不易維護與移植性
不高的主因。本計畫提出直接以情境解譯器述語(Context Interpretation Script)來描述解譯器
的映對語意，並透過一般解譯器來做情境資訊的產生，所完成的一般化情境解譯器架構如
圖 3，主要包括四個部分，簡單說明如下： 
 
1. 解譯器產生器(Interpretation Generator)：由情境映對編輯器(Context mapping editor)、映
對運算元(Mapping Operator)、情境綱要映對器(Context schema Mapper)所構成。主要利
用情境映對編輯器建立感測資料及情境模型間的映對關係，產生用以解譯情境資訊意義
的 Context Interpreter Script。 
2. 情境綱要映對器(Context Schema Mapper)：XML 綱要配對演算法，用於配對搜尋感測器
資料綱要(Sensor data schema)及情境模型綱要(Context Model Schema)，用以自動找出最
佳之情境配對。我們在此提出了一結合元素名稱(Element name)、資料型態(Data type)與
綱要結構(Schema structure)的綱要相似度計算配對器，稱為 Similarity Yield Matcher，簡
稱 SYM。 
 
圖 3：一般化解譯器之架構 
Schema Matching Approaches
Combining matchers 
Schema-only based 
Structure-levelElement-level 
Instance/contents-based
Constraint-base Constraint-base
… … … 
Element-level
Constraint-based
… …
Hybrid Matchers Composite Matchers 
 Further Criteria: 
   -Match Cardinality 
   -Auxiliary information used… •Word frequencies•Key terms •Graph matching•Type similarity •Key properties •Value pattern and ranges
Sample Approaches 
Manually:
-Iterative  
-user feedback 
Automatically:  
-matcher selection
-result 
-combination 
•Name similarity •Description similarity •Global namespaces 
Individual matcher approaches
Linguistic Linguistic
Raw data 
Context
Sensor 
Driver Context Editor 
Interpretation
Scripts 
Generic 
Interpreter 
Mapping 
History 
Mapping 
Operators
Context 
Schema 
Mapper
Sensor 
data 
model ...
Interpreter Generator 
Context model
 6
  
圖 4-5：自動映對選用排名第一的綱要    圖 4-6：自動映對選用排名第二的綱要 
四、實驗結果與討論 
本計畫針對所發展的自動綱要配對演算法進行正確率與速度上的效能評估與測試，我
們預計採用 XbenchMatch 中所提供的 Benchmark 資料來進行測試，並且將分別與
COMA++、Cupid 及 Similarity Flooding 等三種著名的不同方法來做正確率與執行速度的比
較，實驗結果列出如表 2。 
 
表 2：自動綱要配對演算法於 XbenchMatch 的結果 
Accuracy Time Methods vs. Schema 
Precision Recall F-measure Time(sec.) 
University 1.0000 0.5375 0.7000 0.145 
Person 1.0000 0.6000 0.7500 0.074 
Student 1.0000 1.0000 1.0000 0.122 
PO 1.0000 1.0000 1.0000 0.166 
SYM 
(LDT-NW) 
average 1.0000 0.7845 0.8625 0.127 
University 1.0000 0.6148 0.7620 7.828 
Person 0.6000 0.6000 0.6000 2.948 
Student 0.8300 1.0000 0.9070 3.125 
PO 1.0000 1.0000 1.0000 5.625 
Cupid 
(LDT-W) 
average 0.8575 0.8038 0.8173 4.882 
University 0.8750 0.5375 0.6667 0.776 
Person 1.0000 1.0000 1.0000 0.672 
Student 0.5000 0.6000 0.5454 0.738 
PO 0.6000 0.8570 0.7058 0.665 
COMA++ 
average 0.7438 0.7488 0.7295 0.71275 
University 1.0000 0.4615 0.6315 0.016 
Person 0.0000 0.0000 0.0000 0.016 
Student 0.8000 0.8000 0.8000 0.016 
PO 1.0000 0.1428 0.2500 0.016 
Similarity 
Flooding 
average 0.7000 0.3518 0.4204 0.016 
 
針對每個配對方法討論如下： 
 Cupid 分數調動非常地頻繁，但對於配對的選擇並不具有相對的影響力，其主要以字
典在進行配對，所以相對地消耗較多的時間。 
 COMA++利用組合式的配對器，未使用 WordNet 字典也未使用兄弟節點的配對，其在
Person 的 Domain 下計算(person_name↔firstName)與(person_name↔lastName)所得到
的分數相同，產生了 1 對 2 的配對組合，並取出了(person_date_of_birth↔birthDate)，
若 是 於 Person00 中 增 加 新 的 項 目 如 ： animal_date_of_birth ， 其 也 會 取 出
(animal_date_of_birth↔birthDate)配對分數與(person_date_of_birth↔birthDate)相同。 
 8
我們首先測試 SYM 及 SYM-Dict 的檢索效能，依據表 5 中的實驗結果，可得出以下之
結論： 
 
 SYM 及 SYM-Dict 方法兩個方法的差別在於 WordNet 字典的使用，其時間相差超過 40
倍，顯示以 WordNet 字典進行語意比對是非常消耗時間的。 
 由觀察，花費最少時間進行比對的是 Temp2 綱要，其綱要相似度最少，表示 Temp2 內
部的元素名稱與其他綱要內部的元素的名稱皆有相似處，這代表其查詢 WordNet 字典
的次數較少，且其總節點個數也是所有綱要中最少的，故計算時間最少，顯示了兩綱
要的總節點數量以及節點之間的語意相似程度皆會影響到整體配對的運算時間。 
 兩筆綱要之間的相似度並不具有對稱性，如 Temp2 認為與自己最相似的綱要為 Light，
因彼此之間的元素名稱較為相似，但 Light 卻不認為 Temp2 是與自己相似的綱要，反
而認為與 IR 較為相似，因兩者內部的結構及元素名稱相似度更高。故基於此非對稱關
係，可觀察出 SYM 方法會根據綱要之結構及內容元素名稱檢索出與自身最相似的歷史
綱要，達到相關歷史資料重複使用的目標，進一步節省使用者操作情境映對編輯器的
時間。 
 以 SYM-Dict 及 Cupid 方法而言，透過 WordNet 字典所進行的配對分數會較為偏高，
以 Light 綱要與 Sensor 及 Temp2 的配對而言 SYM-Dict 與 Cupid 會認為
(MF↔manufacturer)的配對分數較 SYM、COMA++配對出的分數來得高，因而會產生
兩綱要內部之元素名稱不相同但配對分數高的情況，進而影響整體的排名順序，所以
在 SYM-Dict 與 Cupid 的方法中 Sensor 綱要的排名會較 Temp2 來得前面，以實際配對
的情況而言，配對數量較多的綱要其綱要相似度並不一定會較高。 
 以 Cupid 方法而言，可觀察出其所花費的檢索時間最長，且其所求得的綱要相似度較
缺乏鑑別度(為 0 的值很少)，可得知 Cupid 整體的檢索效率其實是比 SYM-Dict 還要差
的，只是在檢索綱要的排名上較 SYM-Dict 好一些。 
 而 SYM-Dict 方法得到的平均 Rnorm值為最小，表示 SYM-Dict 對於兩綱要之間的相似
度程度無法做出準確的判斷，其使用的決策樹語意比對方式，在使用到 WordNet 進行
配對的時候，有機會將兩綱要內元素名稱不同的項目配對出較高的相似度，導致綱要
相似度相對提高，進而影響整體的排名順序。就實際應用的層面而言，若各個歷史綱
要內的元素名稱皆與新綱要內的元素名稱不相同，此時 SYM-Dict 才顯得有用。 
 在 IR 綱要的檢索中，SYM-Dict、Cupid 及 COMA++皆認為 IR 綱要可與 GPS 綱要產生
(Producer↔manufacturer)配對，但不認為可與 Light 及 Humid 綱要配對出(Producer↔MF)
及 (Producer↔Manufact) ， 而 SYM 則 是 透 過 加 分 機 制 得 到 (Producer↔MF) 及
(Producer↔Manufact)配對，可見 SYM-Dict 及 Cupid 對於鄰近節點分數的提升仍是不
足，而 COMA++則是不具有鄰近節點加分之功能，因此 SYM-Dict、Cupid 及 COMA++
會將 GPS 視為排名較高之綱要。以資料型態的配對而言，GPS 內之元素 date(xs:string)、
value(xs:string)的資料型態與 IR 內之元素 date(xs:date)、value(xs:boolean)的資料型態其
實並不吻合，因此 GPS 綱要所得到的綱要相似度及排名應是較低的，而 SYM-Dict、
Cupid 及 COMA++的方法中 GPS 綱要的配對比起其他的綱要多了一組配對項目的分
數，進而導致 GPS 的排名較高並產生錯誤的排名順序。另外 COMA++在檢索 RFID 綱
要時，Temp2 內的 value(xs:decimal)與 RFID 內的 value(xs:string)其實是錯誤的配對，
但COMA++卻找出這個錯誤的配對導致Temp2綱要的排名順序較高，亦可見COMA++
對於資料型態配對的比重放得較少。 
 
由以上的實驗結果證實，SYM 確實可以在最短的時間內進行綱要的檢索，並且產生最適當
的排名順序，因 SYM 會依照兩綱要之間的元素名稱、資料型態以及綱要結構進行相似度的
判斷，故在實際的應用上可幫助使用者檢索出最相似的綱要。 
 
R.-S. Chang et al. (Eds.): GPC 2010, LNCS 6104, pp. 91 – 100, 2010. 
© Springer-Verlag Berlin Heidelberg 2010 
A Genetic Context Interpreter for Context-Aware 
Systems in Pervasive Computing Environments 
Been-Chian Chien and Shiang-Yi He 
Department of Computer Science and Information Engineering 
National University of Tainan, Tainan, Taiwan, R. O. C. 70005 
bcchien@mail.nutn.edu.tw 
Abstract. Developing context-aware applications in pervasive computing 
environments has attracted much attention from researchers in recent decade. 
Although dozens of context-aware computing paradigms were built these years, 
it is difficult for the present systems to extend the application domains and 
interoperate with other service systems due to the problem of heterogeneity 
among systems. In this paper, we propose and construct a generic context 
interpreter to overcome the dependence problem between context and hardware 
devices based on the proposed context-aware (CADBA) architecture. The idea 
of the context generic interpreter imports sensor data from sensor devices as an 
XML schema. Instead of interpretation widgets, interpretation scripts are 
produced by a context generator and a generic context interpreter is used to 
provide the semantic context for context-aware applications. A context editor is 
also designed by employing schema matching schemes for supporting 
intelligent context mapping between devices and context model. 
Keywords: Context-aware computing, pervasive computing, generic context 
interpreter. 
1   Introduction 
Emergence of ubiquitous computing [17] and pervasive computing [11] brings the 
vision of integrating hardware, network systems, and information technologies to 
provide appropriate service for our lives in a vanishing way. With the rapid growth of 
wireless sensors and mobile devices, the research of pervasive computing is becoming 
important and popular in recent years. A context-aware system is a pervasive 
computing environment in which user’s preference services can be detected by 
making use of context including location, time, date, nearby devices and other 
environmental activities to adapt the users’ operations and behavior. All kinds of 
context-aware architectures have been designed and employed for a wide spectrum of 
applications [2]. Since the individual focus of each framework on its specific 
application domain, the current context-aware systems are heterogeneous in all 
aspects, such as hardware, mobile resources, operating systems, application software, 
and platforms. The serious heterogeneous characteristics of context-aware computing 
are especially important and become significant drawbacks while developing or 
integrating context-aware applications in pervasive computing environments. 
 A Genetic Context Interpreter for Context-Aware Systems 93 
 
Fig. 1. The CADBA architecture for five-layer framework 
1) The device layer: This layer contains the physical equipments and devices 
operated and used in the context-aware systems including sensors, identifiers, 
mobile devices, and actuators, etc. 
2) The interpretation layer: The main components in this layer contain context 
interpreters and context aggregators. 
 
y Context interpreter: The context interpreter is used to interpret the structures of 
raw data from sensors and represent the information as low-level context called 
sensor context. 
y Context aggregator: The context aggregator then gathers the related low-level 
sensor context data to form a higher-level context. As soon as the context model 
is provided, context can be generated by context interpreters and aggregators. 
3) The context layer: A context model and management are the main components. 
 
y Context model: The context model is essential and the CADBA uses ontology to 
represent the context model with OWL. 
y Context management: Context-aware computing implies the interconnection of 
people, devices, and environments. It makes possibility of sharing the users’ 
context among each other in heterogeneous systems. The issues and challenges 
of context management include context configuration, device fault, context 
conflict, context inconsistency and security [9]. 
4) The storage layer: The storage layer stores not only the context data of the current 
status but also the historical context data in the context-aware system. 
 
y Domain knowledge: It contains the entire resources of the context-aware 
computing including places, persons, devices, and objects. 
y Context database: The context database is to provide the integration of current 
context and the storage of historical context data. 
 
Context Model 
Context 
Aggregator 
Context 
Interpreter
SensorActuator Actuator Sensor
Service Provider 
Context Interpreter 
Application 
Service 
Domain 
Knowledge Context Database
Device layer 
Interpretation layer 
Context management Context layer 
Storage layer 
Application layer 
.  .  .  .  .
.  .  .  .  .
Application 
Service 
 A Genetic Context Interpreter for Context-Aware Systems 95 
The architecture of the proposed generic context interpreter is shown in Figure 2. 
The main components are the context interpreter generator and the generic interpreter. 
The context interpreter generator further contains three functions: the mapping 
operators, the context editor and the schema matching algorithm. In this model, 
context interpreters generated by the interpreter generator are interpretation scripts 
instead of interpretation functions or programs. The interpretation script draws linking 
relationships and transforming methods between sensor data and the semantics in the 
context model. The generic interpreter then translates sensor raw data into context by 
the corresponding interpretation scripts while the context interpretation process being 
proceeded. We depict each component block as follows and the detailed design of 
function blocks will described in Section 4. 
 
y Sensor data model: Sensor models can be provided by some techniques of 
connectivity standards, for example, UPnP and SOAP, which enable data transfer 
in XML-based procedure call. Each type of sensor delivers its sensor data by the 
predefined XML schema according to the hardware specification. Such a schema 
will be sent to the context editor for linking relationship rules with the context 
model. 
y Context model: The context model is built for different application environment. 
For mapping context schema into sensor data schema, ontology with XML-based 
representation is used here. 
y Context interpreter generator: Interpreter generator produces interpretation scripts 
which contain the mapping relationships between context schema and sensor data 
schema. The mapping interface tool is the context editor. The context editor supports 
a graphical user interface to assist users to link the relationship between context 
schema and sensor data schema. The mapping job can be finished manually or 
automatically by applying schema matching schemes. 
y Interpretation script: The interpretation script uses XSL (eXtensible Stylesheet 
Language) to describe the schema mapping. The content of the script is the rules of 
transforming source data schema (sensor data) into target data schema (context). 
y Generic interpreter: Since interpretation scripts are stated in XSL, the XSLT 
(XSL Transformation) Processor can be used to be the generic interpreter directly. 
The XSLT-Processor will read the sensor raw data with XML tag and interpret the 
context according to the corresponding interpretation script. 
The interpretation flow consists two phrases: interpretation scripts generation and 
context interpretation. In the interpretation scripts generation phrase, mobile sensors 
prepared circumstances data schema in XML format and delivered them to the 
context interpreter generator. After sensor data schema was received by the context 
interpreter generator, the context editor is used to build the relationship between 
sensor data and sensor context according to the definitions in context model. An XSL 
script will be generated for interpreting the sensor context if the confirmation is done. 
Then, in the context interpretation phrase, the XSLT-Processor is used to translate 
original XML sensor raw data into XML sensor context defined in the context model.  
 
 A Genetic Context Interpreter for Context-Aware Systems 97 
Operator 4: Conversion-Function 
This operation allows users to define formula for some specific requests. A 
practical example is the transform between degree centigrade and Fahrenheit scale. 
The transform formula is usually used to convert 20oC into 68oF.  
<xsl:template name="Conversion:CelsiusToFahrenheit"> 
 <xsl:param name="CelsiusValue" select="/.."/> 
 <xsl:value-of select="((($CelsiusValue * 9) div 5) + 32)"/> 
</xsl:template> 
4.2   Schema Matching Algorithms 
The main function of schema matching algorithm is to assist users to retrieve related 
context from the historical mapping repository. Since the number of context is usually 
large in a context-aware application, the management of context is an important work. 
One of the issues is to find similar or even the same context mapping to develop 
context interpretation scripts. The advantage of using XML to represent context here 
is that XML schema matching method can be applied to search the sensor schema 
with high similarity. Making use of reusing the similar schema of context mapping, 
the new context mapping will be built quickly. A good XML schema matching 
algorithm can help users to construct intelligent context interpreter generator. 
The XML schema and ontology matching problem is one of the research issues in 
data manipulation. There are many researches and discussion on such a topic. Two 
famous schema matching algorithm were applied in our work. The first is Cupid [12] 
proposed by Madhavan et al. The other is COMA++ [1] by Aumuller. We will 
discuss the effectiveness and efficiency of the two methods after applying to the 
context interpreter generator in Section 5. 
4.3   The Context Editor 
The context editor is designed for defining mapping operators, managing context 
mapping between sensor data schema and context model, and generating context 
interpretation scripts. A graphical user interface is provided to help users to finish 
the sensor binding efficiently and easily. The context mapping operation in a context 
editor is demonstrated as Figure 3. First, the editor reads the XML sensor data or  
 
   
(a)     (b) 
Fig. 3. The context editor 
 A Genetic Context Interpreter for Context-Aware Systems 99 
Table 2. The ranking results of Experts for the test sets 
Schema Experts 
Rank S1 GPS S2 Humid S3 IR S4 Light S5 RFID S6 Sensor S7 Temp2 
2 S2 Humid S1 GPS S4 Light S2 Humid S1 GPS S1 GPS S4 Light 
3 S4 Light S4 Light S2 Humid S3 IR S2 Humid S2 Humid S1 GPS 
4 S3 IR S3 IR S1 GPS S1 GPS S4 Light S7 Temp2 S2 Humid 
5 S6 Sensor S6 Sensor S7 Temp2 S7 Temp2 S3 IR S4 Light S3 IR 
6 S7 Temp2 S7 Temp2 S5 RFID S5 RFID S6 Sensor S3 IR S6 Sensor 
7 S5 RFID S5 RFID S6 Sensor S6 Sensor S7 Temp2 S5 RFID S5 RFID 
Table 3. The evaluation results of the of schema matching algorithms 
Cupid COMA++ Schema 
Rank S1 S2 S3 S4 S5 S6 S7 S1 S2 S3 S4 S5 S6 S7 
2 S6 S4 S1 S2 S1 S1 S1 S2 S1 S1 S2 S1 S1 S4 
3 S3 S1 S4 S1 S3 S7 S6 S4 S4 S2 S1 S7 S2 S1 
4 S7 S6 S2 S6 S2 S2 S2 S3 S3 S4 S7 S2 S4 S3 
5 S2 S3 S6 S3 S4 S4 S4 S6 S6 S7 S3 S4 S3 S2 
6 S4 S7 S7 S7 S6 S3 S3 S7 S7 S6 S6 S3 S7 S6 
7 S5 S5 S5 S5 S7 S5 S5 S5 S5 S5 S5 S6 S5 S5 
Rnorm 0.667 0.905 0.801 0.801 0.905 0.952 0.762 1.000 1.000 0.857 0.857 0.81 0.905 0.952 
Average 0.828 0.912 
6   Conclusion and Future Work 
The main contribution of this paper is to propose a generic context interpreter to 
accomplish physical context independence. This work is based on the context-aware 
architecture, CADBA. Ontology based context model is used in this architecture. We 
design a generic context interpreter including context interpreter generator and a 
generic interpreter. A context interpretation script is proposed to replace function-
based context interpreter. As we known, this is the originality of context provider or 
interpretation in context-aware computing. We also design a context editing tool for 
support the context mapping operation and devices maintenance. By introducing 
mapping operators and schema matching schemes, the generic context interpreter 
performs a more intelligent operating interface for users. The heterogeneity in 
pervasive context-aware computing will gain a graceful solution. 
The problem of heterogeneity is a bottleneck while developing and extending 
context-aware systems in pervasive computing environment. The enforcement of 
context independence resolves dependency of devices and improves interoperability 
of applications. This work is intended as a starting point of future research on context 
generation. The problems of context management for context-aware computing will 
be paid more attention in the future. 
  
Acknowledgments. This research was supported in part by the National Science 
Council of Taiwan, R.O.C. under contract NSC 98-2221-E-024-012. 
 出席「2010 國際機器學習與神經機械學術會議(ICMLC2010)」報告 
 
2010 International Conference on Machine Learning and Cybernetics 
(ICMLC2010) 
 
11-14 July, 2010, Qingdao, China 
 
 
計畫編號 NSC 98-2221-E-024 -012 
計畫名稱 整合機器學習方法於情境感知服務平台技術之研究 
出國人員姓名 
服務機關及職稱 
錢炳全  教授 
國立臺南大學資訊工程學系 
會議時間地點 2010 年 7 月 11-14 日，中國，青島 (Qingdao, China) 
會議名稱 2010 國際機器學習與神經機械學術會議(ICMLC2010) 
發表論文題目 A Hybrid Approach for Automatic Schema Matching 
 
由於參加人員主要為來自兩案三地的學者，當天在會場上遇到不少老朋友，也認識了不少新
朋友。第二天，13 日上午安排一場討論會議(Panel discussion) 
 Teach an Old Dog to Do New Tricks – Learning and Recognition a World of Problems 
Chair: Daniel Yeung 
當天晚上有晚宴安排，晚宴中並頒發本次研討會的最佳論文獎與介紹並感謝參與籌備的人員。 
14日只有安排半天的議程，參與人術也明顯減少。本會議明年則將會於廣西桂林續辦
ICMLC 2011。 
  
與會心得與建議： 
本次所參加會議主要在機器學習、資料探勘、與智慧型系統的技術與應用方面，相關論
文與研究非常多。此次所參加會議中，個人以下心得與建議，提出以供參考： 
1. 近年來智慧型系統、機器學習中的自動分類(Classification)、分群(Clustering)等已有相當多
且成熟的技術與經驗，而且這些相關技術已可以支援到個項產業與應用上，在本次的會議
中，大量的應用研究來自中國的各個大學，挾其數量上的優勢，中國大陸未來在這一個領
域上的競爭力與優勢，將迅速提升。  
2. 本會議(ICMLC)在本世紀初才由旅外華人學者的支持下成立，雖無學會的運作，但成長快
速，每年幾乎均有 800 篇以上的投稿量，雖然絕大部份均來自大陸地區，且品質參差不齊，
落差極大，甚至抄襲、違反學術倫理之事時有所聞，然而在幾年的成長下來，狀況改善不
少，且慢慢也達到教育大陸學者的學術倫理與著作權觀念。相對的台灣之前的國內兩大會
議－全國計算機會議(NCS)與國際計算機會議(ICS)，因為各個領域學會的成立並舉辦研討
會的情形下，相對的擠壓國內外稿源，使得此二會議日漸萎縮。個人建議國內實有必要整
合相關的各個不同領域主題會議，集中研討會的舉辦，減少分散的舉辦成本，並且擴大學
術研討會的影響力與學者參與的意願，達到真正學術研討與相互交流的目的。除此之外，
也能加強與國外的學術團體交流，形成國際有重要影響力的臺灣資訊軟實力。 
 
攜回資料名稱與內容： 
研討會論文集如下： 
1. Proceedings of 2010 International Conference on Machine Learning and Cybernetics, Vol. 6. 
2. 論文光碟 IEEE Catalog No.: CFP10523-CDR, ISBN: 978-1-4244-6525-5. 
 2882
Proceedings of the Ninth International Conference on Machine Learning and Cybernetics, Qingdao, 11-14 July 2010
 2884
Proceedings of the Ninth International Conference on Machine Learning and Cybernetics, Qingdao, 11-14 July 2010
 2886
Proceedings of the Ninth International Conference on Machine Learning and Cybernetics, Qingdao, 11-14 July 2010
98年度專題研究計畫研究成果彙整表 
計畫主持人：錢炳全 計畫編號：98-2221-E-024-012- 
計畫名稱：整合機器學習方法於情境感知服務平台技術之研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 2 2 100%  
研究報告/技術報告 0 0 100%  
研討會論文 3 2 80% 
篇 
本計畫所發表之
國際研討會論文
比預期數量上為
多(因其中一原本
投稿國內研討會
之論文為於台灣
所舉辦之國際研
討會) 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
