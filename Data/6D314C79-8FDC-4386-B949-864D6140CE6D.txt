關鍵詞：密碼學、匿碼學、去氧核醣核酸編碼、實體單向可逆函數、迴文、字尾樹 
Keywords: cryptography, steganography, DNA-encoding, physical one-way functions, 
palindrome, suffix tree 
 
成果報告內容 
 
Introduction 
We propose three encryption methods based upon some properties of DNA sequences.  We will 
point out that the DNA sequences possess some interesting properties which we can utilize to 
hide data.  The three methods proposed in this thesis are: the insertion method, the 
complementary pair method and the substitution method.  For each method, we secretly select a 
reference DNA sequence S and incorporate the secret message M into it such that we obtain S’.  
We send this S’, together with many other DNA, or DNA-like sequences to the receiver.  The 
receiver is able to identify the particular sequence with M hidden in it and ignore all of the other 
sequences. He will also be able to extract M. 
 The main idea of Method 1 is to break S and M, and we insert each segment of M between 
every pair segments of S.  Method 2 is to break M into several segments and hide each one 
before a complementary pair substring in a DNA sequence, respectively.  We also extract a 
segment of S and insert it after each complementary pair substring with a segment of M hidden 
before it.  Method 3 is to hide the secret message M by substituting alphabets of S. 
Methods 
Method 1: the Insertion Method 
We propose the following algorithms: 
Algorithm 1E: Encryption Algorithm 
Input: A reference DNA sequence S, a secret binary message M and a binary coding scheme to 
code A, C, G and T into binary digits. 
Output: An encrypted DNA sequence S’.  
Step 1.  Code S into a binary sequence S
1 
by using the binary coding scheme.  
Step 2.  Generate k’s by using a random number generator to divide S
1 
into segments and 
generate r’s to divide the secret message M into segments.  Each k
i 
and r
i 
is larger 
than 1 or equal to 1.  Denote S
1 
by s1s2s3…sn and M by m1m2m3…m. 
Step 3.  Insert each mi of M before Si of S1 to produce a new binary sequence. Delete 
sp+1sp+2…sn.  Denote the resulting binary sequence by S2. 
Step 4.  Transform sequence S
2 
back to a faked DNA sequence S
3 
by using the same binary 
coding scheme used in Step 1. 
Step 5.   Return S
3
. 
 
Algorithm 1D: Decryption Algorithm 
Input: A set of DNA sequences, one of which has the secret message M hidden in it by using 
in Algorithm 3.1. For each pair of complementary substrings ag and ag’, check 
whether the substring with length 5 starting from one alphabet after ag’ is the same 
with S[jg,jg+4] or not. If they are not the same, ignore L” and go to Step 1. 
Step 3.   For each pair of complementary substrings ag and ag’, extract the alphabet one 
alphabet before ag, called mg. 
Step 4.   Concatenate all mg‘s to be M. 
Step 5.   Return M. 
 
Method 3: the Substitution Approach 
Algorithm 3E: Encryption Algorithm 
Input: A DNA sequence S, the secret message M=m1m2…mp and a complementary rule. 
Output: An encrypted DNA sequence S”. 
Step 1.   Use a random number generator to generate a set of available integer sequences, 
called set A. The number of A is p, the length of M. 
Step 2.   Initialize i and j to 1. 
Step 3.   For each element Si of S, do the following operations: 
if i is equal to some Aj and mj is 1, 1 ≤ j ≤ p , change Si to C(Si) , 
if i equal to some Aj and mj is 0, do not change Si, 
if i is not equal to any Aj, set Si to the double-complement of itself. 
Step 4.   Return S’. 
 
Algorithm 3D: Decryption Algorithm 
Input: A set of DNA sequences, the reference sequence S and the complementary rule. 
Output: Secret message M 
Step 1.   Initialize i and j equal to 1. 
Step 2.   For the next sequence S’ of the sequence set, do the following operations: 
For each Si: 
if there exists a j such that such that Si≠Sj’, Si≠C(Sj’), and Si≠C(C(Sj’)), ignore S’; 
otherwise, if Si’ is the same with Si, mj=0, 
else if Si’ is C(Si) , mj=1. 
Step 3.   Concatenate all mj,’s to be M and return M. 
Examples 
An Example of Insertion Method 
In this section, we will show a complete example about the complicate version of Method 1.  
Our reference DNA sequence is a segment of DNA sequence of Litmus as mentioned in previous 
section. 
S=ATCGAATTCGCGCTGAGTCACAATTCGCGCTGAGTCACAATTCGCGCTGAGT 
CACAATTGTGACTCAGCCGCGAATTCCTGCAGCCCCGAATTCCGCATTGCAGA 
GATAATTGTATTTAAGTGCCTAGCTCGATACAATAAACGCCATTTGACCATTCAC 
CACATTGGTGTGCACCTCCAAGCTCGCGCACCGTACCGTCTCGAGGAATTCCT 
 Instead, k is determined by a random number generator which is known only to the sender 
and the receiver.  Suppose the k’s are 6, 3, 2, 4.  Then S is divided into segments with lengths 6, 
3, 2 and 4 respectively.  Note that there is also a secret message M.  We may therefore also use 
the same random number generator to divide M into segments.  The parameter used will be 
denoted as r. 
 For an intruder to find out the secret message, he must be equipped as follows. (1) He must 
know precisely the reference DNA sequence S. Since there are roughly 55 millions DNA 
sequences available publicly, it is extremely hard to guess one. (2) He has to know the random 
number generator and the two seeds used. (3) He has to know the binary coding scheme. 
 For (1): There are roughly 55 millions DNA sequences available publicly.  Thus, the 
probability of an attack’s successful guessing is 1/55000000 (2a).   
 For (2): Suppose we handle a sequence S’ after the encryption stage.  The size of S’ is n’. 
S’ is composed by the secret message M and the certain size prefix of reference sequence S.  We 
define the size of M is m and the size of the certain prefix S is s.  It is hard to know m and s for 
an attacker.   
 The probability of an attacker’s successful guessing m and s is 1/(n’-1) (2b).  It is not 
enough to decode for the attacker. 
 There are still two values should be known by the attacker, namely, m and s.  The problem 
is that the attacker does not know the numbers of r’s and k’s which are used to break the secret 
message and the reference sequence S.  Since the summations of r’s and k’s generate m and s 
respectively.  The following figure indicates the relations between m(s) and r’s(k’s). 
  
Notice that it is hard for an attacker to know how much k’s and r’s we use.  Thus he should try 
two k’s(r’s), three k’s(r’s), four k’s(r’s) and so on. 
 For s, there may be the following cases: 
k1=s, k1 ≥ 1 
k1+k2=s, k1, k2 ≥ 1 
k1+k2+k3=s, k1, k2 , k3 ≥ 1 
k1+k2+k3+k4=s, k1, k2 , k3 , k4 ≥ 1 
.. 
k1+k2+k3+…+ks=s, k1, k2 , k3 ,L, ks ≥ 1 
The number of solution of the first formula can be computed.  Thus the probability of an 
attacker’s successful guessing in this stage is 1/(2s-1) (2c).  Similarly, the probability of an 
attacker’s successful guessing for m in this stage is 1/(2m-1)(2d).  Let us consider the following 
Thus, the probability of an attacker’s successful guessing all substrings of S is 1/(n-5)m (3c).  For 
(4): The number of the binary coding rules is 4×3× 2×1 = 24 .  The probability of an attacker’s 
successful guessing in this stage is 1/24 (3d).  For (5): It is hard for an attacker to know the 
length of the complementary substrings.  In our case, we fix the length of each complementary 
substring and set it be k.  An attacker may use an efficient algorithm to find out all 
complementary substrings.  But he will not know the exactly length.  Suppose the longest 
length of the complementary substring is found out as x.  The attacker may guess the length of 
the required complementary substrings from 1 to x.  Thus the probability is 1/x (3e).  Finally, 
the probability of an attacker’s successful guessing of method 2 is the multiplication of (3a), (3b), 
(3c), (3d) and (3e).  The probability is as follows: 
 
Theorem 2: 
Suppose n is the length of S, m is the number of the complementary pair substrings used in the 
encoding scheme and x is the number of lengths of the complementary pair substrings in S’. The 
probability of an attacker’s successful guessing Algorithm 2E is  
 
 
And as for the third method, we discuss its safety as follows.  For an intruder to find out the 
secret message, he should have the following information.  
(1) He should know the reference DNA sequence. 
(2) He should know the complementary rule. 
For (1): There are roughly 55 millions DNA sequences available publicly.  Thus, the probability 
of an attack’s successful guessing is 1/55000000 (4a).  For (2): We should consider how many 
legal complementary rules are. We define a legal complementary rule as the following: for each 
alphabet x of a DNA sequence, both C(x), C(C(x)) and C(C(C(x))) are not equal to x. Note that 
C(x) is the complementary of x. There will be 6 legal complementary rules as follows:   
(A T) (T C) (C G) (G A), (A T) (T G) (G C) (C A), (A C) (C T) (T G) (G A), 
(A C) (C G) (G T) (T A), (A G) (G T) (T C) (C A), and (A G) (G C) (C T) (T A) 
The probability is 1/6 (4b).   
Finally, the probability of an attacker’s successful guessing of method 2 is the multiplication of 
(4a) and (4b).  The probability is as follows: 1/55000000 1/6.   
Let us consider another case. Suppose that it is impossible to know the reference sequence S 
for an attacker.  Thus, according to our algorithm, the attacker should consider 3 possibilities for 
each alphabet between S’ and S.  For each alphabet x between S’ and S, there may be three cases: 
(1) S’ is x and S is x, too. (2) S’ is x and S is C(x). (3) S’ is x and S is C(C(x)).  If the length of S’ 
is n, there will be 3n possibilities.  The probability of the attacker’s successful guessing will be 
1/3n.  Thus, we have  
 
Theorem 3: 
Suppose n is the length of S. The probability to break Algorithm 3E is  
