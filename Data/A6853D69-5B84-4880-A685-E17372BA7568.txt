encoded and decoded for arbitrary data length without
suffering the rate loss caused by zero padding for block
codes. Furthermore, encoding of LDPC-CCs can be im-
plemented using shift registers. Therefore, the encoding
complexity of LDPC-CCs is much smaller than that of
LDPC block codes. Finally, the performance of LDPC-
CCs usually surpasses that of their corresponding QC-
LDPC counterparts [17].
There are only a small number of constructions for
LDPC-CCs in the literature [11], [16]. In this report,
we propose a more general construction for cycle-4-free
LDPC-CCs than that in [11], [16]. Within this larger set
of LDPC-CCs, constructions of cycle-6-free codes can
then be obtained.
II. RESULTS
A. LDPC Convolutional Codes
An LDPC convolutional code is basically a convo-
lutional code. If we represent the parity check matrix
H(D) of the code in the scalar form, the matrix will be
sparse and can been seen as an LDPC block code with
infinite codeword length. In the following, we will give
an explicit description for LDPC-CCs.
An (n, k) LDPC convolutional code has a sparse
scalar parity-check matrix satisfying the following prop-
erties [18]:
(i) each column has dv’s 1’s;
(ii) each row has dc’s 1’s except the first (n − k)M
rows;
(iii) dv and dc are small compared to (n − k)M and
nM ;
where M is the largest exponent in the corresponding
polynomial parity-check matrix H(D). The number of
1’s dc in a row of the scalar matrix is exactly the
weight sum of a row in the polynomial matrix. This
phenomenon also holds for columns. If the elements of
H(D) are monomial, we will have degree parameters
dc = n and dv = (n − k) ≡ J . Hereinafter, we will
focus on codes with monomial parity-check matrices.
Therefore, we can use (J, n)-regular LDPC-CCs to rep-
resent codes with J 1’s in a column and n 1’s in a row,
i.e., codes with J ×n polynomial parity-check matrices.
Similar to LDPC block codes, a Tanner graph based
on the parity-check matrix can be obtained for LDPC-
CCs. It is also a bipartite graph with two sets of nodes
representing check nodes and variable nodes, respec-
tively. Since the scalar parity-check matrix of an LDPC-
CC is infinite and repeated, the corresponding Tanner
graph extends infinitely with repeated nodes in the same
structure as shown in Fig. 1 [16].
The previous algebraic construction in [11], [16] is
obtained in polynomial form. For a prime m, the integers
modulo m, {0, 1, . . . ,m− 1}, form a finite field GF(m)
)(
1
v
tv
)(
2
v
tv
)(
3
v
tv
)(
4
v
tv
)(
0
c
tv
)(
1
c
tv
)(
2
c
tv
)(
3
c
tv
)(
4
c
tv
. . . 
 . . . . 
)(
0
v
tv
Fig. 1. The Tanner graph of a (2,3)-regular LDPC-CC with M = 5.
under addition and multiplication. For a regular LDPC-
CC with parameters (J, n), choosing nonzero integers
a, b ∈ GF(m), with order of a equal to n and order of b
equal to J , we can obtain a J × n parity-check matrix
given by
H =
⎛
⎜⎜⎜⎜⎝
D Da Da
2 · · · Dan−1
Db Dab Da
2b · · · Dan−1b
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Db
J−1
Dab
J−1
Da
2bJ−1 · · · Dan−1bJ−1
⎞
⎟⎟⎟⎟⎠
.
It can be observed that the previous algebraic construc-
tion in [11], [16] only generates one code for given m
and (J, n). Therefore, a more general construction for
girth-6 LDPC-CCs will be proposed in the following
section.
B. Girth of LDPC Convolutional Codes
Restricting the elements of the polynomial parity
check matrix H(D) to be all monomial, we can obtain
the parity-check matrix of a (J, n)-regular LDPC-CC
given by
H(D) =
⎛
⎜⎜⎜⎝
DP11 DP12 DP13 · · · DP1n
DP21 DP22 DP23 · · · DP2n
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
DPJ1 DPJ2 DPJ3 · · · DPJn
⎞
⎟⎟⎟⎠
where 0 ≤ Pij ≤ M . And the parity check matrix in the
scalar form can be written as
H =
⎛
⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎝
H0
H1 H0
.
.
. H1 H0
.
.
.
.
.
. H1
HM
.
.
.
.
.
.
.
.
.
HM
.
.
.
.
.
.
HM
⎞
⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎠
where all H ′is are J × n matrices. Since the elements
in H(D) are all monomials, for each (i, j), the elements
in the (i, j) position of H 0,H1, . . . ,HM are all zeros
except those in the (i, j) position of H Pi,j .
2
Since it is true over S, it guarantees that the equation
still holds if the substraction operation is over integers.
The previous algebraic construction in [11], [16] cor-
responds to a smaller subset of codes by Construction-
I. Several constructions according to Construction-I are
given as follows.
• In Zm, with m prime, to construct a (J, n)-
regular LDPC-CC, we can randomly choose distinct
a1, a2, . . . , an and b1, b2, . . . , bJ . Some examples
are listed below.
– Choose ai = ai, bj = bj for i =
1, 2, . . . , n, j = 1, 2, . . . , J where the order
of a is at least n and the order of b is not
smaller than J . This construction is similar to
the previous algebraic construction. Since this
construction has less constraints, we can have
much more codes.
– Choose ai = i, bj = j for i = 1, 2, . . . , n, j =
1, 2, . . . , J . But from Corollary 1 this construc-
tion leads to cycles of length 6 in the Tanner
graph if J ≥ 2.
– Choose ai = i2da, bj = j2db for i =
1, 2, . . . , n, j = 1, 2, . . . , J with nonzero dis-
tinct da, db randomly chosen from Zm.
• In the integer ring Z, n distinct integers and J
distinct integers are randomly chosen. Since Z
is obviously an integral domain, the constructed
code is 4-cycle-free. The three examples mentioned
above for Zm can also be adopted here. We just
have to modify the multiplication over Z. Some
other examples are also listed.
– Choose ai = 1 + id1, bj = 1 + jd2 for i =
1, 2, . . . , n, j = 1, 2, . . . , J where d1 = d2 are
randomly chosen from Z but not to make a i, bj
zero.
– Choose ai = 1 +
∑i−1
k=0 kd1, bj = 1 +∑j−1
k=0 kd2 for i = 1, 2, . . . , n, j = 1, 2, . . . , J
where d1 = d2 are randomly chosen from Z
but not to make ai, bj zero.
• To have more flexible modulo numbers than primes,
we can consider integers modulo mk, where m is a
prime and k is any positive integer. In Zmk, the ele-
ments {0, k, 2k, 3k, . . . , (m−1)k} form an integral
domain. Choosing nonzero distinct a1, a2, . . . , an
and b1, b2, . . . , bJ from these elements, we can have
a 4-cycle-free LDPC-CC.
D. Construction of 6-Cycle-Free LPDC-CCs
Construction-I can generate a large set of codes. We
can then attempt to find codes with good performance
in this set. The girth is one of the dominating factors
on performance. Therefore, in the following we provide
constructions for 6-cycle-free codes.
First we consider GF(m), with m prime. Set
P =
⎛
⎜⎜⎜⎝
a1d 2a1d 3a1d . . . na1d
a2d 2a2d 3a2d . . . na2d
.
.
. . . . . . .
.
.
.
aJd 2aJd 3aJd . . . naJd
⎞
⎟⎟⎟⎠
where nonzero distinct d, a1, a2, . . . , aJ are randomly
chosen. The parity-check matrix H(D) is constructed
by Hi,j = DPi,j for i = 1, 2, . . . , J and j = 1, 2, . . . , n.
The corresponding Tanner graph for this construction is
4-cycle-free. The condition for the constructed code with
girth 8 is
ai1(j2d)− ai1(j1d) + ai2(j3d)− ai2(j2d)
= ai3(j3d)− ai3(j1d)
for 1 ≤ i1, i2, i3 ≤ J and 1 ≤ j1, j2, j3 ≤ n. That is,
ai1(j2 − j1) + ai2(j3 − j2) = ai3(j3 − j1). (2)
We can find a construction for (3, n)-regular LDDPC-
CCs by setting a1 = 1, a2 = a, a3 = (n + 1)a− n with
a randomly chosen and m > n(n − 1). It is obvious
that (2) holds with these parameters. This construction
is called H Construction I-a.
However, we have conducted computer simulations
and discovered that Construction I-a leads to unrandom-
like codes. In other words, the elements in the scalar
parity-check matrix by this construction are not random-
like. So it results in worse performance compared with
randomly constructed codes and those codes by the
previous algebraic construction.
In the following, we will introduce a construction that
has comparable performance with randomly constructed
codes and guarantees to be 6-cycle-free. Considering
GF(m), with m prime, we let P be
⎛
⎜⎜⎝
a1 a1(1 + d) a1(1 + 3d) . . . a1(1 +
∑n−1
k=1 kd)
a2 a2(1 + d) a2(1 + 3d) . . . a2(1 +
∑n−1
k=1 kd)
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
aJ aJ(1 + d) aJ (1 + 3d) . . . aJ(1 +
∑n−1
k=1 kd)
⎞
⎟⎟⎠
where d is randomly chosen but not to make 1+
∑j−1
k=1 kd
to be zero for j = 1, 2, . . . , n and a1, a2, . . . , aJ are
randomly chosen. The parity-check matrix H(D) is
constructed by Hi,j = DPi,j for i = 1, 2, . . . , J and
j = 1, 2, . . . , n. For distinct 1 ≤ J1, J2, J3 ≤ n, let
j1 =
∑J1−1
k=1 k, j2 =
∑J2−1
k=1 k, and j3 =
∑J3−1
k=1 k. The
condition for this construction to have girth at least 8 is
ai1(j2 − j1) + ai2(j3 − j2) = ai3(j3 − j1).
To have girth at least 8, this equation must hold for all
ai, i = 1, 2, . . . , J and j = 1, 2, . . . n. There are totally(
n
3
) × (J3
)
equations. We can perform some search to
find the corresponding parameters. However, by direct
computation, the complexity is too large. Thus, we
propose a construction for (3, n)-regular LDPC-CCs so
that the number of equations can be reduced to
(
n
3
)
.
4
