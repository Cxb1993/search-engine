可重組式 FPGA 系統分割與排程工具之設計(I) 
“Design of Partitioning and Scheduling Tool for Reconfigurable FPGA Systems (I)” 
計畫編號：NSC96-2221-E-027-124 
執行期間：96 年 8 月 1 日 至 97 年 7 月 31 日 
主持人：李宗演 國立臺北科技大學電子系暨電腦與通訊研究所副教授 
 
一、中文摘要 
本計劃針對可重組式 FPGA 系統提出具
有部分動態重組與自我重組功能之軟硬體共
同設計流程，除了系統之軟硬體實現外並進一
步完成基於 0-1 整數線性規劃 (Integer Linear 
Programming, ILP) 之軟硬體分割方法。藉由
定義系統規格、自我重組系統架構與 FPGA 資
源結構等交互關係，使用線性規劃限制式精確
描述系統之執行與重組行為，並計算實際之資
源使用情況，在不違反現制式規則下，利用目
標函數取得最小之執行與重組時間，達到軟硬
體分割之最佳化目標。本研究最後利用 Xilinx 
ML506 之 Virtex 5 FPGA 進行 JPEG encoder
實例之軟硬體評估，ILP 可有效找出軟硬體分
割之最小執行時間與重組排程，並使資源使用
率最佳化。 
英文摘要 
This research proposed a hardware-software 
co-design flow for reconfigurable FPGA system 
which provided the capabilities of partial 
dynamically reconfiguration and 
self-reconfiguration, and we have not only 
implemented the system hardware and software 
but also completed the hardware-software 
partitioning method based on 0-1 integer linear 
programming. Defining the relationships of 
system specification, self-reconfigurable 
architecture, and FPGA resource structure, we 
can describe the execution and reconfiguration 
behavior and resource utilization using 
constraint equations. Furthermore, by the rules 
of constraint, developing the object function to 
get the minimum execution and reconfiguration 
time and achieve the optimum objects. Finally, 
we have used the Virtex 5 PFGA on Xilinx 
ML506 platform to estimate and experiment 
with JPEG encoder system. Our ILP formulation 
can efficiently find an exact partitioning and 
scheduling result. 
二、計畫的緣由與目的 
Nowadays, the progressed IC fabrication 
technology enables FPGA (Field Programmable 
Gate Array) to embed more than one processor 
in single chip. The applied field for FPGA 
extended from general digital logic application 
to embedded system. For the requirement of 
reconfigurable embedded system development, 
the manufactures of FPGA such as Xilinx Virtex 
series of devices provide the capabilities of 
partial dynamically reconfiguration and 
self-reconfiguration, which can use internal 
configuration module to configure parts of area 
on the implementation to a multi-application 
system. These powerful features enable FPGA to 
be a multi-context device which equipped with 
context-switch capability, and furthermore the 
performance is better more than software in 
system. 
The research domain of reconfigurable 
architectures will change from 
architecture-driven to application-driven [1]. An 
efficient high-level design methodology in such 
system that contains hardware and software units, 
therefore a hardware-software (HW-SW) 
partitioning technique is needed. 
In recent years, many approaches for 
HW-SW partitioning have been proposed to 
reconfigurable embedded system. Noguera et al. 
[2] proposed a constructive HW-SW partitioning 
algorithm, which obtains an initial solution and 
acyclic task dependency graph shown in Figure 
2. A task graph is defined by a 2-tuple G = (V, E), 
contains |V| vertices and |E| edges. Each vertex vi 
corresponds to a task labelled as ti( piet , 
rm
iet , 
rm
irt ), where 1 ≤ i ≤ |V|. 
p
iet  is the execution 
time of task ti performed by processor. rmiet  and 
rm
irt  are the execution time and reconfiguration 
overhead of task vi performed by reconfigurable 
module, respectively. Each edge ej corresponds 
to data  communication, where 1 ≤ j ≤ |E|, and 
each communication edge links ti1 to ti2 which 
labeled as ci1,i2(cti1,i2). cti1,i2 is the 
communication time between hardware and 
software tasks while ti1 and ti2 are mapped to 
different components. 
 
 
Figure 2. A simple example of task graph 
 
 
Figure 3. Heterogenous resource distribution of 
Virtex 5 FPGA 
1.2. Physical resource architecture 
In this work, we use Xilinx Virtex-5 series 
of FPGA to be the reconfigurable platform. 
Figure 3 shows the resource distribution in 
Xilinx PlanAhead tool. Reconfigurable resources 
the configurable logic blocks (CLB), embedded 
multiplier (DSP48 slices), and embedded 
memory (36K block RAMs) are the most usually 
used that we considered in this work. All of the 
heterogenous resources in an FPGA are labelled  
 
Figure 4. Reconfigurable system architecture 
as hr(clbhr, dsphr, ramhr). clbhr, dsphr, and ramhr 
are the total numbers of usable reconfiguration 
regions in an FPGA. For partial reconfigurable, 
the minimum size of reconfiguration region is 10 
CLBs high for Virtex-5 FPGA (Virtex-4 is 16 
CLBs). 
1.3. Reconfigurable system architecture 
Reconfigurable system architecture is 
shown in Figure 4. It consists of multiple 
components, processor perform software 
functionalities, reconfigurable module accelerate 
hardware computation, on-chip communication 
network and on-chip memory transmit and 
transform data, if on-chip memory size is too 
small contains at least one processor, on-chip 
communication network, memory, and off-chip 
memory controller in an FPGA that can perform 
self-reconfiguration, which placed in static 
region. Reconfigurable modules are reconfigured 
in partial regions. The relations are defined as 
follow: 
• Self-reconfigurable system architecture: a 
self-reconfigurable architecture is labelled as 
a 3-tuple sr(clbsr, dspsr, ramsr). clbsr, dspsr, 
and ramsr are the number of used minimum 
reconfigurable regions. 
• Reconfigurable modules: each reconfigurable 
module is labelled as rmi( rmiclb , rmidsp , rmiram ), 
where 1 ≤ i ≤ |V|. rmiclb , rmidsp , and rmiram  are 
the number of used minimum reconfigurable 
regions. 
1.4. Partitioning and scheduling 
As mentioned above, a processor can 
perform software and configure reconfigurable 
modules. However, in self-reconfigurable system, 
modules. 
• s = 1…time step. 
2.2. Constraints 
Uniqueness constraint: each task ti can only 
be executed exactly once on one component in 
the target architecture, either processor or 
reconfigurable module. 
 i∀ , ( ), , 1i s i s
s
y x+ =∑ . (1) 
Processor execution constraint: for each 
time step s, processor executes one task at most. 
 s∀ , ,
1
1
p
i
s
i m
i m s et
y
= − +
≤∑ ∑ . (2) 
Self-reconfiguration constraint: each 
reconfigurable module rmk needs one 
reconfiguration by processor before execution 
unless there is same reconfigurable module in 
same position on FPGA. If task ti executed on 
processor, reconfiguration is not needed. 
 i∀ , ( ), , 1i s i s
s
y r+ ≤∑ , (3) 
 i∀ , ( ) ( ), ,rmi s i i s
s s
s r rt s x∗ + ≤ ∗∑ ∑ . (4) 
For each time step s, one reconfigurable 
module can be configured at most one time. 
 s∀ , ,
1
1
rm
i
s
i m
i m s rt
r
= − +
≤∑ ∑ . (5) 
Resource constraint: for each time step s, 
the used resources which in task execution or 
module reconfiguration can’t over than usable 
resources in FPGA. 
s∀ , 
 , ,
1 1rm rmi i
s s
i m i i n i
i m s rt n s et
r rm x rm sr
= − + = − +
⎛ ⎞⎛ ⎞∗ + ∗ +⎜ ⎟⎜ ⎟⎜ ⎟⎜ ⎟⎝ ⎠⎝ ⎠
∑ ∑ ∑  
  hr≤ . (6) 
Communication constraints: for each 
communication edge ci1,i2 between tasks ti1 and 
ti2, if ti1 and ti2 are mapped to different 
component, it will incur communication delay. 
 1, 2i ic∀ , ( )1, 2, 1, 2 {0,2}i s i s i i
s
x x d+ + =∑  (7) 
 or, ( ) { }1, 2, 1, 2 0, 2i s i s i i
s
y y d+ + =∑  (8) 
Dependency constraint: for each 
communication edge ci1,i2 between tasks ti1 and 
ti2, the end time of ti1 must smaller than the start 
time of the communication edge ci1,i2, and the 
start time of ti2 must over than the end time of 
the communication edge ci1,i2 to ensure the 
precedence relations of task graph. 
1, 2i ic∀ , ( )1, 1 1,rmi s i i s
s
s x et x∗ + ∗∑  
 ( )2, 1, 2 1, 2i s i i i i
s
s y ct d≤ ∗ − ∗∑ . (9) 
and, ( )1, 1, 1,pi s i s i s
s
s y et y∗ + ∗∑  
 ( )2, 1, 2 1, 2 2 2,rmi s i i i i i i s
s
s x ct d rt x≤ ∗ − ∗ − ∗∑ . (10) 
2.3. Object function 
The primary objective of this ILP model is 
to minimizing the total latency satisfying the 
rules in partial dynamically self-reconfigurable 
system. 
minimize 
 ( ) ( )( ), ,1 1p rmi s i i s i
i s
s y et s x et⎛ ⎞∗ + − + ∗ + −⎜ ⎟⎝ ⎠∑ ∑  
( ) ( )( ), ,
1
1 1p rmi s i i s i
i s
s y et s x et
−
⎛ ⎞− ∗ + − + ∗ + −⎜ ⎟⎝ ⎠∑ ∑ . 
  (11) 
3. Experimental result 
Our experimental platform information has 
shown in Table 2, and the reconfiguration 
overhead of reconfigurable modules estimated 
by the Equation (12), for Virtex 5 FPGAs and 
the frame length is 41. 
We apply the ILP formulation to the JPEG 
encoder example shown in Figure 6. The ILP 
solver (LINGO) used to solve the ILP 
formulation with complex constraints on a PC 
with 2.4 GHz processor and 3.5 GB memory. 
Table 3 shows the results to our experiment. We 
之相依性任務排程演算法,” in Proceedings of the 
Electronic Technology Symposium, Kaohsiung, 
Taiwan, June 19, 2008, Paper No.: BO-08. 
5. T.-Y. Lee, C.-C. Hu, L.-W. Lai, C.-C. Tsai, and R.-S. 
Hsiao, “Hardware context switching methodology for 
dynamically partially reconfigurable systems,” in 
Proceedings of the National Computer Symposium 
(NCS) 2007, Taichung, Taiwan, Dec. 20-21, 2007, vol. 
2, pp. 195-199. 
6. T.-Y. Lee, C.-C. Yao, Y.-H. Fan, C.-C. Tsai, and R.-S. 
Hsiao, “Design of automatic timing verification tool 
for FPGA systems,” in Proceedings of the National 
Computer Symposium (NCS) 2007, Taichung, Taiwan, 
Dec. 20-21, 2007, vol. 2, pp. 300-310. 
7. T.-Y. Lee, Y.-H. Fan, Y.-M. Cheng, C.-C. Tsai, and 
R.-S. Hsiao, “Enhancement of hardware-software 
partition for embedded multiprocessor FPGA 
systems,” in Proceedings of the IEEE International 
Conference on Intelligent Information Hiding and 
Multimedia Signal Processing, Kaohsiung, Taiwan, 
Nov. 26-28, 2007, vol. 1, pp. 19-22. 
8. T.-Y. Lee, C.-I Yu, Y.-H. Fan, C.-C. Tsai, and R.-S. 
Hsiao, “An efficient task scheduling algorithm for 
partial reconfigurable FPGA-based systems,” in 
Proceedings of the Conference on Innovative 
Applications of System Prototyping and Circuits 
Design, Tainan, Taiwan, Sep. 28, 2007, Paper ID: 
P09. 
9. T.-Y. Lee, C.-P. Hu, Y.-K. Huang, C.-C. Tsai, and 
R.-S. Hsiao, “MPEG-2視訊解碼器之系統分析與軟
硬體分割 ,” in Proceedings of the Conference on 
Innovative Applications of System Prototyping and 
Circuits Design, Tainan, Taiwan, Sep. 28, 2007, 
Paper ID: P72. 
10. T.-Y. Lee, S.-K. Lin, X.-S. Lin, C.-P. Hu, and C.-C. 
Hu, “信號產生與量測之整合系統雛型設計 ,” in 
Proceedings of the Conference on Innovative 
Applications of System Prototyping and Circuits 
Design, Tainan, Taiwan, Sep. 28, 2007, Paper ID: 
P68. 
11. T.-Y. Lee, Y.-H. Fan, S.-C. Yen, C.-C. Tsai, and R.-S. 
Hsiao, “An integrated functional verification tool for 
FPGA systems,” in Proceedings of IEEE 
International Conference on Innovative Computing, 
Information and Control (ICICIC) 2007, Kumamoto 
Japan, Sep. 5-7, 2007. 
12. T.-Y. Lee, Y.-H. Fan, Y.-M. Cheng, C.-C. Tsai, and 
R.-S. Hsiao, “Hardware-oriented partition for 
embedded multiprocessor FPGA systems,” in 
Proceedings of IEEE International Conference on 
Innovative Computing, Information and Control 
(ICICIC) 2007, Kumamoto, Japan, Sep. 5-7, 2007. 
13. T.-Y. Lee, Y.-L. Hsu, and C.-C. Hu, “A novel 
architecture for self-reconfigurable systems,” in 
Proceedings of the 18th VLSI Design/CAD 
Symposium, Hualein, Taiwan, Aug. 7-10, 2007, pp. 
318-321. 
14. T.-Y. Lee, Y.-H. Fan, and S.-Z. Hong, “A 
low-complex image coding algorithm based on 
wavelet transform,” in Proceedings of the 18th VLSI 
Design/CAD Symposium, Hualein, Taiwan, Aug. 7-10, 
2007, pp. 326-329. 
六、自我評估 
1. 研究內容與原計畫相符程度 
評估結果： 
完全符合。 
2. 達成預期目標情況 
評估結果： 
以部份動態可重組架構實現影像壓縮系統
與軟硬體分割演算法皆已完成。 
3. 研究成果之學術或應用價值 
評估結果： 
研究之成果可提供給具有部份動態重組功
能之 FPGA 系統設計一個有效的系統軟硬體
規劃上的評估。 
4. 是否適合在學術期刊發表或申請專利 
評估結果： 
目前之成果適合發表於學術期刊，專利部
分則需再評估。 
5. 主要發現或其他有關價值等，作一綜合評
估 
評估結果： 
本研究在方法論探討上與實務並重，研究
人員需具備軟硬體與介面相關設計能力與知
識，從應用、系統架構與實現做一完整之連
貫，並利用實現之成果來支持所提出之方法
論，可說是學術性與實用性兼具。 
 
 
Sophisticated Computation of Hardware-Software Partition for Embedded 
Multiprocessor FPGA Systems 
 
 
Trong-Yen Lee1, Yang-Hsin Fan1,2, Chia-Chun Tsai3  and Rong-Shue Hsiao1 
1Dept. of Electronic Engineering and Institute of Computer and Communication, 
National Taipei University of Technology, Taipei, Taiwan, R.O.C.  
2 Information System Section of Library, 
National Taitung University, Taitung, Taiwan, R.O.C. 
3Dept. of Computer Science and Information Engineering, 
Nanhua University, Chia-Yi, Taiwan, R.O.C. 
1{tylee, rsh}@ntut.edu.tw, 2yhfan@nttu.edu.tw, 3chun@mail.nhu.edu.tw 
 
 
Abstract 
 
An embedded multiprocessor FPGA system can 
provide powerful and more functionalities than single 
processor system. However, the hardware-software 
partitioning problem is more complex in system design 
because the system components become escalation.   In 
this paper, we propose a sophisticated computation 
method (SCM) to solve hardware-software partitioning 
issues for embedded multiprocessor FPGA systems.  
The SCM consists of two levels partition which 
includes processors-fit level and multi-fit level 
constraints. In processors-fit level, the partitioning 
results of unsatisfying processor constraint can be 
rapidly eliminated. Next, multi-fit level constraints 
compute various system constraints that based on 
divide-and-conquer and exhaust methods. 
Experimental results show that our proposed method 
can rapidly obtain better partitioning results. 
 
1. Introduction 
 
The speed of incremental transistors is much faster 
than Moore’s law since the fabrication process 
technique accelerates by exponential way. Based on 
high transistors capacity, embedded multiprocessor 
field programmable gate array (FPGA) system is 
manufactured by Xilinx [1] company which provides 
an excellent prototyping platform to fast emulate the 
function of a systems. A task is one of atomic unit in 
an FPGA system that can be hardware component or 
software procedure. The decision of each task is 
implemented by hardware component or software 
procedure in an FPGA system that depends on 
hardware-software partitioning strategy. However, too 
many tasks in developing an FPGA system cause 
greatly increasing solution space then the hardware-
software partitioning issues become a complicated 
problem. 
Hardware-software partitioning method concern not 
only partitioning result with hardware components or 
software procedures but also the multi-constraints with 
satisfying system specification simultaneously. In 
embedded single processor FPGA system, system 
constraints such as power consumption, execution time, 
hardware cost and software cost are generally to be 
consideration. For embedded multiprocessor FPGA 
system, not only above constraints but also the number 
of processors, homogeneous or heterogeneous 
processors, and utilization of resource are accumulated 
than embedded single processor FPGA system. In 
order to obtain partitioning result with meeting all 
constraints in embedded multiprocessor FPGA system, 
then sophisticated computation is inevitable because 
each constraint need to calculate individually to meet 
system constraint in huge solution space.  
 
2. Related work 
 
An embedded multiprocessor FPGA system is one 
of the architecture for solving complex functionalities 
for developing consumer electronics. Recently, some 
researchers [2]-[5] focused on hardware-software 
partitioning method in embedded multiprocessor 
FPGA systems. In 2000, Pomante [2] proposed a 
heuristic multi-level partitioning method that consists 
of system level partition and functional level partition. 
He focused on procedures as system specification to 
Ctotal_sw = ,),(
1 1
∑∑
= =
l
j
n
i
sw ijC  Ctotal_sw ≦ CFPGA_sw (5) 
where i represents task, n is total of task in each 
level, j represents level, l is the number of levels in G. 
 
4.2 Processors fit level partition 
 
For fast obtaining partitioning results from 
enormous solution space, we propose processors-fit 
level (PFL) to extract the partition results to meet Mspec. 
Equation (6) is used to compute the number of total 
tasks in each level for meeting Mspec. Figure 2 
illustrates PFL partitioning example in level 6. Assume 
that the Mspec equal to 2 and label of ‘0’ and ‘1’ that 
represents the task implementing by software and 
hardware, respectively. There are 7 sets partitioning 
results meeting Mspec in level 6. Other levels are as 
calculation as same by Equation (6). After that, we can 
obtain the total partitioning results (TPR) by Equation 
(7). In this example, the partitioning results of PFL is 
reduced to 14.22%. Therefore, the 85.78% partition 
 
 
Meet processors 
constraint solutions: 7 
Calculation by 
Equation (6)
C−= 3332
7
)!33(!3
!3
8
=
−−=
All solutions: 8 
000 
001 
010 
011 
100 
101 
110 
111 
000 
001 
010 
011 
100 
101 
110 
111 
TPR=11×11×1×4×11×7×4 
=149072 
Reduced Rate 
%100
2
149072
20 ×= =14.22% 
11)(2 44
4
3
4 =+− CC
422 =  
1 
731
32 =−C  
11)(2 44
4
3
4 =+− CC
422 =  
11)(2 44
4
3
4 =+− CC
Level 1 
Level 3 
Level 2 
Level 4 
Level 5 
Level 6 
Level 7 
Level 1 
Level 3 
Level 2 
Level 4 
Level 5 
Level 6 
Level 7 
PFL6 
PFL1= 
PFL2= 
PFL3= 
PFL5= 
PFL4= 
PFL7= 
PFL6= 
 
Figure 2. PFL partition example 
PFLj = 
1, if m = n = 1, 
2n - ,
1
∑
+=
n
mi
n
iC if m<n and n>1. 
(6)2n, if m = n and n＞1, 
 
TPR=∏
=
l
j
jPFL
1
 (7) 
where i represent node, m is the number of 
processors, n is the number of nodes in a level of G, j 
is level, l is the number of levels in G. 
results are filtered from solution space by PFL 
partitioning level. 
 
4.3 Multi-fit level partition 
 
The merit in PFL partitioning phase is high filtering 
partitioning results with unsatisfying the number of 
processors constraint. We propose the Multi-fit level 
(MFL) which can extract the best partition results by 
divide-and-conquer and exhaust method. According to 
problem definition shown in section 4.1, the system 
still have to consider the constraints of Pspec, Espec, 
CFPGA_HW and CFPGA_sw. Equations (2) to (5) define 
various constraints which need to meet simultaneously 
for ultimately partitioning results. Comparison of Ptotal 
with Etotal, Ctotal_hw and Ctotal_sw in Equation (2) to (5), 
the Ptotal constraint seems quite higher elimination than 
Etotal, Ctotal_hw and Ctotal_sw because the Equation (2) 
have more computing terms than Equations (3) to (5). 
For example, three kinds of partition results (i.e. 011, 
101, 110) in level 3 may be filtered in 600mw 
constraint because the sum of power consumption is 
only for taskb, taskc and taskd up to 593mw in Lee [5]. 
As a result, the sum of power consumption from taska 
to taskv may greater than power constraint.  Suppose 
that each level of partitioning results can be decreased 
to 2, the rest partitioning results may be obviously 
reduced to 90% or higher. 
After power consumption is conquered, MFL takes 
execution time into consideration. According to 
Equation (3), the partitioning results in each level can 
only survive if the individual Emax is less than Espec. For 
JPEG example in Lee [5], only ‘000’ partitioning 
result is a legal partitioning result in level 3 if the Pspec 
is determined under 20×10-3 seconds. Consequently, 
seven eighth partitioning results will be filtered that 
result only one partitioning result is extracted in this 
step. Correspondingly, the partitioning result may be 
reduced to 95% or higher after PFL, power fit process 
and execution time process. Then, both Ctotal_hw and 
