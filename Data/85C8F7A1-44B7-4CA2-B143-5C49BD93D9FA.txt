 1
敏捷式例外處理 (III) 結案報告1 
計劃編號： NSC98-2221-E-027-052 
執行期限：民國 98年8月1日 至 民國 99年7月30日 
主  持  人：謝金雲  國立台北科技大學資訊工程系副教授 
共同主持人：鄭有進  國立台北科技大學資訊工程系教授 
計畫參與人員：彭振晃、蕭登益、吳燾佑、王宣皓、陳奕閔、 
游淑婷、劉佩茹、曾憲基、張嘉琪、張浚偉、 
張耀庭、謝清帆 
國立台北科技大學 資訊工程系研究生 
 
                                                 
1 本論文發表於 2010 年台灣物件導向技術及應用暨軟體工程研討會。 
摘  要 
 
本研究以 Scrum 為例，探討如何在採行敏捷方法
的專案中，妥善地規劃例外處理設計。例外處理設
計可增強系統強健性，屬於非功能需求的一種。傳
統上軟體工程要求非功能需求應該儘量在程式撰
寫之前就被設計完成，然而這一點並不符合敏捷方
法所倡導的演進式設計以及反覆式開發與逐步成
長的精神。本論文基於例外處理強健度模型、強健
度故事、例外處理重構與工具等技術，提出一套完
整的方法，以期解決上述問題。本論文所提出之方
法已經過採行 Scrum 之軟體開發團隊實際驗證其
可行性與有效性。 
 
關鍵詞：Scrum、例外處理、敏捷方法 
 
Abstract 
 
This paper studies exception handling in agile teams 
applying Scrum. Exception handling can improve 
system robustness, which is a non-functional 
requirement. Traditionally, non-functional 
requirements should be designed up-front before 
coding starts. However, such an approach contradicts 
with agile methods, which advocate evolutionary 
design and iterative and incremental development. By 
applying exception handling robustness models, 
robustness stories, and exception handling refactoring, 
this paper proposes a method to solve the above 
problem. The proposed method has been practiced 
and verified by a real world software development 
team. 
 
Keywords：Scrum, Exception handling, agile 
method 
 
一、前言 
 
例外是許多當代的程式語言，例如 C++、Java、
與 C#用來表達錯誤 (error)  的一種方式。相對
的，例外處理則是程式語言所提供用以處理錯誤的
一種機制，以避免錯誤變成系統層次的失敗 
(failure)。妥善的處理例外將有效增進系統的強健
度 (robustness) 並提高系統的可靠度 [2,5,8]。 
然而，例外處理卻是一件困難且不易正確完成
的工作。研究顯示一個系統中例外處理程式碼佔了
所有程式的三分之二 [6]，且許多程式缺陷 (fault) 
來自於例外處理程式。因此，如何有效地處理例
外，便成為提昇軟體品質與可靠度的重要課題。由
於近年來軟體大量的使用於各種設備之上，例如消
費性電子裝置與手機等，軟體品質因素對於人們的
影響也日益擴大，使得例外處理變得越加重要。 
除此之外，例外處理本身也是一種程式設計，
因此牽涉到軟體開發流程的問題。由於例外處理解
決的是非功能面需求，因此在軟體專案中通常不是
優先被考慮的因素，甚至完全被忽略。此一問題已
被許多學者所提出，並建議應該在軟體開發早期 
(需求分析階段) 就訂定例外處理需求 [3,5,15]，並
依據此定義清楚的例外處理需求來分析與設計例
外處理程式。這些做法基本上假設軟體需求定義相
當明確且穩定，但對於使用敏捷方法或是演進式設
計 (evolutionary design) 的軟體專案而言 [10]，並
不容易直接採用。由於敏捷方法強調歡迎改變、以
程式碼為主的設計、較短的軟體釋出週期、透過軟
體重構來改善設計、撰寫自動化測試等等，因此，
我們認為對於敏捷方法應該有另一套系統化且全
面性的方法來支援例外處理設計。本論文將以近年
來廣為被採行的敏捷方法 Scrum [13]為例子，說明
在 Scrum 框架中如何無縫地做好例外處理設計
 3
能，藉此從 Product Owner 得到立即的回饋。最後，
在 Retrospective Meeting 中團隊討論關於如何持續
改善開發流程與軟體品質的議題。整個專案反覆若
干個 Sprint 一直到專案完成（產品釋出）為止。 
 
 
圖 1 Scrum 流程圖 
 
三、敏捷例外處理方法 
 
3.1 設計原理 
本研究所提出的方法遵循下列幾項原則： 
 
支援演進式設計：傳統在需求確定下所採行的大量
前期設計（big up-front design）方法已不適用於敏
捷專案之中 [10]。本研究所提出的方法必須要支
援演進式設計，讓開發者可依據專案時程與資源的
特性自行決定系統所需的強健度，且可以允許開發
者在不同的 iteration 逐步增強系統強健度而不會
導致設計混亂或是大量不必要的重工（rework）。 
 
為例外處理需求訂定可操作式定義：傳統採用列表
或是 constraint cards [12] 紀錄非功能需求的方式
容易被遺忘且不易被落實到個別的 story 中。例
如，假設專案定義了『當例外發生時 100% 不可
以造成任何資料錯誤』這種強健度需求。理論上這
是合理的要求，但是當開發人員實做每一個 story 
而需要操作（落實）此強健度需求時，又會出現『我
先把功能做出來，之後再來處理例外』的症狀。要
解決此問題，除了強健度需求的定義要能夠簡單明
瞭且容易被落實之外，還需要支援以逐步成長的方
式來增強系統強健度，如此才有可能讓專案團隊自
行決定當時程緊迫時（例如所開發的軟體在三個月
之後必須參展）可接受較低的強健度，而在後續的
開發週期中再依據實際需要決定是否提昇強健度。 
 
符合 Scrum 框架：即使開發團隊有了支援演進式
設計以及可操作的例外處理需求，如果沒有一套系
統化的機制讓開發團隊可以定期在『開發新功能』
與『增強系統強健度』之間做出取捨，則增強強健
度這種非功能需求還是極可能被遺忘。本研究所提
出的方法必須能夠直接融入 Scrum 框架，利用
Scrum 的回饋機制來防止非功能需求被遺忘。 
 
相容現有敏捷實務作法：敏捷團隊經常利用設計樣
式、軟體重構、自動化測試等實務作法。本研究所
提出的方法必須能夠與現行流行之敏捷實務作法
相容，以便減少敏捷團隊學習的時間並增加其採用
的意願。 
 
提供工具支援：許多敏捷團隊所採用的實務作法，
例如軟體重構或自動化單元測試，雖然不需要工具
支援也可實施，但是有了工具支援之後，將會使得
這些作法實施起來更方便且更有生產力。本研究所
提出的方法應考慮到自動化與工具支援的因素。 
 
3.2 方法內容 
針對 3.1 小節所描述的五點原則，我們分別
提出下列作法。 
 
採用四種強健性等級以支援支援演進式設計：為了
支援演進式例外處理設計，我們提出定義軟體強健
性等級方法 [4]。這個強健性等級可用來作為定義
例外處理需求。有了需求，開發人員遇到例外的時
候就知道要如何處理才能滿足這個需求。以下簡述
這四個強健性等級的意義。 
 
 G0：如果你還沒有幫你的需求或程式定義強健
性等級，那麼你的系統就屬於 G0 等級。G0 表
示當某個 service (可以想成整個系統，呼叫某
個元件，SOA 中的 service call 或是一般的 
function call)  發生錯誤的時候，可能會讓呼
叫者知道錯誤發生，也有可能會假裝沒事 
(failing implicitly or explicitly)。也就是說使用
該 service 的人，其實是無法確切得知它是否
有成功達成任務。而當錯誤發生的時候，
service 處於不明或是錯誤狀態 (state) [2]。例
外發生時系統可能會終止也可能繼續執行 
(terminated or continued)。 
 G1：G1 表示當某個 service 發生錯誤的時
候，一定要讓呼叫者知道，絕對不能假裝沒事 
(failing explicitly)。因此，使用該 service 的人
便可確切得知它是否有成功達成任務。而當錯
誤發生的時候，service 可能處於不明或是錯
誤的狀態。例外發生時系統要終止執行（因為
此時狀態已經不明，所以繼續執行下去可能會
讓整個系統錯得更離譜，所以要立刻終止）。
圖 2 例外處理強度的升級與降級 
 
 5
 例外處理重構：瞭解了例外處理壞味道便可採
用例外處理重構技術來重整程式碼改善例外
處理設計的品質 [4]。 
 例外處理測試：針對程式的例外處理能力應撰
寫自動化測試案例加以驗證。參考目前的主流
方式，我們建議先針對 robustness stories 撰寫
自動化驗收測試（acceptance tests），再針對每
一個 method 撰寫自動化單元測試 [9]。 
 
提供工具支援：例外處理工具支援的範圍涵蓋很
廣，包含例外註記 [18]、例外偵測 [18]、例外處
理壞味道偵測與修復 [4]、自動化例外處理重構 [4, 
17]、例外處理程式碼視覺化分析 [18]、自動產生
例外處理測試案例、以靜態或動態程式碼分析找出
例外處理錯誤 [7,18] 等等。目前我們所開發的
Eclipse 外掛工具針對 Java 語言已可涵蓋上述前五
項範圍。 
 
 例外註記：以程式語言所提供的註記機制（例
如 Java annotations 或 C# custom attributes) 直
接將程式強健度等級紀錄在程式碼中。直接將
強健度等級紀錄在程式碼的好處符合敏捷方
法以程式碼為主的設計的精神，並可支援例外
處理自動化工具分析。 
 丟出例外提醒：自動偵測程式設計師所呼叫的
methods 是否會回傳例外，以提醒使用者應注
意例外處理問題。在 Java 語言中，編譯器對
於 checked exceptions 提供工具支援，但是對於
unchecked exceptions 並沒有。雖然 Java 的設
計 者 並 不 建 議 使 用 者 處 理 unchecked 
exceptions，然而由於有許多廣為使用的開放原
始碼軟體，例如 Spring，Hibernate，Eclipse 
SWT都以 unchecked exceptions來代替 checked 
exceptions 的使用，因此這類的工具越來越有
其必要性。 
 例外處理壞味道偵測：許多現有系統對於例外
處理並不完善，因此極可能存在大量的例外處
理壞味道。自動化例外處理壞味道偵測與修復
工具將可大大縮短開發人員找出問題的時間。 
 自動化例外處理重構：藉由自動化例外處理重
構可減少程式設計師手動重構的時間並減低
重構所可能發生的錯誤。 
 例外處理程式碼視覺化分析：當程式結構或例
外傳遞很複雜，或是開發人員對於所要改善的
程式碼不是很瞭解的情況下，藉由視覺化工具
將可協助開發人員從例外處理的角度來瞭解
所要分析的程式碼。常見的工具有例外傳遞圖
形與程式碼 call chain 分析圖。 
 靜態或動態程式碼分析：透過程式碼分析技
術，可以由靜態或動態分析找出程式中潛在的
例外處理問題。 
 自動產生例外處理測試案例：藉由撰寫強健度
等級，合約（contract），與靜態程式碼分析，
可自動產生例外處理測試案例以減輕開發人
員撰寫測試案例的負擔並提高測試涵蓋率。 
 
由於強健度等級具有支援演進式設計的特性，若敏
捷團隊真的沒有時間處理例外，至少可採取 G1 等
級，以確保所以發生的例外都被回報且沒有任何例
外被忽略。由於達成 G1 的實做方法非常簡單，相
較於任由強健度處在 G0 的不確定狀態，我們認為
本方法整體而言不但不會額外增加敏捷團隊的開
發負擔，而可以確保系統的例外處理設計達到一定
的品質，並為日後提昇系統強健度立下良好基礎。 
 
四、應用經驗 
 本論文所提出的敏捷例外處理方法可適用於
開發新專案與維護既有系統，在此我們簡述實際應
用經驗。 
 
4.1 開發新專案 
 我們在一個實際採行 Scrum 的業界團隊中應
用本方法，其導入作法建議如下： 
 
A. 花二至四小時教導團隊強健度等級觀念以及
符合每個等級所需的基本例外處理方法。 
B. 在沒有特別規定之下，預設所有的 classes 與
methods 一定要達到 G1。如此一來，在開發
階段經由各種測試我們便可盡量找出應該處
理而沒有被處理的例外。在做這個規定之前，
有許多例外都被忽略了因此使用者介面上看
不到錯誤，可是此時系統的狀態已經不對，導
致除錯變得更加困難。乍看之下 G1 好像很不
負責的把所有的例外都往外丟，但是反而可以
在開發階段發現問題並加以修復。此時
developer 便可機動與 product owner 討論針對
此例外情況是否必須由  G1 提昇至  G2 或 
G3，因此整體而言提昇軟體的強健度。 
C. 對於特定的操作，例如資料庫處理，由於有內
建的交易處理控制機制，很容易可達到 G2，
因此這類的操作一開始實做就必須達到 G2。 
D. 除非 product owner 要求，或是設計過程中發
現某個操作不達到 G3 會變得很難使用，否則
developer 不應該自行嘗試把程式提升到 G3。  
 
該團隊採用本方法已有一年半時間，實務上相當程
度提昇軟體強健度。主要原因為強健度等級這個觀
念簡單易懂，而且也很符合敏捷方法的精神。因為
強健度等級基本上就是秉持著『階段性，逐步改善
例外處理設計』的作法，在許多情況下，正常功能
還沒有全部完成時，是不容易決定例外處理到底應
該做在整個系統的那一層。此時過早、過於精細的
例外處理設計不見得有用，反而可能造成時間上的
浪費。 
 
4.2 維護既有系統 
 7
Practical Guide for Testers and Agile Teams, 
Addison-Wesley, 2009. 
[10] M. Fowler, Is Design Dead?, 
http://martinfowler.com/articles/designDead.ht
ml, 2004. 
[11] Manifesto for Agile Software Development, 
http://agilemanifesto.org/, accessed 2010. 
[12] M. Cohn, User Stories Applied: For Agile 
Software Development, Addison-Wesley, 2004. 
[13] M. Cohn, Succeeding with Agile: Software 
Development Using Scrum, Addison-Wesley, 
2009. 
[14] Robot Framework , 
http://code.google.com/p/robotframework/. 
[15] S. Stelting, Robust Java: Exception Handling, 
Testing and Debugging, Prentice Hall PTR, 
2005. 
[16] 謝金雲，SyncFree: 一個使用Java技術開發之
開放原始碼個人資料同步軟體, 國科會自由
軟 體 專 案 研 究 計 劃 ， 計 畫 編 號
92-2218-E-027-020. 
[17] 佘翠瑱, 陳建村, 謝金雲, “擴充 Eclipse 例
外快速修復功能已實現利外處理策略,” 第二
屆台灣軟體工程研討會, 2006. 
[18] 洪哲瑋, 陳建村, 鄭有進, 謝金雲, “例外處理
程式壞味道的自動化偵測與重構, ” 第五屆
台灣軟體工程研討會, 2009. 
[19] 林蔚儒,陳建村,鄭有進,謝金雲, Tuple-Space分
散式計算強健度提升策略, 第五屆台灣軟體
工程研討會論文集, pp. 237-249, 2009. 
[20] 謝金雲 ,陳建村 , 敏捷式例外處理方法：以
Scrum為例, 第六屆台灣軟體工程研討會論
文集, pp. 100-105, 2010. 
 
 
一、參加會議經過 
筆者於 3/14 出發，3/18 返台。其中 3/15 參加 GRACE 國際高等軟
體工程會議，3/16~17 則參加 AsianPLoP 2010。後者為此行主要
目的，主旨在探討主辦此項會議之可能性，以提供我國此方面研
究學者，與國際間交流的機會。 
PloP 會議自 1994 起每年秋天於 Allerton Park, Illinois
舉行，多年來，隨著設計樣式（design patterns）在軟體與程式
設計研究的蓬勃發展，PloP 受到的關注的逐漸增加。PloP 會議亦
朝全球各區域發展，衍生出EuroPlop、VikingPloP、 ChilliPloP 、
SugarloafPloP、 Scrum PloP 等。筆者指導的博士生，曾於 2004
年參加 Allerton 的 PloP，發表論文 pattern language 論文一篇
（http://www.hillside.net/plop/2004/）。而此次 AsianPloP 則
是第一次在 PloP 官方認定的前提下，在亞洲召開的 PloP 會議，
由日本國立情報研究所的軟體研究中心 NII GRACE Center 主辦。 
15 日及 16/17 日其他空檔，則以聆聽 keynote speech 及其
他 invited talk 為主，包括 Jeff Kramer （IEEE Transaction on 
Software Engineering主編）的Self-Managed Adaptive Systems、
(英文) N/A 
問，以釐清問題。討論過程由 Joseph W. Yoder 與早稻田大學
Hironori Washizaki 教授擔任 facilitator。 
3. 由於PloP論文寫法異於傳統格式，投搞至PloP的每一篇論文，
均由主辦單位指派一名審查者（稱為shepherd），與作者討論，
引導其完成合乎 PloP 規範的論文。可見 PloP 會議，相當耗費
人力。  
4. 由於是第一次辦理，AsianPloP 總發表論文數上少於 30 篇，
其中日文 paper 佔一半以上。這使得英文 paper 必須集中在同
一個 track 之中，因此，論文議題顯得相當發散，含 security、 
software design、 organization change patterns 等。此
情形與傳統 PloP 會議，分領域組織成不同 session 的作法不
同，也使得部份 paper 只獲得撰寫形式優缺點的意見，多數與
會者無法有較深入的探討。 
三、考察參觀活動(無是項活動者略) 
無考察參觀活動。 
四、建議 
國內雖有 pattern language 相關研究人員，但人數尚少。在發表
上，可先參與亞洲或其他地區 PloP 會議，如 AsianPloP 等。至於
主辦 PloP 相關會議的可行性，則仍待進一步觀察。 
無衍生研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
