 2 
 
 
???????????????????
? 
 
?????????????????????? 
 
 
????:NSC 94-2213-E-035-021 
????:2005 ? 08 ? 01 ?? 2006 ? 07 ? 31 ? 
???:???  ??????? 
??????:??????? ???????????? 
 
?????? 
?????????????????????
?????????????????????
?????????????????????
?????????????????????
Gupta ? Gupta (1988)??????????(ingot)
????????????????????
???????Kunnathur? Gupta(1990)????
?????????????????????
????????????????? , ?
Mosheiov(1996)???????????????
?????????????????????
?????????????????????
?????????????????????
?????????????????????
???”?????????”? 
    ??????????????????
?????????????????????
????????????????????
?????????????????????
?????????????????????
?????????????????????
????????????????????
??????????????? 
 
?????????????????????
? 
 
Abstract 
In classical scheduling theory, the processing times 
of jobs are assumed to be constant; however, there are 
many situations in which a job that is processed later 
consumes more time than that same job when 
processed earlier. Gupta and Gupta (1988) provided an 
example of steel rolling mills where the temperature of 
an ingot, while waiting to enter the rolling machine, 
drops below a certain level, requiring the ingot to be 
reheated before rolling. Kunnathur and Gupta (1990) 
gave a fire fighting example where the time and effort 
required to control a fire increases if there is a delay in 
the start of the fire fighting effort. Browne and 
Mosheiov (1996) pointed out as another case the 
surgical operation for a patient under worsening 
conditions. In all of these cases, accomplishing a task 
may need more time as time passes. Scheduling in this 
setting is known as scheduling deteriorating jobs. 
In this  paper, linear deterioration is discussed in a 
two-machine flowshop where the objective is to 
minimize the mean flow time. A branch-and-bound 
algorithm and a heuristic algorithm are provided to 
search for the optimal solution and the near-optimal 
solution, respectively. Computational results are 
 4 
?????????????????????
????????????????????
????????????????????
Kononov ? Gawiejnowicz(2001)???????
????????????????????
????????????????????
????(NP-hard)?Mosheiov(2002)?????
????????????????????
? ? ? ? ? ? ? ? ? ? ? ? (polynomial 
solvable)?????????????????
?(open shop)???????(NP-hard)????
????????????????????
????????????????????
??????????????? NP ???
????????????????????
????????????????????
??  
???????????????????
? ? ? ? ? ? ? ? ? ? ? ? ? Kohler ?
Steiglitz(1975)??????? Gonzalez? Sahni(1978)
??????? NP ??? Cadambi? Sathe(1993)
?????????????????????
????? Pan ? Wu(1996)???????Wang
???(1996)????????????????
????????????????????
??????Della Croce ???(1996)?????
?????????????????????
?????? Hoogeveen ? Kwaguchi (1999) ??
??????????????????Della 
Croce(2002)??? Lagrangean relaxation ????
?????????????????????
????? 30 ???????????????
?????????????????????
?????????????????????
????????????????????
?????????????????????
?????????????????????
?????????????????? 
 
????????? 
?????????????????????
?????????????????????
?????????????????????
?????????????????????
?????????????????????
?????????????????????
?????????????????????
???? 1SPT ??????????????
???????????? 2SPT ??????
?????????????????????
1+2SPT ??????????????????
?????????
1SPT+PI, 2 1+2SPT +PI,SPT +PI ???????
?????????????????????
?????????????????????
?????????????? 
a. 
???? 15n = ???? l ???? 0.05 ? 1?
????????????????????
???? 60,000 ????? 42???????
?????????????????????
?????????????????????
????? l ????????? 1SPT ???
??????????? 0.2 ????????
???? 0.5???????????????
? 1SPT+PI ??????????????
0.004 ???????????? 0.055?  
b. 
?  n ??? 12, 15, 18, 21, 24,? 27????
n,??????? l ??? 0.25, 0.5, 0.75,
? 1.0??????? 1SPT+PI ???????
???????? 0.007??????????
??????????????  
 6 
Journal of Association for Computing Machinery 
22, 106-114. 
[18] Kononov, A., and Gawiejnowicz, S., 2001. 
NP-hard cases in scheduling deteriorating jobs 
on dedicated machines, Journal of the 
Operational Research Society 52(6), 708-717. 
[19] Kunnathur, A.S., and Gupta, S.K., 1990. 
Minimizing the makespan with late start penalties 
added to processing times in a single facility 
scheduling problem, European Journal of 
Operational Research 47, 56-64. 
[20] Mosheiov, G., 1994. Scheduling deteriorating 
jobs under simple linear deterioration, Computers 
and Operations Research 21, 653-659. 
[21] Mosheiov, G., 1995. Scheduling jobs with 
step-deterioration: minimizing makespan on single 
and multi-machine, Computers and Industrial 
Engineering 28, 869-879. 
[22] Mosheiov, G., 1996. -L shaped policies for 
schedule deteriorating jobs, Journal of the 
Operational Research Society 47, 1184-1191. 
[23] Mosheiov, G., 1998. Multi-machine scheduling 
with linear deterioration,  Information 36, 
205-214. 
[24] Mosheiov, G., 2002. Complexity analysis of 
job-shop scheduling with deteriorating jobs, 
Discrete Applied Mathematics 117(1-3), 195-209. 
[25] Ng, C.T., Cheng, T.C.E., and Bachman, A., 2002. 
Three scheduling problems with deteriorating 
jobs to minimize the total completion time, 
Information Processing Letters 81(6), 327-333. 
[26] Pan, C.H. and Wu, C.C., 1996. An asymptotic 
two-phase algorithm to minimize total flow time 
for a two-machine flowshop, International Journal 
of System Science 27, 925-930. 
[27] Pinedo, M., 2002. Scheduling: Theory, Algorithms, 
and Systems, Prentice-Hall, Upper Saddle River, 
NJ. 
[28] Voutsinas, T.G., and Pappis, C.P., 2002. 
Scheduling jobs with values exponentially 
deteriorating over time, International Journal of 
Production Economics 79, 163-169. 
[29] Wang, C., Chu, C. and Proth, J.M., 1996. Efficient 
heuristic and optimal approaches for 
n/2/F/ å iC  scheduling problems, International 
Journal of Production Economics 44, 225-237. 
 
?? : 
???????????  
????????  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 2 
???????????? 
?? ?????? 
    ??? 6 ? 24 ??????? BR????????????????? 6 ?????? 7 ? 30 ??
?????????????????????????????? 8 ???????????????
??????????????????????????????????????? 8 ??????
?? 5 ??????????(25~28)??????????????????????????????
???????????? Minimizing Mean Flow Time in a Two-machine Flowshop with Deteriorating jobs.??
? 6 ? 28 ?????? 11 ? 45 ???????? 20 ??????? 2 ?????? 7 ? 8 ????? BR
???????????????? 10 ??  
 
?? ???? 
????????????????????????????????????????????
?????????????????????????????????????????????? 
(1) ???????????????????????????????????????????
???????Kozan ??????????????????????????????????
???????????????????????????????????????? Pazton
???????????????????????????????????????????  
(2) ???????????????????????????????????????????
???????????????????????????????????????????
???????????????????????????????????????????
???????????????????????????????????? , ???????
???????????????????????????????????????????
???????????????????????????????????????????
??”?????????”?  ???????????????  
(3) ???????????????????????????????????????????
????????????????????????????????????????????
???????????????????????????????????????????
????????????????????????????Hall ??????????????
???  
 
?? ????????? 
    ????????????????????????????????????????????
????? 
 
?? ??  
    ???????????????????? 
 
 
 4 
1. Introduction 
In classical scheduling theory, the processing times of jobs are assumed to be constant; however, 
there are many situations in which a job that is processed later consumes more time than that same job 
when processed earlier. Gupta and Gupta (1988) provided an example of steel rolling mills where the 
temperature of an ingot, while waiting to enter the rolling machine, drops below a certain level, requiring 
the ingot to be reheated before rolling. Kunnathur and Gupta (1990) gave a fire fighting example where 
the time and effort required to control a fire increases if there is a delay in the start of the fire fighting 
effort. Browne and Yechiali (1990) mentioned the problem in the context of minimizing the cycle time of a 
server in a single-server cycle-queue. Mosheiov (1996) pointed out as another case searching for an 
object under worsening weather or growing darkness. In all of these cases, accomplishing a task may 
need more time as time passes. Scheduling in this setting is known as scheduling deteriorating jobs. 
Scheduling problems with time-dependent processing times have received increasing attention in 
recent years. They were first introduced independently by Gupta and Gupta (1988) and Browne and 
Yechiali (1990). These authors  constructed models where the processing time of a job is a function of its 
starting time. Depending on the processing time functions, Alidaee and Womer (1999) classified 
deteriorating jobs models into three different types: linear, piecewise linear, and nonlinear functions. In 
the literature, most research assumes a linear processing time function for each job. For instance, 
Mosheiov (1991) presented a problem of minimizing the total completion time where jobs have the same 
basic processing time and possibly different deterioration rates. Mosheiov (1994) continued the 
research by considering linear deterioration where jobs have a fixed job-dependent growth rate but no 
basic processing times. Cheng and Ding (1998) considered a family of scheduling problems for a set of 
start-time-dependent tasks with release times and linearly increasing/decreasing processing rates on a 
single machine to minimize the makespan. Bachman et al. (2002) proved that minimizing the total 
weighted completion time is NP-hard when the processing time is a linear function. Ng et al. (2002) 
investigated three scheduling problems  with deteriorating jobs to minimize the total completion time on 
a single machine. Cheng and Ding (2003) studied the feasibility problem of scheduling a set of 
 6 
under linear deterioration the two-machine flowshop and open shop problems are NP-hard. In addition, 
they showed that there does not exist a polynomial-time approximation algorithm with the worst case 
ratio bounded by a constant in the three-machine flowshop. Finally, they proved that simple linear 
deterioration in the three-machine open shop problem is ordinary NP-hard. Mosheiov (2002) considered 
the makespan minimization problem and provided a complete analysis of shop scheduling settings 
under simple linear deterioration. He showed that the two-machine flowshop and the two-machine open 
shop are polynomially solvable, but the three-machine flowshop and the three-machine open shop are 
already NP-hard. Finally, he proved that even for two machines the job shop problem is NP-hard. To the 
best of our knowledge, the makespan has been the only criterion considered in flowshop scheduling 
problems. In this paper, we tackle the mean flow time minimization problem in the two-machine flowshop 
under the assumption of linear deterioration. 
The rest of the paper is organized as follows. In the next section we describe the formulation of our 
problem. In Section 3, we introduce several elimination rules including adjacent and non-adjacent cases. 
In Section 4, two lower bounds of the mean flow time of subsequences are derived. In Section 5, we 
establish an exact algorithm and several heuristics to search for the optimal and near-optimal solutions. 
In Section 6, the computational experiment is reported. A conclusion is given in the last section. 
 
2.  Formulation of the problem 
We now formulate the problem of scheduling deteriorating jobs in the two-machine flowshop. A set 
of n jobs J1, … , Jn are to be processed on machines M1 and M2. The processing times of Ji on M1 and M2 
are functions of its starting times, denoted ii ta 1l+  and ii tb 2l+ , respectively, where it1  and it2  
denote the starting times for job Ji on machines M1 and M2, ai and bi are the basic processing times on 
M1 and M2, and l  is the deterioration rate. 
All jobs have the same processing order through the flowshop machines and are ready for processing 
beginning at time 00 ³t . We also assume that there are no set-up times and no precedence 
constraints among operations of different jobs. Each machine can handle only one job at a time, and 
 8 
Next, several properties on the ordering criteria for a pair of adjacent jobs are proposed. Suppose that 
there are two schedules  jiJJss =1  and ij JJss =2  for a given subset of jobs, where s  is a 
partial sequence of jobs and Ji and Jj are the last two jobs. If we know that )()( 21 ss ij CC £  and 
)()()()( 2211 ssss jiji CCCC +<+ , then we can infer that the total completion time in sequence 
rs1  is less than that in sequence rs 2 , where r  denotes any subsequence of the remaining 
unscheduled jobs. Based on this observation, we can prune the subtree rooted at partial schedule 2s  
because the best solution using 2s  cannot be better than that using 1s . Furthermore, let A and B 
denote the completion times for the last job in s  on machines M1 and M2, respectively, and let 
AB )1( +-= lq . 
Property 1 For any two jobs Ji, JjÎN to be scheduled consecutively, if q³ia , { } jii aba <,max , 
and },min{ iij bab £ , then there exists an optimal schedule in which Ji is the immediate 
predecessor of Jj. 
Proof: (It is given in the appendix). 
Property 2 For any two jobs Ji, JjÎN to be scheduled consecutively, if q³ia , ij ba ³ , and 
2
1 1
min{ , , , }
2 2 1 ( 1)
j j i
j j j j i
a b b
a b a b a
l ll
l l l l
++
+ + >
+ + + +
, then there exists an optimal schedule in 
which Ji is the immediate predecessor of Jj. 
Property 3 For any two jobs Ji, Jj Î N to be scheduled consecutively, if 
{ } ( ) ( ) ijijij aabaab 12,max +-+<£££ llq  and 11 +++³ ll
l i
ij
b
aa , then there exists 
an optimal schedule in which Ji is the immediate predecessor of Jj. 
Property 4 For any two jobs Ji, JjÎN to be scheduled consecutively, if q³ia , iji baa ££ , 
and 
( )2
( )
min{ , , }
2 1
j i j i
j j j i
b b b b
b a a a
l
l l
- -
+ + >
+ +
, then there exists an optimal schedule in which Ji 
is the immediate predecessor of Jj. 
 10 
Property 11 For any two jobs Ji, JjÎN to be scheduled consecutively, if i
ji
j a
ab
a ³
þ
ý
ü
î
í
ì
+
-
+
1
,min
l
q  
and q
l
q £<
+
-
+ j
iji a
abb
1
},max{
, then there exists an optimal schedule in which Ji is the 
immediate predecessor of Jj. 
Property 12 For any two jobs Ji, Jj Î N to be scheduled consecutively, if ji bb < , 
i
ji
j a
ab
a ³
þ
ý
ü
î
í
ì
+
-
+
1
,min
l
q , and j
ij a
ab
³
þ
ý
ü
î
í
ì
+
-
+
1
,min
l
qq , then there exists an optimal schedule 
in which Ji is the immediate predecessor of Jj. 
 
4.  Lower bounds  
A good lower bound can further enhance the efficiency of the branch-and-bound algorithm. In this 
section we develop two lower bounds by borrowing an idea from Ignall and Schrage (1965) which does 
not take deterioration into consideration. First, let PS be a partial schedule in which the order of the first 
k  jobs has been determined. Let US denote the set of r remaining unscheduled jobs (note that k?r ?  
n). In addition, let A denote the completion time of the last job in sequence PS on M1 and S be a 
complete schedule obtained from PS. By definition, the completion time for the (k+1)th job is  
[ 1] [ 1] [ ] [ 1]( ) (1 )max{(1 ) , ( )}k k k kC S A a C S bl l+ + += + + + +  
]1[]1[
2 )1()1( ++ ++++³ kk baA ll . 
Similarly, the completion time for the (k+j)th job is  
][][]1[
1
][ )1()1()1()( jkjkk
jj
jk baaASC +++
+
+ +++++++³ lll K  for rj ££1 . 
Therefore, the total completion time for S satisfies the condition that 
åå = += +=
r
j jk
k
j j
SCSCSTC
1 ][1 ][
)()()(  
ååååå = +
+-
= +=
+
==
+++++³
r
j jk
ijr
i jk
r
j
jr
j
k
j j
baASC
1 ][
1
1 ][1
1
11 ][
)1()1()( ll .  (3) 
It is observed in Eq. (3) that the first two terms and the last term on the right hand side do not depend 
on the schedule, and a lower bound of the total completion time for S can be obtained by minimizing the 
third term. It is noticed that å +-= +
1
1
)1(
jr
i
il  is a decreasing function of j; thus, the third term is 
 12 
lower bound of S. That is, 
LB* = max{LB1, LB2}. 
 
5.  Heuristic algorithms  
Once the problem is known to be NP-hard, it is very difficult to design an efficient algorithm to 
determine the optimal solution. In addition to applying exact solution methods such as   
branch-and-bound algorithms and dynamic programming, developing approximate solutions in a 
reasonable time is also viable alternative for managers (Hsu and Lin, 2003). 
Wang et al. (1996) proposed three heuristic algorithms for this problem when deterioration was not 
considered. They first expressed the completion time of a job as a sum of the completion time of the 
immediately preceding job, the idle time on the second machine, and the processing time on the second 
machine. As a consequence, the first method focused on avoiding or reducing idle times on the second 
machine. The first algorithm was basically designed by scheduling jobs according to the SPT rule for 
the basic processing times on M1. For the second algorithm, they viewed the completion time of a job as 
a sum of its arrival time at the second machine, its possible queue time, and its processing time on the 
second machine. Thus, the second method focused on avoiding or reducing waiting times of jobs on 
the second machine. The second algorithm was essentially developed by scheduling jobs according to 
the SPT rule for the basic processing times on M2. The third method chose jobs with local optimality. 
In order to study the impact of the deterioration rate on the accuracy of the approximate solutions, three 
heuristic algorithms are also presented here. The first method schedules jobs by applying the SPT rule 
to the basic processing times on M1 and is denoted SPT1 below. The second method schedules jobs by 
applying the SPT rule to the basic processing times on M2 and is  denoted SPT2. The third method 
schedules jobs by applying the SPT rule to the sum of the basic processing times on M1 and M2 and is 
denoted SPT1+2. In order to further improve the quality of the near-optimal solutions, a pairwise 
interchange (PI) method is also incorporated to refine the quality of the solutions; the modified methods 
are denoted SPT1+PI, SPT2+PI, and SPT1+2+PI. 
 
6.  Computational experiment 
A computational experiment was conducted to test the performance of the branch-and-bound algorithm 
and the accuracy of the heuristic algorithms. All the algorithms were coded in Fortran 90 and run on a 
Pentium 4 PC. The basic job processing times on M1 and M2 were generated from a uniform distribution 
over the integers between 1 and 10. The experiment consisted of two parts. In the first part, we fixed the 
job size at n = 15 and varied the value of l  from 0.05 to 1. In the second part, the algorithms were 
tested with six different job sizes: n = 12, 15, 18, 21, 24, and 27. For each problem size, the deterioration 
rate l  took the values 0.25, 0.5, 0.75, and 1.0. These tests were designed to study the effects of the 
 14 
From Table 2, it is found that the branch-and-bound algorithm can solve most of the problems in a 
reasonable amount of time when the job size is less than or equal to 27. However, the execution time and 
the number of nodes increase dramatically as the job size increases since it is a NP-hard problem. The 
most time-consuming case took about 5.5 hours. Among the heuristic methods, SPT1+PI is the best with 
mean error percentage less than 0.7%, and it does not increase with the job size. Thus, SPT1+PI is 
recommended to obtain a near-optimal solution for this problem. 
 
7.  Conclusion 
Although scheduling deteriorating jobs has been widely discussed recently, it has seldom been 
discussed in the flowshop problem. In this paper, the impact of the deterioration rate is studied in the 
two-machine flowshop total completion time minimization problem. Several dominance properties and 
two lower bounds are derived to facilitate the search for the optimal solution in the branch-and-bound 
algorithm. The performances of several easily-implemented heuristic algorithms are also evaluated. 
The computational experiments show that the branch-and-bound algorithm is quite efficient in terms of 
the number of nodes and the execution time for problems with up to 27 jobs. In addition, comparison 
results show that the SPT rule on the basic processing times on the first machine, when improved by a 
pairwise interchange procedure, performs consistently well, with an average error of less than 0.8%. 
Meanwhile, the problem is easier to solve with the proposed branch-and-bound algorithm when the 
deterioration rate is larger, while the deterioration rate has little effect on the accuracy of the proposed 
heuristic algorithm. 
 
Acknowledgements. The authors are grateful to the editor and the referees, whose constructive 
comments have led to a substantial improvement in the presentation of the paper. This work was 
supported by the National Science Council of Taiwan, Republic of Taiwan, under grant number NSC 
94-2213-E-035-021. 
 
References 
Alidaee, B., Womer, N.K., 1999. Scheduling with time dependent processing times: Review and 
extensions, Journal of the Operational Research Society 50, 711-720. 
Bachman, A., Cheng, T.C.E., Janiak, A., Ng, C.T., 2002. Scheduling start time dependent jobs to minimize 
the total weighted completion time, Journal of the Operational Research Society 53(6), 688-693. 
Browne, S., Yechiali, U., 1990. Scheduling deteriorating jobs on a single processor, Operations Research 
 16 
Mosheiov, G., 1991. V-shaped policies for scheduling jobs, Operation Research 39, 979-991. 
Mosheiov, G., 1994. Scheduling jobs under simple linear deterioration, Computers and Operations 21(6), 
653-659. 
Mosheiov, G., 1995. Scheduling jobs with step-deterioration: Minimizing makespan on a single and 
multi-machine, Computers and Industrial Engineering 28(4), 869-879. 
Mosheiov, G., 1996. L -shaped policies to schedule deteriorating jobs, Journal of the Operational 
Research Society 47, 1184-1191. 
Mosheiov, G., 2002. Complexity analysis of job-shop scheduling with deteriorating jobs, Discrete 
Applied Mathematics 117(1-3), 195-209. 
Ng, C.T., Cheng, T.C.E., Bachman, A., 2002. Three scheduling problems with deteriorating jobs to 
minimize the total completion time, Information Processing Letters 81(6), 327-333. 
Sundararaghavan, P.S., Kunnathur, 1994. Single machine scheduling with start time dependent 
processing time: Some solvable cases, European Journal of Operational Research 78(3), 394-403. 
Voutsinas, T.G., Pappis, C.P., 2002. Scheduling jobs with values exponentially deteriorating over time, 
International Journal of Production Economics 79, 163-169. 
Wang, C., Chu, C., Proth, J.M., 1996. Efficient heuristic and optimal approaches for n/2/F/ å iC  
scheduling problems, International Journal of Production Economics 44, 225-237. 
Yeung, W.K., Oguz, C., Cheng, T.C.E., 2004. Two-stage flowshop earliness and tardiness machine 
scheduling involving a common due window, International Journal of Production Economics 90, 
421-434. 
  
 
 20 
0.95 0.004 0.078 89.18 2686  0.150 0.552 0.002 0.048 0.630 1.689 0.024 0.289 0.257 0.991 0.011 0.121 
1.00 0.003 0.016 42.02 424  0.163 0.435 0.002 0.031 0.603 1.467 0.022 0.258 0.290 0.681 0.013 0.160 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 22 
24 0.25 125.964 3908.797 1491117.12 48699324 2.4?
1810 -  0.345 0.660 0.007 0.031 0.612 1.175 0.036 0.108 0.280 0.559 0.033 0.079 
 0.50 1.272 61.516 18449.72 877530 3.0?
2010 -  0.374 0.895 0.004 0.036 0.754 1.558 0.051 0.274 0.293 0.571 0.030 0.170 
 0.75 0.146 5.125 3168.05 138037 5.1?
2110 -  0.312 0.700 0.004 0.048 0.858 1.933 0.047 0.252 0.285 0.798 0.020 0.140 
 1.00 0.019 1.125 370.56 22411 6.0?
2210 -  0.252 0.645 0.003 0.028 0.803 2.003 0.047 0.232 0.262 0.768 0.024 0.192 
27 0.25 580.116 19988.078 5650830.50 208535785 5.2?
2210 -  0.394 0.725 0.006 0.024 0.662 1.116 0.040 0.200 0.267 0.445 0.030 0.103 
 0.50 21.508 2055.625 228087.73 21616742 2.1?
2310 -  0.374 0.721 0.005 0.035 0.775 1.704 0.047 0.254 0.299 0.646 0.023 0.104 
 0.75 0.711 53.859 9582.78 704847 8.8?
2510 -  0.296 0.869 0.004 0.036 0.719 1.642 0.040 0.344 0.288 0.757 0.021 0.134 
 1.00 0.025 1.344 354.58 19163 3.3?
2610 -  0.263 0.591 0.004 0.057 0.813 1.906 0.045 0.239 0.288 0.812 0.013 0.124 
                   
 
 
 
 
 
 24 
 
Fig. 3. The mean error percentages of SPT1+PI, SPT2+PI, and SPT1+2+PI. 
Fig. 4. 
The maximum error percentages of SPT1+PI, SPT2+PI, and SPT1+2+PI. 
Appendix 
A.  Proof of Property 1: 
Since q³ia , the completion time for Ji in 1s  is  
