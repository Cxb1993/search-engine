 
Figure 1: (a) an animation sequence from a given polygonal mesh and (b) different views of 
decomposed sub-meshes for a given model using the proposed method. 
 
1 INTRODUCTION 
1.1  Overview 
Mesh decomposition or segmentation is an important problem in computer graphics. Good 
mesh decomposition schemes can benefit many applications. Decomposition of a given poly-
gonal mesh partitions the mesh into connected subsets of meshes. According to the types of 
the partitioned subsets, Shamir1 classifies mesh segmentation techniques into two different 
categories: patch-type and part-type methods. 
Generally, the patch-type methods always generate disk-like patches and the part-type me-
thods attempt to partition the mesh into “meaningful” components. Patch-type methods are 
usually used for texture mapping [1], surface parameterization [2] and morphing applications 
[3,4,5,6.7] because geometric property such as planarity and convexity can be well-
maintained in the planner patches. In many applications, the requirement of low-distortion 
after 3D-to-2D surface parameterizations is crucial and therefore the patch-type approach is a 
naturally better choice than the part-type approach. On the other hand, the part-type approach 
is more suitable for applications that need to explicitly identify some sub-parts of a model. 
For example, in shape matching [8] and modeling by parts [9], it is better to decompose the 
whole object into some feature-salient sub-parts to assist in recognition of object parts or to 
facilitate the modification of models. 
The mesh decomposition can be executed in either a fully automatic or a semi-automatic 
manner. In this paper, the proposed method is a fully automatic decomposition algorithm and 
it generates both patch-type and part-type sub-meshes. The major contribution of this paper is 
a novel mesh decomposition using motion information from a given animation sequence. To 
the best of our knowledge, this paper might be the first to use the motion information to de-
compose a mesh model. Most previous work uses the information derived from a static model 
only to perform mesh decomposition. In this paper, the decomposition method based on mo-
tion information can be potentially beneficial for applications such as compression of anima-
tion sequences or generate better level-of-details of models with dynamic motions. We apply 
the proposed method to the compression of animation sequences. Our experimental results 
show that this new decomposition can achieve good compression ratios of animation se-
quences. 
1.1  Related Work 
2 
 
In the past, many related schemes have been proposed to decompose meshes. Gregory et al. 
[3] and Zockler et al. [4] manually decompose the meshes for their metamorphosis applica-
tions. This partitioning task can be very tedious and time-consuming. To minimize the need 
for this manual effort, Shlafman et al. [5] present a k-means based clustering algorithm to 
partition given models into several meaningful and compatible components. Garland et al. 
[10] propose a face clustering based on the planarity metric to decompose meshes. The 
created face hierarchy is very useful in many applications such as collision detection and sur-
vertex i. Note that, in the following, the indices i, j, k do not always mean the same as in Equ-
ation (2). They should be read carefully in the following content. 
 
3.1  Motion Complexity 
The representation of animations using principal components treats a whole object as the 
subject for PCA. Therefore, these principal component bases are not individualized for each 
vertex. This representation reconstructs all the vertices by using the same number of bases. 
However, the motion characteristics of vertices on an object may be quite different. Among 
the first L user-chosen principal component bases, there may be some bases that are unneces-
sary for certain vertices. We attempt to reduce this redundancy. First, we define the motion 
complexity  as the number of necessary eigenvectors for properly describing the motion of 
vertex i. We use Equation (3) to judge whether the j-th base is needed for vertex i. 
ic
 ( ) ( ) ijjkMkjkMk eEVVEVV ×⎥⎦⎤⎢⎣⎡ ′−′−′−′ == ,min,max 11  (3) 
where ⋅  means vector norm. If the value of Equation (3) is below a user-specified thre-
shold cδ , the j-th base is not needed. Moreover, since the eigen-analysis is performed on the 
whole object, the information of a vertex in different eigenvectors may not be orthogonal to 
each other. However, they may be highly correlated. When computing the motion complexity, 
we should treat highly correlated eigen-information as the same or similar contribution by 
only one base. We use a threshold cλ  and the absolute correlation defined in Equation (4) to 
do this judgment for the j-th and k-th bases. 
 
ikij
ikij
ee
ee ,  (4) 
where ⋅  means absolute value. If the value of Equation (4) is above cλ , we decrease mo-
tion complexity  by one. In this manner, we refine the value of motion complexity . After 
the motion complexity on each vertex is defined, we smooth out the value ic  of each vertex by 
averaging it with those of their one-ring neighbors. Figure 2(a) visualizes the motion com-
plexity of a running horse (see Figure 6(a)). We can see that the horse’s head has lower mo-
tion complexity than those of four feet. 
ic ic
 
 
(a)                                        (b) 
Figure 2: (a) Motion complexity visualization. A vertex with the higher gray-value indicates 
the lower motion complexity on this vertex. (b): Motion similarity visualization. An edge 
4 
 
 
Figure 3: The decomposition of the running horse after region growing and some gaps exist 
among partitioned patches 
 
4.2  Boundary Smoothing 
First, we find out all the corner triangles whose vertices connect three different patches on 
the model (see the darkest triangles in Figure 4(a)). Then, we add a new vertex at the centroid 
of each corner triangle and re-triangluate it as shown in Figure 4(b). 
 
       
(a)                                  (b)                         (c) 
Figure 4: (a) The boundary gaps form a triangle strip network. (b): Re-triangulation of a cor-
ner triangle. This square area is the enlargement of the area enclosed by the red lines in (a). 
(c): The boundary gaps do not contain corner triangles 
 
We would like to find a smooth border between the centroids of two adjacent corner trian-
gles. For this purpose, we first find the triangle strips between two adjacent corner triangles. 
Then, we grow the area along the two sides of the triangle strips by extra few layers con-
strained by a distance threshold. See an example in the region enclosed by the thick black 
lines in Figure 5(a). Next, this enclosed region is then flattened onto a 2D circle using the 2L  
stretch criterion [18], as shown in Figure 5(b). Finally, we regularly resample this 2D circle 
(see Figure 5(c)) and use barycentric coordinate to map these samples back to the 3D model. 
We compute the normal for each sample, and find a smooth boundary path P passing through 
these samples by a minimization procedure guided by Equation (6). 
 
 ( )⎟⎟⎠
⎞
⎜⎜⎝
⎛
⋅+
−∑
P ji
ji
nn
vv
1
min  (6) 
6 
 
where  and  are the positions of two neighboring sample i and j on P, and in  and jn  are 
their normals. Figure 5(c) and (d) show the final boundary path between centroids of two 
adjacent corner triangles on 2D circle and on 3D model, respectively. 
iv jv
example, the horse body is partitioned into three regions illustrated by yellow, orange and 
white colors. This result is due to the orange region is near to four feet that have more dy-
namic motion. 
Figure 8 shows experimental configurations and compression ratios for these above two 
examples. In both examples, we use 20 PCA bases to reconstruct the animation sequence and 
we also show their PCA reconstructed errors. The horse and Wally are decomposed into 12 
parts and 19 parts, respectively. After decomposition, we apply the second pass PCA to each 
individual part and then to reconstruct each part. As a result, on the average, we only need 
10.1 and 7.0 PCA bases for each part in horse and Wally cases, respectively. Experiments 
show that we can achieve less PCA errors as well as the higher compression ratios. Addition-
ally, after the second pass PCA, we also evaluate the reconstruction error using distortion 
measure [19] defined below. 
 
)(
~
100
AAverageA
AA
distortion −
−×=  (7) 
where A represents vertex and the normal information in the original animation sequence, 
A~  is reconstructed counterpart using PCA and Average(A) is the average counterpart in the 
original sequence. Both cases show less distortion measurement once we apply 2nd-PCA to 
reconstruct animation sequences. Alexa et al. [17] propose a single pass PCA approach to 
compress an animation sequence. Based on our results, we have the following claim. Once 
we decompose models using 1st PCA motion information and then apply 2nd PCA to each 
individual part, we can potentially achieve better compression ratios than those of a single 
pass or called 1st PCA in this paper to the animation sequence. 
 
 
Figure 6: The decomposition examples using the proposed method. Left: a part of animation 
sequence. Right: two different views of decomposed results 
 
In Figure 6(b) and (c) show a part of another two interesting animation sequences called Dr. 
X (300 frames, 4,935 vertices and 20 components) and Chicken Crossing (400 frames, 3,030 
vertices, and 41 components). In these two examples, the original geometries were already 
decomposed into distinct components as they were created using animation software. Actual-
ly, not all available animation models were originally created as a single component such as 
horse and Wally. Alexa et al. [17] apply a PCA to the whole geometry of Chicken Crossing 
8 
 
 
Figure 7: A flowchart of the animation compression scenario using two-pass principal com-
ponent analysis (PCA) 
 
6 Conclusions and Future Work 
In this paper, we propose a novel mesh decomposition algorithm using motion information 
from an animation sequence. Experiments are demonstrated to successfully partition models 
into sub-meshes. Results fit well motion characteristics inherent in a given animation se-
quence. It is evident that our mesh decomposition technique relies on proper animation. This 
means if a joint is not swinging in the animation sequences, it will not be segmented at or 
near this joint. But in our test data we found that our mesh decomposition technique is not 
very sensitive to the animations. If a joint has swinging slightly among the animation, it will 
be decomposed properly near the joint. This phenomenon is especially obvious in the Wally 
case: the right hand and two feet or Wally only stretch and swing slightly among the anima-
tion, but the decomposition result is good, see Figure 1. The proposed algorithm is, in par-
ticular, useful to handle models with dynamic motions. For example, we apply the proposed 
algorithm to the compression of animation sequences. As a result, the compression ratios for 
tested animation sequences are better than the method using the single-pass PCA such as 
work [17]. In future, we plan to apply the proposed method to generate LOD geometry of an 
animation sequence. In the LOD application, the models are decomposed into sub-meshes 
according to motion similarity. Then, we can apply LOD simplification technique to each 
sub-mesh. For example, in the Chicken Crossing example, once each claw is segmented apart, 
when we individually simplify each claw instead of the whole foot, the shape of each claw 
can be maintained well in much simpler manner using LOD simplification techniques. In this 
paper, the major factor considered is motion information in the proposed algorithm. In future, 
for better decomposition, other geometric metrics such as curvature or concavity and geodes-
10 
 
12 
 
[15] Z. Karni and C. Gotsman. Spectral Compression of Mesh Geometry. SIGGRAPH’00 
Proceedings, pp. 279-286. 
[16] A. Shamir. A Formation of Boundary Mesh Segmentation. Proceedings of the second 
International Symposium on 3D Data Processing, Visualization, and Transmission, 2004. 
[17] M. Alexa and W. Muller. Representing Animation by Principal Components. Euro-
graphics’02, pp. 411-418, 2002. 
[18] P. Sander, J. Snyder, S.Gortler, and H. Hoppe. Texture Mapping Progressive Meshes. 
SIGGRAPH’01 Proceedings, pp. 409-416, 2001 
[19] Z. Karni and C. Gotsman. Compression of Soft-body Animation Sequences. Computer 
& Graphics, Vol. 28, pp. 25-34. 
 
 
計畫成果自評 
在此計畫中，我們已達成預期目標，發展一個利用動畫中的運動資訊來分割 3D 模型
的新技術，我們也將此技術發表在一篇國際會議論文及一篇國內會議論文上。此技術
可廣泛的應用電腦圖學中各種需要模型表面對應資訊的應用中，諸如貼圖，變形等，
是一個非常實用的技術。 
 
 
 
 
