 2 
二、緣由與目的 
 
隨著無線技術的發展，透過基地台溝
通的電子資訊產品不再是唯一的選擇。行
動無基礎架構網路(MANET)為一不需要基
地台支援的網路結構，其包含隨建即用與
低成本等優點。然而，因應特殊應用（如
戰場的軍事用途或災區的救難工作），
MANET 將是最佳的選擇[3]。 
近年來，隨著美國政府對全球衛星定
位系統功能的開放，其應用愈來愈廣泛與
普及，更有許多研究將此定位技術應用在
MANET 無線網絡上[2]。地域性群播即為
一利用定位技術來進行群播的繞送協定，
意指將特定區域內中的行動主機列為傳送
目的點（destination）。然而，現今的 Geocast
繞送協定均廣泛使用洪流及廣播的作法
[11, 12, 14, 15, 16]，當網路分佈變得壅塞
時，封包（packet）因碰撞而造成損壞或遺
失的情形會變得很嚴重[13]，如何確保封包
透過 Geocast 之傳送品質，將面臨相當大的
挑戰。 
MANET 的特點為可移動之隨建即用
的無線網路，即鄰近點均為非固定的行動
主機，如何實作 Geocast 之應用以達到繞送
的目的，高傳送比率是一個重要的依據。
一般研究均廣泛使用洪流及廣播的作法，
即因其具有高傳送比率與作法簡單等優
點。然而，廣播的作法具有隠藏節點
（Hidden node problem）的問題，因此，在
網路壅塞的環境下，封包碰撞的機率會變
得很大[13]。 
基於上述的考量，如何減少廣播的使
用，將有助於減輕碰撞帶來的傷害，且能
降低不必要浪費的負載，故可從此方面著
手改進。因此，計劃中研究如何降低鄰近
點的碰撞機會有其絕對的重要性，並將對
Geocast 實作與應用具有相當程度的貢
獻。其他重要的考量因素，包括高傳送比
率與低負載的要求，其分別為封包在傳送
期間成功到達的比率及 Geocast 繞送中所
收到封包的數量，也證明其是否為一個好
的繞送協定[15]。因此傳送比率與負載必須
有一定的水準。 
因應特殊應用的環境，當高移動速度
且數量大的行動主機分佈在行動無基礎架
構網路時，現行的地域性群播繞送協定無
法提供較具可靠性的封包傳送。以傳統洪
流為基礎的作法，在壅塞的網路中會產生
極大的網路負載，而以建立路徑為基礎的
作法亦不易在高速移動時建立完整的路
徑。針對這樣的問題，計畫中提出可靠的
點對點地域性群播（Reliable Point-to-Point 
Geocast, RP2PG）繞送協定，以單播取代廣
泛使用廣播的作法，不但改善封包傳送的
可靠性問題，並提升傳送比率及降低網路
負載。 
  
三、主要研究方法 
   
針對高速且壅塞的行動無基礎架構網
路下實作地域性群播繞送，我們提出可靠
的點對點地域性群播（RP2PG）繞送協定。
其系統協定堆疊（protocol stack）如圖一所
示，我們針對網路層進行 Geocast 繞送協定
設計，而 MAC 層與物理層皆遵循 IEEE 
802.11 通訊標準[1, 2]。 
以下是本計畫的架構，1.點對點方法
（The point-to-point approach）介紹 RP2PG
於行動主機間的封包傳遞方法，2.選擇鄰近
點 進 行 傳 送 （ Select a neighbor for 
forwarding）介紹四種選擇策略以抉擇下一
個處理傳送的行動主機，3.適應性的傳送區
域（Adaptive forwarding zone）介紹如何轉
換傳送區域以因應 Geocast 傳送失敗時
機，4.適應性的座標軸（Adaptive coordinate 
axis）介紹一個以行動主機現行位置來應變
傳送區域的作法，5. 兩條分離路徑方法
（Two-disjoint path approach）介紹 RP2PG
可能遭遇的最差狀況（worst case）及相對
解決之作法。 
 
 
 4 
時間過後，來源點分別檢查由 A 與 B 點送
來的 Reply，並判斷 B 點的條件最佳（B
比 A 點更接近目的範圍中心點），因此來
源點會選擇B點為下一個處理傳送的行動
主機，並以單播方式將 Data 封包傳送至 B
點。 
 
圖三：發送者等待示意圖 
 
2.3. 最佳方向作法（The best direction 
approach） 
基於“兩點之間以直線為最近”的原
則，可以等分法劃分傳送區域，如圖四所
示，來源點至目的範圍的傳送區域（來源
座標軸的第一象限）可劃分成三等分，並
以中間等分的區域為視為優先區域，因其
較接近目的範圍[8]。當鄰近點接收到來源
點廣播的 Request 封包後，將依接收者所
在的位置決定是否需要等待，若處於優先
的區域（如圖四 B 點），則不用等待，允
許直接做回應；若處於非優先區域（如圖
四 A 點），則要求其等待一段時間，才允
許其回應。在來源點部分，套用選擇最先
回應（2.1 節）原則，如此，位於優先區域
的 B 點將先被來源點選擇。 
 
圖四：最佳方向作法示意圖 
2.4. 延 遲 時 間 演 算 法 （ Defer time 
algorithm） 
來源點仍以選擇最先回應（2.1 節）
為原則，Request 的接收者以其至目的範圍
中心點的距離為依據，決定其回應的延遲
時間（defer time），直至該延遲時間過後
才可廣播 Reply 封包[17]。延遲時間的大
小與其至目的範圍中心點的距離呈正比，
如下公式： 
( )( ) R Ds Dxdefertime x AverageDeferTime
R
− −
= ⋅
 
其中，defertime(x)代表行動主機 x 點
的延遲時間，R 代表行動主機的傳輸範
圍，Ds 與 Dx 分別代表來源點與 x 點各別
至 目 的 範 圍 中 心 點 的 距 離 ，
AverageDeferTime 定義期望等待的平均時
間，可依環境的狀況來調整。依此式運算
的結果，行動主機最長的延遲時間為兩倍
的 AverageDeferTime，最短的延遲時間則
為零。 
圖五為延遲時間演算法的示意圖，當
A 與 B 點收到來源點廣播的 Request後，
各別以其距目的範圍中心點的距離算出該
延遲時間。由於 B 點的距離較 A 點近，故
等待的時間也較短，因此來源點將優先選
擇 B 點。 
 
 
圖五：延遲時間演算法示意圖 
 
3. 適 應 性 的 傳 送 區 域 （ Adaptive 
forwarding zone） 
傳送區域為某一點是否接受該封包
的依據[11]，以發送點（包含來源點）而
言，對其在位置標示座標軸，若 Geocast
目的範圍位於右上角，傳送區域則落於座
 6 
 
圖八：RP2PG 可能遭遇的最差情況 
 
雖然此作法增加了傳送比率成功的
機會，不過也必須付出多一倍的代價來進
行 Geocast，因為多產生一條路徑必須多發
送一些封包才能進行。 
當 Data 封包到達 Geocast 目的範圍
後，須在目的範圍內進行洪流繞送，為避
免對同一 Data 封包做出重覆洪流繞送，當
一個行動主機（Q 點）欲進行洪流繞送前，
若已收到其他鄰近點（P 點）洪流過來的
同一 Data 封包，則不再對此封包進行洪
流。 
 
 
圖九：兩條分離路徑方法示意圖 
 
 
四、結果與討論 
 
圖十 以總節點數目為變數，觀察傳送成功
所需之平均封包數目的變化。基本上，隨
著節點數的增加，再廣播次數會增加，封
包數目亦跟著成長。在 40 至 60 個節點
時，AHBG 與 GAMER 在節點較少時的封
包數卻比節點較多時還大。原因為兩者皆
須建立路徑來進行地域性群播，額外得發
送控制封包，而節點少時較難建立路徑，
且可能有死巷問題出現，造成控制封包的
數目增加。因此，圖十 在 40 個節點時，
GAMER 的封包負載大於其他三個協定。
就整體趨勢來看，AHBG 增加的幅度明顯
比其他的協定來得小（於 120 個節點至少
節省 32.98%以上），表示其在網路壅塞的
環境下，完成一次傳送成功不須花費太多
的封包。 
 
Packets overhead (num. of pkts per oneSuccess)
0
5
10
15
20
25
30
35
40
45
50
40 60 80 100 120
num. of nodes
n
u
m
.
 
o
f
 
p
k
t
s
AHBG
LBM
GeoGRID
GAMER
圖十：改變節點數以觀察封包數目 
 
僅以封包數目可能無法確切掌握封包負載
的變化，因為有些協定需要控制封包來實
作，而控制封包的大小一般都比資料封包
小。圖十一 為以總節點數目為變數，觀察
傳送成功所需之平均封包資料量（bytes）
的變化。在 40 個節點處試與圖十 對照，
GAMER 封 包 資 料 量 小 於 LBM 與
GeoGRID，GAMER 封包數目大於 LBM 
與 GeoGRID，表示 GAMER 在網路不壅塞
時，控制封包使其封包數目大於其他協
定，但就封包資料量而言，是比 LBM 及
GeoGRID 小（資料封包含標頭與 payload 
約為 592 bytes，控制封包約為 80 bytes）。
而 AHBG 增加的幅度仍是所有協定中最
小的（於 120 個節點至少節省 31.06%以
上），表示其在網路壅塞的環境下，不論
就封包數目或封包資料量都相當節省，不
會造成嚴重的網路負載。 
 8 
Packets overhead (num. of bytes per oneSuccess)
0
2
4
6
8
10
12
14
1 5 10 15 20
avg. speed
n
u
m
.
 
o
f
 
b
y
t
e
t
s
 
(
K
B
)
AHBG
LBM
GeoGRID
GAMER
 
圖十五：改變節點速度以觀察封包資料量
（bytes） 
 
圖十六 是在改變節點速度的情況下，觀察
傳送比率的變化。GAMER 的傳送比率明
顯地隨著節點速度的增加而變差，原因為
節點移動速度快，已建立的路徑容易斷
裂，使其無法正常傳送，且其建立路徑的
週期為 1 秒，無法立即反應路徑斷裂來維
護。GeoGRID 的傳送比率亦有下滑的趨
勢，因為 gateway 常離開現有的 grid，當
有資料封包要傳時，可能面臨該 grid 沒有
gateway 的窘境。AHBG 的表現仍是較佳
（於 20 m/s 至少增加 3.6%以上，更比
GAMER 多出 6.86%的傳送比率），由於
其可即時反應速度快所造成的路徑斷裂，
一步步順應當時的網路拓樸來進行繞送。 
 
Delivery Ratio
80%
85%
90%
95%
100%
105%
1 5 10 15 20
avg. speed
d
e
l
i
v
e
r
y
 
r
a
t
i
o
 
(
%
)
AHBG
LBM
GeoGRID
GAMER
 
圖十六：改變節點速度以觀察傳送比率 
 
雖然 AHBG 在節點速度快時，封包負載與
傳送比率均優於其他協定，但在延遲時間
方面也付出了代價。圖十七 為改變節點速
度以觀察延遲時間，由於節點移動速度
快，AHBG 無法順利繞送至目的範圍，故
須反覆地進行交握程序，也增加了整體的
延遲時間。雖然其於 20 m/s 時比其他協定
至少多出 18.37%的延遲時間，但事實上，
AHBG的 37.13 ms 仍算不錯的平均延遲時
間。 
 
End-to-end latency
0
5
10
15
20
25
30
35
40
45
50
1 5 10 15 20
avg. speed
l
a
t
e
n
c
y
 
(
m
s
)
AHBG
LBM
GeoGRID
GAMER
 
圖十七：改變節點速度以觀察延遲時間 
 
五、計畫成果與自評 
 
本計畫提出在隨意無線網路中，當節
點數目多或移動速度快時，如何進行地域
性群播，以提供高傳送比率與低封包負載
的傳送服務，計畫中提出適應性的交握式
地域性群播（ Adaptive Handshaking-Based 
Geocasting, AHBG）繞送協定，以交握式機
制之傳送來取代現今廣泛使用廣播的作
法，而此交握式機制能反應當下網路拓樸
的變化。根據模擬結果顯示，在網路壅塞
或節點移動速度快時，封包負載比其他協
定至少減少 21.55%以上，傳送比率亦比其
他協定佳，甚至接近 100%。然而，延遲時
間是 AHBG 付出的代價，主要由於交握程
序所花費的時間。 
多媒體應用是近年來熱門的項目，而
以 AHBG 良好的繞送特性正好可以應用
在多媒體資料傳輸，如此將有低頻寬負
載、高傳送比率等優點。延遲時間與延遲
變化率（jitter）將是未來主要面對的挑戰，
以達到服務品質（Quality of Service, QoS）
的要求。 
 
六、參考文獻 
 
[1]  The VINT Project. The network simulator - ns-2. 
A collaboratoin between researchers at UC 
Berkeley, LBL, USC/ISI, and Xerox PARC. 
[Online]. Available: 
http://www.isi.edu/nsnam/ns/ 
[2]  T. Imieliński and J.C. Navas, “GPS-based 
geographic addressing, routing, and resource 
discovery,” Communications of the ACM, vol. 42, 
no. 4, Apr. 1999, pp. 86-92. 
