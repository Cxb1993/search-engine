I 
摘要 
本子計劃開發出一個適用於總計劃之分散式多核心嵌入式原型系統的微處理器，並整合子計劃二
所提供的網路介面(Network Interface, NI)模組，搭配子計劃三的作業系統，提供一個分散式共享記憶體
架構(DSM)下的單一節點軟硬體平台，具體成果如下： 
 
(1) 根據研究內容發表二篇重要論文於IEEE TVLSI期刊，及相關國際研討會論文。 
(2) 完成NCKU RISC32核心的SystemC模擬版本實作。 
(3) 完成單核心全系統(full system: Linux + platform) 開發模擬平台建置。 
(4) 發展處理器 Trace reuse cache 架構，可以節能75%同時增進效能21%。 
(5) 提出用於判斷處理器晶片好壞之軟體測詴程式及其發展方法，本成果為目前全世界最佳之fault 
coverage， 高達98.11% 接近scan-based solution。 
(6) 完成NCKU RISC32與除錯軟體GDB整合，並且完成軟體開發環境的建置。 
(7) 整合其他子計畫內容，完成一個完整的DSM單一節點平台之模擬平台。 
(8) 整合NCKU RISC32 processor 之RTL版本與其他子計畫之相關RTL模組，建置一個完整的DSM單一
節點平台之RTL版本設計。 
(9) 將完整之分散式多核心嵌入式原型系統移植到實際的硬體發展平台進行驗證，最終提供完整的軟硬
體驗證的多核心平台。 
關鍵詞: 多核心、全系統模擬平台、電子系統層級、除錯軟體。 
 
Abstract 
The goals of this project are to develop the different processor abstraction models and their 
implementations for a distributed multi-core embedded prototype system and to integrate the network 
interface (Network Interface, NI) modules, and the distributed shared memory architecture (DSM). We have 
completed the single node platform used for the multi-core DSM system. The items accomplished are listed 
below: 
(1) For the project results, we have published two papers on the IEEE TVLSI journals and several 
conference papers.  
(2) We have completed the NCKU RISC32 core SystemC simulation version and verified with Linux 
kernel.  
(3) We have completed the development of a single core full system simulation platform.  
(4) We have developed the Trace reuse cache architecture which can save up to 25% power consumption 
and improve 21% in performance for embedded pipelined processor. 
(5) We have completed the NCKU RISC32 debugging system with GDB and built the development 
environment.  
(6) We have integrated the other sub-project items and completed a single node of the DSM simulation 
platform.  
(7) We have integrated the RTL version of NCKU RISC32 and other related RTL modules to build a 
multi-core DSM platform.  
(8) We have completed the FPGA prototyping verification. 
Keywords: Multi-core, full system simulation platform, ESL, debugger system. 
2 
的能力，例如使用超長指令字組(very long instruction word, VLIW)或超純量(superscalar)的架構來設計微
處理器，將可降低資料危障(data hazard)與結構危障(structural hazard)所造成的延遲，提昇指令層級平行
度(instruction-level parallelism, ILP)，更進一步的提昇程式執行的整體效能。 
對於分支指令的處理[1]-[5]有說明，目前有些減少分支指令損失效能的理論與方法，主要分為靜態
技術與動態技術。靜態技術主要是在編譯期間(compile time)對指令進行重新的安排，以達成消除或減
少控制危障所造成的損失；動態技術則是增加額外的輔助硬體，在程式執行期間(run time)對分支指令
的行為或分支目標位址進行特殊的處理或預測，以達成消除或減少控制危障所造成的損失，動態技術
通常有較高的效能但也較為複雜。 
 DSM 之單一節點平台設計： 
本子計劃的目標之一是設計一個 DSM 多核心系統中的單一節點平台。單一節點平台就類似傳統的
SoC 系統架構，包含了 Microprocessor、External Memory Controller、及 On-Chip Bus 等主要元件，及
其他相關的 IP 模組。比較特別的地方是本子計劃之單一節點平台必頇整合子計劃二所提供的 NI 模組
才能銜接到計劃二所設計出來的連結網路，整合成一個完整的多核心系統。 
在 SoC 系統中常見的 On-Chip Bus 架構有 ARM 公司的 AMBA (Advanced Microcontroller Bus 
Architecture)[6][7][8]、IBM 公司的 PLB(Processor Local Bus)[9][10]、以及 Altera 公司的 Avalon[11]。本
計劃預計採用 ARM 公司的 AMBA，但因為本計劃之單一節點內部主要是需要一個高速的 CPU-Memory 
Bus，所以只採用其中 AHB(Advanced High-performance Bus)的架構。 
 DSM 多核心系統中的單一節點平台除了整合子計劃二的 NI 模組之外，還必頇整合子計劃三
的作業系統及 NI 驅動程式，才能成為一個完整的單一節點軟硬體平台，最後再與子計劃二的連結網路
一起移植到總計劃的 DSM 多核心系統硬體驗證平台。 
為了配合總計劃使用 ESL(Electronic-System-Level) 的設計流程，以加速其他子計劃的進行及快速
的硬體架構模擬與分析，在本子計劃初期會先以 SystemC [12]來開發一個模擬平台給總計劃進行整合，
以提供給一個完整的系統模擬平台給子計劃三及子計劃四進行 OS、NI 驅動程式、DSM、IDE 環境、
及 AP 的開發與設計。 
本子計劃主要是以單一節點內包含一顆一般用途微處理器的架構來建立 DSM 多核心系統中的單
一節點平台。但是隨著多媒體應用的發展，本子計劃以此單一節點平台為基礎，另外延伸發展單一節
點內部 SMP(symmetric shard-memory multiprocessors)架構的同質性/異質性多核心架構，以提昇單一節
點平台的處理效能。 
4 
先移植先前使用 OS 驗證 NCKU RISC32 的經驗到此模擬平台來驗證其正確性，最後再交由總計劃進行
整合，並提供給子計劃三及子計劃四進行 OS、NI 驅動程式、DSM、IDE 環境、及 AP 的開發與設計。 
 
Packet Switch
Networking Interface (NI)
Functional Model
NCKU RISC32
Functional Model
Multi-Core (DSM)
Node 1 Node 2 Node N
Behavioral 
Memory 1
(Flash)
Behavioral 
Memory 2
(SDRAM)
Bus Functional ModelArbiter Decoder
MIF
 
圖 1 DSM 之單一節點平台 System C 模型設計圖 
 
 步驟二：DSM 之單一節點平台的 RTL 設計 
在這一步驟中，我們使用 RTL 的硬體描述語言來設計 DSM 之單一節點平台，如圖 2 所示。NCKU 
RISC32 及 AHB 相關模組的部份可以直接從先前開發 NCKU RISC32 的環境直接移植過來。接下來再
設計 DMA、External Bus Interface (EBI)、SDRAM Controller 及其他相關模組。其中 EBI 模組及 SDRAM 
Controller 是為了銜接外部特定規格的 Flash 及 SDRAM，我們直接採用總計劃中硬體發展版上的 Flash
及 SDRAM 規格進行設計。最後再整合子計畫二的 NI 模組。完成此 RTL 版本的 DSM 之單一節點平台
之後，我們一樣會先移植先前使用 OS 驗證 NCKU RISC32 的經驗到此平台來驗證其正確性，再提供給
子計劃三開發及 Poring 其 OS 及 NI 驅動程式。最後將此完整的 DSM 之單一節點軟硬體平台移到總計
劃進行整合。另外本計劃持續針對 NCKU RISC32 的效能進行改善，所以如果有任何更新版本的 NCKU 
RISC32，都可以隨時代換平台中的 NCKU RISC32。 
6 
AHB
EBI
NI
NCKU 
RISC32
SDRAM
Controller
Flash SDRAM
AHB
EBI
NI
NCKU 
RISC32
SDRAM
Controller
Flash SDRAM
AHB
EBI
NI
NCKU 
RISC32
SDRAM
Controller
Flash SDRAM
AHB
EBI
NI
NCKU 
RISC32
SDRAM
Controller
Flash SDRAM
Crossbar Switch
Router
Node 1 Node 2 Node 3 Node 4
 
圖 3 四個 Node 的系統架構圖 
 
AHB
EBI
NI
NCKU 
RISC32
SDRAM
Controller
SDRAM
AHB
EBI
NI
NCKU 
RISC32
SDRAM
Controller
SDRAM
AHB
EBI
NI
NCKU 
RISC32
SDRAM
Controller
Flash
SDRAM
AHB
EBI
NI
NCKU 
RISC32
SDRAM
Controller
SDRAM
Crossbar Switch
Router
Node 1 Node 2 Node 3 Node 4
I/O Boot
Arbiter
 
圖 4 四個 Node 共享單一顆 Flash 的系統架構圖 
 
五、 研究結果  
本報告敘述本計畫所獲得之成果。本計劃的目的是建置一個多核心處理器暨分散式多核心系統節
點平台，架構如圖 5 所示。 
 
8 
ESL 平台上有更大的彈性。最後，OCP 為 Open Source，有現成的成品讓我們做參考，可以縮短實現計
畫的時間。 
 
Packet Switch
Multi-Core (DSM)
Node 1 Node 2 Node N
SC_NOC
SC_NI ( Networking Interface )
SC_AMBA ( AHB, Arbiter, Decoder…)
System C
SC_NCKU_RISC32 SC_EBI
SC_Flash
SC_SDRAM_CTRL
SC_SDRAM
GDB Debugger 
Integrated Development Environment ( IDE )
SC_Debugger
OCP (Layer 2)
OCP (Layer 2) OCP (Layer 2)
 
圖 6 與其他子計劃的整合介面 
 
(2) 軟體設計部份： 
由於我們所設計的 NCKU RISC32 CPU 為 ARM like 的 CPU，因此我們參考 GNU 的 ARMulator 與
GDB 程式，仿照其溝通方式來設計 CPU Simulator 與 IDE 的溝通介面。GDB 設計中是利用設定中斷點
的方式，來讓 Simulator 進行正確的單步執行或是達成除錯的目的。 
GDB 為 GNU 所開發的軟體 Debugger，其利用 Linux Socket 介面與待測程式連接，再透過 GDB 的
Command Line Interface 由使用者輸入指令控制 Simulator 的動作，進行程式執行的模擬。整個架構及
溝通介面如圖 7 所示。 
使用 Linux Socket 介面連接 GDB 與 Simulator 之後，需要注意的問題就是程式當中所使用的 System 
Call。以 C 程式為例，檔案讀寫與系統時間的參考等，都是呼叫函式庫加以輔助處理。但是函式庫最
後也需要呼叫 System Call 才能完整執行動作，所以我們在這部份也針對常用的 System Call 實做一個
System Call Processor 與 RISC32 Simulator 連接，由 System Call Processor 負責呼叫實際作業系統之
System Call 加以處理，如圖 8 所示。 
 
10 
其他子計畫可以先利用此環境提早進行開發系統時間近似模型，以對於硬體行為能做出更完善的驗證。 
我們使用 CoWare公司的 Platform Architect 軟體建置一個 AMBA-Based 單一核心系統的 ESL平台，
圖 9 為該單一核心系統的架構。系統中主要模組有 CPU、Memory (SRAM、SDRAM、Flash)、AMBA 
(AHB、APB)、Interrupt Controller、Timer 及其他 Peripheral。 
 
AHB-APB
Bridge
AHB
APB
Timer
(SB804)
CPU
(ARM926EJS)
Interrupt 
Controller
(PL190 VIC)
SDRAM
CA Module
MyIP (0) MyIP (1)
SRAM
CA Module
M (Ins.) M (Data)
S
M S M S
S
S
S
M
S
DMA Controller
(PL080)
UART
(PL011)
S
Flash
CA Module
S
File File
M S
Watchdog
(SP805)
S
Network 
Interface
M S
NoC
 
圖 9 ESL 單一核心系統架構圖 
 
我們完成了 CoWare ESL 開發環境的系統平台的建置，並撰寫好範例程式提供予其他子計畫團隊
參考。計畫二的團隊可以利用本子計畫提供的環境及範例，快速的開發 NI 與 NoC 之軟硬體進行驗證。
但是對於子計畫三的團隊撰寫相關 I/O Device 的驅動程式較不便利，因為在 CoWare 的系統平台上要移
植作業系統的負擔太大，而且會造成模擬速度不足.  
因此在模擬速度的考量下，利用 CoWare PA 建置出來的 ESL 系統模擬平台較適用於硬體設計與開
發，包括 NI、NoC。因為此平台之中的 ARM926EJS CPU 屬於 Cycle-accurate 的版本，如果在此平台上
執行完整的 OS、以及上層的 DSM Middleware 及 DSM Application，CPU 的模擬速度將成為該 ESL 模
擬平台的瓶頸。 
為了加速 ESL 平台的模擬速度，我們將 QEMU 與 CoWare PA 中的 ESL 模擬平台整合，讓 QEMU
取代原本在 ESL 模擬平台中的 CPU 的位子。我們利用 QEMU 來模擬 ARM Versatile Baseboard 的環境，
因為 QEMU 使用 Binary Translation 的技術來模擬 ARM CPU 執行指令的動作，雖然沒有硬體時序的時
間特性，但也因此加速 ESL 平台的模擬速度。 
12 
Qemu-SystemC 
Interface
Host Bus Adapter
( SA, DRAM, … )
Virtual Host 1
( O/S, Driver, Application… )
Virtual I/O 
Interface
Physical I/O Interface 
( ex: Network Interface Card, Graphic Display Card, FPGA Board… )
Physical I/O 
Interface
Physical Host 2
( O/S, Driver, 
Application… )
QEMU
Qemu-SystemC 
Interface
Host Bus Adapter
( SA, DRAM, … )
Virtual Host 2
( O/S, Driver, Application… )
Virtual I/O 
Interface
QEMU
ESL Tools (SystemC, C/C++, HDL)
Computer 2Computer 1
Physical Host 1
1
2
Physical I/O Channel ( ex: Network … )
Virtual I/O Channel
 
圖 11 Network Offload Engine 示意圖 
 
整合 DSP 之異質性多核心平台則是一個著重於系統平台上有多個處理器時的範例，如圖 12 所示。
我們採用工研院所提供的 PAC DSP，在這個範例當中可以清楚如何溝通兩個不同的處理器單元，並且
在兩個處理器之間進行大量的資料交換。 
 
CoWare-SystemC Wrapper
On-Chip-Bus ( AHB, AXI, OCP,… )
VM Access
Port
DRAM
SystemC Module
M S S
PAC
M S
Interrupt 
Controller
S
Communication Mechanism
Communication Mechanism
QEMU-SystemC Wrapper
ARM System Emulator (ARM Versatile baseboard )
AHB Interface Virtual Hardware
QEMU
(C, C++)
CoWare PA
(SystemC, HDL)
Host OS
 
圖 12 Heterogeneous Multi-core Platform 
 
子計畫二即可將其 NI 及 NoC 整合至該平台；子計畫三直接在 QEMU 上的 OS 進行 NI 的 Driver
及 DSM Middleware 所需要的 API 的撰寫及驗證；子計畫四則可在此 Multi-QEMU 的模擬平台上進行
DSM Middleware 及 DSM Application 的撰寫，以建置一個完整的分散式多核心系統之 ESL 系統模擬平
台。圖 13 顯示本計劃成功透過 Multi-QEMU 及 CoWare PA 所建構出的分散式多核心系統的 ESL 系統
模擬平台架構圖。 
14 
 
圖 14 指令執行流程圖 
 
於是我們便開始在 SimpleScalar 上實驗我們的想法。我們先修改一下管線設計，我們把每一級的
指令都記錄起來跟著管線走，然後在管線後放一個歷史暫存單元(HTB)來暫存這些執行過的指令。我們
來觀察原本去 Instruction Cache 抓的指令有多少機會能在這個 HTB 裡面找到，架構如圖 15。 
 
圖 15 分支指令執行情形 
 
為了觀查 HTB 的命中率，我們選用了 SEPC2000 作為測詴程式包括整數程式與浮點數程式共 26
16 
 
圖 17 Trace reuse cache 架構 
 
如圖 17 右為加上 Trace reuse cache 後，讀取指令的流程圖。主要分為 Cache mode 和 TRC mode。
一開始都是在 Cache mode 工作，指令都從 ICache 抓，並記錄執行過的指令到 HTB，如果有跳躍指令
則記錄指令流的進入點到 TET 中。直到要抓取的 PC 值位址在 TET 中有 hit 則轉為 TRC mode，指令換
成從 HTB 開始抓。 
HTB 的寫入和刪除則根據下列演算法來實作。 
18 
Interface
Device
SDRAM
Controller
RISC32
Arbiter MuxM2S MuxS2M
SDRAM
Decoder VIC TimerTube
Reset & Remap
Controller
AHB
FIFO
USB 
interface
 
圖 18 單核心 FPGA 實體平台 
 
驗證流程如下： 
(1)在本機上利用 ARM ADS Tool chain。將軟體編譯成 ARM 機器語言。 
(2) 透過 USB 將機器語言透過 USB interface -> Altera Quartus FIFO -> AHB -> SDRAM 
Controller->SDAM cell 路徑載入到開發板上的記憶體顆粒中，開發板上一共有 8 個 16MB 的記憶體顆
粒，在此階段為了驗證方便僅使用一個。 
(3)程式中若需要回傳訊息，如 printf()。則透過本團隊設計之特有機制，將訊息導向至 USB interface，
並由本機端之 USB driver 收取後顯示於本機端螢幕上。此特有機制將於多核心實體平台詳盡介紹。 
驗證結果如圖 19。 
20 
第一階段，將 NI 模組加入到單核心平台上，但並不包含 NOC。如圖 20 所示。 
 
Interface
Device
SDRAM
Controller
RISC32
Arbiter MuxM2S MuxS2M
SDRAM
NI
Decoder VIC TimerTube
Reset & Remap
Controller
AHB
FIFO
USB 
interface
 
圖 20 多核心 FPGA 模擬平台第二階段 
 
此階段的目的為驗證 NI 提供者之驅動程式是否達到預期效果。若貿然將 NOC 及另一節點帶進來
一起模擬，若發生錯誤，除錯的複雜度將大幅提升。待此階段正確無誤後便可將此平台提供給負責作
業系統的其他子計畫，在硬體模擬平台上作作業系統開發及驗證之用。並進入第二階段。 
第二階段中我們加上了 NOC 模組及另一個節點，而這也就是我們要放在一塊 Daughter Board 上的
平台。如圖 21 所示。注意因篇幅關係我們省略了部分細節(如 USB 等)。此階段為驗證 NI/NOC 與單核
心平台整合狀況，因此僅採取 2 個節點的版本，NOC 上的拓墣與 routing 部分在此階段尚未整合進來。 
22 
  
 
圖 22  Daughter Board 
 
根據 FPGA 使用率與腳位數量評估後，我們決定 Daughter Board 的每一半用來實現 DSM 上的一個
節點，也就是說模擬平台第二階段雙核心的版本就是一張開發板上的系統架構。如圖 23 所示，而其中
NOC 是實作在某一邊的 FPGA 上。每個節點中都有各自的 AHB bus，並掛載作業系統所需的計時器
Dual Timer SP804 及中斷控制器 Vector Interrupt Controller PL190，以符合作業系統開機之需求。 
24 
 
圖 24  ARM ADS Toolchain 
 
(2) 透過 USB 將 image 送到 FPGA 上，FPGA 上有一個負責 USB 構通介面的硬體(USB interface)，此
硬體藉由 header 和 tail 的資訊把 binary code 寫到 SDRAM 對應的位置上，如圖 25 所示。完成之後
將 CPU 的 RESET 線拉起，CPU 此時才開始到 SDRAM 抓取指令去執行。 
 
圖 25 Image header 
 
(3) 若程式中需要利用 printf()來顯示資訊，在開發板尚無作業系統支援時，無法直接處理 SWI(Software 
26 
入式微處理器為哈佛 (Harvard) 架構的微處理器，包含了五級管線架構，分別為：Fetch、Decode、
Execution、Memory Access、Write Back。此處理器可當作獨立的元件，搭配不同設計的 SRAM-based
記憶體系統、Cache 與 MMU。並提供 Handshake Protocol 介面讓內嵌式微處理器可以與 Coprocessor
溝通。 
我們以 NCKU RISC32 做為單一核心微處理器的核心架構，並將此架構移植至本計畫的開發板上。
目前已經實現將 Daughter Board 元件加以利用，包括 SDRAM Memory Controller、USB Debugger 
Support，讓單一核心的架構變得更加完整。 
我們以此單一核心嵌入式系統為基礎，整合 NI 及 NoC 的硬體，在發展板上實現雙核心嵌入式原
型硬體系統。整合進 NI 與 NOC 模組後，透過複製節點與 NOC 連結，完成三節點實體平台，執行矩
陣相乘等平行程式驗證無誤。 
底層平台完成後，便可提供給 NI/NOC 子計劃作更大幅度之擴充與 NI/NOC 設計研究。另一方面
也提供給負責上層軟體(OS、Driver、DSM Middleware 及 DSM Application)之子計劃，進行更完整的全
系統模擬驗證。 
 
六、 結論與建議 
本子計畫完成一個適用於多核心系統的微處理器改進，並且設計整合成一個多核心系統的單一節
點平台，該平台包括三個層面：加速軟體開發的 NCKU RISC 32 Integrated Development Environment、
方便硬體與作業系統整合的全系統平台與 FPGA 實作與驗證用平台。我們除了提供設計好的多核心開
發平台之外，也提供相關硬體與軟體設計的範例，如 Network Offload Engine 與 Heterogeneous Multi-core
兩個完整使用範例，讓其他子計劃能提早進行研究、設計與驗證。關於 NCKU RISC32 處理器核心的
效能改進與降低功耗的部份也提出了相關之研究成果，整體功耗可以下降 25%而效能可以提升 21%。 
 
 
 
 
 
 
II 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。 
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100 字為限） 
□ 實驗失敗 
□ 因故實驗中斷 
□ 其他原因 
說明： 
本計畫預期架設完成多核心平台之單一核心節點的部份，我們提出三個不同
層面的成果包括軟體層面、軟硬體共同開發層面與 FPGA 驗證，並且與其他子
計畫加以整合完成。同時也完成了單一核心的效能與功耗改進的設計。 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 x3  □未發表之文稿 □撰寫中  □無 
專利：□已獲得 □申請中 □無 
技轉：□已技轉 □洽談中 □無 
其他：（以 100 字為限） 
已發表論文： 
1. Yi-Ying Tsai, Chung-Ho Chen, “Energy-efficient Trace Reuse Cache for Embedded Processor,” to 
appear in IEEE Transactions on Very Large Scale Integration Systems, 2010. (SCI, EI) 
2. Tai-Hua Lu, Chung-Ho Chen, and Kuen-Jong Lee, “Effective Hybrid Test Program Development 
for Software-Based Self-Testing of Pipeline Processor Cores,” to appear in IEEE Transactions on 
Very Large Scale Integration Systems, 2009. (SCI, EI) 
3. Chen-Chieh Wang, Ro-Pun Wong, Jing-Wun Lin, and Chung-Ho Chen, “System-Level 
Development and Verification Framework for High-Performance System Accelerator,” IEEE 
International Symposium on VLSI Design, Automation & Test (VLSI-DAT), April 27-30, 2009, 
Hsinchu, Taiwan. 
4. Jing-Wun Lin, Chen-Chieh Wang, Chin-Yao Chang, Chung-Ho Chen, and Kuen-Jong Lee, “Full 
System Simulation and Verification Framework,” Proceedings of the Fifth International 
Conference on Information Assurance and Security (IAS-2009), August 18-20, 2009, Xi'an, 
China. 
無衍生研發成果推廣資料
研討會論文 2 2 100% 
1. 
Chen ­ hieh Wang, 
Ro­un Wong, Jing
­ un Lin, and 
Chung ­ o 
Chen, ＇System ­
evel Development
and Verification 
Framework for 
High ­ erformance 
System 
Accelerator,＇ 
IEEE 
International 
Symposium on VLSI 
Design, 
Automation &amp；
Test (VLSI ­ AT), 
April 27­0, 2009, 
Hsinchu, Taiwan.
2. 
Jing­un Lin, Chen
­hieh Wang, Chin
­ao Chang, Chung
­o Chen, and Kuen
­ong Lee, ＇Full 
System 
Simulation and 
Verification 
Framework,＇ 
Proceedings of 
the Fifth 
International 
Conference on 
Information 
Assurance and 
Security (IAS ­
009), August 18­
0, 2009, Xi'an, 
China. 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 5 5 100%  參與計畫人力 
（本國籍） 博士生 2 2 100% 
人次 
 
 
