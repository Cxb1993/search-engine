 1
行政院國家科學委員會專題研究計畫成果報告 
三維晶片系統之設計與測試技術研發 
子計畫二：三維晶片系統之繞線技術研發(2/2) 
計畫編號：NSC 99-2220-E-007-008 
執行日期：民國 99 年 8 月 1 日至 100 年 7 月 31 日 
主持人：王廷基 清華大學資訊工程系 
 
 
一､中文摘要 
本子計畫已研發完成一個三維晶片
全域繞線器，能加入適量穿矽連接孔
連結不同晶片層的線路訊號，並有效
減少繞線的總溢出量與總長度。此外
此繞線器也能盡量避免繞線經過高溫
區域以提高晶片之可靠度、也能將具
關鍵時序的線路訊號儘可能繞至事先
設定的金屬層範圍以滿足晶片時序限
制、以及於天線效應考慮下儘可能產
出符合天線規則的繞線結果以提高晶
片的可製造性。此繞線器的各項功能
也已經由實驗加以驗證其優越性。  
   
關鍵詞：三維晶片、穿矽連接孔、全
域繞線 
 
Abstract 
  In this subproject we have developed 
and implemented a global routing tool 
for 3D ICs that use Through-Silicon 
Vias (TSVs) as vehicles for inter-die 
interconnections. Our routing tool 
considers not only traditional routing 
objectives such as congestion and 
wirelength but also important issues 
related to temperature, manufacturability, 
and timing. For the thermal issue, our 
tool focuses on how to avoid routing net 
segments through hot-spot regions as 
much as possible, while for the 
manufacturability and timing issues, it 
respectively considers how to minimize 
the amount of antenna violations and 
how to honor layer directives for 
timing-critical nets. The robustness of 
our router has been demonstrated by 
convincing experimental results.  
 
Keywords: 3D IC, Through-Silicon Via,  
Global Routing 
 
二､計畫緣由與目的 
1. Introduction 
Three-dimensional integrated circuits 
(3D ICs), that have multiple device 
layers stacked atop each other, have 
received great attention from the 
industry and the academia in recent 
years [1-5]. In particular, several 
alliances have been formed for 3D IC 
design, and the Advanced 
Stacked-System Technology and 
Application Consortium (Ad-STAC) 
organized by ITRI of Taiwan in July 
2008 is one of them [6]. There are a 
number of partners, varying from 
equipment, material, foundry, design, 
EDA, to packaging and testing 
companies, participate in Ad-STAC. 
The benefits offered by 3D ICs 
include reduced circuit size, improved 
circuit performance, lower power 
consumption, and higher heterogeneous 
integration. 3D ICs have become an 
alternative platform for 
system-in-package (SiP) or 
system-on-chip (SoC) solutions because 
different applications, e.g., memory and 
image sensor products, can be realized 
by them [7,8]. 
 
2. Thermal Challenge 
Extensive research and experimental 
results have pointed out that high 
temperatures can cause problems for 2D 
ICs. For example, they can increase the 
leakage power and decrease the 
performance and reliability of a 2D IC 
[9,10]. The thermal problem is 
 3
area is still far from maturity, which 
motivates us to investigate 3D IC global 
routing in this subproject.   
 In this subproject we focus on 
developing and implementing a global 
routing tool for 3D ICs that use TSVs as 
vehicles for inter-die interconnections. 
Our routing tool considers not only 
traditional routing objectives such as 
congestion and wirelength but also 
important issues related to temperature, 
manufacturability, and timing. For the 
thermal issue, our tool avoids routing net 
segments through hot-spot regions as 
much as possible, while for the 
manufacturability and timing issues, it 
respectively considers how to minimize 
the amount of antenna violations and 
how to honor layer directives for 
timing-critical nets. The rest of this 
report will describe our research results.        
 
三､研究方法 
  Our tool decomposes the global 
routing problem into two problems: the 
TSV assignment problem followed by 
the 2D IC global routing problem. Both 
problems are solved in a die-by-die 
manner. For each die the TSV 
assignment problem asks to plan a 
proper TSV location for each 3D net on 
the die such that no TSV capacity 
constraint is violated and the total 
wirelength of all the nets on the die is 
minimized. Once the location of each 
TSV is planned, the remaining problem 
becomes to perform global routing for 
each die. To do this, a state-of-the-art 
academic global router NTHU-Route 2.0 
[46], which was previously developed 
by our research group, has been 
enhanced and applied. The enhanced 
router is able to run in different modes, 
including the normal mode, 
thermal-aware mode, the antenna-aware 
mode, and the layer-directives-aware 
mode (see Figure 1). The key ideas 
behind the TSV assignment step and 
each different mode of our global router 
are explained below.  
1. TSV Assignment 
  Our router assumes that the given 
placement result does not allocate any 
TSV yet, and adopts the via-first 
technology to  insert TSVs. Inserting a 
TSV into a net will induce two pins; one 
is located on the metal 1 (M1) layer of 
the associated die, and the other is 
located on the top metal layer of the die 
that is immediately below the associated 
die. The more TSVs are assigned, the 
more routing resources are consumed. 
Therefore our router uses the fewest 
number of TSVs for each net and places 
them to connect the pins distributed on 
different dies. The TSV assignment 
problem is solved in a die-by-die manner, 
and each subproblem asks to find a TSV 
assignment for a die such that no TSV 
capacity constraint is violated and the 
total wirelength of all the nets on the die 
is minimized. Here the wirelength of a 
net on a die is calculated by the half 
perimeter of the minimum bouding box 
that enlcoses the pins and the assigned 
TSV of the net on the die. Each 
subproblem is solved optimially by 
transforming it into a min-cost flow 
problem.    
 
2. Congestion and 
Wirelength-aware Global 
Routing  
When our router runs in the normal 
mode, it targets simultaneous 
minimiztaion of congestion and 
wirelenght, which is the same as 
NTHU-Route 2.0. We have found three 
memory usage problems regarding the 
source code of NTHU-Route 2.0. First, 
the code uses hash tables to reduce the 
runtime of maze routing and the tables 
consume enormous memory space. 
Second, it has severe memory leakage. 
Third, it declares too many unused data 
structures. We have enhanced 
NTHU-Route 2.0 by developing 
effective implementation techniques to 
solve the aformentioned three problems 
and to improve the solution quality. 
 5
approach [33]. All experiments were 
conducted on a Linux workstation with 
an Intel Xeon 3.0 GHz CPU and 64G 
memory. 
The experimental results are shown in 
Table 1, where each 3D IC test case 
consists of 4 dies. The term “WS” in 
Table 1 denotes the white space ratio of 
every die. The white space was evenly 
distributed to all global bins of each 
device layer to produce the TSV 
capacities. We performed our router on 
two different values of “WS”, where the 
first one has 30% white space while the 
second one has 20% white space. We 
compare the results in terms of total 
overflow (TOF), wirelength (WL), and 
runtime (cpu). Each runtime result was 
measured in seconds. For all test cases 
except ibm01, our 3D IC global router 
could produce overflow-free solutions 
like NTHU-Route 2.0. For the test cases 
with 30% WS, our router averagely 
achieved 7.34% wirelength 
improvement as compared with 
NTHU-Route 2.0, and for the test cases 
with 20% WS, our router still acquired 
6.95% shorter wirelength than that of 
NTHU-Route2.0. The overflow result 
obtained by our router on the test case 
“ibm01” is as expected because the 
routing resources in the 3D IC is not 
adequate for our router to make 
detouring routes as 2D IC routing. The 
runtime increases of our router were 
mainly caused by solving the TSVs 
assignment problem and they are 
acceptable. 
 
2. Thermal-aware Global Routing 
We compare our 3D IC global router 
in the thermal-aware mode with 
NTHU-Route 2.0. The thermal profile of 
each test case was randomly generated 
under reasonable assumptions. All the 
test cases for our 3D IC global router 
were generated from the ISPD98 2D IC 
global routing benchmarks by using a 
die-folding method. All experiments 
were conducted on a Linux workstation 
with an Intel Xeon 3.0 GHz CPU and 
64G memory. 
Table 2 shows the comparisons 
between the two routers on ISPD98 
benchmarks, in terms of TOF, WL, cpu, 
and the number of net segments located 
in the hot spots (#WSIHS). Our router 
obtained overflow-free solutions for all 
test cases but “ibm01”. For the test cases 
with 30% WS, our router achieved 6% 
shorter wirelength and required 9.46X 
runtime on average, in comparison with 
NTHU-Route 2.0. For the test cases with 
20% WS, our route also achieved 6% 
shorter wirelength and required 9.89X 
runtime on average, in comparison with 
NTHU-Route 2.0. As for #WSIHS, our 
thermal-aware router produced 21% 
average reduction, no matter which WS 
value was used; this can prolong the 
mean-time-to-failure and increase the 
reliability of a chip significantly. 
We also compare our router with 
NTHU-Route 2.0 for 2D ICs. The test 
cases are from the ISPD98 2D IC global 
routing benchmarks and our router 
skipped the TSV assignment step for 
each given 2D IC test case. All 
experiments were conducted on a Linux 
workstation with an Intel Xeon 3.0 GHz 
CPU and 64G memory. Table 3 shows 
the comparisons between the two  
routers on ISPD98 benchmarks, in terms 
of TOF, WL, cpu, and #WSIHS. As can 
be seen from Table 3, our router was 
able to obtain zero TOF for each 
benchmark just like NTHU-Route 2.0. 
When comparing the TWL and cpu 
results, our router generated 3% longer 
wirelength and required 2.37X runtime 
on average, in comparison with 
NTHU-Route 2.0. Nonetheless, the 
average 20% reduction on  #WSIHS 
can increase the reliability of a chip 
significantly. 
 
3. Antenna-aware Global Routing 
We compare our router in the 
antenna-aware mode with NTHU-Route 
2.0 for 2D ICs. The test cases are from 
 7
3D global routing. 
 
五、計畫成果自評 
  For this two-year subproject, we have 
published 2 journal papers [48,52] and 6 
conference papers [47,49,50,51,53,54]. 
More details are explained below.  
The results on thermal-aware global 
routing have been published in 
VLSI-DAT 2010 [47]. The results on 
antenna-aware global routing have been 
published in ICCAD 2010 [49]. The 
results on layer-directives-aware global 
routing have been published in ICCAD 
2010 [50] and ISPD 2011 [51].  
We have enhanced the conference 
paper of NTHU-Route 2.0 and published 
its journal version in IEEE TCAD 2010 
[48]. We have investigated a 3D-IC 
fixed-outline problem, and developed a 
novel methodology for it. The results 
have been published in IEEE TVLSI 
2011 [52] and ICGCS 2010 [53]. Finally 
we have also studied a problem of 
simultaneous redundant via insertion 
and line end extension in the 
post-routing stage to enhance via yield, 
and developed and implemented an 
accelerated zero-one integer linear 
program based approach to solve the 
addressed problem optimally. The 
results   have been published in 
ASP-DAC 2011 [54].   
 
六､參考文獻 
[1]  W. R. Davis et al., “Demystifying 
3D ICs: The Pros and Cons of Going 
Vertical,” IEEE Design & Test of 
Computers, Vol. 22, pp. 498-510, 
2005. 
[2]  T. Vucurevich, “3D 
Semiconductor’s: More from 
Moore,” Proc. of Design Automation 
Conference, pp. 664, 2008. 
[3]  J. Bautista, “Tera-scale Computing 
and Interconnect Challenges,” Proc. 
of Design Automation Conference, 
pp. 665-667, 2008. 
[4]  P. D. Franzon et al., “Design and 
CAD for 3D Integrated Circuits,” 
Proc. of Design Automation 
Conference, pp. 668-673, 2008. 
[5]  W. Haensch, “Why Should We Do 
3D Integration?,” Proc. of Design 
Automation Conference, pp. 
674-675, 2008.  
[6]  游淑惠, “台灣半導體發展新紀
元-3D IC,＂ 系統晶片科技中心技
術期刊, 9 期, pp. 3-10, 2008.  
[7]  
http://techon.nikkeibp.co.jp/article/H
ONSHI/20070328/129633/ 
[8]  
http://www.toshiba.co.jp/about/press
/2007_10/pr0101.htm 
[9]  K. Banerjee, “Thermal Effects in 
Deep Submicron VLSI 
Interconnects,” Proc. of International 
Symposium on Quality Electronic 
Design, 2000. 
[10] Y. K. Cheng et al., “ILLIADS-T: 
An Electrothermal Timing Simulator 
for Temperature-sensitive Reliability 
Diagnosis of CMOS VLSI Chips,” 
IEEE Trans. on Computer-Aided 
Design of Integrated Circuits and 
Systems, vol. 17, pp. 668-681, 1998. 
[11] W. K. Chu and W. H. Kao, “A 
Three-Dimensional Transient 
Electrothermal Simulation System 
for IC's,” Proc. of THERMINIC 
Workshop, pp. 201-207, 1995. 
[12] T.-Y. Wang, Y.-M. Lee, and C. C.-P. 
Chen, “3D Thermal-ADI: An 
Efficient Chip-level Transient 
Thermal Simulator,” Proc. of 
International Symposium on 
Physical Design, pp. 10-17, 2003. 
[13] C.-H. Tsai and S.-M. S. Kang, 
“Cell-level Placement for Improving 
Substrate Thermal Distribution,” 
IEEE Trans. on Computer-Aided 
Design of Integrated Circuits and 
Systems, vol. 19, pp. 253-266, 2000. 
[14] Y. K. Cheng and S.-M. S. Kang, 
“An Efficient Method for Hot-Spot 
Identification in ULSI Circuits,” 
Proc. of International Conference on 
Computer-Aided Design, pp. 
124-127, 1999. 
 9
[41] J Cong and Y. Zhang, “Thermal-driven 
Multilevel Routing for 3-D ICs,” Proc. of 
Asia and South Pacific Design Automation 
Conference, pp. 121-126, 2005. 
[42] J Cong and Y. Zhang, “Thermal Via 
Planning for 3-D ICs,” Proc. of international 
Conference on Computer-Aided Design, pp. 
744-751, 2005. 
[43] T. Zhang, Y. Zhang, and S. Sapatnekar, 
“Temperature-aware Routing in 3D ICs,” 
Proc. of Asia and South Pacific Design 
Automation Conference, pp. 309-314, 2006.  
[44] M. Pathak and S. K. Lim, “Thermal-aware 
Stener Routing for 3D Stacked ICs,” Proc. of 
international Conference on Computer-Aided 
Design, pp. 205-211, 2007. 
[45] J. Cong, M. Xie, and Y. Zhang, “An 
Enhanced Multilevel Routing System,” Proc. 
of International Conference on 
Computer-Aided Design, pp. 51-58,  2002. 
[46] Y.-J. Chang, Y.-T. Lee, and T.-C. Wang, 
“NTHU-Route 2.0: A Fast and Stable Global 
Router,” Proc. of International Conference 
on Computer-Aided Design, pp. 338-343, 
2008. 
[47] Y.-T. Lee, Y.-J. Chang, and T.-C. Wang, “A 
Thermal-Aware Global Router,” Proc. of 
International Symposium on VLSI Design, 
Automation and Test, pp. 279-282, 2010. 
[48] Y.-J. Chang, Y.-T. Lee, J.-R. Gao, P.-C. Wu, 
and T.-C. Wang, “NTHU-Route 2.0: A robust 
global router for modern designs,” IEEE 
Transactions on Computer-Aided Design of 
Integrated Circuits and System, vol. 29, no. 
12, pp. 1931-1944, 2010. 
[49] T.-H. Lee and T.-C. Wang, “Simultaneous 
Antenna Avoidance and Via Optimization in 
Layer Assignment of Multi-layer Global 
Routing,” Proc. of International Conference 
on Computer-Aided Design, pp. 312-318, 
2010. 
[50] Y.-J. Chang, T.-H. Lee and, T.-C. Wang, 
“GLADE: A Modern Global Router 
Considering Layer Directives,” Proc. of 
International Conference on 
Computer-Aided Design, pp. 319-323, 2010. 
[51] T.-H. Lee, Y.-J. Chang, T.-C.  Wang, “An 
Enhanced Global Router with Consideration 
of General Layer Directives,” Proc. of 
International Symposium on Physical Design, 
pp. 53-60, 2011. 
[52] M.-C Tsai, T.-C. Wang, and T.T. Hwang, 
“Through-Silicon Via Planning in 3-D 
Floorplanning,” IEEE Transactions on Very 
Large Scale Integration (VLSI) Systems 
(TVLSI), vol. 19, no. 8, pp. 1448-1457, 
2011. 
[53] M.-C. Tsai, T.-C. Wang, and T.T. Hwang, 
“Through-Silicon Via Planning in 3D 
Fixed-Outline Floorplanning,” Proc. of 
International Conference on Green 
Circuits and Systems, pp. 584-588, 2010. 
[54]  S.-T. Lin, K.-Y. Lee, T.-C. Wang, C.-K. 
Koh, and K.-Y. Chao, “Simultaneous 
Redundant Via Insertion and Line End 
Extension,” Proc. of Asia and South 
Pacific Design Automation Conference, 
pp. 633-638, 2011. 
 
 
 
 11
Table 2 
The results and comparisons between our 3D IC global router in the thermal-aware 
mode and NTHU-Route2.0.  
NTHU-Route 2.0 Our thermal-aware 3D IC global 
router 
(WS:30%) 
Our thermal-aware 3D IC global 
router 
(WS:20%) Benchmark 
TOF WL cpu #WSIHS TOF WL cpu #WSIHS TOF WL cpu #WSIHS
ibm01 0 62587 1.3 3315 119 61576 26.8 3819 153 61697 31.3 3837 
ibm02 0 169828 2.1 9495 0 154654 11.4 7328 0 154178 11.8 7388 
ibm03 0 146465 1.3 10470 0 134187 10.6 7263 2 134042 10.7 7331 
ibm04 0 166591 3.5 11938 0 155347 10.3 8942 0 155194 10.4 8812 
ibm06 0 277755 3.0 22111 0 257137 22.1 14761 0 256651 22.1 14822 
ibm07 0 366287 3.9 21171 0 352006 31.8 18757 0 351869 32.3 18742 
ibm08 0 404950 3.6 26062 0 390576 38.1 21343 0 390775 37.9 21180 
ibm09 0 414838 3.9 29028 0 391731 46.9 20801 0 391764 46.4 20675 
Ibm10 0 579959 6.9 46644 0 539374 67.9 31500 0 539223 69.5 31513 
ratio  1.00 1.0 1.00  0.94 9.46 0.79  0.94 9.89 0.79 
 
Table 3 
The results and comparisons between our 2D IC global router in the thermal-aware 
mode and NTHU-Route 2.0.  
NTHU-Route 2.0 Our thermal-aware 2D IC global router Benchmark TOF TWL cpu #WSIHS TOF TWL cpu #WSIHS 
ibm01 0 62587 1.3 3315 0 64315 1.85 2850 
ibm02 0 169828 2.1 9495 0 174153 3.36 7657 
ibm03 0 146465 1.3 10470 0 150465 3.82 8170 
ibm04 0 166591 3.5 11938 0 171762 5.94 9377 
ibm06 0 277755 3.0 22111 0 290937 13.52 17067 
ibm07 0 366287 3.9 21171 0 371918 5.97 17626 
ibm08 0 404950 3.6 26062 0 413877 7.41 21747 
ibm09 0 414838 3.9 29028 0 426007 8.75 22330 
Ibm10 0 579959 6.9 46644 0 607185 23.21 35734 
ratio  1.00 1.0 1.00  1.03 2.37 0.80 
 
Table 4 
The antenna-aware results and comparison between COLA and LAVA.  
 
 
 13
附錄 
 
   附上以下 4 篇與計畫成果相關的論文，其中第 1 篇為 thermal-aware global 
routing 的成果、第 2 篇為 antenna-aware global routing 的成果、第 3 及第 4 篇
為 layer-directives-aware global routing 的成果： 
 
1. Y.-T. Lee, Y.-J. Chang, and T.-C. Wang, “A Temperature-Aware Global 
Router,” Proceedings of International Symposium on VLSI Design, 
Automation and Test (VLSI-DAT), pp. 279-282, April 2010. 
2. T.-H. Lee and T.-C. Wang, “Simultaneous Antenna Avoidance and Via 
Optimization in Layer Assignment of Multi-layer Global Routing,” 
Proceedings of International Conference on Computer-Aided Design 
(ICCAD), pp. 312-318, November 2010. 
3. Y.-J. Chang, T.-H. Lee and, T.-C. Wang, “GLADE: A Modern Global 
Router Considering Layer Directives,” Proceedings of International 
Conference on Computer-Aided Design (ICCAD), pp. 319-323, November 
2010. 
4. T.-H. Lee, Y.-J. Chang, T.-C.  Wang, “An Enhanced Global Router with 
Consideration of General Layer Directives,” Proceedings of International 
Symposium on Physical Design (ISPD), pp. 53-60, March 2011. 
 
B. Previous Work: NTHU-Route 2.0
Subinterval Identification
All subintervals processed?
Monotonic Routing
Overflow solved?
Adaptive Multi-source
Multi-sink Maze Routing
All two-pin nets in current 
subinterval processed?
Main Stage
Yes
Yes
o
o
Yes
o
C
o
n
v
erg
ed
?
Yes
o
Refinement Stage
Layer Assignment 
Stage
Congested Region Identification
Congested Two-pin Nets Marking
Plane Projection
Net Decomposition
Probabilistic Routing
L-Shaped Pattern 
Routing
Initial Stage
Edge Shifting
Fig. 1. Flowchart of NTHU-Route 2.0 [9].
The flowchart of NTHU-Route 2.0 [9] is shown in Fig. 1. There
are 4 routing stages in NTHU-Route 2.0: initial stage, main stage,
refinement stage, and layer assignment stage.
In the initial stage, NTHU-Route 2.0 projects a multi-layer design
onto a 2D plane, and then adopts FLUTE [13] to decompose each
multi-pin net into a set of two-pin nets. It next applies probabilistic
L-shaped pattern routing for each two-pin net to generate the initial
congestion map. For each two-pin net, the probabilistic L-shaped
pattern routing will add the full demand (1) to each edge along
a straight path or the half demand (0.5) to each edge along a
probabilistic L-shaped route. After that, the router tries to further
reduce the congestion by using the edge shifting technique [14].
Finally, it routes each two-pin net with the L-shaped pattern which
has less total cost. In the last two steps, the cost of edge g is defined
below [14]:
costg = 1 +
h
1 + e−k(dg−cg)
(2)
where h and k are user-defined parameters.
In the main stage, NTHU-Route 2.0 uses a rip-up-and-reroute
technique to reroute congested two-pin nets based on congested
region identification. Every ripped-up two-pin net is rerouted by
monotonic routing [14] first. If it cannot find an overflow-free path for
the net, then an adaptive multi-source multi-sink maze routing method
will be applied. NTHU-Route 2.0 keeps repeating the whole rip-up
and reroute process until the total overflow is no more than a user-
defined threshold or a user-defined number of iterations is reached.
In addition, the following history based cost function is adopted in
this stage to define the edge cost:
costg = bg + hg × pg + vcg (3)
Here bg is the base cost of using edge g; the cost decreases moderately
from 1 to 0 while the number of iterations increases, so NTHU-
Route 2.0 can detour routing paths to farther regions in order to
further reduce the total overflow in later iterations. hg is a historical
cost which amplifies pg if g is frequently overflowed in previous
iterations. pg is an overflow-predicted penalty term. According to
the number of times that g is overflowed in previous iterations, pg
dramatically raises its value before g is going to be overflowed again
and hence discourages the router to route any net on g. Finally, vcg is
an expected via cost when using edge g causes a bend on the routing
path. Additionally, vcg also decreases while the number of iterations
increases.
In the refinement stage, there are two differences from the main
stage. First, the criterion for ripping up and rerouting a congested
two-pin net is simplified. The ordering of rip-up and reroute is based
on the number of overflowed edges that a two-pin net passes through.
If there is a tie, then it selects the one with larger bounding box.
Second, the cost of an edge in this stage is set to 1 if the edge has
overflow; otherwise it is set to 0. By doing this, NTHU-Route 2.0
mainly focuses on finding an overflow-free path for every congested
two-pin net.
For multi-layer designs, the layer assignment method [15] is
applied for mapping the solution from the projected plane to the
original multiple layers.
III. ENHANCEMENTS FOR NTHU-ROUTE 2.0
In this section, we will describe the enhancements for NTHU-
Route 2.0 to consider temperature.
A. A Temperature-Aware L-Shaped Routing Method Employed Dur-
ing Initial Routing
TAGORE [12] considers temperature by using an L-shaped pattern
routing technique, while NTHU-Route 2.0 uses the same technique
for initial routing but without being aware of temperature. TAGORE
iteratively applies the technique for two-pin nets without creating
any overflow. In other words, if both L-shaped paths of a two-pin
net violate any edge capacity constraint, TAGORE will simply leave
it to maze routing. On the other hand, NTHU-Route 2.0 adopts the
technique to route every two-pin net regardless of whether a routing
path causes overflows or not.
To take temperature into account during the initial stage, we modify
the L-shaped pattern routing method as follows: (1) If both L-shaped
paths pass through the same number of hot spots, we use the original
cost function to choose one of the two paths; (2) if only one path
passes through hot spots, we choose the other one; (3) If both paths
pass through different numbers of hot spots, we choose the one with
less number of hot spots involved.
B. Temperature-Aware Cost Functions
In the main stage, NTHU-Route 2.0 uses a history based cost
function to reduce the congestion and the impact of detour. In our
router, we add a thermal term to the original cost function in order
to penalize the net segments in hot spots. The new cost function for
edge g is defined as follows:
costg = bg + hg × pg + vcg + tg (4)
where tg is the thermal penalty term and is defined below:
tg =
{
TC × (1− e−βe−γi) if passing g enters a hot spot
0 otherwise
(5)
In order to guide the router to avoid hot spots, TC is calculated below:
TC = α× (Lh + Lv) (6)
To obtain the longest horizontal and vertical hot-spot chains, Lh and
Lv , our router scans all hot spots in horizontal and vertical directions.
Fig. 2 shows a metal layer which consists of 7 × 8 global tiles and
has the hot spots marked in the pink color. In this example, Lh = 6
and Lv = 4. In equation (6), (Lh+Lv ) approximates the maximum
wirelength to escape hot spots; α is a number between 0 to 1 and
can control the relative importance between the total number of net
segments located in hot spots and the total wirelength. If α is close
TABLE I
COMPARING OUR TEMPERATURE-AWARE ROUTER WITH NTHU-ROUTE 2.0 USING TWO TYPES OF THERMAL PROFILES.
Benchmark
NTHU-Route 2.0 Our router (NTHU-Route 3.0)
TOF TWL(e5)
Runtime
(min)
#NSIHS
on First
Type
#NSIHS
on Second
Type
On First Type On Second Type
TOF TWL(e5)
Runtime
(min) #NSIHS TOF
TWL
(e5)
Runtime
(min) #NSIHS
adaptec1 0 53.44 10.0 298267 293774 0 56.93 31.1 246578 0 55.01 20.9 255353
adaptec2 0 52.29 2.1 129698 298397 0 52.57 3.2 110086 0 53.12 4.0 249946
adaptec3 0 131.01 10.9 781138 715831 0 136.98 50.0 521369 0 133.36 16.7 582519
adaptec4 0 121.69 2.6 761986 666172 0 123.20 7.7 648905 0 123.93 6.4 559997
adaptec5 0 155.38 23.0 1011177 875893 0 167.75 144.1 755597 0 158.45 48.7 753073
bigblue1 0 55.95 13.7 339010 320988 0 62.05 53.4 300065 0 58.00 22.7 294914
bigblue2 0 90.59 8.5 395446 528626 0 94.12 36.7 342846 0 92.99 20.9 477692
bigblue3 0 130.69 5.0 589746 739765 0 131.39 8.3 543681 0 132.70 8.9 627381
bigblue4 160 230.90 82.2 960838 1314834 162 229.94 183.0 843178 162 237.30 212.8 1222844
newblue1 0 46.53 6.2 264751 273340 0 46.90 27.7 252473 0 48.20 65.8 250947
newblue2 0 75.70 1.2 274423 434101 0 76.58 3.1 242123 0 77.27 2.3 369226
newblue3 31454 106.49 122.4 1304035 593775 32532 110.47 623.6 1211470 31622 111.39 168.7 461210
newblue4 138 130.46 96.7 707430 724467 158 135.25 390.5 612054 150 132.61 111.2 625441
newblue5 0 231.58 19.4 1350100 1290939 0 247.97 131.9 1213459 0 236.96 49.4 1092296
newblue6 0 176.89 18.1 698366 1002858 0 193.14 162.5 635277 0 180.15 54.2 900969
newblue7 54 355.22 107.8 1559629 1982744 78 358.03 248.4 1401896 86 360.96 334.5 1798632
Average – 1.00 1.00 1.00 1.00 – 1.04 4.05 0.86 – 1.02 2.64 0.87
 
 
200 400 600 800 1000 1200
200
400
600
800
1000
1200
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
(a) NTHU-Route 2.0
 
 
200 400 600 800 1000 1200
200
400
600
800
1000
1200
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
(b) Our router
Fig. 5. The congestion maps of newblue5 for the first type of thermal profile.
 
 
650 700 750 800 850 900
200
250
300
350
400
450
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
(a) NTHU-Route 2.0
 
 
650 700 750 800 850 900
200
250
300
350
400
450
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
(b) Our router
Fig. 6. The congestion map of newblue5 in hot spots.
shows that our router significantly reduces the total number of net
segments located in the yellow-circled hot spots in Fig. 3(b), when
compared to NTHU-Route 2.0.
TABLE I also shows that our router again generated 12 overflow-
free solutions under the second type of thermal profiles. For the other
four benchmarks, our router could still achieve comparable TOF
results. Overall, it can reduce 13% of net segments located in hot
spots, and increase the wirelength by 2% only. The runtime of our
router is less than three times of that of NTHU-Route 2.0.
V. CONCLUSIONS
In this paper, we have presented several techniques to improve the
interconnect reliability of a chip by considering temperature in global
routing. These enhancements have been integrated into a state-of-the-
art global router NTHU-Route 2.0 and have produced encouraging
results.
ACKNOWLEDGMENT
This work was supported in part by National Science Council
of Taiwan under Grant Numbers NSC-98-2220-E-007-011, NSC-98-
2220-E-007-013, and NSC-98-2220-E-007-032.
REFERENCES
[1] “ISPD 2007 Global Routing Contest,”
http://www.sigda.org/ispd2007/contest.html.
[2] “ISPD 2008 Global Routing Contest,”
http://www.sigda.org/ispd2008/contests/ispd08rc.html.
[3] M. M. Ozdal and M. D. F. Wong, “Archer: A history-based global routing
algorithm,” IEEE Transactions on Computer-Aided Design of Integrated
Circuits and Systems, vol. 28, no. 4, pp. 528–540, 2009.
[4] M. Cho, K. Lu, K. Yuan, and D. Z. Pan, “Boxrouter 2.0: A hybrid
and robust global router with layer assignment for routability,” ACM
Transactions on Design Automation of Electronic Systems, vol. 14, no. 2,
pp. 1–21, 2009.
[5] Y. Xu, Y. Zhang, and C. Chu, “FastRoute 4.0: global router with efficient
via minimization,” in Proceedings of Asia and South Pacific Design
Automation Conference, 2009, pp. 576–581.
[6] J. A. Roy and I. L. Markov, “High-performance routing at the nanometer
scale,” IEEE Transactions on Computer-Aided Design of Integrated
Circuits and Systems, vol. 27, no. 6, pp. 1066–1077, 2008.
[7] M. D. Moffitt, “Maizerouter: Engineering an effective global router,”
IEEE Transactions on Computer-Aided Design of Integrated Circuits
and Systems, vol. 27, no. 11, pp. 2017–2026, 2008.
[8] K.-R. Dai, W.-H. Liu, and Y.-L. Li, “Efficient simulated evolution
based rerouting and congestion-relaxed layer assignment on 3-d global
routing,” in Proceedings of Asia and South Pacific Design Automation
Conference, 2009, pp. 570–575.
[9] Y.-J. Chang, Y.-T. Lee, and T.-C. Wang, “NTHU-Route 2.0: a fast and
stable global router,” in Proceedings of International Conference on
Computer-Aided Design, 2008, pp. 338–343.
[10] H.-Y. Chen, C.-H. Hsu, and Y.-W. Chang, “High-performance global
routing with fast overflow reduction,” in Proceedings of Asia and South
Pacific Design Automation Conference, 2009, pp. 582–587.
[11] J. Black, “Electromigration – a brief survey and some recent results,”
IEEE Transactions on Electron Devices, vol. 16, no. 4, pp. 338–347,
Apr. 1969.
[12] A. Gupta, N. D. Dutt, F. J. Kurdahi, K. S. Khouri, and M. S. Abadir,
“Thermal aware global routing of VLSI chips for enhanced reliability,” in
Proceedings of International Symposium on Quality Electronic Design,
2008, pp. 470–475.
[13] C. Chu, “FLUTE: fast lookup table based wirelength estimation tech-
nique,” in Proceedings of International Conference on Computer-Aided
Design, 2004, pp. 696–701.
[14] M. Pan and C. Chu, “FastRoute: a step to integrate global routing into
placement,” in Proceedings of International Conference on Computer-
Aided Design, 2006, pp. 464–471.
[15] T.-H. Lee and T.-C. Wang, “Congestion-constrained layer assignment for
via minimization in global routing,” IEEE Transactions on Computer-
Aided Design of Integrated Circuits and Systems, vol. 27, no. 9, pp.
1643–1656, 2008.
(a)
diffusion
gate
antenna
jumper
via
wire
(b)
diffusion
gate
antenna
Fig. 2. Illustration of antenna and jumper insertion.
additional (stacked) vias and hence may hurt the yield, reliability,
and performance of a design.
Because of the increasing complexity in modern design, neither
layer assignment nor jumper insertion alone can completely solve the
antenna problem. Therefore layer assignment can be a complementary
approach (instead of a competing approach) for jumper insertion [14].
The experiment results reported in [14] show that by properly
considering antenna effect during layer assignment, the amount of
required vias caused by jumper insertion (which is invoked after
layer assignment) can be signiﬁcantly reduced; this indicates that
layer assignment helps improve the feasibility of jumper insertion
and plays a key role for antenna avoidance.
(a)
(b)
diffusion
gate
diffusion
gate
e1e2e3
e1
e2
e3
antenna
antenna
Fig. 3. Two layer assignment results with different antennas.
In this paper, we study a layer assignment problem which takes
antenna effect into account. The problem uses the total wire overﬂow
and the maximum wire overﬂow of a given 2D global routing solution
to form two wire congestion constraints, and asks to transform the 2D
global routing solution into a 3D one. The objective is to minimize
the amount of antenna violations and the via count while the two
wire congestion constraints are satisﬁed. Different from the layer
assignment problem which considers via count only [1], [5], [6], [9],
[11], our problem is more practical because it also takes the antenna
problem into account. Compared to the layer assignment problem
addressed in [14], our problem is more general because it considers
both wire congestion constraints and minimizes the via count. We
present an algorithm that tackles the addressed layer assignment
problem in a net-by-net manner. Our algorithm is based on a novel
extension of the key ideas of [14] and a judicious modiﬁcation of a
via-count-driven layer assignment method [1] such that it can robustly
handle both antenna avoidance and via count minimization. Effective
techniques are also developed and adopted by our algorithm to reduce
the solution space. In addition, to further reduce the via count but
without increasing the amount of antenna violations, a reﬁnement
procedure based on min-cost max-ﬂow is developed and added to
our algorithm. The experiment results show that when compared with
the layer assignment algorithm of a state-of-the-art global router,
NTHU-Route 2.0 [8], our algorithm not only can improve the via
count slightly but also can signiﬁcantly reduce the amount of antenna
violations.
The remainder of this paper is organized as follows. Section II
gives the preliminaries and the problem formulation. Section III
details our algorithm. The experiment results are shown in Section IV,
and the conclusion is made in Section V.
II. PRELIMINARIES AND PROBLEM FORMULATION
A. Notation
In a multi-layer global routing instance, we assume that each
metal layer has a preferred routing direction (horizontal or vertical
direction) such that half of the layers are horizontal ones and the
rest are vertical ones. Each metal layer is partitioned into tiles, and
the boundary between two adjacent tiles on the same metal layer
is associated with a wire capacity denoting the maximum number
of nets that can pass through without causing wire overﬂow. See
Fig. 1(a) for a four-layer global routing instance.
A 3D routing grid graph G = (V,E) is used to model a multi-layer
global routing instance (see Fig. 1(b)). Each vertex in the vertex set
V denotes a tile and is called a tile vertex. The edge set E contains
two disjoint sets Ew and Ev . Each edge in Ew denotes a boundary
and is called a boundary edge, while each edge in Ev corresponds
to vias and connects two tile vertices on adjacent metal layers. Each
boundary edge e in Ew is associated with a number c(e) which
denotes the wire capacity of the boundary corresponding to e. For
simplicity, it is assumed that each boundary edge has one unit of wire
length.
Let N denote the set of nets in G. Each net ni in N is represented
by a subset Pi of V such that each pin pi,j in ni is located within
a tile in Pi. A global routing solution for ni is a tree Ti = (Vi, Ei)
of G such that Pi ⊆ Vi.
Let G′ = (V ′, E′) be the 2D routing grid graph obtained by
projecting G to a common plane (see Fig. 1(c)). The wire capacity of
each edge e′ in G′ is the summation of the capacities of the boundary
edges which are projected to e′. Let N ′ be the set of nets obtained
by projecting N to G′, where the projected pins of a net that fall in
the same vertex are merged into one vertex in V ′. A global routing
solution for each net n′i in N
′ is denoted by a tree T ′i = (V
′
i , E
′
i)
of G′ such that all pins in n′i are contained in V
′.
Given a 3D global routing solution S of N , we can deﬁne the
following terms. For each boundary edge e, its wire demand d(e) is
deﬁned as the number of nets passing through e, and its wire overﬂow
o(e) is deﬁned as d(e) − c(e) if d(e) > c(e), and 0 otherwise.
The total wire overﬂow TWO(S) is deﬁned as the summation of
the wire overﬂows of all boundary edges, and the maximum wire
overﬂow MWO(S) is deﬁned as the maximum wire overﬂow among
all boundary edges. For a 2D global routing solution S′ of N ′, we
can also deﬁne TWO(S′) and MWO(S′) similarly.
313
looking for a set of separator candidates, we also want to minimize
the amount of edges contained in the set.
In [14], a slightly different problem of ﬁnding separator candidates
was considered, where the length of each subtree cannot exceed
Amax, regardless of the amount of sinks in the subtree. Therefore,
the amount of separator candidates tends to be larger than that in our
problem. The authors of [14] proposed a linear-time method, that
greedily selects edges from the deepest level towards the source, to
solve their problem. We extend this greedy method to handle our
problem, and throughout the rest of this paper, a separator candidate
is also called a separator for short, unless stated otherwise.
The pseudocode of our method is given in Fig. 5, where Tu denotes
the current subtree rooted at u, L(Tu) denotes the length of Tu,
sink num(Tu) denotes the number of sinks in Tu, a branch of Tu
is a subtree Tv of Tu plus the edge (u, v), and root is the source
of the net and is at level 1. Lines 1 to 8 are almost the same as the
method in [14] except that in line 3, when sink num(Tu) is large
than 0, it is always treated as 1 in [14]. On the other hand, the method
in [14] does not have the code from lines 9 to 13. This extra code is
to consider the case where after executing lines 1 to 8 the resultant
subtree rooted at the source does meet the antenna ratio bound but at
least one of the subtrees of the source contains two or more sinks and
has length larger than Amax. For this case, if we do not select any
edge from such a subtree of the source as a separator, our subsequent
layer assignment step may induce an antenna violation to this net. For
example, Fig. 6(a) shows a tree that has two sinks and six units of wire
length. By assuming Amax is three, the length of this tree divided
by its number of sinks is 6/2 = 3 which does not exceed Amax.
Since there is no separator selected from this tree, each edge can be
assigned to any of its available layers, and therefore a possible layer
assignment result as shown in Fig. 6(b) can be produced. However,
this layer assignment result creates an antenna for the right sink and
has antenna ratio 4 which is larger than Amax. To avoid generating
such a layer assignment result, our method selects the edge near the
source as a separator in lines 9 to 13, as shown in Fig. 6(c). Later on
when performing layer assignment, since the layer of this separator
must be assigned to a layer higher than any of those of the other edges
by our algorithm, the result shown in Fig. 6(c) can be produced and
meet the antenna ratio bound.
We use the following example to further illustrate our method for
ﬁnding separators. Under the assumption that Amax is two units of
wire length, for the 2D routed net shown in Fig. 7(a), our method
will sequentially ﬁnd the four separators e10, e7, e4, and e1, which
are respectively denoted by s4, s3, s2, and s1 in Fig. 7(b).
2) Net Order Determination: To solve the layer assignment prob-
lem in a net-by-net manner, we need to develop a net ordering
method. We modify the net ordering method adopted by COLA [1].
Note that COLA is the layer assignment algorithm used by the global
router NTHU-Route 2.0 [8], but it does not consider antenna effect.
For each 2D routed net T ′i , we ﬁrst obtain PinNum(T
′
i ),
NetLength(T ′i ), and SeparatorNum(T
′
i ), where PinNum(T
′
i )
is the number of pins in T ′i , NetLength(T
′
i ) is the total wire length
of T ′i , and SeparatorNum(T
′
i ) is the number of separators found
by our method for T ′i . We then use the following formula to compute
a score Score(T ′i ) for T
′
i :
Score(T ′i ) =
α× PinNum(T ′i ) + β × SeparatorNum(T ′i )
NetLength(T ′i )
where α and β are user-speciﬁed parameters, and both are set to 0.5 in
our current implementation. Note that COLA [1] takes PinNum(T ′i )
Algorithm : Separator-Finding Method
Output : A set C of separators for a net.
1: for i maximum_level to 1
2:       while there is an unvisited node u at level i
3: while sink_num(Tu) > 0 and (L(Tu) / sink_num(Tu)) > Amax
4:       remove the longest branch ((u, v) + Tv) and update L(Tu)
5:       add (u, v) into C
6:       end while
7:       end while
8: end for
9: for each subtree Tu of root
10:       if sink_num(Tu) > 1 and L(Tu) > Amax
11:              add (root, u) into C
12:       end if
13: end for
Fig. 5. Our method for ﬁnding a set of separators.
Amax = 3
(a) (c)
source sink separator antenna
available layers=4, 6
available layers=3, 5
(b)
antenna violation antenna safe
6
5
4
333
4
5
4
333
Fig. 6. An example where an edge will be selected as a separator.
(a)
p2
p1
source sink separator
p3
p4
e1e2
e6
e3
e5 e4
e7
e8
e10e11
e9
e12
(b)
s2
s1
s3
s4
s1=e1
s2=e4
s3=e7
s4=e10
(c)
Topological order
s1 s2 s3 s4
(s1,s2,s3,s4)=
(1, 1, 2, 3)
(1, 1, 2, 5)
(1, 1, 4, 5)
(1, 3, 2, 3)
(3, 5, 4, 5)
…
If (s1,s2,s3,s4)=(3, 5, 4, 5)
(d)
Available layers for 
e2=1, e3=2,
e5=1,3, e6=2,4,
e8,e9=2,
e11,e12=1,3.
Fig. 7. Layer assignment for antenna avoidance.
315
model the layer re-assignment problem of their involved edges as a
min-cost max-ﬂow problem. Fig. 8(c) shows the ﬂow network for
the layer re-assignment problem given in Fig. 8(a). In Fig. 8(c), for
each arc from the source (labeled as S) to an involved net edge, its
capacity is 1 and cost is 0; for each arc from an involved net edge to
an available layer, its capacity is 1 and cost is the required number
of vias for connectivity; for each arc from an available layer to the
terminal (labeled as T ), its capacity is equal to the wire capacity and
cost is 0. With this model, Fig. 8(d) shows a min-cot max-ﬂow of
Fig. 8(c), which can be used to derive the layer assignment result
shown in Fig. 8(b).
(a)
e1=2 e3=2
e2=5
e4=4 e6=4
e5=1
(b)
e1=2 e3=2
e2=1
e4=4 e6=4
e5=5
#Via=3+3+3+3=12 #Via=1+1+1+1=4
(c)
Net a
Net b
Net a
Net b
S T
cap./cost
Net edges
e2
e5
Layers
1
3
5
0/0
1/2
1/2
wire cap.(1,3,5)=(1,0,1)
(d)
S T
Net edges
e2
e5
Layers
1
3
5
0/0
1/2
1/2
#Via=Cost =4
3 vias 3 vias 1 via 1 via
Fig. 8. A reﬁnement example by min-cost max-ﬂow.
The aforementioned min-cost max-ﬂow method is applied to
improve the via count in the reﬁnement procedure. However, in order
to avoid the increase of the number of antenna-violated nets after
reﬁnement, for antenna-safe nets, we limit their choices of available
layers in the ﬂow network to meet the antenna rule. On the other
hand, to meet the two wire congestion constraints, the ﬂow of the
outgoing arc of each layer vertex will be constrained by an upper
and a lower bounds, depending on the range of the demand that
this layer can be given. For example, if a layer must be assigned
to at least p nets but no more than q nets in order to meet the two
wire congestions constraints, the ﬂow of the arc from this layer to the
terminal T will be lower and upper bounded by p and q, respectively.
In our current implementation, we perform the reﬁnement procedure
on each boundary edge in the 2D routing graph once and follow the
row-major order. As shall be seen in Section IV, it is possible that
the number of antenna-violated nets may decrease after reﬁnement,
because some antenna-violated nets become antenna-safe.
We have the following theorem whose proof is omitted.
Theorem 1: Given a 2D global routing solution, our layer as-
signment algorithm LAVA (with or without running the reﬁnement
procedure) always produces a 3D global routing solution that satisﬁes
the two given wire congestion constraints.
IV. EXPERIMENT RESULTS
We implemented LAVA in ANSI C++ and executed it on a Linux
workstation with an AMD Opteron 2.2 GHz CPU and 8GB memory.
The ISPD’08 global routing contest benchmarks [3] were used as
the test cases. Since no antenna ratio bound Amax is speciﬁed for
these benchmarks, we chose a proper value for Amax under the
consideration of the current process technology.
We compare LAVA with COLA [1]. In order to generate initial
2D routing results for LAVA and COLA, we compressed the results
of NTHU-Route 2.0 [8] into 2D ones and used them as the initial
2D routing results. We do not compare the algorithm in [14] partly
because the authors of [14] could not provide us with their source
code. In addition, there are several knobs of control which were not
clearly speciﬁed in [14], and hence it is hard for us to truly implement
the algorithm proposed in [14].
TABLE I shows the results and comparisons of these layer assign-
ment algorithms. Because COLA was adopted by NTHU-Route 2.0 to
perform layer assignment, its results are the same as the original 3D
results of NTHU-Route 2.0. In TABLE I, the experiment results of
COLA and LAVA are reported in three major columns, “NTHU-Route
2.0 + COLA [1],” “NTHU-Route 2.0 + LAVA (w/o reﬁnement),”
and “NTHU-Route 2.0 + LAVA (with reﬁnement),” where “NTHU-
Route 2.0 + LAVA (with reﬁnement)” and “NTHU-Route 2.0 +
LAVA (w/o reﬁnement)” respectively list the results produced from
LAVA with and without running the reﬁnement procedure. Each
major column reports the via count (in the “#Vias(e5)” column), the
number of antenna-violated nets (in the “#Violated nets” column),
and the number of antenna-violated sinks (in the “#Violated sinks”
column); additionally, the CPU time results (in the “CPU(s)” column)
are also given, including those of COLA that were collected from our
machine.
As can be seen from TABLE I, LAVA generated a solution with
much smaller numbers of antenna-violated nets and sinks for each test
case, as compared with COLA. Without reﬁnement, LAVA produced
similar via count but decreased the numbers of antenna-violated nets
and sinks by 29.5% and 76.3% on average; with reﬁnement, LAVA
decreased the numbers of vias, antenna-violated nets, and antenna-
violated sinks by 1.1%, 31.4%, and 76.9%, respectively. Besides, the
reﬁnement procedure was able to further reduce the via count and the
amounts of antenna-violated nets and sinks for each test case. As for
run times, LAVA with and without running the reﬁnement procedure
are respectively 3.63X and 2.13X slower than COLA. However, their
run times are acceptable because they still ran efﬁciently, taking up
to 1149 seconds and 777 seconds for a test case, respectively. In
TABLE I, there is an “Amax(%)” column which lists the average
percentage of the possible values between Amax and Amin that were
tried by LAVA for each test case. This number is relatively small,
ranging from 1.15%∼8.9%, and that is why LAVA does not incur
much run time overhead in practice. Note that since the resulting
total wire overﬂow and maximum wire overﬂow of each algorithm
are the same and satisfy the two wire congestion constraints, we omit
them from the table.
It is worth pointing out that LAVA can be easily modiﬁed to
solve a more general layer assignment problem that also takes via
317
GLADE: A Modern Global Router Considering Layer
Directives
Yen-Jung Chang, Tsung-Hsien Lee, and Ting-Chi Wang
Department of Computer Science, National Tsing Hua University, Hsinchu, Taiwan
jalamorm@gmail.com, tsunghsienlee@gmail.com, tcwang@cs.nthu.edu.tw
Abstract—Global routing is a very crucial stage in a design cycle,
because it physically plans the routes of nets on a chip. In order to
boost the research and development of global routing techniques, ISPD
held contests and released benchmarks in 2007 and 2008, respectively.
However, the contests may lead researchers away from facing other
real problems in practice. In this paper we study a new global routing
problem that not only considers traditional routing objectives such as
overflow and wirelength but also focuses on honoring layer directives
that are usually specified for timing-critical nets to alleviate performance
degrading. Based on novel extensions of an academic router, we present
a new global router called GLADE for the addressed problem. The
experimental results show that GLADE can effectively generate a high-
quality solution, which balances the metrics under consideration, for each
test case from the set of recently released ICCAD 2009 benchmarks.
I. INTRODUCTION
High performance is one of the ultimate goals that are typically
pursued for modern VLSI design. Among all stages in a design cycle,
routing is a very important one because it influences the reliability,
power consumption, and timing of a chip profoundly. Due to the
problem size, routing is usually divided into global routing and
detailed routing. A good global routing result can guide a detailed
router to obtain a high-quality design. The metrics to measure a global
router usually include the total overflow and wirelength of the routing
result it generates.
In order to boost the research and development of global routing
techniques, International Symposium on Physical Design (ISPD)
held contests and released two sets of benchmarks in 2007 [1]
and 2008 [2], respectively. Both sets of benchmarks provide multi-
layer designs, and therefore all academic global routers that were
developed in 2007 or afterward, e.g., [3], [4], [5], [6], [7], [8], [9],
[10], [11], [12], are able to generate three-dimensional (3D) routing
solutions. Unfortunately, the ISPD contests may lead researchers
away from facing other real problems in practice. In industrial
designs, the goals of global routing are not only to minimize the total
overflow and wirelength, but also to consider the factors that may
degrade the quality of a design, e.g., the detours of timing-critical
nets that may impair the performance of a chip. Consequently, the
problem specifications of the ISPD contests have been questioned. For
instance, the via count within a global bin should not be left unbound
[13][14], and intra-bin congestion should be considered [15].
In this paper, we study a new global routing problem that not
only considers traditional routing objectives such as overflow and
wirelength but also focuses on honoring layer directives. Layer
directives are often specified for timing-critical nets to meet the
performance target in a modern physical design flow. For example,
recent wire synthesis algorithms [16][17] use layer ranges for timing
closure. A set of benchmarks that incorporate layer directives are
modified from ISPD 2008 benchmarks and released in ICCAD last
global bin
edge
chip
vertex
Fig. 1. A multi-layer design with preferred routing directions.
year [18]. Based on novel extensions of NTHU-Route 2.0 [11], we
present a new global router called GLADE (standing for Global
router for LAyer DirEctives) for the addressed problem. Further, the
experimental results show that GLADE can effectively generate a
high-quality solution, which balances the metrics under consideration,
for each ICCAD 2009 benchmark.
The rest of the paper is organized as follows. We describe the
background of global routing, the ICCAD 2009 benchmarks and the
objectives of GLADE in Section II. Next, we give a brief review
on NTHU-Route 2.0 in Section III. Then, we describe the details of
GLADE in Sections IV and V. Finally, the experimental results are
presented in Section VI and we conclude the paper in Section VII.
II. PRELIMINARIES
A. Global Routing
For global routing, a multi-layer design can be modeled by a 3D
grid graph G which is composed of a set V of vertices and a set E
of edges. As depicted in Fig. 1, each global bin and each boundary
between two bins correspond to a vertex and an edge, respectively.
There is also a set of nets, where each net is composed of a set of pins
and each pin corresponds to a vertex. The global routing problem for
a net is to find a tree that connects all pins of the net by using edges
and vias. Moreover, it is preferable to route each net with only one
direction on a layer in order to prevent wires from crossing. Taking
Fig. 1 for example, the design separates horizontal and vertical wires
on different metal layers.
In a routing graph, the capacity ce of an edge e ∈ E represents
the number of available routing tracks e contains, and the demand
de represents the amount of nets that pass through e. For an edge
e, if its demand de exceeds its capacity ce, its overflow is defined
as (de − ce); otherwise, its overflow is zero. A typical objective for
global routing is to minimize the total overflow among all edges.
Meanwhile, the total wirelength of all routes should be as short as
possible. In multi-layer designs, wirelength calculation also involves
vias.
978-1-4244-819 - /10/$26.00 ©2010 IEEE 3194 1
Non-preferred Layer
Non-preferred Layer
8
de(3)=8 e'3
e'2
e'1
(a)
Non-preferred Layer
2
9
8
de(2)=11 e'3
e'2
e'1
(b)
Fig. 3. (a) vce(3)=10 and vde(3)=8. (b) vce(2)=20 and vde(2)=19.
performs pseudo layer assignment during 2D global routing. Pseudo
layer assignment dose not actually assign nets to 3D edges. It adopts
the notions of virtual capacity and virtual demand to achieve the
goal instead. In other words, when GLADE tries to find routes for
LD nets on the plane, it uses the information on the 3D routing graph
to retrieve different values of capacity and demand, which depends
on the LD types of the nets, to calculate route costs.
1) Virtual Capacity: For each 2D edge e, a virtual capacity vce(t)
is defined for each LD type t (t > 1), and is calculated by the sum of
the capacities of the corresponding 3D edges located on the preferred
layers with respect to the LD type t. For example, in Figure 2 if the
capacities of the 3D edges e′1, e
′
2, and e
′
3 are denoted by ce′
1
, ce′
2
,
and ce′
3
, then we have vce(3) = ce′
3
and vce(2) = ce′
3
+ ce′
2
. It is
clear to see that vce(t) specifies the capacity that e can provide for
LD nets of type t.
2) Virtual Demand: For each 2D edge e, a virtual demand vde(t)
can be also defined for each LD type t (t > 1). When calculating
vde(t), GLADE presumes that nets whose LD types are larger than
t have a higher priority to be processed during layer assignment, be-
cause they have smaller layer ranges than LD nets of type t. Therefore
some certain amount of the virtual capacity vce(t) may be consumed
by those nets. Therefore the virtual demand vde(t) will take into
account the demands caused by LD nets whose types are larger than
t. The vde(t) is calculated by de(t) +min(vde(t+1), vce(t+1)),
where de(t) is the amount of LD nets of type t that pass through e.
We use Fig. 3 and 4 to help illustrate how to calculate vde(t). For
both figures, the 3D edges, e′1, e
′
2, and e
′
3 each have a capacity of
10 and are projected to the 2D edge e; the amounts of each type
of LD nets passing through e are shown in the top-left corners;
the gray and black parts indicate the capacities that are virtually
consumed by LD nets of types 2 and 3, respectively. Under the
assumption that LD nets of type 3 will be assigned first during layer
assignment; the hollow parts indicate the remaining capacities. For
the example shown in Fig. 3, we have vce(3) = ce′
3
= 10 and
vce(2) = ce′
3
+ ce′
2
= 10 + 10 = 20, vde(3) = de(3) = 8,
and vde(2) = de(2) +min(vde(3), vce(3)) = 11 +min(8, 10) =
11+8 = 19. In addition, the capacity of each 3D edge e′t is assumed
to be preserved for LD nets of type t, and therefore the virtual
overflow caused by LD nets of type larger than t does not carry over
to e′t. This is why we put the min term in the formula for calculating
virtual demand. For the example in Fig. 4, the LD nets of type 3 in
Fig. 4(a) are virtually assigned to e′3 first, which causes two routing
tracks short on e′3. Since the 2 units of overflow do not carry over to
layers lower than e′3, we cross them out in Fig. 4(b). After the LD
nets of type 2 are virtually assigned to e′2, we get the virtual demands
for LD type 2, which is 21 (vde(2) = de(2) + ce′
3
= 11 + 10).
B. LDOF
During 2D global routing, GLADE needs a guidance which can
estimate the possible total LD violation and additional TOF that a
3D solution, when obtained from the current 2D solution by layer
assignment, might have. In fact, a LD net may cause LD violation
Non-preferred Layer
Non-preferred Layer
12
de(3)=12 e'3
e'2
e'1
(a)
Non-preferred Layer
11
10
de(2)=11 e'3
e'2
e'1
(b)
Fig. 4. (a) vce(3)=10 and vde(3)=12. (b) vce(2)=20 and vde(2)=21.
Non-preferred Layer
Non-preferred Layer
de(3)=8
8 e'3
e'2
e'1
(a)
Non-preferred Layer
de(2)=14
2
12
LDOF=2
e'3
e'2
e'1
(b)
Fig. 5. (a) GLADE assumes that LD nets of type 3 will be assigned
first during layer assignment. (b) Then LD nets of type 2 will be assigned
afterward.
and/or overflow after layer assignment. Therefore for each 2D edge e,
we define a LDOF for each LD type t (t > 1) , and it is calculated by
max(vde(t)− vce(t), 0). The LDOF of each 2D edge is the sum of
the LDOFs among all LD types, and the total LDOF of a 2D global
routing solution is the sum of the LDOFs among all 2D edges.
Fig. 5 illustrates an example to calculate LDOF, where each
3D edge e′t is assumed to have the capacity of 10, and there
are 8 and 14 LD nets of types 3 and 2 passing through the 2D
edge e, respectively. Firstly, GLADE presumes the 8 LD nets of
type 3 will be assign to e′3 first during layer assignment (see Fig.
5(a)), because they have a smaller layer range than the LD nets
of type 2. We get vce(3) = 10, vde(3) = 8, and the LODF
of type 3 is max(vde(3) − vce(3), 0) = max(8 − 10, 0) = 0.
After then, LD nets of type 2 will be virtually assigned to e′3 and
e′2 because the two remaining routing tracks of e
′
3 can still be
used by them (see Fig. 5(b)). We get vce(2) = 10 + 10 = 20,
vde(2) = de(2) + vde(3) = 14 + 8 = 22, and the LODF of
type 2 is max(vde(3) − vce(3), 0) = max(22 − 20, 0) = 2. As
a result, the LDOF of the 2D edge e is 2. Non-zero LDOF implies
that additional overflow (if layer directives must be honored) or
LD violation (if overflow must be minimized) will occur after layer
assignment, regardless of the layers to which the two excess LD nets
of type 2 are assigned.
C. The Flow of 2D Global Routing Considering Layer Directives
Now we are ready to explain our 2D global routing method
which is based on the first three stages of NTHU-Route 2.0 with
proper modifications to handle LD nets. In the initial stage, our
method follows NTHU-Route 2.0 and does not perform any LDOF
optimization, because the initial stage plays an important role in
controlling total overflow and wirelength. Besides, the total LDOF
can be effectively eliminated in the main stage and refinement stage.
During the main stage, our method reduces the total LDOF and
overflow of the solution obtained in the initial stage iteratively. Firstly,
it replaces ce and de by the virtual capacity vce(t) and the virtual
demand vde(t) when routing a LD net of type t. In other words, our
method uses vce(t) and vde(t) in Eq. (2) when calculating the cost
of edge e. Also, it uses vde(t) and vce(t) to determine if edge e is
overflowed. Finally, our method calculates the total LDOF and the
total overflow at the end of each iteration in order to check if the
solution gets converged.
321
TABLE II
COMPARISON BETWEEN NTHU-ROUTE 2.0 AND GLADE ON ICCAD
2009 BENCHMARKS.
NTHU-Route 2.0 GLADE
Benchmark TOF LDVio TWLVWL CPU TOFLDVioLDOF TWL VWL CPU
adaptec1 0 129440 45.1 9.3 5.3 0 0 0 45.4 9.6 7.0
adaptec2 0 379086 43.1 10.1 1.3 0 0 0 43.9 10.9 1.4
adaptec3 0 450740114.9 18.7 5.6 0 0 0 115.2 18.9 7.2
adaptec4 0 594576105.9 16.3 1.7 0 0 0 106.5 17.0 1.8
adaptec5 0 143542129.8 26.7 15.7 0 0 0 130.1 26.9 15.2
bigblue1 0 121392 47.8 10.3 7.0 0 0 0 48.3 10.7 8.7
bigblue2 0 19428 69.3 20.9 6.0 0 0 0 69.6 20.9 7.8
bigblue3 0 103810105.7 27.4 3.7 0 0 0 105.9 27.6 3.8
bigblue4 162 152068178.7 56.8 75.8 188 0 0 178.9 57.0 121.0
newblue1 0 12508 35.6 11.3 3.9 2 0 0 35.6 11.3 4.8
newblue2 0 98962 59.4 12.2 0.9 0 0 0 59.7 13.4 0.8
newblue4 138 100680108.3 24.9 65.4 140 0 0 108.1 24.9 40.1
newblue5 0 21288 190.7 43.5 12.8 0 0 0 190.7 43.5 12.6
newblue6 0 58506 139.8 37.5 10.4 0 0 0 139.8 37.6 11.5
newblue7 62 257626279.8 92.5 57.8 78 0 0 281.7 93.3 119.9
ratio - - 1.000 1.0001.000 - - - 1.005 1.022 1.185
aThe benchmark “newblue3” which exists in ISPD 2008 benchmarks is
excluded in ICCAD 2009 benchmarks.
bVia is set to be 1 unit of wirelength in ICCAD 2009 benchmarks.
cRun time is given in minutes.
space due to layer directives. Meanwhile, the raises of TOF on
bigblue4, newblue4, and newblue7 could be due to the same reason.
Further, the zero LDOF and LD violation show that LDOF is a good
guidance for considering layer directives during 2D global routing
and also show the effectiveness of our layer assignment algorithm.
As can be seen from the table, the increases of TWL were mainly
dominated by the increases of via count, which shows the fact that
LD nets are asked to use higher layers and hence require more vias.
Finally, since GLADE has to improve the solution quality for the
conventional metrics and honor the layer directives at the same time,
its run time was raised by 18.5% on average. However, the run time
is much faster than performing full 3D global routing.
VII. CONCLUSION
In this paper, we have presented GLADE, a global router for
considering layer directives, that is based on extensions of NTHU-
Route 2.0, one of the state-of-the-art global routers. The experimental
results show that GLADE successfully eliminated the violations due
to layer directives for all ICCAD 2009 benchmarks. Meanwhile, it
can still rival with NTHU-Route 2.0 in total overflow, wirelength,
and run time.
A future work for considering layer directives is to devise another
2D and 3D routing methods for general layer range rules which are
different from the one in ICCAD 2009 benchmarks. In ICCAD 2009
benchmarks, all the end layers of layer ranges end at the highest layer
of a design. However, the end layer of a general layer range rule
may not be the highest layer in real industry designs. In other words,
two layer ranges may overlap and cause this problem to become
more challenging. Therefore, another routing algorithm is needed for
considering the general problem in practice.
VIII. ACKNOWLEDGMENTS
This work was supported in part by National Science Council of
Taiwan under Grants NSC-98-2220-E-007-011, NSC-98-2220-E-007-
032, and NSC-99-2221-E-007-113-MY3.
REFERENCES
[1] ISPD 2007 Global Routing Contest. [Online]. Available: http:
//www.sigda.org/ispd2007/rcontest/
[2] ISPD 2008 Global Routing Contest. [Online]. Available: http:
//www.sigda.org/ispd2008/contests/ispd08rc.html
[3] M. M. Ozdal and M. D. F. Wong, “Archer: a history-driven global routing
algorithm,” in Proceedings of International Conference on Computer-
Aided Design, San Jose, CA, 2007, pp. 488–495.
[4] M. Cho, K. Lu, K. Yuan, and D. Z. Pan, “Boxrouter 2.0: architecture
and implementation of a hybrid and robust global router,” in Proceedings
of International Conference on Computer-Aided Design, San Jose, CA,
2007, pp. 503–508.
[5] Y. Zhang, Y. Xu, and C. Chu, “Fastroute 3.0: A fast and high quality
global router based on virtual capacity,” in Proceedings of International
Conference on Computer-Aided Design, San Jose, CA, 2008, pp. 344–
349.
[6] Y. Xu, Y. Zhang, and C. Chu, “Fastroute 4.0: Global router with efficient
via minimization,” in Proceedings of Asia and South Pacific Design
Automation Conference, Yokohama, Japan, 2009, pp. 576–581.
[7] J. A. Roy and I. L. Markov, “High-performance routing at the nanometer
scale,” IEEE Transactions on Computer-Aided Design of Integrated
Circuits and Systems, vol. 27, no. 6, pp. 1066–1077, 2008.
[8] K.-R. Dai, W.-H. Liu, and Y.-L. Li, “Efficient simulated evolution
based rerouting and congestion-relaxed layer assignment on 3-d global
routing,” in Proceedings of Asia and South Pacific Design Automation
Conference, Yokohama, Japan, 2009, pp. 570–575.
[9] H.-Y. Chen, C.-H. Hsu, and Y.-W. Chang, “High-performance global
routing with fast overflow reduction,” in Proceedings of Asia and South
Pacific Design Automation Conference, Yokohama, Japan, 2009, pp.
582–587.
[10] J.-R. Gao, P.-C. Wu, and T.-C. Wang, “A new global router for modern
designs,” in Proceedings of Asia and South Pacific Design Automation
Conference, Seoul, Korea, 2008, pp. 232–237.
[11] Y.-J. Chang, Y.-T. Lee, and T.-C. Wang, “NTHU-Route 2.0: A fast
and stable global router,” in Proceedings of International Conference
on Computer-Aided Design, CA, USA, 2008, pp. 338–343.
[12] T.-H. Wu, A. Davoodi, and J. T. Linderoth, “GRIP: scalable 3d global
routing using integer programming,” in Proceedings of Design Automa-
tion Conference, San Francisco, CA, 2009, pp. 320–325.
[13] C.-H. Hsu, H.-Y. Chen, and Y.-W. Chang, “Multi-layer global routing
considering via and wire capacities,” in Proceedings of International
Conference on Computer-Aided Design, CA, USA, 2008, pp. 350–355.
[14] T.-H. Lee and T.-C. Wang, “Robust layer assignment for via optimization
in multi-layer global routing,” in Proceedings of International Sympo-
sium on Physical Design, CA, USA, 2009, pp. 159–166.
[15] W. Swartz, “Issues in global routing,” in Proceedings of International
Symposium on Physical Design, Portland, USA, 2008, pp. 142–147.
[16] C. J. Alpert, C. Chu, and P. G. Villarrubia, “The coming of age
of physical synthesis,” in Proceedings of International Conference on
Computer-Aided Design, San Jose, CA, 2007, pp. 246–249.
[17] Z. Li, C. J. Alpert, S. Hu, T. Muhmud, S. T. Quay, and P. G. Villarrubia,
“Fast interconnect synthesis with layer assignment,” in Proceedings of
International Symposium on Physical Design, Portland, OR, 2008, pp.
71–77.
[18] M. D. Moffitt, “Global routing revisited,” in Proceedings of International
Conference on Computer-Aided Design, CA, USA, 2009, pp. 805–808.
[19] C. Chu and Y.-C. Wong, “FLUTE: Fast lookup table based rectilinear
steiner minimal tree algorithm for VLSI design,” IEEE Transactions
on Computer-Aided Design of Integrated Circuits and Systems, vol. 27,
no. 1, pp. 70–83, 2008.
[20] M. Pan and C. Chu, “Fastroute: a step to integrate global routing into
placement,” in Proceedings of International Conference on Computer-
Aided Design, San Jose, CA, 2006, pp. 464–471.
[21] ——, “Fastroute 2.0: A high-quality and efficient global router,” in
Proceedings of Asia and South Pacific Design Automation Conference,
Yokohama, Japan, 2007, pp. 250–255.
[22] T.-H. Lee and T.-C. Wang, “Congestion-constrained layer assignment for
via minimization in global routing,” IEEE Transactions on Computer-
Aided Design of Integrated Circuits and Systems, vol. 27, no. 9, pp.
1643–1656, 2008.
323
Global BinBoundary Vetex
Via
Edge
1
2
3
4
5
6
1
2
3
4
5
Layer 6Layer
Figure 1: A 6-layer design with preferred routing
directions.
because any net with this range can be routed on any layers
of the design and hence has no layer restriction.
In this paper, we study a global routing problem that al-
lows arbitrary layer ranges to be specified in layer directives.
We present a global router which enhances GLADE by em-
ploying techniques to take general layer directives into ac-
count during two-dimensional (2D) routing and layer assign-
ment. The experiment results show that our global router
can generate encouraging solutions for all test cases.
The rest of the paper is organized as follows. In Section
2, our global routing problem is defined. In Section 3, we
briefly review GLADE. We then give an overview and de-
scribe the details of our global router in Sections 4, 5 and
6. The experiment results are reported in Section 7 and the
conclusion is made in Section 8.
2. PROBLEM FORMULATION
2.1 Preliminaries
A multi-layer global routing problem can be modeled by
a three-dimensional (3D) grid graph, where each vertex de-
notes a global bin and each edge denotes the boundary be-
tween two adjacent global bins on the same metal layer.
Figure 1 shows an example with preferred routing directions,
where horizontal and vertical wires are alternate on differ-
ent metal layers. Each edge e in the grid graph is given a
capacity ce, denoting the number of available routing tracks
that e contains. There is also a set of nets, and each net con-
sists of a set of vertices to be connected. The global routing
problem is to find a route for each net such that it connects
the corresponding set of vertices of the net using edges and
vias. Each edge e in a (partial) global routing solution is
associated with a demand de that represents the amount of
nets passing through e. If the demand de exceeds the ca-
pacity ce, edge e has a non-zero overflow which is defined
as (de − ce); otherwise, e has no overflow (i.e., overflow is
zero). A typical objective for global routing is to minimize
both the total overflow of all edges and the total wirelength
of all routes.
2.2 General Layer Directives
In this paper, a subset of nets is associated with layer
directives in a given global routing instance. Each layer
directive specifies a range [sl : el] of consecutive layers on
which the associated net should be routed. Here both sl and
el can be any arbitrary layer numbers as long as sl ≤ el.
Note that if TotalLayers denotes the total number of layers
in the design, then the layer range [1 : TotalLayers] is not
considered as a layer directive, because it does not impose
any layer restriction.
A net with a layer directive is called a LD net. If a routed
LD net passes through an edge on an non-preferred layer
(i.e., a layer not in the layer range of the net), then this edge
1
2
3
4
e' 2
e' 1
5
6
e' 3
Layer
(a)
e
(b)
Figure 2: Global routing grid graph model. (a) A
6-layer design with preferred routing directions. (b)
The projected 2D routing graph, where e′1, e
′
2 and e
′
3
in (a) are projected to e.
induces one unit of LD violation for this net. For example,
for a net whose layer range is [3 : 6] in a 6-layer design, if
the net passes through an edge on layer 1 (or layer 2 ), then
the net has one unit of LD violation on this edge.
2.3 Objectives
Given a multi-layer design with a subset of nets associated
with general layer directives, the primary objective of our
global routing problem is to find a routing solution that
minimizes the total LD violation as well as the total overflow
(TOF) of all edges. The secondary objective is to minimize
the total wirelength (TWL) of the routing solution.
3. REVIEW ON GLADE
Since our global router enhances GLADE [4] to take arbi-
trary layer ranges into account, we review the major ideas
of GLADE in this section. GLADE extends NTHU-Route
2.0 [5] to handle a special set of layer ranges specified in
the ICCAD 2009 benchmarks, and consists of four stages:
initial stage, main stage, refinement stage, and layer assign-
ment. The first three stages perform 2D routing, while the
last stage converts a 2D solution into a 3D one.
The initial stage of GLADE is the same as the initial stage
of NTHU-Route 2.0. It first projects a multi-layer design
onto a 2D plane. Figure 2(a) shows a 3D routing graph for
a 6-layer design with preferred routing directions and Figure
2(b) gives the projected 2D plane. To distinguish edges in
the two routing graphs, the edges in Figure 2(a) are called
3D edges and those in Figure 2(b) are called 2D edges. Then
GLADE generates a wirelength-driven 2D routing solution
without considering any layer directives by using FLUTE [8],
a probabilistic routing method, an edge shifting technique
[18], and a L-shaped pattern routing method.
Since a 2D plane does not have any layer information, the
original router (i.e., NTHU-Route 2.0) is unable to consider
layer directives when performing 2D global routing. To cope
with this shortcoming, GLADE adopts the concepts of vir-
tual capacity and virtual demand. Suppose there are n dif-
ferent layer ranges given in the design, and hence there are
n different types of LD nets. For each 2D edge e, GLADE
calculates a virtual capacity vce(t) for each LD type t, which
is the sum of the capacities of the corresponding 3D edges
located in the associated layer range. For example, assume
that the capacities of the 3D edges e′1, e
′
2, and e
′
3 in Figure 2
are denoted by ce′1 , ce′2 , and ce′3 ; for LD types t1 = [5 : 6] and
t2 = [3 : 6], we have vce(t1) = ce′3 and vce(t2) = ce′3 + ce′2 .
The vce(t) specifies the maximum capacity that e can pro-
vide to LD nets of type t without causing any overflow.
For each 2D edge e, GLADE also calculates a virtual de-
During 2D global routing, we modify the pseudo layer as-
signment method for calculating virtual demand and LDOF.
During layer assignment, our router first applies COLA to
find an initial 3D solution, and then uses a min-cost max-
flow based method to iteratively refine the 3D solution for
further minimizing the total LD violation and via count.
These enhancements are respectively detailed in the next
two sections.
5. PSEUDO LAYER ASSIGNMENT FOR
GENERAL LAYER DIRECTIVES
For each 2D edge e, the virtual capacity vce(t) for each LD
type t is calculated in the same way as GLADE. To calculate
the virtual demand vde(t), we need to modify the pseudo
layer assignment method of GLADE. Intuitively, nets with
narrower layer ranges have less layers to choose for layer as-
signment, and therefore our pseudo layer assignment method
will first sort the given LD types in a non-decreasing order of
their range sizes. When two LD types have the same range
size, the one with a smaller start layer (i.e., the one with a
smaller sl) appears before the other in the sorted order. Now
let us assume the sorted order of the LD types is denoted
by t1, t2, ..., tn.
To calculate the virtual demand vde(ti) for LD type ti, our
pseudo layer assignment method follows the sorted order to
decide how many nets which have been routed through e
and have LD types appearing before ti can be assigned to
their preferred layers. It then calculates how much virtual
capacity of type ti, say x, that is consumed by those nets
after pseudo layer assignment. Finally the virtual demand
vde(ti) is calculated as the sum of x and de(ti), where de(ti)
is the amount of LD nets of type ti that have been routed
through e. Clearly our pseudo layer assignment method as-
sumes that nets whose LD types appear before ti in the
sorted order have a higher priority to be processed, because
they have smaller or the same range sizes than LD nets of
type ti. Therefore some certain amount of the virtual capac-
ity vce(ti) may be consumed by those nets. Therefore the
virtual demand vde(ti) will take into account the demands
caused by LD nets whose types appear before ti in the sorted
order.
We use Figure 4 to further explain how to calculate virtual
demand. In Figure 4(a), there are 5 LD types t1, t2, ..., t5,
and for these LD types the amounts of nets that have been
routed through the 2D edge e are respectively 2, 12, 12, 3,
and 1. In addition, the 2D edge e is the one projected from
the 3D edges e′1, e
′
2, e
′
3, and e
′
4 with respective capacities
being 10, 10, 5, and 5. Suppose the virtual demand vde(t5) is
the target to calculate. Our pseudo layer assignment method
iteratively selects a 3D edge from the top and a 3D edge from
the bottom and decides how many nets of each LD type
other than t5 can be assigned to the two 3D edges without
exceeding their capacities.1 The method terminates when
no more 3D edge can be selected. At the first iteration, our
method chooses e′4 and e
′
1 and follow the order of t1, t2, t3, t4
to assign nets of different LD types to the two 3D edges. It
1By assuming each layer range has an equal probability to be
specified in a layer directive, layers closer to the middle have
higher chances of being within layer ranges of LD nets than
layers closer to the top or bottom. Therefore our pseudo
layer assignment method considers layers from the top and
bottom towards the middle.
ce' = 54
ce' = 102
t1, de(t1) = 2 t4, de(t4) = 3
ce' = 53
Layer Range
e' 3
e' 2
e' 4
t2, de(t2) = 12ce' = 101e' 1
t3, de(t3) = 12 t5, de(t5) = 1
(a)
e' 3
e' 2
e' 4
t2e' 1
t1 t4
32
10
(b)
t3e' 3
e' 2
e' 4
t2e' 1
t1 t4
32
10
5
2 7
t2 t3
(c)
t3e' 3
e' 2
e' 4
t2e' 1
t1 t4
32
10
5
2 7
t2 t3
1
t5
LDOFe(t1) = 0
LDOFe(t2) = 0
LDOFe(t3) = 0
LDOFe(t4) = 0
LDOFe(t5) = 0
(d)
t3
e' 3
e' 2
e' 4
t2e' 1
2
10
t3
10
3 2
t4
t1
LDOFe(t1) = 0
LDOFe(t2) = 2
LDOFe(t3) = 0
LDOFe(t4) = 0
LDOFe(t5) = 1
(e)
Figure 4: (a) A 2D routing result on an edge e. (b)
and (c) Detailed steps of calculating the virtual de-
mand vde(t5). (d) A good pseudo layer assignment
result that is generated by our method and the as-
sociated LDOF values. (e) A bad pseudo layer as-
signment result and the associated LDOF values.
first assigns 2 nets of type t1 and 3 nets of type t4 to e
′
4
(because only these two types of nets have a preferred layer
on which e′4 is located), and then assigns 10 nets of type t2 to
e′1, under the capacity constraints imposed by e
′
4 and e
′
1 (see
Figure 4(b)). At the second iteration, e′3 and e
′
2 are selected,
and this time 5 nets of type t3 are first assigned to e
′
3, and
then 2 remaining nets of type t2 and 7 remaining nets of
type t3 get assigned to e
′
2, under the capacity constraints
imposed by e′3 and e
′
2 (see Figure 4(c)). No more iteration
is needed because all 3D edges have been processed. As a
result, for LD type t5, its virtual capacity is consumed by 24
nets whose LD types appear before t5 in the sorted order,
and hence its virtual demand is 24 + de(t5) = 24 + 1 = 25.
For each 2D edge e, we also calculate a LDOF for each
LD type ti, which is denoted by LDOFe(ti). To calculate
LDOFe(ti), our pseudo layer assignment method follows the
sorted order of LD types and finds a pseudo layer assign-
ment result that tells how many LD nets that have been
routed through e can be assigned to their preferred layers
without causing any overflow. From the pseudo layer as-
signment result, we find out the amount of LD nets of type
ti that did not get assigned to their preferred layers, and
this amount is defined as LDOFe(ti). The LDOF of each
2D edge e, denoted by LDOFe, is calculated as the sum of
all LDOFe(ti)’s, and the total LDOF of a 2D global routing
solution is the sum of all LDOFe’s.
Figure 4(d) shows the overall pseudo layer assignment re-
sult produced by our method for the example given in Fig-
ure 4(a), after assigning the net of type t5 to e
′
2. For this
example, it is not hard to see that each type of LDOF is
0. If a different pseudo layer assignment method is used to
Net A
3 vias
3 vias
Net B
wire cap.(1, 3, 5) = (0, 0, 1)
#Via = 3+3+3+3 = 12
#LD-Vio = 2
e1 = 2
e3 = 2e4 = 4
e6 = 4
e2 = 5e5 = 1
(a)
Net A
1 via
Net B
Net A [1:3] Net B [3:5]
1 via
#Via = 1+1+1+1 = 4
#LD-Vio = 0
e1 = 2
e3 = 2e4 = 4
e6 = 4
e2 = 3e5 = 5
(b)
S
e2
e5
T
1
5
3
1/0/0
1/0/0
1/0/2
1/0/21/0/6+p
1/0/
6+p
1/0/2
1/0/2
1+1
/1/0
0+1/0/0
0+1/0/0
capacity/lower-bound flow/cost
Nets Layers
(c)
S
e2
e5
T
1
5
3
Nets Layers
1/0/0
1/0/0
1/0/2
1/0/21/0/6+p
1/0/
6+p
1/0/2
1/0/2
1+1
/1/0
0+1/0/0
0+1/0/0
#Via=Cost=4
#LD-Vio=0
(d)
Figure 6: A refinement example on an overflowed
2D edge by min-cost max-flow. (a) A bad layer as-
signment result with via count equal to 12 and 2
units of LD violation. (b) A good layer assignment
result with via count equal to 4 and 0 unit of LD vi-
olation. (c) The flow network for re-assigning edges
e2 and e5. (d) A min-cost max-flow result of (c) with
via count equal to 4 and 0 unit of LD violation.
the source to an involved net, its capacity is 1 representing
the net passage, and cost is 0. For each arc from an involved
net to a layer, if this net is a LD net, its capacity is 1 if the
assigning layer is within its layer range, and its cost is the
number of vias for connectivity; otherwise, its capacity is 1
and cost is equal to the sum of a penalty cost (denoted by
p in Figure 5(c) and Figure 5(d)) and the number of vias
for connectivity; note that this penalty cost is much larger
than the sum of all possible vias that shall be used for re-
assignment. On the other hand, if this net is not a LD net,
its capacity is 1 representing this net and cost is the required
number of vias for connectivity. For each arc from a layer
to the terminal, its capacity is equal to the capacity of a
layer and cost is 0. Figure5(d) shows a min-cost max-flow
result of the flow network in Figure 5(c), which can be used
to derive the layer assignment result shown in Figure 5(b).
6.2.2 Refinement on an Overflowed Edge
We explain our refinement method on an overflowed 2D
edge by the example shown in Figure 6. Figure 6(a) is sim-
ilar to Figure 5(a) except the capacity of the edge which e2
and e5 pass through is 0 on layer 1. This means this edge has
1 unit of overflow. Figure 6(b) shows the result we antici-
pate after refinement. Since we want to keep TOF the same,
we modify the flow network and show it in Figure 6(c). The
modification is that there are an upper and a lower bounds
(a) 
e1 e4 
e2 
e3 e6 
e5 e 
(b) 
e1 e4 
e2 
e3 e6 
e5 e 
queue e x queue y x y e1 e2 e3 e4 e5 e6 
dequeue enqueue 
Tile A Tile B Tile A Tile B 
Figure 7: An example of how to add 2D edges for
refinement. (a) e is the edge we are refining now,
and e1 ∼ e6 are the edges who connect the same tiles
with e. (b) If there is any improvement on via count
and LD violation from the refinement of e, e1 ∼ e6
are enqueued.
of the flow on each arc now. For each arc except the out-
going arcs from a layer in this model, its upper-bound flow
will be identical to the capacity of the corresponding arc in
Figure 5(c), and its lower-bound flow is 0. For the outgo-
ing arc of a layer, its upper-bound flow is the sum of its
capacity and the overflow value of this chosen edge, and its
lower-bound flow is its capacity. The reason we set the flow
with upper and lower bounds is to keep TOF the same after
refinement. Figure 6(d) shows a min-cost max-flow result of
the flow network in Figure 6(c), which can be used to derive
the layer assignment result shown in Figure 6(b).
6.2.3 Overall Refinement Procedure
The aforementioned methods illustrate how we refine a
given 2D edge. We now describe the overall refinement pro-
cedure. We firstly put all 2D edges into a queue, and then
perform the min-cost max-flow refinement based for each
popped 2D edge due to dequeue. The reason why we firstly
enqueue all 2D edges to refine is because that the initial 3D
layer assignment result derived from COLA may have LD
violation; in order to minimize LD violation which may hap-
pen on each 2D edge, it is necessary to refine each edge once.
During this process, if the refinement result of a 2D edge has
improvement on via count or LD violation, we enqueue the
edges which connect the same tiles with this refined 2D edge.
We use Figure 7 to illustrate this. In Figure 7(a), there are
two adjacent tiles, T ileA and T ileB, which are connected
by edge e. T ileA has four edges, e1, e2, e3, and e. T ileB
has four edges e4, e5, e6, and e. Assume that e is the 2D
edge popped from the queue, and its refinement result will
re-assign those 3D edges on it. If there is any improvement
on via count or LD violation, e1, e2, and e3 on T ileA and
e4, e5, and e6 on T ileB may have chances to improve their
own layer assignment results. Therefore, in Figure 7(b), we
enqueue those edges for further possible improvements. This
process will be performed until there is no edge in the queue.
Note that there is a hash table to store those 2D edges in
the queue to circumvent the duplications of edges for saving
run time.
The refinement procedure is applied to minimize LD vio-
lation and via count. However, after fixing the LD violation
derived from the result of COLA, the via count may increase
after refinement. As shall be seen in Section 7.2, it is possi-
ble that total wirelength increases due to via count increase
after refinement, because LD violation decreases.
Table 1: Comparison between GLADE [4] and our router on the ICCAD 2009 benchmarks [16].
GLADE [4] Ours
Benchmark TOF LDOF LD Vio TWL CPU(mins.) TOF LDOF LD Vio TWL CPU(mins.)
adaptec1 0 0 0 45.4 7.0 0 0 59849/0 45.2/45.3 10.3
adaptec2 0 0 0 43.9 1.4 0 0 183623/0 43.2/43.8 4.2
adaptec3 0 0 0 115.2 7.2 0 0 210387/0 115.0/114.9 11.3
adaptec4 0 0 0 106.5 1.8 0 0 283214/0 105.9/106.5 3.9
adaptec5 0 0 0 130.1 15.2 0 0 66706/0 129.9/129.6 26.0
bigblue1 0 0 0 48.3 8.7 0 0 53858/0 48.5/48.5 17.1
bigblue2 0 0 0 69.6 7.8 0 0 7248/0 69.6/69.1 10.4
bigblue3 0 0 0 105.9 3.8 0 0 45669/0 105.7/105.5 10.4
bigblue4 188 0 0 178.9 121.0 188 0 71248/0 178.7/177.6 324.8
newblue1 2 0 0 35.6 4.8 2 0 6314/0 35.6/35.5 8.7
newblue2 0 0 0 59.7 0.8 0 0 49218/0 59.5/59.6 2.4
newblue4 140 0 0 108.1 40.1 140 0 45643/0 107.9/107.7 48.6
newblue5 0 0 0 190.7 12.6 0 0 9031/0 190.7/190.3 20.8
newblue6 0 0 0 139.8 11.5 0 0 26887/0 139.8/139.0 23.7
newblue7 78 0 0 281.7 119.9 78 0 113369/0 281.2/279.3 169.9
Comp. - - 1.000 1.000 1.000 - - -/1.000 0.998/0.996 1.904
Table 2: Comparison between NTHU-Route 2.0 [5] and our router on the test cases with general layer
directives. Note that the “LDOF” column is omitted in the major column “Ours (pseudo LA)” since it is
identical to the one in the major column “Ours.”
NTHU-Route 2.0 [5] Ours Ours (pseudo LA)
Case TOF LD Vio TWL CPU(mins.) TOF LDOF LD Vio TWL CPU(mins.) TOF LD Vio TWL CPU(mins.)
adaptec1 0 95066 45.1 5.3 0 0 46284/0 45.1/45.2 11.5 0 0/0 60.5/49.1 11.9
adaptec2 0 289132 43.1 1.3 0 0 145818/0 43.2/43.7 3.3 0 0/0 58.2/46.9 4.3
adaptec3 0 394924 114.9 5.6 0 0 205585/0 115.0/114.9 12.1 0 0/0 142.9/122.9 13.3
adaptec4 0 440412 105.9 1.7 0 0 222726/0 105.9/106.4 4.2 0 0/0 137.2/113.9 5.2
adaptec5 0 120402 129.8 15.7 0 0 59885/0 129.9/129.9 27.3 0 0/0 166.4/139.3 32.1
bigblue1 0 139562 47.8 7.0 0 0 58014/0 48.4/48.5 17.9 0 0/0 62.3/52.7 27.9
bigblue2 0 23070 69.3 6.0 0 0 11067/0 70.3/69.8 17.6 0 0/0 91.5/75.6 25.2
bigblue3 0 101772 105.7 3.7 0 0 54809/0 105.7/105.5 10.6 0 0/0 178.4/117.0 20.7
bigblue4 162 130542 178.7 75.8 236 0 66851/0 178.2/177.1 135.9 236 0/0 297.0/197.4 146.3
newblue1 0 13224 35.6 3.9 6 0 7513/0 35.6/35.5 8.1 6 0/0 50.0/38.7 9.1
newblue2 0 90746 59.4 0.9 0 0 44752/0 59.5/59.5 2.6 0 0/0 84.8/63.8 4.4
newblue4 138 73450 108.3 65.4 156 0 37856/0 107.7/107.5 51.0 156 0/0 145.5/116.9 53.4
newblue5 0 36910 190.7 12.8 0 0 19891/0 190.6/190.2 21.2 0 0/0 258.3/206.3 34.3
newblue6 0 36276 139.8 10.4 0 0 17986/0 139.8/139.0 25.4 0 0/0 193.1/150.7 47.1
newblue7 62 174794 279.8 57.8 82 0 84953/0 280.5/278.4 148.3 82 0/0 453.8/308.4 193.2
Comp. - 1.000 1.000 1.000 - - 0.502/0.000 1.001/0.998 1.818 - 0.000/0.000 1.439/1.088 2.299
[4] Y.-J. Chang, T.-H. Lee, and T.-C. Wang. GLADE: A modern
global router considering layer directives. In Proceedings of
International Conference on Computer-Aided Design, pages
319–323, San Jose, CA, 2010.
[5] Y.-J. Chang, Y.-T. Lee, J.-R. Gao, P.-C. Wu, and T.-C. Wang.
NTHU-Route 2.0: A robust global router for modern designs.
IEEE Transactions on Computer-Aided Design of Integrated
Circuits and Systems, 29(12):1931–1944, 2010.
[6] H.-Y. Chen, C.-H. Hsu, and Y.-W. Chang. High-performance
global routing with fast overflow reduction. In Proceedings of
Asia and South Pacific Design Automation Conference, pages
582–587, Yokohama, Japan, 2009.
[7] M. Cho, K. Lu, K. Yuan, and D. Z. Pan. Boxrouter 2.0: A
hybrid and robust global router with layer assignment for
routability. ACM Transactions on Design Automation of
Electronic Systems, 14(2):1–21, 2009.
[8] C. Chu and Y.-C. Wong. FLUTE: Fast lookup table based
rectilinear steiner minimal tree algorithm for VLSI design.
IEEE Transactions on Computer-Aided Design of Integrated
Circuits and Systems, 27(1):70–83, 2008.
[9] K.-R. Dai, W.-H. Liu, and Y.-L. Li. Efficient simulated
evolution based rerouting and congestion-relaxed layer
assignment on 3-d global routing. In Proceedings of Asia and
South Pacific Design Automation Conference, pages 570–575,
Yokohama, Japan, 2009.
[10] C.-H. Hsu, H.-Y. Chen, and Y.-W. Chang. Multi-layer global
routing considering via and wire capacities. In Proceedings of
International Conference on Computer-Aided Design, pages
350–355, San Jose, CA, 2008.
[11] J. Hu, J. A. Roy, and I. L. Markov. Completing high-quality
global routes. In Proceedings of International Symposium on
Physical Design, pages 35–41, San Francisco, CA, 2010.
[12] T.-H. Lee and T.-C. Wang. Congestion-constrained layer
assignment for via minimization in global routing. IEEE
Transactions on Computer-Aided Design of Integrated
Circuits and Systems, 27(9):1643–1656, 2008.
[13] T.-H. Lee and T.-C. Wang. Robust layer assignment for via
optimization in multi-layer global routing. In Proceedings of
International Symposium on Physical Design, pages 159–166,
San Diego, CA, 2009.
[14] Z. Li, C. J. Alpert, S. Hu, T. Muhmud, S. T. Quay, and P. G.
Villarrubia. Fast interconnect synthesis with layer assignment.
In Proceedings of International Symposium on Physical
Design, pages 71–77, Portland, OR, 2008.
[15] M. D. Moffitt. Maizerouter: Engineering an effective global
router. IEEE Transactions on Computer-Aided Design of
Integrated Circuits and Systems, 27(11):2017–2026, 2008.
[16] M. D. Moffitt. Global routing revisited. In Proceedings of
International Conference on Computer-Aided Design, pages
805–808, San Jose, CA, 2009.
[17] M. M. Ozdal and M. D. F. Wong. Archer: A history-based
global routing algorithm. IEEE Transactions on
Computer-Aided Design of Integrated Circuits and Systems,
28(4):528–540, 2009.
[18] M. Pan and C. Chu. Fastroute: a step to integrate global
routing into placement. In Proceedings of International
Conference on Computer-Aided Design, pages 464–471, San
Jose, CA, 2006.
[19] M. Pan and C. Chu. Fastroute 2.0: A high-quality and efficient
global router. In Proceedings of Asia and South Pacific
Design Automation Conference, pages 250–255, Yokohama,
Japan, 2007.
[20] W. Swartz. Issues in global routing. In Proceedings of
International Symposium on Physical Design, pages 142–147,
Portland, USA, 2008.
[21] T.-H. Wu, A. Davoodi, and J. T. Linderoth. A parallel integer
programming approach to global routing. In Proceedings of
Design Automation Conference, pages 194–199, Anaheim, CA,
2010.
[22] Y. Xu and C. Chu. An auction based pre-processing technique
to determine detour in global routing. In Proceedings of
International Conference on Computer-Aided Design, pages
305–311, San Jose, CA, 2010.
Assignment of Multi-layer Global Routing」以及「GLADE: A Modern Global 
Router Considering Layer Directives」，於第二日上午發表，會後也與一些與
會者進行討論、交流。除此之外，筆者也負責共同主持大會的一個論文發
表場次：「Routing – Theory and Practice」，該場次安排三篇論文進行最新的
相關技術成果報告。 
此外大會也安排 Receptions 於第二天的晚上舉辦，筆者也於這些場合
和一些國內外的老朋友、新朋友交談並分享研究心得。  
  筆者於參加ICCAD期間，藉由聆聽Keynote Address、Tutorials與論文
發表，更加了解研究領域內的成果現況及未來趨勢，受益良多。  
(a)
diffusion
gate
antenna
jumper
via
wire
(b)
diffusion
gate
antenna
Fig. 2. Illustration of antenna and jumper insertion.
additional (stacked) vias and hence may hurt the yield, reliability,
and performance of a design.
Because of the increasing complexity in modern design, neither
layer assignment nor jumper insertion alone can completely solve the
antenna problem. Therefore layer assignment can be a complementary
approach (instead of a competing approach) for jumper insertion [14].
The experiment results reported in [14] show that by properly
considering antenna effect during layer assignment, the amount of
required vias caused by jumper insertion (which is invoked after
layer assignment) can be signiﬁcantly reduced; this indicates that
layer assignment helps improve the feasibility of jumper insertion
and plays a key role for antenna avoidance.
(a)
(b)
diffusion
gate
diffusion
gate
e1e2e3
e1
e2
e3
antenna
antenna
Fig. 3. Two layer assignment results with different antennas.
In this paper, we study a layer assignment problem which takes
antenna effect into account. The problem uses the total wire overﬂow
and the maximum wire overﬂow of a given 2D global routing solution
to form two wire congestion constraints, and asks to transform the 2D
global routing solution into a 3D one. The objective is to minimize
the amount of antenna violations and the via count while the two
wire congestion constraints are satisﬁed. Different from the layer
assignment problem which considers via count only [1], [5], [6], [9],
[11], our problem is more practical because it also takes the antenna
problem into account. Compared to the layer assignment problem
addressed in [14], our problem is more general because it considers
both wire congestion constraints and minimizes the via count. We
present an algorithm that tackles the addressed layer assignment
problem in a net-by-net manner. Our algorithm is based on a novel
extension of the key ideas of [14] and a judicious modiﬁcation of a
via-count-driven layer assignment method [1] such that it can robustly
handle both antenna avoidance and via count minimization. Effective
techniques are also developed and adopted by our algorithm to reduce
the solution space. In addition, to further reduce the via count but
without increasing the amount of antenna violations, a reﬁnement
procedure based on min-cost max-ﬂow is developed and added to
our algorithm. The experiment results show that when compared with
the layer assignment algorithm of a state-of-the-art global router,
NTHU-Route 2.0 [8], our algorithm not only can improve the via
count slightly but also can signiﬁcantly reduce the amount of antenna
violations.
The remainder of this paper is organized as follows. Section II
gives the preliminaries and the problem formulation. Section III
details our algorithm. The experiment results are shown in Section IV,
and the conclusion is made in Section V.
II. PRELIMINARIES AND PROBLEM FORMULATION
A. Notation
In a multi-layer global routing instance, we assume that each
metal layer has a preferred routing direction (horizontal or vertical
direction) such that half of the layers are horizontal ones and the
rest are vertical ones. Each metal layer is partitioned into tiles, and
the boundary between two adjacent tiles on the same metal layer
is associated with a wire capacity denoting the maximum number
of nets that can pass through without causing wire overﬂow. See
Fig. 1(a) for a four-layer global routing instance.
A 3D routing grid graph G = (V,E) is used to model a multi-layer
global routing instance (see Fig. 1(b)). Each vertex in the vertex set
V denotes a tile and is called a tile vertex. The edge set E contains
two disjoint sets Ew and Ev . Each edge in Ew denotes a boundary
and is called a boundary edge, while each edge in Ev corresponds
to vias and connects two tile vertices on adjacent metal layers. Each
boundary edge e in Ew is associated with a number c(e) which
denotes the wire capacity of the boundary corresponding to e. For
simplicity, it is assumed that each boundary edge has one unit of wire
length.
Let N denote the set of nets in G. Each net ni in N is represented
by a subset Pi of V such that each pin pi,j in ni is located within
a tile in Pi. A global routing solution for ni is a tree Ti = (Vi, Ei)
of G such that Pi ⊆ Vi.
Let G′ = (V ′, E′) be the 2D routing grid graph obtained by
projecting G to a common plane (see Fig. 1(c)). The wire capacity of
each edge e′ in G′ is the summation of the capacities of the boundary
edges which are projected to e′. Let N ′ be the set of nets obtained
by projecting N to G′, where the projected pins of a net that fall in
the same vertex are merged into one vertex in V ′. A global routing
solution for each net n′i in N
′ is denoted by a tree T ′i = (V
′
i , E
′
i)
of G′ such that all pins in n′i are contained in V
′.
Given a 3D global routing solution S of N , we can deﬁne the
following terms. For each boundary edge e, its wire demand d(e) is
deﬁned as the number of nets passing through e, and its wire overﬂow
o(e) is deﬁned as d(e) − c(e) if d(e) > c(e), and 0 otherwise.
The total wire overﬂow TWO(S) is deﬁned as the summation of
the wire overﬂows of all boundary edges, and the maximum wire
overﬂow MWO(S) is deﬁned as the maximum wire overﬂow among
all boundary edges. For a 2D global routing solution S′ of N ′, we
can also deﬁne TWO(S′) and MWO(S′) similarly.
313
looking for a set of separator candidates, we also want to minimize
the amount of edges contained in the set.
In [14], a slightly different problem of ﬁnding separator candidates
was considered, where the length of each subtree cannot exceed
Amax, regardless of the amount of sinks in the subtree. Therefore,
the amount of separator candidates tends to be larger than that in our
problem. The authors of [14] proposed a linear-time method, that
greedily selects edges from the deepest level towards the source, to
solve their problem. We extend this greedy method to handle our
problem, and throughout the rest of this paper, a separator candidate
is also called a separator for short, unless stated otherwise.
The pseudocode of our method is given in Fig. 5, where Tu denotes
the current subtree rooted at u, L(Tu) denotes the length of Tu,
sink num(Tu) denotes the number of sinks in Tu, a branch of Tu
is a subtree Tv of Tu plus the edge (u, v), and root is the source
of the net and is at level 1. Lines 1 to 8 are almost the same as the
method in [14] except that in line 3, when sink num(Tu) is large
than 0, it is always treated as 1 in [14]. On the other hand, the method
in [14] does not have the code from lines 9 to 13. This extra code is
to consider the case where after executing lines 1 to 8 the resultant
subtree rooted at the source does meet the antenna ratio bound but at
least one of the subtrees of the source contains two or more sinks and
has length larger than Amax. For this case, if we do not select any
edge from such a subtree of the source as a separator, our subsequent
layer assignment step may induce an antenna violation to this net. For
example, Fig. 6(a) shows a tree that has two sinks and six units of wire
length. By assuming Amax is three, the length of this tree divided
by its number of sinks is 6/2 = 3 which does not exceed Amax.
Since there is no separator selected from this tree, each edge can be
assigned to any of its available layers, and therefore a possible layer
assignment result as shown in Fig. 6(b) can be produced. However,
this layer assignment result creates an antenna for the right sink and
has antenna ratio 4 which is larger than Amax. To avoid generating
such a layer assignment result, our method selects the edge near the
source as a separator in lines 9 to 13, as shown in Fig. 6(c). Later on
when performing layer assignment, since the layer of this separator
must be assigned to a layer higher than any of those of the other edges
by our algorithm, the result shown in Fig. 6(c) can be produced and
meet the antenna ratio bound.
We use the following example to further illustrate our method for
ﬁnding separators. Under the assumption that Amax is two units of
wire length, for the 2D routed net shown in Fig. 7(a), our method
will sequentially ﬁnd the four separators e10, e7, e4, and e1, which
are respectively denoted by s4, s3, s2, and s1 in Fig. 7(b).
2) Net Order Determination: To solve the layer assignment prob-
lem in a net-by-net manner, we need to develop a net ordering
method. We modify the net ordering method adopted by COLA [1].
Note that COLA is the layer assignment algorithm used by the global
router NTHU-Route 2.0 [8], but it does not consider antenna effect.
For each 2D routed net T ′i , we ﬁrst obtain PinNum(T
′
i ),
NetLength(T ′i ), and SeparatorNum(T
′
i ), where PinNum(T
′
i )
is the number of pins in T ′i , NetLength(T
′
i ) is the total wire length
of T ′i , and SeparatorNum(T
′
i ) is the number of separators found
by our method for T ′i . We then use the following formula to compute
a score Score(T ′i ) for T
′
i :
Score(T ′i ) =
α× PinNum(T ′i ) + β × SeparatorNum(T ′i )
NetLength(T ′i )
where α and β are user-speciﬁed parameters, and both are set to 0.5 in
our current implementation. Note that COLA [1] takes PinNum(T ′i )
Algorithm : Separator-Finding Method
Output : A set C of separators for a net.
1: for i maximum_level to 1
2:       while there is an unvisited node u at level i
3: while sink_num(Tu) > 0 and (L(Tu) / sink_num(Tu)) > Amax
4:       remove the longest branch ((u, v) + Tv) and update L(Tu)
5:       add (u, v) into C
6:       end while
7:       end while
8: end for
9: for each subtree Tu of root
10:       if sink_num(Tu) > 1 and L(Tu) > Amax
11:              add (root, u) into C
12:       end if
13: end for
Fig. 5. Our method for ﬁnding a set of separators.
Amax = 3
(a) (c)
source sink separator antenna
available layers=4, 6
available layers=3, 5
(b)
antenna violation antenna safe
6
5
4
333
4
5
4
333
Fig. 6. An example where an edge will be selected as a separator.
(a)
p2
p1
source sink separator
p3
p4
e1e2
e6
e3
e5 e4
e7
e8
e10e11
e9
e12
(b)
s2
s1
s3
s4
s1=e1
s2=e4
s3=e7
s4=e10
(c)
Topological order
s1 s2 s3 s4
(s1,s2,s3,s4)=
(1, 1, 2, 3)
(1, 1, 2, 5)
(1, 1, 4, 5)
(1, 3, 2, 3)
(3, 5, 4, 5)
…
If (s1,s2,s3,s4)=(3, 5, 4, 5)
(d)
Available layers for 
e2=1, e3=2,
e5=1,3, e6=2,4,
e8,e9=2,
e11,e12=1,3.
Fig. 7. Layer assignment for antenna avoidance.
315
model the layer re-assignment problem of their involved edges as a
min-cost max-ﬂow problem. Fig. 8(c) shows the ﬂow network for
the layer re-assignment problem given in Fig. 8(a). In Fig. 8(c), for
each arc from the source (labeled as S) to an involved net edge, its
capacity is 1 and cost is 0; for each arc from an involved net edge to
an available layer, its capacity is 1 and cost is the required number
of vias for connectivity; for each arc from an available layer to the
terminal (labeled as T ), its capacity is equal to the wire capacity and
cost is 0. With this model, Fig. 8(d) shows a min-cot max-ﬂow of
Fig. 8(c), which can be used to derive the layer assignment result
shown in Fig. 8(b).
(a)
e1=2 e3=2
e2=5
e4=4 e6=4
e5=1
(b)
e1=2 e3=2
e2=1
e4=4 e6=4
e5=5
#Via=3+3+3+3=12 #Via=1+1+1+1=4
(c)
Net a
Net b
Net a
Net b
S T
cap./cost
Net edges
e2
e5
Layers
1
3
5
0/0
1/2
1/2
wire cap.(1,3,5)=(1,0,1)
(d)
S T
Net edges
e2
e5
Layers
1
3
5
0/0
1/2
1/2
#Via=Cost =4
3 vias 3 vias 1 via 1 via
Fig. 8. A reﬁnement example by min-cost max-ﬂow.
The aforementioned min-cost max-ﬂow method is applied to
improve the via count in the reﬁnement procedure. However, in order
to avoid the increase of the number of antenna-violated nets after
reﬁnement, for antenna-safe nets, we limit their choices of available
layers in the ﬂow network to meet the antenna rule. On the other
hand, to meet the two wire congestion constraints, the ﬂow of the
outgoing arc of each layer vertex will be constrained by an upper
and a lower bounds, depending on the range of the demand that
this layer can be given. For example, if a layer must be assigned
to at least p nets but no more than q nets in order to meet the two
wire congestions constraints, the ﬂow of the arc from this layer to the
terminal T will be lower and upper bounded by p and q, respectively.
In our current implementation, we perform the reﬁnement procedure
on each boundary edge in the 2D routing graph once and follow the
row-major order. As shall be seen in Section IV, it is possible that
the number of antenna-violated nets may decrease after reﬁnement,
because some antenna-violated nets become antenna-safe.
We have the following theorem whose proof is omitted.
Theorem 1: Given a 2D global routing solution, our layer as-
signment algorithm LAVA (with or without running the reﬁnement
procedure) always produces a 3D global routing solution that satisﬁes
the two given wire congestion constraints.
IV. EXPERIMENT RESULTS
We implemented LAVA in ANSI C++ and executed it on a Linux
workstation with an AMD Opteron 2.2 GHz CPU and 8GB memory.
The ISPD’08 global routing contest benchmarks [3] were used as
the test cases. Since no antenna ratio bound Amax is speciﬁed for
these benchmarks, we chose a proper value for Amax under the
consideration of the current process technology.
We compare LAVA with COLA [1]. In order to generate initial
2D routing results for LAVA and COLA, we compressed the results
of NTHU-Route 2.0 [8] into 2D ones and used them as the initial
2D routing results. We do not compare the algorithm in [14] partly
because the authors of [14] could not provide us with their source
code. In addition, there are several knobs of control which were not
clearly speciﬁed in [14], and hence it is hard for us to truly implement
the algorithm proposed in [14].
TABLE I shows the results and comparisons of these layer assign-
ment algorithms. Because COLA was adopted by NTHU-Route 2.0 to
perform layer assignment, its results are the same as the original 3D
results of NTHU-Route 2.0. In TABLE I, the experiment results of
COLA and LAVA are reported in three major columns, “NTHU-Route
2.0 + COLA [1],” “NTHU-Route 2.0 + LAVA (w/o reﬁnement),”
and “NTHU-Route 2.0 + LAVA (with reﬁnement),” where “NTHU-
Route 2.0 + LAVA (with reﬁnement)” and “NTHU-Route 2.0 +
LAVA (w/o reﬁnement)” respectively list the results produced from
LAVA with and without running the reﬁnement procedure. Each
major column reports the via count (in the “#Vias(e5)” column), the
number of antenna-violated nets (in the “#Violated nets” column),
and the number of antenna-violated sinks (in the “#Violated sinks”
column); additionally, the CPU time results (in the “CPU(s)” column)
are also given, including those of COLA that were collected from our
machine.
As can be seen from TABLE I, LAVA generated a solution with
much smaller numbers of antenna-violated nets and sinks for each test
case, as compared with COLA. Without reﬁnement, LAVA produced
similar via count but decreased the numbers of antenna-violated nets
and sinks by 29.5% and 76.3% on average; with reﬁnement, LAVA
decreased the numbers of vias, antenna-violated nets, and antenna-
violated sinks by 1.1%, 31.4%, and 76.9%, respectively. Besides, the
reﬁnement procedure was able to further reduce the via count and the
amounts of antenna-violated nets and sinks for each test case. As for
run times, LAVA with and without running the reﬁnement procedure
are respectively 3.63X and 2.13X slower than COLA. However, their
run times are acceptable because they still ran efﬁciently, taking up
to 1149 seconds and 777 seconds for a test case, respectively. In
TABLE I, there is an “Amax(%)” column which lists the average
percentage of the possible values between Amax and Amin that were
tried by LAVA for each test case. This number is relatively small,
ranging from 1.15%∼8.9%, and that is why LAVA does not incur
much run time overhead in practice. Note that since the resulting
total wire overﬂow and maximum wire overﬂow of each algorithm
are the same and satisfy the two wire congestion constraints, we omit
them from the table.
It is worth pointing out that LAVA can be easily modiﬁed to
solve a more general layer assignment problem that also takes via
317
GLADE: A Modern Global Router Considering Layer
Directives
Yen-Jung Chang, Tsung-Hsien Lee, and Ting-Chi Wang
Department of Computer Science, National Tsing Hua University, Hsinchu, Taiwan
jalamorm@gmail.com, tsunghsienlee@gmail.com, tcwang@cs.nthu.edu.tw
Abstract—Global routing is a very crucial stage in a design cycle,
because it physically plans the routes of nets on a chip. In order to
boost the research and development of global routing techniques, ISPD
held contests and released benchmarks in 2007 and 2008, respectively.
However, the contests may lead researchers away from facing other
real problems in practice. In this paper we study a new global routing
problem that not only considers traditional routing objectives such as
overflow and wirelength but also focuses on honoring layer directives
that are usually specified for timing-critical nets to alleviate performance
degrading. Based on novel extensions of an academic router, we present
a new global router called GLADE for the addressed problem. The
experimental results show that GLADE can effectively generate a high-
quality solution, which balances the metrics under consideration, for each
test case from the set of recently released ICCAD 2009 benchmarks.
I. INTRODUCTION
High performance is one of the ultimate goals that are typically
pursued for modern VLSI design. Among all stages in a design cycle,
routing is a very important one because it influences the reliability,
power consumption, and timing of a chip profoundly. Due to the
problem size, routing is usually divided into global routing and
detailed routing. A good global routing result can guide a detailed
router to obtain a high-quality design. The metrics to measure a global
router usually include the total overflow and wirelength of the routing
result it generates.
In order to boost the research and development of global routing
techniques, International Symposium on Physical Design (ISPD)
held contests and released two sets of benchmarks in 2007 [1]
and 2008 [2], respectively. Both sets of benchmarks provide multi-
layer designs, and therefore all academic global routers that were
developed in 2007 or afterward, e.g., [3], [4], [5], [6], [7], [8], [9],
[10], [11], [12], are able to generate three-dimensional (3D) routing
solutions. Unfortunately, the ISPD contests may lead researchers
away from facing other real problems in practice. In industrial
designs, the goals of global routing are not only to minimize the total
overflow and wirelength, but also to consider the factors that may
degrade the quality of a design, e.g., the detours of timing-critical
nets that may impair the performance of a chip. Consequently, the
problem specifications of the ISPD contests have been questioned. For
instance, the via count within a global bin should not be left unbound
[13][14], and intra-bin congestion should be considered [15].
In this paper, we study a new global routing problem that not
only considers traditional routing objectives such as overflow and
wirelength but also focuses on honoring layer directives. Layer
directives are often specified for timing-critical nets to meet the
performance target in a modern physical design flow. For example,
recent wire synthesis algorithms [16][17] use layer ranges for timing
closure. A set of benchmarks that incorporate layer directives are
modified from ISPD 2008 benchmarks and released in ICCAD last
global bin
edge
chip
vertex
Fig. 1. A multi-layer design with preferred routing directions.
year [18]. Based on novel extensions of NTHU-Route 2.0 [11], we
present a new global router called GLADE (standing for Global
router for LAyer DirEctives) for the addressed problem. Further, the
experimental results show that GLADE can effectively generate a
high-quality solution, which balances the metrics under consideration,
for each ICCAD 2009 benchmark.
The rest of the paper is organized as follows. We describe the
background of global routing, the ICCAD 2009 benchmarks and the
objectives of GLADE in Section II. Next, we give a brief review
on NTHU-Route 2.0 in Section III. Then, we describe the details of
GLADE in Sections IV and V. Finally, the experimental results are
presented in Section VI and we conclude the paper in Section VII.
II. PRELIMINARIES
A. Global Routing
For global routing, a multi-layer design can be modeled by a 3D
grid graph G which is composed of a set V of vertices and a set E
of edges. As depicted in Fig. 1, each global bin and each boundary
between two bins correspond to a vertex and an edge, respectively.
There is also a set of nets, where each net is composed of a set of pins
and each pin corresponds to a vertex. The global routing problem for
a net is to find a tree that connects all pins of the net by using edges
and vias. Moreover, it is preferable to route each net with only one
direction on a layer in order to prevent wires from crossing. Taking
Fig. 1 for example, the design separates horizontal and vertical wires
on different metal layers.
In a routing graph, the capacity ce of an edge e ∈ E represents
the number of available routing tracks e contains, and the demand
de represents the amount of nets that pass through e. For an edge
e, if its demand de exceeds its capacity ce, its overflow is defined
as (de − ce); otherwise, its overflow is zero. A typical objective for
global routing is to minimize the total overflow among all edges.
Meanwhile, the total wirelength of all routes should be as short as
possible. In multi-layer designs, wirelength calculation also involves
vias.
978-1-4244-819 - /10/$26.00 ©2010 IEEE 3194 1
Non-preferred Layer
Non-preferred Layer
8
de(3)=8 e'3
e'2
e'1
(a)
Non-preferred Layer
2
9
8
de(2)=11 e'3
e'2
e'1
(b)
Fig. 3. (a) vce(3)=10 and vde(3)=8. (b) vce(2)=20 and vde(2)=19.
performs pseudo layer assignment during 2D global routing. Pseudo
layer assignment dose not actually assign nets to 3D edges. It adopts
the notions of virtual capacity and virtual demand to achieve the
goal instead. In other words, when GLADE tries to find routes for
LD nets on the plane, it uses the information on the 3D routing graph
to retrieve different values of capacity and demand, which depends
on the LD types of the nets, to calculate route costs.
1) Virtual Capacity: For each 2D edge e, a virtual capacity vce(t)
is defined for each LD type t (t > 1), and is calculated by the sum of
the capacities of the corresponding 3D edges located on the preferred
layers with respect to the LD type t. For example, in Figure 2 if the
capacities of the 3D edges e′1, e
′
2, and e
′
3 are denoted by ce′
1
, ce′
2
,
and ce′
3
, then we have vce(3) = ce′
3
and vce(2) = ce′
3
+ ce′
2
. It is
clear to see that vce(t) specifies the capacity that e can provide for
LD nets of type t.
2) Virtual Demand: For each 2D edge e, a virtual demand vde(t)
can be also defined for each LD type t (t > 1). When calculating
vde(t), GLADE presumes that nets whose LD types are larger than
t have a higher priority to be processed during layer assignment, be-
cause they have smaller layer ranges than LD nets of type t. Therefore
some certain amount of the virtual capacity vce(t) may be consumed
by those nets. Therefore the virtual demand vde(t) will take into
account the demands caused by LD nets whose types are larger than
t. The vde(t) is calculated by de(t) +min(vde(t+1), vce(t+1)),
where de(t) is the amount of LD nets of type t that pass through e.
We use Fig. 3 and 4 to help illustrate how to calculate vde(t). For
both figures, the 3D edges, e′1, e
′
2, and e
′
3 each have a capacity of
10 and are projected to the 2D edge e; the amounts of each type
of LD nets passing through e are shown in the top-left corners;
the gray and black parts indicate the capacities that are virtually
consumed by LD nets of types 2 and 3, respectively. Under the
assumption that LD nets of type 3 will be assigned first during layer
assignment; the hollow parts indicate the remaining capacities. For
the example shown in Fig. 3, we have vce(3) = ce′
3
= 10 and
vce(2) = ce′
3
+ ce′
2
= 10 + 10 = 20, vde(3) = de(3) = 8,
and vde(2) = de(2) +min(vde(3), vce(3)) = 11 +min(8, 10) =
11+8 = 19. In addition, the capacity of each 3D edge e′t is assumed
to be preserved for LD nets of type t, and therefore the virtual
overflow caused by LD nets of type larger than t does not carry over
to e′t. This is why we put the min term in the formula for calculating
virtual demand. For the example in Fig. 4, the LD nets of type 3 in
Fig. 4(a) are virtually assigned to e′3 first, which causes two routing
tracks short on e′3. Since the 2 units of overflow do not carry over to
layers lower than e′3, we cross them out in Fig. 4(b). After the LD
nets of type 2 are virtually assigned to e′2, we get the virtual demands
for LD type 2, which is 21 (vde(2) = de(2) + ce′
3
= 11 + 10).
B. LDOF
During 2D global routing, GLADE needs a guidance which can
estimate the possible total LD violation and additional TOF that a
3D solution, when obtained from the current 2D solution by layer
assignment, might have. In fact, a LD net may cause LD violation
Non-preferred Layer
Non-preferred Layer
12
de(3)=12 e'3
e'2
e'1
(a)
Non-preferred Layer
11
10
de(2)=11 e'3
e'2
e'1
(b)
Fig. 4. (a) vce(3)=10 and vde(3)=12. (b) vce(2)=20 and vde(2)=21.
Non-preferred Layer
Non-preferred Layer
de(3)=8
8 e'3
e'2
e'1
(a)
Non-preferred Layer
de(2)=14
2
12
LDOF=2
e'3
e'2
e'1
(b)
Fig. 5. (a) GLADE assumes that LD nets of type 3 will be assigned
first during layer assignment. (b) Then LD nets of type 2 will be assigned
afterward.
and/or overflow after layer assignment. Therefore for each 2D edge e,
we define a LDOF for each LD type t (t > 1) , and it is calculated by
max(vde(t)− vce(t), 0). The LDOF of each 2D edge is the sum of
the LDOFs among all LD types, and the total LDOF of a 2D global
routing solution is the sum of the LDOFs among all 2D edges.
Fig. 5 illustrates an example to calculate LDOF, where each
3D edge e′t is assumed to have the capacity of 10, and there
are 8 and 14 LD nets of types 3 and 2 passing through the 2D
edge e, respectively. Firstly, GLADE presumes the 8 LD nets of
type 3 will be assign to e′3 first during layer assignment (see Fig.
5(a)), because they have a smaller layer range than the LD nets
of type 2. We get vce(3) = 10, vde(3) = 8, and the LODF
of type 3 is max(vde(3) − vce(3), 0) = max(8 − 10, 0) = 0.
After then, LD nets of type 2 will be virtually assigned to e′3 and
e′2 because the two remaining routing tracks of e
′
3 can still be
used by them (see Fig. 5(b)). We get vce(2) = 10 + 10 = 20,
vde(2) = de(2) + vde(3) = 14 + 8 = 22, and the LODF of
type 2 is max(vde(3) − vce(3), 0) = max(22 − 20, 0) = 2. As
a result, the LDOF of the 2D edge e is 2. Non-zero LDOF implies
that additional overflow (if layer directives must be honored) or
LD violation (if overflow must be minimized) will occur after layer
assignment, regardless of the layers to which the two excess LD nets
of type 2 are assigned.
C. The Flow of 2D Global Routing Considering Layer Directives
Now we are ready to explain our 2D global routing method
which is based on the first three stages of NTHU-Route 2.0 with
proper modifications to handle LD nets. In the initial stage, our
method follows NTHU-Route 2.0 and does not perform any LDOF
optimization, because the initial stage plays an important role in
controlling total overflow and wirelength. Besides, the total LDOF
can be effectively eliminated in the main stage and refinement stage.
During the main stage, our method reduces the total LDOF and
overflow of the solution obtained in the initial stage iteratively. Firstly,
it replaces ce and de by the virtual capacity vce(t) and the virtual
demand vde(t) when routing a LD net of type t. In other words, our
method uses vce(t) and vde(t) in Eq. (2) when calculating the cost
of edge e. Also, it uses vde(t) and vce(t) to determine if edge e is
overflowed. Finally, our method calculates the total LDOF and the
total overflow at the end of each iteration in order to check if the
solution gets converged.
321
TABLE II
COMPARISON BETWEEN NTHU-ROUTE 2.0 AND GLADE ON ICCAD
2009 BENCHMARKS.
NTHU-Route 2.0 GLADE
Benchmark TOF LDVio TWLVWL CPU TOFLDVioLDOF TWL VWL CPU
adaptec1 0 129440 45.1 9.3 5.3 0 0 0 45.4 9.6 7.0
adaptec2 0 379086 43.1 10.1 1.3 0 0 0 43.9 10.9 1.4
adaptec3 0 450740114.9 18.7 5.6 0 0 0 115.2 18.9 7.2
adaptec4 0 594576105.9 16.3 1.7 0 0 0 106.5 17.0 1.8
adaptec5 0 143542129.8 26.7 15.7 0 0 0 130.1 26.9 15.2
bigblue1 0 121392 47.8 10.3 7.0 0 0 0 48.3 10.7 8.7
bigblue2 0 19428 69.3 20.9 6.0 0 0 0 69.6 20.9 7.8
bigblue3 0 103810105.7 27.4 3.7 0 0 0 105.9 27.6 3.8
bigblue4 162 152068178.7 56.8 75.8 188 0 0 178.9 57.0 121.0
newblue1 0 12508 35.6 11.3 3.9 2 0 0 35.6 11.3 4.8
newblue2 0 98962 59.4 12.2 0.9 0 0 0 59.7 13.4 0.8
newblue4 138 100680108.3 24.9 65.4 140 0 0 108.1 24.9 40.1
newblue5 0 21288 190.7 43.5 12.8 0 0 0 190.7 43.5 12.6
newblue6 0 58506 139.8 37.5 10.4 0 0 0 139.8 37.6 11.5
newblue7 62 257626279.8 92.5 57.8 78 0 0 281.7 93.3 119.9
ratio - - 1.000 1.0001.000 - - - 1.005 1.022 1.185
aThe benchmark “newblue3” which exists in ISPD 2008 benchmarks is
excluded in ICCAD 2009 benchmarks.
bVia is set to be 1 unit of wirelength in ICCAD 2009 benchmarks.
cRun time is given in minutes.
space due to layer directives. Meanwhile, the raises of TOF on
bigblue4, newblue4, and newblue7 could be due to the same reason.
Further, the zero LDOF and LD violation show that LDOF is a good
guidance for considering layer directives during 2D global routing
and also show the effectiveness of our layer assignment algorithm.
As can be seen from the table, the increases of TWL were mainly
dominated by the increases of via count, which shows the fact that
LD nets are asked to use higher layers and hence require more vias.
Finally, since GLADE has to improve the solution quality for the
conventional metrics and honor the layer directives at the same time,
its run time was raised by 18.5% on average. However, the run time
is much faster than performing full 3D global routing.
VII. CONCLUSION
In this paper, we have presented GLADE, a global router for
considering layer directives, that is based on extensions of NTHU-
Route 2.0, one of the state-of-the-art global routers. The experimental
results show that GLADE successfully eliminated the violations due
to layer directives for all ICCAD 2009 benchmarks. Meanwhile, it
can still rival with NTHU-Route 2.0 in total overflow, wirelength,
and run time.
A future work for considering layer directives is to devise another
2D and 3D routing methods for general layer range rules which are
different from the one in ICCAD 2009 benchmarks. In ICCAD 2009
benchmarks, all the end layers of layer ranges end at the highest layer
of a design. However, the end layer of a general layer range rule
may not be the highest layer in real industry designs. In other words,
two layer ranges may overlap and cause this problem to become
more challenging. Therefore, another routing algorithm is needed for
considering the general problem in practice.
VIII. ACKNOWLEDGMENTS
This work was supported in part by National Science Council of
Taiwan under Grants NSC-98-2220-E-007-011, NSC-98-2220-E-007-
032, and NSC-99-2221-E-007-113-MY3.
REFERENCES
[1] ISPD 2007 Global Routing Contest. [Online]. Available: http:
//www.sigda.org/ispd2007/rcontest/
[2] ISPD 2008 Global Routing Contest. [Online]. Available: http:
//www.sigda.org/ispd2008/contests/ispd08rc.html
[3] M. M. Ozdal and M. D. F. Wong, “Archer: a history-driven global routing
algorithm,” in Proceedings of International Conference on Computer-
Aided Design, San Jose, CA, 2007, pp. 488–495.
[4] M. Cho, K. Lu, K. Yuan, and D. Z. Pan, “Boxrouter 2.0: architecture
and implementation of a hybrid and robust global router,” in Proceedings
of International Conference on Computer-Aided Design, San Jose, CA,
2007, pp. 503–508.
[5] Y. Zhang, Y. Xu, and C. Chu, “Fastroute 3.0: A fast and high quality
global router based on virtual capacity,” in Proceedings of International
Conference on Computer-Aided Design, San Jose, CA, 2008, pp. 344–
349.
[6] Y. Xu, Y. Zhang, and C. Chu, “Fastroute 4.0: Global router with efficient
via minimization,” in Proceedings of Asia and South Pacific Design
Automation Conference, Yokohama, Japan, 2009, pp. 576–581.
[7] J. A. Roy and I. L. Markov, “High-performance routing at the nanometer
scale,” IEEE Transactions on Computer-Aided Design of Integrated
Circuits and Systems, vol. 27, no. 6, pp. 1066–1077, 2008.
[8] K.-R. Dai, W.-H. Liu, and Y.-L. Li, “Efficient simulated evolution
based rerouting and congestion-relaxed layer assignment on 3-d global
routing,” in Proceedings of Asia and South Pacific Design Automation
Conference, Yokohama, Japan, 2009, pp. 570–575.
[9] H.-Y. Chen, C.-H. Hsu, and Y.-W. Chang, “High-performance global
routing with fast overflow reduction,” in Proceedings of Asia and South
Pacific Design Automation Conference, Yokohama, Japan, 2009, pp.
582–587.
[10] J.-R. Gao, P.-C. Wu, and T.-C. Wang, “A new global router for modern
designs,” in Proceedings of Asia and South Pacific Design Automation
Conference, Seoul, Korea, 2008, pp. 232–237.
[11] Y.-J. Chang, Y.-T. Lee, and T.-C. Wang, “NTHU-Route 2.0: A fast
and stable global router,” in Proceedings of International Conference
on Computer-Aided Design, CA, USA, 2008, pp. 338–343.
[12] T.-H. Wu, A. Davoodi, and J. T. Linderoth, “GRIP: scalable 3d global
routing using integer programming,” in Proceedings of Design Automa-
tion Conference, San Francisco, CA, 2009, pp. 320–325.
[13] C.-H. Hsu, H.-Y. Chen, and Y.-W. Chang, “Multi-layer global routing
considering via and wire capacities,” in Proceedings of International
Conference on Computer-Aided Design, CA, USA, 2008, pp. 350–355.
[14] T.-H. Lee and T.-C. Wang, “Robust layer assignment for via optimization
in multi-layer global routing,” in Proceedings of International Sympo-
sium on Physical Design, CA, USA, 2009, pp. 159–166.
[15] W. Swartz, “Issues in global routing,” in Proceedings of International
Symposium on Physical Design, Portland, USA, 2008, pp. 142–147.
[16] C. J. Alpert, C. Chu, and P. G. Villarrubia, “The coming of age
of physical synthesis,” in Proceedings of International Conference on
Computer-Aided Design, San Jose, CA, 2007, pp. 246–249.
[17] Z. Li, C. J. Alpert, S. Hu, T. Muhmud, S. T. Quay, and P. G. Villarrubia,
“Fast interconnect synthesis with layer assignment,” in Proceedings of
International Symposium on Physical Design, Portland, OR, 2008, pp.
71–77.
[18] M. D. Moffitt, “Global routing revisited,” in Proceedings of International
Conference on Computer-Aided Design, CA, USA, 2009, pp. 805–808.
[19] C. Chu and Y.-C. Wong, “FLUTE: Fast lookup table based rectilinear
steiner minimal tree algorithm for VLSI design,” IEEE Transactions
on Computer-Aided Design of Integrated Circuits and Systems, vol. 27,
no. 1, pp. 70–83, 2008.
[20] M. Pan and C. Chu, “Fastroute: a step to integrate global routing into
placement,” in Proceedings of International Conference on Computer-
Aided Design, San Jose, CA, 2006, pp. 464–471.
[21] ——, “Fastroute 2.0: A high-quality and efficient global router,” in
Proceedings of Asia and South Pacific Design Automation Conference,
Yokohama, Japan, 2007, pp. 250–255.
[22] T.-H. Lee and T.-C. Wang, “Congestion-constrained layer assignment for
via minimization in global routing,” IEEE Transactions on Computer-
Aided Design of Integrated Circuits and Systems, vol. 27, no. 9, pp.
1643–1656, 2008.
323
99 年度專題研究計畫研究成果彙整表 
計畫主持人：王廷基 計畫編號：99-2220-E-007-008- 
計畫名稱：三維晶片系統之設計與測試技術研發--子計畫二：三維晶片系統之繞線技術研發(2/2) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 2 2 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 2 2 100%  
研究報告/技術報告 0 0 100%  
研討會論文 6 6 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
