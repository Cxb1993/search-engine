 2
for the set of possible sequences of operations.  The 
initial and the final state of a WP collapse into the idle 
state for cyclic models.  The number of tokens at the 
idle state indicates the maximum number (constrained by 
the system resource capacity) of products that can be 
concurrently manufactured.  Circular wait for resources 
can bring the system into a deadlock where some WP 
can never finish. 
Because only one resource is used in each job stage 
and the processes are modeled using state machines in 
S3PR, its modeling power is limited.  It cannot model 
iteration statements (loop) in each sequential process (SP) 
and the relationships of synchronization and 
communication among SP. At any state of a process, it 
cannot use multi-sets of resources. They compute all 
siphons (see Definition 5) that are not traps of the given 
model and find the maximum number of tokens at each 
idle state followed by a prevention control policy of 
adding arcs and nodes with tokens. Most recent deadlock 
control approaches [7, 8] extend this approach.  
Unfortunately, the total number of siphons grows 
quickly beyond practical limits and that, in worst case, it 
grows exponentially [9, 10] in the number of nodes. 
Thus, for large complicated systems, the prevention 
policy may no longer be appropriate.  In this case, it is 
better [11] to perform reachability analysis which 
explores all possible states, and hence can check various 
properties such as livelocks and race conditions other 
than liveness.  It is conceptually simple and relatively 
straightforward to automate and can be used in 
conjunction with model-checking procedures to check 
for application-specific as well as general properties. 
Also many control problems can be modeled by the 
reachability problem indicated by Ichikawa et al. [12]. 
To improve on the above Sequential Resource 
Allocation System (RAS) [6], Ezpeleta et al. [11] 
proposed a Non-Sequential Resource Allocation System 
(NS-RAS), they proposed a general Petri net model 
where even multiple copies of one type of resource is 
allowed to be used at each processing step.  The 
modeling power is much enhanced, but the analysis 
becomes complicated.  They, hence, proposed a 
deadlock avoidance approach with polynomial result by 
constructing reachability graph for the isolated execution 
of each production order, tiny compared with the size of 
the reachability graph of the whole system, to find 
strongly connected components (not possible with 
siphon analysis). 
 However, prevention is preferred to avoidance 
because the computational effort is carried out once and 
off-line. Hence it runs much faster in real-time cases 
compared with deadlock avoidance algorithms where 
much time is consumed by on-line analysis each time the 
system ought to change the state. Deadlock prevention 
control policy is essential when it is unacceptable to have 
deadlocks and real time response time is critical.  They 
indicated that “the whole time to know if a system state 
is safe can take about 2 CPU/s in the worst case” and 
“the proposed control method would be more or less 
permissive”.  In their model, each WP is still an 
ordinary net as shown in Fig. 2 of [11] (actually an 
SNC). 
    This motivates us to find more complicated classes 
of nets whose reachability problem can be solved in 
polynomial time. 
Further, we propose to apply the decomposition 
principle to reachability analysis to unbounded Petri nets 
slightly perturbed from SNC.  Karp-Miller’s Finite 
Reachability Trees (FRTs) [12] approach is a universal 
tool for analysis of Petri nets.  However, some certain 
useful information is lost by the use of ω symbol, the 
reachability, liveness and deadlock problems cannot be 
solved by the FRT method alone.  Therefore, a 
modified Reachability Trees (MRT) [13] approach has 
been developed to extend the capability of FRTs in 
solving these problems of Petri nets.  The MRT 
approach is creative and very useful to the analysis of 
unbounded Petri nets since the nodes contain more 
information regarding the structure of Petri nets to be 
analyzed. 
Howeve
r, it suffers 
from a bug in 
one theorem 
which gives 
the necessary 
and sufficient 
condition of 
deadlocks.  
Further, it has 
to build the 
reachability 
graph whose 
size can be 
large for 
moderate size 
of Petri nets.  
As said earlier, 
for SNC, there 
is no need to 
build the 
t3 
Fig. 1(a). An example of a net 
which can be reduced to a GPN. 
t2 
p1 p2 
p3 p4 
t1 
t4 
t5 
2 
Fig. 1(b). The reduced GPN 
of that in Fig. 1(a).
2 
y=-1
y=2 
y=1 
y=1 
y=1 
y=1 
p1
p2 p3 
p4 
p5
p6 
t1 
t2 t3 
t4 
t5 t6 p8
p9 
2
2 
Fig. 2(a). A second example of a net 
which can be reduced to a GPN. tokens.
Fig. 2(b). The 
reduced GPN of that 
in Fig. 2(a). 
