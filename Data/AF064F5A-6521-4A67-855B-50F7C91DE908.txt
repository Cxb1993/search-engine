1. 前言
在資訊科技進入多媒體與後PC時代以來，資料的質量與數量發生了許多重大變化；在質量
方面，資料的複雜度不斷提高，描述一筆完整資料需要愈來愈多的項目(tuples)，因此，處理
資料的難度也相對提高。另外，在資料數量方面，由於資訊應用領域的範圍日益廣泛，資
料的產生速度愈來愈迅速，動輒百萬筆資料已經不足為奇，資料庫必須發展更新穎的技術
面對新的挑戰，以下為現今幾個重要的資料庫研究議題：
一、資料的多樣性(Data diversity)：各式各樣的影音與多媒體資料 [3, 4, 5, 9, 19, 20, 27]使得
使用者對資料類型(data type)的需求日新月異，使用者可能要求查詢各式各樣的資料，
未來新的資料類型將不斷地產生。
二、資料分配的管理(Data distribution management):資料的產生可能基於某種分配，在管理個
別資料時，若同時掌握資料的分配，將有助於提升整體資料庫的系統效能。
三、不同類型資料的整合(Hybrid indexing)：使用者查詢的資料，可能同時包含不同的類別，
如何將不同類別的資料以一套資料庫管理系統整合起來，將考驗資料庫的設計技術。
四、高維度資料的產生(High dimensionality)：在許多應用領域，需要愈來愈多的項目才足以
完整地描述一筆資料。
五、動態資料的產生(Dynamic data)：動態資料會隨著時間而改變它的資料內容，因此時間
已經成為建構資料庫的重要因素之一，動態資料也可能隨著其他因素(空間位置、臨
近資料、查詢條件) 改變它的資料內容。
六、資料量的規模(Scale)：資料量不僅與時俱增，也與需求量俱增，更與應用領域俱增。
自2000年以來，行動管理資料庫系統(mobility management database system) [1, 2, 8]受到資料
庫研究領域的相當重視；許多現代科技的應用，例如：慣性導航系統(Inertial navigation system)
不需藉由外在參考資料(external references)以持續對車輛工具的位置、方位、速率進行追蹤與
監控(vehicle and traffic monitoring)。智慧運輸系統( Intelligent Transportation Systems; ITS)經由管理交通
工具數量、交通負載、交通路線(route)、甚至預測公路未來的擁塞路段，以達到改善交通安
全性、減低交通工具損耗、減少交通時間與燃料消耗。行動性管理(mobility management)對於
每一個機動物件(mobile object；例如行動通訊用戶subscriber、GPS定位系統用戶)需要規律地於
一段時間間隔進行收集與更新他們的所在位置(periodic location update procedure)，可靠的通訊網
路存取有賴於良好的行動性管理系統建置。隨著時間不斷地進行，行動性物件的空間位置
不斷地改變，若運用傳統空間資料庫系統管理行動性物件，系統必須頻繁地進行資料更新，
消耗大量的資料庫維護成本才能夠管理物件的即時空間資訊，否則記錄很快就會面臨過期
的問題；另外，物件的歷史移動軌跡以及未來可能的行動路線，也考驗著傳統空間資料庫
的資料管理、整合與查詢功能。整體來說，使用傳統空間資料庫處理行動性物件，會面臨
兩大問題：頻繁的資料更新與記錄的時效性。
2. 研究目的
評估一個索引結構的好壞與否，可以從空間效能與時間效率兩項重要因素著手；空間效能
(space efficiency)用在判斷一個索引結構是否能夠使用較經濟的記憶空間而且將所屬記憶空間
的使用率達到最大，時間效率(time efficiency)包括建構一個索引結構時使用的時間成本、維護
索引結構的時間成本、以至於索引結構的查詢時間成本，傳統樹狀索引結構仍存在許多的
改良與改善空間。為迎接現代資料的高複雜度與龐大數量，本研究計畫的目的是在空間與
時間兩項因素上尋求更好的解決方案，審視傳統缺點，從分類方法、資料表示法、…逐一
分析與討論，提出幾個改善的方法，更加提升空間效能與時間效率。
轉換之後(諸如：空間維度轉換、dual transformation、Hough transformation)，再進行資料處理；在
這類方法中，查詢方式也必須進行適當的轉換，如此一來，物件的位置才能夠被正確的查
到，這類的成功的例子包括STRIPES [17](其設計理念基於 quadtree)，Bx-tree [31] (其設計理
念基於B+-tree)。STRIPES使用2n維空間來處理n維空間中的物件，Bx-tree使用一維空間來處
理 n維空間中的物件。
為紀錄動態資料(dynamic data)的變動屬性值(variable attribute values)，或紀錄動態資料的變
動屬性值範圍(moving extent)，資料庫研究方向已經邁向下一個哩程碑-行動管理資料庫
(mobility management database)，行動管理資料庫需要針對動態資料的特質開發新的索引技術；
在傳統資料庫系統中，描述資料的各項屬性(attributes)所使用的數值(numeric value)或類別值
(categorical valve)通常不會隨著時間而改變，我們稱此類傳統資料庫為常態資料庫(normal
database)，常態資料庫使用一套索引技術組織靜態資料(static data)，由於靜態資料仍然可能進
行更新、修正、新增、刪除等許多操作，所以常態資料庫必須有一套資料索引機制動態支
援這些常見的操作。但若運用傳統常態資料庫於處理動態資料的變動屬性值或變動屬性值
範圍，過度頻繁的資料更新(frequent updating)將使得資料庫的各種效能遭遇惡化的問題；另
外，倘若索引機制無法即時組織最新資料狀態，將導致資料過期失效(data outdating)的狀況，
使得查詢缺乏正確性與即時性，這兩種問題都急待被克服。另外，資料庫是否能夠同時處
理與保存動態資料的過去資訊、現在資訊、以及預測有限的未來資訊，也是一項重要研究
課題。
對於同時處理動態資料的現在資訊以及預測有限的未來資訊，TPR-tree首先提出解決
方法，將索引物件的移動軌跡與包含此物件的 MBR(minimum boundary rectangle)邊界使用線性
時間函數(linear function of time)來重新表達，對物件而言，只有當函數中的參數(參考點與速度
向量)改變時，索引資料(entries) 才需要進行資料庫更新，圖一是一維空間中的例子，物件o3
與o2分別在時間 time=2與 time=4必須進行索引資料更新。
圖一、一維空間中行動物件的例子。
行動物件在一段時間內可能經過的區域，TPR-tree使用MBR將其包圍起來，TPR-tree
動態地調整MBR的邊界(bounding)以確保把相關物件包含在MBR中，這種MBR稱為conservative
bounding rectangles，conservative bounding rectangles在某些時候擁有最適性，但大部分時間不具備
最適性；圖二是二維空間中的例子，物件編號o1至o6分別從不同的參考點以不同的速度向
(a) (b)
圖四、二維空間中，物件的涵蓋區域。
TPR*-tree以行動物件的涵蓋區域，重新調整TPR-tree的索引方法，其主要的技術突破有兩
方面：第一、TPR*-tree的 choose path algorithm 在考量節點存取與查詢效率下，為一筆新
的資料在索引結構中選擇一條最佳的資料插入路徑(best insertion path)，因此TPR*-tree可以建
構一個資料更新效能(update efficiency)較佳的索引結構。第二、TPR*-tree的 reinsertion 策略是
基於比較涵蓋區域面積 (sweeping region area)的差異量，決定移除那些 entries 再進行
reinsertion，因此TPR*-tree可以更精確而有效地重組物件。綜合來說，為避免因為囊括過多
的無用資訊而影響索引結構的執行效率，在TPR*-tree的資料分類方法中，動態物件實際涉
及的空間範圍的相關資訊被仔細地計算與比較，用以制定更好的insertion algorithm 與data
reinsertion策略。事實上，TPR*-tree的整體索引結構仍基於使用MBR (time-parameterized rectangles)
的索引資料單位；也就是說，TPR*-tree先運用MBR將空間位置類似的動態物件群聚在一起，
除了物件實際影響的區域外，MBR亦必須包括許多未被動態物件影響的區域，當資料查詢
在TPR*-tree索引結構進行時，搜尋的路徑仍舊無法擺脫 multi-searching paths 的問題，因
此資料查詢的效能仍舊存在許多改進的空間。
針對上述TPR-tree與TPR*-tree內許多有待改善的問題，我們整理如下:
1. TPR-tree與TPR*-tree 僅適合於處理現在資訊(current)以及預測有限的未來資訊(predicative
future)，對於過去歷史資訊(past)缺乏整合能力。
2. 由於 TPR-tree與 TPR*-tree 是基於R-tree或R*-tree索引結構所發展出來，繼承了源自
R-tree 或R*-tree 的缺點，在本質上不易改善，這些缺點包含資料表示模式 (data
representation model)、資料分類方法(classification criteria)、上層資料組織方法(upper entries
arrangement)、節點分裂策略(node splitting policy)。
3. 受制於R-tree與R*-tree的設計原則，TPR-tree 與 TPR*-tree索引結構記憶空間使用率
(space utilization)與索引樹狀結構的搜尋效能(search performance in tree hierarchy)存在不易突
破的瓶頸。
4. 在實際應用價值方面，面對現代各種不同應用層面，資料呈現指數型成長並以驚人的
速度不斷累積，行動管理資料庫的新增資料整合功能必須瞬間完成，而行動資料庫的
查詢系統必須具備快速回覆(quick response)的能力。
從分析動態物件的變動方式(位置移動、空間範圍擴散或兩者兼具)，我們提出一套全
新方法，直接對動態物件實際產生的軌跡(trajectory)進行索引處理，雖然這套索引方法也是
基於傳統 B+-tree的設計原則，但是90%的原始設計被修改與調整以期解決上述的四個問
題。以一維空間中行動物件(圖六)為例說明我們的設計並以圖十進一步表示之，沿著圖十中
將利用一個例子來示範傳統 B+-tree 與 CB+-tree 的差異。
假設我們有一組資料序列{8, 5, 1, 7, 3, 12, 9, 10}被用來建置一個傳統 B+-tree 與一個
CB+-tree，圖六(a)展示 8 筆資料插入於一個傳統 B+-tree 的過程與最終索引目錄，圖六(b) 展
示一個 CB+-tree 的後半過程與最終索引目錄，兩個索引結構均採用節點容量 2 與分支度 3
的假設。首先，根節點(root)置放了資料 8 和 5，然後資料 1 使得根節點變成超載，因而進行
分裂，資料繼續插入索引結構將造成以下四種可能方案(A 至 D):
A. [資料插入一個未滿載的目標節點] 在圖六(a)中的step 2，資料7被置入根節點的右子樹並
使得目標節點滿載，索引結構不需進行調整。
B. [資料插入一個滿載的目標節點，而且兄弟節點也是滿載，然而父節點(parent)的分支度小
於3] 在圖六(a)中的step 3，資料3 被置入根節點的左子樹並使得目標節點超載；根據傳
統B+-tree的索引設計，目標節點必須進行分裂，如step 4 所示，根節點的分支度變成3。
C. [資料插入一個滿載的目標節點，而且至少存在一個未滿載的兄弟節點]資料12被置入根
節點的最右子樹如圖六(a)中的step4與圖六(b)中的step4′所示，由於目標節點已經呈現滿
載，基於傳統B+-tree的索引設計，目標節點必須進行分裂，這次分裂將傳導至根節點，
系統將產生一個新的根節點並使得整個索引結構增高一層，如圖六(a)中的step5 所示。
不過，我們可以採取一種替代節點分裂的方法：若發現兄弟節點存在未使用的容量，我
們取用它們來疏解目標節點的超載資料，如圖六(b)中的step4′所示，資料7 被移送至兄
弟節點中，而騰空的位子將用來置放資料12。另外，父節點中的資料5 將被資料7 取代。
D. [資料插入一個滿載的目標節點，而且所有兄弟節點與父節點均呈現滿載] 資料9造成目
標節點分裂，而且這分裂傳導至根節點如圖六(b)中的step5′所示，系統將產生一個新的
根節點並使得整個索引結構增高一層，如圖六(b)中的step6′所示。
CB+-tree 解決資料序列順序帶來的問題，並且使終端節點得以容納較多資料量；圖六
(a)的傳統 B+-tree 需要進行 5 次節點分裂與消耗 8 個節點，然而圖六(b)的 CB+-tree 只進行 4
次節點分裂與消耗 7 個節點。另外，資料查詢進行於 CB+-tree 上較傳統 B+-tree 獲得更好的
效率。
 M , M : The orders of CB
+-tree and TPR-tree;
每個 TPR-tree 樹葉節點中的資料(entry)包含位置參數(position parameters)與指向移動物件的指
標(pointer)；另外，每個樹葉節點亦使用指標連結至自己的下一個樹葉節點；而每個非樹葉
節點中的資料(entry)包含指向下層子樹(sub-tree)的指標與一個方形區域(rectangle)，此方形區域
包圍相關的移動物件或下層子樹的相關方形區域。TPR-tree 的 order M 由下列公式決定:






pt
pB
MBpptM
4
)4(  (7)
在另一方面，CB+-tree 的每個節點中的資料只需紀錄一個索引值(indexing value)以及指標， 雖
然 CB+-tree 的每個樹葉節點需要兩個指標連結至自己的上一個與下一個樹葉節點，CB+-tree
的 order 仍然高於 TPR-tree 的 order，CB+-tree 的 order M 由下列公式決定:






pt
pB
MBpptM
2
2)(  (8)
在一般的實作情況下，一個記憶區塊的合理尺寸為 4 Kbytes，一個整數通常佔用 16 而
一個指標通常佔用 32 bytes，如此一來， M 與 M 經由估算後，大約為 84 與 43，這意謂
CB+-tree 與 TPR -tree 的每一個節點可以分別置放 84 與 43 筆記錄，所以 CB+-tree 的節點
容納為 TPR -tree 的兩倍。
5.1 儲存空間需求量評估
在時間 CB+-tree 與空間 CB+-tree 索引結構中[11]，一個 bucket 的資料保存量預估為 ||2 tDN
與 ||2 yDN 其中 N 為需要處理的資料總量。為方便進行評估，我們假設動態物件的產生
過程遵守 Poisson 過程，因此動態物件的 inter-arrival time 呈現具備平均數 1 的指數分配
(exponentially distribution)。設 X 為一個 Poisson 隨機變數用於表示單位時間內物件的到達數，
|Dt|與|Dy|可以估計如下：
   NeeNXN 2)]1(1[2)0Prob(2 (9 )
所以，平均一個 bucket 可以保存的資料量為  eNeN 22 。
CB+-tree 可以建構樹葉節點接近滿載的索引結構，因而我們可以輕易地估算樹葉節點
總數為 




 


M
Ne2
，但 CB+-tree 沒有在內部結構進行緊密地組織，所以 CB+-tree 的內部結構
擁有與傳統 B+-tree 類似的空間使用率，換言之  %1002ln 69.3% full [5]。將樹葉節點與非
樹葉節點合併統計，一個時間 CB+-tree 與一個空間 CB+-tree 產生的節點總數為：
)
12ln
2ln
(
2
)
2ln
1
1(
2











 






M
M
M
Ne
MM
Ne
 (10)
另一方面，TPR-tree 產生的節點總數為：
)
12ln
2ln
(
2ln
)
2ln
1
1(
2ln
2














 




M
M
M
N
MM
Ne
 (11)
  )1()22
2ln2
log()1Type( 2ln O
MM
M
Ne
O M 









 (12)
One round of interval query (type 2) on CB+-tree launches two single search paths. These
two paths traverse the index tree and retrieve two target data at leaf level. Hence, (2H-2) non-leaf
nodes and two target leaf nodes on the paths are involved. The time complexity of an interval
query on SCB+-tree or TPR-tree is approximately estimated as
  )1()12ln
2
log(
)1()
2
2
2
2ln
)22(()2Type(
2ln OMM
Ne
O
MM
HO
M 












( 1 3 )
As regards a window query (type 3), the total time complexity is approximated as
)1()]value-timeon thequeryType2or1Type(
)value-on thequery2Type(
)value-on thequery2Type([)3Type(
OO
yO
xOO



( 1 4 )
, where H1 and H2 are the depths of two SCB+-trees (one is for x-coordinate and another for
y-coordinate) and H3 is the depth of TCB+-tree.
As far as TPR-tree is concerned, one round of rectangle comparison needs eight times of
data comparison. This is because, for the x-axis, the lower and upper x-coordinates (q1 and q2 as
shown in Fig. 12) of the issued query MBR execute four data comparisons with the lower and
upper x-coordinates (x1 and x2 as shown in 圖八) of the candidate MBR. The data comparisons
are executed between four pairs: (q1, x1), (q1, x2), (q2, x1) and (q2, x2). The same augments are
applied on the y-axis. So, one round of rectangle comparison spends eight times of one round of
data comparison. In a Cartesian coordinates system, rectangle comparisons identify the geometric
relationships (disjoin, join, part overlap, contain and belong) between MBRs for consequent data
searching. Hence, an average computing time of )1(8
2
2ln
O
M  in a TPR-tree’s non-leaf or
leaf node is required to decide the next appropriate node for further searching. Unfortunately, the
worst matter is the multiple paths. The average time complexity is approximated as
)1(8
2
2ln
O
M
cH   , where c is the multiple factor satisfying 2ln1 Mc and H is the
depth of TPR-tree. Index scale, time complexity of data comparison, and search path are three
major causes that make queries on a CB+-tree more efficient than on a TPR-tree.
圖八、 The data comparisons between MBRs along the x-axis.
參考文獻
[1] P.K. Agarwal, L. Arge, and J.Erickson, Indexing Moving Points, Journal of Computer and System Sciences,
66, pp. 207–243, 2003.
[22] S. Saltenis, and C.S. Jensen. Indexing of moving objects for location-based services, In: Proc. IEEE ICDE,
pp. 463-472, 2002.
[23] H. Samet. The Quadtree and related hierarchical data structures. ACM Comp. Surv., 16(2), pp. 187-260,
1984.
[24] A.P. Sistla, O. Wolfson, S. Chamberlain, and S. Dao, Modeling and Querying Moving Objects, In: Proc. 13th
IEEE International Conference on Data Engineering, pp. 422-432, 1997.
[25] Y. Tao, D. Papadias, J. Sun, The TPR*-Tree: An Optimized Spatio-Temporal Access Method for Predictive
Queries, In: Proceedings of the 29th VLDB Conference, Berlin, Germany, 2003.
[26] Y. Tao, F. Christos, and P. Dimitris, The power-method: A comprehensive estimation technique for
multi-dimensional queries, Twelfth ACM international conference on information & knowledge management,
New Orleans LA, 3-8 November 2003.
[27] Z. Wang, and A.C. Bovik, A universal image quality index, IEEE Signal ProcessingLetters 9(33), pp. 81-84,
March 2002.
[28] O. Wolfson, B. Xu, S. Chamberlain, and L. Jiang., Moving Objects Databases: Issues and Solutions. In Proc.
of the SSDBM Conf., pp. 111–122, 1998.
[29] O. Wolfson, S. Chamberlain, S. Dao, L. Jiang, and G. Mendez, Cost and Imprecision in Modeling the
Position of Moving Objects, In: Proc. 14th I EEE International Conference on Data Engineering, pp.
588-596, Orlando, FL, February 1998.
[30] B. Yu, T. Bailey, R. Orlandic, and J. Somavaram, KDBKD-Tree: a compact KDB-tree structure for indexing
multidimensional data, In: Proceeding of International Conference on Information Technology, ITCC, Las
Vegas, pp. 676-680, 2003.
[31] C.S. Jensen, D. Lin, and B.C. Ooi. Query and update efficient B+-tree based indexing of moving objects, In:
Proc. VLDB, pp. 768–779, 2004.
計畫成果自評
研究執行成果與計畫預定目標完全相符，並達成預期的效果，本研究已在國際學術研討會
與學術期刊發表。未來研究方向將著重在高維度移動物件(high dimensional moving objects)的處
理，持續目前研究並提出一種架構將多個索引結構進行整合或簡化的處理；另一可行的研
究方法是選取較具代表性的空間維度用於有效的索引處理，空間維度的選取可以根據使用
者的主觀認定，也可以基於目前物件資料進行空間維度探勘(dimension mining)。
}.,
0||,ofvalue-temporaltheis|{
STDBS
SSttD tkk
t

 (1)
}.,
ofvalue-spatialtheis|{
STDBS
SyyD kk
y

 (2)
Nine trajectory segments share 11 endpoints in common in
Fig. 1. The timestamp t4 is shared by trajectory segments E, G,
and H on the time-axis. Notably, a vertical segment is
improper since it means that an object’s location is indefinite
at a fixed time. However, a horizontal segment means that an
object stays still at a specific position during a time period.
Our indexing scheme includes such stillness in the design.
Every horizontal segment contributes one single record to Dy
and two records to Dt.
A. Temporal CB+-tree
The internal structure of a TCB+-tree is a directory recording
the critical timestamps when the objects issue, change, or
terminate their movements. Object identifiers are classified
by the critical timestamps and preserved at the bottom
structure referred by the leaf entries of a TCB+-tree. For a
STDB as shown in Fig. 1, after collecting all critical
timestamps to Dt, the data sequence
6543210 ttttttt  is applied for the construction
of TCB+-tree. Let ti denote an arbitrary timestamp on the
time-axis, which may be an element in Dt or not. Terms it and

it are defined as the timestamps before and after ti in D
t.
Namely, we can not find tm in D
t such that imi ttt  or
 imi ttt . The same argument is applied on the value-axis.
For timestamp ti, the bucket )( it includes the object
identifiers that their movements keep moving in [ti, ti
+].
Namely, }where,0||and0],[|{)( STDBSSSttSt ttiii    .
A modification improves the bottom structure of the resulting
TCB+-tree by eliminating the same identifier information
between two consecutive buckets. The buckets referred by
every leading key in leaves list the detailed information of
related object identifiers. However, the minus (or plus)
symbol in the consequent buckets excludes (or includes) the
object from the former bucket. Fig. 2 illustrates a complete
TCB+-tree.
B. Spatial CB+-tree
The construction of SCB+-tree is based on organizing the
critical locations of movements on the value-axis. The critical
locations include the departure and arrival positions, the
positions on which moving objects change their speeds and
directions. The inertial and linear movement between two
critical locations are not recorded but they are implied by the
preservation at the bottom structure of a SCB+-tree.
Fig. 2 TCB+-tree.
Dissimilar to the bucket contents of a TCB+-tree, one
SCB+-tree uses S, S’, and S to distinguish the onward,
backward, and still motions for a trajectory S with departure
and arrival positions xx SS 21 and . Following three criteria
classify the object identifiers into the correct buckets at the
bottom structure of a SCB+-tree.
}where,
and0||and0],[|{)( 21
STDBS
SSSSxxSx xxtxiii

   (3)
}where,
and0||and0],[|'{)( 21
STDBS
SSSSxxSx xxtxiii

   (4)
}where,
0||and0||and0],[|{)(
STDBS
SSSxxSx xtxiii

   (5)
At time t0 in Fig. 1, segment C departs at position 40 and
moves onward. This movement makes 40 inserted to the
SCB+-tree and creates bucket {C} referred by 40. At time t1,
segment D appears but stays still. This makes 30 inserted to
the index and creates the bucket { D } referred by 30.
Positions 50 and 60 are inserted at time t2 and position 15 is
inserted at time t3. Particularly, at time t4, a backward
movement is issued at position 90. Position 90 becomes a
critical location and then it is inserted to the index. However,
as suggested by the second criterion(5), because [90－,90]
covers G’s backward movement on the value-axis, the bucket
referred by 90－ (i.e. 70) will include G′in its content so
that }'G{)70(  and  )90( . Further, applying the tuning
mechanism similar to the TCB+-tree, the complete SCB+-tree
is shown in Fig. 3.
C. Querying
The queries supported by the index retrieve all trajectory
segments with overlaps with the specified regions. We
distinguish five types of query based on the region they
specify. Let t, ta<tb be three time values that are not less than
the initial time t0 and I, I1, and I2 are three spatial intervals for
querying the value-axis.
Type 1: Point query: Q=(t, y) specifies a specific position y at
the timestamp t.
Type 2: Interval query (slice query): Q=(t, I) and Q=(ta, tb, y)
issue a time-slice and a location-slice query, respectively.
Q=(t, I) specifies a spatial interval I at the timestamp t. Q=(ta,
tb, y) specifies a query located at position y during the time
interval between ta and tb. For example, in Fig. 4, Q0 and Q1
are the time-slice and location-slice query, respectively.
Type 3: Window query: Q=(ta, tb, I) specifies a spatial interval
I that covers the time interval [ta, tb]. Q2 in Fig. 4 is a window
query.
Type 4: Predictive query: Q=(now, I) specifies a spatial
interval I at the current time. Namely, this query is designed to
retrieve all trajectory segments which have inertia movements
passing through I from the current time to some limited future
(i.e. now+). Q4 in Fig. 4 is a predictive query about the spatial
Fig. 3 SCB+-tree.
2) insert/delete records to/from the target node, and
3) shift/redistribute the records in the target and sibling
node, and
4) insert/delete leaf and non-leaf nodes to/from the index
tree, and
5) update the data pointers.
Fig. 6 shows an example in illustrating the complexity of
indexing restructuring for a batch of insertions. The initial
TCB+-tree is given at step (a) in Fig. 6. The generation of new
temporal data is totally ordered. Namely, the value of later
temporal data is always larger than the last element in Dt.
Therefore, insertions to a TCB+-tree will append new entries
to its rightmost leaf. For example, a batch of data with order
121110987 tttttt  is applied, t7 and t8 make the
last leaf node overflowed. Datum t5 is shifted to the left sibling
so that the rightmost leaf can accommodate t7 and t8. After that,
the upper entry in the parent (root) is modified (see step (b) in
Fig. 6). Then t9 makes the last leaf node overflowed again, a
split of the overflowed leaf node is then carried out. There
occurs a new entry to the parent node (see step (c) in Fig. 6).
When t10 and t11 are inserted to the TCB
+-tree, the overloading
makes t8 being removed to the left sibling and this
redistribution permits the accommodation of t10 and t11
without appealing to node splitting (see step (d) in Fig. 6).
Finally, a split of the last leaf node and subsequently a further
split of the non-leaf parent node are carried out by the
insertion of t12. Since the parent node is also the root for the
initial tree, the root splitting creates the new root and grows
the tree with one more level as shown at step (e) in Fig. 6. The
handle that a full target appeals to its underflow sibling is the
important characteristic of CB+-tree.
Next we present the complexity of index restructuring for a
batch of deletions. We also present another example as shown
in Fig. 7. The initial tree is given at step (a) in Fig. 7. The
expiry data are always those temporal data generated earliest.
The deletions of expiry data must happen to the leftmost side
of the leftmost leaf node in the TCB+-tree. Suppose the
temporal data less and equal t5 are going to become overdue in
this illustration. We expect to recovery the similar data
arrangement and the same tree hierarchy as shown previously
before data 127 to tt are inserted. At first, data ( 210 ,, ttt ) in
the first leaf are removed. As shown at step (b) in Fig. 7, the
first leaf node is returned to the system and the pointer
corresponding this leaf node becomes void. Note that the
entry at the parent is replaced by the maximum of all entries in
the next leaf node. Due to the underflow, a merging with
sibling nodes is carried out at the second level. Because the
non-leaf node (t5) has the same entry with its parent node (root
node (t5)), these two non-leaf nodes are collapsed together.
Consequently, a new non-leaf node (t5, t8, t10) is created (see
step (c) in Fig. 7). Finally, data 53 ~ tt also become overdue
and must be removed from the index. Again, the leftmost leaf
node is removed from the index and this operation causes the
upper related entry and the corresponding pointer are
removed from the parent node. The resulting index returns to
the same manner as the initial tree in Fig. 6. As regards the
SCB+-tree, insertion and deletion may happen to anywhere at
leaf level. The processes of data shifting and data merging can
Fig. 6 The index maintenance for insertion operations.
follow either right pointer or left pointer to find the suitable
sibling for index restructuring. We omit to illustrate the
process of data inserting and deleting in a SCB+-tree.
IV. ANALYTICAL EVALUATION
In this section, the spatiotemporal data moving on a
two-dimensional space is utilized for analytical studies. The
node capacity (order), bucket size, data size, and index depth
are first investigated for facilitating the analysis of internal
and external structures of the index. The storage requirement
Fig. 7 The index maintenance for deletion operations.
node is near 100% full, where we suppose half of the entries in
the involved non-leaf and leaf nodes are taken for data
comparison. The average time complexity for completing one
round of point query on the SCB+-trees (or TPR-tree) is
approximately estimated as
  
)1()2/2/)2ln(
/)2(log()1Type( 2ln
OMM
MNeO M

 



 (12)
One round of interval query in a CB+-tree launches two
single search paths. These two paths traverse the index tree
and arrive at leaf level for retrieving two target data covering
the query interval. Hence, (2H-2) non-leaf nodes and two
target leaf nodes on the paths are involved. The time
complexity of an interval query on the SCB+-trees (or
TPR-tree) is approximately estimated as
   )1()12ln/)2(log(
)1(]2/22/)2ln()22[()2Type(
2ln OMMNe
OMMHO
M 






(13)
As regards window query, the total time complexity is
approximated as
)1()]axis-timeon thequeryType2or1Type(
)axis-on thequery2Type(
)axis-on thequery2Type([)3Type(
OO
yO
xOO



(14)
As far as TPR-tree is concerned, one round of rectangle
comparison needs eight times of data comparison. This is
because, for the x-value, the lower and upper x-coordinates of
the issued query MBR execute data comparisons with the
lower and upper x-coordinates of the candidate MBR. It
consumes the time complexity of )1(4 O . The same augments
are applied on the y-value. So, one round of rectangle
comparison spends the higher overhead that is eight times of
one round of data comparison. Namely, in a TPR-tree’s
non-leaf or leaf node, the average computing time of
2/)2ln()1(8 MO  is required to decide the next
appropriate node for further searching. Unfortunately, the
worst matter is the multiple paths. The average time
complexity is approximated as 2/)2ln()1(8 MOcH  ,
where c is the multiple factor satisfying 2ln1 Mc and
H is the depth of TPR-tree. Index depth, data comparison
complexity, and search path are three major causes that make
all types of query on a CB+-tree more efficient than on a
TPR-tree.
V. CONCLUSION
The compactness and stable query performance of indexing
structures are two major contributions in this study. The using
of compressed indexing structures makes data queries
processed in a condensed memory bound so that the retrieval
costs are limited within a very satisfactory range. Space and
time efficiencies are simultaneously achieved by our indexing
scheme.
The future direction of research is to preserve the spatial
and temporal relations among mobile objects. Techniques for
answering complex queries, such as reporting the areas with
high density of mobile objects, predicting the time moment
when a specific amount of mobile object will emerge or
vanish, are of high practical interest. Furthermore, it would be
also worth considering the problem in reporting the average
velocity of a stream of mobile objects with similar
movements.
REFERENCES
[1] T. Abraham and J.F. Roddick, “Survey of Spatio-Temporal
Databases,” GeoInformatica, 1999, 3(1), pp. 61-99.
[2] N. Beckmann, H. Kriegel , R. Schneider and B. Seeger,“The R*-tree:
an efficient and robust access method for points and rectangles,”
Proceeding of ACM SIGMOD, 1990.
[3] H. Berliner, “The B*-tree search algorithm: a best-first proof
procedure,”Tech. Rep. CUM-CA-78-112, Computer Science Dept.,
Carnegie-Mellon Univ., Pittsburgh, 1978.
[4] R. Bishop,“Intelligent Vehicle Technology and Trends,”Baker & Tayl,
2005.
[5] M. Bramberger, J. Brunner, B. Rinner and H. Schwabach,“Real-time
video analysis on an embedded smart camera for trafic surveilance,”
10th IEEE Real-Time and Embedded Technology and Applications
Symposium (RTAS'04), 2004.
[6] C.S. Jensen, D. Lin and B.C. Ooi,“Query and Update Eficient B+-tree
Based Indexing of Moving Objects,”Proceedings of the 30th VLDB
Conference 2004, Toronto, Canada.
[7] G. Kollios, D. Papadopoulos, D. Gunopulos and V.J. Tsotras,
“Indexing mobile objects using dual transformations,” The VLDB
Journal, 2005, 14(2), pp. 238-256.
[8] Y. Kuroda and Y. Amitani, “TRITON: New ocean and atmosphere 
observing buoy network for monitoring ENSO,”Umi no Kenkyu, 2001,
pp. 157-172.
[9] H.Y. Lin,“Efficient and Compact Indexing Structure for Processing of
Spatial Queries in Line-based Databases,”Data & Knowledge
Engineering, 2008, 64(1), pp. 365-380.
[10] H.Y. Lin, R.C. Chen and S.Y. Chen, “Enhancement of Data 
Aggregation Using A Novel Point Access Method,” WSEAS
Transactions on Computers, issue 12, vol. 7, December 2008, pp
2001-2010.
[11] D. Papadopoulos, G. Kollios, D. Gunopulos and V. J. Tsotras,
“Indexing mobile objects on the plane,”Proceedings of 13th
International Workshop on Database and Expert Systems
Applications, 2002.
[12] T. Pering, V. Raghunathan and R. Want,“Exploiting radio hierarchies 
for power-eficient wireless device discovery and connection setup,”
18th International Conference on VLSI Design, 2005.
[13] S. Saltenis, C. S. Jensen, S. T. Leutenegger and M. A. Lopez,“Indexing 
the positions of continuously moving objects,”Proceedings of the
ACM International Conference on Management of Data, 2000, Dallas,
USA: ACM Press.
[14] Y. Tao, D. Papadias and J. Sun, “The TPR*-tree:an optimized
spatio-temporal access method for predictive queries,”Proceedings of
the 29th International Conference on Very Large Data Bases 2003:
Berlin, Germany, pp. 790-801.
[15] A. Yao, “Random 2-3 trees,”Acta Informatica, 1978, 2(9), pp.
159-170.
