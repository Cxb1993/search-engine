(SSTA). We proposed a solution to enhance the accuracy 
of tightness probability, which would be affected by 
different computation orders. Moreover, we further extend 
our work to FPGA power minimization under 
deterministic and statistical timing constraints. We finally 
minimize the total power, including dynamic and leakage 
power, of FPGA using adaptive supply voltage and 
adaptive body biasing. The research results of the first year 
can be found in [1-6]. 
Next, we zoomed in on technology mapping, which 
plays a pivotal role in the electronic design automation 
(EDA) flow. It bridges technology-independent logic 
synthesis and technology-dependent physical optimization, 
and is the key to resolving the infamous design closure 
problem. Although previous work [7] has been made in 
timing-driven technology mapping, to the best of our 
knowledge the problem has not been tackled directly for 
DAGs under load-dependent timing models. Moreover, 
other works [8] and [9] had proposed load estimation by 
counting fanout numbers, but unfortunately, the accuracy 
of results is still not up to our expectations. Thus, in the 
second year of project, we reexamine the problem of 
timing-driven technology mapping for DAGs, and propose 
solutions to overcome difficulties risen due to the use of 
load-dependent timing models. Compared with prior work, 
our method provides a more accurate optimization. Our 
algorithm can perform technology mapping on DAGs 
directly under load-dependent timing models with more 
accurate timing optimization than prior methods. You can 
refer to research results in [2] and other relative research in 
[4][5][10][11]. 
In the third year of the project, we proposed a novel 
Boolean matching method for the sake of improving 
current technology mapping technique. Boolean matching 
determines whether two given (in)completely-specified 
Boolean functions can be identical or complementary to 
each other under permutation and/or negation of their 
input variables. Our work focuses on the computation 
kernel of Boolean matching and proposes a complete 
generic framework. Through conflict-driven learning and 
abstraction, the capacity of Boolean matching scales up 
due to the effective pruning of infeasible matching 
solutions. 
Although several techniques and algorithms have 
been proposed to strengthen technology mapping, of 
course, that is not the whole picture. Thus, in order to 
complement the shortage of technology mapping, we 
propose a post-mask Engineering Change Order (ECO) 
technique, called TRECO, to remedy timing violations 
based on technology remapping, which supports functional 
ECO as well. Unlike conventional technology mapping, 
TRECO performs technology mapping with respect to a 
limited set of spare cells and confronts dynamic changes of 
wiring cost incurred by different spare-cell selections. 
With a pre-computed lookup table of representative circuit 
templates, TRECO iteratively performs technology 
remapping to restructure timing critical sub-circuits until 
no timing violation remains. 
In addition, a research about interpolating functions 
from large Boolean relations is conducted. Boolean 
relations are important tools to characterize solutions to a 
set of Boolean constraints. Furthermore, there is no 
denying that the representation of Boolean relations is 
more powerful than that of don’t-cares, that is, relations 
subsume the conventional notion of don’t-cares. With this 
flexibility, the ability of technology remapping can be 
enhanced further. 
2. Main results 
Below we summarize main research results in the third 
year. 
2.1 A Decision Procedure for Boolean 
Matching: BooM 
Given two (in)completely-specified Boolean 
functions, Boolean matching (under NPN-equivalence) 
determines if they can be identical or complementary to 
each other under certain input permutation and/or negation. 
From a practical standpoint, Boolean matching has broad 
applications in logic synthesis and verification such as 
library binding [12], FPGA technology mapping [13], 
 2.2 Technique Remapping for Timing ECO: 
TRECO 
With the rapid growth of circuit complexities and the 
increasing time-to-market pressure, more and more design 
deficiencies are found in late design cycles. Since 
synthesizing a whole new design takes substantial efforts, 
it is crucial to transform an erroneous design to a correct 
design with minimal perturbations. As a solution, 
Engineering Change Orders (ECOs) are widely applied to 
incrementally repair design violations and thus reduces the 
need to backtrack to earlier design stages for design 
correction. 
ECOs can happen at different design stages, e.g., 
pre-layout, post- layout, post-mask, and even post-silicon. 
For post-mask ECO, the focus of this paper, mostly only 
metal-layer changes are affordable. Moreover, by their 
objectives, ECOs may target functional and/or timing 
repair. Without timing ECO, functional ECO itself can be 
insufficient because timing violation may result from the 
selection of spare cells with insufficient driving power or 
spare cells with unsatisfactory routing cost. Hence timing 
ECO is indispensable to fix timing violations due to 
unexpected delay sources in the original circuit and due to 
functional ECO. This paper is mainly concerned about 
timing ECO, which supports functional repair as well. 
We propose a technology-remapping algorithm for 
timing ECO. Our spare-cell aware technology remapping 
differs from the conventional layout-driven technology 
mapping [20] [21] in the cost metric. The latter typically 
performs a preliminary technology mapping and an initial 
placement to obtain physical design information. It then 
refines technology mapping accordingly. In the process, 
once a standard cell is placed, its physical position and 
wiring cost are fixed. Thus the cost is static in a sense. Our 
spare-cell aware technology remapping, in contrast, 
typically has multiple choices of spare cells of the same 
type for mapping the target logic function; selecting 
different spare cells during the technology remapping 
incurs different wiring costs. Therefore, the wiring cost for 
spare-cell aware technology remapping is dynamic, even 
during the technology mapping process, depending on the 
physical positions of the selected spare cells. 
To conquer the dynamic cost problem for timing 
optimization, we present a complete ECO flow. We 
pre-compute a lookup table, and perform iterative timing 
optimization based on technology remapping. Compared 
to [22] and [23], our method has more flexibility and needs 
not require buffer-type spare cells close to timing critical 
regions. Our method provides a promising framework 
towards timing-aware functional ECO, which fulfills 
functional rectification while satisfying a given timing 
constraint.  
Experimental results show that our methodology can 
effectively and efficiently resolve timing violations, even 
when there is no buffer-type spare cell in chip layouts. 
Table I compares our results with the technology 
remapping part of [39], the thesis version of [22]. In 
particular, the worst negative slack and total negative slack 
before and after ECO, improved ratios of the worst 
negative slack and total negative slack, and CPU times are 
shown. As can be seen, our results are comparable to those 
of [39] and can effectively resolve timing violation. Based 
on these results, we found that the execution times have no 
direct correlation with the total negative slack. For 
example, TRECO spent the longest time on Design 4, 
whose initial total negative slack is not the greatest. In fact, 
the execution time of TRECO depends on several factors, 
such as the number of critical gates, cut size and cut 
F igu r e 6 : C u m u la t iv e r u n t im e fo r N P -e q u iva le n c ei re 2: 
range-preserving, where all possible output responses 
under every input stimulus are produced (with the help of 
parametric variables), and can be deterministically 
reducing, where only one output response under every 
input stimulus is produced (without the need of parametric 
variables). Both extremes have important applications in 
system synthesis and verification. The former is 
particularly useful in verification. As the constraints 
specified by a relation are preserved, the conversion helps 
create a testbench to generate simulation stimuli [27-29] 
mimicking the constrained system environment. The later 
on the other hand is particularly useful in synthesis [30]. 
As the synthesized components are typically much 
compact than those with range preserved [31], it is 
attractive for generating the final implementation. This 
work is concerned with the latter, in particular, 
determinizing a relation and extracting functional 
implementation in the Boolean domain. 
As BDDs are not memory efficient in representing 
large Boolean functions, the methods using BDD have 
intrinsic limitations and are not scalable to large problem 
instances. There has been growing need for scalable 
determinization of large Boolean relations. Therefore, 
from the scalability standpoint, we seek reasonable 
representation of large Boolean functions and, in particular, 
use and-inverter graphs (AIGs) (see, e.g., [32]) as the 
underlying data structure. Due to their simple and 
multi-level nature, AIGs are often much compact and are 
closer to final logic implementation than the two-level 
SOP form. Moreover they provide a convenient interface 
with SAT solvers in terms of conversion to CNFs and 
representation of interpolants [33]. Therefore, unlike 
previous efforts on relation solving, our objective is to 
convert a large relation to a set of functions with 
reasonable quality. Similar attempts were pursued recently 
in other efforts of scalable logic synthesis, e.g., [34-37]. 
Our main exploration includes 1) exploiting 
interpolation [38] for Boolean relation determinization and 
function extraction, 2) studying expansion- and 
substitution-based quantifications with reuse, and 3) 
showing support minimization in the interpolation 
framework. A comparative empirical study is performed 
on various computation schemes.  
Experimental results suggest that interpolation is 
essential to scalable relation determinization and function 
extraction. Boolean relations with thousands of variables 
can be determinized effectively and the extracted functions 
are typically of reasonable quality compared with their 
respective reference models. We compare different 
determinization methods, including BDD-based 
computation, that via expansion reduction, denoted Xp, 
that via substitution reduction, denoted St, and that via 
constructing deterministic relation, denoted SD. Dynamic 
variable reordering and BDD minimization are applied in 
BDD-based computation. 
Table II shows the results of function extraction 
from relations without don’t care insertion. BDD-based 
computation is not scalable as expected. There are five 
circuits whose transition relations cannot be built 
compactly using BDDs under 500K nodes and the 
computation cannot finish either within 30 hours CPU 
time or within the memory limitation. Ratio 1 and Ratio 2 
are normalized with respect to the data of the original 
circuits of Table III, whereas Ratio 3 is normalized with 
respect to the BDD-based derivation. Ratio 1 covers all the 
ten circuits, whereas Ratio 2 and Ratio 3 cover only the 
five circuits that BDD-based derivation can finish. 
By Ratio 1, we observe that the derived functions 
(without further postprocessing to minimize) are about 
3-times larger in nodes, 4-times larger in logic levels, and 
9% smaller in support sizes. With postprocessing, the 
derived functions can be substantially simplified and are 
comparable to the original sizes. By Ratio 2, we see that 
even BDD-based derivation may increase circuit sizes by 
70% while logic levels are reduced by 11%. By Ratio 3, 
we see that the results of the SAT-based methods are about 
40% larger in nodes and 2-times larger in logic levels. 
 
 
 
[9] J. Cong and Y. Ding. On nominal delay minimization in LUT-based 
FPGA technology mapping. In Proc. FPGA, 1995, pp. 82-88. 
[10] A. Mishchenko, R. K. Brayton, J.-H. R. Jiang, and S. Jang. Scalable 
don't care based logic optimization and resynthesis. In Proc. ACM 
International Symposium on Field Programmable Gate Arrays 
(FPGA'09) , February 2009, pages 151-160. 
[11] J.-H. R. Jiang. Quantifier Elimination via Functional Composition. 
In Proc. Int'l Conf. on Computer Aided Verification (CAV'09), June 
2009, pages 383-397. 
[12] L. Benini and G. De Micheli. A survey of Boolean matching 
techniques for library binding. ACM Trans. on Design Automation 
of Electronic Systems, vol. 2, no. 3, pp. 193-226, Jul. 1997. 
[13] J. Cong and Y.-Y. Hwang. Boolean matching for LUT-based logic 
blocks with applications to architecture evaluation and technology 
mapping. IEEE Trans. Comput.-Aided Design Integr. Circuits Syst., 
vol. 20, no. 9, pp. 1077-1090, Sep. 2001. 
[14] J. Mohnke, P. Molitor, and S. Malik. Application of BDDs in 
Boolean matching techniques for formal logic combinational 
verification. International Journal on Software Tools for 
Technology Transfer, vol. 3, no. 2, pp. 1-10, Springer, May 2001. 
[15] S. Krishnaswamy, H. Ren, N. Modi, and R. Puri. DeltaSyn: An 
efficient logic-difference optimizer for ECO synthesis. In Proc. 
ICCAD, 2009. 
[16] A. Abdollahi and M. Pedram. Symmetry detection and Boolean 
matching utilizing a signature-based canonical form of Boolean 
functions. IEEE Trans. Comput.-Aided Design Integr. Circuits Syst., 
vol. 27, no. 6, pp. 1128-1137, Jun. 2008. 
[17] G. Agosta, F. Bruschi, G. Pelosi, and D. Sciuto. A 
trasnform-parametric approch to Boolean matching. IEEE Trans. 
Comput.-Aided Design Integr. Circuits Syst., vol. 28, no. 6, pp. 
805-817, Jun. 2009. 
[18] B. Borchert, D. Ranjan, and F. Stephan. On the computational 
complexity of some classical equivalence relations on Boolean 
functions. Forschungsberichte Mathematische Logik, Universitat 
Heidelberg, Bericht Nr. 18, Dec. 1995. 
[19] K.-H. Wang, C.-M. Chan, and J.-C. Liu. Simulation and SAT-based 
Boolean matching for large Boolean networks. In Proc. DAC, pp. 
396-401, 2009. 
[20] M. Pedram and N. Bhat, “Layout Driven Technology Mapping,” 
Proceedings of Design Automation Conference, pp. 99–105, June 
1991. 
[21] D. Pandini, L. T. Pileggi, and A. J. Strojwas, “Understanding and 
Addressing the Impact of Wiring Congestion during Technology 
Map- ping,” Proceedings of International Symposium on Physical 
Design, pp. 131–136, Apr. 2002. 
[22] Y.-P. Chen, J.-W. Fang, and Y.-W. Chang, “ECO Timing Optimiza- 
tion using Spare Cells,” Proceedings of International Conference 
on Computer Aided Design, pp. 530–535, Nov. 2007. 
[23] C.-P. Lu, M. C.-T. Chao, C.-H. Lo, and C.-W. Chang, “A Metal- 
Only-ECO Solver for Input-Slew and Output-Loading Violations,” 
Proceedings of International Symposium on Physical Design, pp. 
191– 198, Apr. 2009. 
[24] J. Mohnke, P. Molitor, and S. Malik. Limits of using signatures for 
permutation independent Boolean comparison. In Proc. ASP-DAC, 
pp. 459-464, 1995. 
[25] A. Abdollahi. Signature based Boolean matching in the presence of 
don’t cares. In Proc. DAC, pp. 642-647, 2008. 
[26] Z. Wei, D. Chai, A. Kuehlmann, and A. R. Newton. Fast Boolean 
matching with don’t cares. In Proc. Int. Symp. on Quality Electronic 
Design, pp. 346-351, 2006. 
[27] J. Kukula and T. Shiple. Building circuits from relations. In Proc. 
Int’l Conf. on Computer Aided Verification, pages 113-123, 2000. 
[28] J. Yuan, K. Shultz, C. Pixley, H. Miller, and A. Aziz. Modeling 
design constraints and biasing in simulation using BDDs. In Proc. 
Int’l Conf. on Computer-Aided Design, pages 584-589, 1999. 
[29] J. Yuan , K. Albin , A. Aziz , C. Pixley. Constraint synthesis for 
environment modeling in functional verification. In Proc. Design 
Automation Conf., 2003. 
[30] R. Brayton and F. Somenzi. Boolean relations and the incomplete 
specification of logic networks. In Proc. Int’l Conf. on Very Large 
Scale Integration, 1989. 
[31] R. Bloem, S. Galler, B. Jobstmann, N. Piterman, A. Pnueli, and M. 
Weiglhofer. Automatic hardware synthesis from specifications: A 
case study. In Proc. Design Automation and Test in Europe, 2007. 
[32] A. Mishchenko, S. Chatterjee, J.-H. R. Jiang, and R. K. Brayton. 
FRAIGs: A unifying representation for logic synthesis and 
verification. ERL Technical Report, UC Berkeley, March 2005. 
[33] K. L. McMillan. Interpolation and SAT-based model checking. In 
Proc. Int’l Conf. on Computer Aided Verification, pages 1-13, 2003. 
[34] C.-C. Lee, J.-H. R. Jiang, C.-Y. Huang, and A. Mishchenko. 
Scalable exploration of functional dependency by interpolation and 
incremental SAT solving. In Proc. Int’l Conf. on Computer-Aided 
Design, 2007. 
[35] R.-R. Lee, J.-H. R. Jiang, and W.-L. Hung. Bi-decomposing large 
Boolean functions via interpolation and satisfiability solving. In 
Proc. Design Automation Conf., pages 636-641, 2008. 
[36] H.-P. Lin, J.-H. R. Jiang, and R.-R. Lee. To SAT or not to SAT: 
Ashenhurst decomposition in a large scale. In Proc. Int’l Conf. on 
Computer-Aided Design, pages 32-37, 2008. 
出席國際學術會議心得報告 
出國人員姓名 
服務機關及職稱 
江介宏副教授 台灣大學電機系暨電子所 
會議時間地點 11/2/2009-11/5/2009, San Jose, CA, USA 
會議名稱 IEEE/ACM International Conference on Computer-Aided Design 
發表論文題目 Interpolating Functions from Large Boolean Relations 
 
一、參加會議經過 
The International Conference on Computer-Aided Design is one of the most prestigious 
conferences in the field of EDA. It provides a research forum for the exchange of ideas 
pertaining to all aspects of synthesis, optimization, and verification of integrated circuits and 
systems. A pre-conference programming contest, the ACM SIGDA CADathlon 2009, was held 
on 11/1 Sunday. It is interesting knew that one of the programming contest problems adopted 
our prior work on SAT-based functional decomposition.  
The following three conference days (11/2-11/4, Monday through Wednesday) were the 
main technical program. Our paper was presented as the first paper in Session 9C: “Advanced 
Boolean Techniques in Logic Synthesis,” chaired by Dr. Satrajit Chatterjee and Dr. Alan 
Mishchenko, on Wednesday morning. We had discussions with several researchers. In addition 
to paper presentations, ICCAD hosted several tutorials, embedded tutorials, and penal 
discussions. During the conference, I also attended the TPC meeting of the 2010 International 
Workshop on Logic and Synthesis.  
二、與會心得 
There were several technical meetings held, including the discussions with Prof. Robert 
Brayton and Dr. Alan Mishchenko of UC Berkeley, Mr. Stephen Jang, and Prof. Maciej 
Ciesielski of the University of Massachusetts. There were also many informal discussions with 
other researchers. The trip was very fruitful. I am grateful to the generous support from the 
National Science Council. 
三、建議 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/01/30
國科會補助計畫
計畫名稱: 子計畫三：於奈米積體電路製程變異下考量實體設計之穩健邏輯合成研究
計畫主持人: 江介宏
計畫編號: 96-2221-E-002-278-MY3 學門領域: 積體電路及系統設計
無研發成果推廣資料
博士生 0 0 100%  
博士後研究員 0 0 100%  
（外國籍） 
專任助理 0 0 100%  
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
