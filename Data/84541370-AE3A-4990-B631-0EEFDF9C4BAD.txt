 2
國科會九十八年度專題研究計畫成果報告 
 
 
序列區間樣式探勘之效能提升及推廣 
Performance Improvement and Generalization on Sequential Interval-based Pattern 
Mining 
 
計畫編號：NSC 98-2221-E-126-011 
執行期限：98年08月01日 至 98年07月31日 
主持人：葉介山 jsyeh@pu.edu.tw 靜宜大學 資訊管理學系 
計畫參與人員：陳又誠、林德勳 靜宜大學 資訊管理學系 
 
 
【中文摘要】 
關鍵詞： 週期樣式、非同步序列、樣式探勘、資料探勘 
 
近年來，對於關聯法則探勘與序列樣式探勘之探討，幾乎所有的研究架構都是建立在事件發生的時間
點上，利用交易資料庫中所記錄的顧客帳號、交易時間與交易時所購買的項目集合做進一步的資料探
勘。然而，在實際生活應用的例子上，事件本身往往持續發生一段時間，包含了事件的開始時間與事
件結束時間。例如：圖書借閱行為、股價波動、疾病與用藥持續時間與氣象資料等。而近年來，以時
間樣式的樣式探勘有 Wu 等與 Mörchen 等的研究，其相關運用也相繼提出。本計畫首先針對以時間為
主之序列區間樣式探勘(Sequential Interval-based Pattern Mining, SIPM)做進一步的探討與研究，並計畫
提出三個更有效率之探勘方法，分別稱之為：AL、SPPF 及 SP&EPPF 演算法。 
 
此外，本計畫將針對所提出之演算法進行時間複雜度及空間複雜度之分析。本計畫並於人工資料集和
真實資料集(包括：Biological data, Book borrowing data, Stock price data)上測試所提出之演算法之效能。 
 4
一、 報告內容（包含前言、研究目的、文獻探討、研究方法、結果與討論） 
 
(一) 前言 
 
對於關聯法則探勘與序列樣式探勘之研究中，幾乎所有的研究架構都是建立在事件發生的時間點上，
利用交易資料庫中所記錄的顧客帳號、交易時間與交易時所購買的項目集合做進一步的資料探勘。然
而，在實際生活應用的例子上，事件本身往往持續發生一段時間，包含了事件的開始時間與事件結束
時間。例如：圖書借閱行為、股價波動、疾病與用藥持續時間與氣象資料等。近年來，以時間樣式的
樣式探勘有 Wu 等[4]與 Mörchen 等[14]的研究，其相關運用也相繼提出，例如：股票交易價格波動分
析、圖書借閱分析與病人疾病分析等。首先，針對以時間為主之序列區間樣式探勘 (Sequential 
Interval-based Pattern Mining, SIPM)，本計畫提出了三個改進及有效率之探勘方法，分別稱之為：AL、
SPPF 及 SP&EPPF 演算法。 
 
此外，本計畫針對所提出之演算法進行時間複雜度(time complexity)及空間複雜度(space complexity)等
效能之分析。本計畫於人工資料集和真實資料集(包括：Biological data, Book borrowing data, Stock price 
data)上測試所提出之演算法之效能。 
 
(二) 研究目的 
 
本計畫主要的目的與重要性有以下： 
 
(1) 樣式探勘在理論研究或實際運用上都有很重要的角色和地位。其中，以交易資料庫之頻繁項目集
及序列樣式探勘等相關議題最早也廣為研究及運用。由於，以交易資料庫之頻繁項目集及序列樣式探
勘其原始資料多半包含事件的起、迄時間點，不同觀點的樣式探勘的運用也不斷的提出，例如：購物
籃分析、股票交易價格波動及預測、地震預測、網路瀏覽行為分析、網路攻擊分析等。如何提升樣式
探勘之效能及如何提出不同的探勘模式，已成為資料探勘學者重要的議題。因此，本計畫主要的目的
是針對序列區間樣式提出高效率的探勘演算法。本計畫的重要性及貢獻是改進傳統的關聯法則及序列
樣式探勘，以符合我們所提出的序列區間樣式探勘。 
 
(2) 本計畫除了實驗測試人工生成之資料庫，驗證我們所提出之演算法之效能，我們也將取得實際的真
實資料，如網站流量資料、圖書借閱資料、股票交易價格資料等，並將理論實際驗證於真實資料庫上。
因此，本計劃在實際案例資料庫上之探勘實驗成果，證明其具有實際運用的可行性，並期望該成果能
對產學界在樣式探勘上產生影響及貢獻。 
 
 
(三) 文獻探討 
 
有關本計畫之國內外相關研究情況，我們特別將針對時間序列相關探勘模型及研究，分成下列三個項
目並於以詳細說描述於以下小節：(1) 序列規則探勘(Sequence Pattern Mining)之研究；(2) 時間樣式探
勘(Temporal Pattern Mining)之研究；(3) 交易資料庫之研究(Transaction Database)；之研究。 
 
 6
料庫(progressive database) 之累進樣式(progressive sequential pattern)探勘。 
 
固定交易資料庫序列樣式探勘[1], [23], [24], [9]乃指探勘時的資料庫並不隨時間改變而變動。而累加交
易資料庫序列樣是探勘所指的是資料庫裡的資料隨著時間增加而增加，相關的研究有[10], [11], [27], 
[28], [11], [29]。Huang 等在所提出的累進交易資料庫累進樣式探勘[12]裡利用 POI(period of interest)的
概念，不僅隨日期增加而將新進的資料加入到原始資料庫中，並可刪除了相對應時間的資料。雖然
Huang 等所提出的 POI 是一個滑動視窗的概念，而與 Srikant 等在[6]所提出的 GSP 演算法不同的是 GSP
所使用來探勘的原始資料庫是固定不變。 
 
於2008年，在Huang等[12]提出PS-tree與演算法Pisa以解決累進序列樣式(progressive sequential pattern)
探勘的問題。 
 
(四) 研究方法與執行步驟 
 
(1) 研究方法 
 
本計劃的研究方法採取理論證明推演、演算法分析、測試資料庫探勘、實驗成果分析、真實資料探勘
及法則分析等研究方法。 
 
(2) 執行步驟 
 
1. 文獻搜集資料。 
2. 有效率的序列區間樣式探勘(Sequential Interval-based Pattern Mining)演算法之提出與累進序列區間
樣式探勘(Progressive Sequential Interval-based Pattern Mining)的模型之提出。 
3. 演算法之推演及證明。 
4. 測試資料庫生成程式之撰寫與生成測試資料庫。 
5. 演算法程式之撰寫。 
6. 測試資料庫之資料探勘。 
7. 實驗結果分析和探討。 
8. 撰寫計畫年度成果報告並發表論文。 
 
(3) 有效率的序列區間樣式探勘演算法 
 
依據 Agrawal 所定義之關聯法則探勘與序列樣式探勘問題，本計畫我們提出序列區間樣式探勘演算法。 
 
以 Apriori 為基礎之 SIPM 演算法，如圖 1。 
 
Algorithm 1: AL Algorithm for SIPM 
Input: DB: A set of interval sequences, min_sup: minimum support 
Output: S: all large interval-based patterns 
Method: 
 8
以起、迄始時間點為基礎之 SIPM 演算法，如圖 3。 
 
Algorithm 2: SP&EPPF Algorithm  
Input: DB: A set of interval sequences, min_sup: minimum support 
Output: S: all large interval-based patterns 
Method: 
 
DB+ ={the starting point sequence of T | T א DB }; 
DB- ={the end point sequence of T | T א DB }; 
 
S+ = SPM (DB+, min_sup)  // S+ is the set of all large sequential patterns of DB+
                       // SPM is any efficient sequential pattern mining algorithm 
S- = SPM (DB-, min_sup)  // S- is the set of all large sequential patterns of DB-
                       
C = ψ // the set of candidate interval-based patterns 
for each s+ א S+ do { 
C = C ∪ possible_candidate (s+);  
      /* generate all interval-based patterns with the starting point sequence equals s+ and some end point 
sequence s-   */ 
} 
for each T א DB do { 
  for each P א C do{ 
   if( T supports P) then 
     P.sup++;  //the support count increases 1 
} 
} 
圖 5： AprioriAll-Like、SP&EPPF(Apriori-Like)與 SP&EPPF(AprioriAll-Like)演算法效能分析 
0
20
40
60
80
100
120
140
2000 3000 4000 5000 6000
number of sequences
ru
n t
im
e (
se
c)(
Lo
ga
rit
hm
ic 
Sc
ale
)
AprioriAll-Like
SP&EPPF (Apriori-Like)
SP&EPPF (AprioriAll-Like)
 
圖 6：在不同序列數下 AprioriAll-Like、SP&EPPF(Apriori-Like)和 SP&EPPF(AprioriAll-Like)演算法
執行時間之比較 
 
二、 參考文獻 
 
1. R. Agrawal and R. Srikant, “Mining sequential patterns,” In Proceedings of the 11th International 
Conference on Data Engineering (ICDE ’95), pp. 3-14, 1995.  
2. J. Han and M. Kamber, “Data Mining: Concepts and Techniques,” Academic Press, 2001.  
3. J. F. Allen, “Maintaining knowledge about temporal intervals,” Communications of the ACM, vol. 26, no. 
11, pp. 832-843, 1983.  
4. S. Y Wu and Y. L. Chen, “Mining nonambiguous temporal patterns for interval-based events,” IEEE 
Transactions on Knowledge and Data Engineering, vol. 19, pp. 742-758, 2007.  
5. J. Pei, J. Han, B. Mortazavi-Asl, J. Wang, H. Pinto, Q. Chen, U. Dayal, and M.-C. Hsu, “Mining 
sequential patterns by pattern-growth: The PrefixSpan approach,” IEEE Transactions on Knowledge and 
Data Engineering, vol. 16, pp. 1424-1440, 2004.  
6. R. Srikant and R. Agrawal, “Mining sequential patterns: generalizations and performance improvements,” 
In Proceedings of the 5th International Conference Extending Database Technology (EDBT ’96), pp. 3-17, 
1996.  
7. M. J. Zaki, “SPADE: An efficient algorithm for mining frequent sequences,” Machine Learning, vol. 42, 
no. 1-2, pp. 31-60, 2001.  
8. F. Mörchen, “Unsupervised pattern mining from symbolic temporal data,” ACM SIGKDD Explorations 
Newsletter, vol. 9, no. 1, pp. 41-55, 2007.  
9. J. Pei, J. Han, B. Mortazavi-Asl, H. Pinto, Q. Chen, U. Dayal, and M.-C. Hsu, “PrefixSpan: Mining 
sequential patterns efficiently by prefix-projected pattern growth,” In Proceedings of 17th International 
Conference on Data Engineering (ICDE ’01), pp. 215-224, 2001. 
 10
 12
Conference on Knowledge Discovery and Data Mining (KDD ’00), pp. 355-359, 2000.  
26. H. Cheng, X. Yan, and J. Han, “INCSPAN: Incremental Mining of Sequential Patterns in Large Database,” 
In Proceedings of the 10th ACM SIGKDD International Conference on Knowledge Discovery and Data 
Mining (KDD ’04), pp. 527-532, 2004.  
27. M.-Y. Lin and S.-Y. Lee, “Incremental Update on Sequential Patterns in Large Databases by Implicit 
Merging and Efficient Counting,” Information System, vol. 29, no. 5, pp. 385-404, July 2004.  
28. F. Masseglia, P. Poncelet, and M. Teisseire, “Incremental Mining of Sequential Patterns in Large 
Databases,” Data and Knowledge Engineering, vol. 46, pp. 97-121, July 2003.  
29. S. Parthasarathy, M.J. Zaki, M. Ogihara, and S. Dwarkadas, “Incremental and Interactive Sequence 
Mining,” In Proceedings of the 8th ACM International Conference on Information and Knowledge 
Management (CIKM ’99), pp. 251-258, 1999.  
30. S. Cong, J. Han, and D. Padua, “Parallel Mining of Closed Sequential Patterns,” In Proceedings of the 
11th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD ’05), pp. 
562-567, Aug. 2005. 
31. J. Wang and J. Han, “Bide: Efficient Mining of Frequent Closed Sequences,” In Proceedings of the 20th 
International Conference on Data Engineering (ICDE ’04), pp. 79-91, 2004. 
32. X. Yan, J. Han, and R. Afshar, “Clospan: Mining Closed Sequential Patterns in Large Datasets,” In 
Proceedings of the 3th SIAM International Conference on Data Mining (SDM ’03), pp. 166-177, May 
2003. 
33. M.N. Garofalakis, R. Rastogi, and K. Shim, “Spirit: Sequential Pattern Mining with Regular Expression 
Constraints,” In Proceedings of the 25th International Conference on Very Large Data Bases (VLDB ’99), 
pp. 223-234, 1999. 
34. Y. Hirate and H. Yamana, “Sequential Pattern Mining with Time Interval,” In Proceedings of the 10th 
Pacific-Asia Conference on Knowledge Discovery and Data Mining (PAKDD ’06), pp. 775-779, 2006. 
35. J.-Z. Ouh, P. Wu, and M.-S. Chen, “Constrained Based Sequential Pattern Mining,” In Proceedings of the 
International Workshop Web Technology, Dec. 2001. 
36. J. Pei, J. Han, and W. Wang, “Mining Sequential Patterns with Constraints in Large Databases,” In 
Proceedings of the 11th ACM International Conference on Information and Knowledge Management 
(CIKM), 2002. 
37. C. Luo and S.M. Chung, “Efficient Mining of Maximal Sequential Patterns Using Multiple Samples,” In 
Proceedings of the 5th SIAM International Conference on Data Mining (SDM), 2005. 
38. H. Cao, N. Mamoulis, and D.W. Cheung, “Mining Frequent Spatio-Temporal Sequential Patterns,” In 
Proceedings of the 5th International Conference on Data Mining (ICDM ’05), pp. 82-89, Nov. 2005. 
39. J.-K. Guo, B.-J. Ruan, and Y.-Y. Zhu, “A Top-Down Algorithm for Web Log Sequential Pattern Mining,” 
In Proceedings of the 9th Pacific-Asia Conference on Knowledge Discovery and Data Mining (PAKDD), 
2005. 
40. K. Wang, Y. Xu, and J.X. Yu, “Scalable Sequential Pattern Mining for Biological Sequences,” In 
Proceedings of the 13th ACM International Conference on Information and Knowledge Management 
(CIKM ’04), pp. 178-187, Nov. 2004. 
41. C.-C. Ho, H.-F. Li, F.-F. Kuo, and S.-Y. Lee, “Incremental Mining of Sequential Patterns over a Stream 
Sliding Window,” In Proceedings of the IEEE International on Workshop Mining Evolving and Streaming 
 14
 
本研究成果已發表於 the 2010 International Conference on Data Mining (DMIN'10) as part of 
WORLDCOMP'10, Las Vegas, Nevada, USA，目前已彙整成果投稿於研究期刊。 
 
 2
work to an large, interdisciplinary audience and to extend our professional network. DMIN'10 attendees have 
full access to all sessions and tutorials of all conferences. 
 In the 4-day conference, researchers and graduate students presented their research results. People 
discussed topics in the presentation sections, and chatted in the coffee breaks and banquets. The research 
atmosphere was great.  
The organization committee provided very good service and assistance, including housing, dinning and 
transportation. It was a very well organized conference. 
 
三、考察參觀活動(無是項活動者略) 
N/A 
 
四、建議 
The organization committee provided very good information and service in advance, so that the 
participants could well-prepared before arrival. This is a good experience for who will organize an 
international conference in future. However, the travel expenses and the registration fee of the conference are 
very high. The founding from NSC cannot cover all the expenses.  
 
五、攜回資料名稱及內容 
A hard copy and a digital copy of the proceedings of the 2010 International Conference on Data Mining 
(DMIN'10) 
 
六、其他 
 
 
 
vertical bitmap. However, SPAM is efficient only when the 
entire bitmaps are kept in the main memory. On the other 
hand, PrefixSpan [8] and [9] distributes the customer 
sequences into partitions so that all the customer sequences 
in a partition support a common frequent sequence. 
However, all these algorithms above are designed for point-
based methods. 
2.2 Interval-based pattern mining 
 For the purpose of temporal reasoning Allen 
formalized temporal logic on intervals by specifying 13 
interval relations [2]. Any two intervals are related by 
exactly one of the relations. The operators are: before, 
meets, overlaps, starts, during, finishes, the corresponding 
inverses after, met by, overlapped by, started by, contains, 
finished by, and equals (see Fig. 1). 
 
Although the Allen-based approach looks promising, the 
patterns discovered have two ambiguous problems [3]. 
First, the same temporal pattern can represent different 
relationships among events. For example, Fig. 2(a) shows 
that pattern “(a overlaps c) overlaps b” can represent two 
different relationships among events. Second, the same 
relationship among events can be represented by different 
temporal patterns. For example, Fig. 2(b) shows that the 
single relationship among events can be represented as two 
different temporal patterns. The first one is (((a overlaps b) 
before c) overlaps d), and the second is ((a overlaps b) 
before (c during d)). 
3 Sequential Intervl-based Pattern 
Mining 
  This section discusses the sequential interval-based 
pattern mining. First, in order to the resolve the problem of 
Allen’s ambiguous representation, a new interval-based 
pattern and interval-based sequence representations were 
proposed. Then, we introduce our proposed algorithms, 
called AprioriAll-Like Algorithm and Starting Point & End 
Point Pattern First Algorithm (SP&EPPF) for mining all 
frequent interval-based patterns.  
3.1 Problem Definition 
 The previous sequential pattern mining with point-
based events corresponds to the mining process which the 
event occurs at the instant. In practical applications, each 
event usually lasts for a certain period of time, and the 
starting and ending times are known and stored in 
databases. Therefore, the combination of the period of time 
forms the interval-based event data can be used to mining 
sequential interval-based patterns. A formal definition of a 
sequential interval-based pattern mining is given as follows. 
Fig. 1.  Examples of Allen’s interval relations between the intervals A 
Definition 1 (temporal database). Let TDB denote a 
temporal database. Each record in TDB consists of three 
attributes: person ID, event type, and time period. For 
example, a list of clinical records may contain the 
following attributes: patient ID, patient＇s disease, and the 
duration that the patient suffered from this disease. An 
example of TDB is shown in Table 1. The duration of each 
disease is recorded using ts and te (where ts < te), which are 
the starting time and the ending time, respectively. 
TABLE 1 
ORIGINAL TEMPORAL DATABASE TDB 
Patient ID Disease Interval {ts, te} 
01 a {2009/1/5, 2009/1/10} 
01 b {2009/1/8, 2009/1/12} 
01 c {2009/1/14, 2009/1/18} 
01 d {2009/1/14, 2009/1/20} 
01 b {2009/1/17, 2009/1/22} 
02 a {2009/1/8, 2009/1/14} 
02 b {2009/1/9, 2009/1/15} 
02 c {2009/1/16, 2009/1/18} 
02 c {2009/1/19, 2009/1/21} 
02 d {2009/1/16, 2009/1/22} 
03 a {2009/1/12, 2009/1/20} 
03 b {2009/1/22, 2009/1/25} 
03 c {2009/1/29, 2009/1/30} 
03 d {2009/1/28, 2009/1/31} 
Fig. 2.  Ambiguous representation of temporal patterns. 
 
Definition 2. An event is denoted by e = (type, start, end), 
where e.type denotes the type of event, e.start and e.end 
denote the event's start and end time respectively. An event 
e has two end points e+ and e- , called event end points, 
where e+ is the starting point (esp) and e- is the ending 
interval-based patterns. Finally, repeating previous steps, 
algorithm will get all frequent interval-based patterns. The 
detail description is shown in below. 
 
Example 4. Suppose we have three temporal sequences as 
shown in Table 2. First, AprioriAll-Like scans the database 
and calculates the event support count. Suppose the 
minimum support is 65%. In this step, the event <a+, a->, 
<b+, b->, <c+, c->, and <d+, d-> are the length-1 frequent 
interval-based patterns. Second, the algorithm utilizes the 
previous definitions and Permutations and Combinations to 
generate the next generation candidate interval-based 
patterns. In this step, the algorithm will generate the length-
2 interval-based candidate patterns. According to the Allen-
based approach, there are total four points and 13 temporal 
relationships between any two interval-based events. Take 
the event b and c for instance, the algorithm chooses the 
interval-based pattern <c+, c-> and inserts it to the interval-
based pattern <b+, b->. This algorithm is impossible to 
generate the interval-based candidate <b-, b+, c+, c-> and 
<b+, (b-, c-), c+> patterns. Third, the algorithm rescans the 
TSDB and find out all length-2 frequent interval-based 
patterns. These length-2 frequent interval-based patterns 
are <a+, b+, a-, b->, <a+, a-, b+, b->, <a+, a-, c+, c->, <a+, a-, 
d+, d->, <b+, b-, c+, c->, <b+, b-, d+, d->, <(c+, d+), c-, d->, 
and <d+, c+, c-, d->. Finally, repeating previous steps, the 
AprioriAll-Like algorithm will get all frequent interval-
based patterns. 
3.2.3 The SP&EPPF Algorithm 
 By adopting the basic concept of the sequential 
pattern mining, the SP&EPPF algorithm is developed in 
order to discover temporal patterns, which are represented 
with the standard format proposed in Section 3.1. We 
describe SP&EPPF in detail as follows.  
Obviously, mining interval-based patterns is much more 
complicated than mining sequential patterns. We, therefore, 
employ the well-known AprioriAll algorithm as the join-
and-prune strategy to solve the sequential interval-based 
pattern mining problem in SP&EPPF algorithm. Note that 
the AprioriAll algorithm could be replaced by any other 
efficient algorithm. This research uses parentheses for 
different algorithm to represent that different algorithm was 
employed.  AprioriAll-Like Algorithm 
Input: TSDB: A set of interval sequences, min_sup: minimum support
Output: S: all frequent interval-based patterns 
Method: 
 
1. S1 is the set of frequent length-1 interval-based patterns 
 of TSDB; 
2.  for (k=2; Sk-1≠∅ ; k++){ 
3.    Ck = Candidate_gen (Sk-1);  
4.    /* generate k-interval-based patterns */ 
5.    for each T in TSDB  
6. for each candidate interval-based pattern C in Ck
7.            if (C ⊆ T)   C.sup ++; 
8.     Sk = { C ∈ Ck | C.sup >=min_sup}; 
9.  } 
10.  return S=∪Si
First, the algorithm scans the temporal sequential database 
and divides the Starting Point and Ending Point into DB+ 
and DB-, respectively. Two transaction databases will be 
generated. Second, it rescans DB+ and DB- to find the 
frequent 1-patterns. Third, according to the concept of 
sequential pattern mining, we can join and prune the 
sequential patterns. The detail description is shown in 
below. 
SP&EPPF Algorithm  
Input: TSDB: A set of interval sequences, min_sup: minimum support
Output: S: all frequent interval-based patterns 
Method: 
 
1. DB+ ={the starting point sequence of T|T ∈ TSDB}; 
2. DB- ={the end point sequence of T|T ∈ TSDB}; 
3. S+ = SPM (DB+, min_sup)   
/* S+ is the set of frequent sequential patterns of     DB+; SPM is any 
efficient sequential pattern  mining algorithm  */ 
4. S- = SPM (DB-, min_sup)   
/* S- is the set of frequent sequential patterns of  DB-  */ 
5. C =ψ;   /* the set of candidate interval-based patterns */ 
6. for each s+ ∈ S+ do { 
7.   C = C ∪ possible_candidate (s+);  
      /* generate all interval-based patterns with the starting point 
sequence equals s+ and some end point sequence s-   */ 
8. } 
9. for each T ∈ TSDB do { 
10.   for each P ∈ C do{ 
11.     if( T supports P)  
12.      P.sup++;  //the support count increases 1 
13.   } 
14.} 
15.  S = { P ∈ C | P.sup >=min_sup}; 
16. return S  /* return the set of frequent sequential interval-based 
patterns */ 
 
Example 5. Suppose we have three temporal sequences as 
shown in Table 2. First, SP&EPPF scans the database and 
divides the Starting Point and Ending Point into DB+ and 
DB-, respectively. Two end point sequential databases are 
shown in Table 3 and Table 4. Then, we could employ 
AprioriAll algorithm to find out the complete frequent 
sequential patterns because of some point records may be 
logged at the same time. Note that the AprioriAll algorithm 
could be replaced by any other sequential pattern mining 
algorithm in this step. Finally, according to the concept of 
AprioriAll algorithm, we can join and prune the sequential 
patterns. 
In Fig. 4, some parameters are fixed in the runtime 
experiments: |D|=1000, |N|=1000, |W|=28, |E|=|14|, and 
|T|=360. 
For SP&EPPF-based algorithms, since the Apriori-Like 
algorithm will generate more than 102n length-(k+1) 
candidates if there are 10n frequent k-itemsets. The 
AprioriAll-Like algorithm starts from 1-event sequences 
and finally will gets the frequent sequences among them. 
Then they generate 2-event sequences based on frequent 
sequences and get frequent 2-event sequences. This process 
goes on until no frequent (n+1)-event sequences are 
generated from frequent n-event sequences. This is rather 
similar to the Apriori algorithm except that the order of the 
elements matters here. The SP&EPPF-based algorithm 
treats the temporal sequential database as DB+ and DB- to 
find out the frequent patterns. The difference between the 
SP&EPPF(Apriori-Like) algorithm and the 
SP&EPPF(AprioriAll-Like) algorithm is the process of 
finding frequent point-based patterns. 
 
Fig. 5 shows the total execution time of all algorithms over 
different numbers of sequences. Some parameters are fixed 
in the runtime experiments: |N|=1000, |W|=28, |E|=|14|, and 
|T|=360 and varied the value of |D| from 2000 to 6000. The 
minimum support threshold is set to 2%. 
 
We see that the run time of the SP&EPPF grows smoothly. 
This observation reveals that when discovering temporal 
patterns the minimum support threshold has a much greater 
impact on algorithm performance than on sequence number. 
5 Conclusions 
 Most existing sequential pattern mining techniques 
only deal with the event with starting time point, and do not 
consider data with temporal intervals. However, there are 
many examples of interval-based patterns to be found in the 
real world, such as patient medical charts, book lending, 
merchandise purchase histories, and web-logs, and we can 
discover much useful knowledge from such data. 
In this paper, two algorithms named AprioriAll-Like and 
SP&EPPF were proposed. The AprioriAll-Like and 
SP&EPPF algorithms were developed to mine the frequent 
interval-based patterns from a temporal sequential database. 
The basic concept of the SP&EPPF algorithm is to divide 
the TSDB into DB+ and DB-, and then we can employ any 
kind of sequential pattern algorithm to find out all frequent 
patterns, respectively. Finally, according to the concept of 
joining and pruning, we can obtain all frequent interval-
based patterns. 
 
Fig. 4.  the performances of AprioriAll-Like, SP&EPPF(Apriori-Like), 
and SP&EPPF(AprioriAll-Like) algorithms. 
The experimental results showed that the performance of 
AprioriAll-Like and SP&EPPF were not only effective but 
also efficient. For the future work, we would like to 
improve the algorithm efficiency and extend it to mine 
more interest patterns, such as library lending, stock 
fluctuations, patient diseases, and meteorology data. 
6 References 
[1] R. Agrawal and R. Srikant, “Mining sequential 
patterns,” In Proceedings of the 11th International 
Conference on Data Engineering (ICDE’95), pp. 3-14, 
1995. 
[2] J. F. Allen, “Maintaining knowledge about temporal 
intervals,” Communications of the ACM, vol. 26, no. 11, pp. 
832-843, 1983. 
0
20
40
60
80
100
120
140
2000 3000 4000 5000 6000
number of sequences
ru
n t
im
e (
se
c)(
Lo
ga
rit
hm
ic 
Sc
ale
)
AprioriAll-Like
SP&EPPF (Apriori-Like)
SP&EPPF (AprioriAll-Like)
Fig. 5.  Scalability of AprioriAll-Like, SP&EPPF(Apriori-Like), and 
SP&EPPF(AprioriAll-Like) algorithms. 
[3] S. Y Wu and Y. L. Chen, “Mining nonambiguous 
temporal patterns for interval-based events,” IEEE 
Transactions on Knowledge and Data Engineering, vol. 19, 
pp. 742-758, 2007. 
[4] F. Mörchen, “Unsupervised pattern mining from 
symbolic temporal data,” ACM SIGKDD Explorations 
Newsletter, vol. 9, no. 1, pp. 41-55, 2007. 
[5] R. Srikant and R. Agrawal, “Mining sequential 
patterns: generalizations and performance improvements,” 
In Proceedings of the 5th International Conference 
無衍生研發成果推廣資料
研討會論文 1 0 100% 
Jieh-Shan Yeh* 
and Chia-Hsien 
Ting, ＇＇＇＇
SP&amp；EPPF: A 
Novel Algorithm 
for Sequential 
Interval-based 
Pattern 
Mining,＇＇＇＇
in Proceedings 
of the 2010 
International 
Conference on 
Data Mining 
(DMIN'10) as 
part of 
WORLDCOMP'10, 
Las Vegas, 
Nevada, USA, pp. 
343-349, July 
12-15, 2010. 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 2 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
科 
教 
處 
計 
教材 0  
 
