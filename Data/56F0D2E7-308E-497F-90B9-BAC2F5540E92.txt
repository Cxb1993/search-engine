 直接讀程式碼是痛苦的，而多數 editor 將
pseudo code 視為 comment，且無法隱藏 source 
code，只觀看 pseudo code。當 pseudo code冗長
時，亦無法做 multiple level 呈現，減輕閱讀困
擾。本文 pseudo code editor，隱藏 source code，
並呈現 multiple-level pseudo code，以便閱讀。 
 
2. 系統設計支援: 
 
 傳 統 使 用 computer-assisted software 
engineering (CASE) tool 設計系統，雖有其價
值，但使用它們必須耗費大量時間學習，無法符
合 agile 簡單快速的精神。當周遭不確定事情越
多，複雜工具就越難以因應。本文以 CRC Card
設計系統，並以 agent技術建立 classes資訊，及
產生 test code和 source code templates。 
 
3. 測試流程監控: 
 
 Agile method強調 unit test first，整合後程
式碼可共享，且隨時可修改，因此確保整合的程
式碼都通過測試非常重要。本環境以 agent技術
監控測試流程，只在通過 100% unit testing後，
才允許整合。 
 
 本文架構如下: Chapter 2比較相關研究，
Chapter 3說明 agile method與環境架構，Chapter 
4介紹範例，Chapter 5為結論。 
 
2. Related Work 
本章就 (1) pseudo code 支援 (2) 系統設
計支援 (3) 測試流程監控，三方面討論相關研
究: 
 
(1) pseudo code 支援 
 
 Eclipse (Appendix A) 為開放且可擴充的
integrated development environment (IDE)，它提
供以 plug-in 為基礎的 framework，讓第三方公
司得以 plug-in 各式各樣的工具。但目前對於
pseudo code的支援較低，comment只能寫在 /* 
與 */ 間或 // 後，且無支援 pseudo code 的
multiple levels，也就是只能 zoom in or zoom out 
/* 與 */ 間的 comment。另外，無法隱藏 source 
code，只觀看 pseudo code，造成閱讀不便。
Borland JBuilder (Appendix B) 與 Eclipse類似。 
 
(2) 系統設計支援 
 
好的設計應該簡單快速，以 CRC Card設計
系統，能夠: 1) 簡單明瞭的表達系統互動， 2) 
簡單快速的設計出好幾種架構(models)，互相競
爭，從中選出最好的一個。Eclipse以UML plug-in
為設計工具。Borland 提供 Borland Together 
(Appendix C) 使架構設計師透過應用程式
modeling，這雖能畫出完整架構，但 developer
須學習複雜的 models，並看懂架構圖，無法輕
易得知系統互動，而且畫出架構 model要很久，
無法快速產出好幾種競爭比較。 
 
(3) 測試流程監控 
 
Eclipse與 JBuilder皆整合 JUnit [7] 與CVS 
[8]，雖然強調 test first，但皆無法確認整合的
source code是否真正通過 100% unit testing。 
 
3.  New Agile Method with 
Agent-based Environment 
 
 本章介紹新的 agile method與以 agent建構
輔助 agile method的環境架構與實作。 
 
3.1 Agile method 
 
Fig. 1為此 agile method 流程圖，它擴充
XP，包含：6) Pre, Post condition, 8) Abstract data 
structure, 9) Design sketching and pseudo coding。 
 
 
 
Fig. 1 Our agile method 
 
1) User story: On-site customer以英詞中句在
卡片上簡單描述需求功能，評估 story工作
量，將較大的 story 則切割成幾個小的
stories，並排列 stories的優先順序。 
 
2) Release Planning: 在 release planning中，
將系統切割成許多 small releases。依照優
先順序決定此次或下次 release 要做的
stories，並預估理想實作週數，對長遠的
release則只做粗略規劃。在開發過程中，
若有新 user stories，則留至下個 release再
 
 
Fig. 2 Environment architecture 
 
1) Agent management system (AMS) : 是 AP的
mandatory component，掌管對 AP的存取，
所有 agents皆須向 AMS註冊。 
 
2) Message transport system (MTS) : 它控制
platform上所有 message交換，包含 to/from 
remote platform的 message。 
 
3) Directory facilitator (DF) : 提供 yellow 
pages，agent可向 DF註冊 service或查詢其
它已註冊 agents提供的 services。 
 
4) Middle agent (MA) : 監控 AMS 與 DF 上
的 agents，並負責協尋提供 Service的 agents 
與 recovery dead agents。 
 
5) Agents : platform上的 agents，透過MTS彼
此溝通，並以 ontology做為描述 information
與 message content的依據。透過 ontology描
述 class, user story, unit testing等 information
外，還有 message content ontology 作為
agents 間溝通的 message content (appendix 
D)。 
 
Fig. 3為 Fig. 2中 agents的詳細說明，其中
white board agent 擁有 repository white board 
(WB), unit testing management (mgt.) Agent擁
有 unit testing repository (UTR), CRC agent有
class repository (CR) 與 user story agent有 user 
story repository (USR)。用 repositories 存放
ontology instance，可讓 agents存取，而 ontology 
instance皆以 DARPA Agent Markup Language 
[10] (DAML) 格式建構。以下說明各 agent: 
 
 
 
Fig. 3 Agents 
 
1) Programmer pair agent (PPA) : 提供 GUI給
programmer pair，其餘功能 (如建立 user 
story、CRC cards等) 皆透過 MTS向 other 
agents (Fig. 3) 求助，另外亦可存取外部工
具 pseudo code editor進行 pseudo coding。 
 
2) Pseudo code editor (PCE) : 讀取 unit testing 
mgt. agent (UTMA) 和 code making agent 
(CMA) 產生的 code template，並提供
structured語法編輯 pseudo code。此外 PCE
提供 zoom in/out以檢視不同階層的 pseudo 
code，並能隱藏 source code。如 Fig. 4，PCE
將 source code 隱藏，以樹狀呈現 multiple 
level pseudo code，且箭頭向右表示 zoom in 
pseudo code，checkbox部分打勾表示已填入
source code。因此 developer與 maintainer能
有效率地閱讀 pseudo code，減低開發與維
護時間。 
 
3) White board agent (WBA) : 發佈 DAML格
式的記錄至WB 上，提供 GUI顯示資訊，
並提供增刪與查詢的功能。 
 
4) User story agent (USA) :  
1. 提供PPA建立每個 user story並紀錄其
資訊到 USR中。 
2. 控制 user stories的狀態，可讓已實做
完成或需再次測試的 user story進入可
再測試狀態。 
 
5) CRC agent (CRCA) : 
1. 向 USA取得 user story資料，並建立
CRC card資料，記錄當次 release所有
classes的資訊。 
2. 記錄所有 classes完成狀態，所有紀錄
以 DAML格式存放在 CR中。 
 
6) Unit testing mgt. agent (UTMA) : 
1. 向 CRCA取得 CR中 CRC card的資料
