二、前言
即時系統相關的排程設計技術之應用已日漸普及於各種電子、資訊系統與相關產品之中，
例如多媒體系統中的伺服器，寬頻通訊的交換主機以及生產流程控管所需的管理資訊系統
等。尤其是近年來在許多的可攜式或嵌入式電子裝置或系統中，特別強調即時性以及對電
源管理之重要性。
三、研究目的
本計畫欲研究之目的乃是在於利用非精確計算模型(imprecise computation model)下的即時
排程方法並結合功率可調式處理器的特性來研究分析與實作出相關的即時排程演算法及排
程機制，來達成系統所要求的即時性以及對電源等系統珍貴資源(eg. energy, memory,
bandwidth)作有效之運用。換句話說，我們的目標就是系統在即時(real-time)與電源(energy)
的限制條件下應用非精確計算模型透過適當的排程器與演算法之設定，妥善地分配系統中
記憶體及頻寬等資源來達成排程之目標，例如：服務品質之提供、耗電量最小化等。
四、文獻探討
非精確計算模型以及相關的排程技術[1-9]與應用[10-20]已經被發展一段時間了，它們被用
來提供更具彈性的即時排程法並提供了一個讓系統優雅降級(graceful degradation)的方式。
在此模型中，每一個工作在邏輯上可分為兩部分:主要部分(mandatory portion)以及可選擇部
分(optional portion)。每一個工作必須在期限(deadline)前做好，而其中可選擇部分是可被部
分或全部犧牲的以換取更佳的可排程性(schedulability)或達到被要求的服務品質(Quality of
Service, QoS)。因此，我們可以將非精確計算模型中，欲線上排程之工作集合T = {T1, T2, …,
Tn}，其中每個工作Ti 具下列參數:
(1) arrival time ai at which Ti arrives
(2) ready time ri at which Ti becomes ready for execution
(3) deadline di by which Ti must be completed
(4) processing time pi which is the time required to execute entire Ti (pi = mi + oi )
(5) processing time miwhich is the time required to execute the mandatory portion (Mi ) of Ti
(6) processing time oiwhich is the time required to execute the optional portion (Oi ) of Ti
(7) processing time xi which is the time assigned by the scheduler to execute Ti (xi = mi + oi* )
(8) Oi* : the segment of Oi that will be executed (the residual segment of Oi will be chopped)
(9) processing time oi* which is the time assigned by the scheduler to execute Oi*
(10) error ei which is incurred by executing Ti (ei = pi –xi )
而線上排程之目標為:在期限內排入每個工作Ti 並使總誤差Σei最小化 (minimize Σei
, from i = 1 to i = n)。例如演算法NORA (proposed in [5])為一可將總誤差最小化的線上排程
演算法(Optimal)，且此一演算法已被證明(在滿足FMC, Feasible Mandatory Constraint 時)可
將總誤差(也就是被犧牲的部分)最小化。
由於排程目標是將被犧牲的部分減到最小(i.e. minimize total error)，所以這種排程之結果可
被視為在滿足期限的條件下提供最佳的服務品質。此外，先前的研究[5, 6]指出，在即時系
1
工作(tasks)滿足FMC時仍然為最小的。若工作的optional portions 儘量被替代(substituted) 則
總體的 shedulability便可提升，因為optional portions 儘量被替代表示mandatory portions儘
量被提早執行；換言之，接下來即將到達的新工作能被排入reservation list 的可能性會大
增，而且此可能性與參數k的值相關，越大的k可使得optional portions 被替代的機會越增
加，也就是 schedulability更好(當然需要較多的檢查時間，這可由評估器進行衡量)。因此，
k-tasks-look-ahead substitutable check的最重要的兩個特性：一是仍然維持排程結果的總誤差
最小化(minimized total error under FMC)，二是提高了可排程性(schedulability)。線上排程器
可採用不同的演算法來達到不同的排程效果；除了我們所提的三個演算法(MOS, MOP, and
MOF)之外，早期之演算法如 NORA, EDF(Earliest Deadline First), 以及MF(Mandatory First)
等，也可被QSM之線上排程器使用，然後藉由一參數omax(用以限制每個工作的optional
portion 其最大之可被執行量)來調整schedulability。但是必須強調的是:我們所提的三個演算
法是藉由參數k 來調整schedulability，而且(不論k 值的大小)在滿足FMC的情形下是可將總
誤差最小化的。(在文獻[5]中NORA已被證明在滿足FMC的情形下可將總誤差最小化，因為
我們所提的三個演算法改良自NORA，且產生之誤差皆小於或等於NORA所產生的，故在滿
足FMC的情形下亦可將總誤差最小化)。
3. 對於評估器(evaluator)：在圖3中，評估器負責對調節器及線上排程器所產生之結果進
行評估，例如評估下列參數:
i. task rejection rate(Rr): 進入線上排程器但無法被排入之比例
ii. task suspend/discard rate(Rsd):工作被調節器suspend/discard之比例
iii. idle rate(Ri):沒工作可執行的時間與有工作可執行的時間之比例
iv. slack time(ts):在 reservation list 中未被保留給mandatory portions 之時間總合
因此，評估器可根據評估之結果設定參數列α 及β並藉以分別對調節器及線上排程器進行
粗調及微調。
六、結果與討論
根據多次實驗的結果得知，由於on-line tasks的行為差異(arrival behavior)可能很大，使得
QSM中，調節器之參數設定的難度大為增加。接著利用[10]中’faster machines’(ie. Power 
M1 O1
M2 O2
Mn On
Arrival tasks
On-line
Scheduler
Evaluation
Process
Coarse adjustment (α)
Output
schedule
Fine adjustment (β)
T1
T2
Tn
Processing
Resources
圖 2: Modified QSM.
3
July 2003.
[14] H. Kobayashi , K. Katoh , N. Yamasaki and Y. Anzai, “A Real-Time Network Manager
for Distributed Imprecise Computation”, IFAC Conference on New Technologies for Computer
Control, pp. 59-64, Nov 2001.
[15] J. Hansson, M. Thuresson, and S. H. Son, “Imprecise Task Scheduling and Overload
Management using OR-ULD,”International Conference on Real-Time Computing Systems
and Applications, Cheju Island, Korea, December 2000.
[16] H. Aydin, R. Melhem and D. Mosse, “Optimal Scheduling of Imprecise Computation
Tasks in the Presence of Multiple Faults,”International Conference on Real-Time Computing
Systems and Applications (RTCSA'00), S. Korea, December 2000.
[17] H. Kobayashi and N. Yamasaki, “RT-Frontier: A Real-Time Operating System for
Practical Imprecise Computation”, 10th IEEE Real-Time and Embedded Technology and
Applications Symposium (RTAS'04), pp. 255-264, May 2004.
[18] Takashi Oka, Shinji Inoue, and Yoshiaki Kakuda, “An adaptive automobile control system
using scheduling by imprecise computation and multiagent-based traffic information
exchange and its experimental evaluation”, 24th IEEE International Conference on
Distributed Computing Systems Workshops (ADSN2004), March 2004
[19] Fuminori Nakanishi, Shinnya Hiraike, Shinji Inoue, Yoshiaki Kakuda and Kenji Toda, “A
flexible scheduling for automobile control using imprecise computation and its fundamental
evaluation”, 6th IEEE International Conference on Engineering of Complex Computer
Systems (ICECCS2000) pp.210-217, Sept. 2000.
[20] M. Amirijoo, J. Hansson, and S. H. Son, “Algorithms for Managing QoS for Real-Time
Data Services using Imprecise Computation,”International Conference on Real-Time/Embedded
Computing Systems and Applications (RTCSA'03), Tainan, Taiwan, Feb. 2003
[21] Wan-Chen Lu, Jia-Ming Chen, Wei-Kuan Shih, and Ming-Chung Tang, "Online Scheduling
for Imprecise Computations with Deferred Optional Tasks,” 10th Real-time and Embedded
Computing Systems and Applications Conference (RTCSA '04), Gothenburg, Sweden,
August, 2004.
八、計畫成果自評
參與本計畫的人員，已由理論探討和實際的模擬實驗中學習設計功率可調式處理器中即時
排程演算法的經驗，進而對即時系統的相關排程問題有所瞭解，日後就業之後，將能夠為
我國的資訊工業貢獻一份力量。本計劃的相關研究成果也已經整理並將投稿至 The
Real-time and Embedded Computing Systems and Applications Conference (RTCSA).
5
