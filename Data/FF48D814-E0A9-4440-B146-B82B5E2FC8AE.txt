 2
After fast retransmit, instead of entering the Slow Start phase, congestion avoidance is 
performed. Thus, the connection can recover lost packets more effectively and avoid 
unnecessary slow down at the sender. 
It has been shown that, in a wireless mesh network, the throughput performance of a 
TCP connection becomes severely degraded with increases in the number of hops it has to 
traverse [2]. Fig. 1 shows the congestion window dynamics of a group of persistent TCP 
connections, each traversing a different number of wireless hops, when sharing a bottleneck 
link, in a six-hop IEEE 802.11b wireless chain network (see Fig. 2) using QualNet [3]. The 
TCP mechanisms enable the shorter-hop flows 5 and 6 to remain steady at the maximum 
window size and monopolize most of the bandwidth on the shared link. In contrast, the 
longer-hop flows 1, 2, and 3 encounter more contention and interference problems along the 
paths, which results in longer round trip times (RTTs) and severe packet loss. The AIMD 
algorithm allows shorter-hop flows to grab the available bandwidth on a shared link more 
aggressively, thereby causing bandwidth starvation of the longer-hop flows. The differences 
in the RTTs of these flows are further enlarged. Consequently, the longer-hop flows remain in 
the Slow Start phase most of the time and therefore perform poorly. The differences in the 
RTTs of these flows are further enlarged. The simulation results clearly show the 
performance disadvantage of long-hop flows when contending for bandwidth with short-hop 
flows in a multi-hop wireless environment. We adopt the fairness index in [4] to measure the 
throughput performance between TCP flows that share a wireless link, but traverse different 
numbers of hops: 
∑
∑
∗=
i i
i i
Xn
X
2
2
)(
)(ϕ   (1) 
where Xi is the throughput achieved by flow i and n is number of flows considered. The 
fairness index of the simulation is 0.352.  
flow 5 and 6
flow 3
flow 4
flow 1 and 2
 
Figure 1.  The TCP congestion window dynamics of six long-lived flows in a wireless chain 
network The network topology and TCP flows 
 
 4
the number of flows, rather than the amount of data, because we want each directional 
wireless link to have a sufficient number of time slots to deliver its data and ACK flows 
passing through it in a multi-hop wireless environment. The TCP mechanisms of each flow 
adapt to the bandwidth assignment and share it in the same way as in a wired network. As a 
result, we can substantially improve the throughput of individual connection and the overall 
network performance. In addition, as each flow’s RTT is carefully controlled in a frame, the 
design greatly reduces the RTT latency of long-hop flows, and minimizes the negative effect 
of multi-hop wireless transmission on TCP. The simulation results presented in the Section 5 
show that the design improves the performance of TCP New Reno by up to 10% and the 
fairness index by up to 99%. 
Third, the proposed scheduling scheme combined with the link-layer retransmission 
method can effectively hide the local transmission errors from end-to-end TCP congestion 
control mechanisms. The resulting scheme performs as effectively in mesh networks as it 
does over the wired Internet. 
The remainder of the paper is organized as follows. In Section II, we review related 
work on TCP performance improvement in wireless networks. In Section III, we describe the 
proposed TCP-sleek spatial TDMA scheduling scheme in detail, i.e., the k=1 model and the 
weighted non-conflicting channel access scheduling algorithm. Section IV describes the 
link-layer retransmission technique used to recover lost packets due to transmission errors on 
a wireless link. Section V contains a performance evaluation of the proposed scheme and a 
comparison with existing schemes. Then, in Section VI, we summarize our findings. 
2 Related Work 
The majority of early works on wireless TCP focused on how to improve TCP 
performance in error-prone wireless networks. The objective was to distinguish between 
packet loss in wired and wireless networks. The proposed solutions can be divided into three 
categories: 1) end-to-end protocols, 2) split-connection protocols, and 3) link-layer protocols. 
In end-to-end approaches, the TCP sender handles packet loss by using (i) selective 
acknowledgement (SACK) [8], which lets the sender recover multiple packets in a window 
before timeout; or (ii) Explicit Loss Notification (ELN) [9], which allows the sender to 
determine whether distinguish between packet loss is due to congestion and or corruption. In 
split-connection approaches [10][11], a separate reliable communication protocol is 
implemented between the base station and the destination host using techniques like negative 
and selective acknowledgments. These approaches do not preserve TCP’s end-to-end 
semantics. The third category, link-layer approaches, attempt to hide link-level packet loss 
from the sender by using local retransmission and perhaps forward error correction (FEC) 
over the wireless links. Local retransmission can be either TCP-unaware or TCP-aware. The 
former relies on the link-layer protocol to buffer and retransmit packets [12]錯誤! 找不到參
照來源。. The latter is exemplified by the Snoop protocol [14], in which a snoop agent 
suppresses duplicate acknowledgments of lost TCP segments and retransmits them locally to 
 6
1000-byte data packets and a 100 kbps reverse channel carrying 40-byte ACKs, assuming 
d=1, k’s value will be 4. In other words, if there is more than one ACK for every four data 
packets, a slower reverse channel for ACKs will become saturated before the forward (data) 
channel does. As a result, the sender would clock out data at a slower rate thereby slowing 
down the growth of the congestion window. This, in turn, would reduce the throughput of the 
TCP data flow. In addition, the corresponding buffer of the reverse link will quickly fill up 
with ACK packets and a buffer overflow may cause serious ACK drops. TCP behaves 
normally when k is less than or equal to one. For k<1, TCP ACK flow is allocated more 
bandwidth than it needs;, thus, the bandwidth is not fully utilized. To summarize,  
z k > 1: fast data, but slow ACK; 
z k < 1: slow data and slow ACK; 
z k = 1 (the best allocation) 
We apply the k=1 requirement for scheduling and time slot allocation to each directional 
wireless link in order to achieve the sleek flow of data and ACK packets on a TCP 
connection. The rationale is that k=1 enables the TCP window mechanisms to effectively 
probe and exploit available bandwidth effectively, since it is designed to accomplish maximal 
throughput for each TCP connection. 
B. Considering the Number and Type of TCP Flows in Channel Access Scheduling 
and Time Slot Assignment 
To construct a sleek delivery environment for TCP, we also consider the number and 
type of the TCP flows on each directional wireless link during channel access scheduling and 
time slot assignment.  Assume that an N-hop wireless chain network is a directed graph 
),( EVG = , in which each node has one radio interface with identical settings. There are N 
persistent TCP NewReno connections, where the ith TCP flow if   starts from the ith sending 
node and ends at the (N+1)th receiving node, as shown in Fig. 2. The size of the data and 
ACK packets size on each TCP flow are identical. Let the transmission and interference 
ranges be one hop and two hops away from a node, respectively. Then, the weighted 
contention graph )','(' EVG =  of G is constructed as follows. Each vertex corresponds to a 
directional wireless link, i.e., a sender-receiver pair in G and is associated with a weight, 
)'(vw , which represents the TCP flow demand at the vertex. An edge is added between two 
vertices in 'G  if their transmissions would interfere with each other in G.   
To realize the k=1 goal, each directional wireless link should have a sufficient number 
of time slots to meet the bandwidth requirements for the TCP data and ACK flows passing 
through it. According to (2), assuming d=1, the bandwidth requirement ratio of the data and 
ACK packets of a TCP connection is equal to their transmission time ratio; 
 
 8
/* Algorithm: construct non-conflicting scheduling groups of directional 
wireless links */ 
V’ = the set of vertices of weighted contention graph G’ 
g = 0; /* initial group number index */ 
while V’ is not empty { 
    select the vertex with the largest weight v’ from V’; 
    g++; Sg = Sg + {v’};  V’ = V’\{v’}; 
    U’ = V’; 
    while U’ is not empty { //perform “piggybacking” 
        if vertex u’ with the largest weight in U’ 
         does not conflict with any vertex in Sg  
          Sg = Sg + {u’}; V’ = V’\{u’};  
       U’ = U’\{u’}; 
     } 
} 
Figure 3.  The algorithm for partitioning weighted directional wireless links into 
non-conflicting scheduling groups  
4 Link Layer Retransmission 
Spatial TDMA scheduling eliminates the performance degradation caused by to the 
channel access contention and interference problems. However, wireless networks are 
error-prone. In this work, we employ a link-layer retransmission scheme to recover packets 
lost due to a transmission bit error on a wireless link. A link-layer acknowledgement is sent 
after each transmission of TCP data or an ACK packet. A lost packet is retransmitted until a 
link-layer acknowledgement is received or the retry attempts exceed the maximum limit, 
which is set to eight in our simulations. 
5 Performance Evaluation 
We now evaluate the performance of the proposed TCP-sleek spatial TDMA scheduling 
scheme via simulations using QualNet. Both long-lived and short-lived TCP flows are 
considered. The simulation environment is a six-hop wireless network, as shown in Fig. 
2.  For long-lived TCP flows (e.g., file transfers), a TCP connection is initiated at each 
wireless router and ends at the rightmost node. For short-lived TCP flows (e.g., web 
browsing), we consider data transfer with a maximum of nine segments, i.e., 13.5 KB, for a 
maximum transfer unit (MTU) of 1.5 KB [25]. Multiple TCP flows are generated 
continuously and traverse different numbers of hops. The throughput performance metric 
used for short-lived flows is the number of successfully completed TCP connections per 
second.  
A. TCP-sleek Spatial TDMA Scheduling 
We compare the proposed TCP-sleek spatial TDMA scheduling scheme with the k=1 
only spatial TDMA scheduling scheme and the CSMA/CA-based channel access scheme. In 
the k=1 only spatial TDMA scheduling scheme, sender-receiver pairs are served in a 
round-robin fashion, so one packet transmission per access is allocated to each flow passing 
through the link. We summarize the overall performance comparisons in Table 1. The results 
show that the proposed TCP-sleek scheme outperforms the other two schemes. The k=1 
 10
a consequence. This explains the significant performance differences between TCP flows 
traversing different numbers of hops in a mesh network. 
(a) Throughput
(b) Sequence Number for p=0.05  
Figure 5.  The throughput performances and congestion windows for long-lived TCP flows 
with different packet loss rates, p=0.05 and p=0 
Because transmission of link-layer acknowledgements consumes bandwidth, the 
throughput performances shown in Fig. 6 are normalized with respect to the scheme that does 
not use link-layer retransmission. Fig. 6(a) shows that the throughput unfairness between 
long- and short-hop TCP flows is reduced substantially. The link-layer retransmission 
successfully hides the negative effect of local packet loss from long-hop TCP flows. Fig. 6(b) 
illustrates the packet transmission plots of a six-hop TCP flow with and without link layer 
retransmission. 
(a) Throughput
(b) Sequence Number for Six-hop Flow  
Figure 6.  The performances of long-lived TCP flows with and without link-layer 
retransmission for p=0.05 
 
 12
References 
[1] ”TCP Slow Start, Congestion Avoidance, Fast Retransmit,” RFC 2001  
[2] L.-P. Tung, T.-C. Cho, Y. S. Sun, M. C. Chen, and W. Shih, “TCP throughput 
enhancement over wireless mesh networks,” IEEE Communications Magazine, vol. 
45, no. 11, Nov. 2007, pp. 64-70. 
[3] Scalable Networks Inc., “The QualNet 4.0 simulator,” 
http://www.scalable-networks.com. 
[4] D. Chiu and R. Jain, “Analysis of the increase and decrease algorithms for congestion 
avoidance in computer networks,” Journal of Computer Networks and ISDN System, 
vol. 17, no. 1, June 1989, pp. 1-14. 
[5] T. R. Henderson, E. Sahouria, S. McCanne, and R. H. Katz, “On improving fairness 
of TCP congestion avoidance,” Proc. IEEE GLOBECOM 1998, Sydney, Australia, 
Nov. 1998, pp. 539–544,. 
[6] J. Shi, O. Gurewitz, V. Mancuso, J. Camp, and E. W. Knightly, “Measurement and 
modeling of the origins of starvation in congestion controlled mesh networks,” Proc. 
IEEE INFOCOM 2008, Phoenix, AZ, USA, April 2008, pp. 1633-1641. 
[7] A. Raniwala, P. De, S. Sharma, R. Krishnan, T. Chiueh, “End-to-end flow fairness 
over IEEE 802.11-based wireless mesh networks,” Proc. IEEE INFOCOM 2007, 
May 2007, pp. 2361-2365. 
[8] “TCP Selective ACKnowledgement Options,” RFC 2018. 
[9] H. Balakrishnan and R. H. Katz, “Explicit loss notification and wireless web 
performance,” Proc. IEEE Globecom 1998, Sydney, Australia, Nov. 1998. 
[10] A. Bakre and B. R. Badrinath, “I-TCP: indirect TCP for mobile hosts,” Proc. ICDCS 
1995, Vancouver, BC, May 1995, pp. 136-143. 
[11] Z. J. Haas and P. Agrawal, “Mobile-TCP: an asymmetric transport protocol design 
for mobile systems,” Proc. ICC 1997, Montreal, Que., Canada, pp. 1054-1058. 
[12] N. H. Vaidya, M. Mehta, C. Perkins, and G. Montenegro, “Delayed duplicate 
acknowledgements: a TCP-unaware approach to improve performance of TCP over 
wireless,” Technical Report 99-003, Computer Science Department, Texas A&M 
University, Feb. 1999. 
[13] C. Parsa and J. J. Garcia-Luna-Aceves, “TULIP: a link-level protocol for improving 
TCP over wireless links,” Proc. IEEE WCNC 1999, New Orleans, Louisiana, USA, 
Sept. 1999, pp. 1253-1257. 
[14] H. Balakrishnan, S. Seshan, and R. H. Katz, “Improving reliable transport and 
handoff performance in cellular wireless networks,” ACM/Baltzer Wireless Networks, 
vol. 1, no. 4, Dec. 1995, pp. 469-481. 
[15] R. de Oliveira and T. Braun, “A dynamic adaptive acknowledgment strategy for TCP 
over multihop wireless networks,” Proc. IEEE INFOCOM 2005, Miami, March 2005, 
pp. 1863-1874. 
[16] C. de M. Cordeiro, S. R. Das, and D. P. Agrawal, “COPAS: dynamic 
