ordinary developer to use these frameworks. To 
overcome such difficulty, there have been several 
generating systems released in recent years aiming to 
construct an editing environment on a platform without 
direct coding on the associated framework. Instead, 
given the definition of a target language, such 
systems can generate an editing environment for the 
target language on the associated platform. Compared 
with direct coding,  this approach enable the 
developer to to generate an editing environment more 
easily. Unfortunately, the generated systems, even 
though some of which are excellent, are still inferior 
to most high-quality editors used for popular 
programming languages.  
   The long-term objective of this project is to 
enable the generation of high-quality language 
development environments by augmenting selected 
generating systems with additional capability to 
generate other longing features for the generated 
system. In such generated systems we will have not 
only high-quality editing utilities as found merely in 
top-level editors for most popular programming 
languages but also functionality for executing, 
testing, debugging, compiling and deploying edited 
programs/documents. Completed during this year are 
several tasks including the exploration of how to add 
to the selected generated systems knowledge intensive 
editing aids so as to enable users to get helpful 
messages and suggestions from tremendous information 
sources. Moreover, in order to have testing and 
debugging capability in the generated system, we 
enhance the language definition part of the selected 
generating system to allow the description of 
execution and/or debugging semantics for target 
languages so that the system can generate as well a 
corresponding executor and/or debugger. Finally, as a 
quick way to generate wizard utility for the generated 
systems, we develop also a wizard generating system by 
following OMG‘s MDA approach.  
 
 
改善原有架構之外，更大大的增加原有的功能，提供的功能有: 程式碼摺疊、美化、錯誤
標記、範本精靈，程式碼自動補全以及變數宣告與引用之自動連結等。 
  本計畫是延續我們這幾年來，在相關議題已經擁有的經驗，設法增強既有工具的能力，
使其生成之編輯器具有高程度的知識密集編輯功能輔助。我們希望使用者在編輯時僅示簡
單動作，系統即可從使用者編輯所需的龐大相關資訊來源中，找出精確、即時，以及與後
續動作相關的輔助訊息與建議，從而幫助使用者快速輸入正確內容。除此外，我們也為現
有工具擴增其表達與生成範疇，使其不僅可以表達一般編輯器所需之標的語言的詞彙與語
法資訊，還可進一步的讓客戶提供標的語言的執行與偵錯語意，我們的工具可據此為標的
語言產生整合式的直譯與偵錯程式，如此則可方便客戶對編輯文件或程式，進行測試與偵
錯。最後為加快導引精靈程式之生成，我們也為自己開發建立了一個多平台導引精靈程式
開發系統。用戶只需依照系統要求，提供自己所需之導引精靈的高階描述，系統即能為用
戶產生在三個不同平台的導引精靈實做。 
二、研究目的 
    我們希望能針對語言編輯環境不易開發的現狀，提出一些可加快語言編輯環境開發的
工具與方法。執行方式則是希望能增強既有生成系統，使其產出由基本編輯環境提升為高
品質的整合式語言開發環境。在此環境中，不僅具有高品質的編輯功能，更具有整合式的
程式/文件執行、測試、偵錯、編譯與佈建等功能。在具體目標上，我們集中在如何實現知
識密集式功能輔助，讓使用者在編輯時僅需出示簡單動作，系統即可從背後的龐大資訊來
源中，找出與後續動作相關的輔助訊息與建議，從而幫助使用者快速輸入正確內容。另外，
為了使產出的環境具有執行與偵錯能力，我們計畫擴增既有系統的語言規格定義範疇，使
開發者得以加入標的語言之執行與偵錯語意描述，從而使得系統得以產生可在平台上執行
的直譯器與偵錯程式。 
三、文獻探討 
本計畫的目的是希望使開發者能快速為各式領域專屬語言建構整合於工具平台的高品質
的語言編輯與執行環境。我們採用的工具平台是 Eclipse;我們達成快速建構語言編輯與
執行環境的辦法是採用模型驅動的方式，由開發者輸入極高階的標的語言定義，再經由模
型轉換與程式碼合成等過程，自動合成標的語言的編輯與執行環境。 
   早期的多功能編輯器實做通常是直接呼叫作業或視窗視窗系統下的 API。這方面的基
本做法可參見 Jame Brown[34]與 Nikolai Weibull[33]。由於這些傳統實做實在過於低階，也
缺乏適當層次的框架與預先實做，因而需要耗費龐大的的時間與人力，實做軟體也難以重
複使用。其後逐漸的有支援編輯器實做的 GUI 組件問世，例如 Java swing 的
javax.swing.text、.NET 也提供功能更強的 TextBox 或 RichTextBox 均可讓開發者得以
較以往便利的產生編輯器，然而若目標是更高功能編輯環境，則上述框架仍然顯得簡陋甚
或全無支援。 
好在自2001年後，隨著可擴充式的整合式軟體工具開發平台如Eclipse[09,10] 09,10]
與 NetBeans[25]的發佈而讓編輯環境開發者有了更好的選擇。這些平台不但提供給開發
者功能更強的 GUI介面以及編輯軟體框架支援，使開發者可以更快速建造高功能的編輯環
境，產出的編輯程式還可以充分的和平台其它工具完全連結整合，而不像以往只是一個孤
立的編輯器。而本計畫的所有軟體也均建構在 ECLIPSE 平台之上。 
     Eclipse平台不但是一個整合式軟體開發環境(IDE)，更是一個開放式的軟體工具整合
平台，其最大特徵就是其無限的可擴充性。Eclipse的外掛程式(plug-ins)軟體架構[35,10]
直譯器與偵錯器。我們產生的直譯與偵錯程式，是架構在Eclipse的啟動與偵錯框架之上，
因此可以充分的使用 Eclipse 的啟動與框架的各種好處。有關 Eclipse的啟動與框架相關
資訊，除了參考 Eclipse 線上文件之外，最有效的介紹是來自 Eclipse Conference 的
tutorials.          
四、研究方法 
   本計畫所要研究的是如何使開發者能快速為各式領域專屬語言建構整合於 Eclipse 工
具平台的高品質語言編輯與執行環境。我們達成快速建構語言編輯與執行環境的辦法是避
免直接在 Eclipse編輯與偵錯框架上，進行編程；相對的我們採用模型驅動的方式，由開
發者輸入與實做少有關連的極高階標的語言定義(其中包含具體語法，抽像語法，執行與
偵錯語意描述，以及其他與各式編輯功能相關的的敘述等)，再經由模型轉換與程式碼合
成等過程，自動合成標的語言的編輯與執行環境。 
    在具體實現上，我們原本在計畫書裡是規劃繼續增強我們既有的自建工具 EGOE 
II[21,30]，使其產生的系統具有更多高功能的編輯與執行能力。然而由於此領域的高度
競爭與迅速成長[44]，我們發現原先規劃的許多待達成功能，事實上已經可以利用這些工
具例如 Xtext[17]的最新版本產生。為了快速達成目標，避免無謂重複，因此我們決定先
擱置 EGOE II的功能增強，相反的，我們改以 Xtext 及其相關工具群為基礎，建造可以和
這些工具整合的補強組件，透過 Xtext和我們的補件，可以使得產生的系統不僅具有規畫
中的其他高功能編輯能力,更也可以具備目前 Xtext 尚不能產生的語言執行與偵錯能力。 
   Xtext是 Eclipse Modeling 計畫群中的一個子計畫，其前身是生 OAW，目前則是屬於
TMF(Textual Modeling framework)子計畫群。使用 Xtext 時，我們需先在 Eclipse 上產
生一個 Xtext專案，接著只需開檔輸入標的語言的具體語法，並說明如何連結或同時產生
對應的抽像語法的文法描述，然後啟動系統事先為專案產生的工作流程檔，即能由此自動
為開發者產生極高功能的標的語言編輯環境實做。此實做會在 Eclipse專案區裡產生三個
plug-in 專案，這些 plug-ins 一旦安裝佈建，即是可在 Eclipse 平台上操作的高功能的
標的語言編輯環境。 
   Xtext產生的編輯程式除了傳統編輯器的基本功能之外，其他可實現的功能還包括:語
法醒目提示、個人喜好設定、超連結、美化器(Formatter)、內容即時輸入輔助(包含詞彙
補全、範本提示、以及內外部可用功能建議等)、不同層次的錯誤或警告訊息之顯示與更
正建議、文件大綱顯示、跨語言與跨檔案編輯時期程式或文件內容連結，以及各式程式靜
態檢驗等。除此之外，Xtext 還能結合 EMF 為抽象語法產生對等之 Ecore 模型，再經由
EMF工具連結即可產生模型 API可供程式師叫用，另外，Xtext也提供 EMF Resouce 的實
做 XTextResource，允許將符合具體語法的文件載入為模型物件或將符合抽像語法的模型
物件序列化為具體語法格式的資料而永續存放。 
   一套實用的編輯環境，必須實做許許多多的編輯功能，這些功能如何整合一起且不衝
突，是軟體架構設計的一大考驗。 Xtext 在此部分是使用 Goole Guice 提供的 API，採
用所謂的分離關注(Separation of Concerns)與相依注入(Dependency Injection) 技術。
要言之，其做法是將功能服務物件的獲取與功能服務物件的叫用分離，讓需要叫用功能服
務之程式，只負責宣告其所需之功能服務種類，即可假設這些物件已經備妥可供叫用，但
卻並不負責產生或抓取任何實做物件。而真正的物件生成與連結動作是當系統啟動之時，
會先透過組態規劃，設定每一功能服務之實做，接著以此產生注入器。有了注入器之後，
所有新產生的物件，使用前均需經注入器的檢視而將相依功能注入，因而每一物件程式實
行任務前均可得到所需之服務。在此架構下，我們實做其他編輯功能服務的方式，即變得
兩個視圖即能收到通知，而其任務則是即時的找出對應的程式碼與說明文件，並將之呈現
於各自的視圖區內。這兩種視圖使客戶得以不用離開編輯對像，即能瀏覽周遭程式碼的定
義與說明，因而能增進程式編輯效率。我們在此部分的任務，就是使這兩種視圖也能出現
在 xText 產生的語言環境中。 SourceView 的實做較為直接，只需將自己登錄為
SelectionListener,收到編輯器傳來的選擇改變事件之後，找出對應的內或外部程式片段，
再將之顯示於自己的視圖區即可。DocView 的實做，則還牽涉到如何定義標的語言元素的
說明區塊，以及如何由語言元素抓取對應的說明區塊的方法。我們目前的做法是仿效 JAVA
的方式，以特別的註解標示說明區塊，而 DocView 則從標的元素的前面抓取最近的說明區
塊，做為該元素的說明。未來我們還計畫增強 Xtext 功能，使其具有類似 JDK 的 javadoc
功能，能將標的語言文件內嵌的說明區塊資訊萃取出來，成為獨立之說明文件。屆時我們
的 DocView將也能從這些說明文件來源及時找出對應的說明資料。 
   Xtext產生的系統只能稱之為編輯環境而非語言環境，因為目前產生的系統並無法對編
輯的文件或程式進行執行與偵錯。主要的原因是目前的 Xtext 尚能讓開發者提供標的語言
的執行或偵錯語意描述，因此也無法生成所需的直譯器與偵錯器。為了彌補 Xtext 現今的
不足，我們因此提供了這一方面的補件。在此補件架構之下，開發人員可以額外的為標的
語言定義執行與偵錯語意描述，系統即能依照這些規則，產生標的語言對應的直譯器與偵
錯器。此系統產生的執行與偵錯環境具有以下三項特性: 1.採用自然語義來描述標的語言
之執行與偵錯語義而非直接實做，因而能夠讓使用者專注在更抽象的層面上來描述一個語
言如何在機器上運作，而不用去顧慮其他實作的細節。而相較於 small-step 語義而言，
自然語義隱藏了更多執行細節，使用者能夠比較容易完成語言的語義定義。2.抽象化偵錯
定義：除了執行語義以外，本機制也將偵錯定義抽象化，使用者不用一一實作每個偵錯元
件或是功能，只要宣告語言在執行時的程序結構、變數與暫停點，即可自動生成基本的偵
錯功能與變數顯示。3.提供人性化偵錯環境：本機制生成的直譯器與偵錯器均整合至 
Eclipse 平台上，提供一個圖形化且友善的介面輔助程式開發者撰寫程式。而進行偵錯時，
也可利用 Eclipse 的偵錯介面來逐步追蹤程式的運作狀況。 
參考文獻: 
[01] Stephen J. Mellor, Kendall Scott, Axel Uhl, Dirk Weise, MDA Distilled: Principles of 
Model-Driven Architecture, Addison Wesley, 2004.   
[02] Anneke Kleppe, Jos Warmer, Wim Bast, MDA Explained: The Model Driven Architecture: 
Practice and Promise. Addison Wesley, 2003. 
[03] Frankel, David, Model driven architecture : applying MDA to enterprise computing, Wiley, 2003. 
[04] Daniel J. Duffy, Domain Architectures: Models and Architectures for UML Applications, Wiley, 
2004. 
[05] Jim D'Anjou, Scott Fairbrother, et al. The Java Developer's Guide to Eclipse, 2nd Edition, 
Addison Wesley, October 2004. 
[06] Dave Steinberg, Frank Budinsky, et al. Eclipse Modeling Framework, 2nd Edition, Addison 
Wesley, 2009. 
[07] Object Management Group, MDA Guide V1.0.1. http://www.omg.org/cgi-bin/ 
doc?omg/03-06-01 
[08] Object Management Group, MDA web site. http://www.omg.org/mda 
[09] Eclipse web site. http://www.eclipse.org. 
[10] Eclipse platform project. http://wwwe.clipse.org/ecipse/ 
[11] Eclipse Java development Kit. http://wwwe.clipse.org/jdt/ 
[12] Eclipse plug-in development environment. http://wwwe.clipse.org/pde/ 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/21
國科會補助計畫
計畫名稱: 現代化知識密集式編輯環境的生成系統之研究與設計
計畫主持人: 陳正佳
計畫編號: 99-2221-E-004-004- 學門領域: 程式語言與軟體工程
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
