1 研究計畫之背景及目的 
 Artificial reverberators have been used to add reverberation to studio recording in the music 
and film industry, or to modify the acoustic of a listening room. There have been basically two 
approaches to design reverberators. The first approach is based on the IIR (Infinite Impulse 
Response)-recursive networks such as comb filters, all-pass filters. A variety of algorithms 
[9][10][11] have been proposed since the work of Schroeder [6][7]. The IIR-based network has the 
merit in low complexity, but is often difficult to eliminate unnatural resonances. On the other hand, 
the FIR (Finite Impulse Response) based reverberators, which convolve the input sequence with an 
impulse response modeling the concert hall, will be free from the unnatural resonances. However, 
the high computational complexity due to the long FIR length leads to another concern in real-time 
applications. For the two seconds of impulse response, the length will be 88,200 samples in terms 
of 44,100Hz sampling rate. Using direct convolution to implement the reverberation indicates the 
88,200 multiplications for each sample, or 7.8G multiplications per second for stereo audio. 
 A lots of researches [1][4][17] have been developed to reduce the complexity of FIR-based 
reverberators. Among them, the FFT-based methods can significantly reduce the complexity. This 
project proposes a new idea in reducing complexity by combining the perceptual phenomenon 
with the FFT based method called the fast perceptual convolution. Besides, for having an effective 
quality measurement on the fast perceptual convolution, we examine the quality through an 
objective criterion which compares the perceptual difference between the tracks processed through 
the non-reduced FIR and the perceptually-reduced FIR. The result has shown a 30% improvement 
 Figure 1.1: Reverberation. 
 The effect of reverberation is a multiplicity echoes placed very close that are not perceptually 
separate from one another. Figure 1.2 shows the impulse response of the Foellinger Great Hall. 
From Figure 1.2, we can see that the peaks for later part of the impulse response are very close, 
only few peaks in the earlier part are clearly stood out of the response. By this characteristic, the 
reverberation can be separated into two parts. As shown in Figure 1.3, those peaks in earlier part 
were called earlier reflections, and the later part is called late reverberation. 
 
Figure 1.2: Impulse response of Foellinger Great Hall (Sonic Foundry) 
This is almost impossible for processors today. Section 1.3 will introduce some techniques to 
reduce the complexity of convolution for very long impulse response. 
 The IIR-based approach suitably combines various filter modules such as comb filters, 
all-pass filters, and low-pass filters to simulate the reverberation effect.  Due to the nature of the 
recursive filters, the complexity is in general lower than the FIR-based approach. However, the 
quality needs some detail calibration and also it will be difficult to model the existing environment 
directly. Section 1.4 introduces the IIR filters and some IIR-based reverberators made by those 
filters. 
1.3 FIR-based Approach 
 Physical approach can be implemented by convolution methods. This section will introduce 
the operation of convolution and the block convolution method for FFT convolution to reduce its 
complexity. 
1.3.1 Direct Convolution 
 The convolution between input signal x[n] and impulse response h[n] of length L is expressed 
as 
 ∑−
=
−=∗=
1
0
][][][][][
L
k
khknxnhnxny  (1) 
The direct implementation of (1) is shown in Figure 1.4. This implementation leads to L 
multiplications per output sample, which is too complicated for reverberation. A much more 
efficient method is to compute convolution through the block convolution, in which the signal and 
impulse response is segmented into sections of length N. Convolution of each block convolution is 
then implemented through the Fast Fourier Transform (FFT). 
3 blocks. For each small block xr[n], we do convolution to produce the corresponding output yr[n]. 
Then, we add those output blocks to produce the result signal y[n]. This result is equivalent with 
the result produced by direct convolution. 
 
Figure 1.6: Overlap-and-add example (input blocks xr[n], output blocks 
yr[n], and the final output result y[n]) 
 To extend the overlap-and-add approach to segmented impulse response, let the input signals 
x[n] and impulse response h[n] are segmented as a sum of shifted finite-length segments of length 
N; i.e.,   
input block. The first L−1 samples of each output block are discarded. If linear convolution is used, 
the tailing L−1 samples of each output block are also discarded. Finally, the output blocks are 
concatenated to form the result output. 
 Consider the example used in overlap-and-add method. As shown in Figure 1.7, the input 
blocks xr[n] were selected in length of 5 including previous 3−1=2 samples. Then perform 5-point 
circular convolution on each input block to produce the corresponding output yr[n]. Then, the first 
2 samples of each output block are discarded, and concatenated to produce the result signal y[n]. 
 
Figure 1.7: Overlap-and-save example (input blocks xr[n], output blocks 
yr[n], and the final output result y[n]) 
 To extend overlap-and-save method to segmented impulse response, we begin by changing 
the parameter r' = r + s in (7): 
 10         ],[']['][ 1 −≤≤++= − NnnyNnyny ppp  (16) 
Substituting (10) and (11) into (16) yields 
 { } 10                       ][][][
10         ,][][][][][
1
0
1
1
0
1
0
1
−≤≤∗++=
−≤≤∗+∗+=
∑
∑∑
−
=
−−−
−
=
−
−
=
−−
NnnhnxNnx
NnnhnxnhNnxny
M
s
sspsp
M
s
ssp
M
s
sspp
 
(17) 
(18) 
Let 
 1                ],[][][ 1 −≤≤−++=′ − NnNnxNnxnx ppp  (19) 
where x'p[n] is p-th overlapping block of the input signal x[n]. Then, (18) can be rewritten as 
 10                      ,][][][
1
0
−≤≤∗′= ∑−
=
− Nnnhnxny
M
s
sspp  (20) 
Form (20), each non-overlapping output block can be calculated by evaluating the convolution for 
overlapping input blocks in the corresponding time interval. 
 In overlap-and-add or overlap-and-save, the convolution of each pair of small blocks can be 
transform to DFT domain and perform multiplications on DFT domain. Since the complexity of 
specific sizes of DFT can be reduced from O(n2) to O(nlogn) by FFT algorithms. Using these 
algorithm to perform the convolution can significant reduce the complexity. The method and 
complexity of FFT is given. 
1.4 IIR-Based Approach 
 Using methods in FIR-based approach for reverberation may require massive computing 
power. Although, extremely accurate simulation is necessary for some applications (such as echo 
cancellation), such accuracy is not necessary to achieve a convincing artificial reverberation effect. 
 ][][][ mngnnh −+= δδ  (23) 
Because the impulse response length is finite, the filter is a FIR filter. From (22), we can derive the 
frequency response: 
 ωω ˆˆ 1)( jmj geeH −+=  (24) 
where ωˆ  is the normalized frequency. The magnitude response is given by 
 [ ] )ˆ(sin)ˆcos(1
)ˆsin()ˆcos(1)(
222
ˆ
ωω
ωωω
mgmg
mgjmgeH j
++=
−+=
 (25) 
Then, we can plot the magnitude response of inverse comb filter as shown in Figure 1.9. 
 
Figure 1.9: Magnitude response of inverse comb filter (m=10, g=0.7) 
 Because the inverse comb filter will only produce one echo, using this filter in reverberation 
designs, the density of echoes is not dense enough. In practical designs, we usually use the comb 
filter instead of inverse comb filter. 
1.4.2 Comb Filter 
 The comb filter is to produce echoes with feedbacks. The echoes produced will be used as the 
input to produce their echoes. Hence, this kind of filters should be IIR filters. This filter can be 
 m
m
gz
gzzH −
−
−= 1)(  (27) 
and its impulse response can be expressed as 
 ∑∞
=
−=
+−+−+−=
1
32
][
]3[]2[][][
k
k kmng
mngmngmngnh
δ
δδδ L
 (28) 
Hence, the frequency response of the comb filter can be expressed as 
 ω
ω
ω
ˆ
ˆ
ˆ
1
)( jm
jm
j
ge
geeH −
−
−=  (29) 
The magnitude response of the comb filter is shown in Figure 1.12. 
 
Figure 1.12: Magnitude response of comb filter (m=10, g=0.7) 
 The reverberation time T60 (time to decay 60dB) of comb filter is given by 
 mT
g
T
)(log20
60
10
60 −=  (30) 
where T is the sampling period. For given delay m and reverberation time T60, the attenuation gain 
g can be evaluated as 
 60
3
10 T
mT
g
−
=  (31) 
Hence, its z-transform is 
 m
m
gz
zgzH −
−
−
+−=
1
)(  (33) 
and its impulse response is expressed as 
 
∑∞
=
− −−+−=
+−−+−−+−=
+−−−+−−−+−=
1
12
22
32
][)1(][
]2[)1(][)1(][
]2[]2[][][][][
k
k kmnggng
mnggmngng
mngmngmngmnngnh
δδ
δδδ
δδδδδ
L
L
 (34) 
The frequency response of all-pass filter is given by 
 
ω
ω
ω
ω
ω
ω
ˆ
ˆ
ˆ
ˆ
ˆ
ˆ
1
1
1
)(
jm
jm
jm
jm
jm
j
ge
gee
ge
egeH
−
−
−
−
−
−=
−
+−=
 
(35) 
(36) 
From (36), we found that the magnitude of e−jmω is 1 for all ω, the magnitude of the quotient of 
complex conjugates is also 1. Therefore, the frequency response of all-pass filter is unity. Hence, 
 1)( ˆ =ωjeH  (37) 
 
Figure 1.15: Magnitude response of all-pass filter 
 From (34), as compared with (28), the impulse responses of all-pass filter and comb filter are 
 Figure 1.17: Schroeder’s reverberator 
 The delays in comb filters are chosen to be relatively primes to avoid overlapping their peaks 
in frequency response, and the attenuation gains are chosen to have the same reverberation time. 
From (31), yields 
 pg pmp any for                 
1=γ  (38) 
where 
 60
3
10 T
T−=γ  (39) 
gp and mp are the attenuation gain and delay length of the p-th comb filter, respectively. The 
cascaded all-pass filters are used to increase the echo density without modifying the frequency 
response. The reverberator provides more natural reverberation as compared to the series all-pass 
reverberator. 
 Since each comb filter needs one multiplication per input sample, and each all-pass filter 
needs two multiplications per input sample, the number of multiplications needed by Schroeder’s 
reverberator is 4×1+2×2+1=9. 
 Although, the voice produced by Schroeder’s reverberator is still far from the natural ones. 
 Figure 1.19: Absorbent comb filter used in Moorer’s reverberator 
 Since the absorbent filter needs two multiplications per sample, each absorbent comb filter 
needs three multiplications per sample. Therefore, the number of multiplications needed by 
Moorer’s reverberator is 6×3+2×1+1=21. 
 The reverberation generated by Moorer’s reverberator still sounds fluttering and metallic on 
transient inputs. Jot [9] pointed out that it is difficult to obtain a sufficient time density with a 
reasonable number of unit filters, given that the total delay length determine s the maximum 
frequency density one can obtain.  Jot tried to using general delay network as shown in Figure 
1.20 to improve the echo density with a small number of delay units. 
 
Figure 1.20: Jot’s general delay network 
 Unlike pervious reverberators, the feedback of each delay unit in general delay will feed to 
2  研究方法、進行步驟及執行進度 
2.1 Block Convolution Performed through FFT 
 From section 1.3.2, we discussed that the linear convolution of a long impulse response, we 
can separate both input signal x[n] and impulse response h[n] into blocks. The convolution each 
pair of input signal block xr[n] and impulse response block hs[n] can be implemented with the FFT 
with 2N−1 points. We adopt for complexity evaluation based on radix-2 FFT and 2N-point FFT 
instead of (2N−1)-point FFT. Let  
 
121
10
,0
],[
][ˆ −≤<−
−≤≤
⎩⎨
⎧ +=
NnN
NnrNnx
nxr , (40) 
and 
 
121
10
,0
],[
][ˆ −≤<−
−≤≤
⎩⎨
⎧ +=
NnN
NnsNnh
nhs , (41) 
Since the convolution in time domain refers to the multiplication in frequency domain, (8) can be 
written as 
 NkforkHkXkY srsr 20];[][][, <≤⋅=   (42) 
where ][, kY sr , ][kXr , and ][kH s  are the 2N-point FFT of ][, ny sr , ][ˆ nxr  and ][ˆ nhs , 
respectively. According to the above derivation, we can summarize a fast algorithm as Algorithm 1 
shown in the following. 
Step 1: Store the FFT data of the segmented impulse response, Hs[k]. 
Step 2: Execute 2N-point FFT on the segmented input signals to obtain Xr[k]. 
Algorithm 1. Let p=r+s, (7) is rewritten as 
 ∑∑∑∑ ∞
=
−
=
−
∞
=
−
=
− −∗−−=−=
sp
s
M
s
sp
sp
M
s
ssp sNnhNspnxpNnyny ][])([][][
1
0
1
0
, .  (43) 
Define  
 ][])([][][
1
0
1
0
, sNnhNspnxpNnyny s
M
s
sp
M
s
sspp −∗−−=−= ∑∑ −
=
−
−
=
−  (44) 
Hence,  
 ∑∞
=
=
sp
p nyny ][][  (45) 
The nonzero values of ][ny p  is only in the time interval [pN, pN+2N−2]. Let pNnn −=′ , we 
have 
 ]'[][
1
0
,∑−
=
−=+′
M
s
sspp nypNny  (46) 
Performing 2N-point FFT on (46) within the nonzero interval [0, 2N−1] leads to  
 120for        ][][][][
1
0
1
0
, −<≤== ∑∑ −
=
−
−
=
− NkkHkXkYkY s
M
s
sp
M
s
sspp  (47) 
The fast convolution, denoted as Algorithm 2, is summarized as follows. 
Step 1: Store the FFT data of the segmented impulse response, Hs[k]. 
Step 2: Execute 2N-FFT on the segmented input signals to obtain Xr[k]. 
Step 3: Multiply and add the two FFT data according to (47). The number of multiplications and 
additions is both M+M/N for each input sample. 
Step 4: Perform inverse FFT to have the segmented data yp[n]. 
 Figure 2.3: Comparison of Algorithm 1 and Algorithm 2 when impulse 
response length is 2 seconds (88,200 samples) 
 Figure 2.3 illustrates Algorithm 1 and Algorithm 2 in the number of real multiplications per 
sample. When the input block size is set to 4096, Algorithm 2 needs about 150 real multiplications 
to convolve a signal with 88,200 samples of impulse response. 
2.2 Block Size Analysis 
 Since the block size is the latency of the system, we will try to shorten the block size to 
reduce the latency of the system, though shortening the block size will increase the complexity of 
the system. For efficiency, we tried to increase the block size in an acceptable range to reduce the 
complexity. The acceptable latency in applications is about 150 ms, about 6K samples in terms of 
44,100 Hz sampling rate. From Figure 2.3, the number of multiplications per sample needed by 
Algorithm 2 is more than 400 when block size is set to 1024 samples. To find out the optimal 
block size, we try to find the minimum value of the complexity equation of Algorithm 2. 
 From Section 2.1, we know that the number of complex multiplications per sample is 
karaoke, the latency of reverberation may not be allowed. To solve this problem, FFT-based 
convolution methods can be modified by combining with direct convolution to remove the latency. 
Consider on Algorithm 2, to shorten the latency, we use direct convolution to calculate the 
output segment of first impulse response segment. From (17), the output segment yp[n] can be 
expressed as 
 
∑∑
∑
−
=
−
−
=
−−
−
=
∗+∗++
−+=
1
1
1
1
1
1
0
][][][][
][][][
M
s
ssp
M
s
ssp
N
k
p
nhnxnhNnx
khkpNnxny
 (52) 
For first sample of yp[n], yp[0] = y[pN], the inputs of the computation are xk[n], p − 1 ≧ k ≧p − M 
+ 1 and x[n], pN ≧ n ≧ pN − N + 1. The computation of ∑−
=
−− ∗+
1
1
1 ][][
M
s
ssp nhNnx  is completed 
while computing yp−1[n] if using overlap-and-add method. Since we already have these inputs 
when we get x[pN], we can calculate yp[0] without waiting any other input samples. So are other 
samples in yp[n]. 
 Though the implementation of (52) can remove the latency, the computation of xp−1[n]*h1[n] 
can only be calculated after we get the sample x[pN−1], the last sample of xp−1[n]. If we want the 
application to be without any latency, the computation needed to be completed in a sampling 
period. This causes the demand on the processor to become non-uniform over time. To make the 
demand on the processor to be uniform, we can make use the direct convolution to calculate the 
output of first two segments of impulse response. Thus (52) can be expressed as 
 
∑∑
∑
−
=
−
−
=
−−
−
=
∗+∗++
−+=
1
2
1
2
1
12
0
][][][][
][][][
M
s
ssp
M
s
ssp
N
k
p
nhnxnhNnx
khkpNnxny
 (53) 
After this modification, the computation of FFT convolution can be finished in an input segment 
be very small. In FFT convolution, the multiplications for those frequencies that its magnitude is 
smaller than 0dB can be removed, since the result will be ignored after IFFT. According to 
perceptual threshold, not only the multiplications for those frequencies can be removed, but also 
the multiplications for those frequencies in the higher frequency part that their magnitudes do not 
exceed the threshold can be removed. 
 
Figure 2.5: Spectrum of the impulse response recorded from St. John 
Lutheran Church 
 To implement the fast perceptual convolution, we need to decide the frequency part that can 
be removed. In Step 1 of Algorithm 1 or 2, we can get the frequency domain data of each small 
block in the impulse response. For each small block, we can calculate the magnitude of each 
frequency sample. Then, we scan from the highest frequency to find a frequency point in which its 
magnitude is equal or bigger than the perceptual threshold. In Step 3 of both algorithms, we can 
ignore the multiplications for those frequencies that are higher than the frequency point 
corresponding to each block found in Step 1. 
 Table 2.1 shows the cutoff frequency point found in each block of 4 different impulse 
responses. For those impulse responses, we can eliminate more than 50% of multiplications in 
 Figure 2.6: Spectrum of the impulse response of St. John Lutheran Church 
after applying the perceptual threshold 
2.5 Low-Delay Reverberators 
Since the FFT needs to accumulate a segment to begin the FFT computation, the FFT-based 
convolution introduced an additional algorithm delay or latency by one FFT block, that is N. In 
some real-time applications like interactive environment, the latency should be restricted. In the 
literature, there have been developed methods, such as [4][20], to shorten the latency of the filter 
by using time domain filter said low latency filter to compute the output of the first impulse 
response segment. 
To remove the latency of the FFT-based convolution filters, they can be modified by combining 
with direct convolution to remove the latency. According to [4] the length of the time-domain 
filter should be twice of the block size of the FFT-based convolution filter to make its demand on 
the processor to be uniform over time. With block size of 4096, we need to have extra 8192 
multiplications to make the application to be zero-delay. 
To reduce the complexity, there are two methods can be used. The first method is to use smaller 
block size of FFT-based convolution filter. The second is adding another FFT-based convolution 
filter with smaller block size. For the first method, the optimal block size is 512 when the filter 
length is set to 88200, and it needs about 1760 multiplications per sample. For the second method, 
the optimal block size of the smaller filter is 128, and it needs only about 700 multiplications per 
sample.  
 
Table 2.2: Comparison of fast perceptual convolution and Algorithm 2 
Time in ms 
St John 
Lutheran 40
Foellinger 
Great Hall 80
Bethel 
Church 50 
Meyerson 
Concert Hall 
Algorithm 2 89469 88027 84692 82549 
Fast perceptual 
convolution 
59566 61057 58694 57032 
Improved Ratio 33.42% 30.64% 30.70% 30.91% 
 Table 2.2 shows that the fast perceptual convolution can reduce about 30% complexity as 
compared with the Algorithm 2 in real applications. 
 
2.7 Objective and Subjective Measurement 
 The fast perceptual convolution exploits the perceptual irrelevancy to develop fast 
convolution. This chapter considers the objective measure to check the irrelevancy. The Objective 
Difference Grade (ODG) which is suggested by Recommendation ITU-R BS.1387 [5] is 
introduced to the measurement. 
2.8 Objective Difference Grade 
 The ODG is the output variable from the objective measurement method and corresponds to 
the Subjective Difference Grade (SDG, Recommendation ITU-R BS.1116) in the subjective 
domain. The method is a perceptual measurement method for audio signal processing to determine 
the perceptual difference between the two input signals, i.e. the Reference Signal (RS) and the 
Signal Under Test (SUT). The value should ideally range from 0 to -4, where the value 0 
corresponds to an imperceptible impairment and -4 to an impairment judged as very annoying. The 
result value is negative, because the SUT’s quality is assumed to be worse than RS’s. But in our 
experiment, we compare the result of fast perceptual convolution and the result of generic 
gong2.wav -0.03 -0.03 -0.03 -0.03 
harp.wav -0.01 -0.01 -0.01 -0.01 
hat1.wav 0 -0.01 -0.01 0 
heart.wav 0 0 0 0 
HEART1.wav 0 0 0 0 
Hero.wav 0.01 0 0 0 
Hero2.wav 0 0 0 0 
hihat.wav -0.01 -0.01 -0.07 -0.1 
iron.wav -0.01 -0.01 -0.01 -0.01 
KMFDM-Dogma.wav 0 -0.01 -0.01 0 
land.wav -0.01 -0.01 -0.01 -0.01 
leftright.wav -0.01 -0.01 -0.01 -0.01 
main_theme.wav 0.03 0.03 0.03 0.03 
man.wav 0.02 0.02 0.02 0.02 
memory.wav 0.03 0.02 0.02 0.03 
mist.wav 0.03 0.03 0.03 0.03 
Moonly.wav -0.03 -0.04 -0.04 -0.03 
mstest.wav -0.01 -0.01 -0.01 -0.01 
mvoice.wav 0.04 0.04 0.04 0.04 
pipes.wav -0.01 -0.01 -0.01 -0.01 
point1.wav -0.01 -0.02 -0.02 -0.02 
spahm.wav 0.02 0.02 0.02 0.02 
st_jacob.wav 0 0 -0.01 0 
summer.wav -0.01 -0.02 -0.02 -0.01 
t1.wav 0 0 0 0 
testsignal2.wav 0.03 0.03 0.03 0.03 
testsignal4.wav -0.01 -0.01 -0.01 -0.01 
The_red_Sorghum.wav 0 0 0 0 
This_Land_(Instrumental)-short.wav 0 -0.01 -0.01 0 
This_Land_(Instrumental).wav 0 -0.01 -0.01 0 
tpd.wav -0.01 -0.02 -0.02 -0.01 
Track07.wav -0.02 -0.02 -0.02 -0.02 
track7.wav -0.01 -0.01 -0.01 -0.01 
tsai.wav -0.01 -0.01 -0.01 -0.01 
vbrtest.wav -0.01 -0.02 -0.02 -0.01 
velvet.wav 0.01 0.01 0.03 0.01 
WINTER.wav -0.01 -0.02 -0.02 -0.01 
level (dB) 0 3 6 9 12 15 18 21 24 27 30 
Reduced Ratio 61.47% 63.34% 65.98% 67.58% 70.60% 72.13% 74.66% 77.74% 79.74% 83.11% 85.45% 
'69.wav 0 0.01 0.01 0.01 0.01 0.01 0.02 -0.09 -0.07 -0.11 -0.16 
1k+5k.wav 0.03 0.03 0.03 0.03 0.03 0.03 0.03 0.03 0.02 0.02 0.01 
60.wav 0.03 0.04 0.04 0.04 0.04 0.05 0.04 0.04 0.05 0.05 0.02 
9_1.wav -0.02 -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 0 0.04 0 0.1 
9_2.wav -0.02 -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 0 0 0.01 0.07 
9_3.wav -0.02 -0.01 -0.01 -0.01 -0.17 -0.16 0 0.02 0.06 0.07 0.06 
applaud.wav 0 0 0 0 0 0 0.05 0.06 0.03 0.02 0.01 
A_DAY_FOR_YOU.wav 0 0 0 0.01 -0.17 -0.06 -0.02 -0.01 0 -0.08 -0.13 
BlackBird.wav 0 0 0 0 -0.02 -0.07 -0.11 -0.47 -0.49 -0.49 -0.58 
butter1.wav 0.03 0.03 0.03 0.03 0.04 0.04 0.04 0.04 0.06 0.05 0.05 
castanets.wav -0.02 -0.01 0 -0.1 -0.08 -0.08 -0.11 -0.16 -0.17 -0.28 -0.28 
cello1.wav -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 0 0.01 0.08 0.06 0.08 
coco.wav -0.01 0 0 0 0 0 0.06 0.07 0.06 0.08 0.08 
dance1.wav 0.02 0.02 0.02 0.02 0.02 0.02 0.04 -0.06 0.04 0.03 -0.01 
else3.wav -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 0 -0.13 -0.12 -0.1 -0.11 
fatboy.wav 0.01 0.02 0.02 0.02 0.02 0.02 -0.01 0 0.02 -0.07 -0.19 
flute.wav -0.01 -0.01 -0.01 -0.01 -0.09 -0.09 0 -0.01 0.03 0.04 0.03 
Fools.wav 0 0.01 0.01 -0.06 0 0 -0.04 0.01 0 -0.03 -0.09 
ftb_samp.wav 0 0.01 0.01 0.01 0.01 0.01 -0.02 -0.03 -0.02 -0.04 -0.03 
goldc.wav 0 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.02 
gong.wav -0.01 -0.01 -0.01 0 -0.01 0 -0.01 -0.06 -0.04 -0.05 0.01 
gong2.wav -0.03 -0.03 -0.03 -0.03 -0.02 -0.03 -0.02 -0.01 0.04 0.05 0.08 
harp.wav -0.01 -0.01 -0.01 -0.01 0 0 0 -0.01 0.02 0.02 0.05 
hat1.wav 0 0 0 0 0 0 0.01 0.01 0.02 0.1 0.1 
heart.wav 0 0 0 0 0.01 0.01 0.06 0.05 0.07 0.07 0.05 
HEART1.wav 0 0 0 0 0.01 0.01 0.06 0.05 0.07 0.07 0.05 
Hero.wav 0.01 0.01 0.01 0.01 0.02 -0.09 -0.07 0.02 0.03 0.05 0.08 
Hero2.wav 0 0 0 0 0 0 0.01 0.02 0.06 0.08 0.1 
hihat.wav -0.01 -0.03 -0.13 -0.45 -0.3 -0.33 -0.39 -0.71 -0.81 -1.35 -1.68 
iron.wav -0.01 0 -0.01 -0.02 -0.04 -0.32 -0.22 -0.24 -0.26 -0.38 -0.39 
KMFDM-Dogma.wav 0 0.01 0 0 0 0 0 0 0 0.01 -0.08 
land.wav -0.01 -0.01 -0.01 -0.01 0 0 0 0.01 0.02 0.05 0.05 
leftright.wav -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 -0.06 -0.04 -0.04 0.02 
main_theme.wav 0.03 0.04 0.03 0.03 0.04 0.04 0.04 0.04 0.08 0.06 0.04 
man.wav 0.02 -0.02 -0.02 -0.02 0.03 0.04 0.04 0.05 0.02 -0.09 -0.18 
00.2
0.4
0.6
0.8
1
1.2
1.4
1.6
1.8
0 3 6 9 12 15 18 21 24 27 30
perceptual threshold offset, dB
O
D
G
Minimum
Maximum
Average
 
Figure 2.9: Distribution of ODGs for fast perceptual convolution with 
different levels of perceptual threshold 
 In Table 2.4, after we offset the perceptual threshold 30dB, we can remove about 80% of 
multiplications in frequency domain. By offsetting 30dB, the fast perceptual convolution can 
reduce 40% of complexity in multiplications as compared with the FFT-based convolution method. 
The mean absolute ODG is about 0.1. This result is still in acceptable range. The maximum ODGs 
are larger for few samples, especially for hihat.wav, because the overall frequencies of these 
samples are higher. Offsetting the threshold may filter out the important frequency components of 
those samples. By the same level of threshold, the fast perceptual convolution has a speedup of 
66% over the FFT-based convolution when the input block size is set to be 1024. 
References 
[1] D. S. McGrath, “Method and Apparatus for Filtering an Electronic Environment with 
Improved Accuracy and Efficiency and Short Flow-Through Delay”, US Patent 5,502,747. 
[2] J. H. McClellan, Ronald W. Schafer & Mark A. Yoder, “DSP First: A Multimedia Approach”, 
Prentice Hall, 1998, ISBN 0-13-243171-8 
[3] T. Painter and A. Spanias, “Perceptual Coding of Digital Audio”, Proceeding of The IEEE, 
Vol. 88. No. 4, April 2000. 
[4] W. G. Gardner, “Efficient Convolution without Input-Output Delay”, J. Audio Eng. Soc., vol. 
43, no. 3, pp. 127-136, March 1995. 
[5] ITU Radiocommunication Study Group 6, “DRAFT REVISION TO RECOMMENDDATION 
ITU-R BS.1387 - Method for objective measurements of perceived audio quality”. 
[6] M. R. Schroeder and B. F. Logan, “Colorless Artificial Reverberation”, J. Audio Eng. Soc., 
vol. 9, no. 3, pp. 192-197, July 1961.  
[7] M. R. Schroeder, “Natural Sounding Artificial Reverberation”, J. Audio Eng. Soc., vol. 10, no. 
3, pp. 219-223, July 1962. 
[8] J. A. Moorer, “About This Reverberation Business”, Computer Music Journal, vol. 3, no. 2, pp. 
13-28, June 1979. 
[9] J. M. Jot and A. Chaigne, “Digital delay networks for designing artificial reverberators”, in 
Proc. 90th Conv. Udio Eng. Soc., February, 1991, preprint 3030.   
[10] W. G. Gardner, “The virtual acoustic room”, MS proposal, MIT Media Lab, 1992. 
