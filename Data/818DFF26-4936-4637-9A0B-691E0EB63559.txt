 2
?????? 
For a synchronous FSM, huge current peaks are often observed at the moment of state transition (since all state 
registers are clocked). These current peaks may lead to loic errors due to voltage drop or reliability problems due to 
electromigration. Although previous studies have aimed to minimize average power consumption caused by the state 
transition, no attention has been paid to the minimization of peak current caused by it. 
However, under the same average power consumption, the peak current can often be further reduced. As the 
process shrinks into the deep sub-micron technology, the power supply level fluctuation is exacerbated since the 
noise margin is considerably reduced. Therefore, in addition to minimizing average power consumption, there is a 
strong demand for the development of more aggressive techniques to reduce the peak current. 
In fact, the peak current of a state register is related to the switching direction. Therefore, even though the 
switching state registers are the same, different combinations of switching directions still result in different peak 
currents. Based on that observation, in this research project, we attempt to minimize the peak current caused by the 
state transition by considering the switching directions of state registers. In this research project, we formally 
formulate the problem of state re-encoding for peak current minimization. For each state transition, the switching 
state registers of the re-encoded FSM are exactly the same as those of the original FSM, and so the peak current can 
be reduced with almost no penalty. Experimental data consistently show that our approach works well in practice. 
Keywords?Logic Synthesis, State Re-Encoding, Peak Current, Sequential Circuit, Finite State Machine. 
 4
approach to re-encode an FSM by considering the 
switching directions of state registers in order to minimize 
the peak current. It should be pointed out that, for each 
state transition, the state bits that switch in our re-encoded 
FSM are exactly the same as those in the original FSM. 
Therefore, compared with the original FSM, our 
re-encoded FSM has almost no penalty on the circuit area, 
the critical path delay, and the average power consumption. 
2. MOTIVATIONS 
In fact, the switching directions of state register determine 
whether the output capacitance is charged or discharged. 
We analyze the following two switching directions. 
(1) If the value of state register switches from logic level 0 
to logic level 1, the output capacitance is charged. Thus 
there is a current that flows from the power line VDD to the 
output capacitance.  
(2) If the value of state register switches from logic level 1 
to logic level 0, the output capacitance is discharged. Thus 
there is a current that flows from the output capacitance to 
the ground line VSS. 
Accordingly, we make the following hypothesis. If the 
value of state register switches from logic level 0 to logic 
level 1, the peak current occurs in the power line VDD; on 
the other hand, if the value of state register switches from 
logic level 1 to logic level 0, the peak current occurs in the 
ground line VSS. 
To verify this hypothesis, we perform an experiment in 
which D-type flip-flop DFFX2 in TSMC 0.18 µm standard 
cell library is used as the state register. We assume that the 
clock transition time is 0.100 ns and the output capacitance 
is 0.200 pf. Figure 1 gives the HSPICE simulation results. 
The notation V(CLK) denotes the voltage of clock pin CLK. 
The notation V(Q) denotes the voltage of output pin Q. 
Note that the value of output pin Q corresponds to the value 
of state register. The notation I(VDD) denotes the current 
that flows from the power line VDD. The notation I(VSS) 
denotes the current that flows to the ground line VSS. As 
shown in Figure 1, the HSPICE simulation results are 
consistent with our analysis: 
(1) If the value of the state register (i.e., the value of output 
pin Q) switches from logic level 0 to logic level 1, the 
maximum current of I(VDD) is 692 µA, while the maximum 
current of I(VSS) is 348 µA. Therefore, if the value of state 
register switches from logic level 0 to logic level 1, the 
peak current occurs in the power line VDD. 
(2) If the value of the state register switches from logic 
level 1 to logic level 0, the maximum current of I(VDD) is 
303 µA, while the maximum current of I(VSS) is 829 µA. 
Therefore, if the value of state register switches from logic 
level 1 to logic level 0, the peak current occurs in the 
ground line VSS. 
 6
value of the binary variable xk is 0, then the state register Rk 
switches from logic level 0 to logic level 1 in our 
re-encoded FSM. On the other hand, if the state register Rk 
switches from logic level 1 to logic level 0 in the original 
given encoded FSM and the value of the binary variable xk 
is 1, then the state register Rk also switches from logic level 
0 to logic level 1 in our re-encoded FSM. The number of 
state registers that simultaneously switch from logic level 0 
to logic level 1gives a lower bound on the peak value. The 
constraint can be formulated as below: 
1 1
0 0
( ) ( ) ) ( ) ( )) .
m m
i j i j k i j i j k
k k
h k d k x h k d k x peak
− −
→ → → →
= =
× ×(1− + ×(1− × ≤∑ ∑  
(2) The number of state registers that simultaneously switch 
from logic level 1 to logic level 0 gives a lower bound on 
the peak value. This constraint can be formulated as 
below:
1 1
0 0
( ) ( )) ) ( ) ( ) .
m m
i j i j k i j i j k
k k
h k d k x h k d k x peak
− −
→ → → →
= =
×(1− ×(1− + × × ≤∑ ∑  
Therefore, if the given encoded FSM has n state transitions, 
our ILP formulation has 2n constraints. 
4. HEURISTIC APPROACH 
Since ILP is NP-hard, it may be time-consuming for large 
FSM designs, even redundant constraints are pruned. 
Therefore, in this section, we propose a polynomial time 
complexity algorithm to solve the state re-encoding 
problem heuristically. 
Our heuristic algorithm is an iteration process of 
re-encoding. For an encoded FSM e, we define the 
followings: the notation peake represents the peak value of 
encoded FSM e, the notation peake,i→j represents the peak 
value of the state transition Si→Sj, and the notation 
num(e,a) represents the number of state transitions whose 
peak values are a.  
Figure 2 gives the pseudo code of our heuristic algorithm, 
where the input is an encoded FSM org (note that Theorem 
1, Theorem 2, and Lemma 2 can be applied to eliminate 
ignorable state transitions in advance). The notation current 
denotes our current encoded FSM. The function 
comp(current,Rk) provides the re-encoding solution of our 
current encoded FSM current by complementing the value 
of state register Rk. We say that the cost of encoded FSM e1 
is smaller than the cost of encoded FSM e2, if one of the 
following two conditions is met: 
(1) The value of peake1 is smaller than the value of peake2. 
(2) Both the value of peake1 and the value of peake2 are 
equal to a, and the value of num(e1,a) is smaller than the 
value of num(e2,a). 
In addition, we say that the cost of encoded FSM e1 is 
equal to the cost of encoded FSM e2, if the following 
condition is met: both the value of peake1 and the value of 
peake2 are equal to a, and the value of num(e1,a) is equal to 
the value of num(e2,a). 
A state register Rk is marked if its value in our current 
encoded FSM current is complemented with that in the 
input org. At the beginning of our heuristic algorithm, all 
 8
column Peak Value denotes the peak value (i.e., the 
maximum number of state registers that simultaneously 
switch in the same direction). The column Original gives 
the peak value obtained by the original encoding solution. 
The column Ours describes the peak values obtained by our 
ILP approach and our heuristic algorithm, respectively. The 
column ILP denotes our ILP approach. The column 
Heuristic denotes our heuristic approach. We find that, in 
every FSM design, our ILP approach and our heuristic 
approach achieve exactly the same peak value. The column 
Improve gives the relative improvement of our re-encoding 
solution over the original encoding solution, i.e., 100% - 
Ours / Original. 
Peak Value 
Ours 
Circuit States Trans 
Original  
ILP Heuristic
Improve
BBSSE 16 56 4 3 3 25.0 %
EX1 20 138 4 3 3 25.0 %
KIRKMAN 16 370 3 2 2 33.3 %
MODULO12 12 24 3 2 2 33.3 %
S298 218 1096 8 7 7 12.5 %
S386 13 64 3 2 2 33.3 %
S510 47 77 5 3 3 40.0 %
S832 25 245 4 3 3 25.0 %
SAND 32 184 4 3 3 25.0 %
SCF 121 166 5 4 4 20.0 %
SSE 16 56 4 3 3 25.0 %
STYR 30 166 4 3 3 25.0 %
TBK 32 1569 5 4 4 20.0 %
CTRL1 68 145 5 4 4 20.0 %
CTRL2 48 250 5 3 3 40.0 %
Table 9: Experimental results on FSM designs. 
6. CONCLUSIONS 
In this research project, we present the first work for 
minimizing the peak current caused by the state transition. 
We show that the peak current of a switching state register 
is related to the switching direction. Based on that 
observation, we propose an approach to re-encode an FSM 
by considering the switching directions of state registers. 
An important feature of our approach is that it can be 
successfully applied at different design stages. 
Experimental data consistently show that our approach 
works well in practice. 
Our future research will extend our work to the synthesis of 
combinational logic, thus minimizing the number of logic 
gates that simultaneously switch in the same direction. As a 
result, the whole-circuit peak current could be further 
reduced. 
7. ?????? 
In this research project, we formally formulate the problem 
of state re-encoding for peak current minimization. For 
each state transition, the switching state registers of the 
re-encoded FSM are exactly the same as those of the 
original FSM, and so the peak current can be reduced with 
almost no penalty. Experimental data consistently show that 
our approach works well in practice. 
A preliminary version of our paper has been presented in 
2006 IEEE/ACM International Conference on Computer 
Aided Design (ICCAD-2006) [15]. In addition, we have 
submitted an extended version of our paper to a top-rated 
journal. 
8. REFERENCES 
[1] T. Villa and A. Sangiovanni-Vincentelli, “NOVA: State 
Assignment of Finite State Machines for Optimal 
Two-Level Logic Implementation,” IEEE Trans. on 
Computer-Aided Design, vol. 9, no. 9, pp. 905—924, 1990. 
[2] S. Devadas, H. Ma, A.R. Newton, and A. 
Sangiovanni-Vincentelli, “MUSTANG: State Assignment 
of Finite State Machines Targeting Multi-Level Logic 
Implementations,” IEEE Trans. on Computer-Aided Design, 
vol. 7, no. 12, pp. 1290—1299, 1988. 
