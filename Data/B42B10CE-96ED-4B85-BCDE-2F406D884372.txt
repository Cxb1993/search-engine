 2
 
英文摘要 
Recent multicast protocols for large-scale mobile ad hoc networks (MANETs) adopted 
two-tier infrastructures to achieve effective flooding schemes. They have three disadvantages. 
First, hosts with a large number of neighbors were selected as backbone hosts (BHs) for 
forwarding packets. It is very likely that these BHs will become traffic concentrations or 
bottlenecks of the networks. Second, they suffered from more lost packets because they did not 
consider host mobility in selecting BHs. Third, they did not provide quality-of-service (QoS) 
function. A multicast protocol is desired to provide different levels of QoS for multimedia and 
real-time applications. 
In the first year of this project, a distinct strategy is proposed for constructing a two-tier 
infrastructure in a large-scale ad-hoc network. Hosts with a minimal number of hops to the other 
hosts rather than those with a maximal number of neighbors will be adopted as BHs in order to 
obtain shorter multicast routes. The problem of determining BHs can be formulated with linear 
programming. Then BHs will be determined by solving the formulated MP for a feasible solution. 
Finally, the new multicast protocol will be developed based on the selected BHs. In the second 
year of this project, host mobility is further taken into consideration in selecting BHs. Hosts with 
fewer hops and longer remaining connection time to the other hosts will be selected as BHs. The 
objective is not only to obtain short multicast routes, but also to construct a stable two-tier 
infrastructure with fewer lost packets.  
In this year (the third year of this project), the proposed multicast protocol is enhanced to 
provide different levels of QoS for multimedia and real-time applications. Previous 
quality-of-service (QoS) routing/multicasting protocols in mobile ad-hoc networks determined 
bandwidth-satisfied routes for QoS applications. However, they suffer from two 
bandwidth-violation problems since the bandwidth consumption of two-hop neighbors is not 
taken into consideration. In this year, a novel algorithm that can avoid the two problems is 
proposed to construct bandwidth-satisfied multicast trees for QoS applications. Further, it also 
aims to minimize the number of forwarders so as to reduce bandwidth and power consumption. 
Simulation results show that the proposed algorithm can improve the network throughput. 
 
Keywords: Ad-hoc network, distributed algorithm, linear programming, multicast 
 
一、前言 
Motivated by increasing importance of real-time and multimedia applications with different 
quality-of-service (QoS) requirements, e.g., VoIP and video-conference, several QoS-constrained 
multicast algorithms for multimedia communication in wired networks have been proposed in the 
literature [3-5]. These algorithms aim to construct least-cost multicast trees with the constraints of 
delay and/or bandwidth requirement.  
A mobile ad-hoc network (MANET) is formed by a group of mobile hosts that can 
 4
二、研究目的 
Since bandwidth and battery power are limited in MANETs, they should be taken into 
consideration in routing/multicasting protocols. One way to reduce bandwidth and power 
consumption is to decrease the number of hosts (i.e., forwarders) participating in packet 
forwarding. The problem of finding a multicast tree with minimum number of forwarders can be 
modeled as the Steiner tree problem (STP) that is known to be NP-hard (see [11]). If the 
bandwidth consumption is considered additionally, the resulting problem is also NP-hard. In this 
paper, we study the problem of determining a bandwidth-satisfied multicast tree with minimum 
number of forwarders. The problem is referred to as BSMTP in the rest of this report, and we 
propose to provide a feasible solution to it. 
A number of good heuristics for approximate STP [21-26] have been proposed. They can be 
classified into centralized approach [21-24] and distributed approach [25, 26]. In the centralized 
approach, a center node that is aware of the state of the whole network computes the tree. In the 
distributed approach, on the other hand, each node of the network actively contributes to the 
algorithm computation. However, the approximate Steiner trees determined in [21-26] are 
insufficient to characterize a good multicast tree for multimedia applications with different QoS 
requirements (delay and/or bandwidth). 
The problem of determining a delay-satisfied multicast tree with minimum number of 
forwarders (denoted as DSMTP) is a constrained Steiner tree. The most relevant work in the area 
of DSMTP has been done in [2, 12, 27, 28]. The algorithm proposed in [27, 28] was based on a 
minimum spanning tree, which encapsulated the minimum delay routes between any two nodes 
and the corresponding delays, rooted at the server over the entire network. A delay-satisfied 
multicast tree was derived by removing the unnecessary edges from the spanning tree. On the 
other hand, the algorithm proposed in [2, 12] modified the cheapest insertion heuristic algorithm 
proposed in [1] to solve DSMTP. In [1], a tree rooted at the server connected to the nearest client, 
which was not connected, on each step. 
BSMTP is similar to DSMTP in some aspects. They both intend to determine a multicast tree 
so that the number of forwarders in the tree is minimized. The major differences between BSMTP 
and DSMTP are the constraints, i.e., bandwidth and delay. In DSMTP, the delay of a route can be 
obtained easily by summing the delays of the edges along the route, where the delay on each edge 
is a predefined constant. But in BSMTP, The bandwidth increment to a host is not a constant. In 
MANETs, a host shares the radio channel with its neighbors so that its bandwidth increment 
induced by a new flow relies on whether it and its neighbors are selected as the forwarders for the 
flow. Similarly, bandwidth violation happened to its neighbors should be avoided when it is 
selected as a forwarder. Therefore, to determine a feasible solution of BSMTP is more difficult. 
A novel algorithm that can avoid the two problems is proposed to construct 
bandwidth-satisfied multicast trees, which is a feasible solution to BSMTP, for QoS applications. 
Further, it also aims to minimize the number of forwarders so as to reduce bandwidth and power 
consumption. Simulation results show that the proposed algorithm can improve the network 
throughput.  
 6
determination for the new flow proceeds to c. Suppose that each host has the same available 
bandwidth, say 11 units, and the bandwidth requirements for the three flows are 2 (from e to f), 7 
(from g to h) and 3 (from a to d) units, respectively. If c serves as a forwarder, then total 9-unit 
bandwidth of c will be consumed (c, the predecessor of c and the successor of c each require 
3-unit bandwidth). Since the ongoing flow from e to f is in the radio coverage of c, it consumes 
2-unit bandwidth of c. Consequently, the remaining available bandwidth of c is 11 − 2 = 9 units, 
and so c is allowed to be a forwarder. 
Now we turn our attention to the bandwidth consumption of e. Since both c and g are in the 
radio coverage of e, the bandwidth requirement of e is 2 + 3 + 7 = 12 units, which exceeds its 
available bandwidth (11 units). The reason for the bandwidth violation is that c was not aware of 
the ongoing flow from g to h when it was determined to be a forwarder. In short, the bandwidth 
violation happened because the ongoing flow from g to h was hidden from the new flow from a 
to d. The problem is henceforth referred to as the hidden route problem (HRP). In contrast to the 
hidden terminal problem [13], which arises in the MAC layer, the hidden route problem arises in 
the network layer. 
d
e
a
b
c
f
h
g
 
Figure 1. An example of HRP. 
d
e
a
b
c
f
g h
 
Figure 2. An example of HMRP.
An illustrative example for HMRP is shown in Figure 2, where there is a multicast group and 
a new flow from a (server) to e and h (clients) is permitted. Suppose that each host has the same 
available bandwidth, say 11 units, and the bandwidth requirement of the flow is 3 units. Also note 
that bandwidth reservation will be made for the flow when data flow through the routes. Both c 
and g can be forwarders for the flow from a to e and from a to h, respectively, because their 
bandwidth requirement (9 units) is smaller than their available bandwidth (11 units). However, 
since they are in the radio coverage of each other, 3-unit bandwidth is required additionally when 
data flow from a to e and h. This increases their bandwidth requirement to 12 units, which causes 
a bandwidth violation. The bandwidth violation happens because the two multicast routes from a 
to e and from a to h are mutually hidden from each other. It is henceforth referred to as the hidden 
multicast route problem (HMRP). 
The influence of HRP and HMRP on network performance is demonstrated by simulations 
using the Network Simulator 2 package (ns-2) [14], where 50 hosts are randomly distributed over 
a 1000m × 1000m area. The data transmission capability (available bandwidth) of each host is 
assumed 800 Kbps. Two bandwidth requirements, i.e., 25 Kbps and 50 Kbps, for each flow are 
 2
bandwidth- satisfied multicast routes concurrently. 
The bandwidth-satisfied multicast tree determined in (2) may become outdated or 
disconnected due to host movement. In (3), a distributed algorithm is proposed to recover the tree. 
 
(1) Residual bandwidth estimation 
It is rather difficult to estimate the residual bandwidth of a host, because the bandwidth is 
shared among neighboring hosts and these neighboring hosts are not aware of the traffic status of 
one another. Recently, there are two QoS routing protocols, proposed by Yang et al. [19] and 
Chen et al. [20], which estimate the residual bandwidth of a host by monitoring the amount of 
idle channel time. In this section, based on the same concept as [19] and [20], a method for 
residual bandwidth estimation is proposed. 
As shown in Figure 5, each host vi maintains two neighbor tables: the one-hop neighbor table 
and the two-hop neighbor table, where vj (vk) denotes a one-hop (two-hop) neighbor of vi and b_oj 
(b_ok) denotes the currently consumed bandwidth for all ongoing flows that are forwarded by vj 
(vk). Besides, there is a link directed from vj to vk if vk is a one-hop neighbor of vj. 
One-Hop
Neighbors
Consumed
 Bandwidth
. .
. .
. .
vj b_oj
. .
. .
. .
(a) (b)
Two-Hop
Neighbors
Consumed
 Bandwidth
. .
. .
. .
vk b_ok
. .
. .
. .
 
Figure 5. Two neighbor tables. (a) One-hop neighbor table. (b) Two-hop neighbor table. 
In order to maintain the two neighbor tables for all hosts, every two neighboring hosts, say vx 
and vy, have to exchange their one-hop neighbor tables together with b_ox and b_oy periodically 
via control packets b_hello. Whenever vx (vy) receives a b_hello packet from vy (vx), vx (vy) uses 
the one-hop neighbor tables of vy (vx) that are carried by the b_hello packet to update its two 
neighbor tables and the associated links. 
When vi has the currently consumed bandwidths, i.e., b_ojs, of all its one-hop neighboring hosts 
vjs, its residual bandwidth can be estimated as the maximal available bandwidth minus 
∑+ ji obob __ , divided by a weighted factor α. Also, vi can estimate the residual bandwidths of 
all vjs similarly. We need to divide these residual bandwidths by α due to the IEEE802.11 MAC’s 
nature and some overheads induced by the MAC. Since the control packets (i.e., RTS, CTS and 
ACK packets) consume bandwidth, the back-off scheme fails to use the entire bandwidth and the 
data/control packets may collide, α can be calculated as follows. 
Data
ACKIPHdrMACHdrDataCTSRTS +++++
=
)(
α  
where RTS, CTS, Data, MACHdr, IPHdr and ACK denote the sizes of RTS, CTS, Data, MAC 
 4
 else  hi,d ← ∞ and Pi,d ← {}; 
repeat   
 determine vx ∈ X so that hx,d = min{hi,d | vi ∈ X} and delete vx from X; 
 if  hx,d ≠ ∞  
 then  for  each neighbor vj of vx  do 
 if  hj,d > hx,d + 1 and B_Violation(b_req, ∆, {vj} ∪ Px,d ∪ Φ) = false  
 then  hj,d ← hx,d + 1 and Pj,d ← Px,d ∪ {vj} 
 until  hx,d = ∞ or X = {};  
H ← {} and P ← {}; 
for  each vi ∈ V − {vd}  do 
 H ← H ∪ {hi,d} and P ← P ∪ Pi,d. 
Next, we explain the execution of B_Violation. B_Violation has three input parameters: b_req, 
∆ and Φ’, where b_req and ∆ are inherited from Shortest_Routes and Φ’ is a superset of Φ. The 
hosts in ∆ (Φ’) are destinations (forwarders) of the new flow. Let Ni be the set of hosts that are 
neighboring to vi and b_ri be the residual bandwidth of vi. Also, let M=∆∪Φ’∪ U
'Φ∈jv
jN . 
B_Violation checks if the forwarders in Φ’ cause bandwidth violation to every host in M. By 
means of checking the hosts in U
'Φ∈iv
iN , HRP can be avoided to the ongoing flows that pass 
through the one-hop neighbors of the forwarders in Φ’. Bandwidth violation happens to a host vi 
in M if the bandwidth increment induced by the forwarders in Φ’ exceeds vi’s residual bandwidth, 
i.e., |(Ni∪vi)∩Φ’| × b_req > b_ri. If bandwidth violation happens, then B_Violation returns true. 
Finally, B_Violation returns false, if no bandwidth violation happens. B_Violation is detailed 
below. 
Procedure  B_Violation(b_req, ∆, Φ’);  
M=∆∪Φ’∪ U
'Φ∈jv
jN ; 
for  each vi ∈ M  do   
 begin 
 if  |(Ni∪vi)∩ Φ’| × b_req > b_ri  
 6
repeat 
D’ ← {}; 
for  i ← 1 to |D|  do   
begin 
Shortest_Routes(
idv , b_req, ∆, F, H, P); 
determine vx ∈ F so that idxh , = min{ idjh , | vj ∈ F}; 
if  hx ≠ ∞ 
   then  D’ ← D’ ∪ { vx }, idxh ,
' ←
idxh ,  and  idxP ,
' ←
idxP ,   
   else  exit  
end 
determine vy ∈ D’ so that h’k,y = min{h’k,y | vk ∈ F}; 
F ← F ∪ P’k,y  and ∆ ← ∆ ∪ { vy } and  delete vy from D; 
until D=∞. 
 
Recall that the adjacency of hosts is necessary to Shortest_Routes. Also, all b_ris are 
necessary to Shortest_Routes and B_Violation. Hence, they should be made available before 
B_Satisfied_Multicast_Tree is invoked. 
The new proposed algorithm is responsible to collect the two items of data. The adjacency of 
hosts is conveniently represented by an adjacency 0/1 matrix, where a 1 (0) in the (vx, vy)- entry 
denotes that vx and vy are (are not) neighboring. Two new control packets named b_join_query 
and b_join_reply are used, instead of join_query and join_reply. Let vs denote the server and vi 
denote an arbitrary host. Five variables: t, hopcount, Ni, Ňi and B_ri are introduced, where 
t :  the elapsed time required to transmit a packet between two neighboring hosts;  
hopcount :  the number of hops distant from vs;  
Ni :  the set of all neighbors of vi;  
Ňi :  the set of Njs collected by vi;  
B_ri :  the set of b_rjs collected by vi. 
When vs intends to initiate a flow with bandwidth requirement b_req to the clients, it 
broadcasts a b_join_query, which carries hopcount, over a region with a radius of maxhopcount 
hops centered at vs, where maxhopcount is a predefined integer. Upon receiving a non- redundant 
b_join_query from a host, say vα, vi relays it to its neighbors and then waits for a time period to 
receive b_join_replys from its neighbors. If timeout happens, vi replies a b_join_reply to vα, 
which carries Ňi and B_ri. 
 8
A client can monitor the receiving packets delivered from the server in order to check that the 
receiving rate is bandwidth-satisfied. Once it detects an un-satisfied route, it initiates a distributed 
algorithm to find a new bandwidth-satisfied route to the server. The found route reconnects the 
client to the server. In the case, the client broadcasts a control packet b_recovery_query, which 
carries F＝{} (F is the set of forwarders in the found route), to its neighbors. When a host vi (i.e., a 
neighbor) receives the packet, vi checks if the requested bandwidth causes bandwidth violation to 
vi, i.e., |(Ni∪vi)∩ F| × b_req > b_ri, or vjs (neighbors of vi), i.e., |(Nj∪vj)∩ F| × b_req > b_rj. Recall 
that vi can estimate b_ri and b_rj by the method of Section 3.1. If not, vi replaces F with F ∪ {vi} 
and then forwards the packet. Otherwise, it discards the received packet. 
A host who receives the forwarding packet executes the same checking and forwarding 
procedure. Once a host along the existing multicast tree receives the packet, it replies another 
control packet b_recovery_reply to the client along the reverse route. The client may receive 
multiple replied packets from multiple hosts. Since we attempt to minimize the number of 
forwarders along the recovery tree, the client selects the host with the minimum number of hops 
to it and connects to the server by the corresponding reverse route to this host. Then, the multicast 
tree can be recovered. 
五、結果與討論 
Simulations are implemented using the Network Simulator 2 package (ns-2, version 2.27) 
[14]. IEEE 802.11 distribution coordination function (PCF) is used as the MAC layer protocol. 
Packets are sent using the un-slotted Carrier Sense Multiple Access with Collision Avoidance 
(CSMA/CA). Each host is equipped with a radio transceiver whose transmission range is up to 250 
meters over a wireless channel. We use Two Ray Ground model to predict the signal power 
received by the receiver. In this model, reflection of ground is considered and the power of a 
signal attenuates as 1/d2, where d is the distance between the two hosts. 
In the simulations, CBR data traffic flows are injected into the network from the servers and 
the size of data payload is 512 bytes. Each host has a MAC layer FIFO transmission queue of 64 
packets at maximum.  
Three performance measures: receiving rate, admission rate and number of control bytes are 
adopted. The receiving rate is the ratio of the number of data packets received by clients to the 
number of data packets delivered from servers. If bandwidth violation happens, it will drop 
drastically. The admission rate is the ratio of the number of multicast groups admitted to the 
number of multicast groups requested. When the admission rate goes up, the network 
performance increases. On the other hand, the number of control bytes can reflect the overheads 
incurred for constructing/maintaining the multicast routes. 
For convenience, we use Heu to denote our bandwidth-satisfied multicasting protocol. Since 
B_Satisfied_Multicast_Tree is heuristic, an optimal algorithm for BSMTP is necessary in order to 
evaluate the performance of B_Satisfied_Multicast_Tree. In [16], the authors formulated BSMTP 
as a 0/1 integer linear programming, which can be well solved by a branch-and-bound algorithm 
(see [17]). We use Opt to denote the 0/1 integer linear programming solved by such a 
branch-and-bound algorithm. Opt can serve as a benchmark for evaluating the performance of 
 1
0 100 200 300 400 500 600 700 800 900 1000
0
100
200
300
400
500
600
700
800
900
1000
Flow 1 
Flow 2 
Flow 3 
Destination  Sender Forwarder Bandwidth violation 
 
Figure 6. Three routes constructed by AQOR. 
0 1000 2000 3000 4000 5000 6000 7000 8000
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
1.1
Time (sec)
R
ec
ei
vi
ng
 ra
te
Flow 1
Flow 2
Flow 3
 
Figure 7. Receiving rates for the three flows 
of Figure 6.
0 100 200 300 400 500 600 700 800 900 1000
0
100
200
300
400
500
600
700
800
900
1000
Client  Server Forwarder Bandwidth violation 
Client 1 Client 2 
Client 3 
 
Figure 8. The multicast tree constructed by 
MCEDAR. 
0 1000 2000 3000 4000 5000 6000 7000 8000
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
1.1
Time (sec)
R
ec
ei
vi
ng
 ra
te
Client 1
Client 2
Client 3
 
Figure 9. Receiving rates for the three 
clients of Figure 9. 
0 100 200 300 400 500 600 700 800 900 1000
0
100
200
300
400
500
600
700
800
900
1000
Flow 1 
Flow 2 
Flow 3 
Destination  Sender Forwarder Bandwidth violation 
 
Figure 10. Three bandwidth-satisfied routes 
constructed by Heu, protocol of [19] and 
protocol of [20]. 
1000 2000 3000 4000 5000 6000 7000 8000
0.6
0.8
1
1000 2000 3000 4000 5000 6000 7000 8000
0.6
0.8
1
1000 2000 3000 4000 5000 6000 7000 8000
0.6
0.8
1
Time (sec)
R
ec
xe
iv
in
g 
ra
te
s
Flow 3
Flow 2
Flow 1
 
Figure 11. Receiving rates for the three 
flows of Figure 10. 
Figure 12 shows the bandwidth-satisfied multicast tree constructed by Heu for Client 1, 
 2
1 2 3 4 5 6 7 8 9 10
0.5
0.6
0.7
0.8
0.9
1
Number of multicast groups
A
dm
is
si
on
 ra
te
MCEDAR
Heu
Opt
 
Figure 14. Admission rate for static hosts. 
1 2 3 4 5 6 7 8 9 10
0.6
0.65
0.7
0.75
0.8
0.85
0.9
0.95
1
1.05
Number of multicast groups
R
ec
ei
vi
ng
 ra
te
MCEDAR
Heu
 
Figure 15. Receiving rate for static hosts.
When there are feasible solutions to BSMTP, Opt can always determine the optimal one. 
However, it is likely that Heu fails to find a feasible one. Figure 14 also reveals the success rate 
of Heu in finding a feasible solution to BSMTP. The success rate can be estimated by means of the 
ratio of the admission rate of Heu to the admission rate of Opt. For one extreme case in which there 
is one multicast group, the success rate is estimated as 1/1 = 1. For the other extreme case in which 
there are ten multicast groups, the success rate is estimated as 0.497/0.54 = 0.92. For the other 
cases, the success rate ranges from 0.92 to 1. 
(3) Performance comparison: mobile hosts 
The simulation environment models a network of 50 hosts distributed randomly over a 
1000m×1000m area. Host mobility is based on the random waypoint model [18], in which a 
host’s movement consists of a sequence of random length intervals, called mobility epochs. 
During each epoch, a host moves in a constant direction and at a constant speed. The simulations 
proceed for 1000 seconds and the speed varies from 5 to 20 meters per second (or 18 to 72 
kilometers per hour). The first seven multicast groups, i.e., G1, G2, …, G7, that were created in 
Section 4.2 are used in the simulations. A flow requiring 50 Kbps is sent from the server to the 
clients. 
5 10 15 20
0.6
0.65
0.7
0.75
0.8
0.85
0.9
0.95
1
MCEDAR
Heu
A
ve
ga
ge
 re
ce
iv
in
g 
ra
te
Speed (m/sec)  
Figure 16. Receiving rate for mobile hosts. 
5 10 15 20
0.5
0.6
0.7
0.8
0.9
1
1.1
1.2
1.3
1.4
1.5
1.6
x 107
MCEDAR   
Heu
N
um
be
r o
f c
on
tro
l b
yt
es
Speed (m/sec)
 
Figure 17. Number of control bytes for 
mobile hosts. 
Figure 16 compares the receiving rates of Heu and MCEDAR under the assumption of 
mobile hosts. Like the previous situation of static hosts, Heu has higher receiving rates than 
 3
[15] E. W. Dijkstra, “A note on two problems in connection with graphs,” Numerische 
Mathematik, vol. 1, pp. 269-271, 1959. 
[16] C. C. Hu, E. H. K. Wu, and G. H. Chen, “Feasible bandwidth-satisfied multicast tree 
determination in MANETs,” Proceedings of the IEEE International Conference on Wireless 
and Mobile Computing, Networking and Communications, 2005, to appear. 
[17] A. Geoffrion and R. Marsten, “Integer programming algorithms: a framework and state- 
of-the-art survey,” Management Science, vol. 18, pp. 465-491, 1972. 
[18] C. Bettstetter, G. Resta, and P. Santi, “The node distribution of the random waypoint mobility 
for wireless ad hoc,” IEEE Transactions on Mobile Computing, vol. 2, no. 3, pp. 257-269, 
2003. 
[19] Y. Yang and R. Kravets, “Content-aware admission control for ad hoc networks,” IEEE 
Transactions on Mobile Computing, vol. 4, no. 4, pp. 363-377, 2005. 
[20] L. Chen and W. Heinzelman, “Qos-aware routing based on bandwidth estimation for mobile 
ad hoc networks,” IEEE Journal on Selected Areas in Communications, vol. 23, no. 3, pp. 
561-572, 2005. 
[21] L. Kou, G. Markowsky, and L. Bermain, “A fast algorithm for Steiner trees,” Acta 
Informatica, vol. 15, no. 2, pp. 141-145, 1981. 
[22] S. Ramanathan, “Multicast tree generation in networks with asymmetric links,” IEEE/ACM 
Transactions on Networking, vol. 4, no. 4, pp. 558-568, 1996. 
[23] M. Smith and P. Winter, “Path distance heuristics for the Steiner problem in undirected 
networks,” Algorithmica, vol. 7, no. 23, pp. 309-327, 1992. 
[24] H. Takahashi and A. Matsuyama, “An approximate solution for the Steiner problem in 
graphs,” Mathematica Japonica, vol. 24, no. 6, pp. 573-577, 1980. 
[25] F. Bauer and A. Varma, “Distributed algorithms for multicast path setup in data networks,” 
IEEE/ACM Transactions on Networking, vol. 4, no. 2, pp. 181-191, 1996. 
[26] L. Gatani, G. L. Re, and S. Gaglio, “An efficient distributed algorithm for generating 
multicast distribution trees,“ Proceedings of the International Conference on Parallel 
Processing Workshops, 2005, pp. 477-484. 
[27] V. P. Kompella, J. C. Pasquale, and G. C. Polyzos, “Multicast routing for multimedia 
communication,” IEEE/ACM Transactions on Networking, vol. 1, no. 3, pp. 286-292, 1993. 
[28] V. P. Kompella, J. C. Pasquale, and G. C. Polyzos, “Two distributed algorithms for 
multicasting multimedia information,” Proceedings of the International Conference on 
Computer Communications and Networks, 1993, pp. 343-349. 
[29] S. J. Lee and M. Gerla, “On-demand multicast routing protocol in multihop wireless mobile 
networks,” ACM/Kluwer Mobile Networks and Applications, vol. 7, pp. 441-453, 2002. 
七、計畫結果自評 
HRP and HMRP, which are two bandwidth-violation problems that may occur to 
previous QoS routing/multicasting protocols, were introduced in this paper. The simulation 
showed that when the network traffic is saturated (the number of multicast groups exceeds 5), 
AQOR will induce HRP and MCEDAR will induce HMRP. The network performance will drop 
