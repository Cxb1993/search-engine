 
中 文 摘 要 ： 幾乎在所有自然存在的 RNA 結構中常可發現所謂的假結結構
(pseudoknot)，其可在各種的生物反應中如 RNA 的複製、轉
錄與轉譯等扮演著重要的角色。例如在 RNA 轉譯的時候，這
些假結結構可以刺激程序性核糖體移碼(programmed 
ribosomal frameshifting)的發生。所謂的程序性核糖體移
碼是一種核糖體重新編碼(recoding)的機制，藉由這個機制
會讓正在進行轉譯的核糖體到達某一個特定位置的時候，可
以從原來的讀碼框(ORF)以倒退或前進一個核苷酸的方式切換
到另一個新的讀碼框，然後繼續在這新的讀碼框中進行轉
譯，以產生新的蛋白質。目前被發現的 RNA 假結結構大多數
是所謂的 H-型，基本上它是一個髮夾的結構，且髮夾迴圈的
核苷酸會和髮夾外面的核苷酸配對並形成另一個螺旋主幹。
因此，準確地預測出 RNA 序列中會折疊成 H-型假結結構將有
助於我們對程序性核糖體移碼基因的預測。除此之外，生物
學家最近對 ncRNA 這種不會轉譯成蛋白質的 RNA 分子也愈來
愈有興趣，因為他們在細胞內也扮演著許多重要的角色，包
括基因的調控、RNA 的修改、與染色體的複製等。到目前為
止，這些 ncRNA 的功能大部份尚未被知道。通常 RNA 分子的
結構在演化上通常比他們的序列還來得保守，這意味著分析
RNA 分子的結構相似程度將有助於我們對 ncRNA 功能的了
解。因此，如何快速且準確地比較出兩個 RNA 三級結構的相
似程度，甚至快速與準確地搜尋出 PDB 資料庫裡與 query 
RNA 三級結構整體或局部地相似的 RNA 分子，將有助於生物
學家對 RNA 分子結構與功能的關係有更進一步的了解。 
中文關鍵詞： 演算法、生物資訊、RNA、二級結構、假結、三級結構、結構
比對與資料庫搜尋 
英 文 摘 要 ： RNA pseudoknots are found in almost all classes of 
naturally occurring RNAs and play very important 
roles in a variety of biological processes, such as 
RNA replication, transcription and translation. For 
example, during the translation of ribosomal, they 
can serve as stimulators for the occurrence of the 
so-called programmed ribosomal frameshifting (PRF). 
The so-called PRF is a recoding mechanism, via which 
the translational ribosome switches from the initial 
(zero) reading frame to one of the two alternative 
reading frame (either -1 or +1) at a specific 
position and, as a result, produces an alternative 
protein that are different from that produced by 
standard translation. The majority of pseudoknots 
 
 
 
行政院國家科學委員會補助專題研究計畫 ▓成果報告   
□期中進度報告 
開發生物資訊新工具去探索 RNA病毒序列、結構、功能與演化(以流
感病毒與腸病毒為應用模型)---含有假結的 RNA二級結構預測與其
在偵測程序性核糖體移碼基因的應用 
計畫類別：□個別型計畫   ▓整合型計畫 
計畫編號：NSC97－2221－E－009－081－MY3 
執行期間：2008年 8月 01日至 2011年 07月 31日 
 
執行機構及系所：國立清華大學資訊工程學系 
 
計畫主持人：盧錦隆 
計畫參與人員：黃彥菱、蔡明原、陳昆澤、楊忠翰、賴慶恩、王志偉、鄭智先、
劉芸蓁、黃晟宸、黃亙亘、陳昱全、鍾仁駿、程美齡 
 
 
成果報告類型(依經費核定清單規定繳交)：□精簡報告  ▓完整報告 
 
本計畫除繳交成果報告外，另須繳交以下出國心得報告： 
□赴國外出差或研習心得報告 
□赴大陸地區出差或研習心得報告 
▓出席國際學術會議心得報告 
□國際合作研究計畫國外研究報告 
 
處理方式：除列管計畫及下列情形者外，得立即公開查詢 
            □涉及專利或其他智慧財產權，▓一年□二年後可公開查詢 
 
 
中   華   民   國  100  年  10  月  31  日 
II 
 
中文摘要 
關鍵詞：演算法、生物資訊、RNA、二級結構、假結、三級結構、結構比對與資料庫搜尋 
幾乎在所有自然存在的 RNA結構中常可發現所謂的假結結構(pseudoknot)，其可在各種的生物反
應中如 RNA的複製、轉錄與轉譯等扮演著重要的角色。例如在 RNA轉譯的時候，這些假結結構可以
刺激程序性核糖體移碼(programmed ribosomal frameshifting)的發生。所謂的程序性核糖體移碼是一種核
糖體重新編碼(recoding)的機制，藉由這個機制會讓正在進行轉譯的核糖體到達某一個特定位置的時
候，可以從原來的讀碼框(ORF)以倒退或前進一個核苷酸的方式切換到另一個新的讀碼框，然後繼續在
這新的讀碼框中進行轉譯，以產生新的蛋白質。目前被發現的 RNA 假結結構大多數是所謂的 H-型，
基本上它是一個髮夾的結構，且髮夾迴圈的核苷酸會和髮夾外面的核苷酸配對並形成另一個螺旋主
幹。因此，準確地預測出 RNA 序列中會折疊成 H-型假結結構將有助於我們對程序性核糖體移碼基因
的預測。除此之外，生物學家最近對 ncRNA這種不會轉譯成蛋白質的 RNA分子也愈來愈有興趣，因
為他們在細胞內也扮演著許多重要的角色，包括基因的調控、RNA的修改、與染色體的複製等。到目
前為止，這些 ncRNA的功能大部份尚未被知道。通常 RNA分子的結構在演化上通常比他們的序列還
來得保守，這意味著分析 RNA分子的結構相似程度將有助於我們對 ncRNA功能的了解。因此，如何
快速且準確地比較出兩個 RNA三級結構的相似程度，甚至快速與準確地搜尋出 PDB資料庫裡與 query 
RNA三級結構整體或局部地相似的 RNA分子，將有助於生物學家對 RNA分子結構與功能的關係有更
進一步的了解。 
1 
 
一、 前言 
幾乎在所有自然存在的RNA結構中常可發現所謂的 pseudoknots，其可在各種的生物反應中如RNA
的複製、轉錄與轉譯等扮演著重要的角色。例如在 RNA在轉譯的時候，這些 pseudoknots可以刺激程
序性核糖體移碼(programmed ribosomal frameshifting)的發生。目前被發現的 RNA pseudoknots大多數是
所謂的 H-type。因此，準確地預測出 RNA序列中會折疊成 H-type pseudoknots將有助於我們對程序性
核糖體移碼基因的預測。除此之外，生物學家最近對 ncRNA這種不會轉譯成蛋白質的 RNA分子愈來
愈有興趣，因為他們在細胞內也扮演著許多重要的角色，包括基因的調控、RNA的修改、與染色體的
複製等。到目前為止，這些 ncRNA的功能大部份尚未被知道。通常 RNA分子的結構在演化上通常比
他們的序列還來得保守，這意味著分析 RNA分子的結構相似程度將有助於我們對 ncRNA功能的了解。
因此，如何快速且準確地比較出兩個 RNA三級結構的相似程度，甚至快速與準確地搜尋出 PDB資料
庫裡與 query RNA三級結構整體或局部地相似的 RNA分子，將有助於生物學家對 RNA分子結構與功
能的關係有更進一步的了解。 
二、 研究目的 
RNA pseudoknot在各種的生物反應中如 RNA的複製、轉錄與轉譯等扮演著相當重要的角色，尤
其他們可以擔任程序性核糖體移碼的刺激物(1)。所謂的程序性核糖體移碼是一種核糖體重新編碼
(recoding)的機制，藉由這個機制會讓正在進行轉譯的核糖體到達某一個特定位置的時候，可以從原來
的讀碼框(ORF)以倒退或前進一個核苷酸的方式切換到另一個新的讀碼框，然後繼續在這新的讀碼框中
進行蛋白質的轉譯(2)。這個機制目前常發生於病毒(如 SARS冠狀病毒)以及少數的細菌與真核生物(包
含人類)上。目前為止，被發現的 RNA pseudoknot大多數是所謂的 H-type結構(3)，基本上它是一個髮
夾(hairpin)的結構，其中在髮夾迴圈(loop)的核苷酸會和髮夾外面的核苷酸配對並形成一個靠近或非常
靠近髮夾的螺旋主幹(helical stem)，如圖一所示。 
 
圖一: H-type pseudoknot的二級結構，基本上該結構會有 2個 stems (即圖上的 A與 C)與 3個 loops (即
圖上的 B, D與 E)。 
因此，預測出這些 H-type pseudoknot的結構將有助於我們去預測程序性核糖體移碼的基因。在一
般標準的熱動力模型上，不含假結的最小自由能量(minimum free energy)的 RNA二級結構是可以在多
項式時間(polynomial time)內被計算出來。然而，要去計算含有 pseudoknot的最小自由能量的 RNA二
級結構便變成了一件非常困難的事情，因為它已被證明出是件 NP-hard 的問題(4,5)。目前已有許多的
多項式時間的演算法被設計出來可以用來計算出含有特定型態的假結(如 H-type pseudoknot)的最小自
由能量的 RNA 二級結構(4,6-8)。然而，這些演算法的時間與空間(即記憶體)複雜度仍非常的高，故尚
不能實際地被拿來處理較長甚至大型的RNA序列。在本子計劃的研究中，我們提出一個啟發式(heuristic)
的方法可以改進這些演算法去預測 H-type pseudoknot。同時，我們也把此啟發式演算法應用在-1和+1
型程序性核糖體移碼的偵測。 
然而，對於大部分的RNA分子而言，除了參與蛋白質合成之外，尚有很多不會被轉譯成蛋白質的
RNA分子參與了細胞內一些相當重要的生理反應：包括基因的調控、RNA的修改、與染色體的複製等
3 
 
慮滑動序列後方的 RNA二級結構，或是考慮的 RNA二級結構大過簡單)；後者的原因則在於考慮的模
型有太多的限制。 
 
圖二: 倒退一個核苷酸的程序性核糖體移碼(-1 PRF)模型。 
理論上，要自動化地去偵測出兩個RNA分子之間的結構相似程度是一件非常困難的事情，因為它
已經被證明是一個NP-hard問題(13)，因此現有的一些軟體如ARTS (14,15)、DIAL (16)與我們的SARSA 
(17)都是利用所謂的啟發式的(heuristic)演算法所設計出來的。ARTS演算法(14,15)的精神是先去找出二
個RNA三維結構之間所有局部相似的結構片斷(作者Dror等人稱之為seed matches)，然後再從每一個局
部相似結構片斷的二端做可能的延長。整個演算法的時間複雜度為O(n3)，其中n為RNA的序列長度。
在偵測RNA結構的motifs，ARTS算是一個相當不錯的軟體工具。但是對兩個大的RNA分子結構(如
ribosomal RNAs)之間的比較，目前對ARTS而言仍是一件極為耗時的工作。除此之外， ARTS所產生的
RNA結構比對有時候是不正確的。為了改進ARTS太花時間與準確度不夠的缺點，Ferre等人(16)利用一
個時間複雜度為O(n2)的動態規劃(dynamic programming)演算法可以同時計算出兩個RNA分子之間的序
列相似度、鹼基配對相似度與扭轉(torsion/pseudo-torsion)角度相似度，最後再綜合起來找出這兩個RNA
分子之間最相似的三維結構。Ferre等人最後利用這個演算來設計出DIAL這個可以比對兩個RNA三維結
構的軟體工具。目前DIAL是被安裝在一個含有 20個雙CPU的PC cluster操作環境上。DIAL可以執行以
下三種兩個RNA三級結構比對：(a) global alignment: 可比對出整個RNA結構的相似程度，(b) local 
alignment: 可找出結構上局部相似的地方，(c) semi-global alignment: 一種對end gaps不計分的global 
alignment。雖然Ferre等人在文獻上(16)宣稱DIAL在實際的操作上，不管是執行的速度或是預測的準確
度，都比ARTS還要來得好，但是就我們實際的操作與觀察(17)，我們仍發現在有些情況之下DIAL所產
生的RNA結構比對仍是有錯的，甚至DIAL在考慮並計算鹼基配對相似度時所花的時間仍是相當地多
(雖然已用了 20個CPU的PC cluster來執行)。我們的SARSA (17)則利用一種完全不同的演算法來進行兩
個與多個RNA三級結構的比對。首先我們利用所謂的向量量化(vector quantization)的技巧把一些RNA殘
基主幹(backbone)在三維空間的形構(conformation)畫分成 23 類，每一類再用一個英文字母來表示，然
後把這 23 個字母視為一個RNA結構的字元集(structural alphabet; 簡稱SA)。接著我們再透過這個結構
字元集把每一個RNA三級結構重新編碼成由這 23 個結構字母所構成的一維序列(簡稱SA-encoded 
sequence)，然後再利用傳統的序列比對演算法來比較與分析這些SA-encoded序列以決定出他們之間結
構的相似程度。我們的SARSA (Structural Alignment of RNA using a Structural Alphabet)裡頭含有二個軟
體程式，一個叫做PARTS (Pairwise Alignment of RNA Tertiary Structures)可執行兩個RNA三級結構的比
對，另一個叫做 MARTS (Multiple Alignment of RNA Tertiary Structures) 可以執行多個RNA三級結構之
間的比對。對於PARTS而這，其目前可以執行四種不同的兩個RNA結構的比對：(a) global alignment，
(b) semi-global alignment，(c) local alignment，(d) normalized local alignment。Global alignment可以讓使
用者比較與分析兩個RNA三級結構整體的相似程度；semi-global alignment可讓使用者去偵測一個RNA
三級結構中有無出現一個已知的structural motif；local alignment可讓使用者找出兩個RNA三級結構局部
相似的地方；normalized local alignment可以讓使用者去掉在local alignment中間不像的區域。上述幾種
演算法的時間複雜度都至少是O(n2)，因此對持續不斷增長的RNA三級結構資料庫而言，利用這些演算
法來進行資料庫的大量搜尋並不實用。 
5 
 
RNA在空間結構上的差異，而這個差異將可做為我們在判斷二個 RNA三級結構是否『不像』的依據，
進而可以幫我們把結構不像的 RNA給快速地過濾掉。最後，我們會從這個步驟所得到的所有二級結構
用一個 hash table來存放，以方便我們在第三步驟時能夠快速地進行搜尋。第二個步驟是從使用者輸入
並且要去搜尋的 RNA 中得到一個或多個 RNA 的二級結構。我們允許使用者輸入以下任一種結構的
RNA：(1)三級結構：即輸入一個 PDB 檔，並選擇性地(optional)設定要搜尋的範圍，(2)二級結構：即
輸入一個 dot-bracket 格式的二級結構，並選擇性地輸入一級結構 RNA 序列，(3)一級結構：即輸入一
個 FASTA 格式的一級結構(即 RNA序列)。若使用者輸入要搜尋的 RNA(以下我們稱之為 query RNA)
是三級結構的話，我們會利用 RNAView (19)這個軟體去取得該結構中的二級結構。如果 query RNA是
一級結構的話，我們會利用 RNAsubopt (20)這個軟體去預測出一組最多不超過 X=16 個次佳的
(suboptimal)RNA二級結構(使用者可以隨意改變預設的 X值)。事實上，在這個研究當中我們發現軟體
預測出來的最佳或是次佳二級結構常常不等於真實的二級結構。因此，為了增加搜尋時的準確度，我
們利用另一個方法去得到一組最多不超過 X=16個真實的 RNA二級結構。這個方法就是先去搜尋 PDB
資料庫把 RNA序列與 query RNA一模一樣的 PDB檔先給找出來，然後再把每個找到 PDB檔的二級結
構給找出來，接著根據所找到二級結構的出現頻率做個排序，最後取出不超過 X=16個的二結構出來。
第三個步驟是利用第二個步驟所得到 query RNA 的二級結構(一個或多個)去搜尋 PDB 資料庫並把與
query RNA二級結構相同的 RNA給找出來。為了加快搜尋的速度，我們設計一個 hashing演算法(細節
請參考附件的論文)來進行這項 RNA二級結構的搜尋工作。當我們利用 hashing演算法找出在 PDB資
料庫裡所有二級結構與 query RNA的二級結構一樣的 RNA之後，我們經常可以發現這些找到的 RNA
三級結構未必與 query RNA的三級結構相像，這種情況常發生我們用一些簡單的 RNA結構來做 query
的時候，而且這種情況所找到的 RNA又特別的多而且大部份的三級結構都不像 query RNA。因此，我
們設計了一個 3D的過濾器可以幫我們快速地濾掉這些三級結構不像的 RNAs。們的做法如下，為了方
便說明，我們假設 Q是 query RNA三級結構，Q'是我們利用 hashing演算法找到的一個與 Q的二級結
構一樣的 RNA。首先我們利用 AMIGO (18)這個軟體去計算出 Q與 Q'的蟲，然後再去計算這兩個蟲之
間的平均歐幾里得(Euclidean)距離(細節請參考附件的論文)，若這個距離大於我們事先給定的一個
threshold (經我們的測試之後把此值定在 55)，我們就認定 Q'與 Q之間的三級結構是不像的，因此會把
Q'給過濾掉不看，否則我們會再去進一步地去計算 Q'與 Q之間的 RMSD (Root Mean Square Deviation)，
最後再根據計算出來的 RMSD做個排序把找到的 RNAs給 show出來，同時提供一個連結可以 show出
Q'與 Q之間三級結構的重疊。 
 
圖三: FASTR3D演算法的流程圖。 
由於我們之前發出來比對兩個 RNA三級結構相似度的軟體工具 PARTS在扭轉角度上的選取以及
分群並非完善，因此我們進一步將其改良成另一版本並取名為 iPARTS (21)。這結構比對工具的演算法
7 
 
式E=Kmn–λS所計算出來的(23)，其中m和n分別代表queryRNA結構和PDB資料庫的大小，S是結構比對
的原始分數，而K和λ為統計上的參數。除此之外，我們也利用島嶼方法(island method)以得到較為正確
的K和λ參數估計(24)。不可避免的，有一些R3D-BLAST所搜尋到的RNA子結構(特別是有高E-value值的
RNA子結構)反而與query RNA三級結構的子結構不太像。目前我們的做法是去設計一個過濾器來篩選
掉這些不像的RNA子結構。 
五、 結果與討論 
我們根據在第四節研究方法所描述的演算法發展出一個軟體工具叫 HPknotter 
(http://genome.cs.nthu.edu.tw/HPKNOTTER/)，同時也從一些文獻與 PseudoBase 中收集了一些含有
H-type pseudoknots的 RNA序列，來測試我們發展出來的 HPknotter。測試的結果顯示出我們的方法確
實可以大大地縮短現有軟體執行時所需的時間，同時也能增加他們要處理的 RNA序列長度，甚至可以
大幅度地提高他們預測的準確度。除此之外，我們也結合了 HPknotter 與序列模式辨認、結構生物學和
功能生物學方法，成功地設計出有效率與高準確度的工具 PRooF (http://genome.cs.nthu.edu.tw/PROOF/)
可偵測出基因體序列上會發生程序性核糖體移碼的位置，以及其後方擔任刺激物的 RNA二級結構。 
除此之外，為了評估 FASTR3D，我們拿了一些一級、二級與三級結構的 RNA 來測試我們的
FASTR3D，同時把輸入是一級與二級 RNA的結果與另一個軟體工具叫 RNA FRABASE (25)來相互比
較。RNA FRABASE裡頭的 search利用正規表示(regular expression)與圖樣辨式(pattern recognition)的方
法(方法的細節該論文並無描述)去搜尋 PDB資料庫裡頭與 query RNA的一級結構與(或)二級結構完全
相同的 RNA出來。比較 FASTR3D與 RNA FRABASE的實驗結果顯示，若 query RNA是二級結構的
話，那麼二者之間的差異不大，因為二者在搜尋時的依據相同(即找二級結構與 query RNA一模一樣的
RNA)，只是實做方法不同。但是 query RNA是一級結構的話，那麼我們的 FASTR3D找到的 RNAs會
比 RNA FRABASE來得多樣化些，因為 RNA FRABASE只會找出序列和 query一模一樣的 RNA，但
很多時候序列不同的 RNA 彼此的二級結構甚至三級結構是相似的，因此我們的 FASTR3D 會比 RNA 
FRABASE找出更多與 query的二級(甚至三級)結構一樣或是相似的 RNA。舉列來說，我們從嗜鹽古菌
(H. Marismortui)核糖體的大亞基(large subunit)取出一個 RNA的片斷(PDB ID: 1FFK, chain: 0, nucleotide 
number: 2558-2575)出來，然後把這個片斷的 RNA序列餵到 FASTR3D與 RNA FRABASE去搜尋 PDB
資料庫，結果 RNA FRABASE出到 51個與 query序列相同的 RNAs出來，但我們的 FASTR3D找到了
304個 RNAs。基本上，FASTR3D利用 query的序列內容在 PDB資料庫裡找出 10個真實但不同的二級
結構(即這 10 個 RNA 的序列相同，但二級結構不同，除此之外這些二級結構都真實地存在於 PDB 資
料庫的某一個 RNA裡頭)，然後再由這 10個二級結構找出 304個 RNAs出來。經我們把這個 query的
三級結構餵到 FASTR3D去搜尋比較發現，上述 304個 RNAs裡頭有 94個的三級結構與 query的三級
結構非常相似(RMSD介於0與1.80埃之間)。接著，我們也利用了一些RNA的三級結構去測試FASTR3D 
(註：目前 RNA FRABASE並無法讓使用者輸入三級結構的 RNA去進行搜尋)。首先我們輸入了一個核
糖開關的子結構(PDB ID: 1Y27, chain: X, nucleotide numbers: 27-43 and 54-72)，結果我們的 FASTR3D
可以在很快的時間內(不到1秒鐘)找到另外9個(PDB IDs: 2G9C, 2B57, 2EEW, 2EEU, 2EES, 1U8D, 2EET, 
2EEV and 3DS7)與 query的三級結構非常相似(RMSD介於 0.98與 1.04埃之間)的核糖開關。另外，我
們也輸入了一個在程序性核糖體移碼後方的 H 型假結(H-type pseudoknot) (PDB ID: 1YG3, chain: A, 
nucleotide numbers:3-30)，我們的 FASTR3D也可在很快的時間內找出另外 4個(PDB IDs: 1YG4, 2AP0 
and 2AP5)結構非常相似(RMSD介於 1.71與 2.9埃之間)的 H型假結出來。上述的研究成果，包括演算
法設計、FASTR3D 軟體工具開發、實驗測試結果的分析以及與現有軟體之間的比較等等已刊登在
Nucleic Acids Research (SCI=7.836)這份國際期刊上(26)。 
接著，為了評估 iPARTS 在比對結構上的準確度，我們將拿 iPARTS 與之前我們所發展的版本
PARTS 及其他結構比對工具(ARTS 與 LaJolla)做比較。首先準備實驗用的資料組，我們從 SCOR 的資
9 
 
R-FSCOR及 T-FSCOR)來測試 iPARTS在 RNA功能預測上的能力。在 FSCOR中共有 419個 RNA結構
包含了 192個分類，R-FSCOR則是每個分類中的代表，即共有 192個結構，而 T-FSCOR為 FSCOR中
除了 192個代表之外的結構。以 Capriotti和Marti-Renom之定義，兩個 RNA結構若在 SCOR的資料庫
中有了相同的功能註解則其 geodesic distance將為 0 (d = 0)；而若兩個 RNA結構的功能註解在 SCOR
資料庫的 directed acyclic graph (DAG)組織中所連結的邊小於或等於 2時則 d ≤ 2。這以 RNA結構為依
據的功能預測將以單一個 RNA做為 query後對於已知功能註解的 RNA結構資料組進行搜尋，爾後將
搜尋得到的最為符合之結構的功能做為其 query所預測得到的功能。Capriotti和Marti-Renom以這樣的
做法進行了兩個不同樣的測試，其一是用 FSCOR做為資料組後以 leave-one-out的方法進行測試，即從
FSCOR中抽出一條結構當成 query，而剩餘的其它結構當成所搜尋的資料庫；其二是以 T-FSCOR中的
結構當成 query，R-FSCOR則當成所搜尋的資料庫。在 Capriotti和Marti-Renom發表的論文(27)中所得
到的結果以 leave-one-out的測試方法來說，在 d = 0及 d ≤ 2時分別能得到 0.61和 0.83的 AUC值，而
在另一項測試對於 d = 0及 d ≤ 2則分別得到了 0.58及 0.85的 AUC值。依上述的測試方法，我們以
iPARTS重複了這樣的實驗，並在 leave-one-out的方法中得到了 d = 0及 d ≤ 2的 AUC值分別為 0.72和
0.92，而在另一個測試中於 d = 0及 d ≤ 2則分別得到了 0.77和 0.90的 AUC值，在圖七中可以看到其
兩種測試的 ROC curves。從這樣的結果裡面我們能得知 iPARTS所得到的 AUC值皆比 SARA高，故
iPARTS在 RNA功能預測的能力上可以表現得比 SARA來得更好。 
 
圖七: iPARTS在 RNA功能預測上所得到的 ROC curves。(a)以 FSCOR資料組在 d = 0及 d ≤ 2所得到
的 AUC值分別為 0.72及 0.92。(b)以 T-FSCOR和 R-FSCOR的資料組於 d = 0及 d ≤ 2所得到的 AUC
值分別為 0.77及 0.90。 
上述的研究成果，包括演算法設計、iPARTS 軟體工具開發、實驗測試結果的分析以及與現有軟
體之間的比較等等在 2010年發表於 Nucleic Acids Research (SCI=7.836)這份國際期刊上(21)。 
最後，為了驗證我們所發展出來的 R3D-BLAST 在搜尋 RNA 三級子結構的正確性，我們利用一
些 RNA三級結構來做測試，也利用類似的工具，如 RNA FRABASE和我們的 FASTR3D來對尋找結
果做比較(如表一所示)，雖然 RNA FRABASE與 FASTR3D這兩個工具是被設計用來尋找整個 RNA結
構，而 R3D-BLAST則是用來搜尋相似 RNA子結構。表一中標題的百分比代表 query的覆蓋範圍(即為
query RNA參與結構比對的百分比)。從表一可得知，除了 tRNA之外，我們的 R3D-BLAST相較於 RNA 
FRABASE和 FASTR3D找出相同或更多的完整 RNA三級結構(即查詢範圍為 100%)。至於 tRNA這個
RNA 分子，R3D-BLAST 找到的完整(即查詢範圍為 100%)且結構相似的 tRNA 比 RNA FRABASE 和
FASTR3D還少，主要原因是其他被 RNA FRABASE和 FASTR3D找到的 tRNA，他們尾端的三級結構
與 query RNA是不太相似的，結果這些不相似的尾端區域是被我們的 R3D-BLAST給去掉了，故造成
R3D-BLAST所搜尋到整體三級結構相似的 RNA分子比 RNA FRABASE和 FASTR3D還少。事實上，
被 RNA FRABASE和 FASTR3D所找出來的全部的 tRNA與其他未被出找來的 tRNA仍可以被我們的
11 
 
including pseudoknots. Journal of Molecular Biology, 285, 2053-2068. 
7. R.M. Dirks and N.A. Pierce. (2003) A partition function algorithm for nucleic acid secondary structure 
including pseudoknots. Journal of Computational Chemistry, 24, 1664-1677. 
8. J. Reeder and R. Giegerich. (2004) Design, implementation and evaluation of a practical pseudoknot 
folding algorithm based on thermodynamics. BMC Bioinformatics, 5. 
9. S.R. Eddy. (2001) Non-coding RNA genes and the modern RNA world. Nature Reviews Genetics, 2, 
919-929. 
10. S. Moon, Y. Byun, H.J. Kim, S. Jeong and K.S. Han. (2004) Predicting genes expressed via-1 and+1 
frameshifts. Nucleic Acids Research, 32, 4884-4892. 
11. A.A. Shah, M.C. Giddings, R.F. Gesteland, J.F. Atkins and I.P. Ivanov. (2002) Computational 
identification of putative programmed translational frameshift sites. Bioinformatics, 18, 1046-1053. 
12. M. Bekaert, L. Bidou, A. Denise, G. Duchateau-Nguyen, J.P. Forest, C. Froidevaux, I. Hatin, J.P. 
Rousset and M. Termier. (2003) Towards a computational model for-1 eukaryotic frameshifting sites. 
Bioinformatics, 19, 327-335. 
13. R. Kolodny and N. Linial. (2004) Approximate protein structural alignment in polynomial time. 
Proceedings of the National Academy of Sciences of the United States of America, 101, 12201-12206. 
14. O. Dror, R. Nussinov and H.J. Wolfson. (2006) The ARTS web server for aligning RNA tertiary 
structures. Nucleic Acids Research, 34, W412-W415. 
15. O. Dror, R. Nussinov and H. Wolfson. (2005) ARTS: alignment of RNA tertiary structures. 
Bioinformatics, 21, 47-53. 
16. F. Ferre, Y. Ponty, W.A. Lorenz and P. Clote. (2007) DIAL: a web server for the pairwise alignment of 
two RNA three-dimensional structures using nucleotide, dihedral angle and base-pairing similarities. 
Nucleic Acids Research, 35, W659-W668. 
17. Y.F. Chang, Y.L. Huang and C.L. Lu. (2008) SARSA: a web tool for structural alignment of RNA 
using a structural alphabet. Nucleic Acids Research, 36, W19-W24. 
18. C.M. Duarte and A.M. Pyle. (1998) Stepping through an RNA structure: A novel approach to 
conformational analysis. Journal of Molecular Biology, 284, 1465-1478. 
19. H.W. Yang, F. Jossinet, N. Leontis, L. Chen, J. Westbrook, H. Berman and E. Westhof. (2003) Tools 
for the automatic identification and classification of RNA base pairs. Nucleic Acids Research, 31, 
3450-3460. 
20. S. Wuchty, W. Fontana, I.L. Hofacker and P. Schuster. (1999) Complete suboptimal folding of RNA 
and the stability of secondary structures. Biopolymers, 49, 145-165. 
21. C.W. Wang, K.T. Chen and C.L. Lu. (2010) iPARTS: an improved tool of pairwise alignment of RNA 
tertiary structures. Nucleic Acids Research, 38, W340-W347. 
22. B.J. Frey and D. Dueck. (2007) Clustering by passing messages between data points. Science, 315, 
972-976. 
23. S. Karlin and S.F. Altschul. (1990) Methods for assessing the statistical significance of molecular 
sequence features by using general scoring schemes. Proceedings of the National Academy of Sciences 
of the United States of America, 87, 2264-2268. 
24. S.F. Altschul, R. Bundschuh, R. Olsen and T. Hwa. (2001) The estimation of statistical parameters for 
local alignment score distributions. Nucleic Acids Research, 29, 351-361. 
 13 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。 
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
▓ 達成目標 
□ 未達成目標（請說明，以 100字為限） 
□ 實驗失敗 
□ 因故實驗中斷 
□ 其他原因 
說明： 
 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：▓已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 □無 
技轉：□已技轉 □洽談中 □無 
其他：（以 100字為限） 
 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500字為限） 
 
本計劃已發展出可以快速且準確地預測出含有H-型假結的RNA二級結構的軟體工具
(HPknotter)，同時也將此工具與其它技術(如圖形辨視與功能生物資訊)做結合並開發出可
預測程序性核糖體移碼的軟體工具(PRooF)。除此之外，本計劃也進一步地設計出快速且
準確的演算法與軟體工具可比對出兩個 RNA三級結構之間的相似程度(iPARTS)，以及可
以搜尋出 PDB資料庫裡與 query RNA三級結構整體或局部相似的 RNA分子(FASTR3D與
R3D-BLAST)。這些生物資訊軟體的開發未來將有助於生物學家對 RNA分子結構與功能
的關係有更進一步的了解。目前為止，我們已將上述的部份研究成果寫成三篇論文且皆刊
登在國際知名的 Nucleic Acids Research期刊上(SCI=7.836, Rank=30/286=10.5%)。值得一提
的是我們 R3D-BLAST的研究論文被 Nucleic Acids Research選為當期(July, 2011)的 feature 
article之一(即 top 5% of NAR論文)，這可間接地證明本計劃的執行與研究成果確實有學術
與應用上的價值。 
 
 
 
fragments by comparing their pseudotorsion angles.
RNAMotif ﬁnds the fragments of an RNA sequence
that conform to a predeﬁned descriptor of deﬁning a par-
ticular motif of secondary structure.
In this study, we have developed a web server, called
FASTR3D (‘Fast and Accurate Search Tool for RNA
3D structures’), based on a hashing algorithm that is able
to fast and accurately ﬁnd structural similarities for a query
of RNA molecule in the PDB database. In principle, this
hashing algorithm consists of three main procedures as
follows. The ﬁrst procedure is to derive the primary
sequence, secondary structure and tertiary structure infor-
mation of all RNA molecules currently deposited in the
PDB database and then store the derived second structures
in a hash table. The secondary procedure is to derive some
possible secondary structures of the query RNA if it is a
primary sequence or tertiary structure. The third procedure
is to search the hash table for all candidate RNAs whose
secondary structures exactly match that of the query RNA,
followed by primary sequence ﬁlter and/or tertiary struc-
ture ﬁlter to screen out those candidates whose primary
sequences and/or tertiary structures are not equal to that
of the query RNA. The FASTR3D web server is now
available online at http://bioalgorithm.life.nctu.edu.tw/
FASTR3D/ for public access.
In addition, our FASTR3D was tested with a number of
RNA primary sequences, secondary structures and ter-
tiary structures, and its experimental results on querying
RNA primary sequences and secondary structures were
also compared with those obtained by the search tool of
RNA FRABASE (http://rnafrabase.ibch.poznan.pl/),
which was developed by Popenda et al. (21) on the basis
of RNA primary sequences and/or secondary structures
using the methods of regular expression and pattern
recognition. The comparison of experimental results on
querying secondary structures reveals that FASTR3D
has a comparable performance as RNA FRABASE,
both with returning the search results in a short time.
However, our FASTR3D is able to ﬁnd more structurally
similar RNAs for a query of RNA primary sequence,
when compared with RNA FRABASE, because
FASTR3D searches for structurally similar RNAs using
the secondary structure derived from the query sequence,
while RNA FRABASE searches them solely based on the
primary sequence. In addition, the function of querying
RNA tertiary structures in FASTR3D, as well as the
online graphical display of showing the structural super-
position of the query and identiﬁed structures, is not
available in RNA FRABASE.
METHODS
Our FASTR3D was implemented based on a hashing
algorithm whose procedure ﬂowchart, as shown in
Figure 1, consists of three major procedures. The ﬁrst
procedure is a preprocessing job that is to derive the pri-
mary sequence, secondary structure and tertiary structure
information of all RNAs in the PDB database and partic-
ularly store the derived secondary structures (i.e. standard
Watson–Crick and wobble base pairs) in a hash table.
Note that the secondary structure information was derived
using the RNAView program (22), while the tertiary struc-
ture information of pseudotorsion angles Z and  values
was derived using the AMIGOS program (23). The sec-
ond procedure is to derive the secondary structure
information for the RNA queried by the user. Currently,
the user can input any of the following three types of
queries: (i) a PDB code of an RNA tertiary structure
optionally with speciﬁed residue range, (ii) an RNA sec-
ondary structure, optionally with primary sequence, in the
dot-bracket notation, and (iii) an RNA primary sequence
in the FASTA format. If the query is a PDB code of an
RNA tertiary structure, then its secondary structure is
derived from its PDB ﬁle, which is downloaded from the
PDB database, using the RNAView program (22). If the
query is an RNA primary sequence, then a set of at most
X suboptimal secondary structures is derived using
the RNAsubopt program (24), where the default value
of X is 16. It is often observed that the suboptimal sec-
ondary structure predicted by RNAsubopt for an RNA
molecule may not be the true secondary structure.
Therefore, we design an alternative approach as follows
to derive a set of at most X most frequently occurring true
secondary structures for the query RNA sequence. First,
we search the PDB database for all the RNAs whose pri-
mary sequences are equal to the query sequence. Then, we
use RNAView to derive all the secondary structures from
the PDB ﬁles of these RNAs and from them we ﬁnally
select at most X most frequently occurring secondary
structures. The third procedure is to use the hash table
to quickly search for all candidate RNAs whose secondary
structures exactly match that of the query RNA (or any
of X predicted/true secondary structures for the query
RNA), followed by primary sequence ﬁlter (if the query
RNA has primary sequence information) and/or tertiary
structure ﬁlter (if the query is an RNA tertiary structure)
to screen out those candidates whose primary sequences
and/or tertiary structures are not equal to that of the
query RNA.
In the following, we describe the details of the signiﬁ-
cant steps in the above procedures, including how to pre-
pare the hash table of the secondary structures of all RNA
molecules currently deposited in the PDB database, how
to use this hash table to search for RNA structural simi-
larities and how to utilize the Z and  values to eﬃciently
screen out structurally non-similar candidates. For simpli-
city, we let D={S1,S2, . . . ,Sm} denote the database of
the secondary structures derived from the PDB database
using the RNAView program (22), and let Q be the sec-
ondary structure of the query RNA. Note that in the
structural database D, each structure Si is labelled with
an integer i, to which we refer as the index of Si.
Moreover, we denote by the k-tuple a consecutive
sequence of k nt (residues) within an RNA molecule.
Clearly, there are (|S| k+1) overlapping k-tuples for a
given RNA secondary structure S with |S| residues. The
oﬀset of a k-tuple within S is deﬁned to be the position of
its ﬁrst residue with respect to the ﬁrst residue of S. For
convenience, we use the letter j to denote oﬀset and use the
notation wj(S) to denote the k-tuple of S that has oﬀset j.
Therefore, the position of each occurrence of each k-tuple
W288 Nucleic Acids Research, 2009, Vol. 37,Web Server issue
occurrences for each of the nine possible 2-tuples, denoted
by w. Then the pointer at E(w) of A points to the begin-
ning of the position list corresponding to w and the con-
catenation of the nine position lists in the order from top
to bottom forms L.
Query substructure search
In the following, we describe how to use the hash table of
the structural database D as constructed above to search
for all occurrences of a query Q of an RNA secondary
structure. Suppose that the length of Q is n. Then we can
proceed position-by-position along Q from position 1
to n k+1. At position p, where 1 p n k+1, we
obtain the list of the positions of all the occurrences of
the k-tuple wp(Q) from the hash table of D via the pointer
of E(wp(Q)). Let this list contain q positions, say (i1, j1), (i2,
j2), . . . , (iq, jq). From this list, we derive a list of hits
H1= (i1, j1 p, j1),H2= (i2, j2 p, j2), . . . ,Hq=(iq, jq p,
jq). This list of hits is then added to a master list M of hits
that accumulates all the hits we derived when p runs from
1 to n k+1. For convenience, the elements of a hit are
referred to as the index, shift and oﬀset. Next, we sort all
the elements inM ﬁrst by index and then by shift. Finally,
we scan through M by looking for runs of hits for which
the index and shift are identical. Clearly, by further sorting
each of these runs by oﬀset, we can determine the region
of some structure in D that exactly matches the query
structure Q. For example, we search for the query of an
RNA secondary structure Q=‘() ’ within the hash
table of D as constructed in Table 1. In Table 2, column
3 displays the occurrence positions in D for each 2-tuple of
Q, with corresponding hits shown in column 4, and
column 5 shows the sorted M in which the run of three
hits highlighted in bold indicates that there is a match
between Q and S1 that starts at the third nucleotide and
ends at the eighth nucleotide. Basically, the search speed
of the above hashing algorithm is proportional to the size
of the master listM, which falls oﬀ rapidly with increasing
the value of k. Although a greater k increases the search
speed, the condition |Q| 2k 1 should be satisﬁed to
guarantee that the hashing algorithm will ﬁnd a hit at
some point in the matching region. For example, suppose
that S=‘(())’ and Q=‘()’. If k=4, then none of
three overlapping 4-tuples in Q is able to match any of
two non-overlapping 4-tuples in S. In addition, the hash
table is generated in advance for a ﬁxed k in our
algorithm. Therefore, to achieve the best search speed
and reduce the storage requirement, we set the value of
k as min 20; jQj2
  
.
Tertiary structure filter using pseudotorsion angles
Basically, the comparison of RNA conformation is a high-
dimensional problem, because six standard torsion angles
(a, b, g, d, e and z) are needed to specify the backbone
conformation of a single nucleotide. Duarte and Pyle (23),
however, pointed out that the pseudotorsion angles Z
(C40i1  Pi  C40i  Piþ1) and  (Pi  C40i  Piþ1  C40iþ1)
are at least as descriptive of backbone morphology as
standard torsion angles and they may be even superior
in terms of specifying the backbone conformation of an
individual nucleotide. This suggests that the Z– plot can
provide us a 2D representation of the conformation prop-
erties of an entire RNA molecule, so that we can carry out
the rapid and accurate comparison of RNA conforma-
tions. Duarte et al. (19) further called such an ordered
set of Z– coordinates as an RNA worm. As was used
by Duarte et al. (19), we can detect the conformation
diﬀerence of two RNAs by comparing their worms
based on a Euclidean metric as follows. Let Q0 denote
an identiﬁed candidate RNA whose secondary structure
matches that of the query RNA Q with n residues, and let
the worms of Q and Q0 denoted by {(Z1,1, 1,1), . . . , (Z1,n,
1,n)} and {(Z2,1, 2,1), . . . , (Z2,n, 2,n)}, respectively. The
conformational diﬀerence between two residues (Z1,i, 1,i)
and (Z2,i, 2,i) is deﬁned to be ð; Þi ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
2i þ2i
p
,
where Zi=min{|Z1,iZ2,i|, 360 |Z1,iZ2,i|} and
i=min{|1,i 2,i|, 360 |1,i 2,i|} (since 08 and
3608 are the same). As was also pointed out by Duarte
et al. (19), two residues (Z1,i, 1,i) and (Z2,i, 2,i) can be
considered structurally identical if (Z, )i< 258.
Therefore, based on this property, we design our tertiary
structure ﬁlter to discard the identiﬁed RNA Q0 from con-
sideration if the average conformation diﬀerence ð; Þ
between Q and Q0 is greater than or equal to a predeﬁned
cutoﬀ, where ð;Þ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
ð
Pn
i¼1ðð;ÞiÞ
2Þ=ðnÞ
p
and for our purpose,
the cutoﬀ value is set as 558.
USAGE OF FASTR3D
Input
FASTR3D provides an intuitive user interface as illu-
strated in Figure 2. In basic search, the user can submit
Table 1. A 2-tuple hash table for S1= ‘((()))’ and S2= ‘(()) ’
2-tuple w E(w) Position lists
 0 (1, 5), (2, 5)
( 1 (2, 1)
) 2 (2, 7)
( 3 (1, 3), (2, 3)
(( 4 (1, 1)
() 5
) 6 (1, 7), (2, 9)
)( 7
)) 8 (1, 9)
Table 2. The search of the query secondary structure Q=‘()’
p wp(Q) Positions H M
1 ( (1, 3) (1, 2, 3) (1, 2, 3)
(2, 3) (2, 2, 3) (1, 2, 5)
2  (1, 5) (1, 3, 5) (1, 2, 7)
(2, 5) (2, 3, 5) (1, 3, 5)
3  (1, 5) (1, 2, 5) (2, 2, 3)
(2, 5) (2, 2, 5) (2, 2, 5)
4 ) (2, 7) (2, 3, 7) (2, 3, 5)
5 ) (1, 7) (1, 2, 7) (2, 3, 7)
(2, 9) (2, 4, 9) (2, 4, 9)
W290 Nucleic Acids Research, 2009, Vol. 37,Web Server issue
EXPERIMENTAL RESULTS
For the purpose of evaluation, our FASTR3D was tested
with a number of RNA primary sequences and secondary/
tertiary structures, and its experimental results on query-
ing RNA primary sequences and secondary structures
were also compared with those obtained by RNA
FRABASE. Basically, our FASTR3D has a comparable
performance as RNA FRABASE on querying RNA sec-
ondary structures, because the basic principles behind
these two tools are the same, even though they were
Figure 4. The visual display of query RNA (top left panel) and an identiﬁed RNA (top right panel) and their superposition (bottom panel).
Figure 3. The output of FASTR3D on querying an RNA tertiary structure.
W292 Nucleic Acids Research, 2009, Vol. 37,Web Server issue
of 1 PRF in ScYLV (30). In this experiment, FASTR3D
quickly found other three RNA pseudoknots (PDB
IDs: 1YG4, 2AP0 and 2AP5) in the PDB database
whose 3D structures are very similar to that of the
query, where their RMSDs to the query is between
1.71 A˚ and 2.97 A˚. Figure 6b displays the superposition
of the query and the identiﬁed pseudoknot 2AP5 whose
RMSD is 2.97 A˚.
For more details on the above experiments, as
well as other experiments, we refer the reader to help
page of our FASTR3D at http://bioalgorithm.life.nctu.
edu.tw/FASTR3D/help.html. Basically, when queried
with RNA primary sequences, our FASTR3D can pro-
vide more unintended structures than RNA FRABASE
as the query sequences are not as conserved as their
secondary structures. On the other hand, the search
results by our FASTR3D using RNA tertiary struc-
tures have the intended structures with more vari-
ous sequences than those by RNA FRABASE using
their primary sequences and secondary structures as
the input.
SUMMARY
FASTR3D is a web-based search tool that allows the user
to quickly and accurately search the PDB database for
structural similarities of a query RNA. The user can
query this tool by using either an RNA tertiary structure,
an RNA secondary structure or an RNA primary
sequence. Since the hashing algorithm, as well as tertiary
structure ﬁlter, behind our FASTR3D is highly eﬃcient, a
typical query can be done in a short time. It is worth
mentioning again that the function of querying RNA ter-
tiary structures in our FASTR3D, as well as the online
graphical display of showing structural superposition, is
not available in RNA FRABASE. Therefore, we believe
that our FASTR3D can serve as a useful tool in the study
of structural biology.
FUNDING
National Science Council of Republic of China (NSC97-
2221-E-009-081-MY3 in part). Funding for open access
charge: ATU plan of MOE.
Conﬂict of interest statement. None declared.
REFERENCES
1. Doudna,J.A. (2000) Structural genomics of RNA. Nat. Struct. Biol.,
7, 954–956.
2. Eddy,S.R. (2001) Non-coding RNA genes and the modern RNA
world. Nat. Rev. Genet., 2, 919–929.
3. Mattick,J.S. and Makunin,I.V. (2006) Non-coding RNA. Hum.
Mol. Genet., 15, R17–R29.
4. Storz,G. (2002) An expanding universe of noncoding RNAs.
Science, 296, 1260–1263.
5. He,S., Liu,C., Skogerbo,G., Zhao,H., Wang,J., Liu,T., Bai,B.,
Zhao,Y. and Chen,R. (2008) NONCODE v2.0: decoding the
non-coding. Nucleic Acids Res., 36, D170–D172.
6. Pang,K.C., Stephen,S., Dinger,M.E., Engstrom,P.G., Lenhard,B.
and Mattick,J.S. (2007) RNAdb 2.0–an expanded database of
mammalian non-coding RNAs. Nucleic Acids Res., 35, D178–D182.
7. Griﬃths-Jones,S., Saini,H.K., van Dongen,S. and Enright,A.J.
(2008) miRBase: tools for microRNA genomics. Nucleic Acids Res.,
36, D154–D158.
8. Kin,T., Yamada,K., Terai,G., Okida,H., Yoshinari,Y., Ono,Y.,
Kojima,A., Kimura,Y., Komori,T. and Asai,K. (2007) fRNAdb: a
platform for mining/annotating functional RNA candidates from
non-coding RNA sequences. Nucleic Acids Res., 35, D145–D148.
9. Szymanski,M., Erdmann,V.A. and Barciszewski,J. (2007)
Noncoding RNAs database (ncRNAdb). Nucleic Acids Res., 35,
D162–D164.
10. Berman,H.M., Westbrook,J., Feng,Z., Gilliland,G., Bhat,T.N.,
Weissig,H., Shindyalov,I.N. and Bourne,P.E. (2000) The protein
data bank. Nucleic Acids Res., 28, 235–242.
11. Berman,H.M., Westbrook,J., Feng,Z., Iype,L., Schneider,B. and
Zardecki,C. (2002) The nucleic acid database. Acta Crystallogr.
D Biol. Crystallogr., 58, 889–898.
12. Kolodny,R. and Linial,N. (2004) Approximate protein structural
alignment in polynomial time. Proc. Natl Acad. Sci. USA, 101,
12201–12206.
13. Dror,O., Nussinov,R. and Wolfson,H. (2005) ARTS: alignment of
RNA tertiary structures. Bioinformatics, 21 (Suppl. 2), 47–53.
Figure 6. (a) Tertiary structure of a frameshifting pseudoknot (PDB ID: 1YG3, chain: A, nucleotide numbers: 3–30). Stem 1 is in yellow, stem 2 is in
blue, loop 1 is in red, loop 2 is in green and the nucleotide (A13) between the two stems is in violet. (b) The superposition between the query
pseudoknot (1YG3) colored orange and an identiﬁed pseudoknot (2AP5) colored green with an RMSD of 2.97 A˚.
W294 Nucleic Acids Research, 2009, Vol. 37,Web Server issue
iPARTS: an improved tool of pairwise alignment
of RNA tertiary structures
Chih-Wei Wang1, Kun-Tze Chen1 and Chin Lung Lu1,2,*
1Institute of Bioinformatics and Systems Biology and 2Department of Biological Science and Technology,
National Chiao Tung University, Hsinchu 300, Taiwan, R.O.C
Received February 10, 2010; Revised May 3, 2010; Accepted May 14, 2010
ABSTRACT
iPARTS is an improved web server for aligning two
RNA 3D structures based on a structural alphabet
(SA)-based approach. In particular, we first derive a
Ramachandran-like diagram of RNAs by plotting nu-
cleotides on a 2D axis using their two pseudo-
torsion angles g and h. Next, we apply the affinity
propagation clustering algorithm to this g-h plot to
obtain an SA of 23-nt conformations. We finally use
this SA to transform RNA 3D structures into
1D sequences of SA letters and continue to utilize
classical sequence alignment methods to compare
these 1D SA-encoded sequences and determine
their structural similarities. iPARTS takes as input
two RNA 3D structures in the PDB format and
outputs their global alignment (for determining
overall structural similarity), semiglobal alignments
(for detecting structural motifs or substructures),
local alignments (for finding locally similar substruc-
tures) and normalized local structural alignments
(for identifying more similar local substructures
without non-similar internal fragments), with graph-
ical display that allows the user to visually view,
rotate and enlarge the superposition of aligned
RNA 3D structures. iPARTS is now available online
at http://bioalgorithm.life.nctu.edu.tw/iPARTS/.
INTRODUCTION
As both the number and the size of RNA tertiary 3D
structures deposited in the database continue to grow,
the techniques of RNA structure comparison have
become an increasingly crucial bioinformatics tool
because structures of molecules evolve more slowly than
their sequences and, therefore, their structural comparison
can bring more signiﬁcant insights into their functions and
even evolutionary relationships that would not be detected
by analyzing sequence information alone. Basically, de-
tecting structural similarities in two RNA 3D molecules
is not an easy problem because it has been shown to be
computationally intractable (1). Due to this reason, cur-
rently available software tools for comparing two RNA
3D structures, such as ARTS (2,3), DIAL (4), PARTS (5),
SARA (6,7) and LaJolla (8), are all based on some heur-
istic approaches.
ARTS is a web server for detecting maximum common
substructures between two given RNA 3D structures,
which was implemented by Dror et al. (2,3) based on a
heuristic algorithm of cubic running time. By representing
each RNA 3D structure by a set of its phosphate atoms,
ARTS identiﬁes all structurally similar quadrats (i.e. four
phosphate atoms located on two successive base pairs)
between the two input RNA 3D structures and continues
to extend them by using a greedy method for including
additional coincident base pairs and unpaired nucleotides.
ARTS is a good tool for detecting RNA structural motifs,
but it is still time-consuming for ARTS to compare large
RNA molecules (e.g. ribosomal RNAs) because of its
cubic time complexity and, as was pointed out in (4), the
structural alignments produced by ARTS may be incor-
rect sometimes. Later on, to overcome the inaccurate
problems caused by ARTS, Ferre´ et al. (4) implemented
DIAL, a web server for aligning two RNA 3D structures,
by using a dynamic programming algorithm of quadratic
running time based on a scoring function that combines
similarities of nucleotide sequences, base pairs,
pseudo-torsion (or pseudo-dihedral) and torsion (or
dihedral) angles. DIAL is a versatile web server by
providing the user three types of alignments: (i) global
alignment, (ii) local alignment and (iii) an extension of
global-semiglobal alignment [i.e. a global alignment of a
motif A consisting of one or more contiguous segments is
aligned to a contiguous sequence B; while gap penalties
apply throughout for A (global alignment), gaps at the end
of B as well as between portions aligned to contiguous
*To whom correspondence should be addressed. Tel: +886 3 5712121 (ext. 56949); Fax: +886 3 5729288; Email: cllu@mail.nctu.edu.tw
The authors wish it to be known that, in thier opinion, the ﬁrst two authors should be regarded as joint First Authors.
W340–W347 Nucleic Acids Research, 2010, Vol. 38, Web Server issue Published online 27 May 2010
doi:10.1093/nar/gkq483
 The Author(s) 2010. Published by Oxford University Press.
This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/
by-nc/2.5), which permits unrestricted non-commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.
 at N
ational Chiao Tung University Library on July 5, 2010 
http://nar.oxfordjournals.org
D
ow
nloaded from
 
work of PARTS (5) that was motivated from the works by
Hershkovitz et al. (11,12). For this purpose, we utilize a
recently introduced clustering algorithm, called aﬃnity
propagation (13), to classify the nucleotides in the 2D
Z-y plot, instead of using the vector quantization (VQ)
approach as used in PARTS (5). Like k-means clustering
approaches, the VQ methods suﬀer from local optimality
and are sensitive to outliers and noise (14). Moreover, for
the VQ clustering methods, the identiﬁed centers in their
clusters may be virtual nucleotides that cannot be
evaluated visually. The so-called ‘aﬃnity propagation’
(AP) algorithm, ﬁrst proposed by Frey and Dueck (13),
basically is an exemplar-based clustering method that con-
siders all data points as potential exemplars (or centers)
and exchanges messages (of how proper a data point
serves as the exemplar of another one or of how proper
a data point chooses another one as its exemplar) between
data points until a good set of exemplars and clusters
emerges (13). More importantly, Frey and Dueck (13)
have shown that the AP algorithm can obtain better so-
lutions than other frequently used methods, such as
K-centers clustering and hierarchical agglomerative clus-
tering algorithms.
In this study, we have derived a new SA of RNA nu-
cleotide conformations using their Z and y pseudo-torsion
angles and the AP algorithm. Based on this newly
designed SA, we have re-implemented our previous tool
PARTS as iPARTS (short for improved PARTS) to make
its structural alignments of two RNA molecules more
accurate. Our experimental results on some data sets
have ﬁnally shown that our iPARTS outperforms its
previous version PARTS, as well as ARTS and LaJolla,
on accuracy of aligning two RNA 3D structures without
compromising the computational eﬃciency and also out-
performs SARA on the function assignment of RNA
structures. Basically, the main diﬀerences between
iPARTS and PARTS are 2-fold. First, iPARTS uses the
AP algorithm to construct the SA according to two
pseudo-torsion angles of Z and y, while PARTS uses the
VQ method to construct it based on four standard torsion
angles of a, g, d and z. Second, iPARTS uses two data sets,
one of highly identical RNA structure pairs from the
DARTS database (15) and the other of structurally
similar RNA motif pairs from the SCOR database
(16,17), to construct the BLOSUM-like substitution
matrix, while PARTS uses only a data set of structurally
similar RNA motif pairs from the SCOR database to con-
struct it.
METHODS
The basic idea of our iPARTS algorithm is to reduce input
RNA 3D structures to 1D sequences of SA letters and
continue to use algorithms of classical sequence align-
ments to compare these 1D SA-encoded sequences and
determine their structural similarities. As mentioned
before, the 2D Z-y plot is a Ramachandran-like diagram
that can provide us a graphic representation of quantita-
tively distinct structural features for analyzing and
modeling RNA 3D structures (9,10). To depict this Z-y
plot, we prepared a data set that includes non-redundant
crystal structures with minimum resolution of 3.0 A˚
from the PDB database (18). This data set ﬁnally
contains 117 crystal RNA structures with 9527 nt in
total. Next, we used the AMIGOS program developed
by Duarte and Pyle (10) to calculate the Z and y
pseudo-torsion angles for all non-terminal nucleotides
(9267 nt in total) from all RNA molecules in the above
data set and plotted these calculated pseudo-torsion angles
on the axes of a 2D plot (refer to Supplementary Data for
the derived Z-y plot). We then continued to use the AP
clustering algorithm (13) to classify all the non-terminal
nucleotides in the Z-y plot into 23 conformation clusters,
each of which was further assigned a letter. We used the
set of these 23 letters as an SA and encoded RNA 3D
structures as 1D sequences of SA letters using the
so-called ‘nearest neighbor rule’, by which each nucleotide
in an RNA molecule is assigned with the letter whose
corresponding exemplar (or center) is nearest to the nu-
cleotide to be encoded. Next, we derived a log-odds matrix
for SA-letter substitutions using the statistical method that
was proposed by Henikoﬀ and Henikoﬀ (19). Finally,
we utilized classical sequence alignment algorithms,
such as global (20), semiglobal (21), local (22) and
normalized local (23) alignments, to compare two 1D
SA-encoded sequences for determining the similarities of
their corresponding RNA 3D structures. Notice that a
grid-like search procedure was performed to optimize
the parameters of open and extension gap penalties by
varying the open gap penalty from 15 to 1 in steps
of 1 and the extension gap penalty from 3 to 0.5 in
steps of 0.5. The reader is referred to Supplementary Data
for the details of above procedures. It is worth mentioning
here that the Smith–Waterman algorithm (22) for the local
alignment was originally designed to remove
non-similar initial and terminal fragments but not non-
similar internal fragments in a sequence alignment, result-
ing in a so-called ‘mosaic eﬀect’ by including poor internal
fragments in a local alignment (23). Such a mosaic ef-
fect still can be observed in local alignments of two
RNA 3D structures, as demonstrated on the help page
of our iPARTS server. To eliminate this mosaic eﬀect,
we implemented the algorithm proposed by Arslan et al.
(23) to solve the so-called ‘normalized local alignment
problem’, which aims to ﬁnd the subsequences, say I
and J, of two given sequences that maximizes S(I, J)/
(WIW+WJW) among all subsequences I and J with WIW+WJWT,
where S(I, J) is the alignment score between I and J, and
T is a threshold for the minimal overall length of I and J.
Usually, an alignment should be suﬃciently long to be
biologically meaningful. Therefore, the above length con-
straint of WIW+WJWT is necessary, since length normaliza-
tion in the normalized local alignment problem favors
short local alignments. The user can vary the value of
T to control the result of optimal normalized local align-
ment. If T is small, the optimal normalized local alignment
tends to be short; otherwise, it tends to be a long local
alignment that may contain some non-similar internal
fragments.
W342 Nucleic Acids Research, 2010, Vol. 38, Web Server issue
 at N
ational Chiao Tung University Library on July 5, 2010 
http://nar.oxfordjournals.org
D
ow
nloaded from
 
However, when testing ARTS and LaJolla on data set #1,
we found that not all pairs of RNA structures can be
aligned to successfully yield their common substructures.
Two RNA structures can be aligned by ARTS only when
each of them possess at least two successive base pairs.
For instance, ARTS cannot ﬁnd a common substructure
between two RNA loop structures even though they are
similar structurally. LaJolla may also fail to identify a
common substructure shared by two RNA structures,
when the size of the used n-gram is too large so that no
exactly matching n-gram can be found between query and
target RNAs. Among 4950 possible pairs of RNA struc-
tures within data set #1, there are only 613 and 4251 pairs
whose common substructures can be successfully
identiﬁed by ARTS and LaJolla (using a n-gram size of
3 bp), respectively. To fairly compare the alignment results
from ARTS, LaJolla and iPARTS, we calculated their
ROC curves based on native alignment score and SAS
score using the 613 pairs of RNA structures that can be
aligned by ARTS. When sorting the structural alignments
by their native alignment score, the comparison of ROC
curves in Figure 3a suggest that iPARTS is the best tool.
When sorting the structural alignments by their SAS
score, iPARTS is still best, as illustrated in Figure 3b.
Notice that if we use the 4251 pairs of RNA structures
that can be aligned by LaJolla to calculate the ROC curves
of LaJolla, then its AUC values based on native alignment
and SAS scores are 0.82 and 0.79, respectively.
Next, we tested our iPARTS for its capability of RNA
function assignment on three data sets (called FSCOR,
R-FSCOR and T-FSCOR, respectively) that were
prepared by Capriotti and Marti-Renom (7) from the
SCOR database on their recent study of SARA. We,
here, did not evaluate the accuracies of ARTS and
LaJolla in the RNA function assignment because, as ex-
plained previously, they were not able to successfully
return the common substructures between all pairs of
RNA structures in these data sets and hence it is impos-
sible now to make a fair comparison of these two tools
with SARA and iPARTS. The FSCOR data set includes
419 RNA chains that were classiﬁed into 192 classes, the
R-FSCOR data set contains the representative structures
of 192 classes in the FSCOR data set and the T-FSCOR
data set has all structures of the FSCOR data set not
present in the R-SCOR data set. In the study by
Capriotti and Marti-Renom (7), two RNA structures
have a ‘geodesic distance’ d=0 if they were annotated
with the same function in the SCOR database, and d 2
if the number of edges between their SCOR function an-
notations, which are organized in a directed acyclic graph,
is 2. The evaluation of structure-based function assign-
ment was usually done by searching with a query RNA
structure against a representative data set of annotated
RNA structures and predicting the function of the query
as the annotated function of the top hit RNA structure.
For this purpose, Capriotti and Marti-Renom (7) per-
formed two diﬀerent tests using their SARA tool: (i) a
leave-one-out test using the FSCOR data set and (ii) a
test using each structure in the T-SCOR data set as the
query and searching it against the R-FSCOR data set. As
described in (7), SARA resulted in an AUC of 0.61 and
0.83 for d=0 and d 2, respectively, on the leave-one-out
test and an AUC of 0.58 and 0.85 for d=0 and d 2,
respectively, on the other test. Here, we repeated these two
experiments using our iPARTS tool. Consequently, the
AUC values obtained by iPARTS on the leave-one-out
test are 0.72 and 0.92 for d=0 and d 2, respectively
(see Figure 4a for their ROC curves) and 0.77 and 0.90
for d=0 and d 2, respectively, on the second test
(Figure 4b), suggesting that our iPARTS performs better
than SARA on the function assignment of RNA 3D
structures.
Figure 2. The ROC curves of iPARTS and PARTS on data set #1 based on (a) native alignment score, where the AUC values of iPARTS
and PARTS are 0.87 and 0.81, respectively, and (b) based on SAS score, where the AUC values of iPARTS and PARTS are 0.86 and 0.85,
respectively.
W344 Nucleic Acids Research, 2010, Vol. 38, Web Server issue
 at N
ational Chiao Tung University Library on July 5, 2010 
http://nar.oxfordjournals.org
D
ow
nloaded from
 
an average structure length of 76 bp, (ii) three ribozyme
P4-P6 domains (1GID:A, 1HR2:A and 1L8V:A) with an
average structure length of 157 bp, (iii) two domains V of
23S rRNA (1FFZ:A and 1FG0:A) with an average struc-
ture length of 496 bp, and (iv) two 16S rRNAs (1J5E:A
and 2AVY:A) with an average structure length of 1522 bp.
An all-against-all comparison within each data set was
then performed using all the tools mentioned above with
their default parameters. Notice that LaJolla was per-
formed using its stand-alone program with a default
n-gram size of 7 bp (because it currently provides no web
server for public access), while other tools were performed
via their web servers. As indicated in Table 1, for the RNA
structures with moderate length of <160 bp, all tools,
except ARTS, can ﬁnish their job within several seconds.
However, for the RNA structures with length >490 bp,
our iPARTS and PARTS are the fastest tools.
In (26), Murray et al. proposed the concept of
sugar-to-sugar suite unit and used it to deﬁne 42 RNA
backbone rotamers, each of which is represented by two
letters, according to the distributions of multi-dimensional
backbone torsion angles. Recently, Richardson et al. (27)
further reﬁned and updated this work by proposing 46
RNA backbone rotamers. It will be interesting to
further study whether the SA consisting of such 46 RNA
backbone rotamers can be used to produce more accurate
alignments between RNA 3D structures, when compared
to the one we used in this study.
SUMMARY
In this study, we have developed a web-based tool
iPARTS that allows the user quickly and accurately to
perform global, semiglobal, local and normalized local
alignments of two (large-scale) RNA 3D structures. We
have also demonstrated that iPARTS outperforms
PARTS, as well as ARTS and LaJolla, on the pairwise
RNA structural alignments and also outperforms SARA
on the function assignment of RNA tertiary structures.
Therefore, we believe that iPARTS can serve as a useful
tool in the study of structural and functional biology.
SUPPLEMENTARY DATA
Supplementary Data are available at NAR Online.
FUNDING
National Science Council of Republic of China grant
NSC97-2221-E-009-081-MY3. Funding for open access
charge: National Science Council of Republic of China.
Conﬂict of interest statement. None declared.
REFERENCES
1. Kolodny,R. and Linial,N. (2004) Approximate protein structural
alignment in polynomial time. Proc. Natl Acad Sci. USA, 101,
12201–12206.
2. Dror,O., Nussinov,R. and Wolfson,H.J. (2005) ARTS: alignment
of RNA tertiary structures. Bioinformatics, 21, 47–53.
3. Dror,O., Nussinov,R. and Wolfson,H.J. (2006) The ARTS web
server for aligning RNA tertiary structures. Nucleic Acids Res.,
34, W412–W415.
4. Ferre`,F., Ponty,Y., Lorenz,W.A. and Clote,P. (2007) DIAL: a
web server for the pairwise alignment of two RNA
three-dimensional structures using nucleotide, dihedral angle and
base-pairing similarities. Nucleic Acids Res., 35, W659–W668.
5. Chang,Y.-F., Huang,Y.-L. and Lu,C.L. (2008) SARSA: a web
tool for structural alignment of RNA using a structural alphabet.
Nucleic Acids Res., 36, W19–W24.
6. Capriotti,E. and Marti-Renom,M.A. (2008) RNA structure
alignment by a unit-vector approach. Bioinformatics, 24,
i112–i118.
7. Capriotti,E. and Marti-Renom,M.A. (2009) SARA: a server for
function annotation of RNA structures. Nucleic Acids Res., 37,
W260–W265.
8. Bauer,R.A., Rother,K., Moor,P., Reinert,K., Steinke,T.,
Bujnicki,J.M. and Preissner,R. (2009) Fast structural alignment of
biomolecules using a hash table, n-grams and string descriptors.
Algorithms, 2, 692–709.
9. Wadley,L.M., Keating,K.S., Duarte,C.M. and Pyle,A.M. (2007)
Evaluating and learning from RNA pseudotorsional space:
quantitative validation of a reduced representation for RNA
structure. J. Mol. Biol., 372, 942–957.
10. Duarte,C.M. and Pyle,A.M. (1998) Stepping through an RNA
structure: a novel approach to conformational analysis.
J. Mol. Biol., 284, 1465–1478.
11. Hershkovitz,E., Tannenbaum,E., Howerton,S.B., Sheth,A.,
Tannenbaum,A. and Williams,L.D. (2003) Automated
identiﬁcation of RNA conformational motifs: theory and
application to the HM LSU 23S rRNA. Nucleic Acids Res., 31,
6249–6257.
12. Hershkovitz,E., Sapiro,G., Tannenbaum,A. and Williams,L.D.
(2006) Statistical analysis of RNA backbone. IEEE/ACM
Transaction on Computational Biology and Bioinformatics, 3,
33–46.
13. Frey,B.J. and Dueck,D. (2007) Clustering by passing messages
between data points. Science, 315, 972–976.
14. Xu,R. and Wunsch,D.I. (2005) Survey of clustering algorithms.
IEEE Transactions on Neural Networks, 16, 645–678.
Table 1. Comparison of average CPU time for various RNA structural alignment tools
Data set ARTS PARTS SARA LaJolla iPARTS
tRNA 38.7 s 2.8 s 5 s 1.1 s 1 s
Ribozyme P4-P6 domain 52.4 s 5.5 s 12.9 s 5.2 s 2.8 s
Domain V of 23S rRNA 79.8 s 22.1 s N/A 119 s 17.7 s
16S rRNA 3.4min 2.3min N/A 5 h 9min 2.9min
Notice that LaJolla was performed using its stand-alone program (because it currently provides no web server for public access), while other tools
were performed via their web servers. All these tools were tested using their default parameters. At the time of our testing, the SARA web server
cannot deal with domain V of 23S rRNA as well as 16S rRNA.
W346 Nucleic Acids Research, 2010, Vol. 38, Web Server issue
 at N
ational Chiao Tung University Library on July 5, 2010 
http://nar.oxfordjournals.org
D
ow
nloaded from
 
R3D-BLAST: a search tool for similar RNA
3D substructures
Yun-Chen Liu1,2, Chung-Han Yang1,2, Kun-Tze Chen4, Jyun-Rong Wang1,2,
Mei-Ling Cheng1,2, Jen-Chun Chung1,2, Hsien-Tai Chiu2,3,* and Chin Lung Lu4,*
1Institute of Bioinformatics and Systems Biology, 2Department of Biological Science and Technology, National
Chiao Tung University, Hsinchu 300, Taiwan, 3Department of Chemistry, National Cheng Kung University,
Tainan City 701 and 4Department of Computer Science, National Tsing Hua University, Hsinchu 300, Taiwan
Received March 3, 2011; Revised April 25, 2011; Accepted May 1, 2011
ABSTRACT
R3D-BLAST is a BLAST-like search tool that allows
the user to quickly and accurately search against
the PDB for RNA structures sharing similar sub-
structures with a specified query RNA structure.
The basic idea behind R3D-BLAST is that all the
RNA 3D structures deposited in the PDB are first
encoded as 1D structural sequences using a struc-
tural alphabet of 23 distinct nucleotide conform-
ations, and BLAST is then applied to these 1D
structural sequences to search for those RNA sub-
structures whose 1D structural sequences are
similar to that of the query RNA substructure.
R3D-BLAST takes as input an RNA 3D structure
in the PDB format and outputs all substructures of
the hits similar to that of the query with a graphical
display to show their structural superposition.
In addition, each RNA substructure hit found by
R3D-BLAST has an associated E-value to measure
its statistical significance. R3D-BLAST is now avail-
able online at http://genome.cs.nthu.edu.tw/R3D-
BLAST/ for public access.
INTRODUCTION
Like proteins, ﬁnding structural similarities between
RNAs often helps biologists to better understand their
shared potential functionality that might not be detected
only using RNA primary sequences. As RNA structures
currently solved and deposited in the Protein Data Bank
(PDB) (1) continue to grow in both number and size, ex-
haustive search approaches to comparing a query RNA
structure with every RNA structure in the PDB can be
very difﬁcult and time consuming because ﬁnding their
similar substructures has been shown to be computational
intractable (2). Therefore, currently available search tools,
such as RNA FRABASE (3,4) and FASTR3D (5), employ
some heuristics to search the PDB for fragments of known
RNA 3D structures that possess the same 2D structures as
found in the entire query RNA, which can be implemented
in an efﬁcient way. However, these search tools still suffer
from some limitations as described below, although they
can serve as useful tools to process and analyze various
aspects of RNA 3D structures in the PDB.
Basically, both RNA FRABASE and FASTR3D, as
mentioned above, are mainly dedicated to searching for
RNAs whose 2D structures annotated in the PDB are
entirely identical to that of the query RNA. In particular,
they do not allow insertions and deletions in their struc-
tural alignments for comparing the query with each RNA
structure in the PDB. However, there are many RNAs
whose overall 3D structures are similar, but their entire
2D structures, as well as their primary sequences and
lengths, are not the same. For instance, the two tRNAs
(PDB IDs: 1EHZ and 3KIX) shown in Figure 1 exhibit
similar whole 3D structures, but they have different se-
quences, lengths and 2D structures annotated in the
PDB. Therefore, while querying one of these two
tRNAs, RNA FRABASE and FASTR3D both fail to
ﬁnd the other one with any structural similarity. On the
other hand, some RNAs may share only similar 3D sub-
structures, rather than entire 3D structures, as illustrated
in Figure 2. Due to the intrinsic limitations described
above, both RNA FRABASE and FASTR3D will miss
these locally similar RNA structures in their search results.
In addition, neither of RNA FRABASE and FASTR3D
currently provides any statistical values (e.g. E-value) for
each RNA structure hit to indicate its signiﬁcance.
In this study, we have therefore developed a BLAST-
like search tool, called R3D-BLAST, to overcome the
*To whom correspondence should be addressed. Tel: +886 3 5731205; Fax: +886 3 5723694; Email: cllu@cs.nthu.edu.tw
Correspondence may also be addressed to Hsien-Tai Chiu. Tel: +886 3 5131595; Fax: +886 3 5719605; Email: chiu@mail.nctu.edu.tw
The authors wish it to be known that, in their opinion, the ﬁrst two authors should be regarded as joint First Authors.
Published online 29 May 2011 Nucleic Acids Research, 2011, Vol. 39, Web Server issue W45–W49
doi:10.1093/nar/gkr379
 The Author(s) 2011. Published by Oxford University Press.
This is an Open Access article distributed under the terms of the Creative Commons Attribution Non-Commercial License (http://creativecommons.org/licenses/
by-nc/3.0), which permits unrestricted non-commercial use, distribution, and reproduction in any medium, provided the original work is properly cited.
 at N
ATIO
NAL TSING
 HUA UNIVERSITY LIBRARY on July 2, 2011
n
a
r.o
xfordjournals.org
D
ow
nloaded from
 
in the PDB. As for FR3D, it searches for a query motif in
an RNA structure based on a base-centered approach that
analyzes geometric discrepancy between the query and
candidate motifs and/or uses symbolic constraints specify-
ing base–base interaction, base identity and sequence
continuity.
METHODS
The algorithm we used to implement our R3D-BLAST is
as follows. We ﬁrst encode all the RNA 3D structures
currently deposited in the PDB (as of December 2010)
as 1D structural sequences using the structural alphabet
of 23 distinct nucleotide conformations, which was con-
structed previously by us using the pseudo-torsion angles
( and ) of RNA nucleotide backbones (6). We then
apply BLAST (7) to searching these 1D structural se-
quences for the RNA substructures whose 1D structural
sequences are similar to that of the query RNA substruc-
ture. To properly score each alignment obtained by
R3D-BLAST, we also deﬁne a 23 23 BLOSUM-like
substitution matrix based on the observed and estimated
probabilities of occurrence for each pair of aligned struc-
tural letters (6). In addition, our R3D-BLAST provides an
E-value to measure the statistical signiﬁcance of each
RNA substructure hit. The E-value is obtained by calcu-
lation with the Karlin–Altschul equation E=KmnS
(10), where m and n, respectively, are the sizes of the
query RNA structure and the database, S is a raw score
of the structural alignment and K and  are statistical
parameters, respectively, depending on the structural
letter composition of RNA structures being aligned and
the used scoring function. To obtain accurate parameter
estimates, we utilize the island method, which was
proposed by Altschul et al. (11) for estimating our K
and  values, according to different sets of gap open and
extension penalties. It is inevitable that some RNA sub-
structure hits returned by R3D-BLAST, particularly with
high E-values, may not be similar to the substructure of
the query RNA in their 3D structures. Therefore, we
design an optional ﬁlter for further screening out the
RNA substructure hits whose RMSD values and/or struc-
tural alignment scores (SAS) with respect to the query
RNA substructure are greater than some predeﬁned
thresholds. SAS is deﬁned as 100RMSD/(number of
aligned residues), which was introduced by Kolodny et
al. (12), who have shown that SAS can serve as a useful
measure to separate good structural alignments from less
good ones. In the interest of running time, the RMSD/
SAS ﬁlter in R3D-BLAST is not selected by default.
USAGE OF R3D-BLAST
Except the BLAST program that was downloaded from
NCBI, the kernel of R3D-BLAST, as well as its web inter-
face, was written in PHP. The server of R3D-BLAST is
currently installed on IBM PC with 2.8 GHz processor
and 3 GB RAM under Linux system and its RNA struc-
ture database is updated every 3 months. R3D-BLAST is
easy to operate for the user either by entering a PDB ID
for the query RNA structure or by uploading its ﬁle in the
PDB format, optionally with speciﬁed residue range. Then
R3D-BLAST will quickly return its search results to the
user in an output page that contains the information of
each RNA hit in the PDB, including its PDB ID, chain
ID, title to describe the experiment, classiﬁcation of
molecule, experimental method to determine the structure,
structure resolution and released date, and the details of
its structural alignment with the query, including E-values,
range and length of aligned residues and calculated
RMSD and SAS (if RMSD/SAS ﬁlter is selected). In the
output page, R3D-BLAST also provides the user with a
hyperlink to show the graphical display of the structural
superposition between the query and each R3D-BLAST
hit by Jmol, as well as the details of their structural
sequence alignment and primary sequence alignment.
If needed, the user can select different parameter settings
about alignment (that can be either gapped or ungapped)
and its used gap penalty to run R3D-BLAST, and also
modify the E-value threshold to further restrict the search
results of R3D-BLAST. The snapshot of running our
R3D-BLAST is shown in Figure 3.
EXPERIMENTAL RESULTS
To validate R3D-BLAST, we have tested it on some RNA
3D structures, and also compared its search results
with those obtained by similar tools, RNA FRABASE
(version 2.0) and FASTR3D, even though RNA
FRABASE and FASTR3D are both designed for
searching similar whole RNA structures while our
R3D-BLAST is for similar RNA substructures. Unless
speciﬁed, all the tools were run on the respective servers
with default parameters. The experimental results we
obtained by testing R3D-BLAST, RNA FRABASE and
FASTR3D on ﬁve different kinds of RNAs with different
lengths are shown in Table 1, where the percentage in the
title of the table means the query coverage, which is
deﬁned as the percent of the query length that is
included in the structural alignment. Except tRNA in
this testing dataset, our R3D-BLAST found the same or
more number of RNA hits with 3D structures entirely
similar to that of the query (i.e. with query coverage of
100%) as compared to both RNA FRABASE and
FASTR3D. This is because that, as mentioned before,
two RNAs may share a very similar whole 3D structure
even though their 2D structures, as well as their sequence
lengths, are different. As for the tRNA, both RNA
FRABASE and FASTR3D returned more RNAs when
compared with the RNA hits with 100% query coverage
in the search result of our R3D-BLAST. Recall that the
algorithms in both RNA FRABASE and FASTR3D were
designed to search for those RNAs whose entire 2D struc-
tures are exactly the same as that of the query. Indeed,
those RNAs found by RNA FRABASE or FASTR3D
have the same 2D structures. However, some regions
near the ends of these tRNA 3D structures are not quite
similar. As a result, the dissimilar regions were ﬁnally
removed from the tRNAs returned by our R3D-BLAST.
In fact, all the tRNAs identiﬁed by both RNA FRABASE
Nucleic Acids Research, 2011, Vol. 39,Web Server issue W47
 at N
ATIO
NAL TSING
 HUA UNIVERSITY LIBRARY on July 2, 2011
n
a
r.o
xfordjournals.org
D
ow
nloaded from
 
can be from a few seconds to several minutes, depending
on the number of the R3D-BLAST hits and their query
coverages.
SUMMARY
To the best of our knowledge, our R3D-BLAST is the ﬁrst
web server that can quickly and accurately search the PDB
for RNAs that share similar 3D substructures with a
query RNA. We believe that it can be helpful for biolo-
gists to reveal functional and evolutionary relationships of
RNAs even without detectable sequence similarity.
FUNDING
National Science Council of Republic of China under
grants (NSC97-2221-E-009-081-MY3 to C.L.L. and
NSC99-2113-M-009-005-MY3 to H.-T. C.) in part.
Funding for open access charge: National Science
Council of Republic of China.
Conﬂict of interest statement. None declared.
REFERENCES
1. Berman,H.M., Westbrook,J., Feng,Z., Gilliland,G., Bhat,T.N.,
Weissig,H., Shindyalov,I.N. and Bourne,P.E. (2000) The protein
data bank. Nucleic Acids Res., 28, 235–242.
2. Kolodny,R. and Linial,N. (2004) Approximate protein structural
alignment in polynomial time. Proc. Natl Acad. Sci. USA, 101,
12201–12206.
3. Popenda,M., Blazewicz,M., Szachniuk,M. and Adamiak,R.W.
(2008) RNA FRABASE version 1.0: an engine with a database
to search for the three-dimensional fragments within RNA
structures. Nucleic Acids Res., 36, D386–D391.
4. Popenda,M., Szachniuk,M., Blazewicz,M., Wasik,S., Burke,E.K.,
Blazewicz,J. and Adamiak,R.W. (2010) RNA FRABASE 2.0: an
advanced web-accessible database with the capacity to search the
three-dimensional fragments within RNA structures. BMC
Bioinformatics, 11, 231.
5. Lai,C.E., Tsai,M.Y., Liu,Y.C., Wang,C.W., Chen,K.T. and
Lu,C.L. (2009) FASTR3D: a fast and accurate search tool for
similar RNA 3D structures. Nucleic Acids Res., 37, W287–W295.
6. Wang,C.W., Chen,K.T. and Lu,C.L. (2010) iPARTS: an
improved tool of pairwise alignment of RNA tertiary structures.
Nucleic Acids Res., 38, W340–W347.
7. Altschul,S.F., Madden,T.L., Schaffer,A.A., Zhang,J., Zhang,Z.,
Miller,W. and Lipman,D.J. (1997) Gapped BLAST and
PSI-BLAST: a new generation of protein database search
programs. Nucleic Acids Res., 25, 3389–3402.
8. Duarte,C.M., Wadley,L.M. and Pyle,A.M. (2003) RNA structure
comparison, motif search and discovery using a reduced
representation of RNA conformational space. Nucleic Acids Res.,
31, 4755–4761.
9. Sarver,M., Zirbel,C.L., Stombaugh,J., Mokdad,A. and
Leontis,N.B. (2008) FR3D: ﬁnding local and composite recurrent
structural motifs in RNA 3D structures. J. Math. Biol., 56,
215–252.
10. Karlin,S. and Altschul,S.F. (1990) Methods for assessing the
statistical signiﬁcance of molecular sequence features by using
general scoring schemes. Proc. Natl Acad. Sci. USA, 87,
2264–2268.
11. Altschul,S.F., Bundschuh,R., Olsen,R. and Hwa,T. (2001) The
estimation of statistical parameters for local alignment score
distributions. Nucleic Acids Res., 29, 351–361.
12. Kolodny,R., Koehl,P. and Levitt,M. (2005) Comprehensive
evaluation of protein structure alignment methods: scoring by
geometric measures. J. Mol. Biol., 346, 1173–1188.
Table 2. CPU time for running our R3D-BLAST
Query Filtered by RMSD/SAS
No Yes
Pseudoknot 6 s 1.2min
Riboswitch 1 s 4 s
tRNA 5 s 44 s
5S rRNA 10 s 1min
Ribozyme 3 s 7 s
16S rRNA 36 s 21.2min
Nucleic Acids Research, 2011, Vol. 39,Web Server issue W49
 at N
ATIO
NAL TSING
 HUA UNIVERSITY LIBRARY on July 2, 2011
n
a
r.o
xfordjournals.org
D
ow
nloaded from
 
表 Y04 
二、與會心得 
參與國際性生物資訊研討會能了解當前學者所著重的議題，與學者們進行學術交流
能啟發新穎的研究思維。經由口頭報告可以與現場來自各地的學者進行討論，採納他們
所給予的建議能對計畫有所幫助。這次參加的國際性研討會接觸到了不少在生物資訊領
域的研究學者，能聽到來自四方各地的研究想法及研究心得，藉由互相討論便能啟發出
在研究上的新想法。感謝國科會提供的國外差旅補助金，讓該生能順利地完成參與會議
的活動。這次的交流機會，讓該生聽到了多場專業的演講，了解了生物資訊現在熱門的
研究主題及未來的研究趨勢。從 keynote speeches 的重要演講中得知目前及未來的重要
的研究主題：生物資訊在臨床的疾病分析、次世代定序技術、資料庫的整合及有效地應
用、生物知識共享並普及化。而目前生物資訊學主要的研究主題則有 RNA和 RNA組學
(RNomics)、蛋白質交互作用、電腦輔助藥物設計、疾病資料庫統計分析、系統生物學
網路分析、細胞訊息傳導路徑以及搭配電腦計算分析的免疫學和疫苗設計等。很顯然地
這門結合生物及資訊的學科將會是未來最為重要的研究領域之一。這次參加的生物資訊
研討會在聽取這麼多場精采豐富的演講後確實讓該生受益匪淺。 
 
三、考察參觀活動(無是項活動者省略) 
無 
 
四、建議 
參加這樣的國際性學術交流研討會議是個很好的經驗，了解當今國際上的研究動向並投
入於其中能讓國內的生物資訊及生物學者啟發更新的思維，希望國內也能舉辦類似於這
樣的學術研討會議，提供大家交流研究知識的機會。多鼓勵在台學者參與國際性的研討
會勢必能有所益處。 
 
五、攜回資料名稱及內容 
會議流程表：各個演講時間和地點。 
會議論文摘要集：口頭報告及海報論文摘要。 
與會證明書。 
贊助廠商介紹。 
Malaysia Genome Institute發展簡要。 
 
六、其他 
無 
 
 
 
PROCEEDINGS Open Access
Sorting permutations by cut-circularize-linearize-
and-paste operations
Keng-Hsuan Huang1, Kun-Tze Chen2, Chin Lung Lu2*
From Asia Pacific Bioinformatics Network (APBioNet) Tenth International Conference on Bioinformatics – First
ISCB Asia Joint Conference 2011 (InCoB/ISCB-Asia 2011)
Kuala Lumpur, Malaysia. 30 November - 2 December 2011
Abstract
Background: Genome rearrangements are studied on the basis of genome-wide analysis of gene orders and
important in the evolution of species. In the last two decades, a variety of rearrangement operations, such as
reversals, transpositions, block-interchanges, translocations, fusions and fissions, have been proposed to evaluate
the differences between gene orders in two or more genomes. Usually, the computational studies of genome
rearrangements are formulated as problems of sorting permutations by rearrangement operations.
Result: In this article, we study a sorting problem by cut-circularize-linearize-and-paste (CCLP) operations, which
aims to find a minimum number of CCLP operations to sort a signed permutation representing a chromosome.
The CCLP is a genome rearrangement operation that cuts a segment out of a chromosome, circularizes the
segment into a temporary circle, linearizes the temporary circle as a linear segment, and possibly inverts the
linearized segment and pastes it into the remaining chromosome. The CCLP operation can model many well-
known rearrangements, such as reversals, transpositions and block-interchanges, and others not reported in the
biological literature. In addition, it really occurs in the immune response of higher animals. To distinguish those
CCLP operations from the reversal, we call them as non-reversal CCLP operations. In this study, we use
permutation groups in algebra to design an O(δn) time algorithm for solving the weighted sorting problem by
CCLP operations when the weight ratio between reversals and non-reversal CCLP operations is 1:2, where n is the
number of genes in the given chromosome and δ is the number of needed CCLP operations.
Conclusion: The algorithm we propose in this study is very simple so that it can be easily implemented with 1-
dimensional arrays and useful in the studies of phylogenetic tree reconstruction and human immune response to
tumors.
Background
Genome rearrangements are studied on the basis of gen-
ome-wide analysis of gene orders and important in the
evolution of species [1-6]. Since a DNA molecule has
two strands, a gene in the genome rearrangement stu-
dies is usually denoted by a signed integer, with sign
indicating the DNA strand to which the gene belongs,
and a chromosome by a series of integers corresponding
to those genes on the chromosome. In the last two
decades, a variety of rearrangement operations have
been proposed to evaluate the differences between gene
orders in two or more genomes. Basically, these opera-
tions can be classified into two categories: (1) ‘intra-
chromosomal’ rearrangements, such as reversals, trans-
positions and block-interchanges (also called ‘general-
ized transpositions’), and (2) ‘inter-chromosomal’
rearrangements, such as fusions, fissions and transloca-
tions. Reversals, often called inversions in the biological
literature, rearrange a segment of continuous integers
on the chromosome by reversing the order of the inte-
gers and changing their signs [3,7-11]. Transpositions
act on two adjacent and non-overlapping segments on
* Correspondence: cllu@cs.nthu.edu.tw
2Department of Computer Science, National Tsing Hua University, Hsinchu
30013, Taiwan
Full list of author information is available at the end of the article
Huang et al. BMC Genomics 2011, 12(Suppl 3):S26
http://www.biomedcentral.com/1471-2164/12/S3/S26
© 2011 Huang et al; licensee BioMed Central Ltd. This is an open access article distributed under the terms of the Creative Commons
Attribution License (http://creativecommons.org/licenses/by/2.0), which permits unrestricted use, distribution, and reproduction in
any medium, provided the original work is properly cited.
as a temporary circle, which is then cut in the same
place as it was created by the join (i.e., the a site in Fig-
ure 1), and inverted and pasted back to the chromosome
at the cutting site (i.e., the e site in Figure 1). As a
result, this CCLP operation performs as a reversal that
changes the chromosome (1,2,3,4,5,6) into (1,-4,-3,-
2,5,6).
• Case II – transposition:
The temporary circle is cut in a new place (e.g., the b
site in Figure 1) and pasted back to the chromosome at
the cutting site. This CCLP operation performs as a
transposition that changes (1,2,3,4,5,6) into (1,3,4,2,5,6).
• Case III – two consecutive, adjacent reversals:
The temporary circle is cut in a new place (e.g., the b
site in Figure 1), and then inverted and pasted back to
the chromosome at the cutting site. This CCLP opera-
tion changes (1,2,3,4,5,6) into (1,-2,-4,-3,5,6), which is
equivalent to that (1,2,3,4,5,6) is first changed into (1,2,-
4,-3,5,6) by a reversal, which is further changed into (1,-
2,-4,-3,5,6) by another reversal. Note that the chromoso-
mal regions affected by these two consecutive reversals
are adjacent.
• Case IV – transposition:
The temporary circle is cut in the same place as it was
joined and then pasted back to the chromosome at a
new site (e.g., the f site in Figure 1). This CCLP opera-
tion performs as a transposition that changes
(1,2,3,4,5,6) into (1,5,2,3,4,6).
• Case V – transversal:
The temporary circle is cut in the same place as it was
joined, and then inverted and pasted back to the chro-
mosome at a new site (e.g., the f site in Figure 1). This
CCLP operation performs as an inverted transposition
(i.e., transversal) that changes (1,2,3,4,5,6) into (1,5,-4,-
3,-2,6).
• Case VI – block-interchange:
The temporary circle is cut in a new place (e.g., the b
site in Figure 1) and then pasted back to the chromo-
some at a new site (e.g., the f site in Figure 1). This
CCLP operation performs as a block-interchange that
changes (1,2,3,4,5,6) into (1,5,3,4,2,6).
• Case VII – two consecutive, overlapping reversals:
The temporary circle is cut in a new place (e.g., the b
site in Figure 1), and then inverted and pasted back to
the chromosome at a new site (e.g., the f site in Figure
1). This CCLP operation changes (1,2,3,4,5,6) into (1,5,-
2,-4,-3,6), which is equivalent to that (1,2,3,4,5,6) is first
changed into (1,2,-5,-4,-3,6) by a reversal, which is
further changed into (1,5,-2,-4,-3,6) by another reversal.
Note that the chromosomal regions affected by these
two consecutive reversals are overlapping.
All these seven rearrangements described above are
simply called CCLP operations. But, to distinguish those
CCLP operations from the reversal, we call them as
non-reversal CCLP operations in the sequel of this
paper. In this article, we are interested in designing effi-
cient algorithms to solve the genome rearrangement
problem involving all the seven CCLP operations. If all
these CCLP operations are weighted equally, the pro-
blem aims to find a minimum number of operations to
sort a signed permutation of representing a chromo-
some. In this case, however, non-reversal CCLP opera-
tions are favored in the rearrangement scenario of the
optimal solution, as will be clear later, which contradicts
with the observation made by biologists that in most
organisms, reversals are observed much more frequently
when compared with other rearrangements. Therefore,
it may require a reversal to be weighted differently from
other CCLP operations. In this circumstance, the pro-
blem is then called weighted sorting problem by CCLP
operations, which is to find a series of CCLP operations
whose weight sum is minimum. In this study, we pay
our attention on the case in which the weight ratio
between reversals and non-reversal CCLP operations is
1:2 and use the permutation group in algebra to design
an O(δn) time algorithm for solving the problem, where
n is the number of genes in the given chromosome and
δ is the number of needed CCLP operations.
Preliminaries
Below, we introduce some definitions about the basics
of permutation groups, as well as a couple of lemmas
from Huang and Lu [11], that are useful for the study of
genome rearrangements. Let E = {1, 2, …, n} be a set of
n positive integers. Then a permutation of E is defined
as a one-to-one function from E into itself and can sim-
ply be denoted by a product of some cycles. For exam-
ple, a permutation expressed as a = (1, 6, 4) (2, 5, 3)
means that a(1) = 6, a(6) = 4, a(4) = 1, a(2) = 5, a(5) =
3 and a(3) = 2. Basically, a cycle is cyclic and hence it
does not matter which element in the cycle is written as
the first. If the cycles in a permutation are all disjoint (i.
e., any two cycles have no common elements), then
their product is called the cycle decomposition. If a cycle
has k elements, then it is called a k-cycle. The element
in a 1-cycle is usually called fixed. It is a convention
that the 1-cycles in a permutation are not written expli-
citly. If all the elements in E are fixed in a permutation,
then this permutation is called an identity permutation
and simply denoted by 1 = (1)(2)...(n).
The composition (or product) of two given permuta-
tions a and b of E is a permutation, denoted by ab,
such that ab(e) = a(b(e)) for all e Î E. For example,
suppose that a = (1,6,4)(2,5,3) and b = (4,3) are two
given permutations of E = {1,2, …,6}. Then ab =
(1,6,4,2,5,3). It is not hard to see that if a and b are dis-
joint, then ab = ba. The inverse of a, denoted by a–1, is
a permutation such that aa–1 = a–1a = 1. The
Huang et al. BMC Genomics 2011, 12(Suppl 3):S26
http://www.biomedcentral.com/1471-2164/12/S3/S26
Page 3 of 7
these facts indicate that one can derive a product of 2-
cycles from Iπ–1 such that these 2-cycles perform as a
sequence of CCLP operations to optimally transform π
into I. Below, for simplicity of describing our algorithm,
x and y are said to be adjacent in a permutation a if a
(x) = y or a(y) = x.
Lemma 5. Let π = π+π–be a chromosome. Suppose
that (x, y)|Iπ–1and (x, y)|π, that is, there are two ele-
ments x and y in a cycle of Iπ–1such that (x, y) acts on π
as a split. Let b = (πΓ(y), πΓ(x))(x, y). Then there are
two adjacent elements x′ and y′ in a cycle of I(bπ)–1such
that (x′ ,y′) and (bπΓ(y′),bπΓ(x′)) act on bπ as joins.
Moreover, the cycles in b′bπ are admissible, where b′ =
(bπΓ(y′), bπΓ(x′))(x′ ,y′).
Proof. For convenience, let π = π+π– = (a1, a2, … an)(–
an, –an–1, …, –a1). The assumption (x, y)|π indicates
that x and y are in the same cycle of π, say in π+, and
hence πΓ(x) and πΓ(y) are in π–. Hence, both (x, y) and
(πΓ(y),πΓ(x)) act on π as splits and b = (πΓ(y), πΓ(x))(x,
y) divides π into four cycles. Let
bp p p p p= = − − − −+ + − −
− −1 2 1 2 1 1 1 1( , , )( , )( , , )( , ,a a a a a a a ak k n k n k    ) .
For simplicity of our further discussion, we assume that
ai <ai+1 <n for 1 ≤ i ≤ k – 2. This indicates that ak–1 is
the maximum in p1
+ and hence ak–1 + 1 is not in p1
+ .
Moreover, I(bπ)–1(a1) = I(ak–1) = ak–1 + 1, meaning that
a1 and ak–1 + 1 are adjacent in I(bπ)–1. In other words,
there are two adjacent elements a1 and ak–1 + 1 in I
(bπ)–1 such that (a1,ak–1 + 1), as well as (bπΓ(ak–1 + l),
bπΓ((a1)), acts on bπ as a join. If the two cycles in
(bπΓ(ak–1 + 1),bπΓ(a1))(a1, ak–1 + 1)bπ are admissible
(i.e., they represent a chromosome), then we have com-
pleted the proof of this lemma based on Lemma 4.
Now, suppose that the two cycles in (bπΓ(ak–1 + 1),
bπΓ(a1))(a1, ak–1 + l)bπ are not admissible (i.e., for
some 1 ≤ i ≤ n, both i and –i are in the same cycle).
We then show below that we can still find two other
adjacent elements x′ and y′ in a cycle of I(bπ)–1 such
that (x′ ,y′) and (bπΓ(y′),bπΓ(x′)) can join bπ into two
admissible cycles. First of all, ak–1 + 1 must be in p1
−
(otherwise, (bπΓ(ak–1 + 1),bπΓ(a1))(a1,ak–1 + 1)bπ is an
admissible chromosome), leading to that the cycle cre-
ated by joining p p1 1
+ − using (a1, ak–1 + 1) is not admis-
sible. Further suppose that aj is the minimum in p1
+ .
Then Γ(aj) = –aj, which is the maximum in p1
− . There-
fore, we have –aj ≥ ak–1 + 1 (since ak–1 + 1 is also in
p1
− ). In addition, –aj–1 and I(–aj) are adjacent in I(bπ)–
1 because I(bπ)–1(–aj–1) = I(–aj). In the following, we
consider five possibilities.
Case 1. aj ≠ –n and aj ≠ 1. Then I(–aj) = –aj + 1,
which is not in p1
− since –aj is the maximum in p1
− . If
–aj + 1 is in p1
+ , then ak–1 cannot be the maximum in
p1
+ , since –aj ≥ ak–1 + 1 and hence –aj + 1 >ak–1
which contradicts to our assumption that ak–1 is the
maximum in p1
+ . In other words, I(–aj) belongs to
either p 2
+ or p 2
− and hence (–aj–1, I(–aj)) acts on bπ
as a join and the cycles in (bπΓI(–aj),bπΓ(–aj–1))(–aj–1,I
(–aj))bπ are admissible.
Case 2. aj = –n and both 1 and –1 are not in p1
+ .
Then I(–aj) = 1 (instead of I(–aj) = –aj + 1 = n + 1).
Because p1
+ and p1
− are complement to each other
from chromosomal point of view, both of them contains
no 1 and –1, as a result, I(–aj) belongs to either p 2
+ or
p 2
− . Therefore, (–aj–1,I(–aj)) acts on bπ as a join and
(bπΓI(–aj),bπΓ(–aj–1))(–aj–1, I(–aj))bπ contains only
admissible cycles.
Case 3. aj = 1 and both n and –n are not in p1
+ .
Then I(–aj) = –n (instead of I(–aj) = –aj + 1 = 0 ).
Clearly, I(–aj) belongs to either p 2
+ or p 2
− . Therefore,
(–aj–1,I(–aj)) acts on bπ as a join and (bπΓI(–aj), bπΓ(–
aj–1))(–aj–1, I(–aj))bπ have two admissible cycles.
Case 4. aj = –n and 1 or –1 is in p1
+ . Because p1
+
and p1
− are complement strands, 1 is in p1
+ if and only
if –1 is in p1
− . Hence, both p 2
+ and p 2
− contains no –
n, 1 and –1. Then we can exchange the roles of p1
+ and
p1
− with p 2
+ and p 2
− , respectively, and follow the simi-
lar discussion as given in Case 1 to show that we can
still find two adjacent elements x′ and y′ in a cycle of I
(bπ)–1 such that (x′ ,y′) and (bπΓ(y′), bπΓ(x′)) can join
the four cycles of bπ into two admissible cycles.
Case 5. aj = 1 and n or –n is in p1
+ . Actually, we
need not consider this case, because we have initially
assumed that all the elements in p1
+ are less than n and
among them, aj is the smallest.
According to the above discussion, we have completed
the proof of this lemma.
Theorem 1. Let F denote a minimum weighted
sequence of CCLP operations required to transform π
into I. Then the weight of F is great than or equal
to E n Ic−
−( )p 1
2
.
Proof. Let F contain a reversals and b non-reversal
CCLP operations. It is not hard to see that a + 2b is the
weight of F. Recall that the effect of a reversal can be
simulated using two 2-cycles and a non-reversal CCLP
operation using four 2-cycles. It indicates that F can be
written by a composition of 2a + 4b 2-cycles such that Fπ
= I, which equals to that Iπ–1 can be expressed as a com-
position of 2a + 4b 2-cycles. In other words, ||Iπ–1|| ≤ 2a
+ 4b. As mentioned before, we also have ||Iπ–1|| = |E| –
nc(Iπ
–1), which bases on the lemma proposed in [11,17].
Therefore, |E| – nc(Iπ
–1) ≤ 2a + 4b and, as a result, the
weight of F is great than or equal to E n Ic−
−( )p 1
2
.
Assume that there are at least two adjacent elements x
and y in a cycle of Iπ–1 such that (x, y)|π. Then, accord-
ing to Lemma 5, we can always find a non-reversal
CCLP operation b′b from Iπ–1 to rearrange π into b′bπ,
Huang et al. BMC Genomics 2011, 12(Suppl 3):S26
http://www.biomedcentral.com/1471-2164/12/S3/S26
Page 5 of 7
Competing interests
The authors declare that they have no competing interests.
Published: 30 November 2011
References
1. Sankoff D, Leduc G, Antoine N, Paquin B, Lang BF, Cedergren R: Gene
order comparisons for phylogenetic inference: evolution of the
mitochondrial genome. Proceedings of the National Academy of Sciences
1992, 89:6575-6579.
2. Hannenhalli S, Pevzner PA: Transforming men into mice (polynomial
algorithm for genomic distance problem). Proceedings of the 36th IEEE
Symposium on Foundations of Computer Science (FOCS 1995) IEEE Computer
Society; 1995, 581-592.
3. Hannenhalli S, Pevzner PA: Transforming cabbage into turnip: polynomial
algorithm for sorting signed permutations by reversals. Journal of the
ACM 1999, 46:1-27.
4. Pevzner P, Tesler G: Genome rearrangements in mammalian evolution:
lessons from human and mouse genomes. Genome Research 2003,
13:37-45.
5. Belda E, Moya A, Silva FJ: Genome rearrangement distances and gene
order phylogeny in γ-Proteobacteria. Molecular Biology Evolutionary 2005,
22:1456-1467.
6. Huang YL, Huang CC, Tang CY, Lu CL: SoRT2: a tool for sorting genomes
and reconstructing phylogenetic trees by reversals, generalized
transpositions and translocations. Nucleic Acids Research 2010, 38:
W221-W227.
7. Kaplan H, Shamir R, Tarjan RE: Faster and simpler algorithm for sorting
signed permutations by reversals. SIAM Journal on Computing 1999,
29:880-892.
8. Bader DA, Moret BM, Yan M: A linear-time algorithm for computing
inversion distance between signed permutations with an experimental
study. Journal of Computational Biology 2001, 8:483-491.
9. Tannier E, Bergeron A, Sagot MF: Advances on sorting by reversals.
Discrete Applied Mathematics 2007, 155:881-888.
10. Bader M, Ohlebusch E: Sorting by weighted reversals, transpositions, and
inverted transpositions. Journal of Computational Biology 2007, 14:615-636.
11. Huang YL, Lu CL: Sorting by reversals, generalized block-interchanges,
and translocations using permutation groups. Journal of Computational
Biology 2010, 17:685-705.
12. Bafna V, Pevzner PA: Sorting by transpositions. SIAM Journal on Discrete
Mathematics 1998, 11:221-240.
13. Meidanis J, Dias Z: Genome rearrangements distance by fusion, fission,
and transposition is easy. In Proceedings of the 8th International Symposium
on String Processing and Information Retrieval (SPIRE 2001). IEEE Computer
Society;Navarro G 2001:250-253.
14. Elias I, Hartman T: A 1.375-approximation algorithm for sorting by
transpositions. In Proceedings of the 5th Work shop on Algorithms in
Bioinformatics (WABI 2005), Volume 3692 of Lecture Notes in Computer
Science. Springer-Verlag;Casadio R and Myers G 2005:204-215.
15. Feng JX, Zhu DM: Faster algorithms for sorting by transpositions and
sorting by block interchanges. ACM Transactions on Algorithms 2007, 3:3.
16. Christie DA: Sorting by block-interchanges. Information Processing Letters
1996, 60:165-169.
17. Lin YC, Lu CL, Chang HY, Tang CY: An efficient algorithm for sorting by
block-interchanges and its application to the evolution of vibrio species.
Journal of Computational Biology 2005, 12:102-112.
18. Lu CL, Huang YL, Wang TC, Chiu HT: Analysis of circular genome
rearrangement by fusions, fissions and block-interchanges. BMC
Bioinformatics 2006, 7:295.
19. Huang YL, Huang CC, Tang CY, Lu CL: An improved algorithm for sorting
by block-interchanges based on permutation groups. Information
Processing Letters 2010, 110:345-350.
20. Hannenhalli S: Polynomial algorithm for computing translocation
distance between genomes. Discrete Applied Mathematics 1996,
71:137-151.
21. Bergeron A, Mixtacki J, Stoye J: On sorting by translocations. Journal of
Computational Biology 2006, 13:567-578.
22. Ozery-Flato M, Shamir R: An algorithm for sorting by reciprocal
translocations. In Proceedings of the 17th Annual Symposium on
Combinatorial Pattern Matching (CPM 2006), Volume 4009 of Lecture Notes in
Computer Science. Springer;Lewenstein M and Valiente G 2006:258-269.
23. Yancopoulos S, Attie O, Friedberg R: Efficient sorting of genomic
permutations by translocation, inversion and block-interchanges.
Bioinformatics 2005, 21:3340-3346.
24. Adam Z, Sankoff D: The ABCs of MGR with DCJ. Evol Bioinform Online
2008, 4:69-74.
doi:10.1186/1471-2164-12-S3-S26
Cite this article as: Huang et al.: Sorting permutations by cut-circularize-
linearize-and-paste operations. BMC Genomics 2011 12(Suppl 3):S26.
Submit your next manuscript to BioMed Central
and take full advantage of: 
• Convenient online submission
• Thorough peer review
• No space constraints or color figure charges
• Immediate publication on acceptance
• Inclusion in PubMed, CAS, Scopus and Google Scholar
• Research which is freely available for redistribution
Submit your manuscript at 
www.biomedcentral.com/submit
Huang et al. BMC Genomics 2011, 12(Suppl 3):S26
http://www.biomedcentral.com/1471-2164/12/S3/S26
Page 7 of 7
97 年度專題研究計畫研究成果彙整表 
計畫主持人：盧錦隆 計畫編號：97-2221-E-007-144-MY3 
計畫名稱：開發生物資訊新工具去探索 RNA 病毒序列、結構、功能與演化--以流感病毒與腸病毒為應
用模型--含有假結的 RNA 二級結構預測與其在偵測程序性核糖體移碼基因的應用 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 0%  
研討會論文 3 3 100% 
篇 
 
論文著作 
專書 0 0 0%   
申請中件數 0 0 0%  專利 已獲得件數 0 0 0% 件  
件數 0 0 0% 件  
技術移轉 
權利金 0 0 0% 千元  
碩士生 9 8 100%  
博士生 3 3 100%  
博士後研究員 0 0 0%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 0% 
人次 
 
期刊論文 3 3 100%  
研究報告/技術報告 0 0 0%  
研討會論文 3 3 100% 
篇 
 
論文著作 
專書 0 0 0% 章/本  
申請中件數 0 0 0%  專利 已獲得件數 0 0 0% 件  
件數 0 0 0% 件  
技術移轉 
權利金 0 0 0% 千元  
碩士生 9 8 100%  
博士生 3 3 100%  
博士後研究員 0 0 0%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 0% 
人次 
 
