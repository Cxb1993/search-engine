1 . 前言
1.1 研究背景與動機
隨著網際網路及無線通訊漸漸融入民眾的日常生活當中，許多業者紛紛在無線寬頻的
環境下推出多媒體服務。多媒體服務整合了聲音、視訊及資料，必須使用高頻寬的網路來
提供多媒體服務，這樣使用服務的使用者才不會有畫面、聲音延遲的現象。雖然 QoS 所講
求的是端點到端點的品質保證，但是由於核心網路（Core network）涵蓋的範圍較廣，因此
在核心網路傳送方式的設計好壞就會影響封包傳送的延遲時間。然而，現今的網路環境大
多使用單播（Unicast）的路由方式，單播路由需要對每個接收端各傳送一份資料，因此會
佔用很多頻寬。相反的，群播只需要傳送一份資料就能將資料傳送到相同群組的接收端，
因此群播技術比單播更節省頻寬。目前許多熱門的多媒體應用程式如中華電信的 MoD 都
使用群播的技術。
IETF 定義兩個 QoS 的協定分別為：Integrated service（IntServ）與 Differentiated service
（DiffServ）。由於 IntServ 的擴充性不大，因此 DiffServ 便逐漸成為主流。在 DiffServ domain
中，使用者會依照本身的需求與網際網路服務提供者（Internet service provider, ISP）簽訂
不同等級的服務水準協議（Service level agreement, SLA）。DiffServ domain 架構主要將複雜
的工作如封包辨識工作交由邊界路由器（Edge router, ER）負責，核心路由器（Core router,
CR）的工作主要為依封包的 SLA 來轉送封包。頻寬代理人（Bandwidth broker, BB）主要
負責一個 DiffServ 網路資源的管理及分配。DiffServ domain 架構如圖一所示。當封包進入
DiffServ domain 時，會先由邊界路由器對封包做分類（Classification）與標記（Marker）；
每個分類後的封包會在 IP 的 Header 裡指定一個 DiffServ code point（DSCP），以表示此封
包的 SLA。核心路由器會根據封包的 DSCP 欄位而給予適當的網路資源，此種行為稱為 Per
hop behavior（PHB）的處理方式。目前 DiffServ 共定義四種 PHB 的標準分別為 Best effort、
IPv4 compatibility、Expedited forwarding（EF）與 Assured forwarding（AF）。DiffServ 會將
相似性質的流量聚集（Aggregation）一起形成一個單一要求（Request）送至 DiffServ domain，
所以擴充性高。
圖一、DiffServ 的網路架構
因此，在核心網路提供具有 DiffServ 功能的群播服務不但會節省網路的頻寬更能依不
同接收端的需求給予不同的服務。文獻[13]提出一個演算法來建立一個具有 DiffServ 的群
播，主要為依據每條 link 的可用頻寬來建立一個 DAMT。但是當一個 DiffServ domain 有
多個群播群組時，會產生兩個問題。問題一如圖二所示，當一個新群組（Group2）DAMT
務提供者所控管的核心網路便不太容易滿足每個使用者的 QoS 需求；因此最好的方法便是
使用本研究所提出的流量工程將已經建立的多個 DAMT 重新做安排（Rearrangement），以
滿足使用者各自的 QoS 需求。
2 . 文獻探討
為了著手解決上個章節所提到的兩個問題，先研讀了一篇關於群播流量工程的文獻
[01]，在文獻[01]之中闡述了三個群播流量工程主要的研究方向，這三個研究方向分別是：
減少頻寬消耗（Bandwidth conservation）、負載平衡（Load balancing）和提高群播樹傳輸效
能（Maximizing throughput）。根據這三個研究方向延伸尋找性質相關的文獻 60 篇，並從這
60 篇的文獻之中挑選出具代表性者進行分類、整理，其結果如圖四所示。
研 究 方 向 文 獻
減少頻寬消耗 [02]、[03]、[04]、[05]、[06]
負載平衡 [07]、[08]、[09]、[10]
提高群播樹傳輸效能 [11]、[12]、[13]
圖四、根據文獻[01]中的群播流量工程三大研究方向所分類的文獻
2.1 文獻[02]
雖然已經有人宣稱 multicast state 是不能夠被聚集的，但是在此篇文獻之中作者提出了
一項簡單的技術來說明如何聚集群播的 forwarding state，以克服群播在 forwarding state 數
量與擴充性之間的問題。作者所提出的 interface-centric data structure model 能夠將一段群播
位址範圍內的 forwarding state 聚集在一起，而整個方法的關鍵在於如何判斷出一次所能聚
集的群播位址範圍大小。有了這篇文獻的方法，許多關於聚集 forwarding state 的群播流量
工程被相繼的發展出來。
2.2 文獻[04]
群播路由協定為了維護大量的 forwarding state 而在擴充性上面臨了許許多多的問題。
這些問題主要來自於當群組數大量上升時，forwarding state 的數量也會等比例的上升。因
此，在這篇文獻當中作者提出了一個透過聚集（Aggregate）多個群播樹而能有效降低
forwarding state 的方法，如圖五所示。來自不同網域的群播樹透過路由器 X1、D1 和 Y1 進
入同一個網域 A，在網域 A 中使用作者的方法將這三棵樹聚集在一起，透過路由器 A2 及
A3 轉送至目的地網域。
圖六、尋找單播分流路徑的步驟
在群播的環境下，作者研究如何使用多棵群播樹作分流來達到使用者的頻寬要求。尋找過
程如圖七所示，a).網路拓樸有四個節點（s, v, y1, y2），b).透過步驟 1~5 建構出分流的群播樹
（t1, t2, t3）。
圖七、建立群播分流群播樹的步驟
此文獻所提出的方法雖然能將網路拓樸上的頻寬作最有效的運用，同時也考慮了將延遲時
間降至最低，但是文中並無提及當多個群組同時存在拓樸上的情況。若多個群組同時存在
網路拓樸上，每個群組都執行分流會造成群播樹的數量大幅增加，而群播樹大量增加會造
成群播樹維護的負擔。因此分流並不適用於我所要解決的問題之上。
2.4 文獻[11]
為了讓不同服務等級的通訊服務保證能夠獲得相對應等級端點對端點（End-to-end）的
QoS，本文獻提出了一個能夠符合此項要求的流量工程。雖然配合基因演算法來計算出能
夠保證 QoS 的路由路徑已經是個被提出過的作法，但是在此作者對於基因演算法演化路徑
過程中增添了一項新的條件－節點數（Hops count）的限制。透過節點數的限制能夠有效的
降低延遲時間並且能夠避免發生繞路的情況，加上原本所找出來的路徑必須符合 QoS 要求
程運行在網路拓樸中的頻寬代理人（Bandwidth broker, BB）之中，並假設 BB 能取得基因
演算法在運行時所需的資訊。
使用基因演算法做群播流量工程的運作流程如圖八所示，主要由三個架構所組成：個
體表示法（基因編碼方式（Gene coding））及第 0 代產生、挑選機制（Selection mechanism）
與適應函數（Fitness function）、交配與突變機制（Crossover and mutation mechanism）。其
中適應函數以使用者導向的考量做設計，因此經過本論文提出的群播流量工程重新調整過
的 DAMT，不但能改善所提出的問題(1)和(2)，同時也能在使用者觀看多媒體服務時有良好
的表現。
圖八、基因演算法運作流程
以下將針對這三個架構逐一詳細說明和介紹。
3.2.1 個體表示法及第 0 代產生
A. 個體表示法
我們定義一個個體 MT 表示 n 個 DAMT 的集合，所以 MT 可用如下來表示：
MT = (T1, T2, …, Tn)
假設每一代都是由 N 個個體所組成，Ig表示這 N 個個體所成的集合：
Ig = (MT1, MT2, …, MTN)
B. 第 0 代產生方式
假設基因演算法總共運行了 W（W > 1）代，由於第 1 代至第 W 代的個體生成方式都
必須仰賴第 0 代所產生的個體，所以必須說明如何產生第 0 代的個體。
根據[13]可以發現使用最大可用頻寬及限制節點數能夠有效的提升 DAMT 的傳輸效
益，因此我們提出了三種方法來產生第 0 代的 N 個個體。這三種方法分別為：近似最大可
用頻寬樹（Approximate maximum available bandwidth tree, A-MABT），近似最短路徑樹
（Approximate shortest path tree, A-SPT）及隨機生成樹（Random tree, RT）。我們假設第 0
代的 N 個個體中近似最大可用頻寬樹產生 X 個個體、近似最短路徑樹產生 Y 個個體、隨機
生成樹產生 Z 個個體，而 X+Y+Z=N。我們希望透過由近似最大可用頻寬樹、近似最短路徑
步驟 1：先找出近似最大可用頻寬參考圖。將節點 A 的可用頻寬值設為 MAX_VALUE，如
圖十一所示。
ABT
參考點 節點 可用頻寬
A － 
圖十一、設定節點 A 的可用頻寬值
步驟 2：由節點 A 開始找尋和它相鄰的所有節點，並記錄所有可用頻寬於可用頻寬表
（Available bandwidth table, ABT）上，如圖十二所示。
ABT
參考點 節點 可用頻寬
A B 5
A C 2
A D 2
圖十二、節點 A 尋找和它相鄰的節點
步驟 3：節點 A 使用 RWS(VA, la(A, VA))來選出一個節點並加入近似最大可用頻寬參考圖中。
假設 RWS 選中節點 B，因此節點 A 將節點 B 加入到近似最大可用頻寬參考圖中，並且把
與節點 B 相鄰的所有節點及節點 B 和相鄰節點間 link 的可用頻寬記錄在 ABT。圖十三為節
點 B 加入到最大可用頻寬參考圖的結果。
ABT
參考點 節點 可用頻寬
A C 2
A D 2
B C 10
B E 7
圖十三、節點 B 加入到最大可用頻寬參考圖中
步驟 4：節點 A 繼續使用 RWS(VB, la(B, VB))來選出一個節點，並將此節點加入近似最大可
用頻寬參考圖中。假設 RWS 選中節點 C，因此節點 A 將節點 C 點加入到近似最大可用頻
寬參考圖中，並且把與節點 C 相鄰的節點及節點 C 和相鄰節點間 link 的可用頻寬記錄在
此步驟一直持續到所有 X 個個體全部產生完為止。
B.2 近似最短路徑樹
我們將 Dijkstra 演算法做擴充（Extended-Dijkstra）來尋找近似最短路徑樹，並且在選
擇節點的過程當中使用 RWS 的挑選機制，以降低所有 Y 個個體彼此的重複率。基本上距
離越短，節點被 RWS 選上的機率越高；RWS(Vx, ld(x, Vx))表示節點 x 使用 RWS 來選出一個
節點，Vx 表示和節點 x 相鄰的所有節點（假設分別為 a、b、c)，ld(x, Vx)表示節點 x 和相鄰
節點間 link 的距離(ld(x, a)、ld(x, b)、ld(x, c))。
首先我們使用 Extended-Dijkstra 找出近似最短路徑參考圖（Approximate shortest path
map, A-SPM），然後再將近似最短路徑參考圖中沒有成員的節點刪除即可得到近似最短路
徑樹。
現使用圖十七來說明如何建立近似最短路徑樹。圖十七包含 8 個路由器及 15 條 link，
每個 link 的數字代表節點與節點之間的距離，傳送端為 A 節點。
圖十七、建立近似最短路徑樹的範例
步驟 1：先找出近似最短路徑參考圖。將節點 A 的距離設為 MAX_VALUE，如圖十八所示。
SPT
參考點 節點 距離
A － 
圖十八、設定節點 A 的距離
步驟 2：由節點 A 開始找尋和它相鄰的所有節點，並記錄所有節點間的距離於最短距離表
（Shortest path table, SPT）上，如圖十九所示。
步驟 5：節點 A 會根據步驟 1 至步驟 4 將其他節點陸續加入近似最短路徑參考圖中。圖二
十二表示最後得到的近似最短路徑參考圖。
圖二十二、完成後的近似最短路徑參考圖
步驟 6：假設群播群組成員為{H，E}，圖二十三表示所建立的近似最短路徑樹。
圖二十三、完成近似最短路徑樹
前面我們假設第 0 代的 N 個個體中近似最短路徑樹產生 Y（Y < N ）個個體，上述步
驟 1-6 為完成第一個個體的第 1 棵 DAMT。假設 DiffServ domain 內共有 n 個群播群組，則
第一個個體的第 2 棵至 n 棵 DAMTs 也必須分別根據上述步驟 1-6 來產生。
當第一個個體的所有 n 棵 DAMTs 都建立完成時，才能繼續建立第二個個體的所有
DAMTs。建立的方法也是根據上述步驟 1-6 來產生。由於建立過程有加入輪盤式的挑選機
制，所以會降低第二個個體所產生的 DAMP 及第一個個體所產生的 DAMT 彼此的重複率。
此步驟一直持續到所有 Y 個個體全部產生完為止。
B.3 隨機生成樹
隨機生成樹主要是在選擇節點的過程當中不做任何條件的判斷，使用自訂的亂數函數
挑選出一個節點。R(Vx)表示節點 x 使用自訂的亂數函數來選出一個節點，Vx 表示和節點 x
相鄰的所有節點（假設分別為 a、b、c）。
首先我們使用 Extended-Dijkstra 找出隨機生成參考圖，然後再將隨機生成參考圖中沒
有群播成員的節點刪除即可得到隨機生成樹。隨機生成樹的步驟如下所列：
步驟 1：假設節點 A 為傳送端，由節點 A 開始找尋和它相鄰的所有節點，並記錄所有節點
步驟 4：節點 A 會根據步驟 1 至步驟 3 將其他節點陸續加入隨機生成參考圖中。圖二十七
表示最後得到的隨機生成參考圖。
圖二十七、完成後的隨機生成參考圖
步驟 5：假設群播群組成員為{H，E}，圖二十八表示所建立的隨機生成樹。
圖二十八、完成隨機生成樹
前面我們假設第 0 代的 N 個個體中近似近似最短路徑樹產生 Z（Z < N）個個體，上述
步驟 1-5 為完成第一個個體的第 1 棵 DAMT。假設 DiffServ domain 內共有 n 個群播群組，
則第一個個體的第 2 棵至 n 棵 DAMTs 也必須分別根據上述步驟 1-5 來產生。
當第一個個體的所有 n 棵 DAMTs 都建立完成時，才能繼續建立第二個個體的所有
DAMTs。建立的方法也是根據上述步驟 1-5 來產生。由於建立過程有使用自訂的亂數函數
的挑選機制，所以會降低第二個個體所產生的 DAMT 及第一個個體所產生的 DAMT 彼此
的重複率。此步驟一直持續到 Z 個個體全部產生完為止。
現在第 0 代所有 N 個個體內的所有 DAMTs 已經全部被建立完成，基因演算法接者進
行第二個架構：挑選機制與適應函數。
3.2.2 挑選機制與適應函數
由上述得知，經由近似最大可用頻寬樹、近似最短路徑樹與隨機生成樹這三種方法產
生了第 0 代的所有 N 個個體內的所有 DAMTs。接著說明如何產生第 1 代到第 W 代的 N 個
個體。
基本上，第 1 代的所有 N 個個體是由下列三種方式產生：交配機制產生 X 個個體、第
0 代產生個體所使用的三種方法產生 Y 個個體與直接複製第 0 代中適應值(Fitness value)最
A.1 緩衝時間的長短和緩衝時間發生次數
緩衝時間可分為初始緩衝時間（Initial buffering time）及再次緩衝時間（Rebuffered
time）。初始緩衝時間是指影片初始播放前，累積資料量所需要的時間；再次緩衝時間是指
使用者播放串流過程中，當封包累積量不足以播放時，再次啟動的緩衝時間。因為 DiffServ
domain 中每一條 link 的可用頻寬或延遲值不同，所以不同的群播群組成員累積相同資料量
所需要的時間也不同。
首先討論如何求出初始緩衝時間。我們使用已知的累積資料量並利用下列的公式來求
出累積這些資料量所需的時間：
 b
ps
b a  
  
 (seconds)
初始緩衝時間同樣的也可藉由此公式來求出。舉例說明，假設目前已知資料量為 b bits，則
累積所花的時間為(b) seconds。例如，資料量 b = 2150 bits，封包大小 ps = 250 bits，則累
積資料量 b bits 所花的時間為  92150
250
b a a  
  
  seconds，圖二十九是累積資料量 2150 bits
所需的時間。
圖二十九、累積資料量 2150 bits 所需的時間
根據之前的參數定義，基因演算法可以藉由 Q 和 R 計算出群播群組成員播放一定時間影片
所需要的封包資料量。因為初始緩衝時間所累積的資料量為 m*R*Q，透過 (b) 我們便可
求出初始緩衝時間為：
(m*R*Q) (seconds)
接著我們要求出再次緩衝時間。要求出再次緩衝時間之前必須先從 BB 中取得的資料
中求得何時 Buffer 裡的資料量會不足，此時間點我們稱之為播放中斷時間點（Rebuffered
point, rp）。因為在播放的過程中會有很多次的中斷時間點，假設 rpi 表示第 i 次中斷時間點。
有了第 i 次中斷時間點之後，還必須求出再次緩衝時間 所累積的資料量。再次緩衝時間所
累積的資料量為第 i 次中斷時間點 rpi 時的資料量加上 m*R*Q。中斷時間點 rpi的資料量可
以使用下列公式求出：
(rpi)= d* ps, d[1, n], adrpiad+1
PL(i)表示在 MPSSi 內共有i 個封包遺失。
根據所定義的 MPSS 及 NCPL，便可以分析出因封包連續遺失而造成畫面不連續持續
的時間為：
   , 1,   fPL k pk k l
R
(seconds)
B. 適應函數的設計
使用者觀看串流影片著重在播放流暢度及播放品質。播放流暢度和緩衝時間的長短及
緩衝時間發生次數有關係；也就是說，當緩衝時間越短及緩衝時間發生次數越少，播放就
越流暢度。播放品質和封包連續遺失有關係；也就是說當封包連續遺失的次數越少，播放
品質就越好。基因演算法所設計的適應函數就以播放流暢度及播放品質這兩大部份來做設
計的依據。
B.1 播放流暢度
一般而言，緩衝時間可能會很長也可能很短；緩衝時間很長表示群播群組成員必須等
待更長時間才能收到並播放串流封包；緩衝時間很短則相反。因此基因演算法使用兩個時
間點 h1 及 h2 來表示等待時間對使用者的影響程度。如果緩衝時間小於 h1 表示緩衝時間很
短，因此群播群組成員會很快的收到串流封包，使得群播群組成員等待串流封包時間很短，
所以不影響播放流暢度；如果緩衝時間介於 h1與 h2 之間表示會影響播放流暢度；如果緩衝
時間超過 h2 則表示會嚴重影響播放流暢度。以下將歸納出等待時間與時間 h1、h2 的關係式：
群播群組成員等待時間介於 h1 及 h2 的次數 Ws：
Ws = |{ i | h1( rpi )h2 }| ……………(1)
群播群組成員等待時間超過 h2 的次數 WL：
WL = |{ i |( rpi ) > h2 }| …………………(2)
B.2 播放品質
封包連續遺失而造成畫面不連續持續的時間可能會很長也可能很短，畫面不連續持續
的時間很長表示播放品質不好；畫面不連續持續的時間很短則相反。因此基因演算法使用
兩個時間點 u1、u2 來界定畫面不連續持續的時間對使用者的影響。如果畫面不連續持續的
時間小於 u1 則表示播放品質不錯；如果畫面不連續持續的時間介於 u1 與 u2 之間則表示會
影響播放品質；如果畫面不連續持續的時間大於 u2 則表示播放品質很差。以下將歸納出畫
面不連續持續的時間與時間點 u1、u2 的關係式：
畫面不連續持續的時間介於 u1 及 u2 的次數 LTS：
LTs = |{ j |u1 <σ( k ) < u2}|……(3)
畫面不連續持續的時間大於 u2 的次數 LTL：
LTL = |{ j |σ( k ) > u2}|………(4)
公式(1)、(2)、(3)和(4)個別給予一個權重值，來突顯出每個公式對於群播群組成員的
不同影響力，因此適應函數可以正式被定義如下：
圖三十二、完成保留優良基因步驟後第 1 代第 1 個個體中的 T1
因為圖三十二表示第 1 代第 1 個個體中的第一棵 DAMT(T1)尚未建立完成，因此交配
規則使用 R(l)從沒有重疊的 l(A, B)、l(B, E)、l(A, C)、l(A, D)、l(C, D)中，挑選出能將路由
器 A 及 B 加入 T1 的路徑。很明顯的，路由器 A 加入 T1 的路徑有三條，分別是路由器 A 到
D 到 C（透過 l(A, D)和 l(C, D)）、路由器 A 到 C（透過 l(A, C)）和路由器 A 到 B 到 E（透
過 l(A, B)、l(B, E)）；假設 R(l)選中路由器 A 到 C（透過 l(A, C)），路由器 A 及 l(A, C)會被
加入 T1 中。圖三十三表示加入路由器 A 及 l(A, C)後，第 1 代第 1 個個體中的 T1。
圖三十三、加入路由器 A 後，第 1 代第 1 個個體中的 T1
相同的，路由器 B 加入 T1 的路徑有兩條，分別是路由器 B 到 A（透過 l(A, B)）及路由器 B
到 E（透過 l(B, E)）；假設 R(l)選中路由器 B 到 E（透過 l(B, E)），路由器 B 及 l(B, E)會加
入 T1，此時交配的程序便完成。圖三十四表示交配完成後第 1 代第 1 個個體中的 T1。
圖三十六、路由器 C 和 F 發生突變時可選擇的兩條路徑
接著使用 R(l)來選擇上述的兩條路徑，假設 R(l)選中路由器 C 到 D 到 F 這條路徑，路
由器 C 到 F 的路徑會更新為路由器 C 到 D 到 F，完成 T1 的突變。圖三十七表示完成突變
後的 T1。
圖三十七、完成突變後的 T1
突變機制一次以一個個體為單位，因此第 1 代第 1 個個體中的 T2 也必須按照上述的流
程完成突變機制，如此便完成第 1 代第 1 個個體 MT1=(T1, T2)的突變過程。
3.3 基因演算法流程
根據以上所介紹基因演算法的三個架構，以下將舉個簡單的例子說明基因演算法如何
產生最佳解。圖三十八說明基因演算法的運作流程。
組初始 MN 數量總共 10 個，這 30 個初始 MN 將被隨機分布在 20 個節點中；當模擬實驗開
始運行時，每個群播群組將有 15 個 MN 逐一隨機加入於 20 個節點中。這些 MN 之中 MN
的 QoS 等級分為 EF 等級和 AF 等級，EF 等級的 MN 頻寬要求為 20Mb，AF 等級的 MN 頻
寬要求為 10Mb。每個群播群組傳送端的每秒資料數據量最小為 0Mb 最大為 90Mb，封包大
小每個為 1000 bytes，一次的模擬時間長度為 15 秒。我們使用 Windows XP 作業平台運行
C++語言所撰寫的模擬環境，每張實驗數據圖的資料點均由 20 次的模擬實驗結果取平均計
算而成。圖三十九為此本章節實驗的模擬環境相關資料。
程式語言 C++
作業系統 Windows XP
路由器數量 20 個
Link 可用頻寬 1~100Mb
EF 頻寬要求 20Mb
AF 頻寬要求 10Mb
群組數 3 個
最大 MN 總數量 75 個(25 個/群組)
初始 MN 總數量 30 個(10 個/群組)
移動 MN 總數量 45 個(15 個/群組)
路由器佇列大小 200 個封包
封包大小 1000 bytes
模擬時間長度 15 秒
圖三十九、模擬環境
圖四十為本次模擬實驗的 DiffServ domain。此 DiffServ domain 由自行撰寫的網路拓樸
產生器所亂數產生，由於基因演算法中的部份參數需因應 DiffServ domain 進行調整才能獲
得正確的數據，因此後續的各項實驗將會統一使用這張網路拓樸圖進行模擬實驗。
圖四十、模擬環境的網路拓樸
平均延遲時間 = =1 =1
( )i j
c a
s mem
i
i j
d
b
  
 

如圖四十二中所示，當負載流量較低時（10 Mbps 到 20Mbps），Shortest path tree 的平
均延遲時間比文獻[13]產生之 DAMT 的平均延遲時間與本方法的平均延遲時間還低。主要
原因為 DiffServ domain 的負載流量較低時各個 link 仍有很大的可用頻寬，Shortest path tree
可以滿足 MN 的頻寬需求，加上 Shortest path tree 的 Hop counts 是三者當中最低，使得佇列
延遲時間大幅降低。此時 DAMT 經過適應函數評分所獲得的適應值仍然高於門檻值 S（等
同符合 MN 要求的 QoS），不需要使用基因演算法對[13]所產生的 DAMT 進行調整，因此
本方法與[13]所產生的 DAMT 在低負載流量時的平均延遲時間相同。但是當負載流量逐漸
增加時（30Mbps 到 80Mbps），本方法的平均延遲時間明顯低於 Shortest path tree 的平均延
遲時間和[13]所產生之 DAMT 的平均延遲時間。主要原因可分述於以下兩點：1.當負載流
量增加時，link 的可用頻寬也漸漸被耗盡，因此 Shortest path tree 所使用的 link 會因為頻寬
不足導致延遲時間上升。2.[13]只能根據 MBM 建立 DAMT 無法在負載流量增加時對 DAMT
進行調整，但本方法在負載流量增加時能夠透過基因演算法對 DAMT 調整，使得調整過的
DAMT 能夠維持較低的平均延遲時間。當負載流量很高時（80Mbps 到 90Mbps），本方法的
平均延遲時間才會產生很高的平均延遲。主要原因是 DiffServ domain 內每條 link 的可用頻
寬已經被大量消耗，因此幾乎沒有路徑能符合全部 MN 的頻寬要求，基因演算法也無法調
整出適應值超過門檻值 S（等同符合 MN 要求的 QoS）的 DAMT。所以在高負載流量時，
本方法與另外兩種方法的平均延遲時間差距不大。
0
100
200
300
400
500
600
700
800
900
1000
1100
0 10 20 30 40 50 60 70 80 90
Traffic (Mbps)
A
ve
ra
ge
de
la
y
(m
s)
The proposed algorithm
Article[13]
Shortest path tree
圖四十二、平均延遲時間比較
4.2.3 平均封包遺失率與平均產能比較
圖四十三的 X 軸代表總負載流量，Y 軸代表平均封包遺失率。本方法的 DAMT 是由基
因演算法對文獻[13]產生的 DAMT 進行調整後所得到。我們定義當路由器佇列滿載時抵達
路由器的封包被丟棄，使得 MN 無法收到此封包的情況稱為封包遺失。為了計算平均封包
遺失率，令 siN 代表群播群組 i(1 3i )的傳送端 si 所送出的封包總量， j
r
iN 代表群播群組
i(1 3i )中第 j(1 10j  )個成員所收到的封包總量，a 為一個群播群組的 MN 數（a = 10），
b 為所有群播群組的 MN 總和（b = 30），c 為群播群組的個數（c = 3），平均封包遺失率
可以定義如下：
因此 1越低代表觀賞品質越好。
如圖四十五所示，當負載流量較低時（0Mbps 到 20Mbps），三種方法適應值 1皆為
0，主要原因是在低負載流量的狀況下 DiffServ domain 內的 link 可用頻寬仍尚未被消耗太
多、路由器中的佇列不容易滿載；因此三種方法對於使用者皆能提供良好的播放品質及播
放流暢度。當負載流量逐漸增加時（30Mbps 到 90Mbps），由於 link 的可用頻寬值逐漸地
被消耗、路由器中的佇列也漸漸出現滿載，導致 Shortest path tree 與[13]所產生的 DAMT 遭
遇頻寬不足、封包遺失率上升的問題，這使得 Shortest path tree 與[13]所產生的 DAMT 之適
應值 1大幅度上升，影響使用者觀賞串流服務的品質。比較 Shortest path tree 和[13]產生的
DAMT，經過本方法調整後的 DAMT 具有較符合使用者 QoS 需求的頻寬及封包遺失率，因
此經過適應函數的評分後能有較低的適應值 1，有效維持使用者觀賞串流服務的品質。
0
10
20
30
40
50
60
70
80
90
100
110
120
130
140
0 10 20 30 40 50 60 70 80 90
Traffic (Mbps)
Fi
tn
es
s
va
lu
e
1/
Ө
The proposed algorithm
Article[13]
Shortest path tree
圖四十五、適應值的比較
4.2.5 適應函數對演化速度的影響
圖四十六的 X 軸代表標準適應值的倒數
S
1，Y 軸代表平均演化代數。標準適應值的
目的主要用來判斷基因演算法每代所求出的 DAMT 是否符合要求，因此標準適應值的高低
會直接影響到基因演算法運行的時間，若標準適應值的倒數
S
1訂的越小，則求出符合 S
1
條件的 DAMT 所花的時間可能會越久。演化代數代表基因演算法調整出符合條件的 DAMT
所需要的時間，演化代數越高表示所花的時間就越長。在此，我們使用不同的
S
1來比較
所需的演化代數長短。而比較的對象則是將本方法中的基因演算法做三組不同參數的調整
及不做參數調整的本方法，這四個比較對象的詳細說明如下：不對適應函數進行調整的本
方法（Original），將適應函數的權重值 1調高、降低權重值 2與 3的基因演算法（ 1），
將適應函數的權重值 2調高、降低權重值 1與 3的基因演算法（ 2），將適應函數的權
重值 3調高、降低權重值 1與 2的基因演算法（ 3）。
如圖四十六所示，當標準適應值
S
1很大時（90 到 70）表示對於播放流暢度及播放品
質的要求較低，因此這四種不同的方法所需的演化代數都不超過 200 代，演化所需的時間
均調整 DAMT 次數是差不多的。當標準適應值
S
1逐漸縮小時（80 到 0），由於 1與 2將
小幅度影響播放流暢度及播放品質的部份加重其權重值使得適應函數的評分標準更加嚴
苛，而MN移動改變後的DAMT其適應值小於 S的次數也大幅增加，因此平均調整DAMT
的次數比不對適應函數進行調整的本方法與 3明顯多了大約 20 次。當標準適應值
S
1為 0
時，幾乎每次 MN 移動之後 DAMT 都需要使用基因演算法做調整，因此四種方法的平均調
整 DAMT 次數幾乎都是 45 次。
0
5
10
15
20
25
30
35
40
45
90 80 70 60 50 40 30 20 10 0
Standard of fitness value
A
ve
ra
ge
D
A
M
T
ch
an
ge
Original
圖四十七、平均調整 DAMT 次數的比較
5.1 研究結論
本研究主要針對如何在 n 個群播群組的 DiffServ domain 中，調整出符合每一個成員
QoS 需求的 DAMTs。本論文所提出的群播流量工程主要的貢獻可分述為以下兩點。第一，
透過本論文所提出的群播流量工程演算法對 DAMT 的調整之後，DiffServ domain 的 link 使
用率能被有效的提高並滿足每一個成員的 QoS 需求。第二，當成員移動至其他路由器並且
重新加入 DAMT 時，透過本論文所提出的群播流量工程演算法對 DAMT 的調整，可以確
保使用者能夠保有與先前相同的 QoS 需求。此外，本論文所調整後的 DAMT，不但能符合
成員的 QoS 需求更能達到使用者心中觀賞多媒體串流服務時的 EoS（Experience of
Service）。在模擬實驗的部份，實驗結果證明本論文所提出的群播流量工程具有上述的效
果，因此本論文所提出的方法適用於任何具有 n 個群播群組的 DiffServ domain 中，調整出
符合每一個成員 QoS 需求的 DAMTs。
5.2 未來發展
本論文所提出的群播流量工程有相當多的參數設定，這些參數設定必須透過實際的網
路拓樸進行調整。例如如何較合理設定出適應函數中的權重值 1、 2、 3、如何制定基因
演算法過程中每代的個體數…等，這些問題必須透過不斷的實驗及實際運行多媒體服務，
透過蒐集真實的使用者回饋資訊才能取得一個較合理的答案。因此，如何找出上述這些問
題的答案將是未來值得繼續討論的方向。
參考文獻
[1] Perkins, C., "IP Mobility Support for IPv4", RFC 3344, August 2002.
1
S
1
2
可供推廣之研發成果資料表
□ 可申請專利 □ 可技術移轉 日期：99 年 8月 27 日
國科會補助計畫
計畫名稱：在具有移動式 IPv6 技術的 DiffServ 主幹網路上一個以
頻寬限制為主的路徑選擇演算法之研究
計畫主持人：徐武孝
計畫編號：NSC 95－2221－E－130－012－ 學門領域：資訊學門一(EA)
技術/創作名稱 使用基因演算法做單一 DiffServ Domain 的 Multicast 流量工程之研
究
發明人/創作人 徐武孝
技術說明
中文：
要在差異式服務網域（DiffServ domain）的網路下建立一個具
有群播（Multicast）功能的網路會產生兩個大問題：(1)當一個新的
群播樹（Multicast tree）加入一個DiffServ domain，新增群播樹的
連接（Link）可能會與原有的群播樹的Link重複，導致無法將流量
分散並提高Link的利用率（Utilization），造成端點到端點的延遲時
間大幅上升，使得封包遺失率（Loss rate）也上升，降低多媒體服
務的使用品質。(2)在多個群播群組（Multiple multicast groups）的
環境之下，群播成員（Member）動態加入所屬的群播樹時可能會
得不到原來的服務品質（QoS）或影響到其它群播樹成員的QoS。
針對上述的兩個問題並配合使用者導向（User-oriented）為前
提的考量，本論文提出一個以基因演算法（Genetic algorithm, GA）
為基礎在 DiffServ domain上作多個具有服務品質的群播樹
（DiffServ-aware multicast tree, DAMT）的群播流量工程（Multicast
traffic engineering）。基因演算法主要有三個步驟：個體說明及第0
代產生、挑選機制與適應函數、交配與突變機制。其中適應函數是
以使用者導向的考量做設計。經過基因演算法所找到的DAMT，不
但能解決問題(1)和(2)，同時也能在使用者觀看多媒體服務時有良
好的表現。
出席國際學術會議心得報告
計畫編號 98-2221-E-130-012-
計畫名稱 一個適用於 IPTV服務的QoS網路研究--單一個DiffServ domain的Multicast流量工程研究及跨 DiffServ domain的Multicast流量工程研究
出國人員姓名
服務機關及職稱
徐武孝副教授 銘傳大學資訊工程研究所
會議時間地點 日本, 福岡, 2010年 3月 23-26日
會議名稱 2010 International Conference on Computational Science and Its Applications(ICCSA 2010)
發表論文題目 A QoE-based Measurement for DiffServ Multicasting Networks
一、參加會議經過
此研討會的全名為 2010年資訊科學應用國際研討會，於 2010年 3月 23至 2010年 3月
26日在日本福岡的九州產業大學舉行，為期 4天。參加的學者來自於世界各地，例如日本、
韓國、美國、加拿大、俄羅斯和台灣等國家。我非常榮幸能機會參加這次國際性的研討會，
和世界各國的學者互相交流研究的成果。
參加的議程是第 4天(2010年 3月 26日)上午的 FISTA-GT Session，主持人為日本大學的
教授。我在議程中首先提出在多個Multicast group 共存的 DiffServ網域會對觀看串流影片的
使用者造成何種觀賞品質上的影響，之後帶出我們所設計的基因演算法如何調整多棵
Multicast tree，使得觀賞品質得以改善，最後以模擬所得到的數據證明可以大幅度提升使用者
觀看串流影片的觀賞品質；許多學者對於由使用者觀賞品質角度切入使用基因演算法來提升
觀賞品質的構想充滿了興趣，問了許多問題，同時也給與了許多的寶貴建議，讓我受益良多。
會後，我和許多學者進行更深入的討論，學者們也不吝嗇地分享他們的相關研究的成果和解
決問題的方法。此外，在 2010年 3月 23至 2010年 3月 25日之間我還參加了其它的議程和
博覽會，見識到其他國家學者的研究，並且與其他國家學者互相交流研究領域的心得，獲益
良多。
此會議於 2010年 3月 26日結束，參加此研討會帶回了各國的研究結果和心得，對於未
來的研究有非常大的幫助。
二、與會心得
由衷地感謝國科會的補助，讓我能有機會參與這次的國際性研討會，見識到各國學者的
研究成果，並且與他們進行深入的討論，從不同的角度去探討研究的內容與問題，這是非常
難得的機會。在報告的過程中，議程的主持人和其他學者也給與許多建議，對於以後的研究
都會有非常大的幫助與啟發。
此外，我很高興有機會能夠參觀日本；在日本的城市中，從各處都可看到日本人對於各
項事物在品質上的堅持，例如道路路面的品質、環境的整潔度、道路及交通網絡的規劃….等，
有許許多多的地方都值得台灣借鏡及學習。此次的日本行程不只在學術上獲益良多，對於日
本這個國家的風俗民情也多一份的了解及感受。
無研發成果推廣資料 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100字為限） 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500字為限） 
當 DiffServ domain 的 QoS multicast tree 有所變動且不能符合 MN 的 QoS 時，，可透過
我們所設計的基因演算法來即時性的動態重新排列這些 QoS multicast trees，使得這些
變動不影響 MN 該擁有的服務品質。使得觀看 IPTV 的用戶可以獲得觀賞品質上的保障。除
此之外，使用基因演算法來動態調整 QoS multicast trees，可提高 DiffServ Domain 上
Link utilization。由於此計畫中所設計的基因演算法對於不同的 DiffServ Domain 需配
合不同的內部參數設定才能獲得最佳的效益，因此未來可繼續利用 NS2數據回饋模組來歸
納出更佳的內部參數，甚至對基因演算法內的適應函數進行調整，使得計算出來的適應值
更能夠貼近使用者所希望感受到的服務品質。 
