低功率非同步處理器與快取記憶體的研究與設計(III) 
“Design of Low-power Asynchronous Processors and Cache Systems III” 
計畫編號：NSC 98-2221-E-018 -014 - 
執行期間：98 年 8 月 1 日 至 99 年 8 月 31 日 
主持人：張孟洲 國立彰化師範大學電子工程學系副教授 
 
一、 中文摘要 
本計畫的第一年利用 Balsa 完成非同步處
理器 Asyn-RISC 的設計；第二年提出一個新的
低功率電路的設計技術稱為「交握式準絕熱邏
輯」（Handshaking Quasi-Adiabatic Logic；
HQAL）。本計畫第三年（今年）的研究重點
為 低 功 率 內 容 可 定 址 記 憶 體
（Content-Addressable Memory； CAM）的設
計。 
在本年度的計畫中，我們提出了應用在內
容 可 定 址 記 憶 體 （ Content-Addressable 
Memory；CAM）的低功率匹配線感測放大器
設計，稱為雙重正回授匹配線感測放大器
Double Positive-Feedback Match-Line Sense 
Amplifier（DPF-MLSA）。在 DPF-MLSA 中，
主要使用脈衝電流的電路概念來降低「不匹
配」情況中的匹配線功率消耗，並且利用我們
所設計的雙重正回授網路來加速「匹配」情況
中的搜尋速度，來達到節省 CAM 的搜尋能量
消耗。 
我們採用柏克萊大學提供的 BPTM 65nm
電晶體模型，搭配供應電壓 1.1V 與溫度
25 ，並使用 Hspice 軟體模擬與量測比較各
種不同匹配線感測放大器 CAM 架構的性能與
功率消耗。模擬結果顯示，我們提出的
DPF-MLSA CAM 架構，資料搜尋時間為
0.49699 ns，並且每位元搜尋能量消耗為
0.201474 fJ。量測結果顯示，我們提出的
DPF-MLSA CAM 架構，比起採用「傳統
PC-MLSA」、「SBMS」和「PF-MLSA」的
CAM 架構，搜尋能量分別節省了 85.481%、
21.195%與 10.545%。 
Co
英文摘要 
In this project, we proposed a novel design 
of low-power Match-Line sense amplifiers for 
Content-Addressable Memory, called the Double 
Positive-Feedback Match-Line Sense Amplifier 
(DPF-MLSA). The DPF-MLSA uses the pulse 
current to reduce the power consumption of 
match lines in a ternary content-addressable 
memory (TCAM ） and uses double 
positive-feedback network to boost the search 
speed of TCAM. 
We have employed Hspice to evaluate 
various match-line sensing circuits using the 
Berkeley Predictive Technology Model (BPTM) 
for 65nm transistor model with supply voltage of 
1.1V and temperature of 25 . The simulation 
results show that our proposed the DPF-MLSA 
can achieve a search time of 0.49699ns, and a 
energy consumption of 0.201474 fJ/bit/search. 
The simulation results show that our proposed 
DPF-MLSA can reduce the energy consumption 
by 85.481%, 21.195%, and 10.545% compared 
to the conventional pre-charge MLSA, the match 
sensing technique using Match-Line stability, 
and the positive- feedback MLSA, respectively. 
Co
 
二、 計畫的緣由與目的 
中，當重置訊號 MLRST = VDD時，使得電晶
體 N5、P7 導通，匹配線與節點 SN 分別被放電
至 0V 與充電至 VDD （即 VML = 0V、VSN = 
VDD），因此在匹配線感測放大器的輸出端
（Match Line Sense Output； MLSO）與假資
料 列 MLSO （ Dummy Match Line Sense 
Output；DMLSO），皆產生一個 0V 的輸出訊
號（即 VMLSO = VDMLSO = 0V）。此時輸出訊號
VDMLSO = 0V 經過反向器鎖鏈（Inverter Chain）
延遲元件後，產生的輸出訊號MLOFF 被拉升
為 VDD。 
二、搜尋階段：在搜尋時，匹配線致能訊
號 MLEN = VDD且重置訊號 MLRST = 0V。（i）
在圖 2 與圖 3 中，當訊號 MLRST 轉態為 0V
時，使得電晶體 N5、P7 關閉。（ii）在圖 3 中，
當訊號 MLEN 轉態為 VDD時，訊號MLOFF 因
維持在重置階段時的電壓位準 VDD狀態，造成
MLEN 、 MLOFF 這兩個訊號經過邏輯閘
NAND 後，產生的輸出訊號 EN 電壓值轉態為
0V，使得圖 2 與圖 3 中的電晶體 P2導通，電
壓位準提升器（Level Shifter）開始工作且電晶
體 N3、P4 關閉（此階段的訊號 EN 電壓狀態表
啟動搜尋動作）。（iii）在圖 2 與圖 3 中，當
訊號MLEN的電壓值從重置狀態的 0V轉態至
搜尋狀態 VDD的瞬間，脈衝電流產生器（Pulse 
current generator）將產生一條脈衝電流 Ipulse，
並供應短暫電流給匹配線。而 MLSO 根據搜
尋資料與資料列的比對結果，產生了兩種訊號
變化，分析如下： 
（一）「匹配」情況：搜尋的資料與資料
列的內容值完全一致，使得 TCAM cell 的比較
電晶體沒有產生對地的導通路徑，造成匹配線
沒有產生對地的電流。因此，當脈衝電流 Ipulse
對匹配線供應短暫電流後，匹配線電壓值 VML
將上升到一個位準，並經過 Level Shifter 提升
後的電壓變化 VML+ V，將使電晶體 N1的導
通電流 ION大於偏壓電晶體（Bias transistor）
P6 的偏壓電流 IBIAS（即 ION  >  IBIAS），導致節
點 A 從重置階段時的 VDD 位準開始放電，當
VA下降超過一個臨界電壓值（即 VDD－| VTP5 
|），將使電晶體 P5 導通並對 B 節點充電。當
VB開始充電並上升超過電晶體 N2、N4 的臨界
電壓值 VTN，電晶體 N2、N4 開始導通。電晶
體 N4 導通，使得電流 IML開始對匹配線充電，
造成 VML更加往上爬升，並啟動由電晶體 N4、
P3、N1、P5 路徑組成的外回授網路（Outer 
feedback network）；電晶體 N2 導通，會啟動
由電晶體 N2、P5 路徑組成的內回授網路（Inner 
feedback network）。內、外回授網路的作用，
皆為了使 B 節點達到快速充電，進一步加大對
匹配線充電的電流源 IML。因此，在「匹配」
情況中，匹配線電壓 VML 在極短時間內呈現
「非線性」的爬升曲線，造成節點 SN 從重置
階段時的 VDD位準開始迅速下降，當下降到低
於
Δ
2DDV 時， MLSO 顯示一個「匹配」的輸
出訊號 VMLSO = VDD。（二）「不匹配」情況：
搜尋的資料與資料列的內容值不相符，使得匹
配線經過 TCAM cell 的比較電晶體，產生對地
的放電路徑。假設搜尋結果為一個位元資料
「不匹配」的 Worst case 時，當脈衝電流 Ipulse
對匹配線供應短暫電流後，VML稍微上升再下
降，並經過 Level Shifter 提升後的電壓變化
VML +ΔV，將使導通電流 ION 低於偏壓電流
IBIAS（即 ION  <  I BIAS），導致節點 A 維持在
一個接近 VDD的邏輯高位準（即電壓 VA仍維
持在一個臨界電壓 VTP5 範圍內），造成電晶體
P5 保持在關閉狀態，而不會對 B 節點充電，使
得電晶體 N2、N4 維持在重置階段的關閉狀
態。電晶體 N2、N4 關閉使得內、外回授網路
不會被啟動，亦表示不會產生對匹配線充電的
電流 IML。因此，在「不匹配」情況中的 VML
電壓值大小，僅有脈衝電流 Ipulse供應的短暫電
荷，使得 VML 仍低於電晶體 N6 的臨界電壓
VTN6，導致電晶體 N6 不會導通，節點 SN 則維
持在重置階段時的電壓位準 VDD，並在 MLSO
顯示一個「不匹配」的輸出訊號 VMLSO = 0V。 
壓波形圖 
      
Ti ns)me (
Vo
lta
ge
 (V
) 
0.1 
0.3 
0.5 
0.7 
0.9 
0 
29.0 29.2 29.4 29.6 29.8 30.0 
MLEN 
VML0 
VML1 VMLSO_1 
VMLSO_0 
MLOFF
30.2
1.05 
 
圖 7: SS / 0.95 × VDD / 7 環境下的 DPF-MLSA 電
 
節省了
85.481
表 相關匹配線感測結構的搜尋能量比對表 
製程 BPT  TT 電晶體模型 
5 Co
壓波形圖 
MLSO 的電壓 VMLSO_0 將拉升至 VDD位準；反
之，若搜尋結果為「不匹配」情況，MLSO 的
電壓 VMLSO_1 將維持在 0V 位準。因此，我們
提出的 DPF-MLSA 感測技術是可通過 PVT 變
異的ㄧ種強健（Robust）結構。表 1 顯示相關
匹配線感測結構的搜尋能量比對表。量測結果
顯示，我們提出 DPF-MLSA 匹配線感測技術，
資料搜尋時間為 0.49699 ns，且每位元搜尋能
量消耗為 0.201474 fJ，比起傳統 PC-MLSA 
CAM 架構[7]、PF-MLSA  CAM 架構[10]、
SBMS  CAM 架構[11]，搜尋能量分別
％、10.545％以及 21.195％。 
1: 
M 65nm
匹配線感測 
放大器結構 匹技術 [7] 
匹配線感測技
術  DPF-MLSA
PC-MLSA 
配線感測
PF-MLSA 
 [10] 技術 [11]
SBMS 
匹配線感測
提出的匹配
線感測技術
C  16T  AM cell 結構  - TCAM cell
CAM 架構 
位元數/1 列 144 位元 
CAM 架構列數 64 列 65 列（包含 y rowDumm ） 
搜尋時間（ns） 1.1052 0.47518 1.0459 0.49699 
平  均功耗（mW） 11.752 4.4364 2.2880 3.7944 
功率延遲積 
PDP（fJ） 12989.0 2108.1 2393.0 1885.8 
每位元搜尋能量
（fJ/bit/search） 1.409397 0.225224 0.255662 0.201474
 
四、 結論與討論 
流」與「雙重正回授」這兩種電路概念，稱為
本計畫提出一種新式「匹配線」感測的低
功率 CAM 設計技術，此技術結合了「脈衝電
雙重正回授匹配線感測放大器（ Double 
Positive-Feedback Match-Line Sense 
Amplifier；DPF-MLSA）。DPF-MLSA 使用脈
衝電流降低「不匹配」情況的「匹配線」功率
消耗，並使用雙重正回授電路技術加快「匹配」
情況的搜尋速度，來節省 CAM 的搜尋能量消
耗。我們採用柏克萊大學提供的 BPTM 65nm
電晶體模型，搭配供應電壓 1.1V 與溫度
25 ，並使用 Hspice 軟體模擬與量測比較各
種不同匹配線感測放大器 CAM 架構的性能與
功率消耗。模擬結果顯示，我們提出的
DPF-MLSA CAM 架構，資料搜尋時間為
0.49699 ns，並且每位元搜尋能量消耗為
0.201474 fJ。量測結果顯示，我們提出的
DPF-MLSA CAM 架構，比起採用「傳統
PC-MLSA」、「SBMS」和「PF-MLSA」的
CAM 架構，搜尋能量分別節省了 85.481%、
21.195%與 10.545%。 
Co
本研究的相關成果發表在 2010 IEEE 
International Conference on Computer Science 
and Information Technology 和 Electronic 
Technology Symposium 2010 上。 
 
五、參考文獻 
1. Rupak Samanta, Jason Surprise and Rabi Mahapatra, “Dynamic 
aggregation of virtual addresses in TLB using TCAM cells,” 21st 
International Conference on VLSI Design, pp. 243-248, 2008. 
2. Yonghwan Lee, Taeyoung Lee, Sangjun An and Yongsurk Lee, 
“Indirectly-compared cache tag memory using a shared tag in a 
TLB,” Electronics Letters, vol. 33, no. 21, pp. 1764-1766, 1997. 
3. Belle W. Y. Wei, Richard Tamer, Jong-Seop Kim and Kevin Ng, “A 
single chip Lempel-Ziv data compressor,” in Proceedings of the 
1993 IEEE International Symposium on Circuits and Systems
（ISCAS）, vol. 3, pp. 1953-1955, 1993. 
4. Sethuraman Panchanathan and Morris Goldberg, “A content- 
addressable memory architecture for image coding using vector 
quantization,” IEEE Transactions on Signal Processing, vol. 39, no. 
9, pp. 2066-2078, 1991. 
5. Nen-Fu Huang, Whai-En Chen, Jiau-Yu Luo and Jun-Min Chen, 
“Design of multi-field IPv6 packet classifiers using ternary CAMs,” 
in Proceedings of the IEEE Global Telecommunications Conference
（GLOBECOM）, vol. 3, pp. 1877-1881, 2001. 
6. H. Jonathan Chao, “Next generation routers,” Proceedings of the 
IEEE, vol. 90, no. 9, pp. 1518-1558, 2002. 
7. Kostas Pagiamtzis and Ali Sheikholeslami, “Content-addressable 
可供推廣之研發成果資料表 
□ 可申請專利  ■ 可技術移轉                                     日期：2010 年 8 月 12 日 
國科會補助計畫 
計畫名稱：低功率非同步處理器與快取記憶體的研究與設計(III)
計畫主持人：張孟洲 
計畫編號：NSC 98-2221-E-018 -014 -學門領域：微電子學門 
技術/創作名稱 「雙重正回授匹配線感測放大器」（Double Positive-Feedback Match-Line Sense Amplifier；DPF-MLSA） 
發明人/創作人 張孟洲 
技術說明 
中文： 
內容可定址記憶體（Content-Addressable Memory；CAM）是
一種允許平行搜尋資料的記憶體結構，在平行搜尋資料的過程中，
會造成具有大電容效應的「匹配線」與「搜尋線」作充、放電的動
作，導致 CAM 產生大量的功率消耗。因此本研究提出一個新式「匹
配線」感測的低功率 CAM 設計技術，此技術結合了「脈衝電流」
與「雙重正回授」這兩種電路概念，稱為「雙重正回授匹配線感測
放大器」（Double Positive-Feedback Match-Line Sense Amplifier；
DPF-MLSA）。DPF-MLSA 主要使用脈衝電流的電路概念來降低「不
匹配」情況中的匹配線功率消耗，並且利用我們所設計的雙重正回
授網路來加速「匹配」情況中的搜尋速度，來達到節省 CAM 的搜
尋能量消耗。 
我們採用柏克萊大學提供的 BPTM 65nm 電晶體模型，搭配供
應電壓 1.1V 與溫度 25 ，並使用 Hspice 軟體模擬與量測比較各
種不同匹配線感測放大器 CAM 架構的性能與功率消耗。模擬結果
顯示，我們提出的 DPF-MLSA CAM 架構，資料搜尋時間為
0.49699ns，並且每位元搜尋能量消耗為 0.201474 fJ。量測結果顯
示，我們提出的 DPF-MLSA CAM 架構，比起採用「傳統
PC-MLSA」、「SBMS」和「PF-MLSA」的 CAM 架構，搜尋能量
分別節省了 85.481%、21.195%與 10.545%。 
Co
 
附件二 
 ※ 1.每項研發成果請填寫一式二份，一份隨成果報告送繳本會，一份送 貴單位
研發成果推廣單位（如技術移轉中心）。 
※ 2.本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。 
※ 3.本表若不敷使用，請自行影印使用。 
架構的 一些缺點，如現存的網路架構在當初設計時對 Business application較少考慮到、對
Mobility和 Diversity of customers也較少考慮到、無法適當地 Controllable及Manageable、
對新的應用較少考慮到，因此造成現存的網路架構的諸多缺陷。各國的學者致力於研究新
一代的網路結構，如美國的 GENI (Global Environment for Networking Innovations)計畫、
歐洲的 FP7 ICT (Framework Programme7, Information and Communication Technologies)、
FIRE (Future Internet Research Experimentation)、德國成立 G-Lab以做為未來 Internet研究
的國家平台、日本的 AKARI 計畫等。Li Lemin教授也提到大陸目前致力推動的國家關鍵
基本研究計畫，共包含 937個 programs， 其中一個大項目就是 Basic research on converged 
trusted networks and pervasive services。目前大陸研究的新一代網路結構考慮到(1) Scalable-
routing tables的擴充性；(2) Security: Source address spoofing, DDoS Attack；(3) Mobility; (4) 
Multi-homing (Reliability); (5) Traffic Engineering (Quality of Service); (6) Energy Efficient 
(Green)。 
 第二場 keynote speech 邀請到新加坡 Nanyang Technology University 的 Cheng Tee 
Hiang 教授，講題為「Design of Ultra-High Capacity Optical Packet Routers」。Cheng Tee 
Hiang教授提到預估到 2014年 router所要處理的資料頻寬大約是 100Tb/s，因此目前利用
電信號作為傳輸媒介的通信系統將遭遇兩個問題，一是頻寬不足，另一是電子元件會消耗
大量的功率。因此 Cheng Tee Hiang教授提出利用光來做為 Router傳輸信號的媒介，以增
加 Router的頻寬及降低功率的消耗。Cheng教授在演講中說明他們的 Optical Router的架
構以及實作的成果。 
 而我自己的論文報告則是有關非同步處理器的架構設計。我們利用非同步硬體描述
語言 Balsa 來設計非同步處理器，並探討非同步處理器的資料危障與控制危障的解決方
式。為了比較不同的資料危障處理策略的性能，我們共設計了三個非同步處理器，稱為
AsynRISC-DHDT1P，AsynRISC-DHDT2P 及 AsynRISC-DRC。模擬結果顯示我們所提出
的資料危障處理架構 DRC(Destination Register Chain)比傳統的 DHDT(Data Hazard 
Detection Table)架構有較小的面積並能到達較高的性能。模擬結果顯示，採用我們所提出
的資料危障處理架構 DRC (Destination Register Chain)的非同步處理器 AsynRISC-DRC，比
起採用傳統的 DHDT (Data Hazard Detection Table)架構的處理器(例如英國伯明罕大學的
SAMIPS即採用 DHDT)，可以減少硬體成本約 15％，並且性能約可提升 26%到 54%。 
Comparison of Two Data Hazard Handling Schemes for Asynchronous Pipelined 
Processors 
Meng-Chou Chang and Da-Sen Shiau 
Department of Electronic Engineering 
National Changhua University of Education 
Changhua, Taiwan, ROC 
e-mail: mchang@cc.ncue.edu.tw 
 
 
Abstract—Since asynchronous logic adopts a distributed 
control scheme, the traditional methods for handling hazards 
in synchronous processors cannot be directly applied to 
asynchronous processors. Recently, the data hazard detection 
table (DHDT) scheme has been regarded as an effective 
method for handling data hazards in asynchronous processors. 
In this paper, two asynchronous data hazard handling schemes, 
the DHDT scheme and the proposed destination register chain 
(DRC) scheme, are compared in terms of performance and 
hardware complexity. In order to evaluate these two data 
hazard handling schemes, we have used the Balsa 
asynchronous synthesis system to implement two asynchronous 
pipelined processors, AsynRISC-DHDT and AsynRISC-DRC, 
which employ DHDT and DRC, respectively, to deal with data 
hazards. Experimental results show that AsynRISC-DRC can 
achieve a 13% reduction in hardware area cost and a 
performance gain of 22.1% compared with AsynRISC-DHDT. 
Keywords-asynchronous logic; pipelined processor; data 
hazard; data hazard detection table 
I.  INTRODUCTION 
Asynchronous circuits have the potential advantages of 
low power consumption, high operating speed, low electro-
magnetic emission, no clock skew problem, and robustness 
toward variations in temperature, supply voltage and 
fabrication process parameters. In the last two decades, many 
asynchronous processor architectures have been proposed, 
such as CAP (Caltech Asynchronous Processor) [1], FAM 
(Fully Asynchronous Microprocessor) [2], NSR (Non-
synchronous RISC) [3], CFPP (Counterflow Pipeline 
Processor) [4], STRiP (Self-Timed RISC Processor) [5], 
TITAC [6], and Hades [7]. The AMULET group at the 
University of Manchester has developed a series of 
asynchronous implementations of the ARM RISC processor, 
namely AMULET1 [8], AMULET2e [9], and AMULET3i 
[10]. Moreover, some high-level languages and CAD tools 
for the modeling and synthesis of asynchronous circuits have 
also been developed. For example, Edwards and Bardsley at 
the University of Manchester have developed the Balsa 
system for describing and synthesizing asynchronous circuits 
[11,12]. The Balsa system has been successfully used to 
synthesize the 32-channel DMA controller [13] of 
AMULET3i and SPA [14], an AMULET core for smartcard 
applications. Recently, Zhang and Theodoropoulos at the 
University of Birmingham have used Balsa to implement the 
SAMIPS processor [15,16,17], an asynchronous 
implementation of the MIPS processor. 
In designing an asynchronous processor, three issues 
must be addressed: how to distribute the control, how to deal 
with data hazards, and how to handle control hazards. An 
asynchronous system is composed of a set of functional 
modules, each of which operates at its own rate 
synchronizing with its neighbors only when it needs to 
exchange information. Since the control in asynchronous 
systems is inherently distributed, the traditional hazard 
handling schemes for synchronous processors cannot be 
directly applied to asynchronous processors. 
Many data hazard handling schemes have been proposed 
for asynchronous processors. For example, Caltech’s 
asynchronous MIPS use a three- rather than five-stage 
pipeline to simplify the problems of hazards. The 
counterflow pipeline processor (CFPP) employs two separate 
pipelines, the instruction pipeline and the data pipeline, in 
which instructions and data flow in opposite directions so 
that a later instruction in the instruction pipeline can acquire 
the result of a former instruction from the data pipeline. The 
AMULET1 processor uses the register locking scheme to 
handle data hazards and the coloring scheme to deal with 
control hazards. Recently, the data hazard detection table 
(DHDT) scheme [16], used in the SAMIPS processor, has 
been regarded as an effective method for handling data 
hazards in asynchronous processors. 
In this paper, two asynchronous data hazard handling 
schemes, the data hazard detection table (DHDT) scheme 
and the destination register chain (DRC) scheme, are 
compared. We have used the asynchronous hardware 
description language Balsa to design two asynchronous 
pipelined processors, AsynRISC-DHDT and AsynRISC-
DRC, which utilize DHDT and DRC, respectively, to handle 
data hazards. These two processors have been synthesized, 
verified, and compared by using the Balsa system. Although 
the theme of this paper focuses on the data hazard handling 
schemes, the control hazard handling scheme and other 
characteristics of the AsynRISC processor are also discussed 
in this paper because they could also have an influence on 
the performance of the processor. 
instruction in the pipeline will produce the actual operand. In 
this case, the decoding instruction cannot get its source 
operand immediately, and instead it will get the operand via 
the forwarding mechanism when it enters the EXE stage. 
The decoder in the ID stage compares the decoding 
instruction’s instruction index, denoted by Ik, with its source 
register’s pending instruction index (PII), denoted by Ij, to 
determine the forwarding condition, i.e., from which stage 
the operand should be forwarded to the EXE stage when this 
instruction is being executed. If Ik = Ij+1, the source operand 
will be forwarded from the MEM stage to the EXE stage; if 
Ik = Ij+2, the source operand will be forwarded from the WB 
stage to the EXE stage. Also, the decoding instruction sets its 
destination register’s pending bit to 1, and stores its own 
instruction index Ik into the destination register’s PII field, 
denoting that the decoding instruction will produce the result 
for this register. 
When an instruction enters the EXE stage, the EXE 
controller checks the forwarding condition accompanying 
with the instruction, and determines whether the forwarding 
is needed and from which stage the result should be 
forwarded to the EXE stage. As shown in Fig. 1, the MEM 
stage uses the channel FW_from_MEM to forward the result 
back to the EXE stage; the WB stage uses the channel 
FW_from_WB to forward the result back to the EXE stage. 
Since there is no global controller in AsynRISC, the 
instruction in the MEM/WB stage does not know exactly 
whether the instruction in the EXE stage needs forwarding. 
Therefore, the instruction in the MEM/WB stage always 
forwards a result token via the 
FW_from_MEM/FW_from_WB channel to the EXE stage. 
Similarly, the instruction in the EXE stage always receives 
one result token from the FW_from_MEM channel and 
another result token from the FW_from_WB channel even 
though it needs no forwarding. 
When an instruction in the WB stage wants to write its 
result back to the destination register, it needs to check 
whether the associated pending instruction index is the same 
as the instruction’s index. If this is the case, it can write its 
result into the destination register and clear the associated 
pending bit; otherwise, it indicates that a succeeding 
instruction is trying to write the same register and this 
instruction must abandon its write operation.  
Some special cases need more consideration. When a 
branch is taken, those succeeding instructions from the fall-
through path might have entered the ID stages and 
mistakenly modified the pending bits in the DHDT. In order 
to overcome this problem, the IF stage attaches a FBTI (First 
Branch Target Instruction) flag to the first branch target 
instruction. The FBTI flag will cause the ID controller to 
clear all pending bits in the DHDT, and thus remove those 
fake data dependences. 
Another problem occurs when the processor is reset. As 
discussed earlier, a normal instruction in the EXE stage 
always consumes one token from channel FW_from_MEM 
and another token from channel FW_from_WB. However, 
when the processor is reset, the first instruction will get stuck 
in the EXE stage because there are no preceding instructions 
in the pipeline to provide the forwarding tokens. One 
possible solution is to design a special hardware to provide 
dummy forwarding tokens when the system is reset. In order 
to reduce the hardware complexity, we choose another 
approach. Two special instructions sys_reset1 and sys_reset2 
are added to the AsynRISC instruction set. The controller in 
the ID stage can recognize these two special instructions. 
The sys_reset1 instruction needs no forwarding token and 
the sys_reset2 instruction needs only one forwarding token 
from FW_from_MEM. These two instructions can be placed 
in the beginning of the interrupt service routine for system 
reset so that the processor always executes these two 
instructions first when it is reset. 
Compare rs1 with rd_EXE 
and rd_MEM 
Compare rs2 with 
rd_EXE and rd_MEM 
Register 
File 
operand_1 
forwarding 
condition FW_from_MEM
rd rs1 rs2 
C. Second Data Hazard Handling Scheme – Destination 
Register Chain 
AsynRISC-DRC employs the destination register chain 
(DRC) to deal with data hazards. The architecture of DRC is 
illustrated in Fig. 2. The destination register chain is located 
in the ID stage and composed of three registers, rd, rd_EXE, 
and rd_MEM. Register rd is used to keep the destination 
register number of the current instruction in the ID stage. 
Registers rd_EXE and rd_MEM are used to trace the 
destination register numbers of the two preceding 
instructions which have just passed the ID stage. 
When a new instruction enters the ID stage, the register 
numbers kept in DRC will move forward along the chain. 
That is, the original value in rd_MEM is discarded, the 
register numbers formerly kept in rd_EXE and rd are moved 
to rd_MEM and rd_EXE, respectively, and rd records the 
destination register number of the current instruction. Then, 
the source register numbers rs1 and rs2 of the current 
instruction are compared with rd_EXE and rd_MEM to 
determine the forwarding conditions. If the source register 
number is equal to rd_EXE/rd_MEM, it indicates that the 
source operand fetched from the register file is not up-to-date 
and the actual operand should be acquired via forwarding 
mechanism from channel FW_from_MEM/FW_from_WB. 
In contrast to the case of synchronous pipelined 
processors, where the destination register numbers for 
instructions in the pipeline are kept in physically distributed 
pipeline registers (as Fig. 8 in [15]) and the pipeline registers 
must operate in lock-step to correctly determine the 
forwarding conditions, the destination register chain in 
AsynRISC-DRC is located entirely within the ID stage, and 
the ID stage can determine the forwarding conditions 
without any synchronization with other pipeline stages. 
DRC 
rd_MEM 
rd_EXE 
Instruction Register 
ID stage 
 
Forwarding 
Unit 
 
ALU 
FW_from_WB 
EXE stage
operand_2 
Figure 2.  Destination register chain 
TABLE IV.  COMPARISON OF EXECUTION TIME BETWEEN ASYNRISC-
DHDT AND ASYNRISC-DRC 
 AsynRISC-DHDT AsynRISC-DRC
Execution time 7475200 6081200 
Benchmark 1 Normalized 
performance 1 1.229 
Execution time 7428200 6081200 
Benchmark 2 Normalized 
performance 1 1.222 
Execution time 7380200 6081200 
Benchmark 3 Normalized 
performance 1 1.214 
Execution time 7427867 6081200 
Average Normalized 
performance 1 1.221 
TABLE V.  COMPARISON OF THE AVERAGE INSTRUCTION DECODING 
TIME BETWEEN ASYNRISC-DHDT AND ASYNRISC-DRC 
 AsynRISC-DHDT AsynRISC-DRC
Average 
decoding time 45300 34866.7 Benchmark 1 Normalized 
performance 1 1.299 
Average 
decoding time 45033.3 34866.7 Benchmark 2 Normalized 
performance 1 1.292 
Average 
decoding time 44766.7 34866.7 Benchmark 3 Normalized 
performance 1 1.284 
Average 
decoding time 45033.33 34866.7 Average Normalized 
performance 1 1.292 
ACKNOWLEDGMENT 
This work is supported by the National Science Council, 
Taiwan, ROC, under Grant no. NSC98-2221-E-018-014. 
REFERENCES 
[1] A.J. Martin, S.M. Burns, T.K. Lee, D. Borkovic, and P.J. Hazewindus, 
The design of an asynchronous microprocessor, Technical Report 
Caltech-CS-TR-89-2, California Inst. of Technology, Pasadena, Calif., 
1989. 
[2] K.-R. Cho, K. Okura, and K. Asada, “Design of a 32-bit fully 
asynchronous microprocessor (FAM),” Proceedings of the 35th 
Midwest Symposium on Circuits and Systems, pp. 1500-1503, 1992. 
[3] E. Brunvand, “The NSR processor,” Proceedings of the 26th Annual 
Hawaii International Conference on System Sciences, pp. 428-435, 
1993. 
[4] R.F. Sproull, I.E. Sutherland, and C.E. Molnar, The counterflow 
pipeline processor architecture, IEEE Design and Test of Computers, 
vol. 11, no. 3, pp. 48-59, 1994. 
[5] M.E. Dean, STRiP: a self-timed RISC processor, Technical Report  
CSL-TR-92-543, Computer Systems Laboratory, Stanford University, 
July 1992. 
[6] T. Nanya, Y. Ueno, H. Kagotani, M. Kuwako, and A. Takamura, 
“TITAC: design of a quisi-delay-insensitive microprocessor,” IEEE 
Design and Test of Computers, vol. 11, no. 3, pp. 50-63, 1994. 
[7] C.J. Elston, D.B. Christianson, P.A. Findlay, and G.B. Steven, 
“Hades – towards the design of an asynchronous superscalar 
processor,” Proceedings of 2nd Working Conference on Asychronous 
Design Methodologies, pp.200-209, 1995. 
[8] J.V. Woods, P.Day, S.B. Furber, J.D. Garside, N.C. Paver, and S. 
Temple, “AMULET1: an asynchronous ARM processor,” IEEE 
Transactions on Computers, vol. 46, no.4, pp.385-398, 1997. 
[9] S.B. Furber, J.D. Garside, P. Riocreux, S. Temple, P. Day, J. Liu, and 
N.C. Paver, “AMULET2e: an asynchronous embedded controller,” 
Proceedings of the IEEE, vol. 87, no. 2, pp.243-256, 1999. 
[10] J.D. Garside, W.J. Bainbridge, A. Bardsley, D.A. Edwards, S.B. 
Furber, J. Liu, D.W. Lloyd, S. Mohammadi, J.S. Pepper, O. Perlin, S. 
Temple, and J.V. Woods, “AMULET3i – an asynchronous system-
on-chip,” Proceedings of International Symposium on Advanced 
Research in Asynchronous Circuits and Systems, pp. 162-175, 2000. 
[11] A. Bardsley and D.A. Edwards, "The Balsa asynchronous circuit 
synthesis system," Proceedings of the 3rd International Forum on 
Design Languages, pp. 37-44, September 2000. 
[12] A. Bardsley. Implementing Balsa Handshake Circuits. Ph.D. thesis. 
Department of Computer Science, University of Manchester, 2000. 
[13] A. Bardsley and D.A. Edwards, “Synthesising an asynchronous DMA 
controller with Balsa,” Journal of Systems Architecture, vol. 46, no. 
14, pp.1309-1319, 2000. 
[14] A. Bardsley, J. D. Garside, P. A. Riocreux, L. A. Plana, W. J. 
Bainbridge, and S. Temple, “SPA – a synthesisable AMULET core 
for smartcard applications,” Proceedings of Eighth International 
Symposium on Asynchronus Circuits and Systems (Async’2002), 
pp.201-210, 2002. 
[15] Q. Zhang and G. Theodoropoulos, “Towards an asynchronous MIPS 
R3000 processor,” Proceedings of the 8th Asia-Pacific Computer 
Systems Architecture Conference (ACSAC’03), Japan, pp. 137-150, 
Sep. 2003. 
[16] Q. Zhang and G. Theodoropoulos, “Modelling SAMIPS: a 
synthesisable asynchronous MIPS processor,” Proceedings of the 
37th Annual Simulation Symposium (ASS’04), pp. 205-212, 2004. 
[17] G. Theodoropoulos and Q. Zhang, “A distributed colouring algorithm 
for control hazards in asynchronous pipelines,” Proceedings of the 7th 
International Symposium on Parallel Architectures, Algorithms, and 
Networks, pp. 266-271, 2004. 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：□已發表 ■未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100字為限） 
相關成果發表在 2010 IEEE International Conference on Computer Science and 
Information Technology 和 ETS 2010 上。 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500字為限） 
本計畫提出一種新式「匹配線」感測的低功率 CAM 設計技術，此技術結合了「脈衝電流」
與「雙重正回授」這兩種電路概念，稱為雙重正回授匹配線感測放大器（Double 
Positive-Feedback Match-Line Sense Amplifier；DPF-MLSA）。DPF-MLSA 使用脈衝電流
降低「不匹配」情況的「匹配線」功率消耗，並使用雙重正回授電路技術加快「匹配」情
況的搜尋速度，來節省 CAM 的搜尋能量消耗。我們採用柏克萊大學提供的 BPTM 65nm 電晶
體模型，搭配供應電壓 1.1V 與溫度 25 ，並使用 Hspice 軟體模擬與量測比較各種不同匹
配線感測放大器 CAM 架構的性能與功率消耗。模擬結果顯示，我們提出的 DPF-MLSA CAM
架構，資料搜尋時間為 0.49699 ns，並且每位元搜尋能量消耗為 0.201474 fJ。量測結果
顯示，我們提出的 DPF-MLSA CAM 架構，比起採用「傳統 PC-MLSA」、「SBMS」和「PF-MLSA」
的 CAM 架構，搜尋能量分別節省了 85.481%、21.195%與 10.545%。 
 
