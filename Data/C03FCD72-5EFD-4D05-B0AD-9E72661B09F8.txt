  -I-
中文摘要 
因為無線感測器網路（以下簡稱感測網路）的資源稀少性，譬如 Diffie-Hellman 協定之類的
傳統金鑰交換機制並不適用在現在的感測器上。金鑰預分配的這種方法因而被提出來解決
感測網路上的金鑰交換問題。持續至今，金鑰預分配在感測網路的領域裡仍是最常見的方
法。但是要成功地讓金鑰預分配機制能達到該有的安全性以及讓一個實行金鑰預分配機制
的感測網路具有相當好的連通性的話必須有一個前提假設，也就是實行金鑰預分配的感測
網路是被緊密部署的。但是這在許多情況下是不一定成立的。譬如在有地形限制的感測區
域下，緊密部署這樣的條件則不一定能被達到。甚至說光是緊密部署這個要求即會使得網
路中的感測器的電波互相干擾而使得通訊變的不正常，因而我們根本不希望感測網路是被
緊密部署的。為此，我們在計畫中提出一個能夠同時適用於緊密部署以及稀疏部署的感測
網路，稱之 RCKPD。並且我們提出第一個針對無線感測網路的非交換式金鑰建立機制，稱
之為 CARPY+。相比於現有所有的無線感測網路上的金鑰建立機制，CARPY+能夠具有相
同的安全性，但是其具有極少的能量消耗。 
關鍵詞:  
無線感測網路、金鑰交換系統 
英文摘要 
Due to the limited resource of Wireless Sensor Networks (WSNs), traditional key-exchange 
protocols such as Diffie-Hellman protocol are considered to be infeasible. Instead, key 
pre-distribution is a promising and common method for WSNs for allowing two sensor nodes to 
share a key path with a certain probability. Numerous research projects have been devoted to 
enhancing the performance of key pre-distribution. However, an intrinsic assumption behind most 
of the existing key pre-distribution schemes is that the density of sensor nodes in a WSN should 
high, which unfortunately does not hold in some cases. In this project, we propose a randomized 
key pre-distribution scheme, called RCKPD, for all WSNs, especially suitable for sparse 
networks, without compromising security and some requirements of key pre-distribution. In 
RCKPD, key sharing is further enhanced via cooperation among sensor nodes to virtually 
increase the key ring size of a sensor node without actually storing the keys not originally 
assigned. Moreover, we propose the first non-interactive key establishment scheme, called 
CARPY+, for sensor networks. In particular, the energy consumption of CARPY+ is significantly 
lower than that of existing methods, while the security of CARPY+ can be preserved. 
Keywords:  
Sensor networks, Key establishment scheme
  -2-
connectivity 的上升。而 CARPY+則是利用我們提出的一種稱為 constrained random 
perturbation 的技巧來讓 key establishment 的安全性不變但是卻又有極低能耗。  
 
結果與討論 
 本研究分別提出優越的理論分析及實際評估之結果，證實了所提方法的實用性及可適
性。更詳盡的結果請參閱我們已發表的相關國際會議論文 [10] [11]。 
 
參考文獻  
[1] I. F. Akyildiz, W. Su, Y. Sankarasubramanian, and E. Cayirci, ``A survey on sensor 
networks,’’ In IEEE Communications Magazine, vol. 40, no. 8, pp. 102-114, Aug, 2002. 
[2] J. Jeong and Z. J. Haas, “Predeployed secure key distribution mechanisms in sensor 
networks: current state-of-the-art and a new approach using time information,” IEEE 
Wireless Communications, vol. 15, no. 4, pp. 42–51, Aug 2008. 
[3] Y. Zhou, Y. Fang, and Y. Zhang, “Securing wireless sensor networks: a survey,” IEEE 
Communications Surveys & Tutorials, vol. 10, no. 3, pp. 6–28, Third Quarter. 2008. 
[4] L. Eschenauer and V.D. Gligor. ``A key-management scheme for distributed sensor 
networks,’’ In Proceedings of the 9th ACM Conference on Computer and Communications 
Security (CCS), 2002. 
[5] H. Chan,A. Perrig and D. Song. ``Random Key Predistribution Schemes for Sensor 
Networks,’’ In IEEE Symposium on Security and Privacy (S&P), 2003. 
[6] H. Chan and A. Perrig, ``PIKE: Peer Intermediaries for Key Establishment in Sensor 
Networks,'' In the 24th IEEE Conference on Computer Communications (INFOCOM), 
2005. 
[7] S. Zhu, S. Setia and S. Jajodia, ``LEAP: efficient security mechanisms for large-scale 
distributed sensor networks,’’ In 10th ACM conference on Computer and communications 
security (CCS), 2003. 
[8] Z. Liu, J. Ma, Q. Huang, and S. Moon, “Asymmetric Key Pre-distribution Scheme for sensor 
networks,” in IEEE Transactions on Wireless Communications, vol. 8, no. 3, pp. 1366–1372, 
March. 2009. 
[9] F. Liu and X. Cheng, “LKE: A Self-Configuring Scheme for Location-Aware Key 
Establishment in Wireless Sensor Networks,” in IEEE Transactions on Wireless 
Communications, vol. 7, no. 1, pp. 224–232, March. 2008. 
[10] C. M. Yu and C. S. Lu, “Randomized Cooperative Key Pre-Distribution in Wireless Sparse 
Sensor Networks,” in Proc. of Workshop on Wireless Ad Hoc and Sensor Networks (WASN), 
Taipei, Taiwan, Sept. 2008. 
[11] C. M. Yu and C. S. Lu, “A Simple Non-Interactive Pairwise Key Establishment Scheme in 
Sensor Networks,” in Proc. of Sixth Annual IEEE Communications Society Conference on 
Sensor, Mesh and Ad Hoc Communications and Networks (SECON), Rome, Italy, Jun. 2009. 
 
  -4-
可供推廣之研發成果資料表 
5 可申請專利  5 可技術移轉                                      日期：98 年 05 月 25 日 
國科會補助計畫 
計畫名稱：無線感測網路上隨機合作型金鑰預分配機制 
計畫主持人：呂俊賢 
計畫編號：NSC 97-2221-E-001-008  
學門領域：資訊學門一 
技術/創作名稱 無線感測網路上的非交換式金鑰共享機制(Non-Interactive Pairwise Key Establishment Scheme in Sensor Networks) 
發明人/創作人 呂俊賢、游家牧 
中文：我們提出一種非交換式的金鑰建立系統，稱之為 CARPY+。
相比於現在其他的在無線感測網路上的金鑰建立系統，我們的方法
可以擁有以下特性。1) 能夠對攻擊者的各種攻擊具有容忍性，2) 對
於金鑰的建立具有保證性。3) 能夠適用於各種的網路組態上。 4) 
極端有效率並具有極低能耗。 5) 能夠允許動態節點佈置。據我們
所知，CARPY+是第一個在無線感測網路上的非交換式的金鑰建立
系統。我們從理論上以及實驗上論證了 CARPY+的實用性。實驗上
我們是把 CARPY+實現在 telosB 的網路節點當中來驗證。 
技術說明 
英文： In this study, a ConstrAined Random Perturbation based 
pairwise keY establishment (CARPY) scheme and its variant, a 
CARPY+ scheme, for Wireless Sensor Networks (WSNs), are 
presented. Compared to all existing schemes which satisfy only some 
requirements in so-called sensor-key criteria, including 1) resilience to 
the adversary's intervention, 2) directed and guaranteed key 
establishment, 3) resilience to network configurations, 4) efficiency, 
and 5) resilience to dynamic node deployment, the proposed CARPY+ 
scheme meets all requirements. In particular, to the best of our 
knowledge, CARPY+ is the first non-interactive key establishment 
scheme with great resilience to a large number of node compromises 
designed for WSNs. We examine the CARPY and CARPY+ schemes 
from both the theoretical and experimental aspects. Our schemes have 
also been practically implemented on the TelosB compatible mote to 
evaluate the corresponding performance and overhead. 
可利用之產業 
及 
可開發之產品 
本研究成果適合用於各種需要金鑰的無線感測網路 
技術特點 
本研究是第一個在無線感測網路上的非交換式的金鑰建立系統。 
Randomized Cooperative Key Pre-Distribution in
Wireless Sparse Sensor Networks
Chia-Mu Yu§†, Cheng-Chung Li‡, Chun-Shien Lu§∗, Der-Tsai Lee§‡ and Sy-Yen Kuo†
§Institute of Information Science, Academia Sinica, Taipei, Taiwan 115, ROC
†Department of Electrical Engineering, National Taiwan University, Taipei, Taiwan 106, ROC
‡Graduate Institute of Computer Science and Info. Eng., National Taiwan University, Taipei, Taiwan 106, ROC
Abstract—Key pre-distribution is a common method found in
resource-limited wireless sensor networks (WSNs) for allowing
two sensor nodes to share a key path with a certain probability.
Numerous research projects have been devoted to enhancing
the performance of key pre-distribution. However, an intrinsic
assumption behind most of the existing key pre-distribution
schemes is that the density of sensor nodes in a WSN should high,
which unfortunately does not hold in some cases. In this paper,
we propose Randomized Cooperative Key Pre-Distribution
(RCKPD) for all WSNs, especially suitable for sparse networks,
without compromising security and some requirements of key
pre-distribution. In RCKPD, key sharing is further enhanced
via cooperation among sensor nodes to virtually increase the
key ring size of a sensor node without actually storing the
keys not originally assigned. In comparison with the existing
schemes, RCKPD can be regarded as a distributed version of
the key pre-distribution scheme proposed by [5]. To evaluate
the proposed RCKPD method, the issues of memory overhead,
connectivity, communication overhead, and the size of critical
component after adversaries launch node capture attacks are
studied analytically and numerically. Simulation results and
comparisons with two known methods are also provided to
confirm our evaluations.
keywords: Key pre-distribution, Security, Sensor network, Sparse
sensor network
I. INTRODUCTION
Wireless Sensor Networks (WSNs) consist of resource-
limited sensor nodes, and usually are deployed by the au-
thority. Since WSNs can be used to monitor hostile areas,
secure communication is a critical issue of WSNs. Because
of the expensive energy consumption for asymmetric cryptog-
raphy, symmetric cryptography is very attractive to WSNs.
Nevertheless, in symmetric cryptography, a shared key is
needed to be discovered between two sensor nodes before
they actually communicate. To this end, key pre-distribution is
a useful solution and has been extensively studied. However,
two extreme cases of key pre-distribution, full pairwise keys
scheme and master key scheme, are considered to be either
memory-inefficient or insecure.
A. Related Work
To balance the memory overhead and resilience against
node capture, Eschenauer and Gligor [5] proposed basic
probabilistic key pre-distribution scheme (basic KPD). In their
scheme, a key pool S is first prepared for key distribution.
*Contact Author: Dr. C. S. Lu (lcs@iis.sinica.edu.tw).
Then, m distinct keys, which are randomly chosen from S
and assigned to each sensor node, are selected for each sensor
node to constitute a key ring. If two sensor nodes have at least
one common key in their key rings, then they can communicate
with each other using this common secret key. The efficiency
for memory overhead and connectivity of basic KPD relies on
the fact that a random graph achieves connectedness with high
probability if each node’s degree is above a threshold. Chan
et al. [3] proposed q-composite random key pre-distribution
scheme (q-composite KPD). This scheme is the same as basic
KPD except that the threshold for the number of common
keys between two sensor nodes is increased from 1 to q. In
such a setting, the security is superior to basic KPD while the
number of sensor nodes being captured is relatively small, and
is inferior to basic KPD otherwise.
To enhance the capability against node capture attack,
several improvements on key pre-distribution were proposed.
Du et al. [4] proposed multiple-space key pre-distribution
scheme, in which every sensor node is loaded with a number of
key spaces. When a pair of sensor nodes want to communicate,
they first discover a common key space and then calculate a
pairwise secret key using Blom’s scheme [1]. Liu and Ning
[6] proposed polynomial-pool based key pre-distribution. In
this key pre-distribution scheme, certain symmetric bivariate t-
degree polynomials are stored into each sensor node. Once two
sensor nodes need to establish a pairwise key, they discover
a common polynomial and then calculate a pairwise key via
the method by Blundo et al. [2].
B. Contributions
In view of the limitations of cost, interference, deployment,
and geography of sensor nodes in WSNs, the number of physi-
cal neighbors is usually limited. Therefore, dense networks are
not certainly feasible. In addition, most of the existing key pre-
distribution schemes are designed for dense sensor networks.
In this paper, we propose Randomized Cooperative Key Pre-
Distribution (RCKPD) to achieve key sharing between sensor
nodes in both dense and sparse sensor networks without
compromising security. Compared with the existing schemes,
RCKPD can be regarded as a distributed version of basic KPD.
In particular, the key pre-distribution scheme proposed by [5]
is a special case of RCKPD. In addition, instead of using
fraction of communications compromised, we propose to use
critical component size to evaluate the extent of security of
3of a sensor node will not be changed essentially. The purpose
of key-usage request issued by source sensor node s can be
regarded as a method of virtually increasing the key ring of
s. On the other hand, destination sensor node t also can issue
key-usage requests to virtually increase its key ring. Thus, key
rings of s and t are virtually enlarged with the cooperation of
their neighbors. Here, we can treat a sensor node with its key
ring enlarged by key-usage request as a super-node. Fig. 3
shows that two sensor nodes s and t want to communicate
with each other, the corresponding super-nodes s′ and t′ are
illustrated in dashed circles with h = 1. Due to the virtual
increase of key ring sizes, the probability of having shared
keys is increased as well.
s t
s' t'
Fig. 3. Basic idea of RCKPD.
C. Detailed Description
Consider that sensor nodes are scattered over the tar-
get area uniformly. Similar to the other existing key pre-
distribution schemes, Randomized Cooperative Key Pre-
Distribution (RCKPD) consists of three phases: key pre-
distribution phase, shared-key discovery phase, and path-
establishment phase. In the following, we assume that the
source sensor node s wants to communicate with the desti-
nation sensor node t.
Step 1: Key pre-distribution phase. This phase is performed
before sensor nodes are deployed. In this phase, we first
generate a set of keys, key pool S. Then, for each sensor
node, the key ring is obtained by randomly selecting m keys
from S without replacement. In addition, response probability
pr, required hop number h and security threshold q, are
assigned to every sensor node. Response probability indicates
the probability that when a sensor node receives a message
for helping achieve key sharing from another sensor node,
it will reply. Required hop number denotes the number of
hops the key-usage request can propagate when a sensor
node wants to achieve key sharing with another sensor node.
Security threshold defines the required number of shared keys
to achieve secure communication. The increase of security
threshold directly implies the enhancement of security.
Step 2: Shared-key discovery phase. The goal of this phase
is to let the source sensor node s and destination sensor
node t agree a common key. In RCPKD, finding a common
key between s and t is equivalent to finding a common key
between super-nodes s′ and t′, where s′ and t′, respectively,
correspond to the combination of s and some h-hop neighbors
of s, and the combination of t and some h-hop neighbors of t.
Once there is a common key between s′ and t′, this common
key is then used to encrypt/decrypt messages transmitted
between s and t. More details are as follows.
When the source sensor node s wants to communicate with
destination sensor node t, s broadcasts a message to all of
its h-hop neighbors in order to inform them that s needs to
collect their keys so as to increase the probability of finding
a common key with t. Once the sensor sˆ that is within h-hop
away from s receives this message, it according to the response
probability pr replies a list (α,EKi(α), sˆ), i = 1, . . . ,m,
to s, where Ki denotes its i-th key, α is a random word,
and EKi(α) means the encryption of α using Ki. After s
collects a number of lists from its h-hop neighbors, it puts
the lists together by concatenating one by one to form a new
list L. Note that s can collect those lists by specifying a
time period. After broadcasting, s does not proceed to next
step during this time period. s then sends L to t. When t
receives L, it tries to decrypt the encryptions in L. Once t
can successfully decrypt more than q encryptions, it replies
to s that the threshold q for the number of common keys is
achieved. Otherwise, it seeks help from its h-hop neighbors by
sending encryptions not successfully decrypted to all of its h-
hop neighbors. Once the h-hop neighbor tˆ of t receives these
messages, it also tries to decrypt the encryptions. tˆ replies
to t the number of encryptions it can successfully decrypt.
After t collects the responses from its h-hop neighbors, it can
check whether the threshold for the number of common keys
is achieved. Note that similar to the case on s, t can collect
the responses by specifying a time period. If the number of
common keys is over q, t replies to s the encryptions can
be successfully decrypted with the cooperation of its h-hop
neighbors. Otherwise, t replies to s that there are not enough
common keys and the path-establishment phase that will be
described in the following needs to be performed.
Step 3: Path-establishment phase. Path-establishment phase
takes place if the corresponding super-nodes s′ and t′ of s
and t do not have common keys, but s and t are connected by
two or more links in wireless communication range. Usually,
path-establishment phase can be accomplished by first finding
a path connecting s and t. On this path, shared-key discovery
can be successfully finished for each sensor node pair. When
such a path is found, the path-key shared between s and t is
generated by s, i.e., s will randomly select one key from its
key ring as the path key. Afterward, the path key is delivered
from s to t, and the security of the path can be guaranteed
by each sensor node pair in the Shared-key discovery phase.
Consequently, s and t can securely communicate with each
other with this path-key.
Due to the cooperation between sensor nodes in RCKPD,
the evaluation metrics such as local connectivity and global
connectivity are measured in terms of super-nodes. In other
words, we say that sensor nodes s and t share keys in RCKPD
if their corresponding super-nodes have common keys.
D. Effect of Parameters h, pr and q
The parameters, h, pr, and q, are dependent on the density
of network graph. When the network is sparse, it means that
5According to the above result, it can be shown that, the
probability pi that two sensor nodes, s and t, share i keys in
RCKPD given that the corresponding two super-nodes, s′ and
t′, do not have common nodes can be calculated as:
pi =
(|S|
i
)( |S|−i
ms′+mt′−2i
)(
ms′+mt′−2i
ms′−i
)( |S|
ms′
)( |S|
mt′
) , (2)
where ms′ and mt′ are the key ring size of s′ and t′, respec-
tively. Let pc be the probability that, in RCKPD, two sensor
nodes have sufficient keys to proceed secure communication
given that the corresponding two super-nodes do not have
common nodes. Hence, pc can be written as 1 − Pr[ two
sensor nodes in RCKPD share insufficient keys ], and
pc = 1−
q−1∑
i=1
pi. (3)
C. Resilience Against Node Capture
Let m and x be the number of keys stored in each sensor
node and the number of sensor nodes captured, respectively.
It can be observed that the probability that a given key has not
been compromised is (1 − m|S| )x. Thus, the expected fraction
of keys compromised by node capture attack is 1− (1− m|S| )x.
Assume that two sensor nodes can have secure communication
only if there are i common keys between them. Hence, the
probability that the secure link between two uncompromised
sensor nodes is compromised after x sensor nodes have been
captured can be formulated as∑
i≥q
(
1− (1− m|S| )
x
)i
· pi
p
, (4)
where p =
∑
i≥q pi is the probability that a secure link can
be achieved.
IV. SIMULATIONS
Through comprehensive simulations, the performance of
RCKPD can be fully presented. In this section, RCKPD, the
basic KPD proposed by Eschenauer and Gligor [5], and q-
composite KPD proposed by Chan et al. [3] are presented and
compared. We will evaluate RCKPD in terms of three metrics:
(1) the relationship among the key ring size, local connectivity,
and global connectivity; (2) the relationship between the
expected communication overhead and number of captured
sensor nodes; and (3) the relationship between the size of
critical component and number of captured sensor nodes.
In our simulations, we assume that there is one data sink in a
sensor network. Data sink is not different from the other sensor
nodes except that it is immune to the node capture attack
because data sink usually is tamper-resistant. In addition, the
maximum component consisting of data sink is defined as
critical component. In our evaluations, global connectivity
refers to the ratio of the number of sensor nodes in the
maximum component to the total number of sensor nodes in
a sensor network. Local connectivity refers to the probability
that two neighboring super-nodes have at least one common
key.
A. System Configuration
The settings of our simulations are as follows: (1) The
number of sensor nodes in the sensor network is 1000; (2)
The size of key pool is 10, 000; (3) The target area is
1000m × 1000m; (4) The wireless communication range of
each sensor node is 50m. We assume that all sensor nodes are
scattered over target area uniformly.
B. Relationship among Key Ring Size, Local Connectivity, and
Global Connectivity;
A comparison of memory overhead, local connectivity, and
global connectivity for our proposed method is shown in Table
I. Each element of Table I is obtained by averaging the results
from 100 randomly generated sample sensor networks.
From Table I, an immediate observation is that local con-
nectivity and global connectivity are positively proportional
to response probability and required hop number while they
are inversely proportion to security threshold. In addition, it
can be observed that, by using RCKPD, memory overhead can
be alleviated while preserving the local/global connectivity. In
practical use, this means that RCKPD can be applied on those
sensor nodes with more severe constrain on storage. Moreover,
when sensor nodes carry less keys, the extent of security of
sensor networks can be enhanced.
The reason why the local and global connectivity of RCKPD
is high is attributed to the cooperation between sensor nodes on
key sharing. Nevertheless, as mentioned in Sec. II-A, in [5] and
[3], though connectivity can be achieved by enlarging key ring
size of each sensor node, resilience against node capture will
be compromised. The reason why the methods [3], [5] cannot
achieve high global connectivity with small key ring size is
that in sparse networks the number of physical neighbors of
each sensor node is few such that the probability of having
a common key with at least one physical neighbor is rather
small. Compared with the other key pre-distribution schemes,
it can be imagined that in RCKPD each sensor node distributes
partial keys in its key ring among its h-hop neighbors. When
one sensor node (called the source node) needs to achieve key
sharing with the other sensor nodes (called target nodes), it
finds common keys with the help of the nodes neighboring
both the source and target nodes. Thus, it can be imagined
that the key ring size of each sensor node is virtually large
enough. Hence, given that the communication range for each
sensor node is set up such that the resulting network is loosely
connected, it is reasonable to achieve high global connectivity
on the network graph resulting from applying RCKPD to such
sparse networks.
It should be noted that Du et al.’s method [?] could
also achieve high global connectivity without incurring high
memory overhead. However, as mentioned in Sec. I-A, the
deployment knowledge is needed to be known in advance and
this is not always the case can be made.
7(X5)
Fig. 7. Fractions of communication vs. the range of hop distance (after 200
sensor nods are captured by adversaries)
s
t
(a) (b)
Fig. 8. (a) A partial view of sensor networks using the basic KPD [5]. Gray
nodes denote the nodes sharing keys with s. (b) A partial view of sensor
networks using RCKPD. Gray nodes denote the nodes directly sharing keys
with s. With cooperation of the node t, it can be thought of as that two black
nodes discover shared keys with s.
We look into the cases where 100 and 200 sensor nodes
are, respectively, captured by adversaries. The corresponding
results are shown in Fig. 6 and Fig. 7. We can observe
a trend that communication overhead of RCKPD is gradu-
ally increased and communication overhead of basic and q-
composite KPDs is significantly increased when the number
of captured sensor nodes is increased. In particular, our result
is superior to [3], [5] because of the fact that, after the capture
of sensor nodes by adversaries, the sensor network becomes
more fragmented and the cooperation between sensor nodes
has the benefit reducing communication overhead.
Fig. 9 is further used to illustrate the importance of coop-
eration between sensor nodes. After a node capture attack is
launched, we assume that the key kp on secure link between
sensor nodes, s and t, is compromised and the node labelled
in gray, having a common key with s, is not compromised.
Suppose that gray node also shares key kc with t. When the
basic or q-composite KPD is used, it is necessary to make
an alternative route (may be a devious route) to achieve the
secure communication between s and t without being able to
exploit the fact that gray node has a common key kc with t.
For example, the path composed of black nodes (shown in Fig.
9) is an ineffective path that can satisfy secure communication
between s and t by using basic or q-composite KPD. However,
if RCKPD is used, the key kc shared by gray node and t can
be used as a common key between the corresponding super-
nodes of s and t and thus spend less communication than the
one needed in basic or q-composite KPD.
s t
kc
kp
Fig. 9. A network graph where the key kp is used on the secure link between
s and t and the key kc is used on the secure link between s and gray node.
D. Resistance to Node Capture
The security of key pre-distribution schemes is usually eval-
uated in terms of resilience against node capture attack. This
criterion (denoted as CT1 here) is specified as the relationship
between the fraction of compromised communication and the
number of captured sensor nodes. However, this common
criterion is considered to not fit realistic situations in which
the authority of the sensor networks is concerned about how
many remaining sensor nodes can function and forward sensed
data back to data sink rather than how much communication
is compromised after a node capture attack is launched.
Therefore, we propose to use the size of critical component
as a new criterion (denoted as CT2 here) to evaluate the se-
curity of key pre-distribution schemes. The advantage of CT2
over CT1 is illustrated in Fig. 10. Fig. 10(a) shows that node
C is captured and only little communication is compromised.
Nevertheless, one of the compromised communication paths
(indicated by a blue dashed line) divides the network into
two components. When a sensor network contains only one
data sink, which means that even the component, without
containing the data sink, has better integrity, the collected
data cannot be forwarded to the authority. Therefore, this kind
of node capture harms the overall network severely but is
underestimated only if the relationship between the fraction
of compromised communication and the number of captured
sensor nodes is considered.
On the other hand, Fig. 10(b) shows that node C is cap-
tured with more communication compromised than the case
shown in Fig. 10(a). However, this does not harm the normal
operation of a whole sensor network in that the network is not
divided into fragments. Thus, we can conclude that this kind
of node capture does not harm the overall network severely but
is overestimated only if the relationship between the fraction
of compromised communication and the number of captured
sensor nodes is considered. Based on the above reasons, the
new criterion CT2 relevant to the size of critical component
size is considered in this paper.
Fig. 11∼ Fig. 14 show the results of fraction of critical
component not being compromised vs. number of captured
nodes under different settings. We can observe that the capa-
bility of resisting node capture attack is positively proportional
to required hop number and inversely proportional to the key
ring size. This is reasonable because, when the key ring size
is increased, one more sensor node being captured will lead
to more keys being gathered by adversaries. Thus, as the key
ring is required to be enlarged, as shown in Fig. 2, and there is
A Simple Non-Interactive Pairwise Key
Establishment Scheme in Sensor Networks
Chia-Mu Yu†§, Chun-Shien Lu†∗, and Sy-Yen Kuo§
†Institute of Information Science, Academia Sinica, Taipei, Taiwan 115, ROC
§Department of Electrical Engineering, National Taiwan University, Taipei, Taiwan 106, ROC
Abstract—In this paper, a ConstrAined Random Perturbation
based pairwise keY establishment (CARPY) scheme and its vari-
ant, a CARPY+ scheme, for Wireless Sensor Networks (WSNs),
are presented. Compared to all existing schemes which satisfy
only some requirements in so-called sensor-key criteria, including
1) resilience to the adversary’s intervention, 2) directed and guar-
anteed key establishment, 3) resilience to network configurations,
4) efficiency, and 5) resilience to dynamic node deployment, the
proposed CARPY+ scheme meets all requirements. In particular,
to the best of our knowledge, CARPY+ is the first non-interactive
key establishment scheme with great resilience to a large number
of node compromises designed for WSNs. We examine the
CARPY and CARPY+ schemes from both the theoretical and
experimental aspects. Our schemes have also been practically
implemented on the TelosB compatible mote to evaluate the
corresponding performance and overhead.
I. INTRODUCTION AND RELATED WORK
A Wireless Sensor Network (WSN) is composed of a large
number of sensor nodes with limited resources. Since WSNs
could be deployed in a hostile environment, designing an
efficient key establishment scheme is of great importance to
the data security in WSNs. Unfortunately, when considering
the scarce resources available to each sensor node, the efficient
design of key establishment becomes a great challenge.
In the literature, there were two classical threshold-based
key distribution (TKD) protocols [1], [2] proposed. As the
security of both protocols is completely broken as long as
the number of captured nodes is above a pre-determined
threshold, which is a trade-off to the storage overhead, they
are considered not to be suitable for WSNs. To provide
resilient security, a useful technique called probabilistic key
pre-distribution (P-KPD), proposed by Eschenauer and Gligor
[9], has been extensively studied. In a P-KPD scheme, a key
pool consisting of a large number of randomly generated keys
is first prepared. Then, several keys randomly selected from
the key pool are stored in each sensor node to constitute a
key ring. After sensor deployment, when required, a shared-
key discovery procedure is performed to find a common key
between two nodes, called shared-key, in their respective key
rings. Two nodes, i and j, that fail to have a shared-key in the
shared-key recovery step, perform a procedure, called path-key
establishment, in which the path-key generated by i is relayed
along the key path to j and acts as the common key between
i and j. Here, the key path is a path on which each pair
*Corresponding author: Dr. C. S. Lu (lcs@iis.sinica.edu.tw).
of consecutive nodes has a shared-key. Motivated by the P-
KPD, Chan et al. [4] proposed that, instead of relying on only
one common key, q common keys between two sensor nodes
are necessary to construct the shared-key used for further
communications.
Due to the problem that different pairs of nodes could
share the same key, when the number of compromised nodes
increases, the fraction of affected keys increases quickly as
well. Liu and Ning [12], and Du et al. [7] proposed to treat
the keys in the key pool S as bivariate polynomials and
matrices, respectively, to provide pairwise keys between each
pair of nodes. There are some other common drawbacks in
the P-KPD schemes. For example, P-KPD schemes cannot
guarantee that any two sensor nodes can have common keys.
Moreover, the Merkle puzzle [17] must be used to guarantee
the minimal secret information leakage. In view of this, several
deterministic key pre-distribution (D-KPD) schemes such as
PIKE [3] and combinatorial design scheme [5] are proposed.
D-KPD schemes can guarantee that there exists at least one
key path between two arbitrary nodes.
A common problem existing in both P-KPD and D-KPD
schemes is that not every pair of nodes can directly establish
their common key. Zhang et al. recently proposed a Random
Perturbation-Based (RPB) scheme [25] to conquer this, while
maintaining resilient security. Usually, one assumes that, prior
to sensor deployment, nodes’ locations are not known by
the network planner. When some special deployment mod-
els are considered, prior knowledge about nodes’ locations
can be utilized to construct efficient location-aware key pre-
distribution (L-KPD) schemes [6], [10]. In addition, based on
the assumption that there is a short bootstrapping time secure
after sensor deployment, LEAP [24] is proposed to establish
the pairwise keys between each pair of neighboring nodes.
With the fact that the communication channels in WSNs are
highly noisy [23] and that over 95% of energy consumption
comes from communication [16] in mind, we can know that
although numerous key establishment schemes are proposed,
all of them, except the TKD schemes [1], [2] (which unfor-
tunately cannot achieve resilient security), are inefficient and
highly energy-consuming. Thus, it is desirable, but extremely
challenging, to have a key establishment scheme satisfying
both security and energy efficiency.
Evaluation Metrics. To evaluate the key establishment
schemes, five requirements were recently presented in [25].
Nevertheless, we find that they are too weak to be utilized,
3Ki,j (= Ai,−·G−,j) and Kj,i (= Aj,−·G−,i), respectively. Fig.
1 illustrates Blom’s idea. Blom’s scheme achieves so-called λ-
secure [1], which ensures that as long as no more than λ nodes
are compromised, the security can be perfectly preserved. In
spite of such guaranteed security, Blom’s scheme cannot be
directly applied to WSNs because the storage overhead grows
rapidly when the security level must be preserved in a network
of large size. Intuitively, the security of Blom’s scheme comes
from the privacy of the matrix D, while the matrix G acts as a
public information even for the adversary. When D is totally
known by the adversary, Blom’s scheme becomes insecure.
»»
»»
¼
º
««
««
¬
ª
16192019
12161818
19252721
36424034
»»
»»
¼
º
««
««
¬
ª
224
224
»»
»»
¼
º
««
««
¬
ª
3314
1142
1124
2114
A G K
,1A
,3A
1,G 3,G
3,1
K
1,3
K x
Fig. 1. An illustration of the Blom’s scheme.
C. The CARPY Scheme
We assume that the network consists of N sensor nodes with
IDs, I = {s1, s2, . . . , sN} and s1 < s2 < . . . , < sN . We also
assume that q > sN , where q is a parameter of a finite field
Fq , and λ is an appropriate security parameter independent of
N , which leverages the security level and storage overhead.
1) Basic Idea of CARPY: In Blom’s scheme, communica-
tions become insecure after more than λ sensor nodes are
compromised. The reason for this is that the row vector Ai,−
in the sensor node i is directly related to the private matrix
D. Hence, after collecting a sufficient number of row vectors
of A, the adversary is able to construct the private matrix D
by solving a system of linear equations since G is publicly
known. An idea, similar to the one used in [25], to enhance
the security is to break the direct relation between D and
A by adding certain random noise1 on A to distort Blom’s
key. However, if improper random noise is applied, either
additional computation and communication are needed to
extract the common bits of distorted Blom’s key between two
sensor nodes, or the common key cannot be found anymore.
To conquer these drawbacks, we propose to apply constrained
random perturbation (CRP). The constrained random per-
turbed Blom’s key, when compared to the original Blom’s
key, will satisfy high signal-to-noise (SNR) ratio, i.e., if the
length of Blom’s key is `, then only the least r (r < `) bits
of Blom’s key are perturbed after the CRP is added. Thus,
the first `− r bits of Blom’s key are retained, resulting in the
guaranteed establishment of the common key without the need
of additional overhead. In contrast to the random perturbation
[25] that incurs unnecessary computation and communication
overhead, the way of constructing CRP and the corresponding
efficiency gain substantially differentiate our work and [25].
The main idea of CARPY is shown in Fig. 2. Obviously, the
1The terms, random noise and random perturbation, will be used inter-
changeably throughout this paper.
execution of each round of the CARPY scheme can generate
`−r bits of a pairwise key. When the bit-length of desired key
is L > (`−r), the CARPY scheme should be executed d L`−r e
rounds to generate a pairwise key with desired key length.
Although d L`−r e rounds of CARPY are required, the overall
computation overhead, which will be analyzed in Sec. III-B2,
is still affordable for the current generation sensor nodes.
»»
»»
¼
º
««
««
¬
ª
16192019
13151717
19252721
37414135
»»
»»
¼
º
««
««
¬
ª
218
228
»»
»»
¼
º
««
««
¬
ª
3314
1142
1124
2114
> @ > @ > @11113642403437414135
1,1,1
    IAW> @ > @ > @11111216181813151717
3,3,3
    IAW
W G 'K
,1W
,3W
1,G 3,G
3,1
'K
1,3
'K
1,33,1
'' KK z but
 x
 
 228000111
218000111
5,111,3
5,113,1
fX
fX
  
  1
I
3
Iand are the random noise for and,1W ,3W , respectively
Fig. 2. An illustration of the CARPY scheme.
There are two steps in the CARPY scheme, the off-line step
and the on-line step. In general, off-line step is performed,
before deployment of sensor nodes, to determine the desired
key length, select appropriate parameters, and pre-install the
keying materials into the sensor nodes. The on-line step is
performed for each pair of sensor nodes required to find the
pairwise key in common after sensor nodes are deployed.
2) Off-line Step of CARPY: In addition to the parameters
such as the size q of the finite field Fq , the security parameter
λ of Blom’s scheme, and the set I of IDs of sensor nodes
mentioned in the previous sections, some other parameters
such as the number r of least bits perturbed by CRP for
the Blom’s key, and the bit-length L of desired key should
be determined by the network planner before off-line step
is executed. Let ` be the least number of bits necessary to
represent the elements in Fq . Since the execution of each round
of the CARPY scheme can generate `−r bits of a pairwise key,
the CARPY scheme should be executed ξ (= d L`−r e) rounds
to obtain a pairwise key with desired key length L.
The algorithm for the off-line step is shown in Fig. 3.
Here, we explain the off-line step of the CARPY scheme
from executing the t-th round of the CARPY scheme, where
1 ≤ t ≤ ξ. Note that all the arithmetic operations in the
subsequent descriptions are accomplished in the finite field
Fq unless specifically noted. At first, as in Blom’s scheme,
the network planner randomly generates two matrices D(t) ∈
F(λ+1)×(λ+1)q and G(t) ∈ F(λ+1)×sNq such that D(t) is sym-
metric and any λ+1 columns of G(t) are linearly independent.
After that, we calculate the matrix A(t) = (D(t) ·G(t))T .
Let cmin(%, r) be the value of % which has least r bits of its
binary representation set to 0. Similarly, let cmax(%, r) be the
value of % which has least r bits of its binary representation
set to 1. For example, cmin(524, 5) = 512 and cmax(524, 5) =
543. Let Φ(t)su denote the set of CRPs applied on the row vector
A
(t)
su for su ∈ I . When the t-th round of the CARPY scheme
5Algorithm: CARPY+-Off-line-Step(q, r, I, λ, L)
Input: q: elements of D and G are selected from Fq
r: the least r bits which will be infected by CRP
I: the set of sensor node identities
λ: a security parameter
L: the bit-length of desired key
1 Calculate `
2 for t = 1 to ξ (=d L`−r e)
3 Select ϕ
4 Randomly generate D(t), and calculate A(t)
5 for u = 1 to |I| (= N )
6 Calculate Φ(t)su
7 Randomly select a row vector φ(t)su from Φ
(t)
su
8 Calculate W (t)su,− = A
(t)
su,− + φ
(t)
su
9 Store W (t)su,− and ϕ into the sensor node su
Fig. 5. Off-line step of the CARPY+ scheme.
Algorithm: CARPY+-On-line-Step
Scenario: nodes suˆ and svˆ want to agree a pairwise key
Note: this algorithm is executed by the sensor node suˆ
1 for t = 1 to ξ (= d L`−r e)
2 Calculate G(t)−,svˆ
3 Calculate κ(t)suˆ,svˆ =W
(t)
suˆ,− ·G
(t)
−,svˆ
4 Calculate X(t)suˆ,svˆ = f`,r(κ
(t)
suˆ,svˆ )
5 Calculate Xsuˆ,svˆ = X
(1)
suˆ,svˆ ||X(2)suˆ,svˆ || · · · ||X(ξ)suˆ,svˆ
Fig. 6. On-line step of the CARPY+ scheme.
the efficiency of the linear programming (LP), and we refer
readers to [13] for the terminology of linear programming.
TwiLP Algorithm. Recall that our objective is to find more
than two CRPs, φ(t)su , satisfying Eqs. (1)∼(3), for 1 ≤ t ≤
ξ and 1 ≤ u ≤ N . Unfortunately, to our knowledge, other
than the exhaustive search, there is no technique useful for
finding the solutions. An observation here is that, though the
consideration of Eqs. (1)∼(3), which constitute the so-called
CRP criteria, can provide all the possible CRPs, in fact, the
consideration of a restricted version of Eqs. (1)∼(3), called
weak CRP criteria, is sufficient for our use in most cases of
CARPY and CARPY+. The weak CRP criteria are given as:
−φ(t)su ·G(t)−,sv ≤ αu,v,r (4)
φ(t)su ·G(t)−,sv ≤ βu,v,r (5)
−A(t)su,k ≤ φ(t)su (k) ≤ q − 1−A
(t)
su,k
(6)
φ(t)su (k) ∈ Z, (7)
where u 6= v, 1 ≤ u, v ≤ N , 1 ≤ k ≤ (λ+ 1), φ(t)su (k) is the
k-th element of φ(t)su ,
αu,v,r = (A
(t)
su,− ·G
(t)
−,sv )− cmin(A
(t)
su,− ·G
(t)
−,sv , r), (8)
and
βu,v,r = cmax(A
(t)
su,− ·G
(t)
−,sv , r)− (A
(t)
su,− ·G
(t)
−,sv ). (9)
An immediate observation is that the solutions satisfying the
weak CRP criteria are a subset of the solutions satisfying the
CRP criteria, because the weak CRP criteria can be regarded as
the CRP criteria without considering the modular arithmetic.
From an integer linear programming (ILP) point of view, some
CRPs can be thought of as the set of all the feasible solutions
in the feasible region formed by the linear constraints of Eqs.
(4)∼(7). In other words, finding a CRP amounts to finding a
point in the feasible region. Thus, by introducing an arbitrary
objective function, a CRP can be constructed by finding an
optimum solution of the corresponding ILP. Recall that, since
Φ(t)su is composed of several CRPs, the strategy we use here
is to discover a CRP one by one. Once more than two CRPs
are found, the construction of Φ(t)su is considered successful. In
the following, we explain the construction of φ(t)su , an element
of Φ(t)su .
By assuming two objective functions O1 and O2 are op-
posite each other, we propose an algorithm, called TwiLP,
in which LP-relaxation [20] is used twice to find the two
optimum solutions with respect to O1 and O2 in LPs and then
performs randomized rounding [19] on the point resulted from
averaging those two optimum solutions to search for a feasible
solution of ILP. A more detailed description is as follows. Note
that the usage of averaging is to enhance the possibility that
the result is still within the feasible region.
Implementation Issues. It can be observed that TwiLP
could fail to find the CRPs even if several iterations are
performed. From the implementation perspective, there exists
another way to construct CRPs. The observation here is that
if the elements of G(t) are relaxed to small floating point
numbers instead of integers, then Eqs. (4)∼(7) can be easily
satisfied. Specifically, G(t) can be constructed as described
in Sec. II-D, followed by a division using a large integer
γ (e.g., γ ≥ 100). Note that after such scalar division,
the property of G(t) that any λ + 1 columns are linearly
independent can still be kept. The algorithm of constructing
CRPs is described as follows. At first, an integer vector φ(t)su is
randomly generated. For φ(t)su , we examine if Eqs. (4)∼(7) are
satisfied. The above procedure is repeated until a satisfiable
vector is found. Despite its similarity to exhaustive search, in
practice, after the relaxation of G(t), such a simple randomized
algorithm is very efficient and effective for generating CRPs.
For example, when q = 216 − 15, λ = 128, and r = 14, only
less than 10 seconds are needed to generate a CRP.
III. SECURITY AND PERFORMANCE EVALUATION
A. Security Analysis
In this paper, we assume that four categories of attacks
could be mounted by the adversary. They are eavesdropping
attack, node capture attack, routing layer attack, and physical
layer attack. Note that the intention of the adversary’s inter-
vention could be the compromise of the security of the key
7the capability of transmitting and receiving packets for some
specified nodes through radio frequency interference. Solely
exploiting physical layer attack cannot help the adversary
gain the information about the pairwise key, but it can block
the communications among a group of selected nodes so
that the key establishment has the possibility of not being
accomplished. However, the CARPY+ scheme is indeed robust
to the physical layer attacks since the pairwise key can be
calculated without the need of communication.
5) Denial of Service (DoS) Attack: In this paper, we only
emphasize the DoS attack incurred by applying the key
establishment schemes. As for the Path-based DoS (PDoS)
attack [8], the bogus message, aiming at performing shared-
key discovery or path-key establishment, can always be sent
from the adversary to a victim node to exhaust the energies of
the victim node and the nodes on the path to the victim nodes.
However, because no communication or interaction between
nodes is required in CARPY+ for establishing the pairwise
key, DoS attacks can be resisted.
B. Performance Analysis
The prototypes of both the CARPY and CARPY+
schemes have been implemented on the TelosB compati-
ble mote (Micro-Controller: TI MSP430F1611; Flash Mem-
ory: 48KB+256B; RAM: 10KB; Radio Chipset: ChipCon
CC2420). The programming tool we used is the native C
compiler on IAR Embedded Workbench, instead of TinyOS.
In our experiments, the parameters were set as follows. The
desired key length L was 128, q = 216 − 15, λ = 128,
and r = 8. We used the diagnostic and profiling outputted
from IAR Embedded Workbench to estimate storage and
computation overhead. It should be noted that the elements
of G(t) used in the experiments were selected and represented
in floating points for ease of implementation.
1) Storage Overhead: If CARPY is used, then, for sensor
node su, the row vectors A
(t)
su,− and column vectors G
(t)
−,su
are needed to be stored. Since ξ rounds of CARPY need to be
performed independently, when G(t), 1 ≤ t ≤ ξ, are selected
to be the same, the storage overhead is therefore O(ξ · λ). If
CARPY+ is used, for sensor node su, only row vectors A
(t)
su,−
and an element s need to be stored. Since the CARPY+ scheme
also needs to be performed ξ rounds, the storage overhead for
CARPY+ is, thus, O(ξ · λ). In our experiments, the storage
overhead of CARPY is 288 bytes for CODE memory and 8912
bytes for DATA memory, while that of CARPY+ is 690 bytes
for CODE memory and 8906 bytes for DATA memory.
2) Computation Overhead: For different su and sv , λ+ 1
multiplications and λ additions are needed to carry out the
multiplication of Asu,− and G−,sv in each round of CARPY.
The computation overhead of CARPY+ is slightly larger than
that of CARPY because each node calculates the needed
column vectors by itself. From the su point of view, after
the calculation of ϕsv (see Sec. II-D), λ + 1 multiplications
and λ additions are sufficient to simultaneously carry out the
generation of G−,sv , and the multiplication of Asu,− and
G−,sv by using Horner’s rule in each round of execution of
CARPY+. The computation overhead, i.e., number of cycles
required for the key generation, in CARPY is 1138548, which
is approximately equivalent to 0.14 seconds. In addition, the
number of cycles required for the key generation of CARPY+
is 1209756, which is about 0.15 seconds.
3) Communication Overhead: In CARPY, the communi-
cations happen only when two sensor nodes exchange their
respective column vectors. As the length of a column vector
is O(λ) and the expected hop distance between two arbitrary
nodes in a random flat network is O(
√
N), the communication
overhead is therefore O(ξ ·λ ·√N). On the other hand, it can
be easily observed from the scheme described in Fig. 6 that
there is no communication needed in the CARPY+ scheme.
4) Energy Consumption: In this paper, we utilize a model
similar with the one considered in [18] and [22] to estimate
the energy consumption of CARPY and CARPY+, and then
compare it with the other schemes. In general, we consider the
networks composed of N sensor nodes, in which the packet
loss rate ploss of each link between any two neighboring nodes
is the same. In other words, delivery of single packet will
fail with probability ploss. Assume that the byte-length of
the maximum payload in a packet is Lpacket. The expected
length of the shortest path connecting two arbitrary nodes in
the network is assumed to be h. Denote the energy consump-
tion of transmitting and receiving one packet as et and er,
respectively. In the following, we first formulate the energy
consumption for the CARPY and CARPY+ schemes. Then, a
comparison among them will be presented.
We calculate the energy consumptions ECARPY and
ECARPY+ for both CARPY and CARPY+, respectively.
ECARPY can be estimated as ECARPY = EcommCARPY +
EcompCARPY . Here, E
comm
CARPY is calculated as:
2 · h · ξ · d ` · (λ+ 1)
8 · Lpacket e · (
et
1− ploss + er), (10)
because the respective column vectors of G of two nodes su
and sv need to be exchanged. As for E
comp
CARPY , it can be
computed as 2 · ξ · ((λ+ 1) · em + λ · ea), where ea and em,
respectively, denote the energy consumption of accomplishing
the addition and multiplication of two integers, as the primary
task needed to be performed by two ends is to calculate an
inner product.
Since, in the CARPY+ scheme, a pairwise key can be
directly constructed between any pair of nodes without the
need of communication, the energy consumption EcommCARPY+
is zero. As to the computation needed for the construction of
the common key between two nodes su and sv , the node su
should first generate the corresponding column vector G(t)−,sv ,
requiring ξ · log(sv + 1) multiplications if the set {ϕ2i |i ∈
N, 2i ≤ sN} is stored in each node. After that, the computation
of the inner product, which is similar to the one used in
the CARPY scheme, is carried out to construct the common
key. As a result, when Horner’s rule is exploited, the energy
consumption EcompCARPY+ of the CARPY+ scheme for the
computation is at most ξ((2(λ+1)+log(sN +1))em+2λea).
9involves a constant number of additions and multiplications.
Hence, because of the communication-free property of the
CARPY+ scheme, both the energy saving and reduction of
latency incurred by the key establishment are very significant.
Resilience to Dynamic Node Deployment (RDND). In D-
KPDs, key sharing between nodes usually relies on some fixed
structures, such as the hypercube in [3] and the symmetric
design in [5]. If the construction of the underlying structure
does not consider the nodes to be deployed in the future,
on-the-fly addition of nodes is usually infeasible. A possible
solution is to construct the structure with the consideration
of a large number of nodes, but it also increase the storage
overhead. Compared with D-KPDs, on-the-fly addition of
nodes can be supported by also taking a large number of nodes
to be deployed in the future into account prior to the initial
node deployment. Fortunately, irrespective of the number of
nodes considered, the size of keying materials necessary to be
stored in each node is the same. Accordingly, by considering
the nodes to be deployed in the future in the construction of
W (t) and G(t), our proposed CARPY and CARPY+ schemes
are resilient to dynamic node deployment.
Other Advantages. A unique feature possessed by
CARPY+ is that it is transparent to the other network services,
that is, CARPY+ can work well in cooperation with the other
network services such as routing and power saving mecha-
nisms. For example, radio function of sensor nodes usually
should be turned off to prolong the network lifetime. However,
if the other schemes requiring communications are used for
establishing keys, for the efficiency of key establishment the
nodes should be always in the active mode to deliver the
packets with minimal latency, resulting in the faster energy
depletion of sensor nodes. On the other hand, for the efficiency
of power consumption, the nodes often turn off their radio,
leading to an unstable route between nodes and, therefore,
larger latency in establishing keys. Fortunately, since the
proposed CARPY+ scheme does not require communications,
it does not need to face such a dilemma.
IV. CONCLUSION
Two ConstrAined Random Perturbation based pairwise keY
establishment (CARPY and CARPY+) schemes are con-
structed via a novel constrained random perturbation tech-
nique. In terms of the so-called sensor-key criteria, while
all the existing schemes only satisfy a few requirements,
the proposed CARPY+ scheme meets all the requirements.
In particular, CARPY+ is the first non-interactive key estab-
lishment scheme with great resilience to a large number of
node compromises for WSNs. Together with a comprehensive
comparison, theoretical and experimental results are provided
to validate the performance of the CARPY and CARPY+
schemes.
Acknowledgment: Chia-Mu Yu and Chun-Shien Lu were
supported by NSC 97-2221-E-001-008. Sy-Yen Kuo was sup-
ported by NSC 96-2628-E-002-138-MY3.
REFERENCES
[1] R. Blom. An optimal class of symmetric key generation systems. In
Proc. International Conference on the Theory and Applications of Cryp-
tographic Techniques (EUROCRYPT), 1984.
[2] C. Blundo, A. D. Santis, A. Herzberg, S. Kutten, U. Vaccaro, and M.
Yung. Perfectly-secure key distribution for dynamic conferences. In Proc.
International Cryptology Conference (CRYPTO), 1993.
[3] H. Chan and A. Perrig. PIKE: Peer Intermediaries for Key Establishment
in Sensor Networks. In Proc. IEEE Conference on Computer Communi-
cations (INFOCOM), 2005.
[4] H. Chan, A. Perrig, and D. Song. Random Key Predistribution Schemes
for sensor networks. In Proc. IEEE Symposium on Security and Privacy
(Oakland), 2003.
[5] S. A. C¸amtepe and B. Yener. Combinatorial Design of Key Distribution
Mechanisms for Wireless Sensor Networks. In IEEE/ACM Trans. on
Networking, vol. 15, no. 2, pp. 346-358, 2007.
[6] W. Du, J. Deng, Y. S. Han, S. Chen, and P. K. Varshney. A key
Management Scheme for Wireless sensor networks Using Deployment
Knowledge. In Proc. IEEE Conference on Computer Communications
(INFOCOM), 2004.
[7] W. Du, J. Deng, Y. S. Han, and P. Varshney. A Pairwise Key Pre-
Distriubtion Scheme for Wireless Sensor Networks. In Proc. ACM Com-
puter and Communications Security Conference (CCS), 2003.
[8] J. Deng, R. Han, S. Mishra. Defending against Path-based DoS Attacks
in Wireless Sensor Networks. In Proc. ACM Workshop on Security of Ad
Hoc and Sensor Networks (SASN), 2005.
[9] L. Eschenauer and V. Gligor. A Key-management Scheme for Distributed
sensor networks. In Proc. ACM Computer and Communications Security
Conference (CCS), 2002.
[10] D. Huang, M. Mehta, D. Medhi, and L. Harn. Location-aware key man-
agement scheme for wireless sensor networks. In Proc. ACM Workshop
on Security of Ad Hoc and Sensor Networks (SASN), 2004.
[11] C. Karlof and D. Wagner. Secure routing in wireless sensor networks:
attacks and countermeasures. In Proc. IEEE International Workshop on
Sensor Network Protocols and Applications, 2003.
[12] D. Liu, P. Ning. Establishing Pairwise Keys in Distributed Sensor
Networks. In Proc. ACM Computer and Communications Security Con-
ference (CCS), 2003.
[13] J. Matousˇek and B. Ga¨rtner, Understanding and Using Linear Program-
ming. Springer Verlag, 2006.
[14] F. J. MacWilliams and N. J. A. Sloane. The Theory of Error-Correcting
Codes. Elsevier Science Publishing Company, Inc, 1977.
[15] J. Newsome, E. Shi, D. Song, and A. Perrig. The Sybil Attack in
Sensor Networks: Analysis and Defenses. Proc. ACM/IEEE International
Conference on Information Processing in Sensor Networks (IPSN), 2004.
[16] A. Perrig, R. Szewczyk, V. Wen, D. Culler, and D. Tyger. SPINS:
Security Protocols for Sensor Networks. In Proc. ACM International
Conference on Mobile Computing and Networking (MobiCom), 2001.
[17] R. C. Merkle. Secure Communications over Insecure Channels. In
Communication of ACM, vol. 21, no. 4, pp. 294-299, 1978.
[18] K. Ren, W. Lou, and Y. Zhang. LEDS: Providing Location-aware
End-to-end Data Security in Wireless Sensor Networks. In Proc. IEEE
Conference on Computer Communications (INFOCOM), 2006.
[19] P. Raghavan and C. D. Tompson. Randomized rounding: A technique
for provably good algorithms and algorithmic proofs. In Combinatorica,
vol. 7, no. 4, pp. 365-374, 1987.
[20] V. V. Vazirani. Approximation Algorithms. Springer Verlag, 2002.
[21] A. D. Wood and J. A. Stankovic. Denial of Service in Sensor Networks.
In IEEE Computer, vol. 35, no. 10, pp. 54-62, 2002.
[22] F. Ye, H. Luo, S. Lu, and L. Zhang. Statistical En-Route Filtering of
Injected False Data in Sensor Networks. In Proc. IEEE Conference on
Computer Communications (INFOCOM), 2004.
[23] J. Zhao and R. Govindan. Understanding Packet Delivery Performance
in Dense Wireless Sensor Networks. In Proc. ACM Conference on
Embedded Networked Sensor Systems (SenSys), 2003.
[24] S. Zhu, S.Setia, and S.Jajodia. LEAP: Efficient Security Mechanisms
for Large-Scale Distributed Sensor Networks. In Proc. ACM Computer
and Communications Security Conference (CCS), 2003.
[25] W. Zhang, M. Tran, S. Zhu, and G. Cao. A Random Perturbation-
Based Scheme for Pairwise Key Establishment in Sensor Networks. In
Proc. ACM International Symposium on Mobile Ad Hoc Networking and
Computing (MobiHoc), 2007.
