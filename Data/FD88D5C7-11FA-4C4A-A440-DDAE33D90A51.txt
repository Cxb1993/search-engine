algorithm is developed to maximize the energy 
saving, compared to the executions of tasks on 
a DVS processor. 
In the first year, we proposed bandwidth 
reservation/partition scheduling method and 
admission control method that could reserve 
USB bandwidth for devices in an on-demand 
fashion. Besides, for soft QoS guarantee over 
RTAI-Linux, we also design and   evaluate 
our budget-based resource reservation method 
over RTAI- Linux on x86 architectures. In the 
second year, we proposed an optimal real-time 
task scheduling algorithm for multiprocessor 
environments with the allowance of task 
migration. When no task migration is allowed, 
a 1.412-approximation algorithm for task 
scheduling is proposed for different settings of 
power characteristics. 
關鍵詞： 
 Scheduling Anomaly, Real-Time Task 
Scheduling, Scheduler Stability, DVS 
scheduling, Energy-efficient scheduling. 
 
二、前言 
One of the key factors in the development of 
successful embedded-system products is how to 
reuse software and hardware IP's so that the 
time to the market is shortened, and the 
reconfigurability in product development could 
be maximized. The issues in software-IP reuse 
are very different from those for hardware-IP 
reuse, especially when many applications today 
must have good response time and reliability 
requirements. Such requirements in system 
implementations often imply the needs of 
software portability over platforms, not just 
from the functionality point of view but also in 
terms of the timing behaviors of the target 
software.  
The real-time resource allocation problem has 
been an active research topic in the past 
decades. However, little work addresses the 
scheduling anomaly problem for platform 
changing in real-time task scheduling. This 
research is motivated by the practical needs in 
embedded system implementations, when 
system platforms change, and the well-known 
multiprocessor anomaly [1, 2]. We show that 
new violations of the timing constraints of 
tasks might occur even when a more powerful 
processor or device is adopted. We propose the 
concept of scheduler stability and 
anomaly-prevention rules to avoid scheduling 
anomaly. We consider task executions that 
might be involved with task synchronization or 
I/O access. Finally, we explore policies in 
bounding the duration time of scheduling 
anomaly. 
With the advanced technology of VLSI circuit 
designs, many processors could now operate at 
different supply voltages, and that leads to 
different processor speeds or called frequencies. 
Dynamic voltage scaling (DVS) is one of the 
most popular directions in energy-efficient 
designs and has been widely adopted in many 
computing systems. There is always a trade-off 
between performance and energy consumption. 
While many existing researches focused on 
uniprocessor energy efficient scheduling, 
multiprocessor platforms or platforms with 
coprocessing elements have become more and 
more popular in the industry. For example, in 
system-on-a-chip (SoC) platforms, a partially 
reconfigurable device, such as a 
field-programmable gate array (FPGA), is 
widely used to provide system flexibility for 
reducing the workload on the processor, 
improving the system performance, and so on. 
of the processor. Similar to the previous 
discussions, 1τ  also completes later in a 
system with a more powerful processor 
although it has a higher priority. In addition to 
that, the delay on 1τ 's execution is more 
significant because of I/O access (even though 
parallelism is observed in this example). 
 
 
 
 
 
 
 
 
 
z Problem Definition 
Definition 2.1. Passive Resources: A resource 
is passive if the duration for the access of the 
resource requires the consumption of the 
processor power. 
Good examples of passive resources include 
semaphores, mutex locks, event objects, and 
database locks. Passive resources could be 
accessed without any locks or with exclusive or 
shared locks, depending on the characteristics 
of the resources and application logics. A 
resource is active if it is not passive. Good 
examples of active resources include disks, 
printers, network adaptors, and transceivers. A 
task might issue a request on an active resource 
and resumes its execution if the request is 
asynchronous and granted. If the request is 
synchronous, then the task is suspended until 
the request is fulfilled. In this research, we are 
interested in non-preemptible active resources, 
such as disks, with synchronous requests. Let 
an access request be serviced immediately on 
the corresponding active resource once it is 
granted and available. We do not consider I/O 
buffering or caching in this research. 
Given a set T of jobs of a n-task 
set },....,,{ 21 nτττ  between a given interval P, 
let Π  be a given real-time scheduler, and  
( )TS C∏=  be the schedule resulted from the 
scheduling of jobs in T by the schedulerΠ 
based on a given system configuration C. Note 
that jobs in T have their arrival times fixed for a 
given T. Let )( ,, kji
C J∏θ  denote the completion 
time of kjiJ ,,  under a scheduler Π based on 
a system configuration C. We say that a 
scheduler is stable if the following condition is 
satisfied: 
Definition 2.2. Stability: A real-time scheduler
Π  is stable if and only if 
)()(, ,,,,,,
'
kji
C
kji
C
kji JJ ∏∏ ≥∀ θθ  for any task set T 
and any two system configurations C and C’ 
when CC ≥' . 
z Scheduler Stability-Greediness Versus 
Stability 
Theorem 3.1. No greedy real-time scheduler is 
stable with the presences of non-preemptive 
resources.  
Proof. The correctness of this theorem can be 
proved by examples similar to those in Figures 
1 and 2: Consider the executions of two tasks 
1τ  and 2τ  with passive resource sharing on R 
(Please see Figure 1), where 2τ  has a lower 
priority but arrives earlier than 1τ  does. Let 
1τ  arrive before 2τ  locks R non-preemptively 
in a given system configuration C. Now 
suppose that 1τ  arrives after 2τ  attempts to 
lock R in another system configuration C’, 
where C’ > C. Since R is available, any greedy 
scheduler would grant the request of 2τ  on R. 
As a result, 1τ  would be blocked by 2τ  on its 
Anomaly Prevention-Active and Passive 
Resources 
Figure 5(a) shows the executions of tasks for a 
system configuration C, as shown in Figure 
2(a). Suppose that the performance of the 
active resource AR is improved such that 2,1τ  
completes earlier, and 3,1τ  preempts 1,2τ , as 
shown in 5(b). As a result, the completion time 
of 1,2τ  is delayed because the parallelism of 
task executions is reduced. 
 
 
 
 
 
 
 
 
The purpose of this section is to propose rules 
to bound the occurrence number of scheduling 
anomaly and, thus, the anomaly duration for a 
task. The main idea is to manage the number of 
priority inversions per task such that the 
occurrences of anomaly are under control. We 
shall first use the well-known Priority Ceiling 
Protocol (PCP) [4] and NCSP as examples to 
illustrate the priority inversion problem due to 
active-resource access. 
 
 
 
 
 
 
 
 
 
 
Consider the executions of three tasks Hτ , Mτ  
and Lτ being scheduled by NCSP revised with 
the AC rule (referred to as NCSP-AC), where 
Hτ is the highest-priority task, and Lτ is the 
lowest-priority task. As shown in Figure 6, 
AC[ iτ ] for each task iτ is set as 2 initially. Mτ  
arrives at time 0 and is granted a request on an 
active resource AR at time 1 because AC[ Hτ ] > 
0. When Hτ  that arrives at time 1 makes a 
request to AR at time 2, the request is blocked 
because AR is accessed non-preemptively now 
(or some critical section in accessing an active 
resource is active now). As a result, AC[ Hτ ] is 
decremented by 1. When Lτ arrives at time 2, it 
starts its execution because Hτ  is blocked on 
a pending request on AR, and Mτ  is waiting 
for the completion of the access on AR. The 
lock request by Lτ  on a passive resource R1 is 
granted at time 3 because no one is in a critical 
section accessing a passive resource yet (the 
separated consideration of active and passive 
resources), and AC[ Mτ ], AC[ Hτ ] > 0. At time 
4, Mτ  completes its access on AR, and the 
request of Hτ  on AR is granted. Mτ  could 
not resume at time 4 because Lτ  is executing 
in a critical section. AC[ Mτ ] is decremented by 
1 because of the blocking. When Lτ  unlocks 
R1 and leaves its critical section at time 5, Mτ  
resumes. Mτ  then enters a critical section by 
successfully locking R2 (where AC[ Hτ ] > 0) at 
time 6 and later blocks Hτ  a time 7 when ¿H 
completes its access on AR. AC[ Hτ ] becomes 0 
at time 7 and forbids Mτ  and Lτ  from locks 
any active or passive resource again until its 
completion. 
z Performance Evaluation 
In the experiments, the number of tasks per task 
system configurations. The Y-axis denotes the 
miss ratios. Figure 4(a) and 4(b) showed the 
miss ratios for different protocols when the 
CPU or the active resource was upgraded, 
respectively. 
四、一個 DVS系統配備一個非 DVS處理器
之省電即時系統排程 
z System models 
Task Models  
There is no precedence constraint among tasks. 
A periodic task τi is an infinite number of task 
instances (or jobs), in which a task is 
characterized by its initial arrival time ai and its 
period pi. The relative deadline of τi equals its 
period, so the arrival time and the absolute 
deadline of j-th job of τi are ai +(j −1) * pi and 
ai +j * pi, respectively. The workload is 
measured in worst-case execution cycles. The 
worst-case execution cycles of task τi on the 
DVS PE is ci, while the execution requirement 
on the non-DVS PE is ui. Let T be the set of n 
periodic real-time tasks. The hyper-period of T, 
denoted L, is defined so that L/pi is an integer 
for any task τi in T. For example, L is the least 
common multiple (LCM) of the periods of 
tasks in T when the periods of tasks are all 
integers. 
Processor Models 
The dynamic power consumption could be 
modeled as a convex function of the speed. For 
example, in CMOS DVS PEs [10], the dynamic 
power consumption Pswitch(s) due to gate 
switching at speed s is Pswitch(s) = ,2 sVC ddef  
(1) where s = 
dd
tdd
V
VV
k
2)( −
, and Cef , Vt, Vdd, 
and κ denote the effective switch capacitance, 
the threshold voltage, the supply voltage, and a 
hardware-design-specific constant, respectively 
(Vdd ≥ Vt ≥ 0, κ > 0, and Cef > 0). 
a) Execution Capability on the DVS PE: In this 
study, we consider two types of DVS PEs: (1) 
PEs with a continuous spectrum of available 
speeds between a speed upper bound Smax and a 
speed lower bound Smin, and (2) PEs with M 
discrete speeds, i.e., (S1, S2, . . . , SM), where S1 
< S2 < ・ ・ ・ < SM. For brevity, we also 
denote S1 by Smin and SM by Smax. Moreover, 
the former type of PEs is denoted by ideal DVS 
PEs, while the latter type is denoted by 
non-ideal DVS PEs. Any speed demand lower 
than Smin must be served at speed Smin. For 
brevity, let P1(s) = P1(Smin), if s ≤ Smin.  
b) Execution Behavior on the non-DVS PE: 
The non-DVS PE operates at a constant speed. 
If the energy consumption of the non-DVS PE 
depends on the workload it has, it is called 
workload-dependent PE; otherwise, it is called 
workload-independent PE. A PE would be 
workload-independent if there is no power 
management on the PE, such as a standby 
networking device or an FPGA that cannot be 
partially turned off. An active-on-demand 
networking device and an FPGA with the 
capability of partially turning off unconfigured 
frames are examples of workload-dependent 
non-DVS PE. 
 
z Problem Definitions and Hardness 
We explore energy-efficient task scheduling 
with timing constraints. Two objectives are 
considered: (1) the minimization of the energy 
consumption, and (2) the maximization of the 
energy saving, compared to the schedule which 
executes all of the tasks on the DVS PE. 
For brevity, we denote the minimization 
problem of energy consumption for systems 
with an ideal DVS PE and a 
 
 
Theorem 4: By applying Algorithm DP to 
derived task partition ( DT1  , 
DT2  ), the 
minimum energy consumption to execute all 
the tasks in DT1  in the hyper-period on the 
DVS PE and all the tasks in DT2  is at most 
1+7ε  times that of an optimal schedule for T 
in O( )11(2 ε+n ), in which 0 < ε  ≤ 1. 
Systems with Workload-Dependent 
Non-DVS PEs 
 
 
 
 
 
 
 
 
 
Theorem 5: Algorithm R-GREEDY derives an 
optimal solution for the NLP problem in 
Equation: 
Minimize 
)))1(()(( 21 ∑∑ −⋅⋅+ ∈∈ iiTTi
i
i
TT xuPxp
c
PL
ii
 
subject to 
Tx
xu
ii
iiTTi
∈∀≤≤
≤−⋅∑ ∈
τ,10
1)1(
 
 
Theorem 6: Algorithm S-GREEDY is a 
0.5-approximation algorithm for the SID 
problem. 
z Algorithms for systems with Non-Ideal 
DVS PEs 
For periodic real-time tasks on non-ideal DVS 
PEs, we can derive speed assignments based on 
[12, 13]. 
Systems with Workload-Independent 
Non-DVS PEs 
The approximation ratio of the proposed 
algorithm is no longer a constant. In fact, the 
approximation ratio is proportional to the 
maximum ratio of the power consumption of 
two consecutively available speeds. Let λ be 
maxk=2,3,...,M 
)(
)(
1−K
K
SP
SP
. After performing 
Algorithm EGREEDY and using the algorithm 
that combining two neighboring available 
speeds for each unavailable speed, as shown in 
[13, 14], the energy consumption ratio over the 
optimal schedule is no more than 8λ. The 
similar procedure applied for FPTAS leads to 
the (1+ε )3λ approximation ratio. 
Systems with Workload-Dependent 
Non-DVS PEs 
The basic idea is to apply the following 
procedures when considering task τ i in 
Algorithm R-GREEDY to guarantee both 
feasibility and optimality: (1) let Sk be the 
lowest available speed no lower than 
i
i
P
C
+U1 
and Sℓ be the highest available speed no higher 
than U1 when U1 > S1 (or Sℓ be S1 when U1 ≤ 
S1), (2) find the highest available speed *KS no 
slower than speed Sℓ and no faster than speed 
Sk−1 with P2ui + 
)(
)())((
**
**
1
111
KKi
KKi
SSP
SPSPc
−
−
+
+ > 0, in 
which executing any portion of task τi on the 
non-DVS PE consumes more energy than the 
reduced energy on the DVS PE when the DVS 
timing constraints of tasks might occur even 
when a more powerful processor or device is 
adopted. Anomaly-prevention rules are first 
proposed to avoid scheduling anomaly in 
handling passive resources, such as semaphores. 
We then extend the idea to the management of 
active and passive resources. Finally, we 
present a rule to bound the maximum 
occurrence number and duration time of 
scheduling anomaly for each task by a 
counting-table-based anomaly control rule. A 
series of experiments was conducted to 
evaluate the capability of the proposed 
protocols, for which we have very encouraging 
results.  
This research also develops algorithms for 
energy-efficient real-time task scheduling in 
systems equipped with a DVS-enabled 
processor and a non-DVS processing element 
with different energy consumption models. 
When the energy consumption of the non-DVS 
PE is independent upon the workload of the 
tasks assigned on it, an FPTAS is developed to 
minimize the energy consumption, which 
provides trade-offs of the energy consumption 
of the derived solution to the time/space 
complexity. A 0.5-approximation algorithm is 
developed to maximize the energy saving 
compared to the executions of tasks on a DVS 
processor, when the energy consumption of the 
non-DVS PE is proportional to the workload of 
tasks assigned on it. 
六、參考文獻  
[1] A. K. Mok. Tracking real-time systems 
requirements. Workshop on Modelling Software 
System Structures in a fastly moving scenario, 
June 2000. 
[2] R.Graham. Bounds on the performance of 
scheduling algorithm. Computer and Job Shop 
Scheduling Theory, E.G.Coffman, pages 
165-227, 1976. 
[3] A. K. Mok. Fundamental Design Problem 
of Distribyted System for Hard-Real Time 
Environment. PhD thesis, Dept. of Electrical 
Engineering and Computer Science, MIT. 
[4] L. Sha, R. Rajkumar, and J. Lehoczky. 
Priority inheritance protocols: An approach to 
real-time synchronization. IEEE Transactions 
on Computers, 39(9), September 1990. 
[5] N. I. Kamenoff and N. H. Weiderman. 
Hartstone distributed benchmark: Requirements 
and definitions. In IEEE Real-Time Systems 
Symposium, 1991. 
[6] N. Kim, M. Ryu, S. Hong, M. Saksena, C. 
Choi, and H. Shin. Visual assessment of a 
real-time system design: a case study on a cnc 
controller. In The 17th IEEE Real-Time 
Systems Symposium, 1996. 
[7] C. D. Locke, D. Vogel, and T. Mesler. 
Building a predictable avionics platform in ada: 
A case study. In The 12th IEEE Real-Time 
Systems Symposium, 1991. 
[8] J. J. Molini, S. K. Maimon, and P. H. 
Watson. Real-time system scenarios. In IEEE 
Real-Time Systems Symposium, 1990. 
[9] Y.-H. L. Tei-Wei Kuo, Li-Pin Chang and 
K.-J. Lin. Efficient on-line schedulability tests 
for real-time systems. IEEE Transaction on 
Software Engineering, 29(8), August 2003. 
[10] J. M. Rabaey, A. Chandrakasan, and B. 
Nikolic. Digital Integrated Circuits. Prentice 
Hall, 2nd edition, 2002. 
[11] H. Aydin, R. Melhem, D. Moss´e, and P. 
Mej´ıa-Alvarez. Dynamic and aggressive 
scheduling techniques for power-aware 
real-time systems. In Proceedings of the 22nd 
IEEE Real-Time Systems Symposium, pages 
Stankovic. Resource reclaiming in 
multiprocessor real-time systems. IEEE Trans 
Parallel and Dist Computing, 4(4):382-397, 
Apri 1993. 
[31] M. Spuri, G. Buttazzo, and Sensini. 
Scheduling aperiodic tasks in dynamic 
scheduling environment. In IEEE Real-Time 
Systems Symposium, 1995. 
[32] T. A. AlEnawy and H. Aydin. 
Energy-aware task allocation for rate 
monotonic scheduling. In Proceedings of the 
11th IEEE Real-time and Embedded 
Technology and Applications Symposium 
(RTAS’05), pages 213–223, 2005. 
[33] H. Aydin, R. Melhem, D. Moss´e, and P. 
Mej´ıa-Alvarez. Determining optimal processor 
speeds for periodic real-time tasks with 
different power characteristics. In Proceedings 
of IEEE EuroMicro Conference on Real-Time 
Systems, pages 225–232, 2001. 
[34] H. Aydin and Q. Yang. Energy-aware 
partitioning for multiprocessor real-time 
systems. In Proceedings of the 17th 
International Parallel and Distributed 
Processing Symposium (IPDPS), pages 113 – 
121, 2003. 
[35] N. Bansal, T. Kimbrel, and K. Pruhs. 
Dynamic speed scaling to manage energy and 
temperature. In Proceedings of the 2004 
Symposium on Foundations of Computer 
Science, pages 520–529, 2004. 
[36] J.-J. Chen, H.-R. Hsu, K.-H. Chuang, C.-L. 
Yang, A.-C. Pang, and T.-W. Kuo. 
Multiprocessor energy-efficient scheduling 
with task migration considerations. In 
Proceedings of EuroMicro Conference on 
Real-Time Systems (ECRTS’04), pages 
101–108, 2004. 
[37] J.-J. Chen, H.-R. Hsu, and T.-W. Kuo. 
Leakage-aware energy-efficient scheduling of 
real-time tasks in multiprocessor systems. In 
Proceedings of IEEE Real-time and Embedded 
Technology and Applications Symposium, 
pages 408–417, 2006. 
[38] J.-J. Chen and T.-W. Kuo. Multiprocessor 
energy-efficient scheduling for real-time tasks 
with different power characteristics. In 
Proceedings of International Conference on 
Parallel Processing (ICPP), pages 13–20, 
2005. 
[39] M. R. Garey and D. S. Johnson. 
Computers and intractability: A guide to the 
theory of NP-completeness. W. H. Freeman and 
Co., 1979. 
[40] G. Gens and E. Levner. Computational 
complexity of approximation algorithms for 
combinatorial problems, Lecture Notes in 
Computer Science. Springer, 1979. 
[41] F. Gruian and K. Kuchcinski. Lenes: Task 
scheduling for low energy systems using 
variable supply voltage processors. In 
Proceedings of Asia South Pacific Design 
Automation Conference, pages 449–455, 2001. 
[42] C.-M. Hung, J.-J. Chen, and T.-W. Kuo. 
Energy-efficient real-time task scheduling for a 
DVS system with a Non-DVS processing 
element. Technical Report 0603, Department of 
Computer Science and Information 
Engineering, National Taiwan University, 
2006. 
[43] J. Luo and N. Jha. Static and dynamic 
variable voltage scheduling algorithms for 
real-time heterogeneous distributed embedded 
systems. In Proceedings of the 15th 
International Conference on VLSI Design 
(VLSID’02), pages 719–726. IEEE, 2002. 
APPENDIX I  
 
一、摘要 
 
中文摘要： 
資源配置向來是即時系統中一個重要的
課題。除了以往所考慮的處理器排程，在先
進的計算環境中，輸出輸入子系統目前也提
供一些基本的排程機制。應用程式是否能夠
獲得預期的效能保證，取決於處理器以及輸
出輸入系統各方面是否能夠提供適當的支
援。本計畫針對即時作業環境 RTAI-Linux與
Universal Serial Bus 子系統作為一個整合性
的研究目標。Universal Serial Bus (USB)是相
當普及的個人電腦之週邊設備溝通協定標
準。雖然 USB規格中定義提供了等時傳輸模
式以及大量傳輸模式的支援，然而目前卻鮮
少研究討論關於保證每個設備在特定時間單
位內保證最低可使用之頻寬。我們提出一個
基於 cyclic-executive 的頻寬保留和排程方
法，對等時性的工作提供 QoS的保證。此外, 
在處理器排程方面，為了利用 RTAI-Linux達
到可容忍些許誤差的 QoS 保證, 本研究中我
們將 budget-based 資源保留的方法實作。綜
合上述處理器以及 USB 方面的資源配置方
法，其整體的有效性已於實作視訊監視系統
中獲得驗證。 
 
Abstract：  
Resource partition is an important issue in the 
design of real-time systems. In current 
computing system, many I/O devices now 
support scheduling policies. The QoS guarantee 
of applications must be provided for services 
over CPU and I/O devices. We realize the 
objective in QoS guarantees over RTAI-Linux 
and the USB subsystem. Universal Serial Bus 
(USB) is a popular standard for PC peripheral 
devices because of its versatile peripheral 
interconnection specifications. USB not only 
provides simplified hardware connectors but 
also supports for various bus traffics, such as 
isochronous and bulk transfer activities. 
Although the USB specifications provide a way 
for users to specify the upper bound on the 
number of bytes for each data transfer in a 1ms 
time frame, little work is done to provide QoS 
guarantees for devices (e.g., the lower bound 
on the bytes for each device type in a 1ms time 
frame) with resource reservation or resource 
partition techniques and a mechanism in 
enforcing the guarantees. In this research, we 
propose a cyclic-executive-based bandwidth 
reservation and scheduling method to support 
QoS guarantees over USB, especially for those 
isochronous bus activities. The proposed 
bandwidth reservation/partition, scheduling 
method and admission control method could 
reserve USB bandwidth for devices in an 
on-demand fashion. Besides, for soft QoS 
guarantee over RTAI-Linux, we also design and   
evaluate our budget-based resource reservation 
method over RTAI- Linux on x86 architectures. 
The capability of the proposed scheme was 
shown by the implementation and 
demonstration of the proposed resource 
reservation methods for CPU and USB.  
關鍵詞： 
 QoS, resource reservation, real-time 
scheduling, RTAI, USB 
 
