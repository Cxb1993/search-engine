2 
行政院國家科學委員會專題研究計畫成果報告 
混合分散式演算法於多目標彈性流線型生產排程問題解算效
果之研究 
Hybrid Archived Multi-Objective Scatter Search for the 
Multi-objective flexible flow shop scheduling problem 
計 畫 編 號：NSC97-2221-E-155-042 
執 行 期 限：97 年 08 月 01 日至 98 年 07 月 31 日 
主 持 人：徐旭昇 元智大學工業工程與管理系 
計畫參與人員：張煒嵩  陳芝傑 鍾愛蓮 元智大學工業工程與管理系 
一、中文摘要 
本研究探討多目標彈性流線型生產排程
問 題 (multi-objective flexible flow shop 
scheduling problem，MO-FSS)，並發展一個保
存式混合多目標分散式演算法(HAMOSS)來
求解此問題，並同時與多個著名演化式演算法
做比較與分析，其中包括: (1) 柏拉圖漸收斂
演化演算法 (PCGA) ，(2) 非支配排序基因演
算法 (NSGAII)，(3) 柏拉圖強度演化演算法 
(SPEAII) 等。本研究根據文獻方法自行產生
測試題，並以Proximity measures – generational 
distance (GD)、Purity 以及 Diversity measure – 
Spread 等指標為標準來分析與討論演算法之
表現效果。最後實驗結果顯示出混合多目標分
散式演算法(HAMOSS)在所有測試題中表現
最佳。 
關鍵詞：多目標彈性流線型排程問題、保存式
混合多目標分散式演算法、非支配解、演算法
效果量測。 
Abstract 
The research develops a hybrid archived 
multi-objective scatter search algorithm 
(HAMOSS) to solve multi-objective flexible 
flow shop problems (MO-FFS). The algorithm 
performance is compared with several 
well-known population-based algorithms such 
as Pareto Converging Genetic Algorithm 
(PCGA), Strength Pareto Evolutionary 
Algorithm (SPEAII) and Non-dominated 
Sorting Genetic Algorithm (NSGAII). A set of 
test instances in the comparative study were 
generated based on Lee and Pinedo in 1997. The 
performance metrics include Generational 
distance (GD) and Purity for measuring the 
proximity to the reference Pareto front, and 
Spread for measuring the diversity of the 
obtained solutions. Our experimental results 
indicate that the HAMOSS outperforms the 
other three algorithms in all performance 
metrics for each test instance. 
Keywords: Flexible flow shop problems, 
multi-objective optimization, hybrid 
archived multi-objective scatter 
search algorithm, evolutionary 
algorithms, meta-heuristics 
 
二、緣由與目的 
綜觀多年來學者對生產排程問題之研
究，大多只考慮單一衡量準則[1]，然而在現
實的生產環境中，可能的影響因素往往是多重
的，而目標也為多重且相互衝突的，基於此觀
點，排程問題通常是存在一個以上的多目標問
題，因此多目標排程問題在近年來受到更多的
討論與重視[2]。現今台灣的龍頭產業為高科
技產業，其生產型態大多屬於彈性流線式生產
排程[3] (flexible flow shop problem, FFS)，屬
於此生產類型的產業包括：半導體產業、光電
產業等。有鑑於此為使本研究成果能實際應用
4 
(1) 總製程包括 S 階段，s 代表階段編號， 
SS ,...,1= 。 
(2) 工件總數為 J，工件編號 Jj ,...,1= 。 
(3) 工件 j 所需製程階段集合為 jU ，為 },...,1{ S
之順序子集合，此表示工件並不一定須經
所有製程。 
(4) 製程階段 s 有 sM 台機台， ss Mm ...,1=  
jsmp 表示工件 j 在階段 s 使用機台 m 之加
工時間。 
(6) 每個工件有其交期 (due date)。 
(7) 兩目標(Cmax, Tmax ) 符號與定義如下： 
Cmax = jJj CMax 1= ，為總完工時間，其中 jC
為工件 j之完工時間。 
Tmax ∑ = −= Jj jj dCMax1 } ,0{ 為最大權延遲
時間， jd 為工件 j 的到期日(due date)。 
 
四、研究方法 
本研究使用多目標保存式混合分散式演
算法(HAMOSS)、 PCGA[20-21]、NSGAII[22]
以及 SPEAII[23]等演算法求解 MO-FFS，其中
HAMOSS 為本研究所發展之重點演算法。 
 
4.1 多目標保存式混合分散式演算法  
HAMOSS 發展概念為 scatter search 
algorithm[30]之延伸與改良，主要特點在於
HAMOSS 為求解多目標問題為主，且其演算
法個體之適應度函數值採用 SPEAII 之決定
方式；兩個參考解母體以及一個外在母體使用
於此演算法中，參考解母體其一為保存最佳解
之母體 tIR ，另一為保存最差解之母體 tSR ；
外在母體 tEA 個數維持方式與初始分散性母
體產生方式均採用 Fuzzy C-Mean 法則進
行；母體演化過程中，母體 Pt 成員由
),(),( 1111 −−−− ∪ tttt SRPCrossoverIRPCrossover 所
組成。HAMOSS 演算法包含了以下五個元素：  
(1) 多 樣 化 解 產 生 方 法 (diversification 
generation method, DGM)，目的在產生
一群多樣化之初始解，在此將隨機產生
sizeP⋅4 個體，接下來使用 Fuzzy C-Mean 
演算法[31]將其分成 sizeP 群，最後使用重
心法從 sizeP 群中挑選出 sizeP 個成員。  
(2) 改進方法(improvement method, IM)，可
用在 DGM 上或新產生解之改良上，在此
將針對個體Current 進行多點突變，而產
生 Neighbor ，在此有三種情況: 
a. Neighbor 凌駕(dominates) Current ，
則令 NeighborCurrent = 。 
b. Current 凌駕(dominates) Neighbor ，
則捨棄 Neighbor 。 
c. Current 與  Neighbor 互不可凌駕對
方，則將Current 加入外在母體 tEA 。
並令 NeighborCurrent = 。 
(3) 參 考 解 集 合 更 新 方 法 (reference set 
update method, RSUM)，目的在改善參
考解集合之品質與分散性。在此使用非支
配解等級之線性函數 (non-dominated 
solutions sorting)[22]，將演化母體 tP 分層
級，屬於第一級層級 1F 之非支配解
)(1 tPF ，則加入 tIR 參考解集合；屬於最
後級層級 finalF 之品質最差解 )( tfinal PF 則
加入 tIR 參考解集合。當 || tIR >預設數量N
時，則將此非支配解加入外在母體 tEA ，
當 NEAt >|| 或者 || tSR > N 則使用 Fuzzy 
C-Mean 將使 NEAt =|| 或者 NSRt =|| 。  
(4) 子 母 體 產 生 方 法 (subpopulation 
generation method, SGM)，決定如何從
參考解中選取部份解集合以及此子母體
之數量。子母體 tP 成員來自 tsize RP ⋅ 個
),( 11 −− tt SRPCrossover 所產生之子代與
)1( tsize RP −⋅ 個 ),( 11 −− tt IRPCrossover 所產
生之子代所組成，其中 tR 為競爭參數，
當 tR 越高，代表 tP 中品質較佳解所佔之
比率越高，反之，代表 tP 中品質較差解所
佔之比率越高。 tR 為動態參數，其在每
一世代中 tR 均會改變， tR 可以定義為公
式(1): 
 
ε+= −
−
)(
)(
11
11
t
t
t PF
IRFR  (1) 
，其中ε 值為收斂參數，ε 值越大，代表
tP 中品質較差解所佔之比率越高，則可以
避免演算法過快收斂。  
(5) 新 解 合 成 方 法 (solution combination 
method, SCM)，如何合成子母體中之解
6 
最後將該演算法在 10 次所求得的非支配解集
合整合為一個柏拉圖解，並以 GD、Purity 以
及 Spread 等三種量測指標衡量其效果表現。 
 
5.2 測試題產生方式 
本研究根據 Lee et al. [32]產生 MO-FFS 之
測試題。在測試題中，每一個階段之加工時間
以及交期時間分別獨立產生，但工件 j 之最後
交期時間為工件 j 在每個階段 s 之交期時間 
jsd 之總和， ∑ == Ss jsj dDue 1 。其產生步驟如下: 
(1) 先行定義測試題工件數量與加工階段 
(stages)，每一個加工階段之總機台數 sM ，為
]10,2[Uniform 產生之隨機亂數；(2) 定義工件
加工時間 jsmp ，其為 ]100,50[Uniform 產生之隨
機亂數，因此 100=p ；(3) 估算總完工時間
(the estimated makespan) μ⋅= pC maxˆ ，參數 μ
為工件總數除以機台總數 sM ；(4) 定義工件 j
在加工階段 s 之交期時間 jsd ， jsd 有τ 的機率
為 ],)1[( ddRUniform ⋅− 產生之隨機亂數，反之
有 τ−1 的機率為 ])ˆ(,[( max RdCddUniform ⋅−+
產生之隨機亂數，其中 τ 為交期寬鬆因子 
(tightness factor)且定義 )ˆ/(1 maxCd−=τ ，τ 越
大代表交期越緊固(tightness)， R 為交期範圍
因子 (Range factor)， maxminmax ˆ/)( CddR −= ，R
越大交期的散佈範圍越廣(wide)。本研究使用
)2.0,8.0(),( =Rτ 產生 4 種測試題其中包括 50 
(工件) x 3 (加工站)、50 x 7、 100 x 3、100 x 7
等類型。 
 
5.1 實驗數據 
從表 1-4 可以得知當加工階段增加，演算
法所找到的參考解越少，這意味著當加工階段
越多，其交期寬鬆因子τ 在每個加工階段有互
補的效應，使得交期變得較不緊固，因此問題
結構略變簡單，而使得可以找到最佳的非支配
解且凌駕其他的解。 
從表 1-2 可以得知本研究所發展之
HAMOSS 演算法在 GD、Purity 以及 Spread
等三種指標上均有最佳的表現，其次是
SPEAII；表 3-4 可看出，但當工件數增加， 
HAMOSS 演算法只在 GD 以及 Purity 指標上
表現最佳，其在 Spread 指標上表現並不理想。 
HAMOSS 演算法在 GD、Purity 表現較佳
可以歸納為以下因素： 
(1) DGM 之使用：本研究使用 Fuzzy C-Mean
演算法進行產生分散性較佳之初始解，使
HAMOSS 演算法可以擴充求解空間之廣度
(exploits)。 
(2) SGM 之使用: 本研究使用 tR 競爭動態參
數，使得 tIR 與 tSR 互相競爭其子代在演化
母體 1+tP 之比例(圖 3)，此舉可以擴大搜尋
空間，使得演算法可以跳脫區域最佳解以
及避免提早收斂之情況，從圖 4 可看出
HAMOSS 演算法 GD 值震盪幅度較大，且
並未提前收斂，其他演算法分別在演化世
代數 30、80 以及 240 既已收斂。 
 
表 1 各演算法於測試題 50_3 之效果表現 
Algorithm 
50_3 
Purity  GD Spread
PCGA 0%  0.53 1 
NSGAII 0%  0.05 0.94
SPEAII 0%  0.02 0.87
HAMOSS 100%  0 0.19
Total No. of Ref. Sol. 11 
 
表 2 各演算法於測試題 50_7 之效果表現 
Algorithm 
50_7 
Purity  GD Spread
PCGA 0%  0.517 1 
NSGAII 0%  0.254 0.99
SPEAII 0%  0.060 1 
AHMOSS 100%  0 0.32
Total No. of Ref. Sol. 9 
 
表 3 各演算法於測試題 100_3 之效果表現 
Algorithm 
100_3 
Purity  GD Spread
PCGA 0%  0.63 1 
NSGAII 0%  0.56 1 
SPEAII 0%  0.03 1 
AHMOSS 100%  0 0.97
Total No. of Ref. Sol. 21 
 
8 
constrains and time lags to minimize 
maximum lateness. International Journal 
of Production Economics, 64:101-111. 
[4] Brah, S.A. and J.L. Hunsucker (1991). 
Branch and bound algorithm for the flow 
shop with multiple processors, European 
Journal of Operational Research, 51: 
88–99. 
[5] Portmann, M.C., A. Vignier, D. Dardihac 
and D. Dezalay (1998). Branch and bound 
crossed with GA to solve hybrid flowshops. 
European Journal of Operational Research, 
107 (2):389–400. 
[6] Rajendran, C. and D. Chaudhuri (1992a). A 
multi-stage parallel-processor flow shop 
problem with minimum flow time. 
European Journal of Operational Research, 
57:111–122. 
[7] Rajendran, C. and D. Chaudhuri (1992b). 
Scheduling in n-job,m-stage flowshop with 
parallel processors to minimize makespan. 
International Journal of Production 
Economics, 27:137–143. 
[8] Liu, C.-Y. and S.-C. Chang (2000). 
Scheduling flexible flow shops with 
sequence-dependent setup effects. IEEE 
Transactions on Robotics and Automation, 
16 (4) : 408–419. 
[9] SAWIK, T. (2000). Mixed integer 
programming for scheduling flexible flow 
lines with limited intermediate buffers. 
Mathematical and Computer Modeling, 31 
(13):39–52. 
[10] SAWIK, T. (2002). An exact approach for 
batch scheduling in flexible flow lines with 
limited intermediate buffers. Mathematical 
and Computer Modeling, 36 (4–5):46–471. 
[11] Gupta, J.N.D. and E.A. Tunc (1991). 
Schedules for a two-stage hybrid flowshop 
with parallel machines at the second stage. 
International Journal of Production 
Research, 29 (7) : 1489–1502. 
[12] Gupta, J.N.D., A.M.A.Hariri and C.N. 
Potts (1997). Scheduling a two-stage 
hybrid flow shop with parallel machines at 
the first stage. Annals of Operations 
Research, 69 : 171–191. 
[13] Gupta, J.N.D. and E.A. Tunc (1994). 
Scheduling a two-stage hybrid flowshop 
with separable setup and removal times. 
European Journal of Operational Research, 
77 :  415–428. 
[14] Gupta, J.N.D., k. Kru‥ ger, V. Lauff, F. 
Werner and Y.N. Sotskov 
(2002).Heuristics for hybrid flow shops 
with controllable processing times and 
assignable due dates, Computers and 
Operations Research, 29 (10), 1417–1439. 
[15] Lee, I., Sikora R. and Shaw, M.J. (1997). A 
genetic algorithm based approach to 
flexible flow-line scheduling with variable 
lot sizes. IEEE Transactions on Systems, 
Man and Cybernetics, 27(1):36–54. 
[16] Wang, L. and D., Li (2002). A scheduling 
algorithm for flexible flow shop problem. 
Proceedings of the 4th World Congress on 
Intelligent Control and Automation, New 
York: IEEE, 4: 3106–3108. 
[17] Nowicki, E. and Smutnicki, C. (1998). The 
flow shop with parallel machines: a tabu 
search approach. European Journal of 
Operational Research, 106 (2–3): 226–253. 
[18] Ogbu, F.A. and D.K. Smith, (1990). 
Application of the simulated annealing 
algorithm to the solution of the n/m/C 
flowshop problem. Computers and 
Operations Research, 17 (3):243-253 
[19] Marimuthu, S., Ponnambalam, S.G.   and 
Jawahar  N., (2008). Evolutionary 
10 
附件-出席國際學術會議心得報告 
出席國際學術會議心得報告 
                                                             
計畫編號 NSC 97-2221-E-155 -042 
計畫名稱 混合分散式演算法於多目標彈性流線型生產排程問題解算效果之研究 
出國人員姓名 
服務機關及職稱 徐旭昇、元智大學工管系副教授 
會議時間地點 Oct.31 – Nov. 2, 2008, Bei-Hang University, Beijing, Chain 
會議名稱 International Conference on Computers and Industrial Engineering 
發表論文題目 A Multi-Criteria Decision Making for the Unrelated Parallel Machines Scheduling Problem 
 
一、參加會議經過 
第一天註冊，督導參與大會兩位博士生之會議論文報告內容與方式。第二天上午參加開幕典
禮、大會演講，下午參與兩個 session，“Human Factors, Industrial Ergonomics and Safety”之 Part 
1 以及“Applied Operations Research”之 Part II，晚上則出席大會 Banquet。與一些學者交談，
交換心得。參加會議報告之兩位博士學生皆有出席學者問論文相關問題。 
 
二、與會心得 
會場很好，多認識一些學者與他們交談研究是項收穫。 
 
 
 
 
 
 
 
 
12 
different times or for different considerations. Some 
machines may spend much more time on a particular 
job than others because of their age or design. 
Consequently, the layout of unrelated parallel 
machines is more common than identical parallel 
machines in real manufacturing environments. The 
unrelated parallel machine scheduling problem 
(UPMSP) is more difficult than the identical case. 
Since the latter belongs to NP hard (Karp 1972), the 
UPMSP is also NP hard. For further knowledge and 
recent findings regarding the UPMSP, we refer to 
Pfund et al. (2004) and Logendran et al. (2007). 
The problem solving approach to the UPMSP can be 
classified into two categories: metaheuristics and 
exact solution method. In metaheuristics, Hariri and 
Potts (1991) proposed a two-phase method to solve 
the UPMSP with the objective of minimizing 
makespan (Cmax), where the first phase applies an 
integer programming technique and the second uses 
the earliest completion time rule to complete the 
final schedule of the UPMSP. Weng et al. (2001) 
proposed seven heuristics for the UPMSP with job 
sequence dependent setup times and the objective of 
minimizing the weighted mean flow time. Two 
priority rules, shortest processing time (SPT) and the 
minimum sum of setup time and processing time, are 
respectively employed in the heuristics. The 
numerical results indicated that their algorithms are 
capable of finding quality solutions to problems 
involving 120 jobs with 20 machines in short 
computational times. Bank and Werner (2001) 
developed a constructive and iterative algorithm to 
solve the UPMSP with time window constraints on 
the job release dates and with the objective of 
minimizing the total weighted lateness. 
Glass et al. (1994) developed a genetic algorithm 
(GA), simulated annealing (SA), and tabu search (TS) 
to solve the UPMSP without the sequence dependent 
setup time constraints. Their experiments conclude 
that GA performs no better than the other two 
algorithms. Sirvastava (1997 proposed a TS 
algorithm that could find high quality solutions in a 
short time for a part of the same instances. 
Kim et al. (2002, 2003) proposed an SA to solve the 
UPMSP with a goal of total tardiness minimization, 
while taking into consideration job 
sequence-dependent set up times. Logendran et al. 
(2004, 2007) developed a TS for the same problem 
with additional considerations of dynamic release 
dates and time window machine availability, where 
the objective was to minimize the sum of weighted 
tardiness jobs. Chen (2006) presented a 
record-to-record algorithm with tabu list to solve the 
UPMSP with the goal of minimizing the maximum 
tardiness. This paper also presented a threshold 
accepting algorithm with tabu list to solve the 
UPMSP to minimize the total tardiness. 
The branch and bound (B&B) methods are 
commonly used to optimally solve the UPMSP in the 
literature. Some examples are Martello et al. (1997), 
Lancia (2000), Yu et al. (2002), Liaw et al. (2003), 
and Rocha et al. (2008). 
Most research on the UPMSP has been focused on a 
single objective only and there have been 
comparatively fewer studies on the multi-objective 
UPMSP. Suresh et al. (1994) developed a TS for 
UPMSP with two objectives: minimizing the 
maximum makespan (Cmax) and the maximum 
tardiness. The tabu list keeps the record of newly 
found non-dominated solutions. Jansen et al. (1999) 
modified the TS by Suresh et al. and solve the 
UPMSP with the objectives of minimizing Cmax and 
cost of scheduling. In this paper, a simulated 
annealing that interacts with the commercial 
software package CPLEX is developed for solving 
the UPMSP with three objectives – minimizing Cmax, 
total flow time, and total number of tardy jobs. Since 
only one schedule will be implemented in a real 
14 
max
1 1 1 1
  ( ,  ,  )
M N M N
ij ij
i j i j
Minimize C C U
= = = =
∑∑ ∑∑  (1) 
max max. .        
is t C C i≥ ∀  (2) 
max      ,
i
ijC C i j≥ ∀  (3) 
max
1
    
N
i
ij ij
j
C p y i
=
= ⋅ ∀∑
 (4) 
0;  C    ,ij ij ij jT T d i j≥ ≥ − ∀  (5) 
    ,ij big ijT M U i j≤ ⋅ ∀  (6) 
(1 )    , ,ik ik big ijk ijC p M x C i j k− + ⋅ − ≥ ∀  (7) 
1,
   ,
N
ijk ij
k k j
x y i j
= ≠
= ∀∑
 (8) 
0  ,ijC i j≥ ∀ ,  
, 0,1  , ;ij ijy U i j= ∀  0,1   , ,ijkx i j k= ∀  (9) 
where Mbig is a big number. 
In the model, equation (1) presents the three 
objective functions of the UPMSP; inequality set (2) 
shows the first objective is to maximize the 
makespan of all machines; constraint set (3) specifies 
the makespan of each machine; constraint set (4) 
defines the makespan of each machine; constraint set 
(5) defines the tardiness of each job; constraint sets 
(5) and (6) together define the number of tardy jobs; 
constraint set (7) specifies the starting time 
relationships between jobs under a certain processing 
sequence in the same group. Equation set (8) ensures 
that each individual job will be processed by only 
one machine. 
2.2.2 Multi-criteria decision making 
Given a set of non-dominated schedules (or 
alternatives) to the problem under study, we seek to 
select the most preferable one. Various approaches 
can be applied to solve this decision problem. Some 
well known methods are as follows: (1) construct a 
multi-attribute utility function (Clemen and Reilly, 
2001) which is defined on the objective space, and 
then take the alternative with the maximum utility 
value; (2) assign priorities to objectives and take the 
alternative with the best Lexicographic order; (3) 
select the alternative that has the maximum AP 
efficiency ratio in data development analysis 
(Andersen and Peterson, 1993) or that has the 
maximum score using principle component analysis 
(Slottje et al. 1991). 
In the case that there are too many non-dominated 
solutions, a simple three-stage method will be 
adopted: (1) select a reasonable number of 
diversified solutions; (2) decide what the inputs and 
the outputs should be; (3) compute the AP efficiency 
ratio and choose the one which ranks first. 
3. Problem Solving Method 
In this paper, we developed a problem solving 
method that uses the simulated annealing (SA) 
algorithm as the main framework and employs the 
CPLEX optimizer to solve the multi-objective 
scheduling problem with an assigned weight vector. 
The acceptance probability takes into account the 
upgrading or downgrading of each individual 
objective function at each step of generating a 
neighborhood solution, and is defined as the product 
of each individual acceptance probability with 
respect to the change of each objective at each step. 
In order to produce an acceptable number of 
non-dominated schedules, we adopt the following 
strategy: (1) predetermine a set of weight vectors for 
the three-objective scheduling problem; (2) solve 
optimally or near optimally the multi-objective 
scheduling problem with the target of minimizing the 
weighted sum of the objectives for each weight 
16 
K}, where each kλ  corresponds to the kth 
weight vector of the three objectives. Choose a 
set of priority rules, Pr = {prl: l = 1, …, L}, 
which will subsequently be used to create the 
initial solutions. Set the number of temperature 
levels = NTL, and the number of maximum 
iterations at each temperature level = ITN. k = 1; 
l = 1, ntl = 1, T = T1, itn = 1. 
2. Apply priority rule prl to generate an initial 
partitioned set of jobs, {Gn: n = 1,…, M}; 
Compute ),,( 321
kkkn
mf λλλ ; employ the 
Hungarian algorithm to solve the group jobs – 
machines assignment problem; evaluate all 
objective functions and put them into a Pareto set 
of solutions. Let x = current solution with Z(x) = 
(z1(x), z2(x), z3(x)) be the corresponding objective 
values. 
3. Give a random perturbation and generated a new 
partitioned set of jobs. { 'nG : n = 1,…, M}; 
Compute ),,( 321
kkkn
mf λλλ ; employ Hungarian 
algorithm to solve the group jobs – machines 
assignment problem and obtain a new solution y; 
evaluate all objective values: Z(y) = (z1(y), z2(y), 
z3(y)). 
4. Compare y with all solutions in the Pareto set and 
update the Pareto set, if necessary. 
5. If y is archived, make it the current solution by 
putting x = y and move on to step 7; otherwise 
compute )()( xzyzz rrr −=Δ , r = 1, 2, 3. 
Assign acceptance probability to each of 
objective functions as follows: 
      pr = 1  if 0≤Δ rz ; pr = (exp(- )/ TzrΔ )
k
rλ   
if 0>Δ rz , r = 1, 2, 3; 
      Acceptance probability = 321 ppp ⋅⋅  
6. If y is accepted, then set x = y; 
7. itn = itn + 1; if (itn > ITN), set ntl = ntl + 1; 
α⋅= −1ntlntl TT . 
8. If (ntl > NTL), terminate and output the best 
solution; otherwise, go to step 2. 
3.4. Choosing the best alternative 
In this paper, we will choose the AP efficiency ratio 
for making the best choice among many competitive 
alternatives. In the three objectives, a small Cmax 
usually implies a high utilization of machine(s), i.e., 
how much time is taken to complete the production. 
Furthermore, the sum of the completion times of n 
jobs gives an indication of the total holding or 
inventory costs incurred by the schedule (Pinedo, 
1995). These two objectives will be regarded as the 
inputs when computing the AP ratio. On the other 
hand, the number of tardy jobs represents the 
number of unsatisfied customers. This value will 
instead be taken as an output. Since a small number 
of tardy jobs implies a better performance, we use a 
total number of jobs minus the number of tardy jobs 
in a schedule as the performance measure to indicate 
the level of customers’ satisfaction of that schedule. 
4. NUMERICAL RESULTS 
In this section, the computational characteristics and 
effectiveness of the proposed interactive SA 
algorithm are evaluated via a practice example, 
which arises in the glass etch polishing during the 
Cell manufacturing stage of the TFT-LCD 
production process. The glass etch polishing 
operation is independent of the other manufacturing 
processes, and is required only for some types of 
TFT-LCD products. 
In the example, a collection of real life data for four 
different machines and 21 different products was 
made. The data contains the information of the 
processing time of each job (a batch of the same 
products) on each individual machine. Our 
observation indicates that the setup time of a job is 
approximately the same in each machine, regardless 
of whichever its preceding job is. But the setup time 
may be different in different machines. Therefore, it 
is assumed that the setup time of a job is only 
18 
0.2, 0.6, 0.2 400 2330.29 3 197.5
0.3, 0.1, 0.6 475 2099.12 1 201.0
* 0.3, 0.2,0.5 360 1774.87 2 203.4
0.3, 0.3, 0.4 536 2103.48 1 210.9
0.3, 0.4, 0.3 389 2241.87 3 196.9
0.3, 0.5, 0.2 769 2890.04 1 194.0
0.4, 0.1, 0.5 381 1924.4 1 199.8
0.4, 0.2, 0.4 382 1910.4 2 197.0
0.4, 0.3, 0.3 479 2138.9 1 202.5
* 0.4, 0.4,0.2 527 2019.48 0 200.1
* 0.5, 0.1,0.4 255 1770.4 3 199.8
0.5, 0.2, 0.3 367 2083.79 2 195.6
0.5, 0.3, 0.2 450 2275.62 1 202.3
0.6, 0.1 ,0.3 389 1879.73 2 206.7
0.6, 0.2, 0.2 663 2471.01 1 197.8
 
 
Table 2 Non-dominant solutions found in all 
trials 
λ1  λ2  λ3 Cmax Total flow time No. tardy 
jobs 
0.4, 0.4, 
0.2 527 2019.48 0 
0.3, 0.1, 
0.6 304 1794.73 1 
0.2, 0.3, 
0.5 241 1748.51 2 
0.4, 0.4, 
0.2 245 1746.51 2 
 
 
Table 3 Ranks of the four alternatives based on 
the AP ratio 
Alternatives Input 1 Input 2 Output CCR AP ratio
1 527 2019.48 1.000 0.933 0.933 
2 304 1794.73 0.952 1.000 1.024 
3 241 1748.51 0.905 1.000 1.017 
4 245 1746.51 0.905 0.999 0.999 
 
5. CONCLUSIONS 
In this paper, we proposed an interactive simulated 
annealing algorithm aimed at searching for a set of 
near Pareto optimal solutions to the unrelated 
parallel machine scheduling problem with three 
objectives: minimizing total completion time, total 
flow time, and total number of tardy jobs. A 
commercial optimization software package IILOG 
CPLEX is served as a function in the SA algorithm, 
with the mission of solving optimally the 
subproblem - weighted sum objective single machine 
scheduling problems. To produce an acceptable 
number of high quality non-dominated solutions, a 
unique best schedule is found with respect to each 
weight vector. The ranking procedure proposed by 
Andersen and Petersen is then applied to select the 
most preferable schedule, using total completion 
time and total flow time as the inputs, and total 
number of tardy jobs as the output. 
Further research would include the cost of schedules 
as one of the inputs in the decision-making process 
as to select the best schedule. In addition, for 
problems of large size, hybrid evolutionary 
algorithms will be more favorable than the current 
method, in which the CPLEX optimizer occupies a 
large percentage of computational time. When 
solving large size problems, the number of 
non-dominated solutions would be very large. An 
interesting research direction may be focused on 
developing a good method for making the best 
selection among the huge number of near 
Pareto-optimal solutions. 
ACKNOWLEDGMENTS 
This research was partially supported by National 
Science Council in Taiwan under the grant NSC 
95-2221-E-155-045 
REFERENCES 
20 
30, pp. 1777–89. 
Logendran R, Subur F., (2004), “Unrelated 
parallel machine scheduling with job 
splitting”, IIE Transactions, Vol. 36, No. 4, 
pp. 359–72. 
Logendran, R., McDonell, B., Smucker, B., 
(2007), “Scheduling unrelated parallel 
machines with sequence-dependent setups”, 
“Computers and Operations Research”, Vol. 
34, No. 11, pp. 3420-3438. 
Martello, S., Soumis, F. and Toth, P., (1997), 
“Exact and approximation algorithms for 
makespan minimization on unrelated 
parallel machines”, Discrete Applied 
Mathematics, Vol. 75, pp. 169–188.  
Pfund, M., Fowler, J.W. and Gupta, J.N.D., 
(2004), “A survey of algorithms for single 
and multi-objective unrelated 
parallel-machine deterministic scheduling 
problems”, Journal of the Chinese Institute 
of Industrial Engineers Vol. 21, No. 3, pp. 
230-241 
Pinedo, M., (1995), “Scheduling Theory”, 
Algorithms and Systems, pp. 10, 
Prentice-Hall, Inc., A Simon & Schuster 
Company Englewood Cliffs, New Jersey.  
Richard M. Karp, (1972), "Reducibility Among 
Combinatorial Problems", in R. E. Miller 
and J. W. Thatcher (editors): Complexity of 
Computer Computations, 85–103, Plenum, 
New York. 
Rocha, P.L., Ravetti, M.G., Mateus, G.R., 
Pardalos, P.M., (2008), “Exact algorithms 
for a scheduling problem with unrelated 
parallel machines and sequence and 
machine-dependent setup times” , 
Computers and Operations Research, Vol. 
35, No. 4, pp. 1250-1264. 
Rutenbar, R.B., (1989), “Simulated annealing 
algorithms: An overview”, IEEE Circuits 
and Devices Magazine (January), pp. 19–
26. 
Slottje, D., Scully, G.W., Hirschberg, J.G., Hayes, 
K.J., (1991), “Measuring the quality of life 
across countries: A multidimensional 
analysis” , Westview Press, Boulder, CO. 
Srivastava, B., (1997), “An effective heuristic 
for minimizing makespan on unrelated 
parallel machines”, Journal of the 
Operational Research Society, Vol. 49, pp. 
886–894. 
Suresh, V and D. Chaudhuri, (1996), “Bicriteria 
scheduling problem for unrelated 
parallel-machines”, Computers and 
Industrial Engineering, Vol. 30, pp. 77-82.  
Suman, B., Kumar, P., (2006), “A survey of 
simulated annealing as a tool for single and 
multiobjective optimization”, Journal of the 
Operational Research Society, Vol. 57, No. 
10, pp. 1143-1160. 
Weng, M., Lu, J. and Ren, H., (2001), 
“Unrelated parallel machine scheduling 
with setup consideration and a total 
weighted completion time objective”. 
International Journal of Production 
Economics, Vol. 70, pp. 215–226. 
Yu, L., Shih, H.M., Pfund, M., Carlyle, W.M., 
Fowler, J.W., (2004), “Scheduling of 
unrelated parallel machines- An application 
to PWB manufacturing”, IIE Transactions, 
Vol. 34, No. 11, pp. 921-931. 
 
A MULTI-CRITERIA DECISION MAKING FOR THE UNRELATED PARALLEL 
MACHINES SCHEDULING PROBLEM 
Wei-Shung Chang 
Department of Industrial Engineering and Management 
Yuan-Ze University 
Taiwan, China 
s948905@mail.yzu.edu.tw 
 
Chiuh-Cheng Chyu 
Department of Industrial Engineering and Management 
Yuan-Ze University 
Taiwan, China 
iehshsu@saturn.yzu.edu.tw 
 
ABSTRACT 
In this paper, we propose a multi-criteria 
machine-schedules decision making method that can 
be applied to a production environment involving 
several unrelated parallel machines and we will 
focus on three objectives: minimizing make-span, 
total flow time, and total number of tardy jobs. The 
decision making method consists of three phases. In 
the first phase, a mathematical model of a single 
machine scheduling problem, of which the objective 
is a weighted sum of the three objectives, is 
constructed. Such a model will be repeatedly solved 
by the CPLEX in the proposed multi-objective 
simulated annealing (MOSA) algorithm. In the 
second phase, the MOSA that integrates job 
clustering method, job group scheduling method, and 
job group – machine assignment method, is 
employed to obtain a set of non-dominated group 
schedules. During this phase, CPLEX software and 
the bipartite weighted matching algorithm are used 
repeatedly as parts of the MOSA algorithm. In the 
final phase, the technique of data envelopment 
analysis is applied to determine the most preferable 
schedule. A practical example is then presented in 
order to demonstrate the applicability of the 
proposed decision making method. 
KEYWORDS 
Multi-objective optimization, unrelated parallel 
machines scheduling, simulated annealing algorithm, 
integer programming models, multi-criteria decision 
making 
1. INTRODUCTION 
Parallel machine scheduling problems have been 
extensively studied in the literature and widely used 
in many manufacturing environments, such as the 
drilling operation in a PWB line (Yu et al. 2002) and 
glass etch polishing process in the TFT-LCD 
manufacture. In many real-life situations, the 
machines used are often not identical in performance. 
They are different because they were purchased at 
different times or for different considerations. Some 
machines may spend much more time on a particular 
job than others because of their age or design. 
Consequently, the layout of unrelated parallel 
machines is more common than identical parallel 
machines in real manufacturing environments. The 
solutions to these problems with a substantial 
reduction in computational time. SA was first 
introduced by Kirkpatrick et al. (1983). We refer to 
Collins et al. (1988), Rutenbar (1989) and Eglese 
(1990) for surveys on single objective SA, and 
Suman and Kumar (2006) for surveys on 
multi-objective SA. 
The remainder of this paper is structured as follows. 
Section 2 describes the problem under study. Section 
3 presents the proposed solution approach. Section 4 
presents the numerical results from the proposed 
method used to solve a problem with real life data. 
Finally, Section 5 concludes the paper with 
implications for future research. 
2. PROBLEM DESCRIPTION 
The aim of this study is to develop a systematic 
solution method for determining the most preferred 
schedule among a non-dominated set of schedules 
found by the proposed hybrid simulated annealing 
algorithm. In this section, first of all, notations used 
in this paper are introduced; secondly, the studied 
problem is described, including a multi-objective 
mathematical model. 
2.1. Notations 
Symbols: 
i:  machine index, i = 1,…, M 
j:  job index, j = 1,…, N 
M:  total number of machines used 
N: total number of jobs to be processed 
pij: processing time of job j performed by 
machine i  
sij: set up time for job j on machine i 
dj: due date of job j 
Gk: set of jobs in group k, k = 1,…, M 
Decision variables: 
Cmax: maximum makespan (completion time) 
among all machines 
max: 
iC  makespan of machine i 
Cij: completion time of job j on machine i 
Tij: tardiness of job j on machine i, Tij = 
max{0，Cij – dj} 
Uij:     Ni: tardiness state of job j if it is processed 
onmachine i: value is 1 if tardy;otherwise 
value is 0 number of tardy jobs for machine i 
yij: value is 1 if job j is assigned to machine i; 
value is 0 otherwise 
xijk:      value is 1 if both jobs j and k are assigned 
to machine i and job i immediately precedes 
job j; value is 0 otherwise 
2.2. Problem definition 
We consider the following manufacturing 
environment: there are M different machines in 
parallel with a total number of N jobs to be 
processed, and a job refers to a customer’s order. 
The problem under study assumes that each job may 
have different processing times depending on the 
assigned machine, each machine will process one job 
at a time, and the processing is non-preemptive. The 
setup time of each job is assumed to be machine 
dependent but not job sequence dependent; thus, the 
setup time is included in the processing time. The 
scheduling problem considered in this study aims to 
minimize three objectives simultaneously: Cmax, total 
flow time, and total number of tardy jobs. 
2.2.1 Mathematical formulation 
 
max
1 1 1 1
 ( ,  ,  )
M N M N
ij ij
i j i j
Minimize C C U
= = = =
∑∑ ∑∑  (1) 
max max. .        
is t C C i≥ ∀  (2) 
max     ,
i
ijC C i j≥ ∀  (3) 
schedule of UPMSP. A sublist i corresponds to the 
set of jobs assigned to Machine i. To generate an 
initial job list, all jobs are first sorted first based on a 
priority rule, and then placed one by one into each 
sublist according to the order of the list. In doing so, 
a set of job groups is formed, with the number of 
groups equal to the number of machines. Given a job 
list, a neighborhood solution will be generated by 
performing a 3-opt operation on the list. 
3.1. Single machine scheduling problem 
with a weighted sum of objectives 
This section presents the mathematical model of the 
weighted sum objectives of the single machine 
scheduling problem, which will then be solved by 
the CPLEX solver during the interactive SA 
algorithm. Given a weight vector, (λ1, λ2, λ3) with λ1 
+ λ2 +λ3 = 1, λ1, λ2, λ3 ≥ 0, and group Gi is assigned 
to machine i. 
Min   λ1 × f1 + λ2 × f2+ λ3 × f3    
s.t. (3), (4), (5), (6), (7) 
, ,
1
i
ijk
j k G j k
x
∈ ≠
=∑  ik G∈  (10) 
0    ij iC j G≥ ∈  0,1ijkx =  (11) 
where 
1 max min max min( ) /( ),
i i i if C g g g= − −
2 min max min ( ) /( )
i
i i i
j
j G
f C h h h
∈
= − −∑
3 min max min( ) /( )
i
i i i
ij
j G
f U u u u
∈
= − −∑ ,  
and  ( min
ig , min
ih , min
iu ) and ( max
ig , imaxh , max
iu ) are the 
ideal solution and anti-ideal solution to the 
three-objective single machine scheduling problem, 
respectively. 
3.2. Assignment problems between job 
groups and machines 
Given an assigned weight vector (λ1, λ2, λ3) and a set 
of job groups {Gk, k = 1,…, M}, a total of M × M 
single machine scheduling solutions can be created, 
each of which corresponds to a group of jobs being 
processed by a machine. The problem in this step is a 
weighted bipartite assignment problem and will be 
solved by the Hungarian method. Let 
),,( 321 λλλnmf be the objective value of the optimal 
solution to the single machine scheduling problem of 
assigning group m to machine n with a weight vector 
(λ1, λ2, λ3), m, n = 1,…, M. The mathematical model 
is shown as follows: 
 
1 2 3
1 1
  ( , , )
M M
n
m mn
m n
Min f yλ λ λ
= =
⋅∑∑   
s.t.       
1
1
M
mn
n
y
=
=∑                 m = 1，…，M
 (12) 
 
1
1
M
mn
m
y
=
=∑                 n = 1，…，M
 (13) 
  0mny ≥                  m， n = 1，…，
M  
3.3.  MOSA algorithm 
The following presents the MOSA algorithm: 
1. Select a wide diversified set Δ  = { kλ : k = 1,…, 
K}, where each kλ  corresponds to the kth 
weight vector of the three objectives. Choose a 
set of priority rules, Pr = {prl: l = 1, …, L}, 
which will subsequently be used to create the 
initial solutions. Set the number of temperature 
Visual Studio C++. NET and executed on a computer 
with Intel core dual, 1.8GHz and 2 GB DDR566, and 
used the CPLEX 10.0 optimizer to solve the 
weighted sum objective single machine scheduling 
problem. The parameters setting of the SA is as 
follows: NTL = 20, ITN = 5, T1 = 100, and α = 0.95. 
Three priority rules are chosen to construct the initial 
solutions. They are early due date (EDD), shortest 
process time (SPT), and critical ratio (CR), where 
CR is defined as the ratio of the due date over the 
average processing time. Table 1 displays the best 
solutions found with respect to each weight vector 
and the EDD initial solution. In order to find a 
limited number of high quality non-dominated 
solutions, for each weight vector, the SA will output 
the solution with the minimum weighted objective 
value. 
As observed from Table 1, only four local 
non-dominated solutions were found with the EDD 
initial solution. However, there are totally only four 
global non-dominated solutions found by the SA, as 
presented in Table 2. The first one was produced 
with the EDD initial solution, the second with the 
SPT, and the rest two with the CR. Three local 
non-dominated solutions in Table 1 were removed 
when compared with the second and third solutions 
in Table 2. 
To select the most preferable schedule among these 
four alternatives, the ranking procedure proposed by 
Andersen and Petersen (1993) is applied. When 
applying the procedure, the values of Cmax and total 
flow time are treated as inputs. The value of Cmax can 
be viewed as the total time of the equipments used in 
the production, and the flow time gives an indication 
of the total holding or inventory costs incurred in the 
production. The number of tardy jobs occurs in a 
schedule will be viewed as the output, since it 
represents the number of customers who will not be 
satisfied with the purchase service. The following 
scoring method for this output is adopted: 
(total no. of jobs – total no. of tardy jobs) / (total no. 
of jobs)
Table 3 presents the ranks of the four non-dominated 
schedules. Both the second and the third schedules 
have a CCR ratio (Charnes et al. 1978) of one, which 
implies both are effective. However, a further 
comparison based on the AP ratio indicates the 
second schedule should be the most preferable. The 
proposed decision-making model is more proper if it 
includes the consideration of the cost of schedules. 
In unrelated parallel machine scheduling problems, a 
job may take different processing times on different 
machines, and thus its processing cost may also be 
different when processed by different machines. 
 
Table 1 Best solutions for various weight vector with 
EDD initial solution 
λ1  λ2  λ3 Cmax
Total flow 
time 
No. 
tardy 
jobs
CPU 
(sec.)
0.1, 0.1, 0.8 439 2105.9 2 201.5
* 0.1, 0.2,0.7 344 1831.48 1 196.9
0.1, 0.3, 0.6 556 2276.01 2 200.2
0.1, 0.4, 0.5 367 1888.4 3 187 
0.1, 0.5, 0.4 372 1772.98 3 198.1
0.1, 0.6, 0.3 588 2542.73 1 197.5
0.1, 0.7, 0.2 450 1970.37 1 190.7
0.2, 0.1, 0.7 596 2189.48 0 205.4
0.2, 0.2, 0.6 598 2267.12 2 201.1
0.2, 0.3, 0.5 726 2715.26 1 194.5
0.2, 0.4, 0.4 427 2312.18 2 196.9
0.2, 0.5, 0.3 382 1906.4 3 195.9
0.2, 0.6, 0.2 400 2330.29 3 197.5
0.3, 0.1, 0.6 475 2099.12 1 201.0
* 0.3, 0.2,0.5 360 1774.87 2 203.4
0.3, 0.3, 0.4 536 2103.48 1 210.9
0.3, 0.4, 0.3 389 2241.87 3 196.9
Bank, J. and Werner, F., (2001), “Heuristic 
algorithms for unrelated parallel machine 
scheduling with a common due date, 
release dates, and linear earliness and 
tardiness penalties”, Mathematical and 
Computer Modelling, Vol. 33, pp. 363–383. 
Charnes, A., Cooper, W,W., Rhodes, E., (1978), 
“Measuring the efficiency of decision 
making units”, European Journal of 
Operational Research, Vol. 2, pp. 429-444. 
Chen J-F, Wu T-H, (2006), “Total tardiness 
minimization on unrelated parallel machine 
scheduling with auxiliary equipment 
constraints”. Omega-International Journal 
Of Management Science, Vol. 34, pp. 
81–89. 
Chen, J.-F., (2006), “Minimization of maximum 
tardiness on unrelated parallel machines 
with process restrictions and 
setups”, International Journal of Advanced 
Manufacturing Technology, Vol. 29, No. 5, 
pp. 557-563. 
Clemen, R.T. and Reilly, T., (2001), “Making 
Hard Decisions with Decision Tools, 
Duxbury Thomson Learning”, Toronto. 
Eglese, R.W., (1990), ”Simulated annealing: A 
tool for operational research”, European 
Journal of Operational Research Vol. 46, 
No. 3, pp. 271–281. 
Glass, C. A., Potts, C. N. and Shade, P., (1994), 
“Unrelated parallel machine scheduling 
using local search”, Mathematical and 
Computer Modeling, Vol. 20, No. 2, pp. 
41–52. 
Collins NE, Eglese RW and Golden BL, (1988), 
“Simulated annealing — an annotated 
bibliography”, American Journal Of 
Mathematical And Management Sciences, Vol. 8, 
pp. 209–307. 
Hariri, A. M. A. and Potts, C. N., (1991), 
“Heuristics for scheduling unrelated 
parallel machines”, Computers and 
Operations Research, Vol.18, No. 3, pp. 
323–331. 
Jansen, K. and L. Porkolab, (1999), “Improved 
approximation schemes for scheduling 
unrelated parallel-machines”, ACM 
Symposium on Theory of Computing, 
408-417.  
Kim, D. W., Kim, K. H., Jang, W. and Chen, F. 
F., (2002), “Unrelated parallel machine 
scheduling with setup times using 
simulated annealing”, Robotics and 
Computer Integrated Manufacturing, Vol. 
18, No. 3–4, pp. 223–231. 
Kim, D. W., Na, D. G. and Chen, F. F., (2003), 
“Unrelated parallel machine scheduling 
with setup times and total weighted 
tardiness objective”. Robotics and 
Computer Integrated Manufacturing, Vol. 
19, No.1–2, pp. 173–181. 
Kirkpatrick S, Gelatt Jr CD and Vecchi MP, 
(1983), “Optimization by simulated 
annealing”, Science, Vol. 220, pp. 671–
680. 
Lancia, G., (2000), “Scheduling jobs with 
release dates and tails on two unrelated 
parallel machines to minimize the 
makespan”, European Journal of 
Operational Research, Vol. 120, pp. 
277–288. 
Liaw C-F, LinY-K, Cheng C-Y, Chen M., (2003), 
“Scheduling unrelated parallel machines to 
minimize total weighted tardiness”. 
Computers and Operations Research, Vol. 
30, pp. 1777–89. 
Logendran R, Subur F., (2004), “Unrelated 
parallel machine scheduling with job 
splitting”, IIE Transactions, Vol. 36, No. 4, 
pp. 359–72. 
