件映對、配置、與繞線處理，然後載入到 FPGA 實驗板中進行測試。 
 
4. 結果與討論 
在這章節，我們將依序簡述並討論過去一年來的研究成果： 
 自我時序資料路徑電路模組  
 延遲元件的實現信號映射規則 
 非同步乘法器設計流程 
 資料路徑最佳化 
 
自我時序資料路徑電路模組 
自我時序資料路徑分為 4 種電路模組：功能單元、暫存器、多資料來源模組
和比較器，如圖 1。功能單元(function unit)：Function區塊可為加、減、乘、除
或其他功能運算，至於Delay元件則為映對功能區塊執行運算時所需時間，此時
間是所有輸入到輸出端最差的延遲時間。暫存器(register)：REG區塊為一般資料
栓鎖器，通常使用正緣來栓鎖資料，而Delay元件映對資料栓鎖器栓鎖資料所需
的時間。多資料來源模組(Multi-data source)：多工器的輸入端為前ㄧ級組合邏輯
電路的輸出端或是資料拴鎖器的輸出結果，d1 和d2 為多工器執行時所需花費的
時間，d3 為映對資料栓鎖器栓鎖住資料的時間，當輸入端只有ㄧ個時，可移除
多工器跟d1~2 的延遲電路，其架構會與暫存器模組相似。假如兩輸入資料在到
達多工器之前，資料已呈穩定狀態或資料已儲存在栓鎖器中，其電路架構為多資
料來源模組(二)[2]。比較器(comparator)：由Logic和Select區塊組成，Logic區塊
處理條件式運算，而Select區塊使用sel訊號選擇Req訊號到T_ack或F_ack的傳輸路
徑。 
 
 2
延遲元件，透過單一反閘輸入到輸出的時間作為延遲電路基本的延遲時間單位，
另一方面，由於反閘具有訊號反向的特性，所以延遲電路中的反閘個數須為偶數。 
以反閘實現延遲電路有兩種方式，其一是單純的將反閘串成單一反閘鏈，如
圖 2，雖然可達到延遲的功用，但是在訊號的重置週期上會浪費額外的時間，理
論上，當電路完成運算後，訊號重置時間能越短越好，因為其時間長短將影響下
一次要求的反應時間，另一技巧則是在延遲電路中加入兩輸入的及閘，及閘的兩
輸入端，一端接至反閘鏈的輸入，另一端則接到反閘鏈的輸出，當訊號來到重置
週期時，反閘鏈的輸入為 0，經過及閘可將延遲電路的輸出訊號快速重置為 0，
此技巧仍保有延遲的特性，且具有快速重置的功能，如圖 3，綜觀上述兩種設計
技巧，以訊號重置時間而言，第一種方式需要反閘鏈的時間，而第二種方式只需
一個及閘的時間，圖 4為重置時間的長短對系統效能的影響，我們發現快速重置
的設計技巧較為優越，但是距離下一次要求的來臨時間有所限制，如圖 5，當訊
號完成重置動作時，如果此時第二個要求訊號在內部訊號因延遲的關係尚未歸零
前到達，會因為內部歸零的假象提早將輸出訊號設定為 1，接著，遇到先前的重
置訊號致使輸出訊號轉態為低準位，產生錯誤的重置訊號，為了避免該問題的發
生，我們提出階段性的重置技巧，如圖 6，在適當的反閘後增加一顆及閘，以加
快內部訊號的重置。 
 
圖 2 傳統型反閘鏈 圖 3 快速重置型反閘鏈 
 
 4
Delay_in
Delay_out
...
Delay_in
Delay_out
d1 d2
n1 n2 n3
n4
...
n1
n2
n3
n4
d1 d2
(d1+d2)*N d2
<    +TS3 -> S1 d1 d2  
圖 6 改良型反閘鏈 
 
圖 7為反閘數目的計算方法，針對不同的延遲時間計算出需要的反閘數目，
m為反閘最小的延遲時間百分比，safety_margin為反閘時間的安全界線百分比，
dp_delay是資料路徑最長運算時間，and_delay是兩輸入的及閘相對其輸出端的最
長延遲時間，而inv_delay為單一顆反閘輸入到輸出的延遲時間，在此我們假設m
為 90%，safety_margin為 50%，除此之外，計算後的反閘數目需為偶數。 
 
圖 7 反閘數目計算方法 
 
同步乘法器設計流程 
 8為其電路架構，分成延遲元件與執行乘法運算的
功能
非
以非同步乘法器為例，圖
區塊，基本上，這兩部分是各自獨立的。當欲執行乘法運算時，a與b兩輸入
端上需先備妥待運算資料，接著REQ訊號由低準位拉升到高準位，通知乘法器可
開始運作，經過一段時間後，ACK訊號從低準位轉變為高準位，表示已完成乘
 6
相同的運算[3]，雖然可達到資源共享的功用與縮減資料路徑的數量，但是另一
方面由於每個資料路徑都擁有獨自的控制訊號，以控制流程的角度思考，過度的
交握動作無疑將造成系統的負擔，而多運算式也並非不能達到資料路徑的最佳
化，我們可採取區域內的最佳化，或將兩區域內相同的資料路徑個別獨立且縮減
後與其它共享[4]，雖然效果上不如單運算式，但至少可彌補其不足。從電路的
實現上來看，多運算式還是略佔優勢。 
圖 10是GCD電路行為描述分別使用單運算式和多運算式分離後的結果，相
較之下多運算式比單運算式少 3 個資料路徑與 7 條控制線。 
 
Latch
M
U
X
C
m
p
Latch
M
U
X
C
m
p
X
dp1_req
Y
x
y
Sub
Sub
dp1
dp2
dp3
dp1_ack
dp2_req dp2_ack
X_bn2_req dp4_req
X_bn1_req
X2other_ack
X_bn1_req
X_bn2_req
Y2other_ack
C1_req
T1_ack
F1_ack
T1_ack
F1_ack
C2_req
dp4_ack
dp5_ack
dp5_req
dp3_req dp3_ack
(a)單運算式 
 8
library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
use work.nondeterminism.all;
use work.channel.all;
entity ch_gcd is
    port( X : inout channel := init_channel;
          Y : inout channel := init_channel;
          O : inout channel := init_channel
          );
end entity ch_gcd;
architecture aa of ch_gcd is
    signal X_ctmp : std_logic_vector(7 downto 0);
    signal Y_ctmp : std_logic_vector(7 downto 0);
    begin
        process
            variable X_tmp : std_logic_vector(7 downto 0);
            variable Y_tmp : std_logic_vector(7 downto 0);
      
      begin
            receive(X, X_ctmp, Y, Y_ctmp );
X_tmp := X_ctmp;
Y_tmp := Y_ctmp; 
            while X_tmp /= Y_tmp loop
                if X_tmp > Y_tmp then
                    X_tmp := X_tmp - Y_tmp;
                else
                    Y_tmp := Y_tmp - X_tmp;
                end if;   
            end loop;
            wait for delay(10, 50);   
X_ctmp <= X_tmp;
wait  for 10ns;   
            send(O, X_ctmp);
        end process;        
end aa;  
圖 12 通道層 GCD 電路描述 
 
圖 13 通道層模擬結果 
 
圖 14為透過Ch2Hs轉譯後的結果，每個輸出入通道被請求、回應和資料線
所取代，圖 15為其模擬結果。圖 16是經由資料路徑和控制器的分離，與非同步
控制器和自我時序資料路徑的合成步驟後，實際合成至FPGA中的模擬結果，從圖 
16 (b)(c)可發現最長的執行時間為 10.705us，使用掉 198 個邏輯元件，整體而言
效能並不高，而且使用過多的邏輯元件，這個問題有可能是我們為了過濾危障，
而增加多餘的硬體電路所造成的影響，另一方面，也有可能在過濾危障的過程中
花掉太多的時間。表 1為使用相同的自我時序資料路徑，但配合不同的控制器所
模擬出來的結果，我們可以發現最佳化後的控制器相較最佳化前整體效能與面積
 10
(a) 
(b) 
 
(c) 
圖 16 FPGA 模擬結果 
 
表 1 控制器最佳化前與最佳化後模擬結果 
Original Reshuffled 
SPEC 
St. Area Tc St. Area Tc 
Improvement 
adder 12 26 78 8 15 74 5.13% 
shifter 28 75 1144 18 72 1114 2.62% 
join 28 79 154 20 74 142 7.79% 
 12
