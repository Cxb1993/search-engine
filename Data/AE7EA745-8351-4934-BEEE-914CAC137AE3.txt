software products [2-4, 12-13]. Below we will review 
some SRGMs based on Non-homogeneous Poisson 
process (NHPP). 
y Goel-Okumoto (GO) Model: This model, proposed 
by Goel and Okumoto [2-3, 12], is one of the most 
representative NHPP model in the field of software 
reliability modeling. The mean value function of GO 
model is given by 
      ])exp[1()( rtatmGO −−= , a>0, r>0.         (1) 
y Yamada Delayed S-Shaped (YSS) Model: This 
model was proposed by Yamada et al. [2-3, 12], 
which regards the fault isolation process. The mean 
value function is shown as: 
])exp[)1(1()( rtrtatmYSS −+−= , a>0, r>0.    (2) 
The software fault detection process modeled by 
such an S-shaped curve can be considered as a 
learning process caused by the improvement of the 
testers' skills.  
y Inflected S-Shaped (ISS) Model: This model was 
proposed by Ohba [2]. Its main concept is that the 
observed software reliability growth becomes S-
shaped if faults in a program are mutually dependent 
[3, 12].  
]exp[1
]exp[1)(
rtc
rtatmISS −+
−−= , a>0, r>0, c>0.     (3) 
Over the past decades, more SRGMs have been 
proposed, namely Yamada Weibull model [13-14], 
SRGM with logistic testing effort function (TEF) [15], 
Ohba-Chou imperfect debugging model [16], Pham-
Zhang model [13] and so on. In fact, the parameters of 
these models can be systematically estimated the 
methods of Maximum Likelihood Estimation (MLE) or 
Least Square Estimation (LSE) [2-3]. 
However, we note that most of these SRGMs only 
deal with fault detection process [17]. In general, 
debugging activities can sequentially be divided into 
three steps: fault detection, fault isolation, and fault 
correction. Each step should take much time and effort. 
Obviously, we should pay considerable attention to the 
time to remove detected faults. From the literatures, 
some researchers [18-19] reported that instantaneous 
repair would not be realistic in practice. Therefore, 
some model-based methods have taken into account 
the fault correction process [17, 20]. Musa [4] thought 
that the fault removal process is characterized on an 
average basis by assuming that the fault correction rate 
is proportional to the hazard rate. He called the 
proportionality constant a fault reduction factor. 
2.1.2 以人工類神經網路為基礎的方法  
Artificial neural network approaches have been 
considered as a general approximator for non-linear 
continues functions with arbitrary accuracy [8, 21]. In 
the literatures, some researchers applied neural 
networks to predict software reliability [5-8, 21-22]. 
For example, Karunanithi and Malaiya [5] proposed a 
neural network architecture which accepts the 
execution time as input and then shows the number of 
detected faults. In their researches, the connectionist 
models are also used in the prediction of software 
reliability growth. This framework models software 
reliability modeling by varying different neural 
networks, such as recurrent neural network, etc.  
There is another kind of neural network framework. 
This framework models the software reliability based 
on multiple-delayed input single-output neural network 
architecture. For example, Cai et al [21] designated the 
recent 50 inter-failure times as the multiple-delayed-
inputs to forecast the occurrence of next failure. 
Similarly, based on multiple-delayed input single-
output neural network architecture, Tian and Noore [6] 
also proposed an evolutionary neural network 
modeling approach for the prediction of cumulative 
failure time. Su and Huang [8] proposed an ANN-
based approach to predict software reliability. Besides, 
focusing on the prediction in the early testing phase, 
Hu et al [7] used past fault-related data with ANN 
models to estimate reliability. Later, Hu et al [22] 
further studied a major ANN architecture of Elman 
recurrent networks to model both the fault detection 
and correction processes for software reliability 
analysis.  
 
2.2 運用排隊理論管理機制的模擬程序 
 
The studies on neural network approaches and 
software reliability models are productive. 
Nevertheless, most of training algorithms for neural 
network approaches suffer the overfitting problem [6]. 
How to appropriately determine the number of neurons 
is another common problem in the field of neural 
network [21]. Moreover, Tausworthe and Lyu [3, 10] 
thought that most SRGMs only focus on the failure 
observation during test phase or operational phase. 
They reported that the assumptions of most SRGMs 
lead to the over-simplification of failure process. 
Hence, general simulation techniques were developed 
to relax some unreasonable assumptions [3, 10, 23].  
For the ease of discussion, we let {X(t), 0≥t } be 
the stochastic failure process that represents the 
number of failures observed in an execution interval (0, 
t]. If the failure behavior is modeled by a failure rate, 
{X(t)} can be modeled by a class of non-homogeneous 
continuous time Markov chain (NHCTMC) [9]. That is, 
the behavior of the stochastic process {X(t)} of interest 
purely depends on the rate function for each state of 
software system [9]. If the state is represented by the 
faults are being removed, and fault removals do 
not affect the ongoing activities of fault detection. 
(4) No new faults are introduced during correction 
process. 
(5) Available debuggers are infinite at any time. The 
debugging system is modeled by a queue system 
(G/G/ ∞ ) [30]. Each time a failure occurs, there is 
no lag to allot a debugger to the detected fault. 
Based on the assumptions, Procedure #1 is 
developed and depicted in Figure 1. From Figure 1, we 
see that Procedure #1 accepts two parameters as inputs: 
the total execution time duration denoted global_time, 
and the consumed time of each run denoted dt. Note 
that here the total execution time was sliced up into a 
large number of runs, and the length of each run should 
be short enough that multiple events in a run are rare [3, 
9-10]. That is, the variations of failure rate in (t, t+dt) 
should be insignificant. In addition to the two inputs, 
some variables are also used in simulation procedure. 
The variable current_time indicates the cumulative 
execution time till now, which increases with the 
completion of each run. num_server denotes the 
number of busy debuggers at this time while 
max_server logs the number of utilized debuggers at 
peak time. Besides, we also construct a structure, 
fault_info, which includes three members: arrival_time, 
departure_time, and state. The array correction keeps 
track of the status of each fault, each element of which 
contains a fault_info. Finally, cumulative_arrival and 
cumulative_removal are integers used to count the 
numbers of cumulative detected faults and cumulative 
removed faults, respectively. 
During simulation, actions taken in each run consist 
of two steps: detecting and correcting. 
DETECTING: 
Following the similar works in [9-10], we can 
simulate the fault detection process. At the outset of 
each run, the function occur( ) will be invoked to 
determine whether the tester detect a fault in this run 
by comparing the product of λ(t) and dt with a (0.0, 
1.0)-uniform random number x. It means that testers 
may detect a fault if x is greater than λ(t)×dt. Once the 
occur function returns 1, num_server is increased, the 
value of max_server is updated, and the state of 
detected fault will be recorded. Lines 13-17 in Figure 1 
show the activities taken as a result of each failure 
occurrence. 
CORRECTING: 
Departing from the detecting step, we start to 
diagnose the status of each detected fault by checking 
all elements of the array correction. If an uncorrected 
fault is found, the function leave( ) determines whether 
this fault will be corrected in this run. Similar to the 
occur function, the success of fault removal relies upon 
the comparison between random number y and μ(t)×dt. 
Here the notation μ(t) is the service rate of each 
debugger. If μ(t)×dt ≥ y, it means that the dedicated 
debugger successfully corrects this fault in this run. 
The necessary activities taken due to this successful 
repair are given in Lines 22-24. Otherwise, this fault 
can not be corrected currently and will be reexamined 
in next run. It is noticed that the necessary correction 
time is non-negligible in assumption (2). Hence, the 
return of leave(0) is given as 0, which ensures the fault 
detected in current run will not be removed 
immediately.  
Above two steps will be repeated again and again 
until the end of entire interval. After completion, we 
can have the total number of detected faults, the 
cumulative number of corrected faults, the maximum 
of utilized debuggers, and the fault detection process. 
We can also further understand the fault correction 
process. 
2.2.4 考量可用除錯者數目的模擬程序  
Due to the budget limitation, the testing resources 
are restricted and controlled in the real world. It is 
almost inevitable to limit the number of dedicated 
debuggers in practice. Hence, the assumption (5) in 
Section 2.2.3 will be modified as the follows: 
The number of available debuggers is controlled. The 
debugging system can be modeled by G/G/m [30]. 
Each time a failure occurs, there is no lag to allot a 
debugger to the detected fault if available debuggers 
exist. Otherwise, the detected fault is pending in the 
queue and waits (for a long time to be corrected and 
removed). 
 Building upon Procedure #1, we will propose 
Procedure #2 given in Figure 2. Compared to 
Procedure #1, it accepts one more input, 
global_max_server, which is used to set the limit of 
available debuggers. Variables absent from Procedure 
#1 are described as follows. The variable 
num_correction counts the number of corrected faults 
and the number of faults being repaired by debuggers. 
The array waiting_queue keeps track of the status of 
each fault which is pending in the queue. Besides, 
queue_head and queue_tail are pointers to the head 
and the tail of waiting queue in the debugging system, 
respectively. 
In Procedure #2, each run consists of three steps: 
detecting, correcting, and debugger allocation. 
DETECTING: 
Once a fault is detected, we firstly increase 
cumulative_arrival and then determine weather 
available debuggers exist. If global_max_server > 
num_server, i.e., some debuggers are still available, the 
activities are the same as those taken during detection 
throughput. The performance comparisons for 
debugging systems with different limitations of 
debuggers are shown in Table 2. As seen from Table 2, 
the service levels provided by systems with more than 
9 debuggers are close. This result indicates that 9 
debuggers are enough for this case. 
In fact, based on above analysis, project managers 
will have more and sufficient information for the 
estimation of staffing level. The main restriction of the 
analysis described above is that the staffing level is 
constant through the entire debugging. However, this 
restriction can be released by changing the value of 
global_max_server in Procedure #2. Re-staffing often 
occurs at the following conditions [29]: 
y At the beginning of project, full staffing is not 
required; 
y As time proceeds and approaches the end of project, 
the number of faults pending in waiting queue 
decreases, thus few debuggers suffice; 
y The number of pending faults decreases or increases 
heavily in a short time, and then we should re-staff to 
avoid wasting resources or to meet the deadline. 
By having the proposed framework, project 
managers can easily estimate the influence caused by 
re-staffing the debugging system, and further decide to 
make an adjustment or not. Besides, the framework can 
also help to analyze the tradeoff between personnel 
cost and service level of debugging system. 
 
四、結論與討論 
 
    In this research, we have developed two 
simulation procedures to describe and measure 
software reliability. We have constructed and 
explained the debugging behavior through queue 
models. Using the proposed framework, the stochastic 
fault detection and correction processes can be 
described under different conditions. The possible 
testing/debugging behavior of software system are 
simulated and studied based on real data. Experimental 
results show that the proposed simulation procedures 
can provide very useful and important information, 
which can guide project managers to estimate the total 
amount of needed debuggers and to understand/infer 
the current/future situations from the simulation results. 
Finally, the further research will continue to focus on 
the analysis for studying the effects of various different 
service rates and batch arrivals under ideal and 
imperfect debugging environments. We plan to present 
the research results in the near future. 
 
五、參考文獻 
 
[1] American National Standards Institute/American 
Institute of Aeronautics and Astronautics, 
Recommended Practice for Software Reliability, R-013-
1992, 370 L'Enfant Promenade, SW, Washington, DC 
20024, 1993. 
[2] M. Xie, Software Reliability Modeling, World Scientific 
Publishing Company, 1991.  
[3] M. R. Lyu, Handbook of Software Reliability 
Engineering, McGraw Hill, 1996. 
[4] J. D. Musa, A. Iannino, and K. Okumoto, Software 
Reliability, Measurement, Prediction and Application, 
McGraw Hill, 1987. 
[5] N. Karunanithi and Y. K. Malaiya, “Prediction of 
software reliability using connectionist models,” IEEE 
Trans. on Software Engineering, Vol. 18, No. 7, pp. 
563-574, July 1992. 
[6] L. Tian and A. Noore, “On-line prediction of software 
reliability using an evolutionary connectionist model,” 
Journal of Systems and Software, Vol. 77, No. 2, 173-
180, August 2005. 
[7] Q. P. Hu, M. Xie, and S. H. Ng, “Early Software 
Reliability Prediction with ANN Models,” Proceedings 
of the 12th IEEE International Symposium on Pacific 
Rim Dependable Computing, pp. 210-220, Riverside, 
USA, December 2006. 
[8] Y. S. Su and C. Y. Huang, “Neural-Network-Based 
Approaches for Software Reliability Estimation using 
Dynamic Weighted Combinational Models,” The 
Journal of Systems and Software, Vol. 80, No. 4, pp. 
606-615, April 2007. 
[9] S. Gokhale and M. R. Lyu, “A Simulation Approach to 
Structure-Based Software Reliability Analysis,” IEEE 
Trans. on Software Engineering, Vol. 31, No. 8, pp. 
643-656, August 2005. 
[10] R. C. Tausworthe and M. R, Lyu, “A generalized 
technique for simulating software reliability,” IEEE 
Software, Vol. 13, No. 2, pp. 77-88, March 1996. 
[11] R. C. Tausworthe, “A General Software Reliability 
Process Simulation Technique,” NASA JPL Publication, 
91-7, April 1991. 
[12] C. Y. Huang, M. R. Lyu, and S. Y. Kuo, “A Unified 
Scheme of Some Non-Homogenous Poisson Process 
Models for Software Reliability Estimation,” IEEE 
Trans. on Software Engineering, Vol. 29, No. 3, pp. 
261-269, March 2003.  
[13] H. Pham, Software Reliability, Springer-Verlag, 2000. 
[14] S. Yamada, J.Hishitani, and S. Osaki, “Software-
Reliability Growth with a Weibull Test-Effort: A Model 
& Application,” IEEE Trans. on Reliability, Vol. 42, No. 
3, pp.100-106, March 1993. 
[15] C. Y. Huang, and S. Y. Kuo, “Analysis of incorporating 
logistic testing-effort function into software reliability 
modeling,” IEEE Trans. on Reliability, Vol. 51, No. 3, 
pp.261-270, September 2002. 
[16] M. Ohba and X. Chou, “Does Imperfect Debugging 
Affect Software Reliability Growth?” Proceedings of 
the 11th International Conference on Software 
Engineering, pp. 237-244, Pittsburgh, USA, May 1989. 
[17] Y. P. Wu, Q. P. Hu, M. Xie, and S.H. Ng, “Detection 
and Correction Process Modeling Considering the Time 
Dependency,” Proceedings of the 12th IEEE 
 
 
 
1 void Simulation_Procedure (double global_time, double dt) 
2 { 
3  double current_time ;  
4  int num_server, max_server ; 
5  struct fault_info correction[Max_Size]; 
6  int cumulative_arrival, cumulative_removal; 
7  current_time = 0 ; 
8  num_server = max_server = 0 ; 
9  cumulative_arrival = cumulative_removal = 0 ; 
10  while ( current_time < global_time ) { 
11   DETECTING: 
12   if ( occur() ) { 
13    num_server++ ; 
14    if (num_server > max_server) 
15     max_server = num_server ; 
16    correction[cumulative_arrival].arrival_time = current_time ; 
17    correction[cumulative_arrival ++].state = CORRECTING ; 
18   } 
19   CORRECTING: 
20   for (int i = 0 ; i < num_correction ; i++) { 
21    if (correction[i].state == CORRECTING && leave(current_time -correction[i].arrival_time)) {
22     num_server-- ; 
23         correction[i].departure_time = current_time ; 
24         correction[i].state = CORRECTED ; 
25    } 
26   } 
27   current_time += dt ; 
28  } 
29  for ( int i = 0 ; i < cumulative_arrival ; i++) 
30   if (correction[i].state == CORRECTED) 
31    cumulative_removal++ ; 
32 
33  return cumulative_removal ; 
34}  
Figure 1. Procedure #1. 
 
 1
出  國  報  告 
 
國際會議名稱：The 18th IEEE International Symposium on Software Reliability 
Engineering (ISSRE 2007), Trollhättan, Sweden. 
會議中文名稱：第18屆國際軟體可靠度工程會議 
會議舉行日期：2007/11/5－2007/11/9 
 
一、參加會議經過 
 第一、二天(2007/11/5-6) 
今年IEEE第18屆國際軟體可靠度工程會議(International Symposium on Software 
Reliability Engineering，以下簡稱為ISSRE)在瑞典的特羅爾海坦鎮(Trollhättan)舉
行(特羅爾海坦鎮為現代瑞典工業的發源地及Saab與Volvo汽車的生產地)，本屆
年會主要由瑞典西部大學(University West)、挪威斯坦福大學(Østfold University 
College)和挪威能源技術學院(Institute for Energy Technology)聯合舉辦，本次大會
主旨是研討那些可由不同構成元件和子系統整合成之工業系統的可靠度。我於11
月5日晚上7:50分搭乘荷蘭皇家航空(KL-0878)前往曼谷轉機至荷蘭阿姆斯特丹
後再轉搭荷航(KL-1153)至瑞典哥德堡蘭德維特機場(Landvetter Airport)，一共超
過18個小時以上的飛行時間。通關之後再搭計程車經過50英哩後至下榻飯店
Scandic Hotel，已是11月6日當地下午12點多。我隨即直接至會場報到，並領取
IEEE出版ISBN編號ISBN: 0-7695-3024-9之論文集。下午則參加了一個Tutorial: 
More Reliable Software Faster and Cheaper，由美國北卡州立大學的蘿莉威廉斯教
授(Laurie Williams)演講。  
 
 第三天(2007/11/7) 
第三天早上參加了Session 1: Reliability of Software Systems，由廣島大學土肥正教
授(Tadashi Dohi)主持，一共聆聽了三篇論文報告：Sensitivity of Website Reliability 
to Usage Profile Changes、Measuring Software Reliability in Industry: A Case 
Study、Software Reliability Modeling with Code Coverage: Experimentation and 
Measurement with A Fault-Tolerant Software Project。下午我則有一篇論文發表：
 3
Software Failure Mode Effect Analysis、Development Escape Rate━A Software 
Development Effectiveness Metric、及regular paperValidating Informal Code Peer 
Reviews in a Large-scale Software Development。晚上主辦單位有一場歡迎宴會在
瑞典西部大學的校園餐廳舉行，讓各國學者們能在輕鬆的場合中彼此認識交流。
我在會中認識到大陸華為公司的一些技術經理與工程師、IBM的Stephen Kan博士
(他是Metrics and Models in Software Quality Engineering該書的作者)及IEEE 
Reliability Society的Samuel Keene博士(IEEE Fellow)，彼此互換名片，相談甚歡。 
 
 第五天(2007/11/9) 
今天早上11:00~12:30參加了Panel 2 - Anything You Want To Ask About Software 
Reliability Engineering，由來自NASA的Mike Hinchey博士主持。會議結束後我便
於17:40搭荷蘭航空(KL-0877)啟程回台，直到11/10晚上八點方才到達台灣。  
 
二、與會心得 
ISSRE是當今世上軟體可靠度工程研究領域裡最頂尖的國際會議，從1990年在美
國Washington DC召開第一屆會議開始，到今年已經是第18屆，其絕大多數選在
美國本土舉行，只有極少次在法國及德國舉行，而今年則是首次選在瑞典舉行。
ISSRE是世界上唯一的，以軟體可靠度工程為主題每年定期舉行的國際會議，其
影響力逐年擴大，ISSRE組織的焦點是軟體可靠度工程的理論與實踐。其經過多
年來的穩定發展，按照既定規定已吸納了近200家會員，會議陣容強大已經足以
代表軟體工程領域的各種主要方向，但研究的課題也足夠細緻至代表這些領域的
理論與實踐。自1998 年，IEEE 可靠度學會(IEEE Reliability Society)正式署名作
為會議的聯合發起單位之一，使其在軟體可靠度領域的學術權威性，得到進一步
的確認。這個軟體可靠度工程國際會議，以倡導理論和實際應用相結合為宗旨，
對軟體企業產生了強大的吸引力。我們在ISSRE 2007共發表一篇與軟體可測試性
技術有關的論文，為整個台灣在2007年唯一被ISSRE所正式接受的論文。我亦於
參加會議當中與香港中文大學計算機科學與工程學系呂榮聰教授(Professor 
Michael R. Lyu，IEEE Fellow & AAAS Fellow)有著多次當面一對一的對談與心得
交換，呂榮聰教授曾以「在軟體可靠度工程及軟體容錯的貢獻」獲選為IEEE 
Fellow。ISSRE每年吸引來自全球各地對電腦軟體相關領域專精或有興趣之學
