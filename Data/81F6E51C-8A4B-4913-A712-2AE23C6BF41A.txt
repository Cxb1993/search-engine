  
I 
目錄 
目錄 ..................................................................................................... I 
圖目錄 ................................................................................................ V 
表目錄 .............................................................................................. IX 
一、  摘要與關鍵字 ........................................................................ 1 
1.  中文摘要 ............................................................................ 1 
2.  英文摘要 ............................................................................ 3 
3.  關鍵字 ................................................................................ 4 
二、  前言與研究目的 .................................................................... 5 
三、  文獻探討 ................................................................................ 8 
1.  Introduction to Mobile Agent ............................................. 8 
1.1 Mobile Agent概念 ........................................................ 8 
1.2 Mobile Agent要素 ...................................................... 12 
1.3 Mobile Agent應用領域 .............................................. 14 
  
III 
3.5 提供服務 ................................................................... 35 
3.6 安全機制 ................................................................... 36 
3.7 AES-CTR security suite .............................................. 36 
3.8 AES-CBC-MAC security suite ................................... 43 
3.9 CCM mode Encryption and Authentication security 
suite ........................................................................................... 46 
3.10 AES-CTR protected payload field ............................ 51 
3.11 TinySec ..................................................................... 53 
四、  研究方法 .............................................................................. 59 
1.  系統架構 .......................................................................... 59 
2.  Sensor Network ................................................................ 60 
2.1 更改Mote傳輸頻率 ................................................... 61 
2.2 將Mote傳回資料存入檔案 ....................................... 61 
2.3 Source Code ................................................................ 61 
3.  Mobile Agent Aglet Subsystem ........................................ 65 
3.1 程式架構 ................................................................... 65 
  
V 
圖目錄 
  
圖表 1 行動代理者和離線操作 ............................................. 11 
圖表 2 主從運算模式 ............................................................. 16 
圖表 3 Code-on-Demand(Applet)模式 ................................... 17 
圖表 4 行動代理者模式 ......................................................... 18 
圖表 5 行動代理者與傳統主從式運算比較圖 ..................... 19 
圖表 6 Aglet 的架構圖 ........................................................... 23 
圖表 7 Aglet 的生命週期 ....................................................... 26 
圖表 8 Aglet 與Aglet 之間的訊息溝通 ................................ 28 
圖表 9 Aglet的行動式代理人平台架構 ................................. 28 
圖表 10 .................................................................................... 35 
圖表 11 ..................................................................................... 35 
圖表 12 .................................................................................... 38 
  
VII 
圖表 28 .................................................................................... 55 
圖表 29 .................................................................................... 56 
圖表 30 .................................................................................... 56 
圖表 31 .................................................................................... 57 
圖表 32 .................................................................................... 58 
圖表 33 DSNMA系統架構圖 ................................................. 60 
圖表 34 .................................................................................... 83 
圖表 35 .................................................................................... 84 
圖表 36 .................................................................................... 84 
圖表 37 .................................................................................... 85 
圖表 38 .................................................................................... 86 
圖表 39 .................................................................................... 86 
圖表 40 .................................................................................... 87 
圖表 41 .................................................................................... 87 
圖表 42 .................................................................................... 88 
  
IX 
表目錄 
表格 1 Crossbow系統元件 ..................................................... 31 
表格 2 硬體說明 .................................................................... 32 
表格 3 AES-CTR security ....................................................... 37 
表格 4 ...................................................................................... 38 
表格 5 ...................................................................................... 41 
表格 6 ...................................................................................... 43 
表格 7 AES-CCM security material ........................................ 46 
表格 8 ...................................................................................... 46 
表格 9 ...................................................................................... 55 
表格 10 .................................................................................... 57 
表格 11 ..................................................................................... 57 
 
 
  
2 
System，透過行動代理人的機制傳遞並分析來自 DSNs 各群組 Sensor 
Node Group 的相關資訊，使系統可以快速地蒐集廣泛 DSNs 所有狀態
訊息以及提升 DSN 的存活率。 
  
4 
information from each sensor network group. It results in collection of all 
sensor node statuses in system center and increasing the survivability of 
Sensor Network. 
 
3. 關鍵字 
Mobile agent, Sensor Network. 
  
6 
題，DSNs 配置的靈活度、DSNs Nodes 間資訊傳遞的安全性、DSNs 
System 的存活性(Survivability)…等。現有的 DSNs 軟體仍然稀少，而
使得在很多方面仍然無法滿足在現今生活上的許多應用。絕大多數的
DSNs 系統都是依據特殊目的而設計的，而 DSNs 必須在應用之前必
須被部署和安裝，但是被部署了以後 DSNs 只能稍微適應環境的變化
情形，所以一但外在的狀況改變，則系統必須大幅度地修正。舉例來
說，假設 Sensor Network 事先就已經被部署用來偵測是否有森林火災，
若森林的火災被偵測出來之後且消防對趕來時，消防隊又必須重新設
計網路來使得網路可以搜尋並且對外提供救援的申請。當然，我們可
以將偵測和提供救援的申請這兩種方法整合在一起，但是對於一般的
DSNs，仍然受限於他的記憶體大小及儲存元件方面。 
另一方面，在傳統的架構中，所有的 DSNs 感應器資料是集中送
到一個資訊中心。但是在軍事部署的 DSNs 中，傳送非必要的資料會
增加被偵測到的風險，而且也會消耗電池的動力與頻寬。為了迎接這
些新的挑戰，Mobile Agent-Based on Distributed Sensor Networks 
(MADSNs) 已經被 Qi， Iyengar， and Chakrabarty 所提出。一個行
動代理人(Mobile Agent)會選擇性的拜訪感應器，並且逐漸的整理合
適的資料。行動代理人是一個特別的程式，它可以自來源端派遣到遠
端執行。當抵達一個遠端節點時，行動代理人會發出他的憑證，以獲
得存取當地資料與服務的權限，執行相關動作收集所需的資訊後，行
動代理人會帶著結果離開。因此將可以透過行動代理人解決 DSNs 的
安全性問題。 
  
8 
三、 文獻探討 
1. Introduction to Mobile Agent 
1.1 Mobile Agent 概念 
行動代理者是一種具有獨特能力的代理者程式，可以把自己經由
網路，從一個主機系統中移動(或被移動)到另一個主機系統，以存取
當地的資源，完成作業的執行。這種可以移動的特性，允許行動代理
者到網路中一些有提供服務的系統去存取他所需要的服務。 行動代
理者具有自主性與行動能力，並可以降低網路的流量，在網路頻寬有
限與網路品質不穩定的網際網路中，它提供了系統具有強健(Robust)
與高度的容錯能力(Fault-Ttolerant)的能力。 
依照行動代理者執行的特性，行動代理者有兩種主要的方式： 
(1) 弱機動性(Weak Mobility)： 
弱機動性的行動代理者，程式碼可以傳送到網路上其他的節點來
執行，以達成程式碼機動(Code mobility)的功能。 
弱機動性的行動代理者系統，其實現的方式是：行動代理者在移
動時只帶著起始的資料，並不會傳送行動代理者在執行作業時所產生
的一些的動態狀況。這一類行動代理者的生命週期模式，通常是以任
務作為基礎(task-based)的型式。在傳送行動代理者前，必需明確的賦
予行動代理者，到下一個網路節點時所要開始的任務為何。大多數以
  
10 
z 降低網路負荷：系統將作業交由行動代理者帶到資料所在的
機器上執行，等作業執行完成後，將結果傳回至原來的機器
上，可減少資料透過網路來傳遞與交換的數量與次數，節省
網路頻寬的浪費並增加系統的彈性。 
z 　克服網路延遲問題：在一些緊要的即時系統 (Critical 
Real-time System)中，例如在製造流程中的機器人(Robots)，
需要即時回應在他們環境中的改變。若經由工廠的網路來控
制這類系統，會因為網路有許多可觀的延遲問題，而無法適
用於即時系統。使用行動代理者系統，可以由中央控制端派
遣行動代理者到各局端，依照控制端的指令在局端直接作業，
如此可以即時回應環境的改變，不會有網路延遲性的問題。 
z 　封裝通訊協定：在分散式系統中，當資料需要交換時，必
須考慮各種系統主機的不同通訊協定，必須在資料外送時適
當的編碼，並解譯接收進來的資料。採用行動代理者技術，
可以將通訊協定封裝起來，將行動代理者遷移至遠端主機時，
可以依照適當的通訊協定建立連線通道(Channel)，系統發展
者不需再考慮不同通訊協定間之溝通問題。 
z 　非同步執行與自主行動：行動式上網設備與網路作連接時
必須考慮兩各方面的議題：連線費率與網路的穩定度。若須
要與網路持續不斷的連線才能執行的作業，在經濟及技術的
考量上都是不可行的。行動代理者技術，可將作業任務嵌進
行動代理者中，當行動代理者被派遣出去後，便可具非同步
  
12 
境有關。所以行動代理者可以為系統無縫(Seamless)的整合提
供一個最佳的條件。 
z 強健與容錯(Robust and Fault-Tolerant)：當環境及條件不理想
時，行動代理者可以動態反應的能力，使得行動代理者技術
易於建立強健與容錯的分散式系統。例如：當某一主機要關
機時，在這台主機上執行的所有行動代理者，便會收到警告，
並會被派遣至網路上其他台主機，以繼續他們的作業執行。 
z 因為行動代理者的架構具有彈性、易於擴充，可以改善主從
式架構的缺點，提供了系統高度的延伸性(Scalability)。 
 
1.2 Mobile Agent 要素 
一個完整的行動代理者系統有下列幾個重要的元素：代理者
(Agent)、場所(Place)、機動性(Mobility)、溝通(Communication)、授
權(Authority)、與允許(Permit)。 
z 代理者：定義為個人的行為代表，可為一個動態的物件
(Mobile Oobject) 或是一個靜態物件。一個代理者可以在場
所誕生(Create)、消失(Dispose)、行動代理者則可以被派遣
(Dispatch) 到另一個場所執行，同一個時間，一個代理者只
能在一個場所中執行。 
z 場所：可以把網路上一些相互連結的電腦視為一些場所的集
  
14 
z 允許：經過一些分配的允許授權，來限制行動代理者可以做
哪些事。允許可以做的事，包括可執行的動作，及可使用的
資源兩種。場所必須防範惡意的使用者，並保護資料的安全
性，一個未經允許的代理者不能隨意的執行動作或存取資
料。 
 
1.3 Mobile Agent 應用領域 
在分散式系統的研究中，目前所用之架構多為 Client/Server 模式，
然而為了減少網路之流量，分散工作處理之負荷及增加系統的彈性，
以 Agent 為基礎的模式，如 Agent-Based System(ABS)或 Multi-agent 
system(MAS)，已經有許多的應用領域被提出來研究，如：智慧型製
造、分散式居家照顧、智慧型網路、人工智慧、網路管理、電子商務
等。 
一般來說，行動代理者系統可以應用的領域有： 
　 電子商務(Electronic Commerce) 
　 個人助理(Personal Assistance) 
　 安全仲介(Secure Brokering) 
　 分散式資訊擷取(Distributed Information Retrieval) 
 器具有處理程序的能力。 傳統上，要執行遠端的程式，可能需要使
用遠端程序呼叫(Remote Procedure Call，RPC)這類技術來達成目的。
當用戶端需要存取某些資源時，會向掌握這些資源的伺服器發出程序
呼叫(Procedure Call)，伺服器收到後便會執行此程序，執行完畢後將
結果傳回給用戶端。 
 
圖表 2 主從運算模式 
RPC 技術是主從模式常採用的方式，它的缺點是它的作業過程：
用戶端發出要求服務，伺服器回應結果，會經由網路不斷的重複，造
成網路流量的負荷，如圖 2-5。 利用 RPC 技術來進行系統發展，也
不是一件容易的事，在不同的平台上，實作 RPC 的方式與機制也不
盡相同。對行動式計算而言，以 RPC 技術為基礎的主從式架構，在
執行的時候，必須維持和網路的持續連結狀態，在經濟與技術上的考
量上，都不易實施。 目前大多數的分散式系統以此種模式為基礎，
主機掌控全面：程式碼、資源、及程序處理。除了 RPC 外，物件要
求仲介(Object Request Brokers, CORBA)，以及 Java 的遠端方法引用
(Remote Method Invocation, RMI)都是支援主從架構的技術。 
 
16 
 三者的部分混合。他的程序處理能力可以與局端的資源連結在一起，
程式碼並不是被一台單一主機所束縛，而是在整個網路裡都可以利用
到的。 
 
 
圖表 4 行動代理者模式 
1.5 Mobile Agent 運算模式比較 
z 行動代理者與傳統主從式運算的比較 
傳統主從式運算的技術，有一些缺點，例如在網路的使用率上
(Network Utilization)，RPC 技術將會比行動代理者技術帶給網路更大
的負荷，而且 RPC 技術必須持續的與網路連線才能完成工作，對於
行動式運算而言並不實用，在使用上會受到限制。 
 
18 
  
20 
(Intermediate Code)，更具有跨平台的好處。 
另一方面，行動代理者的使用是由應用程式來提供相容性，而不
用建立任何額外的應用階層的通訊協定(Application-level Protocol)，
因此，應用程式的更新或擴充都不需更動客戶端的程式，而且伺服器
端程式的更新或服務的修改，都不需中斷網路或修改客戶端程式的版
本。 
z 行動代理者與 Java applet 的比較 
當我們想做一些具有互動性的網頁時，可以使用 Java applet 來
完成，Java applet 採用的運算模式是 Code-on-demand，它的程式碼具
有可移動的特性，但這種 Mobility-code 並不就是行動代理者。 
Java applet 的使用，需先經過編譯成位元碼的形式，放置在
WWW 伺服器端，當使用者瀏覽該網頁時，瀏覽器便會從伺服器端
下載該 Java applet至用戶端，並藉由用戶端 Java-enabled 的WWW 瀏
覽器來執行。Java applet 程式碼可以被用戶端下載來執行，但不具有
自主遷移的特性，而且為了安全的考量，除了伺服器端與客戶端之外，
Java applet 不允許與其他的主機建立連結，故 Java applet 只能被視
為具有 Mobile-code 的特性，而不能視為行動代理者。 
1.6  Mobile Agent 的標準 MASIF 
行動代理者是一項尚在發展中的新技術，它具有的獨立自主性與
行動能力，適用於建立分散式的系統架購，並可降低網路的流量。在
  
22 
(Terminate)。 
z Agent transfer：目的在於使代理者軟體可以自由的在不同型
態的代理者系統間移動，導致一個通用基礎的產生，使得代
理者可以拜訪許多可利用的系統。 
z Agent and agent system names：代理者及代理者系統的名稱所
使用的標準語法(Syntax)及語意(Semantic)，允許代理者及代
理者系統來證明彼此身分，同樣使用者也可以用來驗證代理
者及代理者系統。 
z Agent system type and location syntax：除非代理者系統的型
態可以支援代理者，否則代理者不可以被傳送。位置的語法
是標準的，代理者系統才可以用來定位彼此的位置。 
2. IBM Aglet 
2.1 Aglet 系統簡介 
Aglet 是由 IBM 公司所研發的行動代理者系統，它採用了 Java 
技術的優點來設計系統，aglet 是一個可以移動的 Java 代理者程式，
並支援自主執行(autonomous execution)與動態旅程(itinerary)的路徑
(routing)。 Aglet 系統可以想像是 Java applets 與 servlets 的綜合與延
伸。Aglets 寄宿在 Aglet server 的方式就像 Java applet 寄宿在 WWW 
瀏覽器上一樣。Aglet server 提供 aglets 可以執行的環境、Java 虛擬
機器(Java virtual machine, JVM)及 Aglet 的安全管理機制，因此 Aglet 
  
24 
並提供 aglet 位置的透通性(Location Transparency)，透過
Proxy 即可與 aglet 溝通，如此可以隱藏 aglet 的實際位置。 
z Context：一個 Context 即是 Aglet 的工作場所，這是一個靜
態的物件，它提供工具以維護及管理執行中的 aglet ，並保
護主機系統的安全，不受惡意 aglets 的侵害，有良好的執行
環境。在電腦網路的一個節點中，可以執行多個伺服器程序
(Server Processes)，每個伺服器可以管理多個 Context。 
z Identifier：每個 aglet 都有一個獨一無二的 identifier，作為
aglet 的識別作用，在 aglet 的生命周期中，此識別碼永遠是
唯一且不會改變的。 
2.3 Aglet 的生命週期 
在 aglet 的系統中有兩個方法可以產生 Aglet：由程式碼來創造
(Creation)一個 Aglet，或是由一個已經存在的 aglet 複製(Clone)而產
生。為了控制 aglet 的數量，可以利用 Disposal 的方式來移除 Aglet。
Aglet 的行動能力可以分為主動(Actively)與被動(Passively)兩種：主
動的方式是由 Aglet 自行派遣(Dispatch)到另一個 Context 去執行，而
被動的方式則是 Context 將 Aglet 由另一個 Context 中取回(Retract)。
當 Aglet 在執行時會佔用一些資源，為了減少資源的消耗，在電腦效
率很低時 aglet 可以暫時的睡眠以釋出它所佔用的資源(Deactivation)，
等稍後再回到執行的狀態(Activation)。 
z 建立(Creation)：aglet 需要在 Context 中才能建立產生。新產
  
  
圖表 7 Aglet 的生命週期 
2.4 Aglet 的事件模式(Event Model) 
Aglet 的程式模式是以事件為基礎的。它的事件模式允許程式設
計師嵌入(plug-in)特製的 listeners 到 aglet 之中。Listener 可以在 aglet
的生命週期中，捕捉特殊的事件，並允許程式設計師根據事件，來撰
寫程式，以做出相對應的動作。在系統中存在三種 listeners： 
z Clone listener：捕捉關於複製的事件。程式設計師可以針對
Aglet 的複製過程，如 aglet 將要複製之時、複製真正被建立
時、以及複製事件發生完畢後，在這些事件中，為此 listener 
定義一些相對應的動作。 
z Mobility listener：捕捉關於移動的事件。程式設計師可以針
對 aglet 的移動過程，如 aglet 將要被派遣(Dispatch)至另一個
Context 之時、將要從另一個 Context 中被取回(Retract)時、
以及它真正到達一個新的 Context 之時，在這些事件中，為
 
26 
 發送者(Sender)可以只選擇取得第一個回覆的結果，並忽略其
餘的回覆。 
 
圖表 8 Aglet 與 Aglet 之間的訊息溝通 
2.6 Aglets 平台 
 
圖表 9 Aglet 的行動式代理人平台架構 
ASDK(Aglets Software Development Kit)為 IBM 所提供行動代理
人軟體發展套件，其中 Aglet 即意輕量化的代理人 ( Light-weight 
 
28 
  
30 
設計，因此對於安全性則特別注重，在 JAVA Virtual Machine
上執行的程式皆有嚴格的安全管制。 
z 動態類別載入( Dynamic Class Loading )：JAVA 所提供的動態
類別載入機制，使得 JAVA Virtual Machine 可在 run-time 載入
類別執行。此機制使得 aglet 藉由網路移動到遠端主機後，可
以在遠端主機繼續執行。 
z 多執行序( Multi-threading )：因為 JAVA 擁有多執行緒的機制，
所以使得一個 Aglet 執行的平台上，可以同時具有多個 Aglets
執行，且可獨立自主的執行以及提供同步的處理，使 Aglets
可以互相的溝通。 
z 序列化( Serialization )：JAVA 提供的序列化機制，提供物件
的序列化和反序列化的操作，使得 JAVA 類別可以在執行中
將其含有的各項資料變數保留，並在往後可重新起始該類別
並將資料變數回復。因此藉由 JAVA序列化的機制，可在Aglet
移動前，將 Aglet 所具有的狀態儲存為位元串列，將保留的
狀態傳送至遠端平台，並以反序列的功能將重新回復 Aglet
所擁有的狀態。 
將以上的 JAVA 機制實做在 Aglet API 上，使得 Aglets 與執行平
台具有以上的優點和支援，以符合行動代理人的環境要求。 
 Mote MICAz/ 
MPR2400 
主要負責資料無線的接收
和發送(符合 Zigbee 技術
無線傳輸模組) 
當 serial port plug 不同的
device 則會有不同的角色
z plug sensor board： 
該角色為 sensor node，
sensor board 感應，則感
應的資訊可以藉由
mote 的無線傳輸 
z plug MIB510： 
該角色可為資料收集
者，把收集到的資訊藉
由 RS-232 serial port 傳
送到電腦。 
 
Gate- 
way 
•MIB510 Serial 
Interface 
Boards 
–Using RS-232 
serial port 
 
z 使用 RS-232 serial port
與電腦連接 
z Sensor programming 
board 
(當要 load program to 
mote，需 MIB510 當
interface) 
z 可當資料收集者的角
色 
  
 
3.2 硬體說明 
表格 2 硬體說明 
 
32 
  
34 
在open-source的環境下許多的團體積極的捐獻程式和建立標準規格、
跨平台的網路服務，根據他們直接的經驗或是分析。 
3.4 通訊協定 
IEEE 802.15.4/ZigBee 
通訊協定以 IEEE 802.15.4 低速率無線個人區域網路(Low-Rate 
Wireless Personal Area Network, LR-WPAN)結合 ZigBee 無線標準為基
礎的發展。ZigBee 主要是由 IEEE 802.15.4 小組與ZigBee Alliance 組
織，分別制訂硬體與軟體標準。它是一種低傳輸速率 (250kbps)、短
距離 (一般約為 50-100 m，依耗電量之不同，可提昇至 300m)、低消
耗功率、架構簡單的技術。目前制定的頻段為全球的 2.4GHz ISM 頻
段、美國的 915MHz 頻段，以及歐洲的 868MHz 頻段。ZigBee 支援
主從式或點對點方式運作，同時最多可有 255 個裝置鏈結，具有高
擴充性。逐漸成為產業共通的短距離無線通訊技術之一。 
IEEE802.15.4 做為實體層與媒體存取控制層的傳輸標準，ZigBee
則專注於提供上層所需之網路層、應用層、以及加密機制等功能。 
  
36 
目前 CrossBow 在 Sensor Board 上已經可以提供的服務有 
z Microphone ( acoustic ranging, acoustic recording ) 
z Sounder ( Sounder detections ) 
z Photocell ( Light detections ) 
z Thermistor ( Temperature detections ) 
z Accelerometer ( Movement, seismic detections ) 
z Magnetometer 
3.6 安全機制 
Zigbee security 有四種模式： 
z No Security 
z Confidentiality (AES-CTR): 加密模式採用 128-bits AES 
Key，加密封包部分透過 AES-CTR (Advanced Encryption 
Standard -Counter mode)加密演算法。 
z Authentication (AES-CBC-MAC): 驗證封包完整性透過
CBC-MAC (Cipher block chaining message authentication 
code) , with 32, 64, 128 bits of MAC 
z Confidentiality and Authentication (CCM) 
3.7 AES-CTR security suite 
Sender : 
z MAC PIB formats: 
  
 
 
1 bytes 8 bytes 4 byte 1 byte 2 bytes 
Flag Source 
Address 
Frame 
Counter 
Key sequence 
counter 
Block counter 
 
 
 
 
 
 
7 6 5 4 3 2 1 0 
Res Res 0 0 0 L 
AES-CTR input block 
CTR mode flag byte 
Nonce Counter 
 
圖表 12 
表格 4 
Res 保留欄位，always be set to 0 
 
 
Flag 
L 參數的設定會對 message size 與 nonce size 有
所影響 
nonce size： 15 - L 
message size： 
  l(m) 代表 message m 的長度，byte 為單位，
0<l(m)<28L 
L 參數數值 2~8(1 被保留) 
L 欄位有 3bit，儲存( L-1 )，因此 L 欄位數值範圍
是由 1~7。 
IEEE802.15.4 定義 L 參數值為 2 
Source Address 64 bit IEEE address 
Frame Counter 在 MAC 層，每收到一個 frame，則 Frame Counter
 
38 
  
z AES-CTR protected payload field 
當傳送的封包是 AES-CTR 模式時，則 MAC layer Frame format： 
Header Payload FCS 
 
4 bytes 1 byte Variable 
Frame counter Key sequence 
counter 
Encrypted payload 
  
圖表 14 
A、 封包的 Header 有儲存 IEEE address，可讓 Receiver 取
得 Source address 的資訊。 
B、 再傳送成功 frame後，會更新MAC PIB裡的Frame counter
值。 
Receiver : 
A. 收到 Sender 傳送來的 Frame 
 
40 
 Plaintexti = E( Key , input block i ) ♁ Ciphertexti , for i = 1, 
2, …, n 
Plaintext Data 為 Plaintext1 || Plaintext2 || … || Plaintextn 
 
圖表 16 
 
42 
 Res 保留欄位，always be set to 0 
 
Adata 
Adata = 0，當 l(a) = 0 
Adata = 1，當 l(a) > 0 
( l(a) 代表 additional authenticated data a 的長度，byte 為單位，0<l(a)<264 ) 
 
 
M 
M 參數的設定會對 message expansion 與 attacker 是否易於 modify message 有所
影響。 
M 參數合法的值：4, 6, 8, 10, 12, 14, 16 bytes，代表 message integrity code (MIC)
長度。 
M 欄位有 3bits，儲存(M 參數-2)/2，因此 M 欄位數值範圍 1~7 
 
 
L 
L 參數的設定會對 message size 與 nonce size 有所影響。 
nonce size： 15 - L 
message size： 
  l(m) 代表 message m 的長度，byte 為單位，0<l(m)<28L 
L 參數數值 2~8(1 被保留) 
L 欄位有 3bits，儲存( L 參數-1 )，因此 L 欄位數值範圍 1~7。 
  
z CBC-MAC input blocks 與 CBC-MAC 演算法 
 
1 byte n bytes M bytes 
Length = n + m Header MAC Payload(不包含 MIC)  
 
 
Input 1 
16 bytes 
Input 2 
16 bytes 
Input 3
16 bytes
Input n 
16 bytes 
Input 1 
CIPHK 
Output 1 
Input 2 
CIPHK 
Output 2 
Input 3 
CIPHK 
Output 3 
Input n 
CIPHK 
Output n 
圖表 18 
 
44 
 C. 收到 Frame 裡的 MIC 與計算出的 MIC＇做比較，若相同，代
表訊息認證正確；不相同，代表訊息認證錯誤。 
 
3.9 CCM mode Encryption and Authentication security suite 
Sender： 
z Encryption and authentication 所共同需要使用到的變數 
A. MAC PIB formats: 當 security mode設定為CCM mode時，
在 macDefaultSecurityMaterial 或 ACL-SecurityMaterial 
field 會儲存一些參數，而這些參數會在加解密時使用
到。 
表格 7 AES-CCM security material 
16 bytes 4 bytes 1 byte (4) bytes (1) byte 
Symmetric 
 key 
Frame  
counter 
Key 
sequence 
counter 
Optional 
external frame 
counter 
Optional external key 
sequence counter 
  
B. CCM nonce 
表格 8 
 8 bytes 4 byte 1 byte 
Source 
Address 
Frame 
Counter 
Key sequence 
counter  
C. flag 值與 CBC-MAC flag 設定一樣 
z Authentication algorithm 
A. String a 代表額外增加的認證資料 
 
46 
 Bo AuthData 
 
 
 
 
Input n 
CIPHK 
Output n 
MIC 
Input 1 
CIPHK 
Output 1 
Input 2 
CIPHK 
Output 2 
Input 3 
CIPHK 
Output 3 
Input 1(Bo)  Input 2  Input 3  Input n ... …   
16 bytes  16 bytes  16 bytes 16 bytes 
圖表 21 
M 參數主要是設定 MIC size，若 MIC size < 16 bytes，則取 
“Output n＂左邊開始算 M 個 bytes 當 MIC。 
z Encryption algorithm 
A. 解釋 CCM encryption 的 flag，與 AES-CTR 的 flag 定義一
樣。 
 
7 6 5 4 3 2 1 0 
Res Res 0 0 0 L  
 
48 
  
  Counter 0 
Encrypted MIC 
MIC 
Input Blk0 
CIPHK 
Output Blk 0 
Counter 1 
Ciphertext1 
Plaintext1 
Input Blk1 
CIPHK 
Output Blk 1 
Counter n 
Ciphertextn 
Plaintextn 
Input Blk n 
CIPHK 
Output Blk n 
Encrypted payload
圖表 23 
 
50 
 Encrypted payload 與 Encrypted MIC 
C. Check Frame counter 與 Key sequence counter 是否 freshness 
D.  從 Header 取得 IEEE source address 
E.  組合 CCM Counter 當解密演算法的 input block，如同
Sender 的 CCM input block 值 
1.  
 
1 bytes 13 byte 2 bytes 
Flag Nonce Block counter 
 
 
  
 
Counter 0 
16 bytes
Counter 1
16 bytes 
Counter 2
16 bytes 
Counter n 
16 bytes 
... … 
 
圖表 26 
F. 解密 
Cipher Data 為 Ciphertext 1 ||Ciphertext 2 || … || Ciphertext n   
 (把 Cipher data 切割為一個個 16 byte 大小的 blocks ) 
Plaintexti = E( Key , input block i ) ♁ Ciphertexti , for i = 1, 
2, …, n 
MIC = E( Key , input block 0 ) ♁ Encrypted MIC 
Plaintext Data 為 Plaintext 1 || Plaintext2 || … || Plaintextn 
 
52 
  
54 
所發送的  message，則 receiver 應當有能力去偵測該
message 被竄改。 因此必須提供 message 的 authentication 
和 message integrity。 
B. Confidentiality 
Confidentiality 意 指 未 經 認 證 的  parties 無 法 得 知 
message 的內容。典型的處理方式是對 message 進行加
密。 
C. Performance 
當系統具有 cryptography 機制時，必會增加整個系統的
overhead。 例如：message 的長度增加，或者額外需儲存
的資訊…等。 
當須傳送的 message 的長度增加，相對的 throughput 會減
少，latency 增加。但對 WSN 而言，最重要的則是 power
的損耗。 
而使用 TinySec 機制，對 power 的損耗以及 message 長度
的增加，是在可以接受的範圍。 
D. Ease of use 
 Security platform 
TinySec 有提供相鄰的 node 可產生 pairwise key 進行
通訊的機制。而為了讓 user 易於使用該功能，TinySec
提供了呼叫該機制的 interface。 
 Transparency 
 Portability 
E. Existing schemes are inadequate 
在 network環境下，已經有許多不錯的安全機制，Ex：IPSec, 
 AM 1 該packet的type 
Len 1 該packet的長度 
Src 2 Source address 
Ctr 2 
Counter。當sender每送ㄧ個packet該值會加
一 
 
 TinySec-Auth packet format 
 
圖表 29 
 TinyOS packet format 
 
圖表 30 
J. Verify 
 Confidentiality 
¾ Information only leaks when one node sends two 
different packets with the same first 8 bytes and IV, 
to the same destination, with the same AM type, and 
of the same length. 
¾ If IV reuse is imminent, a key update protocol can 
be used to exchange new TinySec keys. 
 
56 
 的。 
 
圖表 32 
  
 
58 
 可以於兩異質網路間相互傳遞。 
z Sensor Node Simulator：藉由 Sensor Node simulator 模擬建議
多組獨立 Sensor Network 所獲得之資料，於測試時使用。 
系統架構圖如下所示： 
 
圖表 33 DSNMA 系統架構圖 
2. Sensor Network 
此系統實作之 Sensor Network 係採用前段敘述之 Crossbow 系統
實作，使用 TinyOS 所提供的 Surge 程式，Mote 接收 Sensor board 的
資料傳回給 Base Station，並且可使用 Multi-hop Routing。 
 
60 
  
      int year  = time.get(Calendar.YEAR); 
62 
 
import java.io.*; 
import java.lang.*; 
import java.util.*; 
import net.tinyos.packet.*; 
import net.tinyos.util.*; 
import net.tinyos.message.*; 
 
public class Listen { 
    public static void main(String args[]) throws 
IOException { 
     
 if (args.length > 0) { 
     System.err.println("usage: java 
net.tinyos.tools.Listen"); 
     System.exit(2); 
 } 
  
 PacketSource reader = 
BuildSource.makePacketSource(); 
 if (reader == null) { 
     System.err.println("Invalid packet source 
(check your MOTECOM environment variable)"); 
     System.exit(2); 
 } 
     
 try { 
  
   int HourFlag; 
 
   // ******Get目前系統時間******// 
 
   Calendar   time=Calendar.getInstance(); 
      int minute = time.get(Calendar.MINUTE);    
      int hour = time.get(Calendar.HOUR_OF_DAY);    
      int day  = 
time.get(Calendar.DAY_OF_MONTH);    
      int month = time.get(Calendar.MONTH)+1;   
//why+1? 
  
64 
     dayS = Integer.toString(day); 
     hourS = Integer.toString(hour); 
     minuteS = Integer.toString(minute); 
 
     // ******小時變更,開新檔案******// 
 
     if(hour!=HourFlag)  
     { 
         if(month<10) monthS = "0" + monthS; 
         if(day<10) dayS = "0" + dayS; 
         if(hour<10) hourS = "0" + hourS; 
         if(minute<10) minuteS = "0" + minuteS; 
       
         f = new 
File("C:/SensorData/A_"+yearS+"-"+monthS+"-"+dayS
+"_"+hourS+".txt"); 
         HourFlag = hour; 
     } 
      
     FileWriter fOut = new FileWriter(f,true); 
      
     // ****** Get packet資料 print螢幕******// 
 
     byte[] packet = reader.readPacket(); 
     Dump.printPacket(System.out, packet); 
     System.out.println(); 
     System.out.flush(); 
      
     // ******byte轉 string,存入檔案******// 
 
     for (int i = 0; i < packet.length; i++){ 
         int b = packet[i]; 
         String bs = Integer.toHexString(b & 
0xff).toUpperCase(); 
          if (b >=0 && b < 16) 
            fOut.write("0"); 
         fOut.write(bs+" ");  
        } 
        fOut.write("\r\n"); 
        fOut.flush(); 
  
66 
onDisposing() 
{ 
} 
onCreating() 
{ 
   oncloning() 
   { 
   } 
   onclone() 
   { 
      onDispatching() 
      { 
      } 
      onArrival() 
      { 
      } 
   } 
   oncloned() 
   { 
   } 
} 
run()  //Aglet的 Main Bady 
{ 
} 
 
3.2 Source Code 
package Mytest; 
import com.ibm.aglet.*; 
import com.ibm.aglet.event.*; 
import com.ibm.aglet.util.*; 
import java.net.*; 
import java.awt.*; 
import java.awt.event.*; 
import java.io.*; 
import java.lang.Thread; 
import java.text.SimpleDateFormat; 
import java.util.*; 
import javax.swing.JFrame; 
  
68 
event) 
  { 
  } 
 } 
 public void onDisposing() 
 { 
  //--顯示資料已收到的 dialog 
 
  DataComplete gui = new DataComplete(); 
  gui.go(); 
 
  //--------------------------- 
 
  try 
  { 
//畫面顯示 50分鐘 
   Thread.sleep(1000*60*50);   
  } 
  catch (Exception aaa) 
  { 
  } 
 } 
  
 public void onCreation(Object init) 
 { 
//clone事件聆聽者 
 
  addCloneListener( 
   new CloneAdapter() 
   { 
    public void onCloning(CloneEvent e)  
 
//clone前所做的事 
 
    { 
     mainID = 1; 
    } 
    public void onClone(CloneEvent e)  
 
//clone後，另一個 Aglet做的事 
  
70 
           while ((line = 
reader.readLine()) != null) 
           { 
           
 myList.add(line + "\r\n"); 
           } 
          
 fileReader.close(); 
           break; 
          } 
          else  
//檔案不存在 
          { 
          
 System.out.println(fdname + " is not exist"); 
           if(timeout >= 5) 
//超過 50秒，放棄該檔案 
            break; 
 
           timeout++; 
          
 Thread.sleep(10000);  
//睡十秒，每十秒檢查一次檔案存不存在 
          } 
         } 
        } 
        catch (Exception ex) 
        { 
        
 ex.printStackTrace(); 
        } 
       } 
       public void 
onArrival(MobilityEvent e)  
       { 
        //----------write 
file-------- 
        try 
        { 
         File filename = new 
  
72 
   //------------------ MainAglet 
-------------------- 
   try 
   { 
    SimpleDateFormat Hour = new 
SimpleDateFormat("HH"); 
    String Hr = Hour.format(new 
java.sql.Date(System.currentTimeMillis())); 
     
    SimpleDateFormat Minute = new 
SimpleDateFormat("mm"); 
    String Mt = Minute.format(new 
java.sql.Date(System.currentTimeMillis())); 
     
    SimpleDateFormat Hour2; 
    String Hr2; 
    SimpleDateFormat Minute2; 
    String Mt2; 
    try 
    { 
     while(true) 
     { 
      Thread.sleep(1000*60);  
//睡一分，為了校正整點時間  
      Hour2 = new 
SimpleDateFormat("HH"); 
      Hr2 = Hour.format(new 
java.sql.Date(System.currentTimeMillis())); 
      Minute2 = new 
SimpleDateFormat("mm");  
      Mt2 = Minute2.format(new 
java.sql.Date(System.currentTimeMillis())); 
      if(!Hr.equals(Hr2) && 
Mt2.equals("00")) 
      { 
       break; 
      } 
     } 
    } 
    catch(Exception ss) 
    { 
  
74 
4. Sensor Node Simulator 
基於設備與資源有限，無法獲得多組 Sensor Node 用以架設多個
Sensor Network，因此藉由 Sensor Node simulator 模擬多組獨立 Sensor 
Network 所獲得之資料，此於系統測試時使用。 
4.1 檔案名稱的格式(File Name Format) 
z 電腦名稱_西元年-月-日_小時 
 電腦名稱：使用此 Packet Generator 的電腦。 
 西元年：四位數表示 e.g.2008 
 月：2 位數表示 e.g. 01、02………12。 
 日：2 位數表示 e.g. 01、02………31。 
 小時：24 小時制  e.g. 01、02………24。 
4.2 封包產生器(Packet Generator) 
z 封包格式 
 前 7 bytes 固定為 7E 00 11 7D 11 00 00。 
 第 8 是 00~07 表示 node 0 ~ 7 
(假設目前系統只有 8 個 nodes)。 
  
76 
#include "Unit1.h" 
#include <stdio.h> 
#include <time.h> 
#pragma package(smart_init) 
#pragma link "trayicon" 
#pragma resource "*.dfm" 
TForm1 *Form1; 
 
String Frnot_byte, Nine_th = 
"00",Eleven_th,fifteen,sixteen; 
String Twelve_th = " 00 00",Sensor_byte;  
/*sensor_byte includes 15~16 byte*/ 
String data=""; 
int node_count[8]={0,0,0,0,0,0,0,0}; /*for pc1*/ 
int scope,random_scope,sn=0; 
 
struct node_info 
{ 
  String node_no; 
  String seq; 
}; 
 
//----------------------------------------------- 
 
String ToGetFileName() 
{ 
time_t rawtime; 
struct tm * timeinfo; 
        time (&rawtime); 
        timeinfo = localtime(&rawtime); 
 
String date="",year="",month="",day="",hour=""; 
 
        year = IntToStr(timeinfo->tm_year+1900); 
        month = IntToStr(timeinfo->tm_mon+1); 
        day = IntToStr(timeinfo->tm_mday); 
 
        hour = IntToStr(timeinfo->tm_hour); 
       // minute = IntToStr(timeinfo->tm_min); 
 
        if(month.ToInt()<10) 
  
78 
ListBox1->Items->LoadFromFile(OpenDialog1->FileNa
me); 
} 
 
//----------------------------------------------- 
 
void __fastcall TForm1::BitBtn1Click(TObject 
*Sender) 
{ 
        Frnot_byte = Edit3->Text; 
        Sensor_byte = Edit2->Text; 
        Eleven_th = Edit4->Text; 
        scope = StrToInt(Edit1->Text); 
        random_scope = StrToInt(ComboBoxEx1->Text); 
        Timer1->Interval = 
Edit5->Text.ToInt()*1000; 
 
        ShowMessage("Save successfully !!"); 
} 
 
//----------------------------------------------- 
 
void __fastcall TForm1::BitBtn2Click(TObject 
*Sender) 
{ 
        Edit1->Text = "8"; 
        scope = StrToInt(Edit1->Text); 
 
        Edit2->Text = "00 00 00 00 00 00"; 
        Sensor_byte = Edit2->Text; 
 
        Edit3->Text = "7E 00 11 7D 11 00 00"; 
        Frnot_byte = Edit3->Text; 
 
        Edit4->Text = "00"; 
        Eleven_th = Edit4->Text; 
 
        Edit5->Text = 2; 
        Edit6->Text = "B"; 
 
        ComboBoxEx1->Text = "256"; 
  
80 
            FileName = FileName + "-" + minute + "-" 
+seconds; 
        } 
 
        FileName = PC_Name + FileName + ".txt"; 
 
        srand((unsigned) time(&t)); 
 
        for(int i=0;i<scope;i++) 
        { 
           data =  IntToHex(rand()%random_scope,2);  
 
//資料的部份以亂數產生 
 
           data = " " + data + " "; 
 
//----------------------------------------------- 
 
           while(1)   
 
//確定每個 sensor都有 send封包沒有重複 
 
           { 
               temp = rand()%scope; 
               if(random_recode[temp]<0) 
               { 
                   random_recode[temp]=1; 
                   break; 
               } 
           } 
 
//----------------------------------------------- 
 
           my_node.node_no = IntToHex(temp,2);  
 
//sensor 的編號 fifteen,sixteen 
 
           if(my_node.node_no==IntToHex(0,2))  
 
//sensor 0的 seq_no永遠為 00 
  
82 
fprintf(fp,"%s\n",ListBox1->Items->Strings[i].c_s
tr()); 
 
        fclose(fp); 
 
} 
 
//----------------------------------------------- 
 
void __fastcall TForm1::BitBtn3Click(TObject 
*Sender) 
{ 
        Timer1->Enabled = false; 
} 
 
//----------------------------------------------- 
 
void __fastcall TForm1::BitBtn4Click(TObject 
*Sender) 
{ 
        Timer1->Enabled = true; 
} 
 
//----------------------------------------------- 
  
 java net.tinyos.tools.Listen ，可看到 raw data。 
 
圖表 35 
z 用 Cygwin 鍵入指令 
java net.tinyos.surge.MainClass <GroupId>  
GroupId 預設為 125，即可跑出 Sensor 連線示意圖 
 
圖表 36 
 
84 
  
圖表 38 
2. 系 統 Demo – Mobile Agent Aglet 
Subsystem 
z 分析端開啟 TaHiTi，準備收 Aglet 
 
圖表 39 
z 收到從資料端來的 AgletA 和 AgletB 
 
86 
  
圖表 42 
z 封包產生器的設定畫面： 
其中 simulation 包含 sensor number、data byte 亂數產生的範圍、
產生檔案的時間、電腦名稱…等欄位。Packet format 則是設定封包中
特定 byte 的格式。 
 
88 
  
90 
的重要因素，此為潛在危機之一。另外，Sensor Network 之所有資訊
對外傳遞均須透過 Sensor Gateway以有線網路與 IP-Based Network相
互連結。當此 Sensor Gateway 之地理環境為處偏遠地區或是人煙較少
之特殊地點時，一旦有線網路上存在任一破壞導或障礙，將可能會導
是 Sensor Network 的訊息無法順利傳遞，此為潛在危機之二。 
因此本系統針對以上這兩種危機加以設計，引用 Mobile agent 
network 的特性改善了這些問題。目前已知比較好的 Mobile agent 
network為 IBM Aglet，然而Aglet的設計使得系統效能並不是很優良，
當資料量大時可能會遭遇瓶頸的狀態。未來可能的研究將會是改善
Mobile agent network 的效能與架構，以及在 Sensor network 與 Mobile 
agent network 間建置更為完善之中介軟體 Middleware。 
  
  
92 
80–90, 1999. 
[11] Fuggeta, A. Picco, G. P., Vigna, G, “Understanding code mobility,” 
IEEE Transactions on software Engineering, 24(5), pp. 346-361, 
1998. 
[12] G.Mergen, Q. Zhao, and L.Tong, “Sensor networks with mobile 
agents: Energy and capacity considerations,” IEEE Journal on 
Selected Areas in Communications, July 2003. 
[13] Gavalas, D., Greenwood, D., Ghanbari, M., O’Mahony, M., “An 
Infrastructure for Distributed and Dynamic Network Management 
based on Mobile Agent technology,” Proceedings of the IEEE 
International Conference on communications (ICC’99), pp. 
1362-1366, 1999. 
[14] Gavalas, D., Greenwood, D., Ghanbari, M., O’Mahony, M., 
“Advanced network monitoring applications based on 
mobile/intelligent agent technology,” Computer Communications, 
vol. 23, pp. 720-730, 2000. 
[15] H. Qi, S. S. Iyengar, and K. Chakrabarty, “Multiresolution data 
integration using mobile agents in distributed sensor networks,” 
IEEE Transactions on SMC: C, 2000. 
[16] Hairong Qi, Xiaoling Wang, S. Sitharama Iyengar, Krishnendu 
Chakrabarty, "Multisensor Data Fusion in Distributed Sensor 
Networks Using Mobile Agents," Proc. Intl. Conf. Information 
Fusion, pages 11-16, August 2001. 
[17] Hamid Gharavi, Sikantap. Kumar, “Special Issue on Sensor 
Networks and Applications,” Proceedings of the IEEE, Vol. 91, No. 
8, pp.1151-1153, August 2003. 
[18] IBM Company, Aglet, http://www.trl.ibm.com/aglets 
  
94 
Proc. IEEE INFOCOM＇96, Fifteenth Annual Joint Conference of 
the IEEE Computer Societies. Networking the Next Generation, 
pp.464-472, 1996. 
[27] Milojicic, D., Breugst, M., Busse, I., Campbell, J., Covaci, S. 
Friedman, B., Kosaka, K., Lange, D. Ono, K., Oshima, M., Tham, C., 
Virdhagriswaran, S., White, J., “MASIF: The OMG Mobile Agent 
System Interoperability Facility,” Second International Workshop, 
(MA’98), Lecture Notes in Computer Science 1477, Springer, pp. 
50-67, 1998. 
[28] P. Dasgupta, N. Narasimhan, L. E. Moser, and P. M. Melliar-Smith. 
Magnet, “Mobile agents for networked electronic trading,” IEEE 
Transactions on Knowledge and Data Engineering, vol. 11, no. 4, 
pp.509–525, 1999. 
[29] Papaioannou, T., Edwards, J., “Using mobile agents to improve the 
alignment between manufacturing and its IT support systems,” 
Robotics and Autonomous system, vol. 27, pp.45-57, 1999. 
[30] Rabelo, R., Luis M. Crmarinha-Matos, Hamideh Afsarmanesh, 
“Multiagent perspectives to agile scheduling,” L.M. Intelligent 
Systems for Manufacturing: Multi-agent Systems and Virtual 
Enterprises, (Kluwer Academic Publishers, Dordrecht), pp.51-66, 
1998. 
[31] S. Shamai(Shitz) and A. D. Wyner, “Information-theoretic 
considerations for symmetric cellular, multipleaccess fading 
channels–Parts I and II,” IEEE Trans. Inform. Theory, vol. 43, no. 6, 
pp. 1877–1911, Nov. 1997. 
[32] T. Oates, M. V. N. Prasad, and V. R. Lesser, “Cooperative 
information-gathering: a distributed problem solving approach,” IEE 
