 1
摘要 
內嵌 CPU以及 SRAM，控制邏輯電路等的 SoC整合系統，因為複雜度增加，當經過邏
輯設計、模擬、合成、並且通過晶片繞線後模擬軟體的驗證，而將組態檔案下載到 FPGA晶
片並且規劃完成時，有時候並不能夠完全符合設計上的規格需求，這時就需要晶片內建型除
錯器的幫忙，才能夠找出問題發生的所在。 
晶片內建型的萬用除錯器(On Chip Debugger)是暫時為了 SoC系統除錯而共同合成於同
一顆 FPGA晶片上，一旦完成除錯任務後，就不再需要此萬用除錯器，而必須由應用系統中
移除，因此這個萬用除錯器不可以耗損太多的 FPGA晶片資源，然而為了能夠加深萬用除錯
器的追蹤資料的儲存容量，就需要一個能夠即時的追蹤資料之壓縮技術，來幫助 FPGA-based
內嵌 CPU之 SoC數位邏輯系統的除錯功能。 
本計劃提出一個能夠即時的處理除錯器之追蹤資料序列的壓縮技術，此即時壓縮器的資
料壓縮速度非但能夠與除錯器的追蹤取樣時脈同步，而且只佔用極少量的系統面積資料，卻
可以達成很高的資料壓縮比率。還有，經由參數化的 HDL 設計模組，使得此資料追蹤除錯
器的資料拾取通道數目與資料壓縮器的記憶體結構，可以彈性化調整，以匹配各種不同的除
錯器之資料追蹤需求。 
關鍵字：除錯器，資料壓縮，現場可編程數位晶片 (FPGA)。 
ABSTRACT 
Embedding RISC and DSP cores, busses, and peripheral devices presents a new challenge to 
the FPGA debugger design philosophy. Although the reconfigurable on chip logic 
analyzer/debugger are designed and proved to be very effectively, but it is suffer from limited 
tracer data storage space available. Because the FPGAs are always lack of build-in SRAM, which 
lead to shorter trace data memory depth, so it is needed to develop some real-time data compressor 
for increasing the memory usage. With the real-time data compressor developed by us, we can 
enlarge trace data memory depth and make such Universal in Circuit Debugger with Real Time 
Compressor more powerful for SoC system debugger.  
The proposed tracer data compressor can not only synchronous with the tracer sampling clock 
rate, but also need less synthesized FPGA chip area. The compression ratio of such tracer data 
compressor is very high above 100 with respect to the tracer data channel arrangement. By the 
parametric HDL module design, we can reconfigure flexible tracer data channel and data storage 
structure in order to match different system requirement. 
Keyword：On Chip Debugger, Data Compression, FPGA 
1. 計畫的緣由與目的 
本研究小組曾提出「攜帶式 USB介面邏輯分析儀」，並獲得國科會 NSC 91－2815－C
－168－002－E之研究補助，在研發製作的過程中，發現由於內嵌 CPU以及 Block SRAM，
控制邏輯電路等的 SoC整合系統，雖然得以設計並研製出 FPGA-based的高精密度、高性能
之應用系統，但是當經過 HDL設計、模擬、合成、並且驗證完成後，下載組態檔案到 FPGA
晶片且規劃完成時，系統的性能有時並不能夠完全符合設計上的規格需求，這時就需要晶片
內建型量測儀器的幫忙，才能夠找出發生問題的所在，雖然本研究小組也曾提出晶片內建型
 3
要想達成少量的 FPGA晶片資源的利用，以便建立起「用完即丟」的晶片內建型的萬用
除錯器(In Circuit Debugger)的系統設計演算技術，最重要的關鍵技術乃在於 Block SRAM的
使用量，以 16-bit的 debug channel來說，晶片內建之 256×16的 block SRAM就只能儲存 256
筆的取樣追蹤資料(tracer data)，因此要是能夠找出 tracer data的特性，並且設計出即時的壓
縮技術，那麼同樣的 256×16的 block SRAM，就可能在壓縮比 50%的幫助下，能夠儲存到兩
倍記憶體容量的 512筆的取樣追蹤資料。 
目前的資料壓縮技術約有數種[2,3,4,5]，雖然這些壓縮演算技術，大約都可以達成 85%
以上的壓縮比，但是在測試系統中，當進行壓縮資料的階段時，大都是採用 off-line 的壓縮
技術，也就是說壓縮資料時並未考慮到壓縮進行時所需要的演算時間，只有在資料解壓縮的
階段，才會考慮進行 on-line的硬體解壓縮設計；至於需要同時具備壓縮與解壓縮器的 Cache 
Memory控制器，主要目的乃在於「cache memory」與「main memory」間能夠進行更快速的
資料存取，因此就需要一個快速壓縮器，來將 Cache Memory資料先進行壓縮後，再儲存回
「main memory」，另外也需要一個快速解壓縮器，負責處理「main memory」內壓縮資料的
讀出，直接進行解壓縮後，再存入到「cache memory」的，雖然同時具備壓縮與解壓縮處理
的快速演算法，然而仍然達不到即時(real time)處理[3]。總而言之，解壓縮資料大致上都能
夠 on-line即時進行，而即時的 on-line資料壓縮的硬體演算法與 FPGA的實現驗證，則仍有
研究開發的必要性，尤其是即時追蹤資料的壓縮與資料儲存技術，將是延伸資料記憶體的深
度之關鍵技術。 
2. 研究方法及成果 
本計劃預計由現有的各種壓縮演算法出發，探討並統計出 SoC 系統之測試追蹤資料的
特性，修正或創新出一種可以硬體合成的壓縮器演算法，設計最有效率的 FPGA-Based壓縮
器等三個研究方向出發。 
SoC晶片系統中，因為包括有 CPU、記憶體、平行處理控制器、以及周邊介面控制器等，
因此整個系統的功能測試與除錯階段，除了必須要解決因為邏輯閘(logic gate)的延遲效應誤
差(delay fault)而造成組合邏輯狀態變遷時的尖波雜訊(Glitch)之產生問題、邏輯狀態卡死 
(Stuck at logic state fault)現象，以及有限狀態機(FSM) 的狀態變遷錯誤外，還需要能夠追蹤
出 CPU 程式執行的流程(flow chart)與周邊邏輯電路的信號時序匹配問題所造成的錯誤動
作，才能夠有效的發現問題並且順利的達成除錯。 
尖波雜訊、卡死現象、FSM狀態、以及 CPU執行程式的位址等邏輯信號，在除錯器的
追蹤下，這些串流資料群中必然會使前、後兩筆資料間存在著許多重複出現的資料 bit，利
用這個兩相鄰資料會出現很高的相似度之特點，我們提出了兩階段式的除錯資料壓縮技術，
以及兩種資料追蹤取樣速度下的資料壓縮演算法，以便得到較高的除錯資料壓縮比率。 
圖 4 為本計畫提出的高壓縮比率之追蹤資料即時壓縮的處理流程，在粗估(coarse)處理
階段，先將會連續重複出現的串流追蹤資料，應用計數器統計重複發生的資料串，並且記錄
於壓縮資料的衍生空間內；在細調(fine)處理階段，則利用兩相鄰資料會出現很高的相似度
之特點，估計並濾除出 MSB部分有重複的 bit，或是 LSB部分有重複的 bit；這個細調階段
的壓縮處理，又分成固定長度(fixed length)資料壓縮的全速取樣(full speed)處理法，以及可變
長度(variable length)的全速資料處理法。 
粗估階段進行的資料壓縮，著眼點乃在於每一筆的追蹤資料間會出現整筆資料重複的機
率，重複資料合併壓縮後的每一筆追蹤資料，由於彼此間仍然會存在著某些共同點，例如某
些 bit會重複的出現而造成前、後筆的追蹤資料間就只會有少數的 bit發生邏輯變化，藉由此
種特性就提供出足夠的資訊來再進一步的進行每筆資料的細調(fine)壓縮演算法則。 
當內嵌除錯器開始追蹤並拾取資料的動作後，首先要設定一筆的初始值，做為整個細調
資料壓縮程序的參考指標數據，然後取得的第一筆資料就成為圖 7 所示之 Tracer data1，此
資料要先與 Initial Data相比較而演算出兩筆資料間MSB中會有 C01個 bit是完全重複的，
此時就整併此 C01與 Tracer data1內濾除相同的MSB後剩下之 LSB資料 D01，成為新的追
蹤資料；如此類推，因而得到不定長度的串流壓縮資料，以圖 8之 32-bit位址資料追蹤資料
來說，兩相鄰資料的MSB重複出現數都高達 27bit以上，因而可以將 32-bit的追蹤拾取資料
縮編成 10-bit以內。 
Tracer Data1 Tracer Data2 Tracer Data3
XOR
 MSBC0
XOR
 MSBC0
c12 D12 c23 D23
Variable length
data
Initial Data
XOR
 MSBC0
c01 D01
 
圖 7 
 
圖 8 
當晶片內嵌除錯器/邏輯狀態追蹤器的取樣速度必須被要求一定要同步於待測電路時，
擔任即時壓縮演算器的電路就必須在取樣時脈內完成該筆資料的壓縮且儲存到記憶體內之
工作，所以不定長度之壓縮處理必須轉換成固定長度的資料，才能夠以組合邏輯電路來完成
同步壓縮處理電路設計。 
為了要能夠快速的即時將固定長度資料串儲存到記憶體中，本計畫提出圖 9的壓縮記憶
體(Compressed memory)、無壓縮記憶體( Uncompressed memory)、以及 1-bit 壓縮記號
(Compression marker)的除錯器之記憶體安排架構，並且配合固定長度資料的演算機制，就達
成即時壓縮並記錄除錯器的串流追蹤資料到記憶體內之任務。解壓縮圖八的壓縮資料的電路
設計，因為少了即時解壓縮的條件，因此解壓縮並恢復成原本的追蹤資料，可以輕易的設計
出來。 
可變寬度的壓縮資料 C01D01, C12D12…等，如果少或等於 16-bit，就補足到 16-bit寬度
並且儲存到壓縮記憶體區，並且在該筆資料所處順序位置的 1-bit 壓縮記號記憶體之相對位
址上儲存入’1’記號；否則就將未經過壓縮的原資料儲存到無壓縮記憶體區內，並且在該筆資
料所處順序位置的 1-bit 壓縮記號記憶體之相對位址上儲存入’0’記號。當壓縮資料被固定於
16-bit時，以 32-bit的追蹤資料寬度來說，壓縮比當在 50%以上；如果採用 24-bit的固定壓
縮資料寬度，那麼追蹤資料中會被壓縮的機率將會增加，不過選擇這種 24-bit的固定寬度壓
縮，資料壓縮比當在 75%以上。 
 5
 7
3. 結論與討論 
本專題研究計畫提出一套即時晶片內建型的萬用除錯器的追蹤資料壓縮器，資料壓縮比
率可以高達數十倍以上，而且資料壓縮器所佔用的晶片面積很小。 
在第一階段的 counter-based coarse壓縮演算下，如以 8-bit計數器擔任壓縮計數器，最
大可以達成 255倍的壓縮率。對於可以全速執行的 fine即時資料壓縮器，經由固定長度記憶
體的安排，在兩相鄰追蹤資料的MSB出現相同 bit的機率越高下，所得到的壓縮比率越高；
當採取可變資料長度之較低速的追蹤取樣速度時，因為 FIFO Ring Buffer可變長度資料的進
出與固定寬度記憶體安排，更能夠節省追蹤記憶體的使用量，因而大大提昇資料的壓縮比率。 
本專題研究計畫的部分成果，已有二篇發表於國內研討會(2006 第四屆微電子技術發展
與應用研討會，高雄海大)，及二篇國際研討會 accepted by IEEE TECON2006 conference 
(EI)，與 ISOCC2006 in Seoul。 
本研究群的相關研究結果，95年於 Eurasip JASP期刊發表一篇論文(EI)，95 年已發表 
IEEE TECON2006 會議論文 2 篇，以及 IEEE ISOCC2006 會議論文 1 篇，94 年發表 IEEE 
TECON’2005 會議論文 1 篇(EI)，93 年發表 IEEE APCCAS2004 會議論文 2 篇(EI)及 IEEE 
TECON2004會議論文 1篇(EI)。目前並有兩篇 IEEE期刊論文已經投稿中。一個發明專利申
請中。 
4. 參考文獻 
[1]. Guo-Ruey Tsai, Min-Chuan Lin, Wen-Zong Tung, Kai-Chu Chuang, Sung-Yu Chan, (2003), 
“An Universal Debugger for Embedded SoPC Development”, 2003 International conference 
on Informatics, Cybernetics and Systems, I-Shou, ROC., pp84-89. 
[2]. Farzin Karimi, Zainalabedin Navabi, Waleed M. Meleis, Fabrizio Lombardi, (2004),“Using 
Data Compression in Automatic Test Equipment for System-on-Chip Testing”, IEEE Trans. 
on Instrumentation & Measurement, Vol. 53, No. 2, pp308-317. 
[3]. Luca Benini, Davide Bruni, Alberto Macii, Enrico Macii, (2004), “Memory Energy 
Minimization by Data Compression: Algorithm, Architectures and Implementation”, IEEE 
Trans. on VLSI System, Vol. 12, No. 3, pp255-268. 
[4]. Eric E. Johnson, Jiheng Ha, M. Baqar Zaidi, (2001), “Lossless Trace Compression”, IEEE 
Trans. on Computers, Vol.50, No.2, pp158-173.   
[5]. D. A. Huffmann, (1952), “A Method for construction of minimum redundancy codes”, Proc. 
IRE, Vol.40, No.9, pp1098-1101. 
[6]. J. Ziv, A. Lempel, (1978), “Compression of individual sequences via variable coding”, 
IEEE Trans. Inform. Theory, Vol. 24, pp530-536. 
 
 
 
 
