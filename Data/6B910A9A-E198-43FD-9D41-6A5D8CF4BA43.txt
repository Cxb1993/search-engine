 2 
 
Abstract 
In this report, we first propose a password authentication scheme that has the 
following engaging properties. (1) This system is fair to users, meaning that when a user 
provides a password that is unable to pass the authentication, the system is capable of taking a 
step ahead to detect and determine the real cause of the authentication failure, whether it was 
the user’s own problem or that the authentication files had already been tampered or damaged 
with. (2) Each time a user login a distinct password is dynamically created, thus being able to 
resist replay attacks and keylogger attacks. (3) System administrators are unable to obtain or 
compute the users’ dynamic passwords. (4) The security is based on quadratic residue theorem 
has properties such as low computation, is unafraid of the exposure of authentication files, 
and attackers are incapable of adding legitimate authentication records by themselves, plus 
our system is  capable of resisting off- line guessing attacks. (5) The user can choose his 
password freely during registration, and is able to modify his password any time once he  
become legitimate users. 
In addition, based upon using the RNS (Residue Number System) representation of 
integers to produce a linear ordering of the records, this report propose a new multi-disk data 
allocation method (called the RNS allocation method) to distribute a set of multi-attribute 
records onto multiple disks.  It is shown that the RNS allocation method is perfectly optimal 
for partial match retrieval under certain conditions.  Accordingly, the RNS allocation method 
can serve as a perfectly optimal declustering scheme as well.  Further, it is pointed out that 
the RNS method is also suitable for parallel nearest neighbor searching 
 
Keywords: password authentication, fair password authentication, dynamic password 
authentication, error detection, error correction, multi-disk data allocation, perfectly optimal 
performance, heuristic solution. 
 
I. A Fair and Dynamic Password Authentication System 
I.1 Introduction 
       In the world of nowadays network, many systems have already applied complicated 
code systems or protocols to protect the safety of the system itself or the security of 
communications between systems. However, passwords are still the most common and main 
ways to authenticate legal users or clients in many multi-user systems and public 
decentralized client/server network servers. Therefore, regardless of overseas or not, there are 
still many scholars and professionals devoted to developing a more convenient, efficient, and 
safe password authentication system (abbreviated as PAS) [1-15]. 
       Normally in a PAS system, each registered user must provide a set (ident ification ID, 
password Pw) for the system to determine the legitimacy of the user according to the 
 4 
 
the quadratic residue mod n, notated as na QRÎ . Otherwise, a is called the quadratic 
nonresidue mod n, notated as na QNRÎ . If n p q= ´ , p and q are distinct prime numbers, 
then ( ){ }*nZ a 0 a n, a,n 1= < < = 00 01 10 11Q Q Q Q= U U U  (exclusion union), among which 
00 p qQ QR QR= I , 01 p qQ QR QNR= I , 10 p qQ QNR QR= I , and 11 p qQ QNR QNR= I . 
       According to the quadratic residue theorem, we can prove (1) 00 na Q a QRÎ Û Î . 
(2) nab QR aÎ Û  and b belong to the same ijQ . Additionally, assume we have 
( )p 7 mod 8º  and ( )q 3 mod 8º , then we can prove that 001 QÎ  , 012 QÎ , 102 Q- Î , 
and 111 Q- Î . Therefore, if we set 00 01 10 11c 1, c 2, c 2, c 1 = = = - = - , then for any aÎ
*
nZ , 
there must exist a ijc  such that ij nc a QR´ Î . Besides, since p q 3º º ?mod 4? is satisfied, 
n is also a Blum integer. So for any na QRÎ , we conclude that ( )2x a mod nº  must have a 
solution (termed as the square root mod n of a) belonging to 00Q . 
       Let n p q= ´ , p and q are distinct prime numbers, and na QRÎ , then we can prove 
that it is impossible to calculate any square root mod n of a in polynomial time if we do not 
know the values of p and q. 
 
I.3 A Fair and Dynamic Password Authentication System 
       Our password authentication system can be separated into six phases: Initialization 
phase, registration phase, log in phase, authentication phase, password replacement phase, and 
log out phase. We will explain these six phases in detail and lastly describe the methods to log 
in when using smart cards. 
 
Initialization Phase: 
       The system must execute the following in the initialization phase: 
  (1) Select two strong prime numbers p and q such that ( )p 7 mod 8º  and 
     ( )q 3 mod 8º . 
  (2) Calculate n p q= ´ ; n is the public parameter, p and q are the secret parameters. 
  (3) Choose an irreversible hash function h (for example SHA-1). 
 
Registration Phase: 
       Each user U must do the following in this phase: 
 6 
 
       Let ( ID , rpw ) be the account and password the user provided to request log in. The 
system will perform the following procedures during the authentication phase: 
  (1) The system will first check the account ID  the user provided. If this ID  
     matches a certain legitimate user ID in the authentication table, then the system 
     extracts the corresponding authentication record (ID, un , S, ijc , w , ' 'i jc , 
     'w ), and continue the following steps of authentication; otherwise we deny 
this request to log in. 
  (2) According to the dynamic password rpw  the system receives, it calculates 
     ( ) ( )
S 12
r upw pw mod n
+
= . 
  (3) Compute ( )x h ID pw= P . 
  (4) Calculate z , z  is the square root mod n of ijc x´  in 00Q , and also 
     determine the value ( )w h z= . 
  (5) Find out whether or not w w=  is satisfied: 
     If it is, then update the user’s record (ID, un , S, ijc , w , ' 'i jc , 
'w ) as 
     follows: 
S¬ S+1; 
     ' 'i jc ¬ ' 'i jc  such that ' ' ni jc y QR´ Î , in which ( )u ijy h ID n S c w= P P P P ; 
     'w ¬ the square root mod n of ' 'i jc y´  in 00Q ; 
     Then the system accepts the user’s request to log in, terminating the 
     authentication process 
     If not, then continue with the following procedures. 
  (6) Calculate ( )u ijy ' h ID n S c w= P P P P . 
  (7) Extract ' 'i jc  and 
'w  from the authentication record, and then determine 
     whether ( ) ( )2 i ' j 'w ' c y ' mod nº ´  is satisfied or not: 
If it is, then deny the user’s request to log in. 
 8 
 
~ (5)), if the value of w  calculated from rpw  is identical to w which is calculated from Pw 
using the authentication record (ID, un , S, ijc , w , ' 'i jc , 
'w ), meaning that pw pw= , 
then the user is legitimate. Otherwise, if the authentication record in step 2 (which is also 
authentication phases (6) ~ (7)) satisfies 
( ) ( )2 i ' j 'w ' c y ' mod nº ´ = ' 'i jc ´ ( )u ijh ID n S c wP P P P ( )mod n , then it is implied that the 
entries in the authentication record is intact. Therefore w w¹  indicates that pw pw¹  in 
step 1, which means that is user is illegal. However, if 
( ) ( )2 i ' j 'w ' c y ' mod nº ´ = ' 'i jc ´ ( )u ijh ID n S c wP P P P ( )mod n  is not satisfied in step 2, 
then it represents that certain entries in the authentication record have been tampered with and 
are damaged. The system is unable to determine whether the user is legal or not, so it will 
sends signals to inform the system administrators and repairers. Thus it is clear that our 
authentication system is indeed “fair”, and is capable of protecting the rights of users. 
 
I.4.2 Security Analysis 
       1. It is capable to resist stolen-verifier attacks: Even if the attackers are able to 
acquire the authentication records (ID, un , S, ijc , w , ' 'i jc , 
'w ) of legitimate users, they 
are still incapable to find Pw because of the properties of irreversible hash functions. Even if 
Pw is figured out, they are still unable to work out rpw , because the square root mod un  
can not be calculated without knowing the values up  and uq  of the user. This will ensure 
that stolen-verifier attacks from attackers are unsuccessful. 
       2. Intruders are unable to add legitimate authentication records by themselves: As 
long as the system does not give publicity to the values of p and q, the attackers can not 
calculate the square root mod n. Even if an intruder successfully invades the system and 
obtains the authentication files, they are still incapable of adding legitimate authentication 
records by themselves. This is because they are unable to calculate the square root mod n of 
ijc x´  and ' 'i jc y´  in the authentication phases (2) and (5). 
       3. The system administrator is unable to obtain the user’s dynamic password rpw : 
Since the system administrator is also unaware of the values up  and uq  of the user, he can 
not find out or calculate the user’s dynamic password rpw . 
 10 
 
     able to resist replay attacks and keylogger attacks. 
  (2) System administrators are unable to obtain or compute the users’ dynamic 
     passwords. 
  (3) The security is based on quadratic residue theorem has properties such as low 
     computation, is unafraid of the exposure of authentication files, and attackers 
     are incapable of adding legitimate authentication records by themselves, plus 
     our system is capable of resisting off- line guessing attacks. 
  (4) The process of authentication is simple and fast, so the user can complete 
     authentication simply by showing the password without the necessity to interact 
     with the system. 
  (5) The user can choose his password freely during registration, and is able to 
     modify his password any time once he become legitimate users. 
  (6) Users can use smart cards to save to calculate their passwords, increasing 
     convenience and security.  
 
Reference 
[1]  C. C. Chang, Y. F. Chang, “Yet Another Attack on a Password Authentication System,” 
Proc. of 18th International Conference on Advanced Information Networkingand 
Application, vol. 2, pp. 170-173, 2004. 
[2] L. Harn, “A Public-Key Based Dynamic Password Scheme,” Proceedings of the 
Symposium on Applied Computing, pp. 430-435, 1991. 
[3] M. S. Hwang and L. H. Li, “A New Remote User Authentication Scheme Using Smart 
Cards,” IEEE Transactions on Consumer Electronics, vol. 46, no. 1, pp. 28-30, 2000. 
[4] T. Y. Hwang, “ Passwords Authentication Using Public-Key Encryption,”  Proc. of  
international  Carnahan Conference on Security Technology, pp. 35-38, 1983. 
[5] C. S. Laih, L. Harn, and D. Huang,  “Password Authentication Using Quadratic 
Residues,” Proceedings of International Computer Symposium 1988, Taipei, Taiwan, 
R.O.C., December 1988, pp. 1478-1483. 
[6] L. Lamport, “Password Authentication with Insecure Communication,” Communications 
of ACM, vol. 24, pp. 770-772, 1981. 
[7] R. E. Lennon, S. M. Matyas and  C. H. Meyer, “ Cryptographic Authentication of Time 
Invariant quantities”,  IEEE Trans. Communications. Vol. 29, No. 6, pp. 773-777, 1981. 
[8] K. C. Leung, L. M. Cheng, A. S. Fong and C. K. Chen, “Cryptanalysis of a remote user 
authentication scheme using smart cards”, IEEE Trans. Consumer Electronic, vol. 49, no. 
3, pp. 1243-1245, 2003. 
[9] C.L. Lin, H.M. Sun, and T. Hwang, “Attacks and solutions on strong-password 
authentication,” IEICE Trans. Communication., vol.E84-B, no.9, pp.2622–2627, 2001. 
[10] C. W. Lin, J. J. Shen and M. S. Hwang, “Security enhancement for Optimal 
Strong-Password Authentication Protocol,” Operating system Review, 37(2): 7-12 , 2003. 
 12 
 
future research problems are given in Section 5. 
 
II.2 The Relationship between Deculstering Problem and Multidisk Data Allocation 
Problem  
II.2.1 The Multidisk Data Allocation Problem 
       The multidisk data allocation problem for partial match retrieval was first proposed 
by Du and Sobolewski [12] in 1982 and studied subsequently by many researchers 
[1-14,18-19,21].  It can be formally stated as follows [5-6,12,14]: 
       We are given a set of N-attribute records, 1N ³ , and an m-disk system, 2m ³ , our 
job is to allocate the records among the m disks in such a way that the average response time, 
over all possible partial match queries, is minimized (i.e., the disk access concurrency is 
maximized). 
       By an N-attribute record (data) we mean a record which is characterized by N 
attribute values.  By a partial match query (PMQ), we mean an access specification of the 
form )a,,a,a(q N21 L= , where each ia , Ni1 ££ , is either a specified value belonging to 
the domain Di of the i- th attribute or is “*” which denotes a don’t care condition (i.e., it can be 
any value in Di) [12].  For instance, q=(a, *, b) denotes a PMQ to retrieve the records with 
the first attribute a, the third attribute b, and the second attribute arbitrarily from some set of 
3-attribute records. 
       In the multidisk data allocation problem, it is assumed that the m disks can be 
accessed independently.  Also, it is assumed that the retrieval of one record takes one unit of 
time.  Therefore, the time taken to respond to a query can be simply measured in terms of the 
maximum number of records needed to be accessed on a particular disk.  Accordingly, let 
R(q) denote the set of all qualifying records for a query q.  Then a lower bound to the 
response time of q is é ùm/)q(R , where m is the total number of available disks. 
       Now, let us illustrate the above stated data allocation problem through the following 
small example. 
 
Example 2.1 
       Consider a set of 16 two-attribute records as shown in Table 2.1.  Table 2.2 depict 
two ways of allocating the 16 records onto a 4-disk system.  The response times of all PMQs 
for both allocations are shown in Table 2.3, respectively.  It can be seen that the average 
response time, over all possible PMQs, is 2.5 for the result in Table 2.3(a) and 1 for that in 
Table 2.3(b).  Thus, we may conclude that the way of allocating records in Table 2.2(b) is 
more effective than that in Table 2.2(a). 
 
 
 14 
 
(1,*) 4 1 
(2,*) 4 1 
(3,*) 4 1 
(*,0) 1 1 
(*,1) 1 1 
(*,2) 1 1 
(*,3) 1 1 
 
 
II.2.2 The Equivalence of Multidisk Data Allocation Problem and Declustering Problem 
       It is evident, from Example 2.1, that different ways of allocating records result in 
different average response times.  Since all records qualified by the same PMQ have the 
same specified attribute values, they are similar to each other in the sense that the Hamming 
distance between each pair of records is less than or equal to the number of unspecified 
attributes.  Accordingly, the point behind it is that an allocation method should be good if 
every subset of records that are similar to each other to within distance k, Nk0 ££ , can be 
assigned as uniform as possible to different disks, respectively.  Therefore, an effective 
allocation technique can serve as an effective technique for declustering a set of multiattribute 
data, and vice versa.  For instance, Table 2.2(a) and Table 2.2(b) can be viewed as the results 
of two different ways of declustering the 16 records into 4 different groups.  Obviously, the 
way of declustering records in Table 2.2(b) is more effective. 
 
II.2.3 The Perfectly Optimal Multidisk Data Allocation Problem 
       In the multidisk data allocation problem, an allocation method which minimizes the 
average response time over all possible queries is called an optimal allocation method [12].  
An allocation method that minimizes the response time of each query is called a strictly 
optimal allocation method [12].  In other words, an allocation method is strictly optimal if, 
for any query q, the )q(R  qualifying records are distributed uniformly to the m disks such 
that the work load to each disk is balanced in response to q and whence the lower bound 
é ùm/)q(R  to the response time of q is achieved.   
       Obviously, a strictly optimal allocation method is superior, in terms of response time 
and load-balance performances, to an optimal allocation method.  Nevertheless, it doesn’t 
guarantee that all records should be uniformly allocated among the disks.  As a small 
instance, consider the set of records F={(0,0,0), (0,0,1), (0,1,0), (0,1,1), (1,0,0), (1,0,1), (1,1,0), 
(1,1,1)} and a 5-disk system.  Let us allocate the records onto the disks as follows.  Disk 
0={(0,0,0), (1,1,1)}, Disk 1={(0,0,1}, (1,1,0)), Disk 2={(0,1,0), (1,0,1)}, Disk 3={(0,1,1), 
 16 
 
II.3 The RNS Data Allocation Scheme and Its Optimality Property 
II.3.1 The RNS Data Allocation Scheme  
       Let there be a set of N-attribute records F={ )b,,b,b( N21 L ? 1mb0 ii -££  for 
Ni1 ££ }, where N21 m,,m,m L  are pairwise relatively prime integers.  Let  NB= Õ
=
N
1i
im  
denote the total number of records, and m³ 2 denote the total number of available disks.  
Consider a record ( N21 b,,b,b L ) in F.  Since N21 m,,m,m L  are pairwise relatively prime 
and 0 £ ib £ im -1 for 1 £ i £ N, ( N21 b,,b,b L ) can be served as the unique RNS 
representation [16, Section 4.7] of some integer, denoted as 
N21 bbb
x L , in the range [0,NB] by 
using the set of moduli { N21 m,,m,m L }.  That is ib º N21 bbbx L  (mod im ) for 1£ i £ N.  
And in this way all records in F are aligned into a linearly ordered list according to the order 
of their integer correspondences in [0,NB].  Consider, for illustration, a small case where 
N=3, m1=2, m2=3 and m3=5.  Table 3.1 depicts the one-to-one correspondence between each 
record ( 321 b,b,b ) in F and the corresponding integer 321 bbbx  in [0,30]. 
 
Table 3.1 The 1-1 Correspondence between Integers in [0,30] and Records in F 
Integer 
321 bbb
x  
Record 
( 321 b,b,b ) 
Integer 
321 bbb
x  
Record 
( 321 b,b,b ) 
Integer 
321 bbb
x  
Record 
( 321 b,b,b ) 
0 
1 
2 
3 
4 
5 
6 
7 
8 
9 
(0,0,0) 
(1,1,1) 
(0,2,2) 
(1,0,3) 
(0,1,4) 
(1,2,0) 
(0,0,1) 
(1,1,2) 
(0,2,3) 
(1,0,4) 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
(0,1,0) 
(1,2,1) 
(0,0,2) 
(1,1,3) 
(0,2,4) 
(1,0,0) 
(0,1,1) 
(1,2,2) 
(0,0,3) 
(1,1,4) 
20 
21 
22 
23 
24 
25 
26 
27 
28 
29 
(0,2,0) 
(1,0,1) 
(0,1,2) 
(1,2,3) 
(0,0,4) 
(1,1,0) 
(0,2,1) 
(1,0,2) 
(0,1,3) 
(1,2,4) 
 
       It is interesting to observe, from Table 3.1, that the integer correspondences of all 
qualifying records of any PMQ for F show up periodically in the range [0,30].  For instance, 
consider a PMQ, q=(0,0,*).  Then the records qualified by q consist of (0,0,0), (0,0,1), 
(0,0,2), (0,0,3) and (0,0,4).  The integer correspondences are 0, 6, 12, 18 and 24, respectively,  
 18 
 
N21 bbb
x ¢¢¢ L = N21 bbbx L + 1 implies that N21 bbbi xb ¢¢¢º¢ L º N21 bbbx L + 1º 1b i +  (mod im ) for 
1£ i£ N.                                                  
                                                           Q.E.D. 
 
       Based upon the correspondence properties stated in Theorem 3.1 and Theorem 3.2, in 
the following we shall propose a new data allocation scheme, called the RNS data allocation 
scheme. 
 
Algorithm 3.1 The RNS Data Allocation Scheme 
Input: A set of records F={ )b,,b,b( N21 L ? 1mb0 ii -££  for Ni1 ££ }, where 
N21 m,,m,m L  are pairwise relatively prime; and m disks, m³ 2. 
Output: The allocation of the records in F onto m disks. 
Steps: 1. Compute l  and r such that NB = Õ
=
N
1i
im = ml + r, where mr0 <£ . 
2. Assign each record )b,,b,b( N21 L  in F to  
     disk i if il + i£  
N21 bbb
x L £  ( i+ 1) l + i, for 0 £  i£  r-1; 
       disk j if j l + r £
N21 bbb
x L £  ( j+ 1) l + r-1, for r £  j £  m-1.  (3.1) 
 
If all records ( N21 b,,b,b L ) in F are aligned linearly according to the ascending order of 
N21 bbb
x L , then the RNS allocation scheme assigns the first l + 1 records onto disk 0, the 
second l +1 records onto disk 1, ,L the r-th l +1 records onto disk (r-1), respectively, and 
then takes turns to assigns the next l  records onto disk j for r £  j£ m-1.  Although it needs 
a lot of time to compute 
N21 bbb
x L  from ( N21 b,,b,b L ) when N21 m,,m,m L  are large 
[19, Section 4.3.2]; however, as we have pointed out in Theorem 3.2 that it is easy to 
determine the record ( N21 b,,b,b ¢¢¢ L ) next to a given record ( N21 b,,b,b L ) in the linearly 
ordered list of records by simply finding ib¢ º ib + 1 (mod im ) for 1£ i£ N.  Therefore, 
there is no need in real application to compute the integer correspondences from the records.  
Consequently, the allocation by the RNS scheme in real applications can be easily 
 20 
 
 
Table 3.2  The Assignment of 30 Records among 4 Disks 
  by Using the RNS Allocation Scheme 
Disk 0 Disk 1 Disk 2 Disk 3 
(0,0,0) 
(1,1,1) 
(0,2,2) 
(1,0,3) 
(0,1,4) 
(1,2,0) 
(0,0,1) 
(1,1,2) 
(0,2,3) 
(1,0,4) 
(0,1,0) 
(1,2,1) 
(0,0,2) 
(1,1,3) 
(0,2,4) 
(1,0,0) 
(0,1,1) 
(1,2,2) 
(0,0,3) 
(1,1,4) 
(0,2,0) 
(1,0,1) 
(0,1,2) 
(1,2,3) 
(0,0,4) 
(1,1,0) 
(0,2,1) 
(1,0,2) 
(0,1,3) 
(1,2,4) 
 
 
II.3.2 The Perfect Optimality of the RNS Allocation Scheme  
       It is obvious that all the 30 records are uniformly distributed among 4 disks in Table 
3.2.  It is also easy to check that the allocation is strictly optimal for each PMQ.  
Accordingly, the RNS allocation scheme is perfectly optimal in Example 3.1.  In fact, the 
perfect optimality of the RNS allocation scheme is true in general and can be formally 
established as follows. 
 
Theorem 3.3 
       Let F={ )b,,b,b( N21 L ? 1mb0 ii -££  for Ni1 ££ } be a set of records, where 
N21 m,,m,m L  are pairwise relatively prime.  Let NB =Õ
=
N
1i
im  denote the total number 
of records, and m³ 2 be the total number of available disks.  Then the RNS allocation 
scheme is perfectly optimal for allocating F among m disks. 
proof:  Suppose NB = ml + r, where 0£  r < m, and let in ,  0£  i £  m-1, denote the 
number of records in F that are assigned on disk i by the RNS allocation scheme.  Then, 
according to (3.1), we have 0n = 1n = … = 1rn - = l + 1 and rn = 1rn + = … = 1mn - = l .  
Therefore, all records in F are uniformly distributed among m disks by the RNS scheme. 
       Next, let q be any PMQ, R(q) be the set of all records qualified by q, and p be the 
period of occurrence of the RNS integer correspondences of all records in R(q), where the set 
of used moduli is { N21 m,,m,m L }.  Further, let ia  denote the number of buckets in R(q) 
 22 
 
       Let F={ )b,,b,b( N21 L ? 1mb0 ii -££  for Ni1 ££ }, where N21 m,,m,m L  
are pairwise relatively prime, and let m ³ 2 be an arbitrary integer.  Then the RNS 
declustering scheme is perfectly optimal for dividing all records in F into m different groups. 
 
       In addition, let us call two multiattribute records a pair of k-th nearest neighbors if 
the Hamming distance between the corresponding attributes £ k.  Since the RNS method 
assigns every subset of k-th nearest neighbors uniformly among independently accessible 
disks respectively, we would also like to emphasize here that our method is also suitable for 
parallel nearest neighbor searching. 
 
II.5 Conclusions  
       In this paper, we have concerned with both the declustering problem of multiattribute 
data and the multidisk data allocation problem for partial match retrieval.  We have first 
pointed out that the two problems are in fact equivalent if the similarity between each pair of 
data can be measured in terms of their Hamming distance.  Then, based upon using the 
well-known RNS representation of integers to produce a linear ordering of the data, we have 
proposed a new data allocation scheme, called the RNS allocation scheme.  It has been 
shown that the RNS allocation method guarantees perfectly optimal response time and 
load-balance performance if the domain sizes of all attributes are pairwise relatively prime.  
Further, we have defined a perfectly optimal declustering scheme and modified the RNS 
allocation scheme to give a perfectly optimal declustering scheme. 
       In addition, we have pointed out that the RNS method is also suitable for parallel 
nearest neighbor searching because it assigns every subset of k-th nearest neighbors uniformly 
among independently accessible disks respectively.  
       Finally, how to solve the general multidisk data allocation problem through an 
effective declustering technique, and vice versa, is interesting and challenging.  This remains 
to be one of our future research topics. 
 
References 
[1] K. A. S. Abdel-Ghaffar and A. El. Abbadi, “Optimal Disk Allocation for Partial Match 
Queries,” ACM Trans. Database Systems, vol. 18, no. 1, pp. 132-156, 1993. 
[2] M. Y. Chan, “Multidisk File Design: An Analysis of Folding Buckets to Disks,” BIT, vol. 
24, pp. 262-268, 1984. 
[3] M. Y. Chan, “A Note on Redundant Disk Allocation,” IPL, vol. 20, pp. 121-123, 1985. 
[4] C. C. Chang, “Application of Principal Component Analysis to Multidisk Concurrent 
Accessing,” BIT, vol. 28, pp. 205-214, 1988. 
[5] C. C. Chang and C. Y. Chen, “Gray Code as a Declustering Scheme for Concurrent Disk 
Retrieval,” Information Science and Engineering, vol. 13, no. 2, pp. 177-188, 1987. 
