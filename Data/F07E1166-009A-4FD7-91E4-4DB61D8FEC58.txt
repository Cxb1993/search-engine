 II
中文摘要 
根據英國市調公司 Juniper Research 調查報告“Next Generation Video-Game Consoles”，
預估 2008 年全球遊戲市場整體產值達 350 億美金。而 3D 線上遊戲在近幾年更是成為遊戲
市場中的當紅炸子雞。線上遊戲的架構比起單機遊戲要複雜許多。因此，需要強而有力的
遊戲引擎來作為輔助開發的道具，以增加開發成功的機會。但目前市面上的引擎多半是著
重於功能的加強，如 Unreal，顯少有針對易用性、簡化開發流程和縮短製作時程做研究。
本計劃之成果即是針對上述在開發遊戲專案中容易被人忽視，但卻對整個遊戲專案的成敗
有舉足輕重影響的幾個因素為研究主題。 
本計畫之研究基礎架構於申請人既有之研究成果「3D 遊戲引擎」和「簡化網路互動內
容設計之通用性架構」之上。本成果將透過針對各類型線上遊戲設計的網路傳輸模版，讓
線上遊戲製作更具有彈性；並以 XML 資料驅動為基礎，提出一致化的架構，應用於單機
版與網路版遊戲中，簡化開發時程，讓線上遊戲開發的更容易。 
本計劃成果已提供給本校大學部畢業專題學生在遊戲製作上使用，並藉由網路模版與
一致化的架構，讓開發網路遊戲變的更為容易。另一方面藉由使用者的回饋將可以使得本
研究的成果更趨完整，且更具有說服力，期望在未來將可推廣給更多的人使用，以增加國
家對於數位內容產業的競爭力。 
 
 
關鍵字：線上遊戲、資料驅動、網路模版、3D、遊戲引擎。 
 IV
目錄 
前言.................................................................................................................................................. 1 
研究目的.......................................................................................................................................... 2 
文獻探討.......................................................................................................................................... 3 
資料驅動.................................................................................................................................. 3 
Public/subscriber model 和 Dead-Reckoning 預測機制 ................................................... 4 
遊戲引擎.................................................................................................................................. 5 
結果與討論...................................................................................................................................... 7 
參考文獻........................................................................................................................................ 11 
計畫成果自評................................................................................................................................ 16 
 
 2
研究目的 
數位內容已成為全球重點發展的產業之ㄧ，而我國政府對於此明星產業也是特別注
重；在今年八月初時，行政院正式通過經濟部所提的「強化電腦動畫與數位遊戲輔導措施」，
在未來五年將投入 41 億 2,200 萬元，扶植國內電腦動畫與數位遊戲產業，國發基金預期也
將編列 200 億元，協助促成跨國間的合作案，在未來 2011 年時，國內的數位內容產業的整
體產值預期可以到達 6,000 億元的目標。從國內的產業到學界，政府不遺餘力的鼓勵以及
支持，為的就是希望使我國的動畫以及遊戲產業可以趕上歐、美與日本等國的水準，在全
球市場中可以佔有一席之地[20]。 
數位內容的產值在近幾年持續飆高，寬頻網路的普及以及光纖的問世將使得網路互動
的發展屏障近乎於零，而其中數位遊戲是數位內容中最重要的重點發展項目之ㄧ，其涵蓋
的內容相當普遍，從這一兩年中所推出的次世代遊戲主機(Console Game)、在硬體上不斷增
強的行動遊戲(Mobile Game)、進入新一代雙核心平台的個人電腦(PC Game)以及歷久不衰
的大型機台(Arcade Game)。在上述不同類型的遊戲內容中都有相同的特性，網路化。 
但目前線上遊戲的製作仍然相當困難，各式各樣的線上遊戲的類型，其網路傳輸機制
也皆不相同，在開發上的重點也不一樣，目前市面上遊戲引擎具有網路功能的大多還是針
對單一狀況來做設計，並不支援各類型的線上傳輸方式以及機制，然而線上遊戲最大的價
值是來自於內容的呈現[26]，一個良好的平台結構除了提供良好的執行效率以及功能，另外
在簡化設計上也應具備相當大的彈性，才能使得在開發過程中更專注於內容傳達的意義。 
故本計劃主要針對上述問題希望提出具有彈性、易用性以及再用性的多重網路模版的
3D 線上遊戲引擎。本計劃之研究架構主要是建構於申請人既有之研究成果「3D 遊戲引擎」
以及「簡化網路互動內容設計之通用性架構」[11-14]之上。為針對上述特性而設計，本計
劃分為兩個部份，第一部分為建構網路傳輸機制與既有遊戲引擎作緊密的結合，以提高在
利用遊戲引擎製作網路遊戲的易用性；第二部份為此架構建置各類線上遊戲網路傳輸類型
的樣板，在開發相類似的線上遊戲類型時，可以透過模版的機制，達成快速開發，對於線
上遊戲間些微的差異則是允許使用者透過資料驅動來控制各類型的網路傳輸以增加本引擎
應用在不同情況下的彈性。 
 4
Public/subscriber model 和 Dead-Reckoning 預測機制  
為了讓線上遊戲具延展性(Scalibility)及易開發性(Ease of programming)，許多學者
[23][60][64]基於 Public/subscriber model 來設計網路遊戲的架構。此通訊模型以內容的產出
(Production)及消費 (Consumption)為基礎，不同於 Client/Server 架構中常見的一對一 
(one-to-one) 通訊方式，網路互動的通訊常是相當複雜的一對多 (one-to-many) 或多對多 
(many-to-many)型態，使得程式的設計較為困難，因為必須對應各種不同的關係。 
以內容的產出及消費為基礎的方法使用了與 Client/Server 不同的概念，重心放在需傳
遞的內容而非參與者，且通常還會伴隨著通訊的隱匿性，也就是內容產生者不知道也不在
乎誰收到了內容。以角色扮演類型的遊戲為例，玩家若產生移動的訊息，可以不用知道誰
將會收取此訊息封包(Pack)；然而如果是在純 Client/Server 架構下，則 Client 端需與 Server
端協商，是否要接收此訊息 
Publisher/Subscriber 模型即是以 Consumer/Production 導向的，最基礎的概念是一個讓
所有參與者都能發布訊息的媒介平台，接收端解析訊息後即可獲得資訊。但如果不考慮是
否傳送給本端玩家的訊息，而將所有的訊息都接收下來並且解析，則會大大的降低效率。
故目前解決這個問題的方法是經由通訊空間 (Communication space) 的切割讓內容消費者
僅接收其所需要的訊息，切割出來的通訊區域 (Area) 只有篩選過的資訊，這些區域稱作頻
道 (Channel) 。內容產出者僅在其所屬的頻道發布訊息，內容消費者則只接收其所訂閱的
頻道。這樣的機制讓網路程式的架構變的清楚且明瞭，在傳訊間的通訊函式將只剩下以下
的 形 式 ： Subscribe(Channel ID) 、 Unsubscribe(Channel ID) 、 Publish(Channel ID) 、
Receive(Channel ID)，這些頻道可以設定獨特的屬性，例如訊息頻率(Message Rates)、
Qos(Quarantees) 、頻道優先權 (Priorized Message Transport) 或是訊息底限 (Message 
Deadline)[40][44]。 
Dead-Reckoning[67]是用於同步處理的一種演算法，主要是自主機端取得同步，並且允
許預測的物件狀態與真實狀態有些微的不同步。這種方式最大的好處，在於可節省網路頻
寬，以及提高互動性如下圖二。但是當某些程度的差異越來越大時，可能會產生因為玩家
間的不一致的問題，導致在互動上的判定更困難，例如碰撞的判斷問題，物件的狀態是否
 圖三 遊戲引擎 IS.GD 2.0 架構圖 
(1) 工具(Tools)：IS.GD 2.0 提供結合了視覺化編輯的工具 oFusion，它可以提供製作遊
戲美術的人員藉由 3Ds Max 編輯整個場景並匯出以 XML 來描述場景.OSM 檔。 
(2) 規則函式(Rule Function)：規則函式即為 C++所撰寫的規則，除了提供開發者以
XML 定義遊戲外，也可以使用 C++撰寫遊戲規則以增加遊戲開發時的彈性。另外再加
上系統與場景的回呼機制，增加開發者對於整體系統的掌控力。 
(3) 總體架構(Framework)：遊戲引擎開發者必須在此定義所有遊戲所需場景之描述檔
路徑及檔案名稱，其中包括以工具 oFusion 產生之.OSM 檔。除此，必須定義引擎執行
時最基本所需資源之所在路徑，稱之為 Root Resource，並且定義整個系統的設定值。 
(4) 場景(Scene)：在遊戲中的場景分為室內及室外、平面及非平面，這些都有不同的
管理方式，在 Scene 中允許開發者選擇場景管理器，可以針對遊戲的場景進行不同的管
理方式。除此，以往還需花費不少心思製作的天空盒(SkyBox)也可以在此直接定義。 
(5) 事件驅動（Trigger）：以 XML 描述遊戲中物件的控制方式以及場景中需要被控制
物件的執行動作(Action)。以觸發的條件下對應至流程控制(Proxy)中的相關規則。事件
驅動分別為鍵盤輸入、滑鼠輸入、時間事件以及碰撞事件。 
(6) 流程控制(Proxy)：Trigger 中的 Action 所對應 Rule，連結至開發者自訂的規則。 
 6
在參數模板中擁有兩種屬性，名稱(Name)和形態(Type)。模板的數量是由遊戲開發者決
定的，故在內部引用時則利用名稱來作為模版的識別子；另外在型態上則可分為 Scene 和
Network，除了可以對相類似的場景做模版，另外也可以對相同類型的網路遊戲環境，提出
遊戲本身作設定。 
場景模板，在一個遊戲中可能會擁有許多不同的關卡，但這些關卡的設定卻都相差不
大，可能都擁有相同的主角、相同的操作模式、遊戲基本的玩法也一樣，差別可能在於物
件在不同關卡的位置不相同、3D 模型的不同或是 AI 模組不同。故本機制是為了讓遊戲開
發者在開發單一遊戲時，可以快速使用之前開發的資源，並且可以針對特定的遊戲類型撰
寫出特定的模板。故場景模板主要是針對場景和場景間的運行來做考量，所以在過程中也
會包含在單一場景中使用的參數模板。下圖為場景模板綱要圖。 
 
圖五 場景模板綱要圖 
場景模板中的兩個主要屬性，名稱(Name)和參照場景(RefScene)。名稱為架構中的識別
子，故須為唯一值；場景模板需設定一個主要的場景以作為參照來源，而後所出現的完整
 8
 10
並將重用性、易用性以及在簡化遊戲開發上做特點的提昇，也因為如此，本研究的單機網
路一致化架構主要適用於雙人連線的互動遊戲，在未來將強化成適用於多人的線上遊戲
(MMORPG)。 
本計畫已發表了多篇延伸性的論文在相關主題的研討會以及畢業論文中，以下將分別
列出文章的題目資料： 
z 基於網路模板之網路遊戲引擎。[18] 
z 簡化遊戲製作教學–以 IS.GD 2.0 為例。[17] 
z 以簡化開發及網路樣板為基礎之跨平台 3D 線上遊戲引擎。[16] 
z 以 XML 資料驅動為基礎之分散式網路 3D 遊戲引擎架構。[15] 
 12
擎架構”，2006 電子商務與數位生活研討會。 
[16] 鄭武堯、鄭創予、劉治廷，2006，“以簡化開發及網路樣板為基礎之跨平台 3D 線上遊
戲引擎”，第十二屆資訊管理暨實務研討會。 
[17] 鄭武堯、劉治廷、鄭創予，2007，“簡化遊戲製作教學 ─ 以 IS.GD 2.0 為例”，2007 年
電子商務與數位生活研討會。 
[18] 劉治廷，2007，“基於網路模板之網路遊戲引擎”，世新大學資訊管理學系碩士論文。 
[19] 經濟部工業局自由軟體入口網站，http://www.oss.org.tw/。 
[20] 經濟部投資業務處，http://investintaiwan.nat.gov.tw/zh-tw/news/200708/2007082701.html 
[21] Alex Yahja, Anthony Stentz, Sanjiv Singh, and Barry L. Brumitt, “ Framed-Quadtree Path 
Planning for Mobile Robots Operating in Sparse Environments,” In Proceedings, IEEE 
Conference on Robotics and Automation, (ICRA), Leuven, Belgium, May 1998. 
[22] Andrew R. Dave M., “Game Architecture And Design,” Coriolis, 1999. 
[23] Ashwin R. Bharambe, Sanjay Rao, Srinivasan Seshan, “Mercury: a scalable 
publish-subscribe system for internet games,” In Proceedings of the 1st workshop on 
Network and system support for games, Pages 3-9, Apr. 2002. 
[24] Blow, J., “Game Development Harder Than You Think,” ACM QUEUE, pp. 29-37, 2004. 
[25] Bagnall, P., Briscoe, R. and Poppitt, A., “Taxonorny of Communication Requirements for 
Large—scale multicast Application,” Internet Draft: draft-taxonomy, Nov. 1997. 
[26] Balazs L., Gabriel W., "Software Engineering in Games, “ In Seminar Computer Graphics,” 
Computer Game Technology, 2001. 
[27] Bethel, W et al. “Hierarchical Parallelism in a Scene Graph,” See 
http://www.r3vis.com/RMScenegraph/hpsg.pdf, 2001. 
[28] Bilas, S., “A Data-driven Game Object System,” Game Developers Conference, 2002. 
[29] Bishop, L., D. Eberly, T. Whitted, M. Finch, and M. Shantz, “Designing a PC Game 
Engine,” IEEE Computer Graphics and Applications, pp.46-53, Jan./Feb. 1998. 
[30] Brewster, C., Alani, H., Dasmahapatra, S., and Wilks, Y., “Data-driven Ontology 
Evaluation,” International Conference on Language Resources and Evaluation, pp.164-168, 
2004. 
 14
[45] Michael G., David M., “Data-Driven Classes in Ruby,” O’Reilly Open Source Convention, 
2003. 
[46] Moller, T., and E. Haines, “Real-Time Rendering, A.K. Peters Ltd.,” Natick, MA, 1999. 
[47] Object-oriented Graphics Rendering Engine, Ogre Online Manual v.1.2.5,  
http://www.ogre3d.org/. 
[48] P. Lindstrom et al., “Real-Time Continuous Level of Detail Rendering of Height Fields,” 
Proc. Siggraph 96, ACM Press, New York, pp. 109-118, 1996. 
[49] Ramalingam, G. and Reps, T., “An incremental algorithm for a generalization of the 
shortest-path problem,” Journal of Algorithms 21, pp. 267-305. 1996. 
[50] Rakkarsoft, RakNet Online Manual, http://www.rakkarsoft.com/raknet/manual/. 
[51] Rob, "Creating a Data Driven Engine," GDC, 2002. 
[52] Rollings, A. and Morris, D., “Game Architecture and Design,” Pearson Professional, 2003 
[53] S. Koenig, M. Likhachev, Y. Liu and D. Furcy., “Incremental Heuristic Search in Artificial 
Intelligence, “ Artificial Intelligence Magazine, 2004. 
[54] S. Koenig, M. Likhachev and D. Furcy., “Lifelong Planning A*,” Technical Report, College 
of Computing, Georgia Institute of Technology, Atlanta (Georgia), 2001. 
[55] S. Koenig and M. Likhachev., “Incremental A*,” In proceedings of the Neural Information 
Processing Systems, 2001. 
[56] S. Koenig and M. Likhachev., “Improved Fast Replanning for Robot Navigation in 
Unknown Terrain,” Technical Report, College of Computing, Georgia Institute of 
Technology, Atlanta (Georgia), 2001. 
[57] S. Koenig and M. Likhachev., “D* Lite,” Technical report, College of Computing, Institute 
of Technology, Atlanta (Georgia), 2002. 
[58] Scott B., “A Data-Driven Game Object System,” GDC, 2002. 
[59] Scott S., “Techniques and Strategies for Data-driven design in Game Development,” 
http://ai.eecs.umich.edu/soar/Classes/494/talks/Schumaker.pdf, 2002. 
[60] Sergio Caltagirone, Matthew Keys, Bryan Schlief, Mary Jane Willshire, “Architecture For a 
Massively Multiplayer Online Role Playing Game Engine, ” In Journal of Computing 
 16
計畫成果自評 
本計畫之研究基礎架構於申請人既有之研究成果「3D 遊戲引擎」和「簡化網路互動內
容設計之通用性架構」之上，在原有的研究中雖具有網路功能，但不夠彈性以及易用，更
未針對不同類型的網路遊戲機制作個別化的處理。另外發現使用本遊戲引擎開發遊戲的開
發者，在開發的過程中會撰寫大量相同或相似的程式碼，而增加開發遊戲的時程，降低成
功開發遊戲的機會。 
故有鑑於以上原因，在 IS.GD 2.0 為基礎下，發展出本計劃的「多重模版架構」，此為
一種通用性的架構，用以支援不同類型的網路遊戲，期望遊戲程式設計師可以在此架構上
快速地建立各類型的網路遊戲模板，達成快速開發網路遊戲的目的。在架構的細節上可以
分為兩個子機制，分別為參數模板和場景模板，兩個機制是從不同角度中來進行簡化遊戲
的開發。參數模板其著眼點為針對單一場景開發，將場景中有大量使用到的參數以及設定
獨立於遊戲內容之外，加快開發的時程以及降低錯誤的發生機率。場景模板則是針對整體
遊戲的開發而設計，遊戲開發者可以重複利用已經開發過的場景資源以及遊戲規則，在不
用特別更改很多程式碼的情況下即可完成另一個場景的製作。此外，遊戲開發者也可以藉
由場景模版提供的彈性，發展出特定類型遊戲的模板；最後場景模板和參數模板彼此的配
合，將可以提供給開發者從單一場景的開發到多重場景的建置具有簡易、重用以及客製化
彈性的開發能力。 
另外，對於開發線上遊戲最大的困難在於架構與單機遊戲不同，本計劃也因此提出了
「單機與網路遊戲一致化架構」。在開發過程中，開發者只要針對預想要一致化的物件作設
定，指定要和哪個角色做規則一致。在單機的情況下，在遊戲的執行期間，一致化物件會
自動被重製成和指定主角相同的情況，若遊戲開發者想要更改一致化物件，可以藉由客製
化程式碼修改；在網路版時，一致化物件將會和另一連線端的角色進行同步。以此即可達
成在製作完單機遊戲的同時網路遊戲也一併完成的特點，以此將可大大降低在開發網路遊
戲上的困難，而且可以更快的完成。 
市場上的主流仍是以 MMORPG 為主，但隨著可同時上線的玩家人數不斷增加，對於
線上遊戲的伺服器將面臨最大的考驗。針對此需求，IS.GD 2.0 將會採用靜態分配的方式，
