2 
英文摘要 
The Fast Fourier Transform (FFT) processors are widely used in signal 
processing systems and communication systems. Many FFT architectures are 
proposed in literature to meet different applications. While designing an FFT 
processor, one of the most difficult issues is to choose the best architecture under the 
design constraints. An FFT generator can not only improve the productivity but also 
shorten time-to-market. In this thesis, we propose approaches which can make 
appropriate design trade-off between throughput and area of pipeline FFT 
architectures, and automatically generate the corresponding hardware design. The 
experimental results show that the proposed methodology can generate area-efficient 
architectures under throughput constraints. 
 
Keywords 
Fast Fourier Transform, pipeline, parameterization, generator 
 
4 
An automatic FFT generator can not only improve productivity but also shorten 
time-to-market. To support user customization, the automatic FFT generator provides some 
parameters to customize for the design constraints, such as the FFT transform sizes, I/O data 
ordering, data bitwidth, and the various architectures. In this thesis, we mainly focus on the 
trade-off between throughput and area of the FFT architectures. 
Since the FFT algorithm was proposed by Cooley and Turkey in 1965 [1], many similar 
algorithms have been proposed to reduce the computation complexity of FFT. As the 
technology progress and algorithm improvement, FFT is widely used in Digital Signal 
Processing (DSP) applications. According to different algorithms, many kinds of FFT 
architectures have been proposed. Generally, there are two kinds of popular FFT architectures. 
One is memory-based architecture and the other is pipelined-based architecture. A single 
processing elements (PE) is used in memory-based architecture. It can be easily extended to 
other FFT transform sizes, so the memory-based architectures are usually used for low 
hardware cost and low throughput designs. Pipeline-based architectures have features such as 
regularity, simplicity, and high throughput rate. In this thesis, we only focus on pipelined-based 
architectures. 
Several pipeline-based FFT architectures are proposed, such as the Radix-2 Multi-path 
Delay Commutator (R2MDC) [2], Radix-4 Multi-path Delay Commutator (R4MDC) [2], 
Radix-2 Single-path Delay Feedback (R2SDF) [3], Radix-4 Single-path Delay Feedback 
(R4SDF) [4], Radix-2
2
 Single-path Delay Feedback (R2
2
SDF) [5], Radix-2
2
 Multi-path Delay 
Commutator (R2
2
MDC) [6] and Radix-2
3
 Single-path Delay Feedback (R2
3
SDF) [7]. In these 
architectures, the R4SDF requires fewer multipliers than the R2SDF; however the R2SDF 
architecture is simpler and more regular than the R4SDF. The R2MDC requires fewer 
multipliers, adders and memory size than the R4MDC; however, the R4MDC can provide 
higher throughput. The R2
2
SDF has the same multiplier complex as R4SDF, but retains the 
butterfly structure of radix-2 algorithm. The R2
2
MDC uses the same algorithm as the R2
2
SDF, 
and the R2
2
MDC has higher throughput. As a result, in this work, our proposed FFT generator 
is based on the R2
2
MDC and the R2MDC architectures. 
6 
in R2SDF architecture and the other contains also some logic to implement the multiplication of 
twiddle factor of –j, as shown in Figure 4. 
BFI BFII BFI BFII
8 4 2 1
 
Figure 4 R2
2
SDF architecture (N=16)  
The Radix-2 MDC (R2MDC) architecture [2] is straightforward. The inputs are separated 
into two streams by the control of switches, and then go to butterflies in parallel, as shown in 
Figure 5. 
C2
Radix-2
BF
8
4
C2
Radix-2
BF
4
2
C2
Radix-2
BF
2
1
C2
Radix-2
BF
1
 
Figure 5 R2MDC architecture (N=16) 
The Radix-4 MDC (R4MDC) architecture [2] is also similar to R2MDC architecture besides 
the raidx-4 butterfly and the number of registers, as shown in Figure 6. 
C4
Radix-4
BF
C4
12
Radix-4
BF
8
4
3
2
1
1
2
3
 
Figure 6 R4MDC Architecture (N=16) 
The Radix-2
2
 MDC (R2
2
MDC) architecture [6] is the MDC type architecture of Radix-2
2
 
algorithm. In the flow graph of the complete decomposition of an N-point FFT computation with 
radix-2
2
 algorithm, the even-numbered stages multiple twiddle factors not only the subtraction 
output but the addition output, so the R2
2
MDC architecture needs two complex multipliers in 
even-numbered stages, as shown in Figure 7. 
C2 BFI
8
4
C2 BFII
4
2
C2 BFI
2
1
C2 BFII
1
 
Figure 7 R2
2
MDC architecture (N=16) 
8 
B. R22MDC Vertical Expansion Architecture 
A general form of R2
2
MDC vertical expansion architecture is shown in Figure 9. Parameter N 
indicates the FFT transform size, where 2 , 1,2,3... mN m .Parameter t indicates the degree of 
parallelism, where 11,2,4..., 2  mt . The number of registers of each original R22MDC 
architecture decreases as the degree of parallelism increases, and the number of interconnection 
permutation matrix also increases. With the interconnection permutation matrix, data dependence 
would be kept. From Figure , we can derive the number of multipliers is 
4
(2 log - 2)t N   , the 
number of adders is 
2
2 logt N , the number of registers is 2N t  and the throughput is 
2t
N
. 
 
Figure 9 General form of R2
2
MDC vertical expansion architecture 
Figure 10 shows the case when t =1, the original R2
2
MDC architecture, the number of 
multiplier is 2, the number of adders is 8, the number of registers of datapath is 14, and the 
throughput is
1
8
.   
 
BFI
4
BFII BFIIBFI
4 2
2
1
1
 
Figure 10 Example of R2
2
MDC vertical expansion architecture for t=1 
Figure 11 shows the case when t =2, the number of multipliers is 4, the number of adders is 
16, the number of registers of datapath is 12, and the throughput is
1
4
. 
BFIIBFI BFIIBFI BFIIBFI
BFIIBFI BFIIBFI BFIIBFI
BFI
BFI
BFII
BFII
L2t
BFI
BFI
BFII
BFII
Lt
Lt
Lt/2
Lt/2
Lt/2
Lt/2
L4
L4
16
N
t8
N
t4
N
t
1
16
N
t8
N
t4
N
t
1
10 
BFI BFII BFIIBFI
BFI BFII BFIIBFI
BFI BFII BFIIBFI
BFI BFII BFIIBFI
BFI BFII BFIIBFI
BFI BFII BFIIBFI
BFI BFII BFIIBFI
BFI BFII BFIIBFI
I8I16 I4
 
Figure 13 Example of R2
2
MDC vertical expansion architecture for t=8 
C. Summary 
In this project, we proposed two directional trades-off approaches based on R2
2
MDC 
architecture and R2MDC architecture. In vertical direction, we provide an expansion approach 
for R2
2
MDC architecture to increase the throughput. Under the throughput constraint, our 
approach can provide only one exact solution. Table 1 lists the hardware and throughput 
comparison between our approach and previous work, where R2
2
EMDC indicates the vertically 
expanded R22MDC architecture. Table 2 gives the normalized hardware and throughput 
comparison with the same throughput by replacing jk with 2logt N .  
12 
四、 結論與討論 
The FFT processor is an important computing block in communication and signal processing 
systems. To improve productivity and shorten time-to-market, an automatic FFT generator can be 
used to design a specified FFT processor. In this thesis, we propose a parameterizable FFT 
generator with two approaches to make good design trade-off between throughput and area under 
the design constraints. First, the vertical expansion approach parallels the datapath to increase the 
throughput. Second, the horizontal compression approach folds the datapath to reduce the 
hardware usage. Besides, only the best FFT architecture is generated under the user-specified 
throughput constraint to reduce the computation time in our proposed FFT generator. Compared 
with the Pease architecture, for the length of 256 and 1024 cases, the generated FFT processor 
saves about 30.8% area under throughput constraints. 
Various FFT architectures are proposed in literature. It can be implemented into our 
proposed FFT generator. In the future, more FFT algorithms such as the R2
3
MDC FFT 
algorithm, mixed-radix FFT [17] algorithm will be considered to enlarge the search space. 
Besides, the bitwidth optimization techniques proposed in [18] will also be considered.  
 
五、 參考文獻 
[1] H. Keding, M. Willems, M. Coors, and H. Meyr, “FRIDGE: A fixed-point design and 
simulation environment,” in Proceedings of IEEE Design, Automation and Test in Europe 
(DATE ’98), pp. 429–435, Paris, France, Feb. 1998. 
[2] G. A. Constantinides, G. J. Woeginger, “The complexity of multiple wordlength assignment,” 
Applied Mathematics Letter, pp. 137–140, 2002. 
[3] Synopsys Inc. (2001). CoCentric SystemC Compiler Behavioral Modeling Guide.[online]. 
Avaible:www.synopsys.com 
[4] Synopsys Inc. (2000). Synopsys CoCentric Fixed-Point Designer Datasheet [online]. 
Avaible:www.synopsys.com 
[5] C.Fang, R. Rutenbar, T. Chen, “Fast, accurate static analysis for fixed-point finite-precision 
effects in DSP designs,” 2003 International Conference on Computer-Aided Design, 
ICCAD-2003., vol., no., pp. 275-282, Nov. 2003 
[6] D. Lee, A. Abdul Gaffar, R. Cheung, O. Mencer, W. Luk, and G. Constantinides, 
“Accuracy-guaranteed bit-width optimization,” IEEE Trans. Computer-Aided Design 
14 
[2] L. R. Rabiner and B. Gold. Theory and Application of Digital Signal Processing. 
Prentice-Hall, Inc., 1975. 
 
[3] E. H. Wold and A. M. Despain, “Pipeline and Parallel-Pipeline FFT Processors for VLSI 
Implementation,” IEEE Trans. Computers, vol. 33, no. 5, pp. 414-426, May 1984. 
 
[4] A.M. Despain. “Fourier Transform Computer using CORDIC Iterations,” IEEE Trans. 
Comput., C-23(10):993-1001, Oct.1974. 
 
[5] S. He and M. Torkelson, “A New Approach to Pipeline FFT Processor,” in Proc. 10th Int’l 
Parallel Processing Symp. (IPPS ’96), pp.766-770, 1996. 
 
[6] R. Storn. “Radix-2 FFT-pipeline Architecture with Reduced Noise-to-signal Ratio,” IEE 
Proceedings- Vision, Image and Signal Processing, 141:81-86, 1994.  
 
[7] S. He and M. Torkelson, "Designing Pipeline FFT Processor for OFDM (de)Modulation", 
International Symposium on Signals, Systems, and Electronics, pp. 257- 262, Oct. 1998. 
 
[8] P. Duhamel, H. Hollmann, “Split Radix FFT Algorithm,” Electronics Letters, vol. 20, 
pp.14-16, January 1984. 
 
[9] P. Duhamel, and H. Hollmann, “Split Radix FFT Algorithm,” Electronics Letters, vol. 20, 
pp. 14-16, Jan. 5, 1984. 
 
[10] D. Takahashi, “An Extended Split-Radix FFT Algorithm,” IEEE Signal Processing Letters, 
vol. 8, no. 5, pp. 145-147, May 2001. 
 
 
[11] G. Nordin, P. A. Milder, J. C. Hoe, and M. Püschel, “Automatic Generation of Customized 
Discrete Fourier Transform IPs,” In Proc. of ACM/IEEE Design Automation Conf., pp. 
471-474, 2005. 
 
[12] P. A. Milder, M. Ahmad, J.C. Hoe, and M. Püschel, “Fast and Accurate Resource 
Estimation of  Automatically Generated Custom DFT IP Cores, ”  In Proc. of the 
ACM/SIGDA International Symposium on Field Programmable Gate Arrays, pp. 211-220 
2006.  
 
[13] P. A. Milder, F. Franchetti, J. C. Hoe, and M. Püschel, “Formal Datapath Representation 
and Manipulation for Implementing DSP Transforms,”In Proc. of ACM/IEEE Design 
Automation Conf., pp. 385-390, 2008.  
 
16 
六、 計畫成果自評 
This year, we have developed: 
1) An expandable multipath delay commutator based FFT architecture 
2) An FFT generator to produce a synthesizable FFT core under a given throughput constraint 
在計畫的研究成果豐碩，我們共發表一篇待審之長篇期刊，一篇待審之國際研討會論
文，一篇國際研討會論文，並申請了中國民國與美國專利。未來將能技術移轉運用於產業
界，提升研究的實用價值。雖然，期刊論文的發表進度稍有落後，但是，嚴謹的審查過程，
更能確保發表論文的品質。另外，本計畫亦培育多位人才，共有一位博士班研究生、二位
碩士班研究生，目前均有很好的發展。 
Submitted journal articles 
[1] Bu-Ching Lin, Juinn-Dar Huang, and Jing-Yang Jou “Bitwidth-Aware Multiple Constant 
Multiplication (MCM) Synthesis for FIR Filters,” submitted to IEICE Transactions 
Fundamentals. 
[2] Bu-Ching Lin, Jhih-Hong Lu, Juinn-Dar Huang, and Jing-Yang Jou “Delay Optimal 
Compressor Tree Synthesis for LUT-Based FPGAs,” submitted to ACM Transactions on 
Reconfigurable Technology and Systems. 
International conference proceedings 
[1] Bu-Ching Lin, Yu-Hsiang Wang, Juinn-Dar Huang, and Jing-Yang Jou “Delay Optimal 
Compressor Tree Synthesis for LUT-Based FPGAs,” submitted to IEEE International SOC 
Conference. 
[2] Yu-Hsiang Kao and Juinn-Dar Huang, “High-Performance NAND Flash Controller 
Exploiting Parallel Out-of-Order Command Execution,” Proc. of IEEE International 
Symposium on VLSI Design, Automation, and Test, pp.160-163, Apr. 2010. 
Patent 
[1] 黃俊達、呂智宏、林步青、周景揚, “應用於查找表式 FPGA 的壓縮樹延遲最佳化合成
演算法,” 中華民國專利申請案號 098144372, 98 年 12 月 23 日 
[2] 黃俊達、王毓翔、林步青、周景揚, “可參數化管線式快速傳利葉轉換硬體產生器,” 中
華民國專利申請案號 099100407, 99 年 1 月 8 日 
[3] Juinn-Dar Huang, Jhih-Hong Lu, Bu-Ching Lin, and Jing-Yang Jou, “Delay optimal 
compressor tree synthesis for LUT-based FPGAs,” US12/717,520, May 4, 2010 
