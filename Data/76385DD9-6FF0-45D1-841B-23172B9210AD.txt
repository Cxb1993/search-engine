2 BOW-YAW WANG
However, the quality of computer systems is not necessarily improved
by team efforts. Since modern computer systems are even more com-
plicated, they may have more defects. Although component-based de-
signs can reduce the number of design flaws, one would be na¨ıve to
build perfect computer systems by dividing them into components. In
fact, modern computer systems are so complicated that not a single
person can fully understand their designs entirely. It would require
tremendous knowledge and patience unattainable to any human being.
In order to detect flaws in modern computer systems, engineers need
help.
Formal verification is a technique to assist engineers to improve de-
sign quality. In formal verification, engineers first formalize their de-
signs and intended functionalities in mathematical problems. These
mathematical problems can then be solved by formal verification tools
either automatically or semi-automatically. In general, solving mathe-
matical problems cannot be done mechanically. However, it is possible
to develop tools for subclasses of solvable problems. Among these fully
automatic tools, model checkers have been used in computer industry
for more than a decade.
A model checker is a computer program which examines system be-
havior against mathematical properties given by users. If a system has
a finite number of states, it is not difficult to see that a model checker
can formally prove properties by exhaustive search in theory. In prac-
tice, however, the complexity of the model checking problem is very
high. Consider, for example, ten binary counters in a computer sys-
tem. Suppose all counters are initialized to zero. If these counters are
not synchronized, there are 210 possible values for these ten counters.
However, only 10 × 2 states are needed to specify these counters. In
component-based designs, each component may have relatively small
number of states. Yet the composition of components incurs combi-
natorial explosion. The so-called state explosion problem is one of the
main impediments in model checking.
The state explosion problem sets a theoretical lower bound of model
checking. The worst-case scenario nevertheless is not often observed in
4 BOW-YAW WANG
In this project, we have developed a theory to derive sound com-
positional proof rules for finite automata. We observe that a sound
compositional proof rule is but a valid logic formula. Applying ba-
sic proof theory, we show how to derive sound compositional proof
rules syntactically. Using our theory, we can infer all known compo-
sitional proof rules automatically. Moreover, we show that even the
most counter-intuitive compositional proof rule for finite automata has
a logical meaning. These compositional proof rules are in fact valid in
intuitionistic logic. One can also infer these counter-intuitive composi-
tional proof rules syntactically modulo their side conditions.
Another interesting question in model checking is to extend it to
infinite-state systems. For several subclasses of infinite-state systems,
the model checking problem has been shown to be decidable. However,
it is not sure whether infinite-state model checking is useful in practice.
Similar to finite-state model checking, theoretical results give us the
worst-case lower bound. It requires lots of engineering efforts to make
a technique useful in practice.
In this decade, sophisticated Satisfiability Solvers (SAT Solvers) have
gained a lot of spotlight in research community. In formal verification,
SAT Solvers have been used to bug finding very successfully. Indeed,
techniques developed in late twentieth century are deemed obsolete
with the advent of SAT-based techniques. SAT Solvers are widely
used in modern model checkers.
The success of SAT Solvers raises questions for infinite-state model
checking. Is it possible to adopt SAT Solvers in verifying infinite-
state systems? We address this interesting question in this project as
well. Using the theoretical framework developed in our previous NSC
projects, we have developed a SAT-based model checking algorithm
for context-free processes. A context-free process can be seen as a
pushdown automaton without side effects. Since recursion is allowed
in context-free processes, the number of states is unbounded. Our
technique suggests that SAT Solvers are useful in finding flaws not
only in finite-state systems, but also in certain infinite-state systems as
well.
6 BOW-YAW WANG
Nevertheless few compositional rules have been established in au-
tomated compositional reasoning. Since proofs of their soundness are
essentially tedious case analysis, verifiers may be reluctant to develop
new rules lest introducing flaws in the paradigm. Moreover, existing
proof rules for other computational models may not apply because
their proofs of soundness often depend on different assumptions. Sub-
sequently, all verification tasks must be molded into a handful of com-
positional rules available in automated compositional reasoning. The
effectiveness and applicability of the new paradigm are therefore im-
peded.
Several assume-guarantee rules have been proposed and investigated
in the past. The proof of their soundness depends on the underlying
computational model and sometimes is very involved. Subsequently,
each proof rule must be carefully examined lest introducing flaws in
automated compositional reasoning. Indeed, a handful of proof rules
have been proposed by the same research group in [10]. The soundness
of each rule is established by tedious case analysis. Manual deduction
of assume-guarantee proof rules may impede the deployment of the new
technique in practice. Since new rules may be need for different cir-
cumstances, tedious manual proof of soundness is both time-consuming
and error-prone.
In this paper, a proof-theoretic approach for establishing soundness
of rules in automated compositional reasoning is developed. We simply
observe that regular languages are closed under Boolean operations and
form a Boolean algebra. The proof system LK for classical logic can
hence be used to deduce relations among regular sets syntactically.
Indeed, our proof-theoretic approach allows to establish the soundness
of rules in [10] by the proof assistant Isabelle fully automatically.
But classical logic has its limitation. Consider the following rule [3].
M0‖P1 |= P0 P0‖M1 |= P1
M0‖M1 |= P0‖P1
If we treat compositions and satisfactions as conjunctions and impli-
cations respectively, it is easy to see that the rule is not sound in the
8 BOW-YAW WANG
Although we are motivated by automated compositional reasoning,
our techniques borrow extensively from Abadi and Plotkin [2]. More
recently, semantic analysis of circular compositional reasoning rules
and intuitionistic linear temporal logic have also been investigated in
[28, 29]. There is, nonetheless, a fundamental difference from previous
works. An automata-theoretic technique is used in the present work. In
addition to algebraic semantics, we give a construction of the automata
for intuitionistic implication. Our construction therefore shows that
the algebraic semantics is not only computable but also closed under
all logical operations. In contrast, computability and closure property
are not discussed previously. They are in fact crucial in automated
compositional reasoning because the L∗ algorithm can only generate
descriptions for regular languages.
3. Intuitionistic Logic
Compositional reasoning is an effective technique to alleviate the
state explosion problem in formal verification [20]. It circumvents the
problem by decomposing systems into components with compositional
proof rules. Users carry out these simpler verification tasks and deduce
the correctness of systems by soundness of compositional proof rules.
In assume-guarantee reasoning, each component is verified separately
with contextual assumptions provided by users. The effectiveness of
compositional reasoning is therefore greatly improved by providing con-
textual assumptions manually. In automated compositional reasoning
through learning, users are further relieved from crafting contextual
assumptions If one further formalizes system behavior and properties
as regular languages, contextual assumptions can be generated in au-
tomated compositional reasoning. The effectiveness of compositional
reasoning is hence improved [18, 10].
To extend automated compositional reasoning to ω-regular languages,
one must establish compositional proof rules and develop learning algo-
rithms for the infinitary languages. It is straightforward to derive com-
positional proof rules for ω-regular languages by set-theoretic analysis,
but learning general ω-regular languages is currently infeasible [23].
10 BOW-YAW WANG
drawbacks in closed ω-regular languages. In addition to ω-strings, an
intuitionistically closed regular language contains all prefixes of its ω-
strings as well. Finite approximations in an intuitionistically closed reg-
ular language allow to characterize its ω-strings. Learning algorithms
for regular languages suffice to generate contextual assumptions for
the subclass of infinitary languages efficiently. Moreover, we are able
to show the class of intuitionistically closed regular languages forms a
Heyting algebra. Compositional proof rules can thus be deduced au-
tomatically [2, 40]. Automated compositional reasoning is therefore
generalized to the class of intuitionistically closed regular languages
without any penalty.
We propose to adopt the intuitionistic interpretation of infinitary
properties in automated compositional reasoning [29]. Safety languages
in the new interpretation contain infinite behaviors as well as their fi-
nite approximations. The connection between languages accepted by
Landweber automata and closed regular languages under the intuition-
istic interpretation is established. We are able to show the class of
intuitionistically closed regular languages forms a Heyting algebra via
the correspondence. Moreover, information about such languages can
in fact be deduced by their finite approximations. The intuitionis-
tic interpretation not only gives a framework suitable for automated
compositional reasoning, but also yields efficient algorithms by finite
approximations.
The intuitionistic interpretation additionally admits circular compo-
sitional proof rules. Circularity in compositional reasoning has been
observed in various models of reactive systems (see, for example, [3]).
For intuitionistically closed regular languages, we are able to establish
the same circular compositional proof rule in [2, 40]. More circular
compositional proof rules can be established syntactically. The combi-
nation of automata and proof theory hence relieves users from making
tedious inductive proofs for circular reasoning. More circular composi-
tional proof rules can be deduced and used in automated compositional
reasoning as well.
12 BOW-YAW WANG
allow more real-world circuits to be verified formally [31]. Experimen-
tal results favor SAT-based techniques when larger models are under
verification [19, 7, 39].
Applications of SAT solvers can also be found in software verifica-
tion. Applying various abstraction techniques, software verification
tools are able to verify abstract programs efficiently [9, 25]. SAT-based
techniques have been used in predicate abstraction [17] and timed sys-
tems [34]. SAT solvers have outperformed decision procedures and
improved the efficiency in data abstraction.
Since pushdown systems give natural representations of program con-
trol flows, problems in program analysis can be reduced to verification
problems on the infinite-state model. In the past years, efficient veri-
fication algorithms for pushdown systems have been proposed [21, 22].
Experimental results suggest that the BDD-based algorithm for the
succinct model could be much more space-efficient than those for finite-
state systems in program analysis [22].
Meanwhile, hardware verification has been influenced by the devel-
opment of practical satisfiability (SAT) solvers [12, 11]. Thanks to var-
ious heuristics, SAT solvers are very efficient in both time and space.
By reducing bounded verification problems to Boolean satisfiability,
the technique can detect flaws in finite-state models unattainable by
explicit-state or BDD-based algorithms.
Since bebop uses a BDD-based algorithm [8], it is unclear how the
explicit-state [13, 21] or BDD-based [22] algorithms for pushdown sys-
tems compare with SAT-based algorithms for finite-state systems. More-
over, the explicit-state and BDD-based algorithms for pushdown sys-
tems might suffer from the same capacity problem as in finite-state
systems. An SAT-based algorithm for pushdown systems could be
more scalable.
In this paper, we give a complete SAT-based model checking algo-
rithm for the universal fragment of alternation-free µ-calculus formu-
lae on context-free processes. Given a context-free grammar, one may
view derivations as system evolutions. A context-free grammar thus de-
fines the transition system of a context-free process [14, 26]. Although
14 BOW-YAW WANG
bounded proof. If no proof within certain bounds can be found, the
completeness of proof search is then established by the unsatisfiability
of another formula. Our SAT-based model checking algorithm there-
fore reduces proof search of the local model checking algorithm in [26]
to Boolean (un)satisfiability. The universal fragment of alternation-
free µ-calculus formulae on context-free processes can hence be verified
by the absence of proofs of their negations using SAT solvers.
5. Conclusions
Soundness theorems for compositional reasoning rules depend on un-
derlying computational models and can be very involved. Since it is
tedious to develop new compositional rules, few such rules are available
for each computational model. The situation may impede the usability
of automated compositional reasoning because verifiers are forced to
mold their problems in a handful of compositional rules available to
them. In this paper, we apply proof theory and develop a syntactic
approach to analyze compositional rules for automated compositional
reasoning. With publicly available proof assistants, we are able to es-
tablish compositional rules with little human intervention. Our work
may improve the usability of automated compositional reasoning by
automatic derivation of its compositional rules.
Although all compositional rules known to us have been established
automatically, it is unclear whether these proof systems are complete
with respect to regular languages. It would also be of great interest
if one could generate compositional rules to fit different circumstances
heuristically. Moreover, although the classical interpretation can be
carried over to ω-regular sets [37], it is unclear whether the intuitionistic
interpretation applies as well.
Research topics combining both model checking and theorem prov-
ing are not unusual. This work may be viewed as another attempt
to integrate both technologies. By exploring their theoretical foun-
dations, another useful connection is found. The syntactic analysis in
theorem proving can indeed automate semantic proofs of compositional
16 BOW-YAW WANG
[7] Mohammad Awedh and Fabio Somenzi. Proving more properties with bounded
model checking. In R. Alur and D. A. Peled, editors, CAV, volume 3114 of
LNCS, pages 96–108. Springer Verlag, 2004.
[8] T. Ball and S. Rajamani. Bebop: A symbolic model checker for boolean pro-
grams. In Klaus Havelund, John Penix, and Willem Visser, editors, SPIN 2000
Workshop on Model Checking of Software, volume 1885 of LNCS. Springer-
Verlag, 2000.
[9] Thomas Ball and Sriram K. Rajamani. The SLAM toolkit. In G/’erard Berry,
Hubert Comon, and Alain Finkel, editors, Computer Aided Verification, vol-
ume 2102 of LNCS, pages 260–264. Springer-Verlag, 2001.
[10] Howard Barringer, Dimitra Giannakopoulou, and Corina S. Pa˘sa˘reanu. Proof
rules for automated compositional verification through learning. In Workshop
on Specification and Verification of Component-Based Systems, pages 14–21,
2003.
[11] A. Biere, A. Cimatti, E. M. Clarke, M. Fujita, and Y. Zhu. Symbolic model
checking using SAT procedures instead of BDDs. In DAC, pages 317–320. ACM
Press, June 1999.
[12] Armin Biere, Alessandro Cimatti, Edmund Clarke, and Yunshan Zhu. Sym-
bolic model checking without BDDs. In W. R. Cleaveland, editor, TACAS,
volume 1579 of LNCS, pages 193–207. Springer-Verlag, 1999.
[13] A. Boujjani, J. Esparza, and O. Maler. Reachability analysis of pushdown
automata: Applications to model checking. In Antoni W. Mazurkiewicz and
Jo´zef Winkowski, editors, CONCUR, volume 1243 of LNCS, pages 135–150.
Springer-Verlag, 1997.
[14] O. Burkart and B. Steffen. Model checking for context-free processes. In Rance
Cleaveland, editor, CONCUR, volume 630 of LNCS, pages 123–137. Springer-
Verlag, 1992.
[15] Didier Caucal and Roland Monfort. On the transition graphs of automata and
grammars. In Rolf H. Mo¨hring, editor, Graph-Theoretic Concepts in Computer
Science, volume 484 of LNCS, pages 311–337. Springer-Verlag, 1990.
[16] Sagar Chaki, Edmund Clarke, Nishant Sinha, and Prasanna Thati. Automated
assume-guarantee reasoning for simulation conformance. In K. Etessami and
S. K. Rajamani, editors, Computer Aided Verification, volume 3576 of LNCS,
pages 534–547. Springer-Verlag, 2005.
[17] Edmund Clarke, Daniel Kroening, Natasha Sharygina, and Karen Yorav. Pred-
icate abstraction of ANSI-C programs using SAT. Formal Methods in System
Design, 25(2–3):105–127, 2004.
[18] Jamieson M. Cobleigh, Dimitra Giannakopoulou, and Corina S. Pa˘sa˘reanu.
Learning assumptions for compositional verification. In Hubert Garavel and
18 BOW-YAW WANG
[30] Oded Maler and Amir Pnueli. On the learnability of infinitary regular sets.
Information and Computation, 118(2):316–326, 1995.
[31] Matthew W. Moskewicz, Conor F. Madigan, Ying Zhao, Lintao Zhang, and
Sharad Malik. Chaff: Engineering an Efficient SAT Solver. In Design Automa-
tion Conference, June 2001.
[32] Tobias Nipkow, Lawrence C. Paulson, and Markus Wenzel. Isabelle/HOL —
A Proof Assistant for Higher-Order Logic, volume 2283 of LNCS. Springer-
Verlag, 2002.
[33] Ronald L. Rivest and Robert E. Schapire. Inference of finite automata using
homing sequences. Information and Computation, 103(2):299–347, 1993.
[34] Sanjit A. Seshia and Randal E. Bryant. Unbounded, fully symbolic model
checking of timed automata using boolean methods. In Warren A. Hunt Jr. and
Fabio Somenzi, editors, CAV, volume 2725 of LNCS, pages 154–166. Springer-
Verlag, 2003.
[35] Ludwig Staiger. ω-languages. In G. Rozenberg and A. Salomaa, editors, Hand-
book of Formal Languages, volume 3, chapter 6, pages 339–387. Springer-
Verlag, 1997.
[36] The Coq Development Team. The Coq Proof Assistant Reference Manual: ver-
sion 8.0. LogiCal Project, 2004.
[37] W. Thomas. Automata on infinite objects. In J. van Leeuwen, editor, Handbook
of Theoretical Computer Science, volume B, pages 133–191. Elsevier Science
Publishers, 1990.
[38] K. Wagner. On ω-regular sets. Information and Control, 43:123–177, 1979.
[39] Bow-Yaw Wang. Proving ∀µ-calculus properties with SAT-based model check-
ing. In Farn Wang, editor, FORTE, volume 3731 of LNCS, pages 113–127.
Springer-Verlag, 2005.
[40] Bow-Yaw Wang. Automatic derivation of compositional rules in automated
compositional reasoning. In Luis Caires and Vasco T. Vasconcelos, editors,
CONCUR, volume 4703 of LNCS, pages 303–316. Springer-Verlag, 2007.
One way to prove the correctness of the while loop is to find an invariant.
An invariant is a property that is preserved in each iteration. Moreover, it
also proves that the postcondition must hold after executing the loop. In our
example, (i < 10) || (i == 10 && b) is an invariant. Clearly, it is true
at the beginning of the loop; it is also true at the end of the loop in each
iteration. Moreover, it proves the postcondition because i < 10 does not
hold after executing the loop. Since an invariant exists, the loop is correct.
Although invariants ensure the correctness of while loops, finding them is
not easy. It often needs insights to programs. When pre- and post-conditions
are more complicated, even programmers may not find invariants easily. If
tools can find invariants automatically, programmers only need to specify pre-
and post-conditions without actually proving them. Invariant generation is
hence an important problem in program correctness.
Observe how programmers infer invariants. Initially, they have their
guesses of invariants. If their guesses are too strong, programmers weaken
them; if they are too weak, programmers strengthen their guesses. The pro-
cess is very similar to learning. Programmers present their guesses. They
use a tool (or metaphorically, a teacher) to justify their guesses. If the tool
finds counterexamples, programmers will refine their guesses and repeat.
During my visit to ROSAEC Center this summer, Professor Kwangkeun Yi,
Yungbum Jung, Soonho Kong, and I develop a new technique for invariant
generation. Based on the previous observation, we apply machine learning
to the invariant generation problem. We use a learning algorithm to play the
role of a programmer. Moreover, we devise a teacher which answers queries
from the learning algorithm. By interacting with our teacher, the learning
algorithm is able to generate invariants for some Linux device drivers and
SPEC2000 benchmark programs with complicated pre- and post-conditions.
Our approach is very simple and flexible. The hardest part (that is,
inferring invariants) is done by the learning algorithm. We only need to define
a teacher which answers queries. Of course, more sophisticated teachers can
be used in our approach. In our experiments, however, we find that it may
not be necessary. Our teacher always gives a random answer if it cannot
resolve a query conclusively. In one of the Linux device driver programs, we
find that the learning algorithm successfully generates an invariant regardless
of random answers. There are sufficiently many invariants that a few random
answers could not prevent the learning algorithm from finding one.
Machine learning has been applied to many areas. Our work suggests
that it may be useful to program analysis as well. In the future, we plan to
2
Invariant Generation through Learning
Bow-Yaw Wang
September 7, 2009
Computer programs are infamous of their unpredictability. An unin-
tended typo or a missing case may lead to disasters. One of the best known
software failures is the explosion of Ariane 5 on her maiden flight. On June
4 1996, the Ariane 5 launcher exploded in the air 40 seconds after initiation
of flight sequence due to an overflow exception. Ariane 5 used the same
software in its flight control system as in its predecessor Ariane 4. Ariane 5
however had a velocity 5 times higher than Ariane 4. The high velocity was
not expected by the old software and caused overflow in the new launcher.
To ensure program correctness and prevent software failures, formal meth-
ods have several techniques to offer. To illustrate how formal methods help
program development, consider the annotated while loop in Figure 1.
[ i == 0 ]
while (i < 10) {
b = rand() % 2;
if (b) i++;
}
[i == 10 && b]
Figure 1: A Loop
The variable b can have 0 or 1 in the beginning
of the loop. If it is 1, the variable i is incremented
by 1. The first square bracket [ i == 0 ] states
the assumption of the loop: i is 0 before entering
the loop. It is called a precondition of the loop. The
second square bracket [ i == 10 && b ] states the
results of the loop: i is 10 and b is not 0 after execut-
ing the loop. Similarly, it is called a postcondition of
the loop. In formal methods, programmers are re-
quired to prove that the postcondition (i == 10 &&
b) must hold after executing loop if the precondition
(i == 0) holds before entering the loop.
One way to prove the correctness of the while loop is to find an invariant.
An invariant is a property that is preserved in each iteration. Moreover, it
also proves that the postcondition must hold after executing the loop. In our
example, (i < 10) || (i == 10 && b) is an invariant. Clearly, it is true
1
