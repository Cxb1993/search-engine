 2
目錄               頁次 
中英文摘要             3 
 
I. INTRODUCTION             4 
 
II. GENERALIZED EXPANDING WINDOW FOUNTAIN CODES   4 
A. Definition of Generalized expanding window fountain code      5 
B. Applications of GEWF codes                              6 
C. Generalized expanding window fountain decoding process  6 
D. Notations for the states of GEWF decoders     7 
E. State generating function         7 
 
III. RECURSIVE STATE GENERATING FUNCTION FOR GENERALIZED 
EXPANDING WINDOW FOUNTAIN DECODER     8 
 
IV. CASE STUDY             10 
 
V. CONCLUSION            12 
 
VI. REFERENCE            13 
 
 
 
 
 
 
 
 
 
 4
I. INTRODUCTION 
Due to properties such as low overhead, universality, simple encoding and 
decoding processes, fountain codes [1], [2] are well-suited for data transmission over 
networks subject to packet erasures. Practical fountain codes have been incorporated 
in recent multimedia applications [3], [4].  
In live broadcast applications where source media is continuously produced, the 
use of fountain codes allows the transmission to proceed reliably without the use of 
acknowledgements. To achieve the live aspect of the application, it is required that the 
recipients can obtain the head of the source program almost as soon as the program 
starts. However, in order to start the transmission with as little delay as possible, 
typically the source stream is divided into many small individual fountains [5], [6], as 
shown in Figure 1. The use of small-sized fountain codes can lead to elevated 
overhead. 
In order to improve the efficiency of fountain codes in live broadcast situations, 
we must employ fountain codes of large block sizes. This can be achieved by 
requiring codes to draw inputs from all the available source symbols at encoding time. 
Specifically, as the broadcast goes on, the transmitter has access to more and more 
source symbols. In turn, the encoder can operate with progressively larger block sizes. 
We refer to such fountain codes as the generalized expanding window fountain 
(GEWF) codes. An illustration of a GEWF encoder is shown in Figure 2. When 
symbols 1 through k1 are available to the transmitter, it employs a first phase fountain 
code to encode them. Later on, when symbols 1 through k2 > k1 become available, it 
uses a second phase fountain code, and so on. 
The GEWF code proposed in this report is a composite fountain code that 
consists of a number of subcodes. The full set of source symbols is organized into a 
number of (overlapping) subsets. Each subcode then draws source symbols from a 
subset. Fountain codes that share this general structure have appeared in the literature. 
Many of them are motivated by the desire to provide unequal error protection (UEP) 
capability [7], [8]. In [9], the so-called expanding window fountain (EWF) codes were 
proposed. Source symbols that are members of more windows naturally acquire 
higher degree of protection. In [10], digital fountain codes applied over sliding 
windows were proposed to improve the performance of packet recovery. Another 
related approach is the generalized LT (GLT) codes [11]. 
Recently a number of studies attempt to analyze the performance of fountain 
codes. Some of them take an asymptotic approach [12]. There are also approaches 
that study the error probability of LT codes at a finite block length [13], [14]. One of 
the approaches is that of the And-Or tree analysis [15]. 
 6
 
 
B. Applications of GEWF codes 
When one applies the GEWF code to a live broadcast, naturally the disjoint 
subsets Di are chosen to be temporal segments of the input media stream. As the 
broadcast goes on, the encoder can draw encoded symbols from more and more 
source symbol subsets Di. This achieves the strategic goal of using as large a block 
size as possible. By doing so, potentially one can improve the overall coding 
efficiency as compared to the regular non-overlapping fountains approach. 
Nevertheless, in an LT code context, obviously the fresher symbols need to be 
assigned higher degree probability in order for this scheme to work. Because of this, 
the original EWF codes cannot satisfy. On the other hand, the improvement in coding 
efficiency due to the use of GEWF may not be as large as when Sk can be considered 
unrelated. Clearly, by properly manipulating -i, a GEWF code can provide UEP as 
well.  
 
C. Generalized expanding window fountain decoding process 
With regard to the GEWF decoding process, belief propagation (BP) algorithm 
[1] is a suitable approach. It is preferred because of its low computational complexity. 
For the error probability analysis of finite length GEWF codes, the state of an BP 
decoder is described by (c; r; u), where c denotes the number of output symbols 
reduced to degree greater than 1 (i.e. the size of the cloud), r denotes the number of 
output symbols reduced to degree equal to 1 (i.e. the size of the ripple), and u denotes 
the number of unrecovered input symbols, respectively. The state generating function 
is then described by Pu(x; y) =Σ p c,r,u; where pc,r,u represents the state probability. 
 
 8
III. RECURSIVE STATE GENERATING FUNCTION FOR 
GENERALIZED EXPANDING WINDOW FOUNTAIN 
DECODER 
In this section, we derive the state probabilities of a GEWF decoder. A GEWF 
code with parameters (k1, k , Ω(x1),Φ(x1, x2)), k ≧ k1 is considered. At the receiver 
side, we assume that the receiver has collected n1 class-1 encoded symbols and n2 
class-2 encoded symbols. We further assume that at every step of the decoding 
process, a ripple element is chosen uniformly at random from the ensemble of the 
class-1 and the class-2 ripples. As a result, if there are r1 class-1 ripple elements and r2 
class-2 ripple elements, the probability of choosing a class-i ripple element to the next 
step is ri r1+r2. We denote this probability as pri .  
Given the above parameters in a GEWF code, the following theorem gives a 
recursive state generating function for a transition from one decoding step to the next. 
 
 
In addition, we use pij to denote the probability that a randomly chosen class-j ripple 
element is of reduced degree 0 after the transition (from ui to ui¡1), and use gij to 
denote the probability that a randomly chosen class-j cloud element is of reduced 
degree one after the transition (from ui to ui-1). 
Theorem 1: Given u1 and u2 at this step, the number of unrecovered symbols at 
the next step are either (u1 – 1, u2) or (u1, u2 - 1). The first case is that one of the 
class-1 input symbols is recovered. The state generating function is 
 10
 
Furthermore, the probability of the initial state for the GEWF decoder is 
calculated as follows. We set the initial function Pinit(x, y, z, w) = xn1y0zn2w0: In the 
beginning of the decoding process, -1 is the probability that a chosen class-1 encoded 
symbol is in the class-1 ripple, Φ1 = Φ1,0+Φ0,1 is the probability that a chosen 
class-2 encoded symbol is in the class-2 ripple. Note that only if c1+r1 = n1 and c2+r2 
= n2, 
 
 
Otherwise, pc1,r1,k1,c2,r2,k,k1 = 0. From the above we get the following state generating 
function: 
 
 
IV. CASE STUDY 
Here we provide an example to demonstrate the potential gain in coding 
efficiency of GEWF codes. We simulate the probability of success - i.e. the 
probability that all the source symbols are recovered for the following three coding 
mechanisms: 
1) The source symbols are partitioned into two equal-sized disjoint subsets, or 
first and second halves. Each subset is individually coded using an identical 
fountain code. 
2) The source symbols are partitioned into two equal-sized disjoint subsets. The 
first phase of a GEWF code encodes over one of the subsets. The second phase 
of a GEWF code then encodes over both subsets.  
3) The source symbols are encoded by one single fountain code. 
In our comparison, we consider the case where a recipient receives exactly the 
same number of encoded symbols for the two phases. 
For case 1 we use a robust soliton distribution (RSD) -1 with parameters c = 0.05, 
δ= 0.5 over the subset of first half and the second half of source symbols 
independently. For Case 2, we also use the same RSD for the first subcode of the 
 12
 
Figure 4 and 5 show the probability of recovering all source symbols with different 
overhead. Obviously we can observe that when the total overhead is fixed, the GEWF 
code has a higher probability of recovering the whole source data than case 1 (the red 
line with stars). The figures also show that the time used for the GEWF code to 
recover all of the source data is shorter than case 1 which encodes each small blocks 
independently. 
 
V. CONCLUSION 
In this report, we introduced the GEWF codes in order to improve the efficiency in 
live broadcast situations. We consider a composite fountain code that can encode the 
progressively expanding set of source symbols. As a broadcast goes on, the 
transmitter collects more and more source symbols, and the transmitter can adapt the 
size of source block to combine more symbols progressively. When the encoder can 
encode with a larger block size, the overhead may be reduced. We derived a recursive 
state generating function of the GEWF decoder for the live performance evaluation in 
live broadcast services. For any degree distribution of GEWF codes, we can compute 
the corresponding failure probability at any decoding state. In case study we 
demonstrate that the performance in terms of packet recovery for GEWF codes can be 
better than LT codes under some cases in the live broadcast applications. The GEWF 
codes is useful for decreasing the live overhead. 
 
 
