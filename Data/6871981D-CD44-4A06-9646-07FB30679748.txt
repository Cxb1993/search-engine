 目錄 
摘要 ........................................................................................................................................................ 3 
Abstract .................................................................................................................................................. 7 
一、 前言 ........................................................................................................................................ 8 
二、 本學年度研究項目及成果 .................................................................................................... 9 
I. VMC-REM：以 SysML 為基礎之多核心嵌入式系統需求塑模環境： ......................... 12 
一、 研究內容 .............................................................................................................. 13 
二、 目前成果 .............................................................................................................. 15 
II. VMC-MUM：支援多核心嵌入式軟體設計之多重觀點整合模型與可再用元件庫： . 20 
一、 研究內容 .............................................................................................................. 21 
二、 目前成果： .......................................................................................................... 23 
III. VMC-DSS：設計樣式支援系統: ................................................................................... 28 
一、 研究內容: ............................................................................................................. 28 
二、 目前成果 .............................................................................................................. 32 
IV. VMC-SYN: 多核心嵌入式軟體合成及程式碼生成 .................................................... 34 
一、 研究內容: ............................................................................................................. 35 
二、 目前成果 .............................................................................................................. 36 
V. VMC-AM: 架構及效能調校支援實作 .............................................................................. 40 
一、 研究內容: ............................................................................................................. 40 
二、 目前成果 .............................................................................................................. 41 
VI. VMC-PPO: 平行程式優化支援實作 ............................................................................. 47 
一、 研究內容: ............................................................................................................. 47 
二、 目前成果 .............................................................................................................. 54 
VII. VMC-TMS: 測試支援系統 ............................................................................................ 56 
一、 研究內容: ............................................................................................................. 57 
二、 目前成果 .............................................................................................................. 62 
三、 計畫成果(期刊、論文發表) ............................................................................................... 67 
四、 結論與未來工作 .................................................................................................................. 70 
 I. 子計畫一: 以SysML為基礎之多核心嵌入式系統需求塑模環境： 
本子計畫主要在需求階段解決因自然語言所描術的需求常有模糊不清、不一致等問題，使
得訂定規格所帶來的效益減低，成本增加。在執行嵌入式軟體開發的過程中有很多的問題，
而其重要的問題之一，就是如何幫助系統開發人員從先前開發過的案例中找尋符合目前系
統的可重用軟體需求，並利用重用技術減少系統開發成本、加快研發速度。然而這個問題
不容易解決的原因在於缺乏能夠提供系統開發人員瞭解需求重用的資訊，因而需要人工逐
一檢視需求文件。本研究中將結合需求訪談與編輯、樣板及SysML圖三種元素到軟體中，
利用介面引導搭配專家樣板實現需求重用，並讓系統開發人員了解使用者需求的正確與
否，預期將可減少開發人員思索如何定義需求屬性的時間，提高開發效率。 
II. 子計畫二:多重觀點整合模型與可再利用元件庫: 
本子計劃主要目的在支援多核心嵌入式軟體設計之多重觀點整合模型與可再用元件庫
(VMC_MUM)，分析了XML-based Unified Model 在嵌入式系統中之限制及元件再利用，以
物件導向技術(OO Technologies) 作為基礎，主要原因是目前物件導向分析及設計語言如
UML 及相關物件導向程式語言，如Java，C++已被廣泛的接受與使用，本子計劃分析了重
觀點整合模型與可再用元件庫： 第一是使用先前在XML為基礎的軟體標準整合模型研究
的成果，定義出一個以模型為基礎之XML 系統文件描述模型，稱為XML-based Unified 
Model Metamodel。 二是使用Reusable Design Component Repository，藉由元件式資料庫之
再利用性來提高軟體品質及產能。最後透過本子計畫的Unified and Integration Model 作各
子計劃之間的銜接與資訊交換。將各子計畫所採用不同之標準整合後，透過一致的表現方
式以及整合鏈結(Integration Links)的串接，有效達到跨階段、觀點間相關連資訊的串接與再
用。 
III. 子計畫三：設計樣式支援系統: 
本計畫重點著重於系統開發者在設計方面的支援，即VMC之設計應用子系統（Design 
Supporting Subsystem for VMC，簡稱為VMC-DSS）主要功能的設計與開發，包含樣式塑模
模組、操作定義模組以及硬體資訊定義模組，並與其他子計畫系統做進一步的整合，且以
一嵌入式系統實例驗證本研究之實用性。本計畫預期提供系統開發者一個完整的UML系統
設計流程環境，即選定硬體規範、設計與套用樣式、定義操作功能，用以提供其他子計畫
銜接之所需的設計相關資訊。 
VII. 子計畫七：多核心嵌入式軟體之測試支援系統 
在多核心嵌入式軟體的軟體開發的過程中，軟體測試是一項龐大的工程，更是軟體產品執
行品質控管的重要關鍵。然而軟體測試工作往往需要花費很多的人力及物力，加上嵌入式
系統的硬體資源的限制，使得嵌入式軟體的測試較為困難。此外多核心嵌入式軟體之
concurrent program 存在很多不確定性，且相對於 sequence program 也較難除錯。然而，目
前大部分嵌入式軟體開發環境也較缺乏自動化的軟體測試工具來輔助。為了減輕這些問
題，本子計畫建構了一個支援嵌入式軟體開發的 cross-testing 的自動化測試環境系統。能提
供自動執行多回合測試機制；降低測試工程師的負擔，增進嵌入式系統執行測試工作的效
率。以「支援平行程式自動化測試」及「object testing」為主找出平行程式在資料同步時潛
在的錯誤，藉由檢查多執行緒共同存取共享資源 synchronization lock 的一致性及監控所有
synchronization primitives 事件執行的順序來判斷是否有潛在的 race condition。而平行程式
的效率也是開發人員所關注的項目，本子計畫針對多核心來平行程式效能的測試，可以即
時監控 CPU 各個核心的利用率、程式執行時間。此外，我們也將發展如何提昇平行效能的
方法及發展配合多核心嵌入式軟體的測試方法，例如配合 OpenMP 及 TBB 的測試方法。 
 
關鍵詞: 嵌入式系統, 多核心, 統一塑模語言,系統塑模語言,統一塑模,自由軟體, 軟體設計框
架 
一、 前言 
本整合型計畫網羅了各方面的專家，包括了需求分析、軟體設計、軟體工程、嵌入式系統、
平行化計算、軟體測試、系統整合等，共同開發設計出一套整合式多核心嵌入式軟體之模
型驅動整合開發環境–VERTAF/Multi-Core (VMC)。VMC對於目前國內嵌入式軟體產業缺
乏支援自動化的軟體發展整合開發環境現象，提供一個符合開放原始碼(open source)規範的
選擇，進而提升國內嵌入式產業軟體設計能力與品質。 
本整合型開發計畫(簡稱 VMC 計畫)為三年期長期計畫，目前為第二年，横跨五所大專院校
合作，因此若沒有一致的專案管理方式與技術整合機制，會造成資源浪費、時程落後、品
質不齊、無法整合等問題。因此總計畫依據 Light-weight CMMI 的方式，溝通、協調與管
理整個 VMC 計畫，如圖二所示，總計畫的重點在於架構協調、專案管理、規格控制、與
品質控制等議題。 
 
 
圖 2 總計畫與其它子計畫關係圖 
 
A. 架構管理: 主要在確認各子計畫對 VMC 系統有一致的架構認知，特別是在介面的溝通
上。 
的環境，方便軟體測試的進行，增加測試的效能，提高測試的coverage，降低軟體
的錯誤率。另外，預計發展出提昇Code Coverage 的方法及配合多核心嵌入式軟體
的測試方法。 
就第一年的成果而言，需求塑模利用需求模板(Requirement template)對 DVR 例子分析
重要資訊，設計樣式則針對 DVR 中的平行模型，例如 software pipeline 等定義了樣式
模板。而 DVR 系統也以 QP 及 TBB 完成整合及實作並在 PC 端做展示，其中包含系統
功能測試及監測部份功能，擷取系統執行期資訊並加以分析，以上成果亦有論文發表於
會議及期刊，此成果將會在下節詳列。 
在第二年的計畫中增加了二個新的子計畫分別為多重觀點整合模型與可再用元件庫
(VMC-MUM)以及平行程式優化支援實作(VMC-PPO)。 透過子計畫二，各子畫目前已
按 DVR 例子提供 input/output 範例進行資訊交換整合。此外 VMC 計畫利用 Trac project 
建置專案管理網站(http://140.123.105.205/projects/vmc)。Trac 搭配 SVN 來使用，含括
文件，時間軸追蹤，產品路線圖，瀏覽原始碼，新增/檢視待辦事項，搜尋等功能) ，
提供計畫進度管理、會議紀綠等相關文件及各子計畫之設計產出之管理，並提供各子計
畫交換資訊及解決問題的地方。 
下圖 3 為 wiki 文件管理畫面，包含文件如下： 
1. VMCMeetingMinutes: 
存放各子計畫每次開會的會議紀錄。 
2. Documents： 
主要為 light weight CMMI 文件管理 
3. DVRSourceCode 
存放第一年實作之 DVR source code 
4. DVRModels 
存放以 papyrus 設計之 DVR 塑模 
 
 圖 5 Roadmap 畫面 
 
圖 6 為源碼瀏覽畫面，主要是利用 SVN 為後端版本控制系統，前端 Trac 提供使用者查詢
及管理，SVN logs，可以看到修改紀錄， 版本比對等資訊。 
 
圖 6 源碼瀏覽及版本控管畫面 
 
為了第二年各子計畫之間的整合及塑模之間資料一致性的控管及追踨，各子計畫實作三項
計畫整合工作，包含：API 介面制定及 Data dictionary。就 API 制定的目的而言，各子計畫
制訂的 API 交由子計畫二統一實作，提供子計畫間訊息及資料的交流及傳遞。交流的技術
主要以 XML 格式為主。另外由於系統的 model 之間彼此往往會具有相依性，需要為 model
之間建立鏈結，以維護不同設計階段各 model 之間的關係，我們透過 data dictionary 制訂，
維護不同 model 之間資料的一致性，達到整合的目標及 VMC 功能的正確性。 
 
本章節我們將針對新增的子計畫及原有子計畫目前之研究內容及進度做說明： 
 
I. VMC-REM：以 SysML 為基礎之多核心嵌入式系統需求塑模環境： 
在計畫第二年的進期，本子計畫主要的成果是在於充實第一年進期中所建立的 SysML 需求
 圖 7 需求模板 
 
2、 重用需求資料庫 
我們運用重用資料庫(Reuse Library)進行需求重用，以便有效率地需求重用及引導使
用者建構需求。考慮到嵌入式開發專案多種開發特性，像客制化、領域差異性高、開
發時程緊湊等等，我們的需求庫存放所有開發中或已開發的重用嵌入式軟體需求資
料，針對硬體規格差異性小、使用者需求相近、系列產品去進行需求重用，以利於縮
短開發週期，進一步降低開發成本。 
系統設計架構如圖 8 重用資料庫系統架構 ，此以物件導向概念開發的重用資料庫系
統將產生不同類型的文件，分別代表了各自的意義，以下分別說明。這些文件會經由
本系統檢查是否符合格式，進而經由 XML Generator 產生 XML 文件記錄相關資訊，
最後將元件與 XML 文件一起存入資料庫中，將來檢索元件時也依據這些 XML 記錄
資訊來進行條件檢索。 
本計畫目前建立：需求擷取模組(Requirement elicitation module)、SysML 圖形編輯器
(SysML diagram editor)、重用需求資料庫(Requirement reuse library)。下圖 9 VMC_REM
系統架構圖為系統架構圖。 
 
圖 9 VMC_REM 系統架構圖 
 
利用 DVR(Digital Video Recording)作為案例。DVR 系統是基於嵌入式 ARM 處理器，
利用數個攝影機拍攝影像，用多核心處理器平行接收及做存放的處理，可即時傳給遠
端使用者監看。架構圖如下： 
 
圖 10 DVR 架構圖 
1. 輸入需求 
Eclipse 
Operation System 
 
Eclipse modeling 
framework (EMF) 
Eclipse 
model-to-model 
transformation 
(M2M) 
Requirement 
elicitation module 
SysML diagram 
editor 
Requirement reuse library 
 < reqInfo xmi:id="_W4K6QGxJEd6SRrRO6Ugvjg" reqID="FNR1" 
reqName="connectionServer" currentVersion="Ex: 1.0.0" previousVersion="Ex: Null" 
projectName="Video Streaming Server" estalishDate="Ex: 2010.4.30" adaptDate="Ex: 2010.5.1" 
establishUser="Ex: Administrator" adapter="Ex: programmer" deriveFrom="Ex: Use Case 1" 
refineBy="Ex: FNR2" verifyBy="Ex: FNR3" satisfyTo="Ex: FNR4" 
base_Class="_xGO08E6BEd6YO4XoPnfHow" reqKind="Functional"/> 
  < reqTemplate xmi:id="_W4K6QWxJEd6SRrRO6Ugvjg" targetSystemUser="Ex: consumer" 
requirementDescription="依照要求去呼應相對應的元件來提供服務" codingLanguage="Ex: 
JAVA" transRate="Ex: 每秒 5 個 frame" clientNum="提供 5 個客戶端連線" cpuNum="雙 CPU" 
cpuCore="4 核心" memoryConstraint="1GB" powerConsume="800watts" systemSched="Ex: No 
Premption" systemTimeConstraint="Ex: 需在 5 秒內回應" functionAtomic="Ex: 
ConnectionDriver" postCondition="Ex: 傳送工作完成訊息給 statusManager" preCondition="Ex: 
statusManager 確認使用者身份" Priority="Ex: High" COTS="Ex: No" systemPlatform="Linux" 
base_Class="_xGO08E6BEd6YO4XoPnfHow"/> 
表 3 XML 格式紀錄檔案 
 
2. 載入專家樣板 
將修改過去案例或藉由領域專家設定專家樣板，累積這些經驗樣版，快速引導使用
者完成需求重用，也就是需求塑模。專家樣板分為三步驟，搜尋、專案屬性、需求
屬性，專家樣板的介面如下： 
 
圖 12 專家樣板檢索介面(輸入條件查詢) 
 
硬體限制 Hardware 
Platform:PB11MPCore 
CPU:ARM 11 ,核心數2以上 
Memory: 至少 128 MB以上 
軟體限制 Language: C 
O.S: Linux 
其他檢索條件 Established Year: 2009 
Creator: joe 
表 4 專家樣板檢索條件 
 
 
               圖 15 專家樣板檢索介面(檢索結果) 
 
步驟二、列出符合的專家樣板資訊 依據表三的檢索條件輸入到系統檢索畫面中，
並且按下檢索鍵，即可檢索到所有符合輸入條件限制的專家樣板，當相符項目出現
多個以上時，可以由系統檢視畫面中查詢元件的相關資訊，快速找到符合使用者需
求的元件，並且快速瞭解如何重用需求。 
 
II. VMC-MUM：支援多核心嵌入式軟體設計之多重觀點整合模型與可再用元件庫： 
本子計畫實作出一個支援多核心嵌入式軟體設計之多重觀點整合模型與可再用元件庫
(VMC_MUM)及與物件分析、設計、程式之整合及維護的議題。目前已完成之項目為： 
1. 設計一 Unified Model 支援整個 VMC 計畫之軟體生命週期 
2. 從實務中來設計多核心嵌入式軟體設計(VMC)之限制、實作、衝突及分析 
3. 設計及開發支援 Repository 及 Unified Model Schema 之 Editor 
4. Multi-View 支援各階段之模型及整合 
同時我們擴展軟體工程的理念，將軟體工程的觀念導入整個嵌入式系統開發之生命週期，
本子計畫的理論基礎是在 XML 為基礎的軟體標準整合模型(XUM)研究成果之
上。在此，本子計畫建立一個新的 XML-Based Unified Model(XUM)，它較原 XUM
新增了幾個針對多核心嵌入式軟體項目： 
1. 建立多重觀點間一致性確認(Consistency Checking)的機制，並透過在模型資
訊中新增前置條件(Pre-Condition)與後置條件(Post-Condition)等項目做為支
援。 
2. 處理硬體限制與軟體開發之間的衝突，透過限制衝突解決資訊加以處理。 
3. 利用硬體平台相依(Platform Dependent)與非相依(Platform Independent)來做
為各種觀點的主要分類特性。 
為了建立這樣的一個XUM，我們定義了一個以模型為基礎之XML系統文件描述
模型，稱之為XML-Based Unified Model Metamodel(XUMM)。它描述出Unified and 
Integration Model的輪廓(Schema)，同時讓我們可以合併(Consolidate)、協同
(Coordinate)在軟體週期各階段中，以不同軟體標準建置的模型圖的模型資訊。 
2、 MCES Reusable Design Component Repository 
針對VMC_MUM各相關功能進行模組化之關聯性探討、模組分析與設計、整合分
析、原型發展後，設計一套具轉換性質的平台。VMC_MUM中前述各模組間之關
係整體而言，其本架構之組織運作功能與設計目的，可區分為二個階段(Stages)
相互銜接，概略說明如下：在第一階段－產生出再使用軟體元件 (Reusable 
Components，RC)，與蒐集程式的知識並產生原始述語(Primitive Predicate)，我們
用來替Reusable Components建立正規化的知識，使其成為正規化軟體元件(FRC)
及定義相關之推理規則，並將程式Artifacts及FRC存入相對的Reuse Component 
Library中，藉由搜尋樹產生Artifacts，並且完成正規化之再使用元件 (Formal 
Reusable Components, FRC)，然後儲存至再使用程式庫中，並以一有效率的元件
存取機具(Library Retrieving Tool, LRT)，提供後續擷取所需；第二階段－XUM之
轉換及傳遞，在XUM裡的整合鏈結提供了各類模型的整合機制，如果模型間存在
著抽象關係，XUM會記錄該模型間的抽象鏈結，而接收此XUM資訊之子計畫將
會建立跨階段之相關聯資訊分析與連結，並支援跨階段相關聯資訊間的追蹤需求。 
3、 Modeling Traceability & Integration Management 
在XUM的理論中提出一個方法用以整合所有的標準於一個基礎於XML的整合模
C. Description Document：使用者會對於專案與圖型檔案以自然語言進行描述，
我們將這些自然語言分類為此部份進行儲存。 
 
圖 16 子計畫二系統架構圖 
第三部份為 XML 文件產生，由使用者介面所接收到的資料，包含專案名稱、檔
案名稱等，透過第二部份的分析並將資料分類為 Classification Document, XML 
Document 與 Description Document 三部份後，依照資料庫的設計 XML Tag 儲存，
最後資料整合成一個 XML 檔案存到資料庫。而第四部份即為資料庫，資料庫的
部份藉由使用者透過我們設計的使用者介面輸入在各階段所產出以 XML檔案以
及其說明與相關資訊，我們接收到許多 XML 檔案與資訊，為了整合所有資訊並
以統一的方式儲存，我們制定了 XML 標籤(Tag)將接收到的資訊進行統一儲存。 
在 XML 標籤的制定，我們將其分成三個部份：Classification Document, XML 
Document 與 Description Document。Classification Document 為描述分類相關的資
訊，如階段與專案名稱，XML Document 描述 XML 圖形的所有資訊，包含 XML
檔案與檔案位址，Description Document 為所有以自然文字所描述的部份。此三
部份所定義的 XML 標籤如下表： 
 
 
 
有指引的使用者介面，讓使用者得以快速上手。第二，使用者將再利用元件的資
料填入表格中，藉由填入的過程，可得知該元件的類型、結構圖、UML 圖、程
式語言、作業系統及硬體的限制等，此動作有助於再利用元件的分類、擷取及理
解。在此步驟也包含版本控管的功能，使用者可在已有的元件上加上新的描述及
功能。第三步驟則透過 XML 轉換器作文件的轉換，將使用者所輸入的再利用元
件內容轉換成 XML 文件的格式以便儲存。第四步驟是透過 XML 產生器得到
XML 文件，透過 XML 文件的擴展、結構、描述及確認等特性制定符合系統的
Tag 做結構性的描述。最後一個步驟是將產生出的 XML 文件儲存至再利用元件
庫，在本系統所使用的元件庫為原生型 XML 資料庫，透過原生型 XML 資料庫
的方便直接存取及配合許多 API，以提供查詢、檢索、更新資料庫等功能，在整
合時比較方便。 
 
圖 17 RCR Editor 系統架構圖 
再利用元件主要考量到類型、管理控制、系統架構圖、UML 圖、程式碼、程式
語言、使用的系統及硬體的限制等，其欄位對 XML 產生對應的 Element 及 Tag
如表 6 元件對應 XML 表中所示：  
XML Element XML Tag 
Type <type> 
ID <id> 
Name <name> 
Management Author <management_author> 
e-mail <management_e-mail> 
Version <management_version> 
Intent <intent> 
Structure <structure> 
UML <uml> 
Code <code> 
Programming Language <programming_language> 
Programming OS <programming_os> 
Hardware 
Constraint 
Power <hardware_constraint_power> 
Weight <hardware_constraint_weight> 
Cost <hardware_constraint_cost> 
Memory <hardware_constraint_memory> 
Screen size <hardware_constraint_screen_size> 
Bandwidth <hardware_constraint_bandwidth> 
Other <hardware_constraint_other> 
Note <note> 
表 6 元件對應 XML 表 
 III. VMC-DSS：設計樣式支援系統: 
本子計畫預期提供系統開發者一個完整的 UML 系統設計流程環境，即選定硬體規範、設
計與套用樣式、定義操作功能，用以提供其他子計畫銜接之所需的設計相關資訊。基本上，
本研究的功能可分為三個方面：樣式塑模模組（Pattern Modeling Module）、操作定義模組
（Operation Definition Module）以及硬體資訊定義模組(Hardware Definition Module)，其系
統架構如圖 20 VMC-DSS 系統架構所示： 
1. 樣式塑模模組：樣式設計師（pattern designer）透過本功能以 UML 的 Profile 為基礎，
設計多核心程式庫樣式，並存入樣式儲存庫，使嵌入式系統設計師（embedding designer）
在設計系統時可以正確地套用樣式。由於第二年計畫的樣式侷限於多核心程式庫特有
的結構與行為，故較其一般所熟知的設計樣式更符合嵌入式多核心程式設計的需求。 
2. 操作定義模組：嵌入式系統設計師透過操作定義模組，在設計 UML 類別圖時可以程式
語言或虛擬碼的方式進行初步的行為定義，以利提供後續程式碼產生時（VMC-SYN）
詳細的資訊，提升子計畫四的轉換效率。 
3. 硬體資訊定義模組：能提供嵌入式系統設計師撰寫系統未來需被執行在硬體上的相關
描述，並參照需求模型中的需求描述定義初步的硬體相關對應資訊。 
 
 
圖 20 VMC-DSS 系統架構 
一、 研究內容: 
本節將以圖 18 描述本研究應用於多核心嵌入式軟體開發的角色與流程，首先本
系統提供樣式設計師可以 UML Profile 技術描述多核心嵌入式軟體設計樣式的
環境，每一設計樣式將包含功能性結構與非功能性結構描述，功能性結構即為
初步未經修飾設計（亦即 DP-模型）的抽象表示，其結構與限制均在描述何種
情形下可套用此一設計樣式，反之，非功能性結構所描述的為套用樣式後的設
置處理。 
以下將分別描述本研究相關的樣式模版定義、樣式為主模型轉換、與行為操作定義，闡述本系
統運作流程與應用設計樣式對於多核心嵌入式軟體設計之影響。 
樣式模版定義（Pattern Profile Definition） 
Profile 技術為 UML 針對不同應用領域所提供的擴充機制，於超模型階層描述較
特殊性的領域知識，既可保有可重用性，也可規範模型階層的設計。一般而言，
UML Profile 會包含模版（stereotype）、標籤值（tagged value）與限制（constraint），
本研究除了開發樣式支援系統，亦針對多核心嵌入式軟體設計開發一設計樣式
Command Pipeline 樣式，並以 UML Profile 技術描述其功能性結構與非功能性結
構，同時套用至 DVR 系統的子系統 PVE（Parallel Video Encoder）以降低多核
心嵌入式軟體開發開發的複雜度。 
DVR 為即時性多媒體錄影系統，其功能主要是能夠遠端並同步透過不同的攝影
鏡頭監控不同區域，主要包含兩大子系統 PVE 與 VSS（Video Streaming 
Server），PVE 負責由不同的攝影鏡頭擷取並壓縮影像資料為不同的資料格式，
而經過壓縮後的影像將交由 VSS 負責存檔或做即時性傳輸。PVE 子系統中主要
由 VideoEncoding 類別專責影像編碼工作，如圖 22 (a)VideoEncoding 類別; (b) 
VideoEncoding 類別每一影像編碼工作狀態轉移圖; (c)SF(CommandPipeline): 
Command Pipeline 樣式功能性結構 Profile(a)所示，該類別於初步設計提供五項
操作（operation），包含兩項存取操作（Get Raw Frame (GetRF())、Put Raw  Frame 
(PutRF())）與三項編碼操作（Discrete Cosine Transform (DCT())、Quantization 
(Q())、Huffman Encoding (HE())），圖 22 (a)VideoEncoding 類別; (b) 
VideoEncoding 類別每一影像編碼工作狀態轉移圖; (c)SF(CommandPipeline): 
Command Pipeline 樣式功能性結構 Profile(b)，影像資料透過 GetRF()獲得後，經
由三項無先後順序之編碼動作後，由 PutRF()輸出編碼後的影像資料。 
 
 
 
(a) (b) (c) 
圖 22 (a)VideoEncoding 類別; (b) VideoEncoding 類別每一影像編碼工作狀態轉
移圖; (c)SF(CommandPipeline): Command Pipeline 樣式功能性結構 Profile 
 
當此嵌入式系統架構轉換為多核心架構時，為了要改善期工作效率必須將無相依
1、 行為操作定義（Operation Definition） 
本研究主要目的在於提供開發人員基於需求模型，繼續進行細部的系統開發，系
統開發時可以針對特定的類別進行功能性需求的描述，並可輸出給 VMC-SYN
產生程式碼。圖 25 操作定義模組類別圖為操作定義模組的類別圖，操作定義模
組主要是根據 MVC（Model-View-Controller）的架構所設計，主要分成以
XMLParser 與 UML2ClassDiagram 為主的 Model、以 OdmDialog 為主的 View 以
及 ODMController 為主的 Controller。在 MVC 架構中，Model 主要扮演的角色為
程式功能及商業邏輯部分，View 負責呈現結果及處理使用者的操作變更，而
Controller 則負責連繫 Model 和 View：在 Model 有變更的時候通知 View 做相對
應的變更；在 View 被操作時去更新 Model 的狀態，如此一來便能達成 Model
和 View 鬆散耦合的目的，讓整個系統在維護方面更有彈性。 
 
圖 25操作定義模組類別圖 
 
二、 目前成果 
在本次研究中，為了實踐我們 MDA 理論的可行性，本研究實做一設計支援系統，本系統提供
系統開發者一個完整的 UML 系統設計流程環境，即選定硬體規範、設計與套用樣式、定義操
作功能，用以提供其他子計畫銜接之所需的設計相關資訊。以下是 VMC-DSS 目前已實際完成
的功能： 
 圖 27 操作定義模組介面 
圖 27 操作定義模組介面上方標籤頁面為切換在同一個類別圖中不同的類別，而下方標籤
頁面為切換在同一個類別內不同的行為操作（operation），程式碼編輯器的部分具有行號及關
鍵字變色功能，用以提供更直覺的操作定義環境。在定義時須選擇定義用的程式語言，例如：
虛擬碼、C++或 JAVA，以利子計畫四的程式碼產生作業。完成描述的操作定義將會依照 UML
的標準格式以不同的標籤嵌入於該類別圖 XML 檔案格式之中，以統一的格式提供給其他子計
畫使用。 
 
IV. VMC-SYN: 多核心嵌入式軟體合成及程式碼生成 
本子計畫(VMC-SYN)的主要目標在延伸 VERTAF 程式碼自動生成的能力，使用者透過
UML 工具來描述系統模型，讓程式碼生成器來自動生成具有可平行工作、可平行處理資料
和具有可平行處理資料流的程式碼。本計畫以第一年設計的 DVR 系統為例，接收子計畫
一(VMC-REM)針對 DVR 系統所設計的 requirement diagrams，以及子計畫三(VMC-PSS)的
class diagrams、block definition diagrams、和 state machine diagrams。第二年計畫的目標將
著重於多核心程式碼生成器的設計流程並支援更完整的平行模型(Parallel Model)提供系統
更多平行化程式碼生成的能力。除此之外我們也將透過介面的制定說明與其他子計畫之間
  
圖 28 程式碼生成器流程 
 
二、 目前成果 
目前進度主要集中於 State Machine Compiler 和 Parallelism Implementer 的實作，
以下分別介紹這兩部分： 
State Machine Compiler (SMC)，是將使用者畫的 state machine diagrams 和描述系
統功能的 class diagrams 翻譯成以 QP 程式架構的樹狀資料結構，每一個 state 
machine 在 QP 裡分別代表一個 Active Object (AO)，為了要把 semantics tree 翻
譯成帶有 QP 的程式架構，就需要 QP Information Files 的資訊，如此一來才能便
於程式碼的自動生成。SMC 的流程主要可分為以下三個部份：Tree Traversal、
QP Transformation 以及 QP Code Generator。圖 29 QP 的設計架構圖為 SMC 的
 圖 30 TBB 的設計架構圖 
介紹完 QP 和 TBB 的設計流程後，本計畫以第一年度所設計的 DVR 系統為基礎，
來實作程式碼生成器。目前以 DVR 系統中的 PVEEncoding 為例子來進行實作，
圖 31 PVEEncoding 的 Class Diagram 和圖 32 PVEEncoding 的 State Machine 
Diagram 為 PVEEncoding 的 Class Diagram 和 State Machine Diagram。 
 
 
圖 31 PVEEncoding 的 Class Diagram 
 
 
圖 32 PVEEncoding 的 State Machine Diagram 
 
以 PVEEncoding 的 state machine 為例(如圖 32 PVEEncoding 的 State Machine 
Diagram 所示)，transition 上有叫作 pipeline 的 stereotype，PI 會參考 pipeline 的
parallel model 來產生相對應的 TBB code。圖 35 Pipeline 的 Parallel Model 是
pipeline 的 parallel model。 
 
圖 35 Pipeline 的 Parallel Model 
V. VMC-AM: 架構及效能調校支援實作 
本子計劃(Subproject 5)主要著重於架構對應及整合後工具組之實際應用，首要之目標為設
計一多執行緒分析模組(multi-thread analysis module)以針對合成多核心嵌入式程式碼時，解
決多執行緒與多核心分配對應之問題。目地在提昇多核心嵌入式程式碼之效能及避免
Racing 及 deadlock 現象。此階段將利用 Intel 之所提供之軟體工具如 Intel® VTune™ 
Performance Analyzer, Intel® Thread Profiler 及 Intel® Thread Checker 等進行分析 。因最後
之多核心嵌入式程式碼將支援 Intel Threading Building Blocks (Intel TBB)語法，此階段亦將
配合提供 TBB 所需之程式庫及系統調配指標，進行反對應模組設計。形成一漸進式迴圈
(iterative loop)達成整體最佳效能。 
一、 研究內容: 
本架構之組織運作功能與設計目的可區分為兩個階段（Stages），相互銜接，概略說明如下：第
一年之目標為設計一多執行緒分析模組(multi-thread analysis module)以針對合成多核心嵌入式
程式碼時，解決多執行緒與多核心分配對應之問題。目地在提昇多核心嵌入式程式碼之效能及
避免 Racing 及 deadlock 現象。此階段將利用 Intel 之所提供之軟體工具如 Intel® VTune™ 
本研究順利完成以下主要工作項目: 
1.  SysML (.xml)parsing  
2. TBB library support on PC and Linux configuration file 
3. Digital Video Recording(DVR System) automake case study  
4. Vtune Tuning Assistant case study on Digital Video Recording(DVR System) 
第一工作項目先將跟子計劃四 code gen.時所需之硬體系統資源相關訊息建入一
嵌入式多核心軟體規格，以 deployment diagram 方式呈現。如圖 37 deployment 
diagram 所示。此圖中包括了由子計劃一中 user 對硬體系統之需求規格，如板子
的核心數(core number)、事件反應速度、OS 種類、硬體成本等。另外再加入子
計劃四 code gen.時所需之多核心運算程式庫支援，包括程式庫安裝資訊、及程式
庫種類等。本研究接著將此一 deployment diagram 產出 xml 檔，以便在後續階段
轉換為系統支援所需之 automake 檔. 
 
圖 37 deployment diagram 
 
第二工作項目為實作各對應硬體及驅動軟體之類別程式庫物件檔。並轉製成一
automake 檔，產出之 makefile 成功編譯子計劃四產出之 Digital Video 
Recording(DVR System)之 case study code.  詳細 deployment diagram 抽出之資
訊與 automake重要參數對應關係可由圖 38 Automake deployment 參數對照表綜
整。 
 
 
  
圖 39 DVR system diagram 
 
第四工作項目為使用 Vtune Tuning Assistant 分析 Digital Video Recording(DVR 
System)此一程式之部份執行結果，圖 36 到 38 為 Vtune 找出程式瓶頸之結果，
圖 39 到圖 42 為多核心效能之比較結果。目前是以核心數進行調整，研究對效能
及耗電進行比較。結果顯示當核心數增加時核心數增加時，效能(performance)有
獲得提昇，顯示本計劃產出之 Makefile 可正常運作，同時分析結果可幫助提昇
效能(performance)，但耗電量確在提昇效能(performance)之後有所降低。此為下
階段研究極待努力克服之議題。
 
圖 40 DVR Vtune 分析結果(一) 
 
 
 圖 43 DVR Tuning result(一) 
 
 
圖 44 DVR Tuning result(二) 
 
 
圖 45 DVR Tuning result(三) 
 
 
隨著處理器從單核心進展至雙核心、四核心，甚至部分應用於伺服器的八核心之
計算平臺，如何有效利用多核心的特性，並使應用程式於多執行緒的架構下加速
運行，就成了開發人員極需研究的課題。關於嵌入式計算領域，也從單核心成長
至多核心，為使原本效能備受限制之嵌入式裝置，透過多核心同步運行之機制，
盡可能提高其運算效能，本計畫將建置一高效能平行編譯器，載入既有之程式
碼，透過逐行逐段分析，輔以高效能平行演算法，基於 OpenMP 及 Intel Threading 
Building Block 多核心函式庫，產出平行程式碼，使其達到多核心同步執行，加
速其運算速度，並達到最大之產出，其概觀如圖 47 高效能平行編譯器概念圖所
示。 
 
 
 
圖 47 高效能平行編譯器概念圖 
 
本子計畫所開發，結合了平行技術與程式碼優化演算法，提供程式碼優化的基本
功能和學習模式。本計畫建置一多核心嵌入式軟體之高效能平行編譯器 (PPO)，
載入既有之程式碼，透過逐行逐段分析，輔以高效能平行演算法，基於 OpenMP 
及 Intel Threading Building Block 多核心函式庫，產出平行程式碼，使其達到多核
心同步執行，加速其運算速度，並達到最大之產出。有鑒於以往程式優化系統的
全面性，我們採取了區塊優化，也就是經過學習模式就每個迴圏區塊做一次優化
並記錄下來，以迴圏執行效率做為比較，去判定運算迴圏是否需要程式優化，因
此本系統利用 Intel TBB與OpenMP以及ROSE來達到程式碼平行與優化的效果。 
 
Code Source Code Optimization Code Parallelism Revised Code Output 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
圖 49 系統流程示意圖 
圖 49 系統流程示意圖為系統執行流程，當程式碼由子計畫四接收後，中間共會
經過八道處理程序，以下一一列舉說明： 
1. Control flow analysis 
 分析程式中的內部區塊為階層式與計算迴圏影響值。 
2. Data flow analysis 
分析程式中變數的生命周期。 
3. More Control flow analysis 
 分析程式中控制相依性。 
4. Static-single assignment 
 常數影響係數、靜態單一賦值。 
5. Global Optimizations 
 圖 51 SPPS 子系統架構圖 
接受使用者輸入之原始程式碼，逐行進行剖析，主要鎖定多數可平行運行之
迴圈，以平行程式撰寫時常用的關鍵字與平行化之架構為基礎，針對輸入程
式之上下文，以及各種區塊符號，判斷出各個程式區塊，最後交付後端之平
行優化子系統。 
由於本系統所採用的 ROSE 是由 C 語言所撰寫的故在使用者介面上，我們使
用 Visual Studio C#進行開發，但是在執行上我們是用 Python 去進行改寫，
以適應跨平台的環境。 
 
2. 平行子系統(Parallelism Subsystem, PS) 
當接受前端程式剖析子系統之結果，針對剖析子系統所判斷出各個可平行化
之標記部份，予以新增符合 TBB 或 OpenMP 之函式庫導引器，使其達到
平行優化之目標。圖 52 PS 子系統架構圖為 PS 子系統架構圖。 
 本子系統接受的輸入為剖析子系統之剖析紀錄檔，針對使用者指定之平行函
式目標(TBB 或 OpenMP)，於各個可平行化之部份，增加函式導引器，最後
產生平行程式碼。 
 
圖 52 PS 子系統架構圖 
 
3. 優化子系統(Optimization Subsystem, OS) 
將上一個子系統所產生出來的程式碼，更進一步去做最佳化。就是在除了平
行化的程式碼外，再去尋找可以使之增進執行效率的程式碼區塊，加以最佳
二、 目前成果 
我們利用了 ROSE 計畫中兩大部分 Program Analysis 與 Program Transformation 
and Optimizations 中的 Recognizing Loops、Generating Control Flow Graphs、
Dataflow Analysis、Partial Redundancy Elimination、Loop Optimization、Tailoring 
The Code GenerationFormat……等等函式類別，以 Pyhton 程式語言去撰寫與呼叫
ROSE 原有的程式以達到我們子計畫六所需要的應用。子計畫六主要執行程式名
稱為 vmc-ppo.py 
 我們 vmc-ppo.py 主要是以兩大函式為主，Auto Parallel 跟 Loop Optimizer。 
Auto Parallel 支援多執行緒的 source-to-source 轉換，也就是加上 OpenMP 的標籤
在程式碼之間，圖 55 Auto Parallel 執行畫面為呼叫 Auto Parallel 函式的畫面。呼
叫的參數定義為： 
     -i   指定為優化/平行原始碼的資料夾位置 
     -o  指定優化/平行過後原始碼輸出的資料夾位置 
     -omp 是否執行自動平行功能 
 
圖 55 Auto Parallel 執行畫面 
Loop Optimizer 在迴圏優化中主要使用三種不同的演算法： 
A. Loop fusion 
 將有相依性的 Loops 做結合 
B. Loop splitting 
 圖 57 C#使用者圖形介面 
 
VII. VMC-TMS: 測試支援系統 
本計劃主要是以軟體品質提昇、品質控管為出發點，針對「多核心嵌入式軟體之模型驅動
整合開發環境」結合軟體開發流程之需求分析、設計及撰寫程式碼各階段，做不同層次的
軟體品質測試及測試的管理。在多核心嵌入式軟體的軟體開發的過程中，軟體測試是一項
龐大的工程，更是軟體產品執行品質控管的重要關鍵，有鑒於軟體系統開發過程中，常因
人為疏失所造成規格不符、設計錯誤、程式撰寫疏漏等問題，不僅延誤開發時間，更導致
成本增加，嚴重影響軟體品質。為了能讓軟體測試與驗證能夠有效的應用在實際的案例
上，一個整合軟體開發環境的測試工具將提供軟體開發人員更方便進行軟體測試流程。然
而目前大部分軟體開發環境都缺乏整合性的軟體測試工具之輔助，或測試工具僅侷限於程
 圖 58 MS 系統架構圖 
 
 
1、 前置處理模組 (Pre-Processing Module ,PRPM) 
PRPM 用來接收原始程式碼，透過程式碼分析器(Code Analyzer)來剖析(parse)及
切割(tokenize)原始程式碼，Sequential Code Analyzer 及 Concurrent Code Analyzer
擷取出程式資訊並且分類為 sequential program 部分(例如 Function 名稱、參數、
Key-Word)及 concurrent program 部分，而 Test Case Generation Module 來自動產
生測試案例(test case)並且找出需插入程式片段的位置使 Code Instrumentation 
Module能產生測試所需的 instrumented program。而Code Analyzer來自動產生 test 
case 並且找出需插入 synchronization instructions 程式片段的位置使得 Concurrent 
Code Instrumentation Module 能產生測試所需的 instrumented code，此外測試工程
師也可自行輸入 test case 及 instrument code 所需的資訊。此系統架構如圖 59 
VMC-TMS/PRPM 模組架構圖所示。 
 
 圖 60 VMC-TMS/HSATM 模組架構圖 
 
3、 後置處理模組 (Post-Processing Module ,POPM ) 
本模組主要是在分析及處理測試的結果，將其測試結果分類成各個項目，並產
生文字及圖形的報表，Test Log Analyzer會依據Test Log的資訊來做及時的分
析，將分析的結果動態的回饋給PRPM及HSATM，做為下一步測試的參考，Test 
Result Presentation Module 會將測試結果以圖形化的方式來呈現結果。系統架
構如圖 61所示。 
 
圖 61 MC-TMS/POPM 模組架構圖 
 
 
 
C. Coverage testing 
D. Race condition testing 
Performance testing 
 
圖 63 System architecture layers 
 
二、 目前成果 
以下為本計畫所開發出來的嵌入式軟體自動測試環境，針對 performance test、
object test、race condition test 的操作介面及及實驗數據，分別說明如下所示。 
1、 Performance test 
在 runtime 時動態監控 multi-thread program 在多核心嵌入式開發板上執行的
CPU utilization。 
 
 圖 66 待測程式 
 
根據程式碼分析器剖析出所有 method 的名稱、參數、回傳型態等並自動產生
Test Driver 使之可呼叫待測程式，並讀入測試案例。可各別編輯每個 method
的 Test Driver。此介面為顯示關於 object 型別參數之 test driver，及讀入 test 
data。 
 
圖 67 程式碼分析器 
支援 object 型別的 unit test 測試結果，以圖形及文字介面顯示各個 method 的
輸入及產出是否如預期結果。 
 圖 70 測試 concurrent porogram race condition 
 
4、 實驗數據 
在此我們針對 C++資料結構範例作為待測程式，分別進行 unit testing 及 line 
coverage test，branch coverage test 如表 7，表 8，表 9 所示，及以測試 C++ 
Pthread 所實作的平行化矩陣運算效能測試，如表 10 所示。 
 
Function name Test case 
0 1 2 3 4 
getSubString success exception out of 
range 
success success  exception out of 
range  
electricityTraiff success assertion failed success assertion failed success 
factorial success success assertion failed assertion failed success 
insertion_sort success success Segment fault Segment fault Segment fault 
seqsearch success success success success success 
fractionCalculator success assertion failed success success success 
表 7 
 
 
 
 
 
 
為85%~90%之間，其餘部份除了最後階段測試及測試文件繳交，另需完成最後階段整
合。 
除了實作及整合VMC系統，以下我們將列出這二年在研究或比賽等活動的成果。 
Journal： 
1. Chang, C.H.; Lu, C.W.; Chu, C.W.; Chen, W.C.; and Chen, T.Y., "Model-based 
Object-oriented Requirement Engineering for Supporting the Integration of Software 
Documents," Submitted to Journal of Software Engineering Studies. 
2. P.A. Hsiung, S.W. Lin, Y.R. Chen, C.H. Huang, C.H. Shih and C.W. Chu, “Modeling 
and verification of real-time embedded systems with urgency”, The Journal of Systems 
and Software, Vol. 82, pp. 1627-1641, October 2009 (EI) 
3. C.S. Lin, P.A. Hsiung, S.W. Lin, Y.R. Chen, C.H. Lu, S.Y. Tong, W.T. Su, C.H. Shih, 
N.L. Hsueh, C.H. Chang, and C.S.Koong, “VERTAF/Multi-Core: A SysML-based 
Application Framework for Multi-Core Embedded Software Development,” Journal of 
the Chinese Institute of Engineers, Vol. 32, No. 7, pp. 985-991 
Conference： 
4. Tung, H.Y.; Chang, C.H.; Chu, C.W.; Yang, H.J.; and Lu, C.W., "From Applications, to 
Models and to Embedded System Code: A Modeling Approach in Action," to appear in 
the Proceedings of the 10th International Conference on Quality Software, 14-15 
(2010.07)(EI). 
5. You, C.R.; Xhao, T.Y.; Lin, B.Y.; Chang, C.H.; and Chu, C.W., "需求階段與設計階段
整合追蹤性之探討 ," Proceedings of the 2010 the E-Learning and Information 
Technology Symposium, 31 (2010.03). 
6. Chang, C.H.; Lu, C.W.; Chu, C.W.; Shih, C.H.; Hsiung, P.A.; Yang, C.T.; Hsueh, N.L.; 
and Koong, C.S.," SysML-based Requirement Modeling Environment for Multicore 
Embedded System," Proceedings of the 25th Annual ACM Symposium on Applied 
Computing (SAC'10), Volume III, 22-26 (2010.03), pp. 2224-2228. (EI)  
7. Tung, H.Y.; Chang, C.H.; and Chu, C.W., "Using UML to Implement Application on 
Different Embedded System," Proceedings of the 20th Workshop on Object-Oriented 
Technology and Applications, 20 (2009.11), pp. 1-6.  
8. Chang, C.H.; Liao, W.B.; Chu, C.W.; Xu, C.Q.; and Tong, C.Q., "XML-based 
Embedded Software Reusable Component Library System," Proceedings of 20th 
Workshop on Object-Oriented Technology and Applications, 20 (2009.11), pp. 115-121.  
9. Wei, J.Q.; Chang, C.H.; Huang, Y.R.; Chu, C.W., "再使用程式庫-以自動化倉管系統為
19. P.A. Hsiung,  S.W. Lin, Y.R. Chen, N.L. Hsueh,  C.H. Chang, C.H. Shih, C.S. Koong, 
C.S. Lin, C.H. Lu, S.Y. Tong, W.T. Su, and W.C. Chu. “Model-driven development of 
multi-core embedded software,” Workshop on Multicore Software Engineering, 2009. 
IWMSE '09, PP. 9 – 16, July 12, 2009. 
參與競賽、舉辦研討會與推廣說明會: 
1. P. A. Hsiung. Digital Video Recording on Embedded Multicore Systems. 九十七學年
度全國大學校院嵌入式系統設計競賽. 教育部顧問室、SOC 總聯盟 
2. P. A. Hsiung. Automatic Embedded System Code Generation for an Entrance Guard 
System with Mobile and Ubiquitous Control. 亞洲區 DSP 暨嵌入式系統應用競賽-台
灣區分區競賽. 美商德州儀器股份有限公司 
3. 教育部 98 年「『全國中小學資訊融入教學創意競賽』、『全國校園軟體設計創意競賽』
暨『全國校園國語文線上閱讀活動』 
4. Andorid 行動通訊平台暨數位家庭技術研討會, 主辦單位：東海大學資訊工程系、
前瞻晶片系統設計(SOC)學程計畫 
5. 爭取到 ACM The 25th Symposium On Applied Computing (ACM SAC 2011), March 
13-17, 2011, Tunghai University, Taichung, Taiwan 
產學合作： 
1. 與麗台科技共同合作多核心異質平臺軟體API開發及整合。 
四、 結論與未來工作 
以下我們將按每個子計畫於第二年的內容及未來工作進行說明 
I. 子計畫一: 以SysML為基礎之多核心嵌入式系統需求塑模環境： 
在計畫第二年的進期，我們主要的成果是在於充實第一年進期中所建立的SysML需求塑
模模組，同時建立重用需求資料庫機制以及專家需求樣版，讓系統使用者不僅利用XML
文件所呈現的畫面來檢索合適的專家樣板，並且利用經由介面提供其需求的訪談記錄及
輔助發開的SysML圖，提供使用者當需求建立時的相關資訊及輔助使用者確認需求塑模
的正確性，讓使用者在需求重用時，能夠讓當初建立需求時的經驗與實作能夠被參考、
重用，這樣不但可以讓嵌入式軟體開發者更快開發軟體系統，而且能夠達到嵌入式軟體
「更低成本」的需求，這也正是一開始本研究最主要的研究目的。 
在計畫未來第三年進期中，我們將進一步把可再用需求元件庫以及專家需求樣版整合其
他子計畫進行驗證與改進，同時，為了達到更好的需求追蹤與管理，利用建立需求溯源
整合管理與模型追踨之整合。 
III. 子計畫三：設計樣式支援系統: 
本研究利用模型導向的方法，基於樣式的模型轉換以提升嵌入式多核心系統設計品
質，將嵌入式系統開發抽象層級由實做層級拉到設計層級，開發者可透過本系統設計
符合需求階段所提出的規格，並同時引導開發者提供足夠的資訊以供後續實作階段程
式碼產生與實體環境執行需求，在設計階段承先（需求階段）啟後（實作與執行階段）
以視覺化的方式將模型導向的開發方式導入嵌入式系統設計中，除了降低了多核心嵌
入式軟體設計的複雜度，也進而縮短開發時程，並以計有的樣式規範下引導方式減少
因人為設計產生的錯誤。 
未來希望可以發現，分析和制定出更多有關多核心嵌入式系統的程式庫樣式，如此一
來便可更豐富樣式庫，進而達到加速設計開發的目的。 
IV. 子計畫四：多核心嵌入式軟體合成及程式碼生成: 
本年度主要是以去年度的 DVR 系統為例子，來實作自動化平行程式碼生成器，我們
已經發展出一套完整的自動化流程。目前的進度主要集中在 State Machine Compiler 
(SMC)和 Parallel Implementer (PI)的實作上，SMC 主要倚賴 Quantum Platform (QP)，
PI 則著重於 Intel Threading Building Blocks (TBB)上。 
未來將繼續依自動化流程的步驟繼續實作下去，以下分別進行討論： 
Platform Mapper (PM)：將會根據不同的嵌入式平台來作 APIs 的 mapping，目前是以
SpursEngine 為目標。 
Requirement Analyzer (RA)：會根據使用者所提供的 requirement diagrams 來進行分
析，將來會以賽局理論(Game Theory)為基礎，根據使用者來需求來調整系統參數。 
圖 71 時程規劃與完成度百分比為本子計畫的時程規畫與目前完成度的百分比，SMC
和 PI 的完成度大概為 60%，並預計在六月底完成，之後預計在七月中前會完成 PM、
RA、TT、和 CE。 
 
Target-side的Cross測試架構及環境，主要分成四個部分，分別為前置處理模組(PRPM)、
主機端自動測試模組(HSATM)、目的端自動測試模組(TSATM)、後置處理模組(POPM)。
提供自動/半自動的基本測試功能，例如提供基本的unit test及自動化多回合coverage 
test，並以圖形化方式顯示測試結果，並可在runtime時監控測試結果。對於concurrent 
program的測試，我們也提供race condition 測試及multi-thread在multi-core上執行的效
能，此外，我們也針對各個子計畫的共同展示的DVR例子的程式碼當做測試例子，運
用我們的測試環境來做測試實驗，實驗結果也證明了我們所發展的測試環境是可以運做
的。本研究計畫未來將發展支援嵌入式多核心軟體的Threads及平行程式的測試方法，
發展提高自動測試精準度的技術及演算法，並與其他子系統的整合及更多實際案例的實
驗。 
