Figure 1: Fig1 (a) Modules and an fixed-outline region. (b) An infeasible floorplan. (c) A feasible floorpaln.
scheme based on B*-tree representation. Fixed-die floorplanning can be achieved by taking the outline constraint into its cost of the objective
function.
Some used mathematical approach for the problem. Moh et al. [22] formulated the floorplanning problem as a geometric program and
then transformed it into a convex optimization problem. Floorplanning with zero-deadspace ability is accomplished by SA. Recently, Zhan
et al. [27] proposed an analytical approach for fixed-outline floorplanning with soft blocks. They also solve the problem with two stages.
The wirelength and the distribution density of modules are minimized in the first phase. Then, the overlap problem are optimized in the
second phase to achieve an overlap-free floorplan. Luo et al. [19] proposed a two-stage convex optimization method for the problem. In their
method, relative positions of modules are first determined using an attractor-repeller (AR) convex optimization model, which can minimize
the total wirelength and reduce overlap area in the same time. In the second stage, the actual locations and shapes of modules are determined
using Second-Order Cone Programming (SOCP) formulation, which minimizes wirelength and facilitates deadspace-free and overlap-free
floorplans. Their method has proven to be very efficient and effective for handling fixed-outline floorplanning.
Other approaches include a partition based methods, search algorithm, or graph based algorithm. Capo [2] developed a floorplacer
that effectively combines min-cut placement with SA algorithm to form a fixed-outline floorplanner. At the procedure of partitioning and
placement, fixed-outline floorplanning is completed while taking routability into account. Lin et al. [16] tried some new methods, evolutionary
search. Feng et al. [8] used a max-flow network forumation to solve the problem.
1.2 Our Contribution
We propose in this paper a two-stage method, called UFO, to assign modules into a fixed-outlined region with pre-placed constraint. To
best of our knowledge, this is the first work considering pre-placed modules in the fixed-outlined floorplan problem. Further, in our method,
we do not restrict the shapes of modules to rectangles, L-shapes, and T-shapes if a design allows. Also, we can refine these modules into
rectangles or L-shape for better aspect ratios or if it is not permitted in a design flow.
In the first stage, we uniformly distribute modules into a placement region and minimize wirelength based on unified attractor repeller
(UAF) model. Comparing to AR model proposed by Luo et al. [19], our model has the following two advantages: (1) it is parameter
independent and can get unified results for any benchmark. (2) due to its superior property, there exists little overlaps between modules after
applying our model which implies more uniform distribution of modules. Similar to the result of global placement, there still exist some
overlaps between modules after the first stage. In order to completely eliminate overlaps, we move and adjust the shapes of modules using
a hierarchical quadrature-partition algorithm in the second state. Since we guarantee that the modules can be uniformly distributed in the
placement region after first stage, we only have to slightly move modules to equalize the distribution of modules.
To summarization, our methods have the following properties (1) Fixed-outlined placement regions are considered, (2) pre-placed modules
are considered, (3) hard modules as well as soft modules can be handled simultaneously in the same way, and the shapes of soft modules are
not restricted to rectangles, and (4) aspect ratio constraints are satisfies.
The remainder of this paper is organized as follows. Section 2 formulates the fixed-outline floorplan/placement design problem. Section 3
presents a convex optimization model to place modules uniformly among fixed-outlined region. Section 4 introduces the linear programming
to place modules in exact locations and adjust their shapes to avoid overlaps. Experimental results are reported in Section 5. Finally, we
conclude our work and discuss future research directions in Section 7.
2 Problem Formulation
Let B = {b1, b2, ..., bm} be a set of m modules whose width, height, and area are denoted by Wi Hi and Ai, 1 ≤ i ≤ m. Given a die
whose height and width are fixed already and are denoted by H and W , respectively, and some of the modules in B are placed first and its
The minimum value of AR model occurs in the location that the two circles are very close two each other, which means that there exists
a large overlap of two circles. To illustrate the phenomena, we represent first equation of AR model as f(z) = cz + (b−z)
z
, where c denotes
cij , z denotes Dij , and b denotes (ri + rj). That is
f(z) = cz +
(b− z)
z
= cz + bz−1 − 1 (3)
Then,
f ′(z) = c− bz−2 = 0⇒ z = ± b
c
(4)
For example, given ri = 30, rj = 20, and cij = 3. In the previous AR model, the minimum value of z is 4.0825 and the actual distance
between two circle is 2.0205, which means that the two circles overlap seriously.
3.2 Unified Attractor-Repeller Model
We have pointed out the deficiency of the AR model in the previous subsection. Unlike AR model that its results are affected by user spec-
ified parameter such as σ and K, our model is parameter independent and can obtain unified results for any benchmark. Before introducing
our model, we first give some notation definitions used in it. Let sij = (r2i × r2j ). Note that dij denotes the actual distance between the
centers of two circles i and j (i.e.,
√
(xi − xj)2 + (yi − yj)2) and pij = (ri + rj) − dij . Similar to AR model, UAR model also consists
of two equations. Unlike it, the two equations of our model respectively represent the conditions that two circles overlap((pij ≥ 0)) and two
circles do not overlap (pij < 0). Now, our unified attractor repeller model (UAR for short) is given as follows:
Fij(xi, xj , yi, yj) :=
{
cijdij + sij × pijdij , pij ≥ 0
cijdij + 1× pijdij , pij < 0
(5)
UAR model can distribute circles more uniformly than AR model for the following reason. Comparing to AR model, we also represent
the first equation of UAR model as follows:
f(y) = cy + s
(b− y)
y
= cy + sby−1 − s (6)
where y denotes Dij and s denotes sij .
Then,
f ′(y) = c− sby−2 = 0⇒ y = ±sb
c
(7)
Given the same values ri = 30, rj = 20, cij = 3 as previous subsection, the minimum value of y is 2449.5, which means the two circles
are separate seriously. Our intention is to gives a larger repeller force if two circles overlap. Once they are separate, we do not hope to push
the two circles more farer. Therefore, the repeller force should be reduced gradually as long as two circles do not overlap and the force should
be limited at a smaller range no matter how far two circles are separate. To achieve this objective, we give the second equation in our UAR
model, which can constraint the repeller force in the value between 0 and -1. This can be demonstrated as follows:
lim
dij=ri+rj
pij
dij
= lim
dij→∞
(ri + rj)− dij
dij
= 0 (8)
lim
dij→∞
pij
dij
= lim
dij→∞
(ri + rj)− dij
dij
= −1 (9)
Figure 3(a) shows the curve of AR model proposed by [19]. The arrow points out the minimal value of the curve which is a very small
value. On the contrary, Figure 3(b) shows the modifying curve by multiplying the original model with the value sij for mi and mj . The
arrow points out the location of minimal value which is far from the center of circle, which is also not desirable. In order to make the small
value happens at the location equal to the radius of a circle, we combine the right part of curve (a) and the left part of curve (b) to obtain our
model as shown in Figure 3(c).
4 Linear Programming
After the first stage, all modules can be uniformly distributed in the fixed-outline region and its wirelength is minimized. However, there
still exist small overlaps between modules. In order to completely eliminate the overlaps, we have to slightly move modules and reshape
them if necessary. In this stage, we use linear programming (lp for short) to adjust shapes of modules such that no two module overlap and
all modules can be completely placed inside the boundary.
In the beginning, we have to recover the shape of a module from a circle to a square, and place the square at the location with its center
overlapping original circle’s center. Then we can construct a horizontal constraint graph and a vertical constraint graph, which represent the
geometrical relationship between modules, based on current locations. This can be done by applying Delaunay triangulation (DT) [13] on
the centers of the modules and then a set of triangles are built. Since a pair of modules mi and mj corresponding to the nodes in an edge of
a triangle are in neighboring locations, we can get the topology of a floorplan by collecting all these information. The geometrical relation
between modules mi and mj is determined according to the shape of the rectangle formed by the two modules. This can be classified into
4
 







 	










 
 







 	
  
  










 	
  
 







 	
  
 ﬀ 
 ﬁ 
Figure 4: (a) The results after the first stage. (b) The results for applying DT. (c) The horizontal and vertical constraint graphs. (d) The resulting floorplan
after applying the longest path algorithm on the constraint graphs.
Without loss of generality, we use a path in the horizontal constraint graph to introduce our formulation. For the path in the vertical constraint
graph, it can be formulated in the same way.
min
∑
mi∈phj
wi (10)
s.t. ∑
mi∈phj
wi ≥W (11)
hi,min ≤ Ai
wi
≤ hi,max (12)
Ai
wi
− hi ≤ s(pvk),∀pvk ∈ P v(i) (13)
 








 	

     
 
  
 
 !
 !
 !
 !
 !
 !
    
 
 ﬀ  ﬁ  ﬂ ﬃ   ﬂ  !
 
 
 ﬀ  ﬁ  ﬂ ﬃ   ﬂ  !
 

 ﬀ  "


 #  ﬁ


 #  "

   
  #   "   ﬂ ﬃ    ﬂ  !
   
$ % &
' '
(
(
(
(
(
(
) ) ) )
* +
, ,
- . / - -
) )
, ,
- . / - -
) )
,
- . /
)
,
- . /
)
,
- . /
)
, ,
- . / - -
) )
,
  
  
  
  
  
  
! ! !
 " " "
 " " "
 "
 "
 "
 " " "
# $
# $
0 1
0 1 2 0 1 3
0 1
0 0
0 2 0 4 0 5 6 7 0 5 8 9
0 0
: ; 0 1 0
<
<
= > ?
@
A A
= > ? = =
@ @
@ @ @ @ B
  
  
 !
 ! ! !
" " " #
C D E F G H
C D E F G H
I
J
K
L M N O P Q
R S T U V W X
Y Z [
Y \ [
Y ] [
Figure 5: Example for our linear programming formulation.
6
