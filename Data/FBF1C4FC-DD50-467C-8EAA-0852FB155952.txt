2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
摘要 
Java 程式碼因具跨平台執行能力，今日廣泛應用於從網路伺服器到手機嵌入
式系統等各種平台。而負責執行 Java 程式碼之 Java 虛擬機器（Java Virtual 
Machine）則是 Java 跨平台技術核心。與其重新設計一個全新的 Java 處理器，例
如 Sun Microsystems 之 picoJava，本研究以為以硬體加速器結合既有主處理器之
設計思維較符合 Java 技術所允諾支援異質性運算環境之根本精神。同時原本熟
悉之主處理器軟硬體開發資源與流程可繼續沿用。此外相對於 ARM 公司所開發
之 Jazelle 加速器僅支援 ARM 處理器，本研究所提出之軟硬體協同加速架構則與
處理器無關 
 
 
Abstract 
The K Virtual Machine (KVM) is a Java virtual machine designed for small 
memory, limited resource, network connected devices such as cellular phones and 
personal organizers. However either its low-speed interpreter implementation or its 
large-memory just-in-time compiler implementation is hard to meet the requirements 
from those high performance mobile game player designs. In this project, a 
hardware/software codesign architecture aimed for providing high performance 
KVM+MIDP environment has been proposed. In which the host processor is 
connected with a java-optimized processor (JCP) via ARM Bus to accelerate the 
bytecode execution. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
1 研究目的 
本研究目標是希望能針對嵌入式系統等級之 Java 虛擬機器 （J2ME 規範之
KVM）提出能加速執行效能之軟硬體協同設計架構。研究最終產出為一個 KVM
硬體加速模組，以及與之搭配之 KVM 軟體，在以 FPGA 開發板實際將第一階段
所獲取之 KVM 軟硬體協同架構實做出來。 
 
2 文獻探討 
2.1 KVM 
The high-level goal for the Connected Limited Device Configuration (CLDC)是
一套標準，minimum-footprint Java 平台用於小型、有限資源的裝置。而這一套
CLDC 有下列幾點共同特徵。 
 
¾ 在記憶體方面擁有 160KB 到 512KB 的可用預設大小。 
¾ 適用 16-bit 或 32-bit 的處理器 
¾ 低電量消耗，可在電池裝置上運作 
¾ 對於某些網路具有連接性 
 
KVM 是 Sun 公司參考 CLDC 說明手冊而實作出來的。同時 Sun 公司也針對
Windows 和 Solaris 兩個作業環境提供原碼。而且對於只要是遵照 OPSIX 和
ANSIC C 所開發的作業系統，KVM 都可以相當簡單的做移植動作。 
KVM 是採用相當淺顯易懂的 bytecode 直譯器搭配編譯時期的各種旗標和選
項來實作的，為了就是可以有效的幫助 KVM 在效能和空間兩方面的最佳化。不
論是要應用在消費者或是嵌入式裝置上，KVM 的一部分已經有很大的效能改
善。KVM 為了往後的在可攜性、可多元化的下載以及應用程式安全性方面的發
展和部署提供了一個可模組化兼具可擴充性的架構。 
 
 
 
1 
 
2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
SystemC-QEMU 可以做到： 
¾ 當你連接到真實硬體時，一樣可以透過 SQ 來隨時載入 SystemC 模組 
¾ 對系統硬體驅動進行改良。 
¾ 可以在實作之前，提前測試各種驅動、應用程式和硬體模擬。 
¾ 使用 src_trade 可以追蹤資料傳輸 
¾ 可即時模擬 
 
下圖顯示了 System-QEMU 的架構： 
 
Figure 1. SystemC-QUME 架構示意圖 
 
 
2.4 MIDP 
MIDP 本身是由一堆模組所構成的。而這些模組都是透過兩個階層去實作出
來的： 
 
¾ Java 程式語言層(這一部分基本上是可以執行而且不需要去改變任何裝置) 
¾ 原生層，用 C 語言來實作的(這一部分基本上需要去針對新的裝置來變更才
可以在新裝置上執行) 
 
由於整體的複雜化和軟體本身上述提到的功能，我們很難僅僅只靠 JCP 這
個處理器為基礎上建立一個完全由 KVM + MIDP 的 Java 環境。 
 
 
3 
 
2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
2.6 LEON3 Processor 
LEON3 處理器核心包含了下列幾個主要元件：七階層的整數運算管線，分
離式的指令Cache與資料Cache，硬體乘除法器，內建的除錯單元與多核心介面等。 
 
 
Figure 3. Leon3 處理器處理核心方塊圖 
 
 
2.7 軟硬體平台開發板-Xilinx xc3s-1600e 
Digilent 公司所生產的 Spartan-3E 1600E 開發板中包含了一個 Xilinx 
xc3s-1600e 的 FPGA 晶片，64MB 的 DDR SDRAM，16MB 的 flash 記憶體與許
多的周邊裝置，例如 VGA port，Ethernet PHY port，PS2/mouse port，Keyboard 
port，RS-232 port 等，足夠提供本計劃做為研究的平台。 
 
 
 
5 
 
2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
JOP 處理器架構中包含了處理器核心（core），記憶體介面（Memory Interface）
和 I/O 介面（I/O interface），記憶體介面（Memory Interface）提供一個連接處理
核心與主記憶體（main memory）的介面，其內部還包含了一個 method cache。
另外 JOP 處理器架構中還設計了一個 Extension 模組，用來連接處理核心，記憶
體介面，與 I/O 介面，並且控制這些外部介面的資料讀取與寫入。 
 
 
Figure 6. JOP 處理器架構方塊圖 
處理器核心（core）中包含了四階層的指令處理管線：Bytecode Fetch，Fetch， 
Decode，Stack execute。其中 Bytecode Fetch 為不同於其餘三階段管線的額外管
線階段，用來抓取 JVM 的指令-Java bytecode。其餘三層管線階層 Fetch，Decode，
Stack execute 則是分別用來抓取 microcode， stack 位址產生與執行運算。 
 
 
Figure 7. JOP 處理器核心架構圖 
7 
 
2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
3 研究方法 
本研究之研究方法可分成兩個階段。第一階段目標是希望能將 KVM 開放源
碼（C 語言）就適合硬體執行與否分割成兩個部份。其中像 Class File Loader 及
Garbage Collector 等演算較繁瑣部份交由主處理器以軟體方式實現，至於
Bytecode Interpreter 則由硬體加速模組負責執行。主處理器與加速器間以 ARM 
Bus 連接。為了能有效率的完成第一階段軟硬體分割作業，本研究首先以開放源
碼之 QEMU 模擬器結合新一代硬體描述語言 SystemC 來建構第一階段之實驗平
台。其中 QEMU 可模擬 ARM 及 SPARC 等處理器之執行，且 QEMU 源碼中 ARM 
Bus 模擬程式被植入了一個 Agent，透過 TCP Socket 此 Agent 可與另一執行中之
SystemC 伺服器程式連結。SystemC 伺服器程式內包含 ARM Bus Master 及 ARM 
Bus Slave兩個模組。ARM Bus Master一端以TCP Socket連接QEMU程式之ARM 
Bus 元件，另一端與 ARM Bus Slave 連接，至於 ARM Bus Slave 內則實現了前述
KVM 硬體加速器。主處理器之 KVM 軟體可透過一個專屬的驅動程式來存取掛
載在 ARM Bus 上之 KVM 硬體加速器。 
在我們詳細的研究方法敘述中,我們先闡述軟硬體架構的分割與分割的評估
方針後，接下來就分成軟體實作方法與硬體實作方法兩個部分來解釋研究方法。 
3.1 軟硬體分割 - 分割架構提出 
為了可以提供比純軟體 KVM 更佳的效能，而且不需花費許多的成本來達到
Java 加速的目的，在本次的研究中，我們提出了一個 Java 輔助處理器 Java 
Coprocessor（以下簡稱 JCP），來對主處理器上之 KVM + MIDP 環境中的 bytecode
做加速執行。我們相信一個搭配低花費的硬體輔助處理器的軟硬體協同設計解決
方案會比從頭去研究一個全新而且成熟的 Java 處理器更符合市場需求與 Java 原
本的跨平台精髓。 
 
Figure 8. 新架構示意圖 
9 
 
2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
令，這一類的指令經過評估後發現可以利用硬體來實現這一
類的指令，而其效能會比軟體實作有顯著的提升。這樣一來
也可以作到硬體加速提高效能的目的。 
例如：ADD、SUB、POP、ICONST_0.....等等 
 
3.2.2 指令分類 
因為在我們的架構中ARM BUS為主處理器與JCP的主要溝通匯流排，但若因
為支援的指令問題而使主處理器與JCP間的執行緒切換過於頻繁，會使BUS太過
壅塞而使效能低落，為了避免此問題，JCP勢必支援使用頻率較高的指令，在經
過我們的分析之後，可以將所有的JAVA BYTECODE分成四大種類： 
 
A：有效能改進價值且JCP可支援之指令 
B：有效能改進價值但不容易由JCP支援之指令 
C：無效能改進價值但JCP可支援之指令 
D：無效能改進價值且不容易由JCP支援之指令 
 
而在jop handbook所評估的結果中，JAVA程式在執行的過程可以依照指令使
用次數較多寡把指令分為幾個種類：load（short），get，branch，call，return，load，
alu，const（short），array，put，iinc，stack ，store（short），other，const，store，
conversion，switch，new，compare 
 
再依據先前我們所訂定的四大種類，可以將上述指令歸類到其中： 
 
A.有效能改進價值且JCP可支援之指令： 
Load（short），branch，load，alu，const（short），array，iinc， stack，store（short） 
B.有效能改進價值但不容易由JCP支援之指令： 
get，call，return，put 
C.無效能改進價值但JCP可支援之指令： 
const，store，conversion 
D.無效能改進價值且不容易由JCP支援之指令： 
other，switch，new，compare 
 
Bytecode種類 指令執行次數比例 所屬實現等級 
load（short） 30% Ａ 
get 15% Ｂ 
branch 10% Ａ 
11 
 
2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
內部記憶體空間的不足而呼叫 GC(Garbage Collection)的情況發生。這樣一來也可
以省下許多時間，對效能的提升也有一定的改善。 
 
3.3 軟體實驗方法 - 模擬平台建立 
為了實現和測試我們的新架構，首先必須先將測試環境給建立起來。而整個
測試分成三個部份。第一個部份就是 Linux 核心的編譯。第二個部份就是 KVM
的移植。第三部份就是利用 QEMU - SystemC 來模擬和測試。 
 
第一部份和第二部分主要是為了實驗KVM是否可以移植到 FPGA上執行的
手續,。而第三部分則是以軟體模擬為主的平台開發用已驗證軟硬體切割的正確
性和理論評估效能。 
3.3.1 Linux核心的編譯 
對於 Linux 核心的編譯，我們選用 XILINX xc3s-1600E 為我們軟體平台的開
發板。搭配 Gaisler Research 所提供的套件在上面建立起以 Leon3 處理器和 Linux
為作業系統的測試環境。 
 
首先下面是幾個整個開發中用到的幾個元件： 
¾ ubuntu Linux OS 
¾ sparc-linux-gcc 3.4.4 
¾ SnapGear for LEON Linux 2.6 
 
首先在 ubuntu OS 下裝起 Cross-Compiler 的工具套件。安裝的路徑為：
/opt/sparc-linux-3.4.4 之後便可以順利將 Linux 核心順利編譯成功，並在 Leon3
處理器上搭建起來。 
 
 
 
 
 
 
 
 
 
 
13 
 
2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
 
Figure 11. MMU 功能選項圖 
 
一切設定好之後，會看到我們針對 Leon3 所作的組態設定列出表單出來 
 
Figure 12. 組態清單圖 
15 
 
2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
 
 
Figure 15. Linux 操作圖 
 
從上面的圖 8 和圖 9 可以顯示出初步的 Linux 核心以及 Cross-Compiler 已經
成功的建置完畢。核心版本 2.6.21.1 版可以從圖 8 看到已順利載入，而圖 9 則是
針對剛剛的 Cross-Compiler 測試程式(args.c)所產生的執行檔載入到目標 Linux 作
業系統上去執行結果。到此初步的作業系統建構已完成。接下來就是目標軟體
KVM 對 Sparc 處理器(Leon3)的移植。 
 
3.3.2 KVM的移植 
此次計畫是為了針對 Java 提出一個全新的軟硬體協同架構來提升 Java 
Program 的執行效能，改善純軟體在執行效能上的瓶頸。而針對 Java 軟體環境的
測試對象。則選用了由 Sun 公司所釋出的 J2ME_CLDC-1_0_4 版為移植對象。由
於將來平台是以 Leon3 + JCP 為平台；為了以後的 KVM 在軟硬體方面的切割，
首先要確定 KVM 的移植是否可以順利在 Leon3 上安裝和執行。以下是安裝移植
的所需軟體： 
 
¾ sparc-linux-gcc 3.4.4 
¾ J2ME_CLDC-1_0_4 
 
經過 sparc-linux-gcc 編譯過後再將編譯過的 Lib 以及執行檔一起移到 linux
作業系統下執行。下圖 10 為 KVM 在 Leon3 上的 Linux 作業系統下的執行過程。 
17 
 
2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
接下來是我們在 ubuntu 上建構整個模擬程式的初步展示圖 
 
Figure 17. QEMU-SystemC 模擬 Debian 在 arm 上執行環境圖 
 
 
Figure 18. QEMU-SystemC 模擬 Linux 在 arm 上執行環境圖 
 
19 
 
2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
 
下面是 AMBAsim 程式透過 SystemC 編譯產生的一個可用的 AHB 網路介面
程式的執行過程圖： 
 
首先開啟 Server 端的 AHB 程式
 
Figure 21. Sever 端開啟圖 
 
接下來利用寫好的測試程式去對 Server 端作測試 
 
Figure 22. 測試結果圖 
 
 
 
21 
 
2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
3.4.1 JCP實作架構說明 
JCP 的核心部份採用三層管線的設計，分別是指令抓取（FETCH)，指令解
碼（DECODE），與指令執行（EXECUTE），另外設計了包含在 JCP 內部的兩塊
記憶體，程式記憶體（PROGRAM RAM）與資料記憶體（DATA RAM）來達到
主處理器端與 JCP 端能夠順利溝通，程式記憶體用來存放主處理器需要 JCP 作
運算的程式區段，而資料記憶體則存放由主處理器端搬移過來的 FRAME 資料結
構，給 JCP 端作讀取，當 JCP 執行完成或是遇到需要主處理器端支援的指令時，
會將運算結果的 FRAME 回存到資料記憶體中給主處理器端作資料的讀取。 
 
Figure 24. JCP 主架構圖 
 
記憶體介面的實現，為了讓 Leon3 CPU 能夠經由 ARM BUS 正確且無誤的
把能夠進行加速執行的 Java bytecodes與 Frames分別搬移到兩塊 JCP內部的程式
記憶體與資料記憶體中,並且也能讓 JCP 核心正確的讀取記憶體上所儲存的 Java 
bytecode 與 Frames,我們採用了 Xilinx 公司所提供的一個 Virtex2 Dual-port RAM
來實作這個部分,但因為 Virtex2 Dual-port RAM 是一個傳統的 Dual-port RAM,兩
組對等的 port 皆為普通之 RAM 介面,無法經由 ARM BUS 來做存取,所以我們先
撰寫出一個一組 ports 為 ARM BUS SLAVE 介面,另一組 ports 為傳統 ram 介面的
Wrapper 來包裝 Virtex2 Dual-port RAM,，一邊接上 AMBA 的 AHB BUS 介面上，
另一邊則是接上 JCP 內部的溝匯流排，如此一來也可以避免主處理器端與 JCP
23 
 
2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
 
Figure 26. JCP 管線架構圖 
 
3.4.2.1 指令抓取（FETCH） 
在第一層的管線中， JCP會先根據 Program counter的值來存取 Program Ram
的記憶體位址從記憶體中抓取出 Bytecode 指令，提供下一層管線使用，當偵測
到下一層管線所回覆的控制訊號（next bytecode , operand）或是自己內部的控制
訊號（jump , interrupt）時，就會對下一個記憶體位址（PC+1）抓取 bytecode 指
令或是採取另外對應的動作，在本層管線中,我們設計了一個偵測不支援 bytecode
的電路（Detect unimplemented bytecode），當偵測到不支援指令時會透過 bus 發
出 interrupt 來告知主處理器端，branch 暫存器用來儲存分之指令的位址，operand
暫存器則用來儲存分支指令的 offset。 
25 
 
2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
 
Figure 28. 指令解碼（DECODE）架構圖 
3.4.2.3 指令運算（EXECUTE） 
在這第三層管線中，會依照上一層管線所發出的運算控制訊號與運算參數指
標來進行相對應的運算行為，基本的算術邏輯運算（add , sub , logic , shift , etc）
都會在這層管線實現，運算堆疊（stack）的最上層與第二層的資料會被存放在暫
存器中（TOS，TOS-1），如此的設計將會減低堆疊運算讀取記憶體的次數，堆疊
運算的結果也會直接回存到 TOS 中，如此一來就不需額外的回寫管線階段（Write 
Back）。若指令運算需要的 operand 為立即值，則 operand 也會在這一階段作型別
轉換（Type Conversion），來達到使用的條件。 
27 
 
2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
 
Figure 31. LEON3 環境組態畫面 
 
 
Figure 32. 組態選項中的 Processor 選項介面 
 
3.4.4 Leon3 平台的行為模擬與驗證: 
使用 Modelsim 6.1h 來模擬並確保硬體行為的正確，透過已撰寫好的
Testbench 檔來驗證硬體平台的內容與行為，當驗證完成以後會發出一個 interrupt
來中斷硬體驗證。 
 
29 
 
2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
3.4.5 Leon3 平台的實現 
為了把組態好的 Leon3 硬體平台實現到開發板上，使用 ISE-9.2 電路合成軟
體產生出該電路之 bitfile 檔，再透過 ISE-9.2 軟體中的 iMPACT 進行 FPGA 
configuration 
 
Figure 35. 硬體平台合成資訊 
31 
 
2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
 
使用 GRMON 軟體，下載經由在 Linux 環境下 Cross-compile 到 SPARC 平台
上的 Embedded Linux Image 到開發版內，並且啟動執行，透過 Tera Term Pro 軟
體(超級終端機)與開發板進行訊息溝通，當啟動 Embedded Linux Image 時，我們
會在終端機視窗上看見 embedded Linux OS( SnapGear Linux)的啟動資訊，裝置內
容等相關訊息，啟動完畢後，就可以由 PC 端發送命令給開發板端，進行動作。 
 
 
Figure 38. Embedded Linux OS 啟動資訊 
 
接下來我們把 Leon3-KVM 環境搬移到硬體平台上運行，並且成功在此環境
上執行一個 Java 的 class file （HelloWorld.class）證明本計劃的硬體平台加上
Leon3-KVM 環境用是可行的 
 
 
Figure 39. KVM 並執行 Java class file 之結果 
33 
 
2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
4 研究結果 
測試一： 
目的：針對單一程式的執行時間作時間的分析比較。 
測試程式：1. HelloWorld.java   
2. Josephus. java 
目標版：XC3S1600E 
系統環境：Snap-Gear Linux 
CPU：Leon3 
 
Figure 42. 執行 HelloWorld.java 每次的時間分佈圖 
 
 
Figure 43. 執行 Josephus.java 每次的時間分佈圖 
35 
 
2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
測試三： 
目的：透過上述兩個測試針對三個測試程式作理論值的效能分析，一個為軟硬體 
協同設計架構下執行所花費的時間，另一個為純軟體架構下執行所花費的
時間。 
測試程式：1. HelloWorld.java 
2. Josephus. java  
3. Power. java 
目標版：XC3S1600E 
系統環境：Snap-Gear Linux  
CPU：Leon3 
 
 
Figure 45. 效能分析圖 
 
透過上述圖表分析，可以看出新架構的（軟硬體協同架構）可以有大幅度提
升 KVM 的效能。 
 
 
 
 
 
 
37 
 
2008/10/29  高效能  Java 虛擬機器之軟硬體協同設計結案報告書 
[12]JASMIN HOME PAGE ,http://jasmin.sourceforge.net/ 
 
[13] AMBA 2 SPEC. http://www.arm.com/  
 
[14] kaffe virtual machine http://www.kaffe.org/  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
39 
 
