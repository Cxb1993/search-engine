2  
Table of Contents 
Table of Contents............................................................................................................................ 2 
List of Figures................................................................................................................................. 3 
Abstract........................................................................................................................................... 4 
1.  Motivation................................................................................................................................ 5 
2.  Objective .................................................................................................................................. 5 
3.  Background.............................................................................................................................. 6 
3.1  JXTA Project ................................................................................................................. 6 
3.2  JXTA CMS..................................................................................................................... 8 
4.  System architecture................................................................................................................. 8 
4.1 The framework of our system ......................................................................................... 8 
4.2  System usage and it’s working flow........................................................................... 10 
4.3 Architecture of our system............................................................................................. 13 
5.  Peer-to-peer trading application.......................................................................................... 15 
6.  Conclusions ............................................................................................................................ 19 
7.  參考文獻................................................................................................................................. 19 
8.  計畫成果自評......................................................................................................................... 20 
 
4  
 
Abstract 
【中文】 
點對點網路架構是一種讓大部份的溝通直接在網路上的每一個節點與節點之間直接進
行，而不使用中央伺服器的一種網路架構。在傳統的點對點網路環境下，一旦內容提供者
分享其數位內容於點對點網路後，對於其所提供的內容便失去了控制，並且其內容可由點
對點網路上的任一節點隨意的存取或散佈。本研究將提出一個機制，使得內容提供者可以
在其所提供的數位內容散佈出去之後，還能夠對其內容的散佈保有某些合理的控制與管
理。本系統建置於 JXTA 點對點協定之上，並將內容散佈控管的功能實作成 JXTA 協定的
一個服務。藉由使用這個服務，內容提供者不僅能夠很便利的控制與管理其內容的散佈，
亦能夠很輕易地延伸此系統來達到其獨特的應用。最後我們延伸此服務設計並實作一個適合
數位商品在點對點網路下交易的平台。值得注意的是我們的系統將著重於對數位內容於點對點
網路散佈期間的控管，而不是對使用者取得數位內容之後的行為控制。 
 
關鍵詞： 點對點網路(P2P)，智慧財產權，數位版權管理 (DRM) 
 
【英文】 
A peer-to-peer (P2P) network architecture is a network that does not use a central server for 
communication but instead uses mostly connections between clients directly.  In traditional 
peer-to-peer networks, once the content provider releases his digital content, the content is out of 
his control, and can be accessed or distributed by any other peers arbitrarily in the peer-to-peer 
network.  This research will introduce a system that helps the content providers give some 
reasonable control about their own content distributions after their contents have been released.  
This system is based on JXTA protocol, and the control & management functionalities are 
implemented as a service in JXTA-based peer-to-peer network.  By using our service, the 
content providers can not only control and manage the distribution of his contents conveniently, 
but also extend our service easily to do his own special application.  In the end of this study, we 
will extend our service to present a system that are suitable for selling digital goods based on 
peer-to-peer architecture. – An Open P2P Digital Store.  Our system will focus on how the 
digital goods can be distributed securely in peer-to-peer network, and the management of these 
digital goods, rather than the usage control after user obtaining the digital goods. 
 
Keywords:  Peer-to-Peer Network (P2P), Intellectual Property Rights, Digital Right 
Management (DRM) 
6  
server, so it’s easy to control and manage how the services can be provided.  But in a pure 
peer-to-peer architecture, with the lacking of a centralized server, it’s not easy to control the 
distribution behavior of contents in peer-to-peer networks.  Our system will combine the 
advantages of these two architectures, we will use a lot of distributed nodes to control and 
manage the content distributions, and the content transfer action is still performed directly 
between peer and peer.  The goal of this research is to provide a service that helps the content 
providers to control and manage the distribution process of their own contents in peer-to-peer 
environment.  We also provide a server side management utility for content providers to manage 
their contents conveniently and easily.  The content providers can also extend our system easily 
to fit their specialized control requirement about their own contents. 
 
The flow of this research is shown in Figure 1. 
 
 
Figure 1  Our research flow. 
 
 
3.  Background 
3.1  JXTA Project 
JXTA (abbreviation of “Juxtapose”) is a set of open peer-to-peer protocol promoted by Sun 
Microsystems [5, 11, 13, 14], it allows allow any connected devices on the network ranging from 
cell phones and wireless PDAs to PCs and servers to communicate and collaborate in a P2P 
manner.  JXTA peers create a virtual network where any peer can interact with other peers and 
resources directly even when some of the peers and resources are behind firewalls and NATs or 
8  
3.2  JXTA CMS 
 The Content Management Service (CMS) is a JXTA service that supports the sharing 
and retrieval of content within a peer group.[7]  The CMS manages the shared content for a 
local peer, and allows applications to browse and download content from remote peers.  The 
shared content was represented by an advertisement.  The content advertisement contains some 
meta-information describing the content, including the content name, length, mime type, id, and 
description.  Only content name and id are necessary to describe a content, others are optional.  
Figure 4 is an example of a content advertisement: 
 
 
Figure 4  An example of content advertisement. 
4.  System architecture 
4.1 The framework of our system 
We can see that different network topologies will affect the degree of difficulty on deploying 
distribution access control.  We want to retain both advantages from centralized architecture and 
decentralized architecture, and minimize the disadvantages as more as possible. We choose JXTA 
as our peer-to-peer infrastructure.  The topology of JXTA is between pure peer-to-peer 
architecture and hierarchical architecture.  We will mix the centralized and decentralized control 
mechanism with decentralized distribution to build a distribution access control service. 
 
In our architecture, a new component called “Distribution Manager” is introduced; this kind 
of node is responsible for maintaining all content distribution information and controls the 
content distribution behavior.  The only requirement for content providers to use this service is 
that they must burden the cost of managing content distribution.  This means in our architecture 
there will be a lot of distribution managers on peer-to-peer network, in proportion to the numbers 
of content providers. The distributed managers are our key to control the content distribution 
process. Figure 5 shows the framework of our service. 
10  
(B) Anyone who has obtained the content successfully will not share the unprotected content to 
other peers if he is not the original content provider; or any content will require being in a 
protected format before it can be shared on peer-to-peer network. In our architecture at least 
one of these two conditions must be satisfied.  The purpose these two conditions is an 
assumption of keeps the honest people honest. 
 
By default our service will require all contents being in an encapsulated format before they 
can be shared on peer-to-peer network.  After one download process is complete, the content 
will be extracted to original one automatically.  This action is transparently to any peer. 
 
The architecture of our system is trying to make a balance between centralized and 
decentralized architectures.  Note that in our architecture, the distribution manager will still 
suffer from the scalability problem.  When the numbers of requests about the contents managed 
by the same distribution manager become large, the distribution manager will eventually crash, 
but the effects may not serious.  In hybrid architecture, the failure of the central index server 
will crash all services of entire network.  But in our architecture, the failure of one distribution 
manager will only crash the file sharing of the content managed by this manager.  An important 
thing is that the peer-to-peer network is not dedicated to file sharing only, some other applications 
like instant messaging, distribute computing will still working properly, so the failure of one 
distribution manager will only affect a small portion of services on network. 
 
As mentioned, we hope to give the content provider some reasonable control after his content 
was distributed in peer-to-peer network, which means unlike traditional content distribution in 
peer-to-peer environment, all content distribution must be performed conditionally instead of 
arbitrarily. 
 
The distribution of one content is controlled by the LOCAL POLICY or REMOTE POLICY 
associated with this content.  In our system, the properties in LOCAL POLICY are predefined 
and cannot be changed.  The REMOTE POLICY has a set of predefined properties, and the 
content provider can also add his own new properties. 
 
4.2  System usage and it’s working flow 
The functionalities of our service are divided into three parts: Distribution access control, 
Content distribution policy management, and Auxiliary functionality. 
 
(A) Distribution access control 
In our system, the life cycle of one content distribution will go through three phases: 
Registration phase, Distribution phase, and Destruction phase, as shown in Figure 6. 
 
12  
 
Figure 7  Screen shot of the distribution manager. 
 
 
 
Figure 8  Dialog for modify REMOTE POLICY. 
 
We use the group-based access control for policy management.  In contrast to role-based 
access control [8] used by many rights management systems, we have no idea about who will 
access our content in peer-to-peer environment, so we choose to group the contents that have 
similar distribution policies.  The following figure shows an example of grouped content: 
 
14  
 
The architecture of our content distribution access control & management service is depicted 
in Figure 11. 
 
Figure 11  System architecture. 
 
This system can be roughly divided into five parts: Plug-In, Secure, Distribution Manager, 
Content information Database, and Control Protocol.  The functionality of each component will 
be explained briefly as follows: 
 
(A) Plug-In 
The Plug-In part contains the part that will be installed in the original CMS service. 
 
(B) Secure 
The Secure part is responsible for providing a secure distribution over the peer-to-peer 
network.  The Content Encapsulation/Extraction module provides the capability to 
encapsulate the plain content to a protected format or extract the protected content to 
original one, as well as license modification, encapsulation, etc. 
 
(C) Distribution Manager 
This part is used by content provider.  The interface provided by manger will allow the 
content provider to control and manage their content distribution easily; hence the content 
provider can share the content in the way he wants. 
 
(D) Content information Database 
This part is used by distribution manager to store all information about their associated 
content, including policies, events, and statistics. 
 
16  
 
Each line contains a new property to be added.  In this sample we only add the first property.  
Once the “Price” property has been added in property.ini, the distribution manager will add this 
property in REMOTE POLICY for all content as shown in Figure 12. 
 
Figure 12  Adding new custom property. 
 
Initially, the values of new added property are null, the content provider can set these values by 
click the edit button: 
 
 
Figure 13  Setting value of custom property.  
18  
manager.getProperty("Price").add EvaluationListener(new 
PriceEvaluationListener()); 
 
   The class PriceEvaluationListener is an implementation of the 
EvaluationListener, and the evaluationFunction will check the requesting peer 
name and account to determine whether this peer has enough balance in account (For simplicity 
we assume that each peer has to register an account to content provider in advance and its 
account ID is peer name). 
 
The architecture of our sample application is shown in Figure 14:  
 
Figure 14  An extended architecture after adding the “Price” property. 
 
In our sample application, as long as requesting peer has enough balance in its account, this 
request will be granted and its balance will be decreased by the price of the content it requests.  
The simplified procedure diagram is shown in following figure: 
 
 
Figure 15  Simplified diagram for custom property evaluation. 
20  
[5] D. Brookshier, D. Govoni, and N. Krishnan. Sams. “JXTA: Java P2P Programming,”. 2002. 
 
[6] I. Clarke, O. Sandberg, B. Wiley, and T. W. Hong, "Freenet: A distributed anonymous 
information storage and retrieval system,". Lecture Notes in Computer Science, No. 2009, 
pp. 46-66. 2001.  
URL:  http://freenet.sourceforge.net. 
 
[7] JXTA Content Management System.  URL:  http://cms.jxta.org/ 
 
[8] D. Ferraiolo, R. Sandhu, S. Gavrila, R. Kuhn and R. Chandramouli, “A Proposed Standard 
for Role-Based Access Control,”.  ACM Transactions on Information and System Security, 
Volume 4, Number 3, August 2001. 
 
[9] Gnutella.  URL:  http://www.gnutella.com/ 
 
[10] Carl A.Gunter, Stephen T. Weeks, and Andrew K. Wright, “Models and Languages for 
Digital Rights,”.  In Proceedings of the 34th Annual Hawaii International Conference on 
System Sciences. 2001. 
 
[11] E. Halepovic, R. Deters, “The Costs of Using JXTA,”.  University of Saskatchewan. In 
Proceedings of the Third International Conference on Peer-to-Peer Computing (P2P’03). 
 
[12] T. Iwata, T. Abe, K. Ueda, and  H. Sunaga,  “A DRM system suitable for P2P content 
delivery and the study on its implementation,”.  In Proceedings of The 9th Asia-Pacific 
Conference on Communications, APCC 2003, Volume 2, 21-24 Sept. 2003, pp. 806-811. 
 
[13] “JXTA”  by Brendon J. Wilson, Brendon J. Wilson. 2002.   
        URL:  http://www.brendonwilson.com/projects/jxta/ 
 
[14] Project JXTA.  URL:  http://www.jxta.org/ 
 
8.  計畫成果自評 
本計劃已完成下列幾項工作： 
(A) 做整體架構規劃  
包含系統角色定位, 該有哪些功能 ，需要哪些 layer，每個 layer 之間要如何 cowork。 
(B) 定義系統規格 
包含每個 layer 之中要有哪些 component，每個 component 之中要有哪些 functionality。 
(C) 實作系統雛型 
