 3
討論與研究。近幾年渦輪碼已成為許多通訊規格的選
項，例如衛星通訊、3GPP行動通訊系統以及 IEEE802.16
等規格，此外渦輪碼也成為未來數位視訊廣播以及其它
無線網路規格的候選之一。然而各種通訊協定所需要的
錯誤更正能力及編解碼規格並不一致，而在一般傳統的
設計方法上，設計者往往必須針對不同的應用領域重新
設計出所需的解碼器，但是「上市時間」與「完整驗證」
這兩個要求，使得一般的傳統設計方法無法滿足現代通
訊之需求，為了解決這種問題，我們必須藉由「矽電
路 設 計 智 慧 財 產 (Si l icon Intel lectual  
Proper t ies ,  SIP)」的觀念，來設計出符合各種應用領
域的渦輪解碼器。 
    由於現今超大型積體電路(VLSI)的快速發展，使得
“單晶片系統”(SOC)的設計方式逐漸成為主流，這種新
式的積體電路設計方法的複雜度高出傳統的設計方法
許多，使用快速雛形產生器及智慧財產 ( IP)設計模
組 的 再 利 用 可 以有效減少設計者負擔以及提
高設計效率。在本論文中首先針對最佔解碼器之功
率及面積的記憶體作架構上的改良，我們利用解碼器交
錯器及反交錯器的運作以不同的方式排程，能在沒有碼
增益的損失下，使得交錯器位址記憶體、反交錯器位址
記憶體以及外部資訊記憶體只需要傳統架構的 50%，
可達到高速同時省功率及面積的優點。同時為了便利
IC 設計者能快速取得一適當功能之渦輪碼解碼器，我
們也藉由分析各類渦輪解碼器的積體電路架構推導出
其演算之規則性及模組化架構，設計出一具有上述新型
交錯與反交錯排程的多目標式(Retargetable)渦輪軟性
IP 產生器(Soft IP Generator)以供未來 SOC 通訊系統之
應用。 
 
三、 研究方法及成果 
1. 傳統渦輪編碼及解碼器 
    傳統的渦輪編碼器如圖 1 所示，主要由兩組組成
碼、交錯器與穿孔器(Puncturing)所組成，其中穿孔器
是以多工器來選擇其中一組編碼輸出，另外經由交錯器
重新排列輸入符號的序列使得兩組編碼器的輸出碼字
(Codeword)的相關性能夠降低。 
Pu
nc
tur
ing
Π
ku sx
px1 px2
            圖 1  渦輪編碼方塊圖 
 假若使用軟式輸入軟式輸出(Soft-in/soft-out, SISO)
解碼器當作解碼器的組成元件，其如圖 2 所示 
( )uL
yLc *
( )uLe ˆ
( )uL ˆ
 
 圖 2  軟式輸入軟式輸出解碼器 
    SISO 的輸出是由已知接收符號來計算解碼輸出符
號為+1 與-1 的對數比，其方程式可表示如下： 
( ) ( ) ( )( )yup
yup
yuLuL v
vv
1
1
logˆ −=
+===  
    解碼器使用事前機率對數比 ( )uL 與接收符號來進
行解碼，其中 cL 指的是通道可靠度常數 (Channel 
dependent constant)。解碼輸出則產生軟式輸出 ( )uL ˆ 與
額外資訊 ( )uLe ˆ ，額外資訊雖然由其他解碼器所提供的
資訊與接收資訊所產生的，但卻是不受其所影響。針對
系統碼所產生的軟式輸出可表示為以下三項的總合： 
( ) ( ) ( )uLuLyLuL ec ˆˆ ++⋅=  
    上列方程式可由三項獨立估測的對數比來表示，分
別為通道接收資訊 yLc ⋅ 、事前機率 ( )uL 與額外資訊( )uLe ˆ 。整個遞迴程序是由兩個軟式輸入軟式輸出解碼
器來進行的，其如圖 3 所示。在第一次遞迴時，解碼器
1 計算額外資訊如下 
( ) ( ) ( )[ ]uLyLuLuL ce +⋅−= ˆˆ 11  
    假設接收資訊解碼為 0 或 1 的機率相等(Equally 
likely information bits)，則在第一次遞迴下 ( )uL 的初始
值均為零。解碼器 1 的額外資訊輸出提供解碼器 2 作為
(1) 
(2) 
(3) 
 5
低交錯器表及反交錯器表的記憶體消耗，同時也變更
外部資訊記憶體的存取方式，使得外部資訊記憶體由
原本的兩個 SRAM 可以縮小成原本一個 SRAM 大小
的雙埠記憶體。 
    為了說明這個架構的概念，我們以演算法的角度
來說明。令函數 π 為交錯表(interleaver table)函數，x
為交錯表的索引值(index)，π(x)為輸入 x 之對應輸出。
函數 π -1(x)為 π(x)之反函數也就是反交錯器表
(de-interleaver table)。例如: π(1)=18 則 π -1(18)=1。
假設有 A、B 和 C 三個陣列，每個陣列皆含有 n 個元
素，其中只有 A 中為有效資料，B 和 C 皆為空陣列。
目的是將陣列 A 交錯後儲存在陣列 B，在將陣列 B
反交錯後儲存在陣列 C，如果運作正確無誤陣列 A 與
陣列 C 的資料順序會相同。 
左圖是依照以上描述的演算法表示。 
 
 
 
    以上的演算法，需要使用到 π(x)與 π -1(x)但若稍
微變更一下陣列 C 的寫入次序如右圖，可以在不使用
到 π -1(x)的情況下達成反交錯器的功能。 
    以下將新型交錯與反交錯器之演算法以圖形表
示 加 以 說 明 。 其 中 n=6, π(x)=[3,0,5,1,4,2], π 
-1(x)=[1,3,5,0,4,2],A(x)=[d0, d1, d2, d3, d4, d5]。 
    圖 5(a) 所示為循序資料順序之資料流轉換為交
錯順序資料流，循序資料輸入依照順序存入暫存記憶
體，再依交錯的位址讀出，即可轉換成交錯資料順序
的資料流，也就是交錯器。同樣的在圖 5(b) 所示為
交錯資料順序之資料轉換為循序資料之資料流，交錯
資料輸入依照順序存入暫存記憶體，再依反交錯的位
址讀出，即可轉換成循序資料順序的資料流，也就是
反交錯器。但如果稍微修改一下存取順序，如圖 5(c) 
所示為交錯資料順序之資料轉換為循序資料之資料
流，交錯資料輸入依照交錯順序存入暫存記憶體，再
依順序讀出，即可轉換成循序資料順序的資料流，其
中使用交錯的位址實現反交錯器。所以使用圖 5(a)和
圖 5(c)的交錯器與反交錯器架構只需要使用交錯器
表，可以省下儲存反交錯器表的唯讀記憶體。 
 
 
 
 
 
  圖 5 (a) 交錯器資料流運作圖 
 
 
 
 
 
 
  圖 5 (b) 傳統反交錯器資料流運作圖 
 
 
 
 
 
 
  圖 5 (c) 新型反交錯器資料流運作圖 
    圖 5  無反交錯器表法架構說明 
2.1 使用新型無反交錯表之渦輪解碼器架構 
    圖 6 為只需要交錯器表的渦輪解碼器架構，圖
6(a)為此渦輪解碼器工作在 phase1 時兩個外部資訊記
憶體皆以循序位址存取。圖 6(b)為此渦輪解碼器工作
在 phase2 時兩個外部資訊記憶體皆以交錯位址存
取。因為兩個記憶體的存取順序皆相同，所以可以使
用一個雙埠記憶體取代，如圖 7，其中有底線的文字
表示工作在 phase1，無底線者表示工作在 phase2。 
/*Interleaver*/ 
for(i=0;i<n;i++) 
B[i]=A[π(i)]; 
/*De-interleaver*/ 
for(i=0;i<n;i++) 
C[i]=B[π-1 (i)]; 
/*Interleaver*/ 
for(i=0;i<n;i++) 
B[i]=A[π(i)]; 
/*De-interleaver*/ 
for(i=0;i<n;i++) 
  C[π(i)]=B[i]; 
d4d5 d2d3 d0d1
45 23 01
d 0
d 1
d 2
d 3
d 4
d 5
0
1
2
3
4
5
d4d2 d5d1 d3d0
42 51 30
5~0  (5)∼   (0)π π
交錯資料順序循序資料順序 寫入
讀出
A B
暫存記憶體
d4d5 d2d3 d0d1
45 23 01
d 0
d 1
d 2
d 3
d 4
d 5
0
1
2
3
4
5
d4d2 d5d1 d3d0
42 51 30
5~0
循序資料順序交錯資料順序 寫入
讀出
B C
暫存記憶體
 (5)∼  (0)π π
d4d5 d2d3 d0d1
45 23 01
d 3
d 0
d 5
d 1
d 4
d 2
0
1
2
3
4
5
d4d2 d5d1 d3d0
42 50 13
5~0
循序資料順序交錯資料順序 寫入
讀出
B C
暫存記憶體
  (5)∼   (0)1−π1−π
 7
(Sub-segment)表示每個 4L 的長度，例如:如圖 10(a)
所示為一個碼框長度為 384 的交錯器表，可以分成 6
個次節段。在圖 10(b)中原本的六個次節段被交錯的
放置於兩個唯讀記憶體中，如果此時要存取 π(100)
的值，原本的索引值 100 則必須減掉 64 而得到 36 之
後，再從 Rom2 中第 36 個位置取出 π(100)而這樣的
過程稱為位址轉換(Address conversion)。可以注意到
圖 10(b)兩個記憶體間的虛線連接代表位址不連續且
需要位址轉換，因此以這個交錯表為例，輸入一個未
知的索引值 x 必須要經過判斷是否小於 64、小於 192
且大於等於 64、小於 320 且大於等於 192、大於等於
320 分後別減去 0、64、128、192 才能得到正確的索
引值 π(x)，複雜度隨交錯器表的大小變大而增加。但
如果分割之後經過重組如圖 10(c)所示，如果以此方
式排列則只需要判斷是否大於 192 後減去 192，而不
論交錯器表如何的增大位址，其不連續需要轉換的地
方只有一個，因此複雜度由原本的線性降成常數。 
 
 
 
 
 
 
 
 
 
 
     
 
 
圖 11 為各種分割後可能產生的分割情形以及重
組方式，每個方框代表著一個次節段，方框中的文字
代表著在未分割前之交錯器表中每個次節段的相對
位置。其中只有平衡偶數分割有兩個位址不連續點，
其餘皆只有一個。              
1 4
5 2
3 6
7 8
1 4
5 2
3 6
 
圖 11 (a) 平衡奇數分割  圖 11 (b) 平衡偶數分割 
     
圖 11 (c) 不平衡奇數分割 圖 11 (d) 不平衡偶數分割 
圖 11  各種分割情形下的重組方式 
3. 平行渦輪解碼器架構分析設計 
3.1 平行渦輪解碼器架構設計 
    為了提高渦輪解碼速度，我們以 N 個 SISO 解碼器
對 N 個子碼框同時進行解碼。直覺上可以得到 N 倍的
解碼速度，我們稱之為平行效率等於 N( N=η )，但事
實上很多參數必須滿足某些條件下，平行效率才會趨近
於 N( N≈η )。因此在第一小節中，將會探討渦輪解碼
器平行效率，以提供解碼吞吐量的計算；接下來我們發
展出可延展式平行渦輪解碼器架構，其彈性化架構非常
適合可參數化 SIP 設計，以提供未來 SOC 之硬體整合。 
3.2 渦輪解碼器平行效率分析 
    在討論平行架構前，我們先探討單一 SISO 解碼器
的例子，我們假設碼框總共切割成 16 個滑動窗，其中
每個滑動窗長度為 L，則可以依據 SISO 演算法得到解
碼位置時間對應圖如圖 12 所示。當 SISO 解碼器經過
2L 時間後可以得到 0~2L 的接收資訊，因此預先逆向遞
迴計算單元才開始動作。接著在 3L 與 4L 時間點過後，
分別逆向遞迴計算單元與順向遞迴計算單元也依序開
始動作。 
    我們所採用的 MAP演算法當在做順向遞迴計算時
同時會產生解碼輸出，因此經過 4L 的延遲後可以得到
即時的解碼輸出。因為整個碼框長度 lengthfr _ 為
圖 10 (a) 分割前之交錯表 
圖 10 (b) 分割後之交錯表 
圖 10 (c) 分割重組後之交錯表 
圖 10  分割重組交錯器表 
 9
係圖，用以評估渦輪解碼器的效能。在本 IP 產生器在
產生 IP 的同時也會自動地開始模擬，模擬完後會將模
擬的數據繪成錯誤率與雜訊的關係圖，可以快速地提供
設計者有關此 IP 之錯誤更正能力，在做法上我們的軟
體模擬可依照使用者所設定的渦輪編碼器規格以 C 語
言模擬，在訊雜比 0~2db 每 0.5db 一點，取樣值 107，8
個遞迴，在這裡我們選擇需要模擬。按下 OK 鍵後，軟
體模擬在產生合成所需之檔案之後立即開始，此時會出
現圖 17 的進度顯示器，可以精準地得知目前軟體模擬
的作業執行的百分率，由於軟體模擬的資料量龐大，模
擬時間往往都在 30 分鐘至 1 小時間，視渦輪解碼器之
規格而定。模擬完成之後會立即顯示單色的渦輪解碼器
的模擬結果如圖 18 所示。 
 
 
 
 
 
5. 結果比較表 
    若要得到渦輪解碼器的面積、速度及功率消耗上的
表 現 ， 只 需 要 將 RTL Verilog code 進 行 合 成
(Synthesis)。利用 Synopsys 所提供之合成工具(Design 
Compiler)，並且取得合成元件庫(Synthesis library)，如
CIC 提供的 TSMC 0.18 1P6M Design Kit。經過合成後，
合成工具會對電路進行最佳化，並且產生閘邏輯硬體描
述語言，同時也可以評估出面積、速度及功率的數據。
在效能比較上我們將該一新型的無反交錯器表之渦輪
解碼器與傳統的具反交錯器表架構的渦輪解碼器做記
憶體需求、功率、速度及面積的比較。 
 
1 MAP 2 MAP 4MAP Memory 
requirement
(bits)  
Traditio
nal 
Propo
sed 
Traditi
onal 
Propo
sed 
Traditi
onal 
Propo
sed 
Interleaver 1024×10 
1024×
10 
512×1
0 
512×1
0 
256×1
0 
256×1
0 
De-interlea
ver 
1024×1
0 0 
512×1
0 0 
256×1
0 0 
Extrinsic 
memory 
1024×6
×2 
1024×
6 
1024×
6×2 
1024×
6 
1024×
6×2 
1024×
6 
Total size 
(not include 
MAP and 
data buffer)
32768 16384 22528 11264 17408 8704 
Reduction - 50% - 50% - 50% 
Input buffer 1024×12 
1024×
12 
1024×
12 
1024×
12 
1024×
12 
1024×
12 
Memory in 
MAP 1280 1280 
1280×
2 
1280×
2 
1280×
4 
1280×
4 
Total 46336 29952 37376 26112 34816 26112
Reduction - 35.35% - 
30.13
% - 25% 
 
 
1 MAP 2 MAP 4MAP  
Traditional Proposed Traditional Proposed Traditional Proposed 
Power(mW) 57.93 54.63 92.99 86.80 163.85 145.60 
Power reduction - 5.7% - 6.7% - 11.1% 
Working 
frequency(MHz) 
179.19 179.19 179.62 179.62 179.62 179.62 
Total memory 
area(um2) 
467525.26 423194.93 582368.14 514828.30 821647.15 693265.52
Total memory 
reduction 
- 9.5% - 11.6% - 15.6% 
Chip area(um2) 642273.56 595454.75 905968.50 832600.62 1443438.87 1300089.12
Chip area reduction - 7.3% - 8.1% - 9.9% 
圖 16  渦輪解碼器 IP 產生器之參數設定 
圖 17  渦輪解碼器軟體模擬進度顯示器
圖 18  的渦輪解碼器的模擬結果 
表 1  採 1、2、4 個 MAP 渦輪解碼器之記憶體需求比較 
表 2  採 1、2、4 個 MAP 渦輪解碼器 
之消耗功率、面積及工作頻率的比較 
Specification
Structures 
