等，元件則是指真正完成信用查詢、庫存查
詢等工作的程式。由例子中可見，SOA 的系
統組成與企業的經營管理基本單元十分接
近，如此高階的應用系統發展模式可使得發
展者更專注於企業需求的滿足  (coarse 
grain)，而不僅僅是資訊技術的應用  (fine 
grain)。SOA 已成為現今軟體發展的重要技
術，透過 SOA 讓異質系統整合變得容易，
程式再用度也提高。不必自行開發或擁有所
有程式元件，發展者可以視需要組合網路上
最好的服務。不受限於特定廠商的產品功能
或是平台，達到真正的開放性 (Openness)。 
要實現 SOA，需要企業的程式設計師改採
「持續累積服務」的觀念與角度來開發應用
程式，即便這麼做在短時間內看不到顯著好
處，程式師還是必須跳脫、超越過往對應用
程式的想法，改以「既有服務可否再運用？」
或者是「能否沿用其他同仁開發過的服務再
建構？」的觀點來面對程式開發，為了要達
到這個目的，相關需求與開發文件的完整與
保存，就相當的重要。「重複使用」是 SOA
的另一項重點，或者應該這麼說：維繫 SOA
世界的底層基礎就是可以重複使用的元件。
SOA 主張「程式開發技術」與「程式建構方
法」的交替並用，以類似訊息溝通的方式，
將數個所需的「業務服務」進行連結，藉此
實現一個新的應用程式，而非「從頭開發」。 
透過適當的程式組合及訊息傳送式的程
式連結，可讓企業快速因應客戶的需求與改
變，新的應用程式只要透過「訊息微調」即
可實現，而不需要「重新撰寫」。而 SOA 不
只利用 Web Services 來擴展重複使用的概
念，更採用了「商務服務」（business services）
的技術來強化元件的重複使用。為何 SOA 會
愈來愈受到重視，可以說 SOA 解決了企業的
5 大需求，包括快速回應市場改變、公司對內
與對外的業務模型和流程、即時資訊來支援
決策、客戶服務方案、應付新的及演化中的
政府法規。 
由於 SOA 已成為現今軟體發展的重要技
術，透過 SOA 讓異質系統整合變得容易，
程式再使用度也提高。不必自行開發或擁有
所有程式元件，發展者可以視其需要組合網
路上最好的服務。不受限於特定廠商的產品
功 能 或 是 平 台 ， 達 到 真 正 的 開 放 性
(Openness)。從分散式元件架構到 SOA 概念
上，SOA 如同物件導向、軟體元件等軟體技
術一般，運用小的零組件組合成應用系統。
但 SOA 強調的是如何將彼此關係鬆散的應
用系統功能元件在網路上發行、組合及使
用。SOA 具有下列技術特性[2]： 
1. 分散式架構 (distributed)－SOA 的組成元
件是由許多分散在網路上的系統組合而
來，可能是區域網路，也可能是來自廣域
網路。例如網站服務技術 (web services) 
就是運作 HTTP 來相互連結的 SOA。如
此的作法，也使得網站服務技術很快的就
成為所有支援網際網路的系統平台均能使
用的技術。 
2. 關係鬆散的界面 (loosely coupled)－傳統
的系統主要是將應用系統功能需求切割成
相互關聯的小零組件：模組、物件或元件，
發展者要花費極大的心力了解零組件是如
何設計及使用，以確保不會違反零組件連
接關係限制。如此一來，若要以不同零組
件替換原始設計，就成為一件困難的事。
SOA 的作法是以界面標準來組合系統，只
要符合界面要求，零組件可以任意替換，
大幅提高系統變更的彈性度。 
3. 依據開放的標準 (Open standard)－使用開
放標準是 SOA 的核心特色，過去的軟體
元件平台如 CORBA、DCOM、RMI、J2EE 
採用專屬協定作為元件連結的規範，使得
不同平台的元件無法相通。SOA 則著重於
標準與互動性，將可避免不同平台 (.NET 
web services 與 Java web services) 開發程
式間相互整合的困擾。 
4. 以流程角度出發 (process centric)－在建構
系統時，首先了解特定工作的流程要求，
並將其切割成服務界面(包括輸入與輸出
資料格式)，如此其他的發展者就可以依據
服務界面開發 (或選擇) 合適的元件來完
成工作。 
SOA 參考架構[3]指導所有實作 SOA 的
各個專案，能共同朝向企業級服務，和 SOA 
與超文字(Hypertext)，發展出一套實用方法，
並提供一套工具(RETH)供使用者使用，改善
了需求文件定義的架構以及完整性。但此研
究卻缺乏在處理過程中對使用者的引導，也
就是說，使用者在定義需求規格文件與 OOA
的期間，常會發生不知如何繼續處理。因此，
本研究也會針對此問題透過 XML 的技術，讓
系統需求文件可以與其他軟體開發階段的產
出予以整合。 
2.2.2  服 務 導 向 架 構 (Service oriented 
Architecture, SOA) 
在 Brown，Johnston 與 Kelly 的著作中
[30]，定義 SOA 是 “A service is generally 
implemented as a course-grained, discoverable 
software entity that exists as a single instance 
and interacts with applications and other 
services through a loosely coupled (often 
asynchronous), message-based communication 
model.＂ 由於 SOA 的互動性與跨平台性，相
當適合開發跨地域互動系統，Jørstad, Dustdar
與 Thanh 就 提 出 運 用 SOA 開 發 合 作
(collaboration )系統的框架。 
在[6]中，將 Business Service Registry (BSR) 
服務描述資訊的需求提出以下幾個問題： 
1. 應該在最低限度上，提供一些共同語義
簡單常見的詞彙的標準用語  
2. 當使用 service 時，有需要加以指明先決
條件，讓服務請求者知道他們是否有資
格/獲授權使用該服務，或採取何種行
動，以及他們應該採取哪些措施來這樣
做。  
3. 服務描述搜索是一個描述的影響，一種
服務。其中，不光光只是尋找已登記提
供服務的伺服器，還要尋找服務。因此
有一個分類的共同條件來代表這個信息
是必要的，但還需要提供進一步說明的
資訊。 
4. 至少要有些附加的資訊，用來說明服務
的流程，如 Rosettanet 或 BPEL4WS。  
5. 有關於簽章認證方面，只少有三個要素
是重要的：  
 Authenticating the service requester  
 Authorizing which service operations at what 
levels can be provided to the requester, and  
 Auditing the use of the service by the requester 
for various purposes, including billing and 
payment.  
6. 在 BSR 中，潛在請求者必須能夠確定認
證用何種方法，何種等級的服務可以被
得到和審計方法，以確定這是使用者需
要的服務。  
7. 付費機制。 
8. BSR 應當允許一項服務搜索，以確定服
務水準：包括哪些服務質量將提供（包
括提供服務）和什麼，如果有任何協議
的規定，就可能是由第三方負責。  
9. 必須有一些方法，為服務搜索，過濾服
務低於一定程度的信任，價值，也許取
決於個人的喜好就核證機關。  
10. 除了誠信，服務的質量，共用性，可用
性，時效性等，將可提供公正第三方評
斷；而就某種程度的可信度，並 BSR 應
能方便搜索，而且提供使用者個別服務。  
11. BSR 應允許一個搜索參數，以便讓使用
者可以獲得測試服務品質，以及是否符
合使用者所需要的用途上。 
圖 1 展現了從應用程式角度展示了企業級 
SOA 所包含的元素。業務流程 由用戶介面
應用程式 和服務應用程式 進行部分和完全
支援。業務流程中的一個步驟或者通過人工
執行，或者得到用戶介面應用程式的支援。
用戶介面應用程式實現了許多巨集工作流，
而且它們還使用實現業務功能的服務。 
 
圖 1. SOA 元素 
2.2.4  XUM(XML-Based Unified Model)之支援 
在我們先前的研究中，我們提出了以 XML
為基礎的軟體標準整合模型，稱之為
XML-Based Unified Model(XUM)[25][27]，將
相關的方法表示成元件(Components)、關連
(Associations)以及整合鏈結(Integration Links)
可以有效地將不同的標準整合在一起，透過
一致的表現方式以及整合鏈結 (Integration 
Links)的串接，有效達到跨標準間相關連資訊
的串接與再用[24][26][27] [46]，已可證明軟體
設計與軟體實作階段是能夠串接而達到一致
性。 
近年我們也試圖將 XUM 在系統設計的階
段成果，推移至系統開發的初期需求分析階
段，並定義一個符合需求開發的程序，陸續
有 些 階 段 性 成 果 產 生
[45][47][48][49][50][51][52][53] 。在本計畫
中，我們透過 XML 將相關文件整合成一個能
串接軟體開發過程中所有程序共通表示平
台。 
三、一個符合 SOA 特性之需求發展工程 
在軟體開發流程(Software Process)的每一
個階段 (Phase) ，從需求分析 (Requirement 
Analysis) 、 規 劃 設 計 (Design) 、 實 作
(Implementation)一直到測試(Testing)、維護
(Maintenance)，都有其適用的 Model 及技
術，例如物件導向分析 (Object Oriented 
Analysis ， OOA) 、物件導向設計 (Object 
Oriented Design，OOD)、物件導向程式設計
(Object Oriented Programming，OOP)等等。而
在需求擷取方面，雖然也有需求工程
(Requirement Engineering)來幫助工程師獲得
客戶要求(Customer Needs)的相關資訊，再經
由人工作業，來轉換整理成顧客的需求
(Customer Requirements)，然後得到最終的軟
體 需 求 規 格 (SRS ， Software Requirement 
Specification)。但是由於將顧客要求轉換成顧
客需求必須建立在經驗的基礎上，也就是說
如果工程師缺乏相關的經驗，在將要求轉成
需求的過程當中，有可能會遺漏相關的資訊
或是必要之功能。 
本計劃提出一符合 SOA 特性之需求發展
工程，此方法之主要目的在於延伸物件導向
技術之先天特性至 SOA 軟體需求開發階段，
過去鮮少研究計畫與技術將物件導向之觀念
延伸至需求發展階段，雖有少數研究探討人
工之需求轉換[37]，將功能性需求轉換成物件
式需求，這樣的轉換雖然可以解決功能性需
求規格與物件式軟體設計之不相容問題，但
是轉換的缺失與錯誤往往拖延至後續階段才
被發現，這樣的風險所造成的額外花費叫人
無法預知[38]。 
在進行 SOA 系統開發的需求分析前，最
重要的是要先掌握SOA的特性，在SOA下(如
圖 2)，UDDI 伺服器扮演服務提供者與服務使
用者的仲介角色，基本上 UDDI 伺服器主要
提供三個重要機制： 
Service
Registry
Service
Requestor
Service
Provider Service
UDDI
WSDL
發行
繫結
(SOAP)
尋找
 
圖 2. 服務導向架構 
1. 註冊機制：接受以 UDDI 規範的資料，
並將服務提供者的資料登錄至資料庫
中。 
2. 查詢機制：讓使用者能快速找到合適
的 Web Service。 
3. 發佈機制：將已註冊之 Web Services
通報給其他註冊伺服器。 
SOA 與元件式軟體工程最大的不同在於
SOA 的服務應該是以獨立而且鬆散耦合，也
就是無論執行環境為何，它們的運作方式應
該都一樣，因此它們的介面是個「提供」介
面，以便外界存取它的服務功能。 
階段開發者需要描述系統如何透過原件合作
完成第一階段(Customer Needs)所定義出來的
系統最終目標。也就是描述這些靜態元件間
的互動關係，以及這些互動行為對這些元件
之影響層面，透過一連串有系統的預定行為
達到使用者預期的功效。在這一階段，也是
SOA 與傳統系統開發的需求工程最大的差
異，由於 SOA 主要架構包含業務流程、服務
編排層與基本服務所構成，因在此階段必須
將需求再進一步區分哪些需求屬與業務流
程，哪些需求為服務編排，哪些屬於基本服
務：服務編排是與 SOA 的基礎架構，有緊密
關係，而以及基本服務則與 web services 所以
提供的服務元件相關。因此如何將需求區分
為業務流程、服務編排層與基本服務便成為
在需求擷取後，進入需求分析的重點。完成
需求分類。整個系統運作流程如圖 3 所示： 
進一步綜合先前所討論的，對於 SOA 需
求工程，主要可以分為以下兩部分： 
1. Infrastructure (基礎架構) 
2. Component Described (元件責任) 
而這兩部分在後續的系統重組再用時，也
是相當重要的訊息，因此如何擷取、保存、
搜尋、再運用，將是降低 SOA 系統開發成本
的重要因素。在 OOA/D 裡，對物件的規畫
方式，可以透過各種各樣的 Design Pattern 完
成，當然也會有 Anti-Pattern 的論點，但總
是一系列的方法。在這些方法裡，都是以物
件的行為作為規劃的出發點。 而 SOA 則有
所不同， 每個 software (or component) 都是
一個單獨的 service (for business)，這與 OO 
裡各物件的用途稍有不同。如果從這樣的角
度來說，  SOA 可以被當成是另一種 
“ Pattern” 來討論。因此，我們預計從需求擷
取階段，就運用 Pattern 的概念，讓所有元件
能有一致的規範。既然 SOA 元件可以被當做
pattern 來看待，相關的設計資訊就可以被再
使用，因此這些資訊可以被保存於服務元件
資料庫與業務流程資料庫提供給後續系統開
發運用。 
 
圖 3. SOA 需求塑模環境運作流程 
連同需求知識庫，一個適當的資料儲存表
示、分類、搜尋、擷取、調適的機制是需要
的。因此在本計畫中，我們也將會針對這些
元件資料庫，設計支援的分類、搜尋、擷取、
調適機制。 
除了需求擷取與元件庫相關的配合，對於
重組後或新設計之 Web Service 元件，相關的
配合機制也應該包含如何透過 UDDI 機制優
先搜尋可用服務元件，以及若無合適服務元
件時，新設計的服務元件必須產生對應的
WSDL 以及向 UDDI 註冊的配合。另外在先
前文獻探討中，有部分學者提到，在 SOA 架
構下，使用者對於服務的評價是選取服務元
件時重要的依據，因此回饋機制在一個 SOA
開發環境中，也應該被包含。 
對於如何將收集到的 SOA 需求轉換成對
應的系統文件，又能保持原本需求文件間的
關連，我們預計運用先前在 XML-Based 
Unified Model(XUM)[25][27]的經驗，以預先
定義符合 SOA 特性之 XUM（在此我們稱之
為 SOA-Based XUM），將所收集的 SOA 需
求建立成一個以 XML 為基礎的整合描述文
件，再透過 XSLT 轉換成對應的標準描述語
言如 WSDL 等。其運作流程如下圖 4 所示： 
所組成 
 服務的分類（核心業務功能服務，資
料服務，展現服務等），以及各類服務
的設計原則和建議 
 介面標準 (JMS, RMI, HTTP 等)，建
議的介面 style(例如：盡量採用粗顆
粒、非同步的服務呼叫模式)，可靠性
要求等 
 需要遵循的 WS-* 標準 
 安全控制策略 
 服務版本控制策略 
 服務和資料模型採用規範 
 服務生命週期定義 
2. SOA 需求知識庫 
以預先建立的 SOA 需求知識庫，協助開發
者明確擷取使用者需求。 
3. 業務流程元件庫 
以預先建立的業務流程元件庫，協助開發
者有建立較成熟的 SOA 業務流程。 
4. Web Service 服務元件庫 
以預先建立的 Web Service 服務元件庫，協
助開發者有擷取所需的 Web Service 服務
元件同時透過 WSDL 與 UDDI 搜尋合用的
Web Service 服務元件，一旦無合適元件，
開發者可重新開發，並將開發好的元件回
存 Web Service 服務元件庫，以便後續使
用。 
5. SOA 需求轉換 WSDL 模組 
將擷取出的服務元件需求，轉換成為對應
的 WSDL。 
6. SOA 需求 UDDI 搜尋模組 
將擷取出的服務元件需求，轉換成為對應
的 UDDI 服務搜尋，協助開發者找尋適當
服務元件。 
7. 流程編排編輯器 
將擷取出的業務流程編輯成為對應的
BPML。 
8. 業務流程編輯器 
提供開發者將擷取出的業務流程再進行編
輯或修改。 
9. 服務元件編輯器 
提供開發者將擷取出的服務元件規格進行
編輯或修改，或提供開發新的服務元件。 
10. 服務回饋 
當服務請求者使用過後，蒐集回饋意見，
以便後續開發時對於 SOA 需求以及服務
元件取用參考依據。 
11. XUM 整合架構 
對於所建立的 SOA 系統元件以及需求，利
用 XUM 的機制，加以整合，以便後續開
發時再利用與追蹤。圖 8 便是描述需求文
件轉換成 XUM 整合架構概念。 
 
圖 8. Requirement to MXUM 
整合架構轉換概念 
 
四、結論與未來工作 
在這個計畫中，我們研究 SOA 相關的研
究和實際上 SOA 需求階段的議題，並實作支
援 SOA 需求塑模的工具的雛型。我們將 SOA
需求塑模及其雛型工具應用在實際的 SOA 系
統開發上並證明我們方法與系統的可行性。 
本計畫提出支援 SOA 需求特色的塑模環
境： 
1. 提供符合 SOA 特性的統一模組(Integration 
Unified Model)，供系統開發者設計 SOA
元件相關整合模組(Integration Model)。我
們將研發一個開發方法，可以彈性的針對
每個不同階段的軟體開發問題設計有效的
整合模組。 
Transactions on Software Engineering, 20(8): 
569-578, 1994. 
[20] Heitmeyer, C., Jeffords, R., and Kiskis, D. 
“Automated Consistency Checking Requirements 
Specifications,” ACM Transactions on Software 
Engineering and Methodology, 5(3): 231-261, 1996. 
[21] Lamsweerde, V. Darimont, R. and Letier, E. 
“Managing Conflict in Goal-Driven Requirements 
Engineering,” IEEE Transactions on Software 
Engineering, 24(11): 908-926, 1998. 
[22] Kaindl, H. “A practical approach to combining 
requirements definition and object-oriented 
analysis,” Annals of Software Engineering, vol. 3, 
319-343, 1997. 
[23] Mittal, K. Requirements process for SOA projects, 
Part 1: Capturing requirements for an SOA 
application, IBM, Nov. 2006, accessed at 2007/12/20, 
Available http://www.ibm.com/ 
developerworks/library/ar-soareq/ 
[24] Chu, C.W, Lai, Y.P., Peng, Y.C. and Lain, W.D. 
“Design Pattern-Based N-tier Architecture for 
E-Commerce Systems,” Journal of Internet 
Technology, 2(1): 81-89, 2001. 
[25] Chu, C.W., Chang, C.H., Lu, C.W., Yang, H., Jiau, 
H.C., Chung, Y.C., and Qiao, B., "Enhancing 
Software Maintainability by Unifying and Integrating 
Standards," Advances in Software Maintenance 
Management: Technologies and Solutions, Idea 
Group Publishing: Hershey PA, 114-150, 2003. 
[26] Chu, C.W., Lu, C.W., Chang, C.H. and Chung, Y.C. 
“Pattern Based Software Re-engineering,” Handbook 
of Software Engineering and Knowledge Engineering 
Vol. I. World Scientific Publishing: River Edge, NJ, 
767-786, 2001. 
[27] Lu, C.W., Chu, C.W., Chang, C.H., Lian, W.D., and 
Yang, D.L., "Integrating Divers Paradigms in 
Evolution and Maintenance by an XML-based 
Unified Model," Journal of Software Maintenance 
and Evolution, 15(3): 111 – 144, 2003. 
[28] Ali, S., Soh, B., and Torabi, T. “Using Software 
Engineering Principles to Develop Reusable 
Business Rules,” Proceedings of the First 
International Conference on Information and 
Communication Technologies (ICICT 2005), pp. 
276-283, Aug. 2005.  
[29] Anderson, W. “What COTS and Software Reuse 
Teach Us about SOA,” Proceedings of the Sixth 
International IEEE Conference on 
Commercial-off-the-Shelf (COTS)-Based Software 
Systems, pp. 141-149, March 2007.  
[30] Brown, A., Johnston, S., and Kelly, K. “Using 
Service-Oriented Architecture and Component-Based 
Development to Build Web Service Applications,” 
Rational Software White Paper, 2002. 
[31] Endrei, M. et.al. Patterns: Service-Oriented 
Architecture and Web Services, IBM, April 2004. 
[32] Dong, J., Yang, S., LadService, D.S., and Sun, Y. 
“Oriented Evolutions and Analyses of Design 
Patterns,” Proceedings of the Second IEEE 
International Workshop Service-Oriented System 
Engineering, pp. 11-18, Oct. 2006.  
[33] Jiang, M. and Willey, A. “Service-Oriented 
Architecture for Deploying and Integrating 
Enterprise Applications,” Proceedings of the 5th 
Working IEEE/IFIP Conference on Software 
Architecture (WICSA 2005), pp. 272-273, 2005.  
[34] Shi, X., Han, W., Huang, Y., and Li, Y. 
“Service-Oriented Business Solution Development 
Driven by Process Model,＂ Proceedings of the Fifth 
International Conference on Computer and 
Information Technology, Sept. 2005, pp. 1086 – 
1092, 2005. 
[35] Stal, M. “Using Architectural Patterns and Blueprints 
for Service-Oriented Architecture,” IEEE Software, 
23(2): 54-61, March/April 2006. 
[36] Zhu, H. “Building Reusable Components with 
Service-Oriented Architectures,” Proceedings of the 
IEEE International Conference on Information Reuse 
and Integration, pp. 96-101, Aug. 2005. 
[37] Kaindl, H. “A practical approach to combining 
requirements definition and object-oriented 
analysis,” Annals of Software Engineering, vol. 3, pp. 
319-343, 1997. 
[38] Jordan, R., Smilan, R., and Wilkinson, A. 
“Streamlining the Project Cycle With 
Object-Oriented Requirements,” Object-Oriented 
Programming Systems, Languages, and Applications, 
pp. 287-300, 1994. 
[39] Gelperin, D.  “Precise Use Cases,” LiveSpecs 
Software, 2004. 
[40] Stephane S. “Supporting use case based requirements 
engineering,” Information and Software Technology, 
48(1): 43-58, Jan. 2006. 
[41] Object Management Group, OMG Systems Modeling 
Language (OMG SysML™), V1.0, September. 2007. 
[42] Bock, C. “SysML and UML 2 Support for Activity 
Modeling,” Systems Engineering, 9(2): 160-186, 
2006. 
[43] Johnson, T.A., Jobe, J.M., Paredis, C.J.J., and 
Burkhart, R. “Modeling Continuous System 
Dynamics in SysML” Proceedings of the IMECE 
2007, Nov. 2007. 
[44] Vanderperren, Y. and Dehaene, W. “SysML and 
Systems Engineering Applied to UML-Based SoC 
Design,” In: Proc. 2nd UML-SoC Workshop at 
42nd DAC, Anaheim (CA), USA, 2005. 
[45] Chang, C.H., Lu, C.W., and Chu, C.W., "Using 
SysML and MORE to Support Software 
Maintenance and Integration," Proceedings of the 
APSEC2008 ATGSE Workshop, pp. 23-24, 2 Dec., 
2008.  
[46] Li, Y., Yang, H., and Chu, C.W. “Information 
Elicitation from Software Code,” Handbook of 
Software Engineering and Knowledge Engineering, 
World Scientific Publishing, USA, 2002. 
[47] Lu, C.W., Chang, C.H., Chu, C.W., Cheng, Y.W., 
and Chang, H.C. "A Requirement Tool to Support 
Model-based Requirement Engineering," 
Proceedings of the 2nd IEEE International Workshop 
Quality-Oriented Reuse of Software (IEEE 
出席國際學術會議心得報告 
                                                             
計畫編號 NSC 98-2221-E-164-012 
計畫名稱 支援服務導向架構之需求塑模環境 
出國人員姓名 
服務機關及職稱 
盧志偉 
修平技術學院資訊管理系 副教授 
會議時間地點 Zhangjiajie, China,  2010/07/14~2010/07/15 
會議名稱 
1. The 10th International Conference on Quality Software (QSIC 2010) 
2. The First International Workshop on Embedded System Software Development 
and Quality Assurance (WESQA 2010) 
發表論文題目 
1. From Applications, to Models and to Embedded System Code: A Modeling 
Approach in Action 
2. Supporting Tool for Embedded Software Testing 
 
一、參加會議經過 
    QSIC 為 IEEE Reliability Society 主辦之國際重要軟體品質研討會，會議論文集並收錄於
EI，本年度會議為第 10 屆，在中國湖南張家界舉行。會議時間為七月十四日至十五日兩天，
共有來自台灣、中國、美國、英國、日本、澳洲、加拿大、西班牙等 18 國近百位學者參加。 
    本人於本次會議投稿並與會 QSIC 大會發表論文，另外並參與 QSIC 2010 共同舉辦由東海
大學朱正忠教授、中正大學熊博安教授與本校張志宏助理教授等共同籌辦 The First International 
Workshop on Embedded System Software Development and Quality Assurance (WESQA 2010)，最後收
錄 6 篇論文。於 WESQA 2010 會中本人與東海大學、中正大學、台中教育大學、逢甲大學、
修平技術學院等研究團隊共同發表兩篇研究論文，並與 Prof. Wong, University of Texas at Dallas, 
USA, Prof. Kuo, Swinburne University of Technology, Australia, Prof. Jiang, The University of Hong 
Kong, Hong Kong, Prof. Chen, Swinburne University of Technology, Australia 等多位學者交換研究
心得。 
 
二、與會心得 
    承蒙國科會支持，給予經費參與國際會議，有幸與各國資訊技術先進們一同交流，與會
人員也給予許多寶貴意見，對於目前正在進行中的研究，有相當的助益。希望未來國內能對
團隊爭取相關國際會議，特別是大型國際會議能多給予支持。 
 
 
98年度專題研究計畫研究成果彙整表 
計畫主持人：盧志偉 計畫編號：98-2221-E-164-012- 
計畫名稱：支援服務導向架構之需求塑模環境 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 2 2 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 4 4 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 2 2 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
