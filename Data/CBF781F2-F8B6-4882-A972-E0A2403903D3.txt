 2
sufficient information from original images so that the information contained in the resulting 
images is enough to allow further analysis [1-2, 4-5, 7-10]. Gray-level images can be 
displayed in topographical representations (see Figure 1.b) where the height of each cell 
represents the gray-level of the corresponding pixel. 
  
 
(a) (b) (c) 
Figure 1. Gray-level images in bitmap and topographical representations. 
 
Any pixel p of a gray-level image is surrounded by eight neighboring pixels where p is called 
8-adjacent to any of the eight neighboring pixels, and 4-adjacent to any of the four 
orthogonally neighboring pixels. Two pixels are 8- or 4-neighbors to each other if they are so 
adjacent. The immediate neighborhood of a pixel p, denoted N(p), is the union of p and all p’s 
8-neighbors. Furthermore, let N*(p) = N(p)–{p}. An 8- or 4-path from p to q, denoted (p, 
q), is a sequence of pixels, p = p0 – p1 – p2 –…– pn = q, from p to q where all two consecutive 
pixels in the sequence are 8- or 4-adjacent, respectively. Let min(π(p, q)) be the minimum in 
the set of g(pi), for every pi in (p, q). Then the degree of connectedness of p and q, denoted 
C(p, q), is defined to be maximum in the set of min(j(p, q)) for every 8- or 4-path j(p, q) 
from p to q [10-11]. Topology preservation is an important property of gray-level thinning 
algorithms [3, 10-11]. Two important properties of topology preservation in gray-level images 
are introduced as follows.  
 
 Two pixels p and q are connected if C(p, q)  min(g(p), g(q)) [10-11]. 
 A gray-level pixel p is called simple if its reduction does not reduce the degree of 
connectedness of pixels in N*(p) (with paths lie in N*(p)) [10-11]. 
 
Thinning (or skeletonization) is to iteratively remove unnecessary object pixels from an object 
so that only a unit-width skeleton of the original object is left for further structural analysis 
(see Figure 1.c). A gray-level thinning algorithm is an iterative process where, in each 
iteration, a number of gray-level pixels are reduced. A thinning algorithm can be described as 
a set of deletion templates. Each template is a small array surrounding a central testing pixel. 
A gray-level pixel satisfies any deletion template is a candidate to be reduced. A gray-level 
thinning algorithm may contain a set of preservation templates where a gray-level pixel 
 4
disconnected objects in Figure 3.a are connected in Figure 3.b. Figure 3.c~d show the 
skeletons of the original image in Figure 3.a, and the dilated image in Figure 3.b, respectively. 
Both skeletons in Figure 3.c~d preserve topology of the original image in Figure 3.a. 
However, for some applications, Figure 3.d presents more useful results than the results in 
Figure 3.c. 
 
  
(a) (b) 
  
(c) (d) 
Figure 3. Appropriate skeletons of rather close gray-level objects. 
 
 
(a) (b) (c) 
Figure 4. Appropriate skeletons of far enough gray-level objects. 
 
The dilation operation is useful for close-enough objects. For objects of enough distance, the 
skeletons of dilated results should maintain the shapes of the skeletons extracted from the 
original objects. Figure 4.a shows several objects of enough distance. Since the original 
objects are of enough distance, the dilated objects in Figure 4.b maintain the same 
connectedness of the original objects in Figure 4.a. Thus, the skeletons (shown in Figure 4.c) 
extracted from the dilated image in Figure 4.b are almost equivalent to the skeletons extracted 
directly from the original image in Figure 4.a. 
 6
preserved as a meaningful branch in the final skeleton. Figure 6.b shows the skeleton after the 
applications of the ThinLayer operation on the image shown in Figure 6.a. 
 
4. Conclusion 
 
The first-year results of this project are not quite satisfied. More work need to be done 
especially in extracting meaningful skeletons. The second year research will continue this 
topic to solve problems in other configurations. The results will be extended to gray-level 
images in the second year research as well.  
 
5. References 
 
[1] K. Abe, F. Mizutani and C. Wang, Thinning of gray-level images with combined 
sequential and parallel conditions for pixel removal, IEEE Trans. Syst. Man Cybern. 24, 
294-299, 1994. 
[2] C. Arcelli and L. Serino, Parallel reduction operators for gray-level pictures, Int’l 
Journal of Pattern Recognition and Artificial Intelligence, 14-3, 281-295, 2000. 
[3] C. Arcelli, Topological changes in gray-tone digital pictures, Pattern Recognition, 32, 
1019-1023, 1999. 
[4] C. Arcelli, G. Ramella, Finding gray-skeletons by iterated pixel removal, Image and 
Vision Computing, 13, n. 3, pp. 159-167, 1995. 
[5] C. R. Dyer and A. Rosenfeld, Thinning operations on gray-scale pictures, IEEE Trans. 
PAMI,. 1, 88-89, 1979. 
[6] V. Goetcherian, From binary to grey tone image processing using fuzzy logic concepts, 
Pattern Recognition, 12, pp 7-15, 1980. 
[7] M. K. Kundu, B. B: Chaudhuri and D. Dutta Majumder, A parallel graytone thinning 
algorithm (PGTA), Pattern Recognition Letters, 12, pp. 491-496, 1991. 
[8] S. K. Pal, Fuzzy skeletonization of an image, Pattern Recognition Letters, 10, 17-23, 
1989. 
[9] L. Pothuaud, B. V. Rietbergen, L. Mosekilde, O. Beuf, P. Levitz, C. L. Benhamou and S. 
Majumdar, Combination of topological parameters and bone volume fraction better 
predicts the mechanical properties of trabecular bone, J. of Biomechanics, 35, 
1091-1099, 2001. 
[10] A. Rosenfeld, The fuzzy geometry of image subsets, Pattern Recognition Letters, 2, 
311-317, 1984. 
[11] A. Rosenfeld, Fuzzy digital topology, Information and Control, 40, 76-87, 1979. 
A Geometry Preserving Thinning Algorithm  
On Binary Images 
 
Cherng-Min Ma 
Department of Business Management, Ming Chi University of Technology, Taiwan 
 
 
Abstract - A thinning algorithm on binary images should 
preserve both topology and geometry. The property of 
topology preservation of a thinning algorithm can be 
justified mathematically. Nevertheless, there are no 
rigorous rules for a thinning algorithm to preserve 
geometry. This research mainly discusses geometry 
properties of thinning on binary images. A thinning 
algorithm extracting more meaningful binary skeletons is 
proposed. 
Keywords: thinning, geometry preserving, binary image, 
closeness. 
 
1. Preliminary 
An image is an array in which each cell represents a 
pixel of the image and is assigned a value indicating its 
color. If any pixel of a image can only be colored either 
white (valued 0) or black (valued 1), then the image is 
called a binary image; if a pixel of an image is colored 
various gray-levels from white (valued 0) to black (valued 
n where n is a positive integer), then the image is called a 
gray-level image. Normally, n = 255 addresses the 
gray-level images using one byte to describe all 256 
different gray levels of a pixel. 
Image processing operations are useful in many research 
and application fields (for example, pattern or text 
recognition, medical informatics, multimedia applications, 
etc.) Generally, the information of an image is too 
abundant to perform effective flow or structural analysis. 
Many such operations are extracting minimal but sufficient 
information from an image (see the following figures 
where an object, its skeleton and the location of the 
skeleton to the object are presented) so that the remaining 
information contained in the resulting image maintains the 
same structural meaning of the original image [2, 4]. 
    
Thinning (or skeletonization) can be described as an 
iterative process where, in each iteration, a number of 
pixels are deleted from an object so that only an 
as-thin-as-possible skeleton of the original object is left for 
further structural analysis. A thinning algorithm should 
preserve topology (ex., “8”, “6” and “3” are topologically 
different; and “6” and “o” are topologically equivalent.) A 
thinning algorithm should preserve geometry which 
implies how much two objects look like each other. For 
example, although “6” and “o” are topologically equivalent, 
these two symbols indeed represent different concepts. 
Therefore, they cannot be geometrically equivalent. 
The concepts of 4- or 8-adjacent, 4- or 8-connected 
between pixels of 2D images are defined in [3, 4]. The 
concept of adjacency pairs on 2D binary images is 
introduced in [3, 4] as well. Note that two major adjacency 
pairs for 2D images are (8, 4) and (4, 8) pairs. Let N(p) be 
the 8-neighborhood of p, and let N*(p) be N(p)–{p}, i.e., 
N*(p) is the union of the eight pixels surrounding p [3, 4]. 
Rosenfeld introduced the concept of digital topology in 
[4] that discussed topology sound operations on binary 
images. He also introduced the concept of fuzzy digital 
topology in [5] on gray level images. A gray level thinning 
algorithm is applied to decrease the gray levels of a 
number of pixels of gray level images (see figures below). 
A number of thinning algorithms for gray-level images 
were proposed (see [1, 2]).  
  
 
Let  be the Euclidean distance between pixels where 
the distance (p, q) between a pixel p of coordinate (x, y) 
and a pixel q of coordinate (x + i, y + j) is 22 ji  . For 
example, consider Figure 1.(a), the distances of the pixel p 
to each of the pixels a to i are: (p, a) = 1, (p, b) = 2  
1.41, (p, c) = 2, (p, d) = 5  2.24, (p, e) = 22  2.83, 
operation, a pixel labeled “2” was a black pixel that is 
deleted in the second iteration of a thinning operation, and 
so on. A black cell indicates a black pixel remaining in the 
final skeleton. Note that an unlabeled pixel indicates a 
white pixel.  
Generally the skeletons extracted by (8, 4) thinning 
algorithms are thinner than the skeletons extracted by (4, 8) 
thinning algorithms; but the skeletons extracted by (4, 8) 
thinning algorithms look more like the original object than 
the skeletons extracted by (8, 4) thinning algorithms. Since 
an (8, 4) thinning algorithm deletes more pixels than a (4, 
8) thinning algorithm does, it is likely that a (4, 8) thinning 
algorithm may take less reduction iteration to extract a 
possible final thinned result. 
Figure 4 shows examples of extracting skeletons based 
on the (8, 4) and (4, 8) adjacency pairs respectively. It 
might be acceptable that the skeleton in Figure 4.(b) looks 
more like the original object than the skeleton in Figure 
4.(a) does. For maintaining the connectedness among black 
pixels, the 4-connected skeleton in Figure 4.(b) is thicker 
than the 8-connected skeleton in Figure 4.(a). It would be 
better to establish a thinning algorithm extracting thin 
skeletons and maintaining better geometry properties of 
the original objects. 
An appropriate thinning algorithm should be both 
topology and geometry preservation. Consider the objects 
extremely close to each other in Figure 2, the appropriate 
skeletons may be the case shown in Figure 1.(c). Our new 
approach adopts the traditional 4-subiteration thinning 
algorithm introduced as follows [4]. 
repeat 
delete in parallel every simple pixel p with n(p) = 0; 
delete in parallel every simple pixel p with e(p) = 0; 
delete in parallel every simple pixel p with s(p) = 0; 
delete in parallel every simple pixel p with w(p) = 0; 
until no pixel in I can be deleted in any subiteration; 
Note that when the algorithm is applied to (4, 8) images, 
denoted A4, 8, the term simple means simple in the (4, 8) 
sense, and when the algorithm is applied to (8, 4) images, 
denoted A8, 4, the term simple means simple in the (8, 4) 
sense. Our thinning algorithm, denoted A, contains two 
compound steps: first applying A4, 8 to an input image, then 
applying A8, 4 to the output image of A4, 8. Algorithm A uses 
the advantages of both the (4, 8) adjacency pair (i.e., 
extracting skeletons look like the original objects) and the 
(8, 4) adjacency pair (i.e., extracting thinner skeletons.) 
let I be an input image; 
repeatedly applying A4, 8 to I to delete all possible black 
  pixels until no black pixels can be deleted; 
repeatedly applying A8, 4 to I to delete all possible black 
 pixels until no black pixels can be deleted; 
output I; 
Consider Figure 5. The output image of the above 
compound thinning algorithm A is generated by the second 
step that is an (8, 4) thinning algorithm. Thus, the 
skeletons is thinner than the skeletons by a (4, 8) thinning 
algorithm. Since the first step of the compound thinning 
algorithm A is a (4, 8) thinning algorithm, the skeletons 
look more like the original objects than a (8, 4) thinning 
algorithm does. 
1 1 1 1 1 1 1 1 1 1 1 1 1
1 2 2 2 2 2 2 2 2 2 2 2 1
1 2     3 2 1
1 2 2 2 2 2 2 2 2 2  2 1
1 1 1 1 1 1 1 1 1 2  2 1
  1 2  2 1
  1 2 2 2 1
  1 1 1 1 1
 
Figure 5. The skeletons by the compound approach. 
3. Geometry Preserving Thinning 
Let D be a user defined value denoting the closeness 
between black components. Two black components are 
close to each other if their distance is less than or equal to 
D. We increase the value of a white pixel w by the 
expanding function X, D(w) from the boundary of a black 
component X where if (X, w)  D, then X, D(w) = 1–(X, 
w) / D, otherwise, X, D(w) = 0. The results of X, D for the 
cases of D be 3 or 4 are shown in Figures 6~7. 
  .10 .21 .25 .21 .10
.06 .25 .33 .25 .06  .10 .29 .44 .50 .44 .29 .10
.25 .53 .67 .53 .25  .21 .44 .65 .75 .65 .44 .21
.33 .67 1 .67 .33  .25 .50 .75 1 .75 .50 .25
.25 .53 .67 .53 .25  .21 .44 .65 .75 .65 .44 .21
.06 .25 .33 .25 .06  .10 .29 .44 .50 .44 .29 .10
  .10 .21 .25 .21 .10
D = 3  D = 4 
Figure 6. The neighborhood of a black pixel by  for D = 3 
or 4. All unmarked pixels are white pixels. 
 
 
 
Figure 7. The topographical representations of Figure 6. 
If a pixel w is close to two black components, the value 
w can be increased in parallel by the expanding function  
by the two black components. Thus, we define the growing 
two objects by adding light-gray cells in between. In 
Figure 11.(b), the thinned skeleton is extracted. In Figure 
11.(c), the middle 1 is deleted since it was originally a 
white pixel and added by our approach. In Figure 11.(c), 
the original skeleton is marked by “X” that is shorter then 
the new skeleton. 
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
(a) Two objects that are connected by our approach. 
            
            
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
            
            
(b) Extract the skeleton of the connected object in (a). 
            
            
X X X X X 1 1  1 1 X X X X X
            
            
(c) Refine and compare the skeleton by our approach to a 
result of traditional thinning algorithms 
Figure 11. The thinning operations of our approach. 
 
 
(a) An original image of eight objects. 
 
(b) Possible skeletons by tradition thinning aslgorithm.  
Figure 12. The topographical representation of a binary 
images and its thinned result. 
Topographical representations are used in Figure 12 
since the growing functions G can be imagined as a 
process on gray-level images. Corresponding results are 
shown in Figure 14 in topographical representations. 
Figure 12.(a) contains eight objects. If the eight objects are 
considered close enough, then the skeletons could be 
different to the case when the objects are isolated from 
each other by enough distance. 
The skeletons of the image in Figure 12.(a) by an 
ordinary topology preserving thinning algorithm (without 
considering the closeness of objects) may look like the 
result shown in Figure 12.(b). For better understanding of 
our approach, the images in Figure 12 are converted to 
Figure 13 by array-oriented representations where, in 
Figure 13, darker cells are black pixels, gray-cells are 
deleted black pixels, and white cells are white pixels. 

(a) An original image of eight objects. 

(b) Skeletons by a tradition thinning algorithm. 
Figure 13. Array-oriented representations of the binary 
images and its thinned result in Figure 12. 
Let the image in Figure 12.(a) be the input image. The 
first step of our approach is to expand black components 
based on . In this case, we let D = 4. The expanded result 
after the applications of  is shown in Figure 14.(a). The 
expanded result after  can be considered as gray-level 
images and hence the image is shown by topographical 
representation. 
The next step of our approach is to convert the resulting 
image obtained by  back to a binary image by G. The 
resulting image after the application of G is a binary image 
and is shown in Figure 14.(b). For extracting appropriate 
skeletons, the resulting image by G is thinned by the 
thinning algorithm A4, 8 for extracting a (4, 8) thinned 
image. The thinning algorithm A8, 4 is then applied to the 
