一、研究計畫中文摘要：
關鍵詞：考量輸出入系統的立體資料呈像，資料預取，考量快取記憶體的立體資料呈像，
規則立體資料，快取記憶體失誤處理時間
立體資料呈像在科學界是一個十分重要的問題。不同於電腦繪圖的是，立體資料呈像的過
程涉及立體資料的內部結構，因而導致其在計算上速度的緩慢。一般來說，立體資料其資
料量的大小遠較於電腦繪圖時所處理之資料量來得大，因此將資料從硬碟載入至記憶體所
需的時間也成了評量系統效能時不可忽略的因素。對此我們曾提出一種方法稱為「考量輸
出入系統的立體資料呈像技術」（I/O-Conscious Volume Rendering），將給定資料先分割為相
等大小的區塊，而在檔案系統進行下一區塊的預取（Prefetching）時，中央處理器同時處理
之前所載入的區塊，如此即可用系統執行於計算的時間來遮蔽（mask）系統於資料載入時
所耗費的時間。至於本計劃的著眼點則是更進一步發展出一種「考量快取記憶體的立體資
料呈像技術」（Cache-Conscious Volume Rendering），所考慮的對象也從硬碟與記憶體間的
關係變更為記憶體與快取記憶體間的關係。儘管所涉及的基本觀念類似，但可預期的是至
少會面臨以下兩個新問題。其一，由於快取記憶體的大小十分有限，所以更為精準的資料
預取，以及資料在記憶體及快取記憶體之間的安排將變得更為重要，以避免資料在快取記
憶體中產生不必要的進出，導致效能的損失。其二，在快取記憶體中進行資料的預取有一
最大的困難性：我們無法知曉資料究竟於何時已預取完畢。這也使得整個系統的設計，尤
其是處理第一個問題時更顯棘手。此項計劃中，我們所針對的立體資料為「規則立體資料」
（Regular Volume Data），而且如前所述，資料必須先進行分割。為使於分割資料上產生之
呈像結果與原本資料相同，各區塊的載入順序必須進行一番考量。經過仔細的考量我們發
現僅需考量八種可能的順序即可應付在各方向上的呈像需求，而此對於解決前述第一個問
題大有助益。至於第二個問題，我們目前將訴諸一個較保守的做法，就是先測量「快取記
憶體失誤處理時間」（Cache Miss Service Time），並以此作為判斷資料預取至快取記憶體的
動作是否已完成的一個保守估計。最後透過仔細安排系統於計算動作及資料預取至快取記
憶體動作的比例，使得兩者皆不處於閒置的狀態，進而提昇系統的總效能。
三、前言
立體資料呈像（Volume Rendering）的動作是以電腦將給定的三維立體資料（Volume Data）
在螢幕上呈現出來。至於資料的來源有許多種，如電腦斷層掃描（Computer Tomography）、
核磁共振呈像（Magnetic Resonance Imaging）、超音波（Ultrasound），及有限元素方法（Finite
Element Method）等等。利用前三種方法所產生的資料通常為規則立體資料（Regular Volume
Data），而最後一種方法所產生的通常為不規則立體資料（Irregular Volume Data）。本計劃
的研究主要範疇為規則立體資料，而規則立體資料的組成單位：網格（Grid Cell）為一長
方體或立方體，圖一所示即為一實例。
圖一
與一般電腦圖學（Computer Graphics）所使用的表面模型（Surface Model）不同的是，
在資料呈像的過程中不僅止於資料的表面，事實上資料內部的組成及分布情形才是決定
呈像結果的主要因素，而這也導致了資料呈像一般面臨的兩大問題：1. 資料量的龐大以
及 2. 執行速度的緩慢。資料量的龐大造成將資料自硬碟載入至記憶體時所費的時間成為
不可忽略的因素。我們解決此問題的辦法是先將資料進行分割，而使得當硬碟預取
（Prefetching）下一分割區域時，中央處理器可同時處理之前所載入之區域，以達到利
用中央處理器的計算時間來有效地「遮蔽」（Mask）系統耗費在資料輸入的時間。此項
方法我們稱為「考量輸出入系統的立體資料呈像技術」（I/O-Conscious Volume Rendering）
[1]。而在本計劃中，我們將所探討的問題更進一步延伸，希望發展出「考量快取記憶體
的立體資料呈像技術」，也就是當記憶體將下一資料區塊預取至快取記憶體時，中央處理
器可同時處理之前所載入的資料區塊。雖然這其中所涉及的技術與之前十分類似，但在
處理上卻會至少遭遇到以下兩項新問題。第一，由於快取記憶體的大小十分有限，因此
在資料預取時的拿捏必須更為精準，以免產生不必要的快取記憶體的內容更替，進而影
響系統效能。更具體的說，資料的預取不可過快，以免因有限的快取記憶體大小使得已
預取至快取記憶體的資料尚未被充分使用即遭下一批預取的資料替換出去；另一方面，
資料的預取也不可過慢，導致中央處理器常常處於等待資料的狀態。換句話說，資料預
取入快取記憶體的速度必須恰到好處，系統的效能才會有所增進，比較起來，前述「考
量輸出入系統的立體資料呈像技術」因系統的記憶體空間相對較大故所需的精確度亦較
低。第二，在快取記憶體的資料預取上，並不像預取資料至記憶體時有一個明顯的機制
來檢驗資料預取的動作是否已完成，這也使得前述所言第一項問題顯得更為棘手。此外，
將資料分割後，為確保正確的呈像結果，不論是將各分割區域預取至記憶體或是快取記
憶體，其順序皆必須做適當的安排。這主要因為資料呈像的過程中立體資料內部的順序
必須納入考量，而一般說來同一資料若離觀看位置較近，所產生的貢獻也較大。然而這
也並不意味著我們一定得將各區塊以其距離觀看位置的距離來排序，並將各分割區以此
順序載入才能產生正確的結果。事實上，只要沿著觀看的方向一旦有兩分割區重疊時其
載入順序為正確即可。由此我們發展了一套方法可以有效及正確地決定各分割區域應如
何預取以提昇系統的效能，而這方法僅需考慮八種可能的順序即能應付在任意方向上的
呈像需求。不僅如此，我們亦希望系統的流程能具有以下特色，亦即任一區塊皆在被充
分利用後方為後來預取的資料所取代，這樣就可解決第一個問題的絕大部分。至於在解
決第二個的問題上，主要的關鍵在得知某一區塊其預取至快取記憶體的動作是否已完
[2] T. Mitra, C. Yang and T. Chiueh, “Application-Specific File Prefetching for
Multimedia Programs”, IEEE Multimedia 2000, pp. 459-462, July 2000.
[3] C. Yang, T. Mitra and T. Chiueh, “A Decoupled Architecture for Application-Specific
File -Prefetching”, Usenix Annual Conference, FREENIX track 2002, pp. 157-170, June
2002.
[4] T. Chiueh, C. Yang, T. He, H. Pfister and A. Kaufman, “Integrated Volume 
Compressionand Visualization”, IEEE Visualization ’97, pp. 329-336, October 1997.
[5] C. Yang, T. Mitra and T. Chiueh, “On-the-Fly Rendering Of Losslessly Compressed
Irregular Volume Data”, IEEE Visualization ’2000, pp. 101-108, October 2000.
[6] T. Chiueh, T. Mitra, A. Neogi and C. Yang, “Zodiac: A History-Based Interactive
Video Authoring System”, ACM Multimedia 1998, pp. 435-444, September 1998.
[7]T. Chiueh, T. Mitra, A. Neogi and C. Yang, “Zodiac: A history-based interactive video
authoring system”, Multimedia Systems, vol. 8, no. 3, pp. 201-211, 2000.
[8] W. Lorensen and H. Cline, “Marching Cube: A High Resolution 3D Surface
Construction Algorithm”, Computer Graphics, vol. 21, no. 4, pp. 163-169, July 1987.
[9] M. Levoy, “Display of Surfaces from Volume Data”, IEEE Computer Graphics and
Applications, vol. 8, no. 3, pp. 29-37, March 1988.
[10] M. Levoy,“Efficient Ray Tracing of Volume Data”, ACM Transactions on Graphics,
vol. 9, no. 3, pp. 245-261, 1990.
[11] L. Westover, “Interactive Volume Rendering”, Volume Visualization Workshop, pp.
9-16, May 1989.
[12] L. Westover,“Footprint Evaluation for Volume Rendering”, Computer Graphics, vol.
24, no. 4, pp. 367-376, 1990.
[13] P. Lacroute and M. Levoy, “Fast Volume Rendering Using a Shear-Warp
Factorization of the Viewing Transformation”, Computer Graphics, pp. 451-458, July
1994.
[14] M. Doggett and M. Meiner, “A Memory Addressing and Access Design for Real
Time Volume Rendering”, Proceedings of IEEE Circuits and Systems, 1999.
[15] C. Sears, “The Elements of Cache Programming Style”, 4th Annual Linux Showcase
& Conference, 2000.
[16] G. Knittel, “The UltraVis System”, Proceedings of the 2000 IEEE Symposium on
Volume Visualization, pp. 71-79, October 2000.
[17] D. Kotz and C. S. Ellis, Practical Prefetching Techniques for Parallel File Systems”,
First International Conference on Parallel and Distributed Information Systems,
December 1991.
[18] T. C. Mowry, M. S. Lam and A. Gupta, “Design and Evaluation of a Compiler
Algorithm for Prefetching”, The Fifth International Conference on Architectural Support
for Programming Languages and Operating Systems, pp. 62-73, October 1992.
[19] R. H. Patterson, G. Gibson, E. Ginting, D. Stodolsky and J. Zelenka, “Informed
Prefetching and Caching”, 15th ACM Symposium on Operating System Principle,
December 1995.
[20] P. Cao, E. W. Felten, A. Karlin and K. Li, “A Study of Integrated Prefetching and
Caching Strategies”, ACM SIGMETRICS Conference on Measurement and Modeling of
Computer Systems, May 1995.
[21] M. Cox and D. Ellsworth, “Application-Controlled Demand Paging for Out-of-Core
Visualization”, IEEE Visualization’97, October 1997.
[22] M. Cox, “Managing Big Data for Scientific Visualization”, ACM SIGGRAPH ’98
Course, August 1997.
