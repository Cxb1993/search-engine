1. 中文摘要 
本計劃的主要目的是發展一個以 FPGA 為主的特徵比對處理器，並將該處理器作為硬體
網路入侵偵測系統(Network Intrusion Detection System; NIDS)的核心。該特徵比對處理器使用
Shift-OR 法則來執行特徵比對，本計劃首先提出的硬體 Shift-OR 法則實現方式僅需位移暫存
器、OR 邏輯閘以及 ROM，其中使用 ROM 的主要目的是儲存擬比對的特徵。雖然此硬體架構
很簡單，但與一般的邏輯元件(Logic Element; LE)比較之，在 FPGA 中 ROM 的操作頻率較低，
因此使用 ROM 可能會限制了此硬體 Shift-OR 電路的速度。 
本計劃另一發展的特徵比對處理器將使用 Symbol Encoder 來取代 ROM，由於 Symbol 
Encoder 之實現並不需要消耗 FPGA 內部的任何記憶元件，因此可在較高的操作頻率下工作，
進而提升處理器的速度。為了進一步增加電路執行特徵比對的效能，我們也延伸 Symbol 
Encoder 來讓系統能一次處理多個字元。 
本計劃擬發展的特徵比對處理器已在 Altera Stratix 以及 Xilinx Virtex 的 FPGA 晶片中實
現，並與 Xilinx Microblaze Softcore CPU 整合而形成一個完整的硬體網路入侵偵測系統。不僅
如此，該系統的效能已在實際的網路上測試之，並與以軟體為主的網路入侵偵測系統做比較。
由於以硬體為主的網路入侵偵測具有較快的速度執行特徵比對，因此我們的硬體網路入侵偵測
系統即使在高頻寬網路環境中，仍可有效的檢測封包維護系統安全。 
 
2. ABSTRACT 
The objective of this project is to develop a novel FPGA-based signature match co-processor 
that can serve as the core of a hardware-based network intrusion detection system (NIDS). The key 
feature of the signature match co-processor is an architecture based on the shift-or algorithm. Our 
first implementation of the architecture contains only shift registers, or-gates and ROMs where 
patterns are stored. Although the architecture is simple, the ROM may operate at slower clock rate as 
compared with the logic elements (LEs) in the FPGAs. Therefore, the throughput of the circuit may 
be limited by the speed of the embedded memory bits.  
The second architecture proposed in this project replaces the ROMs with a bitmap encoder for 
the shift-or operations. The symbol encoder does not consume embedded memory bits. The proposed 
system therefore may have higher throughput as compared with the ROM-based architectures. To 
further improve the throughput of the proposed circuit, we also extend the symbol encoder so that it 
can process multiple characters at a time.  
The proposed architectures will be prototyped, simulated and synthesized by the Altera Stratix 
and Xilinx Virtex FPGA. In addition, an embedded system integrating the proposed architectures 
with the Xilinx softcore Microblaze CPU has been implemented. The resulting system will be used 
as a hardware-based NIDS for the physical performance measurement of our proposed architectures. 
Because of its high throughput for signature matching operations, the hardware-based NIDS 
significantly outperforms the software-based NIDS for high bandwidth networks. 
 
4. 方法 
本計畫主要採用Shift-OR Algorithm [2]作為字串比對硬體電路之基礎，因此在討論電路
前，我們先簡述Shift-OR Algorithm。假設P為特徵字串，而T為輸入的文字。讓P= p1,…,pm且
T=t1,…tn且m<n。值得注意的是特徵字串P與輸入文字T都有相同的Alphabet Σ={ s1,…,s|Σ|}。 
定義函式Rj[i]為 
⎩⎨
⎧ == +−+−
                         Otherwise. ,1
...... if ,0
][ 2121 jijijij
tttppp
iR         (1) 
因此Rj[i]=0 代表輸入的文字T從第j-i+1 位置起至第j位置之字元與特徵字串P之前i個字元
完全符合，若Rj[m]=0 則代表我們可以在文字T中精確的比對出P。事實上Rj+1可由Rj獲得之，如
公式(2)所示 
     1
1
 0, [ 1] 0 and ,
[ ]
1, otherwise ,
j j
j
if R i p t
R i i ++
⎧⎪⎨⎪⎩
− = ==                  (2) 
 由公式(2)得知若使用硬體我們只需要簡單的位移暫存器(shift register)與或閘(OR gate)即
可實現字串比對。為了進一步說明此點，首先我們對於每一個符號 皆給予一個位元向量
，其包含了 m 個元素，公式(3)表示 ,i=1,…,m,的定義。 
Σs ∈
S [ ]S i
k
k k
0 i f    
[ ]
1 o th e r w is e
k i
k
s p
S i
, =⎧= ⎨ ,⎩
,
.          (3) 
假設 1j ct + = s 。把公式(2)與公式(3)合併，則公式(2)可以改寫成公式(4)。 
1[ ] [ 1] [ ] 1j j cR i R i OR S i i m+ = − , = ,..., .         (4) 
在公式(4)中可以發現Rj到Rj+1的變化只需要位移Rj並且和Sc做一個OR的動作。圖 2 表示利
用shift-or algorithm完成比對的範例，其中 P aab= 而 Σ {a b c}= , , 。對於特徵字串P=aab而
言，每一個sk∈Σ = {a, b, c}之位元向量 之值可用數學公式(3)獲得，其結果顯示在圖 2.(a)中。
在範例裡T=acaab，因此j=1,2,3,4,5 時則s
kS
c=a, c ,a, a和 。由數學公式(4)得知給予Sb c和Rj即可算
出Rj+1的結果，如圖 2.(b)所示。最後在圖 2.(b)裡可以發現，當j=5 的時候Rj [3]=0，這表示我們
可以在j=5 時發現到 的存在。 P
從此例中可以了解，Shift-OR Algorithm在執行比對時必須先有一張表格來儲存位元向量
Sk，而ROM則是最簡單的方式來實現此表格，因此ROM-based Architecture為Shift-OR Algorithm
最直接的硬體架構，如圖 3.(a)所示。 
在此設計下每一個單位時間只能輸入一個字元進入電路。因此，當經過了j+1 個時間週期
後，電路只能完成tj+1個字元比對。假設tj+1= 時，當tcs j+1字元傳遞進入到ROM的電路中就會
馬上找尋出相對應的位元向量 直接傳入給Shift Register中的OR gate，如圖 3.(b)所示。 cS
  
圖 4  以 Symbol Encoder 為基礎所設計的 Shift-OR 電路 
 
表 1  AlphabetΣ={ a, b, c, d}的 Symbol Encoder 
 
圖 4 所電路中包括一個Symbol Encoder與一個Shift Register。在Symbol Encoder的電路裡總
共有|Σ|條的輸出線路。當符號sk被設定做為Symbol Encoder的輸入值時，則Symbol Encoder的
輸出一定只有在第k條線路會被輸出為 0，而其他的輸出線路將會被設定輸出為 1。表 1 為一個
Symbol Encoder的簡單例子，其中AlphabetΣ={ a, b, c, d}，且s1=a, s2= b, s3= c, s4= d。 
在Shift Register的電路裡則分別由m-1 個flip-flops(FFs)與m個OR gate所建構。在Shift 
Register中的每一個OR gate i也都有兩個輸入，第一個是由FF(i-1)的輸出線路所提供。然而第
二個輸入則由Symbol Encoder的輸出線路所提供，而且此輸入與 有關， 是特徵字串P的第i
個字元。當 = 時，只需要將第 個OR gate的第二條輸入線路與Symbol Encoder所輸出的
第 k 條線路連接即可。因此我們可以使用函式f: Σ Æ {1,..,|Σ|}來表示，在此
ip ip
ip s i
( )
k
if p k= 即表示
。如圖 4.(b)所示，因此第 個OR gate的第二個輸入是從Symbol Encoder所輸出的第i ksp = i
( )if p 條輸出所提供，我們可以證明使用此方式的連接方法可以從Symbol Encoder中獲得Sc[i] 。 
此種電路的最大優點是不同的特徵規則若有相同的Alphabet則可共享相同的Symbol 
Encoder，但這些特徵規則可依據其pi, i=1,…,m,值而與Symbol Encoder有不同的連線方式。在
圖 5 中所呈現的是三個不同的特徵字串共用Symbol Encoder的範例，此三個不同的特徵字串分
別為 、 和 。 a a d c b d d d d a c
的硬體資源僅會隨q增加而線性增加。 
在本計畫中，上述的硬體比對電路將作為以 Xilinx Microblaze Softcore CPU 為基礎之
SOPC 系統專門處理特徵比對的 Co-processor，如圖 7 所示。該 Co-processor 可分為 SNORT 檔
頭分類以及 SNORT 特徵比對兩大部份，而每部份皆以圖 6 所示之電路實現之。  
 
圖 6  以 Modified Symbol Encoder 為基礎之高效能模組電路( 2q = )架構:(a) Modified Symbol Encoder (b) 
Modified Symbol Encoder 與 Shift Register 之連接 (c) 整體架構 
 
圖 7 完整的 NIDS 系統 
表 1 Modified symbol encoder architecture 與 Rom-based architecture 效能的比較。 
Design Chars
LEs / 
Char 
Memory
bits 
Operating 
Frequency 
(MHz) 
Throughput
(Gb/s) 
Our arch. With modified 
Symbol encoder (q=2) 1568 0.96 0 422.12 MHz 6.75 Gb/s
ROM-based shift-OR 
architecture (q=2)  1568 1.09 40768 321.03 MHz 5.14 Gb/s
4q 4q= )與 symbol encoder ( = ) 的效能比較。 表 2 Modified symbol encoder (
Design Chars
LEs/ 
Char 
Operating 
Frequency (MHz) 
Throughput
(Gb/s) 
Our arch. with modified 
symbol encoder (q=4) 508 2.06 422.12 MHz 13.51 Gb/s
Our arch. with basic 
symbol encoder (q=4) 508 8.63 135.24 MHz 4.33 Gb/s 
表格 2 比較 Basic Symbol Encoder 與 Modified Symbol Encoder 的效能，這兩個架構都同樣
是在一個單位時間內，一次只處理四個單位字元。從表格 2 可以知道在 Basic Symbol Encoder
的電路設計下，每一秒所能處理的最大速度只能達到 4.33 Gbps，而 Modified Symbol Encoder
每一秒所能處理的最大位元數提升至 13.51 Gbps。不僅如此，原本 Basic Symbol Encoder 的電
路需要 8.63 LE per Character，可是 Modified Symbol Encoder 的 LE per character 數值卻只有
2.06。所以藉由這份實驗數據我們可以驗證，由本論文所提出的 Modified Symbol Encoder 電路
設計，可以有效提升電路效能。 
表格 3 顯示同樣在 Modified Symbol Encoder 的架構下，對於不同的 q=1,2,3,4 及 8，在同
樣處理 1500 個單位字元時，本計畫所發展之電路在速度以及硬體資源消耗方面之效能。首先
針對硬體資源消耗方面之效能來做個分析討論，從 1q 4q= 到 = 的 LEs per Character 其實都
維持在 1.78 以下甚至更低，可是在 8q = 的設計上，LE per Character 卻攀升到了 3.78 的數值。
其實這也就表示隨著 愈大，系統的設計上相對的也就更複雜，可是反過來去觀察 Operating 
Frequency 的數值，四個互相比較的系統都是維持在開發板所能提供的最高時脈，也就是 500.00 
MHz。經過換算之後可以從 到
q
1q = 8q = 的設計當中，分別得到 4 Gbps、 8 Gbps、16 Gbps
和 32 Gbps 的 throughput。綜合上述的數據上看起來，雖然隨著 愈大而系統的設計越複雜，
但是相對的，對於系統中每一秒所能處理的最大位元數卻是大大的提升。 
q
 
 
接下來在表格 4 當中我們比較 Modified Symbol Encoder 電路與其他現有電路之效能。由
此表我們可發現當 q=1 時，我們的電路擁有最低之 LE/char。當 q=8 時我們的電路可達到最高
的 Throughput。 
上面僅對於電路的效能進行分析，接下來我們量測整體 NIDS 系統之效能。我們將本計畫提出
的 NIDS 系統實際利用 Hub，將 Attacker 與 User 三者並接在同一個 LAN 底下，利用 Attacker
實際對 User 發送攻擊封包，以驗證系統比對的正確性，以及系統實際處理封包的效能，如圖
9 所示。在本實驗中 Attacker（UDP Flooder 2.00 攻擊軟體）對 User 發送 UDP Protocol 的攻擊
封包，此時 User 會對來源端的電腦回傳一個 ICMP Protocol 的封包，當 Attacker 傳送越多的
UDP Protocol 的攻擊封包，相對的 User 也會對來源端的電腦回傳更多 ICMP Protocol 的封包，
藉此達到網路阻塞的效果，導致網路系統的不正常運作。 
 
 
 
圖 9 整體 NIDS 系統之測試環境 
 
 
 
System Throughput
2 9 .592 9 .63
2 5 .37
2 0 .38
15 .3 8
10 .38
5 .3 8
2 5 .3 8
30 .37
3 4 .4 6
20 .38
1 5 .38
1 0 .3 8
5 .38
0
10
20
30
40
5 10 15 20 25 30 35
Speed of background traffic (Mbps)
Th
ro
ug
hp
ut
 (M
bp
s)
DDRRAM-Base架 構
 BRAM-Base架 構
 
 
 
 
 
 
 
 
 
 
 
 
圖 10 BRAM-Based 以及 DDR SDRAM-Based 的 System Throughput 
[5]  M. Gokhale, D. Dubois, A. Dubois, M. Boorman, S. Poole and V. Hogsett, “Granidt: towards 
gigabit rate network intrusion detection technology,” Proceedings of the International 
Conference on Field Programmable Logic and Application, pp. 404-413, 2002. 
[6]  B. L. Hutchings, R. Franklin, and D. Carver, “Assisting network intrusion detection with 
reconfigurable hardware,” Proceedings of the IEEE Symposium on Field-Programmable 
Custom Computing Machines, pp.111-120, 2002. 
[7]  J. Moscola, J. W. Lockwood, R. P. Loui and M. Pachos, “Implementation of a 
Content-Scanning Module for an Internet Firewall,” Proceedings of the IEEE Symposium on 
Field-Programmable Custom Computing Machines, pp.31-38, 2003. 
[8]  J. Singaraju, L. Bu and J. A. Chandy, “A signature match processor architecture for network 
intrusion detection,” Proceedings of the IEEE Symposium on Field-Programmable Custom 
Computing Machines, pp.235-242, 2005. 
[9]  I. Sourdis and D. N. Pnevmatikatos, “Pre-decoded CAMs for efficient and high-speed NIDS 
pattern matching,” Proceedings of the IEEE Symposium on Field-Programmable Custom 
Computing Machines, pp. 258-267, 2004. 
[10]  SNORT official web site. http://www.snort.org 
 
 
 
6. 計畫成果自評 
本計畫研究內容與原計畫書相符合，達成預期所設定的發展高速特徵碼比對系統之目標。本計
畫之成果不僅包含電路設計與模擬，也包含整體 NIDS 系統的發展與測試，成果豐富，已有 1
篇期刊以及 2 篇國際會議論文發表，其中特徵比對電路相關技術也已在申請專利中。隨著具有
高速度且低成本特性的 NIDS 系統需求的增加，本計畫的研究成果由於可有效提升 NIDS 系統
比對速度，同時節省硬體資源的消耗，因此在網路安全相關領域具有很高的應用價值。 
 
Service Discovery of IP Cameras Using SIP and
Zeroconf Protocols
Yi-Chih Tung1, Chien-Min Ou2, Wen-Jyi Hwang1,, and Wei-De Wu1
1 Department of Computer Science and Information Engineering,
National Taiwan Normal University, Taipei, 117, Taiwan
{g94470041,whwang,g95470103}@csie.ntnu.edu.tw
2 Department of Electronics Engineering, Ching-Yun University,
Chungli, 320, Taiwan
cmou@cyu.edu.tw
Abstract. This paper presents a novel framework for remote access of
IP cameras with minimum pr-conﬁguration cost. Although the usual ser-
vice discovery protocols such as Zeroconf can be adopted for simplifying
the pre-conﬁguration procedures, the protocols are limited only for local
services. The proposed protocol, termed STDP (Service Trader Discovery
Protocol), is able to provide remote IP camera services while requiring
minimum conﬁguration complexity. The STDP is a hybrid combination
of Zeroconf and SIP (session initial protocol). The Zeroconf is adopted
for the discovery and/or publication of local services; whereas, the SIP
is used for the delivery of local services to the remote nodes. With sim-
ple plug-and-play pre-conﬁguration, services provided by IP cameras are
then remotely available. This protocol is well-suited for high mobility
applications where the fast deployment and low administration eﬀorts of
IP cameras are desired.
1 Introduction
An IP camera (IP CAM) is a video camera that contains a hardware video en-
coder and an embedded processor with a TCP/IP interface. It is a stand alone
unit that can be directly connected to the internet without the need for a sep-
arate computer. It also has a built-in web server, which provides the ability
for accessing digital images and conﬁguring the camera. Its digital output al-
lows the camera easily integrated with a wide range of applications, including
e-surveillance, web attractions and remote monitoring. In these applications, IP
CAMs are usually deployed in the environments with dynamic locations. With-
out a static IP address information, accessing the web server associated with the
IP CAMs is diﬃcult. In addition, for a service consumer, it is not possible to
always have a complete overview over these applications and their availability.
The dynamics of recent networks make this process even more complex.
One way to solve the problem is by the employment of service discovery pro-
tocols, such as SLP (Service Location Protocol) [3], Jini [10], UPnP (Universal
 To whom all correspondence should be sent.
C. Rong et al. (Eds.): ATC 2008, LNCS 5060, pp. 388–402, 2008.
c© Springer-Verlag Berlin Heidelberg 2008
390 Y.-C. Tung et al.
2 Preliminaries
The proposed STDP is a hybrid combination of SIP and Zeroconf. Therefore, in
this section, we give a brief description of these two protocols. The independent
applications of these two protocols for accessing IP CAMs are also discussed.
2.1 SIP
SIP is a signaling protocol used for establishing sessions in an IP network. The
user agents and servers are the major components of the protocol. A user agent
is a end-user device. A user agent client (UAC) issues a request and a user agent
server (UAS) responds to the request. When the SIP is applied for the remote
access of a IPCAM, in the simplest form the UAC is a viewer and the UAS is
the IP-CAM, as shown in Figure 1. In this case, the location of the IP-CAM
should be ﬁxed, and should be known to the viewer.
Fig. 1. Basic application of SIP for IP CAM
To support the mobility for the IP CAM, the employment of SIP servers are
necessary. Commonly used SIP servers include the registrar and proxy server.
A SIP registrar handles registration messages. It is associated with a databases
(termed location server) containing user agent locations. A SIP proxy server can
be viewed as the router in the SIP level that forward SIP requests and responses.
In addition, it provides functions for authentication and authorization.
Figure 2 shows a simple example, which uses proxy, registrar and location
servers with the INVITE message for session establishment. As shown in the
ﬁgure, an IP CAM ﬁrst registers its location in the location server. A SIP proxy
server then accepts an INVITE request made by a UAC and queries location
server to ﬁnd UAS location. Based on the address received from the server, the
proxy server forwards the INVITE message to the UAS. The session will then
be established after the acknowledgements from UAS are received. It can be
observed from the example that the viewer does not have to know the IP CAM
location prior to a connection establishment. In addition, the UAS is allowed to
change its location without informing the UAC. Only a registration request to
the registrar server for location updating is required.
In addition to supporting the user mobility, the SIP oﬀers the event notiﬁca-
tion framework [7], [8], which uses SUBSCRIBE/NOTIFY messages for subscrib-
ing to, and receiving notiﬁcations of, SIP-related events within SIP networks.
392 Y.-C. Tung et al.
Fig. 3. Publication operations of Zeroconf
fully qualiﬁed domain name (FQDN), a node name in the .local name space is
used for mDNS.
Another standard, termed DNS Service Discovery (DNS-SD) can be used for
the service discovery in Zeroconf. DNS-SD works particularly well with mDNS,
since it also uses DNS records. Three basic operations are included in the DNS-
SD: publication, discovery and resolution. The goal of publication is to advertise
a service. The discovery operation is used to browse for available service. Based
on the results of discovery operation, the resolution operation is adopted for
translating service names to addresses and port numbers.
Figures 3, 4 and 5 show a simple example of these DNS-SD operations for a
local network consisting of an IP CAM. The publication operations of Zeroconf
are shown in Figure 3, which consists of address selection (Figure 3.(a)), name
selection (Figure 3.(b)), service start up (Figure 3.(c)) and service broadcast
(Figure 3.(d)). In Figure 3.(a), the IP CAM randomly selects the IP address
169.254.0.1, and announces it to the network. Because no devices respond to
the announcement, the IP CAM takes the address as its own. In Figure 3.(b), it
starts up its own multicast DNS responder, requests the host name ipcam.local.,
veriﬁes its availability, and takes the name as its own. In Figure 3.(c), the IP
CAM starts up a video service on TCP port 80. Finally, in Figure 3.(d), it
publishes the service instance, of type http. tcp, under the name ipcam, in the
.local domain. It should be noted that the service type (i.e., http. tcp) contains
two ﬁelds: the ﬁrst ﬁeld (i.e., http) is service dependent, and the second ﬁeld
(i.e., tcp) indicates the transportation protocol used by the service. The service
type will be used for service browsing and discovery. The instance name (i.e.,
ipcam) is device dependent. That is, devices sharing the same service type will
have diﬀerent instance names. The service instance therefore can be used for the
query of port and IP address of a device.
Figure 4 depicts the service query and discovery in the Zeroconf network.
In this example, the service type queried by the viewer shown in Figure 4.(a)
394 Y.-C. Tung et al.
Fig. 6. The protocol stack of STDP-based networks
The service traders are the nodes used for the delivery of service information
over WAN. A service trader provides two functions. It can be adopted to col-
lect/discover service information from service providers in a local network, and
deliver the information to a remote node (which is also a trader) upon requests.
Alternatively, it can also be used to subscribe and receive the service information
from other traders in remote sites, and publish the service information to the
service requesters within its local domain. A trader can be implemented in an
independent device such as a computer. It can also be implemented in an IP
CAM (or a viewer). In these cases, the device supports multiple roles as a trader
and a service provider (or a requester).
The communications between two service traders are based on SIP protocol,
as shown in Figure 7. Each trader can be an UAC and/or an UAS. Each local net-
work needs only one service trader. Each of the service providers and requesters
talk to its trader in the same LAN for the delivery of local service information.
From Figure 7, we observe that the Zeroconf is adopted for the communication
between a trader and a service requester (or a provider). Therefore, in our design,
the service provider and requester need to support Zeroconf protocol.
To obtain information from a service provider to a service requester, both
the SIP and Zeroconf protocols are used. The STDP provides a mechanism for
the service information exchange between the SIP and Zeroconf. Based on the
acquired service information, the viewer then can access the IP CAM using the
HTTP protocol.
To discuss the STDP protocol in more detail, we divide the protocol into three
parts, as depicted in Figure 8. The ﬁrst part concerns with the communication
between a trader and a service provider. It can be observed from Figure 8.(a) that
the trader will receive service information published by an IP CAM. The trader
can also actively discover the service provided by an IP CAM. All the publish
and discovery operations are based on Zeroconf protocol, which are illustrated
in Figures 3-5.
However, it should be noted that the address assignment scheme shown in
Figure 3.(a) is not adopted in our design. This is because the address selected by
Zeroconf is valid only for local access. Our design allows any address assignment
scheme for acquiring an IP address for global access, including the dynamic
address assignment using the DHCP.
396 Y.-C. Tung et al.
In the STDP, the SIP SUBSCRIBE/NOTIFY messages are used for the ser-
vice information delivery between an UAC and an UAS, as shown in Figure 8.(b).
In the SIP, the original goal of SUBSCRIBE/NOTIFY messages is to provide
the SIP related events subscriptions and notiﬁcations. The STDP extends the
usage of SUBSCRIBE/NOTIFY for the service subscription and notiﬁcation.
To use the SUBSCRIBE message for service subscription, the type of ser-
vices desired should be speciﬁed in the message header. Here we augment a ﬁeld
(termed Zeroconf) in the header of SUBSCRIBE message for specifying the ser-
vice type. The format of service type follows the DNS-SD format as http. tcp,
as depicted in Figure 9.(a).
NOTIFY messages are sent to inform traders of the service available for which
the traders have a subscription. Subscriptions are established using the SUB-
SCRIBE method described above. Sending a NOTIFY message does not termi-
nate the corresponding subscription. A single SUBSCRIBE request may trigger
several NOTIFY messages. In each NOTIFY message, the list of services and the
IP address of the corresponding service providers are carried. We also augment
two ﬁelds (termed Zeroconf and eX-Contact) in the header of NOTIFY message
to achieve this objective. It can be observed form Figure 9.(b) that the Zero-
conf ﬁeld indicates the service type this message response to. The eX-Contact
ﬁeld contains 5 items: action, service instance, host name, port number and IP
address.
The action item instructs how the service instance included in ﬁeld should be
handled. There are three actions: addition (denoted by Add), deletion (denoted
by Del), and updating (denoted by Upd). The addition action instructs the target
service trader to add the service instance to the service list. The deletion action
informs the target service trader to remove the service instance. The update
action directs the target trader to update the attributes of the service instance.
The attributes considered here include the video coding standard adopted by
the IP CAM, frame size and frame rate.
Use Figure 9.(b) as an example, the NOTIFY message instructs the target
trader to add the service instance ipcam. http. tcp.local, with host name ip-
cam.local, port number 80, and IP address 140.122.184.235, to its service list. It
should be noted that the service instance and domain name should also follows
the DNS-DS format in the STDP.
The ﬁnal part of STDP describes the communications between a trader and
a service requester, which is also based on Zeroconf. It can be observed from
Figure 8.(c) that the trader will then publish the service information collected
from other traders to the service requester. The service requester may also ac-
tively discover the service information from the trader.
Three parts of the STDP protocol depicted in Fig.8 may operate indepen-
dently. That is, the SIP and Zeroconf protocols are not required to operate at a
pre-speciﬁed order in the STDP. Figure 10 shows two examples of STDP message
ﬂows. For the sake of brevity, only two LANs are considered in each example.
Nevertheless, the message ﬂows can easily be extended to the scenarios contain-
ing large number of LANs. As shown in Figure 10, LAN A in each example
398 Y.-C. Tung et al.
Fig. 10. Two examples of STDP message ﬂow: (a) Trader 1 and Trader 2 ﬁrst ﬁnd their
own service requester and service providers via PUBLISH/DISCOVERY messages.
(b) Trader 1 and Trader 2 ﬁrst establish their connection via SUBSCRIBE/NOTIFY
messages.
series of service information updating/notiﬁcation when service providers and
service requester become available. Similar to the case shown in Figure 10.(a),
the Service Requester ﬁnally selects the Service Provider 2 as its target device
for the IP CAM service.
As shown in Figure 7, the service trader plays a major role in STDP. It
connects diﬀerent local networks, and operates in back-to-back mode. It acts
as a SIP user agent on one side, and as a Zeroconf end device on the other
side. A trader has 4 operations. To further elaborate these operations, Figure 11
depicts their ﬂowchart in detail. The ﬁrst operation is to send Discovery or
Publish messages. In this operation, the trader acts as a Zeroconf end device
searching or publishing the services available. In the second operation, the trader
acts as a SIP UAC, and send SUBSCRIBE message for triggering the SIP event
notiﬁcation mechanism. After sending the SUBSCRIBE message, the trader will
then waits and receives one or more NOTIFY messages for updating the service
list. The trader behaves as a SIP UAS in the third operation, which receives
the SIP SUBSCRIBE message. The trader will then send one or more NOTIFY
messages to the subscribing node. The fourth operation receives the Discovery
or Publish messages, where the trader functions again as a Zeroconf end device.
This operation and the ﬁrst operation are essential for a trader to acquire the
service available from the service provider, or deliver the service to the service
requester.
Note that the SIP is required to be installed in the service traders because of
the operations of SUBSCRIBE/NOTIFY. Only one node in a local network needs
400 Y.-C. Tung et al.
Fig. 12. The scenario for our experiment
Fig. 13. All the services of type http. tcp discovered in LAN B without the employ-
ment of STDP
Note that, in addition to the IP CAMs, the laser printers are included in this
scenario. Since the laser printers supports Zeroconf, detecting the service pro-
vided by the laser printers in diﬀerent local networks demonstrates the fact that
the proposed protocol can be adopted for the discovery of services provided by
various Zeroconf-based devices.
In our experiment, a reference design kit (RDK) based on a 200-MHz ARM
920 CPU and an MPEG4 encoder ASIC is used for the IP CAM design. The
employment of MPEG4 ASIC allows the source video sequence to be encoded in
real-time. Both the wired and wireless LAN interfaces (i.e., 802.3 and 802.11) are
also available in the IP CAMs. The operating system of the IP CAMs is Linux.
The Bonjour software development kit (SDK) [1] is adopted for the Zeroconf
implementation in the IP CAM. In addition, the PJSIP library [6] is used for
the SIP UAC and UAS implementations of the IP CAM functioning as a trader
(i.e., the IP CAM with host name ipcam in Figure 12).
