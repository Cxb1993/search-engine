I 
??????? 
???? 
????????????????????????????????
??????? G??????? T?G???? T????????????
????????? PC???? T???????? PC??????????
???????? G ???? T ????????????????????
? T??????????????????????????????????
??????????????????????????????????
???????????????????????????????????
??????????????????????????? O(n9)????
???????????????????????????????????
O(n2)????????????? 
???? ?????????????????????????????? 
 
 
III 
?  ? 
??????? ............................................................................................................I 
?????? ............................................................................................................... 1 
??????............................................................................................................ 1 
?????????????................................................................................ 2 
????????.................................................................................................... 3 
?????????.............................................................................................. 14 
?????? ............................................................................................................. 15 
???????? ..................................................................................................... 17 
 
 
 
 
 
 
 
 
? 2 ? 
path cover problem for general graphs is 
NP-complete since finding a path cover, 
consisting of a single path, corresponds 
directly to the Hamiltonian path problem. 
The path cover problem has many 
practical applications including VLSI 
designing, code optimization [5], 
mapping parallel programs to parallel 
architectures [24], arranging a group of 
persons to dinner [6], and program 
testing [22]. 
In this project, we study a variant 
of the path cover problem, namely, the 
terminal path cover problem, which 
generalizes the path cover problem. Let 
G be a graph and let T  be a subset of 
vertices of G. A terminal path cover of 
G w.r.t. T  is a path cover of G such that 
the vertices of T  are all end vertices of 
the paths in the path cover. A minimum 
terminal path cover of G w.r.t. T  is a 
terminal path cover of G of minimum 
cardinality. The terminal path cover 
problem is to find a minimum terminal 
path cover of a graph G. We denote the 
cardinality of a minimum terminal path 
cover of G w.r.t. T  by π(G, T ), called 
the terminal path cover number. We call 
T  the terminal set of G, the vertices in T  
the terminals, and the other vertices free 
vertices. In this project, we study the 
complexity of the terminal path cover 
problem for some special graph classes; 
specially, for Ptolemaic graphs. 
????????????? 
Consider an application of the path 
cover problem that mapping a parallel 
program into a parallel architecture. The 
parallel program is divided into some 
units. The relations among program 
units can be represented as a graph, 
where program units are represented as 
vertices, and two vertices are adjacent if 
their represented units are relevant. Then, 
the program units are mapped into the 
processors of the parallel architecture. 
The capabilities of the parallel 
architecture can be increased by adding 
some auxiliary links among the 
processors. The minimum set of edges 
needed to augment the parallel 
architecture so that it can accommodate 
the parallel program is determined by a 
minimum path cover of the graph 
representing the parallel program. 
However, some program units of the 
parallel program may run first. Hence, 
some program units must be the 
endpoints of paths in a path cover. 
Motivated by the above issue we 
introduce a variant of the path cover 
problem, namely, the terminal path 
cover problem, which generalizes the 
path cover problem and is defined in the 
previous section.  
The path cover problem is a special 
case of the terminal path cover problem 
with T = φ. The terminal path cover 
problem can be applied to the 
applications of the path cover problem 
when some vertices corresponding to the 
applications are restricted to be 
terminals. For example, the terminal 
path cover problem can be applied to 
find a VLSI layout with a set of node- 
? 4 ? 
hereditary graphs, chordal graphs, 
bipartite graphs, and many more are 
closed under the pendant-vertex 
operation. In the following subsection, 
we show that for all graph classes closed 
under the pendant-vertex operation, the 
computational complexity of the 
terminal path cover problem is the same 
as that of the path cover problem.  
3.1. Reducing the Terminal Path 
Cover Problem to the Path Cover 
Problem  
Let G = (V, E) be a graph with 
vertex set V end edge set E. A path P in 
G, denoted by v1→ v2 → ... →v|P|−1→ v|P|, 
is a sequence (v1, v2, ..., v|P|−1, v|P|) of 
vertices so that two vertices are adjacent 
if and only if they are consecutive in the 
sequence. For two vertex-disjoint paths 
P1 = u1→ u2→ ... → u|P1| and P2 = v1→ 
v2→ ... → v|P2| of G such that u|P1| and v1 
are adjacent, let P1 → P2 denote the path 
u1→ u2→ ... → u|P1| → v1→ v2→ ... → 
v|P2| that is said to be the concatenation 
of P1 and P2. 
Now, we introduce a reduction 
from the terminal path cover problem to 
the path cover problem. Let G = (V, E) 
be a graph and let T be a terminal set of 
G. A new graph PV(G, T ) from G can be 
easily obtained from G in O(|T |) time. 
Then we prove π(G, T ) = π(PV(G, T ), 
φ).  
First, we prove that π(G, T ) ≥ 
π(PV(G, T ), φ). Let PCT be a minimum 
terminal path cover of G w.r.t. T and let 
P be a path in PCT such that its end 
vertex is a terminal t. Let t' be a pendant 
vertex of PV(G, T ) such that t' is 
adjacent to t but is not in G. By 
extending P to visit t', i.e. P = P → t', it 
is still a path in PV(G, T ). Repeat the 
above process until every pendant vertex 
of PV(G, T ) not in G is covered by one 
path in PCT. Then, we obtain a path 
cover of PV(G, T ) of size |PCT |. Thus, 
π(G, T ) ≥ π(PV(G, T ), φ).  
Next, we prove π(G, T ) ≤ π(PV(G, 
T ), φ). Consider a minimum path cover 
PC of PV(G, T ). Let t be a terminal in G, 
t' be the pendant vertex in PV(G, T ) such 
that t' ∉ G and t' is adjacent to t in PV(G, 
T ), let P' be a path in PC covering t', and 
let P be a path in PC covering t. Note 
that if |P'| = 1, then P ≠ P'; otherwise, P = 
P'. We then do the following. If |P'| > 1, 
then we just remove t' from the path 
(since t' has degree 1, t' must be an end 
vertex of P'). If |P'| = 1 (i.e. P' visits t' 
only), then we remove P' from PC and 
split P into two pieces so that t is an end 
vertex of one of them. Note that if |P'| = 
1 and t is an end vertex of P, then PC − 
{P, P'} ∪ {P → P'} forms a path cover 
of PV(G, T ) of size less than |PC| and it 
contradicts that PC is a minimum path 
cover of PV(G, T ). Each of these above 
operations does not increase the number 
of paths in PC. Repeat the above process 
until all pendant vertices of PV(G, T ) 
not in G are removed. Then, we obtain a 
terminal path cover of G w.r.t. T of size 
at most |PC |. Thus, π(G, T ) ≤ π(PV(G, T ), 
φ).  
It follows from the above 
? 6 ? 
firstly introduced distance-hereditary 
graphs and proposed some 
characterizations of these graphs [15]. 
On the other hand, Bandelt and Mulder 
gave a constructive characterization of 
distance-hereditary graphs which is 
called one-vertex extensions [3]. 
Hammer and Maffray proposed a linear 
time recognition algorithm that 
constructs a sequence of one-vertex 
extensions for a distance-hereditary 
graph [13]. Damiand et al. pointed out 
that the recognition algorithm in [13] 
was slightly incorrect and gave a correct 
linear time recognition algorithm for 
distance-hereditary graphs [10]. We now 
review the sequence of one-vertex 
extensions of a distance-hereditary 
graph in the following. Let G = (V, E) be 
a graph and let v be a vertex of G. We 
denote the (open) neighborhood of v, 
consisting of all vertices adjacent to v in 
G, by NG(v), and denote the closed 
neighborhood of v, the set NG(v)∪{v}, 
by NG[v]. For a set S ⊆ V, we denote 
NG(S) = ∪v∈S NG(v) and NG[S] = NG(S) ∪ 
S. The operations of the one-vertex 
extensions are defined as follows: 
Definition 1: Let G = (V, E) be a graph, 
x ∈ V, and let ŷ be a new vertex not in V. 
A graph Ĝ can be constructed from G by 
adding vertex ŷ to G and making ŷ 
adjacent to either 
(1) x only (ŷ is added to G by means of 
a pendant-vertex operation), or 
(2) N(x) (ŷ is added to G by means of a 
false-twin operation), or 
(3) N[x] (ŷ is added to G by means of a 
true-twin operation). 
The above three operations are called 
one-vertex extensions. 
The following theorem was given 
in [3] by Bandelt et al. 
Theorem 3. [3] A graph G is distance- 
hereditary if and only if it can be 
generated from an isolated vertex by a 
sequence of one-vertex extensions 
consisting of pendant-vertex, false-twin, 
and true-twin operations. 
Note that every Ptolemaic graph is 
a distance-hereditary graph and hence 
(a) (b)
v0 v1 v2 v3 v4 v5 v6 v7 v8 v9
T
T
P
F
F
P
T F
T
v10
T
v0
v1v2v3
v6 v7
v9
v5
v4
v8
v10
 
Figure 1: (a) A Ptolemaic graph G, and (b) a sequence σ of one-vertex extensions 
of G. 
? 8 ? 
adjacent to all vertices of B. The 
relationships among these above four 
sets are shown in the following lemma: 
Lemma 4. Suppose σ = (v0, v1, v2, ..., 
vn−1) is a sequence of one-vertex 
extensions that generates a Ptolemaic 
graph G = (V, E), and that vi is the final 
pendant vertex. Let X, Y, Z and T be the 
four subsets of V obtained by Procedure 
P4V. Then, the following five conditions 
hold: 
(1) X and Y are joint, and X and Z are 
joint;  
(2) none of Y is adjacent to any vertex 
of V − (X ∪ Y);  
(3) none of X ∪ Y is adjacent to any 
vertex of T;  
(4) Y induces a cograph;  
(5) X forms a clique (complete graph).  
In the following, it is assumed that 
G = (V, E) is a Ptolemaic graph, X, Y, Z 
and T form a partition of V obtained by 
Procedure P4V, and that Z is not empty. 
To simplify our notations, we denote X 
∪ Y by S and Z ∪ T by W, respectively. 
By Lemma 4, we have NG[Y] ⊆ S, NG[X] 
⊆ (S ∪ Z), X and Y are joint, X and Z are 
joint, X forms a clique, and Y induces a 
cograph. For a set A of V, denote by G[A] 
the subgraph of G induced by A. For 
simplicity, we denote G[Y], G[X], and 
G[W] by Y, X, and W, respectively, if it 
is no ambiguous. In the following, let TY, 
TX, and TW denote the terminal sets of Y, 
X, and W, respectively, i.e., T = TY ∪ TX 
∪ TW is the terminal set of G. 
Definition 3: A path of a graph G is 
called terminal path if it visits at least 
two vertices and both of its end vertices 
are terminals. A path of G is called 
semi-terminal path if exactly one end 
vertex of it is a terminal. A path of G is 
called non-terminal path if neither of its 
end vertices is a terminal. 
By the above definition, a semi- 
terminal path may consist of only one 
vertex which is a terminal, a non- 
terminal path may visit only one free 
vertex, and a terminal path must contain 
at least two vertices which are distinct 
terminals. 
Definition 4: A terminal path cover PC 
of a graph G w.r.t. T is called a (k, s, t)- 
constrained path cover if (1) |PC| = k + s 
+ t; (2) there are exactly k non-terminal 
paths in PC; (3) there are exactly s semi- 
terminal paths in PC, and (4) all other 
paths in PC are terminal paths. 
A path in a terminal path cover of 
G is clearly either a non-terminal path, a 
semi-terminal path, or a terminal path of 
G. Hence, the following proposition 
immediately holds: 
Proposition 5. Let G be a graph with 
terminal set T. Then, 
(1) PC is a terminal path cover of G 
w.r.t. T if and only if it is a 
constrained path cover of G; 
(2) if G has a (k, s, t)-constrained path 
cover, then |T | = s + 2t. 
In [16], we have showed that the 
terminal path cover problem on 
cographs is linear solvable. Hence, π(Y, 
TY) can be solved in O(|Y|) time. In the 
? 10 ? 
Definition 5: Let G = G1 ∪ G2 such that 
G1 and G2 are disjoint. Let PC be a 
terminal path cover of G. Let PC(G1) 
(resp. PC(G2)) be the terminal path cover 
of G1 (resp. G2) while restricting PC to 
G1 (resp. G2). For case of referencing, 
we call PC(G1) (resp. PC(G2) to be the 
projection of PC on G1 (resp. G2). The 
edges in PC but not in PC(G1) and PC(G2) 
are called bridges. Denote by B(PC(G1), 
PC(G2)) the set of bridges between 
PC(G1) and PC(G2). 
By the above definition, we can 
easily see that |PC| ≥ |PC(G1)| + |PC(G2)| 
− B(PC(G1), PC(G2)) since each bridge 
will decrease the number of paths in 
PC(G1) ∪ PC(G2) at most one. 
Next, we will show that π(G, T ) ≥ 
π(G*, T*) + π(G − G*, T − T*). Let Xf be 
the set of free vertices of X, Xt be the set 
of terminals of X, Xtα = Xt − G*, Ĝ = Y ∪ 
Xtα, and let G* = G* ∪ Ĝ. Then, G* = G 
− Xf and |Xtα| = 2(kY−kX)+sY. 
Suppose PC is a minimum terminal 
path cover of G. We may assume PC is 
chosen to contain the least edges in all 
B(PC(Y), PC(G−Y)). We first prove that 
PC(Y) is a minimum terminal path cover 
of Y of size kY + sY + tY. Assume, by 
contradiction, that |PC(Y)| = kY + sY + tY 
kX sY tY
kX
k kY X
2( )k kY X sY t k k sX Y X Y 2( )
W
Y
X
G
*
G
 
Figure 3: The relationship between G and G* for Case 1.1, where terminals are 
drawn by filled circles. 
kX sY tY
kX
k kY X
2( )k kY X sY t k k sX Y X Y  2( )
W
Y
X
G
*
G G
*
 
Figure 4: π(G−G*, T −T*) = 2 ||
*TT −  = kY − kX + sY + tY for Case 1.1. 
? 12 ? 
B(PC(Y), PC(Xtα)) and it does not affect 
the number of paths in PC. Hence, every 
terminal in Xtα is incident to one bridge 
of B(PC(Y), PC(Xtα)). We then can 
connect all terminals in Xtα to the set of 
sY semi-terminal paths and kY − kX non- 
terminal paths. Then, there are at most 
2kX end vertices of paths in PC(Y) to be 
incident to bridges in B(PC(G*), PC(Y)). 
Thus, the number of bridges in B(PC(Y), 
PC(G*)) is at most 2kX. 
It follows from the above 
arguments that we get the following 
statements:  
(1) PC(Y) is a minimum terminal path 
cover of Y of size kY + sY + tY;  
(2) every terminal in Xtα is incident to 
one bridge of B(PC(Y), PC(Xtα)); and  
(3) the number of bridges of B(PC(Y), 
PC(G*)) is at most 2kX. 
Figure 5 shows such a PC. We then 
partition PC(G*) into two disjoint sets P* 
and Xtβ such that Xtβ ⊆ TX ∩ G* and any 
vertex in Xtβ is adjacent to one bridge in 
B(PC(G*), PC(Y)). By Statement (3) 
above, we get that  
|Xtβ| ≤ 2kX. 
Then, |PC(G*)| = kY + sY + tY + |P*|. Let 
Pt* be the minimum terminal path cover 
of Xtβ. Clearly, |Pt*| = |Xtβ|/2. Then, Pt* 
∪ P* forms a terminal path cover of G* 
of size |P*| + |Xtβ|/2. Thus, |P*|+|Xtβ|/2 
≥ π(G*, T*). 
Finally, we consider adding one 
path of PC(Xf) to PC(G*) one by one. 
Clearly, |PC(Xf)| ≤ kX. Let PC(Xf) = {p1, 
p2, ..., pf}. Then, f ≤ kX. We can see that 
adding one path pi, 1 ≤ i ≤ f, to PC(G*) 
will decrease the number of paths at 
most one and both end vertices of pi are 
in Xf. We then perform the following 
process when a path pi is added into 
PC(G*): 
1. if adding pi to PC(G*) does not 
decrease the number of paths of 
PC(G*), then we add it and do 
nothing;  
2. else 
3. let q1, q2 be the paths in PC(G*) such 
that q1 → pi → q2 is a subpath of one 
path in PC;  
4. Case 1, q1, q2 are in PC(Y): do 
nothing; 
5. Case 2, q1, q2 are in PC(G*):  
sY tY
2( )k kY X sY Xt

W
Y
Xt

G
*
G^ kX k kY X
 
Figure 5: A sketched map of PC(G−Xf) = PC(G*). 
? 14 ? 
2(kX − kY), and tX > sY − 2(kX − kY), then 
π(G, T ) = π(G*, T*) + π(G−G*, T −T*), 
where G* = W∪X*, X* ⊆ TX, |X*| = tX − 
sY + 2(kX − kY), and T* = TW ∪ X*. 
Lemma 14. (Case 3.3) If kX > kY, sY > 
2(kX − kY), and tX ≤ sY − 2(kX − kY), then 
π(G, T ) = π(G*, T*) + π(G−G*, T −T*), 
where G* = W and T* = TW. 
Since G* is a subgraph of a 
Ptolemaic graph G, the following lemma 
is easy to verify: 
Lemma 15. Graph G* is a Ptolemaic 
graph, and a sequence of one-vertex 
extensions of G* can be constructed from 
that of G in O(|X*|) time, where X* = X 
∩ G*. 
Based on the above lemmas, we 
can reduce the terminal path cover 
problem on G to the same problem on a 
smaller G* in O(|V(G)|−|V(G*)|). By 
Lemma 15, G* is also a Ptolemaic graph. 
It is easy to verify that our algorithm for 
solving the terminal path cover problem 
on a Ptolemaic graph G runs in O(n2) 
time. We finally conclude the following 
result: 
Theorem 16. The terminal path cover 
problem on Ptolemaic graphs can be 
solved in O(n2) time.  
????????? 
In this project, we first introduce a 
reduction from the terminal path cover 
problem to the path cover problem. This 
reduction can be applied to the graph 
classes closed under the pendant-vertex 
operation. By the reduction, the 
complexity of the terminal path cover 
problem is the same as that of the path 
cover problem for the stated graph 
classes. The proposed reduction can be 
applied to Ptolemaic graphs. However, 
the best algorithm for the path cover 
problem on Ptolemaic graphs is an 
O(n9)-time algorithm. In this project, we 
propose an O(n2)-time algorithm to the 
terminal path cover problem on 
Ptolemaic graphs. Of course, the 
proposed algorithm can be applied to 
solve the path cover problem on 
Ptolemaic graphs. It improves the best 
result for the problem.   
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
? 16 ? 
cographs, in: Proceddings of the 23rd Workshop on Combinatorial Mathematics 
and Computation Theory, Changhwa, Taiwan, 2006, pp. 62−75. 
(http://algo2006.csie.dyu.edu.tw/paper/1/B14.pdf) 
[17] R.W. Hung and M.S. Chang, Solving the path cover problem on circular-arc 
graphs by using an approximation algorithm, Discrete Appl. Math., Vol. 154, 
2006, pp. 76−105. 
[18] R.W. Hung and M.S. Chang, Finding a minimum path cover of a distance- 
hereditary graph in polynomial time, Discrete Appl. Math., Vol. 155, 2007, pp. 
2242−2256. 
[19] D.S. Johnson, The NP-complete column: an ongoing guide, J. Algorithms, Vol. 6, 
1985, pp. 434−451. 
[20] R. Lin, S. Olariu, and G. Pruesse, An optimal path cover algorithm for cographs, 
Comput. Math. Appl., Vol. 30, 1995, pp. 75−83. 
[21] S. Moran and Y. Wolfstahl, Optimal covering of cacti by vertex disjoint paths, 
Theoret. Comput. Sci., Vol. 84, 1991, pp. 179−197. 
[22] S.C. Ntafos and S. Louis Hakimi, On path cover problems in digraphs and 
applications to program testing, IEEE Trans. Software Engrg., Vol. 5, 1979, pp. 
520−529. 
[23] J.F. O’Callaghan, Computing the perceptual boundaries of dot patterns, Comput. 
Graphics Image Process., Vol. 3, 1974, pp. 141−162. 
[24] S.S. Pinter and Y. Wolfstahl, On mapping processes to processors, Internat. J. 
Parallel Programming, Vol. 16, 1987, pp. 1−15. 
[25]  F.P. Preperata and M.I. Shamos, Computational Geometry: An Introduction, 
Springer, New York, 1985. 
[26] R. Srikant, R. Sundaram, K.S. Singh, and C. Pandu Rangan, Optimal path cover 
problem on block graphs and bipartite permutation graphs, Theoret. Comput. 
Sci., Vol. 115, 1993, pp. 351−357. 
[27] G.T. Toussaint, Pattern recognition and geometrical complexity, in: Proceedings 
of the 5th International Conference on Pattern Recognition, Miami Beach, 1980, 
pp. 1324−1347. 
[28] P.K. Wong, Optimal path cover problem on block graphs, Theoret. Comput. Sci., 
Vol. 225, 1999, pp. 163−169. 
[29] J.H. Yan and G.J. Chang, The path-partition problem in block graphs, Inform. 
Process. Lett., Vo. 52, 1994, pp. 317−322. 
[30] H.G. Yeh and G.J. Chang, The path-partition problem in bipartite distance- 
hereditary graphs, Taiwanese J. Math., Vol. 2, 1998, pp. 353−360. 
 
−1− 
???????????? 
                                                             
???? NSC97-2221-E-324-010 
???? ???????????????? 
?????? 
??????? 
??? 
??????????? ??? 
?????? 
?? 
18-20 March, 2009 
???? International MultiConference of Engineers and Computer Scientists 2009 
?????? The Hamiltonian Cycle Problem on Circular-Arc Graphs 
 
?? ?????? 
IMECS(International MultiConference of Engineers and Computer Scientists) 
2009?? International Association of Engineers (IAENG)???????????
???????????????????????????????????
????IMECS ?????? 30 ???? 250 ??????????????
???????????????????????????????????
?? 
IAENG(International Association of Engineers)??????????????
???????????????????? 30??????????????
????????????????????????????????????
???????????????????????????????????
???????????????????????????????????
????? 
IMECS 2009????????????????????????Artificial 
−3− 
???????????? 5????? session? 1.5?????? 
 
?? ???? 
?????????????????? presentation??????????
???????????????????????????????????
???????????????????????????????????
???????????????????????????????????
???????????????????????????????????
????(?WiMAX?4G?MIMO?Wireless Sensor Networks?TCP in Wired and 
Wireless Networks?Quality of Service?Wireless MAC Protocol?Communication 
Coding?Ad hoc Networks and Cross Layer??)???????????????
???????(wireless sensor network)??????????????????
??????(routing)?????(placement)?????????? 
??????????????????????????????????
???????????????????(?????)???????????
???????????????????????????????????
???????????????????????????????????
???????????????????????????????????
???????????????????????????????????
???????????????????????????????????
??????????????????? 
 
−5− 
?? ??????????(???????) 
Ruo-Wei Hung, Maw-Shang Chang, and Chi-Hyi Laio, The Hamiltonian cycle problem 
on circular-arc graphs, in: International MultiConference of Engineers and Computer 
Scientists 2009 (IMECS’2009), Hong Kong, Vol. I, 2009, pp. 630−637. 
 
 
 
connected components. If G(F \C) has |C|+1 connected
components, then G(F ) is not Hamiltonian by pigeonhole
principle. Otherwise, a nonempty subset EC of edge set
of G(F ) is found. Every edge e of EC connects two arcs
of C and G(F ′) is obtained by removing EC from G(F ).
Furthermore, G(F ′) is still a circular-arc graph. By pi-
geonhole principle, every edge e of EC will not be in any
Hamiltonian cycle of G(F ). Thus, G(F ) is Hamiltonian
if and only if G(F ′) is Hamiltonian. Let F = F ′ and
repeat the above process until the problem is solved.
Related works are summarized below. Arikati and Ran-
gan presented an O(n + m)-time algorithm to solve the
path cover problem on interval graphs [1]. Chang et al.
proposed O(n)-time algorithms for both the Hamiltonian
cycle and path cover problems on interval graphs given
an interval model that is a set of n sorted intervals [7].
Damaschke presented an O(n5)-time algorithm to solve
the Hamiltonian path problem on circular-arc graphs [11].
Shih et al. proposed an O(n2 log n)-time algorithm for
the Hamiltonian cycle problem on circular-arc graphs
[36]. The algorithm proposed by Bonuccelli and Bovet
for solving the path cover problem on circular-arc graphs
[5] contains a ﬂaw which was pointed out in [36]. Some
researchers [6, 28, 29] claimed that O(n)-time algorithms
exist for the Hamiltonian cycle problem and the path
cover problem on circular-arc graphs given a circular-arc
model that is a set of n sorted arcs, but they have not yet
succeeded in proving the correctness of their algorithms.
In [23], we presented an O(n)-time approximation algo-
rithm for the path cover problem on circular-arc graphs.
We showed that the cardinality of the path cover found
by the approximation algorithm is at most one more than
the optimal one. By using the result, we reduced the path
cover problem on circular-arc graphs to the Hamiltonian
cycle problem on the same class of graphs in O(n) time.
The paper is organized as follows. In Section 2, we estab-
lish the notation and related terminology, and review a
greedy algorithm for the path cover problem on interval
graphs. In Section 3, we present an O(∆n)-time algo-
rithm to solve the Hamiltonian cycle problem on circular-
arc graphs. Section 4 reveals how to prove the correct-
ness of our algorithm, analyzes the complexity of our
algorithm, and introduces a technique that reduces the
related problems to the Hamiltonian cycle problem on
circular-arc graphs. Finally, in Section 5 we conclude the
paper and discuss possible future researches.
2 Preliminaries
In this section, we establish basic terminology and review
a greedy algorithm for solving the path cover problem on
interval graphs.
Let G = (V,E) be a graph without isolated vertices. A
path P in G, denoted by v1 → v2 → · · · → v|P |−1 → v|P |,
is a sequence (v1, v2, · · · , v|P |−1, v|P |) of vertices so that
two vertices are adjacent if and only if they are consecu-
tive in the sequence. The ﬁrst and last vertices visited by
P are called the path-start and path-end of P , denoted
by start(P ) and end(P ), respectively. We call vi the pre-
decessor of vi+1, denoted by vi = predecessor(vi+1), in
P , for 1 ≤ i ≤ |P | − 1. We use vi ∈ P to denote “P
visits vi”. In addition, we will use P to refer to the set
of vertices visited by path P if it is understood without
ambiguity. For any S ⊆ V , G \ S denotes the subgraph
of G induced by V \S, i.e., G\S = G[V \S]. A subset C
of vertices of G is called a cutset if the removal of C from
G disconnects G. We call C a connecting set of G if C is
a cutset of G and the removal of C from G disconnects
G into at least |C|+ 1 connected components.
For C ⊆ V , let E(C) denote the set of edges of E that
connect two vertices in C. The following two propositions
can be easily veriﬁed by the pigeonhole principle.
Proposition 2.1. Let C be a cutset of a connected graph
G and let g be the number of connected components in
G \ C. If g > |C|, then G has no Hamiltonian cycle.
Proposition 2.2. Let C be a cutset of a connected graph
G and let g be the number of connected components in
G \ C such that g = |C|. Then, G is Hamiltonian if and
only if GC = (V,E \ EC) is Hamiltonian, where EC is
any nonempty subset of E(C).
Our algorithm for the Hamiltonian cycle problem on
circular-arc graphs reduces the problem to the path
cover and Hamiltonian cycle problems on interval graphs.
Arikati and Rangan presented an O(n + m)-time algo-
rithm for the path cover problem on interval graphs [1].
Manacher et al. solved the Hamiltonian cycle problem on
interval graphs in linear time [30]. These two algorithms
can be implemented in O(n) time given an interval model
that is a set of n sorted intervals [7].
Now, we review the algorithm in [1] for the path cover
problem on interval graphs. The algorithm is assumed
that the input graph is given by an interval model I that
is a set of n sorted intervals labeled by 1, 2, · · · , n in in-
creasing order of their right endpoints. Notice that we
do not distinguish an interval from its label. The left
endpoint of interval x is denoted by left(x) and the right
endpoint by right(x). Interval x is denoted by (left(x),
right(x)). An interval x is said to contain another inter-
val y if every point of y falls within the interior of (left(x),
right(x)). For convenience, we need the following nota-
tion: (1) For two distinct intervals x, y in I, x is smaller
than y, denoted by x < y, if right(y) is to the right of
right(x), and (2) s(I) denotes the interval in I with the
leftmost right endpoint, i.e., s(I) ≤ x for x ∈ I.
In the following, we review two algorithms presented in
[1] and [23] on interval graphs. The ﬁrst one is a greedy
algorithm for the path cover problem on interval graphs.
The second one is also a greedy algorithm for ﬁnding a
Proceedings of the International MultiConference of Engineers and Computer Scientists 2009 Vol I
IMECS 2009, March 18 - 20, 2009, Hong Kong
ISBN: 978-988-17012-2-0 IMECS 2009
cle from the head (resp. tail) of an arc v and stretches
the circle into a horizontal line. Thus an arc becomes an
interval. We stretch the circle in this way such that the
head (resp. tail) of arc v is on the left hand side of the
horizontal line. In other words, h(v) (resp. t(v)) becomes
the left endpoint of the corresponding interval of arc v.
An arc that contains the cut point is not cut into two in-
tervals but is stretched into an interval. Let B be a subset
of Ba(v). Note that B is a part of the input of this pro-
cedure. Those arcs in B are stretched into intervals that
contain the left endpoint of the corresponding interval of
arc v. Those arcs that contain the cut point but are not
in B are stretched into intervals that do not contain the
left endpoint of the corresponding interval of arc v. The
mapping procedure that cuts the circle from h(v) (resp.
t(v)) is called clockwise (resp. counterclockwise) mapping
with respect to arc v and B and is formally presented as
follows.
Procedure ArcToI
Input: A set F of n sorted arcs, an arc v ∈ F , and a
subset B of Ba(v).
Output: A set Ic(B, v) (resp. Icc(B, v)) of n sorted in-
tervals.
Method:
1. starting from point h(v) (resp. t(v)), label the end-
points of arcs of F in clockwise (resp. counterclock-
wise) direction; that is, the endpoint located on point
h(v) (resp. t(v)) is labeled by 1;
2. let (p) denote the label of endpoint p;
3. for each arc x ∈ B, x is mapped to interval
Ic(x) = (h(x), t(x)) if (t(x)) > (h(x)) (resp.
Icc(x) = (t(x), h(x)) if (h(x)) > (t(x))) and to
interval Ic(x) = (h(x), t(x) + 2n) (resp. Icc(x) =
(t(x), h(x) + 2n)) otherwise;
4. for each arc x ∈ B, x is mapped to interval Ic(x) =
(1, t(x)) (resp. Icc(x) = (1, h(x)));
5. let Ic(B, v) = {Ic(x)|x ∈ F} (resp. Icc(B, v) =
{Icc(x)|x ∈ F}) and output Ic(B, v) (resp.
Icc(B, v)).
Apparently, both G(Ic(B, v)) and G(Icc(B, v)) are span-
ning subgraphs of G(F ). For instance, given a set F of
arcs shown in Fig. 2, arc a1, and B = Ba(a1), Procedure
ArcToI ﬁrst labels the endpoints of arcs of F (as shown in
Fig. 3) in clockwise direction starting from h(a1). Then,
it converts F into a set Ic(Ba(a1), a1)) of intervals as
shown in Fig. 4. On the other hand, Procedure ArcToI
constructs a set Icc(∅, a6) (as shown in Fig. 5) of intervals
for the set F of arcs shown in Fig. 2. Careful implemen-
tation of Procedure ArcToI takes O(n) time and O(n)
space.
Let v be an arc in a set F of arcs, B be a subset of Ba(v),
Ic and Icc represent Ic(B, v) and Icc(B, v), respectively,
and let I be either Ic or Icc. Let x be an arc in F and let
a
1
a
2
a
3
a
4
a
5
a
6
a
7
a
8
a
9
a
10 a11
Fig. 2: A circular-arc model F of eleven sorted arcs.
a
1
a
2
a
3
a
4
a
5
a
6
a
7
a
8
a
9
a
10
a
11
1
2
3 4 5
6
7
8
911
12
13
15
16
17
18
19
20
21
10
14
22
Fig. 3: The clockwise labeling by Procedure ArcToI given
F shown in Fig. 2, arc a1, and B = Ba(a1), where dashed
lines indicate the removed segments of arcs from F .
X be a subset of F . We use I(x) to denote the interval
corresponding to arc x in I and I(X) to denote {I(x)|x ∈
X}. Conversely, let y be an interval in I and let Y be a
subset of I. We use F (y) to denote the arc corresponding
to y in F and F (Y ) to denote {F (y)|y ∈ Y }.
Now, we present an O(∆n)-time algorithm to solve the
Hamiltonian cycle problem on circular-arc graphs. Our
algorithm reduces the problem to the Hamiltonian cycle
and the path cover problems on interval graphs. Note
that the Hamiltonian cycle and the path cover problems
on interval graphs can be solved in O(n) time if the input
is a set of n intervals with endpoints sorted [1, 7, 30]. The
algorithm is formally presented as follows.
Algorithm HC(F)
Input: F , a set of sorted arcs.
Output: A Hamiltonian cycle of G(F ) if it is Hamilto-
nian.
Method:
Proceedings of the International MultiConference of Engineers and Computer Scientists 2009 Vol I
IMECS 2009, March 18 - 20, 2009, Hong Kong
ISBN: 978-988-17012-2-0 IMECS 2009
no arc in F covers the entire circle, and arc µ does not
contain any other arc of F .
Apparently, Algorithm HC(F ) is correct if it terminates
at either Step 1.5, Step 1.6, Step 3.4 or Step 3.5 since
G(Ic) and G(Icc) are spanning subgraphs of G(F ). We
observe that υ1 = υ if L(P ) = ∅, and υ1 ∈ Ba(s) if
s = υ1. To verify the correctness of Step 4.6, we show that
arc z intersects both F (start(Qz¯)) and F (end(Qz¯)), and,
hence, “z → Qz¯ → z” is a Hamiltonian cycle of G(F ). To
verify the correctness of Steps 3.1 and 5, we ﬁnd a subset
C of F such that G(F \ C) has at least |C|+ 1 connected
components. By Proposition 2.1, G(F ) is not Hamilto-
nian. In Step 4.7, we remove the segment seg(h(ω), t(z))
of arc z from F . We prove its correctness by ﬁnding a
subset C of F such that z ∈ C, G(F \ C) has at least
|C| connected components, and no arcs of F \ C intersect
seg(h(ω), t(z)). By Proposition 2.2, G(F ) is Hamilto-
nian if and only if graph G((F \{z})∪ seg(h(z), h(ω))) is
Hamiltonian. To verify the correctness of the algorithm,
we may prove the following claims. Due to the space
limitation, we omit the proofs of these claims.
(1) G(F ) is not Hamiltonian if |GP (Icc)| > 1 (Step 3.1);
(2) G(F ) is not Hamiltonian if |GP (Icc)| = 1 and ω ∈
Bp(t(υ1)) (Step 5);
(3) Suppose that ω ∈ Bp(t(υ1)) (it implies R = ∅) and
|GP (Icc \{Icc(z)})| = 1. Then, G(F ) is Hamiltonian
if and only if arc z intersects arc ωz¯ in G(F ) (Step
4.6);
(4) Suppose that ω ∈ Bp(t(υ1)) and |GP (Icc \
{Icc(z)})| = 1. If arcs z and ωz¯ do not intersect,
then G(F ) is Hamiltonian if and only if G((F \{z})∪
seg(h(z), h(ω))) is Hamiltonian (Step 4.7).
(5) Suppose that ω ∈ Bp(t(υ1)) and |GP (Icc \
{Icc(z)})| > 1. Then, G(F ) is Hamiltonian if and
only if G((F \ {z})∪ seg(h(z), h(ω))) is Hamiltonian
(Step 4.7).
Next, we analyze the complexity of Algorithm HC. The
algorithm is assumed that the input graph is given by a
circular-arc model F that is a set of n sorted arcs. Given
such a model F , an arc µ of F that does not contain any
other arc can be easily found in O(n) time. From now
on, we assume that such an arc µ is given.
Manacher et al. proposed a Hamiltonian cycle algorithm
on interval graphs [30]. Chang et al. implemented the
algorithm in O(n) time if a set of n sorted intervals is
given [7]. Hence, testing whether G(Ic) or G(Icc) has a
Hamiltonian cycle can be done in O(n) time. It is easy to
see that the algorithm runs in O(n) time if it terminates
at either Step 1.5, Step 3.1 or Step 3.4. Therefore, the
time complexity of Algorithm HC is O(n) if it terminates
before Step 4. Consider that Algorithm HC does not
terminate before Step 4. Let ∆ω be the number of arcs
in Bp(h(ω)). Clearly, ∆ω ≤ ∆. Let R = {r ∈ F |r ∈
Bp(h(ω)) \ F (L(Q))}. In each iteration of Step 4, |R| is
decreased by 1. Obviously, |R| ≤ ∆ω. Therefore, Step 4
is iterated at most |R| times, and, hence, it is iterated at
most ∆ω times. Since every line can be implemented in
O(n) time, Step 4 runs in O(∆n) time. Thus, we conclude
the following theorem.
Theorem 4.1. Given a circular-arc model F that is a set
of n sorted arcs, Algorithm HC solves the Hamiltonian
cycle problem on G(F ) in O(∆n) time.
In [23], we proposed an O(n)-time approximation al-
gorithm for the path cover problem on a circular-arc
graph G(F ). Let π′ be the cardinality of the path cover
found by the approximation algorithm. We showed that
π′ ≤ π(G(F )) + 1 in [23]. Then, the path cover problem
on G(F ) can be solved by reducing it to the Hamiltonian
cycle problem as follows. If π′ = 1, then π(G(F )) = π′.
Otherwise, π(G(F )) = π′−1 if and only if G(F )⊗Kπ′−1
is Hamiltonian, where Kπ′−1 is a complete graph of π′−1
vertices, G(F ) and Kπ′−1 are disjoint, and G(F )⊗Kπ′−1
is the graph obtained by connecting every vertex of G(F )
with all vertices of Kπ′−1. Apparently, G(F )⊗Kπ′−1 is
a circular-arc graph, too. Let ∆ be the maximum degree
of G(F ). Then, the maximum degree of G(F ) ⊗ Kπ′−1
is ∆ + (π′ − 1). By using the above reduction and the
Hamiltonian cycle algorithm proposed in the paper, the
path cover problem on G(F ) can be solved in O(n2) time.
Thus, we have the following corollary.
Corollary 4.2. Given a circular-arc model F that is a
set of n sorted arcs, the path cover problem on G(F ) can
be solved in O(n2) time.
It is well known that the Hamiltonian cycle and Hamilto-
nian path problems on circular-arc graphs can be reduced
to each other [23, 27]. Thus, the Hamiltonian path prob-
lem on circular-arc graphs can be solved by an algorithm
whose time complexity is the same as that of the most
eﬃcient algorithm for the Hamiltonian cycle problem on
the same class of graphs. Therefore, the following corol-
lary immediately holds true.
Corollary 4.3. Given a circular-arc model F that is a
set of n sorted arcs, the Hamiltonian path problem on
G(F ) can be solved in O(∆n) time.
5 Concluding Remarks
In this paper, we solve the Hamiltonian cycle problem
on circular-arc graphs in O(∆n) time. This improves the
best previous result in [36] for this problem which is an
O(n2 log n)-time algorithm. Using a general reduction
technique in [23] and [27], the Hamiltonian path prob-
lem on circular-arc graphs can be solved in O(∆n) time,
too. On the other hand, using the reduction technique in
[23] and the Hamiltonian cycle algorithm presented in the
Proceedings of the International MultiConference of Engineers and Computer Scientists 2009 Vol I
IMECS 2009, March 18 - 20, 2009, Hong Kong
ISBN: 978-988-17012-2-0 IMECS 2009
