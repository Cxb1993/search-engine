problem with parallel machines. For the problem this 
project uses makespan, total weighted completion 
time, and tardiness as the objective functions, 
respectively, and develops a constraint programming 
model to obtain optimal solutions which can be 
benchmark for other heuristic algorithms. Because the 
considered problem is NP hard, the constraint 
programming model can not solve large problems in a 
reasonable computational time, thus, this project 
also develops some heuristic algorithms and use the 
solutions obtained by the heuristic algorithms as 
initial particles for particle swarm optimization 
(PSO) algorithm. Finally, these developed algorithms 
were compared with other existing algorithms in the 
literature by computational generated problems, and 
the experimental results will show that the 
performance of the developed algorithms and find the 
best algorithms among the developed algorithms. 
英文關鍵詞： open shop, parallel machine scheduling, light 
emitting diode(LED), sorting machine, particle swarm 
optimization 
 
 2 
磷、鎵等Ⅲ-Ⅴ族化學元素，製造過程包括有上游
的晶圓製造、磊晶成長，中游的擴散製程、金屬濺
鍍、晶粒製作，以及下游的晶粒針測、分類揀選與
封裝等。發光二極體因其使用的原物料材質不同，
二極體內的電子、電洞所佔的能階也有所不同。能
階的高低差會影響電子與電洞結合時光子所釋放
出來的能量，因而產生不同波長的光，也就是大家
所見到的不同顏色的紅、橙、黃、綠、藍或其他的
不可見光。 
我國發光二極體產業發展至今已達三十多
年，由於發光二極體下游晶粒封裝技術與資金的進
入門檻障礙相對較低，因此自從 1973 年開始我國
便有廠商進入到此產業領域發展，這些相關廠商的
技術來源大都來自於美商德儀公司。1980年代，我
國發光二極體產業價值鏈發展進一步擴展到晶粒
製程階段。1990年代，透過技術擴散以及自美留學
歸國的海外學人相繼投入，使得台灣發光二極體產
業開始積極投入到上游的磊晶製程發展。2001年後
更藉由本身技術能力的不斷提升以及順利地拓展
海外市場，因此成功的建立完整的發光二極體產業
鏈。 
歷經三十餘年的發展，除了在上游的原物料供
應能力較弱之外，我國發光二極體產業已經構建出
相當完整的產業價值鏈，在全球產業競爭的環境中
也扮演全球僅次於日本以外的第二大供應國角
色。不過由於發光二極體產業在技術與資金的進入
門檻障礙相對較低，現有廠商之間的競爭相當激
烈。當市場景氣佳時，難免會吸引眾多潛在競爭者
進入此產業領域發展，況且現有的業者也會競相擴
增產能設備，使得市場供需態勢變化迅速，增加產
業經營的困難度。 
發光二極體後段之晶粒製造程序大致上可以
區分為四個階段：晶圓研磨、晶圓雷射切割與劈
裂、晶粒點測以及晶粒分類揀選。在這四道製程當
中，其中以晶粒分類揀選此道製程的生產排程問題
最為複雜，因而往往形成發光二極體製造廠中的關
鍵產能瓶頸製程。因此，發展一個適當的生產排程
演算法來有效地安排製造命令單在發光二極體製
造廠之晶粒分類揀選製程上的生產排程，對於發光
二極體後段之晶粒製造廠之系統生產績效好壞有
極大的影響。 
發光二極體晶粒分類揀選製程的生產排程問
題中，發光二極體晶粒分類揀選加工的製造流程是
依據顧客要求，將晶圓上各個晶粒依據其電性與光
性來加以分級，然後把相同等級的晶粒集中黏貼在
相同的膠膜上面，以完成分類揀選作業。每一張製
造命令單上的晶圓依照客戶所制訂之標準，可以將
發光二極體的每一顆晶粒加以歸類區分到 128種不
同的晶粒等級。每一台分類機台最多只能同時分類
32種不同的晶粒等級，因此每一張製造命令單上的
晶圓至少都要歷經四道以上不同特定等級分類機
台加工道次的製程，這些加工道次沒有先後生產次
序的限制，而且每一道次製程均同時具有多台平行
機台，因而形成典型的具有平行機台的開放型流程
的生產特性，考量的績效目標則有機器設備的產能
利用率、在製品存貨水準以及交期配合度等多項評
估準則。目前國內發光二極體製造廠針對此晶粒分
類揀選製程之生產排程問題所採取的處理方式，大
致上是採用先進先出(first in first out, FIFO)與交期
最早優先(earliest due date, EDD)等簡單的派工法則
(dispatching rule)為主。雖然它可以簡單、快速地分
派製造命令單到各台晶粒分類機器設備求取可行
的排程計畫，然而卻缺乏任意調整製造命令單加工
順序的彈性以及無法比較是否還有存在更好的生
產排程計畫，因此往往無法滿足公司在管理績效上
要求提高資源設備產能利用率、降低在製品存貨水
準以及儘量配合顧客交期等目標。有鑑於此，本計
畫乃同時考量前述之晶粒分類揀選製程的生產特
性並提出一個可以在合理的時間內迅速有效地獲
得較佳績效的排程順序解，藉以提供發光二極體製
造廠在制訂晶粒分類揀選製程的生產排程計畫時
之參考依據。 
 
四、文獻探討 
   
開放型流程(open shop)排程問題可從機器環境
的限制條件下分為二類：第一類是每一道次加工製
程只有一台機器設備負責加工作業，亦稱為傳統的
開放型流程排程問題；第二類則是每一道次加工製
程擁有多台功能相同的機器設備負責加工作業。從
上述之分類定義可以得知，歸屬於第二類的開放型
流程排程問題基本上是傳統開放型流程與平行機
台(parallel machines)的結合，此問題稱之為具有平
行機台的開放型流程(multiprocessor open shop 或
open shop with parallel machines)之生產排程問題。
由於此類生產排程問題比較貼近實際的生產作業
環境，因此近幾年來有愈來愈多的研究學者紛紛加
入探討此類具有平行機台的開放型流程的生產排
程問題。 
1982年 Achugbue and Chin 證明兩階段之傳統
開放型流程的生產排程問題，也就是只有兩台機台
負責所有工作之加工作業的開放型流程問題為
strongly NP-hard，而具有平行機台的開放型流程的
生產排程問題除了具有傳統開放型流程的特性之
外，亦具有平行機台的問題特性。因此，具有平行
機台的開放型流程的生產排程問題較傳統開放型
流程問題更加困難。Mao (1995)證明兩階段之具有
平行機台的開放型流程的生產排程問題 為
NP-complete，而 Lawler 等人(1982)則考慮工作具
有 preemptive特性之具有平行機台的開放型流程的
問題，並提出一個可以在多項式時間下進行求解
(polynomial-time)的演算法。 由於具有平行機台的
開放型流程的生產排程問題的求解複雜度太高，許
多的研究學者進而轉向發展有效率的啟發式演算
法或萬用啟發式演算法如基因演算法、螞蟻演算法
等，希望透過這些啟發式演算法使能在較短的時間
內得到近似最佳解。本計畫所要探討的發光二極體
晶粒分類揀選製程的生產排程問題在學術上是屬
 4 
題，同時由於這些電子醫療儀器的價格非常昂貴，
因此，如何安排病人的作業順序使能提高這些儀器
的使用率或產出則是非常重要，所以在此篇中
Matta 則以所有工作完工時間點最小化作為此排程
研究的目標函數，同時提出兩種不同的混合整數規
劃模式，分別為以時間為基的整數規劃模式，以及
作業順序為基的整數規劃模式，並透過模式中的變
數個數以及限制式個數來比較此兩種模式的複雜
度。由於當工作變大時，不論第一種模式或第二種
模式其變數與限制式個數均變得很大，使得無法在
合理的時間進行求解，因此 Matta則應用基因演算
法進行求解，並提出一個二維的染色體表示方式，
其中第一個元素代表作業，而第二元素代表此作業
在第幾個階段作業。在此二維的染色體設計中基因
交配及突變運算後並不會產生不合理的子代，整個
基因演算法透過演化過程－父代、母代的交配及突
變運算慢慢地收斂至近似最佳解或最佳解。Matta
利用四種不同問題：兩個階段數、四個階段數、八
個階段數以及十六個階段數來驗證基因演算法的
效能，從實驗結果可知基因演算法可以在很短的時
間求解不同具有平行機台的開放型流程之生產排
程問題的問題。  
5. 呂俊毅、姜自強、林俊成、黃悅民，「應用
螞蟻演算法於 LED 後段切割製程之排程研究」，
第八屆離島資訊技術與應用研討會論文集，
551-558, 2009。 
此篇係探討發光二極體後段切割製程之排程
研究，並針對發光二極體產業特性及製程有較詳細
的說明。發光二極體後段切割製造流程包含有晶片
研磨、晶片切割、晶片劈裂、晶粒針測及晶粒分類
揀選等階段，且各個製程內包含一至多個平行機
台。根據排程問題定義可知發光二極體後段切割製
程的生產環境屬於彈性流程工廠排程(FFS)的排程
問題，作者針對此 FFS排程問題發展一個螞蟻演算
法（ACO）用於求解發光二極體後段切割製程工單
的作業順序，並分別與指派法則-先進先出(FCFS)
法、最早交期(EDD)、最短加工時間(SPT)比較，實
驗結果證明不論排程目標為所有工作完工時間點
(makespan)、平均流程時間(mean flow time)與平均
延遲時間(mean tardiness time)，螞蟻演算法均有不
錯的求解品質。 
6. Sevastianov S.V. and Woeginger G.J., Linear 
time approximation scheme for the multiprocessor 
open shop problem, Discrete Applied Mathematics, 
114, 273-288, 2001. 
此篇是探討具有平行機台的開放型流程之生
產排程問題，並以所有工作完工時間點(makespan)
最小化為其目標函數。在此篇研究中，作者針對此
排程問題提出一個下限值( *maxC )，其下限值計算方
式為： },max{ maxmax
*
max dLC
Ù
³ ， }max{max
i
i
m
LL =
Ù
, 
jj dd maxmax = 。 iL 是每一階段所有工作之時間
和， im  是每階段的機台數， jd 是每一工作所有時
間和。除此之外，作者針對 multi-processor open shop 
problem with a fixed number of machines，其中階段
數固定且每一個階段的機器數目為一常數 im，提出
一個 approximation 方法求解並證明此方式的求解
時間為 n的線性函數。 
從以上的相關文獻可知具有平行機台的開放
型流程之生產排程問題至今仍較少人進行探討，而
此環境不論在製造業如：發光二極體產業後段晶粒
分類製程或服務業如腫瘤診斷作業或 SPA 芳療等
均屬於具有平行機台的開放型流程之生產排程問
題之生產環境。因此從實務角度而言，具有平行機
台的開放型流程之生產排程問題確有值得探討之
處。除此之外，在這些相關探討具有平行機台的開
放型流程之生產排程問題排程問題的文獻中，僅以
所有工作完工時間點或總完工時間最小化作為排
程的目標函數，而總遲交時間或總加權遲交時間最
小化則無人探討，因此，本計畫除了考慮所有工作
完工時間點、總完工時間最小化等目標函數，亦納
入總遲交時間。 
 
五、研究方法 
   
本計畫探討的發光二極體製造廠中後段之晶
粒分類揀選製程之生產排程問題，相關的環境描
述、前提假設、限制條件以及作業特性綜合整理說
明於后。 
1. 排程規劃者從現場作業管理系統(MES)中可
以事先取得所有製造命令單釋放(或抵達)到晶粒分
類揀選製程的時間； 
2. 排程規劃者也可以從現場作業管理系統事
先取得所有晶粒分類揀選機台可以用來安排其他
製造命令單進行晶粒分類揀選作業的啟始時間； 
3. 每張製造命令單的晶粒等級、數量、經營管
理績效重要程度以及單顆晶粒分類揀選所需加工
時間等相關數據資料均為已知； 
4. 假設所有晶粒分類揀選機台的狀況與操作
效率均為一模一樣； 
5. 每一台晶粒分類揀選機台同時間最多只能
加工一張製造命令單，並且不允許佔先或掠奪
(non-preemptive)情形發生； 
6. 在排程規劃期間不考慮晶粒分類揀選機台
發生故障當機情形發生。 
依據前面的文獻探討可以得知，發光二極體製
造廠中後段之晶粒分類揀選製程的生產排程問題
是屬於 NP-Hard的生產排程問題。本計畫所提出的
限制規劃模式係透過 ILOG OPL Studio 3.7最佳化
套裝軟體去進行求解，其主要的目的在於驗證後續
發展的啟發式演算法所得結果之正確性以及作為
評估排程演算法求解品質成效的基準。 
當問題之製造命令單數目或晶粒分類揀選機
台數量不多時，限制規劃模式雖然可以求取最佳的
排程順序結果，然而當問題製造命令單數目或晶粒
分類揀選機台數量急遽擴大時，限制規劃模式的所
使用之 ILOG OPL Studio 3.7最佳化套裝軟體在求
 6 
conference and exhibition on high performance 
computing and networking. Lecture notes in 
computer science, 919, Berlin: Springer, 1995, 
33-38. 
6. Matta M. E., A genetic algorithm for the 
proportionate multiprocessor open shop, 
Computers & Operations Research 36, 2601-2618, 
2009. 
7. Naderi B., Fatemi Ghomi S.M.T., Aminnayeri M., 
Zandieh M., Scheduling open shops with parallel 
machines to minimize total completion time. 
Journal of Computational and Applied 
Mathematics. Doi:10.1016/j.cam.2010.08013, 
2010. 
8. Sevastianov S.V. and Woeginger G.J., Linear time 
approximation scheme for the multiprocessor open 
shop problem, Discrete Applied Mathematics, 114, 
273-288, 2001. 
9. Tang L., and Bai D., A new heuristic for open 
shop total completion time problem, Applied 
Mathematical Modeling, 34, 735-743, 2010. 
 
 2 
議題分組當中，由於本次會議主題所涵蓋的領域甚廣，因此單單就生產規劃與控制
課題而言就區分為兩個不同時段來宣讀發表，與會的相關學者對於每個人所提出的
各自研究成果與研究心得，均提供了充分地經驗分享與意見交流。本人在論文發表
當中，與會者均給予正面之肯定與認同。對於此次國際會議的行程中，就個人而言，
實在收穫良多，不僅可以藉此機會聆聽到國內外專家學者在工業工程相關研究領域
與研究成果的內容之外，同時也概括瞭解在工業工程教育技術領域的未來走向。除
此之外，藉由此次出席國際會議的機會時認識不少國內外學術上的友人。 
三、考察參觀活動 
本次會議是在新加坡的 Furama RiverFront飯店舉行，在研討會議程閒暇時間本
人搭乘新加坡地鐵到新加坡最具有盛名之國立新加坡大學(National University of 
Singapore, NUS)以及新加坡管理大學(Singapore Management University, SMU)的校園
參觀。 
四、建議 
無 
五、攜回資料名稱及內容 
IIE Asian Conference 2012研討會論文集一冊以及論文光碟片一片 
六、其他 
本次出席會議的國內外學者專家非常踴躍一共計有數百人之多，會議期間除了
在學術心得交換之餘，也是聯繫的橋樑與開始。出席這次國際會議讓本人更具有國
際觀，對於個人的視野與學術見識更加寬廣，對於提昇自我的研究能力也有相當大
的幫助。 
 
 
 
  
 
405 Havelock Road Singapore 169633  
Tel: (65) 6333 8898 Fax: (65) 6733 1588 Website: http://www.furama.com/riverfront/ 
  
Reviewer 1 
Comments Please include a review of other non-MIP approaches to solve the problem. As MIP is developed to 
solve to optimality, while heuristics such as the PSO is not, MIP should take a longer time than the 
PSO. The strength and justification of using a PSO approach should be how it outperforms other 
heuristics algorithms, and not simply how it take a shorter time than MIP approach. 
  
Reviewer 2 
Comments This paper considers a very traditional problem. Although nothing seems new, the PSO results 
could be the value of this paper. Numerical examples show that for small size of problems the 
proposed PSO algorithm is quite good. 
  
Office of Professional Engineering and Executive Education 
National University of Singapore 3 Engineering Drive 2 Blk E1 #05-15 Singapore 117578  
Tel: +65 6516 5113 Fax: +65 6874 5097 Email: IIEAC2012@nus.edu.sg Website: http://www.ise.nus.edu.sg/iie 
b頁 2 - 2(B)
2012/4/11
  
 
405 Havelock Road Singapore 169633  
Tel: (65) 6333 8898 Fax: (65) 6733 1588 Website: http://www.furama.com/riverfront/ 
  
Reviewer 1 
Comments Section 4: ILOG ver. 3.7 software - what do you mean? Do you mean CPLEX or OPL studio?  
The time taken using the heuristics is very short - 0.000 seconds? Did you try implementing a 
longer running heuristics in order to get a better APD? If such a low APD can be found in such a 
short time, can it be that the original problem is an easy one? 
  
Reviewer 2 
Comments This paper shows a variety of comparisons among 2 machine priority rules and 14 job dispatching 
rules. No matter how many rules are concerned, the results could be ad hoc if they cannot be 
justified. Hope authors can further work on this justification issue and make this paper as a 
journal paper. 
  
Office of Professional Engineering and Executive Education 
National University of Singapore 3 Engineering Drive 2 Blk E1 #05-15 Singapore 117578  
Tel: +65 6516 5113 Fax: +65 6874 5097 Email: IIEAC2012@nus.edu.sg Website: http://www.ise.nus.edu.sg/iie 
b頁 2 - 2(B)
2012/4/11
 
2. Mixed integer programming model 
This section describes a mixed integer programming model to formulate the hybrid flow shop with identical 
parallel machine per stage. Before presenting the model, notation including parameters and variables are 
introduced first.  
 
2.1 Parameters 
n: Number of jobs. 
k: Number of stages. 
im : Number of identical machines at stage i, i=1,2,…,k. 
ijp : Processing time of job j at stage i, i=1,2,,…,k; j=1,2,…,n. 
ibjs : Required setup time of job j immediately processed after job b at stage i, i=1,2,,…,k; b=0,1,2,…,n;  
j=1,2,…,n. 
M:  A large integer number 
 
2.2 Variables 
ijC : The completion time of job j in stage i; i=1,2,,…,k; j=1,2,…,n. 
iabjX : 1, if job j is processed after job b on machine a in stage i, 0 otherwise. ki ,...,2,1= ; ima ,...,3,2,1= ; 
nb ,...,2,1,0= ; nj ,...,3,2,1=   
iabjY : 1, if job j is processed immediately after job b on machine a in stage i, 0 otherwise. ki ,...,2,1= ; 
ima ,...,3,2,1= ; nb ,...,2,1,0= ; nj ,...,3,2,1=   
iajZ : 1, if job j is processed on machine a in stage i, 0 otherwise. ki ,...,2,1= ; ima ,...,3,2,1= ; nj ,...,3,2,1= . 
maxC : The maximum completion time of jobs in the last stage k, i.e, makespanCC kj == )max(max  
iaN : Number of jobs processed on machine a in stage i, ki ,...,2,1= ; ima ,...,3,2,1= . 
The mixed integer programming formulation is as follows: 
max. CMin  (1) 
Subject to 
iabjiabj XY £ , 
"  ki ,...,2,1= ; ima ,...,2,1= ; nb ,...,2,1,0= ; nj ,...,2,1= ; jb ¹  (2) 
1
1
0 £÷÷
ø
ö
çç
è
æ
å
=
n
j
jiaY , "  ki ,...,2,1= ; ima ,...,2,1=  (3) 
1
1
=÷÷
ø
ö
çç
è
æ
å
=
im
a
iajZ , "  ki ,...,2,1= ; nj ,...,2,1=  (4) 
÷÷
ø
ö
çç
è
æ
å=
=
n
j
iajia ZN
1
, "  ki ,...,2,1= ; ima ,...,2,1=  (5) 
ia
n
j
iabj NX £å
=1
,  
"  ki ,...,2,1= ; ima ,...,2,1= ; nb ,...,2,1,0= ; nj ,...,2,1= ; jb ¹  (6) 
( ) 1£+ iajbiabj XX ,         
"  ki ,...,2,1= ; ima ,...,2,1= ; nb ,...,2,1,0= ; nj ,...,2,1= ; jb <  (7) 
ï
î
ï
í
ì
£++-+
³+-+
0)1()(
0)(2)(
iajbiabjiajiab
iajbiabjiajiab
XXZZ
XXZZ
,     
"  ki ,...,2,1= ; ima ,...,2,1= ; nb ,...,2,1,0= ; nj ,...,2,1= ; jb <  (8) 
00 =- jiaiaj XZ , " ki ,...,2,1= ; ima ,...,2,1= ; nj ,...,2,1=  (9) 
algorithm to solve the hybrid flow shop scheduling problem with sequence-dependent setup times. A typical 
PSO consists of the following steps: 
1. Generation of an initial particle with position and velocity by random, 
2. Evaluation of the fitness value of each particle in the swarm, 
3. Adjustment position of each particle by changing its velocity, and 
4. Repetition of steps 2 and 3 until the termination conditions are met. 
 
The following will provide each part of the proposed PSO for solving the considered problem. 
 Particle representation 
Random key representation is one of well-known encoding schemes for evolutionary algorithms such as genetic 
algorithms (GAs), and it is suitable to PSO to generate each particle flying in n-Dimensional space. As a result, 
the position and velocity of each particle in the n-Dimensional space is defined as ),,,( 002
0
1
0
iniii xxxX K=  and 
),,,( 002
0
1
0
iniii vvvV K= , where 
0
ijx  and 
0
ijv  respectively represent the continuous position and velocity values of 
the ith particle with respect to the jth job in initial iteration. The initial values of 0ijx  and 
0
ijv  are randomly 
generated according to randxxxxij ´-+= )( minmaxmin
0  and randvvvvij ´-+= )( minmaxmin
0 , where 0.5max =x , 
0.5min -=x , 0.5max =v , 0.5min -=v , and rand  denotes a random number uniformly distributed in [0, 1]. 
 Fitness of particles 
In this study, the fitness value of a particle is defined by the makespan. To obtain the objective value, firstly the 
smallest position value (SPV) rule is used to transfer each particle to a job sequence, and secondly the ordered 
jobs is assigned to the available machines in the first stage, and then the jobs are sequentially assigned to the 
available machines for stage 2 to stage k according to two decoding schemes including permutation scheme and 
list scheduling. Permutation scheme assigns the jobs to available machines for stage 2 to stage k based on the 
sequence of jobs in the first stage, while list scheduling the jobs are assigned to the available machines 
according to the earliest completion time at previous stage 1-i . 
 Particle movement 
In the PSO, each particle continuously adjusts search direction by changing its velocity according to two factors, 
its own best previous experience (pbest) and the best experience of all other members (gbest). The former and 
the latter are named as the cognition part and social part. Different velocity updating equations have been 
developed in the literature, and the standard velocity updating equation is used in this paper. 
( ) ( )1221111 --- -+-+= tijijtijijtijtij xgbestrcxpbestrcwvv  
where w is the inertia weight used to control exploration and exploitation. A higher value of w prevents 
particles from getting trapped into local optimal. Contrarily, a smaller value of w  forces them to exploit under 
the same search area. Constants 1c  and 2c , cognitive and social parameters respectively, are used to determine 
whether particles prefer to move closer to the pbest or gbest positions, while 1r  and 2r  are uniform random 
numbers between 0 and 1. 
 
Once the velocity tijv  of each particle is updated for iteration t, each particle’s new position is generated by 
t
ij
t
ij
t
ij vxx +=
-1 , where 1-tijx  is the position of the particle i at the previous iteration. 
 Stopping criterion 
In this study, we use the maximum number of iterations (MaxIter) as the stopping criterion, and MaxIter=1000. 
Thus, the algorithm terminates when the number of iteration is equal to 1000.  
 
4. Computational results 
The proposed PSO and MIP model are respectively coded using C++ and CPLEX languages, and tested on a 
number of problems to examine the performance in the environment of a LINUX (Ubuntu 10.10.1) with AMD 
Phenom 9550 processor (4 GB RAM).  
 
4.1. Data generation 
The data parameters are extracted from the study of Kurz and Askin [7] which considered some jobs can skip 
some stages. In our data files the integer processing time and integer setup times were generated using a uniform 
random distribution, thus, the processing time for job j and the setup time for job j processed immediately after 
job i at stage k were obtained: 
=kjp Discrete uniform (20, 100) 
5. Conclusion 
The main contribution of this paper is to formulate the hybrid flow shop problems with sequence-dependent 
setup times and to develop the PSO algorithms with different decoding schemes to solve the considered 
problems efficiently. The result showed that approximately 50% of the PSO-based heuristic’s solutions were 
found to be optimal for 6-job-2-stage problems. In addition, the results also suggested hat the initial particles 
had slight effect on final solution quality in the HFSP with SDST environment. This research may be extended 
in the direction of using different neighborhood generations and VNS to further improve the solutions obtained 
by the PSO algorithms, and consider different decoding scheme for the problems. 
 
Acknowledgements 
This paper was supported in part by the National Science Council, Taiwan, ROC, under the contract NSC 100-
2410-H-238-005. 
 
References 
1. Gupta, JND., 1988, “Two-stage hybrid flowshop scheduling problem,” Journal of Operational 
Research Society, 39, 359-364. 
2. Liu, B., Wang, L., and Jin, Y.H., 2007, “An effective PSO-based memetic algorithm for flow shop 
scheduling,” IEEE Transactions on Systems Man and Cybernetics Part C-Applications and Reviews, 
37,18-27.  
3. Tasgetiren, M.F., Liang, Y.C., Sevkli, M., and Gencyilmaz, G., 2007, “A particle swarm optimization 
algorithm for makespan and total flowtime minimization in the permutation flowshop sequencing 
problem,” European Journal of Operational Research, 177, 1930-1947.  
4. Jarboui, B., Ibrahim, S., Siarry, P., and Rebai, A., 2008, “A combinational particle swarm optimization 
for solving permutation flowshop problems,” Computers and Industrial Engineering, 54, 526-538. 
5. Sha, D.Y., and Hsu, C.Y., 2006, “A hybrid particle swarm optimization for job shop scheduling 
problem,” Computers and Industrial Engineering, 51, 791-808. 
6. Kennedy, J., and Eberhart, R., 1995, “Particle swarm optimization,” Proceedings of the IEEE 
International Conference on Neural Networks, 1942-1948. 
7. Kurz, M.E., and Askin, R.G., 2004, “Scheduling flexible flow lines with sequence-dependent setup 
times,” European Journal of Operational Research, 159, 66-82. 
problem is to construct a schedule so that the total weighted completion time of jobs (i.e., å )(SCw jj ) is 
minimized. Using well-known three-field notation [3], this problem can be denoted by 
å jjjk CwrPmPmOk ||),...,( 1 . 
 
In the literature, most studies have investigated classical open shop problem in which there is only single 
machine in each stage, most open-shop problem is NP-hard problem in the ordinary sense. For example, 
Gonzalez and Sahni [4] that max|| COk  is NP-hard for any given 3³k , the multiprocessor two-stage open-shop 
problem in which there are two machines in one stage and only a single machine in the other stage is also NP-
hard [5]. Variant of the open shop problems with parallel machine problems is rarely considered. So far we are 
aware of only four papers on the open shop problems with parallel machines. Lawler et al. [6] considered three 
kinds of the preemptive version of the open shop problem with parallel machines, and derived polynomial time 
algorithm to minimize makespan. Schuurman and Woeginger [5] dealt with the non-preemptive variant with 
minimizing makespan. They derived two approximation algorithms for the open shop problems with parallel 
machines. Naderi et al. [7] consider the open shop problems with parallel machines to minimize total 
completion time. They developed a mixed integer programming (MIP) model and a memetic algorithm wherein 
a simulated annealing algorithm is used as local search engine. Shiang et al. [1] first modeled the LED sorting 
system as an open shop problem with parallel machines. They constructed a mixed integer programming model 
and developed five dispatching plans for the Arena simulation models individually. Three of the above four 
studies is to minimize makespan, only one concern minimizing the total completion time. In this paper we focus 
on minimizing the total weighted completion time for å jjjk CwrPmPmO ||),...,(4 1 problem because in real 
production floor all jobs are seldom ready for processing at a time, in addition, jobs usually have different 
importance specified by weights. For the first considered problem, we construct a mixed integer programming 
model to present the difficulty of the problem; in addition, we proposed two heuristic algorithms based on dense 
schedule to efficiently obtain a feasible solution.  
 
The rest of this paper is organized as follows. In Section 2, we develop the mixed integer programming model 
for the problem. In Section 3, we introduce the proposed heuristic algorithms. Section 4 is devoted to twenty 
instances to examine the proposed algorithms. Finally, section 5 summarizes the concluding remarks. 
 
2. Mixed integer programming model 
In this section, we propose a mixed integer programming model to formulate the open shop problem with 
parallel machines. Although this model might not be an efficient solution for all problems, it is a nature way to 
specify explicitly and precisely all characteristics of a problem and obtain optimal solution for small problems. 
Before presenting each model, we need to introduce the notation including parameters and variables used in the 
model as follows: 
 
 Parameters: 
n:  number of jobs 
s:  number of stages 
:km  number of machines at each stage k, sk ,,2,1 K=  
jr :  release time of job j, nj ,,2,1 K=  
jkp : processing time of job j at stage k, nj ,,2,1 K= ; sk ,,2,1 K=  
 
 Variables: 
jklX : 1 if job j is processed at stage k before than stage l and 0 otherwise, nj ,,2,1 K= ; sk ,,2,1 K= ; 
sl ,,2,1 K=  
ijkgY : 1 if job i is processed before job j for machine g at stage k and 0 otherwise, ni ,,2,1 K= ; nj ,,2,1 K= ; 
sk ,,2,1 K= ; kmg ,,2,1 K=  
jkgZ : 1 if job j is processed on machine g at stage k and 0 otherwise, nj ,,2,1 K= ; sk ,,2,1 K= ; 
kmg ,,2,1 K=  
jC :  the completion time of job j, nj ,,2,1 K= . 
jkC : the completion time of job j at stage k, nj ,,2,1 K= ; sk ,,2,1 K= . 
 
The considered problem is formulated as follows: 
Step 4: If }{f=CJS  then timer=timer+1 and return to Step 1. Otherwise, select one job from CJS  set 
according to job priority rules and then assign the selected job into the selected machine. 
Step 5: Update available time of the selected machine, ready time of the assigned job, }{f=CMS , and 
}{f=CJS . 
Step 6: If }{f¹UJS  then return to Step 1. Otherwise stop the procedure and output the value of total weighted 
completion time. 
 
Table 1. Fourteen dispatching rules 
No. Dispatching rules  No. Dispatching rules 
1 The job with the smallest processing time 
is first selected 
 8 The job with the largest ijij wp value is first 
selected 
2 The job with largest processing time is 
first selected 
 9 The job with the smallest total processing time 
is first selected 
3 The job with the smallest weight value is 
first selected 
 10 The job with the largest total processing time is 
first selected 
4 The job with the largest weight value is 
first selected 
 11 The job with the smallest å´ jj pw value is 
first selected 
5 The job with the smallest ( ijij pw ´ ) value 
is first selected 
 12 The job with the largest å´ jj pw value is first 
selected 
6 The job with the largest ijij pw ´  value is 
first selected 
 13 The job with the smallest jj wpå value is first 
selected 
7 The job with the smallest ijij wp value is 
first selected 
 14 The job with the largest jj wpå value is first 
selected 
 
4. Results 
In this section we use 20 instances with n=5 and k=4 to compare the 28 heuristic algorithms with the model. 
Processing times were generated randomly from the range of (1, 20), the release time and weight of jobs were 
generated randomly from the range of (0, 20) and (1, 9), respectively. The number of machine for each stage is 
generated randomly from the range of (1, 3). The model is implemented by ILOG ver. 3.7 software, and all 
heuristic algorithms are coded in C++, running on LINUX (Ubuntu 10.10.1) with an AMD Phenom 9550 
processor (4GB RAM).  
 
The results obtained by using the model and each heuristic algorithm are presented in Table 2. The results are 
presented in terms of average percentage deviation (APD) of the solution from the optimal solution obtained by 
the model, number of optimal solution found and average computation time obtained by each method. A01 
indicate that the machine priority rule A and the first dispatching rule listed on Table 1 are adopted in the 
heuristic algorithm. 
 
From Table 2, the mixed integer programming model obtains 20 optimal solutions with an average 
computational time of 40221.456 seconds (about 11 hours).  Each APD values obtained by the algorithm with 
machine priority rule B are better than that with machine priority rule A, and the mean APD is smaller (5.036%). 
Algorithm B13 adopting the machine priority B and job dispatching rule 13 (The job with the smallest 
jj wpå value is first selected) outperforms all other heuristic algorithms with respect to APD value. The 
results were expected because both machine priority rule B and job dispatching rule 13 are benefit to minimize 
the total weighted completion time.  
 
5. Conclusion 
This paper addressed the open shop problem with parallel machine and dynamic job arrival. This problem is 
motivated by scheduling of the LED sorting section and has a high practical value. We proposed a constraint 
programming model for the first addressed problem, and developed different heuristic algorithms with two 
machine priority rules and 14 dispatching rules based on the concept of dense schedule. Based on the results 
obtained by comparing the model with the proposed algorithms, the algorithm using machine priority rule B and 
dispatching rule 13 outperformed all other algorithms. This finding can be applied for developing other 
metaheuristic algorithms such as simulated annealing (SA), genetic algorithm (GA) and particle swarm 
optimization (PSO) in the further. 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/07/17
國科會補助計畫
計畫名稱: 具有平行機台的開放型流程之生產排程研究—以LED製造廠中晶粒分類揀選製
程為例(I)
計畫主持人: 周富得
計畫編號: 100-2221-E-231-007- 學門領域: 生產系統規劃與管制
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
