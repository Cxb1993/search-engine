I. INTRODUCTION 
As SoC becomes more and more complicated, the SoC 
could encounter the reliability problem due to the 
increased likelihood of faults or radiation-induced soft 
errors especially when the chip fabrication enters the very 
deep submicron technology [1]-[3]. Thus, it is essential to 
perform the FMEA procedure to locate the weaknesses of 
the system and provide the practical fault-tolerant 
strategies to improve the reliability [4]. However, due to 
the high complexity of the SoC, the incorporation of the 
FMEA procedure and fault-tolerant demand into the SoC 
will further raise the design complexity. Therefore, we 
need to adopt the behavioral level or higher level of 
abstraction to describe/model the SoC, such as using 
SystemC, to tackle the complexity of the SoC design and 
verification. An important issue in the design of SoC is 
how to validate the system reliability as early in the 
development phase to reduce the re-design cost. As a 
result, a system-level dependability verification platform 
is required to facilitate the designers in assessing the 
dependability of a system with an efficient manner. 
Normally, the fault injection approach is employed to 
verify the robustness of the systems.  
Most of the previous fault injection studies focus on 
the VHDL design platform, whereas only a few works 
[5]-[9] address the fault injection issue in SystemC design 
platform. In our previous paper [7], we proposed a fault 
injection methodology for cycle-accurate register-transfer 
level (RTL) and compared the results of injection 
campaigns with the outcomes derived from the VHDL 
RTL. In [5], [6], the authors proposed a fault injection 
framework that is applicable to functional level and 
transaction layer 1 in SystemC. The paper [9] 
characterized the susceptibility of AMBA bus on errors in 
various signals over different transactions in SystemC 
cycle-accurate level.  
As we know, the system bus, such as AMBA AHB, 
provides an integrated platform for IP-based SoC. 
Apparently, the robustness of system bus plays an 
important role in the SoC reliability. So, performing the 
system bus FMEA is imperative to validate the reliability 
of SoC. In previous related work, the issue of system bus 
fault injection in SystemC design platform is rarely 
addressed except the work proposed in paper [9]. 
However, the approach presented in [9] is dedicated to 
cycle-accurate level, which may still be time-consuming 
in fault injection and simulation runs. In addition, the 
previous fault injection methodologies are all based on 
time-driven approach to decide when to inject a fault. 
While the modeling levels of systems come to the 
untimed functional transaction-level modeling (TLM) and 
timed functional TLM, the time-driven fault injection 
approach is no longer applicable to these levels or 
becomes improper. Instead, the event-driven fault 
injection approach is effective in keeping the fault 
injection easier and efficient at untimed/timed functional 
TLM, especially in the performing of system bus FMEA.  
The types of transaction in the bus normally consist of 
the single-read, single-write, burst-read and burst-write 
operations. Each type of bus transaction can represent a 
possible failure mode of the system bus. If we want to 
analyze the effect of a specific system bus failure mode, 
like burst-read failure, on the system behavior, the event 
of fault triggers in this case can be set as burst-read 
operation of bus transactions. In other words, the time 
instant of fault injection is related to the occurrence of the 
burst-read event in the bus transactions. It is clear that 
using the event-driven fault injection can easily produce 
the desired failure mode and effectively characterize its 
effect on the system functionality. Compared to 
event-driven fault trigger, the time-driven approach 
suffers from the poor injection effectiveness for a specific 
failure mode and its effect analysis, because the 
time-driven fault trigger cannot guarantee the injected 
faults that will cause the desired failure mode, such as 
burst-read failures.  
The principal goal of this work is to propose an 
effective system bus event-driven fault injection 
framework in SystemC design platform at the abstraction 
levels of untimed/timed functional TLM to assist the 
reliability assessment. The advantages of our fault 
injection approach are two folds: one for simulation speed 
and the other for injection effectiveness. The remaining 
report is organized as follows. In Section II, the SystemC 
untimed/timed functional TLM and the concept of 
Transactor are presented. We propose a system bus fault 
injection methodology in Section III. A fault injection tool 
is demonstrated in the following section. We show some 
experimental results in Section V. The conclusions and 
future work appear in Section VI. 
II. SYSTEMC UNTIMED/TIMED FUNCTIONAL TLM 
SystemC, a system-level modeling language, provides 
a wide variety of modeling levels of abstraction and 
allows us to model a system utilizing one or a mixture of 
various abstraction levels. It is quite common that the 
modules within a SoC are modeled at different levels of 
abstraction using SystemC design language. The primary 
goal of TLM is to reduce the modeling complexity and 
increase the simulation speeds, while offering enough 
accuracy for the design task. The Open SystemC 
Initiative (OSCI) categorizes the TLM in SystemC into 
the following levels: Programmers View (PV), 
Programmers View with Timing (PV+T) and Cycle 
Callable (CC), where the modeling level of abstraction 
and simulation speed is from high to low among these 
three levels. The PV level is equivalent to untimed 
functional TLM and PV+T level is the level of timed 
functional TLM. 
We adopt the CoWare Platform Architect [10] and 
AMBA bus [11] to demonstrate our system bus fault 
injection approach and its applications. The Platform 
information, such as data and protocol signals, can be 
achieved in the similar way. The information for each 
class of bus transaction is gathered to a profile for each 
master during the fault-free simulation campaign.  
While (1) { 
int Master_ID;  //multiple masters, each given an 
unique number; 
fstream profile_master_1(“Data1.txt”,ios::app);  
//gathering address information of master 1 to a 
profile; 
fstream profile_master_2(“Data2.txt”,ios::app);   
// gathering address information of master 2 to a 
profile; 
port.getReadDataTrf()  //check whether the bus is 
performing read transaction or 
not  
Master_ID =port.getMasterId() //which master is 
using bus; 
If (Master_ID == 1){ 
profile_master_1<< port.getAddress()<<endl;  
//acquire the address and write it to the operational 
profile of master 1 ;}                    
If (Master_ID == 2){ 
profile_master_2<< port.getAddress()<<endl; 
//acquire the address and write it to the operational 
profile of master 2 ;}  
    Protocol transformation;  //original function of 
Transactor 
    send Transfer(); //call function of set/get read 
data; 
    profile_master_1.close(); 
    profile_master_2.close(); 
   wait();  
} 
Next, we discuss the relationship between event and 
operational profile. As mentioned before, the operational 
profiles are utilized to help us creating the desired events 
that decide the time instant of fault injection. Fig. 4 
exhibits the event tree and its possible combinations. 
Basically, the types of transaction in the bus are ‘read’ 
and ‘write’ that are the first level of events as shown in 
Fig. 4. The second level of events includes ‘burst’ and 
‘single’ data transactions. The third level of events 
consists of ‘data’, ‘address’ and ‘burst length’ etc. Our 
event-driven fault trigger methodology provides diverse 
sorts of events. The types of event can be a single event 
or the combination of events as illustrated in Fig. 4. We 
use Fig. 4 to explain the event concept. For bus 
transaction, single event could be either ‘read’ bus 
transaction or ‘write’ bus transaction, which pertain to the 
first level of events. The event combinations can be 
formed either from first-level events with second-level 
events or from first, second then third-level events in 
sequence. To support the event-driven fault trigger, the 
function of OPM needs to create the desired operational 
profiles, which furnish the information for event 
formation.  
 
  (a)      (b)         (c) 
Fig. 3. ‘Transactor’, OPM and FIM functions. 
 
Fig. 4. Event tree and combinations. 
We give an example of event combination and its 
application below: 
Example 1: From Fig. 4, we can construct an event 
combination using first-level events coupled with 
second-level events, like ‘read’ associated with ‘burst’ to 
compose a new sort of event, termed as burst-read event. 
If we treat the bus as a component, the failure mode of the 
bus could be ‘single-read’, ‘single-write’, ‘burst-read’ and 
‘burst-write’ failures. The burst-read failure means that 
the bus failure occurs during the burst-read transactions. 
 
Fig. 5. The operational flow of fault injection tool. 
Table I means the total number of ‘burst-read’ bus 
transactions occurs during the benchmark execution. 
The ‘hitting rate of fault injection’ represents the 
probability of faults injected that cause the ‘burst-read’ 
failures. The results are derived from two thousand 
times of fault injections. It is evident that the hitting 
rate of fault injection for event-driven method is 100%, 
whereas time-driven method only has 5.25% and 6.75% 
for matrix multiplication and quicksort, respectively. 
The experimental results indicate that the event-driven 
fault injection approach is very suitable for the FMEA 
applications. 
TABLE I 
 THE COMPARISON RESULTS FOR TIME-DRIVEN AND 
EVENT-DRIVEN FAULT INJECTION APPROACHES 
Benchmark Matrix Quicksort 
Clock cycle 4370925 42703 
Burst-Read Count 421990 5443 
Hitting rate of fault injection 
(Event-driven) 100% 100% 
Hitting rate of fault injection 
(Time-driven) 5.25% 6.75% 
C. FMEA Experiment  
This experiment is a demonstration of employing the 
developed tool to perform the AMBA bus FMEA. The 
goal of this demonstration is to show the capability of 
the proposed fault injection methodology and tool. We 
use ‘50 ×50 matrix multiplication’ and ‘quicksort’ as 
our benchmark programs and choose ‘burst-read’ as the 
targeted failure mode. Therefore, the fault-triggering 
event is set as ‘burst-read’ bus transaction. The fault 
targets include ‘address’, ‘data’ and ‘access size’ signals. 
For each injection campaign, a single-bit-flip fault was 
injected into the fault targets of AMBA bus on the 
happening of a specific burst-read transaction. The fault 
duration sustains the length of one bus transaction. This 
experiment is to investigate the effect of ‘burst-read’ 
failure mode of AMBA bus on the system behaviors. 
There are five classes of system outcomes [9]: fatal 
error (FE), silent data corruption (SDC), correct 
data/incorrect time (CD/IT), deadlock (DL) and no 
effect (NE) appeared in the injection campaigns. The 
system crash or process hang are classified into fatal 
error; silent data corruption is caused by the errors that 
remain unnoticed until the end of the simulation but 
provide incorrect results; one kind of errors which 
won’t affect the correctness of final results but changes 
the program execution time is classified into correct 
data/incorrect time; deadlock is the errors that lead the 
system to get into no progress states; no effect is the 
errors which have no impact on the system operation at 
all. 
The results of each row listed in Table II were 
derived from one hundred injection campaigns 
respectively. From the results of Table II, we can see 
that for example an AHB address fault occurring during 
‘burst-read’ bus transaction results in 21% FE, 44% 
SDC, 6% CD/IT, 1% DL and 28% NE for matrix 
multiplication benchmark. The meaning of data for 
other rows in Table II is similar to the row of HADDR 
fault. Table III generated from the data of Table II 
illustrates the effect of ‘burst-read’ failures on the 
system operation, i.e. the occurring probability of FE, 
SDC, CD/IT, DL and no effect when the system 
encounters the ‘burst-read’ failures. We note that the 
FMEA results are program-variant as evidenced in 
Table III. It is clear that the system is more sensitive to 
errors while system executes the matrix multiplication 
program. The preliminary results obtained indicate that 
the attributes of benchmarks have a significant impact 
on the FMEA results.  
From the demonstration of this experiment, our 
proposed fault injection methodology and tool for 
assisting the performing of FMEA can be validated. In 
the near future, we will further provide more complete 
FMEA results with more benchmarks and more 
fault-targeted signals in AMBA bus. The effect of 
attributes of benchmarks on FMEA results will be 
discussed in depth. We will also investigate how to 
enhance the efficiency of performing FMEA procedure 
by conducting the fault injection (component’s failure 
mode production) with different combination of events. 
TABLE II 
 FMEA DATA FOR ‘BURST-READ’ FAILURE MODE. (a) 
MATRIX MULTIPLICATION (b) QUICKSORT 
System failure FE SDC CD/IT DL NE 
HADDR fault 21% 44% 6% 1% 28% 
HRDATA fault 3% 45% 0% 1% 51% 
HSIZE fault 3% 43% 28% 1% 25% 
(a) 
System failure   FE SDC CD/IT DL NE 
HADDR fault 19% 12% 12% 1% 56% 
HRDATA fault 7% 17% 13% 2% 61% 
HSIZE fault 7% 21% 69% 0% 3% 
(b) 
TABLE III 
 THE PROBABILITY OF FE, SDC, CD/IT, DL AND NE FOR 
VARIOUS BENCHMARKS 
  FE SDC CD/IT DL NE 
Matrix 9% 44% 11.3% 1% 34.7% 
Quicksort 11% 16.7% 31.3% 1% 40% 
Matrix + 
Quicksort 
10% 30.4% 21.3% 1% 37.3% 
VI.  CONCLUSIONS AND FUTURE WORKS 
In this work, a system-bus fault injection 
methodology in SystemC design platform is presented, 
and a fault injection tool is developed for performing 
the FMEA of SoC platform. The main contributions of 
this study are to raise the level of fault injection to the 
untimed/timed functional TLM and devise an effective 
 a microprocessor is and (ii) rank of components by their 
contribution to the microprocessor’s vulnerability. Thus 
this model must be able to sincerely reflect the 
influence of each component’s malfunction to whole 
microprocessor. In the following section, this model is 
proposed, and then in Section 3 some experimental 
results for a VLIW processor are provided and 
discussed. 
2. Estimation Model for Microprocessor’s 
Vulnerability 
For simplifying the estimation model, two hypotheses 
are given below: 
(a). The circumstances of unexpected transmissions 
are regarded as equivalent to components’ 
malfunction and therefore our estimation model 
only takes the components into account. Thus 
components which are assumed to be critical must 
be collected into a set called component set {C1, 
C2, ..., Cn}; other non-critical components are 
viewed as error-free. If designers do better at this 
step, then our model have more precise results. 
(b). The single-fault assumption is adopted. 
In this work, the vulnerability of a microprocessor, 
VMP, is defined as the probability that an inner error 
ultimately results in a failure of this microprocessor. We 
can use VMP to model the entire process from a 
component’s error to whole microprocessor’s failure. (A 
similar estimation model can be found in [6] but it is for 
the AMBA architecture.) For this end, we defined three 
parameters: ARCi, UCi and SESCi for each component Ci 
in component set — where i is from 1 to n. ARCi is the 
area ratio of Ci, UCi is the frequency of activating Ci, 
also named Ci’s utilization ratio and SESCi — termed 
Ci’s soft error sensitivity — defined as the probability of 
system failure caused by an error emerged form Ci and 
the error has effectively propagated to the system. Their 
values can be derived by equations (1) ~ (3): 
(1)                
   
   
 
1
∑
=
= n
i
i
i
C
Ccomponentofarea
CcomponentofareaAR i  
(2) 
 programsbenchmarkcycles of execution 
nt Cng componecycles usiexecution U iCi =  
(3) 
   
 
propagatedyeffectiveland
Ccomponent rged from errors eme
r failedroprocessose the micerrors cauSES
i
Ci
=
 
Firstly, the area of a component will dominate the 
probability that particles strike it, so ARCi can be used to 
represent the error rate of Ci. Then, assumed the striking 
triggers an error emerged on Ci, this error will still be 
ineffective if Ci is not used presently, thus UCi is 
required to model the probability of error propagation. 
Moreover, even an error has been propagated, it may 
not cause the microprocessor failed. For example, an 
error which propagates to the branch predicting unit 
won’t have influence on consequences of benchmark 
programs. Therefore how this error propagates is the 
last factor which needs to be considered and modeled 
by SESCi. Both of UCi and SESCi are very relevant to the 
characteristic of benchmark programs as observed from 
Table 1. To identify the component which is most 
vulnerable, we define another parameter VCi which is 
the product of three factors above. Finally, we can 
compute the microprocessor’s vulnerability by the 
summation of VCi as shown in the equation (4): 
∑
=
××==
n
i
CCCCCMP iiiii
SESUARVVV
1
  where,
 
(4) 
3. Experimental Results 
To derive SESCi, we have conducted a set of error 
injection simulations on the RTL model of the VLIW 
processor proposed in [5] (but without involving the 
fault tolerant components in the execution stage). For 
each component in the component set — assigned as 
{ALU_A, ALU_B, ALU_C, control unit, forwarding 
unit, branch unit, instruction dispatch unit} — 2000 
simulations are performed and the processor is 
monitored to gather the statistic data. Besides, an extra 
simulation without error injection is performed to 
derive the UCi. It is worthy to note that the storages such 
as the instruction cache and data cache are not put into 
this set. The reason is that their vulnerability has been 
finely investigated in many literatures (e.g. [2-4]), so 
we place our interests on the other components. 
However, our estimation model is still applicable to 
storage components. Experimental results shown in 
Table 1 are preliminary with two benchmark 
programs — matrix multiplication and IDCT. 
According to Table 1, the VMP of VLIW is 0.4658. 
From Table 1, not only the most vulnerable component 
can be identified by the rank, but also the effect of the 
three factors on the vulnerability can be analyzed. It is 
very interesting that ALU_B, ALU_C and branch unit 
are first three components with highest soft error 
sensitivity but their rank of VCi is totally inversed. On 
the contrary, the forwarding unit has smallest SESCi but 
largest VCi. This dramatic reverse proves that none of 
ARCi, UCi and SESCi can be neglected. This is a first 
confirmation of our estimation model for helping us 
precisely identify the vulnerable components. 
Acknowledgements. The authors acknowledge the 
support of the National Science Council, Republic of 
China, under Contract No. NSC 96-2221-E-216-006. 
References 
[1] F. Irom et al, “Single-Event Upset in Evolving 
Commercial Silicon-on-Insulator Microprocessor 
Technologies,” IEEE Trans. on Nuclear Science, 
Vol. 50, No. 6, pp. 2107-2112, December 2003. 
[2] S. Kim and A. K. Somani, “Soft error sensitivity 
characterization for microprocessor dependability 
 
 Self-Evaluation of Research Results: 
z The above report summarizes the second-year results accomplished from this three-year research 
project. The extended versions of the results will be submitted to be considered for journal publication. 
In the first-year report, we stated: “We are going to develop a system-level fault-injection tool, which 
exploits the simulation-based fault injection scheme proposed in this research and can be installed in 
the CoWare Architect Platform. The tool takes the fault scenario description from the user and then 
automatically generates the system platform supplemented with the fault injection capability. This 
kind of fault injection tool can not only facilitate the failure mode and effects analysis (FMEA) and 
the fault-tolerant validation process, but raise the validation efficiency. The embedded fault-tolerant 
systems have found fertile ground in intelligent system applications, such as intelligent driver 
assistance system or intelligent robot system, which require a stringent dependability while the 
systems are in operation. Since more works depend on the intelligent machines, the reliability issue 
becomes more important than ever. The fault-tolerant verification platform developed from this 
research can be applied to the design and analysis of the fault-tolerant systems modeled at high level 
of abstraction to enhance the overall system dependability. The previous study for the fault injection 
approach mainly focuses on the VHDL modeling level and rarely discusses the fault injection in 
SystemC system-level design. We want to fulfill this lack.” The above statements describe the main 
research goal of this three-year project. From this report, it is evident that we definitely achieve the 
second-year goal with one extra supplement, i.e. software-implemented fault injection (SWIFI) 
technique. The SWIFI approach can enhance the injection capability and diversity for dependable 
IP-based SoC design platform.  
z However, the subjects expressed in our proposal are big and deserve to be further explored. The 
ongoing works are depicted as follows: First, we will port the Linux O.S. to CoWare Architect 
Platform and then the SWIFI technique will be added to the fault injection tool as well. As a result, our 
fault injection tool will provide more comprehensive injection functions. Second, we are going to 
develop a useful analysis tool with some analysis functions for validation of system robustness and 
dependability. Thirdly, we are building a more complex system using CoWare Architect Platform to 
completely study the effects of faults on system behaviors, and to detect the weaknesses in the 
reliability of the system. Finally, a fault-robust IP approach will be proposed to improve the system 
dependability by using the results of FMEA and safety-critical component’s analysis. The contribution 
of this research is to construct a complete and comprehensive dependability validation framework that 
consists of the system-level fault injection to study the system’s failure behavior, and to perform the 
FMEA procedure to locate the weaknesses in the reliability of the system, and to exploit the 
fault-tolerant design to effectively enhance the system dependability. 
Publications associated with the second-year research: 
z Kun-Chun Chang, Yi-Chinag Wang, Chung-Hsien Hsu, Kuen-Long Leu and Yung-Yuan Chen, “System-Bus 
Fault Injection in SystemC Design Platform,” 2nd IEEE International Conference on Secure System Integration 
and Reliability Improvement, pp. 211-212, July 2008. (EI) 
z Yung-Yuan Chen, Shu-Hao Hsu, and Kuen-Long Leu, “An Estimation Model of Vulnerability for Embedded 
Microprocessors,” 2nd IEEE International Conference on Secure System Integration and Reliability Improvement, 
pp. 224-225, July 2008. (EI) 
z Yung-Yuan Chen, Yi-Chiang Wang, and Jian-Min Peng, “SoC-Level Fault Injection Methodology in 
SystemC Design Platform,” Asia Simulation Conference 2008/ the 7th International Conference on System 
Simulation and Scientific Computing, pp. 1787-1794, October 2008. (EI) 
z 汪碩彥、陳永源， “利用軟體實踐錯誤注入進行嵌入式系統的強韌度驗證”, 2008 資訊系統應用學術研討
會, October 2008. 
 
 優點： 
z 以 ptrace 函式實踐的錯誤注入方式，只要稍做修
改即可移植到以 Unix 為主的系統上。 
z 由於使用了許多系統函式，來實踐錯誤注入程
式，因此產生的執行檔很小。 
z 在進行的實驗過程中，不需要更改目標程式的原
始檔案，也不需要對原始檔案重新編譯。 
缺點： 
z 錯誤注入只能針對目前作業系統在執行的行程。 
z 在同一時間只有一個行程能被注入錯誤。 
在[5]中，作者不但提出了 ptrace 函式可能會有的
優缺點，也詳細的介紹如何利用 ptrace 來進行錯誤注
入。 
在 [6] 中，作者利用硬體除錯介面 (On Chip 
Debug)，利用非侵入式的技術，利用軟體實踐錯誤注
入，透過內建除錯電路去存取系統內部的資訊，在不
用修改或中止目標程式的情況下來進行容錯能力的驗
證。但是如果我們的系統晶片在不具有內建除錯電路
的情況下，就無法執行同樣的錯誤注入。 
過去的研究都是在高效能的工作站或是具有內建
除錯電路的環境下進行實驗。由於應用的層面不同，
在嵌入式開發環境下，成本及系統資源有限(暫存器、
記憶體)的情況下，並沒有辦法完全以過去的軟體錯誤
注入方式來進行實驗。所以在本研究中我們以不用更
改系統內部資源為前提下，提出一個適用於一般嵌入
式系統的錯誤注入方法，而且利用此錯誤注入方法對
暫存器進行錯誤注入實驗。我們可以觀察暫存器單元
在軟性錯誤發生的情況下，那些暫存器具有較高的錯
誤敏感度，並且提出相關的失敗模式與效應分析數
據，告訴設計者不同的暫存器會有那些不同的失敗類
型。使得設計者可以在系統設計初期，對於較敏感的
元件加入適當的容錯機制，以提高系統的可靠度。 
2. 錯誤注入架構 
2.1 錯誤注入流程 
為了達成上述目標，我們利用具有超級用戶權限
(root)的 ptrace 系統函式，透過所設計的錯誤注入行程
(fault injection process)對目標行程(target application 
process)中所執行的測試程式進行監控及更改暫存器
或記憶體的內容，以此改變目標行程中程式運行的狀
態，達到系統晶片內部元件受到干擾時產生錯誤的目
的。在錯誤注入的過程中，錯誤注入行程利用 fork()
產生目標行程，而且設定為可被追蹤，使我們設計的
錯誤注入行程可以針對它進行錯誤注入，然後利用
ptrace 函式中的引數 GETREGS / SETREGS 及
PEEKTEXT / POKETEXT 去對目標行程的暫存器及記
憶體進行錯誤注入。當錯誤注入完成後再讓目標程式
繼續執行，最後比較執行的結果，看錯誤是否被激發，
再根據不同的暫存器特性做失敗類型的分類。 
2.2 錯誤注入環境 
我們利用上述的軟體實踐錯誤注入方法，在一個
嵌入式系統開發平台上進行錯誤注入實驗。為了收集
模擬時間及暫存器使用頻率等錯誤注入參數，首先要
執行一次無錯誤注入(fault free)模擬實驗。接下來即可
利用收集的結果決定錯誤注入的時間點以及為之後的
失敗類型分析時所用。在錯誤注入的過程中，我們利
用時間觸發(timing trigger)的方式，透過 setitimer()及
alarm()製作計時器。當計時器倒數為 0 時，錯誤注入
行程就會透過 kill()送出 ‘SIGINT’ 訊號暫停目標行
程，以進行錯誤注入。錯誤注入的值以亂數選擇 32 位
元的其中 1 個位元，進行位元翻轉(bit-flip)錯誤注入。
實驗流程如圖 1 所示，先執行(1)錯誤注入，利用 ptrace
系統函式呼叫核心 (kernel)，  (2)錯誤注入器 (fault 
injector)透過核心對目標行程進行錯誤注入，(3)目標行
程回傳錯誤注入結束狀態給錯誤注入器，透過回傳的
狀態我們再分析比較系統錯誤行為，找出對於錯誤較
敏感的元件。 
 
圖 1. Experimental Environment 
2.3 實驗設定 
由於軟性錯誤發生在暫存器的機率相當的高[2]，
所以我們針對系統晶片中的暫存器單元進行軟體實踐
錯誤注入，來驗證它的敏感度及可能會導致的失敗類
型。在本研究中我們利用嵌入式系統開發平台(CDK)1
作為錯誤注入的實驗環境，而整個開發平台包含
ARM926EJ-S的處理器及Open Linux 2.6.19 為核心的
作業系統[7]，並且選擇ARM 處理器使用者模式(user 
mode) 下 R0-R12 及 SP(stack pointer) 、 LR(linker 
register)、PC(program counter)、CPSR(Current Program 
Status Register)等暫存器，設計A、B兩個實驗來執行灌
入錯誤實驗。 
A. 我們利用30x30的矩陣相乘及500個數字的快速排
序兩個測試程式，測試系統晶片在執行一般程式時
發生錯誤可能產生的失敗類型，以及暫存器出錯可
能造成系統失敗的機率。最後再利用統計的結果，
分析出不同的失敗類型可能是哪些暫存器所造成。 
B. 分析當特殊用途(special purpose)暫存器(PC、
LR、SP)存取到錯誤的程式區段(code segment)、資料
區段(data segment)、周邊裝置(I/O)及作業系統核心
(Kernel)等非法空間時，系統可能產生的失敗類型。由
                                                 
1 Socle Technology – SoC Platform Solution and Service 
Company 
 14
 0.09
22.81
0.09 0.02
71.92
3.92 0.96 0.18
0
10
20
30
40
50
60
70
80
SC PH IL EDM CTCD CTID ITID ITCD
Failure Mode distribution for Q-sort
 
圖 5. Failure Mode distribution for Q-sort 
A-2 不同暫存器的系統失敗機率。 
從表 1 和 2 可以看出，每一個不同的暫存器，在
不同的測試程式下，發生錯誤所造成系統失敗的機
率。失敗機率(failure rate)主要是根據每一個暫存器發
生的失敗總數除以所注入錯誤總數所統計出來。在這
裡以 R11、SP、PC 錯誤被激發的機率最高。根據[8][9]，
R11 暫存器可以是儲存變數或者是指向堆疊框架(stack 
frame) 的框架指標(frame pointer)，當系統要存取區域
變數時需透過 R11 找出資料位置。所以當它出錯時會
造成失敗的機率也會相對較高。而 SP 主要是用來記錄
所儲存資料的位置，當 SP 出錯時抓取到錯誤的值也會
造成失敗的情形，而 PC 出錯則會使程式執行到錯誤位
址中的的指令或資料，使得系統出錯的比例升高。而
值得一提的是 CPSR，失敗的機率只有 3%-5%。這個
暫存器主要是儲存 ARM 處理器目前的狀態，在錯誤
注入的情況下失敗的類型都是落在 PH 中，並沒有因為
錯誤注入導致其改變處理器的模式位元(mode bit)中的
內容，而使程式進到錯誤的處理器模式下執行，產生
未知的後果。  
表 1.  Register Failure Rate in Matrix 
表 2. Register Failure Rate in Q-sort 
再從表 3 我們可以看出 R11、SP、PC 這三類暫
存器，在不同的測試程式下失敗的類型大部份都是落
在 PH 的比例較高。這也意味著當這三類暫存器出錯
時，大部份都會導致應用程式無法執行結束。因此系
統廠商可以在系統設計初期將這些數據列入考量。 
表 3. Failure Mode Distribution of R11,SP,PC 
最後我們利用實驗 B，將錯誤注入在特殊用途的
暫存器 SP、LR 及 PC 中，分析比較當這些暫存器存取
到錯誤的位址時(此錯誤的位址可能是落在 Code、
Data、I/O 或 Kernel 記憶體區段)，系統會產生怎樣的
反應。由表 4 我們可以看出，由於 LR 只有在程式執行
過程中，有呼叫副程式時才會使用到。而它可能因為
跳回錯誤的位置，而導致大部份都是落在 PH 的失敗類
型。由於整個程式中 LR 的使用頻率較低，所以造成系
統失敗的機率也會偏低；而 SP 及 PC 存取到錯誤的位
址時，有很高的機率會造成系統失敗。SP 因為存取到
錯誤區段，而導致程式變數或暫存器的值出錯，使得
它失敗的機率也會偏高；PC 所存的是下一道指令的位
址，所以 PC 執行到錯誤的程式區段時，會造成程式控
制流程的錯誤。由上述的統計分析發現，使用頻率越
高的暫存器，出錯的機率也會變高。透過失敗模式與
效應分析我們可以看出，在特殊用途的暫存器中，SP
及 PC 這兩類暫存器對於錯誤較為敏感。 
表 4. Failure Mode Distribution of Special Purpose 
Registers 
PC SC PH EDM IL CTCD CTID ITID ITCD
Code 0% 54.38% 1.25% 0% 16.46% 11.46% 6.04% 10.42%
Data 0% 100% 0% 0% 0% 0% 0% 0% 
I/O 0% 100% 0% 0% 0% 0% 0% 0% 
Kernel 0% 100% 0% 0% 0% 0% 0% 0% 
LR SC PH EDM IL CTCD CTID ITID ITCD
Code 0% 7.5% 0% 0% 90.5% 1% 0% 1% 
Data 0% 12% 0% 0% 88% 0% 0% 0% 
I/O 0% 9% 0% 0% 91% 0% 0% 0% 
Kernel 0% 9.5% 0% 0% 90.5% 0% 0% 0% 
SP SC PH EDM IL CTCD CTID ITID ITCD
Code 0% 98.5% 0% 0% 1.5% 0% 0% 0% 
Data 0% 77% 0% 5% 18% 0% 0% 0% 
I/O 0% 97% 0% 0% 3% 0% 0% 0% 
Kernel 0% 100% 0% 0% 0% 0% 0% 0% 
透過實驗 A 的結果，我們也可以反過來估算，不
同的失敗類型可能是由哪些暫存器所引起的。從圖 6
中可以看出，主要導致系統產生 SC 的暫存器以 R0 及
SP 最高。由於 R0 主要是儲存程式所使用的參數、計
算時暫存的值及運算後的結果，因此當 R0 及 SP 出錯
時，有很高的機率會造成 SC。 
Reg. &failure 
rate SC PH IL EDM CTCD CTID ITID ITCD
R11 0.2% 86% 0% 1.4% 4.6% 7.8% 0% 0%
SP 2% 61% 0% 0% 36.6% 0.4% 0% 0%
M
atrix 
PC 0.2% 72.8% 0% 0.2% 20% 4.8% 0% 2%
R11 0.2% 93.4% 0% 0.4% 4.4% 1.6% 0% 0%
SP 0% 69.2% 0% 0% 29.8% 1% 0% 0%
Q
-sort 
PC 0% 79.8% 0% 0% 15.8% 3.2% 0.2% 1%
Reg. failure rate Reg. failure rate Reg. failure rate
R0 18.60% R6 41.60% R12 10.80%
R1 11.80% R7 10% SP 63.40%
R2 20.80% R8 1.20% LR 8.40% 
R3 23% R9 7.20% PC 80% 
R4 10% R10 25.20% CPSR 3% 
R5 14.80% R11 95.40%   
Reg. failure rate Reg. failure rate Reg. failure rate
R0 19.8% R6 55.2% R12 1.8% 
R1 9.8% R7 12% SP 70.2% 
R2 13% R8 2.4% LR 12.4% 
R3 15.2% R9 6.8% PC 84.2% 
R4 36.4% R10 19.2% CPSR 5.4% 
R5 18% R11 95.6%   
 16
 [5]. Sieh, “Fault-Injector using UNIX ptrace Interface”, 
Internal Report 11/93, IMMD3, Universität 
Erlangen-Nürnberg, 1993. 
[6]. Fidalgo, A.V.; Alves, G.R.; Ferreira, J.M.” Real time 
fault injection using a modified debugging 
infrastructure” On-Line Testing Symposium, 2006. 
IOLTS 2006. 12th IEEE International, 
Page(s):6,10-12 July 2006. 
[7]. http://www.socle-tech.com.tw/ 
[8]. AAPCS, “Procedure Call Standard for the ARM 
Architecture”, April 2008  
[9]. ATPCS, “ The ARM-THUMB Procedure Call 
Standard”, 24 October, 2000 
[10]. Yasser Sedaghat, Seyed  Ghassem Miremadi, 
Mahdi Fazeli. “A Software-Based Error Detection 
Technique Using Encoded Signatures”. Symposium 
on Defect and Fault-Tolerance in VLSI Systems, pp. 
389-400, 2006 
 
 
 18
表  Y04 
報告內容應包括下列各項： 
一、 參加會議經過 
此會議是在希臘克里特島伊拉克利翁市舉行，作者是搭乘泰航班機到雅
典，再轉搭奧林匹亞航空到克里特島伊拉克利翁市。此第12屆WSEAS CSCC 
Multiconference 會議共有超過1300篇論文投稿，錄取641篇論文，錄取率
不到五成。在錄取641篇論文中，再精選43篇論文，直接推薦WSEAS 
Transactions 期刊的發表。作者所發表的論文，獲得最佳論文獎，並直接
被錄取期刊的發表。此會議的主題範圍包括了High Performance
Languages, Operating Systems, Hardware Engineering, Supercomputing, 
Parallel Computing Systems Architectures, Software Evaluation 
Standards, E-commerce, Interconnection Networks, Mobile Networks, 
Distributed Real Time Systems, Distributed Data Base, and other 
relevant topics and applications。參加的學者來自美國，台灣，日本，
馬來西亞以及歐洲的國家。第一天的下午有一場特別的專題演講，講題是
“Embedded Systems – Scientific Challenges and Work 
Directions＂  by Prof. Joseph Sifakis, Turing Award 2007, CNRS 
researcher and the Founder of Verimag laboratory, in Grenoble, 
France. 同時主辦單位特別邀請希臘國防部副部長，來頒發WSEAS Fellow
給Prof. Joseph Sifakis，來表彰其在 ｀Computer＇領域上的貢獻。作者
的論文被安排在第一天晚上報告，講題是  “Datapath Error Detection 
Using Hybrid Detection Approach for High-Performance 
Microprocessors”。  
二、 與會心得 
此 會 議 是 一 年 一 度  WSEAS 組 織 所 舉 辦 在 Circuits, Systems, 
Communication 和 Computers 方面的會議，今年是第 12 屆。可以透過此會
議與其他國家的學者討論交流，並且掌握最新的研究題材與研究結果。可
以用來檢視作者目前及未來的研究方向與課題的價值與重要性，對於以後
的研究有相當的幫助。另外也有機會請教一些國際級的學者，傾聽他們對一
些議題的意見及看法，可以幫助作者對一些困惑的地方及觀念做一澄清，
對於往後的研究也是有相當的幫助。研究心得是未來輻射線粒子，對於深次
微米製程的晶片影響力越來越大，造成暫時性錯誤的機率也越來越高。此
問題將會影響處理器及系統晶片的可靠度。所以有幾個問題值得進一步的探
討(針對深次微米製程的系統晶片): FMEA 分析流程建立，容錯技術的有
效性，灌錯及錯誤模擬分析工具環境的建立，系統驗證分析平台建立等等。
 
三、 攜回資料名稱及內容 
一本會議的論文集及光碟片 
