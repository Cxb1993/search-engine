the preliminary results shown that it is 
effective in improving students’ learning 
outcome. 
 
Keyword：Programming Instruction、
Problem-based Learning、Web2.0、
extendable problem-bank 
 
二、 緣由與目的 
 
過去十年教育改革所導致的現象
之一，就是大專學生的素質與學習動
機普遍下降。這對於需要投入時間與
毅力來學習的專業如「程式設計」來
說，傳統的教學方法普遍遭遇困難；
學生的學習成效不佳，許多離開課堂
之後就再也不願做程式設計工作。此
種現象若長此以往將不利於台灣的經
濟發展。為了持續產出優良的程式設
計人才，大專院校的程式設計教學因
此有必要改弦更張並做適當的調整。 
 
傳統的授課方式之所以降低學生
的學習成效，原因在於「老師教、學
生聽、回家做練習」以教師為中心式
之傳統授課方式已經不再適合於今日
的課堂。因為學習程式設計最有效的
方式，並非上課聽講做筆記，課後再
做練習。這中間的時空與情境已有落
差；許多學生便卡在這裡－上課聽得
懂但自己做練習卻不會。更好的方法
應該是課堂上聽完講解，便能立刻透
過練習實際體會講授的內容。這種讓
學生主動『做中學』（learning by doing）
的學習方式，要比被動的聽課，更適
合程式語言的學習。 
 
雖然目前各種輔助教學系統被提
出來，各有其一定的成效。但我們在
實際的教學經驗中發現，程式設計教
學是一件非常困難的工作，由於個別
學生對程式設計觀念的領悟力參差不
齊，因此常會造成授課教師在課程進
度安排上的困擾。如果課程進展太
快，則對程式設計領悟力不高的同學
容易造成負擔，更嚴重的則會導致其
喪失學習興趣；但如果課程進度太
慢，又會讓領悟力較好的同學學習進
度受到限制，覺得課程無趣。這是一
個兩難的問題。多數時候的解決辦
法，都是遷就進度落後的同學，因此
常造成程度好的同學在課堂上被「閒
置」。 
 
為了解決此一問題，我們因此思
考另一種鮮少被嘗試的模式，就是在
課堂上創造出一種稱為「輔導者」的
角色，把這些領悟力高、學習進度快，
被「閒置」的學生當作課堂上重要的
教學資源，讓他們來協助進度落後的
同學，使得教師、輔導者與進度落後
的學生三方，都能從其中得到好處。
本計畫根據此一想法，提出一個可讓
老師與學生雙方可以共同使用的教學
輔助系統。此一系統所扮演的角色，
一方面要協助老師更容易掌握學生的
學習情況，以適時提供回饋作為教學
的參考；另一方面又能提供課後的接
續練習，促成學生們彼此的互助與自
主學習。以下說明我們所提出的解決
方案。 
 
三、 結果與討論 
問題描述 
 
前面已勾勒出教學的現況以及解
變成「>」或是甚至增加/刪除某一行指
令等，產生許多似是而非的程式（參
考圖一的範例）。突變測試原始的目
的是要藉由這些變異，來檢驗測試本
身所設計的案例是否完整，有能力封
殺這些錯誤程式。這些程式正好是也
是我們要學習者的練習目標－有能力
進行除錯並找出錯誤的所在。因此，
只要有原始、好的種子程式，透過自
動化方法，我們就能產生大量、模擬
學生易於犯錯的情境，將這些似是而
非的程式碼交由學習者練習。告知原
本預期的程式執行結果為何，然後要
求學生針對已損壞的程式碼進行修
復。此種方法所設計的題庫，最大優
點是完全自動化，無論程式的產生與
練習時的答案批改，完全不需要人為
介入，同時並可根據學習者的成效，
自動調整各種練習的份量以及種子程
式的類型。 
 
至於第二種類型的練習，依據問
題的基本樣式（pattern）自動產生多個
相同題型的問題，以訓練學生舉一反
三的能力，則較為困難解決。從本質
上來看，每一種問題類型都有其特殊
性，很難以演算法自動從該題型產生
各式問題；尤其除了自然語言的問題
描述之外，還要能自動提供解答的程
式碼。我們的解決辦法，是將常見的
練習題目歸納成若干類型，並依據各
型問題的描述與解答程式碼分析其中
問題的樣式與組合元素，然後依據其
中重要的情境以產生類似人工智慧裡
所介紹的框架(Frame)（典型的例子如
到餐廳吃飯、或意外事件報導等都有
一定的樣式）。有了這些框架與框架
選項之後，我們可以根據需要任意組
合其中的框架選項以得到問題模版
（Template），重新填入新的文字資料
與情境描述之後，便可產生與原有題
目類型相似的新問題。 
 
舉例來說，初學者所做的程式設
計練習題，其問題性質通常符合「輸
入、處理、輸出」（Input-Process-Output）
的樣式，經過有效整理之後，我們可
產生一個如表一所示，屬於 IPO 樣式
的框架。從此一框架中選取其中的某
幾個框架元素之後，可得到一個屬於
IPO 的模版，如圖二所示，其中紅線所
標示的，是問題的模版，左邊欄所顯
示的是由模版所產出的問題，而右邊
欄是得到的是對應於問題的 Python 程
式碼。 
 
有了這樣的機制之後，接著利用
我們前面所建議『輔導者』角色，即
可以半自動化的方式將題目產生機制
交由這些程度較佳的同學協助執行。
他們在得到存取題目與解答程式碼模
版的權限之後，可依照模版的要求填
入參數與文字，創作出自己的題目以
及解答程式碼，經過測試無誤之後就
可存到題庫變成新的問題（參考圖
五）。 
 
此外，本系統會列出創作者的姓
名以便日後其他同學練習此一問題若
發生學習困難時，可尋求他的協助。
如此不只同學之間可形成互助的學習
氣氛，並且雙方都將增加不同的學習
機會（「學習一件事情最好的方法，
就是把它教會給其它人。」）。幫助
人的同學可以學習到相同模式的程式
碼可應用在許多不同的問題描述，以
作」，這是針對進入第二階段之後的
進階學習者。從前面的文獻說明，我
們已知過去幾乎沒有任何程式設計的
教學系統和學習輔助工具能夠讓學生
以自己的想法來創作練習題，這除了
造成一般教學系統或輔助工具的題庫
內容較為死板之外，也扼殺了讓學習
者進行二次學習的機會。我們相信，
學生在學習程式設計時，除了能利用
所學得的觀念來解決程式問題之外，
應該還要能用這個觀念問別人問題，
才能算是真正的了解這個觀念。為了
提升題目創作的品質，本系統在這個
階段也提供了題目的推薦機制，學習
者在對題目進行了練習之後，可依自
己的感覺對每個練習題進行推薦或負
評做為往後使用者的參考。 
 
四、 計畫成果自評 
 
在本計劃中，我們首先提出成為
一個程式設計師所需要的三種基本能
力，並根據文獻與教育理論分別提出
了相對應的訓練課程，且設計了兩種
不同的題目產生方法，包括利用突變
產生的除錯練習與透過社群力量產生
的問題創作練習以擴充題庫，然後依
此發展出與之搭配的程式設計學習流
程。根據這樣理念，我們建置了程式
設計學習輔助系統平台，讓學生可以
透過它來進行程式碼除錯、程式設計
與創作練習。 
 
對於此一系統的實用性，我們針
對中山大學大一資管系的同學，分兩
階段實地進行了實驗調查。第一階段
針對程式碼除錯練習的評估，第二階
段針對題庫擴充能力的評估與總體系
統的問卷調查。從表三分析的結果可
以看出，學生藉由使用除錯練習工具
進行練習，的確在提升其程式碼除錯
能力上有其幫助。 
 
至於練習題創作部分，在一個多
月的實驗期間，系統的題庫從初始的
四十個種子題目擴增到後來的一百
題。例如，圖五便是學生們自行創作
的部分問題範例。此外，我們也對本
系統之實用性進行初步的問卷調查，
學生大多也都給予正面的回應（限於
空間，這裡省略問卷內容與統計結
果）。本研究認為經由這些訓練，能
夠讓學生在程式設計技能的學習上得
到全方面的能力培養。不過，在問卷
中也發現，大部份的學生認為本系統
仍不足以取代傳統透過助教輔導的實
習課程，因此我們認為透過本系統所
扮演的角色應該是用來協助傳統的程
式設計課程的教學，未來相信在本系
統與課堂教師的互相搭配下可以讓學
生得到更好的學習成效。 
 
綜合以上所述，本研究應已充分
達到當初本計畫所規劃的第一年期目
標。並且由於其實用價值，我們希望
能持續投入人力，將本計畫的結果發
展成功能更完整、使用更方便的系
統，並整合我們本年度所發展的教學
教材，使其更貼近教學的需要。在學
術論文發表部分，暫時我們希望收集
更多教學上的觀察與效益會，之後會
在最近的未來將本計畫成果以學術論
文形式發表。 
 
五、 參考文獻 
 
be mutated. 
if MuOperatorSet[n] is arithmetic operator then 
  Change MuOperatorSet[n] to other arithmetic operator. 
else if MuOperatorSet[n] is relational operator then 
  Change MuOperatorSet[n] to other relational operator. 
else 
  Randomly change the value of MuOperatorSet[n]. 
    next i 
    To replace MutatedCode‘s  operator and numeric data with MuOperatorSet. 
While(MutatedCode != QriginalCode) 
 
表三、前測與期中考分數之簡易數據 
組別 測驗名稱 人數 平均值 標準差 最小值 最大值
對照組 前測 18 66.31 21.1 40.33 100 
 期中考除錯部份 17 15.94 4.19 10 25 
實驗組 前測 18 65.88 19.28 43.67 100 
 期中考除錯部份 17 19.35 4.32 13 25 
 
 
 
