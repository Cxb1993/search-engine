2system. Firstly, it assumes the more real separate read/write
atomicity. Under such an assumption, each move (or atomic
step) in the system consists of internal computations and either
a single read operation or a single write operation. Secondly,
it is assumed that each processor in the system runs its own
program indefinitely and at its own pace. Finally, it is assumed
that each processor in the system has a program counter.
The value of the program counter in a processor indicates the
statement number of the statement that is to be executed by
the processor. Thus the running of the program in a processor
has to follow the order of the statements in the program.
Under the Dolev model, the behavior of the system under the
action of the algorithm can still be described by an execution
sequence Γ = (γ1, γ2, . . .). As in Dijkstra’s central demon
model, in any configuration γi, an unique processor of the
system is selected by the central demon to make the move
γi → γi+1, and thus change the system configuration to γi+1.
However, we should point out that due to the content of the
algorithm and the way in which the algorithm is executed, the
selection by the central demon is no longer random here in
the system of the Dolev type. In other words, any execution
(or execution sequence) of the algorithm in the system of
the Dolev type has to obey certain restrictions. The definition
for an algorithm to be self-stabilizing under the Dolev model
is the same as that under Dijkstra’s central demon model.
Dolev et al. presented and proved the correctness of two self-
stabilizing algorithms in [5] and [6], one of which is for the
mutual exclusion problem and the other is for the breadth-
first-search tree problem. Although systems of the Dolev type
appear to be more realistic than those of the Dijkstra type, only
a few papers have been published since 1993, regarding self-
stabilizing algorithms under the Dolev model. Recently, Huang
et al. proposed a center-finding algorithm, a shortest-path-
finding algorithm, and a maximal independent set algorithm, in
[7], [9] and [10], respectively, all of which are self-stabilizing
under the Dolev model.
In the following, we introduce the notion of weakly self-
stabilizing system of the Dolev type. First recall that a dis-
tributed system of the Dolev type is self-stabilizing if, starting
with any global configuration, the system can converge to a
legitimate configuration and then stay in the legitimate config-
uration (or some legitimate configurations) thereafter, unless
it incurs a subsequent transient fault. Now we define that a
system of the Dolev type is weakly self-stabilizing if, start-
ing with any global configuration that has every processor’s
program counter set to zero (such a global configuration will
henceforth be abbreviated as a 0-configuration), the system can
converge to a legitimate configuration, and then stay in the
legitimate configuration (or some legitimate configurations)
thereafter, unless it incurs a transient fault. If a system is in a 0-
configuration, then every processor in the system will execute
its own program from the very first statement. To a weakly
self-stabilizing system, the capability of recovering from a
transient fault cannot be guaranteed, because some processors’
program counters may not be 0 after a transient fault and thus
these processors may not execute their programs from the first
statement after the transient fault. Nevertheless, if we consider
the start-up situation, then, without any initialization, a weakly
self-stabilizing system is guaranteed to self-stabilize. This is
because in the start-up situation, every processor’s program
counter has a 0-value. From the definitions of the two types
of self-stabilizing systems, one can see that a self-stabilizing
system of the Dolev type is obviously a weakly self-stabilizing
system of the Dolev type. The converse, however, is not true,
as the main results in this paper will clearly imply.
In this paper, we will clarify the above newly introduced
notion. First, as has been done in Dolev’s book [6], we will
modify Dijkstra’s K-state mutual exclusion algorithm into a
version that can operate in a system of the Dolev type. The
system is a ring of n nodes (n ≥ 2). Then we will show that the
adapted algorithm is self-stabilizing if K ≥ 2n−1, and weakly
self-stabilizing but not self-stabilizing if n ≤ K < 2n−1, and
not weakly self-stabilizing if 2 ≤ K < n.
Self-stabilizing algorithms for the mutual exclusion problem
have been investigated during the past [1], [2], [3], [4], [5],
[6]. Dijkstra’s K-state mutual exclusion algorithm, which
adopts the central demon model, was presented in [2]. Dijkstra
provided a proof in [3], showing that if K ≥ n, his algorithm
is self-stabilizing. In [6, Section 2.6], K ≥ n− 1 is shown to
be a necessary and sufficient condition for Dijkstra’s algorithm
to be self-stabilizing. The proof provided there is under the as-
sumption of the fair demon model. It is then pointed out that a
ring of n nodes equipped with the adapted algorithm operating
under the Dolev model, can be viewed as just a ring of 2n
nodes equipped with Dijkstra’s algorithm operating under the
central demon model. This viewpoint is very clever, because
from this viewpoint and the above necessary and sufficient
condition for Dijkstra’s algorithm to be self-stabilizing under
the fair demon model, it follows immediately that a ring of n
nodes equipped with the adapted algorithm is self-stabilizing
under the Dolev model if and only if K ≥ 2n− 1. What we
will derive in Section 3 is exactly the same as this last result.
However, our proof is of different flavor.
The rest of this paper is arranged as follows. In Section 2,
Dijkstra’s K-state mutual exclusion algorithm is recalled, and
an adapted version from it is proposed. The legitimate configu-
rations are defined, and four types of legitimate configurations
are emphasized. In Section 3, the adapted algorithm is shown
to be self-stabilizing under the Dolev model if and only if
K ≥ 2n− 1. In Section 4, the adapted algorithm is shown to
be weakly self-stabilizing under the Dolev model if and only
if K ≥ n. Finally in Section 5, we show that the same idea
in proving the correctness in Sections 3 and 4 can also be
used in proving the correctness of Dijkstra’s K-state mutual
exclusion algorithm.
II. THE ALGORITHM AND THE LEGITIMATE
CONFIGURATIONS
Consider a distributed system whose underlying topology is
a ring of n (n ≥ 2) nodes. Each node represents a processor
in the system. Nodes are numbered from 0 to n− 1 in order.
For each i ∈ {0, 1, 2, . . . , n − 1}, the edge between node
i and node i + 1 mod n represents the unidirectional link
between the two processors. Since the computational model
employed here is of the Dolev type, the separate read/write
4can write infinitely many times in view of Lemma 1, we let
t01, t02, . . . , t0(2n), with 0 < t01 < t02 < · · · < t0(2n), be the
first 2n instants at which node 0 executes write operations so
that S0 changes to 1, 2, . . . , 2n,modK , in sequence. Thus at
the instants t01, t02, . . . , t0(2n), r0 = 0, 1, . . . , 2n− 1,modK ,
in sequence. Hence there exist v2, v3, . . . , v2n, with 0 <
t01 < v2 < t02 < · · · < t0(2n−1) < v2n < t0(2n),
such that at the instants v2, v3, . . . , v2n, node 0 executes read
operations so that r0 changes to 1, 2, . . . , 2n − 1,modK , in
sequence, and hence at the instants v2, v3, . . . , v2n, Sn−1 =
1, 2, . . . , 2n − 1,modK , in sequence. Hence there exist
u3, u4, . . . , u2n, with v2 < u3 < v3 < · · · < v2n−1 <
u2n < v2n, such that at the instants u3, u4, . . . , u2n, node
n − 1 executes write operations so that Sn−1 changes
to 2, 3, . . . , 2n − 1,modK , in sequence. Thus there ex-
ist t(n−1)3, t(n−1)4, . . . , t(n−1)(2n), with t01 < t(n−1)3 <
t(n−1)4 < · · · < t(n−1)(2n) < t0(2n), such that at the instants
t(n−1)3, t(n−1)4, . . . , t(n−1)(2n), node n − 1 executes write
operations so that Sn−1 changes to 2, 3, . . . , 2n− 1,modK ,
in sequence (here, simply let t(n−1)j = uj). Hence at the in-
stants t(n−1)3, t(n−1)4, . . . , t(n−1)(2n), rn−1 = 2, 3, . . . , 2n −
1,modK , in sequence. Therefore there exist q4, q5, . . . , q2n,
with t(n−1)3 < q4 < t(n−1)4 < q5 < t(n−1)5 < · · · <
t(n−1)(2n−1) < q2n < t(n−1)(2n), such that at the instants
q4, q5, . . . , q2n, node n − 1 executes read operations so that
rn−1 changes to 3, 4, . . . , 2n − 1,modK , in sequence, and
hence at the instants q4, q5, . . . , q2n, Sn−2 = 3, 4, . . . , 2n −
1,modK , in sequence. Hence there exist l5, l6, . . . , l2n, with
q4 < l5 < q5 < · · · < q2n−1 < l2n < q2n, such that at the
instants l5, l6, . . . , l2n, node n−2 executes write operations so
that Sn−2 changes to 4, 5, . . . , 2n − 1,modK , in sequence.
Thus there exist t(n−2)5, t(n−2)6, . . . , t(n−2)(2n), with t01 <
t(n−1)3 < t(n−2)5 < t(n−2)6 < · · · < t(n−2)(2n) < t(n−1)(2n),
such that at the instants t(n−2)5, t(n−2)6, . . . , t(n−2)(2n), node
n − 2 executes write operations so that Sn−2 changes
to 4, 5, · · · , 2n − 1,modK , in sequence (here, simply let
t(n−2)j = lj).
Arguing in the same manner as above, we will finally
get t(n−1)3, t(n−2)5, . . . ,
t2(2n−3), t1(2n−1), t1(2n), t2(2n), . . . , t(n−1)(2n), such that
t01 < t(n−1)3 < t(n−2)5 < · · · < t2(2n−3) < t1(2n−1) <
t1(2n) < t2(2n) < · · · < t(n−1)(2n) < t0(2n), and at the
instants t1(2n−1) and t1(2n), node 1 executes write operations
so that S1 changes to 2n − 2modK and 2n − 1modK ,
respectively. Thus at the instants t1(2n−1) and t1(2n),
r1 = 2n− 2modK and 2n − 1modK , respectively. Hence
there exists a t′, with t1(2n−1) < t′ < t1(2n), such that
at the instant t′, node 1 executes a read operation so that
r1 changes to 2n − 1modK , and hence at the instant t′,
S0 = 2n − 1modK . Note that since K ≥ 2n − 1, we have
S0 6= 2n − 1modK in (t01, t0(2n−1)). Thus t′ < t01 or
t′ > t0(2n−1). But since t01 < t(n−1)3 < t(n−2)5 < · · · <
t2(2n−3) < t1(2n−1) < t
′
, we have t′ > t0(2n−1) and thus
t0(2n−1) < t1(2n).
From all the above, we see that t0(2n−1) < t1(2n) <
t2(2n) < · · · < t(n−1)(2n) < t0(2n), and for any i =
1, 2, . . . , n, node i executes a write operation at ti(2n) so that
Si changes to 2n−1modK . Thus for any i = 1, 2, . . . , n−1,
ri = 2n − 1modK at ti(2n). Since S0 = 2n − 1modK
in the interval (t0(2n−1), t0(2n)), r1 never changes even if
node 1 reads in (t1(2n), t0(2n)). Thus r1 = 2n − 1modK
in [t1(2n), t0(2n)). Since S1 = 2n − 1modK at t1(2n),
S1 = 2n − 1modK in (t1(2n), t0(2n)). Similarly, r2 never
changes even if node 2 reads in (t2(2n), t0(2n)). Thus r2 =
2n − 1modK in [t2(2n), t0(2n)). Since S2 = 2n − 1modK
at t2(2n), S2 = 2n − 1modK in (t2(2n), t0(2n)). Arguing
in this way, we will finally get rn−1 = 2n − 1modK in
[t(n−1)(2n), t0(2n)), and hence Sn−1 = 2n − 1modK in
(t(n−1)(2n), t0(2n)).
Summarizing all the above, we have S0 = S1 = S2 =
· · · = Sn−1 = r1 = r2 = · · · = rn−1 = 2n − 1modK
in (t(n−1)(2n), t0(2n)). Since node 0 writes S0 = 2nmodK
at t0(2n), r0 = 2n − 1modK at t0(2n). Hence at t+0(2n),
S1 = S2 = · · · = Sn−1 = r0 = r1 = · · · = rn−1 =
2n − 1modK , and S0 = 2nmodK . Therefore the system
reaches a legitimate configuration of Type 2 at t+0(2n).
Lemma 3: After reaching a legitimate configuration of Type
2, the system will stay in legitimate configurations forever, and
each node in the system will be privileged infinitely many
times.
Proof: (1) If, at a certain instant, the system is in a
legitimate configuration of Type 2, then the next move in the
system must be node i reading ri = Si−1 = 1. Hence the
system configuration will change to a legitimate configuration
of Type 3.
(2) If, at a certain instant, the system is in a legitimate
configuration of Type 3, then the next move in the system
must be node i writing Si = 1. (a) If i 6= n − 1, then the
system configuration will change to a legitimate configuration
of Type 2. (b) If i = n−1, then the system configuration will
change to a legitimate configuration of Type 4.
(3) If, at a certain instant, the system is in a legitimate
configuration of Type 4, then the next move in the system
must be node 0 reading r0 = Sn−1 = 1. Hence the system
configuration will change to a legitimate configuration of Type
1.
(4) If, at a certain instant, the system is in a legitimate
configuration of Type 1, then the next move in the system must
be node 0 writing S0 = 1. Hence the system configuration will
change to a legitimate configuration of Type 2.
Form the above and Lemma 2, one can see that the first
claim of the lemma is proved. The second claim of the lemma
can be verified by also consulting the above discussion, and
the details are thus omitted.
From Lemmas 2 and 3, we obtain the following theorem.
Theorem 4: For K ≥ 2n−1, Algorithm 1 is self-stabilizing
under the Dolev model, and solves the mutual exclusion
problem.
Table I exhibits an execution of Algorithm 1 for n = 5
and K = 8. In each configuration in Table I, the shaded
part indicates the execution of a single atomic step by the
unique processor selected by the central demon. One can
see that in this execution, configuration 81 is exactly the
same as configuration 1 and therefore the execution is to
be understood as infinitely cyclic with a period of 80. Since
none from configuration 1 to configuration 80 is a legitimate
6u2, u3, . . . , un, with v1 < u2 < v2 < · · · < vn−1 < un < vn,
such that at the instants u2, u3, . . . , un, node n − 1 executes
write operations so that Sn−1 changes to 1, 2, . . . , n− 1,mod
K , in sequence. Thus there exist t(n−1)2, t(n−1)3, . . . , t(n−1)n,
with t(n−1)2 < t(n−1)3 < · · · < t(n−1)n < t0n, such
that at the instants t(n−1)2, t(n−1)3, . . . , t(n−1)n, node n − 1
executes write operations so that Sn−1 changes to 1, 2, . . . , n−
1,mod K , in sequence (here, simply let t(n−1)j = uj).
Hence at the instants t(n−1)2, t(n−1)3, . . . , t(n−1)n, rn−1 =
1, 2, . . . , n − 1,mod K , in sequence. Therefore there exist
q2, q3, . . . , qn, with 0 < q2 < t(n−1)2 < q3 < t(n−1)3 <
· · · < t(n−1)(n−1) < qn < t(n−1)n, such that at the instants
q2, q3, . . . , qn, node n−1 executes read operations so that rn−1
changes to 1, 2, . . . , n − 1,mod K , in sequence, and hence
at the instants q2, q3, . . . , qn, Sn−2 = 1, 2, . . . , n − 1,mod
K , in sequence. (Again, the existence of q2 is due to node
n − 1 executing a read operation first.) Hence there exist
l3, l4, . . . , ln, with q2 < l3 < q3 < · · · < qn−1 < ln < qn,
such that at the instants l3, l4, . . . , ln, node n−2 executes write
operations so that Sn−2 changes to 2, 3, . . . , n−1,mod K , in
sequence. Thus there exist t(n−2)3, t(n−2)4, . . . , t(n−2)n, with
t(n−2)3 < t(n−2)4 < · · · < t(n−2)n < t(n−1)n, such that at
the instants t(n−2)3, t(n−2)4, . . . , t(n−2)n, node n−2 executes
write operations so that Sn−2 changes to 2, 3, . . . , n− 1,mod
K , in sequence (here, simply let t(n−2)j = lj).
Arguing in the same manner as the above, we will eventually
get t1n, t2n, . . . ,
t(n−1)n, such that t1n < t2n < · · · < t(n−1)n < t0n, and
at the instant t1n, node 1 executes a write operation so that
S1 changes to n − 1mod K . Hence there exists a t′, with
t′ < t1n, such that at the instant t′, node 1 executes a read
operation so that r1 changes to n−1mod K , and hence at the
instant t′, S0 = n − 1mod K . (Here again, the existence of
t′ is due to node 1 executing a read operation first.) Note that
since K ≥ n, we have S0 6= n − 1mod K in (t0, t0(n−1)).
Thus t′ > t0(n−1). Therefore t0(n−1) < t1n.
From all the above, we see that t0(n−1) < t1n < t2n <
· · · < t(n−1)n < t0n, and for any i = 1, 2, . . . , n − 1, node i
executes a write operation at the instant tin so that Si changes
to n − 1. Thus for any i = 1, 2, . . . , n − 1, ri = n − 1 at
tin. Since S0 = n − 1 in the interval (t0(n−1), t0n), r1 never
changes even if node 1 reads in (t1n, t0n). Thus r1 = n − 1
in [t1n, t0n), and hence S1 = n−1 in (t1n, t0n). Similarly, r2
never changes even if node 2 reads in (t2n, t0n). Thus r2 = n−
1 in [t2n, t0n), and hence S2 = n−1 in (t2n, t0n). Arguing in
this manner, we will finally get rn−1 = n−1 in [t(n−1)n, t0n),
and hence Sn−1 = n− 1 in (t(n−1)n, t0n).
Summarizing all the above, we have S1 = S2 = · · · =
Sn−1 = r1 = r2 = · · · = rn−1 = n − 1 in (t(n−1)n, t0n).
Since node 0 writes S0 = nmod K at t0n, r0 = n− 1 at t0n.
Hence at t+0n, S1 = S2 = · · · = Sn−1 = r0 = r1 = · · · =
rn−1 = n − 1modK , and S0 = nmod K . Therefore the
system reaches a legitimate configuration of Type 2 at t+0n.
From Lemmas 3 and 4, we obtain the following theorem.
Theorem 7: For K ≥ n, Algorithm 1 is weakly self-
stabilizing under the Dolev model, and solves the mutual
exclusion problem.
TABLE II
AN EXECUTION OF ALGORITHM 1 FOR n = 7 AND K = 6 THAT STARTS
WITH A 0-CONFIGURATION AND CONTAINS NO LEGITIMATE
CONFIGURATION.
r 0 S 0 r 1 S 1 r 2 S 2 r 3 S 3 r 4 S 4 r 5 S 5 r 6 S 6
1 5 0 5 5 4 4 3 3 2 2 1 1 0 0
2 0 0 5 5 4 4 3 3 2 2 1 1 0 0
3 0 0 5 5 4 4 3 3 2 2 1 1 1 0
4 0 0 5 5 4 4 3 3 2 2 1 1 1 1
5 0 0 5 5 4 4 3 3 2 2 2 1 1 1
6 0 0 5 5 4 4 3 3 2 2 2 2 1 1
7 0 0 5 5 4 4 3 3 3 2 2 2 1 1
8 0 0 5 5 4 4 3 3 3 3 2 2 1 1
9 0 0 5 5 4 4 4 3 3 3 2 2 1 1
10 0 0 5 5 4 4 4 4 3 3 2 2 1 1
11 0 0 5 5 5 4 4 4 3 3 2 2 1 1
12 0 0 5 5 5 5 4 4 3 3 2 2 1 1
13 0 0 0 5 5 5 4 4 3 3 2 2 1 1
14 0 0 0 0 5 5 4 4 3 3 2 2 1 1
15 0 1 0 0 5 5 4 4 3 3 2 2 1 1
16 1 1 0 0 5 5 4 4 3 3 2 2 1 1
17 1 1 0 0 5 5 4 4 3 3 2 2 2 1
18 1 1 0 0 5 5 4 4 3 3 2 2 2 2
19 1 1 0 0 5 5 4 4 3 3 3 2 2 2
20 1 1 0 0 5 5 4 4 3 3 3 3 2 2
21 1 1 0 0 5 5 4 4 4 3 3 3 2 2
22 1 1 0 0 5 5 4 4 4 4 3 3 2 2
23 1 1 0 0 5 5 5 4 4 4 3 3 2 2
24 1 1 0 0 5 5 5 5 4 4 3 3 2 2
25 1 1 0 0 0 5 5 5 4 4 3 3 2 2
26 1 1 0 0 0 0 5 5 4 4 3 3 2 2
27 1 1 1 0 0 0 5 5 4 4 3 3 2 2
28 1 1 1 1 0 0 5 5 4 4 3 3 2 2
29 1 2 1 1 0 0 5 5 4 4 3 3 2 2
30 2 2 1 1 0 0 5 5 4 4 3 3 2 2
31 2 2 1 1 0 0 5 5 4 4 3 3 3 2
32 2 2 1 1 0 0 5 5 4 4 3 3 3 3
33 2 2 1 1 0 0 5 5 4 4 4 3 3 3
34 2 2 1 1 0 0 5 5 4 4 4 4 3 3
35 2 2 1 1 0 0 5 5 5 4 4 4 3 3
36 2 2 1 1 0 0 5 5 5 5 4 4 3 3
37 2 2 1 1 0 0 0 5 5 5 4 4 3 3
38 2 2 1 1 0 0 0 0 5 5 4 4 3 3
39 2 2 1 1 1 0 0 0 5 5 4 4 3 3
40 2 2 1 1 1 1 0 0 5 5 4 4 3 3
41 2 2 2 1 1 1 0 0 5 5 4 4 3 3
42 2 2 2 2 1 1 0 0 5 5 4 4 3 3
43 2 3 2 2 1 1 0 0 5 5 4 4 3 3
44 3 3 2 2 1 1 0 0 5 5 4 4 3 3
45 3 3 2 2 1 1 0 0 5 5 4 4 4 3
46 3 3 2 2 1 1 0 0 5 5 4 4 4 4
Configuration
number
Node identity
0 1 2 3 4 5 6
Table II exhibits an execution of Algorithm 1 for n = 7
and K = 6 that starts with a 0-configuration. Note that in
this execution, every node executes a read operation first. In
each configuration in Table II, the shaded part indicates the
execution of a single atomic step by the unique processor
selected by the central demon. One can see that in this ex-
ecution, configuration 85 is exactly the same as configuration
1, and therefore the execution is to be understood as infinitely
cyclic with a period of 84. Since none from configuration 1
to configuration 84 is a legitimate configuration, the execution
does not contain any legitimate configuration. Therefore Al-
gorithm 1 is not weakly self-stabilizing for n = 7 and K = 6.
Similarly, for any n and K , with K < n, it is not difficult
to find an execution of Algorithm 1 which starts with a 0-
configuration, and contains no legitimate configuration. Hence
we have obtained the following theorem.
Theorem 8: For K < n, Algorithm 1 is not weakly self-
stabilizing under the Dolev model.
