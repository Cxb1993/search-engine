 2. Proposed Methods 
Generally, it is hard to get a good segmentation 
result by either region-based or edge-based method. So, 
we utilize the distribution of region growing and 
information of edge detection for elimination of texture 
regions to obtain accurate segmentation results. The 
YUV components of images are employed in the 
segmentation processes. The detail algorithms are 
described in following sub sections. 
2.1 Histogram Quantization and Automatic 
Seeds Generation 
The histogram of gray levels of image is based on 
the probability. So, it is feasible to analysis the feature 
of histogram for gray-scale quantization. The SRG 
(seeded region-growing) approach performs image 
segmentation with a set of seeds and provides closed 
regions in image segmentation [1][2]. This approach is 
controlled by choosing the seeds which will influence 
the result of segmentation. In this sub-section, we will 
develop histogram classification for gray-scale and 
color images and automatic generation of seeds for 
SRG. 
A. Histogram Classification 
For classifying the representative gray-scale 
images of histogram, we will exploit the statistic 
characterization of histogram to obtain the 
classifications with dominant features. Let H is a set of 
gray-scale histogram and each subset can be denoted as 
j
iH , where 0,1,2,...,j n= , =0,1,2,...,2 1ji −  and 
j
iH H⊆ . The j and i are the times of divisions and the 
indexing number of subsets respectively. Let jiμ  and 
j
iσ  are the mean value and standard deviation of each 
subset jiH , which are given by  
1
j
i
j
i hj
h Hi
f h
N
μ
∈
= ⋅∑  (1) 
( )
1
221
j
i
j j
i h ij
h Hi
f h
N
σ μ
∈
⎡ ⎤= − ⋅⎢ ⎥⎣ ⎦∑
 (2) 
where jiN  is sum of gray-level values of histogram in 
each subset, fh is the histogram value of gray-level h and 
j
ih H∈ . When the standard deviation jiσ  is greater 
than a predefined threshold value Th, the subset jiH  
will be partitioned into two subsets 12
j
iH
+  and 12 1
j
iH
+
+  by 
mean value jiμ  automatically, where 
1
2 { | , }
j j j
i i iH h h h Hμ+ = ≤ ∈  and 12 1 { | , }j j ji i iH h h h Hμ++ = > ∈ . 
At the same time, we build a binary tree for remaining 
the mean value in each node. The value of binary tree 
root is 00μ . And the binary tree will extend two new 
nodes which values are 12jiμ +  and 12 1jiμ ++ , where left node 
1
2
j
iμ + < right node 12 1jiμ ++ . Fig.1 shows the division 
processes of histogram. The creation of binary tree 
shows in Fig.2. The steps of histogram classification 
will iterate automatically until the standard deviation of 
each subset is not greater than the predefined threshold 
value. 
For the color image, we develop a new algorithm 
for the classification of hybrid components. We exploit 
the classification of gray-scale histogram for each 
component of YUV to construct three binary trees 
individually, and the values of terminal nodes of each 
binary tree can be grouped into three sets denoted as 
0 1{ , , , }ny y y yG g g g= " , 0 1{ , , , }mu u u uG g g g= " , 
0 1{ , , , }pv v v vG g g g= "  respectively, where n, m and p 
represent the number of classified gray levels in each 
component. Afterward, we combine the elements of Gy, 
Gu and Gv to obtain a set of color vectors V={v0, v1, …, 
vnxmxp}, where the color vector { , , }n m pn m p y u vv g g g× × =  
and , ,n m py y u u v vg G g G g G∈ ∈ ∈ . Then, we sort the 
{ , , }n m py u vg g g  by keys of 
n
yg , 
m
ug  and 
p
vg  orderly, 
and map to the set of indexing numbers of colors 
vectors denoted as S={0,1,2,…, n m p× × }. Because the 
set S is still too large, we have to classify S similarly in 
gray-scale histogram classification. The iteration of 
color classification will stop while the standard 
deviation is not greater than a predefined threshold Tc. 
Fig.3 shows the construction of color vectors 
classification using binary trees. In the implementation 
of color vectors classification, we predefine four 
threshold values for classifying YUV components and 
color vectors individually. 
B. Quantization and Automatic Seeds Generation 
For splitting the image into closed regions, we will 
employ SRG which evolves inductively from the seeds. 
After the automatic classification of histogram, the 
deviation of each classified histogram subset is under 
the threshold, and the binary tree, which nodes contain 
the mean values of classified histogram subsets, has 
been constructed. We can quantize original gray levels 
by the binary tree. Each original gray level of image 
pixel will compare to the values of nodes of binary tree. 
If the value of original gray level is not greater than the 
value of node, the comparison will toward to left sub 
tree. On the other hand, the process move to right sub 
tree. For color vectors quantization, the original YUV 
values of color pixels will be quantized by binary trees 
of Y, U and V individually, and match color vectors of 
set V for obtaining the indexing numbers of set S. Then, 
the indexing numbers search the classified values in the 
binary tree for acquiring the color vectors of 
quantization. 
Seeds generation is essential and important in SRG. 
The values of nodes in binary tree are the mean values 
of subsets after histogram divisions. And the mean value 
of subset can be chosen to represent the gray levels of 
the subset. So, the set of seeds can be generated 
automatically by the terminal nodes of the binary tree 
without any extra computation.  
 2 2
1
2 2
( , ) (( ) ( )
( ) )
i j i j
i j
d i j r r r r
r r
S r r QY QY QU QU
QV QV
= − + −
+ −
 (11) 
Where ( , , )
i i ir r r
QY QU QV  and ( , , )
j j jr r r
QY QU QV  are 
the values of quantized color vector in region 
ir  and 
jr  respectively. If ),( jid rrS  is not greater than 100, the 
adjacent regions would be considered to group into a 
same texture region by information of edges and regions, 
and we execute the following step. 
Let the edge pixels of two adjacent regions 
ir  and 
jr  be ( ),i jRE r r , and ( ),i jE r r  be the pixels from 
edge detection. We project edges onto to regions and 
calculate the ratio Rr ( ) ( )
( )
, ,
,
i j i j
r
i j
E r r RE r r
R
RE r r
∩=  (12) 
While Rr is not greater than threshold Tr, the adjacent 
regions will be merged. Fig.6 shows the integration of 
region and edge. We eliminate the texture regions by 
steps from Eq.(11) to (12). Because we just consider the 
similarity feature of color vectors in the process of 
texture regions elimination, so some small regions with 
independent color features still exist. We have to 
implement small regions merging to reach the 
reasonable segmentation results. 
B. Region Merging using Color Vectors 
For merging small regions, we consider the ratio of 
region size to total regions with same color vector. After 
elimination of texture regions, we obtain a set of regions 
with quantized color vectors formed as { }1 2, , , ,  where 1,2,...i
i i i
k
V V Vi VR r r r i n= =" , Vi is color 
vector by color histogram quantization, i
i
k
Vr  is the ki’th 
region with color vector Vi. Let ( )i
i
k
VA r  is the region 
size of i
i
k
Vr  and ( )iVA R  is the size of all regions with 
color vector Vi in whole image. The ratio is given by 
( )
( )
i
i
i
k
V
V
A r
Ar
A R
=  (13) 
While Ar is smaller than a predefined threshold Ta, the 
region i
i
k
Vr  will be merge into a adjacent region which 
is with minimum color distance d, described in (11). 
The steps of region merging iterate until no region size 
is less than the predefined threshold.  
3. Experimental Results 
In our experiments, there are three kinds of images, 
e.g., human, animal and scenery, in our test. The frame 
sizes of animal images are 384x256 and 256x384. Fig.7 
shows the result of histogram quantization and SRG by 
our proposed classification of color vectors. The local 
edge and global edge detections present in Fig.8. More 
edge information is obtained by our 
multi-entropic-thresholding method.  
In Fig.9 and Fig.10, we represent the results of 
image segmentation, and describe the predefined 
threshold values and number of seeds and regions in 
Table I. The images of index (a) are original color 
images. The images of index (b) show the results SRG 
by our color histogram quantization and automatic seeds 
generation. The images, index (c) and (d), show the 
results of integrating regions and edges from local and 
global edge detection respectively.  
In practical implementation, we can execute the 
segmentation by integrating local and global edges 
sequentially. Fig.11 shows the results which integrate 
the local and global edges orderly. The boundary of 
salient object is obtained efficiently, and the texture 
regions are split more accurately. 
4. Self Evaluation  
In this paper, we present a new approach which 
integrates the region distribution and edge information 
to improve the accuracy of segmentation results for 
color images. For the quantization of color images, we 
employ the distribution of histogram to classify the Y, U 
and V components individually, and construct binary 
trees to create the set of color vectors. The index set of 
color vectors is classified to build a binary tree for 
histogram quantization. The seeds are generated 
automatically by histogram classification for SRG. Then, 
we utilize the fast entropic thresholding algorithm to 
obtain global edges, and we modify the algorithm to 
develop the multi-entropic-thresholding algorithm for 
local edges detection. Moreover, we propose a new 
method, which integrates the information of regions and 
edges, for elimination of texture regions, and then small 
regions are merged by the size ratio of regions which 
are in same color vectors. Finally, the experimental 
results show good performance in our approach. 
The partial results of the project have been published 
in the International Computer Symposium 2004. The 
complete results have been submitted to Image and 
Vision Computing and under review. 
Reference 
[1]. R. Adams and L. Bischof, “Seeded Region 
Growing,” IEEE Trans. on Pattern Analysis and 
Machine Intelligence, Vol. 16, No. 6, pp.641-647, 
June 1994. 
[2]. Y. L. Chang and X. Li “Adaptive Image 
Region-Growing,” IEEE Trans. on Image 
Processing, Vol. 3, Issue: 6, pp. 868–872, Nov. 
1994. 
[3]. J. Canny, “A Computational approach to edge 
detection,” IEEE Trans. Patterm Anal. Machine 
Intel.l, Vol. PAMI-8, pp.667-698, Nov. 1986. 
[4]. W. Y. Ma and B. S. Manjunath, “Edge Flow: A 
Technique for Boundary Detection and Image 
Segmentation,” IEEE Trans. Image Processing, 
Vol. 9, No. 8, pp.1375-1388, Aug. 2000. 
[5]. G. Iannizzotto and L. Vita, “Fast and Accurate 
 Table I 
Images Threshold values 
Claire 
σ  of Y = 15, U = 5, V = 
5, color vectors = 10 
Tr = 0.5, Ta = 0.01 
Foreman  
Sitting Orangutan 
σ  of Y = 15, U = 3, V = 
3, color vectors = 5 
Tr = 0.5, Ta = 0.01 
Elephant 
σ  of Y = 15, U = 2, V = 
2, color vectors = 5 
Tr = 0.5, Ta = 0.01 
 
 
 
 
 
 
 
 
 
 
 
  
  
  
  
  
  
  
  
  
  
  
  
  
 
Fig.3 Classification of color vectors by binary tree of Y, U and V components. 
 
Fig.4 Four directional mask coefficients of Sobel 
mask. 
 
Fig.5 Block searching area for fast entropic thresholding 
algorithm. 
 
Fig.1 The division processes of histogram. 
 
Fig.2 The creation of binary tree. 
1 2 1 
0 0 0 
-1 -2 -1 
1 0 -1 
2 0 -2 
1 0 -1 
2 1 0 
1 0 -1 
0 -1 -2 
0 1 2 
-1 0 1 
-2 -1 0 
