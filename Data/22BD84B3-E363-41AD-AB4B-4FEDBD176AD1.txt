 1
 
行政院國家科學委員會補助專題研究計畫 ■成果報告   □期中進度報告 
 
免憑證式公開金鑰密碼系統信任層級之探討。 
 
 
計畫類別：■個別型計畫   □整合型計畫 
計畫編號：NSC   100－2221－ E －468－014－  
執行期間：   100 年 08 月 01 日至  101 年 07 月 31 日 
 
執行機構及系所：亞洲大學 資訊多媒體應用學系 
 
計畫主持人： 劉兆樑 
共同主持人： 
計畫參與人員： 陳昱圻、陳治華 
 
 
 
成果報告類型(依經費核定清單規定繳交)：■精簡報告  □完整報告 
 
本計畫除繳交成果報告外，另須繳交以下出國心得報告： 
□赴國外出差或研習心得報告 
□赴大陸地區出差或研習心得報告 
□出席國際學術會議心得報告 
□國際合作研究計畫國外研究報告 
 
 
處理方式：除列管計畫及下列情形者外，得立即公開查詢 
            ■涉及專利或其他智慧財產權，■一年□二年後可公開查詢 
 
中   華   民   國   101 年  10 月  30  日 
• Level 1. The TTP knows the private key of any user and is able to impersonate any user without
being detected.
• Level 2. The TTP does not know the private key of any user. But the TTP is able to generate a false
private key to impersonate any user.
• Level 3. The TTP does not know the private key of any user. But if the TTP generates a false private
key to impersonate a user then it is possible for that user (the victim) to prove that the TTP generated
a false private key.
Schemes with trust level 1 or trust level 2 are not acceptable in many applications, such as providing
non-repudiations. Reaching Trust Level 3 is generally the goal. In a traditional public key scheme, if the
CA forges certificates, the CA’s misbehave can be identified through the existence of two valid certificates
for the same user. However, a false public key can be created by the KGC without being detected in
the certificateless PKC, since new public keys can be created by both the legitimate user and the KGC.
Therefore, the traditional public key schemes achieve trust level 3, whereas, the certificateless public key
schemes reach only trust level 2.
Explicitly, we state clearly the three trust levels of the KGC in the context of certificateless signature
(CLS) schemes:
• Level 1. The KGC knows the full private key of any user and is able to act as any user to forge
signatures and these forged signatures cannot be repudiated by that user (the victim).
• Level 2. The KGC does not know the full private key of any user. But the KGC is able to generate
a false private key for any user to forge signatures and these forged signatures cannot be repudiated
by that user (the victim).
• Level 3. The KGC does not know the full private key of any user. But the KGC is able to generate
a false private key and public key for any user to forge signatures but that user (the victim) can
repudiate these forged signatures.
From legal point of view, using a digital signature scheme with trust level 1 or 2, a signer can always
repudiate signatures by blaming the KGC. We say a CLS scheme providing strong non-repudiation if the
corresponding KGC is of trust level 3. Therefore, for a CLS scheme to provide strong non-repudiation,
the user must be able to provide proof to accuse the KGC for wrongdoing (that is, forging signatures
based on his identity). For convenience we say that a CLS scheme achieves level i security if the KGC
is of trust level i where i = 1, 2, or 3.
In traditional CLS schemes [1, 8], it seems that the KGC does not have the ability to forge signatures
since it can only derive user’s partial-private-key. Most of schemes, for examples [1, 2, 7, 8, 13, 14, 16,
17, 20, 22, 24], address the security issue via two types of adversaries with different attack capabilities.
A Type 1 adversary is able to replace the public key of any user but cannot access the master-key of
KGC. Whereas a Type 2 adversary is able to access the master-key but cannot replace the public key
[5, 15, 23]. However, based on these two security models, CLS schemes can only achieve level 2 security.
In 2007, Hu et al. presented a generic construction, based on a new security model, which achieves level
3 security [15]. In 2011, Fan et al. based on Du and Wen’s scheme [8] and proposed an improved CLS
scheme [10]. They claimed their scheme can achieve level 3 security based on the same security model,
assuming that Boneh and Boyen’s short signature scheme [4] is secure.
The contribution of this paper is three-fold. Firstly, we show that the security model proposed by Hu
et al. fail to guarantee level 3 security by showing the scheme proposed by Fan et al. does not achieve
level 3 security. Secondly, a new security model for level 3 security is proposed. Thirdly, based on this
new security model, we propose a new CLS scheme which can provide strong non-repudiation, assuming
the computational Diffie-Hellman problem, the inverse computational Diffie-Hellman problem, and the
k-CAA problem are intractable.
The rest of this paper is organized as follows: Section II consists of some preliminaries, including a
generic construction of CLS scheme, security models, and some related work. In Section III, we discuss
Inverse Computational Diffie-Hellman (Inv-CDH) Problem[8]: Given a group G of order q, and
P, aP , compute 1
a
P , where P is a generator of G and a ∈ Z∗q .
k-CAA Problem[18]: Given a group G of order q, and an integer k, P ∈ G, sP, w1, w2 . . . , wk ∈
Z∗q,
1
s+w1
P, 1
s+w2
P, ..., 1
s+wk
P , find a pair {w, 1
s+w
P} such that w /∈ {w1, w2..., wk}, where s ∈ Z∗q is
unknown.
C. Du-Wen’s CLS scheme
The three phases of Du-Wen’s certificateless signature scheme [8] are as follows:
InitSetup:
• Setup: The KGC, takes a security parameter k as input of the setup algorithm and determines a
bilinear map eˆ : G1 × G1 → G2 where G1 is a cyclic additive group of prime order q with a
generator P , G2 is a cyclic multiplicative group of the same order, and two hash functions H1 :
{0, 1}∗ → Z∗q and H2 : {0, 1}∗ → Z∗q . Then the KGC randomly chooses s ∈ Z∗q as master-key
and sets master-public-key Ppub = sP . Finally, the KGC announces the system parameter params =
〈G1,G2, eˆ, q, g, P, Ppub, H1, H2〉 and master-key = s, where g = eˆ(P, P ).
• Set-Secret-Value: A user generates a random value rID ∈ Z∗q and sets rID as his secret value.
• Set-Public-Key: A user takes params, his secret value rID and identity ID as inputs, and computes
his public key pkID = rIDT where T = Ppub +H1(ID)P .
• Partial-Private-Key-Extract: The KGC takes params, master-key, a user’s identity ID, and the
corresponding public key pkID as inputs, and returns a partial-private-key DID = 1s+H1(ID)P to the
user.
• Set-Private-Key: A user computes his full private key skID = (DID, rID) from the user’s partial-
private-key DID and secret value rID.
CL-Sign: To generate a signature for a message m, a signer with private key skID, computes S =
1
rID+h
DID as the signature for the message where h = H2(m, pkID).
CL-Verify: To verify a signature S of a message m generated by a user with identity ID and public
key pkID, a verifier takes params, the public key pkID, the message m, the user’s identity ID, and the
signature S as inputs, then computes h = H2(m, pkID), T = Ppub +H1(ID)P and accepts this signature
if and only if eˆ(S, pkID + hT ) = g.
D. Fan et al.’s scheme
Fan et al. analyzed Du-Wen’s scheme and showed that it is unable to achieve level 3 security [10].
They modified Du-Wen’s scheme and proposed another CLS scheme as follows:
Setup: The KGC takes a security parameter k as input of the setup algorithm and determines a bilinear
map eˆ : G1×G2 → GT where G1 and G2 are cyclic additive groups of prime order q with generators P1
and P2 respectively, GT is a cyclic multiplicative group of the same order with a generator g = eˆ(P, P ),
and two hash functions H1 : {0, 1}∗ → Z∗q, H2 : {0, 1}∗ ×G2 → Z∗q . Then the KGC randomly chooses
s ∈ Z∗q as master-key and sets master-public-key Ppub = sP . Finally, the KGC announces the system
parameters params = 〈G1,G2,GT , eˆ, q, P1, P2, g, Ppub, H1, H2〉.
Set-Secret-Value: A user generates a random value r ∈ Z∗q and sets r as his secret value.
Set-Public-Key: A user takes params and his secret value r as inputs, and computes pkID = rP2 and
pk′ID = r(Ppub +QIDP2) where QID = H1(ID). (pkID, pk′ID) is the user’s public key.
Partial-Private-Key-Extract: The KGC takes params, master-key and a user’s identity ID as inputs,
then outputs a partial-private-key DID = 1s+QID+H1(ID||pkID)P1 to the user.
Set-Private-Key: A user takes his partial-private-key DID and secret value r as inputs, and sets his
full private key as skID = (DID, r).
CL-Sign: To sign a message m, a signer, with private key skID, computes S = 1r+hDID as the signature
for the message m where h = H2(m, pkID).
• The private key (both secret value and partial private key) of ID∗ and the signature S∗ have never
been queried.
• The public key pk∗ has never been replaced.
Game II: A2 interacts with Challenger C.
Setup: C performs Setup by inputing a security parameter to obtain the master-key and the system
parameter params. C sends params and the master-key to A2.
Attack: A2 can adaptively perform the following polynomially bounded queries.
• Public-Key query: A2 can query for the public key of any user with identity IDi. C will return the
public key pki of that user.
• Secret-Value query: A2 can query for the secret value of any user with identity IDi. C will return
the secret value ri of that user to A2.
• Sign query: A2 can query for the signature Si corresponding to a message mi, a user with identity
IDi and public key pki. C will generate Si, and return it to A2.
Forgery: A2 outputs a tuple (S∗,m∗, ID∗, pk∗) where S∗ is a signature for the message m∗ correspond-
ing to the identity ID∗ and public key pk∗.
A2 wins the game if and only if the following conditions hold.
• The forged signature S∗ is valid for the message m∗ when verified using params, identity ID∗ and
public key pk∗.
• The secret value of ID∗ and the signature S∗ have never been queried.
B. Existential unforgeability for insiders
A legitimate user in a CLS scheme can try to forge a key pair by attacking the Partial-Private-Key-
Extract algorithm. We use the following game to model this attack.
Game III: A3 interacts with Challenger C. A3 is a legitimate but malicious user who wants to obtain
more then one key pair out of his identity.
Setup: The challenger C runs Setup to generate the system parameters and sends them to A3.
Attack: A3 can query for (1) the public key pkID of any user with identity ID, (2) the secret value
rID of ID, and (3) the partial-private-key of ID. C will return the partial-private-key DID, the public key
pkID, or the secret value rID to A3.
Key-Forgery: A3 outputs a key pair (pk′ID∗ , DID∗) for identity ID∗.
A wins this game if and only if the following conditions hold.
1. The key pair (pk′ID∗ , DID∗) is valid.
2. The partial private key DID∗ , corresponding to identity ID∗ and public key pk′ID∗ , has never been
queried.
3. pk′ID∗ 6= pkID∗ where pkID∗ has been queried before.
Thus, if A3 wins Game III, then A3 can generate another key pair without formally interacting with
the KGC.
Most schemes are shown to achieve level 3 security based on the above three games. However, restricting
a user to have a unique key pair does not prevent him from forging a signature which can be verified by
a different public key without knowing the corresponding private key. For example, Fan et al.’s scheme
does not achieve level 3 security despite of the fact that the scheme is shown to be secure under certain
security models (Game I, II, and III) [6]. Assume Alice is an adversary who is also a user with identity
IDA. The attack goes as follows:
1. Alice sets her secret value rA and two public key components pkA and pk′A as in Section II-D.
2. Alice obtains her partial-private-key DA from the KGC, then she sets her full private key skA =
(DA, rA).
not have other public keys, so he cannot generate a forged signature to incriminate the KGC. Therefore,
this certificateless signature scheme provides strong non-repudiation.
IV. A CERTIFICATELSS SIGNATURE SCHEME FOR STRONG NON-REPUDIATION
In this section, we present a new CLS scheme, called CLS-SNR, and show that it provides strong
non-repudiation based on the above security models.
A. The proposed scheme (CLS-SNR)
The three phases of CLS-SNR are as follows:
InitSetup:
• Setup: The KGC determines a bilinear map eˆ : G1 × G1 → G2 where G1 is a cyclic additive
group of prime order q with a generator P , G2 is a cyclic multiplicative group of the same order,
and three hash functions H1 : {0, 1}∗ → Z∗q, H2 : {0, 1}∗ → Z∗q , and H3 : {0, 1}∗ → G1. Then it
randomly chooses s1, s2 ∈ Z∗q(s1 6= s2) as master-key, and then sets (Ppub1, Ppub2) as the master-
public-key where Ppub1 = s1P and Ppub2 = s2P . Finally, it publishes the system parameter params =
〈G1,G2, eˆ, q, P, Ppub1, Ppub2, H1, H2, H3〉.
• Set-Secret-Value: A user with identity ID, sets a random value rID ∈ Z∗q as his secret value.
• Set-Public-Key: A user, based on params, his secret value r and identity ID, computes his public
key pkID = rT where T = Ppub1 +H1(ID)P .
• Partial-Private-Key-Extract: The KGC, based on params, master-key, user’s identity ID, and
public key pkID, computes and returns a partial-private-key DID = s2s1+H1(ID)H3(ID, pkID) to the
user with identity ID.
• Set-Private-Key: A user computes his full private key skID = (DID, rID) where DID is the user’s
partial-private-key obtained from the KGC and rID is his secret value.
CL-Sign: To generate a signature for a message m, a signer with private key skID, computes S =
1
rID+h
DID as the signature for the message m where h = H2(m, pkID).
CL-Verify: To verify a signature S of a message m generated by a user with identity ID and public
key pkID, a verifier takes params, the public key pkID, the message m, the user’s identity ID, and the
signature S as inputs, then computes h = H2(m, pkID), T = Ppub1+H1(ID)P and accepts this signature
if and only if eˆ(S, pkID + hT ) = eˆ(H3(ID, pkID), Ppub2).
The correctness of the signature verification follows from the following equation.
eˆ(S, pkID + hT )
= eˆ(S, rIDT + hT )
= eˆ(
1
rID + h
DID, (rID + h)T )
= eˆ(DID, T )
= eˆ(
s2
(s1 +H1(ID))
H3(ID, pkID), Ppub1 +H1(ID)P )
= eˆ(
s2
(s1 +H1(ID))
H3(ID, pkID), s1P +H1(ID)P )
= eˆ(s2H3(ID, pkID), P )
= eˆ(H3(ID, pkID), s2P )
= eˆ(H3(ID, pkID), Ppub2)
Finally, C sends DIDi to A and then inserts the tuple 〈IDi, ?,DIDi , ?〉 into the K-table.
Key-Forgery: A generates a partial-private-key DID∗ and a public key pk′ID∗ . If (ID∗, pk′ID∗) corre-
sponds to c∗ 6= 0 in the H3-table and pk′ID∗ = pkID∗ in the K-table then C aborts and terminates. When
A successfully forges a valid partial-private-key DID∗ where DID∗ = α∗s1+w∗ (abP ), C is able to use A’s
forgery to compute
abP = (s1 + w
∗)α∗−1DID∗ .
Therefore, C can successfully solve the CDH problem if the following two events occurred simultane-
ously:
• E1: C does not abort in any A’s queries during the Attack phase. That is, C does not abort in any
A’s partial-private-key queries.
• E2: C does not abort in Key-Forgery.
Claim 1. The probability that C does not abort in any A’s partial-private-key queries is at least 1/e
where e is the base of the natural logarithm.
Proof: The probability that ci = 0 in each of the partial-private-key query is 1qH3 . Thus, Pr[E1] =
(1− 1
qH3
)qH3 ≥ 1/e.
Claim 2. The probability that C does not abort in Forgery is 1
qH3
· q−1
q
.
Proof: Assume A outputs a forged key pair (DID∗ , pk′ID∗). Then C does not abort if (ID∗, pk′ID∗)
corresponds c∗ = 0 and pk′ID∗ 6= pkID∗ . The probability of that (ID∗, pk′ID∗) corresponds to c∗ = 0 is
1
qH3
. The probability of pk′ID∗ 6= pkID∗ is q−1q . Hence, Pr[E2] = 1qH3 ·
q−1
q
.
Let q−1
q
= 1
γ
. By Claim 1 and Claim 2, C does not abort with probability Pr[E1]Pr[E2] ≥ 1eqH3γ . Let
the running time of A be t. Then the running time of C is t′ < t + (qH3 + qpk)tsm, where tsm is the
running time of computing a scalar multiplication in G1. Hence if A runs in polynomial time so does C.
Therefore, C solves the CDH problem with probability ²′ ≥ 1
eqH3γ
² where ² is the probability of A to win
Game III.
Since CDH problem is assumed to be intractable, ²′ is negligible. Hence, ² is negligible. That is, there
is no adversary, running polynomially probabilistic time algorithms, has non-negligible probability to win
Game III in CLS-SNR.
In the following, we show that a user with identity ID and key pair (pkID, skID) can only generate
signatures which are valid when verified using params, identity ID and public key pkID in CLS-SNR.
Lemma 3: Assume that the Computational Diffie-Hellman problem is intractable. Then no adversary,
running polynomially probabilistic time algorithms, has non-negligible probability to win Game IV.
Proof: Suppose an adversary A in Game IV is able to existentially forge a signature which is valid
when verified using a replaced public key in CLS-SNR. Then we can construct a probabilistic polynomial
time algorithm C which solves the CDH problem by running A and supplying correct responses to A’s
queries as defined in Game IV.
Assume the challenger C is given a random instance of the CDH problem: Given P, aP, bP ∈ G1,
compute abP , where a, b ∈ Z∗q and are unknown. Now C and A play the roles of the challenger and
adversary respectively in Game IV. Eventually, C may base on A’s forgery to solve this instance of the
CDH problem. Assume A will make at most qH3 H3 queries, qpk public key queries, and qS sign queries.
Setup: C randomly chooses s1 ∈ Z∗q and sets Ppub1 = s1P and Ppub2 = aP (taking from the CDH
instance). It then gives params to A where params = (G1,G2, eˆ, Ppub1,
Ppub2, P,H1, H2, H3). C will maintain four initially empty tables: the H1-table, the H2-table, the H3-table,
and the K-table containing tuples of 〈IDj, wj〉, 〈mj, pkIDj , hj〉,
〈IDj, pkIDj , Qj, αj, cj〉, and 〈IDj, pkIDj , DIDj , rIDj〉, respectively.
– E1: C does not abort in any A’s query.
– E2: C does not abort in Sign-PK-Forgery.
Claim 1. The probability that C does not abort in any A’s queries in Attack is at least 1/e2.
Proof: The probability that ci = 0 in each of the H3 query or the partial-private-key query is
1
qH3
. Thus, Pr[E1] = ((1− 1qH3 )
qH3 )2 ≥ 1/e2.
Claim 2. The probability that C does not abort in Forgery is 1
qH3
· q−1
q
.
Proof: Assume A outputs a valid signature S∗ and a public key pkID∗ . Then C does not abort
if (ID∗, pk′ID∗) corresponds to c∗ = 0 and pk′ID∗ 6= pkID∗ . The probability of that (ID∗, pk′ID∗)
corresponds to c∗ = 0 is 1
qH3
. The probability of pk′ID∗ 6= pkID∗ is q−1q . Hence, Pr[E2] = 1qH3 ·
q−1
q
.
Let q−1
q
= 1
γ
. By Claim 1 and Claim 2, C does not abort with probability ²′ = Pr[E1]Pr[E2]² ≥ 1e2qH3γ ²
where ² is the probability of A to win Game IV. Let the running time of A be t. Then the running
time of C is t′ < t + (qH3 + qpk + qS)tsm + qStinv, where tsm is the running time of computing
a scalar multiplication in G1, and tinv is the running time of performing an inversion computation
in G1. Hence if A runs in polynomial time so does C. Therefore, C solves the CDH problem with
probability ²′ ≥ 1
e2qH3γ
².
Since CDH problem is assumed to be intractable, ²′ is negligible. Hence, ² is negligible. That is, there
is no adversary, running polynomially probabilistic time algorithms, has non-negligible probability
to win Game IV in CLS-SNR.
By Lemma 1, 2, and 3, and Theorem 1, we have the following
Theorem 2: CLS-SNR provides strong non-repudiation.
C. Discussions
Public key cryptography requires a tool to help authenticate public keys. The certificates and public
key infrastructure (PKI), created by a trusted third party, are commonly adopted in traditional PKC. The
public keys of ID-based Public Key Cryptography (ID-PKC) are strings that identify the users [3]. The
ID-PKC requires a trusted authority to generate secret keys and send them to users securely. Due to key
escrow, identity-based signature (IBS) schemes can only offer weak non-repudiation services. Like ID-
PKC, CL-PKC does not require the use of digital certificates to guarantee the authenticity of public keys.
Most CLS schemes achieve level 2 security based on Game I and Game II. However, for security level 3,
CLS schemes must be proved based on Game I, Game II, Game III, and Game IV. Table I summarizes
the results of comparisons among traditional IBS, certificate-based signature (CBS) [11], and several CLS
schemes [1, 8, 10].
TABLE I
COMPARISONS
IBS CBS AP-CLS[1] DW-CLS[8] FHH-CLS[10] Proposed
Security Level 1 3 2 2 2 3
Game I N/A N/A © © © ©
Game II N/A N/A © © © ©
Game III N/A N/A × × © ©
Game IV N/A N/A × × × ©
V. CONCLUSIONS
Public key cryptography has found many applications in our modern society. To guarantee the au-
thenticity of public keys, we need a trusted third party (TTP). In 1991, Girault defined three trust levels
– If IDi corresponds to ci = 0 in the H1-table, C aborts and terminates.
– Otherwise, C goes back to perform H1, H3 queries and bases on the H1-table and the-H3 table to
determine and return the partial-private-key DIDi to A where DIDi = s2αiWi and Wi = 1s+wiP
is taken from the given k-CAA problem, and αi is taken from the H3-table. Finally, C inserts
〈IDi, ?, ?,DIDi〉 into the K-table.
• Public-Key replacement: For any user with public key pkIDi , A has the ability to set a new secret
value r′IDi and the corresponding public key pk
′
IDi
, then replace pkIDi with pk′ID. If IDi corresponds
to ci = 0 in the H1-table then C aborts and terminates.
• Sign query: A can query for the signature, Si, generated by a user with identity IDi for a message
mi. C will generate a signature Si corresponding to IDi,mi and public key pki.
If Si has been queried before then C will return the previous result to A. Otherwise, C does the
following:
– If IDi corresponds to ci = 0 in the H1-table then C aborts and terminates.
– Otherwise, C will generate the signature Si by computing Si = s2αirIDi+hiWi based on H1-table,
the H2-table, the H3-table, and the K-table.
Forgery: A forges a signature, S∗ of a message, m∗, and a corresponding public key pkID∗ . If the
identity ID∗ corresponds to c∗ 6= 0 in the H1-table then C aborts and terminates. If A successfully forges
a valid signature, S∗ of a message, m∗ where S∗ = s2α∗
(rID∗+h∗)(s+w∗)
P , h∗ corresponds to m∗ and pkID∗
from H2-table. Thus C can use A’s forgery to compute 1s+w∗P = (rID∗ + h∗)(s2α)∗−1S∗.
Therefore, C can successfully solve the k-CAA problem if the following two events occurred simulta-
neously:
• E1: C does not abort in any A’s query.
• E2: C does not abort in Sign-PK-Forgery.
Claim 1. The probability that C does not abort in any A’s partial-private-key query, secret-value query,
and public-key replacement is at least 1/e3.
Proof: The probability of asking DID and rID corresponding to c = 0 is 1qH1 . And the probability
of replacing pkID corresponding to c = 0 is 1qH1 . Thus, Pr[E1] = ((1−
1
qH1
)qH1 )3 ≥ 1/e3, where e is the
base of the natural logarithm.
Claim 2. The probability that C does not abort in Forgery is 1
qH1
.
Proof: Assume A outputs a forged key pair (DID∗ , pkID∗). Then C does not abort if the corresponding
c∗ = 0. Hence, Pr[E2] = 1qH1 .
By Claim 1 and Claim 2, C does not abort with probability ²′ = Pr[E1]Pr[E2]² ≥ 1e3qH1 ² where ² is the
probability of A to win Game I.
Let the running time of A be t. Then the running time of C is t′ < t+(qH3+2qpk+qS)tsm+qStinv, where
tsm is the running time of computing a scalar multiplication and tinv be the running time of performing
an inversion computation in G1. Hence if A runs in polynomial time so does C. Therefore, C solves the
k-CAA problem with probability ²′ ≥ 1
qH1e
3 ² where ² is the probability of A to win Game I.
Since the k-CAA problem is assumed to be intractable, ²′ is negligible. Hence, ² is negligible. That is,
there is no Type 1 adversary can existentially forge a valid signature in CLS-SNR.
Lemma 5: Assume that the the the Inv-CDH problem is intractable. Then no adversary, running poly-
nomially probabilistic time algorithms, has non-negligible probability to win Game II in CLS-SNR.
The proof is similar to that of Du-Wen’s CLS scheme [8], hence omitted.
REFERENCES
[1] Al-Riyami, S., and Paterson, K.: ‘Certificateless public key cryptography’, Proc. ASIACRYPT’03,
LNCS 2894, 2003, Springer-Verlag, pp.452-473.
國科會補助計畫衍生研發成果推廣資料表
日期:2012/10/18
國科會補助計畫
計畫名稱: 免憑證式公開金鑰密碼系統信任層級之探討。
計畫主持人: 劉兆樑
計畫編號: 100-2221-E-468-014- 學門領域: 資訊安全
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
