  
2 
1. Introduction 
Advances in cryptography provide information security on the Internet. Encryption systems 
ensure confidentiality of message transmission, while digital-signature techniques ensure authenticity 
and integrity of information. These factors play a significant role in information security. 
Conventional handwritten signatures are increasingly being replaced by digital signatures, which are 
widely used in the internet society. Since W. Diffie and M. Hellman initially proposed the digital 
signature method in 1976 [1], scholars later developed various digital signature methods, including 
RSA, ElGamal, and DSS, which form the basis of the methods presented in this study. However, in 
practice people have different requirements with regard to digital signatures. Various digital signatures, 
such as group signatures, ring signatures [2], blind signatures, proxy signatures [3], threshold 
signatures [4] and signcryption [5], had been designed to meet different needs. 
Owing to the fact that in today’s society most electronic signature application are in business or 
company department and other groups, therefore legal signatory is composed of several signatures. To 
enable co-signatory, group signature technology is increasingly gaining importance. This study mainly 
focuses on researching and developing various types of group signature, including group threshold 
signature, ring signature, and group anonymous signcryption based on ring signature. 
1.1. Group-oriented threshold signature 
The concept of group-oriented cryptography, introduced by Desmedt [20] in 1987, is related to 
secure communication between different groups. Group-oriented schemes have been developed into 
threshold signature schemes. In relation to the application of the perfect secret sharing scheme [21] 
developed by Shamir, Harn [22] constructed a (t, n) threshold signature scheme based on Lagrange 
polynomials. The so-called (t, n) threshold signature scheme is one in which only t members of a 
n-member group can represent the whole group and validly sign for the group. The t value is a 
threshold from 1 to n (1 ≤  t ≤  n).  Much research has recently been conducted in this area 
[23-29]. 
However, some of these schemes have no restrictions with regard to the verifiers. Wang et al. 
presented a (t, n) threshold signature scheme with (k, l) threshold shared verification [30], requiring a 
specified verifier. In other words, only the specified verifier can verify the group signature. In his 
scheme, k members of a specific l- verifier group can verify the group signature, where k is a threshold 
from 1 to l (1 ≤  k ≤  l). In 2002, Hsu et al. showed that the scheme violated the requirements for  
(k, l) threshold shared verification [31]. That is, an attacker can validate the group signature without 
other members of the verifier group. Hsu also stated that the private key of the signer can be easily 
retrieved from the individual signature. Hsu proposed an improvement to overcome these two security 
problems. The improvement inclines the solution to select randomly a number through a system center 
(SC) to solve the aforementioned problems. However, the performing of an additional operation 
through the SC every time an individual signature is generated is inefficient. Therefore, we present in 
Section 3.1 a scheme based on ECC [32-35] that provides both security and efficiency. The additional 
operation, which involves the SC in the generation of each individual signature, is avoided. 
1.2. Ring signature 
The ring signature scheme [2] was developed by R. Rivest et al. in 2001, which was created from 
the concept of “How to leak a secret.” Ring signature was a special group signature without want of 
creating a group; in spite of the management of an administrator, a signer only required randomly 
choosing a portion of the public keys of members and then creating a ring signature through his 
  
4 
ECC. Two families of elliptic curves, prime curves defined over Zp and binary curves constructed over 
GF(2n), are used in cryptographic applications. Quoting Fernandes [18], “prime curves are best for 
software applications because the extended bit-fiddling operations needed by binary curves are not 
required; and that binary curves are best for hardware application, where it takes remarkably few logic 
gates to create a powerful, fast cryptosystem.” 
In this study, the applied elliptic curve over Zp, defined modulo a prime p, is the set of solutions 
(x, y) to the equation Ep(a, b): y2 = x3 + ax + b (mod p), where a and b ∈ Zp and 4a3 + 27b2 mod p ≠ 0. 
The condition 4a3 + 27b2 mod p ≠ 0 is necessary to ensure that x3 + ax + b (mod p) has no repeated 
factors, meaning, a finite abelian group can be defined based on the set Ep(a, b). The definition of an 
elliptic curve also includes a point at infinity denoted as O. This point is the third point of intersection 
of any straight line with the curve; such a line has points of intersection of the form (x, y), (x, −y) and 
O. Not every elliptic curve over Zp can be applied in cryptographic applications. Figure 1 (taken from 
[19]) shows an example of the elliptic curve, where the elliptic curve is defined by the equation, y2 = 
x3 + x + 1 (mod 23). 
 
Figure 1: Example of elliptic curve in case of y2 = x3 + x + 1 (mod 23) 
The example depicted in Fig. 1 has a = 1 and b = 1 so that 4a3 + 27b2 mod 23 ≡ 8 mod 23 ≠ 0. 
Thus, the elliptic group E23(1, 1) consists of the points shown in Table 1, extracted from [19]. 
Table 1: Points over the elliptic curve E23(1,1) 
(0, 1) (6, 4) (12, 19) (0, 22) (6, 19) (13, 7) (1, 7) (7, 11) (13, 16)
(1, 16) (7, 12) (17, 3) (3, 10) (9, 7) (17, 20) (3, 13) (9, 16) (18, 3) 
(4, 0) (11, 3) (18, 20) (5, 4) (11, 20) (19, 5) (5, 19) (12, 4) (19, 18)
Addition operation has been used over Ep(a, b). For all points P and Q ∈ Ep(a, b), the rules for 
addition over Ep(a, b) are defined as follows. 
4
2
-4
-2
2 3 4 510-2 -1
P
Q
-(P + Q)
(P + Q)
0
  
6 
generate a ring signature for a particular message, a signer can dynamically choose members and the 
number of members according to the situation, and then uses the public key of other members and the 
individual secret key. Such a system does not require a manager to handle affairs. A verifier can only 
determine the group that the signer joins but not the identity related to the signer. The above-mention 
is also the major difference between ring signature and group signature. 
 
2.2.1 Ring signature algorithm and ring signature verification algorithm 
Suppose that the said scheme is based on Public Key Infrastructure (PKI). All users hold a public 
key Pk and the corresponding secret key Sk that is registered with PKI certificate authority.  
For the operation of ring signature algorithm, suppose the number of members of the signer 
group (also called ring) is r. The signer uses the chosen members’ public keys P1, …, Pr and the 
individual secret key Ss to sign the message m, generating a ring signature σ for the said message.  
To the operation of ring verification algorithm, the verifier inputs (m, σ), and then judges whether 
the signature is real or fraud according to the output, True or False.  
2.2.2 Definition of combination function 
Combination function, which is used not only to improve performance but also security, must 
possess properties like one way, single input inversion, and multiple inputs in solvability. Now we 
firstly define an invertible combination function z, such as Eqn.1.2.1 [2] below. It can be verified that 
z is a combination function for any index value s using Eqn. 1.2.2.  
))))((((),,( 111, LLL vyEEyEyEyyCz kknknknvk ⊕⊕⊕⊕== −   （Eqn.1.2.1） 
)))(())((( 1
11
1
1 LLL vyEzEyEyEy kknksks ⊕⊕⊕⊕⊕= −−+−   （Eqn.1.2.2） 
The combination function can be employed to output a unique value ys as the public key of the 
signer s, where the inputs involve an initial value v, the secret key k, and a series of variables of length 
l. 
2.2.3 Ring signature generation stage 
Suppose signer s employs the secret key Ss and the public keys P1, P2, …, Pr of all group 
members. Given a message m, the generation of ring signature is as follows. 
Step 1: Calculate corresponding secret key k =H(m) or k = H(m, P1, P2, …, Pr); 
Step 2: Randomly select an initial value v from {0, 1}b; 
Step 3: Randomly select xi (1 < i < r, where r ≠ s) from {0, 1}b and calculate yi as follows; 
yi = gi(xi), where ⎪⎩
⎪⎨
⎧
⎩⎨
⎧ ≤++=
=
 else                      
2 )1(  if   )(
      )(  
  
m
nqrfng
xg
nqx
b
iiiiii
ii
iii
 
Step 4: Calculate ys using Ck, v (y1, y2, …, yr) = v; 
Step 5: Calculate the invertible function xs = gs–1(ys) of ys = gs (xs); 
  
8 
3.1. The group-oriented threshold signature scheme 
The proposed scheme requires a system center (SC) to generate the necessary parameters of the 
system and users.  Let a group of n signers be represented by },,,{ 21 snsss uuuG K= ,  an association 
of any t members of which ( nt ≤≤1 ) can validly sign a message for the whole group; let a group of  
l verifiers be represented by },,,{ 21 vlvvv uuuG K= , an association of any k members of which 
( lk ≤≤1 ) can validate the received group signature on behalf of the verifier group.  Then, these t 
signers jointly elect a clerk (CLK) from among themselves to validate all individual signatures and 
combine the t valid individual signatures into a group signature. The proposed scheme contains the 
following three phases: 
3.1.1 Parameter generation phase 
The SC is responsible for generating the required parameters of the system and the keys of the 
users. The generation phase involves the following. 
(1) a field size p, which is a large odd prime; 
(2) two field elements a and b pF∈ , which define the elliptic curve equation, E, over Fp, (i.e. 
)(mod32 pbaxxy ++=  where p > 3 and )(mod0274 23 pba ≠+ ); 
(3) a finite point G = (xg, yg) whose order is a large prime number over E(Fp), where G ≠ Ο (Ο 
denotes an infinite point ); 
(4) the order of G = q ; 
(5) a one-way hash function h; 
(6) two secret polynomials qaxaxaxaxf tt
t
ts mod)( 01
2
2
1
1 ++++= −−−− L  and 
qcxcxcxcxf kk
k
kv mod)( 01
2
2
1
1 ++++= −−−− L , where ]1,1[, −∈ qca ji  for 
1,,2,1,0 −= ti K  and 1,,2,1,0 −= kj K ; 
(7) a group private key 0)0( afs =  and a group public key GfY ss )0(=  for Gs; and a group 
private key 0)0( cfv =  and a group public key GfY vv )0(=  for Gv; 
(8) an individual private key )( sis xf  and a public key Gxfy sissi )(=  for each signer usi in Gs, 
where ni ,,2,1 K=  and xsi is the public value associated with each signer usi; 
(9) an individual private key )( viv xf  and a public key Gxfy vivvi )(=  for each verifier uvi in Gv, 
in which li ,,2,1 K=  and xvi is the public value associated with each verifier uvi. 
Then, the SC declares the system parameters p, E, G, q, h, ysi (for ni ,,2,1 K= ), yvi 
(for li ,,2,1 K= ), Ys, and Yv public. 
3.1.2 Individual signature generation and verification phase 
Consider t signers ( stss uuu ,,, 21 K ).  To validly sign message m, each signer usi ( ti ,,2,1 K= ) 
generates an individual signature, as follows. 
Step 1: Randomly select an integer ]1,1[ −∈ qbsi  to compute GbB sisi = , where Bsi is a point, 
and send the Bsi to the associates via a broadcast channel; 
Step 2: Combine all received Bsi ( ti ,,2,1 K= ) to obtain B, as follows. 
  
10 
and the group public key Ys of Gs; he or she then sends rvi to the associates via a secure channel, where 
)(
0
)(
,1
s
k
ijj vjvi
vj
vivvi YBxx
x
xfr +−
−= ∏
≠=
 
To validate the group signature for message m, each associated verifier computes r after 
receiving all rvi ( ki ,,2,1 K= ), as follows. 
),(
1
rr
k
i
vi yxrr == ∑
=
 
If the following determinant equation holds, then the group signature for message m is validated.  
BxsGYmhx rsb +=
?
)(  
Theorem 2: If the group signature indeed results from the valid signer group, then the signature 
verification equation holds.  
[Proof]               ∏
≠=
−−
−=
t
ijj
sir
sjsi
sj
sisbi qbxxx
x
xfmhxs
,1
mod
0
)()(  
                 ∏
≠=
−−
−=⇔
t
ijj
sir
sjsi
sj
sisbi GbxGxx
x
xfmhxGs
,1
0
)()(  
                 ∑ ∑ ∏ ∑
= = ≠= =
−−
−=⇔
t
i
t
i
t
ijj
t
i
sir
sjsi
sj
sisbi GbxGxx
x
xfmhxGs
1 1 ,1 1
)()
0
)()((  
                 BxYmhxsG rsb −=⇔ )(  
BxsGYmhx rsb +=⇔ )(  
 
3.2. Group anonymous signcryption 
Elliptic curve cryptosystem has the advantages of high security, low computation load, and small 
bandwidth requirement, while ring signature protects the signer with its anonymity feature. Integrating 
elliptic curve cryptosystem and ring signature herein, the outcome is a system with highly secure and 
efficient anonymous signcryption scheme. The process comprises four steps, namely system 
construction, generation of signcryption text, verification of signcryption text, and conversion of 
signcryption text to standard signature. 
3.2.1 System construction 
Let q denote a large prime number, E denote an elliptic curve, P denote a base point on the 
elliptic curve E with order q, and H denote a one-way hash function for resisting collision, where q, E, 
P, and H are public parameters, and Zq is a finite field with q elements. 
Let a group member set be A = {U1, U2, …, Un} under the ECC, the private keys of Q1, Q2, …, 
Qn are d1, d2, …, dn respectively. The corresponding public keys Q1, Q2, …, Qn satisfies Qi = diP, 
where i = 1, 2, …, r. The private and public keys of verifier Uv are dv and Qv = dvP, respectively. 
3.2.2 Generation of signcryption text 
Let a member Ui in A send the signcryption text of message m to verifier Uv. Ui executes the 
  
12 
keys GfY ss )0(=  and GfY vv )0(= .  An attacker can forcibly derive a signer’s private key fs(xsi) or  
the verifier’s private key fv(xvi) from the commitment value v
t
ijj sjsi
sj
sissisi Yxx
x
xfbr )
0
)((
,1
∏
≠= −
−+=  or 
)(
0
)(
,1
s
k
ijj vjvi
vj
vivvi YBxx
x
xfr +−
−= ∏
≠=
.  Such attacks are infeasible against the ECDLP.   
4.1.2 Forgery attack 
Assume that an attacker intends to forge a signature si for going under the signer usi’s name. 
Firstly, the attacker may randomly select an integer bsi so as to compute Bsi; then he forges a 
commitment value rsi.  Since he doesn’t hold the signer usi’s private key fs(xsi), he disables to generate 
a valid signature si to meet with the following verification equation: 
sirisi
t
ijj sjsi
sj
b BxGsyxx
x
mhx +=−
−∏
≠=
?
,1
0
)( . 
Or the attacker may intend to forge a group signature s for any arbitrary message m to make the 
following verification equation of group signature satisfiable: 
BxsGYmhx rsb +=
?
)(  
First of all, he may randomly select an integer xr, a false signature s and a point B = (xb, xb) so as 
to compute a value Q, where Q should satisfy both )(mhQ =  and the verification equation of group 
signature.  Nevertheless, due to the characteristic of a one-way hash function and the difficulty for 
solving the ECDLP, the possibility for successfully forging a valid Q can be said to be extremely 
trifling and minute.  Perhaps, the attacker may randomly select two integers xr and h(m) and a point 
B = (xb, xb) so as to derive a value s that makes the verification equation of group signature satisfiable.  
However, the difficulty for solving the ECDLP makes it infeasible. 
4.1.3 Equation attack 
Assume that an attacker intends to derive the signer usi’s private key fs(xsi) and secret parameter 
bsi from the generation equation of individual signature si below: 
∏
≠=
−−
−=
t
ijj
sir
sjsi
sj
sisbi qbxxx
x
xfmhxs
,1
mod
0
)()(  
Both fs(xsi) and bsi in the equation are unknown parameters, so such a kind of  attack in the 
above-mentioned cannot be feasible.  Even the attacker additionally increase a set of plaintext m′  
and the corresponding individual signature 'is  for providing help to derive fs(xsi) and bsi, another 
unknown parameter 'sib  will thus be brought; that is, the number of secret parameters will be always 
more than that of the equations obtained by the attacker.  This is the reason that such a attack destines 
to be failed.  Also, the attacker may derive both of the group private key fs(0) and secret parameter ∑
=
t
i
sib
1
 by combining t individual signatures into one shown as follows: 
∑ ∑
= =
−=
t
i
t
i
sirsbi qbxfmhxqs
1 1
mod))0()((mod  
In the equation, the attacker has to encounter two unknown number fs(0) and ∑
=
t
i
sib
1
, so he cannot 
successfully break the equation. 
 
  
14 
forgery signature, and nor find the order of requests on the ring. For the other mj, the algorithm B can 
easily imitate SIG so as to give a signature. Vector (c, s1, s2,…, sr) is output as their ring signature, 
simultaneously modifying the order of the random responses to enable the signatures of these 
messages to pass verification. Since B randomly selects the value following the ring structure to 
generate the signature for mj, A cannot propose requests that make B disable to select the value so that 
A might guess the value in advance.  
Algorithm B randomly selects an insertion point for Q following the direction of the ring, and 
takes the insertion point to satisfy the gap between the input and output values of two continuous hash 
operations in generating the final forgery signature. This approach also forces A to provide the 
corresponding s, which satisfies to Q = sP, thus sealing this gap during the signature forgery process. 
Since only B knows the random value Q, A does not recognize this “trap,” and refuses to provide the 
forged signature. 
The main difficulty is that A can determine the inverse using a one-way hash function and can 
also seal the ring using the SIG algorithm by following the direction that is easiest to compute. This 
difficulty can be overcome by noting that a gap always exists between the two H values in any valid 
signatures forged by A. Irrespective of the order followed by A when sending requests to B, B can still 
respond to these requests. Additionally, B can answer the second of two adjoining requests based on 
the input and output of the previous similar requests. Under this method, B needs only perform an 
addition operation on the two ends to obtain the desired value of Q, which also forces A to compute s 
such that it satisfies Q = sP in the final forgery process to seal the gap. 
B cannot determine which request was applied by A to the final forgery of signature, and can only 
guess from it. B can only attempt two guesses. The probability of success is 1/2T, where T denotes the 
total number of requests made by A. Consequently, B can compute, with non-negligible probability, 
the corresponding s that satisfies Q = sP and thus successfully solve the ECDLP. 
This finding reveals that if A can successfully propose a forged signature to B with a 
non-negligible probability, then B has a non-negligible probability of solving the ECDLP. This 
outcome contradicts the cognition toward the ECDLP. Therefore, the ECC-based ring signature cannot 
be forged, and the following theorem can be reached. 
4.2.2.2 Unforgeability of an anonymous ECC-based signcryption 
If a user U successfully forges an anonymous signcryption text, then he must be able to convert 
the signcryption to a ring signature to create a forged ECC-based ring signature. Such finding 
contradicts that we know in Section 4.2.2.1; that is, anonymous signcryption is unforgeable. 
4.2.3 Anonymity 
The difference between the proposed scheme and other signcryption schemes lies in anonymity 
of a signer. Considering the anonymity between the signer and verifier, on receiving the signcryption 
information, a verifier can authenticate the validity of the signcryption information, but fails to 
identify the signer. As to the anonymity between the signer and third party, after the verified 
signcryption information has been converted to a ring signature, a third party can only check which 
group the signature belongs to, and whether the signature is issued by a particular member of that 
group; the third party cannot determine the identity of the signer. In other words, neither the verifier 
nor a third party can identify a signer using the signcryption information. 
4.2.4 Undeniability 
When a conflict arises, the verifier can convert the signcryption text to a standard ring signature. 
  
16 
 
[5] Y. Zheng, Digital signcryption or how to achieve cost (Signature & Encryption) « Cost(Signature) 
+ Cost(Encryption), “Crypto'97, LNCS 1294, Springer-Verlag,” pp. 165-179, 1997. 
[6] J. M. Lee and W. Mao, Two birds one stone: signcryption using RSA, “Proc. of CT-RSA '03, 
Lecture Notes in Computer Science,” Vol. 2612, pp. 211-225, Springer-Verlag, 1998. 
[7] B. Libert and J.-J. Quisquater, New Identity Based Signcryption Schemes from Pairings, 
“ITW2003”, Paris, France, 2003. 
[8] D. H. Yum and P. J. Lee, New signcryption schemes based on KCDSA, “Proc. of ICISC '01, 
Lecture Notes in Computer Science,” Vol. 2288, pp. 205-317, Springer-Verlag, 2002. 
[9] P. S. Barreto, H. Y. Kim, and M. Scott, Efficient algorithms for pairing-based cryptosystems, 
“Advances in Cryptology—Crypto'02, LNCS 2442, Springer-Verlag,” pp.354-368, 2002. 
[10] S. D. Galbraith, K. Harrison, and D. Soldera, Implementing the Tate pairing, “ANTS 2002, 
INCS 2369,” pp.324-337, 2002. 
[11] F. Zhang and K. Kim, ID-based blind signature and ring signature from pairings, “Advances in 
Cryptology—Asiacrypt'02, LNCS 2501, Springer-Verlag,” pp.533-547, 2002. 
[12] C. Y. Lin and T. C. Wu, An identity-based ring signature scheme from bilinear pairings, 
“Cryptology ePrint Archive,” 2003. 
[13] S. Chow, L. Hui, and S. Yiu, Identity based threshold ring signature, “Information Security and 
Cryptology—ICISC 2004, LNCS 3506,” pp. 218-232, 2004. 
[14] J. Xu, Z. Zhang, and D. Feng, A ring signature scheme using bilinear pairings, “Information 
Security Applications, 5th International Workshop, WISA 2004, LNCS 3325,” pp. 163-172, 
2004. 
[15] S. Chow, S. Yiu, and L. Hui, Efficient identity based ring signature, “Cryptography and 
Network Security, Third International Conference, ACNS 2005, LNCS 3531,” pp. 499-512, 
2005. 
[16] Joseph K. Liu, Victor K. Wei, and Duncan S. Wong, A separable threshold ring Signature 
scheme, “Information Security and Cryptology—ICISC 2003, 6th International Conference 
Seoul, Korea, LNCS 2971,” pp. 352-369, 2003. 
[17] A. Cilardo, L. Coppolino, N. Mazzocca, L. Romano, “Elliptic curve cryptography engineering, 
Proceedings of the IEEE,” Vol. 94, No. 2, pp. 395-406, 2006. 
[18] A. Fernandes, Elliptic curve cryptography, Dr. Dobb's Journal, 1999. 
[19] W. Stallings, Cryptography and Network Security: Principles and Practice, 3rd Ed., Prentice   
Hall, 2003. 
[20] Y. Desmedt, Society and Group Oriented Cryptography: A New Concept, “Advances in 
Cryptology, Proc. Of Crypto’87,” 1987, pp.120-127. 
[21] A. Shamir, How to Share a Secret, “Commun. ACM,” Vol. 22, 1979, pp. 612-613. 
[22] L. Harn, Group-Oriented (t, n) Threshold Signature and Digital Multisignature, “IEE 
Proc.-Comput. Digit. Tech.,” Vol. 141, No. 5, 1994, pp. 307-313. 
  
18 
 
近五年已發表之相關期刊及研討會論文 
(A) 期刊論文 
1. Y. F. Chung, and K. H. Huang, "Chameleon Signature with Conditional Open Verification," 
Journal of Innovative Computing, Information and Control, Vol. 5, No. 7, July 2009. (SCI, 
EI) ( Impact Factor：1.537) 
2. Y. F. Chung, T. S. Chen, and H. F. Chen, "Cross Platform Layer for Public Key 
Infrastructure Interoperability," Journal of Innovative Computing, Information and Control, 
Vol. 5, No. 6, June 2009. (SCI, EI) ( Impact Factor：1.537) 
3. Y. F. Chung, Z. Y. Wu, and T. S. Chen, "Unconditionally secure cryptosystems based on 
quantum cryptography," Information Sciences, Vol. 178, No. 8, April 2008, pp. 2044-2058. 
(SSCI, SCI, EI) ( Impact Factor：1.003)  
4. Y. F. Chung, H. H. Lee, F. P. Lai, and T. S. Chen, "Access control in user hierarchy based on 
elliptic curve cryptosystem," Information Sciences, Vol. 178, No. 1, Jan. 2008, pp. 230-243. 
(SSCI, SCI, EI) ( Impact Factor：1.003) 
5. Y. L. Yu, Y. F. Chung, and T. S. Chen, "Electronic Signatures for Long-term Storage Purpose 
in Electronic Anamnesis," Journal of Innovative Computing, Information and Control, Vol. 
4, No. 11, Nov. 2008. (SCI, EI) ( Impact Factor：1.537) 
6. Y. F. Chung, T. S. Chen, and C. H. Liu, "Efficient Hierarchical Key Management Scheme 
for Access Control in the Mobile Agent," Journal of Innovative Computing, Information and 
Control, Vol. 4, No. 9, Sep. 2008, pp. 2375-2389. (SCI, EI) ( Impact Factor：1.537)  
7. Y. F. Chung, Z. Y. Wu, and T. S. Chen, "Ring signature scheme for ECC-based anonymous 
signcryption," Computer Standards and Interfaces, In Press, Accepted Manuscript, Available 
online 9 July 2008. (SCI, EI) ( Impact Factor：0.414) 
8. K. H. Huang, Y. F. Chung, C. H. Liu, F. P. Lai, and T. S. Chen, " A Conference Key 
Agreement Protocol with Fault-tolerant Capability," Computer Standards and Interfaces, In 
Press, Accepted Manuscript, Available online 18 May 2008. (SCI, EI) ( Impact Factor：
0.414) 
9. Y. F. Chung, K. H. Huang, and T. S. Chen, "Threshold Authenticated Encryption Scheme 
using Labor-division Signature," Computer Standards and Interfaces, In Press, Available 
online 6 March 2008. (SCI, EI) ( Impact Factor：0.414) 
 
