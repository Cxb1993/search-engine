行政院國家科學委員會專題研究計畫成果報告 
應用智慧型代理人與多層分散規劃於供應鍊中最佳存貨政
策之制定 
Applying intelligent agents and multi-level programming to the 
formulation of inventory policies in a supply chain 
計畫編號：NSC 94-2213-E-032-032 
執行期限：93 年 8 月 1 日至 95 年 10 月 31 日 
主持人：鄭啟斌   淡江大學資訊管理系 
共同主持人：詹智強   朝陽科技大學工業工程與管理系 
計畫參與人員：周盈宏、王喆 朝陽科技大學工業工程與管理系 
 
Abstract 
This track of research covers a two-year span and obtains three major results. In the 
first year, we used mixed inventory policies to determine ordering quantities for all 
members in a supply chain.   Each member’s agent chooses inventory policies from a 
set of candidate policies, and determines its ordering quantities for each period 
according to the chosen policies.  A genetic algorithm is formulated to search for the 
optimal combination of inventory policies to minimize the total costs of the whole 
supply chain over a time horizon.  A simple supply chain structure was adopted to 
illustrate and evaluate the performance of this approach. The result has been 
published in Chan et al. (2006). To cope with the dynamic nature of the supply chain, we 
further proposed using a fuzzy inventory controller to determine the ordering quantity for the 
members in a supply chain. The controller consists of a set of fuzzy rules, which allows the 
manager to summarize his/her experience of making ordering decision. Conventional 
proportional control laws are incorporated in the rules to arrive at final control actions. This 
approach was illustrated by a three tiers supply chain and simulated by a system dynamics 
model. Its result has been published in Cheng et al. (2006). In the second year, to increase 
information sharing between members in a supply chain and to achieve real-time control of 
the supply chain operations, we established a platform for supply chain members to exchange 
information of available capacities, production batches, and production statuses. A multi-level 
programming model is constructed to determine the ordering quantities of supply chain 
members. A practical case was used to illustrate this approach and software agents are 
implemented on this platform to carry out the tasks of information exchange. 
 
1. Introduction 
A supply chain usually consists, sequentially, of four types of organizations: retailers, 
to inventory decision in a supply chain, and determining production quantities of 
supply chain members by a multi-level programming model. These three parts of 
research are presented in the following sections. 
 
2. Formulating Ordering Policies in a Supply Chain by Genetic Algorithm 
In this study, we adopt the agent-based approach of Kimbrouh et al. (2002), but 
formulate a different ordering mechanism for agents by using mixed inventory 
policies.  In our approach, each agent in the supply chain will choose an inventory 
policy from a set of candidate policies, and determine its ordering quantity for each 
period according to the chosen policy.  In order to expedite the search of optimal 
mixed inventory policies, we will employ the genetic algorithm to search the 
combination of inventory policies of agents.  In our genetic algorithm, the search is 
usually more efficient than that of the “x + y” rule of Kimbrouh et al. (2002).  Since 
the choice of inventory policy is limited to a small number of alternatives (usually less 
than the range of y), and thus fewer bits are required to represent the choice.  For 
simplicity, a simplified supply chain, the MIT Beer Game, is adopted to illustrate our 
approach.   Since in the MIT Beer Game there is only one member in each tier of 
the supply chain, transportation costs are ignored. 
 
2.1 Inventory policies 
In our approach, the agent of each member in the supply chain chooses an inventory 
policy from a set of candidate policies to determine how much and when to order.  
The candidate policies include: 
(i) (s, S) system: the stock level is continuously reviewed, where s is the reorder 
point, and S is the maximal stock level; when the inventory is less than s, then 
order the quantity of (S - s). 
(ii) (s, Q) system: similar to the (s, S) system, but the order quantity is fixed to Q. 
(iii) Order to S system: periodically review the inventory; and issue an order to 
maintain the stock level at S. 
(iv) Order Q: order with fixed quantity of Q every period. 
 
In addition to the above inventory policies, the “one for one (1-1)” policy – order 
whatever is ordered from the immediate downstream – is also adopted as an ordering 
policy.  The “one for one” policy is reported as the optimal ordering policy for a 
supply chain with deterministic demands (Kimbrou et al. 2002). 
 
2.2 Genetic algorithm for formulating ordering policy 
Though it is possible to find a combination of policies that minimizes the total cost of 
⎩⎨
⎧ <×−=
.otherwise,0
,0)( if,)(
)(
tINPtIN
tSC iiii      (2)   
The ordering cost of each organization at time t is  
⎩⎨
⎧=
.otherwise,0
,supplier its order toan  places ion organizati if,
)( ii
R
tOC  (3) 
At last, the total cost of the whole system over M periods is defined as 
∑ ∑
= =
++= N
i
M
t
iii tOCtSCtICTC
1 1
).()()(     (4) 
2.2.3 Mixed-policy algorithm (MPA) 
The genetic algorithm for policy selection is formulated as follows. 
Step 0. Initialization. 
Randomly generating a number of strings to form the initial string pool. 
Setting generation counter g = 0. 
Step 1. Fitness of each string 
If all strings in the current pool are evaluated, then go to Step 3; otherwise 
set period counter t = 1 and go to Step 2. 
Step 2. Ordering policies 
Every agent places order according to its current policy. 
Calculate ICi(t), SCi(t), and OCi(t), ∀i. 
t = t +1. 
If t ≤ M then go to Step 2; otherwise 
calculate TC, pick the next string and go to Step 1. 
Step 3. Generating new strings 
Conduct operations of reproduction, crossover, and mutation. 
g = g + 1. 
Step 4. If stop criterion not true, then go to Step 1; otherwise, 
choose the best string so far. 
Stop. 
 
In Step 3 of the algorithm, a roulette wheel selection is used for the reproduction 
operation; the single point crossover is adopted to generate new strings from coupled 
old strings; a random bit flipping is used for the mutation operation.  In Step 4, the 
stop criterion can be a maximal number of generations or a convergent indicator.   
2.3 Experiments 
Four rounds of experiments were conducted by playing the MIT Beer Game with our 
proposed algorithm and the “x + y” rule.  In the first round of experiments, we 
chosen policies of agents.  In all the 20 replications, both algorithms find the optimal 
“one-for-one” policy1, but our algorithm requires less computational time.  However, 
this result is not surprising because our algorithm searches the solution in a much 
smaller space (i.e. the combination of policies) than the search space (i.e. all possible 
ordering quantities) of the algorithm of Kimbrouh et al. (2002). 
 
Table 1 Comparison of MPA and the “x + y” rule for the case of deterministic 
demands 
Policy Alg. No. (g) Time 
(sec) 
Total 
cost Retailer Wholesaler Distributor Manufacturer
MPA 61.2 1.2 3936 1-1 1-1 1-1 1-1 
x + y 4769.7 7.6 3936 x + 0 x + 0 x + 0 x + 0 
Note: the initial size of population is 20 strings for both algorithms 
2.3.2 Experiment 2 
The goal of the second experiment is to test the adaptability of our agents to fluctuant 
demands.  The experiment is divided to four cases, each with different degree of 
demand fluctuation.  Demands of customers in the four cases are randomly 
generated from four uniform distributions with different ranges: [0, 15], [0, 30], [0, 
60], and [0, 120].  The lead-time is fixed for all cases and the other setups are the 
same as those in Experiment 1.  One of the realizations of customer demands is 
illustrated in Fig. 1. 
Customer Order vs. Week
0
2
4
6
8
10
12
14
16
1 4 7 10 13 16 19 22 25 28 31 34
Week
C
us
to
m
er
 O
rd
er
 
Figure 1. Random customer demands from uniform distribution [0, 15] 
 
Twenty replications of simulation of the Beer Game are conducted respectively 
with the two algorithms for each case of demand range.  Their average performances 
                                                 
1 “x+0” is equivalent to “one-for-one.” 
represent an agent’s policy for customer demand fluctuating within the range of [0, 
15], and hence the search space easily expanded from 224 for four agents to 248 for 
eight agents.  On the other hand, our algorithm only requires 3 bits to represent an 
agent’s choice, so the search space grows moderately from 212 to 224. 
 Both deterministic demands and stochastic demands (the case of demand range 
[0, 15]) are set up for simulation.  Their average performances of twenty replications 
are shown in Table 4. From Table 4, we see that our algorithm is much faster than the 
“x + y” rule, and in particular, for the case of stochastic demands our algorithm can 
find much better solution than the “x + y” rule.  Moreover, comparing the results 
with those in Tables 2 and 3, computational time of the “x + y” rule increases 
dramatically from 7.6 sec to 132.1 sec for the case of deterministic demands, and 
increases from 1.23 sec to 151.7 sec for the case of stochastic demands.  At the same 
time, the computational time of our algorithm only slightly increases for both cases 
when the number of agents increases from 4 to 8.  This result demonstrates that our 
algorithm is more computationally efficient. 
 
Table 4 Simulation of a supply chain with eight agents 
Deterministic demands Stochastic demands Algorithm 
Time (sec) Total cost Time (sec) Total cost 
MPA 3.3 7728 4.6 9088 
x + y 132.1 7728 151.7 11948 
 
3. Applying Fuzzy Logic Control to Inventory Decision in a Supply Chain 
To cope with the dynamic nature of the supply chain, some studies (Perea et al. 2000, 
Perea-López et al. 2003, Samanta and Al-Araimi 2001, Sheu 2005) considered the 
inventory control as an adaptive control problem. The demand fluctuation from a 
downstream member is viewed as the turbulence to the system and the task is to 
maintain the inventory at an appropriate level by control algorithms whenever there is 
interference. Approaches of adaptive control applied to supply chain management are 
reviewed below. 
 Perea et al. (2000) used a dynamic framework to model the information and 
material flow within a supply chain, and employed heuristic control laws from the 
classical control theory to make the ordering decision for each supply chain members. 
Their control laws are similar to the proportional control used in adaptive control. The 
aims of these control laws are to maintain the inventory level to a fixed target or to 
meet the cumulative customer orders. According to their simulation results Perea et al. 
concluded that the performance of the supply chain was highly sensitive to the control 
laws used for its operation (Perea et al. 2000). 
 Perea-López et al. (2003) used a model predictive control (MPC) strategy to find 
well as to reduce its sensitivity as reported by Perea et al. (2000). 
 In this work we develop a system dynamics based model of the supply chain by 
employing the commercial software i-think®. Our fuzzy control strategy as well as the 
control strategy of Perea et al. (2000) and the commonly used (s, S) inventory policy 
are implemented in this model. The performances of the three approaches are 
compared in terms of the bullwhip effect and inventory costs based on the simulation 
results of the system dynamics model. 
 
3.1 Dynamics of the supply chain 
The case under study is a supply chain consisting of a manufacturer, two distributors, 
and four retailers as shown in Fig. 2. The supply chain operates as a “pull system” 
driven by orders from the downstream nodes. When a customer places an order at the 
retailer level, the order is recorded in the backlog and processed by the retailer. If the 
product is available it is then shipped to the customer and the order is removed from 
the backlog; if not the retailer will place a purchasing order to its immediate upstream 
supplier (i.e. the distributor in this case). This process is repeated for all the nodes in 
the distribution level. At the manufacturing site, the plant manager determines a 
production plan to satisfy the orders from distributors. As the manufacturer finishes 
the production, the products are sent to distributors and the orders satisfied with this 
batch are removed from the manufacturer’s backlog. 
Manufacturer
Distributor 1
Distributor 2
Customers
Customers
Customers
Customers
Retailer 1
Retailer 2
Retailer 3
Retailer 4  
Fig. 2 The supply chain case under study 
3.1.1 Dynamic model 
Each node in the supply chain is modelled by balance equations. The notations used 
in this model are as follows. 
k: index to denote node k 
U(k): the set of all upstream nodes of node k  
D(k): the set of all downstream nodes of node k 
available stock. The priority of the orders to be fulfilled is ranked by their sizes. 
Let rkj be the shipping priority rank of node j at node k. Such a rank is determined 
according to the accumulated order from j, i.e. rki < rkj, ∀i, j∈ D(k), if Oki(t) > Okj(t). 
The shipment at time t is determined by: 
⎪⎪
⎪
⎩
⎪⎪
⎪
⎨
⎧
−−
−+−≥
−
= ∑
∑
<∀
<∀
otherwise   
},0)1()({max
);1()1()( if   
),1(
)(
,tOtI
tOtOtI
tO
ty
kjki
kjki
ri,r
kik
kj
ri,r
kik
kj
kj    (13) 
3.1.2 Performance measures 
(a) Bullwhip effect measure 
The bullwhip effect demonstrated in node k is measured by the equation defined 
by Simchi-Levi et al. (2001, p105-108): 
)(
)(
DV
QV k
k =η ,        (14) 
where V(Qk) is the variance of the order that node k has seen and V(D) is the variance 
of the demand that is traced to its end customers. 
(b) Cost function 
The traditionally used cost function in the inventory control literature is adopted. The 
inventory cost consists of the ordering/setup cost, the holding cost, and the shortage 
cost. 
(i) Ordering/setup cost 
For the retailers and distributors, the ordering cost occurs when they place orders to 
their upstream nodes. The ordering cost of node k at time t is: 
⎩⎨
⎧ >=
otherwise,0
0)( if,
)(
tuR
tOC kikk      (15) 
where Rk is the fixed cost for an order at node k. 
A setup cost associated with each production at the manufacturing site, similarly, is 
defined as 
⎩⎨
⎧ >=
otherwise,0
0)( if,
)(
tpS
tSC kkk      (16) 
where Sk is the fixed cost for carrying out a production at the manufacturing site. 
(ii) Holding cost 
The holding cost is the cost related to keeping the product over a period. The cost for 
period t at node k is 
proportional gain. 
3.2.3 Fuzzy inventory controller 
Fuzzy control has been applied to many practical industrial applications. The 
advantages of fuzzy control include (Tanaka and Sugeno 1992): (1) realization of 
multi-objective control, (2) realization of expert control, and (3) realization of robust 
control. Supply chain is a complex and fast changing system; the robustness of fuzzy 
control makes it a suitable tool for managing the supply chain. Moreover, the form of 
fuzzy control allows the manager (i.e. the expert) to incorporate his/her knowledge in 
formulating the control rules. 
This study adopts the fuzzy model of Takagi and Sugeno (1985), also known as the 
TSK model, as the fuzzy inventory controller. The TSK model consists of a set of 
fuzzy rules; the general form of the rules in the TSK model is: 
If x is G, then c = f(x), 
where x is the input vector, G is a linguistic vector, and c is the consequence of this 
rule which is defined as a function of x. The fuzzy inventory controller proposed in 
this study can be viewed as a fuzzified proportional controller. Each rule contains the 
difference of current inventory and target level as its single input, and the traditional 
proportional control law as its consequence. The difference of current inventory and 
target level is normalized by dividing the difference by the target level. For instance, 
this difference information at time t in node k, ek(t), is formulated as: 
)(
)()(
)( *
*
tI
tItI
te
k
kk
k
−= .      (22) 
Each node in the supply chain has a fuzzy controller containing seven rules. The 
example of the controller in node k is shown in Table 1. The first rule in Table 1 is 
read as 
If ek(t) is negative large, then uki(t)= , ))()(( *1 tItI kkk −λ
where  is the gain of the proportional control law in the consequence of this rule. 1kλ
For the case of the manufacturing site, the consequence in the above rule will 
become . The rest rules in Table 1 are read in the same 
manner. 
))()(()( *1 tItItp kkkk −= λ
The linguistic terms in Table 5 are qualitative descriptions of the input information. 
The use of linguistic terms in fuzzy rules can mimic the human expert’s knowledge 
and experience in making inventory decision. These linguistic terms are defined as 
fuzzy sets for computational purposes. Fuzzy set theory (Zadeh 1975) directly 
 ek(t)
0 1
1
0
-1
NM NS NZ PS PM PLNL
 
Fig. 2 Membership functions of the seven linguistic terms in Table 1 
 
3.3 Simulation and comparisons 
3.3.1 Model simulation 
The supply chain discussed in Section 2 is simulated by a computer program, i-think®, 
which is based on the system dynamics (SD) methodology. SD was introduced by 
Forrester (1961) in the early 60s as a modelling and simulation methodology for the 
analysis of dynamic industrial management problems. Since then, SD has been 
applied to various business policy and strategy problems (Sterman 2000), especially 
in the field of supply chain management. The review of the applications to supply 
chain management problems can be found in (Georgiadis et al. 2005). 
The structure of a SD model contains stock (state) and flow (rate) variables. Stock 
variables are the accumulations within the system (i.e. inventory levels and 
accumulated orders), while flow variables represent the flows in the system (i.e. 
shipments and orders). The demands saw by the four retailers follow normal 
distributions, N(10, 4), N(11, 4.4), N(10, 3.6), and N(11, 4), respectively. The rest 
parametric setups of the supply chain model are shown in Table 6. 
The implementation of the fuzzy controller is carried out by employing the graph 
and table functions of i-think®, where the membership function of the linguistic terms 
used in each rule is defined by assigning appropriate values to specify the form of the 
function.  
The proportional gains for the control law of Perea et al. (2000) and for the fuzzy 
inventory controller are found by a trial-and-error manner. By trying many different 
combinations of their values to find the best results of the two controllers, the chosen 
values of these proportional gains are obtained in Table 7. 
 
 
approaches. 
 
Table 8 Performance measure results of the three inventory control approaches 
 (s, S) Proportional control 
Fuzzy 
control 
 η cost η cost η cost
R1 46.7 1162.4 3.8 1083.0 3.5 1111.8
R2 44.1 904.0 6.1 885.0 3.5 813.6
R3 52.0 1032.0 5.6 984.2 4.6 982.3
R4 44.8 1248.2 4.0 1191.3 3.8 1087.7
D1 97.8 4084.2 29.6 4035.3 9.4 3611.9
D2 112.2 5012.8 54.4 6079.2 25.8 4447.8
M 351.9 17141.0 364.2 14163.0 98.8 8982.0
 
Table 9 Bullwhip effect by levels in the supply chain 
  Retailer Distributor Manufacturer
V(order) 1091.0 2948.0 6289.0 
(s, S) η 61.0 164.9 351.9 
V(order) 128.0 1669.0 6508.0 Proportional 
control η 7.1 93.4 364.2 
V(order) 73.0 441.0 1766.0 Fuzzy 
control η 4.1 24.7 98.8 
V(order): variance of order 
 
Table 10 Total inventory costs of the supply chain by the three control 
approaches 
 (s, S) Proportional control Fuzzy control
Total 
inventory 
cost 
30584.6 28421.1 21037.1 
 
4. Determining Production Quantities of Supply Chain Members by a 
Multi-Level Programming Model 
The case company is the center firm in one of the Center-Satellite Factory Systems 
(C-S system) in Taiwan. C-S systems were promoted by the Corporate Synergy 
Develop Center (DSC), a government founded organization, to assist Taiwan 
businesses in establishing integrated systems within upper-, mid- and downstream 
industries. Business participating in these systems will hence be reciprocal and 
complementary in their production, management and operation. Since 1984, dozens of 
industries, more than 100 C-S systems have been built up which produces one-third of 
Taiwan’s overall output value in the manufacturing sector. 
 In a C-S system, the center firm is the largest company in the system, and it 
obtains orders from foreign customers and then breaks down the orders to a series of 
outsourcers were selected. 
This study attempts to automate the outsourcer selection process by utilizing 
mobile agents. Agents are autonomous software that are able to continuously perform 
specified tasks over a period of time after being invoked and are supported according 
to pre-defined criteria (Graesser 1996). Agents with mobility are called mobile agents 
which provide characteristics of facilitating the development of flexible and efficient 
Internet applications relating to multiple entities (Morreale 1998). In the outsourcer 
selection problem, business transactions involving a variety of organizations, thus, 
mobile agents are suited to communicate and coordinate activities between 
participants through the Internet. With the assistance of agent technology, the 
production staff is able to search the entire body of satellite firms easily and find a 
near-optimum solution. 
In addition to improve the efficiency of outsourcer selection, this study also aims 
to find the optimum production quantities for the outsourcers once they are selected 
for a certain order. In order to shorten the production lead-time, the center firm 
requests its outsourcers to divide the order in smaller batches and deliver the divided 
order to the next-step manufacturer once a batch is finished. However, smaller 
production batches imply more setup times and more frequent delivery means higher 
transportation costs as well. Thus, outsourcers would try to balance between the 
center firm’s request and its production costs. On the other hand, the center firm acts 
as the initiator of the supply chain and hence it has to take the overall production costs 
of the supply chain into account while attempting to shorten the production lead-time. 
Consequently, negotiations on the production quantities between center firm and 
outsourcers are necessary for long-term success of the supply chain. 
 When the center firm assigns the production quantity (i.e. the ordering quantity) 
to its immediate upstream outsourcer, this quantity in turn becomes a constraint on the 
subsequent production quantity that this outsourcer will request its upstream 
outsourcer. This interrelation forms a top-down decision making process. On the other 
hand, the upper stream outsourcers’ decisions will affect the costs of down stream 
members, and hence force the down stream members to modify their decisions. Such 
interrelation yields a bottom-up influence on the decision making process. To achieve 
a Pareto optimum of this decision making setting, negotiations between members 
would be required. Multi-level programming is ideally suitable to the problem 
described above, due to its nature of solving decentralized planning problems with 
multiple executors in a multi-level or hierarchical system. 
 
4.1 Dynamic supply chain formation 
The outsourcer selection process is similar to a dynamic supply chain formation 
顧客 中心廠 衛星廠
訂單 物料需求展
開
聯繫衛星廠
檢視產能
選擇
外包商
訂單查詢 聯繫外包商 檢視進度
進度回報
檢視產能
檢視產能訂單
衛星廠1
衛星廠2
衛星廠3
Y
N
 
Figure 4. Outsourcer selection process 
 
 This study adopts the architecture of Information Multi-agent System (IMAS) as 
the foundation of the design of our system. The IMAS is composed of interface agents, 
coordinate agents, and information agents, as shown in Figure 5 (Adam et al. 2001). 
Information agents are responsible of: information acquisition and management, 
information synthesis and presentation, and user assistance. Coordinate agents are 
used to coordinate agents’ activities. These agents own knowledge on information 
agents, such as their address or search domain, to which they send requests either in 
targeted way or in a general way. Most of IMASs are directly in touch with the user, 
thus, the interface agents act as an interface between the user and the system. 
 
study suggests dividing the order into many smaller batches and moving each batch to 
next stage once it is finished. By this way, the production lead-time can be greatly 
reduced. The makespan of the two different batch sizes is compared in Figure 6. 
 
center
A
B
C
(a) 
center
A
B
C
(b) 
Figure 6. (a) Makespan of the order moved in a single batch (b) Makespan of the 
order divided in three batches 
 
Though smaller batches can reduce production lead-time, it also implies more 
setup times and more frequent delivery. Thus, outsourcers would try to balance the 
center firm’s request and its production costs. On the other hand, the center firm acts 
as the initiator of the supply chain and hence it has to take the overall production costs 
of the supply chain into account while attempting to shorten the production lead-time. 
Consequently, negotiations on the production quantities between center firm and 
outsourcers are necessary for long-term success of the supply chain. 
 Multi-level programming (MLP) is ideally suitable to the problem described 
above. The MLP can solve decentralized planning problems with multiple executors 
in a multi-level or hierarchical organization. A multi-level organization has the 
following features (Shih et al. 1996): (a) interactive decision-making units within a 
Min f1(x1,…, x4) 
where x2, x3, and x4 solve 
Min f2(x1,…, x4) 
where x3 and x4 solve 
Min f3(x1,…, x4) 
where x4 solves 
Min f4(x1,…, x4) 
 s.t. 
 x2 ≥ x1, 
 x3 ≥ x2, 
 x4 ≥ x3, 
 
In the above formulation, fk, k=1,…,4, are the objective functions of the center 
firm, outsourcers A, B, and C, respectively. The objective of outsourcers is to 
minimize the inventory costs which are similar to the one defined in the traditional 
EOQ model. That is,  
fk(x) = sk⋅(D/xk) + tk⋅(D/xk-1) + hk⋅(xk/2)⋅Tk, k=2, 3, 4   (24) 
where D is the quantity of the order, sk is the set-up cost per time, tk is the 
transportation cost per time, hk is the holding cost per unit per day, and Tk is the 
duration of the production of xk units. The objective of the center firm is defined as  
    f1(x) = Σ{sk⋅(D/xk) + tk⋅(D/xk-1)} + M     (25) 
where M is the makespan of finishing this particular order. Acting as the supply chain 
initiator, the center firm not only aiming to reduce the makespan of the order, it also 
needs to consider the costs of the whole supply chain. 
4.2.2 Solution procedure 
The multi-level programming is solved by the following heuristic.  
 
Step 0. Establish the utility functions Uk(fk) for fk(x), k=1,…, 4 
Find an initial solution of x1 by setting x1 as the economic order quantity of the 
center firm’s inventory cost function, fc= s1⋅(D/x1) + h1(x1/2)⋅Te, where Te is the 
expected completion time of the order. 
Step 1. Each outsourcer find its ideal production quantity, x2*, x3*, and x4*. 
Step 1.1 If x2*, x3*, and x4* satisfy the constraints, then go to Step 2; otherwise, 
go to Step 1.2 
Step 1.2 Modify x2, x3, and x4 so that max{min {Uk(fk), k=2, 3, 4}} and satisfy 
the constraints. 
Go to Step 2. 
Step 2. Calculate the makespan 
 
Figure 8 Data input of the order 
 
 
Figure 9 Outsourcer selection result 
 
 
Figure 10 Outsourced order information 
 
5. Conclusion 
This project studies the inventory issue in the supply chain system from three 
approaches: (a) mixed inventory policies formulation by genetic algorithm, (b) 
inventory control by fuzzy logic, and (c) production ordering quantity determination 
Calosso, T., Cantamessa, M., Vu, D., and Villa, A. (2003), Production Planning and 
Order Acceptance in Business to Business Electronic Commerce, International 
Journal of Production Economics, 85, pp. 233-249. 
C.-C. H. Chan, C.-B. Cheng, and S.-W. Huang, 2006, Formulating ordering policies in 
a supply chain by genetic algorithm, International Journal of Modeling and 
Simulation, 26(2), 129-136. 
C.-B. Cheng, Z.-Y. Liu, S. W. Chiu, and C.-J. Cheng, 2006, Applying fuzzy logic 
control to inventory decision in a supply chain, WSEAS Transactions on Systems, 
5(8), 1822-1829. 
M. A. Cohen, and H. L. Lee, Resource deployment analysis of global manufacturing 
and distribution networks, Journal of Manufacturing and Operations 
Management, 2, 1989, 81-104. 
M. A. Cohen, and S. Moon, Impact of production scale economics, manufacturing 
complexity, and transportation costs on supply chain facility networks, Journal of 
Manufacturing and Operations Management, 3, 1990, 269-292. 
J. W. Forrester, Industrial Dynamics (Cambridge, MA, MIT Press, 1961). 
P. Georgiadis, D. Vlachos, and E. Iakovou, A system dynamics modeling framework 
for the strategic supply chain management of food chains, Journal of Food 
Engineering, Vol.70, 351-364, 2005. 
A. Graesser, Is it an agent, or just a program? A taxonomy for autonomous agents, 
Proceedings of 3rd International Workshop on Agent Theories, Architecture, and 
Languages, 1996. 
J. Holland, Adaptation in Natural and Artificial Systems: An Introduction Analysis 
with Applications to Biology, Control, and Artificial Intelligence The MIT 
Press,1992. 
J.-S. R. Jang, C.-T. Sun, and E. Mizutani, Neuro-Fuzzy and Soft Computing: a 
Computational Approach to Learning and Machine Intelligence, Prentice Hall, 
1997. 
P. Kelle, and A. Milne, The effect of (s,S) ordering policy on the supply chain, 
International Journal of Production Economics, 59, 1999, 113-122. 
S. O. Kimbrou, D. J. Wu, and F. Zhong, Computers play the beer game: can artificial 
agents manage supply chains? Decision Support Systems, 33, 2002, 323-333. 
H. Lee, V. Padmanabhan, and S. Whang, Information distortion in a supply chain: the 
bullwhip effect, Management Science, 43(4), 1997, 546-558. 
E. H. Mamdani, and S. Assilian, An experiment in linguistic synthesis with a fuzzy 
logic controller, International Journal of Man-Machine Studies, Vol.7, No.1, 
1975, 1-13. 
P. Morreale, Agents on the move, IEEE Spectrum, 1998, 34-41. 
J. F. Williams, Heuristic techniques for simultaneous scheduling of production and 
distribution in multi-echelon structures: theory and empirical comparisons, 
Management Science, 27(3), 1981, 336-352. 
J. Yen, and R. Langari, Fuzzy Logic: Intelligence, Control, and Information, Prentice 
Hall, 1999. 
L. A. Zadeh, The concept of a linguistic variable and its application to approximate 
reasoning, Information Science, Vol.8,199-249, 1975. 
