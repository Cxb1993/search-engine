METALINE、連結匝道演算法與線性規劃
等。 
自從模糊邏輯控制（FLC）提出之後，
有許多研究開始發現應用模糊邏輯控制進
行匝道儀控，包含 Chen 等人（1990）、Taylor
等人（1998）還有 Okushima 等人（2003）。
然而大部分模糊邏輯匝道儀控演算法的研
究中，其語意變數的隸屬函數與推論結果
為主觀設定，結果將導致演算法的表現與
適用性產生負面影響。故近十年來，許多
研究利用基因演算法（GAs）並透過輸入
與輸出資料間之關係，客觀地建構模糊邏
輯控制的知識庫，即基因模糊邏輯控制
（GFLC），例如 Bogenberger 等人（2000）、
Herrera 等人（1998）以及 Chiou 與 Lan
（2005）等。基因模糊邏輯控制不僅可以
避免隸屬函數與推論結果的主觀設定，更
可以增加控制的效果，Chiou 與 Lan（2005）
提出雙層式反覆方法，發展 GFLC 演算法
學習邏輯規則與隸屬函數，並成功的應用
在跟車行為中，本文將針對此延伸的演算
法，建構基因模糊邏輯匝道儀控策略，此
外亦將本模式與較常用的兩種匝道儀控策
略：最佳定時儀控（GOP-RM）與模糊邏
輯匝道儀控（FLC-RM）進行控制效果的比
較。 
本文之組織架構如下：第二部分將提出模
式構建的步驟與匝道儀控策略；第三部分
則利用簡例印證與比較不同交通狀況下各
匝道儀控策略之績效；第四部分更進一步
利用實際案例分析，進行本文所提出匝道
儀控模式之應用性；最後則是本文結果的
評論與後續課題之建議。 
 
三、模式構建 
 
本章將針對本文所提出的 GFLC-RM
策略與目前常用的匝道儀控策略，進行詳
細的模式構建。本文所提出之策略均藉由
巨觀車流模擬技術量測其績效，而詳細的
策略與交通模擬技術說明如下： 
3.1 系統模擬 
為能使用與評估匝道儀控演算法，有
三個即時交通資訊需先被定義，包含：主
線速率（MS）、匝道等候長度（QL）以及
總旅行時間（TTT），前兩資訊用於計算輸
入系統之儀控率，而後者則作為系統績效
指標。為能使模擬交通情況的影響最小
化，本文採用巨觀車流的流體近似法，作
為模擬系統行為與估計控制的績效。根據
實際交通特性中流量-速率之關係式，假設
當流量被定義後即可立即計算主線速率，
此外依時性之 OD 矩陣亦需事先被定義並
假設在不同的匝道儀控策略下不會改變。 
匝道儀控策略係藉由總旅行間進行評
估。而總旅行時間之估算，則是在所有時
間內，車輛進入各匝道之延滯時間與各路
段主線總旅行時間之加總，估算如下： 
)(
1 1
ij
M
i
jij
N
j ij
i dtr
v
lTTT +××= ∑∑
= =         (1) 
其中，Vij為在j時間內，路段i之平均旅
行速率；li為路段i之長度；rij為在j時間內，
路段i之平均交通流率；tj即為單位時間長
度；dij為在時間j內，路段i至路段i+1 間所
有上匝道車輛的延滯，而該延滯可藉由流
體近似法估算。演算法之最終目的則希冀
將總旅行時間（TTT）最小化。 
3.2 最佳定時匝道儀控策略 
最佳定時匝道儀控策略之最佳化，係
藉由基因演算法(GAs)在時間水準下所蒐
集的交通資料所定義，而每一個時間水準
則按照其各種交通型態，進行不同的匝道
儀控率，同時在理論上，如將時間水準分
割的越細，則將可以產生較具效果的策
略。最佳定時匝道儀控之編碼方式如圖 1
所示，在基因編解碼方面，本研究係採取
整數編碼方式以 3 個基因代表一個儀控
率，最大匝道儀控率之值為 999 最小則為
0，產生之儀控率中，亦可藉由匝道容量固
定下進一部擴大。以四個匝道以及兩段式
之時間水準為例，如圖 1 所示，建立一條
總長度為 24 之染色體，而各染色體的基因
依序為 289224445450673402395043，則將
可用以代表第一時段之四個匝道儀控率分
別為：289, 445, 673, 395 pcu/hr/ln，而第二
個時段為 224, 450, 402, 43 pcu/hr/ln。故當
匝道的容量為 1200 pcu/hr/ln，則第一時段
中 ， 第 一 個 匝 道 的 儀 控 率 則 為
3479991200289 ≅÷×  pcu/hr/ln. 
 1
（RM）所組成，其儀控率僅考慮地域性交
通狀況為基礎。根據GFLC-RMIS並考慮上
游匝道之儀控率，本文亦建構整合型的模
式GFLC-RMIT，而此整合模式更進一步納
入上游匝道儀控率，使其為一增加的狀態
變 數 。 然 而 不 論 是 GFLC-RMIS 或
GFLC-RMIT策略，兩者的邏輯規則以及隸
屬函數，均透過基因演算法反覆學習的運
算機制（Chiou and Lan，2005）而建構。
間單地描述如下： 
3.4.1 邏輯規則之編解碼 
每一條邏輯規則均為一基因以及該基
因相對應的控制變數之語意等級值所提
供。以兩個狀態變數與一個控制變數為
例，假設每個變數均有五個語意等級，其
染色體之長度為 25 個，每個基因值係由
0~5 表之，基因值為 0 則不予以挑選而直接
刪除，其它值除被挑選作為控制的規則之
外，亦代表其控制變數之語意等級，這個
編碼方式描繪如圖 4。舉例來說，假設一條
染色體為 0002040010000001000030000 表
示模式之規則庫係由 5 條規則所組成，此 5
條規則分別為： 
Rule 1: IF x1 = NL and x2 = PS  THEN  y = NS 
Rule 2: IF x1 = NS and x2 = NL  THEN  y = PS 
Rule 3: IF x1 = NS and x2 = PS  THEN  y = NL 
Rule 4: IF x1 = PS and x2 = NL THEN  y = NL 
Rule 5: IF x1 = PL and x2 = NL  THEN  y = ZE 
3.4.2 隸屬函數之編解碼 
考慮一三角模糊數，其參數值分別為
ckr、ckc與ckl，代表著k語意等級之右底角座
標、頂點座標及左底角座標，故 15 個參數
值需藉由五個語意等級標準化。此外，假
設第一個與最後一個模糊數的等級，需分
別為三角形的左斜邊以及右斜邊，其他等
腰三角形則如圖 5 所示。故藉由五個語意
等級變數，將八個參數予以標準化順序如
下： 
min112
1
3
2
4
3
5
455max ccccc
c
c
c
c
c
cccc lclr
l
r
l
r
l
rrc ==≥≥≥≥≥≥==
 (2) 
2
)( lk
r
kc
k
ccc +=
，k=2, 3, 4               (3) 
當Cmax與Cmin分別為變數之最大值與
最小值，則c5l與c3r、c4l與c2r、c3l與c1r之順
序則無法確定。為了要轉化這八個參數，
九個位置變數r1 ~r9需設計如下： 
θ×+= 1min2 rccl                          (4) 
θ×+= 221 rcc lr                          (5) 
θ×+= 323 rcc ll                          (6) 
θ×+= 4312 },max{ rccc lrr                   (7) 
θ×+= 5314 },max{ rccc lrl                   (8) 
θ×+= 6423 },max{ rccc lrr                   (9) 
θ×+= 7425 },max{ rccc lrl                  (10) 
θ×+= 8534 },max{ rccc lrr                  (11) 
其中， 
∑
=
−= 9
1
minmax )(
i
ir
ccθ
.  
為使求解之參數值其精確度可達到小
數點後兩位，上述位置變數皆以 4 個整數
基因代表之（如圖 5 所示），各位置變數最
大值為 99.99，而最小值則為 0。故以兩個
狀態變數與一個控制變數為例（每一變數
均有五個語意等級），則染色體長度共有
108 個。 
x 1
y N L N S Z E P S P L
N L
N S
Z E
P S
x 2
P L
g 1 g 1 3 g 2 5g 2 ‧ ‧ ‧ ‧ ‧ ‧
  0  :  N o t  i n c l u d e d
  1  :  Y  =  N L
  2  :  Y  =  N S
  3  :  Y  =  Z E
  4  :  Y  =  P S
  5  :  Y  =  P L  
圖 4 邏輯規則編碼示意圖 
 
c1l 
=cmin
1
NL NS ZE PL
μ
PS
0
c2l c1r c3l c4l c5l c2r c3r c4r c5r 
=cmax
r2 r3 r4 r5 r6 r7r1 r8 r9
Θ
g1 g2 ‧ ‧ ‧
Note:  gi  =  0 ~ 9
g3 g4‧ g5 g6 g7 g8‧ g33 g34 g35 g36‧‧ ‧ ‧
 
圖 5 隸屬函數編碼示意圖 
 3
4.1 資料與參數 
假設有一 3 車道之高速公路總長度為
50 公里，並有四個等距離分佈之上下匝道
口，每個路段長度均為 10 公里，如圖 6 所
示。設定總模擬時間為 3 小時，並以每五
分鐘產生一 OD 矩陣，故產生 36 個不同的
OD 矩陣，同時為能反映動態與隨機的交通
特性，本文所產生的 OD 矩陣係依據依時
性的交通型態包含：顯著的尖峰與非尖峰
型態，並以均勻分配所產生之隨機數加以
變化增加。 
 5
第一個小時為準備時間，並無形任何
匝道儀控即 S1，旨在提供最初的交通模擬
狀況，供接續的兩個小時使用。由於儀控
率係藉由每上 5 分鐘的交通型態計算而
來，故 S3~S5 的判斷時間設定為 5 分鐘；
因有兩個時間時間水準，故 S2 之判斷時間
設定為 1 小時。 
根據研究顯示，GFLC-RM 策略的績
效，在各主要參數包含交配率、突變率以
及族群大小，於下列設定下有較佳之表
現：交配率=0.7、突變率=0.1、族群大小
=80。 
4.2 比較與情境分析 
為能研究與比較不同匝道儀控策略，
在不同交通量情況下的績效，本文假設三
種情境包含：低流量、中流量以及高流量。
上述所提及的36個矩陣則假設為中流量情
境，而高流量與低流量情境之OD矩陣，則
以中流量之OD矩陣分別乘以 1.5 以及 0.5
所產生。結果如表 2，然值得注意的是，
GFLC-RMIT 之 績 效 勝 過 GFLC-RMIS 與
FLC-RM。雖然GOP-RM之績效不若S3、S4
與S5，但亦可較S1 節省總旅行時間：低流
量情境下節省 0.59％、中流量 0.63％以及
高流量 1.03％。而本文所提出之GFLC-RM
策略均較 S1 有改善，此外亦可發現
GFLC-RMIT策略的績效優於GFLC-RMIS，
顯示於進行儀控時，其他匝道之交通資訊
仍須被考慮到。然值得注意的是，在高流
量的情境之下，S2、S3、S4、S5 等策略均
較策略S1 有有更好的效果，顯示在高流量
的環境下，施行匝道儀控策略是更有利的。 
 
表 2 不同情境五種儀控策略之總旅行時間 
儀控策略 情境
S1 
(without 
RM) 
S2 
(GOP-
RM) 
S3 
(FLC-RM
) 
S4 
(GFLC-
RMIS) 
S5 
(GFLC-
RMIT) 
低流
量 4855.57 4826.92 4774.78 4733.71 4729.6
 － (0.59%) (1.66%) (2.51%) (2.59%)
中流
量 6308.72 6268.98 5933.77 5757.10 5745.22
 － (0.63%) (5.94%) (8.74%) (8.93%)
高流
量 
7677.52 7598.44 6784.5 6661.77 6617.33
 － (1.03%) (11.63%) (13.23%) (13.81%)
註：每個策略之改善率均與 S1 相較。 
 
五、實例應用 
為能研究本文所提出之儀控策略的適
用性，特以臺灣地區國道一號北部路段之
北向部分路網進行實證分析。該路網由八
個交流道所組成分別為：竹北、虎口、楊
梅、中壢、內壢、機場系統、桃園及林口
等，如圖 6 所示。從內壢至桃園為 4 車道
設計，其餘則為 3 車道，而各路段長度由
南至北分別為 7.2、14.6、6.8、5.4、4.5、
2.4、7.6 公里，總長度為 49.5 公里。每五
分鐘之 OD 矩陣之量測時間為 2004 年 11
月 12 號 17:00~19:00。 
 
圖 6 高速公路路網系統 
 
各種策略之績效如表 3 所示。結果顯
示GFLC-RMIT之績效仍勝過不實施儀控並
減 少 2.54 ％ 之 旅 行 時 間 ， 其 次 為
GFLC-RMIS共可減少 2.23％，而GOP-RM
之績效最差僅少量減少 0.75％，與簡例應
用有一致之結果。 
表 3 不同儀控策略之總旅行時間 
策略 總旅行時間(veh-hr) 改善率(%) 
S1 (without RM) 7258.51 － 
S2 (GOP-RM) 7204.01 0.75 
S3 (FLC-RM) 7138.88 1.65 
S4 (GFLC-RMIS) 7096.50 2.23 
S5 (GFLC-RMIT) 7073.99 2.54 
 
