1. Introduction 
Finite field arithmetic operations, 
especially for the binary extension field GF(2m), 
are frequently desired in cryptography and 
coding theory. In particular, two public-key 
cryptography schemes, elliptic and 
hyper-elliptic curve cryptosystems [1] require 
finite field arithmetic operations. In the finite 
field [1,2], the performance of a cryptosystem is 
primarily determined by an efficient 
implementation of the arithmetic operations, 
e.g., addition, multiplication, inversion and 
exponentiation. Inversion and exponentiation 
can be carried out using repeated 
multiply-squaring algorithms. Therefore, 
efficient multiplication architectures over 
GF(2m) should be designed to implement 
elliptic curve cryptosystems. 
 2
⎤
The development of fast algorithms and 
architectures of modular multiplications has 
received considerable interest [1,6]. The 
Montgomery multiplication algorithm without a 
division operation was first proposed by P. L. 
Montgomery [3] to improve the performance of 
modular integer multiplications. The 
Montgomery multiplication algorithm [4], 
denoted by C=ABR−1 mod F, involves the 
major three-step operations, conventional 
multiplication, division and modulo reduction, 
where R is the Montgomery factor. Therefore, 
this algorithm can avoid the division that is 
usually necessary for finding the remainder, at 
the cost of an additional multiplication. Since 
divisions are much more costly than 
multiplications, this method represents a 
significant improvement over regular modular 
multiplications. An efficient multiplier 
architecture can be obtained if R is properly 
chosen according to an irreducible polynomial 
F. For instance, the field GF(2m) is generated 
from irreducible trinomials of the form xm+xk+1. 
Lee et al. [11] showed that the Montgomery 
multiplication is represented by two Hankel 
matrix-vector multiplications when R=xk. Lee et 
al. [7] presented a bit-parallel systolic 
Montgomery multiplier for trinomials using the 
structure of the AOP-based multiplication [8]. 
Inversely, various algorithms and architectures 
have been proposed to compute the 
Montgomery multiplication with R=xm [4,6]. 
In cryptographic applications, the finite 
field arithmetic operations over GF(2m) require 
a large number of operand bits, i.e., 160≤m≤600, 
causing problems such as large fan-out of 
signals, large wire delays and complex routing 
in VLSI implementations. Efficient multipliers 
generally have serial and parallel architectures. 
Bit-serial multipliers require a small area, but 
are slow and take m clock cycles to carry out 
the multiplication of two elements. Conversely, 
bit-parallel multipliers are typically fast, but 
have large architectures. Considering the 
trade-off between time and hardware 
complexities in its circuit implementations, the 
good feature of digit-serial multipliers 
[13,14,17,20] is combined with serial and 
parallel algorithms to achieve architectures with 
low time-space complexity. Their multipliers 
are based on the array partitions to achieve 
digit-serial architectures, and the architectures 
have O(md) space complexity and O(n) latency 
complexity, where  and d is the 
selected digit-size. Another architecture, called 
the scalable architecture [5,12,15], has the 
major advantages among space complexity, 
time performance and fixed-precision 
computation. For instance, the original data 
with m bits are separated into 
⎡ dmn /=
⎡ ⎤dmn /=  
gcd(R,F)=1. Since F and R are relatively prime 
to each other, two polynomials, R−1 and F’, 
exist with the characteristic that RR−1+FF’=1. 
Thus, the Montgomery multiplication is 
achieved as follows: 
In Algorithm 1, the Montgomery 
multiplication algorithm includes m 
computational loops. Each computational loop 
has three operations. The division operation in 
Step 5 for computing hi=hi/x is a simple shift 
operation without extra hardware 
implementation. Steps 3 and 4 perform a simple 
multiplication. However, the Montgomery 
multiplication suffers from time-dependent 
operations, because the output of Step 3 is used 
in Step 4, and the output of Step 4 is used in 
Step 5. Since Algorithm 1 is implemented by a 
semi-systolic architecture, each computational 
loop is constrained to operate in three clock 
cycles, as seen in [25]. 
Step 1. N=AB. 
Step 2. U=NF’ mod R. 
Step 3. C=(N+UF)/R mod F. 
As mentioned earlier, an efficient 
Montgomery multiplier can be obtained if R is 
properly chosen according to the irreducible 
polynomial F. Generally, R=xm is chosen as the 
Montgomery factor, reducing the complexity of 
the Montgomery multiplication to yield an 
efficient hardware implementation.  
The Montgomery multiplication is given by  
2.2 Toeplitz Matrix-Vector Multiplication C=AB x−m mod F 
=(a0+a1x+a2x2+… +am−1xm−1)B x−m mod F Definition 1. An m×m matrix T is called a 
Toeplitz matrix if it satisfies the relation 
T(p,q)=T(p+1,q+1), for 0≤p,q<m−1, where 
T(p,q) denotes the (p,q)-entry in matrix T. 
Such a matrix is determined by the 2m−1 
entries appearing in the first row and first 
column.  
.
01221
1032
)3(12
)2()3(01
)1()2()3(10
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
=
−−
−−−
−−
−−−−
−−−−−−−
ttttt
tttt
ttt
tttt
ttttt
mm
mm
m
mm
mmm
…
$$
#$$$##
$$$
$$
"
T
=((…(a0Bx−1+a1B)x−1+a2B)x−1+a3B)x−1 
+…)x−1+am−1B)x−1mod F              (1) 
 (1) can be represented by an iterative 
multiplication algorithm for performing  
hi=(hi−1+ai−1B)x−1 mod F, 1 i m    (2) ≤ ≤
Let hi=hi,0+hi,1x+hi,2x2+…+hi,m−1xm−1 
denote the intermediate result of each iteration. 
Based on (1) and (2), the traditional bit-level 
Montgomery multiplication algorithm in [4] is 
given as follows. 
Algorithm 1: Based on Definition 1, an m×m Toeplitz matrix 
T can be defined by the vector form T=(tm−1, 
tm−2,…, t1, t0, t−1,…, t−(m−2), t−(m−1)) over GF(2). 
Let  be a vector and tmaaaA ),,,( 110 −= " AC T= . 
Verifying that the product  
is given by  is easy. 
t
mc ), 1−"ccC ,,( 10=
ji
m
j
ji tac −
−
=
∑= 1
0
Input A, B, F 
Output C=AB x−m mod F 
1.              h0=0 
2.              for i=1 to m do begin 
3.                    hi=hi−1+ai−1 B 
4.                    hi=hi+hi,0 F  
Example 1. The 5×5 Toeplitz matrix given by 
vector T=(b4, b3, b2, b1, b0, b−1, b−2, b−3, b−4) is 
5.                    hi=hi/x 
6.              endfor 
7.              C=hm 
8.            return C 
 4
iddi
ddi
di
di
djdjddjddj
djdjddjddj
jdjddjdj
jdjddjdj
ddidjdiddjdiddj
ddijddidjdidj
ddijddidjdidj
)-d(j
dj
dj
A
a
a
a
a
bbbb
bbbb
bbbb
bbbb
ababab
ababab
ababab
c
c
c
j
1
2
1
121
132
2)1(3)1(1
1)1(2)1(1
1121
12)1(11
11)1(11
11
1
...
...
...
B=
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
=
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢
⎣
⎡
+++
+++
+++
=
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢
⎣
⎡
−+
−+
+
+−+−+
−−+−+
+−+−+
+−+−−
−++−+−+
−++−++
−++−+−
+
+
#
…
"
##%##
…
"
##
      (6) 
The Montgomery multiplication is given by 
C=AB x−nd mod F 
=(A0+A1xd+...+An−1xd(n−1))B x−nd mod F 
=(((…(A0Bx−d)+A1B)x−d+A2B)x−d+...)x−d  
+An−1B)x−d mod F.             (3) 
 
Theorem 1: According to (3), the partial 
multiplication AiB can be represented by 
AiB= , where Bj is the Toeplitz matrix. 
Each matrix Bj is constructed from element B. 
dj
i
n
j
xA)( j
0
B∑
=
From the above matrix-vector multiplication, 
the d×d Toeplitz matrix Bj is defined in terms 
of the Toeplitz vector Bj=(bdj+d−1,…, bdj+1, bdj, 
bdj−1,…, bd(j−1)+1). Hence, the computation of 
AiB can be denoted as 
Proof: 
Based on the partial multiplication for 
determining AiB,  AiB=(B0Ai)+(B1Ai)x
d+…+(BnAi)xdn.    (7) □         
Theorem 1 reveals that the computation of 
the partial multiplication AiB can be divided 
into (n+1) Toeplitz matrix-vector 
multiplications. Notably, all the Toeplitz 
matrix-vector multiplications in (7) have the 
same Ai. According to the Montgomery 
multiplication in (3), each iterative 
computational loop calculates 
hi=(hi−1+Ai−1B)x−d mod F, where hi=  
and . Therefore, hi can be 
obtained by 
dj
n
j
ji xH∑−
=
1
0
,
∑−
=
+=
1
0
,,
d
l
l
ljdiji xhH
)...( )1(110
dn
n
d
ii xBxBBABA
−
−+++=       (4) 
Each term ji BA  in (4) represents the core 
computation and has a degree of 2d−2. In a 
general multiplication, the term ji BA  is 
defined as 
ji BA = Sj+Djx
d, for 0 ≤ j ≤ n−1, 
where the degrees of both Sj and Dj are less than 
d. Therefore, (4) can be rewritten as 
 
AiB=(S0+D0xd)+(S1+D1xd)xd+…+(Sn−1+Dn−1xd)x
(n−1)d 
     
=S0+(D0+S1)xd+...+(Dn−2+Sn−1)x(n−1)d+Dn−1xnd hi=(hi−1+Ai−1B)x−d mod F 
    =C0+C1xd+...+Cn−1x(n−1)d+Cnxnd     (5) =[(Hi−1,0+B0Ai−1)+(Hi−1,1+B1Ai−1)xd+… 
Where C0=S0 +(Hi−1,n−1+Bn−1Ai−1)xd(n−1)+BnAi−1 xdn]x−d 
mod F Cj=Dj−1+Sj, for 1 ≤ j ≤ n−1 
Cn=Dn−1 =(Hi−1,0+B0Ai−1)x−d+(Hi−1,1+B1Ai−1) 
Considering (5), Cj=(cdj, cdj+1,· · ·, cd(j+1)−1) can 
be translated with the following matrix-vector 
multiplication form. 
+(Hi−1,2+B2Ai−1)xd+…+(BnAi−1) xd(n−1) mod 
F=Hi,−1x−d+Hi,0+Hi,1xd+... 
+Hi,n−1xd(n−1) mod F                 (8) 
where 
Hi,j−1=(Hi−1,j+BjAi−1) for 0≤ j n−1, ≤
Hi,n−1=BnAi−1 
The irreducible polynomial of the form 
 gives  m
m
ki
i
i xxfF ++= ∑−
=
1
1
 6
loop i=1 H1,0 H1,1 H1,2  
 step2: add F1H1,−1 F2H1,−1 F3H1,−1  
 sum H1,0 H1,1 H1,2  
  1 x2 x4 x6 
  H1,0    H1,1     H1,2    0 
 step1: add B0A1   B1A1   B2A1   B3A1  
 sum H2,−1 H2,0 H2,1 H2,2 
loop i=2 H2,0 H2,1 H2,2  
 step2: add F1H2,−1 F2H2,−1 F3H2,−1  
 sum H2,0 H2,1 H2,2  
  1 x2 x4 x6 
  H2,0 H2,1 H2,2 0 
 step1: add B0A2   B1A2  B2A2   B3A2  
 sum H3,−1 H3,0 H3,1 H3,2 
loop i=3 H3,0 H3,1 H3,2  
 step2: add F1H3,−1 F2H3,−1 F3H3,−1  
 sum H3,0 H3,1 H3,2  
 8
 
 
Fig. 3. Scalable systolic Montgomery multiplier 
architecture over GF(2m). 
As mentioned above, Fig. 3 shows the 
scalable multiplication architecture. The circuit 
comprises three switches, one Toeplitz 
multiplier and four registers array. Figure 1 
shows the Toeplitz multiplier. In the initial step, 
the two registers Bj and Fj with (2d−1) digits 
are transformed from B and F, respectively, and 
the registers Ai with d digit sizes are divided 
from the element A. The registers Hi for −1≤ i 
≤n−1 store the outputs of the Toeplitz 
multiplier. In Fig. 3, each iterative loop based 
on Algorithm 2 requires two computational 
rounds. The first round, in Step 2.4, computes 
Hi,j−1=Hi−1,j+BjAi−1, and the second round in 
Step 2.7 calculates Hi,j=Hi,j+Fj+1Hi,−1, where 
Hi,−1 is the result of the first round computation. 
From (8), the first round demands (n+1) 
Toeplitz multiplications; from (11), the second 
computation only requires n Toeplitz 
multiplications. To configure two-round 
operations in each loop, two switches, SW1 and 
SW2, are used to control the input data of the 
multiplier, and SW3 controls the output of the 
multiplier. In each computational loop, the 
operation of SW1 is performed as 
1          43
2121
031
+==
≤≤+=
≤≤=
nckforvv
ncknforvv
nckforvv   
Note: Symbol “ck” denotes the clock cycle. 
The operation of SW2 is performed as 
Toeplitz 
ncknforvv
nckforvv
2121
031
≤≤+=
≤≤=  
The operation of SW3 is carried out by 
nckforvv
ckforvv
ckforvv
21       41
042
031
≤≤=
==
==
 
As mentioned above, each computational loop 
needs 2n+1 Toeplitz multiplications. After 
n-loop computations, register H has the final 
Montgomery multiplication. 
4. Scalable Systolic Montgomery Multiplier 
over GF(2m) Generated by Generalized 
Equally-Spaced Polynomials 
Figure 3 in the previous section shows the 
proposed scalable systolic Montgomery 
multiplier, where each computational loop must 
perform (2n+1) Toeplitz multiplications. This 
section utilizes an irreducible equally-spaced 
polynomial to reduce the number of Toeplitz 
multiplications in Algorithm 2.  
A polynomial of the form 
 10
5. Conclusions 
This work presents a new means of 
realizing a scalable and systolic Montgomery 
multiplier over GF(2m) under a Toeplitz 
matrix-vector representation. In the generic 
field, the Montgomery multiplication can be 
decomposed into n(2n+1) Toeplitz 
multiplications. If the field is constructed from 
an irreducible GESP, then the time complexity 
decreases to n(n+1) Toeplitz multiplications. 
The proposed architectures have a lower 
time-space complexity than traditional 
digit-serial multipliers [13,14] An efficient 
bit-parallel systolic multiplier [19] for normal 
and dual bases of GF(2m) is constructed from 
the Hankel matrix-vector multiplications. 
Moreover, the proposed architectures are also 
suitable for normal basis and dual basis 
multipliers. Finally, the major features of the 
proposed multipliers are combined with 
digital-serial and digital-parallel architectures 
to achieve low hardware complexity and low 
latency. Therefore, the proposed system has a 
good trade-off between space and time 
complexity, and is thus suitable for 
implementing cryptographic schemes in 
embedded systems. 
References 
[1] N. Kobliz, “Elliptic Curve Cryptography,” Math. 
Computation, Vol. 48, pp. 203-209, 1987. 
[2] R. Lidl and H. Niederreiter, Introduction to Finite Fields and 
Their Applications, New York: Cambridge Univ. Press, 
1994. 
[3] P. L. Montgomery, “Modular multiplication without trial 
division,” Math. Comp., Vol. 44, pp. 519-521, 1985. 
[4] Ç. K. Koç and T. Acar, “Montgomery multiplication in 
GF(2k),” Designs, Codes, and Cryptography, Vol. 14, pp. 
57-69, 1998. 
[5] A. A. A. Gutuba and A. F. Tenca, “Efficient scalable VLSI 
architecture for Montgomery inversion in GF(p),” 
Integration, the VLSI journal, Vol.37, pp. 103-120, 2004. 
[6] C. W. Chiou, C. Y. Lee, A. W. Deng, and J. M. Lin, 
“Efficient VLSI implementation for Montgomery 
multiplication in GF(2m),” Tamkang Journal of Science 
and Engineering, Vol. 9, pp. 365-372, 2006. 
[7] C. Y. Lee, J. S. Horng, and I. C. Jou, “Low-complexity 
bit-parallel systolic Montgomery multipliers for special 
classes of GF(2m),” IEEE Trans. Computers, Vol. 54, No. 9, 
pp. 1061-1070, Sep. 2005. 
[8] C. Y. Lee, E. H. Lu, and J. Y. Lee, “Bit-parallel systolic 
multipliers for GF(2m) fields defined by all-one and 
equally-spaced polynomials,” IEEE Trans. Computers, Vol. 
50, No. 5, pp. 385-393, May 2001. 
[9] S. M. Kang and Y. Leblebici, CMOS Digital Integrated 
Circuits: Analysis and Design, McGraw-Hill, 1999.  
[10] C. Y. Lee, “Low-complexity bit-parallel systolic multiplier 
over GF(2m) using irreducible trinomials,” IEE 
Proceedings Computer Digital Technology, Vol. 150, pp. 
39-42, 2003. 
[11] C. Y. Lee, C. C. Chen, and E. H. Lu, “Compact bit-parallel 
systolic Montgomery multiplication over GF(2m) 
generated by trinomials,” 2006 IEEE Region 10 
Conference, TENCON 2006. 
[12] C. Y. Lee, C. C. Chen, W. Y. Lee, and E. H. Lu, “Scalable 
and systolic multipliers for Gaussian Normal Basis of 
GF(2m),” 2006 International Conference on Hybrid 
Information Technology. 
[13] J. H. Guo and C. L. Wang, “Digit-serial systolic multiplier 
for finite field GF(2m),” IEE Proc. Inst. Elect. Eng. 
Comput. Digit. Tech., Vol. 145, No. 2, pp. 143-148, Mar. 
1998. 
[14] C. H. Kim, C. P. Hong, and S. Kwon, “A digit-serial 
multiplier for finite field GF(2m),” IEEE Trans. VLSI, Vol. 
13,  No. 4, pp.476-483, April 2005. 
[15] A. F. Tenca and C. K. Koc, “A scalable architecture for 
modular multiplication based on Montgomery’s 
algorithm,” IEEE Trans. Computers, Vol. 52, No. 9, pp. 
行政院國家科學委員會補助國內專家學者出席國際學術會
議報告 
                                                      97 年 07 月 20 日 
報告人姓名  
盧而輝 
 
服務機構
及職稱 
長庚大學電機系 
教授 
 
     時間 
會議 
     地點 
2008 年 6 月 18 日至 95 年 6
月 20 日,Dalian 
University, Dalian City, 
China 
本會核定
補助文號
NSC 96-2221-E-182-015 
會議 
名稱 
 (中文) ICICIC2008 
 (英文) Third International Conference on Innovative Computing, 
Information and Control 
發表 
論文 
題目 
  (英文)1. Enhancement of Hybrid Concatenated Codes Using a Modified 
Log-MAP Algorithm. 
        2. Hybrid ARQ Based on Accumulated Reliabilities and Error 
Hamming-Weights 
附件三
 
 
 
報告內容應包括下列各項： 
一、 參加會議經過 
         此學術研討會的全名為「International Conference on Innovative Computing﹐
Information and Control」﹐簡稱為「ICICIC」。今年會議由中國大陸大連市的大
連大學主辦﹐正式會期共四天﹙自 6月 17 日至 6月 20 日﹚。大會共收到投稿
論文一千餘篇﹐被接收發表的論文計 604 篇。論文的專業領域幾乎包含了電機﹐
電子及資訊各領域﹐共分三天 27 個場次發表。 
         六月十七日早上搭港龍班機至香港轉機﹐因由香港至大連班機較少﹐因此
先搭港龍班機至北京轉機。因十七日大連天氣不好﹐機場能見度不佳﹐飛機無
法降落﹐先於北京機場飯店過夜﹐十八日才搭九點多的南方航空班機前往大連﹐
又因班機誤點﹐到達大連機場時已十一點半。因到達大連的時間晚了半天﹐錯
過了開幕式及兩場的「Plenary Speech」相當可惜。 
    此次研討會﹐我共有兩篇論文發表﹐分別如下： 
﹙一﹚「Hybrid ARQ Based on Accumulated Reliabilities and Error 
Hamming-Weights」﹐大會安排於十九日﹐Session B05 發表。此論文以
