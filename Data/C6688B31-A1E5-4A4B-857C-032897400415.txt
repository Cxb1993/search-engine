 II
Abstract 
 
The advances in PC and broadband networking technologies certainly lead to peer-to-peer (P2P) 
services and applications over Internet. Peer-to-peer computing is not only an important research 
topic but also an attractive technology applied to Internet applications. However, P2P technology 
that distributes server loads to clients has increased the memory, network bandwidth and 
computation requirements of mobile devices. This project aims to study P2P real-time networking 
in a mobile Internet environment and reduces resource usages and requirements of mobile 
devices running P2P real-time applications. In the first year of this project, we study the 
performance of resource discovery in a peer-to-peer mobile computing environment. Also, we 
have proposed a P2P Voice over IP (VoIP) system in a mobile environment. In the second year, 
we further extend our research to mobile multimedia streaming service and mobile live 
video/audio broadcasting service. We apply P2P Application Layer Multicast (ALM) scheme to 
provide live video/audio broadcasting service in a mobile environment. Several optimization 
approaches are then proposed. Simulation results demonstrate that the average initial playback 
delay and service disruption during playbacks are significantly reduced. 
 
Keywords: Peer-to-Peer Computing, Real-Time Services, Mobile Communication and Wireless 
Networking 
 
 1
1. 前言 
 
In recent years, the population of mobile device users is tremendously increasing. The 
computation power and multimedia functions on mobile devices are improved as well. We can 
take pictures, watch videos, and even record videos with our mobile devices easily. At the same 
time, broadband wireless networks, such as 3G, WLAN, WiMAX, etc., are fast developed and put 
into practice widely. As a result, it is easy to share or get real-time multimedia with mobile 
devices anywhere, at any time. Certainly, the combination of multimedia mobile devices and 
broadband wireless networks will be a killer application in the near future. We call this kind of 
service LIVING (LIve Video sharING). Figure 1 shows an example of LIVING service. While  
watching a baseball game, Charles can use his mobile phone to record live video and share the 
real-time live video with remote friends, Rita and Mel, through wireless networks. 
 
 
Figure 1: The imagination of live video broadcasting service. 
 
2. 研究目的 
 
To realize this kind of service, the simplest way is to record and upload real-time live streaming 
to a centralized server, which then sends duplicates to subscribers. However, it is not scalable 
when more and more users join the service so that we have to find other ways to achieve our goal. 
After surveying, we collect possible choices: server-based, multi-unicast, broadcast, IP Multicast, 
application-level infrastructure, Application Layer Multicast (ALM) [1], and chunk-driven 
multicast [2]. Table 1 shows the comparison of these solutions. 
 3
characteristics, such as handoff interruptions, dynamic bandwidth and limited resources, etc., may 
make it unstable. In this project, the mobility issues are analyzed and a live streaming ALM 
system for the mobile environment is proposed. 
 
3. 文獻探討 
 
LIVING can be briefly divided into two procedures: resource lookup and resource retrieval. For 
resource lookup method, several related file-sharing systems, such as Napster [3], Gnutella [4], 
Chord [5], and CAN [6], are well-analyzed and well-designed. And we directly apply existing 
P2P file-sharing resource lookup methods in our system. For resource retrieval method, ALM 
technology is chosen as mentioned above. In this section, we introduce ALM-related work, and 
then apply the idea to our LIVING design. 
 
3.1 Background and Brief History of ALM 
 
If some data is going to be sent to specific group members, we can simply unicast many times or 
broadcast to everyone. However, these methods are not scalable and may waste lots of internet 
resources. To solve these problems, the idea of multicast is proposed. The question is: should 
multicast be implemented at network layer or at application layer. In 1988, Deering proposed IP 
Multicast [7], and related protocols, such as IGMP [8], DVMRP [9], PIM [10], etc., were 
proposed in few years. However, some technical and non-technical limitations point out the 
drawbacks of IP Multicast. These limitations include the complexity of maintaining per group 
status and routing tables, the replacement or upgrades of existing large number of routers, and the 
pricing model between different ISPs. 
 
As a result, researchers started to pay attention to application layer multicast, also known as ALM. 
Similar to IP Multicast, ALM builds multicast trees at application layer using P2P mechanism. 
Each peer stores part of information and provides some of its resources. To be compared with 
unicast or broadcast, ALM not only saves unnecessary waste of internet resources, but also 
accurately sends data to each group members. On the other hand, to be compared with IP 
Multicast, ALM always has worse performance. Nonetheless, ALM does overcome all the 
limitations from IP Multicast. In 2000, Yoid [11] and Narada [12] were proposed respectively as 
the beginning of ALM researches. And many different ALM designs were proposed in few years. 
For example, Overcast [13] was proposed in 2000, TBCP [14] and CAN [15] were proposed in 
2001, switch-trees [16], HMTP [17] and NICE [18] were proposed in 2002, and Zigzag [19] and 
CoopNet [20] were proposed in 2003. 
 
3.2 Classification and Comparisons of ALM Systems 
 
 5
words, mobile devices have more probability to have service interruptions which lower down the 
viewing quality. Moreover, the interference or variant distances between devices and APs may 
cause data loss or bandwidth variations. Needless to say, it is highly probable that mobile devices 
have dynamic bandwidth or unpredictable failures. What's more, mobile devices are usually 
small-sized embedded systems so that system resources, such as CPU frequency and memory size, 
are poorer than general personal computers. To summarize, mobility causes handoff interruptions, 
dynamic bandwidth, and more failure rate to mobile devices. These characteristics produce 
undesirable changes to the system, especially in real-time live streaming service, which is 
sensitive to data loss. As a result, we have to minimize the effects of mobility. 
 
4.1 Problem Statement 
 
To have a clear view on mobility problem, we try to describe the system in graph theory. Because 
LIVING runs at application layer, each pair of nodes can be viewed connected. And the topology 
G(V, E) of N nodes can be viewed as a complete graph KN. Based on this graph, we can get 
spanning forest rooted from source S as our application layer multicast trees T. For example, in 
Figure 3, six nodes form a complete graph K6. The dotted lines between each pair of nodes are 
application layer links and the spanning tree T rooted from S is shown in solid arrows, where the 
thickness of the lines represents the available bandwidths between each pair of nodes. 
 
 
Figure 3: ALM topology. 
 
For a single node, we assume that the bandwidth between each pair of nodes is more than or 
equal to the playback rate R. At the same time, the in-degree allocated bandwidth albwin_i should 
be equal to R, and less than or equal to the in-degree bandwidth bwin_i, i.e., R = albwin_i ≤ bwin_i. 
The out-degree allocated bandwidth albwout_i should be more than or equal to the playback rate R, 
and less than or equal to the out-degree bandwidth bwout_i, i.e., R ≤ albwout_i ≤ bwout_i. Figure 4 
illustrates a live streaming multicast model of a single node. 
 
 7
example, in Figure 5, node 1 wants to watch node 15’s streaming, she/he searches for it and gets 
node 15’s location. Then in Figure 6, node 1 joins node 15’s ALM tree and start watching the 
streaming. 
 
 
Figure 5: Finding the resource with structured P2P search. 
 
 
Figure 6: Joining the ALM tree and start watching the streaming 
 
4.2.1 Design Issues 
 
In designing LIVING, some issues should be taken into consideration. First, basic ALM metrics, 
i.e., stress, stretch and resource usage, should be tuned as fine as possible so that the basic 
performance could be acceptable to users. Second, we have to consider some live media 
streaming characteristics, such as live, sensitive to data loss and timeliness constrains. Besides, in 
mobile environment, mobility causes handoff interruptions, dynamic bandwidth, and more failure 
rate. We must minimize the impacts of these situations. 
 
For this kind of services, the most important things users may concern are start-up delay, peer 
lags and viewing quality. As a result, we primarily focus on these design considerations. Start-up 
delay is the time interval between joining and watching. If start-up delay takes too long, users 
may loss their patience and stop using this service. Peer lags are the streaming lags between 
source and destinations. For real-time live services, long lags make users unwilling to continue 
watching. In mobile environment, viewing quality mainly depends on mobility, which causes 
service interruptions to users. Therefore, to better viewing quality, we have to reduce the effect 
caused from mobility, especially handoff interruptions. 
 
 9
 
Figure 7: The concept of aggregation. 
 
In the case of a graceful leave or unexpected failure, nodes are supposed to recover the service by 
themselves. To reduce the variation of peer location after leave or failure recovery, each node 
maintains some backup links. These links include nodes located in n-hop region except the node 
in the sub-tree rooted from itself. Figure 8 shows an example of n-hop region nodes for node 9. 
 
 
Figure 8: An example of n-hop region nodes for node 9. 
 
4.2.3 Join 
 
In the join process, a well-known Rendezvous Point (RP), which periodically crawls and 
maintains parts of node list from multicast trees, is setup. When a newcomer i wants to join a 
multicast tree, it gets N random nodes from RP first. We assume this step takes TRP = RTTi, RP + 
Tproc_RP time, where RTTi, RP is the round trip time between node i and RP, and Tproc_RP is the 
process time of RP. Then, it sequentially queries the nodes. The queried node replies its parent, 
children list, peer lags and available out-degree. There will be at most N candidates with 
available out-degree and the newcomer joins the node with shortest peer lags. If none of the N 
nodes has available out-degree, the newcomer extensively queries from the N nodes using BFS 
until meeting a node with available out-degree. The newcomer’s parent does optimization after 
join procedure. We assume each query takes TQ = RTTi, j + Tproc_j time, where RTTi, j is the round 
 11
 
4.2.5 Failure Recovery 
 
While there is something wrong, node i first checks its parent. If parent(i) is still alive, node i 
waits for parent(i)’s recovery. However, if parent(i) is not alive, node i checks its backup links. If 
one of the backup links has spare available out-degree, it reconnects to the backup node. If none 
of the backup links have spare available out-degree, node i rejoins the multicast tree. 
 
4.2.6 Optimization 
 
As the system is dynamically changing, some adjustments are needed to make it stronger and 
more stable. The major principle for optimization is to improve the overall system performance 
with least negative effects to other nodes. Optimization takes place when periodic events, 
including information updates and links checks, join, and leave procedures occur. 
 
While optimization takes place, node i first queries the descendants in n-hop region from itself 
using BFS. When mj < mi, where node j ∈ descendants of node i in n-hop region from node i, 
there exists some descendants of node i that are more stable than node i. To reduce the overall 
path mobility probability, it is better to promote node j. In this case, node j reconnects to parent(i) 
and node i reconnects to node j. If aodj = 0, node j makes one of its children with greatest 
mobility probability reconnects to node i. Figure 11 shows the concept of promotion. 
 
 
Figure 11: The concept of promotion. 
 
In addition to promotion, a vacancy filling method can also be used for optimization. When aodi 
≥ 1, node i has available spare out-degree bandwidth and can carry one descendant up to improve 
the overall performance, including peer lags and path mobility probability. In our design, node i 
carries up the grandchild with greatest aggregated information in order to balance the multicast 
tree at the same time. Node i asks node j, the child with greatest aggregated information, about 
node k, which is node j’s child with greatest aggregated information. Finally, node i makes node k 
reconnect to node i. Figure 12 depicts the concept of vacancy filling. 
 
 13
layer routers and wireless access points. The simulation, results and some discussions are 
presented in this section. 
 
5.1 Simulation Setup 
 
5.1.1 Performance Metrics 
 
Our main performance metrics are average viewing quality (VQ), average relative delay penalty 
(RDP), average start-up delay (SD) and control overhead. 
 
Since the viewing quality is mainly affected by handoff interruptions, we define viewing quality 
as the proportion of total service interruption time. That is to say, VQi = tM_i / tlifetime_i, where tM_i 
is the total service interruption time caused from handoffs of any node on the root path, and 
tlifetime_i is the lifetime of the service. If the jth handoff of node i takes tINT_i_j, we can define tM_i 
=Σj = 1 to number of handoffs tINT_i_j. And VQi = (Σj = 1 to number of handoffs tINT_i_j) / (tlifetime_i). Less handoff 
leads to better viewing quality. 
 
To evaluate peer lags, we can simply apply stretch, which is defined as (end-to-end delay of node 
i and the root using the overlay tree) / (end-to-end delay of node i and the root using unicast), as 
our performance metric. However, it is difficult to conjecture unicast paths. What’s more, unicast 
paths are generally equal to the shortest paths. To have an explicit evaluation, we define another 
performance metric RDPi = (end-to-end delay of node i and the root using the overlay tree) / 
(end-to-end delay of node i and the root using network layer shortest path), where the delay of 
two nodes is the physical layer hop count between them in simulations. 
 
To evaluate start-up delay, we define SDi = TRP + k * TQ, where TRP = RTTi, RP + Tproc_RP, TQ = 
RTTi, j + Tproc_j as mentioned in system design, and k is the query times. NCHC TWAREN NOC’s 
reports [29] show that the average end-to-end RTT in Taiwan area, where hop count is about less 
than or equal to 10, is about 4ms to 8ms. And the RTT between Taiwan area and international 
area, where hop count is about more than 10, is about 150ms to 200ms. As a result, we assume 
the RTT of hop count of 10 or less is 10ms. Otherwise, the RTT of hop count of 11 or more is 
200ms. As regards Tproc_RP and Tproc_j, the process is to execute instructions, fetch the data in 
memory and then return. The memory access time is about 5ns to 7ns [30] and the CPU execution 
time is less than 1ms for most mobile devices that support multimedia functions. Consequently, 
we can assume Tproc_RP and Tproc_j as 1ms. 
 
5.1.2 Simulation Environment 
 
To calculate RDP, we need physical layer information to get end-to-end delay of each pair of 
nodes in simulations. We use a number of routers, APs and links to describe physical layer 
 15
as well as the final performance. To reduce the uncertainty from this parameter, we refer to [24] 
that use fixed number of out-degree in simulations, and have an individual discussion to the effect 
caused from this parameter. This parameter is set to 8 by default. Furthermore, optimization 
period, which indicates the period between two periodic events of each peer node, could affect 
the performance convergence speeds and optimization overhead. Therefore, we simulate the 
system with different optimization periods. This parameter is set to 50s by default. In addition, in 
our system design, the range of promotion hop number limits the scope of promotion during 
optimization. We also simulate the system using different promotion hop number. This parameter 
is set to 2 by default. Finally, join parameter N is the number of nodes provided by RP at join 
procedure. We simulate the system using different join parameter N to observe the impact to RDP, 
SD and join overhead. This parameter is set to 3 by default. 
 
5.2 Results 
 
We compare our system with three algorithms that construct overlay trees based on complete 
topology information, including no optimization, delay greedy heuristic algorithm and mobility 
greedy heuristic algorithm. No optimization represents a scheme that construct a multicast tree 
using the same join algorithm but do no optimization. For delay greedy heuristic algorithm, we 
use Compact Tree algorithm [35] as our benchmark. It grows a spanning tree from the root. And a 
new node with the smallest increment in tree delay is attached to the tree at each round. For 
mobility greedy heuristic algorithm, we use an algorithm which grows a spanning tree from the 
root. At each round, a new node with the smallest mobility probability is attached to the lowest 
level node of the tree. 
 
5.2.1 Proportion of Mobile Nodes 
 
We investigate the effects on performance with different proportion of mobile nodes. In Figure 15, 
average VQ of all the four algorithms grows while more proportion of mobile nodes uses the 
service. The growing rate of LIVING is similar to the rates of delay and mobility optimizations, 
while the rate of no optimization is pretty higher. On the other hand, Figure 16 shows that 
average RDP is not affected by proportion of mobile nodes. We conclude that LIVING can fit the 
situations with different proportion of mobile nodes. 
 
 17
0
0.02
0.04
0.06
0.08
0 2000 4000 6000 8000
time
av
era
ge
 V
Q
50s 100s 150s 200s 250s
 
Figure 17: Average VQ using different optimization periods. 
 
0
1
2
3
4
5
0 2000 4000 6000 8000
time
av
era
ge
 R
DP
50s 100s 150s 200s 250s
 
Figure 18: Average RDP using different optimization periods 
 
0
10
20
30
40
0 2000 4000 6000 8000
time
op
tim
iza
tio
n o
ve
rh
ea
d
50s 100s 150s 200s 250s
 
Figure 19: Optimization overhead using different optimization periods. 
 
5.2.3 Promotion Hop Number 
 
In our system design, promotion hop number is proposed for limiting overhead. We evaluate the 
performance using different promotion hop number so that an adequate value can be found and 
 19
Figure 22: Optimization overhead using different promotion hop number. 
 
5.2.4 Conclusions 
 
We summarize our main conclusions as follows. First, comparing to other algorithms, LIVING is 
scalable in terms of group size. Second, the proportion of mobile nodes affects VQ, but not RDP. 
More proportion of mobile nodes leads to more VQ. Moreover, node out-degree has impact on 
both VQ and RDP. Larger out-degree results in less VQ and RDP. Furthermore, while the 
performance convergence speed performs similar using different optimization periods between 
50s and 150s, the optimization overhead grows high using shorter period. Hence, it is suitable to 
choose larger optimization periods between 50s and 150s. Besides, system with larger promotion 
hop number generates more overhead, while the convergence speed is not apparently improved. 
Consequently, it is suitable to choose smaller promotion hop number between 1-hop and 5-hop. 
Finally, there exists tradeoff between start-up delay, join overhead and average RDP while 
adjusting join parameter N. 
We have implemented LIVING using Java platform. The system performs well on Windows XP, 
RedHat Linux and Mac OS X with 5 fps 320 x 240 pixels resolution JPEG images, and 
uncompressed audio streaming. The overall data flow rate is about 50-120 kbps per overlay link. 
Figure 23 shows our system architecture and a picture with 6 mobile peers. Start-up delay and 
peer lags of all the peers are less than 1s. 
 
 
Figure 23: Implementation using Java platform. 
 
Furthermore, we also successfully implemented LIVING on ITRI (Industrial Technology 
Research Institute) PCA (Personal Communication Agent) system, which uses Session Initiation 
Protocol (SIP) [36] as control signals, H.263 and MPEG-4 as video codec, and QCIF (176 x 144) 
as video resolution. The overall data flow rate is about 250 kbps per overlay link. Figure 24 
shows the demonstration of one live streaming source (the notebook) and 4 receivers (the PDAs) 
in WLAN mobile environment. The peer lags of all the peers are less than 1s. 
 21
[14] L. Mathy, R. Canonico, D. Hutchison, “An overlay tree building control protocol,” Intl. 
workshop on Networked Group Communication, 2001. 
[15] S. Ratnasamy, M. Handley, R. Karp, S. Shenker, “Application-level multicast using 
content-addressable networks,” NGC, 2001. 
[16] D. A. Helder, S. Jamin, “End-host multicast communication using switch-trees protocols,” 
GP2PC, 2002. 
[17] B. Zhang, S. Jamin, L. Zhang, “Host multicast: A framework for delivering multicast to end 
users,” IEEE INFOCOM, 2002. 
[18] S. Banerjee, Bobby Bhattacharjee, C. Kommareddy, “Scalable application layer multicast,” 
ACM SIGCOMM, Pittsburgh, PA, 2002. 
[19] D. Tran, K. Hua, T. Do, “ZIGZAG: An Efficient Peer-to-Peer Scheme for Media Streaming,” 
tech. rep. Orlondo: Univ. Central FL, CS-UCF 2002, 2002. 
[20] V. N. Padmanabhan, H. J. Wang, P. A. Chou. “Resilient Peer-to-Peer Streaming,” Technical 
Report MSR-TR-2003-11, Microsoft Research, Redmond, WA, 2003. 
[21] S. Banerjee, B. Bhattacharjee, “A comparative study of application layer multicast 
protocols,” unpublished report. 
[22] A. El-Sayed, V. Roca, L. Mathy, “A survey of protocols for an alternative group 
communication service,” IEEE Network, 2003. 
[23] C. Abad, W. Yurcik, R. H. Campbell, “A survey and comparison of end-system overlay 
multicast solutions suitable for network centric warfare,” SPIE, 2004. 
[24] S. W. Tan, G. Waters, J. Crawford, “A performance comparison of self-organising 
application layer multicast overlay construction techniques,” Computer Communications, 
2006. 
[25] J. Konemann, “Approximation Algorithms for Minimum-cost Low-degree Subgraphs,” PhD 
Thesis (Computer Science). CMU, 2003. 
[26] S. Y. Shi, J. S. Turner, M. Waldvogel, “Dimensioning server access bandwidth and multicast 
routing in overlay networks,” Proc. NOSSDAV, 2001. 
[27] N. M. Malouch, Z. Liu, D. Rubenstein, S. Sahu, “A graph theoretical approach to bounding 
delay in proxy-assisted, end-system multicast,” Proc. IWQoS, 2002. 
[28] K. Albrecht, R. Arnold, M. Gahwiler, R. Wattenhofer, “Aggregating Information in 
Peer-to-Peer Systems for Improved Join and Leave,” Proc. of the Fourth International 
Conference on Peer-to-Peer Computing (P2P'04), 2004. 
[29] National Center for High-Performance Computing, Taiwan Advanced Research & Education 
Network, Network Operation Center <http://noc.twaren.net/>. 
[30] The PC Guide <http://www.pcguide.com/ref/ram/timingAccess-c.html>. 
 23
分散式雜湊表（Distributed Hash Table）類型的結構化（Structured）P2P系統進行資源搜尋
的效能評估，並分析不同的 P2P 節點識別對應方式對於搜尋過程所造成的影響，最後推導
出數學公式並用模擬方來驗證其正確性。考慮結構化的 P2P網路較容易受 P2P節點變動的
影響，[39]採用非結構化（Unstructured）的 P2P網路，建立一套基於 P2P與 SIP的網際網
路電話服務系統，並且有較佳的效能與較少的維護成本。由於行動節點具有高度可移動性
與收訊不穩定，[40]結合 P2P 技術，建構穩定的應用層群體廣播樹，設計出支援行動網路
環境之同儕即時視訊廣播服務系統。最後，[41]提出了結合車間通訊及無線網路的 P2P 路
況導航系統，利用 P2P網路將車間通訊網路可能離散的部份接起來，讓路況資訊的交換不
再受到車間通訊傳輸半徑及車流密度的限制，於是駕駛人將可以迅速獲得正確且即時的道
路資訊，提供了有效率的路況查詢。 
除了學術上的研究成果外，本計畫的實作成果也以「行動點對點即時視訊廣播系統」
（Live Video Broadcasting for Mobile P2P Networks）入圍九十四學年度大專校院通訊科技專
題製作競賽（CC2006）決賽。 
最後，我們刻正整理相關研究成果，預計將繼續投稿至國際學術研討會與學術期刊。 
 
