 1 
摘要 
 
碎形影像壓縮擷取出自然影像的相似性，並且使用疊代函數系統來編碼，研究者
在對這個技術在理論上以及應用上都有很大的興趣。然而，碎形編碼非常的花時
間，而這個缺點，使得這個技術無法在即時的環境中使用。編碼所花的時間主要
是用來從一個很大的搜尋空間找出最相似的區塊。在這個計畫之中，我們使用了
蟻群演算法，雖然這個演算法已經正確地加入了許多複雜的最佳化問題，它單單
只適合具體形式的問題。本文中加入螞蟻演算法在碎形影像壓縮加速編碼處裡的
問題上，而從實驗結果可以看出，在比對全域搜尋方法，本文所提出方法在當保
留最高品質低於 1.5 dB 下可實現出超過 25 倍的速度，而本文中最有趣的部分是
以新穎的重建技術藉由螞蟻演算法建造出對於影像形式之轉換碎形影像壓縮問
題的解決方法。 
 
本研究同時以 PSO 多重代理人架構應用在碎形影像壓縮上，藉由引入法團的架
構將 PSO 與 quorum 結合在一起。每一個 domain block 都是一個 PSO 並擁有一
個族群，而每一個族群之粒子則視為代理人亦即 range block，所有的代理人在搜
尋的過程中，會提供目前搜尋 domain block 的結果給法團，也會透過法團取得其
他代理人所搜尋到的 domain block 的資訊，藉由交換代理人，使得搜尋的結果能
夠朝向最佳解的方向前進，期望藉由這種架構來有效的提昇碎形影像壓縮的效能
與品質。 
 
 
關鍵詞：碎形影像壓縮，螞蟻最佳化演算法，粒子群聚演算法，法團系統，法團
群。 
 
 3 
螞蟻演算法應用於碎形影像壓縮 
 
1. 前言 
碎形影像壓縮的構想是基於假設影像重複性可能有效地被區塊仿射的方法
所利用，在 1985 年 M. F. Barnsley 和 S. Demko 提出碎形轉換壓縮，而在 1992 年
A. E. Jacquin 提出第一個碎形影像壓縮計畫。使用全域搜尋規劃(exhaustive search 
strategy)的主要缺點，其中一個是緩慢的編碼速度。因此，改善碎形影像壓縮的
編碼速度是一個很有趣的研究。用於加速編碼器(encoder)最有效的方法就是減少
搜尋空間(search space)，而經常使用的方法則是畫分搜尋空間在各群中伴隨一些
常見的特徵(feature)基於統計或影像性質的分類器。Fisher 的分類方法是根據影
像區塊的變異數(variance)及強度(intensity)建構出 72 種類別(class)，從搜尋空間
被分成 72 種較小類別及搜尋只被執行在相同的類別中，則編碼速度也有所進步
了。在 Wang 及其他的論文中，對應區塊(range block)中的四種類型被定義在影
像的邊緣性質基礎上所發表方法提供了從 1.6 倍到 5 倍的加速，更進一步的分類
方法是藉由 Duh、Jeng 和 Chen 建議產生邊緣性質的使用加速了編碼及在這段期
間所保存影像的品質。 
用於減少搜尋空間的另一方法是大自然啟發智能(nature inspired intelligence)
的使用，也被稱作為社會智能 (collective intelligence)，結合了亂數選擇器
(stochastic selection)。分成兩種主要類別：第一類別稱作演化計算(evolutionary 
computation)，包括演算法如基因演算法(genetic algorithm, GA)中基層機制“是適
者生存(fitter survives)”，近期以一些論文採用以基因演算法為基礎來用於提高
效能；第二類別，稱作群體智能(swarm intelligence)，包括如粒子群聚最佳化
(particle swarm optimization, PSO)演算法，此演算法產生出在社會中個人經驗分
享的社會行為之使用，Tseng、Hsieh 和 Jeng 等學者正確地發表藉由影像的視覺
效果所推導出粒子間的運動量的粒子群聚最佳化演算法。 
螞蟻演算法是一個以群為基礎的新搜索技術來解決最佳化問題，特別是複雜
的組合問題，螞蟻演算法是根據社會群體的行為發展出的策略，蟻群尋找食物
時，會產生費洛蒙進而找出最短路徑；因螞蟻的天性會按照費洛蒙的累積來聚
集，此亦為螞蟻管理駐點的方式，該過程可解決相鄰節點移動的問題，根據這種
機制，螞蟻演算法可用於影像相關的最佳化問題，亦可應用於旅行駐點問題、車
輛路線問題、二次分配和序列排序等，但並非所有問題都適用螞蟻演算法，需要
有節點和路徑的組成，才可以使用。在本文中，我們將螞蟻演算法使用在碎形影
像壓縮的全域搜尋上，解決全域搜尋耗時的問題，加快了編碼的速度，在新模式
的碎形影像壓縮中，我們首先要定義螞蟻和城市，其中路徑定義為費洛蒙的累積
量，實驗結果證明，在全域搜尋中，本方法可提升超過 25 倍的加速，同時保持
影像的品質衰退在 1.5dB 以下。 
 
 
2. 碎形影像壓縮(FIC) 
碎形影像壓縮的基本概念是使用疊代函數系統(IFS)，其中會影響碎形影像壓
縮定理的有固定點映射定理和拼貼定理。我們取得一張大小為 NN × 的灰階圖，
分割成 LL× 個不重疊區塊，對應域(range pool) R 則會有 2)( LN 個，壓縮後的碎
形編碼會是固定區塊的兩倍，因此定義域 (domain pool)組成一個集合為
2)12( +− LN ，重疊區塊大小為 LL 22 × 。以 256256× 影像為例，編碼的區塊大小
 5 
的應用方式，從所得到的碎形編碼影像便是最後的影像。 
 
 
3. Ant Colony Optimization 螞蟻演算法(ACO) 
 螞蟻演算法是一個以群聚和疊代為基礎的搜索技術用來解決最佳化問題，尤
其是複雜組合問題，使用費洛蒙的資訊，在最複雜組合問題中，只有次優的解決
方案可以達到。螞蟻演算法是螞蟻社會行為中找尋食物時的最短路徑，在演算法
中，每個代理人，例如:螞蟻，從一個點拜訪到另一個相聯路徑點；在下一次疊
代，其他螞蟻根據其他螞蟻們所留下的費洛蒙的濃度旅行到另一座城市，螞蟻以
放置費洛蒙與跟著費洛蒙走這種方式合作達到目的地。 
最典型適合使用螞蟻演算法(ACO)的是旅行者問題(TSP)，本章節將如何描
述使用螞蟻演算法來解決旅行者問題，在第 t次疊代， )(tijτ 表示城市 i到城市 j 之
間所累積費洛蒙的量， ijη 表示這兩個城市之間的能見度，實際上指的就是兩個
城市之間的距離， )(iJk 為螞蟻 k尚未拜訪過城市的集合，群體大小為m ，機率
分佈 )(tpkij 定義為： 
 






∈
×
×
= ∑
∈
otherwise,0
)( if,)())((
)())((
)(
)(
iJj
t
t
tp
k
iJu
iuiu
ijij
k
ij
k
βα
βα
ητ
ητ
 (7) 
α 和 β 分別是控制費洛蒙與能見度的參數，在下一次疊代， )(tpkij 為螞蟻 k訪問
城市 i到城市 j 的機率，在城市 i與城市 j 之間的最短距離 ji − 中累積了較多費洛
蒙。在下一次疊代，螞蟻 k 會有很高的機率選擇城市 j 。 
 而所有的城市都要被訪問到，每隻螞蟻對應一個候選的解決方案，而旅行的
總長度被稱為成本，如果這個成本不符合我們的需求，我們更新費洛蒙並發送到
下一次疊代，一個基本的更新公式可歸納為： 
 ∑
=
∆+×−=
m
k
k
ijijij tt
1
)()1()( ττρτ  (8) 
其中， 
 




−
=∆
otherwise,0
 tourits in  path usesant    theif, jik
L
Q th
k
k
ijτ  (9) 
在這更新公式 ρ ，為揮發常數， 10 ≤< ρ ，Q為費洛蒙的量， kL 為螞蟻 k 在上一
代的成本。 
 和大部分進化式計算演算法類似，在 ACO 中參數m、α、β、ρ  and Q應
該給予適當的值，以利於探勘與開發。在 ACO 演算法中，區塊的描述如圖二 
 
 
4. ACO在 FIC之應用 
正如前面的章節，通常將問題轉換成由節點或是路徑所組成的問題，使螞蟻
演算法可以用來解決這個問題。要演變成演算法，我們需要先定義代螞蟻、關於
費洛蒙的規則和成本函數。 
對於碎形影像編碼問題，我們定義對應域區塊(range block)為螞蟻，每個定
義域區塊(domain block)定義為“城市”。在這個問題中城市與城市之間並沒有
 7 
形影像壓縮使用全域搜尋方法和使用我們的方法比較重建影像質量和編碼時
間。Borland C++ Builder 6.0 執行在有 Intel Pentium 4 3.0GHz CPU 的 PC 上。測
試影像是 Lena 和 Pepper 大小 256256× 的灰階影像。實驗使用區塊大小範圍是
88× ，區域大小是 1616× ， ]2,2[−∈p ， ]512,512[−∈q 。在測試影像質量的雜訊
比，給予 
 
)MSE/255(log10 210×=PSNR
 
(14) 
參數方法定義如下:  
1. α 是費洛蒙 
2. β 是能見度 
3. m 是在一區塊範圍內螞蟻重覆的數量 
4. Q是螞蟻費洛蒙的數量 
5. ρ 是費洛蒙的揮發率 
6. T 是最大疊代次數 
7. 初始費洛蒙濃度每個區域都是 1 
藉由不同的費洛蒙揮發率和α  = 1, β  = 1、 100=Q 、 100=m 和 10=T 在
Lena 影像上重複 5 次所得結果。如表 1 所示。重建影像的 PSNR 介於 27.54 至
27.59 之間。可看出揮發率的影響並不重要。 
藉由 ρ  = 0.8、 100=Q 、 100=m 和 T = 10 在 Lena 影像上經由不同的費洛
蒙和能見度的參數重複 5次所得結果。如表 2 所示。當費洛蒙和能見度的參數都
等於 1 時得到了最好的結果。 
藉由 100=Q 、 1=α 、 1=β 、 8.0=ρ 、 100=m 和 10=T 在不同的影像上
重複 5 次所得結果。如表 3 所示。 使用提出的方法其 Lena 的平均編碼時間是
146 秒且重建影像的品質是 27.56dB。使用全域搜尋法在編碼過程中編碼時間是
3716秒且重建影像的品質是 28.90dB。所提出方法的重建影像品質比全域搜尋法
的重建影像品質少 1.34dB，但是編碼次數被減少 25.8 倍。在其他影像上的結果
類似。 
圖 3 和 4 為碎形影像壓縮在 Lena 和 Pepper 分別使用全域搜尋法和提出的方
法的結果。 
螞蟻演算法是一種強大的群聚智慧類型演算法。雖然螞蟻演算法已成功地被
應用在許多難以最佳化的問題上，他只適用於節點和路徑所組成的具體形式問
題。由於這種限制，螞蟻演算法只適用最佳化問題像是旅行者問題(TSP)、車輛
路線問題(VRP)和其他相關問題。碎形影像壓縮是一個典型必須在巨大的集合中
尋找的問題。雖然，這問題利用許多集體智慧的演算法可以簡單解決，他不是一
個適用於螞蟻演算法的形式。 
本文重建碎形影像壓縮問題只是用螞蟻演算法形式和得到優越的編碼速
度。在這所提出的方案中，我們定義一個對應域區塊當作媒介和一個定義域區塊
當作城市。螞蟻分泌費洛蒙在城市而不是介於兩城市的街道。螞蟻(對應域區塊)
之間的MSE的最小倒數和城市(定義域區塊)被視為能見度。隨著這些設定，機率
分部不可以被計算和因此在螞蟻演算法中演變得以繼續。 
實驗結果表示，相對於全域搜尋方法，所提出方法加快了編碼器約 25.8 次
而保持圖像品質衰減至 1.5dB。雖然這裡所獲得加速沒有顯著比以前其他最佳化
方法的文章好，新穎的重建方法使我們能夠提出運用螞蟻演算法去解決碎形影像
壓縮即時編碼的方法。這可能開啟一個新的解決其他有趣的問題藉由螞蟻演算法
或是其他集體智慧演算法的方法。 
 9 
圖 3. Lena圖中 FIC 使用全域搜尋法和論文中提出的搜尋法比較圖 
 
 
  
(a) 原始影像 (b) 全域搜尋影像, PSNR 
= 30.41 
(c) 論文方法 , PSNR = 
28.81 
圖 4. FIC 使用全域搜尋法和論文中提出的搜尋法比較圖 
 
 
表 1. Lena圖中費洛蒙 不同的蒸發速率結果 
費洛蒙  
揮發率 
品質 
(PSNR) 
平均 
(PSNR) 
0.1 27.59 27.48 27.53 27.67 27.55 27.56 
0.2 27.63 27.60 27.59 27.60 27.55 27.59 
0.3 27.56 27.57 27.52 27.57 27.53 27.55 
0.4 27.54 27.55 27.58 27.63 27.59 27.58 
0.5 27.55 27.66 27.46 27.60 27.56 27.57 
0.6 27.50 27.57 27.55 27.55 27.53 27.54 
0.7 27.63 27.57 27.62 27.51 27.54 27.57 
0.8 27.58 27.50 27.61 27.59 27.66 27.59 
0.9 27.53 27.58 27.49 27.56 27.53 27.54 
 
表 2. 在 Lena圖上費洛蒙和能見度不同參數值的結果. 
α
 
β  品質 (PSNR) 
平均 
(PSNR) 
1 1 27.58 27.50 27.61 27.59 27.66 27.59 
2 1 27.17 27.23 27.27 27.24 27.10 27.20 
1 2 26.71 26.59 26.67 27.03 26.61 26.72 
2 2 26.62 26.34 26.63 26.51 26.65 26.55 
 
表 3. 不同影像的結果值. 
 Lena Baboon F16 Pepper 
品質 
(PSNR) 28.90 20.13 26.09 30.41 全域搜尋
方法 
時間 (sec) 3620 3716 3684 3709 
27.58 19.75 25.70 28.74 
27.50 19.77 25.81 28.78 
27.61 19.80 25.74 28.69 
27.59 19.72 25.80 28.80 
論文方法 
品質
(PSNR) 
27.66 19.78 24.48 28.69 
 11 
salesman problem, IEEE international conference on evolutionary computation 
(1997) 299-314. 
[18] C. C. Tseng, J. G. Hsieh, and J. H. Jeng, Fractal image compression using 
visual-based particle swarm optimization, Image and Vision Computing, Vol. 26, 
Issue 8, pp. 1154-1162, Aug 2008. 
[19] L. Vences and I. Rudomin, Genetic algorithms for fractal image and image 
sequence compression, Proceedings Computation Visual (1997) 35-44. 
[20] Z. Wang, D. Zhang, and Y. L. Yu, Hybrid image coding based on partial fractal 
mapping, Signal Processing: Image Communication 15 (2000) 767-779. 
[21] M. S. Wu, J. H. Jeng, and J. G. Hsieh, Schema genetic algorithm for fractal 
image compression, Engineering Applications of Artificial Intelligence 20 (2007) 
531-538. 
[22] M. S. Wu, W. C. Teng, J. H. Jeng, and J. G. Hsieh, Spatial correlation genetic 
algorithm for fractal image compression, Chaos, Solitons & Fractals 28(2) (2006) 
497-510. 
 
 
 
 
使用 Quorum架構之 PSO在 FIC之應用 
 
7. 粒子群聚演算法(Particle Swarm Optimization) 
粒子群聚演算法 (particle swarm optimization, 簡稱 PSO) 是 Kennedy 及 
Eberhart 於 1995 年所提出，一個源於「社會心理學原理」以及「演化式計算」
的最佳化演算法。PSO 是一個以族群概念為基礎的全域最佳解搜尋演算法，並
且有著演化式計算概念中常見的特性，如「適應度」 (fitness) 的評估。以 GA 為
比較對象來說， PSO 的相似之處在於，都是將大量的搜尋解當成一個仿生物的
族群來操作，並在一開始使用亂數來初始整個族群。而粒子移動時會往個體最佳
經驗 (PBEST) 還是群體最佳經驗 (GBEST) 的方向改變，其中的權衡拿捏，也
是和 GA 「交配」運算子的概念相似的。然而，粒子在決定移動方向時也加入
了「隨機」 (randomness) 的概念，讓粒子的移動有機會跳脫目前的趨勢，以免
陷入「區域最佳解」 (local optimum) 。此外， PSO 中的粒子，也就是每個可
能的潛在解，是擁有速度並在整個搜尋空間中「飛行」的，此種行為就和 GA 完
全不同。此外，粒子跟粒子群都有記憶的能力，這更是 GA 裡面的族群所沒有
的。 
令 )(
,
tx hj  和 )(, tv hj  分別定義成，時間 t 時，群聚中第 j 個粒子之第 h 個
維度的位置向量和速度向量。 PSO 的模型可被表示成 
 )),1((
))1(()1()(
,
#
22
,
*
,11,,
−−⋅⋅+
−−⋅⋅+−=
txxc
txxctvtv
hjh
hjhjhjhj
ϕ
ϕ
 
 
 
)()1()(
,,,
tvtxtx hjhjhj +−=
 
 
其中 *jx  (PBEST) 表示截至時間 1−t  為止第 j 個粒子的最佳位置，而 #x  
(GBEST) 則表示截至時間 1−t  為止整個粒子群找到的最佳位置； 1ϕ  和 2ϕ  
是隨機數， 1c  和 2c  則分別代表個體性 (individuality) 係數和社會性 (sociality) 
係數。 
 13 
的適應度評估值算出。 
4. 如果需要，更新 PBEST 和 GBEST 並同時更新相對應的其他碎形壓縮
碼。 
5. 如果停止準則已經滿足，則停止編碼搜尋。 
6. 利用式 (1) 和 (2) 來更新每一個粒子的速度和位置。回到步驟 2. 執行。 
 
 
8. 法團和法團群(Quorum and Coterie) 
法團系統(quorum system)是由非空集合的子集合所形成的，這些子集合稱為
法團(quorum)[1,2]。針對特性的不同與運用的對象，法團系統有許多的形式，例
如 coteries[3]、k-coteries[4,5]、local coteries[6]與 wr-coteries[7]等。法團系統是一
種利用數學上集合理論裡的交集(intersection of sets)概念所建立的架構。目的是
將資料依照特定組合安排其屬於的集合，使的產生的多個集合符合任意兩個集合
都有交集的要求。這個結構的特性可以讓結構內的運算節點相當有效率的交換資
訊，且因為具有較低的訊息量與較高的錯誤容忍能力，因此被廣泛的應用在分散
式系統中互斥(mutual exclusion)、複本和容錯等問題上。 
運用在互斥問題中，因為系統的資源有限，多數的運算節點能分享少數的運
算資源，因此必須要有一套合理的分配及管理機制，使得各個運算節點能夠公平
使用運算資源。常用的分配規則是一個系統資源同時僅存在少數的使用許可，當
一個運算節點需要使用系統中的資源時，它要先詢問系統內其他運算節點是否同
意它進入使用，如果得到一致的同意，才能開始使用這個運算資源。若有其他節
點正在使用此資源時，就會拒絕它的使用要求。這個過程可能需要重複多次才能
讓一個提出需求的節點得到運算資源的使用權。如果把所有的節點架構成法團群
(coteries)結構，利用法團系統之間的相交性質，要使用資源時需要詢問的節點數
就由系統內部的節點降到一個法團內的全部節點。 
在複本控制問題中，以法團為基礎的複本控制方法是將系統中的各個複本由
兩個不同的法團系統，分別為查詢集合(query-set)與更新集合(update-set)。在操
作更新複本動作時，每一個節點只需要對更新集合其中一個法團進行更新，在查
詢的時候則利用查詢集合的其中一個法團進行查詢，藉由法團系統的相交性質，
可以確保複本的正確性。 
目前法團系統應用在分散式計算與行動計算上，如分散式系統的副本控制與
容錯問題[8-10]、負載平衡問題[11,12]、無線網路的繞徑選擇問題[13]、行動網路
的位置追蹤問題[14-19]、P2P網路建構與資訊維護問題[20,21]等。 
針對應用的對象不同，quorum 使用的方式也不太一樣，這邊以介紹使用
quorum 用來處理分散式複本的一致性與容錯的問題上。Quorum 具有下列兩個優
點： 
(1) 在一致性處理上，並不需要對所有的複本進行資料的同步，只要針對選定
的集合(quorum set)進行更新，系統即可正常運作，可以大幅度的降低更新
資料的成本。 
(2) 在查詢的處理上，只要使用者端對選定的集合內的節點進行呼叫，並同時
比對集合內各節點的時間戳記，來確保查詢的結果是最新的資料，最後在
將集合內所有節點的時間戳記及資料進行更新，用來逐漸更新所有的節點
資料。 
 15 
子群的 gbest 的 fitness值小於 40、或超過 20次回合沒有變化時，表示此值域圖
塊已經完成編碼。 
接著，以 Baboons等 5張圖進行 4 種演算法的實驗，分別是前述以回合為單
位的 PSO 方法，採 50、100、200三種粒子群數，另加上 Fractal full search 的方
法，四種方法都只做 k=0 的一個角度。由實瞼數據顯示，三種粒子群數的 PSNR
值差異不大，均與 full search 的方法非常接近，編碼的時間則縮短非常多。詳
細結果如下表。 
 
Image Method PSNR (DB) 
執行時
間 
(秒) 
Fitness 
執行次數 
iteration 
<10 
比例 % 
iteration 
<20 
累積比
例 % 
iteration 
<50 
累積比
例 % 
PN=50 21.12 15.79 1,873,950 25.50 57.81 99.31 
PN=100 21.19 29.71 3,522,900 29.90 66.45 99.90 PSO 
PN=200 21.21 54.75 6,493,000 43.19 75.33 99.70 
Baboon 
Full search, k=0 21.39 420.00 59,474,944     
PN=50 22.60 16.28 1,926,900  18.69 57.89 98.92 
PN=100 22.64 30.18 3,571,600  27.91 68.77 99.60 PSO 
PN=200 22.73 55.20 6,545,200  43.11 74.34 99.80 
Barbra 
Full search, k=0 22.89 395.80 59,474,944   
 
 
PN=50 24.53 16.21 1,919,000  21.51 56.73 99.02 
PN=100 24.76 30.16 3,577,400  29.49 66.28 99.41 PSO 
PN=200 24.82 55.42 6,576,800  40.28 73.92 99.90 
Boat 
Full search, k=0 25.26 403.50 59,474,944     
PN=50 27.08 16.66 1,972,150  18.27 54.49 98.63 
PN=100 27.26 30.22 3,587,000  26.50 67.19 99.60 PSO 
PN=200 27.48 55.10 6,523,800  40.78 76.25 100.00 
Lena 
Full search, k=0 28.07 381.50 59,474,944     
PN=50 27.21 16.34 1,936,400  19.68 57.14 98.63 
PN=100 27.62 29.92 3,542,700  27.57 68.85 99.70 PSO 
PN=200 28.01 54.52 6,864,800  42.61 76.99 100.00 
Peppers 
Full search, k=0 28.80 379.80 59,474,944     
 
 
本研究將以多重代理人架構應用在碎形影像壓縮上，藉由引入法團的架構將
PSO 與 quorum 結合在一起。將 PSO 的粒子視為代理人，所有的代理人在回報搜
尋資訊與查詢其他代理人的結果時需要維持正確性與一致性，所有的代理人在搜
尋的過程中，會提供目前搜尋 domain block 的結果給法團，也會透過法團取得其
他代理人所搜尋到的 domain block 的資訊，進而調整本身搜尋的參數，藉由各最
佳化演算法資訊的交流，使得搜尋的結果能夠朝向最佳解的方向前進，加快搜尋
的速度，期望藉由這種架構來有效的提昇碎形影像壓縮的效能與品質，以驗證此
架構的可行性，進而能推廣此架構來解決其他問題。 
 17 
PN=100 27.17  31.10  3,594,200  33.30  78.90  99.60  
PN=200 27.48  56.35  6,510,400  50.09  89.64  99.80  
PN=50 27.10  19.70  2,279,000  7.12  42.18  95.80  
PN=100 27.41  36.71  4,249,000  8.59  55.76  98.14  
合併 
r2 
PN=200 27.48  66.96  7,739,800  16.11  74.12  98.63  
Full search, k=0 28.80 379.80  59,474,944     
 
 
10. References 
[1] D. K. Gifford, “Weighted voting for replicated data,” Proceedings of the 
Seventh Symposium on Operating Systems Principles, pp.150-159, 1979. 
[2] S. Fujita, M. Yamashita, and T. Ae, “Distributed k-mutual exclusion problem 
and k-coteries,” Proceedings of the 2nd International Symposium on Algorithms, 
Lecture Notes in Computer Science, Vol. 557, Springer, Berlin, pp.22-31, 1991. 
[3] Hector Garcia-Molina and Daniel Barbara, “How to assign votes in a distributed 
system,” J. ACM, vol.32, no.4, pp.841-860, 1985. 
[4] Moni Naor and Avishai Wool, “Access control and signatures via quorum Secret 
sharing,” IEEE Transaction on Parallel and Distributed Systems 9 (9), 
pp.909-922, 1998. 
[5] Shuo-Li Hsu, Yukon Chang, and J. H. Jeng, “Finding k-Coteries on a Circular 
Numbering System,” 2006 Symposium on Digital Life Technologies, CD-ROM, 
Taiwan, 2006. 
[6] Z. Cheng, Y. Wada, S. Hashimoto, A. He, and T. Huang, “A new method for 
constructing efficient local coteries,” 15th International Conference on 
Information Networking, pp.512-517, Jan. 2001. 
[7] Yu-Chen Kuo and Shing-Tsaan Huang, "Recognizing nondominated coteries 
and wr-coteries by availability," IEEE Transactions on Parallel and Distributed 
Systems, vol.9, pp.721-728, Aug. 1998. 
[8] Kang-Yu Liu, “The study of distributed fault-tolerant k-mutex algorithm,” 
Department of Information and Computer Education National Taiwan Normal 
University, Thesis for Master of Science, Taiwan, R.O.C., June 1999. 
[9] Y. Xiao, “Backoff strategies for demand re-registration in PCS database failure 
recovery,” Computer Communications 27(5), pp.400-411, 2004. 
[10] C. Storm and O. Theel, “Highly adaptable dynamic quorum schemes for 
managing replicated data,” The First International Conference on Availability, 
Reliability and Security(ARES 2006), CD-ROM, Apr. 2006. 
[11] C. Liu, D. Yu, H. Qiu, and J. Wu, “Research of VLR mobility database failure 
recovery and performance analysis for CDMA2000 system,” IEEE Proceedings 
on Personal, Indoor and Mobile Radio Communications, pp.1501-1505, 2003. 
[12] A. Kumar, “An efficient SuperGrid protocol for high availability and load 
balancing,” IEEE Transactions on Computers, vol.49, pp.1126-1133, Oct. 2000. 
[13] K. Ratnam, S. Rangarajan, and A. T. Dahbura, “An efficient fault-tolerant 
location management protocol for personal communication networks,” IEEE 
Transactions on Vehicular Technology 49 (6), pp.2359-2369, 2000. 
[14] Ming-Jeng Yang, Yao-Ming Yeh, and Yao-Ming Chang, “Legion Structure for 
Quorum-Based Location Managerment in Mobile Computing,” Journal of 
Information Science and Engineering, pp.191-202, Jan. 2004. 
[15] R. Prakash, Z. Haas, and M. Singhal, “Load-Balanced Location Management 
for Cellular Mobile Systems using Quorums and Dynamic Hhashing,” Wireless 
無衍生研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
