Approximate Searching for Music Data in Real-Valued Feature Indexing1 
Yu-Lung Lo, Ling-Yi Tsai 
efficient in query search. 
The exactly matching for music search is widely 
discussed in music database retrieval; nevertheless, the 
approximate searching technology for fault tolerant 
queries in a music database has not received many 
attentions. For approximate searching, the most of 
current works list all the possible combinations of an 
approximate query then performing the exactly 
searching and looking for the targets. It is very time 
consuming. In this paper, we will propose an 
approximate matching approach for real-valued feature 
music index. Our approach will support music query 
search more efficient than existing scheme. 
The remaining of this paper is organized as follows: 
in section 2, we brief review the existing music index 
schemes and specify the string indexing, numeric 
indexing, and real-valued indexing for music data 
retrievals. We also like to overview the existing 
approximate music searching technology in this section. 
After that, our approximate matching for music 
retrieval by real-valued comparison is proposed in 
section 3. Finally, we show our experimental results in 
section 4 and a conclusion is given in the last section. 
 
2. Related Works 
 
There are many research reports for music database 
retrieval in recent years. In this section we specify the 
string indexing and numeric indexing for music data 
retrieval, and brief review the approximate matching 
for numeric index. 
2.1 String Indexing for Music Retrieval 
A suffix tree is a tree-like index structure 
representing all suffixes of a string and provided 
solutions for string matching problems [21][26][27]. It 
consists of following characteristics: 
(1). A suffix tree which constructed from a string 
with length of m symbols consists of m leaf 
nodes. These leaf nodes can be numbered from 1 
to m. 
(2). Any two branches from a non-leaf node should 
be labeled with different symbols. 
(3). The number of each leaf node points out the 
start position of the sub-string which consists of 
the symbols labeled from the root to this leaf 
node of the tree. 
Recently, the suffix tree is also used as indices for 
music feature strings to help searching in music 
database. Suppose the music data consists of n notes, 
e.g. Do, Re, Mi, …, etc. and each note can be 
represented by a music symbol ‘a’, ‘b’, ‘c’, … , 
respectively. Therefore, a melody can be represented as 
a music feature string by these music symbols 
[8][13][14][19][24]. For example, if there is a music 
feature string represented as “ababc”, its suffixes are 
“ababc”, “babc”, “abc”, “bc”, “c”. The suffix tree 
constructed from these suffixes can be shown in Figure 
1. Therefore, in this approach, music data retrieval can 
be performed as string matching in suffix tree. 
 
ab
abc abcc c
c
b
1 23 4
5
 
Figure 1. A suffix tree for music string 
In addition, the full melody of music may be too 
long for creating index. There are several researches 
pointed out that the key melodies (themes) and 
repeating patterns of music are much shorter and easy 
to familiarize and remember for people [1][8][13][19]. 
Therefore, we can use the themes or the repeating 
patterns to construct indices that can simplify the index 
and speedup query execution for music retrieval. 
2.2 Numeric Indexing for Music Retrieval 
In 2000, Jagadish et al. proposed numeric mapping 
which maps a string into a real value [9]. They used R-
tree and B-tree to construct the numeric indices for the 
transformed values and helping string searching. Later 
on, a numeric indexing technique for music data was 
proposed by Lo, et al. [15][16]. If the music data can 
be represented by a numeric value, the R-tree and many 
other numeric index structures can be used to construct 
the index for music data. For translating music data 
into numeric value, let’s assume that the music symbols, 
‘a’, ‘b’, ‘c’, …, ‘m’, also can map into integer values 0, 
1, 2, …, m-1, respectively. If we pick out a music 
segment with n sequential notes from a melody feature 
string, denoted x1, x2, …, xn, the integer value of each 
note can be represented by P(xi), 1 ≤ i ≤ n. Therefore, 
this segment of n sequential notes can be transformed 
into a numeric value by the conversion function – v(n), 
as shown below. 
88
Approximate Searching for Music Data in Real-Valued Feature Indexing1 
Yu-Lung Lo, Ling-Yi Tsai 
vreal(s), for converting s into a real value is derived as 
following: 
∑
=
−+×=
)(
1
)1()()(
slength
x
xy
real mxPsv
… (2) 
Where, x denotes the note index of s, P(x) is the 
integer value for a note that is similar as defined in 
Equation (1), however, the integer value starts from 1, 
2, …., to m instead of 0, 1, …, to m-1 for each note in 
this approach. Since, a real value has two parts, integral 
and fractional, separated by decimal point, 0 could be 
represented as an end symbol in the fractional part. 
Thus, if the fractional part stops at someone non-zero 
fractional digit, there is impossible any note 
represented as 0 converted after this last non-zero 
fractional digit. Moreover, y which denotes the number 
of notes converted into the integral part can ease the 
overflow for fractional part. 
For example, suppose that there are nine kinds of 
music notes and each of them can represent to an 
integer value 1, 2, 3, …, or 9. If there are 3 notes will 
be converted into integral part (y =3), a music segment 
“abcdab” can be converted into a real value as follows:  
vreal(“abcdab”) = 1×102+2×101+3×100+4×10-1+1×10-2 
+2×10-3 = 123.412 
In this report, only exact matching was provided for 
searching in the real-valued index. The experimental 
result demonstrated that real-valued music indexing 
outperforms existing music indexing approaches in 
exactly matching. However, the approximate searching 
algorithm was not discussed in this paper. 
3. The Approximate Matching in Real-
valued Music Index 
Multimedia database retrievals usually can not 
perform exactly match well. Approximate matching 
provides fault tolerance ability that allows certain error 
in the music query string. However, the approximate 
searching technology for fault tolerant queries in a 
music database has not received many attentions. Most 
of current works list all the possible combinations of a 
fault tolerant query then doing the exactly searching 
and looking for the targets. It is very time consuming. 
In this section, we will propose the music searching 
with approximate matching in real-valued music 
feature index. 
3.1 An Example for Real Value in 
Hexadecimal Representation 
The mapping function (2), vreal(s), can convert a 
music segment into a real value then used to construct 
music index. For explaining of our proposing scheme 
for approximate searching, we would like to clarify that 
the real value for construct music index may not be a 
decimal representation. Suppose that the fifteen kinds 
of music notes we used to present a music are low-
pitched Mi ~ Si, mediant Do ~ Si, and high-pitched Do 
~ Mi and each of them can be represented by an unique 
symbol of ‘a’ ~ ‘e’, ‘f’ ~ ‘l’, and ‘m’ ~ ‘o’, respectively. 
In addition, each of these music symbol can also be 
converted into an integer value of 1, 2, 3, …, 9, A, 
B, … and F in hexadecimal representation. Such that 
the mapping function vreal(s) can be looked as a 
hexadecimal conversion. Moreover, assuming that 
there are two music segments from the Train Flies 
Quickly (S1: Sol Sol Mi Do Sol Sol Mi Do) and the 
Happy Birthday (S2: Sol Sol La Sol Ďo Si) such that 
these two music segments can be represented by 
“jjhfjjhf” (S1) and “jjkjml” (S2), respectively. If there 
are 4 notes will be converted into integral part (y = 4), 
the suffixes of S1 and S2 can be converted into real 
values of hexadecimal by function vreal(s) and shown in 
Table 3 and Table 4. 
Table 3. Converted real values for music segment (S1) 
of the Train Flies Quickly 
music segment suffixes hexadecimal real values 
jjhfjjhf jjhfjjhf AA86.AA86 
 jhfjjhf A86A.A86 
 hfjjhf 86AA.86 
 fjjhf 6AA8.6 
 jjhf AA86 
 
Table 4. Converted real values for music segment (S2) 
of the Happy Birthday 
music segment suffixes hexadecimal real values 
jjkjml jjkjml AABA.DC 
 jkjml ABAD.C 
 kjml BADC 
 
After that, we insert the converted real values of the 
suffixes of music segment of the Train Flies Quickly 
into an R-tree structure and the result index is 
presented in Figure 2. Moreover, if we continue to 
insert the converted real values of the suffixes of music 
segments of the Happy Birthday in Table 3-2 into the 
R-tree, the result index is also shown in Figure 3. 
 
90
Approximate Searching for Music Data in Real-Valued Feature Indexing1 
Yu-Lung Lo, Ling-Yi Tsai 
(1) The effect of number of fault tolerant notes 
(2) The effect of query length 
(3) The effect of integral part of conversion 
 
0.00
2.00
4.00
6.00
8.00
10.00
12.00
14.00
a b c d e f g h i j k l m n o p q r s
note
%
 
Figure 4. 19 most occurrence notes 
 
Table 5. Parameters for experiment 
Parameter Value or Domain 
Database size (music segments) 10,000 
Integral part (y) 3 ~ 6 
Query length (k) 4 ~ 8 
Kinds of different notes (m) 19 
Fault tolerant notes (d) 0~3 
Pitch difference allowed (h) 3 
Number of queries  Examined > 50,000 
 
4.1 The Effect of Number of Fault Tolerant 
Notes 
In this study, we would like to observe how the 
number of fault tolerant notes can influence the 
efficiency of approximate matching for music retrieval. 
In this experiment, the number of notes (y) of integral 
part for real-valued music indexing is 4, number of 
fault tolerant notes (d) is varied from 0 to 3, and each 
note fault within the ± 3 pitches difference (h = 3). The 
databases still consists of 10,000 music segments and 
the query length (k) is varied from 4 to 8. Again, we 
examined at least 50,000 query segments for each 
query length setting to insure a convergent of average 
response time. 
Figure 5 shows the average response time for query 
length from 4 to 8 with varied of the number of fault 
tolerant notes. It’s no surprising that the longer query 
length the longer average response time. If there is no 
fault tolerance allowed, all five query lengths perform 
the exactly match and result in very close average 
response time.  
0
0.5
1
1.5
2
2.5
3
0 1 2 3
Fault Tolerance Size（notes）
A
v
g
 R
e
sp
o
n
se
 T
im
e
（
1
0
 -
5
 s
e
c
）
Query Length = 4
Query Length = 5
Query Length = 6
Query Length = 7
Query Length = 8
 
Figure 5. Query lengths with varied number of fault 
tolerant notes 
In addition, we also like to compare our proposed 
approximate matching approach to existing schemes. 
However, the approximate searching technology for 
fault tolerant queries in a music database has not 
received many attentions. Lo et al. proposed the 
approximate searching in a numeric index [15]. 
Nevertheless, it allows one error note only. Most of 
current works list almost all the possible combinations 
of a fault tolerant query then doing the exactly 
searching and looking for the targets [4][5][14]. Figure 
6 displays the comparison of our proposed scheme with 
the all possible combinations for query lengths 5 and 8 
for approximate matching. All the experimental 
parameters setting are same as in Figure 5. The average 
response time for the all possible combinations of fault 
tolerant query raise rapidly and the curves are out of 
scale of the figure when number of fault tolerant notes 
is 1 or more. On the other hand, the curves for our 
proposed scheme with query lengths 6 and 8 are very 
flat with extremely low average response time. This 
study demonstrates that our proposed approximate 
matching approach outperforms existing scheme and is 
more flexible for the number of fault tolerant notes for 
music searching. 
92
Approximate Searching for Music Data in Real-Valued Feature Indexing1 
Yu-Lung Lo, Ling-Yi Tsai 
approximate matching of query search in real-valued 
music indexing. 
0
0.5
1
1.5
2
2.5
3
3 4 5 6
Integer Size（notes）
A
v
g
 R
e
sp
o
n
se
 T
im
e
（
1
0
 -
5
 s
e
c
）
Query Length = 4
Query Length = 5
Query Length = 6
Query Length = 7
Query Length = 8
 
Figure 8. The effect of integral part of conversion for 
approximate matching 
5. Conclusion and Future Works 
The approximate searching for music databases has 
not received much attention so far. Recently, the real-
valued feature indexing for music data has been 
proposed for quickly and exactly searching in a music 
database. In this paper, we proposed an approximate 
matching algorithm for fault tolerant searching in the 
real-valued music index. The experimental result 
demonstrates that our approach can perform efficient 
approximate searching and outperform existing scheme. 
We expect that our approach will not only improve 
music database retrieval but also be applicable in some 
multimedia databases. 
To avoid the subtraction with borrowing, our 
approximate matching must be done by subtracting the 
real value of the music query from the values in nodes 
of music index tree digit by digit and take the absolute 
value for each result digit. Such that our algorithm 
needs to spend some time for this procedure and it 
should be slower than the subtraction directly. Our 
future works will try to improve this procedure for 
more efficiency. 
6. References 
[1] V. Bakhmutova, V. D. Gusev, and T. N. Titkova, “The 
Search for Adaptations in Song Melodies,” Computer 
Music Journal, Vol. 21, No. 1, 1997, Pages 58-67. 
[2] S. Blackburn and D. DeRoure, “A Tool for Content-
based Navigation of Music,” In Proc. Of ACM 
Multimedia, 1998, Pages 361-368. 
[3] J.C.C. Chen and Arbee L.P. Chen, “Query by Rhythm 
An Approach for Song Retrieval in Music Databases,” 
In Proc. Of Int’l Workshop on Research Issues in Data 
Engineering, 1998, Pages 139-146. 
[4] A.L.P. Chen, M. Chang, J. Chen, J.L. Hsu, C.H. Hsu, 
and Spot Y.S. Hua, “Query by Music Segments: An 
Efficient Approach for Song Retrieval,” In Proc. of 
IEEE Int’l Conf. on Multimedia and Expro, 2000. 
[5] M.T. Chen and J. Seiferas, “Efficient and Elegant 
Subword-Tree Construction,” in A. Apostolico and Z. 
Galil. Editors, Combinatorial Algorithms on Words, 
Vol. 12 of NATO ASI Series F: Computer and System 
Sciences, Springer-Verlag, Berlin, Germany, 1984, 
Pages 97-107. 
[6] S-T. Goh and K-L. Tan, “MOSAIC: A Fast Multi-
feature Image Retrieval System,” Data & Knowledge 
Engineering 33, 2000, Pages 219-239. 
[7] A. Guttman, “R-Trees A Dynamic Index Structure for 
Spatial Search,” Proceedings of the 1984 ACM 
SIGMOD international conference on Management of 
data, 1984, Pages 47-57. 
[8] J. L. Hsu, C. C. Liu, and Arbee L.P. Chen, “Efficient 
Repeating Patterrn Finding in Music Databases,” In 
Proc. of ACM Int’l Conf. on Information and 
Knowledge Management, 1998. 
[9] H. V. Jagadish, N. Koudas, and D. Srivastava, “On 
Effective Multi-dimensional Indexing for Strings,” In 
Proc. of ACM SIGMOD, May 2000, Pages 403-414. 
[10] S. Kiranyaz and M. Gabbouj, “Hierarchical Cellular 
Tree: An Efficient Indexing Scheme for Content-based 
Retrieval on Multimedia Databases,” IEEE 
Transactions on Multimedia, Vol. 9, No.1, January 
2007, Pages 102-119. 
[11] W. Lee and A.L.P. Chen, “Efficient Multi-feature Index 
Structures for Music Data Retrieval,” In Proc. Of SPIE 
Conf. on Storage and Retrieval for Image and Video 
Database, 2000. 
[12] C. H. Lin and Arbee L. P. Chen, “Indexing and 
Matching Multiple-attribute Strings for Efficient 
Multimedia Query Processing,” IEEE Transactions On 
Multimedia, Vol. 8, No. 2, April 2006. 
[13] C. C. Liu, J.L. Hsu, and Arbee L.P. Chen, “Efficient 
Theme and Non-trivial Repeating Pattern Discovering 
in Music Databases,” In Proc. of IEEE Data 
Engineering, 1999, Pages 14-21. 
[14] C. C. Liu, J. L. Hsu, and Arbee L. P. Chen, “An 
Approximate String Matching Algorithm for Content-
based Music Data Retrieval,” In Proc. of IEEE Int’l 
Conf. on Multimedia Computing and Systems, 1999, 
Pages 451-456. 
[15] Y-L. Lo and S-J. Chen, “The Numeric Indexing for 
Music Data,” Proceedings of the 4th Int’l Workshop on 
Multimedia Network Systems and Applications 
(MNSA’2002), Vienna, Austria, July 2002, Pages 258-
263. 
94
表 Y04 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                             99 年 07 月  13 日 
報告人姓名 羅有隆 服務機構
及職稱 
朝陽科技大學 
資訊管理系副教授 
     時間 
會議 
     地點 
2010 年 7 月 9-11 日 
中國成都 電子科技大學 
本會核定
補助文號
NSC 98-2221-E-324-027 
會議 
名稱 
 (中文)第三屆 IEEE 計算機科學與訊息技術國際會議 
 (英文)2010 3rd IEEE International Conference on Computer Science and 
Information Technology (IEEE ICCSIT2010) 
發表 
論文 
題目 
 (中文)以音樂內容為基礎之音樂分類 
 (英文)Content-Based Music Classification 
報告內容應包括下列各項： 
一、 參加會議經過 
 
此研討會舉行日期為 7月 9~11 日，我們的論文被安排在 7月 10 日的下午場次，
Section topic: Computer Science and Information Technology。大會於早上安排了四場的
專題演講(Plenary Speeches)，由三位學界一位業界的專家來演講，安排得相當密集
與豐富，讓與會者有機會了解到各不同領域之知名學者專家的研究發展現況。感謝國
科會的支持，此次研討會得以帶領作者之一的研究生─林奕昌同行參與，讓研究生有
參與國際研討會與練習以英文報告與交談之機會。與會專家學者多來自美國、中國、
香港、日本、韓國、英國、法國、以及台灣，是個很好的國際交流與開擴視野之機會。
參與過程之照片如下： 
 
(1) 報告論文照片 
 
 
附件三
 
表 Y04 
由上可見，能夠出國參與國際研討會，對於國內研究生來說，在英文學習的認
知、研究領域的擴展、甚至兩地人文了了解，都有很大的收獲。感謝國科會的支持，
給予我們師生這個機會。 
 
三、 考察參觀活動(無是項活動者省略) 
 
主辦學校─電子科技大學，校內的硬體設備相當完善，並不亞於台灣的大學，
甚至有過之。於成都，我們亦參觀了杜甫草堂、武侯祠等古蹟，可以體會到大陸近
年對歷史文物古蹟保存的用心。 不過，入園參觀的票價太貴，皆為 60 元人民幣，
與當地生活水平並不相稱，可能是以觀光客為主要目標。此外，中國人民於插隊、
以及隨地吐痰等之習慣，經常讓外來的觀光客難以適應與理解。 
 
四、 建議 
今年 IEEE ICCSIT 每個場次皆安排二、三十篇的論文報告，不過缺席的也相當
多，真正出席的仍然有 10~15 分鐘的時間可報告。 這可能與主辦單位之態度有關，
因主辦單位有主動通知，若不出席的，可將會議資料郵寄過去，影響了出席意願。
這與過去我們所參與過的研討會皆要求至少要有位作者出席報告的情況不同。 
 
五、 攜回資料名稱及內容 
Proceedings of 2010 3rd IEEE International Conference on Computer Science and 
Information Technology (IEEE ICCSIT 2010 研討會論文集。 
 
 
98年度專題研究計畫研究成果彙整表 
計畫主持人：羅有隆 計畫編號：98-2221-E-324-027- 
計畫名稱：音樂資料數值特徵索引之近似搜尋研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 2 2 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 1 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
