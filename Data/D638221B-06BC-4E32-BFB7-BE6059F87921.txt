  
determine the threshold and can be 
classified into parametric and 
nonparametric approaches. In parametric 
approaches (Weszka and Rosenfeld, 1979; 
Snyder et al., 1990), the gray-level 
distribution of each class has a 
probability density function that is 
assumed to obey a Gaussian distribution. 
An attempt to find an estimate of the 
parameters of the distribution that will 
best fit the given histogram data is made 
by using the least-squares method. It 
typically leads to a nonlinear 
optimization problem, of which the 
solution is computationally expensive 
and time-consuming. Nonparametric 
approaches find the thresholds that 
separate the gray-level regions of an 
image in an optimum manner according 
to some discriminating criteria such as 
the between-class variance (Otsu, 1979), 
entropy (Kapur et al., 1985) and cross 
entropy (Li and Lee, 1993). Compared to 
the parametric methods, nonparametric 
approaches are more computationally 
efficient and simpler to implement in 
practice. Both parametric and 
nonparametric approaches have one 
common problem that the computational 
complexity becomes exponential when 
bi-level thresholding is extended to 
multilevel thresholding. Snyder et al. 
(1990) presented an alternative method 
for fitting curves based on a heuristic 
method called tree annealing. Yin (1999) 
proposed a fast scheme for optimal 
thresholding using genetic algorithms. 
Cheng et al. (2000) applied fuzzy entropy 
in image segmentation, used it to select 
the fuzzy region of membership function 
automatically so that an image can be 
transformed into fuzzy domain with 
maximum fuzzy entropy, and 
implemented genetic algorithm to find 
the optimal combination of the fuzzy 
parameters. However, automatic selection 
of a robust, optimum threshold has 
remained a challenge in image 
segmentation. To overcome this problem, 
Yen et al. (1995) proposed a new 
criterion for multilevel thresholding, 
termed Automatic Thresholding Criterion 
(ATC). The method uses a criterion 
function and the interested histogram 
region is dichotomized sequentially until 
the cost function reaches its minimum. 
There have been numerous applications 
of fuzzy entropy in image segmentation. 
In this research, an improvement 
upon Gaussian curve fitting and the 
Otsu’s method is reported that the 
effectiveness and the efficiency of these 
two optimal thresholding methods could 
be greatly enhanced in the case of 
multilevel thresholding. We present a 
hybrid genetic algorithm and particle 
swarm optimization (denoted as, 
GA-PSO) to solve the objective functions 
of Gaussian curve fitting and the Otsu’s 
method. The GA-PSO method is applied 
to image thresholding with multimodal 
histograms, and the performances of 
GA-PSO on Otsu and Gaussian curve 
fitting are compared with those of the 
Otsu’s method via exhaustive search. We 
could have also combined GA-PSO with 
dichotomization technique to find the 
optimal classification number in the 
Automatic Thresholding Criterion. 
Likewise, GA-PSO can be combined 
with maximum fuzzy entropy method to 
find the optimal combination of all the 
fuzzy parameters. The major benefit of 
GA-PSO method is to speed up the 
searching process for the image 
segmentation method. 
 
A. Parametric Approaches by Gaussian 
Curve Fitting 
    A properly normalized multimodal 
histogram )(xp  of an image, where x  
represents the gray levels, can be fitted 
with the sum of d  probability density 
functions (pdf’s) for finding the optimal 
thresholds for use in image segmentation 
(Syender, 1990). With Gaussian pdf’s, the 
model has the following form: 
∑
=
⎥⎦
⎤⎢⎣
⎡ −−=
d
i i
i
i
i xPxp
1
2
2)(
exp
2
)( σ
µ
σπ   (1) 
  
 and 
1,,2,1,]1,0[ −=−∈ djLTj L    (14) 
where )(ˆ ip  is the observed probability 
of gray-level i in an image ranging over [ ]1,0 −L , as previously described in 
equation (3), and jT  is the 
thj  
threshold value. 
In bi-level thresholding, minimizing 
the within group variance is equivalent to 
maximizing the between class variance, 
so the Otsu’s method can find the optimal 
threshold by exhaustive search efficiently. 
However, when this method is extended 
to multilevel thresholding, the 
computation time grows exponentially 
with the number of thresholds. 
Specifically, the computational 
complexity of exhaustive search is 
)O( 1d-L , where L is the number of gray 
levels. Thus, in practical applications 
where multilevel thresholding is 
necessary, this method is not a logical 
choice. 
 
 
三、研究方法 
This section discusses the 
infrastructure and rationale of the hybrid 
algorithm. Figure 1 depicts the schematic 
representation of the proposed hybrid 
GA-PSO, an as can be seen, GA and PSO 
both work with the same initial 
population. When solving an 
N-dimensional problem, the hybrid 
approach takes 4N individuals, which are 
randomly generated. These individuals 
may be regarded as chromosomes in the 
case of GA, or as particles in the case of 
PSO. A total of 4N individuals are sorted 
by fitness, and the top 2N individuals in 
Figure 1 are fed into the real-coded GA to 
create 2N new individuals by crossover 
and mutation operations. Joined by the 
new 2N individuals created from 
real-coded GA, the last 2N particles are 
adjusted by the PSO method. The result is 
sorted in preparation for repeating the 
entire run. The hybrid algorithm 
terminates when it satisfies a 
convergence criterion and is summarized 
in Figure 2. 
In literature review, we have 
described the parametric approaches by 
Gaussian curve fitting and nonparametric 
approaches by the Otsu’s method. Both 
objective functions (4) and (10) are now 
subjects to being optimized by GA-PSO. 
For example, in tri-level thresholding, 8 
parameters, { }33221121 ,,,,,,, σµσµσµPP=Θ  
and 213 1 PPP −−= , for Gaussian curve 
fitting and 2 parameter, },{ 21 TT , for the 
Otsu’s method can be solved by 
GA-PSO. 
 
四、研究結果 
    In this research, we evaluate the 
performances of the following methods: 
the Otsu’s method with exhaustive search, 
and the proposed GA-PSO algorithm 
implemented on the Otsu’s method and 
Gaussian curve fitting as objective 
functions, which we shall refer to as 
GA-PSO-Otsu and GA-PSO-Curve, 
respectively. The test images are of size 
256256× pixels with 256 gray-levels, 
taken under natural room lighting without 
the support of any special light source. 
The algorithms are implemented on a 
Pentium IV 2.4G with memory capacity 
256 MB using Matlab. A stopping 
criterion used for the study is N×10  
iterations when solving an N-dimensional 
problem. To account for both efficiency 
and effectiveness, the criterion N×10  
has been tested with much success from 
previous experiments. Initially, 
parameters iP  for GA-PSO-Curve are 
set at dPi 1= , s'iµ  are selected from 
the d  possible peaks of the histogram, 
and s'iσ  are all set to 1.00. Starting 
values of the T  parameters for 
GA-PSO-Otsu are randomly generated 
from Uniform(0, 255). The maximum 
velocities maxV for GA-PSO-Curve and 
GA-PSO-Otsu are 1 and 10, respectively. 
GA-PSO-Curve is concerned with fitting 
  
Otsu’s method may arise, as the size of 
objects relative to the background is 
small. Table 6, smoothly fitted histograms 
are formed and the threshold values are 
properly located at the valleys that 
separate the pinholes and electric circuits 
from the background, with a mean square 
error of 0.0031. 
Figure 4(f) and figure 5(f) display 
GA-PSO-Otsu (or the Otsu’s method) and 
GA-PSO-Curve thresholding results of a 
complex PCB image, respectively. From 
this test case, a similar conclusion to that 
found in image 5 can be drawn that the 
outlines of the circuits on the lower part 
of the image cannot be clearly segmented 
by using the Otsu’s method because of 
their relative object sizes. The excellent 
performance of GA-PSO-Curve on image 
6 lies in the third threshold value 3T  at 
149, as opposed to 175 in the Otsu’s 
method. Table 7 illustrate that 
GA-PSO-Curve fits the original 
histogram well enough, with a mean 
square error of 0.0026. 
    Table 1 shows that GA-PSO-Otsu 
and the Otsu’s method converge in the 
same amount of time for bi-level 
thresholding in image 4, but for images 5 
and 6, GA-PSO-Otsu outperforms the 
Otsu’s method in computation time for 
multilevel thresholding. For tri-level and 
four-level thresholding cases, the 
computation time of the Otsu’s method 
takes about 18 and 570 times as much as 
GA-PSO-Otsu, respectively. This implies 
that GA-PSO-Otsu can likely be applied 
in real-time for multi-thresholding in that 
it only takes about 0.03 second for 
four-level thresholding. Yet, in images 
4-6 the efficiency is apparently not our 
major concern, so GA-PSO-Curve is 
recommended for maintaining quality 
outputs despite its expensive computation. 
If the speed is of primary importance 
rather than the effectiveness for a 
particular application (as previously 
discussed in images 1-3), thus 
GA-PSO-Otsu should be adopted. 
 
五、結論 
Although the Otsu’s method is very 
efficient in bi-level thresholding cases, its 
computation time becomes aggravated in 
the case of multilevel thresholding. To 
make the Otsu’s method more practical in 
on-line object segmentation, we have 
proposed a faster searching scheme called 
GA-PSO-Otsu that solves the Otsu’s 
method objective function using a hybrid 
optimization method. Experimental 
results show that GA-PSO-Otsu can 
accelerate the Otsu’s method in 
multilevel thresholding for real-time 
applications and does not degrade the 
quality of image segmentation. In 
addition, we have presented an off-line 
object segmentation method called 
GA-PSO-Curve. Comparison results of 
the Otsu’s method to GA-PSO-Curve 
demonstrate that GA-PSO-Curve offers 
higher quality in visualization, object size 
and contrast of image segmentation, 
particularly when the image has a 
complex structure or the contrast between 
the object and background is vague. Not 
surprisingly, GA-PSO-Curve incurs 
higher computation time than the Otsu’s 
method since curve fitting needs to 
search for the optimum values of more 
parameters. It is clearly seen from the 
experimental results that the presented 
methods that incorporate hybrid 
optimization techniques successfully 
avoid local minima and are extremely 
easy to implement in practice as they 
only minimize the associated objective 
function. In closing, GA-PSO-Otsu is a 
promising and viable tool for on-line 
object segmentation in multi-thresholding 
due to its computational efficiency, and 
GA-PSO-Curve proves to be effective for 
off-line object segmentation in 
multi-thresholding due to its quality 
performance. 
 
 
 
 
 
  
 
 
 
1. Initialization. Generate a population of size 4N individuals for an N-dimensional 
problem. 
Repeat 
2. Evaluation & Ranking. Evaluate the fitness of each individual. 
  Rank them based on the fitness results. 
  3. GA method. Apply real-coded GA operator (crossover and mutation) to the top
2N individuals and create new 2N individuals. 
3.1 (Selection). From the population select the 2N best chromosomes based on 
fitness. 
    3.2 (100% Crossover). Using the 2N best chromosomes, apply two-parent 
crossover to update the worst 2N chromosomes by the following equations.
        12.......,,2,1))1,0(1()1,0( 1
' −=−+= + NixUniformxUniformx iii  (2) 
        NixUniformxUniformx ii 2))1,0(1()1,0( 1
' =−+=            (3) 
    3.3 (20% Mutation). Apply mutation with 20% mutation probability to the 
worst 2N updated chromosomes according to the equation described below:
                     )1,0(' Nrandxx kk ×+=                        (4) 
4. PSO method. Apply PSO operator (velocity update) for updating 2N individuals 
with worst fitness. 
4.1(Velocity Update) The particle’s velocity and position are updated by the 
following equations: 
      )()( 21
old
idgd
old
idid
old
id
New
id xprandcxprandcVwV −××+−××+×=  (5) 
                    Newid
old
id
New
id Vxx +=                          (6) 
  where 221 == cc and )]0.2/5.0[ randw += . Equation (5) illustrates that the 
new velocity for each individual particle is updated according to its previous 
velocity ( idV ), the best location in the neighborhood about the particle ( idp )
and the global best location ( gdp ). A Particle velocity in each dimension is 
clamped to a maximum velocity maxV  and the maximum velocity maxV  is set 
to a certain fraction of the range of the search space in each dimension. 
Equation (6) shows how each particle’s position ( idx ) is updated during the 
search of the solution space. 
Until the termination criterion is reached. 
Figure 2. The GA-PSO hybrid algorithm.  
 
 
 
 
 
 
 
 
 
 
 
 
 
Standard bi-level thresholding 
image 
(a) Image 1 
Standard tri-level thresholding 
image 
(b) Image2 
 
Standard four-level 
thresholding image 
(c)Image 3 
Bi-level thresholding of screw 
image 
(d) Image 4 
 
Tri-level thresholding of a 
PCB image 
(e) Image 5 
Four-level thresholding of a 
complex PCB image 
(f) Image 6 
Figure 3. The experiment images 
 
  
Table 2. Experimental result for Image 1 by GA-PSO-Curve. 
Image Level Starting point Number of Iteration 
1 2 (0.50, 99.00, 166.00, 1.00, 1.00) 50 
Method ),,,,( 21211 σσµµP  H  (Fitting Error) Time (sec)
GA-PSO-Curve (0.21, 98.70, 165.43, 2.38, 5.72) 0.0007 22.81
*T  118   
 
 
 
Standard bi-level thresholding image 
(a) Image 1 
 
Standard tri-level thresholding image 
(b) Image 2 
 
Standard four-level thresholding image 
(c)Image 3 
 
Bi-level thresholding of screw image 
(d) Image 4 
 
Tri-level thresholding of a PCB image 
(e) Image 5 
 
Four-level thresholding of a complex PCB image
(f) Image 6 
Figure 5. The experiment results from GA-PSO-curve 
 
