results reveal that our proposed algorithm performs 
better than previous works. 
英文關鍵詞： OFDMA, QoS, delay bound, loss probability, 
proportional-loss 
 
  
guarantees QoS if there is any scheduler which guarantees QoS. 
Simulation results reveal that our proposed algorithm performs 
better than previous works. 
The rest of this paper is organized as follows. In Section II, we 
describe the investigated system model. Related works are reviewed 
in Section III. Section IV contains our proposed scheme. Simulation 
results are presented in Section V. Finally, we draw conclusion in 
Section VI. 
II. SYSTEM MODEL 
We consider a single-cell OFDMA-based system which consists 
of one base station (BS) and multiple users or subscriber stations 
(SSs). Time is divided into frames, and the duration of a frame is 
equal to Tframe. In a frame, there are M sub-channels and S time 
slots. We assume that the sub-channel statuses of different SSs are 
independent. Moreover, for a given SS, its statuses on the M 
sub-channels are also independent. The channel quality for a given 
SS on a specific sub-channel is fixed during one frame. Transmis-
sion power is equally allocated to each sub-channel. To improve 
reliable transmission rate, an effective AMC scheme is adopted to 
choose a transmission mode based on the reported signal-to-noise 
ratio (SNR). We only consider downlink transmission. 
For ease of description, we assume that no SS is attached with 
both real-time and non-real-time traffic flows. Let 
RT  and NRT  
represent, respectively, the sets of SSs that are attached with re-
al-time and non-real-time traffic flows. Further, let 
RT NRT    . 
We shall use 
nK  to denote the number of traffic flows attached to 
SS n . All non-real-time flows attached to the same SS are aggre-
gated into one so that 
nK =1 if SS NRTn . The QoS requirements 
of real-time traffic flows are specified by delay bound and loss 
probability. The k
th
 flow attached to SS n  is denoted by 
,n kf . If SS 
RTn , then the delay bound and loss probability requirements of 
,n kf  are represented by ,n k frameD T  and ,n kP , respectively. Data are 
assumed to arrive at the beginning of frames. 
In the BS, a separate queue is maintained for each real-time traffic 
flow while non-real-time data are stored per SS. Assume that SS 
RTn . The data of flow ,n kf  are buffered in ,n kQueue , which can 
be partitioned into 
,n kD  disjoint virtual sub-queues, denoted by 
,
d
n kQueue , ,1 n kd D  , where ,
d
n kQueue  contains the data in 
,n kQueue  that can be buffered up to framed T  without violating their 
delay bounds. We shall use  ,
d
n kQ t  to represent the size of 
,
d
n kQueue  at the beginning of the t
th
 frame (including the newly 
arrived),    ,, ,1
n kD d
n k n kd
Q t Q t

 , and    ,1
nK
n n kk
Q t Q t

 .  Data 
which violate their delay bounds are dropped. It is assumed that the 
size of each queue is sufficiently large so that no data will be 
dropped due to buffer overflow.  To simplify notation, the queue for 
storing data of SS 
NRTn  is denoted by nQueue . 
III. RELATED WORK 
In all the reviewed related works, resource allocation is per-
formed at the beginning of each frame and, therefore, it suffices to 
consider one specific frame, say the t
th
 frame. For SS n, we denote its 
maximum achievable transmission rate on the m
th
 sub-channel in the 
tht  frame and its long-term average throughput up to the t
th
 frame by 
 ,n mr t  and  nr t , respectively. 
A.  Scheme of [13] 
In [13], resource allocation is formulated as an optimization 
problem which maximizes some utility function subject to QoS 
guarantee. It consists of two stages. In the first stage, resources are 
allocated to real-time traffic flows only. If there are un-allocated 
resources after the first stage, the second stage is performed to al-
locate the remaining resources to non-real-time traffic. 
In the first stage, called real-time QoS scheduling, the minimum 
requested bandwidth of each real-time traffic flow is calculated 
by  ,min ,1 1
n n kK D d
n n kk d
R Q t d 
 
  . Note that substituting   with 0, 
1, or   corresponds, respectively, to strict priority [14], average 
QoS provisioning [15], or urgent [16] scheduling policy. With the 
assumption that sub-channel is the smallest resource granularity, the 
first stage aims to minimize the total number of sub-channels used to 
serve the sum of calculated minimum requested bandwidths of all 
real-time flows. This problem can be modeled as maximum 
weighted bipartite matching (MWBM) and solved by the famous On 
Kuhn’s Hungarian method, whose complexity is 
2( (min( , )) )RT RTO M M   [17], where RT  is the size of RT . 
In the second stage, the 
thm  sub-channel, if still available, is al-
located to the SS which satisfies     * ,arg max NRTn n n n mn U r t r t  , 
where  nU x , called marginal utility function, is the first derivative 
of the utility function. For every SS, the utility function, defined by 
 -proportional fairness [18], is given by 
  
 
 
1 11  if 1           
log           otherwise
x
U x
x


 
   
 

  (1) 
where x represents the average throughput. Note that the policy 
corresponds to maximum throughput, proportional fairness, or 
max-min fairness if   is chosen to be 0, 1, or  , respectively. 
It was shown in [13] that the above scheme with 1   makes a 
reasonable trade-off between QoS support and maximization of 
system utility. However, it has some drawbacks. Firstly, assuming 
the granularity of resource to be sub-channels can result in waste of 
bandwidth. In current standards such as IEEE 802.16 and LTE, a 
sub-channel can be shared by multiple SSs. Secondly, although the 
number of sub-channels used to serve real-time traffic is minimized 
in the first stage, the remaining service capability for non-real-time 
traffic may not be maximized. This is because the qualities of re-
maining sub-channels could be poor for SSs attached with 
non-real-time traffic flows. Thirdly, calculation of the minimum 
requested bandwidth for each real-time traffic flow does not take its 
loss probability requirement into consideration. Real-time traffic 
usually can tolerate data loss to certain degree. System throughput 
can be improved significantly if one takes advantage of this feature 
in resource allocation. Finally, the complexity of the Hungarian 
method could make this scheme infeasible for a real system. 
  
lated amount of data served and lost up to the end of the thx  frame. 
Consider the tht  frame. Let  ,n kR t  be the bandwidth allocated to 
flow 
,n kf . For convenience,  ,n kR t  is expressed in terms of the 
amount of data served. As a result, we have    , ,0 n k n kR t Q t  . 
Let ( ) max( ,0)x x  .  Since data are lost only due to violation of 
their delay bounds, we have 
 
      
        
1
, , ,
, 1
, , , ,
1
.
1 1 max ,
n k n k n k
n k
n k n k n k n k
L t Q t R t
P t
S t L t R t Q t

  

   
 (2) 
The minimum requested bandwidth of 
,n kf , denoted by  
*
,n kR t , is 
determined as follows. If  max, ,n k n kP P t , then we set  
*
,n kR t   0  
because there is no loss probability violation even if zero resource is 
allocated to 
,n kf . Assume that  
max
, ,n k n kP t P    
min
,n kP t . In this 
case,  *,n kR t  is obtained by solving ,n kP    ,n kP t , where  ,n kP t  
is described by equation (2). Finally, if  min, ,n k n kP P t , then the 
running loss probability is still greater than or equal to the 
pre-defined level 
,n kP  even if all buffered data of ,n kf  are served. 
Therefore, we assign    *, ,n k n kR t Q t  to minimize the difference 
between  ,n kP t  and ,n kP . For convenience, we use  
*
,n kP t  to de-
note the running loss probability of 
,n kf  at the end of the t
th
 frame if 
the bandwidth allocated to 
,n kf  is  
*
,n kR t . Clearly,  
*
,n kP t  equals 
 max,n kP t  if  
max
, ,n k n kP P t  or  
min
,n kP t  if  
min
, ,n k n kP P t . The fol-
lowing lemma states that  *,n kP t  is closer to ,n kP  than any other 
 ,n kP t . 
Lemma 1. It holds that 
 
   
, ,
*
, , , ,
0 [ ]
min
n k n k
n k n k n k n k
R t Q t
P t P P t P
 
   . 
Proofs of lemmas and theorems are provided in Appendix A. The 
minimum requested bandwidth for all cases is summarized in 
TABLE I. Note that the actual allocated bandwidth could be dif-
ferent from  *,n kR t . After obtaining  
*
,n kR t  for all k, 1 nk K  , 
one can compute  *nR t , the aggregate minimum requested band-
width for SS n , as  *,1
nK
n kk
R t
 . The values of  
*
nR t , n RT  are 
used in the resource allocation algorithm described in the next 
sub-section. 
B. Resource Allocation for Maximum-throughput With QoS 
Constraints 
As described in Problem P1, the proposed resource allocation 
algorithm maximizes system throughput while providing QoS 
guarantee to real-time traffic flows. In problem P1, we let  * 0nR t   
for all SS n
NRT . As in previous section, we use  ,n mr t  to denote 
the maximum achievable transmission rate on the m
th
 sub-channel 
for SS n  in the t
th
 frame. The variable  ,n mx t  represents the 
number of time slots allocated to SS n  on the m
th
 sub-channel, in the 
t
th
 frame. 
P1 
   , ,
1
max
M
n m n m
n m
x t r t
 
  (3) 
subject to 
 , ,   , 1n m
n
x t S m m M

    , (4) 
       * , ,
1
,   
M
n n m n m n
m
R t x t r t Q t n

     , (5) 
and 
   , 0,1,2,...,       ,  1n mx t S n m M     . (6) 
Problem P1 can be solved by some integer linear programming 
algorithm [19]. If there is no feasible solution, meaning that the 
available resource is smaller than the summation of all minimum 
requested bandwidths, we set  , 0n mx t  , for all NRTn , 
1 m M  , and solve a modified problem, called problem P2, 
which is basically the same as problem P1 except that the constraint 
shown in equation (5) is replaced by 
     *, ,10 ,  
M
n m n m nm
x t r t R t n

     . Note that the solution of 
Problem P2 always exists because  , 0n mx t  , for all n , 
1 m M   is one feasible solution. Unfortunately, the complexity 
of integer linear programming is NP-complete [20]. One possible 
strategy to mitigate the computational complexity is to set 
,n mu =  ,n mr t  for all n , 1 m M  , and conduct the ma-
trix-based scheduling algorithm for one or two rounds. In the first 
round, we only consider SSs contained in 
RT , assuming that the 
queue occupancy of SS n is equal to  *nR t . The algorithm ends if 
the resource is exhausted in the first round. Otherwise, the second 
round is performed to allocate the remaining resource to all SSs, 
assuming the queue occupancy of SS n is equal to    *n nQ t R t .  
According to the analysis provided in the last section, the compu-
tational complexity of the modified matrix-based scheduling algo-
rithm is 
2 22 2(max( ,  ))O M M M     . 
 ,n kP t
 ,n kR t
 
m ax
,n k
P t
 
knee
,n k
P t
 
m in
,n k
P t
 
1
,n k
Q t  ,n kQ t
 
     
     
1
, , ,
, 1
, , ,
1
1 1
n k n k n k
n k
n k n k n k
L t Q t R t
P t
S t L t Q t
  

   
 
 
     
,
,
, , ,
1
1 1
n k
n k
n k n k n k
L t
P t
S t L t R t


   
0
0
 
Fig. 2  The relationship between  ,n kP t  and  ,n kR t . 
  
found earlier than Event 1), where the definition of  , ;n kh x t is 
shown in equation (9). Note that  , ;n kh x t  is the inverse function of 
 ,n kP t  shown in equation (2). The conditions for other events to 
happen can be similarly determined. After all flows are placed in the 
correct sets, the solution can be obtained by solving equations (7) 
and (8). To summarize, we repeatedly check the inequality shown in 
equation (10). If it holds, flow *,n kf  is moved from one set to an-
other. 
     
, 1 2 ,
, , ,;
n k P P n k A
n k n k n k n
f U U f U
h p P t Q t R t
 
    , (10) 
where 
     
, , 1 , 2
max knee min
, , ,
, , ,
max max , max , max
n k Z n k P n k P
n k n k n k
f U f U f U
n k n k n k
P t P t P t
p
P P P  
 
   
 
, (11) 
and 
     
, , 1 , 2
, 1 2
max knee min
, , ,*
, , ,
arg max max , max , max .
n k Z n k P n k P
n k Z P P
n k n k n k
f U f U f Uf U U U n k n k n k
P t P t P t
k
P P P  
 
   
 
(12) 
All flows are placed in their correct sets once the inequality shown in 
(10) becomes false. The solution can then be obtained as follows. 
Set  , 0n kR t   if ,n k Zf U  or  ,n kQ t  if ,n k Af U . For 
, 1 2n k P Pf U U  ,  ,n kR t  can be obtained by 
    F, , , ;n k n k n n kR t h P t P t  ,  where  FnP t  represents the nor-
malized running loss probability for any 
, 1 2n k P Pf U U   at the end 
of the tht  frame and is derived in Appendix B. 
Case 2    *n nR t R t  
Case 2 is similar to Case 1, except that we need to decrease 
 ,n kR t  for , 1 2n k P P Af U U U   .  For this case, we repeatedly 
check the inequality shown in (13) until it becomes false. If it is true, 
flow *,n kf  is moved from AU  to 2PU , from 2PU  to 1PU , or from 
1PU  to ZU . 
     
, 1 2 ,
, , ,;
n k P P n k A
n k n k n k n
f U U f U
h p P t Q t R t
 
    , (13) 
where 
     
, 1 , 2 ,
max knee min
, , ,
, , ,
min min , min , min
n k P n k P n k A
n k n k n k
f U f U f U
n k n k n k
P t P t P t
p
P P P  
 
   
 
,  (14) 
and 
     
, 1 , 2 ,
, 1 2
max knee min
, , ,*
, , ,
arg min min , min , min .
n k P n k P n k A
n k P P A
n k n k n k
f U f U f Uf U U U n k n k n k
P t P t P t
k
P P P  
 
   
 
(15) 
After the inequality shown in (13) becomes false, the solution can be 
obtained as follows. Set  , 0n kR t   if ,n k Zf U  or  ,n kQ t  if 
,n k Af U . For , 1 2n k P Pf U U  ,  ,n kR t  can be obtained by 
    F, , , ;n k n k n n kR t h P t P t  . The pseudo code of the above reali-
zation of the PL scheduler is provided below. 
 
Note that, for Case 1, the maximum number of iterations needed for 
the PL scheduler is 3 nK , which happens when each flow is moved 
from 
ZU  to 1PU , from 1PU  to 2PU , and then from 2PU  to AU . In 
each iteration, the computational complexity is ( )nO K . Therefore, 
the total computational complexity is 2( )nO K . Obviously, the 
complexity for Case 2 is the same. 
 
         
              
min knee
, , , , ,
,
1 1 knee max
, , , , , , ,
1
1 1 1   if 
;
1 1 1  if 
n k n k n k n k n k
n k
n k n k n k n k n k n k n k
L t S t L t P t x P t
xh x t
L t Q t x S t L t Q t P t x P t

       
 
          
. (9) 
 
  
in the second scenario. As one can see, our proposed:Matrix scheme 
outperforms M-LWDF and the scheme of [13] with 0   or 1. The 
improvement increases as the loss probability requirement increases. 
The reason is simply because our proposed:Matrix scheme takes 
loss probability requirements into consideration in calculating the 
minimum requested bandwidth of every real-time flow. As shown in 
Table III, both M-LWDF and the scheme of [13] (with 0   or 1) 
do not take full advantage of the tolerance of data loss feature of 
real-time flows. By controlling the actual loss probabilities close to 
requirements, our proposed scheme improves system throughput. 
To study the effect of pre-processor, we conduct simulations for 
our proposed:Matrix scheme with and without pre-processor. The 
results are shown in TABLE IV. For comparison, we also include 
simulation results of the M-LWDF scheme. In this table, the loss 
probability requirement of Type II real-time flows is chosen to be 
10%. As one can see, the number of Type II flows which meet their 
QoS requirements with pre-processor is much larger than that 
without pre-processor when | |RT  is large. The reason is that, 
under the PL scheduler, the denominator of the running loss prob-
ability, i.e,    , .n k n kS t L t , is often smaller for a real-time flow 
with a smaller data arrival rate. As a result, a flow with a smaller data 
arrival rate tends to have a smaller minimum requested bandwidth 
and is more likely to be selected by the pre-processor. In our simu-
lations, a flow of Type II has a smaller data arrival rate than a flow of 
Type I. When compared with M-LWDF, the proposed:Matrix 
scheme with pre-processor yields more flows which meet their QoS 
requirements. One interesting observation is that M-LWDF favors 
Type I flows. This is because Type I flows require more stringent 
delay bounds than Type II flows, which implies Type I flows are 
assigned higher priority than Type II flows when loss probability 
requirements are identical. We also conducted simulations for a 
scenario where all SSs are attached with two Type II flows. The loss 
probability requirement is 10% for one flow and 20% for the other. 
Results show that the pre-processor favors flows with 20% loss 
probability requirement.  This is intuitively true because, under the 
same data arrival distribution, a flow with a larger loss probability 
requirement tends to have a smaller minimum requested bandwidth 
than one which has a smaller loss probability requirement. Owing to 
space limitation, we do not show these results. 
VI. CONCLUSIONS 
In this project, we have presented an efficient resource allocation 
scheme which tries to maximize system throughput while providing 
QoS support to real-time traffic flows. The basic idea of our pro-
posed scheme is to calculate a dynamic minimum requested band-
width for each traffic flow and use it as a constraint in an optimiza-
tion problem which maximizes system throughput. The minimum 
requested bandwidth is a function of the pre-defined loss probability 
and the running loss probability. In addition, a user-level PL 
scheduler is proposed to determine the bandwidth share for multiple 
real-time flows attached to the same SS. A pre-processor is adopted 
to maximize the number of real-time flows attached to each SS 
which meet their QoS requirements, when the resource is not suffi-
cient to provide every flow its minimum requested bandwidth. 
Computer simulations were conducted to evaluate the performance 
of our proposed scheme. Results show that the running loss proba-
bilities of traffic flows attached to the same SS are effectively con-
trolled to be proportional to their loss probability requirements. 
Besides, compared with previous designs, our proposed scheme 
achieves higher throughput while providing QoS support. Although 
we present our designs for long time average of loss probabilities, 
the idea can be applied to other measurements such as exponentially 
weighted moving average. How to design a pre-processor which 
meets user’s need is an interesting topic which can be further studied. 
Evaluation of the impact to user perception of satisfaction for var-
ious performance measurements is another potential further research 
topic. 
APPENDIX A   PROOFS OF LEMMAS AND THEOREMS 
Proof of Lemma 1: Lemma 1 is obviously true for 
   min max, , ,n k n k n kP t P P t   because, in this case, we have 
 *, , 0n k n kP t P  .  For  
max
, ,n k n kP P t , it holds that 
 
   
     
      
        
1
, ,*
, , , 1
, , ,
1
, , ,
, 1
, , , ,
1
1 1
1
1 1 max ,
n k n k
n k n k n k
n k n k n k
n k n k n k
n k
n k n k n k n k
L t Q t
P t P P
S t L t Q t
L t Q t R t
P
S t L t R t Q t

 
  
   
  
 
   
 
since  , 0n kR t  .  Therefore, Lemma 1 is true for  
max
, ,n k n kP P t .  
For  min, ,n k n kP P t , we have 
 
 
     
      
        
,*
, , ,
, , ,
1
, , ,
,1
, , , ,
1
1 1
1
1 1 max ,
n k
n k n k n k
n k n k n k
n k n k n k
n k
n k n k n k n k
L t
P t P P
S t L t Q t
L t Q t R t
P
S t L t R t Q t


  
   
  
 
   
 
since    , ,n k n kR t Q t .  This completes the proof of Lemma 1. 
Proof of Lemma 2: Let  ,n kR t  and  ,n kP t  be, respectively, the 
bandwidth allocated to and the resulting running loss probability of 
,n kf  under our proposed PL scheduler.  Further, let  ,n kR t  and 
 ,n kP t  be the same variables under some other scheduler. Assume 
that  , ,
1
arg max
n
n k n k
k K
P t P
 
 .  We shall prove 
   , , , ,
1
max
n
n n n k n k
k K
P t P P t P 
 
 . 
Let 
ZU , PU , and AU  be the three sets such that flow ,n kf  is 
contained in 
ZU , PU , or AU  iff  , 0n kR t  ,  ,0 n kR t    ,n kQ t , 
or    , ,n k n kR t Q t , under the proposed PL scheduler.  Assume that 
AU  . Since   0nR t  , it must hold that PU . If 
   , , , ,n n n nP t P P t P    , meaning that    , ,n nR t R t  , there 
must exist 
,n k Pf U  such that    , ,n k n kR t R t . Otherwise, equa-
tion (8) is violated. Since    , , , ,n k n k n k n kP t P P t P     , ,n nP t P  , 
Lemma 2 is true for this case.  Consider the case 
AU   . The 
proposed PL scheduler allocates    , ,n i n iR t Q t  to all ,n i Af U , 
which implies 
,nf   is in AU  or can be selected from AU , according 
to equation (7).   Consequently, Lemma 2 is true because 
   , ,n nR t R t  , which implies  , ,n nP t P     , ,n nP t P  . 
Proof of Theorem 3: Assume that there exists a scheduler which can 
guarantee the loss probability requirements of all the Kn traffic flows. 
In other words, it holds that  , , 1n k n kP t P  , 1 nk K  , where 
  
10 20 30 40 50 60 70
0
2
4
6
8
10
12
14
16
Number of SSs attached with Type I traffic flows 
L
o
s
s
 
p
r
o
b
a
b
i
l
i
t
y
 
(
%
)
 
 
proposed:ILP
porposed:Matrix
 
Fig. 6 Loss probability comparison between proposed:ILP and pro-
posed:Matrix schemes. 
5 10 15 20 25
9
10
11
12
13
14
15
16
Loss probability requirements (%) 
T
h
r
o
u
g
h
p
u
t
 
(
M
b
p
s
)
 
 
Scheme of [13] with  = 0
Scheme of [13] with  = 1
proposed:Matrix
M-LWDF
 
Fig. 7 Throughputs of various schemes in the second scenario. 
TABLE II.  Parameters of simulation environment, traffic character-
istics, QoS requirements and adopted modulation and coding scheme. 
Simulation environment 
Radius of cell 2km 
User distribution Uniform 
Bandwidth 10 MHz 
Channel model Rayleigh fading channel 
Doppler frequency 4.6 Hz (speed: 2Km/hr) 
Pass loss exponent 4 
Frame duration 5ms 
Time slot duration 0.1ms 
Number of sub-channels 16 
Number of sub-carriers per sub-channel 64 
Traffic characteristics and QoS requirements 
Traffic Type Type I Type II [21] 
Content Voice 
video streaming (Star 
War II) 
Codec format G.711 MPEG 4 
Mean inter-arrival time 20ms 40ms 
Mean packet size 200 bytes 267bytes 
Delay bound 80ms 160ms 
Loss probability requirement 10(%) 5, 10, 15, 20, 25(%) 
The adopted modulation and coding scheme[12]. 
Mode Modulation Coding rate Receiver SNR (dB) 
1 QPSK 1/2 5 
2 QPSK 3/4 8 
3 16QAM 1/2 10.5 
4 16QAM 3/4 14 
5 64QAM 1/2 16 
6 64QAM 2/3 18 
7 64QAM 3/4 20 
 
TABLE II. Loss probabilities for users attached with one Type I and one Type II real-time flows. 
Loss probability 
requirement 
M-LWDF Scheme of [13] with 
β=0 
Scheme of [13] with 
β=1 
proposed: Matrix 
 PL,I PL,II PL,I PL,II PL,I PL,II PL,I PL,II 
5% 0.0025 0.0013 0.0182 0.0091 0.0671 0.0336 0.1000 0.0502 
10% 0 0.0035 0.0122 0.0122 0.0448 0.0448 0.1000 0.1000 
15% 0 0.0036 0.0094 0.0141 0.0342 0.0513 0.1002 0.1505 
20% 0 0.0037 0.0079 0.0158 0.0280 0.0561 0.1000 0.2000 
25% 0 0.0039 0.0066 0.0165 0.0238 0.0594 0.1001 0.2503 
 
TABLE III.  Number of Type I and Type II flows which meet their QoS requirements in the second. 
Number 
of SSs 
proposed: Matrix proposed: Matrix without 
pre-processor 
M-LWDF 
Type I Type II Type I Type II Type I Type II 
10 10 10 10 10 10 10 
20 20 20 20 20 19 13 
30 12 30 12 12 28 14 
40 16 40 16 16 30 16 
50 20 50 20 20 32 20 
 

probability 58 256 . Therefore, the expected value for the 
number of required comparisons is 1 + 2*( 58 256 ) = 1.45. 
Note that, according to TABLE I, all ASCII encoded 
digits have the same prefix 0011. As a consequence, fast 
bitwise operations can be used to check if character c is a 
digit. We describe the basic idea and its extension to detect 
multiple consecutive digits in the following Subsections A 
and B, respectively. 
A. Single Digit Detection 
Define 
1q ( ) = ( 0x30)&0xf0,c c
 
where   and &  denote the bitwise XOR and bitwise AND 
operations, respectively. It is clear that q1(c) = 0 if and only 
if (iff) the prefix of c is 0011. Note that, according to 
TABLE I, q1(c) = 0 does not guarantee c is a digit. However, 
c is definitely not a digit if q1(c) ≠ 0. Using q1, we can 
exclude 240 non-digit characters from 256 characters 
quickly. Therefore, we suggest using q1 as the first step to 
filter out most non-digit characters and make additional 
checking only when q1 reports 0. Assume that q1(c) = 0. In 
this case, c is one of the characters listed in TABLE I and, 
therefore, additional checking is needed to verify whether or 
not c is a digit. Note that if the fifth bit of c is a 0, then c is 0, 
1, …, or 7. Therefore, if  
 2q ( ) = &0x08c c  
reports 0, then c is undoubtedly a digit and the checking 
procedure for c stops. In case q2(c) ≠ 0, further checking is 
needed to see if c is 8 or 9. We use 
 3q ( ) = &0x06c c  
to do this because when q2(c) ≠ 0, c is 8 or 9 iff both the 
sixth and seventh bits of c are 0's. If q3(c) = 0, then c is 8 or 
9, a digit. Obviously, q1 is always required, and q2 and q3 
are performed only when necessary. For a uniformly 
randomly selected byte c, the probability for the situation 
that q2 is required but q3 is not is 8 256 . Similarly, the 
probability for the situation that both q2 and q3 are required 
is 8256 . Therefore, the expected value for the number of 
required operations is 1 + 2*( 8256 ) + 3*( 8 256 ) = 1.16. In 
comparison with the straightforward method, which 
requires 1.45 times of comparisons to process a byte, using 
TABLE I.  ALL ASCII ENCODED CHARACTERS WITH PFEFIX 0011. 
Binary Character Binary Character 
0011 0000 0 0011 1000 8 
0011 0001 1 0011 1001 9 
0011 0010 2 0011 1010 : 
0011 0011 3 0011 1011 ; 
0011 0100 4 0011 1100 < 
0011 0101 5 0011 1101 = 
0011 0110 6 0011 1110 > 
0011 0111 7 0011 1111 ? 
q1, q2 and q3 might be a preferable alternative. This will be 
demonstrated with experimental results in Section V. 
Fortunately, on a (8n)-bit operating system, n bytes can 
be processed in parallel. We make use of this feature and 
provide an enhanced solution to detect multiple consecutive 
digits in parallel in the next subsection. 
B. Consecutive Digit Detection 
On a (8n)-bit operating system, we check the prefix of 
each byte in an n-byte string S simultaneously. To do this, 
equation (1) is replaced by  
 1Q ( ) = [ 0x(30) ]&0x(f0) ,n nS S  
where nX  denotes X repeats for n times. For example, on a 
32-bit operating system, n = 4 and Q1(S) = 
( 0x30303030)&0xf0f0f0f0S  . 
Q1(S) = 0 implies that all bytes in S have prefix 0011. In 
this case, q2 and q3 are used to determine if they are indeed 
digits. If Q1(S) ≠ 0, then at least one character in S is non-
digit. That is, S cannot be n consecutive digits. 
III. THE ID NUMBER SEARCHING ALGORITHM  
A. The ID Number Rule 
A valid ID number c0c1c2c3c4c5c6c7c8c9 issued by Taiwan 
government should satisfy all of the following features [7]. 
Feature 1: ci  is 0, 1, 2, …, or 9 for 1 ≤ i ≤ 9.  
Feature 2: c1 , which denotes the ID number owner's gender, 
is either 1 (male) or 2 (female).  
Feature 3: c0 is a case-insensitive English letter, which 
stands for the ID number owner's local birth registry.  
Feature 4: It holds that 
1 2 1 2 3 4 5
6 7 8 9
( 9 8 7 6 5 4
3 2 1 1) mod 10 = 0,
e e c c c c c
c c c c
           
        
where e1 and e2 are values mapped from the English letter c0 
[8]. TABLE II shows the mapping rule. For example, the 
sequence A123456789 can be a valid ID number. 
B. The Algorithm 
  The algorithm aims at searching for ID numbers in an 
ASCII encoded plain text. It consists of a pre-filter and a 
verification module. Before adopting the number detection 
scheme presented in Section II, the pre-filter is in charge of 
checking whether a 10-character sequence satisfies Features 
TABLE II.  2-DIGIT NUMBER MAPPING FROM THE ENGLISH LETTER 
IN AN ID NUMBER 
c0 
A
/
a    
B
/
b
C
/ 
c 
D
/
d
E
/ 
e
F
/ 
f 
G
/
g 
H
/
h 
I 
/ 
i   
J
/ 
j 
K
/
k
L
/ 
l 
M
/
m
e1 1 1 1 1 1 1 1 1 3 1 1 2 2
e2 0 1 2 3 4 5 6 7 4 8 9 0 1
 
c0
N
/ 
n    
O
/
o
P
/ 
p
Q
/
q
R
/ 
r
S
/ 
s 
T
/ 
t 
U
/
u 
V 
/ 
v   
W 
/ 
w 
X
/
x
Y
/ 
y
Z
/ 
z 
e1 2 3 2 2 2 2 2 2 2 3 3 3 3
e2 2 5 3 4 5 6 7 8 9 2 0 1 3
26:  end 
27:  else // the window content does not satisfy Feature 1  
28:  begin 
29:  if w[x + 1] = ‘1’׽‘2’ then 
30:  begin 
31:   if w[x] = ‘A’׽‘Z’ or w[x] = ‘a’~‘z’ then 
32:  i ← i + x; k ← 9; kmin ← 10 − x; 
33:   else  
34:  i ← i + 10; k ← 9; kmin ← 1; 
35:  end 
36:  else  
37:  i ← i + 10; k ← 9; kmin ← 1; 
38:     end  
39:      end 
40: end 
IV. ENHANCEMENT OF THE ID NUMBER SEARCHING 
ALGORITHM 
The scheme proposed in Section II can detect 
consecutive digits efficiently. As an example, we apply it to 
ID number detection by integrating it into the proposed ID 
number searching algorithm. Both sequential and parallel 
detection strategies are integrated below.  
A. Enhancement with Sequential Digit Detection 
As mentioned in Section II, q1 can exclude most non-
digit characters quickly. Therefore, we use it in the pre-filter 
to speed up the searching process. In other words, we 
replace lines 8~11 in Algorithm 1 with  
          if (w[k]^0x30)&0xf0 = 0 then k ← k − 1; 
          else begin x ← k; break; end 
Note that q2 (and q3) will be needed to verify whether 
w[k] is indeed a digit if (w[k]^0x30)&0xf0 = 0. We left this 
as part of the job of the verification module. To avoid 
unnecessary verification, we suggest invoke the verification 
module after Features 2 and 3 are known to be satisfied. 
That is, we replace the procedure IDverify(window) in 
Algorithm 1 with the verification module described below. 
Since Feature 2 is satisfied, w[1] is known to be a digit. 
Algorithm 2 The verification module 
1: begin 
2: j ← 2 
3: while j ≤ 9 do 
4:      begin 
5:          if (w[j]&0x08) = 0 then // w[j] = ‘0’׽ ‘7’ 
6:                 begin 
7:                       if j = 9 then call IDverify(window); 
8:                   j ← j + 1; 
9:                 end 
10:           else // w[j]≠‘0’׽ ‘7’ 
11:               begin 
12:                    if (w[j]&0x06) = 0 then // w[j] = ‘8’ ׽ ‘9’ 
13:                         begin 
14:                              if j = 9 then call IDverify(window); 
15:                              j ← j + 1; 
16:                         end 
17:                    else // w[j]≠‘8’ ׽ ‘9’ 
18:                        break; 
19:               end 
20:      end 
21:end 
For a uniformly distributed random text, the probability 
to invoke the verification module is         916 522256 16 256   
133.7 10 . 
B. Enhancement with Parallel Digit Detection 
As mentioned in Section II, we can use Q1 to check the 
prefix of each byte in an n-byte string S simultaneously on a 
(8n)-bit operating system. Consider the case of n = 4. The 
major difference from Algorithm 1 is that lines 8~11 are 
replaced by 
 S ← w[k-3]w[k-2]w[k-1]w[k]; 
 if Q1(S) = 0 then k ← k − 4; 
 else 
     begin 
         while q1(w[k]) = 0 do k ← k – 1; 
        x ← k; break; // x is the shift value 
     end 
The operation of checking whether Q1(S) = 0 or not is 
equivalent to those of checking whether q1(w[k]) = 0, 
q1(w[k-1]) = 0, q1(w[k-2]) = 0, and q1(w[k-3]) = 0 or not. 
Obviously, using Q1 requires less execution time than using 
q1 four times. Note that if not all of w[k], w[k-1], w[k-2], and 
w[k-3] have prefix 0011, then Q1(S) ≠ 0 and q1 is needed to 
determine the shift value. In this case, the operation of 
checking whether Q1(S) = 0 or not is redundant and, 
therefore, takes more time than not checking it. By contrast, 
Q1 reduces execution time largely if all of w[k], w[k-1], w[k-
2], and w[k-3] have prefix 0011. This will be discussed in 
the experimental results shown in the next  section. 
V.  PERFORMANCE ANALYSIS 
In this section, we compare the throughput performance 
of the proposed ID number searching algorithm, its 
enhanced versions (with the proposed digit detection 
schemes integrated), and the brute-force searching algorithm, 
which examines the file character by character without using 
a pre-filter. Enhanced Versions 1 and 2 denote the 
algorithms presented in Subsections IV-A and IV-B, 
respectively. All algorithms are implemented in C++ and the 
experiments are conducted on a PC with 32-bit operating 
system and an Intel Pentium 4 CPU operated at 3.00GHz 
with 2.50GB of RAM.  
In the first experiment, we evaluate the processing time 
of each algorithm for different size of files. The file sizes 
range from 0 to 100MB. Each file has 45% of English letters, 
50% of digits, and 5% of other characters. The experimental 
results are shown in Fig. 2. As expected, the processing time 
increases as the file size increases. The processing time for 
the brute-force searching algorithm is more than 3.7 times of 
that for the proposed algorithms. In other words, the 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/10/08
國科會補助計畫
計畫名稱: OFDMA資源分配演算法之設計
計畫主持人: 李程輝
計畫編號: 100-2221-E-009-112- 學門領域: 網路
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
