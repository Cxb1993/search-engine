行政院國家科學委員會專題研究計畫成果報告 
漸進式網路資料探勘系統之研發與實作 
Design and Implementation of a Progressive Web Mining System 
計畫編號：NSC 96-2628-E-002-038-MY3 
執行期間：96 年 8 月 1 日至 99 年 7 月 31 日 
主持人：陳銘憲教授 國立臺灣大學電機工程學系暨研究所 
摘要 
近年來，隨著網際網路的蓬勃發展，資訊流通頻繁，使得累積的資料量大幅增加，資料探
勘技術的需求漸而顯著。然而先前的研究主要都著重於靜態資料庫(static database)或是持續
增加資料庫(incremental database)的序列型樣(sequential pattern)探勘，並沒有探討如何處理
老舊過時的資訊。因此在產生序列型樣時，新進的型樣可能因為老舊過時的資料存在的影
響而不會被視為頻繁的序列型樣，或者是那些過時老舊的序列型樣仍被當成頻繁的序列型
樣而產生。實際上對使用者來說，他們感興趣的是即時的資訊而不是老舊的資訊。當資料
庫中的資料是可以被新增的、被刪除的，即所謂的漸進式(progressive)的資料庫，為了取得
資料動態的特性，我們提出序列型樣探勘技術的一個通用模型。在執行本計畫中，針對探
漸進式資料庫的序列型樣，我們提出一個演算法，稱為 Pisa(Progressive mIning of Sequential 
pAtterns)，是以漸進式的方式挖掘一段 POI(Period of Interest)時間內的序列型樣。Pisa 利用
一棵漸進的序列樹有效地維護最新的資料序列，挖掘最近的序列型樣，並且刪除過時的資
料和型樣。我們提出的 Pisa 演算法所須的記憶體空間比目前學界提出的最新做法 Direct 
Appending(DirApp)少很多。在演算法複雜度的分析結果也顯示 Pisa 明顯比先前的方法快上
幾倍。此外，當系統處理大量的資料時，在單一處理器的情況下，會面臨執行效率的問題。
因此我們也設計一個演算法，稱為 DPSP(Distributed Progressive Sequential Pattern mining)，
是在 Hadoop 平台上執行雲端運算。我們在 DPSP 中提出 Map/Reduce 工作，對每一個 POI
刪除過時的資訊，更新候選序列型樣，且回報最新的頻繁序列型樣。我們的實驗結果顯示
DPSP 有好的擴充性，並且可以增進探勘演算法的執行效率及可行性。 
 
關鍵詞：資料探勘、漸進式資料、序列型樣、雲端運算 
英文摘要(Abstract) 
Although there have been many recent studies on the mining of sequential patterns in a static 
database and in a incremental database, these works, in general, do not fully explore the effect of 
deleting old data from the sequences in the database. When sequential patterns are generated, the 
newly arriving patterns may not be identified as frequent sequential patterns due to the existence 
of old data and sequences. Moreover, the obsolete sequential patterns that are not frequent 
  漸進式資料庫的序列型樣探勘已被廣泛地使用在很多領域中。例如，動態超媒體教育系
統的線上連結建議，是基於使用者的最近的序列質問的探勘結果[34]。另外，無線閘道
（wireless gateway）對移動使用者的預取資料（prefetching data）進行預測也是基本的應用 
[6][35][36]，每當一個移動的使用者從一個無線閘道質問（query）一個項目時，預取系統
預測移動的使用者可能想要哪個其他項目，透過一個準確的預測機制，預取系統能大大改
善質問的延遲（laterncy）。在[25] [26]中，Pandey 等人已經證明在預取的準確度方面， 動
態即時從網頁 log 資料所挖掘的規則比起靜態的資料表現更準確。 
  此外，在資料的快速流通，所累積的資訊量是相當可觀的。先前的研究只考慮在單一處
理器的情況下如何執行序列型樣探勘，在面對如此龐大的資料量時，傳統的演算法會遇到
擴充性的困難、執行效率的瓶頸。因此如何結合雲端計算與探勘演算法，設計分散式的序
列型樣探勘方法以增進執行效能及擴充性，也是另一個極為重要的課題。 
貳、 研究目的 
  面對越來越多的漸進式資料庫的應用，過去的研究方法並沒有探討將資料庫裡老舊過時
資料刪除所造成的影響。當產生序列型樣時，新進的型樣可能因為老舊資料存在的影響而
不被視為頻繁的序列型樣，更糟的是那些在近期內已經不頻繁的、過時的序列型樣仍舊被
當成頻繁的序列型樣而產生。實際上，與舊的相比較，使用者對新進的資料通常更感興趣。
另一方面，過去在靜態資料庫以及不斷累積的資料庫上的研究方法，無法直接應用在漸進
式資料庫上，因為依照過去的方法，刪除過時的資料將會導致所有候選樣式的重整，而這
種重整過程是曠日耗時的工作。因此，在本計畫中，我們發展一個新型態的資料處理技術
來儲存並處理漸進式資料庫，尤其是針對序列資料進行循序性樣式分析，以及有效率地及
時不斷地更新資料庫與循序樣式，並且有效地從漸進式資料庫中挖掘出有意義的序列型
樣。更進一步地，我們也針對雲端運算環境設計了一個分散式的漸進式序列型樣探勘的演
算法。在與雲端運算結合下，期望能提升漸進式序列型樣探勘演算法的執行效率及可行性。 
參、 文獻探討 
  先前的研究已經廣泛地討論各種方法於靜止資料庫中找到頻繁的序列型樣。AprioriAll[3]
以及 GSP[[31]基於傳統的關連式法則（association rule）的 Apriori 探勘技術[2]，是漸進式
序列型樣探勘算法的先驅。Han 等人以及 Pei 等人提出 FreeSpan[14] 以及 PrefixSpan[28] ， 
其透過對整個資料庫進行 projection 來發現序列型樣。Zaki 提出 SPADE[37]，基於子序列關
係，有系統地搜尋序列 lattice。Aseervatham 等人則提出 bitSPADE[4]，其使用 lattice-based 
bitmap 的資料表示法於序列型樣探勘。Ayres 等人也提出的 SPAM 技術[5]，其以 depth-first 
的方式搜尋一棵 lexicographic 序列樹。另外，其他序列型樣相關的研究，例如： 增加一些
限制條件的序列型樣探勘[12][15][24][29] 、關閉型序列型樣探勘[11][[32]][34]、最大的序
列型樣探勘[22]、時空相關（spatiotemporal）的序列型樣探勘[7]、特殊領域中的序列型樣
探勘[13][33]、資料串流的序列型樣探勘[16][20][21]、頻繁的 episode 探勘[17][19]，以及
path traversal 型樣探勘[9]。 
  真實世界中的資料通常是快速改變，在靜止資料庫的假設在很多實際的應用中並不合
理。因此當我們處理漸進式資料庫時，一旦有新進的資料即重新探勘序列型樣是不可行的。
因為重新探勘的成本是非常昂貴的。為處理漸進式資料庫，Masseglia 等人設計 ISE 演算
法[22]。Parthasarathy 等人提出 ISM 演算法[27]，其使用一種 lattice 框架，持續增加每個
 圖一 Pisa 演算法 
 
圖二 traverse 程序 
  為驗證 Pisa 的效能，我們執行了一系列的實驗，比較 Pisa 與先前的研究方法，包含 GSP+、
SPAM+、DirApp，所須要的執行時間。同時，我們也探討輸入參數如 minimum support、
POI 長度對執行效能的影響，與可擴充性和記憶體需求的議題。 
  執行時間 我們比較 Pisa 與 GSP+、SPAM+、DirApp 的執行效率。從圖三中可以發現隨
著時間軸的增加，Pisa 比其他方法有更好的執行效率，且執行時間的成長曲線相對地十分
平緩。fastPisa 是加速版的 Pisa，加速的方法是減少存在 PS-tree 中的新項目組和。如圖三(b)
所示，fastPisa 可更進一步降低執行時間。 
  Minimum Support 的影響 圖四顯示發現隨著 minimum support 增加，GSP+與 SPAM+的
執行時間下降。因為 minimum support 越大，所產生的頻繁序列型樣越少，執行時間和記憶
體需求也跟著變小。Pisa 和 DirApp 的執行時間對 minimum support 的改變是不受影響的，
因為 Pisa 和 DirApp 產生的候選序列數量與 minimum support 無關。 
  POI 長度的影響 由圖五我們可以看見所有的方法所須的執行時間都會隨著 POI 的長度
增加，而 Pisa 和 DirApp 的增加幅度比較舒緩。 
  可擴充性 我們也探討序列數量對執行時間與記憶體用量的影響。圖六顯示當序列數量增
加時，因為需要掃描的序列變多，因此所有方法的執行時間都跟著增加。與其他方法相比，
Pisa 表現最佳，因為 Pisa 的執行時間增加幅度是相當平緩。此外，在記憶體需求方面，Pisa
 
圖九候選計算工作及支持收集工作的虛擬碼 
我們執行了一系列的實驗來驗證 DPSP 的效能。圖十與圖十一中的 X/Y 軸是以 log 尺度來
表示。由圖十我們可以看到當資料串的個數小於 500k，全部執行時間並沒有變化很多。只
要原因是 Hadoop 方案的負擔如磁碟 I/O、通信成本佔據了大部分的執行時間。當資料串超
過 500k 時，全部執行時間呈現線性成長。我們在圖十一顯示了詳細的線性成長的執行時
間。接著我們也探討 POI 長度對執行時間的影響。由圖十二可發現全部執行時間快速增加。
因為隨著 POI 長度的增加，所產生的候選序列型樣數量是指數成長。最後我們證明所提出
的 DPSP 演算法具有分散式的優點。如圖十三所示，當結點的數量從 1 增加到 8 時，全部
執行時間隨著減少。因此我們所提出的 DPSP 演算法具有分散式的價值。 
CCMapper
input: itemsets of all sequences arriving at the current 
timestamp OR candidate set summaries at the previous 
timestamp
map:
1. var data = read input data;
2. if(data contains timestamp){ // it is a candidate
3.   output <data.sequenceNo, data.itemset+ data.time>;
4. }else{  // it is an arriving itemset
5.   output <data.sequenceNo, data.itemset>;
6. }end if
End
  
SAMapper
input: candidate seuqential patterns of all sequences
configure:
1.  var localMap<itemset, support>;
     // used to locally aggregate supports.
map:
2.  var data = read input data;
3.  if(data.itemset is in localMap){
4.     localMap(itemset).support++;
5.  }else{
6.     insert <itemset, 1> into localMap;
7.  }end if
close:
8.  for(each <itemset, support> pair in localMap){
9.    output <itemset, support>;
10.}end for
End
  
SAReducer 
reduce(in_key, in_values):
1.  var count = 0;
2.  for(each value in in_values){
3.    count += value;
4.  }end for
5.  if(count >= minimum support){
6.    output<in_key, count>;
7.  }end if
output: frequent sequential patterns with their supports
End
  
CCReducer
configure:
1.  var start_time = current timestamp – POI;
2.  var mo.output<sequenceNo, itemset + timestamp>; 
     // multiple output to output summary
reduce(in_key, in_values):
3.  var input;  // used to store input data
4.  var cand_set; // used to store candidate set summary
at the previous timestamp
5.  var result<itemset>; // used to store distinct results
6.  for(each value in in_values){
7.    if(value is a summary){
8.      cand_set.put(value.time, value.itemset);
9.      if(value.time > start_time){
10.      mo.output<in_key, candidate + candidate.time>
11.    }end if
12.    if(value.itemset.size > 1){
13.      result.put(value.itemset);
14.    }end if
15.  }else{ // it is input data
16.    input = get the only one data at current timestamp
17.  }end if
18.}end for
19.for(each combination of items in input.itemset){
20.  for(each candidate in cand_set){
21.    var new_cand = append combination to candidate
22.    result.put(new_cand);
23.    if(candidate.time > start_time){
  
24.      mo.output<in_key, new_cand + candidate.time>;
25.    }end if
26.  }end for
27.  mo.output<in_key, combination + current time>;
28.}end for
29.for(each itemset in result){
30.  output<itemset, null>;
31.}end for
output: sequence number and candidate sequential 
itemsets with timestamps
End
CandidatesComputingJob: 
SupportsAssemblingJob: 
Using Bitmap Representation,” Proc. Sixth Int’l Conf. Data Mining (ICDM), 2006. 
[5] J. Ayres, J. Gehrke, T. Yiu, and J. Flannick, “Sequential Pattern Mining Using a Bitmap Representation,” Proc. 
Eighth ACM SIGKDD Int’l Conf. Knowledge Discovery and Data Mining (KDD ’02), pp. 429-435, July 2002. 
[6] A. Balachandran, G.M. Voelker, P. Bahl, and P.V. Rangan, “Characterizing User Behavior and 
NetworkPerformance in a Public Wireless LAN,” Proc. ACM SIGMETRICS Int’l Conf. Measurement and Modeling 
of Computer Systems (SIGMETRICS ’02), June 2002. 
[7] H. Cao, N. Mamoulis, and D.W. Cheung, “Mining Frequent Spatio-Temporal Sequential Patterns,” Proc. Fifth 
Int’l Conf. Data Mining (ICDM ’05), pp. 82-89, Nov. 2005. 
[8] G. Chen, X. Wu, and X. Zhu, “Sequential Pattern Mining in Multiple Streams,” Proc. Fifth Int’l Conf. Data 
Mining (ICDM ’05), pp. 585-588, Nov. 2005. 
[9] M.-S. Chen, J.-S. Park, and P.S. Yu, “Efficient Data Mining for Path Traversal Patterns,” IEEE Trans. 
Knowledge and Data Eng., vol. 10, no. 2, pp. 209-221, Mar./Apr. 1998. 
[10] H. Cheng, X. Yan, and J. Han, “INCSPAN: Incremental Mining of Sequential Patterns in Large Database,” Proc. 
10th ACM SIGKDD Int’l Conf. Knowledge Discovery and Data Mining (KDD ’04), pp. 527- 532, 2004. 
[11] S. Cong, J. Han, and D. Padua, “Parallel Mining of Closed Sequential Patterns,” Proc. 11th ACM SIGKDD Int’l 
Conf. Knowledge Discovery and Data Mining (KDD ’05), pp. 562-567, Aug. 2005. 
[12] M.N. Garofalakis, R. Rastogi, and K. Shim, “Spirit: Sequential Pattern Mining with Regular Expression 
Constraints,” Proc. 25th Int’l Conf. Very Large Data Bases (VLDB ’99), pp. 223-234, 1999. 
[13] J.-K. Guo, B.-J. Ruan, and Y.-Y. Zhu, “A Top-Down Algorithm for Web Log Sequential Pattern Mining,” Proc. 
Ninth Pacific-Asia Conf. Knowledge Discovery and Data Mining (PAKDD), 2005. 
[14] J. Han, J. Pei, B. Mortazavi-Asl, Q. Chen, U. Dayal, and M.C. Hsu, “Freespan: Frequent Pattern-Projected 
Sequential Pattern Mining,” Proc. Sixth ACM SIGKDD Int’l Conf. Knowledge Discovery and Data Mining 
(KDD ’00), pp. 355-359, 2000. 
[15] Y. Hirate and H. Yamana, “Sequential Pattern Mining with Time Interval,” Proc. 10th Pacific-Asia Conf. 
Knowledge Discovery and Data Mining (PAKDD ’06), pp. 775-779, 2006. 
[16] C.-C. Ho, H.-F. Li, F.-F. Kuo, and S.-Y. Lee, “Incremental Mining of Sequential Patterns over a Stream Sliding 
Window,” Proc. IEEE Int’l Workshop Mining Evolving and Streaming Data (IWMESD ’06), Dec. 2006. 
[17] C.-R. Lin, C.-H. Yun, and M.-S. Chen, “Utilizing Slice Scan and Selective Hash for Episode Mining,” Proc. 
Seventh ACM SIGKDD Int’l Conf. Knowledge Discovery and Data Mining (KDD ’01), Aug. 2001. 
[18] M.-Y. Lin and S.-Y. Lee, “Incremental Update on Sequential Patterns in Large Databases by Implicit Merging 
and Efficient Counting,” Information System, vol. 29, no. 5, pp. 385-404, July 2004. 
[19] H. Mannila, H. Toivonen, and A.I. Verkamo, “Discovery of Frequent Episodes in Event Sequences,” Data 
Mining and Knowledge Discovery, vol. 1, no. 3, pp. 259-289, 1997. 
[20] A. Marascu and F. Masseglia, “Mining Sequential Patterns from Temporal Streaming Data,” Proc. First 
ECML/PKDD Workshop Mining Spatio-Temporal Data (MSTD ’05), Oct. 2005. 
[21] A. Marascu and F. Masseglia, “Mining Sequential Patterns from Data Streams: A Centroid Approach,” J. 
Intelligent Information Systems, vol. 27, no. 3, pp. 291-307, Nov. 2006. 
[22] F. Masseglia, P. Poncelet, and M. Teisseire, “Incremental Mining of Sequential Patterns in Large Databases,” 
Data and Knowledge Eng., vol. 46, pp. 97-121, July 2003. 
[23] S. Nguyen, X. Sun, and M. Orlowska, “Improvements of INCSPAN: Incremental Mining of Sequential Patterns 
in Large Database,” Proc. Ninth Pacific-Asia Conf. Knowledge Discovery and Data Mining (PAKDD), 2005. 
[24] J.-Z. Ouh, P. Wu, and M.-S. Chen, “Constrained Based Sequential Pattern Mining,” Proc. Int’l Workshop Web 
Technology, Dec. 2001. 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/04/29
國科會補助計畫
計畫名稱: 漸進式網路資料探勘系統之研發與實作
計畫主持人: 陳銘憲
計畫編號: 96-2628-E-002-038-MY3 學門領域: 資料庫系統及資料工程
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
