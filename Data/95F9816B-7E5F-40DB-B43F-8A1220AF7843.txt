 I 
1.中文摘要 
隨著網際網路日漸普及帶動了電子商務的蓬勃發展，企業對於內部作業流程控管
的需求愈來愈高，工作流程管理系統在最近幾年成為相當重要的支援性技術。面
對日益激烈的商業競爭，企業如何利用網際網路來整合跨組織和跨企業的工作流
程管理系統，以利彼此之間溝通協調商業活動的繁雜事務，提升彼此的合作效率，
是工作流程管理系統的首要目標。 
本計畫旨在研究一個完全不需集中式工作流程引擎的分散式工作流程系統，
命名為 XDWfMS (XML-based Distributed Workflow Management System)。此系統
具有以下的特色：(1)採用 XML 技術作為文件交換與儲存的格式；(2)文件基礎
(Document-based)的系統；(3)文件具自我資料保護的能力;(4)運用電子簽章來識別
流程參與者的動作，包括動作執行的時間及結果;(5)在系統架構上不存在任何集
中處理的工作流程引擎，僅需透過 XDWfMS文件傳遞來進行流程的運作。 
兩年的計畫執行除了提出測試驗證系統的架構外，還完成實作及系統測試，
並將完成的平台和實際的應用程式結合。除此之外，我們也更進一步研究以本計
畫定義的語法為基礎的標準，根據其它的需求來擴充語法以支援更多的功能，包
括更多樣化的使用者介面、不同的人員組織資料庫設計方法提供以因應各種的組
織型態，與依照工作流程的特殊目標增添語法的定義。 
關鍵詞：XML, Groupware, Workflow management system (WfMS), Distributed 
WfMS, Security 
 
Abstract 
This project is to research how to design and implement a distributed WfMS which 
does not need any centralized workflow engine. Our goal is to propose an XML-based 
Distributed Workflow Management System (XDWfMS). It is with the following 
features: (1) It employs the XML technology for the document exchange and storage; 
(2) It is document-based system; (3) The generated workflow document is protected 
by itself without the need of a server; (4) The technology of the digital signature is 
applied to authenticate the action of all the participants; (5) There is no any 
centralized workflow engine needed during the execution of a workflow. 
This is a two-year project. In addition to proposing the architecture of the 
XDWfMS platform, we implemented the system and applied it to some real 
applications. Besides, we researched some advanced topics including extensible 
functions to support more user-defined functions, various user interfaces for different 
participants, and a flexible way to define special workflow process in XDWfMS.
 2 
A1
A2 A3
A6A4 A5
Workflow Engine 2
Workflow Engine 3
Workflow 
Engine 1
Start of 
Workflow
End of 
Workflow
Activity Connection
Edge
Migration
Edge
Requester
Workflow
Engine
 
Figure 1: 分散式工作流程的分散架構 
 
在許多應用中，把一個工作流程處理程序的狀態(state)如 process instance儲
存起來是必要的。以 Figure 1所表示的分散式工作流程系統運作模式來看，一個
包括六個工作流程(activity)我們假設分別在三個不同地點之 workflow engine 上
執行。這種多個 workflow engine俱有兩個優點：第一個優點，當使用者增加時
可以把工作量平分散到各個 workflow engine；第二個優點，當 workflow engine
與使用者之間比較近，以網路傳輸來看，activity的參與者與 workflow engine之
間的通訊時間就會比較短。在這個工作模式中，會有一個管理者負責管控各個
workflow engine運作，使用者藉由網路與這些受控管的 workflow engine相互通
信並參與工作流程系統的執行。 
    Workflow process在執行當中，很明顯的一點就是 process instance必須被儲
存並傳送。我們以 Figure 1來說明：workflow engine 1必須把包含 activity A1執
行結果的 process instance 傳送到 workflow engine 2 與 3，而且這些 workflow 
engine要能夠在分散的異質性機器上執行。由此可見，在這類系統環境中，在不
同 workflow engine之間支援 process instance交換是必備的。   
   不過在Figure 1所示的工作模式中，因為process instance是藉由 Internet傳送，
會產生令心擔心的安全問題。在這個情況下，可能的安全問題至少如下：第一，
包含 activity執行結果的 process instance可能被竊取；第二，Process instance在
其被傳送到下個 workflow engine之前，可能被其他使用者攔截並修改內容。雖
然上述兩個問題可以利用 SSL 輕易的解決，但是其不能保證無法否認性
(non-repudiation)的需求。因此，這就無法讓系統保證能夠限制 activity的參與者
去參與任何 activity。在這個計畫中，我們將提出並實作一個工作流程系統來解
決在分散式環境中執行工作流程的問題，我們把它命名為以 XML文件遞送之純
分散式工作流程系統(XML-based distributed WfMS)，這個系統不但是一個分散式
架構而且也是一個非集中式的工作流程系統，其特色如下： 
它可以不用在一個集中式管理的 workflow engine之下工作。 
 4 
Figure 2描述 XDWfMS的分散式系統架構。首先以 XML文件定義撰寫一份文件
式的工作流程，使用者透過自己的電腦系統，來執行文件上所描述的工作流程，
該使用者執行單位我們將其稱為 Activity Enactment Unit，接下來內容以 AEU簡
稱之，輸入使用者名稱以及該文件式工作流程即可進行自己的工作或是需求。執
行完自己的 Activity，使用者再透過網際網路的資訊傳遞方法送交到下一個需執
行的 Activity繼續完成此工作流程。一個完整的工作流程應包含以下幾個執行步
驟： 
 步驟一：分析工作流程所要達成的目標，達成此目標需要經過哪些的參
與者，每個參與者負責的事項及範圍有哪些，根據負責的事項及範圍定
義這份工作流程文件哪部份需要加密或是電子簽章，最後由工作流程系
統設計人員依照定義的語言撰寫出 XML文件描述的 XDWfMS。 
 步驟二：開始一個新的工作流程，使用者自行下載所需的 XDWfMS，
工作流程開始執行會分配一個新的流水號記載在文件的開頭。
XDWfMS 處理工作流程執行結果的方式，相異於集中式工作系統利用
資料庫記錄每個 Activity執行的結果和各個工作流程的進度，XDWfMS
採用當 AEU執行完一個 Activity後，直接計錄在同一份 XDWfMS上，
並根據文件上的安全性定義，對文件作加密和電子簽章，如此代表完成
一個 Activity，然後經由 AEU產生新的文件。 
 步驟三：執行完一個 Activity後，將此份文件送往最有效率處理此工作
流程文件的時間戳印單位(Time Stamping Server)打印當下的時間戳印，
並電子簽章該時間戳印，防止被竄改；然後產生一份新的 XDWfMS，
再根據 Transition 和 Activity的定義判斷送交給下一個應該要執行的參
與者，然後透過網際網路或是任何的資訊化傳遞方式遞送給下一個參與
者進行工作流程。 
 步驟四：重複步驟一到步驟三的動作，除非碰到流程異常終止或是條件
無法滿足而導致流程失敗，工作流程順利完成之後，送交到相關的監控
單位(Monitor Server)存檔紀錄。  
 6 
者所使用；另外使用者須電子簽章自己的執行結果，以防止事後的否認
（Non-repudiation）。資訊安全相關定義包含：演算法資訊、如何簽章
的敘述、如何加密的敘述，另外配合時間戳記紀錄 Activity執行完畢的
時間。 
以上三個部份稱為 Ddef，於工作流程開始作完整的定義，流程執行的階段內
容不能變更，運作方法需參照定義的內容去進行。 
下列三個部份之文件稱為 Dresult區塊，內容會隨著流程進行而增加，每經過
一個 Activity的執行後產生參與者的執行結果並記錄下來。 
• 執行結果區（a1~a5）： 
記錄執行結果。 
• 時間戳印區（t1~t5）： 
執行單位將選擇最近的時間戳記第三單位來記錄時間。 
• 數位簽章（d1~d5）： 
紀錄數位簽章的摘要，當 XDWfMS的內容經過私密金鑰簽章後，產生
出的摘要放置在這個部份。 
 
Workflow Definition Section (f1~f5)
Digital Signature Section (d1~d5)
Time Stamp Section (t1~t5)
Activity Enactment Results Section(a1~a5) 
Security Definition Section (s1~s22)
Header Section (h1~h2)
Ddef
Dresult
 
h1  <?xml version="1.0“> 
h2  <XDWfMS:XDWfMS xmlns:XDWfMS="http://www.XDWfMS.org/2006"> 
f1      <!--Workflow Definition section--> 
f2          [F1] 
f3          [F2] 
            …  
f4          [Fn] 
f5      <!- -End of workflow definition section-->  
s1      <!--Security definition section--> 
s2          <!—Key and algorithm definitions--> 
s3              [P1] 
s4              [P2] 
                 …  
s5              [Pa]         
s6          <!--End of Key and algorithm definitions--> 
s7          <!--How to embed and verify digital signatures--> 
s8              [S1] 
s9              [S2] 
                 …  
s10             [Sb]         
s11          <!--End of embed and verify digital signatures n--> 
 8 
</Presentation> 
; 
 
IO ::= 
Output|Input 
; 
 
Output ::= 
<Output Name="String
   Label 
" Type="(Text|Image)" {ReadRef="Id"}> 
</Output> 
; 
 
Input ::= 
<Input Name="String" Type="(Text|TextField|Radio|Checkbox|Button)" Value="String
   <Label>
" {WriteRef="Id"}> 
String
   {<Operation>{Submit|Clear}</Operation>} 
</Label> 
</Input> 
; 
 
 
Transitions ::= 
<Transitions> 
Transition+ 
</Transitions> 
; 
 
Transition ::= 
<Transition From="String" Id="String" To="String
   {<Condition Type="CONDITION">ConditionText</Condition>} 
"> 
</Transition> 
; 
 
Security Definition 
SecurityDefinition ::= 
<SecurityDefinition> 
   KeyDefinitions 
   AlgorithmDefinitions 
   DigitalSignatureDefinitions <!--How to embed and verify digital signatures--> 
   EncryptionDefinitions <!--How to encrypt and decrypt data --> 
   TimeStampDefinitions <!--How to embed time stamps --> 
</SecurityDefinition> 
; 
 
Key Definition Section 
KeyDefinitions ::= 
<KeyDefinitions> 
   KeyDefinition+ 
</KeyDefinitions> 
; 
 
KeyDefinition ::= 
<KeyDefinition [KeyLink="Link
   <KeyName>String</KeyName> 
"]> 
   [<KeyType>String</KeyType>] 
   DownloadProtocol {DownloadProtocol} 
</KeyDefinition> 
; 
 
DownloadProtocol ::= 
<DownloadProtocol location="URL_adr" 
                  [SecurityPatternName="SecurityPatternName"] 
                  [PKI_Certificate="{X.509|PGP|SDSI}"] 
                  [VerifyCertificate="{Y|Yes|YES|N|No|NO}"] 
                  {Proxy="URL_adr"} /> 
; 
 
Algorithm Definition Section 
AlgorithmDefinitions ::= 
<AlgorithmDefinitions> 
   {(BuiltIn|Downloadable)} 
</AlgorithmDefinitions> 
; 
 
BuiltIn ::= 
<AlgorithmDefinition [AlgorithmLink="Link"] Use="(SECURITY|SIGNATURE|DIGEST)"> 
<AlgorithmId>String</AlgorithmId> 
 10 
IntegratedAlgorithm|Separated Algorithm 
; 
 
Integrated Algorithm ::= 
<SignatureAlgorithm> 
   {<AlgorithmDefinition AlgorithmLink="Link"/>} 
</SignatureAlgorithm> 
; 
 
SeparatedAlgorithm ::= 
<SecurityAlgorithm> 
   {<AlgorithmDefinition AlgorithmLink="Link"/>} 
</SecurityAlgorithm> 
<DigestFunction> 
   {<AlgorithmDefinition AlgorithmLink="Link"/>} 
</DigestFunction>  
<DigestElement> 
; 
 
Digital Signature 
DigitalSignatures ::= 
<Signature ID?>  
  <SignedInfo> 
    <CanonicalizationMethod/> 
    <SignatureMethod/> 
    (<Reference URI? > 
      (<Transforms>)? 
      <DigestMethod> 
      <DigestValue> 
    </Reference>)+ 
  </SignedInfo> 
  <SignatureValue>  
  (<KeyInfo>)? 
  (<Object ID?>)* 
</Signature> 
 
Encryption Definition Section 
EncryptionDefinitions ::= 
<EncryptionDefinitions> 
   {EncryptionDefinition} 
</EncryptionDefinitions> 
; 
 
EncryptionDefinition ::= 
<EncryptionDefinition Type="(Document|Activity|Transition|ExtendedAttribute|AER)" Id="String" 
AlgorithmLink="(algorithmrsa_v20|aglrsamd5|digest-md5)"> 
   Pattern+ 
</EncryptionDefinition> 
; 
 
Pattern ::= 
<Pattern Name="String"> 
   Case+ 
</Pattern> 
; 
 
Case ::= 
<Case> 
   Conditions 
   Time 
   Scopes 
   Keys 
</Case> 
; 
 
Conditions ::= 
<Conditions> 
   Condition|And|Or 
</Conditions> 
; 
 
Condition ::= 
<Condition>String</Condition> 
; 
 
And ::= 
<And> 
   Condition|And|Or 
</And> 
; 
Or ::= 
 12 
TimeStampingDefinition ::= 
<TimeStampingDefinition Id="String"> 
   <DigestElement> 
      {DigestItem} 
   </DigestElement> 
</TimeStampingDefinition> 
; 
 
TimeStamping ::= 
<TimeStamping Id="String" Index="Integer"> 
   <DigestElement> 
      {DigestItem} 
   </DigestElement> 
   <SignTime>Time</SignTime> 
   <IPAddress>String</IPAddress> 
   <HostName>String</HostName> 
   <SignatureValue>String</SignatureValue> 
</TimeStamping> 
; 
 
DigestItem ::= 
<DigestItem Type="Type" Id="String" Select="SelectPath" Scope="Scope" /> 
; 
 
5.4.AEU之設計與實作 
系統實作首先將針對 AEU進行實作設計，AEU功能包括：接收並剖析 XML文
件、操作文件裡的 XML資料、從金鑰庫(Key Store)下載讀取所需的公開金鑰
(Public Key)及私密金鑰(Private Key)、利用公開金鑰及私密金鑰加解密文件、對
文件作簽章、驗證文件裡的簽章、將定義在文件中的資料編譯成使用者介面、自
動連結所需的人員組織資料庫、流程分支、與時間戳印單位互動的處理。 
AEU運作模式如 Figure 4所示，使用者在接受一份 XDWfMS文件 X後，配
合 AEU 執行完 Activity，將執行結果打印在 X 上然後經過加密和電子簽章製作
一份新的 XDWfMS文件 X’，如果此工作流程尚未結束，則繼續送往下一個單位
繼續執行。詳細步驟如下： 
User Interface
Key 
Store
Algorithm 
Container
XDWfMS
Parser
Securing 
Tool
URI
Resource
Time Stamping
Server
XDWfMS
X
XDWfMS
X’
Network
(AEU)
 
Figure 4: AEU運作模式 
 
 步驟一：使用者接收 XDWfMS，假設現在為文件 X，啟動 AEU，讀進文件
 14 
 
但若是無法讓 AEU自己進行加密的資料，我們就必須要透過一個 Flow Control 
Server來進行加密動作，AEU會先產生一份XAiim文件送給 Flow Control Server，
再由 Flow Control Server進行加密簽章後產生出XAi′′′，才能遞送給下一個 AEU繼
續流程的執行。 
 XAiim  = (XAi    , {RAi }Pub (TFC )   , �XAi  , {RAi }Pub (TFC ) �Pub (Ai )) XAi′′′  = (XAiim ,  {RAi }TFC  ee , t , [XAiim , {RAi }TFC  ee , t ]Pub (TFC ) ) 
Figure 6: Advanced Operational Model 
 
6.實作與實驗結果 
我們設計一個 XDWfMS範例，並使用 AEU執行範例展示成果。實驗除了有範
例的結果，還有針對安全性動作時間耗費進行測量，最後是實驗數據的討論。 
6.1範例 
A
B D
E
Leo分配工作
John進行
廠商資料審核
John進行
廠商貨品
規格審查
Subject: John, Mary, Ken, Leo
F H
I
Ken進行
廠商資料審核
Ken進行
廠商貨品
規格審查
Leo
Leo
C
Mary進行
廠商資料審核
G
Mary進行
廠商貨品
規格審查
 
Figure 7: 範例 
 16 
6.3實驗結果討論 
經由 Table 1的實驗結果我們可以判斷在流程的開始和流程末端製作文件時間所
造成的耗費差距不大，只有當流程發生分開(Split)的情形平行送交給多個
Activities，而需要製作多份執行結果的情況會有明顯的時間耗費外，在流程的時
間主要消耗在驗證及解密文件的動作上。 
 我們採用 RSA實作加解密及電子簽章，實驗結果可以看出在流程中執行結
果的不斷產生，所需驗證的執行結果時間增加的結果會造成更多時間的消耗，這
是在未來文件式分散式工作系統可以研究的方向。 
 
7. 結果討論及計畫成果自評 
經過兩年的研究及實作，我們發現 XDWfMS是個可實用的系統。除了進行 Real 
applications測試，並將 XDWfMS與一般的工作流程系統結合，解決一般工作流
程系統無法滿足 non-repudiation的問題，並建立 workflow process的資料格式標
準以外，我們將進一步為 XDWfMS 設計一個 API，預期的目標是能為所有的
WfMS，包括集中式或分散式的WfMS都訂定WfMS process instance的標準。如
此發展 WfMS 系統時可以不必再發費時間設計 process instance，同時不同的
WfMS engine也可以交換 process instances。 
 
   我們認為目前計畫研究內容與原計畫相符，不論進度及研究成果都達成預期
目標，也深具學術或應用價值，預期研究成果將可發表於很好的學術期刊。同時
我們發現 XDWfMS 將可運用於 service-oriented architecture (SOA)的 security 
architecture 上，目前 SOA 的 security architecture 的相關研究大多集中於
communication security及 security policy上，對於 instance security付之闕如，而
使用 XDWfMS來制定 Security Policy是很有彈性的。我們希望於未來的研究能
探討這方面的問題，並進一步規劃相關的研究方向。 
 
8.參考文獻 
1.  D. Georgakopoulos, M. Hornick and A. Shet. “Overview of workow management: 
From process modeling to workow automation infrastructure,” Distributed and 
Parallel Databases 3(2) (1995) 119-153. 
2.  M. Shi, G. Yang, Y. Xiang and S. Wu. “Workow management systems: A survey,” 
Int. Conf. Communication Technology, 1998. 
3.  A. Elmagarmid and W. Du. “Workow management: State of the art vs state of the 
market,” in Proc. NATO Advanced Study Institute on Workow Management 
Systems, 1997. 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                            98年 8月 13日 
報 告 人 
姓 名 黃冠寰 服務機構 
及職稱 
國立台灣師範大學 
資訊工程學系 
教授 
會議      時間 
地點 
July 29 - 31, 2009, Tianjin, 
China 本會核定 
補助文號 
96-2221-E-003-016-MY2 
會議名稱 The 3rd IEEE Theoretical Aspects of Software Engineering Conference (IEEE TASE 2009) 
發表論文題目 
 A Framework and Language Support for Automatic Dynamic Testing 
of Workflow Management Systems 
 Spontaneous Detection of Infinite Loops and Livelocks in Dynamic 
Testing of Concurrent Programs 
 
一、參加會議經過 
 
IEEE TASE 2009 sponsored by IEEE CS and IFIP，今年在中國天津舉行．以下
是此會議的主旨： 
 
“Large scale software systems and the Internet are of growing concern to academia and 
industry. This poses new challenges to the various aspects of software engineering, for 
instance, the reliability of software development, web-oriented software architecture 
and aspect and object-orientation techniques. As a result, new concepts and methodologies 
are required to enhance the development of software engineering from theoretical aspects. 
TASE 2009 is a forum for researchers from academia, industry and government to present 
ideas, results, and ongoing research on theoretical advances in software engineering.” 
 
幾本上此會議是研究軟體工程理論方面的議題，共規劃為以下幾個 sessions: 
 
Session 1 : Real-Time and Embedded Systems 
Session 2 : Semantics 
Session 3 : Model Checking  
Session 4:  Specification 
Session 5 : Software Testing I 
Session 6 : Software Models 
Session 7 : Verification  
Session 8 : Concurrency 
Session 9 : Software Testing II 
 
因為每個 Session都只有三篇左右的論文報告，此會議接受的文章數並不多，接
受率為 27%(31篇 / 113篇投稿) 。本人很榮幸受邀擔任 Session 8的 Session 
chair。與會的人士來自世界各國，包括：USA,Australia, New Zealand, Canada, 
Japan, France, United Kingdom, China, Germany, South Korea, Singapore, 
Taiwan等。 
附件三
 
A Framework and Language Support for Automatic Dynamic Testing of Workflow 
Management Systems 
 
Gwan-Hwan Hwang, Che-Sheng Lin , Li-Te Tsao, Kuei-Huan Chen, and Yan-You Li  
Department of Computer Science and Information Engineering, 
National Taiwan Normal University, Taipei, Taiwan 
{ghhwang, cslin }@csie.ntnu.edu.tw 
 
Abstract—We propose a framework for the automatic dynamic 
testing of workflow management systems (WfMSs). We first 
classify faults that can occur during the execution of a WfMS 
and then describe a systematic testing scheme that provides the 
following advantages. First, the system developer does not need 
to play the roles of participants, and hence the entire testing 
process can be automated. Second, resources that cannot be 
addressed or represented by the workflow engine can be 
simulated, which makes the proposed framework also a 
simulation environment for applications. Third, our platform 
solves the problems caused by the presence of nondeterministic 
behavior during dynamic testing of a WfMS. Finally, we 
describe how to apply temporal logic to verify the dynamic 
behavior of the tested WfMS. The implementation and 
experimental results demonstrate the feasibility of the 
proposed framework. 
Keywords-workflow management system; WfMS; testing 
I.  INTRODUCTION 
Dynamic testing in software engineering refers 
to examining the physical response of a system to 
variables that change with time, and is used to test 
the dynamic behavior of code. Unlike in static 
analysis, in dynamic testing the software must 
actually be compiled and executed. This involves 
supplying input values to the software and 
checking whether the output is as expected. 
Dynamic testing methodologies include unit, 
integration, system, and acceptance testing. 
Dynamic testing at the source-code level has been 
considered an important step in the software life 
cycle (software development process) [1]. 
Workflow management systems (WfMSs) are 
software systems that support the coordination 
and cooperation among members of an 
organization whilst they are performing complex 
business tasks [2]. The business tasks are modeled 
as workflow processes that are automated by the 
WfMS. The workflow model (also referred to as 
the workflow-process definition) is the 
computerized representation of the business 
process. It defines the starting and stopping 
conditions of the process, the activities in the 
process, and control and data flows among these 
activities. An activity is a logic step within a 
workflow, which includes information about the 
starting and stopping conditions, the users who 
can participate, the tools, data, and resources 
needed to complete the activity, and the 
constraints on how the activity should be 
completed. Activities are usually organized into a 
directed graph that defines the order of execution 
among the activities in the process, where nodes 
and edges in the graph represent activities and 
control flow, respectively. A workflow-process 
instance is the execution of a workflow-process 
definition by the WfMS. The execution of a 
workflow-process instance is controlled by the 
workflow engine.  
Figure 1 shows the relationship between the 
WfMS and the participants. Many workflow 
processes are executed in the workflow engine. 
Activities in the process communicate with the 
participants via the user interface. In general, an 
activity first sends an output message to the 
participant and then the participant replies to it by 
transmitting an input message. The output 
message contains information telling the 
participant how to perform actions to execute the 
activity and respond to the WfMS. The input 
message is actually the response of the participant 
to the WfMS, and can contain items such as typed 
strings, results of clicks and check-box selections, 
and files. Also, different activities usually involve 
different participants. Thus, a common way to test 
a WfMS is for human testers to impersonate 
different participants and interact with the WfMS 
via the user interface. This causes several 
problems. First, according to the time/space 
can occur since activities A2 and A3 access 
resource R1 and A2 and A3 execute concurrently. 
This is called intra-workflow-process resource 
racing since A2 and A3 are within the same 
process. Similarly, the execution of A5 and B2 
causes inter-workflow-process resource racing.   
Much of the work in WfMS testing has 
utilized model-based testing, in which workflow 
definitions such as BPEL or XPDL are generally 
first translated into a form that the model checker 
can understand, and then the model performs its 
verification procedure [10-15]. The main problem 
encountered when applying a model checker to 
dynamic testing is that it is not suitable for testing 
source code and the dynamic behavior of the 
tested system. This is because it is usually 
necessary to model the system using a specific 
description language, in which can be difficult or 
even impossible to model certain program or 
machine-dependent behaviors. In general, the use 
of a model checker to validate a WfMS cannot 
solve the first two above-mentioned problems, but 
it can be used to check nondeterministic behavior. 
However, since source-code-level dynamic testing 
is impossible, only an abstracted model of the 
WfMS can be verified.  
In this paper, we propose a framework for the 
dynamic testing of WfMSs. In addition to solving 
the three problems mentioned above, our scheme 
can also support automatic testing dynamically. In 
other words, it is a systematic scheme to perform 
traditional coding testing on a WfMS. The testing 
framework is not designed for any specific 
workflow definition, and hence it is platform 
independent, making it applicable to WfMSs with 
different definitions and platforms. We have 
designed a language for the workflow designer to 
specify the testing script that contains 
workflow-related information such as activity 
participants, input and output messages of 
activities, resource information, and validation 
rules. Also, we classify faults in and propose a 
testing strategy for the WfMS.   
This paper is organized as follows. Section II 
surveys previous work on the testing and 
validation of WfMSs. Section III details the 
classification of faults and proposes a testing 
strategy for WfMSs. Section IV discusses the 
proposed testing framework and the syntax of the 
testing script. Section V presents how to apply 
dynamic effective testing in our framework. 
Section VI presents the results of experiments, 
and conclusions are drawn in Section VII.    
II. RELATED WORK 
We first briefly describe work related to 
applying model checking to the validation of a 
WfMS. Cao et al. proposed verifying BPEL 
modeled by a UML activity diagram [10] by 
mapping from a UML activity diagram to 
PROMELA code of the model checker SPIN to 
verify BPEL models. Since it is based on SPIN, 
the procedure verifies default properties such as 
safety and liveness. Mongiello and Castelluccia 
proposed a framework that automatically verifies 
formal models of business processes using a 
NuSMV model checker [11]. Each single 
Web-services partner is modeled as a finite state 
machine. The BPEL documents are translated into 
SMV codes and then processed by the NuSMV 
model checker. Nakajima presented a scheme to 
verify flows in Web services [12] that used WSFL 
as the Web-service flow language and SPIN as the 
model checker. Ouyang et al. presented a scheme 
based on translating BPEL processes into Petri 
nets and applying existing Petri-net analysis 
techniques to perform static analysis of BPEL 
processes [13]. Foster et al. described an approach 
to model and verify the compositions of 
Web-service workflows using the finite state 
processes notation [14]. That approach employed 
a model-checking tool and message sequence 
charts to verify the workflow behavior. Qian et al. 
presented an algorithm to map from BPEL to 
timed automata, and integrated it into 
ActiveBPEL [15]. By using the model-checking 
UPPAAL engine, their algorithm can verify BPEL 
properties such as deadlock and state reachability.  
Model-based testing is usually an abstract, 
partial presentation of the desired behavior of the 
system under test. The test cases derived from 
such as model are functional tests that are at the 
some level of abstraction as the model. However, 
 The allowable input and output messages of each 
activity: The designer should enumerate all the possible 
input and output messages of each participant in each 
activity of the workflow processes being tested.  
 Resources-related information: This contains the initial 
number, corresponding operations, properties, the 
relationship to workflow exception, workflow failure, 
and execution of activities. 
 Properties and constraints of the target system: The 
designer should also specify how he/she expects the 
system to work. Once the execution of the WfMS 
violates the specified properties or constraints, the 
testing framework will signal an system error and 
deliver the stored execution log to facilitate further 
debugging.  
User interface
Agent
Agent
Validation 
tool
Execution-log 
collector
WfMS
Resource Manager
Testing script
Resource pool
Trigger state
transitions of
resources
Collection 
of events
Access the 
testing script
Events for actions of resources
Figure 4. Operational model of our testing framework 
The agent communicates with the user interface 
of the target WfMS. According to the information 
in the testing script, the agent verifies whether the 
output messages and the participants are correct 
and then sends out the input messages to the 
WfMS via its user interface. This removes the 
need for the tester to play the role of each 
participant to enumerate all possible combinations 
of input and output messages. The agent 
dynamically generates fault reports when the 
participants or the output messages are incorrect. 
Also, since the agent simulates the execution of 
activities, this can trigger the creation, state 
transitions, and removal of the resources.  
The resource manager is a container and 
simulator of resource entities. A state change of 
the resource entity can either be triggered by the 
execution of activities or occur spontaneously. An 
example of the former is where the participant 
occupies a fax machine during an execution of an 
activity; an example of the latter is where a car is 
out of order, which is unrelated to the execution of 
an activity. The operation of the resources 
includes their creation, deletion, and state 
transitions. They are considered as events in the 
WfMS and thus are delivered to the execution-log 
collector. 
The execution-log collector is responsible for 
collecting events during the execution of 
workflow processes, such as the operations of 
resources, the start and end of activities, and 
shared-resource accesses. If the verification is 
based on these event sequences, the workflow 
engine might need to be modified to deliver those 
events to the execution-log collector. The 
validation tool receives the log from the 
execution-log collector and the agent, and checks 
whether the execution of the workflow process 
violates the specified properties and constraints in 
the testing script. These constraints are checked 
either statically after the end of the execution of 
workflow processes or dynamically during the 
testing.  
 
H1   <?xml version="1.0" encoding="UTF-8"?>
H2   <TestingScript>
H3 <Applications>
A1 <Application>
r1 <!– Resources definition section -->
r2 [R1]
r3 [R2]
.
r4 [R3]
r5 <!– End of resources definition section -->
f1 <!– Participant behavior definition section -->
f2 [F1]
f3 [F2]
.
f4 [F3]
f5 <!– End of participant behavior definition section -->
w1 <!– Workflow constraint definition section --> 
w2 [W1]
w3 [W2].
w4 [W3]
w5 <!– End of workflow constraint definition section --> 
</Application>
A2 <Application> … </Application>
A3 <Application> … </Application>
.
</Applications>
</TestingScript>
Figure 5. Architecture of the testing script 
The testing script plays an important role in the 
entire testing process. The system developer uses 
it to perform dynamic testing on his/her WfMS. 
Here we present its architecture, syntax, and 
participant behavior definition in a single activity. 
We consider the execution of an activity 
consisting of a sequence of pages as shown 
in Page. The definition of a page starts from the 
allowable participant, Participant. It is followed 
by a sequence of I/O objects defined within 
<IOSet> and </IOSet>. There are two types of 
I/O objects. The first type is the object for an 
output message, PresentationObject. Note that 
output messages are generated from the WfMS. 
The tester specifies a regular expression to verify 
if its format is legal. The second type of I/O object 
represents the input message, ParticipantInput. 
Each InputObject
The behavior of the participant is defined 
in 
 is a possible input, one of 
which will be sent to the system via the user 
interface of the participant.   
ParticipantAction, which can trigger the state 
operations of some resources. It can be set to be 
performed before, during, or after the execution of 
the activity. The workflow resource operation 
(WfRO) language was designed to specify the 
resource operation. When an activity is about to 
be executed, the resource manager executes the 
WfRO codes defined in Action
 THIS: This variable is used to obtain the following 
information about the current workflow execution:  
 before, during, or 
after the execution of the activity. The syntax of 
the WfRO language is the same as that for the 
Java programming language. However, we define 
some data types and methods to enable it to 
specify the resource operation:  
THIS.getApplicationName(): Returns 
the name of the current application. 
THIS.getWfProcessName(): Returns 
the name of the current workflow process. 
THIS.getWfProcessID(): Returns the 
ID of the current workflow process. 
THIS.getActivityName(): Returns the 
name of the current workflow activity.  
THIS.getActivityID(): Returns the ID 
of the current workflow activity.  
 AllocateWfResource(ResourceType, 
ResourceName, ResourceID): This is a static 
function used to allocate a resource in the resource 
management for subsequent operations. The resource 
type and name are specified in ResourceType and 
ResourceName, respectively. ResourceID is used 
to specify a unique ID to differentiate resources with the 
same type and name. A unique ID should be specified 
for the subsequent operation of the allocated resource. 
Once a resource is allocated, it is associated with the 
specified ID. This function returns an object of type 
WfResource. It returns “false” when no more 
resources are available. For example,  
WfResource w1= AllocateWfResource(“car”, “bus”, 
THIS.getWfProcessID + “1”); 
 GetWfResource(ResourceID): This is a static 
function used to obtain an allocated resource based on its 
resource ID. For example, WfResource w1= 
GetWfResource(THIS.getWfProcessID + “1”); 
 WfResource is an object defined in the WfRO 
language. It contains the following methods:  
 GetWfResourceState(): This is used to obtain 
the state of an allocated resource. This function 
returns an object of type WfResourceState. 
 FreeWfResource(): This is used to free a 
resource in the resource management. 
 ChangeWfResourceState(WfResourceSta
te): This is used to change the state of a resource. 
Note that the WfResourceState object is also a 
string object.  For example,  
w1.ChangeWfResourceState(“DRIVING”); 
 ChangeWfResourceStateTemporarily(Wf
ResourceState,Time). This is used to change 
the state of a resource for a certain period of time.  
For example, 
w1.ChangeWfResourceStateTemporarily(“DRIVIN
G”, “3.5H”);  
 
Participant behavior definition  
<ParticipantBehavior> Processes </ParticipantBeha
vior> 
Processes  Process { Process } 
Process  <Process Name=“String
    
”>   
Activity { Activity
                   </Process> 
 } 
 Activity  <Activity Name=“String
 
”> 
Page { Page
</Activity> 
 } 
 
Page  <Page seq=“Integer”
                   
> 
              <IOSet> 
Participant 
(Presentation_Info | ParticipantInput) { (Presentation_Info |  
ParticipantInput
</IOSet> 
) } 
              </Page> { 
ParticipantAction 
Page } 
Participant
      <Name> 
  <Participant> 
String
                           <ID> 
 </Name> 
String
   </Participant> 
 </ID> 
Presentation_Info
                     
  <Presentation> 
PresentationObject { PresentationObject
               </Presentation> 
 } 
PresentationObject  <Object type=String
                                          
> 
                                     </Object> 
REGEX 
ParticipantInput
                  
  <ParticipantInput> 
InputObject { InputObject
           </ParticipantInput> 
 } 
InputObject  <Object type=String
                              
> 
                         </Object> 
Value 
ParticipantAction  <ParticipantAction> 
Action_Script { Action_Script
</ParticipantAction>  
 } 
Action_Script(<before>Action</before>|<during>Action</during>| 
times. We first define the formula “Loop” and then use 
it to specify the final constraint. “==” defines a formula 
for later use: 
Loop == Activity_Start(*,A1,*) & 
F(Activity_Start(*,A2,*) & 
F Activity_Start(*,A3,*)) 
G!(Loop & F(Loop & F Loop)) 
 The shared data D cannot be accessed in activities A1 
and A2 simultaneously: 
G !(Shared_Data_Operation(*,A1,D,*,*)& 
Shared_Data_Operation(*,A2,D,*,*)) 
 
WorkflowConstraint definition
{ 
  <WorkflowConstraint>  
Constraint
</WorkflowConstraint> 
 }  
Constraint
<![CDATA[ 
<Constraint> 
Linear Temporal Logic
</Constraint> 
 ]] 
Linear Temporal Logic  
Figure 10. BNF form of the workflow constraint definition 
String 
V. DYNAMIC EFFECTIVE TESTING UNDER OUR TESTING 
FRAMEWORK 
When applying dynamic testing to 
nondeterministic concurrent programs that contain 
busy-waiting loops or iterative statements, the 
existence of the busy-waiting loop makes the 
number of feasible SYN-sequences infinite. Since 
a WfMS process can contain loops, we also have 
to solve this problem in our testing platform. 
Dynamic effective testing is used to solve the 
problem in which exhaustive testing is infeasible 
for programs containing an infinite number of 
SYN-sequences [20]. The basic idea is to not 
apply all the possible tests (since the number of 
feasible SYN-sequences is usually infinite). For a 
concurrent program P with input X, if the number 
of possible execution states is finite, the execution 
of P with X can be represented by a deterministic 
finite automaton (DFA) F in which the finite sets 
of states are the possible execution states and the 
transitions are labeled as synchronization events. 
The effective test set of P with X consists of a 
finite set of tests ET of P with X. The associated 
SYN-sequences of ET traverse all the states and 
transitions in F.  
To apply dynamic effective testing to our 
framework, the execution-log collector needs to 
record the sequence of events in the execution of 
the workflow processes for race analysis. Also, it 
must be able to perform prefixed-based replay for 
the race variant [8]. 
VI. IMPLEMENTATION AND EXPERIMENTAL RESULTS 
We implemented a prototype of our testing 
framework based on the operational model shown 
in Figure 4 and comprising four components: 
agent, execution-log collector, validation tool, and 
resource manager. The agent and resource 
manager were implemented in Java programming 
language. In the execution-log collector, we had 
to insert codes into the workflow application to 
record the orders of synchronization events and 
shared object accesses. The shared objects could 
be shared files or relation tables in the database 
system. The T-sequence has previously been 
defined in order to provide sufficient information 
to detect race conditions between SQL 
transactions [8]. This model is general enough to 
apply to the complex behavior of a WfMS, and 
hence we used it in the implementation of our 
execution-log collector.  
The validation tool was implemented using the 
NuSMV for the model checking of LTL [21]. The 
code, which was implemented in the C 
programming language, checks a DFA to see if it 
conforms to a specified LTL. Our validation tool 
was implemented in Java programming language. 
It first translates the WfMS-event sequence 
collected by the execution-log collector into a 
partial order graph. Then, the partial order graph 
is used to derive the corresponding DFA. The 
DFA is sent into the NuSMV program to check if 
the execution conforms to the specified LTL.  
We applied the implemented testing platform 
to two WfMSs: an object-oriented WfMS [22] and 
an aspect-oriented WfMS design [23]. The 
experimental results demonstrated the feasibility 
of our testing platform. All the faults defined in 
Section III could be detected using our 
framework.  
VII. CONCLUSION AND FUTURE WORK 
A WfMS is essentially a software system that 
exhibits concurrent and nondeterministic behavior. 
Its execution and operation involve sophisticated 
interactions between flow engines, resources, and 
participants, which makes it more difficult to test 
than ordinary concurrent software. Here we have 
analyzed the features and classified the faults in a 
