 1
行政院國家科學委員會補助專題研究計畫成果報告 
※※※※※※※※※※※※※※※※※※※※※※※※※
※                  ※     
※   考量晶片溫度與效能之三維多核心系統晶片合成法  ※ 
※                       ※ 
※※※※※※※※※※※※※※※※※※※※※※※※※ 
 
計畫類別：■個別型計畫  □整合型計畫 
計畫編號：NSC 99-2218-E-260-004 
執行期間：2010 年 12 月 1 日至 2011 年 10 月 31 日 
 
計畫主持人：陳依蓉   國立暨南國際大學資訊工程系 
計畫參與人員： 陳虹熹  國立暨南國際大學資訊工程系 
    蔡孟伶  國立暨南國際大學資訊工程系 
 
 
 
 
 
 
 
本成果報告包括以下應繳交之附件： 
□赴國外出差或研習心得報告一份 
□赴大陸地區出差或研習心得報告一份 
█出席國際學術會議心得報告及發表之論文各一份 
□國際合作研究計畫國外研究報告書一份 
 
 
 
執行單位：國立暨南國際大學資訊工程系 
 
 
中 華 民 國 101 年 1 月 30 日 
 
 
 3
或是 Through-Silicon Via (TSV)互相溝通，
每層晶片內之 TSV 則經過 Wafer Bonding
技術連結起來，進而將多層晶片整合在一
起。與傳統二維晶片設計相比，三維堆疊
技術有以下主要好處：(1) 因晶片平均繞線
長度縮短，所以可減少平均訊號傳輸時
間。(2) 可將不同製程方法所產生之晶片，
如微處理器或是CPU與動態隨機存取記憶
體 (Dynamic Random Access Memory, 
DRAM)，整合在同一晶片，也就是提供異
質 整 合 (Heterogeneous Integration) 之 能
力。(3)由於 TSV 可以高密度集中在同一晶
片上，因此三維堆疊技術可提供大量記憶
體頻寬(Memory Bandwidth)[5] [6] 。由此
可見，我們可利用三維堆疊技術將 DRAM
與 MPSoC 整合在同一晶片，以減少記憶體
存取時間，並利用高密度之 TSV 連結
DRAM 與 MPSoC 以提供大量記憶體頻寬。 
雖然三維堆疊技術有縮短通訊傳輸時
間、降低訊號傳遞耗電與異質整合等等眾
多好處，但也為晶片設計帶來晶片溫度提
升的問題。由於三維堆疊技術會使晶片功
率密度(power density)提高，導致晶片溫度
較易升高，且堆疊的晶片層數越多，會使
在每個晶片層中所產生之熱能散熱不易，
因而使晶片過熱的問題更加嚴重。而
DRAM 本身會因溫度的上升造成漏電
(leakage)問題更加嚴重，並進而導致耗電量
上升溫度更容易上升的惡性循環。因此，
在 MPSoC 以 三 維 堆 疊 方 式 整 合
DRAM(MPSoC with stacked-DRAM)的架
構中，如何正確控制系統溫度是一個相當
重要的課題。 
MPSoC 通常都執行固定之應用程式
組，但同一時間，只有一種特定應用程式
會被執行，且在不同情況下，哪些應用程
式會同時執行則會各有不同。如[7] 中所提
到的，單一情境下有數種不同特定應用程
式同時執行的情況稱之為一個 scenario。在
不同 scenario 下，系統之行為不盡相同，
對於溫度的表現也不盡相同。 
因此，在本計畫中，我們針對 MPSoC 
with stacked DRAM 的 架 構 ， 進 行
scenario-based MPSoC 工作特性分析。我們
將對不同的 scenario，進行工作平行度
(task-level parallelism)、記憶體頻寬需求、
以及工作執行之 thermal behavior 等分析。 
在接下來的報告中，我們將在三、
System Setup 中 ， 詳 述 我 們 的 target 
architecture特性，所設定之MPSoC的 target 
application set，我們所分的 scenario，以及
如何分配 application kernel 放入 PE 中執
行。在四、Experimental Setup中，將詳列
進行工作特性分析之模擬器與硬體特性設
定。主要的工作特性分析結果將在五、
Experimental Results中呈現。 
  
三、 System Setup 
a. Target Architecture 
將 DRAM 與 PE 利用以 TSV 為核
心技術之三維堆疊技術整合之三維堆
疊 多 核 心 系 統 晶 片 (3-Dimensional 
Multi-Processor System-on-Chips, 3D 
MPSoCs)架構如圖 1中所示。圖 1(a)
為 3D MPSoC 之架構概略圖[8] 。由圖
中我們可見，3D MPSoC 是由一層邏
輯層(Logic Layer)與一或多層主記憶
體(DRAM Layer)所堆疊組成。 
Logic layer 被平分成多個相同大
小稱為 tile 之區塊，並以晶片上網路
(Network-on-Chip, NoC)方式連結。每
個 tile 內可配置 PE 或是靜態隨機存取
記憶體(Static Random Access Memory, 
SRAM)等主要硬體資源。每個 tile 內
也都配置有路由器(Router)。當兩個 tile
內之主硬體資源要交換資料，資料以
封包的型式透過 router在網格式(Mesh)
網路傳輸。每個 tile 都有配置 DRAM
控制器 (DRAM Memory Controller, 
DMC)，以便直接利用 TSV 之 DRAM 
bandwidth 的好處，並存取堆疊其上之
DRAM layers。在本計畫中，我們假設
所 有 的 PE 都 使 用 相 同 的
micro-architecture。 
而 DMC 的詳細架構則如圖 1 (b)
所示。主要元件有 Read Queue、Write 
Queue 與 Command Queue 三個不同的
queue 來暫存要被寫入或是讀出
DRAM 的資料。存取 stacked DRAM
中的資料則是透過 TSV 所組成之
vertical data bus。因此，若某一 PE 要
存取堆疊於其他 PE 上方的 DRAM 
module，只要先將存取需求 (Access 
 5
同一 PE 以減少 communication cost，
有 shared data 之 task 盡量放在鄰近的
PE，且可以平行做的 task 盡量放在不
同 PE 上以平行執行提升效能。此外，
task graph 中所使用到的相同 kernel
都在同一 PE 上執行。  
在 data mapping 的部份，我們則是
以降低平均 data access latency為主要
原則。 
 
四、 Experimental Setup 
a. Simulation Environment  
為 進 行 scenario-aware thermal 
analysis，我們需先取得各 scenario 在
target architecture 上之 performance 與
power trace。接著，根據 power trace
再進行 target architecture 之 thermal 
simulation。 
在 performance 與 power trace 方
面，由於我們的 target architecture 本身
的底層 PE 通訊方式為 NoC 架構，因
此 ， 在 本 計 畫 中 ， 我 們 使 用 由
University of California 為進行網路行
為模擬所開發之 network simulator 
ns-2[1] 做為我們取得 performance 
trace 之 simulation tool。根據由 ns-2
取得之 performance trace，我們可以知
道哪些硬體模組在何時有耗電，何時
在 idle，因此，可根據 performance trace
推 出 target architecture 之 power 
trace。之後，我們再使用 HotSpot 5.0[2] 
[3] ，配合取得之 power trace 進行
target architecture 之 thermal 行為模
擬。HosSpot 為 University of Virginia
針對電腦晶片上之熱能行為所發展的
一套快速 thermal simulation tool。在
HotSpot 5.0 的版本中，更加入了 3D 
die-stakcing 架構下之熱能行為模型
(thermal model)。 
整體的模擬流程如圖 3所示。首
先，我們將 scenario 中所有的 task 
graph，target architecture template，以
及 task and data mapping ，當做 input
送 到 ns-2 進 行 3D MPSoC 之
performance simulation ，獲得了此
scenario 在 target platform 的
performance trace，包含每個 PE 與
router在何時會busy，NoC的每個cycle
之使用情況等。之後，根據 performance 
trace，我們可知每個 PE、DRAM 以及
router 模組，在何時會 active，何時會
idle。因此可推出其 power trace。最後
將 power trace 送入 HotSpot 5.0 做
thermal simulation。 
 
 
圖 3 Simulation flow. 
 
b. Architectural Setup and Benchmark 
在我們的實驗中，我們的 target 
platform如圖 4所示。底層之 logic layer
為一 2x2 的 NoC 架構，上面為一層的
DRAM layer。每個 PE 都有自己的
DMC 以及 TSV bus 連接上層 DRAM。
我 們 PE 的 參 數 設 定 參 考 ARM 
Cortex-R4 的架構 [11] 。NoC 上的
routing 方式則假設使用 Open Shortest 
Path First(OSPF)。此外，我們也參考了
[12] [13] 進行 NoC 相關設定。詳細的
硬體參數設定請見表 1。 
 
 
 
圖 4 Target platform. 
 
在本計畫中，我們使用 E3S[9] 所
提供之 task graphs 用來組成我們的
scenarios。E3S 為根據嵌入式系統效能
評估之 EEMBC[10] 所建立之 task 
graph 組。在 E3S 中，task 與 edge 的
 7
Embedded Multicore SoCs (MCSoC 2012)。 
 
六、 參考文獻 
[1]  The Network Simulator – ns-2, 
http://www.isi.edu/nsnam/ns/ 
[2]  G. M. Link and N. Vijaykrishnan, “Thermal 
Trends in Emergent Technologies.” in 
Proceedings of the International Symposium on 
Quality Electronic Design (ISQED), March 2006 
[3]  HotSpot, http://lava.cs.virginia.edu/HotSpot/ 
[4]  G. Moore, “Cramming more components onto 
integrated circuits”, Electronics, vol. 38, no. 8, 
Apr. 19, 1965. 
[5]  G. H. Loh, “3D-Stacked Memory Architectures 
for Multi-core Processors,” in ACM SIGARCH 
Computer Architecture News 36, 3, 2008, 
453-464 
[6]  B. Vaidyanathan, W. Hung, F. Wang, Y. Xie, V. 
Narayanan, M. J. Irwin, "Architecting 
Microprocessor Components in 3D Design 
Space," in Proceedings of the 20th Internal 
Conference on VLSI Design, 2007. 
[7]  J. M. Paul, D. E. Thomas and A. Bobrek, 
“Benchmark-Based Design Strategies for Single 
Chip Heterogeneous Multiprocessors”, in 
Proceedings of the International Conference on 
Hardware/Software Codesign and System 
Synthesis (CODES+ISSS), September 2004. 
[8]  I. Loi and L. Benini, “An Efficient Distributed 
Memory Interface for Many-Core Platform with 
3D Stacked DRAM”, In Proceedings of the 2010 
Design, Automation and Test in Europe, March 
2010. 
[9]  E3S, http://ziyang.eecs.umich.edu/~dickrp/e3s/ 
[10]  EEMBC, 
http://www.eembc.org/products/index.php 
[11]  ARM Cortex-R4, 
http://www.arm.com/products/processors/cortex-
r/cortex-r4.php 
[12]  R. S. Ramanujam et al. “Design of a 
High-Throughput Distributed Shared-Buffer 
NoC Router”, NOCS, 2010. 
[13]  X. Chen et. al, “Leakage Power Modeling and 
Optimization in Interconnection Networks”, 
ISLPED 2003  
 1
 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                   日期： 100 年 7 月 29 日 
一、參加會議經過 
這次參加的會議是有關於軟體工程的研究。7 月 21 號報告日的當天，Ballroom 8 會議室裡有大約
十幾位從各個國家來的人參與這場 session。第一位報告者也是一位台灣人，我是第二報告順位，接著
還有巴基斯坦、巴西、和一位美國人的報告。每位參與者都很投入在這一場的報告裡，其間除了對正
在進行報告的討論，沒有其他的聲音。在報告者結束後的 Q&A 時間，也有一些很有趣的討論，能感覺
到報告和參與者對這場會議的重視。 
二、與會心得 
這次第一次參加國際研討會也是第一次離開台灣，整個旅程讓我開拓了自己的視野。接觸到許多從各
個遙遠國度來的人，努力用不熟悉的語言誠心的溝通，實在是很可貴的經驗。我參加的這場 session 大約
進行了二個多小時，在我報告之後有位參與者私下來對我的報告內容做一點討論，這真的是個很難得
的體驗，可惜的是我的語言能力不足以讓我們的討論更深刻，也讓我更加的體會到表達能力的重要性。
在其他報告者的報告中，有很多無法聽懂的內容，需要配合台上投影片的圖片和文字才能稍微猜出他
們要表達的意思，由於所有人都很專心的投入會議，也有很多人參與討論，整場的氣氛充滿對研究的
熱情，雖然無法完全了解別人研究的內容，還是讓我有點感動，也對投入研究的人充滿敬意。 
三、考察參觀活動(無是項活動者略) 
無。 
四、建議 
透過參加國際的研討會，接觸了其他國家的文化，能夠體會許多新的事物，促進思考，開擴自己
的視野和提升國際觀，可以多鼓勵同學去參加國外的研討會。 
五、攜回資料名稱及內容 
計畫編號 NSC99－2218－E－260－004－ 
計畫名稱 考量晶片溫度與效能之三維多核心系統晶片合成法 
出國人員
姓名 宋紫鈞 
服務機構
及職稱 
國立暨南國際大學資訊工程學系 
兼任助理 
會議時間 2011 年 7 月 17 日至 2011 年 7 月 22 日 會議地點 美國拉斯維加斯 
會議名稱 
(中文) 2011 年軟體工程的研究和訓練國際研討會 
(英文) The 2011 International Conference on Software Engineering Research & 
Practice (SERP’11) 
發表論文
題目 
(中文) SDP: 一個以提升軟體產能為目的的軟體開發平台 
(英文) SDP: Software Development Platform for Improving Software Productivity 
附件四 



the contents in the finite state diagram are the same as the ones 
in a traditional design method, the behavior of Software 
Processor will be the same as the executable program file 
generated by the traditional design method without recoding 
and recompiling. Notably, each generated state table may 
contain some input and output (I/O) functions which are 
included in software IC libraries. SDP provides a Graphical 
Input and Output Designer (GIOD) for designers to easily 
design a graphical user interface (GUI). 
 
 (a) (b) 
Fig. 1 Outcome sketch charts of (a) the traditional design method and (b) 
SDP. 
The rest of this paper is organized as follows. Section 2 
gives an overview of SDP. Section 3 provides the SDP toolset 
and user interface. Section 4 demonstrates an example on SDP. 
Section 5 compares the traditional design approach with this 
work. Conclusions are finally drawn in Section 6. 
II. OVERVIEW OF THE PLATFORM 
SDP is composed of the GIOD, STD and Software 
Processor. Fig. 2 illustrates the overview of the proposed SDP. 
Like designing hardware, the reusable Software Processor is a 
CPU; each generated state table is a program of the Software 
Processor, and every I/O function is regarded as a software IC. 
By the proposed GIOD, a GUI can be designed easily. The 
GIOD produces specific format called GIO object files. The 
STG provides an environment for visually building extended 
FSMs and transforming them into state tables accepted by the 
given Software Processor. The generated state tables may 
contain pointers of I/O functions contributed by GIOD. 
 
Fig. 2 Overview of SDP. 
The continuing subsections introduce the detail of the 
GIOD, STG and Software Processor in turn. 
A. GIOD 
The GIOD is created for visually, diagrammatically and 
intuitionally designing the graphic user interfaces of Windows 
Forms. Windows Form Control objects provided by the GIOD 
include “Button” for clicking, “Text Box” for keying in some 
strings, “Picture Box” for displaying some pictures and so on. 
When a designer wants to have an object in his Windows Form 
application, the necessary information he needs is what the 
width and height of this object are, where this object on the 
form is, what the object’s unique name is and what the 
Windows Form Control object’s type is . Therefore, the 
arguments of each GIO object are size, location, name and 
type. For example, the designer can place a button object 
named “OBJ_01” with 100×200 pixels size in the upper left 
corner of the Windows From application. The designers 
choose desired objects provided by the GIOD to express their 
program’s graphic interface. If a designer wants to design a 
Windows Form program with two buttons on the left side, one 
picture box and one text box on the right side as shown in Fig. 
3(a), the designer should determine the names, sizes and 
locations of these objects and draw them as four GIO object 
blocks with the appropriate names, sizes and locations via the 
GIOD. Each GIO object’s name can be keyed in from 
keyboard; every object’s location can be changed by mouse 
dragging it to anywhere in the form, and each object’s type is 
selected form one of the Windows Control objects’ types on 
the GIOD. As shown in Fig. 3(b), all constructed GIO object 
blocks will be saved as a specific format called GIO object file 
in which each GIO object has its own size, location, name and 
type. The GIO object file can be read by STG for getting each 
GIO object’s name as input and output objects, and read by the 
Software Processor for creating a real GUI of a Windows 
Form application with these Windows Form Control objects 
on it. 
 
 (a) (b) 
Fig. 3 The concept of the GIOD. (a) A Windows Form program with four 
objects. (b) Using GIOD to design the desired objects. 
B. STG and the Extended FSM 
The STG can let designers draw their own finite state 
diagrams to describe the solutions for their requests. Then the 
STG transforms each finite state diagram into a finite state 
table. 
Finite state diagram is one of the most conventional model 
for explaining software behavior. The regular final state 
machine (FSM) is formally denoted by the five-tuple <Q, ∑, δ, 
q0, F> [9], where Q is a finite set of internal states; ∑ is a finite 
and nonempty set of symbols, called input alphabet; δ is a total 
function, called transitional function; q0 ∈ Q is an initial state, 
and F ⊆ Q is the set of final states. The relationship between 
586 Int'l Conf. Software Eng. Research and Practice |  SERP'11  |
from an input object via a specific input function, the Software 
Processor checks the present state and the reasonable input on 
every transition row, including its current state, input object, 
and input function. If all those above are matched, the 
Software Processor changes the present state into the target 
state of the matched transition row and activates the matched 
output function of the corresponding output object. Because 
the input and output function are all selected software ICs, it 
just likes that the Software Processor connects the software 
ICs together according to the information of the finite state 
table to realize designers’ requests. 
 
Fig. 6 The role of the Software Processor and its activity. 
III. THE SDP TOOLSET 
The development environment of SDP is Microsoft visual 
studio 2008 with Microsoft.NET framework. The developing 
language is C-Sharp (or C#). 
The user interface of the GIOD is shown in Fig. 7(a). 
GIOD is a simple tool to produce input and output objects for 
Windows GUI programming. Designers can design what their 
Windows Form program looks like and “select,” “add ” and 
“delete” each GIO object on the GIOD by the mouse. If 
clicking the button “Attribute,” designers can select a 
Windows Form Control type for each GIO object as shown in 
Fig. 7(b). The pull down menu button “File” is used to save all 
the GIO objects into a GIO object file. 
    
 (a) (b) 
Fig. 7 The user interface of GIO Designer. (a) The user interface. (b) The 
GIO object attribute form. 
Fig. 8(a) is the snapshot of the proposed STG tool. STG 
lets designers draw finite state diagrams on the underside of 
the tool to explain their requests and transforms each diagram 
into a finite state table file. The pull down menu button “File” 
is used to save the finite state diagrams which designer design 
and the transformed finite state tables. 
Every state diagram which is designed by designers has to 
have one unique initial state which has a small green rhombus 
at the upper left corner and one or more final states which has 
additional concentric circle. When the “Attribute” button being 
clicked and selecting any state or transition on the diagram, 
STG shows the Windows Form “State Attribute” or 
“Transition Attribute” as depicted in Fig. 8(b). Each state or 
transition has its own unique identification, named “ID,” as 
one of its attributes for making off other states and transitions. 
The current state and target state can be changed by selecting 
another state on the finite state diagram, and the selected 
transition arrow will change and redraw in the same time. 
Designer can also select the GIO objects they need to be the 
input objects or output objects with the GIO object file 
generated from the GIOD. The selectable input and output 
functions are the exiting executable functions in software IC 
libraries which builds by designers. 
  
 (a) (b) 
Fig. 8 The user interface of State Table Generator. (a) The user interface. 
(b) The transition attribute form. 
To translate a state to another state needs at least one 
transition between states. Because one transition can only have 
one output function, the input function and input object of 
transition can be “NULL” at the same time for absolutely 
translating state. At the beginning, the absolutely translations 
usually set for the initial setting of a program. Likewise, one 
transition can only have one input function, and the output 
function and output object of a transition also can be “NULL” 
at the same time for another chance to receive input functions. 
For solving the problem of reusing existing executable 
input functions and output functions of transitions which can 
be selected, we build software IC libraries outside of STG. 
The software IC libraries use the concept of dynamic-link 
library (DLL) [6, 10], which is an executable file that acts as a 
shared library of functions. Each function in the software IC 
libraries is written in a specific format designed by this work 
for using by the Software Processor. The STG gets the input 
and output functions’ name by linking the software IC libraries. 
Designers can select the input and output functions they need 
or create the new useful functions here. 
The last step is letting the finite state table generated by the 
STG drives the Software Processor. The Software Processor 
includes a history recorder for checking the correctness of 
588 Int'l Conf. Software Eng. Research and Practice |  SERP'11  |
TABLE II 
THE FINITE STATE TABLE OF THE DRAWER 
Current 
State 
Input 
Object 
Input  
Function 
Output 
Object 
Output 
Function 
Target 
State 
Init Null Null Picture CreateBit-map  
Canvas 
Created 
Canvas 
Created Circle Click Null Null 
Button 
Circle 
Clicked 
Canvas 
Created 
Rec-
tangle Click Null Null 
Button 
Rect 
Clicked 
 Canvas 
Created 
Fill-
Circle Click Null Null 
Button 
FCircle 
Clicked 
Button 
Circle 
Clicked 
Rec-
tangle Click Null Null 
Button 
Rect 
Clicked 
Button 
Circle 
Clicked 
Fill-
Circle Click Null Null 
Button 
FCircle 
Clicked 
Button 
Circle 
Clicked 
Picture MouseDown Picture getFirstPoint 
Get 
Circle  
First 
Point 
Button 
Rect 
Clicked 
Circle Click Null Null 
Button 
Circle 
Clicked 
Button 
Rect 
Clicked 
Fill-
Circle Click Null Null 
Button 
FCircle 
Clicked 
Button 
Rect 
Clicked 
Picture MouseDown Picture getFirstPoint 
Get 
Rect  
First 
Point 
Button 
FCircle 
Clicked 
Circle Click Null Null 
Button 
Circle 
Clicked 
Button 
FCircle 
Clicked 
Rec-
tangle Click Null Null 
Button 
Rect 
Clicked 
Button 
FCircle 
Clicked 
Picture MouseDown Picture getFirstPoint  
Get Fill 
Circle  
First 
Point 
Get 
Circle  
First 
Point 
Picture MousebtUp Picture DrawCircle 
Button 
Circle 
Clicked 
Get Rect  
First 
Point 
Picture MouseUp Picture DrawRectangle 
Button 
Rect 
Clicked 
Get Fill 
Circle  
First 
Point 
Picture MouseUp Picture DrawFill-Circle 
Button 
FCircle 
Clicked 
Get 
Circle  
First 
Point 
Picture MouseLeave Null Null 
Button 
Circle 
Clicked 
Get Rect  
First 
Point 
Picture MouseLeave Null Null 
Button 
Rect 
Clicked 
Get Fill 
Circle  
First 
Point 
Picture MouseLeave Null Null 
Button 
FCircle 
Clicked 
With the STG, designers can select one of GIO object files 
for every finite state diagram for linking the names of input 
and output objects of each transition. For example, at the top 
of Fig. 11, the designer selects the GIO object file 
“testGIO.txt.” The information of those GIO objects in this 
GIO object file will be added into the database of the present 
finite state diagram. The names of those GIO objects are 
selected for communicating with appropriate graphic interface 
by designers. After finishing the finite state diagram, STG 
transforms the finite state diagram to a finite state table. 
TABLE II shows the transformed finite state table of 
“Drawer.” Each transition row in the finite state table are 
transformed by each transition in the finite state diagram. 
Software Processor is driven by TABLE II. Fig. 12 
demonstrates the result of the foregoing example. Users can 
use the produced program to draw some rectangles and circles. 
 
Fig. 12 The Drawer outcome of Software Processor. 
V. COMPARISON OF DESIGN APPROACHES 
In order to show the productivity improvement of this work, 
the universality of users, the time taken on development and 
the ease of maintenance of previous traditional design method, 
code generator design method and SDP are compared in this 
section. The designing flow path of the traditional design 
method is shown in Fig. 13(a). A software engineer usually 
draws a behavior chart to help him to describe the target 
program. After that, the engineer has to code the program by 
himself to get source codes. The source codes will be 
compiled to an executable program to solve the problem with a 
operating system or reasonable resources. The code generator 
design method, for example STATEMATE or Rhapsody, as 
shown in Fig. 13(b). Software engineers do not need to code 
any program by themselves anymore and the source codes are 
generated by a code generator automatically. The same thing 
with traditional design method is that the products of code 
generator are the source codes, too. Furthermore, the code 
590 Int'l Conf. Software Eng. Research and Practice |  SERP'11  |
國科會補助計畫衍生研發成果推廣資料表
日期:2012/01/18
國科會補助計畫
計畫名稱: 考量晶片溫度與效能之三維多核心系統晶片合成法
計畫主持人: 陳依蓉
計畫編號: 99-2218-E-260-004- 學門領域: 積體電路及系統設計
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
