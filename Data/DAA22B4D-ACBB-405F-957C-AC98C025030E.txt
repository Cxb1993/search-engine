I 
 
A hybrid EDA with ACS for solving permutation flow shop scheduling 
 
Abstract 
This paper proposes a hybrid Estimation of Distribution Algorithm (EDA) with 
Ant Colony System (ACS) for the minimization of makespan in permutation flow shop 
scheduling problems (PFSP-makespan). The core idea of EDA is that, in each iteration, 
a probability model is estimated based on selected members in the iteration along with a 
sampling method applied to generate members from the probability model for the next 
iteration. The proposed algorithm, in each iteration, applies a new filter strategy and a 
local search method to update the local best solution and, based on the local best 
solution, generates pheromone trails (a probability model) using a new pheromone 
generating rule and applies a solution construction method of ACS to generate 
members for the next iteration. In addition, a new jump strategy is developed to help the 
search escape if the search becomes trapped at a local optimum. Computational 
experiments on Taillard's benchmark data sets demonstrate that the proposed algorithm 
generated high-quality solutions by comparing with the existing population-based 
search algorithms, such as Genetic Algorithms, Ant Colony Optimization and Particle 
Swarm Optimization. 
Keywords: Ant Colony System; Estimation of Distribution Algorithm; Permutation 
Flow Shop Scheduling; Makespan 
2 
 
generates pheromone trails (a probability model) and applies a solution construction 
method of ACS, according to the pheromone trails, to generate members for the next 
iteration. In addition, a new jump strategy is developed to help the search escape if the 
search becomes trapped at a local optimum. Computational experiments on Taillard's 
benchmark data sets will be performed to evaluate the effectiveness of the proposed 
algorithm by comparing its performance with population-based search algorithms, such 
as Genetic Algorithms, Ant Colony Optimization and Particle Swarm Optimization. 
The remainder of the paper is organized as follows: section 2 gives the problem 
statement. The proposed EDAACS is described in section 3. Section 4 provides 
computational experiments, and the conclusion is presented in section 5. 
2. Problem Statement: PFSP-makespan 
PFSP-makespan can be denoted as Fm|prmu|Cmax using the notation proposed 
by Graham et al. [17]; given a set J of n jobs, a set M of m machines and processing 
times pij for each job j on each machine i, the problem consists of scheduling all n 
jobs at each one of the m machines. The processing sequence of the jobs must be the 
same on all the machines and each job j can only start its execution on a machine i if 
both the previous job on the same machine i and the same job j on the previous 
machine i -1 have already been processed. Furthermore, the order in which a job must 
pass through the machines is predefined and identical for all the jobs. The objective of 
this problem is to determine a job ordering that minimizes the completion time of the 
last job in the last machine, called the makespan. Although Garey et al. [1] showed 
that the problem with two-machine can be solved in polynomial time, the general case 
with m machines is known to be NP-hard. Given a permutation schedule j1, . . . , jn for 
an m-machine flow shop, the completion time of job jk at machine i , kjiC , , can be 
computed easily through a set of recursive equations: 
∑
=
=
i
l
jlji pC
1
,, 11
            i=1, 2,…,m           (1) 
∑
=
=
k
l
jj lk
pC
1
,1,1     k=1, 2,…,n       (2) 
kkkk jijijiji
pCCC ,,,1, ),max( 1 += −−   i=2,…,m; k=2,…,n      (3) 
Then makespan, Cmax, is obtained by Cmax = njmC , . 
 
3. The proposed algorithm: EDAACS  
The EDAACS algorithm follows the searching process of EDA. The main steps of 
the process of EDA are presented as follows [4]: 
4 
 
3.1 Pheromone generating rule and solution construction method 
The new pheromone generating rule is applied to generate pheromone trails 
when the local best solution is updated in every iteration. The following example 
illustrates the procedure of the generating rule. Given that the updated local best 
solution in an iteration is Π’ = (3, 1, 2, 5, 4), and let τ(i, u) denote the pheromone 
value of job u on position i, the generating rule first assigns a pheromone value, τl, to 
each job on its position in Π’, that is τ(1, 3) =τ(2, 1) =τ(3, 2) =τ(4, 5) =τ(5, 4) = τl. 
Then, for each job, the new rule assigns a pheromone value, τp, to the positions prior 
to its position in Π’ and assigns a pheromone value, τs, to the positions succeeded to 
its position in Π’. For instance, job 2 is on position 3 in Π’, so τ(1, 2) =τ(2, 2) = τp and 
τ(4, 2) =τ(5, 2) = τs. These three pheromone values, τl, τp and τs, have to be properly 
determined as to allow the pheromone trails to keep the sequence of the jobs in the 
local best solution while constructing new solutions, and the valuable information of 
the sequence of the jobs can be retained in every iteration. The following solution 
construction method will clearly illustrate this idea. 
A solution construction of an artificial ant is composed of job-selections from the 
first position to the last position for the solution. A revised job-selection rule based on 
the probabilistic action rule of Dorigo and Gambardella [3] is proposed in EDAACS. 
Given a parameter value, q0 (0 ≤ q0 ≤ 1), an artificial ant, ant k, first generates a 
random number, q, from a uniform distribution ranged [0, 1]. If q is less than or equal 
to q0, then equation (4) is used to select a job; otherwise, a probabilistic action rule 
(equation (5)) is applied to select a job.  
j = { }
)(
),(maxarg
iSu k
ui
∈
τ , if q ≤  q0                   (4) 
∑ ∈
=
)( ),(
),(),(
iSu
k
k
ui
jijiP
τ
τ , if q > q0                 (5) 
where )(iS k  is the set of unscheduled jobs of ant k positioned on job i. 
To better understand the solution construction method, the previous local best 
solution, Π’ = (3, 1, 2, 5, 4), is used, and let τl = 100, τp = 1 and τs = 110; Table 1 
summarizes the pheromone values for all the jobs on different positions. The solution 
construction method for this example is presented as follows. Job selection for 
position 1: if q ≤  q0, since )(iSk  = {1, 2, 3, 4, 5}, and τ(1, 3) = τl = 100 and τ(1, 1) 
=τ(1, 2) =τ(1, 4) =τ(1, 5) = τp = 1, job 3 (j = { }
)(
),(maxarg
iSu k
ui
∈
τ  = 3) is selected for 
position 1; if q > q0, each job j will be selected with a probability of τ(1, j)/(100 + 
6 
 
from the makespans in the filter-list, the last of the Num_Ant solutions is chosen. The 
purpose of comparing makespans, instead of job-sequences, of solutions while using 
the filter strategy is two-fold. Firstly, it may guide the search to the solution regions 
which have not been examined; secondly, it can significantly reduce computation time 
while comparing the solution constructed by an artificial ant and the solutions stored 
in the filter-list; this is especially critical when the number of jobs considered in a 
problem is large. In addition, the idea of choosing the solution with the largest 
makespan, when none of the Num_Ant solutions has a different makespan from the 
makespans in the filter-list, is that it may keep the search of EDAACS from quick 
convergence. 
Once a solution is chosen using the filter strategy, the local search method, 
NEHT_LS, is applied to improve the makespan of the solution. NEHT_LS integrates 
Taillard’s [19] Modified-NEH method with Ruiz and Stutzle’s [20] iterative 
improvement method. Given that Π is the job sequence of the chosen solution, 
NEHT_LS first randomly chooses a job k and remove it from Π; then insert job k into 
the first position, the last position, and the positions between every two consecutive 
jobs in Π to generate n different solutions, and let Π’’ be the best of the n generated 
solutions. If the makespan of Π’’ is smaller than that of Π, NEHT_LS will update Π 
with Π’’ and repeat the same procedure until Π cannot be further improved. If the 
makespan of Π is smaller than that of the local best solution, update the local best 
solution with Π. 
3.3 Jump strategy 
The main idea of the jump strategy is to guide the search to jump to another 
solution region when the search is trapped in a local optimum. We define the search 
trapped in a local optimum when the search is not able to improve the best-so-far 
solution in a number of iterations. The solution generated by the jump strategy is 
considered to be a new initial solution and the search procedure is restarted. 
Two jumping distances, objective-value distance and sequence-structure distance, 
are used in this study. Objective-value distance implies that a threshold value is set 
to guarantee that a jump is far enough from the current local best solution. We set a 
parameter, Jump-rate, to calculate the objective-value distance, objective-value 
distance = Jump-rate * objective value of the current local best solution. When a 
local optimum is detected, an objective-value distance is calculated and the 
makespans of the solutions constructed by the Num_Ant artificial ants in the current 
iteration are compared with the objective-value distance. Only the solutions that 
have makespans larger than the objective-value distance are considered to be the 
candidates for a new initial solution. If none of the Num_Ant solutions has makespan 
larger than the objective-value distance, randomly choose a solution from the 
8 
 
three trials of the EDAACS with the combination of the parameters, and Bestsol is the 
best makespan that all the research has found for the instance provided by Zobolas et 
al. [23]. 
“Please insert Table 2 about here” 
The analysis of variance (ANOVA) is applied to analyze the ARPs produced by 
EDAACS with all the 288 combinations. Table 3 presents the results of the ANOVA 
table. The results show that the filter strategy significantly affects the ARP of the test 
problems. Therefore, the Duncan's test is applied to test if the performance of any two 
levels of the filter strategy is significantly different. Table 4 presents the results of the 
Duncan's test. The results show that the major difference is seen from the level “none” 
and the other levels. In addition, although jump strategy is not significant in the 
analysis of variance, it is found, from the ARPs, that the performance of the EDAACS 
with jump strategy always outperforms the EDAACS without jump strategy, and the 
average ARP of the EDAACS with jump strategy is about 12% ((0.827-0.724)/0.827) 
better than that of the EDAACS without jump strategy.   
“Please insert Table 3 about here” 
“Please insert Table 4 about here” 
ANOVA is then applied to analyze the ARPs under the condition that the filter 
strategy and the jump strategy are applied in EDAACS. The results show that none of 
the three parameters are significant. A commonly used tool in experimental design 
[24], the response table analysis, is further applied to investigate the effect of the 
parameters. Table 5, a response table, summarizes the average ARP for each level of 
the three parameters. The minimum average ARP for each parameter is bolded, and 
the difference between the maximum average ARP and the minimum average ARP for 
each parameter is presented in the last column. The minimum average ARP for each 
parameter is: qhigh~qlow = 0.98~0.68, f-size = 18 and Jump Rate = 1.12; the condition 
is very close to the condition that generates the best solution: qhigh~qlow = 0.98~0.68, 
f-size = 14 and Jump Rate = 1.12. Since the difference between the average ARP of 
f-size = 14 (0.6444) and the average ARP of f-size = 18 (0.6401) is negligible, the best 
parameter combination for EDAACS is qhigh~qlow = 0.98~0.68, f-size = 14 and Jump 
Rate = 1.12. Furthermore, the EDAACS is applied to the same test problems under the 
condition: fixed q0 = 0.98, f-size = 14 and Jump-rate = 1.12, in order to evaluate the 
effect of variable q0. Computational results show that the average ARP produced by 
the EDAACS using fixed q0 is 0.639, which is about 9% ((0.639-0.579)/0.639) worse 
than the average ARP produced by the EDAACS using variable q0 (qhigh~qlow = 
0.98~0.68). This illustrates that using different q0 values for the artificial ants to 
construct solutions in an iteration is able to improve the explorative capability for 
EDAACS. 
10 
 
5. Conclusions 
We have developed a hybrid EDA with ACS (EDAACS) to solve a permutation 
flow shop scheduling problem, PFSP-makespan. The EDAACS, in each iteration, 
applies a new filter strategy and a local search method to update the local best 
solution and, based on the local best solution, generates pheromone trails using a new 
pheromone generating rule and applies a solution construction method of ACS to 
generate members for the next iteration. Computational experiments on Taillard's test 
problems showed that the filter strategy significantly affects the performance of 
EDAACS. This result reveals that the filter strategy is able to provide valuable 
information in every iteration. By applying the information, the pheromone generating 
rule and the solution construction method can guide the search to promising solution 
regions. In addition, although the ANOVA showed that the jump strategy does 
significantly affect the performance of EDAACS, it was found that the EDAACS with 
jump strategy dominates the EDAACS without jump strategy by about 12% on the 
average ARP. Furthermore, it was found that, under the condition with the best 
parameter combination, the EDAACS using variable q0 (qhigh~qlow = 0.98~0.68) 
dominates the EDAACS using fixed q0 (q0 = 0.98) by about 9%.  
Computational results also showed that EDAACS with the best parameter 
combination outperforms several effective population-based metaheuristics. The 
Paired T-test showed that the EDAACS significantly outperforms M-MMAS and PACO, 
two best ACO algorithms for PFSP-makespan. Although ANOVA showed that the 
EDAACS does not significantly outperform NEGAvns, HGA_RMA, PSOvns, the 
average ARP of the EDAACS dominates that of NEGAvns, HGA_RMA, PSOvns by 
9%, 5%, and 15% respectively. These results conclude that the EDAACS is an effective 
and efficient algorithm for PFSP-makespan. 
A couple of ideas deserve to be further studied. First, as mentioned above, the τ 
values, τl, τp and τs, of the pheromone generating rule and the range for the variable q0 
may affect the exploitative capability and the explorative capability of EDAACS . A 
more thorough investigation on the interaction effect of these two factors may be able 
to find the appropriate relationship between the two factors and the exploitative 
capability and the explorative capability of EDAACS . Therefore, the performance of 
EDAACS may be improved. Second, due to the limited computation times, the smallest 
structure-distance was chosen in the jump strategy in EDAACS . If the limit of 
computation time is relaxed, a study on the relationship between the structure-distance 
and the effect of the jump strategy on the performance of EDAACS is deserved. In 
addition, the EDAACS algorithm can be extended to solve other permutation 
scheduling problems. 
 
12 
 
Comput Oper Res 37(9):1584-1596 
[17] Graham RL, Lawler EL, Lenstra JK, Kan AHGR (1979) Optimization and 
approximation in deterministic sequencing and scheduling: a survey. Ann 
Discrete Math 5:287-326  
[18] Rad SF, Ruiz R, Boroojerdian N (2009) New high performing heuristics for 
minimizing makespan in permutation flowshops. Omega 37(2):331-345 
[19] Taillard E (1990) Some efficient heuristic methods for the flow shop sequencing 
problem. Europ J Oper Res 47(1):65–74 
[20] Ruiz R, Stutzle T (2007) A simple and effective iterated greedy algorithm for the 
permutation flowshop scheduling problem. Europ J Oper Res 177(3):2033-2049 
[21] Taillard E (1993) Benchmarks for basic scheduling problems. Europ J Oper Res 
64(2):278-285 
[22] Ruiz R, Maroto C, Alcaraz J (2006) Two new robust genetic algorithms for the 
flowshop scheduling problem. Omega 34(5): 461-476 
[23] Zobolas GI, Tarantilis CD, Ioannou G (2009) Minimizing makespan in 
permutation flow shop scheduling problems using a hybrid metaheuristic 
algorithm. Comput Oper Res 36(4):1249-1267 
[24] Peace GS (1993) Taugchi methods: a hands-on approach. Addison-Wesley 
Publishing Company Inc. 
[25] Rajendran C, Ziegler H (2004) Ant-colony algorithms for permutation flowshop 
scheduling to minimize makespan/total flowtime of jobs. Europ J Oper Res 
155(2):426–438 
 
Table 1.  The example for illustrating the pheromone generating rule and the solution 
construction rule 
       job 
position 
3 1 2 5 4 
1 100 1 1 1 1 
2 110 100 1 1 1 
3 110 110 100 1 1 
4 110 110 110 100 1 
5 110 110 110 110 100 
14 
 
Table 5.  A response table for the three parameters 
 Level of the parameters Differenc
e 
qhigh~qlo
w 
0.98~0.6
8 
0.96~06
6 
0.92~0.6
2 
0.88~0.5
8 
0.84~0.5
4 
0.8~0.
5 
 
 .6300 .6411 .6468 .6557 .6703 .6685 .0403 
f-size 1 4 9 14 18   
 .6717 .6578 .6463 .6444 .6401  .0316 
Jump 
Rate 
1.03 1.06 1.09 1.12 1.15 1.18  
 .6785 .6583 .6389 .6359 .6389 .6364 .0426 
 
Table 6.  Computational Results of M-MMAS, PACO and EDAACS (t30*) 
Test Problems M-MMAS PACO EDAACS 
20x5 0.11 0.2 0.04 
20x10 0.15 0.32 0.07 
20x20 0.09 0.31 0.10 
50x5 0.02 0.08 0.02 
50x10 1.3 0.9 0.75 
50x20 2.1 1.46 1.25 
100x5 0.03 0.04 0.06 
100x10 0.46 0.35 0.39 
100x20 2.59 2.17 1.55 
200x10 0.37 0.26 0.24 
200x20 2.34 2 1.58 
500x20 1.06 0.98 0.81 
Average 0.885 0.756 0.572 
*: t30 = n×(m/2)×30 millisec 
16 
 
Table 9.  Results of the Paired Samples T-Test for M-MMAS, PACO and EDAACS 
under different computation times 
Time Algorithm 
Paired Differences 
t Sig. 
Mean 
Std. 
Error 
Mean 
95% Confidence 
Interval 
Lower Upper 
t30* 
M-MMAS - 
EDAACS 
0.3100
0 
0.11091 0.06590 0.55410 2.795 0.017 
PACO - 
EDAACS 
0.1808
3 
0.05442 0.06106 0.30061 3.323 0.007 
t60* 
M-MMAS - 
EDAACS 
0.3250
0 
0.11198 0.07853 0.57147 2.902 0.014 
PACO - 
EDAACS 
0.1825
0 
0.04838 0.07601 0.28899 3.772 0.003 
t90* 
M-MMAS - 
EDAACS 
0.3283
3 
0.11471 0.07587 0.58080 2.862 0.015 
PACO - 
EDAACS 
0.2041
7 
0.05501 0.08308 0.32525 3.711 0.003 
*: t30= n×(m/2)×30 millisec., t60= n×(m/2)×60 millisec., t90= n×(m/2)×90 millisec. 
 
Table 10. Computational Results of HGA_RMA, PSOvns, NEGAvns and EDAACS 
Test Problems NEGAvns HGA_RMA PSOvns EDAACS 
20x5 0 0.04 0.03 0 
20x10 0.01 0.02 0.02 0.01 
20x20 0.02 0.05 0.05 0.01 
50x5 0 0 0 0 
50x10 0.82 0.72 0.57 0.6 
50x20 1.08 0.99 1.36 0.9 
100x5 0 0.01 0 0.04 
100x10 0.14 0.16 0.18 0.21 
100x20 1.4 1.3 1.45 1.25 
200x10 0.16 0.14 0.18 0.12 
200x20 1.25 1.26 1.35 1.3 
500x20 0.71 0.69 * 0.65 
Average 0.466 0.448 0.472 0.424 
*: The authors do not provide results for the 500 × 20 instance group. 
100年度專題研究計畫研究成果彙整表 
計畫主持人：陳春龍 計畫編號：100-2221-E-004-004- 
計畫名稱：開發新的蟻群演算法求解流程式排程問題 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 1 0 100%  
研討會論文 1 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 2 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
