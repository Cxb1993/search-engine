 2
 
In this project, we propose an efficient algorithm to improve the previous method. The MIPS (Mining 
Informative data regions by Pairwise Subtree comparison) algorithm reduces the large of redundant computation 
of similarity values by observing heuristic rules. With the necessary computation, MIPS increased the efficiency 
of mining process. 
 
 
Figure 3 : The comparison of 3 by 3 combinations individually in dynamic programming tabular 
method. 
 
 4
 
Figure 5 : Pairwise comparison of 6 sub-trees  
 
As shown in Figure 5, there is an artificial DOM [5] tree with six nodes (sub-trees) under the same parent 
node. Figure 5 illustrates the condition which is with comparison of 3 by 3 combination compared pairwisely. 
The example compares node 1 and node 4, node 2 and node 5 and node 3 and node 6 individually instead of 
comparing the combination of concatenating node 1, node 2 and node 3 between node 4, node 5 and node 6 in 
Figure 6. 
 
Figure 6 : MDR comparison of 6 sub-trees 
 
From above observing and MDR [11] previous work, The MDR [11] algorithm can be improved. There is 
an example to demonstrate the idea. Figure 8 is an example of google search result with ten data records. It is 
only showing four data records here. The data records are marked with border line to show it. While MDR [11] 
compares large numbers of contiguous DOM [5] trees, it concatenates DOM [5] trees as strings to compute edit 
distance to get the similarity between two concatenated DOM [5] trees. In Figure 9, an example of four data 
records in DOM tree, which is displayed in Figure 8. The dash lines are used to mark the regions which are used 
to compute edit distance.  
As shown in Figure 7, the dot matrix is converted DOM trees in Figure 9 to strings to display the dot matrix. 
Figure 7 is the original algorithm MDR [11] compares two generalized nodes with length two. In Figure 7, the 
black border is the MIPS algorithm to compute the necessary edit distance values. The more lengths of the 
generalized node, more computation can be saved. In the dot matrix, since only the diagonal sub-trees must be 
compared in MIPS algorithm. That is an efficiency method for save the computation cost. In Figure 7, the rows 
are presented in cascading sub-tree 1 and sub-tree 2, and the columns are presented in cascading sub-tree 3 and 
sub-tree 4. There is a backtracking path is obvious through the margins of sub-trees. It is a special alignment due 
to the heuristic. If the position of backtracking path is in diagonal of dot matrix, it presents that it aligns well. 
There are several possible paths in the dot matrix. Here is only showing the main diagonal path. By inspecting the 
sub-trees corresponding data records alignment in the dot matrix, it clearly sees that most of the backtracking 
paths are in diagonal position. Since the tag trees (DOM trees) of data records are similar. Thus, the edit distance 
values between them are also similar. It places emphasis on the backtracking path across the margins of the sub-
trees. Because, the alignment in the data records of DOM [5] trees can’t align some of data record of sibling sub-
tree. The alignment must be aligned whole sub-tree or whole sub-trees in continuous condition.  
 6
 
Figure 9 : An example of four data records in DOM tree 
 
 
2.5 Time Complexity analysis 
2.5.1 Time Complexity analysis of two algorithms 
MDR [11] wastes a lot of time on redundant computation. The situation is as shown in Figure 7. It uses 
large of computation to obtain the similar sub-tree. But it doesn’t consider the DOM [5] tree property. The time 
complexity analysis shows that MIPS is lower time complexity. Figure 10 shows the space complexity with 10 
nodes (sub-trees) under the same parent node. The length of sub-tree assumes the same. Figure 10 shows that 
MDR [11] use more space to get the same effect with MIPS. 
 
Figure 10 : The total numbers of comparison length in 10 nodes on MDR and MIPS 
 8
3.1 Web Page Structure and Content Viewer 
 
Figure 13 : Web Page Structure and Content Viewer 
 
We use web page structure and content viewer to preprocess systematic web pages because of HTML [9] 
semi-structure consists of raw data. Using document object model [5] transforms raw HTML [9] to the tree 
structure. It’s preparing data for our mining data objects. 
Where the system has loaded completely the web page, the system will trigger an event function to 
preprocess current viewing page. The preprocessing contains several steps including depth first traversal with all 
nodes in DOM [5] tree, using a unique identifier to each node in DOM [5] tree with depth first traversal order, 
and computing the height of each node in DOM [5] tree. 
By traversing depth first search order with all nodes in DOM [5] tree, the system save the HTML [9] tag 
name to perform XUL [21] tree structure. The XUL [21] tree structure in system is used to display the 
hierarchical relation in DOM [5] tree such as parent-child, left sibling and right sibling. There are two kinds of 
node in Document object model [5], element node and text node. Element node usually composes of HTML [9] 
tag, and text node only contains text. 
 
Figure 14 : An example of document object model tree 
 
 
Figure 15 : An example of content tree 
FONT 
color=CC0033 
 
As long as 
 
HTML
HEAD BODY
TITLE DIV FONT
SPAN
SPAN
 10
4. EXPERIMENT 
In order to perform the efficiency of MIPS algorithm, Section 4.1 compares two algorithms with real 
execution time on popular auction web site. 
4.1 Execution time of MIPS and MDR 
The experiments are consist of Pentium 4 3.2GHz PC with 1.5GB RAM. The system is implemented in 
JavaScript. There is an experiment that compared MDR [11] and MIPS with five popular auction pages such as 
yahoo tw, ruten, Amazon, hinet and roodo. Table 1 shows the urls of above web sites. 
 
Table 1 Auction web site and url of web site 
Auction web site Auction web site url 
yahoo tw http://tw.bid.yahoo.com 
ruten http://www.ruten.com.tw 
Amazon http://www.amazon.com 
hinet http://hibid.hinet.net 
roodo http://auction.roodo.com 
 
The experiment consists of ten “3C” products such as cpu, pda, ipod, wifi, Bluetooth, camera, switch, notebook, 
ram and LCD. The second experiment compared MDR [11] and MIPS with four blog web sites. The third 
experiment compared five digital archive web sites. These experiments compared execution time of two 
algorithms. Figure 17 to Figure 18 shows the execution time of auction sites. MIPS algorithm has better 
performance than MDR [11] obviously. As illustrated in Figure 18, there are some exceptions of the comparison 
of two algorithms. In these exceptions, MDR [11] is quicker a little than MIPS that is because the data records is 
too few in that case. Besides, all of experiments show that MIPS algorithm has better performance. 
 
 
Figure 17 : Execution time (seconds) on yahoo tw auction site 
 
 
Figure 18 : Execution time (seconds) on roodo auction site 
