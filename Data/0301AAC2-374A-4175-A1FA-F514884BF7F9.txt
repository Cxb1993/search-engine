中文摘要 
排課問題為一個資源與時間表之匹配問題；資源包含了教師、教室與班級，
時間表即為課表。其目的是在不違背各項資源的要求之下，將各資源指派至課
表。某些排課問題已被表示為最佳化問題，透過現有技術已有相關的決解方案，
例如啟發式演算法。雖然該問題已有多年研究，但仍缺少針對使用者行為所設
計的解決方案。因此，我們應用賽局理論中的均衡概念，並模擬現實生活中參
與人自私的行動決策方式以尋求滿足均衡的解答。在我們的問題描述中，老師
被視為行動的決策者。透過不斷的與其它教師交換授課時間以提高各老師對課
表的滿意度。當所有老師沒有辦法再找到更有利的交換時，這個解答或許不是
個最好的配置，但卻能讓所有人滿意。這就是納許均衡的概念。就計算理論而
言，求出一個滿足納許均衡的解答是一項非困難的工作。因此我們轉由另一個
較容易達到的類似概念來著手 – 柏拉圖最佳解。同時，加入了一項用來提高老
師可交換授課對象的數目與解答多樣性的參數”風險評估”。在最後的模擬結果
中顯示，平均而言該參數確實能協助提高 25%的計算效率。 
 
關鍵字詞：排課問題、納許均衡、柏拉圖最佳解 
 
英文摘要 
 A timetabling problem composes of a time table and a set of resource, such as 
teachers, students, and rooms. The scheduler must find an allocation without 
violating the requirement of each resource. The problem can be formulated as an 
optimization problem and solved by heuristic methods. Since this problem had been 
studied for a long time, fewer researches focused on the participators’ behaviors. We 
adopt the selfish concepts of all participators in Game Theory. Each teacher is 
treated as a participator in our model. All teachers continuously exchange the 
allocated time slot with others’ for maximizing its revenue until no more feasible 
exchange exists. Once we can find a solution that each participator accepts, this 
allocation is a Nash Equilibrium (NE). Even an NE solution may not be the optimal 
solution, but it is satisfied with all participators. Unfortunately, finding an NE 
solution is a PPAD-hard. Thus, we adopt another concept, Pareto Optimal. Moreover, 
we design a parameter “risk” to increase the number of exchange candidate and the 
diversity of solution. The simulation results show that not only solution quality but 
computation efficiency are improved. 
 
Index Terms：Timetabling Problem, Nash Equilibrium, Pareto Optimal 
Solution 
1. Sequential method. Events are assigned into valid time periods with-
out conflict according to their relationship. Once events represent ver-
tices and time conflicts are edges, timetabling problem can be reduced to
a vertex coloring problem [3]. Burke et al. propose a heuristic method to
find an improvement based on backtracking [4]. This method improves
the solution quality about 25% approximately.
2. Cluster Method. Events are grouped without any violation of their
constraints, and the groups are called clusters. The groups are as-
signed into time periods to satisfy the soft requirements as more as
possible. The grouping method will directly affect the solution quality
[7]. Myszkowski and Norberciak adopts crossover and sieve to search
out solutions [8]. According to the simulation, their algorithm can bet a
better solution in average, and it also can escape from local optimization
solutions.
3. Constraint-based Method. All requirements of events can be classi-
fied into hard and soft constraints. Hard constraint must be satisfied,
and the soft constraint can be used to evaluate a solution. Yakhno and
Tekin built a graph with backtracking, called back-jumping, and Branch-
and-Bound as their search methods [9]. Once the method reaches a so-
lution, it records the quality in database and jumps back to seek another
one.
2
‧
‧
‧
‧
‧
‧
‧
‧
‧
‧
‧
‧
)(coc clsk )(tct
cls
k )(crr
cls
k
Figure 1: An example of timetable of class cls.
cco , teacher ttc, and room rcr in the k-th time slot respectively. The elements
are 0 or 1. Once the value equals to 1, it means the resource is assigned to
the k-th time slot.
We define five hard constraints.
1. A teacher ttc teaches a class classcls at a time
m∑
cls=1
tclsk (tc) ≤ 1,∀ttc ∈ Teachers, at any time slot k
tclsk (tc) =
 1, if teacher tc teaches class cls at time slot k0, otherwise.
2. A room rcr is assigned to a class classcls at a time
m∑
cls=1
rclsk (cr) ≤ 1,∀rcr ∈ Rooms, at any time slot k
rclsk (cr) =
 1, if room cr is assigned to class cls at time slot k0, otherwise.
4
1. A teacher should not teach continuously. Suppose a main subject
teacher who usually has more than 20 courses in a week. The teacher
will probably be too tired after teaching continuously for a long time.
cs1(S) =
o∑
tc=1
5∑
d=1
(
4∑
e=0
exp(lttdtc(e)) +
8∑
e=5
exp(lttdtc(e)))
lttdtc(e) = k, where k is the continuously courses of teacher tc
after time slot e on day d
The function lttdk(d) is used for calculating the amount of continuous
courses with three parameters, tc for a specific teacher, d for weekday,
and e for slot. Since there is a break in the afternoon between the 5-th
and the 6-th time slot, the continuous courses will be counted separately.
2. A subject should not be taught to the same class continuously.
Once a class is taught by the same subject continuously, the concen-
tration of students goes down. Suppose a class classcls is taught by
subject cco at weekday d with lct
cls
co (d) continuous time slot. The penalty
function is :
cs2(S) =
m∑
cls=1
n∑
co=1
5∑
d=1
exp(lctclsco (d))
lctclsco (d) = k, where k is the number of continuous subject cco at day d
3. A class should not have too much jumping courses. A jumping
course means a subject which is taught more than two slots without
continuous hours in a day. A jumping course causes confusion and is
hard to keep students concentration. For the teaching quality, there is
6
6. Physical Education should not be arranged right before noon.
The weather is hot during most of a year in Taiwan. According to
our research target, this issue protects students from being taught by
physical education at noon.
cs6(S) = con()×
m∑
cls=1
5∑
d=1
(ccls9(d−1)+4(PE))
cclst (PE) =
 1, if the course of class cls at slot t is physical education0, otherwise.
The soft constraints can be classified as two types: cs1 to cs4 are general
rules, and cs5 and cs6 are personal. In that case, we square the former four
rules for highlighting their importance. The improved objective function is
defined as follows.
cs(S) =
4∑
i=1
csi(S)
2 +
6∑
i=5
csi(S)
8
Algorithm 1: BasicAlgorithm
Data: S is an initial solution, and T is a set of all teachers
Result: S′ is a better solution that no exchange between two teachers is available
begin1
Q←− enqueue(T )2
while Q 6= ∅ do3
t←− dequeue(Q)4
k ←− ImprovementSearch(t, S, T )5
if k 6= null then6
S ←− Swap(S, t, k)7
if Q′ssize < T ′ssize then8
Q←− enqueue(T )9
end10
S′ ←− S11
end12
Algorithm 2: ImprovementSearch
Data: t is a teacher, S is a current solution, and T is a set of all teachers
Result: k is a best coworker who can exchange with t for the best revenue
begin1
k ← null2
maxRevenue← 03
for x ∈ T and x 6= t and x teaches a class as t does do4
revenue← availableSwap(x, t)5
if revenue > 0 and revenue > maxRevenue then6
maxRevenue← revenue7
k ← x8
end9
return k10
end11
10
Algorithm 4: ImprovedAlgorithm
Data: S is an initial solution, and T is a set of all teachers
Result: S′ is a better solution that no exchange between two teachers is available
begin1
Q←− enqueue(T )2
while Q 6= ∅ do3
t←− dequeue(Q)4
k ←− ImprovementSearch(t, S, T )5
if k 6= null then6
S ←− Swap(S, t, k)7
enqueue(t, Q)8
enqueue(k,Q)9
end10
S′ ←− S11
end12
3.2 Reciprocal Exchange
For finding an exchange which is the best for each exchanger is not easy. A
small increasing penalty of other individuals could increase the total penalty,
but this exchange will help for escaping from a local optima. We propose
another mechanism, called reciprocalExchange() as Algorithm 5 shows, to
implement this concept.
12
4 Experiments
The timetabling requirements of Concordia Middle School, Chiayi County,
Taiwan, are used as our real world data. We evaluate our algorithm for (1)
the exchange order affects the running time, (2) the relationship between
the penalty calculation and the solution quality, and (3) the local optimal
solution escape through reciprocal exchange.
4.1 Running time
We simulate fixed and random order when enqueueing all teachers. The
fixed order is arranged by teachers’ overall teaching. All teachers are pushed
into Q according to the fixed order. As table 1 shows, the fixed order leads
to a static result. Thus, we run the algorithm with random order five times
and the average result shows at the bottom.
Teachers’ Order Serial No. Running Time (s) Penalty
Static 1 341 500
Random 1 303 465
Random 2 290 460
Random 3 307 472
Random 4 272 457
Random 5 275 497
Random Average 289.4 470.2
Table 1: Running time comparison
Random order can reduce 15% running time approximately, and the
penalty also decreases. The result is better since the random order assists
14
4.3 Reciprocal exchange
We show that the reciprocal exchange helps to escape from a local optimal
solution to get a better one. Table 3 shows the penalty without “reciprocal
exchange,” called Pareto optimal search, and the penalty with “reciprocal
exchange.” The penalty of reciprocal exchange is better because “risk” can
find more candidate. Intuitively, increasing “risk” will increase the diversity
of solution, but the efficiency decreases. We set “risk” as 0.1 which gets a
solution with least penalty by observing simulations.
Method Running Time (s) Penalty
Pareto Optimal Search 341 500
Reciprocal Exchange 367 461
Table 3: Reciprocal Exchange
4.4 Analysis
We compare the result of ordered Pareto optimal search including our im-
proved method with reciprocal exchange. The first result is implemented by
Pareto optimal search with the fixed order and arithmetic penalty comput-
ing. The second result is produced by the same initial solution as first, using
our improved method with random order and geometric penalty computing.
Table 4 shows the result. The violation field is constructed by the same way
as Table 3.
Running time is improved approximately 25% in average because the
random order will decrease redundant exchanges. The penalty of reciprocal
16
5 Conclusion
We propose a constraint-based timetabling model for high school timetabling
problem. The hard constraints are the must-be-followed rules and the soft
constraints represent the penalty functions. We design an algorithm that can
quickly generate a timetable, which is designed for reducing the penalty of
all teachers. The solution reaches Pareto optima in the final which means all
teachers can not improve their results with single exchange.
To improve efficiency, we use a reciprocal exchange method for the queue
maintenance, which reduces the non-necessary query. To escape from a local
optimal, we introduce a risk parameter. The function with risk increases
the variety of solutions, because an exchange can increase the utility of the
teacher who offer the exchange. Furthermore, each teacher has a chance for
improving her utility. Our solution is considered with both efficiency and
quality, and the solution is a Pareto optimal solution which means all the
teacher can not unilaterally benefit.
18
