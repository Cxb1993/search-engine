 2
 
Abstract 
We present new variants of RSA whose key generation algorithms output two distinct RSA key 
pairs having the same public and private exponents. This family of variants, called Twin RSA, 
can be used in scenarios that require two instances of RSA with the advantage of reducing the 
storage requirements for the keys. Two applications for Twin RSA, blind signatures and 
authentication/secrecy, are proposed. In addition, we also provide the security analysis of Twin 
RSA. Compared to normal RSA, the security boundary should be raised when applying Twin 
RSA to the types of Small-d, Small-e and Rebalanced-RSA. 
Keywords: Cryptography, encryption, lattice basis reduction, LLL algorithm, rebalanced 
RSA, RSA, Twin RSA. 
中文摘要 
我們提出一種新的 RSA 變形設計，能夠`產兩組 RSA 密碼系統，具有相同的公開金鑰與私
密金鑰，但是使用不同的 RSA 模數。我們稱這樣的 RSA 密碼系同為 Twin RSA。Twin RSA 
可以用在許多需要兩組 RSA 密碼系統的情境上，以節省金鑰儲存的空間。我們並提出了兩
種 Twin RSA 的應用：盲簽章與認證保密協定。此外，我們也對 Twin RSA 做完整的安全
分析。與傳統的 RSA 密碼系統比較，不論用 Small-d, Small-e 或是 Rebalanced-RSA 的形式
去設計 Twin RSA，其安全邊界條件都需要被大大提高。 
 4
2) Randomly select an (n/2 - ne)-bit integer y2 such that p2 = x1y2 + 1 is prime. 
3) Randomly select an ne-bit integer y1 such that q1 = y1y2 + 1 is prime. 
4) Randomly select an ne-bit integer e such that gcd(x1x2y1y2; e) = 1. Compute d and k1 satisfying 
ed = 1 + k1(p1- 1)(q1 -1). 
5) If q2 = k1x2 + 1 is not prime then go back to step 4. 
6) Let N1 = p1q1, N2 = p2q2, and k2 = y1. 
Output: (e; N1; N2) and (d; p1; q1; p2; q2).  
 
B. Twin RSA-Small-d (Scheme II) 
The second scheme we consider is Twin RSA with small private exponent, which we call 
Twin RSA-Small-d. The key generation algorithm takes (nd, n) as input (with nd < n/2) and 
outputs a valid public/private key pair with an nd -bit private exponent and two n-bit moduli. 
The key generation algorithm for Twin RSA-Small-d is exactly the same as the key generation 
for Twin RSA-Small-e, except replacing e, ne and d with d, nd and e, respectively. This follows 
from the symmetry of e and d in the key equations. Thus, the correctness and efficiency of 
generating Twin RSA instances with small private exponents are the same as shown in the 
previous section for Twin RSA-Small-e 
 
Security Analysis: 
We use the techniques of lattice attacks and continued fraction attack to analyze the security of 
our proposed schemes. The related work can be referred to some previous attacks, such as [1]-[4], 
[6]-[8], [10], [20], [21]. In the following we just provide the summary of our results after 
analyzing. 
Summary for Scheme I: 
To summarize, in order to avoid all the known attacks on Twin RSA-Small-e, allowing an 
exhaustive search with parameter ℓ, the size of the public exponent should satisfy: 
ne + nd > 5n/4 + ℓ/2, 
which simplifies to 
ne > n/4 + ℓ/2, 
when the private exponent is the same size as the moduli. Also, in the case that k1 and k2 might be 
known to the adversary, the public exponent should also satisfy 
ne< n/2 - ℓ, 
to avoid the attack 
Security for Scheme II: 
 6
to Bob. Eve intercepts the ciphertext c and sends 
c0 = rec mod N 
to Bob asking for a blind signature. Bob computes the signature of c0 with his private key (d; N) 
and sends 
m0 = c0d mod N 
back to Eve. Finally, Eve can compute Alice’s message m since 
m = r-1m0 mod N. 
Thus, Bob should not use the same RSA key pair for both encryption/decryption and signing 
blind signatures. 
Therefore, any user wishing to use RSA for both encryption/decryption and generating blind 
signatures should have a different key pair for each usage. Using Dual RSA or Twin RSA in this 
scenario will thus allow the user to reduce the amount of information needed to be stored for the 
key pairs. 
 
B. Authentication/Secrecy 
The second application we consider is authentication/secrecy. In particular, we consider 
solutions to the reblocking problem of RSA signatures. The reblocking problem arises when 
RSA is used to first sign and then encrypt a message to ensure both authenticity and secrecy of 
the message. 
Suppose Alice and Bob know each other’s public keys. Alice wishes to send a message m to Bob 
such that Bob, upon receiving m, is confident that Alice sent the message (authentication) and 
Alice is confident that only Bob can read the message m (secrecy). To accomplish this, Alice 
computes c by first signing the message with her private key (dA; NA) and then encrypting the 
signature with Bob’s public key (eB; NB). She then sends 
c = (mdA mod NA)eB mod NB 
to Bob. Since c is encrypted with Bob’s public key, Alice is confident that only Bob can decrypt 
the ciphertext. After decrypting the ciphertext with his private key, Bob then encrypts the result 
with Alice’s public key. If the final result is something meaningful, then Bob can be confident 
that only Alice could have created it since only she has knowledge of her private key. Thus, the 
transmission ensures both authenticity and secrecy. However, Bob is not guaranteed to recover 
the original message m (or anything meaningful at all) if Alice’s RSA modulus NA is greater than 
his RSA modulus NB. In this case, when Bob decrypts the ciphertext he obtains (mdA mod NA) 
mod NB which might be different than (mdA mod NA). This is the reblocking problem as originally 
identified by Rivest, Shamir and Adleman. When NA > NB, the probability that Bob cannot 
 8
Table I. Memory Requirements for Small Exponent RSA. 
Variants Twin RSA 2 × RSA 
Type Small-e Small-d Small-e Small-d 
|N1| + 
|N2| 
2 × n 2 × n 2 × n 2 × n 
|e1|+ |e2| 
n/4 + 
ℓ/2 n 17 2 × n 
|d1|+ |d2| N n/3 2 × n 2 × 0.29n 
III. Conclusions 
 
The motivation for Twin RSA is to reduce (key) storage requirements in systems that require two 
instances of RSA while retaining as much of the functionality as simply using two instances of 
RSA (e.g., using small public or private exponent, using small public and CRT-exponents). 
We show the minimal memory requirements for three RSA variants, including Twin RSA, and 
two instances of RSA (2×RSA), in Table I. For each variant we also consider two types, 
including Small-e, and Small-d. The modulus form we consider here is the product of two 
prime-factors, i.e. N = pq. For the case of multi-power (or multi-prime) modulus, e.g., N = p2q, 
Twin RSA still can be designed with multi-power (or multi-prime) moduli to achieve the 
purposes of saving memory requirement and efficient encryption & decryption. Tables I shows 
the number of bits needed to store both public and private keys as a function of the bitlength of 
the moduli N1 and N2. Notice that in 
 
 the case of 2×RSA, we may choose the same public exponent e (usually set e = 216 + 1) for 
Small-e type in order to save the memory requirement. However, we do not suggest using the 
same private exponent in the case of Small-d type for 2×RSA due to the security consideration. 
As can be seen in the security analysis of Twin RSA, using the same private exponents results in 
the requirement of higher security boundary against small exponent attacks. Up to now there is 
no discussion about whether using the same small private exponents in 2×RSA is secure or not. 
Thus we use two different small private exponents in 2×RSA with Small-d type. It is an 
interesting problem to look at security bounds when using the same small private exponents in 
2×RSA.  
As can be seen in Table, Twin RSA requires the least amount of memory when using a small 
public or private exponents compared with 2×RSA. 
