2裂時，傳遞資料時就會發生錯誤，並產生
路徑錯誤封包(Route Error)，並且移除此路
徑(routes)上所用的節點與連結，再以原先
這條路徑反方向的方式廣播到基地台，告
知此路徑上的節點與連結發生錯誤，不可
再使用這條路徑(route)，並且重新啟動一次
路徑尋找(Route discovery)程序的初始化。
( 二 ) MPD演算法[ 4 ]
當路徑發生斷裂的情形，就必須重做
路徑發現(Route Discovery)這個程序，如此
一來會花費更多的電力。如果能採用多條
路徑來傳輸資料，就能加速資料的傳遞和
增加整個網路的穩固性，並適當的將每個
點在傳輸時需花費的電力的做適當的負載
平 衡 ， 所 以 有 Mutipath Disjoint
Routing(MPD) 演算法的提出[4]，以下是其
演算法的概述：
當有一節點 Source N1 想要建立到達
另一節點 Destination N9 的路徑時，如圖 1
所示，會先以 Flooding 的方式廣播路徑搜
尋封包(Route Search packet)，直到到達目
的地時，就會產生一組路徑回覆封包
(Routing reply)，以原來反方向的方式朝
Source傳回，所以當 Source每接收到一個
路徑回覆封包(Routing reply)，就表示產一
生條路徑，用這種方式建立多條路徑，就
能利用建立好的多條路徑做資料的傳輸，
不但加強了整體的網路輸出，也減少了傳
輸時，發生碰撞的可能性，如果不是所有
的路徑的產生異常的話，就能繼續傳送資
料，所以也加強了整個感測網路的穩固性。
圖 1 MPD Routing Discovery [4]
雖然 MPD 這個演算法可以解決採用
單一路徑傳送資料的問題，如:加強了傳輸
資料時的穩固性與負載的平衡，但是在多
條路徑的非交集的部份，卻沒有明確的定
義與說明，一但找到路徑重覆的感測點數
過多，如果採用這些重疊路徑來傳輸資
料，那麼就無法有效的將各感測節點電力
的負載平衡，也有可能迅速的將那些重疊
性高的感測節點的電量耗盡，導致整個感
測網路的生命週期縮短的可能，所以我們
提出一個改良的演算法來處理這種情況的
發生。
要找到多條非交集路徑，可以使用
Multi-Dijkstra 演算法[5]的方式:將 Dijkstra
演算法以遞迴的方式，讓兩個點找尋到多
條非交集的路徑，如下圖所示，感測節點 S
到感測節點 D，假設先走 S-F-K-D，並把中
間 F、K這幾點從可能成為路徑中間節點中
刪除，接下來是 S-C-H-J-D，並把中間節點
C-H-J刪除，直到節點 S沒辦法透過中間節
點到達感測節點 D時，這時才停止此演算
法，因此利用此演算法找到多條非交集的
路徑。
圖 2 Mutli-dijkstra的範例[5]
三、研究方法
我們對於整個感測網路所提出一個演
算法內容如下所述:大致上也是分為兩大步
驟，分別是路徑尋找(Routing discovery)與
路徑維護(Routing maintenance)，路徑尋找
的部份，對每個感測節點廣播路徑請求封
包(Routing request)，接收到廣播封包的節
點，若有符合 Sink 需求的資訊，則尋找回
到 Sink 的路徑將資訊傳回源端(Sink)，我
們利用Multi- Dijkstra的方式找尋多條非交
集的路徑(找尋跳躍數(hop))，依照路徑長
短排序，再以各條路徑的最低殘餘電量做
篩選考量。我們定義最低殘餘電量：「每
條路徑中所經過節點的最小節點電量」。
如果前兩條路徑的最低殘餘電量低於我們
限定的門檻值，就不選擇這條路徑，然而
4下：
)2()()(
)1(),( 2
kEkEkE
dkkEdkE
elecelectRxRx
ampelecTx




其中， ),( dkETx 表示傳輸資料封包所
消耗的電量， )(kERx 表示接收資料封包所
消耗的電量。
(二) 模擬結果與分析
1. 封包傳送成功率 (Packet delivered
rate)：縱軸是封包傳送成功率，橫軸是節
點個數。由此圖我們可以看出在封包傳送
成功率上，由於採用多條非交集路徑來傳
送封包，所在能有效避免碰撞，並有效的
提升封包傳送成功率。
圖 3封包傳送成功率
2. 平均電力消耗(Averge Residual
energy )：縱軸是所有節點的總電力百分
比，橫軸是回合(時間)數。由圖可知道，三
種演算法之下，EMPDR的電力消耗，可以
使整體的耗電下降，因為當有路徑斷裂
時，可以使用原本的備份條路徑取代，而
不用再做尋找路徑的動作，因此在平均電
力的消耗上有不錯的表現。
圖 4平均電力消耗
3. 平均接收封包數(Average receive packet):
由於本演算法採用尋找非交集路徑來傳遞
資料封包，我們以每十回計算一次所接收
到的封包數做為比較的單位，從下圖可以
看出本演算法所接收到的封包數比DSR與
Flooding來得多。
圖 5平均接收封包數
參考文獻
[1]Akyildiz, I.F., Weilian Su,
Sankarasubramaniam, Y., “A survey on 
sensor networks”, IEEE Communications 
Magazine, Volume 40 , Issue 8, Aug.
2002, pp.102–114.
[2]David B. Johnson and David A.
Maltz, ”Dynamic Source Routing in Ad 
Hoc Wireless Networks ”, Mobile
