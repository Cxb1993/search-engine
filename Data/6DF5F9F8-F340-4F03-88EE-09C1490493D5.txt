¾ 線上遊戲模組：含麻將等三十多款遊戲。 
¾ 手機遊戲模組：含麻將等數款遊戲。 
¾ 無線 PDA 遊戲模組：含麻將等數款遊戲。 
在管理上，本公司利用技術的優勢，來開發許多管理工具來協助管理，這也是可以維護如
此多的會員人數的原因之一。 
在 EIP 方面，群想網路科技開發了以下產品： 
¾ 社區模組：社區模組可協助網站經營者與網友互動或促進網友們之間的互動。 
模組含會員系統、留言板、電子報、討論區、佈告欄。 
¾ 電子商務模組：電子商務模組是協助公司導入電子商務，簡化運作流程，降
低營運成本。模組含廠商資訊、新消息發佈系統、WAP 相關技術與產品研發。 
群想網路科技由於擁有優良的技術團隊，在國內算是少數專以技術開發為重心的公司。因
此，在技術的發展上可說是不遺餘力。在遊戲平台上，本公司已經取得與許多知名的網站
合作計畫，如台灣新浪，香港新浪，美國新浪，Hinet，尋夢園網站等。目前尖峰時刻的同
時上線人數接近 10,000 人，會員人數更高達 1,000,000 人，可說是國內相類似遊戲的廠商
中極為成功的一家。網址在：http://www.cycgame.com。其他產品也都有相當不錯的成績。
在企業入口網站方面（Enterprise Information Portals，EIP），也獲得桓基科技等公司
的 EIP 計畫專案。 
 
研究摘要(500 字以內)： 
 
近年來，新的 Java 平台的執行效能已經大有改善，足以應付遊戲開發所需。然
而，舊版本的 Java 1.1 仍有將近三分之一的使用者，而其繪圖效能不彰，無法用來
執行高度仰賴繪圖效能的遊戲。實務上，Java遊戲開發人員，尤其是開發 Java Applet
網頁遊戲的人，都必須考量這一點，讓他們的遊戲能在大多數的電腦上執行，也因
此受到不少限制。 
 
為了解決這個問題，本計畫開發了一個具可移植性的視窗工具程式架構，稱為
CYC 視窗工具組（CYC Window Toolkit，簡稱 CWT）。CWT 擁有下列特性：（一）使用
DirectX 來繪製視窗元件，因此，能讓 Java 1.1 的應用程式或 Applet 程式獲得高
繪圖效能。（二）支援 AWT/Swing 相容的元件介面，因此，現有的 Java 1.1 遊戲可
以輕易地改用 CWT。（三）定義了一個通用的架構，可以抽換底層繪圖實作，如 Java 
AWT、DirectX或OpenGL；也能支援不同種類的虛擬機器，如Java虛擬機器或者是.NET 
CLR；支援跨平台的特性，因此可以在 Windows、Mac OS、Unix類型的作業系統中執
increasingly popular due to its higher productivity and portability than C/C++. With the growing 
of the Internet, the Java applet together with its high portability – write once, run anywhere – 
becomes popular on the Internet. These advantages make Java become a candidate for the 
mainstream languages for game developments. For example, Yahoo! Games [2], and CYC games 
[3] use Java.  
However, most of the above Java games are low profile games1, because Java programs 
normally have lower performance, especially in graphic user interface (GUI) components, also 
called widgets, which has made game developers hesitant to use it for high profile games. Since 
most game programs, especially high profile games, have intensive GUI operations, such as 
animation or complex scenes, it is critical to reach high rendering performance.  
For high rendering performance, DirectDraw and Direct3D of Microsoft DirectX (or 
DirectGraphics in DirectX 7.0 and beyond) [5] or OpenGL (Open Graphics Library) [6] are 
commonly used to access specialized hardware features. Thus, an important topic for high profile 
game programs in Java is to incorporate DirectX or OpenGL into Java GUI design.  
In order to improve rendering performance, Sun started to access specialized hardware features 
via DirectX in J2SE 1.4 [7] and OpenGL in J2SE 5.0 (or 1.5) [8]. At the same time, much past 
work has been done to solve the performance problem in Java, such as Java binding for OpenGL 
API (JOGL) [9], The Lightweight Java Game Library (LWJGL) [10], and Java 3D [11]. However, 
many of these solutions are supported on the Java 2 platforms only. Unfortunately, Microsoft Java 
Virtual Machine (MSVM) [12], which is in Java 1.1.4, is currently used by about 31.0% of 
browser users (calculated from the statistical data in [13] during the latest two months), while the 
percentages of JRE 1.4.x and JRE 1.5.0 are 24.5% and 41.8%, respectively. Thus, for game 
programmers, it is still important that applet games can be played in most environments.  
In this research, our approach is to enhance the graphics performance of Java 1.1 by using 
DirectX or OpenGL to render all widgets, figures, images and texts. We propose a window toolkit 
called the CYC Window Toolkit (or CWT), a fast-rendering lightweight GUI toolkit which renders 
all its widgets via native graphics libraries. In addition, the CWT also has the following features:  
z Support AWT/Swing compatible widgets. Hence, the CWT can be easily applied to existing 
Java games. 
z Define a general architecture that supports multiple graphics libraries (Java AWT, DirectX 
and OpenGL), multiple virtual machines (JVM and .NET CLR), and multiple platforms 
(Windows, Mac OS, UNIX-based OSs, etc.). 
z Provide programmers with extra APIs to directly manipulate DirectX objects and other 
game-related properties. Therefore, advanced programmers can control abilities of the 
DirectX without waiting for functionalities supported by Sun. 
                                                 
1 Low profile and high profile games are defined in [6].  
available graphics libraries and choose one in runtime automatically. Second, programmers can 
also designate an implementation to use. If designated libraries are unavailable, the CWT uses 
CWT-AWT instead. 
 
3. EXPERIMENTS 
 
In this section, we designed a set of test programs as our benchmark to analyze the rendering 
performance in different rendering environments, defined in the Rendering Environments 
subsection below. All the test programs were run on a personal computer with the following 
specification: AMD K7 Barton 2500+ CPU, 1GB DDR400 RAM, and an nVidia Geforce 4600 
graphics card with 128MB VRAM. The driver version of the graphics card was ForceWare 66.93. 
The machine ran on Microsoft Windows XP Professional Edition with service pack 2. The 
display resolution was 1280×1024 true color mode, and font anti-aliasing was disabled.  
 
3.1 Test Programs 
 
Figure 2. Transparent and opaque images for testing. 
 
The test programs open windows with size of 600×300 and render moving images, texts, and 
figures 20000 times in each different rendering environment, as follows.  
1. Images: Use a 110×110-pixel transparent image and a 110×110-pixel opaque image, as shown 
in Figure 2. The transparent image is mirrored in runtime for the mirrored image tests. 
2. Texts: Use the simple string, “Running”, with font size of 12 pixels. Then, use four randomly 
generated Chinese characters each time to simulate a chat system and to test the efficiency of 
the text cache mechanism of J2SE 1.4 and beyond.  
3. Figures: Fill rectangles with 110×110-pixel area and circles with 110-pixel diameter.  
In brief, for each rendering environment, we use seven test programs respectively rendering the 
following items: (1) transparent images, (2) opaque images, (3) mirrored transparent images, (4) 
simple strings, (5) random strings, (6) rectangles, and (7) circles.  
 
3.2 Rendering Environments  
 
In our experiments, consider several different rendering environments for our test programs, as 
For test programs in Java, consider the following four kinds of Java rendering environments:  
1. The original Java AWT using the normal image objects. In this case, use different JVMs, Sun 
JVM 1.1 to 6.0 and MSVM, whose rendering environments are identified as AWT-J1 to 
AWT-J6 and AWT-JM, respectively.  
2. The original Java AWT using managed images supported by J2SE 1.4 to 6.0. The tests run 
with default settings, i.e. no system properties were set, which are identified as AWT-J4M to 
AWT-J6M. On the other hand, when translucency acceleration is specifically enabled (by 
setting both sun.java2d.translaccel and sun.java2d.ddforcevram system properties to 
true) [14], we identify them as AWT-J4MS to AWT-J6MS. 
3. The CWT with the AWT implementation as described in the Architecture of the CWT section. 
In this case, use different JVMs, such as Item 1, whose rendering environments are identified 
as CWT-J1 to CWT-J6 and CWT-JM, respectively. Like Item 2, the versions using managed 
images are identified as CWT-J4M to CWT-J6M and CWT-J4MS to CWT-J6MS. 
4. The CWT with the DirectX implementation as described in the Architecture of the CWT 
section. This item is identified as CWT-DX3.  
For simplicity, we use the wild card “*” to indicate a group of rendering environments. For 
example, AWT-* (or AWT-J*) includes the first and second kinds of rendering environments; 
AWT-J*–AWT-J*M* includes the first kind of rendering environments only (excluding those 
AWT-J*M and AWT-J*MS); AWT-J*M* includes the second kind of rendering environments.  
 
3.3  Analysis 
 
The experimental results are shown in Table 1. We analyze these results by the following three 
comparisons: (1) CWT-DX3 versus C-DX, (2) CWT-DX3 versus AWT-*, and (3) CWT-J* versus 
AWT-*.  
 
CWT-DX3 versus C-DX 
In general, the performance of CWT-DX3 is, on the average, about 19.8% (or 64.9 ms) slower 
than those in C-DX. The overhead is generally acceptable. Thus, Java game programmers can 
rely on the CWT to reach high performance (close to that in C/C++) without writing native code 
to get the benefit of native graphics libraries.  
 
CWT-DX3 versus AWT-* 
The analysis of comparison is summarized as follows.  
z When compared with AWT-JM and AWT-J1, CWT-DX3 is much faster for rendering images, 
but slower for rendering rectangles and circles. In text rendering tests, CWT-DX3 is faster 
than AWT-J1, but slightly slower than AWT-JM.  
3.4  Real Application 
 
We have applied the CWT to one Internet applet game, Mahjong, developed in Java 1.1 by [3] 
and tested the rendering performance, as shown in Figure 3. The window size of the game is 
760×580. The tested game panel consists of about 100 transparent images (half of the images are 
rotated and scaled in runtime), about 80 characters, 25 rounded corner rectangles, and 10 
rectangles. Each of the tests is performed by rendering the whole game panel 10000 times.  
The results for the benchmark are listed in Table 2. CWT-DX3 improves the rendering 
performance by a factor of 7.58 when compared with AWT-JM, and by a factor ranging from 3.15 
to 5.91 when compared with the newer JVMs, AWT-J2 to AWT-J6. CWT-DX3 also runs 17%, 6%, 
and 10% faster than AWT-J4MS, AWT-J5MS and AWT-J6MS, respectively. However, if the 
system properties are not set properly, the CWT runs faster than AWT-J*M by a factor ranging 
from 2.68 to 3.13. 
 
4. CONCLUSIONS  
 
This research designs a portable AWT/Swing architecture, called the CYC Window Toolkit 
(CWT), for high rendering performance for Java games development, especially for applet games 
written in Java 1.1.  
The features of the CWT can be summarized as follows. (1) Reach high performance in Java 
1.1 applications and applets when using DirectX to render widgets. The CWT performs well in 
MSVM, which is currently used by about one-third web users. We demonstrated the performance 
of the CWT by applying it to a real applet game, Mahjong [3]. In the benchmark we measured, 
the performance of the game running in MSVM was improved by the factor of 7.58, and about 
10% faster than the latest Java SE 6.0 (build 73) with full hardware acceleration enabled. (2) 
Support AWT/Swing compatible widgets. Hence, the CWT can be easily applied to existing Java 
games. (3) Define a general architecture that supports multiple graphics libraries such as AWT, 
DirectX and OpenGL; multiple virtual machines such as Java VM and .NET CLR; and multiple 
OSs such as Microsoft Windows, Mac OS and UNIX-based OSs. (4) Provide programmers with 
one-to-one mapping APIs to directly manipulate DirectX objects and other game-related 
properties for advanced programmers. 
The contributions of this research include the following five points. (1) Define a general and 
portable widget architecture for Java game development. (2) Implement CWT-AWT and 
CWT-DX3. (3) Experimentally demonstrate the high performance of the proposed design. (4) 
Point out the performance inconsistency in Java versions. (5) Demonstrate the usability of the 
CWT by applying it to a real applet game, Mahjong. 
 
技術特點說明： 
 
本計畫研究並實作一套相容於 Java AWT 的視窗工具組，名為 CYC 視窗工具組（CYC Window 
Toolkit, CWT）。CWT 能有效提昇 Java 繪圖效能，可以應用於 Applet 網頁遊戲中，開發高
繪圖效能的遊戲。CWT 具有幾項特性： 
(1) 使用 DirectX 來進行繪圖，因而使 Java 的繪圖效能，可以追上使用 C/C++撰寫的
DirectX 程式。 
(2) 可以讓 Java 用來開發需要高繪圖效能的網頁動作遊戲。 
(3) 介面相容於 Java AWT，因此，現存的 Java AWT 應用程式，可以輕易地移植成 CWT
應用程式，而享受到繪圖效能上的提昇。 
(4) 提供 DirectX 存取介面，讓熟悉 DirectX 的程式設計人員，也能夠直接操控 CWT
內部的 DirectX 元件，進一步提昇繪圖效能。 
(5) CWT 本身就是一個具擴充性的架構，底層實作不但可以使用 DirectX，也可以使用
OpenGL。另外，由於是以 Java 開發，在非微軟 Windows 的作業系統中也能執行，
如 Linux、Mac OS 等。 
相對於 Sun 公司已有的解決方案（從 J2SE 1.4 起，利用 DirectX 及 OpenGL 提昇繪圖效能），
CWT 的優勢如下： 
(1)CWT 可以應用於 Java 1.1 以上的 Java 平台。例如微軟的 Java 虛擬機器，雖然僅
支援 Java 1.1，但統計上，在全球仍有約 31%的人使用。然而 Sun 的解決方案，必
須使用新的 J2SE 1.4，這對商業公司而言，將喪失不少潛在使用者。 
(2)CWT 的程式介面相容於 Java AWT 1.1。因此，現存 Java 1.1 的程式無須改寫，就
能移植到 CWT 上。如果採用 Sun 的解決方案，需要修改使用的函式。 
(3)根據實際應用 CWT 的遊戲效能測試，CWT 全面優於 Sun 的各 Java 版本。即使是 Sun
即將發佈的 Java SE 6.0（內部使用改良的 OpenGL 繪圖管線），CWT 的繪圖效能仍
保有約 10% 的效能優勢。 
 
可利用之產業及可開發之產品： 
 
本計畫可應用於需要高繪圖效能的 Java 程式，利如 Java 繪圖軟體，Java 網頁遊戲。已有
的 Java 1.1 程式，可以移植使用 CWT，立即獲得效能提昇。 
 
推廣及運用的價值：如增加產值、增加附加價值或營利、增加投資/設廠、增
加就業人數⋯⋯⋯等。 
 
本研究計畫大大提昇參與人員對於 Java AWT、Java Swing 及 DirectX 等函式庫的熟悉度，
