 2
playback, the computing system requires guaranteed I/O 
throughput. However, a traditional DMA mechanism neither 
friendly nor efficiently supports such real time tasks. The 
reasons are described as follows: 
(1) The bus bandwidth allocated to DMAC is not 
guaranteed. 
(2) The DMA service time allocated to an I/O device is 
not guaranteed. 
(3) Frequent interrupts decrease the CPU’s efficiency. 
To remedy the shortcomings of the traditional DMA for 
real time system, , we propose a novel SDMA (Schedulable 
DMA) mechanism that guarantees real time I/O throughput 
and interrupts the CPU as few as possible.  The controller 
handling the SDMA was successfully implemented on an 
AMBA-based SOPC platform. Experimental result shows 
that the SDMA has better performance than the traditional 
DMA. 
2. Interface HW/SW Codesign Methodology 
The software costs for different accesses and allocations are 
summarized in Table 1. A variable can be allocated in three 
types of registers: (1) single: the register contains the 
variable only; (2) shared:  the register contains more than 
one variable and all variables in it belong to the same group; 
(3) group-shared: the register contains more than one 
variable and the variables in it are from different groups. The 
I/O access types include reading (writing) an individual 
variable and reading (writing) K variables of the same group 
simultaneously.  
The total software cost under our consideration also 
depends on the execution numbers of these I/O accesses. 
These numbers are application-specific. The number of times 
a driver reads (writes) an individual variable Xi in a period is 
given as read frequency, fir (write frequency, fiw). The number 
of times a driver reads (writes) the whole group is given as 
group-read frequency fgr, (group-write frequency, fgw). Given 
these access profiles, the software cost can be determined by 
the allocation of device variables. The Definition 1 defines 
an allocation for a variable group, Vg = { X1, X2,…, Xn }. 
Table 1: Software cost of various I/O access for different 
allocations of device variables. 
  Allocation    
 
 
Access 
 
Single 
register 
 
 
Shared 
register 
 
Group-shared 
register 
Read an 
individual  
C1 C1+ C2 C1+ C2 
Write an 
individual 
C1 2 C1+ 2C2 2 C1+ 2C2 
Read K variables 
in a group 
KC1 C1+ KC2 
 
C1+ KC2 
Write K variables 
in a group  
KC1 
 
C1+ KC2 2C1+(K+1)C2
Definition 1 (Allocation Φ(Vg, mp, mq, p, q) ) : For a 
device variable group, Vg = { X1, X2,…, Xn }, an allocation 
Φ(Vg, mp, mq, p, q) denotes that there are mp variables of Vg 
allocated in p shared registers and mq variables of Vg 
allocated in q group-shared registers, and the remaining 
|Vg|−mp － mq, variables are allocated in single registers. 
Without loss of the generality, let X1, X2,…, X mp  be in the 
shared registers, Xmp+1, X mp+2,…, X mp+mq be in the 
group-shared registers,  and Xmp+mq+1,….Xn be in single 
registers. 
 
 
 
 
 
 
 
 
 
 
 
 
 
Figure 3 shows the physical layout for Φ(Vg, mp, mq, p, 
q). Given access profiles, we can calculate the software cost 
under our consideration as follows: 
Definition 2: (Software Cost Function Cs(Φ) ): Given 
fgr, fgw, fi r and fi w, i= 1,…, n, for a device variable group Vg = 
{ X1, X2,…, Xn }, the software cost Cs(Φ) of an allocation 
Φ(Vg, mp, mq, p, q) equals 
))2(()(
)22)(...())(....(
))((
)22)(...())(....(
))((
)........(
22121
21212121
21
21212121
1
111
CmCCqfCmqCf
CCfffCCfff
CmpCff
CCfffCCfff
Cmmnff
CffffC
q
w
gq
r
g
w
mqmp
w
mp
w
mp
r
mqmp
r
mp
r
mp
p
w
g
r
g
w
mp
wwr
mp
rr
qp
w
g
r
g
w
n
w
mqmp
r
n
r
mqmps
+++++
+++++++++
+++
+++++++++
−−++
+++++=
++++++
++++
    
The hardware cost is the number of I/O registers. This 
work seeks the allocation with the minimal software or 
hardware cost under constraints. These problems of exact 
minimization are formulated as zero-one integer linear 
programming problems [2, 4]. 
The flow of the proposed design methodology is shown 
in Fig. 4. Given the device-variable specification, the system 
derives two initial allocations without any HW or SW 
constraint. One has the minimal SW cost and the other 
minimal HW cost. Then given a hardware constraint (or a 
software constraint), the system can obtain an allocation 
having a minimal software (or hardware) cost under the 
constraint. The inner loop allows a user to iteratively refine 
the solution to meet a certain purpose. In both HW and SW 
optimizations, we first handle each device variable group 
separately. Then we allow variables in different groups to 
share registers if the following situations occur: (1) no 
solution exists to meet the hardware constraint and (2) the 
hardware cost can be further reduced while still meeting the 
software constraint. 
Although an ILP solver can derive the exact solution 
with the minimum cost, it is time-consuming for handling 
large cases. We propose a heuristic approach that starts from 
Figure. 3: The physical allocation ofΦ(Vg, mp, mq, p, q). 
q 
p
X3 X4 X5 
Xmp-1 Xmp 
Xmp+1 
Xmp+3 
Xmp+mq-1 
Xmp+2 
Xmp+4 
Xmp+mq 
Xmp+mq+1 
Xmp+mq+2 
Xn 
X1 X2 
