II 
中文摘要 
   在本計畫中，我們將考量具有替代式平行並聯機台與加工時間變異之雙階流水式排程
問題，我們將著重在探討這些替代式平行機台的加工功能以及工作在這些機器加工處理的
時間變化情形，在排程模式中，第一個加工階段有 m ( nm ≥ )台功能等級不同的加工機台，
第二個加工階段則只有一台共用的機台，排程績效將以機台最大使用效率與全部存貨時間
最短為目標，這樣的生產排程模式常見於機械加工的生產系統中，例如，在一些汽車生產
系統，產品的生產過程需要經過機械加工以及塗裝工程，而在機械加工階段經常包含新舊
功能不同的機台，一般而言，新機台功能又比舊機台功能多，因此，新機台可加工的產品
類型就比舊機台可加工的產品類型多，其中，在第一個加工階段，同一類型的產品在不同
的機台加工，又可分為以工作為主的加工時間，亦即同一類型產品的加工時間，不隨加工
機台的改變而改變，以及以加工機台為主的加工時間，亦即同一類型的產品，隨著不同的
加工機台，會改變其加工時間。這樣的生產排程模式可適用於實際的生產系統，所以，值
得我們深入探討。 
 
關鍵詞：排程、替代式機台、雙階流水式 
 
 
 
Abstract 
In this project, we consider a two-stage flowshop scheduling problem with alternative 
machines and varied processing time. We focus on the functions of these alternative machines 
and the processing times of jobs processed in these machines. In the model, there are m 
alternative machines at the first stage and a common processing machine at the second stage. The 
objective of this scheduling problem is to minimize the makespan or total completion time. Such 
scheduling problems can be applied to many real production systems. For example, a product has 
to undergo a manufacturing process and painting process. There are several manufacturing 
machines and one painting line in a production system. In addition, some of the manufacturing 
machines are old and the others are new. Generally, the new machines have more technical 
functions than the old ones. Therefore, the new machines can process more job-types than the old 
ones. In addition, there are two kinds of the processing times of the same type jobs. First, the 
processing times of the same type jobs remain the same in different machines in the first stage. 
Second, the processing times of the same type jobs are different in different machines in the first 
stage. This scheduling model can be applied to real production. Therefore, it is worth to study the 
scheduling models. 
 
Keywords: Scheduling, Alternative machines, Two-stage flowshop 
1 
1. Introduction 
A flowshop scheduling problem has been one of classical problems in production 
scheduling since Johnson [6] proposed the well-known Johnson’s rule in the two-stage flowshop 
makespan scheduling problem. Yoshida and Hitomi [9] further considered the problem with 
setup times. Yang and Chern [8] extended the problem to a two-machine flowshop group 
scheduling problem. Ho and Gupta [5] and Cepek et al. [2] proposed some efficient algorithms to 
solve various flowshop scheduling problems with dominant machines which can be found in 
many flexible manufacturing systems and process industries. However, these studies just 
considered one machine in each stage. Thus, multiple machines in one or both stages were 
considered in other literatures. Kim et al. [7] considered a batch scheduling problem for a 
two-stage flowshop with identical parallel machines at each stage. Brah and Loo [1] studied a 
flowshop scheduling problem with multiple processors. The objective is to minimize the 
makespan and mean flow time. These machines of each stage are identical in the previous studies. 
However, machines are not all identical at each stage in many real production systems. Thus, 
Futatsuishi et al. [3] further studied a multi-stage flowshop scheduling problem with alternative 
operation assignments.  
In this project, we consider a two-stage flowshop scheduling problem with alternative 
machines. We focus on the functions of these alternative machines. Moreover, we show that the 
proposed problem is NP-hard and provide some heuristic algorithms and computational 
experiments.  
Two contributions are made by this project. First, the research of two-stage flowshop 
scheduling problem with a function constraint and alternative machines is new and practically 
useful. Second, the sequencing rules and heuristics developed in this project are straightforward 
and easy to implement. We consider that this investigation provides not only a new model but 
also a new direction in the two-stage flowshop scheduling problems.  
 
2. Problem description and complexity 
In the following, two scheduling models are discussed. First, the processing times of the 
same type jobs are the same in different machines in the first stage [10]. Second, the processing 
times of the same type jobs are different in different machines in the first stage [12]. 
 
2.1. Model I 
The first model of the problem is developed using the following notations. Additional 
notations will be introduced when needed throughout the paper. 
n : the number of all jobs. 
m : the number of alternative machines at the first stage. 
kM : the k-th machine which is numbered according to technical functions at the first stage, k 
3 
 
Theorem 1. The proposed problem is NP-hard in the strong sense. 
Proof. We show that the 3-partition [4] problem reduces to this problem. Considering the 
following well-known NP-complete problem: 
    3-partition: Give positive integers 1a , 2a , …, na3 , B, and for each }3,...,2,1{ nAj =∈  
such that 24 BjB a <<  and ∑ ∈ =Aj j nBa , does there exist disjoint sets 1A , 2A , …, nA  of A 
such that Baaa
nAj jAj jAj j
==== ∑∑∑ ∈∈∈ ...21 ? 
For a given instance of 3-partition, 1a , 2a , …, na3 , B, an instance of the proposed 
problem is constructed as follows. Let all jobs be the jobs of type 1. 
jj ap =1  and 01 =jq  for  j = 1, 2, …, 3n , m = n, and }3,...,2,1{ nA = , 
where ∑ ∈ =Aj j nBa . 
We will show that 3-partition problem has a solution if and only if the above instance has an 
optimal schedule with the minimum makespan BC =max . 
   (=>) If 3-partition problem has a solution, then there exist disjoint sets 1A , 2A , …, nA  of A 
such that Baaa
nAj jAj jAj j
==== ∑∑∑ ∈∈∈ ...21 . Let the jobs corresponding to iA  be 
scheduled on machine iM ( i = 1, 2, …, n) at the first stage (see Figure 2). Note that in such a 
situation, each machine exactly processes three jobs. Therefore, the maximum completion time 
on iM ( i = 1, 2, …, n) is B. That is, the maximum completion time of the first stage is B. In the 
meantime, the common machine is idle. However, the processing times of all jobs at the second 
stage is 0, thus the makespan BC =max . 
 
Figure 2. Configuration of an optimal schedule 
 
1A  
2A  
nA  
…
 
0 B 
1M
2M
nM
Idle 
0 B 
C 
5 
type 2, …, and machine m can process jobs of type 1, type 2, …, and type m. And assumed that 
the jobs’ process time vary on different machines, i.e. if the j-th job in type i is processed by 
machine kM , then the processing time is equal to ijp ∗ ikv  for all k ≥ i.  
 
Theorem 2. The proposed problem is NP-hard in strong sense. 
Proof. The 3-partition problem can reduce to this problem with the first stage consist of identical 
parallel (i.e. ikv  = 1 for all i ≤ k) and alternative machines is NP-hard in strong sense. Hence, 
the proposed problem is NP-hard in strong sense. See the details of the proof in Theorem 1. 
 
 
3. Heuristic algorithms 
In this section, we will consider some heuristic algorithms with computational experiments. 
Our sequence-first, allocate-second heuristic approach decomposes the overall problem to 
exploit each of these two aspects. For the sequencing phase we have considered two rules to 
form a sequencing priority list.  One is the Longest Processing Time (LPT) rule in which jobs 
are sequenced in non-increasing order of ijq . The other is the modification of Johnson’s rule. 
Second, we combine the two job sequencing methods with four dispatching rules to find an 
optimal or near-optimal schedule. That is, there are eight combinations of heuristic algorithms. 
 
3.1. The modification of Johnson’s rule 
The steps of the modification of Johnson’s rule are described as follows. 
Step 1. For the jobs yet to be sequenced, determine the minimum processing times of all ijp  and 
ijq . 
Step 2. If the minimum is associated with ijp , place the corresponding job in the earliest 
possible position in the sequencing priority list. In case of a tie, the job with the longest 
time of ijq  is chosen. If there is still a tie, choose the job with the least job type index, 
i.e. the number of machines to which the job can be assigned is maximal, and if still a tie, 
break it arbitrary.  If the minimum is associated with ijq , place the corresponding job in 
the latest possible position in the sequencing priority list. In case of a tie, select the job 
with the longest time of ijp  from the jobs tied. If still a tie, choose the job with the 
7 
Example 1. In a two-stage flowshop scheduling problem, there are five machines at the first 
stage. 1T  is the sum of processing times of all jobs assigned to machine 1M , 2T  for machine 
2M , … and 5T  for machine 5M . Moreover, 21354 TTTTT <<<<  (see Figure 3). A job of type 
2 is selected from the sequence. Which machine will the job be assigned? 
Solution.  
A. TF rule. The job will be assigned to machine 2. 
B. FF rule. The job will be assigned to machine 3. 
C. BF rule. The job will be assigned to machine 4. 
D. RD rule. The job will be assigned to any one of available machines, i.e. the job will be 
assigned to machine 2, 3, 4 or 5.  
        time
M1
M2
M3
M4
M5
0 T1 T2T3T4 T5
Stage 1
 
Figure 3. The sum of processing times of all jobs assigned to each machine at stage 1. 
 
4. The computational experiments 
4.1. Model I 
In order to evaluate the efficiency of the eight combinations of two job sequencing methods 
and four dispatching rules, we generates several groups of problems according to the following 
conditions. 
(1) m is equal to 2, 5, or 8. 
(2) ijp  is uniformly distributed over [1, 20]. 
(3) ijq  is uniformly distributed over [1, 5], or [1, 10]. 
(4) n is equal to 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 150, 200, 250 or 300. 
(5) 1n , 2n , …, mn  are generated randomly according to the size of n. 
There are 100 problems generated in each group. Hence, the total number of problems 
generated is 8,400. For each problem, a percentage of error lowlowh CCCe /)( −=  is computed. 
hC  is the makespan of a heuristic algorithm. lowC  is the lower bound on the corresponding 
makespan and is estimated as theorem 2. 
 
9 
First, we have to determine the sequence of all jobs. Four methods and four dispatching rules are 
applied. These methods are the random method, arrange ijp  with SPT rule, arrange ijq  with 
LPT rule, and a modified Johnson’s rule. On the other hand, the four dispatching rules are 
Type-Fix, First-Fit, Best-Fit and Random rules. Next, we combine the four job sequencing 
methods with four dispatching rules to find an optimal or near-optimal schedule. That is, there 
are sixteen combinations of heuristic algorithms. 
 
    In order to evaluate the efficiency of the sixteen combinations of four job sequencing 
methods and four dispatching rules, we generates several groups of problems according to the 
following conditions. 
(6) m is equal to 2, 3, 5, or 8. 
(7) ijp  is uniformly distributed over [1, 20]. 
(8) ijq  is uniformly distributed over [1, 2], [1, 5], [1, 10], or [1, 20]. 
(9) n is equal to 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 150, 200, 250, or 300. 
(10) 1n , 2n , …, mn  are generated randomly according to the size of n. 
(11) )(^ ikrvik −=  for all k ≥ i. 
(12) r is equal to 0.5, 0.9. 
There are 100 problems generated in each group. Hence, the total number of problems 
generated is 44,800. For each problem, a percentage of error lowlowh CCCe /)( −=  is computed. 
hC  is the makespan of a heuristic algorithm. lowC  is the lower bound on the corresponding 
makespan and is estimated as follows: 
 
 
To evaluate the overall performances of the heuristic algorithms, we compute the means of 
all the average percentages of errors for different numbers of jobs. There are 1,400(100×14) test 
problems for each problem type. The results of computational experiments are shown in Table 2. 
From Table 2 and 3, it can be seen that the performances of the four dispatching rules combined 
with the modified Johnson’s rule are better than those combined with random method, arrange 
ijp  with SPT rule, or arrange ijq  with LPT rule. In addition, we will outcome priority of these 
dispatching rule: 1. First-Fit (FF), 2. Best-Fit (BF), 3. Type-Fix (TF), 4. Random (RD). It can 
also be seen that most of the mean percentages of errors decrease as the range of the processing 
times of jobs at the second stage increases. This implies that if the processing time variations of 
jobs at the second stage are larger, the heuristic algorithms may generate better solutions. 
⎭⎬
⎫
⎩⎨
⎧ +++= ∑∑∑∑
=== =
mmi n
j
mjmjjmjj
n
j
mj
m
i
n
j
ij
m
ijjilow
qpqpqaC
111 1,
}{min},{min,}{minmax
11 
separated,” AIIE Transactions, Vol. 11, No. 1, pp. 261-273 (1979) 
[10]. Hsu, C.J., Kuo, W.H., Yang, D.L. and Chern, M.S., “Minmizing the makespan in a 
two-stage flowshop scheduling problem with a function constraint on alternative machines,” 
Journal of Marine Science and Technology, 14(4), 213-217 (2006). (EI) 
[11]. Kuo, W.H., Hsu, C.J., Yang, D.L. (2006)12 月, “Minimizing the makespan on uniform 
parallel machines with a function constraint in a two-stage flowshop scheduling problem” 中
國工業工程學會九十五年度學術研討會論文集 
 
13 
Table 2. The average percentages of errors for each problem type -- r = 0.90 
r = 0.90 Random Method A modified Johnson’s rule arrange ijp  with SPT rule arrange ijq  with LPT rule 
ijq  NM TF FF BF RD TF FF BF RD TF FF BF RD TF FF BF RD 
2 0.161 0.127 0.127 0.477 0.156 0.13 0.13 0.474 0.16 0.127 0.127 0.481 0.157 0.123 0.123 0.476
3 0.333 0.242 0.243 0.803 0.32 0.245 0.245 0.787 0.339 0.248 0.248 0.832 0.333 0.244 0.244 0.838
5 0.521 0.349 0.353 1.118 0.487 0.332 0.336 1.091 0.524 0.351 0.352 1.163 0.515 0.335 0.339 1.186
[1, 2] 
8 0.493 0.295 0.302 0.985 0.392 0.205 0.208 0.923 0.444 0.233 0.234 1.03 0.431 0.22 0.221 1.029
2 0.178 0.139 0.139 0.481 0.157 0.12 0.12 0.465 0.202 0.148 0.148 0.554 0.19 0.135 0.135 0.542
3 0.269 0.207 0.208 0.705 0.213 0.159 0.16 0.68 0.249 0.183 0.183 0.739 0.23 0.168 0.169 0.721
5 0.197 0.131 0.134 0.501 0.084 0.042 0.043 0.448 0.11 0.059 0.06 0.519 0.111 0.062 0.063 0.505
[1, 5] 
8 0.145 0.1 0.099 0.214 0.045 0.022 0.022 0.121 0.05 0.019 0.019 0.168 0.066 0.039 0.039 0.164
2 0.127 0.11 0.11 0.367 0.048 0.036 0.036 0.326 0.071 0.054 0.054 0.362 0.06 0.044 0.044 0.343
3 0.084 0.065 0.065 0.196 0.012 0.006 0.006 0.131 0.022 0.014 0.014 0.172 0.032 0.026 0.026 0.162
5 0.061 0.049 0.048 0.078 0.007 0.005 0.005 0.016 0.007 0.004 0.004 0.032 0.027 0.023 0.023 0.042
[1, 10] 
8 0.057 0.048 0.047 0.056 0.007 0.005 0.005 0.007 0.006 0.003 0.003 0.01 0.026 0.024 0.024 0.027
2 0.03 0.027 0.027 0.037 0.001 0.001 0.001 0.003 0.002 0.002 0.002 0.006 0.015 0.015 0.015 0.017
3 0.026 0.023 0.023 0.029 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.002 0.015 0.015 0.015 0.016
5 0.024 0.022 0.022 0.024 0.001 0.001 0.001 0.001 0.001 0.001 0.001 0.002 0.014 0.014 0.014 0.014
[1, 20] 
8 0.024 0.023 0.023 0.024 0.002 0.002 0.002 0.002 0.002 0.001 0.001 0.002 0.016 0.016 0.016 0.016
Average 0.171 0.122 0.123 0.381 0.121 0.082 0.083 0.342 0.137 0.091 0.091 0.38 0.14 0.094 0.094 0.381
* NM means the number of alternative and uniform parallel machines.  
 
  
