關鍵詞 
 
策略性網路管理系統，  分散式資料庫管理系統，簡易網路管理協定(SNMP)，分
散式管理系統，  SNMP Engine，  SNMP Applications，  SNMP Agent，  Management 
Information Base (MIB)，  Structure Query Language (SQL),    Active Database 
Management System, Trigger, Event Handling 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  II
Keywords 
 
Policy‐Based  Network  Management  System,  Distributed  Database  Management 
System,  Simple  Network  Management  Protocol  (SNMP),  SNMP  Engine,  SNMP 
Applications,  SNMP  Agent,  Management  Information  Base  (MIB),  Distributed 
Management  System,  Structure  Query  Language  (SQL),  Active  Database 
Management System, Trigger, Event Handling       
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  IV
5.3. Training Gained.............................................................................................28 
References...................................................................................................................29 
Self-Assessment of Research Works.........................................................................33 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  VI
adopted by the International Standards Organization (ISO). The OSI standard’s 
management protocol is Common Management Information Protocol (CMIP), and has 
built-in services, Common management Information Service (CMIS), that specify the 
basic services needed to perform the various functions. It is the most comprehensive 
set of specifications, and addresses all seven layers of the OSI Reference Model. The 
specifications are object-oriented and hence the managed objects are based on object 
classes and inheritance rules. Both LAN and WAN can be managed using 
CMIP/CMIS. Two of the major drawbacks of the OSI management standard are that it 
is complex and their CMIP stack is large. 
 
In contrast to OSI standard, the Internet Standard is truly simple. It started as an 
industry standard and has since become very much like the standard specifications of 
a standard-setting organization. The Internet Engineering Task Force (IETF) is now 
responsible for its new development. The major part of the Internet Standard is the 
Simple Network Management Protocol (SNMP). The SNMP was primarily intended 
to manage Internet components, but is now used to manage WAN and 
telecommunication systems. As its name indicated, this protocol is much simpler than 
the CMIP. With its easy-implementation, SNMP is the most widely implemented 
network management system today. In fact, every Windows-based PC supports 
SNMP. 
 
1.3. SNMP-Based Network Management Systems 
 
The idea of how the Internet Standard, and thus SNMP, does network management is 
simple. There are nodes in the network acting as management stations (managers) and 
nodes acting as managed entities (agents). Examples of managed entities are routers, 
switches, and host computers. A manager contains a command generator and a 
notification receiver. It controls and monitors managed entities. The control and 
monitor functions are achieved by polling and requesting information from agents.  
Agents run a command responder application to perform tasks requested by the 
manager. Agents can also notify the manager by means of traps and inform messages. 
Figure 2.1 shows a simple SNMP-based network and the relation between the 
manager and agents. 
  2
In stead of the device-by-device style of management, a policy-based network 
management system manages the network as a whole by describing and implementing 
high-level business policies. Examples of policies are:[1] 
 
- All routers will run code version 6.2. 
- On-site contractors will only be connected to ports that are configured with 
special security restrictions. 
- All voice over cable ports in California must provide free local calling. 
- Apply special forwarding to all ports whose customers have paid for premium 
service. 
 
If we analyze each of the above policy, we will find that each policy involves an 
action to many objects. To make policy-based management possible, we need some 
kind of software tools to automate the process of translating high level policies into 
the real network management commands which will deal with managed network 
elements one by one. Also, some protocols have to be followed, e.g., SNMP or COPS, 
by all network elements in the network to ensure policies can be applied over the 
whole network. A policy-based network management system has to support the above 
two features. 
 
1.5. Policy-Based Network Management System Architecture 
 
A simple architecture of a policy-based SNMP network management system from [3] 
is shown in Figure 1.2. There is a new software entity called policy manager created 
to support policy-based management. This piece of software can exist in the SNMP 
manager (Figure1.2 (a)) or it can coexist with managed systems (Figure1.2 (b)). As 
shown in Figure 1.2, a management station is responsible for distributing an 
organization’s policies to all the managed devices. A managed element is an instance 
of physical or logical entity such as circuits, CPUs, queues, processes, etc. and is 
embodied by a group of related MIB variables. This enables policies to be expressed 
more efficiently and concisely. 
  4
tool to define the different policies that are to be enforced in the network. The logical 
entities that can take actions to enforce the policies are called the policy enforcement 
points (PEPs). The policies that the PEPs need to act upon are accessed from a 
database called policy repository. The policy repository is used to store the policies 
generated by the policy management tool. The policy decision point is an entity that is 
responsible for retrieving the policies from the repository and for interpreting them 
and deciding on which set of policies has to be enforced by the PEPs 
Policy Management Tool 
Policy Enforcement Point 
(PDP) 
Policy Repository  Policy Decision Point 
(PEP) 
 
Note that the framework simplified the management work by supporting a high level 
Figure 1.3 IETF Policy Framework 
and machine independent specification of policies and a centralized policy database.  
 
One of the factors in policy-based network management systems to ensure the 
If (policyCondition) then (policyAction) 
 
 policyCondition is a script that results in a Boolean to determine whether an 
olicyConditions have the capability of performing comparison operations on SNMP 
inter-operability among different venders is using the same policy information model. 
[2] defines the policy information model and [3] defines the corresponding MIB. In 
[3], a policy is expressed as  
 
A
element is a member of a set of elements upon which an action is to be performed. A 
policyAction is an operation performed on an element or a set of elements. 
 
P
variables, logical expressions, and other functions. Many device characteristics are 
  6
time. This might mean that a policy is installed and is dormant for a period of time, 
become ready, and then later goes dormant again. The pmSchedTable supports this 
feature. 
 
Other than the MIB definition described above, IETF also defined a execution 
1.8. Distributed Database Management Systems 
 
 distributed database is a database that is not stored in its entirely at a single location, 
environment for policy-based management. They include a Policy Scheduler, a script 
language, and lots of functions written in that language. 
 
Policy Manager 
Agent  Execution Environment 
Policy Download and Control 
      pmPolicyTable 
      pmElementTypeRegTable 
      pmSchedTable 
Policy Scheduler 
Language 
Policy Environment Control 
      pmRoleTable 
      pmCapabilitiesTable 
Function Library 
Policy Monitoring 
      pmTrackingTable 
      pmDebuggingTable 
 
 
Figure 1.4 Structure of a Policy Manager 
A
but rather is spread across a network of locations that geographically dispersed and 
connected via communication link. A distributed database management system 
  8
sub-queries to involved database systems. This is just like the policy manager in 
a policy-based network management system, which interprets policy, translates 
the policy into managing commands, and sends managing commands to involved 
managed network elements. 
 
With the key similarities described above, we argue that both the distributed database 
 our literature survey of policy-based network management systems, we found that 
ased on the arguments described above, we have two goals in doing our proposed 
 Demonstrate the feasibility of using a distributed database management system 
z . 
. Literature Survey 
olicy-based management has become a popular technology of network management. 
.1. Policy Modeling and Classification 
ne of the major problems in the policy-based management system is how one can 
management system and the policy-based network management system are all 
distributed management systems, and they share the same distributed architecture and 
provide similar functionality to different applications. 
 
In
a large part of research in this area is repeating the research of the distributed database 
management system, e.g., policy modeling and specification languages. We believe 
that to be more productive, the research direction should be adjusted to the 
investigation of possible usage of distributed database management system as a 
policy-based network management system. In this case, we can reuse most of the 
existing results from a distributed database system to build a policy-based network 
management system. It would make realization of policy-based technology very 
simple. 
 
B
research. 
 
z
as a policy-based network management system based on SNMP protocol. 
Unify the management systems for various distributed system applications
 
3
 
P
It has been the subject of extensive research and development over the past decade 
beside the works in the standard organization. Most of the research works are in 
policy modeling and classification, policy specification language, protocol support, 
policy execution architecture, and system implementation/ application areas. 
 
3
 
O
  10
from a standard organization, it suggests a general architecture of policy execution. 
Some researches have elaborated the subject and proposed more details. [16] divided 
general policies into two levels, i.e., business level and technology level. An enhanced 
policy management tool component was proposed against the IETF framework. A 
new architecture based on the one of IETF was proposed in [21]. It extended the IETF 
framework to the area of content distribution networks. [26] mapped the IETF 
architecture to networks using SNMP protocol. 
 
3.4.  Protocol Support 
 very noticeable protocol specially designed to support policy-based management 
.5. System Implementation/Applications 
0, 42] designed a hierarchical policy-based management system to deal with 
. Research Method 
o achieve our goals, we have divided the whole research into six phases: 
upport for Policy Specification 
 
A
was proposed in [8]. The COPS (Common Open Policy Service) protocol uses a 
simple query and response way to exchange policy information between a policy 
server (Policy Decision Point or PDP) and its clients (Policy Enforcement Points or 
PEPs). A chief objective of this policy control protocol is to begin with simple but 
extensible design. As for today, it still does not gain too much ground in network 
management due to the long popularity of SNMP. 
 
3
 
[4
dimensioning and dynamic resource management issues in IP differentiated service 
and QoS networks. [15] described the experiences of design and implementation of a 
policy-based network management system called PECAN, for managing MPLS 
networks. [14] described a policy-based mobile ad hoc network management system 
that addresses issues of self-forming, self-configuring, and self-healing capabilities in 
a ad hoc network. [29] took a close look at policy-based management as an enabling 
technology and paradigm shift for Intel’s IT organization. It is very good source for a 
pragmatic review of the technology and discussed the deployment challenges, 
roadmap considerations, and practical usage scenarios. 
 
4
 
T
1. System Architecture 
2. Database Language S
3. Database Schema Support for Policy Specification 
4. Database Interface to the SNMP World 
  12
 
 
We assume the network Management system is to work under the SNMP standard 
s shown in Figure 4.1, the SNMP Engine is the software component implementing 
Dispatcher: It sends commands and receives responses from network elements. 
n. 
he SNMP Engine is specified in IETF RFC 2271 [55] and is available commercially 
he other software component shown in Figure 4.1 is the SNMP Application which 
he database management system is the part that actually handles the policy 
.2.  Database Language Support for Policies Specification 
he biggest problem with the policy specification is the large gap between the 
o develop our policy hierarchy, we think that the description of the hierarchy should 
because almost all network elements have this built in them. Under this assumption, 
our system can be plugged into any SNMP network and works right away. 
 
A
the core of SNMP standard. It includes the following components: 
 
z 
z Message Processor: It processes version-specific SNMP messages. 
z Security Subsystem: It provides authentication and privacy protectio
z Access Control: It provides access authorization. 
 
T
or in the form of free software (open source). Therefore, using the SNMP Engine will 
ensure the SNMP standard is followed and make the design work much simpler. 
 
T
has been specified in IETF RFC 2273 [56]. As its name implies, this part is more 
application oriented and is described in Section 4.4. 
 
T
management. We give more details in the following two sections. 
 
4
 
T
semantics of the high level expression used by the end users, usually given in a plain 
text in a very abstract level, and the description of appropriate procedures in terms of 
machine commands. We can use different abstraction levels to refine the policy from a 
strategic level to an operational level. The number of abstraction levels differs greatly 
in the research of policy modeling described in Section 3.1. They range from one to 
four. 
 
T
clearly define the usage of each conceptual level and the mapping of policies to 
different levels should be unambiguous. From this viewpoint, clearly two level is not 
  14
100M bit/sec throughput. 
 
After receiving the customer requirement, the software developers have to write down 
If CHANNEL#1.BPERCENT > 30% then TRUNK#1.BUSAGE = 1000M; 
ote that the communication company has used a dynamic mechanism to adjust the 
s our survey of the policy specification languages shows, the functional 
his scenario shows that a policy hierarchy and its refinement process can be unified 
 fact, our selection of the policy specification language is the most popular database 
. Obviously, it is a database language. 
rofessional know it. So, we do not need to 
the functional requirements (or design requirement). Based on these functional 
requirements, they begin to design the software or procedures to implement the 
services. The functional requirements may look like 
 
- 
- If CHANNEL#1.BPERCENT > 40% then TRUNK#1.BUSAGE = 1100M; 
- If CHANNEL#1.BPERCENT < 35% then TRUNK#1.BUSAGE = 1000M; 
- If CHANNEL#1.BPERCENT < 25% then TRUNK#1.BUSAGE = 800M; 
 
N
bandwidth usage to support customers’ need to save costs. After finishing these 
functional requirements, developers can begin to develop software or procedures to 
control and support the customer’s need. 
 
A
requirements displayed above are having similar syntax structure with several 
specification languages proposed in our survey. As a mater of fact, the IETF [3] 
defined a “PolicyScript Language” to specify policies and define actions and its 
policy specification part has the same format as those shown in the above functional 
requirements, see Section 1.6. 
 
T
with the software development process. Since those proposed policy specification 
languages practically can only specify the “functional requirement” level policies, we 
argue that by carefully screening through any programming languages, script 
languages, and database languages, we should be able to find some languages which 
can also fit into the policy specification purpose. As our research goal indicated, we 
are using the distributed database system to approach the policy network management 
system. Our policy specification language should be from some database languages. 
 
In
language SQL. The reasons are as follows. 
 
1
2. It is so popular, most of computer p
  16
 Policy‐Based Network Manager 
Network MIB 
SNMP Agent 
Element 
MIB 
SNMP Agent 
Element 
MIB 
……. 
Network 
Management 
Database (MDB) 
Figure 4.2 A SNMP Network with MIB 
Figure 4.2 adds the MIB (Management information Base) to the Figure 1.1. Now we 
can see two different types of MIBs, i.e., network MIB and element MIBs. The 
element MIB only contains information of the local managed element while the 
network MIB contains information of the whole network. Also, we see a management 
database (MDB) associated with the SNMP manager. This MDB contains information 
of all managed network elements in the network. 
 
It is important that we distinguish the terms MIB and MDB in Figure 4.2. Simply 
speaking, a MIB is a conceptual database schema and MDB is a real database. For 
example, assume all the hubs in network are made by Cabletron. In Figure 4.2, the 
network manager’s knowledge about those hubs and their associated parameters is in 
its MIB, and its knowledge about the values associated with parameters of those hubs 
are stored in the MDB. 
 
Let’s see how the manager gets the agent information. Suppose we add another 
  18
nine different criteria. IETF summarize various proposed solutions and came up with 
adding three managed tables into the MIB. These three tables support description of 
role, capability, and time in the policies. We argue that this solution is not a good one 
as IETF RFC 4011 admitted: “However, there are important characteristics that aren’t 
currently in MIB objects, and, worse, it is not current practice to store this information 
on managed devices”. Also, there is no proof that all the policies will only involve in 
these three areas. 
 
Actually, in our research, we found a simple and clean solution to this problem. 
Instead of putting these management tables into the MIB, we can create relations for 
these management tables in the MDB of the SNMP manager. Two advantages are 
gained by using this approach. 
 
- The MIB can keep with its original definition without mixing with some 
unrelated management information. 
- We can avoid standardizing uncertain policy types by creating 
management relation as new policy types appear. 
 
4.3.3. Non-MIB Database Relations 
 
From the argument in Section 4.3.2., we can create relations which are not defined in 
the network MIB in the MDB for the handling of policies. A simple example of such 
relation is “Customer”. A Customer relation in a service provider’s database would 
contain customer related information such as name, phone, subscription services, etc. 
These kinds of relations all related to the business purposes and normally already 
exist in other business related databases, e.g., Accounting, or CRM (customer relation 
management) databases. It is easy to port these relations to the MDB to support the 
processing of policies. 
 
Actually all policies are service business requirements. For a business to compete 
effectively, it has to strive to change their service infrastructure from a 
network-focused service to a value-added and customer-focused one that can create 
new value and market. As a result, the so called “business process integration” has 
been adopted in many companies. This type of integration tried to combine several 
related business processes together and create more efficient business policy flows to 
help competing in the market place. 
 
With creating non-MIB relations or porting relations from other databases, our 
  20
As shown in Figure 4.3, the SNMP Application component serves the interface 
between the SNMP standard and the database management system. There are two 
major subcomponents in it, namely, Command Generator and Notification Receiver. 
 
4.4.1. Command Generator 
 
Command Generator receives network element management instructions from the 
database management system, generates commands, and delivers commands to the 
Dispatcher in the SNMP Engine. It also receives the network element responses from 
the Dispatcher and sends them back to database system for further management 
activities. 
 
4.4.2. Notification Receiver 
 
Notification Receiver receives notifications (traps) from the SNMP Engine and 
transforms notifications and sends them to the database management system. 
Notifications are events generated by network elements when something happened in 
them. Those events are sent to network manager for its attention and might need to 
have some responding works done by the manager to fix elements’ problems. 
 
In the policy modeling research described in Section 3.1, two types of policy models 
were presented. The first one is Event-Condition-Action” (or ECA) and the other one 
is “Condition-Action” (or CA). In ECA model, the action will be taken if the event 
occurs and the condition satisfied. In the CA model, when condition is satisfied the 
action will be done. In our research, we use SQL to describe policies, apparently, we 
have no way to specify events, i.e., we have chosen to use the CA model. The 
problem is that a policy may sometimes involve some events. Also, we have to be 
able to process events from network elements. That means we have to find some 
solution to the event handling in a database system. The approach we took is using the 
concept of active database systems. 
 
4.4.3. Active Database management Systems 
 
Conventional database management systems are passive, in the sense that they only 
manipulate data in response to explicit requests from applications. An active database 
management system is a database management system that allows users to specify 
actions to be taken automatically, without user intervention, when certain conditions 
arise. Some features of active database management systems are triggers, assertions, 
  22
some of their associated parameters. 
2. When receiving events from the SNMP network, the Notification Receiver 
translates these events into update queries to that event relation. The tuple to be 
updated are those entries corresponding to the events received. 
 
The update event generated by the Notification Receiver invokes the trigger in the 
event relation associated with the event received. The trigger then checks the 
condition and finally decides whether to take action. 
 
4.5. Policy Realization 
 
4.5.1. SNMP Message APIs 
 
The command generator in Figure 4.3 provided APIs to simulate SNMP message 
types, i.e., GET, SET, GETNEXT, etc.  for the database system. Whenever the 
database system needs to access data stored in network elements, it just calls these 
APIs. The way for the database system to use these APIs is to make these APIs as 
stored procedures in the database and the database system can use “CALL” of SQL to 
invoke these APIs. 
 
By using these APIs, the database system can execute policies based on the SNMP 
protocol. We divided policies into two categories based on the involvement of events. 
They are explained in the following sections. 
 
4.5.2. Non-Event-Oriented Policies 
 
As described in Section 4.3.1, the network manager or the database system can query 
the newly installed network element to retrieve MIB data. In this way, the network 
manager should have all MIB data of the whole network. Therefore, the evaluation of 
the policy’s condition clause won’t go beyond the management station. However, the 
action part of the policy might require some provisioning work on network elements. 
If this happens, the SQL stored procedure approach may be needed which would 
include some Command Generator’s SNMP APIs to send command to network 
elements. 
 
4.5.3. Event-Oriented Policies 
 
Events can be from the network which will be sent to the network manager in the 
  24
Both distributed database system and policy-based network management system are 
all distributed system. With all the works described above, we demonstrated the 
similarities of both and used the database system to implement the network 
management system. We believe a common framework for distributed management 
system exists. Our idea is that each type of distributed system can get its management 
system by tailoring this framework. We proposed the following architecture for this 
purpose: 
Managing Entity Managing Entity
Managed Entity Managed Entity Managed Entity 
Information 
Store B 
Information 
Store A 
Information 
Store 1 
Information 
Store 2 
Information 
Store 3 
‐‐‐‐‐‐‐‐‐ 
‐‐‐‐‐‐‐‐ 
Managing Group 
Managed Group 
Protocol A 
Protocol A 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Figure 4.4 Common Architecture of Distributed Management System  
 
 
 
 
 
 
  26
satisfaction. To timely deploy service requirements in a cost-effective way, a 
policy-based network management system is clearly superior to those traditional ones 
which manage networks by using device by device style. As a consequence, the 
network management application has shifted paradigm to policy-based. By designing 
and implementing a policy-based network management system, our research has 
opened a new possibility in this direction. 
 
While industry and academy keep trying to investigate for a more complicated version 
of it, our research took the much simpler solution by using a distributed database 
system which always co-exists with a network management system. The solution has 
greatly reduced the research and development efforts and cost. It also reduces the 
operating cost by reducing the training expense as the database system is so popular.  
 
5.3. Training Gained 
 
Along with this research project, we have trained our students in the following areas: 
 
1. To know SNMP protocols. 
2. To know policy-based network management systems. 
3. To know distributed database management systems. 
4. To know active database systems. 
5. To learn event handling techniques. 
6. To learn SQL database language. 
7. To learn prototyping techniques. 
8. To learn analysis and summary techniques. 
9. To learn verification techniques. 
10. To obtain research experiences. 
 
 
 
 
 
 
 
 
 
 
 
  28
[15]   R. Chadha, etc, “PECAN: Policy-Enabled Configuration Across Networks”, 
Proc. 4th IEEE Int. Workshop on Policies for Distributed Systems and 
Networks, Como, Italy, June 2004. 
[16]  D. Verma, “Simplifying Network Administration Using Policy-Based 
Management”, IEEE Network, March/April 2002. 
[17]   J. Fritz Barnes, R. Pandey, “CacheL: Language Support for Customizable 
Caching Policies”, Proc. 4th Int’l. Web Caching Workshop, San Diego, CA, 
March 1999. 
[18]   K. Chan, etc, “COPS Usage for Policy Provisioning”, IETF, RFC 3084, 
March 2001. 
[19]   D. Kidston and J. Robinson, “Distributed Network Management for Coalition 
Deployments”, Proc. IEEE Military Communications Conf. Vol. 1, 2000. 
[20]   D. Verma, M. Beigi and R. Jennings, “Policy Based SLA Management in 
Enterprise Networks”, Proc. 1st IEEE Int. Workshop on Policies for 
Distributed Systems and Networks, Jan. 2001. 
[21]   D. Verma, S. Calo, and K. Amiri, “Policy Based Management of Content 
Distribution Networks”, IEEE Network Vol. 16, No. 2, March/April 2002. 
[22]  K. Phanse, L. Dasilva, and S. Midkiff, “Design and Demonstration of 
Policy-Based Management in a Multi-Hop Ad Hoc Network”, International 
Journal of Ad Hoc Network, 2004. 
[23]  N. Damianou, N. Dulay, E. Lupu and M. Sloman, “The Ponder Policy 
Specification Language”, Workshop on Policies for Distributed Systems and 
Networks (Policy2001), Jan. 2001. 
[24]   M. Stevens, and W. Weiss, “Policy-based Management for IP Networks”, Bell 
Labs Technical Journal, Vol. 4, No. 4, Oct-Dec, 1999. 
[25]  R. Rajan, etc., “A Policy Framework for Integrated and Differentiated Services 
in the Internet”, IEEE Network, Vol. 13, No. 5, Sep/Oct 1999. 
[26]   S. Boros, “Policy-based Network Management with SNMP”, Proc. EUNICE 
2000. 
[27]   A. Tripathi, D. Kulkarni, and T. Ahmed, “Policy-Driven Configuration and 
Management of Agent Based Distributed Systems”, ACM SELMAS’05, May 
2005. 
[28]   J. Rowanhill, P. Varner, and J.Knight, “Efficient Hierarchic Management for 
Reconfiguration of Networked Information Systems”, Int’l Conf. on 
Dependable Systems and Networks, June 2004. 
[29]   J. Vicente, H. Cartmill, G. Maxon, S. Siegel, R. Fenger, “Managing Enhanced 
Network Services: A  Pragmatic View of Policy-Based Management”, Intel 
Technology Journal, Vol. 4, No. 1, Feb 2001. 
  30
[45]   J. Ullman, “Principles of Database Systems”, Computer Science Press, 1982. 
[46]   H. Garcia-Molina, J. Ullman, J. Widom, “Database Systems The Complete 
book”, Prentice Hall, 2002. 
[47]   M. Wallace, “Communicating with Databases in Natural Language”, Ellis 
Horwood, 1984. 
[48] Y. Deville, “Logic Programming Systematic Program Development”, 
Addison-Wesley, 1990. 
[49]   C. Date, “An Introduction to Database Systems”, Vol. 2, Addison-Wesley, 
1985. 
[50]   A. Silberschatz, H. Korth, S. Sudarshan, “Database System Concepts”, 4th Ed. 
McGraw-Hill, 2002. 
[51]  D. McCarthy, U. Dayal, “The Architecture of an Active Data Base 
Management System”, Proc. ACM SIGMOD 1989. 
[52]   E. Hanson, “Rule Condition Testing and Action execution in Ariel”, Proc. 
ACMSIGMOD, 1992. 
[53]   E. Hanson, “The Design and Implementation of the Ariel Active Rule 
System”, IEEE Trans. On Data Engineering, Vol. 8, No. 1, 1996. 
[54]   E.Hanson, etc, “A Flexible and Recoverable Client/Server dDatabase Event 
Notification System”, VLDB Journal, 1998. 
[55] D. Harington, R. Presuhn, and B. Wijnen, “An Architecture for Describing 
SNMP Management Framework”, RFC 2271, IETF, Jan. 1998. 
[56] D. Levi, P. Meyer, and B. Stewart, “SNMP v3 Applications”, RFC 2273, IETF, 
Jan. 1998. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  32
可供推廣之研發成果資料表 
□ 可申請專利  ■ 可技術移轉                                     日期：95 年 8月 31 日 
國科會補助計畫 
計畫名稱：以分散式資料庫管理系統作為策略性網路管理系統之研
究  
計畫主持人：蘇宗安 
計畫編號：NSC 95－2221－E－035－069 學門領域： 
技術/創作名稱 以分散式資料庫管理系統作為策略性網路管理系統之研究   
發明人/創作人 蘇宗安 
中文：在本研究計畫，我們藉由分散式資料庫管理系統與策略性網
路管理系統之相似性，發展出一套以分散式資料庫管理系統為基礎
之策略性網路管理系統。 
 
 
 
 技術說明 英文：In this research, we designed a policy-based network 
management system based on a distributed database management 
system. 
 
可利用之產業 
及 
可開發之產品 
計算機網路管理，通訊服務 
技術特點 
策略性網路管理 
推廣及運用的價值 
網路管理 
 
  34
