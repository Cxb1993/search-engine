U
N
C
O
R
R
E
C
T
E
D
P
R
O
O
F
90 it is possible that a requester only requests the web service
91 to access non-sensitive information (e.g., the requester
92 requests the web service to retrieve the advertisements of
93 a bank). Under this situation, invoking the web service by
94 the requester should not be rejected. Nevertheless, the
95 ‘‘allow or reject” policy will reject the requester if the
96 requester is not authorized to access the sensitive informa-
97 tion. In our opinions, invoking a web service should be
98 allowed if the requester passes some basic requirements.
99 When a web service is being executed, if the requester
100 requests to access the information unauthorized for the
101 requester, the web service denies the request and stops
102 the service. This access control policy is more precise than
103 the ‘‘allow or reject” policy.
104 (c) With the control of the existing models, when a requester is
105 allowed to invoke a web service, the web service must do
106 everything the requester requested. If unsafe access occurs,
107 the web service cannot deny the access. In our opinion,
108 information access in a web service should be monitored
109 even when the web service is allowed to be invoked by a
110 requester.
111
112 According to the above description, we think that an access con-
113 trol model for web services should be more precise. In the past
114 years, we developed information ﬂow control models to prevent
115 information leakage (Chou, 2004; Chou and Chen, 2006), which
116 can also be used in the access control of web services. Here infor-
117 mation leakage refers to leaking high security level information to
118 low security level users. For example, if a patient’s case history can
119 only be read by a hospital’s doctors, information leakage occurs
120 when a patient obtains another patient’s case history. In an execut-
121 ing program, an information ﬂow occurs when information is as-
122 signed to a variable. Controlling information ﬂows corresponds to
123 preventing high security level information from being assigned to
124 variables that can be accessed by low security level users. Since
125 variables of an application generally carry an application’s infor-
126 mation and users can obtain a variable’s content when the variable
127 is output, controlling information ﬂows prevents low security level
128 users from obtaining high security level information.
129 In our research, we extended XACML by embedding the infor-
130 mation ﬂow control concept. The extended model is named EXAC-
131 ML (extended XACML). Currently, the model is only ﬁt for object-
132 oriented web services. EXACML protects the information managed
133 by both requesters and web services. Moreover, access control in
134 EXACML does not follow the ‘‘allow or reject” policy. Instead,
135 EXACML sets up basic requirements for web services. The basic
136 requirements determine whether a requester can invoke a web
137 service. Since a web service may invoke other web services, the ba-
138 sic requirements also determine whether the requester can invoke
139 those web services. That is, the basic requirements handle negoti-
140 ation mentioned above. When a requester passes the basic require-
141 ments of a web service, the requester can invoke the service.
142 During the execution of the web service, EXACML prevents the re-
143 quester from accessing sensitive information that is not authorized
144 for the requester. Therefore, EXACML solves the three problems
145 mentioned above. Moreover, since the concept of information ﬂow
146 control is embedded, EXACML inherits the features of information
147 ﬂow control models such as controlling both read and write access
148 and preventing indirect information leakage (Chou, 2004; Chou
149 and Chen, 2006). This paper describes EXACML.
150 2. Related work
151 Access control for web services protects sensitive information
152 (in both requesters and web services) from being leaked. Quite a
153few access control models for web services have been proposed.
154Below we survey some important ones.
155The research of Shen and Hong (2006) proposes an access con-
156trol model for web services. In the model, requester uses PMI (priv-
157ilege management infrastructure) for authentication. The checking,
158retrieval, and revocation of authentication are all managed by the
159PMI. It also uses an RBAC-based web service access control policy
160to determine whether a requester can invoke a web service. In gen-
161eral, the model merely determines whether a requester can invoke
162a web service. It, however, cannot solve the three problems men-
163tioned in Section 1.
164The model proposed by Bhatti et al. (2004) uses X-GTRBAC
165(Bhatti et al., 2005) to control the access of web services. X-GTRBAC
166can be used in heterogeneous and distributed sites. Moreover, it
167applies TRBAC (Bertino et al., 2001) so that the factor of time is
168considered. Although the model proposed by Bhatti seems sophis-
169ticated, it cannot solve the three problems mentioned in Section 1.
170XACML (OASIS, 2003) is a reference model proposed by OASIS
171for web service access control. It determines whether a requester
172can invoke a web service. There are implementations of XACML,
173such as that in Shen and Hong, 2006. In general, both XACML
174and the implementations cannot solve the three problems men-
175tioned in Section 1.
176The model proposed by Seamons et al. (2001) discusses
177whether a composition of web services can be invoked. The need
178for the discussion is because a web service may invoke other
179web services. The model offers a language to facilitate enforcing
180the access control speciﬁcation, which describe whether a compo-
181sition of web services can be invoked. In general, the model cannot
182solve the three problems mentioned in Section 1.
183The model proposed by Bertino et al. (2006) incorporates the
184role-based access control (RBAC) concept (Sandhu et al., 1996) to
185deﬁne its access policies. It uses a two-leveled mechanism for
186web service access control. The ﬁrst level, which is the service le-
187vel, checks the roles assigned to consumers (i.e., requesters) and
188web services. An authorized requester is a candidate to invoke a
189web service. We use the term ‘‘candidate” because an authorized
190requester should pass the second level to invoke a web service.
191The second level, which is the attribute level, uses parameters as
192attributes of a service and assigns permissions to the attributes.
193A requester can invoke a web service only when it possesses the
194permissions to access the attributes. The control of the model is
195more precise than those that using only one level control. Never-
196theless, it still fails to solve the problems mentioned in Section 1.
197Quite a few researches focus on negotiation among requesters
198and web services. Below we survey some of them. We do not dis-
199cuss them much because the objectives of the researches and that
200of ours are not the same. We discuss them because our model’s ba-
201sic requirements mentioned in Section 1 are also a kind of
202negotiation.
203The model Trust-Serv (Wonohoesodo and Tari, 2004) discusses
204dynamic choosing web services at run time. The choosing process
205is a kind of negotiation. It uses the concept of trust negotiation (Yu
206et al., 2003) to select web services that are allowed to invoke. The
207major component used to determine whether a web service is al-
208lowed to invoke is credential. Trust-Serv describes trust negotiation
209policies using state machines, which are easy to be computerized.
210The model proposed by Koshutanski and Massacci (2005) uses dig-
211ital credentials to manage negotiation. It deﬁnes strategies for
212negotiation policies. The model proposed by Skogsrud et al.
213(2004) handles the problem of k-leveled invocation of web services
214(a web service may invoke other ones, this results in multilevel
215invocations). The major component used in the model is creden-
216tials. The objectives of some models we surveyed are also about
217negotiation (Mecella et al., 2006; Paurobally and Jennings, 2005;
218Srivatsa et al., 2007; Ardagna and Damiani, 2006; Koshutanski
2 S.-C. Chou, C.-H. HuangQ1 / The Journal of Systems and Software xxx (2009) xxx–xxx
JSS 8346 No. of Pages 8, Model 5G
14 July 2009 Disk Used
ARTICLE IN PRESS
Please cite this article in press as: Chou, S.-C., HuangQ1 , C.-H. An extended XACML model to ensure secure information access for web services. J. Syst. Soft-
ware (2009), doi:10.1016/j.jss.2009.06.045
U
N
C
O
R
R
E
C
T
E
D
P
R
O
O
F
314 ent security levels. In general, role should be used to deﬁne
315 ACLs (i.e., permissions). Nevertheless, using roles (i.e.,
316 objects, see item (b) above) to deﬁne ACLs results in impre-
317 cise control. We use an example to explain this point.As-
318 sume that a doctor can browse and change the case
319 histories of the patients assigned to him. Moreover, a doctor
320 can browse but not change the case histories of the patients
321 not assigned to him. Under this assumption, if a patient is
322 assigned to a doctor, the doctor object’s methods ‘‘browse_
323 case_history” and ‘‘change_case_history” can access the
324 patient object’s attribute ‘‘case_history”. On the other hand,
325 if a patient is not assigned to a doctor, only the method
326 ‘‘browse_case_history” but not ‘‘change_case_history” of
327 the doctor object can access the patient object’s attribute
328 ‘‘case_history”. Suppose we regard objects as roles. Then,
329 when an object is allowed to access a variable, every method
330 of the object can access the variable. This will allow every
331 doctor object’s methods ‘‘browse_case_history” and
332 ‘‘change_case_history” to access every patient object’s attri-
333 bute ‘‘case_history” in the above example. This causes trou-
334 ble in the control example mentioned above. Therefore,
335 using roles to deﬁne ACLs results in imprecise control.
336 According to this consideration, EXACML uses object meth-
337 ods instead of roles (i.e., objects) to deﬁne ACLs. Letting
338 MD be the set of object methods, the ACL ACLvar attached
339 to a variable var is deﬁned below:ACLvar = {RACLvar;WACLvar},
340 in which
341  RACLvar e 2MD, in which object methods in RACLvar are
342 allowed to read var.
343  ACLvar e 2MD, in which object methods in WACLvar are
344 allowed to write var.We need both RACL and WACL
345 because EXACML controls both read and write accesses
346 as the models we designed previously (Chou, 2004; Chou
347 and Chen, 2006).
348
349 (f) DSOURCES is a set of data sources (DSOURCEs). Each variable
350 in EXACML is associated with a DSOURCE to facilitate write
351 access control (we will describe it later). DSOURCE records
352 the object methods by which a variable’s data are written.
353 For example, suppose the variable ‘‘var” is derived from
354 the variables ‘‘var1” and ‘‘var2”, and ‘‘var1” and ‘‘var2” are
355 respectively written by the object method ‘‘md1” and
356 ‘‘md2”. Then, the DSOURCE of ‘‘var” is the set ‘‘{md1, md2}”
357 after the derivation.
358 (g) BR is the basic requirements mentioned before. In the fol-
359 lowing text, we will describe BR before describing the infor-
360 mation ﬂow control policy in EXACML.
361
362 Note that Deﬁnition 1 does not include the important compo-
363 nents ‘‘role-permission assignments” and ‘‘sessions” mentioned
364 in RBAC. Role-permission assignments are not included because
365 ACLs indicate the variables that can be read and/or written by a
366 role’s method. That is, role-permission assignments are embedded
367 in ACLs. As to sessions, we assume that a session is automatically
368 created when a web service is invoked and the session is dropped
369 when the service ends. Therefore, we need not explicitly deﬁne
370 sessions.
371 To check whether a requester can invoke a web service, the re-
372 quester and the web service should ﬁrst pass the basic require-
373 ments, which constitute the BR component in EXACML (see item
374 (g) in Deﬁnition 1). Below we describe the BR component in details.
375 In our original design, we use ACLs to deﬁne basic requirements.
376 We then identiﬁed that ACLs are only suitable for checking
377 whether an access is secure within a program or checking whether
378 an invocation from a program to another one is secure. Neverthe-
379less, they cannot be used to check whether an invocation from a
380program to another one is secure under an environment that pro-
381grams may be added or removed. The rationale is that knowing
382every program’s variables is necessary to deﬁne ACLs. In a web-ser-
383vice-based environment, both applications and web services may
384be added or removed anytime. Therefore, we used another mecha-
385nism instead of ACLs to deﬁne the basic requirements. The mech-
386anism is called the trust management mechanism. To deﬁne the
387mechanism, the following sub-components should be included
388by the BR component:
389(a) Security level numbers: When a requester invokes a web ser-
390vice, every argument of the requester and the return value of
391the web service should be associated with a security level
392number. The number is set by programmers because both
393the requester and the web service do not know the security
394levels of the arguments and the return value. The program-
395mers ﬁrst determine the security levels of the arguments
396and the return value. They then set proper security level
397numbers to the arguments and the return value. EXACML
398uses a four-bit unsigned number for a security level number.
399That is, the security level number is between 0 (i.e., ‘‘0000”
400in bit representation) and 15 (i.e., ‘‘1111” in bit representa-
401tion). In EXACML, larger security level number implies more
402sensitive information.
403(b) Credit level numbers: Every application and web service is
404associated with a credit level number. Like the security level
405number, EXACML uses a four-bit unsigned number for a
406credit level number. In EXACML, larger credit level number
407implies more reliable applications or web services.
408(c) Invocation graph: A web service may invoke other web ser-
409vices. The trust management mechanism needs an invoca-
410tion graph to indicate the invocation relationships among
411web services. The relationships facilitate identifying the
412composition of web services that will be invoked by a
413requester when the requester invokes a web services.
414
415Below we describe the use of the three sub-components in the
416trust management mechanism. When a newweb service is created,
417the service is registered to the UDDI. In addition to the web service,
418the existing web services that will be invoked by the newly added
419web service are also registered. Moreover, the security level num-
420bers of the newly added web service’s return value is also regis-
421tered. The registered invocation relationships allow the UDDI to
422establish an invocation graph. The UDDI then give an initial credit
423level number to the newly addedweb service. In our design, the ini-
424tial credit level number is 15 (i.e., full credit). The credit level num-
425bers of applications are also recorded in the UDDI and their initial
426values are also 15. Giving the newly added applications and web
427services the full credit is harmless because the EXACML model will
428stop the execution of an application or a web service when they at-
429tempt to leak information. We think that giving full credit results in
430the least limitation whenever the new applications and web ser-
431vices need to be executed. For example, when a requester want to
432invoke a new web service, the full credit of the web service in-
433creases the possibility of the web service to be invoked. That is,
434the utilization of new web services can be increased as long as they
435do not leak information. On the other hand, if a new web service
436leaks information, EXACML will prevent the leakage. Moreover,
437the credit levels of both applications and web services will be ad-
438justed according to their dynamic behavior during program execu-
439tion (see the credit level number promotion/demotion rules
440described below). As a summary, we think that giving the full credit
441to every newly added application and web service is reasonable.
442When an application APPLI intends to invoke a web service
443WEBSER, the programmers of APPLI assigns a security level number
4 S.-C. Chou, C.-H. HuangQ1 / The Journal of Systems and Software xxx (2009) xxx–xxx
JSS 8346 No. of Pages 8, Model 5G
14 July 2009 Disk Used
ARTICLE IN PRESS
Please cite this article in press as: Chou, S.-C., HuangQ1 , C.-H. An extended XACML model to ensure secure information access for web services. J. Syst. Soft-
ware (2009), doi:10.1016/j.jss.2009.06.045
U
N
C
O
R
R
E
C
T
E
D
P
R
O
O
F
569 Based on the EXACML model, we designed the architecture of
570 the model. Since EXACML is an extension of XACML, we let EXAC-
571 ML and XACML possesses the same components. Fig. 3 shows the
572 architecture of EXACML. The difference between Figs. 2 and 3 is
573 that an additional component ‘‘Information Flow Checker” is added
574 to EXACML. The component is a software agent that checks
575 whether an instruction will cause information ﬂow. If an instruc-
576 tion will cause information ﬂow, the agent sends the instruction
577 to EXACML to check whether the information ﬂow is secure (i.e.,
578 checks whether the information ﬂow instruction passes the two
579 EXACML secure rules). If the ﬂow is secure, the instruction is al-
580 lowed to execute. We add the agent because checking an instruc-
581 tion consumes much execution time. We let the agent
582 independently executed in a separate site to reduce runtime over-
583 head (see Section 5 for the experiment data). Below we describe
584 the assignment of information ﬂow control functions to the com-
585 ponents in Fig. 3:
586 (a) The ‘‘Policy Repository” stores the information of users,
587 roles, user-role assignments, ACLs, and DSOURCEs.
588 (b) PIP collects information for PDP to make decision. When a
589 requester intends to invoke a web service, PIP collects the
590 arguments, return value, and the variable that receives the
591 return value. Since the information sent from a requester
592 to a web service is XML-based message embedded in the
593 SOAP protocol, PIP is an XML interpreter.
594 (c) PDP ensures whether an invocation is allowed by checking
595 the basic requirements. The information needed to check
596 the basic requirements is collected by the PIP and received
597 from the UDDI. Moreover, PDP also checks whether an infor-
598 mation ﬂow is secure (i.e., checks whether the two EXACML
599 rules are fulﬁlled) during the execution of a web service. The
600 necessary information for the checking such as ACLs and
601 DSOURCEs is retrieved from the ‘‘Policy Repository”.
602 (d) PAP performs the join operation.
603 (e) PEP is an interface component. When PEP receives a request
604 from a requester to invoke a web service, PEP informs PIP to
605 collect information mentioned in item (b) above. The col-
606 lected information is then sent to PDP to check the fulﬁll-
607 ment of the EXACML basic requirements. If the checking
608 passes, PDP informs PEP and PEP allows the requester to
609 invoke the web service. When PEP receives instructions from
610 the ‘‘Information Flow Checker” agent to check information
611 ﬂow security, it sends the instructions to PDP. PDP then
612 checks the fulﬁllment of the two EXACML secure rules. If
613 the checking passes, PEP informs the web service to con-
614 tinue. Otherwise, PEP informs the web service to stop.
615(f) The ‘‘Context Handler” offers the same functions as the ori-
616ginal XACML model.
617(g) The UDDI stores the credit level numbers of applications and
618web services. It also stores the invocation graph and the
619security level numbers of web services’ return values. The
620information is not stored in the UDDI of the original web-
621service-based applications. However, it is necessary for
622EXACML. Storing the information is an extension of the UDDI
623to support EXACML.
624
625Fig. 3 depicts three major components in the EXACML architec-
626ture. They are the requester, the EXACML model (including the
627Information Flow Checker), and the web service. When using
628EXACML, we embed the model in a programming language. To pre-
629vent information leaked by applications or web services, they
630should be implemented using the EXACML-embedded program-
631ming language. Section 5 will depict the experiment data. In our
632experiments, we evaluate the overall results. It is difﬁcult to eval-
633uate the individual cost between components. Although we do not
634evaluate the cost between the ‘‘Information Flow Checker” and PEP
635in the current stage, it should be evaluated because ‘‘Information
636Flow Checker” is an agent. Evaluating the cost allows us to obtain
637the important information of using agents. We let the evaluation as
638a future work.
6394. Features
640As mentioned in Sections 1 and 2, quite a few models have been
641proposed for web services access control. The models we survey
642generally design policies to determine whether a requester can in-
643voke a web service. Section 1 clearly points out the problems of the
644existing models, which are: (a) the models protect only the infor-
645mation of web services, (b) the models only offer the ‘‘allow or re-
646ject” policy, and (c) the models cannot deny non-secure
647information access during the execution of a web service when
648the requester is allowed to invoke the web service.
649EXACML is designed to solve the problems by offering the fol-
650lowing features: (a) both the information of the requesters and that
651of the web services are protected, (b) the access control is more
652precise than the ‘‘allow or reject” policy (see Section 1 for more de-
653tailed explanation), and (c) the model will deny non-secure infor-
654mation access during the execution of a web service even when the
655requester is allowed to invoke the web service. The following
656descriptions prove that EXACML offers the features.
657Assume that: (a) the application APPLI intends to invoke the
658web serviceWEB, (b) the credit levels of APPLI andWEB are respec-
659tively APPcln andWEBcln, (c) the maximum security level number of
660the arguments sent by APPLI is MAXARGsln, and (d) the security le-
661vel number of the return value for WEB is WEBsln. When APPLI in-
662vokes WEB, APPLI should trust WEB. Otherwise WEB may leak the
663information sent by APPLI. In this regard, the credit level number
664of WEB should be at least the same as the security level number
665of every argument sent by APPI. This results in the requirement
666‘‘WEBcln >=MAXARGsln”, which can be achieved by EXACML’s ﬁrst
667basic requirement mentioned in Section 3.3 (note that the ﬁrst ba-
668sic requirement assumes that a set of web services are invoked by
669APPLI but here we use only one web service to simplify the expla-
670nation). On the other hand, when APPLI invokes WEB, WEB should
671trust APPLI. Otherwise, APPLI may leak WEB’s return value. In this
672regard, the credit level number of APPLI should be at least the same
673as the security level number of WEB’s return value. This results in
674the requirement ‘‘APPcln >=WEBsln”, which can be achieved by
675EXACML’s second basic requirement. According to the above
676description, the ﬁrst basic requirement protects the information
677sent to a web service and the second one protects the value re-
Fig. 3. EXACML architecture.
6 S.-C. Chou, C.-H. HuangQ1 / The Journal of Systems and Software xxx (2009) xxx–xxx
JSS 8346 No. of Pages 8, Model 5G
14 July 2009 Disk Used
ARTICLE IN PRESS
Please cite this article in press as: Chou, S.-C., HuangQ1 , C.-H. An extended XACML model to ensure secure information access for web services. J. Syst. Soft-
ware (2009), doi:10.1016/j.jss.2009.06.045
