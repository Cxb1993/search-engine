 
 
Abstract 
 
In this project three papers are completed: “Prefix Primitive Annihilators of Languages”, “A 
Note on Prefix Primitive Words” and “Prefix-Primitive Annihilators of Languages with some 
operations”: 
 
I. Prefix Primitive Annihilators of Languages 
This paper studies algebraic properties concerning the p-primitive annihilators of languages. 
The p-primitive annihilators of languages contain left P1-annihilators and right P1-annihilators. 
There are some interesting results presented in this paper. Such as: for every finite language L, the 
left P1-annihilator of L is not equal to the right P1-annihilator of L, the set γP_1(L) is not regular for 
any finite language L, and the set γP_1(L) is not empty for any thin language. 
(Published by “Proceedings of the 27th Workshop on Combinatorial Mathematics and 
Computation Theory”) 
 
II. A Note on Prefix Primitive Words 
This paper studies algebraic properties concerning the prefix primitive words. The p-primitive 
conjugates of related primitive words are considered. The characteristic of the non-p-primitive 
conjugate of d-primitive square-free word is studied. We also study some algebraic properties of 
annihilators concerning p-primitive words. 
(Accepted by “Acta Informatica”, DOI : 10.1007/s00236-010-0126-3.) 
 
III. Prefix-Primitive Annihilators of Languages with Different Operations 
  This paper studies algebraic properties concerning the p-primitive annihilators of languages 
with some different operations on languages, such as catenation, shuffle catenation and 
bi-catenation. There are some interesting results presented in this paper. Such as: for every finite 
language L, the left P1-annihilator of $L$ is not equal to the right P1-annihilator of L, the left 
P1-annihilator, γP_1(L), is not regular for any finite language L, and the setγP_1(L) is not empty for 
any thin language. We also give characterizations for P1-annihilators of L with respective to 
shuffle catenation and bi-catenation. 
(Submitted to “Discrete Mathematics & Theoretical Computer Science”) 
 
Key Words: Catenation, Shuffle Catenation, Bi-catenation, P-primitive, Annihilator. 
 
Prefix-Primitive Annihilators of Languages ∗
Chen-Ming Fan †
Department of Information Management
National Chin-Yi University of Technology, Taichung, Taiwan
Cheng-Chih Huang
School of Applied Information Sciences
Chung Shan Medical University, Taichung, Taiwan
Abstract
This paper studies algebraic properties concern-
ing the p-primitive annihilators of languages. The
p-primitive annihilators of languages contains left
P1-annihilators and right P1-annihilators. There
are some interesting results presented in this pa-
per. Such as: for every finite language L, the left
P1-annihilator of L is not equal to the right P1-
annihilator of L, the set γP1(L) is not regular for
any finite language L, and the set γP1(L) is not
empty for any thin language.
1 Introduction
The theory of formal languages plays a consid-
erable role in the field of computer science. Both
regular languages and disjunctive languages are es-
pecially important applications. Recall that every
regular language is accepted by a finite automa-
ton [6]. It is the union of the equivalence classes
of a congruence relation of finite index. Moreover,
from the definition of disjunctive languages, every
disjunctive language has infinitely many congru-
ence classes. This yields that no disjunctive lan-
guage is regular. For a given language L ⊆ X∗,
the relation PL defined on X∗ by
u ≡ v(PL)⇔ (xuy ∈ L⇔ xvy ∈ L,∀x, y ∈ X∗)
is a congruence. A language L is regular if PL is of
finite index and is disjunctive if PL is the equality.
A word f ∈ X+ is a primitive word if f is not
a power of any other word. It is known that every
nonempty word is a power of a primitive word and
the expression is unique. The set of all primitive
∗This work was supported by the National Science
Council R.O.C. under Grant NSC 98-2221-E-167-012-.
†Corresponding author: fan@ncut.edu.tw
words over X is, by the standard way, denoted
by Q. (see [8], [11]) No beginning square words
are introduced and studied in [2] and [4]. Since
every no beginning square word is primitive, no
beginning square words are called prefix primitive
words, shortly p-primitive words. The set of all
p-primitive words over X is denoted by P1.
The concept of annihilators of languages is pro-
posed by Shyr and Yu in [10]. This is somewhat
like the T-conductor of a vector into a given sub-
space studied in linear algebra. When a binary
operation is applied to a given language with an-
other language, we would like to know what fam-
ily of languages the other language can be cho-
sen from such that the result belongs to a specific
family. Let F be a family of languages and L is
a language. Then a language A is called a right
F-annihilator of L if LA is a language in F and
a language B is called left F-annihilator of L if
BL is a language in F . There are many anni-
hilators had been studied, such as Q-annihilators
[10], D-annihilators [12], P-annihilators [12] and
d-primitive annihilators [13]. Let S be the fam-
ily of all p-primitive languages. Then we de-
note p-primitive annihilators of languages by S-
annihilators. There are many different proper-
ties between S-annihilators and Q-annihilators,
D-annihilators, P-annihilators. For example, the
catenation of languages is Q-commutative but is
not S-commutative. This provides us the initial
motivation for studying p-primitive annihilators of
languages.
2 Definitions and Preliminaries
Let X be a finite alphabet and X∗ be the free
monoid generated by X. Any element of X∗ is
called a word. For any word u ∈ X∗, let lg(u) be
The 27th Workshop on Combinatorial Mathematics and Computation Theory
258
From Example 3.1, we see that αP1({a}) 6=
γP1({a}). That is, αP1(L) need not equal to
γP1(L), for any L ⊆ X∗. We now give some lan-
guages L such that αP1(L) = γP1(L).
Lemma 3.3 Let a 6= b ∈ X and let L =
{balg(u)+1ubalg(u)+1 | u ∈ X+ \ {a}}. Then
αP1(L) = γP1(L) = {a}. Indeed, by the definition
of lg(u), we have that balg(u)+1ubalg(u)+1 ∈ P1.
That is, L ⊆ P1. For any u ∈ X+ \ {a}, it
is clear that Lu = ∅ and La ⊆ P1. That is,
αP1(L) = {a}. On the other hand, it is clear that
aL ⊆ P1 and uL = ∅ for any u ∈ X+ \ {a}. That
is, γP1(L) = {a}. Thus αP1(L) = γP1(L) = {a}.
Example 3.2 Let a 6= b ∈ X and let L =
{balg(u)+1ubalg(u)+1 | u ∈ X+ \ {a, ab}}. Then
αP1(L) = γP1(L) = {a, ab}. Indeed, by the defi-
nition of lg(u), we have that balg(u)+1ubalg(u)+1 ∈
P1. That is, L ⊆ P1. For any u ∈ X+ \ {a, ab},
it is clear that Lu = ∅ and Lab, La ⊆ P1. That
is, αP1(L) = {a, ab}. On the other hand, it is
clear that aL, abL ⊆ P1 and uL = ∅ for any
u ∈ X+ \ {a, ab}. That is, γP1(L) = {a, ab}. Thus
αP1(L) = γP1(L) = {a, ab}.
A language L ⊆ X∗ is dense if for any w ∈ X∗,
there exist x, y ∈ X∗ such that xwy ∈ L. That is,
for every w ∈ X∗, X∗wX∗ ∩ L 6= ∅. A language
is called thin if it is not dense. In the rest of this
section, we show that every thin language L, the
left P1-annihilator γP1(L) is not empty. First, we
give some known lemmata we need. From the defi-
nitions of αP1 and γP1 , it is clear that αP1(X) = ∅
and γP1(X
∗) = ∅. Let L ⊆ X+. In Proposition
3.2, we give characteristics for that αP1(L) 6= ∅
and γP1(L) 6= ∅.
Lemma 3.4 ([2]) Let u, v be two distinct words
with u ∈ P1(X). Then uv is a p-primitive word if
and only if none of the following statements holds:
(1) u <p v,
(2) u = x1x2x1 with x2 ≤p v where x1, x2 ∈ X+,
or
(3) v = x1ux1y where x1 ∈ X+, y ∈ X∗.
Proposition 3.2 ([1]) Let L ⊆ X+. The follow-
ing statements are true:
(1) αP1(L) 6= ∅ if and only if L ⊆ P1 and La ⊆ Q
for some a ∈ X.
(2) γP1(L) 6= ∅ if and only if there exists a p-
primitive word, say u ∈ P1, such that both of
the following conditions hold:
(i) xux /∈ Lp for every x ∈ X∗, and
(ii) u /∈ yLpy for every y ∈ X+.
From above proposition, the following remark
is trivial:
Remark 3.1 Let L ⊆ X+. The following state-
ments are true:
(1) αP1(L) = ∅ if and only if one of the following
conditions holds: (i) L 6⊆ P1, (ii) L ⊆ P1 and
La 6⊆ Q for every a ∈ X.
(2) γP1(L) = ∅ if and only if, for every u ∈ P1,
one of the following conditions holds: (i)
xux ∈ Lp for some x ∈ X∗, (ii) u ∈ yLpy
for some y ∈ X+.
(3) If L ⊆ P1 and La ⊆ Q for some a ∈ X,
then La ⊆ P1 and then a ∈ αP1(L).Moreover,
xax /∈ L for every x ∈ X∗.
(4) If u ∈ P1 such that both of (i) xux /∈ Lp for
every x ∈ X∗, and (ii) u /∈ yLpy for every
y ∈ X+ are true, then u ∈ γP1(L). Moreover,
zuzv /∈ L for every z, v ∈ X∗.
Proposition 3.3 Let L ⊆ X+. If L is thin, then
γP1(L) 6= ∅.
Proof. Suppose that L is thin. Then there ex-
ists a word w ∈ X+ such that L ∩ X∗wX∗ = .
Let a 6= b ∈ X and let u = balg(w)wbalg(w). It
is clear that u ∈ P1. We claim that u ∈ γP1(L).
On the other contrary, assume that u /∈ γP1(L).
Then there exists v ∈ L such that uv /∈ P1.
This in conjunction with u ∈ P1, there exists
z ∈ X+ with z ≤p v such that uz = f2, where
f ∈ Q. That is, balg(w)wbalg(w)z = f2. This im-
plies that f = balg(w)w or balg(w)wbalg(w) ≤p f.
If f = balg(w)w, then z = w. This implies that
w = z ≤p v and then w ∈ Lp. This contra-
dicts to L∩X∗wX∗. If balg(w)wbalg(w) ≤p f, then
there exists x ∈ X∗, y ∈ X+ with v = xy
such that f = balg(w)wbalg(w)x = y. This im-
plies xbalg(w)wbalg(w)x = xy = v ∈ L. Thus
L ∩ X∗wX∗ 6= ∅, a contradiction. Hence u =
balg(w)wbalg(w) ∈ γP1(L). #
A language is a 2-code if for every two distinct
words in the language constructs a code. ([11])
That is, L ⊆ X+ is a 2-code if for every u, v ∈ L,
{u, v} is a code.
The 27th Workshop on Combinatorial Mathematics and Computation Theory
260
5 Conclusion
This paper studies algebraic properties con-
cerning the p-primitive annihilators of languages.
The p-primitive annihilators of languages contains
left P1-annihilators and right P1-annihilators. We
show that for every finite language L, the left
P1-annihilator of L is not equal to the right P1-
annihilator of L.We also show that the set γP1(L)
is not regular for any finite language L. More-
over, the set γP1(L) is not empty for any thin
language. In future work, Languages L such that
γP1(L) = αP1(L) will be investigated related alge-
braic properties.
Acknowledgement
This work was supported by the National Sci-
ence Council R.O.C. under grant NSC 98-2221-
E-167-012-. The authors would like to thank the
referees for their careful reading of the manuscript
and useful suggestions.
References
[1] Chen-Ming Fan and C. C. Huang, ”A Note on
Prefix Primitive Languages”, Acta Informtica,
(Summited)
[2] Chen-Ming Fan, C. C. Huang and S. S. Yu,
”On n-Power Prefix Languages”, International
Journal of Computer Mathematics, Vol.85,
No.5, pp. 703–715, 2008.
[3] S. C. Hsu, M. Ito and H. J. Shyr, ”Some
Properties of Overlapping Order and Related
Languages”, Soochow Journal of Mathematics,
Vol.15, pp. 29–45, 1989.
[4] C. C. Huang, S. S. Yu and Yu-Kuang Zhao,
”Prefix Primitive Languages”, Journal of In-
formation & Optimization Sciences, Vol.25,
No.2, pp. 303–316, 2004.
[5] R. C. Lyndon and M. P. Schu¨tzenberger, ”On
the Equation aM = bNcP in a Free Group”,
Michigan Mathematical Journal, Vol.9, pp.
289–298, 1962.
[6] M. O. Rabin and D Scott, Finite Automata
and Their Decision Problem, IBM. J. Res. De-
velop, 3 (1959), 114–125.
[7] C. M. Reis and H. J. Shyr, Some Properties
of Disjunctive Languages on a Free Monoid,
Information and Control, Vol.37, No.3 (1978),
334–344.
[8] H. J. Shyr, Free Monoids and Languages,
Third Edition, Hon Min Book Company,
Taichung, Taiwan, 2001.
[9] H. J. Shyr and G. Thierrin, ”Disjunctive Lan-
guages and Codes”, Fundamentals of Com-
putation Theory, Proceedings of the 1977 In-
ter. FCT-Conference, Poznan, Poland, Lecture
Notes in Computer Science, No.5, Springer-
Verlag, pp. 171–176, 1977.
[10] H. J. Shyr and S. S. Yu, ”Annihilators of Lan-
guages”, In: Words, Languages, and Combina-
torics II, World Scientific.Publishing, Edited
by M. Ito and Hu¨rgensen, (1994), 406–414.
[11] H. J. Shyr and S. S. Yu, ”2-Codes and 2-
Code Annihilators”, Semigroup Forum, Vol. 56
(1998), 36–48.
[12] S. S. Yu, ”Properties of Annihilators of Lan-
guages, Semigroup Forum, Vol. 56 (1998), 49–
69.
[13] S. S. Yu, ”d-Minimal Languages”, Discrete
Applied Mathematics, Vol. 89 (1998), 243–262.
The 27th Workshop on Combinatorial Mathematics and Computation Theory
262
primitive words whose conjugates are all not p-primitive. Some algebraic properties of annihilators
concerning p-primitive words are considered in the final section. We study the characterization of
right P1-annihilator and left P1-annihilator. Furthermore, the left P1-annihilator of finite language
is a dense 2-code.
2 Definitions and Preliminaries
Let X be a finite alphabet and X∗ be the free monoid generated by X. Any element of X∗ is
called a word. For any word u ∈ X∗, let lg(u) be the length of u, which is the number of letters
occurring in u. Any subset of X∗ is called a language over X. Let X+ = X∗ \ {λ}, where λ is the
empty word. A word w ∈ X+ is said to be primitive if w = un with u ∈ X+ implies n = 1. It
is known that every nonempty word is a power of a primitive word and the expression is unique.
The set of all primitive words over X is denoted by Q. If u = fn where f ∈ Q and n ≥ 1, then
f is the primitive root of u and denoted by f =
√
u and n = µ(u). The system < X∗, ◦ > is
known as a free monoid, where the operation ◦ is the catenation of two words. For convenience,
for any u, v ∈ X∗, let u ◦ v = uv. The catenation of two languages A and B is defined to be the
set A ◦B = AB = {xy | x ∈ A, y ∈ B}.
For a language L, let L(i) = {wi | w ∈ L} for any i ≥ 1. The partial order relation ≤p (resp., ≤s)
is defined as: for u, v ∈ X∗, u ≤p v (resp., u ≤s v) if v ∈ uX∗ (resp., v ∈ X∗u). A word u is said to
be a prefix (resp., suffix) of another word w if u ≤p w (resp., u ≤s w). For a given word x ∈ X+,
we define the infix of the word x as E(x) = {y ∈ X+|x ∈ X∗yX∗}. A word w is said to be prefix
primitive (shortly, p-primitive), i.e., w ̸∈ u2X∗ for any u ∈ X+. It is clear that the empty word
is not prefix primitive. The set of all p-primitive words over X is denoted by P1. For example:
let X = {a, b}. Then abn is a p-primitive word for any n ≥ 1. It is clear that P1 is a subset of Q.
A word u is a conjugate of another word v if there is a word w such that uw = wv. The partial
order relation ≤d is defined as: for u, v ∈ X∗, u ≤d v if v = ux = yu for some x, y ∈ X∗. Note
that 1 ≤d v for any v ∈ X+. A word u ∈ X+ is said to be d-primitive if for any v ∈ X+, v ≤d u
implies u = v. A d-primitive word is called an unbordered word in [7]. Let D(1) be the set of all
d-primitive words in X∗ (see [3]). It is clear that D(1) is also a subset of Q. For a word u ∈ X+,
let Pref(u) = {v ∈ X+ | v ≤p u} and Suff(u) = {v ∈ X+ | v ≤s u}. For a language L ⊆ X+, let
Lp = {v ∈ X+ | v ≤p u, for some u ∈ L} and Ls = {v ∈ X+ | v ≤s u, for some u ∈ L}.
Let L ⊆ X+ be a language and F be a family of languages. The right F -annihilating function
on 2X
+
, denoted αF , is defined by αF(L) = {Y ⊆ X+ | LY ∈ F} (see [10]). Every element in
αF(L) is called a right F -annihilator of the language L. Dually, the left F -annihilating function
on 2X
+
, denoted γF , is defined by γF(L) = {Y ⊆ X+ | Y L ∈ F}.
The following lemmata are well known properties which are needed in the sequel.
Lemma 2.1 ([6]) If uw = wv for u, v, w ∈ X∗ with u ̸= 1, then u = xy, w = (xy)nx, v = yx for
some x, y ∈ X∗ and n ≥ 0.
By virtue of Lemma 2.1, a word v is a conjugate of another word u if and only if u = xy and
v = yx for some x, y ∈ X∗. Hence a conjugate of a word u is also called a cyclic permutation of
u. For any word u, the set of conjugates of u is defined as σ(u) = {v | v is a conjugate of u}. For
instance, let u = aaba. Then σ(u) = {aaba, aaab, baaa, abaa}.
2
(1) u = xyxzy. If x ≤s xz, then there exists x′ ∈ X∗ such that xz = x′x. This yields that
u = xyx′xy ̸∈ D(1), a contradiction; hence x ̸≤s xz. Next, we suppose that xy /∈ D(1). By
Lemma 3.2, one of the following conditions holds:
(i) There exists r ∈ X+ such that r is a prefix of x and a suffix of y, that is, r ∈ Pref(x)∩Suff(y),
a contradiction.
(ii) There exist r ∈ X+, s ∈ X∗ such that x = rysr. Then u = rysryrysrzy = rys(ry)2srzy is
not square-free, a contradiction.
(iii) There exist r ∈ X+, s ∈ X∗ such that y = rsxr. Then u = xrsxrxzrsxr ̸∈ D(1), a
contradiction.
Hence xy ∈ D(1).
(2) u = xzyxy. If y ≤p zy, then there exists y′ ∈ X∗ such that yy′ = zy, which implies that
u = xyy′xy ̸∈ D(1), a contradiction; hence y ̸≤p zy. Next, we suppose that xy /∈ D(1).
This proof is similar to case (1). By Lemma 3.2 again, if (i) holds, then it contradicts that
Pref(x) ∩ Suff(y) = ∅. If (ii) holds, then u = rysrzyrysry ̸∈ D(1), a contradiction. If (iii)
holds, then u = xzrsxrxrsxr = xzrs(xr)2rsxr is not square-free, a contradiction. Hence
xy ∈ D(1). #
In the following, we provide a procedure to construct d-primitive square-free words. This
method, which has made up square-free words provided in [1], is used to construct d-primitive
square-free words as follow:
Let w10 = a, w20 = b, w30 = c, w40 = c. For n ≥ 0, one define
w1(n+1) = w1nw2nw4nw2nw1nw3nw2nw3nw1nw4n w2nw1nw3nw1nw2nw1nw4nw2n,
w2(n+1) = w1nw2nw4nw2nw1nw3nw2nw3nw1nw2n w1nw3nw1nw2nw3nw1nw4nw2n,
w3(n+1) = w3nw1nw2nw4nw2nw1nw2nw3nw1nw2n w1nw3nw1nw2nw3nw1nw4nw2n,
w4(n+1) = w3nw1nw2nw4nw2nw1nw2nw3nw1nw4n w2nw1nw3nw1nw2nw1nw4nw2n.
If n = 0, then we have w11 = abcbacbcacbacabacb,
w21 = abcbacbcabacabcacb,
w31 = cabcbabcabacabcacb,
w41 = cabcbabcacbacabacb.
Lemma 3.3 ([1]) The words w1n, w2n, w3n, w4n, w1nw2n, w1nw3n, w1nw4n, w2nw3n, w2nw4n
are cyclic square-free and Pref(win) ∩ Suff(wjn) = ∅ for every n ≥ 1 and 1 ≤ i, j ≤ 4.
Lemma 3.4 The words w2nw3nw1nw2nw4nw2nw1n, w1nw2nw3nw1nw2n, and w4nw2nw1nw3n are
all square-free for any n ≥ 1.
Proof. By Lemma 3.3, the words w1(n+1)w3(n+1) and w1(n+1)w4(n+1) are cyclic square-free. From
the definition of cyclic square-free, the subword w2nw3nw1nw2nw4nw2nw1n and w4nw2nw1nw3n of
w1(n+1)w4(n+1) are all square-free for any n ≥ 1. Moreover, the subword w1nw2nw3nw1nw2n of
w1(n+1)w3(n+1) is square-free for any n ≥ 1. #
In the above definition, win, i = 1, 2, 3, 4, n ≥ 0 are all cyclic square-free. That is, all conjugate
of win are d-primitive square-free. In the following, we give a d-primitive square-free word is not
a cyclic square-free.
4
that w3n = w4n, a contradiction; hence x
′ <p w2n with x′ ∈ X+. This in conjunction with
x′ <s x ≤s w1n yields that x′ ∈ Pref(w2n)∩Suff(w1n), a contradiction. If lg(x) < lg(z2), then
there exists z′ ∈ X+ such that z2 = xz′ and w2nw3nz1 = z′w2nw4ny; hence z′ <p w2n. This
in conjunction with z′ <s z2 <s w1n yields that z′ ∈ Pref(w2n) ∩ Suff(w1n), a contradiction.
(1-3) w2 = xw2nw3nw1nw2nw4nw2ny for some y ∈ X+ with y ≤p w1n. This subcase is similar to
subcase (1-1).
(2) w2 ∈ E(w2nw3nw1nw2nw4nw2nw1nw3n). Since w2nw3nw1nw2nw4nw2nw1n is square-free, there
exists y ∈ X+ with y ≤p w3n such that w2 ≤s w2nw3nw1nw2nw4nw2nw1ny. Note that
y <s w. Indeed, if w ≤s y, then lg(w) ≤ lg(y). This in conjunction with y ≤p w3n and
lg(w3n) = lg(w1n) yields that w
2 ∈ E(w1nw3n) which contradicts that w1nw3n is square-free.
From w4nw2nw1nw3n is square-free by Lemma 3.4, we need to consider the following four
subcases:
(2-1) w2 = xw4nw2nw1ny for some x ∈ X+ with x ≤s w2n. There exist z1, z2 ∈ X+ such that
w2n = z1z2 and w = xw4nz1 = z2w1ny. If lg(y) > lg(z1), then there exists y
′ ∈ X+ such
that y = y′z1 and xw4n = z2w1ny′. Since y ≤p w3n, it follows that lg(y) = lg(y′z1) ≤
lg(w3n) = lg(w4n). Hence y
′ <s w4n. This in conjunction with y′ <p y ≤p w3n yields that
y′ ∈ Pref(w3n) ∩ Suff(w4n), a contradiction. If lg(z1) > lg(y), then there exists z′ ∈ X+
such that z1 = z
′y and xw4nz′ = z2w1n. Since z1 <p w2n, it follows that lg(z1) = lg(z′y) <
lg(w2n) = lg(w1n). Hence z
′ <s w1n. This in conjunction with z′ <p z1 <p w2n yields
that z′ ∈ Pref(w2n) ∩ Suff(w1n), a contradiction. If lg(y) = lg(z1), then y = z1. This in
conjunction with xw4nz1 = z2w1ny yields that w4n = w1n, a contradiction.
(2-2) w2 = xw2nw4nw2nw1ny for some x ∈ X+ with x ≤s w1n. There exist z1, z2 ∈ X+ such that
either (i) w4n = z1z2 and w = xw2nz1 = z2w2nw1ny, or (ii) w2n = z1z2 and w = xw2nw4nz1 =
z2w1ny. Assume that (i) holds. Then lg(xw2nz1) = lg(z2w2nw1ny) ≤ lg(w1nw2nz1) because
x ≤s w1n. This implies that lg(z1) ≥ lg(z2y); hence lg(z1) > lg(y). There exists z′ ∈ X+
such that z1 = z
′y and xw2nz′ = z2w2nw1n. Since lg(w1n) = lg(w4n) = lg(z′yz2), it follows
that lg(z′) < lg(w1n); hence z′ <s w1n. This in conjunction with z′ <p z1 ≤p w4n yields
that z′ ∈ Pref(w4n) ∩ Suff(w1n), a contradiction. Moreover, assume that (ii) holds. Then
lg(xw2nw4nz1) = lg(z2w1ny). This implies that lg(x) + lg(z1z2) + lg(z1) = lg(z2) + lg(y);
hence lg(y) > lg(z1). There exists y
′ ∈ X+ such that y = y′z1 and xw2nw4n = z2w1ny′. Since
y ≤p w3n, it follows that lg(y) = lg(y′z1) ≤ lg(w3n) = lg(w4n); hence y′ <s w4n. This in
conjunction with y′ <p y ≤p w3n yields that y′ ∈ Pref(w3n) ∩ Suff(w4n), a contradiction.
(2-3) w2 = xw1nw2nw4nw2nw1ny for some x ∈ X+ with x ≤s w3n. This subcase is similar to
subcase (2-1).
(2-4) w2 = xw3nw1nw2nw4nw2nw1ny for some x ∈ X+ with x ≤s w2n. This subcase is similar to
subcase (2-2).
(3) w2 = xw2nw3nw1nw2nw4nw2nw1ny for some x, y ∈ X+ with x ≤s w1n, y ≤p w3n. There exist
z1, z2 ∈ X+ such that w2n = z1z2 and w = xw2nw3nw1nz1 = z2w4nw4nw2ny. This subcase is
similar to subcase (2-1). #
In the following proposition, we find that there is a d-primitive square-free word over an alpha-
bet with three elements having non-p-primitive conjugate.
6
(I) v3k+5 = (ba
kbak+1b)(ak+1bakbak+1) = (bak)2abak+1bakbak+1 ̸∈ P1.
(J) vi, i = 3k + 6, . . . , 4k + 4. In this case, a
k−(i−(3k+5)−1) <p vi. Since 3k + 6 ≤ i ≤ 4k + 4, it
follows that k − (i− (3k + 5)− 1) = (4k + 4)− i+ 2 ≥ 2. That is, a2 ≤p a(4k+4)−i+2 <p vi;
hence vi ̸∈ P1 for i = 3k + 6, . . . , 4k + 4.
(K) v4k+5 = (aba
k+1b)(ak+1bakbak+1bak−1) = (abak)2abakbak+1bak−1 /∈ P1.
(L) v4k+6 = (ba
k+1b)(ak+1bakbak+1bak) = (bak+1)2bakbak+1bak ̸∈ P1.
(M) vi, i = 4k+7, . . . , 5k+6. In this case, a
(k+1)−(i−(4k+6)−1) <p vi. Since 4k+7 ≤ i ≤ 5k+6, it
follows that (k+1)−(i−(4k+6)−1) = (5k+6)−i+2 ≥ 2. That is, a2 ≤p a(5k+6)−i+2 <p vi;
hence vi ̸∈ P1 for i = 4k + 7, . . . , 5k + 6.
(N) v5k+7 = (ab)(a
k+1bakbak+1bakbak) = (abak)2bak+1bakbak /∈ P1.
(O) v5k+8 = (b)(a
k+1bakbak+1bakbak+1) = (bak+1bak)2bak+1 ̸∈ P1.
From above discussion, every conjugate of uk for all k = 1, 2, . . . is not p-primitive. #
4 The Annihilators of P-primitive Languages
Some algebraic properties of annihilators concerning p-primitive words are studied in this sec-
tion. Let L ⊆ X+ be a language and P1 be the set of all p-primitive words. The right P1-
annihilating function on 2X
+
, denoted αP1 , is defined by αP1(L) = {w ∈ X+ | Lw ⊆ P1}. Every
element in αP1(L) is called a right P1-annihilator of the language L. Dually, the left P1-annihilating
function on 2X
+
, denoted γP1 , is defined by γP1(L) = {w ∈ X+ | wL ⊆ P1}.
Example 1 Let X = {a, b} be an alphabet and L = ab+. Then
αP1(L) = a
+ ∪ b+ ∪ (aa+bX∗ ∪ b+aX∗ \ {xabixy|i ≥ 1, x ∈ X+, y ∈ X∗})
and
γP1(L) = {b} ∪ ba+X∗ ∪ ab+aX∗ \ {xabix|i ≥ 1, x ∈ X+}.
In above examples, it is clear that γP1(L) ̸= αP1(L) for L = ab+. That is γP1(L) ̸= αP1(L) in
general. From definitions of right P1-annihilators and left P1-annihilators, the following results
are clear.
Lemma 4.1 Let L ⊆ X+. The following statements are true:
(1) If αP1(L) ̸= ∅, then L ⊆ P1.
(2) If γP1(L) ̸= ∅, then γP1(L) ⊆ P1.
Proof. Let L ⊆ X+.
(1) If L ̸⊂ P1, then for every u ∈ X+, Lu ̸⊂ P1. This implies that αP1(L) = ∅ for any L ̸⊂ P1.
(2) Since γP1(L) ̸= ∅, there exists w ∈ γP1(L) such that wL ⊆ P1. If w is not a p-primitive word,
then wL ̸⊆ P1, a contradiction. Thus γP1(L) ⊆ P1. #
Lemma 4.2 Let L ⊆ X+. If u ∈ αP1(L), then v ∈ αP1(L) for every v ≤p u.
8
(2) Suppose that γP1(L) ̸= ∅. Then, by Lemma 4.1(2), γP1(L) ⊆ P1. There exists a word u ∈ P1
such that u ∈ γP1(L). By Lemma 4.4, both of Conditions (i) and (ii) hold. Conversely, suppose
that both of Conditions (i) and (ii) hold. By Lemma 4.4, u ∈ γP1(L). Hence γP1(L) ̸= ∅. #
From above proposition, the following remark is trivial:
Remark 4.1 Let L ⊆ X+. The following statements are true:
(1) If L ⊆ P1 and La ⊆ Q for some a ∈ X, then La ⊆ P1; hence a ∈ αP1(L). It follows that
xax /∈ L for every x ∈ X∗.
(2) If u ∈ P1 such that both xux /∈ Lp for every x ∈ X∗ and u /∈ yLpy for every y ∈ X+ are
true, then u ∈ γP1(L). It follows that zuzv /∈ L for every z, v ∈ X∗.
In the following, we discuss some properties of P1-annihilators for finite languages. A language
L ⊆ X∗ is dense if for any w ∈ X∗, there exist x, y ∈ X∗ such that xwy ∈ L. That is, for every
w ∈ X∗, X∗wX∗ ∩ L ̸= ∅. A language is called thin if it is not dense. So every finite language is
thin.
Proposition 4.2 Let L ⊆ X+ be a finite language. Then γP1(L) is dense.
Proof. Let L ⊆ X+ be a finite language and m = max{lg(x) | x ∈ L}. Let u ∈ X∗, x = ablg(u)+m,
and y = λ for some a ̸= b ∈ X. Then for every v ∈ L, we have that xuyv = ablg(u)+muv ∈ P1.
That is, xuyL ⊆ P1. It follows that xuy ∈ γP1(L); hence γP1(L) is dense. #
The result is not true for right P1-annihilators. That is, there exists a finite language L ⊆ P1
such that αP1(L) is not dense. In fact, for a finite language L ⊆ X+, αP1(L) may be dense or
thin, finite or infinite. We give some examples as follows. Let X = {a, b}.
Example 2 Let L = {ab, ba, ba2b, ab2a}. Then it is clear that a, b ∈ αP1(L). But a2, ab, ba, b2 /∈
αP1(L). Since X
+ = {a, b} ∪ {a2, ab, ba, b2}X∗, we have αP1(L) = {a, b} is finite; hence αP1(L) is
thin.
Example 3 Let L = {ba3b, ba2b2, ba2baba, bab3, aba3, ab2abab, ab2a2, ab3a}. Then it is clear that
a2, ab, ba, b2 ∈ αP1(L) and by Lemma 4.2, a, b ∈ αP1(L). But a3, a2b, aba, ab2, ba2, bab, b2a, b3 /∈
αP1(L). Since X
+ = X ∪X2 ∪X3X∗, we have αP1(L) = {a, b, a2, ab, ba, b2} is finite; hence αP1(L)
is thin.
Example 4 Let L = {ba}. Then for every u ∈ X∗, we have baalg(u)u ∈ P1. Thus alg(u)u ∈ αP1(L).
Now let x = alg(u), y = λ. Then xuy ∈ αP1(L); hence αP1(L) is dense.
The catenation of languages ◦ is called F -commutative if for every L1, L2 ⊆ X+, L1 ◦ L2 ∈ F
if and only if L2 ◦L1 ∈ F where F is a family of languages. We known that ◦ is Q-commutative.
The result is not true for the family of p-primitive languages. In the following Proposition, we
show that ◦ is not P1-commutative. That is, for every L1, L2 ⊆ X+, L1 ◦L2 ⊆ P1 need not imply
L2 ◦ L1 ⊆ P1.
Lemma 4.5 ([11]) Let F be a family of languages and let ◦ be the catenation of languages. Then
◦ is F-commutative if and only if γF(L) = αF(L) for all L ⊆ X+.
10
[10] S. S. Yu, ”Properties of Annihilators of Languages, Semigroup Forum, Vol.56, pp. 49–69,
1998.
[11] S. S. Yu, Lecture Notes: Languages and Codes, Department of Computer Sciences, National
Chung-Hsing University, Taichung, Taiwan, 2003.
12
2A word f ∈ X+ is a primitive word if f is not a power of any other word. It is
known that every nonempty word is a power of a primitive word and the expression is
unique. The set of all primitive words over X is, by the standard way, denoted by Q
(see [13], [19]). No beginning square words were introduced and studied in [6] and [4].
Since every no beginning square word is primitive, no beginning square words are called
prefix primitive words, shortly p-primitive words. The set of all p-primitive words over
X is denoted by P1.
The concept of annihilators of languages was proposed by Shyr and Yu in [15]. This
is somewhat like the T-conductor of a vector into a given subspace studied in linear
algebra. When a binary operation is applied to a given language with another language,
we would like to know what family of languages the other language can be chosen from
such that the result belongs to a specific family. Let F be a family of languages and
L is a language. Then a language A is called a right F-annihilator of L if LA is a
language in F and a language B is called left F-annihilator of L if BL is a language in
F . There are many annihilators of languages had been studied, such as Q-annihilators
[15], D-annihilators [17], P-annihilators [17] and d-primitive annihilators [18], where Q,
D, P are denoted the families of primitive languages, dense languages and prefix lan-
guages, respectively. Let S be the family of all p-primitive languages. Then we denote
annihilators of p-primitive languages by S-annihilators. There are many different prop-
erties between S-annihilators and Q-annihilators, D-annihilators, P-annihilators. For
example, the catenation of languages is Q-commutative but is not S-commutative. This
provides us the initial motivation for studying p-primitive annihilators of languages.
2 Definitions and Preliminaries
Let X be a finite alphabet and X∗ be the free monoid generated by X. Any element
of X∗ is called a word. For any word u ∈ X∗, let lg(u) be the length of u, which is the
number of letters occurring in u. Any subset of X∗ is called a language over X. Let
X+ = X∗ \ {λ}, where λ is the empty word. A word w ∈ X+ is said to be primitive if
w = un with u ∈ X+ implies n = 1. It is known that every nonempty word is a power
of a primitive word and the expression is unique. The set of all primitive words over X
is denoted by Q. The system < X∗, ◦ > is known as a free monoid, where the operation
◦ is the catenation of two words. For convenience, for any u, v ∈ X∗, let uv = u ◦ v.
The catenation of two languages A and B is defined to be the set AB = A ◦ B and
AB = {xy | x ∈ A, y ∈ B}. For a language L, let L(i) = {wi | w ∈ L} for any i ≥ 1.
The partial order relation ≤p (resp., ≤s) is defined as: for u, v ∈ X∗, u ≤p v (resp.,
u ≤s v) if v ∈ uX∗ (resp., v ∈ X∗u). A word u is said to be a prefix (resp., suffix) of
another word w if u ≤p w (resp., v ≤s w). For a given word u ∈ X+, we define the
infix of the word u as E(u) = {v ∈ X+|u ∈ X∗vX∗}. The partial order relation ≤d
is defined as: for u, v ∈ X∗, u ≤d v if v = ux = yu for some x, y ∈ X∗. Note that
1 ≤d v for any v ∈ X+. For a word u ∈ X+, let Pref(u) = {v ∈ X+ | v ≤p u} and
Suff(u) = {v ∈ X+ | v ≤s u}.
A word w is said to be prefix primitive (shortly, p-primitive), i.e., w ̸∈ u2X∗ for
any u ∈ X+. The set of all p-primitive words over X is denoted by P1. For example:
let X = {a, b}. Then abn is a p-primitive word for any n ≥ 1. It is clear that P1 is a
subset of Q. A word u is a conjugate of another word v if there is a word w such that
uw = wv. A word u ∈ X+ is said to be d-primitive if for any v ∈ X+, v ≤d u implies
4(2) γP1(L) = ∅ if and only if for every u ∈ P1, one of the following conditions holds:
(i) xux ∈ Lp for some x ∈ X∗, (ii) u ∈ yLpy for some y ∈ X+.
(3) If L ⊆ P1 and La ⊆ Q for some a ∈ X, then La ⊆ P1; hence a ∈ αP1(L).
Moreover, xax /∈ L for every x ∈ X∗.
(4) If u ∈ P1 such that both of (i) xux /∈ Lp for every x ∈ X∗, and (ii) u /∈ yLpy for
every y ∈ X+ are true, then u ∈ γP1(L). Moreover, zuzv /∈ L for every z, v ∈ X∗.
Proposition 2 Let L ⊆ X+. The following statements are true:
(1) If αP1(L) = ∅, then every language A contains L,αP1(A) = ∅.
(2) If γP1(L) = ∅, then every language A contains L, γP1(A) = ∅.
Proof We only show that statement (1) is true and the proof of statement (2) is similar.
Since αP1(L) = ∅, we have that Lu ̸⊆ P1 for every u ∈ X+. That is, for every u ∈ X+,
there exists a word w ∈ L such that wu /∈ P1. This implies that for every u ∈ X+,
there exists w ∈ L ⊆ A such that wu /∈ P1; hence Au ̸⊆ P1. That is, αP1(A) = ∅. ⊓⊔
A language L ⊆ X∗ is dense if for any w ∈ X∗, there exist x, y ∈ X∗ such that
xwy ∈ L. That is, for every w ∈ X∗, X∗wX∗ ∩ L ̸= ∅. A language is called thin if it
is not dense [1]. That is, for any thin language L, there exists a word w ∈ X∗ such
that L ∩X∗wX∗ = ∅. It is clear that every finite language is thin. We will show that
for every thin language L, the left P1-annihilator γP1(L) is not empty in the following
proposition.
Proposition 3 Let L ⊆ X+. If L is thin, then γP1(L) ̸= ∅.
Proof Suppose that L is thin. There exists a word w ∈ X+ such that L∩X∗wX∗ = ∅.
Let a ̸= b ∈ X and u = balg(w)wbalg(w). It is clear that u ∈ P1. We claim that
u ∈ γP1(L). On the contrary, assume that u /∈ γP1(L). Then there exists v ∈ L such
that uv /∈ P1. This in conjunction with u ∈ P1 yields that uz ̸∈ Q with z ≤p v for
some z ∈ X+. Without loss of generality, we let uz = f2 where f ∈ Q. That is,
balg(w)wbalg(w)z = f2. Since u ∈ P1, we need only consider lg(f) > lg(balg(w)). There
are the following cases:
(1) lg(balg(w)) < lg(f) < lg(balg(w)w). There exists w1, w2 ∈ X+ with w = w1w2 such
that f = balg(w)w1 = w2ba
lg(w)z. This implies that w2 = ba
lg(w2)−1. It follows
that alg(w1)+1w1 = ba
lg(w)z. This contradicts to that a ̸= b.
(2) lg(f) = lg(balg(w)w). Then f = balg(w)w = balg(w)z; hence z = w. This implies
that w = z ≤p v; hence w ∈ Lp. This contradicts to L ∩X∗wX∗ = ∅.
(3) lg(balg(w)w) < lg(f) < lg(balg(w)wbalg(w)). If lg(f) = lg(balg(w)wb), then f =
balg(w)wb = alg(w)z. This contradicts to that a ̸= b. If lg(balg(w)wbalg(w1)) = lg(f)
with w = w1w2 for some w1, w2 ∈ X+, then f = balg(w)wbalg(w1) = alg(w2)z. This
contradicts to that a ̸= b.
(4) lg(f) ≥ lg(balg(w)wbalg(w)). In this case, we have balg(w)wbalg(w) ≤p f. There ex-
ist x ∈ X∗, y ∈ X+ with z = xy such that f = balg(w)wbalg(w)x = y. This implies
that xbalg(w)wbalg(w)x = xy = z ∈ Lp. Thus L ∩X∗wX∗ ̸= ∅, a contradiction.
By above discussion, we have that u = balg(w)wbalg(w) ∈ γP1(L). ⊓⊔
From the definitions of disjunctivity and regularity, it is clear that a regular lan-
guage can never be disjunctive and also a disjunctive language can never be regular.
In the rest of this section, we show that γP1(L) is not regular for any thin language L.
6By above discussion, we have xvy = balg(w)+n+lg(z)wvzbalg(w)+n+lg(z)wu ∈ γP1(L).
By Lemma 3, γP1(L) is disjunctive. ⊓⊔
In the following, we consider properties of P1-annihilators of finite languages. First,
we show that γP1(L) is not regular for any finite languages. From above proposition,
since every finite language is thin, the following proposition is clear.
Proposition 5 Let L ⊆ X+ be a finite language. Then γP1(L) is not regular.
Proof Let L ⊆ X+ be a finite language. Then L is thin. By Proposition 4, the set
γP1(L) is disjunctive; hence γP1(L) is not regular. ⊓⊔
We also investigate the relationship between left P1-annihilators and right P1-
annihilators for finite languages.
Proposition 6 Let L be a finite language. Then αP1(L) ̸= γP1(L).
Proof Let L be a finite language. By Lemma ??, γP1(L) is dense; hence γP1(L) ̸= ∅.
If αP1(L) = ∅, then it is clear that αP1(L) ̸= γP1(L). Now suppose that αP1(L) ̸= ∅.
By Proposition 1 and Remark 1(3), there exists a ∈ X such that La ⊆ P1, that is,
a ∈ αP1(L). Assume that αP1(L) = γP1(L). It follows that a ∈ γP1(L); hence a /∈ Lp.
Then there exists another letter b ∈ X such that b ∈ Lp. Thus b /∈ γP1(L). Since
αP1(L) = γP1(L), we have b /∈ αP1(L). On the other hand, since L is finite, there
exists m ≥ 1 such that m = max{lg(w) | w ∈ L}. We have bamu ∈ P1 for every
u ∈ L; hence bam ∈ γP1(L). This in conjunction with αP1(L) = γP1(L) yields that
bam ∈ αP1(L). But by Lemma 2, b ∈ αP1(L). This contradicts to b /∈ αP1(L). Hence
αP1(L) ̸= γP1(L) for any finite language L. ⊓⊔
Corollary 1 Let L ⊆ X+ be a language. If αP1(L) = γP1(L), then L is an infinite
language.
We now give some languages L such that αP1(L) = γP1(L).
Example 2 Let a ̸= b ∈ X and let L = {balg(u)+1ubalg(u)+1 | u ∈ X+ \ {a, ab}}.
Then αP1(L) = γP1(L) = {a, ab}. Indeed, by the definition of lg(u), we have that
balg(u)+1ubalg(u)+1 ∈ P1. That is, L ⊆ P1. For any u ∈ X+ \ {a, ab}, it is clear that
Lu ̸=⊆ P1 and Lab, La ⊆ P1. That is, αP1(L) = {a, ab}. On the other hand, it is clear
that aL, abL ⊆ P1 and uL ̸=⊆ P1 for any u ∈ X+ \ {a, ab}. That is, γP1(L) = {a, ab}.
Thus αP1(L) = γP1(L) = {a, ab}.
4 The P1-Annihilators of Shuﬄe Catenation of languages
In this section, instead of catenating two words, we consider the shuﬄe catenation of
two words. And the P1-annihilators with respective to shuﬄe catenation of languages
are considered in this section. The shuﬄe catenation of two words is studied in ([2], [8]
and [12]) as follow.
Definition 1 Let u, v ∈ X∗. The shuﬄe catenation of u and v is defined as u ⋄ v =
{u1v1u2v2 · · ·unvn | u = u1u2 · · ·un, v = v1v2 · · · vn, ui, vi ∈ X∗, 1 ≤ i ≤ n}. For two
languages L1, L2 ⊆ X∗, the shuﬄe catenation of L1 and L2 is defined as L1 ⋄ L2 =⋃
u∈L1,v∈L2(u ⋄ v).
8Proof Let L ⊆ X+ be a language. If u ∈ α•P1(L), then vu, uv ∈ P1 for every v ∈ L.
Thus u ∈ αP1(L) and u ∈ γP1(L); hence u ∈ αP1(L)∩ γP1(L). If u ∈ αP1(L)∩ γP1(L),
then uv, vu ∈ P1 for every v ∈ L. Thus u ∈ α•P1(L). ⊓⊔
Corollary 2 Let L ⊆ X+ be a language. The following statements are true.
(1) If α•P1(L) ̸= ∅, then L and α•P1(L) are both p-primitive languages.
(2) If αP1(L) = ∅ or γP1(L) = ∅, then α•P1(L) = ∅.
(3) If αP1(L) = γP1(L), then α
•
P1
(L) = αP1(L) = γP1(L).
We see that if αP1(L) = γP1(L) ̸= ∅, then α•P1(L) ̸= ∅. The converse is not true.
For example: let L = {ab}. Then since ab · b, b · ab ∈ P1, we have that b ∈ α•P1(L). But
since ab · a ∈ P1, a · ab /∈ P1, we have that a ∈ αP1(L) and a /∈ γP1(L). That is, the
sets αP1(L), γP1(L) are not empty and αP1(L) ̸= γP1(L). In the following, we give a
characteristic for α•P1(L) ̸= ∅. First, we need some known results:
Lemma 4 ([7]) For any two distinct words u, v where u ∈ P1 and lg(u) ≥ lg(v). Then
uv ̸∈ P1 if and only if u = x1x2x1 for some x1, x2 ∈ X+ with x2 ≤p v.
Lemma 5 ([7]) For any two distinct words u, v where u ∈ P1 and lg(u) < lg(v). Then
uv ̸∈ P1 if and only if one of the following three statements holds:
(1) u <p v.
(2) u = x1x2x1 for some x1, x2 ∈ X+ with x2 <p v.
(3) v = x1ux1x2 for some x1, x2 ∈ X+.
Proposition 8 Let L ⊆ X+. Then α•P1(L) ̸= ∅ if and only if L ⊆ P1 and there exists
a word u ∈ P1 such that for every v ∈ L, the following statements are satisfied:
(1) u ̸≤p v and v ̸≤p u;
(2) u ̸= x1x2x1 for some x1, x2 ∈ X+ with x2 ≤p v;
(3) v ̸= x1x2x1 for some x1, x2 ∈ X+ with x2 ≤p u;
(4) u ̸= x1vx1x2 for some x1, x2 ∈ X+;
(5) v ̸= x1ux1x2 for some x1, x2 ∈ X+.
Proof Let L ⊆ X+. Since α•P1(L) ̸= ∅, there exists u ∈ α•P1(L) such that uv, vu ∈ P1
for every v ∈ L. By the definition of prefix primitive words, it follows that u, v ∈ P1.
This in conjunctive with Lemma 4 and 5 yields that statements (1)-(5) are satisfied. ⊓⊔
We define (α•P1)
1(L) = α•P1(L) and (α
•
P1
)n(L) = α•P1((α
•
P1
)n−1(L)) for any n ≥ 2.
For completeness, we let (α•P1)
0(L)L. Assume that α•P1(L) ̸= ∅.We consider (α•P1)n(L)
for any n ≥ 1. We now have the following results:
Proposition 9 Let L ⊆ X+. and assume that α•P1(L) ̸= ∅. Then the following state-
ments are true:
(1) (α•P1)
n(L) ∩ (α•P1)n+1(L) = ∅.
(2) L ⊆ (α•P1)2(L).
(3) (α•P1)
n(L) = (α•P1)
n+2(L) for every n ≥ 1.
Proof Let L ⊆ X+ and α•P1(L) ̸= ∅.
(1) The result is clear by the definition of P1-annihilator with respective to bi-
catenation of languages.
10
This implies that u1v1 ∈ P1. Consider lg(u1) = lg(v1) = 1. This in conjunction with
L ⊆ bX∗ yields that v1 = b; hence u1 = a. Since u1Lu2 · · ·un ⊆ u ⋄ L ⊆ P1, we have
aL = u1L ⊆ P1. Since L ⊆ P1 and L ⊆ bX∗, we have L ⊆ baX∗. Thus ba ≤p v, for
every v ∈ L \ {b}. Recall that a = u1 ≤p u. This in conjunction with u ∈ P1 yields
that either u = a or ab ≤p u. If ab ≤p u, then from Equation (1), a · ba · b ≤p t for
some t ∈ u ⋄ L. That is, u ⋄ L ̸⊆ P1, a conradiction. It follows that u = a. Hence
α⋄P1(L) = {a}. ⊓⊔
5 Conclusions and Future Work
This paper studies algebraic properties concerning the annihilators of p-primitive lan-
guages. The annihilators of p-primitive languages contains left P1-annihilators and
right P1-annihilators. We show that for every finite language L, the left P1-annihilator
of L is not equal to the right P1-annihilator of L. We also show that the set γP1(L) is
not regular for any finite language L. Moreover, the set γP1(L) is not empty for any
thin language. In future work, a given language L such that γP1(L) = αP1(L) will be
investigated related algebraic properties.
References
1. Berstel, J., Perrin, D. : “Theory of Codes”; Academic Press, Inc., Orlando, Toronto (1985).
2. Eilenberg, B. : “ Automata, Languages and Machines”; A, Academic Press, New York,
(1974).
3. Fan, C. M., Huang, C. C. : “A Note on Prefix Primitive Languages”; Acta Inform. (2010),
(Summited)
4. Fan, C. M., Huang, C. C., Yu, S. S. : “On n-Power Prefix Languages”; Int. J. Comput.
Math. 85, 5 (2008), 703-715.
5. Hsu, S. C., Ito, M., Shyr, H. J. : “Some Properties of Overlapping Order and Related
Languages”; Soochow J. Math. 15 (1989), 29-45.
6. Huang, C. C., Yu, S. S., Zhao, Y. K. : “Prefix Primitive Languages”; J. Inform. Optim. Sci.
25, 2 (2004), 303-316.
7. Huang, C. C., Zhao, Y. K. : “A note of P-Primitive Regular Expressions”; J. Inform. Optim.
Sci. 20, 2 (2002), 543-552.
8. Ito, M., Thierrin, G., Yu, S. S. : “Shuﬄe-Closed Languages”; Publ. Math. Debrecen. 46,
3-4 (1995), 1–21.
9. Lyndon, R. C., Schu¨tzenberger, M. P. : “On the Equation aM = bN cP in a Free Group”;
Mich. Math. J. 9 (1962), 289-298.
10. Rabin, M. O., Scott, D. : “Finite Automata and Their Decision Problem”; IBM. J. Res.
Develop 3 (1959), 114-125.
11. Reis, C. M., Shyr, H. J. Some Properties of Disjunctive Languages on a Free Monoid
Inform. Control 37, 3 (1978), 334-344.
12. Shyr, H. J., Yu, S. S. : “Bi-Catenation and shuﬄe catenation of Languages”; Acta Inform.,
35 (1998), 689–707.
13. H. J. Shyr, : “Free Monoids and Languages”; Third Edition, Hon Min Book Company,
Taiwan (2001).
14. Shyr, H. J., Yu, S. S. : “2-Codes and 2-Code Annihilators”; Semigroup Forum 56 (1998),
36-48.
15. Shyr, H. J., Yu, S. S. : “Annihilators of Languages”; In: Words, Languages, and Combi-
natorics II, World Scientific. Publishing, Edited by M. Ito and Hu¨rgensen, (1994), 406-414.
16. Shyr, H. J., Thierrin, G. : “Disjunctive Languages and Codes”; Fundamentals of Compu-
tation Theory, Proceedings of the 1977 Inter. FCT-Conference, Poznan, Poland, Lect. Notes
Comp. Sci. 5, Springer-Verlag, 171-176.
17. Yu, S. S. : “Properties of Annihilators of Languages”; Semigroup Forum 56 (1998), 49-69.
18. Yu, S. S. : “d-Minimal Languages”; Discrete Applied Mathematics 89 (1998), 243-262.
無研發成果推廣資料 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
