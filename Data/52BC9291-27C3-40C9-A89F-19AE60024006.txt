cyber physical systems. Large scale cyber physical 
system (LCPS) must have enough computing power for 
processing all real-time sensed data from sensor 
devices. LCPS may reply on a cloud platform to 
increase its computing power. And serve these 
requests by scheduling sensor tasks based on some 
real time parameters.  Hence, cloud service can 
obtain better performance and more efficiency when 
good scheduling algorithms are implemented. In this 
research, we apply the earliest deadline first until 
zero laxity (EDZL) scheduling algorithm to optimize 
the cloud service scheduler for ensuring sensor jobs 
do not miss deadline in LCPS. 
In order to approach scheduler in cloud service 
system, we first research some scheduling algorithms 
on the multi-core system. We study properties of EDZL 
algorithm and analyze the schedulability issue of 
EDZL algorithm on multiprocessors platform. We survey 
task model and maximum utilization bound of EDZL on 
multiprocessors scheduling issue. Then, this research 
makes some system assumption on cloud service system. 
These assumptions let EDZL be more appropriate to 
cloud system, and these assumptions are realistic. 
This research also defines the role of EDZL 
scheduling algorithm in cloud computing platform. We 
investigate how to apply the EDZL scheduling 
algorithm to the cloud service for large scale cloud 
computing system. 
So far, we develop a scheduling analysis tool on 
multiprocessors platform. We approach multiprocessors 
task scheduling with this scheduling analysis tool. 
In the future, we could modify environment setting of 
this scheduling analysis tool. We use this analysis 
tool to approach cloud computing environment. And 
this scheduling analysis tool will give us a easy and 
convenient way to verify our scheduling algorithm on 
cloud system. It also provides a verification method 
for our cloud system utilization bound analysis. 
 
英文關鍵詞： Real-Time System, Multi-Core System, Cloud computing, 
LCPS, scheduling analysis tool 
行政院國家科學委員會補助專題研究計畫 ■成果報告   □期中進度報告 
 
多核心系統的即時可排程性之分析工具 
 
 
計畫類別：□個別型計畫   ■整合型計畫 
計畫編號：NSC 99－2220－E－007－015－ 
執行期間：2010年 08月 01日至 2011年 07月 31日 
 
執行機構及系所：國立清華大學—資訊工程系 
 
計畫主持人：石維寬 
共同主持人： 
計畫參與人員：葉秀蓮、賴彥如、方郁勛、胡貴蓉、陳聖裕 
 
 
 
成果報告類型(依經費核定清單規定繳交)：□精簡報告  ■完整報告 
 
本計畫除繳交成果報告外，另須繳交以下出國心得報告： 
□赴國外出差或研習心得報告 
□赴大陸地區出差或研習心得報告 
□出席國際學術會議心得報告 
□國際合作研究計畫國外研究報告 
 
 
處理方式：除列管計畫及下列情形者外，得立即公開查詢 
            ■涉及專利或其他智慧財產權，□一年■二年後可公開查詢 
 
 
 
中   華   民   國  100  年  11  月  30  日 
 
 
3 
 
中文摘要 
近年來隨著科技的進度，計算能力的需求提升在傳統的 Server處理架構已經不符合目前龐大的
資料計算之需求，龐大的計算資料來至不同的應用處理，如：物聯網應用的興起、即時的系統監視
等，這些應用都會使終端裝置產生大量的計算資料並傳輸到後端的伺服器來轉換為有意義的資訊來
進行儲存與終端使用者的應用發展，但在現今大量資料的收集下傳統的伺服器架構已不足夠來進行
大量的資料運算了，因此有一個新的運算技術—雲端計算的概念相應被提出。 
雲端計算提供了強大的計算資源擴充的能力以及強大的運算資源，因此若整合各項資料計算的
工作至雲端平台就會立即提升其工作運算的能力，但雖然雲端提供了強大的計算資力與無限的資源
擴充，但使用這些雲端計算資源還是要付出相對的資源租用與建置成本，運算資料量的提升速度是
遠超過雲端平台的計算資源負載能力，並且這些資料都是即時性的資料回覆，如：大樓監控系統、
防火感測資料、地震資料感測等，基於該即時系資料處理的問題我們將需要在雲端的計算平台上設
計一個存取控制以及即時排程的方法來進行這些即時資料的存取控制以及計算處理，讓這些即時性
的資料不會錯過它們的失效期限(Deadline)。 
本研究先探討了 Early Deadline First until Zero Laxity的排程演算法在多核心的架構上，並研究
探討該演算法的可排程性議題以及最大資源使用率的推導求證，進行完 Early Deadline First until 
Zero Laxity的排程演算法於多核心平台上的可排程性議題以及最大資源使用率的研究後，我們定義
了雲端即時性特的一些工作集以及雲端計算平台的特性，利用這些工作集以及雲端計算平台的特性
來定義我們要如何導入 Early Deadline First until Zero Laxity的排程演算法至雲端的計算平台，並在
運端的計算平台中扮演什麼樣的角色，以及相關的特性定義來將 EDZL的演算法可以實現再雲端排
程的處理上，除了以上的研究探討外，我們也實做了一個多核心的排程模擬器來研究多核心平台上
的排程問題，這個模擬器將來可以提供我們之後在雲端平台上即時排程的模擬，讓我們可以更方便
的進行雲端排程的優化設計。 
 
關鍵詞：即時系統、多核心系統、雲端計算、物聯網、雲端即時排程、多核心排程模擬器 
5 
 
I. Introduction 
Physical sensor devices are employed in a variety of applications, such as: smart building, military, 
habitat monitoring, etc. The application domain can be from monitoring to controlling devices. In order to 
manage the sensed data from physical sensor devices, LCPS must have enough computing power for 
processing all real-time data. With assistance of a cloud platform, a cloud based LCPS can greatly enhance 
its computing power. 
Cloud computing provides flexible and scalable computing resources, such as computation power and 
data storages, to end-users. The concept of cloud service is also applied to consume computing power and 
hardware resource capacity in the air [1]. Dynamically dispatching these requests to computing entities in 
the cloud system becomes an important problem. In addition to the resource utilization, the real-time issue in 
the cloud service is also a major concern since some real-time applications and services must have a 
deadline guarantee. Therefore, LCPS needs a good scheduling algorithm on cloud to ensure sensor jobs do 
not miss deadline.  
The scheduling algorithms for real-time tasks on multiprocessor systems have been studied by many 
researchers. Well-known scheduling algorithms for uniprocessor real-time systems, such as Earliest 
Deadline First Algorithm (EDF) and Rate Monotonic Algorithm (RM), have been shown to have very low 
schedulability conditions on multiprocessor systems. But these algorithm only consider the multi-core 
platform, cloud platform is different from single processor and single machine architecture. Hence, there are 
some challenges of real-time scheduling for cloud system. For example, some well-known scheduling 
algorithms designed for single-processor and single machine cannot be applied to cloud platform without 
losing their optimality. 
Task scheduling on cloud service also has been widely studied. These scheduling solutions regard the 
computing platform as a parallel architecture. One approach is to employ the traditional parallel scheduling 
algorithm [2].  Tsai et al proposed a service-oriented solution concept [3]. In [4], [5], Shuo Liu et al also 
proposed preemptive and non-preemptive scheduling algorithms in the service-oriented architecture. In [6], 
authors introduced a data locality driven task scheduling algorithm. However all these algorithms mentioned 
7 
 
II. Related work 
A. Cloud Service Task Model 
In the cloud service architecture, a real-time architecture with m homogeneous computing units is 
assumed to have n real-time tasks sorted by their arrival times. The sorted task sequence is denoted as Γ = 
{ τ1, τ2,…, τn}. Each task τi = (ci, di) has their parameters ci and di, where ci is the worst case execution time 
and di is a relative deadline for ensuring QoS in cloud service.  
A cloud service generates a sequence of tasks. A ready task running on a cloud computing platform is 
called the current task. During the run time, a job of task τi can be characterized by Ji, with Ji defined by the 
same parameters in [8]. The laxity value of a job Ji at time t can be rewritten as Li(t)=ti(t) – ei(t). The 
parameters of ei(t) and ti(t) are the remaining execution time and the remaining time to deadline at time t. 
The laxity of a job provides a measure of urgency for this job. A negative laxity indicates that the job can 
never meet its deadline, while a zero laxity indicates that the job must be started immediately otherwise it 
would miss deadline. 
B. Previous result on multi-processors 
For multiprocessor system, a variation of EDF algorithm called EDF-US[m/(2m – 1)] has been studied 
in [9]. Using EDF-US[m/(2m – 1)], all periodic tasks with a utilization higher than m/(2m – 1) are assigned 
the highest priority in the system while the rest of the periodic tasks are assigned priorities according to the 
EDF scheduler. At run-time, jobs are scheduled according to their dynamic priorities whenever a processor 
is free or a new job arrives. It is shown that EDF-US[m/(2m – 1)] can correctly schedule all jobs on m 
processors if the total utilization U(T) satisfies the condition: U(T) ≤ m2/(2m – 1).  
Goossens et al. [10] define priority-driven scheduling as that each job has a fixed priority; both EDF 
and RM can be classified as priority-driven policies. They show that a system of periodic tasks with m 
processors using EDF scheduling can meet all its deadlines if the total utilization U(T) satisfies the condition: 
U(T) ≤ m – umax*(m – 1) where umax is the largest utilization of any task in the system. In addition, it has 
been shown that no priority-driven scheduler can guarantee a correct scheduling of all periodic tasks on m 
processors if the total utilization U(T) > (m+1)/2 for large m. These two results place a utilization upper 
9 
 
executed first. Moreover, the algorithm cannot ensure the schedulability for the cloud tasks.  
Another scheduling solution was proposed in [6]. Jin et al proposed a data locality driven task 
scheduling algorithm that schedules tasks by adjusting the data locality of the task. Jin’s solution only 
improved the data locality in the scheduling algorithm. However, they did not analyze the schedulability of 
cloud tasks. 
In this paper, we focus on the schedulability of cloud tasks. If there is a cloud tasks set Γ = { τ1, τ2,…, 
τn} and each task’s properties are as mentioned earlier, we develop an on-line preemptive scheduling 
method for the cloud task set Γ to ensure the schedulability for the task set. Our solution has introduced two 
useful concepts including the dynamic priority promotion scheduling and the laxity value for cloud service. 
 
 
 
 
 
 
 
 
 
 
 
 
 
11 
 
tasks waiting to be executed. 
Lemma 1. In an m-process unit rent by a user using the EDZL scheduling algorithm, if a job J misses 
its deadline at time t, the cloud side must have at least m +1 user services with zero-laxity 
simultaneously occurring at some time before t. 
Proof. If the job J misses its deadline at t, there must be a time t’< t when J has zero-laxity but cannot 
start execution immediately. According to EDZL, any job with zero-laxity will have the highest priority 
and can preempt any positive-laxity job. Since job J cannot be executed at t’, there must have m 
zero-laxity jobs in addition to J. Therefore, there are m+1 zero-laxity jobs at t’.■ 
Note that, EDZL is a hybrid algorithm of EDF and LLF. In the following, we introduce some properties 
related to EDF and EDZL. 
Definition 2. Priority promotion in EDZL schedule. In an EDZL schedule, job Ji has a higher priority 
than job Jj, but di > dj is called priority promotion. 
Lemma 2. An EDZL schedule is the same as an EDF schedule if and only if there is no priority 
promotion in the EDZL schedule. 
Proof. If the EDZL schedule is equal to an EDF schedule, then all tasks are scheduled by their 
deadlines, therefore, no priority promotion occurs in EDZL schedule. We can show this by definition 2, 
since there is no priority promotion in the EDZL schedule, the priority of each task is based on its 
deadline. Therefore, the schedule is the same as the EDF schedule. ■ 
Lemma 3. For multiple process units, if a task set Γ can be scheduled by the EDF algorithm, Γ can be 
scheduled by the EDZL algorithm. 
Proof. Let S be an EDF schedule of task set T, and the task set is schedulable. Now, we switch the 
scheduling algorithm to EDZL. Since T is schedulable by EDF, there is no priority promotion in 
schedule. Therefore, T can be scheduled by EDZL algorithm. ■ 
The proof of the above lemma is shown in [8]. Moreover, in the general case, the number of tasks is not 
13 
 
positive integer. For example, the task set given in Figure is defined with m=3, a=1, and pk =120. Let T be a 
special task set such that T=TZ Tr, TZ={z1, z2,…, zm∪ -a} and Tr={τ1,…, τpk*a+1}. In Tr, each task τj=(1, 
pk), 1 ≤ j ≤ pk *a+1, the total utilization of Tr is a+1/ pk. In TZ, each task zi has a utilization ui = 
i/(a+i)+fi/pi, where f1= pk *a/(a+1), fi = pi-1*a/(a+i), 2 ≤ i ≤ m−a−2, fm-a-1=pm-a-2*a/(m-1), and 
fm-a=pm-a-1*a/m. Note that, pk is a factor of the period length p1 of the task z1, i.e., pk |p1 and the period 
length pi of zi is also a factor of the period length pi+1 of zi+1, 1 ≤ i ≤m-a−1, i.e., p1|p2,…,pm-a-1|pm-a. 
From these rules, the utilization of T can be simply derived as U(T)= min(a +   )/(1ami iai ) | 1 ≤ a ≤ m−1, 
where   ami ii pfpk 1 //1 . Since, the value of U(T) is varied with the value of a, we need to find the 
minimum value of U(T) to derive upper bound. In the above equation, ε would approach 0 and U(T)= min( a 
+ )/(
1  ami iai )| 1 ≤ a ≤ m−1, if pk is increased. Moreover, the equation of U(T) can be transformed to 
m-a(Hm-Ha), where Hj=1/1 + 1/2 +…+1/j is the jth harmonic number. For large m, ,ln  mH m  where 
.5772.0 If m approaches infinity, U(T) has the minimum value when am/e, e is the Euler’s number. 
Therefore, there exists a set of task which is not schedulable by EDZL when U(T)> m−a(Hm−Ha) = m- m 
(ln m − ln (m /e)) /e = m(1−1/e)0.6321m. 
Theorem 3. The utilization bound of EDZL is no greater than m(1-1/e). 
Details on the construction of unschedulable task sets and the proof of theorem 3 are omitted here. 
They can be found in 錯誤! 找不到參照來源。. It shows the upper bound of m(1-1/e) and the lower bound 
of (m+1)/2, for m=1~100. There is still a gap between the unschedulable condition (at top) and the 
schedulable condition (at bottom). We will continue to work on closing the gap to find the exact 
schedulability condition for EDZL. 
D. Cloud Service Assumption 
We make some assumptions and constraints in our cloud service model. 
Assumption: 
 Tasks are preemptive: each task can perform context switching on the cloud platform. 
 Cloud platform consisted of homogeneous process units: The computing units have the same 
computing power, archtiecture, system software and system configuration. 
15 
 
but also we implement multi-core system real-time schedulability analysis tool (MRST) due to the usable 
resource of multi-core system. It can schedule the reliable sequence according to the deadline and properties 
of each task. Our research is based on the open source QEMU simulator which has been widely used to 
develop software on embedded systems. Also, it is a function-level emulator to be used to execute the 
applications and emulate the whole system. However, the timing information is critical and then we provide 
the accurate and quick timing estimation to help application development. Further, we integrate an analysis 
framework to support QTimer and MRST which is developed. 
 
Figure 4. User operation step 
 
Figure 5. GUI of Analysis Tool 
17 
 
 
V. Reference 
[1] Michael Armbrust , Armando Fox , Rean Griffith , Anthony D. Joseph , Randy Katz , Andy Konwinski , 
Gunho Lee , David Patterson , Ariel Rabkin , Ion Stoica , Matei Zaharia, "A view of cloud computing," 
Comunications of the ACM, Vol. 53, No. 4, April 2010. 
[2] Ioannis A. Moschakis, Helen D. Karatza, "Evaluation of gang scheduling performance and cost in 
a cloud computing system," The Jounral of Supercomputing, 16 Sep. 2010. 
[3] Wei-Tek Tsai, Qihong Shao, Xin Sun, Jay Elston, "Real-Time Service-Oriented Cloud Computing," in 
IEEE 6th World Congress on Services, Miami, FL, 2010, pp. 473-478. 
[4] Shuo Liu, Gang Quan, Shangping Ren, "On-line Scheduling of Real-time Services for Cloud 
Computing," in  IEEE 6th World Congress on Services, Miami, FL, 2010, pp. 459-464 
[5] Shuo Liu, Gang Quan, Shangping Ren, "On-line Preemptive Scheduling of Real-Time Services with 
Profit and Penalty," in Southeastcon, 2011 Proceedings of IEEE, Nashville, TN, 2011, pp. 287-292 
[6] Jiahui Jin, Junzhou Luo, Aibo Song, Fang Dong, Runqun Xiong, "BAR: An Efficient Data Locality 
Driven Task Scheduling Algorithm for Cloud Computing," in 11th IEEE/ACM International Symposium 
on Cluster, Cloud and Grid Computing, Newport Beach, CA, 2011, pp. 295-304 
[7] Lee, Suk Kyoon, "On-line Multiprocessor Scheduling Algorithms for Real-Time Tasks," TENCON’94. 
IEEE Region 10’s Ninth Annual International Conference, (Aug. 1994) 607-611. 
[8] Hsin-Wen Wei , Yi-Hsiung Chao , Shun-Shii Lin , Kwei-Jay Lin , Wei-Kuan Shih, "Current Results on 
EDZL Scheduling for Multiprocessor Real-Time Systems," in Proceedings of the 13th IEEE 
International Conference on Embedded and Real-Time Computing Systems and Applications, p.120-130, 
August 21-24, 2007 
[9] Srinivasan, A., and Baruah, S., “Deadline - based Scheduling of Periodic Task Systems on 
Multiprocessors,” Information Processing Letters, Vol. 84, Issue 2 (October 2002) 93- 98. 
[10] Goosens, J., Funk, S. and Baruah, S., “Priority-Driven Scheduling of Periodic Task Systems on 
Multiprocessors”, Real-Time Systems, Vol. 25 (Sep. 2003) 187-205. 
[11] Baker, T. P., “An Analysis of EDF Schedulability on a Multiprocessor,” IEEE Transactions on Parallel 
and Distributed Systems, Vol. 16, No.8 (Aug. 2005) 760-768. 
[12] Lopez, J.M., Diaz, J.L., and Garcia, D.F., “Utilization Bounds for EDF Scheduling on Real-Time 
Multiprocessor Systems,” Real-Time Systems, Vol. 28, 29-68, 2004. 
 
99 年度專題研究計畫研究成果彙整表 
計畫主持人：石維寬 計畫編號：99-2220-E-007-015- 
計畫名稱：多核心嵌入式系統開發工具與軟體研發--子計畫三:多核心系統的即時可排程性之分析工具
(2/2) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 4 4 100%  
博士生 1 1 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
