using whole-system-based analysis, (2) To design and 
develop a cloud analysis platform which benefits on 
the ability of cloud computing. The cloud analysis 
platform can automatically collect and analyze 
executables on the Internet, and save the analysis 
result as reports which are stored in distributed 
database. Due to the scalability of computation on 
the cloud, the platform can provide better 
performance for analysis. In this project, we 
developed a security analysis platform and a whole-
system-wide analysis tool. Both of them are aim to 
extract the malicious behaviors of malware for 
further malware research. 
 
英文關鍵詞： Cloud computing, Malware behavior analysis, Malware 
detection 
 
II 
 
摘 要 
 
全系統層次的惡意程式行為分析技術可以比以往傳統靜態分析技術更精確地判斷一個執
行檔案行為是否影響系統安全。本計畫擬提供一個可信賴性的分析服務與雲端應用層的安全
防禦做結合，藉此為雲端服務技術做安全性的把關。本研究將探討此技術如何結合虛擬機器
技術與雲端運算，以適用於分析工作的分派，使檔案可以自動地、大量地透過連續的分析檢
驗來達到程式行為分析。有別於傳統的軟體即服務（SaaS）模式，本計畫除了提供可疑檔案
上傳平台介面外，還開發出一個較為主動的檢驗服務，針對網際網路上現有檔案進行蒐集與
分析，除了可供使用者判斷下載檔案的安全性，也可讓資安人員用來驗證其開發出的檢測軟
體是否做出正確的判斷。 
本研究計畫共有兩大研究成果：（一）使用全系統層次的行為分析技術來擷取惡意程式
行為以達到更準確的分析、（二）開發與設計雲端架構分析平台以提高安全分析產能。雲端
架構分析平台可以自動地蒐集網路上的惡意程式樣本進行分析，並且對其行為的分析結果利
用分散式資料庫儲存。而分析的階段皆以自動化、平行化的方式來增加運算節點的使用率以
提高分析的產能。本計畫將會實際設計與開發一個雲端架構分析平台，並會對惡意樣本做行
為分析，以利用其惡意行為來偵測未知的惡意程式樣本。 
 
關鍵詞 
惡意程式、程式行為分析、雲端安全 
IV 
 
 
目 錄 
 
壹、 計畫內容及目的 ...................................................... 1 
一、 前言及背景說明 ....................................................... 1 
二、 文獻探討與相關研究 ................................................... 2 
三、 計畫目的 ............................................................. 4 
四、 研究方法 ............................................................. 5 
貳、 計畫項目完成度 ..................................................... 14 
參、 計畫成果 ........................................................... 16 
一、 產學合作計畫 ........................................................ 16 
二、 學術貢獻 ............................................................ 17 
三、 產業貢獻 ............................................................ 18 
四、 特殊榮譽 ............................................................ 18 
五、 系統建置-雲端惡意程式分析平台 ....................................... 20 
肆、 技術方案優越性 ..................................................... 41 
伍、 結論與展望 ......................................................... 43 
陸、 參考文獻 ........................................................... 44 
 
2 
 
是利用Nutch (利用Hadoop實做的搜尋引擎建立系統) 來蒐集散播在網路上的資料，當作本系統
的輸入。除此之外，還可以接收使用者上傳的檔案，提供雲端檔案安全性檢驗的服務。惡意樣
本分析程式將會整合先前所開發的動態程式分析工具，其分析項目有包含靜態可執行檔分析、
檔案文件安全性分析和利用虛擬機器觀測程式行為。惡意程式樣本分析可以持續的開發，有彈
性的掛載在本子系統上，以檢驗雲端的檔案或是使用者欲檢測的檔案之安全性。 
二、  文獻探討與相關研究 
惡意樣本的蒐集已是資安相關領域中相當重要的問題，許多樣本蒐集平台也紛紛被開發出
來[1][2][4][5]。以往的樣本蒐集大多採取 Honeypot 的方式來誘捕攻擊者，分析其一連串的入侵
手法以及殘留在電腦系統中的惡意檔案。但利用 Honeypot 蒐集的效率並不高，故有學者紛紛
提出增加被攻擊的機率以提高樣本蒐集的速率[3]。由於雲端技術的誕生，使用者可以靠著自行
架設的機器來擷取網路的檔案，並且可以多台同時合作和達到橫向擴展(Horizontal expandable)
來達到運算的可擴充性。利用 MapReduce 的雲端計算架構來平行化擷取網路檔案，可以讓使
用者在最短的時間內建置自己檔案樣本來源。 
近年來，惡意程式樣本分析也因虛擬機器的發展，而有了更多分析的可能性。透過虛擬機
器所提供的隔離性與對系統的完全控制，可以讓分析人員深入的了解其資料流向以及對系統的
影響。這些利用虛擬機器分析的系統[10][11][12][14]，因為需要龐大的運算能力來模擬整個系
統的運行，所以無法大量的被應用在現實生活中。尤其是在樣本儲存的架構中，傳統的 SQL-like
的資料庫已被證實其存取速度會因項目數量增加而減少。在分散式儲存系統中的 Cassandra 利
用 DHT(Distributed hash table)的方式來儲存資料，除了存取時間不與資料量的大小成正比，還
可以輕易的擴充儲存節點，非常適合用來儲存惡意樣本。儲存在資料庫中的惡意樣本除了可以
供研究使用，也可以利用分群的技術來實作未知樣本的惡意行為偵測[6][7][8][9]。 
結合分析以及樣本蒐集的惡意樣本分析平台，並非本系統的獨特創新[13][15][18]。這也驗
證了此系統的可行性之高，並且可以實際的運用在病毒分析與偵測的領域。本系統的創新在於
如何簡易的掛載不同種類的分析工具，甚至往後可以推廣到其他相關研究或是提供樣本給學術
界研究分析。為了在為期一年的開發期完成，我們評估了不同種的工具系統，並且修改和整合
其原始碼至此子系統。除了整合現有的工具，還實作一些機器管理機制以及節點間通訊協定，
讓此系統更加有彈性。在實作部分，我們利用高階語言來物件化功能、提高可讀性和簡易化偵
錯以縮短開發時程。 
在惡意程式分析的方法中，本系統將模擬特殊的記憶體與暫存器架構，在記憶體與暫存器
額外附上一個 bit，用以標記該暫存器或是記憶體所存的值是否遭受污染(tainted)，1 為 tainted，
0 為 clean。在此系統會將不是由程式本身產生的記憶體位址覆寫標記為 taint，並監控程式的執
行過程中，是否由已標記 taint 的記憶體或暫存器感染其它更多的記憶體和暫存器，並觀察系
統是否執行已標記 taint 記憶體區塊內容。 
觀察現今多數惡意軟體，常常不以癱瘓對方電腦為主要目的，而是以竊取對方隱私資訊為
首要目標，如：間諜軟體與側錄程式…等。這些惡意程式不經使用者同意，將竊取來的私密資
訊透過網路封包傳送給惡意攻擊者。因此，在 Panorama[25]的方法中提出，若將使用者的隱私
資料標示起來，並監控存取此資料的程序或應用軟體，記錄其存取途徑是否有任何的惡意行為，
4 
 
三、  計畫目的 
本研究執行之目的有二：（一）使用全系統層次的行為分析技術來擷取惡意程式行為，（二）
開發與設計雲端架構分析平台以提高安全分析產能。以下對此二大目的加以說明： 
 使用全系統層次的行為分析技術來擷取惡意程式行為 
由於雲端計算在應用上提供平台服務（PaaS），不管是客戶或是終端使用者皆有可能放置
檔案到此平台，並藉由此平台進行傳遞、交換、散播等動作，這些方式與傳統網際網路上檔案
交換並無太大不同，造成雲端平台上也有傳統網路攻擊的疑慮。對於雲端提供商與雲端平台客
戶來說，若是在雲端上發生類似傳統網路的蠕蟲攻擊，營運上的損失與對商譽的傷害將是無法
想像的巨大。因此，放置在雲端平台上的檔案安全與否變得格外重要。而如背景所述，傳統靜
態分析對於雲端平台上千變萬化的檔案已經不夠及時，必須等待特徵碼產生後才能提供為判斷
的依據。 
因此本研究計畫之首要目標為，開發與整合多項檔案安全分析技術，並將其融合至雲端分
析平台以顧及多面向的雲端檔案。首先，分析雲端平台上的目標檔案是否內藏加殼程式來躲避
分析。若目標檔案為可執行檔，則進一步利用全系統層次的行為分析技術來詳細分析該執行檔
是否可能對使用者系統造成危害，並進一步產生報告。有了以上的安全分析，可保護雲端服務
平台，降低使用者上傳的未知檔案傷害風險。 
 開發與設計雲端架構分析平台以提高安全分析產能 
檔案分析的方式眾多，越來越多不同面向的分析工具大量的產出。這些不同面向的分析工
具因為分析的方法不同而有互補的作用。靜態分析與動態分析各有其優缺點，靜態分析雖然運
算負擔較動態分析小，但卻無法得知執行時期的資訊，所以在分析應用上較適合特徵式偵測。
另一方面，動態分析除了負擔較大的運算開銷以外，分析範圍需要大量的運算時間搭配，故並
沒有一種方法是完美的。如果能夠簡易的整合市面上各種分析工具而達到互補作用，又可有效
且平均的分配至多台電腦，則可以加強分析能力又可縮短分析時間。 
為了增加分析的效率與產出，需開發一個雲端架構式的分析平台，把目前現有的分析工具
模組化，依使用者需求掛載分析模組且動態的去管理。這個平台必須具備有：一）可擴充性、
二）自動化、三）高容錯性。可擴充性可以讓本分析平台藉著增加運算節點來達到效能的提升，
有效的利用運算資源。然而，管理者需要同時管理多台電腦，而此系統的眾多繁雜的設定檔，
將會是往後維護人員的最大問題，自動化的管理與設定將會使系統更方便使用。由於在雲端架
構中有需多節點會交互溝通，容錯性可以讓系統工作得更久更穩定。我們將實作與設計一套系
統架構，符合雲端架構之精神來實作該分析平台。除了可以提供分析服務以外，該平台還有自
行蒐集網路文件檔案的能力，可以讓資安人員測試自行開發的分析工具，提早搜集網路上行為
可疑的文件檔案。開發人員可以不用費心去管理其分析模組與複雜的架設系統，也可以輕鬆快
速地擁有客製化的分析結果。 
6 
 
當良好的跨平台特性。並且支援 hadoop 系統，具有良好的可擴充性。Nutch 也提供了
許多 API 可以使用，分便於系統的架構開發。 
 
圖表  2  NUTCH 系統架構  
圖表 2 為 Nutch 的系統架構，如圖中所示 Nutch 可以分為網頁爬取（Crawler）以
及搜尋引擎（Searcher）兩部分。網頁爬取部分由一組使用者定義好的初始網頁（seed）
做為搜尋的起點，搜尋與起始網頁相關聯的網頁，並將網頁的連結資料取出（update）
建構成新的初始網頁（web db）進行下一輪的搜索。在本系統中，只需要對網頁做抓
取（圖表 2 左半部）的動作，而不需要進行索引以及搜尋的部分，因此我們利用 Nutch
提供的 API 進行網頁爬取並省略做索引搜尋的部分以增加系統效能。並透過 hadoop
系統，藉由 mapreduce 將運算分散至各節點進行運算，增加整體產出。 
在 Nutch 爬取大量網頁時，會抓取許多不同格式的檔案，如：exe、jpg、zip、html…
等，而我們系統目前主要是以分析可執行檔為主，因此在爬取網頁檔案時，僅保留系
統可以分析的檔案格式（exe、zip、rar），過濾掉其他無法分析的檔案格式。在 Nutch
抓取檔案後，會執行 PushTask 函式，將檔案輸入到我們的系統中做分析儲存。Crawler
部分為此系統一長期穩定的檔案來源，僅具有最低程度的優先權。 
在批次檔案輸入部分，我們撰寫一支程式將一個資料夾下的所有檔案透過分析平
台的函式庫輸入到分析平台上做分析。此程式會搜尋所有資料夾下的檔案，並產生該
檔案之工作識別（UID），並將工作識別放入 Redis，在將工作識別連同檔案內容放入
Cassandra 做保存。檔案系統輸入這部分是將檔案系統上的資料輸入到我們的系統做
分析，例如：單一資料夾、或遠端掛載的資料…等，這部分主要是應用在批次處理資
料，會需要一定的反應時間，應此在系統中具有高於 Crawler 的優先權。 
 
 儲存子系統 
在儲存系統方面，由於此研究已經被探討多年，市面上也有大量的資料庫可以應
用於本分析平台上。為了節省開發時間以及維護方便，經過深入地了解以及搜索之後，
我們選擇了兩個現有的資料庫系統 Cassandra 和 Redis，透過修改程式、設定檔案和內
部些許的程式碼，快速地達到本分析平台所需要的儲存能力。 
Cassandra 是一套分散式的資料庫系統，在分析平台中用來儲存未分析的檔案內
容以及分析完的結果。會選用 Cassandra 的考量在於以下三點。 
8 
 
 
圖表  3  工作優先權佇列於 REDIS 內的實作概況  
 
 分析器管理子系統 
在本系統中，可以掛載多個分析器。藉由多個分析器的分析結果，以取得更準確
的結果。因此我們需要建構一套分析器管理子系統來管理各種不同的分析器，讓各種
不同輸入輸出的分析器能正常運作於本系統中。分析器管理子系統具有以下功能： 
1. 自動化管理分析輸入輸出：透過將輸入輸出流程自動化，可以降低分析器
開發者測試所需時間，也可為此系統取得大量分析結果可供使用比較。本
子系統會自動從資料庫抓取分析檔案，並在執行完成後自動將結果存回資
料庫，可以達成自動化管理分析輸入輸出。 
2. 快速方便的安裝、起動、停止分析器，易於管理：藉由快速安裝分析器，
可以將分析器快速的安裝在新節點之上，增進系統可擴充性。而快速啟動
停止分析器，可以增加本系統運作上的彈性，進而達到分析器的動態調整。
本子系統會自動讀取分析器開發者所撰寫的設定檔，根據該設定檔可以讓
我們快速的安裝起動分析器。而在起動時，系統會記錄分析器執行時的 PID，
系統便可依此停止分析器。 
3. 整合各種不同形式的分析器：由於惡意軟體的種類眾多，並無任何可以偵
測所有惡意軟體之技術。因此需要使用多種不同形式之分析技術，以取得
最完整的結果報告及準確的偵測率。本子系統透過一個統一的設定檔，來
記錄不同形式分析器的使用方式，讓系統可以整合各種不同形式的分析
器。 
4. 執行多個分析器於單一節點，以增進系統產量：由於各種分析器執行時所
消耗的系統資源不一，而單一一台分析器也鮮少用盡系統資源。因此透過
同時執行多個不同分析器於單一節點上，增加系統資源的使用率，並促進
系統產量。在此子系統中，我們可以動態增減執行的分析器，並同時分派
任務執行，以達到單一節點執行多分析器。 
 
欄位名稱 欄位說明 範例 
COMMAND 執行分析器時所需的指令 COMMAND= ./scanner.sh 
LOG 分析報告的儲存位置 LOG = clamav.out 
TYPE 分析器的名稱 TYPE=ClamAV 
圖表  4  分析器設定檔內容  
10 
 
偵測檔案修改行為：運行惡意樣本(ROOTKIT)之後可能讓系統查詢檔案的函式遭受竄改。
故無法在系統內部直接做偵測。為了達到精準的偵測，我們透過虛擬磁碟上的內容，逐一的將
檔案萃取出來比對。利用修改前後的差異性，來得知那些檔案被修改、創建、刪除。本子系統
利用此資訊來達到偵測檔案修改行為之目的。為了找出系統內是否有被 ROOTKIT 隱藏的惡意檔
案，本系統運用了 TSK (THE SLEUTH KIT)來協助我們偵測該行為。此套件可以觀察虛擬硬像檔
的檔案系統裡所有資訊，包含有目前硬碟裡的附加資料（METADATA）、或檔案的內容等。找
出被隱藏的檔案，GUEST OS 執行可疑程式時，遇到要修改檔案時，在 HOST OS 透過 QEMU 把
要修該檔案的磁區號碼記錄下來，利用TSK LIBRARY查詢硬碟映像檔的FILE ALLOCATION TABLE
找出存在該磁區的檔案名稱及檔案路徑，再去 GUEST OS 利用 WIN 32 API 查詢是否有該檔案的
存在，若沒有，則表示該檔案被隱藏。為了找出開機磁區是否有被修改，GUEST OS 執行可疑
程式時，遇到要修改檔案時，透過 QEMU 把要修該檔案的磁區號碼記錄下來，如果修改的是
第一個磁區(開機磁區)，我們則判斷有開機磁區修改的行為(預計整體流程如下圖）。 
偵測登錄機碼修改行為：子系統將會精準地列出所有被更動過之登錄機碼。因為惡意程式
往往會修改系統上的登錄檔，在開機時啟動惡意程式。除此之外，ROOTKIT 還會竄改 WIN32 函
式庫或系統呼叫（SYSTEM CALL），以避免某些新增之機碼被發現。本系統將直接讀取硬碟中
用以儲存這些登錄檔的 HIVE 檔案，並透過自己的程式加以解析。惡意程式為了讓自己在系統
重開機後仍然能夠運作，必須修改登錄機碼並指定開機啟動程式的目錄，甚至為了比防護軟體
獲得更早啟動的優先權，會把自己註冊成驅動程式或系統服務。要達成這些目的，系統登錄檔
往往是惡意程式必須更動之處。然而，防護軟體或使用者自身常常會對這些地方作基本的檢查，
如 HKEY_LOCAL_MACHINE\SYSTEM\CURRENTCONTROLSET\SERVICES 或
HKEY_LOCAL_MACHINE\SOFTWARE\MICROSOFT\WINDOWS\CURRENTVERSION\POLICIES\EXPL
ORER\RUN 這些機碼，都是現今最常見的檢驗點。因此，現今的惡意程式程式為了避免被發現，
就必須要使用 ROOTKIT 技術來隱藏這些特定的機碼。在 WINDOWS 程式中，多數的登錄檔編輯
軟體在對這些登錄檔進行查詢時，是使用 WIN32 程式庫所提供的 API 如 REGENUMKEY, 
REGENUMVALUE 或是 WINDOWS 本身的 SYSTEM SERVICE 如 DIRECTNTENUMERATEKEY 或
DIRECTNTOPENKEY 等等，這些函式往往被已經侵入系統的 ROOTKIT 進行 HOOKING 的動作，因
此在查尋這些登錄資料時，將完全無法發現某些被隱藏的項目。我們分析的步驟如下，首先我
們將儲存登錄資訊的幾個重要 HIVE 檔案，從虛擬機器的硬碟映像檔中抽取出來，這些檔案包
括： 
C:\WINDOWS\SYSTEM32\CONFIG\SAM 
C:\WINDOWS\SYSTEM32\CONFIG\SECURITY 
C:\WINDOWS\SYSTEM32\CONFIG\SOFTWARE 
C:\WINDOWS\SYSTEM32\CONFIG\SYSTEM 
C:\WINDOWS\SYSTEM32\CONFIG\DEFAULT 
%USERPROFILE%\NTUSER.DAT 
請注意以上的抽取動作皆由系統外部進行，而不經由系統內部的 API 或系統呼叫。當以上
檔案從硬碟映像檔中抽取出來後，我們將解析這些 HIVE 檔案，並列出某些重要登錄目錄下所
有的機碼值，如： 
HKLM\SYSTEM\CURRENTCONTROLSET\SERVICES 
HKLM\SOFTWARE\MICROSOFT\WINDOWS\CURRENTVERSION\POLICIES\EXPLORER\RUN 
12 
 
兩個函式呼叫，如果回傳的檔案名稱是 rootkit 想要隱藏的，就略過這個檔案名稱，讓該檔案
無法顯示出來。如此一來，使用者就無法察覺有一隱藏檔案存在，而防毒軟體也可能透過這
兩個 API 去取得檔案列表掃毒，所以也無法針對被 rootkit 隱藏的檔案進行掃毒。除了對 Hook 
Win32 API 外，也可以利用 Windows Driver 的階層式架構來達成隱藏檔案的目的(如下圖)。 此
類型的 Rootkit 會把自己註冊一個驅動程式，當一個開啟檔案的要求送往檔案系統的時候，
Rootkit 將會攔截到並且判斷此要求是否為 Rootkit 想要隱藏的檔案。如果是，Rootkit 將回傳
開檔失敗訊息或是將要求導到別的檔案藉此欺騙使用者或防毒軟體。當一個寫檔的 I/O 進來時，
Rootkit 可以竄改寫檔的內容或是改變讀檔的結果。 
 
以下將透過正規化的方式，描述本平台的演算法以及各元件間的關係。 
名詞 定義 
ALLURL(u) A set of links that can be traversed by a URL u. 
File(u) A file downloaded by network crawler with URL u 
UUID(f) An universally unique identifier of file f 
DB(uuid) Query a File f with UUID uuid in database 
DB_store(uuid , f) Store a File f with UUID uuid in database 
DB_report(uuid , r) Store a Report r with UUID uuid in database 
Q A global queue stores UUIDs wiht actions push() 
and pop() 
Analyze() Action taken by analyzer and generate report 
Analyzer A set of analyzers used in this system 
TBA Taint-Based Malware Behavior Analyzer 
ClamAV, Kaspersky Anti-viurs software 
 
 
關聯性 
Given a URL u, if uuid = UUID(File(u)) , then File(u) = DB(uuid). 
{TBA, ClamAV, Kaspersky }   Analyzer .  
 
 
檔案來源子系統 與 儲存子系統 
Given a URL    as an input to network crawler.    
For each URL      ALLURL( ) 
     F   File(  ) 
     uuid   UUID(F) 
DB_store(uuid , f) 
push( uuid ) 
end 
 
14 
 
貳、  計畫項目完成度  
本計畫於期兩年共實作下列五項工作，完成度皆為 100%： 
 
一）網路檔案蒐集(完成度：100%) 
此模組會藉由網域種子清單，來當作擷取網站檔案模組的起點。透過瀏覽這些網站的網頁，
能夠找出對外連結的 URL，以擴充探索的網域範圍。在網站回覆的網頁 (html, htm) 裡，將會
有檔案的下載連結。再透過這些連結，網路爬蟲即可擷取這些放置在網站的檔案。本系統並非
只是單純的下載檔案，而是透過一層一層的網路連結關係，擴大搜索整個網路上的檔案，與搜
尋引擎類似。而每擷取到一個 URL，將會將檔案下載，除放置分散式資料庫中。本項目利用現
有的搜尋引擎客製化系統 Nutch，來達到上述之功能。Nutch 是一款基於 Hadoop 時實作出的網
路搜尋引擎，該系統可以爬取網路上的資料，透過分析建檔來提供資料搜索的服務。但本模組
並不需要後續對網頁分析的部分，並且有實作與後端資料庫存取的部分。 
 
二）分散式的資料儲存(完成度：100%) 
NoSQL 資料庫提供了 Key-Value 的存取方式，利用特殊的雜湊函式來保證讀取和寫入為常
數時間。本子系統將結合分散式資料庫 Cassandra 與集中式 Key-Value Redis 來實現分散式分析
資料儲存。由於 Cassandra 是分散式的資料庫，在存取的時間與存取的能力較傳統 Sql 系統來
的有優勢。但是其缺點是無法快速地列舉其儲存的資料。為了依序處理分析平台內待處理的分
析工作，我們使用了 Redis 內所提供的 List 資料結構來實現佇列的功能，依序地從工作佇列取
出欲分析的工作識別（tasd ID）。在按照取出的工作識別去 Cassandra 資料庫內尋找更多的檔
案資訊。 
 
三）惡意程式分析(完成度：100%) 
本子系統將分析程式模組化，藉由著制定的介面來達到有彈性的掛載分析工具。由於分析
工具可能會有數種，需要統一化其分析工具的 I/O。提供一套組態設定來讓此分析平台可以掛
載和移除分析模組。對於本系統與分析模組的銜接部分，將會定義各種分析工具的 I/O 要如何
導入與輸出資料，藉著一套統一的機制來方便管理不同實作出的分析工具，來達到本分析平台
可擴充的能力，讓使用者可以新增自己的分析工具，讓本平台的分析功能多樣化。 
 
四）文件 Call/Pop 分析器(完成度：100%) 
本分析模組會檢查可執行檔是否具有堆疊位址取得的技術。給予一個欲檢測的執行檔，本
分析模組能夠判斷該程式是否會刻意的存取堆疊的內容。如果該執行檔試圖取出堆疊的內容，
將會被此系統偵測出。此分析模組會包含一個模擬的 x86 CPU，來模擬堆疊與 CPU 暫存器的
狀況。而我們透過這 CPU 模擬器，可以完全觀測此程式會不會取出事先寫入在記憶體中的魔
法數值(magic number)。不同於虛擬機器，此分析模組不用模擬所有的硬體裝置，只要簡單的
模擬 CPU 暫存器與堆疊，故能減少其他較不必要的運算開銷。由於 CPU 模擬器的實作較複雜
16 
 
參、  計畫成果  
本計畫提出一個新全系統層次的行為分析技術來擷取惡意程式行為並將其整合至雲端
分析平台中，詳細方法已於第壹章第四節研究方法中說明，依據該方法我們已經開發完成
系統，在第本章第五節系統建置將詳細介紹，其內容有實際佈建情況、系統架構、工作流
程、實作細節以及實驗數據結果。同時，本計畫並且獲得多項成果，包含產學合作計畫、
學術貢獻等部分，將在以下各節中詳述。 
本計畫的雲端惡意程式分析平台包含下列四項關鍵技術：１）雲端節點機器管理、２）
分析工作分配與排程、３）可擴充式掛載介面、４）動態汙染源技術，將會在第肆章節技
術優越性詳細敘述，並於第伍章寫明本計畫的結論與未來展望。 
一、  產學合作計畫  
本計畫所涵蓋的研究範圍以及所發展的技術深具產業應用價值，已陸續與友訊科
技與中華電信等國內業界大廠簽訂產學合作計畫，其計畫名稱與合作方式如下圖表 6： 
 
合作計畫名稱  合作對象 
動態惡意程式行為側錄與污染分析 中華電信 
DNSsec推動先期型計畫 教育部 
DNSSEC網域名稱安全架構建置與推廣計畫 教育部 
委託 Open D-Link Routers Forum 建置、維護與測試技術與諮詢
服務 
友訊科技 
法務部調查局惡意程式自動檢測技術支援系統委託研究案 調查局 
前瞻性檔案完整性驗證與可疑嵌入碼檢測平台 喬鼎科技 
雲端行動的安全及時分析可行性評估先期探討 工業技術研究院 
智慧終端技術研究 工業技術研究院 
雲端惡意程式鑑識與行動平台安全 宏達電子(HTC) 
雙階層式全系統汙染鑑識分析 中華電信 
Technology Transfer on Network Threat Detection using 
Security Log Correlation 
趨勢科技 
圖表  6  產學合作計畫總表  
 
18 
 
8. Wei Shi-Sue, Shiuhpyng Shieh, Bing-Han Li, Michael Cheng Yi Cho and Chin-Wei Tien, "A 
Framework Using Fingerprinting for Signal Overlapping-Based Method in WLAN," in 
Proceedings of the International Computer Symposium on Computer Networks and Web 
Technologies (ICS 2010), Tainan, Taiwan, Dec. 16-18, 2010. 
9. Yen-Ru Liu, C.W. Wang, J.W. Hsu, T.C. Tseng, S.P. Shieh, “Extracting Hidden Code from 
Packed Malware based on Virtual Machine Memory Comparison,” 21th Cryptology and 
Information Security Conference (CISC 2011), 2011. 
10. Chia-Ming Fan, Bing-Han Li, Shiuhpyng Shieh, “On The Security of Password-Based Pairing 
Protocol in Bluetooth,” The 13th Asia-Pacific Network Operations and Management 
Symposium, (APNOMS 2011), 2011. 
三、  產業貢獻 
國外專利 
1. CW Wang, SP Shieh, YR Liu, “Method for Decoupling System-Wide Information Flow 
Tracking for Malware Analysis and Its Applications,” US patent pending 
2. S.I. Huang, S.P. Shieh, “Method and System for Secure Data Aggregation in Wireless Sensor 
Networks,” China patent number ZL200710301500.9, 2011. 
3. S.I. Huang, S.P. Shieh, “Method and System for Secure Data Aggregation in Wireless Sensor 
Networks,” US patent no. 8027474, 2011.9.27. 
國內專利 
1. 王繼偉，謝續平，劉晏如，“分離式的全系統層次模擬器與資訊流動追蹤方法與其應用,” 
Taiwan patent pending  
2. S.I. Huang, S.P. Shieh, “Method and System for Secure Data Aggregation in Wireless Sensor 
Networks, 用於在無線感應器網路中進行安全資料聚合的方法以及系統” ROC patent no. 
I350086. 10, 2011. 
 
四、  特殊榮譽 
 
學生獲獎 
1. 2010 Hacks in Taiwan Conference 台灣駭客年會 Wargame 競賽冠軍 
2. 2011 Hacks in Taiwan Conference 台灣駭客年會 Wargame 競賽冠軍 
3. 2012 Hacks in Taiwan Conference 台灣駭客年會 Wargame 競賽殿軍 
4. 2011 資策會資安技能金盾獎亞軍 
20 
 
五、  系統建置-雲端惡意程式分析平台 
本項目將簡介本子計畫於第一年度的系統建置情況，將分別介紹實際佈建狀況、系統
架構、工作流程、系統實作、效能分析。經由以上的介紹可突顯本計畫將不只著力於新興
技術的研究，更注重實務的系統開發。 
 
 實際佈建 
本子計畫於第一年度100年實際架設Windows惡意程式行為分析雲端平台，並建置
於國立交通大學網路安全實驗室內，以進行第一年度的雲端分析平台研究。本平台利
用市面上能夠採買之高效能運算個人電腦，以節省開發成本。利用這些高運算量來實
現「基於虛擬機器技術之動態程式行為分析」以及「高可靠性惡意程式樣本雲端儲存
系統」。在動態程式行為分析部分，透過整合本實驗室所開發之惡意程式分析模組，
有效地利用此平台的運算效能。而雲端樣本儲存系統，則可以大量的儲存已知或是分
析過可疑的惡意樣本，以供往後的研究、查詢。此平台已經透過產學合作之關係，正
與調查局、中華電信、趨勢科技、交通大學資訊服務中心等相關產業合作。進行實務
性質的惡意程式分析，以提供多樣化的病毒分析研究。 
 
圖表  7  WINDOWS 惡意程式分析雲端平台實際佈建  
 
22 
 
 系統架構 
本分析平台主要由三個部分所組成：一）檔案來源子系統、二）儲存子系統、三）
分析器管理子系統。在檔案來源子系統中，本子系統需要接收大量的檔案作為分析的
對象，以分析並取得各種不同型態的惡意軟體。本系統實做一個 PushTask 之函式庫，
此 API 可將任意檔案輸入本系統進行分析，並指定該檔案的優先權。此 PushTask 函
式庫先產生檔案的工作識別（UID），在將此 UID 放入 Redis 中，並將檔案內容存入
Cassandra 中，將檔案輸入我們的系統中。利用此 API 為基礎，我們實做了兩種檔案
來源系統：網頁爬取系統和批次檔案輸入。在儲存系統方面，由於此研究已經被探討
多年，市面上也有大量的資料庫可以應用於本分析平台上。為了節省開發時間以及維
護方便，經過深入地了解以及搜索之後，我們選擇了兩個現有的資料庫系統 Cassandra
和 Redis，透過修改程式、設定檔案和內部些許的程式碼，快速地達到本分析平台所
需要的儲存能力。Cassandra 是一套分散式的資料庫系統，在分析平台中用來儲存未
分析的檔案內容以及分析完的結果。Redis 是一單機的資料庫系統。在分析平台中以
佇列(Queue)的模式來儲存未分析的檔案的工作識別號碼。在分析器管理子系統中，
藉著可以掛載多個分析器的能力。同時進行多個分析器的分析，以取得更準確的結
果。因此我們需要建構一套分析器管理子系統來管理各種不同的分析器，讓各種不
同輸入輸出的分析器能正常運作於本系統中。 
 
圖表  9  基於機器碼之 WINDOWS 惡意程式行為分析雲端平台系統架構圖  
24 
 
 系統實作概要 
以下將會詳細地列出實作的細節，藉著閃示其虛擬碼，讓讀者能更清楚的了解各部分
的流程。 
程式 名稱 功能 參考 pseudocode 
secmap.rb 啟動本雲端惡意程式分析平台 圖表 15  
startnutch.sh 啟動網路爬取子模組 圖表 16 
NutchSlave.rb 傳送爬取網頁內容至分析平台 圖表 17 
AnalyzerInvoker.rb 呼叫分析器子模組 圖表 20 
common.rb 環境變數的設定和產生工作識別
號碼（TaskID） 
圖表 23 
invokeAnalysis.rb 啟動分析器，之後拿取未分析檔案
進行分析。 
圖表 21 
putToRedis.rb Analysis input 元件將取得檔案
的 TaskID 存入 Redis，並且依據
不同的檔案來源給予不同的優先
權。 
圖表 18 
putToCassandra.rb Analysis input 元件將檔案放入
Cassandra。 
圖表 19 
getTaskID.rb invokeAnalysis.rb取得存放在
Redis 內的 TaskID。 
圖表 22 
getFileContent.rb invokeAnalysis.rb用 TaskID 至
Cassandra取得相對應的檔案。 
圖表 24 
saveReportToCassandra.rb 分析器將分析結果存入
Cassandra。 
圖表 26 
getReportFromCassandra.rb 將分析器分析完的結果取出。 圖表 25 
 
26 
 
 
startnutch.sh負責在主節點將 nutch crawler啟動並透過 map-reduce的機制將爬取網頁的工
作自動化分配至各附屬節點上。由於 nutch原本提供的爬網功能包含許多我們系統不需要的部
分，如：製作索引、建構搜尋網頁，因此我們直接利用 nutch提供的 API執行爬網的功能，能
提高 nutch爬網的效率，增加每天搜尋過的網頁數量。 
以下將對圖表 16 做詳述: 
(一)參數介紹： 
Seed：為一包含多個網址檔案，代表系統欲抓取的起始網頁(seed)。 
(二) nutch_inject_seed 
nutch_inject_seed 負責將這些網頁輸入待爬取資料庫(crawldb)，以便 nutch 之後
由這些網頁開始爬取網頁。圖()是 seed檔案的範例。 
 
(三) nutch_generate_URLs、nutch_get_download_filename 
此函數由帶爬取資料庫中選取前若干組網頁資料，在本系統中預設是抓取 100,000
組網頁資料，產生一組待爬取清單(fetch list)。並將產生的清單名稱傳給
nutch_fetch_files 作為輸入。 
(四) nutch_fetch_files 
根據取得的待爬取清單，利用 mapreduce將檔案分配至各台 slave上面做爬取的動作。
而個別 slave 在抓取到可執行檔後，便會執行 NutchSlave.rb 將檔案儲存到資料庫
中。 
(五) nutch_update_URLs 
將在 nutch_fetch_files 找出來的新連結加入待爬取資料庫，並更新已爬取網頁的資
訊 
 
圖表  12  STARTNUTCH.SH 之虛擬碼 
28 
 
 
圖表  14  PUTTOREDIS.RB 之虛擬碼 
此程式 putToRedis.rb 是用於將 taskUID 根據不同的優先順序(priority)存入 Redis Queue 
中。另外，本系統針對不同的分析器都產生一組 Redis Queue(針對不同的 priority)。EX: 有
分析器 A 和分析器 B，兩種分析器，並同時有 3種優先序，因此一共有 6 個 Redis Queue。 
以下將對圖表 18 做詳述: 
(一)參數介紹: 
priority: 代表這筆資料的優先序，同時也是 Redis Queue 命名的一部分。 
taskUID: 由分析檔案所產生的 ID，而產生方法則是將檔案內容作 MD5以及 SHA1，並
將兩者相連最後連上檔案大小而得。 
(二) 連線到 Redis server，其中的變數 REDIS_ADDR 和 REDIS_PORT 分別代表 IP以及 port，
EX:1.2.3.4 和 10001。 
將此 taskUID 透過 redis.rpush 放入所有分析器相對應優先序的 Queue中，以上述的 A B 分析
器為例，當優先序為 3時，則會將 taskUID放入 A3以及 B3的 Queue中。
30 
 
 
圖表  16  ANALYZERINVOKER 之虛擬碼 
AnalyzerInvoker負責將分析器運行起來，自動從系統取得檔案並執行分析，最後再將結果存
回系統。分析器只要放置於特定目錄(如：~/analysis)，並且具有 config 檔案並設定啟動分
析器的方式以及報告儲存的位置，便可以整合進我們系統。以下將對圖表 20 做詳述: 
(一)參數介紹： 
analyzerName：所要執行的分析器名稱 
AnalyzerInvoker 會先執行 loadCommandsTable取得各個 API的位置。 
(二) 執行 readAnalyzerConfig，此函數分析分析器 config設定，記錄分析器執行方式及
報告位置。執行 getTaskID API，此 API會連線至 redis工作佇列，取得指定分析器
所需要分析的檔案 UID。 
(三) 透過檔案的 UID，我們可以利用 getFileContent 從 cassandra 取得檔案內容，並儲
存於本地端。 
(四) 根據分析 config 取得的執行方式，AnalyzerInvoker 可以利用 invokeAnalysis API
將分析器執行起來，並將待分析檔案傳給分析器做為參數， 
(五) 最後呼叫 saveReportToCassandra 將分析報告儲存回 Cassandra資料庫。 
32 
 
 
圖表  18  GETTASKID.RB 之虛擬碼 
此程式 getTaskID.rb 是從 Redis 中取出一組 TaskID。其中，Redis 為一 Queue 的資料結構，
在此基礎上實作出優先序(priority)的功能;而 TaskID 則是一組用來查詢資料庫的 key，key
的產生法法於 putToCassandra.rb 處有說明。 
以下將對上圖做詳述: 
(一)首先，透過 parseToHashTable 先從 ARGV[] 內取出分析器名稱(analyzerName)。 
(二) 連線到 Redis server，其中的變數 REDIS_ADDR 和 REDIS_PORT 分別代表 IP以及 port，
EX:1.2.3.4 和 10001。 
(三) 在 For 迴圈內部則是藉由 redis.lpop()來內取出 Redis 中的一筆資料，從優先序高
的先取，取得後離開迴圈。 
最後結果，回傳 taskID 或是提示 Redis內已無 taskID並顯示工作完畢。
34 
 
 
圖表  20  GETFILECONTENT.RB 之虛擬碼 
此程式 getFileContent.rb 是連線到資料庫端，並透過 taskID來取得檔案，最後將檔案存在
指定路徑。 
以下將對上圖做詳述: 
(一) 首先，連線至資料庫，其中 CassandraHosts.pickAtRandom()是用來連到不同的資料
庫，回傳的值是任一資料庫的 IP 地址，目的是為了流量能夠均勻分到每一台分散式
的資料庫上。 
(二) 透過 client.get()函式以及 taskID 從資料庫中取得相對應的檔案。 
(三) 設定分析器的路徑，由 ANALYZER_HOME 和 analyzerName 組成，之後儲存檔案的資料
夾就在此路徑下。 
(四) 設定檔案的儲存路徑，由 analyzerPath和 outfile組成。 
(五) 將檔案寫入(四)的路徑中。 
36 
 
 
圖表  22  SAVETOCASSANDRA.RB 之虛擬碼 
此程式 saveToCassandra.rb 是將 Log(分析過後的報告)放進資料庫中。 
以下將對圖表 26 做詳述: 
(一)參數介紹: 
LOG: 要存入的 log 的路徑。 
taskUID: 由分析檔案產生的 ID，產生方法則是將檔案內容作 MD5 以及 SHA1，並將兩
者相連最後再連上檔案大小而得。 
ANALYZER_TYPE: 分析器的種類名稱，依據此參數來區別報告的儲存。 
(二) 首先，讀取要儲存的報告，透過 linux內建指令 cat 來讀取報告。 
(三) 連線至資料庫，其中 CassandraHosts.pickAtRandom()是用來連到不同的資料庫，回
傳的值是任一資料庫的 IP 地址，目的是為了流量能夠均勻分到每一台分散式的資料
庫上。 
將 報 告 存 入 資 料 庫 中 。 透 過 client.insert() 來 對 資 料 庫 的 相 對 應 欄 位 (super 
column:ANALYZER_TYPE和 column name:OVERALL)填入相對的值(value)report而 taskUID則是
key。 
38 
 
 
圖表 24: 時間-分析個數關係圖。 
 
 運行截圖 
 
圖表  25  分析過程之紀錄檔案截圖 
40 
 
 
圖表  28  實際的惡意樣本分析報告  
42 
 
可擴充式掛載介面 
程式分析可以用許多不同面向的分析技術來判別該樣本是否為惡意。又隨著攻擊手法的日
新月異，要持續地維護這些分析工具才能符合時下的需求。一旦有新的分析技術的產生，系統
開發人員必須花費時間在機器環境的更新以及架設，十分耗費人力。本子系統欲設計一個可擴
充式掛載介面，可以輕易地安裝新形態的分析工具，移除較為老舊的版本。為了達到此目的，
我們需要制定一套惡意程式分析的框架，來幫助系統知道各分析工具的運行方式、初始化和資
源需求等，利用一個通用的方式來描述分析工具的作業流程。其部分包含如何運行的指令、傳
入的參數、套件的安裝、環境需求和結束時資源歸還等。設計好這個可擴充式掛載介面，往後
就可以供相關的學術研究使用，掛載自行開發的分析工具，以驗證分析方法的正確性。 
 
動態汙染源技術 
本分析系統的關鍵技術在於汙染源資訊流動追蹤技術上。在一般的動態分析研究中，所分
析的目標大多為單一的、運行於使用者層次的程式，因此分析系統所需提供的模擬環境較簡易。
但全系統層次行為分析系統卻是追蹤整體作業系統運行該程式的資訊流動。動態汙染分析是由
以往的資訊流追蹤(Information Flow Tracking)技術演變而來。在以往的資訊流追蹤研究中，是
將作業系統中如使用者、檔案、程序、網路連線…等視為物件，並記錄這些物件間的資訊流動
情形，以偵測是否有違反資安規則的行為發生。例如當某位使用者 U 執行某程序 P 對某檔案 F
寫入資料時，便發生了由 U 到 F 的資訊流動，如 F 不為 U 所有，則為一異常行為。此外，從
上面的例子可了解，資訊流動的追蹤包含的三個要素為：物件、操作行為與資安規則；物件乃
資訊流動的起點、終點或中繼站，而操作行為是造成資訊流動的原因，資安規則是正常與異常
資訊流動的分界。在上例中包含了三個物件(U、P 和 F)，以及兩個引起資訊流動的操作行為(執
行與寫入)，而「不可寫入他人檔案」為資安規則。事實上，絕大多數違反資安的行為皆可以
異常的資訊流動加以解釋。 
雖然資訊流追蹤是十分有用的分析方法，但追蹤的物件細緻度決定了分析的準確度。當
以越高層次的物件如檔案、使用者做為分析對象時，將失去許多於同一物件中資訊流動的訊
息。然而分析越低層次的物件如CPU暫存器或記憶體位元組時，所需記錄的訊息也就越多，效
能也將大打折扣。因此在以往電腦效能緩慢的時代，並無法進行這麼細膩的分析，現今的電
腦效能已足以進行低層次的資訊流追蹤工作，亦即本計畫著重的動態汙染分析技術。 
動態汙染分析的物件為 CPU、記憶體以及硬碟中的每個位元組，換言之系統中每個資料位
元組皆被視為一單獨的分析單位，因此已達到相當精細的分析準確度(最準確的分析必須以位
元為分析單位，但空間負擔過高，如後述)。而位元組 A 至位元組 B 的資訊流動稱為 A 對 B
的「污染」，造成污染的操作行為則為 CPU 執行的每一行指令。資安規則是透過「污染源」
與「污染目標」來定義，一旦發生從污染源至污染目標的資訊流動，即代表異常行為的發生。
以上即為動態汙染分析的基本原理 
由於 X86 CPU 為 CISC 架構，故指令集十分複雜共包含數百道不同功能的指令。以往針對
單一應用程式的動態污染分析，由於應用程式本身只能使用 Ring 3 層級的指令，因此所需模擬
其中的數十道指令。但本研究計劃為求分析的完整與可應用性，必須對數百道指令加上如上表
中的追蹤動作，工程相當繁複。 
44 
 
陸、  參考文獻  
[1] R. Perdisci, A. Lanzi, and W. Lee, “McBoost: Boosting Scalability in Malware Collection and Analysis Using 
Statistical Classification of Executables,” in Computer Security Applications Conference, Annual, Los Alamitos, 
CA, USA, 2008, vol. 0, pp. 301-310. 
[2] P. Baecher, M. Koetter, M. Dornseif, and F. Freiling, “The nepenthes platform: An efficient approach to collect 
malware,” IN PROCEEDINGS OF THE 9 TH INTERNATIONAL SYMPOSIUM ON RECENT ADVANCES IN 
INTRUSION DETECTION (RAID, p. 165--184, 2006. 
[3] Y. Ye, T. Li, Y. Chen, and Q. Jiang, “Automatic malware categorization using cluster ensemble,” Proceedings of 
the 16th ACM SIGKDD international conference on Knowledge discovery and data mining, p. 95–104, 2010. 
[4] S. Muhlbach and A. Koch, “A Dynamically Reconfigured Network Platform for High-Speed Malware Collection,” 
Proceedings of the 2010 International Conference on Reconfigurable Computing and FPGAs, p. 79–84, 2010. 
[5] C. Leita and M. Dacier, “SGNET: A Worldwide Deployable Framework to Support the Analysis of Malware 
Threat Models,” Proceedings of the 2008 Seventh European Dependable Computing Conference, p. 99–109, 2008. 
[6] M. Bailey, J. Oberheide, J. Andersen, Z. M. Mao, F. Jahanian, and J. Nazario, “Automated classification and 
analysis of internet malware,” Proceedings of the 10th international conference on Recent advances in intrusion 
detection, p. 178–197, 2007. 
[7] G. Wicherski, “peHash: a novel approach to fast malware clustering,” Proceedings of the 2nd USENIX conference 
on Large-scale exploits and emergent threats: botnets, spyware, worms, and more, p. 1–1, 2009. 
[8] Y. Ye, T. Li, Q. Jiang, Z. Han, and L. Wan, “Intelligent file scoring system for malware detection from the gray list,” 
Proceedings of the 15th ACM SIGKDD international conference on Knowledge discovery and data mining, p. 
1385–1394, 2009. 
[9] V. Mulukutla, “Wolfsting: Extending Online Dynamic Malware Analysis Systems by Engaging Malware.,” 2010. 
[10] M. F. Zolkipli and A. Jantan, “Malware Behavior Analysis: Learning and Understanding Current Malware Threats,” 
in 2010 Second International Conference on Network Applications, Protocols and Services, 2010, p. 218–221. 
[11] X. Jiang, Z. Hao, and Y. Wang, “A Malware Sample Capturing and Tracking System,” in 2010 Second WRI World 
Congress on Software Engineering, 2010, p. 69–72. 
[12] D. Cavalca and E. Goldoni, “An Open Architecture for Distributed Malware Collection and Analysis,” Open 
Source Software for Digital Forensics, p. 101–116, 2010. 
[13] Z. Tzermias, G. Sykiotakis, M. Polychronakis, and E. P. Markatos, “Combining Static and Dynamic Analysis for 
the Detection of Malicious Documents,” 2011. 
[14] M. Apel, J. Biskup, U. Flegel, and M. Meier, “Early Warning System on a National Level–Project AMSEL,” in 
Proceedings of the First Workshop on Early Warning and Network Intelligence (EWNI), Hamburg, Germany, 2010. 
[15] B. J. Nabholz, “Design of an Automated Malware Analysis System,” College of Technology Directed Projects, p. 4, 
2010. 
[16] Y. M. Wang, D. Beck, X. Jiang, and R. Roussev, “Automated web patrol with strider honeymonkeys: Finding web 
sites that exploit browser vulnerabilities,” in IN NDSS, 2006. 
[17] Anubis: Analyzing Unknown Binaries, http://anubis.iseclab.org/ 
46 
 
[37] J. Rutkowska. “System virginity verifier: Defining the roadmap for malware detection on windows systems,” in 
Hack In The Box Security Conference, September 2005. 
[38] Heng Yin, Zhenkai Liang, and Dawn Song. “HookFinder: Identifying and Understanding Malware Hooking 
Behaviors.” in 15th Annual Network and Distributed System Security Symposium (NDSS'08), February 2008. 
[39] Min Gyung Kang, Pongsin Poosankam, and Heng Yin. “Renovo: A Hidden Code Extractor for Packed Executables,” 
in 5th ACM Workshop on Recurring Malcode (WORM), October 2007. 
[40] James Newsome and Dawn Song. “Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature 
Generation of Exploit Attacks on Commodity Software,” in Network and Distributed Systems Security Symposium, 
Feb 2005. 
[41] G. Edward Suh, Jaewook Lee and Srinivas Devadas. “Secure Program Execution via Dynamic Information Flow 
Tracking,” in CSAIL Technical Reports, July 2003 
[42] Michael Dalton, Hari Kannan, and Christos Kozyrakis. “Real-World Buffer Overﬂow Protection for Userspace & 
Kernelspace,” in 17th USENIX Security Symposium, 2008 
[43] Michael Dalton, Hari Kannan, and Christos Kozyrakis. “Raksha: a flexible information flow architecture for 
software security,” in Technical Record of the 19th Hot Chips Symposium, Palo Alto, CA, August 2007 
 
100年度專題研究計畫研究成果彙整表 
計畫主持人：謝續平 計畫編號：100-2218-E-009-004- 
計畫名稱：前瞻性雲端安全儲存、防護、行為分析與觀測平台--子計畫二：基於機器碼之 Windows惡
意程式行為分析雲端平台(2/2) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 3 3 60% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 2 2 50% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 2 2 100%  
博士生 2 2 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 4 4 100%  
研究報告/技術報告 0 0 100%  
研討會論文 2 2 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 3 3 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
