分時多工現場可規劃邏輯閘陣列架構之改良及其電路切割演算法之研究 
“A Study of Improving Architecture and Partitioning Algorithm for Time-Muultiplexed FPGA” 
計畫編號：NSC95-2221-E-251-004 
執行期間：95 年 8 月 1 日至 96 年 7 月 31 日 
主持人：高啟洲國立屏東商業技術學院資訊科技系助理教授 
 
一、 中文摘要 
動態可規劃性計算機已快速在超大型
積體電路的領域中發展。而在所有的動態可
規劃性計算機的架構中，因為 Xilinx 的時序
多工器可規劃化邏輯陣列(Time-Multiplexed 
FPGA, TMFPGA)的架構具有動態分時的邏
輯利用率，而成為最受歡迎的架構；然而，
卻因存在順序限制的問題，使得研究者難以
發展出一個有效率的 TMFPGA 切割演算
法。 
在本計畫中，我們改良 TMFPGA 的架
構，簡化 TMFPGA 切割問題中順序的限
制；此外，我們也將針對改良後的 TMFPGA
架構，提出有效的電路切割演算法以減少規
劃的次數來提高整體電路在 TMFPGA 實現
的效能。我們將以實際測試改良式TMFPGA
架構的切割演算法之效能以顯示本計畫所
提出架構的優越性。 
英文摘要 
Dynamically Reconfigurable Computing 
(DRC) is evolving rapidly in the VLSI design 
technology. In the DRCs, the most popular 
architecture is the Xilinx Time-Multiplexed 
FPGA (TMFPGA) because this architecture 
has a potential to improve logic utilization by 
time-sharing logic dramatically. However, 
there exists precedence constraint in the 
TMFPGA partitioning problem such that an 
effective algorithm is difficult to be developed 
for solving the problem. 
In the plan, we propose an improved 
TMFPGA architecture to solve the TMFPGA 
partitioning problem. Besides, we also 
propose a novel circuit partitioning algorithm 
for this improved TMFPGA architecture to 
minimize the number of partitioned stage. We 
will implement the proposed architecture on 
the benchmark circuits to demonstrate the 
effectiveness of our method. 
 
二、 計畫的緣由與目的 
動 態 可 規 劃 性 計 算 機 (Dynamic 
Reconfigurable Computing)架構能在系統操
作期間改變元件的設定狀態，並且能利用多
重設定內容(multi-context)的結構將不同的
設定內容儲存在晶片內的內容記憶體
(context memory)中，使資源可以有效地重新
被使用，以減少硬體的成本並且增進性能 
[1-2]。因為動態可規劃性計算機具有高度的
彈性和性能的特質，因此已被廣泛地使用在
許多數位信號處理和影像處理的應用上。圖
一為一個動態可規劃計算機的模型。 
隨著動態可規劃性計算機廣泛地應
用，對於記憶體及速度的需求也大幅提升，
為了符合記憶體和速度的要求，許多動態可
規劃性計算機的架構被提出，其中以 Xilinx
公 司 提 出 的  Time-Multiplexed FPGA 
(TMFPGA)架構最受歡迎 [3]，圖二顯示出
TMFPGA 的架構圖。TMFPGA 的架構則是
一個二維的陣列，繞線的結構已經包含在裡
面，其可規劃邏輯方塊(configurable logic 
block, CLB)的架構和 Xilinx 4000 系列中可
規劃邏輯方塊陣列相似，但其記憶體包含了
八個內容記憶體(context memory)來存取規
劃儲存的值，並且在可規劃邏輯方塊中加入
微暫存器(micro register)以掌控儲存在可規
外部的信號線供其他可規劃邏輯方塊使用。 
二、我們將分別在正反器和微暫存器增
加一個驅動接腳(enable pin)，這個驅動接腳
能控制正反器和微暫存器在適當的時間被
驅動。例如，假設一個電路被分割成兩個子
電路，以被可在 TMFPGA 實現，利用驅動
接腳(enable pin)可控制在階級一的正反器
只在第一個微循環(micro-cycle)被觸發，而
在階級二的正反器也只在第二個微循環
(micro-cycle)被觸發，而不會在每一個微循
環都觸發所有的正反器，藉由這樣的設計，
我們也能減少整個電路在 TMFPGA 實現時
所需的功率消耗(power consumption)。 
三、我們將在記憶體增加一個選擇接腳
(select pin)。在原有的 TMFPGA 中，有八層
的內容記憶體(context memory)來存取規劃
儲存的值，因此，假如我們切割一個電路成
八個階級(stage)，TMFPGA 能一次使用八個
記憶體 (micro-cycle)來實現這個電路，然
而，假如切割的階級數目低於八個微循環，
則電路的整體規劃時間也將隨之增加而降
低了電路的效能，但利用在記憶體增加的選
擇接腳，可產生一個控制器來連結每一個可
規劃邏輯方塊(CLB)，利用這個控制器可儲
存整個需要執行的階級數目，來控制微循環
的執行，以減少整體電路的規劃時間。 
四 、 我 們 將 每 一 個 微 暫 存 器
(micro-register)的時脈接腳和正反器的時脈
接腳連接在一起。在原有的 TMFPGA 中，
微暫存器的時脈接腳和正反器的時脈接腳
是分離的，而微暫存器是在規劃時被觸發
(trigger)，這樣的設計將造成正反器的輸入
信號會在重新規劃的期間藉由微暫存器來
傳送，而產生前述為了保證每一個正反器
(flip-flop)所使用的值和前一個使用者時脈
迴路(user clock cycle)的正反器值是同一
個，每個 flip-flop 所排的順序，不能在本身
輸出所連接的節點的順序之前的順序限制
(precedence constraints)。利用將每一個微暫
存器(micro-register)的時脈接腳和正反器的
時脈接腳連接在一起，則這個順序限制就將
會消失不見。 
經過前述的改進後，原有的順序限制
(precedence constraints)將會被簡化成唯一
的順序限制：在ㄧ個巨循環中，每一個查表
式(lookup table, LUT)的記憶體或正反器都
不能比產生該查表式記憶體輸入信號的查
表式記憶體先被執行。例如在圖四中，假設 
u 是用來代表 LUT 的節點(node)，而 v 是用
來代表正反器或 LUT 的節點，且 u 為 v 的
輸入節點(fan-in node)，因此 u 的執行順序
必須在 v 之前。 
 Context 1
Context 2 
 
Context n
…
  
CLB CLB CLBCLB 
CLB CLB CLBCLB 
CLB CLB CLBCLB 
CLB CLB CLBCLB 
 
 
Memory
 
4-LUT 
 
FF
  Switch matrix  Routing resource
select
 μ-reg 
enable
enable
 
mux
 
mux
圖三: 改良式 TMFPGA 架構圖。 
 
 u
 u
 u  illegal
 legal 
 legal 
 stage           1                2 
 v 
 v
 v
 
圖四: 適用改良式 TMFPGA 順序限制的例
子。 
針對我們所提出的改良式 TMFPGA 架
構的切割問題，我們也將提出高效率的演算
法，我們將一個電路以無迴路方向圖
(directed acyclic graph, DAG)來表示，演算法
的目的是希望切割無迴路方向圖成數個階
級(stage)，每一個階級都必須能以 TMFPGA
的規劃記憶體平面 (configuration memory 
planes)實現，在每個階級都滿足所有的順序
及階級面積的限制下降低階級數目以提高
整體電路在 TMFPGA 實現的效能。 
我們將改良式 TMFPGA 之切割演算法
分成兩個步驟：一、Scheduling Phase 和二、 
Balance-Area Phase，圖五是適用於改良式
TMFPGA 之切割演算法的流程圖。在
Scheduling Phase 的步驟中，我們先計算代
 AN IMPROVED ARCHITECTURE FOR OPTIMIZING 
PARTITIONING COST OF TIME-MULTIPLEXED FPGA 
Yen-Tai Lai 1, Tzu-Chiang Tai 1, Chi-Chou Kao 2, and Chung-Kai Liu 1 
        Department of Electrical Engineering 1                              Department of Information Technology 2 
National Cheng Kung University                         National Pingtung Institute of Commerce  
Tainan 70101, Taiwan                                                Pingtung, 900, Taiwan                
ABSTRACT 
The Time-Multiplexed FPGA (TMFPGA) dramatically 
improves logic utilization by using time-sharing logic. In 
order to use TMFPGA, the precedence constraints must be 
followed. It is a problem with high partitioning cost to 
partition a circuit for implementation on a TMFPGA. In this 
paper, we present a new TMFPGA architecture to simplify 
the precedence constraints such that the minimum 
partitioning cost of Time-Multiplexed FPGA problem can 
be optimized. This is achieved by applying the same clock 
signal to both the flip-flop and micro register inside control 
logic block (CLB). They are directly accessible from outside 
CLB by adding two multiplexers. For execution efficiency, 
a control signal is added to select the desired reconfiguration 
memory plane. To show the effectiveness of the new 
architecture, we implement an example circuit on the new 
TMFPGA.  
KEY WORDS 
TMFPGA, architecture, partition, precedence constraint, and 
circuit 
1. INTRODUCTION 
There is a growing interest in reconfigurable computers 
because they outperform digital signal processor by an order 
of magnitude. Dynamically Reconfigurable FPGA 
(DRFPGA) is the key element in reconfigurable computers. 
Several DRFPGA architectures have been proposed, for 
example, the Dharma [4], the Dynamically Programmable 
Gate Array (DPGA) [1][8], the Virtual Element Gate Array 
[3], the Xilinx Time-Multiplexed FPGA (TMFPGA) [5], and 
etc [2]. The logic blocks and wire segments in a DRFPGA 
are dynamically reconfigurable because each of them has 
more than one SRAM bits controlling it. The reconfiguration 
to change logic blocks and interconnect by reading a SRAM 
bit only takes time in the order of nanoseconds [5]. Hence we 
can partition a given circuit into sub-circuits, each of which 
is loaded on the DRFPGA at different time. Equivalently, the 
DRFPGA is time-shared by those sub-circuits.  
Consider the architecture of Xilinx TMFPGA shown in 
Fig. 1. It consists of an array of augmented XC4000E-style 
Control Logic Blocks (CLBs) [1], [7]. A significant 
difference between this CLB and a XC4000E is the addition 
of the micro registers near the CLB outputs.  The micro 
register can hold the CLB result until next configuration. 
Even more there are eight contexts to store the 
configurations. Fig. 2 shows the schematic diagram of a CLB 
in TMFPGA. Each configurable point in the device is backed 
by eight memory cells, as shown by the shadowed boxes. 
Similarly each interconnect point is backed by eight memory 
cells. The configuration memory is distributed throughout 
the die. 
 Fig 3 shows the Time-Multiplexed FPGA configuration 
model.  The TMFPGA can emulate a large design through at 
most 8 configurations stored in the configuration memory 
planes. The time frame that a configuration occupies is called 
a micro cycle. One pass through all the micro cycles is called 
a macro cycle or user cycle. The TMFPGA performs 
according to one configuration at a time and updates all the 
bits associated with the configurable points simultaneously 
when switching from one configuration to another.  
…
 
CLB CLB CLBCLB 
CLB CLB CLBCLB 
CLB CLB CLBCLB 
CLB CLB CLBCLB 
 
 
Memory
 
4-LUT 
 
FF
 
mux Micro 
Register
  Switch matrix  Routing resourceContext 1
Context 2
Context 8
 
Fig. 1 Time-Multiplexed FPGA architecture 
9 × 8
9 × 8
1 × 8
1 × 8
  
LOGIC 
FUNCTION
OF 
G1-G4 
  
LOGIC 
FUNCTION
OF 
F1-F4 
 
 
 
 
 
 
 SR CONTRL 
 
 SD D 
       Q
 
 
 
RD EC
 
 
 SR CONTRL 
 
 SD D 
       Q
 
 
 
RD EC
1 
1 
 
 μRegisters 
 
 μRegisters 
G1
G2
G3
G4
F4
F3
F2
F1
G’
F’
H’
H1 DIN EC 
Y1,Y3
Y1,Y3
C1 C2 C3 C4 
K
(CLOCK)
S/R 
 LOGIC 
FUNCTION
OF 
F’, G’ AND
H1 
16 BITS × 8
8 BITS × 8
16 BITS × 8
2 × 8
1 × 8
1 × 8
2 × 8
 1 × 8 
 1 × 8 
 1 × 8 
 1 × 8 
 
Fig. 2 CLB architecture of Time-Multiplexed FPGA 
573-013 94
 should not be scheduled in a micro cycle later than the flip-
flop. This is the reason why constraint 3 must exist.  
The third constraint is unnecessary any more with the 
new architecture. The clock pins of micro register and the 
flip-flop are connected together in the new architecture. 
When the clock triggers both of them, the micro register 
holds the output value of the flip-flop and the value will be 
available to the outside of the CLB in this user cycle. In the 
mean while, the flip-flop holds the value that should be 
output in the next user cycle because it is not time- 
multiplexed. Fig. 5 illustrates an example. Assume logic A is 
driven by flip-flop B.  If logic A is scheduled in a micro cycle 
later than flip-flop B, the micro register that is fan-out of flip-
flop B should serve as an input buffer of logic A. By contrast, 
if logic A is scheduled in a micro cycle earlier than flip-flop 
B, flip-flop B itself should serve as an input buffer of logic A 
and need no micro register as its fan-out. Since a logic gate 
that is driven by the flip-flop can be scheduled arbitrarily, the 
third constraint is not required any more. Only precedence 
constraint 1 and 2 are required during partitioning. Fig. 6 
shows a block diagram of the CLB with the new TMFPGA 
architecture. It is based on the XC4000E device.  
 
micro 
cycle    1           2            3                1                 2            3 
(a)                                              (b) 
Fig. 5 (a) When logic A is scheduled later than flip-flop B, 
the micro register serves as a fan-in of logic A. (b) When 
logic A is scheduled earlier than flip-flop B, flip-flop B 
serves as a fan-in of logic A. 
2 × 8
2 × 8
1 × 8
1 × 8
  
LOGIC 
FUNCTION 
OF 
G1-G4 
  
LOGIC 
FUNCTION 
OF 
F1-F4 
 
 
 
 
 
 
 SR CONTRL 
 
 SD D 
       Q 
 
 
 
RD EC 
 
 
 SR CONTRL 
 
 SD D 
       Q 
 
 
 
RD EC 
1 
1 
G1 
G2 
G3 
G4 
F4 
F3 
F2 
F1 
G’ 
F’ 
H’ 
H1 DIN 
K 
(CLOCK) 
 LOGIC 
FUNCTION 
OF 
F’, G’ AND 
H1 
 
 
SR
CONTRL
1
 
  SD 
Q
μR 
 
 
RDEC
D
EX3
SR
CONTRL
1
 
  SD 
Q
μR 
 
 
RDEC
D
EX1 
EX2 
EX4
EC1 EC2 SR2 SR1 
 16 BITS × 8 
 16 BITS × 8 
 8 BITS × 8 
 2 × 8 
 2 × 8 
 1 × 8 
 1 × 8 
 1 × 8 
 1 × 8 
 1 × 8 
 1 × 8 
 1 × 8 
 1 × 8 
 
Fig. 6 CLB with new TMFPGA architecture 
3. DESIGN FLOW FOR THE NEW TMFPGA 
The design flow to realize a circuit on a new TMFPGA is 
depicted in Fig. 7. It is essential to add the partitioning 
procedure in the design flow due to the time-multiplexed 
characteristics when we compare the design flow to that of 
the traditional FPGA, which can only emulate the design not 
exceeding its capacity. Partitioning strategy is needed to 
achieve user-defined objectives. Nevertheless, we must 
always ensure the correctness under the area and precedence 
constraints. The design flow is further described as follows. 
According to the precedence constraints, the logic gates 
and flip-flops in circuit are scheduled by dividing them into 
levels. Based on the result of scheduling and area constraint, 
we then partition the logic gates and flip-flops in the circuit 
into several sub-circuits such that each of which can be 
mapped to the real hardware of the new TMFPGA and 
executed in a micro cycle. 
The next step performs placement and routing for each 
sub-circuit respectively. Finally, based on the results of 
placement and routing for each sub-circuit a bit stream for 
configuration is then generated and stored in the 
corresponding memory plane. 
 Technology Mapping
 Scheduling
 Partitioning
 Placement & Routing
 Bit Stream 
 Circuit
 
Fig. 7 Design flow for new TMFPGA 
An example is illustrated to explain how to implement 
the circuit in Fig. 8 with new TMFPGA. Assume there are 
four CLBs in a new TMFPGA and each CLB contains a 2-
input LUT and a flip-flop.   Fig. 8 shows the schematic of 
this example circuit, which is a counter having three flip-
flops and eight logic gates. Its state table is shown in Table I. 
For simplicity, we neglect the detail of technology mapping 
and partitioning algorithm, and focus on the correctness of 
execution. 
  D1 Q1 
 
 
 
   
 
 Clock
 Reset
 Q3
 Q2
 Q1
 v1  v2
 v3
 v5  v6 
 v7 
 v8
 v9  v10
 v11
  D2 Q2   D3 Q3
 
Fig. 8 Schematic of the example circuit 
Fig. 9 shows the results of technology-mapping, 
scheduling, and partitioning in (a), (b), and (c), under the 
new precedence constraints, respectively. Each LUT or flip-
flop is labeled in the scheduling process.  The larger the label, 
the earlier execution order the LUT or flip-flop. The counter 
can be divided into 3 sub-circuits according to the area 
constraint of the new TMFPGA and the level of each LUT 
P1, P2, …, Pk 
FF 
FF B 
B 
Logic 
Logic 
A 
A 
micro 
register 
No 
micro 
register
96
 [1] A. DeHon, “DPGA-coupled microprocessors: 
Commodity ICs for the 21st Century”, Proc. IEEE 
Workshop on FPGAs for Custom Computing Machines, 
pp. 31-39, 1994. 
[2] A. DeHon, “Reconfigurable architecture for general 
purpose computing”, PhD thesis, Massachusetts 
Institute of Technology, October 1996. 
[3] D. Jones and D. M. Lewis, “A time-multiplexed FPGA 
architecture for logic emulation”, Proc. IEEE Custom 
Integrated Circuits Conference, pp. 495-49, 1995. 
[4] N. B. Bhat, K. Chaudhary, and E.S. Kuh, 
“Performance-oriented fully routable dynamic 
architecture for a field programmable logic device”, 
Memorandum No. UCB/ERL M93/42, university of 
California, Berkeley, 1993. 
[5] S. Trimberger, “A time-multiplexed FPGA”, Proc. 
IEEE Symp. FPGAs for Custom Computing Machines. 
pp. 22-28, March, 1997. 
[6] S. Trimberger, “Scheduling Designs into a Time-
multiplexed FPGA”, Proc. ACM Int. Symp. FPGA, pp. 
153-160, 1998. 
[7] Xilinx, The Programmable Logic Data Book, 1996. 
[8] B. K. Fawcett, “Taking advantage of reconfigurable 
logic”, ACM Int. Work. On FPGAs, 1994. 
REFERENCES
98
 1
出席國際學術會議心得報告 
                                                             
計畫編號 NSC 95-2221-E-251-004 
計畫名稱 分時多工現場可規劃邏輯閘陣列架構之改良及其電路切割演算法之研究 
出國人員姓名 
服務機關及職稱 
國立屏東商業技術學院資訊科技系高啟洲助理教授 
會議時間地點 加拿大 班夫會議中心 2007/7/2~4 
會議名稱 2007 5th IASTED International Conference on Circuits, Signals, and Systems 
發表論文題目 
1. An Optimal Power Algorithm for Interface Design of System-on-Chip 
2. A Minimum Communication Cost Algorithm for Dynamically 
Reconfigurable Computing System 
 
一、參加會議經過 
 
第五屆2007 IASTED 國際電路、訊號與系統會議於2007 年7 月2-4 在加拿大班夫會議
中心( Banff Centre)舉行，此會議係由國際科學與科技發展協會(IASTED)主辦。 
會議的地點在加拿大班夫會議中心，是一個世界知名的會議場所， 該場地每年舉辦多
個不同的國際會議，約有近數十萬人參與。此會議中有 52 篇論文被接受且發表於會議中，
論文發表的形式全部為口頭報告，3 天的會議中共包含 Low Power Circuits and Systems 、SoC 
and Networks 、Digital Circuits and Systems 、DSP 、Power Electronics and Systems 、Mixed 
Mode Circuits 、RF Circuits 及 Applications and CAD 8 個口報議程。在口報議程中每位學者
均有 20 分鐘的口頭發表時間，包括 15分鐘的學術論文報告和 5 分鐘的問題與討論。 
本人於此會議投稿了兩篇論文並被接受，各於7 月2 日下午及7 月3 日上午進行口頭報
