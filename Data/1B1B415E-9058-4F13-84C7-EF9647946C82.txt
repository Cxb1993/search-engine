 行政院國家科學委員會補助專題研究計畫成果報告 
 
容忍時序錯誤的管線積體電路設計 
 
 
計畫類別：□ 個別型計畫  □ 整合型計畫 
計畫編號：NSC 98-2221-E-259-024 
執行期間： 98 年 8 月 1 日 至 99 年 7 月 31 日 
 
計畫主持人： 紀新洲 
 
  
 
成果報告類型(依經費核定清單規定繳交)：□精簡報告  □完整報告 
 
本成果報告包括以下應繳交之附件： 
□赴國外出差或研習心得報告一份 
□赴大陸地區出差或研習心得報告一份 
□出席國際學術會議心得報告及發表之論文各一份 
□國際合作研究計畫國外研究報告書一份 
 
 
處理方式：除產學合作研究計畫、提升產業技術及人才培育研究計畫、列管計
畫及下列情形者外，得立即公開查詢 
          □涉及專利或其他智慧財產權，□一年□二年後可公開查詢 
          
執行單位：國立東華大學資工系 
 
中華民國 99 年 10 月 31 日 
 
 
delay) 、軟錯誤(soft error)等因素影響而
發生時序錯誤(timing error)。時序錯誤為資
料進入時，因為受到影響而使電路取樣到錯誤
的資料。在半導體製程的大幅提升後，時序錯
誤將會造成電路嚴重的代價，而容忍錯誤的設
計能在電路發生錯誤時，立即偵查(detect)出
錯 誤 ，並能將 發生錯誤的資料 做修正
(correct)，使電路回復正常運作狀態，對於
現在的晶片系統(system-on-chip 或 SoC)而
言，已是一個重要的設計方向。 
由於半導體製程的快速進步，促使晶片中的電
晶體個數和工作時脈頻率也相對大幅提升，積
體電路所擁有的機會遠甚於過去，也造成下列
的幾個問題將日益嚴重： 
 傳輸延遲(wire delay)：隨著製程的演進，傳
輸延遲時間佔總延遲時間的部份不斷提
升，尤其晶片系統(system-on-chip 或 SoC)
需要更長的連線來連接各元件或模組，造
成信號的延遲時間太長 [16,17] 。 
 同步(synchronization)：由於電路工作在高
時脈頻率，稍有時脈歪斜(clock skew)，都
將造成元件之間的不同步[5,6,8,14,18]。 
 雜訊(noise)：由於電晶體的體積變小，為了
避免高電壓造成電路損壞，必須將工作電
壓降低。除此之外，降低工作電壓也有減
少功率消耗的優點。但降低工作電壓將使
得抵抗雜訊的能力降低，雜訊干擾所產生
的資料錯誤將成為無法避免的問題。 
 軟錯誤(soft errors)：軟錯誤是資料傳遞時發
生短暫錯誤的現象，是由宇宙射線帶來的
中子和晶片封裝材料中的 α 粒子所引起 
[1,2,3,4,7,10,11,12,13,15,19]。 
以上因為製程演進所發生的問題，皆會造成電
路資料的時序錯誤(timing error)。如圖 1 在管線
化電路結構中，當資料進入管線緩衝區(pipeline 
buffer)，發生了資料尚未準備齊全或遭到了雜
訊、軟錯誤等環境因素影響，而導致進入管線
緩衝區的資料為不齊全或損壞的，此一現象稱
作 時 序 錯 誤 (timing error) 
[5,6,8,9,14,16,17,18] 。時序錯誤所造成的後果
也因系統工作頻率的高速化而無法忽視，所以
系統是否有足夠的能力，維持住資料的正確性
及其系統效能，成為了我們所探討的重點。 
 
clk
data
timing error
 
圖 1. 時序錯誤。 
當錯誤發生時，對於測試技術而言，某些狀況
只需診斷是否發生錯誤即可。例如：測試一個
晶片，我們只需了解其是否能正確的工作即
可，這種測試稱為錯誤偵測(detect)。相反的，
有些測試不僅僅要測出錯誤，且亦要有復原
(correct)的功能，錯誤復原電路(error resilient 
circuit)即為於晶片中放置測試電路和復原電
路，能做自我之測試亦能自我校正錯誤，使得
晶片系統擁有錯誤容忍(fault tolerance) 的能力 
[4,7,8,9,16,19]。 
本計畫提出一個可容忍時序錯誤的管線積體電
路設計，我們變更電路中的管線緩衝器
(pipeline buffer)架構，使得緩衝器組織能偵
查出時序錯誤，並針對電路中不同的路徑狀
況，設計其相對應的控制電路。此設計不但能
夠將錯誤的資料復原，並且不影響整體管線的
正常運作，使管線緩衝器能擁有容忍時序錯誤
的功能，以面積來換取整體電路的容錯性。本
計畫的相關研究大致整理如以下兩方面，包括
T-error 的優點在於能將時序錯誤復原，但缺
點是發生錯誤時，需要花一個時序週期時間的
補償(penalty)，而且前面的管線緩衝區皆需暫
緩以配合此階電路的復原動作。 
B. 管線化電路的錯誤容忍架構 
在管線化電路結構中，當資料進入管線緩衝區
(pipeline buffer)，發生了資料尚未準備齊全或
遭到了軟錯誤等環境因素影響，而導致時序錯
誤發生，進而影響了往後管線的運作。以往的
錯誤處理方式為將發生錯誤的那筆資料重新
輸入一次，但是在管線化電路的運作模式下，
將造成嚴重的時間補償。下面我們描述相關管
線化電路的錯誤容忍架構應用，並分析其優缺
點。 
B.1 掃描鏈應用 
掃描鏈(scan chain)上的閂鎖器在沒有使用的
情況下，可提供組合電路邏輯閘的錯誤更正使
用。以下是 C-element 兩種應用方式，利用複
製 電 路 更 正 錯 誤 (error correction using 
duplication)和利用時間移位更正錯誤 (error 
correction using time-shifted 
outputs)[10,12,13,19]。圖 5 為利用複製電路更
正組合電路邏輯閘錯誤，複製了兩倍輸出取代
了原本比較的內容，此技術也可更正閂鎖器當
Clock 為 0 時的軟錯誤。 
 
comb.
circuit
comb.
circuit
D
Q
D
Q
C
in
out1
out2
clk
C-element
C-out
weak keeper
latch
redundant latch
(scan reuse)  
圖 5. 利用複製電路更正錯誤。 
時間移位更正錯誤不需要兩倍的組合電路邏
輯閘，但是需要額外的效能代價，時間移位更
正錯誤技術如圖 6。此技術優點在於用延遲一
段時間過後的輸出當作另一個輸出，跟上一個
方法比起來大大地節省了功率及面積，另外也
省去了兩倍電路複雜的控制訊號。如果將延遲
時間定義為 τ，經過模擬結果後，可以找出最
能減少軟錯誤發生的 τ。 
comb.
circuit
D
Q
D
Q
C
in
out
clk
C-element
C-out
weak keeper
latch
redundant latch
(scan reuse)
τ
delay
element
 
圖 6. 利用時間移位更正錯誤。 
應用 C-element 的兩種方法，優點在於錯誤控
制的 C-element 電路簡單，但利用複製電路更
正錯誤方法所付出的功率及面積代價較大，而
時間移位更正錯誤方法雖較節省，但錯誤容忍
度相對的也會降低。 
B.2 晶片網路的管線化連結 
    另一管線化電路的錯誤容忍架構應用在
晶片網路的管線化連結[16,17]，主要是為了解
決時序錯誤的問題，系統效能隨著通訊系統改
善而提升的同時，晶片網路需支援更高的流量
(throughput)、低延遲的通訊以及低功率消耗
等等。如圖 7 連結管線化能夠增加連接的流量
以及減低傳輸延遲，連結上面的管線數目，隨
著連結的長度以及每個單位時間訊號所能達
到的最大距離而有所不同。因此，在這麼多的
管線之下，若我們使用積極的設計方法，將有
可能發生時序錯誤。傳統上我們用資料加上額
外的資訊(redundant bit)來偵測資料傳送的過
當發生時序錯誤時，控制電路會啟動 enable
訊號，使得 buffer正反器開始運作，除了 enable
訊號外亦會將啟動 select1 和 select2 訊號，
select1 訊號為控制 buffer 正反器輸入的資料
路徑，當 select1 訊號啟動後，delay 正反器裡
的正確資料就能傳入到 buffer 正反器，然後再
由 buffer 正反器提供正確的資料，以完成時序
錯誤復原的動作，select1 訊號接著在下一個
時序週期隨即恢復成未致能狀態，發生時序錯
誤後的下筆資料就先進入到 main 正反器，然
後在下一個時脈週期時送入到 buffer 正反
器，這樣就能無需延遲的維持電路管線化正常
運作。 
select2 訊號為管線緩衝區輸出資料路徑的選
擇訊號，在沒有發生時序錯誤時為未致能狀
態，資料輸出由 main 正反器提供，發生時序
錯誤時將 select2 訊號致能，使得輸出為 buffer
正反器所提供復原後的資料。 
我們所設計的正反器組織還有一特性，如圖
10 所示。當第一次時序錯誤發生時，使得
buffer 正反器開始運作，來當成錯誤復原後的
資料緩衝區，當前一階管線緩衝區輸出為無效
的資料，而進入到 main 正反器，接著將無效
的資料送進 buffer 正反器後，即把 select2 訊
號恢復成未致能狀態，由 main 正反器提供下
一筆有效的資料，並將此階管線緩衝區恢復成
一般的運作形態，使得電路運作更有效率。 
我們考慮不同的路徑狀況，來設計不同的控制
電路，首先考慮電路在無回溯路徑時的控制電
路，如圖 11， regular 控制電路的方塊圖所
示。輸入訊號 error 為正反器組織的錯誤偵測
電路結果輸出，select1、select2 和 enable 等輸
出訊號為經由控制電路依據 error 和 valid-in
訊號運作後，提供給正反器組織的工作訊號，
valid-in 訊號為前階管線緩衝區的 valid-out 訊
號輸出，而 valid-out 訊號則為下階管線緩衝
區的 valid-in 訊號輸入。 
main
flip-flop
delay
flip-flop
buffer
flip-flop
M
U
X
2
1
M
U
X
1
out
in
0
invalid data
main
flip-flop
delay
flip-flop
buffer
flip-flop
M
U
X
2
M
U
X
1
out
in
0
invalid data
0
 
圖 10 正反器組織另一特性。 
valid-out訊號是當 error或 valid-in訊號為致能
時，表示電路目前發生時序錯誤或收到無效的
資料，通知下階管線緩衝區所剛送出的資料為
無效的，需等到下個時序週期，電路才能提供
正確的資料。 
regular control 
circuit
select1 select2 enable error
valid-in valid-out
 
圖 11. Regular 控制電路。 
 
除了 regular 的電路外，我們並將不同類型的
結構分別設計其相關的電路與其控制電路，包
括有: forward 類型、Feedback 和 feedback 
joining 類型等。 
我們把前述的時序錯誤復原的設計應用於
DSP 電路上，包含 FIR 與 IIR 兩類電路上。而
前面所說明的電路元件皆為 1 位元狀態，而當
我們應用在實際電路上，如果資料為多個位元
時，我們應用的位元數擴充方法如圖 12。同
Proceedings of Design Automation Asia and South 
Pacific Conference, January, 2006. 
[5] R. Guo and S. Venkataraman, “A Technique for Fault 
Diagnosis of Defects in Scan Chains,” Proceedings of 
IEEE International Test Conference, pp.268-277, 
November, 2001. 
[6] Y. Huang, W.T. Cheng, S.M. Reddy, C.J. Hsieh and 
Y.T. Hung, “Statistical Diagnosis for Intermittent Scan 
Chain Hold-Time Fault,” Proceedings of IEEE 
International Test Conference, Vol. 1, pp.319-328, 
September, 2003. 
[7] R.K. Iyer, N.M Nakka, Z.T. Kalbarczyk and S. Mitra, 
“Recent Advances and New Avenues in 
Hardware-Level Reliability Support,” IEEE Micro, 
Vol. 25, No. 6, pp. 18-29, 2005. 
[8] J.C.M. Li, “Diagnosis of Multiple Hold-Time and 
Setup-Time Faults in Scan Chains,” Proceedings of 
IEEE Transactions on Computers, Vol. 54, No. 11, 
pp.1467-1472, November, 2005. 
[9] J.C.M. Li, “Diagnosis of Single Stuck-at Faults and 
Multiple Timing Faults in Scan Chains,” Proceedings 
of IEEE Transactions on Very Large Scale Integration 
Systems, Vol. 13, No. 6, pp.708-718, June, 2005. 
[10] S. Mitra, N. Seifert, M. Zhang, Q. Shi and K.S. Kim, 
“Robust System Design with Built-In Soft Error 
Resilience,” Proceedings of IEEE Transactions on 
Computer, Vol. 38, No. 2, pp. 43-52, February, 2005. 
[11] S. Mitra, M. Zhang, T.M. Mak, N. Seifert, V. Zia and 
K.S. Kim, “Logic Soft Errors: A Major Barrier to 
Robust Platform Design,” Proceedings of IEEE 
International Test Conference, pp.10, November, 
2005. 
[12] S. Mitra, M. Zhang, N. Seifert, B. Gill, S. Waqas and 
K.S. Kim, “Combinational Logic Soft Error 
Correction,” Proceedings of IEEE International Test 
Conference, pp1-9, October, 2006. 
[13] S. Mitra, M. Zhang, N. Seifert, T.M. Mak and K. Kim, 
“Soft Error Resilient System Design through Error 
Correction,” Proceedings of IFIP International 
Conference on Very Large Scale Integration, 
pp.332-337, October, 2006. 
[14] S.M. Reddy, I. Pomeranz, S. Kajihara, A. Murakami, 
S. Takeoka and M. Ohta, “On Validating Data Hold 
Times for Flip-Flops in Sequential Circuits,” 
Proceedings of IEEE International Test Conference, 
pp. 317-325, October, 2000. 
[15] Y. Sasaki, K. Namba and H. Ito, “Soft Error Masking 
Circuit and Latch Using Schmitt Trigger Circuit,” 
Proceedings of IEEE International Symposium on 
Defect and Fault Tolerance in VLSI Systems, 
pp.327-335, October, 2006. 
[16] R.R. Tamhankar, S. Murali and G.D. Micheli, 
“Performance Driven Reliable Link Design for 
Networks on Chips,” Proceedings of Design 
Automation Asia and South Pacific Conference, Vol. 
2, pp.749-754, January, 2005. 
[17] R. Tamhankar, S. Murali, S. Stergiou, A. Pullini, F. 
Angiolini, L. Benini and G.D. Micheli, 
“Timing-Error-Tolerant Network-on-Chip Design 
Methodology,” Proceedings of IEEE Transactions on 
Computer-Aided Design of Integrated Circuits and 
Systems, Vol. 26, No. 7, pp. 1297-1310, July, 2007. 
[18] Y. Wu, “Diagnosis of Scan Chain Failures,” 
Proceedings of IEEE International Symposium on 
Defect and Fault Tolerance in VLSI Systems, 
pp.217-220, November, 1998. 
[19] M. Zhang, et al., “Sequential Element Design with 
Built-In Soft Error Resilience,” Proceedings of IEEE 
Transactions on Very Large Scale Integration, Vol. 
14, No. 12, pp.1368-1378, December, 2006. 
表 Y04 
一、參加會議經過 
 
本會議為 IEEE 計算機學會年度超大型積體電路會議(ISVLSI 2010)，舉辦地點是在希臘
Kefalonia 島的 Lixouri。ISVLSI 是一個具有悠久歷史而且學術影響力的國際會議，涵蓋了
許多超大型積體電路系統的研究課題。 
本屆會議所研討的課題相當廣，主要包括 VLSI Design Issues, Embedded System Design, 
Cryptographic Hardware Engineering, Reconfigurable Systems, Physical Design, Advanced Mixed 
Signal Design, Advanced High-Performance Design Techniques, Design for Reliability, 
Architecture-level Design Solutions, Emerging Devices for Memory Design and Nanocomputing, 
Novel System Design Trends with Emerging Technologies，另外並有 Invited Talks, Research 
Project Workshop, PhD Forum, Poster Session 等。參加的學者以歐美為最多，另外也有日本、
台灣、印度、中國、香港與韓國等，我是唯一的台灣參加者。 
Invited Talks 包括有 European ICT Research: 2011-2012 Outlook for Components and 
Systems, Challenges and Perspectives of Computer Architecture Beyond CMOS, Digital 
Microfluidic Biochips: A Vision for Functional Diversity and More than Moore, Small Worlds: the 
Dynamics of NoCs in Tomorrow SoC Architecture，尤其最後有關晶片網路的課題與我的領域最
接近，講者又來自產業界的研發主管，聽講的收穫也最多。 
我們的論文發表是在會議的第三天下午的 session – Architecture-Level Design Solutions。同
一 session 的論文發表者除了台灣，還有有來自美國、中國、香港與印度的學者，論文的題目
大都是先進的超大型積體電路系統課題，如: Network-on-Chip Design, Multiprocessor 
System-on-Chip, Optical-Electronic Networks。在口頭報告完畢之後，現場聽眾也與我有一些問
題上的討論，討論最多的是一位印度學者。 
     
二、與會心得 
 
參加這次會議最大的心得是學術圈已經是個地球村，各國的與會者可以透過網際網路獲
得最新的訊息，因此交流比以往更密集與頻繁。由參加這次會議的機會，也多認識了歐美亞
地區的幾位學者。參加這類的國際會議活動，增加了我們在國際間的曝光度，並為以後的交
流奠定了些基礎。另外，由與其他國家的學者與產業界代表的互動討論的過程中，也可以學
習他人的經驗與觀摩別人的優點。 
 
三、建議 
 
各國在超大型積體電路系統相關領域的發展越來越快，尤其在先進的研究領域領域上頗
有成績。在會議中可以看得出來各國的學者越來越積極，我們必須要往前邁進更前瞻的領域
才行。 
 
四、攜回資料名稱及內容 
 
參加此次會議所帶回之資料主要為會議論文集的光碟: Proceedings of IEEE Computer 
Society Annual Symposium on VLSI。 
 
Tree-Based Routing for Faulty On-Chip Networks 
with Mesh Topology 
 
Hsin-Chou Chi, Yu-Hong Jhang, and Wen-Shu Chen 
Department of Computer Science and Information Engineering 
National Dong Hwa University 
Hualien, Taiwan 
 
 
Abstract—Network-on-chip (NoC) architectures have been 
recently proposed as the communication framework for large-
scale chips. The design of the routing system for the packet-
switched on-chip network is one of the critical issues for the 
success of NoC architectures, especially when there are faulty 
components in the network. In this paper, we present a routing 
technique that uses an embedded tree for mesh networks to 
achieve high-performance on-chip communication. In this design, 
the abundant links not belonging to the embedded tree become 
shortcuts to reduce the distance for packet routing. We show that 
our routing is deadlock-free and, with appropriate mapping of 
the tree, equivalent to the well-known XY routing for mesh 
networks. Furthermore, when there are faulty components in the 
network, our switch can still successfully deliver packets through 
tree re-mapping as long as the network is connected. Our design 
is evaluated by using static analysis and simulation for faulty 
networks with various network sizes. The results show that our 
design achieves superior performance without using a routing 
table in the switch for faulty mesh on-chip networks. 
Keywords-network-on-chip architectures; routing algorithm; 
packet-switched networks; switches; fault tolerance 
I.  INTRODUCTION 
System-on-chip (SoC) platforms provide system designers 
to integrate a large number of silicon IP cores into a single chip. 
The number of IP cores in SoC can scale from a few dozens to 
even several hundreds. As modern SoC is more and more 
complex, the design of communication infrastructure between 
IP cores becomes one of the major challenges. Conventional 
on-chip communication uses dedicated wires or shard buses to 
connect on-chip IP cores. However, these approaches suffer 
from many drawbacks in modern SoC designs [1][2]. 
Recently, network-on-chip (NoC) architectures have been 
proposed as the communication framework for SoC design 
[1][2]. Packet switching is usually employed for data exchange 
between IP cores for such on-chip networks. One of the critical 
issues for designing on-chip networks is deadlock-free packet 
routing, especially when there are faulty switches or links 
[3][4][5]. When some of the switches or links are faulty, the 
network topology is no longer regular. Thus, the original 
deadlock-free routing scheme for regular networks cannot be 
applied.  
To solve the packet routing problem for irregular networks, 
several schemes have been proposed [5][6][7][8][91][10]. 
However, most of them have many restrictions, which either do 
not allow all healthy nodes to be in the routing network or 
require complex, costly routing hardware in the switch. 
Deadlock-free tree-based routing has been proposed to solve 
the routing problem of irregular networks. However, these 
proposed routing schemes still require costly routing tables in 
the switch [7][8][9][10].  As the size of the on-chip network 
increases, the chip area for the routing table increases 
significantly. Such disadvantage severely limits the size of 
practical on-chip networks. 
In this paper, we apply a tree-based routing scheme called 
TRAIN (Tree-based Routing Architecture for Irregular 
Networks) to faulty mesh on-chip networks [11]. TRAIN is 
deadlock-free, and does not require a routing table in the switch 
and hence can be efficiently implemented in NoC architectures. 
We show that, through appropriate embedding of a tree in the 
mesh on-chip network, our TRAIN routing is equivalent to the 
well-known XY routing. Furthermore, when part of the 
components, including links and switches, are faulty and 
cannot be used, TRAIN can still deliver the injected packets to 
their destinations successfully. Static analysis and simulation 
have been used to evaluate the performance of TRAIN for 
faulty mesh on-chip networks with various sizes. It is shown 
that our design can achieve superior performance with limited 
complexity in the switch. 
In the next section, we describe our TRAIN routing scheme 
for irregular networks. The technique of embedding a tree in a 
regular mesh and how it is equivalent to the XY routing are 
proposed in Section III. An algorithm for constructing the tree 
for TRAIN in a faulty mesh on-chip network is presented in 
Section IV. Performance evaluation of TRAIN, including static 
analysis and simulation, is given in Section V. Section VI 
summarizes and concludes our work. 
II. TREE-BASED ROUTING FOR IRREGULAR NETWORKS 
An irregular network consists of an arbitrary number of 
nodes and has an irregular topology. Fig. 1 shows an example 
of an irregular network consisting of 9 nodes. Each node 
includes an IP core and an associated switch in the network. 
We assume that a switch connects to only one IP core in this 
paper since it is the typical case for many on-chip networks. 
The efficient design and implementation of the switch and its 
routing function have significant impact on the performance of 
the network. 
problem is shown in Fig. 3, taking the example in Fig. 2. The 
algorithm is described in the following:  
111 121 122 221 222
110 120 210 220
200100
000
121 120 100 000 200 220  
Figure 2. An example network with TRAIN. A packet arrives in node 120 
takes the shortcut going to node 200. 
Algorithm Distance_Calculatio_of_Tree_Route: 
Step 1:  From the two digit strings of two nodes’ IDs, remove the 
common prefix string from the two node IDs. 
Step 2:  The distance of tree route between two nodes is exactly the 
total number of non-zero digits left in the two strings. 
2 2 0
2 0 0
2 2 0
3 1
1 0 0
 
Figure 3. Distance calculation for the example in Fig. 2. 
The TRAIN routing algorithm is described as follows. In 
the routing algorithm, a desired shortcut is defined as a 
shortcut that provides shorter or the same route distance than 
the tree route. Besides, a link is said to be profitable if the link 
can bring the packet “closer” to the destination. 
Algorithm TRAIN_Routing: 
Step 1:  For an arriving packet, calculate all the possible distances 
from the current node to the destination node based on the 
destination node ID and the stored IDs of the neighboring 
nodes. 
Step 2:  If there exists any unblocked desired shortcut, pick the 
most profitable one, whose associated neighboring node 
has the shortest tree route to the destination. Route the 
packet to the neighboring node with this shortcut. 
Step 3:   If all the desired shortcuts are blocked or there is no desired 
shortcut from the current node, simply route the packet to 
the neighboring node along the unblocked tree route. 
Step 4:  If all the desired shortcuts and the tree route are blocked in 
the current cycle, wait for the next cycle and start from Step 
2 again. 
Note that in the up*/down* routing, the links connecting 
nodes at different levels in the tree do not participate in routing 
packets. In the L-turn and tree-turn routing, many links cannot 
be used due to restricted turns. With these routing schemes, the 
bandwidth of many links is thus wasted. Furthermore, since 
each switch has an associated routing table and searching the 
table is part of the routing function in the switch, the 
complexity of the switch is relatively high. Fig. 4 shows the 
TRAIN configuration of the irregular network for the example 
in Fig. 2.  Note that six links are used as shortcuts.  
TRAIN routing uses a simple mechanism to achieve 
deadlock freedom. Virtual cut-through switching is used in 
TRAIN and it is part of the deadlock prevention mechanism.  
Virtual cut-through is a switching technique similar to the 
popular wormhole switching in that a packet can start 
forwarding to the next node if the packet header has arrived 
and the destined output port is decided. However, virtual cut-
through switching requires the next switch to have sufficient 
buffer space to store the packet. 
S8
C8
S3
C3
S1
C1
S2
C2
S4
C4
S5
C5
S6
C6
S0
C0
S7
C7
Level 3
Level 2
Level 1
Shortcut Link
Tree Link
 
Figure 4. The TRAIN configuration of the irregular network for the 
example in Fig. 2.  Six links are used as shortcuts.  
 When a packet is blocked at the head, the rest of the packet 
keeps moving forward and stays in the switch where blocking 
occurs. Although virtual cut-through switching requires more 
buffer space than wormhole switching, it is feasible since 
packet size tends to be small for on-chip networks. 
Furthermore, with virtual cut-through switching, no packets 
can be blocked in place across several nodes waiting for 
transmission.  This helps reduce network contention. 
Since there exists no cycle in any tree, at least a shortcut 
link is required to form a channel dependency cycle. For 
deadlock to occur, the shortcut has to be blocked in the 
dependency cycle. However, in our TRAIN, a packet can never 
cross the blocked shortcut due to virtual cut-through. The 
packet will follow the tree route instead. Since no channel 
dependency cycle can occur in a tree, deadlock is prevented in 
our TRAIN routing. 
III. TREE EMBEDDING IN MESH ON-CHIP NETWORKS  
Although the TRAIN routing is designed for irregular 
networks, it can be perfectly used in on-chip networks with 
mesh topology. In this section, we present a technique for 
constructing a spanning tree in the mesh network. After this 
embedded tree is constructed, all the links not in the tree 
become shortcuts as described in Section II. In the following, 
we show that TRAIN can be equivalent to the well-known XY 
routing for 2D mesh with appropriate mapping of the tree. 
Fig. 5 shows how a tree is constructed in the mesh network. 
Solid lines indicate tree links while dotted lines indicate 
shortcuts. Any corner node can be used as the root of the tree. 
Both neighboring nodes of the root are its children. The 
neighboring node of the root in the X dimension becomes the 
“root” of a subtree, which includes all the nodes not in the 
Fig. 7 shows grouping for the two faulty mesh networks in 
Fig. 6. The solid black circle at the node indicates the root of a 
group. The solid lines indicate tree links, while the dotted lines 
indicate links that are not part of any tree yet.  
It is assumed that tree configuration is determined during 
system initialization on a host machine. The tree construction 
algorithm is run on the host processor based on the condition of 
the switches and links in the on-chip network. The host 
communicates with at least one healthy node in the on-chip 
network through an interface with buses or links.  A message 
where the tree ID of each node is paired with the mesh ID, and 
sent from the host to the nodes in the on-chip network by a 
mechanism such as flooding. After each switch recognizes its 
mesh ID from the information sent by the host and gets its tree 
ID, it exchanges its tree ID with the neighbors since this is 
required in distance calculation for the TRAIN routing. 
(a) (b)  
Figure 7. Grouping for the two example faulty mesh networks in Fig. 6. 
V. PERFORMANCE EVALUATION 
In order to evaluate the performance of our approach for 
faulty mesh on-chip networks, extensive static analysis and 
dynamic simulation have been conducted. Static analysis is 
employed for unloaded (or empty) networks, and dynamic 
simulation for loaded networks.  
We have analyzed the performance of the TRAIN routing 
on faulty mesh on-chip network in terms of base network 
latency, which is the latency for a packet traversing an 
unloaded network. In an unloaded network, packets do not 
experience any network contention along the route. In the 
analysis, the TRAIN routing is compared with the bare tree 
routing, which uses no shortcuts. The results are used to reveal 
the performance benefit of shortcuts. 
We have developed a tool that generates mesh networks 
with different network sizes and different numbers of faulty 
links at random locations. Average latency (or distance) 
between all pairs of nodes is calculated for each network. The 
number is further averaged over tens of random cases. Besides 
average latency, average maximum latency is also calculated, 
which is the average of the maximum latency (longest distance) 
for each network over tens of random cases. 
 Tables I, II, and III show the results of analysis for average 
latency and average maximum latency with 3x3, 4x4, and 5x5 
meshes with the bare tree routing and TRAIN routing. The bare 
tree routing uses no shortcuts and is indicated as BT in the 
tables. The average latency and average maximum latency are 
in terms of number of hops.  
The analysis results in the above tables demonstrate the 
advantage of utilizing shortcuts with TRAIN. As the number of 
faulty links increases, the latency also increases slightly for 
both routing schemes. Furthermore, TRAIN consistently 
outperforms BT by significant margin in most cases, especially 
for larger networks. When the network size increases, the 
margin also increases. However, the superiority of TRAIN 
diminishes quickly for the smallest 3x3 mesh with more faulty 
links. The reason is that when too many links are broken, there 
are too few or no shortcuts in the tree for TRAIN. 
TABLE I.  3X3 FAULTY MESH ANALYSIS. 
No of faulty links 0 1 2 3 4 
BT avg latency 2.83 2.83 2.85 2.87 2.89 
TRAIN avg latency 2.00 2.15 2.35 2.58 2.89 
BT avg max latency 6.00 6.00 6.18 6.25 6.23 
TRAIN avg max latency 4.00 4.33 5.05 5.55 6.23 
TABLE II.  4X4 FAULTY MESH ANALYSIS. 
No of faulty links 0 1 2 3 4 
BT avg latency 4.07 4.07 4.09 4.13 4.17 
TRAIN avg latency 2.66 2.76 2.89 3.03 3.19 
BT avg max latency 9.00 9.00 9.17 9.33 9.63 
TRAIN avg max latency 6.00 6.25 6.94 7.49 7.97 
TABLE III.  5X5 FAULTY MESH ANALYSIS. 
No of faulty links 0 1 2 3 4 
BT avg latency 5.33 5.33 5.36 5.40 5.45 
TRAIN avg latency 3.33 3.41 3.51 3.62 3.75 
BT avg max latency 12.00 12.00 12.13 12.27 12.55 
TRAIN avg max latency 8.00 8.20 8.83 9.36 9.99 
  
The analysis of the network latency in the above is only 
valid when the network has no traffic. We have also used 
simulation to evaluate the effectiveness of TRAIN for loaded 
faulty networks. Among the previously proposed tree-based 
routing schemes, the tree-turn routing is selected for 
comparison here since it performs better than the up*/down* 
routing and L-turn routing, as shown in [9]. The simulator we 
use is a modified version of the cycle-based NoC simulator 
NIRGAM [12]. 
We have simulated the network with different network 
sizes and different buffer sizes at each input port. The 
simulations are based on the following properties: 1) packet 
size is fixed at 6 flits, and each flit has 4 bytes. 2) during each 
cycle there is an equal probability of generating a packet at 
each network node. 3) packet destinations are uniformly 
distributed over the network  nodes.  
We assume that the packet header is part of the first flit.  
The link is 4 bytes wide in each direction. The latency for a 
packet to traverse a switch is 4 cycles. Besides, it takes one 
clock cycle for a flit to cross a link to get to the input port of 
the neighboring switch. Note that a packet may stay in the 
input buffer for longer if there is contention at the crossbar or 
the destined output is currently blocked. Virtual cut-through 
switching is assumed.  
The performance measures used in our simulation include 
average latency and normalized throughput. The latency is the 
number of cycles that elapses from when the first flit of a 
packet is generated at a node to when the packet leaves the 
network. The normalized throughput is the average number of 
flits received by the local link of each switch per clock cycle. 
Each simulation run is terminated after 25,000 cycles have 
無衍生研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
