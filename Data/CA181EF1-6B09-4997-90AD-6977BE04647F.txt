行政院國家科學委員會專題研究計畫成果精簡報告 
 
分散式記憶體環境下三條序列比對技術的研發 
Design and Implement Three-Sequence Alignment Techniques for Biological 
Sequences on Distributed Memory Computing Environments 
 
計畫編號: NSC 97-2218-E-182-003 
執行期限: 97 年 01 月 01 日至 97 年 07 月 31 日 
計畫主持人: 林俊淵 助理教授 長庚大學資訊工程學系 
cyulin@mail.cgu.edu.tw 
計畫參與人員：劉至善、楊博偉、林正峰、蔡孟桓 
 
中文摘要 
 
序列比對是計算生物學相當重要的研究
課題，相當多的研究主要著重於兩條序列
比對的方法，利用動態程式規劃技術，傳
統的兩條序列比對方法可以在時間及空
間複雜度 O(n2)內完成，D.S. Hirschberg 
(1975) 提出了一個線性空間的演算法將
兩條序列比對演算法的空間複雜度由
O(n2)降為 O(n)，不過，時間複雜度仍限制
了長序列使用上的需求，三條序列比對演
算法在過去亦有部份的研究成果被提
出，Murata et al. (1985) 提出了一個三條
序列比對的演算法，其時間及空間複雜度
皆為 O(n3)，後來，X. Huang (1993)利用
Hirschberg 的演算法將三條序列比對演算
法的空間複雜度降為 O(n2)，不過，上述
的方法皆需 O(n3)的時間複雜度，目前並
無有效率的平行演算法被提出，因此，本
計畫最主要依據 X. Huang 演算法的定義
提出一個有效率的三條序列比對平行演
算法，並針對生物序列的特性提出一個新
的三條序列比對技術。 
 
關鍵字詞: 兩條序列比對、三條序列比
對、動態程式規劃技術。 
 
Keywords: pair-wise alignment, 
three-sequence alignment, dynamic 
programming technique 
Abstract 
 
Sequence alignment is an important issue 
for the computational biology field.  In the 
past, the majority of research works were 
focused on the pair-wise alignment.  By 
the dynamic programming technique, the 
time and space complexities of pair-wise 
alignment are both O(n2).  D.S. Hirschberg 
(1975) proposed a linear space algorithm to 
reduce the space complexity of comparing 
two sequences from O(n2) to O(n).  
However, the time complexity O(n2) still 
limits the usage for long sequences.  
Several algorithms for the three-sequence 
alignment have been proposed in the past.  
Murata et al. (1985) proposed a 
three-sequence alignment algorithm (3aln).  
The time and space complexities for 3aln 
are both O(n3).  In 1993, X Huang 
proposed another algorithm by integrating 
the Hirschberg’s algorithm in 1975 to 
reduce the space complexity from O(n3) to 
O(n2).  No efficient parallel algorithm has 
been proposed for the three-sequence 
alignment.  Hence, in the proposal, we 
have proposed an efficient parallel 
three-sequence alignment algorithm 
according to the definitions of X. Huang’s 
algorithm.  Moreover, we also proposed a 
three-sequence alignment method with new 
features according to the properties of 
biological sequences. 
  
Figure 1. An example of the result for aligning 
sequences A, B and C. 
 
For each triple, the first element is 
always from sequence A or a gap (‘-‘), the 
second element is always from sequence B 
or a gap and the third element is always 
from sequence C or a gap. 
 
Definition 3.  A null triple is consisted of 
three gaps. 
 
In here, we only consider the 
alignments without null triple.  Therefore, 
there are seven types for non-null aligned 
triples according to the number and the 
position of appearances of gaps (‘-‘).  An 
example of the result for 3SA is illustrated in 
Figure 1.  Figure 1 shows these three 
sequences A, B and C, and the result of 
aligning them.  Each column in the 
alignment is an aligned triple. 
 
Definition 4.  A block in an alignment is a 
contiguous subsequence of aligned triples of 
the same type bounded by aligned triples of 
other types or the end of the alignment. 
 
Definition 5  An i-gap block is a block 
consisting of triples in which gap appears 
exactly i times. 
 
There are only 1-gap blocks and 2-gap 
blocks in an alignment of three sequences as 
shown in Figure 1 since we only consider 
the alignments without null triple here.  
For example, in Figure 1, an aligned triple (-, 
S, -) is a 2-gap block and another triple (H, -, 
H) is a 1-gap block.  Given a scoring 
function f: Σ×Σ→R that assigns a value to 
each combination of two elements in 
alphabet Σ of a triple and a gap penalty 
function, the score of an alignment is the 
sum of the values of each aligned triple 
assigned by f minus gap penalties.  For 
example, it can be simply defined that 
function f as f(a,a) = 10 for each a in Σ or 
f(a, b) = -20 for all a, b in Σ with a≠b.  For 
protein sequences, the function f is usually 
defined through a scoring matrix such as 
PAM250 or BLOSUM62. 
For gap penalties, an affine gap penalty 
function is commonly used in practice.  Let 
q1 be a gap-open penalty for each 1-gap 
block and let r1 be a gap-extension penalty 
for each triple of 1-gap block, where q1 and 
r1 are two non-negative numbers.  The 
affine gap penalty function takes p1 for a 
triple of 1-gap block, where p1 is defined as: 
 
⎩⎨
⎧ +=
otherwise. ,
block.  theofstart   theis  triple thisif ,
1
11
1 r
rq
p
 
We also define q2, r2 and p2 for 2-gap 
block in the same way.  Let x be the score 
of a triple. For any a, b and c in Σ, we have 
a score x as: 
 
2
1
),,(),,(),,(
),(),,(),,(),,(
),(),(),(),,(
paxaxax
pbafbaxbaxbax
cbfcafbafcbax
−=−−=−−=−−
−=−=−=−
++=
 
 
The score of an alignment is the sum of 
the score x of each triple.  For example, the 
score of the alignment for sequences A, B 
and C shown in Figure 1 is 246 if f(a,a) = 10 
for each a in Σ, f(a, b) = -20 for all a, b in Σ 
with a≠b, q1 = q2 = 12 and r1 = r2 = 2.  The 
goal of 3SA problem is to find an alignment 
with best score, which is called an optimal 
alignment. 
 
2.2 3SA algorithm 
 
Once a scoring mechanism is given, the 
optimal alignment of three sequences can be 
found by using the dynamic programming 
approach.  Let S(m, n, l) be the score of an 
optimal alignment of three sequences A1,m, 
B1,n and C1,l with lengths m, n and l, 
respectively.  The score of S(i, j, k) can be 
computed along with auxiliary matrices 
according to the recurrences [8].  In the 
j, k).  The middle point (imid, jmid, kmid) of an 
optimal alignment of three sequences A, B 
and C is one which has the score: 
 
njmi
qkjiZkjiJ
qkjiVkjiF
qkjiUkjiE
kjiRkjiS
midmid
midmid
midmid
midmid
≤≤≤≤
⎪⎪⎭
⎪⎪⎬
⎫
⎪⎪⎩
⎪⎪⎨
⎧
++
++
++
+
0 and 0for  
),,(),,(
,),,(),,(
,),,(),,(
),,,(),,(
max
2
1
1
 
Note that we need to add a gap-open 
penalty q1 or q2 to some pairs of matrix 
because an extra q1 or q2 is charged when 
two gaps of the same type merged into a 
single gap.  Here, only some 2D matrices 
and some 1D arrays are used to find the 
middle point (imid, jmid, kmid).  Once the 
middle point (imid, jmid, kmid) is found, we 
recursively compute an optimal alignment 
of subsequences A1, imid, B1, jmid and C1, kmid 
and another one of subsequences Am, imid+1, 
Bn, jmid +1 and Cl, kmid +1, respectively.  The 
optimal 3SA is obtained by merging the 
series of the computed middle points.  It is 
obvious that the space required by this 
algorithm with a divide-and-conquer 
technique is O(mn).  Here, we briefly 
prove the time complexity of this algorithm 
retains O(mnl).  Let T be the time required 
to compute the middle point (imid, jmid, kmid), 
T will be cmnl, where c is a constant 
coefficient.  Once the middle point is 
found, the original problem T(m, n, l) is 
divided into two sub-problems T(m, n, ⎣ ⎦2/l
⎤
) 
and T(m, n, ).  The time required to 
compute the middle points of the two 
subproblems is T/2.  We can see that the 
time required to compute the middle points 
of subproblems is half the time of original 
problems.  The total time required to 
compute the optimal alignment is T(m, n, l) 
= T + T(m, n, ) + T(m, n, ) ≤ 2T 
and consequently the time complexity of 
this algorithm is still O(mnl). 
⎡ 2/l
⎣ /l
⎤
⎦2 ⎡ 2/l
 
2.3 P3SA algorithm 
 
Here, P3SA algorithm is proposed.  The 
critical cost of 3SA algorithm is the part of 
computation of 2D matrices, such as 
matrices S, E, F and J.  Hence, it is worthy 
to reduce computational time and space 
requirement for this part.  The P3SA 
algorithm will partition each of 2D matrices 
into p parts by using Block partition scheme 
[2, 11] first.  Then, each processor will 
execute 3SA algorithm with corresponding 
matrices.  Finally, the result of three 
sequences alignment will be given by 
merging partial results from each processor.  
The P3SA algorithm can be divided into 
four parts, initiation and allocation phase, 
forward phase, reverse phase and determine 
a middle point phase.  In the following, 
each phase will be illustrated, respectively. 
 
A. initiation and allocation phase 
 
After determining an initial middle point, 
the original 3SA problem can be divided into 
two smaller problems, called forward phase 
and reverse phase.  In the forward phase, 
four 2D matrices S, E, F, J and other 1D 
array G, H, I need to be computed.  In the 
reverse phase, four 2D matrices R, U, V, Z 
and other 1D array W, X, Y need to be 
computed.  Therefore, in this phase, eight 
2D matrices S, E, F, J, R, U, V and Z will be 
partitioned into p parts.  Figure 3 shows the 
concept of partitioning a 2D matrix by using 
Block partition scheme. 
Each processor only needs to compute 
the corresponding part of matrices in the 
forward and reverse phases and then 
determine the candidate middle point 
according to their partial results.  The real 
middle point will be determined by merging 
all candidate middle points.  The steps of 
this phase are shown below: 
 
Initiation and allocation: 
Step0: Initialize p processors from rank_0 to 
rank_p-1. 
Step1: Input sequences A, B and C with lengths 
m, n and k, respectively. 
Step2: set kmid is ⎣ ⎦2/l  as an initial middle 
point.  
Step3: Allocate eight 2D matrices and other 1D 
arrays for each processor rank_0 to 
rank_p-1. 
 
B. Forward and Reverse phases 
sequence alignment problem in biology,” SIAM 
J. Applied Math., Vol. 48, 1988, pp. 1073-1082. 
[5]. S.C. Chan, A.K.C. Wong and D.K.Y. Chiu, “A 
survey of multiple sequence comparison 
methods,” Bulletin of Mathematical Biology, 
Vol. 54, 1992, pp. 563-598.  
[6]. N. Futamura, S. Aluru, and X. Huang, “Parallel 
Syntenic Alignment,” Proc. Int’l Conf. High 
Performance Computing, 2002, pp. 420-430. 
[7]. D.Gusfield, Algorithms on Strings, Trees, and 
Sequences: Computer Science and 
Computational Biology, Cambridege University 
Press, NY., 1997. 
[8]. O. Gotoh, “An improved algorithm for 
matching biological sequences,” J. Molecular 
Biology, Vol. 162, 1982, pp. 705-708. 
[9]. O. Gotoh, “Alignment of three biological 
sequences with an efficient traceback,” J. Theor. 
Biol. Vol. 121, 1986, pp. 327-337. 
[10]. D.S. Hirschberg, “A Linear Space Algorithm for 
Computing Maximal Common Subsequences,” 
Comm. ACM, Vol. 18, No.6, 1975, pp. 341-343. 
[11]. X. Huang, “A Space-Efficient Parallel Sequence 
Comparison Algorithm for a Message-Passing 
Multiprocessors,” Int’l j. Parallel Programming, 
Vol. 18, No. 3, 1989, pp. 223-239. 
[12]. X. Huang, “A Space-Efficient Algorithm for 
Local Similarities,” Computer Applications in 
the Biosciences, Vol. 6, No. 4, 1990, 
pp.373-381.  
[13]. X. Huang, “Alignment of Three Sequences in 
Quadratic Space,” ACM SIGAPP Applied 
Computing, Vol. 1, Issue 2, 1993, pp. 7-11. 
[14]. M.S. Johnson and R.F. Doalittle, “A Method for 
the Simultaneous Alignment of Three or More 
Amino Acid Sequences,” J Mol Evol. Vol. 23, 
1986, pp. 267-78. 
[15]. E.W. Mayers and W. Miller, “Optimal 
Alignments in Linear Space,” Computer 
Applications in the Biosciences, Vol. 4, No. 1, 
1988, pp. 11-17. 
[16]. M. Murata, J.S. Richardson, and J.L. Sussman, 
“Simultaneous Comparison of Three Protein 
Sequences,” Proc. Natl. Acad. Sci USA, Vol. 82, 
1985, pp. 3073-3077. 
[17]. H.B. Nicholas, A.J. Ropelewski and D.W. 
Deerfield, “Strategies for Multiple Sequence 
Alignment,” Biotechniques, Vol. 32, 2002, pp. 
592-603. 
[18]. S.E. Needleman and C.D. Wunsch, “A general 
method applicable to the search for similarities 
in the amino-acid sequence of two proteins,” J. 
Molecular Biol., Vol. 48, 1970, pp. 443-453. 
[19]. C. Notredame, “Recent progresses in multiple 
sequence alignment: a survey,” 
Pharmacogenomics, Vol. 3, 2002, pp. 131-144.  
[20]. S. Rajko and S. Aluru, “Space and Time 
Optimal Parallel Sequence Alignments,” IEEE 
Trans. Parallel and Distributed Systems, Vol. 
15, Issue 12, 2004, pp. 1070-1081. 
[21]. D. Sankoff, “Simultaneous Solution of the RNA 
Folding, Alignment and Protosequence 
Problems,” SIAM J. Appl. Math., Vol. 45, Issue 
5, 1985, pp. 810-825. 
[22]. J. Setubal and J. Meidanis, Introduction to 
Computational Molecular Biology. PWS 
Publishing Company, 1997. 
[23]. T.F. Smith and M.S. Waterman, “Identification 
of Common Molecular Subsequences,” J. 
Molecular Biology, vol. 147, 1981, pp.195-197. 
[24]. C.Y. Tang, C.L. Lu, M.D.T. Chang, Y.T. Tsai, 
Y.J. Sun, K.M. Chao, J.M. Chang, Y.H. Chiou, 
C.M. Wu, H.T. Chang and W.I. Chou, 
“Constrained Multiple Sequence Alignment 
Tool Development and Its Application to RNase 
Family Alignment,” Journal of Bioinformatics 
and Computational Biology, Vol. 1, 2003, pp. 
267-287. 
[25]. L. Wang and T. Jiang, “On the complexity of 
multiple sequence alignment,” J. 
Computational Biology, Vol. 1, No. 4, 1994, pp. 
337–348. 
 
 
計畫成果自評 
 
這部份的成果已經達成原計畫書所設定
的目標，除了上面描述方法的概念之外，
已實作相關的程式並已完成相關的實驗
測試以及理論模組的建立，這部份的研究
成果正在整理並期望投稿至國際期刊論
文發表。 
 
 
the score matrices, where x, y and z are three 
residue positions in the sequences i, j and k, 
respectively. 
 
GOPi,j(x, y, z) = max[GOPi(x, z), GOPj(y, z)]  
return the gap opening penalty for opening a 
gap in the sequence i and a gap in the 
sequence j for an entry (x, y, z) of the score 
matrices. 
 
GEPi(x, y) = return the gap extension 
penalty for extending a gap in the sequence i 
for an entry (x, y) of the score matrices. 
 
GEPi(x, y, z) = max[GEPi(x, y), GEPi(x, z)]  
return the gap extension penalty for 
extending a gap in the sequence i for an 
entry (x, y, z) of the score matrices. 
 
GEPi,j(x, y, z) = max[GEPi(x, z), GEPj(y, z)]  
return the gap extension penalty for 
extending a gap in the sequence i and a gap 
in the sequence j for an entry (x, y, z) of the 
score matrices. 
 
Hence, the original scores are modified 
by replacing the fixed gap penalties with 
gap penalty functions, and the modified 
scores are defined as follows: 
 
( ) ( )
( ) ( )
, ,
1
, ,
1
0                                                             if  = 0,  = 0 and = 0
1, 0, 0 , 0, 0   if  > 0,  = 0 and  = 0
0,1, 0 0, , 0   i
( , , )
l i
B C B C
l
l i
A C A C
l
i j k
GOP GEP l i j k
GOP GEP l
S i j k
=
=
=
=
⎛ ⎞− +⎜ ⎟⎝ ⎠
⎛ ⎞− +⎜ ⎟⎝ ⎠
=
∑
∑
( ) ( )
[ ]
[ ]
, ,
1
f  = 0,  > 0 and  = 0
0, 0,1 0, 0,   if  = 0,  = 0 and  > 0
max ( , , ), ( , , ), ( , , )         if  > 0,  > 0 and  = 0
max ( , , ), ( , , ), ( , , )         if  > 0,  =
l i
A B A B
l
i j k
GOP GEP l i j k
G i j k H i j k I i j k i j k
E i j k H i j k J i j k i j
=
=
⎛ ⎞− +⎜ ⎟⎝ ⎠∑
[ ]
0 and  > 0
max ( , , ), ( , , ), ( , , )          if  = 0,  > 0 and  >0
( , , ), ( , , ), ( , , ),
( , , ), ( , , ), ( , , ),
max        ( 1, 1, 1) ( , )
       + ( , ) ( , )
i j
i k j k
k
F i j k I i j k J i j k i j k
E i j k F i j k G i j k
H i j k I i j k J i j k
S i j k m a b
m a c m b c
⎡ ⎤⎢ ⎥⎢ ⎥⎢ ⎥− − − +⎢ ⎥+⎢ ⎥⎣ ⎦
if  > 0,  > 0 and  > 0i j k
⎧⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎩
( )
( ) ( )
( ) ( )
, , ,                                                  if  = 0 
, , ,                                                   if  = 0
, ,
m
B
B
S i j k GOP j k i
S i j k GOP i j k
E i j k
−
−= ( ) ( ) ( )
( ) ( )
( )
( ) ( )
( ) ( )
ax 1, , 1 , 1, , 1 , ,   if  > 0 and  > 0
            , , ,  
, , ,                                                   if  = 0 
, , ,             
, ,
B
i k B
A
A
E i j k S i j k GOP i j k i k
m a c GEP i j k
S i j k GOP i k j
S i j k GOP i j
F i j k
⎧⎪⎪⎨ − − − − −⎡ ⎤⎪ ⎣ ⎦⎪ + −⎩
−
−= ( ) ( ) ( )
( )
                                       if  = 0
max , 1, 1 , , 1, 1 , ,   if  > 0 and  > 0
            ( , ) , ,
A
j k A
k
F i j k S i j k GOP i j k j k
m b c GEP i j k
⎧⎪⎪⎨ − − − − −⎡⎪ ⎣⎪ + −⎩
⎤⎦
( )
( ) ( )
( ) ( )
( ) ( ) ( )
, , ,                                                      if  = 0 
, , ,                                                      if  = 0
, ,
max 1, 1, , 1, 1, , ,    i
C
C
C
S i j k GOP j k i
S i j k GOP i k j
G i j k
G i j k S i j k GOP i j k
−
−= − − − − −⎡ ⎤⎣ ⎦
( )
( )
( ) ( )
( ) ( ) ( )
,
,
f  > 0 and  > 0
            ( , ) , ,
, , 1, ,                                                  if  = 0 
, , max 1, , , 1, , , ,            if  > 0
       
i j C
B C
B C
i j
m a b GEP i j k
S i j k GOP j k i
H i j k H i j k S i j k GOP i j k i
⎧⎪⎪⎨⎪⎪ + −⎩
−
⎡ ⎤= − − −⎣ ⎦
( )
( )
( ) ( )
( ) ( ) ( )
( )
( )
( ) ( )
,
,
,
,
,
 , ,
, , ,1,                                         if  = 0 
, , max , 1, , , 1, , ,    if  > 0
        , ,
, , , ,1        
, ,
B C
A C
A C
A C
A B
GEP i j k
S i j k GOP i k j
I i j k I i j k S i j k GOP i j k j
GEP i j k
S i j k GOP i j
J i j k
⎧⎪⎪⎨⎪ −⎪⎩
−⎧⎪⎪ ⎡ ⎤= − − −⎨ ⎣ ⎦⎪ −⎪⎩
−
= ( ) ( ) ( )
( )
,
,
                                  if  = 0 
max , , 1 , , , 1 , ,     if  > 0
         , ,      
A B
A B
k
I i j k S i j k GOP i j k k
GEP i j k
⎧⎪⎪ ⎡ ⎤− − −⎨ ⎣ ⎦⎪ −⎪⎩
 
In ClustalW [14], the gap opening 
penalty (μ) and the gap extension penalty (γ) 
can be given by user or program initially, 
and the gap penalties are calculated by the 
gap penalty schemas automatically to 
improve the accuracy of alignment.  We 
adopt these schemas to our algorithm, and 
the schemas are modified to apply to 
three-sequence alignment.  The initial gap 
penalties are recalculated depending on the 
following schemas. 
 
2.1 Factors for the Gap opening penalty 
 
Dependence on the weight matrix. 
The accuracy of the alignment can be 
improved by using varied weight matrices.  
The average score for two mismatched 
residues (i.e. off-diagonal values in the 
weight matrix) of weight matrix is used as 
the gap weight for the gap opening penalty. 
 
Denpence on the similarity of the sequences. 
For alignments, the relation of the gap 
opening penalty and the similarity of 
sequences are in the direct proportion; 
increasing the penalty for strong related; 
decreasing for the divergent on the linear 
scale. 
 
Dependence on the lengths of the sequences. 
The gap opening penalty is increased with 
the logarithm of the length of the shorter 
sequence to avoid that grows the alignment 
score with the increasing sequence length, 
even with the false alignment. 
Initially, GOTij,i[x] = μij and GETij,i[x] = γij 
present penalties at x-th residue position. 
 
Increased gap penalties near existing gaps. 
GOTij , i[x]= μ i j  * {2+[(8-distance for 
previous gap)*2]/8}                 (3) 
 
Reduced gap penalties in hydrophilic 
stretches. 
GOTij,i[x]= μij * 0.5                 (4) 
If a hydrophilic residue is at the xth residue 
position within a hydrophilick stretch. 
 
Residue-specific penalties. 
GOTij,i[x]= μij * R[Sx]                (5) 
Where R[Sx] is the value of the residue in 
the Residue-specific table R, and the residue 
is located on the xth position of sequence S. 
 
Recalling the GOP and GEP functions, 
GOP and GEP are calculated according to 
equations (3), (4) and (5). 
 
GOPi(x, y) = GOTij,i[x] + GOTij,j[y]     (6) 
 
GEPi(x, y) = GETij,j[y]               (7) 
 
 
References 
 
[1] M. Murata, J.S. Richardson and J.L. Sussman, 
“Simultaneous comparison of three protein 
sequences,” PNAS, 1985, pp. 3073-3077. 
[2] M.S. Rosenberg, “Multiple sequence alignment 
accuracy and evolutionary distance estimation,” 
BMC Bioinformatics, 2005, 6:278. 
[3] H. Makoto, H. Maski, I Masato and T. 
Tomoyuki “MASCOT: multiple alignment 
system for protein sequences based on 
three-way dynamic programming,” J Mol Biol, 
1993, pp. 161-167. 
[4] O. Goto, “Alignment of three biological 
sequences with an efficient traceback 
procedure,” J Theor Biol, 1986, pp. 327-337. 
[5] X. Huang, “Alignment of three sequences in 
quadratic space,” Applied Computing Review, 
1993, pp. 7-11. 
[6] E.W. Myers and W. Miller, “Optimal alignments 
in linear space,” Comput Applic Biosci, 1988, 
pp. 11-17. 
[7] D.S. Hirschberg, “A linear space algorithm for 
computing maximal common subsequences,” 
Commun ACM, 1975, pp. 341-343. 
[8] K. Matthias K and F.S. Peter FS “Progressive 
multiple sequence alignments from triplets,” 
BMC Bioinformatics, 2007, 8:254. 
[9] M.O. Dayhoff, R.M. Schwartz and B.C. Orcutt, 
“A model of evolutionary change in proteins,” 
Atlas of Protein Sequence and Structure, 1978, 
pp. 3345-352. 
[10] T.F. Smith, M.S. Waterman and W.M. Fitch, 
“Comparative Biosequence Metrics,” J Mol 
Evol, 1981, pp. 38-46. 
[11] S. Henikoff and J.G. Henikoff, “Amino acid 
substitution matrices from protein blocks,” 
PNAS, 1992, pp. 10915–10919. 
[12] J.D, Thompson, D.G. Higgins and T.J. Gibson, 
“CLUSTAL W: improving the sensitivity of 
progressive multiple sequence alignment 
through sequence weighting, position-specific 
gap penalties and weight matrix choice,” 
Nucleic Acids Res., 1994, pp. 4673-80. 
[13] J. D Thompson, “Introducing variable gap 
penalties to sequence alignment in linear 
space,” CABIOS, 1995, pp. 181-186. 
[14] T.G. Dewey, “A sequence Alignment Algorithm 
with an Arbitrary Gap Penalty Function,” 
Computational Biology, 2001, pp. 177-190. 
[15] R.F. Smith and T.F. Smith, “Pattern-induced 
multi-sequence alignment (PIMA) algorithm 
employing secondary structure dependent gap 
penalties for use in comparative protein 
modeling,” Prot Engng, 1992, pp. 35-41. 
[16] Z.Y Zhu, A. Sali and T.L. Blundell, “A variable 
gap penalty function and feature weights for 
protein 3-D structure comparisons,” Prot Engng, 
1993, pp. 43-51.  
[17] O. Gotoh, “Optimal alignment between groups 
of sequences and its application to multiple 
sequence alignment,” Comput Applic Biosci, 
1993, pp. 361-370. 
[18] M.S. Madhusudhan, M, A, Marti-Renom, R. 
Sanchez and A. Sali, “Variable gap penalty for 
protein sequence-structure alignment,” Prot 
Eng Des Sel, 2006, pp. 129-133. 
[19] S. Pascarella and P. Argos, “Analysis of 
insertions/deletions in protein structures,” J Mol 
Biol, 1992, pp. 461-471. 
 
計畫成果自評 
 
這個部份的成果主要是為了改善過去 X. 
Huang 所提出的三條序列比對的技術，除
了上面描述方法的概念之外，已實作相關
的程式並已完成相關的實驗測試以及理
論模組的建立，這部份的研究成果已發表
在 2008 IEEE International Workshop on 
BioComputing, 進一步的研究成果正在整
理並期望投稿至國際期刊論文發表。 
