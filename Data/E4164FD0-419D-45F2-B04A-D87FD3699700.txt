ii 
!
!
ᄔा 
೚ӭࣴز᛾ჴעၗ਑ቶኞמೌᔈҔӧ໺಍ၗ਑໺ኞᆶᆅ౛س಍ਔǴس಍ёа߄౜рؼ
ӳޑёቫԛ܄Ǵӧ໺಍ၗ਑৤ኳࠠύǴၗ਑ࢂᓉᄊǵ҉ΦόᡂǴЪၗ਑ނҹ۶Ԝϐ໔ࢂᐱ
ҥԶؒԖᜢೱǹฅԶǴࡐӭ౜жޑၗૻᔈҔ܌ౢғޑၗ਑٠όӕܭ໺಍ၗ਑ࠠᄊǴӧ୏ᄊ
ၗ਑໺ኞᕉნύǴၗ਑ҁيࢂ୏ᄊջਔౢғޑǴၗ਑ނҹϐ໔۶ԜڀԖ࣬٩܄ǴаϷਔ໔
΢ޑ٩ׇ่ӝ܄ǴќѦӧၗ਑ނҹޑᏹբ΢ǴΨόӕܭ໺಍ኳࠠύ໻ૈаൂ΋ԛा؃᠐ڗ
ൂ΋ঁၗ਑ނҹϐᙁൂᘏڗБԄǴҞ߻Ԗ೚ӭၗૻᔈҔςёЍජаൂ΋ԛޑፄӝा؃ٰӕ
ਔ᠐ڗፄኧঁၗ਑ނҹǶӢԜǴӧ೭ीฝύǴךॺుΕࣴزԖᜢܭ୏ᄊቶኞᓎၰύڀ୏ᄊ
܄ᆶਔ໔ೱុ܄ނҹϐ௨ׇୢᚒǶԵໆډቶኞၗ਑ϐ௨ׇҁيࢂ NP-hardǴךॺ२Ӄගрቶ
ኞᓎၰ΢ၗ਑ނҹϐѳ୍֡ܺ᠐ڗਔ໔ޑໆϯڄԄǴ຾΋؁௢Ꮴѳ୍֡ܺ᠐ڗਔ໔ϐ౛ፕ
നεᆶനλॶϐኧॶڄԄǴਥᏵ܌ගрޑ౛ፕϩ݋่݀Ǵךॺ೛ी΋঺ڀԖё،ۓ੝܄ϐ
ၗ਑௨ׇݤ߾аϷѤᅿଛ঺ਏ੻ຑ՗ڄኧǴҔٰ୏ᄊౢғቶኞ௨ำǴफ़եѳ୍֡ܺ᠐ڗਔ
໔ǶᙖҗኳᔕჴᡍޑᔠෳᆶҬΰКၨޑۓໆϩ݋Ǵҁीฝ܌ගрϐᐒڋམଛӝ፾ϐਏ੻ຑ
՗ڄኧૈ୼ջਔӦ୏ᄊፓ᏾ቶኞނҹϐ௨ׇǴԖਏӦफ़եѳ୍֡ܺ᠐ڗਔ໔ၲډߚதௗ߈
౛ፕനλॶǶ 
 
 
 
ᜢᗖӷǺቶኞǵຼය܄ǵ௨ำᄽᆉݤǵࢗ၌ೀ౛ǵၗ਑໺ኞǵՉ୏ၗ਑৤ 
 
 
Content
1 Introduction
Many emerging data-intensive applications involve a number of servers and a much larger
number of clients, e.g., electronic auction and tender, information news distribution, proxy
service, and Web surng, to name a few. The traditional pull-based or client-server data
dissemination model usually suers from the scalability problem, especially in the asymmetric
communication networks where the downward information ow or bandwidth capacity is larger
than the upward one. Being scalable against extensive client population, among others is the
push-based data broadcast model as investigated by many researches [1][2][3][4].
Substantial researches have explored the data broadcast methodologies, but mainly based
on the traditional data management systems [3][5], wherein a data object is independent,
persistent and static, and is mapped to a pair of state and value in the database against a
simple query/transaction [1][4]. A simple query (or a read transaction) is processed success-
fully, while a client retrieves the answered data object on the broadcast channel. In practice,
however, many modern information applications spread dynamically generated data objects
and answer the complex query for retrieving multiple data objects. In dynamic environments,
data streams need to be on-line processed rather than being stored and later retrieved to
answer queries. In addition, there exists relationship among multiple data objects, e.g., the
anchor relationship among web pages or the referential integrity constraint for the relations
in the relational databases [6]. Accordingly, data objects can be associated, dependent, and
dynamically generated. Note that prior works dealt with the issues of data dependency and
dynamics in respective research categories. Multiple dependent data allocation is conned to
static data domains by complex queries [6][7][8][9]. The consistency is mainly discussed in the
context of client caches when a simple query issued by the client is handled [10][11][12]. In
contrast, our study considers data dependency, dynamics, and association simultaneously on
the broadcast channel, making this paper distinguishable.
For the prospect of dynamic information dissemination, we study the problem of on-line
scheduling sequential data objects in a general clients-providers-servers model [13], as depicted
in Fig. 1. In this context, particularly, data objects are produced dynamically by the infor-
mation providers, interleaved and disseminated eciently by the broadcasting servers, and
associated sequentially in the client sides. A dynamic time-sequential data object is so termed
as a sequential object for brevity. A set of data objects from the same information provider
can be associated in chronological sequence. Accordingly, the measure of service access time
should be the time interval that has elapsed from the moment at which a client requests this
service to the instant when all related objects from the same provider in a broadcast cycle are
downloaded completely. This model therefore introduces a dierent measure of service access
time from those of broadcast disk [1] and transaction-based broadcast [4][10] models wherein
a simple query for a single static object is taken.
In this paper, we exploit the periodicity [2] for the schedule optimization in terms of mean
service access time in an innite time horizon. First, we formulate the problem of scheduling
sequential data objects as an algebraic expression. The scheduling optimization is then trans-
formed as the procedure of nding a solution in solving the algebraic problem. With derived
1
...
t
... ......
t0 tn
L - broadcast cycle 
Tk (t) - random service access time for a service Sk
t1
dki dkjdk1
ti tj
dkn... ... ...dkj-1'dk1'
t1' tj-1'
L'  - next broadcast cycle
ddki,j ddk0,1'
......
dkj-1...
tj-1
ddk0,1
Figure 2: The measure of service access time for an information service.
 at time . Given that  is between 1 and , namely after the broadcast of 
1 and
before 
 , this access will be satised till 10, that is, the end of 
1’s broadcast in the next
broadcast cycle. So, () is equal to 10  .
Denition 2 Given with two objects 
 and 
 generated by , P(
 ) and P(
 ) represent
the respective slot positions of 
 and 


 in P within a cycle time 	. We say that 
 and 

are at a directed distance, denoted as 

 = (P(
 )  P(
 )) mod 	where 
  
   and

 6= 
 for 1      .
Denition 2 denes a directed distance 

 between two objects 


 and 


 in P. To
calculate () in a discrete time model is to sum up directed distances of all pairs of two
consecutive objects corresponding to their sequential order . Accordingly, for a random
client’s access in  that produces  objects in a cycle time, we explicitly have () as
() = 1 + 



01 +
X
11


+1  = 1 2  1
where 

01 denotes the time space from a random client’s access at  to the beginning of the
rst broadcast object 
1 in a broadcast cycle.
P is a periodic schedule with  objects in each 	. Let the waiting time to access 
+1 is
+1
2
on average. We rewrite () with
P
01 


+1 = 	 as
() = 	+ 1


+1
2
 1      1 (1)
3 Analysis of Mean Service Access Time  ()
Let +1 denote the probability of the arrival of a random client’s access within a specic


+1. Because 

+1 is proportional to 



+1, we have 

+1 =
+1
	
and
P
01 

+1 =
1. By the linearity of expectation and (1), for any  its mean service access time, denoted as
(), can be
() = [()] =
X
01
+1 · () = 	+ 1
1
2	
X
01
(

+1)
2 (2)
3
By (4), an upper bound of  () will be obtained provided that we solve the following
non-linear equation,
 = min
X
1


 subject to
X
1
  	
To calculate the optimal value of , we have to deal with an equation program given by


= 0 for 1    . After mathematical derivations, we nally have
 ()  	+ 1 	
2
X
1

	
·
P
1




= 	+ 1 1
2
Ã X
1


!2
 (5)
In summary, Lemma 7 suggests a tight upper bound of  (), compared with (4). Re-
markably, in an innite schedule P, 
( ()) is dominated by the relative service access
popularity and the total of objects within a cycle time 	 regardless of object production rate.
In addition, we have  ()  	 + 1 1
2
 as 1 =  =  = 1 . This indicates 
( ()) is
directly determined by the broadcast cycle and the number of services in P when all services
have the same access probabilities.
Lemma 7  () L+1-1
2
¡P
1


¢2
is 
( ()) as
P
1 =1 and
P
1  L.
4 On-Line Scheduling with Optimal Approximation
Whereas the equal space policy results in a poor schedule, the primary principle of minimizing
the mean service access time is to arrange dynamic sequential objects from the same informa-
tion provider as densely as possible in a periodic schedule. Particularly, for each  in P, the
aggregation of directed distances, i.e.,
P
11 



+1 = 	  

1, is used to indicate the
relative degree of “density.” The broadcasting server can maximize
P
01(



+1)
2 in (2)
so as to minimize  ().
We develop a deterministic strategy to generate an innite output schedule. Four gain
measure functions are designed to facilitate the deterministic approximation. A First-In-
First-Out (FIFO) schedule strategy is used as a comparison baseline.
Deterministic Strategy A deterministic strategy is to process directed distance ad-
justment and deterministic object selection. As scheduling dynamic sequential objects, the
broadcasting server adjusts the directed distance of two consecutive objects from the same
information service. For the arrival of an object 
 , the server will decide whether it is prof-
itable to broadcast 
 directly at the moment or defer its broadcast and keep it in the output
buer. In this way, the server will adjust the distance 

1 from the preceding object 


1
to 
 . On the other hand, while objects in buer are considered, an eective object selection
process is required to determine the next broadcast object in each time slot.
Specically, the procedures of the object selection and the directed distance adjustment are
described as follows. We devise an object selection process used to select the next broadcast
object from the output buer. As determining its position in output sequence and, meanwhile,
5
2. Schedule of an object output sequence: Given a raw object input sequence, the FIFO
schedule retains the slot position of an incoming object in sequence. In contrast, the
deterministic schedule applies GMF-1, GMF-2, GMF-3, or GMF-4 in selecting broadcast
objects iteratively from the object holding vector.
3. Performance measure and evaluation: In each broadcast cycle, the measured  () is
compared with the theoretical maximum and minimum, and the value of  () achieved
by the FIFO schedule. A normalized dierence of  (), i.e.  ()minimal  ()
minimal  ()
, is dened to
demonstrate the performance comparison.
Hereinafter, for brevity, the proposed deterministic strategy with GMF-1, GMF-2, GMF-3
and GMF-4 are termed as DSMF-1, DSMF-2, DSMF-3 and DSMF-4.
5.1 Sensitivity to Buer Size
With the supply of buer, the deterministic strategy exhibits its competence on the reduction
of  (). DSMF-1 and DSMF-2 have prominent reductions of  () approximately to the optimal
minimum, with an increment of buer size. On the other hand, DSMF-3 and DSMF-4 decrease
 ()s slowly even though they have the same buer capacity as DSMF-1 and DSMF-2. As
shown in Fig. 4, DSMF-1 and DSMF-2 have the reductions of  () up to 100% in all cases
of various service popularity with  = 0, 1, and 2. Comparatively, DSMF-3 and DSMF-
4, partially improved by the buer size, for instance, only have their reductions less than
48% and 44% in the case of uniform service popularity with  = 0. Therefore, the above
relative performance shows the feasibility of the deterministic strategy, particularly DSMF-
1 and DSMF-2, in reducing  () closely approximating to the theoretical optimization with
incremental buer size.
5.2 Sensitivity to Service Popularity
Observe that the skewer the service popularity distribution is, the smaller the  ()s of DSMF-3
and DSMF-4 can be. Their degree of decrease in the cases of skewed patterns further ascends in
response to additional buer size, as compared with the results in the cases of uniform patterns.
Notwithstanding the normalized term,
¯¯¯
	

 

1
¯¯¯
, in GMF-3 and GMF-4 functions is less
sensitive to the buer size, a higher service popularity can raise the gain measure of an object
and improve its inuence in GMF-3 and GMF-4. For example, as shown in Fig. 4(b) of
random object production distribution, DSMF-3 leads to a 48% (= 048× 100%) normalized
 () dierence as  = 0, 22% as  = 1, and 37% as  = 2. DSMF-4 has a 54% normalized
 () dierence as  = 0, 27% as  = 1, and 52% as  = 2. Though DSMF-4 has a little larger
 () than DSMF-3, it is observed that the dierence is negligible in the case of more skewed
service popularity. Therefore, DSMF-3 and DSMF-4 have the similar performance.
7
10
100
1000
10000
100000
sl
ot
 ti
m
e 
un
it
un
ifo
rm
ran
do
m
ex
po
ne
nti
al
log
ari
thm
ic
M
in
im
um
D
S
M
F-
1
D
S
M
F-
3
FI
FO
M
ax
im
um
n=
30
M
in
im
um
D
S
M
F-
1
D
S
M
F-
3
FI
FO
M
ax
im
um
n=
50
M
in
im
um
D
S
M
F-
1
D
S
M
F-
3
FI
FO
M
ax
im
um
   
==
==
==
n=
10
M
in
im
um
D
S
M
F-
1
D
S
M
F-
3
FI
FO
M
ax
im
um
n=
30
M
in
im
um
D
S
M
F-
1
D
S
M
F-
3
FI
FO
M
ax
im
um
n=
50
M
in
im
um
D
S
M
F-
1
D
S
M
F-
3
FI
FO
M
ax
im
um
scheduling strategy v.s. minimum and maximum
Minimum
DSMF-1
DSMF-3
FIFO
Maximum
n=
10
distribution
M = 50 M = 500
Figure 5: Sensitivity to scalability against the number of information services and object
production rate under dierent distributions (baseline:  = 50 and 500,  = [1 10], [1 30],
[1 50], and  = 20, and  = 50%).
5.3 Sensitivity to Scalability
Fig. 5 presents the scaled-up performance under dierent trac scenarios where the workload
in a periodic schedule increases from 500 to 25000 with incremental object production rate as
 = 10, 30 and 50. To simplify the illustration, only the relative performance of DSMF-1 and
DSMF-3 is presented. Each set includes four data clusters of performance comparison among
the FIFO, DSMF-1, DSMF-3, and theoretical minimum and maximum.
Observe in Fig. 5 that the performance of DSMF-1 and DSMF-3 is in linear proportion
to the theoretical minimum under the increase of object production rate. This observation
evidences the scalability of the deterministic strategy. DSMF-1 and DSMF-3 achieve promi-
nent performance enhancement over the FIFO strategy in orders of magnitude. Their eect is
improved more by the increment of buer size so that the resulted output schedule is of better
quality and has a lower  (). Incidentally, in the cases of non-uniform distributions, DSMF-1
and DSMF-3 have lower  ()s more close to the low bound than those in uniform cases. Fur-
thermore, DSMF-1 and DSMF-3 in the case of a larger 

generally have better performance
than that in the case of a smaller 

. However, DSMF-1 is superior to DSMF-3 relatively
(also better than DSMF-2 and DSMF-4 in almost cases) when the workload becomes heavier.
Notwithstanding, the performance of either DSMF-1 or DSMF-3 has a prominent improvement
in response to the increment of ,  , and .
6 Concluding Remarks
The contributions of this paper are two-fold. We have presented quantitative analyses and
theoretical derivations for the lower and the upper bounds of the mean service access time.
Accordingly, we have further devised an ecient deterministic strategy and examined several
gain measure functions for dynamic generation of a periodic broadcast schedule. Extensive
9
 11 
 
 
ीฝԋ݀Ծຑ 
ϩ݋୏ᄊ໺ኞၗ਑ނҹҁيёڀԖಔӝ܄ǵ࣬٩܄ک୏ᄊ܄ޑ੝܄ǴажኧБำԄ߄
Ңр୏ᄊނҹ௨ׇന٫ϯϐୢᚒǴ٠ЪճҔቶኞຼය܄ޑ܄፦຾΋؁௢ᄽрၗૻቶኞ୍ܺ
ѳ֡ᘏڗਔ໔ϐ౛ፕനεॶᆶനλॶޑኧᏢ߄ҢԄǴᏵаගр௨ׇന٫ϯϐ฼ౣǴ٠ӕਔ
ว৖р΋ঁ،ۓ܄ނҹ௨ׇᒧ᏷฼ౣᆶނҹᒧ᏷ԏ੻՗ीڄԄǴёаᅌ຾Ӧௗ߈ന٫ϯޑ
ቶኞ௨ׇǶ!
 
ёٮ௢ቶϐࣴวԋ݀ၗ਑߄Ǻ஑ճҙፎਢ 2ҽ 
 ᏾ӝᆛၡᕉნύӼӄՉ୏ϣ৒໺ሀس಍ 
 Չ୏ӕᏆဂಔۓՏᄤӼӄૻ৲୍ܺ 
 
ߕᒵ 
ीฝࣴزԋ݀Ǵςว߄ܭ 
 IEEE Transactions on Knowledge and Data Engineering, Vol. 21, No. 2, pp. 273-286, 
February 2009 
On-Line Scheduling Sequential Objects with Periodicity for Dynamic Information 
Dissemination 
 
 13 
 
मЎǺ 
ёճҔϐౢ཰!
Ϸ!
ё໒วϐౢࠔ!
Potential Licensees 
Γ Mobile network service providers 
Γ Mobile service third parties 
Γ Mobile device ODM companies 
Γ Mobile system and/or device designer & Manufacturer 
מೌ੝ᗺ!
  The advantage of the invention 
1. ೛ी΋ߚӕ؁ၗૻၗ਑໺ሀᐒڋǶ 
2. ೛ी΋঺ڀҬܰኳԄޑՉ୏ၗૻҬඤᐒڋǶ 
3. ೛ी΋຀ᔕᔞਢس಍Ǵගଯ٬Ҕ܄Ƕ 
4. ೛ी΋ᙁܰᚈख़ߎᢄᇡ᛾ᐒڋǴ၀ᐒڋёዴᇡՉ୏ၗૻගٮ
ᆄǵՉ୏ၗૻௗڙᆄаϷᇻᆄ՛ܺᏔΟޣϐ໔ޑϕߞᜢ߯Ƕ 
5. ᏾ӝ΋ UPnPး࿼ᆶ୍ܺว౜ᐒڋǶ 
6. Ҟ߻ςֹԋ೛ीǵჴբکᚉࠠ৖ҢǶ 
7. ҁวֹܴӄ࣬৒ܭ౜Ԗޑ HTTPǵTCP/IPک XMLೕጄǹ 
8. ҁวܴё෧ϿՉ୏း࿼ޑႝΚ੃઻ǹ 
9. ҁวܴёЍජՉ୏း࿼ܭၗ਑໺ଌ໔ޑՉ୏܄Ƕ 
௢ቶϷၮҔޑሽॶ!
!
!
 15 
 
מೌ੝ᗺ!
1. ࣬ჹᆛሞᆛၡޑߡճǵ໒ܫکεໆ୍ܺޑӭኬϯǴႝߞᆛၡ٬
Ҕޣӧбрၨܳ຦ޑ೯ߞ຤ҔࡕǴ܌ૈளޑ୍ܺϣ৒ࠅࢂᇻϿܭӧ
໺಍ᆛሞᆛၡ΢܌ᕇளޑ୍ܺǶ 
2. ౜ԖޑՉ୏ᆛၡᔈҔ೬ᡏǴεӭᔈҔᕉნࣣа୔ୱᆛၡࣁЬǴ
܈ࢂ΋ঁ೏߳ज़ޑ୔ୱ္Ƕ 
3. όӕޑՉ୏೯ૻး࿼܈ࢂόӕႝߞ཰ޣ܌௢рޑӚᅿᔈҔܺ
୍Ǵ୷ҁ΢ࢂϕό࣬৒Ǵคݤޔௗ঺Ҕӧ࣬౦း࿼΢୺ՉǶ 
4. Ҟ߻ޑՉ୏ᆛၡᔈҔ೬ᡏࣣаൂ΋фૈࣁЬǴӦ౛Տ࿼ǵջਔ
ૻ৲ǵဂಔၗૻϩ٦ӧ٬Ҕ΢೿Ѹ໪٬Ҕό΋ኬޑ೬ᡏǴલЮ᏾ӝ
܄Ƕ 
௢ቶϷၮҔޑሽॶ!
!
!
ϡ 2/؂໨ࣴวԋ݀ፎ༤ቪ΋ԄΒҽǴ΋ҽᒿԋ݀ൔ֋ଌᛦҁ཮Ǵ΋ҽଌ! ຦ൂՏ
ࣴวԋ݀௢ቶൂՏȐӵמೌ౽ᙯύЈȑǶ!
ϡ 3/ҁ໨ࣴวԋ݀ऩۘ҂ҙፎ஑ճǴፎϮඟ៛ёҙፎ஑ճϐЬाϣ৒Ƕ 
ϡ 4/ҁ߄ऩόኦ٬ҔǴፎԾՉቹӑ٬ҔǶ 
一、參加會議經過 
    IEEE PacRim’09 在 University of Victoria 校內舉辦，假 Electrical and Computing 
Engineering Building 舉辦，敝人於會議開始前一晚自台北出發，經溫哥華轉機到達 BC 省會
維多利亞市，出發前聽說這裡很有英國風是美麗的城市，但因抵達的時間是凌晨一點多，四
周一片漆黑，又因機票占用的大部分差旅費預算，只能選擇入住最便宜的學生宿舍。 
    一早起來即出發前往會場吃免費的早餐點心，開始上工，熟悉口頭報告環境，依場地的
大小，調整修正簡報檔之文字大小，以求最佳的呈現效果。IEEE PacRim’09 的主題明確，包
含三大領域 Communication, Computer 和 Signal Processing，議程安排得宜，以五個會議間同
時進行，各個 Session 間的內容主題很明確，所收錄之論文內容也安排得相當有條理，與會
者可以依照各自的興趣和時間，有很好的安排，不大至於會衝場，便於在各會場之間切換。
由這部分可看得出 IEEE PacRim’09 的用心。 
詳細議程可參考：http://www.ece.uvic.ca/pacrim/pacrim09/PacRim09-tech-program.pdf 
    敝人之論文發表安排在第三天的下午 T43 (ECS-116)，至於其他時間呢？由於住在學生宿
舍，而該校位置離市中心有很長的一段距離，因此，敝人無處可去，接連三天全程參與會議，
聆聽大量論文報告，大量吸收新知。僅於準備離開之當天中午，與 Prof. Pang 一位來自中國
西安交大之準博士生，一同搭公車進城用餐。之後，前往機場，搭傍晚之飛機到溫哥華後，
轉搭深夜之華航班機復歸台北，結束這趟緊湊、但是相當充實的行程。 
 
二、與會心得 
    IEEE PacRim 是由 IEEE ComSoc Japan Chapter 與 IEEE Victoria Section/ University of 
Victoria 自從 1987 年起所共同主辦之第十二屆雙年會，與會者匯集了來自北美地區和環太平
洋國家等國之資通訊領域學者（主要以美國、加拿大、日本、中國、韓國等國為主）。因有地
緣和人種之關係，PacRim 與會者之間的社交互動顯然較為自然和友善。相較於過去參加 IEEE
ICC 和 Globecom 等大型國際會議之經驗，與會者雖然來自世界各地，但是社交場合中，往
往因為敝人還是小菜鳥學者，國際學術圈尚無認識一二人，無法加入陌生他人的社交小群體，
對於人脈之拓展實際上相當有限。但是，參加像這樣以區域性技術交流為主要目的之中型國
際會議，實質上卻能讓我們較容易融入不同小社群和研究社群之間的會談，較容易接觸到來
自不同國家但具有相似背景的學者們，也較容易藉由他們之介紹，進而接觸到更多不同領域
的學者，有效地開發個人的活動機會，拓展學術社交群。因此，敝人此次與會，很高興能夠
認識到 IEEE Victoria Section 幾位主要的學者，如 J. S. Collin（Vice President – Professional 
Activities, IEEE Oceanic Engineering Society）、Prof. J. Pan（Dept. Computer Engineering）、
Prof. Yang（Electrical and Computer Engineering）at University of Victoria，能有機會了解到他
們籌辦整個會議的過程和經驗學習。另外，Prof. J. Pan 之研究領域也剛好與敝人之興趣相近，
過去敝人也曾拜讀過他的團隊所發表之論文，這次能有機會與他見面，相當有實質的收穫，
透過他的介紹，得知他的研究團隊主要組成是來自亞洲之華人學生，也非常歡迎我們台灣的
學者，將來希望有機會進行短期學術交流或研發之合作。在這會後，我也收到幾封 Prof. J. Pan
學生的電郵，對於相關有興趣的議題，交流想法。因此，經由這次參與 PacRim 會議的經驗，
敝人願意把 PacRim 介紹給國內其他學者，分享敝人的收穫，建議爾後大家可以多參與該會
議，逐漸建立與 PacRim 之交流管道，開拓爾後台灣學者與 PacRim 之可能交流。另外，IEEE 
PacRim 所收錄的論文質與量都很不錯，收錄在 IEEE Xplore（EI），這對我們來說，也是很不
錯的 Credit。 
 
 
