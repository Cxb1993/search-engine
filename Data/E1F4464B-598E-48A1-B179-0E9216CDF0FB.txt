解的真正目標值(exact objective 
value)。小子集 SS 中具有最佳的真正目標
值的解即為所要求的不錯的解。序的最佳
化理論在[3]中分析了如此求得的解的品
質。他們指出若約化模式誤差(即真正模式
減去約化模式所得的誤差)為均勻機率分
佈(uniform distribution)，且所考慮問
題的 OPC 範圍涵蓋是從最好的到最差的狀
況，那麼所求得的不錯的解將至少是均勻
選出的Ｎ(=1000)個解中的前 5%，其機率高
達 0.95。這樣的設計基本上有三個缺點(i)
從巨大解集中均勻挑出1000個解並不是一
個挑好的解的恰當方法(ii)以均勻機率分
佈(uniform distribution)的模式來做誤
差模式的假設與實際狀況不符，(iii)實際
問題的 OPC 範圍不應是從最好到最差那般
廣泛，所以在[3]中所得之結果對特定之應
用問題來說並不準確。 
基於以上所述的目前序的最佳化理論
在應用時所呈現的不足處。我們(I)提出多
階 層 序 的 最 佳 化 方 法 (multi-level 
ordinal optimization)以克服原方法從巨
大解集中均勻挑選 N 個解的不恰當。意即
我們設計了一個約化模式据以從巨大解集
中挑出不錯的小子集。同時(II)我們直接
以大量模擬來求得約化模式與真正模式之
間的誤差的機率分佈模式，以克服原方法
的均勻機率分佈的不切實際。(III)我們也
對所考慮之困難最佳化問題，針對給予的
一組參數，利用大量模擬將解集中的解的
目標值形成 OPC，然後變化參數值至所有可
能的狀況，以求得整個 OPC 的分佈。(IV)
我們設計出在各個階層中挑選不錯的解的
方法，然後配合(III)中所求得的這些具代
表性的 OPC 以及(II)中所建立的誤差機率
分佈模式並以大量模擬的方法來分析所求
得的不錯的解在巨大解集中排名的前百分
比。這樣的效能分析是較接近實際狀況而
且也是一個創新的概念。 
 
二、研究目的 
 
工業界中，充斥著困難最佳化問題。
例如我們所研究的第一類問題是一個應用
非常廣泛的 polling system (cyclic 
server system)的問題，他的應用範圍包
括電腦網路、通訊網路、交通系統、製造
系統等等[6]，[7]。 
我們所研究的第二類應用問題是
multiuser Orthogonal Frequency 
Division Multiplexing (OFDM) 中 的
subcarrier assignmen 跟 bit 的 
allocation 以使 power consumption 最 
minimum 的問題，這個研究問題是一個非
線性的整數規劃問題(nonlinear integer 
programming)所以也是困難最佳化問題
[8]-[11]。 
除了上述在計劃中所提出之兩類問題
外，我們還額外地研究了以序的最佳化方
法來解具有離散控制變數的分散式電力潮
流問題。 
所以我們的研究皆在針對困難且重要
的工業界問題提出一個有效率的求解方
法。 
 
三、文獻探討 
 
在序的最佳化方法的研究以哈佛大學
的何毓琦教授為泰斗[1]-[3]，而 George 
Mason 大學的陳俊宏教授[4]，台灣大學的
張時中教授[5]等在這方面亦有相當的成
果。關於 polling system 的研究以日本的
Takagi 教授為最傑出[6]-[7]。而
Multiuser OFDM 系統的 subcarrier 
assignment跟bit allocation是目前相當
熱門的研究主題，香港大學的 Wong 教授
[8]、加大柏克萊分校的 Varyaiya 教授
[9]、韓國的 Kim 教授[10]皆是此領域的翹
楚。而竹科中也有甚多公司從事 OFDM 相關
的硬體製作，它其實是一個很有發展前景
的領域。而本人在序的最佳化方法的研究
亦已浸淫多年[12]-[15]。 
 
四、研究方法 
 
(i)多階層序的最佳化方法中約化模
式的建立皆因不同的問題而異。例如在
polling system 的問題上，我們的約化模
式有兩大層。第一層為以類神經網路建立
 2
這個計畫總共執行了兩年，我們已獲
致三篇論文的成果。第一篇是＂Adaptive 
Subcarrier Assignment and Bit 
Allocation for Multiuser OFDM System 
Using Ordinal Optimization Approach＂
已在 2008 年 9 月發表於 IEEE Trans. on 
Vehicular Technology 刊出，是一篇
regular paper 如附件一。第二篇
是＂Distributed Optimal Power with 
Discrete Control Variables of Large 
Distributed Power System＂已於 2008 年
8 月發表於 IEEE Trans. on Power 
Systems，是一篇 regular paper 如附件
二。第三篇是＂G/G/1/K Polling System 
with k-Limited Service Discipline,＂
即將於 Journal of Optimization Theory 
and Applications 刊出，是一篇 regular 
paper。 
[5] B.-W. Hsieh, C.-H. Chen, S.-C. 
Chang, “Scheduling Semiconductor 
Wafer Fabrication by Using Ordinal 
Optimization-based Simulation,＂ IEEE 
Trans. on Robotics and Automation, 
Vol.17, No.5, pp.599-608, Oct. , 2001 
 
[6] Takagi, H. (1989). Analysis of 
polling systems with a mixture of 
exhaustive and gated service 
disciplines. Journal of the operations 
research society of Japan, vol. 32, no. 
3, pp. 450-461. 
 
[7] Takagi, H. (2000). Analysis and 
application of polling model. In: 
Performance Evaluation: Origins and 
Directions, eds. G. Haring, C. 
Lindemann and M. Reiser, Lecture Notes 
in Computer Science, vol. 1769, pp. 
423-442, Springer, Berlin. 
 
六、參考文獻 
 
 [1] Ho, Y.C. (1999). An explanation of 
ordinal optimization: Soft 
computing for hard problems. 
Information Sciences, vol. 113, 
no.3-4, pp. 169-192. 
[8] Wong, C.Y., Cheng, R.S., Letaief, 
K.B., and Murch, R. D., “Multiuser 
OFDM with adaptive subcarrier, bit, 
and power allocation,＂ IEEE J. 
Select. Areas Commun., vol. 17, pp. 
1747–1758, Oct. 1999. 
 
[2] Ho, Y.C., Cassandras, C.C., Chen, 
C.H., and Dai, L., “Ordinal 
optimization and simulation,＂ Journal 
of Operation Research Society, vol. 21, 
pp. 490-500, 2000. 
 
[9] Ergen, M., Coleri, S., and Varaiya, 
P., QoS Aware Adaptive Resource 
Allocation Techniques for Fair 
Scheduling in OFDMA Based. Broadband 
Wireless Access  Systems, IEEE 
Transactions on Broadcasting, vol. 49 
no.4, December 2003, pp.362-370. 
 
[3] Lau, T.W.E. and Ho, Y.C., 
“Universal alignment probability and 
subset selection for ordinal 
optimization,＂ JOTA, vol. 39, no. 3, 
June 1997. 
 
[10] Kim, I., Lee, H.L., Kim, B. and Lee, 
Y.H. “On the use of linear programming 
for dynamic subchannel and bit 
allocation in multiuser OFDM,＂ in IEEE 
GLOBECOM ＇01, vol. 6, 2001, pp. 
3648–3652. 
 
[4] Chen CH, Lin J , Yucesan E, Chick 
SE (2000) Simulation budget allocation 
for further enhancing the efficiency of 
ordinal optimization. Discret Event 
Dyn Syst 10(3):251-270  
 [11] Zhang, Guodong ,“Subcarrier and 
 4
IEEE TRANSACTIONS ON VEHICULAR TECHNOLOGY, VOL. 57, NO. 5, SEPTEMBER 2008 2907
Adaptive Subcarrier Assignment and Bit Allocation
for Multiuser OFDM System Using Ordinal
Optimization Approach
Shin-Yeu Lin and Jung-Shou Huang
Abstract—In this paper, we propose an ordinal optimization
(OO) theory–based four-stage approach to deal with the sub-
carrier assignment and bit allocation problem of a multiuser
orthogonal frequency-division multiplexing (OFDM) system. The
four-stage OO approach ensures the quality of the obtained so-
lution, however, at the cost of solving a continuous version of the
considered problem in the first stage. To resolve this computational
complexity problem, we propose a hardware-implementable dual
projected gradient (DPG) method to exploit deep-submicrometer
technology. Compared to some existing methods using numerous
simulation cases with randomly generated parameters, our ap-
proach is excellent in the aspect of power consumption. In the
meantime, the estimated computation time of our approach can
meet the real-time application requirement. Furthermore, we use
extensive simulations to compare our good-enough solutions with
the true optimal solutions, and the results show that the objective
value obtained by our approach deviates from the optimal objec-
tive value around 1% on average.
Index Terms—Multiuser orthogonal frequency-division multi-
plexing (OFDM) system, ordinal optimization (OO), power
control, resource allocation, wireless data transmission.
I. INTRODUCTION
DUE TO THE increase of mobile users and devices, var-ious resource management techniques, such as dynamic
channel allocation [1] and dynamic fair resource allocation
schemes [2], have been studied. One of the difficulties for such
techniques is to keep track of the most updated state of the
mobile users or devices caused by their mobility and portability
and provide them with the appropriate resources. Therefore, the
real-time requirement is the premise of the wireless network
resource management solution methods to deal with the high
mobility of the dynamic behaviors of mobile users and devices.
Among the existing dynamic resource management problems
in wireless networks, adaptive subcarrier assignment and bit
allocation of an orthogonal frequency-division multiplexing
(OFDM) system is a very fundamental issue in mobile commu-
Manuscript received October 16, 2006; revised May 27, 2007, September 3,
2007, and November 14, 2007. This work was supported in part by the National
Science Council of Taiwan, R.O.C., under Grant NSC95-2221-E-009-099-
MY2. The review of this paper was coordinated by Dr. S. Vishwanath.
S.-Y. Lin is with the Department of Electrical and Control Engineer-
ing, National Chiao Tung University, Hsinchu 300, Taiwan, R.O.C. (e-mail:
sylin@cc.nctu.edu.tw).
J.-S. Huang is with the Department of Electrical and Control Engineering,
National Chiao Tung University, Hsinchu 300, Taiwan, R.O.C., and also with
Elan Microelectronics Corporation, Hsinchu 300, Taiwan, R.O.C. (e-mail:
rong@emc.com.tw).
Color versions of one or more of the figures in this paper are available online
at http://ieeexplore.ieee.org.
Digital Object Identifier 10.1109/TVT.2007.914053
nication. There are two types of formulations on this issue. One
is the margin adaptive (MA) optimization, which minimizes the
total consumed power under a data rate constraint [3], and the
other is the rate adaptive (RA) optimization, which maximizes
the data rate under a power constraint [4]. Kim et al. had shown
in [5] that the RA optimization problem can be solved via
recursive MA optimization. Therefore, in this paper, we will
focus on the adaptive subcarrier assignment and bit allocation
problem of MA optimization, with emphasis on the solution
quality and the computational efficiency to meet the real-time
application requirement.
The considered problem formulated by Wong et al. in their
pioneer work [3] is a very hard nonlinear integer programming
problem; thus, various heuristic solution methods are proposed
in [3]–[9]. Wong et al. employed a Lagrangian relaxation
method in [3] to solve the continuous version of the adaptive
subcarrier assignment and bit allocation problem. They then
rounded the optimal continuous subcarrier assignment solution
off to the closest integer solution. Kim et al. [5] converted
the adaptive subcarrier assignment and bit allocation problem
formulated in [3] into a linear integer programming problem
and employed a suboptimal approach to separately perform
the subcarrier assignment and bit allocation. To claim for real-
time application by not using a mathematical programming
approach, Ergen et al. [6] proposed a heuristic two-module
scheme, Kivanc et al. [7] and Zhang [8] proposed two-step
subcarrier assignment approaches, and Han et al. [9] proposed
an iterative grouping scheme to improve the performance by
exchanging subcarrier assignment sets.
In general, to obtain a better solution of a hard optimiza-
tion problem, such as the considered problem, usually re-
quires a sophisticated but computationally intensive algorithm.
This point had been commented on the method proposed
by Wong et al. [3] in [5]–[9]. The purpose of this paper
is to counter this seemingly correct argument by proposing
a method that will not only obtain a good-enough feasible
solution (better than the solution, if feasible, obtained by
Wong et al.), but also meet the requirement of real-time ap-
plication. Our approach consists of four ordinal optimization
(OO) theory-based stages, and the most computationally in-
tensive stage among the four lies in the first stage, where we
need to solve a continuous version of the considered problem.
To cope with the computational complexity caused by the
nonlinear programming algorithm, we propose a hardware-
implementable dual projected gradient (DPG) method to exploit
the advantage of deep-submicrometer technology to obtain the
optimal continuous solution extremely quickly.
0018-9545/$25.00 © 2008 IEEE
附件一
LIN AND HUANG: ADAPTIVE SUBCARRIER ASSIGNMENT AND BIT ALLOCATION FOR OFDM USING OO APPROACH 2909
where fk(c) denotes the required transmission power for c bits
of user k when the channel gain is equal to unity, αk,n is
the channel gain for user k using subcarrier n, fk(ck,n)/α2k,n
denotes the transmission power for user k using subcarrier n,
PT denotes the total transmission power to be minimized, ρk,n
is an indicator variable (a subcarrier can be occupied by at most
one user as described by the equality constraint on ρk,n), Rk
(bits per OFDM symbol) denotes the requested data rate of
the kth user, ck,n denotes the number of bits of the kth user
assigned to the nth subcarrier, and D = {0, 1, 2, . . . ,M} de-
notes the set of all possible values for ck,n, and thus, the first
equality constraint in the problem formulated in (1) implies
that the subcarrier assignment and bit allocation should meet
the user’s data rate request.
Since problem (1) is a computationally intractable combi-
natorial problem, Wong et al. introduced the variable rk,n =
ck,nρk,n to transform (1) into the following continuous-variable
convex optimization problem over a convex set
min
rk,n∈[0,Mρk,n]ρk,n∈[0,1]
N∑
n=1
K∑
k=1
ρk,n
α2k,n
fk
(
rk,n
ρk,n
)
subject to
Rk =
N∑
n=1
rk,n, k = 1, . . . ,K
1 =
K∑
k=1
ρk,n, n = 1, . . . , N (2)
where both ρk,n and rk,n are continuous variables, satisfy-
ing 0 ≤ ρk,n ≤ 1 and 0 ≤ rk,n ≤ Mρk,n, respectively. Note
that when ρk,n = 0, rk,n = 0, and 0/0 becomes undefined;
therefore, we define f(0/0) in (2) as f(0). The solution of
(1) obtained by Wong et al. is to round the optimal so-
lution of (2) off to the nearest discrete solution. Despite
the fact that the consumed power could be significantly re-
duced while maintaining QoS, their approach faces the fol-
lowing two challenges: 1) the computational complexity of
the Lagrangian relaxation method and 2) the possible infea-
sibility and no guarantee to be a good-enough solution by
arbitrarily rounding off [7], [8]. To cope with these two chal-
lenges, we propose an OO-theory-based four-stage approach
to solve (1) for a good-enough feasible solution. Stage 1,
among the four, is the most computationally intensive stage,
because we need to solve (2). Thus, for the sake of fluency
in presentation, we will present our hardware-implementable
numerical method for solving (2) in the following sec-
tion first, then followed by the OO-theory-based four-stage
approach.
III. HARDWARE IMPLEMENTABLE DPG METHOD
If we apply a typical Lagrangian relaxation method to solve
(2), there will be a singularity problem in the variable ρk,n, just
like that shown in [3]. To develop a hardware-implementable
dual-type method, we need to eliminate this singularity problem
by adding extra terms in the objective function of (2) to strictly
convexify ρk,n, for every k, n, as follows:
min
rk,n∈[0,Mρk,n]ρk,n∈[0,1]
N∑
n=1
K∑
k=1
ρk,n
α2k,n
fk
(
rk,n
ρk,n
)
+
N∑
n=1
K∑
k=1
σ
2
ρ2k,n
subject to
Rk =
N∑
n=1
rk,n, k = 1, . . . ,K
1 =
K∑
k=1
ρk,n, n = 1, . . . , N. (3)
If σ > 0, (3) is a convex programming problem with a strictly
convex objective function.
Remark 1: 1) Adding the extra terms ∑Nn=1∑Kk=1
(σ/2)ρ2k,n will help us build the surrogate model in stage 1
of our OO-theory-based four-stage approach, as will be shown
later. 2) The optimal solution of (3) is a good approximate
solution of (2), provided that σ is small enough.
The DPG method will solve the dual problem of (3), as
shown in (4), instead of solving (3) directly. We have
maxφ(λ) (4)
where λ = (λr1, . . . , λrK , λ
ρ
1, . . . , λ
ρ
N )
T is the Lagrange multi-
plier vector such that λrk corresponds to the kth user’s data rate
request constraint, and λρn corresponds to the nth subcarrier
assignment constraint, and the dual function φ(λ) is defined by
φ(λ) = min
rk,n∈[0,Mρk,n]ρk,n∈[0,1]
N∑
n=1
K∑
k=1
ρk,n
α2k,n
fk
(
rk,n
ρk,n
)
+
N∑
n=1
K∑
k=1
σ
2
ρ2k,n +
K∑
k=1
λrk
(
Rk −
N∑
n=1
rk,n
)
+
N∑
n=1
λρn
(
K∑
k=1
ρk,n − 1
)
. (5)
By suitably rearranging the terms, (5) can be rewritten in
a more compact form as (6), shown at the bottom of the
φ(λ) = min
rk,n∈[0,Mρk,n]ρk,n∈[0,1]
N∑
n=1
K∑
k=1
{
ρk,n
α2k,n
fk
(
rk,n
ρk,n
)
+
σ
2
ρ2k,n +
1
N
λrkRk − λrkrk,n + λρnρk,n −
1
K
λρn
}
(6)
LIN AND HUANG: ADAPTIVE SUBCARRIER ASSIGNMENT AND BIT ALLOCATION FOR OFDM USING OO APPROACH 2911
programming. Its value is its simplicity and complete de-
composition property that enables the method to be hardware
implementable.
The description of the hardware architecture for the DPG
method is very detailed but indispensable, as indicated in
Section I; thus, we will present it in Appendix B.
IV. OO-THEORY-BASED FOUR-STAGE APPROACH
The OO theory [13]–[15] is a recently developed optimiza-
tion methodology designed to solve a hard optimization prob-
lem for a good-enough solution with high probability. The basic
idea of the OO theory is using a surrogate model to quickly
evaluate the estimated performance of a solution to select an
estimated good-enough subset from the candidate solution set
using limited computation time. When the size of the solution
space is huge, the reduction of the search space can be done
in several stages. The surrogate models in the stages can range
from very rough to more refined ones, and the exact model will
be employed in the last stage when there are only few solutions
left in the candidate solution set.
Therefore, to obtain a good-enough solution of (1) while
using limited computation time to meet the real-time ap-
plication requirement in the OFDM system, we employ an
OO-theory-based four-stage approach, as presented in the
following.
A. Stage 1: Reduce the Search Space of Subcarrier Assignment
Using a Continuous-Optimal-Solution-Based Model
Intuitively, a true solution that is neighboring to the optimal
solution of the continuous version of the considered problem
may be a good-enough solution. However, all the possible
subcarrier assignments ρk,n, k = 1, . . . ,K, n = 1, . . . , N are
neighboring to the optimal continuous solution, which is de-
noted by ρ∗k,n. Wong et al. [3] chose the closest one, which,
however, may cause infeasibility, and even if it is feasible, there
is no guarantee that it is a good-enough subcarrier assignment,
as indicated in Section II. Thus, in this stage, we will reduce the
subcarrier assignment patterns by excluding all the ineffective
subcarrier assignments based on our solution process for ob-
taining the approximate continuous optimal solution of (2). As
previously indicated, σ0 (= 1), σ1, . . . , σjmax is a decreasing
sequence of σ such that σj+1 = ησj . We let ρ∗k,n(σj) denote the
optimal continuous ρk,n of (3) when σ = σj . Then, we claim
that subcarrier n is inappropriate to be assigned to user k if
ρ∗k,n(σj) = 0 for every j = 0, 1, . . . , jmax. The reason for this
is simple, as stated in the following.
We let ρ∗k′,n(σ) denote the largest ρ∗k,n(σ) among all
k = 1, . . . ,K for the given n. The term in the objective function
of (3) regarding σ is ∑Nn=1∑Kk=1(σ/2)ρ2k,n. The sensitivity
of this term with respect to ρ∗k,n(σ) is σρ∗k,n(σ). Suppose we
increase σ by Δσ. Then, the decrease of ρ∗k,n(σ) by the amount
−Δρk,n, where we assume Δρk,n > 0, will cause an approxi-
mate extra reduction of the objective value due to the increase
of σ by −ρ∗k,n(σ)ΔσΔρk,n. Thus, decreasing ρ∗k′,n(σ) will be
most beneficial if we increase σ. This implies that increasing σ
in (3) will force ρ∗k′,n(σ) to decrease. Then, by the constraint
∑K
k=1 ρk,n = 1 for a given n, if ρ∗k′,n(σ) decreases, there must
be at least one k′′ ∈ {1, . . . ,K}, k′′ = k′, such that ρ∗k′′,n(σ)
will increase. Among ρ∗k,n(σ), k = 1, . . . ,K, n = 1, . . . , N ,
the ones with ρ∗k,n(σ) = 0 are the most possible candidates to
be ρ∗k′′,n(σ), because the increase of such ρ∗k,n(σ) will cause
an approximately zero increment in the objective value because
ρ∗k,n(σ)ΔσΔρk,n = 0. Thus, if they do not, it simply implies
that it is inappropriate to assign subcarrier n to those users with
ρ∗k,n(σ) = 0 and remaining 0 while σ increases. We have solved
a sequence of (3) with σj , j = 0, 1, . . . , jmax and obtained
ρ∗k,n(σj), j = 0, 1, . . . , jmax for all k and n. Then, based on the
above argument, we have that ρ∗k,n(σj) = 0, j = 0, 1, . . . , jmax
implies that subcarrier n is not suitable to be assigned to
user k because when σj+1 increases to σj (σj > σj+1), re-
mains 0 as ρ∗k,n(σj+1).
Therefore, our crude model for selecting roughly good sub-
carrier assignment patterns in this stage can be stated as follows.
We first set ρk,n = 0 for the (k, n)’s whose corresponding
optimal continuous ρ∗k,n(σ) = 0 for all σ = σ0, σ1, . . . , σjmax .
We denote γn as the number of ρk,n’s that are not set to
be 0 for a given n. Then, there will be γn possible subcar-
rier assignment patterns for a given n, which means these
γn nonzero ρk,n’s take turns to be 1. Subsequently, we
will choose feasible subcarrier assignment patterns from the∏N
n=1 γn possible patterns and form the set of roughly good
subcarrier assignment patterns that resulted in this stage. It
should be noted that checking the feasibility of a pattern,
e.g., (ρ1,1, . . . , ρK,1, . . . , ρ1,N , . . . , ρK,N ), is simply checking
whether M
∑N
n=1 ρk,n ≥ Rk hold for every k.
Remark 3: The reduction of the search space of subcarrier
assignments had been reduced from KN (which is considered
to be the worst case and may include the infeasible patterns)
to
∏N
n=1 γn. Based on our simulation experience, a lot of γn’s
are 1.
B. Stage 2: Choose s Estimated Good-Enough Subcarrier
Assignment Patterns Using an Approximate Model
To evaluate the estimated performance of the feasible sub-
carrier assignment patterns obtained in stage 1, we will employ
an approximate model to estimate the total power consump-
tion of each pattern as follows. For a given feasible pattern
(ρ1,1, . . . , ρK,1, . . . , ρ1,N , . . . , ρK,N ), we let Nˆk =
∑N
n=1 ρk,n
and αˆk =
∑N
n=1 ρk,nαk,n/Nˆk denote the total number of
subcarriers assigned to and the average power consumption
coefficient of user k, respectively. We assume that the re-
quested data rate Rk of user k are equally distributed to the
assigned subcarriers. Then, the approximate power consumed
by user k, which is denoted by Pˆk, can be calculated by
Pˆk = (Nˆk/αˆ2k)fk(Rk/Nˆk). Consequently, the estimated total
consumed power for the given pattern, which is denoted by
PˆT , will be PˆT =
∑K
k=1 Pˆk. We apply the above estimation
process to each feasible pattern obtained in stage 1 and pick the
s (= 50) patterns with the smallest PˆT to form the estimated
good-enough subset, which is denoted by SS.
Remark 4: Based on the surrogate model with modeling
noise w, the selected s patterns will contain at least y actual
top x% patterns among the
∏N
n=1 γn with a probability of 0.95.
LIN AND HUANG: ADAPTIVE SUBCARRIER ASSIGNMENT AND BIT ALLOCATION FOR OFDM USING OO APPROACH 2913
appearing in (1), and this formula holds for all k in MQAM
at a given BER denoted by Pe [3]:3
f(c) =
N0
3
[
Q−1
(
Pe
4
)]2
(2c − 1) (16)
where Q−1(x) is the inverse function of
Q(x) =
1√
2π
∞∫
x
e
−t2
2 dt (17)
and N0 denotes the noise power spectral density (PSD) level.4
Remark 7: The fk(c) in our hardware implementation is
not limited to the formula given in (16), which is simply an
example formula for the purpose of comparisons. However, we
have to admit that once a function or a form of fk(c), which
may correspond to certain coding and modulation schemes, is
assumed, changing hardware is not as easy as the software.
In all simulations presented in this section, we set Pe =
10−4 for each user, and the wireless channel is modeled as
a frequency-selective channel consisting of six independent
Rayleigh multipaths. Each multipath is modeled by Clark’s
flat-fading model [20]. We assumed that the delays and the
corresponding gains of the six paths are 100 · p ns and e−2p
(exponentially decay), respectively, where p = 0, 1, 2, 3, 4,
and 5 denote the multipath index. Hence, the relative power of
the six multipath components are 0, −8.69, −17.37, −26.06,
−34.74, and −43.43 dB. We also assume that the average
subcarrier channel gain E|αk,n|2 is unity for all k and n. Based
on the above assumptions, we generate power consumption co-
efficients αk,n, k = 1, . . . ,K, n = 1, . . . , N using MATLAB
for our simulations.
We consider various numbers of users by setting K = 2, 4, 8,
16, and 32. For each K, we randomly generate 500 sets of αk,n,
k = 1, . . . ,K, n = 1, . . . , N , based on the aforementioned
power consumption coefficient generation process and denote
αi as the ith set in the 500. We assume a fixed total requested
data rate RT (= 512 bits/symbol) and randomly generate Rk,
k = 1, . . . ,K, based on the constraint
∑K
k=1 Rk = RT . By the
above test setup, we have run our approach for each K, each
set of αk,n, k = 1, . . . ,K, n = 1, . . . , N , and each set of Rk,
k = 1, . . . ,K. We also apply the four methods mentioned at the
beginning of this section to the same test.
For each K associated with the data rate request Rk, k =
1, . . . ,K, we denote abSNR(αi) as the average bit SNR5
3Equation (16) is directly borrowed from [3, Sec. V, p. 1725], which is
an approximation based on the bit-error probability 4Q((d2/(2N0))1/2) and
the average energy (M − 1)d2/6 of an MQAM symbol, where d is the
minimum distance between the points in the signal constellation. Furthermore,
this formula is also used in [5], [6], and [8].
4Once N0 and Pe are given, N0/3[Q−1(Pe/4)]2 in (16) is a constant
denoted by B. We can rewrite f(c) = B(2c − 1), and then, f ′−1(c) =
ln(c/B ln 2)/ ln 2, which is the term needed in (13) and (14).
5It is noted that the average required transmit power (in energy per bit) is
defined as the ratio of the overall transmit energy per OFDM symbol, i.e., PT
in (1), to the total number of bits transmitted per OFDM symbol, which consists
of 512 bits in our test case. Moreover, we define the average bit SNR as the ratio
of the average transmit power, i.e., PT /512, to the noise PSD level N0. As we
have assumed that all the data rates per symbol are fixed at 512 and that N0 is
just a constant, PT is thus proportional to the average bit SNR. Therefore, for
the purpose of comparison, we can use the average bit SNR to replace PT .
Fig. 2. Average abSNR for K = 2, 4, 8, 16, and 32 obtained by the five
methods.
when αi is used and calculate
∑500
i=1 abSNR(α
i)/500, i.e.,
the average abSNR, resulting from the 500 αi’s using our
approach and the other four methods and report them in Fig. 2.
We can see that the
∑500
i=1 abSNR(α
i)/500 values obtained
by our approach, which are marked by “” in Fig. 2, are the
smallest among all the methods. Moreover, the performance
of our approach becomes even better as the number of users
increases, as can be observed in Fig. 2.
To investigate the computational efficiency of our approach
and the other four methods, we need to report the average
computation time for obtaining abSNR(αi). However, as we
have indicated in Section I that the DPG method will be
implemented by integrated circuits, the computation time of our
approach is partly real and partly estimated, and its details are
stated in the following.
All the computation times of our OO-theory-based four-
stage approach, except for the DPG algorithm, are recorded
in the employed Pentium 2.4-GHz-processor 512-MB-random-
access-memory personal computer, and we denote it by TR. For
K = 2, 4, 8, 16, and 32 in the test results shown in Fig. 2,
the corresponding average TR’s for obtaining abSNR(αi) are
1.214, 1.686, 3.386, 5.366, and 11.136 ms, respectively. To
estimate the computation time of the DPG method, we base
on 90-nm CMOS integrated circuit technology and denote this
estimated computation time as TE . We let ⊗, ⊕, and read-only
memory (ROM) denote the operations multiplication, addition,
and accessing the data of the ROM, respectively, and we define
T(·) as the computation time for performing the operation (·).
Referring to the work of Hsu et al. [21] and Kanan et al. [22],
T⊗ = 1.0 ns for a 16 × 16 bit multiplication,6 and it takes
1.2 ns to access the data in the ROM. In practical designs, the
circuit complexity of a 16 × 16 bit multiplication is five times
greater than that of a 16 + 16 bit addition [23, Ch. 5, p. 113, and
Ch. 13, p. 433]; thus, we can set T⊕ ≈ 0.2 ns. Then, based on
6The 16-bit data type has enough precision for the implementation of the
DPG algorithm, because the resulting ρ∗k,n that we need from the hardware
computation is only whether ρ∗k,n is zero or nonzero and not how accurate the
nonzero value is.
LIN AND HUANG: ADAPTIVE SUBCARRIER ASSIGNMENT AND BIT ALLOCATION FOR OFDM USING OO APPROACH 2915
APPENDIX A
HARDWARE-IMPLEMENTABLE ALGORITHM
OF THE DPG METHOD
To further enhance the computation speed, we will propose
a hardware architecture to implement the DPG method. To do
so, we need to put the DPG method in algorithmic steps that
can be mapped into the operations of the arrays of PEs, which
are defined as the hardware for carrying out the arithmetic
operations in the DPG method. First, we should modify the
convergence criteria of the DPG method by setting a large-
enough number of iterations, e.g., tmax, such that if t ≥ tmax,
we assume that the DPG method converges. Furthermore, we
should predetermine the value of jmax, which is the number of
times that σ will be reduced.
It can be observed that all the computation formulas of the
DPG method, namely, (8), (9), and (13)–(15), achieve a com-
plete decomposition property, i.e., the computations for each
k and each n can be carried out independently. Furthermore,
all these computations consist of simple arithmetic operations
only. These facts imply that the DPG method is very suitable
for hardware implementation. However, it is not wise to assign
a PE to calculate each individual component, e.g., calculating
ρ˜k,n for every k and every n in (14), because this will make the
size of the integrated circuit chip too big to be implemented.
Therefore, to render the difficulty of chip size, we can use
N arrays of PEs such that the nth PE array will take care
of all the K computations corresponding to one n in (8),
(9), and (13)–(15). Although such an arrangement seems to
degrade the computational speed, in fact, it will not affect
the purpose of real-time application, as shown in Section V
and Appendix C. On the basis of using N PE arrays, we can
put the DPG method in the following parallel-computation
algorithmic steps.
Step 0) Set the values of λ(0), σ(0), η(< 1), tmax, and
jmax; set j = 0 and t = 0.
Step 1) Set k = 1 and R(∂φ(λ(t))/∂λρn) = −1 for each n.
(Note that R(∂φ(λ(t))/∂λρn) represents a tempo-
rary memory for the term ∂φ(λ(t))/∂λρn.)
Step 2) Compute in parallel (r˜k,n, ρ˜k,n) by calculating (13)
and (14) for each n.
Step 3) Project in parallel (r˜k,n, ρ˜k,n) onto the range
([0,Mρk,n], [0, 1]) for each n using (15) to obtain
(rˆk,n, ρˆk,n) for each n.
Step 4) Compute (∂φ(λ(t))/∂λrk) = Rk −
∑N
n=1 rˆk,n.
Step 5) Compute in parallel R(∂φ(λ(t))/∂λρn) :=
R(∂φ(λ(t))/∂λρn) + ρˆk,n for each n.
Step 6) Update λrk(t + 1) = λrk(t) + βˆ(∂φ(λ(t))/∂λrk).
Step 7) If k = K, go to Step 8); otherwise, set k = k + 1,
and return to Step 2).
Step 8) Update in parallel λρn(t + 1) = λρn(t) +
βˆ(∂φ(λ(t))/∂λρn) for each n. [Note that the
value of (∂φ(λ(t))/∂λρn) =
∑K
k=1 ρˆk,n − 1 is
stored in R(∂φ(λ(t))/∂λρn).]
Step 9) If t ≥ tmax, go to Step 10); otherwise, set t = t +
1, and return to Step 1).
Step 10) Set σ(j + 1) = ησ(j).
Fig. 3. Three types of registers for storing the temporary computed values of
the DPG algorithm.
Step 11) If j ≥ jmax, go to Step 12); otherwise, set j =
j + 1, λrk(0) = λ
r
k(t) for each k, λρn(0) = λρn(t)
for each n, k = 1, and t = 1, and return to Step 1).
Step 12) Stop.
Remark 11: The reason behind why we execute Step 5) for
K iterations to calculate ∂φ(λ(t))/∂λρn for each n is because
we use N instead of N ·K PE arrays.
APPENDIX B
HARDWARE COMPUTING ARCHITECTURE
OF THE DPG ALGORITHM
Mapping the DPG algorithm into a hardware architecture
needs to consider the following four parts: 1) the data storage;
2) the computations; 3) the iteration count and the convergence
detection for branching the data flow; and 4) the interconnec-
tions between PEs and data storage elements. In the following,
we will present the details of each part.
1) Regarding the data storage, we employ registers to store
the constants η, tmax, jmax, βˆ, Rk, α2k,n, and 1/α2k,n of
the algorithm and the temporary values of the variables
λρn(t), R(∂φ(λ(t))/∂λ
ρ
n), λ
r
k(t), k = 1, . . . ,K, σ(j),
(rˆk,n, ρˆk,n), k = 1, . . . ,K generated in the algorithm.
For the sake of simplicity in interconnection, the reg-
isters for storing the constants are embedded in the PE
responsible for the computations that need the constants.
However, there are three types of registers, denoted by
R(Δ), for storing the temporary computed values of the
variables Δ, as shown in Fig. 3. For example, R(λρn)
denotes the register for storing the computed value of
λρn. The type 1 registers are for storing the computed
values of λρn and σ;λρn is updated when k = K, and σ
is updated when both k = K and t = tmax, as indicated
in Steps 7) and 8) and Steps 9) and 10), respectively.
Therefore, a write enable controlled by the value of k and
t is needed, as shown in Fig. 3. The type 2 registers are
K-bank registers for storing the computed values of λrk,
k = 1, . . . ,K, or (rˆk,n, ρˆk,n), k = 1, . . . ,K, such that
the kth bank will store the value of λrk or (rˆk,n, ρˆk,n).
Since the iteration index of the innermost loop of the
DPG algorithm is k, we need a register indicator k to
point to the corresponding register bank, as shown in
Fig. 3. Furthermore, λrk and (rˆk,n, ρˆk,n) are computed
for every k, and thus, type 2 registers are always write
enabled. The type 3 register is for storing the value of∑k
l=1 ρˆl,n − 1; therefore, a type 3 register is always write
enabled. However, its value has to be reset to −1 when
LIN AND HUANG: ADAPTIVE SUBCARRIER ASSIGNMENT AND BIT ALLOCATION FOR OFDM USING OO APPROACH 2917
Fig. 5. Hardware architecture of the DPG algorithm.
will be written into the register R(λρn). A similar reason
applies to CT_t. When t = tmax, there will be a branch-
ing at Step 9) such that the output data of PE7, which
performs Step 10), will be written into the register R(σ).
Furthermore, when the value of CT_k changes from K to
1, the value of the register R(∂φ(λ(t))/∂λρn) will be reset
to −1 to perform Step 1). The value of CT_j will be used
to detect the convergence of the DPG algorithm. Thus,
when j = jmax, the DPG algorithm will be stopped and
will output the approximate solution of (2), i.e., (rˆn, ρˆn),
k = 1, . . . ,K, n = 1, . . . , N .
The counters are designed such that CT_k will circu-
late from 1 to K and increase by 1 for every clock pulse,
CT_t will circulate from 1 to tmax and increase by 1 for
every K clock pulses, and CT_j will increase by 1 for
every K · tmax clock pulses.
4) Now, we are ready to interconnect the array PEs, regis-
ters, and counters to execute the DPG algorithm. From
the columns of the input data [from] and the output data
[to] in Table III, we can use solid lines with arrow heads
to indicate the direction of the data flow to interconnect
the PEs and registers, as shown in Fig. 5, in which we
assume N = 3 and do not show the system clock for the
sake of simplicity.
The three counters, namely CT_k, CT_t, and CT_j, as
previously described, are used to count the number of iterations
and control the branching of data flow. Therefore, to distinguish
from the regular data flow, we use the dashed lines with arrow
heads to indicate the flow of counter values to the corresponding
registers, as shown in Fig. 5.
For the sake of simplicity, we will illustrate how the hard-
ware architecture executes the DPG algorithm for one array as
follows.
We initialize the values of registers R(∂φ(λ(t))/∂λρn)
(Step 1: R(∂φ(λ(t))/∂λρn) = −1), R(λρn) (Step 0: λρn = 0),
R(λr1, . . . , λrK) (Step 0: λrk = 0, k = 1, . . . ,K), R(σ) (Step 0:
σ0 = 1), the counter values of CT_k (Step 1: k = 1), CT_t
(Step 0: t = 1), CT_j (Step 0: j = 1), and command PE1n to
start execution. Then, PE1n will perform Step 2) and output the
resulting (r˜k,n, ρ˜k,n) to PE2n, as shown in Fig. 5. Then, PE2n will
perform Step 3) and output the resulting (rˆk,n, ρˆk,n) to PE6n,
PE4, and R((rˆk,n, ρˆk,n), k = 1, . . . ,K). It should be noted that
the data (rˆk,n, ρˆk,n) will be written into the kth register bank
of R((rˆk,n, ρˆk,n), k = 1, . . . ,K), as selected by the value k of
the counter CT_k, as shown in Fig. 5. Once PE4 receives the
computed rˆk,n, n = 1, . . . , N from the N PE2ns, it will perform
Step 4) and output the value of ∂φ(λ(t))/∂λrk to the single
PE5. Then, PE5 will perform Step 6) to update λrk(t), and the
updated value will be sent to register banks R(λr1, . . . , λrK).
In the meantime, PE6n will perform Step 5) using the com-
puted data ρˆk,n from PE2n and the data
∑k−1
l=1 ρˆl,n − 1
in R(∂φ(λ(t))/∂λρn) and will then output the resulting data∑k
l=1 ρˆl,n to R(∂φ(λ(t))/∂λ
ρ
n) and PE3n, as shown in Fig. 5.
The above calculations and data flow complete one iteration of
the innermost loop, i.e., Steps 1)–7), and should be done in one
clock pulse, whose period needs to be long enough such that the
output data of all PEs can reach steady states. The counter CT_k
will increase by 1 for each activation of a clock pulse (Step 7).
As k increases by 1, the output of the register R(λr1, . . . , λrK)
will be λrk+1 instead of λrk, and hence, the next iteration of the
innermost loop starts.
The above process will repeat, and a branching will occur
when the value of CT_k reaches K. When k = K, the write
enable of the register R(λρn) will be active, and the output data
of PE3n, which performs Step 8) with input data from PE6n and
R(λρn), as shown in Fig. 5, will be written into R(λρn). After this
clock pulse, the value of CT_k will start from 1 again, and the
value of CT_t will be increased by 1 (Step 9). As t increases
by 1, the value of λρn, n = 1, . . . , N , as well as λrk, k =
1, . . . ,K, has been updated, and hence, the next iteration of
the middle loop starts.
The above process will repeat, and a branching will occur
when the value of CT_t reaches tmax (Step 9), which will
activate the write enable of R(σ), and the output data of
PE7, which performs Step 10 with input data from R(σ), as
shown in Fig. 5, will be written into R(σ). In the meantime,
the value of CT_k will start from 1 again, and CT_t also
starts from 1, while the value of CT_j will be increased
by 1 (Step 11). As j increases by 1, the above process starts
all over with a new σ(= σj+1). This process will proceed until
CT_j reaches jmax, which implies that the DPG algorithm
converges (Step 12), and then, as shown in Fig. 5, the buffer
will be activated to output the data (rˆk,n, ρˆk,n), k = 1, . . . ,K,
n = 1, . . . , N , the solution of (3) when σ = σjmax , or the
LIN AND HUANG: ADAPTIVE SUBCARRIER ASSIGNMENT AND BIT ALLOCATION FOR OFDM USING OO APPROACH 2919
Shin-Yeu Lin was born in Taiwan, R.O.C. He
received the B.S. degree in electronics engineer-
ing from National Chiao Tung University, Hsinchu,
Taiwan, the M.S. degree in electrical engineering
from the University of Texas, El Paso, and the
D.Sc. degree in systems science and mathematics
from Washington University, St. Louis, MO, in 1975,
1979, and 1983, respectively.
From 1984 to 1985, he was with Washington
University, working first as a Research Associate and
then as a Visiting Assistant Professor. From 1985 to
1986, he was with GTE Laboratories, working as a Senior Member of Technical
Staff. In 1987, he joined the Department of Electrical and Control Engineering,
National Chiao Tung University, where he has been a Professor since 1992.
His major research interests include wireless communication and networks,
data mining, ordinal optimization theory and applications, and distributed
computations.
Jung-Shou Huang was born in Taiwan, R.O.C. He
received the B.S. degree in electrical engineering in
1996 from Tamkang University, Taipei, Taiwan, and
the M.S. degree in electrical and control engineer-
ing in 1998 from National Chiao Tung University,
Hsinchu, Taiwan, where he is currently working
toward the Ph.D. degree in electrical and control
engineering.
He is also a Digital IC Designer with Elan Mi-
croelectronics Corporation, Hsinchu, Taiwan, R.O.C.
His major research interests include optimization
theory with applications, image processing, and digital IC design.
1384 IEEE TRANSACTIONS ON POWER SYSTEMS, VOL. 23, NO. 3, AUGUST 2008
Inequality constraints in the
general CDOPF (3).
Continuous version of
corresponding to subsystem .
.
Optimal .
I. INTRODUCTION
A LTHOUGH the optimal power flow (OPF) problem has along history in power system research [1]–[5], the study
of distributed OPF is introduced only recently. Kim and Baldick
proposed a course-grained distributed OPF algorithm in [6], and
they also compared three decomposition coordination methods
for implementing distributed OPF algorithms in [7]. Hur et al.
had evaluated the convergence rate of the auxiliary problem
principle for a distributed OPF algorithm in [8]. In a more re-
cent paper [9], Hur et al. considered the security limits for dis-
tributed OPF. Furthermore, Nogales et al. proposed a decompo-
sition algorithm for the multiarea OPF problem in [10]. Chang
and Lin proposed an MPBSG technique based parallel dual type
method for solving distributed OPF problems in [11], and sim-
ilar technique appeared in [12]. These excellent research works
had made distributed OPF possible; however, issues of handling
discrete control variables such as the switching shunt capacitor
banks and transformer taps in a large distributed power system
are not explored in the above mentioned papers.
Discrete control variables play an important role in central-
ized OPF and have been studied for years [13]–[16] including
more recent papers that use ordinal optimization (OO) approach
[17], simulated annealing (SA) method [18], genetic algorithm
(GA) [19], tabu search (TS) method, [20], and evolutionary pro-
gramming (EP) [21] as the solution techniques. The importance
of discrete control variables to distributed OPF remains as well.
Thus, distributed optimal power flow with discrete control
variables, which is abbreviated as DOPFD in this paper, of
large distributed power system is an important research topic to
pursue. DOPFD is a large dimension distributed combinatorial
optimization problem, which, in general, is computationally
intractable. Thus, the purpose of this paper is to propose a
computationally efficient distributed algorithm to solve the
DOPFD for a good enough solution. The proposed distributed
algorithm for DOPFD possesses two distinguished features:
1) a distributed algorithm for solving continuous distributed
OPF to serve as a core technique in the framework of OO
strategy, and 2) implementing the OO strategy [22], [23] in
a distributed power system to select a good enough discrete
control variable solution.
In addition, we will implement the proposed distributed al-
gorithm in a real PC network to demonstrate its validity. Thus,
the contribution of this paper is that we not only propose a com-
putationally efficient distributed algorithm to solve the DOPFD
for a good enough solution but also implement it in a real com-
puter network.
Fig. 1. Example system formed by three interconnected subsystems.
This paper is organized in the following manner. In Section II,
we will state the considered DOPFD mathematically. In
Section III, we will present the proposed distributed algorithm
to solve the DOPFD for a good enough solution. In Section IV,
we will test the proposed distributed algorithm on the IEEE
118-bus and Tai Power (TP) 244-bus systems, which are arbi-
trarily partitioned into four subsystems, using a PC network.
Finally, we will draw a conclusion in Section V.
II. PROBLEM STATEMENT
The considered DOPFD problem can be stated in the
following:
subject to
(1)
where denotes the set of tie lines between the pair of sub-
systems and , denotes the set of pair subsystems consisting
by tie lines, denotes the real power flows over the tie
line from subsystem to subsystem measured at the end bus
in subsystem , which is indicated by the superscript in ;
and denote the lower and upper security power flow limit of
, respectively. A graphical illustration of , ,
and the tie line real power flows are shown in
Fig. 1. For example, , ,
, , , where
and furthermore,
, ; the tie line real power flows from
subsystem 1 to subsystem 3 are , , , and from subsystem
1 to subsystem 2 are , . We can transform the inequality
constraints (i.e., the security limits) on
the tie line real power flow into equality constraints and simple
inequality constraints as follows:
(2)
1386 IEEE TRANSACTIONS ON POWER SYSTEMS, VOL. 23, NO. 3, AUGUST 2008
formulae for calculating and are described below.
The th diagonal block submatrix of denoted by is given
by [25]
(12)
where (13)
(14)
(15)
(16)
and the matrix in (13)–(16) is defined by the following:
(17)
in which the matrix is an identity matrix with dimensions of
, and is a small positive real number to make
positive definite. Note that in (13)–(16), we do not consider the
constraint . Since is block diagonal, we can decom-
pose (11) into the following:
(18)
where . Clearly, is a
negative definite matrix for every , so is . Con-
sequently, in (10) obtained from solving (18) is an as-
sent direction of at . We can partition into
which can be computed by the following
[25]:
(19)
(20)
in which , , is the optimal solution of the min-
imization problem on the RHS of (8). Thus to compute
using (19) and (20), we need to solve the minimization problem
on the RHS of (8) first as stated in the following. The constraint
set in (9) can be expressed as , where
and
. Though not that trivial, the objective function of the min-
imization problem on the RHS of (8) is separable as illustrated
below. The coupling between subsystems is the last term inside
the big bracket in (8). We define as the subvector of asso-
ciated with the constraint ,
which is part of that in-
volves . Thus , and the last term inside the
big bracket in (8) regarding subsystem can be rewritten as
(21)
The relationship between , , , , and can
be illustrated by the aid of Fig. 2.
In this figure, each boundary bus is associated with the
equality constraint, Lagrange multiplier and the variable;
Fig. 2. Relationship between   ,   ,   ,   , , and .
however, due to space limitation, we only mark necessary
notations. Thus, we have ; ,
where , and ;
, where and ;
, where and
. Therefore, the complicating
variables in (21) is , , which do not belong to
subsystem . However, taking the summation outside the big
bracket in (8), , into account and suitably rearranging
terms, we can rewrite ,
where the term inside the parenthesis is the last term in
(21), as , where denotes
the Lagrange multiplier vector associated with the equality
constraints in subsystem but involving the variables
in subsystem ; for example, in Fig. 2, and
. Therefore, after such rearrangement, the
minimization problem on the RHS of (8) is separable and can
be decomposed into the following independent minimization
subproblems: For
(22)
Once the optimal solution of (22), , is obtained for all
, we can calculate by (19) and (20). Subsequently,
can be solved from (18).
Remark 1: As indicated previously, is an ascent direc-
tion for the dual function at . Thus if the step-size
is determined by the Armijo’s rule [24] or is a small enough
constant, the DPQN method (10) and (18) will converge. Sim-
ilarly, is a descent direction of the objective function
at , which is true because typical
for OPF such as total generation cost or total system losses
is locally convex, thus if the step-size is determined by
the Armijo’s rule [24] or is a small enough constant, the SQP
method (5) and (6) will converge. Since Armijo’s rule is a cen-
tralized step-size determination rule, for the sake of implemen-
tation in distributed computer network, we had better employ
a constant step-size. Based on our extensive simulation experi-
ences, 0.9 is a good choice of small enough constant for both
and .
1388 IEEE TRANSACTIONS ON POWER SYSTEMS, VOL. 23, NO. 3, AUGUST 2008
however at the cost of more evaluation time for each discrete so-
lution. Therefore, if the size of the primitive discrete solution set
is huge, the above evaluation, ranking and selection process can
repeat for more than one stage, such that 1) the employed surro-
gate models will be refined stage by stage, and 2) the set of top
ranked solutions selected in one stage will serve as the candidate
solution set of next stage. In the final stage, the exact model will
be used to evaluate all discrete solutions of the largely trimmed
candidate solution set, and the resulted best discrete solution is
the good enough solution that we seek. Thus, comparing with
the exhaustive search method, in which the exact model is used
to evaluate every discrete solution, the proposed OO strategy is a
process to select a good enough from the enormous using
limited computation time. However, some ranking and selection
are centralized behaviors. Thus, we need to assign the root sub-
system, which is responsible for determining the convergence
of SQP and DPQN methods in Distributed Algorithm I, to carry
out this task. Consequently, our idea to carry out some central-
ized OO concept in a distributed power system is as follows.
Each subsystem will evaluate the estimated performances of
and send the evaluation results to the root subsystem. The
root subsystem will then rank and select a set of top ranked
based on the gathering estimated performances of
sent from all subsystems and send the subvector
of the selected to subsystem . Based on this idea, the
proposed distributed algorithm for solving DOPFD for a good
enough solution consists of three stages as described below.
1) Stage 1: There are two parts in this stage. The first part is
to reduce the size of the primitive candidate solution set, , to
based on the optimal solution of the CDOPF.
To achieve this, replacing the discrete in (1) by its con-
tinuous version and replacing the inequality constraints on
tie line real power flows by the transformed equality and simple
inequality constraints, (2), we obtain a CDOPF shown in the
following:
subject to
(23)
Note that the upper and lower bounds of is represented
by the maximum and minimum values of , respectively,
and these bounded constraints on are included in the
inequality constraints in (23). We define the
functions and
, and denote the
vector functions , and
, . We define
and denote the vector of slack variables , .
Setting , , , and
then we can use the Distributed Algorithm I
to solve the CDOPF, (23). It is worth noting that the optimal
objective value of (1) cannot compete with that of (23), because
the optimal for (1) is only a feasible solution of (23). Since
most of the objective functions considered in the OPF, such as
total generation cost and total system losses, are continuously
differentiable and locally convex, the neighboring discrete
control solutions of the continuous optimal solution, , of (23)
should consist of good enough discrete control solutions of (1).
Thus, we have reduced the size of candidate solution set, ,
to .
However, , for example , is still a very large number.
Thus, the second part of this stage is to further reduce the size
of the candidate solution set from to based on sen-
sitivity analysis, where , a faction of say , is prede-
termined. To achieve this, we proceed as follows. Since some
components of may already be very close to the closest dis-
crete values or the discrete steps of some discrete control vari-
ables are very small such as the transformer tap ratio, we can
fix those components of to their closest discrete values if
the corresponding deviations do not affect the optimal objec-
tive value of the CDOPF significantly. Thus, in the rest of this
stage, we will employ the sensitivity theory [25, Ch. 10, Sec.
10.7, p. 312] to find such components. The sensitivity theory
states that the sensitivity, or the gradient, of with respect to the
value change of the equality constraint function
equals the negative Lagrange multiplier, .
We let and denote the th component of and
, respectively, and define and
, where and denote
the closest discrete value on the right-hand side and left-hand
side of , respectively. The deviation (or )
will cause the value change on and . Then
the deviation of the overall optimal objective value of (23), ,
caused by the deviation (or ), denoted by
(or ) can be calculated based on
the above mentioned sensitivity theory and chain rule by
(24)
Smaller (or ) implies
that (or ) will affect very lightly. We let
and rank based on the values of
such that the smaller the latter, the higher
rank the former. Then, for each of the top ranked ,
we will fix the corresponding discrete control variable
at if or if
.
Now, since each of yet fixed discrete control variables
in subsystem can take two neighboring discrete values, there
are possible in subsystem , and we denote them
by , . Combination of the subsystem’s
results in possible . In other words,
we have possible from the overall system point
of view, thus we have further reduced the size of the candidate
solution set from to .
1390 IEEE TRANSACTIONS ON POWER SYSTEMS, VOL. 23, NO. 3, AUGUST 2008
pairs of , to the root
subsystem.
Step 3 (for root subsystem only) When receiving the pairs
of , from subsystem
for all , the root subsystem will pick the best
from the based on the sensitivity model
as stated in Stage 2. Relabel the picked as ,
and send , to subsystem
for all .
Step 4) Once receiving the subvectors ,
from the root subsystem, start to solve the CDOPFs
using Steps 1–13 of Distributed Algorithm I as stated in
Stage 3. Once the CDOPFs are solved, send the pairs
of , , to the root
subsystem.
Step 5 (for root subsystem only) When receiving the
pairs of , , from all
subsystems , the root subsystem will take the sum
for each , and based on
which pick the best as stated in Stage 3. Relabel the
best as and send to subsystem , for
all .
Step 6) Once receiving the good enough subvector
from the root subsystem, stop the algorithm and output the
solution .
IV. TEST RESULTS
In this section, we will demonstrate 1) the validity of Dis-
tributed Algorithm II by implementing it in a real PC network
and 2) the computational efficiency and the goodness of the
obtained good enough solutions by indirect comparisons with
existing centralized global searching techniques. (To our best
knowledge, there is no method dealing with the DOPFD con-
sidered in this paper so far, indirect comparison is all we can
do.)
We have implemented our Distributed Algorithm II in a
4-PC network to solve the DOPFD of the IEEE 118-bus and
TP 244-bus systems, both of which are arbitrarily partitioned
into four subsystems namely , , , and , , , ,
respectively. Each subsystem is associated with a PC. Some
details regarding number of buses, number of transmission lines
and number of generation buses in each subsystem are shown
in Table I. It should be noted that the values of conductance
of the transmission lines in the TP 244-bus system are much
higher than that of the IEEE 118-bus system on the average.
We consider two types of objective function: the minimum
total real power generation cost
and the minimum system losses , where
denotes the real power generation of generation bus , ,
and are cost coefficients, and denotes the real
power loss on transmission line . The set of pair subsys-
tems consisting of tie lines in the IEEE 118-bus and TP
244-bus systems denoted by and , respectively,
are and
. We
TABLE I
CONTENTS OF THE FOUR SUBSYSTEMS IN THE
IEEE 118-BUS AND TP 244-BUS SYSTEMS
TABLE II
TWO SETS OF DISCRETE CONTROL VARIABLES IN EACH SUBSYSTEM
OF THE IEEE 118-BUS AND TP 244-BUS SYSTEM
TABLE III
FINAL OBJECTIVE VALUE OBTAINED BY AND THE CONSUMED CPU
TIME OF THE DISTRIBUTED ALGORITHM II IMPLEMENTED IN 4-PC
NETWORK, THE CORRESPONDING CENTRALIZED VERSION, THE
CENTRALIZED GA, AND CENTRALIZED TS METHOD IMPLEMENTED
IN SINGLE PC FOR THE EIGHT CASES
assume each switching capacitor is equipped with four capac-
itor banks, and the capacity of a bank is 14 MVAR. We assume
each transformer tap has 32 discrete steps such that each step
is 5/8% of the nominal transformer tap ratio. We consider two
sets of discrete control variables, namely and , in
each system and the number of switching capacitors and trans-
formers in each subsystem for each set are shown in Table II.
The values of of each subsystem can be easily calculated
by adding the number of switching capacitors and transformers
as shown in the fifth row of Table II, and we set for
each subsystem as shown in the last row of Table II.
For each system, each objective function and each discrete
control variable set, we have tested eight cases, which are de-
scribed by three arguments , such that indicates
the test system is the IEEE 118-bus system and 2 the TP 244-bus
system, indicates the objective function is total genera-
tion cost and 2 the total system losses, indicates the first
discrete control variable set and 2 the second discrete control
variable set for the corresponding system as shown in Table II.
These eight cases are shown in the first column of Table III.
We apply Distributed Algorithm II to solve the DOPFD of these
eight cases in the 4-PC network. The four PCs are of the same
1392 IEEE TRANSACTIONS ON POWER SYSTEMS, VOL. 23, NO. 3, AUGUST 2008
Distributed Algorithm II, respectively. On the other hand, using
less than one third of the CPU time, the Distributed Algorithm
II implemented in 4-PC network can obtain the same objective
value as that obtained by the centralized version. These indi-
rect comparisons demonstrate the computational efficiency of
Distributed Algorithm II and the goodness of the obtained good
enough solutions. The feasibility and the goodness of the ob-
tained good enough solutions in all eight cases confirm the ro-
bustness of our algorithm.
V. CONCLUSION
In this paper, we have proposed a distributed algorithm to
deal with DOPFD of large distributed power systems. We use a
4-PC network to implement the proposed distributed algorithm
and apply to the DOPFD on the IEEE 118-bus and TP 244-bus
systems. We have ascertained the robustness of our distributed
algorithm in the aspects of feasibility and goodness of the ob-
tained solution; moreover, the computational speed of our dis-
tributed algorithm is at least three times faster than the central-
ized version in all the test cases when using a 4-PC network.
ACKNOWLEDGMENT
The authors would like to thank the anonymous reviewers
who gave them constructive comments and helpful suggestions
to improve the readability of their paper. The authors also would
like to thank Mr. C.-Z. Lin for his efforts in setting up the PC net-
work, establishing the communication between PCs and typing
this paper.
REFERENCES
[1] B. Stott, J. L. Marinho, and O. Alsac, “Review of linear programming
applied to power system rescheduling,” in Proc. IEEE PICA Conf.,
1979, pp. 142–154.
[2] T. C. Giras and S. N. Talukdar, “Quasi-Newton method for optimal
power flows,” Int. J. Elect. Power Energy Syst., vol. 3, no. 2, pp. 59–64,
Apr. 1981.
[3] R. C. Burchett, H. H. Happ, and D. R. Vierath, “Quadratically conver-
gent optimal power flow,” IEEE Trans. Power App. Syst., vol. PAS-103,
no. 10, pp. 2864–2880, Oct. 1984.
[4] D. I. Sun, I. Hu, G. Lin, C. J. Lin, and C. M. Chen, “Experiences with
implementing optimal power flow for reactive scheduling in the Taiwan
power system,” IEEE Trans. Power Syst., vol. 3, no. 3, pp. 1193–1200,
Aug. 1988.
[5] Y. C. Wu, A. S. Debs, and R. E. Marsten, “A direct nonlinear predictor-
corrector primal-dual interior point algorithm for optimal power flows,”
IEEE Trans. Power Syst., vol. 9, no. 2, pp. 876–883, May 1994.
[6] B. H. Kim and R. Baldick, “Coarse-grained distributed optimal power
flow,” IEEE Trans. Power Syst., vol. 12, no. 2, pp. 932–939, May 1997.
[7] B. H. Kim and R. Baldick, “A comparison of distributed optimal power
flow algorithms,” IEEE Trans. Power Syst., vol. 15, no. 2, pp. 599–604,
May 2000.
[8] D. Hur, J.-K. Park, and B. H. Kim, “Evaluation of convergence rate in
the auxiliary problem principle distributed optimal power flow,” Proc.
Inst. Elect. Eng., Gen., Transm., Distrib., vol. 149, no. 5, pp. 525–532,
Sep. 2002.
[9] D. Hur, J.-K. Park, B. H. Kim, and K.-M. son, “Security constrained
optimal power flow for the evaluation of transmission capability on
korea electric power system,” in Proc. IEEE Power Eng. Soc. Summer
Meeting, 2001, vol. 2, pp. 1133–1138.
[10] F. J. Nogales, F. J. Prieto, and A. J. Conejo, “A decomposition method-
ology applied to the multi-area optimal power flow problem,” Ann.
Oper. Res., vol. 120, no. 1-4, pp. 99–116, Apr. 2003.
[11] S.-S. Lin and H. Chang, “An efficient algorithm for solving BCOP and
implementation,” IEEE Trans. Power Syst., vol. 22, no. 1, pp. 275–284,
Feb. 2007.
[12] H. Chang and S.-S. Lin, “A MPBSG technique based parallel dual-type
method for solving distributed optimal power flow problems,” IEICE
Trans. Fundam. Electron., Commun., Comp. Sci., pp. 260–269, Jan.
2006.
[13] A. Bakirtzis and A. Meliopoulos, “Incorporation of switching opera-
tion in power system corrective control computations,” IEEE Trans.
Power Syst., vol. 2, no. 3, pp. 669–676, Aug. 1987.
[14] A. Monticelli and W. Liu, “Adaptive movement penalty method for the
Newton optimal power flow,” IEEE Trans. Power Syst., vol. 7, no. 1,
pp. 334–340, Feb. 1992.
[15] W. Liu, A. Papalexopoulos, and W. Tinney, “Discrete shunt controls
in a Newton optimal power flow,” IEEE Trans. Power Syst., vol. 7, no.
4, pp. 1509–1520, Nov. 1992.
[16] W. Tinney, J. Bright, K. Demaree, and B. Hughes, “Some deficien-
cies in optimal power flow,” in Proc. IEEE PICA Conf., May 1987, pp.
164–169.
[17] S.-Y. Lin, Y.-C. Ho, and C.-H. Lin, “An ordinal optimization theory
based algorithm for solving the optimal power flow problem with dis-
crete control variables,” IEEE Trans. Power Syst., vol. 19, no. 1, pp.
276–286, Feb. 2004.
[18] L. Chen, H. Suzuki, and K. Katou, “Mean field theory for optimal
power flow,” IEEE Trans. Power Syst., vol. 12, no. 4, pp. 1481–1486,
Nov. 1997.
[19] A. Bakirtzis, P. Biskas, C. Zoumas, and V. Petridis, “Optimal power
flow by enhanced genetic algorithm,” IEEE Trans. Power Syst., vol.
17, no. 2, pp. 229–236, May 2002.
[20] T. Kulworawanichpong and S. Sujitjorn, “Optimal power flow using
tabu search,” IEEE Power Eng. Rev., vol. 22, no. 6, pp. 37–40, Jun.
2002.
[21] J. T. Ma and L. L. Lai, “Evolutionary programming approach to reac-
tive power planning,” Proc. Inst. Elect. Eng., Gen., Transm., Distrib.,
vol. 143, no. 4, pp. 365–370, Jul. 1996.
[22] Y. C. Ho, Soft Optimization for Hard Problem. Cambridge, MA: Har-
vard Univ. Press, 1996, Lecture Notes.
[23] T. W. E. Lau and Y.-C. Ho, “Universal alignment probability, and
subset selection for ordinal optimization,” J. Optim. Theory Appl., vol.
93, no. 3, pp. 455–489, Jun. 1997.
[24] C.-H. Lin and S.-Y. Lin, “A new dual-type method used in solving
optimal power flow problems,” IEEE Trans. Power Syst., vol. 12, no.
4, pp. 1667–1675, Nov. 1997.
[25] D. Luenberger, Linear and Nonlinear Programming, 2nd ed.
Reading, MA: Addison-Wesley, 1984.
[26] S. Sait and H. Youssef, Iterative Computer Algorithms With Applica-
tion in Engineering: Solving Combinatorial Optimization Problems.
Los Alamitos, CA: IEEE Computer Society, 1999.
Ch’i-Hsin Lin was born in Taiwan, R.O.C. He
received the B.S. degree in electrical engineering
from Feng Chia University, Taichung, Taiwan, the
M.S. degree in electrical engineering from National
Tsing Hua University, Hsinchu, Taiwan, and Ph.D.
degree in electrical and control engineering from
Chiao Tung University, Hsinchu, in 1989, 1991, and
1996, respectively.
He joined the Department of Electronic Engi-
neering at the Kao Yuan University, Kaoshiung,
Taiwan, R.O.C., in 1998 and has been a Associate
Professor since 2003. His major research interests include large-scale power
systems and ordinal optimization theory and applications.
Shin-Yeu Lin was born in Taiwan, R.O.C. He
received the B.S. degree in electronics engineering
from National Chiao Tung University, Hsinchu.
Taiwan, R.O.C., the M.S. degree in electrical engi-
neering from University of Texas at El Paso, and the
D.Sc. degree in systems science and mathematics
from Washington University, St. Louis, MO, in 1975,
1979, and 1983, respectively.
From 1984 to 1985, he was with Washington Uni-
versity working first as a Research Associate and then
a Visiting Assistant Professor. From 1985 to 1986, he
was with GTE Laboratory working as a Senior MTS. He joined the Department
of Electrical and Control Engineering at National Chiao Tung University in 1987
and has been a Professor since 1992. His major research interests include op-
timal power flow, ordinal optimization theory and applications, and distributed
computations.
