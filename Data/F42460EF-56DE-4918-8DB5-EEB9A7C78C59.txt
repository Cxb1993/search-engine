中文摘要 
 本計畫針對目前網際網路最熱門的應用-SIP
（Session Initiation Protocol）網路電話，研發網路電
話語音品質測試工具，以便作為網路電話服務供應
商，以及研發人員評估其所建置的網路電話系統。
此工具需要能夠測試目前已佈建之 IPv4 （IP version 
4）、IPv6 （IP version 6），以及 NAT （Network Address 
Translator）等環境。本計畫的主要貢獻在於整合 SIP
與 IPv6 Tunnel信令，來建立 IPv4/IPv6 RTP（Real-time 
Transport Protocol）會議連線，並產生 RTP 測試封
包，來確保實驗的準確性。本計畫之成果可以應用
於測試 IPv4/IPv6網路電話系統，讓網路管理員來檢
驗其網路電話平台之建置成果。本計畫將在宜蘭大
學建立 IPv4/IPv6網路電話環境，並與交通大學互
連。在研發完成後，在上述互連平台中，實地測試
宜蘭大學校園與跨越骨幹網路的網路電話語音品
質。 
 
關鍵詞：網路電話(VoIP)、會談起始協定(SIP)、IPv6、
NAT、RTP。 
Abstract 
 This project develops a Voice over IP (VoIP) quality 
measurement tool for Session Initiation (SIP)-based 
VoIP providers and manufacturers to evaluate their 
networks and systems. This tool should be able to test 
the existing IPv4 （IP version 4）, IPv6 （IP version 
6 ）  and NAT （ Network Address Translator ） 
environments. The major contributions of this project 
are integrating SIP and IPv6 Tunnel signaling to 
establish IPv4/IPv6 RTP （ Real-time Transport 
Protocol）sessions and generating RTP probing packets. 
The results of this project can be applied to evaluate 
the current VoIP deployments in Taiwan such as 
TWAREN and M-Taiwan project. After developing 
the test tool, this project will evaluate the IPv4/IPv6 
environment deployed in National Ilan University 
(NIU) and then measure the VoIP quality between 
NIU and National Chiao Tung University (NCTU) 
through TWAREN/TANet backbone.  
 
Keywords：Voice over IP(VoIP), Session Initiation 
Protocol (SIP)、IP version 6 (IPv6), Network Address 
Translation (NAT), Real-time Transport Protocol 
(RTP). 
1. 計畫背景介紹 
網 路 語 音 品 質 評 估 方 式 可 分 為 主 觀
(Subjective)，與客觀(Objective)兩種。主觀的語音評
估方式使用的標準為 ITU-T P.800 [1]。在受控制的環
境下，讓受測者聽取系統所播放的聲音，或是透過
系統進行交談。於測試結束後，受測者對於受測系
統進行評分，將語音品質區分為 Excellent (5)、Good 
(4)、Fair (3)、Poor (2)，及 Bad (1)等五個等級。受測
者評估分數之平均值即代表待測系統的語音品質。
客觀的語音評估方式可分為兩種方式，一種是分析
過去主觀測試結果，經由迴歸分析將影響語音品質
因素（如封包延遲）量化，計算各種因素的影響後
得到語音品質，目前的標準為 G.107 (E-Model) [2]。
第二種是與經過系統的語音進行比對，分析原本的
語音經過系統後的受損程度，來評估系統之語音品
質，目前的標準為 P.862 (Perceptual Evaluation of 
Speech Quality，簡稱 PESQ) [3]。 
主觀的語音品質評估可以直接統計使用者對於
系統語音品質的滿意程度，但是此一評估方式，需
要建立符合 P.800 標準所規範的測試環境，且測試的
過程相當昂貴而耗時。而客觀的語音品質評估則可
以迅速評估系統的語音品質。其中 E-Model 的評估
方式中，包含網路的延遲的因素，但是 E-Model 中
許多影響語音品質的參數（如：線材損失、空氣中
雜訊等），在一般網路電話系統中不易量測，一般使
用預設值設定這些參數，因而會產生誤差。若待測
系統中存在 E-Model 未支援的語音編解碼器時（如
網際網路常用的 iLBC [4]），便無法使用 E-Model 評
估其語音品質。而 PESQ 則同時考量封包遺失與語音
編解碼器的影響，來評估聲音訊號的受損程度，進
而計算語音品質。不過 PESQ 不會計算封包延遲的因
素，而造成計算出的品質可能與實際狀況不同。因
此本計畫先利用 PESQ，來計算待測系統經語音編碼
與封包遺失後的 MOS 值，然後將 MOS 值輸入
E-model 中計算封包延遲的影響，最後計算出較為準
確的待測網路語音品質。 
目前所佈建的網路電話平台大多以 SIP 為主要
信令，並且分別以網路位址轉換器（Network Address 
Translator，簡稱 NAT [5]），及新一代網際網路通訊
協定（Internet Protocol version 6，簡稱 IPv6 [6]）來
解決 IP 位址不足的問題。本計畫將以測試工具類
型、量測方法、支援信令、是否支援 IPv6 協定，以
及是否支援 IPv6 Tunnel [7][8][9]等項目，來分析現有
網路語音測試工具，是否可應用於現有網路電話系
表一. 網路電話語音量測之商用軟體比較表 
工具名稱 類  型 量測方法 支援信令 IPv6 支援 IPv6 Tunnel 支援 
Abacus2 硬  體 PESQ SIP 不支援 不支援 
SmartVoIPQoS 硬  體 PSQM 不支援 不支援 不支援 
PacketScan 軟  體 PESQ SIP 不支援 不支援 
Agilent VQT 軟  體 PSQM SIP 不支援 不支援 
IxVoice 軟  體 PESQ SIP 支  援 不支援 
 
包遺失樣式  ，並將遺失樣式依序傳給 Speech 
Decoder 進行解碼，解碼後產生劣化品質檔案
（Degraded Files）。Speech Decoder 經由(圖二(9))將
解編碼後的劣化品質檔案存入媒體資料庫中的
Degraded Files 資料表。最後 RTP 處理器由(圖二(4))
回報測試的結果，將產生的劣化品質檔案清單交給
控制器。由控制器呼叫 PESQ 計算語音品質。 
(3) 控制器 
控制器(圖二○a )負責控制 IPv4/IPv6 網路語音測
試模組中的 SIP 代理人(圖二○b )、PESQ (圖二○c )與
RTP 代理人(圖二○d )。控制器接受使用者介面所下達
的指令，並將指令轉換為控制各種元件的指令與參
數。以下詳細介紹各界面的參數。 
介面(1) (圖二 (1)) 為控制器與使用者介面之間的介
面，從使用者介面傳遞五個參數，依序為發話方與
受話方所使用的連線型態 ( 如： Pure IPv6 、
IPv6-in-IPv4 通道、IPv6-in-IPv4 UDP (User Datagram 
Protocol)通道、IPv4)、發話方與受話方使用的 IP 位
址 、 測 試 時 所 使 用 的 語 音 編 解 碼 器
(G.729/iLBC/G.711u)、發話方與受話方的 SIP 識別
碼，以及 SIP 伺服器的位址。控制器經由此介面回傳
最後的結果給使用者介面。 
介面(2) (圖二 (2)) 為控制器與 SIP 代理人之間的介
面。由控制器所傳遞的參數為發話方與受話方的 SIP
識別碼、SIP 伺服器的位址，以及發話方與受話方所
使用的 IP 位址。 
介面(4) (圖二 (4)) 為控制器與 RTP 代理人之間的介
面。由控制器所傳遞的參數包含本次測試封包所使
用的語音編解碼器(如 G.711u)、發話方與受話方的傳
輸位址，及發話方與受話方所使用的連線型態(Pure 
IPv6/IPv6-in-IPv4 通 道 /IPv6-in-IPv4UDP 通 道
/IPv4)。使用 IPv6-in-IPv4 與 IPv6-in-IPv4 UDP 通道
時，控制器會在受話方連線型態的附加參數指定
Tunnel 伺服器的 IPv4 位址以及受話方的 IPv4 位址。 
介面(10) (圖二 (10)) 控制器利用此介面，依序將語
音參考檔案與劣化品質檔案之檔案名稱輸入
PESQ，並獲得回傳的 MOS 值。最後控制器將這次
測試中得到的所有 MOS 值取平均後，輸出至使用者
介面。由使用者介面以 E-model 計算延遲所造成的損
失後，輸出最終的 MOS 值給使用者。 
(4) 媒體前置處理器與媒體資料庫 
媒體前置處理器(圖二○l )與媒體資料庫(圖二
○k )，是兩個緊密合作的元件。媒體前置處理器負責
對參考語音檔案編碼，而媒體資料庫則負責儲存這
些檔案。媒體資料庫擁有三個資料表。Reference Files 
(圖二○h )用來儲存語音參考檔，本系統所使用的語音
參考檔案為 ITU-T P.862 所附的語音參考檔案。
Degraded Files (圖二○i )儲存每次測試後產生的劣化
品質檔，與 Encoded Data (圖二○j )儲存編碼後之語音
參考資料。Reference Files 資料表會記錄每個語音參
考檔案的摘要資料，摘要資料包含每個語音參考檔
案的格式、取樣頻率、取樣資料大小，以及資料表
更新旗標。語音參考檔的格式可以是 raw 檔或是 wav
檔。若格式是 raw 檔，使用者於輸入時必須指定其
取樣頻率，與取樣資料之大小。由於 wav 檔為包含
檔案標頭之語音參考檔案，取樣頻率及取樣資料大
小的資訊則可由標頭內取出。資料更新旗標代表一
個語音參考檔是否為新加入的語音參考檔，當使用
者從使用者介面新增語音參考檔時，Reference Files
資料表摘要資料中會標示此語音參考檔的資料更新
旗標為“dirty＂，代表需要進行編碼。Speech Encoder 
(圖二○m )會根據此其標對語音參考檔案進行編碼。
Speech Encoder 支援的語音編碼器有 G.729、iLBC 與
G.711u。其中 G.711u 的程式碼取自於[15]，iLBC 的
程式碼取自於[4]，G.729 的程式碼取自於[16]。由於
每次測試時如果都要對語音參考檔案進行編碼，會
比較沒有效率，因此媒體前置處理器在系統啟動
時，經由以下步驟，避免每次測試都要對語音參考
檔案進行編碼： 
步驟 1.1  媒 體 前 置 處 理 器 查 詢 媒 體 資 料 庫 
的 Reference Files 資料表，檢查語音參
考檔的摘要資料中的更新旗標。若旗標
為“dirty＂，則媒體前置處理器將從
Reference Files 資料表，取得語音參考
檔，Speech Encoder 根據摘要資料中的
檔案格式、取樣頻率，以及取樣資料大
小，對語音參考檔進行編碼。 
步驟 1.2  Speech Encoder 將編碼後資料存入 Enco 
-ded Data 中。 
步驟 1.3  媒體前置處理器更新語音參考檔的摘要 
資料，將更新旗標標示為“clean＂，代
表該語音參考檔已經過編碼。 
(5) PESQ 
PESQ 使用 P.862 [3]所附的標準程式，控制器藉
由介面(10) (圖二(10))，輸入語音參考檔案與劣化品
質檔案的名稱。PESQ 根據輸入的語音參考檔案與劣
化品質檔案的名稱，分別由介面(11) (圖二(11))與介
面(12) (圖二(12))取得語音參考檔案與劣化品質檔
案，並計算其 MOS 值。以上詳細介紹 VoIP 語音品
質量測之背景，以及提出之 VoIP 語音品質量測系統。 
3. 驗證網路電話語音品質量測之正確性 
驗證方式如下圖三所示。網路電話語音品質量
測管理員來呼叫 VoIP 語音品質量測模組（i.e., VQM 
Agent-1 與 VQM Agent-2）執行 VoIP 語音品質的測
量。兩個模組之間加入網路模擬器（i.e., IPWave）來
模擬網路封包的遺失與延遲。 
 
 
圖三、驗證網路電話語音品質量測之正確性之環境 
 
首先，我們依照網際網路的特性，設定 IPWave
的遺失率為隨機（random）遺失。為了確定要執行
多少次測試的平均值才會穩定，因此對於 G.711u、
G.729、iLBC 等三個編碼各執行多次實驗。隨著測試
次數增加，平均 MOS 值逐漸趨向穩定值，直到測試
次數達 45 次之後，每次得到的平均 MOS 值差異已
我們發現在測試路徑上，最大了的瓶頸出現在
TWAREN 進入交大(TANET)開始，延遲就多了 3-4 
ms。然而此延遲仍比單向延遲的時間 150 ms 小很
多，故未影響語音品質的量測結果。 
5. 結果與討論 
本計畫以宜蘭大學校園網路，以及跨越台灣研
究學術網路骨幹 TWAREN 的環境為例，測試本計畫
所研發之網路電話語音品質量測系統，並驗證系統
之正確性。目前初步完成驗證與測試，未來擬將此
一成果擴散至 TWAREN 骨幹中各個 GigaPop，以便
讓網路電話使用者與骨幹網路管理員能夠得知骨幹
的網路電話語音品質，並能夠協助找出跨越骨幹通
話時語音品質下降的問題點。本計畫之主要成果列
表如下： 
z 海峽兩岸研討會論文已接受(10/16發表) 
z 會議論文被推薦 Journal of Internet Technology
期刊 (SCIE/EI) 
z SIP 論文已刊登於 EURASIP 期刊(SCI) 
z IMPS 與 DRM 兩篇專書論文被接受 
z 會議論文發表於 ACM Mobility Conference (EI) 
z 與國網中心(NCHC)產學合作，應用本計畫之成
果於 TWAREN 平台上 
上述成果如附件所示。 
 
6. 參考文獻 
[1] P.800, Methods for subjective determination of 
transmission quality. ITU-T Recommendation, 
August 1996. 
[2] G.107, The E-model a computational model for 
use in transmission planning. ITU-T 
Recommendation, March 2005. 
[3] P.862, Perceptual evaluation of speech quality 
(PESQ): an objective method for end-to-end 
speech quality assessment of narrow-band 
telephone networks and speech codecs. ITU-T 
Recommendation, February 2001. 
[4] RFC 3951, Internet Low Bit Rate Codec (iLBC). 
S. Andersen and A. Duric and H. Astrom and R. 
Hagen and W. Kleijn and J. Linden, Internet 
Engineering Task Force, December 2004. 
[5] RFC 3022, Traditional IP Network Address 
Translator Traditional NAT. P. Srisuresh and  K. 
Egevang, Internet Engineering Task Force, 
January 2001. 
[6] RFC 2460, Internet Protocol, Version 6 (IPv6) 
Specification.S. Deering and R. Hinden. Internet 
Engineering Task Force, December 1998. 
[7] Draft-vg-ngtrans-tsp-01, Tunnel Setup Protocol 
(TSP): A Control Protocol to Setup IPv6 or IPv4. 
M. Blanchet, Internet Engineering Task Force 
Internet-Draft, December 2002. 
[8] RFC 4380, Teredo: Tunneling IPv6 over UDP 
through Network Address Translations (NATs). C. 
Huitema, Internet Engineering Task Force, 
February 2006. 
[9] Miredo : Teredo IPv6 tunneling for Linux and 
BSD.http://www.remlab.net/miredo/. 
[10] Draft-camarillo-sipping-sbc-funcs-05,Requireme
nts from SIP (Session Initiation Protocol) Session 
Border Control Deployments. G. Camarillo, R. 
Penfield, A. Hawrylyshenm, and M. Bhatia, IETF 
Internet-Draft, October 2006.  
[11] RFC 3550, RTP: A Transport Protocol for 
Real-Time Applications. H. Schulzrinne and S. 
Casner and R. Frederick and V. Jacobson, Internet 
Engineering Task Force, July 2003. 
[12] Y. Amir, C. Danilov, S. Goose, D. Hedqvist, and 
A. Terzis. 1-800-OVERLAYS: using overlay 
networks to improve VoIP quality. Proceedings of 
the international workshop on Network and 
operating systems support for digital audio and 
video, 2005: 51–56. 
[13] S. Khan, S. Duhovnikov, E. Steinbach, M. Sgroi, 
and W. Kellerer. Application-driven cross-layer 
optimization for mobile multimedia 
communication using a common application layer 
quality metric. International Conference On 
Communications And Mobile Computing, 2006: 
213–218. 
[14] L. Ding and RA Goubran. Assessment of effects 
of packet loss on speech quality in VoIP. Haptic, 
Audio and Visual Environments and Their 
Applications, 2003. HAVE 2003. Proceedings. 
The 2nd IEEE International Workshop on, 2003: 
49–54. 
[15] G.191,Software tools for speech and audio coding 
standardization. ITU-T Recommendation, 
September 2005. 
[16] Coding of speech at 8 kbit/s using 
conjugate-structure algebraic-code-excited linear 
prediction (CS-ACELP). ITU-T 
Recommendation G.729, January 2007. 
[17] SIPp. “http://sipp.sourceforge.net/”. 
 
 
 
 
 
 
 
推廣及運用的價值 
本計畫之成果可以應用於測試 IPv4/IPv6 網路電話系統，讓網路管
理員來檢驗其網路電話平台之建置成果。 
※ 1.每項研發成果請填寫一式二份，一份隨成果報告送繳本會，一份送 貴單位
研發成果推廣單位（如技術移轉中心）。 
※ 2.本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。 
※ 3.本表若不敷使用，請自行影印使用。 
2 
 
[6]）來解決 IP 位址不足的問題。本論文以測試工
具類型、量測方法、支援信令、是否支援 IPv6 協定，
以及是否支援 IPv6 Tunnel [7][8][9]等項目，來分析
現有網路語音測試工具，是否可應用於現有網路電
話系統，結果如上頁表一所示。 
從表一的分析中可以看出，大部分的工具採用
PESQ 測試方法。其中 Abacus2 與 SmartVoIPQoS 是
以硬體方式產生測試封包，因此封包傳送時間不會
受軟體作業系統的干擾，而可以得到較為準確的測
試結果。但 SmartVoIPQoS 不支援 SIP 信令，所以
此工具無法測試有網路位址轉換器，或媒體閘道器
（Media Gateway）的環境。在上述測試工具中，只
有 IxVoice 支援 IPv6 測試，而目前所有的工具均尚
未支援 IPv6 Tunnel 的測試。因此上述工具均無法完
整測試 IPv6 網路環境，如 NICI VoIPv6 平台(在台
灣建置的 IPv6 網路電話系統)或未來第三代行動通
訊 IP 多媒體子系統。此外，上述工具通常應用於系
統建置完成時，驗證系統語音品質是否可達建置的
標準，然而這些工具不適合長時間量測並記錄系統
的語音品質。綜上所述，本論文研發一套網路語音
品質測試工具，可以測試已建置 IPv4 與 IPv6 的網
路電話系統，並可提供長時間監控與記錄之功能。 
本論文後續結構安排如下。第二段描述網路電
話語音品質量測平台之設計，分別介紹了平台語量
測代理人之設計。第三段則在實際測試之前，先以
網路模器作為待測網路，驗證本量測平台的正確
性。第四段針對宜蘭大學校園網路，以及台灣學術
實驗網路 TWAREN 等環境進行量測。最後則是結
論、致謝與參考文獻。 
2. 網路電話語音品質量測平台之設計 
VoIP 語 音 品 質 量 測 (VoIP Quality 
Measurement，簡稱 VQM)平台（圖一）主要由語音
品質量測管理員（VQM Manager，圖一○a ）與語音
品質量測代理人（VQM Agent，圖一○b ）兩個元件
所組成，用來評估待測網路（圖一○c ）之語音品質。 
 
圖一、VoIP 語音品質量測平台 
語音品質量測管理員負責控制語音品質量測
代理人執行測試，並將測試記錄收集儲存於資料庫
中，以便後續查詢分析之用。語音品質量測代理人
負責發送測試封包，並將收集之封包傳遞結果利用
PESQ 計算出網路語音品質。語音品質量測代理人
主要有兩個部分，一個是使用者介面（User 
Interface，圖二○1 ），另一個則是語音品質量測之模
組（VQM Module，圖二○2 ）。語音品質量測模組包
括六個元件。控制器(Controller，圖二○a )負責控制
測試流程、SIP 代理人(SIP Agent，圖二○b )負責以
SIP 信令建立 RTP 會議、PESQ(圖二○c )依輸入語音
計算 MOS 值、RTP 代理人(RTP Agent，圖二○d )傳
送與接收 RTP 測試封包、媒體資料庫 (Media 
Database，圖二○k )儲存測試語音資料，以及媒體前
置處理器(Media Preprocessor，圖二○l )提供測試資
料之編碼。各元件詳細說明如下： 
 
圖二、語音品質量測代理人之設計 
(1) SIP 代理人 
目前 VoIP 服務提供者大多使用 SBC (Session 
Border Controller) [10]解決 SIP/RTP 穿越網路位址
轉換器的問題。SBC 藉由 SIP 信令交換，建立 RTP
轉換之對應關係。因此語音品質量測代理人需先產
生 SIP 信令，讓 SBC 建立 RTP 轉換的對應後送出
RTP 封包[11]。否則直接送出 RTP 測試封包給
SBC，會被 SBC 丟棄。SIP 代理人(圖二○b )使用 SIPp 
[17]，SIPp 根據輸入的 XML (eXtensible Markup 
Manguage)檔案，決定其操作的模式為發話方(User 
Agent Client，簡稱 UAC)或是受話方(User Agent 
Server，簡稱 UAS)。XML 檔案中定義其執行的程
式實體(Instance)執行的步驟，以及送出的 SIP 訊息
內容。控制器由介面(2)(圖二(2))傳送本論文所定義
的兩個 XML 檔案以及 SIP 識別碼（Universal 
Resource Identifier，簡稱 URI）到 SIP 代理人，作
為 SIP 代理人的程式啟動參數。SIP 代理人透過介
面(3) (圖二 (3))，以 SIP 作為信令交換之通訊協定。 
(2) RTP 代理人 
RTP 代理人(圖二○d ) 主要包含三個子元件
RTP處理器(RTP Processor，圖二○e )、Speech Decoder 
(圖二○g )，與 Socket Lib(圖二○f )。RTP 處理器接收
控制器傳遞的參數，接著透過 Socket Lib 發送與接
收 RTP 測試封包，測試結束時利用 Socket Lib 取得
測試結果。透過 Speech Decoder，依據取得的測試
結果，將預先編碼的資料(圖二○j )取出後進行解
碼，獲得劣化品質檔案。 
控制器利用介面(4) (圖二(4))傳遞指令與參數
給 RTP 處理器。此時 RTP 處理器已經得知發話方
4 
 
與劣化品質檔案的名稱，分別由介面(11) (圖二(11))
與介面(12) (圖二(12))取得語音參考檔案與劣化品
質檔案，並計算其 MOS 值。以上詳細介紹 VoIP 語
音品質量測之背景，以及提出之 VoIP 語音品質量
測系統。 
3. 驗證網路電話語音品質量測之正確性 
驗證方式如下圖一所示。網路電話語音品質量
測管理員來呼叫 VoIP 語音品質量測模組（i.e., VQM 
Agent-1 與 VQM Agent-2）執行 VoIP 語音品質的測
量。兩個模組之間加入網路模擬器（i.e., IPWave）
來模擬網路封包的遺失與延遲。 
 
 
圖三、驗證網路電話語音品質量測之正確性之環境 
 
首先，我們依照網際網路的特性，設定 IPWave
的遺失率為隨機（random）遺失。為了確定要執行
多少次測試的平均值才會穩定，因此對於 G.711u、
G.729、iLBC 等三個編碼各執行多次實驗。隨著測
試次數增加，平均 MOS 值逐漸趨向穩定值，直到
測試次數達 45 次之後，每次得到的平均 MOS 值
差異已經小於 10-3。且網路模擬器所產生的封包遺
失率，與設定的封包遺失率差異值，在測試 45 次
之後維持在 1% 以下。因此本論文使用測試 45 次
得到的 MOS 值，與其他研究結果進行比較。 
本論文將三種語音編解碼器，在四種不同封包
遺失率環境下的平均 MOS 值，與前人的研究結果
[12] [13] [14] 進行比較，得到表二到表四。由於[13]
的結果中，G.711 在封包遺失率為 5 % 與 10 % 得
到的 MOS 值，比 iLBC 在相同情形下得到的 MOS
值高，不但與一般認知結果不同，也和本實驗及[12]
所做的實驗結果有很大的差異。因此本論文將排除
[13]所做的 G.711 實驗結果。 
 
表二、G.711 之比較結果 
 
表三、G.729 之比較結果 
 
 
表四、iLBC 之比較結果 
 
本論文所測量的三個語音編解碼器在 5% 、10% 、
15%，以及 20%的環境下的 MOS 值，與[12]、[13]
及[14]的差異值大多在 5% 以下。由於網路模擬器
產生的封包遺失率與設定值約有 1%的誤差，且上
述三篇論文的結果，並未說明所使用的語音參考檔
案，也未說明其 MOS 值的計算進行幾次實驗，因
此本論文認為 5%的差異在可以接受的範圍。另外，
為了驗證封包遺失樣式的套用是否正確，本論文取
得[4] 所提供的 iLBC 參考實作，該參考實作包含
iLBC 的語音編解碼器、語音參考檔案、封包遺失
樣式，以及套用封包遺失樣式後的劣化品質檔案。
將該參考實作的語音參考檔案與劣化品質檔案輸
入 PESQ 後得到的 MOS 值，與相同語音參考檔案
及相同的封包遺失樣式的情形下，本系統所計算得
到的 MOS 值做比較。於沒有封包遺失的情形下，
兩者完全相同(3.75)。套用參考實作所附的封包遺失
樣式時，兩者亦得到相同的 MOS 值(3.384)。由上
述的實驗結果，可以驗證語音品質評估模組正確無
誤。 
4. 測試校園與骨幹網路環境之語音品質 
在完成測試平台的驗證之後，我們將此一平台
應用於實際的網路環境中來測試語音品質，以及網
路相關參數。在本篇論文中實地進行了宜蘭大學，
以及宜蘭大學跨過 TWAREN 骨幹網路連結到交通
大學等兩個環境。以下描述實驗環境與測試結果。 
在宜蘭大學的環境中，一個語音品質量測代理
人位於校園無線網路中，透過 IEEE 802.11b 連線至
學校骨幹，另一個語音品質量測代理人則位於一般
校園網路中，透過 IEEE 802.3 100Mbps 乙太網路
(Ethernet) 連線。測試時，由無線網路中的語音品
質量測代理人送出 7883 個封包，由另一端的語音
品質量測代理人接收封包，並計算出語音品質
(MOS)等相關參數送回給發送封包的代理人。以下
是在宜蘭大學校園網路環境測試 100 次結果： 
 
表五、宜蘭大學測試結果 
        測試結果
項目 最小值 最大值 平均值 
PCMU MOS 4.44 4.50 4.44 
Jitter(ms) 0.50 0.53 0.50 
Loss Rate (%) 0.00 0.00 0.00 
Round-trip Delay 
(ms) 0.41 0.54 0.50 
 
6 
 
[12] Y. Amir, C. Danilov, S. Goose, D. Hedqvist, and 
A. Terzis. 1-800-OVERLAYS: using overlay 
networks to improve VoIP quality. Proceedings 
of the international workshop on Network and 
operating systems support for digital audio and 
video, pages 51–56, 2005. 
[13] S. Khan, S. Duhovnikov, E. Steinbach, M. Sgroi, 
and W. Kellerer. Application-driven cross-layer 
optimization for mobile multimedia 
communication using a common application 
layer quality metric. International Conference 
On Communications And Mobile Computing, 
pages 213–218, 2006. 
[14] L. Ding and RA Goubran. Assessment of effects 
of packet loss on speech quality in VoIP. Haptic, 
Audio and Visual Environments and Their 
Applications, 2003. HAVE 2003. Proceedings. 
The 2nd IEEE International Workshop on, pages 
49–54, 2003. 
[15] Software tools for speech and audio coding 
standardization. ITU-T Recommendation G.191, 
September 2005. 
[16] Coding of speech at 8 kbit/s using 
conjugate-structure algebraic-code-excited 
linear prediction (CS-ACELP). ITU-T 
Recommendation G.729, January 2007. 
[17] SIPp. “ttp://sipp.sourceforge.net/”. 
Otherwise, the AAA server forwards the requests to the AAA 
servers based on the host name. After the authentication 
procedure, the user equipments can obtain an IP address from 
Dynamic Host Configuration Protocol (DHCP) server (Figure 
1(9)). Then, the user can access Internet via firewall (Figure 1(11)) 
or SIP applications via the Session Initiation Protocol (SIP) server 
(Figure 1(10)). 
Through WiMAX deployment, we extend the wireless access 
coverage to 90% of NIU campus. However, in the early stage of 
WiMAX deployment, the utilization rate is low since students are 
used to access Internet in their classrooms or may not know that 
they can access Internet outside. To attract more students to use 
WiMAX environments, we develop and deploy some useful and 
interesting SIP applications such as Voice over IP (VoIP), Instant 
Messaging and Presence Service (IMPS) and interactive on-line 
games. These applications are elaborated in the following sections. 
2. II. SIP VOIP APPLICATIONS ON 
WLAN HANDSET/PDA 
 
Like Third Generation Partnership Project (3GPP) IP 
Multimedia Subsystem (IMS),  we adopts Session Initiation 
Protocol (SIP) [4] as the signaling protocol, Real-time Transport 
Protocol (RTP) [3] as the media transport protocol and Internet 
Protocol version 6 (IPv6) [11] as the network protocol to provide 
enough IP addresses. Although the SIP server and the IP routers 
support IPv6, there are few SIP User Agents (i.e., the software or 
the hardware VoIP phones) supporting IPv6 now. To solve this 
problem, we develop a SIP soft-phone (i.e., a software VoIP 
phone) on Microsoft Windows Mobile systems. This soft-phone 
can support both IPv4 and IPv6 communications and be executed 
on Personal Digital Assistant (PDA) and 3G/WLAN handsets. 
The major efforts of the SIP soft-phone development is porting 
oSIP/eXoSIP library version 3.0.0 [13][14] and jRTP library 
version 3.6.0 [15] to Microsoft Windows Mobile systems, and 
upgrading these libraries to support IPv6. Figure 2 demonstrates 
the snapshots of the SIP soft-phone. 
 
  
(a) Main (b) Configuration (c) Log 
Fig. 2. A SIP-IMS VoIP Soft-phone on MS Windows Mobile 
Systems 
 
In the Main page (fig. 2(a)), the soft-phone provides dial-up, 
hang-up and hold functions by using SIP INVITE transaction (e.g., 
INVITE, 180 Ringing, 200 OK and ACK messages), BYE 
transaction (e.g., BYE and 200 OK messages) and a re-INVITE 
message. Note that the Session Description Protocol (SDP) [9] c 
field in the re-INVITE message contains the IP address 0.0.0.0 
(or ::0 for IPv6) represents that the call is held. To initialize the 
soft-phone, a user should input the username, password and the 
identifier of the SIP server (i.e., an IPv4 address, an IPv6 address 
or a fully qualified domain name) in the Configuration page (fig. 
2(b)). The username and password are use for authentication, and 
all outgoing SIP messages are sent to the SIP server first. 
The SIP Universal Resource Identification (URI; e.g., 
sip:7960004@140.113.131.31) is automatically generated by 
combining the username (e.g., 7960004) and the SIP server’s 
identification (e.g., 140.113.131.31). The information of the 
user’s actions (e.g., register successfully) is presented in the Log 
page (fig. 2(c)) for debugging. 
We have G.711, G.726, G.729A and iLBC codecs for the versions 
running on PC or notebook. Due to the computing power 
limitation on PDA and Smartphone, the SIP soft-phone provides 
G.711 codec only. In our experiments, an 802.11b AP only can 
support 6~7 G.711 users. More than 7 users will decrease the 
voice quality. 
3. SIP IMPS SERVICE 
 
IMPS is a hot and popular application in Internet. Many IMPS 
applications such as ICQ, MSN, Skype, Yahoo! Messenger and 
Google Talk are widely deployed and utilized for short-term and 
near real-time communications. With IMPS, students are aware of 
the presence status of their friends and then choose the most 
effective way (e.g., voice or instant message) to communicate. 
Based on Internet Engineering Task Force (IETF) Request for 
Comments (RFC) documents [2][5], we develop an Instant 
Messaging and Presence Service (IMPS) system by using SIP 
MESSAGE, SUBSCRIBE, NOTIFY and PUBLISH methods. 
This system includes an IMPS server and several IMPS clients. 
The IMPS server provides five major functions: 
1. Routing instant messages to correct users; 
2. Caching the status information of users; 
3. Sending buddy list and black list to users; 
4. Filtering messages based on black/watcher list; 
5. Managing the above lists. 
The first function is already supported by a common SIP server 
(e.g., IPtel SIP Express Router (SER) [12]). To implement the rest 
four functions, we add an IMPS module on the SIP server (Fig. 
1(10)). Like SIP soft-phone, we develop the IMPS client based on 
the same libraries (i.e., oSIP and eXoSIP libraries) and integrate 
this client into the SIP soft-phone (Fig. 1(2)). Although the oSIP 
library provide the functions to process SIP transactions for VoIP, 
oSIP does not equip any function to handle the content of 
SUBSCRIBE, NOTIFY and PUBLISH messages. To add the 
IMPS functions into oSIP library, we develop the buddy list based 
on RFC4662 [1] and the black/watcher lists based on RFC3857 
and RFC3858 [6][7]. To provide insert, delete and modify 
functions, we adopt XML Configuration Access Protocol (XCAP) 
[8][10] to manage the lists through Hypertext Transfer Protocol 
(HTTP). The snapshot of the IMPS client is illustrated in figure 3. 
7. REFERENCES 
[1] A. B. Roach, B. Campbell, J. Rosenberg, “A Session 
Initiation Protocol (SIP) Event Notification Extension for 
Resource Lists”, IETF RFC4662, August 2006. 
[2] B. Campbell, Ed., J. Rosenberg, H. Schulzrinne, C. Huitema, 
D. Gurle, “Session Initiation Protocol (SIP) Extension for 
Instant Messaging”, IETF RFC3428, December 2002. 
[3] H. Schulzrinne, S. Casner, R. Frederick, V. Jacobson, “RTP: 
A Transport Protocol for Real-Time Applications”, IETF 
RFC3550, July 2003. 
[4] J. Rosenberg, H. Schulzrinne, G. Camarillo, A. Johnston, J. 
Peterson, R. Sparks, M. Handley, E. Schooler, “SIP: Session 
Initiation Protocol”, IETF RFC3261, June 2002. 
[5] J. Rosenberg, “A Presence Event Package for the Session 
Initiation Protocol (SIP)”, IETF RFC3856, August 2004. 
[6] J. Rosenberg, “A Watcher Information Event Template-
Package for the Session Initiation Protocol (SIP)”, IETF 
RFC3857, August 2004. 
[7] J. Rosenberg, “An Extensible Markup Language (XML) 
Based Format for Watcher Information”, IETF RFC3858, 
August 2004. 
[8] J. Rosenberg, “The Extensible Markup Language (XML) 
Configuration Access Protocol (XCAP)”, IETF RFC4825, 
May 2007. 
[9] M. Handley, V. Jacobson, “SDP: Session Description 
Protocol”, IETF RFC-2327, April 1998. 
[10] M. Isomaki, E. Leppanen, “An Extensible Markup Language 
(XML) Configuration Access Protocol (XCAP) Usage for 
Manipulating Presence Document Contents”, IETF RFC4827, 
May 2007. 
[11] S. Deering, R. Hinden, “Internet Protocol, Version 6 (IPv6) 
Specification”, IETF RFC2460, December 1998. 
[12] iptel SIP Server: SIP Express Router, 
http://www.iptel.org/ser/. 
[13] The eXtended oSIP library, 
http://savannah.nongnu.org/projects/exosip. 
[14] The GNU oSIP library, http://www.gnu.org/software/osip/. 
[15] jRTP library, http://research.edm.uhasselt.be/ 
jori/page/index.php?n=CS.Jrtplib. 
 
 
 
2 EURASIP Journal on Wireless Communications and Networking
(a) Mapping table (a simplified version)
Index
1
2
Private IP address
192.168.0.111
192.168.0.111
Private port
5060
9000
Mapped IP address
140.113.131.88
140.113.131.88
Mapped port
10080
19000
(b) An NAT network configuration
UA1
(192.168.0.111)
NAT
(192.168.0.1/140.113.131.88)
UA2
(140.113.131.102)
Private network Internet
(c) SIP message flow
SIP
SDP
1 Application layer
INVITE sip:ua2@140.113.131.102
Via: SIP/2.0/UDP 192.168.0.111:5060
Contact: <sip:ua1@192.168.0.111:5060>
c = IN IP4 192.168.0.111
m = audio 9000 RTP/AVP 0 8 3 4 18
Net. & trans. layer
Src: 192.168.0.111:5060
Dst: 140.113.131.102:5060
2 Application layer
INVITE sip:ua2@140.113.131.102
Via: SIP/2.0/UDP 192.168.0.111:5060
Contact: <sip:ua1@192.168.0.111:5060>
c = IN IP4 192.168.0.111
m = audio 9000 RTP/AVP 0 8 3 4 18
Net. & trans. layer
Src: 140.113.131.88:10080
Dst: 140.113.131.102:5060
3 Application layer
200 OK
Via: SIP/2.0/UDP 192.168.0.111:5060
; received = 140.113.131.88
Contact: <sip:ua2@140.113.131.102:5060>
c = IN IP4 140.113.131.102
m = audio 9002 RTP/AVP 0 8 3 4 18
Net. & trans. layer
Src: 140.113.131.102:5060
Dst: 140.113.131.88:5060
4 Application layer
[RTP]
Net. & trans. layer
Src: 140.113.131.102:9002
Dst: 192.168.0.111:9000
Figure 1: SIP message flow with standard NAT mechanism.
a packet from UA2 (with the destination IP address/port
140.113.131.88:10080), it retrieves the mapping table to
translate the IP address/port to 192.168.0.111:5060 and
sends the packet to UA1. The above NAT mechanism only
translates the IP information (i.e., the IP address and the port
number) at the network and the transport layers. It does
not translate the IP information carried in the content of an
SIP message. Therefore, the application-layer IP information
is not consistent when the SIP message traverses the NAT.
This issue is further elaborated as follows. Several header
fields in an SIP message contain IP information related to
SIP message delivery. For example,
(i) the Via header field indicates the SIP nodes visited
by an SIP request so far; the reverse direction of the
path should be followed to route the responses for
this request,
(ii) the Contact header field indicates the address where
the other party can send subsequent requests.
Two Session Description Protocol (SDP) fields in the SIP
body provide IP information for media sessions [9].
(i) The IP address for the connection is provided in the
c field.
(ii) The port number for the media information is
provided in the m field.
Figure 1(c) illustrates SIP message delivery between UA1
and UA2 through the standard NAT. Suppose that UA1
sends an SIP INVITE message (Figure 1(1)) to UA2. In this
message, both the Via and the Contact header fields contain
UA1’s IP address 192.168.0.111 and port 5060. For the RTP
media session, 192.168.0.111 and 9000 are recorded in the c
and the m fields, respectively. This message is carried by an IP
4 EURASIP Journal on Wireless Communications and Networking
UA1
(192.168.0.111)
NAT
(192.168.0.1/140.113.131.88)
UA2
(140.113.131.102)
Private network Internet
SIP
SDP
1 Application layer
INVITE sip:ua2@140.113.131.102
Via: SIP/2.0/UDP 140.113.131.88:10080
Contact: <sip:ua1@140.113.131.88:10080>
c = IN IP4 140.113.131.88
m = audio 19000 RTP/AVP 0 8 3 4 18
Net. & trans. layer
Src: 192.168.0.111:5060
Dst: 140.113.131.102:5060
2 Application layer
INVITE sip:ua2@140.113.131.102
Via: SIP/2.0/UDP 140.113.131.88:10080
Contact: <sip:ua1@140.113.131.88:10080>
c = IN IP4 140.113.131.88
m = audio 19000 RTP/AVP 0 8 3 4 18
Net. & trans. layer
Src: 140.113.131.88:10080
Dst: 140.113.131.102:5060
4 Application layer
200 OK
Via: SIP/2.0/UDP 140.113.131.88:10080
Contact: <sip:ua2@140.113.131.102:5060>
c = IN IP4 140.113.131.102
m = audio 9002 RTP/AVP 0 8 3 4 18
Net. & trans. layer
Src: 140.113.131.102:5060
Dst: 192.168.0.111:5060
5 Application layer
ACK sip:ua2@140.113.131.102
Via: SIP/2.0/UDP 140.113.131.88:10080
Contact: <sip:ua1@140.113.131.88:10080>
Net. & trans. layer
Src: 192.168.0.111:5060
Dst: 140.113.131.102:5060
7 Application layer
[RTP]
Net. & trans. layer
Src: 192.168.0.111:9000
Dst: 140.113.131.102:9002
10 Application layer
[RTP]
Net. & trans. layer
Src: 140.113.131.102:9002
Dst: 192.168.0.111:9000
3 Application layer
200 OK
Via: SIP/2.0/UDP 140.113.131.88:10080
Contact: <sip:ua2@140.113.131.102:5060>
c = IN IP4 140.113.131.102
m = audio 9002 RTP/AVP 0 8 3 4 18
Net. & trans. layer
Src: 140.113.131.102:5060
Dst: 140.113.131.88:10080
6 Application layer
ACK sip:ua2@140.113.131.102
Via: SIP/2.0/UDP 140.113.131.88:10080
Contact: <sip:ua1@140.113.131.88:10080>
Net. & trans. layer
Src: 140.113.131.88:10080
Dst: 140.113.131.102:5060
8 Application layer
[RTP]
Net. & trans. layer
Src: 140.113.131.88:19000
Dst: 140.113.131.102:9002
9 Application layer
[RTP]
Net. & trans. layer
Src: 140.113.131.102:9002
Dst: 140.113.131.88:19000
Figure 2: SIP/RTP NAT traversing: the static route solution.
239.255.255.250:1900) to find the NAT (i.e., the home
gateway). M-SEARCH is a method defined by Simple Service
Discovery Protocol (SSDP) for search requests.
Step 2. Upon receipt of the M-SEARCH message, the NAT
returns its private location (i.e., 192.168.0.1:2869) to UA1
by filling the IP address/port in the payload of a unicast
HTTP response (i.e., 200 OK). The IP information is then
used as the destination of the messages sent from UA1 to the
NAT.
Step 3. To retrieve the mapped IP address, UA1 sends
an UPnP GetExternalIPAddress request (an HTTP POST
message) to the NAT.
Step 4. The NAT then replies its public IP address (i.e.,
140.113.131.88) to UA1 through an HTTP 200 OK message.
Step 5. UA1 sends an UPnP NewPortMappingDescription
request (an HTTP POST message) with IP address/ports
“(192.168.0.111:5060) 10080,” indicating the private IP
6 EURASIP Journal on Wireless Communications and Networking
SDP fields (i.e., a = candidate: 1 1 UDP 2130706178
192.168.0.111 9000 typ local and a = candidate: 2 1
UDP 1694498562 140.113.131.88 19000 typ srflx raddr
192.168.0.111 rport 9000). Note that each SDP a field
contains a number (e.g., 2130706178) to identify the priority
for each IP address/port number and a larger number
represents the higher priority. Upon receipt of the INVITE
message, UA2 replies a 200 OK message carrying its IP
address/port number in SDP a field (i.e., a = candidate:
1 1 UDP 2130706178 140.113.131.102 9002 typ local).
After UA1 and UA2 exchange their IP addresses/port
numbers through the oﬀer/answer model, UA1 and UA2
start to perform the connectivity checking through the
ICE mechanism. Specifically, UA1 sends an STUN binding
request message to UA2 by using the source and desti-
nation IP addresses/port numbers 192.168.0.111:9000 and
140.113.131.102:9002. Since the destination IP address/port
number 140.113.131.102:9002 is diﬀerent from that of the
STUN server (i.e., 140.113.131.62:3478), the symmetric NAT
translates the source IP address/port 192.168.0.111:9000
to a new port number 19002 (where the port number
19002 is diﬀerent from the port number 19000 at the
NAT).
Upon receipt of the STUN binding request message, UA2
retrieves the IP address/port number 140.113.131.88:19002
from its network header and the transport header. UA2
replies a STUN binding response message to UA1. At this
time, UA1 completes the connectivity checking for the IP
address/port number of UA2 (i.e., 140.113.131.102:9002).
UA2 also performs the same connectivity checking for the
IP addresses/port numbers of UA1 (i.e., 192.168.0.111:9000,
140.113.131.88:9000, and 140.113.131.88:9002). After the
connectivity checking, UA1 confirms that the IP address/port
number 140.113.131.102:9002 can be used to send the
RTP packets to UA2. Similarly, UA2 confirms that the IP
address/port number 140.113.131.88:9002 can be used to
send the RTP packets to UA1. The above example illustrates
UA1 only equipped with STUN can use the ICE mechanism
to send/receive the RTP packets to/from UA2 through the
symmetric NAT. If an SHA obtains multiple available IP
addresses/port numbers from the connectivity checking, it
will select the IP address/port number with the highest
priority for RTP delivery.
6. SERVER-BASED NAT TRAVERSING SOLUTIONS
Application Layer Gateway (ALG) and Session Border Con-
troller (SBC) are server-based solutions widely used in the
SIP-based VoIP environments.
SIP-ALG typically collocates with the NAT to create the
private-to-public IP information mappings and uses these
mappings to translate the SIP messages, which works as
follows.
When the NAT identifies an SIP message based on the
source/destination port numbers (i.e., 5060) or the ASCII
keyword “SIP/2.0” in the payload [21], it forwards the
message to the SIP-ALG. The SIP-ALG first checks if an IP
information mapping exists in the NAT’s mapping table.
If so, the SIP-ALG translates the SIP Via and the Contact
header fields based on the IP information mapping retrieved
from the mapping table. Otherwise, the SIP-ALG invokes
the NAT to create private-to-public IP information mapping
and then uses it to translate the SIP header fields. If the SIP
messages carrying SDP comes from the private IP network,
the SIP-ALG interacts with the NAT to create IP information
mappings for the RTP sessions and uses the mappings to
translate the SDP c and m fields.
The Session Border Controller (SBC) [17] approach
works as follows. Suppose that UA1 behind an NAT attempts
to establish an RTP session to UA2 in the public IP
network. Instead of establishing one RTP connection, an
SBC located in the public IP network between the NAT
and UA2 sets up two RTP subsessions: the UA1-SBC
subsession and the SBC-UA2 subsession. Suppose that UA1
is assigned the IP address/port number 192.168.0.111:5060
for SIP delivery and 192.168.0.111:9000 for RTP delivery.
UA2 is assigned 140.113.131.102:5060 for SIP delivery and
140.113.131.102:9002 for RTP delivery. The SBC is assigned
the public IP address 140.113.131.7, and the NAT is assigned
a public IP address 140.113.131.88. At the NAT, the pri-
vate IP address/port number for SIP 192.168.0.111:5060 is
mapped to 140.113.131.88:10080. Similarly, the private IP
address/port number for RTP 192.168.0.111:9000 is mapped
to 140.113.131.88:19000. To solve the SIP NAT traversing
issue, UA1 sets the SBC as its outbound SIP proxy before any
SIP message is issued. Therefore, all SIP messages sent from
UA1 to UA2 will arrive at the SBC first.
For the INVITE message from UA1, the SBC finds
that the IP header (i.e., 192.168.0.111) and SIP header
(i.e., 140.113.131.88) are diﬀerent (i.e., the message is sent
from the private IP network). Therefore, the SBC adds the
received parameter 140.113.131.88 and the rport parameter
10080 in the Via header field. These two parameters will
serve as the private-to-public IP information mapping.
The SBC also replaces the private IP address/port number
192.168.0.111:9000 in the SDP c and m fields by the SBC’s
public IP address/port 140.113.131.7:8000 (i.e., port 8000 is
used in the SBC for the SBC-UA2 RTP subsession). Then
the SBC forwards the INVITE message to UA2. UA2 copies
the Via header fields of the INVITE message into a 200 OK
message with SDP (where the c field contains the IP address
140.113.131.102 and the m field contains the port number
9002) and replies this message to UA1 through the SBC.
Upon receipt of the 200 OK message, the SBC translates the
SDP c and m fields by the SBC’s IP address/port number
140.113.131.7:8002 (i.e., port 8002 is used in the SBC for the
UA1-SBC RTP sub-session). Then the SBC forwards the 200
OK message to UA1 according to the received and the rport
parameters. In the summary, the SBC utilizes the received and
the rport parameters to solve the SIP NAT traversing issue.
The RTP traversing issue is resolved by breaking the UA1-
UA2 session into the UA1-SBC subsession and the SBC-UA2
subsession.
7. COMPARISON
This section compares the SIP/RTP NAT traversing solutions
for SIP/RTP in six aspects.
8 EURASIP Journal on Wireless Communications and Networking
NAT traversing solutions, this problem is directly resolved
by standard NAT attack detection mechanisms. However,
without extra authentication, UPnP cannot resolve this issue
because a fake UPnP client can create an IP information
mapping in the NAT (i.e., home gateway) for a legal SHA,
and the packets sent to the public IP address/port of the
mapping are always forwarded to attack the SHA until the
mapping is explicitly deleted by the UPnP client. UPnP
Forum has proposed a solution that has not been widely used
in commercial NATs [22, 23].
Also, secure transport for SIP/RTP is maintained in
the SHA-based solutions. If SIP messages are encrypted,
ALG cannot translate the messages. Similarly, SBC does not
provide secure end-to-end transport. Instead, it provides
secure transport for the two RTP subsessions. Therefore, the
information delivered in the SIP/RTP sessions may be leaked
at the SBC.
We conduct measurements in an experimental envi-
ronment where the SHA (i.e., UA1) in the smart home
environment (i.e., private IP network) connects to the home
gateway (i.e., NAT) through a hub. The other device (i.e.,
UA2), the STUN server, and the SBC reside in the public
IP network (i.e., Internet) and connect to the NAT through
another hub.
Table 1 shows the time complexities of the mechanisms
discussed in this article except for ICE. Since ICE utilizes
the mechanisms described in this paper, the costs for IP
information establishment and RTP latency are the same as
the mechanism utilized in ICE. The call setup latency for ICE
is not a fixed value, which depends on how many IP addresses
and port numbers are checked by ICE.
The table indicates that UPnP has the longest IP informa-
tion mapping time. In terms of SIP setup and RTP delivery,
Static Route, UPnP, and STUN are better than the server-
based solutions.
8. CONCLUSIONS
This article investigated four SHA-based (Static Route, UPnP,
STUN, and ICE) and two server-based (SIP-ALG and SBC)
NAT traversing solutions in smart home environments.
Our study indicates that Static Route requires manual
setting, which is considered ineﬃcient. UPnP automates
Static Route, requires the modification on home gateways,
cannot traverse over multilayer NATs, and is not secure as
the other approaches. STUN also automates Static Route,
requires an extra server, and cannot traverse symmetric
NAT. ICE supports symmetric NAT traversal and automates
selection of NAT traversing mechanisms for RTP sessions
by cooperating with other solutions. Both SIP-ALG and
SBC automate translation of SIP messages without any
modification to SHAs (i.e., SIP UAs). The home gateway
needs to be modified to accommodate the SIP-ALG. The
call setup time and the RTP latency for the server-based
solutions are longer than that for the SHA-based solutions. In
summary, there is no SIP/RTP NAT traversing solution that
is better than others in all aspects. Users/operators should
deploy appropriate NAT traversing solutions based on their
needs.
ACKNOWLEDGMENTS
The work of W.-E. Chen and H.-C. Chao was sponsored in
part by NSC 96-2218-E-197-004, NSC 96-2623-7-259-004-
IT, NTP IMS Project under Grant no. 95-2219-E-009-019,
NCHC Project, and ITRI/NCTU Joint Research Center.
REFERENCES
[1] Y.-J. Lin, H. A. Latchman, L. Minkyu, and S. Katar, “A
power line communication network infrastructure for the
smart home, IEEE Wireless Communications, vol. 9, no. 6, pp.
104111, 2002.
[2] J. Rosenberg, H. Schulzrinne, G. Camarillo, et al., “SIP: session
initiation protocol,” June 2002, RFC 3261, IETF.
[3] P. Belimpasakis, A. Saaranen, and R. Walsh, “Home DNS:
experiences with seamless remote access to home services,” in
Proceedings of the IEEE International Symposium on a World
of Wireless, Mobile and Multimedia Networks (WoWMoM ’07),
pp. 18, Espoo, Finland, June 2007.
[4] T. Okugawa, H. Masutani, and I. Yoda, “A home net-
work service environment for wide-area communications,”
in Proceedings of Asia-Pacific Conference on Communications
(APCC ’05), pp. 1418, Perth, Australia, October 2005.
[5] B.-C. Cheng, H. Chen, and R.-Y. Tseng, “Context-aware
gateway for ubiquitous SIP-based services in smart homes,”
in Proceedings of the International Conference on Hybrid
Information Technology (ICHIT ’06), vol. 2, pp. 374381, Cheju
Island, Korea, November 2006.
[6] Y.-J. Oh, E.-H. Paik, and K.-R. Park, “Design of a SIP-
based real-time visitor communication and door control
architecture using a home gateway,” IEEE Transactions on
Consumer Electronics, vol. 52, no. 4, pp. 12561260, 2006.
[7] I. Han, H.-S. Park, Y.-W. Choi, K.-R. Park, et al., “Four-
way video conference in home server for digital home,”
in Proceedings of 10th IEEE International Symposium on
Consumer Electronics (ISCE ’06), pp. 16, Petersburg, Russia,
July 2006.
[8] P. Srisuresh and M. Holdrege, “IP network address translator
(NAT) terminology and considerations,” August 1999, RFC
2663, IETF.
[9] M. Handley, V. Jacobson, and C. Perkins, “SDP: session
description protocol,” July 2006, RFC 4566, IETF.
[10] Snom VoIP-telephones, “Solutions for NAT traversal in SIP
environment,” http://old.iptel.org/info/products/etc/snom-
stun.pdf.
[11] UPnPTM Forum, http://www.upnp.org/.
[12] J. Rosenberg, R. Mahy, P. Matthews, and D. Wing, “Session
traversal utilities for (NAT) (STUN),” November 2007, draft-
ietf-behave-rfc3489bis-13.
[13] J. Rosenberg, R. Mahy, P. Matthews, and D. Wing, “Traversal
using relays around NAT (TURN): relay extensions to session-
Traversal utilities for NAT (STUN),” November 2007, draft-
ietf-behave-turn-05.
[14] J. Rosenberg, “Interactive interactive connectivity establish-
ment (ICE): a protocol for network addressTranslator (NAT)
traversal for oﬀer/answer protocols,” October 2007, draft-ietf-
mmusic-ice-19.
[15] M. Borella, D. Grabelsky, J. Lo, and K. Taniguchi, “Realm
specific IP: protocol specification,” October 2001, RFC 3103,
IETF.
[16] W.-E. Chen, Y.-B. Lin, and A.-C. Pang, “An IPv4-IPv6
translation mechanism for SIP overlay network in UMTS
EURASIP Journal on Image and Video Processing
Special Issue on
Social Image and Video Content Analysis
Call for Papers
The performance of image and video analysis algorithms
for content understanding has improved considerably over
the last decade and their practical applications are already
appearing in large-scale professional multimedia databases.
However, the emergence and growing popularity of social
networks and Web 2.0 applications, coupled with the ubiq-
uity of aﬀordable media capture, has recently stimulated
huge growth in the amount of personal content available.
This content brings very diﬀerent challenges compared to
professionally authored content: it is unstructured (i.e., it
needs not conform to a generally accepted high-level syntax),
typically complementary sources are available when it is cap-
tured or published, and it features the S¸user-in-the-loopTˇ at
all stages of the content life-cycle (capture, editing, publish-
ing, and sharing). To date, user provided metadata, tagging,
rating and so on are typically used to index content in such
environments. Automated analysis has not been widely de-
ployed yet, as research is needed to adapt existing approaches
to address these new challenges.
Research directions such as multimodal fusion, collabora-
tive computing, using location or acquisition metadata, per-
sonal and social context, tags, and other contextual informa-
tion, are currently being explored in such environments. As
theWeb has become a massive source of multimedia content,
the research community responded by developing automated
methods that collect and organize ground truth collections
of content, vocabularies, and so on, and similar initiatives
are now required for social content. The challenge will be to
demonstrate that suchmethods can provide a more powerful
experience for the user, generate awareness, and pave the way
for innovative future applications.
This issue calls for high quality, original contributions fo-
cusing on image and video analysis in large scale, distributed,
social networking, and web environments. We particularly
welcome papers that explore information fusion, collabora-
tive techniques, or context analysis.
Topics of interest include, but are not limited to:
• Image and video analysis using acquisition, location,
and contextual metadata
• Using collection contextual cues to constrain segmen-
tation and classification
• Fusion of textual, audio, and numeric data in visual
content analysis
• Knowledge-driven analysis and reasoning in social
network environments
• Classification, structuring, and abstraction of large-
scale, heterogeneous visual content
• Multimodal person detection and behavior analysis for
individuals and groups
• Collaborative visual content annotation and ground
truth generation using analysis tools
• User profile modeling in social network environments
and personalized visual search
• Visual content analysis employing social interaction
and community behavior models
• Using folksonomies, tagging, and social navigation for
visual analysis
Authors should follow the EURASIP Journal on Im-
age and Video Processing manuscript format described
at http://www.hindawi.com/journals/ivp/. Prospective au-
thors should submit an electronic copy of their complete
manuscripts through the journal Manuscript Tracking Sys-
tem at http://mts.hindawi.com/, according to the following
timetable:
Manuscript Due June 1, 2008
First Round of Reviews September 1, 2008
Publication Date December 1, 2008
Guest Editors
Yannis Avrithis, National Technical University of Athens,
Athens, Greece; iavr@image.ntua.gr
Yiannis Kompatsiaris, Informatics and Telematics
Institute, Thermi-Thessaloniki, Greece; ikom@iti.gr
Noel O’Connor, Centre for Digital Video Processing,
Dublin City University, Dublin, Ireland;
oconnorn@eeng.dcu.ie
Jan Nesvadba, Philips, Eindhoven, The Netherlands;
jan.nesvadba@philips.com
Hindawi Publishing Corporation
http://www.hindawi.com
EURASIP Journal on Wireless Communications and Networking
Special Issue on
Wireless Physical Layer Security
Call for Papers
Security is a critical issue in multiuser wireless networks in
which secure transmissions are becoming increasingly dif-
ficult to obtain in highly mobile and distributed environ-
ments. In his seminal works of the late 1940s, Shannon for-
malized the concepts of capacity (as a transmission eﬃciency
measure) and equivocation (as a measure of secrecy). To-
gether with Wyner’s fundamental formulation of the wire-
tap channel in the 1970s, this work laid the groundwork for
the area of wireless physical area security. Interest in this area
has exploded in recent years, motivated by the rise of wire-
less networking in general and by the increasing interest in
large mobile networks with light infrastructure, which are
extremely diﬃcult to secure by traditional methods.
The objective of this special issue (whose preparation is
carried out under the auspices of the EC Network of Ex-
cellence in Wireless Communications NEWCOM++) is to
gather recent advances in the area of wireless physical layer
security from the theoretical, such as the analysis of the se-
crecy capacity of various channel models, to more practical
interests such as the development of codes and other com-
munication schemes that can provide security in real net-
works. Suitable topics for this special issue dedicated to phys-
ical layer security include but are not limited to:
• Opportunistic secrecy
• The wiretap channel with feedback
• Authentication over the wiretap channel
• Information theoretic secrecy of fading channels
• Secrecy through public discussion
• Wireless key distribution
• Multiuser channels with secrecy constraints
• MIMO wiretap channels
• Relay-eavesdropper channel
• Scheduling for secure communications
• Secure communication with jamming
• Game theoretic approaches for secrecy
• Codes for secure transmission
• Secure compression
• Cognitive approaches for secrecy
• Physical Secrecy and Common Randomness
• Secrecy with channel uncertainty
Authors should follow the EURASIP Journal on Wireless
Communications and Networking manuscript format de-
scribed at the journal site http://www.hindawi.com/journals/
wcn/. Prospective authors should submit an electronic
copy of their complete manuscript through the journal
Manuscript Tracking System at http://mts.hindawi.com/, ac-
cording to the following timetable.
Manuscript Due October 1, 2008
First Round of Reviews January 1, 2009
Publication Date April 1, 2009
Guest Editors
Mérouane Debbah, Alcatel-Lucent Chair on Flexible
Radio, Supélec, 3 rue Joliot-Curie, 91192 Gif-sur-Yvette
Cedex, France; merouane.debbah@supelec.fr
Hesham El-Gamal, Department of Electrical & Computer
Engineering, Ohio State University, 205 Dreese Labs, 2015
Neil Avenue Columbus, OH 43210, USA;
helgamal@ece.osu.edu
H. Vincent Poor, Department of Electrical Engineering,
Princeton University, Engineering Quadrangle, Olden
Street, Princeton, NJ 08544, USA; poor@princeton.edu
Shlomo Shamai, Department of Electrical Engineering,
Technion, Technion City, Haifa 32000, Israel;
sshlomo@ee.technion.ac.il
Hindawi Publishing Corporation
http://www.hindawi.com
EURASIP Journal on Image and Video Processing
Special Issue on
Patches in Vision
Call for Papers
The smallest primitive employed for describing an image is
the pixel. However, analyzing an image as an ensemble of
patches (i.e., spatially adjacent pixels/descriptors which are
treated collectively as a single primitive), rather than indi-
vidual pixels/descriptors, has some inherent advantages (i.e.,
computation, generalization, context, etc.) for numerous im-
age and video content extraction applications (e.g., match-
ing, correspondence, tracking, rendering, etc.). Common de-
scriptors in literature, other than pixels, have been contours,
shape, flow, and so forth.
Recently, many inroads have been made into novel tasks
in image and video content extraction through the employ-
ment of patch-based representations with machine learning
and pattern recognition techniques. Some of these novel ar-
eas include (but are not limited to):
• Object recognition/detection/tracking
• Event recognition/detection
• Structure from motion/multiview
In this special issue, we are soliciting papers from the im-
age/video processing, computer vision, and pattern recogni-
tion communities that expand and explore the boundaries of
patch representations in image and video content extraction.
Relevant topics to the issue include (but are not limited
to):
• Novel methods for identifying (e.g., SIFT, DoGs, Har-
ris detector) and employing salient patches
• Techniques that explore criteria for deciding the size
and shape of a patch based on image content and the
application
• Approaches that explore the employment of multiple
and/or heterogeneous patch sizes and shapes during
the analysis of an image
• Applications that explore how important relative patch
position is, and whether there are advantages in allow-
ing those patches to move freely or in a constrained
fashion
• Novel methods that explore and extend the concept of
patches to video (e.g. space-time patches/volumes)
• Approaches that draw upon previous work in struc-
tural pattern recognition in order to improve current
patch-based algorithms
• Novel applications that extend the concept of patch-
based analysis to other, hitherto, nonconventional ar-
eas of image and video processing, computer vision,
and pattern recognition
• Novel techniques for estimating dependencies between
patches in the same image (e.g., 3D rotations) to im-
prove matching/correspondence algorithmic perfor-
mance
Authors should follow the EURASIP Journal on Image and
Video Processing manuscript format described at the jour-
nal site http://www.hindawi.com/journals/ivp/. Prospective
authors should submit an electronic copy of their complete
manuscripts through the journal Manuscript Tracking Sys-
tem at http://mts.hindawi.com/, according to the following
timetable:
Manuscript Due May 1, 2008
First Round of Reviews August 1, 2008
Publication Date November 1, 2008
Guest Editors
Simon Lucey, Robotics Institute, Carnegie Mellon
University, Pittsburgh, PA, USA; slucey@ieee.org
Tsuhan Chen, ECE Department, Carnegie Mellon
University, Pittsburgh PA, USA; tsuhan@cmu.edu
Hindawi Publishing Corporation
http://www.hindawi.com
1 
CHAPTER 8 
SERVICE IOT FOR DIGITAL RIGHTS MANAGEMENT (DRM) 
Whai-En Chen1, Ting-Kai Huang2 and Chun-Chieh Wang3 
1Institute of Computer Science and Information Engineering, National I-Lan University 
E-mail: wechen@niu.edu.tw 
2 Department of computer Science, National Chiao Tung University 
1001, Ta Hsueh Road, Hsinchu, Taiwan 310 
E-mail: huangtk.iit95g@nctu.edu.tw 
3Information and Communications Research Laboratories, Industrial Technology 
Research Institute 
195 Chung Hsing Rd., Sec.4 Chu Tung, Hsin Chu, Taiwan 310 
E-mail: wangjj@itri.org.tw 
This chapter describes a conformance and interoperability test tool for Digital 
Rights Management (DRM) developed on an Open Mobile Alliance (OMA) 
service interoperability test platform. DRM is a security (protection) mechanism 
that allows a content issuer to manage the media objects to be delivered to the 
users with copyright protection. In DRM, the users then access DRM Content 
(i.e., the protected media objects) according to the Rights Objects. Before a 
DRM application is launched for a mobile device, it is essential to conduct 
testing to ensure that the DRM mechanism is correctly implemented. Based on 
the Testing and Test Control Notation version 3 (TTCN-3) specifications, we 
show how DRM test cases can be efficiently implemented. 
1. Introduction 
Open Mobile Alliance (OMA) Digital Rights Management (DRM) distributes the 
media objects (e.g., a movie, an MP3 music file, and so on) with secured 
business models that can control the usage of the content and manage the content 
lifecycle [1]. When a user attempts to access the content, he/she may choose a 
free preview version or a complete version with charge.  
Service IOT For Digital Rights Management (DRM) 
 
3 
the key information of DRM Content. The hash value ensures the integrity of 
DRM Content. The key information identifies the encryption method used to 
encrypt the content encryption key (CEK) and contains the Base64-encoded value 
of the encrypted CEK. The permission field (e.g., Figure 2 ②) specifies the 
permissions (e.g., to play the movie) and the constraints (e.g., to play the movie 
two times). The Permission 2 (Figure 2 ○3 ) only specifies the permissions 
without any constraint, which means that the DRM agent is granted unlimited 
display rights. 
 
 
Figure 2. The Rights Object format. 
 
1.2.  NTP-DRMT 
Before a DRM application can be launched for service, it is essential to conduct 
testing to ensure that the DRM mechanism is correctly implemented in a mobile 
device. Although such tests can be done manually, it is more appropriate to 
automatically validate the DRM mechanism through a test tool. Under Taiwan’s 
National Telecommunications Program (NTP), we have developed an OMA 
service interoperability test platform based on the Testing and Test Control 
Notation version 3 (TTCN-3) specifications [9,10,11,12,13,14]. Several OMA 
Push-to-talk over Cellular (PoC) test cases were deployed on this platform [17]. 
In this chapter, we implement a DRM conformance and interoperability test tool 
(called NTP–DRMT) on this platform. NTP-DRMT verifies the adherence to 
normative requirements described in the OMA DRM technical specifications [7, 
8]. The conformance test cases verify whether the DRM agent follows the 
Service IOT For Digital Rights Management (DRM) 
 
5 
The rights issuer verifies the Device Hello message and replies a RI Hello 
message (Figure 4 ④). The RI Hello message provides RI preferences and 
decisions according to the values provided by the DRM agent. The DRM agent 
then sends a Register Request message (Figure 4 ⑤). The rights issuer verifies 
the Register Request message and checks if the session ID, the device nonce, 
the request time and the signature in the Register Request message are correct. 
Then the rights issuer replies a Register Respose message (Figure 4 ⑥). Upon 
the receipt of this message, the registration procedure is complete, and the DRM 
agent can acquire the Rights Object.  
 
Rights Issuer DRM Agent
ROAP Trigger
     HTTP_GET 
Device Hello
RI Hello
Register Request
Register Response
1
3
2
6
5
4
  
Figure 4. The test case for DRM registration procedure. 
 
In the remainder of this chapter, we will describe the design and 
implementation of NTP-DRMT. Then we use examples to show how the DRM 
test cases are developed in this test tool. 
2. TTCN-3 Based Test System 
The test system NTP-DRMT is implemented based on TTCN-3. This system 
manages DRM test execution, interprets/executes compiled TTCN-3 code, and 
implements proper communications with the SUT. As illustrated in Figure 5, 
NTP-DRMT consists of the following parts.  
 
Service IOT For Digital Rights Management (DRM) 
 
7 
DRM test execution, the TM invokes the DRM modules (e.g., tc_ConRoap 
module which will be described in Figure 7) to propagate the module parameters 
and/or extra testing information to the TE. 
 
 
Figure 6. Graphical test log for DRM registration. 
 
The TL is responsible for maintaining the test log, such as the logging 
information about test component creation, start and termination, and data 
delivery to/from the SUT. The logging requests to the TL are posted externally 
Service IOT For Digital Rights Management (DRM) 
 
9 
tc_ConRdr module
REL/DCF Related Conformance Test Cases
tc_ConRoap module
ROAP Related Conformance Test Cases
tc_IntSlt module
Silent Header Test Cases
tc_IntDmn module
Domain Test Cases
tc_IntPvw module
Preview Test Cases
tc_IntCst module
Constraint Model Test Cases
tc_IntPrm module
Permission Model Test Cases
tc_IntMro module
Multiple Rights Object For Single DCF Test Cases
tc_IntDro module
Device Rights Object Included In DCF  Test Cases
tc_IntRoap module
ROAP Test Cases
DRM_Main
Conformance
Interoperability
 
Figure 7. The structure of the DRM ETS. 
2.3.  DRM SUT Adapter (SA) 
The SA adapts the communications between the TE and the SUT. The SA 
interacts with the TE through the TRI. Specifically, to correctly deliver HTTP 
and ROAP messages to and from the SUT, the TE calls the TRI functions that 
associate the test component ports to the TSI port and invokes the ECDs (Figure 
8 ○1  and ○2 ) for the message encoding/decoding. The test component ports, 
pt_http (Figure 8 ○3 ) and pt_roap (Figure 8 ○4 ), are mapped to the HTTP socket 
(Figure 8 ○5 ) in the SA. The SA binds the socket to the TSI port 8080 for the 
interaction with the SUT. 
 
Service IOT For Digital Rights Management (DRM) 
 
11 
3.1.  The TTCN-3 Control Interface (TCI) for DRM 
The TCI between the TE and the TMC has three sub-interfaces: the Test 
Management Interface (TCI-TM), the Test Logging Interface (TCI-TL) and the 
Coding/Decoding Interface (TCI-CD). The TCI-TM supports the operations for 
controlling the test execution and providing the module parameters. The TCI-TM 
program segment in Figure 9 illustrates some DRM module parameters. Line 1 of 
Figure 9 assigns the TSI port HTTP_PORT with the value 8080. Line 2 assigns 
the test system Uniform Resource Locator (URL). Line 3 assigns the maximum 
waiting time between a sent message and a received message (e.g., the ROAP 
Trigger and the Device Hello messages) with the value 30.0 (seconds). 
 
 
Figure 9. An example of DRM module parameter. 
 
The extension function (Figure 9 ○4 ―○6 ) displays the descriptions of the 
parameters to the tester and reminds the tester that these parameters can be 
changed. If the parameters are modified, the updated parameters are provided to 
the test system as the module parameters through the TCI-TM. 
The TCI-TL includes the operations for retrieving the information about the 
test execution. Figure 10 illustrates a TCI-TL program segment that checks 
whether the signature is correct and logs the error if the signature is incorrect in 
the received ROAP message. In Figure 10 ○1 , NTP-DRMT checks if the 
signature in the received message is correct. If yes, NTP-DRMT replies a 
group SysParameters { 
modulepar { 
○1  integer  HTTP_PORT  := 8080; 
○2  charstring  DRMURL  :="http://localhost:8080"; 
○3  float  DRM_SYS_WAIT  := 30.0; 
} 
with { 
○4  extension (HTTP _PORT)        
"Description: Specify the port number of HTTP protocol"; 
○5  extension (DRMURL)           
"Description: The test system URL."; 
○6  extension (DRM_SYS_WAIT)     
"Description: Maximum time between a sent message and a received message."; 
} 
} 
Service IOT For Digital Rights Management (DRM) 
 
13 
 
The DRM decode operation invoked by the TE decodes a message according 
to the decoding rules and returns a TTCN-3 value. Parts of the program are listed 
as follows. Figure 12 ○1  and ○2  decode the message as an HTTP or a ROAP 
message according to the message type. For example, in Figure 12 ○1 , the HTTP 
message decodes into a structured TTCN-3 value. Figure 12 1.2  sets the 
“msgType” to HTTP_GET, and Figure 12  retrieves the Uniform Resource 
Identifier (URI). 
 
Figure 12. DRM decode operation. 
3.2.  The TTCN-3 Runtime Interface (TRI) for DRM 
The TRI supports the communication of the ETS with the SUT [13]. This 
interface is implemented in the SA to initialize the TSI and establish connections 
to the SUT. The TRI is implemented in a JAVA program 
DRM_TestAdapter.java consisting of the connection and the 
communication operations shown in Figure 13. 
public Value decode(TriMessage message, Type decodingHypothesis) { 
○1     if(decodingHypothesis.getName().equals(“HttpMsg”)){ 
        RecordValue ret = (RecordValue)decodingHypothesis.newInstance(); 
1.2         Decode.Enumerated(ret, "msgType","HTTP_GET"); 
1.3         Decode.Charstring(ret, "uri", new String(message.getEncodedMessage())); 
        return ret; 
} 
○2     else if(decodingHypothesis.getName().equals(“RoapMsg”)) { 
…. // ROAP message decoding 
       } 
return null; 
} 
Service IOT For Digital Rights Management (DRM) 
 
15 
mapped/unmapped to the TSI port. An example is the triMap function (Figure 
13 ○1 ) called by the TE when the TE executes the map operation (Figure 14 ○1 ). 
This operation instructs the SA to establish a dynamic connection to the SUT. 
The TRI also supports the communication operations which are used to 
exchange messages with the SUT. The communication operations include the 
enqueue and the send operations. An example is the triEnqueueMsg 
function (Figure 13 ○2 ) called by the SA after the SA has received a message 
from the SUT. This operation passes the message to the test component port of 
the TE. Note that the test component port has been mapped to the TSI port 
beforehand. Another example is the triSend function (Figure 13 ○4 ) called by 
the TE when the TE executes the send operation (Figure 16 ○4 ). This operation 
instructs the SA to send a message to the SUT. For DRM testing, two types of the 
messages are sent by the triSend function: RoapMsg for ROAP and HttpMsg 
for HTTP.  
4. A DRM Conformance Test Scenario 
We use a conformance test case “missing State in RI Hello processing” to show 
how the DRM test suites are implemented. This test case verifies if the SUT 
correctly handles an incorrect RI Hello message without “Status" in the DRM 
registration procedure. The “Status” is used to indicate if the preceding request 
was successfully or not. If the SUT receives this message, it should display an 
error message and terminate the connection. 
The conformance test case is implemented by a Finite State Machine (FSM). 
Figure 14 shows the state diagram of the DRM conformance test case “missing 
State in RI Hello processing”.  
z At State 1 (Waiting for HTTP_GET), if the HTTP_GET message is 
received from the SUT, the TE sends a ROAP Trigger message to the SUT 
and changes the FSM to State 2 (Waiting for Device Hello). If any ROAP 
message is received at this state, the TE sets the verdict to “fail” and stops 
the FSM at State 4 (Test Fail). If the timer expires and the TE does not 
receive any message, the TE sets the verdict to “inconc” and stops the FSM 
at State 3 (Test Inconclusive). 
z At State 2, if the Device Hello message sent from the SUT is correct, then 
the TE sends an incorrect RI Hello message to the SUT and changes the 
FSM to State 5 (Waiting for Tester Post Result). If an HTTP_GET 
message is received at this state, the TE resends the ROAP Trigger 
message and waits for the Device Hello message. If an incorrect Device 
Hello message is received at this state, the TE sets the verdict to “fail” and 
Service IOT For Digital Rights Management (DRM) 
 
17 
f_DRM_2_con_5_a_reg function (Figure 15 ○4 ) to check whether the 
received messages from the SUT are correct.  
 
Figure 15. DRM conformance test case “missing State in RI Hello processing”. 
 
In the f_DRM_2_con_5_a_rcvMsg function, the t_tMsg timer starts at 
the PA (Figure 16 ○1 ), and the FSM is initialized to wait at State 1. When an 
HTTP_GET message from the SUT is received, the pt_http.receive 
function is executed (Figure 16 ○2 ), the TE invokes the decode operation in 
Figure 12. After the message is decoded, the TE stops the t_tMsg timer at the 
PA (Figure 16 ○3 ) and invokes f_sndRegTrig function (Figure 16 ○4 ) to 
send a ROAP Trigger to the SUT. Then the TE goes to execute Figure 16 ○7 , 
and the FSM is moved to State 2. If a ROAP message is received (Figure 16 ○5 ), 
testcase DRM_2_con_5_a() runs on DrmComp system DrmComp{ 
○1     map(mtc:pt_http, system:pt_http); 
map(mtc:pt_roap, system:pt_ http); 
○2     f_action("Missing Status attribute in ROAP Response (RI Hello processing) !  
Please send a HTTP message ");   
○3     v_sysWait := DRM_SYS_WAIT; 
○4     result:= f_DRM_2_con_5_a_ rcvMsg (); 
 
○5     if (result.rc = SC_FAIL) { 
 setverdict(fail); 
}  
○6     else if (result.rc = SC_TIME_OUT) { 
 setverdict(inconc); 
} 
else { 
○7  if(DRMConfirmBox("DRM Device receive RI Hello response without status !!!")){ 
  setverdict(pass); 
 } 
 else{ 
  setverdict(fail); 
 }     
} 
○8     unmap(mtc:pt_http, system:pt_http); 
unmap(mtc:pt_roap, system:pt_ http); 
} 
Service IOT For Digital Rights Management (DRM) 
 
19 
Figure 16. The f_DRM_2_con_5_a_rcvMsg function. 
 
If the HTTP_GET message is received (Figure 16 ○8  and Figure 14 State 2), 
then the TE resends the ROAP Trigger to the SUT. If the TE receives a Device 
Hello message (Figure 16 ○9 ), then the TE checks whether the header in the 
Device Hello message contains the DRM feature-tag “devhello version” (Figure 
16 ○10 ). If the check of the message is failed, the f_DRM_2_con_5_a_rcvMsg 
function returns SC_FAIL to indicate the failure and the FSM is moved to State 4. 
If the received Device Hello message is correct, then the TE sends an incorrect 
RI Hello message (without “Status") to the SUT and the FSM is moved to State 
5. If the t_tMsg timer expires, the f_DRM_2_con_5_a_rcvMsg function 
returns SC_TIME_OUT (Figure 16 ○11 ) and the FSM is moved to State 3.  
Finally, if the f_DRM_2_con_5_a_rcvMsg function returns SC_FAIL or 
SC_TIME_OUT, the TE sets the verdict to “fail” or “inconc” (Figure 15 ○5  and 
○6 ). Otherwise, the TE pops up a confirm box (Figure 15 ○7 ) to notify the tester 
to check whether the result displayed by the SUT is correct and waits for the 
tester’s report (Figure 14 State 5). Then the TE sets the verdict to “pass” (the 
FSM is moved to State 6) or “fail” (the FSM is moved to State 4) according to 
the tester’s report. After the verdict is set, the TE removes the bindings between 
the test component ports and the TSI port (Figure 15 ○8 ) using the triUnmap 
operation. 
5. Conclusions 
This chapter described the architecture and the operations of NTP-DRMT which 
is a DRM test system developed based on the TTCN-3 specifications. This 
system has been jointly developed by the National Telecommunications Program 
     f_DRM_2_con_5_a_sndRiHello(); 
     ret.rc:=SC_SUCCESS; 
     return ret; 
 }  
○11  []t_tMsg.timeout{ 
     log("timeout and nothing received"); 
     ret.rc:=SC_TIME_OUT; 
     return ret; 
 } 
} 
} 
Service IOT For Digital Rights Management (DRM) 
 
21 
Reference   
1. Open Mobile Alliance, "DRM Specification", OMA-TS-DRM-DRM-V2_0- 2006 0303-A, 
2006. 
2. Open Mobile Alliance, "DRM Architecture", OMA-AD-DRM-V2_0-20060303-A, 2006. 
3. Open Mobile Alliance, "DRM Content Format", OMA-TS-DRM-DCF-V2_0-20060303-A, 
2006. 
4. Open Mobile Alliance, "DRM Rights Expression Language", OMA-TS-DRM-REL-V2_0-
20060303-A, 2006. 
5. Open Mobile Alliance, "OMA DRM Requirements", OMA-RD-DRM-V2_0-20060303-A, 
2006. 
6. Open Mobile Alliance, "Enabler Release Definition for DRM V2.0", OMA-ERELD-DRM-
V2_0-20060303-A, 2006. 
7. Open Mobile Alliance, "Enabler Test Specification (Conformance) for DRM- V2_0", OMA-
ETS-DRM_ CON_Test_Client-V2_0-20060615-C, 2006. 
8. Open Mobile Alliance, "Enabler Test Specification for DRM Interoperability", OMA-ETS-
DRM-INT- V2_0-20060704-C, 2006. 
9. ETSI, "Methods for Testing and Specification (MTS); The Testing and Test Control Notation 
version 3; Part 1: TTCN-3 Core Language", ETSI ES 201 873-1, V3.1.1, 2005. 
10. ETSI, " Methods for Testing and Specification (MTS); The Testing and Test Control Notation 
version 3; Part 2: TTCN-3 Tabular presentation Format (TFT)", ETSI ES 201 873-2 V3.1.1, 
2005. 
11. ETSI, " Methods for Testing and Specification (MTS); The Testing and Test Control Notation 
version 3; Part 3: TTCN-3 Graphical presentation Format (GFT)", ETSI ES 201 873-3 V3.1.1, 
2005. 
12. ETSI, " Methods for Testing and Specification (MTS); The Testing and Test Control Notation 
version 3; Part 4: TTCN-3 Operational Semantics", ETSI ES 201 873-4 V3.1.1, 2005. 
13. ETSI, "Methods for Testing and Specification (MTS); The Testing and Test Control Notation 
version 3; Part 5: TTCN-3 Runtime Interface (TRI)", ETSI ES 201 873-5 V3.1.1, 2005. 
14. ETSI, "Methods for Testing and Specification (MTS); The Testing and Test Control Notation 
version 3; Part 6: TTCN-3 Control Interface (TCI )", ETSI ES 201 873-6, V3.1.1, 2005. 
15. ETSI, " Methods for Testing and Specification (MTS); The Testing and Test Control Notation 
version 3; Part 7: Using ASN.1 with TTCN-3", ETSI ES 201 873-7 V3.1.1, 2005. 
16. Lin, Y.-B., Liang, C.-F., Chen, K.-H., Liao, H.-Y. "NTP-SIOT: A Test Tool for Advanced 
Mobile Services", IEEE Network. November/December 2006, pp. 2–7. 
17. Lin, Y.-B., Wang, C.C., Lu, C.H., Hsu, M.R. "NTP-PoCT: A Conformance Test Tool for 
Push-to-talk over Cellular Network", Wireless Communications and Mobile Computing. John 
Wiley & Sons, 2007. 
18. Anritsu Corporation, MD8470A Signaling Tester Product Introduction, http:// 
www.us.anritsu.com/products/ ARO/North/Eng/showProd.aspx?ID=659. 
Service IOT For Digital Rights Management (DRM) 
 
23 
DRM-2.0-con-60 Install Domain RO; Invalid Signature 
DRM-2.0-con-61 Install Domain RO; Missing Domain ID 
DRM-2.0-con-62 Install Domain RO; Invalid Domain Generation 
DRM-2.0-con-63 Install Domain RO; Device not in the domain 
DRM-2.0-con-64 Install Domain RO; Missing MAC. 
DRM-2.0-con-65 Install Domain RO; Invalid MAC. 
DRM-2.0-con-66 Install Domain RO; RI Context Expired 
DRM-2.0-con-67 Replay protection – Stateful RO with RITS; Future RITS 
DRM-2.0-con-68 Replay protection – Stateful RO with RITS; In Replay cache 
DRM-2.0-con-69 Replay protection – Stateful RO with RITS; Early RITS 
DRM-2.0-con-70 Replay protection – Stateful RO without RITS; In Replay cache 
DRM-2.0-con-71 Parent Rights object; Invalid Rights issuer 
DRM-2.0-con-72 Nonce generation on Device without system shutdown 
DRM-2.0-con-73 Nonce generation on Device with system shutdown 
DRM-2.0-con-74 Wrong permissions for an image object 
DRM-2.0-con-75 Wrong permissions for a sound object 
DRM-2.0-con-76 Wrong permissions for an application object 
DRM-2.0-con-77 Unknown permissions 
DRM-2.0-con-78 Export permissions ("move") for DCFs with stateless rights object 
DRM-2.0-con-79 Export permissions ("copy") for DCFs with stateless rights object 
DRM-2.0-con-80 Export permissions ("move") for DCFs with stateful rights object 
DRM-2.0-con-81 Export permissions ("copy") for DCFs with stateful rights object 
DRM-2.0-con-82 Export permissions not present for DCF 
DRM-2.0-con-83 Instant Preview 
DRM-2.0-con-85 Erroneous Count constraint 
DRM-2.0-con-86 Erroneous Timed-Count constraint 
DRM-2.0-con-87 Erroneous Datetime constraint 
DRM-2.0-con-88 Erroneous Interval constraint 
DRM-2.0-con-89 Erroneous Accumulated constraint 
The Interoperability test cases 
Test case ID Test case description 
DRM-2.0-int-1 To test “Forward Lock” DRM 1.0 functionality. 
DRM-2.0-int-2 To test DRM 1.0 “Combined Delivery” functionality 
DRM-2.0-int-3 To test DRM 1.0 “Separate Delivery” functionality  
DRM-2.0-int-4 To test RO Registration and RO Acquisition 
DRM-2.0-int-5 To test RO Registration with existing RI Context 
DRM-2.0-int-6 To test RO Acquisition without existing RI Context  
DRM-2.0-int-7 To test 1-pass RO Acquisition with existing RI Context  
DRM-2.0-int-8 To test 1-pass RO Acquisition without existing RI Context 
DRM-2.0-int-10 To test a situation where an RO is included in the DCF 
DRM-2.0-int-11 To test behavior in the presence of a group RO for multiple DCFs, using the Group ID mechanism 
DRM-2.0-int-12 To test behavior in the presence of an individual RO for a content item which has a Group ID 
DRM-2.0-int-13 To test behavior in the presence of several rights objects for one piece of content 
DRM-2.0-int-14 To test behavior in the presence of several rights objects for one piece of content 
DRM-2.0-int-15 To test DRM Agent’s capability to process Multipart DCFs from the RI 
1 
Instant Messaging and Presence Service (IMPS) 
Whai-En Chen 
Institute of Computer Science and Information Engineering 
National Ilan University 
1, Sec. 1, Shen-Lung Road, I-Lan, 260, Taiwan, R.O.C 
TEL: +886-3-9357400#340 
FAX: +886-3-9353804 
Email: wechen@niu.edu.tw 
 
 
Abstract 
IMPS (Instant Messaging and Presence Service) is one of the most important services in 3GPP 
(3rd Generation Partnership Project) IMS (IP Multimedia Subsystem). 3GPP adopts the SIP 
(Session Initiation Protocol) extensions proposed by IETF (Internet Engineering Task Force) 
SIMPLE (SIP for Instant Messaging and Presence Leveraging Extensions) working group as the 
signaling protocol for IMPS. This chapter utilizes examples to introduce the SIP extensions for 
instant messaging and presence service. Then, this chapter elaborates the architecture and 
message flow of the presence service in IMS. Finally, this chapter discusses the issues and the 
existing solutions of IMPS.  
Keywords: 3GPP, IETF, IMPS, IMS, SIMPLE, SIP 
3 
2. Instant Message (IM)  
An Instant Message (IM) is transferred by using SIP MESSAGE method, which is a SIP 
extension defined in IETF RFC3428 [17]. Unlike Voice over IP (VoIP), an instant message 
stands along and thus does not require negotiating the IP addresses or port numbers for the 
subsequent media sessions. Instead, instant messages are directly sent out to the destinations 
through IM servers. Upon receipt of a MESSAGE request, a SIP UA (User Agent) will reply a 
200 OK or a 202 Accepted response, which indicates that the SIP UA has received the SIP 
request message. In other words, this 200 OK or 202 Accepted message does not indicate that 
the user has seen this MESSAGE request since the user may be away from the computer (i.e., 
SIP UA). 
A MESSAGE request must contain the Content-Type and the Content-Length header fields to 
identify the type and length of the message body but does not contain the Contact header field. In 
addition, the format of message body could be text-based format or Multipurpose Internet Mail 
Extensions (MIME) format. The message flow for IM transferring is illustrated in Figure 1. 
 
Figure 1. An Example for Instant Message Delivery 
There are two SIP UAs (UA1 and UA2) and a SIP server in Figure 1. The SIP URI (Universal 
Resource identifier) and the domain name for UA1 are “user1@domain.com” and 
5 
08 Content-Type: text/plain 
09 Content-Length: 17 
10 
11 Joe. How are you? 
Figure 2. An Example of SIP MESSAGE Message. 
The Request-URI (i.e., user2@domain.com) in the start line identifies the SIP URI of the 
recipient (i.e., UA2). To receive the response sent from UA2, UA1 adds its domain name (i.e., 
the contact address) in a Via header field. The Max-Forwards header field limits the maximum 
hops (i.e., 70 hops) that this message can be relayed to the recipient. The From and the To header 
fields present the SIP URIs of the transmitter and the recipient, respectively. The CSeq header 
field identifies the order of the transaction (i.e., MESSAGE 1).The Content-Type header field 
indicates this message is a plain-text message, and the message length (i.e., 17) is specified in the 
Content-Length header field. The SIP header fields and the SIP message body are separated by 
CRLF. The last line “Joe. How are you?” is the content of this instant message. 
Generally, instant messages are used to exchange information among a specific group of users. 
Unlike the usage of email, instant messages are usually delivered in near real time and many 
instant message applications are coupled with presence services. IM users are aware of the states 
(i.e., on-line or off-line) of their friends and send instant messages to the on-line friends. The 
detail information of Presence Service (PS) is elaborated in the next section. 
 
 
 
 
7 
 
When a user logins the presence service, an initial PUBLISH message is sent to the PS 
(Presence Service) server to create a soft-state publication [10]. This PUBLISH message 
contains the Presence Information Data Format (PIDF) message body to describe the event state 
and an Expires header field to identify the suggested lifetime of event state. The PS server may 
decrease or accept the lifetime value and reply the confirmed value to the PS user agent through 
a 200 OK message. Before the value of the Expires header field specified in the 200 OK 
message is expired, the UA should re-transmit a PUBLISH message to maintain the event state 
in the PS server. Otherwise, the event state will be deleted by the PS server after the lifetime is 
expired. 
The PUBLISH message for refreshing the event state must include a SIP-If-Match header field 
to specify that which entity of the user should be updated. To save the network resource, the 
PUBLISH message for refreshing may contain an Expires header field but does not contain the 
message body. Like refreshing, the PUBLISH message for modifying the event state contains a 
SIP-If-Match header field. Unlike refreshing, this PUBLISH message includes the message body 
to update the event state. Before the user logs out the presence service, the PS user agent should 
send a PUBLISH message with the SIP-If-Match and the Expires header fields to remove the 
event state. In this message, the value of Expires header field is 0 indicating that the event state 
should be removed. Similar to the PUBLISH message for refreshing, this PUBLISH does not 
include a message body.  
Upon receipt of a PUBLISH message, the PS server replies a 200 OK message to the UA. The 
200 OK message contains the Expires header field to confirm the lifetime of the event state and a 
SIP-Etag header field. The PIDF format defined in RFC3863 [13] includes basic status (i.e., 
9 
shown in Figure 3, the <status> element is followed by an optional <contact> element, an 
optional <note> element and an optional <timestamp> element. The root of an 
“application/pidf+xml” object is a <presence> element (line 02) associated with the presence 
information namespace. The <presence> element must include an entity attribute. This attribute 
identifies the URL (Universal Resource Locator) of the presentity that publishes this message. 
The <tuple> element contains a unique identifier (i.e., the id attribute) to distinguish different 
<tuple> elements in the same <presence> element. The <status> element is a child element of the 
<tuple> element. Within the <status> element, a <basic> element contains the string “open”, 
which means that the presentity is available for receiving instant messages. On the contrary, if 
the string is “closed”, the presentity may not receive an instant message. The <contact> element 
contains a URL of the presentity’s contact address. The <contact> element has a priority attribute 
that represents a relative priority of this contact address. The value of the priority attribute is 
between 0 and 1, and the larger value represents the higher priority. The <note> element provides 
the human readable comments, which is identified by an attribute xml:lang. In this example, the 
value of xml:lang attribute is “en”, which means the comment is presented in English. The 
<timestamp> element contains the date and time when the state of this tuple is changed. The 
value of this element follows the date-time format defined in RFC3339 [18]. In this example, 
2007-10-27T16:49:29Z represents 49 minutes and 29 seconds after the 16th hour of October 27th, 
2007 in UTC (Pacific Standard Time). 
SIP SUBSCRIBE and NOTIFY messages are used to subscribe to and notify the state of the 
event packages between the users and the PS server. The PS server can be a stateless server or a 
stateful server. The stateless server does not store the users’ event states. Thus, every 
SUBSCRIBE message is directly forwarded to the recipient PS UA. On the contrary, the stateful 
11 
Subscription-State header field. 
Figure 4 demonstrates the message flows for presence service. In this example, the SIP URIs and 
domain names are the same as those in Figure 1. Besides, the SIP server is capable of the 
functions of a PS server. Assume that UA1 allows UA2 to subscribe to its event states. In this 
example, UA1 is off-line and UA2 attempts to subscribe to the event state of UA1. The detail 
procedures are described as follows. 
Step 1. UA2 sends a SUBSCRIBE message to obtain UA1’s state. Based on the Request-URI 
(i.e., UA1@domain.com), this message is sent to the SIP server (i.e., the PS server). 
Upon receipt of the SUBSCRIBE message, the server replies a 200 OK message to 
UA2 to indicate that the SUBSCRIBE message is received successfully.  
Steps 2. Since UA1 allows UA2 to subscribe to its event states, the server sends a NOTIFY 
message with UA1’s state (i.e., closed which means off-line) to UA2. Upon receipt of 
the NOTIFY message, UA2 replies a 200 OK to the SIP server. 
13 
message to UA1. Since the UA1’s event state is not changed, the SIP server does not 
notify UA2. 
Steps 6 and 7. UA1 logs out the presence service and sends a PUBLISH message with the value 
0 in the Expires header field to the SIP server. The SIP server remove UA1’s event state, 
replies a 200 OK message to UA1 and sends a NOTIFY message to UA2 to update the 
state from open to closed. UA2 then replies a 200 OK to the PS server. 
Several examples for the message mentioned in the above steps are described as follows. 
01 SUBSCRIBE sip:user1@domain.com SIP/2.0 
02 Via: SIP/2.0/TCP user2pc.domain.com;branch=z9hG4bKnashds7 
03 To: <sip:user1@domain.com> 
04 From: <sip:user2@domain.com>;tag=12341234 
05 Call-ID: 12345678@user2pc.domain.com 
06 Cseq: 1 SUBSCRIBE 
07 Max-Forwards: 70 
08 Expires: 3600 
09 Event: presence 
10 Contact: sip:user@user2pc.domain.com 
11 Content-Length: 0 
Figure 5. An Example for the SUBSCRIBE Message.  
Figure 5 demonstrates the SUBSCRIBE message delivered in Step 1 of Figure 4. In the start line, 
the Request-URI header field specifies the URI of the subscribed user agent (i.e., UA1). The Via 
15 
Figure 6 illustrates the NOTIFY message sent from the SIP server to UA2. The SIP server 
utilizes this message to notify UA2 that the subscription results. The Request-URI header field 
specifies this NOTIFY message is sent to UA2. The Via header field is the domain name of the 
SIP server. The To and the From header fields are UA2 and UA1, respectively. The Call-ID 
header field records the identifier of the SIP transaction. Note that the Call-ID header field (i.e., 
12345678@user2pc.domain.com) and the tag (i.e., 12341234) of the To header field in the 
NOTIFY message should match the Call-ID and the tag of the From header field in the 
SUBSCRIBE message, which means these two messages are in the same dialog. The CSeq 
header field indicates the message is NOTIFY and the sequence number is 1. The 
Max-Forwards header field (i.e., 70) limits the maximum hops in the forwarding path. The Event 
header field identifies that the notified event state is UA1’s presence information. The 
Subscription-State header field indicates that the subscription is “active” and the will be expired 
after 3599 seconds. The Contact header field is the domain name of the SIP server. The 
Content-Type header field specifies that the format of the message body is using PIDF, and the 
Content-Length presents the number of total characters in the message body. 
01 PUBLISH sip:user1@domain.com SIP/2.0 
02 Via: SIP/2.0/TCP user1pc.domain.com;branch=z9hG4bK652hsge 
03 To: <sip: user1@domain.com > 
04 From: <sip:user1@domain.com>;tag=1234wxyz 
05 Call-ID: 81818181@user1pc.domain.com 
06 CSeq: 1 PUBLISH  
07 Max-Forwards: 70 
17 
05 Call-ID: 81818181@user1pc.domain.com 
06 Cseq: 1 PUBLISH 
07 SIP-Etag: dx200xyz 
08 Expires: 1800 
Figure 8. An Example for the 200 OK Message.  
Figure 8 demonstrates the 200 OK message that is used to response the PUBLISH message. The 
start line identifies this message is a 200 OK message and CSeq specifies this message is 
acknowledged for the PUBLISH message with the sequence number 1. Based on the Via header 
field, the 200 OK message is forwarded to UA1. The To, the From and the Call-ID header fields 
are copied from the PUBLISH message. The SIP-ETag header field specified by the SIP server 
records the identifier for the subsequent updates. The Expires header field specifies the duration 
of the event state. The duration is reduced from 3600 seconds to 1800 seconds, which means that 
the SIP server will remove the state after 1800 seconds. 
Presence Service in 3GPP IMS adopts SIP extensions (e.g., MESSAGE, SUBSCRIBE, 
PUBLISH and NOTIFY) as the signaling messages. To save the battery and wireless bandwidth, 
3GPP introduces two new components (i.e., the Presence List Server and the Presence Server) in 
the reference architecture of Presence Service. The architecture and message flow for 3GPP 
Presence Service are elaborated in the next section. 
 
 
 
 
19 
Presence List Server, the Principals can retrieve their buddy lists from the Presence List Server 
at any UE. Moreover, the Presence List Server can assist an UE to subscribe to all friends by 
using one SUBSCRIBE message. The Watcher Presence Proxy (Figure 9 ○d ) and the Presentity 
Presence Proxy (Figure 9 ○k ) consist of Call Session Control Functions (CSCFs) and reside in 
the Watcher’s and the Presentity’s home networks, respectively. A CSCF provides the SIP proxy 
functions for SIP message control. A CSCF can be a Proxy-CSCF (P-CSCF), an 
Interrogating-CSCF (I-CSCF) or a Serving-CSCF (S-CSCF). The I-CSCF determines how to 
route incoming calls to the S-CSCF and then to the destination UEs. That is, the I-CSCF serves 
as the contact point for the IMS network to hide the configuration, capacity, and topology of the 
IMS network from the outside world. The P-CSCF contains limited address translation functions 
to forward the requests to the I-CSCF. Authorization for bearer resources in the network (where 
the UE visits) is performed by the P-CSCF. By exercising the IMS registration, an S-CSCF is 
assigned to serve the UE. This S-CSCF supports the signaling interactions with the UE for call 
setup and supplementary service control (e.g., service request and authentication). The S-CSCF 
also acts as a SIP registrar to store the contact addresses of the UEs. In this example, the dialog is 
initialized by the Watcher to the Presentity. Therefore, the Watcher Presence Proxy includes 
P-CSCF (Figure 9 ○e ) and S-CSCF (Figure 9 ○f ). The Presentity Presence Proxy includes 
I-CSCF (Figure 9 ○n ), S-CSCF (Figure 9 ○m ) and P-CSCF (Figure 9 ○l ). Home Subscriber 
Server (HSS; see Figure 9○o ) consisting of the IMS functionality is the master database 
containing all user-related subscription information. The Presence Server (Figure 9 ○p ) stores 
and manages the presentity’s presence information. Upon receipt of a SUBSCRIBE message, the 
Presence Server will retrieve the presentity’s presence information from its database and check if 
the information is expired. If not, the Presence Server provides the presence information to the 
21 
UE1 Presence List Server Presence ServerWatcher Presence Proxy Presentity Presence Proxy UE2
1 SUBSCRIBE
1 SUBSCRIBE
1 200 OK
1 200 OK
2 NOTIFY
2 NOTIFY
2 200 OK
2 200 OK
3 SUBSCRIBE
3 SUBSCRIBE
3 SUBSCRIBE
Home Network of Watcher Home Network of Presentity
3 200 OK
3 200 OK
3 200 OK
4 NOTIFY
4 NOTIFY
4 200 OK
4 200 OK
5 NOTIFY
5 NOTIFY
5 200 OK
5 200 OK
6 PUBLISH
6 PUBLISH
6 200 OK
6 200 OK
7 NOTIFY
7 NOTIFY
7 200 OK
7 200 OK
8 NOTIFY
8 NOTIFY
8 200 OK
8 200 OK
 
Figure 10. A Message Flow Example for 3GPP Presence Service  
In Figure 10, UE1 is a watcher and UE2 is a presentity. Assume that UE2 is in UE1’s buddy list 
(i.e., the URI is UE2@presence_server) and allows UE1 to subscribe to its presence information. 
UE1 and UE2 reside in the different mobile networks. In the initialization, UE2 has published its 
information to the Presence Server. The detail procedure is described as follows. 
Steps 1 and 2. UE1 sends a SUBSCRIBE message to the Watcher Presence Proxy through the 
Pw interface. Upon receipt of the SUBSCRIBE message, the Watcher Presence Proxy 
forwards this message to the Presence List Server. The Presence List Server stores the 
subscription request and replies a 200 OK message to UE1 through the Watcher Presence 
Proxy (i.e., P-CSCF and S-CSCF). 
23 
Steps 7 and 8. The Presence Server detects that the presence information of UE2 has changed. 
The Presence Server invokes a NOTIFY message to UE1. The NOTIFY message is 
delivered to the Presence List Server and then the Presence List Server forwards this 
message to UE1. Upon receipt of the NOTIFY message, UE1 is aware of the presence 
information of UE2 and replies a 200 OK message. 
Note that in this example the Presence List Server and the Presence Server are stateful servers 
and handle the presence information for the watcher (UE1) and the presentity (UE2), respectively. 
With these two servers, the both UEs will have longer battery life and less bandwidth 
consumption since the Presence List Server and the Presence Server assist UEs to process most 
messages instead of forwarding them to UEs. 
5. Discussions and Conclusions 
IMPS is one of the most popular services in All-IP networks. Original communication behaviors 
(e.g., telephone or email) are changed by using IMPS. IMPS users can aware of the presence 
information of their friends and choose a proper way to reach their friends. However, the issues 
of IMPS also arise. In VoIP services, SIP messages are used to exchange media information 
including IP addresses, port numbers and codecs. However, SIP-based instant messages utilize 
SIP messages to deliver the actual communication data. Therefore, the security issues for 
SIP-based instant services are greater than those of other SIP-based services (e.g., VoIP). To 
solve this problem, the IM users can use TLS (Transport Layer Security) to set up a secure 
connection or S/MIME (Security MIME) to encrypt the message body. Since TLS encrypt the 
whole SIP message including the header fields and the message body, each SIP server should 
decrypt the SIP message and process the header fields. In other words, TLS is a hop-by-hop 
25 
Acknowledgement 
The author would like to thank R.-H. Liou for his help on collecting the examples in this chapter. 
This work of W.-E. Chen was sponsored in part by NSC 96-2218-E-197-004, NCHC project and 
MoE project. 
27 
[10] J. Rosenberg, “A Presence Event Package for the Session Initiation Protocol (SIP)”, RFC 
3856, August 2004. 
[11] H. Schulzrinne, “CIPID: Contact Information in Presence Information Data Format”, RFC 
4482, July 2006. 
[12] H. Schulzrinne, V. Gurbani, P. Kyzivat, and J. Rosenberg, “RPID: Rich Presence 
Extensions to the Presence Information Data Format (PIDF)”, RFC 4480, December 2005. 
[13] H. Sugano, S. Fujimoto, G. Klyne, A. Bateman, W. Carr, and J. Peterson, “Presence 
Information Data Format （PIDF）＂, RFC 3863, August 2004. 
[14] 3GPP TS 23.002: “Network architecture”. 
[15] 3GPP TS 23.141: “Presence service; Architecture and functional description; Stage 2”. 
[16] 3GPP TS 23.228: “IP Multimedia Subsystem (IMS); Stage 2”. 
[17] B. Campbell, Ed., J. Rosenberg, H. Schulzrinne, C. Huitema, D. Gurle, “Session Initiation 
Protocol (SIP) Extension for Instant Messaging”, RFC 3428, December 2002. 
[18] G. Klyne, C. Newman, “Date and Time on the Internet: Timestamps”, RFC 3339, July 
2002. 
[19] T. Dierks, E. Rescorla, “The Transport Layer Security (TLS) Protocol Version 1.1”, RFC 
4346, April 2006. 
[20] B. Ramsdell, Ed., “Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.1 
Certificate Handling”, RFC 3850, July 2004. 
[21] B. Ramsdell, Ed., “Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.1 
Message Specification”, RFC 3851, July 2004.
