行政院國家科學委員會專題研究計畫成果報告 
模型式 Java 程式測試工具的研製 
計畫編號：NSC 97-2221-E-194-036 
執行期限：97年 08月 01日至 98年 07月 31日 
主持人：林迺衛   國立中正大學資訊工程學系 
計畫參與人員：胡伊婷、胡子凡、柯廷諭、何明濱 
國立中正大學資訊工程學系 
 
1. 中文摘要 
 
軟體測試目前依舊是確保軟體品質的
主要方法。這個研究計畫開發一個可以自
動產生 Java 程式測試案例的模型式測試
工具。這個測試工具運用合約設計軟體開
發方法的前條件及後條件來自動產生測試
案例。這個研究計畫使用物件限制語言來
敘述 Java 方法的前條件及後條件。這個測
試工具可以自動產生受測 Java類別的 Java
測試類別。這個測試工具的測試架構是奠
基於 JUnit 的測試架構。這個研究計畫的
主要挑戰是如何自動產生測試案例的測試
輸入和預期輸出，這個研究計畫採用限制
邏輯程式系統ECLiPSe的強力限制解決能
力來自動產生測試輸入及預期輸出，這個
方法可以同時產生測試輸入及預期輸出。 
關鍵詞：模型式測試、合約設計、物件限
制語言 
 
2. Abstract 
 
Software testing is the main activity to ensure the 
quality of software. This research project designs and 
implements a model-based testing tool to 
automatically generate test cases for Java programs. 
This testing tool generates test cases based on the 
preconditions and postconditions in the Design by 
Contract software development approach. This 
research uses Object Constraint Language to specify 
the preconditions and postconditions of Java methods. 
This testing tool can automatically generate Java test 
classes for the Java classes under test. The testing 
framework is based on the JUnit framework. The 
main challenge of this research project is the 
automatic generation of test input and expected 
output for each test case. This research project uses 
the powerful constraint solving capability of 
constraint logic programming system ECLiPSe to 
automatically generate test input and expected output. 
This approach can generate the test input and 
expected output simultaneously. 
Keywords: model-based testing, Design by Contract, 
Object Constraint Language 
 
3. Background and Objectives 
 
According to 2006 CHAOS report of the 
Standish Group, high quality software is still very 
hard to achieve at present [7]. The software testing 
activity still remains one of the main activities to 
assure software quality. The cost of the software 
testing activity usually takes about half of the cost of 
the entire software process. This high cost of the 
software testing activity is the main reason to hinder 
the achievement of high quality software. 
Many software testing techniques have been 
developed during the last several decades. However, 
most of these software testing techniques are still 
performed manually at present. This is why the cost 
of the software testing activity is so high. The 
automation of the software testing activity should be 
able to significantly reduce the cost of the software 
testing activity. 
The software testing activity consists of the 
design of test cases and the execution of test cases. 
There are two types of techniques for designing test 
cases: black-box testing (or specification-based 
testing) and white-box testing (or program-based 
testing) [3]. The black-box testing techniques are 
based on the functional specification of a software 
system and focus on the coverage of the specified 
external behaviors of the software system. The 
white-box testing techniques are based on the source 
code and focus on the coverage of the internal 
structure of the source code. These two types of 
testing techniques are complementary. The 
white-box testing techniques alone may fail to reveal 
that some portions of the specification are missed in 
the source code. On the other hand, the black-box 
testing techniques alone may fail to reveal that some 
portions of the source code are not contained in the 
specification. Therefore, employing both types of 
testing techniques is necessary to assure high quality 
software. 
Design by Contract is a systematic approach for 
developing bug free software [4]. In Design by 
Contract approach, the functional behaviors of a 
class are specified as a contract. The contract 
specifies the correct interactions between a class and 
its clients as a set of obligations that need to be 
fulfilled by both parties. If both parties fulfill their 
technique. Each test case consists of a pair of input 
and expected output. 
In model-based testing, test cases are generated 
repeatedly in the following three steps, as shown in 
Figure 1. First, a test (or execution) path is generated 
from the model in the specification. Each test path 
covers a sub-domain of the input. This step is 
implemented as a test path generator. Second, the 
feasibility of the test path is verified by solving the 
set of logical predicates appearing on the test path. If 
the set of logical predicates is satisfiable, this test 
path is feasible. In this case, a solution of the set of 
logical predicates is used as a representative input 
from the sub-domain covered by this test path. 
Otherwise, the test path is infeasible. This step is 
implemented as a test data generator. Third, the 
expected output with respect to the input is 
determined. This step is implemented as a test oracle. 
These three steps are repeated until the set of 
generated test cases satisfies a specific test coverage 
criterion. Most modern model-based testing tools 
focus on the automation of test path generators. The 
tasks of test data generators and test oracles are still 
usually performed manually by programmers or 
testers. 
 
4. Research Methodology and 
Contributions 
 
This research proposes an approach that can 
automatically generate test input and expected 
output simultaneously based on the powerful 
constraint solving capability of Constraint Logic 
Programming systems (CLP). This approach allows 
us to design an automatic testing tool that consists of 
a test path generator, a test case generator, and a test 
class generator, as shown in Figure 1. The test case 
generator automatically generates test input and 
expected output for each feasible test paths. The test 
class generator automatically generates a Java test 
class for the tested Java class. This paper uses the 
Java development environment Eclipse to develop 
the testing tool [6]. This paper uses the Constraint 
Logic Programming system ECLiPSe to solve the 
constraints [1]. 
The rest of this section is organized as follows. 
Subsection 4.1 describes a running example for this 
paper. Subsection 4.2 gives a contract for the 
running example using OCL. Subsection 4.3 
describes the test path generator. Subsection 4.4 
describes the test case generator. Subsection 4.5 
describes the test class generator.  
 
4.1. An Running Example 
 
We now describe the running example that is 
used to illustrate the automatic test case generation 
for Java methods. Consider the following Java class 
Triangle. 
 
class Triangle { 
Triangle(int sa, int sb, int sc); 
public String category(); 
private int a, b, c; 
} 
 
Each of the objects of the class Triangle represents a 
triangle. The variables a, b, and c represents the 
lengths of the three sides of the triangle. The method 
category() returns the category of a Triangle object 
determined by the lengths of the three sides: 
“Equilateral”, “Isosceles”, “Scalene”, or 
“NotATriangle”. A Triangle object is “NotATriangle” 
if it does not satisfy any of the following three 
constraints: {a + b > c, a + c > b, b + c > a}. 
Otherwise, it is a triangle. A Triangle object is an 
“Equilateral” triangle if it satisfies the following two 
constraints: {a = b, a = c}. A Triangle object is an 
“Isosceles” triangle if it satisfies one and only one of 
the following three constraints: {a = b, a = c, b = c}. 
Otherwise, It is a “Scalene” triangle. 
 
4.2. The Specification Language OCL 
 
OCL is a formal language used to describe 
expressions on UML models. These expressions 
typically specify invariant conditions that must hold 
for the system being modeled or queries over objects 
described in a model. Note that when the OCL 
expressions are evaluated, they do not have side 
effects. The OCL expression for the method 
category() in the running example can be given as 
follows: 
 
context Triangle::category () : String 
pre: true 
post: result = 
if (a + b <= c) then 
“NotATriangle” 
else if (a + c <= b) then 
“NotATriangle” 
else if (b + c <= c) then 
“NotATriangle” 
else if (a = b and a = c) then 
“Equilateral” 
else if (a = b) then 
“Isosceles” 
else if (a = c) then 
“Isosceles” 
else if (b = c) then 
“Isosceles” 
else  
    “Scalene” 
endif 
 
The expression true means that there is no 
precondition for the method category(). The 
