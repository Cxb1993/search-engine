 2 
整合有線與無線叢集虛擬子網路容錯協議問題最佳解之研究 
 
計畫主持人：王淑卿 
共同主持人：嚴國慶 
計畫參與人員：梁席華、劉佳瑋、賴怡君、王朝宏 
 
摘 要 
行動隨意式網路(Mobile Ad-hoc Network，MANET)是一種行動節點(Mobile Host，MH)間自我
組織而成的分散式系統，不需要額外的中央管理機制(例如無線網路取存點或基地台)，因此可以
快速部署網路環境，這種架構在某些特殊或緊急環境下是非常有用的，諸如戰爭中、災害援救時、
地震後的重建或是在某個未知的區域中探索等，故其穩定性與安全性便顯的格外重要，因此我們
必需發展一套穩定的容錯機制來提升網路的可靠度。由於 MANET 沒有固定的拓樸，因此為了尋
找路徑並將封包傳送到目的節點，MANET 通常是以簡單的氾濫式(Flooding)將控制訊息及封包廣
播出去，並藉由節點的合作轉送訊息，以多點跳躍(Multi-hop)的方式送達目的端。這種方法雖然
簡單可靠且容易運用，但也容易產生廣播風暴的問題。因此，在第一期的計畫中將著眼於行動隨
意式網路叢集虛擬子網路拓樸模式的重新建立。 
關鍵字：分散式系統、拜占庭協議問題、隨意式行動網路、虛擬子網路 
Abstract 
Mobile Ad-hoc Network (MANET) is a self-organized wireless network by Mobile Hosts (MH), 
which does not need central control mechanism, therefore, can be deployed rapidly. This kind of 
structure is very useful in some specific environment, for instance, in battlefield, disaster rescue, 
rebuilding after earthquake, or unknown area discovery, hence its stability and security is very important 
obviously. Thus, it is essential to develop a stable fault-tolerant mechanism to enhance the reliability of 
network. Besides, due to the MANET without fixed network topology, therefore, in order to search for 
routing path and deliver a packet to destination, flooding method is used to broadcast control messages 
or packets from a source node hop by hop to a destination node. This method is simple, reliable and easy 
to use, but it also could cause the broadcast storm problem. According to the past research, to manage 
MANET by using Cluster Virtual Subnet can gain better scalability, stability and can also greatly 
decrease communication overhead and the number of broadcast packets. Consequently, a practicable 
mobile network structure is designed in this research project. 
Keywords: Distributed system, Byzantine agreement, Mobile Ad-hoc network, Virtual Subnet 
1. 簡介 
由於個人電腦價格大幅降低及通訊網路的快速發展，分散式的系統逐漸取代傳統大型電腦。
分散式系統是由一些分散在各地的處理單元所組成，彼此間透過通訊線路來傳遞訊息，因此可以
達到資源共享的優點。然而在現實的環境中，分散式系統亦可能會遭到一些問題，這些問題大致
上可分為外部及內部兩方面來看[3]。外部方面：如天災、人為的操作不當、或駭客入侵等；內部
方面則包括系統內部所產生的問題如電腦系統老化、機械故障及軟體元件不適用等。這些問題均
可能造成系統在安全與穩定性上的危機，因此，我們必須尋求一個最佳的容錯機制，來解決分散
式系統所可能帶來之隱憂。 
 4 
意式網路由於沒有固定的拓樸，廣播的使用更是頻繁，例如尋找主機[8]、尋找路徑[12]等。為了
尋找路徑並將封包傳送到目的節點，行動隨意式網路通常是以簡單的氾濫式(Flooding) 方法將控
制訊息及封包廣播出去，但卻容易產生廣播風暴(Broadcast Storm)的問題。為了減少封包的傳送以
降低廣播風暴的衝擊，有不少學者提出限制性廣播(Limited Broadcast)[17,29,36,42]與叢集虛擬子網
路架構(Cluster Virtual Subnet Network)[5,9,19,24,30]等技術。 
其中，限制性廣播無法保證每一個節點都能收到封包。而對於叢集架構而言，在過去許多研
究中顯示了虛擬子網路架構，在分散式系統的展延性(Scalability)愈來愈大的實際應用時，因網路
拓樸能透過虛擬子網路與虛擬骨幹(Virtual Backbone)的特性，除了有效的節省控制封包的數目
外，更能提昇封包傳輸的可靠度 (Reliability) ，同時在整體網路上也有較佳的效能
[11,13,20,21,34,39]，故本研究將利用叢集虛擬子網路架構(Cluster Virtual Subnet Network)[30,32]，
一則可以減少封包傳送交換次數，避免在單一叢集內傳送封包可能產生重複、競爭、及碰撞等問
題，以達成更好的繞送路徑(Routing)品質。再者，透過叢集虛擬子網路架構的特性，可提供封包
安全且可靠的通訊管道。且利用叢集虛擬子網路架構管理方式，網路拓樸會將更具延展性
(Scalability)且易於管理。 
除此之外，在網路的發展上，有愈來愈多的應用程式是以一對多或多對多的傳播方式，例如
影音、訊視等應用，而群播服務(Multicasting)則是指傳送一次相同的資料封包即可到達多重的接
收端，因此可以取代單播(Unicasting)必須傳送相同封包多次才能到達不同接收端的缺點，故能有
效減少頻寬消耗、傳送端與路由器的處理運算、以及傳輸延遲等相關議題[8,22,26]。而在行動隨
意式網路由於電力和頻寬均受限制，因此群播在行動隨意式網路便更顯重要。要維護群播群組成
員資訊以及建立一個有效的分散式群播路由即使在有線網路上仍是一個相當大的挑戰，而在行動
隨意式網路，節點具有相當高的移動性，因此拓樸改變快速，所以群播路由的選擇在行動隨意式
網路中也更加困難。目前在行動隨意式網路中有許多群播路由協定被探討[10]，這些協定大致上
可分為兩大類，包括：Table-driven 式和 On-demand 式協定。Table-driven 式的協定例如：FSR、
DSDV 及 WRP 等[10,33,37,40,41]，其優點在於可以預先建立一個共享的路由表(Routing Table)，
在其間的每一個節點均擁有可維護此網路的路由資訊，因此當來源端節點(Source Node)需要傳送
一個封包至目的地端節點(Destination Node)，路由早已經知道路徑，因此能被快速送達。然而
Table-driven 式協定的缺點是當網路拓樸快速改變時，必需經常更新路由資訊，且當網路節點數龐
大時，大量的群播路由資訊將需要相當大的通訊成本來建立路由表，而且路由表亦會變的相當龐
大，需佔用大量的記憶體，因此 Table-driven 路由方式較適合小型的網路。On-demand 路由協定
例如：AODV 及 DSR 等[38,31,37,44]則是當有路由需求時才會建立路徑，因此不會有太多的成本
去維護路由資訊，然而其使用「查詢-回應」(Request-Reply)的路由資訊交換方式，因此在查詢路
由時需花費大量的通訊成本，且必需等待長久的路由查詢回應時間，故其雖然適用在大規模的網
路，但並不適用於有大量路由請求的網路服務環境。 
由於 Table-driven 和 On-demand 路由協定均屬於平面(Flat)架構的路由方式[29,33]，基於這些
路由協定受限於大規模或移動快速的網路，叢集式的群播路由(Cluster Multicasting Routine)方式可
以更有效的解決這些缺點。因為，叢集式的架構將網路中的所有節點，依據某些特性，例如地理
位置或連接率等，將整個網路切割成許多的群組，而這些群組通常被稱為叢集(Cluster)，如此便
可將大規模網路的複雜問題加以減化[8]。叢集式路由的優點在於它可以取代傳統行動隨意式網路
以節點接著節點記錄路由資訊的方式，在每一個叢集中都會有一個或一些叢集管理者(Cluster 
Manager)負責與其它叢集間的路由，且每叢集內的節點只需負責與維護其叢集內的連結狀態資
訊，因此不管叢集是使用何種群播路由方式來建立，因其網路範圍已經縮小到叢集內，而不再是
整個行動隨意式網路，所以叢集式的架構將比原本平面(Flat)的方式更能有效減少大量的通訊成本
 6 
2.1 行動隨意式網路架構 
在本子節中，將說明行動隨意式網路的架構。圖 1 所示為行動隨意式網路之架構圖[8]，其中
網路是由許多的行動節點所組合而成。在這樣的架構下，每個節點不需要透過基地台之類的設備
便能彼此動態的組合成一個網路。每個行動節點除可任意地移動外，並藉由多點跳躍程無線聯結
(Multi-hop Wireless Links)與彼此溝通，而且每個行動節點可扮演如同路由器般的角色協助網路內
的其他節點轉送資料封包。 
由於在行動隨意式網路環境下，是由少數幾個管理者來分擔所有節點的訊息傳輸[10]，此時
可能因為大量的工作負擔使得管理者癱瘓甚而影響整體網路訊息傳遞的效能。幸而在行動隨意式
網路的網路型態中，節點因為具有共同的目的或特性而經常會聚集在一起，進而形成群組。比如
校園中的網路節點會因為所在的位置或上課的關係而群聚在某處，形成小的分群網路。 
 
 
圖 1、行動隨意式網路架構圖 
因此，在本研究中將利用行動隨意式網路中節點群聚的特性，在此環境下建立小型分群，並
於每個分群中挑選出群組管理者形成一階層式的管理架構，以維持網路拓撲之穩定度。 
在圖 2 中所示的網路拓樸，為分成多個 layer 之階層式叢集網路架構，每一個叢集各有其管理
者，當子分群(Child Cluster)網路建立後，其內所選派之管理者節點會自動與父網路群組(Parent 
Cluster)之管理者經由資料交換方式，建立階層式關係，並獲知上下層之管理者。由此方式建立出
的階層式之管理者架構，用以管理並提供整體網路環境資料傳遞之用。當訊息傳送端及接受端之
節點位於同一群組內，則由兩節點直接交換訊息以減輕管理者之負擔。 
若訊息傳送端及接受端之節點位於不同群組內，則來源端之節點先將訊息傳送至該群組之管
理者，接著由該管理者將訊息依階層式架構往上傳遞至上一層群組之管理者，藉由管理者間的訊
息接力，將封包傳至目的端節點。 
若目的端節點為整體傳輸範圍外，則一律將該封包傳遞至最上層之管理者，由其對其他範圍
之最上層管理者進行資料交換，以達資料傳遞之目的。 
 8 
條件一： 所有正常工作的節點均決議某一個共同值； 
條件二： 當發訊者為正常運作時，所有正常工作的節點所決議的共同值，必為發訊者所發佈
的值。 
Lamport[27]是最早提出拜占庭協議問題的學者，他的結論是在全連接式網路上，若有n個節
點，其中若有(n-1)/3以上的節點損毀時，則BA是無法達成的。且系統中若有tp（≤(n-1)/3）個
損毀的節點時，則須進行tp＋1次的訊息交換才能達成拜占庭協議。Fischer[15]更證明了tp＋1次的
資訊交換為達成拜占庭協議的最佳解。 
與拜占庭協議問題類似的另一問題為合議問題(Consensus Problem)[6]，差別處在於拜占庭協
議問題中只有一個發訊者，而在合議問題中，每一個處理單元都是發訊者。因此，合議問題可視
為系統中n個處理單元同時進行n個拜占庭協議問題。 
3. 研究方法 
在隨意式網路的網路型態中，每一節點都具有動態活動的特性，因此節點間將會來回地群集
和分解而影響網路拓樸的穩定度，並不斷造成網路叢集的重新配置，而影響網路系統的整體效能。
因此如何挑選叢集管理者(Cluster Manager: CM)以維持網路拓樸之穩定度便是一項重要的議題。在
此一研究中，我們於隨意式網路架構下提出一個有效網路叢集及叢集管理者選派之機制。本研究
所制定的叢集機制，是一考量多種網路通訊情況下所制定的處理機制，命名為 Unified Framework 
for Cluster Manager Election and Clustering Mechanism(簡稱 UFCM)，包含網路系統初始狀態時的處
理方式、節點的加入或離開叢集時的處理方式、以及當 CM 因故無法負責該叢集的管理時相對應
的處理方式。除此之外，本研究亦考量當 CM 發生異常時，而設計一備援的 CM 用來接替叢集的
管理工作。圖 3 所示為研究的流程架構。 
為了讓研究更為實用，因此將研究環境訂於更擬真的隨意式網路環境；網路環境中包含各種
不同處理能力、電力及通訊範圍之節點。而在本研究中，將不考慮節點之移動速度，因在實際網
路環境中的行動設備並無法自我得知當時之移動速度。過去雖有相關研究將移動速度納入考慮，
但其均是透夠假設的數據或是假設加裝 GPS 等設備來間接得知移動速率的資訊，而本研究為求接
近真實，因此雖考慮了節點可隨意移動的特性，但暫不考慮因節點移動速率所造成的相關影響。 
在此研究中節點之角色共分成一般節點、管理者及備援管理者等三種角色，一般節點為隨意
式網路叢集中受管理者所管理的行動節點。 
管理者節點為在網路叢集動作初始時，藉由互相的比較之後，最為優勢者成為叢集管理者的
節點。管理者主要負責叢集網路中的節點管理，其必須維護目前所有管理節點的清單，如此當管
理者轉移等動作發生時能通知所管理的一般節點進行更換管理者的動作。管理者另外負責叢集中
各節點以及叢集與叢集間訊息的交換。 
當管理者產生後，便會在其所管理的一般節點中挑選出條件次之的節點作為備援管理者。備
援管理者剛成立時僅為身份的註記而無需負責任何事項，當管理者節點因故無法繼續服務叢集網
路時，藉由管理者更換的動作備援管理者便會接替工作並成為管理者，爾後再由新的管理者選派
新的備援管理者。 
本研究中將隨意式網路的通訊過程分成初始、一般及原管理者失效時三個情況，以下分別說
明在不同階段管理者選派之方法。 
 
 10 
外為了使得每一叢集內傳遞訊息的效果最佳，因此本研究設定兩節點間之傳輸距離(或延遲時間)
需低於某數值時才會進行比較之動作，如此形成的叢集才能使得內部傳輸效率較佳。 
當一節點收到鄰近節點所傳來的能力值並要求比較時，會將自身的能力值與該值做比較，經
過比較後，能力值較高者便可暫時成為管理者，並記錄與其比較的節點編號與能力值，且與另一
節點形成一個網路叢集，而受管理的節點亦會紀錄此管理者之編號。網路初始階段管理者選派之
示意圖如圖 4 所示，在圖 4(a)中，假設目前網路包含三個節點，節點左上角為其倒數值；圖 4(b)
節點 B 首先倒數至 0，因此先發送訊號與鄰近的節點 C 比較；而圖 4(c)經比較後節點 B 成為管理
者並與節點 C 形成一個叢集。圖 5 所示為網路初始階段管理者選派之流程圖。 
 
 
 
                 
圖 4、網路初始階段管理者選派示意圖 
 
 
所有叢集建立完成後即進入一般階段，進入此階段後由於各節點若非管理者即為受管理的子
節點，因此所有節點便不再主動進行能力比較之動作，如此的好處可減少因不必要的比較造成頻
寬的浪費及網路的壅塞，且設計為被動的方式亦可避免因不斷的互相比較而造成乒乓效應的產
生。因此，在本研究中便稱此階段為穩態(Stable State)，直到該管理者失效時才會有所改變。圖 6
所示為一般階段時管理者選派之流程圖。 
 
 
 12 
 
圖 6、一般階段管理者選派流程圖 
 
 
當一新的管理者產生時，該管理者會紀錄該叢集內各子節點之相關資訊，如節點編號、換算
後的能力值等，此時管理者便會由這些子節點中自動挑選能力值最高之節點作為其備援之管理
者。而備援管理者挑選後會由管理者將目前所有子節點資訊告知備援管理者，接著再由管理者發
送訊息告知其所管理的子節點備援管理者為何者，以作為將來當管理者失效時，子節點可知備援
管理者為誰。圖 7 所示為備援管理者之選派流程圖。 
 14 
開始
節點與鄰近節點
相互比較能力值
能力是否比比較
節點強？
成為管理者
與被比較的節點
形成群組
被比較的節點
成為管理者
結束
所有節點是否
全部加入群組？
否
是
是 否
 
圖 8、網路初始時叢集建立流程圖 
 
如圖 9 所示，在原有的叢集中，當有新的節點 D 進入隨意式網路時(圖 9(a))，由於尚未接受
任一管理者的管理，因此其會主動與鄰近的節點進行能力的比較圖 9(b)。而接受與其比較要求的
節點 C 在收到此一訊息時，由於已是受管理者 B 管理的節點，為節省不必要的比較動作，此時節
點 C 便會直接告知其管理者為 B，而節點 D 收到此一資訊後即會直接加入管理者 B 之叢集(圖
9(c))。 
而若節點 D 與管理者 B 的傳輸距離(或延遲時間)過大時，則節點 D 便會取消此次比較，並繼
續與鄰近節點重複上述步驟，倘若鄰近節點比較過後均無結果，則節點 D 會自成一叢集，並成為
管理者。圖 10 所示為節點加入後叢集調整之流程圖。 
 16 
圖 11(a)所示，當叢集網路中原選派之管理者 D 因電力不足、移動出範圍、或其他因素使得
其子節點無法與其溝通時，該範圍內的子節點便會與其所記錄的備援管理者節點進行溝通(圖
11(b))，當此程序無誤時子節點便會直接認定該備援管理者為新的管理者，並更新本身對管理者的
紀錄，而原先的備援管理者也就因此成為該叢集中新的管理者(圖 11(c))。 
 
 
       
圖 11、管理者失效時叢集調整示意圖 
 
假若上述步驟中，當子節點試圖聯繫備援管理者時亦發生錯誤，則在一定的錯誤次數後該叢
集即自動解散，所有節點便回到初始狀態，重新互相比較相鄰的節點能力並選派新的管理者，重
新形成新的網路叢集。圖 12 所示為管理者失效時叢集調整之流程圖。 
 
 
管理者因故失效
結束
開始
群組內子節點
是否可與備援管理
者聯繫？
是 否
原群組解散
子節點更新管理者
資訊至新管理者
由新管理者選派
備援管理者
 
圖 12、管理者失效時叢集調整流程圖 
 
 
 
 18 
 
圖 13、模擬程式使用介面 
 
而在叢集方法的比較上，本研究選擇了在叢集研究裡較為知名也是本研究所融合之叢集理論
進 行 比 較 ， 其 分 別 是 Lowest-ID Cluster Algorithm(LICA) 、 Highest Connective Cluster 
Algorithm(HCCA)以及 Weighted Cluster Algorithm(WCA)三者[20,44]，藉由與上述三種叢集理論之
比較來驗證本研究所提方法之效能。 
本研究之實驗設計共分為兩個階段，第一階段為透過實驗探討本研究叢集方法之穩定性，並
分別針對不同節點數(30、50、100)以及叢集範圍(50、150、200、300、500)進行實驗；而第二階
段則為藉由實作過去學者所提的相關叢集研究之方法(LICA、HCCA 及 WCA)，來與本研究之
UFCM 叢集方法進行比較。在第二階段實驗中，亦針對不同的節點數(30、50、100)以及叢集範圍
(50、150、200、300、500)分別進行實驗比較。因此，本研究之實驗共可分為下列四種，並針對
各種實驗設計進行 30 次之反覆實驗，以求更客觀之實驗結果，實驗設計分別如下： 
 
設計一：於節點數為 30、50、100 之環境下，叢集形成範圍固定於 150，反覆實驗 UFCM 方
法 30 次，並紀錄其叢集過程中封包數之比較以及所形成之叢集數。 
設計二：於叢集形成範圍為 50、150、200、300、500 之環境下，節點數固定於 50，反覆實
驗 UFCM 方法 30 次，並紀錄其叢集過程中封包數之比較以及所形成之叢集數。 
設計三：於節點數為 30、50、100 之環境下，叢集形成範圍固定於 150，反覆實驗本研究之
UFCM 及 LICA、HCCA、WCA 等方法 30 次，並紀錄其叢集過程中封包數之比較
以及所形成之叢集數。 
設計四：於叢集形成範圍為 50、150、200、300、500 之環境下，節點數固定於 50，反覆實
驗本研究之 UFCM 及 LICA、HCCA、WCA 等方法 30 次，並紀錄其叢集過程中封
包數之比較以及所形成之叢集數。 
 
 20 
 
圖 14、節點數 30 之節點分佈 
 
表 3所示為實驗中所採用 50 個節點之節點參數，圖 15 則為此 50 個節點在範圍內分佈之情形。 
 
表 3 節點數 50 之節點參數 
Node_ID Pos_X Pos_Y Direction Speed Range Energy(%) Busy(%) Bandwidth(%) 
100 366 361 286 6 98 81.78 99.06 89.43 
101 47 714 205 5 63 99.05 95.04 97.68 
102 42 382 250 5 49 72.59 77.36 56.22 
103 142 9 80 8 99 97.54 91.24 75.18 
104 879 757 315 6 48 28.12 87.63 97.76 
105 638 455 292 6 68 68.63 72.6 77.69 
106 93 622 86 9 55 60.84 37.24 64.06 
107 63 141 119 2 44 38.03 73.74 98.1 
108 676 592 22 10 57 60.57 68.48 67.68 
109 262 804 104 8 48 65.85 10.99 99.43 
110 600 429 275 3 59 68.77 11.79 75.64 
111 532 553 200 9 79 49.17 55.08 97.45 
112 888 530 336 9 97 4.41 81.07 54.72 
113 779 134 223 8 50 43.09 48.4 78.96 
114 410 343 320 4 42 67.99 48.62 82.37 
115 787 913 229 4 75 21.17 43.57 84.08 
116 908 809 131 2 91 80.7 82.93 67.84 
117 769 859 288 6 80 37.15 57.58 92.82 
118 377 610 355 6 45 84.23 67.72 68.27 
119 251 73 241 9 78 74.98 88.96 64.13 
120 776 428 176 2 63 60.93 50.54 89.56 
 22 
 
圖 15、節點數 50 之節點分佈 
 
表 4 所示為實驗中所採用 100 個節點之節點參數，圖 16 則為此 100 個節點在範圍內分佈之情
形。 
 
表 4 節點數 100 之節點參數 
Node_ID Pos_X Pos_Y Direction Speed Range Energy(%) Busy(%) Bandwidth(%) 
201 889 680 285 4 41 4.44 13.06 63.08 
202 900 532 77 9 72 94.57 50.13 74.73 
203 979 717 200 6 90 33.2 79.29 71.09 
204 928 657 98 9 62 26.14 90.04 57.26 
205 701 541 328 3 78 9.29 36.14 75.42 
206 402 32 76 1 68 45.34 17.33 79.23 
207 299 673 339 10 83 36.58 53.8 97.67 
208 814 688 293 4 69 62.29 56.89 94.59 
209 981 697 274 1 73 6.99 45.47 71.44 
210 479 646 129 10 40 30.04 74.1 90.61 
211 971 409 336 2 71 14.28 79.81 66.22 
212 412 531 5 4 83 41.07 87.07 70.4 
213 10 2 212 6 92 37.6 77.99 50.84 
214 871 797 238 3 87 68.69 44.77 53.56 
215 220 507 207 2 76 67.13 57.11 53.73 
216 104 585 256 8 93 27.35 81.68 54.37 
217 244 568 80 6 41 88.86 13.26 53.78 
218 538 400 288 8 66 61.69 46.72 95.76 
 24 
表 4 節點數 100 之節點參數 
Node_ID Pos_X Pos_Y Direction Speed Range Energy(%) Busy(%) Bandwidth(%) 
256 226 142 200 6 99 55.83 15.38 75.34 
257 494 503 37 7 80 54.87 71.51 63.22 
258 882 345 267 7 98 47.73 69.1 69.63 
259 344 68 175 5 60 45.42 18.8 86.21 
260 943 188 214 4 56 62.12 27.99 91.24 
261 255 359 347 5 43 86.14 27.06 71.2 
262 42 142 266 7 92 59.37 47.54 64.2 
263 147 30 242 1 72 84.6 83.66 58.84 
264 625 840 303 8 64 40.9 62.55 67.88 
265 539 69 30 4 90 65.06 37.04 93.82 
266 340 238 91 9 72 43.18 82.58 74.16 
267 259 241 25 8 56 41.39 95.68 65.64 
268 579 837 354 3 94 66.29 22.59 99.64 
269 395 269 291 3 59 52.72 30.74 92.74 
270 836 625 49 3 53 21.93 64.5 62.42 
271 803 74 155 6 64 55.81 19.1 93.2 
272 894 608 277 5 67 58.11 59.49 87.3 
273 186 662 103 9 79 83.98 33.87 71.06 
274 844 368 227 6 93 42.7 90.78 69.84 
275 553 707 238 9 83 69 60 50.17 
276 711 644 13 10 87 82.54 98.68 84.24 
277 124 488 168 2 70 4.4 12.62 65.45 
278 941 246 110 7 93 69.59 52.84 75.51 
279 903 201 199 5 73 98.52 19.19 76.64 
280 461 750 35 5 80 70.29 38.29 72.51 
281 293 29 127 3 47 59.22 91.5 65.9 
282 166 43 125 3 95 35.26 56.82 66.31 
283 705 585 310 10 62 8.71 70.81 51.73 
284 34 328 182 8 56 3.6 24.36 91.33 
285 389 224 24 1 76 20.35 20.1 69.22 
286 419 849 9 7 65 16.6 51.79 80.47 
287 931 415 82 3 50 35.66 82.34 55.47 
288 620 547 79 9 82 15.48 37.2 88.72 
289 19 24 89 4 53 13.24 90.21 99.51 
290 903 383 346 5 49 37.86 35.58 68.06 
291 780 854 178 8 90 93.32 61.59 75.34 
292 33 484 201 2 82 32.46 96.11 95.25 
 26 
0
10
20
30
40
50
60
70
80
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29
比較次數
比
較
封
包
數
節點數30
節點數50
節點數100
 
圖 17、實驗設計一：封包數之比較結果 
 
0
5
10
15
20
25
30
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29
比較次數
形
成
群
組
數
節點數30
節點數50
節點數100
 
圖 18、實驗設計一：所形成叢集數 
 
由圖 17 及 18 所得之實驗結果可知，由於本研究一開始之機制為賦予每個節點隨機的數值進
行倒數，因此一開始會由哪個節點進行能力比較及形成叢集並不一定，雖然導致每次完成叢集所
需封包之比較數及所形成的叢集數並不一定，但由結果可見無論是封包之比較數或所形成的叢集
數均能維持穩定，並不因隨機數值倒數機制之設計而使得每次的叢集結果或比較封包數有所落
差，因此本研究雖設計隨機數值倒數之機制，其並不影響叢集結果之穩定性。 
 
實驗設計二之結果 
此實驗設計為於叢集形成範圍為 50、150、200、300、500 之環境下，節點數固定於 50，反
覆實驗本研究方法 30 次，並紀錄其叢集過程中封包數之比較以及所形成之叢集數。圖 19 所示為
封包數之比較，圖 20 則為所形成之叢集數。 
 28 
43.742.341.739.7
0.0
10.0
20.0
30.0
40.0
50.0
60.0
70.0
80.0
90.0
UFCM LICA HCCA WCA
分群方法
平
均
比
較
封
包
數
30
50
100
AVG
 
圖 21、實驗設計三：封包數之比較結果 
 
19.3
17.718.3
20.3
0.0
5.0
10.0
15.0
20.0
25.0
30.0
UFCM LICA HCCA WCA
分群方法
平
均
形
成
群
組
數
30
50
100
AVG
 
圖 22、實驗設計三：所形成叢集數 
 
由圖 21 及 22 所得之實驗結果，由封包數的平均值比較可知當環境內節點數量越多時，UFCM
方法對於封包量之控制有較佳的效果，如此對於網路環境初始時之叢集形成，更能減少因大量的
封包而導致網路的不穩定，以抑制廣播風暴的產生。 
 
實驗設計四之結果 
此實驗設計為於叢集形成範圍為 50、150、200、300、500 之環境下，節點數固定於 50，反
覆實驗本研究所提出之 UFCM 方法及 LICA、HCCA、WCA 等方法 30 次，並紀錄其叢集過程中
封包數之比較以及所形成之叢集數。圖 23 所示為封包數之比較，圖 24 則為所形成之叢集數。 
 30 
在能力的比較上，本研究選用了節點剩餘電力百分比、忙碌程度及通訊範圍等因子作為比較的依
據，另外為了讓每一群組有較佳的溝通能力，亦限制了群組中每一子節點對管理者的距離。 
而經由實驗結果，可以驗證本研究所發展之 UFCM 法不但穩定，且相較於過去學者所提出
的分群法可降低網路環境初始時分群形成的資訊量，除了可避免廣播風暴的產生，更進而達到降
低初始成本之目的。 
參考文獻 
[1] O. Arpacioglu, T. Small, and Z. Haas, “Notes on Scalability of Wireless Ad Hoc Networks,” IETF 
Internet draft, draft-irtf-ans-scalability-notes-01.txt, (Work in Progress), 2003. 
[2] O. Babaoglu, and R. Drummond, “Streets of Byzantium: Network Architectures for Fast Reliable 
Broadcasts,” IEEE Transactions on Software Engineering, Vol. SE-11, No. 6, pp. 546-554, June 
1985. 
[3] D. J. Baker and A. Ephremides, “The Architectural Organization of a Mobile Radio Network via a 
Distributed Algorithm,” IEEE Transactions on Communications, COM-29, pp. 1694-1701, 1981. 
[4] S. Bandyopadhyay and E.J. Coyle, “An Energy Efficient Hierarchical Clustering Algorithm for 
Wireless Sensor Networks,” IEEE INFOCOM 2003, San Francisco, USA, pp.1713-1723, 2003. 
[5] S. Banerjee and S. Khuller, “A Clustering Scheme for Hierarchical control in Multi-hop Wireless 
Network,” Proceedings of Twentieth Annual Joint Conference of the IEEE Computer and 
Communications Societies (INFOCOM), pp.1028-1037, 2001. 
[6] M. Barborak, M. Malek, A. Dahbura, ” The Consensus Problem in Fault Tolerant Computing,” 
ACM computing Surveys, Vol. 25, No. 2, pp. 171-220, 1993. 
[7] A. Bar-Noy et al., “Shifting Gears: Changing Algorithms on the Fly to Expedite Byzantine 
Agreement,” Proceedings of the Symposium on Principles of Distributed Computing, pp. 42-51, 
1987. 
[8] S. Basagni, “Distributed Clustering for Ad Hoc Networks,” Proceedings of International 
Symposium on Parallel Architectures, Algorithms and Networks, pp. 310–315, 1999. 
[9] S. Basagni, I. Chlamtac and A. Farago, “A Generalized Clustering Algorithm for Peer-to-peer 
Networks,” Proceedings of Workshop on Algorithmic Aspects of Communication (Satellite 
Workshop of ICALP), 1997. 
[10] E. M. Belding-Royer, “Multi-level Hierarchies for Scalable Ad Hoc Routing,” Wireless Networks, 
pp. 461-478, 2003. 
[11] D.A. Beyer, “Accomplishments of the DARPA Survivable Adaptive Networks SURAN Program,” 
Proceedings of IEEE MILCOM’90, Monterey, CA, pp. 855-862, 1990. 
[12] G. Chen, F. G. Nocetti, J. S. Gonzalez, and I. Stojmenovic, “Connectivity-based k-hop Clustering 
in Wireless Networks,” Proceedings of the 35th Hawaii International Conference on System 
Sciences (HICSS-35), 2002. 
[13] S. Chen and K. Nahrstedt, “Distributed Quality-of-service Routing in Ad-hoc Networks,” IEEE 
Journal on Special Areas in Communications, 1999. 
[14] D. Dolev and R. Reischuk, “Bounds on Information Exchange for Byzantine Agreement,” Journal 
of ACM, Vol. 32, No. 1, pp. 191-204, Jan. 1985. 
[15] M. Fischer and N. Lynch, “A Lower Bound for the Assure Interactive Consistency,” Information 
Processing Letters, Vol. 14, No. 4, pp. 183-184, June 1982. 
[16] H. Garcia-Molina, F. Pittelli, and S. Davidson, “Applications of Byzantine Agreement in Database 
Systems,” ACM Transactions on Database Systems, Vol. 11, No. 1, pp. 27-47, March 1986. 
[17] M. Gerla, G. P. and S.-J. Lee. “Wireless, Mobile Ad-hoc Network Routing,” IEEE/ACM 
FOUCUS’99, 1999. 
[18] D. K. Gifford, “Weighted Voting for Replicated Data,” Technical Report. CSL-79-14, XEROX 
 32 
Ad Hoc Networks,” CAIP Technical Report 248 - Rutgers University, September 2000. 
[40] J. Sucec and I. Marsic, “Clustering Overhead for Hierarchical Routing in Mobile Ad Hoc 
Networks,” Proceedings of INFOCOM, New York, NY, pp. 1698-1706, 2002. 
[41] J. Sucec and I. Marsic, “Location Management for Hierarchically Organized Mobile Ad Hoc 
Networks,” Proceedings of IEEE WCNC, Orlando, FL, pp. 603-607, 2002. 
[42] J. Sucec and I. Marsic, “Hierarchical Routing Overhead in Mobile Ad Hoc Networks,” IEEE 
Transactions on Mobile Computing, pp. 46-56, 2004. 
[43] S.C. Wang, Y.H. Chin, and K.Q. Yan, “Byzantine Agreement in Generalized Connected 
Network,“ IEEE Transactions on Parallel and Distributed Systems, Vol. 6, No. 4, pp.420-427, 
April 1995. 
[44] S. Weber and L. Cheng, “A Weighted Clustering Algorithm for Mobile Ad Hoc Networks,” 
Communications Magazine, IEEE, 2004. 
[45] J.H. Wesley, et al. “SIFT: Design and Analysis of a Fault-Tolerant Computer for Aircraft Control”, 
Proceedings of IEEE 66, Vol. 10, pp. 1240-1255 Oct. 1978. 
[46] The Network Simulator - NS-2, http://www.isi.edu/nsnam/ns/, 2004. 
 
2 
總裁 Kurt D. Southam 博士所主講，Dr. Southam 在美國有非常長的工作經驗，並曾擔任多
家企業的 CEO，負責企業的發展與策略的制定。此次演講主要偏重技術的現況而非理論的
探討，透過了非常精彩的影片剪輯與投影片的組合，非常的生動且具實務經驗的傳承，獲
益頗多。 
 
【第三場】：Clinical Informatics: An Introduction to Health Practitioners Tools for Daily 
Clinical Use，是由來自 Department of Family and Community Medicine at the University of 
New Mexico 的 B. W. Trevor Rohm 博士所主講。主要探討健康資訊科技的重要性，並且介
紹醫療的臨床實習。其中更包括；臨床的資訊學、病人和健康資訊科技之間的關係，及擴
大生物醫學資訊學的領域至包含醫療和資訊科技的許多知識，非常生動有趣。 
 
二、與會心得 
 
此次出席會議的專家學者來自多個國家，包括：香港、中國大陸、日本、韓國、法國、英
國及台灣。台灣地區則包括聯合大學、彰化師大、中州技術學院、台北科技大學、及本校朝
陽科技大學等。
 
會議中，除了學術界的先進前輩之外，亦有許多的參與者是來自工業界及其所屬研究機
構，對於實務方面的見解與經驗，頗值得學術界做教學與研究時的參考。
 
這次筆者共發表兩篇論文，分別為： A Secure Wireless Sensor Network by Trusted Timely 
Computing Base Model 及 Towards Optimal High Reliable Byzantine Agreement in a Scale Free 
Network。 
A Secure Wireless Sensor Network by Trusted Timely Computing Base Model 所研究的是在
一個階層式分群無線感測網路的架構中，加入 Trusted Timely Computing Base：TTCB)安全信
任機制，藉由 TTCB 建構一個穩定、安全與快速的無線感測網路拓樸。 
由於資訊時代的來臨，網際網路對 21 世紀的人類來說，是高依賴性的通訊工具。從有線
網際網路的成熟，到近年來炙熱的無線網路，都帶給人類在通訊上相當大的幫助。藉由無線
通訊科技的發達，使得人們的溝通不再有地域及距離的限制。而隨著無線網路技術的成熟，
無線網路的技術可以使用在更寬廣的應用，如戰場、火災現場、生態環境、…等。 
近幾年來，由於感測器(Sensor)硬體技術的進步，使得無線感測網路(Wireless Sensor 
Network; WSN)得以快速發展，更成為近年來相當熱門的研究主題之一。WSN 是由一到數個
4 
能展現高度容錯能力的架構在分散式架構中是為一重要的議題，近年來學者們對於網路的
認識更進一步，發現網路具有無尺度的特性，因此無尺度網路提供本研究一個新的思維。所
謂無尺度網路，在複雜的遺傳網路內，不良的細胞彼此作用而併發癌症、在特定的社會與通
訊系統中，疾病與電腦病毒快速傳播而導致流行、有些網路即使大部分節點都已喪失功能，
仍然能夠繼續運作。各領域的研究人員在這幾年中發現，許多自然生態網路都是由相對少數
幾個具有眾多連結的節點所控制，這類節點（或稱集散點，hub）的網路稱為無尺度網路。成
長性（growth）與優先連結性（preferential attachment）是無尺度網路的特性，有助於解釋集
散點的存在：當新節點出現時，往往會與連結性較高的節點相連，隨著時間進展，受歡迎的
節點就會比連結性較低的鄰近節點，擁有更多連結。過去研究都把網際網路模擬成隨機網路，
用來測試新的路由協定對系統壅塞的現象有何影響，但現在已經知道網路是無尺度網路（scale 
free network），運作方式與隨機網路大相逕庭。故本研究將排除以往將網路視為隨機網路，在
一個更符合目前網路狀態的環境中，重新探討拜占庭協議問題，使容錯協議的可靠性及適用
性大增。 
 
在兩篇論文中我們都有很好的研究成果，也深得與會學者的肯定，對於筆者未來的研究具
有莫大的鼓舞作用。
 
透過國科會的補助有機會參與國際研討會，對於國內學者研究能力的提昇，或將國內的研
究成果與國際學者專家學者分享，以彰顯國家的聲譽，應有正面的助益，建議未來國科會仍能
持續提供國內學者這些機會，以參與類似的研討會，互相交流各自領域專長，期能有更多的新
想法。
 
6 
 
 
會議論文集：
 
 
 
 
 
8 
node can play the role of router to help the other nodes in network transmitting the data package [4]. 
From the aforementioned point of view that do not consider security. Because the attacker might have 
control of more than one node, and these malicious nodes might collude to attack the system. When an 
adversary compromises a node, it can extract all key material, data, and code stored on that node [12]. 
Hence, a Trusted Timely Computing Base (TTCB) routing protocol to support a secure wireless sensor 
network is proposed in this paper.  
 The remainder of this paper has organized as follows. Section 2 discusses the characteristics of 
WSN and the related work about attacks. The Publish-Subscription model and TTCB model used in our 
proposed method are also given in Section 2. Section 3 illustrates the methodology that our research 
proposed. The secure WSN provide by TTCB is discussed in Section 4. Finally, we conclude in Section 
5. 
 
2. RELATED WORK 
 As WSNs need not any infrastructure to provide the multi-hop wireless links for the mobile user, 
the network will offer the mechanism for the simultaneous uses of many users in order to widely apply 
for the field of actual practice. However, the method of search-address and ringing is more difficult than 
the common the network, for this reason, the hierarchical routing approach of WSN is able to efficiently 
solve the problems of complex routing, while the clustering is used for setting up and keeping the 
hierarchical routing. In this section, it is first to introduce the features of WSN, the detailed 
Publish-Subscription and TTCB. 
 
2.1 Wireless sensor network 
 The communicative behaviors in WSNs can be characterized by two different types: routing 
(node-to-sink) and broadcasting (sink-to-node or node-to-node). Broadcasting is an essential 
communication requirement for sink and sensor nodes. The node can sense environment information and 
forward information to next node until sink node that is named routing [7,12-14]. Therefore, how to 
increase stable, establish a secure network and decrease the consumption of power is an important issue. 
Moreover, Low-Energy Adaptive Clustering Hierarchy (LEACH) is a most popular hierarchical routing 
approach for WSN [13]. 
 The idea of LEACH [12,13] is to form clusters of the sensor nodes based on the received signal 
strength and use local cluster heads as routers to the sink. The advantage is able to avoid the packet 
collision between sensor nodes so that can decrease the consumption of the power. However, the 
drawback of LEACH is when a node routing address search from a cluster-head to the sink might drain 
their power very soon, which is known as “hot spot” problem [14]. 
 
2.2 Attacks of wireless sensor network 
From the literature of wireless sensor networks [4], many routing protocols are optimized for the 
application of a specific nature of network, but do not consider security. While, the selective forwarding 
and hello flooding is often used to attack a hierarchical WSN [4]. Selective forwarding attacks may 
corrupt some mission-critical applications such as military surveillance and forest fire monitoring. In 
these attacks, malicious nodes behave like normal nodes in most time but selectively drop sensitive 
packets, such as a packet reporting the movement of the opposing forces.  
HELLO messages are used in many protocols by nodes that want to announce their presence and 
proximity to their neighbors. Moreover, in a HELLO flood attack, a malicious node may try to transmit 
a message with an abnormally high power so as to make all nodes believe that it is their neighbor. When 
an adversary advertising a very high-quality route to the base station to every node in the network could 
cause a large number of nodes to attempt to use this route, but those nodes sufficiently far away from the 
adversary would be sending packets into oblivion. Hence, the sensor network becomes a state of 
confusion.  
10 
The first phase: Hierarchical multi-cluster WSN is used. 
In a WSN, each Sensor Node (SN) communicates with other sensor nodes by using broadcast in 
WSN, but also leads to a severe problem, such as broadcast storm [2,12,13]. Many researchers proposed 
cluster schemes and broadcast limited to reduce the effect of broadcast storm [2,12,13]. However, 
hierarchical multi-cluster network topology has been more important topic than the other topics recently. 
Therefore, the hierarchical multi-cluster WSN is adopted in our research. The sensor network was 
divided several clusters. Hierarchical multi-cluster WSN place sensor nodes into groups, often called 
clusters. These clusters may have a sensor node called cluster head (CH) that is responsible for route 
maintenance within its cluster and between other clusters [15]. 
WSNs are multi-hop wireless networks that are composed of many SNs communicating with each 
other through wireless links. Each SN has highly mobility in WSN, therefore, the network topology 
changes frequently. Traditional flat routing protocols have been shown to limit scalability, due to their 
route discovery and maintenance procedures [13,14]. However, hierarchies based on clustering have 
been useful to define scalable routing solutions for WSN [13,14]. In the hierarchical multi-cluster WSN, 
each SN in the same cluster communicates with each other directly. Otherwise, the packet is transmitted 
to the corresponding cluster via CH and then to the destination. 
The hierarchical multi-cluster network topology is shown in Figure 2. The concept of hierarchical 
multi-cluster network is the capability to go group users into broadcast domains, which divides logic 
network to instead of physical environment and reduces the traffic loading. A hierarchical multi-cluster 
network focus on network partitioning can improve critical problem such broadcast storm problem or 
routing [2,12,13]. 
 
 
Figure 2: Hierarchical multi-cluster network topology 
 
The second phase: By using a middleware to support a stable WSN topology. 
 According to the historical information can built a middleware to estimate the stability degree of 
WSN and the dependence degree between sensor nodes. By using the middleware can support a stable 
WSN topology to reduce the error rate of packet transmission. 
There are some problem in a WSN, suchlike communication jamming and message collision [1]. In 
addition, each SN has highly mobility in WSN, therefore, the network topology changes frequently and 
unstable. The proposed middleware focuses on the dynamic adjust network path that not only avoid 
jamming and collision but also achieve a stable network topology.  
There are four steps in this phase: 
12 
other CHs. 
Step 3: Each CH connects to new CH that determines by each CH. 
Step 4: The new network topology is established when each CH connects 
to new CH. 
  Then 
Step 1: The network topology does not change. 
} 
 
 
4. BY USING THE TTCB TO IMPROVE THE SECURITY OF HIERARCHICAL MULTI-CLUSTER 
WSN 
According to the DASP routing protocol, the stability of dynamic WSN will be improved. However, 
the adversaries can use powerful laptops with high energy and long communication range to attack the 
sensor network, so that the Quality of Service (QoS) and the trustiness of sensor network is decreased. 
The sensor node was unable to resist the attack because their capabilities were limited such as CPU, 
memory, and bandwidth [4]. In other words, when a secure mechanism is supported that can provide a 
QoS in the WSN. In this section, the TTCB is used to improve the security of hierarchical multi-cluster 
WSN. 
In our research, the TTCB is embedded in each sensor node, as shown in Figure 3. Therefore, each 
sensor node owns the property of TTCB that provides a limited number of security and time-related 
services when the communication is progress. The first service is the Local Authentication Service 
(LAS). It allows sensor node to authenticate the local TTCB, obtain a unique identifier (called eid) and 
establish a shared symmetric key with it. The objective of this key is to protect the communication 
between the sensor nodes. The second service is the Trusted Absolute Time stamping Service (TATS). It 
provides globally meaningful timestamps, since the local TTCB clocks are synchronized. This clock is 
also secure that an attacker cannot modify it. The third service is the Trusted Block Agreement Service 
(TBAS). The service delivers the result obtained from an agreement on the values proposed by a set of 
sensors [3]. 
 
Local
TTCB
OS
Sensor
 
Figure 3: TTCB embedded in sensor node 
 
By using DASP routing protocol, a dynamic stable topology mechanism and stable path between 
sensor nodes is established. However, the selected path only assures to stable cannot assures security for 
packet message transmission. So, the local TTCB is embedded in the sensor node. The communication 
of sensor nodes will use virtual private networks (VPN) that is the TTCB control Channel. TTCB 
Control Channel can guarantee security for packet message transmission. These sensor nodes will share 
the public key to each others that sensor node owns the key only open the packet message. Figure 4 is a 
TTCB mechanism for wireless sensor network.  
 
14 
According to the limited bandwidth and battery on sensor nodes, the communication of wireless sensor 
network will break and loss information that is more important of the instability environment. 
In this paper, the wireless sensor network by TTCB is proposed to support a reliable WSN. The 
objective of this study is to establish a secure WSN by TTCB concept network system that guarantees 
the message transmitted from source node will arrive to destination node and can prevent the behavior of 
attack and falsification by hacker in transmitting.  
However, by using the proposed method, an adaptive backbone path will be selected that can 
reduce the amount of information flow and improve the stability of WSN. However, how to ensure an 
optimal backbone path is very important and worthy to study in the future work.  
 
REFERENCES 
[1] Akkaya, K. and Younis, M. (2005, May). A Survey on Routing Protocols for Wireless Sensor 
Networks. Elsevier Ad Hoc Network Journal, Vol. 3, pp. 325-349. 
[2] Billot, A. (Ed.). (1992). Economic Theory of Fuzzy Equilibria: an Axiomatic Analysis. New York: 
Springer Verlang. 
[3] Chang, C. Y., and Shih, K. P. (2004). ZBP: A Zone-Based Broadcasting Protocol for Wireless 
Sensor Networks. Advanced Information Networking and Applications, Vol. 1, pp. 84-89. 
[4] Choi, J. Y., Kim, H. S., Baek, I., and Kwon, W. H. (2005, July). Cell Based Energy Density Aware 
Routing: A New Protocol for Improving the Lifetime of Wireless Sensor Networks. Computer 
Communications, Vol. 28, Issue. 11, pp. 1293-1302. 
[5] Ciorreia, M., Lung, L. C., Neves, N. F., and Verissimo, P. (2002). Efficient Byzantine-Resilient 
Reliable Multicast on a Hybrid Failure Model. Reliable Distributed Systems, pp. 2-11. 
[6] Cardei, M., Pervaiz, M. O., and Cardei, I. (2006, July). Energy-Efficient Range Assignment in 
Heterogeneous Wireless Sensor Networks. Proceedings of International Conference on Wireless 
and Mobile Communication, pp. 11-11. 
[7] Ciorreia, M., Neves, N. F., Lung, L. C., and Verissimo, P. (2005, March). Low Complexity 
Byzantine-Resilient Consensus. Distributed Computing, Vol. 17, pp. 237-249. 
[8] Correia, M., Verissimo, P., and Neves, N. F. (2001). The Architecture of a Secure Group 
Communication System Based on Intrusion Tolerance. Proceedings of the 21st International 
Conference on Distributed Computing Systems, pp. 17. 
[9] Driankov, D., Hellendoorn, H., & Reinfrank, M. (Ed.). (2000). An Introduction to Fuzzy Control. 
New York: Springer Verlang. 
[10] Farooq, U., Parsons, E. W., and Majumdar, S. (2004). Performance of Publish/Subscribe 
Middleware in Mobile Wireless Networks.  Proceedings of the 4th International Workshop on 
Software and Performance, pp. 278-289. 
[11] Jiang, Q., and Manivannan, D. (2004). Routing Protocols for Sensor Networks. Proceedings of 
Consumer Communications and Networking Conference, pp. 93-98. 
[12] Karlof, C., and Wagner, D. (2003, May). Secure Routing in Wireless Sensor Networks: Attacks 
and Countermeasures. Sensor Network Protocols and Application, pp. 113-127. 
[13] Lyer, R., and Kleinrock, L. (2003, May). QoS Control for Sensor Networks. Proceedings of 2003 
IEEE International Conference on Communications (ICC’03), Vol. 1, pp. 517-521. 
[14] Perkins, C. E., and Samir, D. S. (2001, Feb). Performance Comparison of Two On-Demand 
Routing Protocols for Ad Hoc Networks. IEEE Journal on Personal Communication, Vol. 8, pp. 
16-28. 
[15] Rezaie, M. G., Mansouri, V. S., and Mani, M. (2005, March). Critical Area Attention in Traffic 
Aware Dynamic Node Scheduling for Low Power Sensor Networks. Proceedings of Wireless 
Communications and Networking Conference, Vol. 4, pp. 1933-1938. 
[16] Souto, E., Guimarães, G., Vasconcelos, G., Vieira, M., Rosa, N., and Ferraz, C. (2004). A 
message-oriented middleware for sensor networks. Proceedings of the 2nd Workshop on 
16 
TOWARDS OPTIMAL HIGH RELIABLE BYZANTINE AGREEMENT IN A 
SCALE FREE NETWORK 
 
S.C. Wang 
Graduate Institute of Informatics, 
Chaoyang University of Technology 
 
H.H. Pan 
Graduate Institute of Informatics, 
Chaoyang University of Technology 
 
K.Q. Yan* (Corresponding author) 
Department of Business Administration, 
Chaoyang University of Technology 
 
S.S. Wang 
Department of Industrial Engineering and Management, 
Chaoyang University of Technology 
 
S.C. Yang 
Graduate Institute of Networking and Communication Engineering, 
Chaoyang University of Technology 
 
ABSTRACT 
Byzantine Agreement (BA) problem plays a key role in the design of fault tolerant distributed 
system. Over the years, a number of solutions to BA problem have been proposed with varying 
assumption of the network structures. However, most existing BA protocols are designed for random 
networks. Recently, many large complex networks have emerged and displayed a scale free feature, 
which influences the system to reach a different common value. Unfortunately, existing BA protocols 
and results cannot cope with the new network environment. Therefore, the BA problem needs to be 
revisited. The proposed protocol, Scale Free Network Agreement (SFNA), can make all fault-free 
processors reaching agreement with minimum rounds of message exchange and tolerates the maximum 
number of allowable faulty components. 
Keywords: Random network, Scale Free network, Fault tolerant, Byzantine agreement, Distributed 
system 
 
1. INTRODUCTION 
 The Byzantine Agreement (BA) problem introduced by Lamport et al. [7] is one of the fundamental 
problems in distributed computing. The definition of the problem is to make all fault-free processors in 
an n processor distributed system to reach agreement. Source processor chooses an initial value to start 
with, and communicates each other by exchanging message.  
Traditionally, BA problem defined by Lamport assumes [7]: 
(1) There are n processors, of which at most t (t≤(n-1)/3) processors could fail without breaking down 
a workable network; 
(2) The processors communicate with each other through message exchange in a fully connected 
network; 
(3) The message’s sender is always identifiable by the receiver; 
(4) An arbitrary processor is chosen as a source, and its initial value vs is transmitted to other processors 
18 
still can be executed correctly. There are two characteristics of Trusted Timely Computing Base (TTCB): 
security and synchronization. Therefore, the TTCB is used when the message is transmitted [9]. 
 
PA Ps PB
PC PD
PE PF PG
PH P I
PJ PK PL
: dormant faulty processor : malicious faulty processor
: dormant faulty transmission medium
: malicious faulty transmission medium
 
Fig. 1 Scale free network 
 
 
3. THE PROPOSED PROTOCOL 
In this study, the BA problem is discussed in a synchronous environment. In order to solve the BA 
problem, the faulty type of component should be considered. The symptoms of processor failure and 
transmission media failure can be classified into two categories [8]: dormant (such as crash, stuck-at, or 
delay) and malicious (also called arbitrary or Byzantine faults). A dormant faulty component always can 
be identified by the receiver if the transmitted message was encoded appropriately (i.e. by NRZ-code, 
Manchester code [4]) before transmission. On the other hand, the malicious faulty components are 
unpredictable. 
In this paper, the BA problem is revisited to enlarge the fault tolerant capability by allowing both 
dormant faults and malicious faults exist in the system simultaneously. The proposed protocol, Scale 
Free Network Agreement (SFNA), can make each fault-free processor reach a common value to cope 
with the faulty component in the SFN. 
However, SFNA is used to solve the BA problem in a SFN with fallible processors and transmission 
media, and the assumption as to the fallible components is the dual failure mode. Hence, the constraints 
of the SFNA are as follows: 
Constraint 1: n>3Pm+Pd. 
Constraint 2: c>2(Pm+Cm)+Pd+Cd. 
 n be the total number of processors in the SFN. 
 c be the connectivity of SFN. 
20 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
In the γth (γ>1) round of message exchange, each processor transmits values at the (γ-1)th level in its 
ms-tree to the others and itself through virtual channel. Then, each processor stores the received values 
at γth level of its ms-tree. The ms-tree is a tree structure that is used to store the received message [12]. 
Fig. 3(c) shows the vector of each processor received in the second round. The ms-trees of fault-free 
processor PA after the third round and fourth round in the message exchange phase are shown in Fig. 
3(d). Fig. 3(e) shows the vector of processor PA received in the fifth round. 
After the message exchange phase, the tree structure of each fault-free processor has converted from 
ms-tree to ic-tree by deleting the vertices with duplicated names (such like SAA will be deleting) in the 
decision making phase [12]. The example ic-tree has shown in Fig. 3(f). Eventually, using the function 
VOTE to root the value S for each fault-free processor’s ic-tree {val(S) = VOTE(val(SA), val(SB), …, 
val(SL)) = 0}, an agreement value 0 can be obtained, as shown in Fig. 3(g), and the decision making 
phase has completed. In other hand, after executing the SFNA
 
protocol, all fault-free processors agree on 
a common value 0 for the example. 
 
Protocol SFNA (Source processor with initial value vs) 
Compute the number of rounds required γ=(n-1)/3+2 
Message Exchange Phase:  
γ=1 do: 
 
(1)The source processor transmits its value vs to other processors and itself 
by TTCB through virtual channel. 
(2)Each processor stores vs received by TTCB through virtual channel in the 
root of its ms-tree. 
(3)If the source processor is dormant fault, and then the value “λ” has 
replaced the initial value received from source processor. 
For γ>1, do: (1) Each processor without the source processor transmits the value at level 
γ-1 in its ms-tree to each other and itself by TTCB through virtual 
channel. 
(2) If the processor did not receive any value from other processors, then 
uses the value “λ” to replace it. 
(2)Each processor stores the received values by TTCB through virtual 
channel in the corresponding vertices at level γ of its ms-tree. 
Decision Making Phase: 
Step 1:  Reorganizing the ms-tree into a corresponding ic-tree.  
Step 2:  The root S of each processor’s ic-tree and obtaining the common value 
VOTE(S) by using function VOTE. 
Function VOTE(α) 
(1) Eliminate all λs to lessen the influence of faulty behavior. 
(2) val(α), if the α is a leaf. 
(3) The majority value in the set of {VOTE(αi)|A≤i≤N and vertex αi is a child of 
vertex α}, if such a majority value exists. 
(4) A default value φ is chosen, otherwise. 
Fig. 2 The proposed protocol SFNA 
22 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Fig. 3(d) The ms-tree of processor PA after the 3rd and the 4th round 
Level 1 Level 2 Level 3   Level 1 Level 2 Level 3 Level 4  
S SA SAA 0  S SA SAA SAAA 0 
  SAB 0     SAAB 0 
  SAC 0     SAAC 0 
  SAD λ     SAAD λ 
  SAE λ     SAAE λ 
  SAF 0     SAAF 0 
  SAG 0     SAAG 0 
  SAH 0     SAAH 0 
  SAI 0     SAAI 0 
  SAJ 0     SAAJ 0 
  SAK 0     SAAK 0 
  SAL λ     SAAL λ 
          
 SB SBA 1    SAB SABA 0 
  SBB 1     SABB 0 
  SBC 1     SABC 0 
  SBD 1     SABD λ 
  SBE λ     SABE λ 
  SBF 1     SABF 0 
  SBG 1     SABG 0 
  SBH 1     SABH 0 
  SBI 1     SABI 0 
  SBJ 1     SABJ 0 
  SBK 1     SABK 0 
  SBL λ     SABL λ 
 . .    . .   
 . .    . .   
 . .    . .   
 SL SLA λ   SL SLA SLAA λ 
  SLB λ     SLAB λ 
  SLC λ     SLAC λ 
  SLD λ     SLAD λ 
  SLE λ     SLAE λ 
  SLF λ     SLAF λ 
  SLG λ     SLAG λ 
  SLH λ     SLAH λ 
  SLI λ     SLAI λ 
  SLJ λ     SLAJ λ 
  SLK λ     SLAK λ 
  SLL λ     SLAL λ 
          
       SLB SLBA λ 
        …  
24 
val(SABC)=VOTE(val(SABCD),val(SABCE),val(SABCF),val(SABCG),val(SABCH), 
val(SABCI),val(SABCJ),val(SABCK),val(SABCL)) 
= VOTE(λ,1,0,0,0,0,0,0,λ)=0 
val(SABD)=VOTE(val(SABDC),val(SABDE),val(SABDF),val(SABDG),val(SABDH),va
l(SABDI),val(SABDJ),val(SABDK),val(SABDL))  
= VOTE(λ,λ,λ,λ,λ,λ,λ,λ,λ)=λ 
… 
val(SABL)=VOTE(val(SABLC),val(SABLD),val(SABLE),val(SABLF),val(SABLG), 
val(SABLH),val(SALI),val(SABLJ),val(SABLK))  
= VOTE(λ,λ,λ,λ,λ,λ,λ,λ,λ)=λ 
val(SAB)=VOTE(val(SABC),val(SABD),val(SABE),val(SABF),val(SABG),val(SABH),
val(SABI),val(SABJ),val(SABK), val(SABL))= VOTE(0,λ,λ,0,0,0,0,0,0,λ)=0 
val(SACB)=VOTE(val(SACBD),val(SACBE),val(SACBF),val(SACBG),val(SACBH), 
val(SACBI),val(SACBJ),val(SACBK),val(SACBL)) 
=VOTE(0,λ,λ,0,0,0,0,0,λ)=0 
val(SACD)=VOTE(val(SACDB),val(SACDE),val(SACDF),val(SACDG),val(SACDH), 
val(SACDI),val(SACDJ),val(SACDK),val(SACDL))  
= VOTE(λ,λ,λ,λ,λ,λ,λ,λ,λ)=λ 
… 
val(SACL)=VOTE(val(SACLB),val(SACLD),val(SACLE),val(SACLF),val(SACLG), 
val(SACLH),val(SACLI),val(SACLJ),val(SACLK))  
= VOTE(λ,λ,λ,λ,λ,λ,λ,λ,λ)=λ 
val(SAC)=VOTE(val(SACB),val(SACD),val(SACE),val(SACF),val(SACG),val(SACH),
val(SACI),val(SACJ),val(SACK) val(SACL))=VOTE(0,λ,λ,0,0,0,0,0,0,λ)=0 
… 
val(SA)=VOTE(val(SAB),val(SAC),val(SAD),val(SAE),val(SAF),val(SAG),val(SAH), 
val(SAI),val(SAJ),val(SAK),val(SAL))= VOTE(0,0,λ,λ,0,0,0,0,0,0,λ)=0 
… 
val(SLAB)=VOTE(val(SLABC),val(SLABD),val(SLABE),val(SLABF),val(SLABG), 
val(SLABH),val(SLABI),val(SLABJ),val(SLABK))= VOTE(λ,λ,λ,λ,λ,λ,λ,λ,λ)=λ 
val(SLAC)=VOTE(val(SLACB),val(SLACD),val(SLACE),val(SLACF),val(SLACG), 
val(SLACH),val(SLACI),val(SLACJ),val(SLACK))= VOTE(λ,λ,λ,λ,λ,λ,λ,λ,λ)=λ 
… 
val(SLAK)=VOTE(val(SLAKB),val(SLAKC),val(SLAKD),val(SLAKE),val(SLAKF), 
val(SLAKG),val(SLAKH),val(SLAKI), val(SLAKJ))=VOTE(λ,λ,λ,λ,λ,λ,λ,λ,λ)=λ 
val(SLA)=VOTE(val(SLAB),val(SLAC),val(SLAD),val(SLAE),val(SLAF),val(SLAG), 
val(SLAH),val(SLAI),val(SLAJ),val(SLAK)) = VOTE(λ,λ,λ,λ,λ,λ,λ,λ,λ,λ)=λ 
… 
val(SL)=VOTE(val(SLA),val(SLB),val(SLC),val(SLD),val(SLE),val(SLF),val(SLG), 
val(SLH),val(SLI),val(SLJ),val(SLK)) = VOTE(λ,λ,λ,λ,λ,λ,λ,λ,λ,λ,λ)=λ 
 val(S)=VOTE(val(SA),val(SLB),val(SC),val(SD),val(SE),val(SF),val(SG),val(SH),  
         val(SI), val(SJ), val(SK),val(SL)) = VOTE(0,1,1,0,λ,0,0,1,0,0,0,λ)=0 
Fig. 3(g) The common value VOTE(S) of fault-free processor PA  (Continued). 
Fig. 3 An example of executing the SFNA 
 
 
 
26 
Proof. In the ic-tree there are t+1 vertices along each root-to-leaf path. Because there are at most t faulty 
processors in the network, there is at least one correct vertex along each root-to-leaf path. Using Lemma 
3, there is at least one common vertex in every path; thus, a common frontier exists in the ic-tree. ▄ 
 
Lemma 5. Let α be a vertex, α is common if there is a common frontier in the subtree rooted at α. 
Proof. By induction on the heights of α. In the case of α’s heights is 0 and the common frontier (α itself) 
exists, and then α is common. If the case of α’s height is η. The children of α are all in common using 
the induction hypothesis with the height of the children at η-1. Therefore, α is also common. ▄ 
 
Corollary 1. The root is common if a common frontier exists in the ic-tree. 
 
Theorem 2. The root of a fault-free processor’s ic-tree is common. 
Proof. Using Lemmas 3, 4 and 5 and Corollary 1, the theorem is proved. ▄ 
 
Theorem 3. The SFNA protocol can solve the BA problem in the SFN. 
Proof. To prove this theorem, it must be shown that SFNA meets (Agreement’) and (Validity’). 
(Agreement’): root S is common. 
By Theorem 2, (Agreement’) is satisfied. 
(Validity’): val(S)= vs for each fault-free processor, if the source processor is fault-free. 
Since the source is fault-free, it transmits the same initial value vs to all processors. Based on this 
common initial message, all fault-free processors execute message exchanges. Therefore, the true value 
of correct vertices for all fault-free processor ms-trees is vs. When the ms-tree is reorganized into an 
ic-tree, the common messages all remain (because the reorganization rules delete only certain vertices 
and no values are revised). Thus, each correct vertex in the ic-tree is common (Lemma 3) and the true 
value is vs since the source is fault-free. Using Lemma 3, the root of the ic-tree is also a correct vertex. 
Using Theorem 2, this root is common. The computed value val(S)= vs in the root of all fault-free 
processors. Thus, (Validity’) is also satisfied. ▄ 
5.2. Complexity 
The complexity of SFNA is defined in terms of (1) the number of message exchange (rounds) and (2) 
the maximum number of allowable faulty components. Theorems 4 and 5 will show that the optimal 
solution is reached. 
 
Theorem 4. SFNA requires t +2 rounds to solve the generalized (including dormant faulty 
processors/transmission media and malicious faulty processors/ transmission media) BA in the Scale 
Free network if c>2(Pm+Cm)+Pd +Cd, where t =(n-1)/3, and t+2 is the minimum number of message 
exchange rounds. 
Proof. During the message exchange phase, SFNA requires t+2 rounds and no message exchanges are 
required during the decision making phase. Thus, SFNA requires t+2 rounds of message exchanges. 
Furthermore, for a fail-safe network, the transmission medium is reliable, and then t+1 round are proven 
as the lower boundary for message exchanges. Because using virtual channel to transmit message can 
remove the faulty influences from faulty components and let the network structure like a fully connected 
network. Thus, the required number of rounds for solving the generalized BA problem in a SFN should 
not be less than t+1. Using the result of Wang et al., two rounds of message exchange are the minimum 
number of rounds to solve the BA problem if t=0 [11]. 
Thus, it is impossible that the number of rounds required is t+1. Otherwise, only one round of 
message exchanges can solve the BA problem for the case t=0 in a generalized faulty assumption. This 
contradicts the results of Wang et al [11]. Thus, t+2 rounds are the minimum number of rounds required 
to solve the BA problem in the generalized fault assumption in which both the processors and 
