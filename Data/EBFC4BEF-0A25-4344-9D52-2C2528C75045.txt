究分析使用者需求。根據這個實驗，我們歸納出災區救難緊急
通訊系統的功能及效能需求，並根據需求實作了 Walkie-
Talkie-Like 系統可供大型災區救災緊急通訊系統之用。最
後，根據我們在災區緊急通訊系統上多年的研究，我們提出了
一個更有效，能支援更多使用者的「應急行動通訊系統」，利
用無線 P2P 技術將災區內斷訊但未受損的基地台串連起來服務
災區內的手機用戶，這個系統所能發揮的功效將遠遠超過其他
所有緊急通訊系統。 
 
英文摘要： Internet applications that use P2P Technology become 
the traffic hog of Internet. Most of these 
applications, such as BitTorrent, YouTube, Skype, and 
IPTV, are multimedia applications. The plenty network 
capacity has been exhaustively consuming by these 
traffic hogs so that many network operators begin to 
limit the use of this type of applications in order to 
avoid the performance degradation of their services. 
How to enhance service quality without increasing 
network capacity has become an important research 
issues. This project is to incorporate QoS support 
into transport and network layer protocols. In this 
project, we investigate the following issues: 
•Partial-Reliable TCP/UDP protocol 
•Integrated VoIP Quality Enhancement Mechanisms 
•QoS aware scheduling for routers 
•Applications - Mass VoIP Conference 
•Applications - P2P Streaming Over P2Pnet 
•Applications – Emergency Communication System for 
large scale natural disaster 
 
 
ii 
 
 
摘要 
由於近年來基於 P2P 技術的網路應用蓬勃發展成為網路上佔用最大流量的應用，
這些應用以多媒體的應用為主，例如 BitTorrent、VoIP、 YouTube、與 IPTV，各
大網路服務公司原本還算充裕的頻寬逐漸承受不住如此大量的訊務需求而影響
其服務品質，紛紛採取各種手段限制 BT 等應用的訊務。 
在有限的頻寬下，如何提升服務品質便成為一個非常關鍵的問題。本計畫旨在研
究傳輸層及網路層的協定，增加支援服務品質的機制，所研發的技術除了提供網
路多媒體通訊之運用之外，更於 MANET 上加上 P2P 技術，提出 P2Pnet 架構，
可供群組行動通訊網路之用，並將 P2Pnet 應用於大型災區救災緊急通訊系統之
建構。 以下是本計畫研究的議題: 
 服務品質差異化的 TCP/UDP 傳輸通訊協定 
 運用差異化傳輸協定及語音辨認技術提升語音及影像通訊之品質 
 能提升服務品質的路由器排程 
 應用系統 -大型網路語音會談 
 應用系統 - P2P Streaming Over P2Pnet 
 應用系統 – 災區救難緊急通訊資訊系統 
我們運用 Partial-Reliable TCP 於傳輸 Video 影像，對重要影格 (I-Frame)提供遞
送保證，而對其他不重要影格提供有條件的遞送保證, 如此，在有限頻寬下，可
提升即時影像傳輸的效能。此外，針對 MANET 及 Sensor Network 不可靠之特性，
提出 Hop-by-Hop TCP 可提升 MANET 及 Sensor Network 在資料傳輸上的效能。
我們也對 DCCP 協定進行研究，發覺 DCCP 雖然立意良好，但在 VoIP 等即時性網
路應用上無法爭取足夠頻寬，仍無法支援 VoIP 之應用。其原因是因為 DCCP 在啟
動控制壅塞時會延後送出封包，影響聲音品質，我們提出調整編碼速率的方法控
制壅塞，但可以維持聲音品質。 
此外，有鑑於 TCP 的壅塞控制非常複雜，初學者常常花了很多時間仍然無法窺
得門逕，我們特地設計了一個 TCP 壅塞控制模擬器讓使用者可以很輕鬆的學習
TCP 壅塞控制機制。  
在大型 VoIP 會議方面，我們發展出一個混合 Full-Mesh Cluster 及 Multicasting 
Tree 的語音傳輸架構，可以有效的支援大型 VoIP 會議，此外我們以語音之能量
作為分辨語音與噪音的基礎，發展出利用 VAD (Voice Activity Detection)控制回音/
噪音的技術，可以有效過濾困擾 VoIP 會議的回音問題，使得大型網路語音會議
iv 
 
Abstract 
Internet applications that use P2P Technology become the traffic hog of Internet. 
Most of these applications, such as BitTorrent, YouTube, Skype, and IPTV, are 
multimedia applications. The plenty network capacity has been exhaustively 
consuming by these traffic hogs so that many network operators begin to limit the use 
of this type of applications in order to avoid the performance degradation of their 
services. How to enhance service quality without increasing network capacity has 
become an important research issues. This project is to incorporate QoS support into 
transport and network layer protocols. In this project, we investigate the following 
issues: 
 Partial-Reliable TCP/UDP protocol 
 Integrated VoIP Quality Enhancement Mechanisms 
 QoS aware scheduling for routers 
 Applications - Mass VoIP Conference 
 Applications - P2P Streaming Over P2Pnet 
 Applications – Emergency Communication System for large scale natural 
disaster 
We propose to use Partial-Reliable TCP (PR-TCP) for Video communications. 
PR-TCP offers reliable delivery for I-frames and conditional delivery for other frames. 
By this way, we can enhance the service quality when the network bandwidth is 
limited. Furthermore, we investigate QoS-aware scheduling algorithms for routers in 
MANET/P2Pnet. In VoIP, we investigate the techniques to support large scale VoIP 
conferencing. We first propose a technique to distinguish voice from 
noise/echo/silence based on energy level. By suppressing noice/echo/silence, we can 
increase the number of participants in a VoIP conference without quality degradation. 
Moreover, we proposed a new P2P topology that can minimize packet loss and 
end-to-end delay time as well as balancing the loads, called MLDST (Minimum Loss 
Diameter Spanning Tree). Finally, we integrated all above technologies onto 
MANET/P2Pnet with some applications such as massive VoIP conference and P2P 
streaming. P2Pnet can be used to support some special environments such as mobile 
learning environment and emergency communication systems for disastrous area. On 
top of P2Pnet, we have implemented an emergency communication system that can 
support walkie-talkie like communication. Two versions, single-hop and multi-hop 
were implemented. The multi-hop system is particularly useful when either 
face-to-face communication or direct wireless links were blocked by the obstacles of 
vi 
 
 
 
 
 
 
 
 
 
 
 
 
viii 
 
Figure 1 Architecture of server-client model ............................................................... 10 
Figure 2 Architecture of peer-to-peer network ............................................................ 11 
Figure 3 Architecture of a CoolStreaming system ....................................................... 15 
Figure 4 Administrative organization of peers in ZIGZAG ......................................... 16 
Figure 5 The multicast tree of ZIGZAG ...................................................................... 17 
Figure 6 Example of Splitstream ................................................................................. 19 
Figure 7(a) SP (b) FH (c) MST (d) RB ........................................................................ 21 
Figure 8 MLDST on PlanetLab ................................................................................... 33 
Figure 9 MST on PlanetLab ......................................................................................... 34 
Figure 10 SP tree on PlanetLab .................................................................................... 35 
Figure 11 Frame-wise PSNR ....................................................................................... 36 
Figure 12 Packet loss rate measured at the end node of virtual Loss Diameter .......... 37 
Figure 13 Average packet delay measured at the end node of Delay Diameter........... 38 
Figure 14 Average frame-wise PSNR .......................................................................... 39 
Figure 15 Virtual Loss Diameter .................................................................................. 40 
Figure 16 Delay Diameter ............................................................................................ 41 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
10 
 
I、Introduction 
1.1 Peer-to-Peer Multicasting Network 
As advance of network technology, many new network services emerged rapidly, such as 
real-time multimedia streaming service.  Conventional server-client model, as depicted in figure 1, 
is no longer adequate to support these kinds of services because of the extremely heavy traffic load 
they generate and the stringent time requirement they ask.  Server-client topology puts entire 
traffic on a single link connecting the server and each requesting clients.  Under this circumstance, 
the link bears a great burden such that packets may suffer from huge packet loss and excessive long 
delay.  Therefore, server-client model may not be a good option for real-time multimedia 
streaming service. 
 
Figure 1 Architecture of server-client model 
12 
 
and maintain, well constructed for data transport, quick reaction to nodes failures.  However, most 
of these solutions can only take care of one quality parameter such as delay time. 
Focusing on the video streaming services, we propose to build a multicasting tree that can 
preserve the data quality at a user-acceptable level. 
 
 
II、Related Work  
There already exists many peer-to-peer solutions [4, 7, 9, 10, 15, 17, 18] and can be roughly 
classified into two categories [16].  In mesh-pull based systems, videos are divided into small 
clips for distribution.  If a user demands to watch a video, he/she must send out request messages 
to ask his/her neighbors whether they have the clips of the video or not.  After being notified by 
response messages, the user retrieves those clips from possessing neighbors.  The control 
messages generated create a large overhead.  Moreover, extra delay arises from the round trips of 
requests and responses.  Typical mesh-pull based systems are CoolStreaming [12], PPlive, and 
Chainsaw [13]. 
In tree-based systems [15], video data distributes in clips as well.  Nodes simply receive data 
from their parents after they demand for it [15].  The overhead caused by large amount of 
messages is avoided.  Typical tree-push based systems are Chunkyspread, Splitstream, ESM, and 
ZIGZAG [15]. 
Major characteristics and constraints of both types of systems are summarized as follows. 
1. Both types of systems have a much better scalability than client-server systems. 
2. Existing solutions do not take into account packet loss rate of links.  
Existing researches did not focus on packet loss but only strive for meeting the delay 
requirement of real-time streaming services.  In our opinion, restricting delay under a 
14 
 
This paper proposes to model the problem into a Minimum Loss Diameter Spanning Tree 
(MLDST) problem which can meet stringent delay requirement and minimize the data loss.  The 
rest of this section will briefly review some existing solutions of peer-to-peer streaming services, 
especially for ZIGZAG system, which will serve the benchmark in the evaluation of our solution, 
and a few constrained spanning tree problems. 
 
 
2.1 CoolStreaming 
Different from tree-shaped overlay, Tree-push systems, in which video is pushed from original 
source to peers, peers of Mesh-pull system form a mesh-shaped overlay and pull contents from 
each other.   
CoolStreaming [12] and PPLive are two well-known Mesh-pull systems.  In Mesh-pull 
system, a video is divided into media chunks for users to request from channel server.  Apart from 
channel server, tracker server maintains a list of hosts who are interested in watching the same 
video.  Hosts on the list establish TCP/UDP connections to deliver video chunks cooperatively.  
 The message which hosts use to communicate with each other is called Buffer Map.  Buffer 
Maps indicate available video chunks that a host has and willing to share.  Once a host receives a 
Buffer Maps from another host, it can request for what it needs, the requested chunks will then be 
scheduled to be delivered to it. Figure 3 illustrates a CoolStreaming system. 
16 
 
 
 
2. 3 ZIGZAG 
 ZIGZAG [15] is a single source Tree-push streaming application which had been proved to be 
height logarithmic and able to bound node degree in a constant.  This helps reduce the number of 
processing hops on the delivery path to each client while avoiding network bottleneck and long 
end-to-end delay.  ZIGZAG organizes members into a hierarchy of bounded-size clusters and 
builds a multicast tree rooted at a media server.  The administrative organization of peers is 
depicted in Figure 4. 
 
Figure 4 Administrative organization of peers in ZIGZAG 
 
 Peers in Figure 4 are organized in a multi-layer hierarchy of clusters and defined recursively 
according to following rules (where H is the number of layers and k > 3 is a constant): 
 〃Layer 0 contains all peers. 
〃Peers in layer j < H－1 are partitioned into clusters of size of [k, 3k].   Layer H－1 has only 
one cluster which has a size of [2, 3k]. 
〃A peer in a cluster at layer j < H is selected to be the head of that cluster.  This head 
becomes a member of layer j + 1 if j < H – 1.  The server S is the head of any cluster it 
18 
 
2.4 Chainsaw 
 Chainsaw [13] is a request-response based high bandwidth data dissemination protocol 
drawing upon gossip-based protocols and BitTorrent.  The source node, called a seed, generates a 
series of new packets with monotonically increasing sequence numbers.   
  Peers in Chainsaw request data from others and thus make Chainsaw a Mesh-pull approach.  
Peers maintain the states of their neighbors.  The majority of the information they posses is a list 
of packets that each neighbor has.  Peers are notified of new packets by their neighbors and must 
explicitly request a packet from a neighbor in order to receive it.  Every peer maintains a window 
of interest, which is the range of sequence numbers of packets that the peer is interested in 
acquiring at current time.  It also maintains and informs its neighbors about a window of 
availability, which is the range of packets that it is willing to upload to its neighbors.  The window 
of availability will typically be larger than the window of interest. 
 A peer keeps track of what packets it has requested from every neighbor and ensures that it 
does not request the same packet multiple times.  It also limits the number of requests to some 
given neighbors to ensure balanced member load. 
 
 
2.5 Splitstream 
 In Splitstream [2], which is a Tree-push approach, data is divided into several disjoint sections 
called stripes.  To do the dissemination, one tree is built for each stripe.  So, in order to receive 
the complete stream, a node must join every multicast tree.  
 Every node plays the role of an interior node in exactly one tree.  Therefore it ensures that 
each node will never upload more than it receives.  Figure 6 depicts how Splitstream transmits 
video stripes through multiple trees.  Data is split into two stripes.  An independent multicasting 
20 
 
seconds at most for a node to switch to a new parent after it detects a low performance.  But the 
protocol running on transmission path influences the choice of this value since switching to a new 
parent requires going through a slow-start phase, which may take 1 to 2 seconds to reach the full 
data rate.   
 
 
2.7 Spanning Tree for Data Collection 
In [16], authors analyzed several spanning tree topologies.  Traditional spanning tree 
topologies were examined and compared.  In a shortest path spanning tree, the distance, say, the 
total weight of the path, from the root node to all other nodes is minimized.  Such a tree is easily 
constructed by Dijkstra’s algorithm, denoted as SP.  A fewest hop spanning tree that minimizes the 
number of hops along the path from each node to the root node is denoted as FH.  The other 
typical problem is the minimum spanning tree problem, which minimizes the total sum of edge 
weights and can be constructed by Prim’s or Kruskal algorithm and is denoted as MST.  
 The spanning trees created by FH tend to be shallow and fat with the average node degree 
being fairly large.  On the other hand, FH minimizes the data loss when a node or link fails.  
MST grows deeply and skinny because its only criterion is the total edge weight.  SP tends to have 
smaller node degrees and grow deeper than FH depending on the edge weight.  Figure 7 shows all 
four spanning trees. 
 
22 
 
of different algorithms.  Experiment results show that RB performs better in many aspects.   
 
 
2.8 Spanning Tree Problems with Constraints 
2.8.1 Bounded Diameter Spanning Tree 
Bound-Diameter Spanning Tree and related problems are discussed in [3]. Diameter is defined 
as the longest path from an arbitrary node to any other destination.  
BDST problem is defined as: Given a graph G (V, E), weight W(e) ∈ ℤ+, for each e ∈ E, 
positive integer D ≤ |V|, positive integer B, find a spanning tree T for G such that the sum of the 
weights of the edges in T does not exceed B and such that T contains no simple path with more than 
D edges.  It remains to be NP-complete for any fixed D ≥ 4, even if all edge weights are either 1 
or 2.  It can be solved easily in polynomial time if D ≤ 3, or if all edge weights are equal.   
 BDST can be the base of our problem model if we replace its link weight by the parameters 
we interested in.  Since the number of peers in a peer-to-peer network will mostly be large, our 
modeling should be of NP-complete complexity as well. 
 
 
2.8.2 Minimum Diameter Spanning Tree 
Consider a Euclidean graph that every link of the graph has a weight.  Instead of minimizing 
total cost of the spanning tree, Minimum-Diameter Spanning Tree tends to minimize the diameter 
of the tree.   
MDST (Minimum-Diameter Spanning Tree) problem is described in [3] and [6]: Given a 
graph G = (V, E) and a cost function W(e) ∈ ℤ+, for all e ∈ E, find a spanning tree T for G, such that 
24 
 
system to meet the stringent delay constraint. 
 However, traditional spanning tree algorithms have some structural characteristics that may 
become obstacles on the way to reach our objective.  Different spanning tree algorithm constructs 
trees with different criterions and thus forms unique structure characteristics.  The typical two 
spanning tree algorithms are minimum spanning tree and shortest-path spanning tree. 
 A minimum spanning tree has a minimum total cost.  It often has a long tail in the tree.  A 
long tail may cause large hop count and long delay if link weight is link delay.  Long delay is an 
enemy in a streaming service because it significantly increases the waiting time on user end, or 
even increases the number of dropped packets which exceeds playback point, and thus reduces the 
quality of service.  Note that the startup delay is also included in the metrics of quality of service. 
 As for single-source shortest path algorithm, which also generates spanning trees, their 
objective is to find a shortest path from the source to all other nodes.  The node degree in the 
resulting spanning tree is unbounded.  Large node degree will increase the processing time within 
a node and thus increase total delay. 
 
 
III、Proposed Approach 
3.1 MLDST (Minimum virtual Loss Diameter Spanning Tree) 
In order to reduce the damage associated with the long transmission path, the objective of this 
research is to find a multicast tree for a given peer-to-peer IPTV network that demands quality of 
service.  Specifically speaking, we want to build a spanning tree which has minimum data loss 
rate under several constraints. 
“Diameter” of a spanning tree is defined as “the longest path from the root to all other nodes”.  
26 
 
delay from ν1 to any other node.  Virtual Loss Diameter = Maximum simple path S ∈ T         ∈ , is 
defined as the maximal accumulated packet loss rate of any simple path rooted at ν1.   
The optimization function is defined as follows:  
Given G(V, E), delay bound (D) and degree bound (b), find a spanning tree T rooted at v1, such 
that: 
virtual Loss Diameter is minimized, while Delay Diameter < D and node degree < b.  
 Our objective is to minimize the virtual Loss Diameter in a spanning tree while Delay 
Diameter and node degree are both bounded.  In MLDST, virtual Loss Diameter is just taken as an 
index to simplify the model for good MLDST. 
 Delay Diameter represents the largest accumulated delay from root to any other nodes.  By 
bounding it, we can assure the worst case transmission delay is under control.  On the other hand, 
the bound of Delay Diameter can also determine the size of MLDST, since the larger the bound is 
defined, the longer a single path could be. 
 
 
3.2 NP-Completeness of MLDST 
 (A) MLDST is in NP: 
 We first show that MLDSTNP.  Assuming that we are given a graph G(V, E), two 
parameters on each edge, say, delay d and packet loss rate p, and two predefined bound D>3 and B.  
There is a k-nary spanning tree T given, where maximum d1,m ≤ D, ∀ m ∈ T and k ≤ b.  Then we 
verify this instance by checking if maximum ∑p1,m , ∀ m ∈ T is the minimum amount all possible 
solutions.  The verification algorithm performs in polynomial time. 
(B) MLDST is NP-Complete:  
 As we illustrated in Section 2.8.3, a BDST (Bounded Diameter Spanning Tree) problem is a 
NP-Complete problem if node degree is greater than 3.  We can BDST to MLDST 
28 
 
3.4 Heuristic MLDST 
 Our heuristic algorithm is quite simple and easy to understand.  Every edge has two network 
parameters, delay and packet loss rate.  While executing a Dijkstra’s algorithm, total delay and 
total packet loss rate of each intermediate path is calculated.  We modified the original Dijkstra’s 
algorithm so that Delay Diameter and the degree of each node will be constantly examined to meet 
the constraints.   
If a node exceeds the degree limit, the link with high loss rate will first be abandoned.  
Priority is given to loss rate, instead of delay.  That is, we disconnect links with higher loss rate 
prior to the ones with longer delay.  Once a link is disconnected, data must be rerouted to 
downstream peers.   
 The resulting MLDST is only responsible for transmitting one piece of data.  To receive 
complete data, many MLDSTs must be constructed for each piece of data.  These multicasting 
trees need not to be fully disjoined.   
 Notice that data partitioning is not our concern. 
 
 
3.5 Pseudo Code of Heuristic MLDST 
Heuristic MLDST (G, w, s) 
Initialize−Single−Source(G, s) 
  do for each edge (u, v) ∈ E[G] 
   // use the weight of (u, v) to update current shortest path 
do RELAX(u, v, w) 
 for each edge (u, v) ∈ E[G] 
  do if d[v] > d[u] + w(u, v) 
30 
 
for the worst case of packet loss since we were mainly examining PSNR.  In our experimental 
topologies, these two nodes just happened to be same one. 
We calculate PSNR frame-wisely, the average value of frame-wise PSNR, and further examine 
total packet loss rate and average packet delay.  Average packet delay is calculated based on 
received packets.  Total packet loss rate is the proportion of the number of received packets and 
the number of transmitted packets.    
 
 
4.1 Experimental Envirement 
 We first selected high performance peers on PlanetLab and constructed our experimental 
topology.  100 pinging messages were sent to each of carefully selected peer to measure their 
performance.  Peers with shorter delay were given priority to participate in the experiment.  
Fifteen peers were selected to participate in the experiment.  In MLDST, both delay and packet 
loss rate were taken into consideration, while MST and SP trees took delay only. 
 Degree bound was set to 3, while delay bound was set to 1200 ms based on the analysis of 
measured delay between peers and user tolerance.  We used the same set of peers to build all four 
trees. 
 Since the characteristics of a real network change constantly, only a snapshot of the network 
were measured.  Therefore, this experiment had its own limits.  A dynamic version, which is 
beyond the scope of this research, will be more appreciate to model the real network.  Our 
experiments were carried out several hours right after the characteristics measurement was 
performed (i.e. the instantiation of the graph) assuming that the fluctuation of network condition is 
acceptable.   
The measured average delay (ms) and packet loss rate of each pair of selected peers are shown 
in Table 2.  These values were averaged over 100 probes.  Spanning trees mentioned in the 
32 
 
 
 
 
 
Table 2 Measured Delay between pairs of nodes 
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
1  
62.921  
0% 
52.851 
 0% 
168.371  
0% 
229.373  
0% 
155.906  
7% 
225.173,  
0% 
249.227 
3% 
250.927  
0% 
248.442  
0% 
243.048  
0% 
298.532 
 0% 
241.738  
0% 
226.291 
 0% 
249.703, 
1% 
2 
62.921  
0% 
 
13.550  
0% 
129.115  
0% 
156.392 
0% 
238.352 
 0% 
198.364  
0% 
208.153 
8% 
198.313  
0% 
189.622  
0% 
166.590 
 0% 
210.924 
 0% 
179.413  
0% 
201.738  
0% 
199.311 
2% 
3 
52.851,  
0% 
13.550  
0% 
 
133.236  
0% 
161.906 
 0% 
242.550 
0% 
200.089  
0% 
222.582, 
4% 
207.746  
0% 
193.160  
0% 
170.692  
0% 
229.359 
 0% 
183.490  
0% 
205.906  
0% 
200.082, 
1% 
4 
168.371 
0% 
129.115 
 0% 
133.236 
 0% 
 
51.709  
0% 
39.710  
0% 
87.952 
 0% 
100.219 
1% 
95.665  
0% 
84.500  
0% 
62.024  
0% 
105.195 
1% 
74.632  
0% 
97.153  
0% 
90.672  
1% 
5 
229.373  
0% 
156.392 
 0% 
161.906 
 0% 
51.709  
0% 
 
38.027  
0% 
21.031 
 0% 
63.309  
3% 
50.595  
0% 
54.414  
0% 
21.133  
0% 
76.432  
0% 
38.966 
 0% 
61.632  
0% 
55.076  
1% 
6 
155.906  
7% 
238.352  
0% 
242.550 
 0% 
39.710  
0% 
38.027 
 0% 
 
66.934,  
0% 
102.996 
3% 
98.577  
0% 
96.059 
3% 
77.291  
0% 
117.965  
0% 
75.557  
0% 
112.538  
0% 
105.960 
1% 
7 
225.173  
0% 
198.364  
0% 
200.089 
 0% 
87.952  
0% 
21.031  
0% 
66.934 
 0% 
 
35.948  
6% 
16.670  
0% 
2.863 
 0% 
61.453  
0% 
73.782  
0% 
37.021  
1% 
43.514  
0% 
35.560  
3% 
8 
249.227  
3% 
208.153  
8% 
222.582  
4% 
100.219  
1% 
63.309  
3% 
102.996 
 3% 
35.948  
6% 
 
34.650  
4% 
50.533  
2% 
66.028  
1% 
93.811  
0% 
26.701  
3% 
63.344  
13% 
40.121 
 5% 
9 
250.927  
0% 
198.313  
0% 
207.746  
0% 
95.665  
0% 
50.595  
0% 
98.577  
0% 
16.670  
0% 
34.650  
4% 
 
15.842  
0% 
60.841 
 0% 
71.744 
 0% 
30.755  
0% 
28.830 
0% 
11.950 
 4% 
10 
248.442  
0% 
189.622  
0% 
193.160  
0% 
84.500  
0% 
54.414  
0% 
96.059  
3% 
2.863  
0% 
50.533,  
2% 
15.842  
0% 
 
57.334  
0% 
55.044  
0% 
25.527 
 0% 
18.909, 
 0% 
12.735  
3% 
11 
243.048  
0% 
166.590  
0% 
170.692  
0% 
62.024  
0% 
21.133  
0% 
77.291  
0% 
61.453 
 0% 
66.028  
1% 
60.841  
0% 
57.334  
0% 
 
94.552  
0% 
48.132  
0% 
70.415  
0% 
64.020 
 0% 
12 
298.532  
0% 
210.924  
0% 
229.359  
0% 
105.195 
1% 
76.432  
0% 
117.965  
0% 
73.782  
0% 
93.811  
0% 
71.744  
0% 
55.044  
0% 
94.552  
0% 
 
48.613  
1% 
78.899  
0% 
62.460  
0% 
13 
241.738  
0% 
179.413 
 0% 
183.490 
 0% 
74.632  
0% 
38.966  
0% 
75.557  
0% 
37.021  
1% 
26.701  
3% 
30.755 
 0% 
25.527  
0% 
48.132  
0% 
48.613 
 1% 
 
39.227  
0% 
36.900  
0% 
14 
226.291  
0% 
201.738 
 0% 
205.956  
0% 
97.153  
0% 
61.632  
0% 
112.538  
0% 
43.514  
0% 
65.344 
13% 
28.830 
 0% 
18.909  
0% 
70.415  
0% 
78.899 
 0% 
39.227  
0% 
 
25.438  
2% 
15 
249.703  
1% 
199.311  
2% 
200.082  
1% 
90.672  
1% 
55.076  
1% 
105.960  
1% 
35.560  
3% 
40.121  
5% 
11.950  
4% 
12.735  
3% 
64.020 
 0% 
62.460  
0% 
36.900 
 0% 
25.438  
2% 
 
 
 
4.2 Experiment Results 
4.2.1 Topologies 
 Figure 8 shows the result of running Heuristic MLDST algorithm on the nodes we selected 
34 
 
15
9
7
10
14
13
5
2
4
11
8
6
1
3
12
 
Figure 9 MST on PlanetLab 
 
 
 We construct shortest path spanning tree using original Dijkstra’s algorithm in figure 10.  
Same as minimum spanning tree topology, shortest path tree only consider delay as link parameter.  
Video is transmitted from source peer “planetlab1.csie.nuk.edu.tw” to every other peer.  At the 
other end of Delay Diameter, “planetlab2.eecs.northwestern.edu” is selected to measure the result.   
 
 
 
36 
 
 
Figure 11 Frame-wise PSNR 
 
Clearly, measured PSNR values of MLDST are about 10% in average higher than those of 
other tree construction algorithms.  From further examination of the result of MST at selected 
node, we found that the frames of the tail part of the video were all lost during transmission.  
Notice that the packet loss may be caused by both of network congestion and excessive delay. 
Higher PSNR represents better video quality at user end.  In summary, MLDST can provide 
good video quality while total transmission delay is bounded to users’ satisfaction.   
6 
7 
8 
9 
10 
11 
12 
1
 
3
2
 
6
3
 
9
4
 
1
2
5
 
1
5
6
 
1
8
7
 
2
1
8
 
2
4
9
 
2
8
0
 
3
1
1
 
3
4
2
 
3
7
3
 
4
0
4
 
4
3
5
 
4
6
6
 
4
9
7
 
5
2
8
 
5
5
9
 
5
9
0
 
P
S
N
R
 
Framewise PSNR 
MLDST 
MST 
SPTree 
ZIGZAG 
38 
 
 
Figure 13 Average packet delay measured at the end node of Delay Diameter 
  
Figure 13 depicts the average delay of each tree at the far end node of the Delay Diameter.  
Our solution has lowest accumulated delay due to the balanced node degree and the delay 
constraints.  
Since we only take delay as a constraint rather than an objective, a minor superiority in delay 
is acceptable. 
  
MLDST 
SP 
MST 
ZIGZAG 
0 
0.2 
0.4 
0.6 
0.8 
1 
1.2 
1.4 
1.6 
1.8 
A
v
e
ra
g
e
 D
e
la
y
 (
S
e
c
.)
 
Packets Average Delay 
40 
 
 
Figure 15 Virtual Loss Diameter 
 
 Since we avoid selecting links with high packet loss rate into the multicast tree, the loss 
diameter of MLDST is explicitly much smaller than others.  The result showed in figure 15 further 
explains why our solution has better data quality. 
 
MLDST 
SP Tree 
MST 
ZIGZAG 
0 
0.02 
0.04 
0.06 
0.08 
0.1 
0.12 
0.14 
Virtual Loss Diameter 
42 
 
from large amount of control messages.  As a result, Mesh-pull systems seem not appropriate for 
those services that demand short transmission delay.   
 Hereby we choose to take Tree-push based approach to model the problem.  It avoids the 
heavy traffic of control messages and thus reduces transmission delay.  We model the problem into 
a MLDST that minimize the worst case packet loss rate while bound delay and node degree.  This 
problem is then proved to be NP-Complete.  We propose Heuristic MLDST by modifying the 
single-source shortest-path algorithm, Dijkstra’s algorithm, by bounding the Delay Diameter and 
node degree.  Proposed solution depicts a spanning tree with minimum virtual Loss Diameter 
under delay and node degree constraints.  Through several experiment evaluations on PlanetLab, 
we showed that our solution outperforms other tree construction algorithms in video quality.    
The issue of peer churn and membership changes is ignored in our research and will be studied 
in the future.   
Reference 
[1] Marc Bui, Franck Butelle, and Christian Lavault, "A Distributed Algorithm for Constructing a 
Minimum Diameter Spanning Tree", Journal of Parallel and Distributed Computing, Vol. 64, No. 5, 
May, 2004, pp. 571-577.  
[2] Miguel Castro, Peter Druschel, Anne-Marie Kermarrec, Animesh Nandi, Antony Rowstron, Atul 
Singh, "SplitStream: High-Bandwidth Multicast in Cooperative Environments", Proceedings of the 
19
th
 ACM Symposium on Operating Systems Principles, 2003, pp. 298-313. 
[3] M. R. GAREY and D. S. JOHNSON, W. H. Freeman, "Computers and intractability: A guide to 
the theory of NP-completeness", W. H. Freeman and Company, 1979. 
[4] Yu-Hsuang Guo, John K. Zao, Wen-Hsiao Peng, Lin-Shung Huang, Fang-Po Kuo, Che-Min Lin, 
"Trickle: Resilient Real-Time Video Multicasting for Dynamic Peers with Limited or Asymmetric 
Network Connectivity", Proceedings of 8
th
 IEEE International Symposium on Multimedia, 
44 
 
[14] Mohit Singh, Lap Chi Lau, "Approximating Minimum Bounded Degree Spanning Trees to 
within One of Optimal", Proceedings of the 39
th
 Annual ACM Symposium on Theory of 
Computing, San Diego, California, USA, June, 2007, pp.661-670. 
[15] Duc A. Tran, Kien A. Hua, Tai Do, "ZIGZAG: An efficient peer-to-peer scheme for media 
streaming", Proceedings of 22
nd
 IEEE INFOCOM Conference, Vol. 2, 2003, pp. 1283-1292. 
[16] DEB Veeravalli, JB Weissman, "A Robust Spanning Tree Topology for Data Collection and 
Dissemination in Distributed Environments", IEEE Transactions on Parallel and Distributed 
Systems, Vol. 18, No. 5, May, 2007, pp. 608-620. 
[17] Vidhyashankar Venkataraman, Kaouru Yoshida, Paul Francis, "Chunkyspread: Heterogeneous 
Unstructured Tree-Based Peer-to-Peer Multicast", Proceedings of the 14
th
 IEEE International 
Conference on Network Protocols, 2006, pp. 2-11. 
[18] Aggelos Vlavianos, Marios Iliofotous and Michalis Faloutsos, "BiTos: Enhancing BitTorrent 
for Supporting Streaming Applications", Proceedings of 25
th
 IEEE International Conference on 
Computer Communications, 2006, pp. 1-6. 
  
46 
 
為了使封包較快送達目的地端，我們提出了 Hop-by-Hop TCP 的方法，使每個節點使用當地
重傳以保證封包成功的傳到 下一個節點，遺失的封包不必重新由傳送端重傳，能更快反應封
包遺失，並且提昇傳輸可靠度，使封包在高遺失率的情形之下能順利且較為快速的送達目的
地端。 而在感測網路中，這種情況更為明顯，我們將這個協定延伸到感測網路中。我們利用
NS-2網路模擬器進行實驗，驗證我們的機制，實驗在不同的拓樸及負載等參數下進行，觀察
傳輸成功率及封包傳輸時間，以及公平性。實驗結果指出，本方法無論在 MANET 或感測網路
中均有不錯的表現。此項研究成果已經發表在兩個學術會議，以及一個期刊中[2,4,9]。 
C. 有助於提高服務品質的前瞻式封包排程機制 
受到封包網路原本忽略時效性特性之影響，對時效性要求極高的多媒體網路服務，如 Voice 
over IP (VoIP)以及 Video on Demand (VoD)在 All-IP 整合的核心網路上提供時，其服務品
質低於傳統之電路交換網路。 封包在網路的傳遞過程中受到各種因素之影響，於到達目的地
時，可能會造成 long delay time，high jitter 或 packet loss，而在目的地端幾乎已經沒
有補救機會，故而如果能在傳遞的過程中，依封包的時效性及重要性做適度的次序調動
(rescheduling) 而不要依序傳遞(FIFO)，讓過遲的封包提前送出，而將有時間餘裕的封包稍
緩送出，如此截長補短，可提高網路效能及整體 QoS 滿意度。我們在 BBQ (Budget-Base QoS)
的架構下發展一套簡單而有效的方法，在單佇列(Single Preemptive Queue)及多佇列
(Multiple FIFO Queue) 的 router 架構下，根據封包時效性及重要性賦予合適的 profit 
function， 並參考封包在後續路程上各 router的負載狀態以便能更精確預估 封包是否能及
時到達目的地並調整profit function參數以調整封包的送出順序，如此能提高排程的效能。
我們先對單一服務等級的封包排程進行研究，獲得參數調整之技巧，再根據其結果設計多服
務等級的封包排程方法，其重點在於如何調配 profit function 給不同的服務等級。我們藉
由 NS-2 模擬模擬器進行實驗，評估本方法的效能， 實驗結果顯示我們的方法可以較每個
router 僅根據自身所知的資訊進行排程更可以有效提高網路效能，且能對不同的服務等級做
差異化處理以提高整體 QoS 滿意度。最後在多等級服務的實驗環境及評估指標下，網路高負
載的情況，本方法與Simulated Priority Queue排程演算法比較可以提升 34%的整體滿意度。
48 
 
架構上，往往因人數稍微增加就使得延遲時間超過此限制。 
針對此問題，過去有一些研究提出解決方案：例如選擇網路會議中處理能力較強的使用
者設備，先將來自個別說話者的聲音經過混音疊加後再轉送給其他使用者，藉此減少網路流
量的使用與連線數量的負擔。但此作法在使用者所在位置過於分散或遙遠時，仍然會造成末
端的節點無法達到所需的通話品質。 
本研究針對在大範圍語音會談中，與會人數過多與距離過遠時造成的延遲時間問題，提
出了解決方法，我們假設會議中任何時間僅有一個說話者，因此可以刪掉混音的需求，大幅
降低傳輸時間，並以分群組(Cluster)的方式建立 MLDST (Minimum Loss Diameter Spanning 
Tree)  樹狀結構的連線拓樸。我們根據使用者之間彼此的連線速度與實際距離作為分群依據，
從群組中選出連線能力較佳的節點作為群組轉送點(Cluster Header)，透過此轉送點在收到
聲音後做群組內的發送，並藉由樹狀結構達到 Cluster Header之間延遲時間的控制，以確保
所有使用者都能在時間限制之內收到來自其他使用者的語音封包。 
我們藉由 Planetlab平台進行實驗，評估本方法的效能，實驗結果顯示我們的方法可以
在與會人數達到 20人時，仍能有效控制延遲時間在 350ms，若利用 Google 雲端運算的協助，
延遲時間將可減少近 40%。 
F、大型網路語音會談中回音消除方法 
在多人參與網路語音會議時，因為聲音在空間中傳遞或反射等因素，使得由喇叭發出的
聲音再次被麥克風收回，產生回音。會議中只要有一位使用者的裝置發生回音時，回音訊號
就會在與會者之間擴散，使得所有使用者均會受到影響，進而嚴重影響網路通話的進行。而
參與會談人數越多時，發生回音的機率越高，對通話品質影響也越嚴重。 
傳統電話在一對一通話時，經常使用遠端回音消除機制(Far End Echo Canceller)，由
接收端在接收聲音後先暫存在記憶體中再播放，再將麥克風擷取的聲音與事先暫存的訊號反
向後混合，藉以抵銷回音訊號。但在網路會談的環境下，由於沒有標準的聽筒設備，使得回
音發生的時間難以預估。且多人參與的網路會談中，由於收聽者所聽到的聲音可能混合多個
使用者說話的聲音與回音，使得回音訊號難以偵測。另外，由於網路傳輸的特性，回音訊號
50 
 
 
H. 大型自然災害下應急行動通訊系統 
   同上節所述，大型自然災害下，需要一個低成本能克服地形困難快速建構的大規模緊急通
訊系統以支援大量的災區內人員。經過多年研究，我們發覺大量的行動電話基地台雖然結構
無損，但會因為電力中斷或後面的通訊幹線中斷而終止服務。我們提出應急行動通訊系統的
設計，利用無線鏈結將斷訊但結構無損的基地台以 P2P的方式連接到後端幹線，建構成一個
臨時性的行動電話系統，讓災區內的所有行動電話使用者恢復有限的通訊能力，投入救災。
本系統如能獲得推廣，將大大的提高救災效率。 
 
I. 具前瞻路況調適能力的路徑規劃 
 
現今的路徑規劃演算法，多以各路段的車行距離或固定不變的行車時間作為規畫路徑時的依
據，並未慮及各路段在不同時段之行車速度差異極大，以致同一演算法在不同時段執行時效
能表現不一。在預知各路段在各時段的行車速度下，本研究提出一個具前瞻路況調適能力的
路徑規劃演算法，其效能比傳統的固定參數演算法更好。我們以 2007年台灣地區的實際路網
進行驗證，證明我們的演算法確實能避開塞車路段，節省行車時間。在大型災害來臨時，道
路可能遭到大規模損害，傳統的路徑規劃演算法想當然無法適用。在此情況下，本演算法可
以提供更有效的路徑規劃。 
 
J. 數據擁塞控制協議 (DCCP) 效能研究 
數據擁塞控制協議(Datagram Congestion Control Protocol, DCCP)的設計初衷在於加
入壅塞控制機制，以取代 UDP 成為不可靠傳輸的主流協議，期望能減低網路的壅塞情形。但
網路應用程式從 UDP改為使用 DCCP傳輸資料，是否能維持原本所需的傳輸效能則是一個值得
探討的課題。本研究利用 NS-2網路模擬器，模擬 DCCP 協定下的網路電話與多條 TCP連線競
爭網路頻寬；我們的研究顯示，當網路中存在多條 TCP連線時，DCCP將競爭不到足夠網路頻
寬，面對 TCP的頻寬競爭，DCCP下的網路電話將無法有穩定的表現，我們並提出一個可調速
52 
 
 
本計畫所產出之論文 
1. Pei-Chun Che, Han-Yi Lin, Hung-Chin Jang, Yao-Nan Lien and Tzu-Chieh Tsai, "A Study of 
English Mobile Learning Applications at National Chengchi University", Journal of Distant 
Learning Technology, vol. 7, no. 4, Oct.-Dec. 2009, pp. 38-60.. 
2. Yao-Nan Lien, "Hop-by-Hop TCP for Sensor Networks", International Journal of Computer 
Networks & Communications (IJCNC), vol. 1, no. 1, April, 2009 , pp. 1-16.  
3. Yao-Nan Lien, Hung-Chin Jang and Tzu-Chieh Tsai, "Voluntary Emergency Communication 
Systems for Catastrophic Natural Disasters", Submitted to CACM. 
4.  Yao-Nan Lien and Yi-Fan Yu, "Hop-by-Hop TCP over MANET", Prof. of The First IEEE 
International Workshop on Wireless Network Algorithms (WiNA 2008), Dec. 9-12, 2008. 
5. Yao-Nan Lien and Yung-Chuan Wun, 2008, "QoS-Aware Packet Scheduling by Looking 
Ahead Approach (有助於提高服務品質的前瞻式封包排程機制 )", Proc. of The 19th 
Workshop on Object-Oriented Technology and Applications, Sep. 26, 2008, pp. 107-113. 
6. Yao-Nan Lien and Ming-Han Wu, 2008, "Partial-Reliable TCP", Proc. of 2008 International 
Computer Symposium, Nov. 13-15, 2008, pp. 568-573. 
7. Yao-Nan Lien, 2008, "網路電話與公眾電話網路互連-下車容易上車難 ", Proc. of 2008 
National Symposium On Telecommunications, Dec. 5-6, 2008, pp. 102-106. 
8. Yao-Nan Lien and Yung-Chuan Wun, 2009, "Timeliness and QoS Aware Packet Scheduling 
for Next Generation Networks",  Proceedings of 12th International Conference on 
Network-Based Information Systems (NBiS 2009), Aug. 19-21, 2009. 
9. Yao-Nan Lien and Yu-Chi Ding, "Hop-by-Hop TCP for Sensor Networks", Proceedings of 
The First International Workshop on Wireless & Mobile Networks , March 23-25, 2009. 
10. Yao-Nan Lien, Hung-Chin Jang and Tzu-Chieh Tsai, "A MANET Based Emergency 
Communication and Information System for Catastrophic Natural Disasters ",  Proceedings of  
IEEE Second International Workshop on Specialized Ad Hoc Networks and Systems (SAHNS 
2009) , June 26, 2009. 
11. Hung-Chin Jang, Yao-Nan Lien and Tzu-Chieh Tsai, "Rescue Information System for 
Earthquake Disasters Based on MANET Emergency Communication Platform",  Proceedings 
of  ACM International Workshop on Advanced Topics in Mobile Computing for Emergency 
Management: Communication and Computing Platforms (MCEM 2009), June, 2009. 
54 
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價值（簡要敘
述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適合在學術期刊發表或申請
專利、主要發現或其他有關價值等，作一綜合評估。 
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
 達成目標 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 □無 
技轉：□已技轉 □洽談中 □無 
發表論文 24 篇，請參考報告 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價值 
網路上的 P2P 通訊服務具有非常高的潛力可以用更低的成本，更高的效益支援未來多媒
體通訊服務之需求，但其關鍵之品質控制問題極具挑戰性。本研究深入探討此一問題，期望
能提供一些解決方案供網路營運者使用。我們多年來在 All-IP 網路上的研究成果以及本計畫
的成果已累積了相當大的研究能量，與國際上進行本領域之研究進度差距不大。透過執行本
計畫，參與研究之研究生都獲得絕佳之學習機會，堪為網路產業界所重用。 
我們將所累積的技術應用在災區救災救難設計了一個建構在志願救災人員的行動電腦上
的緊急通訊系統，對於未來的災害救災救難具有重大貢獻，所發表的論文中，[10]更為 CACM
在 2010 二月號的一篇重要文章所引用。 
此外，我們提出應急行動通訊系統的設計，利用無線鏈結將斷訊但結構無損的基地台以
P2P 的方式連接到後端幹線，建構成一個臨時性的行動電話系統，讓災區內的所有行動電話
使用者恢復有限的通訊能力，投入救災，相較於其他現有的方案，本系統可以最大限度的使
用既有資源，支援最廣大的使用者，甚至受困於坍塌的建物中的受難者若攜有行動電話時，
也可受益。本系統如能獲得推廣，將大大的提高救災效率，在大型災害中救得許多人命。 
 
 1 
  
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                     日期：100 年 10 月 31 日 
                                 
一、參加會議經過 
AiNA 會議於本年3月22至25日在新加坡舉行，本人在21日啟程，全程參加會議，並於22日下午發表我
們的論文, "Can DCCP Replace UDP in Changing Network Conditions?"，本篇論文是探討一個新的網路通
訊協定的優缺點，並提出改善的建議。本篇論文在會議中受到多位國際學者的熱烈討論，顯示本項研
究主題相當重要，值得繼續深入研究。 
 
會中除了網路相關的論文之外，近年方興未艾的雲端計算也受到特別關注，特地安排了兩個session。 特
地去聆聽數篇論文的演講，大失所望。雲端計算目前對工業界較有意義，尚未發掘出足夠份量的學術
研究題目。 
 
在數天的會議中與來自世界各地的學者交流，並遇見來自休士頓大學的 Stephen Huang (黃壽萱)教授，
黃教授在會中發表有關網路安全的論文，在得知其老家在台後，趁機邀請他來台演講，獲得首肯後，
安排於 3/29 在政大資科系演講其在網路安全方面的研究。 
 
二、與會心得 
新加坡政府投入大量資金邀請國際知名大學在新加坡建立分校，積極為新加坡培養科系人才。新加坡
離台灣頗近，我們似可趁便邀請駐新加坡的知名學者來台講學。 
 
此外，在新加坡機場徘徊尋找航空公司的櫃臺時，竟有航站人員手持 iPAD 來協助上網查詢航空公司
的位置，非常訝異樟宜機場在提升服務品質的積極與努力。一個小小的舉措，在國內層層官僚的科層
行政系統下，絕無可能以如此高效率引進新技術提升服務品質。國內現有的政府架構及其運作方式絕
計畫編號 
NSC  97-2221-E-004-002-MY3 
計畫名稱 支援 P2P 通訊服務品質之傳輸層及網路層協定之研究 
出國人員
姓名 
連耀南 
服務機構
及職稱 
國立政治大學資訊科學系 教授 
會議時間 
100 年 3 月 22 日
至 
100 年 3 月 25 日 
會議地點 
 
新加坡 
會議名稱 
International Conference on Advanced Information Networking and 
Applications 
發表論文
題目 
Can DCCP Replace UDP in Changing Network Conditions? 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/11/01
國科會補助計畫
計畫名稱: 支援 P2P 通訊服務品質之傳輸層及網路層協定之研究
計畫主持人: 連耀南
計畫編號: 97-2221-E-004-002-MY3 學門領域: 計算機網路與網際網路
無研發成果推廣資料
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
1. Editor of International Jounal of Computer Network and Communications 
(IJCNC) 
2. Review many Journal and Conference papers  
3. Program Committee Member of many conferences: 
 
2005-2010, 行動、無線及感測網路研討會(International Workshop on 
Mobile, Wireless and Sensor Networks) 
2007,2009,2011, IEEE Workshop on Specialized Ad Hoc Networks and Systems 
(SAHNS) 
2009, First International Workshop on Mobile Peer-to-Peer Information 
Services (MP2PIS'09) 
2009, The 5th International Workshop on Mobile Commerce and Services 
(WMCS2009) cooperation with MUE 2009, June 2-6, 2009, Qingdao, China
2009, Workshop on Mobile Computing and Wireless Communications (with 
NSC2009) 
2009, First International Conference on Networks &amp； Communications 
(NetCoM-2009) 
2010, The Sixth International Workshop on Mobile Peer-to-Peer Computing
2010, International Workshop on Applications of Wireless Ad Hoc and 
Sensor Networks (AWASN'10) 
2011, The Third International Workshop on Performance Evaluation of 
Wireless Networks (PEWiN 2011) 
2011, 13th IEEE International Workshop on Future Trends of Distributed 
Computing Systems (FTDCS 2011) 
2011, 3rd International Conference on Computer Science and its 
Applications (CSA-11), December 12-15, Jeju, Korea 
2011, The Fourth International Conference on Advances in Mesh Networks 
(MESH 2011), France 
2011, Third International Workshop on Performance Evaluation of Wireless 
Networks (PEWiN-2011), Beijin | Program Committee Member 
2011, National Computer Symposium (NCS) 
 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
科 
教 
處 
計 
畫 
加 
填 
項 電子報、網站 0  
