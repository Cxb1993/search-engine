                ( )
2 1 2 2 2 ( 1)
4 1 4 2 4 ( 1)
( 2) 1 ( 2) 2 ( 2) ( 1)
1 1 1 1
1
2 1
1
N
N N N
N
N N N
N N N N
N N N
W W W
E N W W W
W W W
× × × −
× × × −
− × − × − × −
 
 
 
 =
 
 
  



    

      (1.5) 
                ( )
1 1 1 2 1 ( 1)
3 1 3 2 3 ( 1)
( 1) 1 ( 1) 2 ( 1) ( 1)
1 1 1 1
1
2 1
1
N
N N N
N
N N N
N N N N
N N N
W W W
D N W W W
W W W
× × × −
× × × −
− × − × − × −
 
 
 
 =
 
 
  



    

       (1.6) 
而且 E(N/2)和 D(N/2)之間的關係如下： 
                ( ) ( ) ( )/ 2 / 2 / 2D N E N F N=                          (1.7) 
其中 
                ( )
0
1
2
( / 2 1)
0 0 0
0 0 0
2 0 0 0
0 0 0
N
N
N
N
N
W
W
F N W
W −
 
 
 
 =
 
 
 
 



    

              (1.8) 
將(7)代入(4)，結果如下： 
                
( ) ( ) ( )( ) ( ) ( ) ( )
( )
( ) ( ) ( )
( )
( ) ( )
/ 2 / 2
/ 2 / 2
/ 2 / 2 / 2 / 2
/ 2 0
            
/ 2 / 20 / 2
/ 2 0
            
0 / 2
N N
E N E NQ N Y X
E N F N E N F N
I IE N
X
F N F NE N
E N
P N X
E N
 
=  
− 
   
=    
−  
 
=  
 
 (1.9) 
其中 
                 
( ) ( ) ( )
( )
/ 2 / 2
/ 2 / 2 / 2
/ 2 / 2
/ 2 / 2
0
         
0 / 2
N N
N N N
N N
I I
P N
F N F N
I I I
F N I I
 
=  
− 
   
=    
−  
              (1.10) 
因為 2 / 2N
kn kn
NW W= ，所以可以觀察到 E(N/2)=W(N/2)，因此可以將(9)重新表示，如
點 FFT 需要 2log N 個複數乘法器、 22log N 個複數加法器、N+ 2log N -1 個延遲
元件和 22log N 個交換元件。 
 
圖 1.1 對於 N 點 FFT 的心跳式陣列結構 
 
圖 1.2 執行 ( )/N MP M 基本單位之電路 
 
圖 1.3 模擬 16 點 FFT 的心跳式陣列結構之結果 
圖 1.3 表示模擬 N 點 FFT 的心跳式陣列結構之結果，可知在第 19 個 cycle 才有
資料輸出。 
而用 memory-based 結構執行 N 點 FFT，如圖 1.4 所示，由圖 1.4 可知，在
memory-based 的結構中，只需要兩個複數加法器、一個複數乘法器、兩個多工
器、RAM 和 ROM，比心跳式陣列結構所需要的硬體還要少，而且亦可達到相同
的執行速度。 
 
對於 DIF 而言： 
1( ) ( ) ( / 2) ( )Tm m m mF N P N F N U N+=                             (1.20)  
其中 
           
1 1 1 2 1 ( 1)
2 1 2 2 2 ( 1)
( 1) 1 ( 1) 2 ( 1) ( 1)
1 1 1 1
1
( ) 1
1
N
N N N
N
m N N N
N N N N
N N N
W W W
F N W W W
W W W
× × × −
× × × −
− × − × − × −
 
 
 
 =
 
 
  



    

            (1.21) 
                  
1( / 2) ( / 2) ( / 2)
( / 2) 0
                 
0 ( / 2)
m m m
m
m
F N F N F N
F N
F N
+ = ⊕
 
=  
 
                  
                  
/ 2 / 2 / 2 / 2
/ 2 / 2 / 2
( ) ( / 2)
N N N N
m
N N N N
I I I I
U N
I D N I I
   
=    
   
        (1.22) 
                
2
0
1
1
0 0
0 0
  ( / 2)
0 0
N
N
N
N
N
W
W
D N
W −
 
 
 
=  
 
  


   

 
                  
1( / 2) ( / 2) ( / 2)
( / 2) 0
                 
0 ( / 2)
m m m
m
m
U N U N U N
U N
U N
+ = ⊕
 
=  
 
 
                     ( ) [ ] T0 2 2 1 3 1    m N NP N e e e e e e− −=                (1.23) 
                  
1( / 2) ( / 2) ( / 2)
( / 2) 0
                 
0 ( / 2)
m m m
m
m
P N P N P N
P N
P N
+ = ⊕
 
=  
 
 
已知 DIT 和 DIF 之遞迴式，我們交錯使用這兩個遞迴式來執行 FFT 計算，以 16
點為例，其步驟之 dataflow graph(DFG)如下所示： 
第一步： 
        執行 DIT 的分解動作，式子可如下表示： 
                        ( ) ( )1 2 116 (8) 16TY Q F P X=                   (1.24) 
 圖 1.7 16 點 FFT 執行第三步 DIT 分解之 DFG 
 
第四步： 
        執行 DIF 的分解動作，式子可如下表示： 
          ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( )1 2 3 4 4 3 2 116 8 4 2 2 4 8 16T T T TY Q P Q P Q P Q P X=      (1.26) 
 
圖 1.8 16 點 FFT 執行第四步 DIF 分解之 DFG 
 
一直執行到 1( / 2)m NF N I+ = ，最後可得(26)式，亦可先執行 DIF 的動作再執行 DIT
的動作，然後重複上述的分解動作即可，16 點 DIF-DIT 分解之 DFG 如下所示： 
          
 
如圖 1.10 所示，此為 2.5N words N 點 memory-based FFT 結構，其包含了五個
N/2 words 的記憶體，其使用較多的記憶體空間來增加執行速度。  
 
圖 1.11 記憶體為 1.5N words 的 N點 memory-based FFT 結構 
 
  如圖 1.11 所示，此為 1.5N words 的 N 點 memory-based FFT 結構，其包含了 3
個 N/2 words 的記憶體，比圖一少了 N 個 words，但是當 N 較大時，其執行速度
比圖一架構慢。 
 
圖 1.12 記憶體為 1.25 N words 的 N 點 memory-based FFT 結構 
 
 
圖 1.14 集中相同 twiddle factor butterfly 之 16 點 radix 2 FFT 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                      Fig 2. ADDER 9B 
    
可以改變中間的 XNOR 的電路，可以構成另一個全加器，如下圖 ADDER 13A： 
 
                   Fig 3. ADDER 13A 
 
  再改變一下中間的XNOR電路，可以構成另一個全加器，如下圖SERF(static 
energy-recovery full-adder)： 
 
 
                     Fig 4. SERF 
 
    以上，由於組成的 mos 元件只有十個，比一般的全加器還要少很多，因
此功率相對的少很多，但是有使用傳輸閘式電路架構，因此所得到的輸出準位，
並不是那麼的好看，有些高準位並不會到 VDD 相對的會少個 Vth；有些低準位並
不會直接到地相對的會多個 Vth，因此以下介紹利用互補式 CMOS 電路，實現全
加器。 
 
互補式 CMOS 的布林函數： 
CIN
MID
VDD
VSS
SUM
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 Fig 6. CLRCL 
  
     此架構的多工器是由下圖所組成： 
             
 
 
 
 
 
 由於是使用傳輸閘的電路，因此輸出波形並不會太漂亮，但由於是多工器
去做選擇，因此 delay 會比較少。 
 
 
2.3 乘法器： 
    a.Baugh-Wooley 有號數乘法器： 
      X 和 Y 為有號數，其相乘結果如下： 
 
 
 
 
 
 
 
Cin
Cin
Cin
2 2
1 1
1 1
0 0
2 2 2 2
2 2 1 1
1 1 1 1
0 0 0 0
2 2
2 2
1 1
0 0
2 2            Y 2 2
2 2 2 2 2 2 2
        = 2 2
n n
n i n k
n i n k
i k
n n n n
n n k n i i k
n n n k n i i k
k i i k
n n
n i k
n n i k
i k
X x x y y
X Y x y x y y x x y
x y A B x y
− −
− −
− −
= =
− − − −
− − −
− − − −
= = = =
− −
− +
− −
= =
= − + = − +
= − − +
+ + +
∑ ∑
∑ ∑ ∑ ∑
∑∑
i
b.改良式 Booth 乘法器： 
  Booth2(radix-4) 
   改良式 Booth2 乘法器，主要先將乘數進行編碼，兩個位元為一組處理後，再
乘以被乘數；如此一來後，部分乘積的個數就少了一半了。編碼的原理是利用 
12 2 2a a a+= − ，所以用 16 位元的乘數為例，我們可以將其改寫如下 
    n=16 
 
 
 
 
 
 
 
 
 
 
 
 
上式中，Y 的編碼如下表 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 其中，2 倍的被乘數，只要左移一位即可。 
乘數 Y中每兩個位元必須連同它們的次一個位元一起從新編碼過，再和被乘
數相乘。因此對於一個 16 位元的 Y，其部分乘積的個數可以從 16 項(i=0~15)減
少一半成為 8項(i=0~7)了。以兩個 16 位元的數相乘，總共大約需要 1個ＡＮＤ
Multiplier Bits Selection 
000 + 0 
001 + Multiplicand 
010 + Multiplicand 
011 +2x Multiplicand 
100 -2x Multiplicand 
101 -Multiplicand 
110 -Multiplicand 
111 -0 
2
1
1
0
2
1 1
1
0
1 1 2 3 1 0 1 2 2
1 0 1 2 2 0 1 2 2
1 2 1 0
2 1 3 2 0 1 1 0 1
Y 2 2
   = 2 (2 2 )
   = 2 ( 2 2 2 2 ) ( 2 2 2 2 )
   =( )2 ( )2 ( )2 ( )2           0
  
n
n k
n k
k
n
n k k
n k
k
n n n
n n n
n n
n n n n
y y
y y
y y y y y y y y y
y y y y y y y y y
−
−
−
=
−
− +
−
=
− − −
− − −
− −
− − − − − −
= − +
− + −
− + + + + + − + + + +
− + − + + − + − =
∑
∑
… …
… ；
2 0
3 2 1 1 0 1
1
2
2
2 1 2 2 1
0
 =( 2 )2 ( 2 )2
   = ( 2 )2
n
n n n
n
k
k k k
k
y y y y y y
y y y
−
− − − −
−
− +
=
+ − + + + −
+ −∑
…
 
 
 
 
 
 
 
 
 
 
 
 
 
 
       Fig 7. 16 位元有號數 Booth2 乘法器 
 
在硬體實現上，選擇器的電路是比較複雜，可以由下圖構成： 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
           Fig 8.16 位元 Booth2 選擇器 
 
Booth3(radix-8) 
  改良式 Booth3 乘法器，主要先將乘數進行編碼，三個位元為一組處理後，再
乘以被乘數；如此一來後，部分乘積的個數就少了一半了。編碼的原理跟 Booth2
是一樣的，所以用 16 位元的乘數為例，我們可以將其改寫如下： 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 Fig 9. 16 位元 Booth3 選擇器 
 
Booth3 的符號產生方法推導如下： 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
31 28 25 19
3 6 12
0 1 2 4
18 18 18 18
31 34
3
0 18
4
32 18 3
0
4 4
32 18 3 18 3
0 0
31 4
18 21 24 27 30 18 3
0 0
2 ( 2 )2 ( 2 )2 ( 2 )2
   = 2 2
  = (2 2 )
  =2 2 2
  =( 2 1) (2 2 2 2 2 ) 2
  =(2
i i i i
i i i i
j
j i
j
j i
j
j
j
j j
j
j j
j j
j
j j
S s s s s
s
s
s
s
= = = =
−
= =
+
=
+ +
= =
+
= =
= + + + +
−
− +
+ − + + + + +
∑ ∑ ∑ ∑
∑ ∑
∑
∑ ∑
∑ ∑
…
4
0 1 31 18 21 24 27 30 18 3
0
4
18 19 20 22 23 25 26 28 29 31 18 3
0
4
18 22 23 25 26 28 29 31 18 3
0
0
2 2 )+1 (2 2 2 2 2 ) 2
  =2 2 2 2 2 2 2 2 2 2 2
  =2 (7 ) 2 2 2 2 2 2 2 2
j
j
j
j
j
j
j
j
j
s
s
s s
+
=
+
=
+
=
+ + + − + + + + +
+ + + + + + + + + +
+ + + + + + + + +
∑
∑
∑
…
c lk
c lk
c lk
c lk
c lk
c lk
c o u t
co u t
V H
V H
V LV L
E v a l.T re eE v a l.T re e
L O G IC L O G ICB O O S T
A
B
A B
Cin
B
A
Cin
A B
clk
clk
clk
clk
clk
clk
cout
cout
cout
cout
VHVH
VLVL
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                  Fig 11. boost logic gate structure 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                       Fig 12 boost carry gate 
 
   在動態電路方面分為預充電相位(clk=0)及求值相位(clk=1)，在 clk=0 時，
由於所有動態閘級之輸出點均被預充電至高電位，所以經過反相器後，每一個
Domino 基本閘級之輸出均為邏輯 0。 
   在 clk=1 時，剛開始時，由於每一個 Domino 基本閘級之輸出均為低電壓，所
以實現邏輯函的 NMOS 電晶體均被關掉，因此基輸出均不會有變化。但是有主要
輸入訊號的閘級會先依照其輸入值求得基輸出值。 
   Domino CMOS 電路的特性： 
1. 所有邏輯閘共用一修時脈訊號線，代表時脈訊號與邏輯閘的關係簡單 
2. 在預充電相位，所有 Domino 基本閘級輸出均為 0，因此在求值相位期
間，要不是會保持為 0，不然就只能發生 0到 1單向性的變化。而且訊
號的傳遞(0 到 1)一定是從前面的閘級到後面的閘級依序完成。這樣的
行為模式就像是骨牌效應。 
3. 所有的邏輯閘在預充電相位的輸出均是不能用的。求值時所有的邏輯閘
必須要在同一個求值相位內完成其工作，因此只能在求值相位的末尾得
到最後的邏輯答案。 
4. Domino CMOS 電路的所有閘級均是同時進入預充電狀態，所以預充電的
時間可以很短，通常最上面的 PMOS 只須有最小尺寸就可以即時完成充
電。 
5. 在 Domino CMOS 電路中，功率消耗會比較大，因為在預充電時，電路工
作在 VDD 之下，所以每次工作在預充時會有功率的消耗，因此會比一般
的電路功率還要大。 
6. 由於 Domino CMOS 電路的邏輯函數除了反相器外，求值工作均由 NMOS
電晶體來進行(沒有由 PMOS 電晶體構成的複雜邏輯閘)，因此我們可以
預期到 Domino CMOS 電路的操作速度將是很快的。又由於只要每一邏輯
閘其正確的輸入訊號到齊後，不須等待便能一次完成該閘級的動作，所
以說此種邏輯電路能夠充分發揮每一閘級的最佳速度。 
 
2.6 Adiabatic adder 
這裡所使用的是從標準的靜態 CMOS 和 adiabatic 電路做合併的動作，在電
源線上有兩個互補的Φ做控制當Φ =1 時就做求值的動作，當Φ =0 時就保持住準
位，因此可以利用此特性做出管線化的乘法器出來。此外，還有個選擇線可以供
選擇，當 sel=1 時就由Φ去做控制，當作是 adiabatic 電路去運作，當 sel=0
時，就當作是一般的靜態 CMOS 來動作，端看設計的需求。 
 
 
 
 
 
三、兼具 I/Q 失衡、直流補償與通道估計之 OFDM 設計 
3.1 前言 
OFDM 為無線通訊的主要潮流，所以其同步技術與通道估計便成為ㄧ個重要的
課題。同步技術在接收端是所有通道估計與訊號偵測的開端，所以在無線通訊系
統中佔了很重要的位子，準確的同步技術與通道估計可以讓在接收端的接收位元
錯誤率大幅降低。特別是在多路徑衰減通道（multipath fading channel），因為每
條路徑都有延遲衰減的現象產生，而且加上通道具有時變性，對於在高移動性狀
態下，同步技術與通道估測便更加重要。在論文中詳細說明了使用前序符元
（Preamble）來做 I/Q 失衡、直流偏移與通道估計，最後提供一個期望最大化
（Expectation Maximization）疊帶的方法求 I/Q 失衡、直流偏移與非時變通道估
計。 
3.2 OFDM 系統架構 

0X
1X
1NX −

cpx

0x
1x
1Nx −
,n lh ⊕
cpy

0y
1y
1Ny −

0Y
1Y

1NY −
nw
nr
 
圖 3.1 離散 OFDM 等效系統模型 
 
圖 3.1 為離散 OFDM 等效系統的模型，將可用的頻寬分成 N 的子通道與保
護區間延伸 P 個取樣週期，假設標準化的通道長度通常小於或等於 P 。 iX 表
示在第 thi 頻率子頻帶所傳送資料點與時域序列的關係如下： 
    
21
0
0 1
nkN j
N
k n
n
X x e n N
pi
−
−
=
= ≤ ≤ −∑
           （3-1） 
cpx

是長度 P 的循環字首（cyclic prefix, CP）向量與 x 的關係如下： 
              
( ) 0 1cp N P nx n x n P− += ≤ ≤ −            （3-2） 
此外，
21
ave
,0
0
lkP j
N
k l
l
H h e
pi
−
−
=
=∑ ，其中 ( ) ( )1ave 01 N ul luh hN −== ∑ 為在持
續時間0 st NT≤ ≤ 內，第
thl 個通道切片平均。所以 ,0kH 表示此通道切片平
均的快速傅立葉轉換。需注意先前介紹，當最大都普勒位移（Doppler shift） df
增加時，在式（3-4）中右手半邊的 ICI 項是不容被忽略的。 
 
3.3 引導次載波的選取 
 令 Pν ≤ 為通道最大預測標準化長度，假設通道標準化長度通常小於ν 。
插入 1L ν≥ + 等空間的導引次載波 klP ，在子通道 ( )kl k N L= + 中，其中
0 1k L≤ ≤ − 。利用導引次載波可以取得估測值 ,0klH ： 
             
( )
,0 ,0
ˆ 0 1k kk
k k
k k
l ll
l l
l l
I WY
H H k L
P P
+
= = + ≤ ≤ −
    （3-7）
（3-7）中， klI 為在第 thkl 次載波的 ICI。經過一個長度為 L 的反快速傅立葉
轉換，則
ave
lh 的估測值表示為： 
                   
21
ave
,0
0
1
ˆ ˆ 0 1
k
klL j
N
l l
k
h H e l L
L
pi
−
=
= ≤ ≤ −∑
         （3-8） 
在缺乏快速移動性條件下， L 的導引次載波已經足夠用來估測通道。可是由於
都普勒頻率，形成（3-4）中的 ICI 項，如果使用
aveˆ
lh 的估測值來偵測資料會導
致較差的效能。所以必須使合成的 ICI 項減緩。 
 
 
 
 
 
 
   
( ) ( ) ( ) ( )12, + 1- 0 12Nnl l l sNh n l h h n T n Nα+= ≈ + × × ≤ ≤ −  
                                                             （3-10） 
將（3-10）帶回（3-3），可以得到下式： 
           
( )midy h x w≈ + × +MA                   （3-11） 
其中 y

、 x

以及 w

為包含 ny 、 nx 以及 nw 大小為 1N × 的取樣向量，
0 1n N≤ ≤ − 。其中， 
  
( )
( )( ) ( ) ( )
mid
1
2
,
0 & 1
0
N
N
l m
h m l
h l m P N l m N P
else
 
− 
 
−

 ≤ − ≤ − − ≤ − ≤ − −
= 


  
                 （3-12） 
  
( )
( )( ) ( ) ( )
,
0 & 1
0
N
l m
m l
l m P N l m N P
else
α
−
≤ − ≤ − − ≤ − ≤ − −
= 

A
 
  （3-13） 
在此，1 , 1l m N≤ ≤ − 。M 為一個對角化矩陣，其對角化的元素為
( ) 1, 2l s
Nl l T lβ
−
 
= = × − 
 
M ，1 l N≤ ≤ 。經過快速傅立葉轉換後，
{ }Y FFT y=  在頻域上可以表示成： 
             mid slope≈ + +Y H X RH X W
   
              （3-14） 
其中， 
    
1 1 1
2 2 2
mid 0 1 0 0
N N N
Pdiag FFT h h h
− − −
    
=     
    
H  
  
量，定義在（3-2）。
pre
cpx

是前一個 OFDM 符元的傳輸循環字首之近似定義，而
且在接收端已經得知的。接著定義ς 為一個包含所有通道切片的斜率向量： 
                  
[ ]0 1 1 TPς α α α −=               （3-20） 
 
將（3-10）中的
( )n
lh 插入矩陣Q ，可以把（3-18）重新整理成： 
               
matcp p cp
y p wς− ≈ × +C DX   
               （3-21） 
 
在此， ( ) ( )( )
1
2
,
N
N
i j Pi j h
 
− 
 
− +
=C ，對於1 i P≤ ≤ 與1 2j P≤ ≤ × 以及可
以經由（3-7）-（3-9）估計出來。 D是已定義的對角矩陣，
( ),
2s
Ni i T i P = × − + − 
 
D ，對於1 i P≤ ≤ ，並且儲存在接收端。
matp
X
定義為： 
                
[ ]( )
[ ]( )
[ ]( )
1: 1
2 : 2
: 2
mat
T
T
p
T
Rev p P
Rev p P
Rev p G P
 +
 
 +
=  
 
 
×  
X




             （3-22） 
其中 [ ]( ):Rev J i j 表示向量 J元素順序 i 到 j 的反向產生向量，且 TJ 為
其轉置（transpose）。方程式（3-14）與（3-21）提供了足夠的訊息可以用來算出
X

。在此方程式中，有兩個參數 X

與ς 是未知的。可以結合此兩個方程式為
只跟 X

相關的新函數。然而運算一個像這樣的方程式的複雜度是非常大的。所
以可以使用一個較簡單的疊帶近似來求得 X

。首先先給 X

與ς 初始估測值，
在每次疊帶中，可以使用（3-14）來改進 X

的估計值，且使用（3-21）來改進ς
  
( ),m s m s−= =C C U                                       （3-28） 
  
1 2
0
2
1
1
2
, : integer1
1
nkN j
N
k
n
kj
N
ne
N
N k mN
m
k mN
e
pi
pi
−
−
=
−
=
−
=

= 
≠

−
∑U
 
所以將 y

做快速傅立葉轉換後，可以得到其頻率關係： 
          
[0] [1]
≈ + × +Y H X C H X W

                  （3-29） 
接著利用（3-29）右半邊的線性關係，可以重新整理成下式： 
           
[0] [1]
P P≈ + +Y XF h CXF h W                   （3-30） 
其中 PF 表示傅立葉矩陣的前 P 個行向量且 
                   
{ }diag=X X
                       （3-31） 
因為要對 [0]h 與 [1]h 做估測，所以可以將（3-30）重新寫成： 
            
[0]
[1]P P
 
 = +  
 
hY XF CXF W
h
 
           （3-32） 
令 2N P P P×  =  Z XF CXF  與
[0] [1]
2 1
T T
P×
 =
 
V h h ，最後對（3-30）
作最小平方估測，可以得到： 
                 
( ) 1ˆ H H−=V Z Z Z Y
                      （3-33） 
 
0 2 4 6 8 10 12 14 16
-0.1
0
0.1
0.2
0.3
0.4
0.5
0.6
l
Re
[h(
n,
l)]
Actual channel(n=128)
Estimated channel(n=128)
 
圖 3. 5 相同次載波下實際通道與估計通道的比較圖 
0 2 4 6 8 10 12 14 16
-0.2
-0.1
0
0.1
0.2
0.3
0.4
0.5
0.6
l
Re
[h(
n,
l)]
n=1
n=64
n=128
 
圖 3. 6 相同次載波下通道脈衝響應的變化情形
3.8 直接降頻接收器介紹 
 一般的接收器架構，如圖與圖所示。直接將載波頻率降至基頻訊號
（Direct-conversion）是所有射頻前端（front-end）架構的一個基礎過程，在高載
波頻率訊號乘上本地震盪器的訊號後，再傳送至中頻端，適合用於放大或處理，
甚至可以直接傳送至基頻（baseband）。有許多不同的架構來將射頻降頻到基頻，
例如：經過一個中頻，如圖或經由直接降頻到基頻訊號（Zero intermediate 
frequency, Zero IF），如圖。 
( )1cos 2 LOf tpi
( )2cos 2 LOf tpi
 
圖 3.9 具中頻（IF）之超外差接收器 
 
( )cos 2 LOf tpi
 
圖 3.10 零中頻直接降頻接收器 
 
實用的通訊接收器，通常在類比前端（front-end）利用正交混合，通常有一
個介於同相位支線與正交相位支線的相位與振福失衡，稱為 I/Q 失衡（I/Q 
imbalance），此外直流偏移（DC offset）也經常存在。I/Q 失衡是一種直接降頻與
低中頻架構的特殊影響；另一方面，直流偏移在大多數的接收器架構，除了直接
降頻接收器外，都可以簡單地壓制住。一種克服 I/Q 失衡與直流偏移的方法是利
用演算法的運算透過數位訊號處理器（DSP）來處理。系統模型如：
器（direct-converter）是將射頻訊號乘上一個複數波形 2 LOj fe pi− , LOf 為接收端本
地震盪器的頻率。為了表示複數直接降頻，需要同時使用 sine 與 cosine 波形（如
同本地震盪器的同相位與正交相位），此外此接收器被分成同相支線（I-branch）
與正交相支線（Q-branch）。在接收端最主要的是受 sine 與 cosine 波形的影響，
採用直接降頻需要具有正交特性，例如：需要 90 度的相位差異與相同的大小。
介於同相支線與正交相支線的處理上，經過直接降頻後的任何失衡情況，將全面
性表示為系統中的 I/Q 失衡。 
( )rx t
2 LOf te pi−
( ) ( ) ( )I Qy t y t jy t= +
 
（a）直接降頻算術模型 
( )rx t
( )Iy t
( )Qy t
( )cos 2 LOf tpi
( )cos 2 LOf tpi
( )sin 2 LOf tpi−
 
（b）直接降頻實現 
圖 3.12 直接降頻架構 
 
I/Q 失衡可以簡化成如圖所示，令 ( )r t 表示為接收到的複數訊號，而且此訊號未
經過類比 I/Q 失衡，此失真訊號在時域上可以表示成 
( ) ( ) ( )*y t ar t br t= +
                （3-35） 
失真參數 a 與 b 為 I/Q 失衡的參數，在射頻/類比解調處理上可以簡單表示成： 
OFDM 系統中如果遭遇 I/Q 失衡與直流偏移等同步之失真，其離散 OFDM
等效系統模型如圖所示。 
假設一個線性的調變訊號（例如：相位鍵控 PSK 或正交振幅調變 QAM），
未經過 I/Q 失衡與直流偏移同步失真的訊號為 ( )r n ，可以表示為 
    
( ) ( ) ( )( ) ( )1 0 00 ,Pl Nr n h n l x n l w n−== − +∑     （3-38） 
在此 ( ),h n l 表示為在瞬時時間為 st l T= × 的第 l 個通道切片（channel tap），
在此 ( )s TT N P= + 為取樣週期； P 定義為通道的長度。經過同步失真後的訊
號可以表示成下式： 
           
( ) ( )
( )
*
0 0 0 0 0
*
0 0 0
a b d
a b d a b
= + + + +
= + + + + *0 0
y h x w h x w 1
h x h x 1 w w     （3-39） 
在此 ( ) ( ) ( )1 0 , 1 , , 1 TN y y y N× = −  y …  
 
( ) ( ) ( )1 , 1 , , 1 TN x l x l x N l× = − − − −  x …  
 
( ) ( ) ( )0 0 00 , 1 , , 1 Tw w w N= −  0w …  
 
[ ]1 1,1, ,1 TN× =1 …  
為了簡化整理，先假設 a 、b ，以及 0d 是已知的，可以直接將 
（3-39）計算式寫成 
          
( ) ( ) ( )2* *0 0 0 01 a h x w d dα α− = − + + −y y 1    （3-40） 
在此， *b aα = ，（3-40）的右半邊是一個無直流偏移與無失衡的訊號，這表
示 I/Q 失衡與直流偏移可以從（3-40）的左半邊來做簡單地補償。為了簡化記號，
令
*
0 0d d dα= − ， ( )2 01 aα= −h h ，以及 ( )21 aα= − 0w w 。整理過
後可以得到時域上的訊號： 
( ) ( )
# [0] [1]
2
# [0] [1]
2
1| , , ,
1
exp
N
P P
p d
d
α α
piσ
α
σ
− =
 
× − − − − − 
 
Y Y h h
Y Y e XF h RXF h
   
                                                     （3-45） 
( )[0] [1], , ,dα h h 的循序最小平方估測可以明顯地由概似函數（likelihood 
function）的最小值來求得。其概似函數如下： 
               
( ) 2[0] [1] # [0] [1]4 , , , P Pd dαΛ = − − − −α h h Y Y e XF h RXF h                                                          
                                                              （3-46） 
首先當參數 ( )[0], ,dα h 固定時，可以求 [1]h 在對數概似函數的最小值： 
    
( ) ( )[1] # [0]ˆ , , Pd dα α= − − −h h A Y Y e XF h  （3-47） 
可以使其達到極小值，其中 ( ) ( )1 HH H HP P P−=A F X R RXF RXF 。接著將
(3-47)帶回(3-46)，可以得到下式： 
    
( ) ( ) ( ) 2[0] # [0]3 , , N Pd dα αΛ = − − − −h I B Y Y e XF h  
                 （3-48） 
其中， P=B RXF A。當固定α 與 d 時，求 (3-48)的最小值，可以得到 [0]h
的估測值： 
                  ( ) ( )[0] #ˆˆ ˆ , d dα α= − −h C Y Y e             （3-49） 
其中， 
              
( ) ( )
( ) 2
HH H
P N N
N P
− −
=
−
F X I B I BC
I B XF
                 （3-50） 
接著將(3-49)帶回(3-48)，可以得到： 
          
( ) ( )( ) ( ) 2#2 , N Nd dα αΛ = − − − −I B I D Y Y e      （3-51） 
在（3-60）中，有四個參數α 、 d 、 [0]h 以及 [1]h 是需要估測的，所以要
估測的參數向量可以表示為：          
            ( ) ( ) ( )( )[0] [1]2 2 1 T TP dα+ × =θ h h          （3-61） 
以及已知的參數為： 
            ( ) ( )#2 2 P PN P× + =G Y e XF RXF          （3-62） 
故（3-60）變成下式： 
                      
= +Y Gθ W
                       （3-63） 
在（3-63）的右半邊是標準的線性模型，令價值函數 ( ) ( )ˆ ˆH− −Y Gθ Y Gθ 為
最小化，可以得到θ的估測值如下： 
                  
( ) 1ˆ H H−=θ G G G Y
                    （3-64） 
得知 ˆθ後，α 、 d 、 [0]h 以及 [1]h 的估測值可以經由（3-61）與（3-64）
相比較後得知。假如 ( ) ( ) ( )ˆ ˆ ˆ ˆ0 , 1 , , 2 2 TPθ θ θ = + θ … ，則 ( )ˆˆ 0α θ= 、
( )ˆ ˆ 1d θ= 、 ( ) ( )[0] ˆ ˆˆ 3 , , 2 Pθ θ = + h … 以及
( ) ( )[1] ˆ ˆˆ 3 , , 2 2P Pθ θ = + + h … 。 
 
3.12 模擬結果 
首先討論循序最小平方估計的模擬結果，分別在不同移動速度下，I/Q 失衡、
直流偏移以及通道估計的均方誤差與訊雜比的關係圖，主要採用通道為雷利衰減
通道。圖為速度 60（km/h）的結果；圖為速度 120（km/h）的結果；圖為速度
為 600（km/h）的結果。（N=128, Ncp=Nfft/8, path=6, Nstat=30, Nsymbol=25, 
fc=3GHz, 16QAM） 
從這三張圖中可以得知當移動速度行駛於高速時，I/Q 失衡、直流偏移與通
道估計均方誤差皆會變差，表示時變通道開始受到速度影響。 
0 5 10 15 20 25 30
-50
-45
-40
-35
-30
-25
-20
-15
-10
-5
0
SNR(dB)
M
SE
(dB
)
IQ imbalance
DC offset
Channel
 
圖 3.17 速度 600km/h 時，I/Q 失衡、直流偏移 
與通道估計均方誤差與訊雜比關係 
接著討論結合最小平方估計的模擬結果，分別在不同移動速度下，I/Q 失衡、
直流偏移以及通道估計的均方誤差與訊雜比的關係圖。圖為速度 90（km/h）的
結果；圖為速度 120（km/h）的結果；圖為速度為 600（km/h）的結果。（N=128, 
Ncp=Nfft/8, path=6, Nstat=30, Nsymbol=25, fc=3GHz, 16QAM） 
從下面三張圖做比較，可以得知移動速度逐漸上升，是會使得 I/Q 失衡、直
流偏移與通道估計均方誤差變差。 
0 5 10 15 20 25 30
-60
-50
-40
-30
-20
-10
0
SNR(dB)
M
SE
(dB
)
IQ imbalance
DC offset
Channel
 
圖 3.20 速度 600km/h 時，I/Q 失衡、直流偏移 
與通道估計均方誤差與訊雜比關係 
 
且 lh 是非時變（time-invariant）通道矩陣 w 為雜訊向量。 w 中的元素期望值
為零與變異數 2wσ 的獨立複數高斯隨機變數。將（3-66）寫成矩陣向量形式如下： 
        
= +r hx w
                        （3-67） 
將（3-67）加上 I/Q 失衡與直流偏移後，可以得到下式： 
                    
*
0a b d= + +y r r 1                     （3-68） 
在此，假設 a 、b 以及 0d 皆為期望值為零的複數高斯隨機變數。將（3-68）重
新整理成下式： 
( ) ( ) ( )2* *0 0 1 ld d aα α α− = − + − +y y 1 h x w     
         
* dα= + + +y y 1 gx w
                   （3-69） 
其中 *b aα = 、 ( )*0 0d d dα= − 、 ( )21 aα= −g h 以及
( )21 aα= −n w 。其中 ( )T 表示矩陣或向量轉置； ( )*表示複數的共軛符
號。 
 （3-69）經過快速傅立葉轉換後，在頻域上可以表示為： 
             
# dα= + + +Y Y e GZ W
              （3-70） 
其中， 
         
[ ]( ){ }0 1 1 0 0N N Pdiag FFT g g g× −=G          （3-71） 
           
( ) ( ) ( )( )1 0 1 1 TN FFT x x x N× = −  Z         （3-72） 
在此 ∈ΩX ， { }, 1, ,m m MΩ = =S … 為一個 M-ary 的符號。因為（3-70）為
線性方程式，所以G 與Z 可以做調換，重寫成： 
                  
# dα= + + +Y Y e XH W
           （3-73） 
在此， 
{ }c= Y,G 。然後輔助函數變成： 
            ( ) ( ){ }ˆ ˆQ , E log , , | ,f=θ θ Y G θ Y θ           （3-79） 
其中（3-79）的結合機率密度函數 ( ), ,f Y G θ 可以表示成： 
             
( ) ( ) ( )( ), , | , Prf f=Y G θ Y G θ G X
         （3-80） 
因為G 與θ為獨立矩陣與向量且 ( )| ,f Y G θ 機率密度函數可表示成： 
     
( ) ( )
( )
22
WW
, ,1| , exp
det N
uf
σpiσ
 
= − 
 
Y G θ
Y G θ
I      （3-81） 
其中 ( ) ( ) ( ), , Hu − −Y G θ Y Gθ Y Gθ ，且機率 ( )Pr G 中，X 為 M-ary
符元的隨機變數，所以只要對變數 X 求其機率即可： 
                     
( ) ( )1
0
Pr Pr
N
k
k
−
=
= ∏X X
                     （3-82） 
在此 ( )Pr kX 為符元矩陣 kX 事前機率（APRP）。然後將（3-81）-（3-82）代入
（3-80），再將（3-80）代入（3-79）省略不相關的因子，可以得到下式： 
      
( ) ( )
( ) ( )
( ) ( ){ }
( ) { }
2
X X2
X2 2
Q , E log , ,
1E
1 E 2 Re E
1 2E Re
X
H
X
w
H H H
w
H H H
w w
f
σ
σ
σ σ
=   
 
−
= − − 
 
−  
− 
 
− + 
 
θ θ Y G θ
Y Gθ Y Gθ
θ G G θ Y G θ
θ G G θ V θ



      （3-83） 
在此V 與定義分別為： 
              
( )( )
( )
XE
Pr | ,
H
H
∈Ω
=
 =  ∑X
V G Y
Y e X X Y θ Y
      （3-84）           
其中 ( )XE H=A G G 。需注意重要一點：只要通道統計在一個符元內變化不
大，則 A 的反矩陣不需要重複運算。 
 經過 K 次疊帶後，EM 演算法停止產生一個估測值 ( )EM K=θ θ 與事後機率
( ){ }ˆPr | ,k m=X S Y θ 。然後 ˆ kX 的資料判斷可以經由最大事後機率（MAP）
決定策略： 
          
( )EMˆ arg max Pr | ,
k
k k m
∈Ω
= =
X
X X S Y θ
       （3-90） 
假如使用一個外部結合同步與通道碼，事後機率 ( ){ }ˆPr | ,k m=X S Y θ 可以傳
送至解碼流程，以改善接收端錯誤的效能。 
 總合上述所推導的方程式，可以將 EM 形式的同步與通道估計模擬過程表示
如圖。  
 
LSθ
[ ]1
EMθ
[ ]2
EMθ
 
圖 3.22 系統模擬過程 
 
第一次初始值在這此演算法中，是由前序符元（Pramble）利用最小平方（Least 
Square）算出來的估計值來給定；接著依序將估計值傳給下一個符元，在前序符
元後的每一個符元，皆採用 EM 演算法來算出同步與通道的估計值。整個流程如
圖所示。 
 
圖 3.24 不同訊雜比下的符號錯誤率收斂情況  
10 12 14 16 18 20 22 24 26 28 30
10-2
10-1
100
SNR(dB)
SE
R
 
圖 3.25 訊雜比與符號錯誤率的關係圖 
參考文獻 
[1] IEEE Standard for Local and Metropolitan Area Networks Part 16 Air Interface 
for Fixed Broadband Wireless Access Systems.（IEEE Std. 802.16-2004） 
[2] IEEE Standard for Local and Metropolitan Area Networks Part 16 Air Interface 
for Fixed and Mobile Broadband Wireless Access Systems. （ IEEE Std 
802.16e-2005） 
[3] Y. Mostofi, and D. C.Cox, “ICI mitigation for pilot-aided OFDM mobile systems,” 
IEEE Trans. Wireless Commun., vol. 4, no. 2, pp. 765-774, Mar. 2005. 
[4] A. Tarighat, R. Bagheri, and A. H. Sayed, “Compensation schemes and 
performance analysis of IQ imbalances in OFDM receivers,” IEEE Trans. on  
Signal Processing, vol. 53, no. 8, pp. 3257-3268, Aug. 2005. 
[5] G.-T. Gil, I.-H. Sohn, J.-K. Park, Y. H. Lee, ”Joint ML estimation of carrier 
frequency, channel, I/Q mismatch, and DC offset in communication receivers,” 
IEEE Trans. on Vehicular Tech., vol. 54, no. 1, pp. 338-349, Jan. 2005. 
[6] I.-H. Sohn, E.-R. Jeong, and Y. H. Lee, “Data-aided approach to I/Q mismatch and 
DC offset compensation in communication receivers,” IEEE Commun. Letters, 
vol. 6, no. 12, pp. 547-549, Dec. 2002. 
[20] S. Benedetto, G. Montorsi, D. Divsalar, and F. Pollara, “Soft-input, soft-output 
modules for the construction adn distributed iterative decoding of code 
networks,” Eur. Trans. Telecomm.(ETT), vol.9, no. 2, pp. 155-172, Mar./Apr. 
1998. 
[21] G. K. Kaleh and R. Vallet, “Joint parameter estimation and symbol detection for 
linear or nonlinear unknown channels,” IEEE Trans. Commun., vol. 42, pp. 
2406-2413, July 1994. 
[22] A. Dembo and O. Zeitouni, “Maximum a posterior estimation of time-varying 
ARMA processes form noisy observations,” IEEE Trans, Acoust., Speed Signal 
Processing, vol. 36, pp. 471-476, Apr. 1998. 
[23] A. Anastasopoulos and K. M. Chugg, “Adaptive soft-input soft-output algorithms 
for iterative detection with parametric uncertainty,” IEEE Trans. Commun., vol. 
48, pp. 1638-1649, Oct. 2000. 
[24] M. J. Gertsman and J. H. Lodge, “Symbol-by-symbol MAP demodulation of 
CPM and PSK signals on Rayleigh flat-fading channels,” IEEE Trans. Commun., 
vol.45, pp.788-799, July 1997. 
[25] J. K. Cavers and M. W. Liao, “Adaptive compensation for imbalance and offset 
losses in direct conversion transceivers,” IEEE Trans. on Vehicular Technology, 
vol.42, no.4, pp.581-588, Nov. 1993. 
[26] G. B. Xing, M. Y. Shen, and H. Liu, “Frequency offset and I/Q imbalance 
compensation for direct-conversion receivers,” IEEE Trans. on Wireless 
Commun., vol.4, no.2, pp.673-680, March 2005. 
[27] B. Razavi, “Design considerations for direct-conversion receivers,” IEEE Trans. 
On Circuits and Systems, vol.44, no.6, pp.428-435, June, 1997. 
[28] I. Barhumi and M. Moonen, “IQ-imbalance compensation for OFDM in the 
presence of IBI and carrier-frequency offset,” IEEE Trans. on Signal Processing, 
vol.55, no.1, pp.256-266, Jan. 2007. 
[29] K. P. Pun, J. E. Franca, C. Azeredo-Leme, C. F. Chan, and C. S. Choy, 
“Correction of frequency-dependent I/Q mismatches in quadrature receivers,” 
Electron. Lett., vol.37, pp.1415-1417, Nov. 2001. 
[30] S.M. Kay, Fundamentals of Statistical Signal Processing: Estimation Theory, 
Upper Saddle River, NJ: Prentice Hall, 1993. 
[31]C.H. Chang, C.L. Wang, and Y.T. Chang, “A novel memory-based FFT processor 
   for DMT/OFDM applicationa,” Proc. of IEEE International Conference on 
   Acoustics, Speed, and Signal Processing, Phoenix, AZ, pp.1921-1924, March 
   1999. 
[32]C.L. Wang and C.H. Chang, “A new memory-based FFT processor for VDSL 
   transceivers,” Proc. of IEEE International Symposium on Circuits and Systems, 
