1. Introduction
This research addresses the conceptual design and practice for implementing a SnapGear Linux
[3] based SOHO/SME gateway using an Intel IXP-425 network processor [4] based target
board. The design goals of such a gateway include three folded functions: (1) a native IPv6 router,
(2) a native IPv6 firewall, and (3) an IPv6-in-IPv4 tunneling based 6to4 router [5]. The
acceptance criteria require a good understanding of performance issues such as throughput and
latency with respect to these three design goals.
This report is organized as follows. Section 2 overviews the conceptual design of our system
architecture, the implementation practice of the system hardware and software, the embedded
software development flow chart, and the performance test scenarios. Section 3 defines the
testing environments with respect to those function scenarios mentioned above, describes their
corresponding performance test steps, and gives some remarks on the artificial security rule
setting. Section 4 details and analyzes the results of these performance tests, and in-depth
comparisons between IPv6 and IPv4 test cases are presented. Section 5 summarizes the achieved
gateway functions and their performances.
2. System Overview and Implementation
This section overviews the conceptual design of our system architecture and its development
environment for a SnapGear Linux based IPv6 SOHO/SME gateway, and describes the
implementation practice of our embedded target hardware and software, where four stages of
embedded software development flow are developed and explained.
2.1 System Architecture
Figure 1. The system architecture of a SnapGear
Linux based IPv6 SOHO/SME gateway.
Figure 2. A top-view of the IXDPG-425 target
board.
Figure 1 demonstrates the system architecture and building blocks for the conceptual design of an
IPv6 SOHO/SME gateway.
The Host PC (HPC) is the platform for embedded software development, including the OS
kernel and target embedded applications such as the firewall administration tools. A generic PC
running with Linux can fit our purpose for embedded software development. After the embedded
OS kernel and target applications are developed, they can thus be downloaded onto the
stages, as shown in Figure 3, assuming the GNU Tool-chain and the Glibc program library for
cross-compilation have been installed successfully on the HPC. The four stages are detailed as
follow.
 Stage 1: Software Development
This stage uses the SnapGear Linux package to develop the embedded software for the
IXDPG-425 target board. The 2.4.31 kernel was adopted to develop our design goals. To allow
the full operation of the IXP-425 NPEs, the Intel IXP-400 software patches for SnapGear Linux
need to be applied. User-space programs such as firewall administration tools and other
system/networking utilities can also developed from this package. The major toolset families
used by this research are described as follow:
- BusyBox: offers most of the basic system shell commands [10];
- iproute2: replaces net-tool such as ifconfig and route by ip and tc [11];
- iptables/ip6tables: serve as the IPv4 and IPv6 firewall administration toolsets for security rule
setting from the user space.
 Stage 2: Cross-compilation
The GNU Toolchain and the Glibc program library are used for cross compilation to generate the
target kernel image and root filesystem.
 Stage 3: Function Testing
The successfully built kernel image and root filesystem can now be downloaded onto the ETS to
conduct function verifications. If any failure, further debugging cycles of software will be needed.
If the desired gateway function tests are successful, then the next stage is to study their
performances. The function scenarios are listed below as T1, T2, and T3.
 Stage 4: Performance Testing
The performance test issues of T1, T2, and T3 are described as follow.
 T1:Native IPv6 Router Performances
How are the routing throughput and latency affected by the TCP sliding window size and the
Ethernet data frame size?
 T2: Native IPv6 Firewall Performances
How much is the routing throughput degraded and how much is the latency enlarged as the
number of security rules increases?
 T3: IPv6-in-IPv4 Tunneling Performances
What are the tunneling performances of the 6to4 router in terms of the IPv6-in-IPv4 tunneling
throughput and latency for various Ethernet data frame sizes?
3. Experimental Setup of Performance Tests
This section describes the testing environment for T1, T2, and T3, as defined in Section 2. The
corresponding performance test steps will also be described, followed by some remarks on
firewall security rule setting.
3.1 Testing Environment
Figure 5. An artificial security rule set applied to the‘FORWARD’chain of Netfilter6.
This section gives some remarks on the firewall security rule setting for T2. As show in Figure 5,
we proposed an artificial rule set with 10 TCP‘DROP’rules followed by 1 ICMPv6 ‘ACCEPT’
rule. Using such an artificial rule set allows quantifying the effects of the number of security rules
on the firewall performances. One can vary the number of TCP ‘DROP’rules and observe its
effects on the IPv6 routing throughput and latency. A clone of this rule set with ICMPv6 replaced
by ICMP can be used for the IPv4 routing throughput and latency measurements.
4. Performance Analyses
This section describes the performance test results and their in-depth analyses. These results and
analyses are delivered according to the T1, T2, and T3 function scenarios, as already defined
previously. In particular, the performance test results will be compared between the IPv6 and
IPv4 test cases to understand their differences.
4.1 Native IPv6 Router
This section starts with the effect of TCP sliding window size on the TCP throughput, and decides
a reasonably small window size yet larger than the threshold value of the throughput plateau area,
as shown in Figure 6. This window size will thus be fixed to simplify all the throughput and
latency relevant discussions throughout the rest of this report.
4.1.1 Effects of TCP Sliding Window
Figure 6. The routing throughput versus the TCP sliding window size for both IPv6 and IPv4.
the discussions below, the number of security rules will be denoted as the single italic letter‘n’.
4.2.1 Security-Rule Effects on Throughput
Figure 9. The IPv6 routing throughput versus the
number of security rules with various data frame
sizes.
Figure 10. The IPv4 routing throughput versus the
number of security rules with various data frame
sizes.
The detailed dependences of the routing throughput on n for various data frame sizes are depicted
in Figure 9 and Figure 10, for both IPv6 and IPv4 respectively. Two major messages are delivered
by these two figures:
 The throughput dropping rates with increasing n are larger for medium and large data frame
sizes, say 512, 1024, and 1400 bytes.
 For large data-frame applications, say 1024 and 1400 bytes, the IPv6 throughput seems to be
more vulnerable to the increase of n than the IPv4 throughput. This can be seen from the
plateau width of the constant high throughput region.
4.2.2 Security-Rule Effects on Latency
Figure 11. The round-trip latency versus the
number of security rules for both IPv6 and IPv4.
Figure 12. An amplified view of Figure 11 for n
≦100.
The dependence of the round-trip latency on n for both IPv6 and IPv4 are summarized in Figure
11 for n ranging from 0 to 1000, whereas Figures 12 provides another amplified view for n ≦
100. Both IPv6 and IPv4 latencies increase with n monotonically and roughly linearly.
Statistically speaking, there exists no difference in both IPv6 and IPv4 latencies when n ≦ 80,
despite that the separation between their mean values is getting large with n. However, the mean
value separation becomes statistically important starting with n = 100, and grows even larger with
n.
with a typical range of latency tolerance about < 150 ms for normal human hearing.
T2: Native IPv6 Firewall
 The number of security rules n does impose a stronger degrading effect on the routing
throughput of IPv6 than that of IPv4. However, one sees no difference between both routing
latencies when n ≦ 80.
T3: IPv6-in-IPv4 Tunnel
 For the routing throughput, the IPv6-in-IPv4 tunneling imposes small effects for large data
frames such as 1024 and 1400 bytes, and much larger effects for small and medium data
frames such as 512, 256, and 128 bytes. This is also as expected because the equivalent
effect of IPv6-in-IPv4 tunneling is to encapsulate the IPv6 packet with an extra IPv4 header,
which is longer and worse than the native IPv6 case in terms of the total header size.
 As for the routing latency, the effect of IPv6-in-IPv4 tunneling contributes roughly less than
1 ms, which can be estimated by taking the difference of Figure 14 and Figure 8.
References
[1] For an introduction to IPv6, see:http://www.networksorcery.com/enp/protocol/ipv6.htm.
[2] For USAGI-IPv6, see http://www.linux-ipv6.org.
[3] For SnapGear Linux, see: http://www.snapgear.org.
[4] http://www.intel.com/design/network/products/npfamily/ixp425.htm.
[5] For 6to4 router, see: http://www.faqs.org/rfcs/rfc3056.html.
[6] W.P. Lai, Differentiated Service Capable Embedded Network Gateway and Experimental
Backbone Network Design, 2006 NSC Research Proposal, NSC 95-2218-E-155-002.
[7]. For IXDPG-425, see:http://www.innovatesolutions.net/development-boards.htm.
[8] For Netfilter and Netfilter6, see:http://www.netfilter.org.
[9] For ip6tables, see: http://linux.web.cern.ch/linux/cel3/docs/rhel-rg-en-3/s1-ip6tables.html.
[10] For BusyBox, see http://www.busybox.net.
[11] For iproute2 see:http://snafu.freedom.org/linux2.2/iproute-notes.html.
[12] For iperf, see http://dast.nlanr.net/Projects/Iperf.
[13] W.P. Lai, Z.H. Chen, and G.H. Lin (2005), Implementation and Performance Benchmarking
of uClinux SOHO Routers, 2005 International Conference on Open Source, Nov. 10-12,
Taipei.
[14] W.P. Lai (2006), Embedded Design and Performance Studies of an IPv6 SOHO/SME
Gateway, 2006 Open Source Conference on Technology and Application, Nov. 10, Taipei.
(2) 單程 Latency < 1.2 ms。
綜合上述，本計畫成功地實現了具有高訊務吞吐率(Throughput)與低時間延遲(Latency)之
IPv6 路由器、IPv6 防火牆、與具 IPv6-in-IPv4 通道之路由器等功能的 IPv6 閘道器。
論文發表：
1. 已發表：W.P. Lai (2006), Embedded Design and Performance Studies of an IPv6 SOHO/SME
Gateway, 2006 Open Source Conference on Technology and Application, Nov. 10,
Taipei.
2. 預計發表：有關 IPv6 與 IPv4 防火牆規則數目對封包過濾鏈路徑之深入效能研究準備中。
通訊教改計畫實驗教材貢獻：
本計畫主持人受邀參加 2006 年教育部通訊教改計畫之實驗講義編寫，與趙涵捷教授研究團
隊合寫該講義第 8 章，本計畫主持人負責並已完成撰寫章節 8-2：IPv6 on IXDPG425。
