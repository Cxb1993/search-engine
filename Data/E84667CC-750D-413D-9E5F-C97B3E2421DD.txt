行政院國家科學委員會補助專題研究計畫▓成果報告  
□期中進度報告 
 
多邊形網格分割轉換 
 
計畫類別：▓個別型計畫   □整合型計畫 
計畫編號：NSC 99-2221-E-009-118 
執行期間：99 年 8 月 1 日至 101 年 3 月 31 日 
 
執行機構及系所： 
 
計畫主持人：莊榮宏  國立交通大學資訊工程系教授 
共同主持人： 
計畫參與人員：李宜亭、劉文達、徐孟揚、趙修範、林育右、楊
筱筑、何丹期、廖仁傑、廖仁豪、黃程國、李紹褆 
 
成果報告類型(依經費核定清單規定繳交)：▓精簡報告 □完整
報告 
 
本計畫除繳交成果報告外，另須繳交以下出國心得報告： 
■赴國外出差或研習心得報告 
□赴大陸地區出差或研習心得報告 
□出席國際學術會議心得報告 
□國際合作研究計畫國外研究報告 
 
 
處理方式：除列管計畫及下列情形者外，得立即公開查詢 
    □涉及專利或其他智慧財產權，□一年□二年後可公開查詢 
 
中   華   民   國 101 年 6 月  4  日 
1. 前言 
特徵或幾何運算之轉換在幾何處理是一個重要的研究課題。此研究之動機是
現今網格分割的諸多方法各有其優缺點，各有其適合的網格型態，通常一個
方法無法對所有物體產出好的分割結果，而且分割的結果常與人為分割結果
有所差距。我們的方法可以將一個好的網格分割結果轉換到一個類似的物體。
目前我們的作法比較是以幾何出發，藉由骨架對應的方法先將來源網格分割
的邊界儘量對應到目標網格上，再根據幾何的細節去調整目標網格的分割邊
界，使目標網格的幾何細節能夠和對應到的來源分割邊界相似。此方法對肢
體動物之測試成果不錯，但對形體拓樸差異較大者之效果表現不太穩定，這
次與馬教授討論的方向是希望可以應用機器學習的觀念到網格分割轉換。 
 
2. 文獻探討 
形體對應（shape correspondence） 
形體對應在幾何處理是一個很重要的研究課題。形體對應通常是使用 Reeb 
graph或物體的骨架來做對應[HSKK01, TS04, SSGD03, BMSF06]。在 
Graph matching 的方法中，通常子圖（subgraph）會被根據幾何性質的最小
誤差來進行一對一的對應。而這類方法通常會有兩個問題。一個是對網格的
拓撲過於敏感，因為一般的子圖建立是依靠圖形的連結性。另一個則是對稱
性交換[ZSCO*08]。例如左右手常會被對應錯誤，因為這樣的骨架會有相同的
語義以及相似的幾何資訊。而我們的方法利用骨架節點和網格頂點之間的關
聯、骨架的空間資訊來解決第一個問題。第二的問題則使用交叉節點連結的
骨架進行局部的對應來避免。我們的方法會適當的合併骨架節點或是骨架分
支，這會產生多對多的對應結果，並提高正確對應的可能性。而[ATCO*10]
則是利用投票(voting)的方式去計算一對一個對應，根據票數高低來選出最
好的結果。這個方法並不能合併任何的骨架節點，因為投票方法對於不同的
合併設計有不同的意義，而目前並不清楚如何根據投票來調整最好的對應結
果。而我們的方法則是採用計算最小成本的方式，因此可以得到最好的結果。 
 
網格分割(mesh segmentation) 
大多數網格分割的演算法大致分為兩種：一種是將網格分成一塊塊補丁
(patch)，且每塊補丁都滿足一些屬性；另一種則是將網格分割成對人類來說
具有語義的組成(如 part)。不同的分割演算法對於同一個網格通常會產生不
同的分割結果，而一致的網格分割目的就在於能夠同時對一組網格作一致的
分割。[GF09]考慮了個別網格的幾何特徵以及網格之間的對應資訊，利用對
 圖1 骨架對應的樹狀結構示意圖。 
 
 
圖2 不同顏色代表不同的子骨架。 
 
 
圖3 交叉節點的合併。 
3.2 測試結果 
我們用好幾種模型證實我們的方法可以有效地找出正確的對應結果，如圖6
所示。對應的節點會顯示出相同的顏色，沒有對應到的節點則不會顯示在圖
上，語義相似的部位都可以有正確的對應。和[ATCO*10]做比較(見圖7)，可
以很明顯地看到我們的結果比較好。[ATCO*10]在馬的耳朵和狗的嘴巴部分會
對應錯誤，在豬的耳朵和龍的上顎也對應錯誤。 
但是我們的方法在有些語義的對應仍有可能會出現錯誤，例如馬的耳朵和
牛的牛角。還有在接合節點附近若是其形狀較為平緩，我們會無法用骨架推
斷出前後，因此有可能會出現錯誤的對應。此外，若是人造模型我們無法取
得較好的骨架或是骨架無法忠實地捕捉模型的形狀，那我們的結果就會受到
很大的影響。 
 
 
圖6 對不同模型的對應結果。 
 
 
圖7 與[ATCO*10]比較結果。 
4.2 測試結果 
圖9可以看到我們的實驗結果，對應的部位會有相同的顏色。我們可以將來源
網格的分割結果正確的轉換到目標網格上。在圖9，狗的耳朵和人的模型並沒
有對應，因此分割的結果就不會轉換到人的模型上，但其他同類型的模型都
可以有正確的分割轉換。我們將方法和一些近期的方法做比較(見圖10、圖11、
圖12)。在圖10，可以很明顯的看到[GF09]在模型有較大不同形狀的時候，並
不能很好的轉換，但我們的方法因為有做骨架的對應，因此可以有不錯的結
果。圖11和圖12是和[KHS10]做比較的結果，我們的邊界切割結果更好。但是
我們的結果好壞取決於骨架對應的結果，如果骨架無法很好的捕捉到網格的
形狀，我們的分割結果會受到影響，這算是一個限制。 
 
 
 
圖9 網格分割轉換結果。 
 
 
 
圖10 與[GF09]比較結果。 
格的分割結果對應到目標網格上。來源和目標網格語義上需要相似，但幾何
上可以有所不同。我們先發展出一個兩個網格間的新的骨架對應方法，利用
骨架節點和其周圍網格頂點的幾何資訊以及拓撲結構來做骨架對應。但是對
於不同的部位，骨架也許也會有不同的連結方式，為了降低這種不確定性，
我們建立了樹狀結構，產生好幾種不同的結果，然後從中選擇最好的一個。
而網格分割轉換就藉由骨架對應先將來源網格分割的邊界儘量對應到目標網
格上，再根據幾何的細節去調整目標網格的分割邊界，使目標網格的幾何細
節能夠和對應到的來源分割邊界相似。這兩個網格處理的演算法都具 
相當的創新及產業應用價值。這兩項成果都已撰寫成論文，正投稿國際期刊
中。 
 
7. 參考資料 
[ATCO_10] AU O.-C., TAI C., COHEN-OR D., ZHENG Y., FU. H.: Electors voting for 
fast automatic shape correspondence. Comp. Graph. Forum 29, 2 (2010), 645–
654. 
[BL08] BAI X., LATECKI L.: Path similarity skeleton graph matching. IEEE Trans. on 
PAMI 30 (2008), 1282–1292. 
[BMSF06] BIASOTTI S., MARINI S., SPAGNUOLO M., FALCIDIENO B.: Sub-part 
correspondence by structural descriptors of 3D shapes. Comp. Aided Design 38, 9 
(2006), 1002–1019. 
[GF09] GOLOVINSKIY A., FUNKHOUSER T.: Consistent segmentation of 3D models. 
Comp. Graph. Forum 33, 3 (2009), 262-269 
[HSKK01] HILAGA M., SHINAGAWA Y., KOHMURA T., KUNII T. L.: Topology 
matching for fully automatic similarity 
[KHS10] KALOGERAKIS E., HERTZMANN A., Singh K.: Learning 3D mesh 
segmentation and labeling. ACM TOG Forum 29, 4 (2010) 1-12 
[SSGD03] SUNDAR H., SILVER D., GAGVANI N., DICKINSON S.: Skeleton based 
shape matching and retrieval. In Shape Modeling Int’l (2003), p. 130. 
[TS04] TUNG T., SCHMITT F.: Augmented reeb graphs for content-based retrieval 
of 3D mesh models. In Shape Modeling Int’l (2004), pp. 157–166. 
[ZSCO*08] ZHANG H., SHEFFER A., COHEN-OR D., ZHOU Q., VAN KAICK O., 
TAGLIASACCHI A.: Deformation-driven shape correspondence. Symposium on 
Geometry Processing (2008), 1431–1439. 
 
Online submission ID:1077 / A Skeleton-Based Approach for Shape Correspondence
counts are adjusted for computing the best shape correspon-
dence. This is because the vote counts for different merging
schemes may have different meanings. In our method, we
may merge skeletal nodes and obtain different shape corre-
spondences for different merging schemes. But we can still
compute the best shape correspondence which has the min-
imum cost. Our method may compute not only 1-1 corre-
spondences but also many-many correspondences between
skeletal nodes of two objects.
A method based on path similarity is considered for com-
puting correspondence between the skeleton graphs of two
2D images [BL08]. A skeleton is treated as a set of geodesic
paths formed by the terminal skeletal nodes. The paths of
the two skeletons are matched by using sequence matching.
Their method can match the terminal skeletal nodes but it
cannot match the internal skeletal nodes. Our method relies
on the spatial information of skeletal branches and the asso-
ciation between the skeletons and vertices of objects. Our
method can match both the external and internal skeletal
nodes of the two skeletons.
An approximate skeleton which is a planar graph having
at most degree three, is obtained by tracing the medial seg-
ments of the inner triangles in a constrained Delaunay tri-
angulation of the polygon. Mortara and Spagnuolo [MS01]
proposed a method for matching the approximate skeletons
of 2D polygonal objects according to the similarity of the
skeletal junction nodes and arcs. Our approach adopts the
similar approach for matching skeletons based on the simi-
larity of junction nodes and branches. However, our compu-
tation is involved with the association between the skeletal
nodes and vertices of 3D objects. Furthermore, we cluster
similar branches so as to reduce the searching space.
2. Related Work
Shape correspondence is one of the important research top-
ics in geometry processing. A comprehensive survey can be
found in [vKZHCO10]. We review the approaches for shape
correspondence that are mostly related to our work.
Graph-matching has been adopted for matching the Reeb
graphs or skeletons of objects [HSKK01, TS04, SSGD03,
BMSF06]. Common subgraphs are computed so that the
nodes of the common subgraphs form an one-to-one map-
ping with the minimum deviation of geometric properties.
These approaches have two common problems: (1) sensitive
to mesh topology and (2) symmetry switching [ZSCO∗08].
The first problem is due to that the construction of the com-
mon subgraphs depends on the graph connectivity. These ap-
proaches may be affected by small unwanted branches and
topological difference. The second problem is due to that
some skeletal nodes representing the same semantic parts
have similar geometric information, such as left/right hands
in a human model. The left hand may be mapped to the right
hand. We attempt to handle these two problems. The first
problem is handled by using the association between skeletal
nodes and vertices, and the spatial information of the skele-
tons. We may merge close-by junction nodes and group sim-
ilar skeletal branches as clusters. Most of the bad correspon-
dences can be eliminated. The second problem is tackled by
using shape matching locally for the skeletal branches at-
tached at the skeletal junction nodes. We observe that the ori-
entation of the skeletal branches does not change much for
most objects with different poses. We can match the skeletal
branches attached at the junction nodes based on the local
orientation of the skeletal branches.
A combinatorial search is adopted to compute electors and
they are applied in the cascading pruning tests [ATCO∗10].
Each elector votes on individual feature-to-feature matching
for computing the final correspondence. The approach may
mismatch the close-by nodes. This is because inconsistent
results may be obtained by using MDS (multi-dimensional
scaling) transformation [EK03]. In our approach, we may
merge the adjacent skeletal junction nodes and the adjacent
branches so as to avoid the mismatched problem. In the elec-
tor voting approach, the vote count is not easy to be justified
for skeletons with various merged skeletal nodes and merged
skeletal branches. Furthermore, the final correspondence of
their approach is determined based on the vote count. The
connectivity between the matched skeletal nodes may be
messed up. On the other hand, we consider the spatial in-
formation of skeletal branches for matching and hence we
do not have this problem.
Path similarity is considered for computing correspon-
dence between two skeleton graphs of two images [BL08].
The method can match only the terminal nodes as they con-
sider only the geodesic paths which connect terminal nodes.
Mortara and Spagnuolo [MS01] proposed a method for eval-
uating the similarity between skeletal junctions and arcs so
as to match the 2D skeletons. Our method shares the similar
approach of these two techniques, but we also consider the
association between the skeletal nodes and vertices that is
important for analysing the geometric properties around the
skeletal nodes.
3. Overview
We present the definitions, notations and a brief overview of
our approach in this section.
3.1. Definitions and Notations
A skeletal node is associated with a set of vertices after the
skeleton is built, such as the method in [ATC∗08]. The set of
vertices associated with a skeletal node often lay around it. A
skeletal node having one adjacent skeletal node is a terminal
node. A skeletal junction node is a skeletal node having three
or more adjacent skeletal nodes. A feature skeletal node is
either a terminal node or a junction node. A skeletal branch
c© 2011 The Author(s)
c© 2011 The Eurographics Association and Blackwell Publishing Ltd.
Online submission ID:1077 / A Skeleton-Based Approach for Shape Correspondence
Algorithm 3 matchOneCoreJunctionNodePair(P,Ks,Kt )
1: Input: the node P of correspondence tree; augmented skeletons Ks and Kt
2: for each node ns ∈ Ks do
3: for each node nt ∈ Kt do
4: if ns can be matched with nt then
5: add a child C to P
6: C.MatchingIn f o← P.MatchingIn f o∪ (ns ,nt ) //set matching info. of C.
7: matchRemaining(C,ns,nt ,Ks,Kt )
8: end if
9: end for
10: end for
Algorithm 4 matchingRemaining(P,ns,nt ,Ks ,Kt )
1: Input: the node P of correspondence tree;matched junction node pairs (ns,nt ); aug-
mented skeletons Ks and Kt
2: (B, ˆK1 , ˆK2)← matchBranches(ns,nt ,Ks,Kt )
3: if B != nil then
4: add a child C to P
5: C.MatchingIn f o← P.MatchingIn f o∪ B
6: for each (bs ,bt ) ∈ B do
7: (n′s ,n′t ,K′s ,K′t ) <- matchJunctionNodePair(C,bs/ns,bt/nt ,K′s ,K′t )
8: if (n′s ,n′t ) != nil then
9: add a child C1 to C
10: C1 .MatchingIn f o← C.MatchingIn f o∪ (n′s ,n′t )
11: matchRemaining(C1,n′s ,n′t ,K′s ,K′t )
12: end if
13: end for
14: end if
Table 1. The computation is fully automatic once the param-
eters are given. In practice, a user can usually obtain accept-
able results after tuning the parameters two to three times.
Parameters Purpose Value
K Number of pieces for constructing 8
the branch descriptor (Sec. 4.2.2)
λB Clustering of skeletal branches with similar 0.1
branch descriptors (Sec. 4.2.2)
CJ Cost for matching skeletal junction nodes 0.012 - 0.025
(Sec. 4.2.3)
dJ Distance for merging skeletal junction nodes 5 - 10
(% of the bounding box diagonal of the mesh, Sec. 4.2.3)
Table 1: The four parameters of our method.
4. Augmented Skeleton-Based Shape Correspondence
In this section, we present our method for establishing the
shape correspondence between two objects by matching
their augmented skeletons Ks (source) and Kt (target). We
use the subscript s and t to differentiate the elements of
the two skeletons. A correspondence tree is built for match-
ing the skeletal feature nodes and skeletal branches in a
breadth-first-search manner. Each node of the correspon-
dence tree stores the matched skeletal feature nodes and
skeletal branches while the correspondence tree is built. A
schematic diagram of constructing the correspondence tree
is shown in Fig. 3.
Initially the correspondence tree has one node, i.e. root,
which does not contain any matched pairs. Alg. 1 lists the
initialization procedure. We match a skeletal junction node
Figure 3: A correspondence tree for matching two aug-
mented skeletons. Core junction nodes are first matched. The
remaining skeletal branches and skeletal junction nodes are
matched in an interleaving manner.
pair with the minimum cost and create a node of the corre-
spondence tree. The newly created node of the correspon-
dence tree becomes the child node of the current inspected
node, i.e. the root node. The matching information is stored
in the child node. We proceed to match the remaining skele-
tal branches and skeletal nodes in an interleaving manner.
This process is invoked recursively until we cannot match
any more. Each leaf node of the final correspondence tree
represents a correspondence candidate. The leaf node with
the minimum cost is the best skeleton correspondence.
4.1. Core Junction Node Correspondence
The centricity cost Ccenter(ns,nt) is defined by:
Ccenter(ns,nt) = |AGD(ns)−AGD(nt)|, (1)
where AGD(·) is the normalized averaged geodesic
distance (∈ [0,1]) of the junction node, which is
computed by averaging the AGD values of the ver-
tices associated with the junction node. In other
words, AGD(ns) = 1|φ(ns)| ∑v∈φ(ns) AGD(v) and
AGD(nt) = 1|φ(nt)| ∑v∈φ(nt) AGD(v). The centricity cost
measures how far a skeletal node is away from the center
of the object. The definition of the centricity cost is similar
to [ATCO∗10]. However, we consider the AGD of the
vertices associated with the skeletal node instead of the
skeletal node itself. In this way, the geometric properties
of the vertices around the skeletal node can be taken into
consideration.
c© 2011 The Author(s)
c© 2011 The Eurographics Association and Blackwell Publishing Ltd.
Online submission ID:1077 / A Skeleton-Based Approach for Shape Correspondence
coordinate system at nt such that ns locates at nt (see
Fig. 5(b)). Assume that there are N′ and M′ unmatched
skeletal branches at ns and nt , respectively, N′ ≥M′. Hence,
there are M′ branch pairs to match. In total, there are M′!CN
′
M′
combinations for matching the M′ branch pairs.
We adopt a greedy approach to match M′ branch pairs.
Assume that P = (p1, p2, ..., pM′) and Q = (q1,q2, ...,qM′),
where pi and qi are the unit branch vectors at the
matched junction pair (ns,nt). We employ shape matching
[MHTG05] to compute a rotation matrix R by minimizing
the sum of the distances between the branch vector pairs.
The angle difference between a branch vector pair (pi,qi) is:
ang(pi,qi) = acos(dot(pi,Rqi))/pi, (4)
where dot(·, ·) is the dot product of two vectors. The spatial
cost for (P,Q) is given by
Cspatial(P,Q) =
M′
∑
i=1
(ang(pi,qi))2. (5)
Now, the cost for matching P and Q is computed as
Cbranch(P,Q)= (Cstruct(Bs(ns),Bt(nt))+ε)∗(Cspatial (P,Q)+ε).
(6)
The cost Cbranch not only depends on the spatial orienta-
tion of the skeletal branches but also the structures of the
sub-skeletons generated at ns and nt . We sort all the possi-
ble skeletal branch correspondences with ascending cost and
select the first 10% of the skeletal branch correspondences.
For each possible branch correspondence (P, Q) at (ns,nt),
a new node of the correspondence tree is created. After that
we have matched the M′ skeletal branch pairs. The roles of
P and Q are swapped if M′ > N′.
The rotation matrix R can be used for filtering the bad
skeletal branch correspondences which are due to symmetry.
If the determinant of the R is negative (i.e. -1), it represents
that the rotation matrix involves a reflection. Such a skeletal
branch correspondence should be ignored.
We do not adopt MDS [EK03] for computing the branch
vectors. This is because the relative orientations of some
branches may not be maintained, as shown in Fig. 6.
4.2.2. Clustering of Skeletal Branches
Some parts of a mesh have the same semantic meanings,
such as front/back legs and ears. They have similar shapes
and geometric features. We can group these similar parts
as clusters in order to prune bad correspondences. The idea
is as follows. Each part is usually associated with a skele-
tal branch. We divide each skeletal branch b into K pieces,
namely b1, b2, ..., and bK . After that we can compute a
value for the geometric property of each piece. In our case,
we compute MSP value of each piece (see MSP value in
Sec. 5). MSP value captures roughly the local volume around
a skeletal node. The advantage of using MSP value over the
Figure 6: The two skeletons are obtained before and after
applying MDS, respectively. The two branches (n1,n2) and
(n1,n3) are symmetric with respect to the junction node n1
after MDS is performed.
radius of the maximum sphere at a skeletal node is that us-
ing MSP value is more suitable if the objects deform. Con-
sider a deformed circle in Fig. 8. The radius of the cir-
cle changes significantly but its perimeter does not change
much. We have MSP(bk) =
∫
p∈bk
MSP(p)dp
|bk| , where |bk| is the
length of bk. The value MSP(bk) is normalized by the max-
imum MSP value of individual objects so that MSP(bk) is
scale-invariant. There are K values for each branch and they
are assembled as a k-dimension vector, namely, branch de-
scriptor. Assume that there are two branch descriptors `i and
` j. The corresponding two skeletal branches are clustered if
‖`i−` j‖2 ≤ λB. The branch clusters are illustrated in Fig. 7.
If two branches are clustered, they cannot be clustered with
other branches. To handle three or more branches with sim-
ilar branch descriptors, we create a new node of the corre-
spondence tree for each pair of the branches.
Figure 7: Clusters of the skeletal branches at a junction
node ni. Each cluster is drawn in the same color. Left: The
two back legs; Middle: The two front legs; Right: The two
two ears.
Figure 8: A deformed circle. Its perimeter does not change
much but the radius of the maximum incircle is changed sig-
nificantly.
c© 2011 The Author(s)
c© 2011 The Eurographics Association and Blackwell Publishing Ltd.
Online submission ID:1077 / A Skeleton-Based Approach for Shape Correspondence
The MSP function is a scalar function defined on the sur-
face of a mesh. Slices of a point p are defined as the inter-
section curves with the set of planes generated by the nor-
mal of the surface in p. The MSP value of p is the minimum
perimeter of all slices of p. The MSP value of a point is usu-
ally approximated by uniformly sampling as it is not easy
to generate all the slices of the point. In our experiments, we
used 12 slices for each point. An example is shown in Fig. 11
for computing the MSP value of a point. The MSP value of
a point can be used for approximating the volume around a
slice by supplying a thickness value.
Figure 11: The MSP value of a point p (red thick line). There
are 12 slices for each model.
An MSP skeleton is built as follows. The slice of each
vertex which has the minimum perimeter is computed. Each
vertex is then transformed to the center point of the inter-
sected curve between the minimum slice and the object. The
transformed vertices likely locate at the interior of the origi-
nal mesh and they form a new mesh which is skinny. We call
this skinny mesh a shrunk mesh. A greedy skeletonization
process is then employed for degenerating the shrunk mesh
by performing a sequence of edge swap operators in order to
obtain a 1D curved skeleton. The greedy skeletonization pro-
cess is similar to [ATC∗08]. During the process, the trans-
formed vertices are merged to obtain skeletal nodes. Hence,
each skeletal node of the curved skeleton is mapped to a
set of the vertices. Some of the vertices may not be associ-
ated with any skeletal nodes because unwanted short skeletal
branches and their corresponding vertices are removed.
6. Results and experiments
We present the results of our method for computing shape
correspondence and then discuss its limitations.
Results. In the preprocessing stage, we computed the
skeletons of the models and AGD of the vertices. We then
applied our method for a variety of models. The dog skele-
ton is the source. The skeleton correspondence results are
shown in Fig. 12. The matched node pairs are drawn in the
same colors but the unmatched nodes are not shown. All of
the semantic parts (e.g. legs, heads, and ears) are matched
correctly. Since our method performs junction node merging
and branch merging, there may be one-to-many or many-
to-many correspondences between junction nodes and also
between branches. This is different from the previous ap-
proaches [HSKK01, BMSF06, ATCO∗10] which establish
only one-to-one mapping. For example, a junction node at
the chest of the dog is matched with two junction nodes at
the chest of the goat. Our method can handle the skeletons
of chairs with loops, as shown in Fig. 13.
Comparisons. We compared our method with the method
by Au et al. [ATCO∗10]. Fig. 14 shows two sets of corre-
spondence results. For the top example, their method mis-
matches an ear of the horse to the jaw of the dog. For the
bottom example, their method mismatches the ears of the pig
to the upper jaw of the dragon. Our method produces correct
results due to branch clustering. The ears form clusters and
they cannot be matched with the non-clustered jaws.
Compared to [BL08], our method can match the internal
nodes of the skeletons. Our method matches the core junc-
tion nodes, and then match the remaining branches and junc-
tion nodes in an interleaving manner. So that our method can
match the internal nodes.
Model #Tri. AGD MSP SE MAS
Function Function
Dog(source) 18976 157.71 25.86 33.23 -
Deer 7402 22.23 5.04 3.57 0.20
Human 11258 43.05 5.10 9.74 0.22
Armadillo 20000 193.32 30.10 23.63 0.24
Dragon 16000 199.02 27.79 28.16 0.19
Triceratops 15764 104.33 18.17 27.44 0.21
Elephant 30000 500.30 52.73 146.08 0.30
Asian dragon 28198 490.70 44.54 37.28 0.41
Table 2: Model complexities, the timings (sec) of the pre-
processing tasks and the timings of matching the augmented
skeletons. SE: Skeleton extraction; MAS: Matching the aug-
mented skeletons.
Timing information. All the results were performed on
Intel Core 2 Duo CPU E8400 3.0GHz with 4GB memory, us-
ing a single thread implementation. We precomputed AGD
function, MSP function, and skeleton extraction. Table 2
shows the timing information of the preprocessing computa-
tion and the timings of performing the shape correspondence
(i.e. matching the augmented skeletons of the objects). The
computation time for shape correspondence is under 0.5 sec-
ond in all our experiments. Table3 shows the information of
the correspondence trees which were constructed for match-
ing the augmented skeletons of the objects.
The searching space of our method is smaller than the
combinatorial searching method [ZSCO∗08, ATCO∗10] as
we perform branch clustering. The total number of the pos-
sible matchings between the two skeletons reduce dramati-
cally. Fig. 15 shows three leaf nodes of the correspondence
tree for matching the skeletons of the dog and giraffe mod-
els. The best result is shown in Fig. 15(a). The cost of
the best node is smaller if more feature nodes and skeletal
branches are matched. Similar to other existing techniques,
our method requires the manual operations to change the pa-
rameters if the results are not good. It usually takes a few
c© 2011 The Author(s)
c© 2011 The Eurographics Association and Blackwell Publishing Ltd.
Online submission ID:1077 / A Skeleton-Based Approach for Shape Correspondence
Figure 14: Comparison with the method [ATCO∗10]. Left: the results of [ATCO∗10]; Right: our results. Their method mis-
matches the nodes at the heads (highlighted by the red squares).
7. Conclusions
We have presented a novel skeleton-based approach for com-
puting shape correspondence. Our method may merge skele-
tal nodes and branches so that it may compute 1-1 corre-
spondences and many-many correspondences. Our method
has been tested for a variety of similar objects and they may
have different poses. The experimental results show that our
method can compute acceptable shape correspondence.
Our method relies on the association between the skeletal
nodes and object vertices, but we do not consider the actual
shape of the parts for matching. Our method may fail to com-
pute a reasonable shape correspondence if the objects are not
similar. One possible extension of our work is to consider
the actual shape of the parts so that partial correspondence
can be computed. Another possible extension is that instead
of selecting the core junction nodes, the parts of the objects
are first extracted by employing skeletons. After that we can
match the parts and build the entire shape correspondence.
Furthermore, we would like to apply prior knowledge with
our method for computing shape correspondence.
References
[ATC∗08] AU O. K.-C., TAI C.-L., CHU H.-K., COHEN-OR
D., LEE T.-Y.: Skeleton extraction by mesh contraction. ACM
TOG 27, 3 (2008).
[ATCO∗10] AU O.-C., TAI C., COHEN-OR D., ZHENG Y., FU.
H.: Electors voting for fast automatic shape correspondence.
Comp. Graph. Forum 29, 2 (2010), 645–654.
[BL08] BAI X., LATECKI L.: Path similarity skeleton graph
matching. IEEE Trans. on PAMI 30 (2008), 1282–1292.
[BMSF06] BIASOTTI S., MARINI S., SPAGNUOLO M., FALCI-
DIENO B.: Sub-part correspondence by structural descriptors of
3D shapes. Comp. Aided Design 38, 9 (2006), 1002–1019.
[EK03] ELAD A., KIMMEL R.: On bending invariant signatures
for surfaces. IEEE Trans. on PAMI 25 (2003), 1285–1295.
[HJWC09] HO T. C., JI H. X., WONG S. K., CHUANG J. H.:
Mesh skeletonization using minimum slice perimeter function.
Computer Science Technical Report CS-TR-2010-0001, The Na-
tional Chiao Tung University, Taiwan, R.O.C. (2009).
[HSKK01] HILAGA M., SHINAGAWA Y., KOHMURA T., KUNII
T. L.: Topology matching for fully automatic similarity estima-
tion of 3D shapes. In SIGGRAPH (2001), pp. 203–212.
[MHTG05] MÜLLER M., HEIDELBERGER B., TESCHNER M.,
GROSS M.: Meshless deformations based on shape matching.
ACM TOG 24, 3 (2005), 471–478.
[MS01] MORTARA M., SPAGNUOLO M.: Similarity measures
for blending polygonal shapes. Computers and Graphics 25, 1
(2001), 13–27.
[SSGD03] SUNDAR H., SILVER D., GAGVANI N., DICKINSON
S.: Skeleton based shape matching and retrieval. In Shape Mod-
eling Int’l (2003), p. 130.
[TS04] TUNG T., SCHMITT F.: Augmented reeb graphs for
content-based retrieval of 3D mesh models. In Shape Modeling
Int’l (2004), pp. 157–166.
[vKZHCO10] VAN KAICK O., ZHANG H., HAMARNEH G.,
COHEN-OR D.: A survey on shape correspondence. Eurograph-
ics State-of-the-art Report (2010).
[ZSCO∗08] ZHANG H., SHEFFER A., COHEN-OR D., ZHOU
Q., VAN KAICK O., TAGLIASACCHI A.: Deformation-driven
shape correspondence. Symposium on Geometry Processing
(2008), 1431–1439.
c© 2011 The Author(s)
c© 2011 The Eurographics Association and Blackwell Publishing Ltd.
SAI-KEUNG WONG, JAU-AN YANG, TAN-CHI HO AND JUNG-HONG CHUANG 
 
partition a given mesh into patches which are satisfied with certain properties, such as volume, planarity 
and disc-like. On the other hand, there are algorithms which partition a mesh into semantic components 
based on the human perception. Readers are referred to [2,24,8] for details. Different segmentation 
algorithms may generate different segmentations for a mesh. Chen et al. [8] proposed a number of criteria 
to evaluate the similarity of two segmentations. Based on the criteria, they compared different 
segmentations to the ground truth segmentations defined by users. Consistent mesh segmentation aims to 
produce consistent segmentations for a set of meshes [28,25,31]. 
Golovinskiy and Funkhouser [10] employed rigid alignment [5] in a hierarchical clustering approach 
for consistent segmentation. Both the geometric features of individual meshes and the correspondence 
information between the set of meshes are considered. However, rigid alignment may not be able to 
correctly align the meshes in some cases, as reported in [14]. 
Kalogerakis et al. [14] proposed a scheme to compute segmentations and to assign labels for a set of 
meshes. The assignment of labels was formulated as an optimization problem and the objective function 
measured the consistency of primitives (i.e. triangles) with labels. The objective function was computed via 
a training process. Then the objective function was applied to the other meshes for computing consistent 
segmentations. Their approach handled various segmentations for a wide range of meshes. They reported 
that it took eight hours to train on a single Xeon E5355 2.66GHz processor for a database consisting of six 
training meshes of about 20K-30K faces and six labels. Our method computes consistent segmentations for 
similar objects but does not have a training process. Furthermore, our method refines the target boundaries 
so that their geometric details are as similar as possible to the ones of the corresponding source boundaries. 
Parameterization methods [22,17,23] can be adopted for establishing a mapping between two objects. 
The segmentation of one object can then be transferred to another. This kind of approach may not produce 
similar boundaries of segments between the two objects as such techniques often rely on globally 
minimizing certain kind of energies. The segment boundaries may not locate at the desired positions.   
3. PRELIMINARIES AND OVERVIEW 
We present the preliminaries and overview of our method in this section. The inputs of our method are: 
(1) two meshes (source and target), (2) their skeletons, (3) skeleton mesh correspondence and (4) the 
segmentation of the source mesh. The outputs are: (1) the segmentation of the target mesh and (2) the 
boundary correspondence between the source and target segmentation. We not only build the 
correspondence between the segment boundaries but also the points of the segment boundaries. The 
encoding of the source segmentation includes: each segment boundary consists of a set of connected edges; 
and each face of the source mesh is assigned a segment index. 
 
3.1 The Skeleton 
 
We follow the similar notation presented in [34]. A skeleton has a set of skeletal nodes and skeletal 
branches. Two directly connected skeletal nodes form a skeletal branch. The shortest path between two 
skeletal nodes is called a skeletal path. There are two types of skeletal feature nodes: junction nodes and 
terminal nodes. A junction has at least three incident branches and a terminal node has one incident branch. 
A skeletal arc is a skeletal path and it has two feature nodes which are also its two end nodes. Two 
skeletons are shown in the top row of Fig. 1. 
  
3.2 The Skeleton-Mesh Correspondence 
 
Our method exploits the skeleton-mesh correspondence to perform boundary transfer from the source 
segmentation to the target. The skeleton-mesh correspondence can be obtained by applying the method 
presented in [4] to construct the skeleton of the mesh. The method shrinks the mesh and the vertices are 
grouped as skeletal nodes during the skeletonization process. After computing the skeleton, a skeletal node 
is associated with a subset of the mesh vertices. A non-feature node is mapped to a set of vertices forming a 
SAI-KEUNG WONG, JAU-AN YANG, TAN-CHI HO AND JUNG-HONG CHUANG 
 
3.5 Overview 
Fig. 3 The segmentation transfer results (top and bottom) for the four-legged animals. The characteristics of the source 
segmentation (goat and pig) are captured and reproduced to the target models. 
 
There are two major stages in our method: skeleton-boundary correspondence and boundary transfer. 
The skeleton boundary correspondence is useful for computing approximately the target boundaries and it 
is built between segment boundaries and skeleton arcs of the source mesh. A boundary transfer procedure is 
adopted for mapping each source segment boundary enclosing a skeletal arc to the target mesh. In the 
procedure, a cylindrical parameterization is applied for mapping the regions around the source segment 
boundaries to the target mesh. Finally, we refine the segment boundaries on the target mesh such that their 
geometric details are consistent to the ones of the corresponding source segment boundaries. Fig. 3 shows 
some of our results. The interior (i.e. faces) of the segment regions can be computed after the segment 
boundaries are computed.  Table 1 shows the major parameters of our method. 
 
Table 1. The major parameters of our method. 
Parameter Purpose 
θ Determining local maximum of the skeletal-arc profile 
(for computing MSP-gradient-based boundaries) 
K Gaussian smoothing for denoising the skeletal-arc profile 
(Kernel Size) 
λ Searching region for target boundary refinement 
4. CONSISTENT SEGMENTATION TRANSFER  
Given the skeleton correspondence between the source and target skeletons, we transfer each source 
segment boundary enclosing a skeletal arc to the target mesh. Assume that the source arc (, )  and 
the target arc ( ,  ) are matched, where  and  are the two end nodes of , and   and   are the 
two end nodes of . Besides,  and  are enclosed by the source segment boundary  and the target 
segment boundary   (to be computed), respectively. We perform four steps to transfer   to the target 
mesh so as to obtain : skeleton-boundary correspondence, construction of covering regions, boundary 
transfer, and target segment boundary refinement. 
 
4.1 Skeleton-Boundary Correspondence 
 
We compute the fitting plane of  based on Principal Component Analysis [1]. If the fitting plane of 
  intersects with a skeletal arc   then   encloses  . Assume that p( ) is the intersection point 
between  and the fitting plane. An arc ratio r() of  with respect to  is given as: r() = len(, 
p())/len(, ), where len(·, ·) is the distance between the two points on the skeletal arc . Our goal is 
to compute r() of the target segment boundary on bt and then compute p() based on r(). A skeletal 
arc corresponds to a part of the object. Hence, the parts of the matched skeletal arcs are similar. Consider 
that the part associated with bs is divided into two sub-parts based on r(). Similarly, we can divide the 
part associated with   based on r( ). Hence, we want to compute r( ) such that the two sub-parts 
SAI-KEUNG WONG, JAU-AN YANG, TAN-CHI HO AND JUNG-HONG CHUANG 
 
Denote   as the i-th MSP-gradient-based boundary of the source and   as the j-th MSP-gradient 
based boundary of the target. The cost for matching the MSP-gradient-based boundary pair is given by: 
$, ,   -  -.+ /∑ |01#|2∈345 6
456∆789 
∑ |01#|2∈3:; 
<
:;<∆789 =
.
, 
where Mq is the MSP gradient of a mesh vertex q, || and 66 are the numbers of the vertices of 
 and 66 , respectively; ∆MSP is the maximum of the MSP gradient magnitude of the vertices. We find 
the MSP-gradient-based boundary pair with the lowest cost. Assume that - and - are the arc 
ratios of the best matched source and target MSP gradient-based boundaries, respectively. There are two 
cases to consider: 
1. Case One: p() lies between  and p, then -  C
5C
D; 
D5 ; 
2. Case Two: p() lies between p and , then r() = - ) C
5E C
D5EC
D; E
D5 . 
After r() is computed, p()  can be computed based on proportion, i.e. the linear interpolation on 
the skeletal arc , FGH"I; ,J
;   FGH"I; ,"K;   = r(). Notice that in both cases, if r() = r( ), we have r() = r(). 
In other words, if  lies around ,   lies around  , too. 
 
If the MSP-gradient-based boundaries are not found, r() is set as r(). Then we compute p() based on 
proportion. 
 
4.2 Covering regions 
Fig. 6 Construct a covering region of a boundary: (a) construct a fitting plane; (b) project the points of the boundary to 
the fitting plane and construct the line segments; (c) remove the faces not overlapping with the boundary (red) ; and (d) 
refine faces (blue) around the boundary to obtain the final covering region. 
 
A covering region of a boundary consists of a set of faces and the faces cover the entire boundary. The 
covering region is used for computing and refining the target segment boundaries. We rely on two 
characteristics to construct the covering region of a source segment boundary: (1) the relative orientation 
between the fitting plane of the source boundary and its associated arc; and (2) the distances between the 
points of the source segment boundary and its associated fitting plane. To construct a covering region of Bs, 
we consider the faces of the mesh intersecting with the corresponding fitting plane. If all the faces 
intersected by the fitting plane overlap with Bs, then we simply use these faces as the initial covering 
region. However, the fitting plane may intersect with some faces of the mesh and these faces may not 
overlap with , as shown in Fig. 6(a). Assume that a set Fp contains the faces intersecting with the fitting 
SAI-KEUNG WONG, JAU-AN YANG, TAN-CHI HO AND JUNG-HONG CHUANG 
 
covering region has two boundaries and they bound the internal region of the covering region. These two 
boundaries correspond to the upper and lower boundaries of a cylinder according to their arc ratios (e.g. 
upper boundary with smaller arc ratio). The internal region of the covering region corresponds to the lateral 
side of the cylinder. The cylindrical parameterization can be unfolded to a 2D plane domain. The v 
coordinates of the lower and upper boundaries are set to 0.0 and 1.0, respectively. The range of the 
parameterized coordinates (u, v) is [0, 1) × [0, 1]. 
 
Fig. 8 The parameterized orientation adjustment. (a): The y-coordinate value is chosen as the alignment value as its 
range is larger than the range of the z- coordinate values of the samples. In this case, µo is around 6/9 ; (b): The vertices 
of the boundaries are colored according to their alignment values. The u-offsets are computed for minimizing the total 
difference between the coordinates of the boundary sample points. 
 
The origin (i.e. (0, 0)) of the parameterization map is set as a point of the lower boundary of the 
covering region. The parameterized covering regions of the source and target may have a large deviation in 
the U-direction. A parameterized orientation adjustment is performed to address this issue. The 
parameterized orientation adjustment can be treated as rotating the boundaries of the target cylinder so as to 
align with the boundaries of the source cylinder. After the adjustment, the vertices of the boundaries have 
the similar distribution of the coordinates, as shown in Fig. 8. The details are given as follows. All the 
boundary vertices of Cs and Ct are transformed to the local coordinate systems, respectively. 
Notice that the cylinder axis is pointing in the same direction with the x-axis of the coordinate system. 
We compute the two ranges for the y− and z− coordinates of the boundary vertices of $ and $ . The 
coordinate with the largest range is chosen as the alignment value of all the boundary vertices. We sample 
N points uniformly from the lower boundary L of $ and their parameterized u-coordinates form a N-tuple 
UBs = (u1, u2, ..., uN). Similarly, we have UBt = (v1, v2, ..., vN). Denote that V (L, u) returns the alignment 
value at the sample position whose u-coordinate is u on the boundary L. The u-offset µo ∈ [0, 1) of L is 
computed by minimizing the following function: 
 
%-MNOPQ ∑ RL, S  RL , T ) UV.WX , 
where T ) µV is wrapped to [0, 1] if T ) µV > 1 (e.g. 1.2 is wrapped to 0.2). If the sample position is 
on an edge, the alignment value is computed by interpolating the values of the two vertices of the edge. 
After the process, we match the sample points of  to the sample points of  . Notice that the vertices of   may lay on the edges of the target mesh. 
 
4.4 Boundary Refinement 
 
We have matched the sample points of the source and target boundaries. The final step here is to refine 
the target boundaries. Most of the mesh segmentations compute boundaries close to the local geometric 
features, such as, curvature or dihedral angle. Some techniques may compute boundaries that have short 
and smooth shapes. In our case, we want to refine the target boundaries that may follow particular patterns 
such as jagged or wavy shapes according to the corresponding source boundaries. We use snake [19] to 
refine   based on the following energy function: 
Z"[\   ] Z^ [_C` ) Za[J` b`∈
; , 
SAI-KEUNG WONG, JAU-AN YANG, TAN-CHI HO AND JUNG-HONG CHUANG 
 
Comparisons. We compare with the method by [10] and Fig. 10 shows the results. The results 
produced by [10] are poor for the models with large difference in shapes or poses. Our method produces 
better results since our method adopts skeleton correspondence before segmentation transfer is performed. 
 
Fig. 10 Comparison with [10] for segmentation transfer. 
 
In comparing with the method by Kalogerakis et al. [14], our method is more capable of controlling 
the positions of boundaries. Notice the differences to the rightmost airplanes in Fig. 11 and the giraffes in 
Fig. 12. The seat and back of the rightmost chair in Fig. 13 form a single segment since there is no 
boundary on some pillars. The method of [14] is region-based so that it can produce segments for all the 
pillars of the chairs. Finally, we compare with the other segmentation algorithms based on the Princeton 
Benchmark [8]. The results between ”Human” and our method ”Seg Trans.” are similar to each other. Our 
method can consistently transfer the source segmentation to the target mesh. The results also show that our 
method is comparable to the other methods, including Randomized Cuts [9], Shape Diameter Function [26], 
Normalized Cuts [9], Core Extraction [15], RandomWalks [18], Fitting Primitives [1] and K-Means [27], 
as indicated in Fig 14. 
Fig. 11 The comparison with [14] on airplane models. The wings of the rightmost airplanes have difference 
segmentation types. A target segment boundary is not smooth in the second left airplane in our approach due to the 
poor alignment of the fitting plane. 
 
Fig. 12 The comparison with [14]. Our result is better for the giraffe. 
 
SAI-KEUNG WONG, JAU-AN YANG, TAN-CHI HO AND JUNG-HONG CHUANG 
 
Table 2 lists the computation times of our segmentation transfer results presented in Fig. 10, including 
the total computation time, the number of segment boundaries, and the average time for performing a 
boundary transfer. On average it took around four seconds to perform segmentation transfer. Our method 
requires the manual operations to change the parameters if the segmentation results are not good. Usually, 
it took three to four attempts to obtain high quality results.  
Discussions and limitations. The quality of the segmentation transfer results depends on the quality 
of the skeleton correspondence. If the skeletons do not capture the shape of the meshes faithfully, our 
method may not work properly. If the fitting planes do not fit well the source boundary, the arc ratios are 
not reliable for determining the target boundary positions. We cannot handle segment boundaries which 
enclose multiple arcs. The target boundaries may be distorted for non-cylindrical covering regions. Further 
studies are needed for building the local coordinate systems for computing the covering regions of the 
target segment boundaries. 
6. CONCLUSION 
We have presented a segmentation transfer approach for mapping consistently a segmentation of a 
source mesh to a target mesh. The segmentation transfer approach is based on the skeleton correspondence 
between the meshes. The characteristics of boundaries including the relative orientation between the 
boundaries and skeletal arcs, the shape of the corresponding parts and local surface features, are considered. 
We have shown that our method generates consistent segmentations for a variety of similar meshes of 
different shapes and poses. Our approach relies on the skeleton-mesh correspondence and skeleton 
correspondence to perform segmentation transfer. Our method does not handle the segment boundaries that 
do not enclose a skeletal arc.  
In the future, we would like to develop techniques to transfer any kind of segment boundaries by 
combining consistent parameterization with skeletons. We believe that the skeleton-based approach can 
enhance the quality of the segment boundaries for the techniques based on consistent parameterization and 
other segmentation techniques. 
7. REFERENCES 
1. M. Attene, B. Falcidieno, and M. Spagnuolo, “Hierarchical mesh segmentation based on fitting primitives,” 
The Visual Computer, 22(3):181–193, 2006. 
2. M. Attene, S. Katz, M. Mortara, G. Patane, M. Spagnuolo, and A. Tal, “Mesh segmentation - a comparative 
Study,” in IEEE Int’l Conf. on Shape Modeling and Applications, page 7, 2006. 
3. O.-C. Au, C. Tai, D. Cohen-Or, Y. Zheng, and H. Fu, “Electors voting for fast automatic shape 
correspondence,” Comp. Graph. Forum, 29(2):645–654, 2010. 
4. O. K.-C. Au, C.-L. Tai, H.-K. Chu, D. Cohen-Or, and T.-Y. Lee, “Skeleton extraction by mesh contraction,” 
ACM TOG, 27(3), 2008. 
5.  P. Besl and N. McKay, “A method for registration of 3-D shapes,” IEEE Trans. on PAMI, 14(2):239–256, 
1992. 
6. S. Biasotti, S. Marini, M. Spagnuolo, and B. Falcidieno, “Sub-part correspondence by structural descriptors 
of 3D shapes,” Comp. Aided Design, 38(9):1002–1019, 2006. 
7. Y. Boykov and V. Kolmogorov, “An experimental comparison of min-cut/max-flow algorithms for energy 
minimization in vision,” IEEE Trans. on PAMI, 26(9):1124–1137, 2004. 
8. X. Chen, A. Golovinskiy, and T. Funkhouser, “A benchmark for 3D mesh segmentation,” ACM TOG, 
28(3):1–12, 2009. 
9. A. Golovinskiy and T. Funkhouser, “Randomized cuts for 3d mesh analysis,” ACM TOG, 7(5), 2008. 
10. A. Golovinskiy and T. Funkhouser, “Consistent segmentation of 3D models,” Computers and Graphics, 
33(3):262–269, 2009. 
11. R. Gonzalez and R. Woods, “Digital image processing”,  Addison-Wesley Publishing Company, 1992. 
12. M. Hilaga, Y. Shinagawa, T. Kohmura, and T. L. Kunii, “Topology matching for fully automatic similarity 
estimation of 3D shapes,” in SIGGRAPH, pages 203–212, 2001. 
1 
 
出國訪問研究成果報告 
                                                             
計畫編號 NSC 99-2221-E-009-118        執行期間 2010/08/01 ~ 2012/7/31 
計畫名稱 多邊形網格分割轉換(2/2) 
出國人員姓名 
服務機關及職稱 
 莊榮宏/交大資訊工程系教授 
出國時間地點 3/25/2012~4/1/2012 UC Davis, CA, USA 
訪問研究主題 
（中文）網格分割轉換，人臉彩妝模型與即時顯像技術，與巨量視訊資料
分析與應用之研究 
（英文）Mesh Segmentation Transfer, Facial Cosmetic modeling and real-time 
rendering, analysis of large video data and its applications 
 
一、出國訪問經過 
計畫主持人安排 3/25/2012~4/1/2012 到 University of California at Davis 作訪問研究。
UC Davis 電腦系在圖學(graphics)與視算(visualization)有堅強的研究團隊，有兩個相關研究
中心： Institute for Data Analysis and Visualization (IDAV) 及 Institute for Ultra-Scale 
Visualization。我此次訪問是與 Institute for Ultra-Scale Visualization 的馬匡六教授合作，透
過參與馬教授的實驗室研討與討論做了很豐富的交流。 
二、訪問研究成果 
此次訪問討論的方向是討論網格分割轉換，人臉彩妝模型與即時顯像技術，巨量視訊
資料之分析與應用之技術交流與未來合作規劃。頭兩項是進行中的研究，最後一項則是新的
合作方向。 
3 
 
如在高速公路、大遊樂園、校園或是博物館，已廣設的監視攝影機所產生的巨量streaming
資料。討論的技術主題包涵 
1. Streaming data processing and management， 如streaming data extraction, summarization, 
redundant data removal, similarity matching等 
2. Movement data analysis， 如路線分析 
3. Visualization， 如人群行動或路線之視覺化，Multi-resolution viewing等  
4. Simulation，如人群行動模擬、火災模擬等  
 
我們將持續討論這些主題，期待能成為交大圖學同仁與馬教授合作的一個整合型計畫。 
     
 
99年度專題研究計畫研究成果彙整表 
計畫主持人：莊榮宏 計畫編號：99-2221-E-009-118- 
計畫名稱：多邊形網格分割轉換 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 2 2 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 2 2 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
