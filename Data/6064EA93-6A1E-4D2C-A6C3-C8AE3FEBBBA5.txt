  
中 文 摘 要 
本研究計畫「微步進驅動系統精密位置跟隨控制研究」，針對線性混合型步進馬達發展
一智慧型高精密度的微步進驅動控制系統，整合驅動電路、感測電路和控制器於一體，達到
微步進驅動系統精密的位置跟隨控制目的。首先建立微步進驅動系統的硬體架構，設計電流
和位置回授的控制迴路，發展空間向量脈寬調變（SVPWM）的驅動電路，以解決馬達線圈電流
耦合和反電動式干擾的問題。並且發展一新的自我組織反覆式類神經模糊網路，可以根據受
控系統的複雜度線上自我增加或刪除模糊規則，以得到最佳的系統近似精度，並以此所發展
的網路系統為基礎，建立一微步進的適應性位置跟隨控制系統，以解決微步進驅動系統結構
性不確定干擾的問題。利用線上倒傳遞法則，推導反覆式的網路參數調整法則，並透過李阿
普若夫穩定定理以選擇變動的學習率，以確保網路系統的收斂。最後，以實際的微步進馬達
驅動系統，利用各種軌跡跟隨實驗證明所提控制策略的有效性。 
 
關鍵詞：線性微步進馬達；脈寬調變驅動器；自我組織式；反覆式類神經模糊網路系統。  
 
I 
  
I. INTRODUCION 
Linear micro-stepping motors (LMSMs) have been widely used over the years in robotic 
manipulators, industrial process machinery, and computer peripherals due to their high-precision 
speed and positioning operations. However, the open-loop control scheme leads to low-performance 
capability and lack of adaptability to payload variations. Recently, many researches have attempted 
to achieve high-precision performances of LMSM drives using adaptive control methods with 
position/velocity feedback [1]-[3]. The control strategy can online tune the parameters of control 
models and achieve good performance by attenuating the effects of system uncertainties. However, 
the precise model of the LMSM drive is impossible to obtain in practical applications. Intelligent 
control approaches such as neural networks (NNs) and fuzzy inference systems possess several 
advantages of robustness, model-free, and universal approximation. Thus, they have attracted more 
attention to deal with the complex control problems of LMSM drives [4], [5]. Sanchez et al. [6] 
proposed a NN-based inverse control approach for the trajectory tracking of a permanent magnet 
stepping motor. Melin and Castillo [7] used fuzzy-NN architecture to build a fuzzy inverse dynamic 
model for controlling a stepping motor drive. Rubaai et al. [8] developed a dynamic NN to 
simultaneously identify and adaptively control the trajectory tracking of a hybrid stepping motor. 
These methods were successful in that intelligent control approaches do not require mathematical 
models and have the ability to approximate nonlinear systems. However, some constrained 
conditions and initial system information were required in the control system. 
Neural fuzzy network (NFN) is multilayered connectionist network, which brings the learning 
abilities of neural networks to realize the elements and functions of fuzzy systems. Recently, the 
Takagi–Sugeno–Kang (TSK)-type of fuzzy models has received considerable attention of the fuzzy 
modeling community due to their very effectiveness for system modeling problems [9]-[11]. The 
TSK fuzzy models provide more powerful representation than the Mamdani fuzzy models. Wai and 
Chen [12] presented a TSK-type NFN control scheme for position tracking of robot manipulators to 
guarantee the convergence of tracking errors via Lyapunov stability. Gao and Joo [13] proposed a 
robust adaptive TSK-type NFN controller for identification and control of uncertain 
multiple-input–multiple-output (MIMO) nonlinear systems. Ouyang et al. [14] developed a 
TSK-type NFN technique for system modeling problems via fuzzy clusters. However, the NFN is 
only capable of static mapping of input-output training data due to its feedforward network structure. 
On the other hand, recurrent NFN (RNFN) has superior dynamic capability than the feedforward 
NFN [15], [16]. The RNFN is a dynamic mapping and usually obtains good control performance in 
the presence of system uncertainties. Wang and Lee [17] designed a self-adaptive RNFN control 
scheme for controlling an autonomous underwater vehicle. Lin et al. [18] applied a RNFN 
controller to the trajectory tracking of permanent-magnet linear-synchronous-motor (PMLSM) 
drives. Juang and Chen [19] proposed a TSK-type RNFN (TRFN) for a temperature system control 
by modeling plant inverse. Although these RNFN techniques can incorporate fuzzy rules with 
dynamic elements for better approximation of nonlinear dynamics, how to build a suitable-sized 
network structure and reduce control complexity is the major challenging problem. 
Much of the current research interest in the NFN system is focused on how to generate an 
1 
  
 edete ikF  sin*  (4) 
    xxFxFxBxMF lfrice  ,  (5) 
where M  is the mover mass, B  is the viscous coefficient,  xF fric   is the friction force, and 
 xxFl ,  is the external disturbance. The control objective is to find a control law so that the motor 
state  Txxt ,)( x  can follow a desired trajectory  Tddd xxt ,)( x  in spite of various model 
uncertainties.  
 
III. STRUCTURE OF TSK-TYPE RNFN 
In this study, we intended to construct a T-SORNFN for the inverse dynamics of the LMSM 
drive. The inputs to T-SORNFN are the elements in the vector x  and its output is the desired force 
Iu . The basic configuration of the T-SORNFN includes a fuzzy rule base that is composed of a 
collection of fuzzy IF–THEN rules at time kTt   in the following form 
 
jj
n
i
ijijI
j
nn
jjj
bkhkxaaku
AkxAkxAkxR
 is )1( and  )(  is )1( THEN                    
  is )( and  is )( and  is )( IF : Rule
1
0
2211
 


 (6) 
where )(,,2,1 kNj   with )(kN  denoting the total number of rules at time kTt  , 
 Tnxxx ,,, 21 x  is the input vector, Iu  is the output variable, jh  is the recurrent variable, 
j
iA  are the input fuzzy term sets, and  nia ji ,,1,0   and jb  are the consequent parameters 
for inference outputs Iu  and jh , respectively. Figure 3 shows the structure of a six-layered 
T-SORNFN. Layer 1 is an input layer. Each node in this layer, which corresponds to one input 
variable ix  ni ,,2,1  , only transmits input values to the next layer directly. Layer 2 is a 
membership layer. Each node in this layer corresponds to one linguistic label of one of the input 
variables in the input layer. Layer 3 is a rule layer. Each node in this layer represents one fuzzy 
logic rule and performs precondition matching of a rule. Layer 4 is a recurrent layer. Layer 5 is a 
TSK layer. Each node in this layer performs TSK-type linear summation. Layer 6 is an output layer. 
Each node in this layer corresponds to one output and acts as a defuzzifier. 
 
IV. T-SORNFN CONTROLLER AND LERANING ALGORITHMS 
To effectively control LMSM drive in a changing environment with structured and 
unstructured uncertainties, the T-SORNFN-based inverse control system is shown in Fig. 4.  A 
T-SORNFN is firstly constructed to model the inverse dynamics of the LMSM drive and then 
placed in the feedforward path to calculate the desired input force of the LMSM drive along a 
3 
  
tracking of a LMSM drive. The experimental setup is shown in Fig. 6 with a photo of the LMSM 
derive system.  It consists of a host PC, a servo control board, a micro-stepping deriver, linear 
optical encoder, and a LMSM. The LMSM was manufactured by GIVI MISURE Co. The 
parameters of the motor are: kg 68.0m , Ns/m 73.0B   25.1R , mH25.5L , 
N/A 40tk . The tooth pitch, stroke length, maximum speed, and rated current of the LMSM are 
0.64 mm, 500mm, 1 m/sec, and 3A, respectively. The linear encoder with a resolution of m 1  is 
mounted on the LMSM as the position sensor. The micro-stepping deriver is of model E-DC drive 
from Parker Hannifin Co. The Model E-DC driver is a high efficiency bipolar chopper MOSFET 
driver. The servo control board is installed in the host PC, model DMC-18X2 from Galil Motion 
Control Inc., which includes a encoder interface and a motor interface. The motor interface sends 
the control command to the micro-stepping deriver. The encoder interface equipped with a digital 
filter and four frequency multiplier circuits is used to acquire the motor position. The control 
structure is implemented to drive the servo control board and carry out the control algorithm 
through the Visual C++ programming in a Pentium IV PC. Acquisition and control were performed 
at 2- ms sampling interval.  
To model the inverse dynamics of the LMSM drive, independent and distributed uniform 
input signals  ku  are injected directly to the LMSM drive, and the corresponding output positions 
and velocities of the LMSM drive are then obtained. Proper training patterns are chosen to cover the 
entire reference output space according to the input-output characteristic of the LMSM drive. For 
T-SORNFN training, the input is  kx  and the desired output is  ku . After training, the 
T-SORNFN can emulate the inverse dynamics of the LMSM drive with very good accuracy. In the 
online learning phase, the trained T-SORNFN is used to perform a trajectory tracking control of the 
LMSM derive system. The control objective is to control the moving part of LMSM to track the 
output of a reference model. The performance of the proposed T-SORNFN control scheme was also 
compared with those of the NFN and RNFN control schemes. Two experimental cases are done to 
consider the performance under different environments. The first case is for a sinusoidal desired 
trajectory of )sin(1.0)( ttxd  m. The second one is for 10-kg payload with a 0.5 Hz triangular 
desired trajectory. Fig. 7 shows the experimental results of the trajectory tracking, velocity response, 
and control force using the proposed T-SORNFN control scheme in Case 1. Figures 9-10 show the 
experimental results in Case 2. As a result, the proposed T-SORNFN control scheme indeed yields 
superior control performance than the NFN and RNFN control schemes. 
 
VII. CONCLUSION 
The major contributions of this study are summarized as follows. 1) The successful 
incorporation of the recurrent frame of internal feedback loops into a TSK-type NFN for modeling 
the inverse dynamics of a LMSM drive. 2) The successful development of a self-organizing 
algorithm with an adaptively rule-generating and elimination mechanism so that it can efficiently 
cope with the trade-off between the approximation accuracy and computational loading. 3) The 
successful derivation of a recursive recurrent learning algorithm with varied learning rates for the 
network parameter learning to ensure the convergence of the trajectory tracking error. 4) The 
5 
  
2005. 
[15] F. J. Lin, P. H. Shen, and R. F. Fung, “RFNN control for PMLSM drive via backstepping 
technique,” IEEE Trans. Aerospace and Electr. Systems, vol. 41 no. 2, pp. 620-644, 2005. 
[16] S. Y. Cao, B. W. Wang, J. J. Zheng, W. M. Huang, L. Weng and W. L. Yan, “Hysteresis 
compensation for giant magnetostrictive actuators using dynamic recurrent neural network,” 
IEEE Trans. Magnetics, vol. 42, no. 4, pp. 1143-1146, 2006. 
[17] J. S. Wang and C. S. G. Lee, “Self-adaptive recurrent neuro-fuzzy control of an autonomous 
underwater vehicle,” IEEE Trans. Robotics Automation, vol. 19, no. 2, pp. 283-295, 2003. 
[18] F. J. Lin, S. Y. Chen, L. T. Teng, and H. Chu, “Recurrent functional-link-based fuzzy neural 
network controller with improved particle swarm optimization for a linear synchronous motor 
drive,” IEEE Trans. Magnetics, vol. 45, no. 8, pp. 3151-3165, 2009. 
[19] C. F. Juang and J. S. Chen, “A recurrent fuzzy-network-based inverse modeling method for a 
temperature system control,” IEEE Trans. Syst., Man, Cyberen. C, Appl. Reviews, vol. 37, no. 
3, pp. 410-417, 2007. 
[20] N. K Kasabov and Q. Song, “DENFIS: Dynamic evolving neural fuzzy inference system and 
its application for time-series prediction,” IEEE Trans. Fuzzy Systems, vol. 10, no. 2, 144–154, 
2002. 
[21] C. F. Hsu, “Self-organizing adaptive fuzzy neural control for a class of nonlinear systems,” 
IEEE Trans. Neural Networks, vol.18, no. 4, pp. 1232–1241, 2007. 
[22] C. J. Lin and Y. C. Hsu, “Reinforcement hybrid evolutionary learning for recurrent 
wavelet-based neurofuzzy systems,” IEEE Trans. Fuzzy Syst., vol. 15, no. 4, pp. 729–745, 
2007. 
[23] G. L. McGinnity and G. Prasad, “Design for self organizing fuzzy neural networks based on 
genetic algorithms,” IEEE Trans. Fuzzy Syst., vol. 14, no. 6, pp. 755–766, 2006. 
[24] F. J. Lin, S. L. Yang, and P. H. Shen, ”Self-constructing recurrent fuzzy neural network for 
DSP-based permanent magnet linear synchronous motor servo drive,” IEE Proc. Electr. Power 
Appl., vol. 153, no. 2, pp. 236-246, 2006. 
[25] M. J. Er, Z. G. Li, H. N Cai, and Q. Chen, “Adaptive noise cancellation using enhanced 
dynamic fuzzy neural networks,” IEEE Trans. Fuzzy Systems, vol. 13, no. 3, pp. 331–342, 
2005. 
[26] C. S. Chen, “Self-organizing adaptive neural fuzzy control for electrically driven robot 
manipulators,” Proc. the Inst. of Mech. Engin., I, J. of Syst. Control Engin., vol. 222, no. 4, pp. 
231-246, 2008. 
 
 
 
 
7 
  
(m
)
Po
si
tio
n 
(m
/s
)
V
el
oc
ity
 
(A
)
ef
fo
rt 
 
C
on
tro
l
 
Fig. 7 Experimental results of the proposed 
T-SORNFN control scheme in Case 1: 
(a) trajectory tracking; (b) velocity 
response; (c) control effort. 
 
 
er
ro
r(
m
m
)
Po
si
tio
n 
(m
m
/s
)
er
ro
r 
V
el
oc
ity
 
 
Fig.8 The tracking errors of the NFN, RNFN, 
and T-SORNFN control schemes in 
Case 1. 
 
(m
)
Po
si
tio
n 
(m
/s
)
V
el
oc
ity
 
(A
)
ef
fo
rt 
 
C
on
tro
l
 
Fig. 9 Experimental results of the proposed 
T-SORNFN control scheme in Case 2: 
(a) trajectory response; (b) velocity 
response; (c) control effort. 
 
 
er
ro
r(
m
m
)
Po
si
tio
n 
(m
m
/s
)
er
ro
r 
V
el
oc
ity
 
 
Fig.10 The tracking errors of the NFN, RNFN, 
and T-SORNFN control schemes in Case 2. 
9 
