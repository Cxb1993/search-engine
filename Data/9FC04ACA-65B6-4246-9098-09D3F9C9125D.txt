signal paths for conveying a clock signal downstream from a root node to a plurality of sinks within
the IC. The CTS tool selects each gate to be included in the clock tree in turn, in hierarchical order,
starting with gates at the lowest levels of the gate hierarchy and working upstream. Upon selecting
any gate, the CTS tool designs a subtree of gated clock tree residing downstream of the selected
gate, with the design for that subtree incorporating the design of any previously designed subtree
residing downstream of any gates that are downstream of the selected gate. After all subtrees of the
clock tree residing downstream of gates have been synthesized, the CTS tool designs all portions
of the clock tree residing upstream of all gates. Before synthesizing a subtree downstream of a
selected gate, CTS tools determine whether a clustering algorithm can be used to synthesize that
subtree based on an analysis of distribution of sinks and gates that are to reside downstream of the
selected gate.
One famous and robust zero-skew paradigm is called Deferred Merging Embedding (DME)
[?]. Theoretically, this paradigm will create clock trees with zero-skew under certain assump-
tions. This is however not true in a practical setting due to the violation of the assumptions. A
conventional zero-skew algorithm performs poorly when the total number of subtrees to be con-
nected by the clock tree is large and the path delays from the root node of the subtree to the sinks
served by it vary substantially. For example, a single node (a gate) contains 300 gated clock trees
as its immediate subtrees. Suppose the insertion delay (average path delay from the root of the sub-
tree to its sinks) for each gated subtree differs a lot, then an application of the DME algorithm will
result in skews in the range of several hundred nano to several mili seconds. This is unacceptable
in many high quality designs. I will later on refer to this problem as fatal situation of zero-skew
algorithms or huge fan-out problem for gated clock tree synthesis.
There are two goals in this project. The rst goal is try to develop a new algorithm that will
improve the fatal situation for zero-skew algorithm on gated clock tree that contains some gates
with huge fan-out of other gated subtrees as their immediate children as mentioned before. To the
best of my knowledge, the problem described above has never been addressed by any academic
research for some reasons. One reason is that the academic researches on clock tree synthesis tend
to focus on more perfect situation by ignoring the existence of blockages in the proposed impres-
sive algorithms. The other reason is that in academic research, the fatal situation for the zero-skew
algorithm such as DME has nevered been encountered due to the limited testcases on gated clock
trees in academia. It is not unusual to encounter such fatal testcases in industry these days, espe-
cially the netlists created by the power conscious logic synthesis tools often result in certain nodes
(gates) with huge number (more than 300) of immediate children which are themselves root of
other gated subtrees. These testcases are less known and accessable by academic researchers and
thus the problem has not been raised. It is a very practical industrial problem that involves the
failures of perfect academic algorithms.
The second goal is to optimize the power consumption further by carefully manage the switch-
ing activity of the clock trees. Although gated clock trees provide the potential to disable some
subtrees [?], there is area penalty to insert extra gates and additional control complexity in the
circuits. Some part of the clock trees need to be turn on always, there are some opportunity to op-
timize the power consumption on these parts. During different phases of the clock tree synthesis,
there are chances to optimize the power by considering switching activity. I believe that there is
a great chance to optimize the power during the nal phase of solving the rst problem (fatal sit-
uations of zero-skew algorithm), because during that phase, the portion of clock trees constructed
2
PD
FC
MD
 Tr
ial
 Ve
rsi
on
ww
w.
ze
on
.co
m.
t
Figure 1: Initial clustering on sinks
Figure 2: Simple illustration of a clock tree
4
PD
FC
MD
 Tr
ial
 Ve
rsi
on
ww
w.
ze
on
.co
m.
tw
Figure 4: Simple gated clock tree
Figure 5: Problem with clustering algorithm
6
PD
FC
MD
 Tr
ial
 Ve
rsi
on
ww
w.
ze
on
.co
m.
tw
