 1 
行政院國家科學委員會專題研究計畫 成果報告 
 
虛擬網路及實體網路映射的研究 
研究成果報告(精簡版) 
 
計 畫 類別： 個別型 
計畫編號： NSC100-2221-E-130-013- 
執行期間： 100 年08 月01 日至101 年7 月31 日 
執行單位： 銘傳大學資訊工程學系（所） 
計畫主持人： 徐武孝 
計畫參與人員： 碩士班研究生-兼任助理人員：許智凱 
碩士班研究生-兼任助理人員：朱政豪 
碩士班研究生-兼任助理人員：蘇靖婷 
碩士班研究生-兼任助理人員：林季謙 
報告附件： 出席國際會議心得報告及發表論文 
處理方式： 本計畫可公開查詢 
中 華 民 國 101 年 10 月 20 日 
 3 
一、計畫摘要 
A. 中文摘要 
網路虛擬化最重要的研究為如何將虛擬網路成功的映射到實體網路，以讓業者有更多的收入。但是
如何成功的映射是一個 NP-hard 的問題，對業者是一個挑戰。本計畫主要研究為如何將虛擬網路有效
率的映射至實體網路。本計畫所提演算法分為兩個部分：節點映射及連結映射。節點映射演算法選一
個實體節點同時滿足虛擬節點的資源需求及頻寬需求。連結映射又分為兩種：一為單條路徑的映射，
二為多條路徑的映射。單條路徑映射演算法將一條虛擬連結對應到最短的一條連結或路徑，多條路徑
映射演算法使用 cut-shortest path 將一條虛擬連結對應到實體網路中的多條連結或路徑。模擬的結果顯
示本計畫所提的演算法比現有的演算法更可以有效率的使用實體網路資源，使業者產生更多的收入。 
關鍵詞：網路虛擬化，節點映射，連結映射，cut-shortest path。 
B. 英文摘要 
Network virtualization has received considerable attention recently because it can support multiple 
coexisting virtual network (VN) requests over a shared substrate network. However, mapping multiple VN 
requests with constraints on virtual nodes and virtual links into a shared substrate network presents a 
significant challenge, and is considered an NP-hard problem. In this paper, we propose a heuristic mapping 
algorithm that handles online VN requests. The node mapping algorithm selects a substrate node for mapping 
that satisfies both a virtual node’s resource requirement and amount of requested bandwidth. The link 
mapping algorithm finds the shortest path to map the corresponding virtual link and uses the cut-shortest path 
approach to map a virtual link to multiple substrate paths. The path migration algorithm migrates virtual links 
to different substrate paths in order to maximize the number of accepted VN requests in a substrate network. 
Simulation results show that the proposed mapping algorithm makes more efficient use of resources, produces 
more revenue and results in better performance than existing mapping approaches do. 
Keywords：VN, Node mapping, Link mapping, Path migration.  
 
 
  
 5 
A. 節點(Node)與連結(Link)的限制 (Constraint) 
當客戶向 SP 租用 VN 時，SP 必須要考量其所提供的每一個 VN 是否滿足客戶的資源需求。例如當
客戶需要租一個VN其頻寬至少要有 2 Mbps，CPU至少要有 1GHz且 propagation delay不得大於 50ms；
此時 SP 就必須知道它所提供的 VN 能否滿足客戶的資源需求。由於 SP 必須考量 VN 的節點與連結的
限制，更加深了設計映射演算法的複雜度。 
Ｂ. 準予控制(Admission control) 
由於一個實體網路的資源有限，當客戶向 SP 租用 VN，但 SP 無法提供滿足客戶的 VN 時，此時實
體網路必須拒絕(Reject)此客戶的要求，以免影響其它 VN 的運作。反之當 SP 一旦接受了客戶的需求，
就必須對其服務品質做保障。 
C. 即時加入需求 
一個客戶可會臨時向 SP 租用 VN 並且租用一段的時間。例如此客戶可能臨時需要測試一項新服務
(New service)，因此映射演算法必須考量此種臨時的狀況。當然，即時加入需求服務是很難的問題。除
此之外，文獻 [2]也提出一個簡單的映射演算法，連結(Link)映射，路徑的分流 (Path splitting)及路徑移 
(Path Migration)但並沒有詳細的說明演算法的內容。 
2.3.3 文獻[3] 
本文獻使用了 Hub-and-spoke 的方法來將 VN 內的虛擬連結及虛擬結點映射至實體網路。
Hub-and-spoke 是一種星狀的概念，演算法會選一個具有最大 Capacity (CPU 或記憶體)的節點為 Hub 點
並以它為中心點跟和它相鄰的結點(稱為 Spoke)連結；此演算法會一直選下去直到完成 VN 的映射。 
2.3.4 文獻[4] 
本文獻使用了 Maximum-flow 演算法來做路徑分流。Maximum-flow 演算法做路徑分流可有效解決多
重連線問題，但是此演算法的複雜度為O(N3)，且沒有考慮到每條連結(Link)頻寬大小以及路徑分流的
問題。 
2.4 研究方法 
本年度研究計畫為如何在實體網路做節點映射及連結映射以符合 VN 的資源需求。 
2.4.1 問題的定義、描述及解決方法 
A. 變數及映射說明 
在說明映射問題之前，表 1 先將使用到的變數做些簡要說明。 
表 1、變數說明 
符號 定義 
Gs  表示一個實體網路 
Ns  表示實體網路中所有節點的集合 
Ls 表示實體網路中所有連結的集合 
Ps  表示實體網路中路徑的集合 
Gv  表示映射到實體網路的一個 VN 
Nv  表示 VN 中所有節點的集合 
Lv  表示 VN 中所有連結的集合 
AS  表示實體網路中每個節點與連結可用資源的集合 
AN
S  表示實體網路中每個節點剩餘可用資源的集合 
AL
S  表示實體網路中每個連結剩餘可用資源的集合 
AP
S  P  表示實體網路中每條路徑所剩可用頻寬的集合 
RV  表示 VN 中每個節點與連結需求的集合 
RN
V  表示 VN 中每個節點所需求資源的集合 
 7 
為了讓我們所提的演算法更容易了解，我們使用圖 3 來說明節點映射及連結(Link)映射演算法。圖 3
有一個實體網路(3(a))，兩個虛擬網路(VN)(3(b)及 3(c))。在實體網路上 𝑎𝑠(95) 表示實體節點𝑎𝑠的初始
CPU 為 95；也就是說，𝐶𝑁
𝑆(𝑎𝑠) = 95。同樣的，在虛擬網路上 𝐴𝑣(85) 表示虛擬節點𝐴𝑣的需求 CPU 為 
85；也就是說，𝑅𝑁
𝑉 𝐴𝑣 = 85。在實體網路上每一條連結表示初始的頻寬；在虛擬網路上每一條連結表
示需求的頻寬。 
30
25
30
25
A
V
(85) B
V
(55)
D
V
(55) C
V
(60)
20
70
9590
b
S
(60)
60 95
5040
50
50
a
S
(95) c
S
(65)
g
S
(90)           d
S
(95)
f 
S
(90)           e
S
(65)
h
S
(50)
20
70
7065
b
S
(5)[B
V
(55)]
30 65
5040
20
50
a
S
(10)
[A
V
(85)]             
     c
S
(5)
        [C
V
(60)]
g
S
(90)                         d
S
(40)[D
V
(55)]
f 
S
(90)           e
S
(65)
h
S
(50)
2525
30
30
VN1
4040
40
E
V
(60)
G
V
(40) F
V
(60)
0
70
7065
b
S
(5)[B
V
(55)]
30 65
300
0
10
a
S
(10)
[A
V
(85)]             
     c
S
(5)
        [C
V
(60)]
g
S
(50)    
[G
V
(40)]      
                     d
S
(40)[D
V
(55)]
f 
S
(30)    
[F
V
(60)]
       e
S
(5)
     [E
V
(60)]
h
S
(50)
2525
30
30
VN1
20
20
40
40
VN2
VN2
(b) The first VN request (c) The second VN request
(a) The substrate network (d) The updated resources after 
accepting the first VN request
VN1
VN2
(e) The updated resources after 
accepting two VN requests  
圖 3、節點映射及連結(Link)映射演算法範例說明 
A.節點映射演算法 
我們所提的節點映射演算法主要觀念為選一個實體結點最接近已經被映射的實體結點，使得兩個實
體結點的距離最短。我們以圖3的例子來說明節點映射演算法。 
給一個 VN request，節點映射演算法步驟如下： 
步驟 1: 首先選一個 degree 最大的虛擬節點，然後計算此虛擬節點所需求的總頻寬 。 
步驟 2: 我們將所有符合此虛擬節點 CPU 及總頻寬需求的實體節點選出；假如有多個實體節點
被選出，則隨機選出任一個實體節點。最大 degree 的虛擬節點便映射到此實體節點。 
舉例說明，圖3(b)包含4個虛擬節點，因為每個虛擬節點的 degree 都一樣，因此我們的演算法隨機選
一個虛擬節點。假設虛擬節點𝐴𝑣被選上。很明顯的，實體節點𝑎𝑠、 𝑑𝑠、 𝑓𝑠、及 𝑔𝑠的 CPU滿足虛擬
節點𝐴𝑣的需求。因為虛擬節點𝐴𝑣所需求的總頻寬為 55 (25 + 30)，所以實體節點𝑎𝑠(90 +  60)、 𝑑𝑠(50 + 
70 + 95)、 𝑓𝑠(40 + 50)、及 𝑔𝑠(60 + 50 + 40 + 20)都滿足虛擬節點𝐴𝑣的總頻寬需求。假設我們隨機一個
實體節點𝑎𝑠。因此，虛擬節點𝐴𝑣便被映射到實體節點𝑎𝑠。 
步驟 3: 節點映射演算法繼續選擇第二個虛擬節點𝑛𝑣。第二個虛擬節點𝑛𝑣的選擇方式是選擇具有相鄰
最多已經映射成功的虛擬節點。如此可保證第二個虛擬節點𝑛𝑣所映射的實體節點和已經被
映射的實體節點距離較近。令T 表示所有實體節點，這些實體節點已經被和𝑛𝑣相鄰的虛擬
節點映射成功。 
以圖3(b)為例說明，虛擬節點 𝐵𝑣 及 𝐷𝑣  和虛擬節點𝐴𝑣相鄰。因此虛擬節點 𝐵𝑣 及 𝐷𝑣的相鄰已經映射
成功的虛擬節點數量一樣。假設演算法選擇虛擬節點𝐵𝑣。T = {𝑎𝑠}。 
 9 
 [𝑑𝑠 , 𝑔𝑠 , 𝑎𝑠]。演算法接著處理虛擬連結 𝑙𝑣 𝐴𝑣 , 𝐵𝑣 及 𝑙𝑣 𝐵𝑣 , 𝐶𝑣 。很明顯的，虛擬連結 𝑙𝑣 𝐴𝑣 , 𝐵𝑣 被映射
到實體路徑  𝑝𝑠 = [𝑎𝑠,𝑏𝑠]，虛擬連結 𝑙𝑣 𝐵𝑣 , 𝐶𝑣 被映射到實體路徑  𝑝𝑠 = [𝑏𝑠,𝑐𝑠]。圖 3(d) 顯示圖 3(b)
的虛擬節點及虛擬連結映射成功後，實體網路資源更新的狀況。 
B.2 多條路徑的映射 
多條路徑演算法使用 cut-shortest path 找出多條實體路徑來做虛擬連結映射。cut-shortest path 的關鍵
做法為一條虛擬連結的頻寬需求一直被重覆的除 2 直到所找出來的多條實體路徑頻寬總和滿足這條虛
擬連結的頻寬需求。為了不增加計算的複雜度，我們會嚴格的限制一條虛擬連結所能映射的實體路徑
數目。假設最大所能映射的實體路徑數目為 k。多條路徑演算法的主要目標為找出一個涵數 
𝑀𝐿 ∶  𝐿
𝑉  →  2𝑃
𝑆
使得  ∀𝑙𝑠 ∈ 𝐿𝑆 , 𝛱𝐿 𝑙
𝑠  ≤  𝐴𝐿
𝑆 𝑙𝑠 , 並且 ∀𝑙𝑣 𝑥𝑣 , 𝑦𝑣  ∈  𝐿𝑉 , 𝑀𝐿 𝑙
𝑣  =   𝑝1
𝑠 , 𝑝2
𝑠 , 𝑝3
𝑠 , … , 𝑝𝑕
𝑠  , 
𝑕 ≤  𝑘 並且 ∀𝑝𝑠 ∈ 𝑀𝐿 𝑙
𝑣 ,  𝑝𝑠 = [𝑀𝑁 𝑥
𝑣 , … , 𝑀𝑁 𝑦
𝑣 ]。  
給一條頻寬需求為𝑅𝐿
𝑉(𝑙𝑣)的虛擬連結，多條路徑映射演算法步驟如下： 
步驟 1: 假設𝑀𝑁(𝑥
𝑣) = 𝑖𝑠  並且 𝑀𝑁 𝑦
𝑣 = 𝑗𝑠。多條路徑映射演算法建構一個圖形 𝐺𝑆
′
= (𝑁𝑆 , 𝐿𝑆
′
) 
使得 𝐿𝑆
′
= {𝑙𝑠|𝑙𝑠 ∈ 𝐿𝑆  及 𝐴𝐿
𝑆 𝑙𝑠 ≥ 𝑐𝑢}。 
步驟 2: 多條路徑映射演算法在𝐺𝑆
′
找出從實體節點𝑖𝑠到實體節點𝑗𝑠  的最短的實體路徑𝑝𝑠使得
𝐴𝑃
𝑆  𝑝𝑠 ≥ 𝑐𝑢。假如 𝑝𝑠 存在，則繼續執行步驟 3。假如𝑐𝑢 > 𝑚𝑖𝑛⁡{𝐴𝐿
𝑆 𝑙𝑠 |𝑙𝑠 ∈ LS}，則令 𝑐𝑢 = 𝑐𝑢/2 
並且繼續執行步驟 3；否則執行步驟 4。 
步驟 3: 假如  𝑝𝑠  存在，則𝐴𝐿
𝑆 = 𝐴𝐿
𝑆 − 𝛱𝐿。令𝑀𝐿 𝑙
𝑣 = 𝑀𝐿 𝑙
𝑣 ∪ {𝑝𝑠}，𝑀𝐵 𝑙
𝑣 , 𝑝𝑠 = 𝑐𝑢 。假如
 {𝑀𝐵 𝑙
𝑣 , 𝑝𝑠 |𝑙𝑣 ∈ 𝐿𝑉 , 𝑝𝑠 ∈ 𝑀𝐿(𝑙
𝑣)} ≥ 𝑅𝐿
𝑉(𝑙𝑣)並且|𝑀𝐿 𝑙
𝑣 | ≤ 𝑘，則執行單條路徑映射演算法的步驟
5。假如 h > k，則執行步驟 4，否則重覆執行步驟 2。 
步驟 4: 多條路徑映射演算法將 VN 在實體網路所佔的所有資源釋放掉，VN 的映射失敗。 
舉例說明，假設有一個新的 VN(如圖 3(c)所示)包含 3 個虛擬節點(𝐸𝑣 到 𝐺𝑣)。經過使用節點映射演
算法後，如圖 3(d) 及 3(e)所示，虛擬節點 𝐸𝑣、𝐹𝑣及 𝐺𝑣  分別被映射到實體節點 𝑒𝑠 , 𝑓𝑠  及 𝑔𝑠。接著我
們使用單條路徑映射演算法將虛擬連結 𝑙𝑣 𝐸𝑣 , 𝐹𝑣 映射到實體路徑 𝑝𝑠 =  𝑒𝑠 ,  𝑓𝑠 ；虛擬連結 𝑙𝑣 𝐹𝑣 , 𝐺𝑣 
映射到實體路徑 𝑝𝑠 =  𝑓𝑠 ,  𝑔𝑠 ；如圖圖 3(e)所示，很明顯的無法找到一條從實體節點𝑔𝑠 到 𝑒𝑠的實體
路徑有足夠的可用頻寬滿足虛擬連結 𝑙𝑣 𝐺𝑣 , 𝐸𝑣 的頻寬需求。因此，𝑐𝑢 =
𝑐𝑢
2
=20。很明顯的，實體路徑
𝑝1
𝑠 = [𝑔𝑠 , 𝑑𝑠 , 𝑒𝑠]及𝑝2
𝑠=[𝑔𝑠 , 𝑒𝑠]有足夠的可用頻寬滿足虛擬連結 𝑙𝑣 𝐺𝑣 , 𝐸𝑣 的頻寬需求；也就是說，演算
法會從虛擬連結 𝑙𝑣 𝐺𝑣 , 𝐸𝑣 的頻寬需求中分配 20 個單位在實體路徑 𝑝1
𝑠 = [𝑔𝑠 , 𝑑𝑠 , 𝑒𝑠]，分配 20 個單位
在實體路徑 𝑝2
𝑠 =[𝑔𝑠 , 𝑒𝑠]。因此虛擬連結 𝑙𝑣 𝐺𝑣 , 𝐸𝑣 被映射到兩條實體路徑：𝑝1
𝑠及  𝑝2
𝑠。換句話說，
𝑀𝐿( 𝑙
𝑣 𝐺𝑣 , 𝐸𝑣 ) =  𝑝1
𝑠 , 𝑝2
𝑠  並且 𝑀𝐵  𝑙
𝑣 𝐺𝑣 , 𝐸𝑣 , 𝑝1
𝑠 = 𝑀𝐵  𝑙
𝑣 𝐺𝑣 , 𝐸𝑣 , 𝑝2
𝑠 = 20。圖 3(e)顯示經過圖 3(b)
及 3(c)映射成功後，實體網路的資源更新的狀況。 
2.5 結果與討論 
A. 實驗環境架構 
本實驗環境以 NS2 來完成。我們模擬一個有 100 個節點的實體網路 𝐺𝑆，每一個實體節點的初始可
用資源量從 50 個單位至 100 個單位這個範圍隨機選一個整數值；每一個實體節點至少會有一條實體連
結連線到其他實體節點，此為避免實體網路中有孤立的實體節點存在。不管每一個實體節點有多少條
實體連結，我們限制實體網路的實體連結總數量為 500 條。每條實體連結的初始可用頻寬從 1 個單位
頻寬至 20 個單位頻寬這個範圍隨機選一個整數值。 
本實驗產生 200 個 VN Requests，假設所有到達的 VN Request 為 Poisson Process，每秒平均 5 個 
VN Request 到達，每個 VN Request 在實體網路的平均時間為 5 秒。每一個虛擬網路從 2 至 20 這個
範圍隨機取一個整數值來當作虛擬節點的總數目，每一個虛擬節點從 1 個單位資源至 20 個單位資源這
個範圍隨機取一個整數值來當作其資源需求；每一個虛擬節點至少會有一條虛擬連結連線到其他虛擬
節點，此為避免虛擬網路中有孤立的虛擬節點存在；虛擬網路裡的每條虛擬連結從 1 個單位頻寬至 20
 11 
因此選出來的路徑也會比本計畫所提出的演算法所找出的最短路徑還長。 
 
圖 4、當 K=2 時的映射飽和率 
 
圖 5、當 K=2 時的映射效率 
 
圖 6、當 K=3 時的映射飽和率 
實際映射個數:82
實際映射個數:54
實際映射個數:58
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
0 25 50 75 100 125 150 175 200
映
射
飽
和
度
VN映射總數
This Paper
Reference[3]
Reference[2]
0.25
0.27
0.29
0.31
0.33
0.35
0.37
0.39
0.41
0.43
0.45
0 25 50 75 100 125 150 175 200
映
射
效
率
VN映射總數
This Paper
Reference[3]
Reference[2]
實際映射個數:82
實際映射個數:54
實際映射個數:62
實際映射個數:81
實際映射個數:56
實際映射個數:62
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
0 25 50 75 100 125 150 175 200
映
射
飽
和
度
VN映射總數
This Paper Reference[3]
Reference[2]
 13 
 
圖 9、當 K=3 時的實際映射率 
2.6 結論與討論 
在本計畫中我們提出了節點映射演算法及連結映射演算法來將虛擬網路映射到實體網路。本計畫的
主要貢獻有三點：第一點本演算法的時間複雜度較文獻[2]及文獻[3]來的低，因此可縮短執行時間，對
於即時(Online)的虛擬網路處理是很重要的。第二點本演算法相較文獻[2]及文獻[3]能容納更多的虛擬網
路總數，因此提高了業者的收入。第三點本演算法所使用的映射分流數較文獻[2]及文獻[3]還少，不但
可以減少網路上的 Control Overhead，也能增加目的地整合封包的速度。實驗結果也證明了這三點的貢
獻。 
2.7 參考文獻 
[1] Jorge Carapinha , Javier Jimenez, “Network Virtualization – a View from the Bottom.”, VISA’09, ACM 
Workshop, 2009. 
[2] Minlan Yu, Yung Yi, Jennifer Rexford, Mung Chiang, ”Rethinking Virtual Network Embedding: 
Substrate Support for Path Splitting and Migration” ACM SIGCOMM 2008. 
[3] Ines HOUIDI, Wajdi LOUATI, Djamal ZEGHLACHE, “A Distributed Virtual Network Mapping 
Algorithm”, IEEE 2008. 
[4] Nabeel Farooq Butt, N. M. Mosharaf Kabir Chowdhury, Raouf Boutaba, ” Topology-Awareness and 
Reoptimization Mechanism for Virtual Network Embedding”, LNCS 6091 P27-30 2010. 
[5] N. M. Mosharaf Kabir Chowdhury and Raouf Boutaba,“Network Virtualization: State of the Art and 
Research Challenges,” IEEE Communications Magazine, July 2009, pp. 20-26. 
[6] Juan Felipe Botero, Xavier Hesselbach, “The Bottlenecked Virtual Network Problem in Bandwidth 
Allocation for Network Virtualization,” IEEE LATINCOM’09, Sep. 2009, pp. 1-5. 
[7] Karsten Oberle, Marcus Kessler, Manuel Stei, Dominik Lamp, Sören Berger, “Network Virtualization: 
The missing piece,” ICIN’09, Oct. 2009, pp. 1-6. 
[8] David Bernstein, Erik Ludvigson, “Networking Challenges and Resultant Approaches for Large Scale 
Cloud Construction,” GPC’09, May 2009, pp. 136-142. 
[9] Solheim, A.G., Lysne, O., Skeie, T.,Sdring, T.,Reinemo, S.A., “A Framework for Routing and Resource 
Allocation in Network Virtualization,” HiPC’09, Dec. 2009, pp. 129-139. 
[10] Marquezan, C.C.  Nobre, J.C.  Granville, L.Z.  Nunzi, G.  Dudkowski, D.  Brunner, M., “Distributed 
Reallocation Scheme for Virtual Network Resources,” IEEE ICC’09, June 2009, pp. 1-5. 
0
0.05
0.1
0.15
0.2
0.25
0.3
0.35
0 25 50 75 100 125 150 175 200
實
際
映
射
率
VN映射總數
This Paper
Reference[3]
Reference[2]
實際映射個數:81
實際映射個數:62
實際映射個數:56
國科會補助專題研究計畫項下出席國際學術會議 
心得報告 
                        日期： 101 年 10 月 20 日 
                                 
一、參加會議經過 
此研討會是由 IEEE 主辦的 International Conference on Advanced Information 
Networking and Application，簡稱 AINA，為期 4天。參加的學者來自於世界各地，我非常
榮幸能機會參加這次國際性的研討會，和世界各國的學者互相交流研究的成果。 
參加的議程是第 3 天(2012 年 3 月 28 日)下午的網路應用 Session，主持人為日本的學
者。我在報告中提出在虛擬網路映射至實體網路的演算法，由實驗舉證本演算法確實改善
映射效率，增加業者的收入；許多學者對於提出的構想充滿了興趣，問了許多問題，經過
熱烈的討論後，給與一些建議，讓我受益良多。會後，我和許多學者進行更深入的討論，
學者們也不吝嗇地分享他們的相關研究的成果和解決問題的方法。此外，在 2012 年 3 月
28我還參加了其它的議程，見識到其他國家學者的研究；其中還遇到了一些來自臺灣其它
大學的教授，互相分享參加研討會的心得。 
此會議於 2012年 3月 29日結束，帶回了各國的研究結果和心得，對於未來的研究有
計畫編號 NSC  NSC100-2221-E-130-013- 
計畫名稱 虛擬網路及實體網路映射的研究 
出國人員
姓名 
徐武孝 
服務機構
及職稱 
銘傳大學資工系副教授 
會議時間 
101年 3月 26日至
101年 3月 29日 會議地點 日本福岡 
會議名稱 
(中文) 
(英文) IEEE International Conference on Advanced 
Information Networking and Applications (AINA-2012) 
發表論文
題目 
(中文) 
(英文)  A Virtual Network Mapping Through Path Splitting 
and Migration 
Virtual Network Mapping Through
Path Splitting and Migration
Wu-Hsiao Hsu 
Department of Computer 
Science and Information 
Engineering 
Ming Chuan University 
Taoyuan, Taiwan 
wuhsiao@mail.mcu.edu.tw 
Yuh-Pyng Shieh 
Department of Computer 
Science and Information 
Engineering 
Ming Chuan University 
Taoyuan, Taiwan 
arping@gmail.com 
Chia-Hui Wang 
Department of Computer 
Science and Information 
Engineering 
Ming Chuan University 
Taoyuan, Taiwan 
wangch@mail.mcu.edu.tw 
Sheng-Cheng Yeh 
Department of Computer 
Science and Information 
Engineering 
Ming Chuan University 
Taoyuan, Taiwan 
pigass0512@gmail.com 
Abstract—Mapping multiple virtual network (VN) requests with 
constraints on virtual nodes and virtual links into a shared 
substrate network presents a significant challenge and is an NP-
hard problem. In this paper, we propose a heuristic node and link 
mapping algorithm that handles online VN requests. The node 
mapping algorithm selects a substrate node that satisfies both a 
virtual node’s resource requirement and the amount of requested 
available bandwidth. The link mapping algorithm focuses on 
mapping a virtual link to a substrate path or paths. In addition, 
path migration is used to migrate virtual links to different 
substrate paths, which maximizes the number of coexisting VNs in 
a substrate network and increases the revenue of the 
Infrastructure Providers (InP). Simulation results indicate that 
the proposed algorithm offers better performance than existing 
mapping approaches.
Keywords: VN, Node mapping, Link mapping, Path migration. 
1. Introduction  
Network virtualization recently has received considerable 
attention because it can support multiple coexisting virtual 
networks (VN) over a shared substrate network. Each VN is a 
collection of virtual nodes and virtual links, and is customized 
for a specific application or to meet a user requirement. In a 
network virtualization environment, the role of traditional 
Internet Service Providers (ISP) is divided into two 
independent entities [1]: Infrastructure Providers (InP) and 
Service Providers (SP). The InPs are responsible for 
deploying and managing the substrate network; the SPs create 
and manage VNs by aggregating resources from multiple InPs 
and offer end-to-end services. 
Network virtualization takes several key research 
directions [2], one of which is virtualizing the networks’ 
resources, also known as the VN embedding/mapping 
problem in the literature. Specifically, each virtual node and 
virtual link in a VN is mapped to a substrate node and 
substrate path, respectively. A substrate path may be a single 
substrate link or a sequence of substrate links. Each VN
request has resource constraints, such as the processing 
resources on the substrate nodes and the bandwidth resources 
on the substrate links. The number of VN requests that can be 
deployed on a substrate network depends on the capability of 
the substrate and the demands of the VN requests.
Mapping multiple VN requests with constraints on virtual 
nodes and virtual links into a shared substrate network 
presents a significant challenge and is an NP-hard problem [2]. 
In this paper, we propose an efficient heuristic mapping 
algorithm that handles VN requests as they arrive, rather than 
handling a large number of VN requests simultaneously. 
The remainder of this paper is organized as follows. 
Section 2 presents related work. Section 3 introduces the 
notation and provides an objective description. Section 4 
presents the proposed algorithm. Section 5 describes the 
simulation model and results, and section 6 provides 
conclusions. 
2. Related work 
Previous efforts have been made to address online VN 
request mapping algorithms [3-6]. N. Chowdhury et al. [3] 
proposes VN embedding algorithms with better coordination 
between the node mapping and the link mapping phases. Y. 
Zhu and M. Ammar [4] focus on the algorithm design for 
two versions of the VN assignment problem: VN assignment 
without reconfiguration (VNA-I) and VN assignment with 
reconfiguration (VNA-II). M. Yu et al. [5] introduces the VN 
mapping algorithms that enable the substrate to support path 
splitting and migration. For the node mapping algorithm, the 
greedy algorithm is used to map the virtual nodes to the 
substrate nodes with the maximum substrate resources, so as 
to minimize the use of resources at the bottleneck nodes/links. 
For the link mapping algorithm, the k-shortest path algorithm
is used as an approximation approach to minimize bandwidth 
consumption by the VN. In addition, the substrate network 
allows a virtual link to map to multiple substrate paths with a 
flexible path-splitting ratio. Path migration is performed by 
re-running the link-mapping algorithm with requests that 
allow path splitting. Adil Razzaq, Muhammad Siraj Rathore 
[6] presents VN embedding algorithms that map the nodes of 
the VN as closely as possible in the substrate network and 
then assign virtual links to the shortest paths that satisfy their 
demands. The proposed algorithms first map the virtual node 
that requires the most resources to the substrate node that 
satisfies its demand. Then, disjoint k-shortest substrate paths 
are found for each virtual link. Finally, the minimum of all 
the substrate links in each substrate path are selected to 
ensure that the link with the least resources in the substrate 
path is able to satisfy the virtual link demand.  
2012 26th International Conference on Advanced Information Networking and Applications Workshops
978-0-7695-4652-0/12 $26.00 © 2012 IEEE
DOI 10.1109/WAINA.2012.74
1095
substrate nodes with the minimum length of #!(, $). The 
next virtual node is mapped to substrate node .  
Step 5: Steps 3 through 5 are repeated until all virtual 
nodes have been chosen. Then, the resources available to
each substrate node in the   is updated.  
22
18
46
36
37
28
15
31
13
33 11
22
(a). A substrate network (b). A virtual network
as(80)
ds(40)
cs(90)
bs(30)
gs(110)
es(30)
fs(50)
hs(130)
dv(70)
cv(40)
av(45)
17
bv(70)
ev(70)
204
Fig. 1. Example of node mapping algorithm. 
For example as shown in Fig. 1, suppose the substrate 
network and VN request contain 8 nodes (nodes " through 
ℎ䰾 䰾 䰾 䰾 䰾 䰾 ) and 5 nodes (nodes "  through & ), respectively. The 
length of the shortest substrate path is based on the hop-count.!
The "(80) denotes that the initial resource of substrate node 
" is 80; that is, (") = 80. Similarly, the "(45) denotes 
that the resource requested by virtual node "  is 45; that is, 
 (") = 45. The number indicated at each link in Fig. 1(a) 
represents the initial bandwidth (i.e., ()) of the substrate 
network; the number indicated at each link in Fig. 1(b) 
represents the requested bandwidth of the virtual link. 
The node mapping algorithm selects virtual node "
because it has the largest degree. The resources of substrate 
nodes ", ', #, *, and ℎsatisfy the requirement of virtual 
node " . Because the amount of bandwidth requested by 
virtual node "  is 50 (17+11+22), substrate nodes 
" (46+18+22), '  (18+36+33), and # (37+28) satisfy the 
requirement. Substrate nodes  " and '  have the largest 
degree. We assume that the algorithm selects substrate node 
". Hence, virtual node "  is mapped to substrate node ". 
The algorithm continues to select the next virtual node. 
Virtual nodes , ' , and ! are the neighbors of virtual node 
" . Hence, they have the same number of neighboring virtual 
node that has been mapped to the substrate node. Assume 
that the algorithm selects virtual node !  and T = {"}. The 
resources of substrate nodes ' , * , and ℎ  satisfy the 
requirement of virtual node ! . Because the amount of 
bandwidth requested by virtual node !  is 31 (11+20), 
substrate nodes ' , and ℎ satisfy the requirement. In this 
case, the algorithm selects substrate node '  because the 
length of the path between substrate nodes "  and '  is the 
minimum. Hence, virtual node !  is mapped to substrate 
node '. 
The algorithm continues to select virtual node '  because 
it has two neighboring virtual nodes that have been mapped 
to the substrate nodes and T = {" , ' }. The resources of 
substrate nodes ! , # , * and ℎ  satisfy the requirement of 
virtual node ' . Because the amount of bandwidth requested 
by virtual node '  is 42 (22+20), substrate nodes ! and #
satisfy the requirement. For substrate node !, !(!, ")=1 
and !(!, ')=1. Hence, #!(!, $)=1. For substrate node 
# , !(#, ")=2 and !(#, ')=2. Hence, #!(#, $)=2. 
Hence, the algorithm selects substrate node ! because it has 
the minimum value of #!(!, $). Virtual node '  is mapped 
to substrate node !. The selection and mapping procedures 
of virtual nodes  and &  are the same as for virtual node ' .
Hence, virtual nodes   and &  are mapped to substrate 
nodes * and ℎ, respectively. 
4.2 Link mapping algorithm  
The proposed link mapping algorithm provides two 
functions: single-path mapping and multiple-path mapping. 
A. The single-path mapping algorithm 
The proposed algorithm uses the cut-shortest path to find 
a feasible path that satisfies the requested bandwidth of a 
virtual link. 
 Step 1: Let -  denote a set of unmapped virtual links. The 
algorithm sorts all unmapped virtual links in - by the 
requested bandwidth (i.e., ()) in descending sequence. 
Step 2: The algorithm processes the first virtual link 
 (, 	) in - with maximum () . Let c
u denote the 
requested bandwidth of virtual link   . That is, cu = ().
Step 3: Assume () = /  and (	) =  3 . The 
algorithm constructs a graph  ′ = (,  ′)  such that 
 ′ = {| ∈  "! () ≥ '4 }. 
Step 4: The algorithm finds a shortest substrate path 

from nodes / through 3  in  ′ such that  (
) ≥ '4 . If the 
shortest path 
 exists, then virtual link (, 	) is mapped 
to the shortest path 
 . That is,  () = 
  and 
(, 
) = (). The available bandwidth of each link 
on the 
  is updated in the   ; that is,  =  −  .
Otherwise, multiple-path mapping is enabled. 
Step 5: The algorithm removes the first virtual link from 
the - and repeats steps 2 through 5 until all virtual links 
have been selected. 
For example, as described in Fig. 1, the algorithm first 
processes virtual link  (", ')  because the requested 
bandwidth of virtual link (", ') is 22. Assume that cu =
22. Obviously, all the substrate links except 
 (", ') ,  (!, *), and  (&, *)  satisfy the request. 
Because the length of substrate path  
  = [" ,! ] is the 
minimum, virtual link  (", ') is mapped to substrate path 

 = [",  !].  
(s(", !)) = 
(s(", !)) −
 5s(", !)6  = 46  − 22 = 24.  The algorithm continues 
to process the next virtual link  (', !) , for which the 
requested bandwidth is 20. Obviously, all substrate links 
except link  (", '),  (!, *), and  (&, *) satisfy the 
request. Because the substrate path 
 = [!, cs]  is the 
shortest path, virtual link  (', !) is mapped to substrate 
path 
 = [!, cs] . (s(!, ')) = (s(!, ')) −
(s(! , ')) =36 − 20=16. The algorithm continues to 
process the next virtual link  (", ) , for which the 
requested bandwidth is 17. Because no feasible substrate path 
satisfies the request, multiple-path mapping is enabled. 
1097
′ ∈ @s . If @  is not found, the algorithm adds ?  back to 
(′)  and occupies the additional bandwidth  on 
substrate link ′ . That is, (′) = (′) ∪ {?s} ,
(′, ?) =  , (′) = (′) −  , and (′) =
(′) −  for any ′ ∈ ?s.
Step 8. Step 7 is repeated until S is empty or the resultant 
() is larger than or equal to '4 . If S is empty and the 
resultant () is still less than '4 , then the path migration 
algorithm stops and fails. Otherwise, $ = $\{}, and if T is 
not empty, GOTO Step 6. 
Step 9. GOTO Step 4 to add the substrate path 
  to 
(). 
5. The simulation model and results 
5.1 The simulation model  
The network simulator NS-2 is used in this paper. The 
simulated substrate network   with 100 nodes is randomly 
distributed in a rectangular coordinate grid. Each substrate 
node is located at integer coordinates, and has an initial 
capacity that is randomly chosen by a uniform distribution 
from the interval [50 to 100 units]. A substrate link is 
established between any two neighboring substrate nodes 
randomly and at least one substrate link exists between any 
two neighboring substrate nodes. The amount of substrate 
links in the   is 500. The initial bandwidth of each substrate 
link  is randomly chosen by uniform distribution from the 
interval [1 to 20 Mbps].  
We assume that VN requests arrive in a Poisson process 
with an average rate of 5 VN requests per second. The 
duration of each VN request follows an exponential 
distribution with 5 seconds on average. In each VN request, 
the number of virtual nodes is randomly determined by a 
uniform distribution from the interval [2 to 20], following 
similar setups to previous work [5]. Each virtual node has the 
requested resource that is randomly chosen by a uniform 
distribution from the interval [1 to 20 units]. Each pair of 
virtual nodes is randomly connected with probability 0.5,
which means that an ||-node VN has ||(|| − 1)/4
links on average, similar to [5]. The bandwidth requested by 
each virtual link is randomly chosen by a uniform 
distribution from the interval [1 to 20 Mbps].  
(a). Mapping efficiency before path migration. 
(b). Mapping efficiency after path migration. 
(c). Mapping saturation before path migration. 
(d). Mapping saturation after path migration. 
Fig. 2. Comparison of mapping efficiency and mapping 
saturation when k is set to 3. 
5.2 Simulation results and discussion   
The simulation results are shown in Fig. 2. k is set to 3.
This simulation considers two performances metrics, namely, 
mapping saturation, and mapping efficiency. We compared 
and evaluated three different approaches: article [5], article 
[6], and the proposed algorithm in Figs 2(a), 2(c). However, 
comparing the proposed algorithm with articles [5] and [6] is 
difficult because they do not provide the same solutions for 
the VN mapping problem. For example, article [6] does not 
handle the path migration problem. Hence, we compared and 
evaluated two different approaches: article [5], and the 
0.25
0.27
0.29
0.31
0.33
0.35
0.37
0.39
0.41
0.43
0.45
0 25 50 75 100 125 150 175 200
M
apping  Efficiency (K
=3)
The number of unmapped VNs
The proposed algorithm
Article [6]
Article [5]
81
62
56
0.25
0.27
0.29
0.31
0.33
0.35
0.37
0.39
0.41
0.43
0.45M
apping  Efficiency (K
=3)
The number of remapped VNs
The proposed algorithm
Article [5]
10
8
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
0 25 50 75 100 125 150 175 200
M
apping  Saturation (K
=3)
The  number of unmapped VNs 
The proposed algorithm
Article [6]
Article [5]
81
62
56
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1M
apping  Saturation (K
=3)
The  number of  remapped VNs 
The proposed algorithm
Article [5]
10
8
1099
國科會補助計畫衍生研發成果推廣資料表
日期:2012/10/20
國科會補助計畫
計畫名稱: 虛擬網路及實體網路映射的研究
計畫主持人: 徐武孝
計畫編號: 100-2221-E-130-013- 學門領域: 計算機網路與網際網路
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
