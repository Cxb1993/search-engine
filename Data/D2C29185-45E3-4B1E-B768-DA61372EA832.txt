system performance. 
 
2 
 
針對三維規則型邏輯結構之架構探索及穩健合成系統開發 (2/2) 
 
計劃編號：NSC99－2220－E－009－037－ 執行期間：98 年 8 月 1 日至 100 年 7 月 31 日 
主持人：黃俊達 副教授  國立交通大學電子所 
 
一、 摘要 
中文摘要 
隨著製程的進步，導線延遲取代了元件的延遲，逐漸主宰著系統的效率，並且在設計
上成為一個非常關鍵的因素。三維電路架構在垂直方向的可行性提供了電路設計更多的彈
性，當然也同時提高了設計和分析的複雜度。但無可否認的，三維電路架構在電路設計的
領域開啟了新的風貌。不論是從理論分析的角度或是實驗的角度，三維電路在 VLSI 電路
設計上，於導線長度的緊縮(wire length reduction)、功率消耗的減少(power reduction)、晶片
面積的減少(chip area reduction)及電路元件密度上升(increased device density)等各項指標都
有顯著的改善。然而，導線的延遲很難在早期的系統設計中預知，必須要等到佈局完成才
可以有初步的分析。因此，在本計劃中，我們會先探討導線延遲所造成的潛在因素是如何
影響系統的效能，並且重新評估一些具有同成果品質(Quality of Result) 目標的舊有佈局方
法，並在往後的階段中，利用其特性推廣至三維規則型邏輯架構探索中。 
三維規則型邏輯架構之推廣與應用所面臨的眾多挑戰之一是缺乏量身訂做的設計自動
化工具(design automation tools)。本計劃將針對三維規則型邏輯結構(3D regular logic 
structure)發展相對應之自動化設計演算法，並利用這些新開發的工具來進行三維規則型邏
輯結構之架構探索(architecture exploration)，以期在硬體資源的使用與系統效能之間取得最
佳平衡。 
 
關鍵字  
規則型邏輯結構、架構探索、產能最佳化、多時脈溝通、高階合成、設計方法論、設計自
動化。 
 
4 
 
capability, and shorter global wirelength (i.e., better performance). 
However, stacking chips or dies is not a whole new idea. SiPs (system-in-package) and PoPs 
(package-on-package), which have been available in industry for several years, can also be 
regarded as 3D techniques in the broad sense [8]–[10]. SiPs and PoPs stack multiple chips and 
use wire-bonding for vertical signal links while packaging. However, the locations for 
wire-bonding are restricted on the periphery of a chip layer and the package substrate. Thus these 
kinds of 3D techniques are facing the problems such as limited number of pins for vertical 
connections, long and slow vertical signal paths, and chip-package codesign. Among those 
state-of-the-art 3D integration technologies, through-silicon via (TSV) is one of the most 
promising methods to accomplish vertical interconnects between different layers [4]. Fig. 1 
illustrates a typical TSV-based 3D IC structure. By utilizing the wafer/die bonding techniques, 
TSVs cut across thinned silicon substrates to make inter-die connections, which results in high 
compatibility with the present typical CMOS processes. All external I/O signals must pass 
through those metal bumps located at the bottom of the 3D structure to bridge the internal logic 
and the external system [11]–[13]. 
Observation and Motivation 
Compared with a typical 2D design, though a TSV-based 3D design can generally reduce the 
global interconnect delay, currently available TSV fabrication processes still suffer from 
relatively low yield as well as large TSV pitch size [14]. It is reported that in 22nm technology a 
TSV with 8μm pitch occupies roughly the same area as 1k SRAM cells (0.061μm2) [1], and TSV 
yield drops to about 80% in a 3D design with 2k TSVs [15]. Therefore, using less number of 
TSVs to complete a 3D design is highly desirable in terms of both yield and area cost. As a 
consequence, the issue of TSV minimization must be properly addressed in a design flow as 
stepping into the 3D IC era.  
In general, 3D IC backend flows can be roughly classified into two categories. The first one is 
to combine TSV minimization into later design processes such as floorplanning [16] and 
placement [17][18], which aims at both objectives at the same time. However, the above 
mix-in-one problem is likely to become too complicated to be well handled. Alternatively, the 
authors in [19]–[21] all suggest that it is crucial to make 3D partitioning an independent stage in 
the backend flow as shown in Fig. 2. The suggested flow first partitions a given design into 
different layers and then solves the remaining problem by classical 2D techniques or their simple 
extensions. Hence, this methodology efficiently reduces the problem complexity while keeping 
the quality of results nearly at the same level [19][20]. Since the outcome of 3D partitioning 
mainly determines the number of required TSVs, several previous studies have been proposed to 
 
Figure 1. A TSV-based 3D structure. 
6 
 
preprocessing stage in a 3D design flow, which provides a good starting point for further tradeoff 
between area and wirelength in the following stages. 
Fig. 3 demonstrates a simple 4-layer 3D partitioning example. A given design with its 4-way 
min-cut partitioning result is presented in Fig. 3(a). Based on the same initial partitioning result 
given in Fig. 3(a), Fig. 3(b) and 3(c) respectively illustrate the worst possible and the best 
possible 3D layering outcomes in terms of the number of TSVs. From the observations on Fig. 3, 
here we would like to highlight two key ideas. 
Firstly, all external I/O terminals must be located in the bottom-most layer. It implies those 
square vertices representing I/O pads must always be located in Layer 0. As a result, extra TSVs 
are required to properly relocate those I/O pads. As shown in Fig. 3(b), five additional signal 
paths (in dotted lines) suggest that 13 more TSVs are further required. Those extra signal paths 
are generally unconsidered in conventional multi-way min-cut partitioning algorithms. It also 
explains why there is a big difference between the total cut size (=8) in Fig. 3(a) and the number 
of total TSVs (=28) in Fig. 3(b). 
Secondly, different layer assignments usually result in different TSV requirements even the 
given initial partitioning result is identical. For instance, given the partitioning result shown in 
Fig. 3(a), the total number of TSVs can range from 21 to 28 after examining all possible layer 
assignments. Nevertheless, the best layering result with the minimum number of TSVs shown in 
Fig. 6(d) cannot be derived from the initial partitioning outcome shown in Fig. 3(a), which is 
obtained from hMetis. 
According to the aforementioned discussions, it should be evident that conventional multi-way 
min-cut partitioning algorithms virtually have no chances to perform 3D partitioning well in their 
original forms due to their unawareness about the fundamentals of vertical die-stacking structure. 
Therefore, a layer-aware partitioning algorithm specifically dedicated to 3D structures is strongly 
demanded for advanced 3D IC design methodologies. 
Meanwhile, according to [1][26][29], the SB has already been the most area-consuming unit 
compared to the other elements in 2D FPGAs for a long time. The situation is becoming even 
worse in 3D FPGAs because the 3D-SB is exactly where those TSVs locate. As shown in Fig. 4, 
as manufacturing technology keeps scaling down, the area share of the 3D-SB is getting more 
dominant, which is mainly because TSVs are not scaled well. Moreover, it is found that the TSV 
utilization is actually quite low if the 3D-SB with full vertical connectivity is in use. As depicted 
TSV
20.79%
TSV
35.61%
TSV
49.60%
TSV
58.61%
41.17%
33.49%
26.45%
21.89%
CB
22.10%
CB
17.97%
CB
14.14%
CB
11.66%
CLB
15.94%
CLB
12.93%
CLB
9.81%
CLB
7.85%
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
180nm 130nm 90nm 65nm Technology
3D‐SBs
 
Figure 4. The area ratio for each component in a tile. 
8 
 
Layer-Aware Iterative Partitioning 
A. Problem formulation 
A design is modeled as a hypergraph G = (V, E), where V is a set of vertices including a set 
of functional cells (or blocks) C and a set of I/O pads I (i.e., V = C ∪ I, C ∩ I = ); and E is a set 
of hyperedges. For each vertex v  V, area(v) denotes the area cost of v. Each hyperedge is a 
subset of V, i.e., e  V  e  E. A k-layer disjoint partition set of G with all the I/O terminals 
residing in the bottom-most layer is represented as L = {L0=I, L1, L2 … Lk}, where Li is the 
partition assigned to the i-th layer and is a subset of C; i.e., Li  C   1  i  k; Li ∩ Lj =   i  
j, 1  i, j  k; and L1 ∪ L2 ∪…∪Lk = C. 
For a vertex v, layer(v) indicates which layer v actually resides in. That is, layer(v) = i,   v 
 Li. The range pair of a hyperedge e is defined as rp(e) = (b, t) if e connects vertices from the 
lower b-th layer to the upper t-th layer; i.e.,  v  e, b  layer(v)  t. Then the number of TSVs 
required to complete e can be calculated as tsv(e) = t – b. The layer junction jcti is defined as the 
junction between the two adjacent layers Li–1 and Li,  1  i  k. The number of TSVs passing 
through jcti is further defined as cuti. Hence, the total number of TSVs, total_tsv, needed for a 3D 
partitioning solution L can be determined either by summing the required TSVs for all 
hyperedges ( ) or by summing TSVs passing through all junctions ( ). 
Consider the example shown in Fig. 3(b), rp(e1) = (1, 4) and thus tsv(e1) = 3. Similarly, the total 
number of TSVs in Fig. 3(b) is total_tsv =  = 5 + 9 + 9 + 5 = 28, including 15 TSVs 
connecting between cells, and 13 TSVs connecting cells and I/O pads. We would like to 
emphasize again that classical partitioning algorithms usually have no idea about the I/O pad 
connection constraint and always underestimate the real TSV demand even excluding those TSVs 
for connecting cells and I/O pads (8 vs. 15 in the case shown in Fig. 3(a) and 3(b)) due to their 
layer-unawareness. Those are the major reasons why the classical min-cut-based partitioning 
solutions are generally not well optimized in 3D cases (shown later). 
In this paper, we model the 3D partitioning problem as a layer-aware multi-way partitioning 
problem. Given a target 3D structure consisting of k layers stacking vertically, a design G, and the 
I/O pad constraint, our proposed algorithm partitions G into k sub-designs and each sub-design is 
explicitly associated with a vertical layer so that the total number of TSVs is minimized. That is, 
given G = (V = C ∪ I, E) with layer(v) = 0   v  I, our algorithm directly finds the mapping, 1 
 layer(v)  k   v  C, such that total_tsv is minimizeds. 
B. Proposed algorithm 
Here we propose our iterative partitioning framework that gradually constructs the solution 
from the bottom-most layer all the way to the topmost one. Consider that all I/O pads must reside 
in L0 by definition and then the number of TSVs through jct1 (i.e., cut1,) is always fixed to |I| no 
matter how other cells (or L1~Lk) get partitioned eventually. As a result, if we define G1 by 
compacting all the I/O pads into a supervertex vs and keeping all the connected hyperedges 
unchanged as shown in Fig. 6(a), it is evident that jct1 and cut1 should still remain unchanged in 
G1. Next, an arbitrary conventional k-way area-balanced min-cut partitioning algorithm is applied 
on G1 to get k partitions, where area(vs) is set to zero to avoid disturbing area balancing during 
partitioning. Among those k disjoint partitions, exactly one partition ps can contain vs, which 
10 
 
 Once a junction (and thus a cut) is fixed at some iteration, it is never altered at the following 
iterations. This ensures that good decisions made previously are never overthrown later. 
 At each iteration, only one partition is accepted and decisions for other partitions are 
actually discarded. Later, the updated graph topology is reexamined and better decisions are 
thus dynamically reacquired at the following iterations. For instance, L2 = {1, 3, 10} in Fig. 
6(d) is not identical to any partition shown in Fig. 6(a). As a consequence, applying any one 
of conventional multi-way min-cut partitioning algorithms just once cannot get this kind of 
result. 
 From the traditional partitioning perspective, the result in Fig. 6(d) has a larger total cut size 
than the result given in Fig. 3(a) (9 vs. 8). However, we already show that the former one is 
actually a better 3D partitioning solution. Hence, it is obvious that the total cut size, which 
is layer-unaware, is apparently not an appropriate metric in 3D partitioning. Again, this is 
another evidence that classical multi-way min-cut partitioning algorithms can hardly 
compete with the proposed iterative framework. 
In this work, we adopt the well-known hMetis as the internal partitioning engine since it is one 
of the best partitioning engines we can find today. However, our proposed framework can 
obviously co-work with any multi-way min-cut partitioning engines. It implies that a better 
engine (if any) may be adopted for better 3D partitioning results in the future. 
The pseudo code of the complete algorithm is given in Fig. 7. All I/O pads are first compacted 
into a supervertex vs during initialization. Each iteration starts with (k–n+1)-way min-cut 
partitioning. Once partitioning is done, the vertices residing in the partition where vs is present are 
assigned to the current layer, i.e., Layer n. The number n always increases by one at every 
iteration end. At the final iteration, where n = k–1, the elements of Layer k–1 are identified after 
2-way partitioning. Finally, the remaining cells are then automatically assigned to the topmost 
Layer k and the algorithm ends. That is, exact k–1 invocations of multi-way min-cut partitioning 
are required for getting one k-layer 3D partitioning result here. 
Initialization 
1 n ← 1; 
2 compact all I/O pads into a supervertex vs; 
3 C ← C ∪ {vs}; 
Constructive Loop 
4 while(n < k) 
5  (k–n+1)-way min-cut partition(C); 
6  foreach vi  C – {vs} do 
7   if part(vi) == part(vs) do 
8    assign vi to Layer n; 
9    C ← C – {vi}; 
10    compact vi into vs; 
11  n ←n + 1; 
12 foreach vj  C – {vs} do 
13  assign vj to Layer k; 
Figure 7. Pseudo code of iLap. 
12 
 
defeat iLap. Therefore, it concludes that a dedicated layer-aware 3D partitioning 
algorithm, like iLap, should be regarded as one of the essential components while 
constructing a sophisticated 3D IC design environment. 
Next, Fig. 8(a) depicts the average TSV count over 14 test cases as a function of the 
number of layers; and three points are worth pointing out. Firstly, the more layers a 
design gets partitioned into, the more TSVs it generally requires. Secondly, iLap is the 
all-time winner from 2 layers to 10 layers among four methods. Thirdly, unlike the other 
three methods, the number of TSVs required by iLap raises very smoothly as the number 
of layers increases. Taking hMetis as the baseline, Fig. 8(b) reveals the average ratios of 
TSV count over the number of layers; and two points are worth mentioning here. Firstly, 
iLap constantly and steadily outperforms hMetis by about 35% in TSV count regardless 
of the number of layers. Secondly, EX-hMetis always outperforms hMetis, as expected. 
Meanwhile, Fig. 9(a) presents the average standard deviations of TSV count over a 
different number of layers. Through constructing its outcome layer by layer, iLap can 
better balance the TSV count among junctions. From Fig. 9(a), it is evident that the 
standard deviation of TSV count associated with iLap is far better than those of the other 
three. As previously mentioned, a TSV occupies significant silicon estate so that high 
standard deviation of TSV count potentially worsens area imbalance among individual 
layers and even lowers the yield of a design. Fig. 9(b) reports the average maximum 
TSV count at some junction of a design over a different number of layers; and iLap 
always possesses the lowest values regardless of the number of layers. In other words, a 
lower TSV count implies a smaller total area (including TSV area) after partitioning, and 
a smaller standard deviation of TSV count results in a more area-balanced partitioning 
outcome. The above two facts suggest that iLap tends to generate a smaller overall 
footprint of a 3D chip implementation. From another perspective, for some 3D logic 
TABLE I.  TOTAL NUMBER OF TSVS WITH K = 4 
4 layers *Total TSVs Normalized to hMetis 
Design iLap hMetis EV-matrix EX-hMetis iLap EV-matrix EX-hMetis 
Tseng 304.2 356.3 361.2 346.1 0.85 1.01 0.97
Diffeq 244.9 344.5 351.0 270.3 0.71 1.02 0.78
Des 445.5 857.5 876.1 834.5 0.52 1.02 0.97
Bigkey 629.2 666.2 669.2 650.6 0.94 1.00 0.98
Frisc 655.2 714.1 719.0 688.7 0.92 1.01 0.96
elliptic 590.3 709.9 690.0 643.1 0.83 0.97 0.91
pdc 973.4 1049.5 1059.0 986.8 0.93 1.01 0.94
fft128 1313.9 1506.0 1524.8 1489.2 0.87 1.01 0.99
s38417 249.4 364.7 389.6 324.6 0.68 1.07 0.89
s38584.1 391.4 673.8 762.6 536.7 0.58 1.13 0.80
clma 491.4 721.2 654.6 496.5 0.68 0.91 0.69
cfft 244.4 999.2 480.3 338.5 0.24 0.48 0.34
aqua 909.6 7026.5 7167.4 4935.8 0.13 1.02 0.70
video 763.8 8370.7 8757.1 7255.0 0.09 1.05 0.87
Average - - - - 0.64 0.98 0.84
*The reported number is the average of 10 experiment runs. 
14 
 
 
0 
50 
100 
150 
200 
250 
300 
3 4 5 6 7 8 9 10
Layers
(a) Standard deviation of TSV count
iLap
hMetis
EV-matrix
EX-hMetis
  
0 
100 
200 
300 
400 
500 
600 
700 
800 
900 
1000 
2 3 4 5 6 7 8 9 10
Layers
(b) Maximum T SV count
iLap
hMetis
EV-m atrix
EX-hMetis
 
0 
500 
1000 
1500 
2000 
2500 
3000 
3500 
2 3 4 5 6 7 8 9 10
Layers
(c) Runtime (seconds)
iLap
hMetis
EV-matrix
EX-hMetis
0 
2 
4 
6 
8 
10 
12 
2 3 4 5 6 7 8 9 10
 
Figure 9. More statistics from the experiments. 
16 
 
research works [26][27][29], [35]–[38]. The number of LUTs (lookup tables) in an CLB 
(N) is set to 2 instead of 1 in the previous works [26][29], which is considered more 
realistic. The channel widths in the X-Y directions are both set to 32; the multi-segment 
routing structure is adopted: the possible wire lengths are L1, L2, L4 and L8; and the 
numbers of channels are 12, 12, 4 and 4, respectively. In the vertical direction (Z), only 
L1 is available to maximize the routability. Finally, I/O pads are located only around the 
bottom-most layer. 
2. Benchmark Set 
There are 24 test cases in our benchmark set – 14 are from MCNC and the other 10 
larger ones are from IWLS2005, ITC99 and Altera [30][31]. The basic information for a 
TABLE II.      THE ARCHITECTURAL SETTINGS 
Architectural Parameters Value 
CLB 
(Altera Stratix IV) 
# of LUTs in a CLB (N) 2 
# of inputs of a CLB (I) 8 
# of inputs of a LUT (K) 6 
SB  
(Xilinx Spartan) 
Connection type Subset 
Channel width 
(Xilinx) 
Both WX and WY 32 
# of wire segments 
X-Y direction (L1, L2, L4, L8) (12, 12, 4, 4) 
Z direction L1 only - 
Delay model L1Z : L1X-Y 1 : 10 
TSV Pitch 10 um 
Process Technology 65 nm 
TABLE III.      THE BENCHMARK INFORMATION (PARTIAL) 
Design # CLBs # Nets # I/Os 
s38584.11 3224 5419 342 
clma1 4192 6869 144 
mem_ctrl_0mv_b2 7344 10865 265 
usb_funct_0mv_b2 7440 11372 234 
tv80_0abc_ch2 8809 12987 46 
b203 9844 15557 55 
b213 10016 15713 55 
aes_core2 10400 16706 386 
oc_des_perf_opt_opt_abc_resyn4 10641 17150 185 
systemcaes_0abc_ch2 13480 19634 388 
b223 14585 23114 55 
b173 15390 24986 135 
1: MCNC; 2:IWLS2005; 3: ITC99; 4: Altera 
18 
 
connected 3D-SBs. The other one, also used in 3D MEANDER, is to reduce the number of 
3D-SBs in a 3D FPGA. That is, some SBs become 3D ones, and others are still 2D ones. The 
internally-spare (IS) architectures are those utilizing the former method, while the 
externally-sparse (ES) ones are those utilizing the latter method. Different configurations of SBs, 
also referred as patterns in this paper, are shown in Fig. 12. In the BSL, as shown in Fig. 12(a), 
all SBs are fully connected 3D-SBs. An IS architecture adopts the same type of partially 
connected 3D-SBs for all SBs instead, as in Fig. 12(b). In an ES architecture as shown in Fig. 
12(c), fully connected 3D-SBs are partially distributed in a regular fashion. Note that the patterns 
are set identical for all layers in all proposed architectures. In addition to IS and ES architectures, 
the sparse architecture (SP), which is a hybrid of the above two, is proposed to further reduce the 
area. More details and evaluations are available in the following sub-sections. 
1. Internally-Sparse Architecture (IS) 
IS# represents an instance of the IS architecture, where the postfix # specifies the 
number of TSVs available in a 3D-SB. For example, every 3D-SB in IS16 has only 16 
TSVs inside, while IS32 is actually equivalent to the BSL. As mentioned in Section III, 
the multi-segment routing structure is adopted and there are four different wire lengths 
with different amount of channels in the X-Y direction. In the BSL, it makes no 
differences since each X-Y channel has its own vertical connection. However, in an IS 
89.99%
79.98%
69.98%
59.97%
49.96%
39.95%
90.89%
81.78%
72.67%
63.57%
54.46%
45.35%
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
IS28 IS24 IS20 IS16 IS12 IS8
N
or
m
al
ize
d a
re
a
SB Tile
 
Figure 13. The normalized area of different IS architectures. 
100%
103%
106%
109%
112%
115%
118%
2 3 4 5 6 7 8A
vg
. no
rm
al
ize
d d
el
ay
# Layers
IS8
IS12
IS16
IS20
 
Figure 14. The average normalized dealy of different IS architectures. 
20 
 
shortest distance as shown in Fig. 15(a). However, with the same shaded region, only 
two 3D-SBs can be reached for a 2D-SB in an architecture with vertical stripes patterns, 
as shown in Fig. 15(b). The analyses and conclusions are also similar also from the 
perspective of a 3D-SB. 
Fig. 16 reports the area of different ES architectures. As the distance increases, the area 
reduction is significant at first and then becomes flat gradually. The curve appears like a 
harmonic sequence. Fig. 17 illustrates the delay of different ES architectures. As the 
distance increases, the delay is increased badly. As a result, ES2, ES3 and ES4 are all 
regarded as good instances since they can achieve around 35%~55% area reduction only 
with a delay penalty less than 5%. Moreover, if the delay penalty is constrained below 
3%, ES2 becomes the best choice because it achieves an area reduction of 35% with a 
delay penalty less than 1.5%. 
3. Sparse Architecture (SP) 
For IS and ES architectures, we try to reduce the area with just a single strategy – either 
purely reducing the number of TSVs in each 3D-SB or purely reducing the number of 
3D-SBs. Here we present the sparse architecture, which takes above two strategies 
simultaneously. SP(#1, #2) is used to name an specific instance of this hybrid architecture, 
which is the combination of IS#1 and ES#2. This notation can be generalized to represent 
IS and ES architectures as well. For example, SP(32, 1) is equivalent to the BSL, SP(16, 
1) implies IS16, and SP(32, 2) is actually ES2. Meanwhile, the TSV density of an 
100%
103%
106%
109%
112%
115%
118%
121%
2 3 4 5 6 7 8
Av
g.
 no
rm
al
ize
d d
el
ay
# Layers
ES9
ES8
ES7
ES6
ES5
ES4
ES3
ES2
 
Figure 17. The average normalized dealy of different ES architectures. 
60.01%
46.68%
40.04% 36.08% 33.40% 31.53% 30.16% 29.09%
63.60%
51.47%
45.43% 41.83% 39.39% 37.69% 36.43% 35.46%
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
ES2 ES3 ES4 ES5 ES6 ES7 ES8 ES9
N
or
m
al
ize
d a
re
a
SB Tile
 
Figure 16. The normalized area of different ES architectures. 
22 
 
that in the peripheral zone; and thus inspire us to further propose the sunny egg (SE) architecture. 
The sunny egg architecture divides a horizontal plane into two regions – center (egg yolk) 
and periphery (egg white). Two regions are implemented using different SP architectures – the 
TSV density in the center is set larger than that in the periphery. SE(ISC#, ESC#, R, ISP#, ESP#) 
indicates a specific SE architecture, where SP(ISC# and ESC#)/SP(ISP# and ESP#) is for the 
center/periphery respectively, and R is the ratio between the dimension of the center and D 
(defined in Section III.B). For example, SE(32, 2, 0.5, 16, 4) specifies an SE architecture: 1) in 
the central/peripheral region, the number of TSVs in a 3D-SB is 32/16 and the distance between 
two 3D-SBs in the X/Y directions is 2/4; and 2) the ratio between the dimension of center and D 
(a) (b) (c)
11‐12
9‐10
7‐8
5‐6
≦ 4
 
Figure 20. The average TSV utilization in a 6-layer BSL. 
Between: (a) Layer 2 and 3, (b) Layer 3 and 4, and (c) Layer 4 and 5. 
100.0%
101.5%
103.0%
104.5%
106.0%
2 3 4 5 6 7 8Av
g.
 no
rm
al
ize
d d
el
ay
# Layers
unevenly 
(center)
evenly 
(center)
unevenly 
(periphery)
evenly 
(periphery)
 
Figure 21. The average normalized dealy with different TSV distributions. 
100.0%
101.5%
103.0%
104.5%
106.0%
107.5%
2 3 4 5 6 7 8A
vg
. no
rm
al
ize
d d
el
ay
# Layers
R=0.3
R=0.4
R=0.5
R=0.6
R=0.7
 
Figure 22. The average normalized dealy with different R's. 
24 
 
compared to BSL) are chosen as the representation of each architectural style. As shown in Fig. 
23, the normalized (to IS20 instead of BSL in the previous evaluations) area consumptions of 
IS20, ES2, SP(20, 2) and SE(32, 2, 0.6, 8, 2) are depicted. The average normalized delay (to BSL) 
is shown in Fig. 24. The hybrid architectures, which utilize both the techniques of IS and ES, can 
save more than 35% area of SBs compared to IS20. Especially, the difference of delay penalty 
between SE(32, 2, 0.6, 8, 2) and IS20 is less than 2%. Therefore, the hybrid architectures SP(20, 2) 
and SE(32, 2, 0.6, 8, 2) are the most recommended. 
四、 結論 
In this project, we present an iterative layer-aware partitioning algorithm iLap targeting TSV 
minimization for 3D structures. It utilizes a multi-way min-cut partitioning engine inside its 
iterative framework to gradually construct the final solution layer by layer in the bottom-up 
fashion. The experimental results clearly demonstrate that iLap is capable of reducing total TSV 
count by about 35% compared to layer-unaware hMetis, experiencing a smoother TSV increase as 
the number of layers raises, distributing TSVs more evenly among different vertical layers, 
preventing any layer junction from having a burst number of TSVs, and only requires an 
acceptable runtime. Consequently, compared to the prior art, we believe iLap can generate a 
better TSV-minimized solution, which serves as a good starting point for further tradeoff between 
wirelength and number of TSVs in upcoming state-of-the-art 3D IC/FPGA design flows. 
Moreover, we show that the utilization of TSVs is actually very low in the baseline 3D 
FPGA architecture where the fully connected 3D-SBs are fully distributed. Therefore the area of 
3D FPGAs can be further reduced while the performance is still guaranteed. There are two simple 
approaches to reduce the area of 3D-SBs. The internal-sparse architecture (IS) is to reduce the 
number of TSVs in each single 3D-SB and the external-sparse 3D-SBs architecture (ES) is to 
reduce the number of 3D-SBs. The hybrid methods, including sparse architecture (SP) and sunny 
egg (SE), are also proposed to further minimize the area of 3D FPGAs by using the techniques of 
IS and ES at the same time. Those architectures are explored thoroughly and evaluated 
objectively. After comparing all these architectures, two generic 3D FPGA architectures are 
suggested, that is, the SP architecture (20, 2) and SE architecture (32, 2, 0.6, 8, 2), which save the 
most area with acceptable delay penalty. SP(20, 2) reduces 55% (to BSL) and 35% (to IS20) of 
SB area; SE(32, 2, 0.6, 8, 2) reduces 58% (to BSL) and 39% (to IS20) of SB area. Both of them 
are with (less than) 3% increase delay. 
100.00%
100.75%
101.50%
102.25%
103.00%
2 3 4 5 6 7 8Av
g.
 no
rm
al
ize
d d
el
ay
# Layers
(20, 2)
(32,2,0.6,8,2)
ES2
IS20
 
Figure 24. The average normalized dealy of different architectures. 
26 
 
[14] M. Pathak, Y.-J. Lee, T. Moon, and S. K. Lim, “Through-silicon via management during 3D 
physical design: when to add and how many?” Proc. Int’l Conf. on Computed-Aided Design, 
pp. 387–394, 2010. 
[15] A.-C. Hsieh, T. Hwang, M.-T. Chang, M.-H. Tsai, C.-M. Tseng and H.-C. Li, “TSV 
redundancy: architecture and design issues in 3D IC,” Proc. Design, Automation & Test in 
Europe Conf. & Exibit., pp. 166–171, 2010. 
[16] Z. Li, X. Hong, Q. Zhou, S. Zeng, J. Bian, W. Yu, H. H. Yang, V. Pitchumani, and C.-K. 
Cheng, “Efficient thermal via planning approach and its application in 3-D floorplanning,” 
IEEE Trans. on Computer-Aided Design of Integrated Circuits and Systems, vol. 26, no. 4, 
pp. 645–658, Apr. 2007. 
[17] B. Goplen and S. Sapatnekar, “Placement of 3D ICs with thermal and interlayer via 
considerations,” Proc. Design Automation Conf., pp. 626–631, 2007. 
[18] J. Cong and G. Luo, “A multilevel analytical placement for 3D ICs,” Proc. Asia and South 
Pacific Design Automation Conf., pp. 361–366, 2009. 
[19] Z. Li, X. Hong, Q. Zhou, Y. Cai, J. Bian, H. H. Yang, V. Pitchumani, and C.-K. Cheng, 
“Hierarchical 3-D floorplanning algorithm for wirelenth optimization,” IEEE Trans. on 
Computer-Aided Design of Integrated Circuits and Systems, vol. 53, no. 12, pp. 2637–2646, 
Dec. 2006. 
[20] V. F. Pavlidis and E. G. Friedman, “Interconnect-based design methodology for 
three-dimensional integrated circuits,” Proc. IEEE, vol. 97, no. 1, pp. 123–140, Jan. 2009. 
[21] C. Chiang and S. Sinha, “The road to 3D EDA tool deadiness,” Proc. Asia and South Pacific 
Design Automation Conf., pp. 429–436, 2009. 
[22] I. H.-R. Jiang, “Generic integer linear programming formulation for 3D IC partitioning,” 
22nd IEEE Int’l SOC Conf., pp. 321–324, 2009. 
[23] D. H. Kim, K. Athikulwongse, and S. K. Lim, “A study of through-silicon-via impact on the 
3D stacked IC layout,” Proc. Int’l Conf. on Computer-Aided Design, pp. 674–680, 2009. 
[24] Y. C. Hu, Y. L. Chung, and M. C. Chi, “A multilevel multilayer partitioning algorithm for 
three dimensional integrated circuits,” Proc. Int’l Symp. on Quality Electronic Design, pp. 
483–487, 2010. 
[25] C. M. Fiduccia and R. M. Mattheyses, “A linear time heuristic for improving network 
partitions,” Proc. Design Automation Conf., pp.175–181, 1982. 
[26] C. Ababei, H. Mogal, and K. Bazargan, “Three-dimensional place and route for FPGAs,” 
IEEE Trans. on Computer-Aided Design of Integrated Circuits and Systems, vol. 25, no. 6, 
pp. 1132–1140, Jun. 2006. 
28 
 
3. Chia-I Chen, Bau-Cheng Lee, Juinn-Dar Huang, “Architectural Exploration of 3D 
FPGAs towards a Better Balance between Area and Delay,＂ Proc. of Design, Automation 
& Test in Europe Conference and Exhibition, pp. 587–590, Mar. 2011. (Best Paper 
Candidate) 
4. Juinn-Dar Huang, Yi-Hang Chen, and Wan-Hsien Lin, “Performance-Optimal Behavioral 
Synthesis with Degenerable Compound Functional Units,” Proc. of IEEE International 
Symposium on VLSI Design, Automation, and Test, pp. 337–340, Apr. 2011.  
5. Ya-Shih Huang, Yang-Hsiang Liu and Juinn-Dar Huang, “ Layer-Aware Design 
Partitioning for Vertical Interconnect Minimization,＂ Proc. of IEEE Computer Society 
Annual Symposium on VLSI, pp. 144–149, Jul. 2011. (Best Paper Award)  
 
還有以下國內會議論文： 
1. Ya-Shih Huang, Yang-Hsiang Liu, and Juinn-Dar Huang, “Layer-Aware Partitioning for 
Through-Silicon Via Minimization in 3D ICs,＂ Proc. of the 21st VLSI Design/CAD 
Symposium, Aug. 2010.  
 
 
在專利方面，通過以下國內外專利： 
1. 黃俊達，林步青，李耿維，周景揚，“精細頻寬調控的仲裁器及其仲裁方法＂ 中華民
國專利案號 I332615，2010 年 11 月 1 日。 
2. Juinn-Dar Huang and Chia-I Chen, “Dynamical sequentially-controlled low-power 
multiplexer device,” US 7881241 B2, Feb. 2011. 
3. 黃俊達，陳嘉怡，“低功率動態序向控制多工器＂ 中華民國專利案號 I342670，2011
年 5 月 21 日。 
 
並有以下專利正在申請中： 
1. 黃俊達、呂智宏、林步青、周景揚，“應用於查找表式 FPGA 的壓縮樹延遲最佳化”。 
2. 黃俊達、王毓翔、林步青、周景揚，“可參數化管線式快速傳利葉轉換硬體產生器”。 
3. 黃俊達、呂智宏、林步青、周景揚，Delay optimal compressor tree synthesis for LUT-based 
FPGAs 
. 
和我們當初在計劃提案中的預計的目標相比較，我們自評今年度計劃的完成度相當不
錯,其中更有一篇論文獲得 ISVLSI 2011 會議之最佳論文獎(Best paper award)，一篇論文於
VLSI-DAT 2011 會議中獲最佳論文候選(Best paper candidate)，在學術論文發表及專利方面
皆有不錯的表現，。 
30 
 
可供推廣之研發成果資料表 
□ 可申請專利  ▓ 可技術移轉                                     日期：100 年 10 月 31 日 
國科會補助計畫 
計畫名稱： 
針對三維規則型邏輯結構之架構探索及穩健合成系統開發 
計畫主持人：黃俊達 副教授  國立交通大學電子系 
計畫編號：NSC99－2220－E－009－037－ 
學門領域：微電學門 
技術/創作名稱 
為取得面積與延遲間較佳平衡之三維可程式邏輯閘陣列架構探索
(Architectural Exploration of 3D FPGAs towards 
a Better Balance between Area and Delay) 
發明人/創作人 陳嘉怡、李寶鑑、黃俊達 
技術說明 
中文： 
將標準的二維可程式邏輯閘陣列(2D FPGAs)使用同樣的方式，將訊
號切換模式從二維的架構拓展至三維，而構成三維可程式邏輯閘陣
列(3D FPGAs)架構。並藉由適當調整三維切換箱的排列方式以及其
內部直通矽穿孔的連接數目，可以犧性極少量時間延遲而大幅度的
減少所佔面積。 
 
英文： 
We propose a generic 2D FPGA architecture can evolve into a 3D one 
by extending its signal switching scheme from 2D to 3D. Furthermore, 
by conducting architectural explorations for 3D FPGAs, we greatly 
reduce the footprint with only minor delay increase by properly 
tailoring the structure and deployment strategy of 3D-SBs. 
可利用之產業 
及 
可開發之產品 
1. Electronic Design Automation (EDA) (EDA 產業) 
2. Integrated Circuit Design (IC 設計產業) 
技術特點 
針對三維可程式邏輯閘陣列提供了一個完整的架構探索。探討在不
同的切換箱架構下因矽穿孔的分布不同而造成時間延遲的交互影
響，並且利用典型分布的結論提出節省硬體資源之複合型的架構。
推廣及運用的價值 
提出省面積的新架構，並針對同一架構內不同的直通矽穿孔擺放方
式做一個完整評估，目的是為了找出在不同架構內面積與時間延遲
間更具平衡的擺放方式。所提出的新架構可犧性極少量時間延遲而
大幅度的減少所佔面積資源。 
※ 1.每項研發成果請填寫一式二份，一份隨成果報告送繳本會，一份送 貴單位
研發成果推廣單位（如技術移轉中心）。 
※ 2.本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。 
※ 3.本表若不敷使用，請自行影印使用。 
99 年度專題研究計畫研究成果彙整表 
計畫主持人：黃俊達 計畫編號：99-2220-E-009-037- 
計畫名稱：針對 3D 整合之電子設計自動化技術開發--子計畫三：針對三維規則型邏輯結構之架構探索
及穩健合成系統開發(2/2) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 1 1 100%  專利 已獲得件數 2 2 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 7 7 100%  
博士生 3 3 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 5 5 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 1 1 100%  專利 已獲得件數 1 1 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
