modern crypto-graphic applications on wireless/mobile 
networks. Wireless/mobile networks are usually 
composed of smart low-end devices, which operate on 
the limited battery power. To maximize the lifetime 
of the wireless/mobile networks, the power 
consumption rate of each node must be quite careful, 
and an efficient and energy-saving large integer 
multiplication makes the cryptographic protocols 
possible to be executed on such nodes. The proposed 
method first recursively bisections mul-tiplier and 
multiplicand in threshold times. Subsequently, 
classical multiplication calculates the products of 
the split multiplier and multiplicand blocks. 
Finally, the products of the blocks are gradually 
integrated to obtain the product of the large 
integers. This study demonstrates that the n-times 
recursive-balanced-2-way split method, where n is the 
floor of log2(0.13515×s), obtains the optimal 
performance in multiplying two s-words based on 
classical multiplication. The ex-periment results 
show that modular exponentiation combined with other 
modular multiplication methods takes 1.28x-2.10x the 
computational cost required in the proposed method. 
The energy consumption of software is closely related 
to the execution time. The proposed scheme is an 
energy-saving method to maximize the lifetime of the 
wireless/mobile networks  when implementing security 
protocols in smart low-end devices on the 
wireless/mobile networks. It is suitable for 
realizing robust security protocol on smart low-end 
devices, in which the framework is based on modular 
exponentiation and modular multiplication. Smart low-
end devices based on the proposed method perform 
security protocols in satisfying the security 
recommendations of NIST.  Partial result of this 
project has been presented in the 2012 Summer FTRA 
International Symposium on Advances in Cryptography, 
Security and Applications for Future Computing.  We 
also submit the other partial result of this project 
to international journal. 
英文關鍵詞： Classical multiplication, Karatsuba-Ofman 
1 
 
一、前言 
Recently, rapid networking technological developments such as 3G/4G cellular systems, 
vehicular communication networks and wireless sensor networks have changed our life and 
established Peer-to-Peer ubiquitous networks. In order to construct such networks, nodes on the 
network needs to contribute their resources, including the resources of CPU, memory and 
storage. Furthermore, most nodes on networks are consisted of low-end devices. It means that 
they have low computational power, low memory, especially need to operate on batteries. 
Hence, power consumption becomes an important issue.  
Wireless/mobile networking technologies use air as the transmission media, and are vul-
nerable to cyber attacks by nature. In order to resist such attacks, modern cryptosystems pro-
vide elegant solutions. However, such cryptosystems, especially public-key cryptosystems, 
need large computational cost, which degenerate the limit power of the battery on the node. To 
maximize the lifetime of wireless/mobile networks, the power consumption rate of each node 
must be quite careful when executing these cryptosystems. 
Current wireless/mobile networks comprise nodes which are wide variety of smart 
low-end devices. The kernel of a smart low-end device is usually one or more than one 
RISC-like processor. These RISC-like processors, featuring single-precision multiplication, 
addition, store, and load instructions as their word-based architectures, have special features, 
such as low computation and low storage, limited battery power and must be carefully con-
sidered when developing particular applications. A number of special applications, especially 
modern cryptography, require an operation of integers longer than 100 decimal digits. For 
example, because of the progress in integer factorization and computer power [1], the National 
Institute of Standards and Technology (NIST) in the United States changed their recommended 
key sizes for users or devices from 1024-bit to 2048-bit for the RSA digital signature or key 
transportation and Diffie-Hellman key agreement [2][3]. Such integers are too long to fit into a 
single word of the modern microprocessor. In addition, large computation is required to realize 
modern cryptography; therefore, more storage space is required. A particular approach must be 
determined to achieve reasonable performances on such an application. 
Some applications, such as pervasive computing [4] and mobile multimedia [6], need 
some cryptographic procedures to keep secrets. Numerous security protocols [6][7], PKI 
functions (Public Key Infrastructure), and cryptographic methods are based on modular ex-
ponentiation computation, including RSA cryptosystem [8], elliptic curve cryptography [9], 
DSA [10], and Diffie-Hellman Key Exchange [11]. The modular exponentiation procedure 
requires several modular multiplications. The kernel operation is a large integer multiplication 
for modular exponentiation or modular multiplication. The proportion of instructions spent on a 
large integer multiplication is 86% for RSA-1024, 63% for ECC-160, and 90% for ECC-163 
[12][13].  
 
二、研究目的 
The object of this project is to accelerate large integer multiplication operations.  This 
project researches a number of basic methods to split the operand according to the di-
vide-and-conquer concept, synthesizes them into various methods, and analyzes their perfor-
mances before deciding on the optimal method for large integer multiplications. Moreover, this 
project also determines the threshold time to split the operands. Based on these two crucial 
decisions, large integer multiplication achieved optimal performance on microprocessors. The 
energy consumption of software is closely related to execution time [15]. The proposed 
method enables low-end and mobile devices to consume less energy to perform security 
protocols. 
 
3 
 
Table 1 [18] shows the number of base instructions for classical multiplication, for which each 
base instruction requires the same CPU cycle in RISC CPUs such as ARM. Classical multi-
plication exhibits excellent performance when the operand length is short. However, the per-
formance of classical multiplication degenerates rapidly with the increase of operand length. 
3.2 Karatsuba-Ofman Method 
Karatsuba and Ofman proposed the Karatsuba-Ofman method [14]. This method reduces 
the multiplication of two s-word operands to three multiplications of size (s/2), but only at the 
cost of an increased number of large integer additions or subtractions. Each of these three 
(s/2)-word multiplications can be used with classical multiplication. According to the Kar-
atsuba-Ofman method, the product P = A × B = [Ah || Al]×[Bh || Bl] can be expressed as the 
following two equations, where the bit length of one word is log
2
w: 
P = A × B 
= AhBhw
s
 + (AhBl + AlBh)w
s/2
 + AlBlw
0
                                                                         (1) 
= AhBhw
s
 + [(Ah + Al)(Bh + Bl) – AhBh –AlBl ]w
s/2
 + AlBlw
0
                                      (2) 
When the two equations are compared, Equation (2) has one less (s/2)-word multiplica-
tion, two more (s/2)-word additions, one more s-word addition/subtraction, and more memory 
accesses because it contains more elements. For the large value of s, the cost of the additions, 
subtractions, and memory accesses are insignificant relative to the cost of the multiplications. 
The word complexity of the Karatsuba-Ofman method is O(s
log
2
3
) [17], which exhibits 
superior performance to classical multiplication. To discover the computational cost of the 
Karatsuba-Ofman method, this project estimated the number of base instructions for a large 
integer addition. This project assumed that addition and subtraction operations consume the 
same computational cost. Algorithm 2 is a large integer addition. Table 2 shows the number of 
base instructions in Algorithm 2. Table 3 shows the number of classical multiplications and 
additions/subtractions for the Karatsuba-Ofman method. Finally, Table 4 combines Table 1, 
Table 2, and Table 3 to demonstrate the number of base instructions for the Karatsuba-Ofman 
method. A comparison of Tables 1 and 4 reveals that the Karatsuba-Ofman method is more 
efficient than classical multiplication for large integer multiplication.  However, the perfor-
mance of large integer multiplication can only improve to a limited extent when the Karatsu-
ba-Ofman method only splits the operand once.  Up to now, no study discusses how to apply the 
Karatsuba-Ofman method to enhance the performance of large integer multiplication. 
 
Algorithm 2. Large integer addition [12] 
Input: Integers A = (as-1as-2a1a0)w, B = 
(bs-1bs-2b1b0)w. 
Output: (, C) where C = A  B mod ws = 
(cs-1cs-2c1c0)w in radix w representation,  is 
the carry bit, and 1 word has log
2
w bits. 
1. (, c0) ← a0  b0 
2. for i from 0 to s −1 do 
3.   (, ci) ← ai  bi   
4. end for 
5. return (, C) 
5 
 
residing on word-boundaries. Operations on word boundary are more efficient than those on bit 
level, because processors possess word-based architectures. This section proposes an optimal 
method for modern microprocessors and digital signal processors based on the di-
vide-and-conquer concept to accelerate the speed of large integer multiplication. The proposed 
method recursively bisections multiplier and multiplicand n (= log2(0.13515×s)) times. 
Subsequently, classical multiplication evaluates the products of the split multiplier and multi-
plicand blocks. Finally, the products of the blocks are gradually integrated to obtain the product 
of the large numbers. Algorithm 3 details the proposed method, named “recur-
sive-balanced-2-way split”. Subsection 5.1.2 demonstrates that the proposed n-times recur-
sive-balanced-2-way split method, where n = log2(0.13515×s), achieves optimal perfor-
mance. 
五、分析與討論 
5.1 Analysis of the Proposed Method 
This section demonstrates that the performance of the proposed method, recur-
sive-balanced-2-way split, is optimal for large integer multiplications on microprocessors and 
digital signal processors, which perform each word operation in one cycle, such as RISC-like 
processors. Subsection 5.1.1 presents the definition and evaluation of two basic methods for 
splitting the operand: balanced-t-way split and unbalanced-t-way split. Subsection 5.1.2 
demonstrates that the n(=log2(0.13515×s))-times recursive-balanced-2-way split method 
achieves optimal performance in multiplying two s-words based on classical multiplication. 
Without loss of generality, this project assumed that both multiplier and multiplicand are 
s-word large integers, and each word is w bits. 
 
Figure1. Balanced-t-way split. 
5.1.1 Two Basic Methods 
Two basic methods are used to split the operand, that is, balanced-t-way split and unbal-
anced-t-way split. Synthesizing these two methods can generate any model for splitting oper-
ands for multiplication. 
5.1.1.1 Balanced-t-way Split 
Figure 1 shows the framework of splitting an s-word integer into t equal parts. The bal-
anced-t-way split performs Equation (3) to evaluate the product of large integers A and B from 
the split blocks. The multiplication, such as AiBj, is classical multiplication with (s/t)-words. 
P = A × B 
= 
1 1
0 0
s st ti j
t t
i j
i j
A w B w
  
 
  
  
   
   
= = At – 1Bt – 1w
(2t – 2)(s/t)
 + (At – 1Bt – 2 + At – 2Bt – 1)w
(2t – 3)(s/t)
 + + (At – 1B1 + At – 2B2 + + 
A1Bt – 1w
(t)(s/t)
 + (At – 1B0 + At – 2B1 + + A0Bt – 1)w
(t – 1)(s/t)
+(At – 2B0 + At – 3B1 + + A0Bt – 2)w
(t – 
2)(s/t)
 + + A0B0w
0
  (3) 
According to the Karatsuba-Ofman method, each cross term in Equation (3) can be re-
written as the following non-cross term: 
7 
 
Using Theorems 3 and 4, Figure 3 plots the curve of the number of base instructions of 
n-times recursive-balanced-t-way split, that is, 8
1
2
n
t
t
 
 
 
s
2
 + 42
1
2
n
t  
 
 
s – 40s when n = 
4 [ln(2 ) ln( 1)]
log
21[ln( 1) ln 2]
t
s t t
t
 
 
, as 1  s  2000, t  2. The recursive-balanced-2-way split, that is, (t = 
2), results in superior performance in comparison to recursive-balanced-t-way split as t > 2. 
Theorem 5 demonstrates that using recursive-balanced-2-way split to multiply two s-word 
integers is more efficient than using recursive-balanced-t-way split as t > 2.  
 
Figure 3. Plot of the number of base instructions of n-times recursive-balanced-t-way split as 1 
 s  2000, t  2 and 
4 [ln(2 ) ln( 1)]
log
21[ln( 1) ln 2]
t
s t t
n
t
 

 
. 
 
Theorem 5. Using recursive-balanced-2-way split to multiply two long s-word integers is 
more efficient than using recursive-balanced-t-way split when t > 2. 
Subsequently, Theorem 6 demonstrate that using recursive-balanced-t-way split is supe-
rior to recursive-unbalanced-t-way split, and Theorem 7 concludes that recur-
sive-balanced-2-way split is the optimal split method to achieve optimal performance for im-
plementing the large integer multiplication of two s-word integers by using the classical mul-
tiplication. 
Theorem 6. Using recursive-balanced-t-way split to multiply two s-word integers is more 
efficient than using recursive-unbalanced-t-way split.  
Theorem 7. Using n-times recursive-balanced-2-way split, where n = log2(0.13515×s), 
to multiply two s-word integers is more efficient than using all of the other split methods by 
using the classical multiplication. 
5.2 Experiments And Discussions 
In order to confirm theoretical results, this project used assembly language to implement a 
number of experiments on the Code Composer Studio (CCS) platform (TI DSP C55x family 
platform [19]) without requiring any special coding skills. The TI DSP C5510 family is an 
RISC-like processor, which typically has low computational power and memory; therefore, it is 
included in several smart devices. 
9 
 
modular multiplication for the proposed method. Table 9 shows the increase in speed of mod-
ular exponentiation with the proposed recursive-balanced-2-way method versus that with other 
modular multiplication methods. Other modular multiplication methods require 1.28x-2.10x 
the computational cost required with the proposed recursive-balanced-2-way method for the 
processors of smart devices. Moreover, 1.58x-1.94x the computational cost is required for other 
modular multiplication methods versus modular multiplication with the proposed method when 
the bit length at 3072 satisfies the NIST recommendations. The energy consumption of soft-
ware is closely related to execution time. The proposed scheme is an energy-saving method to 
implement security protocols in mobile devices and low-end devices. 
 
Table 7. Number of CPU cycles for integrated Montgomery modular multi-
plication and the proposed recursive-balanced-2way method 
Length(bit) 
#Cycles of Algorithms 
CIOS
1
 [20] KCM
2
 [18]  The proposed scheme
3
 
8192 2,402,948 1,933,718 927,329 
4096 597,148 448,150 284,804 
3072 339,255 275,914 174,928 
2048 151,132 135,133 88,250 
1024 38,275 35,093 27,447 
Note: 
1. Alternating between multiplication and reduction. 
2. Performing Karatsuba-Ofman method to multiply the operand first and then 
perform the Montgomery reduction [18]. 
3. Performing the proposed recursive-balanced-2-way method to multiply the 
operand first and then perform the Montgomery reduction. 
 
Table 8. Number of CPU cycles for modular exponentiation with different 
modular multiplications where the bit lengths of base, modulus, and exponent are 
the same length 
Length 
(bit) 
#Cycles of Algorithms 
CIOS [20] KCM [18] The proposed scheme 
4096 3,668,877,312 2,753,433,600 1,749,835,776 
3072 1,563,287,040 1,271,411,712 806,068,224 
2048 464,277,504 415,128,576 271,104,000 
1024 58,790,400 53,902,848 42,158,592 
 
Table 9. Speedup of modular exponentiation with the proposed method vs. other modular 
multiplications where the bit lengths of base, modulus, and exponent are the same length 
(the CPU Cycles of other modular reductions/ the CPU Cycles of the proposed method) 
 1024 bits 2048 bits 3072 bits 4096 bits 
CIOS[20] 139% 171% 194% 210% 
KCM [18] 128% 153% 158% 157% 
 
六、結論 
The result of this project proposes a recursive-balanced-2-way split method that uses the 
divide-and-conquer concept to split the operand to ensure that long integer multiplication is 
executed as quickly as possible on Peer-to-Peer ubiquitous networks. In order to maximize the 
lifetime and provide the robust security on nodes of P2P ubiquitous networks, modern cryp-
tographic protocols are deployed. These cryptographic protocols are based on modular arith-
11 
 
[15] C. Lederer, R. Mader, M. Koschuch, J. Grobschadl, A. Szekely, and S. Tillich, "Ener-
gy-efficient implementation of ECDH key exchange for wireless sensor networks," WISTP 
2009, LNCS 5746, pp. 112-127, 2009. 
[16] A. J. Menezes, P. C. van Oorschot, and S. A. Vanstone, Handbook of Applied Cryptog-
raphy, CRC Press, 1997. 
[17] D. E. Knuth, The Art of Computer Programming, Addison-Wesley, 1969, 2
nd
 edition, 3
rd
 
edition, 1998. 
[18] J. Groschädl, R. M. Avanzi, E. Savas, and S. Tillich: "Energy-efficient software im-
plementation of large integer modular arithmetic," CHES 2005, LNCS 3659, pp.75-90, 
2005. 
[19] Texas Instruments, "C5000 DSPs: Architecture & Peripheral Features," Available: 
http://www.ti.com. 
[20] C. K. Koc, T. Acar, and B. S. Kaliski: "Analyzing and computing Montgomery algo-
rithms," IEEE Macro, 16(3):26-33, 1996. 
  REF05 
2 
 
二、與會心得 
本次參加會議，除了聆聽資訊安全技術相關論文的發表場次外，因該會議論
文包含其他研究領域，因此利用空檔也特別聆聽幾場資訊安全管理與風險評估
相關的學術論文，這些學術論文部分與個人研究有些關聯，聽到從不同領域學
者討論或論述安全問題與技術，使自己對於資訊科技與安全技術之應用有更廣
的角度來詮釋與看待，這對自己思考所研發的技術與研究有著不同的啟發。在
這種綜合性學術論文研討會可接觸的學者更為廣泛，不再只是科技研發人員或
資訊安全學者，會議期間寒暄閒談與聽聽管理與行銷學者們探討不同領域論文
的研究方法與立論方式，確實有別於我們工程科技人員，此與過去個人參加幾
乎都是相同領域學者的研討會的感覺與啟迪決然不同，也使自己對科技研發與
應用有著更廣的面向與思考模式，整個研討會除了與自己相關領域學者的交流
收穫外，因接觸一些不同領域的學者進而接收一些不同領域的看法與模式給自
己增廣不少見聞，對自己思考能力獲益不少也可以增加不同的角度看待技術研
發問題。 
     
    本次研討會的地點國家是帛琉共和國，這是個人第一次到達與我國有正式
邦交的國家參加研討會，難得看到我們的國旗飄揚在其他國家的公眾場所，第
一次看到時心理有著不同的感覺，這也是過去出席國際學術研討會從未產生的
感覺；個人也參觀了一些由我們國家支助帛琉建立的一些公共設施包括該國歷
史博物館與總統府，而歷史博物館內還有一特別的空間展示台灣原住民的文
化，了解自己國家在國際舞台上站在幫助者的角色確實有不同的感想。 
三、建議 
  個人認為參加大型研討會有助於學術之交流與成長，並且有助於將本國之
學術成果擴展出去，以提升我國之學術能見度。此外，參加研討會主題也不一
定侷限在自己得研究領域，能夠參加一些包含自己研究領域但也包括一些其他
相關領域甚至管理或商業領域的綜合性學術研討會，透過與不同國家且不同領
 IAM 2012 
International Conference on 
Innovation and Management 
Date: July 15‐18, 2012    Venue: Republic of Palau 
 
 
Acceptance Letter 
 
Dear Ren Junn Hwang: 
 
It  is our pleasure  to  inform you  that your paper has passed  through  the 
review  process  and  been  accepted  by  the  IAM2012.  This  is  the  formal 
acceptance  letter  of  your  paper  submission,  "A  secure  remote  user 
authentication scheme” (Paper ID: P0157). 
 
Thanks  for your participation and contributing to  IAM2012  in Republic of 
Palau. 
 
 
 
 
 
Sincerely, 
 
 
Kuang Hui Chiu 
Conference Chair 
 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/10/16
國科會補助計畫
計畫名稱: 行動通訊設備上快速-省電大整數模算術計算方法之研究
計畫主持人: 黃仁俊
計畫編號: 100-2221-E-032-038- 學門領域: 計算機網路與網際網路
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
1.計畫部分成果已投稿至國際學術期刊論文，已被評議為微幅修正後接受，目
前正修正回覆中。 
2.除計畫部分成果發表在國外國際學術研討會外，也善用經費出席國內資訊安
全相關議題之學術研討會並發表與資訊安全相關之學術論文與其他學者交流。
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
