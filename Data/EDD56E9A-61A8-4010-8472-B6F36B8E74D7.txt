same channel. The second is to find a real time 
schedule which ensures the amount of jitter is not 
greater than a bound. We firstly formulate these 
problems as zero-one integer linear programming 
problems. Then we propose several efficient 
scheduling algorithms to attain the schedule goals. 
Experimental results shows the efficiency of the 
proposed algorithms. 
英文關鍵詞： video recording, real time scheduling, optimization 
algotithm, schedulability, video surveillance 
 
 2
 
Well-known real time scheduling algorithms [2, 3] such as 
the EDF algorithm can be applied to implement the scheduler 
for the DVR server. However, one specific requirement should 
be met in the DVR surveillance system. Since it is not allowed 
to capture all frames from a channel, we expect that the 
captured frames from the same channel should have equal 
temporal distance between any two successive captured frames. 
That is, the temporal distance between two frames captured 
from a channel with frame rate r should be 120/r time slots 
(assuming schedule-length = 120 slots).  If the distance does 
not equal the value, there is jitter. In this paper we study the 
real time scheduling algorithms with some minimization goal 
related to the amount of jitter.  
In this project, we propose real time scheduling algorithms 
for the DVR server to meet two different schedule goals. The 
first one is to minimize the summation of jitter of all channels. 
The second is to find a valid real time schedule which ensures 
the value of jitter is not greater than a bound. We firstly 
formulate these problems as zero-one integer linear 
programming problems. Then we propose several efficient 
scheduling algorithms to attain the schedule goals. 
Experimental results show that our algorithms get better results 
than the EDF algorithm.   
The scheduling work closest to ours is the work in [5],  
which shows similar requirement as our problem in other 
applications and tries to minimize the sum of the maximum 
jitter of all tasks subject to the precedence, exclusion, and 
deadline constraints. Simulated annealing technique is used to 
search optimal solution. One key difference from this work is 
all tasks in our work have the computation time of exactly one 
time-slot. This feature can simplify the problem formulation 
and optimization algorithm [e.g. 6, 7]. Another related work is 
[8], which find the bound proved for the maximum jitter. 
Furthermore, there are many published scheduling algorithms 
which consider the temporal distance between two instances of 
the same task in a schedule. However, they attain different 
purposes from ours. The pinwheel scheduling is used to solve 
the communication between satellite and ground station [e.g. 9, 
10]. To avoid the leak of data, ground stations must receive a 
message from a satellite in a specific period. However, 
pinwheel problem only concerns that the distance between two 
successive instances of the same task must be shorter than a 
bound. The distance-constrained scheduling [e.g. 11] is an 
extended work of pinwheel scheduling. In the pinwheel 
problem, all the tasks are assumed to have exactly one 
time-slot computation time. In the distance scheduling, the 
computation can take more than one time slot and the 
computation is preemptive. However, the resultant schedule 
neither has minimum distance jitter nor satisfies conventional 
real time constraint. The temporal fairness in periodic real time 
scheduling is considered in [e.g. 12, 13]. However, a fair 
schedule does not ensure the minimum jitter. Periodic 
scheduling is required in wireless network and broadcast disks 
[e.g. 14, 15]. The main goal of a schedule is to have good 
approximation of the requested period. However, they do not 
always satisfy the real time requirement.  
The next section describes the proposed cost functions 
based on jitter and presents the formulation of two scheduling 
problems as zero-one integer linear programming problems. In 
the third section, two efficient scheduling algorithms are 
proposed to serve the first goal. Then the algorithm to serve the 
second goal is described in the fourth section. Finally, 
experimental results and conclusion will be described.  
 
    II. PROBLEM FORMULATION 
We present cost functions to evaluate the quality of a schedule 
and formulate the scheduling problems to attain two different 
goals as zero-one integer linear programming problems: (1) 
minimize the total amount of jitter of all channels and (2) find 
a schedule which still tries to meet the goal (1), while the 
maximum jitter of all channels is guaranteed to be not greater 
than a bound.  
Cost functions 
We assume that there are M channels in the DVR and the 
length of a schedule is N time slots. In each slot, the DVR can 
record at most one video frame from some channel. Each 
channel has a specified frame rate, fi, i=1, 2,…, M, which is the 
frame number that must be recorded within N time slots. For 
simplicity, we let N be a common multiple of all fi. 
Furthermore, let ci =N /fi. An optimal schedule should make 
the temporal distance (slots) between any two consecutive 
recorded frames of the ith channel to be ci.. If the distance is not 
equal to ci, there is distance jitter. Specifically, let two 
consecutive frames uk and uk+1 of the ith channel be recorded at 
slots vk and vk+1. The jitter equals |vk+1−vk−ci|. The total amount 
of the distance jitter of ith channel is defined as  
)1(         .||||
1
1
11 ∑−
=
+ −−+−−+=
i
i
f
k
ikkifi cvvcvNvJ  
   The first term corresponds to the temporal jitter between 
the last frame in a round and the first frame in the next round. 
We now define the average jitter of a schedule as 
)2(                               ,1
1
∑
=
=
M
k
kJF
AJ  
where F=f1+f2,…, fM. In practice, the smaller fi is, generally the 
more negative effect the jitter causes. Therefore, we define the 
weighted average jitter of a schedule as  
∑
=
=
M
k k
k
f
J
M
WAJ
1
)3(                              .1  
Problem-I formulation 
Based on the above equations, we formulate the scheduling 
to meet the goal (1) as a problem of zero-one integer linear 
programming by using a binary decision variable: X={xi,j; i=1, 
2,…, M; j=1, 2,…, N}, where M is the number of channels and 
N is number of slots in one round of a schedule. The problem 
with cost function (eq 2) can be stated as follows:    
  Subject to (real time requirement) 
Display path
Raw Video 
input 
Playback 
video 
Video Multiplexer/Decoder 
Switching queue 
 
up 
Record path 
CODEC 
M
em
ory 
Fig. 2: A typical hardware block diagram of a 
DSR server. 
 
 4
jitter-free frame distribution. To meet the real time requirement, 
at least one frame must be recorded from a certain channel 
before the deadline. The graph of deadline distribution shows 
deadlines at what time slots. Fig. 4(a) shows the deadline 
distribution of the DVR example having three channels which 
have the frame rate 4, 3 and 2, respectively. Fig 4(b) is a graph 
of cumulative deadline distribution. The value of the kth time 
step means that the cumulative number of frames must be 
captured before the end of the kth step. This value will be used 
to determine if the EDF policy must be adopted for scheduling. 
Another distribution, jitter-free frame distribution, 
describes what time steps are the best positions to capture 
frames from a certain channel. The best position means that the 
jitter between two consecutive frames is zero. The frames 
recorded at the position is called jitter-free frame. Fig. 5(a) 
shows an initial distribution of jitter-free frames for all 
channels. Fig. 5(b) is a graph of cumulative distribution. The 
value of the kth time step means that the cumulative number of 
jitter-free frames should be captured before the end of the kth 
step. This value will be used to determine if a channel is 
captured in the current time step even when the time step is not 
the best position. Such a distribution will changes after a part 
of scheule is fixed. Fig. 6(a) shows a distribution of jitter-free 
frames after the schedule of the first five steps is fixed. Fig 6 (b) 
is the corresponding cumulative distribution. From the 
distribution of jitter-free frames, we can obtain the value of a 
weight function W[i]. The value of −W[i] means that the best 
time step to capture the next frame from channel i is in 
−W[i]+p step, where p is the current slot index. Let ZJ[k] be 
the value of the cumulative distribution in step k. If ZJ[k]> 
k−p, some channel must miss video capturing at its jitter-free 
position. The situation is said to have overflow of jitter-free 
frames at that position. 
 
Fig. 4 (a): The distribution of deadline of recording 
jobs for a schedule cycle. 
  
 
Fig. 4 (b): The cumulative distribution of deadline of 
recording jobs for a schedule cycle. 
Fig. 5(a): The initial distribution of jitter-free position for a 
schedule cycle. 
 
 
Fig. 5(b): The initial cumulative distribution of jitter-free 
position for a schedule cycle. 
 
 
Fig. 6(a): The distribution of jitter-free position after the step 5. 
 
 
Fig. 6(b): The cumulative distribution of jitter-free position 
after the step 5. 
 
The proposed  scheduling algorithm minj_sbys is shown 
in Fig. 7.  In the proposed algorithm, the priorities of 
channels are determined by the following rules: 
(1) If there are k frames must be captured in the coming k 
time slots, the EDF policy is used.  
(2) If at least one channel has W[i] ≥ 0, we select the 
channel with the smallest frame rate among those of W[i] 
≥ 0.  
(3) If there is no W[i] ≥ 0 in the current slot, we check if 
conflict of jitter-free frames exists. If the overflow 
occurs in any two successive slots in the future, we select 
the channel which has the largest frame rate among those 
channels ready to be captured.   
We use ci (i.e. N/fi ) to determine the deadline for each 
channel. The main loop repeats the check of the three rules 
aforementioned to assign a channel or no channel to the slot. 
The time complexity of the minj_sbys algorithm is O(N2). 
We use the example of (f1=4, f2=3, f3=2) to show the 
mindj algorithm. Let the number of slots in the schedule be 12. 
Hence, we have c1=3, c2=4 and c3=6. The followings show the 
process of this algorithm: 
1st slot: W[1]=0, W[2]=0, W[3]=0, channel 3 is selected. 
2nd slot: W[1]=1, W[2]=1, W[3]= −5, channel 2 is 
selected. 
3th slot: W[1]=2, W[2]= −3, W[3]= −4,  EDF=1, channel 
1 is selected. 
4th slot: W[1]= −2, W[2]= −2, W[3]= −3,  no assignment. 
5th slot: W[1]= −1, W[2]= −1, W[3]= −2. We find that ZJ[6]=2 
 6
white-cube -> red-cube. After the first two cameras have been 
scheduled, we will find that at the second Jitter-Free position 
of the red-cube has already been assigned to another camera 
(white-cube). Fig. 9(a) and (b) illustrate that we have to search 
the nearest empty slot, i.e. slot #4. Fig. 9(c) shows the result 
derived by the camera-by-camera scheduling minj_cbyc. 
Fig. 9: (a) The Jitter-Free position for camera 1(red-cube) 
has been assigned to other channel; (b) The frame is moved 
to slot #4  and (c) The resultant schedule by minj_cbyc for 
instance (6,4,2). 
 
 
IV. JITTER-BOUND CONSTRAINED SCHEDULING 
The Jitter-Bound Constrained Scheduling tries to find solutions 
for minimization problem II. The algorithm uses the same 
strategy as the minj_cbyc scheduling presented in the previous 
section. The whole algorithm called minj_jb is shown in Fig. 
10. The main difference is that the minj_cbyc lgorithm always 
can find an empty slot to assign it to a camera if utilization ≤ 1. 
However, in the Jitter-Bound Constrained Scheduling, only 
those slots without violating the jitter-bound constraint can be 
used. That is, if the next jitter-free position for the target 
camera is s, the legal slot positions are in between s−B and 
s+B. If there is any empty slot in this range, the nearest one is 
chosen. Otherwise, we check if these is any frame which can 
be moved to the empty slot outside the range of s−B ~ s+B. 
The maximum jitter bound derived in [8] can be used a 
reference bound. However, it is just an upper bound and may 
violate the real ti me requirement. 
   To facilitate the check, we maintain the information which 
shows the allowable positions to which a frame that is already 
assigned to some slot while they can be moved. If such a frame 
exists, it is moved to the empty slot and its original position is 
assigned to the target camera. The variables Ls[k] and Rs[k] in 
Fig. 11 are designed to keep the information and they are 
updated any time a target camera is assigned to a slot.  
    We use the instance of {5, 5, 2} and set jitter bound B=1 
to show the algorithm. The three channels are represented with 
red-cube, white-cube and black-cube in Fig. 11, respectively. 
The weight-decreasing list is the black-cube -> white-cube -> 
red-cube. After the first two cameras have been scheduled, we 
find that the jitter-free position of third frame of camera No.1 
(red-cube) is the 7th slot. However, it is already assigned to 
other camera. To further deal with the conflict, we find that 
there’s no empty slot from 7-1 to 7+1 (noting that B=1). We 
check if the frames in 6th and 8th slot can be moved the 8th slot 
which now is empty.  Since Ls[8] =1 and Rs[8]=1, we move 
the frame of camera No. 2 (white-cube) in the 8th slot to the 9th 
slot. Furthermore, the 8th slot now is assigned to the camera No. 
2. Fig. 11(b) shows the final schedule result. 
 
 
Fig. 10: The jitter-bound constrained scheduling algorithm.  
  
N: The number of Slots. 
M: The number of Cameras. 
c[i] = N/fi   // fi is the frame rate of camera i. 
B: jitter-bound 
R[k]: The camera which is assigned to the kth slot. 
Ls[k]:The frame in the kth slot can be moved to the left-Ls[k] 
position without violating B 
Rs[k]:The frame in the kth slot can be moved to the right-Rs[k] 
position without violating B  
lps: last frame position 
Initialization:∀ k, k=1,….,N, R[k]=0, Ls[k]=0, Rs[k]=0; 
Let F = {f1,…..,fM}; 
//main loop 
while (F≠ψ){ 
select the camera u, which has the least frame rate in F 
 //search the first position 
for (s=1; s<=N; s++){ 
  if (R[s] = 0){ 
  R[s] = u; //assign camera u to the sth slot. 
  lsp=s; //last frame position 
  s = s +c[u]; 
  break; 
} 
} 
  //continue to assign camera to the next jitter-free position 
while (s<=N){ 
      if (R[s]=0 ){ 
R[s] = u; //assign camera u to the sth slot. 
 update Ls[s], Rs[lfp], lfp=s; 
 s = s+c[u]; 
 } 
 else if { 
search the nearest empty slot p and | p−lps−c[u]| ≤ B .  
R[p] = u; 
update Ls[p], Rs[lfp], lfp=p; 
        s =p +c[u]; 
} 
else { 
search the nearest empty slot p 
For all slots z in between s−B and s+B 
Check Ls[z] and Rs[z] to find a camera w = R[z] which 
can be moved to the pth slot  
If no such camera exists, return (failed);  
R[p]=w; R[z]=u; 
update Ls[z], Rs[lfp], lfp=z; 
update Ls[p], Rs[p], Rs [the previous frame of w],  
Ls [the next frame of w] 
s =z +c[u]; 
} 
} 
F = F – u; 
} 
 8
Table 1: Comparison of average jitter (AJ) among various 
approaches. 
Examples (N=60) EDF  Minj_cbyc 
Minj_
sbys 
ILP 
(6, 5, 4, 3) 0.67 0 0 0 
(15, 10, 10, 6) 0.73 0.39 0.29 0.19
(20, 15, 12, 10) 0.56 0.88 0.6 0.39
(30, 12, 10, 6) 0.62 0.48 0.55 0.34
(30, 20, 6, 3) 0.94 0.61 0.64 0.37
(20, 15, 6, 6, 3, 3, 3, 2) 1.21 1.06 0.97 0.24
(15, 15, 10, 10, 3, 2, 2, 2) 1.49 0.98 0.75 0.24
(12, 6, 6, 6, 5, 5, 5, 3) 0.75 1.07 0.67 0.17
(6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 
2, 2, 2, 2, 2, 2) 2 3.31 1.85 x 
(15, 12, 10, 3, 2, 2, 2, 2, 
2, 2, 2, 2, 1, 1, 1, 1) 1.13 1.06 1.13 x 
average 1.01 0.984 0.745 0.243
   
Table 2: Comparison of weighted average jitter (WAJ) 
among various approaches. 
Examples (N=60) EDF  Minj_cbyc 
Minj_
sbys 
ILP 
(6, 5, 4, 3) 0.81 0 0 0 
(15, 10, 10, 6) 0.92 0.28 0.21 0.13
(20, 15, 12, 10) 0.68 0.8 0.5325 0.325
(30, 12, 10, 6) 1.12 0.28 0.5825 0.45
(30, 20, 6, 3) 2.58 0.35 0.775 0.283
(20, 15, 6, 6, 3, 3, 3, 2) 2.67 0.43 1.12125 0.19
(15, 15, 10, 10, 3, 2, 2, 2) 3.17 0.49 0.633 0.14
(12, 6, 6, 6, 5, 5, 5, 3) 1.03 0.43 1.03 0.51
(6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 
2, 2, 2, 2, 2, 2) 2.56 1.88 1.44 x 
(15, 12, 10, 3, 2, 2, 2, 2, 
2, 2, 2, 2, 1, 1, 1, 1) 1.59 0.897 1.59 x 
average 1.713 0.584 0.791 0.254
 
Table 3: Comparison of average jitter (AJ) between ILP 
and minj_jb approaches. 
ILP Minj_jb Instance Bound 
AJ Cost AJ Cost 
1 0.19 0.44 
2 0.19 0.44 
3 0.19 0.44 
(15,10,10,6) 
4 0.19 0.44 
1 0.52 x 
2 0.35 0.77 
3 0.35 0.77 
(20,15,12,10) 
4 0.35 0.77 
1 0.37 x 
2 0.34 0.44 
3 0.37 0.44 
(30,12,10,6) 
4 0.37 0.44 
1 0.37 x 
2 0.37 x 
3 0.37 0.47 
(30,20,6,3) 
4 0.37 0.47 
1 0.31 x 
2 0.21 x 
3 0.21 x 
(20,15,6,6,3,3,3,2)
4 0.21 x 
1 0.13 x 
2 0.13 x 
3 0.13 0.58 
(12,6,6,6,5,5,5,3)
4 0.13 0.58 
Average 0.28 0.54 
 
 
 2
三、與會心得感想及建議： 
      再次感謝國科會經費之補助，本人與學生方能前往參加。此次大會由延世大學主辦，
它是南韓首屈一指的私立綜合大學。並且在南韓全國排名在前五名內之大學，這在台灣並不
容易。本校輔仁大學也常以台灣首屈一指的私立綜合大學自居，但顯然學術地位有些距離，
有待本校同仁繼續努力。此次參加前，一直猶豫是否由學生報告。經過幾次演練與講稿修改，
並給於鼓勵，結果在 MWSCAS 會議上表現，個人覺得學生表現已符合要求。雖然我們的研究生
在大學與研究所一般都是在私立大學環境下學習，但給於機會，還是能激發他們的潛能。至
於此次舉辦所在地首爾，是個結合傳統與現代的城市，不只擁有多處世界遺產，也有相當先
進的建設，是個值得到訪的城市。 
四、相片 
 
 
 
99 年度專題研究計畫研究成果彙整表 
計畫主持人：林寬仁 計畫編號：99-2628-E-030-001- 
計畫名稱：視訊錄影排程演算法與可排程性之研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 1 100%  
研究報告/技術報告 1 1 100%  
研討會論文 1 2 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 4 4 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
