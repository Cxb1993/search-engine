 2
TDM switchTDM switch
1
N
1
N
VOQ
... ...
1
N
... ......
 
Fig. 1 The generic load-balanced switch architecture 
 
into the uniform traffic, and the second stage 
is for switching of the uniform traffic. The 
connection patterns in the switches of both 
stages are deterministic and periodic. As 
such, there is no need to find matchings as 
required in most input-buffered switches. 
 The problem of load-balanced switches 
is that there are multiple paths between each 
input/output pair. As such, packets of the 
same flow may be delivered out of sequence. 
To cope with this problem, there are several 
tentative solutions proposed in the literature. 
Among them, the uniform frame spreading 
(UFS) scheme [KCY03] is the most simple 
one. The idea of the UFS scheme is to add 
virtual output queues (VOQ) at the inputs 
and operate the system in frames. Packets 
destined for the same output are stored in the 
same VOQ. Once a VOQ has more packets 
than the number of input/output ports, that 
VOQ is called a full-framed VOQ. At the 
beginning of a frame, a full-framed VOQ is 
selected and transmitted to the second stage. 
If there is no full-framed VOQ, then nothing 
is transmitted. By so doing, a full-framed 
VOQ “reserves” a frame (of time slots) and 
transmits its packets consecutively in that 
frame. Though the UFS scheme is shown to 
achieve 100% throughput [KCY03], the 
packet delay is large (even in light traffic). 
This is known as the starvation problem as it 
takes time to accumulate packets for a 
full-framed VOQ. 
 On the other hand, the mailbox switch 
(with ? = 0 in [CLS04]) has only one 
buffer (for storing a packet) between two 
stages (see Figure 2). 
S-TDM switchS-TDM switch
1
N
1
N
VOQ
...
1
N
...
...
...
...
...
...
...
FIFO
FIFO
...
Fig. 2. The architecture of the mailbox switch (with?
= 0 in [CLS04]) 
 
S-TDM switchS-TDM switch
1
N
1
N
I-VOQ
...
VOQ
... ...
1
N
... ...
 
Fig. 3 The architecture of the CR switch 
 
 Packets have to contend for that buffer. As 
there is only one buffer, packets from the 
same flow are delivered in order. However, 
as packets have to contend for that buffer, 
100% throughput cannot be achieved. In fact, 
it was shown in [CLS04], the throughput for 
such a switch is only 58%. The advantage of 
the mailbox switch is its low packet delay in 
light traffic. In light traffic, collisions seldom 
occur and packets can be transmitted 
immediately after their arrivals. 
 The main contribution of our work is to 
propose a switch architecture, called the CR 
switch (see Figure 3), that can have the 
advantages of both the UFS scheme in 
[KCY03] and the mailbox switch in [CLS04]. 
We show that the CR switch achieves 100% 
throughput and delivers packets in order (as 
in the UFS scheme), while maintaining low 
packet delay in light traffic (as in the mailbox 
switch). The main idea, as pointed out in the 
pioneer work by Tobagi and Kleinrock 
[TK76] for a multiple access channel, is to 
have the CR switch operating in two modes: 
the contention mode (in light traffic) and the 
reservation mode (in heavy traffic). As in the 
UFS scheme, when there is a full-framed 
VOQ, the CR switch operates in the 
reservation mode and transmits a full frame 
of packets. However, when there is no 
full-framed VOQ, it is operated in the 
contention mode like the mailbox switch. 
 The key innovation that enables us to do 
this is a new buffer management scheme, 
called I-VOQ (virtual output queue with 
insertion). There are three types of packets in 
an I-VOQ: fake packets, contention packets 
and reservation packets. A fake packet is 
generated every time an I-VOQ becomes 
empty. A reservation packet (a packet 
transmitted in the reservation mode) is 
always stored at the end of an I-VOQ. A 
contention packet (a packet transmitted in the 
contention mode) can only be stored at the 
head-of-line position of an I-VOQ if the 
 4
switch operating in the contention mode 
under light traffic to have low delay, and in 
the reservation mode under heavy traffic to 
maintain system stability. The question is 
then how the CR switch knows whether the 
traffic is light or heavy without measuring it. 
 To answer this question, we operate the 
CR switch in a frame-based manner as in the 
UFS scheme [KCY03]. Every frame consists 
of N consecutive time slots. However, the 
beginning time slots of frames are different 
for different inputs/outputs. If the number of 
packets in a VOQ at an input port is not less 
than N, that VOQ is called a full-framed 
VOQ. At the beginning of a frame, if an 
input has a full-framed VOQ, then it is 
considered in heavy traffic and is operated in 
the reservation mode. That frame is then 
called a reservation frame. Otherwise, it is 
considered in light traffic and is operated in 
the contention mode. Accordingly, that frame 
is called a contention frame. 
 Now we describe the detailed operations 
for these two modes. 
The reservation mode:  
 Each input keeps a reservation pointer 
for selecting a full-framed VOQ as in iSLIP 
[McKeown99]. At the beginning of a 
reservation frame, the full-framed VOQ that 
is clockwise the closest to the pointer is 
selected. The pointer is then incremented 
clockwise to one location beyond the 
selected VOQ. Suppose that VOQ q is 
selected. In each time slot of that frame, the 
HOL packet from VOQ q is sent to the 
connected central buffer. One bit of 
information is also transmitted to indicate 
that this packet is a reservation packet. The 
packet is then stored at the tail of I-VOQ q of 
the connected central buffer. 
The contention mode:  
 Each input keeps a contention pointer 
for selecting a nonempty VOQ as in iSLIP 
[McKeown99]. In each time slot of a 
contention frame, the nonempty VOQ that is 
clockwise the closest to the pointer is selected. 
The pointer is then incremented clockwise to 
one location beyond the selected VOQ. 
Suppose that VOQ q is selected in a time slot 
of that frame. The HOL packet of VOQ q is 
copied and sent to the connected central 
buffer in that time slot. One bit of 
information is also transmitted to indicate 
that this packet is a contention packet. If the 
HOL packet of I-VOQ q of the connected 
central buffer is a fake packet, we replace the 
HOL packet of I-VOQ q of the connected 
central buffer by this contention packet and 
feed back one bit of information to indicate a 
successful transmission. Otherwise, we reject 
the contention packet and feed back one bit 
of information to indicate a failed 
transmission. If the transmission is successful, 
the HOL packet of VOQ q is removed and 
packets behind it are moved up one position. 
Otherwise, the HOL packet remains the HOL 
packet of VOQ q. 
 
IV In Order Delivery 
 In this section, we show how the CR 
switch delivers packets in order. Let flow (i, j) 
be the sequence of packets from input i to 
output j. Let packet k be the kth packet of 
flow (i, j). The CR switch delivers packets of 
the same flow in order if packet k departs the 
switch earlier than packet k + 1. 
Proposition 2  
 Suppose that frame f of input i is a 
reservation frame that contains packets for 
output j. 
(i) For m = 1, 2, …,N, the packet transmitted 
in the mth slot of frame f is stored as the 
pth packet in I-VOQ (m, j) for some fixed 
p ? 2. 
(ii) For m = 1, 2,…,N, the packet transmitted 
in the mth slot of frame f is sent to its 
output in the mth time slot of frame f of 
output j for some f. 
B. The proof for in order delivery 
 Now we show that packets of the same 
flow can be delivered in order. There are 
three cases that need to be considered: (i) 
packet k is a contention packet, (ii) both 
packet k and packet k+1 are reservation 
packets, and (iii) packet k is a reservation 
packet and packet k + 1 is a contention 
packet. 
 We leave the proof in our paper [YCL07] 
for the reference. The result is the following 
theorem: 
Theorem 3 (in order delivery)  
 The CR switch delivers packets of the 
same flow in order. 
 
