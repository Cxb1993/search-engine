II 
中文摘要 
 
在分子生物中尋找出有生物意義之基序是非常重要的研究議題。對蛋白質來
說，其功能性區域也非由序列的單一鄰近區塊所組成，而是由多個在序列中跨越
長間隔的區塊在蛋白質三級結構中群聚所形成。因為探勘這類型的模式必須考慮
較寬且較大彈性之間隔，除搜尋空間需要花費龐大的計算外，其中包含的大量雜
訊亦難以有效過濾與處理。因此傳統序列模式探勘演算法皆以限制模式來大量縮
小搜尋空間來增加探勘效能與減少雜訊，然而不適當的限制模型會大量忽略有意
義的保留模式。我們提出了一個新的專為探勘非鄰近保留模式而設計之有效率自
動化探勘演算法，考慮長區域與存在較大間隔彈性於同源性序列之保留性區域，
並以限制型序列型樣技術為基礎，整合了多種限制型刪減搜尋空間策略，並保證
輸出可大量減少多餘模式產生之最精簡(封閉型)保留模式。探勘演算法分別設計
與計算保留區塊內與保留區塊間之限制模式，使探勘之保留模式可跨越較長區域
外且可大幅降低演算法的複雜度，亦可在兼顧效率的情況下提升探勘模式之完整
性。 
 
透過我們設計的方法顯示，大部分在晶體結構群聚構成的功能區域在序列中是
分散的。同時我們使用兩種探勘策略，包含蛋白質序列為基礎之策略(預測蛋白質
序列功能殘基)，以及以蛋白質家族為基礎之策略(找出可以識別蛋白質家族之保
留基序集合)來進行實驗與評估效能與有效性。以蛋白質家族為基礎之策略主要與
多序列排比法進行比較，而蛋白質家族為基礎之策略主要與 PROSITE 資料庫進行
比較。我們設計的方法無論在計算時間或探勘之保留基序皆優於其他方法與註解
資料庫。最後我們亦從多種不同實驗資料及進行實驗測試，發現我們所探勘的保
留模式雖然分散於序列中，但大部分卻都傾向群聚於結構空間中。 
 
研究結果顯示，我們設計的方法直接從蛋白質虛列中預測蛋白質功能區或找出
蛋白質家族之識別特徵基序集合是非常快速且有效的。尤其探勘的刪減策略與封
閉式模式檢查亦大量提升計算效能與減少雜訊的產生。我們設計的演算法
WildSpan 以免費公開源碼於 http://biominer.csie.cyu.edu.tw/wildspan。 
IV 
For all figures, tables, and additional files described 
in the following report please refer to the 附件一 
as attached in below. 
Background	 	
As sequencing projects generate biological 
sequences at an astonishing rate, identifying 
functional signatures directly from sequences is of 
particular value in functional biology [1, 2]. These 
signatures can then be used to predict function or 
functionally important residues of a novel protein. 
The functionally important residues of proteins are 
generally conserved during evolution [3]. Conserved 
regions of a protein sequence can be identified by 
aligning the query protein with its homologues in 
protein databases. Alternatively, pattern mining (also 
called motif discovery) is an effective approach for 
identifying conserved regions [4-7].  
Motif finding algorithms have been widely used in 
this field for finding sequence signatures when given 
a set of related sequences (pattern mining). The 
resultant motifs are then employed in predicting 
protein function and functional sites when given a 
novel sequence (pattern matching). We previously 
employed motif finding in a hybrid way: detecting 
functional regions of a novel sequence directly by 
mining its sequence along with a set of homologues 
found in sequence database (MAGIIC-PRO,  [8]). 
Similar to multiple sequence alignment (MSA), 
MAGIIC-PRO can be invoked as long as the query 
protein can find sufficient homologues from 
database (this can be easily achieved after the 
completion of abundant sequencing projects). In this 
way, functional residues of the query protein can be 
predicted even when the function of the collected 
homologues is still left unknown. MAGIIC-PRO 
identified a set of residues that are concurrently 
conserved during evolution. This can supplement the 
conservation information provided by MSA. 
PROSITE language is one of the formal ways to 
express a pattern [9]. A capital letter in a pattern is 
called an exact symbol. For example, the pattern 
‘K-x-L-x(2)-E-x(2,3)-G’ have four exact symbols. In 
addition to capital letters, a pattern also contains 
wildcards, expressed by the symbol ‘x’. A wildcard 
can match any letters in a biological sequence. This 
pattern matches any sequence containing a substring 
which starts with ‘K’, followed by an arbitrary letter, 
followed by ‘L’, followed by two arbitrary letters, 
followed by ‘E’, followed by two to three arbitrary 
letters, and ends with ‘G’. Both ‘x’ and ‘x(2)’ are 
called rigid gaps, a gap of fixed length. A rigid gap 
can match a certain number of successive residues 
on which mutations are allowed. On the other hand, 
x(2,3) is a flexible gap, a gap of irregular length. A 
flexible gap can match a number of residues on 
which not only mutations are present but also 
insertions or deletions are allowed. 
For proteins, the residues associated with a 
functional site are not necessarily found in a local 
region of the sequence [5, 7, 10, 11]. Rather, the 
residues of a functional site are commonly clustered 
into several local regions that together constitute an 
important substructure when the protein is folded. It 
is observed that within protein families, only limited 
flexibility is allowed in such local conserved regions, 
while large irregular gaps may be present in between 
these regions as long as the inserted or deleted 
segments do not affect the functionality of the 
proteins [3, 12-14]. In Figure 1, we provide an 
example of such structured motifs. A structured 
motif 
‘R-x-Y-S-x(54,96)-G-x-G-x(2)-P-x(65,111)-Y-x-C-
G’ is observed on the protein FerredoxinNADP 
[Swiss-Prot accession number: P10933] and 
additional 150 Oxidoreductase 
FAD/NAD(P)-binding proteins belonging to the 
same protein family [InterPro entry: IPR001433] 
with P10933. This motif contains three blocks, and 
two inter-block gaps, ‘x(54,96)’ and ‘x(65,111)’, are 
quite large and flexible. It is shown in Figure 1 that 
the three pattern blocks, though largely apart in 
sequence, are clustered together in 
1 
VI 
gaps observed in the query sequence, a novel 
constraint named ‘maximum relative flexibility’ was 
designed to calculate the lower and upper bounds 
that are allowed among the homologues for this 
particular gap. Patterns satisfying the constraint 
model proposed in MAGIIC-PRO are called 
W-patterns.  
This study aims at introducing the algorithm 
WildSpan for efficiently discovering W-patterns. In 
this paper, we demonstrated that the constraint 
‘maximum relative flexibility’ has some good 
properties, and thus aggressive pruning strategies 
can be employed by WildSpan to improve efficiency. 
The performance of WildSpan is evaluated in two 
ways. Comparison of W-patterns to annotated motifs 
in existing databases reveals that W-patterns can 
capture the functional signatures of proteins well. 
Comparison of WildSpan to existing algorithms that 
perform the similar task reveals that W-patterns are 
more powerful in detecting protein functional 
regions than currently existing constraint models.  
In this paper, we also illustrate how WildSpan can be 
invoked as the protein-based or family-based mining 
mode for future proteomics applications. The mining 
results of protein-based mining reveal that WildSpan 
can efficiently and effectively identify functional or 
structural signatures of the query protein directly 
from the protein sequences. On the other hand, the 
mining results of family-based mining reveal that 
WildSpan can be used to identify sequence 
signatures of protein families for future function 
prediction and sequence annotation. The idea of 
protein-based mining has been integrated in our web 
servers MAGIIC-PRO [8] in 2006 and iPDA [25] in 
2007 for annotating protein sequences. On the other 
hand, the idea of family-based mining has been 
integrated in the web server E1DS in 2008 [26] for 
predicting enzyme catalytic sites and residues. In 
summary, though several independent studies have 
successfully shown the usefulness of the constraint 
model W-patterns, the design of the WildSpan 
algorithm has not been previously addressed and 
published elsewhere. In addition, the standalone 
package and open source codes of WildSpan are 
now ready for downloading and can be used for 
large-scale proteome studies in the future. 
Results	and	Discussion	
This section evaluates the efficiency and 
effectiveness of WildSpan in identifying functional 
regions of protein sequences. First, we conduct 
experiments on a protein-protein docking 
benchmark [27] for evaluating the performance of 
the protein-based mining mode of WildSpan in 
identifying functionally important regions of 
proteins. By this dataset we demonstrate that 
WildSpan is capable of identifying sequence motifs 
that usually contribute to forming local structures of 
proteins and are related to functional interfaces. 
Next, we execute WildSpan in family-based mining 
mode, and investigate the potential of the W-patterns 
to serve as diagnostic patterns for a protein family. 
After that, we investigate the effect of algorithm 
parameters on the mining results, and finally the 
scalability of WildSpan is evaluated using datasets 
containing different numbers of input sequences as 
well as with different maximum lengths.  All the 
experiments are conducted on a 3.4GHz Intel PC 
machine with 2GB main memory, running Linux 
Fedora 5 operating system. 
Experiments on detection of protein functional 
regions 
The protein-based mining mode of WildSpan aims at 
discovering functional regions for a query protein 
based on a set of homologues found in sequence 
databases. The performance of WildSpan in this task 
is evaluated from two aspects: (a) whether the 
blocks separated in sequence cluster together in 
three-dimensional protein structure; and (b) whether 
the conservation information provided by W-patterns 
is more function-related than that derived from MSA. 
On the other hand, the family-based mining mode of 
3 
VIII 
of which contains 10 residues.  
The results above reveal that some of the residues in 
W-patterns might be conserved for structure 
conformation. The next question to answer is 
whether the residues in W-patterns are conserved for 
function conservation. In this regard, we further 
evaluate the quality of a W-pattern by calculating the 
proportion of interface residues in a W-pattern. It is 
shown in Table 3 that 23.6% of the residues in the 
W-patterns are close to the binding partner in 
protein-protein complexes within 5Å. Since MSA is 
widely adopted to discover conserved residues for 
the query protein with respect to its homologues, the 
conserved residues detected by techniques based on 
MSA were compared here. To compare with MSA, 
we calculated the conservation scores based on the 
alignment of Clustal-W using the iPDA web server. 
In Table 3, it is shown that only 18.7% of the 
conserved residues detected by MSA are interface 
residues. This reveals that WildSpan is able to 
discover more conserved residues that are related to 
protein function. 
Family-based mining 
In this experiment, we show the potential of the 
W-patterns found by invoking the family-based 
mining mode of WildSpan to serve as the diagnostic 
patterns for protein families. Instead of using only 
one pattern as the classification rule, we propose 
using multiple patterns as the discriminator. The 
PROSITE database contains diagnostic patterns for 
protein families, domains, and functional sites. The 
ten largest PROSITE groups are collected as the 
training data (PA10F), and the W-patterns found by 
the family-based mining mode of WildSpan will be 
compared with the PROSITE patterns of that input 
set. It is nominally required that each pattern 
contains at least three pattern blocks, but patterns 
containing nine or more exact symbols though only 
belonging to one or two blocks will also be reported 
and selected. When these ten PROSITE families 
were analyzed using WildSpan, the maximum 
relative flexibility of an inter-block gap fmax = 50%  
and the other parameters are set as default. 
The protein sequences of each family in PA10F were 
collected based on the functional annotation in an 
earlier release of Swiss-Prot database as shown in 
Table A2.1 of Additional file 2. Meanwhile, all the 
protein sequences collected from a recent release of 
Swiss-Prot database were adopted as the testing data. 
A sequence is categorized as a positive sample as 
long as it matches any of the patterns derived by 
WildSpan. The sensitivity (TP/(TP+FN)), precision 
(TP/(TP+FP)) and specificity (TN/(TN+FP)) of the 
selected patterns are compared with those of the 
diagnostic pattern from the PROSITE database, 
where TP, FP, TN, and FN denote the number of true 
positives, false positives, true negatives, and false 
negatives, respectively. It should be noted that the 
training and testing procedures adopted here are not 
like a standard machine learning approach in two 
ways. First, no negative samples are involved in the 
training procedure. With the positive sequences only, 
motif finding algorithms are expected to achieve the 
maximum sensitivity rate over the input set under 
the user-specified constraints. Second, most of the 
training samples are included in the testing data as 
well. In this regard, it is expected that the sensitivity 
rates should be high, but obviously not all the 
methods fulfil this expectation. Another focus will 
be on how good the specificity rates can be achieved 
by different methods. 
Table 4 reveals that W-pattern is good in 
characterizing new proteins (eliminating false 
positives while keeping satisfied sensitivity rates). 
The predictions are compared to PROSITE patterns 
and the motifs discovered by motif-finding 
algorithms, RISOTTO, Pratt, and Teiresias. While 
providing a competitive predicting ability when 
compared to the PROSITE patterns, we observed 
that the W-patterns derived by WildSpan provide 
more complete and precise signatures regarding the 
binding regions than the PROSITE patterns, as 
5 
X 
protein functional motifs are usually composed of 
many conserved blocks that are separated in primary 
sequences but are often close to each other in 3-D 
structures. The constraint model (W-patterns) and 
the developed mining and pruning strategies 
(incorporated in WildSpan) is shown to efficiently 
and effectively deliver information concerning 
co-occurred sequence conservation. The derived 
W-patterns was previously shown to be useful in 
predicting intra-molecular interactions, identifying 
hot regions of protein-protein complexes, and 
detecting binding regions of protein-ligand 
interactions [8, 31-33]. To facilitate using the 
proposed algorithm in future application, we 
implemented a stand-alone program and provided a 
user-friendly web server for WildSpan to help the 
biological community in discovering functional 
regions of protein sequences in a large scale. 
WildSpan was developed using C/C++ with the 
support of C++ Standard Template Library under 
Linux, and has been tested on various GNU/Linux 
platforms, including Red Hat 9.0 and Fedora 5 or 
higher. It should also work well with other 
UNIX-like operating system.  
Methods	
This work introduces a two-phase algorithm (called 
WildSpan) to efficiently discover W-patterns when 
given a query sequence along with a set of 
homologous sequences. In the first phase, WildSpan 
constructs the complete set of blocks with 
rigid-length gaps using a bounded-gap prefix-growth 
approach. In the second phase, WildSpan discovers 
W-patterns by connecting any pairs of candidate 
blocks with large flexible gaps. Several pruning 
strategies are employed in the mining process to 
improve the performance. This section first formally 
describes the problem statement and the associated 
terminology. After that, the algorithm WildSpan is 
described step by step.  
Problem Statement. Given a query sequence Sq, a 
sequence database D, and a parameter set  
regarding pattern block, W-pattern and gap 
constraints, the algorithm will find the complete set 
of closed W-patterns (the definition of closed 
patterns is provided in Additional file 3) present in 
the sequence database D such that each W-pattern 
satisfies the constraints in  and its matched 
sequences include the query sequence Sq. The 
parameter set  includes the minimum support 
(minimum occurrences) of the W-pattern, the 
minimum number of blocks in a W-pattern, the 
minimum number of exact symbols in a block, the 
maximum length of an intra-block gap between two 
adjacent exact symbols in a block, and the maximum 
flexibility of an inter-block gap between two 
adjacent blocks in a W-pattern. 
A block or W-pattern is called ‘satisfied’ if it agrees 
with all the user-specified constraints. Each 
constraint will be defined when it is first used in the 
description of the algorithm.  
Definition 1. (Sequence and sequence database) A 
sequence over an alphabet  is a finite sequence of 
symbols belonging to , e.g., protein sequence is 
sequence over a 20-letter alphabet. For any sequence 
S=a1…am, a sequence Sx is called a subsequence of 
S, if Sx can be obtained by deleting zero or more 
symbols from sequence S. We use S[i..j] to denote 
the substring ai…aj (contiguous subsequence) of S, 
which starts at position i and ends at position j of S, 
for 1  i  j  m. In particular, S[1..i] is the prefix of 
sequence S that ends at position i, and S[i..m] is the 
suffix of sequence S that begins at position i. The 
length of sequence S, denoted as m, is defined as the 
number of symbols in S. An input sequence database 
D contains a set of sequences. 
In general, the input sequence database is a set of 
protein sequences that are presumed to be 
functionally or evolutionarily related to the query 
protein (the first sequence in D). Patterns found in 
protein sequences can be expressed in PROSITE 
language. For our purpose we need a more formal 
definition as below. 
7 
XII 
a block  and its projected database. Here, we 
present an example of scanning a projected database 
in Figure 6(a). This procedure takes a pattern  = 
‘C-x-H’ as input and tries to extend it under the 
user-specified intra-block gap constraints. In each 
call of C-bounded-prefix-growth, the search space of 
finding the next pattern symbol is bounded by the 
maximum length of an intra-block gap. A symbol in 
 is regarded as the candidate of the next symbol if 
the number of its occurrences in the projected 
database satisfies the minimum support threshold  
and its supporting sequences include the query 
protein Sq. Each symbol is appended to the current 
pattern one at a time, and the resulting new block 1 
(in this example, 1 = ‘C-x-H-x-R’) is used as the 
argument for the next call of 
C-bounded-prefix-growth, along with a possibly 
smaller projected database, because adding one 
more symbol to the current pattern reduces the size 
of the projected database. The process is recursively 
repeated until no satisfied symbol can be found in 
the current projected database. 
Phase 2: growing long W-patterns 
The second phase of the WildSpan aims to grow 
long patterns (W-patterns) that are composed of two 
or more blocks spanning large wildcard regions in 
protein sequences. Here we formally define what a 
W-pattern is. 
Definition 6. (W-Pattern and inter-block gap) A 
W-pattern  P = 1-x(s1,e1)-...- x(sp1,ep1)-p, 
where 1, 2 and p are the rigid-gapped blocks 
derived in phase 1. Any pair of adjacent blocks is 
connected by an inter-block gap, x(si,ei), which 
matches at least si and at most ei arbitrary residues 
between blocks i and i+1. The flexibility of an 
inter-block gap x(si,ei) is defined as ei  si + 1.   
When the flexibility of an inter-block gap x(si,ei) 
between two adjacent blocks is large, it implies that 
the pattern P spans a wildcard region and the length 
of the region is variant in its supporting sequences. It 
can be imagined that the mining results would be 
noisy if the growth of long patterns were not well 
confined. However, determining the extent of the 
flexibility of a wildcard region in advance is difficult. 
Fortunately, in the problem considered herein, this 
issue can be tackled by considering a relative 
flexibility constraint with respect to the length of the 
inter-block gap observed in the query sequence. 
Definition 7. (Relative flexibility constraint of 
inter-block gaps) A block i+1 is going to be 
appended to an existing W-pattern of which the last 
block is i. Let l be the length of an inter-block gap 
in the query sequence Sq, connecting blocks i and 
i+1. The lower and upper bounds of this inter-block 
gap are defined as (1  fmax)l and (1 + fmax)l, 
respectively, where fmax is called the relative 
flexibility constraint. The resultant new W-pattern is 
satisfied if the number of supporting sequences that 
satisfies the lower and upper bounds of the 
inter-block gaps is equal to or exceeds the minimum 
support constraint .
Here we present an example of growing W-patterns 
when the constraint of relative flexibility is adopted. 
Let the minimum support threshold  be 60%, the 
minimum length of block min be 3, the maximum 
intra-block gaps max be 2, the maximum relative 
flexibility fmax be 50%, and the minimum number of 
blocks in a W-pattern nmin be 2. Following the 
example used in Figure 6(a), the input sequence 
database has three satisfied blocks: ‘C-x-H-x-R’, 
‘T-W-K-G’, ‘D-W-x(2)-S’. An advantage of 
specifying a query sequence in advance is that the 
repeats present in protein sequences can be properly 
dealt with. As presented in Figure 6(a), the two 
instances of block ‘C-x-H-x-R’ will be treated as 
two distinct block instances and they are 
distinguished by their starting positions, 1 and 10, in 
the query sequence Sq. There are three satisfied 
W-patterns, as shown in Figure 6(c), according to 
the relative flexibility with respect to the query 
sequence Sq. The first W-pattern has four blocks 
9 
XIV 
inter-block gaps of lengths a and b and of relative 
flexibilities fa and fb respectively, the maximum 
length of the resultant new inter-block gap equals to 
a(1 + fa) + b(1 + fb) + c, and the minimum length 
of the resultant inter-block gap equals a(1  fa) + 
b(1  fb) + c. Given that fa   fmax and fb   fmax, 
we have a(1 + fa) + b(1 + fb) + c  (a + b + c)(1 
+ fmax) and a(1  fa) + b(1  fb) + c  (a + b + 
c)(1  fmax), which means the sub-pattern P also 
satisfy the same constraint fmax. This induction can 
be applied recursively if more than one block is 
deleted from P to form P. Hence we can deduce that 
the relative flexibility constraint of inter-block gaps 
is an anti-monotone constraint.   
The anti-monotonic property can be exploited more 
aggressively in the way described below. 
Pruning strategy 2. Let a pattern P be satisfied. If 
P = P-x(sp, ep)-p  fails to be a satisfied pattern, 
all patterns in the form of P-x(sp, ep)-p-x(sp, 
ep)-p also fail. Thus, for all other branches of the 
growing pattern P, for example, growing P-x(sp, 
ep)-p, p is no longer a candidate block.   
The upper bound constraint of a gap is not 
anti-monotonic, but it is prefix anti-monotonic [35]. 
A constraint Cp is called prefix anti-monotonic if for 
a sequence  that satisfies Cp, it implies that every 
prefix of  also satisfies Cp [34]. Therefore, in the 
first phase, the procedure C-bounded-prefix-growth 
adopts a prefix-spanning mechanism, ensuring that 
the prefix of pattern P will be explored before 
pattern P. If a pattern does not satisfy the maximum 
gap constraint, then any pattern with that pattern as 
the prefix cannot satisfy the same constraint. Hence, 
pruning strategy 1 can be applied. Furthermore, 
when a query protein is involved during the mining 
process, it is regarded as one of the constraints. This 
constraint can also be easily proven to be 
anti-monotonic. In summary, pruning strategy 1 is 
adapted in both phases of WildSpan and pruning 
strategy 2 is applied only in the second phase. 
WildSpan algorithm 
The WildSpan algorithm finds all the satisfied 
patterns with respect to a query sequence in two 
phases based the above strategies of search space 
pruning. In the first phase, WildSpan quickly mines 
all the closed blocks satisfying intra-block 
constraints with fixed-length gaps by using 
C-bounded-prefix-growth procedure, which 
constitute the building blocks of the W-patterns. 
After that, in the second phase, WildSpan discovers 
all the closed W-patterns satisfying inter-block 
constraints by connecting satisfied blocks found in 
the first phase with flexible gaps using 
B-bounded-prefix-growth procedure. The efficiency 
of WildSpan in finding W-patterns with large 
irregular gaps is ensured by exploiting the prefix 
anti-monotone characteristic of the new constraint 
model.  
Based on the above algorithm description, we have 
the pseudo-code of WildSpan as shown in Figure 
A4.1 of Additional file 4, and two sub-procedures 
C-bounded-prefix-growth and 
B-bounded-prefix-growth are presented in Figure 
A4.2 and A4.3, respectively. 
Protein-based mining 
The protein-based mining is designed for 
discovering protein functional regions of the query 
protein by referring to a set of its homologues. The 
default settings for W-patterns is: containing at least 
three blocks in one W-pattern and at least three 
conserved symbols in each block; requiring the 
length an intra-block gap is at most three, and the 
flexibility of an inter-block gap is no more than 50% 
with respect to the gap length observed on the query 
sequence. It is illustrated in Additional file 1 why 
this setting is suggested. WildSpan starts mining 
with the goal of finding the most highly supported 
W-patterns. For example, a support of 100% means 
that all the input set, including the query protein, 
satisfy the W-pattern. If such W-patterns do not exist, 
WildSpan decreases the setting gradually until at 
11
XVI 
5. Neuwald AF, Green P: Detecting patterns in 
protein sequences. J Mol Biol 1994, 
239(5):698-712.  
6. Rigoutsos I, Floratos A: Combinatorial pattern 
discovery in biological sequences: The 
TEIRESIAS algorithm. Bioinformatics 1998, 
14(1):55-67.  
7. Wang JT, Marr TG, Shasha D, Shapiro BA, Chirn 
GW: Discovering active motifs in sets of related 
protein sequences and using them for 
classification. Nucleic Acids Res 1994, 
22(14):2769-2775.  
8. Hsu CM, Chen CY, Liu BJ: MAGIIC-PRO: 
detecting functional signatures by efficient 
discovery of long patterns in protein sequences. 
Nucleic Acids Res 2006, 34(Web Server 
issue):W356-61.  
9. Hulo N, Bairoch A, Bulliard V, Cerutti L, De 
Castro E, Langendijk-Genevaux PS, Pagni M, Sigrist 
CJ: The PROSITE database. Nucleic Acids Res 
2006, 34(Database issue):D227-30.  
10. Wang J, Han J: BIDE: Efficient Mining of 
Frequent Closed Sequences. In ICDE '04: 
Proceedings of the 20th International Conference on 
Data Engineering. Edited by Anonymous 
Washington, DC, USA: IEEE Computer Society; 
2004:79.  
11. Wang K, Xu Y, Yu JX: Scalable sequential 
pattern mining for biological sequences. In 
Proceedings of the thirteenth ACM international 
conference on Information and knowledge 
management. Edited by Anonymous Washington, 
D.C., USA: ACM; 2004:178-187.  
12. Chakrabarti S, Anand AP, Bhardwaj N, 
Pugalenthi G, Sowdhamini R: SCANMOT: 
searching for similar sequences using a 
simultaneous scan of multiple sequence motifs. 
Nucleic Acids Res 2005, 33(Web Server 
issue):W274-6.  
13. Keskin O, Ma B, Nussinov R: Hot regions in 
protein--protein interactions: the organization 
and contribution of structurally conserved hot 
spot residues. J Mol Biol 2005, 345(5):1281-1294.  
14. Ogiwara A, Uchiyama I, Seto Y, Kanehisa M: 
Construction of a dictionary of sequence motifs 
that characterize groups of related proteins. 
Protein Eng 1992, 5(6):479-488.  
15. Pisanti N, Carvalho AM, Marsan L, Sagot M, 
Lisbon I, France IR: RISOTTO: Fast Extraction of 
Motifs with Mismatches. In Proceedings of the 7th 
Latin American Theoretical Informatics Symposium, 
3887 of LNCS. Edited by Anonymous Valdivia, Chile: 
Springer-Verlag; 2006:757-768.  
16. Marsan L, Sagot MF: Algorithms for extracting 
structured motifs using a suffix tree with an 
application to promoter and regulatory site 
consensus identification. J Comput Biol 2000, 
7(3-4):345-362.  
17. Carvalho AM, Freitas AT, Oliveira AL, 
Rhône-alpes I, Bernard UC, I L: A highly scalable 
algorithm for the extraction of cis-regulatory 
regions. In Proceedings of the 3rd Asia Pacific 
Bioinformatics Conference, volume 1 of Advances in 
Bioinformatics and Computational Biology. Edited 
by Anonymous Imperial College Press; 
2005:273-282.  
18. Klepper K, Sandve GK, Abul O, Johansen J, 
Drablos F: Assessment of composite motif 
discovery methods. BMC Bioinformatics 2008, 
9:123.  
19. Jonassen I: Efficient discovery of conserved 
patterns using a pattern graph. Comput Appl 
Biosci 1997, 13(5):509-522.  
20. Saqi MA, Sternberg MJ: Identification of 
sequence motifs from a set of proteins with related 
function. Protein Eng 1994, 7(2):165-171.  
21. Blekas K, Fotiadis DI, Likas A: Greedy mixture 
learning for multiple motif discovery in biological 
sequences. Bioinformatics 2003, 19(5):607-617.  
22. Frith MC, Saunders NF, Kobe B, Bailey TL: 
Discovering sequence motifs with arbitrary 
13 
RESEARCH Open Access
WildSpan: mining structured motifs from protein
sequences
Chen-Ming Hsu1, Chien-Yu Chen2* and Baw-Jhiune Liu3
Abstract
Background: Automatic extraction of motifs from biological sequences is an important research problem in study
of molecular biology. For proteins, it is desired to discover sequence motifs containing a large number of wildcard
symbols, as the residues associated with functional sites are usually largely separated in sequences. Discovering
such patterns is time-consuming because abundant combinations exist when long gaps (a gap consists of one or
more successive wildcards) are considered. Mining algorithms often employ constraints to narrow down the search
space in order to increase efficiency. However, improper constraint models might degrade the sensitivity and
specificity of the motifs discovered by computational methods. We previously proposed a new constraint model to
handle large wildcard regions for discovering functional motifs of proteins. The patterns that satisfy the proposed
constraint model are called W-patterns. A W-pattern is a structured motif that groups motif symbols into pattern
blocks interleaved with large irregular gaps. Considering large gaps reflects the fact that functional residues are not
always from a single region of protein sequences, and restricting motif symbols into clusters corresponds to the
observation that short motifs are frequently present within protein families. To efficiently discover W-patterns for
large-scale sequence annotation and function prediction, this paper first formally introduces the problem to solve
and proposes an algorithm named WildSpan (sequential pattern mining across large wildcard regions) that
incorporates several pruning strategies to largely reduce the mining cost.
Results: WildSpan is shown to efficiently find W-patterns containing conserved residues that are far separated in
sequences. We conducted experiments with two mining strategies, protein-based and family-based mining, to
evaluate the usefulness of W-patterns and performance of WildSpan. The protein-based mining mode of WildSpan
is developed for discovering functional regions of a single protein by referring to a set of related sequences (e.g.
its homologues). The discovered W-patterns are used to characterize the protein sequence and the results are
compared with the conserved positions identified by multiple sequence alignment (MSA). The family-based mining
mode of WildSpan is developed for extracting sequence signatures for a group of related proteins (e.g. a protein
family) for protein function classification. In this situation, the discovered W-patterns are compared with PROSITE
patterns as well as the patterns generated by three existing methods performing the similar task. Finally, analysis
on execution time of running WildSpan reveals that the proposed pruning strategy is effective in improving the
scalability of the proposed algorithm.
Conclusions: The mining results conducted in this study reveal that WildSpan is efficient and effective in
discovering functional signatures of proteins directly from sequences. The proposed pruning strategy is effective in
improving the scalability of WildSpan. It is demonstrated in this study that the W-patterns discovered by WildSpan
provides useful information in characterizing protein sequences. The WildSpan executable and open source codes
are available on the web (http://biominer.csie.cyu.edu.tw/wildspan).
* Correspondence: cychen@mars.csie.ntu.edu.tw
2Department of Bio-Industrial Mechatronics Engineering, National Taiwan
University, Taipei, 106, Taiwan
Full list of author information is available at the end of the article
Hsu et al. Algorithms for Molecular Biology 2011, 6:6
http://www.almob.org/content/6/1/6
© 2011 Hsu et al; licensee BioMed Central Ltd. This is an Open Access article distributed under the terms of the Creative Commons
Attribution License (http://creativecommons.org/licenses/by/2.0), which permits unrestricted use, distribution, and reproduction in
any medium, provided the original work is properly cited.
3
words for locally conserved regions limits their applica-
tion in the analysis of protein sequences, in which con-
servative substitutions are frequently observed. In
addition, the unlimited gap flexibility in model 4 also
results in noises.
The model 5 presented in Table 1 was previously pro-
posed in our recent work [24] The algorithm MAGIIC
utilizes a combination of intra- and inter-block gap con-
straints to discover structured motifs like ‘A-x-C-x(2,3)-
D-F-x(10,198)-R-G-x(0,1)-D’. Such patterns have its
Figure 1 An example of structued motifs This motif is observed on the protein Ferredoxin-NADP reductase [Swiss-Prot: P10933] and
additional 150 Oxidoreductase FAD/NAD(P)-binding proteins from the InterPro entry [InterPro: IPR001433]. The motif is consisted of three local
conserved regions ‘R-x-Y-S’, ‘G-x-G-x(2)-P’, and ‘Y-x-C-G’, interleaved by two large gaps x(54,96) and x(65,111). When these three pattern blocks are
mapped onto the 3D structure of Ferredoxin-NADP reductase, it is shown that all the three blocks are close to the FAD/NAD(P) binding site.
Pattern blocks are plotted in sticks using different colors. The long gap between the first and the second blocks (the second and the third
blocks) is plotted with ribbons in orange (purple). The ligands FAD and NADP are shown as ball-and-stick in blue and red, respectively.
Table 1 Constraint models of gapped motifs employed in previous studies
Gap constraint
models
Descriptions Examples of existing
algorithms
Model 1 At least L non-wildcards should be present in a pattern of maximum length of W. (e.g. ‘A-x-K-H-x(2)- E’) Teiresias [6] and
SPLASH [4]
Model 2 A gap with a maximum flexibility FL is allowed between any pair of pattern symbols; related
constraints: maximum number of flexible gaps, maximum product of each flexibility. (e.g. ‘A-x(2,3)-W-x-
H-(4,6)-E’)
Pratt [19]
Model 3 A gap with a minimum length of LB (e.g. LB = 1) and a maximum length UB (e.g. UB = 10) is allowed
in between any pair of pattern symbols. (e.g. ‘A-W-x(1,5)-H-x(4,10)-E’)
Ref. [35,36]
Model 4 A gap of any length (denoted as *) is allowed in between any pair of continuous words in a pattern;
related constraints: minimum length of continuous words. (e.g. ‘A-W-D-A-x(*)-H-E-D-x(*)-K-R’)
Ref. [7,11,14]
Model 5 a gap with a minimum length of LB and a maximum length of UB is allowed in between any pair of
symbols in a pattern block; a gap with a minimum length of LB” and a maximum length of UB” is
allowed in between any pair of pattern blocks; related constraints: minimum length of pattern block; (e.
g. MAGIIC [24]:’A-W-x(2,3)-H-x(45, 60)-E-x-D-x(1,2)-K’, a pattern block is underscored), RISOTTO [15] (e.g. R-
G-I-T-I-T-x(16,18)-P-G-H-A-D-F, one mismatch is allowed in a pattern block).
MAGIIC [24] and
RISOTTO [15]
Hsu et al. Algorithms for Molecular Biology 2011, 6:6
http://www.almob.org/content/6/1/6
Page 3 of 16
5
evaluated by investigating the accuracy of function clas-
sification by using W-patterns, compared with the
curated patterns provided in PROSITE and the patterns
discovered by three existing motif finding packages.
Protein-based mining
For protein-based mining, it has been demonstrated in
our previous study [28] that the W-patterns can be used
to facilitate identifying the binding interface of protein-
protein complexes. Here, we repeated the same evalua-
tion procedure by using the same benchmark, the
protein-protein docking benchmark 2.0 established by
the ZDOCK team [27], but recollect the homologue set
for each query protein from a newer version of sequence
databases (Oct. 10, 2008).
The complete procedures for identifying interacting
interfaces for a query protein are as follows:
(1) For a query protein chain, the input data (homolo-
gues of the query, 150 at most) fed to WildSpan was
obtained by performing PSI-BLAST [29] against Swiss-
Prot database [30] using BLOSUM62 substitution matrix
and an E-value cut-off of 0.01. The sequences nearly
identical to the query protein (sequence identity > 90%)
or with a low identity (sequence identity < 30%) were
excluded from the input data. If the homologues of
query protein are not sufficient in Swiss-Prot database
(< 5 homologues), the process of collecting homologues
was executed one more time against the non-redundant
(NR) database [29].
(2) Invoking WildSpan for pattern mining: at least one
W-pattern with five blocks is discovered for each query
protein. Different settings regarding the number of
blocks in a W-pattern have been tested from two to six,
while the setting ‘five’ achieved the best performance
(data not shown). The maximum relative flexibility is set
as 50%. Other parameter settings remain as default. The
discussions regarding how the default settings of Wild-
Span were determined can be found in Additional file 1.
Like other motif finding algorithms, it is challenging to
have all the parameters set to proper values in a single
run of WildSpan. A loose setting of parameters results
in too many patterns that confuse the users, while a
tight setting results in no patterns at all. To achieve the
goal of delivering a five-block W-pattern with a support
as high as possible for each query protein, we follow a
procedure of automated parameter tuning when invok-
ing WildSpan. A flowchart illustrating how WildSpan
was invoked with different parameter settings to com-
plete the mining task was provided in Figure A1.2 of
Additional file 1.
(3) In the end of motif finding, a consensus motif that
merges all the discovered W-patterns is examined for
evaluating the mining results for each query protein.
Among the 220 protein chains in this benchmark, 217
protein chains can find sufficient (≥5) homologues for
motif discovery. For all the 217 query proteins, Wild-
Span successfully found at least one motif containing
five blocks. There are in total 1011 motif blocks discov-
ered by WildSpan. Each block contains 10 residues in
average, including positions that allow for mutations. In
Figure 2, the distribution of the length of inter-block
gaps observed on the 217 query proteins is provided.
More than one-fourth (29%) of the inter-block gap have
a length longer than 30 residues. Though these blocks
are interleaved with long gaps in sequence, it is shown
in Table 2 that the conserved blocks in W-patterns
usually cluster together in space (92.7% of the discov-
ered pattern blocks contains an atom that is within 5Å
to an atom of another block belonging to the same W-
pattern). This proportion is significantly higher than
that of a randomly generated motif (80.1%) containing
five blocks, which each contains 10 residues.
The results above reveal that some of the residues in
W-patterns might be conserved for structure conforma-
tion. The next question to answer is whether the resi-
dues in W-patterns are conserved for function
conservation. In this regard, we further evaluate the
quality of a W-pattern by calculating the proportion of
interface residues in a W-pattern. It is shown in Table 3
that 23.6% of the residues in the W-patterns are close to
the binding partner in protein-protein complexes within
5Å. Since MSA is widely adopted to discover conserved
residues for the query protein with respect to its homo-
logues, the conserved residues detected by techniques
based on MSA were compared here. To compare with
MSA, we calculated the conservation scores based on
the alignment of Clustal-W using the iPDA web server.
In Table 3, it is shown that only 18.7% of the conserved
residues detected by MSA are interface residues. This
reveals that WildSpan is able to discover more con-
served residues that are related to protein function.
Family-based mining
In this experiment, we show the potential of the W-pat-
terns found by invoking the family-based mining mode
of WildSpan to serve as the diagnostic patterns for pro-
tein families. Instead of using only one pattern as the
classification rule, we propose using multiple patterns as
the discriminator. The PROSITE database contains diag-
nostic patterns for protein families, domains, and func-
tional sites. The ten largest PROSITE groups are
collected as the training data (PA10F), and the W-pat-
terns found by the family-based mining mode of Wild-
Span will be compared with the PROSITE patterns of
that input set. It is nominally required that each pattern
contains at least three pattern blocks, but patterns con-
taining nine or more exact symbols though only belong-
ing to one or two blocks will also be reported and
selected. When these ten PROSITE families were ana-
lyzed using WildSpan, the maximum relative flexibility
Hsu et al. Algorithms for Molecular Biology 2011, 6:6
http://www.almob.org/content/6/1/6
Page 5 of 16
7
ability when compared to the PROSITE patterns, we
observed that the W-patterns derived by WildSpan pro-
vide more complete and precise signatures regarding the
binding regions than the PROSITE patterns, as exempli-
fied in Figure 3. Complete results for protein function
classification are shown in Table A2.2 of Additional file
2. It is concluded that W-patterns perform similarly to
the curated patterns in PROSITE and outperforms the
motifs discovered by the other three constraint models.
We observed that the false positives reported in Table
4 are not really wrong predictions. For example, most of
proteins are annotated in another database (i.e. Pfam) as
the target function. In Table 5, we provided the details
about the number of false positives that can actually
find annotation from another database. These results
show the potential of the W-patterns in predicting pro-
tein functions with both high sensitivity and specificity.
This also explains why the E1DS server [26] performs
well in predicting catalytic sites and residues when
invoking the family-based mining mode of WildSpan to
construct the signature database.
Performance analysis
In this section, we investigate the efficiency of WildSpan
in identifying W-patterns based on the ten datasets in
PA10F.
Performance study on pattern pruning
To evaluate the efficiency of WildSpan with the pro-
posed pruning strategy, we evaluated the performance of
two versions of WildSpan algorithm as follows.
(a) WildSpan: the WildSpan algorithm with pruning
strategies in the second phase.
(b) WildSpan-NP: the WildSpan algorithm with
exhaustive search in the second phase by enumerating
all combinations.
The experimental results on PA10F with different
minimum support thresholds are shown in Figure 4.
For each dataset, the other parameters were set as:
min = 3, gmax = 3, nmin= 2, and fmax = 50%, which
denote the minimum size of a block, the maximum
length of an intra-block gap, the minimum number of
blocks in a W-pattern, and the relative flexibility con-
straint, respectively. As depicted in the Figure 4, Wild-
Span is in several orders of magnitude faster than
WildSpan-NP for all the cases. When the support
threshold is high, the performance curves of WildSpan
and WildSpan-NP are close. This is because fewer can-
didates of blocks exist for higher values of minimum
support. However, WildSpan with lower supports
achieves a better reduction in terms of search space
and consequently provides a better speedup, since
there are many candidate blocks and WildSpan-NP
enumerates all the combinations, which is computa-
tionally expensive.
On the other hand, the scalability of WildSpan is
investigated by studying the effect of varying length
and input size of input datasets. The employed dataset
is the largest family PS00301 of PA10F, which contains
1099 protein sequence members, {s1, s2,..., s1099}. We
randomly selected x proteins from PS00301 as the
input data, x Î {100, 200, ..., 1000, 1099}. These eleven
input sets were used to test the scalability of WildSpan
versus the number of input sequences. Figure 5(a)
shows the analysis, and the scalability of WildSpan is
Table 3 Comparison of the conservation information provided by WildSpan with that of MSA
Total number of residues
characterized as conserved
Number of interface residues in the group of
residues categorized as conserved
Proportion of interface residues in the group of
residues categorized as conserved
W-
patterns
10268 2351 23.6%
MSA 10638 2058 18.7%
We investigated the property of W-patterns at residue level by calculating the proportion of interface residues in W-patterns. The results are compared with the
conserved residues assigned by Clustal-W (MSA). The experiments were tested on the 217 of 220 protein chains (PP220) in the protein-protein benchmark (no
homologues can be found for the three cases: 1ml0_A, 1ml0_B, 1udi_I).
Table 4 Experimental results for protein family classification
Method/Database Time used in seconds Sensitivity Precision Specificity MCC1
PROSITE - 85.717 93.043 99.996 0.857
RISOTTO 18.635 47.003 99.957 100 0.470
Pratt 1598.3 81.507 94.159 99.995 0.815
Teiresias 0.908 76.798 0.2523 41.163 0.030
WildSpan (Family-based) 89.782 99.042 97.481 99.993 0.990
The table shows the performance of family-based mining of WildSpan on protein family classification based on PA10F. The results were compared to PROSITE
annotated patterns and three other pattern mining methods: RISOTTO, Teiresias, and Pratt. The input data was prepared by collecting proteins in the release 50.9
of UniProtKB/Swiss-Prot (235673 entries), and the discovered patterns were verified through all protein sequences in the release 2010/08 of UniProtKB/Swiss-Port
(518415 entries). Fragment and partially matches were excluded in both training and testing data. The parameter values of all the methods were set as default
1 Matthews correlation coefficient (MCC): (TP×TN - FP×FN)/SQRT( (TP+FP) × (TP+FN) × (FN+FP) × (TN+FN) )
Hsu et al. Algorithms for Molecular Biology 2011, 6:6
http://www.almob.org/content/6/1/6
Page 7 of 16
9
and detecting binding regions of protein-ligand inter-
actions [8,31-33]. To facilitate using the proposed
algorithm in future application, we implemented a
stand-alone program and provided a user-friendly web
server for WildSpan to help the biological community
in discovering functional regions of protein sequences
in a large scale. WildSpan was developed using C/C++
with the support of C++ Standard Template Library
under Linux, and has been tested on various GNU/
Linux platforms, including Red Hat 9.0 and Fedora 5
or higher. It should also work well with other UNIX-
like operating systems.
Figure 4 Performance comparison. This figure shows the running time of WildSpan versus WildSpan with no pruning (WildSpan-NP) on the
PA10F dataset.
Hsu et al. Algorithms for Molecular Biology 2011, 6:6
http://www.almob.org/content/6/1/6
Page 9 of 16
11
process to improve the performance. This section first
formally describes the problem statement and the asso-
ciated terminology. After that, the algorithm WildSpan
is described step by step.
Problem Statement
Given a query sequence Sq, a sequence database D, and
a parameter set θ regarding pattern block, W-pattern
and gap constraints, the algorithm will find the com-
plete set of closed W-patterns (the definition of closed
patterns is provided in Additional file 3) present in the
sequence database D such that each W-pattern satisfies
the constraints in θ and its matched sequences include
the query sequence Sq. The parameter set θ includes the
minimum support (minimum occurrences) of the
W-pattern, the minimum number of blocks in a W-
pattern, the minimum number of exact symbols in a
block, the maximum length of an intra-block gap
between two adjacent exact symbols in a block, and the
maximum flexibility of an inter-block gap between two
adjacent blocks in a W-pattern.
A block or W-pattern is called ‘satisfied’ if it agrees
with all the user-specified constraints. Each constraint
will be defined when it is first used in the description of
the algorithm.
Definition 1. (Sequence and sequence database)
A sequence over an alphabet Σ is a finite sequence of
symbols belonging to Σ, e.g., protein sequence is
sequence over a 20-letter alphabet. For any sequence S=
〈a1...am〉, a sequence Sx is called a subsequence of S,
if Sx can be obtained by deleting zero or more symbols
from sequence S. We use S[i..j] to denote the substring
〈ai...aj〉 (contiguous subsequence) of S, which starts at
position i and ends at position j of S, for 1 ≤ i ≤ j ≤ m.
In particular, S[1..i] is the prefix of sequence S that ends
at position i, and S[i..m] is the suffix of sequence S that
begins at position i. The length of sequence S, denoted
as m, is defined as the number of symbols in S. An
input sequence database D contains a set of sequences.
In general, the input sequence database is a set of pro-
tein sequences that are presumed to be functionally or
evolutionarily related to the query protein (the first
sequence in D). Patterns found in protein sequences can
be expressed in PROSITE language. For our purpose we
need a more formal definition as below.
Definition 2. (Pattern)
A pattern P can be written as P = a1-x(i1, j1)-a2- x(i2,
j2)-...-x(ip-1,jp-1)-ap in PROSITE language, where a1,...,ap
are the exact symbols of P, and x(ix, jx) are the wildcard
regions (i.e. gaps) of P for ix ≤ jx (1 ≤ x <p). A pattern Q
is a sub-pattern of P if Q can be obtained by deleting
one or more exact symbol(s) from P. Conversely, P is a
super-pattern of Q. We say that a sequence S matches
the pattern P if S contains a substring that can be
derived from P by substituting each wildcard symbol ‘x’
by an arbitrary symbol from Σ. The set S/P stands for
all the substrings of S that match pattern P. The nota-
tion x(n,m), 0 ≤ n <m, is used for a wildcard region with
minimum length gap of n and maximum length gap of
m, and x(n) stands for a rigid-length n gap. The wild-
card “-x(n)-” is simplified as “-” if n = 0, and is repre-
sented as x if n = 1.
The first constraint of the algorithm WildSpan is the
minimum support constraint l.
Definition 3. (Minimum support constraint)
The support of a satisfied pattern P (block or W-pat-
tern) is defined as the percentage of the distinct input
sequences S Î D such that S matches P under the con-
straints in θ. Such matched sequences are called sup-
porting sequences of P. On the other hand, the non-
matched sequences of P in D are called excluded
sequences of P. A pattern P will be reported if and only
if its support is greater than or equal to the minimum
support constraint l and satisfy all constraints in θ.
The minimum support constraint is critical to the
quality of mining results, but it is difficult to determine
in advance since the minimum support of satisfied pat-
terns cannot be accessed before they are discovered. A
lower value on this constraint yields more patterns. In
this regard, this parameter can be set in the following
way: WildSpan begins with a large support, e.g. 100%,
and decreases this setting gradually until a desired num-
ber of satisfied patterns have been found.
Phase 1: identifying rigid-gapped blocks The first
phase of the WildSpan algorithm finds all of the closed
blocks with a support >l and which satisfy the con-
straints concerning a block. The definitions of a block
and related constraints are as follows.
Definition 4. (Block and intra-block gap)
A block (short for pattern block) Ψ = a1-x(i1)-a2-x(i2)-
...-x(ib-1)-ab is a short pattern in which only rigid-length
gaps are allowed. The size of a block is defined as the
number of exact symbols inside it. The gap between any
two adjacent symbols within a block is called an intra-
block gap. The maximum length of an intra-block gap is
set by the constraint gmax and the minimum size of a
block is specified by the constraint min.
To grow a block from scratch when gaps are consid-
ered, we invoke a procedure called prefix-growth with
bounded gaps (C-bounded-prefix-growth). The procedure
grows the prefix of a pattern and makes it longer by
building and scanning its projected database under the
rigid-length gap constraints.
Definition 5. (Projected database)
Let Ψ be a growing block, the projected database of Ψ is
a complete collection of suffix of sequences ξ, where
〈cξ〉 is a suffix of a given sequence S Î D, and c Î
S/Ψ.
Hsu et al. Algorithms for Molecular Biology 2011, 6:6
http://www.almob.org/content/6/1/6
Page 11 of 16
13
Figure 6 A running example. (a) A sample input sequence database (SDB) containing Sq (reference sequence/query sequence), Sx and Sy. The
solid arrows show the scanning range of the bounded-prefix-growth procedure under the intra-block gap constraint (gmax = 2) with respect to
the pattern block ‘C-x-H’ (C - H) marked by black frames. The red, blue and green solid arrows denote the scanning residues with ‘C-x-H’ as the
prefix and with gap lengths of zero, one, and two, respectively. Two other satisfied pattern blocks are marked by distinct background colours.
The symbol ‘-’ in the sequences represents the residues that cannot contribute to forming any patterns in this example; (b) Three satisfied
pattern blocks; (c) Three satisfied W-patterns; (d) An example of how the maximum relative flexibility with respect to the reference sequence Sq
is employed to discover W-patterns.
Hsu et al. Algorithms for Molecular Biology 2011, 6:6
http://www.almob.org/content/6/1/6
Page 13 of 16
15
large irregular gaps is ensured by exploiting the prefix
anti-monotone characteristic of the new constraint
model.
Based on the above algorithm description, we have the
pseudo-code of WildSpan as shown in Figure A4.1 of
Additional file 4, and two sub-procedures C-bounded-
prefix-growth and B-bounded-prefix-growth are pre-
sented in Figure A4.2 and A4.3, respectively.
Protein-based mining
The protein-based mining is designed for discovering
protein functional regions of the query protein by refer-
ring to a set of its homologues. The default settings for
W-patterns is: containing at least three blocks in one
W-pattern and at least three conserved symbols in each
block; requiring the length an intra-block gap is at most
three, and the flexibility of an inter-block gap is no
more than 50% with respect to the gap length observed
on the query sequence. It is illustrated in Additional file
1 why this setting is suggested. WildSpan starts mining
with the goal of finding the most highly supported W-
patterns. For example, a support of 100% means that all
the input set, including the query protein, satisfy the W-
pattern. If such W-patterns do not exist, WildSpan
decreases the setting gradually until at least one satisfied
W-pattern has been found. All the results reported in
this study are based the default settings, though the
users can tighten or relax the constraints to improve the
mining quality in different applications.
Family-based mining
For applications of finding family signatures, the limita-
tion of the proposed constraint model is that it might
not be possible to find a satisfied W-pattern that
matches all of the input sequences in a single run of
protein-based mining. Hence, we proposed an iteratively
mining strategy, family-based mining, for collecting a set
of satisfied W-patterns that together serve as the diag-
nostic W-patterns for the input sequences. It is designed
to proceed in the following manner: in the first run of
WildSpan, the sequence of median length is selected
from the input set as the query sequence. At the end of
the first run, the W-pattern with the maximum support
is picked. If not all of the input sequences match the
selected W-pattern (such remaining sequences that do
not match any of the selected W-patterns are called
excluded sequences), the median-length sequence from
the excluded sequences are assigned as the query
sequence in the next call of WildSpan. In the second
run, the W-pattern that matches the most excluded
sequences of the first run will be picked. This procedure
is repeated until the set of selected W-patterns covers
all of the input sequences or no more W-patterns can
be found from the remaining sequences.
Availability and requirements
Project name: WildSpan
Project home page: http://biominer.csie.cyu.edu.tw/
wildspan
Mirror site: http://biominer.bime.ntu.edu.tw/wildspan
Operating system(s): Linux
Programming language: C/C++
Other requirements: none
License: GNU GPL
Additional material
Additional file 1: The analysis on the effect of changing parameter
settings. This file provides the analysis on the effect of changing
parameter settings of WildSpan on the mining results.
Additional file 2: Experimental datasets and results for protein
family classification. This file provides the information of input datasets
and complete results for the experiments of protein family classification.
Additional file 3: Closure checking schema. This file provides the
description of the closure checking schema employed by WildSpan to
generate concise results.
Additional file 4: The complete pseudo codes for the WildSpan
algorithm. This file provides the complete pseudo codes for the
WildSpan algorithm.
Acknowledgements
The authors thank the financial support of National Science Council under
contract number 98-2221-E-002-137-MY2, 99-2627-B-002-004, and 99-2221-E-
231-030.
Author details
1Department of Computer Science and Information Engineering, Ching Yun
University, Jung-Li, 320, Taiwan. 2Department of Bio-Industrial Mechatronics
Engineering, National Taiwan University, Taipei, 106, Taiwan. 3Department of
Computer Science and Engineering, Yuan Ze University, Jung-Li, 320, Taiwan.
Authors’ contributions
CMH designed and implemented the algorithm, performed all experiments
and drafted the manuscript. CYC provided guidance on design of the
methodology, participated in the discussion of biological significances and
revised the manuscript. BJL aided in the guidance on the study and
provided financial support. All authors read and approved the final
manuscript.
Competing interests
The authors declare that they have no competing interests.
Received: 15 April 2010 Accepted: 31 March 2011
Published: 31 March 2011
References
1. Livingstone CD, Barton GJ: Protein sequence alignments: a strategy for
the hierarchical analysis of residue conservation. Comput Appl Biosci 1993,
9(6): 745-756.
2. Casari G, Sander C, Valencia A: A method to predict functional residues in
proteins. Nat Struct Biol 1995, 2(2): 171-178.
3. Schueler-Furman O, Baker D: Conserved residue clustering and protein
structure prediction. Proteins 2003, 52(2): 225-235.
4. Califano A: SPLASH: structural pattern localization analysis by sequential
histograms. Bioinformatics 2000, 16(4): 341-357.
5. Neuwald AF, Green P: Detecting patterns in protein sequences. J Mol Biol
1994, 239(5): 698-712.
Hsu et al. Algorithms for Molecular Biology 2011, 6:6
http://www.almob.org/content/6/1/6
Page 15 of 16
17
 
A1-1 
Additional File 1: supplemental data 
WildSpan: mining structured motifs from protein sequences 
Chen-Ming Hsu1, Chien-Yu Chen2,* and Baw-Jhiune Liu3 
1Department of Computer Science and Information Engineering, Ching Yun University, Jung-Li, 
320, Taiwan, R.O.C., 2Department of Bio-Industrial Mechatronics Engineering, National 
Taiwan University, Taipei, 106, Taiwan, R.O.C., and 3Department of Computer Science and 
Engineering, Yuan Ze University, Jung-Li, 320, Taiwan, R.O.C. 
 
This supplement provides the analysis and suggestions on the parameter settings of WildSpan. 
In this document, three important parameters were analyzed to investigate to their effects on the 
mining results of WildSpan: (1) the upper-bound of an intra-block gap: γ max; (2) the minimum size of 
a pattern block: kmin; and (3) the maximum flexibility of an inter-block gap: fmax. The study is based 
on a dataset of the family of oxidoreductase FAD/NAD(P)-binding proteins [InterPro entry: 
IPR001433], which comprises 295 proteins between each pair of which the overall sequence identity 
is 30%. 
As shown in Figure A1.1(a), more hit-closed pattern blocks (the definition of ‘hit-closed’ can be found 
in Additional file 3) are generated by relaxing the constraint of pattern blocks, i.e., increasing the 
upper bound on an intra-block gap γmax. However, the number of support-closed W-patterns (the 
19
 
A1-3 
twice with different combinations of positions. We argue that a real functional motif seldom match a 
protein sequence twice with different positions. This phenomenon demonstrates that the mining 
results may contain some false positives. In other words, the quality of the derived patterns is 
suspected. 
In summary, for the first run of WildSpan, the three parameters discussed above are suggested to set 
as follows: (1) the upper-bound of an intra-block gap, γ max = 3; (2) the minimum size of a pattern 
block, kmin = 3; and (3) the maximum flexibility of an inter-block gap, fmax = 50%. For the other 
parameters of WildSpan, the minimum support threshold (λ) and the minimum number of blocks in a 
W-pattern (nmin), the released package of WildSpan will automatically adjust the settings according to 
property of the input data. That is, λ is adjusted accordingly in order to find at least one satisfied 
W-patterns containing nmin blocks. The automated tuning procedures are illustrated in Figure A1.2. 
 
 
21
 
A1-5 
 
Figure A1.2 – Automated parameter tuning of WildSpan. 
23
 
A2-2 
Table A2.1 – Ten input datasets fed to different motif finding algorithms for generating 
sequence motifs for protein family classification (PA10F) 
PROSITE 
entry 
accession 
number 
Description 
Number 
of input 
sequences 
Average 
sequence 
identity 
Average 
sequence 
length 
PS00301 GTP-binding elongation factors signature 1099 34% 586 
PS00469 Nucleoside diphosphate kinases active site 320 48% 167 
PS00455 Putative AMP-binding domain signature 296 26% 973 
PS00111 Phosphoglycerate kinase signature 241 42% 410 
PS00113 Adenylate kinase signature 235 39% 218 
PS01071 grpE Protein Signature 201 32% 203 
PS00627 GHMP kinases putative ATP-binding domain 196 20% 341 
PS00387 Inorganic pyrophosphatase signature 120 38% 208 
PS00112 ATP:guanido phosphotransferases active site 83 43% 390 
PS00485 Adenosine and AMP deaminase signature 70 29% 414 
Average - 296.1 35% 391 
* The training datasets were collected from the release 50.9 of UniProtKB/Swiss-Prot (235673 entries) according to the 
PROSITE cross-reference annotations. 
25
 
A2-4 
Table A2.2 – Experimental results for protein family classification (continue) 
PS00455 
PROSITE None 607 509261 23 / 0 55 91.692 96.349 99.995 0.94 
RISOTTO 68.15 187 509284 0 / 0 475 28.248 100 100 0.531 
Pratt 13773 387 509284 0 / 0 275 58.459 100 100 0.764 
Teiresias 5.89 657 159224 350060/NA 5 99.245 0.187 31.264 0.025 
WildSpan 
(Family-based) 630.6 655 509169 115 / 6 7 98.943 85.065 99.977 0.917 
PS00111 
PROSITE None 619 509241 0 / 0 86 87.801 100 100 0.937 
RISOTTO 3.13 535 509239 2 / 1 170 75.887 99.628 100 0.869 
Pratt 588 694 509231 10 / 1 11 98.440 98.580 99.998 0.985 
Teiresias 0.23 697 246229 263012/NA 8 98.865 0.264 48.352 0.036 
WildSpan 
(Family-based) 10.06 705 509240 1 / 1 0 100 99.858 100 0.999 
 
27
 
A2-6 
Table A2.2 – Experimental results for protein family classification (continue) 
PS00627 
PROSITE None 480 509413 3 / 0 50 90.566 99.379 99.999 0.949 
RISOTTO 64.71 44 509416 0 / 0 486 8.302 100 100 0.288 
Pratt 588 327 509416 0 / 0 203 61.698 100 100 0.785 
Teiresias 0.2 507 128376 381040/NA 23 95.660 0.133 25.201 0.02 
WildSpan 
(Family-based) 64.71 529 509399 17 / 4 1 99.811 96.866 99.997 0.983 
PS00387 
PROSITE None 123 509713 102 / 0 8 93.893 54.667 99.980 0.716 
RISOTTO 0.80 67 509815 0 / 0 64 51.145 100 100 0.715 
Pratt 11 97 509815 0 / 0 34 74.046 100 100 0.86 
Teiresias 0.04 131 478476 31339/NA 0 100 0.416 93.853 0.063 
WildSpan 
(Family-based) 1.55 130 509815 0 / 0 1 99.237 100 100 0.996 
 
29
 
A2-8 
NA: information not available because the number of false positives is too large to manually validate protein function. 
Table A2.2 – Experimental results for protein family classification (continue) 
Average 
PROSITE none 695.8 509165.6 28.9/0 69 85.717 93.043 99.996 0.857 
RISOTTO 18.635 371.4 509181 0.3/0.2 393.4 47.003 99.957 100 0.470 
Pratt 1598.3 669     509154 27.7/1.3 95.8 81.507 94.159 99.995 0.815 
Teiresias 0.908 599.6 194393 212953/NA 11.1 76.798 0.2523 41.163 0.030 
WildSpan 
(Family-based) 89.782 761.2 509148  33.5/23.6 3.6 99.042 97.481 99.993 0.990 
31
A3-2 
First, we define the super-pattern as below. 
Definition 1. (Super-pattern) Let a pattern P = a1-x(i1, j1)-a2-x(i2, j2)-…-x(ip–1, jp–1)-ap, the notation 
Pm..n= am-x(im, jm)-am+1-x(im+1, jm+1)-…-x(in–1, jn–1)-an is used to denote the contiguous sub-pattern of 
P, which starts at the position of the m-th symbol and ends at the position of the n-th symbol of P, for 
1 ≤ m ≤ n ≤ p. A pattern P is a super-pattern of Q if Q can be obtained by deleting pattern symbols ak 
(1 ≤ k ≤ p) from P, and in addition, one of following conditions holds: (1) P=Q-x(ip–1, jp–1)-ap (ap is 
the last symbol in P); (2) P=a1-x(i1, j1)-Q (a1 is the first symbol in P); (3) ∃k (1 < k < p), Q = 
P1..k–1-x(ik–1+ik+1, jk–1+jk+1)-Pk+1..p.        
Then we can define the concepts of support-closed and hit-closed. 
Definition 2. (Closed pattern) A pattern P is support-closed if there is no super-pattern of P with the 
same number of supporting sequences in the input database. If there exists no super-pattern of P not 
only having the same support but also with the same appearing positions or anywhere else in the 
database, we call the pattern is hit-closed pattern.   
Support-closed is not effective as expected when growing the candidate blocks, because it ignores the 
all of the occurrences information of patterns. Therefore, we define another type of closure property 
that is more suitable for identifying blocks. The hit-closed closure checking scheme will be applied to 
the first phase of growing blocks, and support-closed closure checking scheme will be used in the 
pattern phase to reduce the number of W-patterns derived. The kernel method of closure checking is 
33
Additional file 4: supplemental data 
WildSpan: mining structured motifs from protein sequences 
Chen-Ming Hsu1, Chien-Yu Chen2,* and Baw-Jhiune Liu3 
1Department of Computer Science and Information Engineering, Ching Yun 
University, Jung-Li, 320, Taiwan, R.O.C., 2Department of Bio-Industrial 
Mechatronics Engineering, National Taiwan University, Taipei, 106, Taiwan, 
R.O.C., and 3Department of Computer Science and Engineering, Yuan Ze 
University, Jung-Li, 320, Taiwan, R.O.C. 
 
This supplement provides the complete pseudo codes for the WildSpan algorithm. 
The WildSpan algorithm (Figure A4.1) aims to discover W-patterns with a two-phase 
mining strategy. In the first phase, WildSpan invokes the Subroutine 1 (Figure A4.2) 
to obtain the complete set of hit-closed pattern blocks (the definition of ‘hit-closed’ 
can be found in Additional file 3). This subroutine grows pattern blocks satisfying 
both block and intra-block gap constraints by recursively calling the subroutine 
C-bounded-prefix-growth. After that, in the second phase, the Subroutine 2 (Figure 
A4.3) is used to discover the complete set of support-closed long patterns (the 
definition of ‘support-closed’ can be found in Additional file 3) containing two or 
more pattern blocks and satisfying the inter-block gap constraint by executing the 
procedure B-bounded-prefix-growth recursively to connect frequent pattern blocks 
found in the first phase with large irregular gaps. The supplementary notations and 
35
Notation 9. (Size of W-pattern) The size of a W-pattern is defined as the number of 
exact symbols inside it, denoted as |P|A-NUM. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
37
Subroutine 1 C-bounded-prefix-growth(B, D|B, γ, γmax, kmin, nmin, BS, PS) 
Input: (1) B is a growing block, (2) D|B is B-pseudo-projected database, (3) γ is a 
scanning rigid length of gap. 
Output: The set of hit-closed blocks BS and the set of support-closed W-pattern 
PS. 
1: if B = ∅ do 
2:   scan D once to find the set A of length-1 symbols a ∈ A such that the query 
protein Sq and at least λ of the support sequences contain a. The a-pseudo 
projected database D|a for ∀ a∈A is also constructed at the same time. 
3: else if 
scan the symbols at γ + 1 position in each projected sequences of D|B with 
rigid gap length γ to find the set A of frequent symbols such that the query 
sequence Sq and at least λ supporting sequences contain the symbol. The 
〈B-x(γ)-a〉-pseudo projected database D|B-x(γ)-a for ∀ a ∈ A are also 
constructed simultaneously. 
4: done 
5: for each symbol a ∈ A do 
6:    for each fixed-length gap γ ' ∈ {0,..,γmax} do 
7:       if B = ∅ do  
8:           B' = a; 
9:       else 
10:           B' ← B-x(γ)-a; 
11:       done 
12:       call C-bounded-prefix-growth(B', D|B', γ ', γmax, kmin, nmin, BS, PS); 
13:    done 
14:    if |B|A-NUM ≥ kmin do 
15:        if !∃ y ∈ BS such that B ⊂SP y and HIT(B)D = HIT(y)D do 
16:            Hit-closure-checking(BS)B; 
17:            for each b ∈ Instances(Sq)B do BS ← BS ∪ b; 
// the block B may has two or more matched instances in Sq. 
18:            if |B|NUM ≥ (kmin×nmin) do 
19:                 if !∃ p∈ PS such that B ⊂SP p and SUP(B)D = SUP(p)D do 
20:                     Support-closure-checking(PS)B;  
21:                     PS ← PS ∪ B; 
22:                 done 
23:            done 
24:        done 
25:   done 
26: done 
27: return; 
 
Figure A4.2 – The pseudocode of sub-procedure C-bounded-prefix-growth 
39
Figure A4.3 –The pseudocode of sub-procedure B-bounded-prefix-growth 
41
XIX 
 
國科會補助計畫衍生研發成果推廣資料表 
日期：   年  月  日 
國科會補助計畫 
計畫名稱： 
計畫主持人：         
計畫編號：             領域： 
研發成果名稱 
（中文） 
（英文） 
成果歸屬機構  發明人 (創作人) 
 
技術說明 
（中文） 
 
 
 
（200-500 字） 
（英文） 
產業別 
 
技術/產品應用範圍 
 
技術移轉可行性及預期
效益 
 
     註：本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。 
 
 
 
附件三 
 
XXI 
 
國科會補助專題研究計畫項下赴國外(或大陸地區)出差或研習心得報告 
                                     日期：   年   月   日 
一、國外(大陸)研究過程 
二、研究成果 
三、建議 
四、其他 
 
 
 
 
 
 
 
 
 
計畫編號 NSC  －    －  －    －    － 
計畫名稱  
出國人員
姓名  
服務機構
及職稱  
出國時間  年 月 日至  年 月 日 出國地點  
附件五 
 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/08/09
國科會補助計畫
計畫名稱: 非鄰近保留模式探勘於多功能蛋白質序列之研究
計畫主持人: 許振銘
計畫編號: 99-2221-E-231-030- 學門領域: 生物資訊
無研發成果推廣資料
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
參與計畫人
力 
（外國籍） 
專任助理 0 0 100%
人
次
 
其他成果 
(無法以量化表
達之成果如辦
理學術活動、獲
得獎項、重要國
際合作、研究成
果國際影響力
及其他協助產
業技術發展之
具體效益事項
等，請以文字敘
述填列。) 
一篇期刊已發表如下(並已公開源碼開放使用)：  
 
Chen-Ming Hsu, Chien-Yu Chen*, and Baw-Jhiune (Mar 2011) WildSpan: mining 
structured motifs from protein sequences. Algorithms for Molecular Biology, 
6(1):6. [PubMed] [SCI, 2009 I.F.: 1.821, Rank 16/29 in subject category: 
MATHEMATICAL &amp； COMPUTATIONAL BIOLOGY] 
http://biominer.csie.cyu.edu.tw/wildspan 
 
一篇應用於預測 TFBS 之技術報告已完成，且完成之 web server 亦提供線上免費使用：
http://biominer.csie.cyu.edu.tw/etfbs 
 
一篇結合支持向量機與共同保留模式探勘來預測RNA-binding residues之技術報告已
完成。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）
人數 0 
 
