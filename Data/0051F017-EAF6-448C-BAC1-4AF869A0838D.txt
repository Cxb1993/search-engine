hand, the users of these mobile devices should 
consider some security issues such as data 
confidentiality, data integrity, and availability 
before adopting cloud services. 
Considering various limitations of mobile devices and 
security issues in cloud environments, we focus on 
protocols which are feasible for applications in 
those environments. Among these applications, the 
cloud storage catches our attention, because it 
becomes more and more popular. We have some services 
like Amazon S3 for business； we also have some other 
services such as Dropbox for personal usage nowadays. 
Thus, our research focuses on the security issues of 
cloud storage. 
In the second year of this project, we proposed an 
efficient provable data possession protocol which is 
efficient enough for on mobile devices such as 
Android smart phones. Our protocol supports dynamic 
operation, which means that the owner does not have 
to start over the whole protocol for a single 
insertion, deletion, or modification on part of their 
data. 
Moreover, the proposed system supports additional 
batch verification. With batch verification, one can 
verify the integrity of huge amount of files at the 
same time. 
 
英文關鍵詞： Cloud Computing, Cloud Storage, High Efficiency, 
Integrity, Dynamic Operation 
 
  2
如 保 密 性  (Confidentiality) 、 整 體 性 
(Integrity) 和可得性 (Availability) 等。  
有鑒於行動裝置的種種限制，以及雲
端運算帶來的各種安全議題，本子計畫的
目標是對各種常見的密碼協定進行研究，
進而發展出適合用於行動裝置與雲端運算
環境的密碼協定。如：輕量化的認證機制、
雲端儲存證明等密碼協定。其中，由於雲
端儲存服務的日益普及 (從企業及各種組
織使用的 Amazon S3 以至於一般個人使
用的 Dropbox)，故我們的研究重心著重於
雲端儲存的安全議題上。 
 
關鍵詞：雲端運算、雲端儲存、高效率協
定、整體性、動態操作 
 
Abstract 
The rise of cloud computing and the 
ubiquitous wireless network make it possible 
to access web-based services via mobile 
devices such as smart phones and tablet PCs 
for the general public. Thus the mobile 
devices become important media to access 
cloud services. However, because of the lack 
of control over resources such as 
computational power and storage space, there 
come some new security issues. On one hand, 
the resource limited mobile devices can 
barely afford highly complex cryptographic 
computations, heavy communication, or huge 
storage space. Thus, these devices have to 
count on the resources provided by various 
clouds. On the other hand, the users of these 
mobile devices should consider some 
security issues such as data confidentiality, 
data integrity, and availability before 
adopting cloud services. 
Considering various limitations of 
mobile devices and security issues in cloud 
environments, we focus on protocols which 
are feasible for applications in those 
environments. Among these applications, the 
cloud storage catches our attention, because 
it becomes more and more popular. We have 
some services like Amazon S3 for business; 
we also have some other services such as 
Dropbox for personal usage nowadays. Thus, 
our research focuses on the security issues of 
cloud storage. 
In the second year of this project, we 
proposed an efficient provable data 
possession protocol which is efficient enough 
for on mobile devices such as Android smart 
phones. Our protocol supports dynamic 
operation, which means that the owner does 
not have to start over the whole protocol for 
a single insertion, deletion, or modification 
on part of their data. 
Moreover, the proposed system supports 
additional batch verification. With batch 
verification, one can verify the integrity of 
huge amount of files at the same time. 
 
Keywords: Cloud Computing, Cloud 
Storage, High Efficiency, Integrity, Dynamic 
Operation 
 
二、緣由與目的 
人類使用資訊設備的模式一直隨著科
技在演進。以個人電腦時代為例：資料、
輸入出介面、運算單元都統合在使用者面
前的個人電腦。在網際網路發達後，資料
開始跨越個人電腦、散佈到網際網路之
中。進入行動通訊時代之後，智慧型手機
具有輸入出介面和相當的運算能力，本身
攜帶個人電腦和網路上所沒有的資料 (使
用者位置、通聯紀錄等)。再進一步，網際
網路上的社群網路成形後，社群網站本身
為存放個人資料與社會關係的資料庫。 
雲端運算在當前的 IT 產業中已漸漸
取代單一伺服器成為資料處理引擎。雲端
計算是計算機科學界當前最熱門的研究課
題，一般皆認為此技術的發展將會給社會
帶來相當重大的影響及改變，而大部分產
學界學者專家對雲端計算技術是否能普
及，最大的挑戰當屬如何在雲端計算中確
保資訊安全。雲端計算是根基於通信頻寬
充裕、伺服器計算能力日益強大的前提
下，使用者的終端裝置將會變得輕薄短
小，並僅供顯示用途及微量的簡易運算，
大部份的計算都會在「雲端」的伺服器上
面進行。今天 Google Inc. 挾帶著龐大的伺
  4
動網路運營商、晶片供應商、軟體公司、
手機製造商共同創建了一個新的手機軟體
聯盟- Open Handset Alliance (OHA)，強調
一個開放的手機作業系統平台可以給消費
者更優異性能的手機。一週後 OHA 發表 
Android SDK 並開放下載，同時提供一千
萬美金做為 Android Developer Challenge 
的獎金用途。但其實 Android 的出現，不
只是代表這世界多了一個手機作業系統，
而是第一個完全開放的手機作業系統。任
何人只要可連上網路都能自行下載Google 
Android 的手機程式，自行編譯或修改後
編譯出下載至使用 Google Android  的手
機硬體。若沒有手機可供下載測試也可以
使用 SDK 內建的模擬器模擬一番。 
 
UsersServices Social Networks
Mobile
Devices
Social Network Sites
Others
Cloud Computing
Business
Mobile devices has become the major platform to access various services, to deal with 
business, or to gain connection with other people.
 
Figure 1. 行動裝置成為使用者操作服務與社 
群的平台。 
 
Google Android 的軟體架構如下圖所
示，以下為了方便討論，我們將搭載 
Google Android 作業系統的手機簡稱為 
Android 手機： 
 
Figure 2. Android 軟體架構。 
1. Application：Android手機上一系列
的核心應用程式，都以 Java 寫就，如地圖
服務、電子郵件、簡訊、瀏覽器、通訊錄、
以及最基本的撥號程式等等 。 
2. Application Framework：提供所有想
要在 Android 手機上撰寫程式的設計師
有關的 API 類別程式庫及架構。 
3. Libraries：提供服務給 Application 
Framework，這些服務包括二維及三維繪圖
的引擎、加密模組、簡易版資料庫、瀏覽
器模組及基本的 libc 程式庫。 
4. Android Runtime：Java 的核心模組
以及一個 Dalvik 虛擬機器。 
5. Linux Kernel：基於 Linux Kernel 2.6 
修改，提供整個系統一致的安全性及最基
本的作業系統操作能力。 
Google Android 企圖解構當今由行動
網路運營商所掌握的通路優勢，讓所有手
機產業鏈上的公司都能夠在  Google 
Android 的架構上貢獻出該公司的服務而
得到應有的報酬，這就是所謂的共生生態
系統。而此理想有賴於授權系統的良好設
計，Google Android 使用 Apache version 2 
License ， 而 非  Linux 一 般 所 使 用 的 
GPL，旨在提供開源碼軟體成為商業軟體
的 一 座 橋 梁 。 但 即 使 是  Apache v2 
License，該有的專利商標貢獻聲明仍然是
一個也不能少。 
目前  Android 不但已經成功在手機
上運行，更已經有 Netbook 的生產商選擇
使用 Android 取代微軟視窗系統甚至是 
Linux 作業系統，成為 NetBook 的作業系
統。由於 Android 的開放性與高度可移植
性，在未來將有更多嵌入式系統選擇以 
Android 做為其作業系統。 
有鑒於行動裝置的種種限制，以及雲
端運算帶來的各種安全議題，本子計畫的
目標是對各種常見的密碼協定進行研究，
進而發展出適合用於行動裝置與雲端運算
環境的密碼協定。如：輕量化的認證機制、
  6
 
Figure 7. SoKey 祕密通訊系統：使用連絡人進
行金鑰建立。 
 
Figure 8. SoKey 祕密通訊系統：連絡人金鑰建
立成功。 
 
Figure 9. SoKey 祕密通訊系統：使用社群地點
建立金鑰。 
 
Figure 10. SoKey 祕密通訊系統：社群地點金
鑰建立成功。 
  8
 
Figure 16.  加密檔案系統目錄結構。 
 
第二年 
而在計畫的第二年中，我們提出了兼
顧資料保密性、整體性及支援動態操作 
(Dynamic Operation) 的儲存證明協定。雲
端儲存協定本身的目的即為提供使用者對
於其儲存於雲端伺服器上之資料的整體性
確認。除此之外，我們藉由零知識證明協
定 (Zero-Knowledge Proof) 的協助，提供
雲端儲存伺服器能在不揭露儲存資料內容
的情況下向使用者證明其儲存資料之整體
性的能力；藉此功能，使用者不需要額外
對其資料進行加解密處理，也便於在行動
裝置上使用。另外，對於動態操作 (諸如
插入、修訂、刪除等操作) 的支援，使得
使用上並非必定要將整份完整的資料取
回，也減輕了行動裝置在通訊上的負擔。
同時，我們並實作了此協定的原型系統  
(NIC Storage)。 
以下為 NIC Storage 的系統情境圖與
系統運作時之 PC 端與手機端系統截圖： 
 
Figure 17. 儲存證明情境，以線上購買點數為
例。 
 
Figure 18. NIC Storage：檔案區塊切割。 
 
Figure 19. NIC Storage：儲存證明生成。 
 
Figure 20. NIC Storage：PC 端驗證程式完整性
驗證成功。 
 
Figure 21. NIC Storage：PC 端驗證程式完整性
驗證失敗。 
  10
 
Figure 26. NIC Storage：手機端驗證程式檔案
佈建畫面 (3)。 
 
Figure 27. NIC Storage：手機端驗證程式完整
性驗證成功。 
 
Figure 28. NIC Storage：手機端驗證程式完整
性驗證失敗。 
 
Figure 29. NIC Storage：手機端驗證程式取得
檔案列表。 
  12
使得用戶無法向第三者證明雲端的不當行
為。而 Shacham 人在 2008 提出了另一個
較為輕量的協定 [12]，但由於其依舊仰賴
大量指數運算，故其可行性仍舊有待商
榷。Wang 等人在 2009 則基於 [12] 提出
了功能上的改進 [15]，使得其儲存證明能
夠動態對資料進行變更、刪除、新增等操
作。並在一年後提出了另一個協定來確保
儲存證明的資料保密性 16]。然而，[15] 和 
[16] 在運算效率的表現依舊不佳。 
雲端儲存協定本身的目的即為提供使
用者對於其儲存於雲端伺服器上之資料的
完整性確認，而動態操作 (諸如插入、修
訂、刪除等操作) 的支援，使得使用上並
非必定要將整份完整的資料取回，也減輕
了行動裝置在通訊上的負擔。另一方面，
對於批次驗證的支援，使得驗證者得以對
大量檔案進行完整性的驗證工作。最後，
我們更大幅降低了驗證者端所需之運算
量，使得智慧型手機等行動裝置也得以隨
時進行儲存證明的驗證工作。 
除此之外，我們更發現了替換攻擊 
(Changeling Attack) [11] 並提供有效的防
範機制。在過去的儲存證明協定中並未提
及替換攻擊，然而，許多儲存證明協定 (例
如 [15][16]) 正遭受替換攻擊的威脅。 
在效能方面，我們除了所提出的系統
外，同時亦於個人電腦上實作了 [15] 以做
為效能比較的基準。 
 
研究方法 
由於運算效率的緣故，當前儲存證明
協定仍舊難以運行在行動裝置上，故本計
畫將對現存之儲存證明協定進行研究與改
良，並進行原型系統的實作工作。 
而本計畫進行改良的方式則是利用橢
圓曲線乘法循環群  (multiplicative cyclic 
group) 之乘法運算代替指數運算；然而，
一般情況下，這類變動將帶來額外的安全
隱憂。以 BLS 簽章 [4] 為例： 
1. 簽章： ，其
中 m 為簽章的文件內容，  為
簽章者之私密金鑰，  
為 密 碼 學 雜 湊 函 式 
(cryptographic hash function)，  
為目 (order) 為大質數  (通常
長度為 128-bit 以上) 的乘法循
環群。 
2. 驗證：  是
否成立。 
若為了節省運算量而直接以橢圓曲線
乘法循環群之乘法運算代替指數運算，則 
BLS 簽章將修改為以下內容： 
1. 簽章： ，其
中 m 為簽章的文件內容，  為
簽 章 者 之 私 密 金 鑰 ，
 為密碼學雜湊函
式  (cryptographic hash 
function) ，大質數  (通常長度
為 128-bit 以上) 為乘法循環群 
 的目。 
2. 驗證：  是
否成立。 
如此一來，任何人只要取得一組簽章 
，即可以以下方式變造出任何有效簽
章：  
所以，我們在設計儲存證明協定內容
時特別使其安全性，植基於以下安全問題： 
儲存證明之完整性特性，植基於離散對數
問題 (Discrete Logarithm Problem)： 
給定以下資訊，計算出  的數值：
。其中，  為一個目為大質數  
的乘法循環群；  為   的一個生成元 
(generator)；  為一個  中的元素。 
驗證資訊 (Verification Token) 的不可偽
造 性 ， 植 基 於 運 算 型  DH 問 題 
(Computational Diffie-Hellmen Problem)： 
給 定 以 下 資 訊 ， 計 算 出  ：
，其中，  為一個目為大質數 
 的乘法循環群；  為  的一個生成
元；  為二個  中的元素。 
  14
jPBC 來實驗個人電腦與智慧型手機之效
能差異，並找出最需要運算量之操作為
何；第二個則是測試在不同檔案大小下，
利用 6910 個檔案區塊來進行驗證時驗證
者端的效能差距；第三個則是在固定檔案
大小為 512 MB 時，利用以上檢查點來測
試驗證者端的效能差距。 
Table 1 為實驗一的結果，在第一個實
驗中，我們使用 Java 6 與 jPBC 來進行，
由下表可以看出智慧型手機所需之時間大
約是個人電腦的十倍；另外，指數運算與
雙線性映射運算最為吃重，其運算時間大
約是 Zp 元素乘法的一萬倍，G 元素乘法
的一百倍，而我們的協定中使用最多的即
為 Zp 元素乘法。 
Figure 36 為實驗二之結果，實驗二開始
的實驗環境是在個人電腦，並使用 PBC 
來進行。由圖中可看到 [15] 和我們系統的
驗證時間都會隨著檔案大小而成長，同時
成長的斜率很接近，所以可能是由於 MHT 
的重建而導致驗證時間的增長。另外，由
圖中可以看到我們的系統比起 [15] 所需
之驗證時間差距極大。以 512 MB 為例，
[15] 和我們的系統分別需要  48.735020 
與 10.282430 秒，我們的系統比起 [15] 
的效能大約有著 380% 的改善。 
Figure 37 是實驗三的結果，我們將檔案
大小固定在 512 MB，並以 Table 1 的檢
查點來進行實驗。由下圖可以看到，我們
系統的驗證時間幾乎是常數，而 [15] 則是
隨著驗證的檔案區塊個數線性成長。可能
的原因是因為指數運算的運算量主宰了整
個系統，而 [15] 的指數運算數量則和驗證
檔案區塊的數量成線性成長。 
由以上實驗，我們可以發現我們在效
能上取得相當大優勢，故得以在智慧型手
機等行動裝置上實作我們的系統。 
 
Figure 33. 進行資料佈建時之系統活
動。(資料來源：[11]) 
 
 
Figure 34. 進行批次驗證時儲存空間之
狀態。 資料來源：[11]) 
 
 
Figure 35. 資料毁損率、偵測率、與驗證所需
檔案區塊個數之關聯性。 (資料來源：[11]) 
 
  16
 
Figure 43. 接著輸入資料所有者之 ID。 
 
 
Figure 44. 然後輸入儲存空間之名稱。 
 
 
Figure 45. 然後開始資料的佈建。 
 
 
Figure 46. 最後當驗證資訊和版本資訊建立完
成並上傳後，佈建便成功完成。 
 
PC 端完整性驗證 
在下面的截圖中，左邊為伺服器的訊
息，右邊則為資料所有者的操作介面。 
 
 
Figure 47. 首先，要先輸入伺服器的  IP 位
址，這裡伺服器的 IP 為 192.168.144.120。 
 
 
Figure 48. 接著選擇要進行之操作，這裡選擇
的是完整性驗證。 
 
 
Figure 49. 在伺服器上，目前有 A.txt、B.txt、
C.txt、及 D.txt 四個已佈建之檔案。同樣地，紫色
框內為資料所有者  ；藍色框內為儲存空間名稱。 
 
 
Figure 50. 接著，輸入儲存空間名稱。 
 
 
Figure 51. 然後輸入資料所有者。 
 
 
Figure 52. 然後驗證者將從伺服器取得指定儲
存空間中有哪些檔案可供驗證。在此原型系統中，
我們只驗證最新版本的資料。 
 
 
Figure 53. 選擇要驗證的檔案數量。 
 
  18
 
Figure 60. 在選擇檔案時，我們可以選擇儲存
空間內所有檔案的任意組合，在這裡有 A.txt、
B.txt、C.txt、以及 D.txt 四個檔案，我們選擇了 
A.txt 與 C.txt 二個檔案。 
 
 
Figure 61. 然後我們可以選擇挑戰的檔案區塊
個數，這裡的選擇有 458、687、6904 三種，而我
們使用的是 458。另外，6904 (pre) 提供了預先計
算好的挑戰資訊與儲存證明以快速展現我們的成
果；而其它三個選項都是使用新鮮 (fresh) 的挑戰
與儲存證明來進行驗證的動作。 
 
Figure 62. 在決定好上述資訊後，手機便開始
生成挑戰資訊，並將挑戰資訊發送給伺服器。在收
到伺服器的儲存證明後，便開始進行驗證。 
 
 
Figure 63. 最後，則將驗證的結果顯示出來。 
 
四、 計劃成果自評 
在計畫的三年中，我們已完成下列預
設目標: 
 蒐集與研讀輕量化認證協定、儲
存證明、加密檔案系統等相關文
獻。 
 完成設計基於社群共有認知之金
  20
9. R. C. Jammalamadaka, R. Gamboni, S. 
Mehrotra, K. E. Seamons, and N. 
Venkatasubramanian, "IDataGuard:  
Middleware Providing a Secure Network 
Drive Interface to Untrusted Internet Data 
Storage," EDBT’08, March 25-30, 2008, 
Nantes, France. 
10. M. Kallahalla, E. Riedel, R. Swaminathan, 
Q. Wang, and K. Fu, "Plutus: Scalable 
secure file sharing on untrusted storage," 
Proceedings of the 2nd Conference on File 
and Storage Technologies (FAST ‘03) 
11. H.-M. Ruan, Y.-S. Chen, and C.-L. Lei. 
"Enabling Efficient Batch Verification on 
Data Integrity for Remote Storage." The 
2012 International Conference on Internet 
Computing (ICOMP'12), 2012 
12. H. Shacham, B. Waters, and J. Pieprzyk, 
"Compact Proofs of Retrievability," 
Advances in Cryptology - ASIACRYPT 
2008, Springer Berlin / Heidelberg, 2008, 
volume 5350, pp. 90-107 
13. S. D. C. di Vimercati, S. Foresti, S. Jajodia, 
S. Paraboschi, G. Pelosi, and P. Samarati, 
"Preserving Confidentiality of Security 
Policies in Data Outsourcing," Proceedings 
of the 7th ACM workshop on Privacy in the 
electronic society, ACM, 2008, pp. 75-84 
14. S. D. C. di Vimercati, S. Foresti, S. Jajodia, 
S. Paraboschi, and P. Samarati, "A Data 
Outsourcing Architecture Combining 
Cryptography and Access Control," 
Proceedings of the 2007 ACM workshop on 
Computer security architecture, ACM, 2007, 
pp. 63-69 
15. Q. Wang, C. Wang, J. Li, K. Ren, and W. 
Lou, "Enabling Public Verifiability and 
Data Dynamics for Storage Security in 
Cloud Computing," ESORICS, 2009, pp. 
355-370 
16. C. Wang, Q. Wang, K. Ren, and W. Lou, 
"Privacy-Preserving Public Auditing for 
Data Storage Security in Cloud 
Computing," INFOCOM, 2010 Proceedings 
IEEE, 2010, pp. 1-9 
17. E. Zadok, I. Badulescu, and A. Shender, 
"Cryptfs: A Stackable Vnode Level 
Encryption File System," 
http://www.filesystems.org/docs/cryptfs/cry
ptfs.html 
18. "TrueCrypt," http://www.truecrypt.org/ 
 
100年度專題研究計畫研究成果彙整表 
計畫主持人：雷欽隆 計畫編號：100-2218-E-002-010- 
計畫名稱：社群及行動安全技術之研究與應用--子計畫三：行動裝置上社群網路隱私管理及輕量化認
證機制(2/2) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 1 1 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 1 0% 件  
技術移轉 
權利金 0 300 0% 千元  
碩士生 3 3 100%  
博士生 1 1 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 1 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 2 200% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
