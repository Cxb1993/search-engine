結案報告內容 
 
lmdnfRopqr,st$uvw1`8x$yU A4z{|$}\"#
pqE~K]$H	
$R#R1$U^ 
"#K 
 
(a) Hsueh-I Lu and Chia-Chi Yeh, Balanced Parentheses Strike Back, ACM Transactions on 
Algorithms, 4(3):28.1-13, 2008. 
 
(b) Chieh-Yu Chen, Ya-Fei Hung, and Hsueh-I Lu, Visibility Representation of 
Four-Connected Plane Graphs with Near-Optimal Heights, in Proceedings of the 16th 
International Symposium on Graph Drawing (GD'08), accepted, 2008. 
 
 
:E~$-(QQ"#K-(Q
KDM$w:}"#$ 
 
(c) Jia-Hao Fan, Chun-Cheng Lin, Hsueh-I Lu, and Hsu-Chun Yen, Width-Optimal Visibility 
Representation of Plane Graphs, in Proceedings of the 18th International Symposium on 
Algorithms and Computation (ISAAC'07), Lecture Notes in Computer Science 4835, 
pages 160-171, 2007. 
 
P-(Q E$¡~¢N£' ¤"#}\RopqE~K¥
"#$- introductionPw¦§K 
 
h¨"#©ª«¬$­@®¯dnf°±$²NyU3b³-Q´µ
K"#$¶·¸¹Bsº$w 90%U»$¼½¾N¿ÀÁ
ÂÃ(%& orderly spanning tree, small size separatorÄ)DM$P-ÅµÆÇ$
È'¼:_¤ÂÃÉÊ(%& four-canonical orderingËconsistent ordering of ladder 
graph)$²NyUÌÍÎÏÐ"#KÑÒ®¯!!
28
Balanced Parentheses Strike Back
HSUEH-I LU AND CHIA-CHI YEH
National Taiwan University
Abstract. An ordinal tree is an arbitrary rooted tree where the children of each node are ordered.
Succinct representations for ordinal trees with efficient query support have been extensively studied.
The best previously known result is due to Geary et al. [2004b, pages 1–10]. The number of bits
required by their representation for an n-node ordinal tree T is 2n + o(n), whose first-order term is
information-theoretically optimal. Their representation supports a large set of O(1)-time queries on T .
Based upon a balanced string of 2n parentheses, we give an improved 2n +o(n)-bit representation for
T . Our improvement is two-fold: First, the set of O(1)-time queries supported by our representation
is a proper superset of that supported by the representation of Geary, Raman, and Raman. Second, it is
also much easier for our representation to support new queries by simply adding new auxiliary strings.
Categories and Subject Descriptors: E.1 [Data Structure]: —Trees; E.4 [Coding and Informa-
tion Theory]: —Data compaction and compression; F.2.2 [Analysis of Algorithms and Problem
Complexity]: Nonnumerical Algorithms and Problems—Computations on discrete structures; G.2.2
[Discrete Mathematics]: Graph Theory—Graph algorithms, Trees; H.3.1 [Information Storage
and Retrieval]: Content Analysis and Indexing—Dictionaries, indexing methods
General Terms: Algorithm, Design, Theory
Additional Key Words and Phrases: Succinct data structures, XML document representation
ACM Reference Format:
Lu, H.-I., and Yeh, C.-C. 2008. Balanced parentheses strike back. ACM Trans. Algor. 4, 3, Ar-
ticle 28, (June 2008), 13 pages. DOI = 10.1145/1367064.1367068 http://doi.acm.org/10.1145/
1367064.1367068
1. Introduction
An ordinal tree (see, e.g., Geary et al. [2004b] and Benoit et al. [2005]) is an
arbitrary rooted tree where the children of each node are ordered. All trees in this
This research was supported in part by NSC Grants 94-2213-F-002-126, 95-2221-E-002-077, and
96-2221-E-002-033.
H.-I. Lu is the corresponding author and is also affiliated with the Graduate Institute of Networking
and Multimedia and the Graduate Institute of Biomedical Electronics and Bioinformatics, National
Taiwan University.
Authors’ address: Department of Computer Science and Information Engineering, National
Taiwan University, 1 Roosevelt Road, Section 4, Taipei 106, Taiwan, Republic of China, e-mail:
{hil; r93048}@csie.ntu.edu.tw.
Permission to make digital or hard copies of part or all of this work for personal or classroom use is
granted without fee provided that copies are not made or distributed for profit or direct commercial
advantage and that copies show this notice on the first page or initial screen of a display along with the
full citation. Copyrights for components of this work owned by others than ACM must be honored.
Abstracting with credit is permitted. To copy otherwise, to republish, to post on servers, to redistribute
to lists, or to use any component of this work in other works requires prior specific permission and/or
a fee. Permissions may be requested from Publications Dept., ACM, Inc., 2 Penn Plaza, Suite 701,
New York, NY 10121-0701 USA, fax +1 (212) 869-0481, or permissions@acm.org.
C© 2008 ACM 1549-6325/2008/06-ART28 $5.00 DOI 10.1145/1367064.1367068 http://doi.acm.org/
10.1145/1367064.1367068
ACM Transactions on Algorithms, Vol. 4, No. 3, Article 28, Publication date: June 2008.
Balanced Parentheses Strike Back 28:3
TABLE I. A SUMMARY FOR CURRENT 2n + o(n)-BIT ENCODINGS FOR AN n-NODE TREE:
PARENTHESES [MUNRO AND RAMAN 2001, 2004; CHIANG ET AL. 2005; MUNRO AND RAO
2004; MUNRO ET AL. 2001], DFUDS [BENOIT ET AL. 2005], GEARY ET AL. [2004a]
Parentheses DFUDS Geary et al. new
pre-order select and rank ∨ ∨ ∨ ∨
post-order select and rank ∨ ∨ ∨
child-select and child-rank ∨ ∨ ∨
leaf-select, leaf-rank, and leaf-size ∨ ∨
lowest common ancestor ∨
subtree height ∨
subtree size ∨ ∨ ∨ ∨
level ancestor ∨ ∨ ∨
distance ∨
degree ∨ ∨ ∨ ∨
depth ∨ ∨ ∨
—Based upon the DFUDS representation, Benoit et al. [2005] gave an o(n)-bit
auxiliary string that supports the following queries in O(1) time: child-rank,
child-select, degree, subtree-size, and node-rank and node-select in the pre-order
traversal of T . However, such a choice of the base representation still does not
provide O(1)-time support for the depth and level-ancestor queries, the node-
rank and node-select queries in the post-order traversal of T , and the rank, select,
and size queries for leaves.
Recently, Geary et al. [2004b] almost resolved the above trade-off by giving a
2n +o(n)-bit encoding for T that supports in O(1) time the aforementioned queries
except those leaf-related ones [Munro et al. 2001]. Their approach differs from all
previous work achieving 2n + o(n) bits in that their encoding does not consist of
a 2n-bit base representation for the topology of T plus an o(n)-bit auxiliary string.
Instead, they decomposed T into several types of subtrees, whose topologies are
represented in a hierarchical way, where different levels are composed of mixtures
of different base representations and auxiliary strings. Such an involved structure
seriously complicates the possibility of supporting additional queries using other
stand-alone auxiliary strings. An implementation based upon a similar concept
is studied in Geary et al. [2004b]. Very recently, Delpratt et al. [2006] showed
that LOUDS-based representation can also be implemented to have competitive
practical performance.
In this article, we give new o(n)-bit auxiliary strings for the 2n-bit balanced string
of parentheses representing T . Together with previous o(n)-bit auxiliary strings for
balanced parentheses [Munro and Raman 2001; Chiang et al. 2005; Munro and Rao
2004], our 2n + o(n)-bit encoding for T supports all of Geary et al.’s queries in
O(1) time. Consisting of a base representation plus o(n)-bit auxiliary strings, our
encoding is better in the ease of supporting new queries by adding new o(n)-bit
auxiliary strings. To demonstrate such an advantage, we also show how to handle
O(1)-time queries currently unsupported by Geary et al.’s encoding, including (a)
lowest common ancestor, (b) distance, and (c) subtree height. Table I summarizes
the above discussion.
We follow the convention of unit-cost RAM model of computation with2( log n)-
bit word size [van Emde Boas 1990], which is assumed in all the previous work
except that of Jacobson [1989]. The rest of this article is organized as follows.
ACM Transactions on Algorithms, Vol. 4, No. 3, Article 28, Publication date: June 2008.
Balanced Parentheses Strike Back 28:5
closed parentheses in S. Therefore, the following lemma does not require L in the
encoding.
Let I be an array of m indices. Let kmin(I, m, i, j) (respectively, kmax(I, m, i, j))
be the smallest index k with i ≤ k ≤ j that minimizes (respectively, maximizes)
L[I [k]]. We first prove the following lemma using techniques extended from
Section 3 of Bender and Farach-Colton [2000].
LEMMA 3.1. It takes O(m log m) time to compute an O(m log 2m)-bit string
αq(I, m) from which kmin(I, m, i, j) and kmax(I, m, i, j) for any indices i and j with
1 ≤ i ≤ j ≤ m can be determined from S, αaux , and αq in O(1) time.
PROOF. For each i = 1, 2, . . . , m and j = 1, 2, . . . , d log me, let Mmin[i][ j]
(respectively, Mm[i][ j]) be the smallest index k with i ≤ k < i + 2 j that
minimizes (respectively, maximizes) L[I [k]]. Let αq(I, m) = Mmin ◦ Mmax.
Observe that αq(I, m) takes O(m log 2m) bits and can be computed from L and
I in O(m log m) time using dynamic programming. Let k1 = Mmin[i][k] and
k2 = Mmin[ j − 2k + 1][k], where k = b log ( j − i)c. It is not difficult to see that
kmin(I, m, i, j) =
{ k1 if L[I [k1]] < L[I [k2]]
k2 otherwise.
One can compute kmax(I, m, i, j) from Mmax, I , and L analogously in O(1) time.
LEMMA 3.2. It takes O(n) time to compute an o(n)-bit string αrmq such that
indexmin(L , i, j) and indexmax(L , i, j) for any indices i and j can be computed from
S, αaux , and αrmq in O(1) time.
PROOF. First let IB be the nB-element array such that each IB[i] is the smallest
index j with (i −1)B < j ≤ i B that minimizes L[ j]. IB takes O(nB log B) = o(n)
bits. Also, for each i = 1, 2, . . . , nB , let Ib[i] be the d Bb e-element array such that
each Ib[i][ j] is the smallest index t with ( j − 1)b < t ≤ jb that minimizes
L[(i − 1)B + t]. Ib takes O(nBd Bb e log b) = o(n) bits. Let αq1 = αq(IB, nB), and
for each i = 1, 2, . . . , nB , let αq2[i] = αq(Ib[i], d Bb e). By Lemma 3.1, both of
αq1 and αq2 take o(n) bits and can be obtained in O(n) time. Finally, let αq3 be
an O(n)-time obtainable table such that any indexmin(L , i, j) and indexmax(L , i, j)
with w(i, j) ≤ 2b can be computed from S[i, j] and αq3 in O(1) time. That is, let
αq3[S[i, i +2b−1]][ j −i +1] = (indexmin(L , i, j)−i, indexmax(L , i, j)−i) for any
indices i and j with w(i, j) ≤ 2b. Since each entry takes O( log b) bits, the number
of bits required by αq3 is O(22b2b log b) = o(n). Let αrmq = αq1 ◦αq2 ◦αq3 ◦ IB ◦ Ib,
which has o(n) bits and is obtainable in O(n) time.
To answer indexmin(L , i, j) from S, αaux , and αrmq , we can always decom-
pose the interval [i, j] into two (not necessarily disjoint) subintervals [i1, j1] and
[i2, j2] whose union is [i, j]. Clearly indexmin(L , i, j) can be determined from
indexmin(L , i1, j1) and indexmin(L , i2, j2) in O(1) time. Consider the following cases.
—Case 1. w(i, j) ≤ 2b. We simply resort to S[i, j] and αq3.
—Case 2. w(i, j) > 2b and S[i, j] is in the same length-B block of S. Since
indexmin(L , i, i + b − 1) and indexmin(L , j − b + 1, j) can be determined in O(1)
time using Case 1, it suffices to determine indexmin(L , i ′, j ′), where (a) i ′ is the
smallest index with i ≤ i ′ that is a starting index of a length-b block of S, and
(b) j ′ is the largest index with j ′ ≤ j that is an ending index of a length-b block
ACM Transactions on Algorithms, Vol. 4, No. 3, Article 28, Publication date: June 2008.
Balanced Parentheses Strike Back 28:7
rp < ` j implies w(ri , ` j ) > k. Either case leads to a contradiction, so the lemma
is proved.
For presentational brevity, we classify non-root nodes into the following three
disjoint classes: A node is
—narrow if it is not b-far;
—medium if it is b-far but not B-far; and
—wide if it is B-far.
4.1. CHILD RANK. Let child rank(S, vk) denote the number c such that vk is
the cth child of its parent. We have the following theorem.
THEOREM 4.2. It takes O(n) time to compute an o(n)-bit string αnew2 such that
child rank(S, vk) for each node vk can be answered from S and αnew2 in O(1) time.
PROOF. Let v p be the parent of vk . If S[i, j] is a balanced string of parenthe-
ses, let sibling(S, i, j) be the number of non-enclosed parenthesis pairs in S[i, j].
Observe that
child rank(S, vk) = sibling(S, `p + 1, `k − 1) + 1
= degree(S, v p) − sibling(S, `k, rp − 1) + 1.
Therefore, it remains to support each query sibling(S, i, j) in O(1) time.
If vk is narrow, we only need to answer sibling(S, i, j) with w(i, j) ≤ b. We
simply build an O(n)-time obtainable table M1 to store the answers for any possible
inputs. That is, let M1[S[i, i + b − 1]][ j − i + 1] = sibling(S, i, j) for any indices
i and j with w(i, j) ≤ b. Since sibling(S, i, j) ≤ w(i, j), each entry requires
O( log b) bits and M1 takes O(2bb log b) = o(n) bits.
If vk is medium, we cannot afford to store all the answers of sibling(S, i, j) with
w(i, j) ≤ B. We split S into length-b blocks. By Lemma 4.1, any two medium
nodes vi and v j with |w(`i , ` j )| ≤ b have the same parent, so for each block we
save at most one medium node as a shortcut. Define tables M2 and M3 as follows.
For each t = 1, 2, . . . , nb,
—let M2[t] = (`i , sibling(S, `p + 1, `i − 1)), where `i is the smallest index, if any,
with (t −1)b < `i ≤ tb such that vi is a medium child of v p with w(`p, `i ) ≤ B;
and
—let M3[t] = (`i , sibling(S, `i , rp −1)), where `i is the smallest index, if any, with
(t − 1)b < `i ≤ tb such that vi is a medium child of v p with w(`i , rp) ≤ B.
Note that M2 and M3 have nb entries, each requiring O( log B) bits, so both of
them take O(nb log B) = o(n) bits. Therefore, for any medium child vk of v p, if
w(`p, `k) ≤ B, then
sibling(S, `p + 1, `k − 1) = sibling(S, `p + 1, `i − 1) + sibling(S, `i , `k − 1)
= m + M1[S[`i , `i + b − 1]][`k − `i ],
where (`i , m) = M2[d `kb e]. Similarly, if w(`k, rp) ≤ B, then
sibling(S, `k, rp − 1) = sibling(S, `i , rp − 1) − sibling(S, `i , `k − 1)
= m − M1[S[`i , `i + b − 1]][`k − `i ],
where (`i , m) = M3[d `kb e].
ACM Transactions on Algorithms, Vol. 4, No. 3, Article 28, Publication date: June 2008.
Balanced Parentheses Strike Back 28:9
of indexc(S, `i , B, tb + z) for each z = 0, 1, . . . , b − 1 in W2. W2 takes at most
O(d Bb2 eb log B) = o(B) bits. Otherwise, by Lemma 4.3 indexc(S, `i , B, tb + z)
can be computed in O(1) time using W1[t] + indexc(S, `i + W1[t], b2, z). Let
αB(`i ) = W1 ◦ W2, which has o(B) bits and is obtainable in O(B) time.
Given an array A of dm
u
e positive d log ue-bit integers with m ≤ n and u =
d log 3me, let indexsum(A, x) denote the largest index y with
∑y
t=1 A[t] < x .
LEMMA 4.5. It takes O(m) time to compute an o(m)-bit string αA(A, m) such
that indexsum(A, x) for any index x can be determined from A and αA(A, m) in
O(1) time.
PROOF. This is a special case of the search query of the searchable partial sums
problem [Raman et al. 2001; Hon et al. 2003]. Theorem 3 of Hon et al. [2003]
gave an o(m)-bit auxiliary string to support this query in O(1) time, but it is unclear
whether the preprocessing time is O(m). Let us briefly prove this lemma as follows:
Let d(x1, x2) denote indexsum(A, x2) − indexsum(A, x1). For each t =
0, . . . , dm
u
e − 1, let W3[t] = indexsum(A, tu). W3 needs O(dmu e log m) = o(m)
bits. If d(tu, (t + 1)u) > d log 2ue, for each z = 0, 1, . . . , u − 1, we save the
values of d(tu, tu + z) in W4. Because A is an array of positive integers, we have
d(tu, tu+z) ≤ z and W4 needs at most O(d mu log 2u eu log u) = o(m) bits. Otherwise,
let
W5[A[indexsum(A, tu), indexsum(A, tu) + d log 2ue − 1]][z] = d(tu, tu + z)
for each z = 0, 1, . . . , u − 1. W5 takes O(2 log 3uu log log u) = o(m) bits and is
obtainable in O(m) time. Now, let αA(A, m) = W3 ◦ W4 ◦ W5, which requires
o(m) bits and can be obtained in O(m) time. To answer indexsum(A, x) in O(1)
time, first let t and z be the integers with x = tu + z and 0 ≤ z < u, and then
find the values of indexsum(A, tu) and d(tu, tu + z) from αA(A, m). The answer is
indexsum(A, tu) + d(tu, tu + z).
Let child select(S, v p, c) denote the index `k such that vk is the cth child of v p.
We have the following theorem.
THEOREM 4.6. It takes O(n) time to compute an o(n)-bit string αnew3 such that
child select(S, v p, c) for each node v p and c can be answered from S and αnew3 in
O(1) time.
PROOF. We say that nodes in a set D are d-disjoint [Chiang et al. 2005] if
—w(`i , ri ) > d holds for any node vi in D; and
—any two nodes vi and v j in D satisfy at least one of |w(`i , ` j )| > d and
|w(ri , r j )| > d.
Let X be a 2d 2nd e-element array. For each t = 1, 2, . . . , d
2n
d e, we store vi in X [2t −
1], where `i is the smallest index, if any, with (t − 1)d < `i ≤ td such that
vi is in D; and also store v j in X [2t], where r j is the largest index, if any, with
(t − 1)d < r j ≤ td such that v j is in D. Then, every node vi in D takes at least
one slot in X , and can be easily verified using `i and ri . We simply say that X has
vi if and only if vi takes at least one of X [2d `id e − 1] or X [2d rid e]. For notational
brevity, let X [vi ] denote the element taken by vi .
ACM Transactions on Algorithms, Vol. 4, No. 3, Article 28, Publication date: June 2008.
Balanced Parentheses Strike Back 28:11
FIG. 3. An O(1)-time algorithm that computes child select(S, v p, c).
O(n)-time obtainable table F with F[S[rp−b+1, rp]][degree(S, v p)−c] = rp−`i ,
where vi is the cth child of v p with w(`i , rp) ≤ b. Note that degree(S, v p) − c ≤ b,
so F takes O(2bb log b) = o(n) bits.
To implement child select in O(1) time, let `k = child select(S, v p, c). vk is wide
if and only if X1 has v p and first ≤ c ≤ last, where (beforep, first, last) = X1[v p].
Moreover, letting z = beforep + c − first + 1, vk is the zth wide node discovered
during the traversal procedure. Let (beforei , `i ) = Y1[indexsum(A1, z)], so vk is a
sibling of vi with w(`i , `k) ≤ B such that child rank(S, vk) = child rank(S, vi ) +
z − beforei . By Lemma 4.4, we can locate vk using `k = `i + indexc(S, `i , B, z −
beforei ).
vk is medium if and only if X2 has v p and at least one of firstL ≤ c ≤ lastL
and firstR ≤ c ≤ lastR is satisfied, where (beforeL , firstL , lastL , beforeR, firstR,
lastR) = X2[v p]. If firstL ≤ c ≤ lastL , let t = d `pB e and z = beforeL +c−firstL +1.
If firstR ≤ c ≤ lastR , let t = d rpB e and z = beforeR+c−firstR+1. Then, vk is the zth
medium node belonging to the t th length-B block discovered during the traversal
procedure. Let (beforei , `i ) = Y2[t][indexsum(A2[t], z)], so vk is a sibling of vi with
w(`i , `k) ≤ b such that child rank(S, vk) = child rank(S, vi ) + z − beforei . By
Lemma 4.3, we can locate vk using `k = `i + indexc(S, `i , b2, z − beforei ).
If vk is neither wide nor medium, it must be narrow. If indexc(S, `p+1, b2, c) 6= φ,
then we have `k = `p +1+ indexc(S, `p +1, b2, c). Otherwise, `k = rp − F[S[rp −
b + 1, rp]][degree(S, v p) − c].
Finally, let αnew3 = αaux ◦αb ◦αB1 ◦ X1 ◦ Y1 ◦ X2 ◦ Y2 ◦ A1 ◦αA1 ◦ A2 ◦αA2 ◦ F ,
which takes o(n) bits and can be computed from S in O(n) time. The O(1)-time
algorithm for computing child select(S, v p, c) is shown in Figure 3.
ACKNOWLEDGMENT. We thank Kai-min Chung for helpful discussion. We also
thank the anonymous reviewers for their helpful comments.
ACM Transactions on Algorithms, Vol. 4, No. 3, Article 28, Publication date: June 2008.
Balanced Parentheses Strike Back 28:13
RAMAN, R., RAMAN, V., AND RAO, S. S. 2001. Succinct dynamic data structures. In Proceedings of the
7th International Workshop on Algorithms and Data Structures (Providence, RI), F. K. H. A. Dehne,
J.-R. Sack, and R. Tamassia, Eds. Lecture Notes in Computer Science, vol. 2125. Springer-Verlag, New
York, 426–437.
SADAKANE, K. 2002. Succinct representations of LCP information and improvements in the compressed
suffix arrays. In Proceedings of the 13th Annual ACM-SIAM Symposium on Discrete Algorithms, (San
Francisco, CA). ACM, New York, 225–232.
VAN EMDE BOAS, P. 1990. Machine models and simulations. In Handbook of Theoretical Computer
Science, J. van Leeuwen, Ed. Vol. A. Elsevier, Amsterdam, The Netherlands, Chapter 1, 1–60.
RECEIVED DECEMBER 2005; REVISED OCTOBER 2006 AND MARCH 2007; ACCEPTED APRIL 2007
ACM Transactions on Algorithms, Vol. 4, No. 3, Article 28, Publication date: June 2008.
Visibility Representations of Four-Connected
Plane Graphs with Near Optimal Heights
Chieh-Yu Chen1, Ya-Fei Hung2, and Hsueh-I Lu1,2?
1 Department of Computer Science and Information Engineering
National Taiwan University
2 Graduate Institute of Networking and Multimedia
National Taiwan University
1 Roosevelt Road, Section 4, Taipei 106, Taiwan, ROC
f94922054@ntu.edu.tw, r94944014@ntu.edu.tw, hil@csie.ntu.edu.tw
Abstract. A visibility representation of a graph G is to represent the
nodes of G with non-overlapping horizontal line segments such that the
line segments representing any two distinct adjacent nodes are vertically
visible to each other. If G is a plane graph, i.e., a planar graph equipped
with a planar embedding, a visibility representation of G has the addi-
tional requirement of reflecting the given planar embedding of G. For the
case that G is an n-node four-connected plane graph, we give an O(n)-
time algorithm to produce a visibility representation of G with height at
most
⌈
n
2
⌉
+2
⌈√
n−2
2
⌉
. To ensure that the first-order term of the upper
bound is optimal, we also show an n-node four-connected plane graph G,
for infinite number of n, whose visibility representations require heights
at least n
2
.
1 Introduction
Unless clearly specified otherwise, all graphs in the present article are simple,
i.e., having no self-loops and multiple edges. A visibility representation of a pla-
nar graph represents the nodes of the graph by non-overlapping horizontal line
segments such that, for any nodes u and v adjacent in the graph, the line seg-
ments representing u and v are vertically visible to each other. Observe that if
G1 is a subgraph of G2 on the save node set, then any visibility representation of
G2 is also a visibility representation of G1. Therefore, we may assume without
loss of generality that the input graph is maximally planar. Let G be an n-
node plane triangulation, i.e., a maximally planar graph equipped with a planar
embedding. A visibility representation of G has an additional requirement of re-
flecting the given planar embedding of G. Figure 1(b), for instance, is a visibility
? Corresponding author. http://www.csie.ntu.edu.tw/∼hil. This author also holds
a joint appointment in the Graduate Institute of Biomedical Electronics and Bioin-
formatics, National Taiwan University. Research supported in part by NSC grant
96-2221-E-002-033.
Visibility Representations of Four-Connected Plane Graphs 3
Table 1. Previous upper bounds and our result for any n-node plane graph G.
general G four-connected G
width height width height
Otten and van Wijk [7] 3n− 7 n− 1
Rosenstiehl and Tarjan [8],
Tamassia and Tollis [9]
2n− 5
Kant [4]
⌊
3n−6
2
⌋
Kant and He [5] n− 1
Lin, Lu, and Sun [6]
⌊
22n−24
15
⌋
Zhang and He [10]
⌈
15n
16
⌉
Zhang and He [14]
⌊
5n
6
⌋
Zhang and He [11, 13]
⌊
13n−24
9
⌋
Zhang and He [12]
⌈
3n
4
⌉
Zhang and He [15, 17] 4n
3
+ 2
⌈√
n
⌉
2n
3
+ 2
⌈√
n
2
⌉
Zhang and He [16] 2n
3
+O(1)
Fan, Lin, Lu, and Yen [2]
⌊
4n
3
⌋
− 2
This paper
⌈
n
2
⌉
+ 2
⌈√
n−2
2
⌉
Our result is near optimal in that we can construct an n-node four-connected
plane graph, for infinite number of n, whose visibility representations require
heights at least
⌈
n
2
⌉
. That is, the first-order term of our upper bound is optimal.
The remainder of the paper is organized as follows. Section 2 gives the pre-
liminaries. Section 3 describes and analyzes our algorithm. Section 4 ensures that
the first-order term of our upper bound on height is optimal. Section 5 concludes
the paper.
2 Preliminaries
2.1 Ordering and st-ordering
Let G be an n-node plane graph. An ordering of G is a one-to-one mapping σ
from the nodes of G to {1, 2, . . . , n}. A path of G is σ-increasing if σ(u) < σ(v)
holds for any nodes u and v such that u precedes v in the path. Let length(G, σ)
denote the maximum of the lengths of all σ-increasing paths in G. For instance,
if G and σ are as shown in Fig. 1(a), then one can verify that (1, 2, 5, 6, 8) is a
σ-increasing path with maximum length. Therefore, length(G, σ) = 4.
Visibility Representations of Four-Connected Plane Graphs 5
1
4
6
2
7
3
5
8
(a)
1
4
6
7
2
3
5
8
(b) (c)
1
2
3
4
12
3
4
GR TR
GL TL
Fig. 2. (a) A four-canonical ordering φ of the four-connected plane triangulation G. (b)
GL is the subgraph induced by the nodes v with 1 ≤ φ(v) ≤ 4 and GR is the subgraph
induced by the nodes v with 5 ≤ φ(v) ≤ 8. (c) The counterclockwise post-ordering ψL
of TL and the clockwise post-ordering ψR of TR.
Lemma 3 (He and Zhang [15, 17]). Let (L,R,X) be an n-node ladder graph.
It takes O(n) time to compute a consistent ordering σ of (L,R,X) with respect
to any given outerplanar embedding of (L,R,X) such that length((L,R,X), σ) ≤⌈
n
2
⌉
+ 2
⌈√
n
2
⌉− 1.
For technical reason, we need a consistent ordering with additional properties,
as stated in the next lemma, which is also illustrated by Fig. 3(a).
Lemma 4. Let (L,R,X) be an n-node ladder graph. It takes O(n) time to com-
pute a consistent ordering σ of (L,R,X) with respect to any given outerplanar
embedding E of (L,R,X) such that
– σ(`1) = 1, σ(r1) = 2, and
– length((L,R,X), σ) ≤ ⌈n2 ⌉+ 2 ⌈
√
n−2
2
⌉
,
Visibility Representations of Four-Connected Plane Graphs 7
3.2 Step 2
For each i = 1, 2, . . . , n, let vi denote the node of G with φ(vi) = i. It follows
from the definition of φ that v1, v2, and vn are the external nodes of G.
– For each i = 2, 3, . . . ,
⌈
n
2
⌉
, let pi(i) be the index j with j < i such that vj is
the first neighbor of vi in GL in counterclockwise order around vi. Let TL
be the spanning tree of GL rooted at v1 such that each vpi(i) is the parent of
vi in TL. Let ψL be the counterclockwise post-ordering of TL.
– For each i =
⌈
n
2
⌉
+ 1,
⌈
n
2
⌉
+ 2, . . . , n− 1, let pi(i) be the index j with j > i
such that vj is the first neighbor of vi in GR in clockwise order around vi.
Let TR be the spanning tree of GR rooted at vn such that each vpi(i) is the
parent of vi in TR. Let ψR be the clockwise post-ordering of TR.
Figure 2(c) illustrates this step, which runs in O(n) time. As a matter of fact,
TL is the canonical ordering spanning tree of GL with respect to φ, as defined
by He, Kao, and Lu [3].
Lemma 5. ψL(v2) = 1, ψL(v1) =
⌈
n
2
⌉
, ψR(vn−1) = 1, and ψR(vn) =
⌊
n
2
⌋
.
Proof. Since φ is a four-canonical ordering of G, if (v2, vi) with i ≥ 3 is an edge
of GL, then vi has to have a neighbor vk with 2 6= k < i in GL. Observe that
v2 is the node immediately succeeding v1 in counterclockwise order around the
external boundary of GL. One can verify that v2 cannot be the first neighbor
of vi in GL in counterclockwise order around vi. That is, we have pi(i) 6= 2.
Since v2 cannot be the parent of vi in TL, v2 has to be a leaf of TL. By the
relative position between v2 and v1, it is clear that v2 is the first node in the
counterclockwise post-ordering of TL, i.e., ψL(v2) = 1.
One can prove ψR(vn−1) = 1 analogously, where vn (respectively, vn−1, ψR,
TR, and GR) plays the role of v1 (respectively, v2, ψL, TL, and GL). Since v1 is
the root of TL and ψL is a post-ordering of TL, we have ψL(v1) =
⌈
n
2
⌉
. Since vn
is the root of TR and ψR is a post-ordering of TR, we have ψR(vn) =
⌊
n
2
⌋
.
3.3 Step 3
Let L, R, and X be defined as follows.
– Let L be the path
(
`1, `2, . . . , `dn/2e
)
, where `i is the node of GL with
ψL(`i) = i.
– Let R be the path
(
r1, r2, . . . , rbn/2c
)
, where ri is the node of GR with
ψR(ri) = i.
– Let X = X∗ \ {(v2, vn)}, where X∗ consists of the edges of G with one
endpoint in L and the other endpoint in R.
Figure 3(a) illustrates Lemma 5 and this step, which runs in O(n) time. Fig-
ure 3(b) shows the corresponding L ∪R ∪X∗.
Lemma 6. (L,R,X) is an n-node ladder graph.
Visibility Representations of Four-Connected Plane Graphs 9
– Since ψR is an st-ordering ofGR, for each i = 1, . . . ,
⌊
n
2
⌋−1, ri has a neighbor
rk in GR with i < k. Since GR is a subgraph of G, we know that rk is a
neighbor of ri in G with σ(ri) < σ(rk).
– Since ψR is an st-ordering of GR, for each i = 2, . . . ,
⌊
n
2
⌋
, ri has a neighbor
rj in GR with j < i. Since GR is a subgraph of G, we know that rj is a
neighbor of ri in G with σ(rj) < σ(ri).
According to the above observations, it suffices to ensure that edges (`1, r1) and
(`dn/2e, rbn/2c) belong to G. By Lemma 5, `1 = v2, r1 = vn−1, `dn/2e = v1, and
rbn/2c = vn. Since v1 and vn are external nodes of the plane triangulation G,
we know that (`dn/2e, rbn/2c) = (v1, vn) is an edge of G. By definition of four-
canonical ordering φ, we know that vn−1 is adjacent to v2. Therefore, (`1, r1) =
(v2, vn−1) is an edge of G.
Figure 1(a) shows the resulting st-ordering σ of G computed by our algorithm.
3.5 Proving Theorem 1
Proof. Note that v1, v2, and vn are the external nodes of G. By Lemmas 1 and 7,
it suffices to ensure
length(G, σ) ≤
⌈n
2
⌉
+ 2
⌈√
n− 2
2
⌉
. (1)
By Step 4 and Lemmas 4 and 6, we have
length(H,σ) ≤
⌈n
2
⌉
+ 2
⌈√
n− 2
2
⌉
. (2)
Let H∗ = L ∪R ∪X∗. That is, H∗ = H ∪ {(v2, vn)}, as illustrated by Fig. 3(a)
and 3(b). By definition of σ and Lemma 5, we have σ(v2) = 1 and σ(vn) ≥
maxj σ(rj). Therefore, any σ-increasing path of H
∗ containing edge (v2, vn) con-
tains exactly one node of R, i.e., vn, and thus has length at most
⌈
n
2
⌉
. It follows
from Inequality (2) that
length(H∗, σ) ≤
⌈n
2
⌉
+ 2
⌈√
n− 2
2
⌉
. (3)
To prove Inequality (1), it remains to show that if P is a σ-increasing path of
G, then there is a σ-increasing path Q of H∗ such that the length of Q is no less
than that of P . For each edge (u, v) of P with σ(u) < σ(v), let Q(u, v) be the
σ-increasing path of H∗ defined as follows.
– If u = `i and v = rj , then let Q(u, v) = (u, v), which is a σ-increasing path
of X∗.
– If u = ri and v = `j , then let Q(u, v) = (u, v), which is a σ-increasing path
of X∗.
Visibility Representations of Four-Connected Plane Graphs 11
– Let N1 be the four-node internally triangulated plane graph with four ex-
ternal nodes.
– Let Nk+1 be obtained from Nk by adding four nodes and twelve edges in the
way as shown in Fig. 4(a).
One can easily verify that each Nk with k ≥ 1 is indeed four-connected. The
following lemma ensures that the the upper bound provided by Theorem 1 has
an optimal first-order term.
Lemma 8. All visibility representations of Nk have heights at least 2k.
Proof. We prove the lemma by induction on k. The lemma holds trivially for
k = 1. Assume for a contradiction that Nk+1 admits a visibility representation
Dk+1 with height no more than 2k + 1. Let Dk be obtained from Dk+1 by
deleting all the horizontal segments representing those four external nodes of
Nk+1. Since Dk+1 has to reflect the planar embedding of Nk+1, Dk is a visibility
representation of Nk. Since the external nodes of Nk are internal in Nk+1, the
horizontal segments of Dk+1 representing the external nodes of Nk+1 have to
wrap Dk completely. That is, Dk+1 must have a horizontal segment above Dk
and a horizontal segment below Dk. Therefore, the height of Dk+1 is at least
two more than that of Dk. It follows that the height of Dk is at most 2k − 1,
contradicting the inductive hypothesis. Since Nk+1 cannot admit a visibility
representation with height less than 2k + 2, the lemma is proved.
5 Concluding Remarks
It would be of interest to close the Θ(
√
n) gap between the upper and lower
bounds on the required height for the visibility representation of any n-node
four-connected plane graph. We conjecture that the Θ(
√
n) term in our upper
bound can be reduced to O(1).
References
1. Even, S., Tarjan, R.E.: Computing an st-numbering. Theoretical Computer Science
2(3), 339–344 (1976)
2. Fan, J.H., Lin, C.C., Lu, H.I., Yen, H.C.: Width-optimal visibility representations
of plane graphs. In: Tokuyama, T. (ed.) ISAAC 2007. LNCS, vol. 4835, pp. 160–171
(2007)
3. He, X., Kao, M.Y., Lu, H.I.: Linear-time succinct encodings of planar graphs via
canonical orderings. SIAM Journal on Discrete Mathematics 12(3), 317–325 (1999)
4. Kant, G.: A more compact visibility representation. International Journal Compu-
tational Geometry and Applications 7(3), 197–210 (1997)
5. Kant, G., He, X.: Regular edge labeling of 4-connected plane graphs and its ap-
plications in graph drawing problems. Theoretical Computer Science 172, 175–193
(1997)
6. Lin, C.C., Lu, H.I., Sun, I.F.: Improved compact visibility representation of planar
graph via Schnyder’s realizer. SIAM Journal on Discrete Mathematics 18(1), 19–29
(2004)
