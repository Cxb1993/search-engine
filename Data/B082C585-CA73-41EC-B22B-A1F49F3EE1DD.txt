 2
行政院國家科學委員會專題研究計畫成果報告 
高速下行鏈路封包存取系統之停滯感知排程演算法 
A Novel Stall Aware Scheduling Policy for HSDPA 
計畫編號：NSC95-2218-E006-041 
執行期限：95年 10 月 1 日至 96年 7 月 31 日 
主持人：張志文助理教授   國立成功大學電機工程學系 
 
1 中文摘要 
為了提升系統資源的使用效率並同時滿足使用者
之服務品質要求，高速下行鏈路封包存取(HSDPA: 
high speed downlink packet access)採用了媒體控制
層(MAC layer: mediumaccess control layer)快速封包
排程法動態的根據無線通道環境之變化分配系統
資源。在大部份的情境中，快速封包排程法能將頭
端延遲時間納入決策考量以滿足不同服務對封包
延遲之要求。然而，當HSDPA 中特有之停滯問題
(stall problem)發生時，會導致長時間的封包延
遲而造成系統流量嚴重下降。停滯問題指的是接收
端持續等待一封包之重傳，而傳送端卻認為此封包
已成功送達接收端並將此封包從傳送暫存器中移
除。在這個狀況下，將媒體控制層封包送往上層之
程序便會中斷，於是所有已接收之封包便只能持續 
儲存在媒體控制層暫存器中。這個困境只有當一個
計時器計時期滿或者一個偵測視窗過載才得以解
決；只是往往在多個有效使用者的系統中都得經過
較長的時間才可能達到計時器期滿或偵測視窗過
載之狀態。過去的文獻中之封包排程法都未考量停
滯問題所造成之延遲。本計劃發展一個停滯感知排
程法，以進一步改善因為停滯問題所造成的封包延
遲與流量下降。此排程法的主要概念為將封包儲存
在接收端媒體控制層之時間納入排程法之決策準
則。本計劃所提出之停滯感知排程法能有效減少封
包延遲、改善流量。 
 
關鍵詞：停滯防止、停滯感知、高速下行鏈路封包
存取 
 
Abstract 
The objective of this report is to propose a novel stall 
aware scheduler to improve end-to-end throughput 
and reduce total transmission delay. The key point of 
the proposed method is to take into consideration the 
delay induced at the receiving end in addition to the 
head-of-line delay. At the receiving end, the 
additional delay resulted from the stall problem is 
defined as the period of time which starts from the 
arrival of a packet in the MAC layer to the reception 
of this packet in the upper radio resource control 
(RLC) layer. To illustrate the advantages of stall 
aware scheduler, we compare the proposed 
queue-based exponential (QER) stall aware (SA+QER) 
scheduler with conventional maximum 
carrier-to-interference (MCI), round robin (RR), 
proportional fair (PF) and pure QER schedulers. 
Through simulations, we show that the proposed 
SA+QER scheduler outperforms all the other 
schedulers in terms of the goodput and the end-to-end 
packet delay. 
 
Keywords: stall avoidance, stall aware, HSDPA. 
 
1 Introduction 
To fully utilize the system capacity and ensure the 
satisfactory user experience, High speed downlink 
packet access (HSDPA) applies the fast packet 
scheduling in the medium access control (MAC) to 
instantaneously allocate radio resources to users based 
on the time-varying channel quality [1], [2]. In most 
cases, the fast scheduler can achieve the requirement 
of the packet transmission delay for various types of 
services by taking the head-ofline delay into account 
[3], [4]. Unfortunately, the long packet transmission 
delay caused by the stall problem in HSDPA can 
seriously degrade the system goodput. The stall 
problem is defined as the situation in which the 
receiver keeps waiting for a packet that will never be 
retransmitted by the transmitter.  
In the stall situation, the forwarding process of 
the media access control (MAC) layer packets to the 
upper layer can be terminated [5]. As a result, the 
received packets will be accumulated in the reordering 
buffer of the MAC layer for a long time. Only when 
the timer expires [6] or the detection window is 
overbooked [7], the stall problem can be solved and 
the packet forwarding process can be resumed. In the 
literature, however, the impacts of the stall problem 
on the packet transmission delay are ignored in the 
conventional schedulers [3], [4], [8], [9].  
In this report, we proposed a novel stall aware 
(SA) scheduler for HSDPA to improve the goodput 
and reduce the end-to-end packet delivery delay by 
taking the stall problem into consideration. The key 
idea of the proposed SA scheduler is to increase the 
amount of MAC layer packets ready to be forwarded 
to the upper layer during the period of stall situation, 
thereby triggering the packet forwarding process 
earlier and recovering the reduced goodput soon. To 
achieve this goal, the scheduler allocates more 
transmission time intervals (TTIs) to the users in the 
two situations: (1) packets are already stored in the 
reordering buffer of the MAC layer for a long period 
of time; (2) a large amount of packets are accumulated 
in the reordering buffer of the MAC layer.  
transmitting end. 
z : the queue length of user i at the 
receiving end. 
( ) ( )rxiq k
 
3.1. Timer-Based Stall Aware Scheduler 
In the timer-based stall aware scheduler, we consider 
the delay caused by the stall problem in the reordering 
buffer. The mathematical expression of the 
timer-based scheme can be expressed as: 
( ) ( )
( )
( ): exponetial rule
( ) ( )
( )
( ): queue-based exponential rule
( ) ( ) ( )
arg max exp
( ) 1 ( )
( ) ( )
      exp
1 ( )
tx tx
i i i
ii txi
I
tx tx
i
tx
II
k a d k ad k
j a
k ad k
q k q k
q k
γ
γ
⎧ ⎛ ⎞−⎪ ⎜ ⎟= ×⎨ ⎜ ⎟⎜ ⎟⎪ +⎝ ⎠⎩
⎛ ⎞−⎜ ⎟⎜ ⎟⎜ ⎟+⎝ ⎠
	

	 

( ) ( )
( )
( ): timer-based stall aware rule
( ) ( )
      exp
1 ( )
rx rx
i i
rx
III
b d k bd k
bd k
×
⎛ ⎞−⎜ ⎟⎜ ⎟⎜ ⎟+⎝ ⎠

	

(1) 
where 
( ) ( )
1
1( ) ( ) 
N
tx tx
i i
i
ad k a d k
N =
= ∑ ,                  (2) 
( ) ( )
1
1( ) ( ) 
N
rx rx
i i
i
bd k b d k
N =
= ∑                 (3) 
and 
( ) ( )
1
1( ) ( ) 
N
tx tx
i
i
q k q k
N =
= ∑ .                     (4) 
 
Note that the third term (III) of (1) is newly added to 
the queue-based exponential rule. Observing (1), one 
can see that a user can be assigned a higher priority 
when the weighted delay  is getting longer. 
Then, when the timer expires, the large amount of 
available MAC layer packets can be promptly 
forwarded to the upper layer such that the degraded 
goodput can be quickly recovered. For more details 
about the queue-based exponential rule, please check 
[9]. 
( ) ( )rxi ib d k
 
3.2. Window-Based Stall Aware Scheduler 
In the window-based stall aware scheduler, we 
consider the amount of the accumulated packets 
resulted from the stall problem at the receiving side. 
The mathematical model of the window-based stall 
aware scheduler can be expressed as: 
( ) ( )
( )
( ): exponetial rule
( ) ( ) ( )
arg max exp
( ) 1 ( )
tx tx
i i i
ii txi
I
k a d k ad k
j a
k ad k
γ
γ
⎧ ⎛ −⎪ ⎜= ⎨ ⎜⎜⎪ +⎝⎩	

⎞⎟×⎟⎟⎠
 
 
 
( ) ( )
( )
( ): queue-based exponential rule
( ) ( )
( )
( ): window-based stall aware rule
( ) ( )
      exp
1 ( )
( ) ( )
      exp
1 ( )
tx tx
i
tx
II
rx rx
i
rx
III
q k q k
q k
q k q k
q k
⎛ ⎞−⎜ ⎟×⎜ ⎟⎜ ⎟+⎝ ⎠
⎛ ⎞−⎜ ⎟⎜ ⎟⎜ ⎟+⎝ ⎠
	

	

,              (5) 
 
where 
 
( ) ( )
1
1( ) ( ) 
N
rx rx
i
i
q k q k
N =
= ∑ .                 (6) 
Similar to the timer-based stall aware scheduler, the 
third term (III) of (5) is newly added to give a user a 
higher priority when the volume of the accumulated 
packets is getting larger. By receiving more packets in 
the MAC layer, the detection window can be 
overbooked much earlier so as to reduce the idle 
period of packet forwarding process. 
 
4 Simulation Results 
In this section, we first present the effectiveness of the 
timer-based and window-based stall avoidance 
mechanisms. Then, we compare five schedulers, 
including the conventional maximum 
carrier-to-interference (MCI), round robin (RR), 
proportional fair (PF), queue-based exponential rule 
(QER) and the proposed stall aware (SA+QER) 
schedulers in terms of the end-to-end goodput and 
delay. 
Figure 3 shows effectiveness of the timer-based 
and window-based stall avoidance mechanisms in 
terms of the end-to-end goodput, where the timer 
expires after two seconds and the size of detection 
window is 32. There are Nu = 30 active users in the 
system. As shown in the figure, the window-based 
stall avoidance mechanism exhibit its ability to 
combat against the stall problem while the timer-based 
mechanism can also recover the reduced goodput 
within two seconds. Moreover, without the aid of the 
stall avoidance mechanism, the goodput of the pure 
Max. C/I scheduler decreases to zeros. Note that the 
window-based stall avoidance mechanism is usually 
designed to detect the occurrence of the stall problem 
earlier than the timer-based mechanism. 
Figures 4 and 5 compare the proposed SA+QER 
scheduler with four conventional schedulers, inclusive 
of the MCI, RR, PF and QER schedulers in terms of 
the cumulative density function of the goodput, where 
the timer expirations are one and three seconds with 
Nu = 30, respectively. In these figures, the 
timer-based stall avoidance mechanism is applied to 
solve the stall problem. On can find that the proposed 
SA+QER scheduler has best goodput performance. 
For example, as shown in Fig. 5, the 50 percentile 
goodput of the SA+QER scheduler is 1.3 Mbps, while 
 4
