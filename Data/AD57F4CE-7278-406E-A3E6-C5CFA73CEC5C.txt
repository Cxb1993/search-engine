A List-based Strategy for Optimal Replica Placement
in Data Grid Systems
Yih-fang Lin1,2, Pangfeng Liu1,3, and Jan-Jan Wu2
1 Department of Computer Science and Information Engineering
National Taiwan University, Taipei, Taiwan
{d92009,pangfeng}@csie.ntu.edu.tw
2Institute of Information Science, Academia Sinica, Nankang, Taiwan
{ice,wuj}@iis.sinica.edu.tw
3Graduated Institute of Networking and Multimedia
National Taiwan University, Taipei, Taiwan
Abstract
Data replications is a typical strategy for improving access performance and data
availability in Data Grid systems. Current works on data replication in Grid systems
focus on the infrastructure for data replication and replicas creating/deleting mech-
anisms. The important problem of choosing suitable locations for placing replicas
in Data Grids has not been well studied.
In this paper, we address the problem of data replica placement in Data Grids
given a sequence of priority lists, which specify the forwarding policies for data
requests. We propose a new placement algorithm that finds the optimal locations
for the replicas so that the workload among replicas is balanced. We also propose
a fast algorithm that decides the minimum number of replicas required when the
maximum workload capacity of each replica server is given.
Keywords Data Grids, Replica placement, Priority list, Optimal algorithms.
1 Introduction
Grid computing is an important mechanism for utilizing distributed computing re-
sources. These resources are distributed in different geographical locations, but are
organized to provide an integrated service. A grid system can provide computing
resources so that users at different locations can utilize the CPU cycles of remote
sites. In addition, users can access important data that are available only in sev-
eral locations, without the overheads of replicating them locally. These services are
provided by an integrated grid service platform so that user can access the resource
transparently and effectively.
1
authority in accessing the resources, and thus prohibiting his/her data requests from
accessing some of the sites. Second, a static policy may not satisfy a data request
with special requirements (e.g. quality of service requirement). Furthermore, the
sites a request has visited may influence the subsequent forwarding path of the
request. Due to these reasons, we believe that a suitable forwarding policy should
allow different requests to have different forwarding paths. In order to exploit more
pragmatic request forwarding policies, we introduce a sequence of priority lists to
allow more flexible request forwarding policies. We then solve the replica placement
problem under this model.
In this paper, we focus on a tree-like-structured grid model, which reflects the
hierarchical structure in most grid systems. We study replica placement in such tree-
structured model augmented with priority lists-based forwarding policy. We propose
an efficient algorithm that finds the optimal locations for placing the replicas so that
the workload among these replica is balanced. We also propose a new algorithm that
determines the minimum number of replicas required when the maximum workload
capacity of each replica server is given.
The rest of the paper is organized as follows. Section 2 describes our data grid
model, and formally define our replica placement problem. Section 3 presents our
replica placement algorithms, and provides theoretical analysis for them. Section 4
concludes and addresses several open questions and future works.
2 Model
We propose a priority list-based data grid model that exploits pragmatic request
forwarding policies in many Data Grid systems.
In the following we will explain the notion of priority list, the definitions of
replica placement, and the problems we want to solve. In addition, we also propose
a restricted model for tree-structured hierarchical grids.
2.1 The General Model with Priority Lists
We begin with several definitions. A node set V = {n1, n2, . . . , nn} represents the
n sites in a data grid. We have m requests and each of them can be presented
as a priority list. As a request we will use the term “request” and “priority list”
interchangeably in the rest of the paper.
Each priority list is a list of distinct nodes from V , which represent the sequence
of nodes that a request will inquire for the data. We denote the i-th priority list
by li = (pi,1, pi,2, . . . , pi,ki |), where ki is the number of nodes in li. A priority list
sequence is the set of all m priority lists for the same data, and is denoted by
L = (l1, l2, . . . , lm).
We define a server set to be the subset of V in which each of the nodes has a
replica of the data requested by the m requests. A request finds its data as follows.
A server set S satisfies a request li, if and only if the intersection of S and li is not
empty. That is, the request li can obtain data from one of the server in S.
A request will be forwarded to the nodes in its priority list one at a time until it
encounter a node that has the data. As a result a node c is the server of a request
3
We will refer to the first problem as LoadBalance, and the second problem
as PlaceR. We denote an instance of LoadBalance as P ′(L, k) and an instance
of PlaceR as P (L,W ). We also denote the placements which can satisfy the first
objective as R(L, k) and the ones which satisfy the second objective as R′(L,W ),
as defined in the following equations.
R(L, k) = {R|R ∈ Q, |R| = k,∀S ∈ Q, |S| = k, Load(L,R) ≤ Load(L,R)}. (4)
R′(L,W ) = {R|R ∈ Q,Load(L,R) ≤ W,∀S ∈ Q,Load(L,S) ≤ W, |R| ≤ |S|}. (5)
2.3 The Sibling Tree Model
In the rest of the paper, we will focus on a restricted model, a sibling tree model,
due to its resemblance to the hierarchical grid management usually found in popular
grid systems.
The communication model in an initial work on replica placement for Data Grids
reported in [1] is a restricted model, in which the nodes connected as a tree, due
to the resemblance of the Data Grids to the hierarchical grid management. In this
restricted model, the communication patterns of the requests forwarding form a
tree, in which each edge is a communication channel going upward toward the root
of the tree.
In our sibling tree model, in addition to the communication channel from each
node to its parent, we allow the communication channels among the siblings since,
in a hierarchical grid, a request would usually visit all of the nodes managed by the
same super node before it is forwarded to the super node. In other words, we assume
that a request must finish traveling among all of the children of a node before it is
forward to the node. Moreover, we assume that the traveling of a request among
the siblings can be accomplished by a ring connecting the siblings with the one
way communication channels in order to corresponding to the load balance issue
involved by many distributed systems as well.
We view the data grid as a tree plus the edges of the rings, and each of the rings
is constructed from the children of each node of the tree. Each edge is one way only,
and a request must be forwarded through a ring edge before a tree edge. We use a
tree T plus E′, the edges of the rings, to denote a data grid, which is also called a
sibling tree.
We call a path of forwarding a request from each node a to the root in tree T as
a sibling path, denoted as SP (T, a). If a request travels from the i-th child, ci, of
node a to the root, the path of the request traveling, SP (T, ci), can be described as
follows. First, the request will visit ci. Next, the request will be forwarded to the
next child of node a with the ring edges until it visits all of the siblings of node ci.
Finally, the request will be forwarded to node a. After the request visits node a, it
will be forwarded recursively in the same way described above until it reaches the
root of tree T .
The following is the formal description of a sibling path starting from one of the
children of node a, which has q children. Let (c1, c2, . . . , cq) be the children of a, ci
be the i-th child of a, SR(ci,) be the path among the children of node a starting from
ci along the ring connecting the children, and SP (T, ci) be a sibling path from ci.
The sibling ring, sibling path and their associated property are defined as follows.
5
We now define a Spill function S(v, i). Assuming n(v, i) is a server, S(v, i)
indicates the minimum workload of node n(v, i) by placing m(Tv,W ) replicas in Tv
and none at n(v, j) for 0 ≤ j < i such that Tv is satisfied. By definition S(v, 0) is
the minimum workload on a node v due to an optimal replica set for Tv. Note that
if there is no replica set for Tv with cardinality m(Tv,W ) such that Tv is satisfied,
then S(v, i) is set to infinity; for example, if v is a leaf, S(v, i) is w(v) when i < r(v),
and infinity when i ≥ r(v).
3.1.2 Bottom-up Computation
Here, we describe a bottom-up process for computing the S and m functions for
every node in a data grid tree. By definition, if v is a leaf, S(v, i) is w(v) when
i < r(v), and infinity otherwise. Now we want to compute the S and m functions for
an internal node v that has children v1, . . . , vn, and with SP (Tr, v1) = (v1, . . . , vn, r)
as a sibling path. Since the process is bottom-up, we assume that all the S and
m functions of v1, . . . vn are known. The following theorem establishes the relation
between the optimal replica placements for a tree and any of its subtrees.
Theorem 1. Consider a sibling tree T , a node v in T , and a workload W . There ex-
ists an optimal replica placement R for T with workload limit W such that m(Tv,W ) ≤
|R ∩ T ′v| ≤ m(Tv ,W ) + 1
Theorem 1 suggests that for a node v with children v1, . . . , vn, there exists an
optimal replica placement R with workload limit W such that m(Tvj ,W ) ≤ |R ∩
T ′vj | ≤ 1 + m(Tvj ,W ), for 1 ≤ j ≤ n. As a result, when each optimal placement
with m(Tvj ,W ) replicas for each Tvj is given, in order to find the optimal replica
placement for Tv, we have to place the least extra replica set denoted as e(v, 0).
There are only two possible cases for e(v, 0) according to consider whether there
is any essential extra replica placed at one of v’s children for e(v, 0). The following
discussion of this two possible cases is assumed that v is a server and each optimal
placement with m(Tvj ,W ) replicas for each Tvj is given. We make e
′(v) be the
least extra replicas in Tv one of which is forced to placed at one of v’s children such
thatTv is satisfied, and e
′′(v, 0) be the parents of the least extra replicas in Tv none
of which is placed at one of v’s children such that Tv is satisfied.
In the first possible case for e(v, 0), there is at least one extra replica placed at
one of v’s children, the set e′(v) can be e(v, 0), and we will discuss how to find e′(v)
in section 3.1.3.
In the second possible case for e(v, 0), there is none of e(v, 0) placed at any
one of v’s children, e(v, 0) can is the nodes each of which is an arbitrary child of
one distinct node in e′′(v, 0), and this case may happen only while ∀vj, r(vj) ≥ n(or
∀vj, w(vj) = 0) and
∑
1≤j≤n w(vj) < W −w(v). Moreover, we can get set e
′′(v, 0) as
follows. We repeatedly pick up the remaining vj that has the largest S(vj , n)−w(vj)
and place only an extra replica at an arbitrary child of this vj, until the workload
of v is within W . Finally, the above process of placing the extra replicas must
minimize the workload of node n(v, 0) = v.
The following is two examples to respectively show the two possible cases. Fig-
ure 1 shows an example which we should consider the second case since w(v) +∑
0<j<6 w(vj) = 8 is not larger than W = 10 and all r(vj) is 8 which is larger than
5. However, this example belongs to the first case because if we insist not to place
7
extra m(Tv,W ) −
∑
1≤j≤n m(vj ,W ) replicas among vj and vjs’ children. Now,
considering the optimal placement with at least one replica at one of v’s children,
we would derive that S(v, i) is w(v) when i < r(v) and is infinity when i ≥ l(v)
by the early definition. Moreover, considering the optimal placement with none
replica at v’s children, it is clear that by choosing m(Tv,W ) −
∑
1≤j≤n m(vj ,W )
vj’s that have the largest S(vj , i + n) − w(vj) (denoted as e
′′(v, i)), we can derive
that S(v, i) is w(v)+
∑
vj∈e′′(v,i)
w(vj)+
∑
vj /∈e′′(v,i)
S(vj , i + n) and is infinity when
i+ n ≥ r(vj)∀1 ≤ j ≤ n.
3.1.3 Finding e′(v)
In this section, assuming that a node v is a server with n children, v1, . . . , vn, we
will discuss how to find the least extra replicas, e′(v), in which there is at least
one is one of v’s children, such that Tv is satisfied when each optimal placement
with m(Tvj ,W ) replicas for each Tvj is given, in order to find the optimal replica
placement for Tv. The computation will be respectively considered by n sub cases,
in each of which we assume distinct one of v’s children being a server called critical
server respectively. Since the discussion of each sub case is similar, we can make a
be the critical server and ai be n(a, i), and the computation is described as follows.
For the convenience of the explanation, first we define some terminologies as
follows. Let Fi be the set of the nodes in
⋃
0<k≤i Tak for 0 < k < n, F0 be Ta+Fn−1,
F ′i be the set of the nodes in Fi−{ai}, and m
′(i) be the least number of extra replicas
in F ′i for 0 ≤ i < n such that each sub tree in Fi is satisfied. We define a satisfying
extra replica set for Fi as an extra replica set which make the subtrees in Fi satisfied.
Moreover, assuming n(ai, j) is a server, S
′(i, j) indicates the minimum number of
the priority lists coming from F ′i satisfied by node n(ai, j), by placing m
′(i) extra
replicas in F ′i and none at n(ai, j) for 0 ≤ j < i such that the subtrees in Fi are
satisfied. For ease of explanation if there is no satisfying extra replica set for F ′i
with cardinality m′(i) that could control the workload of n(ai, j) within W , S
′(i, j)
is set to infinity. By the definitions, S′(1, j) must be as same as S(a1, j) and m
′(1)
must be 0.
Theorem 3. Consider that node a has to be placed a replica. There exists a mini-
mum satisfying extra replica placement R′ for F0 so that m
′(i) = |R′ ∩ F ′i |
Theorem 3 implies that for a node ai, there exists a minimum satisfying extra
replica set R′ so that m′(i) = |R′ ∩ T ′vj |. As a result, when this minimum satisfying
extra replica set with m′(i−1) replicas for Fi−1 is given, in order to find the minimum
satisfying extra replica placement for Fi, we have to place not more than one extra
replica between ai−1 and arbitrary one of ai’s children. If S(ai, 0) + S
′(ai−1, 1) is
within W , m′(i) must be equal to m′(i− 1) and otherwise, m′(i) must be equal to
1 +m′(i− 1).
Theorem 4. Consider that node a has to be placed a replica. There exists a mini-
mum extra replica placement R′ for F0 so that |R
′ ∩ Fi| = m
′(i), R′ minimizes the
total workload due to R′ from F ′i on n(ai, j) for j ≥ 1, and |R
′ ∩ F ′i | = m
′(i).
An important implication of Theorem 4 is that when we compute S′(i, j) for
j > 0, we can be certain that there exists a satisfying extra replica set that can
9
step1-4 Considering node a4 = v3, since S
′(3, 1) + S(v3, 0) = 8 < W , m
′(4) is
m′(3) = 2, and S′(4, 0) = S′(3, 1) + S(v3, 0) = 8, and S
′(4, 1) = S′(3, 2) +
S(v3, 1) =∞.
step1-5 Considering node a0 = v4, since S
′(4, 1) + S(v4, 0) = ∞ > W , m
′(0) is
1 + m′(4) = 3, and S′(0, 0) = S(v4, 0) = 8.
After getting all m′(i) and all S′(i, j), because a is the critical server, we can get
the minimum satisfying extra replica set for F0 with starting from a as follows.
step2-1 Considering node a = v4, since m
′(0)−m′(4) = 1 and S(v4, 0) − w(v4) <
S′(4, 1), we place a replica at a4, which is v3.
step2-2 Considering node a4 = v3, since m
′(4)−m′(3) = 0, we do nothing.
step2-3 Considering node a3 = v2, since m
′(3)−m′(2) = 1 and S(v2, 1)−w(v2) <
S′(2, 2), we place a replica at a2, which is v1.
step2-4 Considering node a2 = v1, since m
′(2)−m′(1) = 1 and S(v1, 0)−w(v2) >
S′(1, 1), we place a replica at an arbitrary one of a2’s children.
Finally, we place three extra replicas when we assign v4 to be the critical server.
Figure 5 shows that the different critical servers may develop the different minimum
satisfying extra replica sets.
W = 10.
r(v4) = 7.
w(v5) = 1.
r(v5) = 3.
w(v1) = 1.
r(v1) = 7.
w(v2) = 1.
r(v2) = 2.
w(v3) = 1.
r(v3) = 2.
... ...v
v1 v2 v3 v4 v5
w(v4) = 1.
Figure 3: An example which must belong to the first case with S(v1, k) = 7 for 0 < k < 7,
S(v2, k) = 6 for 0 < k < 6, S(v3, k) = 2 for 0 < k < 2, S(v4, k) = 9 for 0 < k < 7 and
S(v5, k) = 4 for 0 < k < 3.
3.1.4 Top-down replica placement
We now place replicas from the top to the bottom of the tree recursively. Consider
a node v with n children v1, . . . , vn. Our goal is to place replicas such that the
workload on n(v, i) is minimized by placing m(Tv,W ) replicas in T
′
v; therefore, our
recursion starts from the root with i = 0 since the root must be a server. From
the discussion in Section 3.1.2, we know we can accomplish this by either placing
replicas in e(v, i) in order to minimize the workload on n(v, i). Note that if |e′(v)|
is not more than |sete′′(v, i)|, e(v, i) will be e′(v).
The algorithm is described in the following. If there is a replica on n(v, i) and
none on n(v, j) for 0 ≤ j ≤ i, then the nodes in e(v, i) must be assigned replicas, and
11
a = v1.
r(v4) = 7.
w(v5) = 1.
r(v5) = 3.
w(v1) = 1.
r(v1) = 7.
w(v2) = 1.
r(v2) = 2.
w(v3) = 1.
r(v3) = 2.
     
     
     
     
     
     
     
     








     
     
     
     
     
     
     
     








  
  
  
  
  





     
     
     
     
     
     
     
     








... ...v
v1 v2 v3 v4 v5
W = 10.
w(v4) = 1.
W = 10.
r(v4) = 7.
w(v5) = 1.
r(v5) = 3.
w(v1) = 1.
r(v1) = 7.
w(v2) = 1.
r(v2) = 2.
w(v3) = 1.
r(v3) = 2.
     
     
     
     
     
     
     
     
     









  
  
  
  




     
     
     
     
     
     
     
     








     
     
     
     
     
     
     
     








... ...v
v1 v2 v3 v4 v5
a = v2.
w(v4) = 1.
W = 10.
r(v4) = 7.
w(v5) = 1.
r(v5) = 3.
w(v1) = 1.
r(v1) = 7.
w(v2) = 1.
r(v2) = 2.
w(v3) = 1.
r(v3) = 2.
     
     
     
     
     
     
     
     
     









   
   
   
   




     
     
     
     
     
     
     
     
     









   
   
   
   
   





... ...v
v1 v2 v3 v4 v5
a = v3.
w(v4) = 1.
W = 10.
r(v4) = 7.
w(v5) = 1.
r(v5) = 3.
w(v1) = 1.
r(v1) = 7.
w(v2) = 1.
r(v2) = 2.
w(v3) = 1.
r(v3) = 2.
     
     
     
     
     
     
     
     
     









     
     
     
     
     
     
     
     
     









  
  
  
  
  





     
     
     
     
     
     
     
     
     









... ...v
v1 v2 v3 v4 v5
a = v5.
w(v4) = 1.
Figure 5: The minimum satisfying extra replica sets with different critical servers when
S(v1, k) = 7 for 0 < k < 7, S(v2, k) = 6 for 0 < k < 6, S(v3, k) = 2 for 0 < k < 2,
S(v4, k) = 9 for 0 < k < 7 and S(v5, k) = 4 for 0 < k < 3.
LN logN). Because the bound on the workload U is usually represented by a 32
bit integer, the total execution time can be bounded by O(N2 logN + LN log2 N).
Theorem 5. The algorithm BinSearch finds the optimal replica set for LoadBal-
ance in time O(logN + logU)(N2 + LN logN), where N is the number of tree
nodes in the data grid, L is the length of the longest priority list, and U is the
maximum workload. If there is a constant bound on U , the time complexity is
O(N2 logN + LN log2 N).
4 Conclusion
This paper addresses the issues of placing data replicas in Data Grid systems with
the notion of priority lists. We focus on the Data Grid systems which can be
modeled by sibling trees. We formulate two problems: LoadBalance and PlaceR,
and derive efficient algorithmic solutions for them.
The minimum length of the priority lists starting at a node specifies a distance
from this node within which a replica must be found. We have proposed an efficient
algorithm that selects strategic locations for placing the replicas so that the workload
among these replicas is balanced, and all of the priority lists are satisfied. We have
also proposed a new algorithm that determines the minimum number of replicas
required when the maximum workload on the replica servers is known.
One open question for the replica placement problem is to determine the optimal
replica locations when the Grid structure is a general graph. This problem is NP-
13
[5] W. B. David. Evaluation of an economy-based file replication strategy for a data
grid. In International Workshop on Agent based Cluster and Grid Computing,
pages 120–126, 2003.
[6] W. B. David, D. G. Cameron, L. Capozza, A. P. Millar, K. Stocklinger, and
F Zini. Simulation of dynamic grid rdeplication strategies in optorsim. In In
Proceedings of 3rd Intl IEEE Workshop on Grid Computing, pages 46–57, 2002.
[7] M.M. Deris, Abawajy J.H., and H.M. Suzuri. An efficient replicated data access
approach for large-scale distributed systems. In IEEE International Symposium
on Cluster Computing and the Grid, April 2004.
[8] W. Hoschek, F. J. Janez, A. Samar, H. Stockinger, and K. Stockinger. Data
management in an international data grid project. In In Proceedings of GRID
Workshop, pages 77–90, 2000.
[9] K. Kalpakis, K. Dasgupta, and O. Wolfson. Optimal placement of replicas in
trees with read, write, and storage costs. IEEE Transactions on Parallel and
Distributed Systems, 12(6):628–637, June 2001.
[10] H. Lamehamedi, B. Szymanski, Z. Shentu, and E. Deelman. Data replication
strategies in grid environments. In In Proceedings of 5th International Con-
ference on Algorithms and Architecture for Parallel Processing, pages 378–383,
2002.
[11] R. Moore, C. Baru, R. Marciano, A. Rajasekar, and M. Wan. I. Foster and C.
Kesselman edited, The Grid: Blueprint for a Future Computing Infrastructure,
chapter Data intensive computing. Morgan Kaufmann PUblishers, 1999.
[12] K. Ranganathan, A. Iamnitchi, and I.T. Foste. Improving data availability
through dynamic model-driven replication in large peer-to-peer communities.
In In 2nd IEEE/ACM International Symposium on Cluster Computing and the
Grid, pages 376–381, 2002.
[13] K. Ranganathana and I. Foster. Identifying dynamic replication strategies for
a high performance data grid. In In Proceedings of the International Grid
Computing Workshop, pages 75–86, 2001.
[14] H. Stockinger, A. Samar, B. Allcock, I. Foster, K. Holtman, and B. Tierney.
File and object replication in data grids. In In 10th IEEE Symposium on High
Performance and Distributed Computing, pages 305–314, 2001.
[15] N.-F. Tzeng and G.-L. Feng. Resource allocation in cube network systems
based on the covering radius. IEEE Transactions on Parallel and Distributed
Systems, 7(4):328–342, April 1996.
15
eggs which was delicious and expensive too, 6.99 USD. However, I realized
that they provided breakfast after I arrived at the lobby.
The first day keynote speech was given by Dr. Joel Salts, which was enti-
tled “ “Translation Research Design Templates, Grid Computing, and HPC
”. This speech was mainly about the design pattern about the translation
between Medical Pathology and Bio-informatics. Dr. Salts gave a very vivid
speech in my opinion. However, I could not fully understand what he talked
about since, first, my English capability is not good enough, and second, the
lack of my background knowledge. I had few, if any, background knowledge
about the Pattern Design and the Bio-informatics. But still, I was very ex-
cited about his speech. After speech, we had a coffee break. Since I known
no body in this conference yet, I ate along and planed which session I might
be interesting in.
The morning session I attended was “Algorithm - Scheduling”. The first
speech was given by a Spanish lady, whose accent was kind of difficult for me
to understand. Although I’ve read the related papers about her topic, the
Advanced Reservation, I still got a fuzzy idea about what her talk about. The
second speech was given by a Germany. I think he is a professor because of
his well prepared presentation. I was very impressive. He hided all technical
details(although it is technical session), but the intuitive thought about his
research and results. Presentation was very critical in the conference. You
need to let people know what you are doing and how you did in only 25
minutes. The following speeches were out of my memory...
2
