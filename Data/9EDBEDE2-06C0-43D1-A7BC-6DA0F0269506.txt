行政院國家科學委員會專題研究計畫成果報告 
最小編碼器的等效迴旋碼 
Equivalent Convolutional Codes with Minimal Encoders 
計畫編號：NSC 94-2213-E-262-002- 
執行期限：94 年 08 月 01 日至 95 年 07 月 31 日 
主持人：唐宏驊 E-Mail: tang@mail.lhu.edu.tw 
計畫參與人員：林志遠，廖盈盛，王維漢 
執行機構及單位名稱：龍華科技大學電機系 
一、中文摘要 
    在通訊上，迴旋碼是普遍應用的錯誤
更正碼。在白色高斯分布雜訊 (AWGN, 
additive white Gaussian Noise) 的離散無記
憶通道 (DMC, discrete memoryless channel) 
環境下，依最大可能 (maximum likelihood) 
的解碼原則；腓特比解碼器是最佳的解碼
器。腓特比解碼器的工作原理，乃藉由籬
笆結構 (trellis) 的輔助，規律的重覆加
法、比較、與選擇的運算；最後的生存路
徑 (survivor path) 便是最佳的解碼結果。
傳統上，它的解碼複雜度是隨著碼的維度
與碼的延遲器或暫存器個數之和，成指數
式的增加。以上的籬笆結構，一般稱之為
傳統的籬笆結構，以有別於最小的籬笆結
構。在最小的籬笆結構裡，它的解碼複雜
度則較傳統者，簡化許多。它的複雜度約
略是碼延遲器數的指數。更甚者，如果可
以將之適當的碼重排，則複雜度還能夠更
降低。 
關鍵詞 迴旋碼，腓特比演算法，最
小籬笆結構，解碼複雜度 
Abstract 
On a communication system, convolutional codes 
are widely used over AWGN channels with 
Viterbi algorithm associated to the maximum 
likelihood principle for decoding.  It is well 
known that the Viterbi algorithm takes advantage 
to the trellis for a code.  One has the survivor 
path by regularly carrying out addition, 
comparison and selection. The code path 
corresponding to the survivor path is the optimal 
solution of Viterbi decoder.  Conventionally, the 
decoding complexity is proportional to exponent 
of sum of the code dimension and the memory 
size of a code.  Such a trellis structure for a 
convolutional code we call it conventional.  The 
decoding complexity can be greatly mitigated if 
the minimal trellis is considered.  The 
complexity is just about exponent of the memory 
size of a code.  The complexity can be further 
reduced if symbols of code words are 
simultaneously reordered. 
Keywords: Convolutional Code, Viterbi 
algorithm, Minimal trellis module, decoding 
complexity 
 
二、前言 
    迴旋碼 (convolutional code) 與區塊
碼(block code) 同屬線性碼，但最大的不同
是迴旋碼的輸出具延遲記憶的效果，即現
在的輸入會影響當下至其後的數個碼字 
(code word)。因此與區塊碼相較，迴旋碼
的碼字大小可以相對小許多；但取償的代
價則在延遲記憶效應增加的解碼複雜度。
但在碼率 (code rate) 相當的條件下來
看，區塊碼與迴旋碼就解碼複雜度與錯誤
表現來分析，應該要是匹配的。 
舉個例子來說，眾所皆知迴旋碼有籬
柵結構的對應理解，例如圖(一)。 
 
圖(一) 
這樣的理解，自然得到了 Viterbi algorithm 
的結論。在離散無記憶通道 (DMC, discrete 
 2
generator matrix)對應觀察得到的。 
    ),,( νkn 迴旋碼的生成函數
，其中
是 的矩陣，  是二元域(binary 
field) 上的多項式， 則是二元域上的
矩陣。定義
∑ =× == mi iinkij DGDgDG 0)]([)( )(DG
nk × )(Dgij
iG
nk × { }))(deg(max Dgm ijji = ，
。則ki <≤0 { }ii mm max= ，是迴旋碼的侷
限長度(constraint length)； ∑ −== 10ki imν 乃迴
旋碼的記憶大小 (memory size)。迴旋碼可
以看成是半邊無窮 (semi-infinite) 的區塊
碼；它的生成矩陣則形如， 
⎟⎟
⎟⎟
⎟
⎠
⎞
⎜⎜
⎜⎜
⎜
⎝
⎛
=
O
L
L
L
m
m
m
scalar GGG
GGG
GGG
G
10
10
10
。 
在經過 個 裡的行後，或 個矩陣
行後，其後都是規律的重複，除了依次降
一個矩陣列外。定義 
mn scalarG m
⎟⎟
⎟⎟
⎟
⎠
⎞
⎜⎜
⎜⎜
⎜
⎝
⎛
=
0
1
ˆ
G
G
G
G
m
M ， 
Gˆ 是 nk ×+ )( ν 的矩陣，其中瑣細的零列
(trivial zero row vectors)是屏除不算的。   
如一個 迴旋碼的生成矩陣 )2,3,5(
⎟⎟
⎟
⎠
⎞
⎜⎜
⎜
⎝
⎛
=
10330
23120
01111
)(DG ； 
這裡是將 以八進位表示，例如
， 。而 
)(Dgij
D+= 13 26 DD +=
⎟⎟
⎟
⎠
⎞
⎜⎜
⎜
⎝
⎛
=
10110
01100
01111
0G ，
。 
⎟⎟
⎟
⎠
⎞
⎜⎜
⎜
⎝
⎛
=
00110
11010
00000
1G
在 的第一列即是瑣細的零列。 1G
圖(三) 
以上即是生成矩陣 之迴旋碼的最小
籬柵結構，只不過重複的繪了兩次。 
)(DG
    最小籬柵結構與最小展開生成矩陣是
如此的對應觀察的： 
對應在第一個生成列 ，循著最小
籬柵結構，由第一層第一個的狀態出發，
往下方向，跟著分枝上的標號其為生成列
所示之 ，其中的最後一個 1，行經
路徑已回到最上列的 0 狀態；對應生成列
最末的一個 0，路徑仍續經過 0 狀態，只是
往前一個分枝，完成一個碼字。觀察此路
徑，從 0 狀態出發，至第一次抵達 0 狀態。
出發的狀態，在第零層(編次，自零開始)，
是往右方向分叉的。當路徑第一次回到 0
狀態，在第四層，是“收斂＂到 0 狀態。
出發的狀態是在第一層，可以觀察到最小
籬柵結構，第一層是分叉的；而在第四層
是收斂的。同理，第二個生成列
。於是行經路徑由第
二層 0 狀態往下開始，經過碼字的界線(每
經過一個碼字界線，亦即該生成列累積有
一個延遲記憶)，而後在第一次抵達 0 狀態
時，是在第五層(或稱第零層，即對
)0,1,1,1,1(
0,1,1,1,1
)1,1,0,1,00,1,,1,0,0( M
5=n 取
模數)。這在最小籬柵結構，可觀察到在第
二層往右是分叉的，而在第五層，是左方
向的分枝收斂於此層。同樣的，第三個生
成列對應的路徑，在最小籬柵結構是，於
第一層分叉往下，經過碼字分界，收斂於
第三層。 
    在最小展開生成矩陣裡，不同的生成
列，它們有不同位置的起始 1 處；同時它
們的結束 1 處，也必在不同位置。這些不
同的起始 1 處，在最小籬柵結構裡，觀察
得到的是，在不同的 層處，是往右分叉
的。不同的結束 1 處，在最小籬柵結構裡，
觀察得到的是，在不同的 層處，分枝是
k
k
 4
t_spectra =   1  3  5  7  16  26  38 
f_spectra =   1  6  15  29  76  149  262 
⎟⎟⎠
⎞
⎜⎜⎝
⎛=
1240
111 1
G  
32=complexity  5=freed  
t_spectra =   2  4  8  16  32  64  128 
f_spectra =   2  8  24  64  160  384  896
⎟⎟⎠
⎞
⎜⎜⎝
⎛=
3320
103 3
G  
36=complexity  4=freed  
t_spectra =   1  3  5  9  17  33  62 
f_spectra =   2  5  14  33  76  171  372 
⎟⎟⎠
⎞
⎜⎜⎝
⎛=
0332
1033
G  
40=complexity  5=freed  
t_spectra =   3  6  11  23  49  105  224 
f_spectra = 5  19  50  124  313  781  1906
⎟⎟⎠
⎞
⎜⎜⎝
⎛=
1322
2331
G  
48=complexity  5=freed  
t_spectra =   2  4  8  16  32  65  132 
f_spectra = 2  8  24  64  160  386  908 
⎟⎟⎠
⎞
⎜⎜⎝
⎛=
1330
3203
G  
 6
表(二) 
)3,2,4(),,( =νkn ： 
48=complexity  6=freed  
t_spectra =   10  0  26  0  142  0  574 
f_spectra = 26  0  128  0  882  0  4694 
⎟⎟⎠
⎞
⎜⎜⎝
⎛=
3324
1233
G  
56=complexity  6=freed  
t_spectra =   9  0  25  0  161  0  622 
f_spectra = 25  0  116  0  1047  0  5249 
⎟⎟⎠
⎞
⎜⎜⎝
⎛=
7424
1133
G  
64=complexity  6=freed  
t_spectra =   1  8  9  16  57  106  219 
f_spectra = 1  20  34  76  295  679  1598
⎟⎟⎠
⎞
⎜⎜⎝
⎛=
3322
3075
G  
72=complexity  6=freed  
t_spectra =   9  0  25  0  161  0  626 
f_spectra = 23  0  105  0  923  0  4644 
⎟⎟⎠
⎞
⎜⎜⎝
⎛=
0374
1233
G  
80=complexity  6=freed  
t_spectra =   1  8  9  16  57  106  219 
f_spectra = 1  20  34  72  291  669  1536
⎟⎟⎠
⎞
⎜⎜⎝
⎛=
3564
3311
G  
96=complexity  6=freed  
t_spectra =   1  8  9  16  57  106  219 
f_spectra = 1  20  34  72  291  669  1536
⎟⎟⎠
⎞
⎜⎜⎝
⎛=
3714
2323
G  
表(三) 
)4,2,4(),,( =νkn ： 
96=complexity  7=freed  
t_spectra =   6  10  14  39  92  210  458
f_spectra = 17  33  66  215  588  1528  
3666 
⎟⎟⎠
⎞
⎜⎜⎝
⎛=
1746
3237
G  
112=complexity  7=freed  
t_spectra =   4  9  16  38  86  196  452 
f_spectra = 8  28  74  200  519  1336  
3434  3666 
⎟⎟⎠
⎞
⎜⎜⎝
⎛=
501616
3331
G  
128=complexity  7=freed  
t_spectra =   2  8  18  35  70  158  382 
f_spectra = 2  24  70  174  398  1016  
2714 
⎟⎟⎠
⎞
⎜⎜⎝
⎛=
3166
6631
G  
t_spectra = 2  1  2  5  4  9  14 
f_spectra = 2  2  6  14  16  38  66 
⎟⎟⎠
⎞
⎜⎜⎝
⎛=
113302
132031
G  
64=complexity  8=freed  
t_spectra = 3  0  6  0  15  0  36 
f_spectra = 4  0  16  0  56  0  176 
⎟⎟⎠
⎞
⎜⎜⎝
⎛=
113322
323031
G  
68=complexity  7=freed  
t_spectra = 2  1  2  5  4  9  14 
f_spectra = 2  2  6  14  16  38  66 
⎟⎟⎠
⎞
⎜⎜⎝
⎛=
112330
131203
G  
72=complexity  8=freed  
t_spectra = 3  0  6  0  15  0  36 
f_spectra = 4  0  16  0  56  0  176 
⎟⎟⎠
⎞
⎜⎜⎝
⎛=
133302
332031
G  
80=complexity  8=freed  
t_spectra = 3  0  6  0  15  0  36 
f_spectra = 4  0  16  0  56  0  176 
⎟⎟⎠
⎞
⎜⎜⎝
⎛=
132132
333201
G  
 8
表(六) 
七、參考文獻 
[1] G. D. Forney, Jr., “Coset codes --- Part 
II: Binary lattices and related codes,” 
IEEE Trans. Inform. Theory, vol. 34, pp. 
1152—1187, Sept. 1988. 
[2] D. J. Muder, “Minimal trellises for 
block codes,” IEEE Trans. Inform. 
Theory, vol. 34, pp. 1049—1053, Sept. 
1988. 
[3] G. D. Forney, Jr., “Dimension/Length 
profiles and trellis complexity of linear 
block codes,” IEEE Trans. Inform. 
Theory, vol. 40, pp. 1741—1752, Nov. 
1994. 
[4] S. Lin and D. J. Costello, Jr., Error 
Control Coding. Englewood Cliffs, New 
Jersey: Prentice-Hall, 1983. 
[5]  R. J. McEliece, “On the BCJR trellis for 
linear block codes,” IEEE Trans. Inform. 
Theory, vol. 42, no. 4, pp. 1072—1092, 
July 1996. 
[6] R. J. McEliece and W. Lin, “The trellis 
complexity of convolutional codes,” 
IEEE Trans. Inform. Theory, vol. 42, no. 
6, pp. 1855—1864, Nov. 1996. 
[7] H.-H. Tang, M.-C. Lin, “On )1,( −nn  
convolutional codes with low trellis 
complexity,” IEEE Trans. Commun., 
vol. 50, no. 1, pp. 37—47, Jan. 2002. 
[8] D. J. Muder, “Minimal trellises for 
block codes,” IEEE Trans. Inform. 
Theory, vol. 34, pp. 1049—1053, Sept. 
1988. 
[9] L. K. Wolf, “Efficient maximum 
likelihood decoding of linear block 
codes,” IEEE Trans. Inform. Theory, 
vol. IT-24, pp. 76—80, Jan. 1978. 
[10] G. C. Jr., and J. B. Cain, 
Error-Correction Coding for Digital 
Communications, New York: Plenum, 
1981. 
[11] T. K. Truong, M.-T. Shih, I. S. Reed, 
and E. H. Satorius, “A VLSI design for 
a trace-back Viterbi decoder,” IEEE 
Trans. Commun., vol. 40, no. 3, pp. 
616—624, March 1992. 
[12] R. E. Blahut, Theory and Practice of 
Error Control Codes. Reading, MA: 
Addison-Wesley, May 1984. 
[13] G. B. Horn and F. R. Kschischang, “On 
the intractability of permuting a block 
code to minimize trellis complexity,” 
IEEE Trans. Inform. Theory, vol. 42, no. 
6, pp. 2042—2048, Nov. 1996. 
[14] K. Jain, I. Mandoiu and V. V. Vazirani, 
“The ``art of trellis decoding'' is 
computationally hard—for large fields,” 
IEEE Trans. Inform. Theory, vol. 44, no. 
3, pp. 1211—1214, Sept. 1998. 
[15] G. B. Horn and F. R. Kschischang, “On 
the intractability of permuting a block 
code to minimize trellis complexity,” 
IEEE Trans. Inform. Theory, vol. 42, no. 
6, pp. 2042—2048, Nov. 1996. 
[16] A. Vardy and F. R. Kschischang, “Proof 
of a conjecture of McEliece regarding 
the expansion index of the minimal 
trellis,” IEEE Trans. Inform. Theory, 
