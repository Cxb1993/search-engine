2 
 
from literature and supply chain distribution models, respectively. Finally, the concluding 
remarks are made in Section 6. 
 
2. BACKGROUND 
 This section will provide general backgrounds regarding bi-level linear programming 
problem, immune genetic algorithm, and particle swarm optimization. 
2.1 Bi-level Linear Programming Problem (BLPP) 
 Bi-level linear programming problem (BLPP) is a kind of multi-level linear programming 
problem which is based on the decomposition principle for linear programs (Dantzing and 
Wolfe, 1960). Basically, BLPP assumes that the higher-level decision-maker has control over 
X and lower-level decision-maker has control over Y. Then, we have 
mn RYyRXx ⊂∈⊂∈ ,  and 1: RYXF →× . The BLPP can be stated as follows: 
P1:                 
Xx∈min     ydxcyxF 11),( += ,                            (1) 
P2:                 
Yy∈min     ydxcyxf 22),( += ,                          (2) 
                    s.t.     ,22 byBxA ≤+                          (3) 
where nRcc ∈21, , mRdd ∈21 , , mpnpp RBRARb ×× ∈∈∈ ,, . P1 is the higher-level 
decision-maker, while P2 is the lower-level decision-maker. According to the differences of 
the requirements in these models, there may be some extra limitations of x and y. For 
examples, the limitations of integers or the limitations of upper and lower bound. For solving 
this problem, once the leader has chosen an x, the x of the follower’s objective function has 
become a constant. Thus, the objective function of follower is simplified to
Yy∈min ydyf 2)( = . 
In (Wen and Hsu, 1991), they have presented the way to find the efficient compromise 
solution at the situation of non-degeneracy. It means when solving the BLPP and the solution 
is non-Pareto optimal, we can look for the efficient compromise solution according to the 
advice of the study. The upper level decision maker can retain the original rewards, and the 
lower one can get the extra profits. Shih (1995) further addressed that it can not assure BLPP 
could get the Pareto-optimal or the efficient solution only when the objectives of both levels 
are the same. In other words, it may get the Pareto-optimal when they cooperate absolutely 
with each other.  
 There have been different methods for solving BLPP. They include methods based on 
vertex enumeration, methods based on Kuhn-Tucker conditions, fuzzy approach (Shih et al., 
1996, Shih and Zhang, 2005, Sakava and Nishizaki, 1997), and methods based on 
metaheuristics (Hejazi et al., 2002). Next, the methods based on metaheuristics will be 
discussed more detailed. Mathieu et al. (1994) proposed a GA-based bi-level programming 
algorithm (GABBA) for solving BLPP. Hejazi et al. presented a GA-based method for BLPP. 
The results are compared with those of method of Gendreau et al. (1996). Oduguwa and Roy 
(2002) developed a bi-level GA, which is an elitist optimization algorithm developed to 
encourage limited asymmetric cooperation between the two players, to solve different classes 
of the BLPPs within a single framework. Yin (2000) proposed another GA-based approach 
for solving two BLPPs, road pricing and reserve capacity of signal-controlled road network. 
Wang et al. (2005) proposed an evolutionary algorithm for solving nonlinear bi-level 
programming problem. Recently, Wang et al. (2005) developed a GA which adopted some 
techniques to guarantee that not only the initial chromosomes but also the chromosomes 
generated by GA are all feasible. 
 Additionly, Gendreau et al. (2006) proposed a hybrid tabu-ascent algorithm (HTA) for 
solving BLPP. Wen and Huang (1996a) employed a simple tabu search for solving a 
mixed-integer BLPP. The 0-1 decision variables are controlled by the upper-level 
4 
 
against the antigen effectively, then make it react quickly. In this study, the memory cell 
contains the best feasible solutions obtained for each iteration. 
2.3 Particle Swarm Optimization Algorithm 
Particle Swarm Optimization (PSO) was developed by Eberhart & Kennedy (1995a, b), 
based on the analogy of swarm of birds. In advance, PSO was developed to solve nonlinear 
optimization problems with continue variables. Recently, PSO algorithm has been modified 
in order to give better result. PSO can be used efficiently to solve nonlinear optimization 
problems, combinatorial optimization problems, and mixed-integer nonlinear optimization 
problems (MINILPs). One advantage of PSO is its ability to handle complex problems, such 
as MINILPs with only a small program (Lee & El-Sharkawi, 2008).  
 Main development of PSO can be divided into three phases (Kuo et al. 2010a). First 
phase is original version of PSO which used GBEST and LBEST concept. In GBEST concept, 
the particle swarm optimizer keeps track of the overall best values and its location, which is 
called gbest (Pgd). Moreover, in LBEST concept, each particle keeps track of the best 
solution which is called lbest (Pgd). This lbest is kept in a local topological neighborhood of 
particles. Determination of particle velocity in each dimension could not exceed Vmax. This 
Vmax is assigned to control global exploration ability of particle swarm. Second phase is 
additional of inertia weight, which was invented by Shi & Eberhart (1998). The inventors 
proposed two types of inertia weight (W), namely positive constant and variable decreasing 
with time. Jiao et al. (2008) asserted that initial value of W is typically in range of [0,1]. It 
was known that larger value of inertia weight is necessary at the beginning to find good seed, 
whereas smaller value of inertia weight can be employed well to search the local area around 
the seed. The third phase is additional of constriction factor (K) in order to insure 
convergence and stability of the PSO algorithm (Clerc, 1999). 
 
3. METHODOLOGY 
This section will present the proposed method which integrates both immune genetic 
algorithm and particle swarm optimization algorithm for solving BLPP. Refer to the research 
proposed by Wang et al. (2005), this study employs floating-point encoding method to 
achieve the search process. Basically, immune genetic algorithm operators including 
crossover and clone are implemented first followed by PSO updating rule. Also, 
vector-controlled PSO is applied in this study (Kuo et al., 2010). The flowchart as shown in 
Figure 1 will be discussed more detailed as follows. 
6 
 
Step 1: Set up the PSO parameters including population size, max velocity maxV , weight W
and the learning factors 1c and 2c  and IGA parameters including size of antibodies
K , crossover rate ratec _ , and mutation rate ratem _ . 
W                    Weight 
1c , 2c   Learning factor 
1rand , 2rand , 3rand      Random variable between 0 and 1 
ratec _                 Crossover rate 
ratem _                 Mutation rate 
p                       Navigation rate 
K                       Size of the memory cell 
Step 2: Set up the search range of x  which will influence the search speed. Randomly 
generate the particle's initial position, idX , in the pre-specified range and the initial 
speed idV  which should be less than the maximal speed maxV . Use float coding 
method to generate the random numbers for the upper-level variables. Then solve for 
variable y in the lower level. The position for each particle, Xid, is as follows: 
  ),,,,( 11 imiiniid yyxxX KK=                    (6) 
Step 3: Calculate the fitness value for all antibodies.  
       id
t XcF =                                 (7) 
Step 4: Execute the affinity test between the random initial solution and the antibodies of the 
memory cell. At this time, the best fitness value of the foreign-antigens stand for the 
autoantigen, then sort the antibodies by affinity through the affinity test and generate 
the crossover pool. The equation of the affinity test is as follows: 
 
( )[ ]
( )[ ]⎪⎭⎪⎬
⎫
⎪⎩
⎪⎨
⎧
−+
−−=
−
−
2
2
1
1
antigeniforignnautoantige
antigeniforignnautoantige
fitnessfitnessEXP
fitnessfitnessEXP
affinity
 
(8) 
ni ~1= , ondistributi lexponentia is EXP  
{ }
{ } nidFantigenforign
nidFnautoantige
id
id
~1                
~1        max 
==−
==
 
Step 5: Obtain the affinity matrix through Step 4 to produce a crossover pool. Then, use the 
roulette wheel selection method to select two antibody chromosomes from the 
crossover pool each time randomly. Use crossover mechanism of genetic algorithm 
to update particle positions. Then re-calculate the fitness value of the particles. 
The equation of the crossover is as follows: 
 ))1 , 0(1()1 , 0( idid
new
id XUniformXUniformX −+= nid ~1=  (9) 
Step 6: Check whether the updated particles in the reasonable area or not and classify them 
into two groups. If the particle location is inside reasonable area, then set S as 1; 
Otherwise, set S as 0. Also, set the fitness value of the particles outside the area to be 
0 as follows: 
 ⎪⎩
⎪⎨
⎧ ==
se,  otherwi       
 if  SXcF id
t
0
1 
  (10) 
Step 7: Update the current local best position, Pid, and global best position, Pgd for the 
particles inside the reasonable area. 
Step 8: Update the position and velocity for every particle. This study sets up the percentage 
8 
 
HGAPSO (Kuo et al., 2011).  
 Table 1 tabulates the characteristics of the four BLPPs. For each problem, 30 runs were 
implemented. They were all implemented on a personal computer with Intel® D CPU 
2.80GHz 2.79 GHz and 3 GB RAM using MATLAB under Windows XP operation system. 
Table 1. BLPPs and their corresponding characteristics. 
Source (Wen and Hsu, 1991) 
(Bialas and Karwan, 
1984) 
(Liu and Hart, 
1994) 
(Bard and 
Falk, 
1982) 
Number of 
variables 2 2 2 4 
Range of 
variables ≧0 ≧0 ≧0 ≧0 
 
In order to compare these methods, this study treats solution obtained from Lingo as the 
best solution. Error rate and standard deviation are calculated, respectively, since each 
problem is run 30 times. The standard deviation is based on the first level objective function. 
They are illustrated in Equations (19) and (20), respectively as follows: 
 Error rate = %100*
**
×−
f
ff M  (19) 
where *f  : optimal solution based on Lingo, and 
*
Mf   : optimal solution obtained from M method. 
 Standard deviation = ( )∑ −N
i
MAMi ffN
2**1  (20) 
  where Ni ,...,1= (N=30) 
     *Mif = The optimal solution for M method in i
th run. 
    *MAf = The average of N optimal solutions for M method. 
Table 2 lists the corresponding parameter setup for four problems. 
Table 2. Parameters setup. 
 GA PSO VCPSO HGAPSO IGVPSO 
Population size / 
Number of particles 20 20 20 20 20 
Crossover 0.9 N/A N/A N/A 0.9 
Mutation 0.1 N/A N/A 0.1 0.1 
Vmax N/A 10 10 10 10 
Inertial weight N/A 1.2-0.2 1.2-0.2 1.2-0.2 1.2-0.2 
Number of 
generations/iterations 200 200 200 200 200 
Pilot rate N/A N/A 40% N/A 40% 
Memory cell N/A N/A N/A N/A 40 
Fitness variance N/A N/A N/A N/A 0 
 
4.1 Problems from Literature 
(1) Problem 1 
The first problem is adopted from (Wen and Shu, 1991). We use the proposed IGVPSO to 
solve this problem and compare the result with those of methods listed in Table 2. Table 3 
illustrates that combining IGA with vector-controlled PSO really can have better performance. 
10 
 
Table 5. The computational solutions of problem 3. 
 GA PSO VCPSO HGAPSO IGVPSO Lingo 
1x  3.9866 3.9991 3.9945 4.0000 4 4 
2x  3.94640 3.99634 3.97810 3.99996 4 4 
1f  15.8257 15.9881 15.9288 15.9999 16 16 
2f  -3.94640 -3.99634 -3.97810 -3.99996 -4 N/A 
1f  error rate 17.4300% 0.0743% 7.1200% 0.0008% 0% -4 
2f  error rate 1.3400% 0.0900% 0.5500% 0.0010% 0% N/A 
1f  SD 0.1927 0.0097 0.3899 0.0004 0 N/A 
 
(4) Problem 4 
From Table 6, we can find out that the proposed IGVPSO still has the best solution 
compared with other algorithms.  
Table 6. The computational solutions of problem 4. 
Range [0,1] GA PSO VCPSO 
1x  0.15705 0.02192 0.03808 
2x  0.86495 0.86693 0.87047 
1y  0 0 0 
2y  0.47192 0.56335 0.55492 
3y  0.51592 0.34108 0.37203 
1f  21.52948 24.81256 24.49525 
1f  error rate 17.19% 4.57% 5.79% 
2f  -3.39072 -3.1977 -3.1987 
2f  error rate 5.96% 6.21% 3.81% 
1f  SD 3.14432 1.55374 1.59063 
 Range [0,1] HGAPSO IGVPSO Lingo 
1x  0 0.00024 0 
2x  0.89920 0.89970 0.9 
1y  0 0 0 
2y  0.59944 0.59961 0.6 
3y  0.39782 0.39953 0.4 
1f  25.98274 25.98762 26 
1f  error rate 0.07% 0.05% N/A 
2f  -3.19321 -3.19840 -3.2 
2f  error rate 0.21% 0.20% N/A 
1f  SD 0.03889 0.00024 N/A 
12 
 
larger the better, we use Equation (21) to measure the performance. General speaking, the 
larger the S/N ratio, the smaller the expected lost. 
⎟⎟⎠
⎞
⎜⎜⎝
⎛−= ∑
=
n
i iyn
NS
1
2
11log10/
                             (21) 
Through Taguchi experimental design, we can obtain the best parameters. Crossover rate, 
mutation rate, Wmax, and Wmin are 0.9, 0.1, 1.2, and 0.2, respectively. 
 
 
5. MODEL EVALUATION REUSLTS 
The proposed IGVPSO has been validated through four examples obtained from the 
literature. It is really a promising method for solving BLPP. Thus, this section will further try 
to construct two supply chain models and use IGVPSO to solve them. One is for 
build-to-order (BTO) scenario and the other is for configuration-to-order (CTO) scenario. 
Before formulating these two models, the corresponding notations are illustrated as follows: 
Notations: 
i : The number of distribution centers, 
j : The number of manufacturers, 
Y1 : The total amount of product that the first distribution center orders, 
Y2 : The total amount of product that the second distribution center orders, 
X11 : The amount of product that the first manufacturer needs for the first distribution 
center, 
X21 : The amount of product that the first manufacturer needs for the second distribution 
center, 
P11 : The product unit cost of the first distribution center orders product from the first 
manufacturer,  
P21 : The product unit cost of the second distribution center orders product from the first 
manufacturer, 
C1(Y1) : The related cost of the first distribution center buying unit product, 
C2(Y2) : The related cost of the second distribution center buying unit product, 
W1 : The capacity of the first distribution center, 
W2 : The capacity of the second distribution center, 
G1(W1) : The batch production quantity of the first distribution center, 
G2(Y2) : The batch production quantity of the second distribution center, 
G1(Y1) : The related cost of the first distribution center to produce a batch of product, 
G2(Y2) : The related cost of the second distribution center to produce a back of product, 
A1 : The total amount of product that the first manufacturer owns, 
W3 : The capacity of the first manufacturer, 
S11(Y11) : The unit ordering cost that the first distribution center orders the product from the 
first manufacturer, 
S21(Y21) : The unit ordering cost that the second distribution center orders the product from 
the first manufacturer, 
T11(Y11) : The unit transportation cost from the first manufacturer to the first distribution 
center, 
T21(Y21) : The unit transportation cost from the first manufacturer to the second distribution 
center, 
h1 : The unit carrying cost for the first manufacturer. 
5.1 BTO Model 
The BTO model is consisted of two distribution centers and one manufacturer. The 
related notations for the model constructed are listed in Table 10. 
14 
 
2f  202481.0 202499.4 202500 
2f  error rate 0.0094% 0.0003% N/A 
1f  SD 34.8472 0.3258 N/A 
 
Table 12. The average training time for every algorithm. 
Range [0,1000] HGAPSO IGVPSO Lingo 
11X  999.9716 999.9656 1000 
21X  499.9754 499.9858 500 
1Y  999.9782 999.9733 1000 
2Y  499.9998 499.9999 500 
1f  104994.8 104995.6 105000 
1f  error rate 0.0050% 0.0042% NA 
2f  202492.7 202493.5 202500 
2f  error rate 0.0036% 0.0032% N/A 
1f  SD 1.4627 1.8493 N/A 
Number of 
iterations 
111.6 89.5 N/A 
Training time (sec) 28.5964 21.5769 N/A 
 
5.2 CTO Model 
In this subsection, we formulate a simplified CTO model and then use the proposed 
IGVPSO method to solve it. The main different from the BTO model is that some constraints 
are added for the distribution centers. The related notations are shown in Table 13 and the 
model is as follows:  
Table 13. The parameter setup for CTO model. 
Notation Value Notation Value Notation Value Notation Value Notation Value
i 2 C1(Y1) 70 W3 1450 G1(Y1) 200 T11(Y11) 5 
j 1 C2(Y2) 50 A1 750 G2(Y2) 300 T21(Y21) 15 
P11 130 W1 1000 G1(W1) 190 S11(Y11) 10 h1 10 
P21 150 W2 500 G2(W2) 250 S21(Y21) 10   
 
 
212121111 300G200G50Y70Y150X130Xf    −−−−+=Max                 (29) 
2121112 G300G20085X15X51f      +++=Min                             (30) 
111 YX            . ≤ts                                                 (31) 
221 YX ≤                                                 (32) 
1000Y1 ≤                                                (33) 
500Y2 ≤                                                 (34) 
750YY 21 ≥+                                             (35) 
1450XX 2111 ≤+                                           (36) 
11 Y190G ≥                                               (37) 
21 Y250G ≥                                               (38) 
int,,1,2,1,0,0,0 ∈==≥≥≥ iiiij GjiGYX  
16 
 
Table 15. The average training time for CTO model. 
Range [0,1000] HGAPSO IGVPSO Lingo 
11X  949.9626 949.9483 1000 
21X  499.9693 499.9776 500 
1Y  949.9649 949.9488 1000 
2Y  500.0000 499.9998 500 
1G  5.0000 5.0000 5 
2G  2.0000 2.0000 2 
1f  105392.9869 105393.5283 105000 
1f  error rate 0.0067% 0.0061% NA 
2f  241338.5192 241337.8524 202500 
2f  error rate 0.0048% 0.0050% N/A 
1f  SD 2.9922 1.8493 N/A 
Number of 
iterations 
113.2 78.0 N/A 
Training time (sec) 31.7740 25.4618 N/A 
 
5. CONCLUSIONS 
    This study has demonstrated a supply chain model can be formulated by using BLPP. 
The proposed supply chain model is able to deal with the relationship between distribution 
center and manufacturer. We can find out that the proposed model is more suitable for the 
practical applications, especially in supply chan.  
The hybrid method though integrating IGA and PSO have been validated using four 
examples adopted from the literature. The experimental results indicate that the proposed 
hybrid method is better than only using only one algorithm. Also, the proposed method has 
smaller standard deviation. This implies that it better stability compared to GA and PSO and 
other hybrid method. However, the current method is only suitable for BLPP. It is promising 
to extend the proposed method for multi-level linear programming problem in the future. 
 
Acknowledgement 
 This research is partially supported by National Science Council of Taiwan Government 
under contract number NSC 96-2221-E-011-178-MY3. Her support has been appreciated. 
 
REFERENCES 
Bard, J.F. and Falk, J.E., “An explicit solution to the multi-level programming problem,” 
Computers and Operations Research, Vol. 9. No. 1. pp 77-100, 1982. 
Bialas, W. F. and Karwan, M. H., “Two-level linear programming,” Management Science, Vol. 
30, No. 8, pp. 1004-1020, 1984.  
Clerc, M., “The swarm and the queen: Toward a deterministic and adaptive particle swarm 
optimization,” Proceedings of ICEC'99, pp. 19511957, 1999 
Clerc, M., Kennedy, J., “The particle swarm - explosion, stability, and convergence in a 
multidimensional complex space,” IEEE Trans. Evolutionary Computation, 6 (1), 
pp.58-73, 2002. 
Dantzing, G.B. and Wolfe, P., “Decomposition principle for linear programs,” Operations 
Research, Vol.8, No.1, pp.101-111, 1960. 
Du, S., Li, W., and Cao, K., “A learning algorithm of artificial neural network based on 
GA-PSO,” IEEE, Intelligent Control and Automation, WCICA. The Sixth World Congress, 
18 
 
Systems, 127, pp.185197, 2002. 
Shi, Y., and Eberhart, R. “A modified particle swarm optimizer,” Proceedings of IEEE 
International Conference on Evolutionary Computation, pp.69-73, 1998. 
Shi, C., Lu, J., Zhang, G., “An extended Kuhn-tucker approach for linear bi-level 
programming,” Applied Mathematics and Computation, 162(1), pp.51-63, 2005. 
Shih, H.S., Fuzzy Multi-Level Optimization, Ph.D. Dissertation, Department of Industrial and 
Manufacturing Systems Engineering, Kansas State University, Manhattan, Kansas, USA, 
1995. 
Shih, H.S., Lai Y.J., and Lee, E.S., “Fuzzy approach for multi-level programming problems,” 
Computers and Operation Researches, Vol. 23, No.1, pp.73-91, 1996. 
Shih, H.S., Wen, U.P., Lee, E. S., Lan, K.M., Hsiao, H.C., “A Neural Network Approach to 
Multi-objective and Multilevel Programming Problems,” Computers and Mathematics 
with Applications, Vol.48, pp.95-108, 2004. 
Wang, G.M., Wang, X.J., Wan, Z.P., and Chen, Y.L., “Genetic Algorithms for Solving Linear 
Bilevel Programming”, Proceedings of the IEEE Sixth international Conference on 
Parallel and Distributed Computing, 2005.  
Wang, Y., Jiao, Y., and Li, H., “An evolutionary algorithm for solving nonlinear bi-level 
programming problem based on a new constraint-handling scheme,” IEEE Transactions 
on Systems, Man and Cybernetics, Part (c), 35(2), pp.221-232, 2005. 
Wang F. and Qiu, Y., “A modified particle swarm optimizer with roulette selection operator,” 
Proceedings of Natural Language Processing and Knowledge Engineering, 765-768, 
2005. 
Wen, U.P. and Hsu, S.T., “Linear bi-level programming problems ─ A review,” Journal of 
Operations Research Society, Vol.42, No.2, pp.125-133, 1991. 
Wen, U.P. and Huang, A.D., “A simple Tabu Search method to solve the mixed-integer 
problem bi-level programming problem,” European Journal of Operational Research, 
Vol.88, pp.563-571, 1996a. 
Wen UP, Huang AD. “A Tabu search approach for solving the linear bilevel programming 
problem,” Journal of the Chinese Institute of Industrial Engineers, 13; 113-119, 1996b. 
Yin, Y, “Genetic-algorithms-based approach for bilevel programming models,” Journal of 
Transportation Engineering, pp.115120, 2000. 
 
  
無研發成果推廣資料 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
擔任 2010 INFORMS International Conference on Service Sciences 之 Program 
Chair。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
