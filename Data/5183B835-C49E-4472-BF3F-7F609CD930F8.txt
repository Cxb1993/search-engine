 2
1. Introduction 
  Most of the watermarking techniques are irreversible, that is to say, the image cannot return 
to its original state after embedding. In the embedding procedure, the irreversible distortion of 
the original content is introduced. Although this distortion is imperceptible, we will never 
regain the original content. It may not be acceptable to some sensitive applications, such as 
military data and medical data. In reversible watermarking, the watermark is embedded in a 
reversible way so that one can extract the hidden watermark and also restore the digital 
content to its original state. The first publication to investigate reversible watermarking was 
by Barton [1] in 1997. In his article, arbitrary digital information is embedded within a digital 
stream for authentication. The embedded information can be extracted and used to verify the 
original digital data stream. Then Honsinger et al. [2] proposed a lossless data embedding 
technique that allows the recovery of the original image. The watermark is embedded using 
modulo arithmetic. Later on in Macq’s article [3], a modification to Honsinger’s algorithm is 
presented to achieve lossless watermarking. However, the embedded image with 
salt-and-pepper artifact appeared on both Honsinger and Macq’s techniques. In order to 
reduce the artifact, Vleeschouwer et al. [4] proposed a lossless watermarking algorithm by 
circular interpretation of bijective transforms. Besides, Fridrich et al. [5] developed a 
reversible data embedding algorithm based on embedding watermark on one of the least 
significant bit planes of the original image. They also described two extended reversible data 
embedded techniques for all image formats [6]. Although these techniques can reduce the 
salt-and-pepper artifact, the capacity of the algorithms is low. Celik et al. [7] introduced a 
high-capacity and low-distortion reversible watermarking algorithm in 2002. The pixels of the 
original image are quantized and the residues are compressed using a lossless image 
compression algorithm in order to create capacity for the payload data. 
  Not long ago, Tian [8] used a difference expansion method to reversibly embed a payload 
into digital images. He explored the redundancy in digital images to achieve a high-capacity 
and low-distortion reversible watermarking. His method divides the image into pairs of pixels, 
then some difference values that are not expected to cause an overflow or underflow are 
selected for the difference expansion (DE). One watermark bit will be embedded into the 
difference of each selected pixel pairs. Finally, a location map of the selected expandable 
pixel pairs is losslessly compressed and included in the payload. In order to achieve a 
high-capacity reversible data embedded method for digital images, a multiple-layer 
embedding is employed in Tian’s algorithm. In 2004, Alattar [9] proposed a generalized 
difference expansion method. This method uses difference expansion of vectors, instead of 
pairs, to increase the hiding capacity. 
  In this research, we extend Tian’s algorithm to increase the hiding capacity of the algorithm. 
Since Tian’s algorithm still has little capacity, intensive research will be performed to improve 
the capacity. As a preliminary investigation, the expandable pixel pairs can be extended. Our 
method allows the algorithm to enlarge the subset of the expandable pixel pairs by histogram 
shifting, but no any extra storage space is needed. It implies that the hiding capacity will be 
increased.  
 4
all nonchangeable pixel pairs.  
3. To identify the locations of the pixel pairs in S1, S2, S3, S4, and S5, a location map M is created. 
The symbol “1” in M indicates the locations of S1 or S2, and the symbol “0” indicates the 
locations of S3, S4, or S5. Then the location map M will be losslessly compressed by a JBIG2 
compression or run-length coding. The compressed bitstream is denoted as B1. A unique 
identifier EOS is appended to B1 in the meantime. 
4. Extract the LSBs of difference values in S4. Collect these bits into bitstream B2. 
5. Assume the watermark (payload) to be embedded is B3. Concatenate B1, B2, and B3 to form 
the bitstream B = B1 ∪ B2 ∪ B3 = b1b2 … bm, where m is the bit length of B. 
Finally, the data embedding algorithm can be described as follows. 
  i = 0. 
  For each pixel pair (p1, p2) { 
   d = p1 – p2. 
   g = 

 +
2
21 pp . 
   If the pixel pair belongs to S1 ∪ S2 
    d′ = 2×d + bi. 
p1′ = g + 

 +′
2
1d . 
p2′ = g – 

 ′
2
d . 
i = i + 1. 
   Else if the pixel pair belongs to S3 
    If d > 0 then ds = d – T else ds = d + T. 
    d′ = 2×ds + bi. 
p1′ = g + 

 +′
2
1d . 
p2′ = g – 

 ′
2
d . 
i = i + 1. 
   Else if the pixel pair belongs to S4 
d′ = 2× 


2
d + bi. 
p1′ = g + 

 +′
2
1d . 
p2′ = g – 

 ′
2
d . 
i = i + 1. 
  } 
 
  To extract the watermark and restore the original image, the decoding procedure is summarized 
 6
our algorithm. The difference values have been shifted for expansion and low-distortion 
embedded image is introduced. 
  Assume we have a block of six pixels in an image as shown in Fig. 2. The watermark bitstream 
is 01101101… and the threshold T is set to 3. The pairing is done horizontally. Thus the first pair 
is grouped by (p1, p2) = (105, 103) and d = 2, g = 104. Since the difference value d ≤ T, the pixel 
pair is expandable. The new difference value will be d′ = 2×d + w = 2×2 + 0 = 4. The new pixel 
values are computed as follows. 
p1′ = g + 

 +′
2
1d  = 104 + 2 = 106. 
p2′ = g – 

 ′
2
d  = 104 – 2 = 102. 
2 4 7 4 3 7
104 102 98
106 102 104 102 102 95
(a) original pixel values
(b) difference values
(c) average values
(d) new difference  values
(e) new pixel values
Fig. 2. Example of embedding
105 103 104 100 102 95
 
  The second pair is (p1, p2) = (104, 100) and d = 4, g = 102. This pair is shiftable because of T < 
d < 2T. Thus the difference value will be shifted left by T, and the new difference value will be d′ 
= 2×ds + w = 2×(4–3) + 1 = 3. The new pixel values can be obtained as follows. 
p1′ = g + 

 +′
2
1d  = 102 + 2 = 104. 
p2′ = g – 

 ′
2
d  = 102 – 1 = 101. 
  The third pair is (p1, p2) = (102, 95) and g = 98. The difference value d is 7, which makes this 
pair belongs to set S4. Thus the difference value d can only have its LSB modified and d′ = 
2× 


2
d + w = 6 + 1 = 7. Then the new pixel values are computed as follows. 
p1′ = g + 

 +′
2
1d  = 98 + 4 = 102. 
 8
 
(a) An embedded image 
 
(b) Another embedded image 
Fig. 4. Embedded Lena using the proposed method: (a) 36.03dB embedded with 166366 bits, (b) 
29.35dB embedded with 282696 bits 
 
 
  The visual qualities of the embedded images are shown in Fig. 4 and the PSNRs are listed in 
Table 2. In order to compare the visual quality of the proposed algorithm with that of Tian’s, we 
adjust the threshold T so that the capacity of the algorithms is close to each other. It can be 
observed that our proposed algorithm outperforms Tian’s, especially in large payload size. 
 
Table 2 
Comparison results of embedded visual quality 
Tian’s method Our method 
Payload (bits) PSNR Payload (bits) PSNR 
163207 35.73 166366 36.06 
195125 33.18 199793 35.06 
217278 31.37 221066 34.34 
233067 29.97 236366 33.55 
251075 28.26 255226 32.42 
 
 
  Since Tian uses pairs of pixels for embedding, the correlation of the pixels in each pair is 
expected to be close. The pairs with small difference is easier to satisfy a small threshold and, 
hence, to produce more expandable pairs. Thus Tian’s algorithm cannot embed anything into the 
image when the expandable pairs are not enough for embedding. For example, Table 3 shows the 
results with Baboon image. With T = 6, Tian’s algorithm is not capable of embedding watermark, 
while the proposed algorithm is able to embed 94576 bits. It can be observed that the capacity of 
Tian’s algorithm is low in such an image. However, this drawback is overcome by using the 
proposed algorithm. 
 
Table 3 
Embedded payload size versus PSNR using Baboon image 
 Tian’s method Our method 
