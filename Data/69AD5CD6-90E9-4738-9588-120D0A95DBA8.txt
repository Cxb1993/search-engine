 I 
摘要 
Naor & Shamir (1995)首先將視覺密碼的觀念應用在 k-out-of-n的門檻式秘密分享機制
上，習慣上我們將它簡稱為(k, n)-VCS。所謂(k, n)-VCS指的是一個視覺密碼方法，其目的
是將一張秘密影像加密分解成 n張雜亂無章的分享影像，使得其中任何 k − 1張或是更少的
分享影像無法洩露任何秘密訊息。如果要重建秘密影像，則必須要收集到至少 k 張的分享
影像，然後將它們分別列印成投影片並重疊在一起，就可以透過人眼在這個重疊的影像上
看到秘密訊息的內容，其解密的過程完全不需要使用電腦與複雜的解密演算法。大部分的
視覺密碼方法都是使用像素擴展的技巧；因此，分享影像的大小會被擴展成機密影像的若
干倍。像素擴展的結果不但使得分享影像不易攜帶，也會造成儲存空間的浪費。此外，大
部分的視覺密碼方法只允許分享單一機密影像，而無法分享多張機密影像。本研究計畫主
要在解決視覺是秘密分享方法的像素擴展問題、多機密影像問題以及有意義的分享影像的
問題。本計畫嘗試提出一個多目標最佳化模型，以解決多機密影像的視覺是秘密分享方法
的問題，此模型是以機率的概念所建構而成的，同時也考慮安全性與對比的議題。對於模
型的解答空間的搜尋，我們以有效率的最佳化演算法來加以求解，實驗結果顯示我們的方
法在對比度方面有不錯的表現。 
 
關鍵詞：視覺密碼、視覺式秘密分享 
 
 1 
1. Introduction 
Visual secret sharing schemes (VSSSs) are methods to encode a black-white secret image 
into n shadow images called shares, of which some qualified subsets can recover the secret image, 
whereas other forbidden subsets must not leak out any information of the secret image. Unlike 
other secret sharing schemes, visual secret sharing schemes use human eyes to decrypt the secret 
without the knowledge of cryptography and cryptographic computations. Therefore, they are 
good solutions to secret sharing while computers are not available for decryption. 
The concept of visual cryptography was first applied to the (k, n)-threshold access structures 
by Naor and Shamir (Naor and Shamir, 1995). The (k, n)-threshold access structure is defined on 
a set of n shares; one can recover the secret image by stacking up k or more than k shares, 
whereas one can not obtain any secret information from less than k shares. In recent years, most 
research efforts at visual cryptography are based on the concept proposed by Naor and Shamir 
(Ateniese et al., 1996a, 1996b, 2001). Ateniese et al. (1996b) extended the (k, n)-threshold access 
structure to general access structures in the form of (ΓQual, ΓForb), where ΓQual denotes a set of 
qualified sets and ΓForb denotes a set of forbidden sets. Any qualified set  ∈ ΓQual of shares is 
able to recover the secret image, whereas any forbidden set  ∈ ΓForb cannot obtain any secret 
information.  
In the study of visual cryptography, reduction of pixel expansion and improvement of 
contrast are two primary issues (Blundo and Santis, 1998). Therefore, many researchers made 
efforts on the improvement of contrast (Blundo and Santis, 1998; Blundo et al., 1999, 2001; 
Eisen and Stinson, 2002; Hofmeister et al., 2000; Tzeng and Hu, 2002; Verheul and Tilborg, 
1997). Besides, most visual cryptography methods are based on the technique of pixel expansion 
(Ateniese et al., 1996a, 1996b, 2001; Blundo and Santis, 1998; Blundo et al., 1999, 2001; Droste, 
1996; Eisen and Stinson, 2002; Hou, 2003; Hofmeister et al., 2000; Iwamoto and Yamamoto, 
2003; Naor and Shamir, 1995; Tzeng and Hu, 2002; Verheul and Tilborg, 1997), whereas few 
studies are about non-pixel-expansion (Hou et al., 2001; Ito et al., 1999; Hsu and Hou, 2006). The 
method of pixel expansion is to decompose each pixel on a secret image into a set of m subpixels; 
therefore, each share is m times the size of the secret image. Pixel expansion results in not only 
distortion of shares but also consumption of more storage space. To solve the problem of image 
distortion, one must enlarge both the width and the height of shares to maintain the aspect ratio. 
Consequently, it further leads to the difficulty in carrying these shares and the requirement of 
more storage space. 
There are two types of shares: one is the meaningless, random pattern share, and the other is 
the innocent-looking share (Naor and Shamir, 1995; Ateniese et al., 2001). Although the former 
can ensure security, it may incur suspicion, interception and damage. Therefore, the 
innocent-looking shares are valuable for real world applications. As for the number of secret 
images, we found that most visual cryptographic methods are designed for sharing a single secret 
image, whereas few are for sharing many secret images (Droste, 1996; Iwamoto and Yamamoto, 
2003). The concept of multiple secret images makes it possible that different subsets of shares 
 3 
−Γ )(Qual
h  and ΓForb are naturally required to satisfy  
 2Forb
1
)(
Qual =Γ∪






Γ
=

q
h
h ,  (5) 
 Forb
)(
Qual Γ∩Γ
h  = ∅,  (6) 
 −− Γ∩Γ )'(Qual
)(
Qual
hh  = ∅ for h ≠ h′.  (7) 
Example 2: Let Ν = {1, 2, 3, 4} be the set of shares. Suppose that sets {1, 2} and {1, 3} can 
decrypt the secret image SI(1), set {2, 3} can decrypt the secret image SI(2), and set {3, 4} can 
decrypt the secret image SI(3). However, set {1, 4}, {2, 4} or any one share must not leak out any 
information of the three secret images. This access structure can be represented as )1(QualΓ  = {{1, 
2}, {1, 3}, {1, 2, 3}, {1, 2, 4}, {1, 3, 4}, {1, 2, 3, 4}}, )2(QualΓ  = {{2, 3}, {1, 2, 3}, {2, 3, 4}, {1, 2, 
3, 4}}, )3(QualΓ  = {{3, 4}, {1, 3, 4}, {2, 3, 4}, {1, 2, 3, 4}}, and ΓForb = {{1}, {2}, {3}, {4}, {1, 4}, 
{2, 4}}. In this case, it holds that −Γ )1(Qual  = {{1, 2}, {1, 3}}, 
−Γ )2(Qual  = {{2, 3}}, 
−Γ )3(Qual  = {{3, 4}}, 
+ΓForb  = {{3}, {1, 4}, {2, 4}}. 
2.2 Secret Pattern, Encryption Rule, and Probability Matrices 
In this project, we assume that every image consists of a collection of black and white pixels. 
We use 0 to denote a white pixel and 1 to denote a black pixel. We also assume that all images, 
including secret images and shares, are of the same size. Besides, we suppose that all secret 
images are encrypted at once into n shares. That is, each time q pixels, each is taken from the 
corresponding positions on the q secret images, are encrypted into n shares at the same time. 
Therefore, all possible colors of q corresponding pixels on the q secret images constitute a set {0, 
1}q of possible color permutations. In this project, we call each possible color permutation ε ∈ {0, 
 
Secret patterns 
Secret images 
SI(1) SI(2) 
 
SI(3) 
 
…
 
Encryption rules 
Shares 
SH1 SH2 SH3 SH4 
…
 
…
 
 
Fig. 1. Secret patterns and encryption rules for three secret images and four shares. 
 5 
Now we define secret pattern, encryption rule, and probability matrices. Let S = [si,h] be a 
2q×q Boolean matrix called a secret pattern matrix, where each row vector Si = [si,1, si,2, …, si,q] ∈ 
{0, 1}q denotes a possible secret pattern on the q secret images. In the case of q = 3, for example, 
row vector Si = [0, 1, 0] indicates that the colors of the corresponding three pixels of the first, the 
second, and the third secret images are “white,” “black”, and “white,” respectively. Let E = [ej,k] 
be a 2n×n Boolean matrix called an encryption rule matrix, where each row vector Ej = [ej,1, 
ej,2, …, ej,n] ∈ {0, 1}n denotes a possible encryption rule for n shares. For example, in the case of 
n = 4, row vector Ej = [1, 0, 0, 1] indicates that a secret pattern will be encrypted as a black pixel, 
a white pixel, a white pixel, and a black pixel on the first, the second, the third, and the fourth 
shares, respectively. Let C = [ci,j] be a 2q×2n matrix called a probability matrix, where ci,j ∈ [0, 1] 
denotes the probability that the i-th secret pattern is encrypted by the j-th encryption rule and  
Table I. A partial analysis table for Example 2 
Secret patterns 
(si,1, si,2, si,3),  
i = 1, 2, ..., 8. 
Encryption rules 
(ej,1, ej,2, ej,3, ej,4),  
j = 1, 2, ...,16. 
ci,j 
Forbidden set Φ = {1, 4}: 
Probabilities pi(UΦ),  
UΦ ∈ {0, 1}|Φ| =  
{(0, 0), (0, 1), (1, 0), (1, 1)}. 
Qualified set Θ = {1, 2, 3}: 
Probabilities qi(Θ), pi(UΘ),  
Ρ(Θ) = {1, 2}, Ω(Θ) = {1, 2}, 
Β(Θ) = {3, 4, 5, 6, 7, 8},  
UΘ ∈ {0, 1}|Θ |. 
s1,1=0 s1,2=0 s1,3=0 
e1,1=0 e1,2=0 e1,3=0 e1,4=0 c1,1 
p1((0, 0)) = c1,1 + c1,3 + c1,5 + c1,7. 
p1((0, 1)) = c1,2 + c1,4 + c1,6 + c1,8. 
p1((1, 0)) = c1,9 + c1,11 + c1,13 + c1,15. 
p1((1, 1)) = c1,10 + c1,12 + c1,14 + c1,16. 
q1(Θ) = c1,3 + c1,4 +  
c1,5 + c1,6 + c1,7 + c1,8 +  
c1,9 + c1,10 + c1,11 + c1,12 +  
c1,13 + c1,14 + c1,15 + c1,16.  
-------------------------------- 
p1((0, 0, 0)) = c1,1 + c1,2. 
p1((0, 0, 1)) = c1,3 + c1,4. 
p1((0, 1, 0)) = c1,5 + c1,6. 
p1((0, 1, 1)) = c1,7 + c1,8. 
p1((1, 0, 0)) = c1,9 + c1,10. 
p1((1, 0, 1)) = c1,11 + c1,12. 
p1((1, 1, 0)) = c1,13 + c1,14. 
p1((1, 1, 1)) = c1,15 + c1,16. 
e2,1=0 e2,2=0 e2,3=0 e2,4=1 c1,2 
e3,1=0 e3,2=0 e3,3=1 e3,4=0 c1,3 
e4,1=0 e4,2=0 e4,3=1 e4,4=1 c1,4 
e5,1=0 e5,2=1 e5,3=0 e5,4=0 c1,5 
e6,1=0 e6,2=1 e6,3=0 e6,4=1 c1,6 
e7,1=0 e7,2=1 e7,3=1 e7,4=0 c1,7 
e8,1=0 e8,2=1 e8,3=1 e8,4=1 c1,8 
e9,1=1 e9,2=0 e9,3=0 e9,4=0 c1,9 
e10,1=1 e10,2=0 e10,3=0 e10,4=1 c1,10 
e11,1=1 e11,2=0 e11,3=1 e11,4=0 c1,11 
e12,1=1 e12,2=0 e12,3=1 e12,4=1 c1,12 
e13,1=1 e13,2=1 e13,3=0 e13,4=0 c1,13 
e14,1=1 e14,2=1 e14,3=0 e14,4=1 c1,14 
e15,1=1 e15,2=1 e15,3=1 e15,4=0 c1,15 
e16,1=1 e16,2=1 e16,3=1 e16,4=1 c1,16 
s2,1=0 s2,2=0 s2,3=1 
e1,1=0 e1,2=0 e1,3=0 e1,4=0 c2,1 
p2((0, 0)) = c2,1 + c2,3 + c2,5 + c2,7. 
p2((0, 1)) = c2,2 + c2,4 + c2,6 + c2,8. 
p2((1, 0)) = c2,9 + c2,11 + c2,13 + c2,15. 
p2((1, 1)) = c2,10 + c2,12 + c2,14 + c2,16. 
q2(Θ) = c2,3 + c2,4 +  
c2,5 + c2,6 + c2,7 + c2,8 +  
c2,9 + c2,10 + c2,11 + c2,12 +  
c2,13 + c2,14 + c2,15 + c2,16. 
-------------------------------- 
p2((0, 0, 0)) = c2,1 + c2,2. 
p2((0, 0, 1)) = c2,3 + c2,4. 
p2((0, 1, 0)) = c2,5 + c2,6. 
p2((0, 1, 1)) = c2,7 + c2,8. 
p2((1, 0, 0)) = c2,9 + c2,10. 
p2((1, 0, 1)) = c2,11 + c2,12. 
p2((1, 1, 0)) = c2,13 + c2,14. 
p2((1, 1, 1)) = c2,15 + c2,16. 
e2,1=0 e2,2=0 e2,3=0 e2,4=1 c2,2 
e3,1=0 e3,2=0 e3,3=1 e3,4=0 c2,3 
e4,1=0 e4,2=0 e4,3=1 e4,4=1 c2,4 
e5,1=0 e5,2=1 e5,3=0 e5,4=0 c2,5 
e6,1=0 e6,2=1 e6,3=0 e6,4=1 c2,6 
e7,1=0 e7,2=1 e7,3=1 e7,4=0 c2,7 
e8,1=0 e8,2=1 e8,3=1 e8,4=1 c2,8 
e9,1=1 e9,2=0 e9,3=0 e9,4=0 c2,9 
e10,1=1 e10,2=0 e10,3=0 e10,4=1 c2,10 
e11,1=1 e11,2=0 e11,3=1 e11,4=0 c2,11 
e12,1=1 e12,2=0 e12,3=1 e12,4=1 c2,12 
e13,1=1 e13,2=1 e13,3=0 e13,4=0 c2,13 
e14,1=1 e14,2=1 e14,3=0 e14,4=1 c2,14 
e15,1=1 e15,2=1 e15,3=1 e15,4=0 c2,15 
e16,1=1 e16,2=1 e16,3=1 e16,4=1 c2,16 
s3,1=0 s3,2=1 s3,3=0 … … … … 
s4,1=0 s4,2=1 s4,3=1 … … … … 
s5,1=1 s5,2=0 s5,3=0 … … … … 
s6,1=1 s6,2=0 s6,3=1 … … … … 
s7,1=1 s7,2=1 s7,3=0 … … … … 
s8,1=1 s8,2=1 s8,3=1 … … … … 
 
 7 
 pi(UΦ) = ∑
=
⋅
n
j
jji EUgc
2
1
, ])[,(  , (11) 
where the secret pattern index i ∈ {1, 2, …, 2q}, Ej[Φ] = (ej,l1, ej,l2, …, ej,lp), and  
 


 =
=
else0
][ if1
])[,(

 
j
j
EU
EUg .  (12) 
The above Ej[Φ] is obtained by restricting the j-th encryption rule, the j-th row vector Ej of E, to 
the columns l1, l2, …, lp, which corresponds to the forbidden set Φ = {l1, l2, …, lp}. That is, Ej[Φ] 
means a color permutation on the l1-th, the l2-th, …, and the lp-th shares. Since ΓForb satisfies 
monotonicity, it is easy to conclude that any set Φ′ ⊆ Φ will automatically meet Security 
condition 1 if the forbidden set Φ ∈ ΓForb meets Security condition 1. Therefore, it suffices to deal 
with only those forbidden sets belonging to +ΓForb . Table I demonstrates partial calculations of the 
probabilities pi(UΦ) for the forbidden set {1, 4} defined in Example 2, where si,h and ej,k 
correspond to the entries of the secret pattern matrix S and encryption rule matrix E, respectively. 
In Table 1, the probabilities p1((0, 0)), p2((0, 0)), …, p8((0, 0)) are required to be the same, for 
example. 
2.4 Security of Qualified Sets 
In this section, we discuss security conditions for qualified sets. In the case of multiple secret 
images, it is important that the shares of a qualified set Θ should reveal the secret information of 
the corresponding secret images, but they must not leak out any information of other secret 
images. For instance, since the two secret images SI(1) and SI(2) can be decrypted from the 
qualified set {1, 2, 3} in Example 2, the three shares SH1, SH2, and SH3 should contain the secret 
information of SI(1) and SI(2). It is clear that the secret information on the two secret images SI(1) 
and SI(2) may be (0, 0), (0, 1), (1, 0), or (1, 1). Since the secret information of the two secret 
images are allowed to be obtained, the probabilities that a color permutation of the three shares 
comes from those secret patterns containing different secret information of SI(1) and SI(2) may 
differ from each other. For example, the probabilities that the color permutation (0, 1, 1) comes 
from the secret patterns (0, 0, 1), (0, 1, 1), (1, 0, 1), and (1, 1, 1) may not be the same. However, 
the probabilities that a color permutation of the three shares comes from those secret patterns 
containing the same secret information should be identical so that the three shares do not leak out 
any information about the secret image SI(3). For example, the probabilities that the color 
permutation (0, 1, 1) comes from the secret patterns (0, 0, 0) and (0, 0, 1) are required to be the 
same.  
Now we define security conditions for qualified sets. Let  
 Θ ∈ 








Γ
=

q
h
h
1
)(
Qual  
 9 
same probability of being black. Similarly, pixels belonging to the white region are also treated in 
the same way. Also note that any secret pattern is associated with one row vector in the secret 
pattern matrix S. Therefore, we define Β(Θ) (resp. Ω(Θ)) to be a set of row indices of S, where 
each index is associated with a different secret pattern corresponding to the black (resp. white) 
region. Sets Β(Θ) and Ω(Θ) can be represented as  
 






∈== ∨
∈
}2 ..., ,2 ,1{ ,1:)( ,
)(
q
ri
r
isi

 ,  (15) 
 






∈=−= ∧
∈
}2 ..., ,2 ,1{ ,1)1(:)( ,
)(
q
ri
r
isi

 ,  (16) 
where si,r is an entry of the secret pattern matrix S, and the symbols “∧” and “∨” denote logical 
operator “AND” and “OR,” respectively. For the qualified set Θ = {1, 2, 3} in example 2, for 
instance, it holds that Ρ(Θ) = {1, 2}, Β(Θ) = {3, 4, 5, 6, 7, 8}, and Ω(Θ) = {1, 2}. The set Ρ(Θ) = 
{1, 2} means that secret images SI(1) and SI(2) can be decrypted from the qualified set Θ = {1, 2, 
3}. The set Β(Θ) = {3, 4, 5, 6, 7, 8} means that the third to the eighth row vectors in S are secret 
patterns associated with the black region. The set Ω(Θ) = {1, 2} means that the first and the 
second row vectors in S are secret patterns associated with the white region. Let qi(Θ) denote the 
probability that the i-th secret pattern is encrypted and stacked as a black pixel on the stacked 
image of Θ. Then, the probability qi(Θ) can be represented as  
 ∑ ∨
= ∈
⋅





=
n
j
jitj
t
i ceq
2
1
,,)(

 ,  (17) 
where i ∈ {1, 2, …, 2q}. Some calculations of the probabilities qi(Θ) for Example 2 are shown in 
Table I. For the qualified set Θ = {1, 2, 3} in Example 2, the conditions q1(Θ) = q2(Θ) and q3(Θ) 
= q4(Θ) = q5(Θ) = q6(Θ) = q7(Θ) = q8(Θ) should be satisfied, for instance. Thus, each pixel in the 
white (or black) region of the stacked image of the qualified set {1, 2, 3} has the same 
probabilities of being colored black. Accordingly, the image quality condition of qualified sets, 
say “Quality condition 1,” can be defined as follows.  
 
Quality condition 1: qb(Θ) = qb′(Θ) and qw(Θ) = qw′(Θ) for b, b′∈ Β(Θ), w, w′ ∈ Ω(Θ), b ≠ b′, 
and w ≠ w′. 
 
Note that if the number of secret images is 1, i.e., q = 1, Security condition 2 and Quality 
condition 1 always hold; thus, they can be ignored in this case. 
2.5 Contrast 
 11 
 














∀∈
∈∀=
∈∀=
∈∀=
∈∈∈∀=
∈Γ∈∈∀=
∈






Γ∈∀−=
∑
=
+
=
.,  ,]1,0[
};2...,,2,1{  ,1
);(' ,  ),()(
);(' ,  ),()(
;}1 ,0{ and ,}1 ,0{ ),(' ,  ),()(
;}1 ,0{ and , },2 ..., ,2 ,1{' ,  ),()(s.t.
}. ..., ,2 ,1{ and ,  ),()()(.max
,
2
1
,
'
'
|||)(|
)()('
||
Forb'
1
)(
Qual
ji c
   ic
wwqq
bbqq
UUUiiUpUp
UiiUpUp
qhwb
ji
j
q
ji
ww
bb
ii
q
ii
q
h
h
n











α
 (24) 
We can observe that the model is a multi-objective linear programming model because both 
objective functions and constraints are linear. In this model, we have totally 2q+n variables (ci,j’s) 
needed to be solved. It means that the number of variables will increase exponentially as q and/or 
n increases. Although we may have numerous methods to solve the model, the problem may 
become very complex and hard for many optimization techniques in the case of large q and/or 
large n. Therefore, in the following section, we introduce genetic algorithms, which are 
insensitive to the growth of dimensionality and the feasible region structure, for our model. 
3. Application of Genetic Algorithms 
3.1 Genetic Algorithms 
Genetic algorithms (GAs), introduced by Holland in the 1970s, are stochastic and adaptive 
optimization methods inspired by the behavior of natural evolution (Holland, 1975). In general, 
GAs are composed of a population of chromosomes and three primary genetic operators, namely, 
reproduction, crossover, and mutation. A chromosome containing many genes denotes a solution 
in the problem domain. Usually, it is encoded as a binary string containing 0’s and/or 1’s or as a 
real-parameter string containing real numbers. In addition, GAs use the fitness function to 
evaluate the goodness of each solution and to guide the direction of searching in the solution 
space. The primary objective of the reproduction operator is to make more copies of good 
solutions and eliminate bad solutions according to the given fitness function in a population. The 
crossover operator is used to exchange parts of the genes of two chromosomes and then to 
generate the corresponding offspring. The mutation operator is used sporadically to alter genes 
randomly to maintain diversity in the population. 
GAs are population-based optimization procedures, which use the so-called “implicit 
parallelism” to process a population of chromosomes simultaneously. Therefore, the power of 
searching from many regions of solution space makes it very suitable for multi-modal and 
multi-objective optimization problems. Besides, they are insensitive to the growth of 
dimensionality, irregularity of the objective function behavior, the feasible region structure, and 
the presence of noise in the objective function evaluations (Goldberg, 1989). The primarily reasons 
for their success are their broad applicability, ease of use, and global perspective (Goldberg, 1989). 
 13 
use weighted-sum approach because of its excellences in efficiency and ease of implementation. 
Now, we assume that every qualified set is of equal importance with respect to contrast. 
Therefore, the fitness function can be formulated as F(x) = ΣFΘ(x). 
3.4 Reproduction 
Since the above fitness function may result in negative fitness, we use the binary 
tournament selection method for reproduction because of its ability to deal with negative values. 
The procedure is as follows: pick two chromosomes randomly from the population, compare their 
fitness values, and copy the chromosome with higher fitness value to the matting pool. Repeat the 
procedure until the matting pool is filled with chromosomes. 
3.5 Crossover 
To deal with the crossover operation for real-parameter strings, we employ the simulated 
binary crossover (SBX) operator introduced by Deb and Agrawal (1995). The SBX operator 
simulates working principles of crossover operation for binary strings, and biases solutions near 
each parent more favorably than solutions away from the parents. That is, near-parent solutions 
are monotonically more likely to be chosen as offspring than solutions distant from parents. The 
advantage of using the SBX operator is that one can control the search power of GAs by 
controlling the distribution index ηc. 
3.6 Mutation 
The simplest way to mutate a specific gene in a real-parameter string is by the random 
initialization operation. Let xi be the i-th gene in the real number string, let yi be the result of 
mutating xi, and let ( )Uix  and 
( )L
ix  be the upper and lower bounds of xi, respectively. The 
random initialization operation is formulated as  
 ( ) ( )( ) ( )LiLiUiii xxxry +−⋅= ,  (26) 
where ri denotes a random number between 0 and 1. In our model, the upper and lower bounds 
are ( )Uix  = 1 and 
( )L
ix  = 0, respectively. In addition, we assume that the probability of mutation 
for each gene is uniform. 
4. Results and Discussions 
In the following experiments, we used the method presented in the previous section to solve 
the probability matrix C. The programs were written in Java and executed on a personal computer 
with Pentium-III 1.0G Hz CPU, 256MB SDRAM, and the operating system MS-Windows XP.  
4.1 Experiment 1 
Firstly, we present the experimental result of the access structure for two secret images and 
three shares. The access structure was defined in the following example. 
 15 
qualified set is 100%; that is, perfect reconstruction of black pixels was realized by the 
probability matrix (see Fig. 2(f)-(i)). Therefore, we can easily recognize the secrets from the 
stacked images by our eyes.  
In the traditional pixel-expansion based methods, each secret pattern corresponds to a n×m 
Boolean matrix called a basis matrix, where n is the number of shares and m, the parameter of 
pixel expansion, is the number of pixels on each shares needed to encrypt a secret pattern. Note 
that we can transform the probability matrix C into the four 3×4 basis matrices B(0, 0), B(0, 1), B(1, 0), 
and B(1, 1) for the secret patterns (0, 0), (0, 1), (1, 0), and (1, 1), respectively. They can be 
represented as follows.  










=
1110
1110
1100
)0 ,0(B , 










=
1101
1110
1100
)1 ,0(B , 










=
1110
1110
1001
)0 ,1(B , 










=
1011
0111
1100
)1 ,1(B . 
In this example, qualified set {1, 2, 3} was associated with the two secret images SI(1) and SI(2) 
(see Fig. 2(f)). However, in Droset’s method (Droste, 1996), set {1, 2, 3} must be either a 
qualified set associated with one secret image or a forbidden set. Since every secret image can be 
decrypted from two out of the three shares, set {1, 2, 3} is not a critical set for decryption. 
Suppose that set {1, 2, 3} is a qualified set which can decrypt secret image SI(2) in Example 2 and 
that Droste’s method is used. Then, one can obtain a scheme with contrast α = 1/13 and pixel 
expansion m = 13 (Droste, 1996). Note that, in our method, we do not need to expand shares. 
Therefore, our result is better than Droste’s with respect to contrast (α = 1/4) and pixel expansion 
(m = 1) in this example. 
4.2 Experiment 2 
Next, we present the experimental result for the access structure shown in Example 1. The 
working parameters of GAs for solving the probability matrix C was shown in Table III. After 
   
(a) Secret Image SI(1) (a) Secret Image SI(2) (c) Share SH1 
   
(d) Share SH2 (e) Share SH3 (f) SH1 + SH2 
   
(g) SH2 + SH3 (h) SH1 + SH3 (i) SH1 + SH2 + SH3 
Fig. 2.  The result for Example 2 (400×200 pixels, 300 dpi). 
 17 
 












=
10101001
11101111
11001110
11110000
)0 ,0 ,1(B , 












=
10011001
11101111
11001110
11110000
)1 ,0 ,1(B  
 












=
10101001
10111111
11001110
11110000
)0 ,1 ,1(B , 












=
01101001
10111111
11001110
11110000
)1 ,1 ,1(B . 
According to Droset’s method (Droste, 1996), we can construct the basis matrices with contrast α 
= 1/40 and pixel expansion m = 40 for Example 1. Therefore, our result is also superior to 
Droset’s with respect to contrast (α = 1/8) and pixel expansion (m = 1) in this example. 
4.3 Experiment 3 
Finally, we present the experimental result of the access structure with innocent-looking 
   
(a) Secret Image SI(1) (b) Secret Image SI(2) (c) Secret Image SI(3) 
   
(d) Share SH1 (e) Share SH2 (f) Share SH3 
   
(g) Share SH4 (h) SH1+SH2 (i) SH1+SH3 
   
(j) SH1+SH4 (k) SH2+SH3 (l) SH2+SH4 
   
(m) SH3+SH4 (n) SH1+SH2+SH3 (o) SH1+SH2+SH4 
   
(p) SH1+SH3+SH4 (q) SH2+SH3+SH4 (r) SH1+SH2+SH3+SH4 
Fig. 3. The result for Example 1 (400×200 pixels, 300 dpi). 
 
 19 
The shares and stacked images were presented in Fig. 4. It was easy to check that the contrast 
indices of qualified sets {1}, {2}, and {1, 2} were α({1}) = 0.32, α({2}) = 0.25, and α({1, 2}) = 
0.21, respectively. The scheme, with contrast α = 0.25 for any qualified set and pixel expansion m 
= 4, for the access structure defined in Example 3 was also introduced by Naor and Shamir (1995) 
and Ateniese et al. (2001). As the concept of domination used by most multi-objective optimization 
algorithms suggests, the solution (25, 25, 25) is no better than the other contrast (32, 25, 21) and 
vice versa. In fact, they should be regarded as being equally good in this example. Therefore, our 
contrast was as good as those presented in (Naor and Shamir, 1995) and (Ateniese et al., 2001), but 
we had the smallest pixel expansion (m = 1). This example showed that our model is also suitable 
for access structures with innocent-looking shares.  
5. Conclusions 
Visual cryptography makes use of human eyes to decrypt the secret without the requirement 
of computers and complex decryption algorithms. Consequently, visual secret sharing schemes 
are good solutions for sharing secrets while computers or other decryption devices are not 
available. Most visual cryptographic methods use the technique of pixel expansion to encrypt 
secret images; therefore, the size of each share is larger than that of secret images. Pixel 
expansion not only results in distortion of the shares, but also consumes much more storage space. 
Additionally, a great deal of effort has been made on the problem of sharing one secret image 
among a set of participants. However, only few attempts have been made on the issue of sharing 
many secret images. In order to cope with these two problems, we proposed a multi-objective 
optimization model. We utilized the concept of probability and considered security and contrast 
to construct this model. In our model, we guaranteed that unconditional security of forbidden and 
qualified sets was ensured. Therefore, shares corresponding to forbidden sets contain no 
information about the secret images and shares corresponding to qualified sets do not leak out 
any information of other secret images. In this paper, three examples were presented to show the 
   
(a) Secret Image SI(1) (a) Secret Image SI(2) (c) Share SH1 
   
(d) Share SH2 (e) Share SH3 (f) SH1 + SH2 
   
(g) SH2 + SH3 (h) SH1 + SH3 (i) SH1 + SH2 + SH3 
Fig. 4.  The result for Example 2 (400×200 pixels, 300 dpi). 
 21 
Hou, Y. C., 2003. Visual cryptography for color images. Pattern Recognition 36, 1619-1629. 
Hou, Y. C., Lin, F., and Chang, C. Y., 2001. Visual cryptography for color images without pixel 
expansion. Journal of Technology 16(4), 595-603 (in Chinese). 
Ignizio, J. P. (1982). Linear programming in single & multiple-objective systems. Prentice-Hall, 
Inc., Englewood Cliffs, N.J., 372−429. 
Ito, R., Kuwakado, H., and Tanaka, H., 1999. Image size invariant visual cryptography. IEICE 
Transactions on Fundamentals of Electronics, Communications and Computer Sciences 
E82-A(10), 2172-2177. 
Iwamoto, M. and Yamamoto, H., 2003. A construction method of visual secret sharing schemes 
for plural secret images. IEICE Trans. Fundamentals 86-A(10), 2577-2588. 
Naor, M. and Shamir, A., 1995. Visual cryptography. In Advances in 
Cryptology-EUROCRYPT ’94, LNCS 950, Springer-Verlag, 1-12. 
Srinivas, M. and Patnaik, L. M., 1994. Genetic algorithms: a survey. Computer 27(6), 17-26. 
Tzeng, W. G. and Hu, C. M., 2002. A new approach for visual cryptography. Designs, Codes and 
Cryptography 27, 207-227. 
Verheul, E. R. and van Tilborg, H. C. A., 1997. Constructions and properties of k out of n visual 
secret sharing schemes. Designs, Codes and Cryptography 11, 179-196. 
 
 
 23 
The solution space of the model is searched by an efficient optimization algorithm, i.e., the 
genetic algorithm. We have showed that the proposed scheme can avoid pixel expansion and can 
reach better contrast. The problems we have solved in the research project are as follows: 
1. The problem of pixel expansion 
2. The improvement of contrast 
3. The requirement of security 
 
In this project, we also accomplished the following tasks:  
1. Constructing the optimization model for VSSSs with plural secret images 
2. Reviewing and analyzing multi-objective optimization methods 
3. Selecting a suitable and efficient optimization algorithm to solve the problem 
4. Conducting experiments and analyzing the performance 
Besides, members of the project have gotten trained skills of visual secret sharing, and 
understood how to share plural secrets via VSSSs. Finally, during the period of this research 
project, we have published the following journal and conference papers:  
1. Hsu, C. S, Tu, S. F., and Hou, Y. C. (2009, 04). A Document Protection Scheme Using 
Innocuous Messages as Camouflage. WSEAS Transactions on Information Science and 
Applications, 4(6), 694-703. (EI) 
2. Hsu, C. S. and Tu, S. F. (2008, 10). An Imperceptible Watermarking Scheme Using 
Variation and Modular Operations. International Journal of Hybrid Information Technology 
(IJHIT), 1(4), 9−16. 
3. Tu, S. F. and Hsu, C. S. (2009, 07, 7-9). “Digital Watermarking Method Based on Image 
Size Invariant Visual Cryptographic Scheme,” Proceedings of the International Workshop on 
Pervasive Media (PerMedia2009), Brisbane, Austria, 362-366. (EI) 
4. 王尹良、劉妍芝、許慶昇 (2009, 06, 3-5)。結合機率理論的數位影像竄改偵測方法，第
十九屆資訊安全會議(CISC 2009)，台北市。(學生最佳論文競賽佳作獎) 
5. 劉妍芝、王尹良、許慶昇 (2009, 06, 3-5)。以蟻群最佳化演算法為基礎的最低位元置換
法，第十九屆資訊安全會議(CISC 2009)，台北市。 
6. 許慶昇、王尹良、劉妍芝(2009, 05, 23)。機率式兩階段數位影像驗證方法，第二十屆國
際資訊管理學術研討會論文集光碟(ICIM 2009)，台北市。 
7. 許慶昇、劉妍芝、王尹良(2009, 05, 23)。結合蟻群最佳化演算法與改良式替代矩陣之最
低位元置換法，第二十屆國際資訊管理學術研討會論文集光碟(ICIM 2009)，台北市。 
 
