2 
 
行政院國家科學委員會專題研究計畫進度報告 
【三維晶片系統之設計與測試技術研發】 
子計畫四: 三維晶片系統之測試與時序校正技術研發(2/2) 
(第二年) 
 
中文題目: 適用於三維晶片的時脈同步電路 
英文題目: Die-to-Die Wire-Independent Clock Synchronization for 3D IC 
計畫編號：NSC 99-2220-E-009-007 
執行期限：99年8月1日至100年7月31日 
主持人：清華大學電機系 黃錫瑜 (教授) 
計畫參與學生：柯智偉 丁若婷  曾梓晏  徐振翔  林郁翔 
 
 
Abstract—This paper presents a novel die-to-die clock synchronization method that is independent 
of the inter-die wire delay. Through a 2-Phase All-Digital Delay Locked Loop (2P-ADDLL) and a Dual 
Locking Mechanism (DLM), this method can be used to maintain a global clock signal between two 
dies in a 3D-IC, and thereby enabling the synchronous 3D-IC design methodology. Unlike previous 
methods, ours does not need to know the delay of the inter-die clock wire. This is extremely important 
since in a modern 3D-IC, the delay of the inter-die connection is often harder to predict. Such a 
method has several other benefits. For example, it can accommodate the ever-increasing process 
variation easily through its silicon tracking ability. It is also suitable for a design incorporating 
heterogeneous integration. Simulation results indicate that it can support clock signals running at 
2.8GHz. Silicon measurements of a test chip in a 90nm CMOS technology show that the phase error 
can be locked constantly to less than 9.6ps at a clock frequency of 600MHz, with a peak-to-peak jitter 
of 9.778ps and a power consumption of only 1.8mW. 
 
Index— Clock Synchronization, De-Skew, Delay-Locked Loop, 3D-IC, Digitally Controlled Delay Line 
 
I. INTRODUCTION 
  Recent years, three-dimensional integrated circuit (3D IC) has drawn great attention [1]. The feature size 
of the CMOS process technology is approaching the limitation of physics, 3D IC provides another form of 
momentum for the Moore’s law. More and more 3D ICs incorporate Through Silicon Vias (TSVs). With the 
4 
 
integration. A test chip in UMC-90um CMOS process technology indicates that the clock skew (or phase 
error) between the two clock signals after the synchronization is complete is less than 9.6ps at 600MHz. 
    The rest of this paper is organized as follows. Section П describes the overall synchronization architecture 
and the operating principle of the proposed Dual Locking Mechanism (DLM). Section Ш presents the circuit 
details and Section ІV reports the measurement results of our test chips. Finally, Section V concludes. 
 
II. ARCHITECTURE AND OPERATION 
A. Dual-Locking Mechanism  
     The architecture of our proposed die-to-die wire independent synchronization is illustrated in Fig. 3. Each 
die is equipped with a 2-phase All-Digitally Delay Locked Loop (2P-DLL), marked as DLL_1 and DLL_2, 
respectively. In addition to these two circuit blocks, we need some extra tri-state buffers (denoted as B1 and 
B2). These tri-state buffers form a two-way synchronization path between the two dies. It is notable that this 
synchronization path is different from the main clock path (which is unidirectional and goes from die_1 to 
die_2 while passing through a TSV). Our goal is to control the delay across DLL_1 and DLL_2 so that the 
clock edge (die2) in die_2, is aligned with that of the original clock source (die1) in die_1. This goal 
should be achieved regardless of the delay of the main clock path. The entire clock synchronization path is 
divided into two directions, indicated by the value of a controlled signal, called “Dir”. 
    (1) Feedback Path: When this controlled signal is set to low, the direction of the synchronization path is 
from die_2 to die_1, forming a “Feedback Path”; which starts from a signal marked “1”, passing through 
tri-state buffer B2 in die_2, TSV_1, another tri-state buffer B1 in die_1, and finally generates a clock signal 
called (fb) as shown in Fig. 3. 
    (2) Forward Path: On the contrary, when the value of the controlled signal “Dir” is set to high, the 
direction of the synchronization path is from die_1 to die_2, forming a “Forward Path”; which starts from 
the clock source node (die1), passing a tri-state buffer B1 in die_1, a TSV, another tri-state buffer B2 in 
die_2, and finally generates a clock signal called (fw). 
    Definition: (Synchronization Path Delay ) Ideally, the delays of the synchronization path running in 
two different directions (forming “Forward Path” and “Feedback Path” as defined previously) can be made 
almost identical since both of them pass through the same TSV (e.g., TSV_2) and two local tri-state buffers 
(e.g., B1 and B2) which can be designed to have matched driving strengths. Therefore, we denote this delay 
as  in this sequel to ease the understanding of our dual locking mechanism. The absolute value of this delay 
is not important – since it does not affect the resolution of our synchronization scheme, but we will mention it 
quite frequently in later discussion. 
6 
 
1 and (out) are the input and output signals of the DLL_2 in die_2 and their rising edges center around the 
reference clock signal (die1), then we can take the middle signal of the DLL_2 as desired (die2) which is in 
line with (die1).  
This scenario usually works but with one exception - referred to as “Inverse Locking” here. As illustrated 
in Fig. 6, the rising edge of (die2) may align with the falling edge of (die1). To explain this phenomenon, 
we need to examine the waveforms of the input and output signals of 2P-DLL in die_2, i.e., 1 and (out) 
closely. Since they are clock signals, their rising edges appear in every clock period regularly. For signal 1, 
we mark the 1st rising edge as “1st 1 edge” as shown in Fig. 6. Similarly, we mark two rising edges of clock 
signal (out) as “1st (out) edge” and “2nd (out) edge”, respectively. Next, we wish to derive the rising edge 
position of signal (die2) by analyzing the delay across the 2P-DCDL (since (die2) is the middle signal out 
of it). We conduct this analysis by drawing some observations in two cases: 
(Case 1): As shown in Fig. 6, if “1st (out) edge” is aligned with “1st (fw) edge”, then the delay across the 
2P-DCDL (equaling the timing interval between “1st 1 edge” and “1st (out) edge”) is the desired 2. In this 
case, the generated (die2) is correct (i.e., aligning positively with (die1). 
(Case 2): As shown in Fig. 6, if “2nd (out) edge” is aligned with “2nd (fw) edge”, the delay across the 
2P-DCDL (equaling the timing interval between “1st1 edge” and “2nd(out) edge”) is “2 plus the clock 
period (Tp)”. Note that this is possible because in our locking procedure we do not exactly know what delay 
 is. It implies that we may tune the delay of the 2P-DCDL in a way that this case happens. The clock signal 
now taken out of the middle of the 2P-DCDL, (die2), in this case will be erroneous as shown in the 
waveforms designated as Case 2 in Fig. 6. This is what we called inverse locking. 
   We can deduce that whenever the 2P-DLL is locked with its delay equaling the timing interval between the 
“1st 1 edge” and the (out) edge of the odd sequence number (i.e., the 1st, 3rd, 5th, …, (out) edge), then the 
result is positive locking and correct. On the other hand, if the 2P-DLL is locked with the timing interval 
between the “1st 1 edge” and the (out) edge of the even sequence number (i.e., the 2nd, 4th, 6th, …, (out) 
edge), then the result is inverse locking and is not correct. 
One way to resolve the inverse locking is to eliminate the (out) rising edges of even sequence number 
(i.e., the 2nd, 4th, 6th, …, etc.). The needed architecture is shown in Fig. 7. The element denoted as “Div” is a 
divide-by-2 frequency divider, which can double the clock period of a clock signal. The entire clock 
synchronization procedure is similar to what we discussed previously with only a slight difference, as will be 
explained briefly after we introduce a terminology called “modified synchronization path delay”, denoted as 
’. 
8 
 
           
 (4) 
It is notable that the frequencies of (die1), 1, (die2), and (out) are all the same. When we delay clock 
signal (die2) by a multiple of its own clock periods (i.e., m*clock period of (out) in the above expression), 
the phase relative to 1 does not change. We thus can conclude that all possible delays of the DLL_2 will 
place (die2) in the right position, i.e., ’-behind 1 and also in line with (die1). We thus prove that no 
inverse-locking is likely in this new modified synchronization scheme.  
 
D. Dynamic Tracking 
Once the synchronization is complete, the circuit will enter the maintenance mode – in which we continue 
to perform fine tuning of the two delay-locked loops in an interleaving manner to keep the phases of (die1) 
and (die2)  in lock as the operating conditions such as temperature and voltage varies. In order to do this, we 
need to regulate the direction of the synchronization path that is used to generate clock signals (fw) and 
(fb). At each round, the controller will go through the following states in sequence – (1) Set synchronization 
path in backward direction at DLL_1 in die_1 (i.e., for (fb) generation), (2) Enable DLL_1 operation (to 
align (fb) with (die1)), (3) When DLL_1 is done fine-tuning, set synchronization path in forward direction 
(i.e., for (fw) generation), (4) Enable DLL_2 operation (to align (fw) with (out)). When DLL_2 is done, 
wait for some period of time if needed and then start another round of the dynamic tracking. 
 
III. CIRCUIT DESIGN 
    The 2-pahse DLL shown in Fig. 5 previously consists of four circuit blocks: (1) a 2-phase 
Digitally-Controlled Delay Line (DCDL), (2) a period detector, (3) a tri-state detector, and (4) a digital 
controller, as to be detailed next. 
 
A. 2-Phase Digital-Controlled Delay Line 
Fig. 10 shows the Period Detector and the 2-phase DCDL. The 2-phase DCDL contains 2 identical DCDL 
so as to create 2-phase clock signals (die2) and (out). The first DCDL is expanded in detail, while the 
second DCDL is only shown symbolically as a black block. The proposed DCDL with distributed delay line 
architecture includes Coarse-Tuning Chain (CTC) with binary-weighted code Coarse[5:0]; and Fine-Tuning 
Chain (FTC) with thermal code Fine[17:0]. The coarse-tuning chain and the fine-tuning chain are intertwined, 
not cascaded, in our design with some benefits to be explained later. Jointly they provide 64 (coarse -tuning) 
 0    )('))2(1(  mTpmdieDelay 
10 
 
Secondly, the modification we made can boost the maximum operating frequency it can support. This is 
due to the additional benefit obtained by spreading the overall loading effect along the delay line. Also, the 
clock signals generated along this delay chain have sharper transitions with smaller rise/fall times - this is 
often needed when supporting high-speed clocking. 
    Based on the measurement results for this 2-phase DCDL, the coarse-tuning resolution is about 55ps in 
average and the controllable range is about 10ns to offer a wider range of use. The fine-tuning resolution is 
hard to measure directly, Based on post-layout simulation results, the resolution is about 3.6ps. 
 
B. Period Detector 
In conjunction with the 2P-DCDL, there is a period detector as mentioned previously. This period detector 
is useful in rapidly predicting the range of the source clock period being applied to our design. The concept is 
that if we can estimate the clock period first to set the search range on the DCDL. This can lead to a faster 
locking speed. Structurally, it contains (1) a delay line with some cascaded type-A buffers (i.e., triangles 
labeled A) and type-B buffers (i.e., triangles labeled B), (2) 6 D-type flip-flops, and a (3) period judgment 
circuit. Its operation can be streamlined as follows: 
   We set the coarse-tuning code Coarse[5:0]=63, enabling the slowest path in each of the 6 stages in the 
DCDL. When 1 is applied, 6 delayed-version clock signals are generated, i.e., {E0, E1, …, E5} along the 
DCDL. Then, we compute a coarse-tuning code range in which we can achieve the phase locking objective. 
This is done by positioning the failing edge of 1 by sampling it at the timings indicated by the rising edges of 
clock signals {E0, E1, …, E5}. Through the result, we can roughly estimate how long a clock period of 1 is 
or called “Period Boundary”. This part will be explained in detail with an example later. Once the 
coarse-tuning code range is fixed, we can conduct a faster binary search to determine the final coarse-tuning 
code.  
   Fig. 13 explains how we set the range of the coarse-tuning code by the period detector. For simplicity, we 
focus only on the principle while skipping some details of the usage of some type-A and type-B delay buffers 
(i.e., those rectangles in Fig. 10 labeled as A or B) in the period detector. In short, they are there for matching 
the basic delays in the DCDL. We can ignore them in the following discussion. In general, we latch the signal 
of 1 at the rising edges of clock signals {E0, E1, …, E5}. The result is stored in E[0], E[1], …, E[5], 
respectively. It is notable that the phase delay between two contiguous clock signals Ei and E(i+1) grows 
exponentially. Therefore we should be able to cover a wide range of clock periods under estimation. For 
example, there is 1 type-D delay (TD) between the source clock signal 1 and E0, and 2 times TD delay 
12 
 
case, if (die1) is leading, then we set signal Tune to “High”. Otherwise, we set signal Tune to “Low”. To 
achieve phase locking the phase error between the two given clock signals need to be less than 2*TD, where 
TD denotes the delay of the delay buffer. In our design, the timing resolution is improved with our 
high-resolution DCDL. We further use another D-type flip-flop to continuously detect he output signal 
“Tune”. Only when “Coarse_Lock” is “High” and signal “Tune” dances around “High” and “Low”, our 
controller will declare final locking and stop tuning the DCDL. At this moment, the phase error of the two 
given clock signals is less than the setup time of the D-type flip-flop, which is about 10ps in our 90um CMOS 
process technology. 
    Fig. 15 shows the timing diagram of the overall locking process for the proposed 2-phase ADDLL. After 
the reset signal goes high, the controller set Coarse[5:0]= 63 and the period detector starts to estimate the 
input clock period to determine DCDL operating range, such as Coarse[5:0]=32, as shown in Fig. 16. This 
step only wastes one clock cycle to complete. Then we enter the “Coarse tuning” step to execute binary 
search to compensate for the phase error between (fw) and (out), depending on the value of signal “Tune”. 
After signal “Coarse_lock” goes high (meaning that the phase error is less than two buffer delays), the “fine 
tuning” process takes over until signal “Lock” goes high and we start the dynamically tracking to maintain 
the achieved synchronization.    
IV. EXPERIMENTAL RESULTS 
The test chip has been fabricated in an UMC 90 nm CMOS technology process. Fig. 16 shows the die’s 
microphotograph. It is covered by a dummy layer on the top, so we cannot see the fabric of the silicon directly. 
We implemented the proposed design on this test chip, including two 2-Phase DLLs, and a tunable delay line 
as the pseudo-TSV, which mimic the long-distance clock path. This pseudo inter-die connection can be tuned 
to produce different delay values, ranging from 500ps to 10ns. 
   Our design overall occupies an active area of 100m by 80m. The power consumes 0.8mW and 1.7mW 
when operating at 200MHz and 600MHz, respectively. Our design can support very high frequencies up to 
2.8GHz, but the speed of this test chip is PAD-limited at 600MHz. Fig. 17 shows the measured jitter spread 
when the clock is running at 600MHz. The root-mean-square and peak-to-peak jitters are 1.07ps and 9.8ps, 
respectively. 
    Fig. 18(a) shows waveforms of (die1) and (die2) before synchronization when the clock is running at 
200MHz and the inter-die wire delay is 2ns. The skew between them reflects the delay of the inter-die 
connection. Fig. 18(b) shows their waveforms after our clock synchronization is complete. The phase error is 
only 13.6ps. Fig. 19(a) shows a similar situation when the clock is running at 600MHz and the inter-die wire 
delay is 10ns. The phase error is still very small at about 9.6ps.  
14 
 
ACKNOWLEDGMENTS 
This work was supported in part by National Science Council of Taiwan (NSC) under grant NSC 
98-2220-E-007-033, and Information and Communications Research Lab. (ICL), Industrial Technology 
Research Institute (ITRI), Taiwan. The authors are also grateful to CIC (Chip Implementation Center) of 
Taiwan, for their assistance in fabricating the chips. 
REFERENCES 
[1] I. U. Abhulimen, A. Kamto, Y. Liu, S. L. Burkett, and L. Schaper, “Fabrication and Testing of 
Through-Silicon Vias Used in Three-Dimensional Integration,” Journal of Vacuum Science & 
Technology B, vol. 26, issue 6, pp. 1834-1840, Nov. 2008. 
[2] G. K. Dehng, J. M. Hsu, C. Y. Yang, and S. I. Liu, “Clock-Deskew Buffer Using a SAR-Controlled 
Delay-Locked Loop,“ IEEE J. of Solid-State Circuits, vol. 35, no. 8, pp. 1128- 1136, Aug. 2000. 
[3] C. Y. Yang, and S. I. Liu, “A One-Wire Approach for Skew-Compensating Clock Distribution Based on 
Bidirectional Technique,” IEEE J. of Solid-State Circuits, vol. 36, no. 2, pp. 266- 272, Aug. 2001. 
[4] D. Sheng, C. C. Chung, and C. Yi. Lee, “An All-Digital Phase-Locked Loop with High-Resolution for 
SoC Applications,” Proc. of IEEE Int’l Symp. VLSI Design, Automation and Test, pp. 1- 4, May 2006. 
[5] K. Shung and L. S. Kim, ”A High-Resolution Synchronous Mirror Delay Using Successive 
Approximation Register,” IEEE J. of Solid-State Circuits, vol. 39, no. 6, pp. 909- 918, Jun. 2004. 
[6] D. Shin, C. Kim, J. Song, and H. Chae, “A 7ps Jitter 0.053 mm2 Fast Lock All-Digital DLL With a Wide 
Range and High Resolution DCC” IEEE J. of Solid-State Circuits, vol. 44, no. 9, pp. 2437-2451, Sept. 
2009. 
[7] R. J. Yang and S. I. Liu, ”A 40–550 MHz Harmonic-Free All-Digital Delay-Locked Loop Using a 
Variable SAR Algorithm,” IEEE J. of Solid-State Circuits, vol. 42, no. 2, pp. 361- 373, Feb. 2007. 
[8] R. J. Yang and S. I. Liu, “A 2.5 GHz All-Digital Delay-Locked Loop in 0.13m CMOS 
Technology,” IEEE J. Solid-State Circuits, vol. 42, no. 11, pp. 2338-2347, Nov. 2007. 
 
 
 
 
 
 
 
16 
 
 
Fig. 4: The overall operation of dual locking mechanism. 
 
 
 
 
Coarse[5:0] Fine[11:0]
P[5:0]
Tune Coarse_lock
(out)
(die2)
DCDL
2 Phase-DCDL
(fw) Tri-Phase Detector
Period Detector
Digital Controller
1
Lock
/2
(clk_div)
Dir (Rst)
2 Phase-ADDLL
DCDL
 
Fig. 5: The proposed 2-Phase ADDLL architecture. 
 
 
18 
 
 
Fig. 8: The timing diagram of proposed “inverse locking free” method. 
 
 
 
 
 
Coarse[1] Coarse[5]
Stage_1 Stage_2 Stage_6
E[0] E[1] Period Detector
D[5:0] P[5:0]S0 S1
E0 E1
E[5]
S5A AB
A
AD A
A
DD D AD
A
x32x2x1
Period 
Judgment
D Q
R
Coarse[0]
E5
B
Fine[5]
Fine[11]
DCDL (First) DCDL (Second)
(out)
(Die2)
AB
D Q
R
D Q
R
B
B
B
Fine[0]
Fine[6]
B
B
Fine[1]
Fine[7]
Stage_1
D A
A
x1
Coarse[0]
B
B
Fine[0]
Fine[1]
Coarse[5]
Stage_6
D AD
A
x32
B
Fine[10]
Fine[11]
B
1
Fine[12] Fine[13] Fine[17] Fine[17]Fine[12]
 
Fig. 10: Our 2-Phase DCDL with distributed delay line architecture and Period Detector. 
 
 
20 
 
 
 
(a) 
 
(b) 
Fig. 14: Tri-state phase detector and its corresponding truth-table. 
 
63 16
(Clk_div)
Tune
Lock
Coarse[5:0]
Reset
8
Coarse_lock
Fine[17:0] 9
(fw)
P[5:0] 32 (Period Boundary)0
(out)
Step1:
Period Detect
Step2:
Coarse Tuning
Step3:
Fine Tuning
Step4:
Tracking
Phase error between (fw) and (out).
Operating
Phase
1
2
3
4
1
2
3
4
“Coarse_lock” goes high after Coarse Tuning Completed. 
Continuously process Fine tuning.
“Lock” signal goes high and conduct dynamically tracking.
 
Fig. 15: The timing diagram of our 2-Phase ADDLL. 
 
22 
 
 
 
 
(a) 
 
(b) 
Fig. 18: Measured waveforms at 200MHz. (a) before phase locking.  
(b) after phase locking. 
 
 
 
 
 
 
 
 
 
 
 
24 
 
 
 
Fig. 20: The simulation waveforms at the transistor-level under 2.8 GHz. 
 
 
 
 
 
 
Fig. 21: Measured phase error at different frequencies and wire delays. 
 
表 Y04 
清華大學補助國內專家學者出席國際學術會議報告 
                                                          99 年 3 月 24 日 
報告人姓名 黃錫瑜 服務機構 及職稱 
國立清華大學電機系 
教授 
     時間 
會議 
     地點 
March 13 – March 19, 2011 
Grenoble, France 
 
會議 
名稱 
 (中文) 歐洲晶片設計、設計自動化、及測試會議 
 (英文) IEEE DATE 2011 (Design, Automation, & Test in Europe) 
發表 
論文 
題目 
 (中文) 用於標準元件庫和靜態記憶體編譯器之漏電流模型建立方式 
 (英文) Black-Box Leakage Power Modeling for Cell Library and SRAM 
Compiler 
 
報告內容應包括下列各項： 
一、參加會議經過 
(1) March 13, 2011 從桃園國際機場經由香港飛往法國巴黎戴高樂機場。 
(2) March 14-17, 2011 參加 DATE 會議及相關展示。 
 論文發表: Session 6.3:口頭發表十五分鐘報告”Black-Box Leakage Power 
Modeling for Cell Library and SRAM Compiler”，現場約有五十名相關領域專
家出席，再 Q/A 過程中回覆了兩個聽眾所提出的問題。 
 協助技術移轉公司【兆心科技】所設立的攤位回答來訪者有關【IC 功率估算】
的相關問題。 
(3) March 18-19, 2011 從法國巴黎戴高樂機場經由香港飛回桃園國際機場。 
 
二、與會心得 
 
General Information: DATE 2011 received some 950 submission, with 50% of them 
came from outside Europe. The most popular topics this year was 
Simulation/Emulation and Low-Power System Design, Estimation and Optimization.  
DATE 2011 is the fourteen in its series. The final program was finalized with 
the help of more than 300+ paper reviewers.  
 The plenary keynote speeches were summarized below: 
(1) Steve Furber of Manchester University, UK, on “Biologically-Inspired Massively Parallel 
Architecture – Computing Beyond a Million Processors”. 
Moore’s Law now permits many-core processors on a single chip. The software is challenged to 
harness those computing power in a coherent way by exploiting the parallelism as much as 
表 Y04 
(Answer): There are indeed some guidelines. For example, we only need to select a small 
number of them, (e.g., 9). We wish to select from only those smaller configurations to avoid 
long simulation time. We also need to select some with a wider shape in layout, and some 
with a narrower shape, so as to cover every possible representative configurations in the 
modeling space.  
 
三、考察參觀活動 (無是項活動者省略) 
本次參與會議除交通時間外，皆於會場，並無特別考察參觀活動。 
 
四、攜回資料名稱及內容 
(1) DATE’11 conference electronic proceedings in CD-ROM. 
(2) A number of call-for-papers. 
 
五、建議 
It is very time-consuming and exhausting to fly to Europe。It takes us about 24 
hours to get there, and 24 hours to come back. However, I think it is still worthwhile, 
considering that this is a high-quality conference that was the first to synergize 
the IC design with design automation and test technologies. I plan to continue to 
submit papers and attend this conference to learn what Europeans think about the 
future of IC design. As compared to traditional Design Automation Conf. in US, I feel 
that there is even much more to see, to feel, and to aspire in DATE. 
 
 
 
 
DATE 2011 Notification - Submission ID 0552
----------------- cut here --------------------
--------------------------------------------------------------------------------
-------
-------------                 Submission 0552                                  
--------
--------------------------------------------------------------------------------
-------
--------------------------------------------------------------------------------
-------
                   Reviewer: 4099975         Expertise level: 
medium   
--------------------------------------------------------------------------------
-------
Submission Title: 
Black-Box Leakage Power Modeling for Cell Library and SRAM 
Compiler 
Overall Value (can be different from average): 2
(n.a. = not applicable, 1 = extremely poor, 5 = outstanding)
In conference scope: y
Interactive presentation candidate: n
Presentation (n.a. = not applicable, 1 = extremely poor, 5 = outstanding):
Accurancy of title: 2
Clarity of abstract: 3
Problem clearly defined: 2
Methods, algorithms, and proofs clearly described: 1
Experiments and results clearly described: 2
Clarity of tables and figures: 2
Overall Presentation (can be different from average): 2
Contents (n.a. = not applicable, 1 = extremely poor, 5 = outstanding):
Novelty of solution: 1
Thoroughness and depth of theory: 1
Hardness of experimental evidence: 2
Account of prior work (references): 2
Overall Content (can be different from average): 1
Comments for authors, suggestions for improvements:
The authors present a generic way to model leakage power of standard 
cells 
and
SRAM blocks. Even though the paper is well written I have a concern 
about the
methodology of this work and how it is performed at technical domain.
第 2 頁
DATE 2011 Notification - Submission ID 0552
probably the
weakest point in this research since no information is provided about the
methodology of activity implementation onto the proposed model. In 
figure 6 
it
seems that the authors have developed a methodology of power 
estimation
considering the inputs? What inputs? How do they feed these inputs using 
a
tracing file of a simulation environment? Did they really use that 
methodology
on AES demo and how? The Figure 8 has no credibility as the power of 
SRAM
macro of AES system is not compared to the actual power derived from a
simulation environment.
I think the quality of this work should be improved using details in the
proposed methodology of the mathematical models used. More 
experiments that
provide a large search space (according technology parameters) should be 
done.
The methodology of feeding tracing data of simulation process  has to be
analysed to convince the reader.                      
--------------------------------------------------------------------------------
-------
                   Reviewer: 1569911         Expertise level: 
medium   
--------------------------------------------------------------------------------
-------
Submission Title: 
Black-Box Leakage Power Modeling for Cell Library and SRAM 
Compiler 
Overall Value (can be different from average): 4
(n.a. = not applicable, 1 = extremely poor, 5 = outstanding)
In conference scope: y
第 4 頁
DATE 2011 Notification - Submission ID 0552
Black-Box Leakage Power Modeling for Cell Library and SRAM 
Compiler 
Overall Value (can be different from average): 2
(n.a. = not applicable, 1 = extremely poor, 5 = outstanding)
In conference scope: y
Interactive presentation candidate: n
Presentation (n.a. = not applicable, 1 = extremely poor, 5 = outstanding):
Accurancy of title: 3
Clarity of abstract: 3
Problem clearly defined: 3
Methods, algorithms, and proofs clearly described: 3
Experiments and results clearly described: 2
Clarity of tables and figures: 3
Overall Presentation (can be different from average): 3
Contents (n.a. = not applicable, 1 = extremely poor, 5 = outstanding):
Novelty of solution: 2
Thoroughness and depth of theory: 2
Hardness of experimental evidence: 2
Account of prior work (references): 2
Overall Content (can be different from average): 2
Comments for authors, suggestions for improvements:
Author presents using segment exponential regression for SRAM leakage 
power
estimation. Different MUX configurations are simulated differently to 
minimize
the errors. The main contribution is the segment exponential regression 
scheme
and the MUX-based partitioning. However, I don't think they are new.
I wonder how the proposed scheme is compared to the existing 
hierarchical
simulation scheme, which is widely used in SRAM-like tool, e.g., HSIM. 
The
proposed technique provides very limited functionality and is only 
working for
small components.
--------------------------------------------------------------------------------
-------
第 6 頁
DATE 2011 Notification - Submission ID 0552
is confirmed by the experimental results.
Starting from the above considerations, I suggest authors to enhance the
introduction  by considering different memory power modeling reported 
in
literature; moreover the authors should clarify the proposed leakage 
power
method for an SRAM compiler.
To conclude, this work seems worthy of being accepted.           
第 8 頁
  
described in detail later. 
As for SRAM complier, we need to address another two 
issues – i.e., (1) the large number of configurations to be 
modeled (which is as high as 80,835 in our example), and (2) 
the simulation time explosion for large-sized SRAM macros 
(e.g., one with 256Kbits). This is a problem one will not 
encounter when building the leakage power models for 
standard cells.  
To avoid the simulation of large-sized SRAM macro, a 
better approach will take only small-sized SRAM macros for 
leakage power simulation using SPICE (or other quick 
transistor-level simulation tools). Based on the collected 
leakage power information, an extrapolation scheme (not just 
interpolation) is further utilized to predict those of the larger 
SRAM macros. Certainly, the accuracy of such extrapolation 
strongly depends on the underlying formula. A better formula 
should be able to capture the relationship between the leakage 
power and the structural parameter of the SRAM (such as the 
number of bits in a word, the total number of wordlines, and 
the so-called MUX width, etc.). Our experience shows that a 
better formula can also reduce the required number of sample 
configurations, and thereby reducing the modeling time 
dramatically. In this paper, we also reveal such an accurate 
extrapolation scheme based on MUX-oriented linear formula 
to be discussed in detail later. 
In summary, our work makes the following contributions: 
(1) Our method is completely a black-box one, which does not 
require the knowledge of the implementation of the standard 
cell or the SRAM compiler. 
(2) Our method reduces the required number of temperature 
samples at which the (quick) SPICE simulation needs to be 
performed by finding a segmented exponential formula that 
fits the leakage power nicely. The benefits include much faster 
modeling time and high accuracy. 
(3) To our knowledge, this is the first automatic black-box 
leakage power modeling tool for SRAM compilers. It is 
generic since the MUX-oriented linear model is built in terms 
of the functional parameters of SRAM macros. The high 
accuracy this model enable the extrapolation scheme so that 
we can skip the SPICE simulation of large-sized SRAM 
macros, and thereby making the modeling process tractable 
within reasonable CPU time. 
The rest of the paper is organized as follows. Section Ⅱ and 
Ⅲ present our power modeling techniques for standard cell 
libraries and SRAM compilers, respectively. Section Ⅳ shows 
the experimental results and Section Ⅴ concludes. 
 
II. LEAKAGE POWER MODEL OF A STANDARD CELL 
LIBRARY 
A. Temperature-Aware Leakage Power Modeling 
The purpose of leakage power modeling for a given 
standard cell library is to approximate the leakage power of 
every cell under every possible input pattern as a table or a 
number of formula or a combination of both. Considering the 
effect of the input patterns alone, if the given cell library has N 
cells and the ith cell has Mi inputs, then the total number of 
entries would be ∑
=
N
i
M i
1
2 in total. Because of the large 
amounts of models that need to be generated, there are many 
ways that have been proposed to cope with the complexity 
issue. One way is to model the average leakage power of a cell 
across all its input patterns. This method can reduce the total 
number of models, but it assumes that each input pattern is 
equally likely to occur. This assumption is overly simple since 
the probability of occurrence of an input pattern for a cell 
depends on the circuit operation. Besides, according to SPICE 
simulation results in Fig. 1, the leakage power of a two-input 
NAND cell varies from one input pattern to another. The 
leakage power is 0.272 nW and 4.695 nW at 100°C when we 
apply all-‘0’ pattern and all-‘1’ pattern, respectively. It can be 
calculated that the leakage power could have a 17X difference 
between these two input patterns. Thus, our method is to 
model the leakage power under every input pattern for each 
standard cell. 
B. Temperature-Dependent Characteristic Formula 
As shown in figure 1, the characteristic curve of the leakage 
power versus the operating temperature is an exponential-like 
shape (under one specific input pattern). As a result, using 
linear regression to model the relationship between the leakage 
power and the temperature may not be accurate enough [8]. 
Therefore, we choose to use the following exponential 
regression method instead: 
TEMPB
leak AeP
•
=        (1) 
Where Pleak represents the leakage power, TEMP represents 
the temperature and A, B are two key weighting factors to be 
derived from the leakage power data under a number of 
sampled temperatures. 
0.0E+00
5.0E-10
1.0E-09
1.5E-09
2.0E-09
2.5E-09
3.0E-09
3.5E-09
4.0E-09
4.5E-09
5.0E-09
0 10 20 30 40 50 60 70 80 90 100
Le
ak
ag
e 
po
w
er
(w
)
Temperature(℃)
"00"
"01"
"10"
"11"
 
Fig. 1: Leakage power for each input pattern of a 2-input 
NAND cell using 90nm CMOS process. 
  
Where C0, C1, C2, C3 are weighting factors, W is the number of 
words, B is the number of bits and WxB is the memory array 
size. 
We analyze the relationship of the predicted leakage power 
using the MUX-oriented power and actual leakage power 
through SPICE simulation in the training set at different 
temperatures as shown in Fig. 4 and Fig. 5. The power data 
match their ideal values closely at both 25°C and 100°C. 
0.E+00
1.E-08
2.E-08
3.E-08
4.E-08
5.E-08
6.E-08
7.E-08
0.E+00 1.E-08 2.E-08 3.E-08 4.E-08 5.E-08 6.E-08 7.E-08
Pr
ed
ic
te
d 
Le
ak
ag
e 
po
w
er
 (W
)
Actual leakage power (W)
 
Fig. 4: Predicted leakage power based on MUX-oriented 
model vs. actual leakage power of SRAM macros in the 
training set at 25°C 
0.E+00
5.E-07
1.E-06
2.E-06
2.E-06
3.E-06
3.E-06
4.E-06
4.E-06
0.E+00 1.E-06 2.E-06 3.E-06 4.E-06
Pr
ed
ic
te
d 
le
ak
ag
e 
po
w
er
 (W
)
Actual leakage power (w)
 
Fig. 5: Predicted leakage power based on MUX-oriented 
model vs. actual leakage power of memories in the training set 
at 100°C 
2) Segmented Exponential Model for SRAM Macros 
So far, we can derive the leakage power for different SRAM 
configurations at some specific temperature by using the 
MUX-oriented power model. But we do not have the ability 
yet to predict the leakage power at the temperatures which we 
have not generate its own MUX-oriented model. In some sense, 
the leakage power modeling for a standard cell library is a 
one-dimensional prediction problem (since we only predict the 
effect of the temperature), while the modeling for SRAM 
compiler is a two-dimensional prediction problem, (in which 
we consider the effects of both the SRAM configuration and 
the temperature). Therefore, we need to apply the concept of 
segmented exponential model previously used for the standard 
cell library again to SRAM macros. The only difference is how 
we produce the leakage power samples over a wide range of 
temperatures. In this 2-dimensional prediction scheme, we 
perform the MUX-oriented modeling for varying 
configurations for a number of selected temperatures first. 
Then, we fill in the leakage powers for each SRAM 
configuration under those un-sampled temperatures by 
segmented exponential regression.  
C. Deriving Leakage Power of a Memory Macro 
The overall flow for leakage power modeling for an SRAM 
compiler is a little bit more involved as shown in Fig. 6. It has 
two phases – the off-line phase and on-line phase. As 
mentioned previously, two types of formulae will be used, 
namely (1) MUX-oriented model (considering the effect of the 
configuration) and (2) Segmented exponential model 
(considering the effect of temperature). Building 
MUX-oriented power is an off-line procedure, while building 
segmented exponential model is an on-line procedure which is 
performed dynamically on demand.   
In the off-line phase, we first run the SPICE simulation of 
those SRAM macros in the training set for all sampled 
temperatures. After that, we run linear regression to create the 
MUX-oriented power model at every sampled temperature. 
In the on-line phase, once a SRAM macro is given with its 
memory configuration and the operating temperature, the 
leakage power can be calculated in three steps: (1) We 
calculate the leakage power data of this configuration at those 
sampled temperatures by applying the MUX-oriented 
formulae. (2) Then from the above leakage power data, we 
dynamically produce the segmented exponential model 
specifically for this SRAM configuration by running 
regression. (3) Finally, we apply the obtained the segmented 
exponential model at the specific operating temperature to 
derive its leakage power value. 
Fig. 7 shows the predicted leakage power (i.e., the leakage 
power predicted by our method) and simulated power through 
the NanoSim simulation (which is used as a reference value) 
for two configurations W64B12M4 and W64B32M4 at 
different temperatures. The power data is close to the NanoSim 
simulation values. 
SPICE Simulation
Of training SRAM macros
At sampled temperatures
Sampled Leakage 
Power Values
Linear Regression
MUX-oriented  
Leakage Power Model 
( Every Sampled Temperature)
SRAM Configuration
Operating Temperature
Step 1:
Leakages for given configuration
(at sampled temperatures)
Step 2:
Generate Segmented Exponential
Model for given configuration
Off-line
Power Estimation
(considering the inputs)
Overall power
of the given SRAM
macro 
(dynamic + leakge)
On-line
A given SRAM macro
Step 3:
Apply the operating temperature
to the segmented exponential model
Fig. 6: Overall flow of our 2-dimensional leakage power 
modeling for SRAM compiler. 
  
D. Temperature-Aware Power Estimation 
To show the effect of temperature on leakage power, we use 
the Advanced Encryption Standard (AES) as a test case. The 
AES is synthesized using 90nm low-Vth standard cell library. 
In this design, a single-port SRAM macro with 256 128-bit 
words is used. The MUX-width is 4. As shown in Fig. 8, the 
leakage power of the SRAM macro in this design grows 
drastically when the temperature rises. The leakage power is 
1212.99 uW at 25°C, and increases to 7992.47 uW at 100°C, 
respectively.  
0
1000
2000
3000
4000
5000
6000
7000
8000
9000
0 10 20 30 40 50 60 70 80 90 100
Le
ak
ag
e 
po
w
er
 (u
W
)
Temperature (°C)
 
Fig. 8: Estimated leakage power at different temperatures for 
an SRAM macro in a test case called AES. 
V. CONCLUSION 
Temperature-aware leakage power modeling for cell library 
and SRAM compiler is not an easy task if both accuracy and 
efficiency are required. Especially for SRAM compiler, both 
the effects of the configuration and temperature need to be 
considered simultaneously, leading to a two-dimensional 
prediction problem. We have demonstrated that several 
techniques, such as temperature sampling plus segmented 
exponential regression, MUX-oriented linear regression and 
extrapolation for large SRAM macros, etc. can jointly deliver a 
fast and accurate solution. The proposed method is very fast in 
that it takes only 16.67 seconds to handle one standard cell, 
and 1hr:6min:33s to handle 32,385 SRAM macros supported 
by an in-house SARM compiler. The average absolute error 
for the 8 cells we built in a mini cell library is only 0.64%, and 
that for an SRAM compiler is 4.87% for the 9 training macros, 
and 3.89% for a set of medium-sized validation set, 
respectively. To our knowledge, this is the first black-box 
leakage power modeling method for SRAM compilers. We 
have integrated this leakage power modeling feature into an 
in-house power estimation tools, i.e., PowerMixer. With this 
feature, one can not only do the total power estimation more 
accurately by considering the effect of the operating 
temperature of an IC design, but also investigate how power 
and temperature react to one another and under what condition 
the notorious thermal runaway could have happened.  
ACKNOWLEDGMENT 
The authors would like to thank CIC (Chip Implementation 
Center), Taiwan, for their help in providing the needed 
commercial tools, including Calibre, Hspice and NanoSim 
used in our experiments. We also thank ITRI (Industrial 
Technology Research Institute), Taiwan, for their valuable 
comments and discussion. 
REFERENCES 
[1] Z.-P. Chen, M. Johnson, L.-Q. Wei, and W. Roy, 
"Estimation of Standby Leakage Power in CMOS Circuit 
Considering Accurate Modeling of Transistor Stacks," 
Proc. of Int’l Symp. on Low Power Electronics and 
Design, pp. 239- 244, Aug 1998. 
[2] A.S. Grov, “Changing Vetors of Moore’s Law—Keynote 
Speech,” Int’l Electron Devices Meeting, Dec. 2002. 
[3] A. Gupta, N. Dutt, F. J. Kurdahi, K. S. Khouri, and M. S. 
Abadir, "STEFAL: A System Level Temperature- and 
Floorplan-Aware Leakage Power Estimator for SoCs," 
Proc. of VLSI Design, pp.559-564, Jan. 2007. 
[4] Lei He, Weiping Liao, and  Stan, M.R., "System Level 
Leakage Reduction Considering the Interdependence of 
Temperature and Leakage," Proc. of Design Automation 
Conference, pp. 12- 17, 2004. 
[5] R. Kumar and C.P. Ravikumar, "Leakage Power 
Estimation for Deep Submicron Circuits in an ASIC 
Design Environment," Proc. of Asian and South Pacific 
Design Automation, pp.45-50, 2002. 
[6] W. Liao, F. Li, and L. He, "Microarchitecture Level 
Power and Thermal Simulation Considering Temperature 
Dependent Leakage Model," Proc.of Low Power 
Electronics and Design, pp. 211- 216, Aug. 2003. 
[7] Y.-S. Lin, and D. Sylvester, "Runtime Leakage Power 
Estimation Technique for Combinational Circuits," Proc. 
of Asian and South Pacific Design Automation, 
pp.660-665, Jan. 2007. 
[8] Y.-P. Liu, R.P. Dick, S. Li, and H.-Z. Yang, "Accurate 
Temperature-Dependent Integrated Circuit Leakage 
Power Estimation is Easy," Proc. of Design, Automation, 
and Test in Europe Conference, pp.1-6, April 2007. 
[9] H. Su, F. Liu, A. Devgan, E. Acar, and S. Nassif, "Full 
Chip Leakage-Estimation Considering Power Supply and 
Temperature Variations," Proc. of Low Power Electronics 
and Design, pp. 78- 83, Aug. 2003. 
[10] J. Viraraghavan, B. P. Das, and B. Amrutur, "Voltage and 
Temperature Scalable Standard Cell Leakage Models 
Based on Stacks for Statistical Leakage Characterization," 
Proc. of 21st Int’l Conf. on VLSI Design, pp.667-672, Jan. 
2008. 
[11] Y. Zhang, D. Parikh, K. Sankaranarayanan, K. Skadron, 
and M. Stan, “Hotleakage: A Temperature-Aware Model 
of Subthreshold and Gate Leakage for Architects,” 
Technical Report TR-CS-2003-05, Univ. of Virginia, 
Dept. of Computer Science, Mar. 2003. 
[12] P. Zhou, Y. Ma, Q. Zhou, and X. Hong, "Thermal Effects 
with Leakage Power Considered in 2D/3D 
Floorplanning," Proc. of Computer-Aided Design and 
Computer Graphics, pp.338-343, Oct. 2007. 
[13] Intel Corp. 
http://software.intel.com/en-us/articles/gigascale-integrat
ion-challenges-and-opportunities. 
[14] “Artisan Standard Library SRAM Generator User 
Manual,” Artisan Components, 2004. 
99 年度專題研究計畫研究成果彙整表 
計畫主持人：黃錫瑜 計畫編號：99-2220-E-007-009- 
計畫名稱：三維晶片系統之設計與測試技術研發--子計畫四: 三維晶片系統之測試與時序校正技術研
發(2/2) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 1 1 100%  專利 已獲得件數 0 0 100% 件  
件數 1 1 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 5 5 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 1 100%  
研究報告/技術報告 4 4 100%  
研討會論文 4 4 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 1 1 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
