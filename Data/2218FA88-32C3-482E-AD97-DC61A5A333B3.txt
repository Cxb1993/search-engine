We want to put forward an interesting statistics here 
[11], the research displays 75% program’s drawbacks 
occurring at designing the stage. Moreover, these 
program’s drawbacks will deliver to other development 
stages and cause new bugs. Look at this statistic from the 
standpoint of the software economics; let us be able to 
understand the importance of finding the software’s bug 
and evaluating software’s testability in early stage. 
Everyone knows that the maintenance cost is higher when 
you find the bug later. 
Now, we want to propose the most difficult part of 
object-oriented (OO) testing. It is polymorphism. Most of 
people seem to believe that testing object-oriented software 
is not much difficult from testing procedure-oriented 
software. While many of the general approaches and 
techniques for testing are the same or can be adapted from 
traditional testing approaches and techniques, but our 
experiences and current research papers indicated; in fact, 
they are different and presented a lot of new challenges and 
test obstacles. The polymorphism is a key feature of object-
oriented programming which showed a new technical 
challenge to tester. 
The power of polymorphism brings the expressiveness 
of programming languages. It also brings a lot of new 
anomalies and fault types. We refer to all of these problems 
as a new obstacle in object-oriented test. Unfortunately, the 
techniques that are used to eliminate faults in procedure-
oriented programs are not as applicable to those found in 
object-oriented programs. 
We know the method calls with polymorphism, because 
of the dynamic binding characteristic, the program code of 
the actual execution cannot be predict. It is dynamic 
decided at the run time. We called this polymorphism 
headache is yo-yo path phenomenon [10], and illustrates its 
actual call path with Figure 1. Therefore, it is very difficult 
to observe and track executed path in test processes. 
Besides, tester also hard to understand polymorphic 
behavior meaning for its source code even though has 
documented. Consequently, Tester cannot design adequacy 
test case to expose hidden errors that will result in low 
readability. Although Alexander and Offutt proposed the 
criteria for testing polymorphism [1], we did not think the 
tester can design the test case of the adequacy to expose 
hidden errors. These will lead to low quality of software. 
There were researchers [4] [5] proposed other viewpoint to 
solve the problem of testing OO system. Using the concept 
of testability, the developer can estimate the quality of OO 
program. Finally, the inherent complexity of the 
relationships found in object-oriented program also affects 
testing. There are other potential faults to be discussed in 
the past literatures [7], [2], [8], [10], and [13]; we 
summarized it as follows;  
 
z Measure the interactive complexity between 
components.  
z Measure the data coupling with intra-class and inter-
class.  
z Measure the object dependency between classes. 
 
In other words, from the test perspective, the object-
oriented programming with polymorphism is hard to 
produce an adequacy test case because you do not know 
which type of object will be executed in runtime and you 
cannot analyze the testability of program code in static test 
as well because you do not know which a fragment of code 
will be executed. An object-oriented program with 
polymorphism, from test viewpoint, it is very difficult to 
produce a test procedure no matters when it is on software 
test or measurement of testability. Therefore, that’s why we 
say object-oriented software have potential testing issues. 
 
1.2 Goal of this paper 
 
This paper will present a model for the appearance and 
realization of object-oriented faults in polymorphism and 
discusses specific categories of inheritance and 
polymorphic faults. The model and categories can be used 
to support empirical investigations of object-oriented 
testing techniques, to inspire further research into object-
oriented testing and analysis, and to help improve design 
and development of object-oriented software. Finally, we 
will base on this model, and then we will provide a 
technique to measure polymorphism testability during 
design stage. This research addresses the metrics of 
polymorphism for object-oriented program in design stage. 
 
1.3 Organization of this paper 
 
A    d() Æ g()      h()      i()      j()               l() 
A    d() Æ g()      h()      i() Æ j()               l() 
A 
+d() 
+g() 
+h() 
+i() 
+j() 
+l() 
B 
+h() 
+i() 
+k() 
C 
+i() 
+j() 
+l() 
A d()Æg()Æh()Æi()Æj()             l() 
B h()    i()            k() 
C                                  i()     j()    
B                          h() Æ i()               k()       
C                                     i()      j()              l() 
B                          h()      i()                k()       
C                                    i()      j()               l() 
Figure 1. Calls to d() when object has 
various actual types. 
 
3. Polymorphism measures in class hierarchy 
 
From the polymorphism RATO model, we 
understand and use the concept of the descendent- path as a 
basis for observing all polymorphic behavior on the class 
hierarchy diagram. What is descendant path? We define the 
descendant path as follow: 
Definition: Descendant path(DP). In the class hierarchy, 
a descendant path is the set of classes crossed by a path 
going from the root class to a leaf class. 
We also propose an algorithm here for finding a 
descendant path in class inheritance hierarchy. This 
algorithm uses a strategy of breadth-first searching (BFS) 
strategy to traverse every class in hierarchy from a root 
node to a leaf node. 
 
Algorithm for finding descendant path 
Input：a class hierarchy 
Output：descendant path  
Step 1：build a class inheritance hierarchy data structure 
and initiated each θdp. Such as, 
θdp={node | !∃  node ∈  Root class node} 
Step 2：use BFS algorithm to traverse all root class nodes, 
from root to leaf node, in the process of traverses, 
descendant node will be add into its descendant path (θdp).  
Step 3：Unite every descendant path (θdp) on leaf node 
will get final descendant path set. 
U
nbLeaf
i
dpdp i
1
)(
=
=Θ θ ; suppose that the total number of leaf node is 
nbLeaf. 
Using the notion of descendant path as building block, 
we can decompose class hierarchy and assess its testability 
in design stage. The mathematical formula is given by: 
Definition: The complexity of descendant path with 
respect to inheritance. Let DP be descendant path and h 
be the height of DP, the complexity for DP is： 
( ) ( ) 21−×= hhDPCP  Eq. 1 
Definition: Polymorphic metric for each descendant 
path. Let P is a path involved in the polymorphism. 
A1,…..,AnbAttach are each of polymorphic behavior in 
polymorphism RATO Model. The polymorphic metric for 
each descendant path is given by： 
( ) ∑
=
+=
nbAttach
i
ii APoHMAPoPMPPolyMetric
1
)()(  Eq. 2 
Next, let A is a polymorphism reference attachment to 
object combination. The probability of polymorphic 
method on each polymorphic behavior is given by: 
NOM
NOVMAPoPM =)(   Eq. 3 
Where NOM denotes number of object method and NOVM 
denotes number of overridden method. Moreover, the 
probability of hidden method on each polymorphic 
behavior is given by: 
NOM
NRMNOMAPoHM −=)(  Eq. 4 
Where NOM denotes number of object method and NRM 
denotes number of reference method. 
Definition: Testability of polymorphism in inheritance 
hierarchy. Let IH be an inheritance hierarchy and P1,…, 
PnbDP are the path involved in the polymorphism. The 
testability of polymorphism in IH is given by： 
( ) ∑
= ×=
nbDP
i ii DPCPPPolyMetric
IHToP
1 )()(
1  Eq. 5 
4. Conclusion 
 
Most of people know that the purpose of the software 
test is used to improve software quality [14] [15]. However, 
the method and concepts of the traditional programming 
language test have no longer applied on test of the object-
oriented system. From the research thesis of the object-
oriented system that has announced, we understand that 
testing of the object-oriented system polymorphism is the 
most difficult process, and furthermore its related research 
for announcing was few in last years. Generally speaking, 
it is easy to obtain more testing information during the 
period of dynamic test. On the contrary, polymorphism 
testing broke this rule. The tester has a new challenge in 
polymorphism test that is due to its dynamic binding 
characteristic. Moreover, the polymorphic behavior also 
confuses developer, that is to say, polymorphism is easy to 
hide the fault from testing and hard to produce an 
appropriate test case. Consequently, the polymorphism 
becomes an obstacle in test process and affects the software 
quality in finally. For resolving these problems, in this 
paper we propose another kind of developer’s standpoint, 
through the polymorphism RATO model accurate 
understanding polymorphic behavior, moving the testability 
estimated of test stage to design stage. Thus, the developer 
can evaluate system testability on design stage. 
Furthermore, developer can use this information thinking 
whether the developer redesign the system or improves 
software testability by program skill during implementation. 
We believe that there are no other ways to fully cover the 
test of polymorphism in dynamic testing or static testing. 
We also believe that our research point out a new direction 
of testing polymorphism. 
We think main contribution of this paper is to provide 
alternative tester perspective to developer and can let 
developer to estimate the polymorphic behavior in class 
inheritance hierarchy that may cause of test obstacle at 
design phase. At the same time, this is first literature to 
propose the polymorphism RATO model to modeled 
polymorphic behavior, and use it as basis of analytical unit 
to decompose inheritance class hierarchy. Besides, we 
overcame the interdiction of lack of testing information 
during design stage in the past. The metrics of ToP (IH), 
generated by the polymorphism RATO model, can reveal 
defect that hide at design stage in class hierarchy, it can 
provide most early information to developer to modify or 
redesign the system or find another way to fix these defects. 
Nevertheless, notion of descendant path is a unique 
technique to be used to analyze object interaction in object-
