each search, the fuzzy search engine recorded the 
difference between the ordering of search results and 
the user＇s behavior on clicking web pages. The 
feedbacks were gathered and analyzed for adjusting 
the fuzzy search engine to improve the performance. 
Finally, the cloud computing mechanism is adopted to 
deal with the huge amount of web pages. We use 
MapReduce to partition data and parallelize the 
execution of computation, and the execution time of 
the fuzzy search can be improved to a more reasonable 
response time. 
英文關鍵詞： Fuzzy Search Engine, Ontology, Self-Adaptation, 
Genetic Algorithm 
 
  
                           Lien-Fu Lai: Fuzzgle: A Self-Adaptive Fuzzy Search Engine 
 
348 
automatically search web pages that contain 
synonyms or terms similar to a keyword. Secondly, 
a web crawler was developed to gather and classify 
web pages. The characteristic information of web 
pages was recorded and all web pages were stored 
based on their domains. A data clustering approach 
was proposed to classify web pages into some 
domains automatically. Thirdly, users could select 
an appropriate domain and enter multiple keywords 
with different degrees of importance based on their 
needs. Web pages in the inappropriate domains 
could be excluded since all web pages were 
classified by domains. The fuzzy weighted average 
[3] was utilized to aggregate all fuzzy factors based 
on their degrees of importance and degrees of 
satisfaction. Through the mutual compensation of 
all fuzzy factors, the ordering of search results 
could be obtained. Finally, for each search, the 
Fuzzgle system recorded the difference between the 
ordering of search results and the user’s behavior 
on clicking web pages. The feedbacks were 
gathered and analyzed to adjust the fuzzy 
similarities among terms in the fuzzy ontology, the 
domain classification of web pages, and the 
importance degrees of fuzzy factors. The ordering 
of search results could thus be improved gradually 
by continuous learning and adaptation. 
 
Figure 1: An overview of the Fuzzgle search engine 
An overview of the Fuzzgle search engine is 
shown in Figure 1. The Web Crawler is developed 
to gather and classify web pages. Web pages are 
classified and stored based on their domains. The 
characteristic information of web pages is recorded 
in the Web Document. The Ontology Manager 
constructs and maintains a Fuzzy Ontology. A data 
mining approach is applied to the Web Document 
for calculating the fuzzy similarity between terms 
in the Fuzzy Ontology. The User Interface enables 
users to select an appropriate domain and to input 
multiple keywords with different degrees of 
importance based on their needs. The Fuzzy Search 
Mechanism would exclude web pages in the 
inappropriate domains to reduce the search space 
and to improve the search results. The keywords 
are expanded by the Fuzzy Ontology to find out 
synonyms and terms similar to the original ones. 
The search results are ordered according to several 
fuzzy factors including the satisfaction degrees of 
keywords, the importance degrees of keywords, the 
relevance of domains, the page ranks [22], the page 
in-links [21],  the titles, and the last modified dates. 
2  Constructing the Fuzzy Ontology  
Domain dependency is an important character 
of knowledge: the meaning of a term may be 
different in different domains [2,10]. We construct 
a two-layered fuzzy ontology to organize terms that 
are elicited from WordNet [25]. WordNet is a large 
lexical database of English, built by Princeton 
University. Nouns, verbs, adjectives and adverbs 
are grouped into sets of cognitive synonyms, each 
expressing a distinct concept. In the two-layered 
fuzzy ontology, the first layer forms a domain 
hierarchy (see Figure 2). We adopt the Suggested 
Upper Merged Ontology (SUMO) [13,24] to 
classify domains. SUMO is owned by the IEEE and 
defines a group of domain ontologies which have 
been mapped to the WordNet domains. In our 
approach, the domain hierarchy is treated as gen-
spec relationships. The upper level in the domain 
hierarchy maintains terms in a more general 
domain, while the lower level maintains terms in a 
more specific domain. Each domain contains a term 
lattice in the second layer (see Figure 3). A sub-
domain can inherit the term lattice from its super-
domain, add new terms specific to the sub-domain 
itself, and override (i.e., redefine) fuzzy similarity 
between terms in the super-domain. 
 
Figure 2: The domain hierarchy in two-layered fuzzy ontology 
  
                           Lien-Fu Lai: Fuzzgle: A Self-Adaptive Fuzzy Search Engine 
 
350 
of keywords. One vector does not belong to only 
one cluster but to several clusters with different 
degrees. By comparing to the terms within domains 
in the Fuzzy Ontology, the keywords in the center 
of a cluster are useful to determine what domain the 
cluster belongs to. 
Keywords in web pages are regarded as the 
characteristic values and each web page is 
translated into a vector of keywords in the web 
page [14]. Assume that all web pages in the Web 
Document are gathered into k clusters. The Euler 
distance between two web pages xi and xj would be 
 
2
1
2
1
),(








 

k
d
jdidji xxxxdist
.            (3) 
The center of a cluster will be changed after 
iterations. In each iteration, we calculate the total 
deviation for changing the center of the cluster. In 
the case of k clusters, the total deviation E can be 
obtained by 
2
1 i
k
i
i x S
E x C
 
  , where Ci is the center 
of cluster Si and x is one web page in cluster Si. If 
the total deviation for the m+1’s iteration is smaller 
than the m’s, the center of the cluster would be 
changed into m+1’s iteration -- otherwise the center 
would remain unchanged (see Figure 6). 
 
Figure 6: Changing of the FCM center of the clustering 
Since the centers of clusters will be changed 
again and again, we use an objective function J to 
check if the result of clustering is stable as the 
following equation: 
 
2
1 1 1
k k n
m
i ji j i
i i j
J J w x C
  
    , (4)
 
where wji is the degree of web page xj belonging to 
cluster Si with 
2
1
1
1/
m
k
j i
ji
s j s
X C
w
X C


 
 
 
 
 , 


k
i
jiw
1
1 , 
m
jiw forms a weighting matrix, and Ci is the center 
of cluster Si with 
1 1
 / 
n n
m m
i ji j ji
j j
C w x w
 
  . If the value 
of the objective function J is stable, the result of 
clustering is stable. 
Finally, the characteristic values set of the 
cluster center is captured to compare with terms of 
domains. We applied N-Gram [23] to find out the 
degree of match between a cluster and a domain. 
Assume that CK is the keywords set extracted from 
cluster K and CD is the keywords set of domain D. 
The degree of match between cluster K and domain 
D is 
  

 K
K
DK
DK C
C
CC
CCSim ,),( .         (5) 
A web page may belong to several domains. 
While the degree of match between a cluster and a 
domain is above the threshold, we assign all web 
pages in the cluster into the domain. The domain 
classification mechanism can reduce the search 
space and improve the search results. 
4  The Fuzzy Search Mechanism  
The User Interface of the fuzzy search engine 
enables users to select an appropriate domain and to 
input multiple keywords with different degrees of 
importance based on their needs (see Figure 7). On 
one hand, web pages in the inappropriate domains 
can be excluded to reduce the search space and to 
improve the search results because all web pages 
are already classified by domains. On the other 
hand, a better search result can be obtained by 
differentiating between keywords according to the 
degrees of importance. We use linguistic degrees of 
importance [12] (i.e. don’t care, unimportant, rather 
unimportant, moderately important, rather 
important, very important, and most important) to 
make it easier for users to grade relative importance. 
Each linguistic degree of importance can be 
mapped to a triangular fuzzy number as shown in 
Figure 8. 
 
Figure 7: The user interface of the Fuzzgle search engine 
)(~ x
A

x
1
unimportant
rather
unimportant moderately
important
rather
important
very
important
0
0                   0.25                0.5                 0.75                  1  
Figure 8: Membership functions for degrees of importance 
  
                           Lien-Fu Lai: Fuzzgle: A Self-Adaptive Fuzzy Search Engine 
 
352 
respectively. The expanded keyword density of 
“expert systems” would be 1.5%+1.2% × 0.786 
=2.4432%, and the degree of satisfaction between 
‘expert systems’ and P would be 1. The expanded 
keyword density of ‘soft computing’ would be 
0%+2.1% × 0.623=1.3083%, and the degree of 
satisfaction between ‘soft computing’ and P would 
be   76.0
02
3083.12
213083.1
2








S  . FWA is applied to 
calculate P’s totally satisfactory degree of 
keywords as: 
.8508.0
3536.1
1517.1
)75.1,5.1,1(
)51.1,26.1,82.0(
)1,1,75.0()75.0,5.0,25.0(
76.0)1,1,75.0(0.1)75.0,5.0,25.0(




y  
Applying the mathematical operations on fuzzy 
numbers [6,19], we get two fuzzy numbers (0.82, 
1.26, 1.51) and (1, 1.5, 1.75). The center of gravity 
is adopted to defuzzify a fuzzy number [16], which 
is achieved by mathematical integral. Therefore, 
P’s totally satisfactory degree for those two 
keywords is 0.8508 . 
 
Figure 11: The ordering of search results 
The search results are ordered according to 
several fuzzy factors including the totally 
satisfactory degrees of keywords, the page ranks, 
the page in-links, the titles, and the last modified 
dates. Through the mutual compensation of all 
fuzzy factors, an ordering of search results which is 
considered in every respect can be generated. The 
fuzzy weighted average [3,11] is utilized to 
aggregate all fuzzy factors based on their degrees of 
importance and degrees of satisfaction. The users 
can manually select appropriate fuzzy factors with 
different importance degrees to meet their specific 
requirements -- otherwise the importance degrees 
of fuzzy factors would be the default values. Figure 
11 shows the ordering of search results where the 
grade is generated by aggregating all fuzzy factors. 
5  The Self-Adaptation Mechanism  
The suitability of the ordering of search results 
is essential to evaluating a search engine. The 
ordering of search results in Fuzzgle is influenced 
by the fuzzy similarities between terms, the domain 
classification of web pages, and the importance 
degrees of fuzzy factors. The original setting is not 
optimal, and therefore it needs continuous learning 
and adaptation to fit users’ expectations gradually. 
5.1 The Self-Adaptation for the Importance 
Degrees of Fuzzy Factors 
The satisfaction degrees of keywords, the 
density of keywords, the importance degrees of 
keywords, the relevance of domains, the page ranks 
of web pages, the titles, and the last-modified dates 
are considered to calculate the ordering of search 
results in Fuzzgle. The fuzzy weighted average is 
utilized to aggregate all fuzzy factors, and the 
importance degrees of these fuzzy factors may 
influence the ordering of search results. Hence, we 
record the difference between the ordering of 
search results and user’s real behavior on clicking 
web pages for each search. The feedbacks are 
gathered and analyzed to adjust the importance 
degrees of fuzzy factors. The ordering of search 
results can thus be improved gradually by 
continuous learning and adaptation. 
 
Figure 12: The self-adaptation of the importance degrees of 
fuzzy factors 
We adopt the notions of genetic algorithms [7,8] 
to continuously adjust the fuzzy weights (i.e. the 
degree of importance) of factors. As shown in 
Figure 12, each individual uses a particular set of 
fuzzy weights to aggregate all fuzzy factors and 
thus obtains a particular ordering of search results. 
The ordering of search results would be different 
from one individual to another. While users execute 
  
                           Lien-Fu Lai: Fuzzgle: A Self-Adaptive Fuzzy Search Engine 
 
354 
The Fuzzgle system records the links among the 
web pages clicked by users and the keywords input 
by users. After a fixed period of time, the system 
would gather all users’ feedbacks to sum up the 
links between keywords and web pages. The 
execution flow of the self-adaptation in the fuzzy 
ontology is shown in Figure 15. While the number 
of links attaching to keyword K is greater than a 
threshold, all web pages linking to K would be 
analyzed. If term T in the fuzzy ontology appears 
frequently in these web pages (i.e. the frequency is 
greater than a threshold Tupper), the similarity 
between K and T would be strengthened. On the 
other hand, the similarity between K and T would 
be weakened when the frequency is smaller than a 
threshold Tlower. We utilize a Z function to 
strengthen similarities and an S function to weaken 
similarities (see Figure 16). In the case of using the 
Z function, the larger the similarity between K and 
T is, the smaller the increase of the similarity is. In 
the case of using the S function, the smaller the 
similarity between K and T is, the smaller the 
decrease of the similarity is. The variation range of 
strengthening and weakening similarities can thus 
be restricted. 
       
Figure 16: The Z and S functions to adjust fuzzy similarities 
If keyword K is not recorded as a term in the 
fuzzy ontology, the Fuzzgle system would create a 
new term K in the fuzzy ontology. We apply the 
Normalized Google Distance [5] to find out terms 
similar to K. The semantic distance between terms 
K and T in the fuzzy ontology can be defined as: 
 
 AD
TKDA
TKG
minlog
,logmax
),(


 , (13) 
where A={log |D|K| , log |D|T|}, |D| is the number 
of web pages retrieved, |D|K| is the number of web 
pages that contain K, and |D|K,T| is the number of 
the web pages that contain both K and T. 
The larger the semantic distance between K and 
T is, the smaller the similarity between K and T is. 
We adopt the Google-Based Semantic Relatedness 
[9] to obtain the similarity between K and T as 
below: 
),(2),( TKGeTKSimilarity  ,            (14) 
where 0<Similarity(K,T)<1. 
5.3 The self-adaptation for the domain 
classification of web pages 
The meaning of a term may be different in 
different domains. A large amount of web pages in 
the inappropriate domains may be retrieved by the 
same keyword. Our web crawler would classify 
web pages by determining their domains. Users can 
select an appropriate domain to search web pages, 
which excludes web pages in the inappropriate 
domains to reduce the search space and to improve 
the search results. The domain classification of web 
pages was executed automatically by data mining 
on web pages. The original setting is not optimal, 
and therefore it needs continuous learning and 
adaptation to fit users’ expectations gradually. The 
domain of a web page can be adjusted to a more 
suitable domain based on the analysis of users’ 
behavior. 
 
Figure 17: An example of domain classification on web pages 
In the example of Figure 17, when a user 
selected domain H to search web pages, the 
ancestors {A,E} and the descendants {K,L,O} would 
be searched as well. A domain inherits more 
general web pages from its super-domains and 
contains more specific web pages in its sub-
domains. Assuming that the user failed to find the 
proper web pages from the domain H, the domain 
may be changed to another domain E (the Fuzzgle 
system offers an Upper-Level-Domain button to 
search on a more general domain). The search on 
the domain E covers more domains including {E, A, 
H, K, L, O, I, M, N}. If the user clicked web page X 
in domain N, it means that web page X should be 
retrieved from domain H in user’s original 
expectation. Hence, the possibility of X belonging 
to H would slightly increase. When the possibility 
of X belonging to H is greater than a threshold, web 
page X is adapted to domain H. 
  
                           Lien-Fu Lai: Fuzzgle: A Self-Adaptive Fuzzy Search Engine 
 
356 
[21] Page Inlink Analysis, http://ericmiraglia.com/inlink/ 
[22] Page Rank Check, http://www.prchecker.info/check_ 
page_rank.php 
[23] Stochastic Language Models (N-Gram) Specification, 
http://www.w3.Org/tr/ngram-spec/ 
[24] Suggested Upper Merged Ontology (SUMO), 
http://www.ontologyportal.org/ 
[25] WordNet, http://wordnet.princeton.edu/ 
 
Lien-Fu Lai received his PhD 
in 1999 and MS in 1995, both in 
computer science from National 
Central University in Taiwan. 
He is currently an associate 
professor in the Department of 
Computer Science and 
Information Engineering at 
National Changhua University 
of Education in Taiwan. His 
research interests include fuzzy logic, knowledge 
engineering, web services, and search engines.  
 
 
 2
的論文發表，筆者之論文排在下午 14:00~15:20 的 Web-Based Applications Session 中
發表，每人有 20 分鐘的簡報與詢答時間，本論文研究主要是提出一個模糊查詢機制
以更適用於人力資源網站的查詢，並使用服務導向架構讓多個不同的人力資源網
站，可以成為服務提供者來同時提供網路服務。晚宴於晚間 6:30 在 Super Dry 
renaissance 舉行，並舉行論文獎的頒獎和報告。8/10 早上分兩個時段總共進行六場
Session 的論文發表，下午再進行兩場 Session 的論文發表後，於下午 3:40 進行閉幕
典禮，結束了本次第十三屆 ACIS SNPD 2012 國際研討會。大家相約明年的第十四屆
ACIS SNPD 2013 國際研討會在夏威夷的火奴魯魯再見。 
二、與會心得 
本次大會共錄取二十幾個國家投稿的 165 篇論文，綜觀所接受發表的論文，主
要的發展領域是在於 AI in Software Engineering、Data Mining and Machine Learning、
Intelligent Software、 Internet Technology、Web-Based Applications、 Parallel and 
Distributed Computing、Intelligent Agents 等方面。將人工智慧和網際網路技術引入軟
體工程和資料探勘等系統和應用是本次研討會很重要的主軸。 
三、發表論文全文或摘要 
Abstract—Most of human resource websites apply SQL queries to find jobs or 
candidates, and users must state definite conditions to conduct database queries. In this 
paper, we apply the fuzzy logic theory and the service-oriented architecture to develop 
human resource web services. First, a storing mechanism is proposed to store fuzzy data 
into conventional database management systems without modifying DBMS models. 
Second, a fuzzy query language is proposed for users to make fuzzy queries on fuzzy 
databases. Third, each fuzzy condition associates with a fuzzy importance to differentiate 
between fuzzy conditions according to their degrees of importance. Fourth, the fuzzy 
weighted average is utilized to aggregate all fuzzy conditions based on their degrees of 
importance and degrees of matching. Finally, a service-oriented architecture is proposed to 
make fuzzy queries on several human resource websites simultaneously and to integrate 
the query results. 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/11/07
國科會補助計畫
計畫名稱: 以模糊邏輯及雲端計算技術開發模糊搜尋引擎
計畫主持人: 賴聯福
計畫編號: 100-2221-E-018-029- 學門領域: 程式語言與軟體工程
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
