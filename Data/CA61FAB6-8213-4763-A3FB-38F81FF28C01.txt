2 
 
reversible circuit synthesis. Our algorithm provides 
a systematic method to simplify the reversible 
circuit. This can produce the resulting expression in 
exclusive-sum form and transform it into a final 
reversible circuit with lower quantum cost. 
Moreover, we can realize permutations to be 
reversible circuits with lower quantum cost and 
without unnecessary garbage bits. We can also 
convert irreversible circuits by adding qubits to 
make the circuits reversible. The experimental 
results show that the average saving in quantum cost 
is 15.82% compared with previous approaches. 
關鍵詞：reversible circuits; circuit optimization; 
logic synthesis; quantum computing; tabulation 
method; divide and conquer 
一、前言 
Over the last few years, energy consumption 
has been an important subject of study for advanced 
circuit design. As the CMOS process technology 
continues to progress, circuit speed becomes much 
faster while energy consumption problem is 
becoming more and more serious. This problem in 
portable devices is even more critical than others. 
Landauer proved that traditional binary irreversible 
gates will result in power dissipation disregard of 
implementation technologies. Bennett  showed that 
for a binary circuit built from reversible gates no 
power will be consumed due to information loss. It 
is tempting to consider that reversible circuits may 
be useful for the power dissipation problem. 
Moreover, quantum computing is one of the 
important applications of reversible circuits. Several 
quantum algorithms which solve traditional 
problems much faster have been proposed. Thus, 
quantum computing becomes one of the most 
rapidly expanding research fields. In fact, quantum 
boolean circuits must be reversible, so quantum 
boolean circuits is a kind of reversible circuits. A 
considerable number of studies have been made on 
developing algorithm for synthesis of reversible 
circuits. 
A reversible circuit that produces a unique 
output vector for each input vector has the same 
number of inputs and outputs. To build a reversible 
circuit, we need a set of reversible gates as a 
universal gate set to synthesize the circuit. But 
traditional gates such as AND, OR, and 
exclusive-OR are not reversible. Only the NOT gate 
is a reversible gate. Therefore, a set of reversible 
gates different from traditional gates need to be 
defined. In fact, several reversible gates, including 
the controlled NOT gate (called the CN gate) and the 
Toffoli gate, have been proposed. Therefore, a set of 
reversible gates including NOT, CN, and Toffoli 
gates are used to synthesize the reversible circuits. 
二、研究目的 
1. 提出改善目前已發表可逆電路合成演算法的
效能之方法。 
2. 修改傳統的表格方法，使之可應用在可逆電路
合成。 
三、文獻探討 
A considerable number of studies have been 
made on developing synthesis algorithms for the 
quantum boolean circuits, but the results are not 
satisfactory compared with the optimal solution. 
There is much room for improving the performance 
of these synthesis algorithms. In fact, these 
algorithms can still be reused in the synthesis 
process to obtain much better results without 
proposing a new synthesis algorithm or modifying 
the existing synthesis algorithms. Reusing the 
existing algorithms can achieve the same goal. As 
far as we know, this is the first study on improving 
the performance of existing synthesis algorithms for 
generating more simplified quantum boolean 
circuits. 
Moreover, the tabulation method is an efficient 
method for minimizing the conventional logic circuit. 
However, there are some problems to apply the 
tabulation method for reversible circuits as described 
below. First, the output is not at the default qubit in 
4 
 
Cs and Cc. Then, we can easily find the truth table of 
subcircuit Cc according to pattern Y. 
The purpose of our method is to improve the 
performance of existing synthesis algorithms. After 
the bipartition of a quantum boolean circuit, 
subcircuit Cs inputs all possible combinations of j 
gates excluding those with the same function 
specification. Finding the truth table of subcircuit Cc 
makes it possible to synthesize a better result. Next, 
subcircuit Cc can be synthesized with the existing 
algorithm to get a subcircuit. Combine the two 
subcircuits Cs and Cc to become a possible result and 
repeat the method until the possible inputs of 
subcircuit Cs are empty. Then choose the quantum 
boolean circuit with the smallest gate count from the 
set of possible results as the final circuit. After the 
circuit bipartition, subcircuit Cc may become smaller 
if subcircuit Cs inputs a proper combination of j 
gates. Since we do not know which one is the proper 
combination, subcircuit Cs needs to input all 
possible combinations of j gates for finding the 
proper combination. 
2. Modified Tabulation Method 
Another our achievement is to modify 
tabulation method to synthesis a reversible circuit. 
The detail procedure is as shown below. 
A. Generating the Expression for a Single Output 
The goal of this subsection is to find a set of 
essential terms for a single output. Each essential 
term can produce a corresponding product term at 
every pass until no 1's are left. Then we can obtain a 
resulting expression by connecting these product 
terms with exclusive-OR operations. Now the 
resulting expression is in exclusive-sum-of-products 
form. Assuming that the truth table has n variables, 
there are 2n-1 1's in the output f, and output f should 
be located at the qubit x. Now we will present the 
procedure to generate the expression of a single 
output f as follows: 
1). Exchange 1's with 0's, where x=1 or x=0, in the 
output f of the truth table to locate output f at the 
qubit x. 
2). If there are 1's in the truth table, group the list of 
the minterms for output f from the new truth 
table. 
3). Find an essential term. 
4). Replace 0's with 1's and 1's with 0's. 
5). Repeat Steps 2-4 until there are no 1's left. 
6). Find a minimum set of essential terms. If there is 
more than one such set, choose a set with the 
lowest quantum cost. 
7). Transform the set of essential terms into a 
corresponding expression and build a reversible 
circuit from the expression. 
For example, let f(a,b,c)=∑m(0,2,4,5). First we 
exchange 1's with 0's, where a=1, in the output f of 
the truth table and get the expression  
since output f should be located at the qubit a as 
shown in Fig. 2(a). There are still four 1's in the 
truth table and group the list of the minterms. 
Combine minterms into an essential term --0 and get 
a partial expression  as shown in Fig. 2(b). Then 
replace 0's with 1's and 1's with 0's in the term of the 
truth table. Now, there are only two 1's in the truth 
table. We can directly get two essential terms  
and abc since these two 1's differ in two variables. 
The resulting expression is 
. 
 and abc can be further transformed into 
 and . This transformation is 
described in subsection B. For completing the circuit, 
add the proper parentheses into the expression 
 as described in subsection C. 
Finally, we can build the reversible circuit from the 
expression as shown in Fig. 3. 
'faf 
c
cba
abccbacagggafaf  321'
cba
)( cba  YXYX 
)))((( cbacaf 
6 
 
operations. 
五、結果與討論 
Now, we will show the experimental results of 
the first achievement as below. The synthesis of the 
benchmarks was performed on a 1.73 GHz Intel 
Pentium M processor with 256MB RAM. The 
simulation results are described below in detail. 
Table I presents the experimental results of all the 
3-variable functions using the existing algorithm, 
our method, and the exhaustive algorithm. The #gate 
column in the table shows the gate count in a circuit. 
Each row shows the number of circuits that requires 
the same corresponding number of gates to 
synthesize. The Initial column presents the synthesis 
results only using the existing algorithm, where 
there are totally 40,320 different functions of 
3-variable quantum boolean circuits.  
The Forward columns show the synthesis 
results using the Forward procedure of our method. 
The circuit synthesis, where subcircuit Cs located at 
the front side has 1, 2, or 3 gates, is called procedure 
F1, F2, or F3, respectively. The experimental results 
of procedure F1 show that the improvement 
percentage is 77.12% compared with the Initial data. 
It is clear that our method can significantly improve 
the performance of the existing algorithm even when 
subcircuit Cs only has 1 gate. Similarly, the 
experimental results of procedures F2 and F3 show 
that the improvement percentages are 96.21% and 
99.84%, respectively and the time consumptions are 
still reasonable.  
The Backward columns of the table show the 
synthesis results using the Backward procedure of 
our method. The circuit synthesis, where subcircuit 
Cs located at the rear side has 1, 2, or 3 gates, is 
called procedure B1, B2, or B3, respectively. We 
observe that the improvement of the synthesis 
performance using the Backward procedures is 
better than the Forward procedures. In particular, we 
can obtain the optimal results of all the 3-variable 
functions by using our method as shown in the B3 
column of the table. 
TABLE I.  EXPERIMENTAL RESULTS OF ALL THE 3-VARIABLE 
FUNCTIONS. 
 
Then, we will show the experimental results of 
another achievement as below. To compare our 
results with other synthesis methods, we performed 
a set of simulations to evaluate the performance of 
our algorithm. Table II shows the specifications of 
benchmarks and detail simulation results by using 
our algorithm. The Name and Size columns in Table 
II contain the name and the number of qubits of 
benchmarks, respectively. The Others column in the 
Garbage columns of the table shows the minimum 
number of garbage bits generated by other methods, 
and the Ours column in the Garbage columns 
contains the minimum number of garbage bits by 
using our algorithm. The Others and Ours columns 
in the Quantum Cost column are the minimum 
quantum cost by using other methods and our 
algorithm, respectively. Then we list the percentage 
saving in quantum cost to compare our results with 
other methods. 
We find that our results in the number of 
garbage bits are equal to or lower than those for all 
other synthesis methods. This means that the number 
of garbage bits is not increased by our algorithm. We 
also find that our results in quantum cost are equal to 
or much lower than most other synthesis methods 
except three cases. We find that one of these three 
cases make quantum cost lower by increasing the 
number of garbage bits. The average quantum cost 
saving in the table is 15.82%. 
 Forward Backward #gate Initial
F1 F2 F3 B1 B2 B3 
Optimal 
Result
10 2 0 0 0 0 0 0 0 
9 26 0 0 0 0 0 0 0 
8 1868 787 623 583 745 595 577 577 
7 11278 10689 10327 10247 10675 10352 10253 10253
6 15313 16547 16929 17049 16615 16932 17049 17049
5 8385 8777 8921 8921 8765 8921 8921 8921 
4 2708 2780 2780 2780 2780 2780 2780 2780 
3 625 625 625 625 625 625 625 625 
2 102 102 102 102 102 102 102 102 
1 12 12 12 12 12 12 12 12 
0 1 1 1 1 1 1 1 1 
Average gate 
count 
5.97396 5.8903 5.86962 5.86565 5.88817 5.86885 5.8655 5.8655
Time 0:0:47 0:9:52 1:42:04 13:19:18 0:10:46 1:42:27 13:03:30 N/A 
Improvement 
Percentage 
0% 77.12% 96.21% 99.84% 79.12% 96.92% 100% N/A 
978‐1‐61284‐774‐0/11/$26.00 ©2011 IEEE 
2397 
An Efficient Method for Improving the Performance 
of Quantum Boolean Circuit Synthesis Algorithms
 
SHIOU-AN WANG  
Dept. of Computer Science and Information Engineering 
Delin Institute of Technology 
New Taipei City, Taiwan 
d90921009@ntu.edu.tw 
CHIN-YUNG LU 
Dept. of Electronic Engineering 
Delin Institute of Technology 
New Taipei City, Taiwan 
d90943007@ntu.edu.tw 
 
 
 
Abstract—So far there are no synthesis algorithms that can find 
all the optimal quantum boolean circuits except an exhaustive 
algorithm. In this paper, we propose a method based on the 
divide and conquer approach which can significantly improve the 
performance of the existing synthesis algorithms to synthesize 
quantum boolean circuits. A quantum boolean circuit is first 
divided into two subcircuits. The subcircuit with fewer gates will 
input all possible combinations of m gates excluding those with 
the same function specification. The other subcircuit can be 
synthesized by using the existing algorithm. The two subcircuits 
are combined and then we can choose the most simplified 
quantum boolean circuit. According to the experimental results 
of all the 3-variable functions, we can see that the performance of 
the existing algorithms can be significantly improved by using 
our method. Therefore the synthesized quantum boolean circuits 
are much more simplified than previous results. 
Keywords- quantum boolean circuit; circuit optimization; logic 
synthesis; quantum computing; divide and conquer 
I.  INTRODUCTION 
Over the last few years, energy consumption has been an 
important subject of study for advanced circuit design. As the 
CMOS process technology continues to progress, circuit speed 
becomes much faster while energy consumption problem is 
becoming more and more serious. This problem in portable 
devices is even more critical than others. Landauer [1] proved 
that traditional binary irreversible gates will result in power 
dissipation disregard of implementation technologies. Bennett 
[2] showed that for a binary circuit built from reversible gates 
no power will be consumed due to information loss. It is 
tempting to consider that reversible circuits may be useful for 
the power dissipation problem. Moreover, quantum computing 
[3] is one of the important applications of reversible circuits. 
Several quantum algorithms which solve traditional problems 
much faster have been proposed [4,5]. Thus, quantum 
computing becomes one of the most rapidly expanding 
research fields. In fact, quantum boolean circuits must be 
reversible, so quantum boolean circuits is a kind of reversible 
circuits. 
 
 
A reversible circuit that produces a unique output pattern 
for each input pattern has the same number of inputs and 
outputs. If a circuit is reversible, it can reduce the energy 
consumption caused by information loss. To build a quantum 
boolean circuit, we need a set of quantum gates as a universal 
gate set to synthesize the circuit. But traditional gates such as 
AND, OR, and exclusive-OR are not reversible. Only the NOT 
gate is a reversible gate. Therefore, a set of quantum gates 
different from traditional gates need to be defined. In fact, 
several quantum gates, including the controlled NOT gate 
(called the CN gate) and the Toffoli gate [6], have been 
proposed. Hence, the set of quantum gates including NOT, CN, 
and Toffoli gates can be used to synthesize a quantum boolean 
circuit. 
A considerable number of studies [7-12] have been made 
on developing synthesis algorithms for the quantum boolean 
circuits, but the results are not satisfactory compared with the 
optimal solution. There is much room for improving the 
performance of these synthesis algorithms. In fact, these 
algorithms can still be reused in the synthesis process to obtain 
much better results without proposing a new synthesis 
algorithm or modifying the existing synthesis algorithms. 
Reusing the existing algorithms can achieve the same goal. As 
far as we know, this is the first study on improving the 
performance of existing synthesis algorithms for generating 
more simplified quantum boolean circuits. 
II. NOTATIONS AND PRELIMINARIES 
A. Basic Definitions 
Definition 1: A circuit is reversible if the number of outputs is 
equal to the number of inputs and each input pattern maps to a 
unique output pattern. □ 
A literal is a variable or its complement, and a minterm of n 
variables is a product of n literals in which each variable 
appears exactly once in either true or complemented form, but 
not both. For example, the term cab  is a minterm of 3 
variables. Clearly, a quantum boolean circuit which performs 
permutations of input patterns is a reversible circuit because it 
has the same number of input and output variables and each 
mapping to an output pattern from an input pattern is unique.  
This research was supported by the National Science 
Council under Grant NSC 99-2221-E-237-006-. 
978‐1‐61284‐774‐0/11/$26.00 ©2011 IEEE 
2399 
 
Figure 2.  Circuit bipartition into two subcircuits. 
B. Circuit Bipartition 
Definition 3: A quantum boolean circuit C is partitioned into 
two subcircuits Cs and Cc. Subcircuits Cs and Cc have m and p 
gates, respectively. □ 
In order to simplify the classical circuit design, a circuit is 
divided into subcircuits and the subcircuits are synthesized 
separately. Our method partitions a quantum boolean circuit 
into two subcircuits Cs and Cc as shown in Fig. 2. Since the 
function specifications of the two subcircuits are not known 
after partition, we can not synthesize the two subcircuits 
separately. The circuit bipartition here is different from the 
classical circuit design. The possible solution is that one of the 
two subcircuits becomes known. Thus, we define that 
subcircuit Cs inputs all possible combinations of j gates 
excluding those with the same function specification, where 
j=1,2,...,m. The size of m depends on the tolerance of time 
consumption and the requirement of improvement performance. 
Subcircuit Cc is synthesized by using the existing algorithm 
once at each change of subcircuit Cs.  
If a quantum boolean circuit is divided into more than 2 
subcircuits, it is no helpful to simplify the synthesis problem 
further. Note that a circuit must require its truth table or 
function specification to synthesize. Since we do not know the 
detail specification of each subcircuit after partitioning, it is 
much more difficult to find the truth table of each subcircuit 
when the number of the subcircuits is more than 2. Thus, to 
divide a quantum boolean circuit into too many subcircuits is 
not a suitable way. In order to limit the synthesis difficulty by 
partition, we define that a quantum boolean circuit is only 
divided into 2 subcircuits. 
The size of subcircuit Cs is another problem to affect the 
performance of using our method. If the size of subcircuit Cs is 
too large, it will waste too much time to synthesize the final 
result. This is due to that the time consumption varies 
exponentially as the size of subcircuit Cs. Thus, the size of 
subcircuit Cs should be as small as possible. Actually, we limit 
the size of subcircuit Cs in the light of the tradeoff between 
time consumption and synthesis performance.  
A quantum boolean circuit is partitioned into two 
subcircuits. The relative position of two subcircuits slightly 
affects the performance of using our method. In fact, there are 
two kinds of operations in our method. If subcircuit Cs is 
located at the front side of the circuit as shown in Fig. 2, it is 
called the Forward procedure. Similarly, if subcircuit Cs is 
located at the rear side of the circuit, it is called the Backward 
procedure. The steps of procedures Forward and Backward are 
almost the same except finding the intermediate patterns. 
C. Finding Truth Table 
In order to synthesize a quantum boolean circuit, it is 
necessary to find the truth table of the circuit. Since the gates in 
subcircuit Cs are defined beforehand as discussed in the 
previous subsection, we only need to find the truth table of 
subcircuit Cc. However, for finding the truth table of subcircuit 
Cc, pattern Y should be calculated first, where pattern Y is a set 
of intermediate patterns between subcircuits Cs and Cc. Then, 
we can easily find the truth table of subcircuit Cc according to 
pattern Y. 
D. Performing an Existing Algorithm 
The purpose of our method is to improve the performance 
of existing synthesis algorithms. After the bipartition of a 
quantum boolean circuit, subcircuit Cs inputs all possible 
combinations of j gates excluding those with the same function 
specification. Finding the truth table of subcircuit Cc makes it 
possible to synthesize a better result. Next, subcircuit Cc can be 
synthesized with the existing algorithm to get a subcircuit. 
Combine the two subcircuits Cs and Cc to become a possible 
result and repeat the method until the possible inputs of 
subcircuit Cs are empty. Then choose the quantum boolean 
circuit with the smallest gate count from the set of possible 
results as the final circuit. After the circuit bipartition, 
subcircuit Cc may become smaller if subcircuit Cs inputs a 
proper combination of j gates. Since we do not know which 
one is the proper combination, subcircuit Cs needs to input all 
possible combinations of j gates for finding the proper 
combination.  
E. Example 
Now we give an example to explain our method how to 
improve the performance of existing synthesis algorithms. 
Assume that the truth table of a quantum boolean circuit is 
shown in Table I. The initial result only using the existing 
algorithm [10] is as shown in Fig. 3(a). Its gate count is 9. In 
order to improve the performance of the algorithm, we use the 
Forward procedure to synthesize the circuit. 
 
Figure 3.  (a) The initial circuit only using the existing algorithm (b) Divide 
the circuit into two subcircuits. (c) The final circuit using our method. 
First, the circuit is divided into two subcircuits and the gate 
count of subcircuit Cs is defined as 1 as shown in Fig. 3(b). 
Subcircuit Cs Subcircuit Cc 
Input Output
m gates p gates 
 
a
b
c
d
e
f
a
b
c
d
e
f 
(a) 
(b) 
(c) 
a
b
c
d
e
f
y1 
y2 
y3 
Cs Cc 
1 gate p gate 
Cs Cc 
978‐1‐61284‐774‐0/11/$26.00 ©2011 IEEE 
2541 
Reversible Logic Synthesis Based on a Modified 
Tabulation Method 
CHIN-YUNG LU 
Dept. of Electronic Engineering 
Delin Institute of Technology 
New Taipei City, Taiwan 
d90943007@ntu.edu.tw 
SHIOU-AN WANG  
Dept. of Computer Science and Information Engineering 
Delin Institute of Technology 
New Taipei City, Taiwan 
d90921009@ntu.edu.tw 
 
 
Abstract—An important property of reversible circuits is that 
they can reduce the energy consumption which is now a big 
problem for the advanced circuit design. If a circuit is reversible, 
it can reduce the energy consumption caused by information loss. 
The tabulation method is more efficient than other simplification 
methods for combination logic circuits. But the classical 
tabulation method is not directly applicable to reversible circuits 
because the basic logic gates, except the NOT gate, are not 
reversible gates. In this paper, we propose a method to solve the 
problem so that the tabulation method can be applied to the 
reversible circuit synthesis. Our algorithm provides a systematic 
method to simplify the reversible circuit. This can produce the 
resulting expression in exclusive-sum form and transform it into 
a final reversible circuit with lower quantum cost. Moreover, we 
can realize permutations to be reversible circuits with lower 
quantum cost and without unnecessary garbage bits. We can also 
convert irreversible circuits by adding qubits to make the circuits 
reversible. The experimental results show that the average saving 
in quantum cost is 15.82% compared with previous approaches. 
Keywords- reversible circuits; circuit optimization; logic 
synthesis; quantum computing; tabulation method 
VI.  INTRODUCTION 
As the CMOS process technology progresses, circuit speed 
becomes much faster while energy consumption problem is 
becoming more and more serious. This problem for the 
portable devices is even more serious than others. Landauer [1] 
proved that traditional binary irreversible gates result in power 
dissipation in spite of implementation. Bennett [2] showed that 
for a binary circuit built from reversible gates no power is 
consumed due to information loss. It is tempting to consider 
that reversible circuits may be useful for the power dissipation 
problem. Moreover, quantum computing [3] is one of the 
important applications of reversible circuits. Several quantum 
algorithms which improve some traditional problems have 
been proposed [4], [5]. Thus, quantum computing becomes one 
of the most rapidly expanding research fields. In fact, quantum 
circuits must be reversible, so reversible circuits can be a 
special case of quantum circuits. A considerable number of 
studies [9-10] have been made on developing algorithm for 
synthesis of reversible circuits. 
A reversible circuit that produces a unique output vector for 
each input vector has the same number of inputs and outputs. 
To build a reversible circuit, we need a set of reversible gates 
as a universal gate set to synthesize the circuit. But traditional 
gates such as AND, OR, and exclusive-OR are not reversible. 
Only the NOT gate is a reversible gate. Therefore, a set of 
reversible gates different from traditional gates need to be 
defined. In fact, several reversible gates, including the 
controlled NOT gate (called the CN gate) and the Toffoli gate 
[6], have been proposed. Therefore, a set of reversible gates 
including NOT, CN, and Toffoli gates are used to synthesize 
the reversible circuits. 
Moreover, the classical tabulation method called the 
Quine-McCluskey method [7] is an especially useful method 
for simplifying switching functions of a large number of 
variables. Therefore, the tabulation method is an efficient 
method for minimizing the conventional logic circuit. However, 
there are some problems to apply the tabulation method for 
reversible circuits as described below. First, the output is not at 
the default qubit in the circuit. Because the tabulation method 
only generates the result of a single output, we can not locate 
the output at the default qubit for reversible circuits. Second, 
every output is generated independently without considering 
the relationship between the outputs. Third, some reversible 
circuits need to be built by adding unnecessary qubits. Finally, 
the cost of a NOT gate is equal to a CN gate.  
VII. NOTATIONS AND PRELIMINARIES 
A literal is a variable or its complement, and a minterm of n 
variables is a product of n literals in which each variable 
appears exactly once in either true or complemented form, but 
not both. For example, the term  is a minterm of 3 
variables. Clearly, a permutation which performs permutations 
of input vectors is a reversible circuit because it has the same 
number of input and output variables and each mapping to an 
output pattern from an input pattern is unique. For example, a 
truth table of a permutation is shown in Table I(a). The order of 
the outputs for a reversible circuit is fixed. Thus, the outputs f, 
g and h should be located at the inputs a, b and c which also 
represent the qubits, respectively. 
A full adder whose truth table is in Table I(b) is not a 
reversible circuit because the number of inputs is not equal to 
the number of outputs and the input vector can not map to a 
unique output vector. This kind of circuits is called irreversible 
circuits. But they can be easily transformed into reversible 
circuits by adding some qubits. For example, we can add one 
qubit to a full adder and it becomes a reversible circuit with 4 
inputs and 4 outputs. 
cab
This research was supported by the National Science Council under 
Grant NSC 99-2221-E-237-006-. 
978‐1‐61284‐774‐0/11/$26.00 ©2011 IEEE 
2543 
 
Figure 6.  Finding an essential terms . 
The term is called an essential term if it has the maximum 
number of 1's. An essential term can be a variable or a product 
term. In Fig. 3, the term 0--- can be transformed into the 
corresponding expression  and it is an essential term since it 
has the maximum number of 1's. In order to find the next 
essential term, 1's are changed into 0's and 0's into 1's in the 
term since the OR operation is replaced with the exclusive-OR 
operation. Then we can find another essential term . 1's are 
exchanged with 0's in the term. We need to find the remaining 
essential terms until there is no 1's left.  
IX. REALIZING REVERSIBLE CIRCUIT 
A. Generating the Expression for a Single Output 
The goal of this subsection is to find a set of essential terms 
for a single output. Each essential term can produce a 
corresponding product term at every pass until no 1's are left. 
Then we can obtain a resulting expression by connecting these 
product terms with exclusive-OR operations. Now the resulting 
expression is in exclusive-sum-of-products form. Assuming 
that the truth table has n variables, there are 2n-1 1's in the 
output f, and output f should be located at the qubit x. Now we 
will present the procedure to generate the expression of a single 
output f as follows: 
1) Exchange 1's with 0's, where x=1 or x=0, in the output f 
of the truth table to locate output f at the qubit x. 
2) If there are 1's in the truth table, group the list of the 
minterms for output f from the new truth table. 
3) Find an essential term. 
4) Replace 0's with 1's and 1's with 0's. 
5) Repeat Steps 2-4 until there are no 1's left. 
6) Find a minimum set of essential terms. If there is more 
than one such set, choose a set with the lowest quantum cost. 
7) Transform the set of essential terms into a corresponding 
expression and build a reversible circuit from the expression. 
For example, let f(a,b,c)=∑m(0,2,4,5). First we exchange 
1's with 0's, where a=1, in the output f of the truth table and get 
the expression 'faf   since output f should be located at 
the qubit a as shown in Fig. 4(a). There are still four 1's in the 
truth table and group the list of the minterms. Combine 
minterms into an essential term --0 and get a partial expression 
c  as shown in Fig. 4(b). Then replace 0's with 1's and 1's with 
0's in the term of the truth table. Now, there are only two 1's in 
the truth table. We can directly get two essential terms cba  
and abc since these two 1's differ in two variables. The 
resulting expression is 
abccbacagggafaf  321' . cba  and 
abc can be further transformed into )( cba   and 
YXYX  . This transformation is described in subsection B. 
For completing the circuit, add the proper parentheses into the 
expression )))((( cbacaf   as described in subsection C. 
Finally, we can build the reversible circuit from the expression 
as shown in Fig. 5. 
 
Figure 7.  Generate the expression of a single output. (a) Locate output f at 
the default qubit a. (b) Find a set of essential terms. 
 
Figure 8.  The circuit generated from the resulting expression. 
B. Expression Transformation 
The expression as described in subsection A is still too 
complicated and can be further simplified. Actually, the 
expression generated by the modified tabulation method is in 
exclusive-sum-of-products form. After performing the process 
of expression transformation, the resulting expression really 
becomes an exclusive-sum form. There are two stages to do the 
process of expression transformation as shown below: First, 
combine two product terms of the expression to generate a 
more simplified term. Second, reduce the number of NOT 
gates since the cost of a NOT gate is equal to a CN gate. 
C. Build a Reversible Circuit from the Resulting Expression 
Although an expression can now be transformed into a 
more simplified one by the expression transformation, the 
synthesis work for a single output is not complete yet. We still 
need to build a reversible circuit from the expression. The 
algorithm to build a reversible circuit from the expression is as 
shown below: 
1) Add parentheses in the expression: According to the 
function of a gate, add appropriate parentheses into the 
expression. Each set of parentheses represents a CN gate or a 
Toffoli gate excluding a NOT gate. If parentheses can not be 
added to the expression, the sequence of the terms in the 
expression should be changed excluding the first term which 
can locate the output at the default qubit. For example, 
)))((( abbacf  . There are 3 set of parentheses in the 
(16) 0110 
(17) 0111 
(10,11,12,13,16,17,04,05) 0---
(112) 1100 
(113) 1101 
essential group ag 1
(10,11,12,13) 00 -- 
group 1 
group 2 
a
a
cb
0   0   0 
0   0   1 
0   1   0 
0   1   1 
1   0   0 
1   1   1 
1   1   0 
1   0   1 
1 
0 
1 
0 
1 
0 
0 
1 
f a   b   c 
0 
1 
1 
0 
(10) 000
(12) 010
(16) 110
(10,12)
(12,16)
0-0
-10 (10,12,16,04) --0
(17) 111
(10,12) 0-0 
(16) 110 
(17) 111 cg 1
(a) 
'faf 
1 
0 
1 
0 
f ’ 
(16,17) 11-
(b) 
(14) 100 
(17) 111 
1↔0 
abcgcbag  32 ,
 
)))((( cbacaabccbacaf 
a 
b 
c 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                     日期：100 年 8 月 5 日 
一、參加會議經過 
此次參加 The 2nd International Conference on Multimedia Technology
研討會(ICMT2011) 發表一篇和量子計算(Quantum Computing) 相關的論文，
ICMT2011 研討會的舉辦地點在大陸杭州(Hangzhou, China) ，ICMT2011 研討會
的宗旨在於提供一個高層次的國際論壇，論文發表者可以在會中發表自己努力的
研究成果，為研究人員和工程師介紹和討論的 Physics and Mathematics 相關的
最新進展和新技術，這是一個難得的研討經驗，和全世界對於量子計算(Quantum 
Computing) 相關有深入研究的學者一起討論自己的研究成果，並且觀摩其他學
者的研究成果，希望透過討論過程和觀摩成果，能夠激發更多的研究題目。 
 
二、與會心得 
ICMT2011 研討會是由電機電子工程師學會（Institute of Electrical and 
計畫編號 NSC  99－2221－E－237 －006－ 
計畫名稱 使用量子邏輯閘進行可逆電路合成方法之研究 
出國人員
姓名 王秀安 
服務機構
及職稱 德霖技術學院資工系助理教授 
會議時間 100 年 7 月 26 日至 100 年 7 月 28 日 會議地點 中國 杭州 
會議名稱 The 2nd International Conference on Multimedia Technology (ICMT2011) 
發表論文
題目 
(中文) 一個有效改善量子布林電路合成效率的演算法 
(英文) An Efficient Method for Improving the Performance of Quantum 
Boolean Circuit Synthesis Algorithms 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                     日期：100 年 8 月 5 日 
一、參加會議經過 
此次參加 The 2nd International Conference on Multimedia Technology
研討會(ICMT2011) 發表一篇和量子計算(Quantum Computing) 相關的論文，
ICMT2011 研討會的舉辦地點在大陸杭州(Hangzhou, China) ，ICMT2011 研討會
的宗旨在於提供一個高層次的國際論壇，論文發表者可以在會中發表自己努力的
研究成果，為研究人員和工程師介紹和討論的 Physics and Mathematics 相關的
最新進展和新技術，這是一個難得的研討經驗，和全世界對於量子計算(Quantum 
Computing) 相關有深入研究的學者一起討論自己的研究成果，並且觀摩其他學
者的研究成果，希望透過討論過程和觀摩成果，能夠激發更多的研究題目。 
 
二、與會心得 
ICMT2011 研討會是由電機電子工程師學會（Institute of Electrical and 
計畫編號 NSC  99－2221－E－237 －006－ 
計畫名稱 使用量子邏輯閘進行可逆電路合成方法之研究 
出國人員
姓名 盧勤庸 
服務機構
及職稱 德霖技術學院電子系副教授 
會議時間 100 年 7 月 26 日至 100 年 7 月 28 日 會議地點 中國 杭州 
會議名稱 The International Workshop on Physics and Mathematics (IWPM 2011) 
發表論文
題目 
(中文) 基於修改的表格方法之可逆邏輯合成 
(英文)  Reversible Logic Synthesis Based on a Modified Tabulation 
Method 
 
  
978-1-61284-774-0/11/$26.00 ©2011 IEEE 
2397 
An Efficient Method for Improving the Performance 
of Quantum Boolean Circuit Synthesis Algorithms
 
SHIOU-AN WANG  
Dept. of Computer Science and Information Engineering 
Delin Institute of Technology 
New Taipei City, Taiwan 
d90921009@ntu.edu.tw 
CHIN-YUNG LU 
Dept. of Electronic Engineering 
Delin Institute of Technology 
New Taipei City, Taiwan 
d90943007@ntu.edu.tw 
 
 
 
Abstract—So far there are no synthesis algorithms that can find 
all the optimal quantum boolean circuits except an exhaustive 
algorithm. In this paper, we propose a method based on the 
divide and conquer approach which can significantly improve the 
performance of the existing synthesis algorithms to synthesize 
quantum boolean circuits. A quantum boolean circuit is first 
divided into two subcircuits. The subcircuit with fewer gates will 
input all possible combinations of m gates excluding those with 
the same function specification. The other subcircuit can be 
synthesized by using the existing algorithm. The two subcircuits 
are combined and then we can choose the most simplified 
quantum boolean circuit. According to the experimental results 
of all the 3-variable functions, we can see that the performance of 
the existing algorithms can be significantly improved by using 
our method. Therefore the synthesized quantum boolean circuits 
are much more simplified than previous results. 
Keywords- quantum boolean circuit; circuit optimization; logic 
synthesis; quantum computing; divide and conquer 
I.  INTRODUCTION 
Over the last few years, energy consumption has been an 
important subject of study for advanced circuit design. As the 
CMOS process technology continues to progress, circuit speed 
becomes much faster while energy consumption problem is 
becoming more and more serious. This problem in portable 
devices is even more critical than others. Landauer [1] proved 
that traditional binary irreversible gates will result in power 
dissipation disregard of implementation technologies. Bennett 
[2] showed that for a binary circuit built from reversible gates 
no power will be consumed due to information loss. It is 
tempting to consider that reversible circuits may be useful for 
the power dissipation problem. Moreover, quantum computing 
[3] is one of the important applications of reversible circuits. 
Several quantum algorithms which solve traditional problems 
much faster have been proposed [4,5]. Thus, quantum 
computing becomes one of the most rapidly expanding 
research fields. In fact, quantum boolean circuits must be 
reversible, so quantum boolean circuits is a kind of reversible 
circuits. 
 
 
A reversible circuit that produces a unique output pattern 
for each input pattern has the same number of inputs and 
outputs. If a circuit is reversible, it can reduce the energy 
consumption caused by information loss. To build a quantum 
boolean circuit, we need a set of quantum gates as a universal 
gate set to synthesize the circuit. But traditional gates such as 
AND, OR, and exclusive-OR are not reversible. Only the NOT 
gate is a reversible gate. Therefore, a set of quantum gates 
different from traditional gates need to be defined. In fact, 
several quantum gates, including the controlled NOT gate 
(called the CN gate) and the Toffoli gate [6], have been 
proposed. Hence, the set of quantum gates including NOT, CN, 
and Toffoli gates can be used to synthesize a quantum boolean 
circuit. 
A considerable number of studies [7-12] have been made 
on developing synthesis algorithms for the quantum boolean 
circuits, but the results are not satisfactory compared with the 
optimal solution. There is much room for improving the 
performance of these synthesis algorithms. In fact, these 
algorithms can still be reused in the synthesis process to obtain 
much better results without proposing a new synthesis 
algorithm or modifying the existing synthesis algorithms. 
Reusing the existing algorithms can achieve the same goal. As 
far as we know, this is the first study on improving the 
performance of existing synthesis algorithms for generating 
more simplified quantum boolean circuits. 
II. NOTATIONS AND PRELIMINARIES 
A. Basic Definitions 
Definition 1: A circuit is reversible if the number of outputs is 
equal to the number of inputs and each input pattern maps to a 
unique output pattern. □ 
A literal is a variable or its complement, and a minterm of n 
variables is a product of n literals in which each variable 
appears exactly once in either true or complemented form, but 
not both. For example, the term cab  is a minterm of 3 
variables. Clearly, a quantum boolean circuit which performs 
permutations of input patterns is a reversible circuit because it 
has the same number of input and output variables and each 
mapping to an output pattern from an input pattern is unique.  
This research was supported by the National Science 
Council under Grant NSC 99-2221-E-237-006-. 
978-1-61284-774-0/11/$26.00 ©2011 IEEE 
2399 
 
Figure 2.  Circuit bipartition into two subcircuits. 
B. Circuit Bipartition 
Definition 3: A quantum boolean circuit C is partitioned into 
two subcircuits Cs and Cc. Subcircuits Cs and Cc have m and p 
gates, respectively. □ 
In order to simplify the classical circuit design, a circuit is 
divided into subcircuits and the subcircuits are synthesized 
separately. Our method partitions a quantum boolean circuit 
into two subcircuits Cs and Cc as shown in Fig. 2. Since the 
function specifications of the two subcircuits are not known 
after partition, we can not synthesize the two subcircuits 
separately. The circuit bipartition here is different from the 
classical circuit design. The possible solution is that one of the 
two subcircuits becomes known. Thus, we define that 
subcircuit Cs inputs all possible combinations of j gates 
excluding those with the same function specification, where 
j=1,2,...,m. The size of m depends on the tolerance of time 
consumption and the requirement of improvement performance. 
Subcircuit Cc is synthesized by using the existing algorithm 
once at each change of subcircuit Cs.  
If a quantum boolean circuit is divided into more than 2 
subcircuits, it is no helpful to simplify the synthesis problem 
further. Note that a circuit must require its truth table or 
function specification to synthesize. Since we do not know the 
detail specification of each subcircuit after partitioning, it is 
much more difficult to find the truth table of each subcircuit 
when the number of the subcircuits is more than 2. Thus, to 
divide a quantum boolean circuit into too many subcircuits is 
not a suitable way. In order to limit the synthesis difficulty by 
partition, we define that a quantum boolean circuit is only 
divided into 2 subcircuits. 
The size of subcircuit Cs is another problem to affect the 
performance of using our method. If the size of subcircuit Cs is 
too large, it will waste too much time to synthesize the final 
result. This is due to that the time consumption varies 
exponentially as the size of subcircuit Cs. Thus, the size of 
subcircuit Cs should be as small as possible. Actually, we limit 
the size of subcircuit Cs in the light of the tradeoff between 
time consumption and synthesis performance.  
A quantum boolean circuit is partitioned into two 
subcircuits. The relative position of two subcircuits slightly 
affects the performance of using our method. In fact, there are 
two kinds of operations in our method. If subcircuit Cs is 
located at the front side of the circuit as shown in Fig. 2, it is 
called the Forward procedure. Similarly, if subcircuit Cs is 
located at the rear side of the circuit, it is called the Backward 
procedure. The steps of procedures Forward and Backward are 
almost the same except finding the intermediate patterns. 
C. Finding Truth Table 
In order to synthesize a quantum boolean circuit, it is 
necessary to find the truth table of the circuit. Since the gates in 
subcircuit Cs are defined beforehand as discussed in the 
previous subsection, we only need to find the truth table of 
subcircuit Cc. However, for finding the truth table of subcircuit 
Cc, pattern Y should be calculated first, where pattern Y is a set 
of intermediate patterns between subcircuits Cs and Cc. Then, 
we can easily find the truth table of subcircuit Cc according to 
pattern Y. 
D. Performing an Existing Algorithm 
The purpose of our method is to improve the performance 
of existing synthesis algorithms. After the bipartition of a 
quantum boolean circuit, subcircuit Cs inputs all possible 
combinations of j gates excluding those with the same function 
specification. Finding the truth table of subcircuit Cc makes it 
possible to synthesize a better result. Next, subcircuit Cc can be 
synthesized with the existing algorithm to get a subcircuit. 
Combine the two subcircuits Cs and Cc to become a possible 
result and repeat the method until the possible inputs of 
subcircuit Cs are empty. Then choose the quantum boolean 
circuit with the smallest gate count from the set of possible 
results as the final circuit. After the circuit bipartition, 
subcircuit Cc may become smaller if subcircuit Cs inputs a 
proper combination of j gates. Since we do not know which 
one is the proper combination, subcircuit Cs needs to input all 
possible combinations of j gates for finding the proper 
combination.  
E. Example 
Now we give an example to explain our method how to 
improve the performance of existing synthesis algorithms. 
Assume that the truth table of a quantum boolean circuit is 
shown in Table I. The initial result only using the existing 
algorithm [10] is as shown in Fig. 3(a). Its gate count is 9. In 
order to improve the performance of the algorithm, we use the 
Forward procedure to synthesize the circuit. 
 
Figure 3.  (a) The initial circuit only using the existing algorithm (b) Divide 
the circuit into two subcircuits. (c) The final circuit using our method. 
First, the circuit is divided into two subcircuits and the gate 
count of subcircuit Cs is defined as 1 as shown in Fig. 3(b). 
Subcircuit Cs Subcircuit Cc 
Input Output
m gates p gates 
 
a
b
c
d
e
f
a
b
c
d
e
f 
(a) 
(b) 
(c) 
a
b
c
d
e
f
y1 
y2 
y3 
Cs Cc 
1 gate p gate 
Cs Cc 
978-1-61284-774-0/11/$26.00 ©2011 IEEE 
2541 
Reversible Logic Synthesis Based on a Modified 
Tabulation Method 
CHIN-YUNG LU 
Dept. of Electronic Engineering 
Delin Institute of Technology 
New Taipei City, Taiwan 
d90943007@ntu.edu.tw 
SHIOU-AN WANG  
Dept. of Computer Science and Information Engineering 
Delin Institute of Technology 
New Taipei City, Taiwan 
d90921009@ntu.edu.tw 
 
 
 
Abstract—An important property of reversible circuits is that 
they can reduce the energy consumption which is now a big 
problem for the advanced circuit design. If a circuit is reversible, 
it can reduce the energy consumption caused by information loss. 
The tabulation method is more efficient than other simplification 
methods for combination logic circuits. But the classical 
tabulation method is not directly applicable to reversible circuits 
because the basic logic gates, except the NOT gate, are not 
reversible gates. In this paper, we propose a method to solve the 
problem so that the tabulation method can be applied to the 
reversible circuit synthesis. Our algorithm provides a systematic 
method to simplify the reversible circuit. This can produce the 
resulting expression in exclusive-sum form and transform it into 
a final reversible circuit with lower quantum cost. Moreover, we 
can realize permutations to be reversible circuits with lower 
quantum cost and without unnecessary garbage bits. We can also 
convert irreversible circuits by adding qubits to make the circuits 
reversible. The experimental results show that the average saving 
in quantum cost is 15.82% compared with previous approaches. 
Keywords- reversible circuits; circuit optimization; logic 
synthesis; quantum computing; tabulation method 
VI.  INTRODUCTION 
As the CMOS process technology progresses, circuit speed 
becomes much faster while energy consumption problem is 
becoming more and more serious. This problem for the 
portable devices is even more serious than others. Landauer [1] 
proved that traditional binary irreversible gates result in power 
dissipation in spite of implementation. Bennett [2] showed that 
for a binary circuit built from reversible gates no power is 
consumed due to information loss. It is tempting to consider 
that reversible circuits may be useful for the power dissipation 
problem. Moreover, quantum computing [3] is one of the 
important applications of reversible circuits. Several quantum 
algorithms which improve some traditional problems have 
been proposed [4], [5]. Thus, quantum computing becomes one 
of the most rapidly expanding research fields. In fact, quantum 
circuits must be reversible, so reversible circuits can be a 
special case of quantum circuits. A considerable number of 
studies [9-10] have been made on developing algorithm for 
synthesis of reversible circuits. 
A reversible circuit that produces a unique output vector for 
each input vector has the same number of inputs and outputs. 
To build a reversible circuit, we need a set of reversible gates 
as a universal gate set to synthesize the circuit. But traditional 
gates such as AND, OR, and exclusive-OR are not reversible. 
Only the NOT gate is a reversible gate. Therefore, a set of 
reversible gates different from traditional gates need to be 
defined. In fact, several reversible gates, including the 
controlled NOT gate (called the CN gate) and the Toffoli gate 
[6], have been proposed. Therefore, a set of reversible gates 
including NOT, CN, and Toffoli gates are used to synthesize 
the reversible circuits. 
Moreover, the classical tabulation method called the 
Quine-McCluskey method [7] is an especially useful method 
for simplifying switching functions of a large number of 
variables. Therefore, the tabulation method is an efficient 
method for minimizing the conventional logic circuit. However, 
there are some problems to apply the tabulation method for 
reversible circuits as described below. First, the output is not at 
the default qubit in the circuit. Because the tabulation method 
only generates the result of a single output, we can not locate 
the output at the default qubit for reversible circuits. Second, 
every output is generated independently without considering 
the relationship between the outputs. Third, some reversible 
circuits need to be built by adding unnecessary qubits. Finally, 
the cost of a NOT gate is equal to a CN gate.  
VII. NOTATIONS AND PRELIMINARIES 
A literal is a variable or its complement, and a minterm of n 
variables is a product of n literals in which each variable 
appears exactly once in either true or complemented form, but 
not both. For example, the term  is a minterm of 3 
variables. Clearly, a permutation which performs permutations 
of input vectors is a reversible circuit because it has the same 
number of input and output variables and each mapping to an 
output pattern from an input pattern is unique. For example, a 
truth table of a permutation is shown in Table I(a). The order of 
the outputs for a reversible circuit is fixed. Thus, the outputs f, 
g and h should be located at the inputs a, b and c which also 
represent the qubits, respectively. 
A full adder whose truth table is in Table I(b) is not a 
reversible circuit because the number of inputs is not equal to 
the number of outputs and the input vector can not map to a 
unique output vector. This kind of circuits is called irreversible 
circuits. But they can be easily transformed into reversible 
circuits by adding some qubits. For example, we can add one 
cab
This research was supported by the National Science Council under 
Grant NSC 99-2221-E-237-006-. 
978-1-61284-774-0/11/$26.00 ©2011 IEEE 
2543 
term with the maximum number of 1's from them since it can 
be transformed into a more simplified expression. 
 
Figure 6.  Finding an essential terms . 
The term is called an essential term if it has the maximum 
number of 1's. An essential term can be a variable or a product 
term. In Fig. 3, the term 0--- can be transformed into the 
corresponding expression  and it is an essential term since it 
has the maximum number of 1's. In order to find the next 
essential term, 1's are changed into 0's and 0's into 1's in the 
term since the OR operation is replaced with the exclusive-OR 
operation. Then we can find another essential term . 1's are 
exchanged with 0's in the term. We need to find the remaining 
essential terms until there is no 1's left.  
IX. REALIZING REVERSIBLE CIRCUIT 
A. Generating the Expression for a Single Output 
The goal of this subsection is to find a set of essential terms 
for a single output. Each essential term can produce a 
corresponding product term at every pass until no 1's are left. 
Then we can obtain a resulting expression by connecting these 
product terms with exclusive-OR operations. Now the resulting 
expression is in exclusive-sum-of-products form. Assuming 
that the truth table has n variables, there are 2n-1 1's in the 
output f, and output f should be located at the qubit x. Now we 
will present the procedure to generate the expression of a single 
output f as follows: 
1) Exchange 1's with 0's, where x=1 or x=0, in the output f 
of the truth table to locate output f at the qubit x. 
2) If there are 1's in the truth table, group the list of the 
minterms for output f from the new truth table. 
3) Find an essential term. 
4) Replace 0's with 1's and 1's with 0's. 
5) Repeat Steps 2-4 until there are no 1's left. 
6) Find a minimum set of essential terms. If there is more 
than one such set, choose a set with the lowest quantum cost. 
7) Transform the set of essential terms into a corresponding 
expression and build a reversible circuit from the expression. 
For example, let f(a,b,c)=∑m(0,2,4,5). First we exchange 
1's with 0's, where a=1, in the output f of the truth table and get 
the expression 'faf   since output f should be located at 
the qubit a as shown in Fig. 4(a). There are still four 1's in the 
truth table and group the list of the minterms. Combine 
minterms into an essential term --0 and get a partial expression 
c  as shown in Fig. 4(b). Then replace 0's with 1's and 1's with 
0's in the term of the truth table. Now, there are only two 1's in 
the truth table. We can directly get two essential terms cba  
and abc since these two 1's differ in two variables. The 
resulting expression is 
abccbacagggafaf  321' . cba  and 
abc can be further transformed into )( cba   and 
YXYX  . This transformation is described in subsection B. 
For completing the circuit, add the proper parentheses into the 
expression )))((( cbacaf   as described in subsection C. 
Finally, we can build the reversible circuit from the expression 
as shown in Fig. 5. 
 
Figure 7.  Generate the expression of a single output. (a) Locate output f at 
the default qubit a. (b) Find a set of essential terms. 
 
Figure 8.  The circuit generated from the resulting expression. 
B. Expression Transformation 
The expression as described in subsection A is still too 
complicated and can be further simplified. Actually, the 
expression generated by the modified tabulation method is in 
exclusive-sum-of-products form. After performing the process 
of expression transformation, the resulting expression really 
becomes an exclusive-sum form. There are two stages to do the 
process of expression transformation as shown below: First, 
combine two product terms of the expression to generate a 
more simplified term. Second, reduce the number of NOT 
gates since the cost of a NOT gate is equal to a CN gate. 
C. Build a Reversible Circuit from the Resulting Expression 
Although an expression can now be transformed into a 
more simplified one by the expression transformation, the 
synthesis work for a single output is not complete yet. We still 
need to build a reversible circuit from the expression. The 
algorithm to build a reversible circuit from the expression is as 
shown below: 
1) Add parentheses in the expression: According to the 
function of a gate, add appropriate parentheses into the 
expression. Each set of parentheses represents a CN gate or a 
Toffoli gate excluding a NOT gate. If parentheses can not be 
added to the expression, the sequence of the terms in the 
expression should be changed excluding the first term which 
(16) 0110 
(17) 0111 
(10,11,12,13,16,17,04,05) 0---
(112) 1100 
(113) 1101 
essential group ag 1
(10,11,12,13) 00 -- 
group 1 
group 2 
a
a
cb
0   0   0 
0   0   1 
0   1   0 
0   1   1 
1   0   0 
1   1   1 
1   1   0 
1   0   1 
1 
0 
1 
0 
1 
0 
0 
1 
f a   b   c 
0 
1 
1 
0 
(10) 000
(12) 010
(16) 110
(10,12)
(12,16)
0-0
-10 (10,12,16,04) --0
(17) 111
(10,12) 0-0 
(16) 110 
(17) 111 cg 1
(a) 
'faf 
1 
0 
1 
0 
f ’ 
(16,17) 11-
(b) 
(14) 100 
(17) 111 
1↔0 
abcgcbag  32 ,
 
)))((( cbacaabccbacaf 
a 
b 
c 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/04
國科會補助計畫
計畫名稱: 使用量子邏輯閘進行可逆電路合成方法之研究
計畫主持人: 王秀安
計畫編號: 99-2221-E-237-006- 學門領域: 量子計算
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
