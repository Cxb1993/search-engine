植基於 JAVA 智慧卡上的手機仿真器憑證申請系統 
(Certificate Services for Cellular Phone Emulator Based on JAVA Card) 
 
本研究成果發表於 2006「開放原始碼」技術與應用研討會 
論文編號：P0039 
 
楊慶隆 陳澤世 彭安國 
國立東華大學資訊工程學系 
cnyang@mail.ndhu.edu.tw 
 
摘要 
隨著 3G 通訊系統的開放與建置，高速行動網路通訊時代已經來臨，因此在手機行
動裝置上執行憑證的相關應用以達安全的行動通信服務更顯刻不容緩。透過手機行動裝
置申請身份憑證，並結合智慧卡片可程式化、可存放憑證資料特性，提供行動使用者與
需要身份驗證的網路站台一個安全且便利的行動網路交易環境，諸如行動報稅、行動轉
帳、行動電子行動票券、行動小額付款等，皆可直接在手機行動裝置中完成。本系統完
成植基於 JAVA 智慧卡上的手機仿真器憑證申請系統，此手機行動裝置與智慧卡片溝通
介面程式並可直接移植至擁有執行 JAVA 程式能力的手機上。 
 
關鍵字： 憑證、公開金鑰基礎建設、智慧卡 
 
Abstract 
Mobile commerce (also known as m-commerce) is to perform the application and 
service from Internet-enabled mobile devices and becomes popular recently doe to the 
development of mobile technology. Although it is quite different from traditional 
e-Commerce, the security and privacy still need to be addressed. Therefore, providing 
certificate services via mobile phones or PDAs is key issue for the security in m-commerce. 
In this paper, we implement certificate services for cellular phone emulator based on JAVA 
smart card. Also, the programs on emulator can be ported to the mobile phone for practical 
application.  
 
Keywords： Certificate、Public Key Infrastructure (PKI)、JAVA Smart Card 
智慧卡(Smart Card) [8]是符合 ISO7816 規範
內藏 IC 的卡片，由於智慧卡對於 JAVA CVM 的
支援，可透過廠商提供的 SDK 開發平台或者是
IBM 所 提 供 的 Eclipse Jcop plugin [9] 以 及
OpenSource 的 MUSCLE 等軟體，對 JAVA 智慧卡
片送出控制命令達到所要的目的。在傳遞控制命令
的方式中，開發者可採用較簡易的 API 模式，也
就是直接應用已經開發完成的元件，來達成基礎目
的，如：產生金鑰對、簽署憑證等。開發者更可透
過這些工具對卡片下達 Application Protocol Data 
Units (APDU)型式命令，直接對卡片中 IC 進行 I/O
動作，藉此達到控制與儲存的目的。 
3. 系統介紹與實作說明 
本節中，首先介紹本系統運作架構，而後分別
對系統所包含之各個平台採用的軟硬體設備及其
版本資訊做相關資料介紹與系統實作說明。 
3.1 系統介紹 
本系統的系統架構圖如圖二，使用者端採用支
援 JAVA KVM 的行動裝置與擁有 CVM 的智慧卡
片，透過 GPRS 等無線網路連接網際網路與 CA 以
及商家達成憑證申請、身份認證核對、消費登陸、
商品交遞等任務。 
 
圖二、系統架構圖 
由於在運作流程中憑證管理中心與傳統CA無
異，而在商家部分的電子商務服務也不需做任何更
動即可直接處理使用者之訂單以及憑證認證部
分。因此，本文所提之系統與現行中所有電子商務
服務有絕對之相容性，對於廠商與憑證服務公司間
的既有網路建設，不需要做任何更動，即可達到讓
使用者擁有更便利的購物消費以及安全的身份認
證環境。 
3.2 系統架構設計與流程 
系統平台在實作方面可分為三大部分，分別為
CA、使用者以及商家。在使用者方面又包含了行
動通訊裝置(手機)和智慧卡兩方面，以下我們分別
介紹上述平台以及平台間溝通橋樑的建立方式。 
首先在 CA 與使用者之間，我們建立與現行網
路環境下相同的憑證申請與核發流程，讓憑證核發
機構在不需增加建置成本的前提下達到與使用者
行動裝置連線的目的，而 CA 端我們採用 Linux [10]
作業系統，並配合 Apache Web Server [11]與
OpenCA [12]來達到與市場上相符的系統狀況。除
此之外，由於整個系統都架構於 JAVA 的 VM 之
上，因此，在 CA 端我們安裝 J2EE 來達到對 JAVA
平台的完整支援。 
電子商務廠商端，由於使用者會透過手機中瀏
覽器與該廠商網站進行連接，因此，廠商網站端至
少要提供 WML 支援，並且需有在使用者與廠商的
連線之間建立安全連線之能力，也就是說在廠商端
的 Web Server 需要支援 SSL 或是其他安全連線機
制。在此，我們採用與 CA 伺服器相同的建置方
式，安裝 Linux 平台並配合 Apache Web Server。
此外，也需支援 JAVA VM 環境。 
使用者端部分，由於行動通訊裝置(手機)以及
智慧卡，兩者皆是由使用者來保管與操作應用。然
而目前市售手機尚未有支援可直接對智慧卡片讀
取的功能，因此我們必須採用模擬 JAVA 平台手
機。本系統在此部分採用 Windows 平台並配合
J2ME以及Wireless Toolkit行動裝置模擬器做為開
發環境。透過 JAVA Applet 的撰寫，使虛擬手機平
台可向憑證管理中心要求申請憑證，並把憑證存放
到智慧卡片，而憑證的傳遞則透過 JAVA 所支援之
安全通道完成。此外，此虛擬平台也會與電子商務
網站等應用連接，並透過憑證的採用，來實行身份
 
public class Cert2SC implements Runnable{ 
… 
public void run(){ 
Check SmartCard State 
Read Certificates 
System.out.println("Connected. Selecting applet"); 
result = iopCard.SelectAID(sAID); 
System.out.println(result); 
if (!result){ 
s = iopCard.GetErrorMessage(); 
System.out.println("SelectAID: " + s);  
}else{ 
System.out.println("SelectAID: 010203040506"); 
System.out.println("Connected and card applet 
selected!");} 
Switch(Applications){ 
…. 
}}} 
圖六、元件 CMI 1.1.0 虛擬碼 
 
4. 第四部份的憑證應用系統方面，由於各個應用
程式對憑證取用之權限或是取用格式與應用
方式之不同，因此憑證應用系統可對其做統一
協調。 (完成元件 AMS 1.1.0) 
 
透過以上四個介面模組之建立，我們即可完成
模擬 JAVA 手機申請憑證，並將憑證置入智慧卡後
可供使用者實際應用與管理之行動憑證申請管理
系統。 
4 系統執行流程 
系統實作流程部份，首先使用者部份的 JAVA
手機模擬平台，本系統採用 Sun 所提供的 Wireless 
Toolkit [13]工具，模擬手機執行 JAVA 應用程式的
行為。此 Wireless Toolkit 可以執行與編譯 JAVA 
J2ME 所撰寫的 Project，如圖七(a)可選擇執行已撰
寫並編譯過後的 Project，模擬結果如圖七(b)所
示。藉此 Toolkit 之操作即可在電腦上模擬手機，
並操作手機程式連結至憑證伺服器上申請憑證。 
(a) Project 選取 
 
(b) Project 模擬與執行 
圖七、手機模擬器環境 
本系統憑證伺服器，採用 Open SLL 建立，然
而由於手機本身並無法直接連結至 SLL CA，因此
我們另外開發手機與憑證伺服器介面的伺服器程
式監聽由手機傳送的憑證申請要求命令以及使用
者在申請憑證期間所輸入的申請資訊，此程式會監
聽並隨時與手機端程式連接(圖八)。 
圖八、憑證與手機介面伺服器運作 
倘若此伺服器程式接收到憑證申請請求，則會
將所收到的資訊及命令轉送至 SLL CA 產生
CSR(Certificate Singing Request) (圖九(a))，而後再
由 CA 簽署這份 CSR 產生憑證(圖九(b))。 
(a) 產生 CSR 
