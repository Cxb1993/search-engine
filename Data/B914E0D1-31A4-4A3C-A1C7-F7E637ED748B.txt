2可供推廣之研發成果資料表
█ 可申請專利 █ 可技術移轉 日期：96 年 9 月 16 日
國科會補助計畫
計畫名稱：高效率視訊編碼器 H.264 之研究(2/2)
計畫主持人：夏世昌
計畫編號：NSC 95－ 2221-E-327-031 學門領域：信號處理
技術/創作名稱 H.264 中內容調適可變長度編解碼器
發明人/創作人 夏世昌
技術說明
針對H.264/AVC Intra模式下使用的CAVLC編碼方式設計一個
編解碼器的智產。編碼器主要模組包括離散餘弦轉換器、量化器、
Zigzag Scan轉換器、CAVLC編碼器、串接器。每個時序讀取 4筆
像素以即時壓縮處理經過各個模組後輸出位元流。在 CAVLC編碼
器採用平行架構，4x4區塊在 16個時序內處理完成。在 VLC表的
部分，使用計算方式取得 VLC 碼可減少記憶體使用的空間。編碼
器在 cell_based設計環境下約使用 30K的邏輯閘數量並且工作頻率
可達 52MHz。
解碼器主要模組包括分解器、CAVLC解碼器、反 Zigzag Scan轉換
器、反量化器、反離散餘弦轉換器。另外，還包括取像及顯示緩衝
器、傳送及接收緩衝器、時序控制電路等，緩衝器控制則根據緩衝
器狀態及存取需求而定。同樣地，在 CAVLC解碼器也使用計算方
式取得數值。解碼器約使用 63K的邏輯閘數目並且工作頻率最高
可達 40MHz。整個設計皆模組化，可以容易地作調整，與其他應
用系統作整合，大幅降低系統晶片開發時間與成本。
附件二
4高效率視訊編碼器 H.264 之研究(2/2)
(NSC95-2221-E-327-031)
Shih-Chang Hsia, Si-Hong Wang and Wen-Hsien Liao
Department of Computer and Communication Engineering, National Kaohsiung
First University of Science and Technology, Kaohsiung, Taiwan, R.O.C.
Email:hsia@ccms.nkfust.edu.tw
Abstract
For H.264 intra-coder, the adaptive context variable length encoder (CAVLC) is a key IP. We
study a high-speed CAVLC encoder with parallel architecture to realize high-speed core. The
circuit can feed two coefficients per cycle, and use a pipelined schedule to share the timing slot
for the parameter computation and codeword generator. We develop the decision rules to compute
the CAVLC parameters with the direct forward computation, which can be employed to save the
temporal register and shorten the processing cycle. The codeword generation adopts the math
expression instead of ROM, where two 4-bit adders are commonly used. With the parallel
structure and pipelined control, the chip can encode one level per cycle and the maximum
processing time for one block is NC(the number of non-zero coefficients )+4 cycles. The
throughput rate of proposed IP can achieve 110MHz and the gate count is about 15k, when
implemented with 0.35um CMOS technology.
KEYWORDS: video coding, H.264, IP, CAVLC, throughput, parallel architecture,
1. INTRODUCTION
Recently, digital video systems, such as video-on-demand, video-phone, distance learning and
digital TV, etc., have become popular products because of their convenience and high quality. The
new standard H.264 technique had been proposed [1], to improve the coding performance of the
previous standards [2-3]. H.264 coder employs many advanced techniques [4-6], such as
intra-prediction, integer transform, adaptive context variable length coder (CAVLC), various
block size, multi-frame reference, etc. In this study, we are interested in the CAVLC coding
technique. A variable length coder (VLC) is used to remove redundancy data and to transfer video
data to the form of bit-stream [11] at the end of video coding. The conventional video codec used
the fixed VLC with the symbol (run, level) corresponding to the codeword [3-5], because it is
easy to be implemented in real systems. However, the video content would be dramatically
changed in real TV programs. The fixed VLC table is not suitable for all sequences. The coding
efficiency will become poor when the video feature is away from the specified VLC table. The
dynamic VLC table can be used to improve the coding efficiency. However, the new definition
information must be transmitted to decoder, and the bit-rate will increase too. Hence the dynamic
6content is shown in Table 3. We can attain the VLC codeword“0000 0000 110”when the number
of non-zero coefficients of neighboring blocks NC is less than 2. The next is the sign bit for
trailing ones. The‘0”and“1”is for a positive and negative one respectively. The 2nd level is–2,
and its codeword is 0001 with table (0). The level is over 0, the next level will use table (1)
according to the threshold decision. The 3nd level is also –2, and its codeword is 011. The
following levels all use table (1) since their levels are less than 3. When all levels are encoded,
following the codeword of total zeros responds to Total_coeffs. In this example, the codeword is
“001”since Total_coeffs = 6 and Total_zeros = 9. Next, the run_before for each level is encoded.
The level (5) is 1, and the neighboring coefficient is level(4)=-2. There are no zeros between level
(5) and level (4), hence the run before=0 for level (5), where Zero_left=Total_zeros. The
codeword is“111”from Table 6. For level (4), we find two zeros between level (4) and level (3).
The Run_before=2 is for level (4) and Zero_leftnext=Zero_left-Run_before=7. With this procedure,
the codeword of run before for each level is generated and the encoding is ended at the level (0).
3. CAVLC Encoder Architecture
From the above mentioned, CAVLC encoder adopts the backward tracking and the each
codeword has a specified sequential order for VLC decoder. We cannot compute the next
codeword when the previous codeword is not be coded. This scheme will be against the parallel
architecture for high-speed systems. In this paper, we develop some decision rules to implement
CAVLC encoder with forward computation for parallel processing. A pipelined architecture is
proposed for high-throughput video system, as shown in Fig. 1. We read two coefficients from the
zig/zag scanning per cycle. For a 44 block, we can compute the parameters, the number of
trailing one, total_coeff, total zeros and the run before for each level, during 8 cycles. At the 9th
cycle, the codeword can be sequentially generated from the coding modular according to H.264
table. The simple sequential generator is used to control the multiplex to output the codeword
of modular in each time slot. The modular of codeword generator includes
Coefftoken/TrailingOnes and its sign, level, total zero, run_before/zero_left. Each module can
output the value and length of each codeword. Finally, we employ a barrel shift and VLC
packer to generate the coding bit-stream.
A. Timing Schedule
For real-time operation, one expect to process a 44 block within 16 cycles. The encoding
processing is split to two-phase pipelined schedule. The first is the parameter computing core and
the second is the VLC codeword generator. The timing schedule is shown in Fig 2(a). Before
encoding the VLC code, the parameters must be obtained and them to be saved the registers.
When generating the VLC codeword for the Nth block, we can compute the parameters for
(N+1)th block. With the pipelined schedule, the 44 block can be done within 16 cycles to meet
the real-time requirement.
Fig. 2(b) shows the timing schedule for the VLC codeword generator from each modular. In
CAVLC encoding, first the VLC codeword of Coefftoken and T1_sign is encoded. Then the
run_before codeword is collected following to each non-zero coefficient level and saved to
registers. The level modular can output one codeword of non-zero coefficient per cycle. We
8s1,s2,s3,s4 =








2_1_1:1111'4
1_1_1:1010,1101,0101'4
0_1:1110,1100,1000,0010'4
_1:0000'4
numTnumTb
numTnumTb
numTb
numTKeepb
. (3)
There are 16 cases due to four inputs. However, only 9 cases are existed. For example, the case
“0011”is impossibly to happen. When the Coefficients are zero, s1~s2=00, s3~4 should be zero
too. The timing schedule is shown in Fig. 5. When one coefficient is 1, the T1_num register is
accumulated with one, where there are three states. The T1_num register is accumulated with two
if two coefficients are1. However, the temporal register T1_num will be reset to zero when the
inputs are not 1 and 0 coefficients, where four states s1~4=0010,1000,1100 and 1110 can be
presented for this case. With this forward tracking scheme, we can trail the number of one at the
8th cycle.
B3. Computation for Total Zeros
The number of total zeros can be determined by the state s1 and s2. The decision function can
be given by the following
s1,s2=


















0Zeros_temp
,Zeros_tempZeros_numZeros_num:b112'
Zeros_temp
,Zeros_tempZeros_numZeros_num:b102'
0Zeros_temp
,1Zeros_tempZeros_numZeros_num:b012'
2pZeros_temZeros_temp:b002'
1
(4)
Fig. 6 shows the timing schedule. The temporal register Zero_num records the number of
zero at the nth cycle. The Zero_temp register counts the number of zero until finding a non-zero
coefficient, and then it is reset to zero. For example, at the first cycle, Zero_temp=1 since
s1~2=10. At the 2nd cycle, the Zero_temp becomes 3 by accumulating 2, where s1~2=00. At the
3rd cycle, s1~s2=01, Zero_num becomes 4 by addition of Zero_num and 1 since Coeff_2 is not
zero. At the same cycle, Zero_temp is reset to zero. With this forward tracking schedule, we
can find the parameter of Total_zero at the 8th cycle.
B4. Computation for Zero Left and Run Before
The parameter Zero_left can be computed by the decision function as
s1,s2=































0_
__
___:11'2
1_
__
___:10'2
0_
1__
___:01'2
1_
1__
___:00'2
tempzeros
leftFstleftSnd
tempzerosleftSndleftFstb
tempzeros
leftFstleftSnd
tempzerosleftSndleftFstb
tempzeros
leftFstleftSnd
tempzerosleftSndleftFstb
tempzeros
leftFstleftSnd
tempzerosleftSndleftFstb
(5)
10
.15,:13,11,9'5
;11,:14,12,10,7'5
;7,:5,4,3,2'5
;4,16:16'5
;7,16:15'5
;8,13:8'5
;15,13:6'5
;5,6:1'5
;1,1:0'5
;))((
;1,14,8:13,11,9'5
;1,13,7:14,12,10,7'5
;0,6,0:5,4,3,2'5













codewordtempcodelengthd
codewordtempcodelengthd
codewordtempcodelengthd
codewordcodelengthd
codewordcodelengthd
codewordcodelengthd
codewordcodelengthd
codewordcodelengthd
codewordcodelengthd
bcastotalcoefftemp
cbad
cbad
cbad
The symbol HDL code with Verilog format can be easily designed for Coeff_token VLC table
when Trailing_one=0. The input Total_coeff corresponds to the codeword value and its length.
We save the codeword and its length to correspond the VLC code. For example, when
trailing_one=0 and total_coeff=6, we can achieve that the codeword value is 15 and the length is
13 bits from the above condition. The corresponding to VLC code of H.264 is 0 0000 0000 1111.
Since the binary of codeword “15”is “1111”, it uses 4 bits. So we have 9-bit zeros since the
length is 13. Alternatively, when total_coeff=2, the code length is temp=total_coeff+6=8, and the
codeword value is 7. The VLC code is 0000 0111. By the same way, we can do the trailing_one
1~3 with the similar method, where the two adders can be commonly used. Moreover, H.264 also
consider the neighboring block whether is zero. With the same procedure, we also can implement
VLC code for 4>nC2~nC8, where nC is the number of non-zero neighboring block.
The VLC table for level can be computed with the simple rules. H.264 had defined five
VLC tables 0~4 for level coding. The thresholds TH1 and TH2 are used to classify the code types,
where TH1 = (7 << VLC_table(n)) + 1 and TH2 = TH1 + 8. The threshold TH1 is controlled
with the nth VLC_table. When VLC_table (1) is used, TH1=15. The parameters, prefix, sufmask
and suffix are computed as
prefix = (|Level| - 1) >> (VLC_table(n)–1)
sufmask = ~{ (all-bit is 1)<<(VLC_table(n)–1) }
suffix = (|Level| - 1) & sufmask , (8)
where “~”, ”|”and “&”is INVERSE, OR and AND operations respectively. For example, when
Level = 3, VLC code is 00001 using VLC_table (0). So we can obtain Sign=0, levellabs=3,
prefix=2 and suffix=0. The code_length=11<<1+sign-1=6-1=5. and the codeword=1. The other
example, Level = -5, VLC code is 00101 using VLC_table (2). We can obtain Sign=1,
levellabs=5, prefix=2 and suffix=0. The code_length=2+2+1=5 and codword=1<<2|0<1|1=101=5.
For hardware implementation, the processing flow can be split to three methods with TH1 and
TH2.
4. IMPLEMENTATION AND COMPARISONS
Base on the proposed architecture, we realize the CAVLC encoder using Verilog HDL [13].
The architecture is designed with module-by-module. The prototype core had been implemented
12
Comparisons with the two architectures, we can improve the processing cycle when keeping low
circuit complexity.
5. CONCLUSIONS
This paper presents a high-throughput CAVLC encoder IP for H.264 system. With parallel
architecture, the circuit can feed two coefficients from the zig/zag scanning buffers per cycle. The
pipelined schedule is split to two phases, which one is the parameter computation and the other is
the codeword generation. With the forward computing approach, the parameters can be found at
the end of coefficient reading, in which we do not need the inverse scanning cycle. The forward
tracking method can reduce the temporal registers, the coding cycle and the latency time. All
Coeff_token codewords are generated with the simple formula rather than ROM table to reduce
the number of registers, where only two adders are commonly used for all VLC codeword. The
CAVLC IP can encode one codeword per cycle and its throughput rate can achieve about 110M
words per second when implemented with 0.35um CMOS technology.
REFERENCES
[1] ITU-T Rec. H.264/ISO/IEC14496-10AVC,”Advanced Video Coding“,May, 2003.
[2] ISO/IEC DIS 13818-2, MPEG-2 video coder.
[3] G. Cote, B. Erol and F. Kossentini,” H.263+: video coding at low bit-rate”, IEEE Trans. Circuits
Syst. Video Technol., vol. 8, no.7, pp.849-866, Nov. 1998.
[4] Y.W. Huang, B.Y. Hsieh, T. C. Chen, and L. G. Chen, “Analysis, fast algorithm and VLSI
architecture design for H.264 Intra frame coder”, IEEE Trans. Circuits and Systems Video
Technology, vol. 15, no.3, pp. 378-400, March, 2005.
[5] L. Yang, K. Yu, J. Li, and S. Li, ”An effective variable block-size early termination algorithm
for H.264 vdeo coding”, IEEE Trans. Circuits and Systems Video Technology, vol. 15, no.6, pp.
784-788, June, 2005.
[6] F. Pan, X. Lin, S. Rahardja, K. P. Lim, Z. G. Li, D. Wu, and S. Wu, ”Fast mode decision
algorithm for intraprediction in H.264/AVC video coding”, IEEE Trans. Circuits and Systems
Video Technology, vol. 15, no.7, pp. 813-822, July, 2005.
[7] C.W. Ku, C.C. Cheng, G.S. Yu, M.C. Tsai, and T.S. Chang, “ A high-definitionH.264/AVC
intra-frame codec IP for digital video and still camera applications”, IEEE Trans. Circuits and
Systems Video Technology, vol. 16, no.8, pp. 917-928, Aug., 2006.
14
Fig. 1 Architecture of CAVLC encoder
Fig. 2(a) The timing schedule of the parameter computing core and codeword generator
Fig. 2(b) CAVLC encoding schedule with NC+4 cycles
16
Fig. 6 The computational schedule for Total_zeros
Fig. 7 The forward tracking for computing Zero_left and Run_before
表 Y04
報告內容應包括下列各項：一
一、參加會議經過
8/2 搭國泰航空飛至香港
8/3 搭國泰航空由香港飛至英國倫敦
8/4 搭車至愛丁堡
8/5~8 註冊及參加研討會
8/9 搭車至倫敦
8/10~11 搭國泰航空飛至香港轉機回國
二、與會心得
國際調適性硬体與系統研討會 NASA/ESA Conference Adaptive Hardware
and Systems (AHS-2007)是歐洲每年舉辦國際研討會, 今年在有深厚歷史背景的
英國愛丁堡舉行 4天。研討會相關的研究人員來自世界各地，但台灣學者只有我一人，
研究領域主要在系統可調適性設計。其中概括分成幾大領域:(1)可調適性無線感測器
設計，包括 multi-objective reconfiguration, time optimization wireless sensor
applications, security problem 方面研究; (2) 多媒體 IP 適性設計: 包括
reconfigurable architecture for multimedia framework, deblocking, motion
estimation 及 mode decision for H.264 system 元件設計; (3) 可調適性通訊電路設
計: 包括 reconfigurable FFT, FIR architecture, Ultra wideband reconfiguration,
embedded reconfiguration system; (4) 調適性信號處理: A/D conversion,
multi-purpose optical detection, facial image model, DWT embolic detection. (5)
調適性空間應用: Reed-Solomon FPGA-area optimization, fault tolerat memory
system, enhancement reconfigurable system-on-chip, (6)高效率調適計算: 包括。
FGPA based alliance parallel toolkit, 64 FGPA supercomputer, FGPA-based C-to
VHDL complier. (7) 調適性類比電路: analog array adaptive circuit,
neruomorphic sensor, software radio. 在此會議中個人在多媒體 IP 適性設計中,發
表一篇過去的研究成果，設計一個在 H/264 編碼中模式決定之可結構式設計，不管在速
度或複雜度皆優於過去論文，並得到不錯的回應。此論文已登載在會議論文集笫 146-152
頁。未來打算把此篇論文作更有系統修改後，投搞期刊論文。本次會議最大收獲是能了
解目前國外在調適性硬体發展趨勢及研究情況，並認識相關領域的教授及工程師，增
加視野寬度及吸收別人長處，將來有助於個人在研究及教學上作參考。
三、考察參觀活動(無是項活動者省略)
參觀愛丁堡古城附近風景
四、建議
無
五、攜回資料名稱及內容 : NASA/ESA Conference Adaptive Hardware and Systems
(AHS-2007)Proceeding 一本。
六、其他
表 Y04
行政院國家科學委員會補助國內專家學者出席國際學術會議報告
96 年 8 月 28 日
報告人姓名
夏世昌
服務機構
及職稱
國立高雄第一科技大學 電資所
教授
時間
會議
地點
2007/8/5~8
英國 愛丁堡
本會核定
補助文號
會議
名稱
(中文) 2007國際調適性硬体與系統研討會
(英文) NASA/ESA Conference Adaptive Hardware and Systems
(AHS-2007)
發表
論文
題目
(中文) H/264 編碼中模式決定之可結構式設計
(英文) A Configurable IP for Mode Decision of H.264/AVC Encoder
附
件
三
