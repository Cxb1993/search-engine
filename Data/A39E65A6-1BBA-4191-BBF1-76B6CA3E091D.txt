 2
voltage levels alternatively during program execution, 
static power consumption of cache can be reduced. 
Most previous DVS studies have focused on 
proposing individual power management approach for 
single hardware component. For example, [6] focused 
on lower-power instruction cache design, [4] [5] 
focused on power-aware register file design, and so on. 
However, it is almost impossible to integrate most of 
them into a single processor chip for more than one 
component’s power management. In addition, some of 
approaches may conflict or affect each other. For 
example, [8] proposed an approach to monitor if 
subsequent instructions in ROB will redefine the 
destination registers of previous instructions in ROB. If 
this is the case, the previous instruction need not 
commit its value to destination register, and we can put 
the destination register to low-voltage mode until 
subsequent instructions ready to commit. This approach 
can save most power consumption in register file. 
However, [7] proposed an approach to dynamically 
allocate appropriate activate sizes of ROB when the 
code sections are executed repeatedly results in the 
window size to observe if there is a subsequent 
instruction, which will redefine destination register of 
previous instructions, in ROB also becomes small. 
In this project, we propose a simultaneous power 
management approach which can concurrently manage 
the power consumptions of more-than-one components 
through a common detection and control logic. During 
program execution, we found that there are some basic 
blocks frequently appeared. (We call such codes the hot 
basic blocks.) The repeated executions of these hot 
basic blocks always require the same hardware 
resources. Therefore, if we have common detection 
logic to identify where these hot basic blocks are and 
how many hardware resources they required, we can 
manage their resource usages via DVS controls in the 
next time. We first focus on the hardware components 
of register file and instruction cache to involve into 
simultaneous power management in this project. 
 
3. Simultaneous Power Management for 
Instruction cache and Register File Design 
In this section, we will present the detail 
design of the simultaneous power management 
approach for register file and instruction cache. In 
section 3.1, we will give an overview for our 
approach. In section 3.2~3.4, we will show the 
implementations of the hot basic block detector, 
resource collector, and resource allocator, 
respectively. Finally in section 3.5, we will show 
overall of our approach by flow chart. 
 
3.1 Delayed register allocation 
 
Fig. 1 shows implementation of our approach 
within the pipeline data path. In Fig. 1, hot basic block 
detector exploits BTB to identify different basic blocks 
and records execution times of each basic block. When 
execute times of executed basic block reaches the 
candidate threshold, hot basic block detector will set 
collection signals to RF and I-cache resource collectors 
for resource collection. Resource collector will start to 
collect used registers and used cache lines at next cycle. 
The RF and I-cache resource collectors then record 
those ever-used resources into the specific registers. 
When a hot basic block is detected, hot basic block 
detector sets the hot signals to RF and I-cache resource 
allocators to allocate resources by power down un-used 
registers and cache lines. The RF and I-cache power 
controllers will recover those hardware’s supply 
voltages when the execution leaves hot basic block. 
Note that the power controllers must apply DVS at the 
Decode stage. This is because activating the DVS needs 
one cycle delay [3] to power up/down the hardware. 
Fig. 1 Implementation with pipeline data path 
 4
3.4 Simultaneous resource allocation 
In this section, we show the implementation 
of resource allocations for the RF and I-cache, as 
shown in Fig. 5 and Fig. 6, respectively.  
In Fig. 5, power line of each register has two 
voltages (1 Volt, and 0.3 Volts) to select. If the 
“hot” signal is set, the supply voltage of each 
register is set to 1V (active mode) or 0.3V (drowsy 
mode) according to the value of related bit in 
PSRRF. If “hot” signal is not set, the supply voltage 
of each register is set to 1V (active mode). The 
“AND” gate at the word line is used to prevent 
from the access to a drowsy register until this 
drowsy register becomes active register. The “OR” 
gate and “Tri-state” is used to update the PSRRF 
right away to make the drowsy register can be 
accessed at next cycle when “hot” is set and a 
drowsy register is accessed. 
In Fig. 6, the I-cache resource allocation is 
similar to the RF resource allocation. 
 
 
Fig. 5 Resource allocation for RF 
 
 
Fig. 6 Resource allocation for I-cache 
3.5 Overall of our approach 
 
Fig. 7 shows flow chart of our approach. 
When the program start, the processor obtains the 
basic block which is ready to be executed and 
counts the execution times of this basic block in 
BBB. If the execution times of this basic block is 
equal to Candidate threshold, the resource collector 
collects resource usages of this basic block. If the 
execution times of this basic block is large than 
Candidate threshold, the resource allocator follows 
collected resource usages to power down un-used 
resources. If the execution times of this basic block 
is smaller than Candidate threshold, the resource 
allocator power up all drowsy resources. When the 
processor executes a branch instruction, the branch 
counter increase. If the value of branch counter is 
equal to Clear interval, all entries of BBB, PSR 
and branch counter will be cleared. The above 
operations are repeated until the processor finishes 
all basic blocks. 
 
 
Fig. 7 Flow chart of our approach 
 
 
 
 6
is dominated by energy consumption; the effect of 
execution time with performance penalty is 
insignificant. 
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
apsi art equake mgrid swim bzip2 gcc gzip mcf parser
benchmark
En
er
gy
 *
 D
el
ay
our
approach
 
Fig. 11 Energy-Delay Product (EDP) 
 
Reference： 
[1] Kim, et al. , “Leakage current: Moore’s law 
meets static power,” Computer, Vol. 36, pp. 
68-75, Dec 2003 
[2] Bai, R., etal., “An implementation of a 32-bit 
ARM processor using dual power supplies and 
dual threshold voltages,” Proceedings of IEEE 
Society Annual Symposium on VLSI, pp. 
149-154, Feb 2003 
[3] K. Flautner, et al., “Drowsy Caches: Simple 
Techniques for Reducing Leakage Power,” 
Proceedings of the 29th ISCA, pp. 148-157, 
May 2002. 
[4] Ayala, J. L., et al., “Energy Aware Register File 
Implementation through Instruction 
Predecode,” Proceedings of 
Application-Specific Systems, Architectures 
and Processors, pp. 86-96, June 2003. 
[5] Wann-Yun Shieh, and Chien-Chen Chen, 
“Exploiting Registers-usage for Saving 
Register-file Energy in Embedded Processors,” 
Lecture Notes in Computer Science, pp. 37-46, 
Dec 2005. 
[6] Nam S. Kim, et al., “Drowsy Instruction Cache: 
Leakage Power Reduction Using Dynamic 
Voltage Scaling and Cache Sub-bank 
Prediction,” Microarchitecture (MICRO-35), 
pp. 219-230, Nov 2002. 
[7] Iyer, A., Marculescu, D., “Power aware 
microarchitecture resource scaling,” 
Proceedings on Design, Automation and Test 
in Europe, pp. 190-196, March 2001. 
[8] Wann-Yun Shieh, and Hsin-Dar Chen, “Saving 
Register-file Leakage Power By Monitoring 
Instruction Sequence in ROB,” Lecture Notes 
in Computer Science, Vol. 4097, pp. 765-774, 
Aug 2006. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
