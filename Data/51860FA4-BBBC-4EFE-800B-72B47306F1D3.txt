2009/2/27 
泛用型多媒體遊戲控制器之驅動程式產生器 
計劃編號： NSC 96-2622-E-218-012-CC3 
執行期間：民國 96 年 11 月 1 日～民國 94 年 10 月 31 日 
計劃主持人：王立洋 
執行機關：南台科技大學電子工程系 
參與人員：陳昭志 陳威廷 紀孫曜 劉信忠 陳柏綱 謝孟霖 洪奕睿     
南台科技大學電子工程系 
 
摘要 
本計畫之目的在於研究以 USB 為連線介
面之泛用型之 PC 遊戲搖桿之應用軟體支援。
利用設計驅動程式來結合支援 Directinput 與
Xinput 之兩種多媒體應用程式開發方式，依照
遊玩遊戲之不同，來產生相對應之驅動介面，
使其可運用之遊戲層面不限於 PC 遊戲，也可
相容於 X-box 360 系列之遊戲介面。 
關鍵詞: 驅動程式、DirectInput、XInput 
Abstract 
This project aims at developing a 
general purpose software support for 
USB-based PC joysticks.  We try to 
develop a driver to support both 
Directinput and Xinput–based application 
programs, so that users can choose to play 
games from different vendors.  
Keywords: driver, DirectInput, XInput 
前言 
自從電腦遊戲程式發展推出後，隨著科技的
進步，電玩遊戲開始進入了人類的生活，在電
腦遊戲的發展領域中，遊戲的類型愈來愈豐富
多樣化，同時也發展出許多不同的遊戲主機，
如：SEGA SATURN、Play Station 2、Wii 、X-Box 
360 以及 Play Station 3 等等。其中為了因應不
同的遊戲主機，也發展出許多特別的操控硬體
周邊，如：搖桿、遊戲手套、電子樂器以及力
回饋方向盤等等，因此可看出遊戲內容與遊戲
控制介面之間密不可分的關係。此外在個人電
腦方面，早期傳統的電腦作業平台上的遊戲是
使用鍵盤與滑鼠來操控，近年來由於電腦以
USB 通訊為介面技術快速發展，導致 USB 介
面已是電腦主機周邊裝置與消費性電子的最主
要的介面。 
1 USB 通訊架構 
在 USB 協定中，所謂的通訊指的是 USB 裝
置與 USB 主機之間的通訊，USB 通訊可以分
為二大類，一類是用來設定 USB 裝置的組態，
另一類用來設定應用程式的通訊。藉由設定裝
置組態的通訊，可以讓主機了解裝置的功能並
準備與它交換資料，此時大部分的通訊都是發
生在開機或者連接裝置時搜尋的過程。應用程
式的通訊則是發生在主機與應用程式之間的資
料交換，也就是執行裝置原始設計的函式。例
如鍵盤的應用程式，就是傳送按鍵碼給主機，
然後告訴應用程式顯示該按鍵字元。在實體上
匯流排透過一條實體的纜線來與主機通訊，在
邏輯上，主機給予每一個所連接上的裝置提供
一個邏輯的連接，且每一個裝置都有端點對端
點的連接。如圖一所示，表示出 USB 裝置與
USB 主機通訊的邏輯結構與每一層的邏輯通
道。其中，USB 將通訊邏輯劃分成三層：信號
層、協定層與資料傳輸層： 
 
（1）信號層：在 USB 裝置與主 機的實體
連接之間所傳輸的位元資料流，並以 +D 與 _D
差動資料引來傳輸，這位視資料串流稱之為「封
包」。 
（2）協定層：在 USB 裝置與主機協定軟體
2009/2/27 
 Direct3D（簡稱 D3D）用於繪製 3D 圖形。 
z DirectInput 用於結合鍵盤、滑鼠、搖桿，或
其它的遊戲控制器。 
z DirectPlay 用於網路遊戲連線溝通。 
z DirectSound 用於錄音，並且記錄波形音效。 
DirectSound3D（簡稱 DS3D）：用於 3D 音
效的錄音。 
z Direct Music：用於 DirectMusic Producer 的
錄音。 
z DirectX Media： 
DirectAnimation 可用於 2D 的網頁動畫。 
DirectShow 可支援多媒體錄音以及資料流
媒體。 
z DirectX Media Objects：支援資料流物件，
像是編碼、解碼以及效果。 
z DirectSetup：用於 DirectX 元件的安裝。 
透過這些 API 的設計可以直接與連結於電
腦上的硬體裝置進行溝通。如果每個硬體裝置
配置了 DirectX 的驅動程式的話，我們就可以
讀取該裝置提供的加速功能，如果加速功能不
在的話，DirectX 可以模擬這些效果。 
目前 DirectX 的版本更新速度很快，DirectX
會隨著不同的視窗作業系統而更新版本，每一
個版本都有增加一些新功能，並改善舊版本的
缺點。 
3 DirectInput 與 X-Input 
3.1 DirectInput 簡介 
DirectInput 是負責與輸入裝置溝通的元
件，包含鍵盤、滑鼠、搖桿等等，都在它的涵
蓋範圍內，一般程式設計人員會在遊戲中利用
DirectInput 來對輸入裝置做資料的讀取，例如
常見的遊戲控制器就是屬於輸入裝置的一種，
它不但能夠輸入資料，還可以針對特定遊戲產
生特定效果。這些類型的裝置裡面都搭載了振
動馬達，來反應遊戲過程中的一些力回饋效
果，而這些裝置的振動馬達往往都有著不同的
振動強度以及振動範圍特性，這些都是屬於硬
體設計人員在開發設計硬體時所決定的硬體規
格。如果要控制這類裝置的振動馬達，就必須
要塞設計控制馬達振動的驅動程式。圖三為
DirectInput 在作業系統上與裝置架構。 
 
 
圖三：DirectInput 裝置架構 
 
3.2 X-Input 簡介 
X-Input 是微軟新推出的一組遊戲裝置介面
(Application Programming Interface)。X-Input
是在包涵在 DirectX 9.0 以後的版本，它主要是
應用在 XBox-360 的遊戲控制器上。當
XBox-360 遊戲控制器要在 Windows 上使用
時，必須安裝具有 X-Input 驅動程式，才能在
Windows 上操作使用。在電玩遊戲方面，自從
Xbox-360、DirectX 9.0 與 DirectX 10.x 推出後，
愈來愈多的電玩遊戲朝著這些的規範去開發與
設計。根據微軟的官方網站說法，X-Input 對於
遊戲裝置的支援最多可以達到 6 軸 32 鍵，因此
對於遊戲軟體與硬體公司而言，可以自行去開
發設計遊戲以及相對應的遊戲控制器。使用
X-Input 相較於 DirectInput 有幾個優點： 
(1) 與 DirectInput 相比較，X-Input 更易於
使用並且需要較少的安裝。 
(2) 在 XBox-360 與 Windows 的編程上是使
用相同核心的 API，允許跨平台編程。 
(3) 在 X-Input 的設備裝置中具有振動功
能，但必須使用 X-Input API。 
(4) 未來支援 X-Input 的遊戲控制也能夠在
2009/2/27 
傳送信號進入 PC 端，當 PC 端接收資料後會經
由 DirectInput 與 XInput 分別建立一硬體資料
與使用者資料，再依照使用者所遊玩之遊戲來傳
送相對應之訊號。 
使用者輸入控制信號，經 USB 傳送至 PC 
端，此時 PC 會依照先前建立之硬體資料與實用
者資料來轉換控制信號，成為 Game 資料，達
到控制 Game 之目的。又運用觸控版來代替類
比輸入端，即可在原本功能（如：移動）上，增
加新型的輸入功能（如：繪圖）使設計上增加許
多功能與玩法。 
 
 
參考文獻 
[1]  USB Implementers Forum, “Universal 
Serial Bus Specification,” Revision 1.1, 
1998 available at http://www.usb.org. 
[2]  USB Implementers Forum, “Device Class 
Definition for Human Interface Devices ” 
Revision 1.1, 1999 available at 
http://www.usb.org. 
[3]  MICROSOFT. Windows Hardware 
Developer Central. 
http://www.microsoft.com/taiwan/whdc/D
evTools/WDK/default.mspx. 
[4]  MICROSOFT. Direct SDK. 
http://msdn.microsoft.com/archive/default
.asp?url=/archive/en-us/directx9_c_Dec_2
005/directx_sdk_input.asp. 
[5]  Microsoft Developer Network . “XInput 
and DirectInput”. 
http://msdn2.microsoft.com/en-US/library
/bb173051.aspx 
[6]  Qing-Li Zhang, Ming-Yuan Zhu and 
Shuo-Ying Chen, “Technical 
correspondence: Automatic generation of 
device drivers,” ACM SIGPLAN Notices, 
Vol. 38, Issue 6, pp. 60-69, June 2003. 
[7]  S.A. Thibault, R. Marlet, C. Consel, 
“Domain-specific languages: from design 
to implementation application to video 
device drivers generation,” Software 
Engineering, IEEE Transactions on , Vol. 
25, Issue 3, pp. 363-377, May-June 1999. 
[8]  M. O'Nils, J. Oberg, A. Jantsch, 
“Grammar based modelling and synthesis 
of device drivers and bus interfaces,” 
Euromicro Conference, 1998. Proceedings. 
24th, Vol. 1, pp. 55-58, Aug. 1998. 
[9]  J. Oberg, A. Kumar, A. Hemani, 
“Grammar-based hardware synthesis of 
data communication protocols,” System 
Synthesis, 1996. Proceedings., 9th 
International Symposium on, pp. 14-19, 
Nov. 1996. 
[10]  Shaojie Wang, S. Malik, R.A. 
Bergamaschi, “Modeling and integration 
of peripheral devices in embedded 
systems,” Design, Automation and Test in 
Europe Conference and Exhibition, 
2003 , pp. 136-141, 2003. 
[11]  Christopher L. Conway, Stephen A. 
Edwards, “NDL: a domain-specific 
language for device drivers,” ACM 
SIGPLAN Notices , Proceedings of the 
2004 ACM SIGPLAN/SIGBED conference 
on Languages, compilers, and tools, Vol. 
39, Issue 7, pp. 30-36, June 2004. 
[12]  M. O'Nils, A. Jantsch, “Operating system 
sensitive device driver synthesis from 
implementation independent protocol 
specification,” Design, Automation and 
Test in Europe Conference and Exhibition 
1999. Proceedings, pp. 562-567, March 
1999.   
[13]  T. Katayama, K. Saisho, A. Fukuda, 
“Proposal of a support system for device 
driver generation,” Software Engineering 
Conference, 1999. (APSEC '99) 
