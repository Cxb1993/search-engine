                1 
 
   
  行政院國家科學委員會專題研究計畫  
   
 
嵌入式系統之特定應用架構研究(II)  
研究成果報告(精簡版)  
 
 
    
計畫類別： 
 
個別型 
計畫編號： NSC99-2221-E-035-104 
執行期間： 99年 08月 01日至 100年 07月 31日 
執行單位： 逢甲大學資訊工程學系（所） 
   
計畫主持人： 王益文 
共同主持人： 陳德生 
計畫參與人
員： 
碩士班研究生-兼任助理人員：吳俊雄 
碩士班研究生-兼任助理人員：陳俊霖 
碩士班研究生-兼任助理人員：林炘毅 
碩士班研究生-兼任助理人員：黃曼玲 
大專生-兼任助理人員：余永暉 
博士班研究生-兼任助理人員：洪秋韻 
 
   
備註： 本計畫可公開查詢 
中 華 民 國 100 年 10 月 31 日  
   
 
 
 
  
                3 
研究目的 
Embedded systems present a tremendous opportunity to customize designs by exploiting the 
application behavior. Shrinking time-to-market, coupled with short product lifetimes create a critical need 
for rapid exploration and evaluation of candidate Application Specific Architecture (ASA). Application 
Specific Instruction-set Processors (ASIPs) [6-20] have been demonstrated as an efficient solution as one of 
the most promising components for SoC design by extending simple RISC processors with custom units. 
System architects critically need tools, techniques, and methodologies to perform rapid architectural 
exploration for a given set of applications to meet the diverse requirements, such as better performance, low 
power, smaller silicon area etc.  
Among the best known examples of extensible ASIPs are CoWare [1], Tensilica Xtensa [2] and Altera 
Nios/Nios II [3], and some levels of customizability have also been added on traditional well-established 
architectures such as MIPS CorExtend [4] or PowerPC APUs [5]. The research community has expended a 
considerable amount of effort in the ASIP area for almost a decade. The issues involved in the ASIP design 
were surveyed in [6]. The ASIP architecture and the compiler co-exploration problem are addressed in [7]. 
The focus of this project is to customize a set of applications along with all aspects of a hardware 
architecture such as the datapath, control path, instruction set, interconnect, and instruction/data memory 
subsystems to achieve the balance among performance, energy, and flexibility as well as to reduce both cost 
and complexity of implementations. 
 
文獻探討 
Existing approaches attempt to discover the candidate application specific instructions by exploiting the 
observation that recurring subgraphs frequently exist in the dataflow graphs (DFG) of applications, and then 
to select an appropriate subset of the candidate instructions to maximize performance under certain 
architectural constraints (e.g., the number of input and output operands, area constraints, etc.). By 
implementing these frequently occurring subgraphs in hardware as instructions, performance improves, code 
size decreases, and energy consumption is reduced. In template generation, most approaches use the number 
of I/O ports of the register file to constrain the set of subgraphs that can be enumerated [8]–[14]. In 
candidate selection, the problem of individual templates appeared in multiple candidates make selection 
more difficult. Selecting candidates with a given area constraint is similar to the 0/1 knapsack problem [15]. 
It is widely known that the 0/1 knapsack problem is NP-complete. Strategies are needed to avoid 
intractability in this step for design automation. 
Most prior techniques for ASI generation use the number of I/O ports of the register file to constrain the 
set of subgraphs that can be enumerated; this yielded effective pruning criteria that reduced the size of the 
search space for ASI identification. Although the existing techniques are efficient in identifying the 
promising candidate instructions, [16] points out that most of the speedup (about 60%) comes from the 
cluster with more than two input operands. This exceeds the number of read ports available on the register 
ﬁle of a typical embedded RISC processor core. Strictly following the two-input single-output constraint, 
generally leads to small clusters with limited speedup.  
Generation of larger clusters with extra inputs is allowed in [17] by using the custom-defined state 
registers to store the additional operands. Unfortunately, at least one extra cycle is needed for each additional 
input to be loaded into a custom-defined state register. The communication overhead incurred because of 
these data transfers between the core processor, and the custom logic can significantly offset the gain from 
forming a large cluster. A multi-ported register file can increase the data bandwidth. However, additional 
read and write ports result in power consumption and cycle time. The Tensilica Xtensa uses state registers to 
explicitly move additional input and output operands between the base processor and custom units. Clever 
binding of base processor registers to state registers at compile time reduces the number of data transfers. In 
addition, state register approach solves the problem of encoding many operands within a fixed length 
instruction word. Cong et al. [18] have presented a hash-mapped low-cost architectural extension and 
associated internal register binding compilation techniques to efficiently reduce the communication 
                5 
 
Figure 3. The ASI generation process in our design flow 
The correctness of the resultant program must be guaranteed during replacing the matched subgraph 
with a ASI. To ensure correctness of the program, the ASI must be placed after all the predecessors of the 
operations in the subgraph and also before all the successors. Assuming the node identifiers define the 
sequential order of the assembly code, there is a potential problem with where to place the ASI. The 
assembly code is reorganized prior to subgraph replacement. For every subgraph match, if the last 
predecessor comes after any successors, then those successors and any operations dependent on them are 
moved after the last predecessor. 
Once the subgraphs are replaced and the code is reordered for correctness, scheduling and register 
allocation take place to intelligently utilize the available AFUs. The primitive and application-specific 
instructions inside one basic block are ordered according to the instruction scheduling as shown in Fig. 4 (a). 
Fig. 4(b) shows a DFG example annotated with a sequence number for each instruction. Fig. 4 (c) shows a 
possible way to implement the ASIs. Suppose the register file has only two read ports, and all ASIs have 
more than two input operands, then one move ext_Rin instruction in cycle 2 will be required for instruction I2 
and one move ext_Rin in cycle 5 will be required for instruction I4 and one move ext_Rin instruction in cycle 
9 will be required for instruction I6. Similarly, one more move ext_Rout instruction in cycle 7 will be required 
for instruction I4. 
 
            (a)         (b)             (c) 
Fig. 4 (a) Assembly code. (b) The DFG of (a). (c) The implementation of ASIs. 
 
                7 
 
             (a)                         (b)                            (c) 
Fig. 7 (a) The post improvement assembly code. (b) The DFG of (a). (c) Implementation of ASIs. 
 
結果與討論 
We evaluate our technique using Altera Nios II DE2-70 to estimate cycle counts, and hardware synthesis 
for exact timing and area information. The base register file supports two read ports and a single write port. 
We generate implicit registers for each application-specific instructions and move instructions that provide 
single cycle latency transfers between base register file and custom logic.  
We apply our algorithms on five benchmarks: MM, Qsort, Dijkstra, SHA and AES form Mibench[20] 
and MP3[21]. Relaxation of input/output constraints results in coarser gain application-specific instructions 
(i.e., larger dataflow subgraphs). Such ASIs often offer higher speedup at the expense of higher area. In Fig. 
8, we study the improvement in speedup using additional data transfers post improvement after implicit 
register allocation. Up to 3.33x speedup is reachable given 2 read and single write ports. 
 
Fig. 8 Speedup improves with implicit registers comparison 
Table I summarizes the hardware area for each generated ASIP. Table I shows that up to 20 % area 
overhead of the customized designs can obtain 3.33x speedup. 
 
TABLE I HARDWARE AREA 
  
Our approach is based on a heuristic algorithm that integrates the data bandwidth information into the ASI 
identification process.  For an embedded processor with GPRF only two read ports and one write port, our 
methodology can minimize the potential additional data transfer instructions to achieve the performance up 
to 3.33x speedup with only 20% area overhead. The Altera Nios II is used as a base processor on the 
DE2-70 board to demonstrate the correctness and feasibility of the proposed approach.  We are now 
investigating a wide range of applications involving speed, area and power consumption trade-offs. 
 
                9 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。 
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
達成目標 
□ 未達成目標（請說明，以 100字為限） 
□ 實驗失敗 
□ 因故實驗中斷 
□ 其他原因 
說明： 
 
 
 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：□已發表 □未發表之文稿 撰寫中 □無 
專利：□已獲得 □申請中 無 
技轉：□已技轉 □洽談中 無 
其他：（以 100字為限） 
 
 
 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500字為限） 
This is an innovative project, which was not considered in prior work. This project 
provided a view of the future of the most promising SoC design approaches, and 
demonstrates how novel application-specific architectural exploration concepts 
may be advantageously used in a leading edge computing system.  The SoC or 
VLSI design engineers were trained with the best analysis and design capability. 
 
 
 
 
 
 
II. RELATED WORK 
Existing approaches attempt to discover the candidate 
application specific instructions by exploiting the observation 
that recurring subgraphs frequently exist in the dataflow graphs 
(DFG) of applications, and then to select an appropriate subset 
of the candidate instructions to maximize performance under 
certain architectural constraints (e.g., the number of input and 
output operands, area constraints, etc.). By implementing these 
frequently occurring subgraphs in hardware as instructions, 
performance improves, code size decreases, and energy 
consumption is reduced. In template generation, most 
approaches use the number of I/O ports of the register file to 
constrain the set of subgraphs that can be enumerated [8]–[14]. 
In candidate selection, the problem of individual templates 
appeared in multiple candidates make selection more difficult. 
Selecting candidates with a given area constraint is similar to 
the 0/1 knapsack problem [15]. It is widely known that the 0/1 
knapsack problem is NP-complete. Strategies ar e needed to 
avoid intractability in this step for design automation. 
Most prior techniques for ASI generation use the number of 
I/O ports of the register file to constrain the set of subgraphs 
that can be enumerated; this yielded effective pruning criteria 
that reduced the size of the search space for ASI identification. 
Although the existing techniques are efficient in identifying the 
promising candidate instructions, [16] points out that most of 
the speedup (about 60%) comes from the cluster with more than 
two input operands. This exceeds the number of read ports 
available on the register f le of a typical embedded RISC 
processor core. Strictly following the two-input single-output 
constraint, generally leads to small clusters with limited 
speedup.  
Generation of larger clusters with extra inputs is allowed in 
[17] by using the custom-defined state registers to store the 
additional operands. Unfortunately, at least one extra cycle is 
needed for each additional input to be loaded into a 
custom-defined state register. The communication overhead 
incurred because of these data transfers between the core 
processor, and the custom logic can significantly offset the gain 
from forming a large cluster. A multi-ported register file can 
increase the data bandwidth. However, additional read and 
write ports result in power consumption and cycle time. The 
Tensilica Xtensa uses state registers to explicitly move 
additional input and output operands between the base 
processor and custom units. Clever binding of base processor 
registers to state registers at compile time reduces the number 
of data transfers. In addition, state register approach solves the 
problem of encoding many operands within a fixed length 
instruction word. Cong et al. [18] have presented a 
hash-mapped low-cost architectural extension and associated 
internal register binding compilation techniques to efficiently 
reduce the communication overhead due to data transfers 
between the core processor and the AFU. However, extra hash 
table increases AFU area overhead. Pozzi et al. [19] reduce the 
data transfer overhead by overlapping execution cycles with 
data transfer cycles for pipelined multi-cycle ASIs. 
We integrate the data bandwidth information directly into 
the optimization process, and we explicitly account for the cost 
of the data tran sfers between base register file and custom 
implicit registers as par t of the optimization. Since our 
formulation can take advantage of the increased data bandwidth, 
the approach of Pozzi et al. [19] can be combined with ours to 
further improve the performance of multi-cycle ASIs. 
III. THE OVERALL DESIGN FLOW 
The Altera Ni osII is selected as a base processor to 
implement the target ASIP but not limited to th is specific 
architecture.  T he input of t he proposed design flow is 
application specific programs in C code. The gcc tool chain is 
used to obtain the profiling information for each basic block in 
the application programs which is corresponded to the 
occurrence of each p rimitive base processor assembly 
instruction. Therefore, the control/data flow graphs (CDFGs) 
of the entire application program are generated for the analysis 
of the data dependencies among the primitive instructions. 
The subgraphs of the CDFGs are enumerated as ASI 
templates and then the structural equivalent templates within 
isomorphism classes will be grouped as ASI candidates.   For 
each ASI c andidate, the corresponding behavioral hardware 
descriptions are im plemented in Verilog  as well as be 
synthesized via Altera Quartus II and SOPC builder to estimate 
the hardware area cost. 
The most profitable candidates will be selected according to 
the proposed heuristic algorithm to balance the time-area 
design constraints. The selected ASI candidates will be used to 
conduct the graph covering on the CDFGs based on a proposed 
heuristic algorithm. The matching code segments on the 
CDFGs will be replaced with new o pcodes representing the 
ASIs. 
Once the most profitable candidates are selected, we replace 
the matching code segments with an opcode representing the 
new instruction. Finally, the ASIP and the corresponding 
application codes with ASIs are verified on the Altera DE2-70 
board to demonstrate the correctness and performance of the 
proposed approach.  Fig. 2 depicts our design flow. 
 
Fig. 2.  The proposed design flow. 
 
 
 
 
      (a)                                (b)                                         (c) 
Fig. 4 (a) Assembly code. (b) The DFG of (a). (c) The 
implementation of ASIs. 
 
As mentioned earlier, i f the operand number of an ASI 
exceeds the available read port count, extra data transfer (or 
ext_Rin) instructions are needed to copy operands from the base 
register file to the implicit register in the cu stom logic. In our 
proposed approach, if an o perand is alread y in the im plicit 
register, one move instruction can be saved. 
The usage interval (ui) between primitive and ASI 
instructions is derived to record the implicit register usage. If 
variable r is assigned within the same basic block of the subject 
use, then the usage interval [p,c], where the sequence number 
of the assignment instruction is p and the sequence number of 
the use instruction is c as shown in Fig. 5.  
 
       
             (a)                                  (b) 
Fig. 5 (a) the DFG of assembly code. (b) The usage interval. 
 
We propose a heuristic implicit register allocation algorithm. 
All ASIs will be sorted according to the decreasing sequence 
number. For the example in Fig. 5(a), the larg est sequence 
number of ASI is I6, if the I(I6) exceeds the number of base 
register file port, then we will check if any input operand I(I6) is 
the output operand from previous ASI. Thus, the ui[4,6] will 
occupy an implicit register (Ireg). The number of input 
operands of I6 becomes three, still larger than Nin. Next, the 
ui[3,6] will occupy an Ireg, however Ireg0 is occupied by other 
usage interval. The Ireg1 will be allocated for ui[3,6].   
Subsequently, the ui[1,4] of instruction I4 will be checked if 
it is overlapped with ui[4,6] of Ireg0. Since ui[1,4] and ui[4,6] 
are not overlapped, the Ireg0 will be allocated to ui[1,4].  Then, 
all input operands of instruction I2 are ready. The final result of 
the implicit register allocation is shown in Fig. 6. 
 
 
Fig. 6 Implicit register allocation result 
 
After implicit register allocation, the number of additional 
data transfer can be reduced by reusing the operands between 
ASIs. Fig. 7(c) shows the input and output operands post 
improvement after implicit register allocation.  
 
           (a)                         (b)                                    (c) 
Fig. 7 (a) The post improvement assembly code. (b) The DFG of (a).  
(c) Implementation of ASIs. 
V. EXPERIMENTAL RESULTS 
We evaluate our technique using Altera Nios II DE2-70 to 
estimate cycle counts, and hardware synthesis for exact timing 
and area information. The base register file supports two read 
ports and a single write port. We generate implicit registers for 
each application-specific instructions and move instructions 
that provide single cycle latency transfers between base register 
file and custom logic.  
We apply our algorithms on five benchmarks: MM, Qsort, 
Dijkstra, SHA and AES form Mibench[20] and MP3[21]. 
Relaxation of input/output constraints results in coarser gain 
application-specific instructions (i.e., larger dataflow 
subgraphs). Such ASIs often offer higher speedup at the 
expense of higher area. In Fig. 8, we study the improvement in 
speedup using additional data transfers post improvement after 
implicit register allocation. Up to 3.33x speedup is reachable 
given 2 read and single write ports. 
0
0.5
1
1.5
2
2.5
3
3.5
MM Qsort Dij Sha MP3 AES
With Iregs normalized to
Without Iregs
 
Fig. 8 Speedup improves with implicit registers comparison 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/27
國科會補助計畫
計畫名稱: 嵌入式系統之特定應用架構研究(II)
計畫主持人: 王益文
計畫編號: 99-2221-E-035-104- 學門領域: 積體電路及系統設計
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
這是一個創新的研究計畫，先前的研究都未曾考慮在特定應用架構中同時客製
化指令以達到效能、電力與成本之間的平衡。本計劃對未來嵌入式系統的設計
方法提供一個新的展望，並證明此特定應用架構新穎觀念可被有效地運用在 21 
世紀的先進計算中。嵌入式系統工程師與單晶片系統設計工程師可藉由此計劃
培訓出最好的分析與設計能力。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
