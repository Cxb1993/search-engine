and Integration)，利用可穿越防火牆、
鬆散偶合架構、跨程式語言平台、及
動態服務取得等特性，讓應用程式可
以在網路上提供服務，達到跨異質性
平台的目的，使得軟體的重用性提 
高，並且加速了資訊的整合。 
然而網際網路是公開的場所，所
以在傳送機密資料時，提供保護措施
免於有心人士竊取是一個重要的議
題。在對 XML 的保護方面，W3C 提
供了一套 XML 加密語法及處理程序 
( XML Encryp t ion  Syn tax  and 
Processing）[3]，它定義了如何對資料
進行加密處理並以 XML 呈現結果，而
且加密方式可以針對 XML 文件的部
分區段進行加密。同時，W3C 也製定
了 XML 的數位簽章(XML Digital 
Signature)[4]，來對於網路上的每筆交
易之可靠度進行確認，XML 數位簽章
也可以對 XML 文件的部份區段行 
簽章。 
在 SOAP 的保護方面，Microsoft、
IBM 和 VeriSign 三家公司於 2002 年向
OASIS 提交了對於網路服務的安全標
準(WS-Security)[7]，專門用來定義
S O A P 加 密 、 簽 章 後 的 格 式 。
WS-Security 延伸了 W3C 的 XML 
Encryption 和 XML Signature，提供了
Web Services 訊息交換的完整性與機
密性。除此之外，WS-Security 支援多
種的安全符記(如 X.509、Kerberosticket
等)，並且描述了安全符記的二進位編 
碼方式。 
WSDL 主要是描述服務有何功
能，而對於非功能性方面的描述(如安
全性、可靠性…等)並沒有提供。
WS-Policy[5]用在描述服務的非功能
性需求，讓網路務服的服務請求者與
服務提供者要進行溝通時，確認雙方
服務的限制與需求。這些限制與需
求，在 WS-Policy 的架構下，會被表示
成策略斷言(p o l i c y  a s s e r t i on)。
W S - P o l i c y S e c u r i t y ( 2 0 0 5 ) [ 8 ]為
WSS:SOAP Message  Secur i ty，
WS-Trust，WS-SecureConversation 定
義一些有關於安全性的斷言。這些斷
言會描述訊息在傳遞時，要提供什麼
樣的安全措施，使得網路服務者參與
者獲得足夠資訊，讓訊息交換時的相
容性 ( c o m p a t i b i l i t y ) 與互通性 
(interoperability)有所提升。 
 
 
 
 
 
 
 
    
     
   Figure 1(A)是沒有加上安全機制的
網路服務運作模式，服務請求者根據
服務提供者的 WSDL 產生 SOAP，並
且傳送至目的地。而服務提供者在收
到 S O A P 後 ， 會依照認證政策
(authentication policy)來執行 SOAP 中
的指令，且將結果存入 SOAP 中回應 
給服務請求者。 
 
 
 
 
 
 
 
 
service
requester
service
provider
Figure 1(A)： The model of building Web Services
authentication
policy
WSDLInternet
SOAP
SOAP
service
requester
service
provider
Figure 1(B)： The normal model
Security
API
Se
AP
curity
I
configured
file
configured
file
authentication
policy
SOAPs
SOAPs
 2
完全獨立。我們定義一個新的語言，
叫做 Web Services Security Language 
( WSSL )。WSSL 文件會描述服務請求
者與服務提供者，在執行請求與回應
時，所產生的 SOAP，加密、解密、簽
章及驗證要用何種 security pattern、演
算法及所需要的 key。當然它也提供 
元素層次加密(element-wise encryption)
及以時序為主元素層次數位簽章
( temporal-based element-wise digital 
signature)的安全機制，可以針對 SOAP
中的某一個元素進行加密及簽章。服
務請求者只要下載服務提供者所發佈
的 WSSL 文件，即可完成與服務提供
者溝通的安全設定，若要變更 SOAP
加密、簽章後的格式或加密簽章的範
圍，也只要更新 WSSL 文件，不需更
改程式碼本身，讓安全需求的設 
定更具有彈性。 
此外，依據基本網路服務的運作
模式，不同的服務請求者可經由同一
個服務提供者所提供的 WSDL 取得服
務，以便進行請求的動作。因此，不
同的服務請求者在對資料簽章時，會
使用不同的私鑰(private key)。由此可
知，這些私鑰是服務請求者需要服務
提供者的服務時是動態取得的。同樣
的，服務提供者回應服務結果，也需
要動態取得服務請求者的公鑰(public 
key)來對回應資料加密。因此，我們在
WSSL 中提供完整定義 dynamic key 的
方法，來解決這樣的問題。 
也由於 WSSL 文件中，安全需求
的設定十分繁瑣，所以在建置服務請
求者與服務提供者的保護措施將非常
困難，所以我們也設計了 WSSL editor
及 WSSL API。WSSL editor 可以依據
WSDL 來產生相對應的 WSSL 文件，
讓使用者不用強記 WSSL 的語法，不
需直接編寫 WSSL 文件，而是透過圖
形化的使用者介面來完成，如此大大
減少編寫時錯誤的產生。WSSL API 會
經由 WSSL 文件的描述來對 SOAP 加
密、解密、簽章及驗證，儲存驗證結
果的資訊 (如簽章的值、簽章名稱、
簽章所有人)及相關錯誤訊息，也可以
和服務請求者與服務提供者的 key 
store 結合，取得所需的 key，並且提供
服務提供者來做認證(authentication) 
的動作。 
 
3. Syntax of WSSL 
在開始詳細說明 WSSL 的語法之前，
我們先介紹 WSSL 文件的結構 (如下
Figure 3 )。A WSSL 文件由五個主要
部份所組成：Header section , key 
definitions section , algorithm 
definitions section , security patterns 
section , communication protocol 
section。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Header section (h1~h2)
Key definitions section 
(k1~k5)
Algorithm definitions section 
(a1~a5)
Security pattern section 
(p1~p5)
Communication protocol section 
(c1~c13)
h1        <?xml version="1.0" ?>
h2        <wssl:security_document xmlns:wssl="http://www.xml-wssl.com/2005/wssl" version="1.0">
k1        <!- -Key definitions section >
k2             <!- -key definition >
k3             <!- -key definition >
k4                          :
k5        <!- -End of key definitions section >
a1        <!- -Algorithm definitions section >
a2             <!- -algorithm definition >
a3             <!- -algorithm definition >
a4                           :
a5        <!- -End of algorithm definitions section >
p1        <!- -Security patterns section >
p2             <!- -security pattern >
p3             <!- -security pattern > 
p4                           :
p5        <!- -End of security patterns section >
c1        <!- -Communication protocol section > 
c2             <!- -encrypt and sing for request >
c3                  <!- -security template > 
c4                                 :
c5                  <!- -end of security template>                  
c6                  <!- -embed digital signature > 
c7                                 :   
c8                  <!- - end of embed digital signature>
c9             <!- - end of encrypt and sing for request > 
c10           <!- - encrypt and sing for response >
c11                               :
c12           <!- - end of encrypt and sing for response > 
c13      <!- -End of communication protocol section >
</wssl:security_document> 
Figure 3： The architecture of  a WSSL document
 4
public key 資訊。 
 
 
 
 
 
 
 
 
 
 <
 
3.2 The algorithm definition section 
Algorithm definition section 是用來定
義加密、簽章所用的演算法，其中會
包含許多  a lgor i thm def in i t ion。
algorithm definition 會描述演算法的聯
結，ID，下載位置，及用途(加密、簽
章或訊息摘要)…等。在 Example 4 中，
是加密及簽章時，所使用的 algorithm 
definition，其詳細的語法及功能請參考
Document Security Language (DSL)  
V2.0[11]。 
 
 E
<
 <
 <
 
 
 
 <
 
3.3 The security patterns section 
Security patterns section 會包含所需的
security pattern。security pattern 會說明
要採用的 security algorithm、加密的
key 及解密的 key ( 如 Example 5 )，而
所選擇的 key definition 的 type 有兩
種 ， 分 別 是 static 及
Applied_to_signature。其詳細的語法及
功能請參考 Document Security  Example 1 ( key definition type=“static” )
<key_definition type=“static" key_link="pub-server">
<key_name>ghhwang.pub</key_name> 
<key_type>RSA</key_type> 
<download_protocol location="http://iclab2.ice.ntnu.edu.tw/DSL/key/ghhwang.pub" />
</key_definition>
Language (DSL) V2.0[11]。 
 
 E<w
xample 5 (Security pattern definition )
 Example 2 ( key definition type=“clientKey” )
<key_definition type="clientKey" key_link="client_key">
<signer_info_mode>public_key</signer_info_mode> 
</key_definition>
 
 
 Example 3 ( key definition type=“Applied_to_signature” )
<key_definition type="Applied_to_signature" key_link="App_to_signature">
 
 </
 
3.4 The communication protocol section 
Communication protocol section 的功用
是說明服務請求者在請求服務及服務
提供者回應服務結果，所產生的
SOAP，要採用何種 security pattern 及
digital-signature 來實現 element-wise 
e n c r y p t i o n 及 t a m p o r a l–b a s e d 
element–wise digital signature。在這個
section 中，又分為兩個子 section，分
別為 request section 和 response 
section，接下來將兩個小段說明其語法 
與例子。 
 
3.4.1 The request section 
主要在說明服務請求者向服務提供者
請求服務時，所產生的 SOAP，如何加
密、解密、簽章及驗證。在 request 
section 中 (如 Example 6)，會有兩個主
要 描 述 。 第 一 個 描 述 為
security_template，裡頭可能包含數個
template 元素，用來設定加解密 SOAP
裡哪一個元素，其範圍為何，要採用
何種 security pattern。而第二個描述為
embed_digital_signature，裡頭也可能包
含數個 digital-signature，用來設定
signature_name>request_sign</signature_name> 
</key_definition>
algorithm_definition algorithm_link="aglrsa-v15" use="SECURITY">
<algorithm_id>http://www.w3.org/2001/04/xmlenc#rsa-1_5</algorithm_id> 
/algorithm_definition>
algorithm_definition algorithm_link="aglrsamd5" use="SIGNATURE">
<algorithm_name>signaturemd5-rsa.ser</algorithm_name> 
<type>RSA</type> 
<version>2.0</version> 
<property mode="ECB" encode="PKCS#1" /> 
<cipher_format XML_text="YES" /> 
<download_protocol linking_method="DDL"   
jar_file_location="http://iclab2.ice.ntnu.edu.tw/DSL/algorithm/signaturemd5-rsa.jar" 
serialization_file_location="http://iclab2.ice.ntnu.edu.tw/DSL/algorithm/signaturemd5-
rsa.ser" /> 
/algorithm_definition>
ssl:security_pattern name="response_pattern">
<key_information>
<encryption_key>
<key_definition key_link="App_to_signature " /> 
</encryption_key>
<decryption_key>
<key_definition key_link="App_to_signature " /> 
</decryption_key>
</key_information>
<security_algorithm>
<algorithm_definition algorithm_link="aglrsa-v20" /> 
</security_algorithm>
wssl:security_pattern>
xample 4 ( The algorithm definition )
 6
簽章的資訊也一併放在 Header 中，其
格式如 Figure 4。由於我們簽章時所用
的 key 可分為 static 及 clientKey 
(dynamic)，所以當採用的 key 為 static
時，因為服務請求者與服務提供者雙
方的 WSSL 文件都必須清楚描述 key
的資訊，所以 Header 只要包含簽章值
即可 (如Example 11 )。而當採用的key
為 clientKey 時，在 WSSL 文件的 key 
definition 只說明要驗證此簽章所使用
的模式 ( public_key 或 certificate)，所
以在 Header 中，除了要有簽章值外，
還要包含驗證此簽章的資訊，讓收到
SOAP 的那一端，可以進行驗證 (如 
Example 12 )。 
 
 <W
 
 
 
</
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
5. WSSL API 
在這一節中，我們將介紹我們所設計
的 WSSL API 及其使用方法。服務提
供者把描述安全需求與限制的 WSSL
文件編輯好，透過 WSSL API 就可以
讓 Web Services 服務提供者與服務請
求者之間的安全部署更加便利、快
速，且可使 Web Services 的建置與安
全需求的設定，完全獨立，如 Figure 5。 
 
 
Service
requester
proxy proxy
WSSL
Service
provider
WSSL
API
WSSL
API
Download the WSSL document 
from the service provider .
SOAPsSOAP SOAP
Figure  5 : Using WSSL API in the proxy
 
 
 
 
 
 
5.1 How to build service requester proxy 
in WSSL API 
我們呈現了一個 service requester 
proxy 的範例，由於 proxy 本身的程式
碼非常龐雜，在此我們只針對 WSSL 
API 做細詳的說明，其餘部份將由
pseudo code 表示，如 Example 13。 
SSL_Security>
<signature name=“ “> +
<signer_info/> ?
<public_key_name/> 
<key_type/> 
<download_protocol location=“ " /> 
</signer_info>
<signature-value/> 
</signature>
WSSL_Security>
Figure 4： The formate of WSSL_Security
"+" (1 or more) 
"?" (0 or 1)  
 
 
 
 
 
 
 
 
 
 
 
 
 
在 Web Services 中，服務提供者
會釋出其 WSDL 文件，讓不同的服務
請求者使用來建立程式。此時，若所
傳送的 SOAP 需要簽章，其 key 必需
E
WS
xample 13 ( The pseudo code  for the proxy of the service requester )
SLTransform wssl = new WSSLTransform(“WSSLdoc.xml",WSSLTransform.CLIENT_MODE);
//取得需要輸入資訊的neededKey .
erator neededKey = wssl.getNeededKey( );
hile(  neededKey.hasNext( ) ) {
Key key =  neededKey.next( ) ;
// 設定service reuqester的private key及其相對應的certificate或public key .
//key的可能來源由directory , key store , IC card .
key.set( keySourceInfo , privateKey , certificate );
//設定要加密簽章的SOAP , requestSOAP為service requester所送來 .
wssl.setSOAP( requestSOAP );
//對requestSOAP加密簽章後，產生securitySOAPreq .
securitySOAPreq = wssl.secure( );
//把securitySOAP傳送給service provider的proxy .
：
//收到service provider proxy所傳送過來的securitySOAPres .
tSOAP( securitySOAPres ) ;
//對securitySOAPres解密驗證.
ecureSOAPres = wssl.unsecure( ) ;
//把unsecureSOAPres傳送給serivce requester .
：
Example 11  (The WSSL_Security formate for static )
<soapenv:Header>
<WSSL_Security>
<signature name="response_sign">
<signature-
value>X0srUE82YBhRR9eUGKW05DPD3ZCFm2pbgGjGZtBK+4kKpe7iu0bSZH1L4Mq1
R9U9RkNtLdF+d8Qtr3MQ1v3APtPq45WkQ8FlH8Syhax/rnZRk+7cgLerqEPz+O2CmcAs
A1M2NicwaalqgGv3u3cotwTz iRmAzpXOT1YFn2qlSNg=</signature-value> 
</signature>
</WSSL_security>
</soapenv:Header>
It
w
}
Example 12  (The WSSL_Security formate for clientKey )
<soapenv:Header>
<WSSL_Security>
<signature name="request_sign">
<signer_info>
<public_key_name>uhchang.pub</public_key_name> 
<key_type>RSA</key_type> 
<download_protocol location="D:\WSSL\WSSL\keymanager" /> 
</signer_info>
<signature-
value>X0srUE82YBhRR9eUGKW05DPD3ZCFm2pbgGjGZtBK+4kKpe7iu0bSZH1L4Mq1
R9U9RkNtLdF+d8Qtr3MQ1v3APtPq45WkQ8FlH8Syhax/rnZRk+7cgLerqEPz+O2CmcAs
A1M2NicwaalqgGv3u3cotwTz iRmAzpXOT1YFn2qlSNg=</signature-value> 
</signature>
</WSSL_security>
</soapenv:Header>
wssl.se
uns
 8
1.4532.0310.4530.813100
1.2031.7040.3750.73590
0.9371.3900.3440.65680
0.7031..1570.2660.64170
0.4850.8440.2810.57960
0.3750.7340.2190.53150
0.2960.6090.1880.50740
0.2340.5160.1720.43830
0.1560.4220.1410.40620
0.1250.3590.1090.36010
驗證時間
(單位：秒 )
簽章時間
(單位：秒 )
驗證時間
(單位：秒 )
簽章時間
(單位：秒 )
元素大小 500 bytes元素大小 100 bytessoap:Body
的
元素個數
Table 2：對 SOAP Body 的元素簽章
 
768RAM，作業系統Microsoft Windows 
XP Professional version2002 service 
pack 2，由 Java 實作 WSSL API。而實
驗對象為 SOAP 的 Body 結構，其中
Body 會包含 100 個元素節點，而每個
元素節點只有一個 text 節點，text 節點
的大小為 100 bytes 或 500 bytes。Table 
1 是對 SOAP Body 加密及解密後，所
花費的時間，而 Table 2 只對 SOAP  
及驗證所需時間
Body 執行簽章及驗證。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
此外，我們所實作的 API 也支援
temporal-based element-wise digital 
signature，也就是對於同一個 SOAP 
Body 之元素可先簽章後再加密，或者
做加密的動作後再執行簽章。依據
此，我們也做了 table 3 與 table 4 的效 
能實驗，對象是 SOAP Body 的元素。 
 
 
 
 
 
 
 
 
 
 
 
 
 
7. 結論 
 本研究提出了一個針對 Web Services
安全性需求的操作模型(operational 
model)，此模型有以下特點：(1)讓 Web 
Services 中服務的建置和安全需求的
設定能完全獨立。(2)服務提供者可把
其服務的安全性限制與需求，描述在
安全需求的設定中，使安全性部署更
加便利、快速。(3)提供 dynamic key
的設定，可讓服務請求者簽章及服務
提供者加密時，動態取得所需的 key。
(4)提供 element-wise encryption 及 
temporal-based element-wise digital 
s i g n a t u r e 的 安 全 機 
制。 
    依據這些特點，我們定義了以
XML 為基礎的 WSSL ( Web Services 
Security Language )，並設計了 WSSL
的 API。藉由 WSSL 的描述與 API 的
使用，程式設計者可以輕易部署 Web 
Services 的保護措施，執行對 SOAP 加
密、解密、簽章、驗證的動作。此外，
我們也設計也 WSSL editor，讓使用者
可以利用友善的使用者介面產生其相
對應的 WSSL 文件，而不用直接編寫 
其內文。 
在未來的研究中，我們將擴充
WSSL 及其 API 的功能，並且利用我
們所提出的操作模式，應用在以 XML
為主的電子商務以及工作流程管理系
24.0042.9066.3441.063100
21.0632.4985.7340.98490
18.5472.0945.0940.92280
18.9531.7654.3910.85970
13.4851.4373.8280.81360
11.1401.2513.1870.78250
9.4381.0782.5940.75340
6.6570.9531.9850.71930
4.4220.8121.3440.68720
2.2820.7190.7500.67210
解密時間
(單位：秒 )
加密時間
(單位：秒 )
解密時間
(單位：秒 )
加密時間
(單位：秒 )
元素大小 500 bytes元素大小 100 bytessoap:Body
的
元素個數
Table 1：對 SOAP Body 的元素加密及解密所需時間
25.2664.4386.6881.531100
oap:Body
的
數
23.0313.8285.9211.37590
21.5153.1415.3131.25080
16.2812.5074.6571.18770
13.8282.0154.0321.10960
11.8441.7033.3121.04650
9.0631.4222.7190.95340
6.8131.1722.0630.89030
4.5620.9851.4060.81320
2.3120.8440.8280.75110
解密後驗證時間
(單位：秒 )
簽章後簽章時間
(單位：秒 )
解密後驗證時間
(單位：秒 )
簽章後加密時間
(單位：秒 )
元素大小 500 bytes元素大小 100 bytess
元素個
Table 3：對 SOAP Body 採簽章後加密及解密後驗證所需時間
Body
的
元素個數
25.7653.1566.3751.171100
23.2972.6415.7501.10990
20.2032.3135.1871.01680
16.0781.9064.5310.96970
13.5151.5933.8600.93860
12.3441.4063.2340.90750
8.8901.2352.6250.85940
6.6871.0790.2100.78130
4.5320.9221.3910.78220
2.3130.7820.7660.71910
驗證後解密時間
(單位：秒 )
加密後簽章時間
(單位：秒 )
驗證後解密時間
(單位：秒 )
加密後簽章時間
(單位：秒 )
元素大小 500 bytes元素大小 100 bytessoap:
Table 4：對 SOAP Body 採加密後簽章及驗證後解密所需時間
 10
