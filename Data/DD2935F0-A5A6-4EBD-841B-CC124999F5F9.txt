一、研究計畫中文摘要：
關鍵詞：廠址設立問題，無產能限制下廠址設立問題，近似演算法，
鄰近捜尋法
在無產能限制下的廠址設立問題(uncapacitated facility location problem, UFLP)，我
們事先給定一些可供廠址設立地點組成的集合、一群顧客組成的集合、各個地點設廠
所需的固定成本，以及各個顧客與開設工廠之間所需的運輸成本。我們的目的是要在
總成本最小化之下，決定那些工廠可以開設以滿足顧客的需求。在此，總成本的定義
為工廠決定開設所要花費的固定成本以及連結顧客與開設工廠間所需運輸成本之總
和。
由於 UFLP 為一 NP-hard 問題，求最佳解甚為困難。近年來有不少作者投入於近
似演算法(approximation algorithm) 與鄰近捜尋法(neighborhood search procedure)的計
算。所謂近似演算法是一個求得近似最佳解的方法，並且可以證明其近似解與最佳解
之間的比值落在一個固定的常數界限之內；到目前為止，近似演算法所得到最佳的比
值為 1.52。而鄰近捜尋法的答案雖然比較接近最佳解，但頗為費時。
吾人認為現有之演算法並非不佳，但是若以成本為考量之對象時，即使近似解落
在可控制範圍之內，但與最佳解之間仍有一定程度之落差。這種落差尤其當單位成本
數量很大時，更不容忽視，因此近似演算法或鄰近捜尋法實有其改進的空間。
本計畫的目的就是要試圖找出一個有效演算法去求得 UFLP 問題的最佳解，以
彌補近似演算法或鄰近捜尋法所求得近似解的不足之處。吾人於本計劃中將試圖探討
單一節點降低法（single node reduction）與多重節點降低法（multi-node reduction）對
於解決 UFLP 的問題所能提供的貢獻，並以此求取問題之最佳解。
I
三、報告內容：
(一) 研究背景 :
廠址設立問題(facility location problem)[4][11][12][15][18][19][21]是在作業研
究領域上一個廣泛被討論的課題。這類的廠址設定問題早自 1960 年代開始便被不同
作者以有系統的方法不斷地研究著。最基本的廠址設立問題可以描述如下：
假設Ａ公司手上有一些地點（a set of sites）可以提供設廠之用，而設廠地點的選擇
必須要滿足公司內部相關客戶（a set of clients）對於該廠址的某些需求。因此，A
公司的目標便是要在最小成本的花費下去決定那些地點可以開設工廠以滿足客戶的
需求。
基於不同的考量下，上述廠址設立問題可以區分為四大類(見[4])，分別為:
(1) p-median problem,
(2) p-center problem,
(3) uncapacitated facility location problem,
及(4) capacitated facility location problem.
在本次計畫中，我們將針對上述的第三類型問題作探討，這類型問題亦即所
謂的無產能限制下廠址設立問題（uncapacitated facility location problem）[4][5][6][20]
或簡稱為 UFLP。此種廠址設立問題在於考慮一群已知之設廠地點(potential sites)及
顧客(clients)在工廠產能不設限的情況下，如何去選擇部份地點設廠以達到最經濟之
效益。許多問題，如工廠、倉庫、學校、醫院、銀行、行政大樓、公司部門、軍事
設施、垃圾場、救生設施等之設置都可化簡為 UFLP 之問題模式。近來有人將其應
用於網路服務設施(PROXY server)之規劃。
這類問題的相關假設及模式表示如下：
(1) 令  I= 1,2, ,m 表示公司客戶所組成的集合。在此，假設公司有m 個相關客戶。
(2) 令  J= 1,2, ,n 表示工廠可以用來選擇設立的地點所構成之集合。在此，假設
有n個地點可供設廠。
(3) 令 jf 表示在第 j 個地點設廠時所要花費的固定成本(fixed cost), j J 。
(4) 令 ijc 表示第 i個客戶( i I )到第 j個廠址( j J )所要花費的服務成本( service
cost)或運輸成本( transportation cost)。
(5) 假設工廠的產能(capacity)是不受限制的，即工廠的產能不會因客戶太多而無法
及時供應。
(6) 令 jx 表示第 j 個地點設置工廠的情況，即
0
1
j th
, j
x =
, j (the j facility is open)


如果第 個地點不設廠
如果第 個地點設廠
1
(二) 研究目的 :
基於上述討論的結果，我們可以知道到目前為止仍沒有具體的方法可以求得
UFLP 的最佳解，因此如何找出一個演算法使得求解時間能縮短在一定範圍內，並
且有效地找到整體最佳解，實有其必要性及實用性。
本計劃的目的就是針對上述演算法的缺點，試圖發展出一個有效率的演算法使
能夠求得 UFLP 問題上的真正最佳解。
（三）研究方法：
本研究共分為下列四個研究階段：
階段一：問題之認識與相關文獻之收集
階段二：新的演算法之推導
階段三：程式語言之編寫
階段四：相關例子之探討
各階段之研究內容與方法分述如下：
第一階段：問題之認識與相關文獻之收集
此階段的目的在於收集相關文獻並明瞭到目前為止有關無產能限制下廠址設
立問題（UFLP）的處理方法，並進而了解各個演算法之間的優劣，希望藉著這些
演算法的認識與啟發，從而產生一個可以找到整體最佳解的演算法。
由於問題已知為 NP-hard 問題，目前為止並沒有找到最佳解的演算法。過去
有不少作者投入於近似演算法及鄰近捜尋法的推導，這類方法推導出的近似解與
最佳解之間的比值落在一個可証明的界限之內，但近似解與最佳解間的差距仍可
預期。
本研究即是要發展出一個求得 UFLP 問題最佳解的演算法，以改善近似解與
最佳解間的差距。
第二階段：新的演算法之推導
為了要解決近似解與最佳解之間實務上的差距問題，因此推導出最佳解的演
算法實有其必要。相關模式及假設如“研究背景”中所述。
本節中所提到演算法的內容主要是一種逐步搜尋(step search)的過程;也就是
說,從給定的起始點(starting point)開始,在經由演算法的計算後找到下一個降低現行
目標含數值的可行解,然後依演算法的步驟再找到下一個可以降低現行目標含數值
3
“單一節點降低法”中的方式只是單純的考慮第 j 個已開設的廠址下，第 i個
顧客的選廠問題。有時，同樣的廠址下，可能有多個顧客甚或至所有顧客可以同時
更換到另一個工廠下以降低總成本，我們稱這樣的搜尋方式為”多重節點降法”。
假設， 1j 是現行某一個以開設的工廠，而 2j 是除了 1j 以外的其他廠(不考慮是已開或
未開廠)，亦即 .12 jj  我們用下述判斷方式去執行步驟(2)。
(i) 考慮部份客戶轉廠的判斷方式:
令
))(;,...,2,1..(*)(*)()),(cos),(cos,0min( 1
1
1423121 12
jCimieifjIfjIjitjitt
m
i
jj 

.
式中， )( 1jC 表示現行解中所有顧客選擇工廠 1j 所構成的集合，
)( 23 jI 1,if 2j 是新開的廠,
0, if 2j 不是新開的廠.
及
)( 14 jI 1,if ),(0),(cos),(cos 112 jCiallforjitjit 
0, otherwise.
如果 01 t ，則表示在 1j 廠下具有 0),(cos),(cos 12  jitjit 的客戶可以移到 2j 的
廠下,此時可降低總成本 1t 個單位。
如果部份客戶轉廠的結果不成立,則再考慮下面轉廠方式。
(ii) 全部顧客轉廠的判斷方式:
令 


m
i
jj
ffjIjitjitt
1
23122 12
*)()),(cos),((cos ,
如果 02 t ,表示在現行 1j 廠下的所有客戶可以全部移到 2j 廠下,並可降低現行
總成本 2t 個單位。如果判斷式皆不成立,則現行的 1j 廠址不須任何變動。
步驟(3): 整體降低法(full table reduction)
前述方法主旨在考慮任意兩個工廠間的開啟或關閉問題,但有時某些廠(含一
個廠)可以同時關閉而被其他某些廠(包含一個廠)開啟後取代;譬如說,已開設的工
廠 1及 3 可以同時關閉而被工廠 5及 6取代。諸如此類的考慮,我們歸之為整體廠間
的降低處理。
整體廠間的降低處理甚為複雜,因此必須借用一些簡單的不等式來加以推論,
找出”可能的”候選工廠,以減少不必要的計算。此法之基本關念簡述如下,餘可類
推之:
5
廠址
客戶
接著,計算步驟(2)下的公式(ii), 可發現工廠2下的全部顧客可換到工廠1下,或可得
到下表,此時目標值變為 96。
廠址
客戶
再對其他 node 進行步驟(2)之檢查,可找到工廠 5 能將全部顧客移入,此時目標值變
為 86,而新表如下:
廠址
客
客戶
上述只開工廠 5的答案亦為本題之最佳解,而最佳總成本為 86。
例2 : 我們亦成功的找到了在ORLIB中 cap71~cap74, cap91~cap94,及 cap101~cap104
檔案中的答案,皆與作者所附之結果相同。
7
1 2 3 4 5
1 12 21 15 21 15
2 16 14 16 12 18
3 26 13 20 11 14
4 9 18 21 14 8
5 13 9 15 18 11
固定
成本
20 25 25 20 20
1 2 3 4 5
1 12 21 15 21 15
2 16 14 16 12 18
3 26 13 20 11 14
4 9 18 21 14 8
5 13 9 15 18 11
固定
成本
20 25 25 20 20
1 2 3 4 5
1 12 21 15 21 15
2 16 14 16 12 18
3 26 13 20 11 14
4 9 18 21 14 8
5 13 9 15 18 11
固定
成本
20 25 25 20 20
