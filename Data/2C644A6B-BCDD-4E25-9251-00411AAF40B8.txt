nodes with limited energy, memory, processing power, 
and communication bandwidth. There overheads such as 
packet transmission for updated code and data, 
operating flash memory, and CPU processing, will 
consume lots of power and wireless network resource. 
How to efficiently provide dynamic update in WSN 
while reducing resource consumption is the main 
concern of this project.  
In this project, for the resource limited WSN 
environment, we use diff-based approach to develop an 
adaptive dynamic component update mechanism, which 
aims to effectively reduce the resource consumption 
incurred by dynamic update mechanism and improve 
system performance. We have implemented this 
mechanism in the embedded operating system, TinyOS, 
to verify its correctness and performance. 
英文關鍵詞： Wireless Sensor Networks, Operating Systems, Embedded 
Systems, Software Update 
 
 2 
dynamic update in WSN while reducing 
resource consumption is the main concern of 
this project.  
 
In this project, for the resource limited 
WSN environment, we use diff-based approach 
to develop an adaptive dynamic component 
update mechanism, which aims to effectively 
reduce the resource consumption incurred by 
dynamic update mechanism and improve 
system performance. We have implemented 
this mechanism in the embedded operating 
system, TinyOS, to verify its correctness and 
performance.  
 
Keywords: Wireless Sensor Networks, 
Operating Systems, Embedded Systems, 
Software Update 
 
一、前言 
 
隨著無線傳輸與嵌入式系統相關技術
的進步，無線感測網路 (Wireless Sensor 
Network, WSN)已成為具有高度發展性的資
訊技術。WSN 透過無線通訊技術，使伺服
器端與多個感測節點溝通，藉此組成的一種
大型感測網路。透過感測節點，WSN 可以
大範圍的偵測環境中的溫度、濕度、感光與
氣壓等等因素的變化，使得 WSN 在許多跨
領域的研究中被應用，像是在軍事科技、醫
療系統、建築物監控、環境觀察和生活應用
等等上都有相關的研究。 
 
WSN 的特性包含了成本低、節點體積
小、節點耗電低與網路具有彈性。WSN 提
供了一個可以支援各式各樣感測技術的平
台，各節點上的所執行的作業系統，是支援
各種相關應用的核心，影響 WSN 平台的運
作效率，更甚者，會限制 WSN 平台相關研
究的可行性。在目前的相關研究中，需克服
環境的限制，由於 WSN 的感測節點有體積
小、容易架設的優點，使得 WSN 平台可以
建置於惡劣險阻的環境之中。然而，在另一
方面，當感測節點散播出去後，節點的回收
會是十分困難，像是有些地域，一般交通工
具難以到達的，或是節點數量太多、體積
小，造成回收的困難，如此一來，回收的成
本將比重新建置的成本還高。另外，需克服
硬體的限制，在 WSN 平台的感測節點，受
限於處理器的功能及記憶體的大小，提供一
些簡單的感測功能與傳輸功能。其他與應用
相關的複雜運算，則是放在伺服器端去處
理。此外，尚需克服電力的限制，因為一般
感測節點的電力供給大多是來自電池，也有
是透過太陽能的方式來當作電力來源。考量
上述感測節點回收的高成本後，若是以不進
行節點回收的假設條件下來進行研究，感測
節點的擁有的電量是很有限的。此外，還有
像是無線網路的安全性、網路碰撞與封包隨
機性的遺失(random loss)等等議題，是在進
行相關研究時，必須要考量的。 
 
無線網路動態更新在 WSN 的相關研究
中，是個非常重要且具有挑戰性的議題，因
為在 WSN 上述的環境限制下，感測節點回
收成本很高，甚至無法回收；也因為要盡量
避免回收感測節點，在這樣的限制下，所有
程式功能必須一次開發完畢並且解決所有
程式錯誤，才能將感測節點實地測詴，這樣
的開發模式顯得成本過高並且不切實際。因
此，WSN 平台若能支援遠端動態更新的功
能，使得程式可以動態更新，才能符合更多
實際環境的應用與研究需求。除此之外，動
態更新也可以用來遠端調整環境參數，將感
測節點最佳化。然而，動態更新所需的運算
量，對於 WSN 而言是個龐大的負擔，像是
封包發送、資料儲存、計算處理等等，都會
消耗大量電力及網路資源，如何降低資源的
消耗，並且有效率的完成動態更新的動作，
即是本計畫主要研究與探討的議題。 
 
目前應用在 WSN 的動態更新模式中，
主 要 可 以 分 成 兩 種 模 式 ： Full Image 
Replacement [4-6]及 Diff-based Approaches 
[7,8,10,16]。Full Image Replacement 是指直
接將舊的映像檔案(image file)替換掉，這種
方式架構較簡單、容易實作，且傳送到感測
節點後就能直接載入到系統中，但因為傳送
的是完整的檔案，大量的封包傳遞是無法避
免的，且還必須確保感測節點有足夠的記憶
空間可以儲存龐大的映像檔案，這種模式適
合用在基板上的更新燒錄。 Diff-based 
Approaches 則改善 Full Image Replacement
的缺點，將舊檔案與新檔案透過工具找出不
 4 
大小改變產生的 Flash Memory Address Shift
操作，在每個 Function 後面增加了 Slop 
Region[29]。這種方式 Linking 需在 Host 
Machine 端完成。 
 
FlexCup[16] 為 了 增 加 系 統 的
Flexibility，採用動態增量鏈結的方式，使用
一種 Meta-Data 記錄著 Dynamic Linking 所
需要的資訊，這樣可以減少感測節點在動態
更新時不必要的 Flash Memory Address 
Shift，但是這個動態更新的元件檔案相較其
它的動態更新模組還要大，原因是動態增量
鏈結是一種複雜的鍵結方式，間接的提升的
程式的複雜度，Sensor Node 必須確保有足
夠的記憶空間。另外在作者實作 Diff-based
與 Full Component 更新機制中，實驗的效益
並沒有太大差異，有時 Full Component 比
Diff-based 還要好，這是因為沒有考量到動
態更新的差異程度，在差異程度高的情況
下，使用 Diff-based 產生的 Processing 成本
可 能 遠 遠 超 過 Full Component 的
Transmission 成本，造成 Full Component 整
體效益比 Diff-based 還要優異的異常現象。 
 
有些研究[11,12,28]則使用其它架構來
完成在 WSN 環境下的動態更新，像
Mat’e[11]是一個設計於無線感測網路上的
Virtual Machine(VM)，執行在 VM 上的應用
程式的 Bytecode 比 Native Code 檔案小很
多，所以可以節省很多程式碼在傳輸上的資
源，但是這個優點卻沒辦法補足 VM 長時間
執行所耗費的資源。Impala[12]在作業系統
與 應 用 程 式 之 間 增 加 了 一 個 中 介 層
(Middleware)，這種架構使應用程式具有模
組化、易替換、跨平台等特性，中介層會根
據系統資源去主動調整應用程式的執行，包
括對 Unlinked 的模組進行 Linking 等等，但
是這種更新機制只限於應用程式，且
Linking 必須耗費額外的資源與儲存空間，
因此，Impala 適用在具有較龐大運算資源的
節點上。 
 
此 外 ， 有 研 究 [23-26] 使 用 壓 縮
(Compression)方式藉由減少動態更新所需
的資料傳輸量來降低動態更新所消耗的系
統 資 源 ， 但 是 需 要 Compression 與
Decompression 的 CPU Time。研究[16,23]
中指出，動態更新的過程中以 Transmission
與 CPU Processing 的資源消耗最為關鍵，
Transmission 包括封包的傳遞、接收及因傳
遞或接收過程的等待時間，若要降低
Transmission 成本最直接有效的方式即是減
少傳遞的封包數量。Processing 是指當動態
更新的資料送達感測節點後，系統將資料連
結 、 載 入 到 記 憶 體 所 耗 的 資 源 。 當
Transmission 愈少，代表 Update Data 愈精
簡，使得 Processing 愈大。 
 
除了上述研究之外，亦有許多嵌入式作
業系統提供動態更新機制或記憶體保護功
能的研究，如 LiteOS[20]、SOS[13]、OS 
Portal[19] 、 eCos[17] 、 Contiki[14] 、
EYES[18] 、 Mantis[15] 、 MagnetOS[27] 、
SenSpire OS[1] 、 t-Kernel[21] 、
Nano-RK[22]、…等，都值得做為我們研究
的參考。 
 
四、研究方法 
 
在本計畫中，我們針對在 WSN 環境
下，研究與發展一個合適的元件化動態更新
(Component Dynamic Update)機制，我們在
現有的嵌入式作業系統 TinyOS 中，使用
Crossbow[30]的 IRIS[30]來當我們的 WSN
硬體平台，以進行我們的研究計畫。 
 
TinyOS是由UC Berkeley所開發出來的
一套嵌入式作業系統，一種由 Event Driven 
System，主要用於 WSN 的環境下。它是由
一種新的程式語言 nesC[3]來撰寫，這是一
種基於元件化的語言，每個元件可分成
(1)Frame ：具固定大小的資料框架 (2) 
Command Handler：使用的基本命令 (3) 
Event Handler：處理事件的發生，具較高的
優先權，可以 preempt 其它排程(4) Task：
處理簡單的工作，使用 FIFO 排班機制，且
Non preemptable。Event Handler 是一次性處
理，所以執行需求較短的工作，需要長時間
運算的工作則交由 Task 處理。TinyOS 設計
為 Static-Linked Image，無法在 Run Time 時
動態載入模組，但近年來有許多研究已嘗詴
使用動態更新的方式將模組載入。除了
 6 
的載入到感測節點中執行，並透過 Runtime 
Linking 的方式，將更新的資訊載入系統中。 
 
 
圖 3：Diff-based 元件動態更新架構 
 
 
    圖 3 為我們的 Diff-based 元件動態更新
架構，Host Machine 端擁有每個 Sensor Node
目前正在執行的映像檔及相關資訊，當執行
Diff-based 元件動態更新時，首先 Host 
Machine 端會(1)取得該 Sensor Node 正在執
行的映像檔及欲更新的映像檔，接著(2)使用
我們製作的 Diff Tool 找出兩個映像檔差異
的地方，我們的 Diff Tool 是參考 UNIX 
diff、Xdelta 和 BSDiff 等來製作的，再根據
我們的機制來做適當的修改，這樣可以節省
重新開發 Diff Tool 的時間，而且這些 Diff 
Tool 也在多個支援動態更新機制的系統中
被採用及修改。在步驟(3)中我們考量到多次
的Delete Data或 Insert Data將可能造成程式
碼的 Fragmentation，傳統則是使用 Flash 
Memory Address Shift 及 Relocation 來解決
Data 的連續性，這個操作將耗費大量資源，
我們透過 Adaptive 的 Diff-based 元件動態更
新機制降低資源的消耗。最後我們將動態更
新所需要的資料及指令(4)寫成一個 Script
檔，Sensor Node 透過 Script 檔把更新的資
料寫入系統中。Host Machine 端將 Script 
Data 及 Code Data 送至欲更新的 Sensor 
Node 後，由於 Sensor Node 的 RAM Size 較
小，為避免 Script Data 和 Code Data 大小可
能超過 RAM 的範圍，因此(5)將更新的資料
儲存到 Flash Memory 中，接著透過(6)我們
修改過的 Boot Loader 來執行 Script Data，並
將相關的資訊載入 RAM 或是 Flash Memory
的正確位置中，再來 (7)完成 Linking 及
Loading 載入系統中執行。 
 
    在我們的 Diff-based 元件動態更新機制
中，元件動態更新的內容是以元件為單位，
以 ELF 檔案格式儲存。我們使用 Script 檔來
告知 Sensor Node 要對舊的映像檔做那些處
理， Script 檔包括 Script Data 與 Code 
Data，Script Data 主要存放對於舊的映像檔
或 Code Data 需要有那些處理，像是 Insert
指令或 Delete 指令。Code Data 則是存放了
需要 Insert 或是 Modify 的資料，例如要新增
感測光線的功能，這個功能在舊的映像檔中
並無相關資訊，這時就需將程式碼存放到
Code Data 區塊，透過 Script Data 的指令將
程式碼載入。 
 
五、結果與討論 
 
我們基於 TinyOS 上，完成研究與實作
Adaptive 的 Diff-based 元件動態更新機制。
詳細項目包括： 
 
(1) 完成支援 Adaptive 的 Diff-based 元件動
態更新Sensor Node平台與Host Machine
平台的設計與實作，並整合成果至 
TinyOS 作業系統。 
 
(2) 完成 Adaptive 的 Diff-based 元件動態更
新相關功能如 Diff Tool 與 Script Data 的
設計與實作，並整合成果至 TinyOS。 
 
(3) 完成效能評量工具的研究、Trace 的收
集與 Workload 的設計。 
 
(4) 完成測詴平台的建置、效能的評估與研
究技術報告的撰寫。 
 
 8 
international conference on Mobile systems, 
applications, and services, June 6-8, 2005, Seattle, 
Washington. 
[28] W. B. Heinzelman, A. L. Murphy, H. S. Carvalho, 
M. A. Perillo, “Middleware to support Sensor 
network applications,” IEEE Network 18, pp. 
6-14, 2004. 
[29] R. Quong and M. Linton, “Linking programs 
incrementally,” ACM Transactions on  
Programming Languages and Systems, 13(1), pp. 
1-20, 1991. 
[30] Crossbow Technology Inc., IRIS Motes, 
http://www.xbow.com. 
[31] Crossbow Technology Inc., Crossbow 
Professional Kit. 
http://www.xbow.com/Products/Product_pdf_files
/Wireless_pdf/WSN_PRO_Series_Datasheet.pdf. 
 
七、計畫成果自評 
 
我們已完成本計畫的研究目標，於執行
TinyOS 作業系統的 Wireless Sensor Network
環境內，實作一個新的軟體動態更新的機
制，此 Diff-based 機制可以比原先 Deluge 所
採用的 Full Image Replacement 的更新方式，
更有效率地執行線上更新或新增感測節點上
的軟體元件的功能。 
 
此外，本計畫參與的研究人員藉由執行
本計畫，獲得嵌入式系統方面的實作經驗，
並對嵌入式系統架構、Diff-based 元件動態更
新機制與策略、元件動態更新的錯誤偵測與
錯誤復原等相關技術，有深入的了解和研究
訓練。同時，藉由在 TinyOS 系統上的實作，
獲得對 TinyOS 系統以及 TinyOS 核心程式的
訓練，深入了解 WSN 的運作原理與運作方
式。對於開發嵌入式作業系統有更多元的了
解，同時獲得對嵌入式系統效能提昇進一步
研究的基礎。 
 
目前，相關本計畫的研究已有 2 篇國際
會議論文的發表，以及 1 篇碩士論文，列述
如下： 
 
1. Mei-Ling Chiang and Hsiang-Yu Hsu, 
“Supporting Dynamic Update and Resource 
Protection in an Embedded Operating 
System,” The 26th Annual ACM 
Symposium on Applied Computing 
(SAC’2011), TaiChung, Taiwan, R.O.C., 
March 21- 25, 2011. 
 
2. Mei-Ling Chiang and Tsung-Lin Lu, 
“Two-Stage Diff: An Efficient Dynamic 
Software Update Mechanism for Wireless 
Sensor Networks,” The 9th IEEE/IFIP 
International Conference on Embedded and 
Ubiquitous Computing (EUC’2011), 
Melbourne, Australia, October 24-26, 
2011. 
 
3. Tsung-Lin Lu (2011/01), “Research on 
Improving the Efficiency of Dynamic 
Update in WSN Platform,” Master Thesis, 
Department of Information Management, 
National Chi-Nan University, Nantou, 
Taiwan, R.O.C., Jan. 2011. (改善 WSN 環
境下動態更新的效率的研究與實作) 
2Novoltel。
 10/25 早上抵逹會場後，出席了 Keynote speech，主題是“Security and Trust in a
Ubiquitous Computing World”。中午參加大會的午宴，而下午則是參加 2 場的
Technical Sessions。晚上則是出席大會的 Banquet，與各國學者聯誼，在餐會
中也巧遇了同樣來自國內的學者，餐敍中大家也互相交換心得。
 10/26 上午主要是參加 EUC 的“Mobile and Context-aware Computing”之
Technical Session，本人並於其中發表 1 篇會議論文，與會討論熱烈。而中午
參加大會午宴後，下午則是參加了 1 場 Technical Session 後，大會圓滿結束。
 10/27 本人多留在墨爾本一天，參加了“Grant Ocean Tour”與市區觀光，對墨爾
本的文化水平有著很深刻的印象，整個城市非常的乾淨，對於多國的文化兼融
並緒，反應在城市的建築和整個市容規劃，非常的美麗，顯示政府對觀光的努
力不遺餘力。其實台灣也非常的美麗，但觀光的規劃和文化水平的提升，有待
政府和人民的努力。
 10/28 起程返國。
二、與會心得
IEEE/IFIP International Conference on Embedded and Ubiquitous Computing
(EUC’2011)包含的主題甚廣，其中 Embedded Systems and Applications、Real-Time
Systems and Operating Systems 、 Sensor Networks 、 Internet Computing and
Applications、Ubiquitous Computing…等等都是其中主要的議題，今年的會議尚與
International Conference on Algorithms and Architectures for Parallel
Processing(ICA3PP’2011)合辦，因此同一個時間有數個 Technical Sessions 的進行與
Two-Stage Diff: An Efficient Dynamic Software Update Mechanism for Wireless 
Sensor Networks 
 
Mei-Ling Chiang 
Department of Information Management 
National Chi-Nan University 
Puli, NanTou, Taiwan, R.O.C. 
e-mail: joanna@ncnu.edu.tw 
Tsung-Lin Lu 
Department of Information Management 
National Chi-Nan University 
Puli, NanTou, Taiwan, R.O.C. 
e-mail: s97213501@ncnu.edu.tw
 
 
Abstract—Supporting remote dynamic update on wireless 
sensor networks (WSNs) allows software of sensor nodes to be 
dynamically updated or enhanced to adapt to changed 
environmental conditions or application requirements. Many 
researches use diff-based approaches to transmit only the code 
difference to sensor nodes for updating. For the resource-
limited WSNs, we have proposed a new diff-based approach 
named Two-Stage Diff to dynamically update software 
components effectively in sensor nodes. By using some 
carefully designed methods to increase the similarities between 
the old and the new program images, our mechanism can 
obtain much smaller code difference than traditional diff-
based approaches. Besides, flash memory characteristics in 
erasing and writing data are considered in designing the file 
format of transmitted update data. Thus, the transmission size 
of the updated data can be greatly reduced. Especially, our 
sensor nodes only need to perform simple work instead of 
complicated dynamic linking in updating program image. As a 
result, our mechanism can incur less resource consumption 
and be more suitable for operating in resource-limited WSNs. 
Experiments with TinyOS show that our Two-Stage Diff can 
effectively reduce the size of transmitted update data and the 
update processing time can be significantly reduced as well. 
Keywords-wireless sensor networks; operating systems; 
embedded systems 
I.  INTRODUCTION  
Because of the advantages of low-cost, small size, low 
power consumption, and flexible network topology, WSNs 
nowadays have versatile applications and become a highly 
developed information technology. However, building a 
WSN must deal with the difficulties of environmental, 
hardware, and power constraints. Once sensor nodes are 
spread out, it will be difficult or not feasible to bring them 
back to reconfigure functions. 
Supporting dynamic software update mechanism is a 
challenging topic. If a WSN platform can support remote 
dynamic update, software of sensor nodes can be 
dynamically updated to fix software bugs, adjust 
environmental parameters, add new software functionality, 
and enhance applications. Thus, sensor nodes can be 
optimized for practical applications and adapted to changed 
environmental conditions. However, the overhead incurred 
by dynamic software update can be quite large for the sensor 
nodes with limited energy, memory, processing power, and 
communication bandwidth. These overheads include packet 
transmission for updated code and data, operating flash 
memory, and CPU processing.  
How to efficiently provide dynamic update in WSNs 
while reducing resource consumption of sensor nodes is very 
important. Many researches use diff-based approaches that 
do not transmit the whole new program image to sensor 
nodes for updating. Only the code difference is transmitted. 
Then, the update mechanism on a sensor node takes charge 
of updating and executing the new image. Compared with 
full image replacement, diff-based approaches are more 
effective since fewer update data need to be sent, whereas, 
are usually more complicated in the updating processing.  
In the traditional diff-based approaches, the code 
difference is obtained from directly differentiating the old 
and the new program images. If the code shifting (i.e. code 
movement) caused by program updating is not considered in 
the differing process, large difference including updated code 
and those not really updated code would be generated. To 
reduce the size of code difference, some researches design 
methods to find out those components not really updated and 
design special script commands for a sensor node to copy 
them from the original image on the sensor node to rebuild a 
new image. So these components affected by code shifting 
need not be transmitted to sensor nodes. However, this way 
still incurs lots of data writing and erasing on flash memory. 
In addition, the effectiveness of a diff-based approach is also 
affected by the degree of updating the component. In the 
case of a high degree of updating, dynamic update with the 
full component replacement may be more efficient. 
For the resource limited WSNs, we propose a new and 
more effective diff-based approach named Two-Stage Diff to 
dynamically update software components of sensor nodes. 
Our mechanism reduces the effect of code shifting by using 
some carefully designed methods to pre-process program 
images before they are differentiated. After these processing, 
the new program image will be transformed to the one 
similar to the original program image. Then our mechanism 
can directly distinguish the program images to find out the 
actually modified codes and obtain much smaller code 
difference than traditional diff-based approaches. For those 
not actually modified components, they are not transmitted 
to sensor nodes. A diff-script containing the code difference 
and diff-script instructions is designed and transmitted to 
sensor nodes. A patch agent implemented on a sensor node 
 
Figure 1.  Component updating. 
 
Figure 2.  The Two-Stage Diff processing. 
 Slop space allocation. To avoid address shifting, we 
use the scheme of adding the slop space between 
components. It can allow an application component 
with small update not to affect other components.  
 Component rearrangement. To make the best use of 
the limited flash memory space and improve the 
performance of reading/writing flash memory when 
updating, we rearrange the components of the same 
characteristic together, and decide whether adding 
slop space or not. 
 Component reuse. In building the new program 
image, we reuse the un-modified components in the 
external flash of a sensor node, mainly to reduce the 
need for transmitting the component for updating.  
 Component relocation. If slop space is allocated 
between components or component rearrangement is 
performed, relocation must be performed to change 
the target addresses of those affected instructions. 
B. Architecture Overview 
Fig. 3 shows how our dynamic update mechanism works. 
The system first generates an executable image in the host 
machine. It then identifies the differences between the 
original executable image and the new one, and then 
generates a path file (i.e. diff-script) for that. Thirdly, the 
host sends the generated diff-script to sensor nodes through 
Deluge’s dissemination mechanism. Fourthly, a sensor node 
receives the diff-script and saves it to the dynamic update 
section of external flash. Finally, the sensor node executes 
our patch agent implemented in the bootloader to update the 
original image. The new image would be installed into the 
program flash of the sensor node. Then the sensor node can 
execute the updated new program image. 
In our implementation, we take advantage of Deluge’s 
dynamic updating tool (i.e. tos-deluge) and modify it to 
transmit only the difference of program images to increase 
the update efficiency. The generated file of Deluge image 
then will be processed by our Two-Stage Diff mechanism. 
C. Generating an Executable Image for a Sensor Node 
Our implementation has a preprocessing step including 
adding the slop space and component relocation for the 
initial executable image before it can be run on a sensor node. 
This processing is mainly for reducing the effect of address 
shifting. Adding slop space between components can allow 
the expansion of a component due to updating without 
affecting other components. Therefore, for small update, the 
component can use its allocated slop space to accommodate 
new code, while other components need not moving. Since 
flash memory writes data in the unit of pages, so we 
reposition application components to the location of page 
boundary. Because adding slop space would increase the size 
of the program image, for the original image, we use In-
System Programming (ISP) to write executable image into a 
sensor node as the default execution of application image. 
We have developed a tool for this preprocessing. The 
Deluge image and its symbol table are first obtained from the 
output of our modified Deluge tool. Our tool performs three 
main works: adding slop space and rearrangement, relocation, 
and generation. It first rearranges the input Deluge image by 
moving the system initialization code and Deluge related 
components to the beginning of the file, because they would 
not change even if applications are modified. Then it 
continues to add slop space among application components. 
The slop space is appended at the tail of the component 
while complying with the page boundary. Because adding 
slop space and rearranging components will shift a few 
components to different addresses, so this tool performs 
relocation to modify those affected instructions to refer to the 
correct addresses of components. Finally, the tool generates 
an executable image and a corresponding symbol table. 
When component rearrangement or adding slop space 
has been performed on the Deluge image, the location of 
some components will be affected and thus changed. We 
then must perform relocation of certain code instructions, 
such as modifying the target addresses of jmp, call, and ldi 
instructions to refer to the correct addresses.  
Our design also has three features. The slop space is not 
added to components related to Deluge and system 
initialization, because their functions are quite fixed. Besides, 
the flash memory space in the sensor node is limited, so we 
must try hard not to add slop space to avoid wasting space. 
Moreover, the size of the added slop space takes into account 
the page boundary since the page is the unit of flash memory 
writing. Components will be located at the address of page 
boundary to avoid extra flash erasing and overwriting. 
on the sensor node will copy the newly added component 
data to the specified location in flash memory. This method 
is simple and suitable for newly added components or the 
updated components whose sizes exceed the allocated slop 
space. The Byte Diff method differentiates component 
content one byte by one byte. These differentiated data will 
be stored in the diff-script and then transmitted to sensor 
nodes through wireless transmission. Our patch agent 
implemented on the sensor node will use these differentiated 
data to update the original image in program flash.  
 The diff-script is shown in Table I. Our diff-script 
supports Byte Diff and COPY operations. Since flash 
memory uses the page as its erasing and writing unit, we take 
the page as the basic unit for erasing and writing in dynamic 
updating. We devise the field of Page Meta-Data to store the 
information of the page to be updated. This field eliminates 
the need to store the same page numbers in the diff-script, 
which can thus reduce the size of our diff-script. When the 
update size exceeds one page, then Byte Diff is not suitable. 
COPY method takes a component as the basic unit for 
avoiding the component size occupies more than one page.  
TABLE I.  THE FORMAT OF DIFF-SCRIPT 
E.  The Patch Agent 
Our system supports Two-Stage Diff and Deluge update 
mechanisms. Fig. 4 shows how our patch agent works. Our 
patch agent is implemented in the bootloader. When a sensor 
node finishes downloading the update file (a diff-script file 
or Deluge image) to the external flash, the update procedure 
will jump to the bootloader to perform our patch agent. Our 
patch agent will first write down all data needed to be copied 
into the program flash, then execute instructions about Byte 
Diff, which includes the following steps: (1) The patch agent 
first retrieves the start address of each metadata from header 
in diff-script. (2) According to the start address of the header, 
the patch agent loads the page metadata and the control 
meta-data from Diff-Script into RAM. (3) According to the 
page metadata, the patch agent then loads the page which 
needs to be updated from the old program image in external 
flash into RAM buffer. (4) According to the control metadata, 
the patch agent then retrieves the diff data from the diff-
script to perform the updating, and writes these update data 
into RAM buffer. (5) Finally, the patch agent writes the 
updated page from RAM buffer into the program flash, and 
then jumps to execute the updated application. 
 
 
Figure 4.  The flowchart of Patch Agent. 
IV. PERFORMANCE EVALUATION 
A. Experimental Setup 
Our experimental platform includes a host machine and 
several sensor nodes. Our host machine includes a PC and 
base station. The Ubuntu 9.1 runs on the PC with Intel Dual-
Core E5400 2.7GHz processor and 2GB RAM. The base 
station consists of a MIB520 interface board and an IRIS 
processor board running TinyOS CVS 2.x. Each sensor node 
consists of IRIS processor board and MTS400 sensor board.  
We use two applications (i.e. RadioCountToLed and 
Oscilloscope) from the TinyOS CVS repository [15] and 
devise different degrees of updating to them as our 
experimental cases. The source codes are compiled by nesC. 
The output object codes will be transformed by Deluge tool 
to Deluge images if Deluge update mechanism is used. 
Otherwise, the output object codes will be transformed by 
our tool to the images for Two-Stage Diff. We then measure 
the size of diff-script and the execution time of these cases.  
We devise six test cases with different update degrees. 
They can be classified into two types. One type is changing 
small amount of codes in the program, like changing a 
constant value (i.e. case 1), adding a new component (i.e. 
case 2), or removing a component (i.e. case 3). The other 
type is changing the codes in a large scale, such as modifying 
the component wiring configuration (i.e. case 5) and 
changing the functionality of the components (i.e. cases 4, 6). 
B. Size Comparison for Update Data 
We measure the amount of data to be transmitted when 
an application is modified. Fig. 5 compares the sizes of 
update data for four different updating algorithms including 
Deluge, Xdelta[12], BSDiff[14], and Two-Stage Diff for 
performing the six test cases of code updates. In comparison, 
the diff-based approaches need to send fewer bytes of update 
data. Deluge transmits the largest update file since it uses full 
image replacement for updating. Though BSDiff can 
generate the smallest update file, it uses bzip2 compression 
in shrinking file size so that it requires a lot of memory and 
CPU computation for decompression on a sensor node. 
Header 
Identification 
Data 
(8 bytes) 
Number 
of Copy 
Metadata 
(4 bytes) 
Number 
of Page 
Metadata 
(4 bytes) 
Number 
of Control 
Metadata 
(4 bytes) 
Number 
of Diff 
Data 
(4 bytes) 
Copy Metadata 
Destination Address (3 bytes) Copy Length (2 bytes) 
Page Metadata 
Page Number (2 bytes) Control Length (1 byte) 
Control Metadata 
Diff Address (1 byte) Diff Length (1 byte) 
Diff Data 
Data (N bytes) 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/11/23
國科會補助計畫
計畫名稱: 支援無線感測網路的軟體動態更新機制的設計與實作
計畫主持人: 姜美玲
計畫編號: 99-2221-E-260-014- 學門領域: 計算機結構與計算機系統
無研發成果推廣資料
TaiChung, Taiwan, 
R.O.C., March 21- 25, 
2011. 
Mei-Ling Chiang and 
Tsung-Lin Lu 
(2011), ’Two-Stage 
Diff: An Efficient 
Dynamic Software 
Update Mechanism for 
Wireless Sensor 
Networks,’ The 9th 
IEEE/IFIP 
International 
Conference on 
Embedded and 
Ubiquitous Computing 
(EUC’2011), 
Melbourne, 
Australia, October 
24-26, 2011. (EI) 
 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
其他成果 
(無法以量化表達之
成果如辦理學術活
動、獲得獎項、重要
國際合作、研究成果
國際影響力及其他協
助產業技術發展之具
體效益事項等，請以
文字敘述填列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
科 
教 
處 
計 
教材 0  
