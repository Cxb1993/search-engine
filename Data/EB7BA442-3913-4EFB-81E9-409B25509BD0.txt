行政院國家科學委員會專題研究計畫成果報告 
GPMT: 以目標為導向以樣式為基礎的模型轉換之研究(3/3) 
GPMT: Goal-Driven Pattern-Based Model Transformation 
System (3/3) 
計畫編號：NSC 95-2221-E-008-015- 
執行期限：95 年 8 月 1 日至 96 年 7 月 31 日 
主 持 人：李允中 國立中央大學軟體研究中心 
參與人員：李文廷、李信杰、馬尚彬、林英彥、吳佳燐、謝孟哲。 
 
摘要 
近年來，以軟體模型為思考主軸的軟體發展觀點引起了相當大的注意，許多
的研究人員試圖提出許多的方法來達成以模型為觀點的軟體發展方法，例如近年
來的模型驅動架構(Model Driven Architecture; MDA)，而其中最為關鍵之處在於
如何透過模型轉換的方式將軟體模型由需求規格到程式碼的細化。在這些提出的
方法中，多數都是著重於功能性需求的轉換，而缺乏對於非功能性需求(或是品質
需求)的探討，尤其是結合目標以及設計樣式來達成非功能性需求的轉換，以增進
軟體品質的研究更是缺乏。本論文提出一個以目標為導向，以樣式為基礎的軟體
模型轉換規則，以漸進式的方式，處理軟體模型轉換中非功能性的轉換議題。 
 
關鍵詞：設計樣式、模型轉換、目標導向分析。 
 
 
一、簡介 
近年來，以軟體模型為思考主軸(model-driven)的軟體發展觀點引起了相當大
的注意，許多的研究人員試圖提出許多的方法來達成以模型為觀點的軟體發展方
法，例如近年來的模型驅動架構(Model Driven Architecture; MDA)[8]。軟體模型
發展方法將軟體的生命週期以模型的觀點分為幾個不同的階段，每個階段都有其
所適合使用的模型，而這些模型會由其對應的超模型(metamodel)來定義，因此，
透過不同階段的超模型之間的轉換規則，就可以將不同階段的模型互相轉換。這
種軟體發展流程的好處在於軟體開發人員可以將軟體設計的抽象化程度提高，只
要花心力在軟體抽象化程度較高的階段(例如軟體分析階段)，而軟體抽象化程度
較低的部分(例如撰寫程式碼階段)就可以透過模型的轉換來達成。因此，就模型
導向的軟體發展方法而言，如何制定一個模型轉換規則就變得十分重要。模型驅
 
 
圖一以目標導向以樣式為基礎的軟體模型轉換 
 
本論文的後續章節架構安排如下:第二節說明本論文的背景以及相關的研究
現況。第三節簡單描述目標導向需求擷取，包含目標導向使用案例、目標互動與
目標階層。第四節探討設計樣式與非功能性需求之間的關係。以樣式為基礎的模
型轉換規則定義於第五節。第六節利用會議排程為例子說明本論文所提的方法。
最後，在第七節簡述本論文的成果以及未來的研究方向。 
 
二、背景與相關研究 
本章節的背景與相關研究主要分為兩個部分來說明，分別是模型轉換之相關
研究以及設計樣式與模型轉換之相關研究。 
 
2.1模型轉換之相關研究 
過去許多年以來， 在模型轉換的領域中， 有許多系統被發展出來，這些方
法可以大致分為三種類型: 
• 圖形轉換方法:此方法將轉換規則分為兩個部分，分別是 LHS樣式以及 RHS樣
式，此兩部分都透過圖形模型的方法表示。當來源(source)規格與 LHS樣式符合
時，便由 RHS樣式來取代來源規格而成為目標(target)規格。相關的研究可以參
考[21]。 
• 關聯轉換方法: 此方法的基本想法是描述來源規格以及目標規格的關係以及限
制條件，透過彼此之間的關係來描述轉換的規則。相關的研究可以參考[11]。 
• 高階語言轉換方法:此方法市將軟體模型轉換的規則利用高街語言來加以描
y by using 
patterns 
on 
Huston 
2001 
examine 
the 
compatibil
ity 
between 
design 
patterns 
and 
metrics 
N/a N/a N/a improve 
quality 
N/a 
Gross 
and E. 
Yu 2000 
provide a 
developme
nt 
methodolo
gy 
forward eng. requireme
nt based 
N/a deal with 
non-functi
onal reqt. 
requirement 
and design 
level 
Chung et 
al. 2003 
provide a 
methodolo
gy for 
developin
g 
adaptable 
system 
forward eng. requireme
nt based 
N/a Improve 
adaptabilit
y 
architecture 
level 
 
有別於上述的方法著重在程式碼的產生，設計樣式相關方法論強調在方法論
的建構，以系統化的方式引導設計者採用設計樣式建構系統。Gross 與 Yu [10] 以
非功能性需求(non-functional requirements, NFR) 框架為基礎，提出一個採用設計
樣式以滿足非功能性需求的方法。同樣應用 NFR 的架構，Chung [19] 等人將設
計樣式結合 NFR 的架構應用於物件導向系統的開發上，稱為 Proteus。Proteus 也
是一種目標導向的方法，提供漸進式的引導設計樣式的選擇與套用。此部分的相
關研究整與比較請參考表一所示。 
 
三、目標導向需求擷取 
本節簡述目標導向需求擷取的方法:目標導向使用案例[17]與模糊物件導向方
法[18]。目標導向使用案例擴充原本的使用案例方法，利用目標的引入，幫助使
用者容易分析與撰寫使用案例，以協助軟體開發人員擷取使用者與系統的需求。
目標可以利用目標架構來描述，該目標架構描述目標的相關特性，同時，此方法
亦提出目標與使用案例之間以及目標與系統之間的互動關係，並據此建立目標階
層。 
3.1 目標架構與定義 
目標架構的表示包含一個目標的動詞(verb)以及數個參數(parameters)兩個部
分，動詞部分包含兩個不同的觀點，分別是 content 以及 competence。參數部分
此結構由一群類別、關係和功能所組成，可以用來解決特別的設計上的問題」。
雖然設計樣式目前已被普遍使用於設計階段，然而，對於如何選擇適合的設計樣
式，還是一個開放的研究議題，尤其是對於非功能性需求的設計樣式之選擇。非
功能性需求並不容易處理，尤其是如何在設計階段處理些需求階段的分功能性需
求，而設計樣式提供一個合適的方法與概念來幫助我們有效地在設計階段處理非
功能性需求。目前關於設計樣式的非功能性需求研究不多，本論文採用的為 Hsueh
與 Shen [12]所提出來的方法。一般而言，一個設計樣式可以區分為功能性的解決
以及非功能性的(或是與品質相關)解決，例如，我們考慮 Observer樣式，該樣式
的 intent描述如下: 
Define a one-to-many dependency between objects so that when one object 
changes state, all its dependents are notified and updated automatically. 
仔細檢視這個 intent，他的功能性意義為當 subject 物件的狀態改變時，必須
通知所有的 observers此項改變。而其非功能性的意義為該項通知的動作必須是自
動的同時不必考慮 observers的不同型態。由以上的描述可以知道，每一個設計樣
式的意圖 (intent)可以區分為功能性意圖 (FR-intent)以及非功能性意圖
(NFR-intent)，而設計樣式便是將單純達到某一個功能性意圖的設計，透過設計樣
式所提出的物件導向結構(structure)，進一步的提高其非功能性的意圖，亦即提高
原本設計的品質。根據這樣的分析，我們可以將設計樣式的結構進一步區分為功
能性結構以及非功能性結構，然後參考圖形轉換法的方式來定義每一個設計樣式
的非功能性結構轉換規則。 
我們將設計樣式依其功能性 intent以及非功能性 intent，將其結構分為功能性
結構(functional structure, FR)以及非功能性結構(non-functional structure, NFR)。圖
二描述 Abstract Factory設計樣式的 FR結構以及 NFR結構。 
 
圖二 Abstract factory設計樣式的 FR結構以及 NFR結構 
 
圖四 Observer設計樣式的轉換規則規格 
 
經由轉換規則的定義，我們便可以進行轉換的程序，圖五為我們的轉換程序。
當使用者透過 GDUC以及 FOOM建立軟體系統的分析規格之後，便可以根據目
標階層所對應的非功能性需求(軟性目標)來比對轉換規則的 LHS，若有符合的來
源模型，則可以利用該設計樣式的轉換規則，將符合的 LHS 轉換成為 RHS，而
該 RHS則是對應某個軟體品質屬性。 
 
 
圖五 以樣式為基礎的轉換流程 
 
圖七 Goals Hierarchy 
 
 
圖八 Goals Considered: {GMS} 
 
 根據目標階層、FOOM 規格以及設計樣式的轉換規則，我們依序將 GMHID，
GSRS，以及 GSFC三個軟性目標分別套用對應的 Proxy設計樣式，Abstract Factory
設計樣式，以及 Observer設計樣式，分別表示如圖九、圖十、以及圖十一所示。 
 
 
圖十一 Goals Considered: {GMS, GMHID, GSRS, GSFC} after applying Observer pattern 
 
七、結論 
以軟體模型為思考主軸的軟體發展方法目前日益受到重視，而其中最重要的
議題為如何透過模型轉換的方式來達成以模型為觀點的軟體發展方法。本論文提
出一個以目標為導向，以樣式為基礎的模型轉換方法與規則，透過目標以及設計
樣式的輔助，可以有效幫助使用者處理模型轉換中的非功能性需求。我們的方法
有以下的貢獻: 
• 利用目標階層來引導設計樣式的選取。 
• 利用設計樣式的轉換規則幫助使用者處理模型轉換中的非功能性需求。 
未來我們將持續朝以下幾個方向努力: 
• 目前我們所提的方法都是針對單一個設計樣式來討論，未來將朝向設計樣式的
組合(design pattern composition)研究 
• 透過軟體度量值收集與軟體度量方法來輔助我們尋找適合的設計樣式轉換規
則。 
 
 
八、計劃結果自評 
本年度計畫之部分成果整理為英文論文形式投稿 Journal of Software 
Engineering Studies,以及預期投稿Information and Software Technology。 
 
 
