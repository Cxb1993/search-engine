2中文摘要
本計畫主要目的在發展結合知識本體論的資料倉儲探勘技術。我們希望能將知識本體
論的概念導入資料倉儲，以強化資料倉儲所儲存的資料間的組織關係描述與知識意涵，並
藉由建立個人使用喜好本體的機制，幫助使用者運用資料探勘方法更快速地探索出符合個
人需要的知識。為此我們提出一個結合知識本體的資料倉儲探勘系統，稱為 OntoWM。此
系統將知識本體的概念導入資料倉儲，藉由三個知識本體的建構：(1)描述資料倉儲的綱要
組織與屬性關係的倉儲詮釋本體，(2)儲存倉儲資料的相關應用領域專家知識的領域知識本
體，以及(3)彙整使用者探勘歷程的探勘歷程本體，定義出更符合使用者進行知識探索的系
統架構。我們以多維度關聯規則的探勘為例，說明本系統的架構及設計方式，以及如何搭
配運用所建構的知識本體，有效地產生符合使用者需求的規則樣式。
關鍵詞：資料倉儲、資料探勘、知識本體、多維度關聯規則
4目錄
壹、緣由與目的.............................................................. 5
貳、相關文獻探討............................................................ 6
参、系統架構 ............................................................... 7
肆、系統設計與實作.......................................................... 9
4.1 多維度關聯規則探勘語言 ................................................. 9
4.2 倉儲詮釋本體 .......................................................... 11
4.3 領域知識本體 .......................................................... 13
4.4 探勘歷程本體 .......................................................... 14
4.5 探勘使用者介面 ........................................................ 14
4.6 探勘處理流程與方法 .................................................... 15
4.7 系統實作 .............................................................. 18
伍、結果與討論............................................................. 18
陸、計畫結果自評........................................................... 18
柒、參考文獻 .............................................................. 19
6地說，資料倉儲是整個知識探索系統中最主要的資料儲存所，其供給資料探勘工具以發掘
出知識。此種架構基本上已可有效解決前述的資料前置處理的問題，然而在實際應用上，
目前的資料倉儲探勘仍然存在不少問題，使得使用者在進行知識探索時，往往需花費相當
多的時間才能得到真正有用的知識，茲分述如下：
1) 資料間的組織與語意關係描述貧乏
目前的資料倉儲在資料模式的定義上皆採關聯式的星狀綱要架構，然而關聯式的綱要
描述僅能表達資料表欄位的屬性定義與資料表間的關聯關係，對於資料屬性欄位或資料屬
性值間所具有的組織關係，如類別從屬關係、語意相似關係、資料操作限制等，皆無法表
達。而這些資料間所隱含的組織關係對於達成有效地知識探索卻是不可或缺的要素，若知
識探索者能有效地掌握這些訊息，並運用在資料探勘的過程中，將可大幅減少盲目搜索與
反覆探勘的發生機率。
2) 使用者的探勘意圖難以掌握
知識的價值是一種極為主觀的判斷，同樣的知識樣式對於不同的使用者可能產生截然
不同的價值判斷，因此，在知識探索的過程中，使用者的意圖將直接影響資料探勘的範圍
與知識的表達方式。然而目前的資料倉儲探勘模式，大都忽略或無法有效掌握使用者的喜
好與行為意圖，故產生的知識樣式通常極為龐大，一方面浪費許多無謂的處理時間，再則
增加使用者的負擔必須耗費額外的時間過濾無效的樣式。
3) 缺乏有效、主動的知識更新能力
現今的環境是一瞬息萬變的世代，各種資料來源無時無刻不在新增資料，處在如此多
變的環境，不管是知識探索的資料來源，或是知識探索者的意圖與喜好，都處在變動的狀
態。在此種異動的情況下，如何有效地進行資料的探勘，以重新獲得或維護過去所採掘出
的知識樣式，是一極具挑戰性的研究工作。為解決上述問題，我們希望能將知識本體論的
概念導入資料倉儲，以強化資料倉儲所儲存的資料間的組織關係描述與知識意涵，並藉由
建立個人使用喜好本體的機制，幫助使用者運用資料探勘方法更快速地探索出符合個人需
要的知識。
本報告的章節安排如下：首先在第二節中說明過去相關的研究文獻；第三節中說明我
們提出此一系統的構想與整個系統的架構；接著在第四節中細述此系統各主要單元，包括
多維度關聯探勘查詢的語法、各知識本體的結構、結合知識本體的探勘方法、以及探勘使
用者介面等的設計理念與作法；在第五節是本報告的總結與未來將繼續的研究工作。最後
是此計劃成果的自我評鑑。
貳、相關文獻探討
知識本體論(ontology，又譯為知識本體或本體論)原為一個哲學上的概念，用於描述事
物的本質。在近年來，知識本體論已被電腦領域所採用，用於知識表達、知識共享及再使
用。許多研究都在使用知識本體論這個術語，但存在不同的定義。根據全球資訊網協會(W3C)
之網路本體論工作小組所下的定義[24]：「知識本體論係用來描述與表示某一種知識領域的
術語」。另外 T. Gruber[11]對於知識本體所作的定義：「知識本體論是一個概念化的明確規
格」。也就是說透過知識本體論可以架構出一個領域知識(domain knowledge)，可以利用知
識本體論中描述的關係進一步的分析這個領域中各種概念的相關性。知識本體論可應用於
8另外，就某些層面來看，資料探勘是一項極為主觀的資料處理工作，採掘出的結果及
展示的方式往往取決於使用者的喜好。因此，若我們能進一步將使用者的喜好，如探勘的
資料範圍、參數的設定、有意義的型樣模式等，也納入資料倉儲探勘系統之中，則能更快
過濾對使用者而言不具價值的規則或型樣。
根據上述的概念，我們的構想是定義一個結合知識本體的資料倉儲探勘系統，希望運
用知識本體的概念，有效建構出目前關聯式綱要架構無法表達出、但對資料探勘而言卻是
極重要的資料關係，無論是語意或結構上的，甚至是其他有用的知識，並整合相關的領域
知識本體；另外也能運用知識本體的架構，將使用者的探勘查詢歷程納入系統之中。
為此我們提出如圖二所示的系統架構，其植基於一般常見的資料倉儲系統，並整合三
個知識本體：倉儲詮釋本體、領域知識本體、以及探勘歷程本體。使用者可經由一個具智
慧引導的探勘交談介面，由系統運用所建構的知識本體，輔助使用者下達正確適當的關聯
查詢，經規則探勘模組處理產生符合的關聯規則。
Data
Warehouse


Data Mart
Data Cubes
Extract
Clean
Transform
Load
Operational
data
Flat files
..
…
…
Internet
Build/
update
Knowledge pattern

User
Query
formulation
/checking
Association
rules
mining
Constraint ontology

Schema ontology

Domain ontology

Query history ontology

圖二：結合知識本體之資料倉儲探勘系統 OntoWM 的架構。
10
Customer.Country =‘Taiwan’, Product.ProdName =‘Desktop’ Product.ProdName = ‘Ink-jet’
在資料倉儲中探勘此種多維度關聯規則，首先分析者須決定資料的尺度(granularity)，
意即構成每筆交易資料的辨識欄位，以及構成規則的項目欄位為何。
例 1：以圖三的資料倉儲為例，表一即對應辨識欄位為客戶編號、日期，而項目欄位
資料表為教育程度、居住城市、產品類別的探勘目標資料表。若是將辦識欄位改成客戶編
號，則資料筆數將由 6 筆變成 4 筆，且每筆資料的內容也隨之更動。由此可清楚看出識別
欄位直接影響資料的尺度與組成，並進而影響產生的規則。
表一：以客戶編號、日期為識別欄位，以教育程度、居住城市、產品類別為項目欄位所產
生的探勘目標資料表。
Grouping_ID Interested Mining_Items
Cust_ID Date Education City *Category
C01 2007-02-01 Bachelor Taipei B,C,D,E
C02 2007-02-03 Bachelor Tainan A,D,E
C03 2007-02-10 31-40 Taichung C,D
C01 2007-02-10 21-30 Taipei A,E
C05 2007-02-12 PhD Kaohsiung A,B,C
C03 2007-02-15 Master Taichung A,E
*A: Printer B: Laptop C: Desktop D: Memory E: Hard Disk
根據前述的概念，我們設計的多維度關聯規則探勘查詢語法定義如下：
Mining multidimensional associations
[Match metarule <metarule_format>]
[Grouping_ID <attribute list>]
Mining_item <attribute list>
From <DW_Name [,Domain_Ontology]>
[Where <where conditions>]
[Having <having conditions>]
Threshold <ms, mc>
其中位於括號’[]’中的部分表示可省略的選項，位於括號’<>’中表示查詢子句的內容需額外
再定義。“Match metarule”子句是供分析者定義規則的樣式，其定義方式是仿造[12]的作法。
“Grouping_ID”子句是定義構成交易資料的辨識欄位，而“Mining_item”子句則是定義構成規
則的項目欄位。當 Grouping_ID 子句省略時，即表示此探勘的辨識欄位沿用來源資料倉儲
的事實資料表的關鍵欄位。“Where”子句是用以設定探勘資料的限制條件，即符合此條件的
資料才會被選取。“Having”子句則是用以設定過濾經過群組後的資料的條件式。Threshold
子句中的 ms 及 mc 分別代表最小支持度及最小信賴度門檻。
例 2：下列查詢表示，在日本市場的每個客戶每天的交易資料中，客戶購買 HP 印表機
的行為是否與其教育程度、居住城市有關聯，而規則的支持度至少為 30%、信賴度至少須
達 50%。
Mining multidimensional associations
Metarule Education = ?, City = ? Category =‘Printer’, Brand =‘HP’
12
屬性關聯限制本體則是用以描繪屬性間的各種限制關係，更明確地說，是指此知識的
運用可有效避免使用者在探勘的過程中，因不當的資料選取，而產生無意義或難以理解的
規則或型樣。針對多維度關聯規則的探勘，我們目前定義了七種屬性限制關係：
1. 互斥(Exclusive)：此關係表示兩屬性應避免同時被選取作為探勘的屬性，例如產品
編號(ProdID)與產品名稱(ProdName)皆可辨識某一產品，故在探勘時，應避免分析
者同時選取此兩個屬性，可減少不必要的計算。
2. 唯項(ItemOnly)：此表示某一屬性只適合作為探勘項目的屬性，例如產品大小(Size)
就其意義而言不適合作為構成決定資料尺度(granularity)的群組屬性。
3. 決定(Decide)：此關係即傳統的功能相依關係，例如產品編號可決定產品的種類、
大小、型式、廠牌等。
4. 伴隨(Follow)：此表示某些屬性必須伴隨其他屬性方能正確識別資料的差異。例如，
城市(City)不能單獨被選取，至少必須伴隨區域(Region)，此乃因不同區域內可能有
相同的城市名。
5. 唯群(GroupOnly)：此表示某些屬性只適合作為探勘查詢的群組屬性，例如客戶編號
(CustID)。
6. 非獨群(NoSingleGroup)：此表示某些屬性不適合單獨作為探勘查詢的群組屬性，例
如性別(Sex)。此乃因這些屬性的值域(Domain)太小，如性別只有兩種，若是單獨作
為群組屬性，則資料筆數過少(以性別而言，只有兩筆)，難以產生有意義的規則。
7. 非獨項(NoSingleItem)：此表示某些屬性不適合單獨作為探勘查詢的項目屬性，如性
別。其原因與前述的非獨群類似，若是單獨作為項目屬性，則構成每筆資料的項目
太少，以性別而言只有兩種，同樣無法產生有意義的規則。
圖五所描繪的即為對應圖三的倉儲資料的屬性關聯限制本體。
Salesman
SalesmanID
Name
Product
ProductID
Size
Brand
Type
Category
Exclusive
Customer
CustomerID
Sex
Education
Nationality
Region
City
ItemOnly
noSingleGroup
Follow
Decide
Decide
Salesman
SalesmanID
Name
Product
ProductID
Size
Brand
Type
Category
Customer
CustomerID
Sex
Education
Nationality
Region
City
Dimension Attributes DimensionAttributesPredicate
Time Day
Month
Year
TimeDay
Month
Year
Decide
GroupOnly
noSingleItem
ProdName ProdName
圖五：對應圖三之屬性關聯限制本體。
14
Customer.City = ‘Taipei’  Product.Category = ‘Notebook’ with ‘IBM 60GB HD’
此規則表示居住台北的客戶傾向買所安裝的硬碟為 IBM 60GB 的筆記型電腦。
4.4 探勘歷程本體
此知識本體旨在收集使用者在資料探勘中所下達的查詢樣式，如資料範圍、參數設定、
過濾條件等，建構出使用者的探勘歷程本體。建構此知識本體的動機之ㄧ是希望藉由累積
使用者過去的探勘歷程，由中產生有用的資訊，可以對後續使用者在設定查詢的重要參數，
如支持度與可信度門檻值時，自動給予適當的初始建議值。如此可減輕許多使用者不知如
何設定這些參數的困擾，同時也減少反覆探勘的次數與時間。
此探勘歷程知識本體的結構如圖七所示。我們以類似星狀綱要結構的方式來匯整使用
者曾經下達、且滿意其結果的關聯查詢。除了紀錄其語法，包括識別屬性與項目屬性(<Ag,
Am>)、Where 及 Having 條件、以及支持度與可信度門檻之外，並紀錄其探勘的結果，即頻
繁項目集與關聯規則，以及探勘結果的統計資料，包括：
 頻繁項目集的數目
 項目集的平均長度與平均支持度
 最大的項目集的長度與支持度
 最小的項目集的長度與支持度
 規則的數目
 規則最大的可信度、最小可信度與平均可信度
History
Query Patterns
Legal <Ag, Am> combination
ms
mc
Where
Having
Result
Statistics
Result Rules
*
*
**
*
*
*
0..10..1
1
1
11
1
圖七：探勘歷程知識本體的結構。
4.5 探勘使用者介面
由於多維度探勘的查詢比單純的為減輕使用者操作上的困難，我們採用類似圖形化舉
例式查詢(Graphical Query By Example，簡稱 GQBE)的設計理念[18]，以 GUI 的方式呈現
各查詢語法的子句設定，引導使用者雖然不熟悉查詢的正確語法，也能順利表達所欲進行
16
4. 由頻繁項目集組成關聯規則。
圖九：Where 條件設定子畫面。
圖十：Having 條件設定子畫面。
接下來說明各主要步驟的處理方式及其與各知識本體間的存取關係。
圖十一所示為步驟 1 的資料流程。在使用者設定查詢的過程中，此系統模組會即時且
持續地檢查其語法的正確性，接著運用資料倉儲詮釋本體，檢查語意上是否有違反或不適
宜的設定，最後再根據探勘歷程本體的內容，尋找與比對接近的查詢，自動計算產生支持
度與可信度門檻。
圖十二所示為步驟 2 的資料流程。這個步驟主要在擷取資料及格式轉換，故毋須存取
任何知識本體。
18
步驟 3 在探勘頻繁項目集的過程中，需要存取的知識本體為領域知識本體及探勘歷程
本體；前者是用來產生延伸的概念項目集，而後者則是可利用其儲存的頻繁項目集避免不
必要的計算以加速執行的時間。有關此步驟的探勘方法是採用我們發展的 AROC 演算法，
限於篇幅無法在此詳細描述，其細節可參考[22]。
最後在步驟 4 產生關聯規則的階段，則是需要存取領域知識本體，加入項目間的類別
與組合的語意，以強化規則的意義。
4.7 系統實作
本系統是以 SQL Server2005 作為資料倉儲的資料庫平台，除了儲存資料倉儲的資料
外，也以關聯式資料表的方式儲存倉儲詮釋本體與探勘記錄本體。我們之所以採用關聯式
資料來儲存這兩個知識本體的主要考慮是資料存取的效率。然而領域知識本體的建構則是
採 OWL 格式[24]，使用史丹佛大學所發展的 Protégé[25]來進行編輯，再轉存為 OWL 格式
檔案。之所以採行 OWL 的資料格式而非關聯式資料的原因在於考慮此領域知識本體具有
共通性，將來可與其他現有的領域知識結合。至於程式介面則是以 Borland C Builder 來開
發，目前已完成系統的雛型，也初步驗證其正確性與效能。
伍、結果與討論
在本研究中，我們提出結合知識本體論的資料倉儲探勘系統的概念，並實際建構一結
合知識本體的資料倉儲探勘系統 OntoWM。我們在三方面導入知識本體的概念：(1)資料倉
儲的詮釋資料；(2)所儲存的倉儲資料的相關領域知識；以及(3)彙整使用者的探勘紀錄。
目前我們已完成 OntoWM 系統的雛型，未來我們將以此雛型系統為基礎，朝下列幾方
面繼續研究並擴充其功能：
1. 變動環境下的探勘機制：目前的 OntoWM 系統是植基於資料來源及各知識本體為固定
不變的假設下所開發完成，然實際的情況是這些資料及知識皆隨外界環境變化而改
變，因此我們將研究導入在變動環境下的探勘機制，包括資料倉儲內容的更新、各知
識本體結構或內容的異動等，如何進行探勘處理。
2. 知識本體的建構與維護：目前的 OntoWM 的知識本體的建構方式都是由系統開發人員
利用其他工具建構、存入資料庫中。未來我們希望能將知識本體建構的機制整合到
OntoWM 中，以提供系統管理者較方便的操作機制。
3. 其他探勘技術：目前的 OntoWM 系統只提供關聯規則的探勘，未來我們主要的工作之
一將陸續研究開發其他常見的探勘技術[8]，包括分類(Classification)、分群(Clustering)、
以及序列型樣(Sequential pattern)。
陸、成果自評
在此計劃中，我們提出結合知識本體論的資料倉儲探勘系統的概念，並嘗試建構一結
合知識本體論的資料倉儲探勘系統，稱之為 OntoWM。我們在三方面導入知識本體論的概
念：(1)資料倉儲的資料描述層面，即資料倉儲的詮釋資料；(2)所儲存的資料倉儲資料的
20
[16] T. Priebe and G. Pernul, “Ontology-based integration of OLAP and information retrieval,” 
Proc. of 14th Int. Workshop on Database and Expert Systems Applications, pp. 610-614,
2003.
[17] G. Psaila and P.L. Lanzi,“Hierarchy-based mining of association rules in data warehouses,”
Proc. of ACM Symposium on Applied Computing, pp. 307-312, 2000.
[18] A. Silberschatz, H.F. Korth, and S. Sudarshan, Database System Concepts, 5th Ed,
McGraw-Hill, 2006.
[19] R. Srikant and R. Agrawal, “Mining generalized association rules,”Proc. of 21st Very Large
Databases Conference, pp. 407-419, 1995.
[20] K. Stoffel, J. Saltz, J. Hendler, J. Dick, W. Merz, and R. Miller, “Semantic indexing for
complex patient grouping,”Proc. of Annual Conf. of the American Medical Informatics
Association, 1997.
[21] M. Taylor, K. Stoffel, J. Hendler, “Ontology-based induction of high level classification
rules,” Proc. of SIGMOD Data Mining and Knowledge Discovery Workshop, 1997.
[22] M.C. Tseng, W.Y. Lin, and R. Jeng, “Mining association rules with ontological
information,”Proc. of 2nd Int. Conf. on Innovative Computing, Information and Control,
2007.
[23] H. Zhu, On-line Analytical Mining of Association Rules, Master Thesis, SIMON FRASER
University, 1998.
[24] OWL Web Ontology Language Use Cases and Requirements,
http://www.w3.org/TR/webont-req/
[25] The Protégé Ontology Editor and Knowledge Acquisition System,
http://protege.stanford.edu/
計劃發表論文
[1] Ming-Cheng Tseng, Wen-Yang Lin and Rong Jeng, “Incremental mining of generalized
association rules under classification ontology and support constraint update,”Proc. of Joint
3rd Int. Conf. on Soft Computing and Intelligent Systems and 7th Int. Symposium on
advanced Intelligent Systems, 2006.
[2] Wen-Yang Lin, Chin-Ang Wu, Ming-Cheng Tseng, and Chuan-Chun Wu,
“Ontology-incorporated mining of association rules in data warehouse,”第十一屆人工智
慧與應用研討會(榮獲大會優良論文獎)，2006。
[3] M.C. Tseng, W.Y. Lin, and R. Jeng, “Mining association rules with ontological
information,”Proc. of 2nd Int. Conf. on Innovative Computing, Information and Control,
2007.
[4] M.C. Tseng, W.Y. Lin, and R. Jeng, “Incremental maintenance of ontology-exploiting
association rules,”Proc. of 6th Int. Conf. on Machine Learning and Cybernetics, 2007.
[5] M.C. Tseng, W.Y. Lin, and R. Jeng, “Re-mining of ontological association rules under
support threshold refinement,”即將發表於第十二屆人工智慧與應用研討會, 2007.
[6] Chin-Ang Wu, Wen-Yang Lin, and Chuan-Chun Wu,“Ontology-assisted query formulation
in multidimensional association rule mining,”to be presented at 2007 IEEE International
Conference on Granular Computing, 2007.
[7] Ming-Cheng Tseng, Evolutionary Mining of Association Rules with Ontological Information,
出席國際學術會議心得報告
計畫編號 95-2221-E-390-024
計畫名稱 知識本體論應用在資料倉儲探勘之研究(2/2)
出國人員姓名
服務機關及職稱
林文揚
國立高雄大學資訊工程系教授
會議時間地點 95 年 9 月 20 日至 24 日 日本 東京
會議名稱 Joint 3
rd International Conference on Soft Computing and Intelligent Systems
and 7th International Symposium on Advanced Intelligent Systems
發表論文題目 Incremental Mining of Generalized Association Rules under ClassificationOntology and Support Constraint Update
一、參加會議經過
國際軟式計算與智慧型系統會議(International Conference on Soft Computing and Intelligent
Systems)是由日本模糊理論與智慧資訊學會(Japan Society for Fuzzy Theory and Intelligent
Informatics，簡稱 SOFT)所支持舉辦的國際會議，其創立者為東京工業大學的 Kaoru Hirota 教授，
曾於 2005 年受邀在本校主辦的人工智慧與應用研討會發表專題演講，是日本模糊領域相當具影響
力的學者。這個會議每兩年舉辨一次，固定在日本舉行。比較特別的是此會議定期與由韓國的模
糊邏輯與智慧型系統學會(The Korea Fuzzy Logic and Intelligent Systems Society，簡稱 KFIS)支持
的國際前瞻智慧型系統會議(International Symposium on Advanced Intelligent Systems)合辦。然而後
者原來是每年定期在韓國舉行的會議，自 2002 年起才與國際軟式計算與智慧型系統會議聯合舉
行，此後便形成慣例遇奇數年在韓國單獨舉辦，偶數年則與日本合辦，且在日本舉行。此次是
兩會議合辦的第三屆，其涵蓋的主題極廣：可分成一般性的智慧型技術，如類神經網路、機器學
習、知識與專家系統、遺傳演算法、模糊方法等；各種智慧型系統的應用，如錯誤診斷、影像處
理、醫學診斷、電腦視覺、語音處理、財務與股市交易監督、自然語言分析等；與其他相關技術，
如通訊處理、網際網路、電子商務、多媒體、虛擬實境、人機介面等，是日、韓兩國人工智慧領
域相當重要且學者出席相當踴躍的研討會。
筆者是第一次參加此會議，主要是應 Kaoru Hirota 教授之邀，於會中組織並主持一個知識本
體與應用的特別場次。
此次會議共分五天進行，第一天實際上只安排了歡迎酒會。筆者與國立台南大學資工系的錢
炳全教授及賴智錦教授同行。我們於 9 月 20 日啟程，當天午後到達東京機場。原本的規劃是希望
下午能到主辦單位東京工業大學拜訪，並參觀 Kaoru Hirota 教授主持的實驗室。經與 Kaoru Hirota
教授聯繫後了解他們當天都忙於會議的準備，無法分身接待我們，因此我們一行三人乃提早到達
會場，禮貌性地照會後即參加歡迎酒會。
接下來的三天是會議的重頭戲，每天由專題演講開始，之後即進行論文發表場次。此次安排
的三場演講分別為第一天的韓國國立海洋大學的 Gyei-Kark Park 教授，講題為 Expansion on
Abstract—Mining association rules from a large business
database, has been recognized as an important topic in the data
mining community. A method that can help the analysis of
associations is the use of classification ontology (taxonomy) and
the setting of parameter constraints, such as minimum support.
In real world applications, however, the classification ontology
cannot be kept static while new transactions are continuously
added into the original database, and the analysts may also need
to set a different support constraint from the original one while
formulating a new query in discovering real informative rules.
Efficiently updating the discovered generalized association rules
to reflect the change with classification ontology, support
constraint and new added transactions is a crucial task. In this
paper, we examine this problem and propose a novel algorithm,
called IMA_HOSU, which can incrementally update the
discovered generalized association rules when the classification
ontology updates with a renewed minimum support. Empirical
evaluations show that our algorithm is faster than applying the
contemporary generalized associations mining algorithms to the
whole updated database.
Index Terms—Association rules; Classification ontology;
Incremental mining;
I. INTRODUCTION
ining association rules has been recognized as a very
important topic in data mining [1][2]. An association
rule is an expression of the form X Y, where X and Y
are sets of items. Such a rule reveals that transactions in the
database containing items in X tend to also contain items in Y,
and the probability, measured as the fraction of transactions
that contain X also contain Y, is called the confidence of the
rule. The support of the rule is the fraction of the transactions
that contain all items in both X and Y. The problem of mining
association rules is to discover all association rules that
satisfy support and confidence constraints.
In many applications, there are explicit or implicit
classification ontology (taxonomy) over the items, so it may
be more useful to find associations at different levels of the
classification ontology than only at the primitive concept
level [8][15]. For example, consider the classification
ontology of items in Fig. 1. It is likely that the association
rule,
Systemax V HP LaserJet (sup20%, conf100%),
does not hold when the minimum support is set to 25%, but
the following association rule may be valid,
Desktop PC HP LaserJet.
PDA HP LaserJet
Desktop PC
PC
IBM TP MITAC Mio
Systemax VSony VAIO
ACER N
ms25 %
Fig. 1. Example of classification ontology.
Previous work on mining generalized association rules
assumed that the classification ontology are static, ignoring
the fact that the classification ontology may change as time
passes while new transactions are continuously added into the
Incremental Mining of Generalized Association Rules
under Classification Ontology and Support Constraint
Update
Ming-Cheng Tseng1, Wen-Yang Lin2 and Rong Jeng3
1, 3 Institute of Information Engineering, I-Shou University, Kaohsiung 840, Taiwan
1 clark.tseng@msa.hinet.net, 3 rjeng@isu.edu.tw
2 Dept. of Comp. Sci. & Info. Eng., National University of Kaohsiung, Kaohsiung 811,
Taiwan
2 wylin@nuk.edu.tw
M
B. Situations for Classification Ontology Update
According to our observation [18], there are four basic
types of item updates that will affect the structure of a
classification ontology: item insertion, item deletion, item
renaming and item reclassification.
Type 1: Item Insertion. The strategies to handle this type
of update operation are different, depending on whether an
inserted item is primitive or generalized. When the new
inserted item is primitive, we do not have to process it until
an incremental database update containing that item indeed
occurs. This is because the new item does not appear in the
original database, neither in the discovered associations.
However, if the new item is a generalization, then the
insertion will affect the discovered associations since a new
generalization often incurs some item reclassification.
Type 2: Item Deletion. Unlike the case of item insertion,
the deletion of a primitive item from the classification
ontology would incur inconsistence problem. In other words,
if there is no transaction update to delete the occurrence of
that item, then the refined item classification will not conform
to the updated database. To simplify the problem, we assume
that outdated items will not be of interest, and the update of
the classification ontology is always consistent with the
transaction update to the database. Additionally, the removal
of a generalization may also lead to item reclassification. So
we always have to deal with the situation caused by item
deletion.
Type 3: Item Renaming. When items are renamed, we do
not have to process the database; we just replace the frequent
itemsets with new names.
Type 4: Item Reclassification. This is the most profound
operation among the four types of classification ontology.
Once an item, primitive or generalized, is reclassified into
another category, all of its generalized items in the old and
new classification ontology are affected.
IV. THE PROPOSED METHOD
A. Algorithm Basics
Let a k-itemset denote an itemset with k items. The basic
process of our mining association rules under update of
incremental transactions, classification ontology and support
constraint follows the level-wise approach used by most
Apriori-like algorithms.
A straightforward method for updating the discovered
generalized frequent itemsets would be to run any of the
algorithms for finding generalized frequent itemsets, such as
Cumulate and Stratify [14], on the updated extended database
UE* with the new support constraint. This simple way,
however, does not utilize the discovered frequent itemsets
and ignores the fact that scanning the whole updated database
would be avoided. Instead, a better approach is to, among the
set of discovered frequent itemsets LED, differentiate the
itemsets that are unaffected with respect to the classification
ontology change from the others, and then utilize them to
avoid unnecessary computation in the course of incremental
update. To this end, we first have to identify the unaffected
items whose supports does not change with respect to the
classification ontology, and then use them to identify the
unaffected itemsets.
We introduce the following notation to facilitate the
discussion: I, J denote the set of primitive items and the set of
generalized items in T, respectively, and I*, J* represent the
counterparts in T*.
Definition 1. An item in T is called an unaffected item if its
support does not change with respect to the classification
ontology evolution.
Lemma 1. Consider a primitive item a in TT*. Then
1) countED*(a)countED(a) if aII*, and
2) countED*(a)0 if aI*I,
where countED*(a) and countED(a) denote the support count of
item a in ED* and ED, respectively.
Lemma 2. Consider a generalized item g in T*. Then
countED*(g) countED(g) if desT*(g) desT(g), where desT*(g)
and desT(g) denote the sets of descendant primitive items of g
in T* and T, respectively.
In summary, Lemmas 1 and 2 state that an item is
unaffected by the ontology update if it is a primitive item
before and after the ontology evolution, or it is a generalized
item whose descendant set of primitive items remains the
same.
Definition 2. An itemset A in ED* is called an unaffected
itemset if its support does not change with respect to the
classification ontology evolution.
Lemma 3. Consider an itemset A in ED*. Then
1) countED*(A) countED(A) if A contains unaffected items
only;
2) countUE*(A) 0 if A contains at least one item a, for a
I–I*.
After clarifying how to identify the unaffected itemsets, we
consider the situation when the old support threshold (msold)
is change to the new one (msnew), and derive two lemmas as
follows.
Lemma 4. An itemset is frequent in ED* with respect to
msnew if it is frequent in ED with respect to msold and msnew
msold.
Lemma 5. An itemset is infrequent in ED* with respect to
msnew if it is infrequent in ED with respect to msold and msnew
msold.
Now, we will further show how to utilize this information
to alleviate the overhead in updating the supports of itemsets.
Consider a candidate itemset A generated during the mining
process. We observe that there are seven different cases for
computing the support count of A in the whole updated
database UE* with respect to msnew.
1) If A is an unaffected itemset and is frequent in ED and
ed*, and msnewmsold, then it is also frequent in the
extended updated database UE*.
2) If A is an unaffected itemset and is infrequent in ED and
ed*, and msnewmsold, then it is also infrequent in UE*.
3) If A is an unaffected itemset and is frequent in ED and
ed*, and msnew > msold, then a simple calculation can
determine whether A is frequent or not in UE*.
4) If A is an unaffected itemset and is frequent in ED but
17. until
*UE
kL 
18. *UEL Uk
*UE
kL ;
Fig. 4. Algorithm IMA_HOSU.
V. AN EXAMPLE FOR IMA_HOSU ALGORITHM
Consider the example in Fig. 2 and 3. To simplify the
illustration, we use item “A” to stand for “PC”, “B” for 
“Desktop PC”, “C” for “Sony VAIO”, “D” for “IBM TP”, 
“E” for “Systemax V”, “F” for “PDA”, “G” for “MITAC 
Mio”, “H” for “ACER N”, “I” for “HP LaserJet”, “J”for
“MC”, and “K”for “Gateway GE” in the item classification 
ontology. The resulting figure is shown in Fig. 5.
A
EC
I
DB
F
HG
IB
EK
HG
J
D F
msold25 % msnew20 %
Original Extended Incremental
Database (ed)
Updated Extended Incremental
Database (ed*)
9
10
B
TID PrimitiveItems
Generalized
Items
K, I
K, I
9
10
TID PrimitiveItems
Generalized
Items
K, I
K, I
Updated Extended Database (ED*)Original Extended Database (ED)
1
6
5
4
3
2
A, B
A
TID PrimitiveItems
Generalized
Items
A, B, F
A, B
A
E
C, E, G, H
E
D, I
C, D
D, I
A, B
7
8 I
I
1
6
5
4
3
2
B
J
TID PrimitiveItems
Generalized
Items
B, F, J
J
J
E
C, E, G, H
E
D, I
C, D
D, I
B
7
8 I
I
B
Fig. 5. Example of incremental database and classification
ontology.
First, let candidate 1-itemsets C1 be the set of items in the
new item classification ontology T, i.e., all items in T* are
candidate 1-itemsets. Second, load the original frequent
1-itemsets EDL1 and divide C1 into three subsets: CX, CY and
CZ, where CX{D, E, I}, CY{F, G, H} and CZ{B, J, K}.
Next, scan ed* for C1. Then delete any 1-itemset in CY if A
 *1
edL and msnew msold and scan ED* for CY and CZ.
Calculate the support count of each 1-itemset in C1. After
comparing the supports of each 1-itemset with msnew, the set
of new frequent 1-itemsets
*
1
UEL is {B, D, E, I, J, K}.
After generating
*
1
UEL , we use
*
1
UEL to generate
candidate 2-itemsets C2, obtaining C2{BD, BI, BJ, DE, DI,
DK, EI, EJ, EK, IJ, IK, JK}. Next load the original frequent
2-itemsets EDL2 and divide C2 into three subsets: CX {DI},
CY {DE, EI} and CZ {BD, BI, BJ, DK, EJ, EK, IJ, IK,
JK}. Note that {DK}, {EK}, {IK} and {JK} are not scanned
in ED* since they contain a new item “K”that does not exist
in ED*; {BE}, {BK} and {DJ} are deleted due to the
existence of item-ancestor relationship. Then scan ed* for C2
and determine the frequent itemsets in ed*. Then delete any
2-itemset in CY if A 
*
2
edL and msnewmsold. Next scan ED*
for CY and CZ. Calculate the support count for each 2-itemset
in C2 and generate
*
2
UEL  {DI, JI, KI}. Finally, we use
*
2
UEL to generate candidate 3-itemsets C3 and apply the same
procedure to generate
*
3
UEL , obtaining an empty set.
VI. EXPERIMENTS
In order to examine the performance of IMA_HOSU, we
conduct experiments to compare its performance with that of
applying two leading generalized association mining
algorithms, Cumulate and Stratify, to the whole updated
database. Synthetic datasets generated by the IBM data
generator [2] were used in the experiments. The parameter
settings for synthetic data are shown in Table 2. We also
adopted two different support counting strategies for the
implementation of each algorithm: one with the horizontal
counting [1][2][3][12] and the other with the vertical
intersection counting [13][19]. For the horizontal counting,
the algorithms are denoted as Cumulate(H), Stratify(H) and
IMA_HOSU(H) while for the vertical intersection counting,
the algorithms are denoted as Cumulate(V), Stratify(V) and
IMA_HOSU(V). All experiments were performed on an Intel
Pentium-IV 2.80GHz with 2GB RAM, running on Windows
2000.
TABLE 2. PARAMETER SETTINGS.
We then compare the three algorithms under varying
transaction sizes. The new minimum support (msnew) was
specified to 1%, and the percentage of affected items, i.e., the
ratio of affected items to total items, was set to 1.4%. Besides,
the comparison was performed under two different cases: 1)
msnewmsold = 0.9%; and 2) msnewmsold= 1.1%. As the
results shown in Fig. 6 and Fig. 7, the running times of all
algorithms increase in proportional to the incremental size.
Furthermore, IMA_HOSU(H) significantly outperforms
Cumulate(H) and Stratify(H), and IMA_HOSU(V) beats
Cumulate(V) and Stratify(V).
VII. CONCLUSIONS
In this paper, we have investigated the problem of updating
generalized association rules when new transactions are
inserted into the database with the item classification
ontology and support constraint update. We also have
