1 . Introduction
An exhaustive generation of a well-known class of combinatorial objects plays an important issue
in the realm of computer science. Such a generated list of objects has many diverse applications
including: searching out the desired object among all candidates, looking for a counterexample
for a certain conjecture, experimentally measuring an average performance of an algorithm over
all possible inputs. Many excellent textbooks have been published on this topic [4, 5, 7, 11, 14].
As usual, combinatorial objects are encoded to integer sequences as their representations (for
convenience, we say objects to mean their integer sequences) and all objects are generated in a
particular order, especially a lexicographic order or a Gray-code order. Given a specific order
of objects, the ranking algorithm is a function that determines the rank of a given object in this
order, and the unranking algorithm is one that finds the object of a given rank.
Trees are among the most fundamental of combinatorial objects. A rooted tree is a tree
with a distinguished root node. A rooted tree is said to be ordered if the relative order of the
subtrees is fixed. An ordered rooted tree is regular (respectively, non-regular) if the number
of subtrees in internal nodes is unvaried (respectively, varied). A number of algorithms have
been developed to generate regular trees (see, e.g. [1, 3, 6, 8–10, 12, 13, 16, 17, 19–21] for binary
trees or t-ary trees). Among these, the proposed algorithms for generating trees are said to be
CAT for constant amortized time, i.e., the amount of computation proportional to the number
of trees generated has a constant upper bound. Note that the measure of computation is the
total amount of data structure change and not the time required to output the trees when
we analyze such algorithms. In addition, the known ranking algorithms [1, 9, 12, 13, 20] and
unranking algorithms [1,9] allows each ranking and unranking to be done with time complexity
O(tn2) (or O(tn) with preprocessing in advance) when the generation deals with t-ary trees
with n nodes.
By contrast, the study of generating non-regular trees has received less attention except
for [2, 15, 18]. Let S = (s1, s2, . . . , sn) be an integer sequence where si ￿ 2 for i = 1, 2, . . . , n,
and let T be a non-regular tree with n internal nodes numbered from 1 to n in preorder list
(i.e., visiting the root and then recursively the subtrees of T from left to right). S is called the
branching sequence for T if node i in T has si children for each 1 ￿ i ￿ n. For briefness, we say
non-regular trees to mean the set of trees having a given branching sequence. In [15], Wu et al.
defined a concise representation, called right-distance sequences (abbreviated as RD-sequences),
to describe non-regular trees, and proposed a Gray-code enumeration using RD-sequences. Let
TS denote the set consisting of all non-regular trees with S as their branching sequence. For
each T ∈ TS , the right-distance of the internal node i ∈ T , denoted by di, is defined as follows:
di =
￿
0 if i = 1 (i.e., the root);
dp(i) + sp(i) − k otherwise,
where p(i) is the parent of node i and node i is the kth son (from left to right) of p(i). Then, T
can be represented by the sequence rd(T ) = (d1, d2, . . . , dn). As an example, the 15 non-regular
trees with branching sequence (3, 4, 2) are shown in Figure 1.
2
Definition 1 [15] Given a branching sequence S = (s1, s2, . . . , sn), the coding tree with respect
to S, denoted by TS , is a rooted tree with n levels constructed by the following rules:
(1) Initially, a root with label 0 is created for TS in level 1;
(2) For every non-leaf node (i.e., a node not in the nth level) with label d in the newly created
level i, creates si + d sons for it and label these sons by 0, 1, . . . , si + d − 1 from left to
right in the (i+ 1)th level of TS .
Figure 2 demonstrates the coding tree with respect to (3, 2, 4, 3). It is easy to see that if
(d1, d2, . . . , dn) is a strip of labels from the root to a leaf in TS , then it represents the RD-
sequence of a non-regular tree. Consequently, all RD-sequences of non-regular trees spread
out in a lexicographic order. From the level representation of TS , we observe that 0 ￿ di ￿
di−1 + (si−1 − 1). Thus, the formula of Lemma 1 can be used directly to generate all possible
non-regular trees with n internal nodes. Such an algorithm is shown in Figure 3, where the
initial call is Gen-Tree(2) and d1 is initialized to 0.
1 2
1 1 2 1 2 3000
0
0
31 20 31 2 40 431 2 31 2 51 2 43000 431 2 31 2 51 2 43000 51 2 430 6
0
0
0
1
0
0
1
0
0
0
1
3
0
0
1
2
0
0
1
1
0
2
1
1
0
2
1
2
0
2
1
3
0
2
1
0
0
2
2
0
0
2
2
4
0
2
2
3
0
2
2
2
0
2
2
1
0
2
3
1
0
2
3
2
0
2
3
3
0
2
3
4
0
2
3
0
0
2
3
5
0
2
0
1
0
2
0
2
0
2
0
0
0
1
0
0
0
1
0
2
0
1
0
1
0
1
2
0
0
1
2
4
0
1
2
2
0
1
2
3
0
1
2
1
0
1
1
1
0
1
1
0
0
1
1
3
0
1
1
2
0
0
0
0
0
0
0
2
0
0
0
3
0
0
1
4
0
1
0
3
0
1
1
4
0
1
2
5
0
2
0
3
0
2
1
4
0
2
2
5
0
2
3
6
Figure 2: The coding tree TS and RD-sequences of non-regular trees with S = (3, 2, 4, 3).
Procedure Gen-Tree(i) // where i represents a level of TS
begin
1: if (i = n) then Print(d1, d2, . . . , dn);
2: else
3: for j = 0 to di−1 + si−1 − 1 do
4: di = j;
5: call Gen-Tree(i+ 1);
6: enddo
end Gen-Tree
Figure 3: Algorithm for generating non-regular trees with n internal nodes.
Theorem 1 The Procedure Gen-Tree for generating all RD-sequences of non-regular trees
with a prescribed branching sequence S = (s1, s2, . . . , sn) runs in constant amortized time.
4
To easily be visualized, we transform the entry Ai,k in the recursion table with S by the
following mapping. Let
Bi,k = Ai,k−Si,n−1 (2)
where 1 ￿ i ￿ n and Si,n−1 ￿ k ￿ Sn−1. Then, we call the resulting table as the alignment
table with S. Table 2 shows the alignment table with S = (2, 4, 3, 2, 4, 3). This table can be
visualized as a irregular staircase, where the corner entry of each step is obtained from (2) by
taking k = Si,n−1. An observation shows that the value of any entry in the alignment table,
except those in the bottom row, is equal to the prefix sum of the entries in the next lower row
(e.g. B3,6 = 46 =
￿6
j=4B4,j = 9 + 15 + 22 in Table 2). Thus, the value of each entry, except
those in the bottom row and the corner entries, is equal to the cell below plus the right side cell
(e.g. B3,7 = 76 = B4,7 +B3,6 = 30 + 46 in Table 2). This immediately implies
Bi,k = Bi+1,k +Bi,k−1 (3)
where 2 ￿ i ￿ n− 1 and Si,n−1 < k ￿ Sn−1.
Table 2: The alignment table with S = (2, 4, 3, 2, 4, 3).
Bi,k Si,n−1 ￿ k ￿ Sn−1
n i Si−1 Si,n−1 0 1 2 3 4 5 6 7 8 9 10
1 0 10 1026
2 1 9 401 625
3 4 6 46 76 115 164 224
6 4 6 4 9 15 22 30 39 49 60
5 7 3 4 5 6 7 8 9 10 11
6 10 0 1 1 1 1 1 1 1 1 1 1 1
We also define the following formula for the eﬃciency of computation:
Ci,k =
￿
0 if k = Si,n−1￿k−1
j=Si,n−1 Bi,j if Si,n−1 < k ￿ Sn−1
(4)
where 1 ￿ i ￿ n. This means that the term Ci,k is the prefix sum of the first k − Si,n−1 non-
blank entries in the ith row of the alignment table. Hence, a table built from (4) is named as
the accumulation table with S. Table 3 shows the accumulation table with S = (2, 4, 3, 2, 4, 3).
We are now in a position to determine the rank of a non-regular tree in lexicographic order.
Recall that Ai,k denotes the number of leaves in the subtree rooted at a node with label k in the
ith level of TS . Also, Ci,k in (4) indicates the total number of leaves for those subtrees rooted at
nodes with labels from 0 to k− 1 in the ith level of TS . Since the strip of labels (d1, d2, . . . , dn)
from the root to a leaf in TS represents a certain non-regular tree T , we can determine the rank
of T by taking the order (from left to right) of this appointed leaf in TS . It follows that
Rank(d1, d2, . . . , dn) =
n￿
i=1
Ci,Si,n−1+di . (5)
6
Algorithm Unranking(N)
begin
1: i = 1; k = Sn−1; s = 0;
2: while N > 0 do
3: s = s+ (si − 1); i = i+ 1; C = Ci,k; // move down
4: while s > 0 and C > N do
5: k = k − 1; C = Ci,k; s = s− 1; // move left
6: enddo
7: if C ￿ N then
8: N = N − C; di = s;
9: endif
10: enddo
11: Print(d1, d2, . . . , dn);
end Unranking
Figure 4: Algorithm for converting a positive integer to its corresponding RD-sequence.
of k. Also, an entry Ci,k marked by a circle means the appropriate entry chosen by the algorithm
for such a row. Since the number of entries passed through the track is no more than n+Sn−1 =
O(Sn−1), we obtain the following theorem.Table 3: The accumulation table with S = (2, 4, 3, 2, 4, 3).
Ci,k Si,n−1 ￿ k ￿ Sn−1
n i Si,n−1 0 1 2 3 4 5 6 7 8 9 10
1 10 0
2 9 0 401
3 6 0 46 122 237 401
6 4 4 0 9 24 46 76 115 164
5 3 0 4 9 15 22 30 39 49
6 0 0 1 2 3 4 5 6 7 8 9 10
Note that Rank(
n￿ ￿￿ ￿
0, 0, . . . , 0) = 0 and Rank(S0, S1, S2, . . . , Sn−1) = A1,0 − 1. For example,
we prescribe a branching sequence S = (2, 4, 3, 2, 4, 3) and consider the rank of a non-regular
tree T with rd(T ) = (0, 1, 2, 0, 1, 2). Clearly, S1,5 + d1 = 10 + 0 = 10, S2,5 + d2 = 9 + 1 = 10,
S3,5 + d3 = 6 + 2 = 8, S4,5 + d4 = 4 + 0 = 4, S5,5 + d5 = 3 + 1 = 4, and S6,5 + d6 = 0 + 2 = 2.
By (5), we can compute the rank of T from Table 3 as follows:
Rank(0, 1, 2, 0, 1, 2) = C1,10 + C2,10 + C3,8 + C4,4 + C5,4 + C6,2
= 0 + 401 + 122 + 0 + 4 + 2
= 529.
Obviously, building the accumulation table with a prescribed branching sequence of length n
requires O(nSn−1) time and space. Then, based on (5), we easily design the ranking algorithm
in O(n) time after a preprocessing. Thus, we conclude the following.
Theorem 2 Determining the rank of a non-regular tree with a prescribed branching sequence
S = (s1, s2, . . . , sn) in a lexicographic order can be done in O(nSn−1) time.
In what follows, we provide a reverse procedure, called Unranking, to convert a positive in-
tegerN to its corresponding RD-sequence of a non-regular tree. We are given S = (s1, s2, . . . , sn)
and N , and look for a sequence d1, d2, . . . , dn such that Rank(d1, d2, . . . , dn) = N . We initially
assume that the accumulation table with S has been builded up and set di = 0 for all i = 1, . . . , n.
The resulting algorithm is shown in Figure 4.
7
Figure 5: Illustration of unranking algorithm.
Theorem 3 Given a positive integer N and a branching sequence S = (s1, s2, . . . , sn), Algo-
rithm Unranking can correctly determine the RD-sequence d1, d2, . . . , dn of a non-regular tree
such that Rank(d1, d2, . . . , dn) = N in O(nSn−1) time.
References
[1] H. Ahrabian and A. Nowzari-Dalini, Generation of t-ary trees with ballot-sequences, In-
ternational Journal of Computer Mathematics 80 (2003) 1243–1249.
[2] M. C. Er, A simple algorithm for generating non-regular trees in lexicographic order, The
Computer Journal 31 (1988) 61–64.
8
 1 
 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                    日期：99 年 07月 12日 
                                 
一、參加會議經過 
本次研討會在 Rihga Royal Hotel Kokura, Kitakyushu, Japan，先搭飛機至福岡，轉搭
捷運，再搭新幹線高鐵，到了 Kitakyushu，Rihga Royal Hotel就在新幹線高鐵站，交通
十分方便。 
二、與會心得 
An ordered tree is called a non-regular tree with a prescribed branching sequence if its 
internal nodes have a perspective degree sequence in preorder list. Recently, Wu et al. 
[R.Y. Wu, J.M. Chang, Y.L. Wang, Loopless generation of non-regular trees with a prescribed 
branching sequence, The Computer Journal, to appear] deﬁned a concise representation, 
called right-distance sequences (abbreviated as RD-sequences), to describe such trees. 
Given a branching sequence S =(s1,s2, . . . , sn),the Gray-code graph of S, denoted as 
GS, is a graph whose vertices are the RD-sequences of non-regular trees with respect to 
S, and two vertices are joined by an edge if and only if their RD-sequences differ in 
計畫編號 NSC 98-2221-E-262-010- 
計畫名稱 指定分枝度不規則樹之次序及反次序 
出國人員
姓名 
吳若禹 
服務機構
及職稱 
龍華科技大學工業管理系 
會議時間 
99年 07月 05日
至 
99年 07月 07日 
會議地點 
Rihga Royal Hotel Kokura, 
Kitakyushu, Japan 
會議名稱 International Conference on Business and Information 2010 
發表論文
題目 
The Gray-code Graph of non-regular trees with RD-sequences is 
Hamiltonian 
無衍生研發成果推廣資料
研討會論文 0 1 100% 
Ro-Yu Wu, Jou-Ming 
Chang and Yue-Li 
Wang, The 
Gray-code Graph of 
Non-regular Trees 
with a Prescribed 
Branching 
Sequence is 
Hamiltonian, 
International 
Conference on 
Business and 
Information 
(BAI2010). 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 1 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
本研究指定分枝度不規則樹之次序及反次序之衍生研究有二:(一) The 
Gray-code Graph of Non-regular Trees with a Prescribed Branching Sequence 
is Hamiltonian 已在研討會 BAI2010 發表。(二) Loopless Generation of 
Non-regular Trees with a Prescribed Branching Sequence, The Computer 
Journal,Volume53, Issue6. 661-666. 2010. 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
