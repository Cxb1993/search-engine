generation. The theorem, which states that
a function on lists can be computed from
both sides can be computed in a parallel set-
ting, is of interest to some community due to
potential of parallelisation. We discovered
that the dual is also true, and the theorem
also applies to trees. The paper [17]. The
paper is accepted by ICFP, a top-ranked
conference in functional programming and
programming languages. We are planning a
journal version of the work emphasising on
aspects that has potential for further devel-
opment.
• Also on list homomorphisms, we published
a paper proposing a radically different ap-
proach to construct homomorphisms. We
claim that the previous approaches were
solving the wrong problem — the most dif-
ficult part of the construction is often over-
looked. The paper [4] will be presented in
APLAS later this year.
2 Motivation
Computer programming is admittedly a chal-
lenging intellectual activity, calling for experi-
ence and training under a read-understand-repeat
learning cycle. By acquiring good practices, re-
lying on experienced teachers, the learning curve
eventually bends, but reliability cannot be fully
ensured. If one asks a student in programming
about why she/he programs in that way (what-
ever this is) the answer is likely to be: I don’t
know — my teachers used to do it this way.
Why is this so? Isn’t programming a scientific
discipline? Surely it is, as several landmark text-
books show. But, perhaps the question “Why
and in what measure is programming difficult?”
is yet to be given a satisfactory answer. By sat-
isfactory we mean one which should unravel the
ingredients of problem solving in a structured
way, thus identifying which skills one should ac-
quire to become a good programmer.
We tried to answer the questions above by
splitting algorithmic specifications generically in
two parts, to be addressed in different stages.
2.1 Easy/Hard Split with Galois Con-
nections
In program construction one often encounters
specifications asking for the “best” solution
among a collection of solution candidates. Such
specifications may have the form “the smallest
such number . . . ”, “the best approximation such
that . . . ”, “the longest prefix of a list satisfying
. . . ”, etc. A typical example is the definition of
whole number division x ÷ y, for natural num-
bers x and (positive) y. A specification in words
would say that x÷ y is the largest natural num-
ber that, when multiplied by y, is at most x.
The standard function takeWhile p, as another
example, returns the longest prefix of the input
list such that all elements satisfy predicate p.
It is often relatively easy to construct a pro-
gram that meets half of such specifications: re-
turning or enumerating the feasible solution can-
didates, such as a natural number, or prefixes of
the input list. This is the easy part. The hard
part of the specification, however, demands that
we return a candidate that is “best” in some
sense (eg. some ordering): the largest integer,
or the longest prefix, that satisfies the first, easy
part of the specification.
We propose a new relational operator mir-
roring this “easy/hard” dichotomy of problem
statements into mathematics. One might won-
der how to come up with the easy/hard split in
the first place. We aim at characterizing problem
2
without domain specific, semantic knowledge. If
it can be done, the programmer might have got
hold of sufficient knowledge of the problem to
just write up the program and, if still necessary
at all, prove it correct afterwards.
This shall not be taken as a defect of the
methodology. Instead, the value of program cal-
culation is to separate the mechanical, routine
process from those critical components that re-
quire insight into individual problems. Partic-
ularly when we face interesting problems, parts
of the development have to be “seen” with the
help of the programmer’s semantical intuition of
the problem, which is then formally proved after-
wards. We wish, however, that the efforts doing
the proof are not wasted.
Constructing list homomorphisms provides
plenty of such examples. As we will see in the
forthcoming sections, constructing (B) from (C)
in a purely formal manner could be rather hard.
The programmer might find it much easier to
speculate a possible candidate for (B), which
requires insight into the specific problem, and
prove it correct afterwards. Once it is done,
however, the construction of () is relatively me-
chanical. Our wish is that the effort constructing
and proving (B) is not wasted — it can be used
to guide the process finding ().
3 Related Work
Galois connections are ubiquitous in mathemat-
ics and computer science [14]. In the latter case,
they have been shown to offer a powerful way
to structure the allegory calculus of Freyd and
Sˇcˇedrov [10, 3], of which Tarski’s relation alge-
bra may in retrospect be seen as an instance [21].
Several examples of such GCs are given in the
current paper (see eg. [1, 8, 19] for a detailed ac-
count). At the other side of the spectrum, GCs
have even been proposed (together with the prin-
ciple of indirect equality) as the building block
of a new brand of theorem provers [20].
The first proof of the third list-
homomorphism, by the time already a famous
folklore theorem, was first published by Gibbons
[12], although he credited discovery of the proof
to Richard Bird and Lambert Meertens during
discussion on a train. One naturally wonders
whether list homomorphisms can be mechan-
ically constructed. Hu et al. [13] proposed
to construct list homomorphisms by fusion
with existing ones. Geser and Gorlatch [11]
applied term rewriting techniques to construct
a definition of () from that of (C) and (B).
More recent developments attempt to apply the
third list-homomorphism theorem to mechanical
construction of list homomorphisms. Morita et
al. [16] proposed to automatically construct ()
by picking some weak inverse. The method may
even be generalised to trees [15].
4 Methodology
In this section we summarise the methodology
we used in our work. While the first two papers
appear to belong to different field on the surface,
we in fact applied one principle to both — seeing
functional programs under a relational light. For
our applications, it turns out to simplify things
significantly.
4.1 Programming from Galois Con-
nections
We took the formulation of the ordinary defini-
tion of a Galois connection and rewrote it in a
point-free, relational style. Using standard rela-
tional program calculation techniques, we turned
4
accessible to a wider audience and easier to ap-
ply.
By formulating the third list homomorphism
theorem in point-free, relational style, we have
dualised the theorem to unfolds, as well as gen-
eralised the theorem to both folds and unfolds
for trees. While the original theorem establishes
a connection between insertion sort and merge
sort, the dual theorem shows a similar connec-
tion between selection sort and quicksort. We
have also derived an efficient parallel algorithm
for scan based on unfolds. To the best of the
authors’ knowledge, while there has been many
studies on parallel programming based on struc-
tural recursion, none have considered the dual
— list generation.
The theorem generalises nicely to trees: if a
function processes or generates a tree both down-
wards and upwards, it may process or generate
the tree from the middle. Finally, we have also
presented an example that shows how a rela-
tional view may shed new light on an old topic
by revealing its hidden symmetry. The authors
believe that relational methods deserve to be ap-
preciated more among functional programmers.
Previous discussions on constructing list ho-
momorphisms using the third list homomor-
phism theorem often overlook the fact that, for
even slightly non-trivial problems, it is not an
easy task to construct one of (C) and (B), given
another, in a constructive, formal manner, and
thus an associativity proof is often needed. The
() operator, on the other hand, is a generalisa-
tion of (C) and (B), whose proof of correctness
also generalises from the proof of associativity.
It is thus a waste throwing the proof away.
We have proposed and demonstrated a novel
approach to constructing (). Starting with a
trivial generalisation of either (C) or (B), we ex-
ploit the constraint enforced by the proof of asso-
ciativity to refine (). Once we have constructed
(), we have its correctness proof too. It also ex-
plains the phenomena that in practice, () often
consists of fragments of code from (C) and (B)
— it can be constructed by generalising from one
of them before being refined by another.
References
[1] C. Aarts, R. C. Backhouse, P. F.
Hoogendijk, E. Voermans, and J. van der
Woude. A relational theory of datatypes,
December 1992. Available from http://
www.cs.nott.ac.uk/~rcb.
[2] R. S. Bird. An introduction to the theory
of lists. In M. Broy, editor, Logic of Pro-
gramming and Calculi of Discrete Design,
number 36 in NATO ASI Series F, pages
3–42. Springer-Verlag, 1987.
[3] R. S. Bird and O. de Moor. Algebra of
Programming. International Series in Com-
puter Science. Prentice Hall, 1997.
[4] Y.-Y. Chi and S.-C. Mu. Constructing
list homomorphisms from proofs. In Asian
Workshop on Programming Languages and
Systems, 2011.
[5] M. I. Cole. Algorithmic Skeletons: Struc-
tural Management of Parallel Computation.
MIT Press, 1989.
[6] E. W. Dijkstra. A Discipline of Program-
ming. Prentice Hall, 1976.
[7] E. W. Dijkstra. The next fifty years. Tech-
nical Report EWD1243, Eindhoven Univer-
sity of Technology, 2004.
6
of Declarative Programming, pages 44–55.
ACM Press, 2008.
[21] A. Tarski and S. Givant. A Formalization
of Set Theory without Variables. A. M. So-
ciety, 1987. AMS Colloquium Publications,
volume 41.
8
showed us why it is terminating. He would write up the proof for us later.
2、 與會心得
Most of the stuffs I worked on with Thorsten were about lambda calculus. In such 
formal systems, a tiny change in a rule matter a lot later. It takes plenty of experience 
to develop the intuition what could be the right step to take.
It is a pity that we do not provide students such training. I learned the related 
knowledge myself after graduate school and feel I am still far behind the European 
researchers. I hope our university could offer such courses.
This paper introduces a binary relational combinator which mirrors this linguistic 
structure and exploits its potential for calculating programs by optimization. This 
applies in particular to specifications written in the form of Galois connections, in 
which one of the adjoints delivers the optimal solution being sought.
The framework encompasses re-factoring of results previously developed by Bird and 
de Moor for greedy and dynamic programming, in a way which makes them less 
technically involved and therefore easier to understand and play with.
會議議程剪輯
!"#$"%Ȃ%!!#""%&'()*%!!#""%Ȃ%!+#$"%,-((.(%/-0(&')1%234)5'#%67)%8'-971*):%; <(=('%>?@.('%).A%/..)&(--(%BCDE('%F%!"#$%&'($)(*+,-.%$("/(0"123),(!$.+-'($)&(
/"%(*456%; G)-=('%HI==J).F%!"#$%&'($(!78-&(49-,$(*+,-.%$%; /..)&(--(%BCDE('F%K)45'L%M)&(4)N)%).A%H(9'0%O='I=4F%4)(:%".$.3+3'23;(<+--)-(
*+,-.%$'=(*12"9$2$($)&(>391+$23")'%!+#$"%Ȃ%!P#""%-I.C4%!P#""%Ȃ%!Q#$"%D.E5=(A%=I=9'5)-#%R9.)-A%O))'5%2S.5E('15=L%9@%3)-5@9'.5)%)=%D'E5.(F%SO/:F%
?@8+$3)3),(6"23),(:$%$&"@-'A(3);+1&3),(*%%"#B'($)&(>-)B'(!C-"%-9'(234)5'#%/0.5(1T*)%MI15.971*):%!Q#$"%Ȃ%!U#""%&'()*%!U#""%Ȃ%!V#$"%<4R%W'90')JJ(%234)5'#%X('.4)'A%B?--(':%; YZ%Y('N).5F%OZ%6--9IJ5F%OZ%D1J)5-F%OZ%/-5F%/Z%[)9I)F%).A%OZ%X(.%\)45)F%0-;2$),1+$%(!-@2(
+$.-+3),(1'3),(D%3),-(0-+$23")'(; <')=4)W%O5AA)E))=)J%).A%B5C4)(-%G5.=('F%0-/3)3),(0-+$23")$+(*+,-.%$'(/"%(
E1$+32$23F-(>8$23$+(0-$'")3),(; >).;>5.0%R).0F%!"#$%&'(*12"9$23")(/"%(:"3)2-%(*+,-.%$%!V#$"%Ȃ%!]#""%<-(.)'L%A51CI1159.%)&9I=%@I=I'(%M/B53O%J((=5.01%!]#$"%A5..('%
(
!"#$%&'()%"^#""%Ȃ%!"#""%D.E5=(A%-(C=I'(#%M(.)=(%OC4J5A=%2OC499-%9@%39JWI=('%OC5(.C(F%S.5E('15=L%9@%B).C4(1=('F%S,:F%>7)2C-'3'3),(!-%93)$23),(!$.+-$1@(/"%(0-+$23")$+(G",3;'(234)5'#%MIA9-@%X('04)JJ(':%!"#""%Ȃ%!"#$"%O45.;34(.0%BI%).A%[91(%_I.9%8-5E(5')F%:%",%$993),(/%"9(H$+"3'%
I"))-;23")'(!"#$"%Ȃ%!!#""%&'()*%!!#""%Ȃ%!+#$"%<4R%W'90')JJ(%234)5'#%%>5=9145%YI')1)7):%; 
óǡJ3'391+$23")'(3)(H$9-(*)$+7'3'(; <)='5C*%M99C*1F%K&-$'(/"%($)(*+,-.%$3;(!%-$29-)2("/(2C-(01''3$)(I$%&'(:%".+-9%; /.A'()1%`(-(.AF%D"%9$+(:%"&1;2(D$93+3-'(/"%(*.'2%$;2(L$;C3)-'%!+#$"%Ȃ%!P#""%-I.C4%!P#""%Ȃ%!Q#$"%D.E5=(A%=I=9'5)-#%B5C4)(-%G5.=('%239JWI=('%OC5(.C(F%%X'9C*%S.5E('15=L:F%
0-+$23")(*+,-.%$3;(*88%"$;C-'(2"(D1MM7(0-+$23")'(234)5'#%O=(@%[991=(.:%!Q#$"%Ȃ%!U#""%&'()*%!U#""%(aCI'159.%2>)'&9I'%&9)=%=9I'%75=4%A5..('%5.%6I'9J)1=:%%
*$+&'()%"^#""%Ȃ%!"#""%D.E5=(A%-(C=I'(#%X('.4)'A%B?--('%2D.@9'J)=5*F%S.5E('15=b=%/I01&I'0F%H('J).L:F%J13+&3),(>2%1;21%-&(!C-"%3-'(234)5'#%M(.)=(%OC4J5A=:%!"#""%Ȃ%!"#$"%/-(a).A('%HI'.(L%).A%K5J9=4L%H'5@@5.F%:$2C/3)&3),(2C%"1,C(I"),%1-);-'%!"#$"%Ȃ%!!#""%&'()*%!!#""%Ȃ%!+#$"%/-0(&')5C%B(=49A1%234)5'#%%B5C4(-%H')&51C4:%; <')=4)W%O5AA)E))=)J%).A%B5C4)(-%G5.=('F%>8+3223),(*2"9'(3)(0-+$23")$+(*+,-.%$'%; >).;>5.0%R).0%).A%<(=('%>?@.('F%6$%3$.+-(>3&-(I")&323")'($)&(H%-$2-'2(0-+$23")'(
3)(*+,-.%$3;(>-8$%$23")(G",3;%; B5C4)(-%c)I'(.C(%).A%H(9'0%O='I=4F%49-,$(*+,-.%$'($)&(0-,1+$%(?N1$23")'%!+#$"%Ȃ%!P#""%-I.C4%
1、 參加會議經過
In the Q&A, Harrie de Swart asked me how much of these can be automated, and 
Stef Joosten asked that whether this is more about heuristics to programming rather 
than automation. These sounds like typical questions when people first heard of 
program calculation. I replied that proofs of monotonic conditions are often done in a 
case-by-case basis, but some of our results, such that any catamorphism including the 
([R]) where R include in is monotonic, are working toward making it more uniform 
and mechanical.
Ewa Orlowska mentioned that many things in logic are Galois connections and there 
may be some connections. When I asked for more info offline, she referred me to a 
paper of hers and Ingrid Rewitzky, Algebras for Galois-style connections and their 
discrete duality, published around 2010.
Georg Struth commented that he appreciates the work, since he also thought that the 
framework of Bird and de Moor could be further simplified.
Jaap van der Woude talked to me afterwards, saying that he like the work, and he is 
happy to see relational program calculation again. He then told me lots of stories 
about how Roland, Oege, and him met and started working on these.
2、 與會心得
As mentioned above. There are various interesting directions to try. I hope I can get 
some of them running.
97 年度專題研究計畫研究成果彙整表 
計畫主持人：穆信成 計畫編號：97-2221-E-001-005-MY3 
計畫名稱：程式之模組性與擴充性：驗證方法與工具--子計畫二:模組化、可擴充之依賴形態程式設計
典範 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 5 100% 
除發表一篇期刊
論文外，有一篇已
投稿，一篇獲邀，
兩篇計畫中。 
研究報告/技術報告 0 0 100%  
研討會論文 6 6 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 4 0 100% 
人次 
 
