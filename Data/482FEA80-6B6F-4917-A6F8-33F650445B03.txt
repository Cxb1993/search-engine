introduced when applying modern virtualization 
technologies to the existing network testbeds, 
researchers also design and conduct several 
experiments to evaluate the performance downgrades 
before they realize the implementation of the network 
testbed. 
 
英文關鍵詞： cloud computing, virtualization, performance 
evaluation, network testbeds 
 
 
Keywords: cloud computing, virtualization, performance 
evaluation, network testbeds. 
二、緣由與目的 
「雲端運算」（Cloud Computing），一種衍生自分散
式系統與網格運算的概念，能隱藏遠端運算硬體的異質
性，讓使用者透過網路連線，直接存取遠端伺服器所提供
的服務。最有名的雲端運算首推 Google 的各種服務，包
括 Gmail、Google Document、Calendar 等等。當某種應用
的運算或儲存需求極高，而本機端的資源又非常有限的情
況下，雲端運算所強調的「透過網路、利用遠端主機所能
提供的運算能力與儲存資源」，就成為滿足該應用需求的
最低成本解決方法。這種資源共享、低成本的概念，使得
「雲端運算」在近幾年來開始廣受大眾注目。 
2010 年 4 月 14 日經濟日報上以一則「是方電訊 
推雲端IDC服務」：“依據IDC公佈2010年台灣資訊市場十
大趨勢預測，隨著全球景氣復甦，企業將逐漸增加資訊支
出，以掌握景氣回升的契機。是方電訊在2010台灣雲端運
算元年，推出一系列雲端IDC的加值服務，讓企業以租用
方式使用IDC機房、網路、伺服器平台、070網路電話、資
訊安全、資料備份、郵件安全代管等服務，節省企業營運
開支、提昇運作效率。是方電訊規劃處副總經理江文漢表
示，是方以「租用」的SaaS（Software as a Service）雲端概
念，讓企業使用雲端IDC應用服務，如同使用水電一般，
依照需求用多少付多少，省卻自行建置與購置的成本，降
低潛在營運風險與支出”，點出了國內對雲端服務的樂觀
與重視。 
「雲端運算」又可細分為「雲端服務」與「雲端技術」。
前者著重於透過網路連線取的遠端主機所提供的服務，如 
Amazon EC2 是SaaS 概念的實現。「雲端技術」則強調如
何利用虛擬化及自動化技術來實現運算資源最佳化與資源
共享等概念，例如利用虛擬機器 Xen 依使用者需求配置運
算資源（運算核心與記憶體）。然而，目前的雲端技術卻
尚不足以支援即時性（real-time）與仿真性（fediality），也
很難滿足這些即時應用與仿真應用的需求。 
以網路測試平台為例，研究人員或網路應用開發人員
常需建置實驗網路，用此測試其新開發之產品或新提出技
術的可行性與穩定度等。為了要提供高擴充性、可重置實
驗、高仿真度的環境，在過去幾年，國內外知名大學紛紛
投入研究分散式的網路架構與測試平台，包括 Emulab、
ORBIT、APE （Ad Hoc Protocol Evaluation）、Roofnet、MiNT
（ Miniaturized Wireless Network Testbeds ） 、 WHYNET
（Wireless HYbrid NETwork）、Netbed、TESTBED@TWISC
等等。這些網路測試平台有些更延伸支援網路安全測試或
無線網路測試，如 DETER、SWOON 等。 
不論是哪一種測試平台，其設計宗旨與雲端運算不謀
而合，都是期望將實驗所需的運算能力放置在遠端主機
上，本機端僅透過瀏覽器或簡單的操控介面，即可配置、
操控實驗，並讀取實驗結果。然而，以目前的雲端技術而
言，雖然能夠隱藏平台硬體、作業系統的異質性，也能夠
隔絕各運算叢集之間的干擾，但是，運算叢集的安全性、
仿真性等卻不在考慮之內。 
參考國內外目前雲端技術與網路測試平台之設計，本
計劃設計了一套應用雲端技術之安全實驗觀測網路，使用
者能在此雲端安全實驗觀測網路中，配置其所需之測試拓
樸，並進行其實驗。以下稱所有配置之節點為「運算叢集」。
除了應用現有雲端運算之虛擬化與自動化技術外，同時兼
顧網路實驗與觀測時的必備條件，包括隔離性、仿真度、
重複性、擴增性、資源共享、擴充性等。 
• 隔離性（Isolation）：預防運算叢集之外的封包有意或
無意地對其內之測試節點造成影響；同時，也必須避
免運算叢集中實驗用之惡意程式碼或病毒流出至雲端
其他主機或外部公用網路。此外，亦必須考慮不同實
驗之間的干擾問題，包括動態執行期間的記憶體資料
干擾或執行結束後殘留記憶體之資料遭到側錄等問
題。 
• 仿真度（fiedality）：與一般模擬測試不同，除了網路
狀況之外，網路測試平台應能仿真（emulate）真實封
包傳送接收情況，包括硬體瓶頸（CPU 使用率、緩衝
區大小、網路卡速度等）。 
• 重複性（Repeatability）：建置網路測試平台的其中一
個重要挑戰即為重現之前的實驗，包括當時的硬體配
置、網路規模、拓樸、頻寬、狀況等等。 
• 擴增性（Scalability）：在真實網路系統中，網路規模
將隨著使用量與使用者需求逐漸增大。為了能有效地
仿真實際的網路系統，好的測試平台也應該支援規模
的縮放，以期正確地取得測試效能或正確性。 
• 擴充性（Extensibility）：除了傳統的乙太網路之外，各
種無線網路技術也逐漸興起，並普及於大眾。為了能
提供使用者全方位的測試環境，測試平台應能支援各
種不同網路技術的擴增，如 WiFi、WiMAX、無線感測
網路等等。 
參考上述各設計需求，本計劃所設計之雲端安全實驗
整合了 Visual Studio，也支援多種標準與協定，如 
SOAP、XML、PHP等，因此，能使開發人員過去的開
發經驗繼續傳承與延伸。 
A3. 國網雲 
    由國內國研院國網中心自行研發建置的Formosa
系列雲端運算平台主機，可以提供多種公用的雲端服
務，包括： 
IaaS雲端服務：以租賃方式讓使用者依自身需求建立
虛擬機器平台，自行安裝部署「軟體」環境、動態啟
動或關閉虛擬環境。 
GPU計算服務：提供NVIDIA CUDA計算服務環境，使
用者可於平台上開發GPU計算用程式，並透過工作排
程系統交付執行。 
    國網中心最新一代Formosa 5更結合叢集計算與
雲端技術，提供一個完整且可靠的雲端運算平台環
境。至於其GPU計算架構，則可用以處理通用計算的
特性，能大大地提升特殊程式的執行速度。 
針對私有雲，國網中心也提出Ezilla雲端簡單龍，如下
圖所示，整合底層的儲存、網路及計算資源，快速地
建構出使用者所要求的雲端服務環境。最後，並透過
友善的網頁化（Web）介面提供雲端服務，降低使用
者的學習門檻。 
除了前述各系統之外，在「訴諸優化之成本效益打造
節能的新世代」的概念下，國內以電源供應器、自動化控
制起家的台達電子公司也開始投注人力，致力於開發雲端
系統。 
然而，在這個百家爭鳴的雲端爆炸時代，每個單位所
重視的面向都略有不同，有些重視服務的提供、使用的便
利性，有些則強調伺服產品的重要。但不論是前述哪一朵
雲，使用者均只能碰觸到軟體規劃、安裝的部份，而無法
提供特殊規格的硬體支援。在本計劃中，由於無線網路觀
測平台需要特殊的硬體支援（一個實體節點需裝配5-6張網
路卡，以提供適當的隔離性），因此，無法採用前開各種
雲端系統，進行虛擬化無線網路觀測平台之架設。  
 
B. 虛擬技術研究 
現有的虛擬化技術透過不同的資源管理方式，讓使用
者可以用比較好的方式（更低成本、更好的執行效率等）
來執行所需的行程或執行緒。一般所指的虛擬化資源包括
計算能力和資料儲存 [8]。虛擬化技術的呈現就是同時執行
多個虛擬機（Virtual machine，簡稱VM），透過軟體讓這
些虛擬機（或為行程）像真實機器一樣執行其上的應用軟
體。虛擬化技術又稱為平台虛擬化，目的是將作業系統和
硬體平台切割。較常見的切割方式包括： 
l 完全虛擬化：不需修改Guest OS，所有軟體都能在虛
擬機中執行，著名的例子有IBM CP/CMS、VirtualBox、
VMware Workstation等。此類虛擬機技術執行效能較
差（1.0GHz的實體CPU僅能支援 <1.0GHz的執行效
能）。 
l 硬體輔助虛擬化：不需要修改 Guest OS，利用CPU處
理特殊的虛擬指令，以實現完全虛擬化的功能。著名
的例子有VMware Workstation、Xen、KVM等。此類虛
擬技術面臨的最大挑戰是硬體的支援度。如果使用太
老舊的硬體，則無法透過實體CPU處理特殊的虛擬指
令，並實現完全虛擬化的功能 
l 部分虛擬化：只有部分應用程序以虛擬化方式執行。
虛擬化處理未擴及整個作業系統。此類虛擬機無法支
援多種Guest OS的運行。 
l Paravirtualization：需修改 Guest OS，為應用程序提供
與底層硬體相似（但不相同）的操作介面。早期的Xen 
即採用此種虛擬切割方法。運行於此類虛擬技術上的
虛擬機Guest OS受到較大的限制。 
 
綜合前面幾點所述，如果要同時兼顧虛擬機的執行效
能 （ 也 就 是 1.0GHz 的 實 體 CPU 可 以 執 行 1.0GHz 的 虛 擬
! 	  （圖片來源：Microsoft）	  
	  
（圖片來源：國網中心）	  
 上圖為本計畫研究人員所設計的支援虛擬技術之無
線觀測網路平台，簡稱為 vSWOON。vSWOON建構於
TWISC@NCTU的SWOON觀測平台上。而SWOON則以美國
加 州 大 學 柏 克 萊 分 校 開 發 的 Defense Technology 
Experimental Research (DETER) 平台為基礎。DETER是一用
以研究網路安全攻防機制之實驗平台，提供節點隔離機
制，支援可重覆配置的有線網路安全實驗。DETER提供數
百個實驗節點，能夠負擔中型網路的安全實驗，諸如阻斷
式服務攻擊、EMIST計畫進行的蠕蟲行為探究實驗等。
vSWOON的設計，除了支援SWOON與DETER提供的有線網
路安全實驗外，亦新增了虛擬技術與雲端運算的支援，預
計實作完成後，可以提升整個系統的擴增性與可使用性。 
在vSWOON中，沿用DETER測試平台的伺服器設計： 
l Boss伺服器：負責控制交換器和電源控制器，在建立
新實驗時，它會配置實驗節點，創建實驗者設計的網
路拓樸。 
l User伺服器：管理使用者帳號以及使用者所建立的實
驗。 
至於利用實體機器與虛擬節點所建置測試網路，則由
Experiment 與 Control 交換器創建相對應的vLAN，以進行
實驗的隔離。在此設計下，使用者所創建的實驗網路可能
由數個實體節點（pNode）、數個虛擬節點（vNode），或
部分實體、部分虛擬節點（pNode + vNode）所組成。虛擬
節點的配置與創建，則由Boss伺服器依據底層實體節點的
硬體限制決定可以創建的虛擬機規格與數量。例如，一台
四核1.0GHz的實體機可以支援1-2台單或雙核的虛擬機。 
 
E. 虛擬機效能評估 
確保虛擬機效能是vSWOON仿真度的一大挑戰。如果
Boss伺服器配置一台1.0GHz的虛擬機給使用者，但是其執
行效能卻只有600MHz，則vSWOON的仿真度將因此受到波
及。如此使用者所開發的系統，未來在實際環境運行時，
可能會因實驗仿真度太低，而遭遇到無法預測的狀況。因
此，本計畫執行期間，針對各種不同的虛擬技術運行效能
進行評估，期望能提供vSWOON最佳的虛擬技術參考。實
驗機器規格為Intel Xeon  X3450 2.67GHz（8核心中央處理
器），搭載10GB的記憶體。計畫研究人員針對四種不同的
虛擬機技術，以lmbench和netperf進行評測，包括Xen、
KVM、OpenVZ與原生（Native）等機器，其中， 
a. Xen 和 KVM 是使用自有工具的套件來管理 CPU 和 
記憶體資源的使用。 
b. OpenVZ 使 用  cpu affinity 的 功 能 來 管 理 所 使 用 的 
CPU 數量。 
c. Native system 使用 cpu affinity 綁定 cpu 資源, 並透過 
PAM 管理能使用的記憶體大小。 
如前所述，在測試工具方面，研究人員採用lmbench 和 
netperf 進行。然而，依據netperf官網建議，僅針對各虛擬
機進行反應時間測試（response time）。以下為實驗數據與
說明： 
l 圖一為使用 lmbench 在pipe、unix pipe，以及記憶體
資料讀寫與傳輸等應用時，各種虛擬機技術的表現。
明顯地可以看出在考慮無線網路觀測平台需求時（支
援硬體輔助虛擬化、支援Guest OS多樣性等等），Xen
的效能都比 KVM稍勝一籌（此實驗所使用之Linux作
業系統核心版本為2.6.x）。 
l 圖二為使用netperf評測各虛擬機在處理TCP/UDP封包
時的反應時間。明顯地可以看出，需要存取實體網路
介面時，KVM與OpenVZ表現都比Xen高。 
 
 
圖一；lmbench評測各虛擬機的效能表現 
 
 
圖二；netperf評測各虛擬機處理封包所需的反應時間 
 
這些虛擬機的效能表現，未來也可以提供Boss伺服器
Warfield, Xen and the art of virtualization, Proceedings of 
the nineteenth ACM symposium on Operating systems 
principles, October 19-22, 2003, Bolton Landing, NY, USA   
26. Xen 3.0 Interface Manual. Available at 
http://wiki.xensource.com/xenwiki/XenDocs. 
27. T. Redkar, “ Windows Azure Platform, ”  Expert ’ s 
Voice in .Net, 2010. (ISBN:1430224797) 
28. Lmbench. Available at http://www.bitmover.com/lmbench/. 
29. Netperf. Available at http://www.netperf.org/netperf/. 
30. G. Judd and P. Steenkiste, “Repeatable and Realistic 
Wireless Experimentation Through Physical Emulation,” 
SIGCOMM Comput. Commun. Rev., vol. 34, no. 1, pp. 
63–68, 2004. 
31. J. Kirch, “Virtual machine security guidelines,” The 
Center for Internet Security, Tech. Rep., 2007. 
32. H.-Y. Tsai, M. Siebenhaar, A. Miede, Y. Huang, and R. 
Steinmetz, “Threat as a service?: Virtualization’s impact 
on cloud security,” IT Professional, vol. 14, no. 1, pp. 
32–37, 2012.
Security Impacts of Virtualization on a Network Testbed
Yu-Lun Huang, Borting Chen, Ming-Wei Shih, Chien-Yu Lai
Department of Electrical and Computer Engineering
National Chiao-Tung University
Hsinchu, Taiwan
Email: ylhuang@cn.nctu.edu.tw, {bortingchen, windheart120, gavin09}@gmail.com
Abstract—Modern virtualization technologies provides an
optimal use of underused hardware resources by sharing
them among virtual machines hosted on the same physi-
cal machine. These technologies hence have been broadly
adopted in many areas, such as server consolidation, virtu-
alized network testbeds, etc. A large-scale network testbed is
considered one of the useful tools for evaluating or verifying
advanced networking technologies. To construct a network
testbed that matches as much as a real setup, the testbed
should meet requirements of isolation, fidelity, repeatabil-
ity, scalability, containment and extensibility. Among these
requirements, scalability can be realized by the modern
virtualization technology, whereas vulnerability and security
weakness brought along with virtualization can also be
harmful to the other requirements of a network testbed,
like isolation and fidelity. This paper reviews the mod-
ern virtualization technologies, their resource management
mechanisms, and the known attacks of these virtualization
technologies. Then, we discuss the requirements of existing
network testbeds and the security impacts when introducing
such modern virtualization technologies into a network
testbed.
I. INTRODUCTION
Virtualization technologies have been massively
adopted in many areas, such as cloud computing [1],
server consolidation [2] and high performance computing
[3], for their multitudinous benefits. With such modern
technologies, multiple virtual machines can be launched
and executed on a single physical machine. Each virtual
machine is independent of the other and is able to run
its own operating system. Hence, greater scalability and
better resource utilization can be achieved with the aids
of virtualization technologies.
Virtualization can also be applied to a network testbed.
Traditionally, a physical device supports a network node
in an emulation-based testbed. The functionalities of a
network testbed are then restricted by the limitations of
the physical device. With the advance of modern virtual-
ization technologies, scalability of a network testbed has
been improved dramatically. A physical device, running
multiple virtual machines, can be used to represent mul-
tiple virtual network nodes in a network testbed. Hence,
the testbed is also advanced to support larger and more
complex emulated networks at the same time.
In the past few years, some prior research has adopted
virtualization technologies in their network testbeds; for
example, FreeBSD jail in Emulab [4], Linux-VServers
in PlanetLab [5] and OpenVZ in ORBIT [6] [7] [8]. In
these “virtualized” testbeds, the research teams mainly
focus on the performances of their testbeds, and rarely
discuss the security issues and vulnerabilities of modern
virtualization technologies (such as VM Hyperjacking,
VM Escape, VM Hopping, VM Monitoring and VM
Denial-of-Service (DoS) attacks). However, attacking vir-
tual machines in a ”virtualized” testbed may potentially
break the fundamental requirements of a network testbed.
In this paper, we review the modern virtualization tech-
nologies and the existing network testbeds, and discuss
the security issues of a network testbed when applying
the modern virtualization technologies.
The paper is organized as follows. Section II briefly
explains the characteristics of virtualization technologies,
and Section III presents the fundamental requirements and
challenges to designing a network testbed. In Section IV,
we explain the security requirements and known attacks
of modern virtualization technologies. We also discuss
the security impacts on building up a virtualized network
testbed. In the end, we conclude the paper in Section V.
II. VIRTUALIZATION TECHNOLOGIES
Advance of the dramatic growth of computing power,
resources of computing systems are usually underused.
Modern virtualization technologies provide an optimal
use of hardware to consolidate resources and reduce
costs. The scalability and resource reusability are hence
improved.
Virtualization allows resource abstraction and environ-
ment isolation. However, there is not just one way to
virtualize a system. Virtualization technologies can be
further classified into two types: container-based virtual-
ization and hypervisor-based virtualization. The following
paragraphs depict the existing container-based virtualiza-
tion technologies [9].
A. Container-based Virtualization
With container-based virtualization, a host machine and
its virtual machines, running at OS-level, share the same
OS kernel. The container-based virtualization isolates the
guest OSes, but does not virtualize the underlying hard-
ware. Each virtual environment created by the container-
based virtualization is called a container. Applications
running in one container (virtual machine) can be isolated
from applications running in other containers.
Based on a single patched Linux kernel, OpenVZ
[10] allows a physical machine to run multiple virtual
machines (containers). Each container is represented by
a directory of files that can be isolated using chroot
and can be launched as a userspace process running in
the host operating system. When applying OpenVZ to
create a virtual environment, it is restricted to run the
same operating system on both host and guest virtual
machines. OpenVZ, as a container-based virtualization
Xen	  Hypervisor	  
Dom0
VM1
VM2
VM3
VM1
Resource	  
Mgnt
Figure 2. Xen Hypervisor
vSphere	  Hypervisor	  
VM1
VM2
VM3
VM1
Resource	  
Mgnt
Figure 3. VMWare vSphere Hypervisor
• Xen Hypervisor
Xen Hypervisor is a free open source virtual machine
monitor that can manage physical resources, includ-
ing CPU, memory and I/O. The paravirtualization
technique adopted in Xen makes certain optimiza-
tions in the virtualized OSes to maintain a near
native performance. Hence, each Xen virtual ma-
chine (VM1, VM2, ... VMN ) runs as an idependent
operating system instance and is being executed on
top of the Xen hypervisor, as illustrated in Fig. 2.
Through the Xen hypervisor, a virtual instance can
access the physical resources shared with other vir-
tual machines running on the same host. Also, by
packing applications in one virtual machine, Xen can
isolate the failure in another virtual machine hosted
on the same physical hardware.
• VMWare vSphere Hypervisor
Taking the VMWare ESXI hypervisor architecture
as a basis, VMWare vSphere hypervisor, shown in
Fig. 3, runs directly on the hardware layer and acts
as an independent operating system. The vSphere
kernel helps isolate guest virtual machines, allocate
physical hardware and balance the loads of virtual
resources.
III. NETWORK TESTBEDS
Network testbeds give researchers and system develop-
ers a variety of testing environments in which to develop,
debug and evaluate the newly proposed protocols, systems
and products. In this section, we briefly introduce the
existing testbeds: Emulab, DETER, ORBIT radio grid
testbed and PlanetLab.
• Emulab [21] [22], developed by University of Utah,
is an emulation platform for research in distributed
systems and networks. In Emulab, a set of exper-
iment nodes are flexibly connected in a network
topology. By configuring different VLANs (virtual
local area networks), experiments running on the
Emulab testbed can be isolated from each other.
• DETER [23], built on top of Emulab, provides an
infrastructure for conducting repeatable experiments
in computer security, especially those involving ma-
licious codes. Since DETER is designed to support
security-related experiments [24] [25] [26], contain-
ment and security are the basic requirements in
developing such a testbed. The design of the DETER
testbed is an effective compromise of the goals of
experimental fidelity, repeatability, programmability
and research functionality.
• ORBIT [6] [7] [8] is a two-tier wireless testbed
designed for 3G and 802.11 networks. The testbed
comprises a grid of 802.11 nodes and can dynami-
cally interconnect these nodes into specified topolo-
gies. Each ORBIT radio node is a real device (PC)
with two Ethernet ports and two 802.11 network
interfaces, rather than an emulated device.
• PlanetLab [5] offers an open platform to serve as a
testbed for overlay networks. Researchers are able
to conduct experiments under real-world conditions,
and at a large scale. A original (unmodified) software
package, including a Linux-based OS, bootstrapping
mechanism, software updates and management tools,
can be executed on all PlanetLab experiment nodes.
Public network testbeds typically use a time-sharing
model to guarantee the availability of experiment nodes
during the reservation period. The conventional require-
ments for building a wired or wireless network testbed are
to: (1) avoid interference and provide isolation, (2) keep
fidelity in emulating a network, (3) guarantee repeatability
of experiments, (4) ensure scalability, (5) offer contain-
ment; and (6) provide extensibility (if wireless networking
technologies are considered).
• Isolation
Interference may come from a numerous sources,
including attacks across experiments, performance
degradation due to other experiments, information
disclosure, inter-experiment data pollution, etc. Per-
experiment isolation hence becomes one of the crit-
ical security problems when designing a network
testbed.
• Fidelity
Fidelity, as one of the most important challenges to
building up a network testbed, refers to the degree to
which a simulation reproduces the behavior of a real
world object or a real world condition. A simulated
testbed must maintain fidelity to “real” networks.
• Repeatability
A critical objective of constructing a network testbed
is to support repeatable experiments. General net-
work testbeds ideally can handle issues of network
scale, topology, available bandwidth, traffic type,
and a variety of host operating systems. Wireless
testbeds must additionally be able to handle radio
Physical	  Hardware
OS
AppApp
…
Physical	  Hardware
OS
AppApp
…
Rouge	  HypervisorHyperjacking
Figure 4. VM Hyperjacking Attack
• VM Escape [28]
VM Escapeis an exploiting process that enables a
hacker to access the host OS (or the virtual machine
manager) from a virtual machine. These attacks
leverage the vulnerability or misconfiguration of the
host OS and penetrate through the virtualization
layer. Since the host machine is root privileged, an
attacker escaping from a virtual machine can gain
access over the host OS, and attack the other virtual
machines or alter their configurations.
• VM Hopping [28], [29]
VM Hopping is an attack that an attacker on one
virtual machine hops to another virtual machine
sitting on the same host. The prerequisite of the
attack is to obtain the IP addresses of the victim
virtual machines so that the attacker can break the
isolation control through the internal network bridge.
• VM Monitoring [30], [31]
Isolation is considered to be the primary charac-
teristic when designing a virtualization technology.
However, without proper configurations, a virtual
machine may obtain the access permission and mon-
itor the resource utilization of other virtual machines
residing on the same host.
• VM DoS [31]
Generally, a virtualization technology is designed
to share physical resources among multiple virtual
machines and improve the utilization of physical
resources. In this attack, an attacker may launch
a Denial of Service (DoS) attack in one virtual
machine and try to exhaust all available resources. It
can result in a situation that other virtual machines
running on the same host starve for resources.
• VM Mobility [32]
With the existing virtualization technologies, a vir-
tual machine can be saved as an image file such that
the virtual machine can be transferred to other host
machine easily. The mobility of a virtual machine
enables the quick deployment and helps balance
the workload of a system. However, such trend of
mobility also leads to quick spreading of vulnerable
configurations of a virtual machine. An attacker
can then exploit the vulnerable configurations to
compromise the security of the new host.
Table I summarizes the impacts of these attacks on the
security requirements of virtualization:
C. Security Impacts
Threats to a virtualized network testbed become com-
plicated, especially when physical machines and virtual
machines are mixed in conducting an experiment. Here,
we discuss the possible security impacts on network
testbeds running with different virtualization technolo-
gies.
Table I
ATTACKS VS. SECURITY REQUIREMENTS
Known Attacks Affected Security
Requirements of Virutalization
VM Hyperjacking C, I, A
VM Escape C, I, A
VM Hopping C, I, A
VM Monitoring C
VM DoS A
VM Mobility N/A∗
C: Confidentiality; I: Integrity; A: Availability
The VM Mobility attack speeds up the spread of erroneous configurations or
vulnerabilities.
Physical	  Hardware
Hypervisor
VM1 …
OS
VM2 VMi VMi+1 …Vmi+2 VMn
Experiment1 Experiment2
Figure 5. VM Escape Attack
Even container itself can be guaranteed secure, the
testbeds are still vulnerable to attacks like VM Hyper-
jacking, VM Escape, VM Hopping, VM Monitoring and
VM DoS. An attacker may try to obtain root access of
the host OS, inject virus or malware and damage the
fundamental requirements of the network testbeds, such
as isolation, fidelity, scalability, security, etc. Hypervisor-
based virtualization technologies introduce a hypervisor
to manage and control the resource allocation, but make
the hypervisor a new attacking target. Hence, the network
testbeds with hypervisor-based virtualization technologies
have no way but enhance themselves to deal with the new
challenges of these new VM attacks.
VM Hyperjacking attacks can be launched to attack
both container-based and hypervisor-based virtualization
systems. Such attacks may leverage any vulnerability of
a general OS and exploit the host OS to damage the
isolation of a network testbed.
In a VM Escape attack, more than two experiments
may be tainted, if these experiments allocate different vir-
tual machines running on the same host. Fig. 5 shows an
example of a VM Escape attack on a testbed running two
experiments on the same host machine. In the example,
the host machine runs several virtual machines (VM1,
VM2, · · · VMn). The first experiment allocates virtual
machines VM1, VM2, · · · VMi, while the second takes
VMi+1, VMi+2, · · · , VMn. The VM Escape attack is
mainly launched to attack a hypervisor-based virtualized
system. In addition, a container-based virtualized system
may also suffer from such an attack, especially when
chroot-like utilities are used to isolate virtual filesystems
for virtual machines.
VM Hopping attacks are possible in both container-
based and hypervisor-based virtualized systems, espe-
cially in a testbed running container-based virtualization
technologies. Similar to a VM Escape attack, the home
[7] G. Bhanage, I. Seskar, Y. Zhang, and D. Raychaudhuri,
“Evaluation of openvz based wireless testbed virtualiza-
tion,” Tech. Rep. WINLAB-TR-331, Rutgers University,
Tech. Rep., 2008.
[8] G. Bhanage, I. Seskar, Y. Zhang, D. Raychaudhuri, and
S. Jain, “Experimental evaluation of openvz from a testbed
deployment perspective,” ICST Tridentcom, 2010.
[9] S. Soltesz, H. Po¨tzl, M. E. Fiuczynski, A. Bavier,
and L. Peterson, “Container-based operating system
virtualization: a scalable, high-performance alternative
to hypervisors,” SIGOPS Oper. Syst. Rev., vol. 41,
no. 3, pp. 275–287, Mar. 2007. [Online]. Available:
http://doi.acm.org/10.1145/1272998.1273025
[10] K. Kolyshkin, “Virtualization in linux,” White paper,
OpenVZ, 2006.
[11] “Openvz linux containers.” [Online]. Available: http:
//wiki.openvz.org/Main Page
[12] P. Kamp and R. Watson, “Jails: Confining the omnipotent
root,” in Proceedings of the 2nd International SANE
Conference, vol. 43, 2000, p. 116.
[13] B. des Ligneris, “Virtualization of linux based com-
puters: the linux-vserver project,” in High Performance
Computing Systems and Applications, 2005. HPCS 2005.
19th International Symposium on. IEEE, 2005, pp. 340–
346.
[14] A. Kivity, U. Lublin, and A. Liguori, “kvm : the linux
virtual machine monitor,” Proceedings of the 2007 Linux
Symposium, vol. 1, no. 1465-6914 (Electronic) LA -
ENG PT - JOURNAL ARTICLE, p. 225V230, 2007.
[Online]. Available: http://www.kernel.org/doc/ols/2007/
ols2007v1-pages-225-230.pdf
[15] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris,
A. Ho, R. Neugebauer, I. Pratt, and A. Warfield, “Xen
and the art of virtualization,” SIGOPS Oper. Syst. Rev.,
vol. 37, no. 5, pp. 164–177, Oct. 2003. [Online].
Available: http://doi.acm.org/10.1145/1165389.945462
[16] B. Clark, T. Deshane, E. Dow, S. Evanchik, M. Finlayson,
J. Herne, and J. Matthews, “Xen and the art of repeated
research,” in Proceedings of the annual conference on
USENIX Annual Technical Conference. USENIX As-
sociation, 2004, pp. 47–47.
[17] I. Pratt, K. Fraser, S. Hand, C. Limpach, A. Warfield,
D. Magenheimer, J. Nakajima, and A. Mallick, “Xen
3.0 and the art of virtualization,” in Linux Symposium.
Citeseer, 2005, p. 65.
[18] I. Pratt, “Xen roadmap,” url-
http://downloads.xen.org/Wiki/XenRoadmap/, 7 2006.
[19] “Qemu open source processor emulator.” [Online].
Available: www.qemu.org/
[20] T. Abels, P. Dhawan, and B. Chandrasekaran, “An
overview of xen virtualization,” Dell Inc., Tech. Rep., 8
2005.
[21] G. Judd and P. Steenkiste, “Repeatable and Realistic
Wireless Experimentation Through Physical Emulation,”
SIGCOMM Comput. Commun. Rev., vol. 34, no. 1, pp.
63–68, 2004.
[22] ——, “A Software Architecture for Physical Layer Wire-
less Network Emulation,” in WiNTECH ’06: Proceedings
of the 1st International Workshop on Wireless Network
Testbeds, Experimental Evaluation & Characterization.
New York, NY, USA: ACM, 2006, pp. 2–9.
[23] T. Benzel, R. Braden, D. Kim, C. Neumana, A. Joseph,
K. Sklower, R. Ostrenga, and S. Schwab, “Experience with
DETER: A Testbed for Security Research,” in Proceedings
of Tridentcom. IEEE, 2006, pp. 10–10.
[24] J. Mirkovic, B. Wilson, A. Hussain, S. Fahmy, P. Rei-
her, R. Thomas, and S. Schwab, “Automating DDoS
Experimentation,” in DETER: Proceedings of the DETER
Community Workshop on Cyber Security Experimentation
and Test 2007. USENIX Association, 2007, pp. 4–4.
[25] J. Mirkovic, P. Reiher, S. Fahmy, R. Thomas, A. Hussain,
S. Schwab, and C. Ko, “Measuring Denial of Service,”
in Proceedings of the 2nd ACM Workshop on Quality of
Protection. ACM, 2006, pp. 53–58.
[26] J. Mirkovic, E. Arikan, S. Wei, S. Fahmy, R. Thomas, and
P. Reiher, “Benchmarks for DDoS Defense Evaluation,” in
Proceedings of MILCOM. IEEE, 2006, pp. 1–10.
[27] A. A. Semnanian, J. Pham, B. Englert, and X. Wu,
“Virtualization technology and its impact on com-
puter hardware architecture,” in Information Technology:
New Generations (ITNG), 2011 Eighth International
Conference on, 2011, pp. 719–724.
[28] K. Owens, “Securing virtual compute infrastructure in the
cloud,” white paper, Savvis Communications Corporation,
Tech. Rep., 2009.
[29] A. Jasti, P. Shah, R. Nagaraj, and R. Pendse, “Security
in multi-tenancy cloud,” in Security Technology (ICCST),
2010 IEEE International Carnahan Conference on, 2010,
pp. 35–41.
[30] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage,
“Hey, you, get off of my cloud: exploring information leak-
age in third-party compute clouds,” in Proceedings of the
16th ACM conference on Computer and communications
security, 2009, pp. 199–212.
[31] J. Kirch, “Virtual machine security guidelines,” The Center
for Internet Security, Tech. Rep., 2007.
[32] H.-Y. Tsai, M. Siebenhaar, A. Miede, Y. Huang, and
R. Steinmetz, “Threat as a service?: Virtualization’s impact
on cloud security,” IT Professional, vol. 14, no. 1, pp. 32–
37, 2012.
表 Y04 
報告內容應包括下列各項： 
一、參加會議經過 
 
本次研討會安排了三場 Keynote 演講、三場 Invited 演講，討論目前最熱門的研究
主題，包括開發軟體時所受到的人為因素的影響、人機的信任模型、同步程式的安全特
質檢測、軟體相依度的評估、分析與評估軟體安全度的正規模型、Android 安全評估與
檢測等。本年度總共有來自 18 個國家的論文投稿，接受 31 篇，接受率約為 30%。 
本人於會議開始第一天下午報告本次投稿之論文「Security Impacts of Virtualization 
on a Network Testbed」，並與與會人士積極討論現今虛擬技術的安全度，以及這些不夠
安全的虛擬技術對現有的雲端系統的影響，收穫極大。會議第二天，本人受邀擔任大會
Information Assurance Workshop 的 session chair，除了引薦當場次的受邀講者 Angelos 
Stavrou 教授，並成功地主導該場次會議之進行。這次會議場所選在美國國家技術標準
局 National Institute of Standards and Technology（NIST），雖然交通稍微不方便，
但能參觀到許多從此處產出的技術與標準原型，真是不虛此行。 
 
二、與會心得 
 
參與本年度 SERE 研討會，幫助本人了解國際資安領域頂尖研究人員所重視的最新
資安議題，了解學術潮流。此外，藉由與國際資安大師 Virgil Gligor 與 Stephen S. Yau 
等教授交流，討論人際關係強度、互動屬性與軟體應用程式的安全度之間的影響。討論
議題同時包含如何依據互動屬性量測人際關係強度，以及驗證此量測結果的方法。Prof. 
Gligor 提到，人際關係的強度量測結果可能可以反應使用者在某種應用上的互動頻繁
度，但在另一種應用上，卻無法反應使用者彼此之間的瞭解深度。例如，使用者 A 也
許與使用者 B 互動頻繁，但是卻無法得知使用者 A 所擅長的科目。是不是有一種量測
方法可以適用在一或多種應用上反應使用者間的強度關係，是一個相當值得討論的議
題。 
在這次會議中，難得地遇到許多國際資安學者與大師，能與他們討論許多可信任模
型的建立、軟體強韌度的評估等問題，讓本人對未來可能研發方向獲得更多啟發，收穫
甚大。 
 
 
三、考察參觀活動(無是項活動者省略) 
 
無 
 
四、建議 
宜多鼓勵年輕學者/學生參與國際研討會，增加與國外學者的交流、與國際研究接軌。 
 
五、攜回資料名稱及內容 
 
資料名稱 
Conference Proceedings, CDROM,  
BMS Part Number: CFP12SIR-CDR, 
Product Number: E4742, E4743, 
ISBN: 978-0-7695-4742-8, ISBN: 978-0-7695-4743-5 
內容 
International Conference on Software Security and Reliability 論文集 
Security Impacts of Virtualization on a Network Testbed
Yu-Lun Huang, Borting Chen, Ming-Wei Shih, Chien-Yu Lai
Department of Electrical and Computer Engineering
National Chiao-Tung University
Hsinchu, Taiwan
Email: ylhuang@cn.nctu.edu.tw, {bortingchen, windheart120, gavin09}@gmail.com
Abstract—Modern virtualization technologies provides an
optimal use of underused hardware resources by sharing
them among virtual machines hosted on the same physi-
cal machine. These technologies hence have been broadly
adopted in many areas, such as server consolidation, virtu-
alized network testbeds, etc. A large-scale network testbed is
considered one of the useful tools for evaluating or verifying
advanced networking technologies. To construct a network
testbed that matches as much as a real setup, the testbed
should meet requirements of isolation, fidelity, repeatabil-
ity, scalability, containment and extensibility. Among these
requirements, scalability can be realized by the modern
virtualization technology, whereas vulnerability and security
weakness brought along with virtualization can also be
harmful to the other requirements of a network testbed,
like isolation and fidelity. This paper reviews the mod-
ern virtualization technologies, their resource management
mechanisms, and the known attacks of these virtualization
technologies. Then, we discuss the requirements of existing
network testbeds and the security impacts when introducing
such modern virtualization technologies into a network
testbed.
I. INTRODUCTION
Virtualization technologies have been massively
adopted in many areas, such as cloud computing [1],
server consolidation [2] and high performance computing
[3], for their multitudinous benefits. With such modern
technologies, multiple virtual machines can be launched
and executed on a single physical machine. Each virtual
machine is independent of the other and is able to run
its own operating system. Hence, greater scalability and
better resource utilization can be achieved with the aids
of virtualization technologies.
Virtualization can also be applied to a network testbed.
Traditionally, a physical device supports a network node
in an emulation-based testbed. The functionalities of a
network testbed are then restricted by the limitations of
the physical device. With the advance of modern virtual-
ization technologies, scalability of a network testbed has
been improved dramatically. A physical device, running
multiple virtual machines, can be used to represent mul-
tiple virtual network nodes in a network testbed. Hence,
the testbed is also advanced to support larger and more
complex emulated networks at the same time.
In the past few years, some prior research has adopted
virtualization technologies in their network testbeds; for
example, FreeBSD jail in Emulab [4], Linux-VServers
in PlanetLab [5] and OpenVZ in ORBIT [6] [7] [8]. In
these “virtualized” testbeds, the research teams mainly
focus on the performances of their testbeds, and rarely
discuss the security issues and vulnerabilities of modern
virtualization technologies (such as VM Hyperjacking,
VM Escape, VM Hopping, VM Monitoring and VM
Denial-of-Service (DoS) attacks). However, attacking vir-
tual machines in a ”virtualized” testbed may potentially
break the fundamental requirements of a network testbed.
In this paper, we review the modern virtualization tech-
nologies and the existing network testbeds, and discuss
the security issues of a network testbed when applying
the modern virtualization technologies.
The paper is organized as follows. Section II briefly
explains the characteristics of virtualization technologies,
and Section III presents the fundamental requirements and
challenges to designing a network testbed. In Section IV,
we explain the security requirements and known attacks
of modern virtualization technologies. We also discuss
the security impacts on building up a virtualized network
testbed. In the end, we conclude the paper in Section V.
II. VIRTUALIZATION TECHNOLOGIES
Advance of the dramatic growth of computing power,
resources of computing systems are usually underused.
Modern virtualization technologies provide an optimal
use of hardware to consolidate resources and reduce
costs. The scalability and resource reusability are hence
improved.
Virtualization allows resource abstraction and environ-
ment isolation. However, there is not just one way to
virtualize a system. Virtualization technologies can be
further classified into two types: container-based virtual-
ization and hypervisor-based virtualization. The following
paragraphs depict the existing container-based virtualiza-
tion technologies [9].
A. Container-based Virtualization
With container-based virtualization, a host machine and
its virtual machines, running at OS-level, share the same
OS kernel. The container-based virtualization isolates the
guest OSes, but does not virtualize the underlying hard-
ware. Each virtual environment created by the container-
based virtualization is called a container. Applications
running in one container (virtual machine) can be isolated
from applications running in other containers.
Based on a single patched Linux kernel, OpenVZ
[10] allows a physical machine to run multiple virtual
machines (containers). Each container is represented by
a directory of files that can be isolated using chroot
and can be launched as a userspace process running in
the host operating system. When applying OpenVZ to
create a virtual environment, it is restricted to run the
same operating system on both host and guest virtual
machines. OpenVZ, as a container-based virtualization
Xen	  Hypervisor	  
Dom0
VM1
VM2
VM3
VM1
Resource	  
Mgnt
Figure 2. Xen Hypervisor
vSphere	  Hypervisor	  
VM1
VM2
VM3
VM1
Resource	  
Mgnt
Figure 3. VMWare vSphere Hypervisor
• Xen Hypervisor
Xen Hypervisor is a free open source virtual machine
monitor that can manage physical resources, includ-
ing CPU, memory and I/O. The paravirtualization
technique adopted in Xen makes certain optimiza-
tions in the virtualized OSes to maintain a near
native performance. Hence, each Xen virtual ma-
chine (VM1, VM2, ... VMN ) runs as an idependent
operating system instance and is being executed on
top of the Xen hypervisor, as illustrated in Fig. 2.
Through the Xen hypervisor, a virtual instance can
access the physical resources shared with other vir-
tual machines running on the same host. Also, by
packing applications in one virtual machine, Xen can
isolate the failure in another virtual machine hosted
on the same physical hardware.
• VMWare vSphere Hypervisor
Taking the VMWare ESXI hypervisor architecture
as a basis, VMWare vSphere hypervisor, shown in
Fig. 3, runs directly on the hardware layer and acts
as an independent operating system. The vSphere
kernel helps isolate guest virtual machines, allocate
physical hardware and balance the loads of virtual
resources.
III. NETWORK TESTBEDS
Network testbeds give researchers and system develop-
ers a variety of testing environments in which to develop,
debug and evaluate the newly proposed protocols, systems
and products. In this section, we briefly introduce the
existing testbeds: Emulab, DETER, ORBIT radio grid
testbed and PlanetLab.
• Emulab [21] [22], developed by University of Utah,
is an emulation platform for research in distributed
systems and networks. In Emulab, a set of exper-
iment nodes are flexibly connected in a network
topology. By configuring different VLANs (virtual
local area networks), experiments running on the
Emulab testbed can be isolated from each other.
• DETER [23], built on top of Emulab, provides an
infrastructure for conducting repeatable experiments
in computer security, especially those involving ma-
licious codes. Since DETER is designed to support
security-related experiments [24] [25] [26], contain-
ment and security are the basic requirements in
developing such a testbed. The design of the DETER
testbed is an effective compromise of the goals of
experimental fidelity, repeatability, programmability
and research functionality.
• ORBIT [6] [7] [8] is a two-tier wireless testbed
designed for 3G and 802.11 networks. The testbed
comprises a grid of 802.11 nodes and can dynami-
cally interconnect these nodes into specified topolo-
gies. Each ORBIT radio node is a real device (PC)
with two Ethernet ports and two 802.11 network
interfaces, rather than an emulated device.
• PlanetLab [5] offers an open platform to serve as a
testbed for overlay networks. Researchers are able
to conduct experiments under real-world conditions,
and at a large scale. A original (unmodified) software
package, including a Linux-based OS, bootstrapping
mechanism, software updates and management tools,
can be executed on all PlanetLab experiment nodes.
Public network testbeds typically use a time-sharing
model to guarantee the availability of experiment nodes
during the reservation period. The conventional require-
ments for building a wired or wireless network testbed are
to: (1) avoid interference and provide isolation, (2) keep
fidelity in emulating a network, (3) guarantee repeatability
of experiments, (4) ensure scalability, (5) offer contain-
ment; and (6) provide extensibility (if wireless networking
technologies are considered).
• Isolation
Interference may come from a numerous sources,
including attacks across experiments, performance
degradation due to other experiments, information
disclosure, inter-experiment data pollution, etc. Per-
experiment isolation hence becomes one of the crit-
ical security problems when designing a network
testbed.
• Fidelity
Fidelity, as one of the most important challenges to
building up a network testbed, refers to the degree to
which a simulation reproduces the behavior of a real
world object or a real world condition. A simulated
testbed must maintain fidelity to “real” networks.
• Repeatability
A critical objective of constructing a network testbed
is to support repeatable experiments. General net-
work testbeds ideally can handle issues of network
scale, topology, available bandwidth, traffic type,
and a variety of host operating systems. Wireless
testbeds must additionally be able to handle radio
Physical	  Hardware
OS
AppApp
…
Physical	  Hardware
OS
AppApp
…
Rouge	  HypervisorHyperjacking
Figure 4. VM Hyperjacking Attack
• VM Escape [28]
VM Escapeis an exploiting process that enables a
hacker to access the host OS (or the virtual machine
manager) from a virtual machine. These attacks
leverage the vulnerability or misconfiguration of the
host OS and penetrate through the virtualization
layer. Since the host machine is root privileged, an
attacker escaping from a virtual machine can gain
access over the host OS, and attack the other virtual
machines or alter their configurations.
• VM Hopping [28], [29]
VM Hopping is an attack that an attacker on one
virtual machine hops to another virtual machine
sitting on the same host. The prerequisite of the
attack is to obtain the IP addresses of the victim
virtual machines so that the attacker can break the
isolation control through the internal network bridge.
• VM Monitoring [30], [31]
Isolation is considered to be the primary charac-
teristic when designing a virtualization technology.
However, without proper configurations, a virtual
machine may obtain the access permission and mon-
itor the resource utilization of other virtual machines
residing on the same host.
• VM DoS [31]
Generally, a virtualization technology is designed
to share physical resources among multiple virtual
machines and improve the utilization of physical
resources. In this attack, an attacker may launch
a Denial of Service (DoS) attack in one virtual
machine and try to exhaust all available resources. It
can result in a situation that other virtual machines
running on the same host starve for resources.
• VM Mobility [32]
With the existing virtualization technologies, a vir-
tual machine can be saved as an image file such that
the virtual machine can be transferred to other host
machine easily. The mobility of a virtual machine
enables the quick deployment and helps balance
the workload of a system. However, such trend of
mobility also leads to quick spreading of vulnerable
configurations of a virtual machine. An attacker
can then exploit the vulnerable configurations to
compromise the security of the new host.
Table I summarizes the impacts of these attacks on the
security requirements of virtualization:
C. Security Impacts
Threats to a virtualized network testbed become com-
plicated, especially when physical machines and virtual
machines are mixed in conducting an experiment. Here,
we discuss the possible security impacts on network
testbeds running with different virtualization technolo-
gies.
Table I
ATTACKS VS. SECURITY REQUIREMENTS
Known Attacks Affected Security
Requirements of Virutalization
VM Hyperjacking C, I, A
VM Escape C, I, A
VM Hopping C, I, A
VM Monitoring C
VM DoS A
VM Mobility N/A∗
C: Confidentiality; I: Integrity; A: Availability
The VM Mobility attack speeds up the spread of erroneous configurations or
vulnerabilities.
Physical	  Hardware
Hypervisor
VM1 …
OS
VM2 VMi VMi+1 …Vmi+2 VMn
Experiment1 Experiment2
Figure 5. VM Escape Attack
Even container itself can be guaranteed secure, the
testbeds are still vulnerable to attacks like VM Hyper-
jacking, VM Escape, VM Hopping, VM Monitoring and
VM DoS. An attacker may try to obtain root access of
the host OS, inject virus or malware and damage the
fundamental requirements of the network testbeds, such
as isolation, fidelity, scalability, security, etc. Hypervisor-
based virtualization technologies introduce a hypervisor
to manage and control the resource allocation, but make
the hypervisor a new attacking target. Hence, the network
testbeds with hypervisor-based virtualization technologies
have no way but enhance themselves to deal with the new
challenges of these new VM attacks.
VM Hyperjacking attacks can be launched to attack
both container-based and hypervisor-based virtualization
systems. Such attacks may leverage any vulnerability of
a general OS and exploit the host OS to damage the
isolation of a network testbed.
In a VM Escape attack, more than two experiments
may be tainted, if these experiments allocate different vir-
tual machines running on the same host. Fig. 5 shows an
example of a VM Escape attack on a testbed running two
experiments on the same host machine. In the example,
the host machine runs several virtual machines (VM1,
VM2, · · · VMn). The first experiment allocates virtual
machines VM1, VM2, · · · VMi, while the second takes
VMi+1, VMi+2, · · · , VMn. The VM Escape attack is
mainly launched to attack a hypervisor-based virtualized
system. In addition, a container-based virtualized system
may also suffer from such an attack, especially when
chroot-like utilities are used to isolate virtual filesystems
for virtual machines.
VM Hopping attacks are possible in both container-
based and hypervisor-based virtualized systems, espe-
cially in a testbed running container-based virtualization
technologies. Similar to a VM Escape attack, the home
[7] G. Bhanage, I. Seskar, Y. Zhang, and D. Raychaudhuri,
“Evaluation of openvz based wireless testbed virtualiza-
tion,” Tech. Rep. WINLAB-TR-331, Rutgers University,
Tech. Rep., 2008.
[8] G. Bhanage, I. Seskar, Y. Zhang, D. Raychaudhuri, and
S. Jain, “Experimental evaluation of openvz from a testbed
deployment perspective,” ICST Tridentcom, 2010.
[9] S. Soltesz, H. Po¨tzl, M. E. Fiuczynski, A. Bavier,
and L. Peterson, “Container-based operating system
virtualization: a scalable, high-performance alternative
to hypervisors,” SIGOPS Oper. Syst. Rev., vol. 41,
no. 3, pp. 275–287, Mar. 2007. [Online]. Available:
http://doi.acm.org/10.1145/1272998.1273025
[10] K. Kolyshkin, “Virtualization in linux,” White paper,
OpenVZ, 2006.
[11] “Openvz linux containers.” [Online]. Available: http:
//wiki.openvz.org/Main Page
[12] P. Kamp and R. Watson, “Jails: Confining the omnipotent
root,” in Proceedings of the 2nd International SANE
Conference, vol. 43, 2000, p. 116.
[13] B. des Ligneris, “Virtualization of linux based com-
puters: the linux-vserver project,” in High Performance
Computing Systems and Applications, 2005. HPCS 2005.
19th International Symposium on. IEEE, 2005, pp. 340–
346.
[14] A. Kivity, U. Lublin, and A. Liguori, “kvm : the linux
virtual machine monitor,” Proceedings of the 2007 Linux
Symposium, vol. 1, no. 1465-6914 (Electronic) LA -
ENG PT - JOURNAL ARTICLE, p. 225V230, 2007.
[Online]. Available: http://www.kernel.org/doc/ols/2007/
ols2007v1-pages-225-230.pdf
[15] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris,
A. Ho, R. Neugebauer, I. Pratt, and A. Warfield, “Xen
and the art of virtualization,” SIGOPS Oper. Syst. Rev.,
vol. 37, no. 5, pp. 164–177, Oct. 2003. [Online].
Available: http://doi.acm.org/10.1145/1165389.945462
[16] B. Clark, T. Deshane, E. Dow, S. Evanchik, M. Finlayson,
J. Herne, and J. Matthews, “Xen and the art of repeated
research,” in Proceedings of the annual conference on
USENIX Annual Technical Conference. USENIX As-
sociation, 2004, pp. 47–47.
[17] I. Pratt, K. Fraser, S. Hand, C. Limpach, A. Warfield,
D. Magenheimer, J. Nakajima, and A. Mallick, “Xen
3.0 and the art of virtualization,” in Linux Symposium.
Citeseer, 2005, p. 65.
[18] I. Pratt, “Xen roadmap,” url-
http://downloads.xen.org/Wiki/XenRoadmap/, 7 2006.
[19] “Qemu open source processor emulator.” [Online].
Available: www.qemu.org/
[20] T. Abels, P. Dhawan, and B. Chandrasekaran, “An
overview of xen virtualization,” Dell Inc., Tech. Rep., 8
2005.
[21] G. Judd and P. Steenkiste, “Repeatable and Realistic
Wireless Experimentation Through Physical Emulation,”
SIGCOMM Comput. Commun. Rev., vol. 34, no. 1, pp.
63–68, 2004.
[22] ——, “A Software Architecture for Physical Layer Wire-
less Network Emulation,” in WiNTECH ’06: Proceedings
of the 1st International Workshop on Wireless Network
Testbeds, Experimental Evaluation & Characterization.
New York, NY, USA: ACM, 2006, pp. 2–9.
[23] T. Benzel, R. Braden, D. Kim, C. Neumana, A. Joseph,
K. Sklower, R. Ostrenga, and S. Schwab, “Experience with
DETER: A Testbed for Security Research,” in Proceedings
of Tridentcom. IEEE, 2006, pp. 10–10.
[24] J. Mirkovic, B. Wilson, A. Hussain, S. Fahmy, P. Rei-
her, R. Thomas, and S. Schwab, “Automating DDoS
Experimentation,” in DETER: Proceedings of the DETER
Community Workshop on Cyber Security Experimentation
and Test 2007. USENIX Association, 2007, pp. 4–4.
[25] J. Mirkovic, P. Reiher, S. Fahmy, R. Thomas, A. Hussain,
S. Schwab, and C. Ko, “Measuring Denial of Service,”
in Proceedings of the 2nd ACM Workshop on Quality of
Protection. ACM, 2006, pp. 53–58.
[26] J. Mirkovic, E. Arikan, S. Wei, S. Fahmy, R. Thomas, and
P. Reiher, “Benchmarks for DDoS Defense Evaluation,” in
Proceedings of MILCOM. IEEE, 2006, pp. 1–10.
[27] A. A. Semnanian, J. Pham, B. Englert, and X. Wu,
“Virtualization technology and its impact on com-
puter hardware architecture,” in Information Technology:
New Generations (ITNG), 2011 Eighth International
Conference on, 2011, pp. 719–724.
[28] K. Owens, “Securing virtual compute infrastructure in the
cloud,” white paper, Savvis Communications Corporation,
Tech. Rep., 2009.
[29] A. Jasti, P. Shah, R. Nagaraj, and R. Pendse, “Security
in multi-tenancy cloud,” in Security Technology (ICCST),
2010 IEEE International Carnahan Conference on, 2010,
pp. 35–41.
[30] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage,
“Hey, you, get off of my cloud: exploring information leak-
age in third-party compute clouds,” in Proceedings of the
16th ACM conference on Computer and communications
security, 2009, pp. 199–212.
[31] J. Kirch, “Virtual machine security guidelines,” The Center
for Internet Security, Tech. Rep., 2007.
[32] H.-Y. Tsai, M. Siebenhaar, A. Miede, Y. Huang, and
R. Steinmetz, “Threat as a service?: Virtualization’s impact
on cloud security,” IT Professional, vol. 14, no. 1, pp. 32–
37, 2012.
100 年度專題研究計畫研究成果彙整表 
計畫主持人：黃育綸 計畫編號：100-2218-E-009-017- 
計畫名稱：設計與實作基於雲端技術之安全實驗觀測網路(雲端運算_安全技術) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 2 5 100%  
博士生 2 2 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
