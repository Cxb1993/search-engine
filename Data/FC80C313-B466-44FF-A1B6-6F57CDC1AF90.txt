 II 
中 文 摘 要  
隨 著 電 腦 與 網 路 速 度 的 快 速 成 長 ， 格 網 技 術 的 出 現 讓 資 源 分 享 與 協 同 合 作 得 以
實 現 ， 格 網 計 算 透 過 網 際 網 路 將 分 散 在 各 地 的 資 源 連 結 起 來 形 成 一 個 虛 擬 的 計 算 環
境 ， 讓 需 要 大 量 運 算 資 源 的 科 學 程 式 可 以 在 格 網 環 境 上 執 行 。 然 而 隨 著 計 算 資 源 的
快 速 成 長 ， 格 網 資 源 管 理 － 幫 交 付 的 計 算 工 作 選 擇 符 合 該 工 作 需 求 的 資 源 － 逐 漸 成
為 重 要 的 議 題 ， 因 此 在 本 計 畫 中 我 們 致 力 於 發 展 輕 便 且 具 效 能 的 格 網 資 源 管 理 服
務 。 我 們 將 基 於 分 散 式 競 標 (bidding)模 型 來 發 展 格 網 資 源 管 理 服 務 ， 在 分 散 式 競 標
模 型 中 ， 資 源 需 求 者 與 提 供 者 之 間 的 配 對 是 完 全 分 散 且 不 需 要 仲 介 者 (broker)或 媒
合 者 (matchmaker)介 入 ， 傳 統 的 媒 合 (matchmaking)模 型 容 易 引 起 媒 合 者 負 荷 過 重 與
缺 乏 及 時 資 源 狀 態 資 訊 等 問 題 ， 採 用 分 散 式 競 標 模 型 可 以 避 免 資 源 管 理 在 傳 統 媒 合
模 型 上 問 題 的 發 生 。 我 們 將 資 源 管 理 流 程 分 割 成 三 階 段 。 (1)在 資 源 探 索 階 段 ， 我
們 將 利 用 媒 合 者 尋 找 符 合 靜 態 資 源 屬 性 需 求 的 資 源 做 為 下 一 階 段 的 資 源 協 商 的 對
象 。 (2)在 資 源 選 擇 階 段 ， 我 們 將 實 作 資 源 需 求 者 與 提 供 者 之 間 的 協 商 機 制 ， 配 置
適 當 的 資 源 以 執 行 交 付 的 工 作 。 這 兩 階 段 所 參 與 運 作 的 媒 合 者 、 資 源 需 求 者 與 提 供
者 我 們 將 皆 以 格 網 服 務 標 準 包 裝 ， 以 便 能 夠 容 易 地 與 其 他 服 務 溝 通 與 整 合 ， (3)最
後 在 工 作 執 行 階 段 ， 我 們 採 用 點 對 點 技 術 發 展 工 作 交 付 工 具 將 工 作 與 相 關 檔 案 傳 送
至 所 選 擇 的 資 源 上 執 行 。 在 完 成 格 網 資 源 管 理 服 務 後 ， 我 們 將 探 討 分 散 式 競 標 模 型
上 的 效 能 議 題 ， 並 提 出 資 源 選 擇 策 略 以 縮 短 工 作 執 行 時 間 。  
 
關 鍵 詞 ： 格 網 計 算 、 資 源 管 理 、 競 標 、 資 源 選 擇 、 格 網 服 務 、 點 對 點  
 
 1  
一 、 前 言  
隨 著 電 腦 與 網 路 速 度 的 快 速 成 長 ， 格 網 技 術 的 出 現 讓 計 算 與 儲 存 資 源 共 享 以 及 協 同
處 理 科 學 上 需 要 大 量 計 算 與 儲 存 資 源 的 問 題 得 以 解 決 。 格 網 技 術 將 分 散 在 全 球 各 地 的 計
算 與 儲 存 資 源 與 資 訊 系 統 加 以 整 合 ， 構 成 一 個 虛 擬 的 整 合 應 用 環 境 ， 讓 使 用 者 能 在 其 上
分 享 彼 此 的 資 源 與 資 訊 ， 並 為 大 型 科 學 計 畫 提 供 足 夠 的 計 算 與 儲 存 能 力 。 然 而 由 於 格 網
資 源 的 快 速 成 長 ， 格 網 資 源 管 理 － 幫 交 付 的 計 算 工 作 選 擇 符 合 該 工 作 需 求 的 資 源 － 已 成
為 重 要 的 議 題 。 近 年 來 許 多 格 網 計 畫 在 資 源 管 理 方 面 採 用 集 中 式 的 媒 合 模 型 (centralized 
matchmaking model)， 然 而 採 用 集 中 式 媒 合 模 型 容 易 產 生 媒 合 者 (matchmaker)的 負 載 過
重 與 無 法 準 確 地 反 應 格 網 資 源 的 即 時 狀 態 等 問 題 。 為 此 我 們 提 出 了 擴 展 型 的 分 散 式 競 標
模 型 以 解 決 上 述 問 題 ， 擴 展 型 的 分 散 式 競 標 模 型 適 合 於 點 對 點 計 算 格 網 系 統 下 運 作 ， 可
以 根 據 格 網 資 源 的 即 時 狀 態 分 配 工 作 至 合 適 的 計 算 節 點 上 執 行 ， 同 時 減 少 媒 合 者 的 負
擔 。 在 本 計 劃 中 我 們 致 力 於 研 發 基 於 分 散 式 競 標 模 型 為 基 底 的 資 源 管 理 服 務 ， 並 應 用 於
點 對 點 計 算 格 網 系 統 。 於 本 計 畫 我 們 實 作 了 資 源 管 理 系 統 － Mercury， 此 系 統 透 過 網 路
瀏 覽 器 及 資 源 選 擇 樣 版 (Templates)提 供 終 端 使 用 者 簡 易 的 使 用 者 介 面 ， 並 採 用 開 放 式 標
準 如 WS-Agreement[10]及 JSDL (Job Submission Description Language)[11]， 能 夠 與 既 有
的 採 用 相 同 標 準 的 格 網 服 務 溝 通 ， 使 系 統 具 有 更 好 的 互 通 性 (Interoperability)。  
 3 
三 、 文 獻 探 討  
隨 著 格 網 資 源 的 分 散 與 格 網 運 算 的 大 量 成 長 ， 使 用 者 對 於 格 網 資 源 管 理 系 統 的 需 求
日 益 增 加 。 近 年 來 許 多 研 究 與 科 學 單 位 相 繼 投 入 格 網 資 源 管 理 系 統 的 開 發 。 Globus 
Toolkit[1]是 目 前 最 普 及 的 格 網 中 介 軟 體 ， 其 整 合 了 分 散 的 格 網 資 源 並 提 供 一 系 列 的 格 網
管 理 工 具 ， 如 安 全 、 資 料 管 理 、 資 訊 服 務 與 執 行 管 理 等 套 件 ， 針 對 格 網 資 源 管 理 ， Globus 
Toolkit 的 MDS[2]支 援 了 格 網 資 源 、 服 務 與 計 算 工 作 等 的 查 詢 與 監 視 功 能 。 儘 管 Globus 
Toolkit 提 供 了 工 作 交 付 工 具 GRAM(Grid Resource Allocation manager)[3]同 時 結 合
RSL(Resource Specification Language)以 協 助 初 步 的 工 作 與 計 算 資 源 之 配 對 ， 然 而 其 僅 只
允 許 使 用 者 指 定 簡 單 的 工 作 需 求 設 定 ， 如 檔 案 路 徑 、 所 需 CPU 與 所 需 記 憶 體 等 ， Globus 
Toolkit 並 不 支 援 進 階 的 工 作 與 計 算 資 源 配 對 或 排 程 ， 而 將 此 功 能 留 給 其 他 開 發 者 ， 發
展 上 層 的 配 對 或 排 程 服 務 。 另 一 方 面 由 於 Globus Toolkit 系 統 過 於 龐 大 ， 且 部 分 的 服 務
採 集 中 式 的 管 理 方 式 ， 在 使 用 者 不 斷 增 加 時 ， 集 中 式 的 服 務 容 易 造 成 負 擔 過 重 問 題 ， 降
低 了 格 網 系 統 的 擴 展 性 ， 因 此 我 們 希 望 結 合 點 對 點 技 術 與 格 網 服 務 標 準 發 展 輕 便 且 有 效
率 的 格 網 資 源 管 理 服 務 。  
Condor matchmaker[4,5]是 另 一 常 見 的 格 網 資 源 管 理 系 統 ， 在 此 系 統 上 ， 資 源 需 求
者 與 提 供 者 可 以 將 工 作 需 求 與 資 源 狀 態 以 分 類 廣 告 (Classified Advertisement, classads)的
方 式 描 述 ， 並 傳 送 到 媒 合 者 進 行 媒 合 ， Condor matchmaker 的 主 要 特 色 是 ， 考 慮 了 資 源
提 供 者 不 同 等 級 的 分 享 策 略 (sharing policies)。 Legion[6]是 一 個 物 件 導 向 的 計 算 環 境 ， 目
的 是 連 接 從 個 人 電 腦 至 大 型 平 行 處 理 超 級 電 腦 的 各 種 主 機 。 在 此 系 統 上 ， 收 集 者
(Collection)負 責 保 存 各 主 機 的 資 源 的 資 訊 。 Legion 的 工 作 排 程 者 (scheduler)會 向 收 集 者
查 詢 資 訊 ， 並 基 於 工 作 的 需 求 選 擇 適 合 的 資 源 執 行 工 作 。 Netsolve[7]是 一 個 資 源 管 理 系
統 讓 使 用 者 能 使 用 網 路 上 分 散 的 資 源 。 Netsolve 使 用 Agent 來 負 責 資 訊 收 集 ， 資 源 找 尋
以 及 工 作 排 程 等 。 Javeline[8]是 基 於 Java 的 系 統 ， 包 含 三 個 部 份 ： (1)客 戶 端 ： 尋 求 資 源
的 程 式 ； (2)主 機 ： 提 供 資 源 者 ； (3)仲 介 者 (broker)： 負 責 收 集 資 訊 並 配 對 適 合 的 主 機 給
客 戶 端 執 行 工 作 。  
然 而 這 些 是 基 於 集 中 式 媒 合 模 型 所 發 展 的 資 源 管 理 系 統 ， 誠 如 上 述 ， 集 中 式 媒 合 模
型 容 易 產 生 媒 合 者 的 負 載 過 重 與 缺 乏 即 時 資 源 狀 態 資 訊 等 問 題 。 因 此 ， 我 們 擴 展 分 散 式
競 標 模 型 結 合 集 中 式 媒 合 模 型 的 優 點 來 發 展 計 算 格 網 資 源 管 理 系 統 。  
 
 5 
在 擴 展 型 的 分 散 式 競 標 模 型 中 ， 我 們 首 先 將 資 源 的 屬 性 (characteristic)分 類 成 動 態 與
靜 態 屬 性 ， 表 一 為 資 訊 系 統 [14,15,16,17]所 提 供 的 資 源 屬 性 ， 我 們 根 據 動 態 與 靜 態 的 特
性 將 其 分 類 ， 動 態 屬 性 是 像 CPU 使 用 率 ， 可 用 的 記 憶 體 等 會 隨 時 變 動 的 屬 性 ， 相 反 的
靜 態 屬 性 則 是 像 CPU 速 度 ， 作 業 系 統 等 不 太 會 變 動 的 屬 性 。 接 下 來 我 們 將 資 源 管 理 流
程 細 分 成 三 階 段 (圖 一 )。 在 資 源 探 索 階 段 ， 我 們 將 利 用 現 有 的 媒 合 者 ， 如 Globus MDS
或 Condor matchmaker， 用 以 註 冊 資 源 的 靜 態 屬 性 ， 當 資 源 需 求 者 發 出 工 作 需 求 給 媒 合
者 時 ， 媒 合 者 只 需 針 對 靜 態 屬 性 之 資 源 狀 態 進 行 媒 合 ， 而 符 合 靜 態 屬 性 需 求 的 資 源 ， 我
們 稱 為 具 資 格 的 資 源 (qualified resource)， 媒 合 者 再 將 這 些 具 資 格 資 源 的 聯 絡 資 訊 傳 回 給
資 源 需 求 者 。 採 用 此 機 制 的 優 點 ， 一 方 面 媒 合 者 只 需 儲 存 格 網 資 源 的 靜 態 狀 態 並 且 只 對
資 源 的 靜 態 屬 性 進 行 媒 合 ， 減 少 了 媒 合 者 儲 存 資 源 狀 態 的 空 間 。 另 一 方 面 ， 由 於 靜 態 的
資 源 屬 性 的 更 動 較 為 不 頻 繁 ， 可 以 降 低 媒 合 者 更 改 資 源 屬 性 的 頻 率 、 減 輕 媒 合 者 的 負
載 。 在 資 源 選 擇 階 段 ， 當 資 源 需 求 者 收 到 符 合 資 格 的 資 源 聯 絡 資 訊 後 ， 資 源 需 求 者 便 開
始 以 Contract Net Protocol 與 資 源 提 供 者 針 對 動 態 的 資 源 屬 性 進 行 協 商 ， 資 源 需 求 者 會
將 工 作 需 求 以 Call For Proposal 的 訊 息 告 知 每 一 個 具 資 格 的 資 源 提 供 者 ， 資 源 提 供 者 則
會 根 據 分 享 策 略 決 定 是 否 參 與 競 標 ， 因 此 不 像 傳 統 電 腦 叢 集 ， 資 源 的 提 供 是 由 中 央 的 管
理 者 所 決 定 ， 在 我 們 所 提 出 的 模 型 下 ， 每 個 資 源 提 供 者 擁 有 對 資 源 的 分 享 的 自 主 權 ， 更
能 真 實 反 映 出 格 網 分 散 管 理 的 特 性 。 如 果 資 源 提 供 者 決 定 參 與 競 標 後 ， 便 將 資 源 狀 態 與
價 格 等 資 訊 描 述 於 bid 中 回 覆 給 資 源 需 求 者 ， 資 源 需 求 者 根 據 資 源 選 擇 策 略 評 估 所 收 集
的 bid， 進 而 選 出 最 合 適 的 資 源 。  
在 這 個 模 型 中 ， 動 態 的 資 訊 是 透 過 協 商 及 時 取 得 ， 因 此 不 會 有 在 傳 統 集 中 式 媒 合 系
統 中 因 為 過 期 資 訊 導 致 錯 誤 媒 合 的 問 題 。 除 此 之 外 ， 資 源 需 求 者 不 需 要 如 同 最 初 的
CNP[9]模 型 一 樣 保 存 所 有 的 資 源 清 單 ， 也 不 需 要 浪 費 不 必 要 的 頻 寬 在 與 不 合 要 求 的 資
源 提 供 者 溝 通 上 。  
 
4.2 資 源 選 擇 策 略 研 究  
在 點 對 點 計 算 格 網 環 境 下 ， 由 於 沒 有 集 中 式 的 資 訊 系 統 的 支 援 ， 使 得 資 源 選 擇 不 如
在 傳 統 電 腦 叢 集 中 簡 單 ， 資 源 需 求 者 只 能 從 資 源 提 供 者 獲 得 部 分 的 資 訊 並 存 在 著 資 源 需
求 者 彼 此 互 相 競 爭 的 問 題 。 資 源 選 擇 在 點 對 點 計 算 格 網 環 境 下 主 要 面 臨 下 列 問 題 ： (1)
在 點 對 點 的 架 構 下 ， 沒 有 全 域 的 資 訊 系 統 (global information system)提 供 完 整 的 資 源 資
訊 來 設 計 最 佳 化 資 源 選 擇 策 略 ； (2)由 於 點 對 點 計 算 格 網 系 統 建 構 在 分 散 且 即 時 的 環 境
上 ， 因 此 資 源 需 求 者 所 交 付 的 工 作 需 求 、 交 付 時 間 以 及 參 與 系 統 的 資 源 等 皆 是 無 法 事 先
預 知 的 ； (3)在 點 對 點 的 架 構 下 會 產 生 資 源 需 求 者 同 時 競 爭 相 同 資 源 之 情 況 ， 然 而 對 於
資 源 需 求 者 來 說 無 法 得 知 其 競 爭 者 是 否 真 的 選 擇 同 時 競 爭 的 資 源 ， 這 使 得 資 源 需 求 者 在
做 資 源 選 擇 決 策 時 候 相 形 困 難 。 因 此 本 計 畫 將 在 上 述 的 條 件 下 ， 根 據 資 源 提 供 者 所 透 露
的 訊 息 ， 如 競 爭 者 的 個 數 、 競 爭 者 的 順 序 以 及 競 爭 者 的 工 作 需 求 等 ， 發 展 相 對 應 的 資 源
選 擇 策 略 以 提 升 工 作 執 行 效 率 。 此 外 不 同 於 傳 統 電 腦 叢 集 的 排 程 方 法 ， 由 一 個 集 中 的 管
控 中 心 負 責 工 作 配 置 以 平 衡 資 源 運 算 的 負 荷 ， 在 點 對 點 計 算 格 網 環 境 下 ， 資 源 需 求 者 直
接 將 工 作 交 付 給 資 源 提 供 者 執 行 ， 然 而 如 果 每 一 個 資 源 需 求 者 皆 貪 心 地 將 工 作 交 付 給 最
 7 
 
(1) Random 
針 對 工 作 kij , ， 資 源 選 擇 的 機 率 值 計 算 如 下 ：  
||
1
,
,,
ki
kij Q
p =  
 
(2) Minimum Execution Time –  Deterministic (MET-D) 
工 作 kij , 選 擇 提 供 最 小 執 行 時 間 之 計 算 資 源 ， 其 機 率 值 計 算 如 下 ：
î
í
ì Î"
=
otherwise.,0
, minimum is  if,1 ,
,,
kijj,i,k
kij
Qset
p  
 
(3) Minimum Execution Time –  Probabilistic (MET-P) 
針 對 工 作 kij , ， 資 源 選 擇 的 機 率 值 為 該 資 源 的 計 算 能 力 佔 所 有 具 資 格 資 源 計 算 能 力
總 和 的 比 例 ， 其 機 率 值 計 算 如 下 ：   
å
Î"
=
kin Qs
n
j
kij c
c
p
,
,,  
 
(4) Minimum Completion Time –  Deterministic (MCT-D) 
工 作 kij , 選 擇 提 供 最 快 完 成 時 間 之 計 算 資 源 ， 其 機 率 值 計 算 如 下 ：
î
í
ì Î"+
=
otherwise.,0
, minimum is }max{ if,1 ,,,
,,
kijinitinitkijj,i,k
kij
Qs-t,taet
p i,ki,k  
 
(5) Minimum Completion Time – Probabilistic (MCT-P) 
針 對 工 作 kij , ， 資 源 選 擇 的 機 率 值 為 在 該 資 源 上 完 成 時 間 的 倒 數 佔 在 所 有 具 資 格 資 源
完 成 時 間 倒 數 總 和 的 比 例 ， 其 機 率 值 計 算 如 下 ：  
å
Î"
-+
-+
=
kin
kiki
kiki
Qs
initinitkinkin
initinitkijkij
kij ttaet
ttaet
p
,
,,
,,
},max{
},max{
,,,,
,,,,
,,  
 
(6) Dissolve– Probabilistic (Dissolve-P) 
此 策 略 的 想 法 來 自 於 冰 塊 融 化 之 現 象 ， 我 們 將 計 算 工 作 之 工 作 量 視 為 冰 塊 ， 並 可 融
化 於 多 個 計 算 資 源 中 ， 我 們 利 用 圖 四 的 範 例 來 說 明 此 策 略 。 一 開 始 時 ， 我 們 根 據 資
 9 
 
圖 三 ： Dissolve-P 演 算 法  
 
4.3 Mercury 系 統 的 設 計  
格 網 系 統 是 透 過 資 源 的 分 享 、 選 擇 與 聚 集 成 為 一 個 虛 擬 的 計 算 平 台 以 提 供 大 量 的 計
算 能 力 給 需 要 大 量 計 算 的 應 用 程 式 。 如 何 有 效 的 管 理 格 網 資 源 、 選 擇 適 當 的 資 源 給 予 交
付 的 工 作 ， 是 格 網 系 統 成 功 運 作 的 關 鍵 。 因 此 ， 我 們 的 系 統 主 要 有 三 個 目 標 ：  
(1)擴 展 性 (scalability)： 系 統 要 能 有 效 的 管 理 大 量 的 資 源 。  
(2)效 能 (performance)： 系 統 所 造 成 的 額 外 時 間 要 盡 可 能 減 少 ， 使 用 者 交 付 的 工 作
要 盡 可 能 快 完 成 。  
(3)互 通 性 (interoperability)： 系 統 要 讓 使 用 者 及 管 理 員 都 能 方 便 的 使 用 ， 並 使 用 開
放 式 標 準 以 利 於 與 其 他 系 統 及 服 務 溝 通 。  
我 們 採 用 去 年 所 提 出 的 ECNP (Extended Contract Net Protocol)[13]作 為 我 們 資 源 管
理 的 模 型 。 Mercury 使 用 ECNP 來 解 決 傳 統 集 中 式 媒 合 資 源 管 理 系 統 所 遭 遇 的 媒 合 者 的
負 載 過 重 與 缺 乏 即 時 資 源 狀 態 資 訊 等 問 題 。 透 過 此 模 型 ， 我 們 提 升 了 系 統 的 擴 展 性 ， 並
能 利 用 協 商 來 獲 取 最 及 時 的 資 訊 以 更 適 當 的 選 擇 資 源 來 完 成 使 用 者 交 付 的 工 作 。  
為 了 提 升 系 統 的 可 操 作 性 ， 我 們 使 用 WS-Agreement 及 JSDL 等 開 放 式 標 準 。 透 過
這 些 標 準 ， 我 們 的 系 統 能 與 其 他 的 系 統 及 中 介 軟 體 溝 通 ， 也 能 與 不 同 類 型 的 格 網 架 構 整
合 。 WS-Agreement 使 用 了 樣 版 (template)的 概 念 ， 資 源 提 供 者 能 容 易 的 修 改 或 提 供 新 服
 11  
Tim
e
 
圖 五 ： 資 源 管 理 服 務 系 統 流 程 圖  
 
4.3.1 Request Manager 
Request Manager 是 與 使 用 者 及 應 用 程 式 溝 通 的 前 端 。 它 負 責 處 理 工 作 的 請 求 、 與
資 源 提 供 者 協 商 、 選 擇 適 當 的 資 源 交 付 工 作 以 及 回 報 執 行 結 果 給 使 用 者 。 在 系 統 中 可 以
設 置 不 止 一 個 的 Request Manager， 以 免 所 有 的 工 作 請 求 都 集 中 在 一 個 Request Manager
上 造 成 負 擔 過 重 。 Request Manager 主 要 包 含 四 個 元 件 ： Web Interface、 Resource 
Explorer、 Negotiator 與 Job Manager。  
l Web Interface 透 過 瀏 覽 器 提 供 使 用 者 友 善 的 介 面 。 首 先 ， 使 用 者 會 看 到 樣 版
的 清 單 ， 每 種 樣 版 適 合 不 同 類 型 的 工 作 。 例 如 ， 計 算 服 務 可 能 會 提 供 可 描 述
CPU 速 度 及 記 憶 體 需 求 的 樣 版 ， 而 資 料 儲 存 服 務 則 可 能 提 供 可 描 述 儲 存 空 間
 13 
request manager。 Matchmaker 預 設 是 回 傳 所 有 符 合 資 格 的 資 源 提 供 者 。 然 而 有
些 需 求 低 的 工 作 可 能 會 有 太 多 符 合 資 格 的 資 源 提 供 者 ， 因 此 Matchmaker 也 可
以 指 定 成 根 據 設 定 的 策 略 ， 只 回 傳 一 定 數 量 的 資 源 提 供 者 。  
 
4.3.3 Resource Provider 
資 源 提 供 者 (resource provider)負 責 提 供 執 行 工 作 的 資 源 。 在 Mercury 的 設 計 中 ， 資
源 提 供 者 的 服 務 可 分 為 兩 種 ： 系 統 服 務 及 使 用 者 服 務 。 系 統 服 務 包 含 了 與 系 統 其 他 元 件
溝 通 所 需 的 服 務 。 資 源 提 供 者 必 須 提 供 兩 種 服 務 ： Advertising Service 與 Negotiation 
Service。  
l Advertising Service 負 責 註 冊 資 源 提 供 者 的 資 訊 。 當 資 源 加 入 Mercury 系 統
時 ， Advertising Service 會 將 靜 態 屬 性 以 及 資 源 的 聯 絡 資 訊 註 冊 到
Matchmaker。 如 果 這 些 資 訊 有 改 變 ， Advertising Service 必 須 立 刻 更 新
Matchmaker 上 的 資 訊 。 另 外 ， Advertising Service 也 將 此 資 源 提 供 者 所 使 用 的
樣 版 註 冊 到 樣 版 倉 庫 中 。 它 會 檢 查 樣 版 倉 庫 中 是 否 已 有 所 需 的 樣 版 ， 如 果 沒 有
的 話 就 把 樣 版 上 傳 。  
l Negotiation Service 則 透 過 WS-Agreement 與 Request Manager 協 商 。 對 於 每 種
支 援 的 樣 版 ， 它 會 有 相 對 應 的 factory 來 正 確 的 處 理 此 樣 版 產 生 的
WS-Agreement。 當 Negotiation Service 收 到 一 個 WS-Agreement 的 協 商 請 求 ，
它 會 先 檢 查 用 的 是 哪 個 樣 版 ， 然 後 將 此 要 求 送 給 相 對 應 的 Factory。 Factory 則
會 先 檢 查 是 否 符 合 工 作 的 需 求 ， 並 回 傳 一 個 bid 包 含 樣 版 中 指 定 要 回 覆 的 動 態
屬 性 。 例 如 ， 一 個 工 作 要 求 可 能 會 指 定 大 於 2000MB 的 記 憶 體 ， 並 要 Negotiation 
Service 回 答 預 期 的 工 作 執 行 時 間 。 如 果 Request Manager 收 到 bid 後 決 定 要 將
工 作 送 給 此 資 源 提 供 者 ， 它 會 送 一 個 確 認 訊 息 。 Negotiation Service 收 到 此 確
認 訊 息 ， 會 檢 查 資 源 目 前 的 狀 態 ， 並 保 留 資 源 給 該 工 作 執 行 ， 然 後 回 傳 Accept
訊 息 。 如 果 由 於 資 源 狀 態 的 改 變 導 致 無 法 執 行 該 工 作 ， 則 回 傳 Reject 訊 息 給
Request Manager。  
使 用 者 服 務 則 是 指 資 源 提 供 者 所 提 供 讓 使 用 者 使 用 的 服 務 。 例 如 ， 計 算 服 務 可 以 讓
使 用 者 執 行 程 式 ， 而 資 料 儲 存 服 務 則 可 讓 使 用 者 存 取 檔 案 。 資 源 提 供 者 可 同 時 提 供 多 種
使 用 者 服 務 。 由 於 使 用 了 樣 版 ， 資 源 管 理 者 可 以 容 易 地 部 署 新 的 服 務 到 Mercury 系 統 透
過 完 成 下 列 事 項 ： (1)指 定 樣 版 ： 一 個 服 務 至 少 要 指 定 一 種 樣 版 。 此 樣 版 可 以 是 已 經 存
在 的 樣 版 ， 也 可 以 是 為 特 定 服 務 新 建 立 的 樣 版 。 (2)在 Negotiation Service 中 建 立 對 應 的
Factory， 如 此 Negotiation Service 才 知 道 要 如 何 處 理 此 樣 版 產 生 的 協 商 請 求 。  
 
4.4 Mercury 系 統 的 建 置  
 在 此 一 小 節 中 ， 我 們 將 分 三 種 元 件 介 紹 Mercury 實 作 的 方 式 。 我 們 使 用 了 Java
跟 Web Service， 使 系 統 具 有 可 攜 性 及 更 有 彈 性 。  
 
 15 
送 給 matchmaker。  
Negotiator 透 過 Negotiator 這 個 class 來 實 作 。 我 們 將 資 源 提 供 者 的 溝 通 資 訊 及 屬 性
儲 存 在 物 件 Host 裡 。 Negotiator 收 到 的 是 Host 的 清 單 ， 然 後 它 會 試 著 與 所 有 清 單 中 的
資 源 提 供 者 協 商 。 協 商 完 所 收 到 的 所 有 offer 會 作 為 Scheduler 這 個 class 的 輸 入 。
Scheduler 實 作 了 資 源 選 擇 策 略 ， 我 們 在 之 前 發 表 的 論 文 [13,19]中 介 紹 過 5 種 策 略 ， 要
使 用 何 種 策 略 可 由 系 統 管 理 者 來 決 定 。 根 據 策 略 所 選 出 的 最 佳 資 源 提 供 者 會 回 傳 給
Negotiator， 然 後 會 送 一 個 確 認 訊 息 給 該 資 源 提 供 者 。 如 果 收 到 的 回 應 是 Accept， 該 資
源 提 供 者 的 位 址 就 會 送 個 Job Manager， 如 果 收 到 Reject， 則 將 該 提 供 者 移 除 後 重 新 讓
Scheduler 選 擇 。  
Job Manager 會 WS-Agreement 中 描 述 工 作 的 部 份 ， 包 括 執 行 的 程 式 、 參 數 ， 所 需
傳 送 的 檔 案 等 取 出 ， 使 用 JSDL 交 付 工 作 給 資 源 提 供 者 。 因 此 ， 我 們 的 系 統 可 以 使 用 任
何 支 援 JSDL 的 工 作 執 行 系 統 。 本 年 度 我 們 的 系 統 實 作 了 計 算 服 務 ， 並 選 擇 GridWay 搭
配 Globus GRAM 來 交 付 並 執 行 工 作 。 這 是 因 為 目 前 大 多 的 格 網 系 統 皆 採 用 Globus， 而
GridWay 也 是 由 Globus 論 壇 開 發 的 ， 因 此 可 以 避 免 相 容 性 的 問 題 。 此 外 由 於 我 們 系 統
中 的 資 源 選 擇 機 制 是 透 過 Negotiator 來 完 成 ， 因 此 我 們 不 使 用 GridWay 內 建 的 工 作 排 程
器 ， 而 單 純 使 用 Gridway 透 過 JSDL 交 付 工 作 的 部 份 。  
 
4.2.2 Matchmaker 
Matchmaking Service 使 用 MatchQuerier 這 個 class 來 實 作 。 因 為 Information Service
採 用 MDS， 而 XPath 是 它 的 查 詢 語 言 ， 因 此 我 們 必 須 設 計 一 個 將 需 求 轉 成 XPath 的 分
析 器 。 我 們 所 設 計 的 分 析 器 可 以 處 理 工 作 需 求 使 用 下 列 語 法 來 描 述 ：  
l 關 係 運 算 子 : >, <, = 
l 邏 輯 運 算 子 : not, and, or 
l 集 合 運 算 子 : {} 
例 如 ， 我 們 可 以 使 用 查 詢 字 串 “ClockSpeed>=2000 OS!={‘Linux’,‘FreeBSD’}”來 表 示
工 作 的 需 求 是 CPU 速 度 要 大 於 等 於 2000MHZ， 而 作 業 系 統 不 能 是 Linux 跟 FreeBSD。
Matchmaking Service 也 是 包 裝 成 Web Service， 因 此 它 可 以 直 接 由 其 他 應 用 程 式 來 呼
叫 ， 從 而 提 高 它 的 使 用 彈 性 。  
 
4.2.3 Resource Provider 
在 Mercury 的 系 統 中 ， 資 源 提 供 者 可 以 是 一 台 主 機 或 是 電 腦 叢 集 (cluster)， 都 必 須
要 提 供 下 列 的 系 統 服 務 。  
l Advertising Service： 在 我 們 的 系 統 中 ， 我 們 使 用 Ganglia[20]來 收 集 所 提 供 資 源
的 狀 態 資 料 ， 因 為 它 是 被 許 多 格 網 系 統 廣 泛 使 用 的 工 具 ， 而 且 它 可 以 監 控 電 腦
叢 集 。 我 們 利 用 Globus 提 供 的 MDS 上 傳 功 能 ， 在 資 源 提 供 者 加 入 系 統 時 或 其
靜 態 屬 性 有 變 動 時 ， 將 Ganglia 收 集 到 的 靜 態 屬 性 上 傳 至 Matchmaker。  
 17
五 、 結 果 與 討 論  
5.1 實 驗 環 境 設 置  
為 了 驗 證 我 們 的 系 統 ， 我 們 做 了 一 系 列 的 實 驗 以 評 估 擴 展 性 (scalability)以 及 效 能
(performance)。 我 們 將 系 統 部 署 在 IISGrid 上 ， 它 是 Taiwan Unigrid [23]的 一 部 份 。 在
IISGrid 中 ， 我 們 用 8 台 電 腦 做 為 資 源 提 供 者 ， 並 採 用 九 種 不 同 的 工 作 ， 來 自 於 Linpack 
benchmark[21]以 及 SciMark2[22]。 SciMark2 中 包 括 了 Fast Fourier Transform(FFT)， Jacobi 
Successive Over-relaxation (SOR)， Monte Carlo Integration (MCI) 與  Dense LU Matrix 
Factorization (LU)。 表 三 中 說 明 了 採 用 的 九 種 工 作 及 其 問 題 集 大 小 。 MCI 只 有 一 個 問 題
集 。 在 實 驗 中 ， 每 一 個 工 作 會 隨 機 從 九 種 工 作 中 選 出 。 表 四 是 不 同 類 型 工 作 在 不 同 電 腦
上 的 平 均 工 作 時 間 矩 陣 。  
 
表 三 ： 工 作 及 問 題 集 大 小 (除 了 MCI 以 外 ) 
Benchmark Linpack  FFT  SOR  LU  
 Large Small Large Small Large Small Large Small 
Problem size 3600 1800 4194304 1048576 5000 2500 4000 2000 
 
表 四 ： 不 同 工 作 在 不 同 機 器 上 的 平 均 工 作 時 間  
Machine Linpack  FFT  SOR  LU  MCI 
 Large Small Large Small Large Small Large Small  
IISGrid 1 84.89 16.64 27.81 6.14 11.54 10.48 307.99 37.83 8.81 
IISGrid 2 98.61 24.31 42.09 8.45 8.47 7.86 311.63 52.47 14.69 
IISGrid 3 63.05 12.32 21.02 4.61 5.18 4.83 277.58 35.02 7.67 
IISGrid 4 57.52 11.05 16.80 3.40 6.35 5.24 150.92 19.44 6.25 
IISGrid 5 64.03 12.46 21.43 4.42 5.23 4.61 278.06 35.11 7.28 
IISGrid 6 62.81 12.35 18.73 4.22 5.20 4.60 188.69 35.05 7.62 
IISGrid 7 57.42 11.03 16.45 3.87 6.31 5.47 150.72 19.62 6.10 
IISGrid 8 56.96 10.91 16.77 3.83 6.35 6.09 150.39 19.23 6.01 
 
我 們 選 擇 MCT-D[19]做 為 資 源 選 擇 策 略 ， MCT-D 會 選 擇 預 期 工 作 最 快 結 束 的 資 源
提 供 者 。 為 了 讓 資 源 提 供 者 能 預 測 工 作 完 成 時 間 ， 我 們 使 用 過 去 執 行 的 歷 史 資 料 作 權 重
平 均 以 作 為 預 期 的 工 作 完 成 時 間 。 實 驗 的 測 試 資 料 包 含 了 100 個 由 九 種 工 作 中 亂 數 產 生
的 工 作 。 為 了 評 估 系 統 在 不 同 負 載 下 的 表 現 ， 我 們 使 用 兩 種 工 作 到 達 時 間 ， 分 別 是 平 均
25 秒 的 negative exponential distribution 來 模 擬 低 系 統 負 載 ， 以 及 平 均 10 秒 的 negative 
exponential distribution 來 模 擬 高 系 統 負 載 。  
作 為 比 較 ， 我 們 去 除 掉 系 統 中 Negotiation 的 部 份 ， 完 全 使 用 GridWay 及 它 的 工 作
排 程 器 ， 並 且 讓 GridWay 收 集 靜 態 屬 性 的 資 源 資 訊 ， 來 進 行 相 同 的 實 驗 。  
 19 
表 五 ： 平 均 額 外 執 行 時 間  
Selection Time 1.17  
  低 系 統 負 載  高 系 統 負 載  
Prolog Time Mercury 15.38 66.13 
 GridWay 30.62 108.91 
Epilog Time Mercury 36.31 116.87 
 GridWay 64.89 191.21 
Suspension Time 44.21  
 
5.2.3 系 統 效 能 : 
系 統 效 能 是 由 平 均 工 作 返 回 時 間 來 評 估 的 。 平 均 工 作 返 回 時 間 (average turnaround 
time)是 從 使 用 者 送 出 工 作 到 收 到 工 作 執 行 結 果 的 時 間 。 我 們 將 與 使 用 靜 態 屬 性 資 訊 來
安 排 工 作 的 GridWay 做 比 較 來 評 估 我 們 的 系 統 。 圖 七 是 不 同 系 統 負 載 下 ， Mercury 及
GridWay 對 於 不 同 類 型 工 作 的 平 均 工 作 返 回 時 間 。 在 低 系 統 負 載 下 (圖 七 -a)， 我 們 系 統
的 平 均 工 作 返 回 時 間 比 GridWay 短 。 高 系 統 負 載 (圖 七 -b)的 工 作 返 回 時 間 比 低 系 統 負 載
長 ， 這 是 符 合 我 們 預 期 的 。 同 樣 我 們 的 系 統 仍 舊 表 現 地 比 GridWay 好 。 透 過 實 驗 觀 察 ，
這 是 由 於 我 們 的 系 統 會 選 擇 預 期 將 會 最 快 完 成 工 作 的 資 源 提 供 者 ， 而 GridWay 只 單 純
選 擇 執 行 速 度 最 快 的 。 圖 八 為 在 不 同 系 統 負 載 下 ， 完 成 工 作 數 量 對 工 作 返 回 時 間 的 累 計
次 數 圖 。 由 圖 可 知 ， 若 給 定 相 同 的 工 作 返 回 時 間 限 制 ， Mercury 能 比 GridWay 完 成 更 多
的 工 作 。 表 六 總 結 了 在 不 同 系 統 負 載 下 的 平 均 工 作 返 回 時 間 。 與 GridWay 比 較 ， 在 低
系 統 負 載 下 Mercury 有 35.2%較 好 的 表 現 ， 高 系 統 負 載 下 Mercury 則 有 35.6%較 好 的 表
現 。  
 
0
50
100
150
200
250
300
350
400
450
500
T
u
rn
ar
u
n
d
 T
im
e 
(s
ec
.)
Li
np
ac
k (
L)
Li
np
ac
k (
S)
FF
T(
L)
FF
T(
S)
SO
R 
(L
)
SO
R 
(S
)
LU
 (L
)
LU
 (S
)
M
CI
Mercury
GridWay
0
100
200
300
400
500
600
700
T
u
rn
ar
o
u
n
d
 T
im
e 
(s
ec
.)
Li
np
ac
k (
L)
Li
np
ac
k (
S)
FF
T(
L)
FF
T(
S)
SO
R 
(L
)
SO
R 
(S
)
LU
 (L
)
LU
 (S
)
M
CI
Mercury
GridWay
(a) (b) 
圖 七 ： 在 不 同 系 統 負 載 下 對 於 不 同 類 型 工 作 的 平 均 返 回 時 間  
 
 21  
參 考 文 獻  
[1] I. Foster and C. Kesselman, “Globus: A metacomputing infrastructure toolkit,” Journal 
of Supercomputer Applications, 1997. 
[2] J. M. Schopf, et al., “Monitoring and discovery in a web services framework: 
Functionality and performance of the globus toolkit' s mds4,” Technical report, Argonne 
National Laboratory, 2005. 
[3] GRAM: Grid resource allocation and management. 
http://www.globus.org/toolkit/docs/4.0/execution/wsgram/. 
[4] M. J. Litzkow, M. Livny and M. W. Mutka, “Condor: A Hunter of Idle Workstations,” 
Proceedings of the 8th International Conference on Distributed Computing Systems, 
1988. 
[5] R. Raman, M. Livny, and M. Solomon, “Matchmaking: Distributed resource 
management for high throughput computing,” Proceedings of the 7th IEEE International 
Symposium on High Performance, 1998. 
[6] S. J. Chapin, D. Katramatos, J. Karpovich, and A. S. Grimshaw, “The Legion Resource 
Management System,” Proceedings of the Job Scheduling Strategies for Parallel 
Processing, 1999. 
[7] K. Seymour, A. YarKhan, S. Agrawal, and J. Dongarra, “NetSolve: Grid Enabling 
Scientific Computing Environments,” Grid Computing and New Frontiers of High 
Performance Processing, L. Grandinetti eds., Elsevier, Advances in Parallel Computing, 
14, 2005. 
[8] B. Christiansen, M. F. Ionescu, M. O. Neary, K. E. Schauser, and D. Wu, “Javelin: 
Internet-Based Parallel Computing Using Java,” Proceedings of workshop on Java in 
Computational Science and Engineering, 1997. 
[9] R. G. Smith, “The contract net protocol: High level communication and control in a 
distributed problem solver,” IEEE Transactions on Computers, C-29(12):1104-1113, 
1980. 
[10] A. Andrieux, et al., “Web Services Agreement Specification (WS-Agreement) (2007),” 
http://www.ogf.org/documents/GFD.107.pdf. 
[11] Job Submission Description Language, Open Grid Forum, GFD, 2005, 
http://www.ggf.org/documents/GFD.56.pdf. 
[12] GridWay, http://www.gridway.org/. 
[13] C.-M. Wang, H.-M. Chen, C.-C. Hsu, and J. Lee, “Resource selection strategies for a 
CNP-based resource management model,” Proceedings of 2008 IEEE Asia-Pacific 
Services Computing Conference, 2008. 
[14] M. Gudgin, et al., “SOAP Version 1.2 Part 1: Messaging Framework,” W3C 
recommendation, 2003. 
 23 
計 畫 成 果 自 評  
我 們 的 研 究 內 容 完 全 依 照 原 定 計 劃 進 行 ， 並 針 對 P2P 計 算 格 網 系 統 在 資 源 管 理 上
所 遭 遇 的 問 題 提 出 解 決 方 案 。 在 資 源 選 擇 策 略 的 研 究 上 ， 我 們 提 出 了 在 P2P 計 算 格 網
環 境 下 的 資 源 選 擇 策 略 ， 並 比 較 在 資 源 提 供 者 所 透 露 之 不 同 的 資 訊 等 級 下 ， 各 資 源 選 擇
策 略 的 效 能 ， 同 時 比 較 合 作 資 源 需 求 者 與 非 合 作 資 源 需 求 者 所 獲 得 效 能 差 異 ， 接 著 我 們
除 了 將 研 究 成 果 發 表 於 著 名 國 際 研 討 會 與 期 刊 上 外 ， 我 們 也 將 把 所 提 出 的 資 源 選 擇 策 略
實 作 於 P2P 計 算 格 網 系 統 中 ， 讓 格 網 使 用 者 可 以 利 用 所 提 出 的 資 源 選 擇 策 略 選 取 合 適
的 格 網 資 源 。   
此 外 我 們 也 實 作 了 格 網 資 源 管 理 系 統 － Mercury， 此 系 統 透 過 網 路 瀏 覽 器 及 資 源 選
擇 樣 版 (Templates) 提 供 終 端 使 用 者 簡 易 的 使 用 者 介 面 ， 並 採 用 開 放 式 標 準 如
WS-Agreement 與 JSDL ， 能 夠 與 既 有 的 採 用 相 同 標 準 的 格 網 服 務 溝 通 ， 使 系 統 具 有 更
好 的 互 通 性 (Interoperability)。 藉 由 此 系 統 的 開 發 ， 可 提 升 P2P 計 算 格 網 系 統 的 擴 展 性 、
互 通 性 以 及 工 作 效 能 。 我 們 在 國 內 研 討 會 介 紹 了 系 統 之 研 發 狀 況 ， 亦 將 此 系 統 發 表 於 國
際 研 討 會 上 。  
 
 2
Infrastructure for Cloud Computing”。 會 議 論 文 發 表 的 議 程 安 排 於 五 月 二 十 四 日 至 二 十 六 日
三 天 ， 本 次 大 會 的 議 程 被 分 為 三 組 平 行 進 行 。 我 們 的 論 文 被 安 排 在 最 後 一 天 發 表 ， 發 問
和 討 論 的 過 程 不 但 十 分 踴 躍 也 很 有 深 度 ， 可 以 看 出 大 家 都 很 重 視 這 個 領 域 的 研 究 。  
 
二 、 與 會 心 得  
這 次 會 議 中 有 一 個 panel 是 關 於 Autonomic Cloud Computing， 討 論 Autonomic Cloud 
Computing 的 動 機 、 應 用 與 挑 戰 。 由 於 雲 端 計 算 的 系 統 規 模 越 來 越 異 質 而 龐 大 ， 雲 端 應 用
服 務 也 越 來 越 複 雜 而 多 變 ， 過 去 被 動 的 雲 端 計 算 資 源 管 理 機 制 越 來 越 難 以 處 理 如 此 多 變
且 充 滿 不 確 定 性 的 環 境 ， 因 此 自 主 式 的 雲 端 計 算 資 源 管 理 機 制 將 會 是 未 來 最 有 前 景 的 解
決 方 案 。 正 好 我 們 也 正 在 進 行 Autonomic Resource Management on Cloud Computing 的 研
究 ， 這 個 panel 的 討 論 對 於 我 們 的 研 究 有 相 當 大 的 啟 發 與 幫 助 ， 讓 我 們 對 於 整 體 架 構 有 更
完 整 的 認 識 ， 也 讓 我 們 對 於 自 己 選 擇 的 研 究 題 目 的 重 要 性 更 有 信 心 。  
另 外 Albert Y. Zomaya 教 授 的 keynote 探 討 Maximizing Profit and Pricing in Cloud 
Environments， 這 也 跟 我 們 目 前 的 研 究 方 向 契 合 ， 我 們 相 信 雲 端 計 算 的 最 佳 化 目 標 應 該 由
傳 統 的 提 高 效 能 轉 變 為 提 高 獲 利 ， 例 如 ： 減 少 使 用 的 資 源 、 提 高 利 用 率 或 降 低 能 量 消 耗
等 目 標 。 還 有 Rich Wolski 教 授 的 keynote 題 目 為 Eucalyptus: Open Source Infrastructure for 
Cloud Computing， 介 紹 他 們 所 開 發 的 Eucalyptus 軟 體 ， 用 以 建 立 與 Amazon EC2 服 務 相
容 的 私 有 雲 端 計 算 平 台 。 利 用 此 一 軟 體 所 建 立 的 雲 端 計 算 平 台 具 有 與 Amazon EC2 服 務
相 容 的 介 面 ， 使 得 其 上 的 雲 端 計 算 應 用 服 務 僅 需 要 極 少 的 修 改 ， 便 可 以 在 私 有 雲 端 計 算
平 台 和 Amazon EC2 服 務 之 間 進 行 切 換 。 這 對 於 小 型 私 有 雲 端 計 算 平 台 的 建 立 十 分 方 便 ，
也 有 助 於 未 來 整 合 私 有 雲 端 計 算 平 台 和 Amazon EC2 服 務 成 為 大 型 的 混 合 式 雲 端 計 算 平
台 。 基 於 這 些 優 點 ， 因 此 我 們 正 在 籌 設 的 小 型 私 有 雲 端 計 算 平 台 也 將 採 用 此 一 軟 體 來 進
行 建 置 。  
 
三 、 建 議  
近 年 來 雲 端 計 算 已 經 成 為 資 訊 界 最 受 重 視 的 議 題 。 雲 端 計 算 是 一 個 擁 有 遠 大 前 景 的
新 資 訊 計 算 典 範 ， 將 動 態 可 擴 展 和 虛 擬 化 的 資 源 ， 以 網 際 網 路 服 務 的 方 式 提 供 給 使 用 者 。
雲 端 計 算 擁 有 許 多 的 優 點 ， 因 此 受 到 各 界 的 高 度 重 視 。 然 而 國 內 學 術 界 、 法 人 機 構 和 企
業 界 缺 乏 連 繫 與 溝 通 的 管 道 ， 研 究 進 行 缺 乏 實 驗 平 台 ， 研 究 成 果 也 難 以 整 合 。 應 該 由 政
府 出 面 主 導 ， 大 力 支 持 相 關 研 究 與 合 作 ， 才 能 提 昇 台 灣 在 雲 端 計 算 方 面 的 實 力 。  
 
四 、 攜 回 資 料 名 稱 及 內 容  
1. 會 議 論 文 集 光 碟 一 份 。  
 
2 
 
Control List) for restricting write access to data, while 
permitting read access with an encryption key. However, this 
design is incompatible with traditional file systems. In [11], 
DFS provides a file service based on a peer-to-peer network, 
but it lacks a monitoring mechanism for data storage, which 
could render storage space less effective. Moreover, it adopts a 
distributed file system design where there is no global 
hierarchical name space. This makes it incompatible with 
traditional file systems. 
Ivy [12] and Kosha [10] are also peer-to-peer file systems. 
Ivy uses multiple logs to record and distributed file content 
between DHT. Kosha mainly focus on the integration with 
Network File Systems (NFS). Both options however, do not 
take Cloud and Grid environments into consideration. 
Proposals for using Data Grid have existed for many years, 
and thus researchers have mentioned and produced large 
numbers of research issues and implementations. One example, 
the Integrated Rule-Oriented Data System (iRODS) [20], is a 
famous virtual storage system developed by the San Diego 
Super Computer Center. Despite its reputation however, it 
proposes a client-server architecture that may not provide 
sufficient fault tolerance. Another example includes the Google 
File System (GFS) [2] developed by Google and the Hadoop 
Distributed File System (HDFS) [22] developed by the Apache 
Software Foundation. They adopt a similar architecture which 
consists of a single metadata server that stores the metadata of 
all files in the system, and a number of data servers. 
Unfortunately however, this makes them vulnerable to single 
point of failure and may cause bottlenecks on the metadata 
server. 
III. DESIGN OVERVIEW 
In this section, we will describe the design overview of our 
distributed file system. We first outline our system’s goals, and 
then present the system architecture to meet the design goals of 
the proposed system. 
A. Design goals 
When developing our system, we have several key 
requirements. These requirements are outlined below. 
a) Scalability: Scalability is a desirable property of any 
large-scale system. It indicates the ability to either handle a 
large amount of work or a large number of resources in a 
graceful manner. As storage resources are increasingly added, 
the performance of the whole system should not decrease: it 
must be prepared to handle an increasingly large number of 
storage resources at any moment. 
b) Reliability, availability and failure recovery: 
Resources are distributed in many different geographical 
locations, connected by networks, and managed in different 
administrative domains. Such an environment usually faces 
unpredictable failures, especially when resources are connected 
through networks. Thus, reliability, availability and failure 
recovery should be considered: the system must work and data 
should be accessible at any moment. 
c) Compatibility: Our proposed system provides a NFS-
like file system view to end users. This makes the file system 
easier to use and manipulate. However, this also means the 
system must support accounts, groups and hierarchical name 
space, which are rarely supported in previous systems in the 
literature. Our system also must handle user authentication and 
access control to directories and files. With these features, 
cooperating users can form and join a group to share their files 
under access control. 
d) High performance and load balancing: This is a 
general requirement for developing any system. Our proposed 
system aims at supporting high-performance scientific 
applications and data-intensive applications. Therefore, data 
transfer performance and the load distribution of storage 
resources are two major criterions in our system design. 
e) Extensibility, upgradeability and isolation: This is a 
unique goal of our proposed system. Since software usually 
evolves as time passes, it is important to ensure that new 
functions or modules can be added easily and that software can 
be upgraded without the need to stop the whole system. 
f) Autonomy: Maintaining a distributed file system is 
time-consuming and annoying for administrators. Hardware 
and software components need to be deployed, configured, 
upgraded, and removed in case of failures. The large number of 
distributed storage resources makes it worse. We would like to 
make maintenance of the system easier through cloning, 
monitoring, automatic upgrade, and automatic failure detection 
and recovery. 
We plan to create a file system that takes into account as 
fully as possible the requirements of the data-intensive 
applications as well as end users, developers and 
administrators. In contrast with the researches mentioned 
above, we focus deeply on self-management and extensible 
characteristics in our system, because we believe in making 
distributed system management easier. To achieve these goals, 
we take advantage of the nature of the peer-to-peer networks. 
Furthermore, we also consider several features of traditional 
file systems, such as the trash can, and try to provide a full set 
of directory, file and symbolic link operations for end users and 
developers 
B. System architecture 
As with previous P2P distributed file systems, scalability, 
availability and reliability can be achieved by adopting P2P 
architecture and replication of data objects. To improve the 
performance of file transfers and metadata operations, our 
system also adopts multi-source data transfer and metadata 
caching. Furthermore, we use service oriented architecture 
(SOA) in the system architecture to enhance extensibility and 
autonomy. As shown in Figure 1, our system consists of three 
parts: the core, clients and services. These parts are described 
below. 
1) Core architecture: The core is the first running process 
in the proposed system. It accepts commands from a client and 
serves the client after user authentication. When it accepts a 
command, it will parse and redirect the command to the 
4 
 
d) Group service: For collaboration, we support the 
mechanisms for grouping the users who work on the same 
project and share files and documents. To maintain this kind 
of information, we propose another kind of service, named 
group service. In our system, each user may join several 
groups, but can only belong to one group at a time. Users are 
permitted to switch group at any moment. These types of 
groups are referred to as effective groups. A group can also act 
as a virtual organization (VO), which shares files and 
documents between users in the same group. The conditions to 
start a group service on a machine are the same as an account 
service, because the security of group information is also very 
important. The machine must be highly reliable, secure and 
trusted. The group service that actually maintains group 
information is called the super group service. The group 
management feature is responsible for managing information 
about groups. It reads and writes the information from the 
database. 
IV. DESIGN AND IMPLEMENTATION 
According to the architecture we mentioned in Section 3, 
our system primarily contains three parts: the core, client and 
services. In this section, we introduce several issues with both 
design and implementation. We then describe the reasons and 
principles behind the design of each part of our system, 
according to various requirements. 
A. Routing and Locating 
As described above, the core includes the node, peer and 
initiator. The node, which is provided by the FreePastry routing 
protocol, is responsible for routing messages and locating 
services as needed. When the service on one machine needs the 
remote service on the other machine, the node provides 
information for routing to the underlying peer. The local peer 
then generates the key according to this information, and 
invokes the node to route the message. After the message 
arrives at the corresponding peer, the peer checks the status of 
the service and returns its IP address. The IP address is then 
used to create a socket connection directly between services. 
Our system uses two types of messages: the 
InternalMessage and the ServiceMessage. The InternalMessage 
flows between the internal components, while the 
ServiceMessage is exchanged outside the machine. The 
InternalMessage contains instructions that map to one method 
provided by the handler and payload. The payload mainly 
stores the related arguments for executing instructions, the 
result of execution, and the error message if failure occurs. 
Each one is a pair of <key, value>. The ServiceMessage 
encapsulates InternalMessages and additional information 
about the type and identifier of the service. This type and 
identifier increase the flexibility and extensibility of the system; 
the type identifies what type of service is used, while the 
identifier indicates which service is used among the same type. 
Both are indicated within the configure file of the service, and 
are registered to the peer when the service boots. In this way, 
new types of the services can be easily added to the system. 
B. Handler pool 
To increase the flexibility of extensions, we propose a 
service framework. The service owns a handler pool which 
contains a set of handlers. The handler is responsible for 
dealing with the message, executing functionality and giving a 
response. Service handlers are configured in the configure file 
that comes with the corresponding service. When a service 
starts, it will read the configure file and load the handlers. We 
hope that the functionality of the service can be extended easily 
without shutting down and re-modifying the code. The service 
can reload these handlers at runtime. To implement this 
mechanism, we use a hash table and Java reflection mechanism 
[23]. The instruction is mapped to an instance of the handler 
that was instanced and recorded in the hash table in the 
beginning. To enhance security, only the handler in the 
configure file can be instanced, and the configure file is 
protected by the access mechanism provided by the underlying 
operating system. Only a user who has right to modify the 
configure file can change the content. 
At present, according to our design, each machine that 
wants to join the system should start four services to provide 
their resources for use. 
C. The design of the metadata service 
The metadata service is the most important service in our 
system design, because it records all attributes about all files on 
the system. We support a directory tree to help users manage 
their files. Because metadata is sometimes accessed frequently, 
we choose the directory name as the routing key so as to 
distribute load and avoid overhead when changing directory 
names. Here, the peer whose ID is closest to the key will store 
the content of the directory. This content contains all attributes 
of the files, symbolic links and sub directories. If we use the 
absolute path as the key, once the name of one of the 
directories along this path is modified, the amount of the 
metadata that must be migrated increases dramatically. 
Alternatively, using the name of the directory as the key 
ensures that only the renamed content of the directory must be 
migrated. Moreover, the metadata also contains our improved 
ACL [14] path, reduces the overhead when verifying the user’s 
right to access a data object. 
In an unstable environment, networks may be partitioned or 
nodes may disappear at any moment. To increase reliability, 
we replicate the metadata to the slaves in the leaf set. The 
administrator can configure the number of the replica in the 
configure file. By default, we produce four replicas in the 
system. 
Furthermore, in order to increase performance and decrease 
network congestion, we apply a cache mechanism to the 
metadata. The queried metadata is temporarily cached within 
the local side. When the prime metadata is modified, the 
metadata service that caches metadata will be notified. 
D. The design of the data service 
The data service is responsible for storing and managing 
the data segments of files. We slice files into several data 
segments, and then distribute these data segments over 
different data services. These data segments are also replicated 
6 
 
V. EVALUATION 
In this section, we evaluate and analyze our file system. We 
deploy the file system on a platform consisting of sixteen 
machines. Each machine is connected through a 1Gb/s Ethernet 
adapter and switch. Each experiment is conducted around three 
to ten times to reduce possible noise in the system. 
A. Experiments on metadata services 
First, we evaluate the time spent on adding the metadata 
services, which are added to each system individually. Since 
the number of directories in the system will also affects the 
time cost of adding metadata services, we conduct an 
experiment without any directory and an experiment with 1000 
directories in the system, respectively. The results are shown in 
Figure 3, where we find that the curve smoothens after sixth 
machine joins. In our system, we replicate the metadata to the 
four slaves in the leaf set, two on each side. Until the fifth 
metadata service is added, the new metadata not only take over 
the metadata that it should maintain, but also receive replicas 
from the other metadata services. As more metadata services 
are added, the system must spend more time to contact more 
metadata services. When the sixth metadata service is added, in 
addition to the work described above, the system must also 
notify the metadata services that no longer need replicas to 
delete these replicas. This notification also increases overall 
time. After this however, no additional work is needed, and 
thus time-use peaks after the sixth metadata service is added. 
For the other experiment with 1000 directories in the 
system, the time reaches its maximum when adding the second 
metadata service and decrease as the number of existing 
metadata services increases. The reason is that, as the number 
of metadata services increases, the number of metadata records 
migrated to the new metadata services decreases. The high 
peak on the sixth metadata service is due to replica deletion as 
explained in the previous paragraph. The time spent on replica 
deletion will also decrease as the number of metadata services 
increases. This figure shows that the time of adding metadata 
services is scalable in terms of the number of metadata services. 
 
Figure 3.  The time of adding metadata service. 
Next, we study the time spent on creating a directory. This 
could be affected by the number of metadata services in the 
system, the depth level of the created directory, and the number 
of directories in the system. Therefore, we conduct experiments 
for theses three factors respectively as shown in Figures 4-6. 
From Figure 4, it can be observed that the time spent on 
creating a directory seems to be irrelevant to the number of 
metadata services in the system. This is mainly due to the use 
of a Distributed Hash Table in the underlying structured P2P 
network. In addition, the time spent on creating a directory is 
also irrelevant to the depth level of the created directory as 
shown in Figure 5. Since we adopt the path ACL mechanism, 
to get the access right of creating a directory, the system can 
contact only its parent directory without the need to traverse 
the directory tree from the root. In Figure 6, we create a 
directory with different number of existing directories in the 
system, respectively. The result shows that the time is almost 
irrelevant to the number of directories in the system. Because 
of metadata replication, the time of creating a directory is 
higher than expected. We shall continue improving the 
directory creation time in future work. 
Finally, we evaluate the time spent on reading the content 
of a directory with and without the cache mechanism. The 
experiments are conducted with different number of directories 
in the system as shown in Figure 7. Clearly, the cache 
mechanism significantly improves the time spent on reading 
the content of a directory. It can also be observed that, without 
the cache mechanism, the reading time increases as the number 
of directories in the system increases. This is mainly due to the 
time in database queries. It might be necessary to adopt the in-
memory database concept and better indexing scheme to 
accelerate query operations when there are a huge number of 
directories in the system. 
 
Figure 4.  The time of creating a directory with respect to the number of 
metadata services. 
8 
 
33333KB/s on getting the file while GridFTP reaches 
30188KB/s. Note that the time cost on putting a file includes 
the time for replicating file, which could be 2 times of the file 
transfer time in the worst case. Therefore, it is safe to say that 
our proposed system is slightly better than GridFTP in 64MB 
file transfer. Because the data transfer mechanism in our 
system is multi-source data transfer, it shows more 
performance improvement over GridFTP as the file size 
increases. However, the proposed system has overhead when 
the file size is small, it may perform worse than GridFTP. In 
the future, we shall continue improving the overhead in our 
system. 
We can further analyze the performance of file transfer. 
The performance degradation of getting a small file can be 
attributed to miscellaneous overheads in file transfer. The 
performance increase of getting a file bigger than 64MB is 
mainly due to concurrent transfer of multiple data segments by 
several data services. The performance of putting a file also 
shows a similar trend. In the future, we shall continue to 
improve the proposed system in order to get a better 
performance. 
 
Figure 10.  The time of transmitting a file using ASDF and GridFTP. 
VI. CONCLUSION 
In this paper, we designed and implemented a distributed 
file system to meet the demands of not only data-intensive 
applications but also end users, developers, and administrators. 
While sharing many of the same goals as previous distributed 
file systems such as scalability, availability, reliability, and 
performance, our system is also designed with an emphasis on 
compatibility, extensibility and autonomy. We addressed 
several issues and presented our design. By adopting peer-to-
peer technology, replication, multi-source data transfer, 
metadata caching and service oriented architecture (SOA), we 
implemented an autonomous and scalable file system, called 
ASFS, on our platform and demonstrated its capabilities 
through experiments. The experimental results show the 
proposed distributed file system meets our design goals. 
Through these experiments, we have gained additional 
experience and found several research issues that deserve 
further study. In the future, we will continue to study these 
issues and improve our proposed distributed file system. 
ACKNOWLEDGMENT 
This work was supported in part by the National Science 
Council of Taiwan under Grants NSC99-2218-E-001-008 and 
NSC97-2221-E-001-002-MY3. 
REFERENCES 
[1] L. Vaquero, L. Rodero-Merino, J. Caceres, and M. Lindner, “A Break in 
the Clouds: Towards a Cloud Definition” In Proceedings of ACM 
SIGCOMM Computer Communication Review, vol. 39, pp. 50-55, 
January, 2009. 
[2] Sanjay Ghemawat, Howard Gobioff, and Shun-Tak Leung, “The Google 
File System”, The Proceedings of 19th ACM Symposium on Operating 
Systems Principles, Lake George, NY, October, 2003. 
[3] A. Adya, W.J. Bolosky, M. Castro, G. Cermak, R. Chaiken, J. R. 
Douceur, J. Howell, J. R. Lorch, M. Theimer, R. P. Wattenhofer, 
“FARSITE: Federated, Available, and Reliable Storage for an 
Incompletely Trusted Environment“, In Proceedings of the 5th 
Symposium on Operating Systems Design and Implementation, Boston, 
MA, USA, 2002. 
[4] I. Clarke, O. Sandberg, B. Wiley, and T.W. Hong, “Freenet: A 
distributed anonymous information storage and retrieval system”, In 
Proceedings of ICSI Workshop on Design Issues in Anonymity and 
Unobservability, June, 2000. 
[5] Ion Stoica, Robert Morris, David Karger, M. Frans Kaashoek, Hari 
Balakrishnan, “Chord: A Scalable Peer-to-peer Lookup Service for 
Internet Applications”, The Proceedings of the International Conference 
on Special Interest Group on Data Communication, San Diego, 
California, USA, 2001. 
[6] A. Rowstron, P. Druschel, “Pastry: scalable, distributed object location 
and routing for large-scale peer-to-peer systems”, In Proceedings of 
IFIP/ACM International Conference on Distributed Systems Platforms, 
November, 2001. 
[7] Ben Y. Zhao, Ling Huang, Jeremy Stribling, Sean C. Rhea, Anthony D. 
Joseph, and John D. Kubiatowicz, “Tapestry: A Resilient Global-Scale 
Overlay for Service Deployment”, Journal on Selected Areas in 
Communications, pp.41-53, vol. 22, 2004. 
[8] S. Ratnasamy, P. Francis, M. Handley, R. Karp, and S. Shenker, “A 
scalable content-addressable network”, In Proceedings of ACM 
SIGCOMM, August, 2001. 
[9] John Kubiatowicz, David Bindel, Yan Chen, Patrick Eaton, Dennis 
Geels, Ramakrishna Gummadi, Sean Rhea, Hakim Weatherspoon, 
Westly Weimer, Christopher Wells, and Ben Zhao, “OceanStore: An 
architecture for global-scale persistent storage”, In Proceedings of ACM 
International Conference on Architectural Support for Programming 
Languages and Operating Systems, November 2000. 
[10] Ali Raza Butt, Troy A. Johnson, Yili Zheng, and Y. Charlie Hu, “Kosha: 
A peer-to-peer enhancement for the network file system”, In 
Proceedings of ACM/IEEE SC November, Pittsburgh, PA, USA, 2004. 
[11] Antony Chazapis, Georgios Tsoukalas, Georgios Verigakis, Kornilios 
Kourtis, Aristidis Sotiropoulos and Nectarios Koziris, “Global-scale 
peer-to-peer file services with DFS”, In Proceedings of the 8th 
IEEE/ACM International Conference on Grid Computing, Austin, TX, 
USA, 2007. 
[12] Athicha Muthitacharoen, Robert Morris, Thomer M. Gil, and Benjie 
Chen, “Ivy: A Read/Write Peer-to-Peer File System”, In Proceedings of 
the 5th symposium on Operating systems design and implementation, 
Boston, MA, USA, 2002. 
[13] B. Yang, and H. Garcia-Molina, “Designing a Super-Peer Network”, In 
Proceedings of 19th International Conference on Data Engineering, Los 
Alamitos, CA, USA, 2003. 
[14] Scott A. Brandt, Ethan L. Miller, Darrell D. E. Long and Lan Xue, 
“Efficient Metadata Management in Large Distributed Storage 
Systems”, In Proceedings of the 20 th IEEE/11 th NASA Goddard 
Conference on Mass Storage Systems and Technologies, San Diego, 
California, USA, 2003. 
[15] Vouk, M.A.; , "Cloud computing — Issues, research and 
implementations," Information Technology Interfaces, 2008. ITI 2008. 
30th International Conference on , vol., no., pp.31-40, 23-26 June 2008. 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/28
國科會補助計畫
計畫名稱: 子計畫一:應用於P2P計算格網系統之以競標為基底的資源管理服務
計畫主持人: 王建民
計畫編號: 97-2221-E-001-002-MY3 學門領域: 平行與分散處理
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
