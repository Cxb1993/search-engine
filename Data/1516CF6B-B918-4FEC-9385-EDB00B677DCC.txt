tool. 
英文關鍵詞： Energy Profiling、Energy Benchmarking、Embedded 
System、Mobile Devices、Android 
 
realistic energy consumption figure for a specific real-life wireless channel behavior. This problem may especially 
restrict developers from optimizing energy consumption and fine turning embedded software in a mobile 
environment. To tackle the challenge, our tool profiles energy consumption of applications while emulating the 
desired set of wireless channel behaviors in a controllable wireless environment. 
 
The tool we proposed in this project makes three main contributions. 
 
1. Provide a measurement-based energy profiling tool for Android application developers to develop energy-
efficient software. 
 
2. Propose a technique to map the power consumption of I/O devices to the asynchronous I/O events in Linux 
kernel and also to Android applications. 
 
3. Emulate wireless environment so that developers can understand the power consumption behaviors of their 
software in real-life mobility scenarios.  
 
2. Related Works 
 
Many similar energy profiling tools exist. As the well-known representative of measurement-based tools, 
PowerScope [1] uses a programmable multi-meter to statistically measure the total energy drained from the external 
power source. It associates these measurements with active processes/functions of the measurement time. It has low 
accuracy because of measuring only total energy and using an external trigger mechanism to synchronize the time 
between the host and target. This low accuracy again limits usability for high energy optimization. 
 
Another important example to the energy profiling tools that perform component-wise measurements comes from 
Xian et al. [2]. Their tool is the first one that assigns measurements of I/O operations to their initiator processes. 
Other tools either reported measurement results of I/O operations under a column called “interrupts” or did not 
consider them at all. This work also provides a more accurate synchronization method than the most common NTP 
or external triggering. However, the wireless network emulation and power consumption analysis in an emulated 
wireless environment were not yet been considered in their tool. . 
 
In [3], the paper described the importance of energy efficiency of Android operating system. However, tools for 
Android mobile devices are still not common right now. In [4], Andrew Rice and Simon Hay provided a 
measurement framework for Android-based mobile devices. The main difference between our energy profiling tool 
and their tool is that they only offer a total energy of the executing application, but we show detailed energy 
 Figure 1. Operational overview. 
 
3.1. System Architecture 
 
As depicted in Figure 1, the tool consists of two different sets of hardware/software components, which could be 
categorized as target side components and host side components. The core of host side components is a graphical 
user interface (GUI) which act as a control center in our tool. The GUI is mainly responsible for collecting power 
measurement results from a data acquisition (DAQ) card, controlling the signal attenuator to emulate the mobile 
behavior in reality that user defined and mapping the power measurements with the results of target profiling to 
calculate the total energy for each system activity. The main component at the target side is the kernel module that 
provides the instrumentation functions to collect kernel level data logs. These functions basically store the time of 
system activities and some other necessary parameters. A user-space daemon keeps transferring these kernel level 
data from kernel-space to user-space as files, and periodically transfers these files to the host side for the mapping 
process. An operation overview of the tool can be seen in Figure 1 and system architecture in Figure 2.  
 
Mobile Evaluation Board
TARGET
Linux 
Kernel
System Monitor
As Kernel 
Module
Profiling 
data to 
RAM
NI DAQ 
Log 
to 
Disk
Mobile Applications
CPU WiFi
WiFi 
Antenna
RF Shielded Chamber
Programmable
attenuator
WLAN 
AP
LAN
Et
h
er
n
et
Profiling Data I/V Log
Time Sync(NTP)
G
P
IB
Energy Consumption Analyzer
E
th
e
rn
e
t
Wireless Signal Calibration
Wireless Environment Emulator
Mobility Script
Run Script
GUI
NTP Synchronization Data
Kernel Profiling Data
HOST
M
ea
su
re
m
en
t D
at
a
Result
Et
h
er
n
et
WiFi Calibration Data
W
iF
i S
ig
n
al
User Daemon/Patched Java 
Virtual Machine
Et
h
er
n
et
Programmable
attenuator
WLAN 
APProgrammable
attenuator
WLAN 
AP
 
associate with process and Java classes. Finally, energy consumption of I/O events could correlate with the explicit 
process and Java programs. 
 
One essential task on the host side GUI control center is to map, or correlate power measurements with system 
activities. After the test is finished, the user-daemon program transfers profiling results to host side. When the 
transfer ends, the energy consumption analyzer module in the control center analyzes the results file of system 
activities to check the process identify (PID) values that were collected during the test. Later on PID values are 
charged with energy values for both CPU and I/O peripherals activities. Figure 4 illustrates this analyzing process. 
 
Software I/O functions
Service data unit 
may be split
Multiple packet data 
units may be merged
Real I/O events
 
Figure 4. Correlating energy consumption with system activities. 
 
3.2.1. Asynchronous I/O problem 
 
A duration value (∆t) is the key to calculate the power consumption of a system activity, but is insufficient to 
charge a correct process. We also have to identify the processes that are responsible for the energy consumed during 
a period. Achieving this for CPU is as simple as reading the task data structure, but generally for I/O components, it 
is more complicated due to the asynchronous nature of I/O operations. As illustrated in Figure 5, when a process 
writes data to a socket, this data travels down through the layers of kernel’s network stack and finally reaches the 
device driver as a packet data unit. At some time during this flow, when we sniff the packet when is formed, the 
current active process may have already been changed by kernel scheduler. If we simply record the current PID at 
this time, we may incorrectly identify the initiator of this system activity. To solve this problem for wireless I/O 
devices, we have added one more item, PID, to the socket data structure. When we record the time values for a 
packet, we simply access this item through the packet’s socket structure.  
 
wireless AP. The channel model is shown below [10]. The channel model depends on the distance d from the target 
mobile device to the access point. n is the environment constant( between 1.6 and 5), and LOS is the signal 
attenuation that a mobile device can sense. 
 
LOS(d) = 40.22 + 10n log(d)  
 
3.1.2. Multiple homogenous and heterogeneous base stations or access points 
 
The purpose for emulating multiple homogenous and heterogeneous base stations or access points is to evaluate 
the power consumption of a mobile device during handover or in mobility scenario in a homogenous and 
heterogeneous wireless environment.  The GUI program on the host provides a registration form and a graphical 
control panel. Every new base station or access point needs to be registered first to the system before using. After 
registering, the GUI allows a user to easily drag their items on the panel to set up the location of each access point 
and target device, and then draw the path for the move track. After configuration, user starts to profile energy 
consumption through wireless network emulation.  
 
4. Experiments and Results 
 
4.1. Experiment Setup 
 
We use Beagleboard [11] as our embedded platform, and measure both voltage and current of each I/O component 
by using a National Instruments PCI-6115 data acquisition board with voltage probes and current clamps. In order to 
get measurement point from WLAN interface, we choose a D-Link DWL-G122 USB Wireless NIC [14], rather than 
the WiFi module on Beagleboard. The wireless environment emulator is constructed with E-INSTRUMENT EPA-
400BMG programmable attenuators [15], ANGLETON RF shielded boxes and D-Link DIR-600 wifi APs and 
connect to the host with an NI PCI-GPIB Interface card [16]. Figure 7 demonstrates the whole profiling system.  
 
Component 
view
Process
view
Function
view
Mobility 
trace
 
Figure 8. The GUIs displaying energy profiling results for each process, function, and mobile mobility path. 
 
5. Conclusions 
 
In this project, we introduced our measurement-based energy profiling tool with software controllable wireless 
environment. This tool is capable to profile the power consumption of Java programs on Dalvik virtual machine [12] 
at process-level and function-level granularities, and to correlate energy consumption of I/O events to software 
functions. The tool was verified and implemented on the Beagleboard platform [11] with the Android system. The 
process-level and function-level energy reports enable developers to optimize energy consumption of their software. 
During the three years project period, we have published 5 international journal papers, 9 international conference 
papers, and 4 patents. We also had 6 cooperation projects with industries vendors such as Industrial Technology 
Research Institute and MediaTek Inc. 2 technologies transfer/NTD 3,000,000 contracts had been signed under this 
project.  We have also demonstrated our proposed energy profiling tool in world top conferences such as ACM 
MobiCom 2011 and ACM EMSOFT 2011. A number of student competition and paper awards such as 財團法人中
華民國資訊學會 2011 年碩博士最佳論文獎佳作, 國科會大專學生參與專題研究計畫研究創作獎, 九十九學年
度教育部補助大學校院嵌入式系統競賽創意應用組特優, 中國工程師學會學生分會工程論文競賽資訊組特優
獎, 教育部九十九學年度大學校院網路通訊軟體與創意應用競賽手機應用組第一名 are received.  
 
6. References 
 
[1]  J. Flinn, and M. Satyanarayanan, “PowerScope: A tool for profiling the energy usage of mobile applications,” in 
Proceedings of the 2nd IEEE Workshop on Mobile Computing Systems and Applications, 1999. 
[2]  Changjiu Xian, Le Cai, and Yung-Hsiang Lu, “Power Measurement of Software Programs on Computers With Multiple I/O 
Components,” IEEE Transactions on Instrumentation and Measurement, Vol. 56, pp. 2079-2086, 2007. 
[3]  K. Paul and T.K. Kundu, “Android on Mobile Devices: An Energy Perspective,” IEEE 10th International Conference on 
Computer and Information Technology , 2010. 
[4]  A. Rice, and S. Hay, “Decomposing power measurements for mobile devices,” IEEE International Conference on Pervasive 
Computing and Communications, 2010. 
表 Y04 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                             2011年 09月 01日 
報告人姓名 曹孝櫟 
 
 
服務機構 
及職稱 
交通大學資訊工程系 
 
 
     時間 
會議 
     地點 
葡萄牙 
波多 
本會核定 
補助文號 
NSC 99-2220-E-009-045 
會議 
名稱 
 (中文) 第二屆嵌入式與即時系統分析工具與技術國際學術研討會 
 (英文) 2nd International Workshop on Analysis Tools and 
Methodologies for Embedded and Real-time Systems 
發表 
論文 
題目 
 (中文) 以硬體協助之多核心嵌入式系統耗電分析工具 
 (英文) Hardware-Assisted Energy Consumption Evaluation Tool for 
Multi-core Embedded Systems 
附
件
三 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/03/27
國科會補助計畫
計畫名稱: 子計畫二:嵌入式網路通訊裝置耗能評比基準與工具之研發(中心分項)(2/2)
計畫主持人: 曹孝櫟
計畫編號: 99-2220-E-009-045- 學門領域: 自由軟體暨嵌入式系統
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
We have demonstrated our energy profiling tool in world top conferences 
such as ACM MobiCom 2011 and ACM EMSOFT 2011. The students also received 
several papers and system development awards such as 財團法人中華民國
資訊學會 2011 年碩博士最佳論文獎佳作, 國科會大專學生參與專題研究計畫
研究創作獎, 九十九學年度教育部補助大學校院嵌入式系統競賽創意應用組特
優, 中國工程師學會學生分會工程論文競賽資訊組特優獎, 教育部九十九學年
度大學校院網路通訊軟體與創意應用競賽手機應用組第一名. 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
