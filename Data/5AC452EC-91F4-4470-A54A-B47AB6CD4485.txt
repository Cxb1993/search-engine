Abstract
Synthesis and verification both concern formal correctness of a system. While verification
checks whether a given system is correct with respect to its specification, synthesis attempts
to automatically construct a correct one. A central concept in the problem of synthesizing
an open system or reactive module is the realizability of a specification by a module that does
not control or foresee the future of its environment. This concept of realizability corresponds
to the existence of a winning strategy for the protagonist representing the module in a two-
player game with the specification as the winning condition.
In this project, we investigate the synthesis problem with the specification given by a
linear temporal formula in the assumption/guarantee style. This was motivated by the high
complexity of synthesis with arbitrary linear temporal formulae, which is double exponential.
We show that, for assumption/guarantee formulae, realizability and hence synthesis are
solvable in polynomial space. It is possible to decompose the specification of a composite
system, if realizable, into the assumption/guarantee specifications of its constituent modules
and the synthesis of a reactive module from its assumption/guarantee specification then
serves as a building block for the synthesis of the composite system.
Keywords: Assumption/Guarantee, Automata, Games, Open Systems, Reactive Systems,
Specification, Synthesis, Temporal Logic, Verification, Winning Strategies.
1 Introduction
We are concerned with correct construction of systems that are the parallel composition of
several concurrent modules. The kind of systems or modules that interest us are open in that
they interact with their environment (consisting of other systems or modules) and reactive in
that the interaction is ongoing and may never terminate. As a system may serve as a module of
another larger system, we will not distinguish between a system and a module unless necessary.
Instead of verifying the conformance of a system to its specification after the construction, one
may try to synthesize, by applying some systematic transformation to the given specification, a
system that is correct by way of construction. However, not every specification is realizable. As
a reactive module cannot control or predict its environment, at any moment in time the module
can rely only on the inputs it has observed from the environment so far to decide its next output
in such a way that the resulting interaction will meet the specification. This dependency of a
module’s reaction only on the history of its environment’s behavior is reminiscent of a strategy
in games.
Indeed, a reactive module may be modeled as an infinite two-player game where one player (the
protagonist) represents the module and the other (the adversary) represents its environment.
With a given game arena and a set of designated initial game positions, the winning strategy for
the protagonist represents an abstract program of the module, while the winning set (from the
perspective of the protagonist) specifies the requirements of the module. The realizability of a
specification by a reactive module then corresponds to the existence of a winning strategy for
the protagonist that represents the module and the synthesis of the module to the computing
of the winning strategy. Though essentially the same problem and its solution may be traced
2
In this project, we investigate the synthesis problem with the specification given by a temporal-
logic formula in the A/G style. PTL and QPTL will be our main temporal logics for specifying
the behaviors of a module. We have developed in the past a temporal logic formulation of
assumption-guarantee specifications, A/G specifications for short, as well as proof rules for
composing such specifications [6, 23]. The formulation was defined in LTL and can obviously
be specialized for PTL and QPTL.
Not only may they help in reducing the complexity, A/G specifications also enable us to treat
maximal environments, which provide all possible inputs to the module, and non-maximal
ones uniformly. And, with QPTL as the specification language, information hiding may also be
expressed as existential quantification over flexible variables. The decidable cases in synthesizing
distributed systems are of extremely high (non-elementary) complexities, which suggests that
fully algorithmic solutions are not practical. However, it may be possible to decompose the
specification of a composite system, if realizable, into the A/G specifications of its constituent
modules. The preceding solutions for synthesizing a reactive module from its A/G specification
then serves as a building block for the synthesis of the composite system.
2 Related Work
A brief survey has been provided in the project proposal, except the following two more recent
works. Schewe and Finkbeiner [17] proved that, for Alternating Time Logics, distributed syn-
thesis is decidable if and only if the architecture is hierarchical (where for every two modules,
one sees all inputs of the other). Hierarchical architectures form a strict subset of architectures
that do not contain an information fork, for which the synthesis problem is decidable for weaker
linear and branching-time logics. In [16], the same authors consider the problem of synthesizing
a system with a given upper bound on its size. For linear temporal logic, they showed that the
problem can be reduced to SAT solving. The translated constraint system seems to be very
large, with a size exponential in the length of the original temporal formula.
We note that these works concern synthesis of an entire distributed system, while our main
result concerns the synthesis of a single module with restricted forms of specification, in the
hope of reducing the complexity.
3 Preliminaries
3.1 Basic Structures
We will be dealing with sequences and trees labeled with symbols from some alphabet, which
serve as models of a temporal formula, inputs to an automaton, runs of an automaton, etc.
Sequences are simply the special case of unary trees or paths (branches) of a tree. Let Zm
denote the set {0, 1, · · · ,m− 1} and  denote the empty word (string). A k-ary tree is a prefix-
closed subset of Z∗k . That is, each node of a k-ary tree is represented by a word in Z
∗
k and if xa
4
ones.
p ∧ q ∆= ¬(¬p ∨ ¬q)
p→ q ∆= ¬p ∨ q
3p
∆= ¬2¬p (eventually p or sometime p)
−3p
∆= ¬ −2¬p (once p or sometime in the past p)
∀x : p(x) ∆= ¬∃x : ¬p(x)
The familiar pU q (p until q) and pS q (p since q) can also be defined (with the help of auxiliary
variables), but these derived operators are not useful for our purposes.
A QPTL formula is interpreted over an infinite sequence of states σ = s0, s1, s2, · · ·, relative to
a position in the sequence; a state is simply a subset of the boolean variables (representing a
truth assignment to the boolean variables). Below is the semantics of QPTL formulae:
• For a variable x ∈ V , (σ, i) |= x iff x ∈ si.
• (σ, i) |= ¬p iff (σ, i) |= p does not hold.
• (σ, i) |= p ∨ q iff (σ, i) |= p or (σ, i) |= q.
• (σ, i) |= ©p iff (σ, i+ 1) |= p. In other words, ©p holds at a position (of some sequence) if
p holds at the next position (of that sequence).
• (σ, i) |= 2p iff ∀k ≥ i : (σ, k) |= p. In other words, 2p holds at a position if p holds at
that position and all following positions.
• (σ, i) |= ∼©p iff (i > 0)→ ((σ, i− 1) |= p). In other words, ∼©p holds at a position if either
the position is the first position (i.e., i = 0) or p holds at its immediate preceding position.
first ∆= ∼©false, which is true only at position 0.
• (σ, i) |= −2p iff ∀k : 0 ≤ k ≤ i : (σ, k) |= p. In other words, −2p holds at a position if p
holds at that position and all preceding positions.
A sequence of states σ′ is called a x-variant of σ if σ′ differs from σ in at most the interpretation
given to x in each state.
• (σ, i) |= ∃x : p iff (σ′, i) |= p for some x-variant σ′ of σ.
The truth of ∃x : p, for a boolean variable x, depends on the existence of an infinite sequence
of boolean values for x (one for each state, rather than just a single value) such that p can
be satisfied. Like in classical logic, existentially quantified variables are internal (local) to a
formula and their values are inaccessible from outside of the formula.
We say that a sequence σ satisfies a formula p if (σ, 0) |= p, often abbreviated as σ |= p. A
formula p is valid, denoted |= p, if p is satisfied by every sequence. A temporal formula can be
6
Let A = 〈QA,ΣA, δA, QinitA ,AccA〉 be an ω-automaton. A run of A over an infinite word w =
a0a1a2 · · · ∈ ΣωA is an infinite sequence of states r = q0q1q2 · · · ∈ QωA such that:
• q0 ∈ QinitA and
• qi ∈ δ(qi−1, ai−1), for all i ≥ 1.
Let Inf(r) be the set of states that appear infinitely many times in a run r. We now define the
different classes of automata by giving the corresponding acceptance sets and conditions.
• An ω-automaton A = 〈QA,ΣA, δA, QinitA , F 〉 with F ⊆ Q is called a Bu¨chi automaton if
it uses the following acceptance condition (Bu¨chi acceptance): a word w ∈ ΣωA is accepted
by A iff there exists a run r of A over w such that Inf(r) ∩ F 6= ∅.
• An ω-automaton A = 〈QA,ΣA, δA, QinitA ,Ω〉 with Ω = {(R1, P1), (R2, P2), · · · , (Rk, Pk)},
where Ri, Pi ⊆ Q, is called a Streett automaton if it uses the following acceptance
condition (Streett acceptance): a word w ∈ ΣωA is accepted by A iff there exists a run
r of A over w such that, for all i, (Inf(r) ∩ Ri 6= ∅) ∨ (Inf(r) ⊆ Pi), or equivalently,
(Inf(r) ∩Ri 6= ∅) ∨ (Inf(r) ∩ P¯i = ∅).
• An ω-automaton A = 〈QA,ΣA, δA, QinitA ,Ω〉 with Ω = {(R1, P1), (R2, P2), · · · , (Rk, Pk)},
whereRi, Pi ⊆ Q, is called aRabin automaton if it uses the following acceptance condition
(Rabin acceptance): a word w ∈ ΣωA is accepted by A iff there exists a run r of A over
w such that, for some i, (Inf(r) ∩ Ri = ∅) ∧ (Inf(r) 6⊆ Pi), or equivalently, (Inf(r) ∩ Ri =
∅) ∧ (Inf(r) ∩ P¯i 6= ∅).
(There are other variants.)
We have deliberately used a slightly different convention in giving the acceptance sets and
conditions for Streett and Rabin automata. To convert a usual definition to ours, each pair
(E,F ) in the acceptance set of the usual definition should be changed into (E, F¯ ). Each pair
has been named as (R,P ) here, following [11], to suggest that R represents a Recurrent set and
P a Persistent set, which would be more convenient when we want to show the correspondence
between an ω-automata and a temporal formula.
Nondeterministic Bu¨chi automata, deterministic/nondeterministic Streett automata, determin-
istic/nondeterministic Rabin automata are expressively equivalent and are all closed under
union, intersection, and complementation. Deterministic Bu¨chi automata are strictly weaker.
3.4 Automata on Infinite Trees
We now turn to automata that operate on infinite (labeled) trees, namely tree automata.
Though invented for quite a different purpose, tree automata have a natural interpretation
as two-player games and have found applications in the synthesis of reactive modules. In one
such application, the labeled input tree may be seen as representing the strategy (control code)
8
and Player σ¯ = 1 − σ to the other player or the opponent of the former player. A game is
played by initially placing a token on some node in V . The two players then take turns (not
necessarily alternating) to move the token to some other node as allowed by E. If the token is
currently in node v which is a σ-vertex, then it is the turn of Player σ who may move the token
to any node in the set vE = {v′ | (v, v′) ∈ E} of successors of v. This is repeated indefinitely
or until a dead-end node without successors is reached.
Formally, a play in an arena A = 〈V 0A, V 1A, EA〉 is a sequence pi ∈ (V +A ∪ V ωA ) such that either of
the following conditions holds:
• pi = v0v1v2 · · · vl ∈ V +A is finite and, for all i < l, (vi, vi+1) ∈ E and vlE = ∅.
• pi = v0v1v2 · · · ∈ V ωA is infinite and, for all i, (vi, vi+1) ∈ E.
A game is a pair 〈A,Win〉, where A is the game arena and Win is the winning set. The winning
set contains only infinite plays; the winner (or loser) of a finite play is naturally determined by
the last node in the play. Player 0 wins (and Play 1 loses) a play if the play belongs to the
winning set. For our purposes, we will be interested in winning sets that can be described by
the acceptance conditions we have seen earlier for ω-automata and tree automata. Different
classes of games then arise and acquire their names from the different acceptance conditions.
While the various acceptance conditions make sense only for finite sets of states/nodes, the
number of nodes in a game arena may be infinite. So, before the acceptance conditions can be
applied, we introduce one layer of abstraction over the game arena, namely a coloring function
χ : V 7→ C that maps every node in V to an element in a finite set C of colors. The coloring
χ is extended to a coloring of a play in the obvious way: if pi = v0v1v2 · · · is a play, then
χ(pi) = pi(v0)pi(v1)pi(v2) · · ·.
A game G = 〈A,Wχ(Acc)〉 is called a Bu¨chi or Rabin game if its winning set Wχ(Acc) is
defined by a corresponding acceptance condition Acc, which is applied to the χ-colored plays
(that is, a play is in the winning set if its colored version satisfies the acceptance condition).
These games are usually referred to collectively as regular games. When a game G has a fixed
starting node vinit , it is called an initialized game and is denoted as 〈G, vinit〉.
To win a play, either player would follow certain strategy when selecting the next move from
the set of legal moves. Formally, for a given arena 〈V 0, V 1, E〉, a strategy is a partial function
fσ : V ∗ × V σ 7→ V which is defined for every piv ∈ V + ending with a node v ∈ V σ that has
at least one successors and, in this case, fσ(piv) ∈ vE. A prefix of a play v0v1 · · · vl is said to
conform to fσ if, for every i with 0 ≤ i < l and vi ∈ V σ, vi+1 = fσ(v0 · · · vi). A play conforms to
a strategy if each of its prefixes conforms to the strategy. A strategy fσ is said to be a winning
strategy for Player σ on U (⊆ V ) if every play that starts from a vertex in U and conforms to
fσ is a win for Player σ.
10
that may arbitrarily change the values of its input variables but not its output or local variables.
With temporal logic as the modeling language, we distinguish two kinds of specification: system
specification and requirement specification. The system specification of a module gives a full
characterization of the module in the sense that the sequences satisfying the specification are
exactly those produced from open execution of the module. Assuming a single local variable,
its safety part can be put in the form of 2(∃x : −2((first → Init) ∧ N)), where x is the local
variable, Init is a state formula, and N is the disjunction of transition formulae that relate the
current values of the variables to their previous values. We omit the formula for fairness. When
QPTL is used, values in a finite domain can be encoded by boolean values; for modules with
variables of infinite domains, LTL is needed.
Requirement specifications are the usual type of temporal-logic specification, describing abstract
properties of a module. A module M is said to satisfy a formula p if every computation of M
satisfies p. Let ΦM denote the system specification of M . We will regard ΦM → p as the formal
definition of the fact that M satisfies p, denoted as M |= p.
Parallel composition corresponds to conjunction in temporal logic. It follows that, if M is a
module of system S (≡ M ∧M ′, for some M ′), then M |= p implies S |= p. In other words,
every property one deduces (in a modular way) from a particular module will hold for the entire
system.
We next review our temporal-logic formulation of A/G specifications. The specification E  M
of a module, where E is the assumption about its environment and M the guarantee by the
module, essentially asserts that M holds at least one step longer than E does, i.e., if the
environment has satisfied E up to the previous state then the module will satisfy M up to the
current state. If E and M are expressible respectively as 2HE and 2HM , where HE and HM
are past formulae (whose truth depends only on the current and past states), E  M (i.e.,
2HE  2HM ) can be succinctly expressed as 2( ∼© −2HE → −2HM ).
Hiding is a common technique for making specifications more abstract and corresponds to
existential quantification over flexible variables. A temporal formula ϕ will be written as ϕ(~x)
to emphasize that the free (flexible) variables of ϕ are among the tuple ~x of variables. An A/G
formula with assumption 2(∃w : −2HE(x, y, w)) and guarantee 2(∃z : −2HM (x, y, z)) is defined
below; variable x is the input (output) variable of the module (environment) and y the output
(input) variable of the module (environment).
2(∃w : −2HE(x, y, w))2(∃z : −2HM (x, y, z)) ∆= 2[ ∼©(∃w : −2HE(x, y, w))→ (∃z : −2HM (x, y, z))]
Like in the case without hiding, the defining formula2[ ∼©(∃w : −2HE(x, y, w))→ (∃z : −2HM (x, y, z))]
says that ∃z : −2HM (x, y, z) holds at least one step longer than ∃w : −2HE(x, y, w) does.
The following lemma states that A/G specifications can be composed in a straightforward way:
Lemma 3.1 (Simple Composition) Assuming that w1, . . ., wn, z1, . . ., zn are distinct and
12
form of 2HE(x, y)  2HM (x, y), where HE(x, y) and HM (x, y) are past PTL formulae. Recall
that 2HE(x, y)  2HM (x, y) can be succinctly expressed as 2[ ∼© −2HE(x, y)→ HM (x, y)]. The
formula HM (x, y) in the guarantee part often would be a transition formula that relates the
current value of y to the previous value of x, which would make realizability trivially true.
However, HM (x, y) can be more complicated.
We say that 2HM (x, y) constrains E if 2(∃y : −2HM (x, y)) is not a valid formula, i.e., its
truth value depends on the remaining free variable x which is controlled by the environment E;
otherwise, we say 2HM (x, y) does not constrain E.
We claim that, if 2HM (x, y) does not constrain E, then realizability of 2HE(x, y)  2HM (x, y)
is equivalent to satisfiability of the same formula, which is in PSPACE [19].
5 Concluding Remarks (Self Evaluation)
It seems very natural to assume that the specification for a module is given in the A/G style.
We have just touched on a promising direction for synthesis. Efficient algorithms for system
construction remain to be developed.
We had planned to exploit the program extraction feature of the Coq [21] proof assistant in this
context. However, we were unable to complete this investigation due to rather involved technical
difficulties, e.g., the need of a constructive version of temporal logic. We will leave this for future
research. We still hope to become the first to successfully use a proof assistant to extract a
reactive module from the proof of validity of the implementability formula corresponding to the
given specification of the module. For specifications that defy fully algorithmic solutions for
synthesis, the machine-assisted approach would provide the only alternative for the automation
of open system construction.
This project involved an extensive set of fundamental mathematical and logic tools, including
various classes of automata on infinite objects, games, and temporal logic. It helped the par-
ticipating students get an early exposure to these foundational tools that should be very useful
for their future research careers.
References
[1] M. Abadi, L. Lamport, and P. Wolper. Realizable and unrealizable concurrent program
specification. In Proceedings of the 16th International Colloquium on Automata, Languages,
and Programming, LNCS 372, pages 1–17, 1989.
[2] E.M. Clarke, O. Grumberg, and D.A. Peled. Model Checking. The MIT Press, 1999.
[3] E. Gra¨del, W. Thomas, and T. Wilke. Automata, Logics, and Infinite Games (LNCS 2500).
Springer, 2002.
14
[18] A.P. Sistla. Theoretical Issues in the Design and Verification of Distributed Systems. PhD
thesis, Harvard, 1983.
[19] A.P. Sistla and E.M. Clarke. Complexity of propositional linear temporal logics. Journal
of the ACM, 32:733–749, 1985.
[20] A.P. Sistla, M.Y. Vardi, and P. Wolper. The complementation problem for Bc¨hi automata
with applications to temporal logic. Throretical Computer Science, 49:217–237, 1987.
[21] The Coq Development Team. The Coq Proof Assistant: Reference Manual, 2004.
[22] W. Thomas. Automata on infinite objects. In J. van Leeuwen, editor, Handbook of Theo-
retical Computer Science, Volume B: Formal Models and Semantics, pages 133–191. MIT
Press, 1990.
[23] Y.-K. Tsay. Compositional verification in linear-time temporal logic. In J. Tiuryn, editor,
Proceedings of the Third International Conference on Foundations of Software Science and
Computation Structures, LNCS 1784, pages 344–358. Springer, March 2000.
[24] Y.-K. Tsay, Y.-F. Chen, M.-H. Tsai, W.-C. Chan, and C.-J. Luo. GOAL extended: To-
wards a research tool for omega-automata and temporal logic. In Proceedings of the 14th
International Conference on Tools and Algorithms for the Construction and Analysis of
Systems (TACAS 2008). To appear as an LNCS volume.
[25] Y.-K. Tsay, Y.-F. Chen, M.-H. Tsai, K.-N. Wu, and W.-C. Chan. GOAL: A graphical
tool for manipulating bu¨chi automata and temporal formulae. In Proceedings of the 13th
International Conference on Tools and Algorithms for the Construction and Analysis of
Systems (TACAS 2007), LNCS 4424, pages 466–471. Springer, March 2007.
[26] P. Wolper. Temporal logic can be more expressive. Information and Computation, 56(1-
2):72–99, 1983.
16
ACM Software System Award (former winners include UNIX, TeX, TCP/IP, SMALLTALK,
WWW, Tcl/Tk, Java, etc.). Meyer jokingly dubbed the Spec# system as Eiffel in braces.
Aspect-oriented programming has emerged as a new paradigm in the design and development
of software systems. In his FOSSACS invited talk “Formal Foundations for Aspects”, Radha
Jagadeesan from DePaul University, USA argued that aspects are no more intractable than
stateful higher order programs.
2 Presentation of My Paper
I presented the following paper which I co-authored with four of my students:
Title: GOAL: A Graphical Tool for Manipulating Bu¨chi Automata and Temporal Formulae
Authors: Yih-Kuen Tsay, Yu-Fang Chen, Ming-Hsien Tsai, Kang-Nien Wu and Wen-Chin Chan
The paper describes a tool, named GOAL, that we have been developing for learning and
researching omega-automata and linear temporal logics. The tool had earlier been introduced
in an informal workshop FMEd affiliated with FM 2006. My Ph.D. student Yu-Fang Chen also
attended the conference. To allow him to gain some experience and to get exposed, I asked him
to do the demo part of the 30-minute presentation.
Our tool was well received by the participants. Several of them came to greet us right after
our presentation. One of them even suggested an efficient procedure, though not difficult to
conceive, for testing the equivalence between a Bu¨chi automaton and a temporal formula. The
equivalence test was not directly supported by our tool at that time. His suggestion prompted
us to implement it in the next version.
3 Meeting Old Friends
I met Parosh Abdulla, a former colleague at Uppsala University back in 1993-5 while I was a
postdoctoral researcher there. We had worked together with Cˇera¯ns and Jonsson to develop
fundamental theorems for the verification of infinite-state systems. Our joint work turned to
be an influential one, accumulating a considerable number of citations over the years. Abdulla
is still very actively pursuing various directions of the same research topic. Through Abdulla,
I also got to know Ahmed Bouajjanni from Paris 7 during the conference. Bouajjanni is also
very active in the same area and a frequent co-author of Abdulla.
I was also very happy to meet for the third time Ridha Khedri. He visited Taipei for the ATVA
conference in 2003. I met him again in FM 2006, of which his institute was the host, just a few
months prior to TACAS. Khedri has been a faculty member at McMaster University, Canada
for some time. He is an expert in algebras and their applications. It is always very nice to have
someone showing you things, technical or non-technical, from a different perspective. We had
a dinner and a few walks around the host town. Khedri originally was from Tunisia and from
his story telling I realized how little I knew about North Africa.
2
