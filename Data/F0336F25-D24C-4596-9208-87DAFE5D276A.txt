feasible in real-world applications. 
 
Keywords：location-based services, 
moving objects, location-based queries, 
range query, KNN query. 
 
三、 緣由與目的 
隨著無線網路通訊的蓬勃以及一
些可攜式的計算機的普及化，例如手
提電腦 (laptop or notebook)、手機
(mobile phone)、個人數位化助理
(PDA)、以及3G 行動電話。以往要透
過網路存取資料都必須侷限於特定地
方特定時間的限制已 被打破。使用者
可以在任何時刻以及任何地點，藉由
這些可攜式設備來透過無線網路去得
到自己所感興趣的資料。 
在最近幾年，原本是用於軍事用
途的全球定位系統(GPS) 已經開放給
民間機構使用。只要物體有裝設接收
器，則物體都能靠所收到的衛星訊號
來定位出空間座標。這些物體可以是
靜止不動的(static objects)，例如是建築
物、油田；也可以是持續移動的物體
(moving objects)，像是車輛、人等等。
近幾年，有很多研究將目標放在如何
在伺服器端有效的管理這些物體，以
提供客戶端的使用者透過無線網路去
對物體資料作查詢。這樣的系統可以
允許使用者在任何時間任何地點查詢
他周圍附近物體的狀況，進而可以有
進一步的反應動作。例如緊急救護系
統，當使用者在馬路遇見交通事故，
可以透過這個系統找出最近的醫院，
花最少的時間將傷患送至該醫院醫
治。這一類跟靜止或移動物體的所在
位置相關之查詢被稱為以位置為基礎
之查詢(location-based queries)，簡稱為
LBQ [Bar99, LLXZ02, TPS02, XZLL03, 
ZZPT+03, ZXLL04, CJP05, XMA05]。
由於LBQ 能提供使用者隨時隨地的
查詢自己周圍物體的位置相關資訊，
這在過去的系統是不可能達成的功
能。因此，隨著無線通訊環境的普及
化，設計一個系統框架來迅速地回答
使用者所提出的LBQ 可以說是很重
要的關鍵應用(killer applications)。 
在本計劃中，我們的討論集中在
兩類最熱門的LBQ。這兩類查詢分別
定義如下： 
區域查詢(Range query)：查詢者給
定一個空間區域(spatial range) R，則伺
服器端會根據所有物體的位置資訊來
判斷出哪些物體是在這個區域R 之
內。 
最近K個鄰居查詢(KNN query)：
查詢者給定一個K值，則伺服器端會經
由比較每個物體跟查詢者之間的距離
來 找 出 查 詢 者 的 K個 最 近 鄰 居
(K-Nearest Neighbors，簡稱為KNNs)。 
上述的 LBQ (i.e., range query 和 
KNN query) 根據查詢的時間長短可
更進一步區分為快照查詢 (snapshot 
query) 以 及 連 續 查 詢 (continuous 
query)。所謂的snapshot query 是針對
某一個時間點去執行LBQ。這一類查
詢為我們所熟知的查詢，一般資料庫
的查詢都是屬於snapshot query。而
continuous query 則是針對一段時間去
連續地執行LBQ，也就是說伺服器端
會不斷地產生查詢結果並且回報給查
詢者。相較於snapshot query，處理
continuous query會更複雜許多。因為每
個時間點都去執行查詢一定會花費太
多的計算成本且太浪費時間。為了要
研究內容與原計畫相符程度：90 % 
達成預期目標情況：100 % 
研究成果的學術或應用價值： 
目前已將設計好的存取演算法詳
細的列出，並且也計算出該方法
的成本模式。所以可以容易地併
入到實際系統中去運作。並且，
我們也將相關的理論基礎寫成論
文投到國際知名的會議期刊上。 
迄今，我們已發表的和本計劃相關的
著作有： 
1. Yuan-Ko Huang and Chiang Lee, 
“Efficient Evaluation of 
Continuous Spatio-Temporal 
Queries on Moving Objects with 
Uncertain Velocity,” 
GeoInformatica, Vol. 14(2), p.p. 
163-200, 2010. (SCI, EI) 
 
2. Lien-Fa Lin and Yuan-Ko Huang, 
“Scalable Processing of Continuous 
K-Nearest Neighbor Queries with 
Uncertainty in Spatio-Temporal 
Databases,”in Proceeding of the 
International Conference on 
Research Challenges in Computer 
Science, Shanghai, China, 
December 2009. (EI) 
 
3. Lien-Fa Lin and Yuan-Ko Huang, 
“Scalable Processing of Continuous 
K-Nearest Neighbor Queries with 
Uncertain Velocity” submitted to 
journal of Expert Systems with 
Applications. (SCI, EI) 
五、參考文獻 
[Bar99] Daniel Barbara, “Mobile 
Computing and Databases – a 
Survey”, IEEE Transactions on 
Knowledge and Data Engineering, 
11(1), 1999, pp. 108-117. 
 
[LLXZ02] Dik Lun Lee and 
Wang-chien Lee and Jianliang Xu 
and Baihua Zheng,"Data 
Management in location dependent 
services", IEEE Pervasive 
Computing,Vol. 1, No. 3, September 
2002, p.p. 65-72. 
 
[TPS02] Yufei Tao and Dimitris 
Papadias and Qiongmao Shen, 
“Continuous Nearest Neighbor 
Search",International Conference on 
Very Large Data Bases, Hong Kong 
China, August 20-23, 2002, p.p. 
279-290. 
 
[XZLL03] J.Xu, B.Zheng, W.-C.Lee 
and D.L.Lee (2003) Energy efficient 
index for energy query 
location-dependent data in mobile 
environments. In Proceedings of the 
19th IEEE International Conference 
on Data Engineering (ICDE’03), 
Bangalore, India, March, 
pp.239–250. 
 
[ZZPT+03] Jun Zhang and Manli 
Zhu and Dimitris Papadias and Yufei 
Tao and Dik Lun Lee, 
"Location-based Spatial Queries", 
Proceedings of the 2003 ACM 
SIGMOD, San Diego, California, 
USA , June 9-12 2003,p.p. 443-454. 
 1 
MUE 2010參加國際會議心得報告 
 
黃淵科 於 99/08/20 
 
本人於八月十一日至八月十四日赴菲律賓宿霧市（Cebu）參加MUE 2010，
這是個在資料庫領域中相當有名的國際會議。本次會議為第四屆舉辦，其議程
包括 8 場專題演講、25 場完整論文發表會。在論文投稿與評審方面，本次會議
論文的 72 位評審委員由來自各大學、研究機構與產業界等所組成；最後從 171
篇投稿論文中僅選出 50篇論文。 
 
我於八月十一日由台灣出發直飛菲律賓，於當日下午 03:00左右抵達宿霧機
場。之後搭乘大眾巴士到達下榻的飯店。由於會議舉辦的飯店 Plantation Bay 
Hotel 訂房價格十分昂貴，所以我選擇了另外一間離議場較近，但價格較便宜的
飯店居住。 
 
本次會議的第一天共有 8個 regular paper session以及 4場專題演講舉行，而
第二天同樣地有 4專題演講和 8個 regular paper session 舉行。在最後一天，還
有 9個 regular paper session會舉辦。大部份的場次我都有參與，之所以會參加
這些 session是因為這些 session的內容和我的研究領域非常相關。主要是討論在
傳統與新興資料庫中如何有效的對資料作管理以及查詢。 
 
會議的第一天的早上是正式開幕的儀式，儀式中主席報告了之後三天的議
程，以及一些日後會議的走向，這也提醒了我研究的環境改變十分快速，要隨
時注意目前的發展，以免落後國外的趨勢。之後，我參加了多個 session，並聽
取來自個國的專家討論他們的心得。這些 session 分別是有關於 Multimedia 
Applications，Multimedia Processing，以及 Ubiquitous Services等等。雖然這和
我心中所想的 data management領域有所差距，但還是吸收了不少經驗。 
 
會議第二天的專題演講是由多個在韓國任教的大學教授所主講。演講的重點
就著力於一些與 Multimedia 相關的現實應用。雖然我的研究重心並沒有著重在
這個領域，但這些教授的演講內容並不算深奧，所以還可以抓住部分的重點。
在日後的幾天的議程中，也有一些其研究團隊所發表之 paper，而我也聽了他們
的報告，也是得到了不少的啟發。我也參加了大部分的 session，並聽取來自個
國的專家討論他們的心得。這些 session 分別是有關於 Ubiquitous Services and 
Applications和 Pervasive Intelligence。這個環境的研究有部分和我所做的研究有
所重疊，所以我吸收了不少相關的知識。 
 
會議的第三天全部安排論文發表。而我也被安排在這一天報告我們的論文。
1Processing K-Best Site Query in Spatial Databases
Yuan-Ko Huang and Lien-Fa Lin
Department of Information Communication
Kao-Yuan University, Kaohsiung Country, Taiwan, R.O.C.
Email: {huangyk, lienfa}@cc.kyu.edu.tw
Abstract—A novel query in spatial databases is the K-Best
Site Query (KBSQ for short). Given a set of objects O, a set
of sites S, and a user-given value K, a KBSQ retrieves the K
sites s1, s2, ..., sK from S such that the total distance from each
object to its closest site is minimized. The KBSQ is indeed an
important type of spatial queries with many real applications. In
this paper, we investigate how to efficiently process the KBSQ. We
first propose a straightforward approach with a cost analysis, and
then develop the K Best Site Query (KBSQ) algorithm combined
with the existing spatial indexes to improve the performance of
processing KBSQ.
Index Terms—spatial databases; K-Best Site Query; KBSQ;
spatial queries
I. INTRODUCTION
With the fast advances of positioning techniques in mobile
systems, spatial databases that aim at efficiently managing
spatial objects are becoming more powerful and hence attract
more attention than ever. Many applications, such as mobile
communication systems, traffic control systems, and geograph-
ical information systems, can benefit from efficient processing
of spatial queries [1], [2], [3], [4], [5]. In this paper, we present
a novel and important type of spatial queries, namely the K-
Best Site Query (KBSQ for short). Given a set of objects O,
a set of sites S, and a user-given value K , a KBSQ retrieves
the K sites s1, s2, ..., sK from S such that
∑
oi∈O
d(oi, sj)
is minimized, where d(oi, sj) refers to the distance between
object oi and its closest site sj ∈ {s1, s2, ..., sK}. We term
the sites retrieved by executing KBSQ the best sites (or bs for
short).
The KBSQ problem arises in many fields and application
domains. As an example of real-world scenario, consider a
set of soldiers on the battlefields that is fighting the enemy.
In order to immediately support the injured soldiers, we need
to choose K sites to build the emergicenters. To achieve the
fastest response time, the sum of distances from each battle-
field to its closest emergicenter should be minimized. Another
real-world example is that the McDonalds Corporation may
ask “what are the optimal locations in a city to open new
McDonalds stores?” In this case, the KBSQ can be used to
find out the K best sites so that every customer can rapidly
reach his/her closest store.
Let us use an example in Figure 1 to illustrate the KBSQ
problem, where six objects o1, o2, ..., o6 and four sites s1,
s2, ..., s4 are depicted as circles and rectangles, respectively.
Assume that two best sites (i.e., 2bs) are to be found in
this example. There are six combinations (s1, s2), (s1, s3), ...,
(s3, s4), and one combination would be the result of KBSQ.
As we can see, the sum of distances from objects o1, o2, o3
to their closest site s3 is equal to 9, and the sum of distances
between objects o4, o5, o6 and site s1 is equal to 12. Because
combination (s1, s3) leads to the minimum total distance (i.e.,
9 + 12 = 21), the two sites s1 and s3 are the 2bs.
o1
o2
o5
o3
o4
s1
s2
s4
s3 o6
2
3
4
4
4
4
Fig. 1. An example of KBSQ.
To process the KBSQ, the closest site for each object needs
to be first determined and then the distance between object and
its closest site is computed so as to find the best combination of
K sites. When a database is large, it is crucial to avoid reading
the entire dataset in identifying the K best sites. For saving
CPU and I/O costs, we develop efficient method combined
with the existing spatial indexes to avoid unnecessary reading
of the entire dataset. The major contributions of this paper are
summarized as follows.
• We present a novel query, namely the K Best Site Query,
which is indeed an important type of spatial queries with
many real applications.
• We propose a straightforward approach to process the
KBSQ and also analyze the processing cost required for
this approach.
• An efficient algorithm, namely the K Best Site Query
(KBSQ) algorithm, operates by the support of R-tree [6]
and Voronoi diagram [7] to improve the performance of
KBSQ.
The rest of this paper is organized as follows. In section II,
we discuss some related works on processing spatial queries
similar to KBSQ, and point out their differences. In Section III,
3remaining sites s2, s3, and s4. As the site s2 can reduce more
distance compared to the other two sites, it becomes the second
bs (shown in Figure 4(b)). Finally, 2bs are s1 and s2 and the
total distance is computed as d(o4, s1)+d(o5, s1)+d(o6, s1)+
d(o1, s2)+d(o2, s2)+d(o3, s2) = 20. However, the computed
distance is not minimum and can be further reduced. As we
can see in Figure 4(c), if s2 and s4 are chosen to be the 2bs,
the total distance can decrease to 16.
(a) Step 1
o1
o2
o5
o3
o4
s1
s2
s4
s3 o6
4
5
3
6
5
4
o1
o2
o5
o3
o4
s1
s2
s4
s3 o6
4
5
3
2
42
(b) Step 2
o1
o2
o5
o3
o4
s1
s2
s4
s3 o6
4
3
2
2
3
2
(c) correct result
Fig. 4. An example of MDOLQ.
III. STRAIGHTFORWARD APPROACH
In this section, we first propose a straightforward approach
to solve the KBSQ problem, and then analyze the processing
cost required for this approach. Assume that there are n objects
and m sites, and the K bs would be chosen from the m sites.
The straightforward approach consists of three steps. The first
step is to compute the distance d(oi, sj) from each object oi
(1 ≤ i ≤ n) to each site sj (1 ≤ j ≤ m). As the K best
sites are needed to be retrieved, there are totally CmK possible
combinations and each of the combinations comprises K sites.
The second step is to consider all of the combinations. For
each combination, the distance from each object to its closest
site is determined so as to compute the total distance. In the
last step, the combination of K sites having the minimum total
distance is chosen to be the query result of KBSQ.
Figure 5 illustrates the three steps of the straightforward
approach. As shown in Figure 5(a), the distances between
objects and sites are computed and stored in a table, in which a
tuple represents the distance from an object to all sites. Then,
the CmK combinations of K sites are considered so that CmK
tables are generated (shown in Figure 5(b)). For each table,
the minimum attribute value of each tuple (depicted as gray
box) refers to the distance between an object and its closest
site. As such, the total distance for each combination can be
computed by summing up the minimum attribute value of each
tuple. Finally, in Figure 5(c) the combination 1 of K sites can
be the K bs because its total distance is minimum among all
combinations.
(a) Step 1
n
m
1
1
2
2 ...
...
m
n
4
4
5
2
2
6 ...
3
3
6 ...
...
...
...
...
...
(c) Step 3
n
K
1
1
2
2 ...
...
K
n
4
4
2
2
2
6 ...
3
8
6 ...
...
...
...
...
...
combination 1
(b) Step 2
...
n
K
1
1
2
2 ...
...
K
n
4
4
2
2
2
6 ...
3
8
6 ...
...
...
...
...
...
combination 1
n
K
2
1
2
3 ...
...
K+1
n
6
5
2
4
4
3 ...
3
8
2 ...
...
...
...
...
...
n
K
1
1
2
2 ...
...
m
n
4
4
5
2
2
6 ...
3
3
6 ...
...
...
...
...
...
combination C
m
K
combination 2
Fig. 5. Straightforward approach.
Since the straightforward approach includes three steps, we
consider the three steps individually to analyze the processing
cost. Let m and n be the numbers of sites and objects,
respectively. Then, the time complexity of the first step is
m × n because the distances between all objects and sites
have to be computed. In the second step, CmK combinations are
considered and thus the complexity is CmK×m×K . Finally, the
combination having the minimum total distance is determined
among all combinations so that the complexity of the last step
is CmK . The processing cost of the straightforward approach is
represented as
m× n+ CmK ×m×K + CmK .
IV. KBSQ ALGORITHM
The above approach is performed without any index support,
which is a major weakness in dealing with large datasets. In
this section, we propose the KBSQ algorithm combined with
the existing indexes R-tree and Voronoi diagram to efficiently
process the KBSQ.
Recall that, to process the KBSQ, we need to find the closest
site s for each object o (that is, finding the RNN o of site s). As
the Voronoi diagram can be used to effectively determine the
RNN of each site [11], we divide the data space so that each
site has its own Voronoi cell. For example, in Figure 6(b),
the four sites s1, s2, s3, and s4 have their corresponding
Voronoi cells V1, V2, V3, and V4, respectively. Taking the
cell V1 as an example, if object o lies in V1, then o must
be the RNN of site s1. Based on this characteristic, object o
needs not be considered in finding the RNNs for the other
sites. Then, we use the R-tree, which is a height-balanced
5[5] D. Papadias, Y. Tao, K. Mouratidis, and C. K. Hui, “Aggregate nearest
neighbor queries in spatial databases,” ACM Trans. Database Syst.,
vol. 30, no. 2, pp. 529–576, 2005.
[6] A. Guttman, “R-trees: A dynamic index structure for spatial searching,”
in ACM SIGMOD Conf, 1984, pp. 47–57.
[7] H. Samet, The Design and Analysis of Spatial Data Structures.
Addison-Wesley, 1990.
[8] F. Korn and S. Muthukrishnan, “Influence sets based on reverse nearest
neighbor queries,” in Proceedings of the 2000 ACM SIGMOD Interna-
tional Conference on Management of Data, Dallas, Texas, USA, May
16-18 2000, pp. 201–212.
[9] D. Papadias, Q. Shen, Y. Tao, and K. Mouratidis, “Group nearest
neighbor queries,” in Proceedings of the International Conference on
Data Engineering, 2004.
[10] D. Zhang, Y. Du, T. Xia, and Y. Tao, “Progressive computation of the
min-dist optimal-location query,” in Proceedings of the VLDB, 2006.
[11] J. Zhang, M. Zhu, D. Papadias, Y. Tao, and D. L. Lee, “Location-based
spatial queries,” in ACM SIGMOD, San Diego, California, USA, June
9-12 2003.
98年度專題研究計畫研究成果彙整表 
計畫主持人：黃淵科 計畫編號：98-2218-E-244-002- 
計畫名稱：針對道路網路上移動物體去處理以位置為基礎之查詢研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 2 2 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 1 100%  
研究報告/技術報告 0 0 100%  
研討會論文 2 2 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
