英 文 摘 要 ： Delay control is an important technique to offer 
quality-of-service (QoS) on Internet. As a rapid 
development of Internet, more and more delay-
sensitive service contents are delivered on Internet. 
In addition to unicast delivery, multicast services 
such as grouping telephony, tele-conferencing and 
multi-party on-line game become popular gradually. In 
such a situation, how to control, even equalize the 
delays, for participants in a service is the issue to 
explore. Particularly, in the era of Internet service 
globalization, the content accessed by people is not 
only local but global. Higher delay differentiation 
is challenging the current Internet. In this two-year 
project, we have achieved the following goal s, 
including (1) delay modeling for Layer 4 (2) 
development of Layer4 delay control based on the 
previous Layer3 delay control technique (3) 
exploration of impact factors of network environments 
on end-to-end delay (4) a delay-control solution 
based the collaboration of Layer3 and Layer4protocol 
(5) the development, verification and performance of 
software modules in various scenarios. Traditionally, 
mechanisms for delay control, like PAD scheduling, 
WTP scheduling, and HPD scheduling, are all deployed 
in IP layer and only offer a ratio of delay time for 
different applications. These mechanisms cannot 
precisely control delay for a certain queuing delay 
request. Besides, layer3 delay control scheme is hard 
to deploy on on-line routers. In contrast, layer4 
protocol, operated in a end-to-end manner, is able to 
control end-to-end delay when the connection 
bandwidth is reserved by layer3 protocol such as 
DiffServ. The cross-layer solution is found to be 
feasible and effective for the target problem in this 
project. Thus, in order to offer an accurate delay 
control service, we present DCF-TCP, a delay control 
mechanism based on FAST TCP, in this project. In 
FAST-TCP, round-trip time is evaluated to derive the 
end-to-end delay between ends. The derived delay is 
compared the expected delay to adjust the waiting 
queue of the controlled connection. Numeric results 
show that the delay errors in cases of various 
 1
行政院國家科學委員會補助專題研究計畫 ■成果報告   □期中進度報告 
 
應用於長距離高速網路環境之延遲控制技術研究與軟體模組實現 
 
計畫類別：■個別型計畫   □整合型計畫 
計畫編號：NSC 98-2221-E-151 -029 -MY2 
執行期間：  98 年 8 月 1 日至  100 年 7 月 31 日 
 
執行機構及系所：國立高雄應用科技大學電子系通訊組 
 
計畫主持人：洪盟峰 
共同主持人：郭耀煌 
計畫參與人員：黃文、張至誠、劉益獅、陳怡婷、張博超 
 
 
 
成果報告類型(依經費核定清單規定繳交)：□精簡報告 ■完整報告 
 
本計畫除繳交成果報告外，另須繳交以下出國心得報告： 
□赴國外出差或研習心得報告 
□赴大陸地區出差或研習心得報告 
■出席國際學術會議心得報告 
□國際合作研究計畫國外研究報告 
 
 
處理方式：除列管計畫及下列情形者外，得立即公開查詢 
            ■涉及專利或其他智慧財產權，□一年■二年後可公開查詢 
 
中   華   民   國 100 年  10 月  30 日 
 3
 
Abstract 
Delay control is an important technique to offer quality-of-service (QoS) on Internet. As a rapid 
development of Internet, more and more delay-sensitive service contents are delivered on Internet. In addition 
to unicast delivery, multicast services such as grouping telephony, tele-conferencing and multi-party on-line 
game become popular gradually. In such a situation, how to control, even equalize the delays, for participants 
in a service is the issue to explore. Particularly, in the era of Internet service globalization, the content 
accessed by people is not only local but global. Higher delay differentiation is challenging the current 
Internet. In this two-year project, we have achieved the following goal s, including (1) delay modeling for 
Layer 4 (2) development of Layer4 delay control based on the previous Layer3 delay control technique (3) 
exploration of impact factors of network environments on end-to-end delay (4) a delay-control solution based 
the collaboration of Layer3 and Layer4protocol (5) the development, verification and performance of 
software modules in various scenarios. Traditionally, mechanisms for delay control, like PAD scheduling, 
WTP scheduling, and HPD scheduling, are all deployed in IP layer and only offer a ratio of delay time for 
different applications. These mechanisms cannot precisely control delay for a certain queuing delay request. 
Besides, layer3 delay control scheme is hard to deploy on on-line routers. In contrast, layer4 protocol, 
operated in a end-to-end manner, is able to control end-to-end delay when the connection bandwidth is 
reserved by layer3 protocol such as DiffServ. The cross-layer solution is found to be feasible and effective for 
the target problem in this project. Thus, in order to offer an accurate delay control service, we present 
DCF-TCP, a delay control mechanism based on FAST TCP, in this project. In FAST-TCP, round-trip time is 
evaluated to derive the end-to-end delay between ends. The derived delay is compared the expected delay to 
adjust the waiting queue of the controlled connection. Numeric results show that the delay errors in cases of 
various transport distance, e.g. 80-160ms and various network bandwidth, e.g. 8-24 Mbps are controlled 
within 2%. So far, we have published the first-year research results in a SCI (IF>2) journal paper and an EI 
conference paper. The second-year research results have been presented in TANet 2011 partially and will be 
submitted to IEEE Transaction and two patent applications. Meanwhile we are also looking for foreign 
cooperation to verify the performance of the developed software in real long distance networks. We sincerely 
thank National Science Council for the two-year support to this research work. Without the two-year fund, we 
have no chance to have the opportunity to explore the technique for long distance networks.  
 
Keywords: End-to-End Delay Control, Transport Control Protocol, Queuing Model, TCP congestion 
control 
 5
 
1. Motivation 
As network technology developing, Internet services have a diversity of evolution. Especially, after Internet 
protocol version 6 (IPv6) [1] was deployed, more and more devices and Internet populations are involved in 
Internet. According to a research from comScore Networks in 2006 [2], there are 694 million Internet 
populations on earth. A huge amount of Internet populations will create a large need for promising 
applications and services, such as voice over IP (VOIP), multimedia streaming, real-time video conference, 
and so on. Although these applications are based on UDP mostly, in order for the better performance, 
TCP-based voice or video services are also investigated in [3]-[4] and conducted [5]. For transmission over 
Internet, the transmission delay is an important issue. The transmission delay can be divided into two parts, 
the propagation delay and queuing delay. The propagation delay is unavoidable and depends on the 
transmission distance. As regards the queuing delay, a huge amount of Internet populations also means that a 
great volume of packets are in networks at the same time. As a result, the packet queuing delay is also merited 
and not disregard. However, the packet queuing delay is a fatal factor for some real-time services, such as 
VOIP, multimedia streaming, and video conference. Therefore, delay control has become one of the most 
significant research issues. 
Thus, in order to solve this problem, there were some mechanisms [6]-[8], like PAD scheduling, WTD 
scheduling, and HPD scheduling, proposed to offer the service of delay control. However, current delay 
control mechanisms have two problems. First, these mechanisms usually just offer a ratio of delay time for 
applications and this means that these mechanisms can not accurately control delay. Second, these 
mechanisms are usually deployed in IP layer. For example, PAD scheduling, WTP scheduling, and HPD 
scheduling are all operated on routers. This implies that delay control technology needs the cooperation of all 
devices on the transmission path and this approach will result in the re-engineering of Internet facilities. 
Therefore, in this project, we present an End-to-End delay control mechanism in TCP layer. We use FAST 
TCP [9]-[12] which is one kind of TCP congestion control mechanism to control delay. Based on TCP, we can 
make delay control at end hosts come true. By adjusting the parameter of FAST TCP appositely, FAST TCP is 
proven to offer an accurate delay control service in this project.  
The rest of this report is organized as follows. Related work is explored in Section 2. In Section 3, the delay 
 7
       
a cwnd t
cwnd t+1 =cwnd t +
cwnd t
 
(1)
       threshold =cwndt+1 t 1-b cwnd t  (2)
where 
 0t  ,  is the iteration number of cwnd updating. 
a(cwnd(t)) is the increase function and always equals to 1 in Reno TCP. 
b(cwnd(t)) is the decrease function and always equals to 1/2 in Reno TCP. 
 
Equation (1) and (2) are called as response functions. Except for Reno TCP, there are some different 
variations of Reno TCP [16]-[18], for example, HS TCP [19] and FAST TCP. HS TCP was presented by Sally 
Floyd in 2003. The original purpose of HS TCP is to improve the low throughput of Reno TCP in fast 
long-distance networks. In fast long-distance networks, the propagation delay product (PDT) is large. In order 
for the high bandwidth utilization, a large cwnd is necessary. To achieve a large cwnd implies that the cwnd 
must grow fast and the cwnd control can not be too sensitive to the packet loss. But, unfortunately, this is 
almost impossible to Reno TCP. As like as Floyd states in [19]: For a Reno TCP connection with 1500-byte 
packets and a 100 ms round-trip time, achieving a steady-state throughput of 10 Gbps would require an 
average congestion window of 83,333 segments, and a packet drop rate of at most one congestion event every 
5,000,000,000 packets (or equivalently, at most one congestion event every 1 2/3 hours). This is widely 
acknowledged as an unrealistic constraint. Hence, to solve this problem, HS TCP was proposed. HS TCP 
reserves SS phase of Reno TCP, but uses more aggressive methods in CA phase. In CA phase, a(cwnd(t)) and 
b(cwnd(t)) are adjusted according to the default settings and current network environments. In general, to 
achieve a more aggressive throughput, a(cwnd(t)) ≥ 1 and b(cwnd(t)) ≤ 1/2 will be obtained. The cwnd of HS 
TCP grows faster and HS TCP performs with better throughput.  
Above, we have introduced two famous TCP congestion control mechanisms. Next, we will introduce 
FAST TCP [9]-[12]. FAST TCP, as like as HS TCP, is also a TCP congestion control mechanism proposed for 
fast long-distance networks. However, the difference from Reno TCP is that FAST TCP will measure packet 
RTT when a packet is acknowledged. According to these RTT information measured, FAST TCP uses its 
 9
 1 2 1 baseRTTw k Min w k r w k r w k
RTT
( ) ( ), ( ) ( )               (3)
where 
k is the iteration number. 
w(k) is the congestion window size in packet. 
baseRTT is the minimum RTT measured. 
RTT is current RTT. 
r is the weight factor for 0 < r ≤ 1. And a typical value for r is 0.5. 
α is a constant. 
 
 
In general case, the cwnd of FAST TCP grows exponentially first and then grows close linearly. After a 
short time, FAST TCP will drive the connection into a steady state. Then, the corresponding cwnd is kept near 
constant and FAST TCP has the better performance of throughput. However, in case of the packet loss, FAST 
TCP remains the method of Reno TCP and the cwnd will reduce by half. 
 
3.2 Mathematical Delay Analysis of FAST TCP 
Above, we have introduced FAST TCP and its features. Next, we will analyze the delay control based on 
FAST TCP.  
From Eq. (3), we can know that the cwnd of FAST TCP initially grows exponentially as like as SS phase in 
Reno TCP. Then, after a short time, the cwnd of FAST TCP is adjusted by Eq. (4) and also controlled by the 
queuing delay. 
 1 1 baseRTTw k r w k r w k
RTT
( ) ( ) ( )            (4)
Except for the cwnd updating period, there are some parameters, such as r, baseRTT, RTT, and α in FAST TCP. 
Parameters, r and α, are static while baseRTT and RTT are dynamic. When the network is free, RTT is close to 
baseRTT. Therefore, the cwnd will increase by rα every update. With the growth of cwnd, the queue length in 
the buffer will increase and the queuing delay will be longer. Thus, the packet RTT will be larger and the 
increment of cwnd will become less. The cwnd control of FAST TCP is a feedback control associated with the 
queuing delay and packet RTT. We will show that the cwnd control of FAST TCP is associated with the 
 11
1
0
0 0 1 0
ss s s
s
s s
s
s s
s
s s
s
w k w k
q kw k r w k w k
d q k
qw r w w
d q
q wr
d q
q w  r , r
d q
q w
d q
( ) ( )
( )( ) ( ) ( )
( )
( )





 
      
      
    
       
 

 
 
[Theorem 2] 
For a FAST TCP flow in the steady state, if the available bandwidth is B (bps), then we have 
sBq
pks
   (8)
where pks is the packet size. 
 
Proof: 
Denote wth as the maximum cwnd size when the bandwidth B is fully utilized without any queuing delay. 
th
B dw
pks
  (9)
where pks is the packet size. 
During the steady state, the queuing delay, qs, is 
 s th
s
w w pks
q
B
   (10)
Combine Eq. (10) with Eq. (9), we obtain 
 13
6. Repeat Step 4-5 till the end of packet delivery. 
 
Fig. 1 Procedure of the developed DCF-TCP 
The developed DCF-TCP is operated with the bandwidth reservation offered by Layer3. In the first step, 
DCF-TCP will be aware of the available bandwidth for the connection to switch on. At the same time, the 
expected packet delay and the packet size depending on the service content should be obtained before the 
connection establishment. Then the key parameter of DCF-TCP, α, is derived to manage the flow rate and to 
control the packet delay. Once the key parameter is determined, the sending rate of source is adjusted to the 
original FAST TCP according the RTT measurements from the acknowledgements from the receiver. The 
presented procedure is developed on the delay model of FAST TCP as shown in Section 3. 
 
3.4 Dynamics Analysis of DCF-TCP 
As like as FAST TCP, DCF-TCP also has the steady state. As for the steady state, the most interesting 
research issue is the convergent time of cwnd. Assume μ as the cwnd updating period of a DCF-TCP flow and 
a DCF-TCP flow will update the cwnd by period of μ. In case of d ≤ μ, the cwnd updating period is indeed 
always equal to µ. But, if the condition of d > μ is true, in fact, in the beginning of transmission, the cwnd 
updating period is RTT. This is because, before updating the cwnd, RTT should be measured at least one time 
otherwise DCF-TCP will have no new information to update it. Therefore, there are two discussion conditions 
for steady state analysis and we will start from the condition of d > μ. For a DCF-TCP flow with d > μ, there 
will be a short period in the beginning, and during this period, the cwnd is updated every RTT. Thus, in order 
to calculate the DCF-TCP cwnd convergent time, ts, we divide it into two parts, tsp and tµ. The relationships 
with ts, tsp, and tµ can be represented as 
s spt =t +t  (12)
where  
ts is the cwnd convergent time. 
tsp is the time of switch point. 
tµ is the time difference between tsp and ts of a DCF-TCP flow. 
 15
22 rssw
log     (17)
According to different relationships between wss and wsp, we have two cases to discuss. 
Case 1:  wss ≤ wsp 
  For the cwnd from 1 to wss, it should be updated by 2 sslog w  times with exponential growth in SS phase. 
Thus,  
 
21
sp ss
sp ss
w w
t log w d
r
           
 (18)
In the expression of Eq. (18), the “1” is due to the three-way handshake of TCP. 
Following, before deriving tµ, wμ, the cwnd difference of ws and wsp, should be obtained first. And wμ is given 
by 
s spw w w    (19)
In Eq. (4), if the queuing delay is ignorable, the cwnd will grow by the amount of rα every update. Therefore, 
we can know 
wt
r

 
      (20)
Combine Eq. (12) with Eq. (20), we will have 
s sp sp
w
t =t +t >t +
r

 
   
 (21)
Reorganize Eq. (21), we obtain 
 
2
2
2
1
slog r
s
B d q dd
pks
t > log r d+
r r
where d

  

                                          

 (22) 
Case 2:  wss > wsp 
In this case, tsp is : 
 21sp spt log w d      (23)
and 
 17
4. Numeric Results and Discussion 
4.1 Simulation Scenarios 
We will verify the correctness of DCF-TCP. A set of simulations is conducted by NS2 V2.28 [22]. We use a 
general bottlenecked network topology as shown in Fig. 2 for simulation. There are n DCF-TCP flows in 
networks. Si, Ri, and Bi represent the sender, receiver, and available bandwidth of the ith flow for i = 1, …, n. 
RT1 and RT2 are edge routers. C is the bottlenecked capability and
1
n
i
i
C B

  For further illustration, two 
scenarios of simulation are described as follows. 
Scenario1: A single DCF-TCP Flow 
We start from the simplest situation, only a single DCF-TCP flow in the network. In this case, other noises 
can be seen as discharged and it is the most appropriate scenario to verify the correctness of DCF-TCP. We 
will run many simulations of wired FTP links with different parameters, such as qs, B, and μ, to observe their 
relationships. 
Scenario2: Multiple DCF-TCP Flows 
In this case, we will simulate real network environment. Multiple wired FTP flows will be run in networks 
at the same time and they may have the different bandwidth, propagation transmission time, and queuing 
delay. Next, we will show the simulation results and discuss as follows. 
 
 
Fig. 2 Simulation topology 
 
4.2 Performance Evaluation 
   There are two scenarios to evaluate the performance of the developed DCF-TCP in cases of single 
connection and multiple connections.  
Scenario1: A single DCF-TCP Flow 
 19
of the queuing delay error. Although the cwnd indeed can converge to the expected value in the steady state, it 
may be oscillating. Especially, if µ is too small, the oscillation is more serious. The reason of this 
phenomenon is due to the poor updating information. In case of a small µ, even if the sender can receive an 
ACK packet to update the cwnd every µ, the RTT information is not extract and real. Average RTT calculated 
from more ACK packets is more precise than fewer ACK packets. Although DCF-TCP can recover the cwnd 
every update, inaccurate RTT information will make the cwnd bias and cause the cwnd oscillating around the 
expected value.  
The secondary reason of cwnd oscillation is the value of the expected cwnd. If the expected cwnd is not an 
integer, the cwnd will still oscillate slightly in the steady state. This is because packets can not be transmitted 
by the format of floating point number. Thus, if the expected cwnd is a floating point number, whether the 
setting of µ is appropriate or not, the cwnd will still oscillate in the steady state. 
 
Case 2: Simulations with different B: 
In this case, we will observe the relationship between B and the performance of DCF-TCP. We run a single 
DCF-TCP flow by four times. Among these four simulations, except B, other environment parameters are the 
same. From the simulation results in Case 1, we find that DCF-TCP can perform well in aspects of the 
queuing delay accuracy and cwnd convergent time under the setting ofμ= baseRTT. Therefore, we set µ as 
the same as baseRTT for these four simulations. What follows below is the simulation result when (µ, d, pks, r, 
qs) are given as (baseRTT, 120 ms, 1040 bytes, 0.5, 10.4 ms). 
 
Table 2 Simulation results with different B 
 6 7 8 9 
B (bps) 8M 12M 16M 24M 
α 10 15 20 30 
qs error (ms) 
0.203 
(1.95%)
0.101 
(0.97%) 
0.12 
(1.15%)
0.067 
(0.64%) 
Expected ts (s) 3.24 3.36 3.36 3.48 
Real ts (s) 4.6 4.4 4.4 4.4 
 
 21
 
Fig. 5 cwnd oscillation in Case 3 
 
Scenario 2: Multiple DCF-TCP Flows 
In this Scenario, we will observe the behavior when multiple DCF-TCP flows work together. We run four 
DCF-TCP flows at the same time. Among these four flows, except µ, their other environment parameters may 
be different. From the simulation results in Case 1, we find that DCF-TCP can perform well in aspects of the 
queuing delay accuracy and cwnd convergent time under the setting ofμ= baseRTT. Therefore, we set µ as 
the same as baseRTT for these four flows. What follows below is the simulation result when (µ, pks, r) are 
given as (baseRTT, 1040 bytes, 0.5). 
 
Table 4 Simulation results with multiple DCF-TCP flows 
 14 15 16 17 
B (bps) 8M 10M 10M 12M 
d (ms) 120 124 128 132 
Expected qs (ms) 10.4 9.984 19.968 10.4 
α 10 12 24 15 
qs error (ms) 
0.2 
(1.92%) 
0.136 
(1.36%)
0.128 
(0.64%)
0.105 
(1%) 
Expected ts (s) 3.24 3.596 2.304 3.96 
Real ts (s) 4.5 4.8 2.9 5.3 
 
 23
FAST TCP operational parameter, α. Then, a delay control mechanism based of FAST TCP, called as 
DCF-TCP, has been proposed to improve the network service quality. Also, a series of simulations is 
employed to verify the proposed scheme. In this work, three important features of DCF-TCP are demonstrated, 
including 
1. DCF-TCP can control delay very precisely. Through mathematical analyses, we find that by adjusting 
α adequately, the queuing delay can be controlled for different purposes. DCF-TCP can offer accurate 
delay control service, while traditional DiffServ mechanisms, like PAD scheduling, WTP scheduling, 
and HPD scheduling, just only offer a ratio of delay time for different applications. Comparing with 
these traditional DiffServ mechanisms, DCF-TCP has the better delay control performance. 
2. DCF-TCP is easy to use. Unlike traditional delay control mechanisms which need extra support on 
routers, DCF-TCP works in TCP layer and needs no support from IP layer. DCF-TCP is End-to-End 
and can be used in end hosts. Due to this advantage, DCF-TCP is more flexible to use. 
3. The updating period of DCF-TCP, µ, is the most important factor to the DCF-TCP performance. A 
DCF-TCP flow with a smaller µ will have a smaller cwnd convergent time, but the bad queuing delay 
accuracy. Conversely, if µ is larger, a DCF-TCP flow has the better queuing delay accuracy, but a 
longer convergent time. How to set μ is based on what we want. 
2
baseRTT baseRTT   is a 
constructive setting with the good performance of the queuing delay accuracy and cwnd convergent 
time . 
The future work of DCF-TCP will focus on the property analysis for DCF-TCP. Although we propose a 
simple model to calculate the bound of the cwnd convergent time, there may be a more accurate model existed. 
Maybe we can find a model like low s hight t t   to obtain a more accurate prediction for ts where tlow and thigh 
are time bounds. Beside, a dynamic updating of α is necessary for real applications. Besides, there is some 
improvement space for DCF-TCP itself. Can DCF-TCP be optimized? Parameters of DCF-TCP are good 
study targets. Especially, µ is one of the most important parameters to investigate. If we can find the best 
setting of µ for a DCF-TCP flow, DCF-TCP will perform better. 
 
 25
[22]  CUBINlab, “FAST TCP simulator module for ns-2”, http://www.cubinlab.ee. unimelb.edu.au/ns2fasttcp/ 
[23] Afanasyev, A., Tilley, N.,  Reiher, P., Kleinrock, L.,” Host-to-Host Congestion Control for TCP ,”IEEE  
Communications Surveys & Tutorials, Volume 12, Issue 3, pp. 304 – 342, 2011 
 
性。實是場知識的饗宴!! 
  除了專題演講外，另有 30 場次的分組論文發表，主題表列如下 
Track I: Information Hiding and Security  
 Watermarking: techniques, attacks, protocols, applications  
 Steganography and steganalysis: techniques, protocols, applications  
 Cryptography and cryptanalysis: techniques, protocols, applications  
 Data authentication issues and access control themes  
 Broadcast and public-key encryption  
 Forensic analysis and tracing traitors  
 Digital rights management and legal aspect  
 RFID security and home network privacy  
 Platform integrity and trusted computing  
 Systems engineering and development for information hiding & security  
 VLSI/ASIC/FPGA/SOC design and imple- mentation for information hiding & security  
 Enabling technologies and emerging standards for information hiding & security  
Track II: Multimedia Signal Processing and Networking  
 Multimedia sensing and sensory systems  
 Multimedia source coding and channel coding  
 Multimedia signal analysis and visualization  
 Multimedia signal mining and data fusion  
 Multimedia networking and communication techniques (wired & wireless)  
 Multimedia/multimodal signals interpretation and automatic recognition  
 Multimedia databases and retrievals  
 Multimedia hyperlink techniques and applications  
 Systems engineering and development for multimedia systems  
 Enabling technologies and emerging standards for multimedia systems  
 Track III: Bio-Inspired Multimedia Technologies and Systems 
Track III: Bio-Inspired Multimedia Technologies and Systems 
 Artificial neural networks for multimedia processing: models, learning paradigms, architectures, and 
implementations 
 Fuzzy systems and evolutionary computing for intelligent multimedia processing 
 Human-machine multimodal interaction: e.g. face/speech recognition, facial expression and emotion 
categorization, gesture analysis and recognition. 
今年所受邀發表的論文，有值得注意的幾個研究方向，1. 資訊隱匿與安全 2.
多媒體融合技術與知識探勘 3.仿生物計算於多媒體服務的應用。這些新技術的發
展將有助於多媒體資料的進一步應用。也將影響未來多媒體的人機介面方式,值得
多加注意。這次參加 IIHMSP-2010 的收獲豐碩，除受邀擔任 Session Chair，並表
國科會補助計畫衍生研發成果推廣資料表
日期:2011/11/09
國科會補助計畫
計畫名稱: 應用於長距離高速網路環境之延遲控制技術研究與軟體模組實現
計畫主持人: 洪盟峰
計畫編號: 98-2221-E-151-029-MY2 學門領域: 計算機網路與網際網路
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
1. 應邀擔任 IEEE Computational Intelligence and Communication Networks 
2011(India) Keynote Speaker 發表計畫成果。 
2. 協助台灣優奎士公司開發訓練教材與嵌入式系統軟體並洽談技術轉移事
宜，協助產業發展。 
3. 輔導學生積極參與競賽，利用嵌入式軟體開發技術開發智慧型握力棒，獲得
2011 全國 LED 光電創意競賽優等。 
4.主辦電腦視覺、影像與圖學 2010 年會學術活動。 
5.與波蘭 Wroclaw university 合作辦理 ICCCI2010 年會。 
6. 參與國際合作發起成立 IEEE CIS Collective Computational Intellegnce 
Technical Committee. 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
