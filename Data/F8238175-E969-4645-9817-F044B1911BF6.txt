研究成果
底下就本年度的研究成果作詳細的說明：
第二年計畫我們根據第一年的經驗，我們已經研發出如何打造一個通
用型的資訊物件分享系統，並以電腦硬體資訊物件為例來展現其通用性及
實用性，本系統是屬於多層次架構，根據電腦硬體的應用我們規畫出五層
的物件階層，階層的個數可隨著應用的需求增加或減少，在上層皆為複合
式物件，依電腦組件類型來分類命名，而最底層為基本物件用來展示該類
型的組件資訊。使用者隨著最上層的物件(物件的入口)，透過各種 Method，
像是列項顯示、圖文顯示、搜索…等，瀏覽到欲查詢的組件資料。
在系統使用上，我們設計了三種使用者身份：管理者、會員與訪客，
所以在設計上，根據這三種身份我們開發的 Method 也付予權限屬性，有
Admin、Member 與 Visitor 三種，Visitor 屬性為訪客所用，多數為瀏覽
性質；Member 屬性為會員可用，可以上傳資料與操作更多方便的 Method；
而 Admin 為管理者所用，多為物件管理、Method 管理與系統管理為主。所
以當訪客在登入後切換到所屬身份，系統會自動顯示符合權限的 Method，
權限最高者為管理者，可操作所有屬性的 Method；會員權限次之只可操作
Member 與 Visitor 這兩種屬性的，訪客權限次之只能操作 Visitor 的。
在系統中，我們也設計出下載物件工具，當該物件有佈置此 Method
時，會員以上權限都可把該物件與其子物件一起壓縮下載到自己電腦，物
件本身資料為 Javascript 程式與 HTML 標籤組成，所以解壓縮後即可使
用。在系統安全性上，都有設計安全機制，像是訪客透過不正確程序直接
操作該 Method 時，都會被阻止被轉到該物件首頁，而下載的物件中，也會
把含有系統重要資訊 Method 與不可在 client 端運行 Method，都一併刪除
才供下載。
圖二。三種身份所能看到的 Method 列表
metadata 資料夾用來存放該物件相關檔案﹝不包含子物件﹞，有
obj_information.js 檔與 main.htm 所使用的相關檔案﹝例如：框架頁、
css 檔﹞，其中 obj_information.js 檔是儲存該物件屬性的屬性檔，是
基本規格檔，複合式物件與基本物件都會包含；而在基本物件中，metadata
還會有 other_information.js 檔、mainframe.htm 檔這兩個基本規格
檔，如下表所示。
檔案名稱 功能說明 存放位址
Obj_information.js 物件屬性檔，儲存物件
的名稱與建立者
ID。提供 main 與相關
method 使用。
metadata
method 使用。
methods_list.js Methods 屬性檔，儲存所
有method 的專屬
名稱，提供 main 與相關
method 使用。
Methods
methods_list.js Methods 屬性檔，儲存所
有method 的排列
順序，提供 main 與相關
method 使用。
Methods
methods_list.js Methods 屬性檔，儲存所
有method 的權限，
提供 main 與相關 method
使用。
Methods
表四。Methods 的屬性檔說明
電腦組件資訊物件系統在初步規劃下，目前架構如下圖所示，先把組
件類型分成七類，再一一細分後，剛開始需建立類型，也就是複合式物件，
因為結構一樣，我們只要根據架構圖，先把完成的複合式物件照著擺放，
接著使用我們開發的 method 來修改，把該物件屬性檔中正確的物件名稱修
改，再使用產生 Data 屬性檔與 Methods 屬性檔的 method，最後再根據類
型，去上傳最底層組件的基本物件。
Car
BMW M,BENZ VOLVO
3
Serial
5
Serial
7
Serial
C
Serial
E
Serial
S
Serial
S
Serial
V
Serial
XC
Serial
圖四。Car information object
接下來就是最底層的基本物件(basic object)，規劃出基本物件需要有
哪些欄位，以上述汽車物件為例子，一個最底層的汽車物件需要的欄位有
車身的形式、變速箱系統、引擎規格、配備、性能數據、能源數據、相關
稅率等，以下我們用實際的系統操作來說明。
圖五。建立上層物件
上圖五建立資訊物件上層物件的介面，逐步的建立每一層上層物件後結果
如下圖六所示，以車子的廠牌名稱為分類建立的上層物件，每一個廠名稱
圖八。建立最底層物件界面
圖九。汽車資訊物件
[16] Czyzyk, J., Mesnier, M. P. & More, J. J. (1998). "The NEOS
solver."IEEE Computational Science & Engineering, 5(3), pp. 68-75.
[17] Davis, J. R. & Lagoze, C. (2000). "NCSTRL: design and deployment
of a globally distributed digital library." Journal of the American
Society for Information Science, 51(3), 273-280.
[18] Esler, S. L. & Nelson, M. L. (1998). "Evolution of scientific
and Technical information distribution." Journal of the American
Society for Information Science, 49(1), 82-91. Available at
<http://techreports.larc.nasa.gov/ltrs/PDF/1998/jp/NASA-98-jasis
-sle.pdf>.
[20] French, J. C., Powell, A. L., Schulman, E. & Pfaltz, J. L. (1997).
"Automating the construction of authority files in digital libraries:
a case study." In C. Peters & C. Thanos (eds.), Research and Advanced
Technology for Digital Libraries, First European Conference, ECDL
'97 (pp. 55-71), Berlin: Springer.
[21] Henderson, A. (1999). "Information science and information
policy: the use of constant dollars and other indicators to manage
research investments." Journal of the American Society for
Information Science,50(4), 366-379.
[22] Lawrence, S., Bollacker, K. & Giles, C. L. (1999). "Distributed
error correction." Proceedings of the Fourth ACM Conference on
Digital Libraries (p. 232), Berkeley,CA.
[23] Payette, S. & Lagoze, C. (2000). "Policy-Carrying,
Policy-Enforcing Digital Objects." In J. Borbinha & T. Baker (eds.),
Research and advanced technology for digital libraries, fourth
European conference, ECDL 2000 (pp. 144-157), Berlin: Springer.
[24] Phelps, T. A. & Wilensky, R. (2000). "Multivalent documents."
Communications Of the ACM, 43(6), 83-90.
[25] Vinoski, S. (1997). "CORBA: integrating diverse applications
within Distributed heterogeneous environments." IEEE Communications
Magazine,4(2), 46-55.
[26] Waugh, A., Wilkinson, R., Hills, B., & Dellóro, J. (2000).
"Preserving Digital information forever." Proceedings of the Fifth
ACM Conference on Digital Libraries (pp. 175-184), San Antonio, TX.
[27] Van de Sompel, H., Krichel, T., Nelson, M. L., Hochstenbach,
P., Lyapunov, V. M., Maly, K., Zubair, M., Kholief, M., Liu, X. &
O' Connell, H. (2000). "The UPS prototype: an experimental end-user
service across e-print archives." D-Lib Magazine, 6(2). Available
at
<http://www.dlib.org/dlib/february00/vandesompel-ups/02vandesomp
el-ups .html>.
[28] A. Vakali, B. Catania, and A. Maddalena, “XML data stores:
1????????????
????: NSC 97-2221-E-309 -011
????:????????????????(II)
??????:???
服務機關及職稱 : 長榮大學資訊管理系 教授 
會議時間地點: 2009 年 9 月11 日～2009 年9 月14 日於日本京都市舉行 
會議名稱: 2009 第五屆國際智慧型資訊隱藏與多媒體訊號處理研討會 
2009 The Fifth International Conferenceon Intelligent Information Hiding and
Multimedia Signal Processing?IIHMSP 2009?
發表論文題目: Information Objects Encapsulating Multimedia and Intelligence 
一、參加會議經過 
2009 年『第五屆國際智慧型資訊隱藏與多媒體訊號處理研討會』（ 2009 The Fifth International 
Conference on Intelligent Information Hiding and Multimedia Signal Processing）今年是在日本
京都市， Mielparque Kyoto 飯店舉辦的，從8 月12 日至8月14 日一共為期三???????
是由國立高雄應用科技大學，國際電機電子工程師學會（IEEE），與日本Ritsumeikan 大學所共
同舉辦，最早是由逢甲大學張真誠教授，國立高雄應用科技大學潘正祥教授，與幾位國際資訊安
全的重要教授，所共同發起，至今已有五年歷史，大會宗旨是在以聚焦在資訊隱藏與多媒體訊號
處理的理論，技術，與實務之探討，以及其在各項資訊相關領域之應用，為一具有先驅領導地位
的重要國際學術會議。今年的IIHMSP 2009 會議一共有來自將近二十餘國超過二百位的專家參加
大會。會議中除了收錄一百餘篇一般論文的發表之外，也邀請了多位國際傑出學者前來作資訊隱
藏與多媒體訊號處理等重要研究議題未來發展方向的Tutorial，講題包括： The State of 
Reversible Watermarking?Multimodality Signal Fusionand Applications??
在論文發表方面，今年IIHMSP 2009 的重點包含非常廣泛﹐議題有現今熱門的資訊隱藏與多媒體
訊號處理技術與應用，包括： 
Ubiquitous Multimedia Services and Applications for Residential Users Biometric Image
Processing and Applications
Multimedia and Information Retrieval
Wired and Wireless Multimedia Networking and Applications
Techniques And Algorithms For Multimedia Security
Digital Forensics And Data Hiding Discovery
3四、攜回資料名稱與內容： 
2009 IIHMSP 論文集摘要及CD 一本。 
5accurately through the XML-based directory and search
service. In addition, software agents also can be designed
and dispatched on the Web to do many tasks automatically
for human beings. Figure 1 is the model of the XML Object
(XO). The XML data file represents the text part of the
original data and the Meta file represents the descriptions of
the system.
Meta File Bin File
XML data
File
XML Object
Figure 1 The first model of the XML Object
By using XML as the main data format, the first problem
we encounter is how to store multimedia files. There is a Bin
file in XO. The Bin file is meant to store the attachment file
of a XO. It’s very useful when a XML file contains some
non-text data, such as photos, PDF files etc. There are two
ways to tackle this problem. One is to embed the attachment
inside the XML file. Like the MIME, there should be a
definition about the attachment. The XML files are text form.
Before inserting the attachment into the XML file, some
encoding, such as BASE64 [8], are needed. The standard to
describe this way is XML Schema [7].
The other way is to put the attachment file “outside” the
XML files. A special link should be defined and managed to
maintain the relationship between the XML file and
attachments. The standard to describe this way is
XML-binary Optimized Packaging [5]. Figure 2 shows the
attachment design of the XML Object.
Figure 2 The second version of the XML Object
There is no perfect way to store the binary data along
with the XML files. The first one suffers the problem of
inefficiency. The attachment has to encode/decode between
BAS64 and the binary form. After testing several XML
parsers, we found that some XML parsers process large
XML files very slowly or even don’t accept them. However,
the plus point of this way is that the system doesn’t have to
maintain the relationship between the XML file and the
attachment. The whole package can be a single file to
represent an XML Object. Moreover, the whole method is
based on the XML Schema standard. It can be validated by
using the XML Schema tools.
After developing the XML data template editor and input
tools, we encounter the second problem. We found that when
XML data grow up, the data searching and maintenance will
be a problem. The XML Data Storage [5] is developed to
solve this problem. After that we found the data integration
and reuse will be the key point of the data usage in the future.
The data portability should be taken into consideration under
current web environments. We began to analyze feasible
scheme for the data model. The data in the future web should
be self-contained, portable, extensible, and reusable. The
automation within data is also required. Packing data into an
Object Oriented package and making them into an “Active
Content” fulfill the requirements we described above. The
“Active Content” even can be accumulated and refined by its
own methods. With personal information, the “Active
Content” can aggregate other “Active Contents” which have
similar interests.
II. SYSTEM MODEL
(1) The category of Information Object
After analyzing several problems of several solution of
Information storing, we found that to categorize the
Information is needed for later modeling. Here is two
category of Information Object:
(a) General documents
We suppose the browser will be the most important
application of the personal computer. The Information
Object is designed to have a homepage (main.htm) as the
entry point of the document. Users can see the contents of
Information Object through web browsers under many
platforms.
(b) Personalized objects
A Personalized object records personal information and
interests. Like iGoogle, it also records the interaction
between people, such as the sharing information based on
interests.
(2) The model of Information Object (InfO)
In this paper, we propose a data model called
“Information Object” (InfO). The InfO packs the contents
and the methods into a basic object unit. Here is a figure
which represents the composition of InfO. In InfO, the Data
part means the main content of a certain subject. The
metadata part represents the data about the InfO which is
recorded by the system or users. For example, the metadata
could be the created time, owner, access control list,
reference count etc. The methods are a collection of
functions which can provide some dynamic part of the InfO.
They can be called by the system or other users to extend the
functions of InfO which the static data part can’t easily
represent, such as to update the data and to interact with
users, etc. The attachments are the additional files appended
7Figure 6 The data structure of a Karaoke object
When a Karaoke InfO is downloaded by a browser, the
main.htm is displayed first. The main page is shown as the
Figure 7.
Figure 7 The main page of a Karaoke object
The name of the InfO is “TopOfTheWorld-Jungfrau”.
Below the object name, several methods can be click by the
user are listed. The methods are defined in the methods
directory and can be reused later. The methods listed here
have four play methods with different lyrics colors and photo
effects. The three crossover of photos methods have special
photo effect to combine different photo together. For
example, as the user click the method 5, a music, “Carpenter
Top Of the World”, is played in the background. As the
music goes by, the lyrics and the photos are shown in the
screen. Figure 8 shows the execution of the method 5 of the
Karaoke InfO:
Figure 8 Execute the Play method of the Karaoke object
A second Karaoke object can be easily developed. The
user can copy and paste the first object. Then to replace the
photo, the music, the lyrics of the object, the other part of the
first object can be reused. After creating the second object,
the user can pack the whole directory of the object and
upload it into any web site to share the InfO. The portability
and the reusability are easily be done
IV. RELATED SYSTEM AND RESEARCH
According to the definition of the Object from J.Martin
& J.Odell [1]: “An Object is anything to which a concept
applies. It is an instance of a concept.”, the concept in our
mind can be realized and implemented to an object. In the
Object Oriented model, the attributes represents the data part
and the behaviors of an object can be implemented as the
methods of a software object. This is the fundamental
concept which is used in this paper to describe the
Information Objects we developed.
In Smart Objects and Open Archives [2], Michael L.
Nelson proposes a smart object named “Bucket”. The books
in a library can be modeled by using the Bucket. The Bucket
is compatible with OAI standard (Open Archives Initiative).
This model is also called Smart Object, Dumb Archive
(SODA). The main purpose of this model is to provide a
standard for scholar content interoperability. The Smart
Object can integrate different platforms and make them
interoperable. It also packs the software or instruction inside.
The information survivability is taken into consideration.
Even if there are different versions of the Smart Object, these
Smart Objects can be reused easily. In this paper, a Bucket is
a storage unit which stores data, metadata and methods for
accessing. When the user requests a Bucket in the server, the
server will execute the methods to access the Bucket. The
concept of the Bucket and the Information Object in our
paper are similar. The applications we aim at are not only the
digital library. The methods of the Bucket are pre-defined
but the methods of the Information Object can be defined by
the user or installed by the server dynamically to fit the
requirements and extensibility of Internet usage.
In Information Object Design Pattern for Modeling
Domain Specific Knowledge [3], Nitin Arora standardizes
the container object called “Knowledge Content Objects”
(KCOs) to manage the multimedia information. In this way,
the reusability and display of knowledge are improved. The
KCOs is derived from the Information Object Design Pattern.
The paper aims at bringing semantic web technologies and
object-oriented software engineering closer together. The
author claims “Modeling domain specific knowledge plays
an important role throughout the software development cycle.
Since many applications nowadays are web-based, there are
an increasing number of cases where domain specific
knowledge is not only needed to drive a particular
application, but also to describe in a formal fashion, the
content that is being exchanged between service oriented
applications.” The paper emphasizes how to represent
