1行政院國家科學委員會專題研究計畫成果報告
整備時間為族群順序相依且部分工作有嚴格到期日限制的非相關平行
機器排程
Unrelated parallel machine scheduling with sequence-dependent
family setup time and partially rigid due date constraints
計畫編號：NSC-95-2221-E-035-082
執行期限：95 年 8 月 1 日至 96 年 7 月 31 日
主持人：陳正芳 逢甲大學工業工程與系統管理系
計畫參與人員：楊智敏 逢甲大學工業工程與系統管理系
蘇桓樓 逢甲大學工業工程與系統管理系
施明欣 逢甲大學工業工程與系統管理系
1. 中文摘要
本研究探討整備時間為族群順序相依且
部分工作有嚴格到期日限制的非相關平行機
器排程。考量有 N 個工作要在 M 台平行機器
上進行加工，每個工作各有不同的到期日，
且皆需要經過一道加工程序。當要在機器上
加工的工作與前一個工作是不同類型(族群)
時，會需要族群順序相依的整備時間，此順
序相依的整備時間會因前一個工作、接續的
工作及加工的機器而異。而由於平行機器的
不同特性與構造，工作所需的加工時間會因
工作的性質及加工的機器而異。此外，工作
(訂單)分別來至主要客戶與次要客戶，主要
客戶的訂單不允許有任何的延遲(有嚴格的
到期日限制)，而排程的目標是要使總延遲時
間最小化。
由於此排程問題是 NP-hard 問題，當處
理實務的大問題時，通常無法在合理時間內
求得最佳解。本研究使用修改的 Apparent
Tardiness Cost with Setup (ATCS)法則來產生
起始解，再利用模擬退火法 (simulated
annealing, SA)與改善程序來改善起始解，使
能夠在合理時間內求得最佳或近似最佳解，
以方便實務應用。而為測試本研究之啟發式
解法的效能，我們產生 96 個問題來作測試，
並就啟發式解法所得的解，與隨機降坡演算
法所得的解作比較。實驗測試結果顯示，無
論就效能或效率，本研究之啟發式解法均遠
優於隨機降坡演算法。
關鍵詞：平行機程、順序相依的族群整備時
間、模擬退火法、總延遲時間
Abstract
This research deals with the unrelated
parallel machine scheduling with
sequence-dependent setup time and partially
rigid due-date constraints. There are N jobs,
each having a due date and requiring a single
operation on one of the M machines. A setup
is incurred if there is a switch from processing
one type of job to another. Due to the
attributes of machines, the processing time for
a job depends on the machine on which the job
is processed, and the setup time is sequence-
and machine-dependent. In addition, certain
jobs have rigid due-date constraints. An
effective heuristic based on revised ATCS,
simulated annealing, and designed
improvement procedures is proposed to
minimize the total tardiness for this type of
scheduling problems. An extensive experiment
is conducted to evaluate the computational
characteristics of the proposed heuristic.
Computational experiences demonstrate that
the proposed heuristic significantly
outperforms a random descent heuristic.
Keywords: parallel machine, sequence-
dependent setup time, simulated annealing,
total tardiness
1. Introduction
We deal with the problem of scheduling N
3Some research considered the parallel
machine scheduling in which a setup is
incurred if the type of the job scheduled is
different from the previous one on the same
machine. Park et al. [17] applied neural
networks to obtain some look-ahead parameters
which were used to calculate the priority index
of each job to minimize total weighted
tardiness on identical parallel machines. Lee
and Pinedo [2] presented a three-phase
heuristic to minimize total weighted tardiness
on identical parallel machines. In the first
phase, factors or statistics that characterize an
instance are computed; in the second phase, a
schedule is constructed by using the ATCS
procedure; in the third phase, an SA method is
applied to improve the solution obtained in the
second phase. Eom et al. [18] also proposed a
three-phase heuristic to minimize total
weighted tardiness on identical parallel
machines with both family and job setup times.
In the first phase, jobs are sorted by EDD and
are divided into job sets based on a decision
parameter; in the second phase, each job set is
divided into several families by using the
ATCS procedure and a tabu search method is
applied to improve the sequence of jobs in each
family; in the third phase, jobs are assigned to
machines by using a threshold value and a
look-ahead parameter. Shin and Leon [19]
developed a tabu search method to minimize
total tardiness on identical parallel machines.
Bilge et al. [20] considered that jobs have
different arrival times and presented a tabu
search method to minimize total tardiness on
non-identical parallel machines. An SA
heuristic was presented by Kim et al. [21] to
minimize total tardiness on unrelated parallel
machines. Chen and Wu [22] developed a
threshold accepting method to minimize total
tardiness on unrelated parallel machines.
Although parallel-machine scheduling
with tardiness-oriented criteria has been studied
extensively, to the best of my knowledge, no
research has considered the case in which
certain jobs (i.e., the order from prime
customers) have rigid due-date constraints. In
this paper, an effective heuristic based on
revised ATCS, SA, and designed improvement
procedures is proposed to deal with this type of
scheduling problems so that the total tardiness
is minimized.
Underlying assumptions are considered in
this research:
(1) The processing time for a job depends on
both the job and the machine on which the
job is processed;
(2) A setup is incurred if the type of the job
scheduled is different from the previous
one on the same machine, and the setup
times are sequence- and machine-
dependent; and
(3) The jobs (orders) from prime customers
must not be delayed.
3. Simulated annealing method and
apparent-tardiness-cost-with-setup
procedure
The simulated annealing method and
apparent-tardiness-cost-with-setup procedure
are briefly described in this section.
3.1 Simulated annealing method
Kirkpatrick et al. [23] were the first to
apply SA to solve combinatorial optimization
problems. Since then SA has been broadly
applied to solve many large-scale combinatorial
optimization problems. Basically SA is a
stochastic hill-climbing search algorithm. It
consists of a sequence of iterations, each
changes the current solution to a new solution
in the neighborhood of the current solution.
The neighborhood is defined by the chosen
generation mechanism. Once a neighborhood
solution is created, the corresponding change in
the cost function is computed to determine
whether the neighborhood solution is accepted
as the current solution. If the neighborhood
solution results in cost reduction, this solution
is directly taken as the current solution.
Otherwise, it is accepted according to the
Metropolis’s criterion [3]. Three parameters
need to be specified in designing the cooling
schedule: an initial temperature; a temperature
update rule; and the number of iterations to be
performed at each temperature stage (i.e., the
Markov chain length).
3.2 Apparent-tardiness-cost-with-setup
procedure
The ATCS was introduced by Lee and
5constraints.
Step 2. (adjustment procedure) On each
machine involved in job reallocation,
the job sequences are rearranged by
EDD. The job with the earliest
due-date and violating the tardiness
constraint is resequenced at the position
at which it can be completed in time or
at the position right before/after a job
from the same family (it may be
completed earlier). The one that leads
to the minimum tardiness is selected.
If this resequence makes any job with
earlier due-date violate the tardiness
constraint, the job with earlier due-date
is rescheduled to be processed earlier.
This process is repeated until all jobs
on the involved machines satisfy
tardiness constraints.
Step 3. If there are still some jobs on the other
machines violating tardiness constraints,
return to step 1. Otherwise, stop.
Rescheduling procedure
The rescheduling procedure is applied for
within-machine improvement. It is performed
to improve the initial feasible job sequence on
each machine and to improve the feasible job
sequences on the machines involved in job
reallocation. For each respective job sequence,
starting from the job at the second position in
the order, the job (j) is tried to be moved to the
front of a job (k). If jobs j and k are from
different families, job j and the jobs from the
same family sequenced between jobs k and j
are moved together. If the job at the tried
position changes, starting from the job right
next to the tried position jobs are re-tried to be
moved forward. This process is repeatedly
applied until the job at the last position is tried.
Jobs need to be rescheduled in this manner
because sometimes the shorter job should be
scheduled first and processing jobs from the
same family together usually may obtain better
solution than splitting them.
4.2 Generation of Neighborhood solutions
In order to minimize total tardiness, it may
be better to reassign jobs from a tardier
machine to a less tardy machine. However,
there are situations in which reassigning jobs
from a tardier machine to a less tardy machine
cannot reduce total tardiness. Then, it is
necessary to reassign jobs from a tardier
machine to an intermediate machine and
simultaneously reassign jobs from this
intermediate machine to a less tardy machine.
Furthermore, sometimes it is appropriate to
reassign a job_set or a sub_job_set rather than
just a single job. Therefore, the neighborhood
solutions are generated by applying the
following procedures.
4.2.1 Job_set reallocation
This procedure reallocates one job_set
from a machine associated with more tardiness
to a less tardy machine. The job_set is
randomly selected from the tardy job_sets or
from the job_sets scheduled before any tardy
job.
4.2.2 Sub_job_set reallocation
This procedure reallocates one
sub_job_set from a machine associated with
more tardiness to a less tardy machine. The
sub_job_set is randomly selected from the
tardy sub_job_sets or from the sub_job_sets
scheduled before any tardy job. The number
of jobs in a sub_job_set is randomly
determined so that a different number of jobs
are reallocated in each repetition.
4.2.3 Job reallocation
This procedure reallocates one job from a
machine associated with more tardiness to a
less tardy machine. The job is randomly
selected from the tardy jobs or from the jobs
scheduled before any tardy job.
4.2.4 Job_set and job_set chain reallocation
In this procedure, one job_set from a
machine associated with more tardiness is
reallocated to an intermediate machine and one
job_set from this intermediate machine is
simultaneously reallocated to a less tardy
machine. The first job_set is randomly
selected from the tardy job_sets or from the
job_sets scheduled before any tardy job.
4.2.5 Job_set and sub_job_set chain
reallocation
In this procedure, one job_set from a
machine associated with more tardiness is
7performed without any improvement
over the best known solution.
Step 6. Apply the job_set and sub_job_set
chain reallocation procedure until an
Inner_max number of moves are
performed without any improvement
over the best known solution.
Step 7. Apply the sub_job_set and sub_job_set
chain reallocation procedure until an
Inner_max number of moves are
performed without any improvement
over the best known solution.
Step 8. Apply the sub_job_set and job chain
reallocation procedure until an
Inner_max number of moves are
performed without any improvement
over the best known solution.
Step 9. Apply the job and job chain
reallocation procedure until an
Inner_max number of moves are
performed without any improvement
over the best known solution.
Step 10. Apply the job_set and job_set swap
procedure until an Inner_max number
of moves are performed without any
improvement over the best known
solution.
Step 11. Apply the sub_job_set and
sub_job_set swap procedure until an
Inner_max number of moves are
performed without any improvement
over the best known solution.
Step 12. Apply the job and job swap procedure
until an Inner_max number of moves
are performed without any
improvement over the best known
solution.
Step 13. If the Markov Chain length is reached,
update the temperature. Otherwise,
return to Step 2.
Step 14. If the stopping criterion is reached,
stop the whole procedure. Otherwise,
return to Step 2.
5. Computational experiments
In this section, the computational
characteristics and effectiveness of SA_HEU
are evaluated by using a set of newly generated
test problems, since there are no “standard” or 
benchmarking test data in the open literature.
SA_HEU is compared with a random descent
heuristic (RDH). All solution procedures
described in this paper were coded in C++
language and all computational experiments
were conducted on a Pentium IV 2.4 GHz PC.
5.1 Data set
The test problems were “randomly” 
generated based on the following factors:
(1) number of jobs (N),
(2) number of machines (M),
(3) number of family (F)
(4) due date priority factor (),
(5) due date range factor (R).
The level settings for each factor are: 4 levels
for N, 3 for M, 2 each for the rest three factors.
This results in a total of 96 test problems.
Table 1 shows the parameter settings for the
data set.
The RDH uses the general ATCS
procedure to generate the initial schedule.
The weights of the jobs from prime customers
are set to be 10000 and the weights of the rest
jobs are set to be 1. Then, whenever one
machine is freed, the priority index Ij(t, i) is
calculated for each unscheduled job and the job
with the largest priority index is selected to be
processed on the machine just freed. This
process is repeated until all jobs are scheduled.
If the obtained schedule is infeasible, RDH
uses two procedures to improve the infeasibility.
In the first procedure, one tardy job from prime
customers is inserted to any possible position.
In the second procedure, one tardy job from
prime customers is swapped with any possible
job. Both procedures have the same
probability to be chosen and the moves
resulting in more violation are not accepted.
After an initial feasible solution is
obtained, RDH applies two procedures to
generate the neighborhood solutions. The first
procedure inserts one tardy job to any possible
position. The second procedure swaps one
tardy job with any other possible job. The
two procedures have the same probability to be
chosen and only the moves resulting in better
9References
1. C. Koulamas, “The total tardiness problem: 
review and extensions”, Operations
Research, 42, pp. 764-775, 1994.
2. Y. H. Lee and M. Pinedo, “Scheduling jobs 
on parallel machines with
sequence-dependent setup times”,
European Journal of Operational Research,
100, pp. 464-474, 1997.
3. N. Metropolis, A. N. Rosenbluth, M. N.
Rosenbluth, and A. H. Teller, “Equation of 
state calculations by fast computing
machines”, The Journal of Chemical
Physics, 21, pp. 1087-1092, 1953.
4. K. R. Baker, “Procedures for sequencing 
tasks with one resource type”. International 
Journal of Production Research, 11, pp.
125-138, 1973.
5. A. Dogramaci and J. Surkis,“Evaluation of 
a heuristic for scheduling independent jobs
on parallel identical processors”,
Management Science, 25, pp. 1208-1216,
1979.
6. A. Dogramaci, “Production scheduling of 
independent jobs on parallel identical
machines”, International Journal of
Production Research, 16, pp. 535-548,
1984.
7. J. C. Ho and Y. L. Chang, “Heuristics for 
minimizing mean tardiness for m parallel
machines”, Naval Research Logistics, 38,
pp. 367-381, 1991.
8. P. B. Luh, D. J. Hoitomt, E. Max and K. R.
Pattipati, “Schedule generation and 
reconfiguration for paralel machines”,
IEEE Transactions on Robotics and
Automation, 6, pp. 687-696, 1990.
9. M. E. Arkin and R. O. Roundy,
“Weighted-tardiness scheduling on parallel
machines with proportional weights”,
Operations Research, 39, pp. 39:64, 1991.
10. C. Koulamas, “Decomposition and hybrid 
simulated annealing heuristics for the
parallel-machine total tardiness problem”,
Naval Research Logistics, 44, pp. 109-125,
1997.
11. B. Alidaee and D. Rosa, “Scheduling 
parallel machines to minimize total
weighted and unweighted tardiness”,
Computers & Operations Research, 24, pp.
775-788, 1997.
12. V. A. Armentano and D. S. Yamashita,
“Tabu search for scheduling on identical 
parallel machines to minimize mean
tardiness”, Journal of Intelligent
Manufacturing, 11, pp. 453-460, 2000.
13. M. Azizoglu and O. Kirca, “Tardiness 
minimization on parallel machines”,
International Journal of Production
Economics, 55, pp. 163-168, 1998.
14. F. Yalaoui and C. Chu, “Paralel machine 
scheduling to minimize total tardiness”,
International Journal of Production
economics, 76, pp. 265-279, 2002.
15. A. Guinet, “Scheduling independent jobs
on uniform parallel machines to minimize
tardiness criteria”, Journal of Intelligent
Manufacturing, 6, pp. 95-103, 1995.
16. S. U. Randhawa and C. H. Kuo,
“Evaluating scheduling heuristics for 
non-identical paralel processors”,
International Journal of Production
Research, 35, pp. 969-981, 1997.
17. Y. Park, S. Kim and Y. Lee, “Scheduling 
jobs on parallel machines applying neural
network and heuristic rules”, Computers
and Industrial Engineering, 38, pp. 189-202,
2000.
18. D. Eom, H. Shin, I. Kwun, J. Shim J-K and
S. Kim, “Scheduling jobs on paralel 
machines with sequence-dependent family
set-up times”, International Journal of
Advanced Manufacturing Technology, 19,
pp. 926-932, 2002.
19. H. J. Shin and V. J. Leon,“Scheduling jobs 
on parallel machines with
sequence-dependent family setup times”,
International Journal of Production
Research, 42, pp. 4235-4248, 2004.
20. U. Bilge, F. Kieac, M. Kurtulan and P.
Pekgun, “A tabu search algorithm for
parallel machine total tardiness problem”,
Computer & Operations Research, 31, pp.
397-414, 2004.
11
Table 2. Computational results of SA_HEU and RDH
No. RDH SA_HEU
N M F  R Bestsolution
Min.
solution
Max.
solution
Avg.
solution Nsr
1 Min.
solution
Max.
solution
Avg.
solution
CPU
time2 Nsr
1 0.4 0 207 621 372.8 0 0 0 0.0 0.30 10
2
0.4
1 0 0 249 100.4 1 0 0 0.0 <0.01 10
3 0.4 7125 8001 9455 8668.0 0 7125 7159 7134.9 20.95 4
4
N/7+1
0.8
1 1176 2082 2831 2443.3 0 1176 1305 1245.7 18.48 2
5 0.4 0 468 1015 781.6 0 0 0 0.0 0.06 10
6
0.4
1 0 0 154 27.9 6 0 0 0.0 0.02 10
7 0.4 7968 10751 --3 11586.0 0 7968 8062 7998.8 22.42 4
8
4
N/8+1
0.8
1 2392 4016 6138 5126.8 0 2392 2555 2453.3 22.75 3
9 0.4 0 187 721 555.3 0 0 0 0.0 9.58 10
10
0.4
1 0 217 775 398.4 0 0 11 1.4 14.19 7
11 0.4 3803 4661 5450 5083.6 0 3803 3962 3901.4 13.53 1
12
N/7+1
0.8
1 1220 2242 2868 2445.0 0 1220 1479 1357.3 15.06 1
13 0.4 0 20 365 97.8 0 0 0 0.0 <0.00 10
14
0.4
1 0 0 0 0.0 10 0 0 0.0 0.02 10
15 0.4 4028 -- -- -- 0 4028 4170 4103.1 15.86 2
16
6
N/8+1
0.8
1 457 1411 1961 1636.9 0 457 502 480.2 14.86 1
17 0.4 2 480 878 728.1 0 2 29 14.6 15.11 1
18
0.4
1 0 0 51 13.6 4 0 0 0.0 0.38 10
19 0.4 2203 3046 3510 3362.8 0 2203 2413 2330.5 15.17 1
20
N/7+1
0.8
1 850 1447 2131 1831.9 0 850 969 901.7 14.81 1
21 0.4 0 2 364 158.6 0 0 0 0.0 8.95 10
22
0.4
1 0 0 55 7.2 8 0 0 0.0 <0.01 10
23 0.4 1882 2580 2715 2630.0 0 1882 1954 1909.4 14.30 1
24
30
8
N/8+1
0.8
1 951 1316 1819 1647.0 0 951 1060 996.6 14.47 2
25 0.4 0 0 146 23.3 7 0 0 0.0 0.00 10
26
0.4
1 0 0 88 8.8 9 0 0 0.0 0.02 10
27 0.4 10830 13130 16710 14565.5 0 10830 11086 10951 71.55 2
28
N/7+1
0.8
1 1311 1996 3644 2812.6 0 1311 1471 1409.7 48.23 1
29 0.4 0 0 86 25.1 4 0 0 0.0 0.02 10
30
0.4
1 0 95 1584 445.1 0 0 0 0.0 <0.01 10
31 0.4 14407 20167 22077 20964.7 0 14407 14423 14416.6 71.81 1
32
4
N/8+1
0.8
1 2325 5347 6063 5662.5 0 2325 2726 2453.1 61.11 1
33 0.4 0 0 444 98.1 1 0 0 0.0 0.02 10
34
0.4
1 0 0 215 29.4 7 0 0 0.0 0.05 10
35 0.4 8382 11361 -- 11657.3 0 8382 8895 8581.7 40.97 2
36
N/7+1
0.8
1 36 3187 5049 3979.5 0 36 184 99.4 45.70 1
37 0.4 0 34 630 183.3 0 0 0 0.0 0.02 10
38
0.4
1 0 0 77 7.7 9 0 0 0.0 0.02 10
39 0.4 8290 10237 13521 12207.9 0 8290 8497 8418 35.02 1
40
6
N/8+1
0.8
1 193 1418 2604 1987.1 0 193 336 269.2 31.70 1
41 0.4 0 0 151 55.9 1 0 0 0.0 0.02 10
42
0.4
1 0 0 98 15.3 6 0 0 0.0 <0.01 10
43 0.4 4135 7046 7923 7418.0 0 4135 4527 4317.5 31.56 1
44
N/7+1
0.8
1 426 1453 2970 1879.8 0 426 670 525.5 28.03 1
45 0.4 0 0 9 0.9 9 0 0 0.0 0.02 10
46
0.4
1 0 57 254 160.1 0 0 0 0.0 5.11 10
47 0.4 4338 6006 8016 6772.6 0 4338 4601 4457.7 29.70 1
48
50
8
N/8+1
0.8
1 542 1693 3817 2596.4 0 542 699 618.2 25.94 1
13
Table 3. Mean value comparisons of SA_HEU and RDH
RDH SA_HEU
Solution Solution CPU time
Solution improvement
by SA_HEU
30 2244.71 1451.20 10.47 34.16%
50 3898.20 2354.90 21.94 39.76%
70 9380.12 6854.89 48.16 27.48%
N
90 12910.61 9245.60 89.61 28.51%
4 10339.96 7541.30 65.90 26.69%
6 6352.75 4504.34 36.15 30.00%M
8 4632.52 2884.31 25.59 38.00%
N/7+1 7255.00 5218.40 42.77 28.38%
F
N/8+1 6961.81 4734.90 42.32 32.00%
0.4 136.99 0.33 1.54 99.77%
τ
0.8 14079.82 9952.96 83.55 29.43%
0.4 11278.89 8682.66 51.63 23.69%
R
1 2937.93 1270.64 33.46 55.75%
Overall
Average 7108.41 4976.65 42.55 29.99%
15
可供推廣之研發成果資料表
□ 可申請專利 ■ 可技術移轉 日期：96 年 10 月 30 日
國科會補助計畫
計畫名稱：整備時間為族群順序相依且部分工作有嚴格到期日限制
的非相關平行機器排程
計畫主持人：陳正芳
計畫編號：NSC-95-2221-E-035-082 學門領域：工業工程與管理
技術/創作名稱 整備時間為族群順序相依且部分工作有嚴格到期日限制的排程方
法
發明人/創作人 陳正芳
技術說明
中文：
考量有 N 個工作要在 M 台平行機器上進行加工，每個工作各有不
同的到期日，且皆需要經過一道加工程序。當要在機器上加工的工
作與前一個工作是不同類型(族群)時，會需要族群順序相依的整備
時間，此順序相依的整備時間會因前一個工作、接續的工作及加工
的機器而異。而由於平行機器的不同特性與構造，工作所需的加工
時間會因工作的性質及加工的機器而異。此外，工作(訂單)分別來
至主要客戶與次要客戶，主要客戶的訂單不允許有任何的延遲(有
嚴格的到期日限制)，而排程的目標是要使總延遲時間最小化。由
於此排程問題是 NP-hard 問題，當處理實務的大問題時，通常無法
在合理時間內求得最佳解。本研究使用修改的 Apparent Tardiness
Cost with Setup (ATCS)法則來產生起始解，再利用模擬退火法
(simulated annealing, SA)與改善程序來改善起始解，使能夠在合理
時間內求得最佳或近似最佳解，以方便實務應用。而為測試本研究
之排程方法的效能，我們產生 96 個問題來作測試，並就本研究之
排程方法所得的解，與隨機降坡演算法所得的解作比較。實驗測試
結果顯示，無論就效能或效率，本研究之排程方法均遠優於隨機降
坡演算法。
附件二
出席國際學術會議報告
報告人姓名 陳正芳 系所 工業工程與系統管理系 職稱 教授
中文：2007 國際工程及電腦科學家研討會
會議正式名稱 英文：International MultiConference of Engineering and Computer
Scientists 2007
會 議 時 間 自 2007 年 3 月 21 日 至 2007 年 3 月 23 日
地點(國、州、市) 香港
發表之論文題目
中文：有容量限制之單一分派轉運點問題的解法
英文：On solution of the capacitated single allocation hub location problem
論文發表證書
