1. 中文摘要 
本計畫的主要目的為提出可以有效應用於基因最佳化的 VLSI 架構，這些硬體架構使用基
因法則(Genetic Algorithm, GA)來執行向量量化器(Vector Quantizer)設計的 Global Search。根
據所使用的基因法則，本計畫將提出兩個 VLSI 架構。第一個架構具有低面積複雜度的優
點，而第二個架構則具有較佳的最佳化效能。 
 
第一個 VLSI 架構將使用 Steady-State GA 來執行 Global Search。與傳統的 generational GA
比較之，Steady-State GA 在執行交配及突變等基因運算時需要較少的硬體資源。不僅如此，
Steady-State GA 也消耗較少的記憶體來處理及儲存基因序列，因此該法則十分合適於設計
需要許多硬體資源的 GA 架構。 
 
為了要進一步增進 VQ 設計之效能，我們擬使用 Island GA 來作為第二個 VLSI 架構的基因
法則。在我們的設計中，此 Island GA 硬體架構包含了若干個平行運作的 Steady-State GA
模組。我們同時設計了硬體電路來處理這些模組間基因序列的遷移，以避免在最佳化過程
中可能陷入不良的局部最佳。 
 
本計畫實際使用 SOPC(System-on-Programmable-Chip)系統來量測擬發展的兩個 GA 硬體架
構之效能，量測的結果將與在多核心處理器上使用軟體所發展的系統相互比較。實驗結果
顯示本計畫所發展的硬體系統在計算能力方面將有比其軟體對手更高的效能，此一結果說
明了本計畫所實現的架構在基因最佳化應用上的優越性。 
 
2. Abstract 
The objective of this project is to present novel VLSI architectures for genetic optimization. 
There are two architectures considered in this project, depending on which genetic algorithm (GA) 
is used for the coarse search. The first architecture has lower area cost; whereas, the second 
architecture has superior performance for optimization. 
 
In the first architecture, the steady-state GA is adopted. As compared with the usual generational 
GA, the steady-state GA consumes significantly lower hardware resources for regeneration, 
crossover and mutation operations. The steady-state GA also requires smaller memory size for 
storing the genetic strings. It therefore is effective for the design of resource demanding GA 
architectures such as the GA architectures for VQ design. 
  
The island GA is selected as the GA for our second architecture to further improve the 
performance of the VQ design.  In our implementation, the island GA architecture consists of a 
number of steady-state GA modules operating in parallel. Hardware-based string migration 
among these modules will be performed to avoid the possible trapping of poor local optimum for 
optimization.  
 
The performance and the speed of both the architectures have been physically measured on the 
SOPC system with the DMA operations. Their results will be compared with the software-based 
systems running on multicore processors. It can be observed from the experiments that the 
proposed architectures have superior computational speed over their software counterparts. These 
results demonstrate the effectiveness of the proposed architectures for the GA-based 
optimization. 
 
3. Introduction 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Figure 1: The Architecture of Steady State GA 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Figure 2: The Architecture of Population Memory Unit 
 
In this architecture, the population memory unit is devoted for storing the genetic strings. 
Moreover, the random selections of strings for subsequent crossover/mutation or migration 
operations are also included here. This selection is based on the RNG inside the population 
memory unit. All the crossover and mutation operations are performed concurrently in the 
crossover & mutation unit for producing a new child string c. The fitness value of the resulting 
string is then evaluated by the fitness evaluation unit. 
 
Based on the fitness value, the goal of the survival test & update unit is to determine whether the 
child string c will survive. If it is the case, the parent string in the population memory unit with 
the worst fitness value will be replaced by the child string. Each unit in Figure 1 will be described 
respectively. Note that the architecture does not randomly select new r1 and r2 from the 
population memory. In fact, only new r1 is chosen from population memory. The new r2 is 
actually the previous r1. The memory access time and routing overhead can then be significantly 
reduced. Based on the algorithm, in the architecture, The SHIFT REGISTER 1 obtains r1 from 
the population memory unit. The SHIFT REGISTER 2 obtains r2 from SHIFT REGISTER 1. 
 
The crossover operations are accomplished by concurrently shifting the strings in SHIFT 
REGISTER 1 and SHIFT REGISTER 2 to MUX 1. Each shift register will shift one codeword at 
a time. As shown in Figure 4, MUX 1 is a switch selecting the codewords of either r1 or r2, and 
route them to SHIFT REGISTER 3, which contains the resulting child string c. The control line 
of MUX 1 is connected to a comparator, which compares the value of RNG 1 to that of a counter. 
The counter records the number of shifts made by the shift registers. The value of RNG 1 serves 
as a threshold here. When the counter value is less than the threshold, codewords of SHIFT 
REGISTER 1 (i.e., r1) goes to SHIFT REGISTER 3. Otherwise, codewords of r2 will be selected. 
Consequently, the value of RNG 1 determines the crossover point. The value will be randomly 
generated prior to the shifting operations. We also observe from Figure 3 that the output 
codeword of MUX 1 will pass through the mutation unit before arriving the SHIFT REGISTER 3. 
The crossover and mutation operations can therefore be performed concurrently.  
 
Fitness Evaluation Unit: The goal of the fitness evaluation unit is to compute the average 
distortion of the mutated child string stored in SHIFT REGISTER 3. Figure 4 shows the 
architecture of the fitness evaluation unit, which is an N-stage pipeline, where N is the number of 
codewords. The pipeline fetch one training vector per clock from the input. 
 
The i-th stage, i=1,...,N of the pipeline compute the Manhattan distance between the training 
vector at that stage and the i-th codeword of the child string stored in the SHIFT REGISTER 3 of 
the mutation and crossover unit shown in Figure 3. The Manhattan distance is then compared 
with the current minimum distance up to the i-th stage. If distance is smaller than the current 
minimum, then the i-th codeword becomes the new current optimal codeword, and the 
corresponding distance becomes the new current minimum distance. After the computation at the 
N-th stage is completed, the current optimal codeword and current minimum distance are the 
actual optimal codeword and the actual minimum distance, respectively. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Figure 4: The Architecture of Fitness Evaluation Unit 
index M }. For instance, { 3, 1, 2 } is a migration mode for M=3, where the strings from islands 3, 
1 and 1, are migrated to islands 1, 2 and 3, respectively. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Figure 6: The Architecture of String Migration Unit 
 
 
 
Figure 7: The String Migration Table 
 
Because there are M! different migration modes for a given number of islands M, there are M! 
entries in the migration table, where each entry contains a migration mode as shown in Figure 7. 
Therefore, the migration table consists of all the possible migration modes. The selection of 
migration modes are performed at random by an RNG. The employment of migration table allows 
the string migration for different islands be performed concurrently. The overhead for string 
migration can then be minimized. 
 
5. The Experimental Results 
This section presents some physical performance measurements of the proposed FPGA 
implementation.  The target FPGA device for the hardware design is Altera Stratix II 2S60 [8]. 
values with L=2 and m=1. In the experiment, the number of genetic strings in each island is 16. 
The total number of genetic strings in the island therefore is P=64. Each data point in the figure 
indicates the average distortion and average CPU time of 100 independent executions. It can be 
observed from Figure 8 that the performance of the proposed architecture is insensitive to the 
selection of n. Therefore, in the subsequent experiments, the average distortion and average CPU 
time over various n values (i.e., n from 1 to 8) for a given set of L and m are used as the 
performance of the proposed architecture. 
 
 
 
Figure 10: The performance of the proposed architecture with M = 4; P = 64 for various m 
values given L = 12. 
 
Figure 9 shows the performance of the proposed architecture for various L values given m=1. It 
can be observed that the average distortion of the proposed architecture lowers as L increases at 
the expense of longer CPU time. This result is not surprising because larger L values usually 
result in longer convergence time for the GA algorithm. For a fixed L=12, the performance of the 
proposed architecture for various m values are shown in Figure 10. We can see from Figure 10 
that the average distortion of the proposed architecture also lowers as m increases at the expense 
of longer CPU time. Therefore, increasing the number of migrations is beneficial for reducing the 
average distortion of the system.  
 
Table 1 shows the hardware resource consumption of the proposed architecture. There are three 
circuits considered in the table. The first circuit is a single-island GA (i.e., M=1) with population 
size P=16. The second circuit is also a single-island GA with population size P=64. The third 
circuit is a four-island (i.e., M=4) GA, where the population size of each island is 16. Therefore, 
the total population size is P=64. We can see from Table 1 that, given the same M=1, as P 
increases from 16 to 64, the adaptive look up table (ALUT) and register consumptions remains 
approximately the same. Only the fourfold increase in the consumption of embedded memory bits 
is observed. The ALUT and register consumptions do not increase significantly because the 
extension in population size only results in larger population memory. The other parts of the 
circuit still remain the same. Conversely, when the number of islands M increases from 1 to 4, 
 Figure 11: The performance of the proposed architecture with M = 1; P = 16, M = 1; P = 64, 
and M = 4; P = 64. 
 
As compared with its single-island hardware counterpart with the same population size 
(i.e.,M=1 and P=64), the proposed architecture achieves lower average distortion while 
having faster computational time. This fact can be further elaborated in Figure 11, where 
the time-distortion performance of various hardware architectures are compared. For the 
single island circuits with P=16 and P=64, various L values are tested. For the four-island 
circuit, the performance of different pairs of L and m values are revealed in the figure. It 
can be observed from the figure that the four island circuit attains lower average distortion 
given the same computation time. These facts demonstrate the effectiveness of the 
proposed architecture with the migration circuit for improving the GA performance while 
accelerating the computation. 
 
6. Concluding Remarks 
 
The proposed architecture has been found to be effective for the hardware implementation 
of an island GA. The employment of steady-state GA for the evolution within each island 
is able to simplify the complexity for the design of hardware accelerator. The migration 
unit is able to determine the source of the new strings for each island concurrently so that 
the migration operations for all the islands can be performed in parallel. By increasing L 
for triggering migration, and/or increasing the number of migrations $m$, the average 
distortion of the proposed architecture can be effectively lowered at the expense a slight 
increase in computational time. The proposed architecture has high flexibility for attaining 
different distortion-time performance based on the application requirements. The 
proposed architecture significantly outperforms its software counterpart running on a 
cluster computer. In addition, it also has superior performance over its hardware 
counterpart with no migration. The proposed architecture is therefore an effective 
alternative for genetic optimization applications in reconfigurable hardware. 
出席國際學術會議心得報告 
                                                             
計畫編號 NSC 97－2221－E－003－005－MY2 
計畫名稱 基因向量量化器在可重組硬體之實現 
出國人員姓名 
服務機關及職稱 
黃文吉 
國立台灣師範大學資訊工程學系教授兼系主任 
會議時間地點 December 17-19, 2009, Shanghai, China 
會議名稱 
The 4
th
 International Conference on Frontier of Computer Science and 
Technology 
發表論文題目 
H.Y. Li, C.T. Yang and W.J. Hwang, ``Efficient VLSI Architecture for Fuzzy 
C-Means Clustering in Reconfigurable Hardware,” The 4th International 
Conference on Frontier of Computer Science and Technology, pp.168-174. 
 
一、參加會議經過 
 
此次所參加的會議 FCST09 於 12 月 17 至 19 日在大陸上海舉行，我於 12 月 16 日中午自
松山機場出發，而於下午抵達上海，交通上直航的便捷省去要在香港轉機的時間，並有
更多的時間參與會議。我的論文發表是以 Oral 的方式安排於 12 月 19 日在名稱為
Embedded Computing and Systems 之 Session 中報告，主要探討 Fuzzy C-Means 法則之硬
體設計，參與此 Session 的學者及學生對於我所報告的內容展現高度興趣，並從他們的
Feedback 中獲得許多啟發。在 12 月 17、18、19 三天皆與 Embedded System 相關專長學
者對於 Embedded Hardware 系統設計相關議題交換意見。我於 12 月 20 日自上海回國，
並於同日抵達松山機場。 
 
 
二、與會心得 
 
FCST09 會議的主題與本計畫相關連的有 Parallel and Distributed Computing，Embedded 
Computing and Systems，Artificial Intelligence and Its Applications，以及 Machine Learning 
and Pattern Recognition 等，透過出席此會議，除了與相關領域學者分享本計畫執行成果
外，也獲得許多寶貴意見，特別是未來 Learning-on-Chip 與 Embedded Computing 之發展
方向，Clustering 在 Machine Learning 以及 Pattern Recognition 之最新技術發展等，因此
不虛此行。 
 
 
 
 
 
出席國際學術會議心得報告 
                                                             
計畫編號 NSC 97－2221－E－003－005－MY2 
計畫名稱 基因向量量化器在可重組硬體之實現 
出國人員姓名 
服務機關及職稱 
黃文吉 
國立台灣師範大學資訊工程學系教授兼系主任 
會議時間地點 June 12-15, 2010, Beijing, China 
會議名稱 International Conference on Swarm Intelligence 
發表論文題目 
T.Y. Yu, W.J. Hwang and T.C. Chiang, ``Fast Parallel Memetic Algorithm for 
Vector Quantization Based on Rconfigurable Hardware and Softcore Processor,” 
Lector Notes in Computer Science, Vol. 6145, Part I, pp.479-488, 2010.  
 
五、參加會議經過 
 
International Conference on Swarm Intelligence (ICSI) 2010 於 6 月 12 至 15 日在大陸北京大
學舉行，此會議是 Evolutionary Computing 的一個重要年會，很榮幸除了論文發表外我另
獲邀擔任會議的 Session Chair。在行程上於 6 月 11 日晚上自桃園國際機場出發，而於深
夜抵達北京，到達住宿處已是 6 月 12 日凌晨。我的論文發表是以 Oral 的方式安排於 6
月 14 日在名稱為 Evolutionary Computing 之 Session 中報告，我同時主持該 Session。參
與此 Session 的學者及學生對於我所提出的 Genetic/Memetic Algorithm 硬體架構及效能展
現高度興趣，並從他們的 Feedback 中獲得許多啟發。在 6 月 13、14 以及 15 三天皆參與
Evolutionary Computing相關之Session，並與相關專長學者對於如何有效應用Evolutionary 
Computing 技術等議題交換意見。我於 6 月 16 日自北京回國，並於同日抵達桃園機場。 
 
六、與會心得 
 
ICSI 會議的主題有 Swarm Intelligence、Evolutionary Computing 以及 Artificial Intelligence
等，與會學者多從事於這些領域的理論的研究，因此對於如何有效實現相關法則較為陌
生，我對於此領域的介紹引起許多學者的興趣，特別是利用 FPGA 以及 Reconfigurable 
Computing 來降低演算法則計算時間方陎，對於我們目前的研究成果表示肯定，我也很
高興在相關領域的表現受到重視。 
 
透過出席此會議，除了與相關領域學者分享研究成果外，也獲得許多寶貴回餽。因此對
於整合 Evolutionary Computing、Reconfigurable Computing 與 Embedded Computing 之技
術與未來的應用發展方向等，皆有新的想法，並擬與日本及大陸的學者一起推動完成，
此次出國，實不虛此行。 
97年度專題研究計畫研究成果彙整表 
計畫主持人：黃文吉 計畫編號：97-2221-E-003-005-MY2 
計畫名稱：基因向量量化器法則在可重組硬體之實現 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 2 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 2 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
