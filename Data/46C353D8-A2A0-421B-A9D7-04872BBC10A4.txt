 1
1. 研究動機與目的 
隨著網際網路的快速發展，網路上流通
的資訊日益增加，使得網際網路已成為主要
的資訊流通交換平台。面對網路上幾十億的
網頁，要在如此大量的網頁中找尋有用的資
料著實不易，使用者通常會藉助於搜尋引擎
的輔助來達成，因此搜尋引擎的良窳，尤其
是使用者直接面對的使用流程與搜尋結果
的呈現，影響了使用者對網路資訊質量水準
的判斷。目前市場上主要的搜尋引擎可概分
三類。第一類的搜尋引擎是以關鍵字搜尋為
主，例如：Yahoo和Google，這類搜尋引擎
的優點是簡單方便，而且和關鍵字相關的網
頁的涵蓋率高，但其缺點是如果不懂得搜尋
技巧，經常會產生高達數百萬筆的搜尋結
果。這類搜尋引擎通常會採用特殊的排序演
算法(ranking algorithm)將搜尋結果依相關
性高低排列，即相關性高者排在前面，相關
性低者排在後面，根據網路瀏覽行為的先行
效應 (Primacy effect)，使用者往往花費大部
分時間瀏覽前幾筆網頁，而忽略大部分其他
網頁。第二類的搜尋引擎稱為metasearch，
例如 Vivisimo (http://vivisimo.com/)，這類
搜尋引擎會將使用者輸入的關鍵詞送到其
他幾個有名的搜尋引擎，然後再將各個搜尋
引擎的結果彙總給使用者。這類搜尋引擎的
優點是，以簡單方便的方式提供多方認同的
相關網頁，而不會受到單一搜尋引擎偏見的
影響，但其缺點依然是過量的搜尋結果。第
三類的搜尋引擎則採取問答的方式來提供
搜 尋 結 果 ， 其 中 以 Askjeeves 
(http://www.ask.com/) 最具代表性。在此類
的搜尋引擎上，使用者可用關鍵字或一般語
句直接發問問題，系統會先要求使用者從可
能的題型作篩選，再依篩選的題型回應相關
的網址。一般，這類的搜尋引擎提供了更精
準、更簡潔的搜尋結果，然而背後所付出的
代價是網頁必須先做精細的分類，也就是說
幕後有一群知識編輯群努力的編輯、整理許
多的問題和答案。由於人為方式建置題庫相
當耗時，而且當題庫的涵蓋範圍夠廣時，才
能滿足使用者的需求，因此這類搜尋引擎無
法在不同領域之間快速移轉，也無法快速反
應網路上資料的變遷。隨著網路資訊量的暴
增，以關鍵字查詢為主的搜尋引擎一個明顯
的缺點就是，使用者除了依相關性條列的搜
尋結果一一瀏覽外，並無其他方式可顯著的
縮減尋得有用資料的時間，因此本研究探討
如何利用網頁分群的技術來改善搜尋結果
的呈現方式。 
 
2. 文獻探討 
 本章探討的文獻內容包括文件分群應
用於搜尋引擎的重要性、網頁分群的關鍵需
求以及分類樹的基本特性，最後再對於有效
的網路文件分群方法相關的議題加以說明。 
 
2.1 文件分群應用於搜尋引擎的重要性 
「文件分群」 (Document Clustering) 指
的是由系統依據資料集的內部或者外部特
徵，按照一定的要求（如群集的數量限制、
相似度的門檻值等），將特徵相近、相似或
者相同的文件聚合在一起的過程。文件分群
和文件分類的主要區別在於，文件分群不需
要事先定義好群集架構或特徵，而文件分類
則需要事先確定好群集架構，並且要為每個
群集提供一組預先分分類過的文件作為訓
練集。當文件的數量非常龐大，特別是網路
上的網頁文件，我們無法事先知道可能的群
集個數，此時需要處理的問題是文件分群，
而非文件分類。 
目前，市場上的搜尋引擎都是以提供對
網頁的關鍵詞檢索為主。過去，有的搜尋引
擎，例如 Yahoo，雖然是以分類目錄起家，
但隨著網頁大量的湧現，由人工進行網頁的
分類目錄幾乎停擺，無法滿足使用者對資訊
3. 系統架構 
本章根據 Zamir & Etzioni (1998)所提
出的網路文件分群的關鍵需求，以及Zhao &  
Karypis (2002)所提及的分類樹基本特性，再
加上參照各文件分群方法的優缺點，歸納出
本系統預期應具備的特性： 
y 動態分群： 
y 線性時間複雜度： 
y 無需設定群數： 
y 多重分群（overlapping）： 
y 階層式架構： 
y 相關查詢列表： 
 
接著，我們紹系統的架構，再詳述各個模塊
的進行步驟以及其應注意的事項，最後再介
紹相關查詢列表的實作方法。 
 
3.1 系統架構 
本研究提議的系統架構如圖 1 所示。
當使用者鍵入關鍵字之後，系統首先根據
搜尋引擎回傳的結果，將個別的網頁擷取
回來，接著分析出該網頁的標題、Meta
資料、全文資訊或網頁說明片段，然後根
據網頁語文做斷詞或斷字。最後，運用文
件分群演算法將這些資料適當分群，即可
呈現最終分群的結果。 
 
 
圖1：系統架構圖 
 
3.2 料蒐集(Web crawling)與分析 
此步驟主要在即時擷取搜尋引擎回
應使用者查詢的搜尋結果，基於使用者瀏
覽行為的先行效應考量，我們將只處理前
100 筆 (暫定)網頁，並且過濾非網頁格式
的文件（例如 PDF、PPT、DOC…等），
接著分析過濾後的 N 筆 (N < 100) 網頁
的個別標題、網頁說明片段，同時移除資
料中的網頁標籤 (tags)，只留下屬於網頁
真正內容的部份。 
 
3.3 斷詞 (Tokenizing) 
我們根據網頁內容的語文做斷詞（中
文）或斷字（英文），以得到文件與字詞
之間的索引資料庫。如果網頁內容是中
文，我們先去除停用字，再根據事前建好
的中文詞庫與網頁標題以及網頁說明片
段進行比對，斷出字典存在的詞；至於未
知詞部分，我們利用互見訊息 (Mutual 
Information)的技術，將經常共同出現的
(字)詞組合成新詞。如果網頁內容是英
文，我們一樣先去除停用字，再根據 
Porter Stemmer 演算法，將字還原為字
根，接著，只要將空白符號當作區隔，即
可斷出個別的英文字。最後，我們將所有
斷出的詞(字)存入資料庫，當作網頁分群
的資料集。 
3.4 網頁分群 
系統預期的目標是建立一個階層式的
分類樹，同時考量文件涵蓋性、同層節點的
區別性、以及執行的速度。有關「涵蓋性」
與「區別性」的定義如下： 
z 「網頁涵蓋性」: 在搜集的 n 筆網頁文件
中，如果有 k 筆出現某一個關鍵詞，則表
示該詞的網頁涵蓋率為 k/n，也可以說該
詞涵蓋了 k 個網頁。 
z 「新增網頁涵蓋率」：指的就是此回合選
中的詞之網頁涵蓋數，與之前選中的數個
詞之網頁涵蓋數相減，再除以所有的網頁
數而得。 
z 「主題涵蓋性」: 一個關鍵詞所涵蓋的網
頁中，可能又包含了許多的主題。假設某
一個關鍵詞 t涵蓋k筆網頁，第一筆被涵蓋
的網頁包含的主題為S1(t)，第二筆被涵蓋
的網頁包含的主題為S2(t)，第k筆被涵蓋的
網頁包含的主題為Sk(t)，則該關鍵詞t涵蓋
 3
使用者滿意度測試和系統評估效能結果。 
 
4.1 尋得時間(Reach time)  
   一個好的分類樹最重要的是必須能夠幫
助使用者用最少的時間找到所需的資訊，稱
之 為 「 尋 得 時 間  (Reach time) 」 
(Kummamuru et al., 2004)，其計算的方法如
下： 假設使用者感興趣的網頁 p 位於節點
q 的子節點之中，並且為該子節點中的第 m
筆連結，則我們可定義從節點 q 下找到網頁
p 的 Reach time 為： 
)*()( )(, mTqT sqpathpreach θ+=       (1) 
qtqpath nT *)( θ=                  (2) 
其中 
sθ ：瀏覽網頁說明片段(Snippet)所需時間 
tθ ：識別該節點是否涵蓋欲求網頁所需時間 
qn ：從節點 q 起所經過的節點個數 
以下我們以實例加以說明，假設使用者
感興趣的網頁位於「大陸(35)」這個節點之
中，並且判斷該網頁是否存在於單一節點需
要一個單位時間，則其花費的時間即為 
 (大陸)= 1*3+1*2＝5 個時間單位。 )(qpathT
 5
 
圖4 第一層節點（大陸）下尋得時間的計算 
另外，我們預期使用者會有一個最大容
忍度的尋得時間，換句話說，在節點 A 之
下經過 時間之後，若是仍然得不到
欲求文件，則使用者便會放棄在該節點下搜
尋，轉而搜尋下一個節點，其中 如
公式(3)所示，即傳統搜尋引擎排序結果的平
均尋得時間。 
)(max AT
)(max AT
假定瀏覽每個網頁說明片段所需的時間為
一個單位，則 
2
1)(max
+= AnAT                   (3) 
其中 ：節點A之下的文件個數 An
另外，我們假設該節點含有欲求網頁，
則使用者進去的機率為P，不進去的機率為
1-P；相反的，如果該節點不包含欲求網頁，
則使用者進去的機率為1-P，不進去的機率
為P（此處P之後稱之為節點識別率）。表2 顯
示各情況的機率與花費的時間，其中TA＇= 
 表示大於平均尋得時間即放棄不
找。如果A節點包含欲求網頁，其平均尋得
時間為：P * TA + (1-P) * 0；若A節點不包
含欲求網頁，其平均尋得時間為：(1-P) * 
TA＇+ P*0。 
)(max AT
最後，計算整個分類樹所花費的尋得時
間。例如，配合圖5 的決策樹，便可計算出
某一個網頁在此分類樹的尋得時間如（7）。 
 
表2 使用者是否進入A節點的決策表 
A節點包含欲求網頁 A節點不包含欲求網頁  事實 
決策 機率 花費時間 機率 花費時間
進入 
A節點 
P  1-P  
不進入A
節點 
1-P 0 P 0 
 
 
圖5 分群結果圖及決策樹 
 
表5 中文熱門關鍵字之ANOVA分析結果 
 平方和 自由度 均方和 F 檢定 顯著性
組間 2.841 2 1.420 11.992 0.000 
組內 3.198 27 0.118   
總和 6.039 29    
 7
表6 英文熱門關鍵字之ANOVA分析結果 
 平方和 自由度 均方和 F 檢定 顯著性
組間 .201 2 .100 4.448 .021 
組內 .609 27 .02256   
總和 .810 29    
表7 中文熱門關鍵字之LSD分析結果 
95% 信賴區間
搜尋 
引擎(I) 
搜尋 
引擎 
(J) 
平均
差異
(I-J) 
標 
準 
誤 
顯 
著 
性 
下界 上界
DisCover .31 .154 .054 
-5.80 
E-03 
.626 
本系統 
Vivisimo .75(*) .154 .000 .434 1.066
本系統 -.31 .154 .054 -.626 
5.801 
E-03 DisCover 
Vivisimo .44(*) .154 .008 .1242 .756 
本系統 -.75(*) .154 .000 -1.07 -.434 
Vivisimo 
DisCover -.44(*) .154 .008 -.756 -.124 
表8 英文熱門關鍵字之LSD分析結果 
95% 信賴區間
搜尋 
引擎(I) 
搜尋 
引擎 
(J) 
平均
差異
(I-J) 
標 
準 
誤 
顯 
著 
性 
下界 上界
DisCover 
9.00 
E-02 
6.72 
E-02 
.191 
-4.78 
E-02 
.228 
本系統 
Vivisimo .20(*) 
6.72 
E-02 
.006 
6.22 
E-02 
.338 
本系統 
-9.00 
E-02 
6.72 
E-02 
.191 -.228 
4.78 
E-02 
DisCover 
Vivisimo .1100 
6.72 
E-02 
.113 
-2.78 
E-02 
.248 
本系統 -.20(*) 
6.72 
E-02 
.006 -.338 
-6.22 
E-02 
Vivisimo 
DisCover -.1100 
6.72 
E-02 
.113 -.248 
2.78 
1E-0 
2 
 
4.4 系統效能評估 
我 們 分 別 在 本 系 統 、 vivisimo 和
DisCover 方法實作的系統上執行上述熱門
關鍵字的查詢，並且取搜尋結果的前100筆
網頁做分群，分別算出先前定義的平均尋得
時間（Reach Time）。圖7和圖8分別為中、
英文熱門關鍵字的平均尋得時間趨勢圖，其
中X 座標是使用者感興趣網頁的筆數，例
如10 表示使用者只對未分群結果的前10 
筆網頁有興趣，於是我們只計算前10 筆網
頁的平均尋得時間，並描繪於圖中。由圖中
可得知，在中文關鍵字部分，本系統略勝
DisCover 一籌，但差異不大，倒是兩者相
較於Vivisimo皆有明顯的效能差距，而且此
結果隨著使用者感興趣網頁筆數的提高越
趨明顯。另外在英文關鍵字部分，本系統與
DisCover 的結果同中文關鍵字部分相似，
差別在於Vivisimo的尋得時間明顯的降低
了，換句話說Vivisimo在英文網頁的分群上
是較具效益的。總而言之，系統評估結果大
致上與使用者滿意度測試相符，本系統的效
能顯著優於Vivisimo，同時略勝於DisCover。 
 
 
圖7 中文熱門關鍵字之尋得時間比較 
 
 
圖8 英文熱門關鍵字之尋得時間比較 
