1 Research Project’s Background and Goals
A topological order ord of a directed acyclic graph (DAG) G = (V,E) is a linear order of all its
vertices such that if G contains an edge (u, v), then ord(u) < ord(v). In this project we study an
online variant of the topological ordering problem in which the edges of the DAG are given one at
a time and we have to update the order ord each time an edge is added.
When dealing with DAGs, the topological order of vertices often provides very crucial information
for further algorithm development. Thus online topological ordering is of interests because it is very
likely to be required when one has to develop online algorithms on DAGs. For example, the online
topological ordering has appeared in the following contexts.
- Incremental Evaluation of Computational Circuits [2].
- Incremental Compilation [9, 12], where dependencies between modules are maintained to re-
duce the amount of recompilation performed when an update occurs.
- Local Search [11]. Local search is one of the main approaches to combinatorial optimization
and often requires sophisticated incremental algorithms.
- Online Computation of Strongly Connected Components [13].
- Online Cycle Detection [7, 13, 14]. Currently the best online cycle detection algorithm for
sparse directed graphs is built upon the Katriel-Bodlaender algorithm and has the same com-
plexity as the Katriel-Bodlaender algorithm. Thus our analysis improves the upper bound of
the online cycle detection problem to O(m3/2 +mn1/2 logn).
- Source Code Analysis [13, 14], where the aim is to determine the target set for all pointer
variables in a program, without executing it.
Alpern et al. [2] give an algorithm which takes O(||δ|| log ||δ||) time for each edge insertion, where
||δ|| measures the number of edges and nodes of a minimal subgraph that needs to be updated. (For
a formal definition of ||δ||, please see [2, 15, 16].) Pearce and Kelly [15] propose a different algorithm
which needs slightly more time to process an edge insertion in the worst case than the algorithm
given by Alpern et al. [2], but show experimentally their algorithm perform well on sparse graphs.
Marchetti-Spaccamela et al. [10] give an algorithm which takes O(mn) time for inserting m
edges. Katriel [6] shows that the analysis is tight. Recently, Katriel and Bodlaender [7] modify the
algorithm proposed by Alpern et al. [2], which is referred to as the Katriel-Bodlaender algorithm
in this proposal. They prove that their algorithm has both an O(min{m3/2 log n,m3/2 + n2 logn})
upper bound and an Ω(m3/2) lower bound on runtime for m edge insertions. This is the best
amortized result for sparse graphs so far. They also analyze the complexity of their algorithm on
structured graphs. They show that it runs in time O(mk log2 n) where k is the treewidth of the
1
Insert(u, v)
(* Insert edge (u, v) and calculate new topological ordering *)
1 if v ≤ u then Reorder(v, u, 0, 0)
2 insert edge (u, v) in graph
Reorder(u, v, f1, f2)
(* Reorder vertices between u and v such that v ≤ u *)
1 if v ≤ u then exit
2 if ti < d(u, v) ≤ ti+1
3 then
4 Aˆi := {w : u→ w, d(u,w) ≤ ti, and w < v}
5 Bˆi := {w : w → v, d(w, v) ≤ ti, and w > u}
6 A := Aˆi if Ai ̸= ∅ or f1 = 1; otherwise, A := Aˆi+1 := {w : u→ w, d(u,w) ≤ ti+1, and w < v}
7 B := Bˆi if Bi ̸= ∅ or f2 = 1; otherwise, B := Bˆi+1 := {w : w → v, d(w, v) ≤ ti+1, and w > u}
8 else
9 A := Aˆ0 := {w : u→ w, d(u,w) ≤ t0, and w < v}
10 B := Bˆ0 := {w : w → v, d(w, v) ≤ t0, and w > u}
11 if A = ∅ and B = ∅
12 then
13 swap u and v
14 else
15 for u′ ∈ {u} ∪A in decreasing topological order
16 for v′ ∈ B ∪ {v} ∧ v′ > u′ in increasing topological order
17 f ′1 := 1 if (u = u
′ and A = ∅); otherwise, f ′1 := 0
18 f ′2 := 1 if (v = v
′ and B = ∅); otherwise, f ′2 := 0
19 Reorder(u′, v′, f ′1, f
′
2)
Figure 1: Our algorithm.
set A = Aˆi+1; otherwise, we directly set A = Aˆi. Similarly, if Bˆi = ∅ and f2 = 0, then we
still have to compute Bˆi+1 = {w : u → w, d(u,w) ≤ ti+1, and w < v} and set B = Bˆi+1;
otherwise, we directly set B = Bˆi.
2: d(u, v) ≤ t0. In this case we directly set A = Aˆ0 = {w : u→ w, d(u,w) ≤ t0, and w < v} and
B = Bˆ0 = {w : w → v, d(w, v) ≤ t0, and w > u}.
3
Function AddEdge(Source, Target)
1 ToS ← []; FromT ← [];
2 ToSNeighbors← []; FromTNeighbors← [];
3 ToSIndegree← 0; FromTOutdegree← 0;
4 s← Source; t← Target;
5 while s >ord t and s ̸= nil and t ̸= nil do
6 ms ← ToSIndegree; ℓs ← Indegree[s];
7 mt ← FromTOutdegree; ℓt ← Outdegree[t];
8 if ms + ℓs ≤ mt + ℓt then
9 ToS.Push(s);
10 foreach (w, s) ∈ E do ToSNeighbors.Insert(w);
11 ToSIndegree← ToSIndegree+ Indegree[s];
12 s← ToSNeighbors.ExtractMax;
13 end if
14 if ms + ℓs ≥ mt + ℓt then
15 FromT.Push(t);
16 foreach (t, w) ∈ E do FromTNeighbors.Insert(w);
17 FromTOutdegree← FromTOutdegree+Outdegree[t];
18 t← FromTNeighbors.ExtractMin;
19 end if
20 end while
21 if s = nil then s← ORD.Prev(Target);
22 if t = nil then t← ORD.Next(Source);
23 while ToS.NotEmpty do
24 s′ ← ToS.Pop;
25 ORD.Delete(s′); ORD.InsertAfter(s′, s); s← s′;
26 end while
27 while FromT.NotEmpty do
28 t′ ← FromT.Pop;
29 ORD.Delete(t′); ORD.InsertBefore(t′, t); t← t′;
30 end while
31 E ← E ∪ (Source, Target); Outdegeree[Source]++; Indegree[Target]++;
Figure 2: The Katriel-Bodlaender algorithm for online topological ordering.
It remains to describe how AddEdge(Source, Target) operates. In each iteration of the first
while loop, there is one node s which is a candidate for insertion into stack ToS (the node with
maximal rank in the current topological order which reaches a node in ToS but is not in ToS) and
one node t which is a candidate for insertion into stack FromT (the node with minimal rank in the
current topological order which can be reached from a node in FromT but is not in FromT ). The
5
variable t was assigned ti is not after the iteration in which variable s was assigned si. If there exists
w in FromTi such that w >ordi−1 si and yi = |FromTi|, then y2i ≤ △φi. In fact, it can be shown
that
∑
1≤i≤m yi is O(mn1/2). Since
∑
1≤i≤m yi is very crucial in the resulting time complexity, we
are focused on either reducing its size or avoiding it.
In the following, we describe the main data structures used in our approach.
The current topological order T and its inverse T−1 are stored as arrays. Thus finding T (i) and
T−1(u) can be done in constant time.
The DAG G = (V,E) is stored as an array of vertices. For each vertex u we maintain two adja-
cency lists InList(u) and OutList(u). The backward adjacency list InList[u] contains all vertices
v with (v, u) ∈ E. The forward adjacency list OutList(u) contains all vertices v with (u, v) ∈ E.
Adjacency lists are implemented by using n-bit arrays and support the following operations.
1. List-Insert: Given a vertex and a list, add the vertex to the list.
2. List-Search: Given a vertex and a list, determine if the vertex is in the list. If yes, return 1.
Else, return 0.
Since the adjacency lists are implemented by using n-bit arrays, it takes O(1) time per List-Insert
or List-Search operation.
Some auxiliary data structures are used in our algorithm to improve the time complexity. For
each vertex u, we maintain two arrays of pails: InPails(u)[0 · · · d+ 1] and OutPails(u)[0 · · · d+ 1].
InPails(u)[i] contains all vertices v with 0 < d(v, u) ≤ ti and (v, u) ∈ E. OutPails(u)[i] contains
all vertices v with 0 < d(u, v) ≤ ti and (u, v) ∈ E. A vertex v in a pail is stored with its vertex
index (and not T (v)) as its key. Pails are implemented by using balanced binary search trees and
support the following operations data structure should support the following three operations.
1. Pail-Insert: Given a vertex and a pail, add the vertex to the pail.
2. Pail-Delete: Given a vertex and a pail, delete the vertex from the pail.
3. Pail-Collect-All: Given a pail, report all vertices in the pail.
It takes O(logn) time per Pail-Insert or Pail-Delete and O(1+γ) time per Pail-Collect-
All, where γ is the number of vertices in the pail.
Given a DAG G with a valid topological order and two vertices u and v with u ̸ v, define sorted
vertex sets Aˆi and Bˆi, i = 0, . . . , p+ 1, as follows:
7
4 Progress of the third year
In the third year, we continue the study of the online topological sorting problem. We say a call of a
recursive procedure leads to an operation “by itself” if and only if this operation is executed during
the execution of this call and not during the execution of subsequent recursive calls. Given a DAG G
with a valid topological order T and two vertices u, v of G with u < v, let A′ = {w : u→ w and w ≤
v} and B′ = {w : w → v and w ≥ u}. We say the flag f1 of the call to Reorder(u, v, f1, f2) is
correctly set only if (f1 ⇒ (A′ = ∅)) = 1. That is, if f = 1, then A′ is empty. We say the flag f2 of
the call to Reorder(u, v, f1, f2) is correctly set only if f2 ⇒ (B′ = ∅) = 1. That is, if f2 = 1, then
B′ is empty.
Lemma 1 Given a DAG G with a valid topological order and two vertices u, v of G with u < v, let
A′ = {w : u → w and w < v} and B′ = {w : w → v and w > u}. If the flags are correctly set,
then in the call of Reorder(u, v, f1, f2), A := ∅ if and only if A′ = ∅. Similarly, if the flags are
correctly set, then in the call of Reorder(u, v, f1, f2), B := ∅ if and only if B′ = ∅.
Proof. We shall only prove that A := ∅ if and only if A′ = ∅. It can be proved in a similar way
that B := ∅ if and only if B′ = ∅. There are two cases to consider.
Case 1: ti < d(u, v) ≤ ti+1 for some i with 0 < i ≤ p. By the algorithm, A := ∅ if and only if
Aˆi = {w : u→ w and d(u,w) ≤ ti and w < v} = ∅ and
(Aˆi+1 = {w : u→ w and d(u,w) ≤ ti+1 and w < v} = ∅ ∨ f1 = 1).
By ti < d(u, v) ≤ ti+1, we have Aˆi ⊆ Aˆi+1 = A′. From Aˆi ⊆ Aˆi+1 = A′ and (f1 ⇒ (A′ = ∅)) = 1,
we conclude that A := ∅ if and only if A′ = ∅.
Case 2: d(u, v) ≤ t0. By the algorithm, A := ∅ if and only if
Aˆ0 = {w : u→ w and d(u,w) ≤ t0 and w < v} = ∅.
By d(u, v) ≤ t0, we have Aˆ0 = A′. From Aˆ0 = A′, we conclude that A := ∅ if and only if A′ = ∅.
Lemma 2 Given a DAG G with a valid topological order and two vertices u, v of G with u < v, let
A′ = {w : u → w and w < v} and B′ = {w : w → v and w > u}. If the flags are correctly set,
then Reorder(u, v, f1, f2) leads to a swap by itself if and only if A
′ = ∅ and B′ = ∅.
Proof. By the algorithm, the call to Reorder(u, v, f1, f2) leads to a swap by itself if and only if
in this call A := ∅ and B := ∅. By Lemma 1, A := ∅ and B := ∅ if and only if A′ = ∅ and B′ = ∅.
9
Lemma 4 Given a DAG G with a valid topological order and two vertices u, v of G with u < v,
consider a call to Reorder(u, v, f1, f2). If the flags f1 and f2 are correctly set, then while executing
this call, all subsequent calls to Reorder will also own correct flags.
Proof. We prove the lemma by induction on the depth of the recursion tree. By Lemma 3, the call
to Reorder(u, v, f1, f2) will stop, so the depth of the recursion tree is finite. If the depth is zero,
then no recursive calls are made and the lemma follows.
Assume the lemma to be true when the depth of the recursion tree is less than k, where k > 0.
We shall prove that the lemma is true when the depth of the recursion tree is k. Since k > 0, there
is at least one recursive call. Thus the for-loops are executed. By Lemma 1 and Lemma 2, the
following loop invariants hold:
1. T is a valid topological order.
2. At the start of the execution of line 19, T (u′) < T (v′).
3. At the start of the execution of line 19, u′ ̸ v′.
4. The flags are correctly set for the recursive call.
By the loop invariants and our induction hypothesis, each recursive call to Reorder(u′, v′, f ′1, f
′
2)
in the for-loops, together with all subsequent calls to Reorder in it, own correct flags, and the
lemma follows.
Theorem 2 Given a DAG G with a valid topological order and two vertices u, v of G with u ̸ v,
while executing Insert(u, v), the flags are correctly set for all calls to Reorder.
Proof. If u < v then there are no calls to Reorder made while executing Insert(u, v), and the
lemma follows. If u > v then Insert(u, v) will call Reorder(v, u, 0, 0). By Lemma 4, the call to
Reorder(v, u, 0, 0), together with all subsequent calls to Reorder in it, own correct flags, and the
lemma follows.
4.1 Runtime
In this section, we analyze the time required to insert a sequence of edges. By Theorem 2, the flags
are always correctly set. To avoid unnecessary discussion, each lemma, theorem, corollary, and proof
in this section is state under the assumption that the flags are correctly set. To avoid notational
overload, sometimes we shall just write Reorder(u, v) and ignore the flags.
11
Theorem 3 While inserting a sequence of edges, for all vertices x and y, after the first swap of x
and y, the relative order of x and y won’t change.
Proof. Suppose that the vertex pair (x, y) is swapped at least once while inserting a sequence of
edges. By Lemma 6 and the algorithm Insert, each edge insertion leads to at most one swap of
x and y. Let (u, v) be the first edge whose insertion leads to a swap of x and y. Without loss of
generality we assume that x < y before the the first swap occurs. We shall prove that x > y will
hold after the first swap of x and y. Consider the execution process of Insert(u, v). The first swap
occurs during the execution of Reorder(v, u). By Lemma 5, we have v  x and y  u. Since
T (x) is nondecreasing and T (y) is nonincreasing, after the first swap of x and y, x > y will hold
until Reorder(v, u) returns. After Reorder(v, u) returns, the edge (u, v) will be add to the graph.
Thus we will have y  x and x > y just after Insert(u, v) returns. By Lemma 3, calls to Reorder
maintain a valid topological order, so x > y will hold hereafter.
Corollary 4 While inserting a sequence of edges, for all vertices x and y, there is at most one swap
of x and y.
Lemma 7 Given a DAG G with a valid topological order and two vertices u and v with u < v,
Reorder(u, v) leads to a swap of u and v.
Proof. We prove the lemma by induction on the depth of the recursion tree. By Lemma 3, the call
to Reorder(u, v) will stop, so the depth of the recursion tree is finite. If the depth is zero, then no
recursive calls are made. It follows that line 13 is executed, so the lemma follows.
Assume the lemma to be true when the depth of the recursion tree is less than k, where k > 0.
We shall prove that the lemma is true when the depth of the recursion tree is k. Since k > 0, there
is at least one recursive call. Thus the for-loops are executed. By Lemma 1 and Lemma 2, the
following loop invariants hold:
1. T is a valid topological order.
2. At the start of the execution of line 19, T (u′) < T (v′).
3. At the start of the execution of line 19, u′ ̸ v′.
4. The flags are correctly set for the recursive call.
Note that when executing the last recursive call Reorder(u′, v′) in the for-loops, we have u′ = u
and v′ = v. By our induction hypothesis and the loop invariants, the last recursive call leads to a
swap of u and v, and the lemma follows.
13
Proof. By the algorithm, a call to Reorder for which |A|+ |B| = 0 leads to a swap by itself. By
Corollary 4, there are at most n2 swaps. Thus there are at most n2 calls to Reorder for which
|A|+ |B| = 0. By Theorem 5, there are O(n2) calls to Reorder for which |A|+ |B| > 0. Therefore,
there are O(n2) calls to Reorder in total.
Let S = {(u, v) : there is a swap of u and v such that u < v while inserting the edges}. Define
D(u, v) =
 the value of d(u, v) while swapping u and v ∀(u, v) ∈ S;0 ∀(u, v) ̸∈ S.
Since by Corollary 4 each vertex pair is swapped at most once, D(u, v) is well defined. Let k be
a number with 1 ≤ k ≤ n. Define
Dk(u, v) =
 D(u, v) if D(u, v) ≤ k;k otherwise.
The following theorem is the key to our runtime analysis.
Theorem 7 For all k ∈ [1, n] with k ≥ n0.5, we have ∑Dk(u, v) = O(n2 · √k).
Proof. Let k = nr. Let T ∗ denote the final topological order. Define x(T ∗(u), T ∗(v)) = D(u, v)
and z(T ∗(u), T ∗(v)) = Dk(u, v) for all vertices u and v. The following linear inequalities are proved
to be true by Ajwani et al. [1].
(1) x(i, j) ≤ 0 for all 1 ≤ i ≤ n and 1 ≤ j ≤ i.
(2) x(i, j) ≤ n for all 1 ≤ i ≤ n and i < j ≤ n.
(3)
∑
j>i x(i, j)−
∑
j<i x(j, i) ≤ n for all 1 ≤ i ≤ n.
It is easy to derive the following linear inequalities from the definitions of x(i, j) and z(i, j).
(4) z(i, j) ≤ nr for all 1 ≤ i, j ≤ n.
(5) z(i, j) ≤ x(i, j) for all 1 ≤ i, j ≤ n.
(6) 0 ≤ z(i, j) for all 1 ≤ i ≤ n and 1 ≤ j ≤ n.
(7) 0 ≤ x(i, j) for all 1 ≤ i ≤ n and 1 ≤ j ≤ n.
We aim to estimate an upper bound on the objective values of the following linear program.
max
∑
1≤i,j≤n
z(i, j) such that
15
Proof. We prove the lemma by induction on the depth of the recursion tree. By Lemma 3, the call
to Reorder(u, v) will stop, so the depth of the recursion tree is finite. If the depth is zero, then no
subsequent recursive calls are made, so the lemma follows.
Assume the lemma to be true when the depth of the recursion tree is less than k, where k > 0.
We shall prove that the lemma is true when the depth of the recursion tree is k. Since k > 0,
there is at least one recursive call. Thus the for-loops are executed. By Lemma 1, A = ∅. By the
local property (Lemma 2) and the order in which we make the recursive calls, any subsequent call
to Reorder(u, ·) must occur during the execution of last iteration of the outer for-loop. Consider
any first level recursive call Reorder(u′, v′, f ′1, f
′
2) in the last iteration of the outer for-loop. Note
that we have u′ = u < v′ and {w : u → w and w < v′ ≤ v} ⊆ A′ = ∅ when this call is ready to be
executed. Since u′ = u and A = ∅, we also have f ′1 = 1. By the induction hypothesis, we also have
the first flag f1 = 1 for all subsequent calls to Reorder(u, ·) while executing this call. It completes
the proof.
Lemma 9 Given a DAG G with a valid topological order and two vertices u and v with u < v, let
A′ = {w : u → w and w < v} = ∅. Then a call to Reorder(u, v) will stop with u at the initial
position of v. That is, letting Tbefore be the topological order just before the call to Reorder(u, v),
then the call to Reorder(u, v) will return a topological order Tafter such that Tafter(u) = Tbefore(v).
Proof. We prove the lemma by induction on the depth of the recursion tree. By Lemma 3, the call
to Reorder(u, v) will stop, so the depth of the recursion tree is finite. If the depth is zero, then no
recursive calls are made. It follows that line 13 is executed, so the lemma follows.
Assume the lemma to be true when the depth of the recursion tree is less than k, where k > 0.
We shall prove that the lemma is true when the depth of the recursion tree is k. Since k > 0, there
is at least one recursive call. Thus the for-loops are executed. Let Tbefore be the initial topological
order. By Lemma 1, Lemma 2, and the induction hypothesis, the following loop invariants hold:
1. T is a valid topological order.
2. At the start of the execution of line 19, T (u) = T (u′) < T (v′) = Tbefore(v′).
3. At the start of the execution of line 19, u′ ̸ v′.
4. After the execution of line 19, T (u) = Tbefore(v
′).
5. The flags are correctly set for the recursive call.
Note that for the last recursive call Reorder(u′, v′) in the for-loops, we have v′ = v. Thus by the
loop invariants, we have T (u) = Tbefore(v) after the last recursive call in the for-loops.
17
Lemma 10,
∑
w∈Si(u,v)D(u,w) ≥ ti for all vertices u and v and i = 1, . . . ,m(u, v). It follows that∑
u,v
∑m(u,v)
i=1 1 = O(
n2
√
ti+1
ti
).
In a call to Reorder(u, v), Aˆi and Aˆi+1 are both computed only if ti < d(u, v) ≤ ti+1. Thus by
the local property (Lemma 3), we have D(u,w) ≤ ti+1 for all w ∈ Si(u, v), i = 1, . . . ,m(u, v). By
Theorem 7, we have
∑
u,vDt(u, v) = O(n
2√ti+1). Thus it suffices to show that in the summation∑
u,v
∑m(u,v)
i=1
∑
w∈Si(u,v)D(u,w), D(u,w) is counted at most twice for each vertex pair (u,w).
To show that in the summation
∑
u,v
∑m(u,v)
i=1
∑
w∈Si(u,v)D(u,w), D(u,w) is counted at most
twice for each vertex pair (u, v), we only have to prove that Si(u, v) ∩ Sj(u, v′) ∩ Sk(u, v′′) = ∅ if
Ci(u, v), Cj(u, v
′), and Ck(u, v′′) are three different calls.
Suppose for the contradiction that w ∈ Si(u, v) ∩ Sj(u, v′) ∩ Sk(u, v′′) and Ci(u, v), Cj(u, v′),
and Ck(u, v
′′) are three different calls. Without loss of generality, we assume Ci(u, v) occurs before
Cj(u, v
′) and Cj(u, v′) occurs before Ck(u, v′′). By Corollary 4, there is only one swap of u and
w, so Cj(u, v
′) must be a subsequent recursive call which occurs during the execution of Ci(u, v)
and Ck(u, v
′′) must be a subsequent recursive call which occurs during the execution of Cj(u, v′).
Consider the execution of Ci(u, v). By Lemma 3 and the order in which we make the recursive calls
in the for-loops, Cj(u, v
′) must occur during the last iteration of the outer for-loop. Note that by
Lemma 3, before the last iteration of the outer for-loop begins, all vertices in Aˆi+1 = {w : u →
w, d(u,w) ≤ ti+1 and w < v} = {w : u → w and w < v} are moved to the right of v. Thus when
the last iteration of the outer for-loop begins, there are not any vertices w between u and v with
u→ w. Therefore, by the local property of Reorder, during the last iteration of the outer for-loop,
for each call to Reorder(u, v′), we have {w : u→ w and w < v′ ≤ v} = ∅. By Lemma 8, we have
the first flag f1 = 1 for each subsequent call to Reorder(u, ·) during the execution of Cj(u, v′). It
follows that the first flag f1 of the call Ck(u, v
′′) is 1. Thus by the algorithm, we don’t compute
Aˆi+1 in the call Ck(u, v
′′), which is a contradiction.
4.1.2 Runtime Analysis
Lemma 11 While inserting a sequence of edges, the total time spent on executing line 2 of Insert
is O˜(n2).
Proof. As discussed in Section ??, each execution of line 2 of Insert can be done in O˜(1) time.
Since there are at most n(n− 1)/2 edge insertions, the lemma follows.
Lemma 12 While inserting a sequence of edges, the total time spent on computing Aˆi and Bˆi,
i = 1, . . . , p, over all calls of Reorder(u, v) with ti < d(u, v) ≤ ti+1 is O˜(n2).
19
we have
t1 = t
4/3
0 , ti =
t
5/3
i−1
t
2/3
i−2
for all i = 2, . . . , p+ 1.
Let ti = t
xi
0 for i = 0, . . . , p+ 1. we have
x0 = 1, x1 = 4/3, and xi =
5xi−1
3
− 2xi−2
3
for all i = 2, . . . , p+ 1.
By solving this linear second order recurrence relation, we get xi = 2−(2/3)i for all i = 0, 1, 2, . . . , p+
1. It follows that tp+1 = t
2−(2/3)(p+1)
0 . Since tp+1 = n, we have t0 = n
f(p), where f(p) = 3
p+1
(2·3p+1−2p+1) .
Corollary 10 While inserting a sequence of edges, the total time required is O˜(n2+f(p)) if t0 = n
f(p)
and ti = t
2−(2/3)i
0 for all i = 1, . . . , p+ 1, where f(p) =
3p+1
(2·3p+1−2p+1) .
Note that f(p) = 3
p+1
(2·3p+1−2p+1) = 0.5 +
2p
(2·3p+1−2p+1) . By letting ϵ(p) =
2p
(2·3p+1−2p+1) , we have
ϵ(p) < 2
p
3p+1 < (3/2)
−p. By letting p = log3/2 n, we have 1 < n
ϵ(p) < n1/n < 2 when n > 2. Thus
O˜(n2+f(p)) = O˜(n2.5+ϵ(p)) = O˜(n2.5) if we choose p = ⌈log3/2 n⌉. The following theorem summarizes
our discussion.
Theorem 11 There exists an O˜(n2.5)-time algorithm for online topological ordering.
References
[1] Deepak Ajwani, Tobias Friedrich, and Ulrich Meyer. An O(n2.75) Algorithm for Online Topolog-
ical Ordering. In Proceedings of the 10th Scandinavian Workshop on Algorithm Theory (SWAT),
53-64, 2006.
[2] Bowen Alpern, Roger Hoover, Barry K. Rosen, Peter F. Sweeney, and F. Kenneth Zadeck.
Incremental Evaluation of Computational Circuits. In Proceedings of the First Annual ACM-
SIAM Symposium on Discrete Algorithms (SODA), 32-42, 1990.
[3] Michael A. Bender, Richard Cole, Erik D. Demaine, Martin Farach-Colton, and Jack Zito.
Two Simplified Algorithms for Maintaining Order in a List. In Proceedings of the 10th Annual
European Symposium on Algorithms (ESA), 152-164, 2002.
[4] Paul F. Dietz and Daniel D. Sleator. Two Algorithms for Maintaining Order in a List. In
Proceedings of the 19th Annual ACM Symposium on Theory of Computing (STOC), 365-372,
1987.
[5] Michael L. Fredman, Robert E. Tarjan. Fibonacci Heaps and their Uses in Improved Network
Optimization Algorithms. Journal of the ACM, 34(3): 596-615, 1987.
21
 1
出席韓國 ISAAC 2010會議報告書 
 
 
 
RLE壓縮字串的近似回文搜尋 
 
 
 
 
 
 
服務機關：國立臺灣大學生醫電子與資訊學研究所 
姓名職稱：趙坤茂  教授 
派赴國家：韓國 
出國期間：2010/12/13 19:00 ~ 2010/12/19 23:00 
報告日期：2010 年 12 月 15 日及 2010 年 12 月 17 日 
 3
三、考察參觀活動(無是項活動者省略) 
我利用會議前後的空檔參觀濟州島的自然景觀，這個火山島頗具特色，多處都可看到老
天爺的巧斧神功。 
 
四、建議 
出國開會除了可提高研究團隊在世界上的知名度外，也可增進許多的學術交流。希望政
府能持續這方面的補助，讓我國的研究成果能更上一層樓。 
 
五、攜回資料名稱及內容 
攜回論文集兩冊，由 Spring-Verlag出版社的包含於 Lecture Notes in Computer Science系
列中。此外，我們也向一些相關的研究團隊要了一些最新的科技論文，對未來的發展與規劃
極有幫助。 
 
六、其他 
很感謝補助這次的 ISAAC 2010之行，讓我在學術交流中獲益良多，我會更加努力，不
負栽培。 
97 年度專題研究計畫研究成果彙整表 
計畫主持人：趙坤茂 計畫編號：97-2221-E-002-097-MY3 
計畫名稱：線上拓墣排序問題之快速演算法 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 3 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 1 1 100%  
博士生 2 2 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
