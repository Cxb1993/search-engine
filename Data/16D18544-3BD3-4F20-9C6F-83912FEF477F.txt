2行政院國家科學委員會專題研究計畫成果報告
自動化Web 2.0 服務系統之研究與開發
The Designing and Development of Automated Web 2.0 Service System
計畫編號： NSC 97-2221-E-029-022
執行期限：97 年 8 月 1 日至 98 年 7 月 31 日
主持人： 陳隆彬 副教授 東海大學資訊工程與科學系
共同主持人：吳毅成 教授 國立交通大學資訊工程學系(所)
計畫參與人員：孫德中，洪振佑，何孟遠
一、摘要
因為網際網路的快速發展，Web 資料愈來愈
豐富，如何將 Web 的功能轉化成為一個應用程模
組，就變得愈來愈重要。Wrapper 是一個將 Web 運
作過程包裝成一個應用程式的敘述腳本。在
Wrapper 中，IDL (介面描述語言) 常被用來描述
多重文件之間的對應關係。撰寫高品質的 IDL 是建
構 Web 2.0 website 的基礎。本計畫設計並發展一
個自動化的 IDL 產生器，並用它建構出自動化 Web
2.0 系統。由於 AJAX 等動態網頁技術的盛行，網
頁擷取與整合不易，本計畫以模擬瀏覽器執行 IDL
的方式解決自動化網頁整合的問題。另外，本計劃
設計並實作 wrapper 建議系統，以 Web 2.0 精神
來產生有效及高品質的 IDL 與 wrapper ，以達成
Web site 內容自動化之目標。
關鍵詞：Web 應用程式、Web 資料擷取、網路服務、
網路服務轉換、XML
Abstract
With the rapid development of the Internet,
there is a large demand on wrapping up the functions
of different websites as a Web-based computer
application. In this project, a browser-oriented Web
application wrapper is developed. By simulating the
user actions on browsers, the dynamic Web operations
such as AJAX requests can be automated. Moreover,
the collaborative mechanism proposed in this project
provides a way for sharing the wrappers among
multiple users. By decomposing the wrappers into the
smallest indecomposable units, the degree of
reusability can be increased and the performance of
the wrapper generation system can be enhanced.
Keywords: Web application, Web data extraction,
Web service, Web service Wrapper,
XML
二、報告內容
1. Introduction
With the rapid development of the Internet, huge
amount of information is published on Web pages.
The Web applications [1,4] are computer applications
operating over World Wide Web (WWW). Usually a
group of Web pages contain valuable information of
the specific knowledge domains. Hence, it is important
to construct Web applications and perform costly tasks
on the Web applications automatically by integrating
the data and functionalities from different Web pages.
For example, a B2B Web application which can
collect possible suppliers for a computer hardware
manufacturer can be constructed by integrating the
supplier search Web pages and the hardware
manufacture’s internal ERP Web pages.
In this project, a Web application wrapper script
(or, WA wrapper script) [1,2] is a script which
describes how to turn Web pages into Web
applications. The system manages and performs the
WA wrapper scripts is called a WA wrapper system. A
Web application can be automated by executing the
WA wrapper script in the WA wrapper system.
Today, writing a WA wrapper script (by using the
specific wrapper language) is still a time-consuming
and a professional task when building the wrapper of
an automated Web application. This project develops
a wrapper generation system with collaborative
wrapper suggestion mechanism. This mechanism
allows us to reuse existing wrappers among users, and
can be very helpful on generating the wrapper script
since it is with high probability that different users
may have the same requirement on acquiring the data
in a Web page.
The rest of this project is organized as follows.
Section 2 introduces the semantic of Web applications
and architecture of the wrapper systems. Section 3
presents our automated wrapper system and the related
algorithms. Section 4 discusses the implementation
result of the system. Finally, we make the conclusion
in Section 5.
4dependent. Intuitively, the atomic graph refers to the
smallest Web application that can be wrapped, as
every node, except the root node, can not be opened
unless the page transition is triggered. Figure 2
demonstrates the atomic graphs that are induced by the
WA wrapper shown in Figure 1.
Figure 2. Decomposition of the wrapper script graph.
3. Collaborative Web Application
Wrapper Construction System
3.1. System Architecture
The architecture of the proposed collaborative
WA wrapper system is shown in Figure 3. The system
consists of the following components:
 The wrapper editor is a visual client-side tool
used by the user to edit the wrapper codes.
This editor is responsible for connecting to
suggestion server to obtain the suggestion
wrapper code.
 The suggestion server stores the wrapper
codes submitted by the users. When a
suggestion query is issued from some client, a
wrapper code matching function is performed,
and the query result is then return to the client
as the suggestion.
 The decompose component in the suggestion
server is employed to decompose the wrapper
code into smaller pieces. By decomposing the
wrappers into the smallest indecomposable
units, the reusability of the wrappers are
increased and the performance of our wrapper
generation system can be enhanced.
Wrapper
Suggestion
Server
BODE
Editor
Wrapper
Decomposer
…
 


BODE
Editor
Wrapper
Database
BODE
Editor
Upload BODE
scriptsSuggestRequest
Decompose/Create
BODE scripts
Figure 3. Architecture of our WA wrapper script suggestion
system.
3.2. Wrapper Script Decomposition
In this subsection, a decompose algorithm is
employed to decompose the script graph into the
atomic script graph. Recall that in an atomic script
graph, there is only one independent node, the root
node. All the other nodes are dependant nodes.
In our wrapper script suggestion system as shown
in Figure 3, the decomposer component reads a BODE
wrapper script. This script has to be transformed to the
script graph format before it can be processed by the
decomposing algorithm. After the input script graph
has being decomposed into several smaller atomic
graphs, each of them is then transformed back to the
wrapper script format and send to the user to be the
suggested wrapper code.
The above algorithms are given in Figure 4. The
first and second transformation algorithms are omitted
in the project. The third algorithm,
Decompose_Script_to_AtomicGraph in Figure 4
is to decompose a graph to a set of atomic graphs. In
step 3 of the algorithm
Decompose_Script_to_AtomicGraph, the vertices
and links are created. Then, in step 4, a DFS is
performed to obtain the connected graphs consisted of
only dependent links. For each atomic script graph, the
root of the atomic script graph is the first vertex
encountered during DFS. The script graph G and the
atomic script graphs of G are then transformed back to
BODED scripts and stored in the wrapper database.
