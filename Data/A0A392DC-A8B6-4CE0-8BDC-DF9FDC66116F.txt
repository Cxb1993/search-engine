2 
 
行過的發展行動資料來建立瑕疵預測模型，而經由這些模型的分析可以進一步解釋軟體發
展流程與軟體瑕疵之間的關聯性，以利軟體瑕疵預防(defect prevention)活動的擬定 (Chang 
et. al., 2009)。 
以軟體發展行動為導向的軟體瑕疵預測技術也可以運用在軟體發展流程的監控上，透
過多變量流程管制技術(Multivariate Statistical Process Control, MSPC)可以同時對多個事先
定義的度量(measures)進行監控，並偵測出失控點(out-of-control points)與導致失控的度量，
再利用淨最小平方法(Partial Least Square, PLS)與多重假設檢定法(multiple hypothesis testing)
來對於找出的原因(causes)並進行驗證(validation) (Chang and Chu, 2008)。在以軟體發展行動
為導向(Action-Based)的架構下，利用軟體瑕疵預測技術(如 ABDP、ARDP 與 InterARDP)
所建立的軟體瑕疵預測模型(Prediction Models)主要是用來預測未來要執行的軟體發展行動
可能產生的瑕疵，這些預測模型包含一組關聯性規則(Association Rule)或決策樹(Decision 
Tree)以用來預測將要執行的 Actions 是否會產生問題，以便讓軟體發展人員可以對其進行
矯正。此預測模型指出所要預測的 Actions是否會產生問題，而並未提供軟體發展人員『如
何修改』這些Actions使其不會產生問題，因此軟體發展人員只能由現有的規則集合(Rule Set)
或是本身的專業知識來判斷該對哪些屬性(Attributes)與何種值(Values)來修改，修改後則頇
藉由預測模型再進行預測，以確定矯正後的 Actions不會再被預測為可能產生問題。 
二、研究目的： 
本研究的目的是在發現可能導致瑕疵的軟體發展行動時，藉由預測模型的分析來提供
軟體發展人員如何修正該行動的參考，本研究所提出的以行動為基礎(Action-Based)的軟體
發展行動修正建議分析技術(Action Correction Recommendation, ACR)，除了運用關聯性規
則探勘技術(Association Rule Mining)建立一組可以用來預測可能產生問題的Actions的預測
模型(High Defect Prediction Models, HDPM)，ACR也同時建立另一組可以用來預測可能不
會產生問題的預測模型(Low Defect Prediction Models, LDPM)，當一個 Action被預測為可能
產生問題時，ACR會利用分析HDPM與LDPM中的規則，並利用資料探勘技術(Data Mining)
找出此兩組規則間互斥的規則項目(items)。而這些資訊不但提供軟體發展人員對於可能產
生問題的 Action 需要修改哪些屬性(Attributes)以避免可能產生的錯誤，更進一步提供修改
的參考值，如此軟體發展人員將可依照所提供的軟體行動修改建議對於可能產生問題的行
動來進行矯正。本研究將 ACR的方法運用到一個與業界產學合作的軟體開發專案上來驗證
ACR的效能，此專案的架構將以工作分工圖(Work Breakdown Structure, WBS)的方式分成工
作包(Work Packages)、工作(Task)與規劃的軟體發展行動(Actions)，所有專案執行的 Action
將會逐一記錄以建立各組的預測模型，所獲得的結果將可用以驗證本方法所分析而得的軟
體行動修改建議的效果。 
三、文獻探討： 
建立軟體發展流程的軟體瑕疵模型(defect prediction models)有助於在因果分析中找出
導致問題的原因，利用過去的軟體產品的瑕疵資料可以建立軟體瑕疵模型，此模型除了可
4 
 
許多情況而加入新的行動，如需求變更或是發生瑕疵，行動執行後的結果則記錄於資料庫
中以提供相關的分析之用，這些資訊包含行動的實際時數與因該行動所產生的瑕疵。雖然
軟體發展行動需要在執行後才可獲得相關的執行結果(如所產生的瑕疵)，然而在行動執行前
有許多已知的行動資訊其實可以提供軟體發展人員來評估該行動是否可能產生瑕疵，而這
也是 ABDP與 ARDP所著重的行動預測部分。當發現可能產生瑕疵的軟體發展行動時，軟
體發展人員便要進一步來進行矯正，最常用的矯正方式是由瑕疵報告或是瑕疵模型來進行
分析，利用多層次軟體問題導致原因識別方法(Multilevel Software Cause Identification, MSCI)
可以來找出可能導致瑕疵的原因，MSCI主要是結合以軟體發展行動為導向的軟體瑕疵預測
技術(Action-Based Defect Prediction, ABDP)與多變量流程管制技術(Multivariate Statistical 
Process Control, MSPC)對於可能導致軟體問題的屬性進行監控，並利用統計分析的方式來
確認問題的所在，以提供瑕疵預防(Defect Prevention)計畫的擬定(Chang, 2008)，然而此方法
不但需要具備豐富的軟體瑕疵分析經驗與領域知識，而且需要進一步擬定矯正措施，需要
較多的人力。 
四、研究方法： 
本研究主要延續以行動為基礎的瑕疵預測(Action-Based Defect Prediction)方面的研
究，在一系列預測為可能產生瑕疵的軟體發展行動中經由瑕疵預測模型的分析進一步提供
矯正的建議，本研究主要是利用先前研究中所定義的軟體發展行動相關屬性與所建立的瑕
疵測模型來進行分析，並對於被預測為可能導致軟體瑕疵的軟體發展行動(actions)提出修正
建議(Action Correction Recommendations, ACR)。首先在以軟體發展行動為基礎的軟體瑕疵
預測 (Action-Based)的架構下對於被預測為可能導致軟體瑕疵的軟體發展行動(actions)提出
修正建議的分析流程與系統架構。接著以軟體瑕疵預測架構為基礎來增加修正建議分析的
功能，並進行修正建議分析引擎的系統設計，系統的核心包括資料轉換介面設計、瑕疵模
型分析引擎(Defect Models Analysis Engine)以及使用者介面的設計，最後再以軟體發展行動
修正建議系統運用到實際的軟體發展專案上，來驗證本研究所發展的方法的預測效率。所
運用的專案以行動為單位進行紀錄，每 10 個行動為一組來進行預測，就其中預測為 high
的部分取其一半來進行修改，另一半則維持原狀，最後再比較兩組在瑕疵產生上的差異。 
五、結果與討論： 
本研究的主要目的主要是對於可能產生瑕疵的軟體發展行動提供修改建議(ACR)，亦
即當一個即將執行的軟體發展行動被瑕疵預測模型預測為可能產生瑕疵時，可以提供該行
動的修正建議。本研究先利用高瑕疵預測模型(high defect prediction models)對所要執行的軟
體發展行動進行預測，當發現它可能產生瑕疵時，先找出有哪些屬性(attributes)需要進行修
改，再利用低瑕疵預測模型(low defect models)來找出修改這些屬性較佳的值(values)或是區
間(intervals)，而這組建議的值便是提供軟體發展人員用來修正軟體發展行動的建議，接下
來修改後的行動可以重新進行預測，用以檢視是否可能產生錯誤。用來產生 High rule的過
程與用來產生 Low rule的程序相同，僅是所使用目標屬性不同而已(分別為 H與 L)，本研
究首先對於這些高瑕疵的規則先進行分析，而分析的結果可以整理如下。 
6 
 
與 b2:I12相同，然而 r5
L則不會選到，主要是因為 r5
L僅包含 unchangeable屬性，無法提供修
改的相關資訊。規則 r4
L則視 I44是否包含 v4而定，若 I44是否包含 v4而定則 r4
L可以挑選為
low rule，反之則不行。若 RL'為空，則回到 step 2重新調整 confidence與 support來產生 RL'。 
r1
H: b1:I11 b2:I12 b3:I13
r2
L
: b1:I21 b3:I23
r3
L: b2:I32
r4
L: b1:I41 b4:I44
r5
L: b3:I54
selected high rule
The low rules 
selected from RL
unchangeable 
attributes
negotiable 
attributes
ak = { v1    v2    v3     v4 } 
The r4
L can be 
selected, if the I44 
contains v4.
 
(圖一)、依據 r1
H
 (high rule)來挑選 rj
L
 (low rule) 
r1
H
: b2:I12 b3:I13    b4:I14
r2
L
: b1:I21 b2:I22    b4:I24
unchangeable 
attributes
negotiable 
attributes
ak = { v1    v2    v3      v4 } 
   
v11                     v12
v21                     v22
v2
b1
I12 I22
 
(圖二)、規則選取與屬性分析        (圖三)、屬性的區間分析 
由 RL'中選取 r2
L的分析步驟如下，對於 r1
H中的每一個 negotiable pattern (如 bi:I1i)由 r2
L
中找出相同的樣式 (如 bi:I2i)，例如由圖二所示，規則 r1
H與 r2
L同時包含屬性 b2，而也具有
相同的 negotiable patterns，因此 ak屬性的建議值可以由這些 identical patterns的區間(如 I12
與 I22)來進行分析而得到。此外在 r2
L中的 negotiable patterns即使未包含與 r1
H相同的樣式，
仍然可以提供 ak屬性修正的參考，例如在圖二中的 r1
H並沒有包含屬性 b1的樣式，然而當
r2
L被挑選時，b1:I21則可以做為 v1的修正參考，也就是 v1的值可以建議在區間 I21 (the ACR 
of b1)，因為屬性 b4的值落在 I24 (low interval)中，因此不需要更動。綜合以上的分析，軟體
發展行動 ak需要更動屬性 b1、b2與 b3來降低 high的特性，而 b4則不需要更動。對於屬性
b2的建議值得分析可以敘述如下面的三種情況 (based on I12 and I22)。 
Case 1: 若 I12 與 I22為完全相等(complete identical)，則包含此區間的規則樣式可視為
high rule與 low rule的共同的項目，而在此區間的值自然也就不需要更動，也就是區間 I12
與 I22包含 high與 low的特徵。 
Case 2: 若 I12 與 I22 為部分相交(partial jointed)，則表示此兩個區間為重疊區間 (the 
numeric attributes)，在圖三中的 I12 = [v11;v12]與 I22 = [v21;v22]為重疊區間，屬性 b2的值 v2可
能落於此重疊區間 IC = [v21;v12]、high區間 IH = [v11;v21] (at the left of the IC)或是 low區間 IL = 
[v12;v22]。因此若要降低 high 的特性就要對 b2的屬性值 v2進行修正，而修正後的值以落於
8 
 
資料都落在 p1的附近，因此 G2可視為較佳的建議區域，行動修訂值的選取則可以利用找
出可以代表此區域的點 (如中心點)，利用分群(clustering)的技術可以對於這些點來進行分
群以進一步找出行動修正的建議值。 
本研究利用上述的方法運用到一個實際的軟體發展流程上，如圖五所示，以 10個行動
為一組進行預測，針對那些預測為 H的行動(如 2與 4)隨機挑一半來進行修正(如第 2個行
動)，而另一半維持不變。所應用的專案與業界開發醫療照護資訊系統的專案，共蒐集 190
個行動，使用第 1~40的行動做為第一次建模之用，共進行 150個軟體發展行動的預測。 
起 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 總
數 
比
例 迄 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 
M H 0 2 1 2 1 1 1 1 1 0 0 1 1 1 1 14 19% 
L 5 3 4 3 4 4 4 4 4 5 5 4 4 4 4 61 81% 
C H 2 3 2 2 3 4 2 2 2 0 1 1 1 2 2 29 39% 
L 3 2 3 3 2 1 3 3 3 5 4 4 4 3 3 46 61% 
 
(圖六)、應用本研究的方式於專案開發的結果 
圖六顯示本研究應用於專案開發對於軟體發展行動的結果，M欄位表示修正組，其中
除了預測為 High的行動外，也包含 Low的行動，但只有預測為 High的行動才有進行修改
的動作，C欄位表示維持組，該組的所有行動不論是否預測為 High皆不予修正，也未做進
一步的處理，因此在這 150 個軟體發展行動中 M 的 High 的比例為 19%，但 C 組的 High
的比例卻高達 39%，因此可以看出兩者的差異性。因此本研究所提的軟體發展行動修正方
法可以有效的降低瑕疵發生的比例。 
參考文獻： 
1. Card D.N. Statistical Techniques for Software Engineering Practice. Proc. of the 26th 
International Conference on Software Maintenance (ICSM'04), 2004, 722--723. 
2. Chang, C.-P and Chu, C.-P. Improvement of Casual Analysis Using Multivariate Statistical 
Process Control, Software Quality Journal, 2008, 16(3):377-409. 
3. Chang, C.-P. Software Process Improvement using Multivariate Statistical Process Control 
and Action-Based Defect Prediction. Dissertation, January, 2008. 
4. Chang, C-P., Chu, C-P. and Yeh, Y-F. Integrating In-Process Software Defect Prediction with 
Association Mining to Discover Defect Pattern, Information and Software Technology, 2009, 
51(2): 375–384. 
5. Graves, T.L., Karr, A.F., Marron J.S. and Siy, H. Predicting Fault Incidence Using Software 
Change History, IEEE Trans. on Software Engineering, 2006, 26: 653-661. 
6. Herbsleb, J., Carleton, A., Rozum, J., Siegel, J. and Zubrow, D. Benefits of CMM-Based 
Software Process Improvement: Initial Results, Software Eng. Inst., Carnegie Mellon Univ., 
Pittsburgh, Tech. Rep. CMU/SEI-94-TR-013, August 1994. 
7. Jacob A.L., Pillai S.K. Statistical Process Control to Improve Coding and Code Review. 
 1 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                     日期：99年 7月 1日 
                                 
一、參加會議經過 
ICNIT 2010 (International Conference on Networking and Information Technology) 主要由
IACSIT(International Association of Computer Science and Information Technology) 所主辦的國
際研討會，大會主要於 6/12 上午由 Prof. Wang Jun 對於整個會議的活動進行簡要的介紹，並發
表演說，主要介紹網路路徑最佳化演算法的改進策略(Optimization of shortest path routing)，Prof. 
Wang 主要使以 Nuero network 的分析技術為基礎，進而發展出可以改善搜尋效率的演算法，除
了在網路路徑分析的運用上，並可將其應用在各種不同的領域中。 
接著則由 Prof. Steve Thatcher 介紹飛行系統發展的關鍵技術，Prof. Steve 目前主持 AERO 
Lab 的許多計畫，演說中點出系統錯誤的產生主要還是以人為的錯誤為主要的部分(占 70%至
90%)，他並以實際空難的例子來說明許多的系統錯誤並非系統的問題而是人為的疏忽，而這些
錯誤也通常發生在操作人員發現錯誤時，嘗試運用錯誤的方法來矯正錯誤，以致使得損害加
大，因此發展輔助系統來降低此類錯誤的發生有其必要性，除了發展分析與預測系統以提供飛
行人員更多的判斷資訊外，也可以應用模擬系統提供更多的狀況來將強使用者對於突發狀況的
處理。此外也可以利用使用者在使用 Simulator 的過程中蒐集相關資訊(此資訊無法由實際例子
中蒐集)，以便用來分析並產生相關規則，以便預測在相類似的情況下所可能發生的問題，亦
即發展 prediction agent 與 pattern matching agent。第三場的演說則由 Dr. Sandhu 發表對於軟體
元件再用性的評估技術(Software Reusability)，他所使用的評估方式是以 Taguchi 的分析方式為
重心，並結合 ANOVA (Analysis of  Variance)與 Fuzzy Analysis 的技術來進行分析，他首先對
於 Software Reusability 的相關屬性進行定義(例如 Complexity, Size, Structure 等)，藉此來蒐集軟
計畫編號 NSC 98 －2221－ E － 168 － 051 － 
計畫名稱 以間接關聯性規則探勘與瑕疵預測技術提供導致瑕疵的軟體發展行動修正建議 
出國人員
姓名 
張慶寶 
服務機構
及職稱 
崑山科技大學 資訊工程系 
會議時間 
99年 6月 11日至 
99年 6月 12日 
會議地點 菲律賓 馬尼拉 
會議名稱 
(中文) 2010年網路與資訊科技國際研討會 
(英文) ICNIT 2010 (International Conference on Networking and Information Tech.) 
發表論文
題目 
(中文)應用模糊理論產生個人化服務設定 
(英文) Applying Fuzzy Inference to Generate Personal Configuration for Appliance 
 3 
效能問題，以及此類的軟體發展時需要考量的問題與相關因子，因此在未來的研究工作須要於
實際的軟體發展上搜集更多的資料，以驗證其效率。 
依本次發表過程中其他學者所提出的意見修改相關細節，便將本方法運用到相關的嵌入式
軟體開發專案中，藉以搜集更多的執行資料來驗證其效能，並於整理相關的資料後投稿國際期
刊。 
五、攜回資料名稱及內容 
由 ICNIT 2010所發行之研討會會議論文集一本、CD光碟片一片以及會議Guidebook一本。 
六、其他 
無 
98年度專題研究計畫研究成果彙整表 
計畫主持人：張慶寶 計畫編號：98-2221-E-168-051- 
計畫名稱：以間接關聯性規則探勘與瑕疵預測技術提供導致瑕疵的軟體發展行動修正建議 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 1 2 100%  
博士生 1 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 3 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
