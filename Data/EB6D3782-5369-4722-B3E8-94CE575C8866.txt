21. Introduction
The modelling analysis for the queueing systems with vacations has been done by a
considerable amount of work in the past and successfully used in various applied problems such
as production/inventory systems, communication systems, computer networks and etc. (see survey
paper by Doshi [1]). A comprehensive and excellent study on the vacation models can be found in
Levy and Yechiali [2] and Takagi [3]. Batch arrival M[x]/G/1 queueing systems with multiple
vacations were first studied by Baba [4]. The first study of batch arrival queue with control policy
(N policy) and vacations was done by Lee and Srinivasan [5]. The variations and extensions of
these vacation models with N policy can be referred to Lee et al. [6, 7], Krishna Reddy et al [8],
Ke [9] and others. The developments and applications on the optimal control of queueing systems
are rich and varied (see Tadj and Choudhury [10]). Recently, Arumuganathan and Jeyakumar [11]
introduced the optimal N policy for an M[x]/G/1 queueing system with server setup, closedown
and multiple vacations. They also proposed a cost model for a practical situation and how the
results would be useful in optimizing the cost. Takagi [3] first proposed the concept of a variant
vacation (a generalization of the multiple and single vacation) for the single arrival M/G/1 regular
system. Zhang and Tian [12] treated the discrete time Ge/G/1 system with variant vacations. In
this system, after serving all customers in the system, the server will take a random maximum
number of vacations before returning to the service mode. Ke and Chu [13] examined the variant
policy for an M[x]/G/1 queueing systems by stochastic decomposition property. Recently, Ke [14]
used supplementary variable technique to study an M[x]/G/1 queueing systems with balking under
a variant vacation.
So far very few authors have studied the comparable work on the variant vacation policy for
batch arrival models with control policy, in which the server may take a sequence of finite
vacations in the idle time and start services when the number of arrivals reaches or exceeds a
predetermined threshold. This motivates us to develop the variant vacation policy for an M[x]/G/1
queueing system, where the server operates N policy and takes at most J vacations when the
system is empty. Conveniently, we represent this variant vacation system as M[x]/G/1/VAC(J)-N
policy queueing model.
The objectives of this paper are as follows: Firstly, we develop the system size distribution at a
random epoch as well as at a departure point of time. Secondly, we derive the busy period
distribution, the idle period distribution, and the queue waiting time distribution. Thirdly, we
present some special cases and concluding remarks.
2. The system
Consider a batch arrival M[x]/G/1 system in which the server operates N policy and takes at
most J vacations when he finishes serving all customers in the system. The detailed description of
the model is given as follows:
4the conditional probability density of completion of the service time, given that the elapsed time is
x and dxx)( can be referred to the corresponding vacation.
The state of the system at time t is given by
)(tQ number of customers in system,
 )(tS the elapsed service time,
and
 )(tV j the elapsed time of the j th vacation.
For further development of this variant vacation queueing model, let us define the random
variable )(t as follows:














.at timeonth vacation theisservertheif,1
,at timeonth vacation theisservertheif,1
,at timeonth vacati1on theisservertheif,2
,at timebusyisservertheif,1
,at timesystemin theidleisservertheif,0
)(
tJJ
tjj
t
t
t
t


Thus the supplementary variables )(tS and )(tV j
 are introduced in order to obtain a bivariate
Markov process )}(),({ ttQ  , where 0)( t if 0)( t , )()( tSt  if 1)( t ,
and )()( tVt j
 if 1)(  jt ( Jj ,,2,1  ).
Let us define the following probabilities:
1,,2,1,0},0)(,)(Pr{)(  NntntQtRn 
1,0},)();()(,)(Pr{),(   nxdxxtSxtStntQdxtxPn 
JjnxdxxtVxtVtntQdxtx jjnj 
 1,0,0},)();()(,)(Pr{),(,  .
In steady-state, we can set )(lim tRR ntn  for 10  Nn , and limiting densities
),(lim)( txPxP ntn  for 0x and 1n , and ),(lim)( ,, txx njtnj   for 0x , 0n ,
and .1 Jj
Following the arguments of Cox [15], the Kolmogorov forward equations, which govern the
system under the steady-state conditions, can be written as follows:
 

 0
1
, )()(
n
k
knknJn RdxxwxR  )1,,2,1,0,0(  Nnx  , (1)
6where )(
~
0  V .
Starting with Eq. (11) to solve recursively over the range ,1,,2,1  JJj we get on
simplification
1
0
0
0, )0(  jJj
R


( 11  Jj ). (12)
Let 0,j represents the steady-state probability that no customer appears while the server is on
the j th vacation. By integrating Eq. (10) with respect to x from 0 to , we have
1
0
00
0,
)1(

 jJj
R


)1( Jj . (13)
Therefore, the probability that no customers appear in the system while the server is on vacation
is:
.
)1(
0
00
1
0,0 J
JJ
j
j
R

 

(14)
3.1.2 The probability generating function (PGF) of 
Solving linear differential Eq. (4) and using Eq. (12), we have
),1();0(
1
0
2
0
0 Jjz
R
z
N
n
n
n
jJj  


 

(15)
and
),
1
1
1();0(
1
00
1
0
0
0
1








N
n
n
n
J
J
J
j
j z
R
z 



(16)
where )
!
()(
1
)(
0
2
11
21 k
a
k
n
k
aa
nnaaa
n a
k
n
k
k
n
k
k
n




 

and )(
~
00  V . Note that when we
replace k by )!
(
k
k , n can be reduced to n , which is exactly the coefficient of nz in the
expansion of )()](1([
~ zzXV   when 0z .
Multiplying Eqs. (3) and (4) by nz and summing over ),3,2,1( nn , it yields
0);()]())(1([);(  zxxzXzx
dx
d
jj  ).0( x (17)
Solving the differential Eq. (17), we get
8






 






 




 1
00
1
00
1
0
0
0 )1)((
1
1
1
1)(
)(
);0(
N
n
n
n
N
n
n
n
J
J z
zX
z
z
zSz
Rz
zP 



, (26)
where ))](1([
~
)( zXSzS   .
Then, the probability generating function (PGF) of )(zP is:
.
1)(
1)(1)(
1
1
1
1)(
)(
)1)((
1)(
);0()](1[);0();()(
1
00
1
00
1
0
0
0
)](1[
00









 

















zX
zS
z
zX
z
z
zSz
zR
zX
zS
zpdxexSzpdxzxPzP
N
n
n
n
N
n
n
n
J
J
xzX






(27)
The unknown constant 0R can be determined by using the normalization condition Eq. (9)
when 1z , which is equivalent to 


J
j
jN PR
1
1)1()1()1( . Thus we obtain


J
j
Nj R
1
1)1()1( . (28)
From Eqs. (16), (22) and (28), we can get










1
0
1
0 00
1
0
0
0 1
)
1
1
1(
][
)1(
N
n
n
N
n
n
J
J
VE
R





. (29)
where ][][ SEXE .
Remark 1:
(1) As N = 1, our model becomes the M[x]/G/1 queue with at most J vacations. In this case,
000   , 0R can be reduce to
1
1
1][
1
0
0
0
0









J
J
VE
R ,
which agrees with Ke and Chu [13].
(2) When 0J , 1)1(NR ,



 1
0
0
1
N
n
n
R


and )(zRN can be simplified into







 1
0
1
0
)1(
)( N
n
n
N
n
n
n
N
z
zR


,
where 


n
i
inin
1
 . The above result agrees with that of Lee et al. [16].
10
.
)
1
1
1]([
1
1
][
)
1
1
1]([
1
1
1
2
][][
)1(2
][])[(][)]1([
)(lim
1
0
1
0
1
00
1
0
1
0
1
0
1
00
1
0
1
0
1
0
1
00
1
0
1
00
1
0
2222
1







































N
n
n
JN
n
n
J
N
n
n
JN
n
n
J
N
n
n
JN
n
n
J
N
n
n
J
zs
VE
nnVE
VE
VEXESEXESEXXE
zL















(32)
Using Litle’s formula, we easily obtain the expected waiting time in the queue,
.
)
1
1
1]([][
1
1
][
)
1
1
1]([
1
1
1
2
][
)1]([2
][][][)]1([
1
0
1
0
1
00
1
0
1
0
1
0
1
00
1
0
1
0
1
0
1
00
1
0
1
00
1
0
222













































N
n
n
JN
n
n
J
N
n
n
JN
n
n
J
N
n
n
JN
n
n
J
N
n
n
J
q
VEXE
nnVE
VE
VE
XE
SEXESEXXE
W















(33)
Remark 2:
(1)When N = 1, our model becomes the M[x]/G/1/VAC(J) queue. In this case, 000   , sL
can be reduced to
))1()1]([(2
][)1]([
)1(2
][])[(][)]1([
000
2
0
222
JJ
J
s VE
VEXESEXESEXXE
L







 ,
which agrees with Ke and Chu [13].
(2)When J = 0, our model becomes the M[x]/G/1/N-policy. In this case, 





1
00
1
0
1
1
1
N
n
n
J


vanishes due to no vacation and 


n
i
inin
0
 (see Sections 3.1.1-3.1.2). Then sL can be
reduced to







 1
0
1
0
222
)1(2
][][][)]1([
N
n
n
N
n
n
s
n
SEXESEXXE
L



 ,
which agrees with Lee et al. [16]. In this case, 


n
i
inin
0
 is equivalent to 


n
i
inin
0

in Lee’s paper.
12
M[x]/G/1 system. The inferences above listed confirm that the stochastic decomposition property
by Fuhrmann and Cooper [17] is also valid for the variant vacation model with N policy.
3.2. Queue size distribution at a departure epoch
In this section, we derive the probability generating function of the queue size distribution at
departure epoch for the variant vacation M[x]/G/1 queueing system. Following the arguments by
Wolff [18], we state that a departing customer will see customers in the queue just after a
departure if and only if there were ( 1 ) customers in the queue just before the departure. Thus
we may write
  0 10 )()( dxxPxC   (  ,2,1,0 ), (36)
where  Pro [A departing customer will see customers in the queue], and 0C is a constant
to be evaluated.
Let )(z be the PGF of }.,2,1,0,{   Then
dxxexSz
zX
z
z
zSz
R
C
dx
z
zxP
x
xzX
N
n
n
n
N
n
n
n
J
J )())(1(
1)(
1
1
1
1)(
)(
);(
)(C(z)
0
))(1(
1
00
1
00
1
0
0
0
0
00





 

 














 















 






 




 1
00
1
00
1
0
0
0
0
1)(
1
1
1
1)(
)(
)( N
n
n
n
N
n
n
n
J
J z
zX
z
z
zSz
zSR
C 



. (37)
The unknown constant 0C can be determined by using the normalization condition when 1z ,
which is equivalent to 1)1(  , then we get
][
1
0 XE
C  . (38)
Thus the probability of the departure point queue size distribution is given by
).(
)1]([
)(1
1)(
1
1
1
1)(
))(]([
)(
(z)
1
00
1
00
1
0
0
0
z
zXE
zX
z
zX
z
z
zSzXE
zSR N
n
n
n
N
n
n
n
J
J
























 



(39)
It is important to note that the departure point queue size distribution given by Eq. (39) can be
decomposed into two independent random variables: One (the first term) is the number of
customers placed before a tagged customer in a batch in which the tagged customer arrives and
14
,
1
]1)([)(]1)([)(
1
)(
1
)1)((
1
)1)(()(
1
)(
)(
0
,,
0
0
0
0
),(
1
1
0
1
1
1
1
1
1
0
00
,
21
1
1
21
11
11
121
21
21
21
1
1
1
J
JNJN
J
JkkkN
N
kk
kk
kkk
J
N
kk
kk
kkk
N
kk
kk
kk
N
k
k
k
JN
zXzBzzz
zQzα
zzzz
z
zQ
J
J
J
J
J
J
J














































(42)
where
(1) 





 


1
1
1
1
1
1
,
11
11
121
21
21
21
1
1
1
)(
N
kk
kk
kkk
N
kk
kk
kk
N
k
k
kJN
J
J
J
zzzzA

 





















1
0
1
1
1
0
3
3
3
1
2
2
1
1
1
1321
11
11
121
321
321
21
321
021
21
21
21
1
1
1
N
kkkk
Jkk
kk
kkkJ
N
kkk
kkk
kkk
kkk
N
kk
kk
kk
kk
N
k
k
k
J
J
J
J
zαAzAzAzA


 
with
0
1
0
2
0
1
02
0
1
2
3
0
4
3
2
0
3
20
2
11 1
)1(
)1(
1
1 










JJ
JJ
J
J
CCCCA 
)1(2
)2)(1(
)1(
)2(
)1(
1
0
2
0
2
0
2
0
3
0
2
03
0
1
3
3
0
5
3
2
0
4
20
3
1
2
02 














JJJ
JJ
J
JJJCCCCCA 
…











 

 


  kJ
k
j
jkJ
Kk jkJkJkJj
A 0
1
001
0
)1)(1()1)((
!
1
)1(
)1(
1 


…
11 JA .
(2) )1)(( 0 ),(
1
1
21
1
1
21



 zQzα JkkkN
N
kk
kk
kkk J
J
J
J 




















1
0
0
),(
1
0
2
0
),(
2
02
0
,
1
1
1
01
1
1
1
1
1
21
21
21
21
211
1
1
1
)1)((
)1)(()1)((
N
kk
Jkk
JkkN
kk
kk
N
kk
kk
JkkN
kk
kk
JJ
JkN
N
k
k
k
JJ
J
J
J
J
J
zQz
zQzCzQzαC







)1)(()1)(()1)(( 0,1
1
1
0
,2
2
2
0
,11   zQzBzQzBzQzB JNNJNJN 
)]1)(([)]1)(([)]1)(([
1
0
1
1
2
0
2
2
1
0
1 








i
i
i
N
N
N
i
i
i
N
i
i
i zzxzBzzxzBzzxzB  
]1)()[(
1
0
1
1
2
0
2
2
1
0
1  







zxzzBzzBzzB
i
i
i
N
N
N
i
i
i
N
i
i
i  
]1)([)(,  zxzB JN
with
1
1
011   JJCB
2
1
2
022
1
012    JJJJ CCB
16
where 



n
i
in
i
n
1 0
)
1
( 
 , 10  .
Then )(0 , zQ JN becomes
,
1
1)(
1
1
)1)(1)((
1
)(
1
)1)((
1
)(
)(Qlim
1
000
1
0
0
0
0
1
1
0
00 
 





 











N
i
i
i
N
i
i
i
N
i
i
i
N,JJ
z
z
zz
z
zz
z
z 









which agrees with Lee et al. [6].
The first and second factorial moments for 0 ,JNQ are easily obtained by differentiations.







 J
JNJN
JN
BAVEVE
XEQE
0
,,
0
0
, 1
)1()1(][
1
][
][][



 , (43a)
).1(
1
)]1([
)1(
1
][)]1([][][
1
][)]1([][][
)]1([
,
0
,
0
222
0
222
0
,
0
,
JNJ
JNJJNJN
B
XXE
A
VEXXEVEXEVEXXEVEXE
QQE













(43b)
It is well know that the LST of the busy period started with one customer in the ordinary
M[x]/G/1 queueing system queue can be expressed by
))](B~([
~
)(~  XS  .
Thus the LST of the busy period in the variant vacation model, denoted by )(~ , JN , is given by
))(~()(~ 0 ,,   JNJN Q , which leads to the expected length of busy period for the variant vacation
model as











J
JNJN
JN
BAVEVESEXE
E
0
,,
0
, 1
)1()1(][
1
][
1
][][
]~[





. (44)
4.3 Idle period distribution
Conditioning on the length of the first vacation and the size of arrivals during the first
vacation, we have the following recursive equation:









.if,
if),(
~
))(,(
~ 1,
,
Nke
NkIe
kxNxVI
x
jkN
x
jN 
 

After unconditioning on k, we get
18
(2) When J , our model becomes the M[x]/G/1/VAC()/N-policy queue. Using the
similar arguments of Remark 3, we have
0
1
0
, 1
][
][








N
j
j
N
VE
IE ,
which agrees with Lee et al. [6]. Here j is given in Remark 3.
5. Waiting time distribution
In this section, we derive the queue waiting time of an arbitrary customer whom we call the
test customer. Let us define the following notations:
)(~ qW the LST of the queue waiting time of the test customer,
)(~A W the LST of the additional queue waiting time due to those preceding the test
customer in the same arrival group.
)(~B W the LST of the waiting time of the test customer who arrives when the server is
busy,
)(~D W the LST of the waiting time of the test customer who arrives when the server is
dormant,
)(~V W the LST of the waiting time of the test customer who arrives while the server is on
vacation.
5.1 The LST of the waiting time of the test customer who arrives when the server is busy
If the test customer who arrives while the server is busy, the LST of the waiting time of
customers is given by
,
)
1
1
1]([
)](
~
[
)
1
1
1]([
))](
~
[
1
1
1]([
)](
~
(][[
))(
~
((
~
1
)](
~
1][[
))(
~
(1
))(
~
(
)](
~
()[1(
)(W
~
1
0
1
0
1
00
1
0
1
0
1
0
1
0
1
0
1
00
1
0
1
00
1
0
B











































N
n
n
JN
n
n
J
N
n
n
n
J
N
n
n
JN
n
n
J
N
n
n
n
J
VE
S
VE
SVE
SXVE
SXV
SXE
SX
SX
SX













(48)
where
(1)
)](
~
1][[
))(
~
(1
)(W~A 

SXE
SX

 is the LST of the additional queue waiting time due to those
preceding the test customer in the same arrival group,
(2)
)](
~
1][[
))(
~
(1
))(
~
(
)](
~
()[1(




SXE
SX
SX
SX



 is the waiting time of the test customer who arrives
20















 














)](
~
1][[
))(
~
(1
)](
~
(][[
)(
~
))](
~
([
~
)(
~
]1)(
~
[
)
1
1
1]([
))](
~
[
1
1
1]([)1(
)(W
~ 1
1
,1
0
1
0
1
00
1
0
1
00
1
0
V 









SXE
SX
SXVE
VSXVΗI
VE
SVE
kN
N
k
JkN
n
n
J
N
n
n
J
N
n
n
n
J
,(50)
where )(~ , JnI is the LST of the idle period given by Eq.(45) and )(
~ kNΗ  is the LST of the
time length that consists of the remaining vacation time, the service time of those customers in the
queue and the service time of those customers who preceding him in the same group.
5.4 The LST of the queue waiting time
From Eqs.(48)-(50), the LST of the queue waiting time becomes
),(
~
)
1
1
1]([
)](
~
[
][
)(
~
1
)
1
1
1]([
))](
~
[
1
1
1]([
)](
~
1][[
))(
~
(1
))(
~
(
)1(
)(
~
)(
~
)(
~
)(W
~
1
0
1
0
1
00
1
0
1
0
1
0
1
0
1
0
1
00
1
0
1
00
1
0
VDB















N
N
n
n
J
N
n
n
J
N
n
n
n
J
N
n
n
J
N
n
n
J
N
n
n
n
J
q
W
VE
S
VE
V
VE
SVE
SXE
SX
SX
WWW

















































 (51)
where
.)(
~
))](
~
[
1
1
1(][)1)(
~
(
)](
~
[
)](
~
1][[
))](
~
[1(
)1)(
~
(
)
1
1
1]([
)1(
))(
~
]1)(
~
[))](
~
[
1
1
1]([
]1)(
~
[
)](
~
1][[
))](
~
[1(
)](
~
[
)
1
1
1]([
)1(
)(W
~
1
1
1
00
1
0
,
1
1 1
1
00,1
0
1
0
1
00
1
0
1
1
,
1
00
1
0
0,
1
1
1
0
1
01
0
1
0
1
00
1
0








 














 






 
 









































N
n
nN
N
k
k
k
J
Jn
N
n
nN
k
knN
knN
J
k
k
nN
n
n
J
N
n
n
J
nN
N
n
Jn
N
n
n
n
J
knN
k
k
nN
k
n
n
N
n
J
N
n
n
J
N
n
n
JN
HSVEI
S
SXE
S
I
VE
HISVE
I
SXE
S
S
VE

















(52)
Then, the mean queue waiting time can be obtained as:
22
1
1
][
)
1
1
1]([][
)1( 1
00
1
01
0
1
0
1
0
1
0
1
00
1
0 




















 











N
n
n
J
N
n
n
J
N
n
n
JN
n
n
J
nVEn
VEXE







. (55)
Finally we get
.
)
1
1
1]([][
1
1
][
)
1
1
1]([
1
1
1
2
][
)1]([2
][][][)]1([
1
0
1
0
1
00
1
0
1
00
1
0
1
0
1
0
1
0
1
0
1
00
1
0
1
00
1
0
222





 





































N
n
n
J
N
n
n
J
N
n
n
JN
n
n
J
N
n
n
J
N
n
n
J
N
n
n
J
q
VEXE
nVEn
VE
VE
XE
SEXESEXXE
W











(56)
It is to be noted that Eq. (56) is identical to the Eq. (33) obtained from Little's formula.
6. Conclusions
Using the supplementary variable technique we have derived the p.g.f. of the number of
customers (in the various server’s state) for the M[x]/G/1 queueing systems with N policy and at
most J vacations. We have obtained other important system characteristics. The results can be
used to determine the optimal (N, J) policy under different cost structures. In a follow up work we
will study the optimization problem associated with the model discussed.
References
[1] B.T. Doshi, Queueing systems with vacations-a survey, Queueing Systems 1 (1986) 29-66.
[2] Y. Levy and U. Yechiali, Utilization of idle time in an M/G/1 queueing system, Management
Science 22 (1975) 202-211.
[3] H. Takagi, Queueing analysis: a foundation of performance evaluation, Vol. I, vacation and
priority systems, part I, North-Holland, Amsterdam 1991.
[4] Y. Baba, On the M[x]/G/1 queue with vacation time, Operations Research Letters 5 (1986)
93-98.
[5] H. S. Lee and M. M. Srinivasan, Control policies for the M/G/1 queueing system,
Management Science 35 (1989) 708-721.
[6] H.W. Lee, S.S. Lee, J.O. Park and K.C. Chae, Analysis of M[x]/G/1 queue with N policy and
multiple vacations, Journal of Applied Probability 31 (1994) 467-496.
[7] S.S. Lee, H.W. Lee and K.C. Chae, Batch arrival queue with N policy and single vacation,
Computers and Operations Research 22 (1995) 173-189.
[8] G.V. Krishna Reddy, R. Nadarajan and R. Arumuganathan, Analysis of a bulk queue with
N-policy multiple vacations and setup times, Computers and Operations Research 25
(1998) 957-967.
