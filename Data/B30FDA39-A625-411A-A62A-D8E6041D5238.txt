 1
1. INTRODUCTION 
Workflow management systems (WFMS) are useful in designing and evolving business processes. 
Generally, a business process is composed of workflows; a workflow is composed of tasks; and a 
task is composed of activities [1]. During workflow execution, an activity is generally activated by 
events. An activated activity is enacted by a role (e.g., a manager and an operator), which may be 
played by a human being or an automatic system. When enacting an activity, a role may consume 
data (e.g., customer order) and may produce data and events to activate other activities. Moreover, a 
role may use resources (e.g., order management system) when enacting an activity. 
Recently, ensuring workflow security has been recognized as essential. Important workflow 
security issues include network security, authentication, access control, and so on. Our research 
focuses on access control. When designing an access control model for workflows, we identified 
that the following dynamic features should be offered (a “dynamic” feature is a feature that allows 
permission change dynamically during the execution of a workflow): 
a. Managing dynamic role switching. The switching refers to changing user-role assignment. For 
example, suppose a company will automatically promote a customer to a VIP when the 
customer’s total consumption amount passes a threshold. In this case, the role played by the 
customer will be dynamically switched from “customer” to “VIP” during the execution of the 
workflow. When a user changes role, user permissions will be changed accordingly. 
b. Managing role associations. Associations may exist among users. When the users play roles in a 
workflow, the associations exist among the roles played by the users. Role associations may 
affect role permissions. For example, if a manager can give a special discount to his/her 
customer friends, the manager can access the information “friend discounting rate” to 
compute a discounted price for his/her customer friends. On the other hand, the manager 
cannot access the rate when a customer is not his/her friend. Since role associations may 
dynamically change according to user association change, role permissions should be allowed 
to change according to role association change during workflow execution. 
c. Preventing indirect information leakage. This leakage refers to leaking information through the 
third ones. For example, suppose an operator is not allowed to know the exact price of an 
 3
dynamic role switching and role associations. The model in [11] is similar to DACM. It adds the 
transition dimension to the two-dimensioned ACM (here a transition causes an activity to enact and 
the two dimensions are respectively subject and object). The model also incorporates the concept of 
roles. In the model, a role in different transition will be granted different access rights. This makes 
the access control more precise than static ACM. Nevertheless, the model cannot handle dynamic 
role switching and role associations. 
TBAC (task-based authorization control) [9] associates authorization steps with tasks (or 
activities). To enact a task, the associated authorization step is first executed to assign the task to a 
role. Within an authorization step, the allowed roles for a task are placed into a trustee set, from 
which a role is selected each time the authorization step is executed. An authorization step also 
consists of protection state, which primarily consists of permissions. Trustee set and protection state 
can be dynamically changed during the execution of a workflow. Therefore, TBAC allows granting 
access rights dynamically, which overcomes the drawback of the static ACM or RBAC. Moreover, 
allowing the trustee set to change dynamically implies that dynamic role switching can be achieved. 
Nevertheless, it does not take role associations into consideration. The model in [10] models 
workflows using Petri-net. Its access control mechanism is based on TBAC. The model improves 
the feature of static role-permission assignment in RBAC using dynamic assignment. Similar to 
TBAC, the model achieves dynamic role-permission assignment through authorization steps. Like 
TBAC, the model can achieve dynamic role switching but cannot manage role associations. 
Napoleon [12] enforces business security policy using multiple-layered RBAC. For example, 
if an activity needs a permission to enact, Napoleon enforces roles with that permission to enact the 
activity. Napoleon is a mechanism to enforce security policy instead of a mechanism to define 
security policy. Therefore, the objective of Napoleon is different from that of our research. In this 
regard, we cannot say that Napoleon can handle dynamic role switching and role associations. The 
model in [13] is the previous version of Napoleon. The difference between the model and Napoleon 
is that the model in [13] uses only two layers, namely the application designer layer and the system 
administrator layer [12], whereas Napoleon may use more than two layers. 
The MLS (multilevel security) model in [14-15] uses multilevel security to achieve access 
 5
real-time systems. Since it is based on RBAC, it offers features such as enforcing SoD constraints. 
User-role assignment is decided by environment context. Therefore, it seems that the architecture 
can handle dynamic role switching. Nevertheless, the architecture does not manage role 
associations. 
The model in [20] applies RBAC for access control. It primarily handles role constraints, 
especially dynamic SoDs. We use an example to explain dynamic SoD. Suppose the activity 
“Evaluate student scores” and “Double check student scores” are all assigned to the role “teacher”. 
Also suppose that the activities cannot be assigned to the same teacher. That is, the person playing 
the role “teacher” to enact the former activity should be different from the one enacting the latter 
activity. The model in [21] uses RBAC as the base to enforce SoD constraints. In the model, the 
workflow execution environment decides which user can execute the next task based on SoD 
constraints and the roles played by users. In the model of [22], WFMS cooperates with permission 
system to enforce constraints. The constraint management and access control policy are based on 
RBAC. The model in [22] allows constraints to be overridden if necessary. Since the models in 
[20-22] are based on RBAC, they inherit the access control features of RBAC. Nevertheless, they 
fail to handle dynamic role switching and manage role associations. 
The model in [23] uses RBAC96 as the base for access control within workflows. Control 
policies in the model are similar to those in our model. Nevertheless, the model does not handle 
dynamic role switching and role associations. The model in [24] applies RBAC to control the access 
of resources among peers. The model protects only resources. As to other information such as data 
managed by a workflow, the model does not protect. Therefore, access control of the model is 
insufficient from our perspective. The model inherits the features of RBAC such as SoD constraint 
enforcement. Nevertheless, the model does not offer other features mentioned in section 1. The 
model in [25] discusses the execution of distributed workflows. A resource manager module 
monitors the access of information managed by a workflow. The model applies the concept of MLS 
to manage the execution of workflows in different domains. Therefore, like MLS, the model cannot 
handle dynamic role switching and role associations. The model in [26] discusses the recovery of 
workflow information when malicious hackers attack a workflow. The recovery is accomplished 
 7
differentiate events from conditions. We collectively call them events. 
Order
an item
Process
Order
data: item, buyNumber
event: setUpOrder
condition: decideToBuy
Legend:
Activity
Transition
Figure 1. Activity and transition
 
During workflow execution, activities are enacted by roles. A role may be played by a human 
being or an automatic system. When enacting an activity, a role may use resources, consumes data, 
and produces data and events to activate other activities. To prevent workflow information leakage 
during workflow execution, we embed WfRBAC in a workflow. Here workflow information is 
composed of data and events in a workflow. With WfRBAC embedded, a workflow is composed of 
the original workflow Wfl (see Definition 1) and the WfRBAC model (see Definition 2). 
Definition 1: Wfl = (EVN, DAT, RSO, RLE, ACTV), in which 
a. EVN is a set of events, which may be obtained from outside of the workflow or produced 
within the workflow. 
b. DAT is a set of data, which may be initially available or produced by the workflow. 
c. RSO is a set of resources needed to finish the workflow. 
d. RLE is a set of roles to execute the workflow. 
e. ACTV is a set of activities. An activity act is defined as follows: 
act = (OPR, RRL, IEV, IDT, IASO, RRS, OEV, ODT), in which 
e.1 OPR is a set of operations that should be performed to finish act. 
e.2 RRL is a set of roles to execute act; RRL ⊆  RLE. 
e.3 IEV is a set of input events that should occur for act to enact; IEV ⊆  EVN. 
e.4 IDT is a set of input data that should be available for act to enact; IDT ⊆  DAT. 
e.5 IASO is a set of input associations. It is a subset of ASO in Definition 2. IASO guides 
 9
is thus the kernel of WfRBAC. Section 3.2 will explain DACT in more details. 
k. CNS is a set of simple dynamic separation-of-duty (SoD) constraints [30]. 
RBAC96 allows users to establish sessions within which users should finish their 
functionality. In WfRBAC, users’ functionality is a workflow’s activities. Therefore, a user in 
WfRBAC establishes a session when he executes an activity. Accordingly, sessions are implicitly 
included in Definition 2. It is unnecessary to explicitly define a session component. 
3.2 WfRBACL 
We embed WfRBAC in a simple workflow language WfRBACL. Since WfRBAC is embedded in 
WfRBACL, workflows represented in WfRBACL consist of components in both Definitions 1 and 
2. The framework of a workflow represented in WfRBACL is shown below: 
work_flow_name(instantiation _events) { 
user_declarations; 
role_declarations; 
user_role_assignments; 
role_hierarchy_declarations; 
resource_declarations; 
available_data_declarations; 
role_association_declarations; 
reular_permission_declarations; 
association_permission_declarations; 
DACT_declarations; 
constraint_declarations; 
activity_assignments; 
} 
Since every workflow should have a name, we must give a name to a workflow. When a 
workflow is instantiated, instantiation events should be given. As stated in Definition 2, 
instantiation events generally set up initial role associations and start the instantiated workflow 
instance. An example workflow name and instantiation events is shown below: 
workflow orderMng(makeFriendsCustomer, toBuyAnItem “TRUE”, beVIP “FALSE”) 
The declaration states that the workflow is named “oderMng”. The events “makeFriendsCustomer”, 
“toBuyAnItem”, and “beVIP” are instantiation events. The latter two events are respectively given 
the default values “TRUE” and “FALSE”. Only instantiation events are declared. Other events will 
 11
done when the corresponding events occurs. The routines handle dynamic role switching, manage 
dynamic role association change, prevent indirect information leakage, and exchange access control 
information among workflows. It is the kernel of WfRBAC because it achieves all the features of 
WfRBAC, except enforcing SoD constraints. We thus describe DACT in more details here. When 
an event occurs and the event requires DACT to take action, the corresponding DACT routines will 
be executed. We use the following DACT routines as examples to explain the use of the DACT 
component. In the examples, the statements “switchRole”, “addAssociation”, “removeAssociation”, 
“removeAccessRight”, “sendMessage”, and “receiveMessage” are WfRBACL statements. 
a. Handling dynamic role switching. The following routine states that when the event 
“promoteToVIP” occurs, the customer role will be automatically switched to the VIP role. 
on promoteToVIP{ 
switchRole(customer, VIP); 
} 
b. Managing dynamic role association change. The following routine states that when the event 
“makeFriendsCustomer” occurs, an association “assoFriendsCustomer” will be added. 
on makeFriendsCustomer { 
addAssociation assoFriendsCustomer; 
 } 
On the other hand, the following routine states that when the event “breakFriendsCustomer” 
occurs, an association “assoFriendsCustomer” will be removed. 
on breakFriendsCustomer { 
removeAssociation assoFriendsCustomer; 
 } 
c. Preventing indirect information leakage. Suppose in a company, an operator prepares an order 
form and then sends the form to a manager for discounting when a customer order is received. 
Also suppose that operators are not allowed to know the discounting rate. Then, an operator 
can access an order form before the filling of the discounted price. On the other hand, the 
operator cannot access the form after the discounted price is filled. Otherwise, the discounting 
rate will be indirectly leaked by the order form. The following routine states that when the 
event “discountedPriceFilled” occurs, the permission “(orderForm, RW)” initially assigned to 
the role “operator” will be removed. Removing the permission disallows an operator to read 
 13
three parts, namely the “input”, the “operation”, and the “output” parts. The “input” part is 
composed of input events, input data, and input association information. The “operation” part 
indicates the operation that should be performed by a role. The operation can be performed only 
when the input events are true, the input data are available, and the input association information is 
matched. After the operation finished, the role produces the information indicated by the “output” 
part. The output information includes output events and output data. The following activity states 
that the operation “Select a supplementary item” can be performed when: (a) the event 
“updateRecordOK” is true, (b) the event “beVIP” is false, (c) the data “supplementary” and 
“extraSupplementary” are available, and (d) the manager and the customer are friends. After the 
operation finishes, the data “supplementaryItem” will be produced, the event 
“supplementarySelected” will be set, and the event “breakFriendsCustomer” can be set or not. 
input updateRecordOK(E), assoFriendsCustomer(A), supplementary(D), extraSupplementary(D), 
~beVIP(E), do “Select a supplementary item”, output supplementaryItem(D), 
supplementarySelected(E), breakFriendsCustomer(E, O); 
In an activity description, the symbol “E” denotes an event, “D” denotes a piece of data, “A” 
denotes an association, “O” denotes optional, “~” is the “NOT” operator, “&&” is the “AND” 
operator, and “||” is the “OR” operator. 
4. USING WfRBAC 
We use an order management workflow represented in WfRBACL to exhibit the use of WfRBAC. 
An order management workflow is instantiated when a customer intends to buy an item. With this 
intension, the customer initiates an inquiry to check the item’s price. On receiving the inquiry, an 
operator retrieves the item’s price from a price inquiry system. The price is then supplied to a 
manager. When the operator is retrieving the price, the manager checks the customer’s ID against 
the customer record file to make sure whether the customer is a VIP. The checking result decides 
the role played by the customer in the rest of the workflow. That is, the customer plays the role 
“VIP” if the checking decides that he is a VIP. On the other hand, the customer plays the role 
“customer” if the checking decides that he is not a VIP. 
 15
the selected supplementary item through the protocol of exchanging access control information to a 
delivery workflow to deliver the items. 
ca1: Customer inquires the price of an item
ca2: Customer makes decision whether he
want to buy the item
ca3: Customer pays
ca4: Customer selects a supplementary item
va1: VIP makes decision whether he want to
buy the item
va2: VIP pays
va3: VIP selects a supplementary item
oa1: Operator obtains price
oa2: Operator fills in order form
ma1: Manager discounts price
ma2: Manager manages payment for VIP
ma3: Manager manages payment
for customer
ma4: Manager provides supplementary list
for VIP
ma5: Manager provides supplementary list
for customer
it: Customer intends to buy a item
ct1: Inquiry, item name, and customer ID
ct2: Order from customer
ct3: Payment evidence from customer
ct4: Selected supplementary item from customer
vt1: Order from VIP
vt2: Payment evidence from VIP
vt3: Selected supplementary item from VIP
ot1: Item price
ot2: Filled order form without discounted price
mt1: Discounted price for VIP, VIP
mt2: Discount price for customer, not VIP
mt3: Invoice for VIP, VIP
mt4: Invoice for customer, not VIP
mt5: Supplementary item list for VIP, VIP
mt6: Supplementary item list for customer, not VIP
mt7: Filled order form with discounted price
cr: Customer record file
df: Discounting formulas
Table 1. Activities and transitions in Figure 2
Activity operation                                              Transition contents
 
Figure 2 shows the example workflow, in which a circle is an activity and a rectangle 
contains the events and data of a transition. The operations of activities and the contents of 
transitions are shown in Table 1. Figure 2 uses a swimlane-like depiction, which facilitates 
understanding the responsibility of roles. Four roles are shown in the figure, namely “customer”, 
“VIP”, “operator”, and “manager”. Activities assigned to a role are drawn below the role. Transition 
contents shown in Table 1 include data and events. For example, the content in the transition “t1”, 
which is “Customer intends to buy an item”, is an event obtained from outside of the workflow. As 
another example, the content “Discounted price for VIP” in “mt1” is a piece of data and “VIP” in 
“mt1” is an event produced within the workflow. The contents of a transition may be output of an 
activity and input of another one. For example, the contents of “ct1” in Figure 2 are the output of 
the activity “ca1” and the input of the activities “oa1” and “ma1”. 
A workflow as shown in Figure 2 can be instantiated. When a customer “c1” intends to buy 
an item, a workflow instance is instantiated (in this case, “c1” raises the event in the transition “it”). 
The customer “c1” is initially assigned the role “customer”. He may later be reassigned the role 
“VIP” after VIP checking as described above. Moreover, an operator “o1”, a manager “m1”, and a 
 17
declared and assigned to roles. Activity assignment is declared in the “activityAssignment” block 
(line 1.17). Please refer to section 3.2 for the contents of an activity. 
5. FEATURE 
We describe access control, dynamic role switching, role association management, preventing 
indirect information leakage, and access control information exchange in WfRBAC using the 
example in APPENDIX 1. 
a. Access control. To achieve access control, role’s permissions are strictly controlled. For example, 
the activity in line 1.17.1.4 of APPENDIX 1 is executed by a customer (i.e., non-VIP), who is 
not the manager’s friend. In this case, the customer can select a supplementary item from 
only the list “supplementary”. The customer’s permission in this case is defined in the regular 
permission of line 1.9.1. As another example, the activity in line 1.17.1.5 is executed by a 
customer who is the manager’s friend. In this case, the customer can select a supplementary 
item from the lists “supplementary” and “extraSupplementary”. The customer’s permission in 
this case is defined in the association permission of line 1.11.1.1. 
b. Dynamic role switching. This feature is achieved by the DACT component of WfRBAC. In 
APPENDIX 1, the DACT routine between lines 1.13.1 and 1.13.2 handles dynamic role 
switching. As long as the “promoteToVIP” event occurs, the DACT routine will be 
automatically executed to promote a customer to a VIP. 
c. Role association management. This feature is achieved by the DACT component of WfRBAC. In 
APPENDIX 1, the DACT routines between lines 1.13.3 and 1.13.10 manage role association 
changes. For example, as long as the “makeFriendsCustomer” event occurs, the DACT 
routine between lines 1.13.3 and 1.13.4 will be automatically executed to establish an 
association “assoFriendsCustomer”. As another example, as long as the 
“breakFriendsCustomer” event occurs, the DACT routine between lines 1.13.7 and 1.13.8 
will be automatically executed to remove an association “assoFriendsCustomer”. 
d. Preventing indirect information leakage. This feature is achieved by the DACT component of 
WfRBAC. In APPENDIX 1, the DACT routine between lines 1.13.11 and 1.13.12 prevents 
indirect information leakage. As long as the “discountedPriceFilled” event occurs for an order 
 19
events, data, and associations, and manages the status of events and data. The workflow engine 
identifies the activities that can be enacted and sends the activities to the client sites for the 
corresponding roles to enact. The engine also receives data and events produced by a role and 
executes DACT routines if necessary. The access controller controls data and event access using 
permissions declared in the workflow program. 
We used WfRBACL and WfRBACE to evaluate WfRBAC through experiments. In the 
experiments, we supposed that the permissions defined in a workflow program were correct. Under 
the permissions, we identified activities that violated the permissions. We used the example in 
section 4 extended by adding inventory management function in the experiment. We selected 
twenty students to program the examples using WfRBACL and then executed the workflow 
programs in WfRBACE. In the experiment, we required the students to inject five non-secure 
activities (i.e., activities that fail to obey the access control policy) into their workflows. We want to 
know whether WfRBACE can identify non-secure activities. We collected the following metrics 
data in the experiments: 
a. The number of activities. 
b. The number of non-secure activities. 
c. The percentage of non-secure activities. 
Experiment result
0
10
20
30
40
50
1 3 5 7 9 11 13 15 17 19
Student
Number of activities
Number of non-secure
activities
Percentage of non-secure
activities
 
Figure 4. Experiment result 
The experiment result is shown in Figures 4, which shows that WfRBAC can identify 
non-secure activities. When checking the identified non-secure activities, all the injected ones were 
identified. Figure 4 show that the number of the identified non-secure activities was larger than that 
 21
REFERENCES 
1. D. Georgakopoulos, M. Hornick, and A. Sheth, “An Overview of Workflow Management: From 
Process Modeling to Workflow Automation Infrastructure”, Distributed and Parallel 
Databases, vol. 3, pp. 119-153, 1995. 
2. WfMC Workflow Standard Interoperability -- Internet e-mail MIME Binding, Document Number 
WFMC-TC-1018, http://www.wfmc.org/standards/docs/TC-1018_10_1996.pdf. 
3. WfMC Workflow Standard Interoperability -- Wf-XML Binding, Document Number 
WFMC-TC-1023,http://www.wfmc.org/standards/docs/TC-1023_beta10.pdf. 
4. S. -B. Yan and F. -J. Wang, “A Cooperative Framework for Inter-Organizational Workflow 
System”, Proceedings of the 27’th Annual International Computer Software and Applications 
Conference (COMPSAC’03), pp. 64-71, 1993. 
5. M. Kwak, D. Han, and J. Shim, “A Framework Supporting Dynamic Workflow Interoperation 
and Enterprise Application Integration”, HICSS 35, 2002 
6. R. Sandhu, “Role Hierarchies and Constraints for Lattice-Based Access Controls”, in 
Proceedings of the Fourth European Symposium on Research in Computer Security, pp. 
65-79, 1996. 
7. M. H. Harrison, W. L. Ruzzo, and J. D. Ullman, “Protection in Operating Systems”, 
Communications of the ACM, vol. 19, no. 8, pp. 461-471, 1976. 
8. M. S. Olivier, R. P van de Riet, and E. Gudes, “Specifying Application-level Security in 
Workflow Systems”, in Proceeding of the 9’th International Workshop on Database and 
Expert Systems Applications, pp 346-351, 1998. 
9. R. K. Thomas and R. S. Sandhu, “Task-Based Authorization Controls (TBAC): A Family of 
Models for Active and Enterprise-oriented Authorization Management”, in Proceedings of the 
IFIP WG11.3 Workshop on Database Security, 1997. 
10. X. Dong, G. Chen, J. Yin, and J. Dong, “Petri-net-based Context-related Access Control in 
Workflow Environment”, in Proceedings of the 7’th International Conference on Computer 
Suported Cooperative Work in Design, 2002. 
11. K. Knorr, “Dynamic Access Control through Petri Net Workflows”, in Proceedings of the 16’th 
 23
22. Jacques Wainer, Paulo Barthelmess, Akhil Kumar, “W-RBAC - A Workflow Security Model 
Incorporating Controlled Overriding of Constraints”, Int. J. Cooperative Inf. Syst, vol. 12, no. 
4, pp. 455-485, 2003. 
23. G. J. Ahn, R. Sandhu, M. Kang, and J. Park, “Injecting RBAC to Secure a Web-Based Workflow 
System”, in Proceedings of the 5’th ACM Workshop on Role-Based Access Control, 2000. 
24. J. S. Park, J. Hwang, “Role-Based Access Control for Collaborative Enterprise in Peer-to-Peer 
Computing Environments”, in: Proceedings of the Eighth ACM Symposium on Access Control 
Models and Applications, pp. 93-99, 2003. 
25. V. I. Wietrzyk, M. Takazawa, M. A. Orgun, V. Varadharajan, “A Secure Transaction 
Environment for Workflows in Distributed Systems”, in: Proceedings of the Eighth 
International Conference on Parallel and Distributed Systems, pp. 198-205, 2001. 
26. M. Yu, P. Liu, W. Zang, “Multi-Version Attack Recovery for Workflow Systems”, in: 
Proceedings of the 19’th annul Computer Security Applications Conference, pp. 142-151, 
2003. 
27. P. C. Hung, K. Karlapalem, “A Secure Workflow Model”, in: Proceedings of the 2003 
Australasian Information Security Workshop, pp. 33-41, 2003. 
28. S. -C. Chou, A. -F. Liu, and C. -J. Wu, “Preventing Information Leakage within Workflows That 
Execute among Competing Organizations”, to appear in Journal of Systems and Software. 
29. http://www.wfmc.org. 
30. R. T. Simon and M. E. Zurko, “Separation of Duty in Role-Based Environments”, Proceedings 
of New Security Paradigms Workshops, 1997. 
31. G. -J. Ahn and R. Sandhu, “Role-Based Authorization Constraints Specification”, ACM 
Transactions on Information and System Security, vol. 3, no. 4, pp. 207-226, 2000. 
 25
friendsDiscountFormulas(R), discountedItemPrice(RW), priceDiscounted(RW), 
makeFriendsCustomer(RW), breakFriendsCustomer(RW), makeFriendsVIP(RW), 
breakFriendsVIP(RW), orderProcessed(R), processedOrder(R), orderForm(RW), 
invoice(RW), invoiceCreated(RW), paymentOK(R), paymentEvidence(R), 
updateRecordOK(RW), startDelivery3(RW); 
1.9.5 VIPConfirmingSystem customerID(R), customerRecord(R), promoteToVIP(RW) 
1.10 } 
 
1.11 associationPermissions{ /* This block defines permissions within associations. */ 
 
1.11.1 assoFriendsCustomer { /* define the permissions within the association 
“assoFriendsCustomer” */ 
 
1.11.1.1 customer toBuyAnItem(R), itemToBuy(RW), customerID(R), inquiry(RW), 
priceDiscounted(R), discountedItemPrice(R), orderItem(RW), buyNumber(RW), 
decideToBuy(RW), makeFriendsCustomer(RW), breakFriendsCustomer(RW), 
invoiceCreated(R), invoice(R), paymentEvidence(RW), paymentOK(RW), 
updateRecordOK(R), supplementary(R), extraSupplementary(R), 
supplementaryItem(RW), supplementarySelected(RW), startDelivery1(RW); 
1.11.2 } 
 
1.11.3 assoFriendsVIP { /* define the permissions within the association “assoFriendsVIP” */ 
 
1.11.3.1 VIP toBuyAnItem(R), itemToBuy(RW), customerID(R), inquiry(RW), 
priceDiscounted(R), discountedItemPrice(R), orderItem(RW), buyNumber(RW), 
decideToBuy(RW), makeFriendsVIP(RW), breakFriendsVIP(RW), invoiceCreated(R), 
invoice(R), paymentEvidence(RW), paymentOK(RW), updateRecordOK(R), 
supplementary(R), extraSupplementary(R), ultraSupplementary(R), 
supplementaryItem(RW), supplementarySelected(RW), startDelivery2(RW); 
1.11.4 } 
1.12 } 
 
1.13 DACT { /* Event-driven actions for managing dynamic role switching and role associations. */ 
 
1.13.1 on promoteToVIP{ // dynamic role switching 
1.13.1.1 switchRole(customer, VIP); 
1.13.1.2 set beVIP(E); /* set the event “beVIP” to “TRUE” */ 
1.13.2 } 
 
1.13.3 on makeFriendsCustomer { /* role association management */ 
1.13.3.1 addAssociation assoFriendsCustomer; 
1.13.4 } 
 
1.13.5 on makeFriendsVIP { /* role association management */ 
1.13.5.1 addAssociation assoFriendsVIP; 
1.13.6 } 
 
1.13.7 on breakFriendsCustomer { /* role association management */ 
1.13.7.1 removeAssociation assoFriendsCustomer; 
