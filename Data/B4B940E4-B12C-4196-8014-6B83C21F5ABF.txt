行政院國家科學委員會專題研究計畫成果報告
多目標進化演算法之分析與應用 (I)
計畫編號: NSC 94-2213-E-011-086-
執行期限: 94年08月01日至95年07月31日
主持人:陳維美 台灣科技大學電子工程系
計畫參與人員:鄭賀元,張智凱
中文摘要
本研究計劃的是針對處理多目標最佳化問題的進化演算法 (multiobjective evolutionary algorithms)及相關結
構, 完整詳盡地分析其機率性能。 主要目的是希望藉由精確探討此類演算法於不同多目標最佳化問題下的隨機
行為,藉此對基本性能的初步了解,精確刻劃其隨機效率的整體表現,並提高演算法實際應用之效率。
Abstract
This project aims at a systematic probabilistic study of a class of multiobjective evolutionary algorithms
and related structures. The main purpose of this project is to give a more precise analysis of the stochastic
behaviors of related algorithms for getting the whole picture of these algorithms. Combining the observa-
tions gained by theoretical and practical studies, we will plan to improve the performance of algorithms
for various applications.
Keywords: multiobjective optimization, Pareto front, Pareto optimality, evolutionary algorithm, random-
ized algorithm, probabilistic analysis of algorithm
1 Purposes
Multiobjective optimization (MO) is the study to seek the solutions of problems involve simultaneous op-
timization of multiple conflicting objectives. It is investigated in diverse areas including computer science,
engineering, econmics, finance, physics, chemistry and many others. Among many powerful determin-
istic and stochastic techniques for solving MO problems, evolutionary algorithm (EA, also evolutionary
computation) [1, 2, 13, 14] is demonstrated to be very suited for difficult multiobjective problems because
they process a set of solutions in parallel by exploiting similarities of solutions by recombination [16, 18].
Multiobjective evolutionary algorithms (MOEAs) provide a popular approach for multiobjective op-
timization by repeatedly finding nondominated solutions based on biological evolutionary mechanisms.
To avoid the computational costs of maintaining all nondominated sets, several researches suggest an
elite archive with limited size to store the truncated nondominated sets [20, 21, 28]. However, restricting
the size of archive reduces the quality of solutions, such as shrinking and retreating the estimated Pareto
fronts; see [15]. Therefore, efficient storages and algorithms are studied to lessen the computations in an
unconstrained elite archive [15, 19, 24, 26]. But, all the existing data structures perform well for large
low-dimensional samples (with dimensionality < 4) while there still are some inherent limits in higher
dimensional datasets respectively.
We are concerned in this project with simple, practical algorithms for finding the nondominated points
2
Table 1: Average number of comparisons per element (by simulations) when the input points are taken
uniformly at random from [0,1]d for d= 6
n list marked 2 phase d-tree quadtree
102 158.05 86.48 147.30 118.37 2723.19
103 497.51 176.04 252.05 337.01 4761.84
104 838.98 220.15 295.75 576.47 4981.45
105 880.81 204.75 286.40 686.36 4089.97
106 673.30 166.27 266.27 682.14 2965.53
Bookkeeping. Tree structures are proposed to store the maxima [24, 26] for large point sets. Among the
related algorithms, searching and updating operations are the major costs to contain maxima according the
tree property. To accelerate the process, we record the bounds of subtrees with respect to each node for
filtering out points prior to further computation.
Denote ur = (u0,u1, . . . ,ud−1) as the upper bound of the subtree rooted at r where ui is the maximum
among all the ith components of points in the subtree rooted r vr = (v0,v1, . . . ,vd−1) as the lower bound
of the subtree rooted at r where vi is the minimum among all the ith components of points in the subtree
rooted r. If a point p is not dominated by ur, we have that p is not dominated by all points in the subtree
rooted at r. Then all computations between p and all points in the subtree rooted at r can be eliminated.
There is a similar property concluded by the relation between vr and p. Though it needs extra comparison
and spaces for the bounds, the performance is improved.
Comparisons. Finally we present the performance of the following algorithms on Tables 1-3:
• list: Algorithm SEQUENTIAL is implemented on a linear list [6].
• marked: Algorithm SEQUENTIAL is implemented on a k-d tree while the deletion operation is
replaced as a marked operation which just marked the deleted node to avoid a lot of complex opera-
tions.
• 2 phase: The two-phase heuristic is simulated on a k-d tree.
• d-tree: Algorithm SEQUENTIAL is implemented on the tree suggested by [26].
• quadtree: Algorithm SEQUENTIAL is implemented on a quadtree.
Though linear lists are suitable for the maxima problem of low-dimensional points (d ≤ 4), Table 3
shows that the situation is changed when the number of maxima increases. Meanwhile, according Table
1 and Table 2, when d > 5 or even greater, the ”marked”, ”2 phase” cases perform very well. Note that
these three algorithms is still very efficient for large datasets of high-dimensional points as shown in Table
2.
3 Self-evaluation of the results
Several new algorithms are devised for the nondominance problem of in multiobjective optimization. The
underlying design paradigms of the algorithms are very simple and easily modified for practical needs.
We also compare the efficiency of the algorithms with a few major algorithms used in practice.
4
