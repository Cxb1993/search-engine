 Delegation is a kind of temporary authorization 
between users, and is important for WfMS because 
flawed delegation mechanism may seriously endanger 
security of WfMS. On the basis Role-based Access 
Control (RBAC), we develop a series of delegation 
patterns which benefits evaluating the delegation 
capability of a WfMS. Besides, signatures responsible 
for various significant purposes in WfMS such as 
authentication, authorization, etc. The dependencies 
between signatures are complex, and make modeling of 
signature workflows time consuming and error-prone. 
In this project, we first construct signature 
patterns on the basis of BPMN for use. During the 
process design, the designer may gradually fills the 
properties about signature transactions into the 
patterns and finally produce the signature process 
which is just fit their requirements. With the 
patterns, the design efforts and the semantic errors 
in modeling signature workflows can be reduced. 
 
英文關鍵詞： workflow, WfMS, workflow patterns, BPMN, delegation, 
signature workflow, transaction 
 
 2 
 
摘要 
在工作流程管理技術日趨成熟的今日，將工作流程管理中的最佳實行經驗萃取為工
作流程樣式是一件重要而無可避免的工作，van der Aalst 與 Russel 等工作流程研究的先
鋒，在這項工作上投注了許多心力，他們分別在控制流、資料、資源以及例外處理等層
面描述了許多工作流程樣式，這些樣式提供工作流程管理系統開發的指引以及評估的依
據，同時在工作流程的開發過程中，提供了設計者之間溝通以及流程再利用的基礎，本
計畫在 van der Aalst 與 Russel 的研究基礎上，更進一步針對工作流程系統中代理以及簽
核的行為進行研究，描述其工作流程樣式，並且研究其開發流程與建構方法，獲致相當
成果。 
代理是在使用者之間，針對權限以及工作的一種授權行為，隨著工作流程系統依據
之工作流程模型的差異，代理行為在不同的工作流程系統間也有許多不同的分歧，本計
畫以目前最為流行的角色為基存取控制管理模型為基礎，針對可能的代理行為描述了一
系列的工作流程樣式。此外，在工作流程中的驗證或是授權等各種重要的程序中，簽核
都扮演了一個很重要的角色。簽核之間經常存在著很複雜的依賴關係，在本計畫中，我
我們以 BPMN，一個業界普遍使用的工作流程定義標準，建構可供流程設計者使用的簽
核流程樣式，流程設計者可以在流程設計的過程中，逐步地利用我們所研究開發的交易
塑模方法將交易流程的屬性加入簽核活動中，最後流程設計者將這些具有 BPMN 交易
屬性的簽核活動嵌入簽核流程樣式以產生正確的簽核流程。 
關鍵字：工作流程、工作流程管理、工作流程樣式、角色為基的存取控制、代理、
代理樣式、商業流程模型符號，簽核流程，簽核樣式，交易流程 
 4 
 
Contents 
摘要 ............................................................................................................................................2 
Abstract.......................................................................................................................................3 
Contents ......................................................................................................................................4 
List of Tables ..............................................................................................................................5 
List of Figures.............................................................................................................................6 
1. Introduction .......................................................................................................................7 
2. Delegation Patterns in Workflow System.........................................................................9 
2.1 Background .....................................................................................................................9 
2.1.1 Workflow Model ............................................................................................................9 
2.1.2 Delegation in Role-based Access Control Model .........................................................10 
2.2 Basic Delegation Patterns..............................................................................................12 
2.2.1 User-to-User delegation patterns...................................................................................12 
2.2.2 Role-to-Role delegation patterns...................................................................................16 
2.2.3 User-to-Role delegation patterns...................................................................................18 
2.3 Advanced Patterns.........................................................................................................20 
2.4 Discussions....................................................................................................................24 
3. Signature Patterns in Workflow System .........................................................................26 
3.1 Background ...................................................................................................................26 
3.1.1 Signature Workflow ......................................................................................................26 
3.1.2 The Relationship between Transaction and Signature Workflow.................................27 
3.1.3 Overview of BPMN ......................................................................................................28 
3.1.3.1 BPMN Sub-Models ..........................................................................28 
3.1.3.2 BPMN Elements ...............................................................................29 
3.1.3.3 Execution Semantics of Transaction in BPMN................................31 
3.1.4 The Elements of BPMN Signature Patterns..................................................................33 
3.2 BPMN Signature Patterns .............................................................................................33 
3.2.1 Basic Components for Describing Signature Patterns ..................................................34 
3.2.1.1 The Format for Signature Patterns....................................................34 
3.2.1.2 Basic Structure of Signature Workflow for a Participant.................34 
3.2.2 Sequential Category ......................................................................................................35 
3.2.2.1 Sequential Signature Pattern.............................................................36 
3.2.2.2 Jump Signature Pattern.....................................................................39 
3.2.2.3 Return Signature Pattern...................................................................41 
3.2.3 Parallel Category ..........................................................................................................43 
3.2.3.1 Static Countersignature Pattern ........................................................44 
3.2.3.2 Dynamic Countersignature Pattern...................................................46 
3.2.3.3 Additional Countersignature Pattern ................................................48 
3.3 Transaction Modulation Method...................................................................................50 
3.3.1 Details of our Transaction Modulation Method............................................................51 
3.3.2 An Example of Adopting Transaction Modulation Method .........................................58 
4. Self Evaluation ................................................................................................................60 
Reference ..........................................................................................................................61 
 6 
 
List of Figures 
Figure 1 A sample role hierarchy and the user-role assignment ..............................................13 
Figure 2 The Execution Semantics of Transaction in BPMN [12]...........................................32 
Figure 3 The Core Subset of BPMN Elements ........................................................................33 
Figure 4 Basic Structure of Signature Workflow for a Participant, BSP .................................35 
Figure 5 A Sequential Signature...............................................................................................36 
Figure 6 A Jump Signature.......................................................................................................39 
Figure 7 A Return Signature.....................................................................................................42 
Figure 8 A Static Countersignature ..........................................................................................44 
Figure 9 A Dynamic Countersignature.....................................................................................46 
Figure 10 An Additional Countersignature ..............................................................................48 
Figure 11 A BPMN Transaction for Travel Booking...............................................................51 
Figure 12 The Initial State of an Example................................................................................58 
Figure 13 The Example of Transforming a Process into a Transaction ...................................58 
Figure 14 The Example of Adding Cancel End Events............................................................59 
Figure 15 The Example of Adding Compensation Handlers ...................................................59 
Figure 16 The Example of Adding Static Event Subprocesses ................................................60 
Figure 17 The Example of Adding Dynamic Event Subprocesses ..........................................60 
 
 8 
 
defines and manages the execution of workflows through the use of software [14]. A 
signature on a document is a piece of data asserting that a named participant agrees with the 
content of the document at a workflow [22]. Signatures in different workflows are used for 
significant purposes such as authentication, authorization, etc [22][24][22]. The signatures in 
enterprises are operated and managed through signature workflows. Modeling signature 
workflows helps understanding of the signature systems and reduces the communication 
costs between the system developers. Signatures workflows can be sequential or parallel 
executed, and the dependencies between them make management of signature workflows 
quite complex. Modeling of signature workflows is thus error-prone and highly costed.  
In this project, as for the delegation study, the delegation methodologies in the related 
studies for workflow systems are carefully reviewed. Then, the patterns for delegation are 
extracted in basis of delegator, delegatee and subject to be delegated. With three basic classes, 
user-to-user delegation, role-to-role delegation, and user-to-role delegation, eleven basic 
delegation patterns are established. Besides, seven advanced delegation patterns which are 
composed of several basic patterns like multiple delegation and multi-level delegation [7][12] 
are also introduced. The patterns for revocation, timing constraints, etc. are also discussed. 
On the other hand, we present a methodology for construction of signature workflow in 
BPMN, a popular process definition standard. We describe six signature patterns which is 
helpful in development of signature workflows. Designers first develop the processes of 
participants in a signature workflow by adopting the patterns without non-signature functions. 
Then, Transaction Modulation (TM) method can be adopted to transform BPMN processes 
into BPMN transactions. Finally, designers fill all the atomic signature activities inside the 
signature pattern to generate the final signature workflow. Our methodology helps develop 
the signature workflow through pattern reuse and consideration with BPMN.  
The rest of the report is organized as follows. Section 2 describes our study result in 
delegation patterns and section 3 presents the whole methodology about adopting signature 
 10 
 
[18], according to Goh’s study, tasks are assigned to appropriate roles independently of the 
authority structure, and are not inherited by senior roles. In [13], Oh refined the concept of 
role hierarchies by making only inheritable tasks and privileges being inherited among the 
role hierarchies. 
A work item represents the work to be processed in the context of a task within a process 
instance [14]. Work items can be viewed as the instances of tasks, and in this paper, we use 
the term task instances to represent work items. Task instances are the basic units of daily 
works of users. After a task instance is instantiated, it is offered to a role according to its 
parent task, and is then allocated to one of the users playing the role. Users execute task 
instances in their work list and submit them when they are completed. When a task instance 
can not be completed before the time out, it fails. 
2.1.2 Delegation in Role-based Access Control Model 
A delegation is primarily composed of a delegator, a delegatee and a subject to be 
delegated. The delegator delegates the subject, and the delegatee receives it. A delegation is 
often issued by the delegator, but in some circumstances, a delegation can also be issued by 
the organization administrator or the workflow system. 
Based on RBAC96 [15], RBDM0 [12] provides a flexible way for granting and revoking 
roles between delegators and delegatees. RBDM1 [5], an extension of RBDM0, is more 
realistic since it organizes the roles with hierarchy instead of the flat model in [12]. The role 
hierarchy is usually modeled with directed acyclic graph (DAG) and indicates inheritance 
relationships among roles to reflect the organization lines of authority or responsibility. In [5], 
multi-level delegation, so-called multi-step delegation, is discussed. After receiving a 
delegation, the delegatee may further grant the subject to others. 
In [7], Wainer considered user-to-user delegation. The essence of Wainer’s delegation 
model is that a user delegates a particular right to another user. Nevertheless, unlike RBDM1, 
 12 
 
role-to-role 
delegation N N Y Y Y Y 
temporary role N N N Y Y N 
delegate roles Y Y Y Y Y Y 
delegate 
permissions N N Y Y Y Y 
delegate rights 
to delegate N N Y N Y N 
multi-level 
delegation Y Y Y Y Y Y 
grant 
delegation Y Y Y Y Y Y 
transfer 
delegation N N N N N Y 
revocation Y Y Y Y Y Y 
2.2 Basic Delegation Patterns 
In this section, we discuss the delegation patterns of workflows from several aspects of 
delegation. Figure 1 shows a sample role hierarchy and the user-role assignments used to help 
explain our patterns. From section 2.2.1 to 2.2.3, the user-to-user, role-to-role, and 
user-to-role delegation patterns are introduced. The delegation from a role to a user is similar 
to temporarily altering of user-role assignment, and is neglected in this paper. 
2.2.1 User-to-User delegation patterns 
User-to-user delegation is the delegation mechanism discussed most among varieties of 
studies[4][5][7][11][13][19]. For example, RBDM1[5] addresses role delegation among 
users during run-time. Based on different subjects to be delegated, the user-to-user delegation 
can be categorized into four distinct patterns as follows: 
 14 
 
allocated to one user to another. According to enterprise’s policy, the workflow system 
may automatically issue a delegation emergent task instances when necessary. 
Re-allocation of task instances can be viewed as transferring task instances 
between users. However, grant operation can still be adopted in P1 with the system 
allowing task instances being executed concurrently. When grant operation is adopted, 
the delegated task instance is duplicated to the delegatee’s work list, and both the 
delegator and the delegatee have copies of the instance.  
P2. Delegation of roles between users 
Description: 
The ability to delegate a user’s role to another user. 
Example: 
To relieve his own burden, Bob delegates the role Chief Engineer to Chris. 
Explanation: 
When a user delegates a role to the delegatee user, the role can be played by the 
latter [5]. In the example, Chris can act in the role Chief Engineer originally played by 
Bob during delegation. During delegation, Chris has all the permissions of Chief 
Engineer and executes the task instances offering to Chief Engineer. The transfer 
operation is adopted in this pattern if the delegator does not play the delegating role 
during delegation; otherwise, the grant operation is used. 
P3. Delegation of permissions between users 
Description: 
The ability to authorize individual permissions possessed by one user to another user. 
 16 
 
delegation manually or the system can automatically delegate appropriate roles or 
permissions from the delegator to the delegatee. 
2.2.2 Role-to-Role delegation patterns 
Besides delegating roles and permissions between users, delegation may happen 
between roles. In [7], [8]. [11], and [19], delegating roles and permissions between roles is 
allowed. The patterns about role-to-role delegation are discussed in this section. 
P5.  Delegation of roles between roles 
Description: 
The ability to assign a role to another role. 
Example: 
General Manager Alex will temporarily absent from his duty because of 
hospitalization. The organization administrator decides the Vice Manager should take 
responsibility of the General Manager’s duty, and therefore the role General Manager is 
re-assigned to the role Vice Manager.  
Explanation: 
In the example, transfer operation is adopted, General Manager is not functional, 
and Vice Manager takes all its responsibilities during the delegation. The tasks and 
permissions owned by General Manager are re-assigned to Vice Manager, and the task 
instances related to General Manager are offered to Vice Manager. The users playing 
Vice Manager can act in the role General Manager during the delegation. 
Grant operation can also be adopted in this pattern. The organization administrator 
may duplicate the duties of the delegator role to the delegatee role if necessary. 
 18 
 
pattern.  
2.2.3 User-to-Role delegation patterns 
A role can be viewed as a group of users with similar responsibilities, and a delegator 
may delegate subjects to a role rather than a single user. The patterns for user-to-role 
delegation are described as follows: 
P8. Delegation of task instances from user to role 
Description:  
The ability to re-offer a task instance in a user’s work list to a role. 
Example: 
Before going on a leave, Helen passed all of her unfinished task instances to 
Assistant Accountant. 
Explanation: 
The difference between P8 and P1 is that in this pattern, the delegatee user is not 
determined. The delegator user delegates his task instance to some role, and the system 
allocates the task instance to be delegated to a user playing the designated role. The task 
instance can be granted or transferred to the delegatee role according to the policies of 
the organization. 
P9. Delegation of roles from user to role 
Description: 
The ability to assign a user’s role to another role. 
Example: 
 20 
 
Engineer Chris is busy in his work, and asks the system to delegate the next 
instances of task “peer review” for him to Staff . 
Explanation: 
The example is similar to the one in P4. However, the instances of “peer review” 
being allocated to Chris during delegation are re-offered to Staff. Then the instances are 
allocated to one of the users playing Staff. 
2.3 Advanced Patterns 
In this section, we introduce the advanced patterns which can be applied by the basic 
patterns described in the last section. 
P12.  Multiple-delegation 
Description:  
The ability for a delegator to delegate a subject to multiple delegatees. 
Example: 
Bob delegates the permissions of accessing the technical documents to Staff Joe and 
Staff Kate that they can survey the documents for probation. 
Explanation: 
Some subjects to be delegated can not be applied in this pattern. For example, the 
task instances that can only be executed by a single user can not be delegated to multiple 
delegatees. For certain subjects, multiple-delegation is forbidden. 
P13. Multi-level delegation 
Description: 
 22 
 
pattern can be adopted in delegation of task instances or tasks, etc. 
P15. Time-Constrained delegation patterns 
Description: 
The ability to constrain a delegation in some specified time duration. 
Example: 
(1) For the purpose of probation, Bob delegates the sub-role Engineer to Staff Joe 
from 9 am to 12 pm this Monday. 
(2) The tax bureau agents will come to check accounts in Thursday and Friday 
morning. During the periods, Assistant Accountant Irish delegates all her routine 
jobs to Staff Kate. 
(3) Sales Fox would go out visiting customers every Wednesday morning, and all the 
task instances allocated to him during the periods are delegated to another Sales 
Gary. 
Explanation: 
The examples represent three different timing constraints: delegation in a single 
duration, delegation in several designated durations, and delegation in periodical 
durations. In [20], [21], and [22], a series of studies about temporal model in RBAC are 
established. The periodic expressions developed in the studies can be adopted in both 
role-based delegation model and workflow system. However, the duration of a 
delegation can not go beyond the effective duration of the participating task instances, 
roles or permissions involving the delegation. 
 24 
 
enforces revoking an expired delegation. For a delegation with multiple or periodical 
delegating durations, the system enables it during the delegation periods, and revokes the 
delegation when out of the duration.  
P18. Cascading Revocation 
Description: 
The ability to revoke a multi-level delegation. 
Example: 
After coming back to the company, Chief Accountant Helen revokes the task 
instances that are further delegated by Irish in the example of P15. 
Explanation: 
The example shows the cascading revocation issued by the original delegator, and 
the cascading revocation might also be issued by one of the middle delegators in a 
multi-level delegation. Barka claims that cascading revocation is allowed in RBDM1 [7]. 
Based on [5], cascading revocation for RBDM is discussed particularly in [7], [8], and 
[19]. 
2.4 Discussions 
With the patterns introduced in above sections, we conclude the patterns supported in, 
[5], [7], [8], [11], [12], and [19]. in the following table. 
Table 2 The patterns supported in delegation studies. 
Delegation Model Supported Patterns 
RBDM0 [12] P2, P12, P13, P15, P16 
 26 
 
3. Signature Patterns in Workflow System 
3.1 Background 
3.1.1 Signature Workflow 
A signature workflow, as the document circulation described in [25], involves multiple 
participants in several signature activities to sign on the document so that the document is 
associated with necessary authentication signatures finally. A document in a signature 
workflow is called an s-document. In a signature workflow, an s-document might be reviewed 
in more than one participant concurrently, and the s-document in each of the participants is 
called an mv-s-document. A signature activity associated with one participant only is deemed 
as an atomic activity, i.e. its tasks are not necessary to be separated further. An atomic 
signature activity (ASA) contains the following tasks in sequence:  
1. The participant initializes an s-document. 
2. The participant verifies the authenticity of the former signature(s) on the s-document and 
reviews the content of the s-document. 
3. The participant does the predefined works. 
4. The participant signs on the s-document. 
5. The participant sends the s-document to the following ASAs according to workflow. 
The tasks of an ASA are different according to various participants. Participants in a 
signature workflow are classified into originator, reviewer and approver. In a signature 
workflow, the originator executes the first ASA without the second step. Each ASA executed 
by reviewers includes step 2 to step 5. The last ASA executed by the approver includes step 2 
 28 
 
(3) Isolation: A transaction is not influenced by another concurrent transaction. 
(4) Durability: A successful transaction makes the state change permanently. 
Transaction support for workflows is not restricted to follow the ACID properties [25]. 
Workflow transactions leverage the traditional transaction mechanisms for recovery and 
concurrency control and address more coordination requirements [25]. Therefore, besides 
ACID transactions, compensation-based transactions providing are available in WfMS [25]. 
Compensation is an action undoing the completed activities for keeping the consistency of the 
process. Compensation-based transaction provides a mechanism to compensate completed 
transaction for long-running processes.  
ASAs are viewed as a kind of compensation-based transaction and the whole tasks in an 
ASA is considered as a kind of ACID transaction. When a participant executes the tasks in an 
ASA, the ASA should follow the properties of ACID transaction. On the other hand, a 
signature workflow is considered a long-running process if it involves multiple participants. 
When the approver rejects an s-document, the originator or one of the reviewers needs to 
revise the s-document and the corresponding relevant compensation activities are executed. 
The compensation activities keep the consistency of the entire signature workflow. 
3.1.3 Overview of BPMN 
BPMN [25] provides a graphical notation to create a standardized bridge between the 
design and the implementation of business processes. Modeling business process diagram 
with the rich notations of BPMN increases the ability of communication between 
organizations. BPMN is derived from flowcharting techniques and comprises three basic 
types of sub-models and five basic categories of elements. 
3.1.3.1 BPMN Sub-Models 
The BPMN sub-models are classified into three basic types: processes, collaboration and 
 30 
 
a. Events affect the flow of the process and usually have a cause or an impact. There 
are three types of events defined in BPMN: start, intermediate, and end events. 
b. Activities are works being performed. An activity can be atomic or non-atomic 
(compound), which is represented by task and subprocess accordingly. BPMN 
further categorizes subprocesses into five main types: embedded subprocess, 
reusable subprocess, event subprocess, transaction, ad-hoc subprocess; and 
classifies tasks into seven main types: send, receive, service, user, manual, script, 
business rule tasks. 
c. Gateways are used to control the behaviors of divergence and convergence of the 
flows with a process. BPMN predefines four types of gateways: exclusive, 
inclusive, complex, and parallel gateways. 
(2) Data is used to represent the data instance manipulated by the process. There are four 
data: data objects, data inputs, data outputs, and data stores. 
a. A data object represents a collection of information about what activities require 
to be performed and what they produce. 
b. Data inputs represent the inputs of data object to the process. 
c. Data outputs represent the outputs of data object from the process. 
d. A data stores is a graphical element to retrieve or update information that persists 
beyond the scope of the process. 
(3) Connecting objects are the connectors among the flow objects and artifacts. The 
common attributes “target” and “source” represents downstream and upstream of a 
connecting object. There are four types of connecting objects defined in BPMN: 
sequence flows, message flows, associations, and data associations. 
 32 
 
transaction in BPMN follow the concept of the transaction protocol. A transaction in BPMN 
produces three basic outcomes as Figure 2 illustrates [25]: 
(1) Successful completion: This shows a normal sequence flow leaving the transaction 
subprocess. 
(2) Fail completion (cancel): When a transaction is cancelled; the activities inside the 
transaction will be subjected to the cancellation actions, which including rolling back 
of the processes and compensation for specific activities. There are two mechanisms 
signaling the cancellation of a transaction: 
a. A cancel end event reached within the transaction. 
b. A cancel message received via the transaction protocol supporting the execution 
of the transaction. 
 
Figure 2  The Execution Semantics of Transaction in BPMN [25] 
(3) Hazard: This means that something went terribly wrong and a normal success or 
cancellation is not possible. When a hazard happens, the activity is interrupted 
without compensation and the control flow continues from the error intermediate 
event. 
 34 
 
signature patterns in WfMS with BPMN. The designer can adopt the signature patterns to fit 
the corresponding requirements of SMS and PMS. Signature workflows are modeled with 
orchestration diagram in BPMN, and the diagrams representing choreographies, 
collaborations or conversations are not discussed in our work. 
3.2.1 Basic Components for Describing Signature Patterns 
3.2.1.1 The Format for Signature Patterns 
The format of our patterns is based on the format in [20] and BPMN [25] and described 
as follows: 
(1) Name: A unified vocabulary of the pattern which increases the efficiency of the 
concept of communication. 
(2) Intent: A description of the behavior and the effectiveness of the pattern. 
(3) Applicability: An indication of what conditions for the use of the pattern. 
(4) Structure: A presentation of workflows of the pattern with BPMN. 
(5) Examples about how to use the pattern in real case. 
3.2.1.2 Basic Structure of Signature Workflow for a Participant 
In the thesis, a BPMN signature pattern is composed of several Structures of Signature 
Workflow for a Participant (SP). Besides, all the SPs are derived from the Basic Structure of 
Signature Workflow for a Participant (BSP). As Figure 4 illustrates, a BSP is composed of an 
ASA, several control structures, and a participant in the corresponding signature workflow. 
Region (A) represents the entry point of the BSP, the entry point a participant starts executing 
an ASA. When an ASA is successfully executed, the BSP is directed to the path leading to 
region (B), and region (C) otherwise. 
 36 
 
3.2.2.1 Sequential Signature Pattern 
The simplest signature workflow is composed of sequential participants. The process 
can be named as Sequential Signature pattern, and its pattern is shown below. 
 
Figure 5 A Sequential Signature 
Name:  
 38 
 
approved by Ri-1 (or the originator if i = 1) is passed to Ri, and then passed to Ri+1 (or 
the approver if i = N) if Ri executes his ASA successfully. When the execution of Ri’s 
ASA fails, the s-document is returned to the originator for rebooting. The returning 
flow, notated as the cancellation path, includes a series of undo event(s) from Ri-1, 
Ri-2, ..., R1 and the originator. To keep the consistency, the order of undo events 
original is arranged in reverse order of execution before the s-document is returned. 
(3) ASP is similar to RSPk, k = N + 1. After the approver executes his ASA successfully, it 
indicates that the signature workflow succeeds. 
Examples: 
The first example is that when a clerk of the bank completes a withdrawal job about large 
amounts of cash, a document associated with the details of the withdrawal job needs to be 
reviewed by the assistant manager. As soon as the document is approved by the assistant 
manager, it is sent to the manager for the final approval. 
 40 
 
Name:  
Jump Signature 
Intent:  
This pattern is derived from Sequential Signature pattern. When an emergency occurs in a 
signature workflow, to reduce the signature workflow, the s-document agreement can be 
completed by key reviewer(s). In other words, the paths of document transfer allow the ASAs 
of the trivial reviewer(s) being skipped for emergency. If any key reviewer(s) disapproves the 
content of the s-document, the ASAs of the originator and only the previous key reviewer(s) are 
compensated. Especially, when all the reviewers, whose ASA’s execution time is long, can be 
treated as trivial reviewers, the pattern can be applied to speed up the process for emergency.  
Applicability:  
This pattern is useful for the signature workflows where the significance of each job is 
various among different cases. 
Structure:  
As Figure 6 illustrates, Jump Signature pattern is constructed on the basis of Sequential 
Signature pattern. OSP contains an extra exclusive gateway behind its ASA to check whether 
the next reviewer is skipped. If it is true, the s-document is sent to the similar extra exclusive 
gateway of next reviewer to see it is skipped, too.  Such an extra exclusive gateway is put at the 
same location for RSPi, 1 <= i <= N, so that it can work the same function after completing its 
ASA. However, the exclusive gateway in RSPN directs the process to ASP because the approver 
cannot be skipped. Though Ri’s, 1 <= i <= N, cancellation path includes a series of undo 
event(s), only the undo event(s) of the previous key reviewer(s) and the originator works when 
the execution of Ri’s ASA fails. 
 42 
 
 
Figure 7 A Return Signature 
Structure:  
As Figure 7 illustrates, Return Signature pattern is similar to Sequential Signature pattern. 
In RSPi, 1 <= i <= N, an exclusive gateway is added between two continuous undo events in the 
cancellation path. The extra exclusive gateways are responsible to choose one of the previous 
reviewers to send back the rejected s-document. When Rj, 0 < j < i, is chosen to receive the 
s-document, a pair of redo events named “redo Rj” leads the signature workflow to RSPj. 
Before sending back the s-document to Rj, the ASAs completed by Rj to Ri-1 are compensated in 
 44 
 
3.2.3.1 Static Countersignature Pattern 
The simplest parallel signature workflow is to let the reviewer keep in the process. The 
process can be named as Static Countersignature pattern, and its pattern is shown below. 
 
Figure 8 A Static Countersignature 
Name:  
 46 
 
3.2.3.2 Dynamic Countersignature Pattern 
A parallel process can be more complicated. For example, it allows the originator to 
select the reviewers from all followed to approve their work after the originator’s ASA is 
completed. The selection at the end of its ASA occurs at the originator’s first turn or each of 
its redo action. Such a process can be implemented according to Dynamic Countersignature 
pattern shown below. 
 
Figure 9 A Dynamic Countersignature 
Name:  
 48 
 
3.2.3.3 Additional Countersignature Pattern 
A more complicated case is that the system allows a reviewer to ask another reviewer to 
approve the corresponding review after his approval. The target reviewer of each one is 
selected during program execution. The following pattern, Additional Countersignature 
pattern, contains a sample structure. 
 
Figure 10 An Additional Countersignature 
 50 
 
i  j, to direct the flow to RSPj if Ri invokes Rj to approve the mv-s-document. 
Examples:  
The HR department, the accounting department, and the risk management department are 
the potential reviewers of investment application. When the investment department proposes an 
application associated with investments, they decide that the HR department and the accounting 
department should review the application. If HR department cannot distinguish whether the 
application may bring damages, it can request the risk management department as an additional 
reviewer. If the damage is simple and can be decided by HR department, such a request is not 
needed. Additional Countersignature pattern works for this case. 
3.3 Transaction Modulation Method 
BPMN signature patterns can help to design signature workflows in WfMS, by 
simplifying the consideration of relationships between ASAs in a signature workflow. 
However, modeling the ASAs with BPMN transaction is an annoying task for the designers 
because they need to add extra notations to present the completed meanings of BPMN 
transaction. 
For example, Figure 11 indicates an example with BPMN for travel booking. The 
designer needs to model two cancel end events and two compensation handlers because a 
booking transaction allows the traveler to cancel the reserved flight or hotel before it 
completes. The rules of BPMN itself make the introduction of these events and handlers to be 
annoying when modeling the transactions, so that a designer may forget part of the works. To 
reduce the works of modeling transactions, we propose TM method to help the designer to 
transform BPMN processes defined into BPMN transactions. Besides, our works are focused 
on well-formed core BPMN processes [30][31] only. 
 52 
 
event. 
(5) Add an independent error event subprocess and an independent compensation event 
subprocess to indicate the compensation event for each activity in each transaction. 
The compensation events are given in the reverse order of the activities; each split and 
merged flow in the compensation flows is connected with a parallel gateway. The end 
of the error event subprocess throws an error end event and the end of the 
compensation event subprocess throws a none end event. 
The first step of the method is to transform a BPMN process defined into a BPMN 
transaction because the activities of the process are atomic. The transformed transaction is 
viewed as an ACID transaction. To improve the capability of event handling of the 
transaction, an error and a cancel intermediate event are attached to the boundary of the 
transaction after the transformation is completed. 
The next step of the method is to add cancel end events to the transaction because the 
transaction allows the participant to cancel its execution. When a cancel end event is thrown 
from a transaction, the execution of transaction is interrupted. Besides, the completed 
activities of the transaction are compensated and the incomplete ones are rollback. To allow 
the participant to cancel the transaction at any time, an exclusive gateway and a cancel end 
event are appended to each sequence flow in the transaction to check whether the cancel end 
event is thrown or not. 
The third step of the method is to add a compensation handler for each activity in the 
transaction. A compensation handler is responsible to compensate the original activity when 
catching the compensation event [25]. The compensation handler of each activity in the 
transaction makes the compensation process of the transaction to be clearer. Therefore, such a 
compensation handler is appended to each activity in the transaction in our method. Table 4.1 
presents the rules of the step according to original activities. 
 54 
 
(5) Transaction 
Table 3 shows that a compensation handler is appended to the original activity except for 
the rule (4) because it is added already in previous step. In rule (3) and (5), the compensation 
handler is appended to an event handler besides the original activity. 
The fourth step adds two event subprocesses in the transaction for improving the 
capability of event handling of the transaction. These two processes are of predefined 
structure and defined as: 
(1) The timer event subprocess, responsible to direct the process to the error handling 
flow, defined in the next step, when the transaction is time-out.  
(2) The conditional event subprocess, canceling the execution of the activities in the 
transaction when an interrupted event occurs outside of the transaction. For example, 
when the other parallel ASA is canceled, an interrupted event is thrown away. 
The last step adds two additional event subprocesses in the transaction. The activities 
and their flow inside both subprocesses are defined based on the workflow in the transaction, 
furthermore: 
(1) The error event subprocess, responsible to invoke a series of compensation 
activities when a hazard occurs in the transaction. After the compensation is 
completed, the event subprocess generates an error event to direct the flow to the 
 56 
 
(3) XOR-Join 
 
 
(4) 
AND-Split 
 
 
(5) AND-Join 
 
 
(6) OR-Split 
 
 
 58 
 
2. Split flows: In rule (3), (5) and (7), when the flows of activities are merged, the split 
compensation flows are constructed.  
3. Merged flows: In the rule (2), (4), (6), (8) and (9), the compensation flows are 
merged because the flows of activities are diverged. 
3.3.2 An Example of Adopting Transaction Modulation Method 
To illustrate each step of the method, we provide an example adopting the method. 
Figure 12 depicts the initial state of the example including a start event, an end event and two 
tasks sequentially executed. 
 
Figure 12 The Initial State of an Example 
The first step of the method is to transform a process into a transaction. As in Figure 13, 
the transformed transaction is an ACID transaction, i.e. Task1 and Task2 in the transaction are 
not separated further. 
 
Figure 13 The Example of Transforming a Process into a Transaction 
The second step is to append an exclusive gateway and a cancel end event to each 
sequence flow. As in Figure 14, three cancel end events and exclusive gateways are appended 
 60 
 
 
Figure 16  The Example of Adding Static Event Subprocesses 
The final step is to add two dynamic event subprocesses to the transaction. Figure 17 
shows the compensation events inside the two event subprocesses are in reverse of Task1 and 
Task2. Therefore, the event / compensation handler can be performed in correct order. 
 
Figure 17  The Example of Adding Dynamic Event Subprocesses 
4. Self Evaluation 
The primary objective of this project is to dig out the best practices in WfMS as 
workflow patterns. Two important domains in workflow management, delegation and 
 62 
 
symposium on Access control models and technologies, pp. 91-100, 2006 
[9] M. Nyanchama, S. Osborn, "The Role Graph Model and Conflict of Interest," in ACM 
Transactions on Information and System Security, Vol. 2, No. 1, pp. 3-33 1999 
[10] D. Ferraiolo and R. Kuhn, “Role-based Access Controls,” in the proceedings of the 15th 
National Computer Security Conference, Vol. 2, pp 554-563, 1992. 
[11] X. Zhang, S. Oh, and R, Sandhu, “PBDM: A Flexible Delegation Model in RBAC,” in 
the Proceedings of the 8th ACM symposium on Access Control Models and Technologies, 
2003, pp. 149-157 
[12] E. Barka and R. Sandhu, “A role-based delegation model and some extensions,” in the 
Proceedings if the 23rd National information Systems Security Conference, October 2000 
[13] S. Oh and S. Park, "Task-role-based access control model," Information Systems, 
Volume 28, Issue 6, pp. 533-562, September 2003 
[14] WfMC, “Workflow Management Coalition Terminology & Glossary”, WFMC-TC-1011, 
1994 
[15] R. Sandhu, E. Coyne, H. Feinstein, and C. Youman, "Role-Based Access Control 
Models," in IEEE Computer 29(2): 38-47, IEEE Press, 1996. 
[16] G. Ding, J. Chen, R. Lax, and P. P. Chen, “Graph-theoretic method for merging security 
system specifications,” in Information Sciences, Vol. 177, Issue 10, pp. 2152-2166, May 
2007 
[17] W. Yao, K. Moody, and J. Bacon, “A model of OASIS role-based access control and its 
support for active security,” in the Proceedings of the 6th ACM symposium on Access 
control models and technologies, pp. 171-181, 2001 
[18] C. Goh and A. Baldwin, “Towards a more complete model of role,” In the proceedings of 
the 3rd ACM Workshop on Role-Based Access Control, pp. 55-61, 1998 
[19] J. Crampton and H. Khambhammettu, “Delegation in role-based access control,” in 
International Journal of Information Security, Vol. 7, pp. 123-136, 2008 
[20] E. Bertino, and P. A. Bonatti, “TRBAC: A Temporal Role-Based Access Control Model,” 
in ACM Transactions on Information and System Security, Vol. 4, No. 3, August 2001, 
pp. 191-223 
[21] B. Shafiq, A. Samuel, H. Ghafoor, "A GTRBAC Based System for Dynamic Workflow 
Composition and Management," in the Proceedings of International Symposium on 
Object-Oriented Real-Time Distributed Computing, May 2005, pp. 284-290 
[22] J. B. D. Joshi, E. Bertino, U. Latif, and A. Ghafoor, "Generalized Temporal Role-Based 
Access Control Model," IEEE Transaction on Knowledge and Data Engineering, Vol. 17, 
No. 1, January 2005, pp. 4 - 23. 
[23] Leung, K. R.P.H. and Hui, L. C.K., “Handling Signature Purposes in Workflow 
Systems,” Journal of Systems and Software, vol. 55, no. 3, pp. 245-259, Jan, 2001. 
[24] Leung, K. R.P.H. and Hui, L. C.K., “Signature Management in Workflow Systems,” 
Proceedings. Twenty-Third Annual International Computer Software and Applications 
Conference, pp. 424-429, 1999. 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                  日期： 99 年 7 月 26 日 
一、參加會議經過 
本人於民國九十九年六月三日搭乘華信航空 AE987 班次飛機於早上八點三十
分由台北直飛南京，於當天早上十點二十分準時到達南京祿口機場，並順利到
達事先預定的南京大學南苑接待所，準備隔天的報告事宜。 
六月四日當天本人準時到達會場完成報到手續，在聆聽 Kinji Mori 博士的
計畫編號 NSC 97－ 2221 －E－ 009 － 063 － MY3 
計畫名稱 一個軟體工作流程樣式的分析、建置與整合之研究 
出國人員姓名 許 懷 中 
服 務
機 構
及 職
稱 
國立交通大學資訊科學與工程
研究所 博士候選 
會議時間 
99 年 6 月 4 日 
至 
99 年 6 月 5 日 
會 議
地點 
中國, 南京 
會議名稱 
(中文) 第五屆 電子電機工程師協會 服務導向系統工程國際
研討會 
(英文) 5th IEEE International Symposium on Service-Oriented 
System Engineering (SOSE 2010) 
發表論文題目 
(中文) 一個開發情境感知普適應用的方法論 
(英文) A Methodology to Developing Context-Aware Pervasive 
Applications 
三、考察參觀活動(無是項活動者略) 
參觀南京總統府 
四、建議 
國科會對於在中國大陸舉辦的研討會在經費審查上似乎具有較之在其他區域
舉行之研討會更加嚴格的限制，然而如 SOSE 2010 這項會議，主辦者為 IEEE，
協辦者則為中國頂尖的大學如清華、復旦以及南京大學，似乎應該與其他國際
研討會具有一視同仁的審查標準。 
 
五、攜回資料名稱及內容 
SOSE 2010 議程以及發表論文全本 
六、其他 
Citation of the published paper: 
Hwai-Jung Hsu, Shang-Yu Wu, and Feng-Jian Wang, "A Methodology to Developing 
Context-Aware Pervasive Applications," in the Proceedings of the 5th IEEE International 
Symposium on Service-Oriented System Engineering (SOSE '10), pp. 206-213, June 2010 
研討會的所有 paper session，之後本人十分榮幸地於於七月二十號早晨的開幕儀
式上，獲頒 IEEE Computer Society Outstanding Contribution Award，之後並參與
COMPSAC 從七月二十日至二十二日的全部議程，包含 keynote speaking、
reception、banquet、paper sessions 以及數個 panels，最後於七月二十三日下午搭
乘泰航 TG-635 班機由韓國仁川國際機場起飛返台。 
二、與會心得 
COMPSAC 做為計算機軟體與應用的頂級國際研討會，本年度的重點議題在
於 Computationally Smart Environments，對於智慧環境的探討，而將資訊科技以
及現實環境結合在一起的 Cyber Physical System (CPS)以及 Cybernetics Software
更是討論上的重點，與會學者分別從無線感知網路(Wireless Sensing Network)、
人工智慧(Artificial Intelligence)、綠能(Green Power)以及商務實用等不同角度，
討論智慧化環境的發展現況以及未來發展趨勢，尤其是在地球資源日漸匱乏的
現今，在注重效能的同時，降低資訊系統的能耗(power consumption)也是重要議
題，來自 Intel 的 Dr. Gustafson 甚至提出了未來資訊系統或許應該要以每瓦特能
進行多少計算作為效能評比單位的新穎說法，來強調節能在未來資訊系統發展
上的重要性。 
而既然本次會議的重要議題在於智慧化環境，無可避免地人工智能自然就是
智慧化環境中的重點，然而近年來人工智能的發展並不順利，同時由人工智能
發展出來的各種功能，也未必能符合使用者的需求，在現今軟體開發逐漸走向
國科會補助計畫衍生研發成果推廣資料表
日期:2011/12/21
國科會補助計畫
計畫名稱: 一個軟體工作流程樣式的分析、建置與整合之研究
計畫主持人: 王豐堅
計畫編號: 97-2221-E-009-063-MY3 學門領域: 程式語言與軟體工程
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
