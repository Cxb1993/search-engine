 1
行政院國家科學委員會專題研究計畫成果報告 
具有循環退化效果之單機排程問題研究 
A study on a single-machine scheduling problem 
with the cyclic process of an aging effect 
 
計 畫 編 號：NSC96-2221-E-150-059- 
執 行 期 限：96 年 8 月 1 日至 97 年 7 月 31 日 
主 持 人：楊達立 國立虎尾科技大學資訊管理系 
 
 
一、中文摘要 
在本研究中，我們考量具有循環退化效應
的單機排程問題。在生產過程中退化效應的現
象經常會發生，舉例而言當生產加工的次數累
積越多，工件刀具的磨損率增加，單一工作的
處理時間也將隨增長，導致整體生產時程延
遲。因此在適當的時機下更新刀件或維護機台
是有其必要的。適度的更新與維護將有效降低
退化效應，但在另一方面卻多出更新與維護時
間。換言之，如何藉由最佳的循環性更新與維
護次數來降低因生產所導致的退化效應是一
重要且必須考慮的決策問題。在本研究中我們
探討兩種常見的退化效應排程模式，考慮目標
在最大完工時間最小化下，分別提出相關理論
性質，並據此設計演算法，用以尋找出最佳工
作排序與維護次數。 
關鍵詞：單機排程，退化效應，最大完工時間 
 
Abstract 
In this research, we study a single-machine 
scheduling problem with the cyclic process of an 
aging effect.  An aging effect can be described 
by the following example.  Assume that some 
products need to be processed by a cutting tool.  
Because of wear of the cutting tool, the 
processing time required to execute some 
products increases with respect to the number of 
products already executed.  The time required 
for processing a single product depends on the 
quality of the cutting tool, that is, whether the 
cutting tool is new or just after some 
maintenance.  Therefore, in a normal situation, 
the cutting tool is replaced by a new one or is 
maintained by some operator after it executes 
some products.  In this situation, an aging 
effect is resumed after the quality of the cutting 
tool is restored.  This phenomenon appears in 
many realistic production processes.  Thus, it is 
important to consider the phenomenon into 
scheduling problems. We analyze the 
single-machine makespan scheduling problem 
with two different aging effect models and 
provide a polynomial time algorithm to solve 
the problem. 
Keywords: single-machine scheduling, aging 
effect, makespan 
 
二、緣由與目的 
During the last couple of years scheduling 
problems with position-dependent processing 
times have been studied in two directions. One 
 3
tool will be restored to its initial condition after 
some maintenance. Then, the aging effect 
resumes as well. Moreover, assume that the tool 
is maintained k times in a schedule. Then it 
forms a cyclic process of the aging effect. Thus, 
the normal processing time of a job is incurred if 
the job is scheduled first after some maintenance 
(or replacement). The actual processing times of 
the following jobs are more than their normal 
processing times because of the aging effect. Let 
irp  and 1, +rjp  denote the actual processing 
times of job i and job j if job i and job j are the 
rth and (r+1)th jobs from the last maintenance on, 
respectively. Thus, suppose that there is some 
maintenance on the tool just after it has 
processed r jobs since the last maintenance. In 
addition, the maintenance time required for the 
maintenance of the tool is assumed to t. Then, in 
the case of the aging effect model characterized 
by the exponential function, 
a
iir rpp =     and     jrj pp =+1,  
where a ( 0>a ) is an aging ratio (see Fig. 1).  
On the other hand, in the case of the aging 
effect model characterized by the linear 
function, 
rbpp iiir +=     and     jrj pp =+1,  
where ib ( 0≥ib ) is the corresponding aging 
ratio. 
 
Problem analysis 
We study a single-machine problem with the 
cyclic process of an aging effect. The objective 
is to minimize the makespan of all jobs. That is, 
we have to determine the frequency (k) of the 
maintenance (M) and the sequence of all jobs to 
minimize the makespan. For a certain schedule, 
let iC  represent the completion time of iJ . 
Hence, the makespan of all jobs is denoted by 
maxC . Thus, using the conventional notation, the 
problem of makespan minimization on a 
single-machine with the cyclic process of an 
aging effect is denoted by 
max/,0,/1 CkMarpp
a
jjr =>=  for the 
exponential aging effect model or 
max/,0,/1 CkMbrbpp jjjjr =>+=  for the 
linear aging effect model. 
 
Theorem 1. For the ,0,/1 >= arpp ajjr  
max/CkM = problem, if there is no maintenance 
(i.e. 0=k ), then it is optimal to sequence jobs 
in non-increasing order of their normal 
processing times ( jp ). 
Corollary 1. Let *maxC  denote the optimal 
solution of the kMarpp ajjr =>= ,0,/1  
max/C problem in which 0=k . For the 
max/,0,/1 CkMarpp
a
jjr =>=  problem, if 
tpC
n
j
j ≤−∑
=1
*
max , then there exists an optimal 
schedule in which jobs are sequenced in 
non-increasing order of their normal processing 
times ( jp ). 
 
From Corollary 1, it follows that some 
maintenance may reduce the makespan of all 
jobs for the max/,0,/1 CkMarpp
a
jjr =>=  
problem if tpC
n
j
j >−∑
=1
*
max . That is, it suffices 
to determine the frequency (k) of the 
 5
time. Next, we demonstrate the result of the 
algorithm in the following example. 
 
Example 1. Assume that 7=n , 81 =p , 
62 =p , 73 =p , 34 =p , 45 =p , 56 =p , 
97 =p  and 3=t . The aging ratio 5.0=a . 
First, we can see that the job sequence is 
4562317 JJJJJJJ →→→→→→  
according to non-increasing order of jp  (Step 
1). The makespan of the sequence without any 
maintenance is 35.73*max =C . In addition, 
335.31
7
1
*
max =>=−∑
=
tpC
j
j . Therefore, it is 
necessary to consider the maintenance into the 
schedule to reduce the makespan. Table 1 gives 
the result of algorithm 1. From Table 1, we can 
see that an optimal schedule is obtained by 
maintaining the tool three times and arranging 
jobs in the following. 
→→43421
1
67
G
JJ  M →→→ 43421
2
51
G
JJ  M 
→→→ 43421
3
43
G
JJ  M {
4
2
G
J→  
Hence, the makespan of the schedule is 
calculated as follows: 
5.0
2
5.0
4
5.0
3
5.0
5
5.0
1
5.0
6
5.0
7max )1()2()1()2()1()2()1( ptpptpptppC +++++++++=   
97.55=  
 
Extension 
The results analyzed in the above can be 
extended to the problem with the aging effect 
characterized by the linear function. The only 
different part is that jobs are sequenced in 
non-increasing order of their aging ratios ( jb ). 
Therefore, we have the following. 
Theorem 4. For the += jjr pp/1  
max/,0, CkMbrb jj =>  problem, if there is no 
maintenance (i.e. 0=k ), then it is optimal to 
sequence jobs in non-increasing order of their 
aging ratios ( jb ). 
 
Theorem 5. For the += jjr pp/1  
max/,0, CkMbrb jj =>  problem, if 0kk =  
and jobs are divided into groups 
121 00
,,...,, +kk GGGG  according to the group 
balance principle, then there exists an optimal 
schedule in which jobs are sequenced in 
non-increasing order of their aging ratios ( jb ) 
and then be arranged one by one to each group 
in turn. That is, the jobs of the sequence are 
assigned to a schedule from the first position of 
the first group to the first position of the last 
group, and then from the second position of the 
first group to the second position of the last 
group,…, and so on. 
 
Concluding remarks 
In this research, we study a single-machine 
scheduling problem with the cyclic process of an 
aging effect. This phenomenon appears in many 
realistic production processes. Thus, it is 
important to consider the phenomenon into 
scheduling problems. Here, two aging effect 
models are considered in the single-machine 
scheduling and the objective is to minimize the 
makespan. First, a group balance principle is 
introduced to analyze the problem with the 
exponential aging effect model. Then a 
polynomial time algorithm is provided to solve 
the problem. In a similar way, the problem with 
 7
5 ),( 471 JJG = , )( 12 JG = , )( 33 JG = , )( 24 JG = , )( 65 JG = , )( 56 JG =  58.24 
6 )( 71 JG = , )( 12 JG = , )( 33 JG = , )( 24 JG = , )( 65 JG = , )( 56 JG = , 
)( 47 JG =  
60 
* the makespan of the optimal schedule 
 
W-H Kuo and D-L Yang—Minimizing the makespan in a single-machine scheduling problem 417
iJ
r r+1
jJ
t aiir rpp = jrj pp =+1,t
maintenancemaintenance
.. ..
Figure 1 The cyclic process of an aging effect.
Notations and assumptions
There are n jobs to be processed on a single machine. Each
of them is available at time zero. Let pj denote the nor-
mal (sequence-independent) processing time of job j (Jj , j =
1, 2, . . . , n) in a sequence. Assume that jobs require to be
processed by some specific tool and the tool will be restored
to its initial condition after some maintenance. Then, the
aging effect resumes as well. Moreover, assume that the tool
is maintained k times in a schedule. Then it forms a cyclic
process of the aging effect. Thus, the normal processing time
of a job is incurred if the job is scheduled first after some
maintenance (or replacement). The actual processing times
of the following jobs are more than their normal processing
times because of the aging effect. Let pir and p j,r+1, respec-
tively, denote the actual processing times of job i and job j
when job i and job j are the r th and (r + 1)th jobs to be pro-
cessed from the last maintenance on. Thus, suppose that there
is some maintenance on the tool just after it has processed r
jobs since the last maintenance. In addition, the maintenance
time required for the maintenance of the tool is assumed to t.
Then, in the case of the aging effect model characterized by
the exponential function,
pir = pira and p j,r+1 = p j
where a(a > 0) is an aging ratio (see Figure 1).
On the other hand, in the case of the aging effect model
characterized by the linear function,
pir = pi + bir and p j,r+1 = p j
where bi (bi0) is the corresponding aging ratio.
Problem analysis
In this section, we study a single-machine problem with the
cyclic process of an aging effect. The objective is to minimize
the makespan of all jobs. That is, we have to determine the
frequency (k) of the maintenance (M) and the sequence of
all jobs to minimize the makespan. For a certain schedule, let
Ci represent the completion time of Ji . Hence, the makespan
of all jobs is denoted by Cmax. Thus, using the conventional
notation, the problem of makespan minimization on a single-
machine with the cyclic process of an aging effect is denoted
by 1/p jr= p jra, a > 0, M=k/Cmax for the exponential aging
effect model or 1/p jr = p j +b jr, b j > 0, M = k/Cmax for the
linear aging effect model.
Theorem 1 For the 1/p jr = p jra, a > 0, M=k/Cmax prob-
lem, if there is no maintenance (ie k = 0), then it is optimal
to sequence jobs in non-increasing order of their normal pro-
cessing times (p j ).
Proof By using a standard job interchanging technique, the
result can be easily obtained. 
Corollary 1 Let C∗max denote the optimal solution of the
1/p jr = p jra, a > 0, M = k/Cmax problem in which k = 0.
For the 1/p jr = p jra, a > 0, M = k/Cmax problem, if C∗max −∑n
j=1 p j t , then there exists an optimal schedule in which
jobs are sequenced in non-increasing order of their normal
processing times (p j ).
Proof The inequality of C∗max −
∑n
j=1 p j t means that the
total time of the maximum additional processing time caused
by the aging effect in a schedule is less than or equal to the
maintenance time of maintaining the tool one time. Hence,
there is no time benefit of the maintenance for the 1/p jr =
p jra, a > 0, M = k/Cmax problem. Therefore, the result of
Corollary 1 follows immediately from Theorem 1. 
From Corollary 1, it follows that some maintenance may re-
duce the makespan of all jobs for the 1/p jr=p jra, a > 0, M=
k/Cmax problem if C∗max −
∑n
j=1 p j > t . That is, it suffices
to determine the frequency (k) of the maintenance and a
job sequence simultaneously to find the optimal solution for
the 1/p jr = p jra, a > 0, M = k/Cmax problem if C∗max −∑n
j=1 p j > t .
First, a useful group balance principle is introduced as
follows.
Group balance principle: If the tool is maintained k times
in a schedule, then the jobs are divided into (k + 1) groups.
The group balance principle is to make the number of jobs
to be as equal as possible in each group. That is, the num-
ber of jobs in each group is either l − 1 or l where l =
n/(k+1) denotes the smallest integer larger than or equal to
n/(k + 1).
W-H Kuo and D-L Yang—Minimizing the makespan in a single-machine scheduling problem 419
SA : A job-sequence in non-printing order of their normal processing times
SB : A shedule in which jobs are assigned one by one assined one by one from SA to the groups
SB
SA 1J 2J J
J Jt 1
GJ
J
J J
J
J
J
t t
. . .
. . . . . . . . . . . .
. . . . . .
Figure 2 The arrangement of all jobs according to Theorem 3.
Algorithm 1
Step 1: Arrange jobs in a sequence (SA) in non-increasing
order of their normal processing times (p j ).
Step 2: Calculate the makespan of the sequence (SA). If
C∗max −
∑n
j=1 p j t , then the sequence (SA) is opti-
mal and C∗max is the optimal makespan. Otherwise,
go to Step 3.
Step 3: Set k = 1. (k is the frequency of the maintenance
and it divides jobs into (k+1) groups).
Step 4: Groups are divided according to the group balance
principle and jobs are assigned to the groups of the
schedule (SB) one by one.
Step 5: Calculate the makespan of the schedule (SB).
Step 6: k = k + 1. If k < n, then go to Step 4. Otherwise,
go to Step 7.
Step 7: The optimal schedule is the one with the minimum
makespan.
Remark 1 In Step 1 of the algorithm, the jobs are sorted in
non-increasing order of their normal processing time and thus
the time requirement is O(n log(n)). Steps 4–6 are executed
(n − 1) times. In addition, in Step 4, although n jobs have
to be assigned, these n jobs are in a fixed order according
to Step 1 and are assigned to the corresponding positions in
the schedule. Hence, the time requirement is O(1) in Step 4.
Consequently, the overall time requirement of Algorithm 1 is
O(n log(n)).
Remark 2 Let f (k) denote the sum of actual processing
times of all jobs and g(k) denote the total maintenance time
if maintaining the tool k times. Clearly, f (k) is a decreasing
function and g(k) is an increasing function. Thus, f (k)+g(k),
that is the makespan of all jobs, may be V-shaped. That is,
the makespan may decrease first and then increase after it
reaches a minimum value as the frequency of the maintenance
increases. Hence, it may not be necessary to check all possible
frequencies in the algorithm. Therefore, it is possible to find
an algorithm to improve the time requirement.
Next, we demonstrate the result of the algorithm in the
following example.
Example 1 Assume that n=7, p1=8, p2=6, p3=7, p4=3,
p5 = 4, p6 = 5, p7 = 9 and t = 3. The aging ratio is a = 0.5.
First, we can see that the job sequence is J7 → J1 → J3 →
J2 → J6 → J5 → J4 according to the non-increasing order
of p j (Step 1). The makespan of the sequence without any
maintenance is C∗max = 73.35. In addition, C∗max −
∑7
j=1 p j =
31.35 > t =3. Therefore, it is necessary to consider the main-
tenance within the schedule to reduce the makespan. Table 1
gives the result of algorithm 1. From Table 1, we can see that
an optimal schedule is obtained by maintaining the tool three
times and arranging jobs in the following order.
J7 → J6︸ ︷︷ ︸
G1
→M→ J1 → J5︸ ︷︷ ︸
G2
→M→ J3 → J4︸ ︷︷ ︸
G3
→M→ J2︸︷︷︸
G4
Hence, the makespan of the schedule is calculated as follows:
Cmax = p7(1)0.5 + p6(2)0.5 + t + p1(1)0.5 + p5(2)0.5 + t
+ p3(1)0.5 + p4(2)0.5 + t + p2(1)0.5 = 55.97
The results analysed in the 1/p jr = p jra, a > 0, M = k/Cmax
problem can be extended to the problem with the aging effect
characterized by the linear function. The only different part is
that jobs are sequenced in non-increasing order of their aging
ratios (b j ). Therefore, we have the following theorems.
Theorem 4 For the 1/p jr = p j + b jr, b j > 0, M = k/Cmax
problem, if there is no maintenance (ie k=0), then it is optimal
to sequence jobs in non-increasing order of their aging ratios
(b j ).
Theorem 5 For the 1/p jr = p j + b jr, b j > 0, M = k/Cmax
problem, if k = k0 and jobs are divided into groups
G1, G2, . . . , Gk0 , Gk0+1 according to the group balance prin-
ciple, then there exists an optimal schedule in which jobs are
sequenced in non-increasing order of their aging ratios (b j )
and then arranged one by one to each group in turn. That is,
the jobs of the sequence are assigned to a schedule from the
first position of the first group to the first position of the last
group, and then from the second position of the first group to
the second position of the last group,. . . , and so on.
