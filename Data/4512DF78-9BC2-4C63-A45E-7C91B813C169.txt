 1
行政院國家科學委員會補助專題研究計畫 □成果報告   ■期中進度報告 
 
互動式智慧型身體感測網路晶片系統 - 子計畫六: 
使用多位元正反器之低功率嵌入式微處理器設計 
 
計畫類別：□個別型計畫   ■整合型計畫 
計畫編號：NSC－100－2220－E－194－007 
執行期間：   100 年  5  月  1  日至  101  年  4  月  30  日 
 
 
計畫主持人：林柏宏 
共同主持人： 
計畫參與人員：許志成、陳昱銓、羅士銓、蕭舜仁、林書弘、張柏勳 
 
 
成果報告類型(依經費核定清單規定繳交)：■精簡報告  □完整報告 
 
本計畫除繳交成果報告外，另須繳交以下出國心得報告： 
□赴國外出差或研習心得報告 
□赴大陸地區出差或研習心得報告 
□出席國際學術會議心得報告 
□國際合作研究計畫國外研究報告 
 
 
處理方式：除產學合作研究計畫、提升產業技術及人才培育研究計畫、 
          列管計畫及下列情形者外，得立即公開查詢 
            □涉及專利或其他智慧財產權，□一年□二年後可公開查詢 
 
  執行單位：國立中正大學電機工程學系 
 
中   華   民   國   101   年   2   月   19   日 
 
 3
Table 1. Comparisons of the normalized power 
consumption and areaof different flip-flop cellsin a 
celllibrary [24] based on theUMC 55 nm technology 
[25]. 
Bit  
Number 
Normalized Power 
Consumption per Bit 
Normalized 
Area per Bit
1 1.00 1.00 
2 0.86 0.96 
4 0.78 0.71 
 
Table 2. Design methodologies for MBFFs or 
register banks. 
Design Methodology for MBFFs Related Works
Logic optimization with MBFFs [18],[22] 
Pre-placement optimization with MBFFs [17] 
In-placement optimization with register banks [23] 
Post-placement optimization with MBFFs This paper, 
[19]–[21] 
 
According to [17] and [18], applying MBFFs 
may have the following advantages: 
1) smaller design area due to shared clock drivers 
and clockgating cells; 
2) less delay and power of the clock network due 
to fewer clock sinks and smaller capacitive 
load on the clock net; 
3) controllable clock skew because of common 
clock andenable signals for a group of 
flip-flops and reduced depth of a clock tree; 
4)improved routing resource utilization especially 
when considering design for testability. The 
required routing resource for a scan chain is 
greatly reduced because of fewer cells in a scan 
chain. 
Fig. 1 shows an example of merging two 1-bit 
flip-flops into one 2-bit flip-flop. Each flip-flop 
contains two inverters which generate 
opposite-phase clock signals. As the process 
technology advances to 65 nm and beyond, even a 
minimum-sized inverter/buffer can still drive 
multiple flip-flops [18]. Replacing several 1-bit 
flip-flops with one MBFF will significantly reduce 
the number of inverters. Consequently, the total 
power and area of the whole flip-flops in a design 
are reduced. Table 1 further compares the 
normalized power consumption and area of different 
flip-flop cells in a cell library which was designed 
by [24] based on the UMC 55 nm technology [25]. 
The idea of applying MBFFs was first proposed in 
[17], as seen in Fig. 2(a), which groups single-bit 
flip-flops into MBFFs before floorplanning and 
placement based on a breadfirst-search algorithm. 
Kretchmer [22] and Chen et al. [18] introduced a 
design methodology for logic optimization with 
MBFFs. Such methodology creates the models of 
multi-bit registers in a cell library which can be 
inferred by existing logic synthesis tools. Based on 
the multi-bit register inference, it is possible to map 
a register-transfer level design directly to a 
gate-level design with multi-bit register cells during 
logic synthesis. More recently, Hou et al. [23] 
proposed a power-aware placement flow, as shown 
in Fig. 2(b), which generates register banks based on 
predetermined heuristic criteria after initial 
placement and removes the generated register banks 
to satisfy timing and routability constraints during 
incremental placement optimization. Most recently, 
it is suggested to optimize a design with MBFFs at 
the post-placement stage [19]–[21], as illustrated in 
Fig. 2(c), for more accurate timing/delay budgets. 
The clock tree of the design is synthesized after the 
MBFFs had been generated and placed. Table 2 
summarizes all the proposed logic/physical design 
methodologies for MBFF or register bank generation. 
For post-placement optimization with MBFFs, the 
previous works [21], [20] separated “MBFF Gen. & 
Placement” in Fig. 2(c) into two steps: 1) flip-flop 
merging, and 2) MBFF placement, based on 
different design objectives. During flip-flop merging, 
both [19] and [20] tried to minimize total flip-flop 
power consumption, while [21] proposed to 
minimize the number of clock sinks (i.e., the total 
 5
Table 3. Comparisons of the design objectives for flip-flop merging and MBFF placement in the previous 
works [19]–[21], and Ours. 
Approach Objectives for Flip-Flop Merging Objectives for MBFF Placement 
This Paper Min. total flip-flop power consumption 
Min. total wirelength 
Min. total wirelength 
[19] Min. total flip-flop power consumption N/A 
[20] Min. total flip-flop power consumption Min. total wirelength 
[21] Min. total # of clock sinks (total # of flip-flops) 
Min. total net switching power consumption 
(total weighted signal net wirelength) 
Min. total net switching power consumption 
(total weighted signal net wirelength) 
 
2.2. Timing Slack Constraint 
In addition to the placement density constraint, 
a poor location of a newly generated MBFF may 
also induce longer wirelength between the flip-flop 
and its connected pins. For example, in Fig. 3(a), 
there are two 1-bit flip-flops, f1 and f2 ,where f1 is 
connected to p1 and p2, and f2 is connected to p3 and p4. 
After replacing f1 and f2 with the 2-bit flip-flop, f3, as 
shown in Fig. 3(b), the wirelength from f3 to p4 
becomes much longer. The longer wirelength will 
introduce much larger delay leading to timing 
violation. Therefore, the timing slack constraints 
should be considered to avoid the timing violation 
when replacing a set of flip-flops with an MBFF. 
 
 
Fig. 3. Longer wirelength (a) before and (b) after 
merging two 1-bit flip-flops, f1 and f2, into one 2-bit 
flip-flop, f3, in a design. 
 
In our problem formulation, the timing slack 
constraints can be obtained through the following 
steps: 
1) perform static timing analysis; 
 
2) apply the slack distribution technique [28]; 
3) convert the timing slack to slack distance as 
our problem input, which will be elaborated in 
the following paragraphs. 
During post-placement optimization with 
MBFFs, only the locations of flip-flop cells can be 
changed, so the delay of a datapath is only affected 
by the input transition time and output capacitance 
of the flip-flops and their fan-in/fan-out cells on the 
datapath based on the Synopsys Liberty Timing 
Model [26]. According to the loading dominance 
property [27], the effect of the output capacitance 
(loading), including wire loading and input/output 
pin capacitance, to the gate delay is much larger than 
that of the input transition time (slope). Since the 
input/output pin capacitance is also not changed 
during flip-flip merging and replacement, the delay 
is only affected by the wire loading which is 
proportional to the interconnecting wirelength. 
Consequently, we can define the timing slack 
constraint in terms of the maximum allowable 
distance from a flip-flop to each of its connected 
fan-in/fan-out pins, as shown in (2). The maximum 
allowable distance can be further derived from (3). 
 
    (2) 
 (3) 
 
 7
Fig. 5(a) illustrates the TSFR of f2 which is a tilted 
rectangular region [29] intersected by the Manhattan 
rings [16], [29] of p1 and p2. Every point on the 
Manhattan ring of p1 (p2) has the same Manhattan 
distance from p1 (p2), which is equal to dmax(p1, f2) 
(dmax(p2, f2)). Fig. 5(b) further shows all the TSFRs 
of f1, f2, . . . , and f6 in the same design. According to 
the definition of the TSFR, a set of flip-flops can be 
grouped and replaced by an MBFF if there exists an 
intersection region of the TSFRs of all the flip-flops. 
In Fig. 5(b), f1 and f2 can be grouped and merged by 
an MBFF because the merged MBFF can be placed 
in the intersection of the TSFRs of f1 and f2 such that 
the timing slack constraint of the merged MBFF is 
met. Such flip-flop group of f1 and f2 is called a 
timing-slack-free group which is defined in the 
following. 
Definition 2: A timing-slack-free group (TSFG) is 
a flip-flop group in which all the flip-flops can be 
merged by an MBFF such that the timing slack 
constraints between the MBFF and all its connected 
pin are satisfied. 
2) Exploration of m-Bit Flip-Flop Groups: Before 
exploring the m-bit TSFGs in a design, we construct 
the TSFR intersection graph which is defined in 
Definition 3. Fig. 6(a) shows the TSFR intersection 
graph representing the relationship of the TSFRs in 
Fig. 5(b).  
 
Fig. 6. (a) TSFR intersection graph representing the 
relationship among the TSFRs in Fig. 5(b). (b) 
Branch-and-bound and backtracking algorithms [30] 
which find all 4-vertex cliques in (a). 
 
Definition 3: A TSFR intersection graph is a 
graph, G(V, E), where each vertex, vi, corresponds to 
a flip-flop, fi, in the design, and an edge, eij , between 
vi and vj exists if there is an intersection between the 
TSFRs of fi and fj . 
Once the TSFR intersection graph of a design is 
constructed, we can explore all the m-bit TSFGs in 
the design by finding all the m-cliques in the TSFR 
intersection graph. Each m-clique in the graph 
corresponds to an m-bit TSFG. The problem of 
finding all m-cliques in the graph can be well solved 
by applying the branch-and-bound and backtracking 
algorithms [30] using a search tree as shown in Fig. 
6.  
3) Selection of Flip-Flop Groups: After exploring 
the set of m-bit TSFGs of a design, the next problem 
is how to select the maximum number of 
non-conflict m-bit TSFGs for more power saving 
and wirelength reduction. The selection of 
non-conflict TSFGs can be formulated by finding 
the maximum independent set (MIS). The 
independent set of TSFGs is defined as follows. 
Definition 4: An independent set (IS) of TSFGs is 
a set of TSFGs, in which every flip-flop belongs to 
only one TSFG. Since finding the MIS has been 
known as an NP-hard problem [31], a novel and 
efficient algorithm as seen in Algorithm 1 is 
proposed to generate the IS of TSFGs. 
 
 9
 
Fig. 9. Example of finding placement bins 
intersected by the boundaries of the tilted 
rectangular placement region. (a) Set of placement 
bins intersected by the bottom-left boundary of the 
tilted rectangular placement region. (b) Set of 
placement bins intersected by all four boundaries of 
the tilted rectangular placement region. 
 
 
Fig. 10. Placement area of an MBFF with the 
consideration of interconnecting wirelength. (a) 
Placement area bounded by the median coordinates 
of the eight pins. (b) Enlarged placement area when 
placing an MBFF in the area in (a) is not feasible. 
 
2) Consideration of Placement Density: To find 
a legal placement for an MBFF corresponding to a 
TSFG within the tilted rectangular placement region, 
or the TSFR of the MBFF, only the placement bins 
covered by the tilted rectangular placement region 
should be considered. To collect all the placement 
bins, the bins intersected by each boundary of the 
tilted rectangular placement region should be first 
identified as shown in Fig. 9(a) and (b). The bins 
surrounded by these intersected bins can be found 
and collected accordingly. 
To better consider the placement density during 
MBFF placement, the bin with the lowest placement 
density is chosen to accommodate the MBFF 
corresponding to a TSFG. If there is no valid 
placement grid within the bin, the bin with the 
second lowest placement density is then chosen. The 
grid searching process is repeated until a valid 
placement grid for the MBFF is found. 
 
 
Fig. 11. Example of finding valid placement grids 
during grid-searching process. (a) Bins containing 
placement grids inside both the TSFR of the MBFF 
and the area bounded by the median coordinates of 
all pins connected to the MBFF. (b) All possible 
placement grids in the bin, b22. 
 
3) Consideration of Interconnecting Wirelength: 
In addition to considering the placement densities of 
the bins within the TSFR of an MBFF corresponding 
to a TSFG, it is also required to minimize the 
interconnecting wirelength when placing the MBFF. 
To find a position for the MBFF with shorter 
wirelength, the area bounded by the median 
coordinates of all pins connected to the MBFF is 
first considered as shown in Fig. 10(a). In this 
example, the median coordinatesof the eight pins are 
xp4 ,xp5 , yp4 , and yp8 in both axes. Once the area 
bounded by the median coordinates of all pins is 
obtained, a grid-searching process is performed to 
find a valid placement grid. During the 
grid-searching process, the bin with the lowest 
placement density, which contains grids inside the 
 11
will not exponentially grow. The window size is 
progressively expanded until the whole chip area is 
covered by the window. Fig. 12(c) shows an 
enlarged window with the size of 4×4 bins. In this 
case, the window has already covered the whole 
chip area, so it will not be slid and expanded 
anymore. 
 
 
Fig. 12. Progressive window-based optimization 
technique. (a) Initialized window with the size of 2 × 
2 bins. (b) Progressive window sliding throughout 
the chip area. (c) Enlarged window with the size of 4 
× 4 bins. 
 
4. Experimental Results 
We implemented our algorithms in the C++ 
programming language, and performed three sets of 
experiments on a 2.66GHz Intel Core i7 PC under 
the Linux operating system. First of all, we 
compared the flip-flop power consumption, 
wirelength, and runtime for our approach and the 
most recent works [19]–[21]. Second, we showed 
the efficiency of the proposed progressive 
window-based optimization. Finally, we 
demonstrated the impact on clock tree wirelength 
after clock tree synthesis and compared with [21]. 
 
 
Table 4. Industry Benchmark Circuits 
 
 
A. Power and Wirelength Reduction 
In the experiments, we empirically tested our 
approach on six industrial circuits [24] which 
contain all the required input data, including 
placement density and timing slack constraints, as 
described in Section 2. Table 4 lists the names of the 
benchmark circuits (“Circuit”), the numbers of 1-bit 
and 2-bit flip-flops (“# of FFs”), normalized total 
flip-flop power consumption (“Normalized Total 
Power”), and total wirelength (“Total WL”). For 
each circuit, the numbers of 1-bit flip-flops range 
from 76 to 146 400 and the numbers of 2-bit 
flip-flops range from 22 to 22 800. There is no 4-bit 
flip-flop in each circuit. The placements of all 
flip-flops in each circuit had been optimized based 
on the commercial tools, and the chip area 
utilization of each circuit is about 50%. The 
normalized total flip-flop power consumption was 
calculated by summing up the normalized flip-flop 
power consumption of each flip-flop cell as seen in 
Table 1, and the total wirelength was calculated by 
summing up the wirelength of each net connected to 
a flip-flop based on the HPWL model. 
We compared the flip-flop power consumption, 
wirelength, and runtime for our approaches and the 
most recent works [19]–[21]. Table 5 lists the names 
of the benchmark circuits (“Circuit”), the flip-flop 
power reduction compared with the flip-flop power 
consumption of the input circuits (“Power Red.”), 
the wirelength reduction compared with the total 
wirelength of the input circuits (“WL Red.”), and the 
runtime(“Time”) for five different approaches: 1) 
Yan and Chen’s approach [19] (on Intel Xeon 3.8  
 13
best result [20]. It should be noted that our approach 
achieves the largest wirelength reduction, which is 
37.36% better than [19], 15.68% better than [20], 
1.73% better than [21], and 7.23% better than [1]. 
Consequently, the net switching power is also 
reduced due to shorter interconnecting wirelength 
(i.e., smaller wire loading). It should be noted that 
we have modified the sorting function in Algorithm 
1 for more wirelength reduction compared with [1]. 
Fig. 6-13 further compares the distribution of slack 
distance and bin density of the circuit, “c6,” before 
and after performing the proposed algorithms in this 
paper. Fig. 13(a) shows the number of nets (# of 
Nets) over different slack distance ranging from 0 to 
1400 nm, which can be calculated by (3). Fig. 13(b) 
shows the number of bins (# of Bins) over different 
bin densities ranging from 0 to 100%, which can be 
calculated by (1). The results show that both timing 
slack and bin density are not affected much after 
applying MBFFs at the post-placement stage based 
on our formulation and algorithms. 
 
B. Impact of Progressive Window-Base 
Optimization 
In the second set of the experiments, we 
compared the results of our approach with different 
parameter settings for the proposed progressive 
window-based optimization. Table 6. lists the names 
of the benchmark circuits (“Circuit”), the flip-flop 
power reduction compared with the flip-flop power 
consumption of the input circuits (“Power Red.”), 
the wirelength reduction compared with the total 
wirelength of the input circuits (“WL Red.”), 
average flip-flop displacement before and after the 
flip-flops are merged (“Avg. FF Disp.”), and the 
runtime (“Time”) for three different parameter 
settings of the window size, and window expansion. 
For power reduction, the results based on 
different parameter settings are similar because 
finding the MIS of TSFGs is an NP-hard problem as 
discussed in Section 3-1. Therefore, we cannot 
guarantee that our flip-flop grouping algorithm will 
find a global optimum solution with a larger window 
size. Although a larger window size results in more 
wirelength reduction, it also leads to more flip-flop 
displacement. It would be more relevant to minimize 
the placement deviation at the post-placement stage.  
 
 
Fig. 13. Distribution of (a) slack distance and (b) bin 
density of the circuit “c6” before and after 
performing the post-placement power optimization 
with MBFFs. 
 
Table 7. Benchmark Circuits in [21] 
 
 
 
 15
17, no. 1, pp. 33–44, Jan.2009. 
[5] A. Khan, P. Watson, G. Kuo, D. Le, T. Nguyen, 
S. Yang, P. Bennett,P. Huang, J. Gill, C. 
Hawkins, J. Goodenough, D. Wang, I. Ahmed,P. 
Tran, H. Mak, O. Kim, F. Martin, Y. Fan, D. Ge, 
J. Kung, and V. Shek,“A 90 nm power 
optimization methodology with application to 
the ARM1136JF-S microprocessor,” IEEE J. 
Solid-State Circuits, vol. 41, no. 8,pp. 
1707–1717, Aug. 2006. 
[6] T. Luo, D. Newmark, and D. Z. Pan, “Total 
power optimizationcombining placement, sizing 
and multi-Vt through slack 
distributionmanagement,” in Proc. IEEE/ACM 
Asia South Pacific Des. Autom. Conf.,Mar. 
2008, pp. 352–357. 
[7] D.-S. Chiou, S.-H. Chen, S.-C. Chang, and C. 
Yeh, “Timing drivenpower gating,” in Proc. 
ACM/IEEE Des. Autom. Conf., Sep. 2006, 
pp.121–124. 
[8] H. Xu, R. Vemuri, and W. Jone, “Dynamic 
characteristics of powergating during mode 
transition,” IEEE Trans. Very Large Scale 
Integr.Syst., vol. 19, no. 2, pp. 237–249, Feb. 
2011. 
[9] G. Magklis, M. L. Scott, G. Semeraro, D. H. 
Albonesi, and S. Dropsho,“Profile-based 
dynamic voltage and frequency scaling for a 
multipleclock domain microprocessor,” in Proc. 
ACM Int. Symp. Comput.Architecture, 2003, 
pp. 14–27. 
[10] D. Liu and C. Svensson, “Power consumption 
estimation in CMOS VLSIchips,” IEEE J. 
Solid-State Circuits, vol. 29, no. 6, pp. 663–670, 
Jun.1994. 
[11] A. Krishnamoorthy, “Minimize IC power 
without sacrificing performance,”EE Times, Jul. 
15, 2004. 
[12] K. Wang and M. Marek-Sadowska, “Buffer 
sizing for clock powerminimization subject to 
general skew constraints,” in Proc. 
ACM/IEEEDes. Autom. Conf., Jul. 2004, pp. 
159–164. 
[13] L. Huang, Y. Cai, Q. Zhou, X. Hong, J. Hu, and 
Y. Lu, “Clocknetwork minimization 
methodology based on incremental 
placement,”in Proc. IEEE/ACM Asia South 
Pacific Des. Autom. Conf., Jan. 2005,pp. 
99–102. 
[14] Y. Cheon, P.-H. Ho, A. B. Kahng, S. Reda, and 
Q. Wang, “Power-awareplacement,” in Proc. 
ACM/IEEE Des. Autom. Conf., Jun. 2005, pp. 
795–800. 
[15] Y. Lu, C. N. Sze, X. Hong, Q. Zhou, Y. Cai, L. 
Huang, and J. Hu,“Navigating registers in 
placement for clock network minimization,” 
inProc. ACM/IEEE Des. Autom. Conf., Jun. 
2005, pp. 176–181. 
[16] R. Pokala, R. Feretich, and R. McGuffin, 
“Physical synthesis forperformance 
optimization,” in Proc. IEEE Int. ASIC Conf. 
Exhibit., Sep.1992, pp. 34–37. 
[17] L. Chen, A. Hung, H.-M. Chen, E. Tsai, S.-H. 
Chen, M.-H. Ku,and C.-C. Chen. (2010). 
“Using multi-bit flip-flop for clock 
powersaving by DesignCompiler,” in Proc. 
Synopsys Users Group [Online].Available: 
http://www.synopsys.com.cn/information/snug/
2010/usingmulti-bit-flip-flop-for-clock-power-s
aving-by-designcompiler 
[18] J.-T. Yan and Z.-W. Chen, “Constructionof 
constrained multibitflipflopsfor clock 
powerreduction,” in Proc. IEEE Int. Conf. 
Green CircuitsSyst., Jun. 2010, pp. 675–678. 
[19] I. H.-R. Jiang, C.-L. Chang, Y.-M. Yang, E. 
Y.-W. Tsai, and L. S.-F. Chen, “INTEGRA: Fast 
multi-bit flip-flop clustering for clock 
powersaving based on interval graphs,” in Proc. 
ACM Int. Symp. Phys. Design,2011, pp. 
115–121. 
[20] S.-H. Wang, Y.-Y. Liang, T.-Y. Kuo, and W.-K. 
Mak, “Power-driven flipflopmerging and 
relocation,” in Proc. ACM Int. Symp. Phys. 
Design,2011, pp. 107–114. 
[21] Y. Kretchmer, “Using multibit register inference 
to save area and power,”EE Times Asia, May 24, 
2001. 
[22] W. Hou, D. Liu, and P.-H. Ho, “Automatic 
register banking for lowpowerclock trees,” in 
Proc. IEEE/ACM Int. Symp. Quality 
Electron.Des., Mar. 2009, pp. 647–652. 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/02/09
國科會補助計畫
計畫名稱: 子計畫六：使用多位元正反器之低功率嵌入式微處理器設計(1/3)
計畫主持人: 林柏宏
計畫編號: 100-2220-E-194-007- 學門領域: 智慧電子科技計畫-整合型學術研
究計畫
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
台灣積體電路設計學會 100 學年度碩士論文獎 
 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
