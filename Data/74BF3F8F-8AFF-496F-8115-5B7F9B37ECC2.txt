 2 
目 錄 
目 錄 2 
中文摘要 3 
Abstract 4 
I. Introduction 5 
II. Problem Formulation 9 
III. DEsign of the HCLC Controller 12 
A. Observing the EDCA plant pn 12 
B. The MAC layer controller fn 14 
C. The upper layers controller gn 20 
IV. EDCA Model with Cross-Layer Interface 22 
A. SDL Modeling of EDCA-XLI 25 
1) The Morphism from DCF to EDCA 25 
2) The cross-layer interface for EDCA 26 
B. Cross-layer Control with EDCA-XLI 27 
C. Simulations 27 
1) External Collisions MSCs 28 
2) Internal Collisions MSCs 28 
3) EDCA-XLI Cross-layer MSCs 35 
V. Silicon Intellectual Property Implementation 35 
A. The RTL model of the fuzzy controller 36 
B. Speed, Area, and Power Optimizations 37 
VI. Experiments 38 
A. The observer and Saturation Detection 38 
B. The controller of TCij 38 
C. QoS Control SIP using EDCA-XLI 40 
D. Other Extensive Experiments and Simulations 45 
VII. Project Progess Evaluation 46 
VIII. Conclusions 48 
References 64 
 4 
 
ABSTRACT 
Cross-layer designs for multimedia streaming over wireless ad-hoc networks are found that can 
gain better performance in many aspects. However, the cross-layer interfaces of protocol layers 
are still not standardized and many open issues are left. We propose a new hierarchical cross-
layer control (HCLC) model for multimedia streaming over wireless networks. An upper layer 
forms a controller producing controls to its lower layers. A lower layer receive upper layers’ 
controls as its reference input command and produce its own control to next lower layers. 
Therefore, a layer controller is transparent to its lower and upper layer controllers. By HCLC, the 
conventional OSI protocol structure is not destroyed except including additional signaling 
schemes among controllers. For streaming multimedia objects over ad-hoc wireless networks, the 
controller comprises the IEEE 802.11e media access control (MAC) and the upper layers 
including the transport, and the application layers. The upper layers receive the MAC access 
delay feedback and calculate new reference goal as traffic specification (TSPEC) to the MAC 
layer. The MAC tunes the backoff parameters of the Enhanced Distributed Channel Access 
(EDCA) function to meet the dynamic TSPEC from upper layers. Analysis and experiments show 
that the proposed control provides real-time bandwidth allocation and at the same time preserves 
fairness no matter how the network state is uncertain and dynamic. 
 
Index Terms –Wireless Networks, Cross-layer Control, QoS, IEEE802.11e Media Access 
Control, Silicon Intellectual Property, Electronic System Level Design, Electronic System 
Level Verification. 
 6 
Upper layers
gn
Layer n
fn
Lower layers
plant pn
Observer
on
Observers
on+1…om
n n np f g I=o o
Cross-layer control
x y
Cross-layer observer
...m no oo o
Goal:
 
Figure 2. Relationship and transparency among layers in the HCLC model. 
 
The HCLC model possesses the following properties:  
 Preserving standard protocol structure: the proposed HCLC hierarchy does not violate the 
classical protocol layer architecture except that it includes additional signaling schemes among 
layer controllers. The HCLC does not modify any algorithm in any layer. 
 Being compatible with traditional protocol stacks: since the layering abstraction is not 
destroyed, logical links of the same layers among nodes are preserved. Therefore, traditional 
protocols communicate with the protocols with HCLC. 
 Easy evaluation: costs and performances are easily assessed using control theories if cost-
effective observers of the control system are available. For example in checking stability of the 
control system in Fig. 2, we use linear matrix inequality to find the Lyapunov function for 
composition of fn and pn when given reference input from gn. We can thus perform cross-layer 
optimization using optimal control. 
 Transparent design of layer controllers: each layer regards its lower layers as a single plant and 
therefore the design of its controller only concern the final result of lower layer compositions. 
For Fig.2, the layer controller fn regards the composition of lower layers pn as its plant to track 
the command gn from upper layers. 
 Transparent network states measurements: each layer observer on interests only in concerned 
dynamics for feedback from lower layers to its own layer controller. Therefore, measurements 
are simplified. 
 
In mobile ad-hoc networks, the TSPECs dynamically change due to flow control, traffic re-
shaping, or the mobile nodes recasting new roles in applications of scenarios. Moreover, a QoS 
algorithm requires the capabilities of determining resource availability on neighboring links and 
resource reservation functions at nodes [3]. The QoS work does not merely rely on a single layer 
but on several layers. How to accomplish the QoS is a typical example utilizing cross-layer 
 8 
to both busts and channel errors. Therefore, the fairness is preserved. Traditional methods cannot 
estimate required sending rate and packet length to support dynamic TSPEC according to network 
states.  
Many other recent studies on the cross-layer QoS enhancement for the IEEE 802.11 wireless 
LAN can be found [5][6][7][8][9]. Many of these studies use throughput distortion-based scheme 
to perform the rate control. However, using throughput, we will not able to control EDCA function 
directly except designing a mapping from the throughput to the required MAC access delay. 
Moreover, in many cases the goal throughput is unknown and time-variant. For example, in 
variable bit rate (VBR) streaming, an MPEG-4 encoder requires higher bandwidth for streaming 
when pictures have complex image components. If the there is no scheme determining required 
bandwidth, the distortion of the throughput cannot be evaluated. In the proposed HCLC, the upper 
layers use delay and allowable delay variation as TSPEC reference of the MAC layer controller. 
When the background is crowded and error-prone, the HCLC scales down the packet length as 
well as increase the sending rate. Then the HCLC upper layers control gn regenerate the goal delay 
and its allowable variation. The idea of this adaptation is that increasing the sending rate will 
increase transmission trials per unit time while decreasing the packet length will decrease the 
penalty of each packet lost and the MAC access delay as well. In Fig.2, the upper layers’ 
controller gn calculate the instant goal delay by dividing packet length with the sending rate. In 
what follows, we give respective comparisons on the related works [5][6][7][8][9]. 
In [5], rate control methods are classified into SNR-based and statistics-based classes. To 
combine advantages of these two classes, the method proposed in [5] is a hybrid of SNR based and 
statistics based rate control for multimedia streaming over legacy IEEE 802.11 under 
infrastructure mode. The proposed HCLC for multimedia streaming over ad-hoc networks is 
delay-control based. Rather than using throughput, HCLC adopts delay and allowable delay 
variation as the physical quantities in controller. The required TSPEC is calculation based to 
inference the required MAC access delay. This inference result is used to control the EDCA 
function in a noisy and dynamic ad-hoc network environment. The MAC layer controller then 
track the resultant access delay not only to gain adequate bandwidth but also preserve the 
bandwidth. The feedback observation of network state provides the upper layers to estimate next 
required MAC access delay.  
In [6], there proposes a streaming method for H.264 video. The H.264 data partitions are 
mapped to different access categories at the MAC layer. More important data partition goes a 
queue of higher priority to utilize the differentiation function of EDCA in the 802.11e. However, 
when less important data are lost due to having lower access right, the video stream is cannot 
maintain H.264 xxx functions even though the received video quality is good. In this project, the 
 10 
delay in terms of contention window parameters. If the data frame is successfully sent at the r-th 
retrial, the MAC access delay at the r-th retrial can be expressed as  
 
( ) ( ) ( )r r r
defer RTS CTS ACK DATA SIFSd t t t t t t= + + + + + , (1) 
where tRTS, tCTS, t(r)DATA, tACK are the required delays for transmission RTS, CTS, data, and ACK 
frames respectively; the tSIFS is required delay for the short inter-frame space. For cases that do 
not use RTS and CTS frames, the values of tRTS and tCTS are zero. Expanding the r-th defer delay 
( )r
defert , we have 
 
( ) ( ) ( ) ( )
[ ]
r r r r
defer AIFS j backoff vir extt t t NAV NAV= + + + , (2) 
where NAVvir and NAVext are the network allocation vectors for internally virtual collision 
resolution and external collision resolution respectively; tAIFS[j] is the AIFS if the traffic category 
is j. When receiving circuitry senses the channel is busy and is used by external node’s traffic, the 
NAVext representing the future use of the channel by the external nodes is set. The NAVvir is set 
when some other internal traffic is using the channel. The r-th backoff delay is uniformly 
distributed in the interval ( )[0, ]rCW .That is, 
 
( ) ( )([0, ])r rbackofft Random CW=  (3) 
The upper bound ( )rCW of the interval can be expressed in terms the parameters – the persistent 
facto PF, retrial limit Rmax, initial contention window CWmin before the transmission retrial and 
the upper bound of the contention window CWmax. 
 
( )maxmin( , )( ) min maxmin ,r RrCW PF CW CW= ⋅
 (4) 
A data frame is dropped if the number of retrials exceeds the retry limit Rmax. Therefore, without 
RTS and CTS, the total MAC access delay is 
 ( )
1 1
( ) ( )
0 0
( )
NACKR R
r r
NACK out SIFS DATA defer
r r
d R R T t t t
−
−
= =
= + + +∑ ∑  (5) 
where Tout is the timeout that a transmission waits for an acknowledgement, R is the total 
transmission retrials and RNACK is the total number of retrials in R that fail to receive the 
acknowledgement ACK. These transmission failures are caused by collisions or channel errors.  
To observe the uncertain behavior of the network using EDCA function, we substitute (2) into 
(5). Then, 
 
( )
( )
1
( ) ( ) ( )
0
1
( )
[ ]
0
( )
NACK
R
r r r
backoff vir ext
r
R
r
NACK out SIFS DATA AIFS j
r
d R t NAV NAV
R T t t R t
−
=
−
=
= + +
+ + + + ⋅
∑
∑
 (6) 
In (6), d(R) is the joint random variable of the six random variables R, ( ) ( ) ( ), ,r r rbackoff vir extt NAV NAV , RNACK 
and ( )rDATAt . They follow different probability distributions. Without specific assumptions on the 
 12 
III. DESIGN OF THE HCLC CONTROLLER 
 Let the plant pn in Fig. 2 be the mapping pn: {CWmin}  {d(R)}, where {.} denotes the 
range of the object in the bracket. The objective of this controller is to design gn: {(sending rate, 
packet length, d(R))}  TSPEC and fn: {d(R)}  {CWmin} such that d(R) meets the TSPEC. Fig. 
4 is a conceptual explanation. Regarding the water level in container as the delay, we explain how 
the HCLC controller works. Variable TSPEC results in different goal backoff delay dg. As Fig. 4, 
to attain the TSPEC, gn estimates dg. The delays caused by background traffics are dNAV and dcol 
which are not controllable and hard to predict. The MAC layer controller fn adapts the backoff 
delay by adapting CWmin to make dEDCA = dg and wishes that the total delay d = dEDCA + dNAV + 
dcol in (7) satisfies the TSPEC. If the background-caused delay (dNAV + dcol) already exceeds the 
delay constraint in TSPEC, the channel is tentatively saturated and CWmin is tuned to minimum 
such that the delay of current traffic can be quickly decreased. The goal backoff delay dg 
estimated by gn and the required backoff delay dEDCA controlled by fn are discrete-time signals. 
Moreover, to deal with the network bursts, ramping of the total delay is achieved by over-
estimating and under-estimating goal backoff delay designedly. 
 
variable
(dNAV + dcol)
Backoff delay
dEDCA
MAC layer controller fn
controls the backoff delay 
by tuning the EDCA
parameter to meet 
the new TSPEC
Packet i
dg
Variable TSPEC
 
Figure 4. Regarding the water level in the container as delay and concept of the proposed 
HCLC control. 
 
A. Observing the EDCA plant pn 
To perform statistical observation, we collect delays of the most recent w packets and perform 
moving average. Based on per-packet sampling, that is we observe the network state every packet, 
the HCLC control system is discrete. To observe the state change caused by the CWmin and CWmax 
inputs, we design observers acting as impulse filters. Define 
 
1
0
1[ ] [ ]
[ ] [ ] [ 1]
w
k
d n d n k
w
d n d n d n
−
=
= −
∆ = − −
∑
 
We first consider the effect on d[n] by using CWmin and CWmax as control. Let 
 
[ ] 11
( )
0 0
1[ ]
R n iw
r
backoff backoff
i r
t n t
w
− −
−
= =
= ∑ ∑  
 14 
where fNyquist is the Nyquist frequency of d[n]. For different access category in the standard, the 
relationship between fs and w in (13) is useful to determine how fast the MAC layer controller 
should update its control. For the system is already discrete, and it is sufficient to have the MAC 
layer controller update its control for each of the observed feedback. That is, taking fs = 1 and we 
have 
 
( )max max2 1R CW
w
ε
−
≥  (14) 
In case that Rmax = 7, CWmax = 1023 slots, and ε = 96ms (4800 slots for slot-time = 20µs) we have 
w = 32. That is, the most recent 32 MPDU frames delays are averaged as the observation of 
current network state. Thus, the observed delay state is 
 
1
0
[ ] [ ]
w
i
d n d n i
−
=
= −∑  
B. The MAC layer controller fn 
The MAC layer control system architecture is shown as Fig. 5. Suppose there are n nodes each 
of which at most has m traffic categories. Every node i has basic rate Bi and the total network 
capacity is B. The distributed controller has two sets of inputs – TSPEC and the observed system 
state. One element of the TSPEC input set is the goal delay matrix [Dgi] where each Dgi is a row 
vector of m goal delays dij’s for traffic categories j’s of node i. Each goal delay dij is related with 
the packet size lij and the desired bandwidth bij. Thus we have 
 
1 1 1
1
1
2
, 1
n n m
i ij
i i j
ij
gij
ij
i
gi m
i ij
j
B B b
l
d j
b
ld
B b
= = =
=
= =
= >
=
−
∑ ∑∑
∑
 (15) 
The traffic category (j = 1) with lowest priority uses the remaining bandwidth for transmission. 
The TSPEC includes the tolerable delay variation matrix [Εi] where each Εi is a row vector of m 
desired tolerable delay variations εij’s for traffic categories j’s of node i. In the network, the delay 
vector Dgi and the tolerable delay variation Εi are dependent. 
 16 
by smallest CWmin , for example CWmin =0, (16) cannot be made. We obtain the state and its 
changing rates ( )sup ( )ijd n∆  and ( )inf ( )ijd n∆  by the observer in (14) that performs simple histogram 
analysis – averaging packet delays during a time window size w. Thus, the state transition δ is an 
input-state homomorphism of the above vague information [16][17].  
We generalize the above observation into theretical validation attempting to augment the 
application generally in wireless networks control. We have the following Lemma 1 and Theorem 
1. Let rij and lij be repectively the upper and lower bounds of state changing rates obtained in the 
state histogram analysis. Though the information is vague we can obtain the state transition δ as 
the following lemma. 
Lemma 1. (The existence of realization) Given a monoid < L2(Σ)*, •> of control words and 
TSPEC, there is a GFA automaton realizes the fuzzy control system in Fig. 2. In the monoid, 
L2(Σ)* is the closure of the level-2 fuzzification of uij and • is the concatenation operator. In 
TSPEC, εij is the required precision constraints, that is, the observed final state is contained in 
delay range [dgij −εij, dgij + εij]. 
Proof: Let at time t the support of the state ξij is [ξij1, ξij2] and that of the observed state is [k1(t), 
k2(t)]. We represent elements in the automata Mij’s with LR fuzzy sets [17] of the form (α, m, β) 
where α and β are respectively the left and right spreads and m is the mode (the position with the 
maximum membership grade). We prove the lemma by constructing GFA Mij’s. For each traffic 
category j in mobile node i, construct a GFA Mij(δ, Σ, Q, S0, F, T) where 
Q = ∪ ξij(t), ∀t 
ξ0=ξij(0)=(α(0), s(0), β(0)) 
The transition function δ  is defined as follows. Let k1(t) = s(t) - α(t), k2(t) = s(t) + β(t), and α(t), 
β(t) are real crisp numbers such that s(t) ∈ [k1(t), k2(t)] ⊆ Q. Without lost of generality, let s(t) = 
λk1(t)+(1-λ)k2(t) for some λ∈(0, 1), τ1 = (k1 − dgij +εij)/rij, and τ2 = (dgij + εij − k2)/rij. We have the 
transition function δ as the following fuzzy rules: 
IF uij = N AND O(S(t)) = (α(t), s(t), β(t)) THEN τ1 later S(t+τ1) = (α(t) - lijεij /rij, s(t)+λlijεij /rij, 
β(t)). 
IF uij = P AND O(S(t)) = (α(t), s(t), β(t)) THEN τ2 later S(t+τ2) = (α(t), dgij + εij -β(t), dgij + εij). 
IF uij = Z AND O(S(t)) = (α(t), s(t), β(t)) THEN state = (α(t), s(t), β(t)). 
Let σ : L2(Σ)* Σ be the support extraction operator. The remaining components of Mij are 
Σ = σ(N∪P∪Z), universe of the input words, 
F = [dgij − εij, dgij + εij], and  
T = {dt}={τ1, τ2}. 
 18 
The fuzzy sets P, Z, N are words in L2(Σ). The membership functions of the fuzzy words negative, 
zero, positive, P, Z, and N are:  
negative(s) = 1 for s < 0; 
zero(s) = 1 for s = 0; 
positive(s) = 1 for s > 0; 
P(uij) = 1 iff uij =mP; 
Z(uij) = 1 iff uij =mZ; 
N(uij) = 1 iff uij =mN. 
According to the rule base, when the support of O(S(t)) is [k1(t), k2(t)] with k1(t) < dgij −εij and k2(t) 
< dgij +εij, such that error(S(t)) is negative, by applying uij=P with degree µ = negative(error(S(t))) 
during time interval [t, t + (dgij + εij -k2(t))/rij], the support of O(S(t+dt)) becomes [k1(t)+lijεij/rij, 
k2(t)]. When the support of observed state O(S(t)) is [k1(t), k2(t)] with k1(t) > dgij −εij and k2(t) > dgij 
+ εij, such that error(S(t)) is positive, by applying uij=N with degree µ = positive(error(S(t))) 
during time interval [t, t + (k1(t)- dgij −εij)/r] the support of O(S(t+dt)) becomes [k1(t), dgij + εij]. 
According to Lemma 1 and equations (17) and (18), the support of S(t) eventually falls in F, that is, 
the rule base of the controller makes the IEEE 802.11e subsystem, category j in mobile node i, 
attains the traffic specification TSPEC and the delay variation is within [dgij −εij, dgij + εij].  
Q.E.D. 
One important property concluded from Theorem 1 is that if the wireless network system is 
properly described with words (with a GFA) under constraints – the minimum and maximum state 
moving rates lij and rij, and the precision constraint εij, a stable fuzzy feedback controller is 
designed. In other words, if lij, rij and εij are learned from input-output observations, a 
corresponding QoS controller with a very simple rule-base can be automatically and objectively 
generated. Therefore, to reduce the computation complexity, we use simple fuzzy rules for stable 
QoS control and problems P1 and P2 are solved. 
 
According to Theorem 1, we can construct a fuzzy controller with simple fuzzy rules for 
achieving QoS objectives in the mobile wireless networks. In the following constructions of fuzzy 
rules, quantities of delays and delay changing rates are multiples of the slot-time specified in the 
standard. By previous described theories, before we obtain the adequate fuzzy rule base without 
much subjective expert knowledge involved, we only need to find the maximum and minimum 
rates of delay changes when applying control commands to the wireless network. To attain the 
goal, we design the feedback controller for the automaton Mij as Fig. 6. The fuzzy sets P and N 
represent fuzzy concepts “Positive” and “Negative” error values respectively while P’ and N’ 
 20 
 
1, [ ]( )[ ]
0, otherwise
min
L min
CW L n
CW nµ == 

 (22.1) 
 
1, [ ]( )[ ]
0, otherwise
min
M min
CW M n
CW nµ == 

 (22.2) 
 
1, [ ]( )[ ]
0, otherwise
min
S min
CW S n
CW nµ == 

 (22.3) 
The membership functions of the singleton fuzzy sets L[n], M[n], and S[n] are time-variant and 
they are configured on-the-fly by the upper layers controller gn according to network status – the 
observed delay [ ]d n . 
C. The upper layers controller gn 
 The design of the controller of upper layers including application considers the goal 
backoff delay adaptation for constituting the conclusion fuzzy singletons required by the MAC 
layer controller fn. The estimation of goal backoff delay requires upper layers information such as 
TSPEC including video rate rVID, goal total delay dTSPEC, and allowable delay variance ε. Note 
that we do not modify any encoding scheme in the application layer. The controller gn serves the 
protocols above MAC to collect information such as TSPEC and packet lengths, and it performs 
control to its plant – protocols below MAC. 
 To acquire enough bandwidth when the network is crowded, the upper layers controller gn 
scales down the calculated goal backoff delay so that the MAC layer controller fn outputs smaller 
CWmin control to track the goal. This reduces the MAC access delay and hence increases the radio 
rate. When the network state is not crowded, the gn keeps the calculate goal delay without scaling, 
and send it to the MAC layer controller as reference. Therefore, no matter how the network status 
changes, the upper layers controller gn always provides reasonable backoff reference to the MAC 
layer controller fn. The calculation of the target backoff is as follows. According to (7), the EDCA 
backoff is as follows. 
   EDCA NAV cold d d d= − −  (23) 
To obtain the total goal delay, gn estimate the goal backoff delay by dividing the MAC packet 
length lMAC by the required video rate. Then the goal total delay dTSPEC is estimate as 
 
[ ][ ] MACTSPEC
VID
l nd n
r
=  (24) 
where lMAC is the MAC layer MPDU length which is known before a packet entering the MAC 
transmission; rVID is the video rate. This is the goal total delay in the TSPEC so that the MAC 
radio rate can track the required video rate when the network is not crowded. That is, in (23) the 
delay dNAV and dcol caused by the background traffic tend to be zero and then the required delay 
transmitting a packet is 
 22 
Procedure GBA(r: round)//Goal backoff delay 
Begin 
//Estimate required goal backoff delay 
bk = average(dg- MACPktLen/MaxRadioRate - tSIFS – tACK, w); 
//Average Goal Delay Eq.(25) 
dg_bar = average(MACPktLen/MaxVideoRate, w) 
if d_bar > dg_bar + epsilon  
    lambda = k*dg/d; 
   //Network is crowded 
//Scaling down singletons Eq.(27) 
    LMS = [bk/2, bk, bk*2]*lambda; 
if d_bar < dg_bar – epsilon 
    //Network is NOT crowded 
//Scaling singletons back Eq.(29) 
    LMS = [bk/2, bk, bk*2]; 
if dg_bar – epsilon<d_bar<dg_bar + epsilon 
//The last backoff is adequate 
//Remaining the last singletons 
    LMS = LMS; 
End 
Figure 7. The goal backoff delay adaptation algorithm. 
 
IV. EDCA MODEL WITH CROSS-LAYER INTERFACE 
This section accomplished the research steps and objectives in the porject proposal which was 
the first two steps of the 2nd year and was as follows (written in original Chinese statements): 
 
Step 10. 設計與控制器 Wireless MAC 的介面 (Design of cross-layer interface for the 
Wireless MAC QoS controller) 
Step 11. 修改 Free 的 Wireless MAC 的 SoC 介面 (Modification of SoC interface for the 
Wireless MAC SIP) 
Step 12. 系統模擬與設計 (System Level Specification, Design, and Simulation) 
Step 13. FPGA驗證 (FPGA Verification) 
 
Considering the implementation of the proposed HCLC QoS controller in the EDCA function, 
we have to realize the EDCA model with cross-layer interface. This section provide the EDCA 
function realization using SDL specification language to prove that the proposed HCLC 
controller is a reusable silicon intellectual property (SIP) that can be embedded into general 
EDCA function. Unlike legacy DCF functional having specification and description language 
(SDL) descriptions in the standard, EDCA does not have standard SDL specifications. Therefore, 
we propose the SDL behavior model of the EDCA with cross-layer interface (EDCA-XLI) so that 
students and researchers are able to practice their cross-layer design of real-time applications in 
wireless networks. We demonstrate the deduction processes to show how the legacy DCF 
specifications are extended into EDCA-XLI. We call the deductions the morphisms from the 
 24 
selects the backoff time. If internally inside a QSTA there is more than one flows’ backoff timers 
count to zero, the highest priority flow will access the channel and the lower ones start their own 
deferring and backoff procedures. The internal collision avoidance is accomplished by virtual 
collision resolution. If a frame collides or is lost during propagation without ACK coming back, 
the traffic also waits for an additional EIFS and starts its backoff procedure [24]. In both DCF 
and EDCA, if the transmission failure count is more than the retry limit, the TPDU is dropped. 
 
 
 
Figure 8. Figure 1. SDL diagram representing DCF [25]. 
 
Contention
Window
Defer 
NAV(RTS)
DIFS
Next FrameBackoff-Windows
DIFS
+backoff
Backoff after deferNAV(CTS)
RTS
ACKCTS
Data
SIFS
SIFS
SIFS
Source
Station
Destination
Station
Some other
Stations
 
Figure 9. Figure 2. The DCF deferring and backoff. 
 
In this project, we identify the differences between DCF and EDCA to construct the 
morphisms. First, we identify backoff related blocks in the DCF SDL model. Then, find the 
 26 
Fig. 8 maps into four signals TPDU0 to TPDU3 respectively. The TPDUs go with their signal 
and enter four different queues of different priorities. Each signal originally in the DCF is 
expanded into four signals with respective TID in the EDCA. Leaving the TID_QSTA block, data 
and variables are identified with their TID. 
The DCF Protocol_Control block maintains the RTS/CTS/Data/ACK transmission sequence 
and the retransmission of a TPDU. By morphism into the EDCA block Protocol_Control_QSTA, 
as Fig. 11, four protocol control sub-blocks Protocol_Control_0 to Protocol_Control_3 each with 
different CW parameter set associating four TPDU queues to perform directed Data/ACK 
transmission and retry for their respective traffic class.  
In legacy 802.11, the Transmission block is responsible for backoff and interface with physical 
layer. When designing the morphism to 802.11e, it becomes Transmission_QSTA comprising 
four identical subblocks Transmission_0 to Transmission_3 as shown in Fig. 12. In Fig. 12, when 
performing the backoff scheme, CW parameters from Protocol_Control_QSTA and the channel 
state sensed by the Reception_QSTA block are essential arguments to start and stop counting 
down of the backoff timer. Since the subblocks Transmission_0 to Transmission_3 are identical 
and there are four timers counting concurrently, there could be timers that count to zero at the 
same time. To realize the priority, in addition to distinguishing priorities in 
Protocol_Control_QSTA block, Transmission_0 to Transmission_3 also send busy signals to 
each other as shown in Fig. 12. That is, each time when Transmission_i wins the channel 
contention, it will stop the backoff timers and transmission behaviors of the other three subblocks. 
The Transmission_QSTA and Protocol_Control_QSTA together accomplish the virtual collision resolution and the 
contention of traffics is as depicted as follows and shown in Fig. 11 and Fig. 12. When a TPDU is 
in queue of priority i, 0 ≤ i ≤ 3, Protocol_Control_i sends backoffi signal associated with CW 
parameters to block Transmission_i if channel is idle. Receiving Backoffi, Transmission_i starts 
its backoff timer. When the backoff timer counts to zero, Transmission_i informs 
Protocol_Control_i that the backoff is done (Bkdone). Then, Protocol_Control_i invokes zero 
backoff again to make sure that the channel is still idle and forwards the confirmation to the 
VCS_QSTA. If there are more than one Bkdone confirmations, the VCS_QSTA performs 
arbitration according to TIDs and the priority is 3 > 2 > 1 > 0. Among the traffics, the highest 
priority one, say i, is selected to trigger transmission request (TxRequest) to Transmission_i and 
the TPDU is sent. If traffic i fails in the internal contention or fails the transmission, 
Protocol_Control_i sends backoffi to start next backoff scheme again and the QoS short retry 
count (QSRC) increase if QSRC is smaller than the retry limit.  
 
2) The cross-layer interface for EDCA 
In EDCA-XLI, we add two features – the MAC delay output calculation in the 
Protocol_Control_i’s for and the CW input interface. The MAC delay timer of a TPDU counts the 
 28 
 
The simulations are extensively performed. We first show the EDCA-XLI functions with 
Message Sequence Charts (MSCs) [33] then we illustrate FPGA implementation result of a fuzzy 
QoS controller SIP utilizing the EDCA-XLI. The simulations show that SIP designers can 
efficiently verify their cross-layer design with EDCA-XLI as well as a student can understand 
impacts of the OSI model when designing a SIP or an embedded system component. 
1) External Collisions MSCs 
Illustrated in Fig. 15(a) is the external collision situation and the MSC simulations are shown 
in Fig. 16 and 17. During phase I, access category 3 backoff timer reaches 0 first and gains the 
channel access right but it fails receiving the ACK frame. Increasing its QSRC, it checks  that the 
count is smaller than the retry limit so it restart the backoff scheme. In phase II, it first gains the 
access again by still having random generated zero backoff time and successfully sends the data 
receiving ACK frame. Then it releases the access and the CW timer returns to  CWmin. During 
phase III, after random generation, the backoff time is still the smallest, it regains the access and 
successfully send its data as Fig. 18.  
2) Internal Collisions MSCs 
Illustrated in Fig. 15(b) is the internal collision avoidance situation. During phase V, the 
backoff timers of access categories AC[1], AC[2], and AC[3] count to zero at the same time and 
the internal collision is shown in Fig. 19. Having the highest priority, AC[3] gains the access 
right and AC[1] and AC[2] increase their QSRCs. If QSRC1 and QSRC2 does not exceed the 
retry limits, AC[1] and AC[2] restart backoff procedure as Fig. 20. In phase VI, coincidently that 
AC[1] and AC[2] have the same backoff time again, the VCS solves the collision by assigning 
AC[2] the access right. Then QSRC1 is increased again and go back to backoff procedure again 
as Fig. 21. 
 
 30 
 
Figure 11. Figure 5. Detail SDL specification diagram of Protocol_Control_QSTA. 
 
 
Figure 12. Figure 6. Detail SDL specification diagram of Transmission_QSTA. 
 
 32 
AC[3] gets channel access
AC[3] TX begin
 
Figure 16. Figure 10. MSC of Fig. 15(a) phase I. 
ACK fail
retry ; Backoff again
 
Figure 17. Figure 11. MSC of Fig. 15(a) phase II. 
 34 
AC[1]&AC[2] Backoff againRetry
AC[3] Transmission
 
Figure 20. Figure 14. MSC of Fig. 15(b) phase V. 
AC[2]&AC[1] Backoff finish at the same time
AC[2] Transmission
AC[1] Backoff againRetry
 
Figure 21. Figure 15. MSC of Fig. 15(b) phase VI. 
 36 
Step 12. 系統模擬與設計 (System Level Specification, Design, and Simulation) 
Step 13. FPGA驗證 (FPGA Verification) 
 
A. The RTL model of the fuzzy controller 
To accomplish Step 13, we propose a embedded RTL level design methodology as follows. 
The RTL model of the controller is as Fig. 24. 
error
d/dt
error
Membership
functions
N
Singletons
at conclusion
(all 1’s)
min Aggregation &
defuzzy
Divided by zero
prevention
P
N
P
 
(a) Fuzzy rule base of a TC. 
8–bit 
fixed-pnt
with 7-bit
fraction
max=1 Divide-by-zero
prevention
3
1
k k
k
c µ
=
∑ 
Sum Divider
7-bit fraction
7-bit frac.
7-bit frac.
4
4
4
8
8
8
12
12
12
9
P
Z
N
Singletons
c1
c2
c3
3
1
k
k
µ
=
∑
3
1
3
1
k k
k
ij
k
k
c
CWmin
µ
µ
=
=
=
∑
∑

 
(b) The defuzzification unit. 
Figure 24. The RTL model of the fuzzy controller for a traffic category. 
 
 
Fig. 24(a) is the block diagram of the fuzzy feedback controller for a TC using Mamdani 
inference method. Fig. 24(a) realizes the fuzzy rule base output function of the automata. The 
aggregation method uses the maximum operation while the implication method adopts minimum 
 38 
Therefore, no matter realizations in silicon intellectual property or embedded software, the above 
observations are useful in the specification phase of the design. 
VI. EXPERIMENTS 
We first give the experiments of the observer and then the controller for TCij. In the 
experiments, we take the cardinality of histogram Hij=32. 
A. The observer and Saturation Detection 
For a specific traffic category, given the goal delay in number of slots are as Fig. 25, which is a 
sine wave with offset 555 and amplitude 333 and the background traffic are dynamic and the 
frame length is in exponential distribution with dynamic mean λe = 111 + 50*sin(0.01t) and the 
arrival rate is in Poisson distribution with dynamic mean λp = 0.4 + 0.1*square_wave(0.01t), 
where “D+A*sin(ωt)” and “D+A*square_wave(ωt)” respectively represents a sinusoidal and 
periodical pulse signal with offset D, amplitude A and angular frequency ω. Cooperating with the 
proposed controller, the observer detects bandwidth saturation as circled in Fig. 25. When both the 
two distribution parameters of the background are small and the traffic is not busy, the goal delay 
is achievable. Once the same goal delay was fulfilled but was not later for certain duration, the 
congestion level can be estimated by the integral of error along the duration. The number of 
packet losses due to RetryLimitij is also accumulated in the duration. Furthermore, by the proposed 
observer, the detection is more accurate than by traditional moving average methods since the 
proposed observer is indeed a Gaussian impulse noise filter. 
B. The controller of TCij 
For the controller of certain traffic category, we perform experiments in 4 levels – with or 
without background traffic, sampling period in frames, with or without RTL level optimizations, 
and types of TSPEC dynamics to simulate the controller in 16 different situations. The sampling 
periods of the four TCs are 3, 2, 1, and 1 frames which means that CWmini0, CWmini1, CWmini2, 
and CWmini3 update every 3-, 2-, 1-, and 1- frames respectively. The other parameters in vector 
form for respective TCs 0 to 3 (priority from low to high) are listed as follows: 
 Basic and data rate of current node: Bi = 2Mbps. Slot time = 9µ seconds. 
 Average frame length = [1152/2 512 512 128] bytes. 
 Retransmission limits: RetryLimitij = [7, 6, 5, 4] retries. 
 TSPEC: For mean desired bandwidth, bij =[1024Bi−1536, 512, 512, 512] kbps. The lowest 
priority traffic is a TCP flow using residual bandwidth Bi−1536kbps. Traffics TC1 and TC2 
are VBR and CBR UDP flows for video. Traffic TC3 is the voice flow such as VoIP and has 
the highest priority. The equivalent mean desired delay in unit of slots then become dgij = [976, 
868, 868, 217]. We add dynamics to the desired delay to see whether the controller can 
 40 
Sampling Period in frames T(TC0)=3, T(TC1)=2, T(TC2)=1, T(TC3)=1 frames 
 Statistics Pure software RTL Optimized 
TSPEC dg SIN SQR SIN SQR SIN SQR SIN SQR 
Traf. Cat. VAR MEAN VAR MEAN 
3 944  870  224  223  630  618  211  210  
2 17401  26301  845  841  17632  26332  851  841  
1 21909  27961  820  835  21507  27617  847  832  
Delay 
variance and  
mean in slots 
 
0 4247  3444  938  941  22794  20866  886  877  
FPGA Max. Clock Rate N.A. 31.966MHz 
Dynamic FPGA Power N.A. 
2.4mW@1MHz 
84.51mW@31.966MHz 
From these simulations, the controller fulfills TSPEC dynamics in both delay and jitter even the 
background traffic bursts. The power consumption is averagely saved 14% when using longer 
sampling periods for lower priority TCs. 
 
C. QoS Control SIP using EDCA-XLI 
The example QoS SIP design [19][20][34] is verified by network simulator (NS2) [35] and 
Matlab System-Generator where the Xilinx FPGA or embedded system component on the PCB 
board communicates network protocols in the NS2 EDCA-XLI. Thus, a student or a researcher 
can understand the network protocols impacts on the SIP under test. The implementation platform 
is as Fig. 26 where the left personal computer installed with NS2 emulates the embedded host 
CPU and provide test benches. This privileges porting of the operating system and protocol stacks. 
The EDCA-XLI provide cross-layer interface for the fuzzy controller SIP and the protocols. 
 
PCB board
QoS Fuzzy 
Controller SIP 
(Xilinx FPGA)
Flow Control
(DSP/MCU)
Replace embedded host CPU;
Provide test benches
Wireless Networks, 
Scenarios and 
Protocols
(NS2)
Provide PCB link
& configurations
EDA tools 
(MATLAB Simulink)
RJ-45
Cross-Layer 
Interface
EDCA-XLI
 
Figure 26. System Level Verification of the QoS control SIP using EDCA-XLI. 
 
 
 42 
are given in the IEEE 802.11e [24]. The interface queue length for all traffics is 50. The MPEG-4 
encoder and sender is EvalVid [36][37] which encapsulate I, P, and B frames data into variable 
packet sizes. The other protocol parameters of the traffics are also as those in [34]. Therefore, the 
video bit rate is not constant. 
There are twice background bursts in the total simulation time 70 seconds. One starts at time 
7th second and ends at 30th second and the other starts at time 40th second and ends at 63rd second. 
The video under streaming is the “high-way” where the 1230th to 1260th frames have complex 
component “overpass,” and require higher bandwidth for streaming. This video is used to test the 
performance of the fuzzy controller when the MPEG-4 streams and the background traffics are 
requiring bursting bandwidth. The average PSNR comparisons are available in Table V. In Table 
V, the directions of traffics or streams are denoted by the arrows “mn,” where m and n 
represent node indices. As Table V, there are four cases in the simulations. Case 0 shows the 
PSNR performance when there is no background. Case 0 is used as a control experiment. Case 1 
shows that when there are 5 background traffics, the PSNR of the MPEG4 stream “01” over 
EDCA is improved by fuzzy control SIP and is as better as in Case 0. If there is no fuzzy control 
using the EDCA-XLI, the respective PSNR performance is degraded by the background no 
matter using standard DCF or EDCA. In Case 2, at the same time there are two MPEG4 streams 
“01” over DCF and “1415” over EDCA. There are also 5 background traffics in Case 2. If 
the two MPEG4 streams do not use fuzzy control SIP, the first column shows both poor PSNR 
performances. However, even only one stream “1415” over EDCA uses fuzzy control SIP, the 
second column shows that not only the PSNR performance of “1415” is recovered but also that 
of “01” is improved. In Case 3, at the same time there are two MPEG4 streams “01” and 
“1415” both over EDCA. When both do not use the fuzzy control, the performances are poor 
as shown in the first column. As shown in the second column, if one of them uses the SIP, its 
PSNR is recovered while the other one is not. The PSNR performances are both recovered by the 
SIP as we can see at the third column. Shown in Fig. 27. are the PSNR intant performance 
sketches when two MPEG-4 streams exist under such noisy environment. Fig 27. (a) shows that 
both the two steams affect each other and obtain very bad PSNR performance while using HCLC 
as shown in Fig. 27(a), they both performs very well even when the 2Mbps bandwidth capacity is 
suddently saturated, the performance goes back to as no noise very quickly. The real video 
snapshots at the 1259th frame of different cases are shown in Fig. 28. For the fairness, we study 
two comparing aspects. First, as shown in Table V, when both using the SIP, the traffics of the 
same quality specifications have the same throughput and video quality no matter how their 
background environments are. Second, Table V shows that nodes using the SIP for streaming 
does not degrade performance of the other co-existed MPEG4 streams without the SIP. Moreover, 
the means and standard deviations (µbk, σbk) of total background throughput in cases 0 to 3 are 
 44 
 0
 5
 10
 15
 20
 25
 30
 35
 40
 0  200  400  600  800  1000  1200  1400  1600  1800  2000
PS
NR
 (d
b)
frame number
EDCF-MPEG-1
EDCF-MPEG-2
 
(b) HCLC-controlled 
Figure 27. Instant PSNR of two co-existent MPEG-4 streams with 5x300kbps background 
traffics. 
 
TABLE V.  AVERAGE PSNR COMPARISONS OF MPEG-4 STREAMS OVER DIFFERENT MEDIA. THE 
STREAMS WITH HCLC CONTROL ARE MARKED WITH “(HCLC)” 
Case 0: Average PSNR (dB) – Only one MPEG-4 stream without any background traffic. 
EDCA 01 = 36.5  
  
Case 1: Average PSNR (dB) -- One MPEG-4 stream 01 with background traffics: 01, 23, 45, 
67, 1415 
DCF 01    = 20.6 
EDCA 01 = 29.0 
EDCA 01 = 36.47 (HCLC) 
 
Case 2: Average PSNR (dB) --Two co-existent MPEG-4 streams 01 and 1415 with background 
traffics: 23, 45, 67, 89, 1415 
DCF 01        = 24.6 
EDCA 1415 = 27.7 
DCF 01       = 26.0 
EDCA 1415= 36.1 (HCLC) 
 
Case 3: Average PSNR (dB) --Two co-existent MPEG-4 streams  01 and 1415 with background 
traffics: 01, 23, 45, 67, 1415 
EDCA 01 = 27.3 
EDCA 1415 = 31.2 
EDCA 01 = 36.5 (HCLC) 
EDCA 1415 = 27.2 
EDCA 01 = 36.1 (HCLC) 
EDCA 1415 = 35.6 (HCLC) 
 
TABLE VI.  BACKGROUND THROUGHPUT MEANS/DEVIATIONS IN CASES OF TABLE 2. 
Case 0: Only one MPEG-4 stream without any background traffic. 
EDCA 01: 0/0 
  
Case 1: One MPEG-4 stream 01 with background traffics: 01, 23, 45, 67, 1415 
DCF 01:     1103/134 
Fast recover 
Background bursts Background bursts 
7s                                     30s              40s                            63s 
 46 
 Figure31: Software – 1 MPEG4 HCLC-controlled stream over legacy 802.11e EDCA 
without background. (for comparison) 
 Figure 32: Software – 1 MPEG4 stream over 802.11e EDCA with 5x300kbps background 
traffics. 
 Figure 33: Software – 1 MPEG4 HCLC-controlled stream over 802.11e EDCA with 
5x300kbps background traffics. 
 Figure 34: Software – 2 MPEG4 non-HCLC-controlled streams over 802.11e EDCA with 
2x300kbps background traffics. 
 Figure 35: Software – 2 MPEG4 both HCLC-controlled streams over 802.11e EDCA with 
2x300kbps background traffics. 
 Figure 36: Hardware – 1 MPEG4 stream over 802.11e EDCA without background traffics. 
 Figure 37: Hardware – 1 MPEG4 HCLC-controlled stream over 802.11e EDCA without 
background traffics. 
 Figure 38: Hardware – 1 MPEG4 stream over 802.11e EDCA with 5x300kbps background 
traffics. 
 Figure 39: Hardware – 1 MPEG4 HCLC-controlled stream over 802.11e EDCA with 
5x300kbps background traffics. 
 Figure 40: Hardware – 2 MPEG4 both HCLC-controlled streams over 802.11e EDCA with 
2x300kbps background traffics. 
 
Each experiment produces five charts and they are delay, jitter, and loss rate of packets, PSNR and 
throughputs. The video under streaming is the “high-way” where the 1230th to 1260th frames have 
complex component “overhead bridge.” This video is used to test the performance of the HCLC 
controller when the MPEG-4 stream is requiring bursting throughput. That is, when HCLC is 
applied no matter hardware or software realization and no matter whether background is crowded, 
the HCLC performs very good fairness and very good bursting immunity in Fig. 29-40. The 
average PSNR comparisons are available in Tables VI  to IX while the real video snapshot at the 
1259th frame of different cases are shown in Figures 41 to 44. 
 
VII. PROJECT PROGESS EVALUATION 
The project schedule in the proposal was as the following table.  
 
 1st year 
 48 
Step 9. 整合NS2與QoS控制器硬體描述並進行test bench測試 
第二年進行Silicon IP的設計與實現，以整合到現有802.11 媒體存取控制(MAC)之中 
Step 10. 設計與控制器Wireless MAC的介面 
Step 11. 修改Free的Wireless MAC的SoC介面 
Step 12. 系統模擬與設計 
Step 13. FPGA驗證 
Step 15. 結案。 
 
All the goals are achieved and we also have the following valuable results: 
 
1. Distributed simulation and verification platform of embedded system and silicon IPs: 
the multimedia streaming using EDCA function is verified via integrating several EDA tools 
including the network simulator NS2, MATLAB Simulink, TI DSP Code Composer Studio 
(CCS), and HDL simulator ModelSim. The whole simulation platform can be partition into 
two parts. One is the embedded system end and the other one is the protocol stack end. The 
cross-layer hierarchy HCLC was built on these two parts where the interactions between 
them are done via the networks. That is, these simulation tools cooperate via network 
connections. We can further use this simulation platform in distant learning of SoC and 
embedded systems. 
2. Cross-layer interface MAC layer SIP behavioral model: Via the Specification 
Description and Language (SDL), we design the behavioral model of IEEE 802.11e MAC 
layer silicon IP with cross-layer interface enhancement. This is a novel feature being 
superior to all current 802.11e MACs. 
 
The above results will be very useful in the continuous researches. 
 
VIII. CONCLUSIONS 
This project proposes novel hierarchical cross-layer control (HCLC) to ensure robustness of 
MPEG-4 streaming over ad-hoc wireless networks. In the HCLC architecture, a layer controller 
receive its upper layers control as reference input and produce its own input it its next lower layer. 
The HCLC features properties of transparent design, measurement, and analysis of each layer 
controller while at the same time it preserves traditional OSI protocol structure. Applying the 
HCLC to the IEEE 802.11e QoS enhancement, we ensure the robustness and fairness of 
multimedia streams even when networks have uncertain dynamics inherently. In the application 
of the HCLC to the IEEE 802.11e, the MAC layer controller receives upper layers traffic 
 50 
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  10  20  30  40  50  60  70
Pa
ck
et
 d
el
ay
simulation time (sec)
DCF-MPEG
 
(a) Packet delay. 
 
 0
 0.02
 0.04
 0.06
 0.08
 0.1
 0.12
 0.14
 0  10  20  30  40  50  60  70
Pa
ck
et
 jit
ter
simulation time (sec)
DCF-MPEG
 
(b) Packet jitters. 
 
 0
 20
 40
 60
 80
 100
 120
 140
 0  10  20  30  40  50  60  70
Pa
ck
et
 L
os
s 
R
at
e
simulation time (sec)
DCF-MPEG
 
(c) Packet loss rate. 
 
 0
 5
 10
 15
 20
 25
 30
 35
 40
 0  200  400  600  800  1000  1200  1400  1600  1800  2000
PS
NR
 (d
b)
frame number
DCF-MPEG
 
(d) PSNR of video frames. 
 
 0
 200
 400
 600
 800
 1000
 0  10  20  30  40  50  60  70
th
ro
ug
hp
ut
 (K
bp
s)
simulation time (sec)
DCF-MPEG
background-0
background-1
background-2
background-3
background-4
background-5
 
(e)Throughput 
Figure 29. Software – 1 MPEG-4 stream over 
legacy 802.11 DCF with 5x300kbps background 
traffics. 
 
 52 
 0.4
 0.42
 0.44
 0.46
 0.48
 0.5
 0.52
 0.54
 0.56
 0.58
 0.6
 0  10  20  30  40  50  60  70
Pa
ck
et
 d
el
ay
simulation time (sec)
EDCF-MPEG
 
(a) Packet delay. 
 
 0.005
 0.01
 0.015
 0.02
 0.025
 0.03
 0  10  20  30  40  50  60  70
Pa
ck
et
 jit
ter
simulation time (sec)
EDCF-MPEG
 
(b) Packet jitters. 
 
 0
 5
 10
 15
 20
 25
 30
 35
 40
 0  10  20  30  40  50  60  70
Pa
ck
et
 L
os
s 
R
at
e
simulation time (sec)
EDCF-MPEG
 
(c) Packet loss rate. 
 
 0
 5
 10
 15
 20
 25
 30
 35
 40
 0  200  400  600  800  1000  1200  1400  1600  1800  2000
PS
NR
 (d
b)
frame number
EDCF-MPEG
 
(d) PSNR of video frames. 
 
 0
 200
 400
 600
 800
 1000
 0  10  20  30  40  50  60  70
th
ro
ug
hp
ut
 (K
bp
s)
simulation time (sec)
EDCF-MPEG
background-0
background-1
background-2
background-3
background-4
background-5
 
(e)Throughput 
Figure 31. Software – 1 MPEG-4 HCLC-
controlled stream over 802.11e EDCA without 
background traffics. 
 54 
 0.4
 0.42
 0.44
 0.46
 0.48
 0.5
 0.52
 0.54
 0.56
 0.58
 0.6
 0  10  20  30  40  50  60  70
Pa
ck
et
 d
el
ay
simulation time (sec)
EDCF-MPEG
 
(a) Packet delay. 
 
 0.005
 0.01
 0.015
 0.02
 0.025
 0.03
 0  10  20  30  40  50  60  70
Pa
ck
et
 jit
ter
simulation time (sec)
EDCF-MPEG
 
(b) Packet jitters. 
 
 0
 5
 10
 15
 20
 25
 30
 35
 40
 0  10  20  30  40  50  60  70
Pa
ck
et
 L
os
s 
R
at
e
simulation time (sec)
EDCF-MPEG
 
(c) Packet loss rate. 
 
 0
 5
 10
 15
 20
 25
 30
 35
 40
 0  200  400  600  800  1000  1200  1400  1600  1800  2000
PS
NR
 (d
b)
frame number
EDCF-MPEG
 
(d) PSNR of video frames. 
 
 0
 200
 400
 600
 800
 1000
 0  10  20  30  40  50  60  70
th
ro
ug
hp
ut
 (K
bp
s)
simulation time (sec)
EDCF-MPEG
background-0
background-1
background-2
background-3
background-4
background-5
 
(e)Throughput 
Figure 33. Software – 1 MPEG-4 HCLC-
controlled stream over 802.11e EDCA with 
5x300kbps background traffics. 
 
 56 
 0.4
 0.42
 0.44
 0.46
 0.48
 0.5
 0.52
 0.54
 0.56
 0.58
 0.6
 0  10  20  30  40  50  60  70
Pa
ck
et
 d
el
ay
simulation time (sec)
EDCF-MPEG-1
EDCF-MPEG-2
 
(a) Packet delay. 
 
 0.005
 0.01
 0.015
 0.02
 0.025
 0.03
 0  10  20  30  40  50  60  70
Pa
ck
et
 jit
ter
simulation time (sec)
EDCF-MPEG-1
EDCF-MPEG-2
 
(b) Packet jitters. 
 
 0
 5
 10
 15
 20
 25
 30
 35
 40
 0  10  20  30  40  50  60  70
Pa
ck
et
 L
os
s 
R
at
e
simulation time (sec)
EDCF-MPEG-1
EDCF-MPEG-2
 
(c) Packet loss rate. 
 
 0
 5
 10
 15
 20
 25
 30
 35
 40
 0  200  400  600  800  1000  1200  1400  1600  1800  2000
PS
NR
 (d
b)
frame number
EDCF-MPEG-1
EDCF-MPEG-2
 
(d) PSNR of video frames. 
 
 0
 200
 400
 600
 800
 1000
 0  10  20  30  40  50  60  70
th
ro
ug
hp
ut
 (K
bp
s)
simulation time (sec)
EDCF-MPEG-1
EDCF-MPEG-2
background-0
background-1
background-2
background-3
 
(e)Throughput 
Figure 35. Software – 2 MPEG-4 both 
HCLC-controlled streams over 802.11e EDCA 
with 2x300kbps background traffics. 
 
 
 58 
 0.4
 0.42
 0.44
 0.46
 0.48
 0.5
 0.52
 0.54
 0.56
 0.58
 0.6
 0  10  20  30  40  50  60  70
Pa
ck
et
 d
el
ay
simulation time (sec)
EDCF-MPEG
 
(a) Packet delay. 
 
 0.005
 0.01
 0.015
 0.02
 0.025
 0.03
 0  10  20  30  40  50  60  70
Pa
ck
et
 jit
ter
simulation time (sec)
EDCF-MPEG
 
(b) Packet jitters. 
 
 0
 5
 10
 15
 20
 25
 30
 35
 40
 0  10  20  30  40  50  60  70
Pa
ck
et
 L
os
s 
R
at
e
simulation time (sec)
EDCF-MPEG
 
(c) Packet loss rate. 
 
 0
 5
 10
 15
 20
 25
 30
 35
 40
 0  200  400  600  800  1000  1200  1400  1600  1800  2000
PS
NR
 (d
b)
frame number
EDCF-MPEG
 
(d) PSNR of video frames. 
 
 0
 200
 400
 600
 800
 1000
 0  10  20  30  40  50  60  70
th
ro
ug
hp
ut
 (K
bp
s)
simulation time (sec)
EDCF-MPEG
background-0
background-1
background-2
background-3
background-4
background-5
 
(e)Throughput 
 
Figure 37. Hardware – 1 MPEG-4 HCLC-
controlled stream over 802.11e EDCA without 
background traffics. 
 60 
 0.4
 0.42
 0.44
 0.46
 0.48
 0.5
 0.52
 0.54
 0.56
 0.58
 0.6
 0  10  20  30  40  50  60  70
Pa
ck
et
 d
el
ay
simulation time (sec)
EDCF-MPEG
 
(a) Packet delay. 
 
 0.005
 0.01
 0.015
 0.02
 0.025
 0.03
 0  10  20  30  40  50  60  70
Pa
ck
et
 jit
ter
simulation time (sec)
EDCF-MPEG
 
(b) Packet jitters. 
 
 0
 5
 10
 15
 20
 25
 30
 35
 40
 0  10  20  30  40  50  60  70
Pa
ck
et
 L
os
s 
R
at
e
simulation time (sec)
EDCF-MPEG
 
(c) Packet loss rate. 
 
 0
 5
 10
 15
 20
 25
 30
 35
 40
 0  200  400  600  800  1000  1200  1400  1600  1800  2000
PS
NR
 (d
b)
frame number
EDCF-MPEG
 
(d) PSNR of video frames. 
 
 0
 200
 400
 600
 800
 1000
 0  10  20  30  40  50  60  70
th
ro
ug
hp
ut
 (K
bp
s)
simulation time (sec)
EDCF-MPEG
background-0
background-1
background-2
background-3
background-4
background-5
 
(e)Throughput 
Figure 39. Hardware – 1 MPEG-4 HCLC-
controlled stream over 802.11e EDCA with 
5x300kbps background traffics. 
 
 62 
TABLE VII.  AVERAGE PSNR COMPARISONS OF 
MPEG-4 STREAMS OVER DCF, EDCA, AND HCLC-
CONTROLLED EDCA WITHOUT BACKGROUND  
TRAFFIC (PERFECT CASES). 
Average PSNR (dB) 
EDCA  36.479921 
EDCA + HCLC 36.479921 
EDCA+hardware 36.479921 
EDCA+hardware HCLC 36.479921 
 
TABLE VIII.  AVERAGE PSNR COMPARISONS OF 
MPEG-4 STREAMS OVER DCF, EDCA, AND HCLC-
CONTROLLED EDCA IN CROWDED WITH 5X300KBPS 
BACKGROUND. 
Average PSNR (dB) 
DCF 20.626869 
EDCA  29.088422 
EDCA + HCLC 36.477918 
EDCA+ hardware no HCLC 29.088430 
EDCA+hardware HCLC 36.479921 
 
TABLE IX.  AVERAGE PSNR COMPARISONS OF 
TWO CO-EXISTENT MPEG-4 STREAMS OVER EDCA 
AND HCLC-CONTROLLED EDCA WITH 2X300KBPS 
BACKGROUND.. 
Average PSNR (dB) 
EDCA-1 30.657466 
EDCA-2  33.996275 
EDCA-1 + HCLC 35.865495 
EDCA-2 + HCLC 36.788992 
EDCA-1+ hardware HCLC 36.479921 
EDCA-2+ hardware HCLC 36.734999 
 
 
 
 
 
 
 
 
(a)Software: with HCLC no 
background traffic 
 
(b)Software: without HCLC no 
background traffic 
 
(b)Hardware: with HCLC no 
background traffic 
 
(d)Hardware: without HCLC no 
background traffic 
Figure 41. Video results of experiments without 
background (Perfect cases). 
 
 
(a) The hanging MPEG-4 video over DCF. 
 
(b) The hanging MPEG-4 video over 
EDCA. 
 
(c) The smooth HCLC-controlled 
MPEG-4 video over EDCA. 
Figure 42. Video results of experiments with 
5x300kbps background. 
 
 
 
 64 
REFERENCES 
[1] S. L. Kota, E. Hossain, R. Fantacci, and A. Karmouch, “Cross-layer protocol engineering for wireless 
mobile networks-I,” IEEE Communications Magazine, vol. 43, no. 12, Dec. 2005, pp. 110 – 111. 
[2] V. Srivastava, M. Motani, “Cross-layer design: a survey and the road ahead,” IEEE Communications 
Magazine, vol. 43, no. 12, Dec. 2005, pp. 112 – 119. 
[3] B. Zhang and H. T. Mouftah, “QoS Routing for Wireless Ad Hoc Networks:Problems, Algorithms, and 
Protocols,” IEEE Communications Magazine, vol. 43, no. 10, Oct. 2005, pp. 110-117. 
[4] Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications: Amendment 8: 
Medium Access Control (MAC) Quality of Service (QoS) Enhancement, IEEE Standard 802.11e, Sept. 
2005. 
[5] L. Haratcherev, J. Taal, K. Langendoen, R. Lagendijkm H. Sips, “Optimized video streaming over 
802.11 by cross-layer signaling,” IEEE Communication Magzine, Vol. 44, No. 1, Jan. 2006, pp. 115- 
121 
[6]  A. Ksentini, M. Naimi, and A. Guéroui, “Toward an Improvement of H.264 Video Transmission over 
IEEE 802.11e through a Cross-Layer Architecture,” IEEE Communications Magazine, Vol. 44, No. 1, 
January 2006, pp. 107-114. 
[7] Qiong Li and M. van der Schaar, “Providing Adaptive QoS to Layered Video Over Wireless Local Area 
Networks Through Real-Time Retry Limit Adaptation,” IEEE Transactions on Multimedia, VOL. 6, NO. 
2, APRIL 2004, pp. 278-290. 
[8]  M. van der Schaar, Y. Andreopoulos, and Zhiping Hu, “Optimized Scalable Video Streaming over 
IEEE 802.11a/e HCCA Wireless Networks under Delay Constraints,” IEEE Transactions on Mobile 
Computing, Vol. 5, No. 6, June 2006, pp. 755-768. 
[9] Wenbo He and Klara Nahrstedt, “Impact of Upper Layer Adaptation on End-to-end Delay Management 
in Wireless Ad Hoc Networks,” Proceedings of the Twelfth IEEE Real-Time and Embedded Technology 
and Applications Symposium (RTAS’06), Apr. 2006, pp. 50-70. 
[10] L. Vollero, A. Banchs, and G. Iannello, “ACKS: a technique to reduce the impact of legacy stations in 
802.11e EDCA WLANs,” IEEE Communications Letters, vol. 9, no. 4, Apr. 2005 pp. 346 – 348. 
[11] Chao-Lieh Chen, "Programmable fuzzy logic device for sequential fuzzy logic synthesis", The 10th 
IEEE International Conference on Fuzzy Systems, Vol. 1, Dec. 2001, pp.107 – 110 
[12] Chao-Lieh Chen, “Generalized fuzzy automata for Fuzzy feedback control with words,” Proceedings 
of 2004 International Computer Symposium ICS2004, Taiwan, Dec 15-17, 2004, pp. 895-900. 
[13] Zhu Hua and I. Chlamtac, “Performance analysis for IEEE 802.11e EDCF service differentiation,” 
IEEE Transactions on Wireless Communications, vol. 4, no. 4, July 2005 pp. 1779 – 1788. 
 66 
[28] S. L. Kota, E. Hossain, R. Fantacci, and A. Karmouch, “Cross-layer protocol engineering for 
wireless mobile networks-I,” IEEE Communications Magazine, vol. 43, no. 12, Dec. 2005, pp. 110 – 
111. 
[29] Chao-Lieh Chen and Po-Chien Hsiao, “Supporting QoS in wireless MAC by fuzzy control,” 
Proceedings of IEEE Wireless Communications and Networking Conference WCNC’05, New Orleans, 
March 2005, Vol. 2, pp. 1242 - 1247. 
[30] Chao-Lieh Chen and Yao-Deh Huang, “Distributed Fuzzy Controller for the IEEE 802.11e QoS and 
Its RTL Fast Prototyping,” Proceedings of the IEEE International Conference on Fuzzy Systems 
(FuzzIEEE2006), to appear. 
[31] Qiong Li and M. van der Schaar, “Providing Adaptive QoS to Layered Video Over Wireless Local 
Area Networks Through Real-Time Retry Limit Adaptation,” IEEE Transactions on Multimedia, VOL. 
6, NO. 2, APRIL 2004, pp. 278-290. 
[32] IEEE Standard for Local and metropolitan area networks: Media Access Control (MAC) Bridges, 
IEEE Std 802.1D-2004, June, 2004. 
[33] Telecommunication Standardization Sector of ITU, Message Sequence Chart (MSC), ITU–T 
Recommendation Z.120, International Telecommunication Union, March 1993. 
[34] Chao-Lieh Chen, Hsin-Long Yang, and Wei-Hsiung Huang , “MAC-centric Hierarchical Cross-
Layer Fuzzy Control for Video Streaming over the IEEE 802.11e Wireless Networks,” to appear in the 
2007 International Conference on Wireless Networks (ICWN), Las Vegas, Nevada, USA, June 25-28, 
2007. 
[35] The Network Simulator -- NS-2, http://www.isi.edu/nsnam/ns/ (also in 
http://nsnam.isi.edu/nsnam/index.php/Main_Page). 
[36] J. Klaue, B. Rathke and A. Wolisz “EvalVid - A Framework for Video Transmission and Quality 
Evaluation,” Lecture Note in Computer Science, no. 2794, 2003, p. 255-272. (also in http://www.tkn.tu-
berlin.de/research/evalvid/) 
[37] Chih-Heng Ke, Ce-Kuen Shieh, Wen-Shyang Hwang, and Artur Ziviani, “An Evaluation Framework 
for More Realistic Simulations of MPEG Video Transmission,” Journal of Information Science and 
Engineering, to appear. (also in http://hpds.ee.ncku.edu.tw/~smallko/ns2/Evalvid_in_NS2.htm) 
 
 68 
英文：    According to known SoC design flow, no SIP verification 
platform can perform verification of SIP behavior under realistic wireless 
network environment before SoC integration, tapering, and embedded 
software porting. It’s a long journey to do all these things. If a bug is 
found in the SIP, no EDA tool can remove it dedicatedly for network 
communication. Even using costly SoC verification tool such as ARM-
based platform with AMBA SoC bus on the PCB, we still cannot observe 
the SIP behavior under wireless networks. With it, only we can do are 
signal wave measurement, observation and control at the instruction and 
cycle accuracy level. For networking, we still have to replicate platforms 
to construct the basic network topology for only basic experiments. After 
we success eventually, the market opportunity is gone. This is a tuff work 
for design houses. The verification platform of this project will superior 
over traditional ones and obviously shorten the development of 
networking SIPs. Thus reduce the cost effectively.  
 
可利用之產業 
及 
可開發之產品 
無線網路通訊晶片與矽智財設計、通訊網路晶片之系統層級驗證 
技術特點 
以往矽智財驗證平台，例如使用 CIC 工具 Platform Architect 
(ConvergenSC or SoC designer) 搭配具 SoC 匯流排之 PCB 硬體，如前
面所述，在尚未確定演算法在網路中是否行得通之前就必須花費大
量的成本與時間進行系統程式掛載以驗證每個 SoC Bus cycle 是否正
確。本技術具有以下重大的優點： 
省略了驅動程式掛載：MAC 或 QoS 控制 SIP 的驅動是透過 NS2 模組
模擬 SoC bus 的有限狀態機完成，因此和 HOST 是無關的
(independent)，僅利用 NS2 中的 protocol stack，包含 MAC 以及
Physical (PHY)的模組。 
 省略了通訊協定堆疊掛載：通訊協定堆疊已經存在 NS2 中，不
需另外外掛。 
 70 
與訊息也必須透過網路之系統階層，才能完整驗證，若使用過去
方法，必須真實製造多份系統來進行實際網路連線，這樣將會大
大耗費成本以及時間。 
 可進行跨協定層（cross-layer）之軟硬體之開發設計：透過 NS2
的彈性，底層 MAC 或者 PHY 層的 SIP，如果能夠支援跨協定的
設計，將可以獲致更好的效能，若以傳統驗證平台來進行，除非
耗時將協定堆疊以及作業系統嵌入(porting)到系統中，否則跨協
定設計是不可能的。我們可以在 NS2 開發上層協定之演算法，
搭配 FPGA 中之 SIP 進行軟硬體共同設計，而不必理會作業系統
之限制或架構真實系統。 
 繼承 FPGA 反覆實驗、燒錄的彈性：快速雛型(fast-prototyping)
的目的，就是能夠在修改完 SIP 之後立刻驗證其各種功能、效
能，傳統 ASIC 在 FPGA 中可以這樣進行，若談到通訊網路之
SoC，除非使用本驗證平台，嵌入式軟體上所花的時間與成本將
會非常可觀，SIP 修改完之後尚必須修改相關的嵌入式軟體(驅動
程式、協定等)，並無法立即進行 SIP 本身的驗證。 
推廣及運用的
價值 
傳統上所謂對 SIP 進行系統階層驗證，可以分兩個階段，第一驗證目
標 SIP 與其他所有 SIP(包含 MCU)之間的通訊是否符合 SoC bus 所定
義的 protocol，這部份可以以一個有限狀態機來實現在目標 SIP 中(有
的 EDA 工具可以幫助這部份)；第二階段是針對實際應用嵌入系統軟
體 (system software porting) ， 包 含 RTOS, protocol, Applications, 
drivers, …。這部份的工作不會比目標 SIP 本身的設計還要容易。舉
例來說，下圖是一個多媒體通訊的軟硬體架構圖： 
 72 
成本。 
※ 1.每項研發成果請填寫一式二份，一份隨成果報告送繳本會，一份送 貴單位研發成果
推廣單位（如技術移轉中心）。 
※ 2.本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。 
※ 3.本表若不敷使用，請自行影印使用。 
 
 MAC-centric Hierarchical Cross-Layer Fuzzy Control for 
Video Streaming over the IEEE 802.11e Wireless 
Networks 
 
Chao-Lieh Chen 
Department of Electronic Engineering 
Kun-Shan University 
Yung-Kang, Tainan County, TAIWAN 
 
Hsin-Long Yang, and Wei-Hsiung Huang 
Department of Electronic Engineering 
Kun-Shan University 
Yung-Kang, Tainan County, TAIWAN 
 
Abstract - We propose a novel hierarchical cross-layer 
control (HCLC) for video streaming over IEEE 802.11e 
wireless networks. Fuzzy logic is adopted for tackling 
uncertainty in wireless networks. At the MAC-layer, we 
adopt a fuzzy controller with adaptive conclusion fuzzy 
singletons. The application layer adapts the conclusion 
fuzzy singletons according to current video rate and 
observed MAC access delay. The HCLC comprises 
controllers in the IEEE 802.11e media access control 
(MAC) and the upper layers. The upper layers receive the 
MAC access delay feedback and calculate new reference 
goal as traffic specification (TSPEC) to the MAC layer. 
The MAC tunes the backoff parameters of the Enhanced 
Distributed Channel Access (EDCA) function to meet the 
dynamic TSPEC from upper layers. Analysis and 
experiments show that the HCLC provides real-time 
bandwidth allocation and at the same time preserves 
fairness. 
Keywords: Cross-layer, Fuzzy Control, Wireless Networks. 
1 Introduction 
 The uncertain dynamics such as mobility, link 
capacity, and many other resources along with diverse QoS 
requirements in different applications make protocol 
designs significant challenges [1]. Scientists found that 
cross-layer designs are useful to tackle some of the 
challenges and will be essential for wireless networks. 
However, there are still many open challenges such as 
interface standardization, physical layer signal processing, 
co-existence problems, cost-effectiveness assessments, and 
network states measurements [2]. This paper proposes a 
novel hierarchical cross-layer control (HCLC) model that 
provides real-time bandwidth allocation and at the same 
time preserves fairness in heterogeneous, uncertain, and 
dynamic channel conditions. Different from the abstractions 
investigated in [2], our cross-layer proposal uses 
hierarchical fuzzy feedback control to deal with the 
uncertainty and dynamics of wireless networks. As in Fig. 1, 
each of the lower layers interprets a control vector from 
upper layers as part of the dynamic command of its internal 
control system. Thus, the controller in a layer, called the 
layer controller, is transparent to its upper layers and its 
lower layers. 
MAC
Controller
Network
Controller
Transport
Controller
Transport
Observer
Network
Observer
MAC
Observer
…
…
Upper
layers
PHY
 
Figure1. Hierarchical cross-layer control. 
 
The final output of the system can be chosen at any layer. 
Let us take some layer n for explanation. Regarding into a 
specific layer n of the HCLC as Fig. 2, we regard the upper 
layers as gn and the lower layers plant as pn, then as Fig. 2, 
the composition of the layer controller fn and gn forms the 
cross-layer control and the observers compositions form the 
cross-layer observer. The objective of the whole control 
system is to track the reference input x such that the whole 
transfer function of the control system is the identity I. 
Upper layers
gn
Layer n
fn
Lower layers
plant pn
Observer
on
Observers
on+1…om
Cross-layer control
x y
Cross-layer observer ...m no oo o
n n np f g I=o oGoal:
 
Figure 2. Relationship and transparency among layers in the 
HCLC model. 
 In wireless networks, the TSPEC dynamically changes 
due to flow control, traffic re-shaping, or the mobile nodes 
recasting new roles in applications of scenarios. In this 
paper, the HCLC control architecture enhances the QoS 
ability of the IEEE 802.11e standard [3]. In the IEEE 
802.11e MAC layer QoS standard, the Enhanced 
Distributed Channel Access (EDCA) function provides 
prioritized QoS by assigning different backoff parameters. 
The parameters are the contention window (CW), 
persistence factor (PF), retry-limit (RetryLimit), and 
arbitration inter-frame space (AIFS). The EDCA function 
provides coordination for QoS enhancement. However, 
merely using EDCA function, we still suffer the following 
QoS problems: 
P1. Incognizant of uncertainties and dynamics of network 
states: The network state is affected by many uncertain 
 busy transmitting external node’s traffic, the NAVext 
representing the future use of the channel by the external 
node is set. The NAVvir is set when some other internal 
traffic is using the channel. The r-th backoff delay is 
uniformly distributed in the interval ( )[0, ]rCW .That is, 
 
( ) ( )([0, ])r rbackofft Rand CW= , (3) 
where Rand(.) is an uniform random number generator. The 
upper bound ( )rCW of the interval can be expressed in 
terms the parameters – the persistent factor PF, retrial limit 
Rmax, initial contention window CWmin before the 
transmission retrial, and the upper bound of the contention 
window CWmax. 
 ( )maxmin( , )( ) min maxmin ,r RrCW PF CW CW= ⋅  (4) 
A data frame is dropped if the number of retrials exceeds 
the retry limit Rmax. Let Tout be the timeout that a 
transmission waits for an acknowledgement, R be the total 
transmission retrials, and RNACK be the number of retrials in 
R that fail to receive the acknowledgement ACK. Therefore, 
without RTS and CTS, the total MAC access delay is 
 ( )
1 1
( ) ( )
0 0
( )
NACKR R
r r
NACK out SIFS DATA defer
r r
d R R T t t t
−
−
= =
= + + +∑ ∑  (5) 
The transmission failures are caused by collisions or 
channel errors.  
To observe the uncertain behavior of the network using 
EDCA function, we substitute (2) into (5). Then, 
 
( )
( )
1
( ) ( ) ( )
0
1
( )
[ ]
0
( )
NACK
R
r r r
backoff vir ext
r
R
r
NACK out SIFS DATA AIFS j
r
d R t NAV NAV
R T t t R t
−
=
−
=
= + +
+ + + + ⋅
∑
∑
 (6) 
In (6), d(R) is the joint random variable of the six random 
variables R, ( ) ( ) ( ), ,r r rbackoff vir extt NAV NAV , RNACK and 
( )r
DATAt . They 
follow different probability distributions. Without specific 
assumptions on the distributions, neither the momentums of 
these probability distributions nor the correlations among 
these random variables are certain. Moreover, even when 
assumptions on the distributions are made, the delay results 
are sensitive to these variables except restricting the 
network applications. However, restrictions limit the 
application domain and reliability. 
To observe of the EDCA function, we can further 
substitute (3) and (4) into (6). Then, 
 ,EDCA NAV cold d d d= + +  (7) 
where 
 ( )max
[ ]
min( , )
min max
1
         0,min ,
EDCA AIFS j
R
r R
r
d R t
Rand PF CW CW
=
= ⋅
 + ⋅ ∑
 
 
( )
( )
( ) ( )
1
1
( )
0
NACK
R
r r
NAV vir ext
r
R
r
col NACK out SIFS DATA
r
d NAV NAV
d R T t t
=
−
=
= +
= + +
∑
∑
 
In (7), the delay portion dEDCA is a random process 
containing EDCA parameters. For fixed contention 
parameters, a multimedia stream will fail to commit the 
quality requirement when the node is in a crowded 
environment. This is because R and RNACK tend to be large 
when the network is crowded. This suffers the problems P1 
and P3 – incognizance of network state and unfairness in 
unequal network status. Due to packet losses and delay, the 
throughput of a node streaming the same multimedia in 
crowded area will be much less than the one in sparse area. 
Therefore, the unfairness situation happens. In HCLC, to be 
instantly cognitive to the network state, we consider the 
manipulation of the parameters in dEDCA. When the network 
state is crowded, we adjust CWmin small. It is sufficient and 
much more easily to adapt CWmin by fuzzy controller rather 
than adapting other parameters such as PF and Rmax. 
According to (4), for any adaptation of PF or Rmax, there 
exists an equivalent adaptation of CWmin. The fuzzy 
controller using CWmin as control must always tracks the 
network state feedback and the network state observer must 
be immune to traffic bursts. Since the term ( )rDATAt  in dcol is 
determined in upper layers, it cannot be tuned in the MAC 
layer. Thus, upper layers should cooperate with the MAC 
layer and produce new TSPEC for the MAC layer 
controller to follow. Therefore, we design the HCLC 
controller to meet these requirements. 
3 Design of the HCLC Controller 
 Let the plant pn in Fig. 2 be the mapping pn: {CWmin} 
 {d(R)}, where {.} denotes the range of the object in the 
bracket. The objective of this paper is to design gn: 
{(sending rate, packet length, d(R))}  TSPEC and fn: 
{d(R)}  {CWmin} such that d(R) meets the TSPEC. Fig. 4 
is a conceptual explanation. Regarding the water level in 
container as the delay, we explain how the HCLC controller 
works. Variable TSPEC results in different goal backoff 
delay dg. As Fig. 4, to attain the TSPEC, gn estimates dg. 
The delays caused by background traffics are dNAV and dcol 
which are not controllable and hard to predict. The MAC 
layer controller fn adapts the backoff delay by adapting 
CWmin to make dEDCA = dg and wishes that the total delay d 
= dEDCA + dNAV + dcol in (7) satisfies the TSPEC. If the 
background-caused delay (dNAV + dcol) already exceeds the 
delay constraint in TSPEC, the channel is tentatively 
saturated and CWmin is tuned to minimum such that the 
delay of current traffic can be quickly decreased. The goal 
backoff delay dg estimated by gn and the required backoff 
delay dEDCA controlled by fn are discrete-time signals. 
Moreover, to deal with the network bursts, ramping of the 
total delay is achieved by over-estimating and under-
estimating goal backoff delay designedly. 
  
( )
( )
inf [ ]
( ) 1
inf [ ]
backoff
N
backoff
e t n
e
t n
µ
∆
=
− ∆

  (14.2) 
 ( ) 1
2
max
P
max
CW e
e
CW
µ
′
′
′ =

  (15.1) 
 
( )( ) 1
2
max
N
max
e CW
e
CW
µ
′
′
−
′ =

  (15.2) 
In this Mamdani inference method, the conclusion parts of 
the four rules use singletons representing Small (S), Medium 
(M), or Large (L) quantity of CWmin. The centroid 
defuzzification is used to conclude the final crisp CWmin. 
Their membership functions are 
 
1, [ ]( )[ ]
0, otherwise
min
L min
CW L n
CW nµ == 

 (16.1) 
 
1, [ ]( )[ ]
0, otherwise
min
M min
CW M n
CW nµ == 

 (16.2) 
 
1, [ ]( )[ ]
0, otherwise
min
S min
CW S n
CW nµ == 

 (16.3) 
The membership functions of the singleton fuzzy sets L[n], 
M[n], and S[n] are time-variant and they are configured on-
the-fly by the upper layers controller gn according to 
network status – the observed delay [ ]d n . 
3.3 The upper layers controller gn 
 The design of the controller of upper layers including 
application considers the goal backoff delay adaptation for 
constituting the conclusion fuzzy singletons required by the 
MAC layer controller fn. The estimation of goal backoff 
delay requires upper layers information such as TSPEC 
including video rate rVID, goal total delay dTSPEC, and 
allowable delay variance ε. Note that we do not modify any 
encoding scheme in the application layer. The controller gn 
serves the protocols above MAC to collect information such 
as TSPEC and packet lengths, and it performs control to its 
plant – protocols below MAC. 
 To acquire enough bandwidth when the network is 
crowded, the upper layers controller gn scales down the 
calculated goal backoff delay so that the MAC layer 
controller fn outputs smaller CWmin control to track the goal. 
This reduces the MAC access delay and hence increases the 
radio rate. When the network state is not crowded, the gn 
keeps the calculate goal delay without scaling, and send it 
to the MAC layer controller as reference. Therefore, no 
matter how the network status changes, the upper layers 
controller gn always provides reasonable backoff reference 
to the MAC layer controller fn. The calculation of the target 
backoff is as follows. According to (7), the EDCA backoff 
is as (17). 
   EDCA NAV cold d d d= − −  (17) 
To obtain the total goal delay, gn estimate the goal backoff 
delay by dividing the MAC packet length lMAC by the 
required video rate. Then the goal total delay dTSPEC is 
estimate as 
 
[ ][ ] MACTSPEC
VID
l nd n
r
=  (18) 
where lMAC is the MAC layer MPDU length which is known 
before a packet entering the MAC transmission; rVID is the 
video rate. This is the goal total delay in the TSPEC so that 
the MAC radio rate can track the required video rate when 
the network is not crowded. That is, in (17) the delay dNAV 
and dcol caused by the background traffic tend to be zero 
and then the required delay transmitting a packet is 
 
[ ][ ]  MACframe SIFS ACK AIFS
MAC
l n
t n t t t
r
= + + +  (19) 
where constant rMAC is the maximum radio rate at the MAC 
layer. Then the HCLC estimates required backoff delay dg 
by  
 
(0)[n]  [ ] [ ]g TSPEC framed d n t n= −  (20) 
When the network is crowded and dNAV and dcol are large, to 
satisfy the video rate, the HCLC needs to scale down the 
backoff delay dEDCA in (17) to avoid exceeding the goal total 
delay dTSPEC defined in TSPEC. At this time the goal 
backoff delay dg is estimated by 
 ( )(0)[ ][ ]  [ ] [ ][ 1]TSPECg TSPEC frame
d nd n k d n t n
d n
= −
−
 (21) 
where k is the gain constant for the current traffic category. 
In this paper, k = 0.01 for an MPEG4 flow. As mentioned in 
(4) the r-th backoff delay is uniformly distributed in the 
interval ( )[0, ]rCW and the upper bound CW(r) is 
exponentially increased every next transmission retry. The 
estimation dg in (21) is equivalent to a proportional 
feedback control by taking logarithm at both sides of (21). 
Once the goal delay is achieved and we have 
 [ ] [ ] [ ]TSPEC TSPECd n d n d n
w w
ε ε
− < < + , (22) 
the goal backoff delay dg is adequate and it is not updated 
by HCLC. In (22), the tolerance ε is divided by the window 
size w since the inequalities are based on the observation 
and ε/w represents the tolerance using the averaging 
observation of window size w. In the HCLC, the upper 
layers controller gn regards the composition of pn and fn as 
its plant. To track the goal backoff delay dg, gn assigns the 
singletons {S, M, L} at time n as follows 
 
1{ , , }[ ] [ ] { ,1, }gS M L n d n PF PF−= ×  (23) 
4 Simulations and Evaluations 
 Suppose that the ad-hoc wireless network topology 
comprises 16 nodes in a 670×670 meter square. There are 7 
traffics include two MPEG4 streams from node 0 to node 1 
and nodes 14 to 15. At the same time, there are 5 
background traffics from node 0 to 1, 14 to 15, 2 to 3, 4 to 5, 
6 to 7. Therefore, both node 0 and node 14 transmit two 
flows – MPEG4 and background. The simulations are 
extensively performed using the network simulator NS2 
version 2.29 to prove the fairness and bursting immunity. 
The total channel bandwidth is 2 Mbps. The default EDCA 
parameter values are given in the IEEE 802.11e [3]. The 
 Table 2. Average PSNR comparisons of MPEG-4 streams over 
different media. The streams with HCLC control are marked 
with “(HCLC)” 
Case 0: Average PSNR (dB) – Only one MPEG-4 stream without 
any background traffic. 
EDCA 01 = 36.5  
  
Case 1: Average PSNR (dB) -- One MPEG-4 stream 01 with 
background traffics: 01, 23, 45, 67, 1415 
DCF 01    = 20.6 
EDCA 01 = 29.0 
EDCA 01 = 36.47 (HCLC) 
 
Case 2: Average PSNR (dB) --Two co-existent MPEG-4 streams 
01 and 1415 with background traffics: 23, 45, 67, 
89, 1415 
DCF 01        = 24.6 
EDCA 1415 = 27.7 
DCF 01       = 26.0 
EDCA 1415= 36.1 (HCLC) 
 
Case 3: Average PSNR (dB) --Two co-existent MPEG-4 streams  
01 and 1415 with background traffics: 01, 23, 45, 
67, 1415 
EDCA 01 =  
27.3 
EDCA 1415 = 
31.2 
EDCA 01 =  
36.5 (HCLC) 
EDCA 1415 = 
27.2 
EDCA 01 =  
36.1 (HCLC) 
EDCA 1415 = 
35.6 (HCLC) 
 
Table 3. Background throughput means/deviations in cases of 
Table 2. 
Case 0: Only one MPEG-4 stream without any background 
traffic. 
EDCA 01: 0/0 
  
Case 1: One MPEG-4 stream 01 with background traffics: 
01, 23, 45, 67, 1415 
DCF 01:     1103/134 
EDCA 01:  1097/162 
EDCA 01:  1051/140 (HCLC) 
 
Case 2: Two co-existent MPEG-4 streams 01 and 1415 with 
background traffics: 23, 45, 67, 89, 1415 
DCF 01 and 
EDCA 1415:  
641/116 
DCF 01 and  
EDCA 1415 (HCLC): 
632/132 
 
Case 3: Two co-existent MPEG-4 streams  01 and 1415 with 
background traffics: 01, 23, 45, 67, 1415 
EDCA 01 and 
EDCA 1415: 
584/118 
EDCA 01 
(HCLC) and 
EDCA 1415: 
533/123 
EDCA 01 
(HCLC) and EDCA 
1415 (HCLC): 
545/163 
 
 (a) without HCLC. (b) with HCLC. 
Figure 6. Video results at frame #1259 of two co-existent 
MPEG-4 streams with 5x300kbps background. 
5 Conclusions 
 This paper proposes novel hierarchical cross-layer 
control (HCLC) to ensure robustness of MPEG-4 streaming 
over wireless networks. Applying the HCLC to the IEEE 
802.11e EDCA function, we ensure the robustness and 
fairness of multimedia streams even when networks have 
uncertain dynamics. In the application of the HCLC to the 
IEEE 802.11e, the MAC layer controller receives upper 
layers traffic specification (TSPEC) as it reference input 
and performs control to track the TSPEC. The extensive 
simulation results show that using the proposed HCLC 
control, multimedia streams fairly share the channel 
bandwidth no matter in crowded or silent background and 
the streams possess immunity of network bursts. Future 
works include more HCLC designs for optimizations of 
network resource for different wireless standards such as 
WiMAX, UWB, and ZigBee. 
6 Acknowledgment 
The authors would like to thank the National Science 
Council in Taiwan R.O.C for supporting this research, 
which is part of the project numbered NSC 95-2221-E-168-
029-. 
7 References 
[1] S. L. Kota, E. Hossain, R. Fantacci, and A. Karmouch, 
“Cross-layer protocol engineering for wireless mobile 
networks-I,” IEEE Communications Magazine, vol. 43, no. 12, 
Dec. 2005, pp. 110 – 111. 
[2] V. Srivastava, M. Motani, “Cross-layer design: a survey and 
the road ahead,” IEEE Communications Magazine, vol. 43, no. 
12, Dec. 2005, pp. 112 – 119. 
[3] Wireless LAN Medium Access Control (MAC) and Physical 
Layer (PHY) Specifications: Amendment 8: Medium Access 
Control (MAC) Quality of Service (QoS) Enhancement, IEEE 
Standard 802.11e, Sept. 2005. 
[4] L. Haratcherev, J. Taal, K. Langendoen, R. Lagendijkm H. 
Sips, “Optimized video streaming over 802.11 by cross-layer 
signaling,” IEEE Communication Magzine, Vol. 44, No. 1, 
Jan. 2006, pp. 115- 121 
[5]  A. Ksentini, M. Naimi, and A. Guéroui, “Toward an 
Improvement of H.264 Video Transmission over IEEE 
802.11e through a Cross-Layer Architecture,” IEEE 
Communications Magazine, Vol. 44, No. 1, Jan. 2006, pp. 
107-114. 
[6] M. van der Schaar, Y. Andreopoulos, and Zhiping Hu, 
“Optimized Scalable Video Streaming over IEEE 802.11a/e 
HCCA Wireless Networks under Delay Constraints,” IEEE 
Transactions on Mobile Computing, Vol. 5, No. 6, June 2006, 
pp. 755-768. 
[7] E. Mamdani and S. Assilina, "An experiment in linguistic 
synthesis with a fuzzy logic controller", International Journal 
of Man-Machine Studies, vol. 7 no. 1, 1975, pp. 1-13. 
[8] Chao-Lieh Chen, "Programmable fuzzy logic device for 
sequential fuzzy logic synthesis", The 10th IEEE Intl Conf. 
Fuzzy Systems, Vol. 1, Dec. 2001, pp.107 – 110 
[9] J. Klaue, B. Rathke and A. Wolisz “EvalVid - A Framework for Video 
Transmission and Quality Evaluation,” Lecture Note in Computer 
Science, no. 2794, 2003, p. 255-272. (also in http://www.tkn.tu-
berlin.de/research/evalvid/) 
[10] Chih-Heng Ke, Ce-Kuen Shieh, Wen-Shyang Hwang, and Artur 
Ziviani, “An Evaluation Framework for More Realistic Simulations of 
MPEG Video Transmission,” Journal of Information Science and 
Engineering, to appear. (also in 
http://hpds.ee.ncku.edu.tw/~smallko/ns2/Evalvid_in_NS2.htm) 
SIFS
PIFS
DIFS/AIFS
DIFS/AIFS
AIFS[TCi]
AIFS[TCj]
Contention Window
Busy Medium
Slot time
Defer Access Select slot and decrement
backoff as long as
medium is idle
Next Frame
Immediate access 
when medium is free
>= DIFS/AIFS Medium Priority[TCi]
Low Priority [TCj]
High  Priority
 
Figure 1.  The EDCAF procedure. 
The EDCAF function provides coordination for QoS 
enhancement. However, we suffer the following problems: 
P1)  Uncertainties and dynamics in network states: The 
measurement of network states is very difficult since 
there are too many affecting factors, which many of 
them are unknown and are dynamically changing with 
time. This situation is more obvious in wireless mobile 
networks. Therefore, formalization of the network 
behavior is very difficult and we need an effectively 
observer to estimate network states. 
P2)  No definitions of TSPEC fulfillment: In the IEEE 
802.11e standard, there is no definition of ways to 
realize neither static nor dynamic TSPEC. In some 
applications especially variable bit rate (VBR) 
streaming in mobile wireless networks, elements in 
TSPEC are usually dynamic. In the MAC layer, we 
need to accurately fulfill or criticize both static and 
dynamic TSPECs required by upper layers. Cross-layer 
corporations are required. 
P3)  Hardware and/or embedded system complexities: To 
accurately fulfill the TSPECs, reductions of the 
complexities including time, space, and power 
consumptions are required. These reductions are 
primarily important in wireless devices. We need 
physical realization methodologies concerning these 
reductions. Since nowadays wireless MACs are widely 
implemented in VLSI or embedded systems, it is 
required to consider fast-prototyping of the QoS 
extensions, IEEE 802.11e, in the RTL level. 
Due to the non-linearity and the uncertainty characteristics 
inherently in mobile wireless networks, soft computing 
methodology is the first candidate when considering 
solutions for wireless QoS management. Some articles 
proposed fuzzy controls for QoS in wireless networks [1, 15] 
but there are few articles dealing with the above problems. 
The algorithm proposed in [1] is derived from an analytic 
process based on packet switching. Many other recent studies 
on the QoS extension of wireless LAN can be found in [8-14]. 
Two major classes of these studies can be found. One and the 
most is about performance evaluation and analysis [8-10], 
where sophisticated stochastic models are used for dealing 
with the nonlinearities and uncertainty and the other is about 
control and enhancement of the IEEE 802.11e standard [11-
14]. In the later class of studies, article [12] made the 
modification to acknowledgement (ACK) scheme of the 
original standard while some incorporated applications are 
proposed in [16-19]. For the studies in [13-14], admission 
controls are proposed for the standard. The admission control 
in [13] is based on the HCF function and the authors of [14] 
surveyed model-based and measurement-based admission 
control mechanisms and proposed a mixture model of them 
for both EDCAF and HCF functions. In [15], the authors 
developed the QoS control for legacy IEEE 802.11 [2] to 
meet the TSPEC. In this paper we extend the controller from 
the node level to the traffic level, prove its feasibility 
according to generalized fuzzy automata (GFA) theory [3, 
16], and physically realize it regarding the limits in 
embedded systems to enhance the IEEE 802.11e standard. 
Instead of stochastic computing, we develop the soft 
computing model for the IEEE 802.11e EDCAF control by 
generalized fuzzy automata theory and prove that the 
controller can be very simple, effective, and easy to realize. 
This paper proposes the distributed fuzzy control algorithm 
in the MAC layer. The proposed control algorithm features 
the following properties. 
1) Dynamic TSPEC support: this feature is important in 
both variable bit-rate (VBR) multimedia applications and 
mobile wireless networks. For VBR applications, upper 
layer will request different bandwidth support if the 
whole network status changes such as born and death of 
other traffics. Even in constant bit-rate (CBR) 
applications, any mobile node’s movement will cause 
different requirement of TSPEC. The proposed controller 
solves the problem P2. 
2) Adaptive control to network dynamics: the proposed 
system state observer detects performance saturation, 
estimates network states, and provides feedback bath to 
the controller and upper layer protocols. The design of 
the observer is according to both the maximum possible 
changing rate of system state and TSPEC including 
bandwidth, tolerable packet loss rate, packet size, packet 
delay, and delay variance. The adaptive control feature 
provides solution to problem P1. 
3) Stability, effectiveness, and efficiency: the stability and 
efficiency can be shown according to probability theory 
[4]. According to [4] and GFA theory [3, 16], we first 
observe how the wireless network responses the set of 
extreme control commands {-1, 1}. Then according to 
the responses, we define fuzzy rules of the controller for 
generating adequate controls. According to the GFA 
theory [3, 16], the constructed controller is stable. 
Moreover, even when the bandwidth profile in the 
service agreement (or traffic specification) is dynamic 
and there are bursting background traffics, the controller 
is still effective and efficient. This feature shows the 
reliability of the controller in solving problem P1 and P2. 
4) Optimized embedded realization: since wireless devices 
have limit memory, energy, and computation. The first 
thing to reduce is the computation complexity since this 
reduction of computation also means reduction of space 
(buffer and memory), number of memory accesses, 
circuit area, and power consumption. In other way, it also 
means the increase of speed when number of operations 
is reduced. In this paper to reduce the computation 
complexity, we adopt simple controls while the rule of 
and minimum state changing rates rij and lij in either 
directions can be found as follows. 
uij = N, -rij < dξij/dt < -lij < 0 
uij = Z, dξij/dt ≈ 0 
uij = P, 0 < lij < dξij/dt < rij 
To make the observer more efficient and adaptive to the 
network states, we obtain state changing rates rij and lij by 
state histogram analysis, which will be described in the later 
section. Though the information is vague we can obtain the 
state transition δ as the following lemma. 
Lemma 1. (The existence of realization) Given a monoid < 
L2(Σ)*, •> of control words and TSPEC, there is a GFA 
automaton realizes the fuzzy control system in Fig. 2. In the 
monoid, L2(Σ)* is the closure of the level-2 fuzzification of uij 
and • is the concatenation operator. In TSPEC, εij is the 
required precision constraints, that is, the observed final state 
is contained in delay range [dgij −εij, dgij + εij]. 
Proof: Let at time t the support of the state ξij is [ξij1, ξij2] 
and that of the observed state is [k1(t), k2(t)]. We represent 
elements in the automata Mij’s with LR fuzzy sets [17] of the 
form (α, m, β) where α and β are respectively the left and 
right spreads and m is the mode (the position with the 
maximum membership grade). We prove the lemma by 
constructing GFA Mij’s. For each traffic category j in mobile 
node i, construct a GFA Mij(δ, Σ, Q, S0, F, T) where 
( )ijtQ tξ= ∪  
ξ0 = ξij(0)=(α(0), s(0), β(0)) 
The transition function δ  is defined as follows. Let k1(t) = 
s(t) - α(t), k2(t) = s(t) + β(t), and α(t), β(t) are real crisp 
numbers such that s(t) ∈ [k1(t), k2(t)] ⊆ Q. Without lost of 
generality, let s(t) = λk1(t)+(1-λ)k2(t) for some λ∈(0, 1), τ1 = 
(k1 − dgij +εij)/rij, and τ2 = (dgij + εij − k2)/rij. We have the 
transition function δ as the following fuzzy rules: 
IF uij = N AND O(S(t)) = (α(t), s(t), β(t)) THEN τ1 later 
S(t+τ1) = (α(t) - lijεij /rij, s(t)+λlijεij /rij, β(t)). 
IF uij = P AND O(S(t)) = (α(t), s(t), β(t)) THEN τ2 later 
S(t+τ2) = (α(t), dgij + εij -β(t), dgij + εij). 
IF uij = Z AND O(S(t)) = (α(t), s(t), β(t)) THEN state = 
(α(t), s(t), β(t)). 
Let σ : L2(Σ)*Æ Σ be the support extraction operator. The 
remaining components of Mij are 
Σ = σ(N∪P∪Z), universe of the input words, 
F = [dgij − εij, dgij + εij], and  
T = {dt}={τ1, τ2}. 
Start from t, within a duration dt in T, Mij fires state transition 
from S(t) to S(t+dt) to the matching degree µ (firing 
strength). Applying the observation O(S(t+dt)) = O·((α(t+dt), 
s(t+dt), β(t+dt))∧µ), the support of fuzzy set O(S(t+dt)) 
becomes [k1(t+dt), k2(t+dt)]. According to Rule 1, 
 
1 11
( ) ( )
( ) ( ) ( ) /ij ij ij ij
s t dt t dt
k t dt t k t l r
α
ξ ε
+ − +
= + ≥ ≥ +
 (6) 
and according to Rule 2, 
 
2 2
( ) ( )
( ) ( )ij gij ij
s t dt t dt
k t dt t d
β
ξ ε
+ + +
= + ≤ ≤ +
 (7) 
We conclude that the support of the observed state [k1(t+dt), 
k2(t+dt)] is contained in the system state [ξij1(t), ξij2(t)]. 
Therefore, we have the input-state homomorphism Mij of the 
one dimensional control subsystem of traffic category j in 
node i. By grouping the m×n automata, we have Mmn the 
homomorphism of the whole control system. Q.E.D. 
Lemma 1 reveals that the generic fuzzy feedback control 
system is “described” with words and the realization of the 
whole control system exists. The control uij used in transition 
rules is generalized into L2(Σ) whose members are words. In 
GFA theory, the additional timing interval component T 
provides more flexible and accurate descriptions of the 
dynamics of uncertain control systems. Note that the 
automaton used in Lemma 1 is an algebraic model of the 
whole control system rather than of a controller. However, if 
there exists a GFA automaton recognizes an uncertain 
system, the output function of the GFA is just the controller. 
The design of the feedback controller is an Moore-type 
output function η: Q Æ Σ. In Moore type, we design the 
distributed controller according to Theorem 1 as follows. 
Theorem 1. (Design of the IEEE 802.11e QoS controllers) 
Given a GFA Mij(δ, Σ, Q, ξ0, F, T) realizing the QoS control 
system, there exists a fuzzy rule base which is an output 
function of Mij such that Mij is attainable and the rule base 
acts as a QoS controller of traffic category j in node i. 
Proof: We can easily prove the theorem by constructing a 
fuzzy rule base that outputs control words corresponding to 
state fuzzy sets such that Mij is attainable. As feedback, the 
state space Q of Mij is the domain of the output function η 
and the co-domain is Σ, that is, the rule base is a mapping η: 
U Æ Σ. Suppose that the supports of a state fuzzy set S(t) at 
time t, the final state fuzzy set F are [k1(t), k2(t)] and [dgij −εij, 
dgij + εij], and error(S(t)) = k1(t) – (dgij −εij) + k2(t) – (dgij + εij) 
respectively, then we construct the rule base η as follows: 
IF error(S(t)) is negative THEN uij is P=(αP, mP, βP) 
IF error(S(t)) is zero THEN uij is Z=(αZ, mZ, βZ) 
IF error(S(t)) is positive THEN uij is N=(αN, mN, βN) 
The fuzzy sets P, Z, N are words in L2(Σ). The membership 
functions of the fuzzy words negative, zero, positive, P, Z, 
and N are:  
negative(s) = 1 for s < 0; 
zero(s) = 1 for s = 0; 
positive(s) = 1 for s > 0; 
P(uij) = 1 iff uij =mP; 
Z(uij) = 1 iff uij =mZ; 
N(uij) = 1 iff uij =mN. 
According to the rule base, when the support of O(S(t)) is 
[k1(t), k2(t)] with k1(t) < dgij −εij and k2(t) < dgij +εij, such that 
error(S(t)) is negative, by applying uij=P with degree µ = 
negative(error(S(t))) during time interval [t, t + (dgij + εij -
k2(t))/rij], the support of O(S(t+dt)) becomes [k1(t)+lijεij/rij, 
k2(t)]. When the support of observed state O(S(t)) is [k1(t), 
k2(t)] with k1(t) > dgij −εij and k2(t) > dgij + εij, such that 
error(S(t)) is positive, by applying uij=N with degree µ = 
positive(error(S(t))) during time interval [t, t + (k1(t)- dgij 
−εij)/r] the support of O(S(t+dt)) becomes [k1(t), dgij + εij]. 
According to Lemma 1 and equations (6) and (7), the support 
of S(t) eventually falls in F, that is, the rule base of the 
where the number of retransmissions R correlates with Nbg. 
That is, the probability of whether the channel is available 
depends on the background traffic Nbg. Instead of deriving the 
actual distribution of tdefer(R), we give the following 
observation for adapting the fuzzy controller. According to 
equations (1), (3), and (9), the maximum deferred delay is 
limited by Σ2(t) while the minimum deferred delay is limited 
by Σ1(t). When the background traffic Nbg is small as well as 
implicitly R is also small, the expectation of the first 
summation in (9) is small. Therefore, we cannot attain a very 
small bandwidth (large delay) except that Σ2(t) is high 
enough. On the other hand, if the background traffic is high, 
to reserve a larger bandwidth is not possible except that Σ1(t) 
is small enough. By this observation, the controller in Fig. 2 
will have better accuracy if the universe [Σ1(t), Σ2(t)] of the 
control base variable u is adaptive to the TSPEC and assign 
[Σ1(t), Σ2(t)] = [log2 (dgij – εij), log2 (dgij + εij)]. 
D. Adaptive Observer and Saturation Detection 
The total defer-time in (9) is a per frame calculation. 
However, the bandwidth allocation is a soft computation 
according to the frame delay histogram. Since it is not 
practical to issue control CWminij for every individual frame 
delay feedback, we propose a fuzzy mean approximation 
scheme to estimate the feedback delays and issue adequate 
controls. The problem is to determine the fuzzy mean value 
d  of a histogram of frame delays {tdefer(Rk)|k∈N, k ≤ Hij, Rk ≤ 
RetryLimitij } with depth Hij and the maximum transmission 
retries RetryLimitij. Then, the mean delay feeds back to the 
controller for producing corresponding control. The fuzzy 
mean d  is calculated by 
 { }
1
,
( )
arg min
q
H
defer k
k
qq P Nd ij
t R
d d
H
=
∈
   
= −    
∑
 (10) 
where 
 
( )
( )
1
1
( ) ( )
( )
ij
ij
H
qk defer k defer k
k
q H
qk defer k
k
t R t R
d
t R
µ
µ
=
=
⋅
=
∑
∑
 (11) 
The dq’s are the fuzzy means of tdefer(Rk) corresponding to 
fuzzy number q’s and q∈L2([Q1(t), Q2(t)]) the fuzzy numbers 
in the premise parts of the fuzzy rule base for evaluating the 
error. The fuzzy mean delay d  is selected among fuzzy 
means dq’s of the fuzzy number q’s. The criterion of the 
selection is the minimum distance to the maximum likelihood 
estimator – the arithmetic mean of the Hij tdefer(Rk)’s. The 
observer succeeded in filtering Gaussian impulse noises in 
images [5-6] and is useful in approximating the expectation 
of tdefer(R) denoted E[tdefer(R)]. 
To detect the saturation situation, the observer requires 
recording the TSPEC ever met. Once an element in the 
TSPEC such as the throughput was ever met and it is no 
longer met, the saturation is detected and the extreme of that 
element such as mean delay E[tdefer(Rk)] and mean losts E[Rk 
> RetryLimitij] are estimated. Moreover, on saturation, these 
expectations indicate level of congestion. This information is 
useful for upper layers such as multimedia applications in 
maintaining TSPEC and streaming quality. 
III. EMBEDDED RTL FAST-PROTOTYPING 
A. The RTL model of the fuzzy controller 
To overcome the problem P3, we propose a embedded 
RTL level design methodology as follows. The RTL model 
of the controller is as Fig. 4. 
error
d/dt
error
Membership
functions
N
Singletons
at conclusion
(all 1’s)
min Aggregation &
defuzzy
Divided by zero
prevention
P
N
P
(a) Fuzzy rule base of a TC. 
 
8–bit 
fixed-pnt
with 7-bit
fraction
max=1 Divide-by-zero
prevention
3
1
k k
k
c µ
=
∑ i
Sum Divider
7-bit fraction
7-bit frac.
7-bit frac.
4
4
4
8
8
8
12
12
12
9
P
Z
N
Singletons
c1
c2
c3
3
1
k
k
µ
=
∑
3
1
3
1
k k
k
ij
k
k
c
CWmin
µ
µ
=
=
=
∑
∑
i
(b) The defuzzification unit. 
Figure 4.  The RTL model of the fuzzy controller for a traffic category. 
Fig. 4(a) is the block diagram of the fuzzy feedback 
controller for a TC using Mamdani inference method. Fig. 
4(a) realizes the fuzzy rule base output function of the 
automata. The aggregation method uses the maximum 
operation while the implication method adopts minimum 
operations. The membership functions at the premise parts 
are replaced with simple shifting operation so that dividers 
are not necessary. To prevent divide-by-zero error, 
defuzzification output will be the median 8 among singletons 
3, 8, and 14 if sum of matching degrees is zero. In Fig. 4(b), 
the input from the membership functions will not greater than 
1 and we adopt 2-digit fraction precision, which requires 7 
bits in the fraction part, and totally 8-bit width is required for 
the three matching degree inputs. This width also defines the 
data width of the later data path. Each of the singletons P, Z, 
and N at the conclusion part requires 4-bit wide and the result 
of multiplier-and-add operation is 12-bit wide. Finally, the 
divider produces the exponent of CWminij. In Fig. 4, the 
