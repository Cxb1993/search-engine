 2 
網路遊戲之分散式遊戲中介層軟體研發 
 
計畫編號：NSC 96-2221-E-231 -023 
主持人：董明智  清雲科技大學 資訊工程系 
執行期限：96年8月1日至97年7月31日 
計畫參與人員：黃文發(淡江大學資工所) 
                  賴建達(清雲科技大學資工系) 
                  楊永信(清雲科技大學資工系) 
 
(一)摘要 
在網路遊戲開發中使用中介軟體（Middleware），被認為是一種可有效地降低開發風險，
節約成本，使得產品能更快地推向市場的手段。本計畫以階層式概念為基礎來來研發網路遊
戲之分散式 Game Middleware 軟體。不僅可以應用於網路遊戲伺服器之分散式架構，亦能應
用在玩家 Client 端與遊戲伺服器之連結，讓網路遊戲開發人員只需專注於遊戲場景及遊戲畫
面的開發，網路分散式連結與管理部分則由分散式 Game Middleware 來解決。 
 
(二)理論探討 
分散式Middleware底層管理模組的結構是影響其性能的重要因素，從分散式系統的邏輯架
構上來看，Middleware設計如圖1所示可分為集中式、分散式和階層式三種邏輯架構。對集
中式的Middleware架構而言，其功能的實作完全依賴於Middleware管理伺服器；因此，伺服
器將是計算和通訊的效能瓶頸，這種系統的運作效率通常很低。如圖1(a)所示，集中式
Middleware架構只存在一個管理伺服器，其他分散式成員完全是透過管理伺服器來進行資料
互動。[1] 
分散式Middleware架構雖沒有中央節點伺服器的效率瓶頸，但完全依賴LMC模組(Local 
Middleware Component，簡稱LMC)來進行運算和提供管理服務，各種任務的協調與運算的
負載通常都很大，因此計算效率也會受影響。圖1(b)和圖1(c)是兩種典型的分散式Middleware
實作架構，圖1(b)的架構包含一個類似於集中式Middleware架構的中心節點CMC模組(Central 
Middleware Component，簡稱CMC) [2][3]，每個成員還包含一個LMC，CMC和LMC構成一
個邏輯上的Middleware伺服器。而圖1(c)的架構[4][5]則由成員的LMC構成，CMC並不存在。 
階層式Middleware架構採用了類似多層級樹狀的結構，結合了前兩種集中式與分散式的優
點，對於分散式成員提出的服務請求，如果LMC 能完成的，則由LMC直接處理，否則交由
CMC協調完成，大多數分散式Middleware都採用階層式架構。圖1(d)所示的階層式的實作架
構，每個LMC負責管理多個成員間的資訊交換；而不同LMC之間的資訊互動，則由CMC來
協調解決。 
由上述概念可知，階層式架構較適合應用於廣域網路環境下的大型分散式系統，其研發架
構比集中式與分散式的架構更具效益，具有集中式和分散式架構的雙重特點。 
 
(三)系統架構 
本計畫將以階層式架構為基礎來開發網路遊戲之分散式 Middleware 軟體。階層式的特點
是按層次設置 Middleware 的 Component 配置，每個 LMC 負責一個或一組網路遊戲 GameAP
的服務請求，每一個 LMC 對於自己不能完成的服務請求則會轉發到上一階層的 CMC 來做
服務要求，一個分散式網路遊戲的啟動執行過程會涉及多個階層 Middleware Components 之
間的相互溝通。 
本計畫將研發之網路遊戲分散式 Middleware 將具有下列功能： 
 4 
路遊戲中每個物件或屬性都具有擁有者，而且在某個特定時刻只能有一個 GameAP 擁有它的
所有權，只有具有這個物件屬性擁有權的 GameAP 才能更新這個物件的屬性值。每個物件都
具有一個特殊的屬性即 privilegeToDelete 屬性，只有具有這個屬性所有權的 GameAP 才能刪
除這個物件。(此管理模組未列入本年度計畫中) 
時間管理：在分散式系統應用中，整個系統具有一個全域性的時間，同時每個 GameAP
成員都具有一個區域性時間(亦稱為邏輯時間，Logical Time)，為了協調每個 GameAP 成員
的時間前進，同時為了保證分散式系統中，所有發生事件的因果關係以及順序的正確性，分
散式 Middleware 必須提供一系列時間管理服務來控制每個 GameAP 成員的時間前進，並為
分散式系統中所發生的事件加上時間戳(Timestamp)[6]。時間管理服務把 GameAP 成員分為
以 下 幾 類 ：  Regulating 、 Constrained 、 Regulating & Constrained 、 unRegulating & 
unConstrained，Regulating 成員能發送帶有時間戳的事件，Constrained 成員能夠接收帶有時
間戳的事件，Regulating & Constrained 成員則既能發送帶有時間戳的事件又能接收帶有時間
戳的事件，unRegulating & unConstrained 成員則忽略掉事件的時間戳[7]。時間管理提供一系
列服務來協調 Regulating 和 Constrained 成員之間的邏輯時間前進，而 GameAP 成員也可以
在執行過程中透過呼叫某些時間管理服務來動態地修改它的管制和受限狀態。 
其他支援的服務：每個物件和互動訊息都具有兩種表示方法，即名稱和控制碼(Handle)，
例如每個 GameAP 都具有一個成員名稱和控制碼，所謂名稱是指用戶能輕易識別的一種表示
方法，而控制碼則是讓 Middleware 能方便識別的表示方法。Middleware 應該提供一組支援
的服務，GameAP 可以呼叫這組服務來達成以下功能：（1）根據名稱來得到與這個名稱對
應的控制碼；（2）根據控制碼來得到與此控制碼對應的名稱。 
本計畫所要開發的分散式 Middleware 軟體將朝向 Multi-Thread 方式設計，圖 3 為本計畫
預計開發之 LMC 內部各主要程序之架構示意圖，其中 GameAP Service Procedure 負責回應
GameAP 的 API 函式呼叫，並進行相關運算與訊息傳送動作。Collector Procedure 則採用平
行接收方式，以 Multi-Thread 技術平行收集多個 GameAP(其他 LMC 或 CMC)所發送過來的
資料，這樣可以減少 GameAP 等待接收訊息的時間，從而為 GameAP 處理其他事務空出了
較多的時間。Callback Procedure 則負責將 callback 訊息置放到緩衝區(Buffer)或佇列(Queue)
之中，以等待 GameAP 接收訊息。 
Collector Procedure 與 Callback Procedure 的運作可以有兩種模式，即靜態程序(Static 
Thread)與動態程序(Dynamic Thread)。靜態程序是由 LMC 在 GameAP 啟動時建立，直到
GameAP 退出遊戲執行時才結束。動態程序則是當有 Callback 訊息要傳送給 GameAP 時，再
由 LMC 啟動，並在完成 Callback 後結束。靜態程序執行效率較高，但 GameAP 必須為遊戲
執行中的所有其他成員各維護一個 Callback 程序(因為每個 GameAP 之間都需要維護彼此的
連結 Channel)，因此佔用了較多的系統資源，限制了遊戲執行的規模。另一種靜態程序則是
由一個程序來服務所有其他 GameAP 連結過來的訊息接收動作，此方法會因為一個程序接收
大量訊息時造成處理延遲的情況，對遊戲執行規模亦會產生侷限效應。動態程序由於要新增
程序、分配資源和建立連結，因而影響了 LMC 的操作效率，但可以靈活地分配系統資源。
LMC 的設計上可以選擇其中一種程序模式，也可以綜合使用兩種模式，因此本計畫的規劃
在 Middleware Execution 將採用靜態模式設計，而對 CMC 與 LMC 則將採用動態模式設計。 
 
(三)計畫執行結果與分析 
本計畫中分散式 Middleware 整體研發架構如圖 4 所示，整個 Middleware 分成三大模組：
Distributed Kernel、Distributed Service Agent 及 GMOM 管理模組。Distributed Kernel 將依據
IEEE 1516.1 [8]所定義的介面為參考依據來研發，負責分散式遊戲的訊息通訊，其中擁有權
管理為未來的研發項目，不列入本計畫年度中；Distributed Service Agent 則是為了簡化分散
 6 
Raw Data 層負責處理網路收送的 Raw Data 封包，並進行封包加解密的安全處理，且由訊
息處理層中路由表所獲得的資訊，進行網路層次的 Publish/Scribe 連結配對。 
為了使 Middleware 軟體能合理高效率地執行，必須設計有效的數據資料架構，組織好各
種數據在執行環境中的存儲、傳遞和轉換，以期能做到網路資料傳輸量最少、存儲存取時間
代價最低的目標。本計畫的數據資料架構敘述如下： 
數據資料根據所在 Middleware 的系統位置劃分如下： 
z LMC︰GameAP成員、物件、互動訊息、物件實例(Object Instance)、參數、屬性等資訊；
LMC僅需記錄足夠因應其所負責收送訊息所需的數據資料即可，因為其目的即是提供
GameAP分散式服務。 
z CMC︰GameAP成員、物件、互動訊息、物件實例、物件控制碼分配；CMC負責協調整
體Middleware相關的訊息之互動，並管控各LMC的啟動與結束程序。 
z Middleware Execution︰GameAP 列表、GameAP 名稱與控制碼分配。 
數據資料由各子系統需求功能的不同決定了其內容的差異。LMC 中的物件類型記錄了物
件的 Publish 和 Subscribe 資訊，以 Publish/Subscribe 標誌來做標識；CMC 中的物件類型則匯
總了 Middleware 內所有的 Publish 和 Subscribe 資訊，以物件控制碼的形式存儲在 Publish 的
GameAP 成員表和 Subscribe 的 GameAP 成員表中，作為屬性匹配和建立通訊通道的依據。 
當 GameAP 進行初始化時，要從 GED(Game Execution Data)文件獲得執行細節的數據資
料(GED 記錄了在遊戲執行期間所有參與遊戲互動的物件類型及其屬性、互動類型和其參
數)，並根據這些數據資料，在整個遊戲執行週期內，協調 GameAP 之間的互動。Middleware
中資料架構的名稱和控制碼都與 GED 文件相關。Middleware 提供運算法則來確定基本數據
資料的控制碼數值，並完成名稱到控制碼，控制碼到名稱的對映(Mapping)。這種對映關係
確保了名稱與控制碼的索引內容。為了達到索引的快速性，本計畫以雜湊表作為資料搜尋演
算法，因為雜湊表是一種快速索引的資料結構。 
在實驗測試上，本計劃實測下列資料傳輸大小，分別為 1KBytes、2Kbytes、3Kbytes、
4Kbytes、5Kbytes、6Kbytes、7Kbytes、8Kbytes、9Kbytes、10Kbytes，各不同大小的傳輸量
在 LAN 上測試 10000 次，再求取每個傳數量的平均值傳遞時間。實驗結果如下圖 6 所示。
由實驗結果顯示，本計畫研發之 Middleware 在各種不同傳送大小的傳輸量下，其平均傳遞
時間都能穩定的介於 1.2ms 至 1.5ms 之間，並不會因為傳輸量增加而影響到傳遞時間，可以
證明本計畫之研發架構具有穩定的執行效率。 
 
(四)結論 
本計畫以分散式的技術為基礎來開發網路遊戲之 Game Middleware 軟體，本計畫所研發
之分散式 Game Middleware 提供各分散式節點可隨時執行遊戲之建立、加入、退出與結束功
能，並不需同時啟動；換言之，就是各個分散式遊戲主機可以中途加入或是退出，此功能如
應用於伺服器架構上，當任何一部主機需要維護而停止服務時，不會影響其他主機之運作，
藉以達成提升遊戲服務的可靠度之目的。而且，此 Game Middleware 亦可應用於 Client 連線
遊戲伺服器的連結上，Client 端可以隨時透過 Middleware 提供的加入、退出機制，進入與離
開遊戲。因此，透過 Game Middleware 來開發分散式網路遊戲，可以有效地降低開發時程，
節約成本，使得產品能更快地推向市場。 
 
(五)參考文獻 
[1] LIU Bu-Quan, WANG Huai-Min, YAO Yi-Ping, ” Key Techniques of a Hierarchical 
Simulation Runtime Infrastructure—StarLink”, Journal of Software, 15 (1):9-16 ,2004.  
[2] Hao JG, Huang J. Implementation architecture of KD-RTI. System Modeling & Simulation, 
 8 
 
圖 1、分散式 Middleware 架構之分類 
 
 
 
圖 2、本計畫執行之系統架構 
 
