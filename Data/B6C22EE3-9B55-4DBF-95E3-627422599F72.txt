關鍵詞：Monge 性質、動態規劃、序列比對、SMAWK 演算法 
Keywords: Monge property, dynamic programming, sequence comparison, run-length encoding, 
SMAWK algorithm 
 
成果報告內容 
 
簡介： 
一個矩陣 ，若具有對於所有的 與 皆滿足
，則此矩陣具有 Monge 性質。具有 Monge 性質之矩陣，其各行與各
列之最小值與最大值可在 計算時間內求得。誠如計畫書所言，我們運用此性質來
處裡生物計算中序列比對的問題，此解法不僅擴張前人所提供之方法之可應用性，並改進
其執行效率。 
 
問題描述： 
我們討論 run-length 編碼下的序列排比問題。令 x、y 為長度為 m、n 之字串，X、Y 為
x、y 在 run-length 編碼後之字串，其長度分別為 M 與 N。我們運用 Monge 性質，解決下列
問題，並獲得計算效率上之改進： 
1) Longest-common-subsequence 問題 
2) Levenshtein-distance 問題 
3) Edit-distance 問題 
4) Alignment 問題(包含 global 與 local 兩種) 
在 run-length 的範疇下，解決問題 1 之文獻包含 
1) Bunke, H. and J. Csirik, An Improved Algorithm for Computing the Edit Distance of 
Run-Length Coded Strings. Inf. Process. Lett., 1995. 54(2): p. 93-96. 
2) Mitchell, J., A Geometric Shortest Path Problem, with Application to Computing a 
Longest Common Subsequence in Run-Length Encoded Strings. 1997, SUNY Stony 
Brook. 
3) Apostolico, A., G. M. Landau, and S. Skiena, Matching for Run-Length Encoded Strings. 
J. Complex., 1999. 15(1): p. 4-16. 
4) Liu, J. J., Y. L. Wang, and R. C. T. Lee, Finding a Longest Common Subsequence 
between a Run-Length-Encoded String and an Uncompressed String. J. Complex., 2008. 
24(2): p. 173-184. 
解決問題 2 之文獻包含： 
Arbell, O., G. M. Landau, and J. S. B. Mitchell, Edit Distance of Run-Length Encoded 
Strings. Inf. Process. Lett., 2002. 83(6): p. 307-314. 
解決問題 3 之文獻包含： 
1) Mäkinen, Ukkonen, and Navarro, Approximate Matching of Run-Length Compressed 
Strings. Algorithmica, 2003. 35(4): p. 347-369. 
2) Liu, J. J., G. S. Huang, Y. L. Wang, and R. C. T. Lee, Edit Distance for a 
Run-Length-Encoded String and an Uncompressed String. Inf. Process. Lett., 2007. 
105(1): p. 12-16. 
解決問題 4 之文獻包含： 
Crochemore, M., G. M. Landau, and M. Ziv-Ukelson, A Subquadratic Sequence Alignment 
並帶領學生參加國內學術會議，發表下列論文： 
1) Chen, K.-H., G.-S. Huang, C. L. Lu, and R. C.-T. Lee, A Multidimensional 
Divide-and-Conquer Algorithm for Assigning Secondary Structures in Proteins. 第26屆
組合數學與計算理論研討會, 2009: p. 1-8. 
2) Lin, C. C., G. S. Huang, and R. C. T. Lee, An RNA Pseudoknot Folding Algorithm Based 
on Heuristic Searching. 第26屆組合數學與計算理論研討會, 2009: p. 163-172. 
3) Chen, K.-H., G.-S. Huang, and R. C.-T. Lee, A Simple Average-Case Analysis of the 
Reverse Factor Algorithm. 第26屆組合數學與計算理論研討會, 2009: p. 251-258. 
4) Chen, S. C., G. S. Huang, and R. C. T. Lee, The I-Largest Number Domination Sequence 
and Its Application to the Average Case Analysis of the Horspool Algorithm. 第26屆組
合數學與計算理論研討會, 2009: p. 259-265. 
 
自評： 
於計畫書中，我們承諾要做到下列事項： 
1. 廣泛的搜集序列比對演算法與 Monge 性質相關的研究論文，並研讀之。 
2. 試圖運用 Monge property 與 SMAWK 演算法，將 unit cost 之 Levenshtein-distance 問題
推廣到一般權重的 edit distance problem。 
3. 試圖更進一步將這個技巧，朝 sequence alignment 推進。 
4. 將研究成果撰寫成研究論文，並於國際會議或期刊上發表。 
 
於此成果報告中可知，我們完成了所有項目，也希冀在 Monge 性質的研究與序列排比問題
上，我們能有更具原創性的突破。 
表 Y04 
報告內容應包括下列各項： 
一、參加會議經過 
 此次本人與博士班研究生吳展碩一同參加此次會議，並發表 regular paper。此次大
會共收錄 31 篇 regular papers、18 篇 short papers、18 篇 poster papers，另外還有 4 篇 special 
session papers 與 10 篇 workshop papers，regular paper 率取率約 27%，較往年下降許多。
 大會共準備了 8 個場次的 keynote speech，第一天早上邀請 Wen-Hsiung Li(李文雄院
士)作為開場演講，接下來是 Yuan-Tsong Chen(陳垣崇院士)、Li-Huei Tsai(蔡理慧, MIT)
等人精采的演講，當天晚上餐會則邀請交大校長 Peter Chung-Yu Wu(吳重雨)，分享視覺晶
片方面之研究，內容十分豐富。第二天早上的 keynote speech 更邀請生物計算學的大師
Michael S. Waterman 作專題演講，分享圖論於分子生物學之應用。接下來的則是
Jean-Claude Latombe(Standord University)、David Harel(the Weizmann Institute of Science)
等人精彩的演講，這些人除了讓人佩服之外，也讓我受益良多。 
 本人與學生的論文，則在第三天早上的第一場次發表，並接受現場提問。會後並與
相關學者交換意見，彼此分享學術經驗。 
 
二、與會心得 
 這次大會十分用心，安排如此多重量級的專題演講，是本人參加過所有的學術會議
中，專題演講場次最多的一次。除了可以增廣見聞外，也可以向前輩們多多學習，深感
不虛此行。比如說吳重雨校長分享他做學術研究的心得與想法、李文雄院士所展現出驚人的學
術產量、蔡理慧教授年輕卻十分老練的分享他的研究成果、陳垣崇院士分享他在龐貝氏
症方面的研究，都讓我覺得台灣人真行。原本很期待 Michael S. Waterman 的演講，因為
他算是計算生物學大師級的人物，但 Waterman 覺得他想要展示圖論在生物計算的重要
性，因此臨時更換題目，換成了我本來就熟悉的問題，讓我反而有點失落，不過 Waterman
對於歷史與應用方面的處裡手法，也讓我收穫不少。Jean-Claude Latombe 十分優雅的分
享他的研究成果，David Harel 說他希望大家都能用他的研究成果，雖然因為這樣讓他吃
過幾次虧，但他還是堅持不申請專利。弔詭的是，因為有這麼多好的專題演講，讓原本
為主題的論文發表反而黯淡不少。 
 
三、考察參觀活動(無是項活動者省略) 
 
四、建議 
 感謝國科會的支持與贊助，並希望這樣好的國際學術會議能多多在台灣舉行，也可
嘉惠台灣學生學習國際化的寶貴經驗。 
 
五、攜回資料名稱及內容 
BIBE 2009 的會議論文集光碟片，相關資料可在 IEEE Xplore找到並下載全文，網址為
http://www.ieeexplore.ieee.org/xpl/tocresult.jsp?isnumber=5211104&isYear=2009。 
六、其他 
附件為所發表之研究論文，網址為http://dx.doi.org/10.1109/BIBE.2009.27。 
 
 
 
 
is a serious problem for structural comparisons, and this
difficulty no longer exists in our model.
The organization of this paper is as follows. In Sect. II,
we propose a formal description of our model, and then a
polynomial-time algorithm for it based on dynamic program-
ming follows in Sect. III. Experimental results are given in
Section IV, and finally, we conclude this study in Sect. V.
II. OUR MODEL
We first discuss the rationale why we choose arc-annotated
sequences as the data representation. It is well-known
that evolutionary events accumulate at the sequence level.
However, not all events can survive and thus be observed
nowadays since some changes would cause the structural
conformation to become different, and consequently it might
lead to lethal effects to the organism. Some events that
‘easily’ happen on the sequence may be filtered out by
natural selection, and on the contrary, some ‘rare events’
might be preserved by the preference of natural selection.
Nevertheless, natural selection causes the observed proba-
bility distribution of evolutionary events to be different from
what do exactly happen on the genetic sequences. This is the
mechanism that natural selection follows, and it reveals the
insufficiency to identify homology between two biological
sequences without information from structures.
On the other hand, the same embarrassment would also
occur when one only considers structures but ignores se-
quences, because a difference observed between two RNA
structure is a consequence, not the cause of evolutionary
events. Suppose we have two reasonable evolutionary events
A and B, each of which can explain an observation C,
and the chance of A is more likely to happen than B.
According to the parsimony principle, one should choose A
for C. However, if a model neglects the possibility of A and
suggests that B is the reason for C, we would overestimate
the significance of C. Hence, a good model should not
suggest a rare event to explain the structural change if there
does exist another possibility that is more likely to happen.
The traditional tree-based comparison algorithms neglect this
point because many tree edit operations (e.g., removing a
series of base pairs or replacing them by another pairs) are
usually rare events from the perspective of edit operations
performed on sequences.
Therefore, a combination of sequence and structure in-
formation is a necessity to compare RNA secondary struc-
tures. In our model, we individually consider edit operations
performed on sequences and structures. More specifically,
it contains all traditional edit operations performed on se-
quences (i.e., substitution, insertion and deletion with affine-
gap penalty) so that elementary evolutionary events applied
on sequences can be modeled. In addition, it also contains
edit operations to handle the structural conformation. As a
result, different notions of affine gap penalties are defined for
sequences and structures. In the subsequent paragraphs, we
will introduce the data representation, the corresponding edit
operations, and finally the formal description of our compu-
tational problem for RNA secondary-structure comparison.
A. The Data Representation
We can take an RNA sequence as a string over the alphabet
{A,C,G,U}. Each letter in the sequence signifies the base of
a nucleotide in the RNA. Nucleotides are linked by covalent
bonds to form a linear structure, and hydrogen bonds can
further pair distant nucleotides as base pairs. The most
common base pairs appearing in RNA include the Watson-
Crick pair (for A-U and C-G) and the wobble base pair (for
G-U). An RNA sequence together with its information of base
pairing is called its secondary structure. When one puts an
RNA sequence as a straight line on the plane, base pairs
are always one-to-one and usually non-crossing. That is, for
any two base pairs (i1, i2) and (j1, j2) where i’s and j’s are
positions on the sequences with i1 < i2 and j1 < j2, both
(1) i1 = j1 if and only if i2 = j2; and (2) i1 > j1 if and only
if either i1 > j2 or i2 < j2 should hold in our consideration.
For clarity, we use lower-case letters a, c, g, and u to denote
RNA bases in our data representation and leave the upper-
case letters for other uses. A base pair is represented by a
pair of parentheses; we place an open parenthesis to the left
of the corresponding incident base and a close parenthesis
to the right of the corresponding incident base. Thus, a base
pair (i1, i2) in sequence · · · s[i1] · · · s[i2] · · · is expressed as
· · · (s[i1] · · · s[i2]) · · · where s[i1] and s[i2] are the incident
bases of (i1, i2). We call i1 the left end and i2 the right end
of the pair (i1, i2); the corresponding pair of parentheses
is called an arc of i1 and i2. Figure 2 depicts an RNA
secondary structure and its corresponding expression, which
can be spelled out by reading this RNA from the 5′-end to
the 3′-end.
Roughly speaking, RNA secondary structures can be
classified into two parts: helices and loops. A helix is a
maximal substructure that is formed by consecutive arcs
with corresponding incident bases that are stacked together.
In our expression, it can be identified by observing open
parentheses located at i1, i1+2, . . . , i1+2(k− 1) and close
parentheses located at i2− 2(k− 1), . . . , i2− 2, i2 such that
i1 + 2t is linked to i2 − 2t for 0 ≤ t < k and there are no
arcs between for t = −1, k. On the other hand, a loop is
a longest stretch that contains only non-paired bases in our
expression .
B. The Edit Operations in Our Model
Notice that in our data representation a base pair is
separated as an arc (regarding base pairing) and its left/right-
end bases. This formulation allows us to define two sets
of edit operations, one for arcs and the other for bases
independently. Of course, some interrelations between these
two sets of operations should also be considered in order to
177
Authorized licensed use limited to: National Chi-Nan University Library. Downloaded on October 11, 2009 at 04:56 from IEEE Xplore.  Restrictions apply. 
` is the number of bases and ` ≥ 1.
G 2: If i1, i1 + 2, . . . , i1 + 2(k − 1) and i2 − 2(k −
1), . . . , i2−2, i2 are consecutive nested-arcs of R1,
then the cost to align all of them with dashes takes
Wb + kEb.
Rules for R2 are applied similarly. Since we always want to
find an alignment with the minimum cost, G 1 and G 2 are
always applied to maximal substructures. Note that Rules G 1
and G 2 define affine-gap penalties for sequences and for
structures, respectively. We remark that there is a great
difference in these two definitions. In Rule G 1, affine-
gap penalties are applied to any (contiguous) segment of
the sequence, which could possibly contain parentheses.
However, as for Rule G 2, its stretch must be confined to
a helix and the aligned spaces may not be continuous on
the expression. In the following example, a space is denoted
by a minus sign in R1 and R2. Star and plus signs signify
regions that the edit operations are applied. There is one base
mismatch (depicted in row Mismatch), two gaps for sequence
(depicted in row G 1), and two gaps for structure (depicted
in row G 2). Its total cost is Wm +2Wd +6Ed +2Wb +3Eb.
R1: au(g(g(u(gau)a)au)c).R1:
R2: ---u-g-u(gau)-------.R2:
Mismatch: ---*-g-u(gau)-------Mismatch:.
G 1: ***..........+++++++-G1:
G 2: ..* * +.......+..* *-G2:
III. THE ALGORITHM
The input of our algorithm contains two RNA secondary
structures R1 and R2 that are expressed in the format
described in Sect. II-A. Let R1 = r1[1] · · · r1[m] and
R2 = r2[1] · · · r2[n]. We use r[i1...i2] to denote the substring
of R from position i1 to position i2 for i1 ≤ i2. When
i1 > i2, it indicates an empty string. The cost to align two
characters r1[i] with r2[j] is denoted by d(i, j). When i1 and
i2 constitute an arc, we say i1 is a partner of i2 and vice
versa. We use c1 and c2 to describe the partnerships in R1
and R2, respectively. A fragment r[i1...i2] of R for i1 ≤ i2
is called feasible if the number of open parentheses cannot
be less than the number of close parentheses in any prefix
of r[i1...i2].
Definition 1. Given a feasible fragment r[i1...i2], a paren-
thesis inside it is called dangling if its partner is outside this
fragment. An open parenthesis inside r[i1...i2] is called a
pioneer if it is the first parenthesis in a helix over r[i1...i2].
For example, let R be
----3---5---7---9--
au(g(g(u(g
---13--15----18--20
au)a)au)c),
There are exactly two pioneers in this feasible fragment
r[4...9] =
--5---7---9
g(g(u(, which occur at positions 5 and 7,
TABLE II
CASES TO COMPARE THE LAST TWO SYMBOLS FOR TABLE D
r2[j2]
base ) (
base Case D4 Case D3’ Case D1’
r1[i2] ) Case D3 Case D2 Case D1’
( Case D1 Case D1 Case D1
respectively. Notice that although r[5] and r[7] have the
distance two, their parteners are located at positions 18 and
15, which belong to different helices. In contrast, for the
fragment r[3...9] =
3---5---7---9
(g(g(u(, r[5] is not a pioneer but r[3]
and r[7] do.
The basic idea in our algorithm is as follows. We apply
dynamic programming and use three tables, D, P , and Q, in
computation. Table D stores the edit distance between any
two feasible fragments, and tables P and Q are used to help
evaluate affine gap penalties for sequences. Let r1[i1 . . . i2]
and r2[j1 . . . j2] be two feasible fragments of R1 and R2,
respectively. Since there may be dangling parentheses within
r1[i1 . . . i2] and r2[j1 . . . j2], their edit distance is not well-
defined at this stage. This difficulty can be resolved by
adding the following two constraints after Rules A 1∼A 3.
A 4: Each dangling parenthesis must be indeled (i.e. to
be aligned with a space) in current computation.
A 5: The cost for indeling an arc is unevenly dis-
tributed to the open parenthesis but not to the
close parenthesis. That is, an open parenthesis takes
the responsibility to get the gap penalty (open or
extension, depending on whether it is a pioneer)
The cost for aligning a close parenthesis with a
space is always zero.
Adding A 4 and A 5 does not change the value for com-
puting the edit distance between R1 and R2. Hence, ta-
ble D(i1, i2; j1, j2) computes the edit distance between
r1[i1 . . . i2] and r2[j1 . . . j2] with the help of A 4 and A 5.
Table P (i1, i2; j1, j2) handles the situation that the last base
of r2[j1 . . . j2] is inserted (it may not be at the last position
when r2[j2] is a parenthesis). Table Q(i1, i2; j1, j2) deals
with the case that the last base of r1[i1 . . . i2] is deleted.
A. Computing the Table D
There are nine cases when compare r1[i2] against r2[j2].
We categorize them into four groups as shown in Table II.
Due to symmetry, we only discuss cases lying in the lower
triangle.
Case D1. r1[i2] is an open parenthesis.
Then we have the following recursion:
D(i1, i2; j1, j2) = D(i1, i2 − 1; j1, j2) + Eb
+ [r1[i2] is a pioneer]Wb
which follows from Rules A 4 and A 5 that r1[i2] must be
deleted. Note that we employ the Iverson’s symbol (a pair of
179
Authorized licensed use limited to: National Chi-Nan University Library. Downloaded on October 11, 2009 at 04:56 from IEEE Xplore.  Restrictions apply. 
TABLE III
A SUMMARY OF AUXILIARY OPERATIONS.
Name Example Penalty
arc mismatch Fig. 3(d) Wam
type mismatch Fig. 3(g) Wt
to accomplish its task to evaluate values. Since space can
be re-used, the overall space required at the current phase is
still O(mn). In the second phase, an optimal alignment is
constructed from top to down within the recursions. Parts of
the alignment that require recurring into Subcase D2-1 are
first left blank, and they will be filled in latter after the other
part of the alignment for the same i1 and j1 is finished. And
finally, a complete alignment is assembled. As a result, the
overall space required is still O(mn).
D. Implementation Details
In order to make the scoring system more accurate, we add
two auxiliary operations to reflect the interrelation between
bases and arcs. These auxiliary operations are not real edit
operations; they exist here simply for the sake to make
the scoring system more reasonable and flexible. An arc
mismatch occurs if two arcs are aligned but there exists
at least one side of the incident end bases mismatched
(Fig. 3(d)). The cost is Wam if there is only one side
mismatched, and 2Wam if both sides are mismatched. Note
that the cost of base mismatch Wm is not charged again if
this rule for arc mismatch is applied. The rule of thumb is
that two arcs coming from different RNAs can be aligned
if and only if their incident end bases are also aligned. It
can be an arc match (Fig. 3(a)) if both sides of incident
bases are matched, or arc mismatch otherwise (Fig. 3(d)).
The last edit operation is the type mismatch, which happens
when we align a left-end base to a right-end base (Fig. 3(g)).
Table III lists a summary of two auxiliary operations. It is not
difficult to incorporate them into the algorithm described in
this section, and similar (but a little complicated) recurrences
for the dynamic programming can also be obtained.
IV. EXPERIMENTAL RESULTS
We conduct three sets of experiments. The testing samples
come from the Ribonuclease P Database [6]. In each set
of experiments, the selection of instances for comparisons
follows the choices of [4][11][20][21], respectively. This can
make sure that instances compared here are representatives
of each method. We use this parameter setting (Wd, Ed,
Wb, Eb, Wm, Wam, Wt) = (6, 2, 6, 2, 6, 3, 2) in our program
through out all experiments.
The first set is designed to show the difference between
our method and the method using abstract tree [4]. Its
purpose is to demonstrate the importance of incorporating
information of primary structures while comparing RNA
secondary structures. The result is shown in Fig. 4. We
use colors to highlight aligned regions. Let us focus on
regions indicated by red arrows, which are labeled by Xi for
1 ≤ i ≤ 4. In our result, one can see clearly that the fragment
CCCCU below X3 is removed, which releases some bases
in helix X1 to loop X2. In the regions pointed by yellow
arrows, one can see that the fragment GGAUCCGGCU pointed
by Y3 is removed, and loop Y4 is part of the helix indicated
by Y3. However, in Y1 and Y2, two unrelated fragments are
aligned. One should not be too surprised by this experiment.
Methods based on comparing abstract trees emphasize on
the structural similarity, which does not necessarily imply
homology.
In our second set of experiments, we compare our results
with [11] and [21]. The underlying principles in these
methods are somewhat similar: information of primary and
secondary structures is integrated. However, [21] is more
or less a tree edit-distance algorithm; [11] extended edit
operations defined in [21] and are proved to get better
performance. Neither [21] nor [11] considers affine gap
penalties. Furthermore, the above three methods all produce
optimal solutions with respect to individual models. One
can expect that our model would produce alignments with
fewer numbers of gaps due to the help of the mechanism
that incorporates affine gap penalties for sequences and
structures. The result is shown in Table IV. Zhang’s and
Jiang’s results are obtained from [21] and [11], respectively.
The last column counts the number of gaps caused by
segment indels on sequences in each alignment. One can see
that the number of segment indels in our result is almost half
of Zhang’s and Jiang’s. However, due to different modelings,
our results only make the numbers of arc and base matches a
little worse. As a conclusion, our model generally produces
alignments that require fewer evolutionary events to explain
the evolutionary history of two RNA secondary structures.
In the third experiment, we compare our results with the
results from Wang et al. [20]. The algorithm in [20] employs
the idea of block alignment, which forbids to open a gap
within a block, in order to reduce the number of gaps in an
alignment. The comparison is shown in Table V and part
of drawings for these two alignments that are significantly
different are shown in Fig. 5. One can see that even though
the algorithm in [20] intends to eliminate unnecessary gaps
in an alignment, our result still outperforms theirs. In Fig. 5,
the alignment by Wang et al. employes five segment indels,
but our alignment uses only one segment indel. Furthermore,
the alignment on tip loops matches only 50% identity (=
2/4) in their result, and our result has 71% identity (= 5/7).
As a consequence, the interpretation of the homology by our
resultant alignment is more likely to happen than theirs.
V. DISCUSSION AND CONCLUSION
We proposed a new model for RNA secondary structure
comparison. It integrates information on sequences and
181
Authorized licensed use limited to: National Chi-Nan University Library. Downloaded on October 11, 2009 at 04:56 from IEEE Xplore.  Restrictions apply. 
