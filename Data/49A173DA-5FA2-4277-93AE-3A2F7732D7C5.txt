2行政院國家科學委員會專題研究計畫成果報告
以網頁正規化與階層式模式技術建構自動化 Web 2.0 系統
Construction of Automated Web 2.0 System With Web Page
Normalization and Hierarchical Pattern Techniques
計畫編號： NSC 96-2221-E-029-027
執行期限：96 年 8 月 1 日至 97 年 7 月 31 日
主持人： 陳隆彬 副教授 東海大學資訊工程與科學系
共同主持人：吳毅成 教授 國立交通大學資訊工程學系(所)
計畫參與人員：孫德中，林奕賓，洪振佑，何孟遠
一、中文摘要
Web 2.0 是最近被提出的觀念，其核心思維
是 Web 只是一個平台，其內容則由使用者提供整合
而成。本計畫的目標是如何在 WWW 這個全球性包羅
萬象的超級文件庫中找出相關文件並整合出一個
web 2.0 站台。
IDL (介面描述語言) 常被用來描述多重文件
之間的對應關係。本計畫中，IDL 是建構 Web 2.0
website 的基本元件。本計畫提出 IDL 分析器與產
生器來達成 Web site 內容產生之自動化。本計畫
將設計『雙向轉換器元件』，將原本只是描述單向
轉換的 IDL，擴展成雙向轉換，並透過這個元件整
合多個網站形成 web 2.0 站台。使用者在任何一個
站台存取資料及可以影響到整個網站社群。
關鍵詞：XML、XQuery、XSLT、網頁擷取、數位
內容
Abstract
As the Internet becomes more popular, a large
number of documents are published via Web sites.
XML is a standardized format designed for
representing structured data to Web applications. Thus,
transformation of documents in XML format becomes
an important issue to integrate multiple and frequently
updated Web sites.
An IDL (Interface Description Language) is a
script language used to describe the mapping between
two XML documents. For example, XSLT and
XQuery are two common languages to describe how to
transform different XML schemas. However,
developing IDL is a time-consuming task. In this
report, an automated IDL analyzer and generator are
developed. By composing a set of related IDL, the
processes of generating Web 2.0 website are
simplified and automated.
Keywords: XML, XQuery, XSLT, Web extraction,
Digital Content System
二、報告內容
2.1 前言
要建置一個自動化的 Web 2.0 網站，必須將
要處理的目標網站進行擷取和分析，建立目標網站
之間的映對關係，如此才能將多重不同結構的文件
整合起來。本計畫中的 automated Web 2.0 架構示
意圖見圖 1。Data-intensive Website 是一個可以整合
多樣化的資料來源並依照不同需求來調整內容以
及呈現方式的系統。請注意 Data-intensive Website
資料來源可能是資料庫、HTML 和 XML 等半結構
性文件、甚至是另一個 Website。
圖 1 之 Web 2.0 架構中，使用者網頁先經過
正規化(N-模組) 去除雜訊。然後經由資料擷取模組
(I-模組) 進行擷取並存入資料庫。最後由 XQuery
(X-模組) 輸出為網頁格式，整合成為 Web 2.0 網
站，因此這個 Web 2.0 網站不只能夠提供平台供使
用者發佈文件，更可以自動納入其他文件來源。
圖 1: Web 2.0 Website 架構圖
4第二個部份為 Representation Module，目的在於
將 XML 文件的資料以 XQuery 轉成一個網頁的
樣式呈現出來。
在圖4-1的架構中，方形表示文件型態, 橢圓形
為模組功能。
文件型態如下 :
 D1 : 要擷取的 HTML 文件。
 D2 : 要轉換成的文件, 格式為 XML。
 T12 : D1 轉換成 D2 的轉換規則, 稱為
BODE script。
 T21 : 可將 D2 轉換為 D1 的 XQuery
文件。
 DB : XML 資料庫，與 D2 相同 schema。
 D2: 由 XML 資料庫選取出來的資料，
為 DB 的子集合，格式為和 D2 相同
schema 的 XML 文件。
 D1: 要呈現的 HTML 文件。
系統的每個模組的功能如下:
 BODE : 一個用來從 D1 中擷取資料的擷
取工具。BODE 系統的輸入為 BODE
script 和 D1 。
 Bi-transformation 元件 : 藉由此模組來產
生可將 D2 轉換為 D1 的 XQuery。
 Select : 選取 Database DB 中的特定資料。
 XQuery processor : XQuery processor 執行
XQuery script，常見的有 Xalan, Saxon,
MSXML 等 [12] [13] [14]。
系統的執行過程如下:
1. BODE 系統會根據 BODE Script，即 T12，
擷取出 D1 文件的資料，並且轉換成文件
D2，這個 D2 文件是與 XML 資料庫 DB
相同 schema。
2. 利用 Bi-transformation 元件得出 D2 到
D1 之間的轉換規則，即 XQuery script
T21。
3. 由於資料庫 DB 的資料可能非常龐大，我
們必須從 XML 文件資料庫中根據特定條
件透過 Select 功能選擇出來一些資料放在
D2當中。
4. 並且使用 XQuery Processor 依據 T21 的
轉換規則將 D2轉換為 D1。所得到的
文件 D1即為與 D1 網頁具有相同樣式
的網頁。
雙向 XML 轉換元件之概念
假設我們要將 XML 文件 D2 轉換為 HTML 文件
D1 呈現出來，我們必須寫出 XQuery script T21 將
D2 轉成 D1。本篇論文提出的方法是以視覺化的
擷取系統 BODE 來產生 D1 到 D2 方向的
XQuery script T12，一旦產生之後，另一個方向 D2
到 D1 的 T21 就可以由 Bi-transformation 元件來
自動產生。如此一來，使用者只需要會操作
BODE，而不必撰寫 XQuery script。
雙向對映在資料處理上是一種基本的觀念。例如
在關聯式資料庫中，假設一個 view V 是由 table
T1, T2, …, Tk 投影而來。當 T1, T2, …, Tk 的資料更
新時， view V 的相對資料也會隨 之更新。相對
地，當使用者修改 view V 的資料時，我們會希
望這些修改會更新至原始的 table T1, T2, …, Tk 之
中。這便是另一個方向的對映關係。
類似上述觀念， XML 資料轉換的雙向對映亦
有許多應用。
Bi-transformation 元件是一種 XML 轉換語法
(如 XSLT 和 XQuery) 的產生器。它接受二個文
件的單一方向轉換 XQuery，而產生另一方向的轉
換 XQuery。Bi-transformation 元件的 input 為一
個 HTML 文件 D1 和一個 XML 資料庫文件
D2 ，以及 D1 到 D2 的對映關係 T12 。
Bi-transformation 元件會分析 D1 及 D2 的對映
關係並由 T12 推導出 D2 到 D1 的對映關係
T21。
目前已有許多具備雙向對映的 XML 元件被開
發出來。說明如下 :
1. XML 透過 DB 的雙向對映
XML DB XMLDB
在 [10] 中 ， Ling Wang, Elke A.
Rundensteiner 和 Murali Mani 說明 XML
views 的更新可以透過 relational database
來達成。當 XML view 被更新時，對映此
XML view 的 database view 亦會更新，和
此 database view 相關的所有 database
tables 的對映的資料也會被更新，進而使得
和此 database 對映的 XML 也受到更新。
另一個方向的轉換也是如此。
6declare function Func_html_1(…)
{
<html>
{Func_table_2(…)}
</html>
};
declare function Func_table_2(…)
{
<table>
{Func_tr_3(…)}
</table>
};
declare function Func_tr_3(…)
{
<tr>
{
let $book:=$doc/books/author/book
return Func_td_5($doc, $book)
}
</tr>
Func_tr_4($doc)
};
declare function Func_td_5($book)
{
<td>{$book}</td>,
local:Func_td_6(…)
};
實作成果
以下是實驗是以Yahoo 以及 Amazon 的書籍拍賣
網頁為例進行轉換。圖5與6是Yahoo 以及 Amazon
網頁的原始網頁，經過本論文所研發的雙向轉換系
統，得到圖7 (Amazon.com 內容，Yahoo格式) 與 圖
8 (Yahoo內容，Amazon.com 格式)。
圖5 Amazon.com 原始網頁
圖5 Yahoo Shopping 原始網頁
圖5 Amazon.com 內容，Yahoo格式。
