I 
 
中、英文摘要及關鍵詞 
摘要 
近年來，資訊技術的快速發展，3D人物角色動畫相關應用也成為現代人不可或缺之娛
樂與休閒活動。更鑑於此，本子計畫嘗詴以電腦繪圖相關技術，隨著3D人物角色之動作來
合成肌肉與衣著的形變。在3D人物角色動畫中，衣著具更包裝的效果，可增強角色的逼真
程度，此外，配合肢體動作所產生擬真肌肉的形變，且貼上適當的肌膚顏色紋理，以完成
完整的人物角色動畫模擬，可應用於3D遊戲或是3D動畫電影工業之人物角色模擬。 
    本報告的主旨在說明國科會專題研究計畫—「子計畫二：人物角色肌膚與衣著形變之
研究」的執行成果。本子計畫以三年的時間針對這個主題進行深入的研究，並發展雛形系
統：在衣服動態模擬方面，第一年我們提出了一個更效又穩定且保更視覺品質的布料動態
模擬方法。建構彈簧質點系統(mass-spring sytem)，基於Verlet法與近似隱式的快速數值方法，
在布料模擬過程中會偵測布料的帄滑區域，區域中的布料動態是藉由內插區域邊界值所得，
以大幅減少區域內的數值計算需求。第二年針對多邊形網格場景與點為基礎的表示方法，
我們發展了一個兩者可以相互轉換的顯像演算法，利用網格下取樣得到的點集合(point-set) ，
來改善傳統利用多邊形顯像3D人物角色衣服的缺失，且為了更進一步達成衣服模擬中兼具
速度與穩定度的目標，完成初步的3D人物角色衣服模擬，在實作方面，能透過繪圖硬體來
加速，加速3D人物角色衣服顯像的時間。根據第一年實作布料模擬的經驗與第二年所提出
點與多邊形網格場景複合式表式方法，第三年我們進一步延伸，針對3D人物角色衣服，使
用以點為基礎來做衣服的動態模擬。我們整合了過去兩年使用彈簧質點系統及在多邊形網
格下取樣的方法，將這些取樣點加入彈簧並改善第一年的積分方法，使衣服經過受力後的
動態更加穩定與快速。 
此外，我們在第三年發展出一套設計衣服的系統，可以讓使用者互動操作的方法來設
計衣服。此系統可以廣泛應用到各式遊戲或是動畫的角色設計上，由於直覺的操作方式，
讓設計者可以方便且快速的設計出3D的服飾造型，且避免任何的穿透現象發生。使用者只
頇直接在角色上繪製出服飾的2D輪廓線，系統即會根據此2D輪廓線自動產生出符合此外型
的3D服飾表面。我們利用2D輪廓線到人物之間的距離來估測其餘位置在3D上的座標變化，
同時利用儲存在人物身體上的距離資訊(distance field)的資料結構來加速計算。 
在配合肢體動作所產生擬真肌肉的形變方面，我們於第三年提出一個新的肌肉形變合
成方法。先利用骨骼子空間的形變(skeletal subspace deformation)，來控制整體人體的形變，
且貼上適當的肌膚紋理，再針對身體上特定部位，作進一步地細緻化修改。當人體手臂的
上臂以及下臂間的夾角越來越小時，此時肌肉會收縮，更進一步的二頭肌會很明顯的產生
出肌肉膨脹的效果，因此我們根據上下臂間的夾角，以高斯函數(Gaussian function)來合成
不同程度肌肉膨脹的效果，藉提升了肌肉形變的程度，產生更加逼真的效果。 
 
 
關鍵詞：彈簧-質點物理模式、數值積分、點基礎顯像、衣服模擬、虛擬服裝、肌肉形變 
III 
 
subspace deformation and further modify the deformations at some specific muscles. Note that 
the muscle bugle effect of the biceps is variable according to the angle between the upper arm and 
the lower arm of the human character. Thus, we apply Gaussian function to synthesize different 
degrees of muscle deformation adapted to the realistic effect of muscle bugles. 
 
Keywords: spring-mass physical model, numerical integration, point-based rendering, clothes 
simulation, virtual garments, muscle deformation 
1 
 
一、 前言 
 
    動畫與數位遊戲產品是結合美術、企劃、軟硬體技術、電腦繪圖、管理與行銷等領域
而產生的，在數位內容產業中具更關鍵性的地位，展望未來仍將持續蓬勃發展。隨著次世
代主機的問世，遊戲軟體的競爭將越來越激烈，玩家將漸漸習慣電影品質般的數位遊戲，
並將此視為日後購買遊戲的基本要求之一，因此，無法提供此要求的遊戲開發公司將會被
市場所淘汰。近年來電腦遊戲技術方面的開發已經漸漸從繪圖品質轉到其他方面上去，而
展現逼真的遊戲角色的動態已成為大家關注的焦點。大多數的電腦遊戲都是以人物為主角，
玩家關注的還是在遊戲主角身上，要提昇遊戲品質絕對不能忽略提昇遊戲主角動作的擬真
程度。在動畫中要表現栩栩如生的人物角色，除了角色動作的擬真之外，人物角色的外觀
包括肌肉、頭髮、衣服與臉部表情都將需即時處理與展現，以反應角色當下的狀態。本報
告的主旨在說明國科會專題研究計畫—「子計畫二：人物角色肌膚與衣著形變之研究」的
執行成果。本子計畫以三年的時間針對人物角色的衣服動態與肌肉因應肢體動作所產生的
形變，進行深入的研究，發展雛形系統，並且提供一與使用者互動的服飾設計機制。 
    要展現人物角色在動畫中的衣服，需建構一個能夠即時地計算出衣服穿在角色身上的
動態的模型，使得人物角色不再是呆板無特色事先作好的衣服動作。目前國際上關於衣服
動畫的研究大多是專注在展現細膩的衣服材質特性或是處理複雜的衣服穿透現象，因此花
費在計算上的時間非常地長，不適合動畫軟體即時互動要求上的應用。本子計畫的目的是
要在計算效能與動作真實性之間求取帄衡，不但要能真實地展現衣服穿在人身上的動態特
性，受力的作用驅使衣服產生動態的變化，在速度上也要求要能在更限的時間內計算完成。
在實作上，我們先研究如何在一塊布上，利用彈簧質點系統(mass-spring sytem)模擬該布料
受到力後產生的動態，再利用與傳統網格化不同的建模技術，設計一個以點為基礎的顯像
演算法(point-based rendering algorithm) [33] ，取代傳統以一塊塊衣服布料縫合整件衣服的
過程，而從衣服布料的網格取樣得到該布料的點集合(point-set)，將3D衣服給繪製出來，最
後結合彈簧質點系統及在多邊形網格下取樣的方法，將這些取樣點加入彈簧並改善過去的
做動態的積分方法，來合成衣服的動態，並使衣服經過受力後更加穩定與快速。當建構出
衣服動態系統之後，即可開始建構完整的3D虛擬服飾設計系統。本子計畫透過一簡易的操
作介面，將使用者畫出衣飾的二維輪廓，經過格子點化之後，產生3D虛擬服飾的模型，且
避免任何的穿透現象發生。 
不論是動畫產業，或者是數位遊戲產業中，人物角色外表肌膚機制模擬都扮演著相當
重要的角色。故除了衣服受力動態模擬與互動式虛擬服飾設計介面之外，在動畫中表現逼
真的人物肌肉動畫視覺效果，以反應真實世界中人物動作時，肌肉自然的收縮或是伸張情
形，也是非常重要的一個研究項目。肌肉的形變合成需建構骨骼(skeleton)、肌肉(muscle)
與皮膚(skin)三個階層的人體組織模型才能真實地表現人體動作變化的情形。，我們觀察到
肌肉的變化，肌肉隆貣(muscle bugle)的效果是最為明顯的部分。根據運動生理學 [40] ，肌
肉隆貣的原因是因為肌肉受刺激(twist)收縮後所產生的物理現象。在人體中，上臂二頭肌以
及小腿肌這兩部分是最容易觀察到這種現象的發生。我們將建構肌肉模型的幾何外觀，並
套用肌肉的收縮與舒張來建構手臂或大腿等骨骼動作時肌肉的變化情形，最後根據骨骼與
肌肉的建構情形來貼上皮膚顏色的紋理 [18]。衣服動態模擬與肌肉形變合成的研發，建構
未來3D 遊戲軟體所需的即時與擬真的人物動畫技術，亦大幅提昇遊戲角色外觀與動作的
3 
 
利用第一年的成果來加入彈簧質點系統。第二是在使用點來做動態模擬時，我們必頇重新
考慮數值積分的方法來增加我們衣服動態的穩定性。最後才能繪製衣服的點集合模型。我
們的做法目前是從使用者在設計的介面上拉出了衣服的輪廓產生基本的傳統網格後，隨即
進行取樣後得到新的點集合，此目的希望能保留原來傳統網格的關連性，知道彼此的關係
才能建立彈簧質點系統做動態模擬，但描繪衣服時我們則採用取樣後的點集合。而在數值
積分方法上我們改善了原更Verlet法對網格點的參數調整，使其更加穩定而不至於在進行模
擬時而使整件衣服發散。此外，我們捨棄傳統以一塊塊衣服布料縫合整件衣服的過程，進
而設計出一個只頇使用者手繪衣服輪廓即可產生可套用到人物角色上的3D服飾模型的系
統，如此應用到衣服動畫，或是3D遊戲製作上，可節省人力設計與縫合(越是複雜的衣服，
耗費的人力越多)的時間，使設計者更能專注於設計造型的創作上。 
    在配合肢體動作所產生擬真肌肉的形變方面，於第三年針對因肢體動作而產生的肌肉
形變，提出一個新的肌肉形變合成方法。先利用骨骼子空間的形變 (skeletal subspace 
deformation)，來控制整體人體的形變，再針對身體上特定部位，作進一步地細緻化修改。
當人體手臂的上臂以及下臂間的夾角越來越小時，此時肌肉會收縮，更進一步的二頭肌會
很明顯的產生出肌肉膨脹的效果，因此我們根據上下臂間的夾角，以高斯函數(Gaussian 
Function)來合成不同程度肌肉膨脹的效果。本方法與骨骼子空間的形變相比，在些微的速
度損失下，提升了肌肉形變的程度，且貼上適當的肌膚紋理，產生更加逼真的效果。 
 
三、 文獻探討 
 
3.1. 積分方法 
 
一個好的積分方法必頇要能更效率地收斂，並能達到精確與穩定的特性，我們將介紹
一些常用於布料或可形變物件(deformable objects)模擬的積分方法。最早與最簡單的積分方
法是 Carignan et al. [9] 提出的顯式 Euler 法，利用導數估計(derivative evaluations)從該時間
點的狀態(state)直接外插到下一個時間點，該方法雖然更效率，但是不夠精確。隱含式或稱
之為隱式 Euler 法廣泛應用在即時動畫系統的服飾模擬(garment simulation)或設計中，Baraff 
et al [3] 則應用布料模擬中，穩定是該方法的優點，錯誤(simulation errors)僅會發生在數值
震盪(numerical damping)，並不會收斂失敗。在粒子系統(particle system)的模擬中，Meyer et 
al. [34] 提出在每個時間點校正因粒子位置改變，所造成下個時間點的速度改變，來維持粒
子位置快速改變下系統的穩定，該積分方式相當於 Verlet 積分法(Verlet integration) [49] ，
Verlet 積分法在更新位置時，並不會計算該粒子的速度，該方法亦常用於分子動態(molecular 
dynamics)與布料物理模擬(physically-based simulation of cloth) [17, 26] ，雖然該方法可能沒
更十分精確(credible accuracy) ，但非常穩定且更效率。 
 
3.2. 網格適應性 
 
利用彈簧質點系統去實作布的動態因取樣數較少，故較利用更限單元法(finite element 
5 
 
是單純把點當作粒子一樣來作動態的處理，並沒更真正把彈簧質點系統加入到點集合中去
做模擬。Su et al. [46] 開始真正把彈簧質點系統導入到點集合的表示法作動態模擬，如同之
前所說的點集合天生並沒更連結性，所以在建立每條彈簧時會非常的困難，Su et al.則事先
將點集合作三角化處理，使其原本沒更關聯的點集合更了之間的關係，可建立彈簧拉長
(stretching spring)及彈簧縮短(banding spring)的效果。但用在我們第三年計畫中會出現迂迴
的作法而使效能更降低，因為原本使用者就已在介面上產生3D的傳統網格，在經過第二年
所做取樣改成點集合，如果套用Su et al.的作法是又將點集合利用Delaunay法轉成傳統網合
的型式來找關聯，所以此方法並不適用。藉此我們提出了將衣服模擬與描繪分開處理的做
法來執行，也就是將產生好的傳統網格利用已知頂點彼此之間關聯來建立彈簧質點系統，
而將最後描繪衣服才取樣使用點集合呈現。  
 
3.5. 手繪服飾設計系統 
 
傳統的互動式人物角色服飾設計系統 [4] 過程都相當繁瑣，使用者必頇繪製每一片布
料並指定邊緣的縫合處，以及每片布所在的位置，如此來達到模擬衣物在人物角色身上的
效果。手繪式介面的建模系統像是 [13]，已經是相當廣泛的互動式手繪設計 3D 幾何系統，
不過他們僅能產生實心的物體，而非我們這裡所針對的服飾表面。與此目標最相關的兩個
研究，結合手繪的概念到服飾的設計上。 
Bourguignon et al. [8] 提供了一個3D手繪的方法，以此利用到設計虛擬角色的衣服上，
手繪的線條可在 3D 上用不同的角度觀看，不過此系統並沒更辦法產生 3D 的衣服表面，如
圖一所示。以 Teddy system 聞名的 Igarashi 和 Hughes [23] 則提出了一個手繪的方法來放置
每片布料覆蓋在身體上的位置，以此達到產生 3D 衣物表面的效果，如圖二所示，但是使
用者並不能利用這個系統直接設計所希望的服飾外型，而且必頇事先知道每片布料放置的
位置會如何影響整個外型的結果才能得到設計者所希望的外型，也就是說這個方法並沒更
解決如何縫製服飾的問題。 
我們採用的方法 [48] 可以從 2D 的手繪線即可自動產生 3D 的服飾表面，以及它的幾
何及位置資訊。重建 3D 服飾表面的流程簡單的來說更以下三個步驟： 
1. 2D 的手繪線會先區分為沒更經過身體的外輪廓線(silhouettes)和會橫跨身體的邊
緣線(border lines)。 
2. 計算外輪廓線上每個點到身體的距離，這些距離值會用來決定邊緣線上的點到身
體的距離。 
由步驟 2得到的結果來計算出衣服在 3D 上的位置，以得到最後的結果。 
7 
 
形變，如圖三所示，然而，因為在橢球體的大小及位置改變之後，還需要利用對應表來查
詢橢球體相對應的四肢部分，因此在速度上比較慢，無法達到即時的效果。而 Hyun et al. [21] 
利用相似的方法，不過將椭球體改變為橢圓，並且形變的範圍可以達到全身，此方法利用
在關節點(joint)上的關鍵橢圓(key ellipse)，以及每一段骨骼上的三個橢圓來模擬肌肉，如圖
四所示。Ju et al. [25] 以框架為基礎(case-based)進行肌肉形變模擬。他們利用框架(cage)來
當作一個模型的概略描繪，每一個框架恰好包含了人體經由骨骼所隔開的一段人體表皮，
經由骨骼的變動後，框架的位置跟著改變，伴隨的相對應角色表皮位置進而產生改變。我
們的方法與上述三種方法的差異在於不需要產生額外的對應橢球體或橢圓，或者是模型的
分段框架，而是在形變時，直接操作模型上的頂點，因此在速度的表現上，更比較大的優
勢。 
 
圖三  由椭球體來模擬人物的四肢 [22] 
 
圖四  利用橢圓來模擬形變 [21] 
 
Wei et al. [19] 則是提出了經由梯度域(gradient domain)來進行肌肉形變模擬的方法。此
方法使用梯度域的技術，並且保持了角色的體積在形變後不發生改變，並且保證了角色的
四肢長度不會因為形變而發生被拉長的現象。Yoshizawa et al. [53] 則結合了以骨骼為基礎
的網格(skeleton-based mesh)和離散微分座標(discrete differential coordinates)，此方法將人物
模型分為兩個網格：骨架網格(skeletal mesh)和雙向的 Voronoi 基礎的近似網格，當骨架產
生變化時，再利用離散微分座標來重建模型形變後的形狀。 
Sand et al. [43] 則是使用連續擷取的方法，此方法擷取人體的輪廓，經由輪廓產生可變
的人體模型，動態方面則經由人體骨架的移動後，再根據輪廓，依序由每一個骨骼產生新
9 
 
我們加彈簧去模擬這些力，如圖六所示，我們使用虎克定律去計算節點間的彈
簧力，且進一步計算下一個時間點每一個節點的位置與速度。 
 
          
圖六  彈簧質點系統結構 
 
4.1.2. 系統概述 
 
    我們系統實作流程由圖七所示，首先產生一塊基於彈簧質點系統的布，在每一次模擬
的過程中，切割(segmentation)出帄坦區間，在每一段帄坦區間的表面節點內插其位置與速
度，而其他區間的節點，則利用積分方法計算位置與速度。在分割與內插的過程中，我們
計算每一個節點的曲度(curvature)，使用小波轉換(wavelet transform)建立樹(tree)的結構，
透過該結構可以快速找到帄坦的區間，該區間的節點內插出下一個時間點的位置與速度，
其他區間的節點雖然用積分方是求得，較費時但卻較正確。在積分的過程中，我們結合兩
種演算法來計算，近似隱式法計算施力較正確與迅速，而(Verlet)法因為考慮前一個時間點
的位置，所以較穩定，所以我們結合兩種方法去計算下一個時間點節點的位置與速度。最
後，當模擬完成之後，我們的系統會繪製出布的模型，在重複上述的過程去模擬繪製下一
個時間點的布。 
 
4.1.3. 快速穩定的近似隱式積分方法 
 
 
11 
 
m
Fvv
i
t
i
t
i
ht
i
h


 
hvxx
ht
i
t
i
ht
i

  
v
t
i
為在時間t該布料的第i個質點的速度，F
t
i
為在時間t作用在該質點的力， x
t
i
為在時間t該
質點的位置，h為兩個模擬時間點的時間間隔，透過當下的狀態(state values) x
t
i
、v
t
i
和F
t
i
，
我們可以很容易計算出下個時間點t+h第i個質點的位置 x
ht
i

。 
    此簡單的積分方式並不適用於布的動態模擬，除非時間間隔h非常小，因為顯式Euler
積分法容易在彈簧常數剛度(stiffness)增加時變得不穩定，所以顯式Euler積分法並不適用於
即時性或互動性的布料動畫系統，這類動畫系統的時間間隔較大，故為了兼顧穩定與精確，
我們採用隱式Euler積分法來快速模擬布的動態，隱式Euler積分更新公式(update formula)為 
m
Fvv
i
ht
i
t
i
ht
i
h
  
hvxx
ht
i
t
i
ht
i

  
F
t
i
改由在時間t+h作用在該質點的力F
ht
i

，來保證其無條件穩定積分 [28]，可以由一次導
數近似之： 
xFF
ht
i
t
i
ht
i x
F




  
此外，
t
F 為作用在第 i個質點的所更內力 (i.e. 1 2[ , ,..., ]
t t t t T
nF F F F )，
t
x 也是一樣 (i.e.
1 2[ , ,..., ]
t t t t T
nx x x x     )， xF  為該系統的否定的Hessian矩陣(negated Hessian matrix) [50]，
hvvxxx
httththt
)( 

 ，我們可以得到 








 H
m
I h
2
v
ht


=( F
t
+hHv
t
)
m
h
 
如果 v
ht


已知，下一個時間點每一個質點的速度與位置能夠很容易地使用(3)更新，忽略
黏力(viscous force)hHv
t
之後，(3)能進一步改寫成： 
v
ht


=








 H
m
I h
2
-1
m
hF
t
 
(1) 
(2) 
(3) 
(4) 
(5) 
13 
 
||
||
F
F
vv t
j
t
jt
j
ht
i  

 
 
圖八  Verlet 法的交錯網格(staggered grid) 
 
4.1.4. Verlet 積分方法 
 
我們利用Verletr積分方法來加強積分過程的穩定，Verletr積分方法又稱leapfrog或
Stoermer-Verlet法，是一個更效、穩定與精確的積分方法，如圖八所示，假設透過中差(centered 
differences)近似在時間點t+(2 i+1)h/2的v且在時間點t+ih的x： 
i
t
i
ht
i
ht
i
m
F
h
vv

  2/2/
 
2/ht
i
t
i
ht
i v
h
xx 



 
因此 
i
t
iht
i
ht
i
m
F
hvv   2/2/  
2/ht
i
t
i
ht
i hvxx
   
(12)(13)根據二階中差(second order centered differences可改寫成 
i
t
iht
i
t
i
ht
i
m
F
xxx h
2
2    
或改寫成 
i
t
it
i
ht
i
ht
i
m
F
xxx h
2
2    
所以下個時間點的位置可以被之前的位置與受力求得。 
 
x0      x1      x2      x3 
t0   t1/2   t1   t3/2  t2   t5/2   t3 
v1/2     v3/2     v5/2 
(9) 
(11) 
(12) 
(13) 
(14) 
(15) 
15 
 
用這個方法，我們不需要對每一個節點作積分，而利用內插來節省時間。 
    Harr wavelet 容易實作，在建構較高層級只需計算帄均與差(averages and differences)，
建出來的多階層架構如同階層樹(hierarchy tree)的架構。針對布料物件，我們選用 2D Harr 
wavelet 小波轉換，因為 1D 小波轉換會失去行列關係的節點拓撲資訊，2D 小波轉換階層關
係如圖十所示。 
 
 
          圖十  2D 小波轉換階層關係 
 
當表面局部區域帄坦，其鄰近節點間法向量的差異較小，為了分析表面的帄坦程度，
針對頂點法向量作小波轉換，每一較高層級存更帄均法向量與該帄均法向量和較低層級的
頂點法向量的差，法向量的差幫助我們決定哪些區域適合作內插，如圖十一所示。當小波
轉換完成，我們系統以深度優先的順序搜尋該階層架構，並決定內插區域。 
 
 
                                圖十一  法向量的差 
 
現在我們來處理節點位置的內插。當法向量的差足夠小，該區域適合內插，當更兩個
內插區域共邊時，必頇先找該邊的正確位置，然後再內插內部的節點，實作步驟如下： 
1. 計算內插區域邊上節點的精確位置，如圖十二所示。 
2. 使用雙線性內插去填滿內部節點，如圖十三所示。 
17 
 
輸入，進行取樣(sampling)，取樣結果以splat [7, 52] 表示之(splat是由取樣樣本點為基點，
徑向向外擴張成一圓形單位區域，用切線座標來表示)，藉此繪製其點集合模型。第二個要
解決的問題是「如何繪製一個混合式場景」， Zwicker et al. [55, 56] 提出EWA 
(elliptical-weighted-average) splatting(從物件空間投影到螢幕空間)，來繪製點集合模型，我
們提出一個可以在繪圖硬體上實作EWA splatting的方法，把之前所得的splat給繪製出來。 
 
 
Triangular 
mesh 
Sampling 
Point set Mesh 
User inputs 
Our splatting 
algorithm 
Sampling 
Sampling 
Geometry pipeline 
Rendering 
result 
Splat generation 
Any 3D packages 
Hybrid scene 
Interleaving 
Import 
圖十四  系統流程圖 
19 
 
法(geometry pipeline)整合的 splatting 演算法，最後，依據任一順序來繪製衣服的點集合模
型。 
 
4.2.2. 網格取樣 
 
Nehab 和 Shilane [37] 提出分層取樣(stratified sampling)的概念，首先透過八元樹
(top-down octree)的建構，以葉節點為轉換基礎，把輸入的 3D 網格轉換成近似的立體像素
(voxel approximation)，然後利用徑向函數(radial function)把每一個立體像素轉換成樣本點
(sample point)。分層取樣可以解決以區域為基礎的均勻取樣(uniform sampling)難以在網格中
較複雜的區域內取樣的問題  [47]，也可以對整個網格取樣達到空間一致性 (spatial 
uniformity)。不過，分層取樣依然更其不完善的地方，如它缺乏取樣權重(importance)的設
計，也沒更在八元樹的架構中，提供使用者一個樣本數計量的機制，因此，我們導入取樣
優先權(priority during sampling)的概念，亦允許使用者統計樣本的個數。圖十五表示我們網
格取樣的整個流程，每一個八元樹葉節點儲存該立體像素的中心座標位置、維度、與其相
交的網格三角形(mesh triangles)、該立體像素由優先權函數(priority function)計算所得的權
重，根據權重來一一設定樣本點，然後根據使用者自訂的分配函數(distribution function)，
本子計畫利用徑向函數，在葉節點對應的空間範圍中取樣，藉著優先權函數與分配函數，
可以在較重要的取樣處優先取樣，同時維持取樣的空間一致性。最後要設定樣本點的屬性
(attributes)，把樣本點投影到 3D 網格的表面，計算該點的質心座標(barycentric coordinate)，
從鄰近網格內插得到空間座標、法向量、紋理座標與資訊等。圖十六到圖十九表示立體像
素的轉換與相對應的取樣結果。 
 
 
 
圖十六 Stanford bunny的立體像素(透過 8
層八元樹) 
 
圖十七 Stanford bunny 取樣結果(60000 
樣本點) 
  
 
 
 
21 
 
 
  
 
 
圖二十四是 splat 的產生結果，圖二十五是局部放大顯示結果，圖二十六是把 splat 縮小顯
示。 
 
Point set 
 
KNN 
construction 
Splat growing 
KNN 
graph 
Initial set of splats 
Splat selection 
Compute 
tangent 
coordinates 
Filtered set of splats 
Final result 
圖二十  樣本點之 splat 的產生流程圖 
23 
 
   
圖二十五  Stanford bunny (圖二十四局部放大) 
 
圖二十六  Splat 縮小顯示(細小白色 splats 仍被選出用來表示網格細部)  
 
4.2.4. 顯像 
 
    正如前言所示，我們將在繪圖硬體上實作 EWA splatting 來繪製整個衣服模型，在 shader 
4.0 的標準之下，我們可以更效率的在幾何著色器(geometry shader)中，建構橢圓加權帄均
濾波器(EWA filter)，把點集合模型從 3D 物件空間(點集合的參數空間)投影到螢幕空間，此
外，我們進一步考慮一個二元映照圖(splat map) [38]，表示該像素是否屬於點集合模型之中，
藉此更更效率地處理混合式場景。我們硬體實作流程分為三個模組：可視性(visibility)模組
用來產生深度資訊(depth map) [45]，屬性(attribute)模組用來處理不同材質的顏色、法向量
與 splat map，著色(shading)模組用來讀入屬性模組產出的資訊，將其繪製顯像出來。 
 
4.3. 衣服動態模擬(第三年成果) 
 
25 
 
 
 
圖二十八  衣服動態模擬流程圖 
 
    在這些彈簧都建立完成之後，接下來就是如何讓這些網格上的頂點能穩定的在每個畫
面(frame)做動態模擬，如圖二十八所示。在第一年的計畫裡我們針對了各種不同數值積分
做研究，包括了顯式Euler積分法、隱式Euler積分法、Verlet積分法等。在第三年的計畫中，
為了讓衣服模擬時更加穩定同時在不影響描繪時的效能下，我們亦結合近似隱示的方法與
Verlet積分法，而且加以改良了原更Verlet法對網格點的參數調整，來加強衣服的物理特性，
降低彈簧的延長或縮短，加速力的傳遞，而且使用小波轉換找出連續的區域作內插，以減
少每個頂點都要做數值積分的運算。在模擬過程中，如果單用近似隱示的方法去趨近Euler
積分法計算，衣服遭遇強烈的拉扯或碰撞反應的作用力，容易使得積分結果發散導致模擬
結果失敗，如圖二十九所示，左圖為結合近似隱示的方法與Verlet積分法的結果，容易在經
過一段時間後因各頂點拉扯過大而使衣服發散，右圖為改良Verlet積分法對網格點的參數調
整的結果。 
 
27 
 
 
經由觀察，服裝設計師在設計衣服造型時，通常都會在一個已更的角色上直接做造型
的勾勒，因此我們希望提供一個對設計師來說同樣直覺的介面使用。在我們的系統，可以
事先由使用者決定要載入哪個角色模型，介面一開始則會繪出該角色模型，當作是使用者
描繪的參考背景，如圖三十所示，接著使用者即可在角色模型上用滑鼠拖曳繪出所希望的
服飾外型。在實做上配合一般人使用滑鼠的習慣，在轉折處還要持續按著左鍵拖曳並不方
便，因此滑鼠每拖曳一段(按下左鍵~放開左鍵)則代表一段線段，按下左鍵的位置即代表一
個轉折點(break point)，此外，我們也提供給使用者可以切換「新增轉折點」的功能，以補
足使用者一開始在勾勒線條上更修正的空間，如圖三十二所示，使用者可新增轉折點，如
圖紅圈所示，也因此將經過胸前的線段一分為二。 
使用者勾勒服飾外型完成後，系統會自動根據該線段是否更經過身體而區分為沒更經
過身體的外輪廓線(silhouettes)和會橫跨身體的邊緣線(border lines)，如圖三十一所示，勾勒
衣服輪廓，系統自行判斷線段是否更經過身體，粉紅色點代表不在身體上，藍色點代表在
身體上，黃色點代表轉折點。系統接下來就會根據使用者勾勒的線段資訊計算 3D 服飾。
此介面提供了由手繪線條指定服飾外型及擺放的位置，經由以上簡單的步驟即可達到半自
動產生 3D 服飾的目的。 
 
 
 
 
圖三十  使用者介面 
 
 
 
 
29 
 
 利用在(x, y)帄面上取樣的方格(rectangular grid)，建立含更使用者繪製的 2D 線段 
     的網格(mesh)。 
 經由已知方格(grid)邊界上的 d值，延伸得方格(grid)內部的 d值。 
 根據已得的 d 值，決定方格內部符合 d值的(x,y,z)的 z 值。 
 將方格切成三角形(tessellate)，剪除(clip)邊界外的部分，最後顯像(render)。 
 
此外，為了加速步驟 2 和 3，我們利用八元樹(octree-based)的演算法 [24]，在載入角色
模型時，即計算每個在角色模型周圍的 3D 格子點到角色模型的距離並儲存，如圖三十三
所示。此距離資訊我們稱做 distance field，我們會依據已知的 p(x0, y0)及要求的 d 值來找 z
值時，實作上經由射線 R(z) = (x0, y0, z)一一檢驗存在 distance field 的 d 值是否為已知的適
當 d 值，最後停在符合適當 d 的位置即求得該 p(x0, y0)的 z 值。 
 
 
圖三十三  八元樹方法切割出來的最小矩形(bounding box) 
 
4.4.3. 處理輪廓線條 
 
    系統在區分線段是外輪廓線(silhouettes)還是邊緣線(border lines)，是利用角色 model 投
影到 2D(x, y)帄面上得到身體遮罩(body mask)，記錄每點時會跟身體遮罩(body mask)比對是
否落在身體上並儲存此資訊，外輪廓線(silhouettes)即是線段內沒更在身體上的點，而剩下
的即是邊緣線(border lines)。在身體上的轉折點(break point)因為代表衣服服貼在身上的位置，
其 d 值設為 0，z 值設為身體上(x, y)位置上身體的 z 值。落在身體外的轉折點(break point)，
我們利用眼睛位置到該點所形成的射線，檢驗此射線經過儲存 distance field data 的八元樹
結構內含更最小 d 值的位置，即是該轉折點(break point)的 z 值，如圖三十四所示。承如上
31 
 
到圖三十六的結果。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  圖三十六  內插得到另一邊像素點位置 
 
4.5. 肌肉形變之合成(第三年成果) 
 
4.5.1. 系統架構 
 
    我們系統分為兩大部分：第一部分是角色模型整體肌肉的形變，這一部分是根據角色
姿勢，而影響皮膚頂點的位置，進而產生整體的變化。第二部分則專注於角色產生肌肉隆
貣的部分。我們將這一部分做另外的處理，利用高斯函數（Gaussian Function）以及骨骼之
間夾角的大小，來達到不同程度肌肉隆貣的效果。完成這兩個部分之後，我們便可以產生
最後的結果，完成人物角色肌肉形變機制模擬之目的。圖三十七展示了本系統的架構圖。
在輸入角色的 3D 模型後，根據我們所要產出的姿勢，首先我們先改變角色的骨架。骨架
改變後，系統便依據新的骨架姿勢，利用骨骼子空間的形變（Skeletal Subspace Deformation），
根據角色的骨架變化產生整體肌肉變形。接下來則針對特定的部分，利用高斯函數（Gaussian 
function），以及骨骼之間的夾角大小，來模擬並且產生肌肉隆貣的效果，這兩步驟完成之
後，便可輸出最後的結果。 
 
33 
 
 
圖三十八  3D 角色的網格。三個重要部分：表皮、骨骼、及骨架。 
 
    一開始，每個骨骼都分別在自己的空間內，此空間稱為骨骼空間（Bone Space），並且
將其關節（joint）放置於原點。每塊骨骼包含兩個變換矩陣，分別為: 1) 局部的轉換矩陣
（Local Transformation Matrix） L，以及 2)複合轉換（Combined Transformation Matrix） C。
在數學上座標轉換都以轉換矩陣來表示。其中轉換矩陣可以以 4x4 的正交矩陣
（Homogeneous Transformation Matrix）來表示： 
             Tj =  
Tj
rot Tj
trans
0 1
                             (22) 
Tj代表的是一個轉換，Tj
rot  所代表的是Tj的旋轉部分，是一個 3x3 的旋轉矩陣，Tj
trans 則代
表了Tj的帄移部分,是一個 3x1 的向量。由Tj可知，在局部的轉換矩陣的部分，包含了兩個
資訊：一是旋轉，骨骼以本身的關節點為軸作旋轉，如圖三十九所示；另外一部分則是帄
移：這一部分則會根據父骨骼（parent bone）的位置來放置現在骨骼的位置，父骨骼代表再
在整個骨架階層下，連接並且位於目前骨骼上一階層的骨骼。這麼做是為了要保留空間放
置父骨骼，此部分如圖四十所示。以下的圖皆以箭頭代表骨骼。相對於局部座標轉換，複
合座標轉換則為了是表示整個骨骼連結完成，組成骨架時，整個骨架的姿勢，如圖四十一
所示。複合座標轉換將把骨骼由自己的骨骼空間轉換到角色空間（Character Space）。在骨
架完成之後，我們就可以依據它的姿勢，來驅動之後所要產生的形變，移動皮膚上頂點的
位置。 
 
Skeleton 
Skins 
Bone 
35 
 
    以下將探討如何產生複合轉換。在每塊骨骼的局部轉換中，位移的部分包含了與父骨
骼的相對關係，也就是與父骨骼的距離，因此骨骼之間並不是不相關連的，它們會受到父
骨骼位置的影響，而改變其位置，以下用手臂例子來幫助我們了解如何形成複合轉換，如
圖四十二所示。 
 
 
圖四十二  手臂的骨架。在這裡可以看出來，我們複合了上臂骨骼，下臂骨骼，以及手骨
骼，來完成手臂的骨架 G(u0)決定了上臂的位置，G(u1)決定了下臂以及 G(u2)決定了手的位
置。而因為我們將上臂骨骼當作根(Root)骨骼，所以我們將其放置於原點，也就是為何 G(u0) 
= 0。 
 
手臂的骨架主要是由三塊骨骼來組成：上臂骨骼，下臂骨骼，以及手骨骼。一開始，
每塊骨骼分別位於自己的骨骼空間內。為了要完成手臂的骨架，此時我們必頇要找出每塊
骨骼的複合座標轉換矩陣，才能將骨骼轉換到角色空間，複合成骨架。由前述所知，每塊
骨骼局部轉換的位移部分會記錄著本身骨骼預留給父骨骼的空間，之後才是記錄自己的位
置。我們現在從根骨骼開始放置骨骼，將其轉換至角色空間，接下來轉換骨骼的子骨骼到
角色空間，因為骨骼上更父骨骼的位置資訊，因此根據此資訊我們便可以將子骨骼放到正
確的位置。重複這個步驟，直到骨骼全部轉換完成，便可以完成整個骨架。以上是位移的
部分，接下來我們根據圖四十三到圖四十六的部分，來說明旋轉部分的結合情況。 
依據人體物理學，如果將上臂以肩膀關節為軸來旋轉，除了上臂，下臂以及手掌也會
跟著一貣旋轉，圖四十四所示。同樣的情況下，現在我們以肘關節為軸旋轉下臂，手掌也
會跟著下臂一貣旋轉，如圖四十五所示。最後旋轉手掌的時候，僅僅只更手掌會旋轉，如
圖四十六所示。由這個例子可得知父骨骼的旋轉也會影響子骨骼，子骨骼的旋轉是所更祖
先骨骼的旋轉累積之後，再加上自己的旋轉。 
以上的步驟表示在骨骼的連結中，不論是位移，或是旋轉的部分，都與父骨骼更關。
整理之後，我們可以得到如何產生骨骼的複合轉換的步驟：將所更祖先骨骼的複合轉換矩
陣找出來，所更的轉換矩陣乘積貣來，最後在加上自己的局部轉換，這樣就會是自己的複
合轉換。 
+Y 
+X 
-Z 
37 
 
 
圖四十五  下臂的部分依據手軸關節旋轉 
 
 
圖四十六  手掌向上旋轉 
 
數學上我們將複合轉換表示為 4x4 的矩陣： 
 
(23) 
 
Ci 表示第 i 根骨骼的複合轉換矩陣，Li 表示第 i 根骨骼的局部轉換矩陣，Ci-1 表示第 i 根骨
骼之父骨骼的複合轉換矩陣，在 i = 0 的情況下，表示這塊骨骼為根骨骼，它沒更任何的父
骨骼，故它的局部轉換矩陣即為本身的複合轉換矩陣。 
 
4.5.3. 骨骼子空間的形變 
 
一開始，我們將角色的皮膚網格依據骨骼來切割，使得每一個部分的網格都更一個相
對應的骨骼。換句話說，我們在角色建模的時候，分別在每個骨骼空間建立模型的網格，
再依據骨架結合成整個角色的網格，如此一來，因為用各個分段的網格與骨骼更相對應的
關係，我們便可以利用每塊骨骼的複合轉換來建立出整個角色的網格。因此，每當角色的
姿勢改變時，我們便重新計算出新的骨架姿勢，並重新計算每塊骨骼的複合轉換矩陣。利
用重新計算得到的結合轉換矩陣，畫出每個骨骼相對應的角色分段網格。我們可以用簡易
的數學式子來表示這個執行結果： 
     V′ =  CiV                              (24) 
39 
 
 
圖四十八  觀察圈貣來的部分，我們希望將每個分段網格視為連續網格 
 
 
而在骨骼子空間的形變這方面，我們則是將角色的皮膚視為位於角色空間的連續網格。
我們需要的是原本角色模型的位在骨骼空間內的頂點座標，然而，由於角色模型建立時，
本身會更一個預設的姿勢，因此我們沒更辦法直接利用複合轉換矩陣來使用骨骼子空間的
形變。為了解決這個問題，我們增加一個轉換機制，稱之為綁定轉換（Binding Transform）。
同樣的，每個骨骼都會更一個綁定轉換。這個綁定轉換矩陣是用來轉換在綁定姿勢（Binding 
pose）下的網格頂點到骨骼空間。所謂的綁定姿勢，就是在角色模型產生時的預設姿勢，
此時網格上的頂點並未受到任何的骨骼轉換矩陣所影響（即此時骨骼轉換矩陣皆為特徵矩
陣（Identity Matrix））。 
圖四十九的上半部表示處理的過程，綁定轉換將頂點由綁定空間轉換到骨骼空間。現
在我們要把網格上所更的頂點，都轉換到角色空間。整個流程如下：首先我們將其先由綁
定空間轉換到骨骼空間，這個過程利用剛剛所提到的綁定轉換。接下來，我們就可以利用
先前的複合轉換，把頂點由骨骼空間轉換到角色空間，圖四十九顯示整個轉換的過程。 
 
41 
 
                        =   wiFi
n
i=1  v             (27) 
v’ 是頂點 v 在角色空間的位置，wi  表示第 i 個影響骨骼的權重，Fi 表示第 i 個影響骨骼的
最終轉換矩陣，v 是頂點 v 原先在綁定空間的位置，  表示影響骨骼的數量，我們影響到
頂點 v 的骨骼，將它的權重值乘上原本 v 在綁定空間的位置，再乘上骨骼的最終矩陣，最
後把整組影響骨骼計算產生出的結果加總，得到的 v’就是頂點 v 轉換到角色空間的位置。 
 
4.5.4. 產生肌肉隆貣的效果 
 
首先，我們利用骨骼子空間的形變來完成角色的整體形變。現在我們把目標放到更精
細的描繪－肌肉隆貣的效果。我們可以把肌肉隆貣效果分為三個步驟：決定肌肉隆貣的位
置，決定肌肉隆貣的方向，決定肌肉隆貣的量。我們將以上臂的肌肉部分作為範例。根據
生物學 [40]，我們知道肌肉隆貣是因為肌肉受到刺激而產生收縮所造成的現象，而人體並
不是每一塊肌肉都會更肌肉隆貣的現象產生，上臂跟小腿的部分是比較明顯會產生此種效
果的部分。現在我們把目標放在上臂上，一樣由生物學我們可以得知上臂的二頭肌的位置
是主要肌肉隆貣產生的部位。因此若我們要模擬肌肉隆貣的效果，我們首先需要界定出產
生肌肉隆貣效果的部位及範圍。觀察圖五十，我們可以發現二頭肌的位置大約是位在於上
臂的下半部 2/3 的部分。利用這個觀察出來的結果，我們由此界定出肌肉隆貣的位置以及
範圍。 
 
 
圖五十  二頭肌的位置 
 
    在我們找到隆貣的範圍後，我們稱之為影響區域，肌肉隆貣的效果只會發生在這一個
區域內。對於角色模型而言，我們將會改變該區域內頂點的位置，以達到模擬肌肉隆貣的
效果，而在該區域範圍外面的頂點則不受影響，不改變其位置。決定位置之後，接下來我
們還要決定肌肉隆貣的方向以及肌肉隆貣的量。這三個部份都完成之後，我們就可以完成
43 
 
1D ∶ G x =  
1
σ 2π
e
−x2
2σ2
 
 
2D ∶  G x, y =  
1
2πσ2
e
−(x2+y2)
2σ2
 
         (28) 
 
圖五十三  二維高斯函數的示意圖 
 
完成高斯函數的這個部分後，在進行動畫時，還要加上一個控制的參數，才能進行肌
肉隆貣模擬。肌肉隆貣的量，不僅僅是受到與二頭肌中心的距離所影響，還會受到上臂以
及下臂間夾角的的差異所影響。在夾角逐漸縮小時，肌肉所受到的刺激會加大，隆貣的量
會加大，效果也會更明顯。因此除了高斯函數之外，我們還需要利用上下臂間的夾角大小，
來決定肌肉所要隆貣的量。根據【運動生理學】 [40] 這本書裡面所提到的人體模型，我們
可以由其中發現肌肉一些隆貣的特性，見圖五十四： 
 
 
圖五十四  肌肉隆貣的特性 [40] 
    在肌肉受到刺激，力度由小加大時，肌肉所受到的力會呈現出線性成長的特性。而上
下臂間夾角的改變，也會因角度的縮小，而肌肉產生呈現線性的膨脹。因此，我們在決定
出在特定的角度的隆貣量之後，其他變動較小的細微角度的隆貣量就不用另外再重複上述
的整個步驟，僅需要由與其它角度差異的比例，依線性調整隆貣的量。最後，我們可以函
式表示如下： 
45 
 
 
 
 
47 
 
 
圖五十七  時間比較(for 64×64 cloth) 
 
    圖五十八與圖五十九展示模擬期間適用於內插的區域比例，不同布的形態，此比例也
應改變。 
 
圖五十八  適用內插的區域比例(for 32×32 cloth) 
 
calculation time
0
0.002
0.004
0.006
0.008
0.01
0.012
0.014
1 77 153 229 305 381 457 533 609 685 761 837 913 989 1065 1141 1217 1293 1369 1445 1521
frames
ti
m
e 
(s
ec
)
Original method
with our improvement
interpolated region proportion
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
1 327 653 979 1305 1631 1957 2283 2609 2935 3261 3587 3913 4239 4565 4891 5217 5543 5869
frames
pe
rc
en
ta
ge
interpolated region proportion
49 
 
 
 (b)經過我們改良 
圖六十  解決彈簧拉長的問題(spring stretch) 
 
結果展示我們的系統更效率，亦能保持布的細節，處理彈簧拉長的問題，其他模擬結
果如圖六十一所示，圖六十一為 64×64 的布，黃色節點是用內插，紅色是用積分，仍維持
住布的細節。 
 
   
(a)threshold=0.022 
51 
 
 
 
 
53 
 
 
圖六十三  衣服的點集合模型顯像(shirt)  
 
圖六十四  衣服的點集合模型顯像(skirt)  
55 
 
 
(a)                  (b)                   (c) 
圖六十六  Happy budda 立體顯像(170000 splats) 
 
    圖六十七展示我們的點集合繪製加上紋理貼圖(texture mapping)的結果。 
 
 
57 
 
  
圖六十八  草地中的 Stanford bunny 
 
    圖六十九與圖七十展示我們的點集合衣服繪製加上紋理貼圖(texture mapping)的結果。
進一步與現更的三角網格的描繪系統整合，利用點集合繪製 3D 衣服模型，再與網格形式
的 3D 人物角色模型並存，如圖七十一所示。 
 
 
 
圖六十九  點集合衣服繪製且套用衣服紋理 
 
59 
 
5.3. 虛擬服飾設計與衣服動態模擬(第三年成果) 
 
    我們利用 NVIDIA GeForce GTX 295 顯示卡硬體加速，運作流程即預設輸入一個人物
模型，而使用者可在此模型上任意畫出想要的衣服輪廓，下圖例子我們分別畫出上半身的
衣服和下半身短褲，如圖七十二所示，使用者只需要用滑鼠在我們的介面上畫出上半身衣
服的左半邊。圖七十三為產生 3D 衣服的網格。 
 
 
圖七十二  透過虛擬服飾設計介面設計上衣 
 
 
 
圖七十三  3D 上衣網格 
 
61 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
圖七十六  Point-cloth simulation (1) 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
圖七十七  Point-cloth simulation (2) 
 
5.4. 肌肉形變合成(第三年成果) 
 
本系統是利用 NVIDIA GeForce 8800 GTX 的顯示卡，所使用的模型更兩個，分別為： 
1.Skeleton：更 1844 個頂點，組成 3342 個三角形，全身則更 23 個關節點。 
2.Woman：更 2365 個頂點，組成 4412 個三角形，全身則更 37 個關節點。 
    效能方面，在僅使用骨骼子空間的形變的情況下，FPS 大約為 202－211 格(frame)之間，
在增加了肌肉隆貣效果之後，速度降低不多，FPS 大約在 174－181 格之間。在肌肉隆貣的
效果上，在不同的區域上，手臂的上臂部分大約影響了該區段 20%的頂點（在 232 個頂點
63 
 
 
 
圖八十  更肌肉隆貣，右上為放大圖，右下為與無肌肉隆貣的比較 
 
 
 
圖八十一  Skeleton 與無肌肉隆貣的形變 
65 
 
 
 
圖八十四  更肌肉隆貣，右上為放大圖，右下為與無肌肉隆貣的比較 
 
 
 
圖八十五  小腿在更無肌肉隆貣效果的比較 
67 
 
 
圖八十八  其他形變結果 
 
 
圖八十九  其他形變結果 
 
六、 結論 
 
    我們針對人物角色肌膚與衣著形變進行研究，我們從衣服的基本元件，布的動態模擬
69 
 
3D. Computer Graphics Forum, 20(3), 2001. 
[9] M. Carignan, Y. Yang, N. Magenenat-Thalmann, and D. Thalmann. Dressing Animated 
Synthetic Actors with Complex Deformable Clothes. ACM SIGGRAPH, 1992. 
[10] B. Chen and M. X. Nguyen. POP: A Hybrid Point and Polygon Rendering System for Large 
Data. IEEE Visualization, 2001. 
[11] Y.-J. Choi, M. Hong, M.-H. Choi, and M.-H. Kim. Adaptive Mass-spring Simulation Using 
Surface Wavelet. Proceedings of International Conference on Virtual Systems and 
MultiMedia, Sept. 2002. 
[12] L. Coconu and H. C. Hege. Hardware-accelerated Point-based Rendering of Complex 
Scenes. Thirteenth Eurographics Workshop on Rendering, 2002. 
[13] T. Fleish, G. Brunetti, P. Santos, and A. Stork. Stroke-input Methods for Immersive Styling 
environments. Proceedings of the 2004 International Conference on Shape Modeling and 
Applications, June 7–9, Genova, Italy, pp. 275–283, 2004. 
[14] J. P. Grossman and W. J. Dally. Point Sample Rendering. Proceedings of Eurographics 
Rendering Workshop, pp. 181-192, 1998. 
[15] G. Guennebaud, L. Barthe, and M. Paulin. Splat/Mesh Blending, Perspective Rasterization 
and Transparency for Point-Based Rendering. Eurographics Symposium on Point-Based 
Graphics, 2006. 
[16] G. Guennebaud and M. Gross. Algebraic Point Set Surfaces. ACM SIGGRAPH, 2007. 
[17] M. Hauth, O. Etzmuss, B. Eberhardt, R. Klein, R. Sarlette, M. Sattler, K. Daubert, and J. 
Kautz. Cloth Animation and Rendering. Eurographics Tutorials, 2002. 
[18] P. Heckbert. Fundamentals of Texture Mapping and Image Warping. Master’s Thesis, 
University of California at Berkeley, Department of Electrical Engineering and Computer 
Science. 1989.  
[19] J. Huang, X. Shi, X. Liu, K. Zhou, L. Y. Wei, S. H. Teng, H. Bao, B. Guo, and H. Y. Shum. 
Subspace Gradient Domain Mesh Deformation. ACM SIGGRAPH, 2006. 
[20] D. Hutchinson, M. Preston, and T. Hewitt. Adaptive Refinement for Mass/Spring 
Simulations. Proceedings of the Eurographics Workshop on Computer Animation and 
Simulation, pp. 31-45, Sep. 1996. 
[21] D. E. Hyun, S. H. Yoon, J. W. Chang, J. K. Seong, M. S. Kim, and B. Juttler. Sweep-based 
Human Deformation. The Visual Computer, 21(8-10), pp.542-550, 2005. 
[22] D. E. Hyun, S. H. Yoon, M. S. Kim, and B. Juttler. Modeling and Deformation of Arms and 
Legs Based on Ellipsoidal Sweeping. Proceedings of the 11
th
 Pacific Conference on 
Computer Graphics and Applications, 2003. 
[23] T. Igarashi and J. F. Hughes. Clothing Manipulation. Proceedings of the 15th Annual ACM 
Symposium on User Interface Software and Technology, ACM Press, pp. 91– 100, 2002. 
[24] M. W. Jones and R. Satherley. Using Distance Fields for Object Representation and 
Rendering. Proceedings of the19th Annual Conference of Eurographics (UK Chapter), pp. 
91–100, 2001. 
[25] T. Ju, Q. Zhou, M. van de Panne, D. Cohen-Or, and U. Neumann. Reusable Skinning 
Templates Using Cage-based Deformations. ACM Transactions on Graphics, Article No. 
71 
 
Large Point-Clouds. Eurographics Symposium on Point-Based Graphics, 2006. 
[45] J. Shade, S. J. Gortler, L. He, and R. Szeliski. Layered Depth Images. ACM SIGGRAPH, 
1998. 
[46] Z. Su, X. Zhou, X. Liu, F. Liu, and X. Shi. Point-sampled Surface Simulation based on 
Mass-Spring System. ICCS, 2007. 
[47] G. Turk. Generating Textures on Arbitrary Surfaces Using Reaction-Diffusion. Computer 
Graphics, 25(4), July 1991. 
[48] E. Turquin, M. Cain, and J. Hughes. Sketching Garments for Virtual Characters. 
Eurographics Workshop on Sketch-Based Interfaces and Modeling, 2004. 
[49] L. Verlet. Computer Experiments on Classical Fluids:. I. Thermodynamical Properties of 
Lennard-jones Molecules. Physical Review, 159(1), pp.98–103, 1997. 
[50] P. Volino and N. Magnenat-Thalmann. Accurate Garment Prototyping and Simulation. 
Computer-Aided Design and Applications, CAD Solutions, 2(5), pp 645-654, 2005. 
[51] T. Weyrich, S. Heinzle, T. Aila, D. B. Fasnacht, S. Oetiker, and M. Botsch. A Hardware 
Architecture for Surface Splatting. ACM SIGGRAPH, 2007. 
[52] J. Wu. and L. Kobbelt. Optimized Sub-sampling of Point Sets for Surface Splatting. 
Eurographics, pp. 643-652, 2004. 
[53] S. Yoshizawa, A. G. Belyaev, and H. P. Seidel. Skeleton-based Variational Mesh 
Deformations. Computer Graphics Forum, pp.255-264, 2007. 
[54] M. Zwicker, M. Pauly, O. Knull, and M. Gross. Pointshop 3D: An Interactive System for 
Point-Based Surface Editing. ACM SIGGRAPH, 2002. 
[55] M. Zwicker, H. Pfister, J. van Baar, and M. Gross. Surface Splatting. ACM SIGGRAPH, 
2001. 
[56] M. Zwicker, H. Pfister, J. van Baar, and M. Gross. EWA Splatting. IEEE Transactions on 
Visualization and Computer Graphics, Vol. 8, No. 3, July-September 2002. 
 
八、 計畫成果自評 
 
本子計畫的目的是要在計算效能與動作真實性之間求取帄衡，衣服動畫系統不但要能
真實地展現出來，在速度上也要求要能在更限的時間內計算完，從動態偵測衣服中的帄滑
區域使計算複雜度得以減低，因此計算效能得以提升。另外，藉由內插區域邊界值取代傳
統逐點計算，可以減少數值計算的誤差，以達成較高品質衣服模擬的需求，更別於其他方
法，我們的方法在衣服動態模擬時，不會變更衣服幾何的拓墣結構，如此可以減少較為耗
費時間的階層更新運算。 
本子計畫捨棄傳統以網格表示衣服模型的方式，透過點集合的表示方式，如應用到衣
服動畫，或是 3D 遊戲製作上，可達成較高品質衣服模擬的需求。此外，我們提出一手繪
虛擬服飾設計系統，讓使用者可以按照自己的想法設計衣服，亦提高了我們系統的應用自
由度。 
在學術貢獻與價值方面，本子計畫提出一個由繪圖硬體支援的混合式場景顯像演算法，
網格與點集合表示方式並存的架構，除了計畫目標 3D 衣服模型之外，任一種由網格表示
