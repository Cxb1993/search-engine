 I 
摘要: 
本計畫提出一個嵌入式系統模擬與設計流程，並利用現場可程式化邏輯閘陣列，實現
於水下嵌入式系統。 
近年來，由於一般用途微處理器時脈已高達每秒 34 億，而各主要處理器供應商亦開始
推出多重核心微處理器，並對於各項特殊應用易有特殊之微處理器。單一通用型微處理器
已無法同時符合各項應用需求，若針對個別應用設計不同之微處理器，對於成本與設計困
難度亦無法兼顧。故本計畫提出一個簡易之模擬與設計方法，已符合特殊功能上的需求。 
嵌入式系統需具有許多應用上之特殊性，與一般通用型系統有所不同。為了具備設計
上彈性與功能需求上之特殊性，用於水下相移陣列系統中，故使用現場可程式化邏輯閘陣
列，以達到上述之目標 
 
關鍵字: 
可程式化邏輯閘陣列、嵌入式系統 
 
Abstract: 
In this project, we purpose a simple design methodology in simulation and design a specific 
embedded processing system which applied to underwater ultrasonic image system. 
Recent years, the commercial microprocessor clock rate is up to 3.4GHz (Giga-Hertz), 
Quad-Core, FSB (Front Side Bus) 1333MHz. Although in such high speed processor and transfer 
rate, the bottleneck of specialize system will not be solved. The specialize system still needed in 
each kinds of applications. We purpose an evaluation and design methodology apply to specific 
requirement in each system without changing whole system architecture. 
In the design methodology, we purpose a reconfigurable coprocessor with any processor 
base system. In such system, implement the coprocessor to balance the entire system loading. 
With hardware embedded system design methodology, we used a large scale FPGA (Field 
Programmable Gate Arrays) development platform to implementation our system. In system level, 
we implement system IO in MicroBlaze soft processor. In the specialize application, we design 
the coprocessor with underwater ultrasonic image algorithm. In the basic unit computing 
component level, we used asynchronous circuit protocol to communicate with other function 
block. 
 
Keywords： 
Applying Field Programmable Gate Array、Embedded Systems 
 2 
Image Processing Algorithm: 
In the single sensor element system, the signal data is only the strength of the signal. If there 
is one static sensor, we can only determine the distance by the signal strength. But in our design, 
the transmitter and the receiver is not only one sensor, the transmitter sensor in x-axis is 19 sensor 
elements, and the receiver sensor in y-axis is 19 sensor elements either, as shown in Fig.3-3.1. 
 
 
 
 
 
 
 
In start time zero, the transmitters generate a pulse signal in angle φ1.The pulse travels to 
the target surface, and the surface reflect the pulse. At the start time, the receiver sensor receives 
from the reflecting signal without knowing the receiving angle. After the angleφ 1 was 
transmitted complete, the next angleφ2 will be generated. 
 
 
 
 
 
 
 
For each of the transmitting angle, the receiving sensors in Y-axis receive the reflecting 
signal in different time slot, successively. In different receiving sensor, the received signal will 
also be different. 
 
 
 
 
 
 
 
 
 
The Prog.3-3.1 is the image algorithm used in this system. The pseudo code program presents the 
algorithm of the nineteen receiving sensor in T-type sensor array step by step. 
Fig.3-3.3 Distance and angles with receiver sensors 
Fig.3-3.2 Transmitter to the target 
Fig.3-3.1 T-type sensor element 
 4 
System Implementation: 
In this chapter, we describe the architecture and design of this embedded system. According 
to the image algorithm, we first evaluate the time and the memory space requirement in our 
application. At the second stage, we develop hardware and soft ware platform of the system. Last, 
after the signal receiving, is the system in processing received signal and generate image. 
Simulation: 
After received the signal, the next step is to compute the time and the distance. The image 
algorithm was implemented in C programming language to estimate the cost in time and memory 
consumption. And testing image was generated a bitmap to see the correctness of the image file. 
In order to prevent difficulty in debugging, we separate the program to fourth parts. There is 
many kind of programming environments, each of them must be ANSI C compatible. This 
simulation code implemented in C will be more portable, flexible. 
Before implementation, we must analysis the image algorithm in data processing flow and 
control flow. 
z Data processing flow: 
The received signal data in this design is pre-store in the hard drive. When 
the computation starts, these signal data will be fetched to the system memory. 
Loading time is dependent on the fetch method, storage architecture, data transfer 
interface and the buffer size, as shown in Fig.4-1.1. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Fig.4-1.1 Data flow diagram 
 6 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Last sub-function block is the operation of generating image. To reduce the 
memory size and computation, output image format is the bitmap image file 
format. In order to represent the strength of the signal, the image is painted in 
8-bits gray color. 
 
Fig.4-1.4 Computing signal (detail)
 8 
Hardware and Software Platform: 
 In recent years, because the progresses of semiconductor processing technology, the single 
silicon device is include more transistors. Intel’s first generation processors in the early 1970’s 
consisted of just one or two thousand transistors. That increased to tens of thousands in the late 
seventies as Intel pushed its 8086 processor. Progress continued through the hundreds of 
thousands of transistors with the 80286 and 80386 families, and finally reached the million 
transistor mark with the 486DX and its integrated FPU. The nineties was the decade of the 
Pentium processor, from its 3-million transistor introduction in 1993 to the 25-million transistors 
Pentium III in the late nineties. Finally, the current Pentium 4 processors boast a modest 
55-million transistor count. 
Xilinx Virtex Series FPGA 
 With the design, we must choose large scale logic gate array to satisfy the system 
requirement. The latest release device is Virtex 5 series, but in development environment does not 
full support, we must choose the previous version. And the device Virtex 4 SX35 was chose. 
 SX series family is High-performance solution for Digital Signal Processing (DSP) 
applications. The specification of SX35 is in Table 4.1. 
 
 
 
 
 
 
 
 
 
 
 
 
The block diagram of development board is in Fig.4-2.1. Virtex 4 SX35 is the SRAM based 
FPGA device, when the power is off, the configuration information will lost. So the configuration 
device is need. In latest device, there are many kinds of method and device to configure, in 
configuration method such as SPI, JTAG, SelectMAP, Master Serial and Slave Serial, in device 
such as ROM, Linear FLASH, Serial FLASH, CompactFlash, JTAG direct configuration. (As in 
the Fig.4-2.2) 
 
 
 
 
 
 
 
 
Table 4.1 Virtex 4 SX35 spec. 
Fig.4-2.1 Virtex 4 and other system device 
 10 
File System 
In this system, the signal file is pre-saved in the Compact Flash disk drive. The file system 
must be access the flash device. We add a device into this embedded system named Xilinx 
SystemACE compact flash disk driver chip. 
 
 
 
 
 
 
 
 
 
Design with the SystemACE, we can integrated the whole configuration file into a 
CompactFlash device, but the support of the file format only the FAT16 file system be 
configurable, the FAT32 is only the function of file system (as Fig.4-2.5). 
 
 
 
 
 
 
 
 
 
Terminal and Debugging 
 To reduce the complexity of design and testing, we use the HyperTerminal to be our console 
terminal in Windows based system. Debug is an important part in system design. In large scale of 
systems also use the console terminal to be their system status monitor. With the respond message, 
we can know the step, exception or process occurs or not. 
 
 
 
 
 
 
 
 
Fig.4-2.4 SystemACE Flash device 
Fig.4-2.5 SystemACE application 
Fig.4-2.6 HyperTerminal 
 12 
 In the Table 4.1a, 4.1b we can compare the processing time difference between these 
generations. The Table 4.2a, 4.2b is the gate array resource usage of latest version. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Table 4.2a List of Generation and time consumption 
Table 4.2b Comparison diagram 
Table 4.3a FPGA resource usage 
 14 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Fig.4-3.3 is the output image. The system output image was saved in the storage device, 
because this image is a part of the image in the final image of the whole system, and output to the 
monitor is not useful to image combination. 
 
 
 
 
 
 
Fig.4-3.2a Terminal Result 
Fig.4-3.2b System Terminal Output 
Fig.4-3.3 Image output 
 16 
synchronous SRAM will speed up our system processing. 
z SOC Design: With FPGA design, using the logic cell implementing system can be 
easily converted to cell-based chip design. Beside the memory block cost much more 
die area in our system, the other function unit can be designed into a silicon die. 
 
Reference: 
[1]   Chris J. Myers “Asynchronous circuit design” Wiley & Sons, 2001 
[2]   Scott Hauck “Asynchronous Design Methodologies: An Overview” Proceedings of IEEE,  
Vol. 83, No. 1, pp. 69-93, January, 1995. 
 
 
計畫成果自評： 
1. 完成成果： 
利用現場可程式化邏輯閘陣列，實現於水下嵌入式系統，並且整合成像演算法
到本嵌入式系統，可運作無誤完成成像。將成像演算法以該嵌入是系統之特殊
處理器進行運算。 
2. 學術或應用價值： 
該計畫執行過程研究許多FPGA的設計方案，最後以合成嵌入式系統實現演算效
能，符合目前嵌入式系統應用之設計需求。 
3. 發表碩士論文： 
Chien-Chih Wang “Applying Field Programmable Gate Array Techniques to 
Underwater Embedded Systems Design” NTOU, 2007 
4. 發表國際會議論文： 
YuanLin Wen1, MuDer Jeng , LiDer Jeng and Fan, Pei-Shu “An Intelligent 
Technique Based on Petri Nets for Diagnosability Enhancement of Discrete Event 
Systems” KES International, 2006 
表 Y04 
針對專業主題所舉辦的研討會，答案常常在無意中自然得到，並且能對整個世界新的研
究趨勢有一程度的了解，有助我們掌握新的研究方向，以契合國際學界潮流。 
 
此研討會參與之華人人數太少，無法有效發揮影響力，所以，向來研討會之理事
大都由歐美或日本人擔任。而我們所推選之代表，多次都高票落榜，無法當選為理事，
參與學會之規劃或決策。因此，在餐會結束後，大家的共識是：鼓勵華人加入並參與學
會，並支持華人擔任學會之職務（例如︰學會期刊編輯或理事）。 
 
 
三、考察參觀活動 
 
無 
 
四、建議 
 
應鼓勵國內學者多參加此高素質之研討會與學會活動，尤其對在研討會或學會
擔任職務之與會者，國科會應考慮優先補助出席。如此可增加台灣研究成果在國際
之曝光率，也能夠藉機結交一些國外學者，將一些國外所得的資訊帶回台灣，相信
對本國的研究風氣及方向，有著極大的幫助。另為強化國人於國際級學會之影響
力，建議國科會應可考慮補助及鼓勵國內學者加入評等優良之國際級學會，並協助
學者組織會員分會，使會員的意見，在國際級學會的規劃和決策中更具有影響力。
 
 
五、攜回資料名稱及內容 
1. IEEE SMC 2007 論文集摘要乙冊。 
2. IEEE SMC 2007 論文集光碟乙片。 
 
 
 
 
 
 
 
 
 
detected after any finite firings of transitions from the 
occurrence. 
As mentioned before, the detection of diagnosability 
requires the computation of all cycles in the state space. 
These cycles are implied by Petri net structural objects 
called T-invariants, where a T-invariant is a vector X of 
non-negative integers denoting transition firing counts of 
the implied cycle such that CX = 0 where A is the 
incidence matrix, i.e., a matrix notation of the Petri net. 
For our problem, we only need to consider elementary 
cycles implied by so-called minimal T-invariants defined 
as follows: a T-invariant iX  is minimal if there exists no 
other T-invariant jX  such that i jX X≠ .
Therefore, the following property is useful for checking 
if a system is diagnosable:  
Property 1[5] The system modeled by a Petri net G is 
diagnosable if there do not exist two T-invariants in G
with the same observable labels. 
From Property 1, we interpret and formulate the 
diagnosability problem as a binary integer linear 
programming problem that may have a feasible solution. 
By adopting the linear programming software LINGO that 
uses the Branch and Bound method to implement our 
method, we can alleviate the above-mentioned problem. 
Property 2 (diagnosability-checking algorithm) A system 
modeled by a Petri net G is diagnosable if the following 
integer linear programming problem (BIP) has no feasible 
solution: 
1
1 1
:
min
0
, 0
0
T
ik
k
i j
i j
i j
T T
ik jk
k k
i j
BIP
Z x
Subject to CX CX
X X
X X
x x
V X V X
=
= =
=
= =
≠
>
− =
⋅ = ⋅
¦
¦ ¦
               (1) 
where C is the incidence matrix, iX and jX are any two 
T-invariants 1 2( , ,.... )Ti i i i TX x x v=  and 1 2( , ,.... )Tj j j j TX x x v= ,
where V  = 1 2( , ,.... )Tv v v is the numerical encoding of the 
observable label mapping vector from transitions to their 
corresponding labels as follows: Then we use 100, 10d,
102d, 103d, … to represent each different label, respectively. 
Note that Xi⋅V=Xj⋅V implies that two elementary cycles 
have the same observable event count, which may mean 
the same observable event trace. 
The following example illustrates the above concepts. 
Example 1 Fig. 1 shows a Petri net model G where 1fσ  is 
a faulty, unobservable event while all other events , ,α β γ
and δ  are normal and thus observable. G has three T-
invariants 1X =
T(0 0 1 1 1 0 0 0 0 0 0 0 0) ,
2X =
T(0 0 0 0 0 0 0 1 1 1 0 0 0 ) , and 
3X =
T(0 0 0 0 0 0 0 0 0 0 1 1 1) . Since each labels occurs 
less than 10 times in any T-invariant and thus d=1, 
, , ,α β γ δ  are encoded as 0 1 2 310 ,10 ,10 ,10 , respectively. 
Therefore, 0 1 2 3 0 1 2 3 1 2 3(0,10 ,10 ,10 ,10 ,10 ,0,10 ,10 ,10 ,10 ,10 ,10 ).V =
Apply Property 2 to the model, we found there has a 
solution, that 1 3 1110V X V X⋅ = ⋅ =  so that they have the 
same observable event count ( )0,1,1,1 , meaning α, β, γ, δ
occurs 0, 1, 1, 1 time, respectively. Thus, the system is 
possibly non-diagnosable. Property 2 does not tell us if the 
same event count implies the same event trace β γ δ.
Nevertheless, by simple analysis the two T-invariants 
indeed mean the same event trace. In addition, 1X  is 
reachable from the failure event 1fσ  while 3X  is not. 
Thus, the system is non-diagnosable. 
Fig. 1 A simple Petri net model. 
III PROPOSED DESIGN METHODOLOGY 
In the proposed methodology, we assume that all 
available sensors, the locations in the target system where 
these sensors can be added, and all possible readings of 
these sensors are known beforehand by domain knowledge. 
Our methodology is an iterative process of two stages: 
diagnosablity analysis and enhancement. First, all minimal 
T-invariants are obtained. In the analysis stage, Property 2 
is used to see if there exist two minimal T-invariants that 
predict two undifferentiated event cycles. If yes, then the 
enhancement stage checks if the two cycles can be 
differentiated by adding a sensor to change their original 
labels as follows: the new label is the old label appended 
by the resultant reading of the added sensor. For example, 
if the old label is <α> and the sensor reading is β, then the 
new label is <α, β>. We assume that unobservable labels 
remain unobservable no matter what sensors are added so 
we do not consider changing unobservable labels. The 
above description can be formalized using the following 
algorithm: 
1358
Fig. 4 The complete Petri net model of the pumping and control system. 
TABLE 1 TRANSITIONS AND THEIR MAPPED EVENTS
T Event  Observability T Event  Observability 
t1 OPEN_VALVE  observable t11 CLOSE_VALVE observable 
t2 START_PUMP observable  t12 STOP_PUMP observable 
t3 CLOSE_VALVE observable  t13 STUCK_CLOSE ( f1 ) unobservable 
t4 STOP_PUMP observable  t14 STUCK_CLOSE ( f1 ) unobservable 
t5 OPEN_VALVE observable  t15 STUCK_CLOSE ( f1 ) unobservable 
t6 START_PUMP observable  t16 STUCK_CLOSE( f1 ) unobservable 
t7 CLOSE_VALVE observable  t17 STUCK_OPEN ( f2 ) unobservable 
t8 STOP_PUMP observable  t18 STUCK_OPEN ( f2 ) unobservable 
t9 OPEN_VALVE observable  t19 STUCK_OPEN ( f2 ) unobservable 
t10 START_PUMP observable  t20 STUCK_OPEN ( f2 ) unobservable 
TABLE 2. AVAILABLE SENSORS AND THEIR LOCATIONS IN THE TARGET SYSTEM.
No  Failures Available Sensors Location 
1 STUCK_CLOSE( f1 ),STUCK_OPEN( f2 ) Pressure ( Sp ) reactor chamber 
2 STUCK_CLOSE( f1 ),STUCK_OPEN( f2 ) Flow ( Sf )
Output of the 
chemical pump 
3 STUCK_CLOSE( f1 ),STUCK_OPEN( f2 ) Temperature ( St ) reactor chamber 
4 STUCK_CLOSE( f1 ),STUCK_OPEN( f2 ) Concentrations ( Sc ) reactor chamber 
1360
