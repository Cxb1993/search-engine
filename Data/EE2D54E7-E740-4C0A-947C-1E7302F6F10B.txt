1 
 
行政院國家科學委員會專題研究計畫成果報告 
多核心共用平台上之系統軟體研發 
 
計畫編號：NSC 96-2218-E-007-013 
 
執行期限：96年 8月 1日至 97年 7月 31日 
計畫主持人： 李政崑教授   國立清華大學資訊工程學系(所) 
石維寬教授   國立清華大學資訊工程學系(所) 
黃元欣教授   國立海洋大學資訊工程學系(所) 
黃冠寰副教授  國立臺灣師範大學資訊工程學系(所) 
 
 
一、中文摘要 
 
 
在本研究計畫中，我們針對市場上
日漸普及的嵌入式多核心平台進行研究
與發展。在嵌入式多核心平台上，軟體
的開發一直是很大的挑戰。程式碼的撰
寫、偵錯，並行程式的測試，及時系統
的排程與效能分析以及高階語言的效能
最佳化都是軟體開發者必須面臨的難
題。在本計畫中將為這些問題提供解決
方案。 
 
首先，本計畫以 Eclipse為基礎，建
立嵌入式多核心平台上之整合開發環
境。並且提出多核心偵錯器的架構，使
用者可自由於模擬器或是實驗平台上進
行除錯。接著，提出一個適用於並行程
式的測試環境，用以驗證多核心軟體的
穩定性，避免非決定性行為所造成的錯
誤。此外，亦提供一個即時系統排程分
析工具，可在執行期之前對使用者提出
即時排程的建議。最後，本計畫提供具
機率的指標分析工具，可以有效的提升
指標分析的準確度及速度。 
 
經由本計畫提供的開發工具、驗證
工具以及分析工具，未來將可以降低培
育多核心處理器架構設計及相關軟體人
才的門檻，並且增進國內系統設計產業
的國際競爭力。 
 
 
關鍵詞：嵌入式系統、多核心平台、
整合開發工具、偵錯器、並行程式測
試、即時系統排程分析、具機率的指
標分析 
 
Abstract 
 
 
In the research project, our research and 
development are aimed at the embedded 
multi-core system. There is always a 
challenge in developing software on the 
embedded multi-core system. A software 
developer must face the problem on 
writing code, debugging, concurrency 
testing, real-time system scheduling and 
testing, and high-level language 
optimization. We provide solutions for 
these problems in this project. 
 
First, we establish an integrated 
development environment for embedded 
multi-core platform base on the Eclipse 
project. We propose architecture for 
multi-core debugger, which can allow 
3 
 
具。而經由這些工具的整合，相信能夠
在開發多核心系統軟體時提供相當大的
幫助，進而達到降低多核心系統開發的
成本、縮短開發時程並且增加系統可靠
度的目的，對於台灣多核心嵌入式平台
產業的發展必能夠有相當的助益。 
 
 
三、結果與討論 
   
 
在本年度中各項子計畫主要完成的具
體成果分述如下: 
 
1. 多核心系統平行語言開發工具
(MLDT) 
 
    有鑑於國外許多嵌入式多核心平台的
開發工具組皆為自行撰寫的系統，對於國
內廠商來說，開發的難度較高，投入的成
本也較多。本計畫選用開放的 Eclipse平台
搭配 CDT plug-in 來建構多核心平台的開
發及偵錯環境，可以降低使用開發所需的
費用，並且提供軟體開發所需的完整功
能。然而，Eclipse 社群所提供的平台與
plug-in 並非針對嵌入式系統所設計，因此
本計畫將對此 plug-in進行擴展，使其適用
於嵌入式多核心的開發平台。包括整合多
核心平台的 toolchain、連接多核心實驗平
台與模擬器以及整合多核心偵錯器使用者
介面，其架構如圖一所示。 
 
 
圖一 
 
    而根據多核心嵌入式系統的特點，所
擴展之 plug-in 功能整理如圖二。其中紫色
區塊為本計畫預備開放為自由軟體的項
目，該部分的功能將可對應不同平台的
toolchain進行開發及偵錯。 
 
 
圖二 
 
    此外，為配合在多核心系統平台進行
偵錯，勢必需要發展功能更為強大的偵錯
器來因應多核心的需求。我們所發展的多
核心偵錯器源自於 GNU Debugger, GDB，
擁有強大的社群資源及絕佳的相容性，可
以適應各種偵錯的需要。為配合多核心平
台的特殊需求，我們使用一層 pipe_intrnl
的中介軟體，提供對多核心偵錯的彈性，
其架構如圖三，其中Debugger與 pipe_intrnl
為開放為自由軟體的部分。 
 
 
圖三 
 
2. 嵌入式多核心系統並行程式測試
(EMCT) 
 
多核心並行架構中，不同核心間的執
行緒常藉由共享資源及同步行為來提高對
硬體的使用效率；然而這樣的並行架構所
帶來的非決定性行為卻常影響執行結果的
正確性，甚至導致程式無法正常終止，形
成無窮迴圈的狀況。有鑑於此，本計畫著
眼於測試非決定性行為可能的錯誤，並處
理程式中包含忙碌等待迴圈的情形下，多
5 
 
優先權佇列（queue）的哪個位置。所有的
任務共同競爭使用所有的處理器，因此優
先權高的任務可以占用低優先權任務的處
理器，換句話說，各任務在處理器上的移
動是被允許的；相對於整體方法中允許各
任務在處理器上的移動，分割方法則是靜
態地將每個任務指派到固定的處理器上，
因此各任務在處理器上的移動是不被允許
的。雖然使用分割方法可以避免不必要的
任務移動負擔，可是在多個處理器上，找
尋一個最佳化的任務分割方法，是一個大
家 熟 知 NP-hard 問 題 的 Bin-Packing 
problem。然而整體方法及分割方法兩者是
不可直接做比較，因為存在一些任務是可
用整體方法成功地在 m個處理器上執行完
成，但卻不能使用分割方法完成執行。 
 
在 2006 年，由 THEODORE P. BAKER
提出，在使用整體方法將具有固定優先權
的任務分配至多個處理器上的環境下，定
義一組任務 τi 在一個時間區間△中，所有
任務所做工作的總和 work Wi及其 load Wi 
/△，若能找到在一個時間間隔中導致第一
個錯失結束時間的處理器下界，就可保證
只要在此時間區間中，所給的任務集合不
要產生那麼多的 load，即可保證其可排程
性。本篇對於週期性任務的工作量下界敘
述為：假若(t+△)是任務 τk 的第一個錯失
結束時間則，τk 最大的忙碌區間[t,t+△)有
大於 m*(1-µk)的 level(k-1)workload；相對
的週期性任務的工作量上界敘述為：假若
(t+△)是任務 τk 的第一個錯失結束時間
則，且 0<µ< m*(1-µk)，而[t,t+△)是對應於
(µ,k-1)忙碌區間時，則每個任務 τk 所貢獻
的 workload L(τk)會被限制在表格一中的
函數 βµ,k(i) 上。 
 
Case βµ,k(i) 
i
i
p
c
m
m ≥
−
−
1
µ
 













 −
+
k
ii
i
i
p
cp
p
c 11,min
 
i
i
p
c
m
m
<
−
−
1
µ
 












−
−
−+




 −
+
1
1,1min
m
m
p
c
p
p
p
cp
p
c
i
i
k
i
k
ii
i
i µ
 
表格一 
 
4. 具有機率之指標分析(PPA) 
 
在 C語言中，scalar variables的使用情
況可以很輕易的藉著編譯器（Compiler）的
分析，知道之間的相依關係；但是很不幸
的，常被大量使用的指標（Pointers），卻不
能夠很容易的被分析相互之間的關係。其
中有一個問題是，當利用 C語言的 pointers
時，pointer可能是指到一個從 C的原始碼
看不出來的位置，例如：當 pointer指到由
另外指令創出來的一塊記憶體區塊，而此
記憶體區塊是被放在所謂的 heap中，從編
譯器的角度，要分析這樣的資訊已經不像
scale variables 那麼容易了，因為他在程式
中並不具有一個獨一無二的名稱。另外
pointer 也有可能會隨著程式的執行不斷的
改變存取的位置，所以我們在靜態時間
（ static time）並不能很精確的指出該
pointer會指到哪一個位置？ 
 
延 續之前團 隊已經發表的論 文
[23][24]，改採使用開放原始碼的 Open 
Research Compiler(ORC)並且使用 Single 
Static Assignment(SSA)Form來改進分析的
效能與準確度。利用圖六的分析流程產出
結果。 
 
 
 
首先經過 ORC的前端(Front-End)產生
Control Flow Graph(CFG)如圖七左及 SSA 
Form，利用 CFG 及 SSA 合成 Pointers 
Relation Graph(PRG)如圖七右，由於 PRG
的資訊過於複雜，所以透過一個發展出來
的 Algorithm 將 PRG的資訊簡化，產生指
Source 
program ORC
SSA form
CFG Execution
 
frequency Pointers relation 
graph
Reduce PRG 
algorithmReduced 
PRG
back 
trace 
analys
is
 
圖六 
7 
 
Parallel and Distributed Computing 
Handbook, editor A. Y. Zomaya, 
McGraw-Hill, 1996. 
[7]  Debugging Ada Tasking Programs, D. 
Helmbold and D. Luckham, IEEE 
Software, Volume 2, Number 2, pages 
66-74, 1985. 
[8]  Testing of Concurrent Software, K.-C. 
Tai, Proceeding of the 13th Annual 
International Computer Software and 
Applications Conference, pages 62-64, 
1989. 
[9]  A Survey of Synchronization Methods 
for Parallel Computers, A. Dinning, 
IEEE Computer, July 1989. 
[10]  Operating System Concepts, 6th 
Edition,” A. Silberschatz, P. B. Galvin, 
and G. Gagne, John Wiley & Sons, 
ISBN: 0471417432, June 2001. 
[11]  A Systematic Parallel Testing Method 
for Concurrent Programs, G.-H. Hwang, 
Master Thesis, Institute of Computer 
Science and Information Engineering, 
National Chiao-Tung University, 
Taiwan, 1993. 
[12]  Reachability Testing: An Approach to 
Testing Concurrent Software, G.-H. 
Hwang, K.-C. Tai, and T.-L. Huang, 
International Journal of Software 
Engineering and Knowledge 
Engineering, Volume 5, Number 4, 
December 1995. 
[13]  Technology for Testing 
Nondeterministic Client/Server 
Database Applications, G.-H. Hwang, 
S.-J. Chang, and H.-D. Chu, IEEE 
Transaction on Software Engineering, 
Volume 30, Number 1, pages 59-77, 
January 2004. 
[14]  Generalized Rate Monotonic 
Schedulability Bounds Using Relative 
Period Ratios, Hsin-Wen Wei, 
Kwei-Jay Lin, Wan-Chen Lu, and 
Wei-Kuan Shih, accepted by 
Information Processing Letters, 2008. 
(SCIE, EI) 
[15]  Rate monotonic schedulability tests 
using period-dependent conditions, 
Wan-Chen Lu, Kwei-Jay Lin, 
Hsin-Wen Wei, and Wei-Kuan Shih, 
accepted by Real-Time System, 
Springer, online since September 05, 
2007 (SCIE, EI) 
[16]  Current Results on EDZL Scheduling 
for Multiprocessor Real-Time Systems, 
Wei Hsin-Wen; Chao, Yi-Hsiung; Lin, 
Shun-Shii; Lin, Kwei-Jay; Shih, 
Wei-Kuan, 13th IEEE International 
Conference on Embedded and 
Real-Time Computing Systems and 
Application (RTCSA), 21-24 Aug. 
2007 Page(s): 120-130 (EI) 
[17]  Scheduling algorithms for 
multiprogramming in a hard real-time 
environment, C. L. Liu and J. W. 
Layland, Journal of the ACM, 20(1) , 
pp. 40-61, 1973. 
[18]  Scheduling real-time, periodic jobs 
using imprecise results, J. W. S. Liu, K. 
J. Lin, and S. Natarajan, Proceedings of 
the IEEE 8th Real-Time Systems 
Symposium, San Jose, California, 
December 1987. 
[19]  Performance of algorithms for 
scheduling periodic jobs to minimize 
average error, J. Y. Chung and J. W. S. 
Liu, Proceedings of the IEEE 9th 
Real-Time Systems Symposium, 
Huntsville, Alabama, December 1988. 
[20]  The rate-monotonic scheduling 
algorithm: Exact characterization and 
average behavior, J. Lehoczky, L. Sha, 
and Y. Ding, Proceedings of the IEEE 
Real-Time Systems Symposium, 99. 
166-171, 1989. 
[21]  On the competitiveness of on-line 
real-time task scheduling, S. Baruah, G. 
Koren, D. Mao, B. Mishra, A. 
Raghunathan, L. Rosier, D. Shasha and 
F. Wang, Proc. of the 12th Real-Time 
Systems Symposium, San Antonio, 
Texas, pp. 106-115, December 1991. 
[22]  Applying new scheduling theory to 
static priority pre-emptive scheduling, 
N. C. Audsley, A. Burns, M. 
Richardson, K. Tindell, and A. 
Wellings, Software Engineering 
Journal, 8(5), pp. 284-292, 1993. 
[23]  A better polynomial-time 
schedulability test for real-time 
fixed-priority scheduling algorithms, C. 
C. Han, H. Y. Tyan. 18th IEEE 
附件 
9 
 
國立清華大學研究成果技術移轉項目表 
移轉技術名稱 整合開發工具組及除錯器技術 
技 術 簡 介 
In the typical process of developing an 
application, in addition to compiling, assembling, 
and linking, debugging plays an important role for 
the reason that potential bugs are hard to detect by 
merely code tracing. Hence, providing a good 
debugging tool which is called a debugger to the 
customers is crucial for a company. 
Furthermore, integrating these toolkits into a 
united environment is important. Software 
Development Kit is a set of development tools that 
provide an environment for the programmer to 
create, edit, and compile the application. Moreover, 
it also provides an integrated environment for the 
engineer to control and manage the software and 
hardware platform while developing a software 
project. 
計 畫 主 持 人 姓名：李政崑    服務單位：國立清華大學 
移 轉 廠 商 
基 本 資 料 
公司名稱：金麗科技股份有限公司 
電話：03-6662866 傳真：03-5631498 
地址：科學工業園區新竹市力行路 2-1 號 6 樓之 1 
授 權 金 額 新台幣五十萬元 
技 轉 日 期 96/10/2 
 
