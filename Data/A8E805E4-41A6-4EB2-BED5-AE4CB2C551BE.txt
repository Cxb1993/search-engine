 I
中英文摘要 
（一） 中文摘要。 
關鍵詞：無線隨意網路，無線感測網路，時間同步協定。 
 
時間同步是無線隨意與無線感測網路中，一個重要的工作。例如，在無線隨意網路通
用標準IEEE 802.11的省電模式下，每一個節點都須同步，才能定時起來接收同步信標
(BEACON)；另在跳頻展頻模式(Frequency Hopping Spread Spectrum)下，節點亦須同步跳
頻，才能確保節點間用相同頻率互相溝通。IEEE 802.11時間同步方式，因效率不佳而會產
生擴充性(scalability)的問題。因此已有數個同步協定嘗試解決此擴充性的問題，但這些協
定都是為無線單躍式(single-hop)隨意網路設計。本計畫在多躍式無線隨意網路中，克服擴
充性問題，設計出實用的同步協定ASP(Automatic Self-time-correcting Procedure)。同步在無線
感測網路中亦同等重要，同時還必須兼顧必須省電的特性。本計畫亦為無線感測網路設計
同步協定PETSP(Power Efficient Timing Synchronization Protocol)。ASP的核心是在收集到校
準目標足夠的時間資訊後，各節點便能自我校正，這樣的自我校正可大幅減少節點之間的
時間偏移量；PETSP採用ASP的觀念，在具備自我校正能力後，減少節點傳送時間同步信
標的次數，以達省電之目的。我們透過模擬驗證了ASP及PETSP的同步效果，亦將PETSP
實做為Mica MoteZ 模組上，驗證其實用性。 
 
 
（二） 英文摘要。 
Keywords: Wireless Ad Hoc Networks, Wireless Sensor Networks, Time Synchronization 
Protocol.  
 
     In multi-hop wireless ad hoc networks, it is important that all mobile hosts are 
synchronized. Synchronization is necessary for power management and for frequency hopping 
spread spectrum (FHSS) operations. IEEE 802.11 standards specify a clock synchronization 
protocol but this protocol suffers from the scalability problem due to its inefficiency contention 
mechanism. We propose an automatic self-time-correcting procedure (ASP) to achieve clock 
synchronization in a multi-hop environment. Our ASP, after collecting enough timing 
information, a slower host can synchronize to the faster one by self-correcting its timer 
periodically. Timing synchronization is essential to wireless sensor networks. We propose a 
power-efficient timing synchronization protocol (PETSP) which aims to fulfill the 
synchronization job with the minimum energy consumption. In PETSP, based on ASP, all sensor 
nodes synchronize their timing to a designated target node. This mechanism speeds up the 
synchronization process. Simulation results verify the performance of ASP and PETSP. We have 
also implemented PETSP on MICAZ Mote sensor boards. The experiments verify that the 
protocol achieve timing synchronization in a real system. 
 
的節點收到信標後，會與自己的TSF timer 比較，如果收到信標中的 TSF timer 比較快，則
會以信標中 TSF timer 的值取代自己的TSF timer的值，這個動作等於是每個節點的時間，
都會向擁有比較快 TSF timer 的節點對齊。每個節點的TSF timer，實際上是由該節點自己
的時鐘和另一個變數offset相加而成。當某一節點收到一個信標，發現必須調整時間 (因信
標中的TSF timer比自己快)，此節點會調整自己的offset值，讓自己的TSF timer 值能跟上比
較快的節點。 
 
圖 1：信標產生視窗 
IEEE 802.11 各個節點在每個信標間距傳送信標及達成時間同步之步驟如下： 
1. 中止信標以外封包傳輸之延遲倒數機制。 
2. 產生亂數延遲時間，其範圍為 0 到 2 倍 aCWmin × aSlotTime。（在跳頻展頻技術
（FHSS）狀況下 aCWmin 和 aSlot-Time 的值分別為 15 和 50 微秒，在直接序列展
頻技術（DSSS）狀況下分別是 31 和 20 微秒） 
3. 等待亂數延遲時間。 
4. 假如在延遲時間倒數結束之前收到其他節點傳送的信標，則取消亂數延遲。節點會檢
查信標內的時間資訊，假如所收到的信標時間資訊比本地節點快，則節點會採用信標
的時間資訊作為自己的時間。 
5. 假如亂數延遲時間已經到點而且在延遲期間也沒有收到任何信標，則節點發送含有時
間同步計時器時間資訊的信標出去。 
IEEE 802.11 的時間同步方法有以下缺點： 
1. 時間慢的節點只能跟時間快的同步，時間快的節點不能跟慢的同步。 
2. 每個節點競爭取得發送信標優先權是相同的。 
3. 一個信標間距只能發送一個信標。 
國內外有關 IEEE 802.11 無線隨意網路時間同步的文獻，目前所知包括Adaptive Time 
Synchronization Procedure（ATSP）[1] 和Tiered Adaptive Timing Synchronization Procedure
（TATSP）[2]。這兩篇文章也都是要解決IEEE 802.11的時間同步所產生的擴充性問題。
ATSP的觀念是讓時鐘最快(振盪頻率最高)的節點，能有最高的頻率競爭傳送信標，也就是
每個beacon interval都能競爭送信標；時鐘較慢的節點，則降低其嘗試傳送信標的頻率(每隔
Imax 個beacon interval才會讓此節點競爭傳送信標一次)。ATSP的最終的狀態，就是時鐘振盪
頻率最高的節點，每個beacon interval都會競爭傳送信標，因與之競爭的節點數會大幅減少
(因為其餘節點都是每隔Imax 個beacon interval才會競爭一次)，所以時鐘最快的節點成功傳送
信標的機率就提高了。ATSP 協定的一個設計困難點，就是如何決定Imax 值。TATSP 是
ATSP 的改良版，依據節點時鐘振盪頻率的不同，設計了不同的Imax 值。TATSP與ATSP 協
定，都是為單躍式的無線隨意網路設計，未考慮如何將時鐘最快節點的時間資訊，快速地
 2
 4
(三) 研究方法 
1. 同步協定概述
(1) 無線隨意網路之時間同步協定 
 解決802.11同步問題的第一項工作，是要讓時鐘振盪頻率較高的節點，能有較
高的機率送出信標，盡快讓時鐘振盪頻率較低的節點，能校正其時間；第二項工作，
則是要將時鐘振盪頻率較高的節點送出的時間參考值，迅速向外傳遞到整個網路。 
現存的無線隨意網路同步協定，都是在收到時間較快的信標後，節點才有機會校正
自己的時間。因此，節點彼此競爭傳送信標而發生碰撞，會導致沒有信標成功送出，
或者信標是由較慢節點送出，造成許多節點無法校正時間的結果。長此以往，將造
成節點間處於互相不同步的狀態。針對這個現象，我們研究讓節點擁有自動校正能
力之可能性，即在收集了足夠的時間資訊後，讓節點不需透過接收信標，就能自行
校正其時間。也就是說，某較慢節點透過收集同一個較快節點送出的信標兩次後，
就可以獲得該較快節點與自己之間的時間差(更嚴謹地說，是兩節點間的時鐘振盪頻
率差)，有了這項資訊，較慢的節點就可以週期性地調整其offset值，以趕上較快的時
序。當擁有了這項資訊後，即使往後沒有再收到較快節點的信標，仍能確保兩節點
間保持同步關係。 
(2) 無線感測網路同步協定 
 無線感測網路的同步協定，基本上可以架構在無線隨意網路的同步協定之上。
需要額外考量修正的部份，是如何能用更省電的方式來達成同步之目標。因無線感
測網路不再有802.11只能往前調整時間的限制，因此我們採用的方法，分成兩階段：
網路同步初始化階段及網路同步運作階段。在網路初始化時，以某一節點 x 之時間
為基準，讓節點 x 不斷地傳送信標，使網路中其他的所有節點，在持續收集節點 x 
的時間資訊之後，除了向節點 x 對齊之外，也具備自動校正之能力。網路初始化在
一個預定時間後結束(最佳預定時間值須透過實驗模擬與分析求得)，因每個節點都已
具備自動校正能力，便不需要持續地再交換同步資訊，如此可減少節點之資料傳輸
量，也可減少節點因必須對時所需的醒/睡切換。 
2. 無線隨意網路同步協定ASP(Active Synchronization Protocol )描述 
 在無線隨意型網路中，讓節點公平地參與信標傳送的競爭，是一個相當沒有效率
的方法，因為若時間比較慢的節點贏得傳送信標的權利，它的信標傳送並不會同步其他
節點的時間，因此我們設計的ASP有兩個重點：第一、讓時脈較快的時間節點有較高機
率可以優先傳送信標，亦即降低時間較慢節點傳送信標的機率；第二、當時間較慢節點
收到連續兩次同一較快時間節點的信標後，讓較慢時間同步計時器時間的節點自動計算
調整時間偏移量，以便進行自我時間校正。 
 首先，為了增加較快的節點信標傳送個數，ASP 採取方式是減少時間較慢的節點
傳送信標的機率。為了達到目的，先定義一些變數，以方便說明。 
z pi ：代表節點i要經過pi beacon interval才可以參與信標競爭，所以 pi 也可以說表示
各節點i傳送信標的機率。舉例假設pi=2，代表節點i在每 2 個beacon interval嘗試傳
送信標。 
功能的同步協定。 
 無線感測網路的時間同步協定設計，可分為下列幾點說明。 
(一) 時間同步所討論的時間議題： 
a. Send Time（發送時間）：發送時間的延遲是指封包產生到達媒體存取控制層等
待傳送所造成的延遲，發送時間延遲的主要原因是傳送方的作業系統造成的。 
b. Access Time（存取時間）：在封包到達媒體存取控制層後，節點必須先取得頻
道才可以傳送資料，存取時間是指封包到達媒體存取控制層後，到節點開始傳
送封包的中間等待延遲時間。 
c. Transmission Time（傳送時間）：當節點獲得存取頻道 ，這個節點開始會以一
個一個 bit 傳送封包，傳送時間是指接收方開始傳送封包的第一個 bit 到最後
一個 bit 所傳送延遲的時間。 
d. Propagation Time（傳播時間）：傳播時間是指封包從傳送方到接收方傳送過程
中所延遲時間，因此會影響傳播時間的主要因素是傳送距離。 
e. Receive Time（接收時間）：這個時間延遲是指當封包到達目的地後會紀錄接收
的時間，接收時間主要影響因素是接收方的作業系統。 
 
 
時間
Sender
送方
Receiver
收方
Send
Time
Access
Time
Transmission
Time
Propagation
Time
Receive
Time
 
 
 
 
圖 3：時間同步關鍵路徑 
 
 目前所有時間同步研究都大多探討傳送時間及傳播時間，我們提出的PETSP
也假設每次傳送時間都相同時間，另假設傳播時間也都相同時間。 
 (二)  PETSP 設計理念 
我們提出之PETSP針對下列議題加以討論： 
1. 起始點個數：起始點個數，可分為單一起始點及多個起始點。單一起始點方
式缺點是單一起始點如果在一開始就已經故障失效，則後續時間同步就無法
進行；而多個起始點方式缺點是起始點較多電力消耗較大。 
2. 同步目標：目前時間同步目標可分為：（1）時間最快節點做同步或（2）設定
某節點為根節點（root），與根節點同步。文獻中大部分是以最快的節點為同
步目標。這種方式優點是運算處理簡單，各節點以時間最快者來做為同步依
據。以根節點為同步目標的時間同步方法，其同步方式是先選定某一個節點
為根節點，根節點週期性地傳送時間資訊，其他節點以根節點為同步目標，
這種方式優點是同步目標明確，但是設定根點及時間同步過程較複雜。 
 6
 我們下面詳述PETSP的步驟，因為會有節點自我時間偏移的問題(因溫度，振
盪器精確度等因素，造成振盪器的振盪頻率並非是一個常數1)，因此我們在每隔ψ
的時間，必須再重新進行一次時間同步。在同步進行期，各節點會進行資訊交換
以達時間同步。我們限制每個節點在每次同步時期傳送信標的次數上限為BT次。
同步完成期則是指整個網路各節點時間偏差不大於一界限值，即目前網路處於同
步的狀態，可以暫時停止傳遞時間同步資訊，以節省其所必須消耗的電量。 
 
 (三)  PETSP 的時間同步步驟 
以下為無線感測網路中，任一節點 i 所須維護的變數： 
1. ：調整旗標，用來確認節點 i 是否可以有能力自我校正其時間 iADJ
2. ：頻率調整變數，其值之計算同 ASP，即方程式(2) if
3. ：跳躍計數器，記錄節點 i 已送出信標之數目。起始值為 0。 icountbt _
4. Clock_Table：紀錄節點收到信標資訊，紀錄信標的發送節點編號、群組編號、
時間等資訊。 
在ψ秒內的前 2δ的時間，PETSP 處於同步進行期，節點 i 將執行以下的演算法 
Algorithm：PETSP 
一開始，節點編號最小者將會醒來，將自己設為整個網路同步的目標，並設定其
傳輸優先權為最高。 
1. 在每一個信標區間，如果下列情況都成立，節點 i 將企圖傳送一個信標(如同
IEEE 802.11的CSMA/CA操作模式)： 
i. 節點 i為傳送目的地或者 已經被設定， iADJ
ii. 節點 i傳送信標的次數小於BT， 
iii. 在同一個信標區間裡，沒有收到其他節點所傳送的信標。 
一旦有一個信標傳輸成功，節點 i 將他自已的 加1。 icountbt _
2. 若有一個信標被接收到，如果下列情況都成立，在信標內的時間資訊會被記錄
在節點 i 的Clock_Table： 
(a) 節點 i 的Clock_Table是空的， 
(b) 收到的信標其節點ID比在節點 i 的Clock_Table中的節點ID小。 
一旦時間資訊被記錄下來時，會清除 值並且重新設定 。如果所收
到的信標與在Clock_Table中有相同的ID，將執行以下的步驟： 
iADJ icountbt _
 8
                                                 
1我們從實作中觀察發現，每個石英震盪器的確都會有時間偏移問題。石英是由二氧化矽組合而成，
並具有壓電效應，當施加壓力在晶片表面時，它就會產生電氣電位，相對地，當電位加在晶片表面
時，它就會產生變形或振動現象，利用這種振動現象，並控制其發生頻率的快慢，以及精確程度，
就是石英震盪器的設計與應用。石英切割的種類和角度，會影響到所製作石英震盪器的頻率穩定
性，也會影響其他一些重要特性參數。因此不同石英切割種類與角度會影響石英震盪器在不同溫度
下會產生不同的反應，因此在感測網路實作中，可以發現每個節點的石英震盪器會產生不同誤差，
這誤差會造成我們實體感測網路在進入暫時同步期時，整個網路各節點時間誤差會越來越大。因此
我們每隔一段時間必須再度使整個網路重新時間同步。 
 
 
圖5：系統參數 S 對成功傳送率的影響 
 
 
圖6：系統參數 BT 對同步比例的影響 
 
 (二) 最大時間偏移 
此處我們檢驗各個協定所造成不同節點間的最大時間偏移。圖7a顯示IEEE 802.11 
TSF雖然時間同步過程很簡單，但因其有時間慢的只能跟時間快的節點同步，時間快
的節點不能與慢的節點同步、每個節點發送信標優先權是相同的及每個信標間距只能
發一個信標等三個缺點，造成各點間時間誤差是最大。從圖7a, 7b, 7c中，也可以看出
IEEE 802.11 TSF同步速度是最慢的。圖7b是ASP的最大時間偏移，圖7c是PETSP的最
大時間偏移，兩者比較，我們發現PETSP因為採取與特定節點做同步，所以時間偏移
誤差比較小，同時因有很明確同步目標對象，所以同步速度也可以看出比較快。從圖7
可以看出，ASP及PETSP的同步效果都比IEEE 802.11 TSP好，而此二者中，PETSP可以
有較小的時間偏移誤差，同時具有較快的速度可以讓整個網路的時間同步。 
 10
 
2. MicaZ實作 
我們亦將 PETSP 實作於無線感測網路中，採用的硬體是使用美國克爾斯博
（Crossbow）公司的無線感測網路 Mote MicaZ 感測器，作業系統是美國加州大
學柏克萊分校（UC Berkeley）開發提供給無線感測網路使用的 TinyOS，在其上
使用 NesC 語言實作 PETSP。我們利用 5 個 Mote MicaZ 感測器及閘道程式板串
聯個人電腦取得時間同步狀況資料，詳細實作可以參考附錄一。 
圖 9 是實作在 MicaZ 測試結果，在實作過程中發現，在 5 個點都做完時間同
步後，最大自我時間偏移為一分鐘偏移 0.8~1.2 微秒，我們也發現若要使時間誤
差保持在 200μs 以內，重新時間同步的間隔時間最大值為 180 分鐘。即最長每隔
180 分鐘整個網路必須要重作一次時間同步，因此我們認為如果用在 MicaZ 的實
體無線感測網路，如果使用 PETSP 最佳設定是每 180 分鐘再重新作時間同步一
次，如此可以最省電，也可以讓整個網路都一直維持在時間同步的狀態下。 
 
 
 
 
 
 
 
 
 
 
 
 
圖 9a：實作無線感測網路最大時間偏移（ψ=3600 秒） 
 
 
 
 
 
 
 
 
 
 
 
 
圖 9b：實作無線感測網路最大時間偏移（ψ=7200 秒） 
 
 
 12
 14
multi-hop wireless ad hoc networks＂ Distributed Computing Systems, 2004. Proceedings. 24th 
International Conference on 2004, pp. 574 – 581. 
[4] Jeremy Elson, Lewis Girod, and Deborah Estrin ,“Fine-Grained Network Time 
Synchronization using Reference Broadcasts,＂ in proceedings of the fifth symposium on 
Operating System Design and Implementation (OSDI 2002), December 2002. pp. 147-163. 
[5] Ganeriwal, S., Kumar, R., and Srivastava M. B.,”Timing-sync protocol for sensor networks”, 
Proc. SenSys 2003, November 2003, Los Angeles, pp.138-149. 
[6] Miklos Maroti, Branislav Kusy, Gyula Simon, and Akos Ledeczi,“The Flooding Time 
Synchronization Protoco1,＂ in proceedings of the 2nd International Conference on Embedded 
Network Sensor System 2004, pp. 39-49. 
[7] M. L. Sichitiu and C. Veerarittiphan, “Simple, Accurate Time Synchronization for Wireless 
Sensor Networks,＂ WCNC 2003, pp.1266-1273. 
[8] Elson, J., and Romer, K. “Wireless sensor networks: a new regime for time synchronization,
＂ACM SIGCOMM Computer Commun. Rev., 2003, 33, (1), pp. 149–154. 
[9] TinyOS, http://www.tinyos.net 
[10] MicaZ: http://www.xbow.com/Products/Wireless_Sensor_Networks.htm 
[11] J. Broch, D. Maltz, D. Johnson, Y. Hu, and J. Jetcheva, “A Performance Comparison of 
Multi-Hop Wireless Ad Hoc Network Routing Protocols,＂in Proceedings of the 4th Annual 
ACM/IEEE International Conference on Mobile Computing and Networking, Dallas, TX, USA, 
Oct 1998, pp. 85–97. 
[12] K. Römer, “Temporal Message Ordering in Wireless Sensor Networks,＂ IFIP MedHocNet, 
Mahdia, Tunisia, June 2003. pp.611-612 
[13] J. V. Greunen and J. Rabaey, “Lightweight Time Synchronization for Sensor Networks,＂ 
Proc. 2nd ACM Int＇l. Conf. Wireless Sensor Networks and Apps., San Diego, CA, Sept. 2003. 
pp.11-19 
[14] J. Elson and D. Estrin, “Time Synchronization for Wireless Sensor Networks,＂ Int＇l. 
Parallel and Distrib. Processing Symp., Wksp. Parallel and Distrib. Comp. Issues in Wireless 
Networks and Mobile Comp., San Francisco, CA, Apr. 2001. pp.1-6 
[15] K. Römer, “Time Synchronization in Ad Hoc Networks,＂ ACM MobiHoc ＇01, Long 
Beach, CA, Oct. 2001. pp.173-182 
[16] J. Hill and D. Culler, “A Wireless Embedded Sensor Architecture for System-Level 
Optimization,＂ Tech. rep., UC Berkeley, 2001. pp.1-12 
[17] J. Elson, and K. Römer, “Wireless Sensor Networks: A New Regime for Time 
Synchronization,＂ Proc. 1st Wksp. Hot Topics In Networks, Princeton, NJ, Oct. 2002. 
pp.149-154 
[18] A. Hu and S. D. Servetto, “Asymptotically Optimal Time Synchronization in Dense Sensor 
Networks,＂Proc. 2nd ACM Int＇l. Conf. Wireless Sensor Networks and Apps., San Diego, CA, 
Sept. 2003. pp.1-10 
及氣體濃度等感測項目，可以將感測器安裝在 MicaZ 上面，就可以由 MicaZ
提供無線通訊及電力服務，兩者結合就可以構成一個無線感測網路的節點。 
z MicaZ：主要負責資料無線的接收和發送。配置一個小型微處理器、無線通
訊裝置及電池，負責將感測器資料作處理及傳輸通訊。 
z 程式板：主要負責網路資料的彙聚和與電腦等設備的介面。用於將 MicaZ 與
個人電腦連接，所以撰寫好一個新的程式必須透過程式板將資料燒錄到
MicaZ 的快閃記憶體，在本篇論文實作觀察某個節點時間同步狀況，也是必
須透過程式板將 MicaZ 內的資料回傳給電腦。 
有了 MicaZ、感測器及程式板等硬體，我們還需要相關對應的軟體來操作硬
體。TinyOS 就是用於這些硬體的作業系統。 
二、TinyOS 介紹 
 TinyOS 是柏克萊大學所開發出來的，它是一種嵌入式系統，提供給無線感
測網路使用，它是一種結構化元件化基礎的語言，要撰寫 TinyOS 必須使用 NesC
語言。TinyOS 已經提供許多寫好的元件，我們要實作無線感測網路，是利用 NesC
實作各項元件，透過任務及事件將各介面連接，就可以實作出我們想要的無線感
測網路服務。 
三、實作過程 
TinyOS可以到http://www.tinyos.net/下載tinyos-1.1.0-1is.exe，按照安裝步驟，安
裝軟體會自行建置TinyOS的環境。 
我們要先針對環境作設定，MicaZ 要先設定頻率才能讓各節點能互相溝通，
首先在/tos/platform/MicaZ/CC1000Const.h 修改第 213 行(如圖 12)，設定初始頻
率，參考常用頻率表選擇一個頻率設定在<freq>。 
/tos/platform/MicaZ/CC1000Const.h 
[212] #ifndef  CC1K_DEF_PRESET 
[213] #define CC1K_DEF_PRESET 
(CC1K_<freq>_MHZ) 
[214] #endif 
 
 
 
圖 12：CC1000Const.h 程式碼 
並且在/tinyos-1.x/apps/Makelocal，編輯 Makelocal 檔，一般預設 Group ID 是 0x7d，
所以在 Makelocal 檔可以自行變更 Group ID，我們設定
DEFAULT_LOCAL_GROUP = 0x33，並設定頻率，例如：PFLAGS += 
-DCC1K_DEF_FREQ=915998000。 
常用頻率如表 1所示。 
 
 
 
 16
  
 
 
 
 
 
 
 
 
 
 
 
圖 14：編譯程式 
 
 18
 
 
 
 
 
 
 
 
 
 
 
圖 15：編譯完成 
  
如果我們撰寫的程式沒有錯誤，TinyOS 會出現如圖 15 的訊息，代表編譯完
成，我們可以看到編譯後的檔案大小及成功訊息。 
 接著我們要把程式燒錄到 MicaZ 的快閃記憶體，因此我們先需要將 MicaZ
裝在程式板上，如圖 16。並將程式板上的 RS232 連結在電腦上。 
 
 
 
 
 
 
 
 
 
圖 16： MicaZ 與程式板連結 
 圖 18 及 19 分別表示燒錄動作及成功更新 MicaZ 內部快閃記憶體。我們接
著必須開始作各項 PETSP 測試，因此我們還必須針對 TinyOS 的工具 Java 環境作
設定，主要確認 Java 各項環境設定正確，並有啟動 Jni，圖 20 就是整個擷取時
間同步資料的示意圖，透過 Java 經由序列連接到 MicaZ 上讀取資料。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
圖 20：利用 Java 擷取資料示意圖 
 
 
 
 
 
 
 
 
 
 
 
 
圖 21：利用 Java 擷取時間同步 
 圖 21 是輸入 java net.tinyos.tools.Listen 指令，就可以讀取到我們預設的時
間同步資料，資料格式是由使用者當初寫在程式中設定的，因此我們只要將資料
讀出後，並分析就可以得到我們測試資料。 
 
 20
 22
 
圖22：工作項目圖 
 
本結案報告之研究內容，與原計畫申請書完全相符，達成預期目標。研究成果部份，
適用於無線隨意網路的 ASP 已被期刊論文 Wireless Personal Communications 接受(尚未刊
出)，適用於無線感測網路的 PETSP 則刊登於今年 7 月之 Journal of Information Science and 
Engineering。無線網路中的同步特性，是許多的應用的重要條件，本計畫完成有效率又能
省電的同步策略，是許多後續研究的重要基礎。總而言之，本計畫之執行可謂非常成功。 
 
 
A Fuzzy Control Quorum-Based Energy Conserving Protocol for IEEE 802.11 Ad Hoc
Networks
Chih-Min Chao1 and Xin-Hong Lin2
1 Department of Computer Science and Engineering
National Taiwan Ocean University, Taiwan
2 Department of Information Management
Tamkang University, Taiwan
Abstract— In this paper, we propose a power-saving protocol,
the fuzzy control quorum-based energy conserving protocol
(FQEC), for IEEE 802.11 ad hoc networks. In the IEEE 802.11
power saving mode, hosts have to wake up every beacon interval
to check if they have to remain awake in the remaining of
that beacon interval. It is not an efficient power-saving solution
since a host with little traffic still has to wake up every beacon
interval. In this paper, we investigate the possibility to use a
fuzzy control system to dynamically adjust the sleep duration in
order to conserve more energy. In the fuzzy control system, we
define the control rules according to the experienced latency of
both incoming and outgoing packets. Such a definition exploits
each host’s traffic load to obtain the best sleep/awake frequency.
Simulation results verify that our FQEC indeed achieves better
energy conservation.
Keywords: Access schemes, Data communications, Mobile
communication systems, Wireless communication, Fuzzy con-
trol.
I. INTRODUCTION
Power management is important for a mobile ad-hoc net-
work (MANET) since hosts are powered by batteries. It is
essential to develop an energy-efficient protocol for a MANET
to make it work long. In the literature, many power saving
protocols have been proposed recently. Some operate in the
routing layer [5], [19], and others work in the medium access
control (MAC) [4], [8], [17], [18]. Routing layer solutions
concentrate on finding the minimum power consumption path
[5], or on maintaining minimum power transmission [19].
Most MAC layer solutions focus on improvement of the
ATIM (Ad-hoc Traffic Indication Message) window, either by
adjusting the ATIM window length [8] or by proposing a
new access mechanism [4], [17]. The proposed protocol in
the paper also works in the MAC layer. A more detailed
description of previous works can be found in Section II.
The IEEE 802.11 standard defines a Power Saving Mode
(PSM) [7] to address this issue. In the IEEE 802.11 PSM, time
is divided into a series of beacon intervals. At the beginning
of each beacon interval, each host must stay awake to check if
it should remain awake. Such a scheme fails to adjust a host’s
sleep duration according to its traffic conditions. For example,
it is reasonable for a heavy-loaded host to wake up frequently
to accomplish data transmissions. On the other hand, when a
host has nearly nothing to transmit/receive, its sleep duration
can be longer, in order to conserve energy. A naive solution
would be to allow a host to sleep longer when its traffic
This research is supported by the National Science Council, ROC, under
grant NSC95-2221-E-019-013.
load is lighter. However, without proper control, two hosts
may not wake up at the same time in order to achieve data
communication. Thus, to efficiently manage a host’s energy,
we need not only a power saving mechanism but also a scheme
to guarantee data transmission.
In this paper, we proposed a fuzzy control, quorum-based
protocol to efficiently utilize hosts’ energy. A host is allowed
to sleep longer (successive multiple beacon intervals) if it is
not involved in transmission frequently. The proposed protocol
combines the concepts of quorum and fuzzy control: the
quorum concept guarantees two hosts meet each other while
fuzzy control dynamically adjusts each host’s quorum size
(sleep duration) according to its traffic load.
II. PRELIMINARIES AND RELATED WORKS
In this paper, we made the assumption that all hosts were
time synchronized, as in IEEE 802.11 PSM.
A. IEEE 802.11 Power Saving Mode
In the IEEE 802.11 PSM, time is divided into a series of
beacon intervals. At the beginning of each beacon interval,
a certain period of time called the ATIM window is defined.
Each host must stay awake for this ATIM window. At the
beginning of the ATIM window, hosts contend to send a bea-
con frame which is used for clock synchronization. The ATIM
window is also the time period used by hosts to announce to
those in the doze state that there are packets pending. A host
will listen to these announcements to determine if it needs to
remain in the awake state. Specifically, a host with packets
pending for another host must first make an announcement
during the ATIM window by sending an ATIM frame. Each
host checks these announcements to decide whether it can
switch to sleep mode after the ATIM window. If an ATIM
frame is received, the receiving host must reply with an ATIM-
ACK frame. A host who does not receive an ATIM frame can
switch to sleep mode at the end of the ATIM window. Actual
data transfer is accomplished after the ATIM window.
Fig. 1 illustrates the operation of the IEEE 802.11 PSM.
In the first beacon interval, host B has successfully broadcast
a beacon. After the ATIM window, both hosts switched to
sleep mode, since no packet is pending. In the second beacon
interval, after host B had broadcast a beacon, host A sent an
ATIM frame to host B during the ATIM window and received
an ATIM-ACK frame from host B as the acknowledgement.
Hosts A and B both remained awake for the entire beacon
OutputsInputs
Fig. 3. Block diagram of fuzzy control.
we implement our protocol by utilizing a grid-based quorum.
In a grid-based quorum, one row and one column are picked in
an n×n grid. This concept can be demonstrated as shown in
Fig. 2. Host A picked row Ra and column Ca as its quorum,
while host B picked row Rb and column Cb. There are two
intersections between hosts A and B, one for Ra and Cb and
the other for Ca and Rb.
2) Fuzzy Control: The fuzzy set concept is first introduced
by Zadeh [20]. Thanks to the efforts of many researchers,
it is extended to be a theory of fuzzy logic. Fuzzy logic
handles the concept of degrees of truth: truth values may be in
the range between “completely true” and “completely false”.
Fuzzy logic provides a simple way to make precise conclusions
from vague or imprecise linguistic information (such as “very
busy”, “a little hot”, and “quite long”). That is, it is easier
to explain linguistic implicit information than traditional two-
valued Boolean logic.
The fuzzy control systems utilize the concept of fuzzy
logic in drawing a controlling decision. It utilizes the if-then
rules and the associated inference engine to simulate human
decision making: work from approximate data and find precise
solutions. The block diagram of fuzzy control is shown in
Fig. 3 [13]. The process of a fuzzy control system can be
summarized as the following steps:
1) Define the input and output variables.
2) Classify these variables into a number of fuzzy sets.
Each of these fuzzy sets has a linguistic label.
3) Assign a membership function for each fuzzy set.
4) Construct the rule-based inference engine by assigning
the fuzzy relationships between input/output variables
and fuzzy sets.
5) Fuzzify the inputs.
6) Determine the (fuzzy) outputs. Each rule will generate
one output.
7) Integrate these outputs.
8) Defuzzify the output in order to obtain a crisp decision.
B. Fuzzy Control Quorum-Based Energy Conserving Protocol
(FQEC)
Basically, the FQEC is built on top of AQEC+ and employs
fuzzy control to dynamically adjust the quorum size in order to
conserve energy. For each host i running our FQEC, two input
variables are adopted. The first oneis the average transmission
delay1 of the packets received by host i during the last n
beacon intervals (assuming that host i uses an n × n grid
quorum). The other input variableis the queueing delay of
the packets waiting in host i’s buffer. We regard the first
1The transmission delay of a packet is defined as the duration from the
time when packet is generated to the time when the packet is successfully
received.
0
0.2
0.4
0.6
0.8
1
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
ExtremelylongVery longLongModerateShort
Fig. 4. Membership function of input variables
0
0.2
0.4
0.6
0.8
1
-5 -4 -3 -2 -1 0 1
FreeModerate
A little
busy
Moderate
busy
Very
busy
Extremely
busy
Fig. 5. Membership function of output variables
input as history data since this information is derived from
finished tasks. The second input is regarded as future data
since this information is collected from tasks to be done. Both
inputs have influence on the selection of quorum size. A host
may play the role of both a receiver and a sender. Being a
receiver, what a host concerned is the transmission delay of the
received packets. Long transmission delays imply the packets
have troubles being delivered, either in the transmission side or
the receiving side. To shorten the transmission delay, what a
receiver can do is to reduce the quorum size. On the other
hand, being a sender, the quorum size should be chosen
according to the experienced queueing delay of the host’s
outgoing packet. A packet waits a lot of time in the buffer
implies that the quorum size should be reduced. One output
variable is defined for each host. It indicates the number
of increment/decrement the host should make in its quorum
size. The purpose of the FQEC is to enable each host to
obtain the optimal quorum size based on its history and future
information.
For the input variables, we define five fuzzy sets: extremely
long, very long, long, moderate, and short. The membership
function of the input variables is shown in Fig. 4. We define
the membership functions based on the observation that the
average transmission delay is around 55 ms for the IEEE
802.11 power saving mode when each beacon interval is 100
ms long. That is, the membership value of “moderate” is
one when experienced delay is 45 to 60 ms. To implement
the fuzzification, we treat 15 ms as a unit. For example, in
Fig. 4, the input data equals to “1” (in the x-axis) means the
experienced delay is 0 to 15 ms. The membership values of
input variables are in Table I. For the output variable, we
define six fuzzy sets: extremely busy, very busy, moderate
busy, a little busy, moderate, free. The membership function
and values of the output variable are shown in Fig. 5 and Table
II, respectively.
3
TABLE III
FQEC CONTROL RULES
future data history data
extremely long very long long moderate short
extremely long extremely busy extremely busy extremely busy extremely busy extremely busy
very long extremely busy very busy very busy moderate busy moderate busy
long extremely busy very busy moderate busy moderate busy a little busy
moderate extremely busy moderate busy moderate busy a little busy moderate
short extremely busy moderate busy a little busy moderate free
TABLE IV
FQEC’S CONTROL TABLE
future data history data
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
1 1 1 0 0 0 -1 -1 -1 -1 -2 -2 -2 -2 -5 -5 -5
2 1 0 0 0 -1 -1 -1 -1 -2 -2 -2 -2 -5 -5 -5 -5
3 0 0 0 -1 -1 -1 -1 -2 -2 -2 -2 -5 -5 -5 -5 -5
4 0 0 -1 -1 -1 -1 -2 -2 -2 -2 -5 -5 -5 -5 -5 -5
5 0 -1 -1 -1 -1 -2 -2 -2 -2 -5 -5 -5 -5 -5 -5 -5
6 -1 -1 -1 -1 -2 -2 -2 -2 -5 -5 -5 -5 -5 -5 -5 -5
7 -1 -1 -1 -2 -2 -2 -2 -5 -5 -5 -5 -5 -5 -5 -5 -5
8 -1 -1 -2 -2 -2 -2 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5
9 -1 -2 -2 -2 -2 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5
10 -2 -2 -2 -2 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5
11 -2 -2 -2 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5
12 -2 -2 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5
13 -2 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5
14 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5
15 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5
16 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5
respectively. Each host has initial energy 500 Joules. The spot
in the following figures shows the average of 10 simulations,
each simulating 3000 seconds. Two different traffic models are
simulated. In the constant bit rate (CBR) model, hosts were
supplied with uniform traffic loads varied between 1 and 25
packets per second. In the more practical bursty traffic model,
packet arrival at each host followed a 2-state model. A host
may be in an idle state or an active state. No packet was
generated during the idle state, while W packets per second
were generated during the active state, where W is uniformly
distributed between 1 and 25. A state transition was made
every 60 seconds.
Below, we made observations from two different criteria:
the fraction of alive hosts and transmission latency.
A. The Fraction of Alive Hosts
We first investigated the performance of the proposed pro-
tocol in how much it can extend the network lifetime. Our
simulation was carried out until all hosts ran out of their
energy. The number of living hosts was recorded every 20
(for the CBR model) or 50 (for the bursty model) seconds.
The results of the CBR mode is shown in Fig. 6. Our FQEC
performed the best which was followed by AQEC+, DPSM,
IEEE 802.11 PSM, and IEEE 802.11. Hosts running IEEE
802.11 and IEEE 802.11 PSM ran out of energy after 620 and
800 seconds, respectively. At simulation time 800 seconds,
hosts running AQEC+, DPSM, and FQEC still had 17%, 33%,
and 47% hosts surviving, respectively. The FQEC protocol had
extended about 2%, 10.6%, 30%, and 67.7% of the network
0
20
40
60
80
100
500 580 660 740 820 900 980 1060
Simulation time (sec)
A
li
v
e
h
o
st
(%
)
IEEE 802.11
IEEE 802.11 PSM
DPSM
AQEC+
FQEC
Fig. 6. The effect of different MAC protocols on the fraction of alive hosts
in the CBR model.
lifetime when compared to AQEC+, DPSM, IEEE 802.11
PSM, and IEEE 802.11, respectively.
The same experiment was also tested for the bursty model
and the results are shown in Fig. 7. Similarly, the FQEC out-
performed the others. Interestingly, the gap between AQEC+
and DPSM shrunk while the gap between AQEC+ and FQEC
enlarged when compared to Fig. 6. We believe it is because the
constant-thresholds of AQEC+ are not optimal for all different
environments. This experiment necessitated the design of a
mechanism which is able to dynamically adjust the thresholds
of changing quorum sizes.
B. Transmission Latency
Transmission latency, for different MAC protocols, is shown
in Fig. 8. All power saving protocols, including 802.11 PSM
5
