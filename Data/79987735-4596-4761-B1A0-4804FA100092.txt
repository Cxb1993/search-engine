of the solution (service). In this project we have developed 
Semantic Capability Description Language (SCDL) [27], 
an SQL-like description language that may be utilized to 
describe the capability of a solution (service), with an 
objective to support automatic service composition. The 
syntax of SCDL for a service is similar to that of SQL, as 
expressed in the following generic form: 
 
SELECT outputs (O1,…, Om), aggregated-outputs (f1(A1),…, 
fd(Ad)) 
FROM inputs (I1,…, Im), variables (R1,…, Rn), other 
variables (S1,…., Sk) 
WHERE p(inputs, outputs, other variables) 
GROUP BY (H1,…, Hj) 
where O1,…, Om are output objects. f1(A1),…, fd(Ad) are 
possible aggregation functions, I1,…, Im are input objects, 
R1,…, Rn are some range variables, S1,…., Sk are sets that 
may be derived from the inputs and the range variables, 
H1,…, Hj are the variables to group the output objects, and 
p(inputs, outputs, other variables) is a formula that describes 
the relationships among the inputs, the outputs and the 
variables. SCDL allows variables to be typed, and it allows 
a function to be included as a condition in the WHERE 
clause. In addition SCDL allows “exponential variables”, 
where the domain of an exponential variable could be the 
set of all subsets of an existing set, and it allows variations 
of exponential variables (We will see some examples later). 
The corresponding algebraic expression is as follows: 
))((),,;,,( 11),,(),,(11 111 knpAfAfHHmm SSRRGOOIIWS ddj       
For example, if one has a tool that can detect clusters of 
blobs in an image that are structured like a satellite or a star, 
she/he can package the tool as a service with the following 
SCDL description: 
 
[S1-SCDL] 
SELECT  i 
FROM INPUT setof-image datain,  
setof-string s = [‘satellite’,’star’]  
image:dataset i,  
setof-blob:2i.blobs()c 
INPUT string:s t 
WHERE i.contain(c) and c.islike(t) 
 
In the above, image:dataset i says i is an object of type 
image whose domain is the set dataset, setof-string 
s=[‘satellite’,’star’] s says s is the set of strings 
[‘satellite’,’star’], string:s t says t is a string whose 
domain is s,  setof-blob:2i.blobs()c says c is a cluster of 
blobs in i, the  condition i.contains(c) is true if c is within 
image i, and the condition c.islike(s) is true if c is 
structurally like a satellite or a star. The input of the service 
is an image dataset, and the output is a subset of the images 
that contain  one or more blob clusters structured like a 
satellite or a star. 
If the tool not can only detect any blob clusters that 
are structured like a satellite or a star but also can annotate 
them, it can be packaged as a service with the following 
SCDL description: 
 
[S2-SCDL] 
SELECT  annotate(c) 
FROM INPUT setof-image datain,  
setof-string s = [‘satellite’,’star’]  
image:dataset i,  
setof-blob:2i.blobs()c 
INPUT string:s t 
WHERE i.contain(c) and c.islike(t) 
 
 As another example, if one has a tool that can 
detect blob clusters in an image that do not overlap, she/he 
can package the tool as a service with the following SCDL 
description: 
 
[S3-SCDL] 
SELECT  i 
FROM INPUT setof-image datain,  
image:dataset i,  
setof-blob:2i.blobs()c 
setof-blob:2i.blobs()s 
WHERE i.contain(c) and i.contain(s) and not 
overlap(c,s) 
 
A service does not have to be a tool; it may be 
content as well. Consider, for example, the case that 
someone has a collection of video clips about different 
events in which President Obama was involved. She/he may 
package the videos as a service with the following SCDL 
description: 
 
SELECT  v 
FROM setof-image dataset = ‘my-dataset’,  
     video:dataset v 
     event e, 
     INPUT string:[‘sport’,’political’,’academic’]  
activity 
WHERE v.contain-event(e) and agent(e,’President 
Obama’) and category(e,activity) 
 
 Besides tools and content, a service may be 
something else. For example, one may know how to train 
any dog well. She/he may publish this as a service with the 
following SCDL description: 
 
SELECT  g = trained(k) 
FROM INPUT dog k, VAR dog g  
WHERE * 
 
In the above, k is a dog to be trained, g is the dog after 
training，  ‘ *’ is a wild card designating “arbitrary 
conditions on k and g.” Note that a service does not have to 
be rendered online; SCDL is merely a specification 
language.  
      Finally, SCDL can be extended to include meta-
variables to describe a service whose scope is broader. For 
example, given four classes account, customer, branch and 
depositor, the following SCDL expression specifies that it 
can take any SQDL query that selects anything from these 
classes with any combination of relational comparisons 
xn>  and <y1, y2,…, yn> the types of xi and yi are the 
same.) Also some meaningful functions may be 
defined on each element. 
 Otherwise it is “type free”.  A type free expression 
may be a relation such as a flat file or a set of 
records whose fields are primitive values such as 
integers, floating point numbers and text strings. 
 
Following is a brief summary of the operators; details can 
be found in [29]: 
 
1. Select:   The operator P(E) returns as result objects in 
E that satisfy P.   
2.       Project: The operator S(E) removes those objects of 
E that do not satisfy the attributes specified in S from each 
object of E, and returns as result the other objects of E that 
satisfy the attributes specified in S. 
3.      Function: If f is a function that returns an expression 
as its result, and each of its arguments is an object or an 
expression, then f(arguments) is an expression. Whether 
f(arguments) is type free, type bound or structure type 
bounded is determined by the semantics of f.  Some special 
cases are: 
 Cartesian Product: If  E and F are expressions 
then E  F is an expression. The operator 
(Cartesian Product) computes the set {(x,y) | x 
 E, y F} which is either structure type 
bound (if both E and F are type bound or 
structure type bound) or type free (if both E 
and F are type free). 
 Union: If  E and F are expressions then E    F 
is an expression. The operator (Union) 
computes the union of the two expressions. 
The Union operator preserves the structure 
classification. 
 Difference: If  E and F are expressions then E - 
F  is an expression. The operator (Difference) 
computes the difference between the two 
expressions. The Difference operator preserves 
the structure classification. 
 Image: If E is an expression and f is a function 
that takes an element of E as its input, then f  
E (read as “f images E”) returns an expression 
by applying f to each element of E. The 
structure classification of  f  E is determined 
by the semantics of f.  
4. Aggregation:  If E is a type bound expression then SGf 
A(E) is a structure type bound expression. The operator 
G (called the “Aggregate” operator) groups the objects 
of E according to the set of attributes specified in S (in 
the form: attribute, attribute, ….), and for each group 
applying the aggregation function f to the set of objects 
corresponding to attribute A to obtain a value, a set of 
values, an object or a set of objects. The possible 
aggregate functions include primitive functions such as 
min, max, mean, variance, avg, sum, count that can be 
applied to a group of primitive values.  The aggregate 
functions can also include functions defined by users 
to a group of non-primitive objects.  For example, a 
user can define a “best image” function to process a 
collection of visual image files and return as output 
one or more visual image files with the best signal-to-
noise ratio.  
 
A sentence in SNL is expressed in the following form: 
 
Verb noun(s) where adjectives  
 
SNL sentences may be composed by naïve users 
based on simple multiple hierarchical choices without 
knowing any low-level concepts such as “join” and 
“selection”.  Suppose, for example, that one wishes to 
identify the number of patients with a clinical diagnosis of 
Alzheimer’s disease who have diabetes and have been 
generated for a specific genetic marker (e.g.ApoE) genotype 
results available.  The sentence would consist of a noun 
(patients), three adjectives/predicates (“with clinical 
diagnosis of AD”, ”having diabetes”, “having ApoE 
genotype results available”) and a verb (“find”).   
       Consider SQDL1 discussed in Section IV. It can be 
described in SNL as: 
 
[SNL1] Show  (VERB) blobs of images in ‘cmd-232’ 
(NOUN) that have blobs structured like a satellite or a star 
(ADJECTIVE) 
 
And the SNL expression for SQDL2 is: 
 
[SNL2] Show  (VERB) blobs of images in ‘cmd-232’ 
(NOUN) that have blobs structured like a satellite or a star 
(ADJECTIVE) and not overlap with other blob structure 
(ADJECTIVE) 
 
If we store an annotation with each component of an 
object class (i.e., class, attribute, method) as a part of its 
meta-data, a sentence in structured natural language can be 
formed by the following procedure, where a function, a 
noun or a condition is chosen from the list of annotations 
that is stored with the object schema: 
 
1. Choose a defined object-relational algebra function; 
2. Choose from a list of existing or new data source 
elements (formed by recursively applying the 
procedure) as one or more arguments to the 
function selected; if the user chose the select 
operator, choose one or more defined conditions 
(and their corresponding parameters). 
3. Define the result of the query as a data source 
element. 
 
 
Figure 2. Architecture of Semantic Computing (revised from 
[1]) 
 
1. Semantic Analysis, that analyzes and converts signals 
such as pixels and words (content) to meanings (semantics); 
it provides the information resources for Semantic 
Integration and Semantic Applications. 
2. Semantic Integration, that integrates the content and 
semantics from different sources with a unified model; it 
considers the information derived from the Semantic 
Analysis layer that is presented in different formats and 
integrates such information before it can be used. 
3. Semantic Services, that utilize the content and 
semantics to solve specific problems. Semantic services have 
been developed in several forms: Web Search, including 
automatic Question Answering (Q/A) [2, 3] and information 
retrieval; Multimedia Databases, with a primary focus on 
content-based retrieval [4]; and semantic synthesis, which is 
the reverse of semantic analysis; 
4. Service Integration, that integrates different kinds of 
services to provide more powerful services. Sometimes these 
services are limited or insufficient for particular 
requirements that require several semantic services working 
together. Services integration provides the interoperation 
methods between different services. 
5. Semantic Interface, that allows the user to access and 
manipulate the content and semantics of various sources. 
Standard Graphical User Interface (GUI) techniques such as 
browsing, menu trees, and online help are far less appealing 
for the next generation applications. Therefore new standards 
of interface, such as natural language interface, multi-modal 
natural language interface as well as visual interface, are 
becoming increasingly important. 
Besides the five layers discussed in the above, the 
architecture contains security and management mechanisms. 
Since most information is sent and received through a 
network, security mechanisms at multiple levels are required. 
The management layer provides the overall management of 
the semantic computing architecture. It controls what 
information is provided for semantic analysis and how the 
semantic information can be integrated to construct a 
knowledge warehouse. It also supervises semantic conflict 
resolution between different information sources. At the top 
level, it manages the interoperations between different 
services and between different interfaces. 
Some areas of Semantic Computing have appeared as 
isolated pieces in various fields such as computational 
linguistics, artificial intelligence, multimedia, software 
engineering, database and services computing. As shown in 
Figure 2, the field Semantic Computing glues these pieces 
together into an integrated theme and addresses their 
synergetic interactions. For example, it addresses how 
retrieval of multimedia content may be facilitated by natural 
language annotations, how embedded texts may be extracted 
from images, how software may be derived from 
requirements described in natural language, how security  
MM Data
(Image, Voice)
Artificial
Intelligence
Natural
Language
Semantics
Content
Text
Semantics
Program
Semantics
Structured
Data
Semantics
Knowledge 
& Data
Engineering
Software
Engineering
Computer
Systems &
Networks
Signal
Processing
&
Pattern
Recognition
Computing
Semantic Computing
Program
Semantics
 
Figure 2. Technical Coverage of Semantic Computing 
 
can be added based on contexts, how web search can be 
accomplished effectively with a cell phone, etc. 
Semantic Computing is an integrated discipline. While 
researchers in the past have been focused on their individual 
fields, considering Semantic Computing as an integrated 
discipline has the advantage that people may share their 
approaches in solving common problems. More importantly, 
more applications require the integration of different types 
of content, and their corresponding tools, to address 
complex requests from the user. 
The search engine discussed in this article is an example 
of the Semantic Computing architecture. It employs SCDL 
as a unified language to document the semantics (capabilities) 
of solutions and integrate them with a unified model – 
Service. The SNL/SQDL on the other hand provides a 
standard and semantic interface to interpret users’ intentions.  
  
VIII.         RESEARCH ON SPECIFIC SERVICES  
Below is a list of services that have been developed by us or 
are being developed by us: 
A. Semantic OLAP 
To address the problems with traditional OLAP and 
O3LAP, we have developed and built an object relational, 
multidimensional data service on top of SQL Server 8 as 
follows [36]: 
plots. The expression gene analysis results can be exported 
to text files, and the histogram chart of the gene expression 
pattern can be exported to a bitmap file.  
We have also applied the GEE tool to analyze 
multiple chips of 48 patients with liver primary tumor and 
non-tumor tissue. We have identified gene expression 
clustering that is over-expression, under-expression and no 
significant differential expression. Various user-defined 
thresholds of gene expression level will result in different 
gene expression clusters. Paired-chip analysis is a histogram 
of the distribution of gene expression ratios for 
hybridizations by comparing gene expression. We have 
standard statistical frequency quantity to determine 
differential gene expression. The histogram is displayed in 
real time for user observation. Finally, the results of the 
analysis can be interpreted by enrichment of pathway 
analysis. Therefore, we connect the gene expression clusters 
to pathway map to allow the visualization of analysis results 
on metabolic pathways. Microarray data may be 
downloaded as required from SMD (Stanford MicroArray 
Database) or in the case of the stand-alone version, reside on 
the user’s computer. 
 
C. Automatic Immunohistochemistry (IHC) Image Analysis 
 
We have introduced an automatic immunohistochemistry 
(IHC) image analysis tool, IHCread [33]. Images from liver 
cancer biopsy were used to verify the accuracy of the 
system. The results demonstrated that IHCread can correctly 
separate the cancer region from normal region in an IHC 
image. The density of immuno-stained protein representing 
the expression level of a tested marker protein can be 
calculated and compared between normal and cancerous 
region. IHCread can help biologists to correctly and rapidly 
analyze the differential expression of a marker protein in 
IHC images and can be applied in molecular marker 
screening and cancer typing. 
 
D.  Sharing Bioinformatics Research Resources  
 
Peer-to-peer network provides an infrastructure for peers to 
communicate and share resources with each other. It brings 
remote people together and let them interoperate more 
easily. We have developed an application for sharing 
bioinformatics research resources based on the JXTA 
technology [34]. The system architecture has three major 
components, namely, web service creation, service 
advertisement, and service consuming. We created a peer 
group named ‘Bioinformatics’ and advertised three 
recognizing cancer-related gene methods to this group as 
peer services. Peers with the same peer group can find and 
access these services in the same local area network or cross 
the Internet. Bioinformatics researchers can build their 
applications to consume these services or provide more 
services to this group. Peer-to-peer network provide 
researchers with the same study area can share resources 
with each other on the Internet easily.  
 
E.  Protein-Protein Interactions 
 
Alzheimer’s disease (AD) is a progressive 
neurodegneerative disease, causing the human memory and 
certain instinct loss gradually. The goal of our research is to 
identify AD-related transcription factors (TFs), construct the 
transcription factors’ protein-protein interaction network 
and gene regulation network. 
We have employed the NCBI dataset to collect AD-
related proteins, and made use of several protein datasets to 
screen out the AD-related TFs [35]. These AD-related TFs 
are subjected to further queries, such as using the HPRD, 
the Gene Ontology and the NCBI GEO databases to filter 
out the tissue expression sites (such as neuron, cereblllum 
and brain), biological functions and the gene expression 
profile information respectively.  
If a TF get mutated or defected, it could have profound 
effects on the downstream genes in the gene regulation 
pathway, and causing diseases. This work identified five 
AD-related TFs and ten AD-related proteins. Among these 
15 proteins four are recorded in the existing literature. In 
addition 17 genes are predicted to be regulated by three of 
the 15 TFs. This putative transcription factor protein-protein 
interaction network and the gene regulation network could 
possibly used as a molecular map for AD study.  
Furthermore, we have made use of the ArrayExpress 
microarray data to identify AD-related TFs. We found six 
AD-related proteins and 18 TFs, in which five perform 
transcription factor activity function and the rest 13 perform 
the DNA binding function. 
 
IX.         DISCUSSIONS 
For a complex problem not answerable by a single 
service, it is desired that SSE can identify a set of services 
that collectively can solve the problem and synthesize a 
workflow among the component services.  
Much research related to web services composition 
has been done to provide platforms and languages for 
composing heterogeneous systems, such as Universal 
Description, Discovery, and Integration (UDDI) [16], Web 
Services Description Language (WSDL) [17], Simple 
Object Access Protocol (SOAP) [18] and part of OWL-S 
[19] ontology (ServiceProfile and ServiceGrounding). Such 
platforms and languages try to define standard ways for 
service discovery, description and invocation (message 
passing). Other initiatives such as Business Process 
Execution Language for Web Service (BPEL4WS) [20] and 
OWL-S ServiceModel are focused on representing 
workflows of service composition. Two main techniques are 
flow-based composition (such as EFlow [21], composite 
service definition language (CSDL) [22], Polymorphic 
[34]  C. C. Wu, R. M. Chen, J. J. P. Tsai, “Sharing Cancer-related Genes 
Research Resources on Peer-to-peer Network”, The Eleventh SDPS 
Transdisciplinary Conference on Integrated Systems, Design, & 
Process Science, pp. 303-307, 2008. 
[35] Liao F.S. 廖晃聖 (2008). In Silico Disease Regulatory Pathway 
construction – Alzheimer’s Disease. Master thesis, Department of 
Bioinformatics, Asia University. Advisor, Ka-Lok Ng. 
[36] S. Ikeda, P. C-Y.,  Sheu and Jeffrey J.P. Tsai, “An Object Relational 
OLAP Model,” (to appear) International Journal of Tools with 
Artificial Intelligence, 2010. 
 
 
 
 
二、與會心得	 
參加這次IEEE	 2010	 Summer	 School	 on	 Semantic	 Computing，讓我對語意計算
有更深的了解。希望可以把語意計算的方法利用在生物醫學上，讓生物醫學可
以透過語意計算的技術，讓生物醫學上的研究可以有所突破。語意計算是利用
自然語言的方式來查詢，這樣一來可以讓使用者更容易查詢。不管是影片、圖
片、文字、聲音…等。都可以透過語意計算的技術來查詢，達到準確和快速。	 
參加完這次會議，回來讓我們更想把語意計算加入生物醫學裡面。我們接下來
計畫想把這技術加入系統生物學上。希望會有好的突破和進展，可以幫助生物
學家在研究上的幫助。	 
在這次會議上有提到關於Ontology	 和自然語言的處理方法，正是我們現在面臨
所要突破的技術，在這次會議上我們吸收到如何在這兩點上如何做出突破在系
統生物學上。	 
三、考察參觀活動(無是項活動者略)	 
四、建議	 
這次會議辦的很成功，希望這樣的會議可以繼續辦下去，讓我們有更多的機會
接觸新的方法。每一個小組都有做一個小小的報告。大家報告的都精采，也認
識不同國家的研究人員，互相交流和學習。	 
五、攜回資料名稱及內容	 
參加	 IEEE	 2010	 Summer	 School	 on	 Semantic	 Computing	 證書	 
六、其他	 
 
96年度專題研究計畫研究成果彙整表 
計畫主持人：許承瑜 計畫編號：96-2221-E-468-007-MY3 
計畫名稱：Semantic Integration of Biomedical Analysis Systems--生醫分析系統之語意計算介面
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 1 0 100%  
博士生 1 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 3 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
