2 B.-Y. WANG
Formal verification offers an alternative solution to improve design qualities. It
is a technique that applies logical reasoning to guarantee the correctness of designs.
The qualities of systems are hence ensured by rigorous analysis of formal logic.
Among various formal verification techniques, we are most interested in model
checking. It is an automated technology for quality assurance. For the past decade,
hardware industry has used it extensively. Many prominent companies such as Intel,
Motorola, ATI, and nVidia have deployed the technology in circuit designs. More
recently, Microsoft has developed its own model checking tool and distributes it
in its device driver development kit. Since embedded systems are comprised of
both hardware and software components, we believe the technology will play more
significant role in the design of future embedded systems.
In model checking, designers first construct a model according to their designs.
The model should contain all (maybe more) design behavior that is crucial to system
functionalities. The desired behavior will be described by formal languages. Model
checkers will verify whether the model conforms to the formally specified behavior
automatically. If the model behaves accordingly, model checkers will prove it by
exploring all model behavior exhaustively. On the other hand, model checkers will
find a buggy trace in the model should it exist.
Since its advent in early eighties, many model checking techniques have been
developed for past decades. In the early years, model behavior is explored consec-
utively. Model checkers iterate through all possible behavior one at a time until no
more behavior could be observed. Since it requires significant amount of time to
iterate through all behavior, the technology does not appeal to designers.
In early nineties, sophisticated data structures are introduced to speed up be-
havior exploration. Instead of iterating through one behavior at a time, the new
technique is able to manipulate a group of behavior simultaneously. This greatly
improves the effectiveness of the technology. Since the new techniques is especially
suitable for digital circuit designs, the technology has been deployed in hardware
design industry henceforth.
After the initial success in hardware industry, people realized that the tech-
nology was at its best in flaw detection. When a defect is found, model checkers
will provide erroneous traces and help engineers rectify their designs. On the other
hand, engineers do not have any observable proof when their designs are correct.
Researchers in model checking community started to work on bug hunting since late
nineties. New techniques were then introduced to allow model checkers to examine
more complicated designs.
Because of these various techniques introduced in model checking, model check-
ers are by no mean simpler than systems intended for verification. It is fair to
require a proof of quality in model checkers. As an advocate of formal methods, we
would like to know whether any formal technique might be applied in the analysis
of the tools we build. Indeed, if formal verification is so useful, can it analyze the
correctness of its tools? Of course, verification results are doubtful if there are flaws
in verification tools. A formal analysis of verification tools not only demonstrates
the effectiveness of formal methods but also improves designers’ confidence as well.
Another important issue yet to be addressed in embedded system designs is
timing behavior. The success of various model checking techniques does not directly
apply to systems with timing constraints. Indeed, the continuous time domain
is often a source of difficulties in the design and verification of timed systems.
4 B.-Y. WANG
There are two initial guarded commands in CAi and two updating guarded com-
mands in CAu . One of the updating guarded command, for example, assigns the old
value of y to x and the new value of z to y when the old value of x is 1.
3. Property Specification Language
To help designers write down intended system behavior formally, various prop-
erty specification languages have been developed. Since different specification lan-
guages are suitable for different behavior, our model checker provides designers
three different languages. In this section, we briefly describe the property specifi-
cation languages supported in OMocha.
3.1. µ-Calculus. Let AP be a set of atomic propositions. A µ-calculus for-
mula ϕ is constructed by the following rules [Koz83]:
• propositional variables: X,Y, Z, . . .;
• atomic propositions (AP): p, q, r, . . .;
• Boolean operators: ¬ϕ, ϕ ∨ ϕ′;
• modal existential next-state operator: ♦ϕ;
• greatest fixed-point operator: νX.ϕ, where the bound variable X occurs
positively in ϕ.
As usual, we use derived operators such as ϕ∧ϕ′(≡ ¬(¬ϕ∨¬ϕ′)), ϕ(≡ ¬♦¬ϕ)
and µX.ϕ(≡ ¬νX.¬ϕ[¬X/X]).
The semantics of µ-calculus formulae is defined over a Kripke structure K =
(S,→, s0, P ) where S is the set of states, →⊆ S × S the transition relation, s0 ∈ S
the initial state, and P ∈ S → 2AP the labeling function which maps each state
to a set of atomic propositions satisfied in the state. For clarity, we write s l→ t
for (s, l, t) ∈→ and call the state t an l-successor of s. L-successors of s is defined
similarly for any set L of transition labels. A valuation ρ is a function mapping
propositional variables to subsets of S. Let R ⊆ S. We write ρ[X 7→ R] for the
valuation mapping X to R and Y to ρ(Y ) for X 6= Y . Given the valuation ρ,
the semantic function [[ϕ]]ρ for a µ-calculus formula ϕ computes the set of states
satisfying ϕ under the valuation ρ:
• [[X]]ρ = ρ(X);
• [[p]]ρ = {s ∈ S : p ∈ P (s)};
• [[¬ϕ]]ρ = S \ [[ϕ]]ρ;
• [[ϕ ∨ ϕ′]]ρ = [[ϕ]]ρ ∪ [[ϕ′]]ρ;
• [[♦ϕ]]ρ = {s ∈ S : ∃t ∈ S.s→ t and t ∈ [[ϕ]]ρ};
• [[νX.ϕ]]ρ = ⋃{R ⊆ S : R ⊆ [[ϕ]](ρ[X 7→ R])}.
For any µ-calculus formula ϕ and Kripke structure K = (S,→, s0, P ), we write
K, s |= ϕ when s ∈ [[ϕ]]∅. The µ-calculus model checking problem is to determine
whether K, s0 |= ϕ.
3.2. Propositional Linear-Time Temporal Logic. The syntax of propo-
sitional linear-time temporal logic (PTL) formula ϕ is defined as follows.
• atomic propositions (AP): p, q, r, . . .;
• Boolean operators: ¬ϕ, ϕ ∨ ϕ;
• modal next-state operator: Xϕ;
• until operator: ϕUϕ′.
6 B.-Y. WANG
• K, s |= E(ϕUϕ′) if there is a sequence of states t0 = s, t1, . . . and an
integer k ≥ 0 such that
– ti → ti+1 for 0 ≤ i < k;
– K, tk |= ϕ′;
– K, tj |= ϕ for 0 ≤ j < k;
• K, s |= A(ϕUϕ′) if for any sequence of states t0 = s, t1, . . ., there is a
k ≥ 0 such that
– ti → ti+1 for 0 ≤ i < k;
– K, tk |= ϕ′;
– K, tj |= ϕ for 0 ≤ j < k;
As usual, we use derived operators such as ϕ ∧ ϕ′(≡ ¬(¬ϕ ∨ ¬ϕ′)), AFϕ(≡
A(Uϕ)), EFϕ(≡ E(Uϕ)), AGϕ(≡ ¬EF¬ϕ), and EGϕ(≡ ¬AF¬ϕ).
For any CTL formula ϕ and Kripke structureK = (S,→, s0, P ), the CTL model
checking problem is to determine whether K, s0 |= ϕ. The CTL model checking
problem can be reduced to the µ-calculus model checking problem by transforming
any CTL formula ϕ to an equivalent µ-calculus formula Lϕ. Specifically, define the
translation function τ as follows.
τ(p) = p
τ(¬ϕ) = ¬τ(ϕ)
τ(ϕ ∨ ϕ′) = τ(ϕ) ∨ τ(ϕ′)
τ(AXϕ) = τ(ϕ)
τ(EXϕ) = ♦τ(ϕ)
τ(A(ϕUϕ′)) = µX(ϕ′ ∨ (ϕ ∧X))
τ(E(ϕUϕ′)) = µX(ϕ′ ∨ (ϕ ∧ ♦X))
Then one has the following theorem [BCM+92]:
Theorem 1. Let K = (S,→, s0, P ) be a Kripke structure and ϕ a CTL for-
mula. Then K, s0 |= ϕ if and only if K, s0 |= τ(ϕ).
4. Model Checking with OMocha
OMocha is the latest development of the model checker Mocha [AHM+98,
AdAG+01]. Like its predecessors, it uses reactive modules [AH96, AH99] as the
modeling language. The new version has the following features:
• OMocha is implemented in Objective Caml [Ler00]. Objective Caml is
a statically typed functional language developed in INRIA. It is the result
of several years of programming language research and development. In
addition to functional programming, it also supports object-oriented pro-
gramming. Both programming paradigms are handy to the development
of OMocha.
• OMocha is designed to support different model checking techniques from
the beginning. With the Objective Caml type system, the software ar-
chitecture allows tool developers to add new model checking algorithms
easily. Currently, both BDD- and SAT-based algorithms have been im-
plemented in OMocha under the unified software architecture.
8 B.-Y. WANG
The underlying property specification language of OMocha is µ-calculus. It
is known that µ-calculus is more expressive than both CTL and PTL [Eme90]. In
principle, both CTL and PTL properties can therefore be verified in OMocha if
they are translated to equivalent µ-calculus properties. In OMocha, we provide
automatic transformation of CTL and PTL properties to µ-calculus properties. For
CTL, the translation in Section 3.3 is used. For PTL, OMocha first constructs
a reactive module Rφ¯ for any PTL formula φ as in Section 3.2, then uses the
underlying µ-calculus model checking algorithms to find an accepting run of both
the user-defined model and Rφ¯. If such an accepting run exists, the user-defined
model violates the PTL property φ and the run is reported to the user. Otherwise,
the user-defined model does not have any run satisfying the property ¬φ [CGH94].
4.2. Explicit-state Algorithm. When model checking finite-state systems,
state spaces of models are explored systematically. In order to avoid exploring the
same state repeatedly, model checkers store visited states in memory and explore
unvisited states to improve their efficiency. Explicit-state algorithms use na¨ıve state
representations in state exploration. Given a representation of a state (say, a vector
of variable values), explicit-state algorithms would find all successors of the given
state, check properties on unvisited states, and store unexplored states in memory
for next iteration.
When the explicit-state algorithm is invoked in OMocha, a C program is
generated according to the model and property specifications. The C program
would simulate all behavior of the model and verify invariant properties defined by
users. It uses BDD’s to store visited states during the computation.
The explicit-state algorithm inOMocha is designed to incorporate user-defined
external functions. When verifying hybrid control systems, non-linear functions are
often required. Instead of enriching the model specification language, OMocha
invokes user-defined C functions in state exploration. Hence users are free to im-
plement any non-linear functions in C and verify hybrid systems in OMocha.
Further, user-defined C functions are complied and linked with the explicit-state
model checking algorithm. The efficiency of user-defined functions is intact during
verification.
4.3. Implicit-State Algorithms. Implicit-state algorithms, on the other hand,
use implicit state representations. Often, implicit representations denote a set of
states. Hence implicit-state algorithms are able to manipulate state sets. Their ef-
ficiency could be improved significantly if implicit representations are chosen prop-
erly. In OMocha, two implicit-state model checking algorithms are available. The
BDD-based algorithm uses BDD’s as the implicit state representation. The SAT-
based algorithm uses propositional logic formulae as the implicit representation.
4.3.1. BDD-based Algorithm. Let {0, 1} be the Boolean domain B and b0, b1, . . . , bn−1
a (fixed) set of Boolean variables. A Boolean function
F :
n︷ ︸︸ ︷
B× B× · · · × B→ B
is a function from vectors of Boolean domains to Boolean domain. BDD’s are
representations of Boolean functions. For instance, the function G(b0, b1, b2) =
b1 ∨ (b2 ∧ b0) has the BDD representation shown in Figure 2.
To represent states in BDD’s, we first think a state as a Boolean vector. A
state set would then become a set of Boolean vectors. The characteristic function
10 B.-Y. WANG
subsumed by our framework. Our technique therefore opens up opportunities for
developing new complete bounded model checking algorithms.
The key concept is to combine bounded and local model checking techniques.
Local model checking (also known as tableau-based model checking) tries to find a
proof for the property by exploring neighboring states [Cle89, SW91, ASW94].
The proof search in local model checking algorithms is not unlike those of bug
hunting in bounded model checking: a flaw is nothing but a “local” proof of the
negation of the given property. The completeness of the proof rules in local model
checking ensures that a flaw can always be found in finite models, should one exist.
We therefore develop an algorithm that reduces the proof search in local model
checking to Boolean satisfiability. Since the negation of any formula in the universal
fragment of µ-calculus belongs to the existential fragment of µ-calculus, we look
for design flaws by finding proofs for arbitrary formula in the fragment. For any
formula in the fragment, we construct a Boolean formula for it. The satisfiability
of the Boolean formula is shown to be equivalent to the existence of a bounded
proof in local model checking. Additionally, we show that the unsatisfiability of a
similar Boolean formula implies the absence of proofs. The latter formula allows
our algorithm to check the completeness criterion dynamically. Since the criterion
is proof-theoretic, it is valid for all properties in the specification logic. Our tech-
nique gives a proof-theoretic interpretation of the completeness criteria and is more
general than those in [SSS00, LdMS03, AS04].
A major advantage of our technique is to verify many more properties by the use
of standard encodings. For instance, ∀CTL [EL86, BCM+92] and the universal
fragment of Fair CTL [EL85] can be verified by embedding them into the univer-
sal fragment of µ-calculus. Our framework gives a unified theory of completeness
criteria, which cannot be found in previous works. Additionally, the verification of
linear-time temporal logic can be reduced to checking fairness constraints by the
automata-theoretic technique [VW86]. Our technique is also applicable for linear
properties. For detailed information, please refer to [Wan05].
4.4. Examples. In this section, we will use OMocha to verify properties on
two different systems. In train controller system, two trains of opposite directions
are passing through a bridge with only one rail. Two traffic signals on both ends
of the bridge notify the conductors whether they can proceed. Our goal is to have
a correct design such that both trains cannot be on the bridge at any time.
In the second example, we would like to check the correctness of the Needham-
Schro¨der authentication protocol. In the malicious environment of Internet, any
user may impersonate other users to gather confidential information. The Needham-
Schro¨der authentication protocol is designed to authenticate both parties in any
two-way communication. We will specify the authentication protocol in Reactive
Modules and verify its correctness in OMocha.
4.4.1. Train Controller System. Our first example is a simple train controller
system. Two trains coming from opposite directions are trying to cross a bridge
repeatedly. Each train has its own track on the land. But there is only one track on
the bridge. The controller must not allow two trains on the bridge simultaneously.
We first define constants and train models in this example.
type ctrlType = { away, waiting, bridge }
type signalType = { green, red }
12 B.-Y. WANG
module Controller2 (signalW, arriveW, leaveW, signalE, arriveE, leaveE) =
private nearW, nearE : bool
interface signalW, signalE : signalType
external arriveW, arriveE, leaveW, leaveE : event
event atom B0
controls nearW
reads nearW
awaits arriveW, leaveW
init
[] true -> nearW := false
update
[] arriveW? -> nearW’ := true
[] leaveW? -> nearW’ := false
event atom A3
controls nearE
reads nearE
awaits arriveE, leaveE
init
[] true -> nearE := false
update
[] arriveE? -> nearE’ := true
[] leaveE? -> nearE’ := false
lazy atom A4
controls signalW, signalE
reads nearW, nearE, signalW, signalE
init
[] true -> signalW := red; signalE := red
update
[] nearW & (signalE = red) -> signalW’ := green; signalE’ := signalE
[] nearE & (signalW = red) -> signalE’ := green; signalW’ := signalW
[] ~nearW -> signalW’ := red; signalE’ := signalE
[] ~nearE -> signalE’ := red; signalW’ := signalW
Figure 4. Correct Train Controller
4.4.2. Needham-Schro¨der Authentication Protocol. In [Low96], Lowe discov-
ered a flaw in Needham-Schroeder authentication protocol. In this experiment, we
use Lowe’s ideas to break the same security protocol. In Needham-Schroeder au-
thentication protocol, Alice and Bob would like to establish a connection between
them such that both are convinced of the other’s identity.
When Alice initiates the communication, she sends Bob a message composed of
her identity and a nonce encrypted by Bob’s public key (Figure 5. Upon receiving
14 B.-Y. WANG
A E B
A E B
A E B
//
{A,NA}KE //{A,NA}KB
oo
{NA,NB}KA oo {NA,NB}KA
//
{NB}KE //{NB}KB
Figure 8. Error in Needham-Schro¨der Authentication Protocol
by OMocha. In the trace, Alice initiates the authentication protocol with Eve.
But Eve impersonates Alice and initiates another communication with Bob. After
receiving Eve’s message, Bob returns an encrypted message with his nonce to Eve.
Eve simply forwards the message to Alice. Alice then decrypts the message and
returns Bob’s nonce to Eve. Bob finally receives his nonce from Eve and thinks he
is talking to Alice.
5. Analysis of Model Checkers
Model checking has become a popular technique to improve system quality
during the past decade. Thanks to its success in hardware verification, many
model checkers are being developed in research laboratories and sold by companies.
But building a model checker requires sophisticated programming and algorithm-
developing skills. A typical model checker may contain tens, even hundreds, of
thousands of lines of C code. Since model checkers have been deployed in the de-
sign of many critical systems, one wonders whether there is a way to ensure the
quality of these verification tools.
But the complexity of a typical model checker does not allow developers to
analyze the tool easily. One may wonder if there should be flaws in the design or
implementation of these tools. If so, what strategies can be taken to detect the flaws
in the development process. One may wonder if there should be quality assurance
for these critical design tools. The answer, unfortunately, is not very satisfactory.
As a result, one can only hope for the best at present. A na¨ıve proposal is to
perform computer-aided analysis on the model checkers themselves. If a model
checker could be formally analyzed by computers, it would increase our confidence
in the tool. Even though the current state of technology does not allow us to analyze
a real-world model checker as is, it should be straightforward to verify high-level
design in principle. Or is it?
Suppose we would like to verify a model checker by certain formal verification
tool. We have to formalize the model checker in the verification tool first. Since
the model checker takes a system and a property as inputs, we need specifications
of the system description language and the property description language in the
formalization. additionally, system behavior and property semantics are formal-
ized. The formalization of system behavior is then used in the formalization of the
model checker. To analyze the model checker, we can show that the model checker
yields results consistent with the property semantics in our formalization. If one
considers variants of computation models and property specification logics, it is
easy to see that a high-level formalization of model checker is by no mean a simple
task. Unlike network protocols or hardware circuits, the obstacle in the analysis of
model checkers arises even in their formal specifications.
The problem, in our view, is resulted from the lack of theoretical framework
for developing model checkers. In the formalization of a typical model checker, the
16 B.-Y. WANG
if t′ is obtained by applying a rewriting rule to t in T . To annotate the rule and
instances of rule application, we write
U `l,n 〈T , t〉 → 〈T , t′〉
if t′ is the n-th result obtained by applying a rewriting rule labeled l to t in T .
With the universal theory U , we can manipulate meta-level terms at the object
level. We call such feature that can represent and reason meta-level terms at the
object level as reflection.
In addition to the functionalities provided in typical term rewriting systems,
Maude allows users to verify properties on their rewrite theories. The Maude
PTL model checker uses an automata-theoretic algorithm to verify PTL properties
on Maude user-defined theories. The equational theory LT L defines related LTL
symbols used in the model checker. The sorts Prop and Formula in LT L are
used for atomic proposition and LTL formula terms. The satisfaction relation |=
in theory SAT ISFACT ION is used to specify user-defined atomic propositions.
Finally, the function modelCheck(t, f) verifies the PTL formula f on the terms
generated from t by applying rewriting rules. The Maude PTL model checker is
a special feature of the Maude system, which does not belong to the formalism of
rewriting logic. Indeed, it is implemented in C++ and integrated in Maude version
2 [EMS02, CDE+03].
5.2. Specifications of Local Model Checkers. To describe the local model
checking algorithm in [Win91], we first need the following extension to the greatest
fixed point operator, νX{r¯}ϕ where r¯ is a set of states [Win91]:
[[νX{r¯}ϕ]]ρ =
⋃
{R ⊆ S : R ⊆ {r¯} ∪ [[ϕ]](ρ[X 7→ R])} .
Note that νX{}ϕ ≡ νX.ϕ. Any fixed-point operator can be translated to its
extended form syntactically. Intuitively, the formula νX{r¯}ϕ records previously
visited states in {r¯}, which is handy for co-inductive proofs. The extension reduces
the side condition of tableau-based algorithms to membership checking and allows
the proof search to be performed by rewriting. Given a Kripke structure K =
(S, s0,→, P ) and a µ-calculus formula ϕ, the following rules reduce K, s ` ϕ to
Boolean values true or false [Win91]:
• (K, s ` p) = true if p ∈ P (s);
• (K, s ` p) = false if p 6∈ P (s);
• (K, s ` false) = false;
• (K, s ` ¬ϕ) = ¬b where (K, s ` ϕ) = b;
• (K, s ` ϕ ∨ ϕ′) = b0 ∨ b1 where (K, s ` ϕ) = b0 and (K, s ` ϕ′) = b1;
• (K, s ` ♦ϕ) = true if (K, t ` ϕ) = true for some t such that s→ t;
• (K, s ` νX{r¯}ϕ) = true if s ∈ {r¯};
• (K, s ` νX{r¯}ϕ) = (K, s ` ϕ[νX{s, r¯}ϕ/X]) if s 6∈ {r¯}.
Let K be a finite Kripke structure and ϕ a µ-calculus formula. It is shown that
(K, s ` ϕ) = true if and only if K, s |= ϕ [Win91].
The specification of a local model checker consists of three components. Firstly,
we need a language for property specification language, namely, µ-calculus. Sec-
ondly, a model specification language is required. Finally, we will specify the lo-
cal model checking algorithm described above in our framework. In the following
18 B.-Y. WANG
sorts MuVariable MuFormula
ops False True : ⇀ MuFormula
op ¬ : MuFormula ⇀ MuFormula
op ∨ : MuFormula MuFormula ⇀ MuFormula
op ∧ : MuFormula MuFormula ⇀ MuFormula
op ♦ : MuFormula ⇀ MuFormula
op  : MuFormula ⇀ MuFormula
op Nu : MuVariable TermSet MuFormula ⇀ MuFormula
op Mu : MuVariable TermSet MuFormula ⇀ MuFormula
Figure 10. Symbols for µ-Calculus Terms
eq exists (K, LL, s, f , nil, N) = false
eq exists (K, LL, s, f , l L, N) =
if U `l,N [K, s] → [K, t] then
(K LL t ` f) or-else (exists (K, LL, s, f , l L, N + 1))
else
exists (K, LL, s, f , L, 0)
fi
Figure 11. Definition of exists
state term, and a MuFormula term as inputs. They would explore the system de-
fined in the rewrite theory and verify whether it satisfies the µ-calculus property
represented by the MuFormula term.
5.2.2. Local Model Checker for Finite-State Systems. We represent Winskel’s
reduction rules as rewriting rules for entailment terms. Let K be a quoted identifier
denoting the name of a rewrite theory, L the labels in the rewrite theory, s a meta-
level term representing a state, and f a MuFormula term. The entailment term
K L s ` f is of sort Bool. The idea is to rewrite the entailment term to false or
true for any Kripke structure specified by the rewrite theory named K. It is crucial
to use a meta-level term s in entailment terms. The rules of the rewrite theory K
would rewrite the state s had we used the object-level term s in entailment terms.
For instance, the following rule shows how to verify the disjunctive formula f0 ∨
f1:
rl [disj] : K L s ` f0 ∨ f1 ⇒ (K L s ` f0) or-else (K L s ` f1)
The rule disj uses the built-in short-circuited Boolean operator or-else. Observe
how the computation is performed by a sequence of rewrites in rewriting logic.
For the existential modal operator, we use the following rule:
rl [ex] : K L s ` ♦ f ⇒ exists (K, L, s, f , L, 0)
The function exists (K, LL, s, f , L, N) checks if it is possible to rewrite the
entailment K LL t ` f to true at an L-successor t of s, where N serves as a counter
(Figure 11). The built-in QidList term nil represents the empty quoted identifier
list. If there is no transition label, the function returns false.
On the other hand, the universal theory U finds the N -th rewriting result t by
applying the rule l in K. Then the function exists rewrites the new entailment term
K LL t ` f . If it does not rewrite to true, the next successor of s will be checked
20 B.-Y. WANG
rl [AP] : ’PETERSON s ` in-cs (i) ⇒ critical (s, i)
eq critical ( C 0, M , X B P , 0) = (M = inCS)
eq critical ( C 1, N , Y B P , 1) = (N = inCS)
The entailment terms prop0 rewrites to true in 0.5 seconds by Maude. The
model checker contains 250 lines of Maude code. The concise implementation shows
that reflection indeed helps in writing an explicit-state model checker. Since model
simulation in explicit-state model checkers is implemented by the universal theory
U , programmers can pay more attention to the model checking algorithm. Addi-
tionally, the short implementation may be feasible for formal analysis. Theorem
provers based on rewriting logic (such as ITP [Cla04]) may be used to verify our
implementation semi-automatically.
We can actually check properties on our local model checkers. This problem
can be formalized as follows. Define a Kripke structureM0 = (E, RL, ⇒, prop0,
P ) where E is the set of all entailment terms, RL the set of all rule labels in our
specification of the local model checker, and
P (e) =
 { isTrue } if e = true{ isFalse } if e = false∅ otherwise .
For any two entailment terms e and e′, e l⇒ e′ if e rewrites to e′ by applying the rule
l in our model checker. To verify whether the term prop0 always rewrites to true, it
amounts to checking whetherM0 |= µX. isTrue ∨X. Hence we can resolve the
aforementioned questions if we solve these model checking problems.
With the help of reflection, these problems can be solved rather easily. Notice
that the Kripke structuresM0 is an infinite-state structures. There are countably
infinite entailment terms in E. Fortunately, the number of reachable entailment
terms is finite because our model checker always terminates. Since both the local
model checking and the Maude PTL model checking algorithms explore the reach-
able states only, they can be used to solve these problems. Similar technique can
be used to verify our bounded µ-calculus local model checker. For details, please
refer to [Wan06a, Wan06b].
6. Analysis of Timed Systems
Although SAT solvers have been used in the verification of discrete systems, it
is unclear whether they are as effective in the verification of timed systems. Since
timed systems are inherently continuous, discretization is needed for SAT-based
techniques. In this section, a preliminary report on the analysis of timed systems
by SAT-based techniques is briefly described.
Our main idea is to encode the implicit simulation of region exploration al-
gorithm in Boolean formulas and apply SAT-based bounded model checking tech-
niques to the analysis of timed automata. We not only characterize regions as
discrete interpretations, but also precisely encode these interpretations as Boolean
formulae. Secondly, we incorporate an inductive method in our bounded model
checking algorithm. Since bounded model checking is not efficient in proving the
correctness of systems, heuristics such as induction have been proposed to circum-
vent the drawback. The basic idea of inductive method is to prove safety properties
for all steps by assuming them in the previous steps. The induction technique has
22 B.-Y. WANG
To conquer this hurdle, we adopt loop-free termination by inserting loop-free con-
strains at the jth iteration. We hence enforce SAT-solvers searching distinct states.
Once there is no solution, i.e., no distinct state found in the next step, the proce-
dure terminates and R is unreachable. Since all states are distinct, a loop-free path
is exactly a shortest path, and hence, if we concern complete verification, there
is no need to determine the bound ahead. For detailed information, please refer
to [YWH04, YW04].
7. Conclusions
Because of the complexity in embedded systems, developing reliable systems
cannot be done without supporting tools. In this project, we have developed the
model checker OMocha and used it in the verification of several systems. The
novelty of our system is to integrate various model checking techniques in synergy.
As more and more techniques are being developed, we believe our design is most
suitable for the adoption of new technologies.
Not only have we developed a formal verification in this project, but we work on
the analysis of our techniques rigorously. Our preliminary research shows that it is
indeed possible to apply formal methods in the development of formal verification
tools. In the future, we would like to extend our preliminary work to analyze
verification tools in other domains.
Finally, our endeavor in the continuous time domain shows that the techniques
in discrete domains may be migrated to the timed domain. It is perhaps more con-
venient to reuse the latest development in discrete domains rather than developing
new ones.
Of course, our research on the specification and verification of embedded sys-
tems is far from complete. Exciting ideas have been found in the research commu-
nity while we were working on this project. We therefore welcome any comments
and cooperation from colleagues and look forward to having fruitful research work
in new projects supported by National Science Councils in the future.
References
[ACD93] R. Alur, C. Courcoubetis, and D.L. Dill, Model-checking in dense real-time, Infor-
mation and Computation 104 (1993), no. 1, 2–34.
[AD94] R. Alur and D.L. Dill, A theory of timed automata, Theoretical Computer Science
126 (1994), 183–235.
[AdAG+01] R. Alur, L. de Alfaro, R. Grosu, T.A. Henzinger, M. Kang, R. Majumdar, F. Mang,
C.M. Kirsch, and B.-Y. Wang, Mocha: A model checking tool that exploits design
structure, International Conference on Software Engineering, March 2001.
[AH96] R. Alur and T.A. Henzinger, Reactive modules, Proceedings of the 11th IEEE Sym-
posium on Logic in Computer Science, 1996, pp. 207–218.
[AH99] , Reactive modules, Formal Methods in System Design 15 (1999), no. 1, 7–48,
Invited submission to FLoC’96 special isuue. A preliminary version appears in Proc.
11th LICS, 1996.
[AHM+98] R. Alur, T. Henzinger, F. Mang, S. Qadeer, S. Rajamani, and S. Tasiran, MOCHA:
Modularity in model checking, Proceedings of the 10th International Conference on
Computer Aided Verification, LNCS 1427, Springer-Verlag, 1998, pp. 516–520.
[AKMM03] Nina Amla, Robert Kurshan, Kenneth L. McMillan, and Ricardo Medel, Experimen-
tal analysis of different techniques for bounded model checking, TACAS (H. Garavel
and J. Hatcliff, eds.), LNCS, vol. 2619, Springer-Verlag, 2003, pp. 34–48.
24 B.-Y. WANG
[Mes96] Jose´ Meseguer, Rewriting logic as a semantic framework for concurrency: A progress
report, CONCUR ’96: Concurrency Theory, 7th International Conference (Ugo Mon-
tanari and Vladimiro Sassone, eds.), LNCS, vol. 1119, Springer-Verlag, 1996, pp. 331–
372.
[MMZ+01] Matthew W. Moskewicz, Conor F. Madigan, Ying Zhao, Lintao Zhang, and Sharad
Malik, Chaff: Engineering an Efficient SAT Solver, Design Automation Conference,
June 2001.
[MOM02] Narciso Mart´ı-Oliet and Jose´ Meseguer, Rewriting logic: roadmap and bibliography,
Theoretical Computer Science 285 (2002), no. 2, 121–154.
[MRS02] M. Oliver Mo¨ller, Harald Ruß, and Maria Sorea, Predicate abstraction for dense
real-time systems, Theory and Practice of Timed Systems (TPTS’2002), vol. 65,
Electronic Notes in Theoretical Computer Science, no. 2, 2002.
[PWZ02] Wojciech Penczek, Bozena Wozna, and Andrzej Zbrzezny, Towards bounded model
checking for the universal fragment of tctl, Formal Techniques in Real-Time and
Fault Tolerant Systems (FTRTFT’02), LNCS, vol. 2469, Springer-Verlag, 2002,
pp. 265–288.
[SB03] Sanjit A. Seshia and Randal E. Bryant, Unbounded, fully symbolic model checking
of timed automata using boolean methods, CAV (Warren A. Hunt Jr. and Fabio
Somenzi, eds.), LNCS, vol. 2725, Springer-Verlag, 2003, pp. 154–166.
[Som01] Fabio Somenzi, Cudd:cu decision diagram package release 2.3.1, Department of Elec-
trical and Computer Engineering, University of Colorado at Boulder, 2001.
[SSS00] Mary Sheeran, Satnam Singh, and Gunnar St˚almarck, Checking safety properties us-
ing induction and a SAT-solver, Formal Methods in Computer-Aided Design (War-
ren A. Hunt Jr. and Steven D. Johnson, eds.), LNCS, vol. 1954, Springer-Verlag,
2000, pp. 108–125.
[SW91] C. Stirling and D. Walker, Local model checking in the modal mu-calculus, Theoret-
ical Computer Science 89 (1991), no. 1, 161–177.
[Var87] M.Y. Vardi, Verification of concurrent programs: the automata-theoretic framework,
Proceedings of the Second IEEE Symposium on Logic in Computer Science, 1987,
pp. 167–176.
[VW86] M.Y. Vardi and P. Wolper, An automata-theoretic approach to automatic program
verification, Proceedings First Annual IEEE Symposium on Logic in Computer Sci-
ence, IEEE Computer Society Press, June 1986, pp. 332–344.
[Wan04a] B.-Y. Wang, µ-calculus model checking in maude, 5th International Workshop on
Rewriting Logic and its Applications (Narciso Mart´ı-Oliet, ed.), Electronic Notes in
Theoretical Computer Science, vol. 117, Elsevier Science Publishers, 2004, pp. 135–
152.
[Wan04b] Farn Wang, Efficient verification of timed automata with bdd-like data-structures,
Journal of Software Tools for Technology Transfer (STTT) 6 (2004), no. 1, 77–97.
[Wan05] Bow-YawWang, Proving ∀µ-calculus properties with SAT-based model checking, For-
mal Techniques for Networked and Distributed Systems (Farn Wang, ed.), LNCS,
vol. 3731, Springer-Verlag, 2005, pp. 113–127.
[Wan06a] , Automatic verification of a model checker by reflection, 8th International
Symposium, PADL (Charleston, USA) (Pascal Van Hentenryck, ed.), LNCS, vol.
3819, Springer-Verlag, January 2006, pp. 45–59.
[Wan06b] , Modeling and analyzing applications with domain-specific languages by re-
flective rewriting: a case study, 21st ACM Symposium on Applied Computing, ACM,
2006, pp. 1773–1778.
[Win91] Glynn Winskel, A note on model checking the modal nu-calculus, Theoretical Com-
puter Science 83 (1991), 157–167.
[WMG00] Bow-Yaw Wang, Jose´ Meseguer, and Carl A. Gunter, Specification and formal anal-
ysis of a PLAN algorithm in Maude, Proceedings International Workshop on Dis-
tributed System Validation and Verification (Pao-Ann Hsiung, ed.), April 2000,
pp. 49–56.
[WVS83] P. Wolper, M.Y. Vardi, and A.P. Sistla, Reasoning about infinite computation paths,
Proceedings of the 24th IEEE Symposium on Foundations of Computer Science,
1983, pp. 185–194.
