 2 
 
行政院國家科學委員會專題研究計畫成果報告 
XML資料庫管理系統並行控制機制之研究 
計  畫  編  號 ：97-2221-E-025-007 
執  行  期  限 ：97年 8月 1日至 98年 7月 31日 
主   持   人 ：陳世穎  國立臺中技術學院資訊工程系副教授 
sychen@ntit.edu.tw 
共 同 主 持 人 ：林泓毅 國立臺中技術學院流通管理系副教授 
hylin@ntit.edu.tw 
計畫參與人員 ：林秀忠 國立中興大學資訊科學與工程研究所 
洪一景 國立臺中技術學院資訊科技與應用研究所 
陳秀秀 國立臺中技術學院資訊科技與應用研究所 
劉晉瑋 國立臺中技術學院管理科學系 
 
一、摘要 
近年來，有許多應用使用 XML 格式來表
示其資料類型，使得 XML 資料庫管理系統
(XDBMSs)的發展變得日益重要。XML資料庫
管理系統(XDBMSs)可協助使用者儲存和管理
XML文件。在 XML資料庫管理系統中，並行
控制(Concurrency control)是提升系統效能的
重要因素之一。然而，目前雖有許多適用於
XML 資料庫管理系統的並行控制機制被提
出，但都未考慮到 ID/IDREF與 XLink的存取
行為對並行控制機制的影響。ID/IDREF 與
XLink的存取行為將產生有向非循環圖與迴圈
的存取行為，造成傳統的並行控制機制無法運
作。當交易產生有向非循環圖時，會使得
ID/IDREF 和 XLink 參考節點的祖先節點不一
定先被同筆交易存取過，而使得交易發生存取
錯誤。另一方面，當交易產生迴圈時，則易導
致死結的發生。本計畫研究在 XPath存取模型
下，針對 ID/IDREF與 XLink的存取行為設計
新的鎖定式並行控制機制。本機制以 XML 文
件的索引結構為鎖定主體，進而迅速取得被參
考節點的所有祖先節點的鎖定權限。同時，本
機制亦針對存取運算，訂定出鎖定模型與鎖定
相容矩陣。本計畫並建立實作模擬實驗，觀察
所設計的並行控制之效能與其發生死結的機
率。 
 
關鍵詞﹕XML 資料庫管理系統、鎖定式並行
控制機制、XPath模型、ID/IDREF、有向非循
環圖 
 
二、計畫緣由與目的 
由於目前針對 XML 資料庫管理系統所提
出的並行控制機制，並未考慮到 ID/IDREF 屬
性與 XLink的存取行為。因此，本計畫考慮在
XPath存取模型下，ID/IDREF與 XLink的存取
行為對 XML 資料庫管理系統的並行控制機制
的影響。 
ID/IDREF 屬性與 XLink 的存取方式並非
正常路徑從根節點往葉節點的方向執行，而是
透過連結直接跳躍至其他節點或文件進行存
取。然而，現有的 XML 資料庫管理系統的並
 4 
在的目標節點可連結至同一文件或其他文件
中的數個節點。 
 
3.2.2 文件內存取模型與跨文件存取模型 
ID/IDREF與XLink的存取行為容易產生
有向非循環圖(directed acyclic graph, DAG)與
迴圈(cyclic graph)問題。本計畫分析(a)同一文
件內子樹間的存取行為、(b)不同文件間的存取
行為所造成的「DAG圖形問題」、(c)同一文件
內子樹間的存取行為、以及(d)不同文件間的存
取行為所造成的「迴圈問題」。在DAG圖形問
題上，當節點A參考至節點B時，該如何執行
鎖定式並行控制機制，使其不但能有效鎖定節
點B的祖先節點，又可確保serializability特性。
另一方面，在DAG圖形問題上迴圈圖形問題
上，由於節點A與節點B相互參考而形成迴圈
圖形，易造成死結(dead lock)的發生。 
 
3.1.3 XPath的運算衝突分析 
一般而言，交易衝突是指在同一排程中，
不同交易間不斷地交互執行運算，導致輸出結
果與序列化排程結果不一致。衝突發生之條件
主要可分為兩項，分別為「兩交易運算於同一
節點上」與「兩交易之運算會變更節點的值或
結構」。當交易彼此間的執行過程有符合上述
兩點，即可判定兩交易的運算會發生衝突。在
此，將使用〈Ai(x); Bj (y)〉表示在Ti和Tj兩筆
交易中執行A、B運算於x、y節點。當Ti與Tj
在同一排程(schedule)中，根據衝突發生之條
件，於三種情況下不會發生衝突： 
(1) 當兩交易作用於任意x、y節點時，在〈Pi(x); 
Pj (y)〉、〈Pi(x); Rj (y)〉、〈Ri(x); Rj (y)〉三
種運算組合下，不會發生衝突。因為此三
種組合中的運算並未更動到x、y節點的值。 
(2) 當兩交易作用於任意x、y節點時，在〈Pi(x); 
Wj (y)〉運算組合下，不會發生衝突。因為
交易Tj雖會變更y節點的內容，但交易Ti僅
經過x節點並未對節點之內容或結構進行
更動，因此彼此間不會相互影響。 
(3) 當兩交易作用於任意x、y節點時，在〈Ii(x); 
Pj (y)〉、〈Ii(x); Rj (y)〉、〈Ii(x); Wj (y)〉三種
運算組合下，不會發生衝突。因為當Ti以x
節點為基準，進行新增節點運算時，僅會
更動節點間的結構，而不影響Tj經過y節點
或對y節點所進行的讀取及寫入的動作。 
 
反之，Ti與Tj於下列三種情況下會有衝突發
生： 
(1) 當兩交易作用於任意x節點時，在〈Ri(x); 
Wj (x)〉、〈Wi(x); Wj (x)〉兩種運算組合下
會發生衝突。這是由於兩交易的運算皆作
用於相同的x節點，且Tj會對x節點的值進
行更動，導致Ti在讀取或寫入x節點時，發
生資料錯誤的問題。 
(2) 當兩交易作用於任意x節點時，在〈Ii(x); Ij 
(x)〉、〈Ii(x); Dj (x)〉兩種運算組合下會發
生衝突。由於新增(Insert)與刪除(Delete)兩
種運算會變更節點間的結構，且兩運算皆
作用於相同的x節點上，因此容易相互影響
而產生錯誤結果。 
(3) 當兩交易作用於任意x節點時，在〈Di(x); 
Pj(x)〉、〈Di(x); Rj(x)〉、〈Di(x);Wj(x)〉、
〈Di(x);Dj(x)〉四種運算組合下會發生衝
突。由於Ti針對x節點進行刪除(Delete)運算
時已變更文件結構，而導致Tj欲經過x節點
或對x節點進行讀取和寫入運算時發生錯
誤。 
 
綜合上述，透過ID/IDREF與XLink的存取
行為可方便使用者對XML文件進行存取。然
而，卻亦造成有向非循環圖(directed acyclic 
graph, DAG)與迴圈(cyclic graph)問題。因此，
本研究提出新的並行控制機制來解決此問
題。本研究的並行控制機制以鎖定式並行控制
為基礎，並以XML文件的索引結構為鎖定主
體，進行並行控制之操作。 
 6 
式，由P-lock升級而來。當執行運算(I(x), Lj)
於目標節點xÎNd(Lj)時，需先取得Nd(Lj)
的R-lock權限。根據不發生衝突的定義(3)
所述，I-lock與P-lock、R-lock和W-lock皆具
備相容性。反之，根據運算衝突定義(2)所
述，I-lock不僅與D-lock衝突，也與自己本
身I-lock發生衝突。 
(5) D-lock：D-lock為刪除(delete)運算的鎖定模
式，由P-lock升級而來。當執行運算(D(x), Lj)
於目標節點xÎNd(Lj)時，需先取得Nd(Lj)
的R-lock權限。根據運算衝突定義，D-lock
屬於獨占鎖定，與其他四種鎖定甚至於自
己本身皆不具相容性。 
根據上述，可訂定出五運算的鎖定相容性
矩陣(Compatibility Matrix)。如表1 所示。其中
“○”表示兩鎖定具有相容性， “×”表示兩鎖定
間不具備相容性。 
 
表1  鎖定相容性矩陣 
T1取得 x節點
之鎖定 
T2要求 
x節點之鎖定 
P R W I D 
P o o o o × 
R o o × o × 
W o × × o × 
I o o o × × 
D × × × × × 
 
3.2.3 演算法 
圖1為本研究的並行控制機制演算法。其
概念是當交易T1進來時，依照XPath表示式的
location steps依序執行，再要求並取得所需節
點的P-Lock權限；而後，升級至所需權限(R-、
W-、I-、D- locks)後執行該運算。首先，第05~10
行，系統會判斷每個 location step是否擁有
ID/IDREF屬性或XLink。倘若交易中含有
ID/IDREF屬性或XLink時，系統會查詢其參考
節點的祖先節點並取得所有祖先節點的
P-Lock權限。其次，第11~19行，系統會依照
該交易之運算(R、W、I、D)，進行適當的鎖定
升級。而第20~22行，若於鎖定升級時，發現
該交易的運算與其他交易的運算發生衝突，則
該交易需先等待。最後第25行，當交易的XPath
表示式與運算皆執行完畢後，系統將釋放該交
易全部取得節點之鎖定，以提供其他交易使
用。 
 
 
01 T1 arrives 
02 //以下依照每筆交易  XPath中的 location 
step依序執行 
03 i = 1 
04 While i < > lj 
05 If the attribute of  is ID/IDREF then   
06 Read the ancestors of the IDIDREF node 
and  
acquire the P-lock of the ancestors 
07 End if 
08 If the operation of  is XLink then 
09 Read the ancestors of the XLink node and  
acquire the P-lock of the ancestors 
10 End if 
11 If the operation of  is READ then  
12 The P-lock of  is upgraded to R-lock 
13        Else if the operation of  is WRITE 
then  
14 The P-lock of  is upgraded to W-lock 
15        Else if the operation of  is INSERT 
then  
16 The P-lock of  is upgraded to I-lock 
17        Else if the operation of  is 
DELECT then  
18 The P-lock of  is upgraded to D-lock 
19 End if 
20 If the lock of  is conflicted with other 
transactions then  
21     Locking the   has to wait 
22 End if 
23  i = i +1 
24 Loop 
25 T1 releases the locks that acquired by T1   
圖1 並行控制演算法 
 
