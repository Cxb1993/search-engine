 2
研究計畫中文摘要 
 
漸進式頻繁型樣探勘技術之研究 
 
關鍵詞：資料探勘、頻繁型樣、頻繁型樣串列、漸進式探勘、規模擴充性 
    
頻繁型樣(Frequent Patterns)之探勘，是資料探勘之基礎核心問題，其目的在找尋
交易資料庫中，出現頻率高過某一門檻值的商品項目集合，亦即頻繁項目集(Frequent 
Itemsets)。然而，探勘頻繁型樣，面臨兩大問題。第一，資料庫內容時常更新，原本
頻繁之型樣，出現頻率可能變得低於門檻值；反之，原本非頻繁之型樣，出現頻率
可能變得高於門檻值。第二，頻繁型樣之頻率門檻值，可能因不同需要條件而經常
改變。對上述情境，若每當資料庫內容或頻率門檻有所變更，就必須重新掃描整個
資料庫，再重新建立資料結構以探勘頻繁型樣，則將耗費許多時間。 
 
為此，有學者提出漸進式頻繁型樣探勘技術。亦即每當資料庫內容有所變更，
只需處理變更之部分，而且原先資料結構只需作局部更新即可。然而，目前之漸進
式頻繁型樣探勘技術，大都假設記憶體容量極大，所建立之資料結構總可存在記憶
體中，而忽略規模擴充性(scalability)之問題。事實上，隨著資料量的累積，所建立
之資料結構將大於記憶體容量。 
 
本研究計畫之目的，在發展具有規模擴充性之漸進式頻繁型樣探勘技術。其主
要方法，係利用之前研發之資料結構－－頻繁型樣串列（Frequent Pattern List），並
增加其功能，以處理資料庫內容或頻率門檻之變更，並整合 92 年度研究計劃（NSC 
92－2213－E－424－003）所發展之階層式分割法（hierarchical partitioning），以處
理規模擴充性之問題。
 4
 
報告內容 
 
Backgrounds 
 
Data mining is a confluence of many disciplines like database technology, artificial 
intelligence, statistics, and data visualization. The major functions of data mining include 
association rules, classification, clustering, and many other domain-specific applications. One of 
the most basic and important tasks of data mining is the mining of frequent patterns (or frequent 
itemsets), which are sets of items purchased together frequently by customers. Formally, the 
definition is given below [6, 10]. 
Let I = {a1, a2, …, am} be a set of items, and a transaction database DB={T1, T2, …, 
Tn}, where Ti ( i = 1, 2, ..., n) is a transaction containing a set of items in I. The 
support (or frequency) of a pattern P, which is a set of items in I, is the number of 
transactions containing P in DB. A pattern P is a frequent pattern if P’s support is 
larger than or equal to a predefined minimum support threshold t. 
 
Given a transaction database DB and a minimum support threshold t, the problem of 
finding the complete set of frequent patterns is called the frequent pattern-mining 
problem. 
 
There have been a lot of research works on this problem [1, 6, 8, 9, 10, 12] under a basic 
assumption that the database is static. That is, the database will not be changed any more at the 
time of mining. However, in practice, the transaction database may be updated constantly, and the 
frequent patterns will also change as a result. 
To handle the dynamic characteristic of the database, incremental techniques for mining 
frequent patterns have been proposed. Most of these techniques adopt the eager mining approach 
that, as long as the database is changed, generates and maintains a huge amount of intermediate 
patterns or data structures. This may incur expensive computational costs and may consume a lot 
of memory. 
The purpose of this project is to develop an alternative approach－－lazy mining－－for 
incrementally mining frequent patterns without storing intermediate patterns, based on a 
previously devised data structure called the Frequent Pattern List (FPL). With simple extensions 
and modifications, the FPL can handle the updating of the database and can be used for mining 
frequent patterns incrementally. 
 
 
Literature Review 
 
The research on mining frequent patterns was pioneered by Agrawal [AS94], who proposed 
 6
ordering of the item nodes is acceptable. Besides, there is an extra benefit from fixed order－－it 
is time saving because we don’t have to re-order the item nodes for the global FPL each time the 
database is updated, and we don’t have to re-order the item nodes for the conditional FPL during 
recursive calls in the mining process. 
Second, we must consider the cases that currently infrequent items become frequent after 
new transactions are added, and that currently frequent items become infrequent after existing 
transactions are deleted. If the FPL only keeps currently frequent items, it will lose power to 
handle these cases. Therefore, in constructing the FPL, we have to use build an item node for 
each item, even if the item is not frequent for the time being. To indicate the state 
(frequent/infrequent) of the items, we attached to each item node one status bit called Active. 
When the corresponding item becomes frequent, it is set to 1 (that is, the item node is active); 
otherwise, it is reset to 0 (that is, the item node is inactive). Note that in recursive calls, only 
frequent items are selected to construct the conditional FPL. Therefore, there will be no item 
nodes for infrequent items in the conditional FPL. 
Third, the basic operations must be modified also. For bit counting, it is only performed on 
active item nodes. Besides, infrequent items corresponding to inactive item nodes are filtered out 
and patterns will be generated only with frequent items. For signature trimming and migration on 
a transaction signature, its trailing bits corresponding to infrequent items are treated as 0-bits and 
are directly trimmed, and then migrated to the destination node. If a transaction signature contains 
no 1-bits after trimming, it is just deleted. 
 
 Handling Database Updating 
When the database is dynamic, new transactions can be added. Furthermore, new items may 
also be included in the transactions. In this section, we elaborate how to handle these cases, using 
an example database shown in Table 1 and its corresponding revised FPL shown in Figure 1. We 
assume that only five transactions (T1 to T5) are initially loaded into the database. Note that we 
use fixed ordering for the items in constructing the FPL. The minimum support threshold is set to 
60%, or 3 in absolute value (5×0.6=3). 
Table 1. The example transaction database DB 
Bit String Representation Transaction ID Items f c a k b m j p 
T1 f, c, a, m, p 1 1 1 0 0 1 0 1 
T2 f, c, a, k, b, m, j 1 1 1 1 1 1 1 0 
T3 f, b, j 1 0 0 0 1 0 1 0 
T4 c, b, p 0 1 0 0 1 0 0 1 
T5 f, c, a, k, m, p 1 1 1 1 0 1 0 1 
T6 f, a, k, m, j, p 1 0 1 1 0 1 1 1 
T7 a, k, m, j, p 0 0 1 1 0 1 1 1 
T8 a, k, m, j, p 0 0 1 1 0 1 1 1 
 
 8
reading its bit-count array without performing bit counting again.  
For this purpose, we introduce another status bit called Updated to indicate the updating 
status of the item nodes. Initially, the Updated bits of all item nodes are reset to 0. Whenever 
transactions are added, we set the Updated bits to 1 for those item nodes corresponding to the 
items contained in these incremental transactions. 
 When performing the mining process, we just conduct bit counting on the item nodes that 
are active and updated, and then reset their Updated bits to 0. For item nodes that are inactive, we 
just conduct signature trimming and migration. For item nodes that are active but not updated, the 
frequent patterns to be generated will be the same as in last mining process, so bit counting is not 
required. 
The second one is about the Active state. Because of database update or support threshold 
change, an item node might be inactive (infrequent) in last round of mining, and become active 
(frequent) in current round of mining, or vice versa. As noted above, if an item node is active, bit 
counting is required for finding frequent patterns. On the other hand, if an item node is inactive, 
there is no need for bit counting. 
However, other item nodes can also be influenced when the Active state of an item node 
changes. Note that FPL has the property that an item may be contained in the transactions of 
succeeding item nodes, but not in preceding item nodes [9, 10]. Therefore, once an item changes 
state (from active to inactive, or inactive to active), its succeeding item nodes are also influenced. 
That is, when an item node changes from inactive to active, its succeeding item nodes must be 
re-mined to find frequent patterns that contain the corresponding item (which is now frequent). In 
contrast, when an item node changes from active to inactive, its succeeding item nodes must be 
re-mined to find frequent patterns that do not contain the corresponding item (which is now 
infrequent). 
For this purpose, we introduce the third status bit called Influenced. If an item node changes 
its Active state, the Influenced status bits of its succeeding item nodes are set to 1.  
In summary, we use Table 2 to list the actions to be taken on an item node during the mining 
process, depending on the values of these three status bits. 
 
Table 2. Actions to be taken for bit counting, based on the status of the item node 
Active Updated Influenced Actions for bit counting 
0 Don’t care Don’t care No bit counting required 
1 0 0 No bit counting required.  (No new frequent patterns can be generated.) 
1 0 1 Reading the bit-count array for re-mining frequent patterns  
1 1 Don’t care
Performing bit counting on the incremental 
transactions and accumulate with the bit-count 
array to generate frequent patterns 
 
