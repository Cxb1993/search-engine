 1
行政院國家科學委員會專題研究計畫成果報告 
龍圖上通訊、容錯及拓樸性質之研究 
A study on the communication, fault tolerance and topological 
properties of the Dragon graph 
 
計畫編號：NSC 95-2221-E-142 -003 
 
   執行期限：95 年 08 月 01 日至 96 年 07 月 31 日 
主持人：方覺非  國立台中教育大學數位內容科技學系 
共同主持人：黃建宏   虎尾科技大學資工系 
            梁文耀   台北科技大學資工系 
伍朝欽   彰化師大資工系 
 
計畫參與人員: 李宏哲  台北科技大學資工系 
 
一、前言 
 
本計畫的目的是希望能對一個新提
出的，degree 為常數的超立方體變型-龍圖
(Dragon graph)的各種性質加以詳細研究探
討。我們在本期研究中已完成了以下項目: 
1.、 龍圖(Dragon graph)上的最短路徑演算
法(shortest path routing algorithm)。 
2、 龍圖(Dragon graph)上的廣播演算法
(distributed broadcasting algorithm)。 
3、 找出龍圖(Dragon graph)的 diameter(以
及 cost 等)確切的公式，並證明之。 
4、 找出龍圖(Dragon graph)上的 4 條不相
重疊的 path(也就是 4-wide container)，並使
得每一條都能保證比diameter多三步以內。 
5 、 我 們 已 用 包 含 於 書 中
(embedding-in-books)方式，找出一種線性
鋪置(lay out)龍圖的方法在 O(log N) page
及 O(N) width 數之下。 
二、研究目的 
 無論是在超級電腦上，還是在叢集計
算的架構中，連結網路都扮演了一個重要
的角色。而一個好的連結網路應該具備以
下幾個特性 [4]: 
1. 有效率的通訊：如何快速有效地在各個
處理機(也就是結點)之間傳遞資料，應
該是連結網路最重要的性質之一。而其
討論議題最基本的則是其圖形上的半
徑(diameter)；因為 diameter 的值決定了
該連結網路上，任意兩點之最短距離之
極大值。所以可以用它來評估一連結網
路之通訊時間之最大延遲。除此之外，
有效率的 routing 演算法，及
broadcasting 演算法，乃至其他重要的
重要通訊演算法之建置，都是連結網路
上很常見而重要的議題。 
 
2. 對稱性：對稱性越高的連結網路，意味
 3
3 、  使 用 Dragon graph 執 行
Ascend/Descend 演算法在 communication
時間上只需在 CCC 上 1/3 的時間。 
基於以上三點，我們認為 Dragon graph
是一個很值得研究的連結網路。在本研究
中，我們試圖對 Dragon graph 上的基本通
訊演算法的建置做一番探究；這其中包含
了最短路徑演算法及完整的廣播演算法。
我們之前已經使用了電腦程式計算於維度
低於 20 的龍圖之 diameter。進一步地，我
們希望能得到龍圖之 diameter 的確切公
式。此外我們也希望使用 embed in books
的方法討論 Dragon graph 之 layout 性質；
以及試著建立龍圖上任兩點之間的
container 以便討論龍圖上之 k-wide 
diameter 等容錯性質。 
 
三、文獻探討及研究方法 
Dragon graph 是 Fang(也就是本計畫
主持人)提出的 [2]。在該論文中，Fang
闡述了龍圖的基本定義，其對稱性，能有
效執行 Ascend/Descend 演算法的特性；
並列出了電腦計算出的基本性質如 
diameter, cost = diameter×degree 等。 
我們在本計畫的研究中，分別用以下的
方法探討了相關的問題： 
1. 最短路徑演算法： 
我們將 Dragon 上某結點 X 至某結點
Y 的最短路徑演算法，轉換成在 cycle
上某一點 X′經歷(traversal) cycle 上某一
群結點的集合，並終止於某一點 Y′的路
徑問題。經過了這樣的轉換，我們可以
計算出 Dragon graph 上 x 到 y 的最短路
徑。 
2. 廣播演算法： 
我們用兩個 phase 來解 Dragon 上的
廣播演算法。由於 n 維 Dragon graph 具
有 node-symmetric 性質，我們假設
broadcasting 樹的樹根為 r0…0。 
Phase 1. 令 0r0…0 及 1r0…0 分別為
r0…0 之左右兒子。再依此例，一
直做下去可以可以得到一棵高度
為 n-1 的 full binary tree。如圖一
所示的就是在 4 維 Dragon graph
上建的這個 full binary tree。 
Phase 2.我們定義了 Dragon graph 上某一
結點 xn xn-1… xk+1 r xk-1 …x2 x1 的
binary sequence 為 
xn xn-1… xk+1 xk-1 …x2 x1 
而對映到同一個 binary sequence的不同
結點 X 及 Y，如果 X 的 r-bit position 在 Y
的 r-bit position 的左方，則我們稱 X 是 Y
的 Senior；或說 Y 是 X 的 Junior。我們觀
察上述的 full binary tree，可以發現在其上
的每一結點，其 Junior 都會在該 tree 中成
圖一.包含完整二元樹到 4 維 Dragon graph. 
r000
0r00
1r00
001r 010r
11r010r0
000r 100r
00r0
111r110r101r011r
01r0
 5
Reference 
[1] F. R. K. Chung, F. T. Leighton and A. L. 
Rosenberg, “Embedding graphs in books: 
a layout problem with applications to 
VLSI design”, SIAM J. Algebraic 
Discrete Meth., 8(1) (1987) 33-58. 
[2] Jywe-Fei Fang, “Dragon Graph: a new 
interconnection network for massively 
computing”, 2004, in proceedings of 
PARA04, 171-175. 
[3] D. F. Hsu, “On container width and 
length in graphs, groups, and networks,” 
IEICE Transactions on Fundamentals of 
Electronics, Communications and 
Computer Science, E77-A (1994) 
668-680.  
[4] F. T. Leighton, Introduction to Parallel 
Algorithms and Architectures: 
Arrays,Trees, Hypercubes, Mogran 
Kaufmann. California, 1992. 
[5] F. P. Preparata and J.Vuillemin: “The 
cube-connected cycles: a versatile 
network for parallel computation,” 
Communications of the ACM 24(5) (1981) 
300-309. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Architecture， Networks I， Networks II ， Network Security I， Network Security 
II ， Sensor Networks and Others 。第二天(7/30)上午 9 點到 10 點由來自美國賓州州立
大學的 Chita Das 發表主題演說  “Exploring NoC Design Space for Multicore 
Architectures”。主要是在介紹使用所謂 NoC 的設計法於多核心的計算機結構上所遭遇
的問題及解決方法。 從 10 點 30 分起大會進入正式議程；第二天的論文發表共分 6 個
sessions 分別是： Distributed Computing and Software Testing， Storage I， Storage II，
Architecture and Storage (Short papers)，  Networks (Short papers)，  Storages (Short 
papers)。兩天的正式議程與會學者分別就不同主題發表、討論並廣泛地交換意見。第
三天(7/31)大會安排酒會及當地旅遊，本人因為公務在身，必須儘快趕回台灣處理，於
是就沒有參與了。 
 
二、與會心得 
參加此次的國際會議，收獲良多。除了吸收新知增廣見聞外，還能當面與眾多研究
學者交換意見。當場可以看到許多學者專心的聽講，努力發問參與討論，可以看到眾
人對這些做研究的執著與企圖心了。 所以此次參加會議，除了吸收新知外，也更激勵
了我要更加努力做研究的信念。 
 
三、考察參觀活動(無是項活動者省略) 
(無) 
 
四、建議 
本人認為宜多鼓勵國內學者專家積極參與國際會議，加速新知的交流，增廣國際見
聞。另外在與會過程中，以下幾點可做為國內辦大型會議之參考：1、介紹適當的住宿
The bi-panconnectivity of the hypercube 
 
 
Jywe-Fei Fang1, Chien-Hung Huang2*, Ko-Lin Lin1, Chen-Hsiang Liao1 and Shr-Cheng Feng1 
 
1Department of Digital Content and Technology,  
National Taichung University, Taichung, Taiwan 
 
2Department of Computer Science and Information Engineering,  
National Formosa University, Yun-Lin, Taiwan 
* corresponding author: chhuang@sunws.nfu.edu.tw 
 
Abstract 
 
A bipartite graph is bi-panconnected if an arbitrary 
pair of vertices x, y are connected by the bi-
panconnected paths that include a path of each length 
s satisfying N-1 ≥ s ≥ dist(x, y) and s-dist(x, y) is even, 
where N is the number of vertices, and dist(x, y) 
denotes the shortest distance between x and y. Li et al. 
[Information Processing Letters 87 (2003) 107-110] 
have shown that the hypercube is bi-panconnected. 
However, a definite algorithm to generate such paths is 
still absent. In this paper, we present algorithms to 
generate the bi-panconnected paths joining an 
arbitrary pair of vertices in the hypercube. 
 
Keywords: Interconnection networks, algorithms. 
 
1. Introduction 
 
In massively parallel MIMD systems, the 
interconnection network plays a crucial role in issues 
such as communication performance, hardware costs, 
potentialities for efficient algorithms and fault tolerant 
capabilities [13]. An interconnection network is usually 
represented by a graph where the vertices represent the 
nodes and the edges represent the links.  
Various interconnection networks are proposed, 
thus the portability of algorithms across these 
interconnection networks demonstrates considerable 
importance. That a host interconnection network can 
embed another guest interconnection network implies 
that the algorithms on the guest can be simulated on the 
host systematically. Paths and cycles are popular 
interconnection networks owing to their low number of 
edges. Moreover, many parallel algorithms have been 
devised on them. Many literatures have addressed how 
to embed cycles and paths into various interconnection 
networks [3, 6, 9, 14].  
A graph is Hamiltonian if it embeds a Hamiltonian 
cycle that contains each vertex exactly once [8]. A 
graph is Hamiltonian-connected if there is a 
Hamiltonian path between each pair of vertices [14]. A 
graph is pancyclic if it embeds cycles of every length 
ranging from 3 to N, where N is the size of the graph. 
The concept of the pancyclicity has been extended to 
the vertex-pancyclicity and the edge-pancyclicity [1, 
10]. A graph is vertex-pancyclic (edge-pancyclic) if 
each vertex (edge) lies on a cycle of every length 
ranging from 3 to N. A graph G is panconnected if 
every two distinct vertices x, y of G are joined by a 
path of every length ranging from the shortest distance 
between x and y to N-1 [7]. The bi-panconnectivity is a 
restriction of the concept of panconnectivity to bipartite 
graphs [15]. A graph G is bipartite if V(G) can be 
partitioned into two vertex subsets V1 and V2 such that 
each edge of G joins one vertex in V1 and the other in 
V2. Clearly, if x and y reside in the same vertex subset 
of a bipartite graph, there exists no path of an odd 
length joining x and y. On the other hand, if x and y 
reside in distinct subsets, there exists no path of an 
even length joining x and y. Thus, a bipartite graph is 
said to be bi-panconnected if there exists a path of 
length s joining an arbitrary pair of vertices x and y for 
each dist(x, y) ≤ s ≤ N-1 and s-dist(x, y) is even, where 
dist(x, y) is the distance between x and y. Theses paths 
are called bi-panconnected paths.  
The hypercube is an attractive interconnection 
network in both theoretical interests and practical 
systems. It gains many nice properties, such as high 
degree of regularity, symmetry, fault tolerance, simple 
routing and broadcasting [13]. Many mathematicians 
also regard it as an interesting graph and investigate its 
mathematical issues [5, 12]. On the other hand, many 
1-4244-0328-6/06/$20.00 ©2006 IEEE. 
un un-1…u2 u1 to vn vn-1…v2 v1, where α | β is denoted for 
the concatenation of α and β. It is easy to see that the 
mapping is an automorphism on the H(n); and the H(n) 
is vertex transitive. For each permutation π on {1, 2, …, 
n}, we can relabel each vertex wn wn-1…w2 w1 of the 
H(n) as wπ(n) wπ(n-1)…wπ(2) wπ(1). Clearly, the mapping is 
an automorphism on the H(n). Combining the fact that 
the H(n) is vertex transitive, we know that the H(n) is 
also edge transitive. 
A binary Gray code of length n is an ordered 
sequence of 2n n-bit code words.  It is a permutation 
from 0 to 2n-1 such that successive code words differ 
by exactly one bit. A reflected Gray code with length n, 
denoted by RG(n), and the rth codeword in the 
reflected Gray code, denoted by g(n, r) are defined as 
follows [4]: 
                 RG(1) = {0,1} 
and let      RG(k) = {g(k, 0), g(k, 1), …, g(k, 2k-1)} 
then       RG(k+1) = {0g(k, 0), 0g(k, 1), …,      
0g(k, 2k-1), 1g(k, 2k-1), …, 1g(k, 1), 1g(k, 0)} 
For example, a RG(2) = {00, 01, 11 ,10} and a 
RG(3) = {000, 001, 011, 010, 110, 111, 101, 100}. A 
RG(n) can be represented by its transition sequence 
which is the ordered list of the bit positions that change 
as it proceeds from one codeword to the nest one. For 
example, a RG(3) can be represented by (1, 2, 1, 3, 1, 2, 
1). We also use the transition sequence to represent a 
path in the H(n). 
 
3. The results 
 
In this section, we study the bi-panconnectivity of 
the hypercube by the algorithmic approach. To 
investigate the bi-panconnectivity of a hypercube, the 
discussion about how to embed a ladder into the 
hypercube with expansion 1 is required.  
Lemma 1. An L(s) is embedded into an H(n), where s 
= 2n-1-1. 
Proof. We map each vertex (0, i) of the L(s) to the 
vertex g(n-1, i)0 of the H(n); and each vertex (1, i) of 
the L(s) to the vertex g(n-1, i)1 of the H(n), where 0 ≤ i 
≤ 2n-1-1. By the definition of the Gray codes, g(n-1, i)0 
and g(n-1, i+1)0 is connected; and g(n-1, i)1 and g(n-1, 
i+1)1 is also connected. Moreover, g(n-1, i)0 and g(n-1, 
i)1 is connected.                         Q. E. D. 
Because the H(n) is edge transitive, we know 
Corollary 2. An L(s) is embedded into the H(n) by an 
arbitrary edge of the H(n) as the bottom rung of the 
ladder, where s = 2n-1-1. 
First, we consider two vertices x and y of the H(n), 
where |x ⊕ y| = 2a+1. In this paper, the string λC 
represents the C consecutive λ’s. Without loss of 
generality, we assume x = 0n and y = 0n-2a-112a+1. 
Clearly, a path (U0 = x, U1, …, U2a+1 = y) can be 
derived by the transition sequence (1, 2a+1, 2, 2a,…, 
a+1, a). The H(n) can be decomposed into the subcube 
(*)n-2a-10(*)2a that contains the edge (U0, U1), the 
subcube       (*)n-2a-110(*)2a-1 that contains the edge 
(U2, U3), the subcube (*)n-2a-1110(*)2a-2 that contains 
the edge (U4, U5), …, the subcube (*)n-2a-1(1)a-10(*)a+1 
that contains the edge (U2a-2, U2a-1) and the subcube 
(*)n-2a-1(1)a(*)a+1 that contains the edge (U2a, U2a+1). 
From the Corollary 2, we know that we can embed an 
L(2n-k-2-1) with the edge (U2k, U2k+1) as the bottom rung 
in each corresponding subcube (*)n-2a-1(1)k0(*)2a-k for 
each 0 ≤ k < a, and an L(2n-k-1-1) with the edge (U2k, 
U2k+1) as the bottom rung in the corresponding subcube        
(*)n-2a-1(1)k(*)k+1 for k = a. 
Algorithm A1.  
Input: a, n; 
Output: Generate a ladder L(2n-k-2-1) with the bottom 
rung BT(k) = (0n-2a-11k02a-2k+11k, 0n-2a-11k02a-2k1k+1) in the 
subcube SC(k) = (*)n-2a-1(1)k0(*)2a-k for each 0 ≤ k < a; 
and generate a ladder L(2n-k-1) with the bottom rung 
BT(k) = (0n-2a-11k01k, 0n-2a-112k+1) in the subcube SC(k) = 
(*)n-2a-1(1)k(*)k+1 for k = a. And concatenate the bottom 
rungs BT(k), for each 0 ≤ k ≤ a, by the path starting 
from x = 0n to y = 0n-2a-112a+1 with the transition 
sequence (1, 2a+1, 2, 2a,…, a+1, a). 
Initialization: k = 0 ; 
For (k = 0; k < a; k = k+1)  
    BT(k) = (0n-2a-11k02a-2k+11k, 0n-2a-11k02a-2k1k+1). 
    SC(k) = (*)n-2a-1(1)k0(*)2a-k. 
    Generate a ladder L(2n-k-2-1) as the LD(k) with the 
bottom BT(k) in the subcube SC(k) by the 
reflected gray codes and the symmetric properties 
of the hypercube. 
    If (k ≥ 1) 
     Connect the pair of vertices 0n-2a-11k02a-2k+11k and 
0n-2a-11k-102a-2k+21k. 
    Endif 
  Loop /* for loop */ 
    BT(a) = (0n-2a-11a01a, 0n-2a-112a+1). 
    SC(a) = (*)n-2a-1(1)a(*)a+1 . 
    Generate a ladder LD(a) as L(2n-a-1-1) with the 
bottom BT(a) in the subcube SC(a) by the 
reflected gray codes and the symmetric properties 
of the hypercube. 
    Connect the pair of vertices 0n-2a-11a01a and    
0n-2a-11a−1021a.      /* End of algorithm A1*/ 
For example, let a = 3, n = 9. The subcube SC(0) = 
**0******, and the bottom rung BT(0) = (000000000, 
000000001). Clearly, the BT(0) resides in the SC(0). 
path Pt(j) = (U2j 0, U2j+10). 
Step 4. For j = 2n-2-1, generate the path Pt(j) = (U2j 0, 
U2j+10, U2j+11). 
Step 5. Concatenating the Pt(0), Pt(1), …, Pt(2n-1-1), a 
path joining 0n and 0n-2a12a with length 2m can be 
generated.                /* End of algorithm A3 */ 
For example, let a = 4, n = 10. We explain how to 
use the algorithm A3 to join the pair of vertices x = 
0000000000 and y = 0011111111 in the H(10) with 
length 156 and 680, respectively. Because 156 < 29, 
case 1 is applied. By the step 1, we use the algorithm 
A2 to generate a path (U0* = 000000000*, U1*, U2*, …, 
U155* = 001111111*) in the OG(H(10))(i.e., an H(9)). 
The path (U00, U10, …, U155 0, U155 1) can be derived 
for joining 0000000000 and 0011111111 with length 
156.  
Because 680 ≥ 29, case 2 is applied and m = 340 
here. By the step 1, we use the algorithm A2 to generate 
the path (U0* = 000000000*, U1*, U2*, …, U511* = 
001111111*) in the OG(H(10))(i.e., an H(9)). By the 
step 2, for each 0 ≤ j < m-2n-2 = 340-256 = 84, generate 
the path Pt(j) = (U2j 0, U2j 1, U2j+11, U2j+1 0). By the 
step 3, for each 84 ≤ j ≤ 2n-2-2 = 254, generate the path 
Pt(j) = (U2j 0, U2j+10). By the step 4, for j = 2n-2-1, 
generate the path Pt(j) = (U2j 0, U2j+10, U2j+11). Thus, 
the total length of the path that concatenates Pt(0), 
Pt(1), …, Pt(82) and Pt(83) is 3×84+83= 335. The 
total length of the path that concatenates Pt(84), 
Pt(85), …, Pt(253) and Pt(254) is 171+170= 341. 
Clearly, the length of Pt(255) = (U5100, U5111, U5111) is 
2. Thus, the total length of the path that concatenates 
Pt(0), Pt(1), …, Pt(253), Pt(254) and Pt(255) is 
335+341+2+2 = 680. 
 
4. Conclusions 
 
In this paper, we present algorithms to generate the 
bi-panconnected paths joining an arbitrary pair of 
vertices in the hypercube. The work will help the 
engineers to develop corresponding application on the 
multiprocessor systems that employ the hypercube as 
the interconnection network. It will also help a further 
investigation on the hypercube. For example, to find a 
fault tolerant algorithm to generate the bi-panconnected 
paths on the hypercube appears interesting. 
 
Reference 
 
[1] B. Alspach, D. Hare, Edge-pancyclic block-
intersection graphs, Discrete Math. 97 (1–3) (1991) 
17–24. 
[2] Ametek Corporation, Ametek Series 2010 
Brochures. 
[3] A. Auletta, A. Rescigno, V. Scarano, Embedding 
graphs onto the supercube, IEEE Trans. Comput. 
44 (4) (1995) 593-597.  
[4] J. R. Bitner, G. E. Ehrlich and M. Reingold, 
Efficient generation of the binary reflected Gray 
code and its applications, Comm. ACM, 
19(9)(1976) 517-521. 
[5] L. S. Chandran and T. Kavitha, The treewidth and 
pathwidth of hypercubes, Discrete Mathematics 
306(3) (2006) 359-365. 
[6] H.Y. Chang, R.J. Chen, Embedding cycles in IEH 
graphs, Inform. Process. Lett. 64 (1997) 23-27. 
[7] J. M. Chang, J. S.Yang, J. S. Yang, Y. L. Wang and 
Y. Cheng, Panconnectivity, Fault-Tolerant 
Hamiltonicity and Hamiltonian-Connectivity in 
Alternating Group Graphs, Networks 44 (4) (2004) 
302-310. 
[8] G. Chartrand and O. R. Oellermann, Applied and 
Algorithmic Graph Theory, McGraw-Hill, New 
York, (1993). 
[9] J.-F. Fang, J.-Y. Hsiao, C.-Y. Tang, "Embedding 
cycles and meshes onto incomplete hypercubes," 
International Journal of Computer Mathematics 
75(1) (2000) 1-19. 
[10] A. Hobbs, The square of a block is vertex 
pancyclic, J. Combin. Theory Ser. B, 20 (1) (1976) 
1-4. 
[11] Intel Corporation, The iPSC Data Sheet, 
Beaverton, Ore., (1985). 
[12] M. Kobeissi and M. Mollard, Disjoint cycles and 
spanning graphs of hypercubes, Discrete 
Mathematics 288(1-3) (2004) 73-87. 
[13] F. T. Leighton, Introduction to Parallel Algorithms 
and Architectures: Arrays, Trees, Hypercubes, 
Mogran Kaufmann, California (1992). 
[14] T. K. Li, J. J. M. Tan, L. H. Hsu, Hyper 
hamiltonian laceability on edge fault star graph, 
Information Sciences 165 (1-2) (2004) 59-71. 
[15] T. K. Li, C. H. Tsai, J. J. M. Tan and L. H. Hsu, 
Bipanconnectivity and edge-fault-tolerant 
bipancyclicity of hypercubes, Information 
Processing Letters 87 (2003) 107-110. 
[16] NCUBE Corporation, NCUBE Handbook, 
Beaverton, Ore., (1986). 
[17] C.L. Seitz, The cosmic cube, Comm. ACM, 28(1) 
(1985) 22-33. 
[18] L.W. Tucker and G.G. Robertson, Architecture 
and applications of the connection machine, 
Computer 21(8) (1988) 26-38. 
 
 
