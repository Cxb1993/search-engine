 
結合 P2P 技術於網際網路多媒體串流伺服器設計與雛形系統開發 
(Design and Implementation of P2P-Assisted Internet Streaming Services) 
 
 
計畫類別：■ 個別型計畫  □ 整合型計畫 
計畫編號：NSC 97－2221－E－019－018－ 
執行期間： 97 年 8 月 1 日至 98 年 7 月 31 日 
 
計畫主持人：葉春超 
計畫參與人員： 林哲賢，陳熾宏 
執行單位：國立台灣海洋大學 資訊工程系 
 
 
一、 中英文摘要 
在網路技術不斷的提升，而網際網路相關業者（如 ISP 或 content provider）的競爭日益增加
的當前環境中，如何提供嶄新的服務以留住現有顧客群或甚至吸引新的客戶族群，是目前各業者面
臨的共同課題。因此，利用網際網路提供影音服務一起被視為未來業者一個競爭的核心項目。這一
兩年，隨著 SKYPE（提供網際網路 VoIP 服務）與 YouTube(提供網際網路影音分享服務)的成功（兩
者皆被以驚人的高價收購），更讓人猜測是否這意味網際網路影音服務的時代即將展開。同時，這
也加速業者對於網際網路寬頻基礎建設的餔設。而 content provider 更是小心翼翼的注意這個發
展。這樣一個環境因素下，也刺激學術界在此議題上的研究。其中以嶄新的 P2P 技術運用於網際網
路影音串流服務的研究為近年來熱門的研究議題。 
本計畫亦著眼於如何有效將 P2P 技術導入網際網路影音串流服務中，以期在相同系統架構下，
提高系統效能。透過本計畫執行，我們設計與實做一個以 BT(BitTorrent)協定為基礎的 P2P 影音串
流系統，BTSS（BitTorrent-like Streaming System）。BT 是目前最受歡迎的 P2P 檔案分享軟體之
一，其周邊系統的支援（如檔案發表與搜尋機制）也相當成熟與豐富。然而 BT 並不支援即時影音
串流服務，因此這也是我們設計的重點。BTSS 除了支援頻道廣播模式（channel broadcasting）也
支援隨選視迅服務（Video-on-demand）。同時針對 BT 隨機資料片段下載的機制，BTSS 提供跳躍式
快轉功能（jump forward/backward），使目前下載資料片段的利用最佳化。 
 
關鍵字：對等網路，網際網路電視，影音串流，隨選視訊 
 
Big success stories of internet streaming services, such as YouTube, have been inspiring 
internet researchers and service providers toward more advance internet streaming services such 
as IPTV. Meanwhile, new internet streaming technologies are proposed, designed, and developed. 
Among many others, peer-to-peer (P2P) streaming is one of those being highly interested. P2P 
have been shown to be a viable technology to share server loading effectively. However, highly 
dynamics of internet traffics and churn of peer behaviors endanger the stability of streaming 
BTSS: Design and Implementation of a
P2P-Assisted Multimedia Streaming System based
on BitTorrent Framework
Chun-Chao Yeh
1
, Jhe-Sian Lin
2
, Yi-Ming Shen
3
Computer Science, National Taiwan Ocean University
Keelung, Taiwan
{ccyeh 1,m95570034 2,m93570023 3}@mail.ntou.edu.tw
AbstractP2P(Peer-to-Peer) techniques enable distributed
computing such that individual nodes play symmetric roles as
both of clients and servers. Consequently, P2P can reduce server
loading by utilizing resources of not only main servers but also
all participating client nodes. In this paper, we present our
design and implementation of a streaming system called BTSS
(BitTorrent-like Streaming System). BTSS was built based on
BitTorrent framework, a popular P2P le sharing package. One
of main benets to use BitTorrent modules as building blocks is
wide installation base of BitTorrent (and its variants). Moreover,
the unique features of the BitTorrent protocol have been shown
to be effective for data dissemination between peers. In BTSS,
we reused most of BitTorrent unique features. Extra efforts
were made to modied the original BitTorrent protocol stack
to support real-time peer data exchange and packet scheduling.
BTSS supports both video-on-demand and channel broadcasting
services. Meanwhile, BTSS provides jump forward/backward
functionality, to maximize the benets of the downloaded data. A
prototype system of BTSS was built to demonstrate the feasibility
of our design.
I. INTRODUCTION
Due to advances in video compression technologies and
increasing in network bandwidth (both on backbone and
user access network), internet video services become one of
most popular internet applications. Currently, most popular
web sites providing multimedia services are based on client-
server architecture. Under client-server architecture, when the
number of clients exceeds the limits the servers supposed to
be affordable to handle with, the quality of services becomes
compromised. P2P(Peer-to-Peer) techniques enable distributed
computing such that individual nodes play symmetric roles
as both of clients and servers. Consequently, P2P can reduce
server loading by utilizing resources of not only main servers
but also all participating client nodes. In this paper, we present
our design and implementation of a streaming system called
BTSS (BitTorrent-like Streaming System). BTSS was built
based on BitTorrent framework, a popular P2P le sharing
package. A le to be shared in BitTorrent is specied by
a torrent le, a short message containing meta information
to describe the le for download. Usually, torrent les are
hosted by some popular web sites, where BitTorrent users can
publish/lookup les to be shared. For years, BitTorrent and its
variants have been widely used for le sharing in P2P user
society. More user-friendly utilities have been introduced to
help users to fast publish/lookup les through a few clicks.
Meanwhile, the unique features of the BitTorrent protocol,such
as the incentive mechanism based on peer choking and the
fast data dissemination mechanism based on rarest data rst
policy, have been shown to be effective for data dissemination
between peers[1].
BitTorrent was originally designed for le
sharing(download). By nature, it cannot be used for
streaming video/audio programs. In this paper, we try to
extend BitTorrent to be able to support real-time streaming
service. Potential benets are twofold: performance and
large installation bases. First, as aforementioned, the design
of BitTorrent protocol has been shown to be efcient for
P2P le sharing. While there are some different properties
between the two applications (le sharing and streaming),
they share many common operations in data dissemination.
Most of the BitTorrent code are reused with subtle changes
in our prototype system. Second, BitTorrent and its variants
have been widely used in P2P (le sharing) communities. To
some extend, BTSS can be thought as a variant of BitTorrent
software. Our design reserves most of mechanisms specied
in the BitTorrent protocol, including torrent format, torrent
publish mechanisms, communication protocol between peer
and tracker. Consequently, we can take advantages of current
available infrastructure of BitTorrent such as tracker and the
forum/websites setup by BitTorrent society. Meanwhile, form
user behavior viewpoints, users are reluctant to spend their
time to learn how to manipulate a new software unfamiliar
to them. In BTSS, we try to compliment our design to the
BitTorrent Protocol as much as possible. To demonstrate the
feasibility of our design, a prototype system of BTSS has
been built.
The paper is organized as follows. In Section 2, we present
related works on p2p streaming and give a short introduction
on BitTorrent protocol. The proposed BTSS system architec-
ture is presented in Section 3. Detailed description of the real-
time packet delivery scheme is given in Section 4. Then, in
Section 5, we present a prototype system of BTSS. A short
conclusion is given in Section 6.
forward/backward functionality, to maximize the benets of
the downloaded data.
Fig.1 shows architecture of BTSS. It consists of four major
parts: Peer, Tracker, WebSeeder, and WebServer. BTSS-Peer
is the core of BTSS, which is responsible of peer data upload
and download in user side. Detail design of BTSS-Peer is
presented in the later sessions. BTSS-Tracker does the same
job as it dose in the original BitTorrent protocol. BTSS-Tracker
is responsible of peer registration whenever a peer joins the
download hosted by the tracker. It collects peer information,
keeps track of peer activities and statues, and provides active
peer list for peers connected to the tracker. BTSS-WebServer
provides a web access to internet users to view the streaming
programs. Meanwhile, the web server provides an interface
for users to lookup interested programs and a web space for
users to exchange their commends. BTSS-WebSeeder can be
thought as a super-peer provided by the system. To reduce
possible cases that a peer cannot download a data piece in
time, requests can be made or redirected to the super-peer
to download the data.
BTSS-WebServerBTSS-WebSeeder BTSS-Tracker
BTSS-Peer
BTSS-Peer
BTSS-Peer
Tracker Side
Peer Side
BTSS-Peer
Fig. 1. BTSS architecture
B. Design Features
Some design features are important and interested to us to
provide streaming functionalities to BitTorrent.
1) Support Real-time piece data download/upload: Since
BitTorrent is designed for le sharing, it did not embed real-
time concept in the design. For streaming applications, data
should get ready before their playback time. Data miss their
playback time will degrade playback quality and frustrate the
viewers. We modied original BitTorrent packet scheduling
policy, to take the issues of real-time packet delivery into
account.
2) Support channel broadcast and VoD services: In general,
there are two different service paradigms for streaming: chan-
nel broadcast and Video-on-Demand (VoD). A typical example
of channel broadcast is TV broadcast. Channel broadcast
provides single stream for all the viewers, and requires all
the viewers participate the streaming program at a xed time
schedule. Late viewers will miss those contains being playback
before they join. On the other hand, VoD services allow view-
ers to watch a streaming program at any time they like (that
is, on demand). However, VoD services are more bandwidth
consuming. Multiple units of bandwidth might be needed to
reserve for each individual viewers, since the viewers might
watch different programs or same programs but with different
starting watch time. Meanwhile, business models are another
concerns to decide whether a streaming program should be
provided by channel broadcast or VoD. In BTSS, we target
for VoD services. Nonetheless, BTSS can support channel
broadcast as well, to provide maximal exibility for use.
3) Support jump forward and backward playback: Support-
ing smooth fast forward/backward playback is a challenging
task for real-time streaming, especially for P2P streaming.
For a P2P streaming system supporting VoD services like
the P2Cast [11], fast forward/backward changes the group
membership for a peer drastically. While it is possible for
a peer to download the patch data and resume the playback
whenever it changes to a new viewing group, the delay to
wait for patch data download causes a temporary blackout
and thus degrades playback quality. A possible approach is
to preload data required in future playback. Nonetheless, data
preloading costs extra system resources for the data required
currently. How to make a smart preloading is a big design
issue. In BTSS, we use dynamical scheduling polices and
take advantages of random piece download strategies in the
BitTorrent protocol. When the system tends to run out of its
playback buffer, it switches to sequential download strategy
to request data pieces required in the near future; On the other
hands, when the playback buffer is sufcient for next few
time units, it switches to random download strategy used
in the BitTorrent protocol to maximize the effects of data
dissemination. In this stage, some data needed in the future
is downloaded and organized into a serial of playback data
groups. Users are allowed to jump forward to any of these
playback data groups to continue their playback without extra
waiting time.
4) Peer-assisted: In literature, many of previous works
focused on P2P streaming broadcast, but less on VoD ser-
vices. Researchers had demonstrated the effectiveness of P2P
streaming technologies on hot streaming broadcast programs
like 2000 WorldCup[3]. One of key factors of the success story
is the number of peers participating the hot programs are huge,
which make a peer without too much difculty to nd some
other peers to provide the data. Apparently, when the number
of peers joining the same streaming drops to some degrees, it
is getting harder for a peer nding enough peers to provide
required data in time at each moment during playback. This is
particular true for VoD services, for example for the cases of
programs not so popular or the cases of different viewing time
on same programs. Consequently, we argue pure P2P strategies
(that is all the data required by peers are downloaded from
other participating peers only) is practical. In stead, a backup
server is needed to provide necessary peer data in time when
a peer cannot retrieve the data from other peers. The backup
servers can be thought as super peers, who is with powerful
system resources (for example, bandwidth and cpu power) and
can provide all the data required. Backup servers are pre-
_rechoke(){
    for every peer in peerList{
        if this peer interest to me and last got piece time < 30
            add into preferServiceList
    }
sort preferServiceList by EmgRate、Download Rate
count m value
    leave the front m leecher in preferServiceList
    for every peer{
        if in preferServiceList{
            send this peer a UNCHOKED message
        }
        else{
            send this peer a CHOKED message
        }
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
Fig. 3. The rechoke algorithm in BTSS (for Leecher peer)
Fig. 4. BTSS main page
V. BTSS PROTOTYPE
A prototype system has been built based on BitTorrent
source code (version 4.0.4). A user connects to a BTSS-
webServer to open BTSS main page as shown in Fig. 4. Users
can download the required software: the BTSS-peer package
and the Python package, from the URL links on the left up
corner of the main page. After proper installation of the BTSS-
peer software, users can choose programs on the list to watch.
When a user selects a program to watch, a media player will
be invoked to playback the program streams. Fig. 5 displays
a snapshot of the playback window and the control panel.
A bar on the bottom of the control panel shows the buffer
status. Data having been downloaded and ready for playback
are marks with green color. For example, the case shown in
Fig. 5 indicates that there are two playback segments available.
The rst segment consists of data for playback from 0 sec to
314 sec; the other consists of data for playback from 325
sec to 360 sec. The cursor on the top of the buffer status
bar shows current playback time. Users can move the cursor
forward/backward to seek a program clip. Currently, we allow
users to move the cursor to a downloaded segment only to
prevent possible waiting time for downloading the specied
data segment.
Fig. 5. A snapshot of the BTSS playback window and the control panel
VI. CONCLUSIONS
In this paper, we present our design and implementation of
a streaming system called BTSS (BitTorrent-like Streaming
System). BTSS was built based on BitTorrent framework,
a popular P2P le sharing package. In BTSS, we reused
most of BitTorrent unique features. Extra efforts were made
to modied the original BitTorrent protocol stack to support
real-time peer data exchange and packet scheduling. BTSS
supports both video-on-demand and channel broadcasting ser-
vices. Meanwhile, BTSS provides jump forward/backward
functionality, to maximize the benets of the downloaded data.
A prototype system of BTSS was built to demonstrate the
feasibility of our design.
ACKNOWLEDGMENT
This work was supported by NSC, Taiwan, under the
contracts NSC 96-221-E-019-009, NSC 97-2221-E-019-018.
REFERENCES
[1] A. Legout, G. Urvoy-Keller, and P. Michiardi, Rarest and choke
algorithms are enough, in Proc. ACM Sigcomm06, 2006, pp. 203216.
[2] H. Deshpande, M. Bawa, and H. Garcia-Molina, Streaming live media
over peers, Stanford University, Tech. Rep. 2002-21, Mar. 2002.
[3] Y.-H. Chu, S. G. Rao, and H. Zhang, A case for end system multicast,
in Proc. ACM Sigmetrics00, 2000, pp. 112.
[4] Y.-H. Chu, S. G. Rao, S. Seshan, and H. Zhangi, Enabling conferencing
applications on the internet using an overlay multicast architecture, in
Proc. ACM Sigcomm06, San Diego, CA, Aug. 2001, pp. 5567.
[5] S. Banerjee, B. Bhattacharjee, and C. Kommareddy, Scalable applica-
tion layer multicast, in Proc. ACM Sigcomm02, Pittsburgh, PA, 2002,
pp. 205217.
[6] D. A. Tran, K. A. Hua, and T. T. Do, A peer-to-peer architecture for
media sreaming, IEEE Journal of selected areas in communications,
special issue on advances in service overlay networks, pp. 113, 2003.
[7] V. N. Padmanabhan, H. J. Wang, P. A. Chou, and K. Sripanidkulchai,
Distributing streaming media content using cooperative networking,
in Proc. ACM/IEEE NOSSDAV02, Miami, FL, May 2002, pp. 177186.
[8] V. K. Goyal, Multiple description coding: compression meets the
network, IEEE SIGNAL PROCESSING MAGAZINE, pp. 7493, Sept.
2001.
[9] E. Setton et al., Rate-distortion optimized video peer-to-peer multi-
cast streaming, in Proc. ACM Multimedia Conference, Workshop on
P2PMMS, Singapore, 2005.
[10] R. Rejaie and A. Ortega, Pals: peer-to-peer adaptive layered streaming,
in Proc. ACM/IEEE NOSSDAV03, Monterey, CA, June 2003, pp. 153
161.
[11] Y. Guo, K. Suh, J. Kurose, and D. Towsley, P2cast: peer-to-peer
patching scheme for vod service, in WWW '03: Proceedings of the
12th international conference on World Wide Web. New York, NY,
USA: ACM, 2003, pp. 301309.
[12] B. Cohen. (2009) Bittorrent protocol. [Online]. Available:
http://www.bittorrent.org/
   	
   
   	

		   	 		
  	 	 
		
 
   	
 
 	   	 
   	 	
    

 
 		 

	 	 	 

	 	   

      
	    	 

 
	  


	 	  
	  
 

   	 	    


	 
   
     	 
  
	! 
   
     

  
     " 	

	
     	
 

 

 


 	




 
  

  

 		
 

 

 
	
 
 


 


 
 	
  

    
	  
	
 

 
 
 	
 

 
 
	

  
 ! 
 
" 



	
  
 
  	# 
   
 
 
 $ 
"	 
  
 
  #  

%
 &' 	
 
 
    	

 
 	
 

  
 	
 

     
(!  	 
 )     
 
  

	
 

  	   
%    

%
 	
     
 
 
   
%

&' 	
  
  


    

  &' *

    	 

	
   +  
  
 	 
  



     	   
 	



  	
 	  

   	 
  
 	
	  

,

 
 
 
 

    

 &' 	
   
   -
 
 

 


 
  
. -   


 
. -  
 
  
/ 	. !

   
 
    	  	
 
"     

 	
  	 
 (!  	 
 ! 

 
	
  
	 
"  
   
   $ 
"	 

  012 
    	
   


	
 	 
  
   +
  
% 

   
  032  1445 ! 
  

   	 
  166 	
 
  


 
 

 
     %
 	
  


 	
   
 # !  
    	 


*  

  	
   
   %

 
	  
 %
    
  

  
	

 

   

 
  


 
    
  
  
	 
"  
	   
  + 

  
 
	
 7
  

  	
	 
 
  
  
    
	 
	 
  
  
   
 
	
 

  
    

   	
  
 
  
  	
  
 	   

 

8

 

  
 	


 
  
   
  7
    
 
 
  % 

  

 %   



 ,
 9 
 
  

 
   
 
	
	
  
 	
%  
   
   	

 ,
 5 
  

 
   
 	  ,

: 
  
 
 

  
 
   

 

   
 	 ; 
	% 
 
 
,
 <
  

 
      =

=  	
 

	
 
 

 
 

 
 
  



  
	  


   =*
 %
=  


 
 % 
  ,	 
  !

	  14340162 
   0162   
   
 
 
  
	 -

     
 


 
   
    
%   	  

2008 IEEE/IFIP International Conference on Embedded and Ubiquitous Computing
978-0-7695-3492-3/08 $25.00 © 2008 IEEE
DOI 10.1109/EUC.2008.165
344
Authorized licensed use limited to: National Taiwan Ocean University. Downloaded on September 25, 2009 at 05:16 from IEEE Xplore.  Restrictions apply. 
01 2
3 4
n-1
n-3 n-2
0,n-1
1,2
3,4
n-3,n-2
A
0
A
1
A
2
A
3
A
4
A
n-3
A
n-2
A
i
i
i
O
i
L
O
i
R
I
i
L
I
i
R
B
i
i
D
i
Q
i
e
i
0
1 2
3 4
n-1
n-3 n-2
B
1
B
2
B
3
B
4
B
n-3
B
n-2
e
n-3
e
n-2
e
3
e
1
e
n-1
e
4
e
2
e
0
(a) encoding (b) distribution
   	

  	
   	


   	
 
Ai  mn/2 
 

   
 pi
0 < i < n− 1 fm(Ai) = 0mx1
Bi  mk 
 

   
 pi 	
 
  0 < i < n− 1 fm(Bi) = 0mx1
A0  mn 
 

   
 p0  
pn−1 	
 fm(A0) = 0mx1
C  mn 
    ci,j = i  j = 0

 0
ILi (, I
R
i )   
	 
	  
 pi 
 


    
 
 
  	

 	  
OLi (, O
R
i )  
	    
 pi  
 

     
 
  	
  	 
Di  mk   
 
 
   
	 

 pi 	  
  0 < i < n− 1 
 
	
 
  
Qi  m(k − 1)  
  
    

 
 pi 	  
  0 < i < n− 1 
 
	
 
  
ei  m1 
  
  
 pi   

	
 
 pi 0 ≤ i ≤ n− 1 
  	
 
 
  
 
 
	
  i  
 	 

   	

4.1 Assumptions
   	
      
		  	  	 	   

       
     	
   
 
     		  	 	
   
 
   	 
 	  	     
 
  	 	  
 	

 	
     	    
   

	  	 !  	   

  !	  
    !
"  

4.2 Secret encoding and distribution
#  ! 	     " 
	
    	 	   
 	 !$  % &   	 !
	 	   ' 
  
  % ( )  *  	
  +    &    ! !	
     
    

!	 πi,j  
   !    pi 
pj  	    !   
     

 
 !	 R  	   
#  
 	   !  
  

  	   
    

346
Authorized licensed use limited to: National Taiwan Ocean University. Downloaded on September 25, 2009 at 05:16 from IEEE Xplore.  Restrictions apply. 
Algorithm Shared_secret_encoding_distribution
Input:
    System:  p players, m cards
    peer_i : A
i
, B
i
, 
i
    constant matrix: C
Output: secrets  {e
k
|0<=k<n} 
Notations and symbols: Referred to Table 1.
Steps:
1. construct peer group
    (a)  determine the peer id (0, …, p-1)   for each player. Let peer with id k denoted as p
k
.
    (b) if p is odd, set n=p+1; otherwise n=p.  The player with peer id 0 should take additional jobs for peer n 
if p is odd; 
    (c) The n peers form n/2 pairs (n-1, 0), (1, 2), (3, 4), … (n-3, n-2) and organize as n/2 
         layer of graph as shown in Figure 1. 
2. Prepare private secrets
    (a) Each peer k (except peer 0 and n-1) independently determines  two  matrices A
k
 and B
k
          such that f
m
(A
k
)=f
m
(B
k
)=0
mx1
. The two peers, peer 0 and n-1,  determine a common matrix A
0
          such that f
m
(A
0,
)=0
mx1
, and set B
0
=B
n-1
=0
mx1
.
    (b) Each of the two peers (p
i
, p
j
) at same layer determines a common row permutation function 
j
=
i
=
i,j
. 
3.  encode shared secrets: 
     (a) First, each of the two peers at first layer (layer 1) gets a new matrix M=R( 
0
(C+A
0
)).
          Let P(M, n/2)=M
1
|| M
2
, P(M
1
, n/4)=O
L1
|| O
R1
, P(M
2
, n/4)=O
L2
|| O
R2
. Send 
          O
L1
|| O
R2
(O
R1
|| O
L2
) to the left (right) peer in next layer (layer 2).
    (b) for i= 2 to n/2 do :
              each peer k at layer i>1 receives two matrices  I
L
 and I
R
 from its immediate 
              previous layer (layer i-1). And, then generates a new (mxn/2) matrix M= R(
k
([I
L
|| I
R
]+A
k
)). 
              Let P(M, n/4)=O
L
|| O
R
. Send  O
L
(O
R
) to the left (right) peer in next layer (layer i+1), if k is odd; 
              otherwise,  send  O
R
(O
L
) to the left (right) peer in next layer (layer i+1), 
4. distribute shared secrets:
     (a) for  peer k at top layer (layer n/2), set  D
k
= O
L
|| O
R
, where both O
L
 and O
R 
are generated at step 3,
          then generate a new matrix M= R(D
k
+B
k
).  Let P(M, 1)=e
k
|| Q
k
. 
          Send Q
k
 to the peers in the next layer (layer i-1).    
    (b) for i= n/2 down to 2 do: 
              each peer k at layer i>1 receives D
k
 from its immediate previous layer (layer i+1), 
              and then generates  a new matrix M= R(D
k
+B
k
). 
               Let P(M, 1)=e
k
|| Q
k
. Send Q
k
 to the peers in next layer (layer i-1).
    (c) for  peers k at first layer (layer 1), take D
k
=e
k
.
5. make and announce verification message
    (a) each peer k, 0  i< n, associates with parameters (
k
,A
k
,I
L
k
, I
R
k
,O
L
k
,O
R
k
) for shared 
         secret encoding, and parameters (B
k
,D
k
,e
k
,Q
k
) for shared secret distribution.  
    (b) concatenate all the parameters with the peer id and a nonce to form a message: 
          s
k
=k||
k
||A
k
||I
L
k
|| I
R
k
||O
L
k
||O
R
k
||B
k
||D
k
||e
k
||Q
k
||nonce
k
.
    (c) get the hash value h
k
=Hash(s
k
) of the message s
k
.
    (d) send the hash value with peer id and the nonce, that is (h
k
, k, nonce
k
),  to all the peers. 
   	
	
 
 
  
  

348
Authorized licensed use limited to: National Taiwan Ocean University. Downloaded on September 25, 2009 at 05:16 from IEEE Xplore.  Restrictions apply. 
