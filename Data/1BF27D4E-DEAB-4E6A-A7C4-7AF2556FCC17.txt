Adaptive second-order control of transmitter power in
wireless communication systems∗
Chien-Hsien Wu and Ching-An Lin
Abstract
We propose adaptive second-order distributed power control algorithms that aim to achieve
faster convergence of SIR in a wireless network. The algorithms are based on a successive over-
relaxation method for solving linear systems in which the relaxation factor is adaptively adjusted.
One choice of the relaxation factor is based on the idea of a large power adjustment step; the other
is according to the idea of keeping powers in positive levels. We also modify the algorithms so
that they can be implemented in practical systems that allow only binary power control command.
Simulation results show that the proposed algorithms perform better than existing algorithms such
as DCPC, CSOPC, and for the bandwidth constrained case, better than the bang-bang type control.
1 Introduction
Transmitter power control has been considered as an effective means for resource allocation in wire-
less communication systems. In direct-sequence code-division multiple-access (DS-CDMA) systems,
power control is indispensable for achieving the required level of quality of service (QoS), which is
usually measured in terms of the signal-to-interference ratio (SIR). The formulated objective of trans-
mitter power control is then to achieve a target SIR for each user in the network.
Early work on power control focused on balancing the SIR using centralized power control [1],
[3]. Distributed SIR-balancing schemes, which use only local information, were proposed in [2]
and [4] for interference-limited systems. Foschini and Miljanic [7] considered a more general and
realistic model, in which a positive noise power and a respective target SIR for each user were taken
into account. The method is based essentially on the Jacobi iteration for solving linear systems of
equations [5]. Grandhi et al. [8] proposed a distributed constrained power control (DCPC), which
is a modification of [7] to include bounds on transmitter power. Yates [9] proposed a framework for
convergence analysis and design for the general uplink power control.
∗Research sponsored by National Science Council under grant NSC 95-2221-E009-097
1
The goal of power control is to maintain a target SIR threshold for each user by adjusting the trans-
mitter power pi. That is, to achieve
γi = γ
t
i , i = 1, 2, · · · , K, (2.3)
where γti is the target SIR for user i. If there are pi ≥ 0, i = 1, · · · , K such that (2.3) holds, the
power control problem is said to be feasible, otherwise it is infeasible.
To analyze the problem, we define the normalized link gain hij = γtigij/gii for j 6= i and the
normalized noise power νi = γtiui/gii, and rewrite (2.3) as
pi =
∑
j 6=i
hijpj + νi. (2.4)
In matrix form, (2.4) becomes
p = Hp+ v (2.5)
where p = [p1 p2 · · · pK ]T ∈ RK , v = [ν1 ν2 · · · νK ]T ∈ RK , and H ∈ RK×K is a nonnegative
matrix with zero diagonal entries and ijth entry hij for i 6= j. We assume that the problem is feasible.
That is there is a nonnegative power vector p∗ ≥ 0 that satisfies (2.5).
One way to solve (2.5) iteratively is to use the Jacobi iteration [5, p.353]
p(n+ 1) = Hp(n) + v. (2.6)
The iteration (2.6) in its present form however can not be implemented in practice, since to compute
p(n + 1) knowledge of the link gain matrix H, the current power p(n), and the noise power v is
required. The distributed power control algorithm proposed by Foschini and Maljanic [7] is basically
an implementation (2.6) so that each user adjusts its power based only on information available locally.
Rewrite (2.6) for user i, we have
pi(n+ 1) =
∑
j 6=i
hijpj(n) + νi = γ
t
i
(∑
j 6=i gijpj(n) + ui
gii
)
.
From this follows the distributed power control (DPC) proposed in [7]
pi(n+ 1) =
γti
γi(n)
pi(n), i = 1, · · · , K. (2.7)
Note the power pi(n + 1) depends only on γi(n), the SIR of user i at the nth instant, and pi(n), both
are available to user i. It is proved in [7] that if the problem is feasible, then the algorithm (2.7)
guarantees convergence of transmitter power and SIR for each user.
3
Note that p1 and p2 have the same dimension as p. It is easy to show that ρ(H) = ρ(H′). Given that
ρ(H) < 1 we have ρ(H′) < 1 also. This ensures a unique solution for the linear system (3.5). By
applying the SOR method to (3.5) with
L′ =
[
0 0
H 0
]
∈ R2K×2K , U′ =
[
0 H
0 0
]
∈ R2K×2K ,
we get the iteration [10]
p(n+ 1) = ω(Hp(n) + v) + (1− ω)p(n− 1). (3.6)
The iteration can be implemented as a distributed algorithm, that is, for user i, the power update
becomes
pi(n+ 1) = ω
γti
γi(n)
pi(n) + (1− ω)pi(n− 1). (3.7)
The iteration (3.7) defines a second-order power control algorithm since to compute pi(n + 1) we
need both pi(n) and pi(n− 1) as well as the SIR γi(n). It should be noted that the optimal relaxation
factor ω∗ for (3.7) is the same as that given in (3.4) because ρ(H) = ρ(H′). However since H is not
available, there is no way of knowing the exact value of ω∗, although we know 1 < ω∗ < 2. Note also
that (3.7) reduces to DPC when ω = 1 and for an arbitrary ω, the convergence of (3.7) may be slower
than that of DPC.
4 Adaptive Second-Order Power Control
The relaxation factor ω in (3.7) plays an important role in the algorithm and should be chosen properly.
Since the optimal relaxation factor ω∗ is unknown and can not be determined from the available local
information, it thus can not be used in (3.7). In this section, we consider a modification of algorithm
(3.7). Instead of using a fixed ω for all users, we allow each user to have an individual ωi(n) which
varies from step to step. Rewrite the second-order power control (SOPC) algorithm (3.7) as
pi(n+ 1) =
γti
γi(n)
pi(n) +4ωi(n)
[
γti
γi(n)
pi(n)− pi(n− 1)
]
(4.1)
where 4ωi(n) = ωi(n)− 1 should be chosen between 0 and 1 for convergence. The first term on the
right hand side of (4.1) is the DPC update, and the second correction term is the weighted difference
between the DPC update and the power of the previous step. The algorithm is completely specified by
the choice of 4ωi(n). If 4ωi(n) = 0, the algorithm reduces to DPC. Note that to the power update
(4.1), we need to add the minimal and maximal power constraint
pmin ≤ pi(n) ≤ pmax, (4.2)
5
b) ri(n) > 1 if and only if (γti − γi(n))((γti/γi(n))pi(n)− pi(n− 1)) < 0.
Proof. (⇐) When γti > γi(n), we have (γti/γi(n))pi(n) > pi(n) and thus (γti/γi(n))pi(n) − pi(n −
1) > pi(n) − pi(n − 1). By the definition of ri(n) in (4.5), we have ri(n) < 1 if (γti/γi(n))pi(n) −
pi(n − 1) > 0 and ri(n) > 1 if (γti/γi(n))pi(n) − pi(n − 1) < 0. Conversely, when γti < γi(n), we
have (γti/γi(n))pi(n) < pi(n) and thus (γti/γi(n))pi(n)−pi(n−1) < pi(n)−pi(n−1). By the same
manner, we have ri(n) < 1 if (γti/γi(n))pi(n) − pi(n − 1) < 0 and ri(n) > 1 if (γti/γi(n))pi(n) −
pi(n− 1) > 0. Therefore, we summarize the above analysis as follows. When
(γti − γi(n))
[
γti
γi(n)
pi(n)− pi(n− 1)
]
> 0
we have ri(n) < 1; when
(γti − γi(n))
[
γti
γi(n)
pi(n)− pi(n− 1)
]
< 0
we have ri(n) > 1.
(⇒) When ri(n) < 1, from (4.5), we have
pi(n)− pi(n− 1)
γti
γi(n)
pi(n)− pi(n− 1)
< 1.
Hence, if (γti/γi(n))pi(n)−pi(n−1) > 0, it follows that (γti/γi(n))pi(n)−pi(n−1) > pi(n)−pi(n−1)
and thus γti > γi(n). If (γti/γi(n))pi(n) − pi(n − 1) < 0, we have (γti/γi(n))pi(n) − pi(n − 1) <
pi(n)− pi(n− 1) and thus γti < γi(n). Therefore, we have
(γti − γi(n))
[
γti
γi(n)
pi(n)− pi(n− 1)
]
> 0
When ri(n) > 1, by the same manner, we get that if (γti/γi(n))pi(n)−pi(n−1) > 0, it follows that
(γti/γi(n))pi(n)−pi(n−1) < pi(n)−pi(n−1) and thus γti < γi(n). If (γti/γi(n))pi(n)−pi(n−1) < 0,
we have (γti/γi(n))pi(n)− pi(n− 1) > pi(n)− pi(n− 1) and thus γti > γi(n). Therefore, we have
(γti − γi(n))
[
γti
γi(n)
pi(n)− pi(n− 1)
]
< 0
To achieve larger power adjustment step, we multiply (γti−γi(n)) on both sides of (4.3) and (4.4).
Then it follows that if (γti − γi(n))((γti/γi(n))pi(n)− pi(n− 1)) > 0, we have to choose 4ωi(n) >
1/an; if (γti−γi(n))((γti/γi(n))pi(n)−pi(n−1)) < 0, we have to choose4ωi(n) < 1/an. Therefore,
by Proposition 4.1, the sequence 4ωi(n) should satisfy i) 4ωi(n) > 1/an for ri(n) < 1 and ii)
4ωi(n) < 1/an for ri(n) > 1. One choice of the relaxation factor is 4ωi(n) = (1/an) [α− ri(n)],
where a > 1, and α = 2 clearly satisfies i) and ii). Substituting 4ωi(n) = (1/an) [α− ri(n)] into
(4.1) to obtain
pi(n+ 1) =
γti
γi(n)
pi(n) +
1
an
[
α
γti
γi(n)
pi(n)− pi(n)− (α− 1)pi(n− 1)
]
(4.6)
7
From a), Ai(n) = γtipi(n)/(γi(n)pi(n − 1)) < 1 implies pi(n − 1) − γtipi(n)/γi(n) > 0; thus from
b), it follows that
4ωi(n) =
(γti/γi(n))pi(n) + δ
pi(n− 1)− (γti/γi(n))pi(n)
(4.10)
for some δ ≥ 0. Substituting (4.10) into (4.1), we have
pi(n+ 1) =
γti
γi(n)
pi(n)−
(
γti
γi(n)
pi(n) + δ
)
=− δ ≤ 0
(⇒) If pi(n+ 1) ≤ 0, from (4.1), it follows that
4ωi(n)
[
pi(n− 1)− γ
t
i
γi(n)
pi(n)
]
≥ γ
t
i
γi(n)
pi(n) (4.11)
Since (γti/γi(n))pi(n) = (γti/gii)ηi(n) = (γti/gii)(
∑
j 6=i gijpj(n) + ui) > 0, the right hand side of
(4.11) is positive. By assumption 4ωi(n) ≥ 0, it follows that pi(n − 1) − (γti/γi(n))pi(n) > 0 and
thus Ai(n) < 1. From (4.11) and (4.9), we have
4ωi(n) ≥
(γti/γi(n))pi(n)
pi(n− 1)− (γti/γi(n))pi(n)
=
Ai(n)
1− Ai(n)
By the choice 4ωi(n) = 1/an in [10], a large 4ωi(n) occurs when n is small. Thus from
Proposition 4.2, the power may update to a negative level in the first few steps. To avoid the negative
power level, we have to choose 4ωi(n) close to 0 if the second correction term in (4.1) is a large
negative value; conversely, if the second correction term is a small negative value, we can choose a
large 4ωi(n). This is the basic idea of the adaptive algorithm that prevents the power update in the
first few steps from being unnecessarily low. From Proposition 4.2, this means that when Ai(n) < 1
or equivalently (γti/γi(n))pi(n)− pi(n− 1) < 0, we must have
4ωi(n) <
Ai(n)
1− Ai(n) (4.12)
so that pi(n+ 1) > 0. To satisfy (4.12), one choice of the relaxation factor is
4ωi(n) = min{1, εAi(n)} (4.13)
where 0 ≤ ε ≤ 1. By the adaptive adjustment in (4.13), the convergence of SIR is faster than
that in [10] during the first few iterations since a) or b) in Proposition 4.2 is avoided. Moreover, if
4ωi(n) = εAi(n), we can substitute (4.13) into (4.1) and get
pi(n+ 1) = (1− ε) γ
t
i
γi(n)
pi(n) + ε
1
pi(n− 1)
(
γti
γi(n)
pi(n)
)2
. (4.14)
9
• For n = 1, 2, 3, · · ·
(i) Measure γi(n). Compute ηi(n) = giipi(n)/γi(n) and Ai(n) = γtipi(n)/(γi(n)pi(n− 1)).
(ii) Set 4ωi(n) =
{
0 , if ηi(n) ≤ ζ
min{1, εAi(n)} , if ηi(n) > ζ
(iii) Compute power
pi(n+1) = min{pmax,max{pmin, (γti/γi(n))pi(n)+4ωi(n)[(γti/γi(n))pi(n)−pi(n−1)]}}.
5 Adaptive Algorithm with Bandwidth Constraint
In practical wireless communication systems, due to bandwidth constraint, only a binary power con-
trol command can be transmitted and accordingly the power level of each user is adjusted by a fixed
amount according to the received binary command. Thus, a simplest power control using the binary
command called “bang-bang” type power control (B-BPC), modified by DCPC, is proposed
pi(n+ 1) = min{pmax,min{pmin,∆i(n)pi(n)}} (5.1)
where
∆i(n) =
{
∆, γi(n) ≤ γti
1
∆
, γi(n) > γ
t
i
(5.2)
Note that from (5.1), the algorithm adjusts power level by a fixed amount according to the comparison
between γti and γi(n). To implement the CSOPC algorithm in practical systems, Jantti and Kim [10]
proposed the modified CSOPC (M-CSOPC) which can be written as
pi(n+ 1) = min{pmax,min{pmin, ω∆i(n)pi(n) + (1− ω)pi(n− 1)}} (5.3)
where ∆i(n) is defined in (5.2). Compared with B-BPC, M-CSOPC includes two more information
to update power, the power of the previous step and the relaxation factor. In the algorithm (5.3), ω is
fixed. It is proposed that ω should be chosen based on the probability distribution of the optimal ω∗;
the ω∗ with the highest probability is chosen as ω in (5.3). This implies that an investigation of the
probability distributions of ρ(H) and ω∗ is necessary, which in general is difficult.
To cope with this problem, we modify the M-CSOPC algorithm by choosing the relaxation factor
adaptively. To discuss this idea, we modify (3.7) replacing ω by ωi(n) and rewrite it as
pi(n+ 1) = [
γti
γi(n)
pi(n)− pi(n− 1)]ωi(n) + pi(n− 1) (5.4)
Dividing both side of (5.4) by pi(n), we have
pi(n+ 1)
pi(n)
= [
γti
γi(n)
− pi(n− 1)
pi(n)
]ωi(n) +
pi(n− 1)
pi(n)
(5.5)
The relaxation factor, for user i, ωi(n) is adjusted based on the following reasoning.
11
• Initialization: Given target SIR γti , initial power pi(0), and ωi(0) = 0, for i = 1, · · · , K. Set ζ
and β.
• For n = 0, measure γi(0) and use the B-BPC algorithm:
pi(n+ 1) = min{pmax,min{pmin,∆i(n)pi(n)}}
• For n = 1, 2, 3, · · ·
(i) Measure γi(n). Compute
ωi(n) = min{1,max{0, ωi(n− 1) + βsgn(γti − γi(n))sgn(pi(n)− pi(n− 1))}}
(ii) Measure ηi(n). ωi(n) =
{
0 , if ηi(n) ≤ ζ
ωi(n) , if ηi(n) > ζ
(iii) Compute power
pi(n+ 1) = min{pmax,min{pmin, ωi(n)∆i(n)pi(n) + (1− ωi(n))pi(n− 1)}}.
6 Simulation Results
In this section, we use some examples to compare the proposed adaptive second-order power control
algorithm in Section 4.2 (denoted as ASOPC) with the algorithm in Section 4.1 (denoted as Algo-
rithm in [12]), the distributed constrained power control (DCPC) algorithm in [8], and the constrained
second-order power control (CSOPC) algorithm in [10]. The DCPC algorithm and CSOPC power
updates are respectively
pi(n+ 1) = min{pmax, max{pmin, γ
t
i
γi(n)
pi(n)}}
and
pi(n+ 1) = min{pmax, max{pmin, (1 + 1
an
)
γti
γi(n)
pi(n)− 1
an
pi(n− 1)}}
In simulations, the target SIR for each user is chosen to be the same fixed value. In each example
we compare the convergence of the SIR, which is measured in terms of the outage probability. The
outage probability at each iteration is defined to be the number ratio of users whose SIR are below a
required SIR, a value slightly lower than the target SIR.
6.1 Example 1
Consider a 3× 3 feasible system with the link gain matrix:
G =

0.6288 0.0834 0.0738
0.0902 0.7826 0.0783
0.0879 0.0759 0.6529
 .
13
0 1 2 3 4 5 6 7 8 9
0
1
2
3
4
5
6
7
8
km
km
Base
Mobile
Figure 6.2: IS-95 system with 19 omni-bases
that the minimum distance between any two base stations is
√
3 km. The link gain is modelled as
gij = sij · d−4ij , where sij has log-normal distribution with E[sij] = 0 and σsij = 8 dB, and dij is the
distance between base i and mobile j. The target SIR γti is set to 8 dB, the required SIR is set to 7 dB,
the maximum power pmax = 1 W, the minimum power pmin = 4 × 10−6 W, and the receiver noise is
taken to be 10−12 W for all mobiles. We consider 11000 independent instances and take the “feasible”
cells in each instance for the computation of the average outage probability. The initial power for each
mobile is randomly chosen from the interval [pmin, 1].
Figure 6.3 shows the the outage probability of ASOPC with ε = 0.5 and ζ = 0.005, CSOPC with
a = 1.5, the algorithm (4.6) with α = 1.5, and DCPC. The choice ζ = 0.005 is based on (4.16) with
β = 3 and g¯ = 3 × 103. The outage probability for the CSOPC algorithm has an initial surge and
remains high for the first six steps. This is because the power level of a significant number of users are
adjusted unnecessarily low. The same situation occurs in the algorithm (4.6), which has high outage
probability in the first five steps due to a large power adjustment step. The ASOPC yields the lowest
outage probability. After the initial surge, outage probability of CSOPC and the algorithm (4.6) drop
rapidly and compare favorably with DCPC. In addition, the outage probability of ASOPC converges
to 1.5 × 10−4, which is regarded as the steady state of outage probability, at the 15th iteration on
average. Both CSOPC and the algorithm (4.6) take 30 iterations on average to reach the steady state
outage probability while DCPC needs more than 30 iterations.
Figure 6.4 shows the outage probability of CSOPC and the algorithm (4.6) with α = 1.2, 1.6, and
15
2. The parameter a = 1.5 in the simulations. It is clear that when α is small (α = 1.2), the outage
probability of the algorithm (4.6) is smaller than that of CSOPC in the transient part (from iteration
1 to 6). However, it approaches 10−4 slowly after the 6th iteration. On the other hand, for large α
(α = 2), although the outage probability approaches 10−4 slightly faster than others, it keeps at a high
outage level (10−1) before the 6th iteration. The algorithm (4.6) with α = 1.6 is a better choice in
this simulation since it has a good performance in the transient part as well as in the steady state part
compared with CSOPC. In this case, for faster convergence in SIR, we suggest α in the range of 1.5
and 2.
0 0.2 0.4 0.6 0.8 1
10−4
10−3
10−2
10−1
100
ε
O
ut
ag
e 
Pr
ob
ab
ilit
y
ζ=0.005
 
 
5th iteration
10th iteratoin
15th iteration
20th iteration
Figure 6.5: Outage probability for different ε and ζ = 0.005
There are two parameters ε and ζ in the ASOPC algorithm, one specifies the relative weighting
between DCPC and second-order updates, the other specifies the condition under which to switch to
DCPC. We consider the effect of these two parameters. Figure 6.5 plots the outage probability for
different ε and a fixed ζ = 0.005. For small ε, the behavior of the algorithm approaches the DCPC
algorithm, and as ε increases, the second-order term is weighted more. For ε too small (ε ' 0)
and ε too large (ε ' 1), the algorithm results in large outage probability, and a reasonable choice is
ε ∈ [0.4, 0.6].
Figure 6.6 plots the outage probability for a fixed ε = 0.5 for different ζ (in logarithm scale). The
algorithm (4.14) switches to DCPC when ηi(n) ≤ ζ . As ζ is large, the iteration switches to DCPC
early and the performance of the algorithm is similar to that of DCPC. When log(ζ) decreases to−1.3
(' 5× 10−2 in linear scale), the outage probability improves. As log(ζ) decreases further, the outage
probability dose not change significantly. This is because the measured interference ηi(n) is larger
17
0 5 10 15 20
10−4
10−3
10−2
10−1
100
iteration
O
ut
ag
e 
Pr
ob
ab
ilit
y
ε=0.5
 
 
CSOPC ([10])
DCPC
ASOPC (ζ=5*10−2)
ASOPC (ζ=5*10−3)
ASOPC (ζ=10−4)
Figure 6.7: Outage probability of 10 users’ case
1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2
0
500
1000
1500
2000
2500
3000
ω*
tim
es
Figure 6.8: histogram of ω∗
19
