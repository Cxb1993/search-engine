以系統晶片核心之分段測試資料壓縮心 
“Segmented Compression Technique for Core Level Testing of SOCs” 
計畫編號：NSC97-2221-E-155-073 
執行期間：97 年 8 月 1 日 至 98 年 7 月 31 日 
主持人：元智大學資訊工程系曾王道教授 
 
中文摘要 
現今電路在測試上所遭遇到的困難包括
測試資料量大，測試時間長，功率消耗高，以
及有限的自動測試設備頻寬。由於有限的通道
及記憶容量和自動測試設備的速度，限制了上
述要求的可行性。測試資料壓縮已成為解決這
些問題的實用方法之一。測試壓縮方法最基本
的想法是將預先計算出的測試資料壓縮成較
小的測試集合並儲存在自動測試設備的記憶
體中。而晶片中的解壓縮電路則用於還原這些
測試資料並將他們應用至受測電路上。藉此，
只有少量的而非大量的測試資料被轉移至受
測電路。此外，由於只有少量的自動測試設備
的頻寬被用於驅動大量的掃瞄鏈，因此，測試
時間也能有效的降低。本計畫提出了一種分段
的測試資料壓縮技術，特別適用於測試系統級
晶片中之核心測試階段。此方法將掃瞄鏈邏輯
上切割成四段，每一段皆由分組後的掃瞄細胞
根據其所屬測試資料中0、1 以及X 的出現頻
率所構成。針對分割後的掃瞄鏈，我們搭配使
用了三種不同的壓縮方法壓縮其測試資料。由
於充分利用這三種壓縮方法各自所擁有之特
性，我們的方法能夠得到出色的效果。 
 
英文摘要 
Testing today’s system-on-chip (SOC) 
circuits is a challenge due to several factors. 
These factors include large volume of test data, 
long test application time, high power 
consumption during test, and limited bandwidth 
of automatic test equipment (ATE). A large 
amount of data must be stored in the ATE and to 
transferred deep into the chip. However, the limit 
channel capacity and memory and speed of ATEs, 
render the above requirements infeasible. This 
poses a serious problem on manufacturing test 
because the cost of automated test equipment 
(ATE) grows significantly with the increase in 
speed, channel capacity, and memory size. Test 
data compression has emerged as a practical 
approach to address this problem. The basic idea 
of the lossless compression methods is to 
compress the precomputed test set into a smaller 
test set stored in the tester memory and an 
on-chip decompression circuit is then used to 
reproduce the test data and apply them to the 
CUT. Instead of transferring the entire test set, a 
smaller amount of compressed data is transferred. 
Additionally, test application time is also 
reduced since a small number of ATE channel 
can be used to drive a large number of internal 
scan chains so as to reduce test application time. 
In this proposal, we plan to develop a 
design-for-test (DFT) technique to help test data 
compression for core level testing of SOCs. We 
logically partitions a scan chain in a core into 
four segments according to the occurrence 
frequencies of 0’s, 1’s and X’s in scan cells. Four 
featured compression techniques are then applied 
on each segment for test sub-vector 
compressions. By integrating these compression 
techniques, outstanding results can be achieved. 
1. Introduction 
Test data compression is a non-intrusive 
method, which condenses test data to a smaller 
size to save the ATE memory. During testing, 
the compressed data is first transferred through 
test channels to SOC, decompressed losslessly 
by the on-chip decoder and then serially scanned 
in the scan chain. The output response, on the 
other hand, can use a lossy compaction technique 
with little impact on fault coverage. Techniques 
for test data compression can essentially be 
outside G0, G1 and GX, containing approximately 
equal number of 1’s and 0’s, will be classified in 
G1/2 and compressed by the technique of optimal 
selective Huffman coding.  
Fig. 1 ~ Fig. 5 show the compression examples 
by the proposed method on a simplified test set. 
Fig.4 shows the simplified test set which 
contains 5 test vectors and each vector has 32 
bits. After the scan chain grouping, four 
segments are formed as shown in Fig. 5. To 
obtain a better compression effect, we make the 
best match between the compression technique 
and the segmented test data considering the 
compression effect. Hence, the technique of 
Frequency-Directed Run-Length (FDR) is 
applied to G0 for its advantage in encoding runs 
of 0’s. Similarly, for G1, the Inverting 
Frequency-Directed Run-Length (IFDR) is 
applied to encode runs of 1’s by adding 
additional inverters at the back of both 
compression and decompression architectures, 
respectively. In other words, the compression 
and decompression for the test data in G0 and G1 
can share the same hardware architectures. 
Consequently, as shown in Fig. 6, the total test 
data volume of G0 and G1 can be reduced from 
80 to 44 bits. For G1/2, as shown in Fig. 5, there 
are five test sub-vectors and each has a length of 
8 bits. We assume that the block size is 4 (b = 4). 
Hence, after performing X’s filling [3], four 
distinctive blocks can be obtained as shown in 
Fig. 7. Also, a Huffman tree is constructed 
according to the distribution of the four blocks. 
In this example, the test data volume of G1/2 can 
be reduced from 40 bits to 19 bits by the 
“Optimal Selective Huffman Coding” technique. 
Another new technique called “Option 
Coding” is introduced for compressing the test 
data in GX. Before compression, the test data in 
GX is sorted in an ascending order according to 
the occurrence frequencies of X’s in each scan 
cell so that most of the specified bits can be 
concentrated to the front of this segment. This 
can help reduce the shift-in time for the test data 
in GX because except the limited number of 
specified bits, most others are X’s. Next, the 
specified bits in GX are encoded using the Option 
Coding technique by the sequence of “prefix bit  
SoutSin 0807060504030201
01100X1X
0X111X11
00101X01
01100X11
00101X01
11XX00XX
00XX00XX
01XX011X
01XX1110
11X001X0
1615141312111009 2423222120191817 3231302928272625
XX01111X
X00110XX
X010001X
10001X1X
001X101X
1000X100
1X01X110
1011X110
000XX1X0
1001XX0X
tv5
tv4
tv3
tv2
tv1
 
Fig. 1 A simplified test set before scan cell grouping. 
 
G0 G1 G1/2 GX
Sout1930120525312308
100000X0
00010X00
01000000
X0100000
0000X000
011111X1
11101X11
10111111
X1011111
1111X111
10100101
01X10101
01011010
0X100110
1001101X
XXXXXXXX
XXXXXXXX
XXXXXXX1
XXXXX101
XXXX000X
2920321527180106 1626070422021121 2803171413240910Sin
tv5
tv4
tv3
tv2
tv1
 
Fig. 2 The test set after scan chain grouping. 
 
1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0
1 1 0 1 1 1 1 1 0 0 1 0 1 0 1 1 1 1 0 1 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1
1 1 0 1 1 1 1 1 0 0 1 0 1 0 1 1 1 1 0 1 0 0
Input data   
stream (40-bits)
Encoded data 
stream (22-bits)
Input data   
stream (40-bits)
Encoded data 
stream (22-bits)
FDR
IFDR
 
Fig. 3 FDR coding of G0 and IFDR coding for G1. 
 
X 1 0 1 1 0 0 1
0 1 1 0 0 1 X 0
0 1 0 1 1 0 1 0
1 0 1 0 1 X 1 0
1 0 1 0 0 1 0 1 
0 1 0 1 1 0 0 1
0 1 1 0 0 1 1 0
0 1 0 1 1 0 1 0
1 0 1 0 1 0 1 0
1 0 1 0 0 1 0 1
G1/2 G1/2 after X filling
1111 0 0 11S3
1100 1 1 02S2
100 1 0 13S1
01 0 1 04S0
CodewordDistinct BlockFrequencySymbol
6
10
S0 S1 S2
4 3
3
0
1
1
0
12
S3
10
Huffman tree
 
Fig. 4 Optimal Selective Huffman Coding for G1/2. 
 
(1 bit), control bits (2 bits) and position bits (the 
bit numbers depending on the length of the 
sub-vector)” in each codeword. The prefix bit 
“1” indicates that there exists at least one 
specified bit in this sub-vector while “0” 
represent that no specified bit at all. 
The first bit in Control Code is used to 
indicate if it needs the flipping operation or not. 
The latter bit indicates the bit value to be flipped. 
The “position” bits indicate the bit position to be 
flipped, starting from the leftmost in binary. The 
encoding strategy is to map each X to the same 
value with the majorities and encode the 
minorities only. In other words, if there are more 
0’s (1’s) than 1’s (0’s) in this sub-vector, then all 
X’s in this test sub-vector are mapped to 0 (1), 
and only 1’s (0’s) are encoded. As shown in Fig. 
5(a), the test sub-vector tv1 has three 0’s and zero  
SHIFT
G0
DATA
WAIT
Gx
CODES
Dec_Done1,Dec_Done2,Dec_Done3/
FSync,OSync,OPSync/
SE,Src1,Src2,Src3/
Dec_en1,Dec_en2,Dec_en3
0,-,-/
0,0,0/
0,00,-,--/
1,0,0
WAIT
G0
CODES
0,-,-/
1,0,0/
0,00,-,--/
1,0,1
1,-,-/
0,0,0/
0,--,-,--/
0,0,0
SHIFT
Gx
DATA
SHIFT
G1
DATA
WAIT
G1/2
CODES
WAIT
G1
CODES
SHIFT
G1/2
DATA
-,-,-/
0,0,0/
1,--,1,01/
0,0,0
1,-,-/
1,0,0/
0,00,-,--/
1,0,0
-,-,1/
0,1,0/
0,01,-,--/
0,1,0
-,1,-/
0,0,0/
0,--,-,--/
0,0,0
-,-,-/
0,0,0/
1,--,-,10/
0,0,0
-,1,-/
1,0,0/
0,00,-,--/
1,0,0
-,0,-/
0,0,0/
0,01,-,--/
0,1,0
1,-,-/
0,0,0/
0,--,-,--/
0,0,0
0,-,-/
0,0,0/
0,00,-,--/
1,0,0
0,-,-/
1,0,0/
0,00,-,--/
1,0,0
-,0,-/
0,1,0/
0,01,-,--/
0,1,0
-,-,-/
0,0,0/
1,--,0,00/
0,0,0
1,-,-/
0,0,1/
1,10,-,--/
0,0,1
-,-,0/
0,0,1/
0,10,-,--/
0,0,1
-,-,1/
0,0,0/
0,--,-,--/
0,0,0
-,-,-/
0,0,0/
1,--,-,11/
0,0,0
-,-,0/
0,0,0/
0,10,-,--/
0,0,1
 
Fig. 7 State diagram of the Decoding Controller. 
 
signal SE (SE=1) to enable the scan chain and 
sets Src2=0 and Src3=00 to load the scan chain 
with data from the FDR decoder. Next the 
controller checks whether the data of G0 charged 
with the first test vector are already shifted into 
the scan chain (Dec_Done1=1) or not 
(Dec_Done1=0). When Dec_Done1=0, the state 
machine returns to the WAIT G0 CODES state 
and waits for the next codeword. If 
Dec_Done1=1, the controller restarts the FDR 
decoder to deal with the codewords of G1. 
Roughly, the decoding process of G1 is almost 
the same with G0, and the differences are Src2=1 
and Src3=01 at the SHIFT G1 DATA state. As the 
data of G1 charged with the first test vector are 
also loaded in the scan chain, the controller sets 
Src1=01 to deliver the codewords of G1/2 to the 
Optimal Selective Huffman decoder and 
proceeds to the WAIT G1/2 CODES state. At this 
state, it activates signal Dec_en2 and the Optimal 
Selective Huffman decoder begins to decode. 
Then the controller checks the signal Dec_Done2. 
While the data of G1/2 charged with the first test 
vector are all decoded (Dec_Done2=1) and 
loaded in the scan chain (Src3=10), the controller 
enters the WAIT GX CODES state and waits for 
the next codeword (Src1=10, Dec_en3=1). 
Similarly the controller checks the signal 
Dec_done3 to determine the state machine at the 
WAIT GX CODES state or at the SHIFT GX 
DATA state. After the data of GX charged with 
the first test vector are loaded in the scan chain  
FSM
OPsync
Dec_en3
prefix
control
reset
Dec_done3 ATE_CLK
Counter
k-to-n
Register
Position code
is_flip
inc
cen_en
to_flip
sel
To Source 
Select MUX
01
 
Fig. 8 Block diagram of the Option Coding decoder. 
 
(SE=1, Src3=11), the entire test vector fulfills the 
scan chain. 
Option Coding decoder consists of a finite 
state machine (FSM), Counter, and k-to-n 
register as shown in Fig. 8. FSM takes data from 
prefix and control bits to find out which mode to 
be entered. The k-to-n register is used in flip 
mode to store the position code of the bit that 
will be flipped. When receiving all bit positions 
of the current sub-test vector, the register 
decodes and stores these indices. MUX has two 
inputs, 0 and 1, which are shifted through FSM 
and selected by sel bit. The Counter is used to 
control flipping the index. To activate and 
increment the counter, the FSM sends signals 
cnt_en and inc respectively. When the counter 
counts up to n (the index), the signal to_flip is set 
to 1. At the same time, sel is set to the reverse. 
Fig. 9 shows the state transition diagram of the 
Option Coding decoder. In the map mode, the  
INITIAL
MAP
100/101, P1 
FLIP
110/111, P2 
110/111, P4 100/101, P3 
0, P0 
 
Term Description 
P0 If the code is 0, the decoder is done. Then the state 
returns to INITIAL. 
P1 If the code is 100/101, only one specified value. The mapping bit is 0/1. 
P2 If the code is 110/111, at least one position needed 
to be flipped. The mapping bit is 0/1. 
P3 Shift the current mapping bit to the scan chain. 
P4 Shift the current mapping bit to the scan chain and flip the selected bit position. 
Fig. 9 State transition diagram and the operations of the 
Option Coding decoder. 
s9234
68
69
70
71
72
73
74
75
76
77
0 5 10 15 20 25
n
C
o
m
p
r
e
s
s
i
o
n
 
R
a
t
e
(
%
)
 
Fig. 11 The effect of parameter n on compression ratio as 
m fixed to 1 for s9234. 
 
with a single scan chain. Note that, to compress 
G1/2, the block size is set to 4 and only 3 most 
frequently occurring blocks is encoded. The 
decoder area overhead is computed as  
Area overhead= 100%
circuitbenchmark  of area
decoder of area
×  
Table 1 shows a comparison of HSM with other 
methods on the decoder area overhead. For the 
proposed HSM method, the size of FDR decoder 
used for both segments G0 and G1 is quite small, 
only nine states, involving four flip-flops and 42 
gates are needed. For segment GX, the Option 
Coding decoder requires an even smaller 
hardware overhead. Only three states are 
required in its FSM. For segment G1/2, although 
the decoder size of Optimal Selective Huffman 
Coding [4] dominates the whole decoder area, a 
further trade-off can be made between the 
compression effect and its decoder size through 
the utilization of encoded distinct blocks because 
the size of the decoder mainly depends on the 
volume of the encoded-distinct-block. Hence, the 
overhead is also within certain limits. Besides, 
existing counters on SoC can be reused for 
decompression, which also gives a limit to the 
overall hardware overhead. In Table 2, we show 
the comparisons on the decoder area overhead 
with 8 previous works. As can be seen in the 10th 
column, the percentages in the decoder area 
overhead by the proposed method decrease from 
27.2% to 4.8% as circuit grows. Especially for 
today’s industrial-size designs, the area cost is 
negligible.  
We analyze the test application time reduction 
for the proposed method referring to the method 
in [6]. Assume the frequency of ATE and SOC 
are fate and fscan (fate ≤  fscan) respectively. The 
test application time reduction (TR) is evaluated 
by 
TR ( ) %100/ ×−= uncompcompuncomp ttt         (2) 
where tuncomp and tcomp are the test application 
times for applying uncompressed and 
compressed test data respectively. The value of 
tuncomp are dominated by ATE’s frequency and 
the total amount of input bits ( DT ) as 
tuncomp = scanDateD fTrfT // =      (3) 
where atescan ffr /= . However, tcomp depends on 
the performance of each segment, i.e., tcomp = 
∑
=
4
1i
it , where ti is the test application time of Gi (i: 
0, 1, 1/2, X). We consider that the evaluation of 
whole test session is in average mode, and the 
amount of codewords of Gi is Ni. As the decoder 
receives 
ii
N
j j avgINI
i
_/
1
=∑
=
 bits from ATE to FSM, 
I_avgi ATE’s and iiNj j avgKNKi _/1 =∑ =  system 
clocks are needed for applying K_avgi bits into 
the scan chain. Hence, ti is calculated by 
( ) iateiscanii NfavgIfavgKt ×+= /_/_    (4) 
Since fscan = rfate, we get 
( ) scanE
i i
comp fTrKNtt /4
1
+==∑
=
     (5) 
where ∑
=
=
4
1i
iNN , NNavgKK
i
ii /)_(
4
1∑ = ×= , and 
=ET  ∑
=
×
4
1
_
i
ii NavgI . Then, we get ( ) ( ) ( )DDE TrKNCRTrTrKNTR //1 −=+−=
     (6) 
Fig. 12 shows the test application time reduction 
(TR) for ISCAS’89 benchmarks with various 
values of r. In terms of the above analyses, TR is 
bounded by CR, and when r increases, TR is 
close to CR. The time reduction based on 
experiments ranges from 30.13% as r = 2 to 
83.6% as r = 12. 
 
20
30
40
50
60
70
80
90
2 4 6 8 10 12
r
TA
T 
R
ed
u
ct
io
n
 
(%
)
s5378 s9234
s13207 s15850
s38417 s38584
 
Fig. 12 TAT reductions with r’s. 
 
