  2 
 
poor if an object moves beyond the search line. Therefore, 
the length of the search line is usually set as a large value, 
such as 32. The larger length of the search line employed, the 
higher output quality achieved, but the more redundant 
computation required because it is useless to utilize a large 
search line for objects with small horizontal motion activity.  
The search line must be reasonably reduced to avoid 
redundant computation. An ideal length of the search line is 
dependent on both the parallelism of MPs and the horizontal 
motion activity of objects. A good candidate for the search 
length is 16 because most of MPs, such as the Equator 
MAPCA [1] and Intel SSE3 [2], can process two sets of 16 
pixels in parallel, and most of the horizontal motion activity 
of objects is limited in this range. Once the search length is 
set as 16, the search window must also be horizontally 
moved to extract the large horizontal motion vectors. Based 
on the above features, we propose an efficient motion 
estimation algorithm, named modified PLS (MPLS), for 
MP-based video codecs in this project.  
The second research topic is focused on advanced 
technologies of video communication. Multicast 
communications [10] is a well-known technique to reduce 
both server load and network bandwidth for video 
communication. In typical multicast, a multicast tree is 
established to connect the data source and the receivers. The 
packets are transmitted from the source node, relayed by the 
intermediate nodes along the multicast tree, and finally 
delivered to the destination nodes. Therefore, when a video 
server delivers a video stream along a multicast tree, the 
receivers in the multicast group can receive the video stream 
simultaneously. This type of service is especially useful for 
delivering live or popular video programs because these 
videos are frequently accessed by many users simultaneously. 
However, this phenomenon on synchronous access rarely 
happens in a VOD service, because the users in such service 
usually issue requests asynchronously (anytime). This 
request behavior makes these users, even for the same video 
program, unable to be satisfied by a multicast stream, thus 
diminishing the benefits of multicast communications.  
To improve the throughput of a multicast stream, many 
researches attempt to increase the number of receivers in the 
multicast group. For example, the batching (or scheduled 
multicast) schemes [11] delay the services of client requests 
which are close in time and then serve them together via a 
multicast channel. However, the requests which issue right 
after a batch service must wait for a long time to start their 
playback services, i.e., they have long initial delays. A long 
initial delay undoubtedly reduces the satisfaction of the user, 
so some periodic broadcasting schemes (e.g., pyramid 
broadcasting [12], permutation-based pyramid broadcasting 
[13], skyscraper broadcasting [14], fast broadcasting [15], 
and harmonic broadcasting [16]) were proposed to not only 
reduce initial delay but also utilize server bandwidth 
efficiently. These schemes partition a video into some 
segments and repeatedly broadcast these segments on 
pre-allocated broadcast (or multicast) channels. Based on the 
algorithm of segmentation, the initial delay of a request can 
be significantly reduced, but it still cannot be eliminated. 
Besides, a client device in these schemes must equip a large 
buffer to store video clips received ahead of their playback 
times. Due to these two drawbacks, the application of 
periodic broadcasting is still limited. In fact, they are 
generally referred as near VOD services.  
To further reduce initial delay, stream tapping [17]/ 
patching [18–20]/SM cache [21] were proposed that the 
system delivers the front part of the video to each request via 
a dedicated partial stream; thus, the client can start its 
playback immediately. In these schemes, each client must 
maintain a cache buffer to bridge the temporal distance 
between its request time and the start time of the multicast 
channel. On the other hand, earthworm and chaining apply 
another client-side caching technique to dynamically extend 
the multicast services at application layer. When a client 
receives a video stream from the video server, it queues the 
video stream in its local buffer space and then forwards the 
stream to the client which issues the next request. Therefore, 
a client can enjoy a true VOD service if the buffer on its 
video source (i.e., the previous client) is sufficiently large to 
bridge the temporal distance between their request times. 
With such cache-and-forward mechanism, the number of 
required multicast channels can be significantly reduced.   
The patching/chaining schemes utilize client-side buffers 
to provide efficient true VOD services. However, client 
devices in these schemes must enable additional 
functionalities, e.g., a large buffer space, a buffer 
management algorithm, and a complex request procedure. 
Unfortunately, these requirements are sometimes unavailable 
in light-weight client devices (e.g., multimedia handsets), 
implying that these clients cannot join patching/chaining 
services. Therefore, developing a new multicast 
infrastructure that allows a multicast stream being accessed 
by many receivers asynchronously could represent a good 
alternative. In such multicast infrastructure, the routing nodes 
should cooperate together to ensure that each client receives 
the multicast stream at its desired time, thus the client can 
begin its playback immediately. This design issue is 
analogous to range multicast (RM), which is an overlay 
multicast designed for supporting efficient VOD services 
recently. In RM, a shared network buffer is further 
partitioned into several equally sized chunks, and each chunk 
is used as a FIFO buffer to cache a particular video stream 
currently passing through the node. Therefore, the routing 
node can be the video sources of subsequent requests, thus 
reducing the server bandwidth. Via the cooperation of these 
FIFO buffers, RM can also support some VCR like 
operations. However, the predetermined buffer size and the 
possible redundancy of cached video clips in RM would limit 
the overall buffer utilization. Thus, developing a novel 
multicast infrastructure that considers both playback 
flexibility and system performance is urgent.  
In this project, we propose a new multicast infrastructure, 
called buffer-assisted on-demand multicast (BAODM), to 
fulfill the design issues mentioned above. To deliver 
multicast data to receivers at their specified times, a timing 
control mechanism is integrated on routing nodes to generate 
appropriate delay via sliding-interval caching as mentioned 
in. Therefore, a routing node can branch time-variant 
outgoing streams from an incoming one. By carefully 
scheduling the departure times of the outgoing streams on 
each routing node, a BAODM tree that fulfills the various 
timing requirements of multiple receivers can be constructed. 
 
三、結果與討論 
 
A. Modified predictive line search  
In this section, we first give the main features of PLS and 
then present the details of the proposed MPLS since MPLS is 
originated from PLS. Fig. 1 shows the coding structure of 
PLS, a kind of predictive BMAs. The initial MV of a block is 
predicted by the medium value of MVs of the three spatially 
adjacent MVs (left, top, and top-right). A search window 
with three lines around the MV predictor is first examined, 
where the length of the search line, denoted as L, is fixed as 
the horizontal size of the search area. If the best matching 
point is located at the center line, the search is stopped; 
  4 
 
resulting in the lower the MSE, the smaller the energy of the 
prediction error, and therefore the more effective the motion 
estimation algorithm is. We utilize the number of lines 
searched per frame to measure the computation required for 
PLS and MPLS. However, they cannot be directly utilized 
because the searched lengths are different between them. The 
number of pixels accessed and processed should be taken 
into account.  
Table 2 summarizes computation–distortion results of 
PLS and MPLS. In general, the required computation is 
lower than that of PLS. About 23.83% computation can be 
saved by MPLS on the average. In addition, the quality 
obtained by MPLS is better than that of PLS for all of test 
sequences since the motion contents with horizontal MV 
larger than the search length of PLS can also be extracted by 
MPLS. Accordingly, MPLS is a good motion estimation 
algorithm on MPs.    
Table 2. Computation–distortion performance of PLS and 
MPLS 
 
 
B. Buffer-assisted on-demand multicast  
In this section, we formally define BAODM service as 
follows: a video source delivers only one video stream, but 
multiple receivers can receive the video stream at their 
expected times. By this definition, typical multicast can be 
considered as a special case of BAODM when all receivers 
access the video stream simultaneously. 
The timing control mechanism is the essential technique of 
BAODM. To let a routing node departure time variant 
outgoing streams from an incoming stream, we apply 
sliding-interval caching on the node to cache a sliding 
interval of the source video stream and then forward the 
stream to different output interfaces at specified times 
according to the demands of receivers. Note that the 
maximum delay time of an outgoing stream is determined by 
both the buffer size of the routing node and the video 
consumption rate. For example, 30MB of cache buffer is 
required to cache one minute of a 4Mbps video stream. To 
simplify the following discussions, we assume that all videos 
in this project are Constant Bit Rate (CBR), and the buffer 
size is normalized to seconds of video data.      
To illustrate the concept of our timing control mechanism, 
let us consider the following example. Let a routing node 
have five seconds of buffer space. On the routing node, three 
clients C1,C2, and C3 issue requests for the same video 
program at times t, t + 3, and t + 5. Figure 4 shows the 
snapshot of the detail data flow at the sixth second. Initially, 
the server generates a video stream for client C1 at time t. 
When the routing node receives the video stream, it 
immediately forwards the stream to C1 and simultaneously 
caches the video data into its FIFO buffer. Because the size 
of the buffer is 5 seconds, the incoming stream can be cached 
for at most 5 s, i.e., the requests issued no later than t+5 can 
be directly served by the routing node. So when clientC2 
issues a request at time t + 3, the routing node forwards the 
cached video data to C2 for its playback, denoting as the 
outgoing stream at time t+3. Similarly, the third request of 
client C3 can also be satisfied by the routing node via the 
outgoing stream at time t + 5. Therefore, only one server 
stream is required for serving C1, C2, and C3 in this case.   
 
Fig. 4. The timing control mechanism on a routing node 
 
Based on sliding-interval caching, a BAODM tree can be 
constructed by carefully coordinating the departure times of 
outgoing streams on the tree nodes. Figure 5 shows an 
illustrative example of constructing a BAODM tree. In this 
example, we assume that the routing node N4 has one minute 
of buffer and others have two minutes. As Fig. 3a illustrates, 
when the first client C1 issues a request at 10:00, the server S 
delivers a video stream to C1 along the path S-N1-C1 with 
no buffering delay. In this case, the routing node N1 operates 
the same as the routers in typical multicast, i.e., N1 forwards 
the incoming packets to C1 immediately.  
 
Fig. 5. An example of constructing a BAODM tree 
 
  6 
 
considerations to the overlay network. In fact, even without 
these extra functionalities, simulation results demonstrate 
that BAODM still works well over non-fully-connected 
physical network topologies. This implies that the 
application-level knowledge, such as the buffer utilization 
here, would dominate the system performance. 
 
z On-line optimal algorithm  
In the off-line algorithm, only the clients in the set D will 
join into the existent BAODM stream, where others will 
initiate new server streams. However, in the on-line version, 
we do not know whether or not the current request is in the 
set D, since the issue times of future requests are 
unpredictable. Therefore, the idea behind BAODM is to find 
out a client request which is not in the set D when necessary. 
We give a greedy algorithm outlined as follows:  
If current buffer resources are sufficient, we greedily 
allocate buffers to satisfy each request. Otherwise, we 
dynamically release the buffer spaces used by the requests 
that are not in the set D and then initiate server streams for 
them to continue their playback services. The released 
buffers are re-allocated for other client requests which are in 
the set D. 
Let F represent the total available buffer space, i.e., F is set 
to B initially. Let ri be the buffer size used for the client 
request Ci, and let Cj be the latest client that requests the 
same video program as Ci. If Ci initiates a new multicast 
stream, we let ri = 0. Otherwise, we let ri be the same as the 
temporal distance between Ci and Cj, i.e., ri = di. Table 1 
shows our on-line algorithm. In the above algorithm, we only 
focus on the size of allocated buffer. Note that some patches 
may be required while joining a request to the multicast 
group (line 2 and line 12), and the total free buffer size F can 
be obtained via flooding a query message. Once the video 
source and the required buffer space are determined, we still 
must construct a routing path that contains sufficient network 
bandwidth and sufficient buffer space for serving Ci. For the 
path selection, we propose a heuristic as follows:  
When finding a routing path for a request to join an 
existent multicast tree (line 2 and line 12), the length of the 
path (i.e., the number of intermediate nodes) should be as 
short as possible to reduce the bandwidth consumption. 
Therefore, the node with the largest available buffer space 
should be selected first (maximum fit). If the buffer space on 
the selected node is less than or equal to the temporal 
distance di, we allocate the entire buffer on this node to 
reduce the probability that the node is rerouted again by 
subsequent requests. This process to find the buffer that 
contains the maximum free space will be iteratively executed 
until the accumulated buffer space along the path is larger 
than or equal to di. Note that if the available buffer space 
along the path is larger than di, some buffer space in the last 
hop (e.g., NL) will not be used. If such condition occurs, we 
choose the node whose available buffer space is the current 
minimum among the candidate nodes (best fit) as the last hop. 
For example, let both Na and Nb can be the last hop, and let 
the free buffer space of Na be larger than Nb. Therefore, Nb 
is selected due to the best fit heuristic.       
Since the proposed routing algorithm of BAODM is 
originally designed for fully-connected overlay networks, we 
construct such an overlay structure over each of these 
physical networks to enable the algorithm. In the default 
setting, we assume that the server supports 50 video 
programs (M=50), whose bit rates are all 1 Mbps. Besides, 
we let the lengths of all videos be 1.5 h (L = 5, 400 s), and let 
the access probability of each video follow a Zipf’s-like 
distribution with a skew factor of θ = 0.7. Since VCR-like 
operations are not the primary design issue of BAODM (but 
still can support), we assume that no VCR-like operations are 
generated in these simulations. The execution time of each 
simulation is 24 h. The term “server bandwidth” is used as 
the measurement, which is defined as the maximum number 
of concurrent streams that the server delivers during the 
simulation time, including both the full streams and the patch 
streams.       
Since network buffers may not be available in some 
network environments, using the buffers on client devices to 
construct a peer-to-peer overlay network for streaming video 
could represent an alternative. BAODM can also employ 
these client buffers to provide an efficient VOD service by 
letting a client node be logically viewed as “a routing node 
with a client associated to it.” However, we must notice that 
the buffer space and the network bandwidth that a client 
shares to others would be quite limited. This phenomenon 
has been named as the “freeriding” problem, which is 
considered as a challenge on peer-to-peer networks.  
Nowadays, various works on peer-to-peer streaming video 
have been proposed. Among these works, the chaining-based 
schemes can support continuous VOD playback services via 
utilizing limited client-side resources. To use these small 
client buffers efficiently, a client in the chaining scheme will 
use its entire buffer space to successively store the video 
stream it is playing. This buffer can be used as the video 
source for the subsequent request if their temporal distance is 
no larger than the buffer size, i.e., the adjacent requests can 
be bridged together thus reducing the required server 
bandwidth. Adaptive chaining is an improved version by 
applying a two-way bridging technique to achieve nearly 
twice the performance of the original chaining scheme. 
Therefore, we compare the performance of BAODM and 
adaptive chaining here.  
The number of routing nodes in the IBM’s global network 
backbone is insufficient to model a peer-to-peer overlay 
network, so we randomly generate a network topology with 
10,000 nodes and 50,000 network links, i.e., each node has 
five neighbors. We let each node represent a client with 
37.5MB of buffer space (b = 5min), and let the bandwidth of 
each link be 4 Mbps (four streams). Let each client averagely 
request a video every three hours, i.e., the system averagely 
has 50% of clients playing videos concurrently. Under such 
configurations, the average request rate λ will be 0.93 
request per second. To enable the proposed routing algorithm 
of BAODM, we construct a fully-connected overlay network 
over the randomly generated network topology. Finally, we 
let other configurations be the same as the default settings 
listed in the beginning of this section. We then modify the 
request rate λ, the buffer size b, and the skew factor θ to 
investigate the corresponding server bandwidths of BAODM 
and adaptive chaining.  
Figure 6 illustrates the simulation results, demonstrating 
that BAODM always outperforms adaptive chaining. These 
figures also exhibit an interesting phenomenon: the server 
bandwidths of BAODM are almost the same in all 
configurations. A similar phenomenon also occurs in adaptive 
chaining when the request rate λ and the buffer size b are 
large. This is because when the request rate is sufficiently 
large, the temporal distances between adjacent requests will 
mostly be small enough to aggregate them together to share 
the video streams in both methods. Therefore, the 
  8 
 
results indicate that MPLS performs better than PLS in terms 
of output quality and requires less computation by up to 23% 
on average. (2) BAODM allows a video stream being 
delivered to multiple receivers at their specified times, thus, 
the restriction on synchronous access in traditional multicast 
communications can be relaxed. BAODM research also 
raises some issues that need to be further studied. We 
are currently studied and interested in (1) routing 
algorithms for various network topologies; and (2) 
integration of BAODM and other streaming methods, 
e.g., integrate batching to further reduce overall 
bandwidth consumption if some initial delays are 
allowed by clients. 
 
五、參考文獻 
[1] C. Basoglu, W. Lee, J. O＇Donnell, The equator 
MAP-CATM DSP: an end-to-end broadband signal 
processorTM VLIW, IEEE Trans. Circuits and Systems 
Video Tech. 12 (8) (August 2002) 646–659. 
[2] V. Lappalainen, T.D. Ha‥  ma‥  la‥  inen, Petri 
Liuha, Overview of research efforts on media ISA 
extensions and their usage in video coding, IEEE Trans. 
Circuits and Systems Video Tech. 12 (8) (August 2002) 
660–670. 
[3] A.R. Iranpour, K. Kuchcinski, Evaluation of SIMD 
Architecture enhancement in embedded processors for 
MPEG-4, Proceedings of the Euromicro Symposium on 
Digital System Design, 2004, pp. 262–269. 
[4] T. Koga, K. Iinuma, A. Iijima, T. Ishiguro, 
Motioncompensated interframe coding for video 
conderencing, Proceedings of NTC81, New Orleans, LA, 
1981, pp. C9.6.1–9.6.5.  
[5] R. Li, B. Zeng, M.L. Liou, A new three-step search 
algorithm for block motion estimation, IEEE Trans. 
Circuits and Systems Video Tech. 4 (August 1994) 
438–442.  
[6] L.M. Po, W.C. Ma, A novel four-step search algorithm 
for fast block motion estimation, IEEE Trans. Circuits 
and Systems Video Tech. 6 (3) (1996) 313–317.  
[7] S. Zhu, K.-K. Ma, A new diamond search algorithm for 
fast block-matching motion estimation, IEEE Trans. 
Image Processing 9 (February 2000) 287–290.  
[8] A.M. Tourapis, O.C. Au, M.L. Liou, Highly efficient 
predictive zonal algorithms for fast block-matching 
motion estimation, IEEE Trans. Circuits and Systems 
Video Tech. 12 (10) (October 2002) 934–947.  
[9] Y.W. Huang, S.Y. Ma, C.F. Shen, L.G. Chen, Predictive 
line search: an efficient motion estimation algorithm for 
MPEG-4 encoding systems on multimedia processors, 
IEEE Trans. Circuits and Systems Video Tech. 13 
(January 2003) 111–117.  
[10] Almeroth, K.C., Ammar, M.H.: The use of multicast 
delivery to provide a scalable and interactive 
video-on-demand service. IEEE J. Selected Areas 
Commun. 14, 1110–1122 (1996)  
[11] Da Fonseca, N.L.S., Facanha, R.D.A.: The 
look-ahead-maximize- batch batching policy. IEEE 
Trans. Multimedia 4, 114– 120 (2002) 
[12] Viswanathan, S., Imielinski, T.: Metropolitan area 
video-ondemand service using pyramid broadcasting. 
Multimedia Syst. 4, 197–208 (1996)  
[13] Aggarwal, C.C.,Wolf, J.L.,Yu, P.S.:A permutation-based 
pyramid broadcasting scheme for video-on-demand 
systems. In: Proceedings of IEEE International 
Conference on Multimedia Computing and Systems, pp. 
118–126 (1996)  
[14] Hua, K.A., Sheu, S.: Skyscraper broadcasting: a new 
broadcasting scheme for metropolitan video-on-demand 
systems. In: Proceedings of ACM SIGCOMM, pp. 
89–100 (1997)  
[15] Juhn, L.-S., Tseng, L.-M.: Fast data broadcasting and 
receiving scheme for popular video service. IEEE Trans. 
Broadcast. 44, 100–105 (1998)  
[16] Juhn, L.-S., Tseng, L.-M.: Harmonic broadcasting for 
video-on-demand service. IEEE Trans. Broadcast. 43, 
268–271 (1997)  
[17] Carter, S., Long, D.: Improving video-on-demand server 
efficiency through stream tapping. In: Proceedings of 
International Conference on Computer Communication 
and Networks, pp. 200–207 (1997)  
[18] Hua, K.A., Cai, Y., Sheu, S.: Patching: a multicast 
technique for true video-on-demand services. In: 
Proceedings of ACM Multimedia, pp. 191–200 (1998)  
[19] Cai, Y., Hua, K.A., Vu, K.: Optimizing patching 
performance. In: Proceedings of IS&T/SPIE Multimedia 
Computing and Networking Conference, pp. 204–215 
(1999)  
[20] Sen, S., Gao, L., Rexford, J., Towsley, D.: Optimal 
patching scheme for efficient multimedia streaming. In: 
Proceedings of IEEE International Conference on 
Multimedia Computing and Systems (1996) 
[21] Ramesh, S., Rhee, I., Guo, K.: Multicast with cache 
(mcache): an adaptive zero-delay video-on-demand 
service. IEEE Trans. Circuits Syst. Video Technol. 11, 
440–456 (2001)    
 2
報告內容應包括下列各項： 
一、參加會議經過 
ICICIC 2007 會議今年是第二屆, 該會議每年召開一次，歷屆會議均有眾多先進國家
之專家學者與會，論文涵蓋理論與實務應用，層面廣泛而多樣。本會議參與人士主要是
中國,日本,台灣人士居多, 且主要是來自技術導向的學校與機構。會議日期為 9 月 4 日至
9月7日, 其間除了論文發表之外也安排了多場的專題演講及討論, 希望能做多元的經驗
分享與交流。這次會議的主席是任職大阪市立大學的 Takashi Toriu 教授, 他主要的研究
也是有關於影片壓縮、偵測的領域。個人之論文發表安排在 9 月 6 日下午 15:20，發表
的論文為 A new Computation-Aware Scheme based on Stopping-Threshold Adaptation 
for Predictive Block Motion Estimations 在該 Section 中最後一個報告, 與數位學者討論
此一技術用於視訊壓縮的可行性, 得到許多寶貴的建議。 
 
二、與會心得 
此次會議內容, 主要是探究影片壓縮以及影片內容的偵測與比對系統之相關技術與
應用, 此國際會議發表之論文主要是發表實務上的應用為主, 至於在學理上的重大創新
較少。參加此次研討會在討論過程中, 除了增強了個人研究的視野及定位外, 亦獲知了
相關專家的研究論點與走勢，收獲良多, 特別是在影片壓縮以及影片內容的偵測與比對
相關應用系統的趨勢, 個人感覺宜將部份的研究精力置於應用系統上之研發, 可朝向產
品開發努力。 
 
三、建議 
 
四、攜回資料名稱及內容 
論文集一本。內容為發表之論文。 
 
五、其他 
 
 
 4
ABP mechanism can be found in [11]. 
In this paper, we present a new block-level 
CA scheme based on a stopping-threshold 
adaptation (STA) mechanism for the 
predictive BMAs. The major advantage of 
this mechanism is that it is very simple. Only 
two storages and four operations per frame 
are necessary for this block-level CA scheme. 
The experimental results show that the 
proposed STA mechanism uniformly achieves 
a higher quality than the original predictive 
MBAs by an amount that is dependent on 
motion activities of sequences. 
The remainder of this paper is organized as 
follows. The main features of the predictive 
BMAs are briefly introduced in Section 2. 
Section 3 describes the proposed STA 
mechanism. Experimental results are given in 
Section 4, and conclusions are drawn in 
Section 5. 
 
2. Predictive BMAs 
 
To estimate motion vectors (MVs) using a 
BMA, an image is first divided into blocks of 
n×n pixels, where n is usually set to 16. For 
simplicity, the blocks resulting from the 
partition of the current frame and the previous 
frame are called the current and the previous 
blocks, respectively. For each current block X, 
the algorithm will find a representative block 
pY  corresponding to it within a search area 
surrounding the block in the previous frame 
with the same spatial position as X. The 
search area usually extends m pixels in both 
the horizontal and vertical directions. The 
MV of X is then defined as the direction from 
the representative block to it. The best 
representative of an input block X is searched 
for by first computing the distortions between 
X and all checking blocks (points) in the 
search area. In this paper, the sum of absolute 
difference (SAD) is used to measure the 
distortion:  
∑∑
= =
−=
n
i
n
j
kk jiYjiXYXSAD
1 1
|),(),(|),( . (1) 
The best representative is the checking 
point pY  associated with the minimum 
distortion, i.e., ),(min kkp YXSADY = . For a 
block size of 16×16, the BMA must compute 
256 subtractions, 256 calculations of the 
absolute value, and 255 additions for each 
checking point when calculating the SAD, 
and the number of checking points required 
for a full search is 225 when search area is 
limited within ±7 pixels. As elsewhere in this 
paper, the computational power is measured 
by checking points. 
Unlike the traditional BMAs where the 
search center is initially started at MV (0,0), 
predictive BMAs basically include two 
phases: the MV prediction phase and the MV 
refinement phase. The MV prediction phase 
selects the best predictor from a set of likely 
MV predictors. In this phase, motion 
estimation would be immediately terminated 
if some early stop conditions are satisfied. 
The MV refinement phase employs 
refinement patterns around the best predictor 
to improve the final quality. The selected 
predictors of predictive BMAs include 3 
spatially adjacent MVs (left, top, top right), 
the median predictor, MV (0,0), and MV of 
the collocated block in the previous frame. 
Predictive BMAs first examine these 
predictors and checks the obtained distortion 
with thresholds updated by an adaptive 
thresholding technique. If the distortion is 
smaller than the specified threshold, 
predictive BMAs immediately terminate and 
output the examined predictor as the final MV. 
Otherwise, the best predictor is used as the 
center of a diamond pattern search in the 
refinement phase. 
 
 6
PMVFAST is accepted and recommended in 
OM3 [13] of MPEG-4. These algorithms are 
applied to three SIF videos (100 frames each 
of football, tennis, and flower garden 
sequences) and one QCIF video (300 frames 
of foreman sequence). To simulate the 
environment of heterogeneous devices, the 
available computing power of the employed 
codec is assumed to range from 1,000 to 
4,000 checking points per frame for the SIF 
videos and from 200 to 1,000 checking points 
per frame for the QCIF video. The block size 
is fixed at 16×16 pixels, and the coded quality 
of motion-compensated videos is measured 
by the peak-to-noise ratio (PSNR).  
We first exhibit the effect of the proposed 
STA mechanism. Figure 1 shows the PSNR 
results with ∆  ranging from 0 to 1024 for 
codecs with various computational powers. In 
general, the PMVFAST with STA CA scheme 
performs better than the original PMVFAST 
( ∆ =0), especially when the computational 
power of a device is smaller than 3,000 and 
800 checking points per frame for the SIF and 
QCIF videos, respectively. The quality 
improved by the proposed CA scheme is in 
the range from 0.3 dB to 2.0 dB. This shows 
the importance of using the CA schemes on 
block motion estimation.  
In this paragraph, we compare the results 
between the ABP mechanism and the STA 
mechanism with ∆ =256. Table 1 gives the 
corresponding PSNR values. Although the 
PSNR values of the STA are lower than those 
of the ABP, the PSNR degradation is limited 
in a range. For the tennis sequence, the 
quality degradation ranges from 0.4% to 6%; 
for the football and foreman sequences, the 
quality degradation is limited to 2%; the 
maximum PSNR reduction is about 8% for 
the flower garden sequence. Accordingly, the 
STA is a good alternative of the block-level 
CA scheme for predictive BMAs. 
 
5. Conclusions 
 
This paper provides a STA mechanism to 
distribute the available computing power of a 
codec with predictive MBAs to frames and 
blocks of video sequences. The major 
advantages of applying the proposed CA 
framework have three: (1) the coding 
structure of codecs with the proposed CA 
mechanism is the same with the original, (2) 
only a little overhead is required, and (3) a 
higher quality can be achieved. Our resulting 
CA mechanism for block motion estimation is 
both simple and efficient. 
 
Acknowledgments 
This work was supported by the National 
Science Council, R.O.C., under grant NSC 
95-2221-E-130-018. 
 
References 
[1]. Information Technology—Generic Coding of 
Audio-Visual Objects Part 2: Visual, ISO/IEC 14 496-2 
(MPEG-4 Video), 1999. 
[2]. Draft ITU-T recommendation and final draft 
international standard of joint video specification 
(ITU-T Rec. H.264/ISO/IEC 14 496-10 AVC,” in Joint 
Video Team (JVT) of ISO/IEC MPEG and ITU-T 
VCEG, JVTG050, 2003. 
[3]. T. Koga, K. Iinuma, A. Hirano, Y. Iijima, and T. 
Ishiguro, “Motion compensated interframe coding for 
video conferencing,” in Proc. Nat. Telecommun. Conf., 
New Orleans, LA, Nov. 29–Dec. 3 1981, pp. 
G5.3.1–5.3.5. 
[4]. R. Li, B. Zeng, and M. L. Liou, “A new three-step 
search algorithm for block motion estimation,” IEEE 
Trans. Circuits Syst. Video Technol., vol. 4, pp. 
438–442, Aug. 1994.  
[5]. L. M. Po and W. C. Ma, “A novel four-step search 
algorithm for fast block motion estimation,” IEEE 
Trans. Circuits Syst. Video Technol., vol. 6, pp. 
313–317, June 1996. 
[6]. L. K. Liu and E. Feig, “A block-based gradient descent 
search algorithm for block motion estimation in video 
coding,” IEEE Trans. Circuits Syst. Video Technol., 
vol. 6, pp. 419–423, Aug. 1996. 
[7]. S. Zhu and K.-K. Ma, “A new diamond search 
algorithm for fast block-matching motion estimation,” 
IEEE Trans. Image Processing, vol. 9, pp. 287 –290, 
Feb. 2000. 
[8]. R. Braspenning, G. D. Haan, C. Hentschel, 
"Complexity scalable motion estimation, " proceedings 
of Visual Communications and Image Processing,  vol. 
4671, pp. 442-453, 2002. 
