Agenda
• Abstract
• Introduction
• PFP Compression technique
• Experimental Results
• Conclusions
計畫內容及目的(2)
• 智財: Intellectual  Property (IP)
• 智財產生器: IP Generator
• 程式壓縮: Code Compression
• 程式解壓縮: Code Decompression
• 精簡指令集計算機: Reduced Instruction
Set Computer (RISC)
• 嵌入式系統: Embedded Systems
計畫內容及目的
(3-2)
壓縮程式以提昇執行速度
由於各種記憶體有其成本與速度的區別，貴的記憶體
速度快，反之便宜記憶體速度慢。階層式記憶體系統
(Hierarchy Memory System)可以用較少的成本達到
較快的速度。近代的計算機系統通常皆有此種階層式
記憶體系統。對於嵌入式系統而言，此階層式記憶體
系統通常含有程式ROM，及一至二層的快取記憶體
(Cache Memory) 。記憶體管理單元(Memory 
Management Unit, MMU)負責將部分的程式區塊(頁
Page)由較慢的程式ROM載入較快的快取記憶體內，當
這些部分的程式區塊已執行完畢或有跳躍指令執行跳
躍至不在快取記憶體時(此時稱為頁失誤Page Fault
或者稱為快取記憶體內不在Cache Missing)，記憶體
管理單元即需將目的程式區塊載入快取記憶體內。此
時中央處理單元必需停止以等待新的程式載入。
計畫內容及目的(3-4)
壓縮程式以提昇執行速度
但是對於第二類解壓縮而言，由於存放在程式ROM及
快取記憶體中的指令都是壓縮後的指令，因此同樣大
的快取記憶體，在此可以存放較多的指令，也因此較
不容易發生Cache Missing。我們稱為其有較大的參
考範圍(Reference Range)。舉例說，如果壓縮比為
30%且快取記憶體為4K，那麼其參考範圍就有13.3K。
另一方面，當發生Cache Missing時，從程式ROM到快
取記憶體的傳輸頻寬(Cache Transfer Bandwidth)也
因此較大。但是相對的，由於指令必需先經過解碼才
能送至中央處理單元，如果解壓縮引擎沒有經過適當
的設計，會因此拖累中央處理單元的速度。我們團隊
在這方面已完成一個無延遲低成本的解壓縮引擎。
計畫內容及目的(5)
圖五、加入一個解碼器監督(Decoder Guard)來
監督是否目前解碼到一個跳躍指令
計畫內容及目的(7)
• For rare instructions, the decompression cost is higher 
than the saving due to compression. This project 
presents a new technique, called partial field-
partitioned compressing so that some rare instructions 
are field-partitioned into smaller parts and then, 
compress these parts in the same field to reduce the 
cost. A software program has been designed to generate 
a Verilog (a Hardware Description Language) description 
of a decompression engine for each compressed ARM 
program. Then, the description is synthesized using 
Design Compiler of the Synopsys Co. The synthesized 
results for several benchmarks show that all cases are 
better than the results of our previous versions. 
計畫內容及目的(8-1)
Fig. 1 Decompression engine architecture Fig. 2 Huffman Decoder for PFP Decompression Engine 
需求規格完成度(估40%)
100%解壓縮引擎智財產生器
100%Huffman壓縮編碼系統
100%壓縮分析系統
需求規格完成度子系統名稱
成果可應用性(1)
成果:
1. Yuan-Long Jeang and Ko-Yen H, “A Pipelined Program Decompression
Engine Generator Based on Partial Field-partitioned (PFP) Compression
Technique for Embedded Systems”, IEEE International Conference on
Intelligent Information Hiding and Multimedia Signal Processing, 
Oct. 15-17, 2010, Darmstadt, Germany.
2. Jer Min Jou, Sih-Sian Wu, Yun-Lung Lee, Cheng Chou and Yuan-Long Jeang,
“New Model-Driven Design and Generation of Multi-Facet Arbiters Part I: 
From the Design Model to the Architecture Model”, IEEE Design Automation
Conference, 2010, June13-18.
3.蔣元隆、胡格嚴，”以精簡指令集微控器為主的嵌入式系統程式壓縮及
解壓縮硬體智財產生器之研製”，優質家庭生活科技之關鍵技術研討會
2009, Nov. 19, 崑山科技大學，台南縣，臺灣。
4. Yuan-Long Jeang and Li-Jhong Wang, “A Fast Browsing System for
JPEG2000”, CVGIP2009, 
5. Yuan-Long Jeang and Ko-Yen Hu, “A Low-Cost and High Performance
Pipelined Code Decompression Engine for ARM-series Processors,”
ICICIC2009, Dec 7 – 9, Kaohsiung, Taiwan
The End!
3. The partial field-partitioned (PFP) method  
3.1 Rule for bypassing a set of instructions 
Given a program with P instructions and the in-
struction length is L. Suppose there is a set S of in-
structions with Ω different patterns and β occur-
rences for each pattern, i.e., the number of instruc-
tions in S is βΩ. Let λw denote the averaged com-
pressing length for this set of instructions. Since a 
memory has its decoder (AND plane) and contents 
(OR plane), the storing cost for the set S is the de-
coding cost ρS plus the contents cost λwβΩ.  In addi-
tion, the decompressor should also have a decoder 
cost λwβΩ and a contents cost LβΩ. If we bypass 
these instructions, then, since each instruction should 
add Q distinguish-bits, the storing cost would be the 
decoding cost ρS’ plus the contents cost LβΩ and QP 
distinguish-bits, where the ρS’ is almost equal to ρS. If 
the following in-equation is satisfied, then bypassing 
these instructions is valuable. 
ρS’ + LβΩ + QP < ρS + λwβΩ + (λw+L) βΩ ----- (1) 
After a rearrangement and delete ρS’ and ρS in each 
side, we obtain 
(QP / (2βΩ)) < λw  ------ (2) 
For example, in a program with 8K (=P) instruc-
tions and the length of each instruction is 32 (=L), 
there are 3K (=Ω) instruction patterns with 1 (=β) 
occurrence each, and suppose λw is 23 and Q is 1. By 
(2), 1.33 < λw, it means that the compressions of 1-
occurrence instructions are invaluable.   
3.2 Further Field-partitioning  
3.2.1 for branch instructions  
By our experiences, most branch instructions are 
rare instructions due to their usually unique target 
address. The percentages in a program are about 
25%~34%. As shown in Fig. 1, an address mapping 
unit (AMU) is used to map each uncompressed tar-
get address (UTA), which is the target address of the 
original corresponding branch instruction and usually 
is appended to the tail of a branch instruction, to a 
corresponding compressed target address (CTA), 
which is the target address of the branch instruction 
in the compressed program. For calling subroutines 
and some nested loops, there is a relatively large 
repetition of some CTAs. Thus, we add one address 
mapping unit (AMU) at the output of the Huffman 
Decoder. A corresponding Huffman Decoder is 
shown in Fig.2. 
The main purpose of the UTA in the original 
branch instruction is used to let the Branch Detector 
in the decompressing engine to issue a signal when a 
branch occurs. Thus, if there is a fixed UTA, which 
is different from all the next addresses of all branch 
instructions, is associated to all branch instructions, 
then when a branch occurs, the Branch Detector can 
also issue a signal. Therefore, using the technique, 
instead of compressing/decompressing each of the 
whole 32-bit of original branch instructions, we only 
compress the most-significant 8 bits (C8bits) that are 
bits of the fields of condition code and op-code for 
branch instructions of ARM processors. After de-
compressing each branch instruction (only the most-
significant 8 bits), we append a fixed 24-bit UTA and 
sent to processor. It can greatly reduce the total cost. 
BD0
Read0
Compressed
Target 
Address 
(CTA)
Br2
BD1/IF1
BD0
Read0
Uncompressed 
Target 
Address
(UTA)
Huffman
Decoder
Fetching
Decoding
Execution
Processor
Next
r2 Inc
BD1
Branch 
Detector
Interrupt 
Detector
NOP 
Interrupt 
flag (IF0)
IF
1
       0
Interrupt Service 
Routine Address
Compressed IF0
RTI
Pop
Push
Stack
RTI
IF
Fixed 24 bits 
UTA for 
Branch Inst.
Address
Mapping
Target2
Target1
Addr
Main 
Program 
Memory
Data
Addr
Even 
Target
Data
Addr
Odd
 Target
Data
Br2/IF0Br2/IF0
Load & Inc
M4
0   1
M3
1     0
Br2/IF0
M2
0          1
M1
0        1
Odd 
Addr
M6
0     1
M5
0     1
Odd 
Addr
To Target1 To Target2
M7
0       1 Br2/IF0
To Next
Load&Inc
T2
Load
T1
 
Fig. 1 Decompression engine architecture 
 
Fig. 2 Huffman Decoder for PFP Decompression Engine 
Ψ’L respectively. We can obtain shorter codes and 
reduce the total cost. Since not all types of codes will 
be appeared in the compressed codes, and according 
to the percentage of each type in the whole program, 
we use Huffman coding principle to decide the num-
ber of distinguish-bits for each type of codes.   
5. Experimental results 
Each generated decompressing engine (in Verilog 
program form) has been implemented using the logic 
synthesizer-- Design Compiler of Synopsys Co. using 
TSMC .18 cell library. The correctness and timing 
for the generated decompressing circuit has been 
verified by simulation using the Xilinx ISE software. 
The cost results for several benchmarks are shown in 
Table 2. The results are all outperform the results in 
[9] and in [10].  
6. Conclusions 
The paper has proved that the PFP compressing 
algorithm can effectively reduce the total cost no 
matter what core compression algorithm is used. The 
most important is that it provides a decompression 
engine without any delay for any kind of branches. 
Shorter field partitioning than 16-bit is not effec-
tive for all benchmarks due to its longer distinguish-
bits.  
7. References 
 
[1] C. H. Lin, Y. Xie, and W. Wolf, “Code Compression 
for VLIW Embedded Systems Using a Self-Generating 
Table,” IEEE Trans. VLSI Systems, vol.15, no.10, 
Oct.2007. 
[2] S.W. Seong and P. Mishra, “Bitmask-Based Code 
Compression for Embedded Systems,” IEEE Trans. CAD 
of Integrated Circuit and Systems, vol. 27, no. 4, Apr. 
2008. 
[3] T. Bonny and J. Henkel, “Efficient Code Compression 
for Embedded Processors,” IEEE Trans. VLSI Systems, 
vol.16, no.12, Dec. 2008. 
[4] H. Lekatsas and W. Wolf, “SAMC: A Code Compres-
sion Algorithm for Embedded Processors,” IEEE Trans. 
on CAD, Vol.18:1689-1701, Dec. 1999. 
[5] Y. Xie, W. Wolf and H. Lekatsas, “Code Decompres-
sion Unit Design for VLIW Embedded Processors,” IEEE 
Trans. VLSI Systems, Vol.15, no.8, Aug. 2007. 
[6] Y. Xie, W. Wolf and H. Lekatsas, “Code Compression 
for VLIW using Variable-to-fixed coding,” Proc. of ISSS, 
2002. 
[7] C. H. Lin, Y. Xie and W. Wolf, “LZW-Based Code 
Compression for VLIW Embedded Systems,” Proc. of 
DATE, 2004. 
[8] Y.L. Jeang, J.W. Hsieh, Y.Z. Lin, “An Efficient code 
Compression/Decompression System Based on Field Parti-
tioning,” Int. Technical Conf. on Circuits/System, Com-
puters and Communications 2005. 
 [9] Y.L. Jeang and Ko-Yen Hu, “A Low-Cost and High 
Performance Pipelined Code Decompression Engine for 
ARM-series Processors,” ICICIC2009, Dec 7 – 9, Kaohsi-
ung, Taiwan. 
 
[10] Y.L. Jeang, Tzuu-shaang Wey, Hung-Yu Wang, 
Ching-Hua Chu, “A New Cycle-Stealing Technique for 
Pipelined Instruction Decompression System for Micro-
processors”, ICICIC2008, June 19, 2008, Dalian, China.
Table 2 Benefit Comparisons in [9] and using PFP for 10 benchmarks   
Bench- 
marks 
A 
(Byte) 
B 
(Byte) 
C 
(mm2) 
D. 
(mm2) 
E 
(mm2) 
Benefit 1 
C-D-E 
(((C-D-E)/C) 
x100%) 
B’ 
(Byte) 
D’. 
(mm2) 
E’. 
(mm2) 
Benefit 2 
C-D’-E’ 
(((C-D’-E’)/C) 
x100%) 
ADPCM 41888 14772 1.61 0.75 0.252 0.608 (37.76%) 22678 0.87 0.091 0.649(40.31%) 
BMR 43282 14792 1.61 0.75 0.245 0.615 (38.20%) 21960 0.82 0.086 0.704(43.72%) 
DCT 73882 25161 2.7 1.24 0.419 1.041 (38.56%) 37306 1.36 0.128 1.212(44.89%) 
DTMF 55811 18936 2.04 0.99 0.311 0.739 (36.23%) 28220 1.03 0.097 0.913 (44.75%) 
FFT 59287 19937 2.165 1.03 0.374 0.761 (35.15%) 30281 1.11 0.115 0.94(43.41%) 
Filters 48930 16865 1.864 0.9 0.294 0.670 (35.94%) 24633 0.94 0.101 0.823(44.15%) 
G.711 47204 15378 1.67 0.77 0.264 0.636 (38.08%) 23795 0.84 0.097 0.733 (43.89%) 
Huffman 59449 19719 2.2 1.03 0.331 0.839 (38.14%) 28925 1.07 0.118 1.012(46%) 
IS51CE 41505 14283 1.55 0.73 0.236 0.584 (37.60%) 21075 0.79 0.084 0.676 (43.61%) 
Math 68008 23000 2.51 1.15 0.373 0.987 (39.32%) 33545 1.24 0.119 1.151(45.85%) 
Average      37.50%    44.06% 
 
Note: A: Original Program Size, B: Compressed Program Size using 32-bit Huffman compression, C: Original Memory Area,  
D: Compressed Memory Area using 32-bit Huffman compression, E: Area of Decompress System using 32-bit Huffman compression, 
B’: Compressed Program Size using PFP, D’: Compressed Memory Area using PFP, E’: Area of Decompress System using PFP, 
 
 
 
國科會補助計畫衍生研發成果推廣資料表
日期 2010年10月29日
國科會補助計畫
研發成果名稱
發明人
(創作人)
技術說明
技術移轉可行性及
預期效益
技術/產品應用範圍
產業別
計畫名稱:
計畫主持人:
計畫編號: 學門領域:
(中文)
(英文)
成果歸屬機構
(中文)
(英文)
以精簡指令集微控器為主的嵌入式系統程式壓縮及解壓縮硬體智財產生器
之研製(嵌入式系統軟體技術開發分項)
蔣元隆
98 -2220-E -168 -001 - 自由軟體暨嵌入式系統
以部分分段式壓縮技術為主之解壓縮硬體智財產生器之研製
A Pipelined Program Decompression Engine Generator Based on Partial
Field-partitioned (PFP) Compression Technique for Embedded Systems
崑山科技大學 蔣元隆,胡格嚴
對於出現次數很少的指令,其壓縮是不敷成本的.因此目前遇到這些指令,大部分
系統採用不壓縮,解壓縮時只是簡單的將其bypass過去.然而,本團隊發現在10個
測試程式中,出現1-4次的指令總數高達58.0913%.如果這麼多的指令都不壓縮,
其壓縮效果將大打折扣.本研究先導出一個估算公式, 如果指令出現次數符合這
個公式, 就將這些指令分段壓縮--分為前16位元及後16位元, 然後這些指令的
所有前16位元再作壓縮,這些指令的所有後16位元亦再作壓縮. 我們發現如此做
的結果壓縮利益由37.50%提昇到44.06%
For rare instructions, the decompression cost is
higher than the saving due to compression. This paper
presents a new technique, called partial field partitioned
compressing so that some rare instructions
are field-partitioned into smaller parts and
then, compress these parts in the same field to reduce
the cost. A software program has been designed
to generate a Verilog (a Hardware Description Language)
description of a decompression engine for
each compressed ARM program. Then, the description
is synthesized using Design Compiler of the
Synopsys Co. The synthesized results for several
benchmarks show that most of cases are better than
the results of our previous versions.
設計業；研究發展服務業
CAD for VLSI Design
技術可移轉, 預期極佳之效益
註：本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。
98年度專題研究計畫研究成果彙整表 
計畫主持人：蔣元隆 計畫編號：98-2220-E-168-001- 
計畫名稱：以精簡指令集微控器為主的嵌入式系統程式壓縮及解壓縮硬體智財產生器之研製(嵌入式系
統軟體技術開發分項) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備註（質化說明：
如數個計畫共同
成果、成果列為
該期刊之封面故
事...等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 2 0 100% 
篇 
1 蔣元隆、胡格
嚴，＇以精簡指令集
微控器為主的嵌入
式系統程式壓縮及
解壓縮硬體智財產
生器之研製＇，優質
家庭生活科技之關
鍵 技 術 研 討 會
2009, Nov. 19, 崑
山科技大學，台南
縣，臺灣。 
2 Yuan-Long Jeang 
and Li-Jhong 
Wang, ＇A Fast 
Browsing System 
for JPEG2000＇, 
CVGIP2009, 
 
論文著作 
專書 0 0 100%   
申請中件數 1 0 100%  
專利 已獲得件數 1 0 100% 件 
＇具有湧流支援架
構之高效率管線式
解壓縮方法＇, 已
獲得中華民國之發
明專利, 發明第 I 
325562 號。 
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 1 0 100% 
人次 
 
期刊論文 0 0 100%  國外 論文著作 
研究報告/技術報告 0 0 100% 
篇 
 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
