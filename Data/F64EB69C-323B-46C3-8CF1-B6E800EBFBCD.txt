(a) The algorithm running on each processor consists of one or more rules. Each rule is of the
form
condition part →action part.
The condition part (or guard) is a Boolean function over the states of the processor and
its neighbors; the action part is an assignment of values to some of the processor’s shared
registers. If the condition part of a rule in a processor is evaluated as true, we say that
the processor is privileged to execute the action part (or to make a move, or to write).
(b) At the initial configuration, if none of the processors is privileged, then the system is
deadlocked. Otherwise, if a privileged processor exists, the central demon in the system
will randomly select exactly one among all the privileged processors to make a move, in
a single atomic step. The local state of the selected processor thus changes, which in the
meantime results in the change of the global configuration of the system. The system will
then repeat the above process again and again to change the global configurations as long
as it does not encounter any deadlock situation. Thus, the behavior of the system under
the action of the algorithm can be described by an execution sequence Γ = (γ1, γ2, . . .) in
which for any i ≥ 1, γi represents a global configuration, and γi+1 is obtained from γi after
exactly one processor in the system makes the ith move γi → γi+1.
Under this computational model, Dijkstra introduced the notion of self-stabilization of a dis-
tributed system in his classic paper [5] in 1974 (cf. also [6], [7]). According to Dijkstra, an
algorithm is self-stabilizing if, regardless of any initial configuration of the system, any execu-
tion of the algorithm will lead the system to a legitimate configuration, and then let the system
stay in the legitimate configuration (or some legitimate configurations) forever unless the system
incurs a transient fault. Many papers have been published regarding self-stabilizing algorithms
under Dijkstra’s central demon model.
1.3 The distributed demon model and the synchronous model
As defined in the preceding subsection, under the central demon model, a unique privileged
processor is randomly selected by the central demon to make a move, in a single atomic step.
However, under the distributed demon model (cf. [12]), an arbitrary number of privileged pro-
cessors are randomly selected by the distributed demon to make moves, in a single atomic step,
while under the synchronous model (cf. [10]), all the privileged processors must make moves, in
a single atomic step. Under either the distributed demon model or the synchronous model, all
those moves made simultaneously by the activated processors in a single atomic step constitute a
system move. The definition for an algorithm to be self-stabilizing under the distributed demon
model or under the synchronous model is the same as under the central demon model. One can
see that the execution of a distributed algorithm under the distributed demon model is more
general than that under the central demon model and that under the synchronous model. There-
fore, if an algorithm is self-stabilizing under the distributed demon model, it is self-stabilizing
under both the central demon model and the synchronous model. The converse, however, is
not true, as counterexamples will be provided in the course of discussion in this report. The
obtained results in this report will also show that for the central demon model and the syn-
chronous model, the self-stabilization under one model can not imply the self-stabilization under
the other model. Most of the existing papers on self-stabilizing algorithms under the distributed
2
1.5 Main works and the organization of the rest of the report
In this report, we conduct a thorough comparison of several computational models commonly
adopted in self-stabilizing systems. In Subsection 2.1, we exhibit an execution to show that the
central-demon-model self-stabilizing algorithm in [16] (Algorithm 1) is not self-stabilizing under
the synchronous model, and thus not self-stabilizing under the distributed demon model. In
Subsection 2.2, we present an outline of proof to show that the synchronous-model self-stabilizing
algorithm in [10] (Algorithm 2) is actually self-stabilizing under the distributed demon model,
and thus under the central demon model. In Subsection 2.3, we present an outline of proof for
the correctness of the distributed-demon-model self-stabilizing algorithm in [14] (Algorithm 3).
Then, we adapt the above three algorithms so that the adapted versions (ADV’s 1-3) can operate
under the Dolev model. In Subsections 2.4 and 2.5, we exhibit two executions to show that ADV
1 and ADV 2 are not self-stabilizing under the Dolev model, respectively. In Subsection 2.6,
we present an outline of proof to show that ADV 3 is the only one among the three adapted
versions that is self-stabilizing under the Dolev model. Finally in Section 3 we first present a
naturally adapted version (ADV 4) of the DFS algorithm in [4], and then in Subsection 3.1,
we show that ADV 4 is self-stabilizing under the synchronous model but not under the central
demon model. This additional result and the results previously obtained together comprise Table
4 in Concluding Remarks, which is a thorough comparison concerning self-stabilization among
different computational models commonly adopted in the field of self-stabilizing systems. Some
implications of the obtained results in this report are also pointed out in this final section.
2 Self-stabilization of algorithms intended for solving the
maximal independent set problem
Let G = (V,E) be a simple connected undirected graph that models a distributed system, with
each node x ∈ V representing a processor in the system and each edge {x, y} ∈ E representing
the bidirectional link connecting processors x and y. An independent set in the system G is a
subset M of V such that any two processors x and y in M are not adjacent (i.e., {x, y} /∈ E).
An independent set M in G is maximal if there does not exist another independent set in G
that properly contains M . The so-called maximal independent set problem is to find a maximal
independent set in G. In this report, we use N(x) to denote the set of all neighbors of x, for a
processor x.
The rest of this section is divided into two parts. The first part consist of Subsections 2.1-2.3.
In this part, we will conduct an extensive study of the self-stabilization of the following three
algorithms, which are intended for solving the maximal independent set problem in G. The
self-stabilization properties of these three algorithms will be checked against the central demon
model, the synchronous model and, more generally, the distributed demon model.
Algorithm 1 (The algorithm in [16])
{For any node x}
R1: Indx = 0 ∧ ∀y ∈ N(x), Indy = 0→ Indx := 1
R2: Indx = 1 ∧ ∃y ∈ N(x) s.t. Indy = 1→ Indx := 0
Algorithm 2 (The algorithm in [10])
{For any node x}
R1: Indx = 0 ∧ ∀y ∈ L(x), Indy = 0→ Indx := 1
R2: Indx = 1 ∧ ∃y ∈ L(x) s.t. Indy = 1→ Indx := 0
4
action of the algorithm can be described by an execution sequence Γ = (γ1, γ2, . . .) in which for
any i ≥ 1, γi represents a global configuration. This is also the case for the system under the
distributed demon model. In order to give a rigorous proof for the self-stabilization under the
distributed demon model, we need to make the concept of execution sequence more precise. A
sequence Γ = (γ1, γ2, . . .) is called an infinite execution (of the algorithm under the distributed
demon model) if
(a) Γ is an infinite sequence,
(b) for any m ∈ Z+, γm is a global configuration, and
(c) for any m ∈ Z+, γm+1 is induced from γm after a subset of privileged processors selected
by the distributed demon make the system move γm → γm+1.
A sequence Γ = (γ1, γ2, . . .) is called a finite execution (of the algorithm under the distributed
demon model) if
(a) Γ is a finite sequence and Γ = (γ1, γ2, . . . , γq) for some q ∈ Z
+,
(b) for any m ∈ 1, 2, . . . , q, γm is a global configuration,
(c) for any m ∈ 1, 2, . . . , q−1, γm+1 is induced from γm after a subset of privileged processors
selected by the distributed demon make the system move γm → γm+1, and
(d) no node in the system is privileged in the last configuration γq.
Thus, unless clearly specified, an execution Γ = (γ1, γ2, . . .) may refer to an infinite or a finite
execution. The following lemma is quite obvious in view of the above definition of legitimate
configurations, the above definition of a finite execution and the definition of an algorithm being
self-stabilizing under the distributed demon.
Lemma 1 Algorithm 2 is self-stabilizing under the distributed demon model if and only if any
execution of the algorithm is a finite execution.
For the proof of the main theorem in this section, we now define recursively Vi and Mi for
i = 0, 1, 2, . . . as follows:
1) V0 = V and M0 = {x ∈ V0|∀y ∈ N(x), y > x};
2) for each i = 1, 2, . . .,
Vi = Vi−1 −Mi−1 and
Mi = {x ∈ Vi|∀y ∈ Vi ∩N(x), y > x}.
Lemma 2 M0,M1,M2, · · · are pairwise disjoint and M0 ∪M1 ∪M2 ∪ · · · = V
Proof. Omitted.
Lemma 3 For any positive integer i, if x ∈Mi and y ∈ L(x), then y ∈M0 ∪M1 ∪ · · · ∪Mi−1.
Proof. Omitted.
Theorem 1 Algorithm 2 is self-stabilizing under the distributed demon model.
Proof. Omitted.
6
1. repeat forever
2. for each y ∈ N(x) do
3. read( ryx := Indyx )
4. endfor
5. if ∀y ∈ N(x), ryx = 0 then
6. for each y ∈ N(x) do
7. if Indxy = 0 then write( Indxy := 1 )
8. endif
9 . endfor
10. endif
11. if ∃y ∈ N(x) s.t. ryx = 1 then
12. for each y ∈ N(x) do
13. if Indxy = 1 then write( Indxy := 0)
14. endif
15. endfor
16. endif
17. endrepeat
ADV 2 (Naturally adapted version from Algorithm 2)
{For any node x}
1. repeat forever
2. for each y ∈ N(x) do
3. read( ryx := Indyx )
4. endfor
5. if ∀y ∈ L(x), ryx = 0 then
6. for each y ∈ N(x) do
7. if Indxy = 0 then write( Indxy := 1 )
8. endif
9. endfor
10. endif
11. if ∃y ∈ L(x) s.t. ryx = 1 then
12. for each y ∈ N(x) do
13. if Indxy = 1 then write( Indxy := 0)
14. endif
15. endfor
16. endif
17. endrepeat
ADV 3 (Naturally adapted version from Algorithm 3)
{For any node x}
1. repeat forever
2. for each y ∈ N(x) do
3. read( ryx := Indyx )
4. endfor
5. if ∀y ∈ N(x), ryx = 0 then
6. for each y ∈ N(x) do
7. if Indxy = 0 then write( Indxy := 1 )
8. endif
8
2.5 The self-stabilization of ADV 2
Figure 4 illustrates a system of three nodes that assumes the Dolev model. Table 2 exhibits
a beginning portion of an infinite cyclic execution of ADV 2 in the system, under the Dolev
model, which consists of 10 configurations. It is obvious that in the configuration (0, 0, 0, 0), no
maximal independent set of the system can be identified. Therefore, under the Dolev model,
ADV 2 is not a self-stabilizing algorithm for finding a maximal independent set.
3
r32
r23
Ind32
Ind23Ind12
Ind21
1 2r21
r12 ... .
Figure 4: A system of three nodes that assumes the Dolev model.
Table 2: A beginning portion of an infinite cyclic execution of ADV 2 in the system in Figure 4.
r  Ind  r  r  Ind  Ind  r  Ind 
0 1 0 0 1 0 0 0 1
1 1 0 0 1 0 0 0 1
2 1 0 0 1 0 0 0 1
3 1 0 0 1 0 0 0 1
4 1 0 0 1 1 0 0 1
5 1 0 0 1 1 1 0 1
6 1 0 0 1 1 1 0 1
7 1 1 0 1 1 1 0 1
8 1 0 0 1 1 1 0 1
9 1 0 0 1 0 1 0 1
10 1 0 0 1 0 0 0 1
11 1 0 0 1 0 0 0 1





ﬀ



ﬁ
ﬂ
ﬃ
1 2 3
2.6 The self-stabilization of ADV 3
In this section, we will show that under the Dolev model, ADV 3 is the only one, among the
above three adapted versions, that is self-stabilizing and solves the maximal independent set
problem. First, we define the legitimate configurations to be all those global configurations in
which the following condition holds:
{∀x ∈ V, ∀y ∈ N(x), Indyx = ryx} ∧ {∀x ∈ V, [(∀y ∈ N(x), Indxy = 1)∧
(∀y ∈ L(x), Indyx = 0)] ∨[(∀y ∈ N(x), Indxy = 0) ∧ (∃y ∈ L(x) s.t. Indyx = 1)]}.
The following lemma explains that the legitimate configurations thus defined can solve the
maximal independent set problem.
Lemma 4 If the system is in a legitimate configuration, then the set M = {x ∈ V |∀y ∈
N(x), Indxy = 1} is a maximal independent set.
10
{For the node x 6= r}
1. repeat forever
2. for each y ∈ N(x) do
3. read pathy := read( pathy)
4. endfor
5. write pathx := min
y∈N(x)
{|read pathy ◦ αy(x)|N}
6. endrepeat
The above algorithm operates under the Dolev model in any general network G = (V,E)
in which there is a unique special node r, called root. Each node x orders its edges by some
arbitrary ordering αx. For any edge e = {x, y}, αx(y) is the edge index of e according to αx. It
is also assumed that every node x knows the value αy(x) of any of its neighbors y. Each node x
maintains a variable pathx. The value of pathx is a sequence of at most N items, where N ≥ n
(the number of nodes in G) is a constant positive integer and each item in the sequence is either
a positive integer or a special symbol ⊥. As shown in [4], the above algorithm is self-stabilizing
under the Dolev model.
Note also that in the above algorithm,
(a) min is with respect to the lexicographical order “≺” over the set of all finite sequences
of at most N items, and ⊥ is the minimal character. For example, (⊥, 1) ≺ (⊥, 1, 1) ≺
(⊥, 2) ≺ (1) and thus min{(⊥, 1), (⊥, 1, 1), (⊥, 2), (1)} = (⊥, 1);
(b) the notation |w|N refers to the sequence of the N least significant item of w. For example,
|(⊥, 3, 2, 1, 2, 1, 1)|6 = (3, 2, 1, 2, 1, 1) and |(2, 1, 2, 1, 1)|6 = (2, 1, 2, 1, 1);
(c) read pathy◦αy(x) is the concatenation of read pathy with αy(x). For example, if read pathy =
(1, 2, 1) and αy(x) = 3, then read pathy ◦ αy(x) = (1, 2, 1, 3).
A naturally adapted version of the above DFS algorithm is as follows:
ADV 4 (Naturally adapted version from DFS Algorithm)
{For the root r}
R1 : pathr 6= ⊥ → pathr := ⊥
{For the node x 6= r}
R2 : pathx 6= min
y∈N(x)
{|read pathy ◦ αy(x)|N}
→ pathx := min
y∈N(x)
{|read pathy ◦ αy(x)|N}.
3.1 The self-stabilization of ADV 4
As mentioned above, DFS algorithm is self-stabilizing under the Dolev model. Also note that
every execution of ADV 4 under the synchronous model corresponds to an execution of the DFS
algorithm under the Dolev model. Hence, every execution of ADV 4 under the synchronous
model will converge to the legitimate configuration, i.e., ADV 4 is self-stabilizing under the
synchronous model.
Now we show that ADV 4 is not self-stabilizing under the central demon model. For con-
structing a DFS spanning tree of the system, the DFS algorithm in [4] provides a rule to identify
12
Table 3: A beginning portion of an infinite cyclic execution of ADV 4 under the central demon
model for the system in Figure 5.
path  path  path ! path " path # path $
γ % ⊥ (3) (1,1,1,1,1,1) (1,1,1,1,1,2) (1,1,1,1,2,2) (1,1,1,1,1,1)
γ & ⊥ (3) (1,1,1,1,1,2) (1,1,1,1,1,2) (1,1,1,1,2,2) (1,1,1,1,1,1)
γ ' ⊥ (3) (1,1,1,1,1,2) (1,1,1,1,2,2) (1,1,1,1,2,2) (1,1,1,1,1,1)
γ ( ⊥ (3) (1,1,1,1,1,2) (1,1,1,1,2,2) (1,1,1,1,1,1) (1,1,1,1,1,1)
γ ) ⊥ (3) (1,1,1,1,1,2) (1,1,1,1,2,2) (1,1,1,1,1,1) (1,1,1,1,1,2)
γ * ⊥ (3) (1,1,1,1,2,2) (1,1,1,1,2,2) (1,1,1,1,1,1) (1,1,1,1,1,2)
γ + ⊥ (3) (1,1,1,1,2,2) (1,1,1,1,1,1) (1,1,1,1,1,1) (1,1,1,1,1,2)
γ , ⊥ (3) (1,1,1,1,2,2) (1,1,1,1,1,1) (1,11,,1,1,2) (1,1,1,1,1,2)
γ - ⊥ (3) (1,1,1,1,2,2) (1,1,1,1,1,1) (1,1,1,1,1,2) (1,1,1,1,2,2)
γ %. ⊥ (3) (1,1,1,1,1,1) (1,1,1,1,1,1) (1,1,1,1,1,2) (1,1,1,1,2,2)
γ %% ⊥ (3) (1,1,1,1,1,1) (1,1,1,1,1,2) (1,1,1,1,1,2) (1,1,1,1,2,2)
γ %& ⊥ (3) (1,1,1,1,1,1) (1,1,1,1,1,2) (1,1,1,1,2,2) (1,1,1,1,2,2)
γ %' ⊥ (3) (1,1,1,1,1,1) (1,1,1,1,1,2) (1,1,1,1,2,2) (1,1,1,1,1,1)
γ %( ⊥ (3) (1,1,1,1,1,2) (1,1,1,1,1,2) (1,1,1,1,2,2) (1,1,1,1,1,1)
… … … … … … …
the distributed demon model;
(2) self-stabilization under the synchronous model does not imply self-stabilization under the
distributed demon model; and
(3) for the central demon model and the synchronous model, self-stabilization under one model
does not imply self-stabilization under the other model.
Moreover, one can see that some results in Table 4 verify the two claims in Concluding
Remarks in [11]:
(1) a self-stabilizing algorithm under the central demon model cannot be easily transformed
into a self-stabilizing algorithm under the Dolev model. (Actually, from Table 4, one can
see that the adapted version ADV 2 of Algorithm 2, which is self-stabilizing under even
the distributed demon model, is not self-stabilizing under the Dolev model); and
(2) an adapted version of a self-stabilizing algorithm under the central demon model may
require an even further and more suitable modification in order to become self-stabilizing
under the Dolev model. (The adapted version ADV 2 of Algorithm 2 can be further
modified into ADV 3 to become self-stabilizing under the Dolev model.)
References
[1] G.M. Brown, M.G. Gouda, and C.L. Wu, “Token Systems that Self-Stabilize,” IEEE Trans.
Computers, vol. 38, pp. 845-852, 1989.
[2] J. E. Burns, “Self-stabilizing Ring without Demons,” Technical Report GIT-ICS-87/36,
Georgia Tech, 1987.
14
