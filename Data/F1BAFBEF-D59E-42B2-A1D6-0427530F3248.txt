2I. 主題文件(Main Document)
資訊主體的部份，從這一個部份可以看出資訊是何種類型，而不同的資
訊(Information )會包含不同的資料(Data)，例如考題，其主題文件包含了
考題類型、考題範圍、考題科目等，這些文字描述清楚地說明這份考題的主
要資訊。
II. 系統描述資訊(System Metadata)
系統在處理資訊時所需要的metadata，用來支援系統可能達到某個欲達
到的功能。如資訊物件的識別碼(id)用以唯一是別資訊、資訊更新時間可以
讓使用者知道最近何時被修改等等相關資訊。
III.處理資訊的方法(Methods)
處理資訊物件方法中所含資料之操作程式，對於資訊內容的處理對於資
訊內容的處理，不同使用者的需求可能不盡相同，資訊物件之Method，可依
應用者設計所需之操作功能附在資訊物件之中。
IV. 附加資訊(Attachments)
資訊中除了主題文件外，可能還包括了附加檔案，如多媒體(照片或影
音檔等)或特定格式的文件(如PDF，MS Excel 等)，還可以包含另一個完整
的資訊物件。
以這四類資訊為主體，我們定義了一個包含這四類資料的實體模型稱之為資
訊物件模型--Information Object Model(簡稱:InfO)，如下圖(圖一)所示：
圖一：資訊物件模型—Information Object Model
資訊物件模型可以模型化 Web 上大部分的資料，因此資訊物件的建立我們以 Web
技術為基礎，因此可以預見的是資訊物件將會佔 Web 系統一大部分，在 Internet
及 Web 上之應用對資訊物件的存取將是重要需求，因此資訊物件之存取服務將
會是關鍵性的系統支援功能，我們設計的資訊物件以網頁瀏覽器以及大多數 Web
Main
Document
System
Metadata
Attachment
Attachment
Attachment
Attachment
Method
Method
Method
Method
4[4] Metadata
Metadata 是用來儲存資訊物件描述資訊。
[5] method_names.js
內容以變數序號的方式，儲存每一個 Method 的名稱，位在 Methods 資料夾
內。
[6] objectlist.js
內容以變數序號的方式，儲存每一個資訊物件之下層物件的名稱，位在 Data
資料夾內。
資訊物件模型(Information Object Model)是我們根據網際網路上，多項應
用對資訊之需求分析出來的一個模型，我們所思考的資訊物件模型必須要具有以
下的特色：
 具多樣化媒體的包裝能力
資訊物件必須能夠包裝目前在網際網路上，大多數的資訊格式，不論
是文字、多媒體影音資訊都可以被完整的包裝在資訊物件。
 具資訊的重用性
資訊物件模型所包裝的資訊，必需能夠很容易的讓使用者將資訊再利
用。
 具擴充性之解讀能力
資訊內容的展現及處理具備彈性，除了系統提供的預設功能(如展現資
訊物件)外，使用者可以對某些資訊物件設置額外所需的操作功能，如
提供錄音幫助解讀資訊物件。
 具長期保存性
資訊保存長久的時間如五十年、一百年，對於資訊內容如何的解讀是
個問題，因此資訊物件將資訊的內容與資訊的展現方法結合在一起，
保留解讀資訊內容的線索，可以幫助資訊長久的儲存，不必擔心未來
資訊解讀的問題。
(二)以資訊物件模型為基礎建構一應用系統。
本計畫應用資訊物件模型建構了一個卡拉 OK 資訊物件系統，來檢驗資訊物
件模型的設計並檢討可能會遇見的問題。這個系統分為兩層，我們稱上層的資訊
物件為 K-Set 如下圖三，而下層則稱之為 K-Object 如下圖四；K-Set 的資訊物
件，我們在設計方面比較著重於管理 K-Object 的卡拉 OK 資訊物件，因此，在
K-Set 當層所應用到的物件方法(methods)，都是以伺服器環境之下才能運行
的.PHP 腳本為多數，包括：建置資訊物件的方法、搜尋下層資訊物件、瀏覽下
層資訊物件、壓縮下載資訊物件。而在 K-Object 的資訊物件方法方面我們則多
6K-Set 資訊物件之結構多了__template 資料夾，之所以會將 template 前面
加”__”，是因為我們希望資訊物件模型可以維持清楚乾淨的資料夾結構，因此
在系統運作、管理或開發資訊物件時所需要，但不屬於資訊物件的資料夾，如
__template 資料夾，便以“__”開頭作為命名方式，與資訊物件資料夾作區分
做為展現資訊物件內容的樣板，我們將 K-Object 資訊物件定義為：一組照片搭
配一首歌曲，並且能夠以不同應用的方法展現給使用者觀賞的一個檔案結構體。
接下來就分別展現系統畫面下圖五：
圖五：卡拉 OK 資訊物件首頁(mian.htm)
包括建置資訊樣板、建置多媒體資訊物件、搜尋、歌詞時間編輯、檢視與下載卡
拉 OK 資訊物件、上傳卡拉 OK 資訊物件、選歌播放、自第一首播放、自最後一首
播放、小螢幕隨機播放、隨機播放不重複，其中有兩個方法是：尚未實現與
TESTing，是我們預留下來當欲擴充時可用方法的位置與測試方法時的鏈結。在
K-Set 資訊物件部份，第一個方法是建置卡拉 OK 資訊物件樣板，這個方法裡可
以允許使用者上傳歌曲檔案，如圖六，首先必須指定上傳音樂檔案，接著輸入歌
曲名稱、演唱者、配合照片張數、歌詞總播放時間以及提供者，按「上傳我的歌
曲」，會跳到第二頁，此頁面必須輸入歌詞與每句歌詞所維持的毫秒數，編輯完
按送出，即好卡拉 OK 資訊物件之樣板，如圖七所示，第二個方法，可以讓使用
8圖八、打造完整資訊物件
參考文獻
[1] Payette, S. & Lagoze, C. (2000). "Policy-Carrying, Policy-Enforcing Digital
Objects." In J. Borbinha & T. Baker (eds.), Research and advanced technology
for digital libraries, fourth European conference, ECDL 2000 (pp. 144-157),
Berlin: Springer.
[2] Davis, J. R. & Lagoze, C. (2000). "NCSTRL: design and deployment of a
globally distributed digital library." Journal of the American Society for
Information Science, 51(3), 273-280.
[3] Phelps, T. A. & Wilensky, R. (2000). "Multivalent documents." Communications
of the ACM, 43(6), 83-90.
[4] Vinoski, S. (1997). "CORBA: integrating diverse applications within distributed
heterogeneous environments." IEEE Communications Magazine, 4(2), 46-55.
[5] Waugh, A., Wilkinson, R., Hills, B., & Dellóro, J. (2000). "Preserving digital
information forever." Proceedings of the Fifth ACM Conference on Digital
Libraries (pp. 175-184), San Antonio, TX.
[6] Van de Sompel, H., Krichel, T., Nelson, M. L., Hochstenbach, P., Lyapunov, V.
M.,Maly, K., Zubair, M., Kholief, M., Liu, X. & O' Connell, H. (2000). "The
UPS prototype: an experimental end-user service across e-print archives." D-Lib
Magazine,6(2). Available
at<http://www.dlib.org/dlib/february00/vandesompel-ups/02vandesompel-ups.ht
ml>.
