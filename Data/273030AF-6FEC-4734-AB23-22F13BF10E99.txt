has to be made by manual method. However the manual method is obviously not efficient since it
takes over 4 hours for sequencing the jobs each workday.
Two objectives are considered in this research, i.e. makespan ( TCZ ) and total tardiness time
( TTZ ).
Minimize TCZ =  nFFF ,...,,max 21
Minimize TTZ =ni iT1 ；  0,max iii dCT 
4. Methodology
4.1 Notation
Notation used in MOGAs is listed and introduced as follows.
id ：due-date of job i
iC ：completion time of job i
iT ：tardiness of job i
popN
：number of solutions for each population
maxG
：maximal number of generation
G ：current generation, max,,1 GG 
t ：population of generation t
eliteN ：number of elite solutions for each population
cP ：crossover rate
mP
：mutation rate
TTZ ：total tardiness time of solution x
TCZ ：makespan of solution x
i
tOX
：the ith solution in generation t for each objective
w
tOf ：the worst objective value in generation t for each objective
B
tOf ：the best objective value in generation t for each objective
)(xf ：normalized objective value
)(xP ：selection probability for solution x
t
iw
：weight for the ith objective in generation t
)(xfit ：fitness value for solution x
4.2 Simple Computerized Scheduling System
The simple computerized scheduling system (SCSS) used in the shop floor is actually a
two-stage scheduling system. It consists of dispatching rules (Stage 1) and a local search
technique (Stage 2) and the system generates a reference sequence for the daily operation.
Stage 1: The system applies the shortest processing time (SPT) and earliest due-date (EDD)
rules to generate initial schedules.
Stage 2: The system fine-tunes the schedules by local search, i.e. pairwisely interchange the
jobs in each initial schedule. Pareto optimal solutions generate in this stage as well.
Figure 2. Shift mutation
Step 5: Elitism: Select eliteN solutions from the Pareto optimal solutions and add them to the
(Npop－Nelite) solutions generated in Step 4 to maintain Npop solutions each population.
Step 6: Termination: Specify Gmax in advance. If G < Gmax, then turn back to Step 2, else
terminate this algorithm.
Other MOGAs proposed in this research possess the same steps introduced above. However
the settings of crossover and mutation rates are different.
4.4 Multi-Objective Genetic Algorithm with Variable Rates
The first method proposed is the multi-objective genetic algorithm with variable crossover
and mutation rates (VMOGA). Random rates selected within specified intervals for crossover and
mutation are supposed to enlarge the searching area and accelerate the convergence.
The crossover and mutation steps in VMOGA are reported as follows:
Crossover: A crossover rate is selected from a specified interval. For example, 0.8 is
selected from (0.75, 0.95).
Mutation: A mutation rate is selected from a specified interval. For example, 0.26 is
retrieved from (0.1, 0.3).
VMOGA makes the crossover and mutation rates variable. The purpose is to inherit good
subsequences from the parental chromosomes to the children and perturb the gene structure. This
design is expected to have more Pareto optimal solutions being found.
4.5 Adaptive Multi-Objective Genetic Algorithm
In intuition, during the early stage of a searching process, large rates are probably preferred
because large rates can augment the searching space. Then more Pareto optimal solutions can be
found. While in the late stage of a searching process, the improvement of solutions is usually
frozen. The concern in this stage may switch to terminate the algorithm as soon as possible. In
doing so, it saves computation time to raise the efficiency. According to this idea, a rule is
embedded in MOGA to adapt the genetic operator. The rule is when the quality of solutions
improves continuously then the rates for genetic operator are enlarged generation by generation.
On the contrary, once no improvement appears, the rates decrease generation by generation.
The method proposed above is called adaptive multi-objective genetic algorithm (AMOGA).
The steps of AMOGA are the same as MOGA except the mechanism to adaptive rates for
crossover and mutation operators. Each solution has to be compared with the preceding one on
two objectives respectively. Let ri =
1k
k
v
v
i=1,2, where r1 is the ratio for the first objective and r2
is the ratio for the second objective. Note that kv is the objective value of a solution k and 1kv
is the objective value of a solution precedes k. If r11.001 and r21.001 then interval rates are
applied for crossover and mutation; otherwise increase the rates generation by generation.
Detailed steps are described in the following.
Table 3. Strategies for AMOGA
Method n m Conditions Crossover Rate Mutation Rate
r1 1.001
r2 1.001
0.65-0.725 0.375-0.45
50 20
else 0.725+0.000035*G 0.45+0.000015*G
r1 1.001
r2 1.001
0.65-0.725 0.375-0.45
65 25
else 0.725+0.000035*G 0.45+0.000015*G
r1 1.001
r2 1.001
0.575-0.675 0.35-0.45
AMOGA
80 28
else 0.675+0.000035*G 0.45+0.000015*G
First, SCSS and MOGA are compared. The results are reported in Table 4. The performance
of MOGA to SCSS raises along the (n, m) increases. Therefore MOGA significantly outperforms
SCSS used in the shop floor.
Table 4. Comparison of SCSS v.s. MOGA
Methods n m A B B/A(%)
SCSS 50 20 112 2 1.78
MOGA 50 20 160 158 98.75
SCSS 65 25 135 1 0.07
MOGA 65 25 231 230 99.56
SCSS 80 28 97 0 0
MOGA 80 28 87 87 100
The comparison of MOGA versus VMOGA is carried out and the results are shown in Table
5. The solution quality in terms of B and B/A(%) of VMOGA is higher than those of MOGA.
Table 5. Comparison of MOGA v.s. VMOGA
Methods n m A B B/A(%)
MOGA 50 20 169 39 23.07
VMOGA 50 20 142 69 48.59
MOGA 65 25 230 68 29.57
VMOGA 65 25 180 99 54.10
MOGA 80 28 92 26 28.26
VMOGA 80 28 143 68 47.55
The result of comparing MOGA and AMOGA is reported in Table 6. On average, the
solution quality of AMOGA outnumbers that of MOGA.
The results indicate that VMOGA and AMOGA are superior to SCSS and MOGA in solution
quality. MOGA, VMOGA, and AMOGA are resulted in shorter computation times than that of
SCSS. Moreover, AMOGA outperforms VMOGA in the further comparison. The result reveals
that the proposed methods are potential for the practical applications.
References
1. D.W. Boeringer, D.H. Werner, 2002, Adaptive mutation parameter toggling genetic algorithm
for phase-only array synthesis, Electronics Letters, 38(25), pp.1618-1619.
2. P.C. Chang, J.C. Hsieh, S.G. Lin, 2002, The development of gradual-priority weighting
approach for the multi-objective flowshop scheduling problem, International Journal
of Production Economics, 79(3), pp.171-183.
3. H. Ishibuchi, H. Murata, 1998, Multi-objective genetic local search algorithm and its
applications to flowshop scheduling, IEEE Transactions on SMC, 28(3), pp.392-403.
4. H. Ishibuchi, H. Murata, 1999, Local search procedures in a multi-objective genetic local
search algorithm for scheduling problems Proceedings of IEEE International Conference on
SMC, pp.119-124.
5. L.P. Khoo, S.G. Lee, X.F. Yin, 2000, A prototype genetic algorithm-enhanced multi-objective
scheduler for manufacturing systems, The International Journal of Advanced Manufacturing
Technology, 16(2), pp.131-138.
6. Z. Liu, J. Zhou, S. Lai, 2003, New adaptive genetic algorithm based on ranking, Proceedings
of the 2nd International Conference on Machine Learning and Cybernetics, IEEE, Xi’an, 2-5
November, pp.1841-1844.
7. T. Murata, H. Ishibuchi, 1994, Performance evolution of genetic algorithms for flowshop
scheduling problems, Proceedings of 1st IEEE International Conference on Evolutionary
Computation, pp.812-817.
8. T. Murata, H. Ishibuchi, H. Tanaka, 1996, Multi-objective genetic algorithm and its
applications to flowshop scheduling, Computers and Industrial Engineering, 30(4),
pp.957-968.
9. J. Peng, K. Li, S. Thompson, 2004, A combined adaptive bounding and adaptive mutation
technique for genetic algorithms, Fifth World Congress on Intelligent Control and Automation,
3, pp.2154-2158.
10. J. Sridhar, C. Rajendran, 1996, Scheduling in flowshop and cellular manufacturing systems
with multiple objectives─A genetic algorithmic Approach, Production Planning & Control,
7(4), pp.374-382.
11. M. Srinivas, L.M. Patnaik, 1994, Adaptive probabilities of crossover and mutation in genetic
algorithms, IEEE Transactions on System, Man and Cybernetics, 24(4), pp.656-667.
12. Y. Sun, C. Li, A. Wang, J. Zhu, X. Wang, 2005, An adaptive GA based on Information
