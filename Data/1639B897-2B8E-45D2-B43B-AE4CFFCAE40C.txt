國科會結案報告 2011 
 2
評量一個記憶體自我修復電路的項目可分為三項 
 項目 
1 自我修復電路所付出額外面積 
2 自我修復電路之測試與修復時間 
3 自我修復電路的修復效率 
此外，項目(3) 自我修復電路的修復效率又受到下面三者影響[3] 
 項目 
i 備份元件架構與組態 
ii 備份元件分析演算法 
iii 瑕疵之偵測與定位能力所影響 
然而在一系統晶片中，往往存在數以百計的記憶體元件，而且每個記憶體的
組態(memory configuration)與種類也不相同，如果系統設計者要逐一針對每個記
憶體設計出相對應的自我修復電路，這樣一來將會大幅延長產品上市時間(time 
to market)，除此之外，將大幅增加系統電路的設計複雜度與提升系統驗證的難
度。因此綜合上述觀點，有必要開發與改進現有記憶體自我修復技術以及自動化
與最佳化整體晶片之記憶體自我修復電路規劃。 
圖(二)所示，為本計畫所建構的記憶體自我修復電路規劃系統，該系統由下
列的流程所組成:記憶體群組化演算法(RAM Grouping Algorithm)、備份元件分析
模擬 (Redundancy analysis Simulation) 、測試排程演算法 (Test Scheduling 
Algorithm)、內建自我修復介面配置演算法(BISR Scheme Allocation Algorithm)與
內建自我修復電路產生器。記憶體群組化演算法藉由分析使用者輸入系統晶片中
記憶體的放置位置(Memory Location)與線距限制(Distance Constraint)，將系統晶
片中的記憶體劃分成數個記憶體群組(memory group)，在相同記憶體群組中的記
憶體可以共同使用一個分享式記憶體自我修復介面。在取得記憶體群組結果之
後，備份元件分析模擬將依據記憶體群組結果、記憶體結構 (Memory 
Configuration)與備份元件分析演算法(RA Algorithm)藉由數據模擬，獲得每一個
記憶體的記憶體修復效率(memory repair rate)並且計算記憶體良率。緊接著，測
試排程將依照上述獲得的記憶體良率以及相對應的測試演算法 (Test 
Algorithm)，在不超過測試功率限制(Power Constraint)的條件下，藉由測試排程
演算法產生最短測試時間的記憶體測試排程(memory test sequence)並且測試完系
統晶片中所有記憶體。依據記憶體測試排程結果，自我修復介面配置演算法在不
違反記憶體測試排程與記憶體自我修復介面限制(分享式記憶體修復介面會因為
其電路的分享能力而限制其使用方式)，將會找出最佳的界面配置結果付與記憶
體群組，以取得最低的記憶體自我修復電路硬體需求。最後，記憶體自我修復電
路產生器，將依據記憶體自我修復介面配置結果產生出相對應的記憶體自我修復
電路的 RTL code (Register Transfer Level)、測試控制訊號(testbench)與合成腳本
(synthesis script)。 
因此，藉由輸入系統晶片中記憶體的設計參數給予記憶體自我修復電路規劃
系統，系統晶片設計者可以迅速且正確取得最佳記憶體自我修復電路的規劃結
國科會結案報告 2011 
 4
(3) 記憶體自我修復電路規劃系統 
A. 記憶體群組化演算法(RAM Grouping Algorithm) 
B. 備份元件分析模擬(Redundancy Analysis Simulation) 
C. 記憶體測試排程( Test Scheduling Algorithm) 
D. 記憶體自我修復介面配置演算法(BISR Scheme Allocation Algorithm) 
 
以下，我們將對各個研究項目做詳細的說明。 
(1) 各式記憶體自我修復電路 
A. 針對單埠 / 多埠記憶體之瑕疵察覺內建自我修復技術 (DABISR: a 
Defect-Aware Self-Repair Scheme for Single/Multi-Port RAMs in SOCs) 
由於系統晶片中，單埠與多埠記憶體已非常普遍，開發一同時適用於單埠
(single-port RAM, SPRAM)與多埠記憶體(2PRAM, 3PRAM, …)之分享式內建自
我修復技術是必須的。我們將詳細說明所提出的內建自我修復電路架構、記憶體
測試修復流程以及相關實驗結果。 
圖(三)為所提出之 DaBISR (defect-aware built-in self-repair)電路方塊圖。記憶
體分成單埠記憶體與多埠記憶體，而每個記憶體配置一測試封套(Wrapper)。封
套內含有測試徵狀產生器(test pattern generator, TPG)(e.g, 負責產生測試徵狀，測
試記憶體)、repair register(e.g, 儲存由 Fuse Box 傳送之修復徵狀，且每個測試封
套相互串連)、test collar(e.g.,負責切換記憶體為正常工作/測試模式)。由圖(三)，
多記憶體共享一控制器(CTR)與 VeBIRA(versatile BIRA)電路。其中，控制器負責
控制測試封套內測試徵狀產生器指令傳輸，而 VeBIRA 負責單埠/多埠記憶體的
備份元件分析。所提出的 VeBIRA 對於單埠記憶體與多埠記憶體有不同的修復流
程，將於稍後說明。且 VeBIRA 依據所服務記憶體的最大設計參數實現。舉例說
明，若所有記憶體最大的字組寬(word width)為 64 位元，則 VeBIRA 以 64 位元
字組寬所需電路實現。 
RAM 1
(2PRAM)
Wrapper
RAM 2
(SPRAM)
RAM N
(3PRAM)
Wrapper
CTR
A
M MAP ID
RSR
FSM
Fuse Box
repair
signature
VeBIRA
rep_signal
ctr_signal
To Fuse B
ox
From
 Fuse B
ox
Wrapper
 
圖(三) DaBISR 之電路方塊圖 
根據多埠演算法的瑕疵模型(fault models)，多埠記憶體與單埠記憶體的最大
差異在於埠相關瑕疵(port-specific fault)。典型測試演算法對於多埠記憶體的瑕疵
國科會結案報告 2011 
 6
題，但瑕疵的真實位置仍位於偵測位置的附近。原因是，根據測試演算法，瑕疵
的觸發以及偵測位置相近。利用此特性，只需將典型測試演算法所偵測位置儲
存，再使用所提出的瑕疵定位演算法診斷出正確位置。而瑕疵定位演算法所執行
的位址空間，將僅限於所偵測瑕疵位置的相鄰近位址空間，時間複雜度極低。2)
由於字組線與位元線間橫跨記憶體的列與行，其間的瑕疵效應也將橫跨記憶體的
列與行。換句話說，所偵測到的瑕疵將以瑕疵列(faulty row, FR)或瑕疵行(faulty 
column, FC)來呈現。根據分析，WDLA 與 BDLA 的時間複雜度分別為(4k+9m)
以及 10n (e.g., k 為埠的個數，m 為所蒐集 FR 個數，n 為 FC 個數)。 
 
(a)
(b)
  )
|
|
|
|
;;
|
|
|
;
|
|
|
;
|
|
|
;|(|
d
1addr1ki
d
1addr2ki
d
1addr1i
d
1addr0i
d
1addr1ki
d
1addr1i
d
1addr0i
d
1addr1ki
d
1addr1i
d
1addr0i
d
1addr1ki
d
1addr1i
d
1addr0i
d
addri
1U
2U
d
addri
2U
2U
R
R
R
R
R
R
R
R
R
R
R
R
R
WW
















     
)
|
|
|
;
|
|
|
;
|
|
|
;
|
|
|
;
|
|
|
(
)()(
)()(
)()(
)()(
)()(
)()(
d
iraddr1ki
d
iraddr1i
d
iraddr0i
d
ir1addr1ki
d
ir1addr1i
d
ir1addr0i
d
iraddr1ki
d
iraddr1i
d
iraddr0i
d
ir1addr1ki
d
ir1addr1i
d
ir1addr0i
d
iraddr1ki
d
iraddr1i
d
iraddr0i
V
1V
R
R
R
W
W
W
R
R
R
W
W
W
W
W
W















  
, where d=all-0 or all-1 data
, where d=all-0 data
 
圖(五) 應用於 k 埠記憶體瑕疵定位之(a)字組線間瑕疵的演算法(WDLA); (b)位元
線間瑕疵的演算法(BDLA) 
 
圖(六)說明了 DaBISR 對於單埠與多埠記憶體之修復流程。圖(六) (a)為單埠
記憶體之修復流程。假設，單埠記憶體個數為 N，記憶體為循序測試。首先，由
第 1 個記憶體(i=1)進入測試模式(TPGi)，當有瑕疵被 TPG 偵測到，TPG 暫停測
試，VeBIRA 開始執行備份元件分析。分析完畢後，若備份元件不足，則記憶體
不可修復(Unrepairable); 若測試仍未完成，TPG 則回復測試; 若測試已完成
(Testing is completed)，VeBIRA 輸出修復徵狀(Repair Signature)。此流程將持續直
到分析出任一單埠記憶體不可修復，或是全部修復完畢(i=N)。錯誤! 找不到參照
來源。(b)為多埠記憶體之修復流程。假設，多埠記憶體個數為 M，記憶體為循
序測試。當 TPG 偵測到瑕疵，若 VeBIRA 判斷瑕疵為 FR(faulty row)或 FC(faulty 
column)，VeBIRA 將 FR/FC 資訊儲存(Store)至修復徵狀暫存器(repair signature 
register, RSR)。若修復徵狀暫存器不足以存入新的瑕疵資訊(RSR Overflow)，記
憶體不可修復(Unrepairable)。若 VeBIRA 判斷瑕疵並非 FR/FC，VeBIRA 執行備
份元件分析並產生修復徵狀。當記憶體測試完成(Testing is completed)，由 TPG
執行瑕疵定位演算法，分析修復徵狀暫存器中所儲存 FR 或 FC 的正確瑕疵位置，
用以決定修復徵狀。以上流程，將持續至所有多埠記憶體修復完畢，或是發現任
國科會結案報告 2011 
 8
表(一) 所提出演算法與最佳演算法之修復率比較 
(NSR, NIO) 
Ours 
(No DLA) 
Best 
(No DLA) 
Ours 
(With DLA) 
Best 
(With DLA) 
(0,1) 51.6% 51.6% 51.6% 51.6% 
(0,2) 64.4% 65.2% 64.4% 65.2% 
(1,0) 36.4% 36.4% 44.8% 44.8% 
(1,1) 73.4% 73.6% 86.4% 86.8% 
(1,2) 80.0% 80.4% 94.4% 94.4% 
(2,0) 60.4% 60.4% 65.2% 65.2% 
(2,1) 93.6% 94.0% 95.6% 95.6% 
(2,2) 97.2% 97.6% 99.6% 99.6% 
(3,0) 68.0% 68.0% 69.6% 69.6% 
(3,1) 97.2% 97.2% 98.4% 98.4% 
 
依據表(二) 的 3 種記憶體組態，我們實現了 DaBISR 的硬體。假設所有記憶
體皆為雙埠記憶體，則內建式自我修復電路的額外硬體面積比(i.e., (內建式自我
修復電路面積/記憶體面積)%)依 Case1~Case3 分別為 1.98%、2.67%與 4.04%。而
這些硬體額外面積比，只比不含有執行瑕疵定位演算法功能之內建式自我修復電
路多出約 0.34%。經由以上實驗分析，所提出的 DaBISR 可大幅提升記憶體之修
復效率，且硬體面積比典型內建式自我修復電路只增加約 0.34%，硬體成本。而
瑕疵定位演算法不需執行記憶體完整位址空間，其時間複雜度極低。 
 
表(二) 3 種 Case 之記憶體組態 
 Case 1 Case 2 Case 3 
RAM 0 64×2×8 64×2×16 64×2×32 
RAM 1 128×4×16 128×4×32 128×2×64 
RAM 2 256×8×32 256×8×64 256×4×128 
RAM 3 512×16×64 512×8×128 512×4×256 
 
B. 應用於字組導向記憶體 具最佳修復效率之可同速可重組內建備份元件分析
方法(An at-speed and reconfigurable built-in redundancy-analysis scheme 
with optimal efficiency for word-oriented RAMs) 
 
備份元件分析演算法可分成探索式 (heuristic)[7-14] 與徹底搜尋式
(exhaustive)[15-18]演算法。徹底搜尋式演算法又稱為最佳演算法 (optimal 
algorithm)，原因是只要記憶體有修復的解，皆可找出。然而，以典型最佳演算
法實現之 BIRA，仍有硬體或時間複雜度過高的問題(e.g., 需分析所有(或簡化)
的可能解，且硬體或時間與備份元件個數成指數相關)。因此，以簡易規則實現
國科會結案報告 2011 
 10
最佳演算法(optimal algorithm)，將不會影響演算法本身的最佳性(optimality)。在
此，我們稱最大二維位元圖為 MLB(maximum-sized local bitmap)，並以此為 BIRA
瑕疵資訊之暫存電路。 
X X X X
X X X X
X
( rc + c )
r
c
c
X
X
X
X
X
r
c
r
( c
r+
 r 
)
faulty bit
 
圖(七) 最大瑕疵分佈之可修復記憶體[12] 
圖(八)為記憶體修復程序圖。首先，記憶體由內建自我測試電路測試，並將
偵測到的瑕疵存入 MLB，此階段稱為 must-repair phase。一旦發現必須修復列
(行)，立刻以備份列(行)修復。若此時瑕疵資訊已無法存入 MLB(i.e., overflow)，
根據 MLB 所推導的原則，表示記憶體為不可修復(unrepairable)。當記憶體測試
完畢(Test Done)，進入 final-repair phase。此時，BIRA 嘗試所有可能解，檢查是
否可修復(i.e., 覆蓋)MLB 中所有瑕疵位置，直到所有的瑕疵可以被修復或是試過
所有的修復策略。舉例說明如下，假設 r=2 且 c=2，則所有可能的修復策略為: 
RRCC(i.e.,修復 MLB 上瑕疵順序為列列行行)、RCRC、RCCR、CRRC、
CRCR、CCRR，共 6 可能修復策略。若所有可能的修復策略皆嘗試而依然不可
修復，則記憶體不可修復。否則，BIRA 可選擇使用最少備份元件之解為此記憶
體的修復策略。 
must-repair 
phase
final-repair 
phase
BIST Run & 
Fault Collection
Test Done
Try All Possible
Solutions
Test Start Repair Done  
圖(八) 記憶體修復程序圖 
接著，我們描述將支援位元導向(bit-oriented)記憶體之 BIRA 擴展至字組導
向(word-oriented)記憶體的方法。字組導向記憶體讀寫的單位為字組(word)，因
此，BIST 會將記憶體讀取出的字組(memory output vector)與預期的資料(expected 
data vector)相比對(i.e., 透過 bit-wise XOR 電路)，並輸出 Hamming syndrome，如
圖(九)(a)所示。Hamming syndrome 中，1 表示瑕疵位元的位置，0 表示比對正確
的位元。當 Hamming syndrome 中只有單一瑕疵位元時(single-bit syndrome)，BIRA
可在一時脈週期將其編碼成 bit address，此 bit address 即代表字組內的單一瑕疵
國科會結案報告 2011 
 12
以及單一 BIST Run 之特性。然而，記憶體位址測試的順序必須為 row-fast，也
就是一列測完再測下一列的方式。對於常見的行軍式測試演算法(March test 
algorithm)，並不影響其瑕疵覆蓋率。 
由於多記憶體模組共用單一 BIRA 電路，可降低硬體成本。圖(十)為可重組
自 我 修 復 電 路 架 構 圖 (reconfigurable BISR, ReBISR)[8] ， 其 中 ，
ReBIRA(reconfigurable BIRA)可在 MLB 上同速執行所提出最佳演算法。然而，
多記憶體模組可能有不同備份元件組態，MLB 將以最大所需之尺寸實現。多記
憶體模組可循序測試，而 ReBIRA 內的參數可以待測記憶體模組之參數重組。 
RAM 0 RAM 1 RAM N-1
Wrapper 0 Wrapper 1 Wrapper N-1
CTR ReBIRA
ReBISR
control signals
 
圖(十) 可重組 BISR 架構圖[19] 
我們實現了兩 BISR 電路，記憶體組態分別為錯誤! 找不到參照來源。 之
Case 1 與 Case 2。其中，RAM0、RAM1 配置 1 備份行與 1 備份列，RAM2、RAM3
配置 2 備份行與 2 備份列。如錯誤! 找不到參照來源。 所示，BISR 電路面積只
占約 1.96%與 2.42%。此外，我們實現了一內建式自我修復電路晶片，分別支援
兩 256-bit 記憶體。晶片規格如表(五)所示，並以 TSMC 0.18um 製程製造。表(五)
右側為晶片照相圖，晶片總面積為 1.57mm2。經過測試機台(e.g., Angilent 93000 
SOC Tester)量測得圖(十一)之晶片電壓與時脈 shmoo 圖。可觀察知(e.g., 綠色部
分為功能正常部分)，晶片於正常工作電壓 1.8V 下，時脈速度最快可到達
143MHz。 
表(四)  BISR 面積合成結果 
 Case 1 Case 2 
Area of RAMs (ARAM) 3693000 um2 3986000 um2 
Area of ReBIRA (AReBIRA) 72312.4 um2 96515.5 um2 
Ratio of AReBIRA / ARAM 1.96% 2.42% 
Cycle Time 3 ns 3 ns 
 
 
 
 
 
 
國科會結案報告 2011 
 14
(comparators)。當有一筆瑕疵資訊(i.e.,包含行/列位址)欲存入位元圖時，比較器會
比對出是否已儲存過，以及與已存入瑕疵的相對位置，用已決定瑕疵資訊儲存於
位址與陣列暫存器中的位置。然而，典型位元圖在測試與修復完畢後，並無應用
在記憶體正常工作時。由於位元圖中的電路元件與典型備份元件電路相似(i.e., 
將存取位址做比對，若為待修復區域，則切換備份元件來置換主記憶體的瑕疵部
分)，本研究目的為設計以位元圖來當作記憶體的多個備份位元(spare bit)，並開
發相對應的內建自我修復電路執行流程。 
RA0RV0
COMPR0
C
A
0
C
V
0C
O
M
P
C
0 B
A
0
D00
B00
C
A
1
C
V
1C
O
M
P
C
1 B
A
1
D01
B01
C
A
2
C
V
2C
O
M
P
C
2 B
A
2
D02
B02
RA1RV1
COMPR1
D10
B10
D11
B11
D12
B12
RA2RV2
COMPR2
D20
B20
D21
B21
D22
B22
column-bit addr.
row addr.
Store/ Update
 
圖(十二) 典型位元圖示意圖 
 
圖(十三)為所提出內建自我測試電路電路架構圖。如圖所示，記憶體可能已
設計由典型備份元件(e.g., spare row/column)來修復的可修復式記憶體(repairable 
RAM)。當記憶體正常工作時(normal mode)，內建自我測試電路內部的位元圖也
會同時比對欲修復的瑕疵位元(faulty bit)，若欲存取的位址與位元圖中的位址暫
存器比對吻合(hit)，則切換寫入或讀出(i.e.,透過圖中多工器) 位元圖中的位元
值，以完成修復單一位元的功能。 
BIRA
Bitmap
BIST
A
D
WEN
RAM
Spare
A
R
U
Typical Repairable 
RAM
R
em
ap
DO
Q
DBISR
 
國科會結案報告 2011 
 16
圖(十五) 使用於已配置 spare row/column 的修復流程 
 
Monitor
Check Fault
Map Store
Un-repair
Syn. Export
fail
repaired
test_done
Check Repairability
sb_enoughsb_enough
multi
Spare Bit Reconfig.
test_done
Syn. Export  
圖(十六) 使用於未配置 spare row/column 的修復流程 
圖(十五)與圖(十六)分別為使用於已/未配置 spare row/column 的修復流程。
圖(十五)，由內建自我測試電路偵測到瑕疵後(fail=1)，其執行流程與典型應用於
spare row/column 的內建自我修復電路相似。包括瑕疵檢察(Check Fault，判定是
否有修復過)、瑕疵儲存於位元圖(Map Store)、執行二維(i.e.,即 spare row與column)
備份元件分析 RA(2D RA)。然而，當典型備份元件使用完畢後，若仍有偵測到
瑕疵，則典型內建自我修復電路會判定記憶體不可修復(memory un-repairable)。
但所提出的內建自我修復電路，則會進入判定是否可用備份位元來修復的狀態
(Check Repairability)，此為與典型內建自我修復電路執行流程最大不同處。由於
SOC 中記憶體大部分為容量較小的記憶體。通常，因為面積成本考量，這些記
憶體不會配置備份元件。造成，依但這些小容量記憶體偵測到瑕疵，則無法修復。
我們可實現一簡單的內建自我修復電路，只具備了判定是否可用備份位元修復的
控制器以及位元圖。圖(十六)則為此控制器所執行的修復流程。 
 
(2) 分享式記憶體自我修復介面(Shared Memory Build-in Self-Repair Schemes) 
A. 序列分享式記憶體自我修復介面 
為了降低內建自我修復電路的面積成本，可重組的概念應用到 BIRA 中，
如此 ReBIRA 電路就可被多個記憶體以非平行的方式共用，循序的對每個記憶
體做備份元件的分析，ReBIRA 的 MLB 大小由最多備用行和列的記憶體決
定，位址暫存器也由其分享的記憶體中最大的位址決定，在修復策略方面，由於
每個記憶體都有不一樣數目的備份元件，修復策略也將各自不同，故我們使用一
個簡單方法，當測試不同記憶體時選擇它可能的修復策略，設計的電路將在下一
節做解釋。  
圖(十七) 為所提出 ReBIRA 的方塊圖[19]，為求簡化將時脈訊號(clock)和
重置訊號(reset)省略。ReBIRA 包含了有限狀態機(FSM)、修復策略產生器
(strategy generator, STR_GEN)、位元圖(Bitmap)、修復徵狀暫存器(Repair Signature 
Register, RSR)、記憶體編號暫存器(ID register, ID_Reg)、址位遮罩(Address Masker) 
國科會結案報告 2011 
 18
R
ow
-Valid Logic
C_V
R
_V
C0 C1 C2 C3 C4 C5
R0
R1
R2
R3
R4
R5
Column-Valid Logic
C_temp
CAR
R
A
R
R
_tem
p
: fault location
 
圖(十八) 6x6 MLB 的方塊圖 
 
我們根據表(六)， RAM 的規格實現所提出的  ReBIRA 電路，所有的 
RAM 面積為  23416000um2，而在  3ns 的時間條件下，ReBIRA 的面積為 
56577um2，提出的 ReBIRA 電路占很小的時間和面積的代價。 
表(六) 實驗的RAM 大小和備用元件的分配 
RAM Size Redundancy 
Configuration 
512 x 1024 (512K bits) (1R, 1C) 
512 x 1024 (512K bits) (1R, 1C) 
1024 x 1024 (1M bits) (2R, 1C) 
2048 x 1024 (2M bits) (2R, 2C) 
 
表(七) 序列式分享式內建自我修復電路面積分析 
RAMs 
Total Area 
ReBISR 
Area 
Area 
Overhead 
23416000um2 56577um2 0.241% 
 
B. 平行分享式記憶體自我修復介面 
為了降低內建自我修復電路的面積成本，雖然可以藉由序列分享式記憶體自
我修復介面達到目標，由於序列分享式記憶體自我修復介面利用序列式(也就是
每一次都只有一個待測記憶體在使用該界面)，因此可能會造成整體測試時間增
長的問題，有鑑於上述的問題，如果分享式自我修復電介面能夠以在同一時間分
國科會結案報告 2011 
 20
表(八) 實驗的RAM 大小和備用元件的分配 
RAM Size 
(R x C x W) 
Local Bitmap 
Size 
Redundancy 
Configuration 
512 x 16 x 64 3 x 3 (2R, 2C) 
512 x 16 x 64 4 x 4 (2R, 3C) 
512 x 16 x 32 3 x 3 (2R, 2C) 
256 x 16 x 64 4 x 4 (2R, 3C) 
256 x 16 x 32 3 x 3 (2R, 2C) 
表(九) 平行式分享式內建自我修復電路面積分析 
DBISR 
Area 
PBISR 
Area 
Area 
Reduction Ratio 
114153um2 91694um2 19.67% 
(3) 記憶體自我修復電路規劃系統 (Memory Build-in Self-Repair Planning 
Framework) 
由於現今系統晶片中，上百顆記憶體已很普遍，為了節省測試電路面積成
本，使用分享式內建自我修復電路將可提升硬體共享比例，降低整體內建自我修
復電路面積。然而，受到繞線複雜度(routing)與內建自我修復電路速度的影響，
所有記憶體共享一內建自我修復電路的可行性極低。因此，多組分享式內建自我
修復電路支援系統晶片中所有記憶體是必須的。然而這引申了一新的議題: 如何
決定哪些記憶體模組要共用一內建自我修復電路? 此外，多記憶體模組的測試程
序(test sequence)也影響著內建自我修復電路的控制。典型方法使用了測試排程
(test scheduling)技術來決定記憶體的測試程序。測試排程的主要目的為: 在最大
功率損耗限制下，獲得最小整體測試時間的記憶體測試程序。然而，當測試排程
應用於使用了內建自我修復電路的記憶體，將受到記憶體有測試中斷可能，影響
記憶體測試時間。 
由上述可知，系統晶片中內建自我修復電路的規劃將影響內建自我修復電路
面積與測試時間成本。然而，對於數百甚至上千記憶體之矽統晶片而言，內建自
我修復電路規劃的複雜度將大幅提升。我們提出一自動化內建自我修復電路規劃
-產生之流程，可快速決定記憶體分群(grouping)(i.e., 決定哪些記憶體可共享一
BISR 電路)、所支援內建自我修復介面種類(e.g., 序列式/平行式(serial/parallel) 
BISR)、記憶體的測試程序，並且自動化產生晶片階層整體內建自我修復電路與
其控制。 
我們提出了記憶體內建自我修復電路自動產生之基礎架構如圖(二)。接下
來，我們將針對每個流程的演算法與執行方式給予詳細的介紹。 
A. 記憶體群組化演算法(RAM Grouping Algorithm) 
記憶體分群演算法可決定哪些記憶體要共用一分享式內建自我修復電路。其
中，最大的影響參數為內建自我修復電路與記憶體間的距離。原因是，內建自我
修復電路與記憶體位置的間距將影響電路的執行速度以及繞線面積。因此，我們
定義距離限制(distance constraint, DC)為記憶體位置與內建自我修復電路擺放位
國科會結案報告 2011 
 22
 
1
2
3
g2=(1,2)
g4=(1,3)
g1=(1)
g3=(1,2,3)
A
B
C
 
圖(二十二) 舉例說明符合距離限制之記憶體群組產生 
之後，記憶體分群演算法進入種子解產生(seed solution generation)步驟。由
於上一步驟僅由演算法找出所有可能的記憶體群，其中，記憶體可分佈在多個可
能的記憶體群內。我們稱不同有效且含有相同(重複)的記憶體群，為相依記憶體
群(dependent groups)。而本步驟目的即為了由這些相依記憶體群選擇出特定記憶
體群，使得每個記憶體都位於一獨立的記憶體群內。換句話說，演算法由所有可
能的記憶體群，找出一組特定解，又稱為種子解。由圖(二十三)，有效記憶體群
g1 與 g2 有部分記憶體相同。因此，g1 與 g2 可視為相依記憶體群。因此，演算
法必須由有效記憶體群 g1 與 g2 擇一作為種子解所含的記憶體群。 
我們提出 2 規則用於選擇種子解的記憶體群: 
規則 1: 由相依記憶體群中，選擇包含最多數目記憶體之記憶體群。 
規則 2: 倘若，有多記憶體群皆含有最多數目記憶體，由這些記憶體群選擇內
建自我修復電路硬體成本權重和(sum of the weights of BISR hardware cost)為
最大者。  
如圖(二十三) (a)，依照規則 1，g1 被選擇，因其所含記憶體數大於 g2。記憶體
所對應的內建自我修復電路硬體成本權重(weights of BISR hardware cost)表示了
實現內建自我修復電路於對應的記憶體所需的硬體成本評估，此權重值與記憶體
的尺寸、備份元件個數等相關。如圖(二十三) (b)，依照規則 2，g1 被選擇，因記
憶體 7 的內建自我修復電路硬體權重大於記憶體 8，造成 g1 的硬體權重和大於
g2。 
根據記憶體分群演算法，當種子解產生後，可執行種子解增殖 (seed 
proliferation)，淬煉種子解，目的是尋找出使得整體內建自我修復電路硬體成本
更低的解。 
國科會結案報告 2011 
 24
由 Step0 可知，使用者設定 N，可決定評估調換記憶體的次數，也決定了演算法
的時間複雜度。由 Step1，選擇一含有記憶體數最小的記憶體群。目的是希望當
內部所有記憶體若皆可移至其他記憶體群，則少一分享式內建自我修復電路，可
降低整體內建自我修復電路硬體成本。而記憶體數較少的記憶體群，越有可能將
其拆散。由 Step2，目標是降低 WNET，因此選擇可使 WNET降低最多之目標記憶
體群。  
表(十一)舉例說明了種子增殖流程。假設記憶體 1~9 的內建自我修復電路硬
體權重分別為 39,33,42,43,45,39,39,36,33。假設，WGROUP可表示成 0.4×(WSUM)+0.6
×(1/ NRAM)。由種子解，WNET初始為 209.25。根據 Step1，由於 g1 有最少之記憶
體，選擇 g1 作為移出記憶體的對象記憶體群。首先選擇記憶體 1 作為移出之對
象，由於目標記憶體群 g3 對於記憶體 1 可降低最多 WNET，因此記憶體 1 移至
g3。WNET 由 209.25 降至 207.72。相似的，目標記憶體群 g3 對於記憶體 2 可降
低最多 WNET，因此記憶體 2 移至 g3。WNET由 207.72 降至 187.5。可觀察知，當
一記憶體群組可移除，對於整體內建自我修復電路硬體成本的降低有較大的效
果。 
表(十一) 舉例說明種子增殖流程 
註	 項目	 g1	 g2	 g3	
種子解	 RAM ID 
WRAM 
WGROUP 
WAVG 
WNET 
1,2 
39,33 
50.4 
36 
3,4,5 
42,43,45 
78 
43.33 
6,7,8,9 
39,39,36,33 
80.85 
36.75 
209.25 
移動記憶體 1
至 g3	
RAM ID 
WRAM 
WGROUP 
WAVG 
WNET 
2 
33 
33 
33 
3,4,5 
42,43,45 
78 
43,33 
1,6,7,8,9 
39,39,39,36,33 
96.72 
37.2 
207.72 
移動記憶體 2
至 g3	
RAM ID 
WRAM 
WGROUP 
WAVG 
WNET 
- 
- 
- 
- 
3,4,5 
42,43,45 
78 
43,33 
1,2,6,7,8,9 
39,33,39,36,33 
109.5 
36.5 
187.5 
根據圖(二十一)，在種子解增殖後，記憶體分群演算法將選擇可降低整體內
建自我修復電路面積最多的解(select a better solution)。 
以下，我們說明實驗分析結果。假設一大小為 6.3×4.6 mm2 之 SOC 晶片含有
20 顆嵌入式記憶體，如表(十二)所示。 
 
 
 
國科會結案報告 2011 
 26
 
B. 備份元件分析模擬(Redundancy Analysis Simulation) 
記憶體內建自我修復電路常使用位元圖(bitmap)暫存待分析之瑕疵資訊
[4,7-10,13,14]。圖(二十五)為一 4×4 二維位元圖，其中 RAR 與 CAR 用於儲存瑕
疵的列位址與行位址，而對應到有效列位址與行位址之 array 相交處暫存器儲存
1，其於處儲存 0。一般而言，二維位元圖有最大尺寸限制，與備份元件個數相
關。對於最佳備份元件演算法 (optimal)而言，為了不影響演算法的最佳性
(optimality)，使用最大尺寸位元圖是需要的。然而，對於其他使用探索式(heuristic)
演算法之內建自我修復電路而言，使用最大尺寸位元圖並非絕對必要。我們知
道，在最大尺寸限制之下，通常位元圖尺寸越大，可蒐集瑕疵資訊越多。因此，
可獲得較大之修復效率。但通常位元圖為 BIRA 中佔據最大面積之元件[18]，較
大之位元圖也意謂著較大的自我修復電路面積成本。因此我們發展一演算法，可
決定在最大修復率下有最小的位元圖尺寸。 
1
CAR
RAR
C
A
1
RA1
Bitmap
array
 
圖(二十五) 4×4 二維位元圖示意圖 
 
圖(二十六)為所提出二維位元圖尺寸決定演算法流程圖。假設 i 與 j 分別表
示二維位元圖之寬與高，RR 表示修復率。針對單一記憶體，初始化設定
k=i=j=RRk=0。接下來，演算法不斷同時提升 i 與 j，並模擬其 RR。當 RRK+1>RRk，
則繼續增加 i 與 j。當 RRK+1=RRk 或 RRk=100%，表示修復率已無法上升，演算
法不再增加 i 與 j。然而，位元圖不一定長寬相等，因此，演算法開始模擬 i=i-1
與 j=j-1 之情形。若修復率仍可維持不變，則選擇較小尺寸之位元圖。 
 
國科會結案報告 2011 
 28
(3×3) 96.83% (1×2)* 100.0% 
(1×2)* 96.83% (3,1) (2×2) 99.47% 
(1,3)	 (2×2)* 100.0% (3×3) 99.47% 
(1×2) 99.47% (1×2)* 99.47% 
(2×1) 99.47% (3,2) (2×2) 100.0% 
(2,1)	 (2×2) 96.83% (1×2)* 100.0% 
表(十四) 修復率對應上升瑕疵密度之結果 
defect	
density	
(1/mm2)	
size	of	
bitmap	
(i×j)	
repair	
rate	
(%)	
defect	
density	
(1/mm2)	
size	of	
bitmap	
(i×j)	
repair	
rate	
(%)	
0.33	 (2×2) 100.0% 2.01 (2×2) 80.92% 
(1×2)* 100.0% (3×3) 80.92% 
0.67	 (2×2) 99.47% (1×2)* 80.92% 
(3×3) 99.47% 2.34 (2×2) 71.92% 
(1×2)* 99.47% (3×3) 72.26% 
1.00	 (2×2) 97.84% (4×4) 72.26% 
(3×3) 97.84% (2×3) 71.92% 
(1×2)* 97.84% (3×2)* 72.26% 
1.34	 (2×2) 93.82% 2.67 (2×2) 62.16% 
(3×3) 93.82% (3×3) 62.50% 
(1×2)* 93.82% (4×4)* 62.84% 
1.67	 (2×2) 88.36% (5×5) 62.84% 
(3×3) 88.36% (3×4) 62.50% 
(1×2)* 88.36% (4×3) 62.50% 
C. 記憶體測試排程( Test Scheduling Algorithm) 
內嵌式記憶體使用備份元件並配置內建自我修復電路來執行測試與修復已
非常熱門。內建自我修復電路內含有內建備份元件分析電路 (built-in 
redundancy-analysis, BIRA)用來分析所蒐集的瑕疵資訊，並配置備份元件。配置
的方法透過內建備份元件分析演算法(redundancy analysis algorithm,RA)的執行來
決定。通常，RA 內部會有數個早期終止(early abort)規則 –在測試中，早期發
現記憶體已無法修復的情況，並提早終止測試。而 BIRA 所內建的這些早期終止
規則，將造成並非所有的 SOC 接受的測試時間皆同(i.e., 將由記憶體被判定不可
修復的時間點來決定)。典型針對記憶體的測試排程，仍沿用對整體 SOC 電路排
程的概念，也就是電路面積越大其測試時間越長，並未考量到內建自我修復電路
對測試時間的影響。因此，有必要針對配置內建自我修復電路電路，以及所使用
的 RA，預先評估其對預測試時間的影響。並在晶片額定功率消耗範圍內，作測
試排程。 
假設有 n 個配置了備份元件與內建自我修復電路的記憶體(mi, 0≦i<n)。我們
國科會結案報告 2011 
 30
D. 記憶體自我修復介面配置演算法(BISR Scheme Allocation Algorithm) 
完成記憶體分群、記憶體良率分析以及記憶體測試排程後，記憶體自我修復
電路規劃系統將對每個記憶體群組進行內建自我修復介面配置，藉此獲得低成本
的內建自我修復電路實現結果。 
 圖(二十九)所示為記憶體自我修復電路規劃系統[23]中內建自我修復介面配
置流程圖，主要流程分為下列兩步驟:序列分享式內建自我修復界面配置(ReBISR 
Scheme Allocation)以及平行分享式內建自我修復界面配置 (PBISR Scheme 
Allocation)。首先在序列分享式內建自我修復界面配置流程中，所需之輸入參數
檔為記憶體分群結果(Results of Memory Grouping)以及記憶體測試排程結果
(Results of Test Scheduling)，依據記憶體分群結果與體測試排程結果，在一記憶
體群組中的記憶體將先配置序列分享式內建自我修復界面，將所有的記憶體群組
以序列分享式內建自我修復界面配置完成後，才會進入第二步驟；在平行分享式
內建自我修復界面配置中，會分析序列分享式內建自我修復界面配置結果，挑選
可以再藉由以一個平行分享式內建自我修復界面置換在一個記憶體群組中多個
序列分享式內建自我修復界面配置達到降低面積成本。在完成上述兩個配置步驟
後，記憶體自我修復電路規劃系統將會輸出系統晶片中記憶體的序列分享式內建
自我修復界面配置結果(List of ReBISR Schemes)以及平行分享式內建自我修復
界面配置結果(List of PBISR Schemes)。 
Results of 
Memory Grouping
Results of 
Test Scheduling
ReBISR Scheme
Allocation
PBISR Scheme
Allocation
List of 
ReBISR Schemes
List of
PBISR Schemes  
圖(二十九) 內建自我修復介面配置流程圖 
 圖 (三十)所示為我們提出的記憶體自我修復介面配置演算法，在步驟
(一)(Phase-1)為序列分享式內建自我修復界面配置，在步驟(二)(Phase-2)為平行分
享式內建自我修復界面配置。在步驟(一)以記憶體群組中(gi)的記憶體為目標做序
列分享式內建自我修復界面配置，再選定一個記憶體群組後，將偵測記憶體測試
排程結果(LTS)中每個測試段落(TSj)是否具有選定的記憶體群組中的記憶體
(unselected RAMs in TSj  gi)，如果具有該記憶體，則挑選在測試段落中還未配
置且最大的記憶體以序列分享式內建自我修復界面予以配置(into Reu())，然後標
記該記憶體以配置。在完成一次性的記憶體測試排程結果偵測後，將 Reu()的配
置結果更新至序列分享式內建自我修復界面配置結果(List of ReBISR Schemes, 
SR)，如有在選定的記憶體群組中依然還有未被配置的記憶體(WHILE gi has 
國科會結案報告 2011 
 32
 
圖(三十一) 實驗範例，具有 50 個記憶體的系統晶片擺放結果、記憶體群組化以
及序列分享式內建自我修復界面配置結果 
 接著，記憶體自我修復介面配置演算法中步驟(二)將分析圖(三十一)的結
果，並且嘗試以平行分享式內建自我修復界面進行取代，圖(三十二)所示為處理
完成後的結果，圖中紅色所標明的記憶體即為平行分享式內建自我修復界面配置
的記憶體。 
 
圖(三十二) 實驗範例，具 50 個記憶體的系統晶片完程序列分享式內建自我修復
界面配置以及平行分享式內建自我修復界面配置結果 
國科會結案報告 2011 
 34
(10)系統晶片中記憶體內建自我修復電路之
最小化測試時間與面積成本自動化 BISR 最佳化-自動化 
 
以下為論文成果: 
 期刊論文 
1. D.-M. Chang, J.-F. Li, Y.-J. Huang, ”A built-in redundancy-analysis scheme for 
random access memory with two-level redundancy”, J. Electronic Testing: 
Theory and Application, vol. 24, no. 1, pp. 181-192, Jan. 2008. 
2. J.-F. Li, T.-W. Tseng, and C.-S. Hou, ``Reliability-enhancement and self-repair 
schemes for RAMs with static and dynamic faults," IEEE Trans. Very Large 
Scale Integration Systems, vol.18, no.9, pp. 1361-1366, 2010. 
3. T.-W. Tseng, J.-F. Li, and C.-C. Hsu, ``ReBISR: a reconfigurable built-in 
self-repair scheme for random access memories in SOCs," IEEE Trans. Very 
Large Scale Integration Systems, vol.18, no.6, pp. 921-932, 2010. 
4. T.-W. Tseng, Y.-J. Huang, and J.-F. Li,"DABISR: a defect-aware built-in 
self-repair scheme for single/multi-port RAMs in SOCs," IEEE Trans. on 
Computer-Aided Design in Integrated Circuits and Systems, vol.29, no.10, 
pp. 1628-1639, 2010. 
5. T.-W. Tseng and J.-F. Li, ” A built-in method to repair SoC RAMs in parallel”, 
IEEE Design and Test of Computers, vol. 27, no. 6, pp. 46-57, Nov./Dec. 2010. 
6. T.-W. Tseng and J.-F. Li, ``SEBIST: an soft-error tolerant built-in self-test 
scheme for random access memories," Journal of Information Science and 
Engineering (JISE), vol. 27, no. 2, pp. 643-656, March 2011. 
7. T.-W. Tseng and J.-F. Li, ”A low-cost built-in redundancy-analysis scheme for 
word-oriented RAMs with 2D redundancy”, IEEE Trans. on Very Large Scale 
Integration Systems, vol. 9, no. 11, pp. 1983-1995, Nov., 2011. 
8. C.-K. Lai, Y.-J. Huang, and J.-F. Li, ”A self-repair technqiue for content 
addressable memories with address-input-free writing function”, Journal of 
Information Science and Engineering, vol. , no. , pp. Sept., 2011 (accepted) 
9. Chih-Sheng Hou, Jin-Fu Li, and Tsu-Wei Tseng, "Memory built-in self-repair 
planning framework for RAMs in SoCs, " IEEE Trans. on Computer-Aided 
Design in Integrated Circuits and Systems vol., no., pp. -, 2011 (accepted). 
 
 
 
 
 
 
 
國科會結案報告 2011 
 36
14. J.-F. Li, J.-C. Yeh, R.-F. Huang, and C.-W. Wu, “A built-in self-repair design for 
RAMs with 2-D redundancies,” IEEE Trans. on VLSI Systems, vol. 13, no. 6, pp. 
742-745, June 2005. 
15. T. Kawagoe, J. Ohtani, M. Niiro, T. Ooishi, M. Hamada, and h. Hidaka, “A 
built-in self-repair analyzer (CRESTA) for embedded DRAMs,” in Proc. Int. 
Test Conf. (ITC),2000, pp. 567-574. 
16. D. Xiaogang, S. M. Reddy, W.–T. Cheng, J. Rayhawk, and N. Mukher-jee, 
“At-speed built-in self-repair analyzer for embedded word-oriented memories,” 
in International Conference on VLSI Design, 2004, pp. 895-900. 
17. P. Ohler, S. Hellebrand, and H.-J. Wunderlich, “An integrated built-in self-test 
and repair approach for memories with 2D redundancy,” in IEEE European Test 
Symposium (ETS), Freiburg, May 2007, pp. 91–99. 
18. W. Jeong, I. Kang, K. Jin, and S. Kang, “A fast built-in redundancy analysis for 
memories with optimal repair rate using a line-based search tree,” IEEE Trans. 
on VLSI Systems, pp. 1–14, 2009. 
19. T.-W. Tseng, J.-F. Li, C.-C. Hsu, A. Pao, K. Chiu, and E. Chen, “A  
reconfigurable built-in self-repair scheme for multiple repairable RAMs in 
SoCs,” in Proc. ITC, no. 30.2. Oct. 2006, pp. 1–8. 
20. T.-W. Tseng, J.-F. Li, and C.-S. Hou, “A built-in method to repair SoC RAMs in 
parallel,” IEEE Des. Test Comput., vol. 27, no. 6, pp. 46–57, Nov.–Dec. 2010. 
21. T.-W. Tseng, C.-S. Hou, and J.-F. Li,”Automatic generation of memory built-in 
self-repair circuits in SOCs for minimizing test time and area cost,” in Proc. 
IEEE VLSI Test Symposium (VTS), (Santa Cruz) pp.  21-26, April. 2010. 
22. C.-S. Hou and J.-F. Li,”Test and repair scheduling for built-in self-repair RAMs 
in SOCs,” in Proc. IEEE Int. Symp. on Electronic Design, Test & Applications 
(DELTA), (Ho Chi Minh), pp. 3-7, Jan. 2010. 
23. Chih-Sheng Hou, Jin-Fu Li, and Tsu-Wei Tseng, "Memory built-in self-repair 
planning framework for RAMs in SoCs, " IEEE Trans. on Computer-Aided 
Design in Integrated Circuits and Systems vol., no., pp. -, 2011 (accepted). 
 
 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/15
國科會補助計畫
計畫名稱: 記憶體電路之自我修復技術與自動化工具
計畫主持人: 李進福
計畫編號: 97-2221-E-008-095-MY3 學門領域: 積體電路及系統設計
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
1. General Chair of 2011 VLSI Test Technology Workshop 
2. Program Chair of 2010 VLSI Test Technology Workshop 
3. 中國電機工程師學會（CIEE）優秀青年電機工程師獎 (2008)  
4. 台灣積體電路設計(TICD)學會傑出年輕學者獎（2010) 
5. Panelist of the Panel ’’’’Testing embedded memories in the 
nano-era: will the existing approaches survive?’’’’ in IEEE Asian 
Test Symposium 2009 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
