??????????????????? 
?The Study of Mismatch Address Index Encoding for Data Compression in Scan Test” 
?????NSC96-2221-E-155-066 
?????96? 8? 1? ? 97? 7? 31? 
?????????????????? 
 
???? 
?????????????????
????????????????????
????????????????????
????????????????????
????????????????????
??????????????????
????????????????????
????????????????????
????????????????????
????????????????????
???????????????????
????????????????????
???????????????????
????????????????????
????????????????????
?, ??????????????????
????????????????????
????????????????????
????????????????????
????????????????????
????????????????????
????????????????????
????????????????????
????????????????????
????????????????????
????????????????????
????????????????????
???????????????????
???????????????????
???????????????????
??? 
???? 
In order to improve transmission efficiency 
between ATE and SOC under test, a new test 
data compression technique is proposed to 
reduce the test data amount stored on a tester. A 
simple yet efficient sorting heuristic is 
introduced which plays a key role in this method. 
We extract a continuity mismatch property from 
consecutive test cubes and analyze don’t cares 
during test data compression. Compression is 
implemented by encoding the mismatch bits in 
the test sequence. The decoding process is 
performed by a small amount of on-chip circuitry. 
Experimental results show an average 
compression ratio up to 82% is achieved which 
is higher than PRL, 9C and ARL encoding. 
1. Introduction 
As the process technology successively 
scaled down within a nanometer era, more and 
more functions have been crammed into a 
smaller device. Modern System-On-Chip (SOC) 
designs combine several cores on a single chip, 
in which over millions of transistors are used. 
Increasing integration density produces robust 
designs yet more faults. To detect them, large 
amounts of test vectors are required. The 
respectable sum of test vectors has seriously 
impacted test cost due to the prolonged test 
pair vi and vj. A weight, Wij, is associated with 
edge (vi, vj) representing the compression cost 
between vi and vj and is calculated as Wij = Min 
( C × Count1’run(vi⊕vj) + D, reload_cost ). Where 
C is the compression cost for each mismatch 
group consisting of a MT and a MA, Count1’run 
(vi⊕vj) is the total number of mismatch groups 
extracted from the test vector pair vi and vj, and 
D is the cost of all-match-MT code appended in 
the end of each compressed code. The value of 
Wij is constrained to be no larger than 
reload_cost. In other words, for each step to visit 
the consecutive nodes, the induced cost cannot 
exceed the cost to reload its original test vector 
as presented in subsection 2.2.1. The above test 
cube sorting problem can be reduced to the 
Hamiltonian problem. However, finding a 
Hamiltonian path of minimum cost in a complete 
graph is known to be NP-complete. To get the 
trade-off between efficiency and optimum, we 
propose a fairly simple heuristic to solve this 
sorting problem. 
In the proposed heuristic, we first assign 
each don’t care bit in test cubes by a decimal 
value “2” and sort all test cubes in ascending 
order by regarding every test vector as a fully 
decimal number. And then we recover each “2” 
to don’t care bits. After sorting, it is found that 
mismatch bits between every consecutive test 
cubes will be automatically congregated in most 
cases. Although the solution obtained by our  
heuristic can not be proved optimal, experiments 
show that the results are quite promising and the 
time cost is particularly low. 
 2.2 Don’t care bits analyses  
Generally, there are a significant number of 
don’t care bits in test data. Proper assignment of 
don’t care bits in test data can help compression 
techniques achieve higher compression. In the 
proposed method, we assign  don’t care bits in 
each test cube by 1 or 0 considering the content 
of its base and the goal is to obtain the number of 
mismatch groups as few as possible so as to 
achieve higher compression ratio. Here, we 
propose two schemes to clarify our analysis. 
They are the intuitive scheme and MAI scheme. 
An example is given and comparisons are made 
and analyzed as below. 
One intuitive scheme of assigning don’t 
care bits for test cube under compression is to 
assign each don’t care bit by the same value as 
that in the corresponding bit position in its base 
so that number of difference bits can be 
effectively reduced. However, it doesn’t ensure 
low compression cost in MAI method. In MAI 
scheme, we compare each test cube with its base 
and analyze those don’t care bits in it aiming at 
minimizing total number of mismatch groups. 
We illustrate both schemes and compare results 
by an example as shown in Fig. 1. 
2.3 Test vector compression 
In this stage, we implement bit-to-bit 
comparisons between every two consecutive test 
vectors in test sequence. The former vector of the 
Cost = 10 bits 
Cost = 17 bits 
00110100101100000
“X1”= “X2”= 0
“X1”=0, “X2”=1
Test cube sequence Target vectors Compression result
0000X1000001X21 100
0000000000000 000
b)
a)
X analysis
0000000000101100
0000000000000000
b)
a)
0000000000111100
0000000000000000
b)
a) 1001010000
 
Fig. 1   Two schemes for don’t care bit analyses 
two is regarded as a “base” toward which the 
other is to compare. The proposed MAI 
compression method was designed to encode 
MT = 001~110
Data Input
Decode 
All Match
Replace
XOR
Reload
MT = 111
MT = 000MA
 
Fig. 3  State transition diagram in MAI decoder  
Decoder, Memory and Counter. FSM is 
scheduled by six states as shown in Fig. 3. They 
are described respectively as follows. “Data 
Input” is the initial state. During this state, FSM 
reads test vector from Din to Memory. This is for 
the first test vector in test sequence or those test 
vectors executing reload operations. The length 
of every test vector read can be recognized by 
counter. After test vector is saved in Memory, 
counter is reset to 0 and FSM goes to the 
“Decode” state.  In this state, FSM transmits 
length information of mismatch-type code to 
Counter, reads mismatch-type code from Din, 
distinguishes this code and decides which state 
to go. If MT is 000, FSM goes to “All Match” 
state. If MT is 111, FSM goes to “Reload” state. 
Otherwise (MT is 001~110), FSM goes to 
“Replace” state. At “Replace” state, FSM 
outputs “Replace” signal to Counter and Decoder, 
and save MT code in Register. Counter is reset to 
0. Then, FSM pass mismatch address data from 
Din to Decoder. After that, FSM goes to “XOR” 
state. At “Reload” state, FSM outputs “Reload” 
signal to Counter and Memory. Counter is reset 
to 0. Then, FSM goes back to “Data Input” state. 
At “XOR” state, Counter is set to 0. FSM loads 
MT code from Register to Counter. Hence, 
Counter gets the length information of current 
mismatch group. Besides, the leftmost bit 
location of this group is indicated by Decoder 
according to MA. Successive XOR operations 
are then performed and the results replace those 
indicated bits in the current base stored in 
Memory. A new base is thus produced. After that, 
FSM returns to “Decode” state. At “All Match” 
state, FSM outputs “All Match” signal to 
Memory control circuit, shift Memory data to 
scan chain, and return to “Decode” state. 
3. Experiments 
To evaluate the effectiveness of the 
proposed methods, experiments are implemented 
on ISCAS’89 benchmark circuits. Test vectors 
are generated by Syntest ATPG tool “Turboscan”. 
As stated above, excessive number of bits used 
for an MT code will lift compression cost.  Best 
choice of bit numbers for an MT code depends 
on numbers of most frequently occurring 
mismatch types in a mismatch group. To 
illustrate this, we first apply 3-bit MT code in the 
experiment in which up to eight different 
mismatch types are involved considering 0~6 
mismatch bits in a mismatch group as shown in 
Table 2. The compression ratio CR% is defined 
by (1 − Dc/D) × 100%, where D and Dc are the 
sizes of test sets before and after compression, 
respectively. Results show an average 
compression ratio of 79.01% is obtained. 
However, it is observed from column “No. of 
mismatch bits in a mismatch group” that the 
occurrence probabilities of 3~6 mismatch bits in 
a mismatch group are obviously lower than that 
of 0~2 bits, from viewpoint of compression ratio, 
it is not efficient to consider them at the cost of 
additional one MT bit. Hence, in the second 
experiment, we reduce MT cost from 3 bits to 2 
bits and only consider those mismatch groups 
with 0~2 mismatch bits. To manifest the 
excellent performance of MAI compression 
