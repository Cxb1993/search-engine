2 
 
多核心架構下 Linux核心網路效能改善之研究 
以一個 Giga位元等級骨幹網路入侵防禦系統之設計與實作為例 
 
馮立琪 
長庚大學資訊工程系 
lcfeng@mail.cgu.edu.tw 
 
摘要 
隨著網際網路的蓬勃發展，許多企業的重
要資料存放在電腦主機中或透過網路傳遞。近
年來世界各地駭客事件頻傳，資訊安全技術研
發成為各方研究的主要課題，入侵偵測系統更
是其中重要的研究方向。目前Giga位元等級
的入侵偵測防禦系統相關產品很多，但價格卻
相當昂貴，對大部分的學術、研究機構與中小
型企業造成非常大的負擔。 
近來處理機朝向多核心的技術發展，逐漸
成熟的技術使得個人電腦也能有十分強大的
效能。如何善用多核心技術，透過 PC server
與 Linux系統扮演Giga位元等級網路的入侵
偵測防禦平臺，便成為一個重要的發展方向。
最近的研究成果顯示，Linux系統在網路封包
的處理上，未能充分運用到多核心的優勢，此
一問題將大大的限制Linux在網路伺服應用上
的處理能量。 
有鑑於此，本計畫針對多核心架構下
Linux核心網路效能之改善進行深入的研究與
實作。解決 Linux在網路封包處理上，無法充
分發揮多核心系統效能的問題。我們也將把過
去研發的核心內入侵防禦系統整合進來，以實
際驗證我們的研究成果。 
依據初步的效能評估顯示，我們的系統在
頻寬上不僅遠優於傳統的入侵防禦系統snort 
inline (3.9倍)，在 2Gbits的網路環境下亦
可達約 1900Mbits/s的處理能力。 
關鍵詞: 多核心處理器、入侵防禦系統、
Linux系統、網路效能 
Abstract 
With the rapid development of Internet, 
regardless of the enterprise itself or customers 
increasingly rely on the Internet to deal with 
important business. In recent years, hacker 
attacks continue to occur, information security 
becomes an important issue, and intrusion de-
tection system is one of the major develop-
ment projects. There are many intrusion de-
tection products now, but their prices are quite 
expensive. It is a huge burden for most 
schools and small companies. 
Recently, multi-core technology becomes 
mature and popular. Because the low-cost and 
high-performance characteristics of PC server 
and Linux operating system, they become a 
good platform for intrusion detection engine.  
In this project, we improve the Linux 
network performance in the multi-core envi-
ronments. Besides, we design and implement 
an intrusion prevention system. 
Preliminary performance evaluation 
shows that, the bandwidth of our intrusion 
prevention system can achieve 1900Mbits/s in 
2 Gbits network environment. 
Keywords : Multi-Core Processors, Intrusion 
Prevention System, Linux System, Network 
Performance 
1、 前言 
由於資訊科技的進步以及網際網路的
蓬勃發展，許多企業的重要資料多存放在電
腦主機中或透過網路傳遞。無論是企業本身
或客戶都日益仰賴網際網路來處理重要的
業務，公開存取的網路成為竊賊破壞與窺探
攻擊企業的目標。網路連結的數量越來越
4 
 
人 2004年 2月的研究結果[41]顯示，Linux
在使用 NAPI 技術後，網路封包轉送的
throughput 比沒有使用時高出至少一倍以
上，這證明了 Linux在使用 NAPI之後，網
路的效能能夠大幅度的提昇。但在
Multi-Processor 的 環 境 下 ( 也 包 含 了
Multi-core) ，表現確不理想。在不使用 NAPI
技術時 throughput僅多一些，在使用了NAPI
技術後，系統的 throughput 甚至比 Single- 
Processor系統少了 1/3。 
所謂 NAPI[38]是 Linux 上實現網路
Polling (輪詢) I/O的一種機制。傳統上，以
Polling方式處理 I/O是一種低效率的作法，
但因為目前網路的速度與頻寬越來越大，
Polling的方式被證明有更好的效率[34-37]。 
我們在去年曾經在 Gbits的環境下探討
核心內入侵偵測系統的設計與實作，我們利
用 Linux核心中 Netfilter的機制，將入侵偵
測的工作插入網路封包處理的流程當中。雖
然我們的研究達到不錯的效能，但也遭遇了
Linux 在網路封包處理上的瓶頸。我們的研
究發現Linux在網路封包處理上有無法充份
發揮多核心系統效能的現象，我們的發現雖
然有很多的工作待處理，但 CPU的工作(主
要是網路封包的處理)卻集中在少數的核心
上。 
目前 Linux在處理網路工作時，往往只能
夠利用到其中一顆CPU進行，以至於 Linux
在Multi-Core系統中，無法善用到所有CPU
的資源，造成網路處理效能不彰。 
Linux的此一問題，不僅是影響了我們的
系統，所有有關 TCP/IP網路封包處理、轉送，
IPTables防火牆等功能應用，都將因為此一問
題導致系統效能難以提昇。 
在本計劃中我們針對此一問題進行深入
的探討與研究，希找到適當的方法解決 Linux
在網路封包處理上，無法充分發揮多核心系統
效能的問題。我們也將過去研發的核心內入侵
防禦系統整合進來，以實際驗證我們的研究成
果。 
4、 研究方法 
目前骨幹網路的速度都已達到 Giga位
元以上，網路的速度愈快，入侵偵測或防禦
的動作也愈困難，相關設備的價格也愈昂
貴。由於 PC的低成本與高效能，如何利用
PC server，結合 Linux系統優越的網路性能
及強大的系統支援性和彈性，作為網路上入
侵偵測或防禦的平臺，引起許多學者的研究
和討論。如果此一目標能夠達成，將可大幅
降低入侵偵測或防禦系統的建置成本，進而
增進網路系統的安全。但由於 Linux系統目
前的設計，在網路封包處理上未能善用多核
心系統的處理能量，造成此一目標難以達
成。 
依據我們初步的研究，此一問題主要的
原因在於 Linux的中斷設計中，Interrupt 
Handler和 SoftIRQ會綁在同一個 CPU(core)
上，而 Linux上 TCP/IP封包的處理則是透
過 SoftIRQ來執行。因而造成網路封包的處
理效能難以提昇。 
目前 Linux的網路是用中斷來實現的。
當網路卡收到封包時，網路卡會對電腦發出
一個 Hardware Interrupt，作業系統收到中斷
之後，再由 Interrupt Handler進行網路的處
理。此時 Interrupt Handler會將封包送入
buffer並註冊一個 SoftIRQ。Linux會在稍後
檢查 SoftIRQ裡面的工作，並處理 buffer內
的所有網路封包[29,40]，流程如圖 1所示。 
 
圖 1：Linux網路處理流程 
一般而言，電腦在處理中斷時必須適度
的將中斷的能力關閉。為了讓系統能有良好
的反應能力及順暢的運作，系統中斷處理程
序執行的時間必須壓縮到最短。因此包括
Linux在內的許多作業系統將中斷分為上下
兩段來處理，前半段通常稱之為 Interrupt 
Handler，它只處理發生中斷時必須立刻處理
6 
 
或系統的需求重新設計、改寫 Policy Algo-
rithm，讓 Policy Management Unit做出符合
需求的決策。 
除了入侵偵測系統的應用之外，為了適
應其他像是封包轉送、封包分析擷取等不同
的用途，我們也將提供不同的 Policy Algo-
rithm 供選擇。如 Random Algorithm 或
Round-Robin Algorithm。Policy Management 
Unit 決定好處理封包的 CPU 後，就會將決
定的結果往上送到 Task Assignment Unit。 
 Task Assignment Unit： 
Task Assignment Unit 會根據 Policy 
Management Unit做出的決定執行。它的執
行包括兩部份，一部分會將網路卡收到的封
包送入相對應 CPU的 Packet Queue當中；
另一部份則會在相對應 CPU 上的 Task 
Queue中註冊一個 SoftIRQ。 
在先前入侵防禦系統的研究中，我們曾
利用 Linux 的 NetFilter 機制，設計實作出
Kernel 層級的入侵防禦系統(KIPS)。整個
KIPS 系統包括 5 個不同功能的模組，分別
是Manager模組、State-Tracking模組、Pattern 
Match模組、Plug-in模組和 Reactor模組。
Manager模組是系統中的核心部分，負責模
組和模組之間的控制與聯繫。State-Tracking
模組的工作是維護網路連線的建立與中
斷。Pattern Match模組是負責特徵比對，它
會根據 Rule 對每個封包進行比對，判別封
包是否含有病毒資訊，並將資訊回報給
Manager 模組。 Reactor 模組會接收從
Manager模組來的指示，並決定封包繼續傳
送、或者將封包丟棄。Plug-in模組包含一個
Plug-ins模組串列，讓 Manager模組能選擇
不同的 Plug-in模組來處理封包。 
為了驗證我們研究的成效，我們修改原
有的 KIPS 系統，並與網路分派模組整合，
使成為系統中的入侵防禦模組(以下仍簡稱
KIPS)。首先，由於網路封包分派模組在 Task 
Assignment Unit 會將封包和 task 分別填入
各 CPU 中的 Task Queue 和 Packet Queue
中，而 KIPS會為每個 CPU(core)建立各自的
state-tracking buffer。為了結合 KIPS的緩衝
區和網路封包分派模組的這些 Queue，我們
在 KIPS的 State Tracking Module中進行修
改，針對 Packet Queue和 KIPS buffer將封
包進行轉移。 
5、 結果與討論 
 
圖 3 實驗環境架構圖 
為了要證明我們對系統的改善是有效
且能實際應用在真實場合中，我們使用了目
前普遍用於骨幹的 Gigabit網路做為網路環
境；電腦硬體全部使用 PC；作業系統則全
部使用 Linux並搭配 Linux Kernel 2.6.18進
行測試。針對 KIPS的測試比較，我們選擇
了廣受使用且具有入侵防禦能力的 Snort- 
inline 2.6版作為比較的對象。 
實驗環境如圖 3所示，A為前端 3~4部
PC；B在中間作為轉送封包的裝置，並且安
裝我們的 IPS或 snort-inline；C在後端配置
二部 PC。我們會在前端同時發送封包，以
製造出塞滿 Gigabit網路的流量。 
A和 C均為一般 PC。中間的 Server硬
體配備：處理器為雙 Intel® Xeon® E5335
四核心處理器 2.00 GHz，4G記憶體，硬碟
空間 500GB，二片雙 Gigabit乙太網路卡。
CentOS 5.1，核心版本為 2.6.18。編譯器：
編譯器：gcc版本為 4.1.2。 
我們的入侵防禦系統程式以及用來比
較的Snort-inline 2.6.1(snort的 IPS版本)在中
間伺服器上執行。在實驗過程中，由前端多
部 PC同時透過 Iperf與後端的 C進行連線，
並且發送大量封包經由中間的 IPS轉送封
包，藉由 iperf工具的測試可以測量出我們
系統和 snort-inline分別可以支援的最大頻
8 
 
http://www.tcpdump.org 
[7] W. Lee, S.J. Stolfo, C.U.N.Y.D.O.C. 
SCIENCE, Data Mining Approaches for In-
trusion Detection, COLUMBIA UNIV NEW 
YORK DEPT OF COMPUTER SCIENCE, 
2000. 
[8] W. Lee, S.J. Stolfo, P.K. Chan, E. Eskin, W. 
Fan, M. Miller, S. Hershkop, and J. Zhang, 
“Real Time Data Mining-based Intrusion 
Detection,” Anaheim, USA, 2001, 頁. 
89–100. 
[9] A.K. Ghosh 及 A. Schwartzbard, “A 
study in using neural networks for anomaly 
and misuse detection,” 1999. 
[10] D. Marchette, “A Statistical Method for Pro-
filing Network Traffic.” , Proceedings of the 
Workshop on Intrusion Detection and Net-
work Monitoring Santa Clara, California, 
USA, April 9–12, 1999. 
[11] 黃盈源, “一個重用 ip堆疊之核心內入侵
偵測系統的研究與實作,” 長庚大學, 資
訊管理研究所, 2002. 
[12] Intel Corporation, “Introduction to Hy-
per-Threading Technology,” 2001. 
[13] D. Koufaty, D. Marr, “Hyperthreading 
technology in the netburst microarchitec-
ture,” Micro, IEEE,  vol. 23, 2003, 頁. 
56-65. 
[14] D.T. Marr, F. Binns, D.L. Hill, G. Hinton, 
D.A. Koufaty, J.A. Miller, 及 M. Upton, 
“Hyper-Threading Technology Architecture 
and Microarchitecture,” Intel Technology 
Journal,  vol. 6, 2002, p. 4-15. 
[15] R.M. Ramanathan, T. Evangelist, Intel Mul-
ti-Core Processors: Leading the Next Digital 
Revolution,” Technology, 2005, p. 1. 
[16] G. Koch, “Discovering Multi-Core: Ex-
tending the Benefits of Moore’s Law,” 
Technology, 2005, p.1. 
[17] D. Geer, “Chip makers turn to MultiCore 
processors,” IEEE Computer, vol. 38, 2005, 
頁. 11-13. 
[18] R. Spencer, S. Smalley, P. Loscocco, M. 
Hibler, D. Andersen, 及 J. Lepreau, The 
flask security architecture: system support 
for diverse security policies,”Washington, 
D.C.: USENIX Association, 1999, p. 11-11. 
[19] R. Durst, T. Champion, B. Witten, E. Miller, 
及 L. Spagnuolo, Testing and evaluating 
computer intrusion detection systems,” 
Commun. ACM, vol. 42, 1999, p. 53-61. 
[20] M.W. Godfrey, Q. Tu, Evolution in open 
source software: a case study,” Software 
Maintenance, 2000. Proceedings. Interna-
tional Conference on, 2000, p. 131-142. 
[21] A. Hars, “Working for Free? Motivations 
for Participating in Open-Source Projects,” 
International Journal of Electronic Com-
merce,  vol. 6, 2002, p. 25-39. 
[22] J. Sanders, “Linux, Open Source, and Soft-
ware's Future,” 1998. 
[23] G. Hertel, S. Niedner, 及 S. Herrmann, 
“Motivation of software developers in 
Open Source projects: an Internet-based 
survey of contributors to the Linux kernel,” 
Research Policy,  vol. 32, 2003, p. 
1159-1177. 
[24] S. Boyd-Wickizer, H. Chen, R. Chen, Y. 
Mao, F. Kaashoek, R. Morris, A. Pesterev, L. 
Stein, M. Wu, 及 Y. Dai, “Corey: an op-
erating system for many Cores.” 
[25] T. Vermeiren, E. Borghs, B. Haaodorens, 
“Evaluation of software techniques for pa-
rallel packet processing on Multi-Core pro-
cessors,” Consumer Communications and 
Networking Conference, 2004. CCNC 2004. 
First IEEE, 2004, p. 645-647. 
[26] R. Bolla 及 R. Bruschi, “An effective 
forwarding architecture for SMP Linux rou-
ters,” Telecommunication Networking 
Workshop on QoS in Multiservice IP Net-
works, 2008. IT-NEWS 2008. 4th Interna-
tional, 2008, p. 210-216. 
[27] J. Aas, “Understanding the Linux 2.6. 8.1 
CPU Scheduler,” Silicon Graphics Int’l, 
http://josh. trancesoftware. com/linux/linux_ 
cpu_scheduler. pdf, 2005. 
[28] Suresh Siddha, Multi-Core and Linux Kernel, 
Intel Open Source Technology Center, . 
[29] D.P. Bovet, M. Cesati, Understanding the 
Linux kernel, O'Reilly Beijing; Sebastopol, 
Calif, 2005. 
[30] B.R. Davis 及 B. Young, Input/output sub-
system having an integrated advanced pro-
grammable interrupt controller for use in a 
personal computer, US Patent 5,857,090, 
1999. 
[31] D.A. Klein, Advanced programmable inter-
rupt controller, Google Patents, 2000. 
[32] 蘇春豔 及 楊小華, Linux 內核中斷內
幕,” IBM developerWorks 中國, 5月. 
2007. 
[33] “IRQBALANCE.”, http://irqbalance.org/ 
[34] L. Rizzo, “Device Polling support for 
FreeBSD,”, Proceedings of the Main Euro-
pean BSD Conference (EuroBSDCon 2001), 
Brighton, UK, 2001. 
[35] L. Deri, “Improving passive packet capture: 
Beyond device polling,”, Proceedings of 
SANE, 2004. 
[36] L. Deri, “nCap: Wire-speed packet capture 
國科會補助計畫衍生研發成果推廣資料表
日期:2010/11/04
國科會補助計畫
計畫名稱: 多核心架構下Linux核心網路效能改善之研究-以一個Giga位元等級骨幹網路入
侵防禦系統之設計與實作為例
計畫主持人: 馮立琪
計畫編號: 98-2221-E-182-036- 學門領域: LINUX推動計劃
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
系統再經改良或商品化後具實用價值 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
