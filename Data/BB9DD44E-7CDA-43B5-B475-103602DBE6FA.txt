行政院國家科學委員會專題研究計畫成果報告 
以FPGA 為基礎，新式縮短Reed-Solomon 分解式解碼法則與改良二
位元BCH 步階式解碼法 
FPGA-Based Realization of A Novel Decomposition Decoding of 
Shortened Reed-Solomon Codes 
and A Modified Step-by-Step Decoding of Binary BCH Codes 
 
計畫編號：NSC 94-2213-E-212-010 - 
     執行期限：94 年 08 月 01 日至 95 年 07 月 31 日 
主持人：胡大湘   大葉大學電信系 
 
Part   I 
 
To Decode Shortened Reed Solomon Codes on Bit Level with BCH 
Decoding 
Abstract 
This study presents a way to shorten a Reed Solomon (RS) codes on bit level such 
that only some BCH subcodes are contained. A Reed Solomon codes over GF(2m) can 
be mapped onto the bit level, which is call a binary image of this code [4]. A binary 
image of an RS code comprises m’s BCH subcodes in concatenation and glue-vector 
codewords. The information bits are encoded with some BCH subcodes, and then the 
corresponding received sequence is decoded by these BCH decoders or the mother RS 
decoders. As in simulations of a BPSK coherent system over AWGN channels, the 
error performance of these BCH algebraic decoding is better than that of the mother 
RS algebraic decoding. 
 
keyword: RS decoding, RS codes, BCH codes. 
中文摘要 
本研究提出一種縮短 RS 二位元碼的方式，使得其所包括的碼皆為 BCH 子碼。
RS 二位元碼的是由 RS 非二位元碼經由投影方式所形成的。此種 RS 二位元碼由
數個 BCH 子碼與 glue-vector 所構成。因為此種縮短 RS 二位元碼是由 BCH 子碼
所形成，因此它的編解碼方式也由其所包括的 BCH 子碼建構而成。由實驗證明，
此種縮短 RS 二位元碼由 BCH 子碼解碼效果勝過由 RS 解碼。 
 
關鍵字：RS 解碼，RS 碼，BCH 碼 
 2
II. Code structure of RS codes on bit level 
Let C be an (N, K, D) RS code over GF(2m) with code length N, information length K 
and minimum distance D = N – K + 1. For binary transmission, the symbols of this 
code must map into binary bits. Let ),,( 120 −= mB βββ L be a basis of GF(2m). For a 
codeword CVVVV N ∈= − ),,,( 110 L , each 11,11,00, −−++= mmiiii aaaV βββ L  is a 
symbol in GF(2m) and each  is a bit in GF(2) . Let jia , )(VΩ be a mapping which 
maps the codeword into the following binary mN-tuple: 
 
),,,,,,,,,,,()( 1,11,11,01,11,11,00,10,10,0 −−−−−−=Ω= mNmmNN aaaaaaaaaVv LLLL  (1) 
 
The set of binary mN-tuples, }),({)( CVVvC b ∈Ω== , is called the binary image 
[4][13] of C with respect to B , which is a linear (mN, mK) code with minimum 
distance D(b) at least D. Conversely, if )(bCv ∈ is known, then through the inverse 
mapping )(1 v−Ω  we obtain the corresponding codeword CV ∈ . Consider an (N, K) 
RS code with generator polynomial , the 
generator matrix of this code is shown as follows[1]:  
KN
KN XgXggXg
−
−+++= L10)(
 
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
=
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
=
−−
−
−
−
1
2
1
0
210
210
210
210
00
0000
000
000
KKN
KN
KN
KN
g
g
g
g
gggg
gggg
gggg
gggg
G
M
LLLLLL
MM
LLLL
LLLLL
LLLLL
, 
(2) 
 
where, for , a vector 10 −≤≤ Ki )]([ XgXg ii= is formed with cyclically shifting 
the vector )]([0 Xgg =  by i places, and the notation [p(X)] = , and 
. Then the generator matrix of the binary image C(b)
),,,( 110 −Nppp L
1
110)(
−
−+++= NN XPXppXp L  
of C is [4][13] 
 
 4
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
=
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
Ω
Ω
Ω
Ω
Ω
Ω
Ω
Ω
Ω
Ω
Ω
Ω
Ω
Ω
Ω
=
111000000100000110000
011100000010000011000
001110000001000001100
000111000000100000110
000011100000010000011
011000011100000100000
001100001110000010000
000110000111000001000
000011000011100000100
000001100001110000010
010000001100001010000
001000000110000101000
000100000011000010100
000010000001100001010
000001000000110000101
)(
)(
)(
)(
)(
)(
)(
)(
)(
)(
)(
)(
)(
)(
)(
4
2
3
2
2
2
1
2
0
2
4
3
2
1
0
4
3
2
1
0
)(
g
g
g
g
g
g
g
g
g
g
g
g
g
g
g
G b
α
α
α
α
α
α
α
α
α
α
 
Through row operations, the above generator matrix is formed into the following 
trellis oriented generator matrix (TOGM) [14] 
⎟⎟
⎟⎟
⎟⎟
⎟⎟
⎟⎟
⎟⎟
⎟⎟
⎟⎟
⎟⎟
⎟⎟
⎟⎟
⎟⎟
⎟⎟
⎠
⎞
⎜⎜
⎜⎜
⎜⎜
⎜⎜
⎜⎜
⎜⎜
⎜⎜
⎜⎜
⎜⎜
⎜⎜
⎜⎜
⎜⎜
⎜⎜
⎝
⎛
=
0000010
0000001
0000100
0000001
0000010
0000011
1000000
0100000
0110000
1011000
1110100
1100010
0110001
0000000
0000000
0000000
0000000
0000000
0000000
0000000
0000000
0000000
0000000
0000000
0000000
1011000
1110100
1100010
0110001
0000000
0000000
0000000
0000000
0000000
0000000
0000000
0000000
0000000
0000000
0000000
0000000
1011000
1110100
1100010
0110001
)(bG
 
# 
 
III. A way to shorten RS codes on bit level 
According to this generator matrix structure in (3), a binary information message 
u can be presented as follows: 
 ( ))()()1( ,,, gm uuuu L= ,                 (5) 
 
 6
conservation, the number of bits shortened in C(b) is equal to the number of shortened 
symbols in C multiplied by m:  
 
xNlmL +=                             (8) 
 
From (7)(8), we obtain the following equation: 
 
kN
kKml −
−= )(  .                           (9) 
 
If  is completely divided by m, then Nl
 
m
NlL = ,                             (10) 
 
Otherwise,  
 
⎥⎥
⎤⎢⎢
⎡=
m
NlL ,                             (11) 
where  denotes the least number greater than y. From (8), once the values of L 
and l are found, then we obtain the following equation: 
⎡ ⎤y
 
NlmLx −= .                          (12) 
 
 After this proposed shortened way performed, the mother (N, K) RS code 
becomes ( , 'N 'K ) RS code with code length LNN −='  and information length 
LKK −=' . The ( , 'N 'K ) RS code only contains '  residual shortened ( , ) 
BCH subcodes with code length 
m 'n 'k
)'/(' mxNn −=  and )'/(' mxkk −= , and 
. Table 1 lists the shortened RS codes in its mother codes over GF(28) with 
this proposed way. The following example is given to illustrate this proposed shorten 
way. 
lmm −='
 
Example 2: In Table 1, consider (255, 239) RS code with 8-error-correcting over 
GF(28). There are 8’s (255, 191) BCH subcodes with 8-error-correcting are contained 
in this mother code. With this proposed shorten way, there are 192 symbols are 
shortened in the mother RS code, which is equivalent to shorten 6’s (255, 191) BCH 
subcodes and 6 bits in the 2’s residual (255, 191) BCH subcodes. Hence, there are 2’s  
residual shortened (252,188) BCH codes only contained in the shortened (63, 47) RS 
 8
 
V. Simulations and Summary 
This study presented a way to shorten RS codes such that a few only shorten BCH 
subcodes are included. Figures 1 and 2 depicts the error performances of a shortened 
(63, 55) RS code and a shortened (63, 47) RS code. In Figures 1 and 2, coding gains 
between both hard decision decoding are about 0.5 dB. Obviously, the error 
performances of these shortened RS codes are decoded by the mother BCH hard 
decision decoding is better than that by the mother RS hard decision decoding.  
 
 
Table 1: with the proposed way to shorten RS codes over GF(28) 
m  (N, K, t) RS 
code 
(N, k) BCH 
subcode 
 
L: number 
of shortened
Symbol in 
mother code 
l :number of 
shortened 
BCH 
subcodes 
x : total number 
of shortened 
bits in residual 
BCH subcodes 
shortened 
( , ''N K ) RS 
code 
 
8 (255,253,1)   (255,247) 192 6 6 (63, 61) 
8 (255,251,2)   (255,239) 192 6 6 (63, 59) 
8 (255,249,3)  (255,231) 192 6 6 (63, 57) 
8 (255,247,4)   (255,223) 192 6 6 (63, 55) 
8 (255,245,5)  (255,215) 192 6 6 (63, 53) 
8 (255,243,6)   (255,207) 192 6 6 (63, 51) 
8 (255,241,7)  (255,199) 192 6 6 (63, 49) 
8 (255,239,8)  (255,191) 192 6 6 (63, 47) 
8 (255,237,9)  (255,187) 160 5 5 (95, 77) 
8 (255,235,10)   (255,179) 160 5 5 (95, 75) 
8 (255,233,11),  (255,171) 160 5 5 (95, 73) 
8 (255,231,12)   (255,163) 160 5 5 (95, 71) 
8 (255,229,13)   (255,155) 160 5 5 (95, 69) 
8 (255,227,14),  (255,147) 160 5 5 (95, 67) 
8 (255,225,15)  (255,139) 160 5 5 (95, 65) 
8 (255,223,16)   (255,131) 160 5 5 (95, 63) 
8 (255,221,17)   (255,131) 160 5 5 (95, 61) 
8 (255,219,18)   (255,131) 160 5 5 (95, 59) 
8 (255,217,19)   (255,123) 160 5 5 (95, 57) 
8 (255,215,20)   (255,115) 160 5 5 (95, 55) 
8 (255,213,21)   (255,115) 160 5 5 (95, 53) 
8 (255,211,22) (255,107) 160 5 5 (95, 51) 
8 (255,209,23)   (255, 99) 160 5 5 (95, 49) 
 10
Reference 
[1]S. B. Wicker, S. Lin and D. J. Costello, Jr., Error Control Coding, Prentice Hall, 
2004. 
[2]S. B. Wicker, Error Control Systems for Digital Communication and Storage, 
Prentice Hall, 1995. 
[3]A. Vardy and Y. Be’ery, “Bit_Level Soft Decision Decoding of Reed_Solomon 
Codes,” IEEE Trans. Commun. Vol. 39, No. 3, pp. 440-444, March 1991. 
[4]T. H. Hu and S. Lin, “An Efficient Hybrid Decoding Algorithm for Reed–Solomon 
Codes Based on Bit Reliability,” IEEE Trans. Commun. Vol. 51, No. 7, pp. 1073- 
1081, July 2003. 
[5] G. R. Redinbo, L. M. Napolitano, Jr., and D. D. Andaleon, “Multibit Correcting 
Data Interface for Fault-Tolerant Systems,” IEEE Trans. Computer. Vol. 42, No. 4, 
pp. 433-446, April 1993. 
[6]L. M. Napolitano, D.D. Andaleon, W.O Shreeve and G. R. Redinbo, “Nibble-based 
error detection or correction (EDOC) chip ,” Electronics Letters, Vol. 25, pp.1542- 
1543, Oct. 1989. 
[7]H. Djandji, “An efficient hybrid ARQ protocol for point-to-multipoint 
communication and its throughput performance,” IEEE Transaction on Veh. Tech., 
Vol . 48, pp. 1688-1698, Sept 1999.  
[8]Y. Xu and T. Zhang, “Variable Shortened-and-Punctured Reed–Solomon Codes for 
Packet Loss Protection,” IEEE Trans. Broadcasting, Vol. 48, No. 3, pp. 237-245,  
Sept. 2002. 
[9] Shin-Lin Shieh, Shuenn-Gi Lee and Wern-Ho Sheen, “A low-latency decoder for 
punctured/shortened Reed-Solomon codes,” IEEE 16th international Symposium on 
Personal, indoor, and Mobile Radio communications, Vol 4, pp.2547-2551, Sept. 
2005. 
[10] J. Zhang, and M. A Armand, “On Transformed Folded Shortened Reed-Solomon 
Codes for the Correction of Phased Bursts,” 2005 5th international Conference on 
information, communications and Signal processing, pp. 1374-1378, Dec. 2005. 
[11] C. Y. Liu, H. Tang, S. Lin, and M. P. C. Fossorier, “An Interactive Concatenated 
Turbo Coding System,” IEEE Vech. Tech. Vol. 51, No. 5, pp. 998-1010, Sept 
2002. 
[12] H. Tang, Y. Liu, M. Fossorier, and S. Lin, “On combining Chase-2 and GMD 
decoding algorithms for nonbinary block codes,” IEEE Commun. Lett., Vol. 5, No. 
5, pp. 209–211, May 2001. 
[13] T. H. Hu and T. M. Tu, “On Binary Images of Reed-Solomon Codes,” Journal of 
Chung Cheng Institute of Technology, Vol. 28, No. 2, pp.53-72, 2000. 
[14] G. D. Forney, Jr., “Coset codes II: Binary lattices and related codes,” IEEE Trans. 
Inform. Theory, Vol. 34, pp. 1152–1187, Sept. 1988. 
 12
Part   II 
 
A Modified Step-By-Step Decoding for Binary BCH Codes 
Abstract 
This study presents a modified and conceptually simple step-by-step decoding 
algorithm for binary cyclic BCH codes. Step-by-step decoding temporarily changes 
one information bit value at a time and then checks weather the weight of the error 
pattern decreases by computing the corresponding syndrome matrix determinant. 
Based on the channel information and the remainder of the syndrome circuit, this 
study propose a modified step-by-step decoding, which locates a test set and checks 
the weight of the remainder of the syndrome circuit in the decoding procedure. 
Instead of testing all information bits, the bit positions listed in the test set are 
examined in proposed step-by-step decoding. Once errors are trapped in the remainder 
of the syndrome circuit, the decoding procedure is terminated. The error performance 
of proposed decoding is very close to that of conventional step-by-step decoding and 
it has much less decoding complexity than conventional step-by-step decoding does, 
as in simulations of a BPSK coherent system over AWGN channels. 
 
keyword: step-by-step decoding, BCH codes. 
 
 
中文摘要 
本研究提出一種簡單的 BCH 步階解碼法則。在此此種步階解碼法則過程中，需
要每一次修改一個消息位元，然後去檢查錯誤樣本的權重是否減少，直到所有消
息位元修改完畢為止或是錯誤樣本的權重歸為零。利用通道訊息與症狀電路，本
研究提出一種修改的步階解碼法則，其係包括測試集合的設定與檢驗症狀電路餘
式的權重。此測試集合包括了將要被檢驗的消息位元(不是所有消息位元都需要
檢查)。當錯誤樣本的陷入於症狀電路(也就是檢查錯誤樣本的權重小於或等於
BCH 碼的改錯能力)時，整個 BCH 步階解碼法則就立即停止。由實驗顯示此種修
改的步階解碼法則解碼效果幾乎等同於原來的方式，但是所需的解碼複雜度確大
大地減少。 
 14
II. Conventional step-by-step-decoding for binary BCH codes 
The parameters of a t-error-correcting binary-primitive BCH (n, k, t) code over GF(2m) 
of code length n and information length k are given by [1]: 
 Code length:  n = 2m − 1, m ≥ 3 
 Information length: mtnk −≥  
 Minimum distance:  dmin 12 +≥ t  
The generator polynomial is given by )()()()( 1231 XXXXg t−××= φφφ L , and  
)(Xiφ , 121 −≤≤ ti , denote the minimum polynomials of . Let 
and be the error pattern 
and the received polynomial. For
123 ,,, −tααα L
1
110)(
−
−++= nn XeXeeXe L 1110)( −−++= nn XrXrrXr L
10 −≤≤ ni , }1,0{∈ie  and . The 
information bits in  are given by . Since BCH codes are 
cyclic, the corresponding syndrome obtained with cyclically shifting  by p 
places to the right can be calculated as follows: 
}1,0{∈ir
)(Xr 11 ,,, −+−− nknkn rrr L
)(Xr
 , )()( )()()( ipippi erS αα == 12,,2,1 −= ti L ,  p > 0       (1) 
Define the  syndrome matrix as: vv×
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢
⎣
⎡
=
−−
)()(
22
)(
12
)(
1
)(
2
)(
3
)(
1
)( 00
001
p
v
p
v
p
v
ppp
p
p
v
SSS
SSS
S
L
LL
M
L
LL
,  for tv ,,2,1 L=      (2) 
where )0()0( ii SS = , and 1)()( += pipi SS ,  p > 0. For instance, if , then the 
determinant of  can be simplified as follows:    
3=v
)(
3
pL
2)(
3
)(
5
)(
1
)(
3
3)(
1
6)(
1
)(
3 )det(
ppppppp SSSSSSL +⋅+⋅+= .             (3) 
If (or  is singular), then the weight of  is  or less. 
Otherwise, the weight of  is  or more [2].  
0)det( )( =pvL )( pvL )(Xe 1−v
)(Xe v
 After the j-th cyclic shift, the information bit rn-j is permanently changed by rn-j = 
rn-j + 1, if the syndrome matrices  is singular and  is non-singular. 
If , when  becomes singular after p cyclic shifts, the decoding 
procedure is then terminated and the information bits are read from the decoder. In 
[2]-[5], the step-by-step BCH decoding algorithm includes the following steps: 
)( j
vL
)(
1
j
vL −
0)det( )0(1 ≠L )(1pL
1) Let p = 0, compute syndromes , and )0(iS 12,,2,1 −= ti L . For , 
determine the syndrome matrix  for which . 
1,1, L−= ttv
)0(
vL 0)det(
)0( ≠vL
2) If , then go to Step 5. 0)det( )0(1 =L
3) Let p = p+1, compute syndrome values )( piS and obtain syndrome matrix 
. Check . If , then )( pvL
)( p
vL 0)det(
)( =pvL 1−= vv  and . If 
, then go to Step 5. 
1+= −− pnpn rr
0=v
4) If , then go to Step 3. kp ≤
5) Stop decoding, read  from the decoder buffer. ),,( 11 −+−− nknkn rrr L
From step-by-step decoding, all information bits could be examined in the decoding 
procedure. Hence, conventional step-by-step decoding probably requires as many as k 
cyclic shifts to well a decoding procedure. To decrease the number of cyclic shifts, the 
following section proposes a modified step-by-step decoding procedure which uses 
 16
which is defined as 
)(~)2(~)( nQnQn −−=α ,                           (8) 
and  
dneNnQ
x
Nn∫∞ −−= 02 /2/10 )()(~ π .                      (9) 
When the value of N0 is small, the above equation becomes [8, p682] 
0
2 /)(~ NnenQ −≅ ,                            (10) 
and then (7) is bounded by  
0
2
0
2
0
2 )2()2(
)( N
n
N
n
N
n
eeen
−−−−−
≤−≅α .                      (11) 
The inverse function of )(nα  is obtained as follows 
2/1
0
1 )ln(2)( nNn −=− mα .                         (12) 
Asymptotically, when the q-th bit among k ordered bits is erroneous, then its bit error 
probability approaches to the bound of (6), namely 
)1(4)1( qmt −≅+− .                          (13) 
From (11) and (12), the value of q is determined by 
⎥⎥⎥
⎤
⎢⎢⎢
⎡
−=
−−
)1( 0
2
16
)3(
N
t
ekq ,                          (14) 
where a =  denotes the smallest integer a equal to or greater than x. For 
connivance, the preceding equation is modified by 
⎡ ⎤x
⎥⎥⎥
⎤
⎢⎢⎢
⎡
−=
−
)1( 0
2
16N
t
ekq .                           (15) 
In the decoding procedure, once positions of the q least reliable information bits are 
determined, then the information bits of these q positions are to be examined in 
decoding procedure. In other words, the decoding procedure only checks the q least 
reliable bits instead of all information bits in r . The number of cyclic shifts in 
decoding decreases because of the small value of q. These q least reliable information 
bit position searching and sorting can be replaced by the qk −  most reliable 
information bit position searching and sorting, provided that . A 
well-known sorting algorithm is the bubble-sorting algorithm. Initially, the set B = 
{n-1, n-2, …, n-k} and the set Y={|yn-1|, |yn-2|,…,|yn-k|} (the absolute values of the 
information bit reliability of a received real-number vector
2/kqk ≥>
y ). After a cycle of 
bubble-sorting executed in the set Y, the largest bit reliability, say |yj|, is selected and 
deleted from the set Y, and its corresponding bit position j is also erased from the set 
B. After sorting cycles, the set B finally contains these q least reliable 
information bit positions. 
qk −
On [p.167,1], the conventional error-trapping decoding algorithm is that as soon 
as the weight of the syndrome register becomes t or less, we assume that errors are 
trapped in the syndrome register. And then error correction can be accomplished by 
simply adding the contents of the syndrome register to the received vectors at the n – 
k proper positions. Error-trapping decoding mainly depends on the syndrome register 
shifting and examines its weight after a cyclic shifting.  
 The idea of error-trapping decoding is modified and adopted in the proposed 
decoding algorithm. Let  be the remainder polynomial of divided )()( Xr pem )(
)( Xr p
 18
algorithm is equivalent to reduce the number of error pattern examinations in the 
original step-by-step BCH decoding algorithm. 
Chase algorithm is a well-known algorithm for soft-decision decoding for binary 
block codes [10]. In Chase algorithm, there is a similar idea of adding an error pattern 
to a received bit sequence. The main difference between both algorithms is in the 
error pattern consideration and the decoding procedure. In Chase algorithm, a 
bounded distance decoding is usually engaged, and error patterns of Hamming weight 
less than  and length n are employed, where d denotes the minimum 
Hamming distance for a (n, k) BCH code, and 
( 1) / 2d −⎢⎣ ⎥⎦
x⎢ ⎥⎣ ⎦  represents the largest integer 
equal to or less than x. For example, for Chase-II algorithm, only the bits of 
the  lowest bit reliability are used. Hence, the number of error patterns 
examined in decoding is 
/ 2d⎢⎣ ⎥⎦
/ 22 d⎢ ⎥⎣ ⎦  and its corresponding complexity 
is , provided that Berlekamp-Massy algorithm is utilized.  ⎣ ⎦ ))(log)(2( 22/ knknO d −−
 
IV. Comparison and conclusion 
This study presented the modified step-by-step decoding procedure for binary BCH 
codes. This proposed decoding procedure is modified from the conventional 
step-by-step decoding procedure by examining bit positions in a test set to correct the 
errors in the information bits and checking the weight of the remainder of the division 
circuit to trap the errors in the parity-check bits. Only the information bit positions in 
the test set with the q least bit reliability values are only handled in the decoding 
procedure. In other words, the other information bit positions outside this test set are 
not examined. Therefore, the total complexity of this modified decoding procedure is 
obviously lower than that of the conventional decoding procedure.  
 In this study, the perfect estimation of Eb/N0 is required. However, for reality, the 
estimation of Eb/N0 is not easy to obtain, especially on wireless channels. In order to 
conquer the difficulties of imperfect estimation of Eb/N0 or without knowing the value 
of Eb/N0, we can take the value of q when the bit error rate (BER) in the bound of (5) 
is equal to 10-6. For example, the values of Eb/N0 in BCH(127,106,3) and 
BCH(127,113,2) codes at BER 10-6 are 7 and 8 dBs, respectively, and the 
corresponding values of q are 90 and 100. The value of an error coefficient, , 
should be predetermined prior to calculate the bound of (5). Based on the weight 
distributions of dual codes of double-error-correcting or triple-error-correcting 
primitive binary BCH codes [1, pp227-228] and the MacWilliams identity [1. p91], 
the error coefficients are listed in Table 1. For more on the weight distributions of 
primitive binary BCH codes, the reader is referred to [14] – [17]. 
mindA
 Figures 1 and 2 depicts the error performances of BCH(127,113,2), 
BCH(127,106,3), BCH(511,493,2) and BCH(511,484,3) codes. Tables 2 to 5 compare 
the complexity, which contains the average numbers of cyclic shifts, symbol additions 
and symbol multiplications in a decoding procedure without taking account of 
syndrome complexity, of these step-by-step decoding.  
 The mismatched measure of Eb/N0 results in the mismatch of the value of q. In 
this work, the mismatch of the value of q means that the value of q is lower than the 
true value of q, based on exact Eb/N0. To observe of the error performance of the 
mismatch for the value of q, the cases for 20 percent mismatch proposed step-by-step 
decoding (SDD) for these BCH codes are performed, in which the value of 
 replaces the value of q. In Figure 1, the error performance between qq ×= 8.0'
 20
 In this work, a modified SSD is proposed with less complexity than the 
conventional SSD. Although the average number of symbol multiplications of this 
proposed SSD for a BCH (511,484,3) code is only 10 percent reduction at Eb/N0 = 
6dB, however the reduction in such decoding complexity is up to 30 percent at Eb/N0 
= 2dB. As the length of a BCH code decreases, the decoding complexity of proposed 
SSD reduces. Take a BCH(127,106,3) code for example. The average number of 
symbol multiplications of this proposed SSD gains 20 percent reduction at Eb/N0 = 
6dB. In general, this modified step-by-step decoding algorithm indeed provides a very 
close error performance to the conventional step-by-step decoding algorithm with low 
decoding complexity. 
 22
 Table 1: The error coefficients for double-error-correcting or triple-error-correcting 
primitive binary BCH codes of length 2m-1 
m BCH(n, k, t) mindA  BCH(n, k, t) mindA  
4 BCH(15, 7, 2) 18 BCH(15, 5, 3) 15 
5 BCH(31, 21, 2) 186 BCH(31, 16, 3) 155 
6 BCH(63, 51, 2) 1890 BCH(63, 45, 3) 3411 
7 BCH(127,113, 2) 16002 BCH(127,106, 3) 48387 
8 BCH(255, 239, 2) 134946 BCH(255, 231, 3) 856035 
9 BCH(511, 493, 2) 1094562 BCH(511, 484, 3) 13297315 
10 BCH(1023, 1003, 2) 8869410 BCH(1023, 993, 3) 2.1838×108 
 
 
 
Table 2: The complexity for decoding BCH (127,113,2) code, the symbols 3, ⊕, and ⊗ denote the 
average numbers of cyclic shifts, symbol additions and symbol multiplications in a decoding procedure 
without taking account of syndrome complexity. 
  Conventional step-by-step decoding Proposed step-by-step decoding 
Eb/N0 
(dB) 
3 ⊕ ⊗ q 3 ⊕ ⊗ 
well 
matched 
37 35.13 31.27 62.53 
2 98.65 77.47 154.95 
20% 
mismatched
29 27.75 25.59 51.19 
well 
matched 
53 34.25 22.12 44.24 
4 76.71 41.28 82.56 
20% 
mismatched
42 27.54 18.20 36.40 
well 
matched 
72 14.35 2.74 5.48 
6 26.97 4.23 8.47 
20% 
mismatched
57 11.43 2.21 4.43 
 
 
 
 
 
 24
 
Table 5: The complexity for decoding BCH (511,484,3) code, the symbols 3, ⊕, and ⊗ denote the 
average numbers of cyclic shifts, symbol additions and symbol multiplications in a decoding procedure 
without taking account of syndrome complexity. 
  Conventional step-by-step decoding Proposed step-by-step decoding 
Eb/N0 
(dB) 
3 ⊕ ⊗ q 3 ⊕ ⊗ 
well 
matched 
286 283.10 1164.56 2107.24 
2 466.90 1706.94 3098.82
20% 
mismatched
228 226.82 973.74 1760.02 
well 
matched 
367 353.76 1335.51 2421.01 
4 459.98 1629.17 2959.9 
20% 
mismatched
293 286.49 1127.79 2042.14 
well 
matched 
433 210.54 236.46 437.85 
6 253.13 260.43 482.72 
20% 
mismatched
346 195.40 219.13 405.94 
 
 26
