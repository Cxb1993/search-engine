2一、中英文摘要
摘要
傳統公鑰密碼系統中，公鑰是一串沒有意義的數字，因此需要透過憑證機制來確認公鑰的
正確性。1984 年 Shamir 首先提出身份導向密碼系統(ID-based Cryptosystem)的觀念，其
中公鑰是根據可以唯一決定使用者身份的公開資訊所決定。例如，由使用者的 email 或電
話號碼來得到該使用者的公鑰。身份導向密碼系統最大的優勢在於不需要透過憑證機制來
確認公鑰的正確性。2001 年 Boneh 和 Franklin 提出一個真正可實作且符合身份導向要求
的加密機制，機制中使用了橢圓曲線上的雙線性配對函數。之後，雙線性配對函數就被廣
泛的用來設計身份導向密碼系統，包括密鑰交換和短數位簽名等。
由於在這些身份導向密碼系統中，雙線性配對的計算佔據最大的計算量，因此對於實作身
份導向密碼系統來說，如何加速雙線性配對函數的計算就成了一個非常重要的課題。本計
畫將深入研究橢圓曲線上雙線性配對的理論基礎，針對不同的有限體架構，改進並實作雙
線性配對函數的計算，並將其寫成函式庫供國內密碼學界應用，提供國內實作身份導向密
碼系統的參考。
關鍵詞：身份導向密碼系統、雙線性配對、橢圓曲線密碼系統
Abstract
In 1984, Shamir introduced the concept of identity-based (ID-based) cryptography where the
public key of a user can be derived from public information that uniquely identifies the user. For
example, the public key of a user can be simply his/her email address or telephone number, and
hence implicitly known to all other users. A major advantage of ID-based cryptosystem is that
no certificate is needed to bind user names with their public keys. The first complete ID-based
encryption scheme was proposed by Boneh and Franklin in 2001. They use a bilinear map (the
Weil pairing) over elliptic curves to construct the encryption/decryption scheme. After that, the
bilinear pairings have been used to design numerous ID-based schemes, such as key exchange
and short signature.
However, in the existing ID-based cryptosystem, the pairing computing has significant overhead.
Therefore, efficient algorithm for computing bilinear pairing is essential for implementation. In
this project, we will study the bilinear pairings over elliptic curves and design improved
algorithms for the computation of pairing over different finite fields. This will provide efficient
implementations for ID-based cryptosystems.
Keywords : ID-based Cryptosystem, Bilinear Pairing, Elliptic Curve Cryptosystem
二、報告內容
1. Previous Work
Weil pairing e(P, Q) is defined as follows. Given P, QE[m], there exist divisors DP,
DQDiv0(E) such that DP ~ (P)–(O) and DQ ~ (Q)–(O). Here we randomly choose points T, U,
and assign DP = (P+T)–(T) and DQ = (Q+U)–(U). It is easy to verify that DP ~ (P)–(O) and
DQ ~ (Q)–(O). As mP = mQ = O, divisors mDP and mDQ are principal and there exist rational
4We propose a halve-and-add method for the evaluation of rational functions used in the
Miller’s algorithm. The previous evaluation algorithm applies the double-and-add method to
compute Weil pairing. To take advantage of point halving, we propose a halve-and-add version
of the evaluation algorithm.
Now we compute Step 2 of the Miller’s algorithm by the following halve-and-add evaluation
algorithm.
Halve-and-Add Evaluation Algorithm
INPUT: points P, T, S, where P is given by-representation (xP,P), and the order m
OUTPUT: fm(S) = fP(S)
Find the 1/2-representatin (m-1)1/2.= ( 1ˆnb … 0ˆb ) with ibˆ{0,1}, 1ˆnb =1;
f1
)S(
)S(
TP,
TP
h
h  ;
f f1; Z P;
for j n-1, n-2,…, 0 do
2
Z/2SZ/2S
ZS
xxy
xx



ff ; Z
2
1
Z;
if jbˆ = 1 then
)S(
)S(
PZ
PZ,
1


h
h
fff ; Z Z + P;
endif
endfor
)S(
)S(
PZ
PZ,
1


h
h
fff ; Z Z + P;
return f
In our halve-and-add evaluation algorithm, the halving stage requires 1 inversion, 3
multiplications, 1 squaring, and 1 square root computing, and has an advantage over the
doubling. A detailed comparison will be given in the next section.
3. Performance Evaluation
We estimate the saved operations in our halve-and-add evaluation algorithm compared with
the double-and-add evaluation algorithm. When we consider the arithmetic operations in a
normal basis, the time saved by using halving instead of doubling is significant. In affine
coordinates, both elliptic doubling and addition for scalar multiplication require 1 inversion, 2
multiplications, and 1 squaring. In the -representation, halving stage for scalar multiplication
requires 1 multiplication and three extra operations: solving the quadratic equation, trace
6decryption. Our implementation is programmed in C and uses the free GNU Multiple Precision
(GMP) arithmetic library to deal with the big number operations. The traditional
double-and-add method and our halve-and-add method are both implemented for computation of
Weil pairing in the ID-based encryption scheme over NIST recommended curves of different
strength. Curves B-163, B-233 and B409 have the same form: y2 + xy = x3 + x2 + b over binary
fields GF(2163), GF(2233) and GF(2409), respectively. The orders of the Weil pairing m chosen in
these curves are listed in Table 3. The representation of elements in the binary field is over a
normal basis[11]. The size of message encrypted in our implementation is 160 ASCII characters.
Table 4 lists the execution times in the ID-based encryption scheme using double-and-add
method and halve-and-add method, and shows the improvements. The Weil pairing is the
primitive operation for both encryption and decryption in the ID-based encryption scheme.
Therefore, the efficient computation for Weil pairing improves both encryption and decryption.
Table 3 The Orders of Weil Pairing in the NIST Curves
NIST
Curve
m (order of Weil pairing in
decimal)
n (length of
(m)2)
k (weight of
(m)2)
B-163 5846006549323611672814742442
876390689256843201587
163 41
B-233 6901746346790563787434755862
2770255558398127373450135553
79383634485463
233 59
B-409 6610559687902485989519153080
3277103982840468296428121928
4648798304157774827374805208
1437237621791109659798672883
66567526771
409 103
Table 4 Execution Times (in msec) in ID-based Encryption Schemes
for the NIST Curves
Double-and-Add Halve-and-Add Improvement
Weil Pairing Evaluation 10.76 6.95 35 %
Encryption 16.72 12.45 26 %B-163
Decryption 12.95 8.37 35 %
Weil Pairing Evaluation 41.56 30.48 27 %
Encryption 76.28 50.13 34 %B-233
Decryption 46.75 37.48 20 %
Weil Pairing Evaluation 126.48 91.35 28 %
Encryption 198.43 135.97 31 %B-409
Decryption 150.25 110.64 26 %
Our method reduces a number of inversions and multiplications which are expensive in
computing the Weil pairing. Overall a 20~35% improvement in encryption/decryption has been
