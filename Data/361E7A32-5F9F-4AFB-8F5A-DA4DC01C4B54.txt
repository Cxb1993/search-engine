 I
 
 
 
植基於量子力學與量子計算觀點而設計的一種新的演化式演算法 
Designing a novel evolutionary algorithm inspired by  
quantum mechanics and quantum computing 
 
成果報告 
計劃編號：NSC 95-2221-E-034 –013-MY2 
執行期限：95 年 8 月 1 日 至 97 年 7 月 31 日 
主持人：林豐澤    中國文化大學應用數學系 
 
 
摘要 
 
量子力學是描述微觀世界的現象，這些現象包括量子干涉、量子疊加態、與量子
糾纏等特性。量子計算是一種機率模式的計算，所有可能的狀態會同時並存，而這些
狀態是以不同的機率振幅構成一個疊加態，經由量測後才能得到最後的結果。量子計
算的過程是透過量子邏輯運算閘，每一個邏輯運算閘對應數學上的一個么正矩陣，是
一個可逆的過程。因此量子的邏輯運算就是一系列的么正矩陣變換，其運算過程沒有
能量的耗損，也提供了量子平行處理的可行方案。量子平行處理就是只需要 n 個么正
變換就可以準備出 2n 個可能狀態。量子力學是以漢彌頓描述整個物理系統，以薛丁格
方程式描述系統的演化，在封閉的系統中經過一段時間演化後所得到的系統狀態，就
是量子邏輯運算的結果。 
近幾年來有些學者嘗試利用上述量子力學的觀點在傳統計算機做量子計算，然後
使用傳統的演算法來驗證所得到答案的正確性，這種技巧稱之為量子觀點的計算。量
子觀點的計算主要在於它巧妙的結合量子的特性，在傳統的計算機內利用量子計算的
優勢來求解極端困難的問題，它的執行績效超越了已知的傳統方法。因此，有些學者
提出結合演化式計算與量子計算來求解困難的組合最佳化問題，他們想利用量子的優
勢來縮短原來演化式演算法所需要的冗長演化時間。 
本研究計劃的重點是探討如何有效的結合演化式計算 (evolutionary computation) 
與量子計算 (quantum computing) 兩個領域，利用 quantum-inspired computing 的優
勢，設計有效率的量子相關演化式演算法來求解一些著名的組合最佳化問題，降低原
來演化式演算法所需要的計算複雜度。於演化式計算加入量子的啟示，稱之為量子觀
點的演化式演算法(Quantum-inspired evolutionary algorithm)。 
我們提出一個為期兩年的研究計畫來探討如何有效的結合演化式計算與量子計
 III
we want to study how to design a quantum-inspired evolutionary algorithm for solving 
famous combinatorial optimization problems.  
 
Keywords: Quantum superposition, quantum entanglement, quantum computing, 
evolutionary computation, quantum-inspired evolutionary algorithm, evolutionary quantum 
algorithm 
 1
壹、報告內容 
一、前言 
   我們先從計算機的速度講起。隨著計算機的快速發展，例如：Intel Core 2 
Duo T9600 處理機速度已達到 2.8GHz，因此求解複雜數學問題的困難度也逐漸
降低。隨著人類對於資訊的需求與日俱增，過去三十多年來，幾乎每隔不到兩
年的光景，電腦的速度就會加快一倍，而晶片上的電晶體數目也隨著時間呈指
數成長，目前已是奈米技術的時代。根據摩爾定律，再過數十年電腦的儲存單
元將會到達單原子層次，在這樣微小的世界裡，無可避免的會造成電路間的相
互干擾，系統溫度會急速升高、能量耗損也會大量增加。這種現象會造成電腦
無法正常運作，這是當今電腦系統必須面對的危機。我們從物理的角度來看，
這種現象是電子在電路中的行為不再服從經典力學規律，取而代之的將是量子
力學。量子力學是二十世紀初期與相對論並列的兩大近代物理理論，量子力學
描述原子世界的物理特性，而相對論則是描述高速（接近光速）粒子的物理現
象。它們都是為人類奠定瞭解自然界奧秘的理論基礎，包括了從最小構成物質
的夸克，到最大關於宇宙的產生及演變，都是它們涵蓋的範圍。量子力學對於
過去半個世紀的工業技術發展也發揮了不可忽視的作用，從半導體技術的進
步，各種新材料的發現，甚至到最近的奈米科技都有它的貢獻。物理學家相信：
當傳統電腦所使用的晶片精密度已經小到極限的時候，衹有量子力學，才能使
電腦的發展再有突破。因此，資訊科學的下一步必須借助於量子力學的原理和
方法，發展量子計算與量子電腦。 
關於量子計算與量子電腦的緣起敘述如下。1980 年美國阿岡 (Argonne) 
國家實驗室的 Paul Benioff 提出利用量子物理的二態系統來模擬二進位數位系
統，他認為利用量子力學可以設計出更有效能的計算工具。1982 年，美國物理
學家 Richard Feynman 引申這個概念後，開始吸引一些學者注意到量子力學與
資訊科學的關聯。到了 1985 年，英國牛津物理學家 David Deutsch 發表一篇關
於 Quantum Church-Turing Machines 的論文，這時量子計算開始有了數學的雛
型，只不過當時 Deutsch 所陳述的量子計算的範例過於簡單，以致於沒有激起
太大的波瀾。直到 1994 年，AT&T 貝爾實驗室的應用數學家 Peter Shor，於當
年 IEEE 基礎計算理論的年會發表一篇關於 “快速質因數分解的量子計算演算
法” 的文章後，量子計算的潛力迅速引起廣泛的注意，也將量子計算帯入一個新
的發展境界。這個質因數分解的量子演算法被稱為 Shor’s algorithm，是一項突
破性的工作，因為如果能夠對任意極大的整數做快速的質因數分解，那就可以
用來破解目前普遍被採用的 RSA 密碼系統。量子演算法最大的特點在於它有可
能將 NP 問題變成 P 問題，這意味著 NP-complete 的問題有可能在多項式時
間內求解。Shor 的開創性工作導致今日量子資訊科學的研究熱潮，它是物理、
應用數學與資訊科學相結合的新興領域，其未來發展會對整個電腦科技與計算
 3
二、研究目的 
  這個研究計劃的目的是想探討如何有效的結合演化式計算 (evolutionary 
computation) 與 量 子 計 算  (quantum computing) ， 利 用  quantum-inspired 
computing 的優勢，設計有效率的量子相關演化式演算法來求解一些著名的組合
最佳化問題，降低原來演化式演算法所需要的計算複雜度。第一年我們研究於
演 化 式 計 算 加 入 量 子 的 特 性 ， 稱 之 為 量 子 觀 點 的 演 化 式 演 算 法 
(Quantum-inspired evolutionary algorithm)。演化式計算有三種主要的理論運算模
式：演化式規劃 (evolutionary programming)、演化策略 (evolution strategy)、以
及基因演算法 (genetic algorithms)，其中以基因演算法較為重要也廣為人知。基
因演算法已被廣泛的應用於搜尋問題、機器學習、以及求解組合最佳化問題，
因此我們選擇在基因演算法加入量子力學的觀點，利用量子計算的優勢，來求
解組合最佳化問題。第二年我們接著研究將傳統的演化式演算法設計成量子演
算法，稱之為演化式的量子演算法 (Evolutionary quantum algorithm)，研究 Shor 
與 Grover 演算法以及 Moore’s extension，利用量子疊加、量子糾纏、量子平行
處理等特性，以計算機率振幅分布的方式在傳統計算機內模擬量子計算的執行
效能，探討量子演算法求解組合最佳化問題的潛力。David Deutsch 曾證明 
Quantum Turing Machine 能夠模擬任何古典的 Turing machine 也可以模擬任何
量子電腦的運作，他認為量子電腦具有平行處理能力，能夠於多項式時間克服 
NP-complete 或 NP-hard 問題。我們利用這種優勢，給予適當的初始狀態，經
過特別設計的么正變換作用，可同時產生指數數目的所有可能答案，這些可能
的答案是以某種線性組合方式寫在一個量子態。量子演算法就是透過機率振幅
的計算，如果設計得好的話，例如 Shor 與 Grover 演算法，會有很高的機率測
量到正確的答案。 
 
三、文獻探討 
1996 年英國的 Moore 與 Narayanan 提出 quantum-inspired computing 
的觀念後，他們接著提出 quantum-inspired genetic algorithms [27]，這是一種新
發展的機率演化計算的演算法。他們利用多重宇宙 (multiverse) 的概念來詮釋量
子現象，每一個宇宙有自己的 population，各自遵守古典的演化規則來同時進行
演化，只有進行 interference crossover 才會發生宇宙間的相互干擾情況。2002 年
南韓的 Han 與 Kim [13, 16, 17] 提出 quantum-inspired evolutionary algorithm，
他們使用 qubit 為最小的資訊儲存單元，每一個 individual 是一串 qubit string 
的機率表示法，他們定義 Q-gate 做為演化運算子。每一個 individual 代表多種
疊加狀態，當每一個 qubit 接近 0 或 1 時，這個 qubit chromosome 會收斂成
為單一狀態，原來的多樣性完全消失。Han 與 Kim 使用這個 quantum-inspired 
evolutionary algorithm 來求解 0/1 背包問題而得到不錯的答案 [14]。2004 年中
 5
量子計算中將量子態連結在一起的記號稱為 ”tensor product”，寫成 ⊗。若
我們想將十進位數的 6，用二進位來表示，可透過 3 個 qubit 的結合表示成 
|1>⊗ |1>⊗ |0> = |110> = |6>。因此，對於 2 個 qubits 而言，該系統狀態的基底
為: |0>⊗ |0>，|0>⊗ |1>，|1>⊗ |0>，|1>⊗ |1>，簡單記為: {|00>, |01>, |10>, |11>}。
3 個 qubits 狀態空間的基底為 {|000>, |001>, |010>, |011>, |100>, |101>, |110>, 
|111>}。一般來說，具有 n 個 qubits 的系統，其狀態空間有 n2  個基底向量。 
 依此我們可以知道線性疊加的原則如下：假設系統有 n 個 eigenstates (正交
基底)，令為 |ψ0>, |ψ1>, |ψ2>, …, |ψn-1>，那麼可能存在的疊加態是 
            ∑−
=
>>=
1
0
||
n
i
ii wψψ  
wi 是系統處於狀態 |ψi> 的機率，我們可根據機率來詮釋這個疊加態，wi 的值
愈大則更多的  eigenstate |ψi> 存在狀態向量  |ψ> 中。其次是量子糾纏態 
(entanglement)。簡單的說，如果相互聯結的量子態不能被分解為單一的 qubit，
也就是量子態無法被分解為 tensor product 的乘積時，這就是量子的糾纏態。例
如： 2/)11|00(| >+>  是量子糾纏態，當我們對第 2 個 qubit 做測量，其結
果會影響到第 1 個 qubit。這個情況如下所述：若沒有對第 2 個 qubit 進行測
量，第 1 個 qubit 測量結果為 |0> 的機率為 50%。假設測量第 1 個 qubit 之
前，我們已經對第 2 個 qubit 進行測量。如果測量的結果為 |0>，則第 1 個 
qubit 測量結果為 |0> 的機率為 1，如果測量的結果為 |1>，那麼第 1 個 qubit
為 |0> 的機率是 0。由此可以看出第 1 個 qubit 的測量結果為 |0> 的機率和第 
2 個 qubit 的測量結果有關。依此可知，當 n 個 qubits 的複合狀態 |ψ> ≠ 
|ψ1>|ψ2> …|ψn> 時，這個狀態就是處於糾纏態。當長度為 3 的 chromosome 於
演化過程中的振幅數值為 [(
2
1 ,
2
1 ), (
2
1 ,
2
1− ), (
2
1 ,
2
3 )]，這個 chromosome 
代表 8 種可能的量子疊加態是： 
>000|
4
1 + >001|
4
3 − >010|
4
1 − >011|
4
3 + >100|
4
1 + >101|
4
3 − >110|
4
1 −
>111|
4
3 。根據機率來詮釋，此 chromosome 代表 |000> 的機率是 1/16，代
表 |001> 的機率是 3/16，代表 |010> 的機率是 1/16，代表 |011> 的機率是 
3/16，餘類推。由此可見疊加的作用代表著 chromosome 具有多樣性。 
於量子計算用來執行運算的單元，稱為 ”量子邏輯運算閘” 是可逆的運算，
可對應到數學上的一個么正矩陣 ( Unitary matrix)。令么正矩陣為 U，U 作用於 
qubit 的基本態會滿足 U÷U = UU÷ = I，U÷ 是 U 的 Hermitian adjoint。單一 qubit 
的邏輯運算閘有：Hadamard (H), Pauli-X (X), Pauli-Y (Y), Pauli-Z (Z), Phase (S) 
與 π/8 (T) 等等，這些都是我們用來設計 quantum-inspired computing 的一些重
 7
are defined as follows; 
〉ΨA  Q∧  〉ΨB  = 〉ΨA  iff 〉ΨA  Q≤  〉ΨB  
〉ΨA  Q∨  〉ΨB  = 〉ΨB  iff 〉ΨA  Q≤  〉ΨB  
 
定義 4. Let 〉Ψ  = 〉0α  + 〉1β  be a superposition. Then we define a unary 
operation Q~  as follows; 
〉ΨQ~  = 〉0β  + 〉1α . 
 
定理. Let Q be a set of superposition, that is, Q = { 〉Ψ | 〉Ψ  = 〉0α  + 〉1β , 2α + 
2β  = 1}. Then, {Q, Q~ , Q∧ , Q∨ } forms Kleene Algebra. 
Followings are axioms of Kleene Algebra. For A, B, C ∈ Q 
(1) The idempotent law: A Q∧  A = A, A Q∨  A = A 
(2) The commutative law: A Q∧  B = B Q∧  A, A Q∨  B = B Q∨  A 
(3) The associative law: A Q∧  (B Q∧  C) = (A Q∧  B) Q∧  C, 
                    A Q∨  (B Q∨  C) = (A Q∨  B) Q∨  C 
(4) The absorption law: A Q∨  A Q∧  B = A, A Q∧  (A Q∨  B) = A 
(5) The distributive law: A Q∧  (B Q∨  C) = (A Q∧  B) Q∨  (A Q∧  C), 
                    A Q∨  (B Q∧  C) = (A Q∨  B) Q∧  (A Q∨  C) 
(6) The double negation law: Q~ ( Q~ A) = A 
(7) The De Morgan’s law: Q~ (A Q∨  B) = Q~ A Q∧  Q~ B, 
                      Q~ (A Q∧  B) = Q~ A Q∨  Q~ B 
 9
數學上的一個么正轉換矩陣，這個矩陣作用於向量時會產生其他的向量，而達
到演化的目的。根據傳統基因演算法 (SGA) 的理論，母體會有多種不同的 
schemata 存在，若母體包含有較優的 schemata，則於演化過程容易收斂到全體
最佳解上。反之，若沒有較優的 schemata，就需要靠 mutation 要歷經更長的演
化時間才能夠收斂到全體最佳解。然而在我們的 QGA 理論上只考慮單一 
schema，因為此 schema 已含有全體最佳解，它是以機率方式以疊加型態呈現
的。我們需要設計適用的旋轉運算當作量子邏輯運算閘，來將最佳解遺傳到下
一世代，又能保持其多樣性。 
令 Q 代表量子染色體組成的母體 (population)，Q(t) 代表第 t 個世代所代表的
母體，母體的大小規模為 n。Q(t) 的結構是：Q(t) = 1 2,  ,  ... ,t t tnq q q 。 
一、產生 Q(0) 之初始值，對每一個 0iα ， 0iβ  先設定為 1/ 2 ，每一個量子染
色體 0kq ，k = 1, 2 , …, n 其狀態是所有具有相同機率的線性疊加，寫成 
0| kq >= 
2
1
1 |
2
n
jnj
X
=
>∑ ， jX  是二元串列 (x1, x2, … , xn) 的第 j 個狀態，其中 xi 
的值為 0 或 1 要根據 0 2| |iα  或 0 2| |iβ  的機率來決定。 
 
二、利用得到的 Q(0) 機率狀態來產生 P(0)。P 是代表二元串列 (x1, x2, … , xn)，
P(0) 代表第 0 個世代。於 P(0) 中對 xi 進行計算與評估來得到個別染色體的
適應值。 
 
三、開始進行演化程序，從 t = 1, 2, 3, …，每一世代的產生是根據 Q(t – 1) 的
機率狀態來得到 P(t) 的。 
 
四、使用量子閘的運算來更新 Q(t)。最基本的量子閘是旋轉一個 θ 角度，其作
用定義如下： 
 
              ⎥⎦
⎤⎢⎣
⎡
*
*
i
i
β
α
 = ⎥⎦
⎤⎢⎣
⎡
)cos()sin(
)sin(-)cos(
 θθ
θθ
⎥⎦
⎤⎢⎣
⎡
i
i
β
α
 
其中 θ 是量子旋轉的變異角度，是將量子染色體中的每一對 ) ,( ii βα 產生新的 
 11
問題 3：Maximize )(3 xf = 100.98 − ∑ = −+ 251 211 ),(1
1
j j
xxg
k
 , where ),( 21 xxg j = 
jc + ∑= −2 1 6)(i iji ax , where −65.536 ≤ ix ≤ 65.536, K = 500, jc = j, and 
][ ija = ⎢⎣
⎡
−
−
32
32
32
16
−
−
32
0
− 32
16
−
−
32
32
−
−
16
32
−
−
16
16
−
−
...
...
32
0
32
16
⎥⎦
⎤
32
32
. 
The global maximum value is 100 at ( 1x , 2x ) = (−32,−32). 
 
問題 1 的最佳解是當 x1 = 1, x2 = 1，此時函數的最大值為 100。我們分別執行 
QGA 與 SGA 程式，程式的 generation 分別從 100 逐漸增加到 1700，每一次
以 100 增量，每一個 generation 共執行 10 次後取其平均值。圖 1 就是程式執
行的結果，圖中 QGA 以實線表示，而 SGA 以虛線表示。從圖 1 可看出，SGA 
直到 generation 1500 以後才得到最佳解，而 QGA 於 generation 900 就可獲得
最佳解。明顯的 QGA 的效率高過於 SGA。不過不可否認的是 QGA 的運算比 
SGA 複雜，就運算而言它需要較多的執行時間。但是於整體的演化過程，QGA 
收斂速度比 SGA 快很多。 
問題 2 函數的最佳解是 30，執行程式時我們仍然從 generation 100 逐漸增加到 
generation 1700，每一個 generation 也是執行 10 次後取其平均值。圖 2 是程
式執行的結果，QGA 以實線表示，而 SGA 以虛線表示。SGA 到 generation 
1400 才得到最佳解，而 QGA 於 generation 700 就可獲得最佳解。此例可驗証 
QGA 的收斂性。 
問題 3 的最佳解是當 x1 = −32, x2 = −32，函數的最大值為 100。由於此函數比
較特殊，型態不同於前兩個問題，因此我們略做調整，將程式的 generation 從 
150 開 均值。我們也調整旋轉角度 θ 以利 QGA 之執行。圖 3 顯示執行的結
果，仍舊 QGA 以實線表示 SGA 以虛線表示。SGA 到 generation 2400 才得
到最佳解，而 QGA 於 generation 1350 就可獲得最佳解。於此問題，我們觀察 
QGA 於執行初期，會有各種狀態以多樣性的機率方式存在於母體中，其中當然
也包括最佳解。圖 4 是顯示母體中適應值於第 10 個 generation 時從 60 到 
100 的機率狀態分佈概況。QGA 於執行時每一狀態的存在機率會有變化，如果
旋轉角度 θ 做適當調整，最佳解存在母體的機率值會隨著世代增加而遞增。我
們以問題 3 為例，說明每一世代最佳解的平均機率。從圖 5 可看出 QGA 的
執行效率，最佳解的機率是快速遞增的，這比 SGA 好很多。這是因為 QGA 有
對前一代的最優的個體進行量子運算子的更新運作。 
 
 13
          
60
65
70
75
80
85
90
95
100
  
圖 4.適應值於第 10 個 generation 時從 60 到 100 的機率狀態分佈概況。 
 
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
Generations
Pr
ob
ab
ilit
y
 
圖 5. QGA 執行時最佳解的機率是快速遞增的，這比 SGA 好很多 
 
 
六、結論與未來研究方向 
     本研究計劃探討如何有效的結合演化式計算與量子計算，利用 
quantum-inspired computing 的優勢，設計有效率的量子相關演化式演算法來求解
最佳化問題，能降低傳統基因演算法所需要的計算複雜度。目前我們已經完成
下列工作： 
 15
正轉換，必須另外想辦法解決。方法之一是保留輸入的資料，也就是進行可逆
運算。可逆運算要求先保留輸入暫存器的值。因此量子電腦需要兩個量子暫存
器：一個存放輸入資料，一個存放輸出資料。 Shor’s algorithm 就是把所有的 
qubit 分成輸入 |x> 及輸出 |y> 兩個量子暫存器，每一個暫存器的規模必須與
所要分解的整數一樣大，以二進位方式儲存。因此明顯的每一個  quantum 
individual (chromosome) 需要兩個量子暫存器，第  1 個儲存  quantum 
individual，第 2 個儲存 fitness。這兩種暫存器就分別稱為 individual register 與 
fitness register。當一個 population 有 N 個 quantum individual，需要有 2N 個
量子暫存器。於演化過程，fitness register 可能儲存單一數值或者是一些數值的
疊加態，這就是量子計算的優勢。 
關於設計量子演算法我們初步的觀點是：(1) 欲求解的問題必需能夠轉換成
數值型式，(2) 要決定好最初的環境狀態，(3) 終止條件需要明確的陳述，(4) 欲
求解的問題能夠很容易的細分為較小的問題，(5) 使用多宇宙詮釋時必需要確定
宇宙的數目，(6) 原則上每一個宇宙處理一個子問題，(7) 所有宇宙的計算是同
時進行的，(8) 宇宙間會有某種型式的相互作用。 
 
 
貳、參考文獻 
1. A. Barenco, “Quantum physics and computers”, arXiv:quant-ph/9612014 v2, 
Dec, 1996. 
2. P. Benioff, “The computer as a physical system: A microscopic quantum 
mechanical Hamiltonian model of computers as represented by Turing 
machines”, Journal Statistical Physics, vol. 22, pp.563-591, 1980. 
3. P. Benioff, “Quantum Mechanical Models of Turing Machines That Dissipate No 
Energy,” Physical Review Letters, American Physical Society, vol. 48, no. 23, pp. 
1581-1585, Jun. 1982. 
4. C. H. Bennett and R. Landauer, “The fundamental physical limits of 
computation”, Scientific American 253 (1), pp. 48-56, 1985. 
5. D. Deutsch and A. Ekert, “Quantum Computation”, Physics World, 1998. 
6. D. Deutsch, “Quantum theory, the Church-Turing principle, and the universal 
quantum computer”, Proceedings Royal Society London, VI. A400, pp.97-117, 
1985. 
7. A. Ekert and R. Jozsa, “Quantum computation and Shor’s factoring algorithm”, 
Reviews of Modern Physics 68, pp. 733-753, 1996. 
8. R. Feynman, “Simulating physics with computers”, International Journal of 
Theoretical Physics, 21 (6/7), pp. 467-488, 1982. 
9. S. B. Garavaglia, “A Quantum-inspired Self-Organizing Map,” in Proceedings of 
 17
22. Y. Li, Y. N Zhang, R. C. Zhao, and L. C. Jiao, “An edge detector based on 
parallel quantum-inspired evolutionary algorithm”, Proceedings of the Third 
International Conference on Machine Learning and Cybernetics, Shanghai, 
pp.4062-4066, 2004. 
23. Y. Li, Y. N Zhang, R. C. Zhao, and L. C. Jiao, “The immune quantum-inspired 
evolutionary algorithm”, Proceedings of the 2004 IEEE International Conference 
on Systems, man and Cybernetics, pp.3301-3305, 2004. 
24. M. Lukac and M. Perkowski, “Evolving Quantum Circuits using Genetic 
Algorithm,” in Proceedings of the 2002 NASA/DOD Conference on Evolvable 
Hardware, Piscataway, NJ: IEEE Press, pp. 177-185, Jul. 2002. 
25. Z. Michalewicz, Genetic Algorithms + Data Structures = Evolution Programs, 
3rd, revised and extended ed. Berlin: Springer-Verlag, 1999. 
26. T. Menneer and A. Narayanan, Quantum-inspired Neural Networks. Technical 
report, Department of Computer Science, University of Exeter, UK, 1995. 
27. M. Moore and A. Narayanan, “Quantum-inspired computing”, Technical report, 
Department of Computer Science, University of Exeter, Exeter EX4 4PT, UK., 
1995. Research Report 341, available via http://www.dcs.exeter.ac.uk. 
28. A. Narayanan and M. Moore, “Quantum-inspired genetic algorithms”, 
Proceedings of IEEE International Conference on Evolutionary Computation, pp. 
61-66, 1996. 
29. A. Narayanan, “Quantum Algorithms”, Department of Computer Science, 
University of Exeter, Exeter EX4 4PT, UK, 1996.  
30. A. Narayanan, “Quantum computing for beginners”, in Proceedings of the 1999 
Congress on Evolutionary Computation, IEEE press, Piscataway, NJ, pp. 
2231-2238, July, 1999. 
31. A. Narayanan, “Quantum computing for beginners,” in Proceedings of the 1999 
Congress on Evolutionary Computation, Piscataway, NJ: IEEE Press, vol. 3, pp. 
2231-2238, Jul. 1999. 
32. M. A. Nielsen and I. L. Chuang, Quantum Computation and Quantum 
Information. Cambridge University Press, 2000. 
33. J. Preskill, Lecture Notes for Physics 229: Quantum Information and 
Computation. Department of Physics, California Institute of Technology, Sep 
1998. http:// www.theory.caltech.edu/ preskill/ ph229. 
34. P. W. Shor, “Introduction to quantum algorithms”, arXiv:quant-ph/0005003 v2, 
July, 2001. 
35. P. W. Shor, “Algorithms for quantum computation: Discrete logarithms and 
factoring”, Proceedings of the 35th Annual Symposium on the Foundations of 
Computer Science, pp. 124-134, 1994. 
 行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                         民國 96 年 9 月 16 日 
報告人姓名 林豐澤 服務機構
及職稱 
中國文化大學 應用數學系 
教授 
     時間 
會議 
     地點 
96 年 9 月 5 日至 9 月 7 日 
日本福岡縣熊本市 
本會核定
補助文號
95-2221-E-034 -013 -MY2 
會議 
名稱 
 (中文) 第二屆創新計算、資訊、與控制國際會議 
 (英文) The Second International Conference on Innovative Computing, Information 
and Control (ICICIC2007) 
發表 
論文 
題目 
 (中文) 求解具有模糊弧長的最短路徑問題的一種兩階段基因演算法 
 (英文) A Two-Stage Genetic Algorithm for Solving Shortest Path Problem 
with Fuzzy Arc Lengths 
附件三
 
大會於 9 月 4 日晚上 18:30 到 20:00 舉行歡迎酒會 (Welcome reception)，所有參加會
議的學者、專家群聚一堂，彼此相互介紹認識並交換名片或交換研究心得。此次大會考
慮周到，特別安排與會的來賓體驗日本傳統的茶道 (Japanese tea ceremony)，由專人示
範。大會也提供免費的阿蘇火山  (Aso volcano) 英文導覽以及洗露天溫泉等旅遊，還有
參觀當地著名的日本三大名城－熊本城。9 月 5 日晚上舉辦日本傳統音樂－ 13 弦琴與
洞簫表演，供與會學者與市民欣賞，表現出日本人熱忱的待客之道。9 月 6 日晚上 18:30 
到 20:30 在熊本市的 Hotel Castle 舉行晚宴 (Banquet)，由於註冊人數超過 500 人，故
席開 50 桌以上，晚宴是西式與日式自助餐方式，由於場地的空間限制，大家站立圍著
圓桌吃東西。於餐會進行中頒發 Best Paper Awards，共有包括日本、中國、與臺灣等 5 
篇論文得獎。晚宴中還穿插日本的民族燈籠舞蹈助興。會議結束後我於 9 月 8 日由福
岡搭機返回台灣。 
 
二、與會心得 
此次承蒙國科會的經費補助，減輕不少負擔，大會 keynote speech 由 Professor Harold 
Szu 演講 Innovative Computing for Homecares，主要是探討其團隊所提出的觀點： BMW
(Bio-medical Wellness) 用來檢測身體的健康狀態，這與目前主流醫學以檢測疾病罹患偵
測病情之作法有所不同，屬於特殊之見解。Professor Harold Szu 將由成功大壆醫壆院特
聘客座ㄧ年，他也將與臺大醫學院合作做更進一步的研究，此次能夠聆聽他最新的研究
心得，誠屬榮幸。本次會議，每一 section 每位發表者只有 15 分鐘的時間，一般來說，
speaker 很少可以完整的在時間內講完準備的投影片。在我發表的 session，有一位來自
荷蘭 Delft University of Technology 名叫 Ciftcioglu 的教授，他的研究是做 Sensor data 
fusion in autonomous robotics，雖然英文不是他的母語，不過他卻講得很好，咬字與發音
都很清晰，顯然他對於英文演講技巧下了一番功夫。這是我要學習的地方。這次大會精
心的安排各種參觀與觀摩活動，讓所有與會者體驗日本傳統文化與熱忱的待客之道。在
會場安排了不同時段的日本茶道表演，也提供免費的阿蘇火山旅遊以及英文導覽。安排
來賓體驗日本的溫泉文化，還有參觀當地著名的熊本城導覽。接著由著名的學者、也是
大會的主席之ㄧ Takesi Yamakawa 及其夫人 Tamae Yamakawa 演奏日本傳統音樂 13 弦
琴 (koto) 與洞簫 (shakuhachi)。由 Takesi Yamakawa 先利用 powerpoint 投影片做曲目
的歷史背景解說後再行演奏，這稱之為 lecture concert。曲目從 16 世紀到 20 世紀的
日本傳統音樂，包括著名的虛無僧旋律與美國的 amazing grace，據說這是他們慶祝熊本
城建城 400 週年紀念的系列活動之一，令我留下懷念不已極為深刻的印象。 
 
 
Session B11, ICICIC-2007-IS37 
Applied Statistics and Intelligent Computing (I) 
Session Chairs: Feng-Tse Lin, Chinese Culture University, Taiwan 
Takami Matsuo, Oita University, Japan 
 
B11-01, ICICIC-2007-IS37-001 
Simulated Life Test Plans with Type-I Interval Censoring for the Gamma Lifetime Model 
Wanbo Lu and Tzong-Ru Tsai 
Tamkang University, Taiwan 
 
B11-02, ICICIC-2007-IS37-002 
On Empirical Bayes Procedures for Selecting the Best Manufacturing Process Based on Process Capability Index 
Wen-Tao Huang and Yao-Tsung Lai 
Tamkang University, Taiwan 
 
B11-03, ICICIC-2007-IS37-003 
A Goodness-of-Fit Test for GEE Models with Binary Longitudinal Data Based on Smoothing Methods 
Kuo-Chin Lin and Yi-Ju Chen 
Tainan University of Technology, Taiwan 
 
B11-04, ICICIC-2007-IS37-004 
A Group Sequential Procedure for Continuous Longitudinal Data in Multi-Armed Trials 
Yi-Ju Chen and Kuo-Chin Lin 
Tamkang University, Taiwan 
 
B11-05, ICICIC-2007-0718 
LMI-Based Frequency Estimator with Averaging 
Kentaro Adachi, Haruo Suemitsu, and Takami Matsuo 
Oita University, Japan 
 
B11-06, ICICIC-2007-2450 
Research on the Method of Classification for an Underwater Target Based on Echo Highlight Number 
Huailin Cui, Zhaohui Liu, Shaohua Chen, and Zhishun Li 
Northwestern Polytechnical University, China 
 
 
A Two-Stage Genetic Algorithm for Solving Shortest Path Problem  
with Fuzzy Arc Lengths 
Feng-Tse Lin*, Ming-Gar Lee, and Ching-Fen Fuh
Department of Applied Mathematics, Chinese Culture University 
Yangminshan, Taipei 111, Taiwan 
Email*: ftlin@faculty.pccu.edu.tw
Abstract
This paper investigates solving the shortest path 
problem with fuzzy arc lengths using a two-stage 
genetic algorithm (GA). In the first stage, we try to 
simulate a triangular fuzzy number by distributing it 
into some partition points. In the second stage, we try 
to find out the best solution of the defuzzified shortest 
path problem using a two-population scheme. The 
empirical results show that the proposed two-stage GA 
can obtain very good solutions within the given bound 
of each imprecise arc length than other fuzzy shortest 
path approach.  
1. Introduction
One of the fundamental problems in the area of 
graph theory is constructing a shortest path on a given 
graph [9]. The analysis of fuzzy counterparts of the 
shortest path problem appears to have become a 
popular task in recent years [11]. The main advantage, 
compared to the crisp problem formulation, is that the 
decision-maker (DM) is not forced into a precise 
formulation. Thus, fuzziness can be introduced into a 
network in a variety of ways, e.g., through edge 
capacities, vertex restrictions, or arc lengths [1, 2, 5, 6, 
9].  
Dubois and Prade [3] first introduced the fuzzy 
shortest path problem in 1980. The major drawback of 
this fuzzy shortest path problem is the lack of 
interpretation. That is, a fuzzy shortest path is found but 
it may not correspond to an actual path in the network. 
This problem is circumvented with new models based 
on fuzzy shortest paths and multiple objectives 
presented by Klein [6]. He developed a hybrid 
multi-criteria algorithm based on fuzzy dynamic 
programming (DP), to solve these models. Mares and 
Horak [10] proposed that the uncertainty connected 
with the input data of a network can be described and 
investigated by means of fuzzy sets and fuzzy 
quantities theory. Okada and Soper [12] introduced an 
order relation between fuzzy number based on "fuzzy 
min" concept and that a nondominated path or Pareto 
optimal path from the specified node to every other 
node is defined. They then proposed an algorithm for 
solving fuzzy shortest path problems based on the 
multiple-labeling method for a multicriteria shortest 
path problem. Kung and Chuang [7] proposed a new 
algorithm to deal with fuzzy shortest path problem. It 
was composed of a fuzzy shortest path length procedure 
and a fuzzy similarity measure. The former is proposed 
to find the fuzzy shortest length and the latter is used to 
measure the similarity degree between fuzzy length 
sets.
In this study, however, we propose a GA approach 
to dealing with fuzzy shortest path problem instead. 
The proposed GA consists of two stages. In the first 
stage, we use GAs to simulate a triangular fuzzy 
number by distributing it into some partition points. We 
then use GAs to evolve the values in each partition 
point and the final values represent the membership 
grade of that fuzzy number. In the second stage, a 
two-population scheme is used to determine the fuzzy 
shortest path length from source node to destination 
node in the network. One population consists of 
feasible candidate solutions and the other population 
consists of infeasible solutions. The fuzzy shortest path 
concept of the proposed GA approach is different, but 
gives better results than the other fuzzy approach. 
2. The Formulation of The Problem 
In the shortest path problem, each arc in the 
network has a number, which is called the arc length. 
The problem can be given as follows. A network is an 
acyclic directed graph G = (V, E) with a weight 
function f: E o R mapping edges to real-valued 
numbers. The set V refers to the vertices of the graph 
and the set E refers to the edges of the graph. The 
length of a path from vertex i to vertex k, p = <i, i1,
i2 … , k>, is the sum of the weights (lengths) of its 
constituent edges. The problem is to find a shortest path 
from a given source vertex s  V to a given destination 
vertex n  V in a network.  
0-7695-2882-1/07 $25.00 ©2007 IEEE
arbitrary fuzzy set W~ . Thus, we obtain a discrete 
fuzzy set W~  = (P0, P1, …, Pt), each iP , i = 0, 1, … , t,
is a random number in [0, 1]. We wish to find an 
estimated value of w in [w – '1, w + '2] via GAs. After 
computing the centroid of the fuzzy number w~  which 
is defined on the discrete fuzzy set W~  =  (P0, P1, …, 
Pt), we obtain the estimated value w*. That is,  
w* = )(
0
¦
 
u
t
i
ii μp / ¦
 
t
i
iμ
0
.            (16) 
Following this concept, we obtain an estimated arc 
length *ijc  from the computation of the centroid of 
ijc~ .
At the beginning of first stage, an initial 
population of size n is randomly generated from [0, 
1]t+1 according to the uniform distribution in the closed 
interval [0,1]. Let the population be  
hW
~  = ),...,,( 10 thhh PPP  = 
t
hhh
ppp
t
P

P

P
...
10
10 ,
where h = 1, 2, …, n;
ihP  is a real number in [0, 1] 
and pi is a partition point in a given interval with i = 0, 
1, 2, …, t. Each individual hW
~ , h = 1, 2, …, n, in a 
population is a chromosome. Each chromosome hW
~ , h
= 1, 2, … , n, in the population is evaluated, according 
to (18), by creating the estimated value for each arc 
length. Then, the fitness value of each chromosome is 
obtained from (16). The chromosomes in the population 
can be rated in terms of their fitness values. The 
selection function that we use is the normalized 
geometric ranking. The genetic algorithm is terminated 
when a specified number of generations are reached.  
 Finally, the algorithm is terminated after K
generations are produced. Let the last population be 
*
1
~W , *2
~W , … , *~nW . The maximum value of fitness is 
the best chromosome in the population. The best 
chromosome represents the optimal solution for the 
problem. The estimated value of each fuzzy arc length 
ijc
~  in (2) is calculated as  
*
ijc  = )(
0
*¦
 
u
t
i
ihi μp / ¦
 
t
i
hiμ
0
*             (17)            
where ip  = cij – '1 + i u ('1 +'2) / t, , i = 0, 1, …, t,
which is defined on the interval [cij – '1, cij + '2]. 
3.2 The Second Stage 
In the second stage, we try to find out the best 
solution of the defuzzified shortest path problem 
provided by the first stage. In this stage, we have two 
populations for finding the best shortest path from the 
given problem instance. The first population contains 
only feasible solutions and the second population 
contains only infeasible solutions. Note that an 
infeasible solution means a non-existing path in the 
network. The GA checks every individual for its 
feasibility and puts it into the appropriate population. 
Genetic operators, i.e. crossover and mutation, are 
applied to the two populations separately during the 
evolution process. Feasible solutions in the first 
population are selected for creating better offspring. 
Infeasible solutions in the second population are 
selected for creating feasible solutions. Of course, 
feasible parents may produce infeasible offspring and 
infeasible parents may still produce infeasible offspring. 
On the other hand, infeasible parents may create 
feasible solutions that are different from those already 
in the first population. The population size of feasible 
solutions increases and the population size of infeasible 
solution decreases as the generation progress. The 
feasible population converges as its variance minimizes 
and the infeasible population converges as its 
population size unchanged. 
We take the strategy of replacing the worst individual 
of the new feasible population with the best individual 
of the current feasible population in this stage. This 
guarantees the preservation of the best individual at 
each generation. This strategy is usually referred as 
elitism [11]. The rest are chosen in classical way.  
4. Empirical Results 
  Consider the network shown in Fig. 1 where the 
numbers are arc lengths. 
Fig. 1 shows that V = {j | j = 1, 2, … , 8}, E = { <1, 2>, 
<1, 3>, <1, 4>, … , <7, 8>}, and c12 = 3, c13 = 2, c14 = 
4, …, c78 = 4. The shortest path from vertex 1 to vertex 
8 is 1 o 2 o 5 o 8 which has a total length f(1) = 13 
(hours). Now consider the fuzzy case. If the DM 
chooses the values of parameters: '12 = 0.5, '13 = 1, '14
= 0.8, '23 = 0.9, '25 = 1, '35 = 1.2, '46 = 1.3, '56 = 1.5, 
'58 = 0.8, '67 = 1, and '78 = 0.9, then the fuzzy numbers 
in the problem can be determined as 12
~c = (3  0.2, 3, 
3 + 0.7), 13
~c = (2  0.5, 2, 2 + 1.5), and so on. Thus, 
the network in Fig.1 becomes a fuzzy network with 
imprecise arc lengths.  
Next, we illustrate the proposed two-stage GA to 
solve the above shortest path problem with imprecise 
4
4
source
1
2
3
4
5
6
7
8
3
2
4
1
4
6
1
2
destination
6
Fig. 1. An example of the network and its shortest path.
