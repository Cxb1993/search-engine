2 
行政院國家科學委員會專題研究計畫成果報告 
多階狀態網路可靠度分析：成本限制及近似值演算法之研究 
Studies on Multi-state Network Reliability: Budget Constraint and 
Approximation Algorithm 
中文摘要 
網際網路、通訊網路、供應鏈網路、交通運輸網路及水電輸送網路等系統可透過作業研究領
域中的流量網路模式進行可靠度指標的分析與研究，以供管理者進行網路系統規劃、設計及
分析比較時之重要決策依據。本兩年期研究計畫針對二階及多階狀態流量網路系統，在考量
在成本/預算值 b 的限制下，起點 s 能透過網路系統成功輸送 d 單位需求量到終點 t 的多階狀
態點對點可靠度問題。研究重點包括(1)建立二階及多階狀態的($b,d)-flow，及(2)推導具有預
算限制的二階及多階點對點成本可靠度之直接、有效率的正確演算法。相較現有的演算法中，
廣為採用的直接分解法有可能導致不正確結果，而其餘方法則把單一 NP-hard 問題複雜化成
兩/三個 NP-hard 問題。本研究撰寫程式，並以大型流量網路系統進行試驗，驗證本研究所提
出的方法確實較既有方法來的有效率。本研究在學術及實務上有其重要性及研究價值。 
 
關鍵詞：流量網路，點對點可靠度，預算限制，正確演算法 
 
Abstract 
Network models are generally used for analyzing the real world systems. A practical and 
important index of the system performance is the NP-hard two-state/multi-state two-terminal 
reliability (2TR). Both direct and indirect methods have been proposed to solve the 2TR. A 
straightforward method is enumerating all possible system states. However, it is computationally 
expensive. The state space decomposition algorithm proposed by Doulliez and Jamoulle is the most 
popular direct method. Unfortunately, it is shown to be incorrect. Most of the indirect methods are 
based on the two-state/multi-state minimal paths/cuts. Such methods are impractical since they 
solve the NP-hard 2TR problem in terms of two/three NP-hard problems. This two-year project is 
aimed at: (1) constructing two-state/multi-state ($b,d)-flow, and (2) proposing an direct and efficient 
method to solve the 2TR problem under budget constraint c. Conducted computational experiments 
verify the superiority of the proposed algorithms over the existing algorithms. 
 
Keywords: Flow network, Two-terminal reliability, Budget constraint, Hybrid algorithm 
 
4 
are given in advance. Once all multi-state ($b,d)-minimal paths/cuts are identified, R is computed by 
employing the inclusion-exclusion principle. Although the above algorithms can be applied to compute the 
R$b,d in cases wherein each arc has only two states, the search for all binary-state minimal paths/cuts, all 
binary-state d-minimal paths/cuts, all binary-state ($b,d)-minimal paths/cuts, and the inclusion-exclusion 
principle are NP-hard problems. Therefore, R$b,d is computed in terms of four NP-hard sub-problems. All 
existing algorithms are tedious, impractical, and inefficient; thus, the development of a direct and practical 
algorithm is desirable. This paper presents a novel decomposition method for the straightforward 
computation of R$b,d. The proposed algorithm is a hybrid approach intermediate between the recent 
decomposition algorithm presented by Jane and Laih (2004) and the polynomial-time capacity-scaling 
algorithm presented by Edmonds and Karp (1972). To the best of our knowledge, it is the only algorithm that 
can compute R$b,d directly and practically. 
The remainder of this paper is organized as follows: Section 2 introduces the flow network model and 
the principle of decomposition. Section 3 describes the hybrid algorithm, constructs the proposed method, 
and analyzes its computational complexity and memory storage requirement. Section 4 presents an example 
to illustrate the theoretical algorithm. Computational experiments are conducted in Section 5 to compare the 
proposed algorithm with existing algorithms. Finally, Section 6 provides some concluding remarks. 
2. Network model and decomposition principle 
A flow network G = [N, A] consists of a set N of m nodes and a set A of n directed arcs. Each arc e is 
associated with an operational reliability pe, capacity ue, and cost ce. When e is operational, the amount of 
material to be sent through it is limited by the non-negative integer capacity ue and the cost per unit of the 
material sent through it is ce. When e is not operational, no material can be sent through it. Nodes s and t are 
distinguished as the source and destination, respectively. A flow on G is a real-valued function f on its arcs 
that satisfies the capacity and flow conservation constraints. The value |f| of a flow f is the net flow coming 
out of t; the cost of f is C(f) = eAf(e)ce. For a pre-specified budget $b and demand d, performance index 
R$b,d is defined as the probability that network G admits a flow f on it such that the following conditions are 
satisfied: C(f )  $b and |f|  d. 
A product P, expressed as a multiplication of symbols, is an event of the system. For example, P = kji  
implies that arc j is reliable (i.e., j is operational), arcs i and k are unreliable (i.e., i and k are not operational), 
and other arcs are stochastic (i.e., they can be either reliable or unreliable). P splits arc set A into three 
disjoint subsets Ar(P), Au(P), and As(P) by i   Ar(P), j   Au(P), and k   As(P) if and only if i is reliable, 
j is unreliable, and k does not appear in P. For P = kji , Ar(P) = {j}, Au(P) = {i,k}, and As(P) = A\{i,j,k}. In 
other words, sets Ar(P) and Au(P) comprise the reliable and unreliable arcs, respectively, from P; As(P) is the 
set of stochastic arcs with respect to P; and Ar(P)  Au(P)  As(P) = A. The probability of product P is Pr(P) 
= )-(1
)()( ePAeePAe
pp
ur 
 . Two products P and Q are disjoint if and only if there is an arc e such that either e 
is reliable in P but unreliable in Q or e is unreliable in P but reliable in Q, i.e., e   Ar(P)  Au(Q) or e   
Au(P)  Ar(Q). Product P is reliable if there exists a flow f on network [N, Ar(P)] satisfying C(f)  $b and |f|  
d. Product P is unreliable if no flow f exists on network [N, A\Au(P)] satisfying C(f)  $b and |f|  d 
simultaneously. If P is neither reliable nor unreliable, it is stochastic. For the sake of convenience, r-product, 
u-product, and s-product are used to denote reliable, unreliable, and stochastic products, respectively. With 
6 
(1) if C(f1)  $b and |f1| = d, P is a reliable product and  
(2) if C(f2) > $b or |f2| < d, P is an unreliable product. 
In previous section, we stated that if P is neither reliable nor unreliable, it is stochastic. Since the 
classification of a product is made by employing Edmonds and Karp’s polynomial-time capacity-scaling 
algorithm, the following theorem holds true: 
Theorem 2 The classification of a product P as a reliable, unreliable, or stochastic product can be made in 
O(dnlogm) time, where m and n are the numbers of nodes and arcs, respectively.  
3.2. Searching for a ($b,d)-path 
With respect to an s-product P, the following theorem verifies that there exists at least one ($b,d)-path 
that can be obtained in O(n) time, where n is the number of arcs in set A.  
Theorem 3 With respect to a s-product P, let f be a minimum cost maximum flow from s to t* on [N, 
A\Au(P)]+. Let us assume A(P) = {e | f(e) > 0, e  As(P)}. Subsequently, 
(1) A(P) is nonempty, 
(2) A(P) is a ($b,d)-path, and  
(3) A(P) can be obtained in O(n) time. 
3.3. The hybrid algorithm 
The proposed algorithm utilizes storage S for storing products. First, the initial s-product , for which 
Ar() = Au() =  and As() = A, is put into S. Until S becomes empty, the proposed algorithm recursively 
retrieves product P from S, and classifies it as reliable, unreliable, or stochastic based on Theorem 1. If P is 
reliable, R$b,d is replaced by R$b,d+Pr(P). If P is unreliable, it is suspended. Otherwise, in the case of a 
stochastic P, a ($b,d)-path A(P) = {d1,d2,…,dnP} is derived based on Theorem 3. According to equation (2), P 
is decomposed into sub-products P
Pn
ddd ...21 , P
1 = P 1d , and Pi = P ii dddd 121 ...   for 1 < i  nP. Products P1, 
P2, …, PnP are put into S, and R$b,d is replaced by R$b,d + Pr(P
Pn
ddd ...21 ).  
To save the space requirement of S, a collection with respect to P is stored instead of { P1, P2, …, PnP }. 
Since each Pi is derived from P and a ($b,d)-path A(P), a collection with respect to P includes P, A(P), a 
number I = nP, and an index i with an initial value of 1 (1  i  I). Namely, a collection is a set {P, A(P), I, i}. 
Index i denotes the product Pi that is currently considered for classification and further decomposition. The 
collections are stored in S as a stack, that is, last in first out. The moment Pi is considered, if i < I, i is 
updated to i + 1. Otherwise, if i = I, the topmost collection in S is discarded. The initial collection with 
respect to  is {P = , A() = , I = 0, i = 0}. The following represents the hybrid algorithm in 
pseudo-code notation: 
1 Input: N, A, $b, d. 
2 Procedure: 
3   S={Collection_1}, Collection_1={,,0,0}//The initial collection with respect to // 
4   R$b,d = 0 
5   while S   do 
6     {  Obtain the first P according to index i in the top collection of S//The first P is // 
7  if i < I then i is replaced by i+1 else the top collection of S is discarded 
8 
sub-problems. The hybrid algorithm is much superior to the algorithms proposed by Yeh (2005) and Lin 
(2006). 
Table 1. Comparison of the hybrid algorithm with existing algorithms. 
 The hybrid algorithm 
Algorithm of Yeh (2005) Algorithm of Lin (2006) 
Stage 1 Stage 2 Stage 3 Stage 4 Stage 1 Stage 2 Stage 3 Stage 4
CPU time 1528 1083 1564 1159 1273 1350 1687 1284 1509 
Total CPU 
time 1528 5079 5830 
R$1000,60= 0.6259 
Unit of the CPU time is 0.001 second. 
Stage 1: Yeh (Lin) searches all binary-state minimal paths (cuts). 
Stage 2: Yeh (Lin) searches all binary-state 60-minimal paths (cuts). 
Stage 3: Yeh (Lin) enumerates all ($1000,60)-minimal paths (cuts). 
Stage 4: Both Yeh and Lin employ inclusion-exclusion principle to solve R$1000,60. 
5. Conclusions 
The contributions of the paper to the literatures are twofold. First, the performance index R$b,d of 
logistics system is treated as a combination of distribution cost and delivery reliability. Such a performance 
index responds to The Logistics Performance Index and Its Indicators report (World Bank International 
Trade and Transport Departments, 2010) which emphasizes the importance of integrating reliability into 
logistics performance. Second, to evaluate R$b,d, we propose a hybrid algorithm intermediate between the 
decomposition algorithm of Jane and Laih (2004) for solving two-terminal capacity reliability and the 
capacity-scaling algorithm of Edmonds and Karp (1972) for solving the minimum cost maximum flow 
problem. To the best of our knowledge the hybrid algorithm is the only approach that can compute R$b,d 
directly and practically. For multi-state arcs, Lin (1998), Lin (2006), and Yeh (2005) have proposed 
algorithms for solving the similar problem under budgetary limitations. However, although such algorithms 
can be applied to compute R$b,d in cases wherein each arc has only two states, they are inefficient and 
impractical when it comes to computing R$b,d in terms of four NP-hard sub-problems.  
The proposed algorithm classifies each product as reliable, unreliable, or stochastic. With respect to 
each stochastic product, a ($b,d)-path is derived for dividing the product into disjoint sub-products. After all 
products are classified as either reliable or unreliable, and there are no stochastic products left, R$b,d is 
computed. In fact, R$b,d is the summation of the probabilities of all reliable products. To save storage space, a 
collection with respect to product P, rather than disjoint sub-products divided from P, is stored. As a result, 
only O(n2) memory space are needed. A small real logistics system illustrates the hybrid algorithm step by 
step to help readers realize the algorithm. Computational experiments, based on a large logistics system in 
the classical monograph of Ford and Fulkerson (1962), are conducted to compare the hybrid algorithm with 
algorithms of Yeh (2005) and Lin (2006) (after adjusted to suit for binary-state arcs cases). The 
computational results indicate that our method has been very efficiently in solving R$b,d and outperforms 
existing algorithms. 
References 
Aggarwal, K.K., 1988. A fast algorithm for the performance index of a telecommunication network. IEEE 
Transactions on Reliability 37(1), 65-69. 
Ahuja, R.K., Magnanti, T.L., Orlin, J.B., 1993. Network Flows: Theory, Algorithms, and Applications, 
Prentice-Hall, New Jersey. 
10 
Part II 
Evaluating the cost and reliability integrated performance of stochastic logistics systems 
1. Introduction 
In the report of The Logistics Performance Index and Its Indicators (2010), which was designed and 
implemented by the World Bank International Trade and Transport Departments every two years to improve 
the reliability of the indicators and to build a data set comparable across countries and over time, it is 
emphasized that “Even more than time and cost, logistics performance depends on the reliability and 
predictability of the supply chain.” and “The reliability of the supply chain is the most important aspect of 
logistics performance.” Responding to The Logistics Performance Index and Its Indicators report, Jane (2011) 
proposes a cost and reliability integrated index to evaluate the performance of logistics systems. Jane (2011) 
assumes the capacity of each arc in the logistics systems is a binary-state variable: good or failed. When arc 
is good, total amount of flow through it is limited by the capacity; when arc fails, no flow can be sent 
through it. In practical, arcs of a logistics system operate at various levels of performance, ranging from 
completely function to fail. The binary-state arc capacity model fails to represent the true behavior of the 
logistics systems faithfully (Lisnianski and Levitin, 2003). In this article, real world logistics systems are 
modeled as stochastic flow networks, in which arcs are associated with multi-state integer capacities, unit 
distributing costs, and operational probabilities. The cost and reliability integrated performance index R$b,d of 
logistics systems is the probability that system can successfully distribute, by way of multi-state arc 
capacities, a specified flow demand d from source to destination, under the requirement that the distribution 
cost should not exceed cost limitation $b. 
The minimum cost maximum flow of a flow network is a maximum flow from source to destination 
with the least possible cost. Determining a minimum cost maximum flow which has been studied extensively 
is one of the most fundamental problems in the network flow theory. Edmonds and Karp (1972) first 
presented a capacity-scaling algorithm for solving this problem in polynomial time. Meanwhile, the 
multi-state two-terminal reliability at demand level d (MS2TRd), which is defined as the probability that a 
demand of d units can be successfully supplied from source s to destination t through multi-state arcs, is a 
practical reliability index of the network system. Direct and indirect algorithms have been proposed to solve 
the NP-hard MS2TRd. The complete enumeration method solves this problem in an exact, straightforward 
manner. It enumerates all possible combinations of arc states, and it is computationally expensive. The 
popular decomposition method to solve MS2TRd is proposed by Doulliez and Jamoulle (1972). However, 
Alexopoulos (1995) points out that this well-known decomposition method may yield an incorrect answer. 
Recently, Jane and Laih (2008, 2010) present two direct, correct, and exact decomposition algorithms in 
terms of d-flows and d-cuts. As to the best of our knowledge, they are the only existing algorithms that solve 
the MS2TRd directly, correctly, and exactly. 
Based on all binary-state minimal paths/cuts, several authors (Aven, 1985; Jane et al., 1993; Lin et al., 
1995; Patra and Misra, 1996) have presented exact but indirect approaches to search for all multi-state 
minimal paths/cuts. The MS2TRd can be computed using the inclusion-exclusion principle if all multi-state 
minimal paths/cuts are known in advance. Unfortunately, searching for binary-state minimal paths/cuts, 
multi-state minimal paths/cuts, and the inclusion-exclusion principle are all NP-hard. As a result, indirect 
algorithms solve MS2TRd in terms of three NP-hard problems. Though Yeh’s recent algorithm (2005a) 
12 
Because flow fid through arc ai is upper bounded by its arc capacity uiX, it is noted here that fid  uiX for 
1in. However, it is not guaranteed that liX  fid for 1in. In the proof of Theorem 1, a ($b,d)-flow can be 
obtained by examining each arc in A as soon as the minimum cost maximum flow (from s to t*) algorithm 
has been executed. To find the minimum cost maximum flow of a flow network, efficient algorithms have 
been explored in the past three decades (Ahuja, 1997; Tarjan, 1983). The time required for searching a 
($b,d)-flow is stated in the following corollary.  
Corollary 1. By Edmonds and Karp’s capacity-scaling algorithm, a ($b,d)-flow is obtained in O(dnlogm) 
time, where m and n are the numbers of nodes and arcs, respectively. 
Consider the smallest and largest state vectors lX and uX in set X. If lX is acceptable (F*(lX)=d and 
C*(lX)$b), then all x in X are acceptable and X is acceptable. If uX is unacceptable (F*(uX)<d or C*(uX)>$b), 
then all state vectors xX are unacceptable and X is unacceptable. In case X is unspecified (i.e., X is neither 
acceptable nor unacceptable), we search a ($b,d)-flow (f1d, f2d,…, fnd) according to Theorem 1, and let Ad(X) = 
{ ai | ai  A & fid > liX } = {ar1, ar2, …, arq}. These ($b,d)-flow (f1d, f2d,…, fnd) and Ad(X) play key roles in the 
proposed algorithm. Existence of the Ad(X) is verified in the following theorem. 
Theorem 2. If set X is unspecified, then Ad(X)= { ai | ai  A & fid > liX } is non-empty. 
For each ai  Ad(X), the following theorem divides set of state vectors of ai, KiX = { xi | liX  xi  uiX }, 
into two non-empty, disjoint subsets XiK = { xi | liX  xi  ui*X }, and XiK = { xi | li*X  xi  uiX }, where li*X = 
min{ xi | fid  xi  uiX }, and ui*X = max{ xi | liX  xi < fid }. 
Theorem 3. For each ai  Ad(X), 
1. XiK  and 
X
iK  are non-empty and disjoint, and 
2. KiX =
X
iK  XiK .  
For each ai  Ad(X), Theorem 3 divides KiX into XiK  and XiK . Any state vector in XiK  ensures 
each arc ai to deliver fid units of flow through it without violating the cost limitation. However, any state 
vector in XiK  limits arc ai to deliver less than fid units of flow through it. Similar to the proof of Theorem 3, 
the proposed algorithm further decomposes unspecified set X, into q+1 non-empty disjoint subsets X1, X2,…, 
Xq, and X0 by pivoting on arcs in Ad(X), say ar1, ar2, …, and arq, one by one as follows. 
1) Pivot on arc ar1 : X
1 = {(x1, x2, …, xn) | xr1  XrK 1 , xi  KiX for ai  A\{ar1}}. 
2) Pivot on arc ar2 : X
2 ={(x1, x2, …, xn) | xr1  XrK 1 , xr2   XrK 2 , xi  KiX for ai  A\{ar1,ar2}}. 
  . . .  
q) Pivot on arc arq : X
q ={(x1, x2, …, xn) | xi  XiK  for ai  {ar1,ar2,…,arq-1}, xrq XrqK , xi  KiX for ai  
A\{ar1,ar2,…,arq}}. 
q+1) Let X0 ={(x1, x2, …, xn) | xi  XiK for ai  Ad(X), xi  KiX for ai  A\Ad(X) }. 
14 
4.5.1 then { Derive a ($b,d)-flow (f1d, f2d, …, fnd) and Ad(X) 
4.5.2 Search li*X, ui*X, 
X
iK , and 
X
iK  for all ai  Ad(X) to divide X into X1, X2, …, Xq, and X0 
4.5.3 Put a new collection {lX, uX, (f1d, f2d, …, fnd), Ad(X), Q, i = 1} on top of S 
4.5.4 R$b,d = R$b,d + Pr(X0) 
5 Output: R$b,d. 
3.2 Analysis of storage space 
Property 1. Storage S in the algorithm requires O(n ini n1 ) memory space in the worst case. 
Note that the collections in storage S are stored as a stack (i.e., last in first out). An important advantage 
of the last-in-first-out policy is that it enables the storage S to keep a minimum number of collections. 
4. Computational experiments 
Lin (1998), Yeh (2005b), and Lin (2006) had presented algorithms to solve R$b,d. Yeh (2005b) claimed 
his algorithm was better than Lin’s (1998). In this section, computational experiments are conducted to 
compare the proposed hybrid algorithm with algorithms of Yeh (2005b) and Lin (2006). The proposed hybrid 
algorithm solves R$b,d directly. However, to apply Yeh’s (Lin’s) algorithm to enumerate all ($b,d)-minimal 
paths (cuts) and then employ the inclusion- exclusion principle to solve R$b,d, one needs the searching of all 
binary-state minimal paths (cuts) and all multi-state d-minimal paths (cuts) in advance. All of the three 
algorithms are coded into Visual C++ 6.0 programs, and implemented on a Pentium PC (Intel® Core™ 2 Duo 
E6300 1.86GHz CPU). The example tested, Fig. 1, is cited from Ford and Fulkerson (1962). The states 
(capacities), state probabilities, and distribution costs of each multi-state arc are listed in Table 1. There are 
11 nodes, 21 arcs in Fig. 1, and the maximum flow from source s to destination t is 85 units. The budget is $b 
= $1000, and demand at t is d = 60. Computational results are listed in Table 2. It is observed that the 
presented hybrid algorithm spends a much smaller CPU time than Yeh’s (2005b) and Lin’s (2006) algorithms. 
It is not surprising, since the hybrid algorithm solves the NP-hard R$b,d problem directly, but Yeh (2005b) and 
Lin (2006) solve R$b,d in terms of four NP-hard sub-problems. The hybrid algorithm is much superior to the 
algorithms proposed by Yeh (2005b) and Lin (2006). 
Figure. 1. A large logistics system (Ford and Fulkerson, 1962)  
a1,50,3
a3,15,8
a4,50,2
a5,15,2
a2,30,6
a6,25,2
a7,45,1
a9,10,3
a10,10,1
a11,20,3
a8,15,8
a13,10,8
a12,90,9
a14,60,5
a16,20,2
a10,10,3
a21,10,3
a17,10,2
a18,80,4
a15,10,1
a19,10,1
x1
x2s
x3
x5
x4
x7
x6
x8
x9
t
arc, largest capacity, unit cost
16 
realize the hybrid algorithm. Computational experiments based on a large logistics system in the classical 
monograph of Ford and Fulkerson (1962) indicate that our method is very efficiently in solving R$b,d and 
outperforms existing algorithms. 
References 
Ahuja, R.K., Kodialam, M., Mishra, A.K., Orlin, J.B., 1997. Computational investigations of maximum flow 
algorithms. European Journal of Operational Research 97, 509-542. 
Alexopoulos, C., 1995. Note on state-space decomposition methods for analyzing stochastic flow networks. 
IEEE Transactions on Reliability 44, 354-357. 
Aven, A., 1985. Reliability evaluation of multistate systems with multistate components. IEEE Transactions 
on Reliability 34, 473-479. 
Doulliez, P., Jamoulle, E., 1972. Transportation networks with random arc capacities. RAIRO 3, 45-60. 
Edmonds, J., Karp, R.M., 1972. Theoretical improvements in algorithmic efficiency for network flow 
problems. J. ACM 19, 248-264.  
Ford, L.R., Fulkerson, D.R., 1962. Flows in Networks, Princeton University Press: Princeton. 
Jane, C-C, Lin, J.S., Yuan, J., 1993. On reliability evaluation of a limited-flow network in terms of minimal 
cutsets. IEEE Transactions on Reliability 42, 354-361. 
Jane, C-C, Laih, Y-W, 2008. A practical algorithm for computing multi-state two-terminal reliability. IEEE 
Transactions on Reliability 57, 295-302. 
Jane, C-C, Laih, Y-W, 2010. Computing multi-state two-terminal reliability through critical arc states that 
interrupt demand. IEEE Transactions on Reliability 59, 338-345. 
Jane, C-C, 2011. Performance evaluation of logistics systems under cost and reliability considerations” 
Transportation Research Part E : Logistics and Transportation Review 47, 130-137. 
Lisnianski, A., Levitin, G., 2003. Multi-state System Reliability: Assessment, Optimization and Applications. 
World Scientific: Singapore. 
Lin, J.S., Jane, C-C, Yuan, J., 1995. On reliability evaluation of a capacitated-flow network in terms of 
minimal pathsets. Networks 25, 131-138. 
Lin, J.S., 1998. Evaluate the reliability of limited-flow networks under the cost constraint. IIE Transactions 
30, 1175-1180. 
Lin, Y.K., 2006. Evaluate the performance of a stochastic-flow network with cost attribute in terms of 
minimal cuts. Reliability Engineering and System Safety 91, 539-545. 
Patra, S., Misra, B., 1996. Evaluation of probability mass function of flow in a communication network 
considering a multistate model of network links. Microelectron Reliability 36, 415-421.  
Tarjan, R.E., 1983. Data Structures and Network Algorithms. Society of Industrial and Applied Mathematics: 
Philadelphia. 
World Bank (2010). Logistics Performance Index 2010. http://siteresources.worldbank.org 
/INTTLF/Resources/LPI2010_for_web.pdf, accessed 18 June 2011. 
Yeh, W.-C., 2005a. A novel method for the network reliability in terms of capacitated- minimum-paths 
without knowing minimum-paths in advance. Journal of Operation Research Society 56, 1235-1240. 
Yeh, W.-C., 2005b. A new approach to evaluate reliability of multistate networks under the cost constraint. 
Omega 33, 203-209. 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/12
國科會補助計畫
計畫名稱: 多階狀態網路可靠度分析：成本限制及近似值演算法之研究
計畫主持人: 簡進嘉
計畫編號: 98-2221-E-275-004-MY2 學門領域: 作業研究
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
世界銀行每兩年會提出一份 The Logistics Performance Index and Its 
Indicators 研究報告，在最新一期的 2010 年度報告中強調:供應鏈系統的績效
中系統之可靠度是比成本更重要的衡量因子。本研究正好吻合世界銀行 2010 年
的報告，所發表及投稿中的論文完全針對供應鏈系統提出整合成本與可靠度之
績效指標，同時首次推演出直接式演算法。該直接式演算法是一項新的創新，
在大型供應鏈系統的驗證比較下，證實比既有間接式演算法快速有效率。 
 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
