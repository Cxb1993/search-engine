1.中文摘要 
  無線微型感測網路的主要組成元件是感測器。感測器具備有偵測資訊以及無線通訊的
能力，透過無線電的傳輸可以將收集到的相關資訊即時、動態的傳送。在無線微型感測器
網路普及的環境下，網路安全將成為很重要的議題，安全的網路讓使用者可以盡情的享受
無線微型感測安全網路的便利性、功能性、穩定性及隱密性。不同於以往的安全技術設計，
因為受限於無線微型感測器上極有限的記憶體空間、計算能力與低功率需求，需要大量且
複雜運算的公鑰密碼系統，例如 RSA 或橢圓曲線密碼系統，並不適合運用在無線微型感測
器網路上。甚至於密鑰密碼系統中的塊狀密碼系統（Block Cipher System），也因為架構
複雜且運算耗時，也不適合運用在無線微型感測器網路上。而串流密碼系統（Stream Cipher 
System）有別於塊狀密碼系統，是種架構相當簡單且加密速度非常快速的密碼系統，非常
適用於記憶體及運算資源有限的感測器上。 
  本計畫將針對密碼學中的串流密碼進行徹底且深入的研究，了解各種串流密碼的結構
與性質，分析各種串流密碼技術應用在微型感測器上的優缺點，並且利用各種模擬檢測或
已知的攻擊方法進行安全性的驗證。最後，我們將對各種設定進行細部的調整作最佳化，
達到使用最少的資源而有最大的加解密速度與安全性，並加入省電機制的考量，希望在微
型感測器上極有限的記憶體空間、計算能力與低功率需求的限制下，提供最佳的安全密碼
技術。 
關鍵詞：感測網路、串流密碼、線性反饋移位暫存器 
 
2. Abstract 
Network is one of the most important research topics in recent years. Sensor 
is the main component of this network architecture which collects the environment 
information and transmitted to the read-end data center through RF signaling and 
ad-hoc routing methodology to make more advanced data analysis. Security is a very 
important issue in wireless sensor network. Due to the limitation of memory and 
computation power in the sensors, public-key cryptosystems (e.g., RSA and ECC) and 
block cipher systems (e.g., DES) are difficult to be embedded in the sensor network. 
Stream cipher systems with simple structures and high-speed encryption have the 
advantage for severe constraints on the amount of processing power and memory space. 
In this project, we will study all of stream cipher systems and give stream 
cipher based candidates for the security technique in wireless sensor network. To 
verify the security, we use the statistic testing and known attack methods to 
analysis our proposed techniques. Eventually, we will develop a secure and 
power-saving encryption mechanism that meets the hardware limitation of sensor 
node. 
combination generator and decide which one is better for Wireless Sensor Networks. The 
hardware specification of the sensor we use is as follows: 
 
CPU 8051, 8-bit, 12MHz 
512 bytes RAM 
16k bytes ROM 
Storage 
64k flash RAM 
OS MicroC OSII 
compiler Keil C  
Table 1: Characteristics of prototype sensors 
We first write c program and compile it with Keil C and load the hex file Keil C produces into 
ROM of sensors. Because the memory of sensors is small, we expect the code size of our stream 
cipher is smaller. 
 We first choose the filter generator to implement. Let n be 11 and the Boolean function can 
be got from (1). It is as follows: 
f = x11{(x8+x9+x10) [(x5+x6+x7)(x1(x2+ x3+x4)+x2+x4)+x5+x7]+x8+x10} 
+ x8 [(x5+x6+x7) (x1(x2+x3+x4)+x2+x4)+x5+x7] +x5(x1(x2+x3+x4) + x2+x4) 
+x1x2+x3+x4+x6+x7+x9+x10   …………………………..……..(2) 
The connection polynomial of LFSR is x128 + x99 + x59 + x31 + x9 + x7 + 1. And the filter 
generator tapset is Γ = {0 1 3 7 12 20 30 44 66 82 127}. Let this stream cipher be StreamCipher1 
as in Figure 2. 
 Then we use “Pointer and circular buffer” to StreamCipher1 to become StreamCipher2. 
“Pointer and circular buffer” [3] is as follows: 
Pointer and circular buffer: is based on the idea of having a pointer pointing at the beginning of 
the LFSR in memory. When we clock the LFSR once we do not shift all the values one step in 
memory, but rather, we only move the pointer one position. This gives a compact code 
description of the LFSR sequence generation, and is faster than StreamCipher1. 
 Next we implement the combination generator. The Boolean function is the same as 
StreamCipher1. And we need 11 connection polynomials of LFSR as follows: 
X6 + X + 1 X6 + X + 1 
X8 + X5 + X4 + X3 +1 X9 + X4 + 1 
X10 + X3 + 1 X11 + X2 + 1 
X12 + X7 + X4 + X3 +1 X13 + X4 + X3 + X1 +1 
X14 + X12 + X11 + X +1 X14 + X5 + X3 + X +1 
X15 + X + 1 X16 + X5 + X3 + X2 +1 
We use these LFSRs and the Boolean function f to construct the StreamCipher3 as Figure 3.  
In Table 2 it is obvious that StreamCipher2 is the smallest. Therefore, we choose the filter 
generator as our generator in the stream cipher. At last we implement the filter generator with 
8051 assembly code and optimize it to be the smallest by using reuse and loop and so on. It will 
produce code size of 799 bytes. Key setup and running 128-bit keystream totally approximately 
cost 0.031426 seconds. The data rate of producing the keystream is 128 / 0.031426 = 4073 bits/s. 
For example MOV R1, 30H.0 => R1 = 1, MOV R2, 30H.4 => R2 = 0 in Figure 4. By using this 
instruction we will reduce code size and increase the speed of the stream cipher. How do we 
increase this new instruction in 8051? We first find out the source code of 8051 and modify it to 
increase this instruction. The source code of 8051 is VHDL or may be Verilog. But we only 
simulate it and do not implement it in reality. So we find a simulation of 8051 written by C++ and 
modify it to increase this instruction. How do we modify the simulation of 8051? If we can find 
out opcode which is not used in 8051, then we use this opcode as the opcode of our new 
instruction. The easier method is to modify the instruction which we do not use in the stream 
cipher algorithm to become our new instruction. In this case, we modify MOV DIRECT, 
DIRECT as Figure 5. In this Figure 5, the original instruction MOV dir, dir, is to move the value 
in address 30H to the value in address 31H. The modified instruction, MOV m, Rn, dir, is to 
move m-th bit of the value in address dir to register n, Rn. In Figure 5, MOV 11H, 30H is to 
move second bit (begin from 0) of the value in address 30H to R1. We take Figure 5 as an 
example, that is, R1 is equal to 0. By using this instruction we can largely decrease the code size 
of the stream cipher and increase the speed of the stream cipher. Table 3 compares the stream 
cipher not using the modified instruction and one using the modified instruction with regard to 
the code size and execution time. This modification improves by 799 – 578 = 221 (bytes) and 
0.031426 – 0.024642 = 0.006784 (s). The improved rate of code size is 221/799 = 27.7% and the 
improved rate of execution time is 0.016784/0.031426 = 21.6%. 
 original  modified 
code size (bytes) 799 578 
execution time (s) 0.031426 0.024642  
Table 3: Code size and execution time of the stream cipher 
3.3 Analyzing security 
 In the previous subsection, we obviously know the code size of the filter generator is smaller 
than one of the combination generator. On sensors memory is very critical. Because the filter 
generator is a special case of the combination generator and they share the same Boolean function 
f in (2), that is, they have the same nonlinearity, resilient, algebraic immunity, so they have the 
same power to resist some attacks, such as the BAA attack, the correlation attack, and the 
algebraic attack. Therefore we will choose the filter generator as our cryptosystem on sensors. 
The structure of the filter generator is shown in Figure 2. Because the connection 
polynomial c is a primitive polynomial so the period of the sequence s and z are 2k – 1 if f is 
balanced [6]. In the filter generator the period of the keystream is 2128 – 1. We believe it is long 
enough. 
test degree of 
freedom 
passing range other 
paratmeter
results 
frequency test 1 -3.84 ~ 3.83 no pass X1=1 
serial test 2 -5.99 ~ 5.99 no pass X2=1 
poker test 7 -14.067 ~ 14.067 m = 3 pass X3=4 
runs test 14 -23.685 ~ 23.685 k = 8 pass X4=11.4 
autocorrelation no -1.96 ~ 1.96 d = 500  pass X5=1 
 
Table 4: Statistical tests table of the filter generator 
We also hope the keystream the generator produces possesses the randomness. While it is 
