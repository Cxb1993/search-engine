1行政院國家科學委員會補助專題研究計畫 成果報告
應用蟻群最佳化演算法於多階影像分割之研究
計畫類別：■ 個別型計畫 整合型計畫
計畫編號：NSC 96-2221-E-155-037
執行期間：96 年 8 月 1日至 97 年 7 月 31 日
計畫主持人：梁韵嘉 教授
共同主持人：
計畫參與人員：博士班研究生－兼任助理人員：尹岳川
成果報告類型(依經費核定清單規定繳交)：■精簡報告 □完整報告
本成果報告包括以下應繳交之附件：
□赴國外出差或研習心得報告一份
□赴大陸地區出差或研習心得報告一份
□出席國際學術會議心得報告及發表之論文各一份
□國際合作研究計畫國外研究報告書一份
處理方式：除產學合作研究計畫、提升產業技術及人才培育研究計畫、
列管計畫及下列情形者外，得立即公開查詢
□涉及專利或其他智慧財產權，□一年□二年後可公開查詢
執行單位：元智大學工業工程與管理學系
中 華 民 國 97 年 10 月 1 日
3Extending on the previous work, this
study has two objectives in mind; first, to
improve the CPU times at all level cases,
and second, to bestow an on-line
application in our method. With the
second objective to be our foremost
achievement, two methods are proposed
based on the ant colony system (ACS)
algorithm, named ACS-Otsu (without local
search) and ACSL-Otsu (with local search).
The algorithmic framework includes
Otsu’s method to analyze the separability
among the gray-levels in the image and
ACS algorithm to find the optimum values
of each thresholding. As for the on-line
application in practice, we are able to set
the desired number of maximum
thresholdings and generate the optimum
values of each threshold automatically in
the image segmentation procedure.
3.Otsu’s Method
The concept of using discriminate
analysis for classification problems was
first introduced by Fisher4 and was applied
on image thresholding by Otsu.5 Our study
uses the extended properties of the
discriminate criterion to determine the
number of objects into which the image
should be segmented, and describes the
concept of an automatic multi-level
thresholding method as follows.
For multi-level thresholding, a
gray-level image ),( yxf is transformed to
a multi-level image ),( yxg by a threshold
set },,...,,...,,{ 21 kn ttttT  which is composed of
k thresholds. With a given gray-level i, ni
denotes the observed occurrence
frequencies (histogram) of pixels and the
total number of pixels LnnnN  ...21
where L is the number of gray values in
the histogram. Then the gray-level
histogram is normalized and regarded as a
probability distribution having a given
gray-level i:
Suppose we segment these pixels into a
suitable number of classes. With k
denoting the number of selected thresholds
(i.e. 10  Lk ), the image is then
partitioned into k+1 classes which can be
represented by C0={0,1,…,t1},…,Cn=
{tn+1,tn+2,…,tn+1},…,Ck={tk+1,tk+2,…,L-
1}. Hence, the probabilities of class
occurrences ( nw ), the class-mean levels
( n ), and the class variances ( 2n ) are given
as follows, respectively:
The within-class variance, denoted by
2
WC , of all segmented classes of pixels is
computed as,
The between-class variance, denoted by
2
BC , is used to measure the separability
among all classes and is expressed as,
The total variance 2T and the overall
mean T of pixels in a given gray-level
image ),( yxf are computed as,




1
0
22 )(
L
i
iTT pi  , and 



1
0
L
i
iT ip (5)
In order to evaluate the “goodness” of 
the threshold at level k, the following
discriminate criteria are used:
2
2
WC
BC

 , 2
2
WC
T

 , and 2
2
T
BC

 (6)
Among these measures, the parameter η
is the simplest one with respect to k, and
therefore the optimal threshold T* that



L
i
ii
i
i ppN
n
p
1
1,0, (1)




1
1
n
n
t
ti
in pw ,
n
t
ti
i
n w
ip
n
n



1
1 ,
and
n
t
ti
ni
n w
ip
n
n





1
1
2
2
)( 

(2)



k
n
nnWC w
0
22  (3)



k
n
TnnBC w
0
22 )(  (4)
5transition probability Pij in Eq. (9). That is,
the threshold value with larger pheromone
intensity has higher chance to be selected.
To be noted that the lower and upper
bounds (i.e. LBi and UBi) are defined to be
the lowest and highest values of the search
range of the ith threshold, respectively.
For the on-line application purpose, these
lower and upper bound values at all levels
of thresholding are automatically
determined based on the minimum and
maximum gray-levels of pixels in any
given image. For instance, at the bi-level
thresholding, the values of lower and upper
bounds refer to as the minimum and
maximum gray-levels of pixels,
respectively. However, at multi-level
thresholdings, the search range for each
threshold will then rely on the optimal
thresholds generated from the previous
level. For example, at the tri-level
thresholding, the lower bound (LB1) and
the upper bound (UB1) of the first threshold
will be the minimum gray-level and the
optimal threshold generated at the bi-level
thresholding, accordingly. As for the
second threshold, its lower and upper
bounds (LB2 and UB2 respectively) are the
bi-level optimal threshold and the
maximum gray-level of pixels in the given
image.
ACO algorithms have been shown to
work very well if combined with a local
search procedure.5 In such a case, two
versions of ACS algorithms are proposed
respectively. After all ants have been
generated, the ACS-Otsu algorithm will
update the best ant so far straightforwardly,
but the ACSL-Otsu algorithm will perform
the local search procedure to the best ant
just constructed. To account for both
efficiency and effectiveness of the
algorithm, the local search procedure
exploits the neighborhood of threshold
values in the range of 3it  , 2it  and
1it  with the incremental size of one for
bi-, tri- and four-level respectively. For
instance, in a bi-level thresholding image,
if the current threshold is in the gray level
of 120, then the neighboring solutions
according to the local search procedure
consist of the gray-level values of 117, 118,
119, 121, 122, and 123. The objective
function values of the neighboring
solutions are thereafter calculated based on
Otsu’s method, and the best ant found so
far is updated if necessary.
The pheromone update rule, formally
expressed as (1 ) ,new old eij ij        is
performed, where a parameter  0,1
controls the pheromone persistence. Also,
e denotes the amount of pheromone
trail added to ij by the best ant for all
combinations (i,j) belonging to the best
solution found so far, and is determined by
 2e eBCQ    where a constant Q controls
the magnitude of the pheromone
contribution, and  2eBC is the
between-class variance of the elitist ant, i.e.
the objective value of the best ant fount so
farprovided by Otsu’s method.
5. Computational Results and Analysis
In this section, the performance of the
proposed ACS-Otsu and ACSL-Otsu
methods have been evaluated and
compared to the following three methods:
the Otsu’s method with exhaustive search
procedure, the NM-PSO-Otsu algorithm3
and the ACO-Otsu algorithm.2 The Otsu’s 
method, ACO-Otsu, ACS-Otsu and
ACSL-Otsu methods were implemented on
a Pentium IV 3.2 GHz, 512 MB RAM
personal computer using Borland C++
Builder. The NM-PSO-Otsu method3 was
implemented on an AMD Athlon XP 2200+
(166×11) with 1 GB RAM using
MATLAB®. The termination conditions
used for ACS-Otsu and ACSL-Otsu
methods in this study are 10×k iterations
when solving k-dimensional, i.e., k
thresholds, problem, the same as the
termination condition used by the
NM-PSO-Otsu method in Zahara et al.3.
Three ACO-related methods (ACO-Otsu,
ACS-Otsu, and ACSL-Otsu) are all run 20
times using different random number seeds
to collect the data for statistics analyses.
All nine test images were taken under
7method at bi-level and tri-level
thresholdings. The objects in Figures 4-b
and 5-b cannot be fully detailed at bi-level
thresholding therefore a tri-level
thresholding is necessary for both “Screws” 
and “Blocks” images. Our tri-level results
indicate larger objective values (shown in
Table 5), and better pictorial results for
both “Screws” and “Blocks” images 
(shown in Figures 4-d and 5-d below).
However, the computational results show
that the CPU times of our ACS-Otsu and
ACSL-Otsu methods are slightly higher
than Otsu’s method and NM-PSO-Otsu
method (available in bi-level of “Screws”
only).2 A possible rationale for that is our
ACS-Otsu and ACSL-Otsu methods exhibit
a higher computational complexity than the
exhaustive search of Otsu’s method. As a 
result, when determining the threshold
values in a small search range, a complex
heuristic often becomes expensive in its
CPU time; however, its improvement will
be eventually reinforced in a more complex
image whose gray-level values of pixels
distributed in a large range. Note that once
again ACSL-Otsu is able to reach the
optima over all runs in these two images.
Further to our experiment, four more
complex images (PCB, Modules, Bare
Board, and OISF) have been chosen. The
first three images (in Figures 6-a, 7-a, and
8-a respectively) have multimodal
histograms while the fourth image in
Figure 9-a has a unimodal histogram.
Among these four images, their gray-level
values range from 5 to 255 (refer to Table.
1), larger than the previous five images.
The threshold selection values and
computation times for the these four
images are listed in Table 6, where the
levels of thresholding and computational
complexity go up, maximum number of
ants (NA), iterations (NI) and CPU times go
up for ACS-Otsu and ACSL-Otsu methods.
The CPU times of ACSL-Otsu vary from
the lowest 0.004 seconds at NA = 4 and NI
= 10 to the highest 0.029 seconds at NA = 6
and NI = 30, and successfully reduce the
CPU times of the Otsu’s method in 
multi-level cases, e.g., 5.537 seconds at
four-level of OISF image. The results of
our experiments have shown that the
maximum number of ants (NA) and CPU
times of ACSL-Otsu are less than
ACO-Otsu and ACS-Otsu methods at
tri-level and four-level. It may be due to
the embedded local search procedure
efficiently improves the solution quality
and so a smaller population size is needed.
All these three images exhibit better
pictorial results in Figures 6-d, 7-d and 8-d
at four-level thresholding and also show
that the ACSL-Otsu method efficiently
speed up the Otsu’s method to a great 
extent at four-level thresholding for
different type of images. Our ACSL-Otsu
algorithm also shows a low mean and
standard deviation of the absolute deviation
from the optimal objective value at
multi-level thresholding that reveals its
robustness. Overall, we see our ACSL-Otsu
method is capable of obtaining quality
image segmentation results for multi-level
thresholding problem within a significantly
short period of time automatically that
makes ACSL-Otsu more practical in
on-line application than Otsu’s method. 
For the reference purpose, the optimal
threshold values and the optimal objective
values obtained by Otsu’s method are listed
in Table 7 for the images of Screws, Blocks,
PCB, Modules, Bare Board, and OISF.
6. Conclusion
In this study, we extended our previous
work by implementing another version of
Ant Colony Optimization – a hybrid
optimization scheme using Ant Colony
System and Otsu’s method, to render the 
optimal thresholding technique. The
computational results showed our
ACSL-Otsu’s method successfuly reduces
CPU time of the Otsu’s method and
ACO-Otsu method and, performs
comparably with the NM-PSO-Otsu
method.
We draw several general conclusions at
the end of this study. First of all, our
literature reviews indicate the use of the
8Table 1. Search ranges of all images
Gray-level of pixelsImages
Minimum value Maximum value
Bi-level 90 185
Tri-level 86 189
Four-level 35 189
Screws 178 255
Blocks 178 255
PCB 44 254
Modules 11 254
Bare Board 19 255
OISF 5 252
Table 2. Settings of different parameters implemented in the ACS-Otsu and ACSL-Otsu algorithms
Table 3. Computational results for the three standard test images at the multi-level thresholding
Optimal Threshold(s) Optimal Objective Value
Standard Test
Images NM-PSO-Otsu
Otsu, ACO-Otsu
ACS-Otsu and
ACSL-Otsu
NM-PSO-Otsu
Otsu,
ACO-Otsu
ACS-Otsu and
ACSL-Otsu
Bi-level 133 132 29.85 737.89
Tri-level 111, 146 110, 145 54.11 622.72
Four-level 71, 114, 150 70, 113, 149 36.93 967.70
Parameters Values
0.5 1 2
q0 0.2 0.5 0.8
ρ 0.1 0.5 0.9
Q 10-3 10-4 10-5
τo 10-1 10-2 10-3
11
Table 6. Computational results for images of PCB, Modules, Bare Board, and OISF
Otsu NM-PSO-Otsu ACO-Otsu ACS-Otsu ACSL-Otsu
Images No. ofLevels
Optimal
Threshold CPU
Time
(sec.)
CPU
Time
(sec.)
NA ×NI CPU
Time
(sec.)
Mean / StDev
of Absolute
Deviation
CPU
Time
(sec.)
Mean / StDev
of Absolute
Deviation
NA ×NI CPU
Time
(sec.)
Mean / StDev
of Absolute
Deviation
NA ×NI
2 170 0.000 N/A N/A 0.013 0.704 / 1.078 0.004 2.804 / 5.655 4 × 10 0.004 0.340 / 1.523 4 × 10
3 82, 174 0.045 0.016 7 × 20 0.127 0.528 / 1.019 0.034 1.034 / 1.750 14 × 20 0.013 0.000 / 0.000 5 × 20PCB
4 82,131,205 3.253 N/A N/A 0.473 0.068 / 0.091 0.114 0.146 / 0.204 27 × 30 0.027 0.001 / 0.002 6 × 30
2 162 0.000 N/A N/A 0.014 4.691 / 8.706 0.005 8.985 / 18.555 4 × 10 0.005 0.186 / 0.630 4 × 10
3 85, 173 0.059 N/A N/A 0.133 0.433 / 0.430 0.036 1.837 / 2.033 14 × 20 0.014 0.000 / 0.000 5 × 20Modules
4 83,142,209 5.177 N/A N/A 0.494 0.188 / 0.238 0.123 1.624 / 2.444 27 × 30 0.029 0.042 / 1.196 6 × 30
2 115 0.000 N/A N/A 0.013 1.116 / 2.233 0.005 38.325 / 88.391 4 × 10 0.005 0.586 / 1.956 4 × 10
3 80, 175 0.054 N/A N/A 0.130 0.236 / 0.393 0.035 1.380 / 2.592 14 × 20 0.013 0.002 / 0.010 5 × 20
Bare
Board
4 69,129,200 4.705 N/A N/A 0.483 0.140 / 0.202 0.120 0.587 / 0.534 27 × 30 0.028 0.018 / 0.082 6 × 30
2 131 0.000 N/A N/A 0.014 4.938 / 7.728 0.005 23.135 / 43.562 4 × 10 0.003 0.795 / 3.320 4 × 10
3 103, 160 0.062 N/A N/A 0.134 0.866 / 1.082 0.037 2.782 / 3.223 14 × 20 0.014 0.838 / 2.913 5 × 20OISF
4 79,129,171 5.537 N/A N/A 0.483 0.497 / 0.659 0.123 1.681 / 3.772 27 × 30 0.029 0.006 / 0.026 6 × 30
13
“Screws” image T=209
0
2000
4000
6000
8000
10000
12000
0 50 100 150 200 250
gray level
nu
m
be
ro
f
pi
xe
ls
(a) (b) (c)
T=194, 226
0
2000
4000
6000
8000
10000
12000
0 50 100 150 200 250
gray level
nu
m
be
ro
f
pi
xe
ls
(d) (e)
Fig. 4. Thresholding results of “Screws” image: (a) original image, (b) Otsu’s, ACS-Otsu and ACSL-Otsu
methods at bi-level, (c) histogram and the optimal threshold of (b), (d) Otsu’s, ACS-Otsu and ACSL-Otsu
methods at tri-level, and (e) histogram and the optimal thresholds of (d).
Fig. 5. Thresholding results of “Blocks” image: (a) original image, (b) Otsu’s, ACS-Otsu and ACSL-Otsu
methods at bi-level, (c) histogram and the optimal threshold of (b), (d) Otsu’s, ACS-Otsu and
ACSL-Otsu methods at tri-level, and (e) histogram and the optimal thresholds of (d).
“Blocks” image T=201
0
5000
10000
15000
20000
25000
30000
35000
40000
0 50 100 150 200 250
gray level
nu
m
be
ro
fp
ix
el
s
(a) (b) (c)
T=196, 228
0
5000
10000
15000
20000
25000
30000
35000
40000
0 50 100 150 200 250
gray level
nu
m
be
ro
f
pi
xe
ls
(d) (e)
15
Fig. 8. Thresholding results of “Bare Board” image: (a) original image, (b) Otsu’s, ACS-Otsu and ACSL-Otsu
methods at bi-level, (c)Otsu’s, ACS-Otsu and ACSL-Otsu methods at tri-level, (d)Otsu’s, ACS-Otsu and
ACSL-Otsu methods at four-level, (e) histogram and the optimal threshold of (b), (f) histogram and the optimal
thresholds of (c), and (g) histogram and the optimal thresholds of (d).
Fig. 9. Thresholding results of “OISF” image: (a) original image, (b) Otsu’s, ACS-Otsu and ACSL-Otsu
methods at bi-level, (c)Otsu’s, ACS-Otsu and ACSL-Otsu methods at tri-level, (d)Otsu’s, ACS-Otsu and
ACSL-Otsu methods at four-level, (e) histogram and the optimal threshold of (b), (f) histogram and the optimal
thresholds of (c), and (g) histogram and the optimal thresholds of (d).
“Bare Board” image T=115 T=80, 175 T=69, 129, 200
(a) (b) (c) (d)
0
500
1000
1500
2000
2500
3000
3500
4000
4500
0 15 30 45 60 75 90 105 120 135 150 165 180 195 210 225 240 255
gray-level
no
.o
fp
ix
el
s
0
500
1000
1500
2000
2500
3000
3500
4000
4500
0 15 30 45 60 75 90 105 120 135 150 165 180 195 210 225 240 255
gray-level
no
.o
fp
ix
el
s
0
500
1000
1500
2000
2500
3000
3500
4000
4500
0 15 30 45 60 75 90 105 120 135 150 165 180 195 210 225 240
gray-level
no
.o
fp
ix
el
s
(e) (f) (g)
“OISF” image T=131 T=103, 160 T=79, 129, 171
(a) (b) (c) (d)
0
100
200
300
400
500
600
700
800
0 15 30 45 60 75 90 105 120 135 150 165 180 195 210 225 240 255
gray-level
no
.o
fp
ix
el
s
0
100
200
300
400
500
600
700
800
0 15 30 45 60 75 90 105 120 135 150 165 180 195 210 225 240 255
gray-level
no
.o
fp
ix
el
s
0
100
200
300
400
500
600
700
800
0 15 30 45 60 75 90 105 120 135 150 165 180 195 210 225 240 255
gray-level
no
.o
fp
ix
el
s
(e) (f) (g)
2報告人姓名
梁韵嘉
服務機構
及職稱
元智大學工業工程與管理系
副教授
時間
會議
地點
2008/6/1-6
Hong Kong
本會核定
補助文號
NSC 96-2221-E-155-037
會議
名稱
(中文) 2008年 IEEE計算智慧世界論壇 (WCCI2008)–進化演算
(CEC2008)
(英文) The 2008 IEEE World Congress on Computational Intelligence
(WCCI2008) - IEEE Congress on Evolutionary Computation (CEC) 2008
發表
論文
題目
1. A Discrete Differential Evolution Algorithm for Single Machine Total
Weighted Tardiness Problem with Sequence Dependent Setup Times
2. Upper Bounds on Tailard’s Benchmark Suite for the No-wait Flowshop
Scheduling Problem with Makespan Criterion
報告內容應包括下列各項：
七、參加會議經過
于 6月 1日下午六點抵達下榻之旅館 Empire Hotel Hong Kong，隔天完成報到手續，並
於 6 月 2 日 9:30~11:30 之 Special Session: Differential Evolution 發表 “A Discrete
Differential Evolution Algorithm for Single Machine Total Weighted Tardiness Problem with
Sequence Dependent Setup Times”論文，並參與數個 Planery Session之討論，與來自新加
坡、土耳其、英國及中國大陸等地之學者進行交流，大會並於 6月 4日晚間 18:30舉行
宴會，之後於 5日下午搭機返回台灣。
八、與會心得
台灣人如何在學術性的國際舞台上有自己的伸展空間並不能只光憑著學術天份及英文
能力而已，更要懂得國際市場的動向及擁有國際觀，並適時的將自己介紹給國際社會，
如果只把視野放在小小的台灣，那麼台灣的學術界將永遠只能在台灣生存，相信這並不
是大家所樂見的，而如何能使台灣的學術界菁英能跨出台灣的界限，這當中考驗著大家
的智慧、努力與毅力，感謝國科會與元智大學在本次出席國際會議費用上的協助，相信
藉此將更能鼓勵有心朝向國際化的學術界菁英繼續努力向前邁進。
九、考察參觀活動(無是項活動者省略)
十、建議
十一、 攜回資料名稱及內容
Proceedings of The 2008 IEEE World Congress on Computational Intelligence (WCCI2008)
(CD、會議論文摘要及會議議程表) ，內容包含此次會議相關議程資料發表論文摘要及
全文等。
十二、 其他
