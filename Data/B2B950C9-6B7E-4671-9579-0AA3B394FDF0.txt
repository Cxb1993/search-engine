 I
 
中文摘要 
 
根據著名的XML應用軟體商Sarvega公司的調查，XML資料的流量於2004年超越了Email
的流量，且將於 2007 年超越 Web 流量，這是非常重要的發展趨勢，我們周圍將充斥著許
多 XML 文件與資料，大量的 XML 資料將透過網路或其他傳輸媒介在世界各地進行交流
與轉換；XSLT 標準轉換語言（W3C 所制訂）主要用來擷取、重組或轉換 XML 資料，因
此，如何快速且正確的執行 XSLT 轉換，滿足未來的需求是我們必須面對的挑戰。 
 
本研究計畫之計畫名稱為”XSLT compiler for multicore architecture”，研究目的為使用程式
分析與編譯器最佳化的技術，將 XSLT 編譯為符合 ANSI C 標準之 C 程式，這種方式可以
加速原先使用直譯方式的執行效能。本計畫的研究成果與相關之技術，將可適時的提供處
理大量 XML 資料轉換速度過慢問題的解決方法，在學術上，有重要的研究價值；在產業
界或日常生活上，讓國內中小企業能在有限的電腦資源下，快速處理 XML 的資料，提升
其競爭力，對產業界也有非常重要的幫助。 
 
關鍵詞：XML、XSLT、編譯器 
 
 
 III
目 錄 
 
中文摘要 ..................................................................................................... I 
ABSTRACT ............................................................................................. II 
目 錄 ........................................................................................................ III 
1. 前言與研究目的 .................................................................................. 1 
2. 研究方法 .............................................................................................. 1 
3. 結果與討論 .......................................................................................... 4 
4. 文獻探討 .............................................................................................. 5 
5. 參考文獻 .............................................................................................. 5 
計畫成果自評 ............................................................................................ 8 
 
 
大量 XSLT 範例的研究，進一步寫
出相對應的 C 語言程式。 
y Phase 2: 歸納出 XSLT 轉換到相
對應 C 語言程式的樣版與規則，接
著設計出適當的轉換演算法。 
 2
 
Figure 2: Execution flow of our XSLT 
transformation 
 
Figure 3: XSLT 檔相對應之 C 程式架構 
 
在 Phase 1 階段，對於 XSLT 如何轉換 XML
檔案的過程，我們經過大量範例觀察與研
究，初步歸納研發出相對應的 C 語言程式架
構。如 Figure 3 所示，整個 C 語言程式的架
構，可以分成 Include Block 、 Regular 
Function Block、Main Function Block 等三大
部分： 
y Include Block 包含程式需要使用的
header file。 
y Regular Function Block 主要在處
理大部分的 XSLT operations，如：
apply-template、value-of、for-each、
if 、 choose 、 sort 、 text 、
processing-instruction 等。在翻譯
時，因為大部分的 operations 如 
apply-templates、value-of 都包含一
個以上的屬性（attribute）。所以我
們選擇將屬性當成一個傳入值，在
不同屬性的情況下視為不同的
function，例如：apply-templates 有
select 與 mode 兩種屬性可選用，
則將 apply-templates 搭配 select 屬
性的視為一個 function，反之亦然。
若同時具有此兩種屬性，則表示成
第三種 function。 
y Main Function Block是整個程式的
主要部分，如圖所示，可分為 Initial 
data、XPath initial data、Primary 
code、Remainder code 等部分： 
- Initial data主要是用來呼叫mozilla 
project 的 libxml2 函式庫，對 xml 
input file 建構 parsing tree，以利後
續的分析與翻譯動作。 
- XPath initial data 與 Initial data 相
同，針對使用 libxml2 函式庫處理
XPath，進行初始化的準備工作。 
- Primary code 將 xml input file 中需
要轉換的 node 與相對應的 XSLT 
operation 做連結，即根據呼叫適當
的函數與其他處理，這些函數包含
了被定義在 Regular Function Block
的函數、libxml2 函數與我們自行撰
寫所提供的 low-level XSLT 函數。
 4
 
 
(f) Generate “remainder code block” 
to C output file：這階段接續步驟
(d)、(f)，接續產生 main function 的
C 語言程式片段。最後釋放記憶
體。輸出的 C 語言片段如下： 
 
 
Figure 4 是 DataPower XSLTMark 中的一支
benchmark ，經過我們所研發的 XSLT 
Compiler會編譯為如 Figure 5形式的C程式
架構。 
 
 
<xsl:stylesheet 
xmlns:xsl="http://www.w3.org/1999/XSL/Transf
orm" version="1.0"> 
<xsl:output encoding="utf-8"/> 
<xsl:template match="table"> 
  <table> 
    <xsl:apply-templates select="row"> 
      <xsl:sort select="firstname"/> 
    </xsl:apply-templates> 
  </table> 
</xsl:template> 
 
<xsl:template match="*"> 
  <xsl:copy> 
    <xsl:apply-templates/> 
  </xsl:copy> 
</xsl:template> 
 
</xsl:stylesheet> 
 
Figure 4: Tested XSLT benchmark 
 
 
//process “table” node 
void xsl_template1(…) 
{ 
 …. 
} 
 
//process every node 
void xsl_template2(…) 
{ 
 … 
} 
 
// main function 
int main(int argc, char **argv) 
{ 
 Parse XML file to DOM Tree; 
 Call default root Template; 
 ….. 
} 
 
Figure 5: Corresponding skeleton of C code of 
the benchmark in Figure 4 
3. 結果與討論 
我們所使用的實驗平台，CPU 是 Intel(R) 
Pentium(R) D CPU 3.00GHz，作業系統版本
為 Linux（CentOS release 5.2），編譯器為
GCC 3.4.3 並且使用參數-O2，另外，為了讓
其他 XSLT processor 能在同一平台上執
行，也安裝 JRE 相關軟體。我們選用
DataPower 所推出的 XSLTMark 做為我們的
benchmark ，並且和三種不同的 XSLT 
Processor 進行效能的比較。測試方法是先將
通過 XSLT compiler 所產生出來的 native 
code 經過 GCC 編譯產生執行檔，再使用
Intel 的 VTune performance tool 來量測 XML 
file 的 XSLT Transformation 的 時 間
（Clockticks）做為執行時間的標準，也分
別對 XT、Saxon、Xalan 等 XSLT Processor
量測 clockticks，得到數據如 Figure 6 所示，
Y 軸單位為百萬 clockticks，為了避免 cache 
miss 和同時有其他 process 佔用資源的狀
況，每支程式都執行十次，以求精準。 
 
 這次的測試中，我們所使用的 XML file
大約都在 1K-byte 左右，由圖中可顯示測試
結果，使用我們的 XSLT compiler 與其他的
XSLT processor 相比，約可快上 3～4 倍，
初步與計畫的目標相符，未來，我們希望整
個 XSLT compiler 可以實作的更完整，並且
增加對 XSLT 檔案本身的分析，增加 XSLT 
compiler 對 multicore 的支援，希望相關技
 6
sdn.microsoft.com/xml/generalat http://m
/xmlparser.asp 
[13] The XPath 1
published by the World Wide Web 
consortium. T
.0 Recommendation, 
he definitive specification 
ed 
, 
 2004, Amsterdam, The 
L. 
l web 
g XSLT. In 1st 
ocessing 
edings 
sity of Utrecht, 2005. ISBN 
of the XPath expression syntax us
within an XSLT style sheet. 
[14] P. Briggs. Automatic parallelization. 
ACM SIGPLAN Notices, 31(4):11-15
1996. 
[15] J. Derrick. Cost effective XML 
processing in the datacenter. In XML 
Europe
Netherlands, Apr. 2004. 
[16] P. M. Kelly, P. D. Coddington, and A. 
Wendelborn. Distributed, paralle
service orchestration usin
IEEE International Conference on 
e-Science and Grid Computing, 
Melbourne, Australia, Dec. 2005. 
[17] X. Li, R. Ferreira, and G. Agrawal. 
Compiler support for efficient pr
of XML datasets. In ICS '03: Proce
of the 17th annual international 
conference on Supercomputing, pages 
42-52, New York, NY, USA, 2003. ACM 
Press. 
[18] Joris Graaumans, Usability of XML 
Query Languages, Ph.D Thesis, 
Univer
90-393-4065-X. 
[19] EXSLT, http://exslt.org/. 
[20] Streaming Transformations for XML
(STX), http://stx.
 
sourceforge.net/. 
ijer, Domain [21] Daan Leijen and Erik Me
Specific Embedded Compilers, 2nd 
USENIX Conference on 
Domain-Specific Languages (DSL), 
Austin, USA, October 1999. 
[22] The Xtatic Project: Native XML 
processing for C#. Available 
at http://www.cis.upenn.edu/~bcpierce/xt
atic/. 
[23] Document Object Model (DOM) Level 3 
Core Specification. Available 
at http://www.w3.org/TR/DOM-Level-3-
Core/. 
[24] XQuery 1.0 and XPath 2.0 Data Model. 
Available 
at http://www.w3.org/TR/xpath-datamode
l/. 
[25] XTiSP, An Implementation Framework 
for XML Transformation Languages 
Intended for Stream 
Processing, http://xtisp.psdlab.org/en/. 
[26] Bob Stayton, Syntax highlighting, 
Program listings, Chapter 26, DocBook 
XSL: The Complete Guide, Third 
Edition, http://www.sagehill.net/docbook
xsl/SyntaxHighlighting.html. 
[27] Geert Jan Bex, Sebastian Maneth, and 
Frank Neven. A Formal Model for an 
2. 
b/sun-info
Expressive Fragment of XSLT. 
Information Systems, 27(1):21-39, 200
[28] Jon Bosak. XML, Java, and the Future of 
the Web. Technical report, Sun 
Microsystems, 
1997. http://www.ibiblio.org/pu
/standards/xml/why/xmlapps.htm. 
. Xcerpt 
 
[29] Sacha Berger, François Bry, Sebastian 
Schaffert, and Christoph Wieser
and visXcerpt: From Pattern-Based to 
Visual Querying of XML and 
Semistructured Data. In Proceedings of
 8
計畫成果自評 
本計畫依照計畫書所規劃的研究方法與步驟，逐步執行，並實作完成計畫書裡
所欲發展的 XSLT 編譯器，初步的實驗顯示，採用我們的編譯器可以加速 XSLT
轉換的時程，縮短轉換時間，這對目前數量越來越多的 XML 資料的處理是非
常重要的，未來，我們將更進一步著重於多執行緒、多核心 XSLT 編譯器的發
展，希望能解決處理龐大 XML 資料轉換的問題。 
 
本計畫是兼具研究與實用性質的研究計畫，我們目前已經將計畫執行的結果與
研究成果，申請國內外專利，同時也彙整並撰寫成論文，準備投稿於國際期刊，
期望能與其他研究者分享我們研究的成果，並彰顯國內於 XML 資料處理與
XSLT 編譯器等領域的研究成果。 
y Keynote: "Micro-architecture is Dead, Long Live Micro-architecture," Justin Rattner, 
Chief Technology Officer, Intel 
這次會議很難得邀請到 Justin Rattner來演講，他主要揭露了未來 Intel處理器發展的
規劃與趨勢，他提到傳統上在硬體上的改進需要非常久的時間來進行測試與設計，
但是效能很高；另一方面，若採用軟體的解決方法，可以快速的完成改良，但是效
能的提升上就有先天上的限制，因此，未來可能的趨勢應該是有一個 CPU core加上
Reconfigurable logic (RL)的設計，欲新增的指令或特殊硬體設計可以利用 RL來完
成，如此，不僅縮短整個實作的時程，同時在執行效能上也比純軟體快上 2~4倍。
由此推論，未來，編譯器或相關系統程式的發展將更為重要。 
 
 
y 會議的報名費很高，主要的會議為 400美元，多參加一場 tutorial課程要多 150美元。
相關 tutorial課程報名後，才通知部分課程取消，但一直沒有退費，故建議若不是很
熱門的課程，可以至會場之後，再臨時報名，比較沒有問題。 
 
 
以下為本次會議會場的相關照片： 
 
