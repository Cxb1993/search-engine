transform. However, Tian’s method and 
Alattar’s method must embed a location map to 
restore the original image. Our method can 
identify the embedding locations without 
recording the location map. Diljith et al. [5] 
devise a reversible watermarking using the 
prediction error expansion. The method embeds 
data into prediction errors. Zhicheng et al. [6] 
devise a reversible data hiding technique by 
using the histogram modification. This 
algorithm utilizes the zero or the minimum point 
of the histogram and slightly modifies the pixel 
values to embed data. Fridrich et al. [7] replace 
a bit plane of the watermarked image. A full bit 
plane is extracted and losslessly compressed. 
The created space is then filled up with the 
watermark payload. 
 
3 The Proposed Reversible Data Hiding 
Method  
The proposed reversible data hiding technique 
with difference expansion and difference 
shifting is described. Then, the technique is used  
for data hiding with Integer Wavelet Transform. 
First, we adopt the histogram modification of 
the image in advance to prevent the condition of 
overflow and underflow while hiding the data. 
We should insert the information of changed 
pixels into the hiding data in order to restore the 
original image. Second, we compute the 
difference values of adjacent pixels from the 
image. If the difference value is smaller than a 
predefined threshold, we use the difference 
expansion to embed the hiding data in the 
difference value; otherwise we use the 
difference shifting to avoid the overlap of 
difference values. In this way, the decoder can 
distinguish between these two cases. Third, if 
we want to embed more data and the PSNR is 
high enough, we can repeat the above steps to 
embed more data. 
3.1 Data Hiding with Modification  
Figure 2 shows the proposed data embedding 
algorithm in the image. It includes histogram 
modification and difference modification. We 
adopt the histogram modification to produce a 
pre-processed image and a bookkeeping record 
for pixels that are modified for the histogram 
modification. The secret data and the 
bookkeeping record are embedded in the 
difference value of the pre-processing image 
using difference modification to generate the 
stego-image. 
 
Fig. 2 : The proposed data embedding in the 
image 
 
Difference Expansion (DE) 
 
Tian’s Difference Expansion [1] 
 
⎪⎭
⎪⎬
⎫
⎪⎩
⎪⎨
⎧ +′′
+′′=
⎪⎭
⎪⎬
⎫
⎪⎩
⎪⎨
⎧
≤≤≤≤
+
+=
data hidingafter  
pxielsadjacent   twoof level
gray   theare 1)j(i,f , j)(i,f 
   1))j(i,f , j)(i,f(   V
254j0 255,  i 0  where
pxielsadjacent   twoof level
gray   theare 1)jf(i, , j)f(i, 
   1))jf(i, , j)(f(i,   U
 thresholddefined-preA :th
imagehost The: I
embed  want tobit weA  :b
data hidingafter  pixelsadjacent  obetween tw difference The:D
data hiding before pixelsadjacent  obetween tw difference The :D
′
ansforminteger tr backward   the:          
2
1DM  1)j(i,f  
2
D-M  j)f(i,  
        
expansion difference  the:                              b2D  D        
thD if    
ansforminteger tr forward the:                
2
1)jf(i,j)f(i,   M
j)f(i, - 1)jf(i,    D
    
 Uu any for 
⎪⎪⎩
⎪⎪⎨
⎧
⎥⎦
⎥⎢⎣
⎢ +′+=+′
⎥⎦
⎥⎢⎣
⎢ ′=
+×=′
≤
⎪⎩
⎪⎨
⎧
⎥⎦
⎥⎢⎣
⎢ ++=
+=
∈
Example 1: Assume the pair of adjacent pixel 
values (201 , 206) , we want to embed one bit 
b=1 in these two pixel values 
 
Fig.5 The difference values before and after 
hiding data 
 
We use Method A to embed data ( ) in 
an image, extract data, and restore original 
image, as shown below. 
210
41×
Example 3:  
 
Example 4: 
 
Histogram Modification 
For Method A: 
   
⎪⎩
⎪⎨
⎧
<+
>
=′
else              j)f(i,
thj)f(i, ifth       j)f(i,
1-th-255j)f(i, if    1-th-j)f(i,
  j)(i,f
For Method B:  
  
⎪⎪
⎪
⎩
⎪⎪
⎪
⎨
⎧
⎥⎦
⎥⎢⎣
⎢<⎥⎦
⎥⎢⎣
⎢+
⎥⎦
⎥⎢⎣
⎢>⎥⎦
⎥⎢⎣
⎢
=′
else                  j)f(i,
2
thj)f(i, if       
2
thj)f(i,
1-
2
th-255j)f(i, if    1-
2
th-j)f(i,
  j)(i,f
 
f(i , j) : the gray level of pixel 
j)(i,f ′ : the gray level of pixel after histogram 
modification 
 
For a given image, it is possible to cause 
overflow or underflow after data embedding 
using difference modification. To prevent the 
overflow and underflow, we adopt the histogram 
modification before embedding data. For 
method A, the pixel value (L) decreases th-1 
when it is greater than 255-th-1, and the pixel 
value (L) increases th when it is smaller than th, 
as shown in Fig.6. We record the location of 
Wavelet transform are lossy. Because the 
calculation of wavelet transform, the precision 
of the coefficient is finite. The computer has 
only finite precision to store the coefficient even 
when the floating point data type is used. 
Therefore, we use the integer wavelet transform 
to produce coefficients. A famous wavelet 
transform is Haar transform. We denote the 
original signal by ( ), and the lowpass and 
highpass coefficients by  and . 
0
kc
1( )kc
1( )kd
 
1 0 0
2k 2k+1
1
1 0 k
k 2k+1
  =  c  - c
d c  = c  + 
2
kd⎧⎪ ⎢ ⎥⎨ ⎢ ⎥⎪ ⎣ ⎦⎩
 
and its inverse transform 
1
0 1 k
2 +1 k
0 1 0
2k k 2k+1
d c  =  c  - 
2
 c  =  d  + c
k
⎧ ⎢ ⎥⎪ ⎢ ⎥⎨ ⎣ ⎦⎪⎩
 
We combine the integer wavelet transform and 
the proposed methods described above, as 
shown in Fig.9. 
 
Fig.9 Data embedding using the integer wavelet 
transform 
3.3 Analysis Of The Payload Size and Image 
Quality 
In this section, we compare the payload size and 
visual quality of Method B with Tian’s  
 
Analysis of payload size 
maplocation   theofration n compressio The :     
expansion. difference using  valuedifference         
 in the data embedcan   wepair that  pixel         
  theispair  expandable  the where1)(0         
pairs expandable  theof percentage The :     
imagehost   theifheight   theand width The :h w,
β
α
α
≤≤  
 
The payload size in the method B is equal 
to w h
2
α × × obviously. A w h
2
β × × bits location 
map would be embedded in the host image in 
Tian’s method. Hence, the payload size of 
Tian’s method is equal to 
 
- w
2 2
α β⎛ ⎞ h× ×⎜ ⎟⎝ ⎠
. 
2
hw - method proposed of size Payload      
 methodsTian'ofsizePayload
×≅
⇒
β
 
The simple flowchart of the Tian’s method is 
shown below: 
 
Fig.11: A simple flowchart of Tian’s method. 
 
Analysis of image Quality 
In our proposed method: 
(assume j)f(i, 1)jf(i, >+ ) 
⎥⎦
⎥⎢⎣
⎢ ++=
+×=′
+=
2
 1)jf(i,  j)f(i,  M
data) hidingafter  difference (the   b  j)D(i,2  j)(i,D
data) hiding before difference (the  j)f(i, - 1)jf(i,  j)D(i,
⎥⎦
⎥⎢⎣
⎢ +′+=+′⎥⎦
⎥⎢⎣
⎢ ′=′
≤
2
1j)(i,DM  1)j(i,f  ,  
2
j)(i,D-M  j)(i,f    
 th j)D(i, if  
1)jD(i,
2
11)jf(i,-1)j(i,fE     
  toequal is 1)jf(i, ofError     
j)D(i,
2
1j)(i,f-j)f(i,E    
  toequal is j)f(i, ofError     
1)jf(i,
j)f(i,
+≅++′=
+
≅′=
+
 
hw2
th)-(1
hw2
j)(i,D
          
hw
th
2
12)-(1
hw
j)D(i,
2
12
MSE
th  
2
1E  ,th  
2
1E    
 th j)D(i, if
ji,
2
ji,
2
ji,
2
ji,
2
1)jf(i,j)f(i,
××+××=
×
⎥⎥⎦
⎤
⎢⎢⎣
⎡ ⎟⎠
⎞⎜⎝
⎛
+×
⎥⎥⎦
⎤
⎢⎢⎣
⎡ ⎟⎠
⎞⎜⎝
⎛
≅
≅≅
>
∑∑
∑∑
+
αα
αα
 
 
 
Fig.13 The grayscale Lena embedded using 
Method B. (a) original image, (b) the stego-
image with PSNR = 40.4db, Payload = 147017 
bits, (c) the stego-image with PSNR = 34.0db, 
Payload = 262712 bits, (d) the stego-image with 
PSNR = 31.5db, Payload = 323357 bits 
 
 
 
Fig.14 The grayscale Lena embedded using 
Method B with IWT. (a) original image, (b) the 
stego-image with PSNR = 40.4db, Payload = 
96977 bits, (c) the stego-image with PSNR = 
35.1db, Payload = 164673 bits, (d) the stego-
image with PSNR = 30.4db, Payload = 238597 
bits 
 
Fig.17 Payload size versus distortion 
comparison of “Lena.” grayscale image 
 
 
 
Fig.18 Payload size versus distortion 
comparison of “Lena.” color image 
