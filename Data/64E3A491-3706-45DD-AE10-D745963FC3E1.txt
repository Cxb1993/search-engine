2 
 
 中文摘要/Abstract 
    點對點(P2P)網路已經逐漸成為普遍使用來交換資料的一種規格。當更多應用程式或使
用者透過P2P網路來分享和存取資料時，現在的系統顯得沒有足夠有效的能力去支持多重的
需求。像在Gnutella或Chord的網路型態中，使用者可以透過物品關鍵字或者是部份檔案名
稱去搜尋想要下載的資料，然後透過P2P網路去下載它們。然而，這些系統卻只能支持精確
符合的詢問和請求。 
在第一年的計畫中，我們會指出在影像資料取回的背景中內文搜尋所會遇到的問題。這個
問題的挑戰性是在於如何將內文搜索(CBRV)編譯成有效率的程序化。假設在一個網路中有
大量的點(peer)，每個點都有大量的影像資訊，當我們擁有一個影像的某個景，我們要盡
快找出最相似的影片，此時針對內文搜尋更有效率的超級P2P網路就可以被選擇來當成底層
的架構。建立在以上的結構上，系統第一件要考慮的事情就是如何將影像的某個景來有效
率的描述和當使用索引的時候如何有效率的維持這些索引。 
有鑑於網路頻寬的限制以及點(peer)的儲存限制，傳送每點所擁有的每個景的特徵向
量給超級點(super-peer)是相當困難的，明顯的，用輕巧的簽署名稱來描寫點的景對於有
效率的影片索引和點對點的網路搜尋是必要的步驟，尤其是在資訊總數很大的時候。當然，
搜尋效能相當大的取決於如何去產生影片當中景的特徵還有如何編譯出索引，尤其是在動
態點對點網路當中。如果影片景的特徵包含了太多資訊的話，超級點就會使用太多儲存空
間並且在建立索引的時候增加程序的耗電量。可是如果太過少量資訊就會造成過高的溝通
負重並且降低取回索引時的效能。有鑑於這個迫切的需求，我們針對點對點網路中內文基
礎的影像取回新索引技術來做探討。我們提出了一個通用並且有延伸性的點對點網路中內
文基礎影像取回的架構。還有，超級點對點的架構對於影像內文搜尋來說是更有效率的，
由其實當他被用在底層架構當中。為了促進在這樣設定中的 CBVR 效率，所以我們提出了一
個點像量 R 樹的方法來更有效的處理景的特徵表現以及新的索引技術。這個新技術對於點
對點網路中內文基礎影像取回的領域有相當的貢獻。 
   在第二年的計畫中，我們延伸了點對點網路系統中提供現場串流和將近現場 VoD 的服
務。基於點對點網路系統上，提出一個可以允許使用者訂閱現場串流或暫存 VoD 服務的出
版/訂閱機制。在我們的系統中，原始串流來源只有原始內文出版者的資訊，但是每個點都
會要求串流服務和保存影片放在自己的暫存儲存器中，就像是個內文出版者從暫存儲存器
的影片中提供需要的服務給其他點。在這樣的系統中，每個點都有像內文出版者的行為(前
提是這個點保有新的影片)或者是個內文訂閱者。為了促進在點對點網路中的出版者/訂閱
者，我們設計了一個給出版者以及訂閱者的機制。這個機制的目標是能讓出版者和訂閱者
都可以適當的被索引，以便在當新的出版內文符合訂閱者所訂閱的內容時能夠自動通知。
此外，為了讓內文出版更有效率化並且使用資源最大量的分享程度，我們提出了一些在這
個點對點系統中的內文出版儲存機制。而模擬結果證明了提出方法的優越點。 
 
Keywords: 點對點傳輸、以內容為基礎的多媒體資料擷取、索引、即時影片播放、隨選視
訊、多媒體資料之出版與訂閱。 
 
4 
 
目錄 
內容 
 中文摘要/Abstract ................................................................................................................. 2 
 Abstract ................................................................................................................................... 3 
 第一年計畫報告 ....................................................................................................................... 5 
1. 文獻探討/Related Work ............................................................................................ 5 
1.1 Multi-dimensional Index ............................................................................................ 5 
1.2 Information Retrieval (IR) in P2P Network ............................................................... 6 
2. 研究方法一/Representing and Indexing Video Shots ................................................ 6 
3. 研究方法二/P2P CBVR ................................................................................................ 8 
3.1 Super-Peer Network ................................................................................................... 8 
3.2 Global Indexing Structure .......................................................................................... 9 
3.3 Query Processing ..................................................................................................... 10 
4. 實驗結果/Evaluation .............................................................................................. 11 
4.1 Simulation setup ....................................................................................................... 11 
4.2 Evaluation of Retrieval Performance ....................................................................... 12 
 第二年計畫報告 ..................................................................................................................... 13 
1. 文獻探討/Introduction and Related Works ...................................................... 13 
1.1 Motivation .......................................................................................................... 15 
1.2  Related Works ....................................................................................................... 16 
2. 研究方法/Proposed System .......................................................................................... 19 
2.1  System architecture ............................................................................................... 20 
2.2 Proposed protocol .............................................................................................. 22 
3.  Content Publishing Strategies ......................................................................................... 25 
3.1 Continuous Publishing ....................................................................................... 25 
3.2 Publishing Once ................................................................................................. 26 
3.3 Popularity-based Adaptive Publishing ............................................................... 26 
4.  Experimental Results ...................................................................................................... 28 
4.1  Study of content popularity evolution ................................................................... 28 
4.2  Simulation setting ................................................................................................. 29 
4.3  Simulation results .................................................................................................. 32 
 參考文獻/References ........................................................................................................... 39 
 計畫成果自評 ......................................................................................................................... 41 
    附件一 出席國際研討會 ICIP2008 之心得報告 
    附件二 國際研討會 ICIP2008 中所發表之論文 
  
6 
 
with R*-tree to support efficient CBVR in P2P network. 
1.2 Information Retrieval (IR) in P2P Network 
Due to the popularity of peer-to-peer file sharing applications, many research communities 
have put significant effort on building new P2P systems to support more complex search. More 
progress has been made towards supporting complex multi-dimensional queries. A P2PR-tree is 
an extension of the R*-tree in P2P settings [7]. However, the maintenance of a dynamic R-tree in 
unstructured P2P networks is left unaddressed. The maintenance cost is expected to be 
considerably high, since every maintenance operation has to be communicated among peers with 
messages in order to finish. A quad-tree-based technique is proposed by Tanin and Harwood [8] 
capable of supporting range queries, which, however, builds on Chord and makes it only suitable 
for structured P2P networks.  
Recently, NR-tree proposed in [9] is built in super-peers by indexing minimum bounding 
rectangles (MBRs) summarizing peer data in the same cluster at a coarse level. Not all data in 
peers are inserted into NR-trees and migrated to super-peers. Instead, only a small number of 
MBRs summarizing peer data are inserted. However, the importance issue is that the MBRs are 
not compact descriptions of peer information. Not only it is hardly to maintain by super-peer and 
it will lead high communication overhead during query processing, which will decrease the 
retrieval performance.   
Tang et al. [10] present text retrieval in P2P systems and suggest that it can be extended to 
image retrieval as well. One of them (pVSM, peer vector space model) stores (term, document id) 
pairs in a structured P2P network, and then retrieves such pairs to perform text information 
retrieval. Those approach seems to be hard to translate to image data, since [11] reports the need 
for a large number of features when using text information retrieval methods on image data.  
Hierarchical Summary Indexing (HSI) proposed in [12], is a general and extensible 
framework for searching similar documents in P2P network. The framework is based on the novel 
concept of Hierarchial Summary Structure. Second, based on the framework, it develops an 
efficient document searching system by effectively summarizing and maintaining all documents 
within the network with different granularity. HIS motivated our research in that it is a viable 
solution for P2P CBVR if a suitable peer data representation similar to the summary used for the 
text scenario in HIS can be found for peers containing multimedia data. 
2. 研究方法一/Representing and Indexing Video Shots 
Let 1 2[ , , .. ]mv v v v=
r be an m-features shot, and as a result of the approximation, the feature 
vector v
r
 is represented by the triplet ' ( , , )v c r θ= , where c is the cell ID in which v
r
 lies, r is 
the length of feature vector v
r
and θ  is the angle between vr  and the diagonal from the local 
origin O of the cell to the opposite corner 1 2[ , , .. ]md d d d=
ur
. The design goal of the triplet is to 
maximize the filtering power by using minimal information. However, unlike the VA-file which 
8 
 
[3], a variation of the original R-tree [7], has been widely accepted by industry and research 
community. The first component c can be used to prune away points based on the cell locality: 
cells close in space are clustered in the same leaf node represented as a minimum bounding 
rectangle (MBR).. . As we can see, we can generate a novel indexing structure Peer Vector 
R*-tree (PVR-tree) as shown in Fig. 2. The PVR-tree can divide into three: the leaf nodes contain 
corresponding feature vector, middle levels contain corresponding signature, and upper levels 
contain corresponding MBR.   
 
 
Fig. 2. Structure of PVR-tree 
 
Dynamic maintenance operations arising from insertions and deletions on the indexing 
structure can be easily performed. When a new point is added in the data set, its ( , , )c r θ
component are first computed, followed by the standard insertion operation in R*-tree. 
Correspondingly, the data are inserted into the correct position in the signatures level and data 
level of the structure, respectively. Deletion operations are done in a similar way. 
3. 研究方法二/P2P CBVR 
Our system facilitates video searching in distributed P2P network. In this section, we shall 
first discuss the super-peer P2P architecture, and then look at how such PVR-tree can facilitate 
the design of the proposed framework. 
 
3.1 Super-Peer Network 
Applications based on super-peer network are consuming a large portion of internet traffic. 
For example, KaZaA consumed approximately 37 percent of all TCP traffic, which are more than 
twice the Web traffic on the University of Washington campus network in June, 2002 [12]. 
Sandvide also estimates that 76 percent of P2P file shareing traffic belongs to KaZaA traffic and 
only 8 percent comes from Gnutella in the US [12]. Hence, in our framework, we have adopted a 
super-peer network model  as shown in Fig.3. In this model, among a group of nearby peers 
10 
 
super peer maintains two indexes: the global level index of its group and its neighboring groups, 
and group level index of its group. By examining global level index, a super peer can determine 
which peer group is relevant. Similarly, by examining group level index, a super peer can 
determine which of its peers have the answers.  
3.2.2 Build and Indexing Signature 
How to build the signature representation—high-dimensional point for peer level, group 
level, and global level, respectively. Each peer may contain hundreds of videos. Similarly, each 
group may have a large number of peers and the whole super-peer network may contain a large 
number of groups. As the network size grows, efficient content-based video searching becomes 
prevalently important. 
To be consistent with the framework, the video shot signatures is also done in levels—peer 
level, group level, and group level. For each peer, each of its video shots is first represented by a 
feature vector (fv) after feature extraction processing, Then, all fvs are used to generate compact 
signature composed of ( , , )c r θ component. So far, video shots’ processing has been built. Each 
peer use the PVR-tree structure to index it own video shots. Next, each signature is passed to its 
super-peer. Each super-peer will combine its group’s signature by performing a union operation 
on its signatures. So far, each group’s signature has been generated. Each super- peer use the 
PVR-tree structure to index its group’s video shots. After a super-peer receives other super peers’ 
signature information, it repeats the same step as generating global index. 
3.3 Query Processing 
Query processing is coordinated by super-peers, and part of the processing is pushed to peers 
as well. When a peer intends to issue a query, it sends the query to its super-peer. A super-peer, 
upon receiving a query from its passive-peer, followed by the hierarchical indexing search in 
order of global index, group index, and peer index, which is the reverse order of the signature 
construction. Then super-peer forwards the query to the corresponding groups and peers within 
the same group. The procedure is as the following steps: 
1. Global index: When a query reaches the super peer, it is first mapped into its PVR-tree 
followed by KNN searching in. The query is then transmitted to the K most relevant groups. 
2. Group index: At each group, the query is first mapped into its group corresponding PVR-tree, 
followed by KNN searching in. The query is then transmitted to the K most relevant peers. 
3. Peer index: At each peer, similarly, the query is first transformed into the peer level’s 
PVR-tree, followed by KNN searching in the local index to select the K most relevant video 
shots for final video shot similarity measure. 
Finally, each peer returns K most relevant similar documents to the peer requesting the query.  
12 
 
 
Fig. 4. Examples of the Close-Up (CUT), Bicycle Racing (BR), Walking Person (WP) and 
Anchorperson and Interview (API) shots 
4.2 Evaluation of Retrieval Performance 
In the experiment, each shot in these four classes was used as a query shot. The top 20 
similar shots were returned as a query result for evaluating retrieval performance. Finally, the 
respective average recall and precision for each class were computed. The recall of these four 
kinds of shots exceeded 80% in which the recall of API, CUT and API were higher than 80%. 
The worst result was obtained by testing the BR shots, with the precision of 74%. The overall 
average recall and average precision were 81% and 78%, respectively.  
Doing efficient query routing for CBVR applications in P2P networks requires knowledge 
about the data in each peer. This problem becomes hard because of the high dimensionality of the 
data represented. Within this paper, we have examined the issues of supporting CBVR in a 
distributed peer-to-peer information sharing system. We proposed a PVR-tree to index video 
shots. Based on this framework, we have presented a compact signature of video shots. Our 
experiments showed that CBVR in P2P an be easily adopted and our prototype system achieves 
remarkable achievements 
  
14 
 
its own connection with the server over a unicast channel. As the video popularity increases, the 
server soon becomes the bottleneck. Several approaches, such as Periodic Broadcast [23,24,25], 
Scheduled Multicast [27,28], Patching [26], have been explored to tackle the scalability issues 
faced by VoD service. Periodic Broadcast schemes dedicate server channels to videos and these 
video are broadcasted repeatedly; Scheduled Multicast schemes allocate available server channels 
and select to a batch of clients to multicast according to some scheduling policy; Patching 
schemes allow clients to join a multicast channel that has already started and get the missing 
initial portion (denoted as patch) from the server over an unicast channel.    
Other approaches to address the scalability issue include proxy caching and the use of 
content delivery networks (CDNs). Here the video content is pushed from the server to proxies or 
CDN servers close to the clients. CDN approaches strategically place a large number of servers 
around the Internet and allow clients to choose the server that incurs the least amount of 
congestion. Proxy caching approaches store a portion of a stream or an entire stream in the proxy 
which transmits data directly from its cache to clients when receiving the client request for one of 
the cached data. By caching the initial fraction of stream data, service startup latency can be 
reduced.  
Recently, peer-to-peer networks (P2P) have been used for file sharing and media streaming. 
The conventional VoD approaches described above have been applied on the P2P architecture to 
further improve the performance [17][18]. For instance, the P2P patching scheme in [18] provides 
multicast for base stream forwarding and unicast for patching serving. Peers are able to forward 
the received base stream to others so that the server and peers form an application-level multicast 
tree. Every peer needs to cache the initial part of the video, so that the peers arrived earlier can 
serve the patch to the peers arrived later. 
 Providing the proposed near-live VOD services over P2P networks can be a challenge since 
it raises many issues which have not been addressed by conventional VOD approaches. Some of 
them are listed in Table 1 and are illustrated below. 
 Content instability: In conventional VOD systems, the content stored in the server are not 
changed often; while in near-live VOD systems, new content is continuously produced by 
live streaming. Due to limited storage space in peers, some old content has to be discarded 
and replaced newly produced content.     
 Content indexing: The requested content in conventional VOD systems can be easily found 
in the server, proxies, or CDN servers, which are known to clients; while in near-live VOD 
systems, the requested content can be in any unknown peers, or even not in the system (has 
been discarded).  
 Content availability: The server, proxies, and CDN servers in conventional VOD systems 
are supposed to be always on-line, so content availability is predictable for most of time; 
while in near-live VOD, the peers that cache the demanded content can leave at any time 
and thus, make content availability unpredictable.  
 Content popularity information gathering: In conventional VOD systems, it is easy to gather 
content access information from server, proxies, or CDN servers, the number of which are 
16 
 
 
1.2  Related Works 
Most previous studies of cache management have been focused on the cache replacement 
based on video caching proxies. 
2.1  P2P architecture for file sharing 
A general distinction of P2P architectures into three kinds is possible: 
• Centralized:  
There is a central directory. Each peer contributes its local “table of contents” to the central 
directory. Peer issues requests to the central directory to discover the most appropriate peer with 
the desired information. (E.g. Napster) 
• Distributed: 
All peers perform equal functions. Requests of a peer are flooded from the original requestor to 
their neighbors and so on, recursively, for a number of steps or until the request is satisfied. The 
flooded-request is manipulated through network connectivity and the appropriate number of steps 
can result in good request coverage. 
• Hybrid:  
In pure P2P systems, it caused redundant messages for flooded-requests since the forwarding is 
performed recursively. Super peers are introduced for efficiency purposes in Kazaa P2P system. 
 
Figure 5 Centralized recovery, Flooded-request and super peer model 
 
1.2.2 P2P architecture for media streaming 
P2P and multicast are two common transmission manipulations to provide scalable and cost 
efficient solution for either Video-on-Demand (VoD) or live streaming. P2P technology has been 
widely adopted in live streaming system.  The overlay network is an application level 
construction that was separated from the physical network. By overlay construction method, they 
can be roughly classified into three main categories:  
• Tree based overlay:  
Peers are organized to form a tree-shape overlay network. By IP multicast support, data can 
transfer from a parent to multiple children as shown in figure 6 Enhance the efficiency of 
one-to-many and many to many communications over the internet. It concerns the way to 
build and maintain the tree. The parent peers in tree based overlay have a heavy burden in 
18 
 
Size [20] [21] Cache of a large number of small objects, which increase the 
average response time of all user requests 
Intervals [20] [21] Measured the number of requests are collected for the time of 
interval and than simply discard. 
Time since last 
request [19] 
Identify the object that has been accessed most recently or 
least recently. 
Data replicated Due to the variations of bandwidth of links among caches, the 
amount of data replicated is taken into account. 
Priorities Priority can be used to move objects through a distribution 
system quickly if popularity or relevance can be predicted. 
Table 1 Cache replacement strategies 
The replacement policy of a proxy caching in [19] considered the number of requests and 
the last request time. A proxy has a caching value given by RF/ (T - T’), where T is the current 
time, T’ is the timestamp of the last request to this object, and the RF is the number of requests 
for this object since the time it enters the cache. 
[20] has proposed the replacement policy which considered the size and interval. Each proxy 
server calculates caching utility value that represents the correlation between popularity of a 
stream and the size of cache space of a stream allocated. And then the victim stream which has 
minimum value is selected to be replaced. The caching utility in [20] is given by:  
Cost
efitCachingBenlityCachingUti =
 
The cost is the size of storage space allocated for the stream. And the caching benefit is the total 
amount of data played back by clients. Figure 7 (a) shows the way to measure the total amount of 
data of a particular stream played back by clients during an interval∆ .  
The replacement in [21] considered the size, interval and age. Assuming that m numbers of peers 
have played back video i in the kth period, k jiDATA , is the amount of data of video i played back 
by client j in kth period, which is the caching utility in [21]:  
∑
=
=
m
j
k
ji
k
i DATADATA
1
,  
And then the proxy maintains the weighted mean played data, kiD for all videos, which is given 
by: 
10,)1( 1 ≤<−+= − ααα kikiki DDATAD  
20 
 
Figure 8 Co-operative caching 
 
Before introduce the proposed architecture, here we define some terminologies that will be used 
throughout this document. 
• Buffer size: The capability of a peer’s storage can be shared with other peers. 
• Urgent: We denote a portion of a peer’s buffer as the urgent part, and the remaining portion 
as the cache as illustrated in figure 9. The urgent part must be filled with fix amount of 
chunks to enable the playback playable. 
• Segment: The track server converts the media content into small video chunks for efficient 
transmission among peers. We have specified every minute as a chunk and separated every 
30 minutes as a segment. A segment is the unit of caching.  
• Group: The peers that requested the first chunk within the batch time interval form a group 
as depicted in figure 10. A peer having a larger bandwidth can be picked up as a super peer 
for the group. And every group has one super peer.  
 
Figure 9 Peer’s buffer structure  
 
Figure 10 Peers form a group 
2.1  System architecture 
The peer discovery employs hybrid model. The distributed caching approach is co-operative 
caching as figure 11. Figure 11 illustrates the mesh-based network overlay, we employ p2p hybrid 
model which includes a content provider, a track server, super peers, and peers, as shown in 
Figure 12. 
22 
 
 
Figure 12 Publishing directory 
 
E. Subscription directory (local subscription indexing server): Super peer is also used to 
act as a role of subscription directory. Each peer can issue subscription to its super-peer 
if it wants to subscribe live-streaming channels or near-live VoD services.  Similar to 
figure 11 illustrated, super-peer will provide message forwarding among super-peers to 
collaboratively serve as a global subscription indexing server which is used to 
automatically notify subscribers whenever a new published content matched the 
subscribed content.  
F. Message forwarding: Requests are issued from the original requestor to its super peer, 
and then the super peer forwards the request to other near super peers. A super peer 
forwards the message when receiving the request message or when receiving 
publishing message. 
• Peer: it can be an on-line service request, an off-line service subscriber, or a service provider 
which provides media content. 
 
Two media steaming procedures are constituted:  
• Live streaming: The peers exchanged buffer map with partners and received media chunks 
from partners. 
• Cache streaming: The peers that request previous videos can discover the peers that have 
available chunks through their super peers queried other super peers. 
2.2 Proposed protocol 
Under our system there are three phases for any peer: Join, Work, and Leave. And there are 
several operations during the work phase. 
2.2.1 Join phase 
In the join phase, a peer v arrived and set connection with track server, and then track server 
provided super peer list consisting of the IP address of every super peer registered. The new peer 
issued to every super peer the join message including the offset chunk id, zero one sequence, and 
address of itself. And then Super peer will reply message if the offset chunk id is within the batch 
time interval. According to the response of super peers, there are three situations: 
a If there is no super peer response, this new peer will be upgraded to a super peer. 
  Content publishing 
Each time when a peer keeps a new video in its cache for sharing, this peer needs to issue a 
publishing message to its super
other peers to find the location of this video. The new video to be cache
live-streaming or cached video of other peers. In order to publish video more efficiently and 
thus maximize the resource sharing among peers, content publishing strategy plays a 
significant role. Hence, an adaptive publishing strategy is prop
in the next section.    
 Subscribing 
Each time when a peer wants to subscribe a video channel or a specific kind of video, this 
peer needs to issue a subscribing message to its super
indexing directory. When a super
published content matches with any subscribed content in its subscription indexing directory. 
If yes, this super-peer will issue a notification message to the corres
otherwise, the super-peer simply forwards this publishing message to other super
belonging to its partnership till the TTL reaches to zero.
2.2.3 Streaming phase 
Every peer maintains a buffer map as illustrated in figure 1
available chunks it has. A peer issued a query
Sequence_urgent, Sequence_Cache
or partner. The Offset_Cache is the first chunk id in the cac
is a zero one string that specified existence of following chunks
four columns as explained in figure 14
segment_id The media streaming is separated as many 
by the track server, and every segment has a unique id.
count_rqst The segment at cache was requested in the last unit time that is 
defined a fix sliding time window.
time_lru The segment at cache was requested at the last time.
cache value The utilization of the segment.
Figure 
24 
-peer which acts as a local content indexing directory for 
osed, which 
-peer which acts as a local subscription 
-peer receives a publishing message, it will check if this 
 
4 (a) to speci
-chunk message that contains 
, Offset_Cache, and Cache value to either its super peer 
he storage. A
. The Cache_value
 (b).  
(a) Query-chunk message 
continuously 
 
 
 
 
(b) Cache value 
14 Buffer map format of proposed protocol 
d can be from 
will be addressed 
ponding subscriber; 
- peer 
fy clearly which 
Offset_urgent, 
nd Sequence_Cache 
 contains 
 
segments 
26 
 
3.2 Publishing Once 
The concept of “Publishing Once” strategy is opposite to Continuous Publishing. With this 
strategy, the peer will always keep the video that it has published in the cache without been 
replaced till this peer leave the P2P system. Consider all the peers on the system. The peers retain 
every segment consisting of chunks that has been played until their caches are full. Then keep the 
segments without overwriting all the time. For an instance in the figure 16, the P1 and P2, arrived 
at t0 and t2, respectively, retained the initial segment they played. So, before P1 and P2 leave the 
system, P1 always keeps its cache with stream from the 1000th minute to the 1050th minute and 
P2 from the 1100th minute to the 1170th minute. Both of P3 and P4 arrived at t3 can retrieve 
segments of the 1005th minute and the 1165th minute from P2 and P1, respectively.  
As figure 17 shows the peers that requested the first chunk within the time interval constitute 
a batch. A super peer can confirm the first chunk id of peers in the group quickly to enhance 
efficiency for the query message of a peer. 
 
Figure 26 No overwriting 
 
Figure 37 Group as a batch within the time interval 
3.3 Popularity-based Adaptive Publishing 
The Continuous Publishing method may improve hit rate which retrieved chunks from the 
caches of all peers, while all of the peers request the same video concurrently. The Publishing 
Once method may improve hit rate, when the previous segments on the cache still are popular. 
Nevertheless, the Publishing Once method may waste the space of a cache if it is allocated for the 
unpopular segments.  
Taking the popularity of a video-on-demand service with a great variety of content type into 
28 
 
 
Figure 48 Adaptive overwriting  
 
4.  Experimental Results 
In this section, we evaluate the hit rate of the proposed system through simulation 
experiments. Three content publishing strategies: Continuous Publishing, Publishing Once, and 
Adaptive Publishing, are used for comparison.  
4.1  Study of content popularity evolution 
In order to evaluate the effectiveness of our caching strategies, we need to take the 
popularity of the videos into account. In our simulation model, the hit rate that each method 
performed is related to specific videos. Especially when VoD is available, which video is the 
choice of a client depended on video’s popularity. The Zipf-distribution is the model used for 
request probability and [22] is used for modeling video life cycle. 
4.1.1  Zipf distribution 
We assume N is the amount of videos at this time, k is the rank of the distribution, andα is 
the value of the exponent characterizing the distribution. The larger the α is, the more skewed 
the curve is.  
∑ =
= N
n
n
kNkf
1
)/1(
/1),;(
α
α
α
 
    
4.1.2  Video life cycle 
In our experiments, three distinct video life cycles have been taken into account: short-term, 
long-term, and up-and-down. Assuming the model has a temporal resolution of every 30 minutes, 
as figure 19 (a, b, c) illustrated, these three kinds of life cycle are described as following: 
• Short life: This content reaches the highest popularity during the first 30 minutes, and the 
number of accesses per time unit decreases suddenly. 
30 
 
4.2.1 Topology 
The network topology in our simulation environment is modeled by a formula called Power 
Law: 
rCKKP −=)(
,
 ∑ −=
N
n
rnC
1
/1
 
Where the K is how many outgoing links a peer has. N is the amount of peers or the topology size, 
r is the value of the exponent characterizing the distribution.  
We set the r to 2; the topology size is set to 3000. K is set from 1 to 6 and K is an integer. 
Table 2 illustrated the relation between K and the distance. Since the peers who have the most 
outgoing degree are given precedence to decide the links between other peers and itself, we found 
out a peer who has larger outgoing degree can has shorter distance with other peers, but a peer 
who has smaller outgoing has longer distance with other peers.  
K Average distance 
with all peers 
1 616640 
2 181788 
3 80169 
4 40809 
5 19846 
6 10310 
Table 2 Relation between outgoing link and distance  
4.2.2  Parameters and complex popularity environment 
We evaluated the performance of each method in distinct popularity environments that 
illustrated in table 4. And table 3 illustrated the parameters in our simulation.  We assume that 
peer arrived according to Poisson process: 
!
),(
k
ekf
k λλ
λ
−
=
 
Where theλ is the expected number of occurrences during one minute. The k is the number of 
occurrences of an arrival event. Both of the peer arrival rate and leave rate areλ .  
Notation value Definition(default values) 
runTime  
1440 hours 
or 60 days 
The total running time of the simulation 
N 3000 The topology size 
r 2 The exponent of Power Law 
K From 1 to 6 The distinct outgoings 
32 
 
Full-RP7-88  Full RP model is used so the popularity goes up and down. The 
amount of short-term popularity model is much more than 
long-term. 
Full-RP88-7  The popularity models are up and down. The amount of long-term 
popularity model is much more than short-term. 
Table 4 Population models 
4.2.3  User behavior 
A peer that arrived in the system can select one of all segments which have been produced 
by the content provider, and also can select the live streaming. The peer will leave the system or 
select another segment while it has played a segment.  
4.3  Simulation results 
4.3.1 Sliding window size 
As we have mentioned in section 3.5, each segment in buffer has a cache value to reveal its 
popularity. The problem is how the value of ts is decided. If the ts is adjusted too small, the 
segment that will be popular at future may be replaced. If the ts is adjusted too large, the 
replacement strategy will be insensitive. There are two goals that the cache value approached can 
be classified: 
A. To keep the segment that will be popular at future for longer time. 
B. To detect the wasted storage sensitively to replace the unpopular segments.  
For the goal A, we concern that the video life cycle is up and down. In order to predict the ts, 
we have ranked all segments according to their popularity over time, and then we evaluated the 
rank of a segment over time in figure 21. Assuming the rank is from 0 to 250, the rank 0 is most 
popular, and rank 250 is most unpopular. According to the figure 21 (a), assume that the top 10 
ranks are popular enough, and it’s unpopular when the number of a rank is over 10. Now we 
discuss how to decide ts in order to keep top 10 ranks of videos in cache even though these 
videos may fall out of top 10 ranks for short time.  
First of all, we discuss the Range n environment. The figure 21 (a) has shown that the 
variability of the population is higher when the value of n is 20. Taking the Range 20 situation 
into consideration, we scale up the figure 21 (a) curve that the Range 20 video stayed at top 10 
ranks and show it in figure 21 (b). In figure 21 (b), it is observed that the popularity of a video 
falls below top 10 ranks in two periods. To keep this video in cache when it goes up to top 10 
again, since the maximum period e is long enough to cover the shorter period d, the value of the 
ts can be predicted as the interval of period e.  
Secondary, we discuss the complex video life-cycle environment where the popularity of 
video may go up and down. The population models are generated by RP(t) that parameter B are 7 
and 38 as figure 21 (c) and (d), respectively. For instance, a peer has requested the segment for 
the duration a, we hope that the peer will retain the segment in its buffer until the duration c, so 
that it can be accessed when it is at top 10 ranks. In this case, the value of ts is supposed to be as 
 4.3.2 Experimented results 
As the figure 23 shows the results of performance evaluation of the method 1, method 2, and 
method A. And the method 1, method 2, and method A 
“Publishing Once”, and “Popularity
are the results in all population models that have been defined in 4.1 and illustrated in table 
The figure 23 (c, d, e) are the results in Range 50 population environment. 
In figure 23 (a) and (b), we set
evaluated all of three methods in all population 
comparing the Zipf PMF forα = 
for α = 0.8 has the lower difference in popularity between the segments. And the Zipf PMF for 
α = 1.6 has the higher difference in popularity between the segment
Zipf PMF, we found out the method 2 can obtain higher hit
method 1 whileα is equal to 1.6. 
Figure 23 (a) shows the method 2 outperforms the method 1 in most case. 
34 
(c) 
(d) 
Figure 21(a, b, c, d) Popularity ranked 
indicate the “Continuous Publishing
-based Adaptive Publishing” respectively.
 
 the Zipf parameterα equal to 0.8 and 1.6, respectively, and 
environments that were mentioned in 4.2.2. By 
0.8 andα =1.6 as figure 18 (a, b), we can describe the Zipf PMF 
s. Due to the 
-rate obviously than the hit
 
 
 
”, 
 The figure 23 (a, b) 
4. 
characteristic of 
-rate of 
And the method A 
 2 because of the peers retained the segments that online peers are actually 
This demonstrated the advantage
replacement.  
Figure 23 (e) shows the performance 
hit-rate over fifty days. The arrival rate in system becomes double from the 12000th minute to the 
12120th minute, and the leave rate becomes double from the 42000th minute to the 42120th 
minute.  
The super peers in method A have a responsibility to collect information such as cache value 
and the replica of a segment from other super peers. 
A can improve more enhancement while the super peers collect information from more groups
There are large gaps among the curves of 3.2%, 14.7%, and 69.8%, but small gaps among 
69.08%, 86.9%, and 92.9%. Since collecting information from more supe
cost of more workload on the super peers and the traffic on the networks, the results in figure 23 
(f) implies that collecting from 69.08% 
and performance.  
We calculate the average time how long a segment hasn
As figure 23 (g) shows method A can has more sensibility to detect the unpopular segments when 
the supper peers collected information from more super peers.
(a) various 
36 
interested
 of method A which accomplished the results by
evolvement of three methods in terms of the chunk 
As figure 23 (f) showed, 
r peers suffer from the 
super peers is a good choice for the tradeoff
’t been accessed before it
  
popularity model for Zipf withα =0.8 
 at this time. 
 adaptive 
we observe method 
. 
 between cost 
’s removed. 
 
 (e) hit-rate
(f)  hit-rate of collecting information from 
(g)  The average time how long a segment hasn
Figure 23 Performance 
  
38 
 of variable arrival and departure rates over time 
different amounts of super peers 
’t been accessed before it’s removed as a function of the a
super peers collected from 
comparisons for three caching strategies 
Hours 
 
 
over time 
 
mount of 
Hours 
40 
 
[15] Xiaojun Hei, Chao Lian, Jian Liang, Yong Liu, Keith W. Ross, “A Measurement Study of a 
large-scale P2P IPTV System”, 2007 IEEE 
[16] W. F. Poon and K. T. Lo, “New batching policy for providing true video-on-demand 
(T-VoD) in multicast system,” in Proc. IEEE ICC, vol. 2, 1999, pp. 983–987. 
[17] K.M. Ho, W.F. Poon and K.T Lo, “Peer-to-peer Batching Policy for Video-on-Demand 
System”, 2006 IEEE 
[18] Yang Guo, Kyoungwon Suh, Jim Kurose, and Don Towsley, “P2Cast: Peer-to-peer patching 
scheme for VoD service.” in Proc. WWW’03, Budapest, Hungary, May 2003. 
[19] Anna Statsiou, Michael Paterakis, ”Frequency-based cache management policies for 
collaborative and non-collaborative topologies of segment based video caching proxies”, 
Springer-Verlag 2006 
[20] E.J. Lim, S.H. Park, H.O. Hong, K.D. Chung, “A Proxy Caching Scheme for Continuous 
Media Streams on the Internet”, To appear in ICOIN-15, 2001. 
[21] PARK, S. H., LIM, E. J., AND CHUNG, K. D. 2001.” Popularity-based partial caching for 
VOD systems using a proxy server.”  In Proceedings of the Workshop on Parallel and 
Distributed Computing in Image Processing, Video Processing and Multimedia. IEEE 
Computer Society, Piscataway, NJ. 
[22] C. Griwodz, M. Bar, and L. C. Wolf. Long-term movie popularity models in 
video-on-demand systems. In Proceedings of ACM Multimedia 1997, Seattle, WA, 
November 1997. 
[23]  A. Hu, “Video-on-demand broadcasting protocols: A comprehensive study,” in Proc. IEEE 
INFOCOM, April 2001. 
[24] L. Gao, D. Towsley, and J. Kurose, “Efficient schemes for broadcasting popular videos,” in 
Proc. Inter. Workshop on Network and Operating System Support for Digital Audio and 
ideo, July 1998. 
[25] D. Eager and M. Vernon, “Dynamic skyscraper broadcasts for video-on-demand,” in Proc. 
4th Intl. Workshop on Multimedia Information Systems, Sept. 1998. 
[26] K. Hua, Y. Cai, AND s. Sheu, “Patching: A multicast technique for true video-on-demand 
services,” in Proc. ACM Multimedia, Sept. 1998. 
[27] D. L. Eager, M. K. Vernon, and J. Zahorjan, “Minimizing bandwidth requirements for 
on-demand data delivery,” in IEEE Trans. on Knowledge and Data Engineering, Sept./Oct. 
2001. 
[28] L. Gao, D. Towsley, “Threshold-based multicast for continuous media delivery,” in IEEE 
Transactions on Multimedia, Dec. 2001. 
 
42 
 
super-peer 他是此資料的發佈者之一，目的是當有 peer 向 super-peer 詢問該筆多媒體資
料時，super-peer 可告訴他到何處取得。   
 提出有效管理使用者訂閱資料之資料結構 
在本計畫中我們使用與使用者發佈資料相同的資料結構來管理使用者訂閱資料，我們
利用第一年所發展的 Peer Vector R*-tree (PVR-tree) 來描述所發布的多媒體資料的內容，
同時也利用另一個同樣為 PVR-tree 的資料結構來描述使用者訂閱的多媒體資料。這些
資料結構，連同訂閱者的位址資料(IP address) 均存在訂閱者所屬的 group 之 super-peer 
的資料庫中，而資料的建立是透過訂閱訊息的傳送。 
 提出分散式發佈訊息與訂閱資料管理之索引技術 
在發布訊息和訂閱資料的索引方面，為了讓系統的運作一致性且有效率，我們採用相
同的索引技術。同樣藉由分散在各個 group 的 Super-peer 的資料庫來管理。當有 peer 
有多媒體資料要 publishing 時，他必須用 publishing message 通知其 super-peer ，
super-peer 利用 PVR-tree 記錄其多媒體資料特徵與 peer 位置(IP address)。該 super-peer
同時會查詢訂閱者之 PVR-tree 看是不是有與該筆新發布的資料符合的訂閱資料，若有
則此 super-peer 便會立即發出 notification message 給訂閱者，否則，super-peer 便將剛
才的 publishing message 發給相鄰的 super-peer 再由他們查詢是否有人訂閱此資料，此
訊息的傳遞會持續到所設定的 TTL 遞減至零為止。 
 當有  peer 多媒體資料要訂閱時，他必須用  subscribing message 通知其
super-peer ，super-peer 利用 PVR-tree 記錄其訂閱之多媒體資料特徵與 peer 位置(IP 
address)。該 super-peer 同時會查詢資料發佈之 PVR-tree 看是不是有與該筆訂閱資料符
合的發佈資料。若有，則此 super-peer 便會立即發出 notification message 給訂閱者，
否則，super-peer 便將剛才的 subscribing message 發給相鄰的 super-peer 再由他們查詢
是否有此資料的發佈，此訊息的傳遞同樣會持續到所設定的 TTL 遞減至零為止。 
 提出快速有效過濾與路由演算法 
我們利用 super-peer 這種階層式的 routing 方式，不需有單一集中的資料庫索引，也沒
有 flooding 方式的控制訊息氾濫。而 super-peer 也可以利用定期的資訊交換來獲得更
多資訊，根據實驗所得，在本計畫的系統架構下，當 super-peer 收集到約 86% 
super-peer 的資料，就能達到近似 global indexing 的效果。 
 提出適合建置在 P2P 上的訂閱發佈系統架構 
我們提出了一個適合用於 P2P 上的訂閱發佈系統架構，此架構中只有含幾個簡單的元
素 streaming server, track server, super-peer, 及 peer。而其中以 super-peer 擔任的角色最
為重要，用於處理資料發佈與使用者訂閱的事宜。在我們的架構中，由於資料發佈與
使用者訂閱的處理可以遵循幾乎完全相同的模式，將這兩件事集中在 super-peer 並不
會增加太多負載，卻能完成系統所需的功能。在此計畫中我們還提出了幾種不同的資
料發佈策略，根據實驗結果，以 popularity-based adaptive publishing 效果最好。 
 完成P2P 上多媒體訂閱發佈系統之實作與實地測試 
為了測試大規模使用者情形下的系統效率，我們用模擬的方式藉由改變使用者進入與
離開系統的速率 (arrival rate, departure rate)， 及不同影片熱門的模型(data popularity 
model)，來模擬上限約至5000個使用者的P2P系統，而模擬結果顯示所提的系統能達不
錯的命中率(hit-rate)， 亦即有很大比例的使用者訂閱資料能被正確找到。  
44 
 
附件一: 出席國際研討會 ICIP2008 之心得報告 
 
國際研討會心得報告 
 
出差及報告撰寫人: 國立交通大學資訊工程系 蔡文錦 
 
一、國際會議基本資料 
(一) 國際會議名稱：2008 IEEE International Conference on Image 
 Processing (ICIP’08) 
(二) 時間：97 年 10 月 12 日 至  97 年 10 月 15 日 
(三) 地點：San Diego, Calfornia, U.S.A. (美國加州聖地牙哥)  
 
二、出差經過 
1. 這次會議的地點是在聖地牙哥的國際會議廳(Conventional Center) ，其位於單軌
電車的國際會議廳站附近，交通便利，因此參加會議的那幾天都是搭公車轉電車再
步行一小段即可到達會議地點，非常方便，也省下不少搭計程車費用。 
2. 這次 ICIP’08 和 Solar Power 研討會都是在國際會議廳舉辦，兩個研討會的參加
人數都很多，現場頗為熱鬧。 
3. 這次除了參加論文所發表的 Session: Image & Video Communications III 外，也
去聽了其它幾個有興趣的 Sessions，如 Image/Video Retrieval I、 Image/Video 
Modeling I、Video coding、 以及 Image/Video classification,retrieval and 
Browsing， 收穫不少。 
 
三、心得報告 
 本次參加並於會中發表論文: 「A NEW UNEQUAL ERROR PROTECTION SCHEME BASED ON FMO」。
此論文主要是探討如何在視訊串流中，根據資料的重要程度給予不同程度的保護碼，以因
應網路傳輸時可能的資料錯誤及遺失，讓接收端有最佳的收視品質。此研究可用於一般網
路上的視訊串流應用，包括 P2P。  
 此研究主題以海報方式呈現於 Session: Image & Video Communications III 中，期
間吸引一些學者的興趣並和許多學界先進交換意見及討論，也獲得不少回饋，整理如下： 
46 
 
附件二: 國際研討會 ICIP2008 中所發表之論文 
 
A NEW UNEQUAL ERROR PROTECTION SCHEME BASED ON FMO 
Jhong-Yu Shih and Wen-Jiin Tsai, IEEE Member 
 
Department of Computer Science, National Chiao-Tung University, Hsinchu, Taiwan, ROC. 
 
Abstract 
In this paper we present a slice group based unequal 
error protection (UEP) scheme for video transmission over 
error-prone networks. We propose a method to assign 
macroblock to slice groups based on a variation of 
H.264/AVC dispersed FMO mode and k-means clustering 
algorithm. In addition, a Converged Motion Estimation 
(CME) is proposed to further improve our UEP scheme. The 
idea behind the CME is to make the macroblocks be 
referenced in a skewed manner, such that highly important 
macroblocks are converged on only a few and the use of 
redundancy for error protection is efficient. Our experiments 
on many video sequences show promising results. 
 
Index Terms—Unequal error protection, UEP, FMO, 
Converged motion estimation,  
 
1. INTRODUCTION 
Transmission of video over error-prone channels, such as 
mobile networks, presents many challenges because the 
bit-error rate can be quite high. Associating the video 
bit-stream with forward error correction (FEC) for error 
detection and correction can overcome the problem. In the 
video sequence, some data are higher important than others. 
For example, the picture headers are much more important 
than the data block because, once lost, the entire picture 
cannot be reconstructed well. If these important data can be 
protected with much more FEC, then they can be received 
with a much lower uncorrected error rate and a better video 
quality can be obtained. However, favoring the higher 
important data with more protection implies that less 
important data will be less protected. This is the concept of 
the so-called “Unequal Error Protection (UEP)”.  
      Different UEP schemes ponder the criteria of 
importance from different kinds of viewpoints, for example, 
frame based [1], layer based [2], data partition based [3], 
and slice group based [4, 5]. Since the frame based and the 
data partition based schemes cannot provide UEP at a fine 
granular level such as MBs and the layer based scheme only 
applies to scalable streams, we chose to base our UEP 
method on the slice group based  (or SG-based) scheme. 
For SG-based UEP, the entire frame is divided into many 
slice groups (SG), each of them is given protection 
according to its importance and will be transported 
separately. Flexible Macroblock Ordering (FMO) is a tool in 
H.264/AVC to divide a frame into many SGs. In general, 
error concealment is well performed using H.264/AVC 
dispersed FMO mode. However, it is a fixed pattern applied 
on every frame without considering the importance of the 
48 
 
module calculates the impact factors of all MBs using the 
equation (2). Then, the MB assignment module assigns MBs 
into SGs according to the impact factors and generates a 
FMO table. The encoder then uses the FMO table to encode 
the stream again. Finally, the channel rate allocation module 
bases on impact factors to allocate FEC, and transports the 
video to the network. 
 
Figure 2 The flowchart of the proposed scheme 
 
3.1 Macroblock Assignment 
 
After obtaining the impact factors of all the MBs, the most 
obvious method for MB assignment is to sort the MBs based 
on their impact factors and then sequentially assigned to SGs 
of equal size. We call this as simple UEP. However, doing it 
in this way may result in the important MBs being connected. 
In Fig. 1, if the SG1 is lost, the error concealment becomes 
ineffective because the MBs around the lost MB are also lost. 
We describe how to solve the problem in subsection 3.1.1. 
The fixed-size SGs and the variable-size SGs are two 
options for SG-based UEP. Fixed-size SGs, while simple is 
not efficient for UEP. Consider the case where assume there 
are 99 MBs in the frame and among them 15 MBs are 
highly important. With three SGs of fixed-size (i.e., 33MBs 
for each SG), not only would these 15 MBs be assigned to 
the most important SG (say SG1), but some MBs which are 
not really important would also be assigned to it. This would 
result in that SG1 needs more FEC than it is expected. We 
describe how solve this problem in subsection 3.1.2. 
 
3.1.1. Variation of dispersed mode 
The dispersed mode is type 1 of the slice group map in 
H.264/AVC. Error concealment is effective using this mode 
because when a SG is lost it can be concealed from the other 
SGs. However, the dispersed mode cannot take advantage of  
UEP because of its fixed pattern which makes the MBs of 
different importance belonging to the same SG. 
Our MB assignment scheme first adopts the dispersed 
mode with two SGs (say SG1 and SG2) and then splits them 
further into more SGs according to the impact factor of the 
MBs. In Fig.3, assume that we want to classify MBs into 
three different levels of importance. Then six SGs will be 
used, with three SGs coming from SG1 (all odd blocks) and 
the other three coming from SG2 (all even blocks). It is 
obvious that any MB belonging to SG11, SG12, and SG13 
must have adjacent MBs coming from SG21, SG22, as well as 
SG23, and vice versa. Since no connected MBs are assigned 
to the same SG, the error concealment should be effective. 
How to split a SG into more SGs according to the impact 
factor is described next in section 3.1.2. 
 
Figure 3 Variation of dispersed mode. 
 
3.1.2. K-means clustering 
In order to make the use of FEC more efficient, it is better to 
group the MBs with similar impact factors into the same SG. 
Thus, we simply formulate the MB assignment problem as a 
clustering problem and use k-means algorithm [7] to solve it. 
The k-means clustering follows a simple and easy procedure 
to classify a given data set into a certain number of clusters 
50 
 
than using MSE. Using CME to encode a frame (say fn) only 
requires that the reference frame of fn has been partitioned 
into multiple SGs with per pixel penalties assigned. Since 
CME has no pre-requisite on the current frame fn, it is used 
to replace the first encoding block in Fig.2. 
 
Figure 4 A sketch map of converged motion estimation 
 
5. EXPERIMENTAL RESULTS 
 
In our experiments, “Raster scan” and “Dispersed” are used 
for comparison. Both of them use Equal Error Protection 
(EEP) with the same overall bit rate. For comparison, we 
add the “Simple UEP” as described in the section 3.1. The 
Simple UEP does not adopt the dispersed mode and the 
k-means algorithm, but it uses our channel rate allocation 
scheme to achieve UEP. In order to evaluate the effects of 
CME, we have made a comparison between the “Proposed 
UEP with CME” and the “Proposed UEP” which did not use 
CME. The video sequences are encoded and decoded using 
JM 12.1 with the motion estimation modified to support 
CME. The parameters used are shown in table 2. 
Table 2. Parameters used in the experiments 
Parameters Values 
Video sequences, bitrate Forman: 340kbps, Coastguard: 360kbps 
Group of Pictures I P P P P …… (15 frames per GOP) 
Frame format and rate QCIF (176 x 144 pixels), 30fps 
Number of SGs 6 SGs 
The per pixel penalty in 
CME 
ci = i, for i = 1 to 6, where ci is for SGi, 
and the SG is numbered in descending 
order of IF( SG
 i )  
 
In our experiments, if a MB is not received correctly, the 
decoder first checks if the adjacent MBs are inter-coded. If 
at least three inter-coded MBs are available, the median 
motion vector of them is calculated and used to associate the 
MB in the previous frame for error concealment. Otherwise, 
error concealment is performed by using adjacent MBs 
interpolation. We have evaluated the performance on many 
video sequences. However, due to space limitation, only the 
results of Forman and Coastguard are presented as shown in 
figures 5 and 6, respectively. From the results it is observed 
that the Dispersed performs better than Raster scan because 
error concealment is more efficient in Dispersed than Raster 
scan. Simple UEP outperforms Raster Scan and Dispersed 
mode in all cases, showing that the impact factors we used 
can correctly estimate the importance of MBs and thus the 
unequal protection takes effect. We also observed that the 
proposed UEP method (without CME) is superior to the 
simple UEP, showing that using k-means clustering and the 
variation of the Dispersed mode can improve the overall 
quality. The performance gain is about 2.2dB, and it is even 
higher if CME is used, which indicates that making energy 
converged on few MBs will further improve the UEP 
performance because FEC can be utilized more efficiently.    
             
 
Figure 5  Forman sequence (packet loss rate=10%) 
