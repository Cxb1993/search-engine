間的頻寬差距，多核心晶片必須使用大量的記憶體與快取（cache）元件，以達
到最佳的效能[1‐10]。 
在多核心系統中配置數個相同的核心與相同的記憶體，如圖二所示，已是目
前設計處理器與運算密集的系統晶片的趨勢，多個相同的記憶體將形成陣列。如
Sun  Microsystem的第三代 UltraSPARC微處理器晶片中已使用多達 940個記憶體
元件，共有兩千七百萬個位元。與傳統系統晶片內記憶體相比，多核心系統中的
晶片面積與記憶體數量更為龐大。要測試、診斷、修復、並提高整體晶片良率將
是設計多核心系統的一大挑戰。以下將介紹各種提高晶片良率的技術與方法。 
 
圖二: 多核心晶片內多組核心與多組同質性記憶體之概念圖 
2. 用於多核心晶片中同質性記憶體之低成本管線內
建自我測試電路 
A. 提出的方法 
針對多核心晶片中同質性記憶體之測試，我們提出使用低成本管線式內建自
我測試電路，可同時解決繞線以及測試時間過長的問題。圖三所示為一多核心晶
片，由多個核心所組成，每個核心內有數個處理器以及記憶體單元[27]。每個記
憶體單元又各由數個同質性記憶體所組成，如圖四所示。 
 
圖三:具有多組處理器與記憶體單元的多核心晶片 
寫入全 0(全 1)的資料，達到同步初始化所有代測記憶體。其他的測試元素則可
以依據各個測試元素所需的寫入資料，利用 XOR閘對輸入資料進行反向或是維
持原來的資料，如圖六所示。 
 
 
 
 
 
 
圖六:在低成本管線式內建自我測試電路中的記憶體資料轉換界面(DT) 
B. 硬體實現 
我們提出的記憶體內建自我測試電路包括測試控制器以及測試樣本產生器，
如圖七所示。測試控制器掌控整個測試流程，包含指令暫存器以及有現狀態機。
測試樣本產生器則依據由 cmd_in訊號線傳入至指令暫存器(command register)的
指令產生相對映的測試樣本，以及產生控制測試界面的控制訊號。測試指令包括
記憶體位址，測試元素，以及測試資料樣本。我們使用四個位元來產生 16種不
同的測試元素，測試資料樣本數則依據代測記憶體大小而有所不同。 
 
圖七: 低成本管線式內建自我測試電路的硬體方塊圖 
C. 實驗結果與分析 
表 1: 提出的低成本管線式內建自我測試電路與其他方法的比較 
BIST 架構  記憶體組態  額外面積  測試複雜度(March C‐) 
SBIST[26]  2k 
25k 
1.8% 
4.3%  24NxW 
LPBIST[27]  256k  5.89% 
3.40%  10N 
DBIST [28]  776k  1.06%  10N 
使得自我測試電路傳送測試資料至記憶體的延遲時間拉長。 
考慮布線與延遲問題，可採用多個記憶體共享內建自我測試電路之控制器，
另外配置測試資料產生器與比較器於各個記憶體中，如圖九所示，以降低因為實
際晶片中擺放位置不同，而造成之延遲問題。若採用共用自我測試電路之控制器，
測試模式下的功率依然大於晶片額定功率，以及考慮最小整體測試時間下，就必
須對此測試流程進行測試排程（test scheduling）之工作，計算出同一時間內能夠
被測試之記憶體數量、大小與順序。 
   
圖九:傳統 SoC中可共享式平行內建自我測試電路 
         另外，亦有如圖十之做法，將記憶體的輸出暫存器加上多工器重新合成為
序列式暫存器，使用類似掃描鍊(scan chain)的測試方法對記憶體進行測試。記憶
體中的資料先被讀出存放於輸出端的暫存器後，往右位移一個位元，加上輸入端
新的測試資料，再寫入同一個字組。連續的讀出與寫入將在同一個字組執行多次，
直到此字組內所有的字元被更心。此序列式自我測試電路所需之輸出輸入訊號相
當少，輸入端最少只需一個位元，輸出端最少也只需一個位元，可解決部分因記
憶體擺放位置造成的繞線問題，同時此電路所付出的額外面積消耗相當少，相對
地卻付出測試時間長的代價。若對多個記憶體進行測試則有兩種實現方法。如圖
十一所示，圖十一(a)為使用菊花環方式串連多個記憶體，使其成為一個更大的記
憶體來進行測試。圖十一(b)則為獨立將多個記憶體的輸出傳至自我測試電路中，
再使用多工器選擇目前要觀察的記憶體。使用圖十一(a)的方式測試記憶體陣列將
耗費龐大的測試時間，若使用圖十一(b)方式測是記憶體陣列將面臨繞線問題。 
                                                                 
圖十:序列式內建自我測試電路[26] 
自我測試電路中的問題，在我們提出的低成本內建自我測試電路中也可被解決。
每當記憶體讀出一筆字組時，最右邊(或最左邊)的位元將與自我測試電路送至的
預期資料相比較，產生徵狀(syndrome)，並存於 Syn暫存器中。在對同一字組的
下一次讀取中，產生的徵狀將與存於 Syn暫存器中的徵狀累計。直到同一字組內
的所有字元都被比較並且累計後，內建自我測試電路將拉起更新(update)的訊號，
將累計後的徵狀更新至錯誤傳送暫存器(FSR)中，並繼續測試下個字組。由於每個
記憶體所執行的測試指令相間隔一個時脈，因此在等待所有記憶體更新徵狀後，
FSR暫存器才形成位移暫存器將所有徵狀傳送至自我測試電路中。 
 
圖十三:多核心中邏輯核心使用 IEEE 1500，而記憶體通常使用內建自我測試電
路。 
此外，在多核心系統中，邏輯核心大部分皆有配置記憶體，邏輯核心大部分
接是使用 IEEE 1500標準測試封包做為測試介面，然而記憶體通常藉由內建自我
測試電路進行測試，非 IEEE  1500，如圖十三所示。然而，邏輯核心與記憶體的
連線測試將成為一大問題。因此，我們延伸了所提出的低成本測試技術，進而增
加可測試與邏輯核心連線的功能，使多核心晶片的測試涵蓋率更高。如圖十四所
示，我們所提出的低成本測試電路只需增加記憶體控制訊號端的設計，以及測試
指令即可。 
 
 
圖十四:可測式記憶體陣列與連線之低成本測試電路架構圖 
的測試樣本，以及產生控制測試界面的控制訊號。測試指令包括記憶體位址，測
試元素，以及測試資料樣本。我們使用四個位元來產生 16種不同的測試元素，
測試資料樣本數則依據代測記憶體大小而有所不同。位元計數器則是紀錄目前執
行到該字組的字元位置，以判斷是否該換至下一個字組進行測試。資料產生器除
了產生該寫入的測試資料，同時也要產生讀取記憶體時，應進行比對的預期資料。
此外，該測試電路需依據位元計數器判斷使否該拉起更新以及傳送徵狀訊號。 
 
圖十七:用於記憶體陣列之低成本測試電路架構圖 
F. 實驗結果與分析 
我們使用 TSMC  0.18um 的製程實現提出的低成本內建自我測試電路，並對
不同記憶體數與不同記憶體大小進行模擬。表 2所示為針對四個組態相同之記憶
體進行測試所付出的額外面積與可執行的速度。表 3所示為針對四個組態相同之
記憶體進行測試所付出的額外面積與可執行的速度。若要降低測試複雜度，設記
者可調整輸出與輸入的頻寬。 
表 2: 針對四個記憶體的低成本內建自我測試電路的實驗結果 
 
 
 
Area HardwareOverhead Delay
64x64‐bit RAM
BIST (1‐bit test width)
BIST (2‐bit test width)
0.101mm2
20071um2
20989um2
‐
5.04%
5.20%
2.0ns
1.2ns
1.2ns
64x128‐bit RAM
BIST (1‐bit test width)
BIST (2‐bit test width)
0.187mm2
26478um2
28231um2
‐
3.53%
3.77%
2.0ns
1.5ns
1.5ns
1024x64‐bit RAM
BIST (1‐bit test width)
BIST (2‐bit test width)
0.460mm2
22412um2
25013um2
‐
1.21%
1.36%
2.0ns
1.2ns
1.2ns
ECC），增加額外的記憶體空間儲存錯誤更正碼，在記憶體存取的同時做更正的動
作。另外亦有利用系統閒置時，週期性地測試記憶體，達到增強可靠度之作法，
稱為透明測試（transparent  testing），因記憶體執行透明測試後，原存有之內容
不變，且只要將原有之 BIST稍加修改即可支援透明測試。 
為了要儲存執行透明測試前記憶體的期望資料，需要使用額外的記憶體與壓
縮電路儲存此資料。若多核心晶片記憶體單元內配置一個大小、組態皆與同質性
記憶體相同之備份記憶體，此備份記憶體在經過非及時性測試電路 BIST 測試後
確認沒有瑕疵，且沒有被使用作為其他記憶體之備份，即可將透明測試之儲存期
望資料於此記憶體中。降低因透明測試所需之額外記憶體消耗。因此，需要分析
使用額外記憶體與壓縮電路和使用備份記憶體，作為儲存元件之不同與可行性，
並且需設計簡易之內建自我測試電路與介面，使期望資料能以較少的額外面積消
耗儲存至儲存元件中，達到離線之自我測試與線上之透明測試，增加記憶體之可
靠度。 
為了結合離線自我測試與線上透明測試，並降低硬體實現之複雜度，我們提
出可程式化之內建自我測試電路，可同時支援離線測試與線上測試的功能。圖即
為此用於具有錯誤更正能力記憶體之可程式化線上與離線式內建自我測試電路
之功能方塊。此內建自我測試電路包括控制器、測試樣本產生器、更正碼比較器
(code‐comparator) 、與資料輸出模組 DEM(data exportation module)。資料輸出模
組序列性地輸出診斷資料。此自我測試電路的輸出輸入阜包括時序(CLK)、重設
(RST)、BIST選擇線  (BMS)、BIST scan in (BSI)、BIST scan out (BSO) 、BSI的致能線 
(BSI_EN) 、BIST完成  (BIST_done) 、與 BIST錯誤旗幟  (BEF)。內建自我測試電路
藉由產生控制訊號 S1、S2、與 S3切換記憶體於一般、離線測試、與線上測試模
式。 
 
圖十八: 可程式化線上與離線式內建自我測試電路的功能方塊 
當記憶體操作於一般模式下，多工器的控制訊號 S1、S2、與 S3分別設定於
0、1、1。資料的存取經由一般輸出輸入阜，同時記憶體內的資料將受到存於備
份記憶體中的錯誤更正碼所保護。如圖所示，當記憶體於一般模式下執行讀取動
作時，記憶體控制訊號經由一般 IO 進入，將資料記憶體的資料與備份記憶體中
所示。然而，在[]所提出的線上透明測試方法只能於測試結束時檢驗是否有錯，
無法及時發現錯誤。 
 
圖二十一:線上測試模式中的讀取動作 
B. 硬體實現 
我們使用下圖所示之指令格式實現可程式化的離線測試模式。在離線測試模
式下，內建自我測試電路將執行多種測試演算法，因此需要定義不同的指令來實
現不同測試演算法的操作。如圖所示，我們使用一位元的 Up_Dn 來表示執行測
試演算法位址的順序，並使用 e個位元的 OPCode來表示各種不同的測試操作，
以及 b個位元來定義不同的資料樣本。在此實驗，我們採用 3個位元的 OPCode
來實現八種不同的測試操作。 
         
圖二十二: 用於離線測試模式下的指令 
此外，我們使用三個位元來實現可程式化之線上透明測試演算法，可產生八
種測試元素支援四種透明測試演算法，包括 TRS MarchC‐、TRS March X、TRS MATS+、
與 ATMarch，如圖二十三與二十四所示。 
 
圖二十三:用於線上測試模式的指令 
 
圖二十四: 可支援的透明測試演算法 
 
圖二十七:內建透明自我測試電路之比較器 
C. 實驗結果與分析 
我們使用 TSMC  0.18μm 的標準元件資料庫來實現三種不同記憶體的內建自
我測試電路。表表示硬體實現合成完後的結果，我們假設每一個記憶體都有一個
錯誤可修正、兩個錯誤可偵測的漢明錯誤更正碼(Hamming error correction code)。
如表二所示，所提出的內建自我測試電路的硬體成本不高，例如對於一個 4k×39
的記憶體，額外面積比例只有 2.61%。 
表 5:應用於不同記憶體大小的透明內建自我測試電路的實驗結果 
 
最後，我們和之前的內建自我測試電路做個比較，如表 6所示。[33]也是一
個可以提供線上和離線測試的內建自我測試電路，但是[33]是使用多點輸入位移
器(MISR)來分析測試資料，所以有個兩個缺點，一個是診斷測試能力會降低，另
一個是會有測試資料失真(aliasing)的問題。我們所提出的內建自我測試電路可以
提供很好的診斷測試能力，而且不會有測試資料失真的問題。[33]要等所有測試
演算法動作都執行完成後才判斷測試結果，這將會使錯誤位置難以判斷，造成錯
誤回復時間拉長，相對於我們的方法，我們測到錯誤，就會馬上修正，所以錯誤
回復時間相對減少。 
因為錯誤更正碼技術在現在的記憶體裡十分常見，所以我們所提出的方法仍
非常可行，並且可以得到更高的記憶體可靠度。 
表 6:與其他方法之特性比較 
  Proposed  TPBIST[33]  Typical MBIST 
Diagnosis Ability  Yes  No  Yes 
Online Test Ability  Yes  Yes  No 
Aliasing (Off‐line Test)  No  Yes  No 
8kx72 8kx22 4kx39
Cost (gates) 4090 2059 2782
Delay (ns) 4.64 4.64 4.64
HO (%) 1.17 % 1.64 % 2.61 %
 
圖二十八:用於具有錯誤更正能力記憶體之內建自我測試與修復電路架構圖 
圖二十九所示為此 RA_CTR控制器的有限狀態機 FSM。第一個狀態是 RA_IDLE。
當內建自我測試電路偵測到有錯誤時，Err訊號被拉起，狀態進入 CHECK_FAULT，
暫停測試。在此狀態，RA_CTR 控制器將判斷此偵測到的錯誤字組是否已經被修
復過或是被存在點陣圖中。若已被修復或已被存在點陣圖中，則忽略此字組，回
到第一個狀態 RA_IDLE，繼續測試。否則，RA_CTR 將會分析此字組的漢明碼
(Hamming code)，檢驗在此字組中是否有多個 bit錯誤(multiple faulty bits, MFB)，
同時檢驗是否有足夠的備份行。若此字組具有多個 bit錯誤，且有足夠的備份行
(ARS=1)，則使用一個備份行修復，進行至 ROW_REPAIR狀態。若無足夠的備份行，
則進入 RA_UNREPAIR狀態。若此字組只有單個 bit錯誤，RA_CTR進入 STORE狀
態，將錯誤的位址與資訊先暫時儲存於點陣圖中。在儲存的同時，RA_CTR 將檢
驗點陣圖是否已經被存滿。若尚未被存滿，則回到 RA_IDLE，繼續下一個測試。
若已存滿，則進入 REPAIR_MOST 狀態。在此狀態中，修復最多的錯誤演算法將
被使用。若此時無可用的備份元件，此記憶體將被判斷為不可修復之記憶體。在
所有錯誤皆被修復完後，回到 RA_IDLE狀態，並進入 FINAL_CHECK的步驟。確認
剛才所有被偵測的錯皆有被適當的修復。若此時在線上模式，TRS_EN 設為 1，
清空點陣圖，RA_CTR進入 COPY狀態(包含WRT_SPARE與 READ_RAM兩狀態)。 
 
圖二十九:用於具有錯誤更正能力記憶體之內建自我測試與修復電路架構圖 
 
CTR
TPG
Code-Comparator
Data-Comparator D
E
M
CLK
RST
BMS
BSI
BSI_EN
DONE
Te
st
 D
at
a
Normal
IOs
BSO
BEF
S1
1
0
1 0
1
0
S2
S3
Code
Generator
RA_CTR Bitmap
Q’
C
Q C
or
re
ct
io
n 
C
ir
cu
itCode Memory
Data Memory
DI DO
Spares
A
R
U
B
IR
A
BIST
RA
IDLE
CHECK
FAULT
STORE
ROW-
REPAIR
REPAIR
MOST
Un
REPAIR
FINAL
CHECK
Full
!MFB & 
!Repaired
RepairedErr
MFB & ASR
&!ASRMFB
!Empty &
!ASR&!ASC
!Full
TRS_En
& Done
CP_Dn
!Empty
READ
RAM
WRT
SPARE
Done
Finish| 
CP_Dn
!Err
Empty
字組發生兩個以上的錯誤，則將無法更正。SEC‐Scrubbing 技術則是周期性的
將記憶體內的資料讀出，更正後再寫回記憶體中，與 SEC 技術相同，此技術
只能抵抗單位元錯誤，此可靠度同時也依賴於刷新的周期。SEC‐BISR 技術則
是整合 ECC以及備份分析技術，使用在離線時尚未使用到的備份元件來修復
ECC 偵測到的錯誤。然而，若備份元件被耗盡，此技術所提供的可靠度將與
SEC 相同。由圖三十一可知，完全不受保護的電路將非常得不可靠，我們所
提出的技術 SEC‐TRS‐BISR 加上線上式的透明測試與修復技術，將可提供比其
他技術還高的可靠度。 
 
圖三十一:各種技術之可靠度分析 
修復率(repair rate)相當適合用來評估備份分析演算法的效率，並已被廣泛地
使用。有個相當簡易的方法，可將修復率轉換為晶片良率。因此，我們可由修復
率得知此技術可提升的良率。使用內建自我修復技術的記憶體良率(Ymbisr)可由已
下公式評估: 
                                  (1) 
Ym’是記憶體執行修復後的良率，Ym是沒有使用內建自我修復的記憶體。使
用 Poisson分布，可計算 Ym=e‐AmDm。Am是記憶體的面積，Dm是記憶體的瑕疵
密度，HObisr是將內建自我修復電路除以記憶體的面積，Dl是一般邏輯電路(BISR)
的瑕疵密度。如表 8所示，32kx72‐bit大小的記憶體在採用我們所提出的 TRS BISR
之後，可發現比起沒有修復技術的記憶體良率 Ym，被修復後的記憶體良率 Ymbisr
將可被大幅度的提升。此技術的良率將比一般的修復技術良率 Ybisr略低，因為
此技術所付出的面積比起一般的修復技術多了 2500個邏輯閘左右。然而，此技
術可提供比起一般記憶體更高的可靠度。 
 
 
Ymbisr=Ym’·Ybisr
=(Ym+(1-Ym)RR)·YmHObisr·Dl/Dm    
稱為透明測試（transparent  testing），因記憶體執行透明測試後，原存有之內容
不變，且只要將原有之 BIST稍加修改即可支援透明測試。 
為了要儲存執行透明測試前記憶體的期望資料，需要使用額外的記憶體與壓
縮電路儲存此資料。若多核心晶片內每個記憶體單元皆配置一個大小、組態皆與
同質性記憶體相同之備份記憶體，面積將會成長兩倍。因此，我們提出適用於多
個同質性記憶體之可分享式透明內建自我測試與修復技術，只需要相當小的額外
面積消耗。此外，傳統的透明測試方法會有失真、錯誤定址能力、以及測試時間
冗長的問題。然而，此方法可解決以上的問題，提供相當短的特徵(signature)預
測時間，在偵測到錯誤的情況下，真正可達到回復記憶體原本所儲存的內容能力，
以及可適用於線上式修復。 
此方法不限制記憶體是否具有錯誤更正碼，多個同質性記憶體將共享一錯誤
碼記憶體(code RAM)與內建自我測試電路，如下圖所示。此錯誤碼記憶體只會在
執行透明測試時被使用到，不會影響一般記憶體在正常模式下的操作。在離線式
產品測試階段(production test)下，此內建自我測試電路除了可對多個同質性記憶
體進行平行測試，也將同時對錯誤碼記憶體進行測試。若在此階段偵測到錯誤碼
記憶體內有錯誤，此內建自我測試電路在一般模式下將不執行透明測試。在這種
情形下，晶片良率不會受到影響，但會降低晶片的可靠度。 
 
 
(a)                                                        (b) 
圖三十二: (a)離線模式下執行平行測試  (b)線上透明模式下的序列測試 
 
由於週期性透明測試是在記憶體閒置時執行，因此我們假設同一時間只針對
其中一個記憶體進行透明測試。對記憶體進行透明測試時，預期的特徵將被儲存
在錯誤碼記憶體中。此預期的特徵可由讀取待測記憶體內所儲存的資料得到，換
句話說，預期的特徵即是目前待測記憶體內每個字組的錯誤更正碼。此錯誤更正
碼可由我們所提出的內建自我測試電路中搭配的錯誤更正碼電路產生，也就是，
此透明測試架構可在執行記憶體讀取操作時，使用錯誤碼產生電路(code  gen)產
生的結果(預期的特徵)檢驗記憶體的測試反應，如下圖所示。因此，此技術對於
一個有NxB‐bit的記憶體只需要N個測試複雜度即可完成特徵的預期。 
 
CORE
RAM
CORE
RAM
CORE
RAM
CORE
RAM
BIST
Code
RAM
 
圖三十四: 透明測試與修復技術的架構圖 
B. 硬體實現 
表 11: 硬體合成後的實驗結果 
 
我們使用了 TSMC  0.18um 製程實現了四個同質記憶體與所提出的共享式自
我修復技術。我們使用了 3x3大小的點陣圖暫存待修資料，每個記憶體皆配置兩
個備份行與一個備份列。上表總合了合成後的面積消耗。如果記憶體數量不大，
共享式錯誤碼記憶體則會支配了此架構的整體面積消耗。因此，此技術所付出的
額外面積大致上與錯誤碼記憶體成正比。例如，此自我修復技術對於 n 個
8kx16‐bit同質性記憶體的面積消耗大約是 41300/83800xn。下圖所示為實現四個
8kx64‐bit大小的記憶體共享此自我修復技術的布局圖。 
 
RA_2DCode RAM
Shared 
Unit
BIST
Interface
RAM0
CTR_L
TPG
RA_1D
BMAP
W
ra
pp
er A
RU
Co
de
c
RAM4
CTR_L
TPG
RA_1D
BMAP
W
ra
pp
er A
RU
Co
de
c
RAM1
CTR_L
TPG
RA_1D
BMAP
W
ra
pp
er A
RU
Co
de
c
RAM2
CTR_L
TPG
RA_1D
BMAP
W
ra
pp
er A
RU
Co
de
c
Gates RAMs BIST BISR HOBIST HOBISR
512x8x32 
(4kx32)
167600
(83800.0*2) 33772 40816.1 20.1% 24.3%
512x16x16
(8kx16)
167600
(83800.0*2) 43664.9 49512.2 26.0% 29.6%
512x16x64
(8kx64)
578200
(289100.0*2) 55170.6 64889 9.5% 11.2%
512x16x64
(8kx64)
1156400
(289100.0*4) 58808.4 76783.4 5% 6.6%
術[62]不需預測特徵，但是受限於此對稱性特徵，測試演算法中的指令必須
修改至成對稱性，將增加測試複雜度。比較我們所提出的技術與對稱性，執
行 MarchX與 MarchC‐的複雜度相同，但皆小於傳統技術[61]。但是我們所提
出的技術無錯誤遮蔽的問題。 
表 13: 不同技術執行不同測試演算法所需的測試複雜度(時間) 
 
7. 用於網狀(mesh‐based)網路晶片中記憶體之內建自
我測試與修復方法 
網路晶片化在晶片內核心數目日益增加之趨勢下已成為主流[4][7][8][9][13]。
根據研究實驗指出，已實現之多核心晶片內核心數目多於八之後，經由傳統匯流
排交換資訊之延遲效益已不可忽視。當單一記憶體容量大於某一程度後，內部進
行存取的延遲效益也逐漸增加，因此有將單一大型記憶體分割成多個記憶體組
（Bank），再使用網路連接，以降低延遲時間。多核心晶片除了上述之同階層同
質性之記憶體單元外，亦有核心間共用之記憶體。核心間只需透過對共享之記憶
體進行存取，即可達成高速之資料傳遞，不必實際搬動資料。同樣地，考量效能
與延遲的問題，這些共享記憶體與核心將連接至各路由器，透過區域網路溝通資
訊。針對連接至網路上之共享記憶體，就測試與修復策略而言，內建式自我修復
電路造成的額外面積消耗亦為其一大關鍵考量因素。下圖所示為一 4x4的網狀網
路晶片，其中包含 16個 IP核心，網狀路由器(Mesh‐based  router)，以及轉換核
心與封包用的網路介面(Network interface)。 
 
圖三十六:4x4網狀網路晶片示意圖 
 
MATS+ March X March C‐
SP TT Total SP TT Total SP TT Total
Typical [12]  2N 4N 6N 3N 5N 8N 5N 9N 14N
Symmetric [17]  0N 4N 4N 0N 6N 6N 0N 10N 10N
Ours 1N 4N 5N 1N 5N 6N 1N 9N 10N
R
IPI
R
IPI
R
IPI
R
IPI
R
IPI
R
IPI
R
IPI
R
IPI
R
IPI
R
IPI
R
IPI
R
IPI
R
IPI
R
IPI
R
IPI
R
IPI
IPI
R Mesh-based Router
IP core
Network interface (NI)
 
圖三十八: 用於網狀網路晶片中記憶體之內建自我測試之電路方塊圖 
網路晶片將所有的電路藉由網路連接在一起進行資料傳輸。利用這個特性，
我們提出分享式備份元件來修復網路上之記憶體。如下圖所示，網狀網路晶片包
含處理器 Processor A與 B，各處理器皆有數個記憶體，每記憶體皆有自我的備份
行 spare column。每個處理器將配置一重新映射表 remapping table，IIP針對每個
記憶體單獨進行分析與修復，並將修復後的新位址儲存於新映射表中，映射到分
享式備份記憶體 global spare memory中。網路上屬同一處理器之各個記憶體皆可
使用此備份元件來修復錯誤，分享式備份元件將可提高記憶體修復的比率。一般
記憶體各自擁有備份元件，當某些記憶體之備份元件並未被使用時，其他記憶體
也無法使用，但是建立在網路上的備份元件則無此一限制。未用完之備份元件，
將能提供給其他記憶體，藉此增加其他記憶體修復之比率。另外在針對異質性記
憶體的組態大小皆不同下，藉由可調整的方法，將備份元件分割成多份，在進行
修復時只選取其所需之部分，來降低備份元件在使用上的浪費。在備份元件擺放
位置的部分，當處理器在讀取記憶體時，若記憶體該位置已經被修復，則該讀取
封包將被給予修復後的新位置，封包會將讀取命令傳至修復後的備份元件，但在
重新傳遞的過程中，會增加額外之延遲。為改善此一問題，在與處理器相接的路
由器上加裝以修復位置的資料，將可以降低延遲的問題，但是卻必須付出較大的
面積消耗。為解決上述問題，可採用混合的方式，假設處理器會常使用某些區域
的記憶體，則將該記憶體的修復資料加在處理器的路由器上，而較少被使用之記
憶體，則採用原來之方法，因為被讀取的次數較少，所以延遲的機會也相對的降
低。因此備份元件被擺放於距離被修復記憶體最小的位置，以降低延遲時間。 
在記憶體正執行測試時，偵測到的錯誤除了以上的錯誤外皆儲存於點陣圖中，當
點陣圖滿時，先使用各個記憶體自己的備份行，若備份行已經耗盡，則採用共享
記憶體之備份字元修復。在記憶體結束測試後，若點陣圖內已無錯誤資訊，則此
記憶體可被修復，若尚有錯誤資訊，則執行備份分析，同樣依照備份行與備份字
元的順序。若所有備份皆被用盡，依然無法修復記憶體，自我修復電路則回報此
記憶體不可被修復 unrepair。 
為了針對不同組態不同大小的異質性記憶體有效地分割備份記憶體，我們使
用具有部分寫入功能的記憶體，做為動態可重組備份記憶體，如圖二十二所示。
新位址在處理器端經由 remapping  register 重新映射時，將新位址與備份記憶體
之控制訊號打包成封包傳至備份記憶體端。備份記憶體將根據此資訊控制記憶體
之寫入訊號，把資料寫入相對映之備份字元。同時，備份記憶體可依據不同的資
訊調整備份字元的大小，以達到修復異質性記憶體之功能。 
 
圖四十一:動態可重組備份記憶體 
C. 實驗結果與分析 
我們實現了內建自我修復電路於不同的記憶體組態中，每個記憶體組態包含
15 個記憶體，由表四可知，我們提出之內建自我修復電路所佔的額外面積相當
小。此內建自我修復電路包含 IIP，15個記憶體的測試封套，一個路由器，與一
個網路介面。以 15個 8Kx64‐bit的記憶體為例，我們提出之內建自我修復電路只
付出 1.38%的額外面積。 
表 14: 用於網狀網路晶片中記憶體之內建自我修復電路的實驗結果 
記憶體組態  記憶體面積 um2  BISR面積 um2  額外面積百分比 
8Kx16  14,867,865  428,161  2.88% 
4Kx32  15,410,910  508,657  3.30% 
8Kx32  26,015,910  509,902  1.96% 
2Kx64  18,157,005  659,283  3.63% 
4Kx64  28,105,005  660,528  2.35% 
8Kx64  48,127,005  661,773  1.38% 
M1 M2 M3 M4000
001
010
011
100
101
110
111
M1 M2 M3 M4
M1 M2 M3 M4
M1 M2 M3 M4
M1 M2 M3 M4
M1 M2 M3 M4
M1 M2 M3 M4
M1 M2 M3 M4
Packet
A
ddress  D
ecoder
A
ddress  D
ecoder
Data  Decodert   r
Addrr Reconfigurefi r Data1t Data2t Data3t Data4t
subword
A
ddress  D
ecoder
A
ddress  D
ecoder
如圖四十四所示， 假設有三個異質記憶體同時執行測試，在位址  (0000000) 
沒有錯誤發生。當在位址  (1111111) 進行測試時，傳出的診斷編碼包含記憶體
識別碼  (101)、 段落(011)、 位址  (1111111) 以及屬於右半部子徵狀  LR0 (01) 的
子徵狀  0 (0010) 和屬於左半部子徵狀  LR2 (10) 的子徵狀  2 (0100)。記憶體識別
碼  (101) 用來表示出  RAM1 沒有錯誤出現，  RAM0 和  RAM2 則是有偵測到錯
誤出現。段落  (011) 表示在第幾個讀的運算觀察到的錯誤出現。位址  (1111111) 
則表示該錯誤出現在那一個記憶體位址。LR0 和  LR2 表示該錯誤徵狀屬於左半
部子徵狀還是右半部的子徵狀。  Ml1‐syndrome0 表示對漢明徵狀進行完第一層
次的壓縮所得到的結果，而   Ml1‐syndrome2  則是利用霍夫曼編碼的方式對
Ml1‐syndrome0 進行第二層次的壓縮。 
       
圖四十四: 關於多層次壓縮技術的例子 
由於瑕疵通常都隨機的分佈在晶圓上，因此每個  RAM 上的瑕疵通常都是隨
機出現，然而，大部份的漢明徵狀值都會是 0。若將一個漢明徵狀切成  m 位元
的象徵  (symbol)，則將會有  2m 種象徵，如表 15 所示，對一個 8 位元的徵狀 
(01000010) 經過第一層次的壓縮後可被判斷為左右兩邊皆有子徵狀，再經過第
二層的霍夫曼編碼後將得到  (001010)，故原本 8 位元的徵狀現在只需用 6 位元
的編碼字來表示。通常全為  0 的象徵和只出現一位元為  1 的象徵出現的頻率相
對於其它象徵發生的頻率都還要來的高很多。但是對於一個象徵可含有多個  1 
位元的  1 其出現的機率則通常會小於前面兩種類型。2m 種象徵會被分成 m + 2
個部份進行霍夫曼編碼。因此，依據  [66]所提出徵狀壓縮的方法對表 11的象徵
進行編碼，其所建立的霍夫曼樹如圖四十五所示，最後可得到如表 15第 3欄的
編碼結果。   
表15: 關於多層次壓縮技術的例子 
Symbol  Hexadecimal  Huffman Tree 
00000000  00  1 
00000001  01  0111 
00000010  02  0101 
00000100  04  0011 
00001000  08  0001 
C. 實驗結果與分析 
整個多層次壓縮的流程如圖四十七所示，首先先對每個記憶體描述規格，包
含記憶體大小和字組長度  (word  length)。並設定要隨機輸入像是  (single  cell 
fault)、  (faulty row) 和  (cluster fault) 等的錯誤以產生含有錯誤的記憶體。接著
利用多層次壓縮方式對每筆漢明徵狀進行壓縮，最後計算整個壓縮結果。壓縮
率的計算公式如下: 

 
 1
0 }{
}{kM
i iii
iiiiii
FnHSMI
CSFnLRFnMICR  
其中MIi 和  MIj分別表示記憶體的識別碼有幾位元，Fnii 則是表示同時被測
的錯誤徵狀數量，Fni 和  Fnj則是表示別被測的錯誤徵狀數量，  LRi 則是用 2 位
元來判斷目前這子徵狀是屬於那一類型的子徵狀  (左子徵狀、右子徵狀，或兩
者皆是) ，CSi 表示經過整個多層次壓縮完後的漢明徵狀長度，而 HSj 表示原本
未經壓縮的漢明徵狀長度。 
Homogeneous
Memories
Specification
Injection
Fault Types
Judgement
Right/Left
Syndrome
Compression
Faulty 
Syndrome
Result
Multi-Level
Compression
Scheme
 
圖四十七: 多層次壓縮的實驗流程圖 
 
 
 
 
 
 
 
 
圖四十八: 不同的記憶體數量和象徵與壓縮率之間的關係 
所提出的多層次壓縮方式的另一個特色是可變動的象徵大小  (symbol  size)。
假設有 100個晶片要被測試和診斷時，前 10個晶片可以選擇  symbol size = 4 或
symbol size = 8，剩下的 90個晶片可選擇要使用那一個  symbol size 而使整體可
達到較好的壓縮率。從圖四十八中可看到當記憶體數量增加時，對於不同的記
憶體配置以及使用 symbol size = 4 和 symbol size = 8所呈現的壓縮效果也會有所
不同，其中以使用 symbol size = 8 的 1k × 128 和  512 × 256 這兩種記憶體配置
所得到的壓縮率效果會是最好的。 
表17: 關於多層次壓縮技術的例子 
 
在表 17中顯示對於使用不同的記憶體配置時，不同的壓縮電路之間的邏輯
閘數量比。當使用三個異質性記憶體時，所提出的方法其壓縮電路使用的邏輯
閘數量比起已經提出的方法都還要來的少。由於自我內建診斷的電路其使用的
暫存器數量會受到字組的長度的影響，因此當記憶體大小增加時，自我內建診
斷的電路和整個晶片的面積比會隨之而降。 
9. 用於測試系統晶片內小型記憶體之加強型 IEEE 
1500測試封套 
A. 提出的方法 
隨著 CMOS 技術的演進，可重複使用(reusable)與核心基礎(core‐based)的設
計技術讓製作 SOC 晶片成為可能。然而，測試這些被深入內嵌在 SOC 晶片內的
0
5
10
15
20
25
30
2 3 4
2Kx64 M=4
2Kx64 M=8
1Kx128 M=4
1Kx128 M=8
512x256 M=4
512x256 M=8
Num. RAMs
Co
m
pr
es
sio
n R
at
io
 (%
)
Memory 
configurations
Gate count Area overhead
[66] [67] [68] Ours [66] [67] [68] Ours
8Kx16 1932 3366 3507 2126 2.03% 3.53% 3.68% 0.84%
4Kx32 2540 4387 4542 3121 2.67% 4.16% 4.87% 1.27%
8Kx64 3904 6569 6761 5160 1.25% 2.11% 2.17% 0.59%
順序，則應使用記數器(counter)式的設計來實現位址產生器，例如多埠(multi‐port)
記憶體可能使用特殊位址順序來測試埠(port)相關的錯。 
 
圖四十九:位址產生器 
WSC 包含 WRCK，WRSTN，SelectWIR，ShiftWR，CaptureWR 以及可選擇的
TransferDR。測試指令利用將 SelectWIR和 ShiftWR訊號拉起時送至WIR，測試向
量則藉由 1500一般的輸入方式，將 ShiftWR訊號拉起送至相對應的WBR。當記
憶體執行讀取後，拉起 CaptureWR訊號將測試反應暫存至WBR中，接著我們利
用選擇性的 TransferDR訊號，定義 WBR在 TransferDR拉起時，將測試反應輸出
至外界進行分析，如下圖所示。 
 
圖五十:增強型 IEEE1500測試封套的操作時序圖 
一般 SOC皆具有數個記憶體，記憶體的型態有可能不同。如下圖所示，core 
1連接到兩個單埠的記憶體 RAM A和 B，core 2連接到多埠的記憶體 RAM C。RAM 
C 需要多個測試演算法來分別測試記憶單元(cell)錯誤與埠相關的錯，因此各個
WIR可針對其所連接的記憶體客製化測試指令。在測試記憶單元錯誤時，可藉由
設定相同的指令在各個 WIR 中，使所有記憶體可同時測試，測試時間則由字組
最多的記憶體所控制。在測試埠相關的錯時，core 1的WIR可設定在穿越(bypass)
模式，core 2的WIR設定為測試埠有關的指令，則只有記憶體 C進行測式，而記
個記憶體被額外的 WBR 所包圍測試，並使用額外的處理器來控制測試流程。然
而，我們所提出的方法利用原先存在於邏輯與記憶體之間的 1500測試封套，因
此可大幅降低測試記憶體所帶來的面積。如下表所示，對一個 256x64‐bit的記憶
體而言，我們所提出的方法可付出最小的額外面積，1.6%。 
表 18: 用於一個 256x64‐bit大小記憶體的不同 BIST方法的比較 
 
10. 產出與結論 
(1) 適用於多核心晶片中同質性記憶體的測試技術與此技術之 Verilog RTL code。 
(2) 適用於連接至網路系統中異質性記憶體的測試技術與此內建自我測試電路
之 Verilog RTL code。 
(3) 適用於多核心晶片中陣列記憶體的低面積測試技術，此適用於陣列記憶體低
面積自我測試電路之 Verilog RTL code。 
(4) 用於具有錯誤更正能力記憶體之可程式化線上與離線式內建自我測試與修
復技術，此可程式化內建自我測試與修復技術之 VerilogRTL code。 
(5) 此可程式化內建自我測試與修復技術之可靠度分析模型。 
(6) 此可程式化內建自我測試與修復技術之良率分析模型。 
(7) 適用於多核心晶片中同質性記憶體之內建自我透明測試與修復技術，與此電
路之 Verilog RTL code。 
(8) 適用於多核心晶片中同質性記憶體之多階層壓縮技術與 VerilogRTL code。 
(9) 用於測試系統晶片內小型記憶體之加強型 IEEE 1500測試封套，與 VerilogRTL
硬體實現。 
(10) 上述成果論文之撰寫與發表。 
 期刊論文 
1. H.-N. Liu, Y.-J. Huang, and J.-F. Li, ``Memory built-in self-test in multi-core 
chips with mesh-based networks," IEEE Micro, vol.29, no.5, pp. 46-55, 
Oct./Sept., 2009. 
2. J.-F. Li, ``Testing comparison and delay faults of TCAMs with asymmetric 
cells," IEEE Trans. Very Large Scale Integration Systems, vol., no., pp. 912-920, 
pp. 541-543;,Jan. 2010 (Embedded Tutorial).  
8. T.-W. Tseng, C.-S. Hou, and J.-F. Li, ”Automatic generation of memory built-in 
self-repair circuits in SOCs for minimizing test time and area cost,” in Proc. 
IEEE VLSI Test Symposium (VTS), (Santa Cruz) pp. 21-26, April. 2010.  
9. C.-W. Chou, Y.-J. Huang, and J.-F. Li, "Yield-enhancement techniques for 3D 
random access memories," in IEEE Int. Symp. on VLSI Design, Automation, and 
Test (VLSI-DAT), (Hsinchu), pp. 104-107, Apr. 2010.  
10. Y.-J. Huang, C.-W. Chou, and J.-F. Li, "A low-cost built-in self-test scheme for 
an array of memories," in Proc. IEEE European Test Symposium (ETS), 
pp. 75-80, May 2010.  
11. C.-C. Chi, C.-W. Wu, and J.-F. Li, "A low-cost and scalable test architecture for 
multi-core chips," in Proc. IEEE European Test Symposium (ETS), pp. 30-35, 
May 2010. 
12. T.-J. Chen, T.-W. Tseng, K.-T. Wu, and J.-F. Li, "A programmable built-in 
self-test scheme for memories in system-in-package chips," in Proc. 3rd VLSI 
Test Technology Workshop (VTTW), (YiLan), pp. -, Aug. 2010. 
13. Y.-J. Huang, Y.-C. You, and J.-F. Li, "Enhanced IEEE 1500 test wrapper for 
testing small RAMs in SOCs ," in Proc. IEEE International SOC Conference 
(ISOCC), (Las Vegas), pp. 29-32, Sept. 2010. 
14. C.-W. Chou, J.-F. Li, J.-J. Chen, D.-M. Kwai, Y.-F. Chou, and C.-W. Wu, "A test 
integration methodology for 3D integrated circuits," in Proc. IEEE Asian Test 
Symp. (ATS), (Shanghai), pp. 377-382, Dec. 2010. 
15. C.-W. Chou, C.-S. Hou, and J.-F. Li, "Built-in self-diagnosis and test time 
reduction techniques for NAND flash memories," in IEEE Int. Symp. on VLSI 
Design, Automation, and Test (VLSI-DAT), (Hsinchu), pp. 257-260, Apr. 2011. 
16. Y.-J. Chang, Y.-J. Huang, and J.-F. Li, "A built-in redundancy-analysis scheme 
for RAMs with 3D redundancy," in IEEE Int. Symp. on VLSI Design, Automation, 
and Test (VLSI-DAT), (Hsinchu), pp. 261-264, Apr. 2011. 
17. Y.-J. Huang, J.-F. Li, J.-J. Chen, D.-M. Kwai, Y.-F. Chou, and C.-W. Wu, ''A 
built-in self-test scheme for the post-pond test of TSVs in 3D ICs," in Proc. 
IEEE VLSI Test Symposium (VTS), (Dana Point) pp.  20-25, May 2011. 
18. Y.-J. Huang and J.-F. Li,¡¨Yield-enhancement techniques for homogeneous 
multi-core processor and memory stacked 3D ICs," in Proc. VLSI Test 
Technology Workshop (VTTW), (Nantou), pp. 17-22, July 2011. 
19. Y.-J. Chang, Y.-J. Huang, and J.-F. Li, “A BIRA scheme with optimal repair rate 
for large RAMs with 3D redundancy,” in Proc. 22th VLSI/CAD Symp., (YunLin), 
pp. 360-363, Aug. 2011. 
 
(ASPLOS), Oct., 2002, pp. 211-222. 
13. M. Rutten, J. Eijndhoven, E. Jaspers, P. Wolf, O. Gangwal, and A. Timmer, 
“Eclipse: Heterogeneous Multiprocessor Architecture for Flexible Media 
Processing”, in Proc. of International Conference on Parallel and Distributed 
Processing (IPDPS), Apr., 2002, pp. 39-50. 
14. J. Parkhurst, J Darringer, and B. Grundmann, “From single core to multi-core: 
preparing for a new exponential”, in Proc. IEEE/ACM International Conference 
on Computer Aided Design (ICCAD), Nov. 2006, pp. 67-72. 
15. M. Pericas, A. Cristal, F. J. Cazorla, R. Gonzalez, D. A. Jimenez, and M. Valero, 
“A flexible heterogeneous multir-core architecture”, in Proc. Int. Conf. on 
Parallel Architecture and Compilation Techniques (PACT), Sep. 2007, pp. 13-24. 
16. A. Dehnharadt, M. B. Kulaczewski, L. Friebe, S. Moch, P. Pirsch, H.-J. Stolberg, 
and C. Reuter, “ A multi-core SOC design for advanced image and video 
compression”, in Proc. Int. Conf. on Acoustics, Speech, and Signal Processing 
(ICASSP), March 2005, pp. 665-668. 
17. D. Geer, “Chip makers turn to multicore processors”, IEEE Computer, vol. 38, 
no. 5, pp.11-13, May 2005. 
18. R. Kumar, D. M. Tullsen, N. P. Jouppi, P. Ranganathan, “Heterogeneous chip 
multiprocessors”, IEEE Computer, vol. 38, no. 11, pp. 32-38, Nov. 2005. 
19. O. Takahashi, S. Cottier, S.H. Dhong, B. Flachs, and J. Silberman, 
“Power-conscious design of the CELL processor’s synergistic processor 
element”, IEEE Micro, vol. 25, no. 5, pp. 10-18, Sep.-Oct. 2005. 
20. M. Gschwind, D. Erb, S. Manning, and M. Nutter, “An open source environment 
for Cell broadband engine system software”, IEEE Computer, vol. 40, no. 6, pp. 
37-47, Jun. 2007. 
21. D. Geer, “For programmers, multicore chips mean multiple challenges”, IEEE 
Computer, vol. 40, no. 9, pp.17-19, Sep. 2007. 
22. J. McGregor, “The new x86 landscape”, Microprocessor Report, May 14, 2007. 
23. M. Nahvi and A. Ivanov, “Indirect test architecture for SoC testing”, IEEE Trans. 
on Computer-Aided Design of Integrated Circuits and Systems, vol. 23, no. 7, pp. 
1128-1142, July 2004. 
24. E. Cota, L. Carro, F. Wagner, M. Lubaszewski, “Power-aware NoC reuse on the 
testing of core-based systems”, n Proc. Int. Test Conf. (ITC), Oct. 2003, pp. 
612-621. 
25. B. N. Dostie, A. Silburt, and V. L. Agarawal, “Serial interfacing technique for 
embedded memory testing,” IEEE Design & Test of Computers, vol. 7, no. 2, pp. 
52–63, Apr. 1990. 
26. M. Lobetti-Bodoni, A. Benso, S. Chiusano, S. D. Carlo”, G. D. Natale”, and P. 
Systems, vol.13, no.6, pp. 742-745, June, 2005. 
39. R.-F. Huang, J.-F. Li, J.-C. Yeh, and C.-W. Wu, “RAISIN: a tool for evaluating 
redundancy analysis schemes in repairable embedded memories”, IEEE Design 
and Test of Computers, vol.24, no.4, pp. 386-396, July-August 2007. 
40. C.-D. Huang, J.-F. Li, and T.-W. Tseng, “ProTaR: an infrastructure IP for 
repairing RAMs in SOCs”, IEEE Trans. Very Large Scale Integration Systems, 
vol.15, no.10, pp. 1135-1143, Oct. 2007. 
41. J.-F. Li and C.-D. Huang, “An efficient diagnosis scheme for RAMs with simple 
functional faults”, IEICE Trans. Fundamentals of Electronics, Communications 
and Computer Sciences, vol. no. pp. , July 2007 . 
42. D.-M. Chang, J.-F. Li, and Y.-J. Huang, “A built-in redundancy-analysis scheme 
for random access memories with two-level redundancy”, J. Electronic Testing: 
Theory and Application, vol., no., pp. , July 2007 . 
43. H.-M. Shieh, C.-H. Wu, and J.-F. Li, "A multi-code compression technique for 
reducing system-on-chip test time," in IEEE Int. Symp. on VLSI Design, 
Automation, and Test (VLSI-DAT), pp. 239-242, Apr. 2006. 
44. L.-M. Denq and C.-W. Wu, “A hybrid BIST scheme for multiple heterogeneous 
embedded memories”, in Proc. IEEE Asian Test Symp. (ATS), (Beijing), 
pp. 349-354, Oct. 2007. 
45. H. Ichihara, Y. Setohara, Y. Nakashima, and T. Inoue, “Test compression / 
decompression based on JPEG VLC algorithm”, in Proc. IEEE Asian Test Symp. 
(ATS), (Beijing), pp. 87-90, Oct. 2007. 
46. T. Bjerregaard and S. Mahadevan, “A survey of research and practices of 
Network-on-chip”, ACM Computing Surveys (CSUR), vol. 38, no. 1, 2006 
47. T. Bjerregaard and J. Sparso, “Packetizing OCP transactions in the MANGO 
network-on-chip”, in Proc. of the 9th EUROMICRO Conference on Digital 
System Design (DSD), 2006, pp. 657–664. 
48. K. Goossens, J. Dielissen, and A. Radulescu, “Æthereal network on chip: 
concepts, architectures, and implementations”, IEEE Design & Test, vol. 22, no. 
5, pp.414 - 421, Sep. 2005. 
49. S. Kumar, A. Jantsch, M. Millberg, J. Oberg, J. Soininen, M. Forsell, K. 
Tiensyrja, and A. Hemani, "A network on chip architecture and design 
methodology", in Proc. IEEE Computer Society Annual Symposium on VLSI 
(ISVLSI), Apr. 2002, pp. 105-112. 
50. Pierre Guerrier and Alain Greiner, “A generic architecture for on-chip 
packet-switched interconnections”, in Proc. IEEE/ACM Design, Automation & 
Test in Europe (DATE), 2000, pp. 250-256. 
51. John Bainbridge and Steve Furber, “Chain: a delay-insensitive chip area 
simultaneous detection of functional faults and soft errors in memories,” IEEE 
Trans. Reliability, vol. 52, no. 4, pp. 413–422, Dec. 2003. 
65. J.-F. Li, “Transparent test methodologies for random access memories 
without/with ECC,” IEEE Trans. on Computer-Aided Design of Integrated 
Circuits and Systems, vol. 26, no. 10, pp. 1888–1893, Oct. 2007. 
66. J.-F. Li, R.-S. Tzeng, and C.-W. Wu, “Diagnostic Data Compression Techniques 
for Embedded Memories with Built-In Self-Test,” Jour. of Electronic Testing: 
Theory and Applications, vol. 18, pp. 515–527, Aug.-Oct. 2002. 
67. C.-T. Huang, J.-R. Huang, C.-F. Wu, C.-W. Wu, and T.-Y. Chang, “A 
programmableBIST core for embedded DRAM,” IEEE Design & Test of 
Computers, vol. 16, pp. 59–70, Jan.-Mar. 1999. 
68. R.-F. Huang, C.-L. Su, C.-W. Wu, Y.-J. Chang, and W.-C. Wu, “A Memory 
Built-In Self-Diagnosis Design with Syndrome Compression,” in Proc. IEEE 
Int’l Workshop on Current & Defect Based Testing (DBT), (Napa Valley), pp. 
97–102, Apr. 2004. 
69. B. Wang, Y. Wu, and A. Ivanov, “A fast diagnosis scheme for distributed small 
embedded SRAMs,” in Proc. Conf. Design, Automation, and Test in Europe 
(DATE), Munich, Mar. 2005, pp. 852–857.  
70. Y. Zorian and A. Yessayan, “IEEE 1500 utilization in SOC design and test,” in 
Proc. Int’l Test Conf. (ITC), Austin, Nov 2005, Paper 23.2, pp. 1–10. 
97 年度專題研究計畫研究成果彙整表 
計畫主持人：李進福 計畫編號：97-2221-E-008-094-MY3 
計畫名稱：M-Ray:用於多核心系統晶片中記憶體之可靠性與良率改善技術 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 1 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 5 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 2 0 100%  
博士生 1 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 6 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 6 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 4 0 100%  
博士生 2 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
