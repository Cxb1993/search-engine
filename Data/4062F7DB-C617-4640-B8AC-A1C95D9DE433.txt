 1
考量混合工單等級生產排程問題之研究 
 
 
摘  要 
在競爭市場中，製造廠必須同時考慮訂單準時送達及產能有效率的被利用以追求
競爭力及利潤。本計畫考量混合工單等級生產排程問題是探討實務因素之排程問題，
其在實務上有許多應用，特別是在半導體製造產業。半導體製造廠所生產的最終產品
可分為兩大類：現貨市場的標準化產品以及顧客訂單的客製化產品，其中顧客訂單又
依顧客要求而訂有多工單等級。除了上述之混合工單等級的限制外，工作依產品類型
分群組且工作的處理時間隨產品而異，機台設置時間與所處理工作的次序是順序相
關。因此，混合工單等級生產排程問題具有混合工單等級、順序相關之設置時間、工
作產品群組、工作產品別相關之處理時間及產能等限制，其求解比傳統的排程問題更
加困難。本計畫考量以最小化總工作負荷為衡量績效的混合工單等級生產排程問題，
針對生產環境為單一機台的情況，提出整數規劃模式與演算法以安排各工單之工作順
序，也針對所提出的整數規劃模式及演算法，利用實務上的問題進行測試。 
Keywords: 混合工單等級、單機排程、整數規劃、演算法、半導體製造。 
 
ABSTRACT 
This project considers the single machine scheduling problem with mixture priority 
jobs (MSPMP), which has many real-world applications, particularly, in the IC manufacturing 
industry.  In an IC manufacturing factory, there usually exists two classes of end-products, 
namely standard products for spot market and customer specific products for customer orders.  
Furthermore, because of different product profit rates and the varied importance level of 
customers, there often exists more than one priority level of customer orders.  Since the 
MSPMP involves constraints on mixture priorities, sequence dependent setup times, job 
families, and family-dependent processing time, it is more difficult to solve than the classical 
machine scheduling problem.  In this project, we describe the MSPMP in detail and formulate 
the MSPMP as integer programming problem to sequence the jobs with minimizing the total 
machine workload.  An efficient heuristic algorithm is also proposed for solving large scale 
problem.  The applicability of the integer programming model and the proposed heuristic 
algorithm are demonstrated by solving a real-world example taken from an IC manufacturing 
factory. 
Keywords:  Mixture-priority orders, single machine scheduling, integer programming, 
algorithm, semiconductor manufacturing. 
 3
adjusting tools, configurations setting, and acquiring materials.  Among the topics of setup 
restrictions, family setup-time is very common and important in many real-world applications. 
Based on the required tooling or container, jobs are classified into families, and a setup is 
needed on a machine if it switches processing of jobs from one family to another family, but 
no setup is needed if the jobs are from the same family. The problem of scheduling jobs with 
family setup time has been approached for single machine (Gupta and Ho 1995, Webster and 
Baker 1995, Pan et al. 2001, Karabati and Akkan, 2006).  In this project we model the 
concerns of on-time delivery through the use of mixture priority jobs, while the sequence-
dependent setup times will be explicitly taken into account in order to effectively utilize the 
machine capacity. 
According to the environment, machine scheduling problems can be classified as 
single machine and parallel machines (Bard and Rojanasoonthon, 2006).  Single-machine 
problems are of fundamental character, which can be interpreted as building blocks for more 
complex problems. A fundamental issue is the inherent difficulty of single machine 
scheduling problems (Schmidt, 2000; Zhu and Wilhelm, 2006).  For the MSPMP investigated 
in this project, we focus on the single machine scheduling problem.  In the MSPMP, there are 
two main classes of job orders, one with no priority restriction and the other being assigned 
priority.  Further, jobs are clustered by their families with each family containing several 
product types.  The job processing time may vary, depending on the product family of the job 
process on.  Setup times for two consecutive jobs of different product families on the same 
machine are sequence dependent.  Since the MSPMP involves constraints on mixture 
priorities, job family, family dependent processing time, and sequentially dependent setup 
times, it is more difficult to solve than the classical machine scheduling problem.  In this 
project, we formulate the MSPMP as an integer programming problem.  An efficient heuristic 
algorithm is also proposed for solving large scale problem.  To illustrate the applicability of 
the integer programming model and the proposed heuristic model, a real-world example taken 
from an IC assembly shop floor in an IC manufacturing factory located in the Science-based 
Industrial Park at Tainan, Taiwan, is solved. 
 
2. DESCRIPTION OF MSPMP 
The MSPMP may be defined as follows.  We are given a set of jobs to be processed.  
The jobs to be processed are clustered by their product types which must be processed on the 
production facility.  The jobs can be categorized into two classes, namely with priority and 
with no priority restriction.  In the case jobs with no priority restriction can be processed 
precede (or succeed) any other jobs.  In the case jobs with priority code, a job with higher 
job priority must be completed before other jobs with lower job priority can be begun. 
Throughout this project, we assume that each job assigned a value of  job priority is 
 5
Note that the optimal solution for this example is shown in Figure 2.  The total 
machine workload is 770 with setup time 270 and processing time 500.  We note that the job 
priority constraints are satisfied for the solution.  Thus, there are four product type changes, 
from machine initial status to 2R ( 21r ), 2R ( 21r ) to 1R ( 11r ), 1R ( 14r ) to 3R ( 31r ), and 3R ( 33r ) to 
2R ( 22r ). 
 
 
Figure 1: A Feasible Schedule for the MSPMP Example. 
 
 
Figure 2: The Optimal Schedule for the MSPMP Example. 
 
 
3. AN INTEGER PROGRAMMING FORMULATION 
We first define }{ I210 R,...,R,R,RR   containing 1I  families of jobs, each family 
}{ iiji J,...,2,1jrR   containing iJ  ( iJ,,2,1j  ) jobs to be processed.  Thus, family 
}{
1J112111
r,...,r,rR   contains 1J  jobs, family }{ iiJ2i1ii r,...,r,rR   contains iJ  jobs, and family 
}{
IIJ2I1II
r,...,r,rR   contains IJ  jobs.  In this setting, job family }{ 010 rR   represents a pseudo-
job family, which is used as the initial status of the machine.  We also define  H,,2,1,A 0  
as the set of processing priority code.  Let ijh  ( Ahij  ) be the processing priority code of job 
ijr .  In the case of jobs with processing priority code zero, jobs are with no priority restriction 
and can be scheduled proceeding (or succeeding) any other jobs.  In the case of jobs with 
positive priority code, job with a smaller priority code indicates that this job has a higher 
processing priority.  Thus, set 'j'iij hh   if job ijr  has a higher processing priority than job 'j'ir .   
Let ijn  be the lot size of job ijr , and ip  be the unit processing time for each job ijr  in 
family iR  ( iij Rr  ).  Therefore, the job processing time for job ijr  is iij pn .  Let 'iis  be the 
sequence dependent setup time between any two consecutive jobs )( iij Rr   and )( 'i'j'i Rr   from 
 7
variables of ijct , and )1N(N II   variables of 'j'ijiy .  Further, the constraint sets in (2) contains 
one equation, the constraint set in (1) and (3) each contains IN  equations, and constraint sets 
in (4), (5), and (6) each contains )1( II NN  equations.  Thus, the total number of variables is 
1N 2I  , and the total number of equations is 1NN3 I2I  . 
To solve the integer programming problem for the MSPMP example described in 
Section II, we adopt ILOG OPL (2002) to generate the constraints and variables of the model.  
For the MSPMP on a single machine, with three job families, ten jobs, and mixture-priority 
level, the model contains 122 variables and 353 constraints.  We note that, by using the IP 
software ILOG CPLEX on a Pentium IV 3.0 GHz PC, the integer solution of the problem is 
indeed identical to that depicted in Section II. 
 
4. A HEURISTIC ALGORITHM FOR THE MSPMP 
The heuristic algorithm is presented to solve the MSPMP by taking the merits of the 
sequential savings algorithm investigated by Clark and Wright (1964).  The proposed 
algorithm essentially consists of two phases, in which phase I assigns jobs into proper clusters 
and phase II sequences jobs bases on minimizing setup times and clusters.  In Phase I assign 
jobs into clusters with the considerations of job priorities and job families.  In such a way, a 
job can be arranged preceding (or succeeding) any other jobs in the same cluster.  Jobs in 
different clusters must be arranged with the consideration of processing precedence.  In Phase 
II, we initially calculate the savings of all pairs of families and create a list by sorting the 
savings in descending order of their magnitudes.  According to the order of the clusters, we 
first group jobs of the same family.  The schedule is then expanded by finding the feasible job 
group with the smallest setup times in the clusters to add it to the end of current schedule.  
Repeat this step until all jobs are scheduled. 
The procedures of the proposed heuristic algorithm are described as follows. 
Phase I- Clusters formation 
Step 1: Create H  clusters, aC , H,,2,1a  . 
Step 2: For each job ijr  with priority code ijh (>0), assign job ijr  to cluster ijhC . 
Step 3: For each job ijr  with priority code 0, proceed with the following: 
Step 3.1:Let Ha  . 
Step 3.2:If there is a job belong to family i  in cluster aC , then assign job ijr  to 
cluster aC , go to step 4, else go to step 3.3. 
Step 3.3:Let 1 aa .  If 1a  then go to step 3.2, else assign job ijr  to cluster HC  
and go to step 4. 
Step 4: Repeat Step 3 until all jobs are assigned into clusters.  Proceed to Phase II. 
 9
changing chop table, changing mount stage and mount head, and the parameter setting 
operations on the machine.  The time to change chop table is 240 minutes, the time to change 
mount stage and mount head is 120 minutes, and parameter settings is 30 minutes in this case.  
The setup time required for switching one product type to another is shown in Table 3.   
The solution of this MSPMP example is as follows and shown in Figure 4.  The total 
machine workload is 10455 with setup time 1080 and processing time 9375.  We note that the 
mixture job-priority constraints are satisfied for the solution.  Thus, there are eight product 
family changes, from machine initial status to 6R ( 1r6 ), 6R ( 1r6 ) to 1R ( 11r ), 1R ( 31r ) to 2R ( 1r2 ), 
2R ( 1r2 ) to 4R ( 1r4 ), 4R ( 44r ) to 2R ( 22r ), 2R ( 23r ) to 6R ( 62r ), 6R ( 62r ) to 3R ( 31r ), and 3R ( 13r ) to 
5R ( 51r ). 
 
 
Figure 3. The MSPMP real-world example 
 
 
61r 21r12r11r 23r42r 44r43r41r 22r 51r32r31r62r13r
 
Figure 4 the schedule for the real-world example 
 
 
 
 11
7. 計畫成果自評 
(1)研究內容與原計畫相符程度及達成預期目標情況 
本研究計畫內容與原計畫相符。本計畫考量以最小化總工作負荷為衡量績效的混
合工單等級生產排程問題(MSPMP)，針對生產環境為單一機台的情況，已提出整數規
劃模式與演算法以安排各工單之工作順序，也針對所提出的整數規劃模式及演算法，
利用實務上的問題進行測試。 
(2) 研究成果之學術或應用價值及是否適合在學術期刊發表或申請專利 
本研究針對環境除混合工單等級的限制外，工作依產品類型分群組且工作的處理
時間隨產品而異，機台設置時間與所處理工作的次序是順序相關。因此，混合工單等
級生產排程問題具有混合工單等級、順序相關之設置時間、工作產品群組、工作產品
別相關之處理時間及產能等限制，其求解比傳統的排程問題更加困難，本計畫所提之
整數規劃模式及演算法可解決實務問題。研究成果已於研討會發表部份成果，未來於
學術上可朝向平行機台排程並以期刊論文方向發表。實務應用方面則可持續擴大應用
至有混和工單等級環境之其他產業。本研究成果可提供實務應用及學術之後續發展，
故極為適合朝向學術期刊論文發表。 
(3) 主要發現或其他有關價值等 
在競爭市場中，製造廠必須同時考慮訂單準時送達及產能有效率的被利用以追
求競爭力及利潤。本計畫考量混合工單等級生產排程問題是探討實務因素之排程問
題，其在實務上有許多應用，特別是在半導體製造產業。因為本問題求解比傳統的排
程問題更加困難。而本計畫考量以最小化總工作負荷為衡量績效的所提整數規劃模式
及演算法，在實務問題的測試上顯示為有效且有效率。 
 
 
REFERENCES 
Allahverdi, A., Gupta, J. N. D., and Aldowaisan, T. (1999). A review of scheduling research 
involving setup considerations. Omega, 27, pp. 219-239. 
Bard, J. F. and Rojanasoonthon, S. (2006). A branch-and-price algorithm for parallel machine 
scheduling with time windows and job priorities. Naval Research Logistics, 53, pp. 
24-44. 
Clark, G. and Wright, J (1964). Scheduling vehicles from a central depot to a number of 
delivery points. Operations Research, 12, pp. 568-580. 
Ehteshami, B., Petrakian, R. G., and Shabe, P. M. (1992). Trade-offs in cycle time 
management: hot lots. IEEE Transactions on Semiconductor Manufacturing, 5(2), pp. 
101-106. 
 13
Uzsoy, R., Martin-Vege, L. A., Lee, C. Y., and Leonard, P. A. (1991). Production scheduling 
algorithms for a semiconductor test facility. IEEE Transactions on Semiconductor 
Manufacturing, 4(4), pp. 270-280. 
Webster, S., and Baker, K. R. (1995). Scheduling groups of jobs on a single machine. 
Operations Research, 43(4) pp. 692-703. 
Wood, S. C. (1997). Cost and cycle time performance of fabs based on integrated single-wafer 
processing. IEEE Transactions on Semiconductor Manufacturing, 10(1), pp. 98-111. 
Youssef, K. H., Van Delft, C., and Dallery, Y. (2004). Efficient scheduling rules in a combined 
make-to-stock and make-to-order manufacturing system. Annals of Operations 
Research, 126, pp. 103-134. 
Zhu, X. and Wilhelm, W. E. (2006). Scheduling and lot sizing with sequence-dependent setup: 
A literature review. IIE Transactions, 38, pp.987-1007. 
 
 
三、考察參觀活動(無是項活動者省略) 
(無) 
 
四、建議 
應多舉辦國際會議或補助學者參加此類會議，可促進學術交流與國際合作的機會，
且可提升國際競爭力與國際學術地位。 
 
五、攜回資料名稱及內容 
1. Conference Program: GBATA Eleventh Annual International Conference. 
2. CD of the proceedings. 
 
六、其他 
 
694 ©Copyright 2009 by the Global Business and Technology Association 
While, under the MTO system, a job is released to the manufacturing facility only after a firm customer order 
has been received (Youssef et al., 2004).  Due to different product profit rates and the varied importance level of 
customers, there often exists more than one priority level of customer orders (Uzsoy et al., 1991; Ehteshami et al. 
1992; Narahari and Khan, 1997; Freed and Leachman, 1999; Gupta et al. 2004; Bard and Rojanasoonthon, 2005; 
Pearn et al. 2007).  The actual sequence of those jobs with specified priority must be arranged following their 
specified priority.  As the competition become much fiercer, the trend toward increased product variety and 
drastic changes in market demand have necessitated production systems that can produce both MTS and MTO 
products.  In the hybrid MTS and MTO systems, some products are produced for spot markets based on a 
demand forecast, while other products are produced based on actual orders, on a common production line with 
limited capacity (Tsubone et al. 2002).  As a result, these mixture priority jobs in a production system 
complicated the production analysis and scheduling.  
Most practical scheduling problems contain setup times.  Generally, setup includes work required to 
prepare a machine to produce parts of a given type, including setting jigs and fixtures, adjusting tools, 
configurations setting, and acquiring materials.  Any successful scheduling system needs to take the sequence-
dependent nature of the setups into account since ignoring setup considerations in scheduling decisions can result 
in loss of capacity (Uzsoy et al. 1991).  Hence, in this paper we model the concerns of on-time delivery through 
the use of mixture priority jobs, while the sequence-dependent setup times will be explicitly taken into account 
in order to effectively utilize the machine capacity. 
In this paper, we formulate the MSPMP on single machine as an integer programming problem.  To 
illustrate the applicability of the integer programming model, a real-world example taken from an IC assembly 
shop floor in an IC manufacturing factory located in the Science-based Industrial Park at Tainan, Taiwan, is 
solved to obtain the optimal solution. 
 
DESCRIPTION OF MSPMP 
 
The machine scheduling problem with mixture priority jobs (MSPMP) on single machine may be 
defined as follows.  We are given a set of jobs to be processed.  The jobs to be processed are clustered by their 
product types which must be processed on the production facility.  The jobs can be categorized into two classes, 
namely with priority and with no priority restriction.  Further, the job processing time may vary, depending on 
the product type (job family) of the job process on.  Setup times for two consecutive jobs of different product 
families on the same machine are sequentially dependent.  The objective of the MSPMP is to find a schedule for 
sequencing the jobs, which satisfies the priority processing restrictions, while the total machine workload is 
minimized.  Minimizing the total setup time is equivalent to the minimization of the total machine workload.  
Process characteristics modeled include mixture job-priority consideration and sequence dependent setup-time 
constraint. 
The MSPMP is NP-hard.  Even without the mixture job-priority constraint, the MSPMP special case 
which minimizes makespan on a single machine in the presence of sequence-dependent setup times is equivalent 
to the Traveling Salesman Problem, and it has been shown to be NP-hard (Freed and Leachman, 1999; Liu and 
Chang, 2000). 
Consider the following MSPMP on single machine example with three families of jobs ( 1R , 2R , 
and 3R ) ready for processing initially .  Job family 1R  contains four jobs, 11r  with priority 1, both 12r  and 
13r  with priority 2, and 14r  with no priority restriction.  Job family 2R  contains three jobs, 21r  with 
priority 1, 22r  with priority 2, and 23r  with no priority restriction.  Job family 3R  contains three jobs, 
both 31r  and 32r  with priority 2, and 33r  with no priority restriction.  Table 1 displays the setup times 
required for switching one product type to another for the three types 1, 2, and  3.  Job processing times 
for families 1R , 2R , and 3R  are 50, 50, and 50, respectively.  In Table I  the label U denotes that the 
machine is in initial  status.  Note that the setup times and the  processing times are associated with the 
product types, independent of class of jobs or job priority levels.  
One feasible solution for this example is shown in Figure 1.  The total machine workload is 830 with 
setup time 330 and processing time 500.  We note that the job priority constraints are satisfied for the solution.  
Thus, there are four product type changes, from machine initial status to 2R ( 21r ), 2R ( 21r ) to 1R ( 11r ), 1R ( 12r ) 
to 2R ( 22r ), and 2R ( 23r ) to 3R ( 31r ). 
696 ©Copyright 2009 by the Global Business and Technology Association 
Let ijn  be the lot size of job ijr , and ip  be the unit processing time for each job ijr  in family iR  
( iij Rr  ).  Therefore, the job processing time for job ijr  is iij pn .  Let 'iis  be the sequence dependent setup time 
between any two consecutive jobs )( iij Rr   and )( ''' iji Rr   from different job families )'( ii  .  We also define the 
variable ijct  as the completion time for job ijr .  We note that, the priority codes, lot size, and completion time 
for the job 01r  should be set to zero so that these pseudo-jobs should be scheduled as the first jobs on the 
machine, which indicates the initial status of the machine. 
Let '' jijiy  be the precedence variable defined on two jobs ijr  and '' jir  scheduled on the machine, with 
'' jijiy =1 if job ijr  precede job '' jir  (not necessarily directly), and '' jijiy =0 otherwise. 
To find a schedule for sequencing jobs which minimize the total machine workload without violating 
mixture priorities constraints, we consider the following integer programming model.   
 
 
 
Minimize wl  (1.) 
subject to 
0 ijctwl , for all ji, , (2.) 
001 ct , (3.) 
,0 pnct iijij   for all ji, , (4.) 
0)1()( ''''''''  jijijiijiiiij yMctpnsct , for all ji, , (5.) 
 0,)1()( ''''    yhhhh iji'j'jiijjiij for all ji, , (6.) 
 ,1''  ijjiiji'j' y y for all ji, , (7.) 
 1}, {0,'' jijiy  for all ji, . (8.) 
 
The constraints in (2) together with the objective function (1) seek to minimize the total machine 
workload.  The constraint in (3) assigns the initial status of the machine.  The constraints in (4) ensure 
completion time is greater than job processing time.  The constraints in (5) ensure the unequal completion time 
ijct  and '' jict  for the two jobs ijr  and '' jir  scheduled on the machine, where 1 '' jijiy  corresponds to 
''' iiiijijji spnctct  .  The number M  is a constant, which is chosen to be sufficiently large.  
The constraints in (6) ensure that job with smaller priority code or priority code equals zero (higher job 
priority or no priority restriction) should precede the other job with larger or priority code equals zero (lower job 
priority or no priority restriction), ( 1 '' jijiy  and 0  ijjiy '' , if '' jiij hh   or 0ijh  or 0'' jih ) or ( 0 '' jijiy  and 
1  ijjiy '' , if '' jiij hh   or 0ijh  or 0'' jih ).  The constraints in () ensure that either the job ijr  precede job '' jir  
( 1 '' jijiy ) or the job ijr  succeed job '' jir  ( 1 ijjiy '' ). 
The computational complexity of the integer programming model is as follows.  For a MSPMP on a 
single machine with I  job families, containing a total of II JJJN  211  jobs, the integer programming 
model contains one variable of wl , IN  variables of ijct , and )1( II NN  variables of '' jijiy .  Further, the 
constraint sets in (2) contains one equation, the constraint set in (1) and (3) each contains IN  equations, and 
constraint sets in (4), (5), and (6) each contains )1( II NN  equations.  Thus, the total number of variables is 
12 IN , and the total number of equations is 13
2  II NN . 
To accelerate the execution in solving the integer programming problem, a depth-first search strategy 
(Freed and Leachman, 1999; ILOG OPL, 2002) together with a strong branching rule (ILOG OPL, 2002) can be 
used to accelerate the execution in solving the integer programming problem.  By using the depth-first search 
strategy, when the tree size or the number of fully developed branches exceeds limitations induced by 
computation time or memory requirements, the program terminates and returns the best solution achieved (ILOG 
OPL, 2002). 
698 ©Copyright 2009 by the Global Business and Technology Association 
5 2 12 inch 19 35 3 
6 2 12 inch 14 35 0 
7 3 8 inch 9 40 3 
8 3 8 inch 7 40 4 
9 4 12 inch 21 40 2 
10 4 12 inch 19 40 3 
11 4 12 inch 16 40 0 
12 4 12 inch 18 40 0 
13 5 8 inch 8 45 4 
14 6 12 inch 18 45 1 
15 6 12 inch 15 45 3 
 
Table 3: Setup Times Required for Switching One Product Type to Another in the Real Example 
To 
From 
U 1 2 3 4 5 6 
U 0 150 150 150 150 150 150 
1 0 0 30 390 150 390 150 
2 0 30 0 390 150 390 150 
3 0 270 270 0 270 270 390 
4 0 30 30 270 0 390 150 
5 0 270 270 30 270 0 270 
6 0 30 30 270 30 270 0 
 
 
 
Figure 3: The Optimal Schedule for the Application Example 
 
0 1000 60005000400030002000 7000 8000 9000 10000
61r 21r12r11r13r 23r42r44r43r41r 22r 51r32r31r62r
Setup Operations Process Operations
  
 
ACKNOWLEGEMNT 
 
This paper was supported in part by the National Science Council, Taiwan, ROC, under the contract 
NSC 97-2221-E-269 -016. 
 
REFERENCES 
 
Bard, J. F. and Rojanasoonthon, S. ―A branch-and-price algorithm for parallel machine scheduling with time 
windows and job priorities,‖ Naval Research Logistics, Vol. 53 (2005):24-44. 
 
Blazewicz, J., Dror, M., and Weglarz, J. ―Mathematical programming formulations for machine scheduling: A 
survey,‖ European Journal of Operational Research, Vol. 51 (1991):283-300. 
 
Ehteshami, B., Petrakian, R. G., and Shabe, P. M. ―Trade-offs in cycle time management: hot lots,‖ IEEE 
Transactions on Semiconductor Manufacturing, Vol. 5, No. 2 (1992) :101-106. 
 
Freed, T. and Leachman, R. C. ―Scheduling semiconductor device test operations on multihead testers,‖ IEEE 
Transactions on Semiconductor Manufacturing, Vol. 12, No. 4 (1999): 523-530. 
 
