行政院國家科學委員會專題研究計畫成果報告 
探討無線環境下之資料廣播的問題(I) 
Exploring the Problems on Data Broadcasting in Wireless Environments(I) 
 
計畫編號：NSC 94-2213-E-027-043- 
執行期限：94 年 8 月 1 日至 95 年 7 月 31 日 
主持人：劉傳銘   國立臺北科技大學 資訊工程學系 
計畫參與人員： 林昆鋒、傅書煜、何凱云 
 
一、摘要 
本計劃探討在無線運算環境的架構
下，利用單一頻道的資料廣播來提供兩個與
使用者位置有關的服務：(1)一個為最短路徑
服務，(2)另一個為最近物件搜尋服務。最短
路徑服務提供使用者兩點間最短路徑的搜
尋，重點在於廣播排程的討論，以減少使用
者的平均查詢時間。最近物件搜尋服務則包
含了最近 k 個物件搜尋與群組之最近 k 個
物件搜尋，探討的課題包含了廣播排程方式
的討論、使用者搜尋程式的開發、與使用者
在電力與資源有限的條件下如何有效地提
供服務等議題，目的是希望伺服器只要廣播
一種索引式資料，行動使用者便可執行多種
形式的搜尋，如範圍搜尋、最近物件搜尋以
及一般點的搜尋等。所有設計的方法都以模
擬的方式進行測試並做比較。 
 
關鍵詞：資料廣播、廣播排程、行動計算、
索引結構、查詢經歷時間，電力消耗、最短
路徑、非迴圈有向圖、群組 k 個最近物件
搜尋、搜尋處理。 
 
二、前言 
在無線行動環境下，對於以提供資訊為
中心的應用或服務，例如：線上新聞
(electronic news service)、交通資訊(traffic 
information) 、 股 價 資 訊 (stock-price 
information)等，資料廣播(Data Broadcasting)
提供了一個有效的資料散佈方式。在探討資
料廣播協定時會以查詢時間或電力消耗兩
個角度來衡量其效能。查詢經歷時間(latency)
是使用者從廣播頻道上開始切入廣播頻道
查詢到收到完整回應所經歷的時間，可作為
系統服務品質的指標；而在衡量電力消耗方
面，則是評量使用者在廣播頻道上聽取關於
自己查詢的聽取時間(Tuning Time)。 
本計劃探討在無線運算環境的架構
下，利用單一頻道的資料廣播來提供兩個與
使用者位置有關的服務：(1)一個為最短路徑
服務，(2)另一個為最近物件搜尋服務。探討
的議題包含了廣播排程的方式、使用者的搜
尋程序、及在使用者電力與資源有限的條件
下如何有效地提供服務等。 
 
三、文獻探討 
資料廣播相關的問題在最近幾年亦被
廣泛探討 [1][6][10][11][12][14][15][23][26] 
[31]。而在傳統無線廣播環境裡，伺服器與
用戶端之間的通訊是非對稱的[15]，也就是
說下載頻寬比來的大得多，且往往上傳的頻
寬 有 相 當 的 限 制 。 傳 統 的 主 從 式
(Client-Server)架構的資訊系統進而可分為
兩種基本的運作模式：pull-based 模式及
push-based模式。 
 
Pull-base模式 
即是傳統上在有線環境下的運作模式，每一
個用戶端發送詢問(query)給伺服器，伺服器
則以一對一的方式回應詢問。然而這樣的作
法並不適用於頻寬不對稱的無線行動通訊
環境中，因為伺服器必須同時處理大量資
2
務，計算及搜尋的工作則由使用者取代，而
伺服器僅需將資料以廣播的方式送出，可服
務的使用者數量因此不受限制，目前對於以
push-based模式來提供最短路徑服務尚未有
相關文章。 
而 在 無 線 行 動 環 境 的 架 構 下 以
push-based模式來提供最近k個物件的搜尋
(kNN search) 已有相關的文章討論此一問
題[8][33]，ㄧ般而言kNN search是在多維空
間上的ㄧ種搜尋，在空間資料庫 (spatial 
databases)上的相關研究已有相當多的探
討，為能有效搜尋，往往會以建立索引的方
式來輔助搜尋或是按既有的索引結構設計
有效的搜尋方式，其中以[25]的作法為代
表，而多維空間上的資料索引結構則以
R-tree[9]或R*-tree[3]最為代表。因此，在無
線行動環境中，筆者考慮伺服器廣播的內容
為索引式資料。但將空間資料庫上解決kNN 
search的程式直接套用在資料廣播協定上是
不可行的[8]，因為在廣播頻道上的資料是有
前後順序的，與存放在磁碟或記憶體上的隨
機存取模式是不同的。此外，當行動使用者
在記憶體有限的情形下，資料廣播協定該如
何設計以達最好效應，亦是本計劃探討的議
題之ㄧ。 
而在最近物件搜尋的問題上，本計畫亦
探討群組最近k個物件搜尋(GkNN search) 
[24]。在給定一個群組下，此種搜尋須找出
物件與所有群組成員距離合是最小的前k個
物件。日常生活中，在不同位置的一群朋友
相約見面時，便可運用此種搜尋以決定會面
地點。在[24]中，作者針對此問題在一般環
境下提出了一些近似的解法，而在資料廣播
環境下目前尚未有文章探討此一問題。 
 
四、研究目的 
(1) 最短路徑服務的探討：提出最短路徑服
務的資料廣播協定，此協定將減輕伺服
器的工作負擔並可增加使用者數量。 
(2) 最近物件搜尋的探討：探索在無線環境
下對多維索引樹進行最近k個物件搜尋
與群組之最近k個物件搜尋，並考慮使用
者記憶體有限的情形及多頻道環境的資
料廣播協定等議題。另一目的是探索整
合最近物件搜尋與其他種類的搜尋，如
範圍搜尋(Range Query)、一般點的搜尋
(Point Query) 及空間結合（Spatial Join）
查詢等等，伺服器只要廣播一種索引式
資料，行動使用者便可執行多種形式的
搜尋。 
(3) 藉由本計劃的探討及文獻的研討，希冀
未來能整理出一些規則或特性，歸納出
適合用資料廣播的資訊服務之條件，使
資訊提供者能輕易判別是否採用資料廣
播協定。 
 
五、問題 
1. 最短路徑服務的探討 
在最短路徑的問題上，通常是用一個加
權有向圖(weighted digraph)G=(V, E)來表示
地點(或城市)間的關係，圖的節點(vertex)表
示地點，而點與點之間的邊(edge)代表其連
通方向(direction)，邊上的權重(weight)代表
連通的成本。最短路徑問題便是在找尋兩個
節點之間權重最小的路徑。本計劃先考慮資
料間的關係可以用加權非迴圈有向圖
(directed acyclic graph, DAG) 來表示，資料
廣播排程問題，進而探尋最短路徑服務的資
料廣播協定。 
我們的目的是對於G 建立一個單一頻
道的廣播程序，因此假設f這個函數是將G的
每一個節點映至單一廣播頻道上。因此f 是
一個從V映至{1,2,...,|V|}的一對一函數，而
f(v)便是v 這個節點在廣播頻道的位置。我
們的目的是透過f 所產生出來的廣播程序
必須要滿足線性順序，同時使得使用者平均
查詢經歷時間 ( ) ( )
v V
f v vγ
∈
⋅∑ 是最小的。我們
因此可將問題定義如下： 
 
最小查詢經歷時間的線性順序廣播問題
(Linear-ordering Broadcasting with 
Minimum Latency on Single Channel, 
LBMLS): 
找一個一對一的函數f :V→{1,2,...,|V|}，並且
滿足下列條件: 
4
置的平均值來決定該節點的廣播位置，倘若
有兩個節點的廣播位置一樣，那麼便比較γ 
值，越高的節點被放置越前面。 
而所採取的方法是，針對每一個廣播排
程，執行多次的詢問，並且紀錄每一次的查
詢經歷時間，最後平均這些查詢經歷時間，
查詢經歷時間越低的表示其廣播排程效率
越好。 
(2) k 個最近物件搜尋的探討 
1. 分析傳統空間資料庫上及無線運算環
境的架構下之差異 
首先本計劃分析比較這個問題在傳統空間
資料庫上及無線運算環境的架構下的差
異。傳統以R-tree為多維資料索引結構並在
其上做k個最近物件搜尋的探討以[25]為代
表作。在[25]中，作者利用兩個佇列(queue)
來輔助搜尋，並利用節點的索引值及其子節
點的索引值與使用者的距離關係，可以適時
的刪除不需訪視的節點，以增加效能。然而
此種作法無法直接套用在無線運算環境的
架構下，主要的原因在於藉由資料廣播傳播
的R-tree，節點之間是有順序的，無法按距
離關係刪除不需訪視的節點，因此必須多訪
視一些不需訪視的節點而造成聽取時間的
增加。文章[8]也指出此點並修正此演算法使
其適合於無線運算環境的架構。 
2. 廣度為先排程與深度為先排程的比較
與探討 
另一個造成[25]演算法在無線運算環境的架
構效能不佳的原因是一般對索引資料(樹狀
結構)的廣播排程是以前序法則(pre-order)來
排定，也就是使用者在執行搜尋時，是以深
度為主的方式搜尋 (Depth First Search, 
DFS)，但[25]的演算法卻是偏向以廣度為主
的方式搜尋(Breadth First Search, BFS)。用深
度為先的方式來排程，相對於廣度為先的方
式來排程，可使使用者使用較少的記憶空
間，對於記憶容量有限的行動使用者而言，
是有助益的，但對於k 個最近物件的搜尋反
而造成效能不佳。[8]曾對此種現象作了實驗
並驗證廣度為先的方式來排程會有較優的
聽取時間。本計劃探討廣度為先的排程與深
度為先的排程對查詢經歷時間的影響，並提
出混合式的排程來因應，此混合式的排程是
索引資料(樹狀結構)一部分用廣度為先的排
程另一部分用深度為先的排程，亦即在資料
索引樹中，在某一層(level)以上的節點用廣
度為先的排程，而以下的節點用深度為先的
排程，如此的排程亦可隨使用者的記憶体大
小來適度調整level 的高低，使的所有使用
者皆可完整的執行搜索。 
3. 深度為先的排程上較佳的搜尋程序 
本計劃的目的之一是希望伺服器只需
廣播一種索引式資料，行動使用者便可執行
多種形式的搜尋服務。而目前已被廣泛討論
的搜尋服務，如點查詢及範圍查詢等，伺服
器都是以深度為先的方式來排程。 
相對應於以深度為先的資料排程，為能
有效節省聽取時間，我們在伺服端替節點中
每一個子節點加入一個額外的值,l-entry。
l-entry代表的意義是一個節點下有多少個葉
節點。在使用者端對應的搜尋程序方面，我
們設計出一個名為w-disk的最近k個物件搜
尋程序，這個程序可以利用l-entry找出精確
的最近k個物件，而作法是以查詢點為圓
心，利用l-entry找出一個最小且保証有k個物
件的距離為半徑畫出一個圓。所有完全超出
這個圓的節點都保証不會存在kNN的結果
中，因此可以被安全的刪除。實驗證實w-disk
比[8] [25]更能減少聽取時間、縮短查詢延遲
時間和使用更少的記憶體空間， 
4. 有限記憶體或資料遺失的解決方案 
我們利用 [10][11]所提出的next-entry的概
念，在每一個索引節點中加入next-entry，並
以深度為先做為排程。一個節點 v 的
next-entry代表的意義是指以v為根節點的子
樹中最後一個出現在廣播序列的節點的下
一個位置。相對的搜尋程序是以w-disk為基
礎來改良，針對任一時間開始搜尋、記憶體
有限或資料遺失的情況時，可利用next-entry
找到下一個要聽取的節點。當客戶端發生記
憶體不夠或資料遺失的情況，相對的搜尋程
序 則 會 順 著 目 前 正 在 處 理 的 節 點 的
next-entry找到下一個節點繼續做處理 
七、結果與討論 
本計劃探討在無線行動環境的架構6
Index Trees. Submitted to Information Systems. (under 
revision) 
[30] K.L. Tan, J. X. Yu, and P.K. Eng. Supporting Range 
Queries in a Wireless Environment with Nonuniform 
Broadcast. Data Knowledge Engineering, 
29(2):201-221, 1999. 
[21] Chuan-Ming Liu and Kun-Feng Lin. Disseminating 
Dependent Data in Wireless Broadcast Environments. 
Submitted to Distributed and Parallel Databases. [31] A. B. Waluyo, G. Goh, D. Taniar, and B. Srinivasan. 
On Building a Data Broadcasting System for Mobile 
Databases. AINA, pages 538-543, 2005. 
[22] Chuan-Ming Liu and Kun-Feng Lin. Efficient 
Scheduling Algorithms for Disseminating Dependent 
Data in Wireless Mobile Environments, In Proceedings 
of the IEEE 2005 International Conference on Wireless 
Networks, Communications and Mobile Computing 
(WirelessCom 2005). 
[32] J. Xu, B. Zheng, W.-C. Lee, and D. L. Lee. The D-Tree: 
An Index Structure for Planar Point Queries in 
Location-Based Wireless Services. IEEE transactions 
on knowledge and data engineering, Vol. 16, No. 12, 
2004. [23] C.-M. Liu. Broadcasting and Blocking Large Data Sets 
with an Index Tree. Ph.D. Thesis, Department of 
Computer Sciences, Purdue University, 2002. 
[33] B. Zheng, W.-C. Lee, and D. L. Lee. Search k Nearest 
Neighbors on Air. In Proceedings of the 4th 
international conference on mobile data management, 
2003. 
[24] D. Papadias, Q. Shen, Y. Tao, and K. Mouratidis. 
Group Nearest Neighbor Queries. In 20th International 
Conference on Data Engineering, 2004. [34] B. Zheng, X. Wu, X. Jin, and D. L. Lee. TOSA: A 
Near-optimal Scheduling Algorithm for Multi-channel 
Data Broadcast. In Proceedings of the 6th International 
Conference on Mobile Data Management (MDM ’05), 
2005. 
[25] N. Roussopoulos, S. Kelley, and F. Vincent, Nearest 
neighbor queries. In Proceedings of the 1995 
ACMSIGMOD international conference on 
Management of data, pages 71-79, 1995. 
[26] N. Shivakumar and S. Venkatasubramanian. Efficient 
Indexing for Broadcast Based Wireless Systems. 
Mobile Networks and Applications, 1(4):433-446, 
1996. 
九、計畫成果自評 
 本計劃執行第一年結束，研究內容與原
計劃大致相符，預期目標皆已達成，請參閱
附表一，相關成果已陸續發表在一些國際研
討會上，而較完整的研究結果業已分別整理
完畢並投稿至兩 SCI 期刊，其中一篇正在修
改中。研究的結果可對未來的資訊諮詢系統
帶來更有效率的運作模式。 
[27] Z. Song and N. Roussopoulos. k-Nearest Neighbor 
Search for Moving Query Point. In Proceedings of the 
7thinternational symposium on advances in spatial and 
temporal databases, 2001. 
[28] C.-J. Su, L. Tassiulas, and V. J. Tsotras. Broadcast 
Scheduling for Information Distribution. ACM/Baltzer 
Journal of Wireless Networks, 5(2):137-147, 1999. 
[29] K.-L. Tan and J. X. Yu. Generating Broadcast 
Programs that Support Range Queries. IEEE 
Transactions on Knowledge and Data Engineering, 
10(4):668-672, 1998. 
表一： 
預計完成進度  
最短路徑服務 最近k 個物件搜尋服務 
時間 完成 
1. 完成證明LBMLM 是NP-complete。 1. 完成探討廣度為先的排程方式與多
頻道廣播環境的關係 
第一季 已完成
2. 探討最佳週期長度之廣播排程。 
3. 尋找一種擁有特定條件的DAG 
可以在線性時間內找出其最佳 
的廣播排程。 
2.完成多頻道上支援最近物件搜尋服務
的廣播協定，包含了最近 k 個物件搜尋
與群組最近 k 個物件搜尋。 
第二季 已完成
4.發展以每個節點γ值為主要考量因素
的演算法，如MPP 以及RMPP。 
5.發展CMPP 與PAA 這兩種演算法，
以便進一步改善MPP 與 
RMPP 所建置出來的廣播排程。 
3. 完成多頻道上以平行方式處理最近
物件搜尋服務的廣播協定，包含了最近
k 個物件搜尋與群組最近k 個物件搜
尋。 
第三季 已完成
進度 
6.實現每一個演算法，並設計實驗來比
較各個演算法的效率，最後歸納各演算
法的優劣性。 
4.完成比較單一頻道與多頻道支援最近
物件搜尋服務的廣播協定，並歸納出效
率較佳之廣播排程必須符合的性質。 
第四季 已完成
8
rha
b
c d
e
f g
l
m n
i
j k o
g
f
m
o
n
d c
k
j
b
e
a i
l
r
p
h
Figure 1: A kNN (shades) at the query point p
(dashed circle) with k=3 on a 16-node R-tree.
• mindist(v) is the minimum distance from p to v’s
MBR;
• minmaxdist(v) is the minimum distance of the maxi-
mum distances from p to each face of v’s MBR; and
• maxdist(v) is the maximum distance from p to v’s
MBR.
The conventional kNN search algorithm [12] on an R-tree,
which uses mindist and minmaxdist to prune the irrelevant
nodes during the processing, can be adapted to fit a broad-
cast R-tree but leads to a longer latency due to the back-
tracking of the broadcasted tree [13]. Based on the conven-
tional kNN search algorithm, the authors in [4] adapted the
conventional kNN search algorithm to provide an energy-
efficient kNN searching approach on a broadcasted R-tree
using all the three distance types. To avoid the backtrack-
ing, the provided approach accesses the nodes in the broad-
casting order.
For simplicity, we use one node, including the index and
data (or leaf) node, as a packet in the broadcast. For any
index node v, the packet basically contains v’s identifier and
information of v’s children. The information for each child
v′ of v includes the address of v′ in the broadcast and the
index for v′. The un-shaded area in Figure 2 shows the
basic content of a broadcasted index node r in Figure 1.
The address allows a client to tune in when the relevant
node appears in the broadcast and is crucial to reducing the
tuning time [6, 7, 8, 10, 11]. The leaf node in the broadcast
contains only the node’s identifier and the data content.
Figure 2: A broadcast index node; the un-shaded
part representing the basic content; the shaded part
indicating the additional entry used in this paper.
Our kNN search algorithm will use mindist and maxdist
as well as an additional entry in the index node to prune
the nodes which are definitely irrelevant to the kNN. We
say a client explores node v when the client tunes into the
broadcast to receive and process all the entries stored with
v. Our algorithm accesses the nodes in the broadcasting
order in order to avoid the backtracking and maintains two
lists: C-List and R-List. C-List stores the candidate nodes
to be explored later and R-List keeps the nodes which are
in the current result of kNN during the search processing.
All the nodes in C-List and R-List are ordered by maxdist,
respectively. The objective is to minimize the tuning time
and latency as well as the memory usage for a kNN search
on the mobile clients.
3. DATA BROADCAST SCHEDULES
There are two aspects which should be considered when
designing a data broadcasting protocol in a wireless envi-
ronment. One is the broadcast schedule at the server and
the other is the corresponding query process at the mobile
clients. In this section, we discuss the broadcast schedules at
the server. The schedules based on the breadth-first traver-
sal can achieve a better tuning time [4] but result in a large
memory usage at the mobile clients. Furthermore, most
of the existing algorithms for different types of queries on
broadcasted R-trees use the broadcast schedules based on
the depth-first traversal [1, 4, 6, 7, 8, 9, 10, 11]. We thus
consider the broadcast schedules based on the depth-first
traversal. Our work tailors toward one broadcast R-tree for
different kinds of queries.
We consider two broadcast schedules based on the depth-
first traversal and these two broadcasts differs in the order-
ing of the children of each node in the R-tree. The first
broadcast schedule, pDFS, organizes the broadcast simply
by the depth-first order. Such a broadcast schedule for R-
trees has been used and studied in many papers [4, 6, 7, 8,
9, 10, 11]. However, such a broadcast schedule does not con-
sider any factor that might effect the performance in terms
of the tuning time, latency and memory usage. We thus
consider a variation of the pDFS, called wDFS. The wDFS
broadcast schedule will rearrange the R-tree by the subtree
sizes in a non-increasing order and then place the nodes in
the broadcast according to the depth-first order. Figure 3
shows the broadcasts of the R-tree in Figure 1 generated by
the pDFS and wDFS schedules, respectively.
pDFS
wDFS
r a b c d e f g h i j k l m n o
r h l m n o i j k a b c d e f g
Figure 3: The broadcasts generated by the pDFS
and wDFS schedules respectively for the R-tree in
Figure 1.
Recall that a broadcast packet corresponds to a node in
the R-tree. The un-shaded area in Figure 2 indicates the
basic content of a broadcast index node. In order to ef-
fectively prune nodes which are irrelevant to a kNN search
when exploring a node, we add an entry, l-entry, for each
child. The l-entry of a child v′, l(v′), is the number of leaves
in the subtree rooted at v′. Figure 2 shows a broadcast node
considered in this paper and the shaded area presents the
l-entry of each child of node r. The number of leaves rooted
at the child node a is four (i.e. l(a)=4). We will discuss it
in more details in the next section.
4. EXACT KNN SEARCH ALGORITHM
This section introduces our exact kNN search algorithm,
w-disk, on a broadcast R-tree. We will show that our kNN
search algorithm can find the exact kNN efficiently and ana-
lyze the time complexity for exploring a node in the R-tree.
Algorithm w-disk will determine an imaginary circle C cen-
tered at the query point p usingmaxdist as the radius. With
10
b is broadcast before e and h. The process then proceeds in
the same way.
b
e
p
h
rb
Figure 5: The relation among nodes e, h, and the
Pnode b when exploring node a.
For the rest of this section, we show the correctness and
the time complexity of algorithm w-disk. Due to the space
limitation, we state the theorems without proof.
Theorem 1. Given a kNN search at query point p, algo-
rithm w-disk can finds the exact k nearest neighbors.
Theorem 2. For a broadcasted R-tree having height h
and fanout B, it takes O(B ·max{k, hB}) time to explore a
node.
5. EXPERIMENTAL RESULTS
In this section, we present our experimental results and
compare our kNN search algorithm w-disk with the revised
conventional approach w-conv and the improved algorithm
w-opt in [4]. The cost measures include the tuning time,
latency and memory usage. When discussing each measure,
we include the optimal cost for comparison. Besides, We
also compare the impact on the performance resulting from
the two broadcast schedules, pDFS and wDFS, discussed in
Section 3.
We use R*-trees [2] as the index tree on point data in
the experiment. The trees have 150,000 leaves and the node
fanout between 12 and 24. The point data are generated
using a 1.8uniform distribution within the unit square and
correspond to the leaves. The value of k varies from 1 to 210.
For each value of k, data reported is the average of 1,000
different kNN searches with different query points selected
uniformly.
5.1 Tuning Time
The tuning time reflects the power consumption for the
kNN search at the mobile clients. Figure 6(a) shows the
comparison of the tuning time for three algorithms on the
R*-tree with fanout 24 and 150,000 leaves. The tree has a
height of 6 and a total of 159,185 nodes. The kNN search
starts from the beginning of a broadcast cycle. The broad-
cast schedule in Figure 6 uses pDFS. The x-axis reflects the
different value of k.
Recall that w-opt uses a conservative approach to deter-
mine kthdist in an earlier stage; therefore, can prune the
nodes effectively. With l-entry added in the broadcast node,
our algorithm w-disk can decide the range of the kNN more
accurately. Hence, w-disk can avoid exploring more nodes
not in the resulting kNN. The experimental results indicate
that our w-disk algorithm can explore fewer nodes than the
other two algorithms; therefore, leads to a lower tuning time.
This trend becomes obvious as the value of k increases. In
general, the difference in the tuning time becomes big as k
increases. Figure 6(a) also shows the optimal tuning time.
However, we conjecture that it is very hard to achieve.
5.2 Access Latency
This section compares the access latency of different kNN
search algorithms on broadcasted R*-trees. As shown in Fig-
ure 6(b), algorithm w-disk achieves the best latency which
is closest to the optimal latency . The other two algorithms
yield almost the same latency.
In w-opt, some redundant nodes are kept for the result
to generate the kthdist. Using the kthdist, the nodes to
be explored later are determined and stored . The kthdist
changes as the algorithm proceeds but the nodes stored to
be further explored are not checked using the new kthdist;
therefore, may result in a longer latency. Such a case also
occurs in w-conv. Since w-disk examines the C-List and R-
List each time when a new Pnode is determined, w-disk leads
to a much shorter latency.
5.3 Memory Usage
The size of C-List denotes the amount of storage used dur-
ing the kNN search processing. Figure 6(c) shows the com-
parison of the maximum amount of storage used for these
three algorithms. The results shows that w-disk uses fewest
storage space among these three algorithms and w-opt per-
forms better than w-conv.
Algorithm w-disk uses the Pnode to prune the irrelevant
nodes when exploring a node. Such a Pnode is derived by
considering the number of leaves in its corresponding circle;
therefore, leads to a better approximation to the resulting
kNN. Furthermore, w-disk uses the previous Pnode to delete
the irrelevant children and the new Pnode to delete the irrel-
evant nodes in C-List and R-List. As a result, w-disk needs
fewer storage to execute a kNN search.
5.4 pDFS v.s. wDFS
We now discuss the impacts result from the two broad-
cast schedules pDFS and wDFS in Section 3. The broadcast
schedule using wDFS broadcasts the larger subtrees first
in DFS fashion. The experimental results show that the
broadcast schedule using wDFS can achieve a shorter tun-
ing time than the one using pDFS. This conclusion holds in
all our experiments. Figure 7(a) presents the comparison
of the tuning time using wDFS and pDFS broadcast sched-
ules respectively. Broadcasting the node which has a larger
subtree size first allows the mobile clients to have a better
approximation for the kNN in an earlier stage since more
MBRs can be obtained earlier. Such an impact results in a
lower tuning time no matter which algorithm is applied. On
the contrary, the broadcast schedule using wDFS leads to a
longer latency. This trend is shown in Figure 7(b). Broad-
casting the node which has a larger subtree size first forces
the query process to wait to the very end for the relevant
node with a smaller subtree size. However, the broadcast
schedule using pDFS does not need to wait for such a case.
In general, the broadcast schedule using pDFS outperforms
the one using wDFS in average in terms of the latency.
6. CONCLUSIONS
12
Efficient Scheduling Algorithms for Disseminating
Dependent Data in Wireless Mobile Environments
Chuan-Ming Liu and Kun-Feng Lin
Department of Computer Science and Information Engineering
National Taipei University of Technology
Taipei, TAIWAN
Email(s): {cmliu, ivan}@mcse.csie.ntut.edu.tw
Abstract— In wireless mobile environments, data broadcasting
is an effective approach to disseminate information to mobile
clients. In some applications, the access pattern of all the data
can be represented by a DAG. In this paper, we explore how
to efficiently generate the broadcast schedule in a wireless
environment for the data set having a DAG access pattern. Such
a broadcast schedule not only minimizes the access latency but
also is a linear ordering of the DAG. Minimized access latency
ensures the quality of service (QoS). We prove that it is NP-hard
to find an optimal broadcast schedule and provide two heuristics,
MOA and RTS. After giving an analysis for these two heuristics
on the latency and complexity, we implement both heuristics to
compare their performance. The experimental results show that
MOA is more efficient than RTS in terms of the access latency
and time complexity.
I. INTRODUCTION
Data broadcasting provides an efficient way to disseminate
data in the wireless environments and has attracted much re-
search attention in the recent years [1], [8], [10], [7], [12], [14],
[13]. In a wireless environment, a server can provide public
information (e.g. electronic news service, traffic information,
stock-price information, etc.) to a large client population using
broadcasting. Clients can access the information by tuning into
the broadcast. One key issue related to data broadcasting is
how the server organize the data in the broadcast in order that
the clients can access the information efficiently in terms of
the latency (time elapsed from requesting to receiving data)
and the tuning time (the amount of time spent listening to
the broadcast). Short latency and tuning time can ensure the
quality of service (QoS) provided by the server.
Most of the previous work about the broadcast scheduling
assumed that the requests for the broadcast data are inde-
pendent. However, in some applications, the data requested
are dependent. For example, consider the scenario that a user
requests a Web page which contains some components, such as
audio clips or images. When a user uses a browser to access
the Web page, the browser will request all the components
contained in the Web page after receiving the Web page.
Therefore, a request leads to an access pattern among the
dependent data [2], [9], [10].
In order to minimize the latency, many of the previous
papers considered the given data access frequency [1], [8], [13]
or the data access pattern [2], [9], [10]. In such a scenario,
how a server schedules the data is the major challenge. In
this paper, we consider the access pattern formed by all the
requests where the data dependency and access frequency
can be represented by a weighted directed acyclic graph,
DAG [10].
A DAG [3] G = (V,E) is a directed graph that has no
cycles, where V is a finite set of vertices and E is a binary
relation on V . The set E is called the edge set of G and
consists of ordered pairs of vertices. An element (u, v) in E,
u, v ∈ V and u 6= v, is an edge. If (u, v) is an edge in G,
we say that vertex u(v) is adjacent to(from) vertex v(u). We
also call the edge (u, v) as the in-edge (out-edge) of v(u) and
the in-degree (out-degree) of a vertex is the number of edges
entering(leaving) it. Among the vertices in V , a source is a
vertex which has no any in-edges. If there is a path p from u
to v, we say that v is reachable from u via p.
We further suppose that, for each edge (u, v), there is a
weight puv < 1. For any edge (u, v), the direction from vertex
u to vertex v represents that u is accessed before v and the
weight puv ≤ 1 on (u, v) stands for the conditional probability
of accessing vertices v after vertex u has been accessed. As
shown in Figure 1, after vertex a has been accessed, the
chances to access vertex b, c, and d are pab = 0.8, pac = 0.01,
and pad = 0.1, respectively. The summation of all the weights
on the edges from a vertex u is less than or equal to 1. In this
study, we investigate how to generate the broadcast schedule
in order to minimize the average latency when the broadcast
data has the access pattern as a weighted DAG.
Besides, we consider the generated broadcast schedule is
a
b
c
d
0.8
0.01
0.01
0.1
Fig. 1. A weighted DAG of 4 vertices; the weight on an edge representing
the access probability after a vertex has been accessed.
14
the edges from a vertex have the same weight and (2) the sum
of all the weights on the edges from a vertex is equal to 1. 2
When the input is an equally out-edge weight DAG for the
LDBGL problem, we refer to such a problem as an ELDBGL
problem. We then claim that the ELBGL problem is NP-
complete. ELDBGL problem is in NP since, given a 1-to-1
mapping f , it takes linear time to determine whether f(u) <
f(v) if (u, v) ∈ E and whether
∑
v∈V f(v) · γ(v) ≤ K. To
show ELDBGL problem is NP-hard, we present a reduction
from the Minimum Linear Arrangement of Directed Graph
(MINLARD) Problem which is NP-hard [6].
Definition 4: (MINLARD)
Instance: A directed acyclic graph (DAG) G′ = (V ′, E′) and
an integer K ′.
Question: Does there exist a 1-to-1 mapping g : V ′ →
{1, 2, · · · , |V ′|} such that
1) if (u, v) ∈ E′, then g(u) < g(v), and
2) ∑(u,v)∈V ′ [g(v)− g(u)] ≤ K ′. 2
We now show the reduction from an instance of the MIN-
LARD problem to an instance of the ELDBGL problem.
Suppose I ′ is an instance of the MINLARD problem. An
instance I of the ELDBGL problem can be constructed from
I ′ as follows.
1) Let V =V ′ and E=E′.
2) For each v in V , all the out-edges of v have the same
weight, 1
dv
which is the inverse of v’s out-degree dv .
3) The value of K can be derived by the following relation
between K and K ′. Suppose the 1-to-1 mapping g exists
in I ′. We then consider K =
∑
v∈V γ(v)f(v). Note that
g is a permutation of f and for each vertex v in V , there
exists a vertex u in V such that f(v) = g(u). Then we
can get
K =
∑
v∈V
γ(v)f(v)
=
∑
v∈V ′
γ(v)g(u)
=
∑
v∈V ′
γ(v) · {[g(u)− g(a1)] + [g(a1)− g(a2)]
+ · · ·+ [g(al)− g(s)] + g(s)},
where a1, a2, . . . , al are the vertices along the longest
path from s to u. Since g(s) = 1,
K ≤
∑
v∈V ′
γ(v) · {{
∑
(i,j)∈E′
g(j)− g(i)}+ 1}
By the property of the 1-to-1 mapping g,
K ≤
∑
v∈V ′
γ(v) · {K ′ + 1}
= {K ′ + 1}
∑
v∈V ′
γ(v),
where
∑
v∈V ′ γ(v) is a known constant.
Then, given an arbitrary instance I ′ of the MINLARD
problem, we can construct an instance I of the ELDBGL
problem and such a construction can be done in O(|E|) time.
It then remains to show that there is a solution for an instance
I ′ of the MINLARD problem if and only if there is a solution
for the instance I of the ELDBGL problem. However, this can
be done easily by following the relation between K and K ′.
Hence, we can have the following conclusion:
Theorem 1: The ELDBGL problem is NP-complete; there-
fore, the LDBML problem is NP-complete. 2
V. HEURISTICS
Since the LDBML problem is NP-hard, we present two
heuristic methods in this section. The first one, Revised Topo-
logical Sort (RTS) [5], is based on the topological sort and
straightforward. The other one is Minimum Offset Algorithm
(MOA). The idea of the latter one is as follows. Suppose f∗ and
f are the best broadcast schedule and a generated schedule, re-
spectively. The objective is to minimize ∑v∈V |f(v)−f∗(v)|.
To achieve this, we first consider the level of each vertex
instead of the exact position of each vertex in the broadcast
when generating the broadcast. The level of a vertex v is the
best possible position for v to be placed. A vertex v having a
smaller level should be broadcast earlier. We first calculate the
level for every vertex and then arrange the position of each
vertex by their levels. In this section, we further analysis the
MOA.
A. Revised Topological Sort
In this subsection, we simply describe how to arrange the
vertices into the broadcast schedule in a greedy fashion based
on the topological sort. Recall the topological sort. Suppose a
vertex v has more than one vertex adjacent from it and these
adjacent vertices form a set ADJ(v). Using different order of
the vertices in ADJ(v) to continue the traversal makes the
results different. To adapt the topological sort to the LDBML
problem, whenever a vertex v has been traversed, we make the
algorithm always select the vertex u in ADJ(v) to continue
the traversal where (1) u has not been traversed and (2) γ(u)
is the largest among all the vertices in ADJ(v). Consider the
DAG in Figure 2. The corresponding γ value of each vertex
is shown in Figure 4. The RTS starts at vertex a. Vertices
b, c, d, e, and g are adjacent from a and therefore form the
set ADJ(a). Since vertex e has the largest γ value among the
vertices in ADJ(a), the RTS will traverse vertex e next. After
traversing vertex e, vertex h is the only one to be traversed.
Then, the RTS will traverse the vertex b because the γ value
of b is the second largest one in ADJ(a). Since vertex b has
no vertex adjacent to, the RTS will traverse vertex c next. The
process continues and the resulting schedule is adcfgbeh. The
broadcast schedule generated by the RTS is linear ordered [5].
B. Minimum Offset Algorithm
As described above, the MOA uses the level of a vertex
to arrange the broadcast schedule. We therefore divide the
MOA into two major steps: (1)Assigning Level step and
(2)Positioning with Minimum Offset step. Assigning Level step
is to assign each vertex’s level. Of course, the source vertex
16
Input: A weighted DAG, G = (V, E) with root (source) r.
Output: linear ordered broadcast schedule with minimized latency.
/* level assigned step */
(1) r is in the heap H and assigned with level 0, l(r) = 0;
each vertex u adjacent from r is assigned with l(u) = 1;
V ′ = V − {r}
(2) while V ′ is not empty do
(2.1) Extract vertex s having the maximum out-degree in H;
(2.2) for each vertex u adjacent from s do
(2.2.1) if l(s) + 1 > l(u) then
u is assigned with the level l(u) = l(s) + 1
end if
(2.2.2) Decrease the in-degree of u by one;
(2.2.3) if the in-degree of u is zero then
Insert u into H and delete it from V ′
end if
(2.2.4) Derive the γ(u) by γ(u) = γ(u) + γ(s) · psu
end for
end while
/* minimum offset step */
(3) for each level l (from level 0 to higher level) do
Vertex with greater γ value is placed earlier in the schedule
(breaking tie by randomly selecting a vertex)
end for
Fig. 5. Minimum Offset Algorithm.
and vn has a in-edge which is from either vk or all the vertices
reachable from vk where k ∈ {1, 2, ...n− 1}. Then there is a
loop in this graph which contradicts to the definition of DAG.
We then use the above theorem to show that the broadcast
schedule generated by the MOA has linear ordering. Recall the
MOA, the traversed edges will be removed and never traversed
again and a vertex becomes a source vertex after all of it’s
in-edges are removed. Whenever a source vertex v has been
traversed, by Theorem 2, at least one new source vertex u will
be produced. By following the rule of ancestor property, the
level of u is the level of v plus 1. Since all the vertices will be
the source vertex once, such a rule therefore will guarantee the
order of two adjacent vertices in the broadcast schedule. Thus,
the linear ordering property holds in the generated broadcast
schedule. We therefore can conclude the following theorem.
Theorem 3: The broadcast schedule generated by the Min-
imum Offset Algorithm is linear ordered. 2
E. Bounds about the Performance of the MOA
In this subsection, we further analysis the performance of
the MOA. We first give a lower bound (LB) of the latency for
the LDBML problem and then derive the upper bound (UB) of
the latency for the broadcast schedule generated by the MOA.
Recall that γ(v) =
∑
P (s,v)∈Pv
∏
(i,j)∈P (s,v) pij .
Lemma 1: The latency for the LDBML problem has a lower
bound as
n(n + 1)
2
·minni=1γ(vi). (3)
2
Proof: Suppose we have a best broadcast schedule f∗.
W.L.O.G., we can rename all the vertices such that f∗(vi) = i.
Then the best average latency for accessing all the vertices is
∑
vi∈V
f∗(vi) · γ(vi) =
∑
vi∈V
i · γ(vi)
≥ n(n+1)2 ·min
n
i=1γ(vi) = LB
Lemma 2: If k−1 is the largest level number, then the upper
bound of the latency for the broadcast schedule generated by
the MOA is k · n.
Proof: Let the vertices assigned to the same level number
be a group. Since the largest level number is k−1, we can form
k groups by these k levels. We then number the groups by the
level numbers and suppose that each group has mi vertices for
i = 1, . . . , k. Let pi be the maximum γ value among all the
vertices in group i for i = 1, . . . , k. Please note that pi ≤ 1
for i = 1, . . . , k since, for any vertex v in V , γ(v) ≤ 1. Then
the average latency for the broadcast schedule generated by
the MOA is
∑
v∈V
f(v) · γ(v) ≤ p1 · |m1|+ p2 · (|m1|+ |m2|) + · · ·
+pk · (|m1|+ |m2|+ · · ·+ |mk|)
≤ n · (p1 + p2 + · · ·+ pk)
≤ k · n = UB (4)
Having the lower and upper bounds derived in Lemma 1 and
2, we further discuss the asymptotic bound for the ratio, ρ(n),
of the latency for the broadcast schedule generated by the
MOA to the latency of the best broadcast schedule. The bound
of the ratio ρ(n) indicates the performance when applying the
MOA. From Lemma 1 and 2, we can derive
LB ≤
∑
vi∈V
f∗(vi) · γ(vi) ≤
∑
vi∈V
f(vi) · γ(vi) ≤ UB. (5)
Thus,
ρ(n) =
LB
UB
=
n(n + 1)
2
·minni=1{γ(vi)}
kn
=
n + 1
2k
·minni=1γ(vi). (6)
Let ε be min
n
i=1
γ(vi)
2k . We can conclude the following theorem.
Theorem 4: The latency of the broadcast schedule gener-
ated by the MOA is with a factor of ρ(n) = O(nε) of the
latency of an best broadcast schedule, where ε = min
n
i=1
γ(vi)
2k .
VI. SIMULATIONS
This section presents the simulation results about the RTS
and MOA. Two measurements are considered: the running
time of the scheduling and the latency
∑
v∈V f(v) · γ(v). All
the DAGs in the experiment are generated by the BNGenera-
tor [11] which can generates the DAG topology randomly. In
our experiments, each DAG is of size 10,000 and the degree
of each vertex in the DAG ranges from one to six. The weight
on each edge in a DAG is also generated randomly under the
18
