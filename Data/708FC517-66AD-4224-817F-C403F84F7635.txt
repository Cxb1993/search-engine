 2
之特性，其求解過程經常面臨陷入局部最
佳解（Local Optimum）的困境；因此學者
們往往使用可進行全域搜尋的演算法來求
解，如模擬退火法(Simulated Annealing)、
禁忌搜尋法(Tabu Search)、大洪水法等。近
年來，植基於生物行為的遺傳演算法
(Genetic Algorithen, GA)與蟻羣最佳化(Ant 
Colony Optimization, ACO)等也被逐漸使
用於車輛途程問題之求解。 
GA 由於其結構的簡易與通用性，容易
產生模組、擴展及應用於各種最佳化問題
(Goldberg, 1994)，因此較早被應用於 VRP
與 VRPTW 之求解，也獲致良好的成效；
然而 GA 較為人詬病的缺點是其耗用的
CPU 時間較高(Abramson & Abela 1992; 
Potvin & Bengio, 1996; Tan, Lee, Zhu, & Ou, 
2001)，處理大型網路時常需等待一段時間
才能處理完成。 
自 從 Colorni, Dorigo and 
Maniezzo(1991)發表了利用蟻群系統求解
決旅行銷售員問題之後，ACO 便逐漸被運
用至其他組合最佳化的問題上；ACO 由於
其理論架構式植基於最短路徑的搜尋，因
此對 TSP 與 VRP 求解所耗用的 CPU 時
間，一般來說會比 GA 佔優勢，但是由於
ACO 待設定的參數相當多，兼之 ACO 先
期多應用於 TSP 的課題上，應用於 VRP 或
VRPTW 時，由於配送車輛不只一部，尋優
的核心概念與 TSP 已有若干差異，如何設
定費落蒙更新公式與 ACO 參數便成為研
究者首先得面臨的難題，因為先期應用於
TSP 研究所建議的參數設定值可能並不適
用於 VRP 或 VRPTW(游孟娟、洪玉薇、廖
家瑋、張淳智與顏憶茹，民 93; 尤燕祺，
民 94)，而參數間彼此亦會產生交互作用，
研究者本身對 ACO 演算步驟的改良也可
能會對參數設定產生頗大的影響，因此如
何設定最適的參數來求解，往往形成應用
上之困擾，也不易使用人工的方式來測試
求解。有鑑於此，本研究提出一個結合 ACO
與 GA 的演算法，利用 ACO 來作為求解
VRPTW 的主體，而利用 GA 來求解最適的
ACO 參數，以期能兼顧求解的效率與精度。 
此外，為了能快速求解大型 VRPTW
問題，以便能符合實際應用時之需要，本
研究將採用平行處理來發展整合式 ACO
與 GA 演算法。目前對於 ACO 或 GA 的平
行處理演算法多僅提出概念性架構 (如
Ghiani, Guerriero, Laporte, & Musmanno, 
2003; Berger, Barkaoui, & Bräysy, 2004)或
係 利 用 叢 集 式 電 腦 (Cluster 
PCs/Workstations)來實作 (如 Drummond, 
Ochi, & Vianna, 1999; Doerner, Hartl, 
Kiechle, Lucka, & Reimann, 2004)，前者並
未考慮到實際多電腦環境間如何溝通的問
題，而後者必須安裝支援叢集電腦的作業
系 統 ( 如 Linux Cluster ， Microsoft 的
Windows Compute Cluster Server 2003)，國
內目前以使用 Windows 的用戶居多，因之
要在 Unix/Linux 環境下架構叢集電腦，在
實際應用上會面臨不少的限制。至於
Microsoft 的 Windows Compute Cluster 
Server 2003，它限制 Host 與 Cluster Nodes
均需為 X64-based 的架構，且 Client 必須安
裝 64 位元之 Windows Server 2003 系列作
業系統。因此它的導入成本相當高，在目
前 PC 作業環境多為 32 位元的架構下，一
般中小型業者恐怕不易接受。 
有鑑於此，本研究乃嘗試在 Windows
的環境下發展整合式 ACO 與 GA 平行演算
法，演算法採主從式(Client-Server)架構，
且不需使用 Server 等級的作業系統，只要
安裝 Windows 作業系統的 PC 均可串接成
叢集，由其中一部 PC 當作主控電腦，而其
 4
本研究所提出的「整合式 ACO 與 GA
平行演算法」須由一部電腦主控，並事先
將Client端連線溝通控制與 ACO 演算程式
(AntServer)安裝至欲組成叢集的各子節
點，主控電腦執行演算法主程式後會建立
兩個執行緒(Thread)，其一負責圖 1 之主流
程 ( 爲 便 於 稱 呼 ， 此 執 行 緒 命 名 為
TreadGA)，另一個則負責建立與監控叢集
電腦的連線狀況以調整工作量分配並處理
突發狀況(爲便於稱呼，此執行緒命名為
TreadNet)。 
一、連線溝通控制程式 
連線溝通控制程式與主控電腦間可以
使用 Named Pipes 或是 TCP/IP 來進行溝
通，雖然 Named Pipes 只能在同一群組內
進行通訊，但受到防毒軟體與防火牆的干
擾較少，因此本研究乃使用 Named Pipes 
的架構來建立系統(參見圖 2)。 
 
    圖 2 叢集電腦架構 
在實體架構上主控電腦的 TreadNet 被
設定成 Named Pipes Server，在叢集的各子
節點的 AntServer 被設定成 Named Pipes 
Client。在建立連線之前 AntServer 會每隔
若干時間嘗試與 TreadNet 連結，連線成功
後則會等待 TreadNet 發出 Request(傳來
ACO 參數)，接著再呼叫本身的 ACO 子系
統進行求解，完成求解後再將結果送回
TreadNet。因此在邏輯上，反而是叢集的各
子節點的AntServer是扮演 Server的角色以
滿足主控端的 Request。 
二、建立叢集電腦與工作分派 
建立叢集電腦的工作由 ThreadNet 擔
任，它會負責處理以下工作(運作流程如圖
3)︰ 
1. 建立 Named Pipes。 
2. 確定哪些子節點電腦處於連線狀
態，並為每一個連線建立一個
Thread(命名為 ThreadNet2，其運作
流程則如圖 4 所示)，以進行資料
交換。 
圖 3 ThreadNet 運作流程 
圖 4 ThreadNet2 運作流程 
ThreadNet2 的它會等候相對應的叢集
子節點之 AntServer 傳來目前 ACO 參數下
所求得的運送總距離，並將之轉換成 GA
之適應值後傳遞給 ThreadGA。接著等候
ThreadGA 傳遞新的 ACO 參數過來後，再
傳送給相對應叢集子節點之AntServer進行
求解。 
3.1.2 ACO 子系統  
本研究主要是利用在叢集各子節點電
腦的 AntServer 來進行平行運算，以處理由
 
 實體架構 
Named Pipes  
 
Server 
 
 
 
 
 
Clients 
邏輯架構 
 
 
Client 
 
 
 
 
 
Servers 
Repeat 
 建立 Named Pipes 
 Wait For 叢集子節點建立連線 
 新增一個 Thread 來處理與子節點的連線 
Until ThreadGA 結束 
Repeat 
 Wait For 子節點之 AntServer 送來執行結果
 If 連線中斷 Then 
  停止此 Thread 
 End IF 
 傳遞執行結果給 ThreadGA 
 Wait For ThreadGA 指派新的 ACO 參數 
 傳送 ACO 參數給子節點之 AntServer 
Until ThreadGA 結束 
 6
( ) ∑+−=
k
ijLij 01 ττρτ            (3) 
其中， 
0τ  : 費洛蒙濃度初值。 
Lρ : 區域更新之費洛蒙蒸發率。 
( ) ∑Δ+−=
k
ijkijGij ττρτ 1           (4) 
其中， 
( )
⎪⎩
⎪⎨
⎧
=Δ −
otherwise
jiArctraversedantthkif
kijk J
Q
0
,τ                                         
    Jk: 螞蟻 k 所選取路線之總成本。 
    Q: 預先設定的常數。 
   Gρ : 全域更新之費洛蒙蒸發率。 
當得到最佳解後，AntServer 會將解傳
回給主控電腦的 ThreadNet2，以讓其計算
染色體的適應函數值。 
3.1.2 GA 子系統 
在整個 GA-ACO 平行演算法中，GA
子系統是負責最佳 ACO 參數的求解，並由
ThreadGA 來完成其工作。本研究所考慮的
ACO 參數有與式(1)、式(2)相關之 q0、α、
β，以及式(3)與式(4)中之 0τ 、 Lρ 、 Gρ 等
參數。 
ThreadGA 的主要流程如圖 7 所示，茲
將其中重要步驟說明如下。 
一、產生初始族群 
初始族群中每一個染色體即代表一組
ACO 參數的可能值，在此本研究將先設定
各參數的可能範圍，然後以亂數產生每一
個染色體之 ACO 參數值。另，由於 ACO
參數均為實數，本研究採用二進位編碼
法，將實數映射成整數來求解。 
     圖 7 ThreadGA 之運作流程 
二、評估各染色體適應值 
此部分會進行平行處理的工作分派，
首先會先統計叢集可用電腦數，分配每部
有空閒的電腦一個染色體，呼叫其
AntServer 求解。當沒有閒置的叢集電腦可
用時，系統會一直等待，直至所有染色體
均求得適應值為止。 
此演算法尚有二個特色： 
1. 當所有的染色體均分配完畢，但尚
未全部算出適應值；此時若有其他
叢集電腦閒置，這些閒置的電腦會
再度被分配去計算未求出適應值的
染色體。這樣的設計方式除了可避
免某些叢集電腦因計算能力較弱或
其他突發狀況導致系統無法持續進
行，也可以更有效地利用計算能力
較強的叢集電腦來進行演算。 
2. 若有叢集電腦當機或其他因素中斷
連線，可由其他叢集電腦替補，不
致使系統中斷，前功盡棄。而當叢
集電腦障礙排除時，亦可立即再加
入協助計算，不致閒置。 
三、選擇  
產生初始族群 
Repeat 
  While 尚有染色體 n 未求出適應值 
    For Each 染色體 n 
      If 染色體 n 尚未求出適應值 Then 
        Wait For 電腦叢集中有空閒的電腦 
        將染色體 n 的基因轉成 ACO 參數 
        將 ACO 參數傳遞給 ThreadNet2 
      End If 
  End For Each 
  End While 
  利用輪盤法選擇親代 
  利用雙分基因交換法進行交配產生子代 
  突變 
Ubtil 達到最大演化代數 
輸出最終演化結果 
傳送結束訊息給其他程序 
 8
實驗結果如圖 8 所示，由圖中可知，
隨著叢集電腦總數的增加，所需的運算時
間約呈等比例減少。由此可知 GA-ACO 平
行處理演算法本身用於「平行處理」所額
外花費的時間並不多，叢集越多部電腦，
便可以節省越多的執行時間。 
0
50
100
150
200
0 5 10 15
叢集電腦數(部)
運
算
時
間
(分
)
100次
200次
300次
 
    圖 8 平行處理績效測試 
3.2.4 GA-ACO 平行處理演算法績效測試 
為了測試 GA-ACO 平行處理演算法於
求解 VRPTW 時的求解精度，本研究先利
用表 2 與表 3 的參數設定( ACO 的演算代
數為 300)，以 Solomon VRPTW 標竿問題
集具 100 顧客節點之 C101、C102、R101、
R102、RC101、RC102 等六個資料集為例，
應用 GA-ACO 平行處理演算法求出最適
ACO 參數後，再單獨跑 ACO 子模組。此
時螞蟻數增為 20 隻，演算次數增為 500
次，每個資料集重覆執行 10 次，其結果如
表 4 所示。 
表 4 GA-ACO 平行處理求解結果 
由表 4 中可知，GA-ACO 平行處理演
算法的求解誤差約在 5%以內，對 RC 型的
問題表現較差。 
四、結論與建議 
本研究提出的平行運算實作，可在目
前各種 32/64 位元的 Windows 系統電腦上
運作，業者無須另行進行軟硬體投資。主
控電腦如果採用 Server 等級的作業系統，
則叢集電腦的數量將可輕易提升至數十部
以上，對於運算時間的效率上將會有相當
大的幫助。此外系統運作時各叢集電腦尚
可進行其他操作，不影響其他使用者之工
作，因此在實務上相當具有應用的價值。 
    由於研究時間與成本的限制，本研究
主要著重於平行處理架構的實作，對於
ACO 部分的改良較少，此也導致演算法的
精度不夠優異，後續研究可在 ACO 的部份
做進一步的優化與改良。 
 
參考文獻 
1. Abramson, D., & Abela, J. (1991). A 
parallel genetic algorithm for solving the 
school timetabling problem, 15 
Australian Computer Science Conference, 
Hobart, 1-11. 
2. Berger, J., Barkaoui, M., & Bräysy, O. 
(2004). A parallel hybrid genetic 
algorithm for the vehicle routing problem 
with time windows. Computers & 
Operations Research, 31(12), 
2037–2053. 
3. Colorni, A., Dorigo M., & Maniezzo V. 
(1991). Distributed optimization by ant 
colonies. In F. Varela, & P. Bourgine 
(Eds.), the First European Conference on 
Artificial Life (pp. 134-142). Paris, 
France: Elsevier Publishing. 
4. Doerner, K., Hartl, R.F. Kiechle, G., 
Lucka, M. & Reimann, M. (2004). 
全域最佳解+ 本研究所得解 問題 車輛數 總距離 車輛數 總距離 
誤差
% 
C101 10 827.3 10 827.3 0 
C102 10 827.3 10 854.1 3.2
C103 10 826.3 10 826.3 0 
R101 20 1637.7 21 1654.9 1.1
R102 18 1466.6 19 1489.8 1.6
R103 14 1208.7 15 1238.5 2.5
RC101 15 1619.8 17 1677.4 3.6
RC102 14 1457.4 15 1520.5 4.3
RC103 11 1258.0 12 1326.2 5.4
