Building Small-World Peer-to-Peer Networks
Based on Hierarchical Structures
Hung-Chang Hsiao, Yung-Chih Lin
Abstract— Small-world (SW) networks possess two properties,
namely low diameter and high clustering coefficient, that are often
desired by large-scale peer-to-peer networks. Prior studies have
shown that the construction of an SW network can be based
on a d-regular graph, and each node in the graph maintains d
local neighbors and a small constant number of long-distance
contacts. However, it is commonly understood that it is difficult
to construct a short route in an SW network, given source (s)
and target (t) nodes, though an SW network guarantees that
a short route from s to t exists. Prior work in [1] proposed a
“navigable” SW network for a d-dimensional lattice such that
a simple localized routing algorithm can be devised to route a
message from s to t using O(log2 X ) hops, where X is the number
of nodes in the network.
In this paper, we present a novel navigable SW network
based on a hierarchical model. Compared to previous efforts, the
novelty of our study presents (i) that our network construction
based on a hierarchical model is decentralized, (ii) that routing
a message between any two nodes in our SW network takes
logarithmic hopcount in expectation, (iii) that our SW network
has high cluster coefficient, and (iv) that the performance
of our proposal is mathematically provable. We support the
performance of our proposal in this study through rigorous,
thorough performance analysis and extensive simulations.
Index Terms— Peer-to-peer systems, small world, overlay net-
works, tree hierarchy, performance analysis
I. INTRODUCTION
Peer-to-peer (P2P) networks (or overlays) have recently
become an active area of research. Applications over P2P
networks include information retrieval, content distribution,
processor cycle sharing, etc. These applications often demand
that their underlying P2P network infrastructures be scalable,
robust, and have low diameter. For example, an Internet-scale
file sharing system, namely Oceanstore [2], is designed and de-
ployed on top of the P2P network infrastructure, Tapestry [ 3],
which guarantees that each node participates in the network
using O(logX ) connections, and routing a message between
any two nodes takes O(logX ), where X is the total number
of nodes in the system.
One elegant construction for P2P network infrastructures is
the implementation of a distributed hash table (DHT). Exam-
ples of DHT networks include CAN [4], Chord [5], Pastry [6],
Tapestry, etc. These networks are well-structured such that
each node picks its neighboring nodes deterministically. In a
dynamic environment where nodes come and go frequently,
a DHT network “may”, however, have some difficulty in
maintaining its network topological structure, compared with
Corresponding author. Department of Computer Science and Information
Engineering, National Cheng-Kung University, Tainan 701, Taiwan, E-mail:
hchsiao@csie.ncku.edu.tw.
unstructured proposals. In unstructured P2P networks (e.g.,
Gnutella [7]), nodes are allowed to interconnect with each
other, randomly.
Another thread for constructing a P2P network is to follow
the small world (SW) principle [8]. For building an SW
network, prior studies by Bolloba´s et al. [9] and Watts et
al. [10] suggested the introduction of only a few “random”
edges into a primitive, regular ring network. One of the major
conclusions drawn by the previous study [10] is that such a
randomized SW network structure exhibits (1) low diameter,
and (2) high clustering coefficient. By diameter, we mean the
maximum path length of the shortest routes between any two
nodes in the network. Given a small k, the cluster coefficient
for a node v is |B
k
v |
(|Bkv |2 )
, where Bkv and Bkv represent the set
of v’s neighbors within v’s k-hop scope and the set of edges
appearing in Bkv , respectively. If the cluster coefficient is high,
then neighboring nodes of v are likely to interconnect with
one another. Since an SW network has a low diameter, the
path length of routing a message between any two nodes in an
SW network is small. Additionally, nodes with high clustering
coefficient form strongly connected clusters such that nodes
in a cluster cannot be simply disconnected. Particularly, since
nodes in a P2P network are heterogeneous [11], the strongly
connected clusters formed by capable and durable peers may
further enhance the system performance and reliability. More-
over, in contrast to a deterministic DHT network, a randomized
SW network enumerates a family of network topologies. This
results in better flexibility for connecting nodes in an SW
network, as compared to a deterministic DHT structure.
SW overlay networks with low diameter and high cluster
coefficient offer several applications. For example, Zhang et
al. [12] improved the search performance for an overlay net-
work, namely Freenet [13], by relying on clustering locations
of data objects having close key values. Hui et al. suggested
replicating popular objects in a cluster of nodes to handle flash
crowds [14]. Li et al. implemented semantic content space
over an SW overlay for providing attribute-based search [ 15].
Iamnitchi et al. proposed taking advantage of high clustering
coefficient exhibited by SW networks for rapid information
dissemination [16].
Given an SW network, few works discussed the develop-
ment of a localized routing algorithm 1 for discovering a
short route between any two nodes in the network [1], [17],
[18]. This is because an SW network is a randomized network
where no deterministic structure to organize the participating
1In a localized routing algorithm, nodes only depend on their local
knowledge to perform efficient message routing.
3takes O(logd X ) hops in expectation, and (3) nodes in our
network form strongly connected components, and this allows
including capable peers into the clusters for further optimizing
the system performance and reliability. The detailed discussion
for the performance comparison between Symphony and our
proposal are given in Section VII-D and VII-E.
Duchon et al. also offered the design of an SW P2P network
that can operate in a distributed manner [20]. Duchon et al.
assumed that the node distribution in the network follows
the α-power-law latency expansion [31], one of the realistic
network models. That is, for each node v in the network, the
number of nodes having the latency x to v is no more than
βxα, where α and β are two given positive constants. Duchon
et al. targeted at a static environment where nodes do not come
and go. In contrast to [20], we impose no assumption on the
distribution of nodes in the network in this paper. In addition,
our study allows nodes to join and leave the system anytime.
Wang et al. [32] analyzed the resilience of structured P2P
networks, including Chord [5], CAN [4], and Pastry [6], in
terms of the percentage of messages that can be routed to their
destinations (namely, the average hit ratio). They concluded
that in a dynamic environment, CAN—a d-dimensional lattice
substrate—is not robust in terms of the average hit ratio,
compared to Chord and Pastry. This may be due to the
deterministic structure of a CAN network. Wang et al. sug-
gested introducing random long-distance contacts to each peer
participating in a CAN network. With the help of randomly
picked long-distance contacts, not only the number of hops for
routing a message in CAN is reduced (i.e., the average routing
length is O(log2 X )), but the resilience of CAN is improved.
By contrast, our proposal in this paper builds an SW network
based on the hierarchical model. As we will discuss later in
this section, our SW network can leverage prior efforts (e.g.,
those presented in [21], [22], [23]) by taking advantage of the
embedded tree structure for further optimization.
Merugu et al. [33] provided an extensive simulation study
for P2P networks constructed based on the SW principle. The
study by Merugu et al. validated that message routing in an
SW network is efficient. However, the study by Merugu et al.
provided no rigorous analytical results.
Zhu et al. [22] proposed a proximity-aware, load-balancing
mechanism to scale the loads of peers participating in a DHT
network. In the proposal by Zhu et al., a tree structure is
constructed and maintained over a DHT network, which col-
lects load information from participating nodes and performs
matching for migrating loads from heavy nodes to light ones.
Shen et al. [23] also provided a design aiming to balance loads
of peers and to minimize the communication cost incurred
by movements of loads. In this study, we construct an SW
network based on a tree substrate. Since studies like [22]
and [23] rely on a tree structure to collect load information and
to perform load balancing, our SW overlay can be naturally
added to the load balancing feature by further including the
mechanisms presented by Zhu et al. and Shen et al. such that
peers in the network have balanced loads.
Node clustering algorithms (e.g., the proposals in [34],
[35], [36]) have been extensively studied. Given a network
G = (V,E), a node cluster algorithm partitions the node set
V into clusters C1, C2, C3, · · · , Cl such that Ci ∩ Cj = ∅
for any i = j, and ⋃li=1 Ci = V . In addition, nodes
assigned to the same cluster are “similar” in accordance with a
predefined similarity function, and nodes in different clusters
are dissimilar [35]. If a similarity function (e.g., that in [35]) is
defined appropriately, node clustering algorithms may generate
a set of disjoint clusters such that nodes in the same cluster are
highly connected (i.e., intermediate nodes on a routing path in
the cluster Ci are also the members of Ci). However, to our
best knowledge, few studies present the construction of SW
networks based on node clustering algorithms.
Another important group of studies (e.g., [37], [38], [39],
[40]) related to our work finds a dominating set from a given
network G = (V,E). A dominating set is a subset of nodes
S ⊂ V , where any node v ∈ V − S connects to a node in S.
In general, an extended dominating set is a subset, S, of nodes
such that any node v ∈ V −S is k-hop researchable from any
node u ∈ S. A connected dominating set, S, is that all nodes in
S are connected. Clearly, a connected, extended dominating set
is a candidate substrate for building an SW overlay network.
This is because a node u ∈ S may serve as a head of a
“cluster” in which non-head members are k-hop researchable
from the head node u. Possibly, nodes interconnect to form
short-distance links in a cluster, while long-distance links are
constructed among heads of clusters. However, it is unclear
to us how an SW network is built with connected dominating
sets.
Techniques (e.g., the proposals in [21], [41], [42]) that are
orthogonal to the SW principle offer efficient message routing
in P2P networks. For example, for exploiting the physical
network locality, Xu et al. [21] proposed to overlay an extra
hierarchical storage structure over CAN [4] such that nodes
participating in CAN not only register their network locations
with the distributed storage, but also forward their routing
messages to geographically nearby nodes discovered from
storage. Studies such as [42] by Ratnasamy et al. rely on
landmark nodes to exploit the physical network locality. Since
overlay links among nodes in an SW network are constructed
in probability, the SW network may exploit physical network
locality by incorporating with the techniques presented in [ 21],
[41], [42].
III. PROPOSAL OVERVIEW
Basically, an SW network is a randomized network where
overlay links among nodes are determined in probability. Since
the substrate of our SW network is a tree network, the tree
network shall also be a randomized network. Figure 1 shows
our SW network based on a tree substrate T. In our design,
with regard to the tree substrate, a node participates in a “sub-
tree” having the lowest level. Such a sub-tree is denoted by T 1.
Disjoint T 1 trees construct a T 2 tree by forming representative
nodes (i.e., the root nodes) of these T 1’s. For example, a and g
are the representative nodes of the two distinct T 1’s shown in
Figure 1. a and g form a T 2 tree, and the tree root, g, of T 2 is
the representative node forming another tree T 3. We note that
such a T 2 tree is only with the node set {a, g}, i.e., the set of
root nodes of respective T 1’s that assemble T 2. Similarly, the
5Fig. 2
(A) AN EXAMPLE OF A T i TREE CONSTRUCTED USING THE PROPOSED
ALGORITHM, (B) THE NODE p15 JOINS THE OVERLAY, AND (C) THE
OVERLAY THEN INCLUDES ONE EXTRA NODE p15
Figure 2 illustrates an example for our tree-shaped overlay
construction. In Figure 2(a), the overlay first consists of
six peers, i.e., {r, p10, p30, p50, p70, p100}, where the non-root
nodes are p10, p30, p50, p70 and p100, and p10 is the only child
node, r.chd, of r. In this example, F(pi) = i. When p15 joins
the overlay (Figure 2(b)), it first sends its joining request to
r via the help of a bootstrap node (not shown in Figure 2).
r randomly picks a node (i.e., p50) to help p15 join. Since
p15 has the numerical difference diff(p15) less than that of
p50 (i.e., diff(p15) = F(p15) − F(p10) = 5 < diff(p50) =
F(p50) − F(p10) = 40), p15 then sends its joining request
to the parent node of p50, which is p10. However, because
p10 has diff(p10) less than diff(p15), p15 then links to p10
(Figure 2(c)).
We note the following in our tree formation protocol. First,
in our design the root node r of a T i tree needs to pick
a node in T i uniformly at random. It is possible to rely
on a Markov Chain Monte Carlo method (see Chapter 10
in [45]) to randomly sample a node in T i. However, since
a T i tree consists of a constant number, dT , of nodes, in our
implementation we instead maintain the node set of T i in the
root node r such that r can simply pick a random node from
the node set. To maintain the node set of T i, each node v
in T i requires to send a live message to r. This is because
nodes may dynamically leave the system without informing
any node in the T i. Consequently, r can then have the set of
nodes participating in T i.
Second, the root node r of a T i tree registers with the
bootstrap node if T i contains less than dT participants.
However, if T i contains exactly dT nodes, then T i will not
include any newly coming node and r will then deregister
from the bootstrap node. r may re-register with the bootstrap
if r maintains less than dT nodes due to nodes leaving.
Finally, the root node r of T i will join a T i+1 tree using
the T protocol as we discussed in this section. r has a unique
ID to join T i+1, if available. That is, r joins T i+1 via the root
node rˆ of T i+1 by querying the bootstrap node. If there does
not exist any root node of T i+1 registering with the bootstrap
node, r becomes the root of a new T i+1 tree.
2) Network Maintenance: A T i tree may be fragmented
due to node failure or departure. To handle the dynamics of
the tree overlay, each node v in T i periodically pings its parent
node v.prt. If v.prt fails to respond to v, v assumes the failure
of v.prt, and then rejoins the tree via the help of the root
node r of T i. v rejoins T i using the T protocol described in
Section IV-A.1.
Notably, it is possible that the root node r of a T i tree fails
such that non-root participants in T i cannot rejoin via the help
of r. If so, these non-root participants rejoin the system via
the bootstrap node. They rejoin the system as newly coming
peers.
B. Recursive Construction for T
We have presented in Section IV-A the basic algorithm for
forming a T i tree that can consist of up-to dT nodes.
Assume that we have constructed a number of T 1 trees.
For constructing a level-2 tree T 2, root nodes r in distinct
T 1 trees query the bootstrap node for their entry points. This
process is identical to that of the joining of a node into a
T 1 tree except that the candidate entry points that can help
these root nodes form their T 2 tree are the root nodes of T 1
trees. Therefore, in our tree formation protocol we require the
bootstrap node to additionally label each registry node with
its level-ID. The bootstrap node depends on the level-ID to
identify the “root level” of a registry node. That is, the root
node of a T i tree will be labeled with the level-ID i in the
bootstrap. For example, if a node is a root node of a level-3
tree T 3, then it will have the level-ID 3 in the bootstrap.
If the entire tree network, T, is a level-k tree T k, then
the above-mentioned process proceeds until multiple T k−1
trees self organize into a T k tree. Similarly, the root nodes
of these T k−1 trees form T k by consulting the bootstrap for
the locations of roots with level-ID k − 1 as the entry points.
V. AUGMENTATION AND NAVIGATION
Fig. 3
LABELING NODES IN T, WHERE CIRCLE SHAPES REPRESENTS NODES, THE
NUMBER INSIDE A NODE REPRESENTS THE COORDINATE-LIKE LABEL,
AND THE NUMBER ASIDE A NODE INDICATES THE HIERARCHICAL LABEL
In our design, each node v in T has two labels, namely
the coordinate-like label and the hierarchical label. While
7distribution reasonably well [49]. In the following analysis, we
assume that the system follows the M/M/∞ queuing model
in which the arrival rate of peers is according to a Poisson
distribution with the parameter λ, and the lifetime for peers are
independent and exponentially distributed with the parameter
μ. The number of peers in the system is at time t denoted by
M(t). We also assess the load of the bootstrap node in this
section.
Theorem 1. The number of peers in the system at time t is
O(E[M(t)]) w.h.p..
Proof. Since
P
(
M(t) = j
)
= e−λtp
(λtp)j
j!
,
where p =
∫ t
0
e−u(t−x)
t dx due to the uniformity of the arrival
time in [0, t], P
(
M(t) = j
)
is thus a Poisson distribution with
the parameter λtp (see Page 218 in [45]). That is, E[M(t)] =
λtp. We let E[M(t)] = N . By Chernoff tail bound (Page 97
in [45]), we have
P
(
M(t) ≥ 3
2
N
)
≤ e
−N (eN ) 32N
(32N )
3
2N
=
(√
8e
27
)N
,
and
P
(
M(t) ≤ 1
2
N
)
≤ e
−N (eN ) 12N
(12N )
1
2N
=
(√
e
2
)−N
.
When N > 3, P (|M(t)−N| ≥ 12N ) < ( 12)N . The proof
thus follows.
Corollary 1. Let λμ = N . If t ≥ Nμ , then O(E[M(t)]) = N .
Proof. Since
E[M(t)] = λtp = λt
∫ t
0
e−μ(t−x)
t
dx = λt
1
μt
(1− e−μt),
if t ≥ Nμ then λμ(1 − e−N ) ≤ E[M(t)] < λμ . The proof
follows.
Theorem 1 states that the number of nodes in the system
at any time t is O(M(t)) w.h.p.. Corollary 1 presents that if
the system time t ≥ O(N ), then the number of nodes in the
system is O(E[M(t)]) = N . Therefore, in the following we
will discuss Γ operating at t > cN for some c, and denote the
number of peers in Γ at t by N .
Lemma 1. If an overlay Γ is constructed using the T protocol,
then Γ will be cycle-free.
Proof. Consider a cycle, denoted by p = a0a1a2 · · · an−1a0 in
Γ, where a0 = r.chd and {a1, a2, · · · , an−1} ⊆ V −{r.chd}.
We consider the following two cases. (1) p is a cycle
because two paths p1 and p2 share the same endpoint a0 joint
at a node, say ai (1 ≤ i ≤ n−1). However, this is impossible
since by definition each non-root node in Γ can only have a
parent node.
(2) p can be a circular path even without two paths with
r.chd as their endpoint cross. If so, it can be easily shown
that diff(a0) < diff(a1) < diff(a2) < · · · < diff(a0).
This is a contradiction, and the proof follows.
Remark 1. If an overlay Γ is constructed using the T
protocol, then a node joining Γ will visit nodes on no more
than one path with the root node as the endpoint.
Theorem 2. If Γ = (V, E) implements the T protocol and
|V | = N , then the height of Γ is lnN +O(1) in expectation.
Since the proof of Theorem 2 is technically challenging and
lengthy, we refer the readers to Appendix I for the details.
Theorem 3. Assume Γ with N nodes. Denote the height of
Γ by the random variable SN . Then SN = O(lnN ) with the
probability no less than 1−O(N −1).
The details of the proof for Theorem 3 are given in
Appendix II.
Lemma 1 and Remark 1 state that any node a takes a finite
number of hops to join the overlay and the nodes helping
a join appear on only one path with r.chd as the endpoint.
Theorem 2 and 3 show that any path with r.chd as the endpoint
has O(lnN ) hops w.h.p.. We thus conclude as follows.
Corollary 2. If Γ rooted at r.chd with N nodes is constructed
with the T protocol, then a newly joining node takes O(lnN )
hops w.h.p. to join Γ. Clearly, T i associated with Γ has the
height of O(lnN ) + 1 = O(lnN ).
B. Performance of T
As we discussed earlier, T = T k. We will, in this section,
report the performance analysis for T regarding the degree,
dT, for any v in T, and the height of T.
Theorem 4. Assume that each node v in T initially has the
degree dˆ to form T i, where 1 ≤ i ≤ k. Then, E[dT] = dˆ+O(1)
and dT ≤ 2dˆ with the probability no less than 1− dˆ−3.
We note that dˆ = dT for simplifying the notation in the
following discussion. As we mentioned in Section IV, dT is
a soft constraint, and Theorem 4 concludes the degree that a
node needs to contribute to the network.
Theorem 5. Assume that constructing a dˆ-node T i tree takes
t(dˆ) time units, where 1 ≤ i ≤ k. If E[t(dˆ)] ≤ dˆ2(λ+μ)
(E[t(dˆ)] ≈ dˆ2λ when λ  μ), then the number of registry
nodes in the bootstrap node is less than k in expectation and
no more than k2 +O(k) with the probability 1− k−4 + o(1).
The proofs for Theorem 4 and 5 are lengthy, and the details
of the proofs are given respectively in Appendix III and IV.
Corollary 3. Let X = dˆk be the total number of nodes in T.
Then, the diameter of T is DT = 2 lnX in expectation, and
with the probability no less than 1 − O(dˆ−1) DT is no more
than 12 lnX .
Proof. The diameter DT of T is the length of the path crossing
through the root node r in T i (i = 1, 2, · · · , k) from a leaf
node a in T 1 to a leaf b in another T 1. Therefore, DT =
2k ln dˆ = 2 logdˆX ln dˆ = 2 lnX . By the proof in Theorem 3,
9A. Height of T
 0
 2
 4
 6
 8
 10
 12
 16  64  256  1024  4096  16384  65536
H
ei
gh
t
Number of Nodes (logscale)
ln N
Simulation
Fig. 4
THE HEIGHT OF Γ
Theorem 2 concludes that the height of Γ, the tree con-
structed using the T protocol, is lnN , where N is the number
of participants in a T i tree excluding the root node r. In
Figure 4, we present the simulation results for the T protocol,
where the height of Γ is shown by varying the number of
participating nodes from 10 to 100, 000. We note that the x-
axis is in logarithmic scale. The results show that the height
is nearly identical to lnN . This conforms to our theoretical
analysis result provided by Theorem 2.
B. Diameter of T
 0
 5
 10
 15
 20
 25
 30
 35
 40
 16  64  256  1024  4096  16384  65536
D
ia
m
et
er
Number of Nodes (logscale)
d=10
d=20
d=100
d=infinity
Fig. 5
THE DIAMETER
Corollary 3 presents that the diameter of the resul-
tant tree network T = T k recursively constructed by
T 1, T 2, · · · , T k−1 is 2 lnX in expectation, where X is the
maximum number of peers joining the system. Figure 5 illus-
trates the measured diameter of T. In the simulations, dˆ is 10,
20, 100, and ∞. Figure 5 shows that if dˆ is enlarged (e.g., dˆ =
100), then the diameter measured from simulations closely
matches the result as presented in Corollary 3. However, if dˆ
becomes relatively smaller (e.g., dˆ = 10), then our T networks
have the diameter larger than the expected (i.e. 2 lnX ). This
is because in the proof of Corollary 3 we estimate the height
of a tree with dˆ nodes as ln dˆ, instead of ln dˆ. Thus, the
diameters measured for our T trees are more than 2 lnX .
C. Peer Degree Distribution
We investigate the average number of links used by a node
participating in our SW network. As we mentioned in Corol-
lary 4, a node takes no more than dˆ + ln2 X connections in
expectation in joining and maintaining the network. Since each
node constructs and maintains at most ln2 X long-distance
contacts, it suffices to investigate the number of connections
used by a node in joining a T network.
 0
 20
 40
 60
 80
 100
 0  5  10  15  20  25  30  35  40
CD
F 
(%
)
Degree
d=8
d=20
d=40
Fig. 6
THE CUMULATIVE DISTRIBUTION FUNCTION OF DEGREES
Figure 6 shows the cumulative distribution function of
degrees for nodes in T, where (x, y) represents the number, y,
of nodes having degrees no more than x. In this experiment,
we let dˆ = 8, 20, 40, and X = 100, 000. The simulation results
are similar for different system sizes, and are thus omitted in
this paper.
The simulation results illustrated in Figure 6 conform to our
analytical result presented in Theorem 4. That is, the degree
of a node used to participate in a T network is unlikely to be
more than the expected value, dˆ.
D. Routing Path Length
Theorem 6 discusses the expected routing length of send-
ing a message between any two participating nodes, which
concludes the expected routing length equal to O(log dˆ−1 X ).
In the simulations, given a system size X , we randomly pick
m pairs of nodes, and for each pair, we arbitrarily designate
the source and destination nodes for sending a message. We
let m = 1, 000, and observe no clear difference regarding the
averaged routing path length if m is more than 1, 000. We
thus report the simulation results for the case of m = 1, 000
in this paper.
Figure 7 illustrates the simulation results for the averaged
routing path length for system sizes up to 100, 000, where
the routing using only the tree links is denoted by w/o and
the routing taking advantage of both tree links and long-range
contacts (i.e., Algorithm 2) is denoted by w/. We note that
11
conclude that the long-distance contacts in our proposal not
only help reduce the routing path length, but also improve the
cluster coefficient.
VIII. CONCLUSIONS AND FUTURE WORK
We have presented an SW P2P network with a tree-shaped
base structure. Our SW P2P network operates in a decentral-
ized manner. Participating nodes have no global knowledge to
form the network, and can come and go freely. A node in the
tree-based network connects to a constant number of peers
with high probability. For performing efficient navigation, a
node builds and maintains extra long-distance contacts. We
thoroughly and rigorously analyze the performance of our SW
overlay. Our SW network has the performance guarantees. We
also validate our analytical results by extensive simulations.
As discussed in Section I and II, the techniques for exploit-
ing the physical network locality (e.g., the proposal in [ 21])
and for balancing the loads among participating peers (e.g.,
the algorithms in [22], [23]) can be naturally integrated into
our SW network. This may considerably enhance our SW
network. We will study the details of how these techniques
can be included into our SW network. Unlike the earlier
studies (e.g., [21], [22], [23]) that are based on deterministic
overlay networks, we will also study the performance impact
of realizing the algorithms (e.g., those in [21], [22], [23]) in
our randomized SW network.
On the other hand, in this study, we evaluated the ex-
pected delay of routing a message in a dynamic network
(Section VII-D), considering randomly picked sources and
destinations. Routing traffics and patterns may, however, vary
significantly due to different applications operated on top
of the network. Given a traffic pattern (e.g., the probability
distribution for locations of sources and destinations in the
network), there may exist an optimal design for routing the
traffic. This desires an independent study for insight perfor-
mance modeling and solutions.
In our SW network, participating peers depend on
coordinate-like labels to construct their long-distance contacts.
They also rely on their hierarchical labels to route messages.
In a dynamic environment with a reasonable peer lifetime
value (e.g., 150 minutes [47], [50]), our SW network performs
message routing well (in our simulations, every 90 ms, each
simulated peer assigns coordinate-like and hierarchical labels
to each of its children nodes, and collects a new long-distance
contact). That is, the number of hops required for routing
a message in our SW network approximates that drawn by
Theorem 6 (see the discussion in Section VI-C and VII-D).
It remains unclear, however, whether the period of updating
labels and collecting long-distance contacts in our simulations
is optimal or not in terms of the number of maintenance
messages required per time unit. We believe that choosing
the optimum maintenance period strongly depends on the rate
of query messages injected into the network. This depends
on applications operated on top of our network, and definitely
demands an individual study to explore the maintenance issue,
given an application.
Finally, it would be interesting to implement some appli-
cations over our proposed SW network. For example, the
P2P file sharing application, BitTorrent [52], may depend on
our SW network to search files. This allows investigating the
efficiency of our proposal in a real usage environment. Clearly,
the efficiency of our proposal relies on the implementation
details of the application and our SW network, and this surely
demands an independent study.
IX. ACKNOWLEDGEMENT
We appreciate Jacqueline Wah for reading the paper. We
also thank the anonymous reviewers for their valuable feed-
back. This work was partially supported by National Science
Council, Taiwan, under Grant 96-2221-E-006-062.
REFERENCES
[1] J. M. Kleinberg, “The Small-World Phenomenon: An Algorithm Per-
spective,” in Proceedings of the Annual Symposium on Theory of
Computing, May 2000, pp. 163–170.
[2] J. Kubiatowicz, D. Bindel, Y. Chen, P. Eaton, D. Geels, R. Gum-
madi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, and B. Zhao,
“OceanStore: An Architecture for Global-Scale Persistent Storage,” in
Proceedings of the International Conference on Architectural Support
for Programming Languages and Operating Systems, November 2000,
pp. 190–201.
[3] B. Y. Zhao, L. Huang, J. Stribling, S. C. Rhea, A. D. Joseph, and J. D.
Kubiatowicz, “Tapestry: A Resilient Global-scale Overlay for Service
Deployment,” IEEE Journal on Selected Areas in Communications,
vol. 22, no. 1, pp. 41–53, January 2004.
[4] S. Ratnasamy, P. Francis, M. Handley, R. Karp, and S. Shenker, “A Scal-
able Content-Addressable Network,” in Proceedings of the International
Conference on Applications, Technologies, Architectures, and Protocols
for Computer Communications, August 2001, pp. 161–172.
[5] I. Stoica, R. Morris, D. Karger, M. F. Kaashoek, and H. Balakrishnan,
“Chord: A Scalable Peer-to-Peer Lookup Service for Internet Applica-
tions,” in Proceedings of the International Conference on Applications,
Technologies, Architectures, and Protocols for Computer Communica-
tions, August 2001, pp. 149–160.
[6] A. Rowstron and P. Druschel, “Pastry: Scalable, Distributed Object
Location and Routing for Large-Scale Peer-to-Peer Systems,” Lecture
Notes in Computer Science, vol. 2218, pp. 161–172, November 2001.
[7] Gnutella, http://rfc-gnutella.sourceforge.net/.
[8] S. Milgram, “The Small-World Problem,” Psychology Today, vol. 2, pp.
60–67, 1967.
[9] B. Bolloba´s and F. R. K. Chung, “The Diameter of a Cycle Plus a
Random Matching,” SIAM Journal on Discrete Mathematics, vol. 1,
no. 3, pp. 328–333, August 1988.
[10] D. J. Watts and S. H. Strogatz, “Collective Dynamics of Small-World
Networks,” Nature, vol. 393, pp. 440–442, June 1998.
[11] S. Sen and J. Wang, “Analyzing Peer-to-Peer Traffic Across Large
Networks,” ACM/IEEE Transactions on Networking, vol. 12, no. 2, pp.
219–232, April 2004.
[12] H. Zhang, A. Goel, and R. Govindan, “Using the Small-World Model
to Improve Freenet Performance,” Computer Networks, vol. 46, no. 4,
pp. 555–574, November 2004.
[13] I. Clarke, S. G. Miller, T. W. Hong, O. Sandberg, and B. Wiley, “Pro-
tecting Free Expression Online with Freenet,” IEEE Internet Computing,
vol. 6, no. 1, pp. 40–49, January/February 2002.
[14] Y. Hui, C. Lui, and K. Yau, “Small-World Overlay P2P Networks:
Construction and Handling Dynamic Flash Crowd,” Computer Networks,
vol. 50, no. 15, pp. 2727–2746, October 2006.
[15] M. Li, W.-C. Lee, and A. Sivasubramaniam, “Semantic Small World:
An Overlay Network for Peer-to-Peer Search,” in Proceedings of the
International Conference on Network Protocols, October 2004, pp. 228–
238.
[16] A. Iamnitchi and I. Foster, “Interest-Aware Information Dissemination
in Small-World Communities,” in Proceedings of the International
Symposium on High Performance Distributed Computing, July 2005,
pp. 167–175.
[17] J. M. Kleinberg, “Navigation in a Small World,” Nature, vol. 406, p.
845, August 2000.
13
the leftmost one. As we discuss as follows, we only consider
ordered trees that are transformed using the rotation process
such that their leftmost paths are longest.
We now show that there exists an onto function f : S → P ,
where S is the set of tree overlays that can be constructed
using our tree construction algorithm, namely the T protocol,
and transformed with the clockwise rotation process such that
the leftmost paths are maximal in length, and P is the set of
(N − 1)! distinct prefixes. It is clear that given a set of nodes
{a0, a1, a2, · · · , aN−1} (where a0 is r.chd), the number of
distinct prefixes, starting with a0, is (N − 1)!. For each prefix
p ∈ P , there must exist a tree Γ ∈ T i−{r} at least such that
the prefix of Γ is p. For example, a possible Γ is that the root
node a0 has N − 1 children nodes and the i-th child node is
the i-th element in p.
Fig. 10
A NODE q JOINS Γ
We then show that the probability of generating any p ∈
P is 1(N−1)! . Consider any prefix p = 〈a0, b1, b2, · · · , bk〉
associated with a (k + 1)-node tree Γ, where k =
1, 2, 3, · · · ,N − 1 and V = {a0, b1, b2, · · · , bk}. The prob-
ability, Pk, of inserting a node q to Γ such that p changes
to 〈a0, b1, b2, · · · , bl, q, bj, · · · , bk〉 is that q is the rightmost
child node of any node cl ∈ {c1, c2, · · · , ci} ⊆ V (where
c1,2,··· ,i ∈ V ), and that q is the (m + 1)-th smallest among
{diff(c1), (c2), · · · , diff(ci)} ∪ {diff(q)} (see Figure 10).
q then becomes the rightmost child node of c l. Pk is thus no
less than
∑i
m=1
1
k+1 · 1i = 1k+1 if the “walk” initialized by
r randomly picks the leaf node ci among k + 1 nodes for
installing q. This follows that if the probability of generating
the prefix p in length k + 1 is Pˆk+1, then the probability of
generating a prefix of length k + 2 is Pˆk+2 = Pˆk+1 · Pk ≥
Pˆk+1 · 1k+1 . Clearly, Pˆ1 = 1. Therefore, Pˆk+1 ≥ 1k! . Since
there are k! prefixes in total for k + 1 nodes, Pˆk+1 is thus
exactly 1k! . That is, in an N -node overlay, the probability of
generating any prefix associated with a tree implementing the
JOIN algorithm is identical, which is 1(N−1)! .
We now can show that the height of Γ is lnN + O(1) in
expectation. Clearly, the leftmost path in an ordered tree is a
sub-prefix of the prefix representing Γ, which is the longest.
In addition, the diff(·) values of nodes in the leftmost path is
in increasing order. Moreover, we have shown that the prefix
representing Γ is uniformly drawn from all permutations. It
thus suffices to discuss the number of replacements for finding
a maximum, given a random permutation A[1..N ] with N
positive numbers chosen from [1..R], where R  N . The
procedure for finding a maximum M ∈ A[1..N ] is shown in
Algorithm 3.
Algorithm 3: MAX(A): Return the maximum in the
permutation A
M← A[1] ; // replacement1
for i ← 2 to N do2
if A[i] >M then3
M←A[i]; // replacement4
return M;5
We define the random variable Xi = 1 if M = A[i]; Xi =
0 otherwise, where i = 1, 2, · · · ,N . Thus, the number of
replacements, denoted by SN =
∑N
i=1 Xi, in expectation is
E[SN ]. Since
E[Xi] = 1 · P (M = A[i]) + 0 · P (M = A[i])
and
P (Xi = 1) = P (M = A[i]) = 1
i
,
by the linearity of expectations
E[SN ] =
N∑
i=1
E[Xi] = lnN + O(1).
The proof thus follows.
APPENDIX II
PROOF OF THEOREM 3
Proof. Xi = 1 if A[i] is picked from the values in(R
i · (i− 1),R
]
, where A[i] is defined in Appendix I. The
random variables X1, X2, · · · , XN are thus mutually indepen-
dent. Applying Chernoff bound (Page 64 in [ 45]) yields
P
(
SN ≥ 6 lnN
)
≤ 2−6 lnN < N
−1
loge2 < N−1.
The proof follows.
APPENDIX III
PROOF OF THEOREM 4
Proof. Clearly, each node v has dT = dˆ to from a T 1 tree
with dˆ nodes at most. Since T 2 is comprised of at most dˆ root
nodes of T 1 trees, each node v in T 2 has dT = dˆ+1 at most.
It can be easily shown that each node v in a T i tree will at
most have dT = dˆ + i − 1, and there are dˆi nodes in T i in
total, where 1 ≤ i ≤ k. The total number of nodes that can
thus participate in forming T is dˆk.
We define the random variable X(v) as the maximal degree
for any v in T i, where
P
(
X(v)− dˆ + 1 = i
)
=
{
(dˆ− 1)/dˆi 1 ≤ i < k
dˆ/dˆi i = k
.
