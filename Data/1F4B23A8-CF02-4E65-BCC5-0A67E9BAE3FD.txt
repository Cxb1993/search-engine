2 
 
一、摘要 
資料探勘技術已被廣泛地應用在不同領域。關聯法則（association rules）探勘更
是資訊探勘的核心技術之一。在關聯法則中，常需要快速找出頻繁項目集（frequent 
itemsets），現已開發出許多探勘頻繁項目集的方法，其中可分成樣式成長
（pattern-growth）方法及 Apriori 這一類 level-wise 的候選集合產生法。在資料探勘中，
利益探勘（utility mining）的觀念，已被提出用來衡量項目集的受重視程度。如：一項
目集的總獲利。利益探勘在找出高利益項目集（high utility itemsets）時，並沒有如Apriori
的向下封閉性（downward closure property），Apriori 的篩選策略無法選出高利益項目
集，所以，發展一有效且快速的利益探勘方法將十分重要。本計畫提出一高效率的利
益探勘演算法，以降低掃描資料庫次數，利用類似 FP-tree 的樹狀結構來產生所有候選
集合及加速探勘。免除舊有利益探勘方法，需一層一層方式多次掃描資料庫來探勘。
實驗結果顯示，本計畫所提出的方法只需掃描三次資料庫，且在較低門檻值的情況下
勝過 TP、FUM、DCG+等方法，為最有效率之方法。 
關鍵詞：關聯法則、資料探勘、頻繁樣式樹、頻繁項目集、利益探勘 
二、前言與研究目的 
近年來，在各領域中常可見到資料探勘的身影，如：購物籃分析、顧客關係管理、生物資
訊等。探勘頻繁項目集更是資料探勘的重點之一。在交易資料庫中，舊有的探勘方法（如 Apriori 
[AIS93, AS94]）常將各項目以是否出現在交易中來計算，也就是說，一個項目在一筆交易中只
能計算一次。但在真實的世界上，一筆交易常常擁有多個相同的項目，因此，就有項目集分配
額（itemset share）的觀念及利益探勘被提出來衡量項目集的重要程度[CHC97, Hil03, LYC05a, 
YH06]。一項目集的分配額或利益值，可提供有用的資訊，如：一項目集的總獲利，或者是某
項目集的總購買數量。利益探勘（utility mining），更是分配額探勘模組的一般化[YHB04]。而
探勘高利益項目集（high utility itemets）時，並沒有向下封閉性(downward closure property)；導
致舊有的方法無法有效探勘高利益項目集。既然，Apriori 的篩選策略無法選出高利益項目集
(high utility itemsets)，發展一有效且快速的利益探勘方法將十分重要。且現有研究多著重在一
層一層的多次資料庫掃描方法上，在樣式成長的樹狀結構上之研究較為缺乏。因此，本計畫提
出一高效率的樹狀利益探勘模型。在利益探勘上結合類似 FP-tree 的架構，使得在高利益項目集
探勘過程中，不需要多次的掃描資料庫，並加速探勘過程。 
三、文獻探討 
3.1頻繁項目集探勘之研究 
關聯法則探勘是各種資料探勘主要技術之一。Agrawal 等人[AIS93, AS94]首先簡介並處理
此一問題，其提出 Apriori 演算法來產生所有的關聯法則。關聯法則的生成可以分成兩個步驟
（一）找出所有的頻繁項目集（frequent itemset or large itemset）；（二）以頻繁項目集推導出關
聯法則。要推論出關聯法則通常要先得到頻繁項目集，因此，在第一個步驟得到所有的頻繁項
目集已成為關聯法則探勘中最重要的工作之一。 
4 
併此三條路徑並刪去低於鬥檻的{A}節點，可得到{D}的條件樹如圖 2b 所示，根據此條件樹可
得到頻繁二項目集及其支持度{BD:4}及{CD:3}。再由圖 2b 的 header table 之最下面{B}來建構
{BD}條件樹，如圖 2c 所示。根據圖 2c 可得到頻繁三項目集及其支持度{BCD:3}。至此所有{D}
的父集合已全部產生。拜訪完圖 1f 的 header table 後將可產生所有的頻繁項目集。樣式成長法
只需要掃描二次的資料庫，且不用產生候選集合。在記憶體可容納整個繁煩樣式樹的情況下，
是個十分有效率的資料探勘法，尤其在支持度很小的時候更是顯著。 
C
A
B
D
root
B(1)
A(1)
C(1)Header table
D(1)
 
=> 
C
A
B
D
root
B(1)
A(2)
C(2)Header table
D(1)
 
=>
C
A
B
D
root
B(1)
A(3)
C(3)Header table
D(1)
 
(a) {C, A, B, D} inserted  (b) {C, A} inserted (c) {C, A} inserted 
     
C
A
B
D
root
B(1)
B(1)A(3)
D(1)
C(4)Header table
D(1)
 
=> 
C
A
B
D
root
B(1) D(1)
B(1)B(1)A(3)
D(1)
C(4) A(1)Header table
D(1)
=>
C
A
B
D
root
B(1) D(1)
B(1)B(2)A(3)
D(2)
C(5) A(1)Header table
D(1)
(d) {C, B, D} inserted  (e) {A, B, D} inserted (f) {C, B, D} inserted 
圖 1: 建構 FP-tree 
B(1) D(1)
B(1)B(2)A(1)
D(2)
C(1) A(1)
D(1)
C(2)
 
=> 
 
=>
 
C
root
C(3)Header table
 
 
(a) Three paths contain “D”  (b) Conditional FP-tree of “D” (c) Conditional FP-tree of “BD”
圖 2: 條件 FP-tree 
=> 
6 
使用者需要得知一項目集的總利潤或總成本時，利益探勘正可有效解決此問題。給定一個利益
門檻值（minimal utility，minUtil），利益探勘的目的在於，找出所有高於利益門檻值的高利益項
目集(high utility itemsets，HUI)。 
表3: 一個範例交易資料庫，附帶每一項目的交易數量 
TID Transaction Count 
T01 {A, B, C, D, G, H} {1, 1, 1, 1, 1, 1}
T02 {A, C, E, F} {4, 3, 1, 2} 
T03 {A, C, E} {4, 3, 3} 
T04 {B, C, D, F} {4, 1, 2, 2} 
T05 {A, B, D} {3, 1, 2} 
T06 {B, C, D} {3, 2, 1} 
表4: 外部利益表 
Item A B C D E F G H
Profit ($) 3 2 1 3 5 2 8 4
Liu 等人[LLC05a, LLC05b]提出 two-phase algorithm 演算法並有效的降低後選項目集的個
數，進而探勘出所有的高利益項目集。Hu 及 Mojsilovic[HM07]建立特別的分割樹來快速獲得近
似的利益探勘結果。Li 等人[LYC08]提出了 Isolated Items Discarding Strategy (IIDS)的概念，並
結合其他分配額探勘或利益探勘演算法。IIDS 在每一次掃描資料庫時，找出對下一次掃描資料
庫無作用的項目，稱之為孤立項目。刪除孤立項目並不會影響利益探勘的正確性，更可壓低項
目集最大可能的利益值，類似向下封閉的特性，進一步降低候選項目集的個數，並應用 IIDS 發
展出兩個快速的演算法，FUM 及 DCG+法，提升了探勘的效能。另有研究者，結合傳統高頻探
勘與利益探勘，來探勘利益高頻項目集（utility-frequent itemsets）[YLC07, PLK07]。以及在資
料串流中的高利益項目集的研究[TCL06]。 
四、研究方法 
在新興的利益探勘議題上，少有研究運用樹狀結構來探勘，因此，本計畫整合類似 FP-tree
的樹狀結構到利益探勘之中，避免多次的掃描資料庫，提出一高效率利益探勘模型。現有的利
益探勘演算法，皆是以一層一層由下往上每掃描一次資料庫增加探勘的項目集的長度 1。除了
產生大量的候選集合外，更要多次掃描資料庫，影響探勘效能。而 FP-tree 的樹狀結構在傳統高
頻項目集的探勘上有著高效率的探勘特色，且這方面的研究是現今利益探勘上較缺乏的部份。 
直接將 FP-growth 套入利益探勘會發生問題無法正確工作，例如：有二筆交易{A:5, B:1, C:2}
及{A:1, B:2}，建立一個 3 個節點的類似 FP-tree 樹狀結構{A:6, B:3, C:2}，將會產生錯誤的探勘
結果。因為，FP-growth 以{C:2}為基底產生的條件樹{A:2}，將使得{AC}的利益值為 4，並非 7。
稍為修改 FP-growth，將其條件樹內的利益值保留原累加值，使得以{C:2}為基底產生的條件樹
成為{A:6}，所得到的{AC}利益值為 8，還是非正確值。 
修改後的 FP-growth 雖然會得到不正確的利益值，但此值只會高估不會低估，所有的高利益
項目集一定都在 FP-growth 所產生的結果中。因此，只要將此 FP-growth 所產生的項目集當成是
候選集合，再掃描一次資料庫即可得到正確的高利益項目集及其利益值。本計畫在建樹的過程
中利益值的計算以累加之方式計算，以保證所有被刪除的項目集及其超集合一定不會過門檻，
8 
 
圖 4: 不同最小利益門檻值間，執行時間比較 
表 5: 在不同門檻值之下，掃描資料庫的次數 
Method 
minUtil(%) TP FUM DCG+ Proposed 最長HUI長度 
0.04 14 14 14 3 14 
0.06 14 14 14 3 14 
0.08 14 12 12 3 12 
0.10 11 9 9 3 8 
0.12 11 7 7 3 7 
0.14 8 5 4 3 2 
0.16 8 4 3 3 1 
0.18 6 4 3 3 1 
0.20 4 3 2 3 1 
0.22 4 3 2 3 1 
六、參考文獻 
[AIS93] R. Agrawal, T. Imielinski, and A. Swami (May 1993), “Mining association rules between 
sets of items in large databases,” in Proc. 1993 ACM SIGMOD Intl. Conf. on Management 
of Data, Washington, D.C., pp. 207-216. 
[AS94] R. Agrawal and R. Srikant (Sep. 1994), “Fast algorithms for mining association rules,” in 
Proc. 20th Intl. Conf. on Very Large Data Bases, Santiago, Chile, pp. 487-499. 
[BH03] B. Barber and H. J. Hamilton (2003), “Extracting share frequent itemsets with infrequent 
subsets,” Data Mining and Knowledge Discovery, 7(2):153-185. 
[CHC97] C. L. Carter, H. J. Hamilton, and N. Cercone (Jun. 1997), “Share based measures for 
itemsets,” in Proc. 1st European Conf. on the Principles of Data Mining and Knowledge 
Discovery, pp. 14-24, Trondheim, Norway. 
[CHY96] M.-S. Chen, J. Han, and P. S. Yu (1996), “Data mining: An overview from a database 
perspective,” IEEE Trans. Knowledge Data Engineering, 8(6): 866-883.  
