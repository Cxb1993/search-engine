目    錄 
 
中文摘要 ............................................................................................................................................................................ I 
ABSTRACTION ............................................................................................................................................................ III 
一、 前言 ...................................................................................................................................................................... 1 
二、 研究目的 .............................................................................................................................................................. 1 
三、 文獻探討 .............................................................................................................................................................. 2 
四、 研究方法 .............................................................................................................................................................. 5 
五、 結果與討論 .......................................................................................................................................................... 9 
六、 參考文獻 .............................................................................................................................................................. 9 
 
 
- II - 
中文關鍵字: 
系統晶片、微處理器、記憶體、驗證、晶片、I/O 腳位、匯流排、匯流排訊號追蹤、功率消耗、
無失真、AMBA、即時、多重解析度、訊號抽象、減少追蹤資料量、cycle level、transaction level、
all signals、bus related signals、master related signals、branch/target filtering、differential approach、
signal encoding、壓縮率、除錯、效能分析。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
- IV - 
Key word: 
SOC、microprocessors、DSP、memory、verification、chip、I/O pin、bus、bus signals trace、
power consumption、lossless、AMBA、real time、multi-resolution、signals abstraction、trace 
reduction、cycle level、transaction level、all signals、bus related signals、master related signals、
branch/target filtering、differential approach、signal encoding、compression rate。 
 
 
- 2 - 
 
Fig. 1 Logic Analyzer verification flow 
 
在 1999 年，由 Motorola 公司與幾家電子大廠所領導的 IEEE-ISTO Nexus 5001 Forum 制
訂了動態除錯 (Dynamic Debug) 的相關標準[2]。所謂的動態除錯指的是在不停止微處
理器時脈下，提供系統發展者一個良好的系統晶片觀察能力。但是此一標準仍然面臨了
許多困難的設計挑戰，其中一個最主要的目標是如何不去破壞 (Non-Intrusively) 晶片原
本的結構與狀態而且不去降慢處理器的運算速度，仍然可以將微處理器執行單元的運作
過程予以補捉。 
為了達到較好的動態除錯機制，目前常用的方法為位址追蹤技術(Address Tracer)，此方
法在程式執行時將位址訊號動態擷取下來並存在記憶體單元中，再透過對外的裝置將位
址輸出以供使用者觀察硬體執行的流程進而達到除錯的功能。可是位址追蹤技術所面臨
的問題在於追蹤的資料量過於龐大，以追蹤一顆 32 位元 200 MHz 的微處理器為例，一
秒鐘就有 32 bits * 200MHz = 6400Mbit = 800MByte 的資料量，假設我們今天對該處理器
追蹤五分鐘，就會有高達 800MB * 5 * 60 = 240GB 的資料要儲存，以現今的儲存體技術
要儲存這麼龐大的資料仍然相當困難，所以如何將資料在輸入記憶體單元前做好適當的
壓縮就成為位址追蹤技術所要面臨的挑戰。  
綜合以上各種除錯環境所面臨的議題，歸納出目前單晶片系統除錯環境所要達到的幾個
需求。一. 除錯環境必須支援使用者足夠的觀察訊號來做除錯。二. 能在不停止系統的
前提下達到除錯的功能，也就是所謂的及時性。三. 提供使用者能對整個系統進行除錯
的能力，讓使用者能在複雜的設計中依照狀況迅速得到自己想要的資訊，進而快速的找
到問題的癥結點所在。為了達到上述的幾個目標，採用位址追蹤技術似乎是個不錯的方
向，可是一般的位址追蹤技術大都是針對單一微處理器做訊號追蹤，對於一整個系統的
除錯而言這樣的資訊似乎不夠。其次，在眾多的追蹤訊號中如何提供使用者真正想要知
道的訊號也是所面臨的挑戰之一。所以本研究的目的是希望能提供一個以單晶片系統為
背景的動態及時匯流排追蹤分析器以達到上述的目標。 
 
三、 文獻探討 
 Monitor-Based Test 
Monitor 的觀念除了應用在真實硬體上的除錯功能外，在 2004 年也有研究利用 Monitor
- 4 - 
 
Fig.3 PDATS Header byte structure 
 
另外在程式執行的流程中，如果多筆位址間差距為 4，我們便可以 repeat 欄位 1 表示重
複，重複次數則記錄在 Repetition Count 中。其他資訊像是 time stamp 的紀錄方式也同於
位址的差值法。 
PDATS 是一個較早被提出來的位址追蹤壓縮方法，針對了位址間的空間區域性做到壓縮
效果，屬於一個較為基本的壓縮格式，對於之後關於位址追蹤壓縮法的研究有很大的影
響力，也提供一個位址追蹤壓縮法的開端。但是，對於程式執行的另外一個特色時間區
域性(temporal locality)卻沒有有效的利用，透過差值法的方式能達到的資料簡化有限，
因此 PDATS 並沒有達到非常出色的壓縮率。 
 ARM ETM 
位於英國的 ARM (Advanced RISC Machine) 公司本身專注在發展嵌入式微處理器與其
週邊的矽智產 (Silicon Intellectual Property) 元件。該公司所發展的追蹤裝置為 ETM 
(Embedded Trace Macrocell)，可以用來追蹤嵌入式微處理器的位址與資料匯流排的追蹤
資料。在 ETM 裡有個獨特的設計，已經被 ARM 公司申請為美國專利 (1997 US 
Patent)，該專利的特點將在下文解說，下文的所有內容來自於該公司的專利申請書[8]。 
積體電路的外部連結接腳的個數是相當珍貴的資源，若接腳的數目越多會導致積體電路
的製造成本上昇。因此若能減少積體電路的接腳成本，將可以減少製造的成本。ARM 因
此針對 ETM 的追蹤匯流排的特點，提出分時多工 (Time Division Multiplexing) 的機
制，使得對外的接腳數目得以大幅的縮減。所謂的分時多工指的是將追蹤匯流排的運作
頻率取為微處理器的兩倍，因此原先匯流排的高位址部份可以先被傳出，緊接著在下一
個時脈再傳出低位址的部份。如此匯流排的寬度即可減少一半。換言之，所謂的分時多
工機制指的是，透過時脈頻率的加倍，來減少輸出的匯流排寬度。 
- 6 - 
 Signal Monitor 
由於訊號追蹤的資料量非常大，是否要記錄每個 cycle 匯流排上的所有訊號？本模組針
對此問題，提供了 event trigger、timing/signal abstraction 與 transaction state 等功能模組，
使得能有效的減少所要記錄的資料。 
 
Event Trigger module 
提供使用者設定欲追蹤訊號的時機。理論上，bus tracer 從系統開始執行起即開始追蹤匯
流排的訊號並傳到遠端主機上。然而，並不是每個 cycle 的訊號都是使用者所關心的。
因此 event trigger module 提供使用者設定要進行訊號追蹤的時機。如，使用者可設定在
位址匯流排的值為 0x0000-0130 時才開始進行訊號的追蹤。 
 
Signal/Timing Abstraction module  
提供使用者設定欲追蹤訊號的詳細程度。我們依據 Signals 將資料抽象成三個層次，分
別為 Signals Level、Bus Level 和 Master Level，接著再依據 Timing Abstraction 的 Cycle 
Level 和 Transaction Level 將整個系統分成五個模式，如 Fig. 5 所示。 
 
 
Fig. 5 Signal/timing abstraction and trace modes 
 
各個模式所追蹤的資料如下所示: 
Mode 1: 每個 cycle 下記錄完整的 85 個 bits 的訊號。 
Mode 2: 對於訊號分類而言，記錄完整的 85 個 bits 的訊號，但是因為 Timing 提升
到 Transaction 的層次，因此只有在發生 Bus 狀態改變的狀態下才記錄這
85 個 bits 的訊號。 
Mode 3: 透過 AMBA BTS 將 Bus Signal 編碼成 BTS 狀態表示，每個 cycle 把 BTS
狀態記錄，且只有再有意義的 State 記錄下 ADDR、ACS 和 DATA 的資料。
Mode 4: 從 Mode3 將追蹤的層次再提升，和 mode3 記錄最大的不同就是在於 BTS 
state，只有當 state 有變化時才會將 state 記錄。 
Mode 5: 最高層次的記錄方式，只有在 Master 發送 ADDR、ACS 和 DATA 的時候
才追蹤記錄。 
 
依不同的時間及訊號層次組合，會有不同的追蹤記錄量，Fig. 6 所示。使用者可以隨時
- 8 - 
 Trace Reduction 
Trace reduction 模組是利用資料壓縮技術將 signal monitor 模組所記錄的追蹤訊號做進一
步的壓縮簡化。因為不同的訊號種類有不同的特性，因為本研究提出三種方式來針對特
定的訊號進行資料壓縮。 
 
- Branch/target filtering 
程式在執行時，有所謂 locality 的特性，因此程式位址大多是連續位址(spatial locality)或
是反覆出現的位址(temporal locality)。根據此規則的變化，只需記錄程式跳躍(branch)及
目的地(target)位址，而連續位址則可以省略，因為連續位址可藉由軟體來還原得到。 
 
- Differential approach 
當資料變化沒有一定規則時，採用差值法只需記錄連續二筆資料的差值和一個表示正/
負數的位元，仍可以有效的減少資料記錄量。例：連續二筆 32 位元資料分別為：0x0250
與 0x0469，原始二筆資料記錄量為 64bits。若利用差值法：(0x469 – 0x250 = 0x219)，只
需記錄 0 (正數)及 1000011001(0x219)共 11bits，壓縮率為 [1 – (11/64)] x 100% ≈ 83%。 
 
- Signal encoding approach 
在一筆資料傳輸過程中，傳輸控制訊號是不會發生變化。如 Fig. 8 所示，在一筆 8-beat
的 burst 傳輸過程中，其傳輸控制訊號如：HBURST[2:0]、HWRITE、HSIZE[2:0]、
HPROT[3:0]、HMASTER[3:0]等訊號不會改變。因此，我們只需在開始傳輸時記錄一次
即可，其總資料量為 15bits。然而，這些傳輸控制訊號有一定的規格組合，因此我們使
用了訊號編碼方式來為這些訊號組合編碼。我們使用了 3bits 來編碼，共有 23=8 種情況。
因此每次只要記錄傳輸控制訊號。而這編碼不是固定的，可由使用者在軟體端自行定義。 
 
Fig. 8 Eight-beat incrementing burst (Source: ARM IHI 0011A page 3-15) 
 
 Data Packing 
本模組是將經過壓縮的訊號追蹤資料加以適當封裝(分割/組合)成數個固定長度的字
串，使得方便藉由外部傳輸裝置(如 printer port、USB 等)將資料傳回軟體端。 
 
