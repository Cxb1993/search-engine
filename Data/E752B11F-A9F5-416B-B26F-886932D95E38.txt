企業資訊系統評選策略 
 
 
1. 企業資訊系統評選策略文獻探討 
目前企業資訊系統所採用的評選策略分為財務性、社會科技與功能性三種評估觀點，表
一整理出這三種觀點的評估方法。財務觀點以量化的成本與收益為基礎進行系統評估，方
法包括 Net-Present-Value, Cost Benefit Analysis, Payback and Return on Investment 等。以
Net-Present-Value 為例，該方法針對系統導入所產生的現金流入與流出，提出一套估計的方
法並以當時的幣值為計算基準進行估算，支出的部分包含資本投資，例如硬體設備的部分。
當收益超過支出越高表示系統對企業越有利，系統導入的成功率越高。但是也有許多研究
指出，並不是系統導入的所有影響因素都可以量化，例如企業運作效率提升造成客戶滿意
度提高所產生的收益就很難量化。另外，系統導入的互補性投資也很難加以量化。 
表一 企業系統評選策略 
觀點 特色 方法 
財務性 以系統導入的成本與收益為基礎，扣
除成本後的收益越高，系統導入成功
率越高 
1. Cost Benefit Analysis [11] 
2. Net-Present-Value [2] 
3. Pay-back-period [9] 
4. Return on Investment [1] 
5. Internal Rate of Return [1]  
6. Accounting Rate of Return [11]
社會科技  企業系統視為組織的一部分，其中包
含複雜的社會、組織與政治等議題，
該觀點認為系統無法單純以客觀的角
度衡量。 
1. Hughes and Jones [5] 
2. Kefi [6] 
功能性 以科技任務適配度理論為基礎，企業
應該採用系統功能最能符合企業需求
的系統。 
1. Map [8] 
2. Accelerated SAP (ASAP) [3] 
資訊的內容不符合企業的需求。 
本研究從功能性評估的觀點，在任務科技適配度理論的基礎上提出一套資訊系統評選策
略，分成三個步驟：目標適配性分析、功能適配性分析與資料/輸出適配性分析(如圖一)。
首先進行目標適配性分析，其著重在企業領域的層次，例如採購、營業領域等。該步驟針
對企業想要評估的領域逐一評估系統是否能夠達成企業的目標。目前所提出的方法論昰以
目標導向的使用個案圖塑模企業與軟體的目標，根據這些文件進行評估。由於使用個案圖
已經昰軟體工程的標準塑模工具，企業與軟體供應商可以在現有文件的基礎上進行評估，
不需要額外的成本。如果評估的結果有絕對目標不符合，則企業會捨棄該系統，如果軟性
目標不符合，還是可以繼續進行下階段的評估。 
功能適配性分析著重在流程層次，分析系統所提供的流程是否符合企業的需求，其塑模
的工具使用活動圖、畫面與資料詞彙。活動圖昰 UML 的圖形之一，已經廣泛的應用在軟
體工程上。畫面與資料詞彙則從結構化到目前物件導向塑模一直被普遍使用。依據這些塑
模的資料，我們將流程以相鄰矩陣表示，包含活動、連接與前後置條件，其好處是可以簡
化複雜的流程比對程序，並以自動化的方式進行，將結果以圖形的方式呈現，讓評估者清
楚了解流程不適配的狀況。其不適配又區分成活動與流程不適配，活動不適配表示系統沒
有提供企業所需要的活動， 流程不適配則表示系統所提供的流程不符合企業的需求。功能
不適配發生的時候並不代表系統絕對無法滿足企業需求，因為目前的系統大都提供重設定
功能，可以依使用者需求調整功能，或是透過附加的方式補足企業的需求。適配性分析的
重點在於提供企業與軟體廠商一個溝通的平台，針對目前所呈現的不適配進行討論，讓雙
方的焦點集中在不適配的地方，有效率且系統性的評估系統功能是否符合企業需求。 
第三個步驟昰資料/輸出適配性分析，其著重在活動的層次。功能性分析只有進行流程
分析，流程中的活動則在這個步驟才進行分析，包含輸出適配性分析與資料適配性分析。
輸出適配性分析主要針對系統是否提供企業所需要的欄位，並進一步整理資料詞彙作為資
2. Case study 
本研究以一個實際案例驗證該方法論的可行性，A公司希望在導入系統前先評估系統功
能是否符合公司需求。本研究以其中一個候選系統SAP R3為例進行評估，評估標的昰SAP
的best practice J49: Procurement of Stock Material in Baseline Package (U.S.) V2.5。首先進行
目標適配性分析，由於篇幅的限制，本個案僅以採購系統進行評估，圖二昰A公司的採購
系統的目標導向使用個案圖，A公司在採購系統有四個絕對目標(正四方形)，兩個軟性目標
(斜四方形)。根據目標導向使用個案圖、使用個案描述與雙方的溝通結果，best practice J49
可以符合絕對目標的要求。但是不滿足application approval(軟性目標)，因為SAP不提供平行
簽核的功能。 
 
圖二.  A公司採購系統的目標導向使用個案圖 
第二個步驟是功能適配性評估，以活動圖、藍圖與資料詞彙進行塑模。A公司與Jˋ49
的採購流程活動圖如圖三、四，其中每一個活動都有藍圖與資料詞彙，圖中只示意性的標
第三個步驟是資料與輸出適配性分析，以採購單與收料單為例(如圖五)，A公司的採購
單有21個欄位，收料單有16個欄位，其中的5個欄位J49沒有提供，亦即發生輸出不適配。
接著建立完整的資料詞彙以利資料適配性分析的進行。依據資料詞彙的資訊，評估者可以
逐一的對欄位進行評估。本案例的不適配資訊整理如表三。 
A公司的採購單  A公司的收料單 
SAP的採購單 SAP的收料單 
圖五. 採購單與收料單藍圖 
 
 
 
 
 說明 
企業流程再造 1. A_PO:PurchaseO_DeliveryDate 
A公司同意軟體公司的建議，改造企業流程 
企業流程再造 2. A_GR:Receive_TestType 
A公司同意軟體公司的建議，改造企業流程 
附加新功能 3. A_GR:Receive_InvoiceDelay 
A公司要求系統廠商開發新功能以滿足需求 
附加新功能 4. A_GR:Receive_InvoiceDelayRe
ason 
A公司要求系統廠商開發新功能以滿足需求 
附加新功能 5. A_GR:Receive_Forfeit 
A公司要求系統廠商開發新功能以滿足需求 
Forfeit = Purchase price * Forfeit rate * Delay 
time 
資料不適配 
解決方案 
不適配 
說明 
企業流程再造 1. A_PO:PurchaseO_Staff 
A公司同意軟體公司的建議，改造企業流程 
附加新功能 2. A_PO:PurchaseO_ItemNo 
A公司要求系統廠商開發新功能以滿足需求 
企業流程再造 3. A_PO:PurchaseO_UnitPrice 
A公司同意軟體公司的建議，改造企業流程 
Journal of Information Systems Evaluation, 6(1), 2004. 
[7] S.C. Palvia, N.L. Chervany, An experimental investigation of factors influencing predicted 
success in DSS implementation, Information and Management 29(1), 1995, pp. 43-53. 
[8] C. Rolland, N. Prakash, Bridging the gap between organizational needs and ERP 
functionality, Requirements Engineering, 5(3), 2000, pp. 180-193. 
[9] P.G. Sassone, W.A. Schaffer, Cost Benefit Analysis, Academic Press, New York, 1978. 
[10] V. Serafeimidis, S. Smithson, Information systems evaluation in practice: a case study of 
organizational change, Journal of Information Technology 15(2), 2000, pp. 93–106. 
[11] C.J. Stefanou, A framework for the ex-ante evaluation of ERP software, European Journal of 
Information Systems 10(4), 2001, pp. 204–215.  
[12] K.Y. Tam, Capital budgeting in information systems development, Information & 
Management 23(6), 1992, pp. 345-357. 
多，這些交流活動對於學術研究是非常重要的，在此也感謝國科會的協助。 
 
 
AN EXTENDED MDA METHOD FOR USER INTERFACE 
MODELING AND TRANSFORMATION 
 
Wu, Jen-Her, Department of Information Management, National Sun Yat-sen University, 70 
Lien-Hai Road, Kaohsiung, 804, Taiwan, jhwu@mis.nsysu.edu.tw 
Shin, Shin-Shing, Department of Information Management, Mei-Ho Institute of Technology, 
Pingtung, 912, Taiwan, x3216@mail.meiho.edu.tw; Department of Information Management, 
National Sun Yat-sen University, 70 Lien-Hai Road, Kaohsiung, 804, Taiwan 
Chien, Juei-Lung, Department of Information Management, National Sun Yat-sen University, 70 
Lien-Hai Road, Kaohsiung, 804, Taiwan, frank.chien@msa.hinet.net 
Chao, William S., Department of Information Management, National Sun Yat-sen University, 70 
Lien-Hai Road, Kaohsiung, 804, Taiwan, chao@mail.nsysu.edu.tw 
Hsieh, Ming-Che, Department of Information Science and Management Systems, National Taitung 
University, 684 Sec.1, Chung-Hua Road, Taitung, 950, Taiwan, hmz@nttu.edu.tw 
 
Abstract 
This study presents a systematic methodology for MDA transformation that includes creating a platform 
independent model (PIM), transforming PIM into platform specific model (PSM), and transforming PSM 
into a Code model. The PIM is created first based on the use case, activity diagram and robustness diagram. 
The PIM is then transformed into a PSM based on three target platforms: Web-based user interface, Java, 
and relational database. The PSM is then transformed into a Code model based on three types of code: 
JavaServer Pages (JSP) 2.0, J2SE 1.5.0 and Oracle Database. With this methodology, systems can more 
easily and systematically be analyzed, designed, and generated and, thereby, increase system development 
productivity. 
Keywords: Model-Driven Architecture, Unified Modeling Language, Object-Oriented Technique, Robustness 
Analysis, User Interface. 
 
closer to the problem domain at hand than those offered by programming languages. However, the above 
advantages are based on the assumption of a transformation mechanism application among models. Many 
approaches have been proposed to address this issue. Sendall and Kozaczynski (2003) classified these 
approaches into three categories: (1) Direct model manipulation, (2) Intermediate representation, and (3) 
Transformation language support. 
In direct model manipulation, transformation logics are contained that can access source models and 
transform those into codes. The logics can be written as a series of APIs to handle model elements and 
properties such as get, create and update. For instance, the logics could simply be Java codes that access 
APIs provided by Java Metadata Interface (JMI). The other example in this category is Jamda (Czarnecki 
and Helsen, 2003), which provides a set of classes representing UML models and several APIs for 
manipulating those models. However Jamda’s work does not support the MOF standard which dominates 
this domain. The advantage is that developers can use their preferred language to write the transformation 
logics such as Java. This could reduce the difficulty and complexity of constructing transformation rules. On 
the other hand, APIs lack high-level abstractions for specifying transformations (Liu et al. 2005) and may 
limit the kinds of transformations that can be performed (Mens and Van Gorp, 2005). 
In intermediate representation, model transformations are performed through a standard intermediate form. 
Take the transformation from PIM to PSM as an example, a PIM model could be an input model and be 
transformed into a XMI (XML Meta data Interchange) document. The PSM model could then be generated 
according to the XMI document transformed from the PIM. Usually, the transformation is achieved using 
stand alone tools loosely coupled with modeling tools such as XSLT, which allows the manipulation of XML 
files to accomplish the transformation from the source to the target model. However, manual implementation 
of model transformation in XSLT quickly leads to a non-maintainable implementation because of the 
verbosity and poor readability of XMI and XSLT. The current XMI standard does not contain diagramming 
information. After a model is exported into a XMI document, all diagram information is lost (Weis et al. 
2003). 
The transformation language support uses a specific language to specify the model transformation. The most 
famous one in this category is the graph-transformation based approach, whose transformation rules consist 
of a left-hand side (LHS) and right-hand side (RHS) graph pattern. Once the LHS pattern of a transformation 
rule is matched in a source model, a rule is fired to replace that one using the RHS pattern in its place. 
Because current OMG graphical language such as MOF and UML provide a well-established foundation for 
defining PIM and PSM, the graph-transformation based approach seems to be a natural solution for 
specifying the transformation. It has even been considered the approach with the most potential (Sendall and 
Kozaczynski, 2003). This approach complies with the principle of divide-and-conquer. It decomposes 
complex transformation into several smaller parts that can be conquered individually and then reintegrated 
into a whole system. This approach increases the readability, modularity and maintainability of a 
transformation mechanism. The other advantage of this approach is the visualization using graphic 
transformation. On the visual notation basis, the PIM and PSM can be expressed in a visual way that could 
make developers more comfortable in using this approach. Several methodologies have been developed to 
provide this feature. For example, Agrawal et al (2003) developed a UML-based approach for specifying 
model transformations using a class diagram to represent the input and output transformation graph 
computation independent model (CIM) prior to the stage of PIM to model user requirements (Miller and 
Mukerji, 2003). CIM doesn't consider how a system is implemented and focuses on what the system is 
expected to do. CIM should be traceable to PIM and vice versa. 
Based on Kleppe et al’s framework, we draw an MDA architecture for 3-tier JSP applications, as shown in 
Figure 2. This architecture encompasses four levels: CIM, PIM, PSM and Code model. At the first level, 
CIM, three tools are used to analyze user requirements and produce preliminary objects including boundary, 
control and entity objects and communication bridges. At the second level, PIM, these objects can then be 
refined or enhanced into the object in the sequence diagram. Besides the boundary objects, control objects 
and entity objects in a robustness diagram correspond to boundary classes, object classes and entity classes in 
a sequence diagram in PIM, respectively. At the Third level, PSM, the MVC (model-view-controller) model 
is used as the fundamental system architecture. It separates the PSM into three distinct tiers: model, view and 
controller, so that modifications to one tier can be made with minimal impact on the others. The model 
dubbed relation schema is the domain-specific representation of the information on which the application 
operates. It contains a data model and domain logics which add meaning to the raw data. The view is termed 
widget class diagram which refers to how to render the model into user interfaces for interaction. The 
controller referred to as Java class diagram responds to the model and the view and invokes changes on those. 
Especially, these three tiers can be transformed from PIM plus JSP, database and Java technology. 
Further, the PSM can be transformed into real executable program namely Code model. In this study, the 
widget class diagram can be transformed into JSP code. The Java class diagram can be transformed into 
Servlet. The relation schema can be transformed into JavaBean and database schema. Database schema is 
used to generate a database for JavaBean Code. JavaBean acts as an interface to access and store data in the 
database for Servlet.   
actors and their related activities, needed information, flow controls and transitions. This is helpful for 
discovering objects and process flows and furnishes a basis for performing robustness analysis. For instance, 
a note of an activity could be considered as a user interface namely a boundary object. Data in the note can 
be regarded as attributes of the boundary object. An activity could be deemed as a control object and so forth. 
The transformation rules from activity diagram to robustness diagram are summarized as in Table 1. This 
construction procedure is not only providing an aid in establishing a robustness diagram, but also useful in 
clarifying user requirements. 
 
Rule Activity 
Diagram 
Mapping Robustness Diagram 
1. Activity  Æ 1. Activities could be transformed into a control object. 
2. User behavior in an activity can be implemented by widgets.  These widgets 
could be transformed into attributes and operations of boundary objects. 
2. Note Æ 1. A note could be transformed into a boundary object. 
2. Data in a note could be transformed into attributes of the boundary object. 
3. While data in a note is stored in a database, entity objects with attributes could 
be generated from the data. Also, operations for retrieving and storing the data 
could be identified and delivered to the entity objects. 
4. If data in a note is retrieved from a database, an operation creating the note in a 
control object would be generated. 
3. Transition Æ 1. If transition invokes a control object to fire its action, the control object should 
contain an operation responding the invocation. 
2. If transition send data to an activity or receives data from an activity, the data 
would be transformed into attributes of a control object. 
Table 1. Mapping rules from an activity diagram to a robustness diagram. 
3.2 PIM 
The objective of PIM is to provide the formal function and structure specifications for systems without 
technical details. To achieve this end, two tasks must be performed: behaviour and structure modeling. The 
sequence diagram is the major modeling tool for behaviour modeling. However, for the user interface, the 
sequence diagram falls short in modeling the information about which UI widget triggers which operation, 
while this information is essential for programming. Therefore, we propose that each UI sequence diagram 
should be fraught with a UI state diagram to clearly specify the behaviour of UIs and widgets. The state 
diagram considers each UI as a state and widget as a sub-state, and reveals their state transitions including 
event, guard and action information. This concept brings the sequence diagram and the state diagram 
together, underpinning the PIM class diagram construction. It provides the designer with detailed 
specifications for deciding which UI widget could serve in a specific platform. 
3.2.1 Behaviour modeling 
The sequence diagram is a good tool for modeling system behaviour because it brings together objects, 
operations and sequences simultaneously. A sequence diagram can be built by transforming information 
from robustness and activity diagrams. The transformation rules were established as shown in Table 2.  
 
Rule Robustness/Activity Diagram Mapping PIM Sequence Diagram 
1.  A boundary object in a robustness diagram. Æ It could be a boundary object in a sequence diagram.
3.3 PSM 
At the PSM phase, a PIM is tailored to a specific platform. In this study, the technologies employed in the 
PSM for boundary, control and entity classes are JSP, Java and Oracle DB, respectively. This study focuses 
on the UI transformations from PIM through PSM to Code. The application and database transformation are 
beyond the scope of this study. 
3.3.1 PSM class diagram 
Many widgets have been developed to facilitate user interface design. Most designers don not develop UI 
components in house and use widgets available on the market. As noted in the previous section, a user 
interface is defined by a drawing, a boundary class and a UI state diagram. This is obviously insufficient for 
establishing a PSM class diagram including widget information. The PIM focuses on the user's initial 
requirements without technical information, while the PSM is forced not to ignore low level details for 
specific technologies. A UI function may be implemented using different widgets with the same function. It 
is by no means clear how to model user interfaces using UML. There is a lack of uniformity and 
standardisation in widget selection and integration (da Silva and Paton, 2003). It seems that there are no 
theoretically or even pragmatically well-developed guidelines to help software engineers tackle this problem 
successfully. 
We believe an interactive mechanism is useful to mitigate these problems. This mechanism should provide a 
UI presentation structure and allow users/designers to choose adequate widgets for achieving a function. To 
do so, we adopted the presentation model introduced by da Silva and Paton (2003). It contains a top-level 
container, Form, which is composed of other Containers that consist of UI components. A UI Component is 
specialised into three categories: StaticDisplay, ActionInvoker and InteractionControl. The StaticDisplay 
category is relevant at those UI components providing visual information, such as labels. The ActionInvoker 
category is relevant at those UI components receiving user triggers, such as a button. The InteractionControl 
category is relevant at those UI components receiving user options concerning navigation through the UI, 
such as a menu. With this premise, we construct representation models based on JSP for each boundary class 
and then integrate them into a PSM class diagram. Using the BookList (boundary class) and its drawing 
as an example (Figure 3), the representation model is constructed using four HTML components. 
For instance, the BookList (drawing) is transformed into the BookList (Form), which is aggregated 
with a CheckOut button (ActionInvoke) and a Table (StaticDisplay). The CheckOut button comes 
from the command button check out. The grid on the drawing generates the Table (StaticDisplay), 
which is aggregated with several Table Records (StaticDisplay). Hence, the BookList (boundary 
class) is modelled as shown in Appendix F. Similarly, the other boundary class, ShoppingCart, can 
also be transformed. 
2 Button 
 
 
3 Table 
 
 
Table 4. The transformation patterns from a PSM class diagram to JSP code. 
4 CONCLUSIONS AND FUTURE WORK 
This study presented a methodology that integrates the MDA, UML, robustness analysis and object-oriented 
programming concepts to specify user requirements, construct the PIM, and then transform it into user 
interface PSM and to user interface code based on the 3-tiers JSP architecture. This methodology includes 
four major levels: CIM, PIM, PSM, and JSP code modeling. A case with prototype system is used to 
demonstrate the feasibility of this methodology. 
The contribution of this paper is two-fold. First, the proposed methodology provides a complete procedure 
for developing a web-based 3-tiers JSP application including CIM modeling, PIM modeling, and PIM to UI 
PSM and to UI code transformations. These results provide a greater insight for understanding and reducing 
the gap among PIM, UI PSM, and UI code. Second, the proposed methodology provides a mechanism to 
automate the transformation among PIM to UI code and the communication bridge between UI code and 
application code to increase the system development efficiency. 
With this methodology, the web-based, 3-tier JSP applications can more easily and systematically be 
analyzed, designed, and generated. This work is the beginning of a line of MDA transformation methodology. 
Future research directions are abundant. For instance, a complete transformation methodology which 
