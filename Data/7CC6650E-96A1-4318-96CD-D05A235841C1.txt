 1 
 
行政院國家科學委員會補助專題研究計畫 
█成果報告   
□期中進度報告 
 
動態簡潔資料結構 
 
計畫類別：█個別型計畫   □整合型計畫 
計畫編號：98-2221-E-002-079-MY3 
執行期間：2009 年 8 月 1 日至 2012 年 7 月 31 日 
 
執行機構及系所：國立台灣大學資訊工程學系 
 
計畫主持人：呂學一 
共同主持人： 
計畫參與人員： 
 
 
 
成果報告類型(依經費核定清單規定繳交)：□精簡報告  █完整報告 
 
本計畫除繳交成果報告外，另須繳交以下出國心得報告： 
□赴國外出差或研習心得報告 
□赴大陸地區出差或研習心得報告 
□出席國際學術會議心得報告 
□國際合作研究計畫國外研究報告 
 
 
處理方式：除列管計畫及下列情形者外，得立即公開查詢 
            □涉及專利或其他智慧財產權，□一年□二年後可公開查詢 
 
中華民國 101年 10月 27日 
 
 3 
 
感謝國科會工程處的經費支持，讓我可以專心鑽研演算法一些有趣的題目 
在這個三年計畫的支持之下，透過對於動態資料結構與簡潔資料結構的研究，我在三個題目上獲得不
錯的研究成果，論文分別發表在 SIAM Journal on Discrete Math (是關於平面網路上面 routing table 的設
計問題)，COCOON 2011（是關於 planar graph 上面的 shortest cycle 的問題），與 SODA 2012。在前兩
次的期中精簡報告中，我們已經說明了前兩個題目的研究成果。在這份第三年的成果報告中, 我們就
針對第三個研究成果加以說明。這個成果的 conference version 因為有頁數的限制, 所以無法詳述所有
的內容，完整的內容請見後面的 full version。當中對於研究的題目、研究的目的、文獻的探討以及所
獲得之研究成果的重要性都有清楚的報告。 
2 Framework of our proof
Unless clearly specified otherwise, all graphs throughout the paper are simple. Let |S| be the car-
dinality of set S. Let V (G) consist of the nodes in graph G. Let H be a subgraph of G. Let NH(v)
consist of the neighbors in H of node v in G. Therefore, NH(v) = NG(v) ∩ V (H). Let G[H] be the
subgraph of G induced by V (H). Subgraphs H and H ′ of graph G are adjacent in G if some node of
H and some node of H ′ are adjacent in G. Subgraphs H and H ′ of graph G are separate in G if H
and H ′ are disjoint and not adjacent in G. For any set S of nodes, let G \ S = G[V (G) \ S].
Let C be a hole of G. A node x ∈ V (G) \ V (C) is a major node [6] of C in G if at least three
nodes in NC(x) are independent in G. Let MG(C) consist of the major nodes of C in G. For any node
x ∈ V (G)\V (C) that is adjacent to C in G, one can verify that x is not a major node of C in G if and
only if (1) G[NC(x)] has exactly one connected component, which has at most four nodes or (2)
G[NC(x)] has exactly two connected components, each of which has at most two nodes. Let N iG(C)
with 1 ≤ i ≤ 4 consist of the nodes x ∈ V (G) \ V (C) that are adjacent to C such that G[NC(x)] has
exactly one connected component, which has i nodes. Let N i, jG (C) with 1 ≤ i ≤ j ≤ 2 consist of
the nodes x ∈ V (G) \ V (C) that are adjacent to C such that G[NC(x)] has exactly two connected
components, one of which has i nodes and the other of which has j nodes. Therefore, for each
hole C of G, the nodes adjacent to C in G can be partitioned into the following eight disjoint sets:
N1G(C), N
2
G(C), N
3
G(C), N
4
G(C), N
1,1
G (C), N
1,2
G (C), N
2,2
G (C), and MG(C).
We say that (H, u1, u2, u3) is a quadruple of graph G if H is an induced subgraph of G with{u1, u2, u3} ⊆ V (H). Hole C of G is clean if MG(C) = N2,2G (C) = ∅. A triple (u1, u2, u3) of nodes is
a tracker of hole C if (u1, u2, u3) is a path of C . Quadruple (H, u1, u2, u3) of G is tracking if H has a
clean shortest even hole C such that (u1, u2, u3) is a tracker of C . Below is a property of a set Q of
quadruples of graph G:
Property 1. Graph G has even holes if and only if set Q contains tracking quadruples of G.
The subgraph of G induced by four distinct nodes b1, . . . , b4 is a diamond [17, 28] of G if
G[{b1, . . . , b4}] consists of a four-node cycle (b1, . . . , b4) and an edge (b2, b4). An induced subgraph
of G is a beetle of G if it consists of (1) a diamond induced by a sequence b1, . . . , b4 of four nodes
and (2) an induced tree T with three leaves b1, b2, and b3 such that T \ {b1, b2, b3} and b4 are
separate in G. One can verify that a graph has even holes if it has beetles.
Lemma 2.1. It takes O(m2n7) time to complete either one of the following tasks for any n-node m-edge
graph G. Task 1: Ensuring that G has even holes. Task 2: (a) Ensuring that G has no beetles and (b)
obtaining a set Q of O(mn3) quadruples of G that satisfies Property 1.
Lemma 2.2. Given (a) an n-node m-edge graph G that has no beetles and (b) a set Q of quadruples
of G that satisfies Property 1, it takes O(mn3 · |Q|) time to determine whether G has even holes.
Proof of Theorem 1.1. We apply Lemma 2.1 on the input n-node m-edge graph G in O(m2n7) time.
If G is ensured to have even holes, then the theorem is proved. Otherwise, G has no beetles and we
have a setQ of O(mn3) quadruples of G that satisfies Property 1. By Lemma 2.2, one can determine
whether G has even holes in time O(mn3 · |Q|) = O(m2n6). The theorem is proved. 
3 The cleaning phase
This section proves Lemma 2.1. The idea is to generate a set of quadruples of G such that one of
them is a tracking quadruple. Specifically, after determining whether G has beetles, we construct
polynomially many node sets according to the structure of a shortest even hole C . One of the sets S
contains all the “bad nodes” MG(C)∪N2,2G (C) and S is disjoint from C . By removing S from G there
5
a shortest even hole of G. One can verify that if node set S satisfies MG(C) ∪ N2,2G (C) ⊆ S ⊆ V (G)
and V (C)∩ S =∅, then C is a clean hole of G \ S.
Case 1: MG(C) ⊆ NG(u2) holds for some node u2 of C . Let u1 and u3 be the neighbors of u2 in
C . By {u1, u3} ⊆ V (C) and MG(C)∩ V (C) =∅, we have MG(C)⊆ NG(u2) \ {u1, u3}. By Lemma 3.3,
MG(C)∪N2,2G (C)⊆ S1 holds for edges (v1, v2) and (u1, u2) of G and node u3 of G. By the choices of
u1 and u3, we have (NC(u2) \ {u1, u3})∩ V (C) = ∅. Since C is an even hole of G and (v1, v2) is an
edge of C , we have NG(v1) ∩ NG(v2) ∩ V (C) = ∅. Therefore, S1 ∩ V (C) = ∅. Let H = G \ S1. We
have that (a) (H, u1, u2, u3) is a quadruple of G, (b) C is a clean even hole of H, and (c) (u1, u2, u3)
is a path of C which implies that (u1, u2, u3) is a tracker of C . Therefore (H, u1, u2, u3) is a tracking
quadruple of G in Q1.
Case 2: MG(C) 6⊆ NG(u) holds for all nodes u of C . By Lemma 3.4, G[MG(C)] is a clique of
G. Let K be a maximal clique of G with MG(C) ⊆ V (K). By Lemma 3.3, MG(C) ∪ N2,2G (C) ⊆ S2
holds for edges (u1, u2) of G. We have V (K) ∩ V (C) = ∅, since otherwise by MG(C) ∩ V (C) = ∅,
each node u in V (K)∩ V (C) would have MG(C) ⊆ V (K) \ {u} ⊆ NG(u), a contradiction. It follows
from (NG(u1) ∩ NG(u2)) ∩ V (C) = ∅ that S2 ∩ V (C) = ∅. Let H = G \ S2. Let u3 be the neighbor
of u2 in C other than u1. We know that (a) (H, u1, u2, u3) is a quadruple of G, (b) C is a clean hole
of H, and (c) (u1, u2, u3) is a path of C which implies that (u1, u2, u3) is a tracker of C . Therefore
(H, u1, u2, u3) is a tracking quadruple of G in Q2. The lemma is proved. 
The rest of the section proves Lemma 3.4. Let int(P) of path P be P \ {u, v}, where u and v are
the endpoints of P. For each hole C of graph G, there are two orders for the nodes of C around C .
Let an arbitrary but fixed one of the two orders be the clockwise order of nodes around C . For any
two distinct nodes u1 and u2 of C , let C(u1, u2) be the path of C from u1 to u2 in clockwise order
around C . An ordered pair 〈u1, u2〉 of two adjacent nodes u1 and u2 in C is a gate [6] of C in graph
G for an ordered pair 〈x1, x2〉 of two distinct nodes x1 and x2 in MG(C) if the following conditions
hold:
Condition G1: C(u1, u2) equals edge (u1, u2).
Condition G2: G contains edges (u1, x2) and (u2, x1).
Condition G3: G contains at least one of edges (u1, x1) and (u2, x2).
Condition G4: There is a node u3 in int(C(u2, u1)) such that x1 (respectively, x2) is not adjacent to
int(C(u2, u3)) (respectively, int(C(u3, u1))) in G.
We need the following two lemmas to prove Lemma 3.4.
Lemma 3.5 (Chudnovsky et al. [6, Lemmas 2.3 and 2.4]). The following statements hold for any
shortest even hole C of a graph G that has no 4-holes.
1. If x1 and x2 are two distinct nodes of MG(C) that are not adjacent in G, then G has a gate of C
for 〈x1, x2〉.
2. If x1, x2, and x3 are three distinct nodes of MG(C) such that G[{x1, x2, x3}] has at most one
edge, then {x1, x2, x3} ⊆ NG(u) holds for some node u of C.
Lemma 3.6. Let C be a shortest even hole of a graph G that has no 4-holes. If x1, x2, and x3 are three
distinct nodes of MG(C) such that G[{x1, x2, x3}] has at most two edges, then {x1, x2, x3} ⊆ NG(u)
holds for some node u of C.
Proof. By Lemma 3.5(2), it suffices to prove the lemma for the case that G[{x1, x2, x3}] has exactly
two edges, say, (x1, x3) and (x2, x3). Since x1 and x2 are not adjacent in G, Lemma 3.5(1) ensures
that G has a gate 〈u1, u2〉 of C for 〈x1, x2〉. By Conditions G2 and G3 of gate 〈u1, u2〉, NG(x1) ∩
NG(x2)∩V (C) 6=∅. Let u be an arbitrary node in NG(x1)∩NG(x2)∩V (C). We know that u is adjacent
to x3 in G, since otherwise (x1, u, x2, x3) would be a 4-hole of G, a contradiction. Therefore, u is a
node of C in NG(x1)∩ NG(x2)∩ NG(x3). The lemma is proved. 
7
Lemma 4.1. Given (a) an n-node m-edge graph G having no beetles and (b) a quadruple (H, u1, u2, u3)
of G, it takes O(mn3) time to complete one of the following three tasks. Task 1: Ensuring that G has
even holes. Task 2: Ensuring that (H, u1, u2, u3) is not a tracking quadruple of G. Task 3: Obtaining
an O(n)-node O(m)-edge graph H ′ that satisfies the following conditions.
Condition S1: H ′ has no star-cuts.
Condition S2: If H ′ has even holes, then H has even holes.
Condition S3: If H ′ has no even holes, then (H, u1, u2, u3) is not a tracking quadruple of G.
Lemma 4.2. Given an n-node m-edge graph H that has no star-cuts, it takes O(mn3) time to determine
whether H has even holes.
We first prove Lemma 2.2 using Lemmas 4.1 and 4.2.
Proof of Lemma 2.2. We first apply Lemma 4.1 on each quadruple ofQ in overall O(mn3 · |Q|) time.
If G is ensured to have even holes via Task 1 for some quadruple ofQ, then the lemma is proved. Let
H consist of the graphs H ′ obtained from the quadruples (H, u1, u2, u3) of Q via Task 3. IfH =∅,
then Task 2 ensures that Q has no tracking quadruples. By Property 1 of Q, G has no even holes,
and the lemma is proved. It remains to consider the case thatH 6=∅. By Condition S1, each graph
H ′ of H has O(n) nodes and O(m) edges and has no star-cuts. By Condition S2, if a graph H ′ of
H has even holes, then G has even holes since the induced subgraph H of G has. By Condition S3,
if all graphs H ′ of H have no even holes, then the given Q has no tracking quadruples, which
follows from Property 1 of Q that G has no even holes. In summary, H is a non-empty set of star-
cut-free graphs such that H contains a graph that has even holes if and only if G has even holes.
By Lemma 4.2, whetherH contains a graph that has even holes can be determined in overall time
O(mn3 · |H |) = O(mn3 · |Q|). The lemma is proved. 
The rest of the section proves Lemmas 4.1 and 4.2.
4.1 Star-cuts
This subsection proves Lemma 4.1. The main problem of decomposing a star-cut is that the ex-
istence of even holes may not be preserved during the decompositions. However, a clean even
hole will remain intact (see Lemma 4.3 and proof of Lemma 4.1). Another problem is that even if
we successfully decompose a star-cut, the whole decomposition process may take too much time,
since the number of small graphs constructed may be exponentially large. Conforti et al. [17,
Lemma 3.18] resolved the problem by refining the blocks. This guarantees that the total number of
small graphs constructed is polynomial. While this is a solution, some side effects are introduced.
First, it becomes much harder to prove that a small graph preserves clean even holes. Second, after
the decomposition, instead of producing one graph, a whole family of graphs are generated, and
this significantly increases the overall time complexity of the decomposition phase. In fact, all the
decomposition-based algorithms using star-cuts suffer from this problem. We overcome this prob-
lem by using trackers. During the decomposition, we decide the position of a clean shortest even
hole C by a tracker of C (see Lemma 4.4). Therefore we can apply the remaining decomposition
procedure on a specific small graph and discard all the others.
Node x dominates [17] node y in graph H if x 6= y and NH[y] ⊆ NH[x]. Node y is dominated
in H if some node of H dominates y in H. A star-cut S of graph H is full if S = NH[s] holds for some
node s of S. Star-cuts are hard to find and there are no known polynomial-time algorithms2. By
removing all the dominated nodes, star-cuts become full star-cuts (see Lemma 4.5). Full star-cuts
can be detected in O(mn) time in an n-node m-edge graph. We need the following three lemmas.
2Conforti et al. [17, before Definition 1.10].
9
H ′ has no star-cuts. Condition S1 holds. Condition S2 follows from Condition D2 of Lemma 4.3.
Condition S3 follows from Condition D3 of Lemma 4.3. Therefore, Task 3 is indeed completed.
Case 2: Step 2 outputs that G has even holes. Let P1 be a shortest path between s1 and s2 in
H[V (B1) ∪ {s1, s2}]. Let P2 be a shortest path between s1 and s2 in H[V (B2) ∪ {s1, s2}]. One can
verify that at least one of the three cycles of graph P1 ∪ P2 ∪ {(s, s1), (s, s2)} is an even hole of H,
implying that G has even holes. Therefore, Task 1 is indeed completed. Case 3: Step 3 outputs that
Q0 is not a tracking quadruple of G. By definitions of Steps 2 and 3, both Conditions B1 and B2 of
Lemma 4.4 do not hold. Lemma 4.4 and the above claim ensure that Q0 is not a tracking quadruple
of G. Therefore, Task 2 is indeed completed.
By Condition D2 of Lemma 4.3, Step 1 does not increase the number of nodes of H. If Step 3
updates H, the number of nodes in H is decreased by at least one since S is a cut. Therefore,
the loop has O(n) iterations. By Lemma 4.3 and the fact that detecting full star-cuts in H ′ takes
O(mn) time, Step 1 takes O(mn2) time. Step 2 takes O(mn2) time: For each of the O(n2) pairs of
nonadjacent nodes s1 and s2 in S, it takes O(m) time to determine whether they have two distinct
common neighboring connected components of H \ S. Step 3 takes O(m) time. Therefore, the
overall running time is O(mn3). The lemma is proved. 
The rest of the subsection proves Lemmas 4.3 and 4.4.
4.1.1 Proving Lemma 4.3
We need the following two lemmas to prove Lemma 4.8, which is used by the proof of Lemma 4.3.
Lemma 4.6 (Chudnovsky et al. [6, Lemma 2.2]). Let C be a shortest even hole of graph G. If v is a
major node of C in G, then |NC(v)| is even.
Lemma 4.7. If C is a shortest even hole of a graph G that has no beetles, then each node of V (G)\V (C)
that is adjacent to C in G belongs to exactly one of the following disjoint sets: N1,1G (C), N
2,2
G (C), N
1
G(C),
N2G(C), N
3
G(C), and MG(C).
Proof. Let x be a node of V (G)\V (C) that is adjacent to C in G. Assume that x is not in MG(C). We
prove that x is in one of the other five sets. Since x is not a major node of C , any independent set in
G[NC(x)] has size at most 2. Thus, one of the following conditions holds. Condition 1: G[NC(x)]
has exactly one connected component, which has at most four nodes. Condition 2: G[NC(x)] has
exactly two connected components, each of which has at most two nodes. If Condition 1 holds,
then x is in one of the sets N iG(C) for 1 ≤ i ≤ 4. If |NC(v)| = 4, then G[C ∪ {x}] is a beetle in G,
a contradiction. Thus, x is in one of the following sets: N1G(C), N
2
G(C), and N
3
G(C). If Condition 2
holds, then x is in one of the following sets: N1,1G (C), N
1,2
G (C), and N
2,2
G (C). If x is in N
1,2
G (C), let
the nodes NC(x) = {u1, u2, u3} form the order of u1, u2, u3 in clockwise order around C . One of
the induced cycles G[{x} ∪ C(u1, u2)], G[{x} ∪ C(u2, u3)], and G[{x} ∪ C(u3, u1)] is an even hole
shorter than C , a contradiction. The lemma is proved. 
Lemma 4.8. Let C be a clean shortest even hole of a graph G that has no beetles. If x is a node of
V (G) \ V (C) that dominates a node v on C, then G[C ∪ {x} \ {v}] is also a clean shortest even hole of
G.
Proof. Let C ′ = G[C ∪ {x} \ {v}] where u, w are the neighbors of v on C . First we show that C ′ is
a shortest even hole of G. Since C is clean in G, MG(C) = ∅; since x dominates v and |NC(v)| = 2,
C[NC(x)] contains a connected component of size at least 3. By Lemma 4.7, x belongs to N3G(C).
This implies that (u, x , w) is a path in G and x has no other neighbors in C \ {v}. Thus, C ′ is a
shortest even hole of G.
11
of G, there is a clean shortest even hole C in G such that (u1, u2, u3) is a tracker of C . Since S is a
full star-cut, S = NH[s] holds for some node s in S.
First we prove that either Condition B1 holds, or the following claim is true: There is a unique
connected component B of H \ S that intersects C, and |S ∩ V (C)| ≤ 3. If s is on C , since s and the
neighbors of s in C form a path on C , i.e., C[S ∩ V (C)] is a path on C , there is a unique connected
component B of H \ S that intersects C . Since S = NH[s] and s ∈ S ∩ V (C), we have |S ∩ V (C)| ≤ 3.
If s is not on C , we consider the following two cases. Case 1: There are at least two connected
components of H \ S that intersect C . Therefore S ∩ V (C) has at least two components. Since C is
clean, MH(C) = N
2,2
H (C) =∅. By Lemma 4.7 and the fact that S∩V (C) has at least two components,
node s is in N1,1H (C). Let s1 and s2 be the two nodes in NC(s), and let B1, B2 be the two connected
components of H \ S that intersect C . Then there are two distinct nodes s1 and s2 of S and two
distinct connected components B1 and B2 of H \ S such that (a) s1 and s2 are not adjacent in H
and (b) both s1 and s2 are adjacent to both B1 and B2 in H. Therefore Condition B1 holds. Case 2:
There are no connected components of H \ S that intersect C . Therefore V (C) ⊆ S = NH[s]. Since
C is clean, MH(C) = N
2,2
H (C) = ∅. Since S ∩ V (C) has only one component, by Lemma 4.7 node s
is in one of the following sets: N1H(C), N
2
H(C), and N
3
H(C). We have |V (C)| ≤ 3, which contradicts
to the fact that C is a hole. Therefore there is a unique connected component B of H \ S that
intersects C . By Lemma 4.7, node s is in one of the following sets: N1H(C), N
2
H(C), and N
3
H(C). Thus|S ∩ V (C)| ≤ 3. Now the claim follows, which implies that C[S ∩ V (C)] has only one component,
and B is the unique connected component of H \ S such that V (C)⊆ V (B)∪ S.
To prove the lemma, we consider the following two cases. Case 1: {u1, u2, u3} ⊆ S. By{u1, u2, u3} ⊆ S ∩ V (C) and (u1, u2, u3) is a path of C , the above claim ensures that there is a
unique connected component B of H \ S such that V (C) ⊆ V (B) ∪ S, and S ∩ V (C) = {u1, u2, u3}.
Consider the neighbors of u1 and u3 on C other than u2, i.e., N = NC(u1) ∪ NC(u3) \ {u2}. Since
S ∩ V (C) = {u1, u2, u3}, N ∩ S = ∅; it follows that N ⊆ V (B), and both u1 and u3 are adjacent
to B in H. If there is another connected component B′ of H \ S other than B such that both u1
and u3 are adjacent to B
′ in H, then let s1 = u1, s2 = u3, B1 = B, and B2 = B′. There are two
distinct nodes s1 and s2 of S and two distinct connected components B1 and B2 of H \ S such that
(a) s1 and s2 are not adjacent in H and (b) both s1 and s2 are adjacent to both B1 and B2 in H.
Therefore Condition B1 holds. Otherwise B is the unique connected component of H \ S such that
both u1 and u3 are adjacent to B in H, and Condition B2(a) holds. Case 2: {u1, u2, u3} 6⊆ S. By the
above claim, let B be the unique connected component of H \ S such that V (C) ⊆ V (B)∪ S. Since
{u1, u2, u3} ⊆ V (C), {u1, u2, u3} ⊆ V (B) ∪ S. Assume there is another connected component B′ of
H \ S other than B such that {u1, u2, u3} ⊆ V (B′)∪ S. Since (V (B)∪ S)∩ (V (B′)∪ S) = S, we have{u1, u2, u3} ⊆ S, a contradiction. Therefore B is the unique connected component of H \S such that{u1, u2, u3} ⊆ V (B)∪ S. Condition B2(b) holds.
If Condition B2 holds, we verify that (H[V (B)∪S], u1, u2, u3) is a tracking quadruple of G. Since
V (C) ⊆ V (B) ∪ S, H[V (B) ∪ S] has a clean shortest even hole C . Also (u1, u2, u3) is a path of C ,
which implies that (u1, u2, u3) is a tracker of C . This proves that (H[V (B)∪ S], u1, u2, u3) is indeed
a tracking quadruple of G. The lemma is proved. 
4.2 2-joins
This subsection proves Lemma 4.2. A disjoint partition (V1, V2) of the nodes of graph H is a non-path
2-join [3, 39] of H with link sets (V1,1, V1,2, V2,1, V2,2) if the following conditions hold.4
Condition J1: |V1| ≥ 3 and |V2| ≥ 3.
4A disjoint partition (V1, V2) with link sets (V1,1, V1,2, V2,1, V2,2) satisfying Conditions J1 to J3 is called a 2-join, which
will not be used in this paper.
13
When decomposing 2-joins using blocks, if we find a 2-join which is already in the form of a
block, then the decomposition process may not stop. This is the main reason why we use non-path
2-joins.
Lemma 4.11 (Charbit et al. [3]). Given an n-node m-edge graph H, it takes O(mn2) time to complete
one of the following tasks. Task 1: Ensuring that H has no non-path 2-joins. Task 2: Obtaining a
non-path 2-join of H.
Lemma 4.12 (Conforti et al. [17], da Silva et al. [21, Theorem 10.10], Trotignon et al. [39, Lem-
mas 3.2 and 3.8]). If (V1, V2) is a non-path 2-join of a graph H having no 4-holes and star-cuts, then
(V1, V2) is a connected non-path 2-join. For any induced paths P1 and P2 as ensured by Condition J5,
blocks H1 and H2 of (V1, V2) for P1 and P2 satisfy the following conditions.
Condition T1: Both H1 and H2 have no star-cuts.
Condition T2: H has no even holes if and only if both H1 and H2 have no even holes.
Condition T3: |H1| ≥ 4 and |H2| ≥ 4.
It remains to prove Lemma 4.10 using Lemmas 4.11 and 4.12.
Proof of Lemma 4.10. Let H0 be the initial given graph. We first determine whether H0 has 4-holes
in O(n4) time. If H0 is ensured to have 4-holes, then the lemma is proved by completing Task 1.
Therefore we assume H0 has no 4-holes in the following proof. Let H = H0. We construct a table
by computing whether K has even holes to each graph K with at most 20 edges in O(1) time. And
we iteratively update H by the following steps until a graph H ′ is outputted.
Step 1: Repeat the following step if there exists a connected component B of H satisfying |E(B)| ≤
20: Determine whether B has even holes using the table constructed above; if B has even
holes, then complete Task 1 by outputting that H has even holes; otherwise remove B from
H. If there are no connected components B of H satisfying |E(B)| ≤ 20, proceed to Step 2.
Step 2: Apply Lemma 4.11 on the current H. If H has no non-path 2-joins, then complete Task 2 by
outputting H. Otherwise, let (V1, V2) be a non-path 2-join of H with link sets (V1,1, V1,2, V2,1, V2,2).
For each i ∈ {1,2}, let Pi be an induced path of H[Vi] between a node of Vi,1 and a node of
Vi,2 such that V (int(Pi)) ⊆ Vi \ (Vi,1 ∪ Vi,2). Replace H with the disjoint union of the blocks
H1 and H2 of (V1, V2) for P1 and P2 and proceed to the next iteration.
By definition of the above procedure, the outputted graph has no non-path 2-join. In Step 2 the
blocks are well-defined, since by Lemma 4.12 any non-path 2-join (V1, V2) of H is a connected non-
path 2-join. First we show that each intermediate H throughout the loop satisfies the following
claim: Each update to H, either in Step 1 or Step 2, does not affect the conditions that (1) H has no
star-cuts and (2) H has even holes if and only if H0 has even holes. If H is updated in Step 1, then Con-
dition (1) follows from the fact that B is an induced subgraph of H and Condition (2) follows from
definition of Step 1 that B has no even holes. If H is updated in Step 2, then Condition (1) follows
from Condition T1 of Lemma 4.12 and Condition (2) follows from Condition T2 of Lemma 4.12.
Therefore the claim follows.
We prove the correctness of the algorithm. Case 1: Step 1 outputs H. By definition of Step 1,
H is ensured to have even holes. Therefore, Task 1 is indeed completed. Case 2: Step 2 outputs
H. H has no 4-holes since H0 does not. By the above claim, H has no star-cuts and H has even
holes if and only if H0 has even holes. By definition of Step 2, H has no non-path 2-joins. Since in
each iteration the number of edges is increased by at most 7 by definition of blocks, the number of
connected components is increased by at most one, and by Condition T3 of Lemma 4.12 the number
of edges in each connected component of H is at least 8, the number of connected components k in
15
[6] M. Chudnovsky, K.-i. Kawarabayashi, and P. Seymour. Detecting even holes. Journal of Graph
Theory, 48(2):85–111, 2005.
[7] M. Chudnovsky, N. Robertson, P. Seymour, and R. Thomas. The strong perfect graph theorem.
Annals of Mathematics, 164(1):51–229, 2006.
[8] M. Chudnovsky and P. Seymour. Testing for a theta. In Proceedings of the 18th Annual ACM-
SIAM Symposium on Discrete Algorithms, pages 595–598, 2007.
[9] M. Chudnovsky and P. Seymour. The three-in-a-tree problem. Combinatorica, 30(4):387–417,
2010.
[10] V. Chvátal. Star-cutsets and perfect graphs. Journal of Combinatorial Theory, Series B, 39:189–
199, 1985.
[11] V. Chvátal, J. Fonlupt, L. Sun, and A. Zemirline. Recognizing dart-free perfect graphs. SIAM
Journal on Computing, 31:1315–1338, 2002.
[12] V. Chvátal and N. Sbihi. Recognizing claw-free perfect graphs. Journal of Combinatorial
Theory, Series B, 44(2):154–176, 1988.
[13] M. Conforti, G. Cornuéjols, A. Kapoor, and K. Vuškovic´. Finding an even hole in a graph. In
Proceedings of the 38th Annual Symposium on Foundations of Computer Science, pages 480–
485, 1997.
[14] M. Conforti, G. Cornuéjols, A. Kapoor, and K. Vuškovic´. Even and odd holes in cap-free graphs.
Journal of Graph Theory, 30(4):289–308, 1999.
[15] M. Conforti, G. Cornuéjols, A. Kapoor, and K. Vuškovic´. Triangle-free graphs that are signable
without even holes. Journal of Graph Theory, 34(3):204–220, 2000.
[16] M. Conforti, G. Cornuéjols, A. Kapoor, and K. Vuškovic´. Even-hole-free graphs Part I: Decom-
position theorem. Journal of Graph Theory, 39(1):6–49, 2002.
[17] M. Conforti, G. Cornuéjols, A. Kapoor, and K. Vuškovic´. Even-hole-free graphs Part II: Recog-
nition algorithm. Journal of Graph Theory, 40(4):238–266, 2002.
[18] M. Conforti, G. Cornuéjols, X. Liu, K. Vuskovic, and G. Zambelli. Odd hole recognition in
graphs of bounded clique size. SIAM Journal on Discrete Mathematics, 20:42–48, 2006.
[19] A. A. da Silva, A. Silva, and C. L. Sales. Even-hole-free planar graphs have bounded treewidth.
Electronic Notes in Discrete Mathematics, 30:129–134, 2008.
[20] M. V. da Silva and K. Vuškovic´. Triangulated neighborhoods in even-hole-free graphs. Discrete
Mathematics, 307(9-10):1065–1073, 2007.
[21] M. V. da Silva and K. Vuškovic´. Decomposition of even-hole-free graphs with star cutsets and
2-joins. Submitted for publication, 2008.
[22] M. Farber. On diameters and radii of bridged graphs. Discrete Mathematics, 73(3):249–260,
1989.
[23] W.-L. Hsu. Recognizing planar perfect graphs. Journal of the ACM, 34(2):255–288, 1987.
[24] D. S. Johnson. The NP-completeness column. ACM Transactions on Algorithms, 1(1):160–176,
2005.
17
國科會補助計畫衍生研發成果推廣資料表
日期:2012/10/27
國科會補助計畫
計畫名稱: 動態簡潔資料結構
計畫主持人: 呂學一
計畫編號: 98-2221-E-002-079-MY3 學門領域: 計算機理論與演算法
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
