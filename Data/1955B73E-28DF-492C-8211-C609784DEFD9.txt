 1
行政院國家科學委員會專題研究計畫成果報告 
一種應用於 H.264 視訊編碼之可調適快速全域搜尋運動估測方法 
計畫編號：NSC 95-2221-E-194-053 
執行期限：95 年 8 月 1 日至 96 年 7 月 31 日 
主持人：柳金章   執行機構及單位名稱: 國立中正大學資訊工程學系 
計畫參與人員：陳軒盈，蕭涵徽，李偉僑，王詩婷，梁秉洋 
 
一、中文摘要 
 
在本研究中，我們提出一個應用於 H.264
視訊編碼之可調適快速全域搜尋運動估測方
法，其目的是加快 H.264 編碼端壓縮程序的速
度，但不會影響到編碼的結果。 
為了降低全域搜尋運動估測方法的計算
複雜度，在本研究中提出了兩個主要的技
術。第一個技術叫改良式資料再利用(MDR)，
此方法以減少 SAD 計算量來減少運動估測所
需的處理時間，其中不必要及重複的運動估
測計算量將大量減少。在所提的十字搜尋順
序，其搜尋順序將使 MV_COST 值的分佈與搜
尋順序呈線性關係，MV_COST 計算量將大量
地減少。第二個技術叫可調適的搜尋順序
(ASO)，此方法以減少 MV_COST 計算量及在
螺旋搜尋順序及十字搜尋順序之間調適性地
切換運動估測順序來減少運動估測所需的處
理時間。 
 
關鍵詞：H.264/AVC 視訊編碼、運動估測、
改良式資料再利用、十字搜尋順序、調適性
搜尋順序。 
 
Abstract 
 
In this study, an adaptive fast full search 
motion estimation (ME) algorithm for H.264 is 
proposed. The objective of the proposed 
algorithm is to speed up the H.264 video coding 
procedure performed at the encoder, without 
influencing the coding results. 
To reduce the computational complexity of 
the full search motion estimation algorithm, two 
main techniques are proposed in this study. First, 
the proposed modified data reusing (MDR) 
technique is used to speed up the ME processing 
time by reducing the SAD computations. In the 
proposed MDR technique, both the unnecessary 
and repeated SAD computations will be avoided 
or reduced. In the proposed rood search order 
(RSO), the search order can be determined in 
such a way that the distribution of the 
MV_COST values is “linearly-related” with the 
search order, i.e., the MV_COST value is a 
monotonically non-decreasing function of the 
search order so that the number of MV_COST 
computations will be greatly reduced. Second, 
the proposed adaptive search order (ASO) 
technique is used to speed up the ME processing 
time by reducing the MV_COST computations 
and adaptively switching the ME search order 
between the spiral search order and the 
proposed rood search order (RSO). 
 
Keywords: H.264/AVC video coding, motion 
estimation, modified data reusing, rood search 
order, adaptive search order. 
 
二、緣由與目的 
 
在網路傳送的多媒體資訊中，由於視訊的
資料量很大，但網路傳輸的頻寬非常有限，
為了要減少每一視訊所需的頻寬（或儲存空
間），在得到高重建品質的條件下，視訊需
要做編碼壓縮 [1-4]。最近幾年來許多影像／
視訊壓縮標準被制定出來，例如靜態影像標
準 JPEG 及 JPEG-2000 視訊會議標準 H.261、
動態影像（視訊）標準 MPEG-1、MPEG-2 
(H.262)、H.263、MPEG-4、H.26L及H.264/AVC 
[7-14]。其中動態影像標準 MPEG-1 [5]已成
為 CD-ROM 儲存動態影像及 VCD 的標準格
式，並且被廣泛地應用在傳輸速率 1.5Mbits/s
的通訊頻道上動態影像的傳送。而動態影像
標準 MPEG-2（H.262）[6-7]的基本概念和
MPEG-1 很相似，但是增加了擴充性以期能涵
蓋更為廣泛的應用，其目標是針對 DVD 及電
 3
測。由 Table 1 顯示，在 H.264 系統實驗的 4
個視訊序列壓縮編碼數據，運動估測所佔的
時間皆超過全部編碼時間的 80％，這顯示運
動估測的時間需要大量減少，亦即非常需要
提出有效率（快速）的運動估測方法，以提
升 H.264 視訊壓縮的編碼速度。在本研究
中，我們將提出一種使用於 H.264 視訊編碼
系統之可調適快速全域搜尋運動估測方法，
以提昇 H.264 視訊編碼之速度。 
實現 block-based motion estimation 最簡
單的方法就是所謂的“全域搜尋＂（ full 
search）[18]，亦即把在搜尋範圍內的每一個
可能的 candidate blocks 都全部搜尋過，從其
中找到最佳的一個 block。但這種方式實在需
要太多的計算時間，因此有許多的快速運動
估測方法被提出來，用以降低運動估測的計
算時間。在 integer-pixel motion estimation 方
面共有兩大類方法，第一大類為 fast lossy 
search integer-pixel motion estimation 方法，
第二大類為 fast lossless search integer-pixel 
motion estimation 方法。顧名思義，第二類方
法做出的 motion estimation 結果和 full search
的 motion estimation 結果完全一樣，第一類
方法做出的 motion estimation 結果則較 full 
search 的 motion estimation 結果差（但相差
不能太多）。 
Fast lossy search integer-pixel motion 
estimation (ME) algorithms 大致可以再細分
為 4 類，第一分類為 fast search integer-pixel 
ME algorithms using a fixed set of search 
patterns，在此分類方法中通常使用 the 
unimodal error search assumption [20-32]，亦
即如果 search 位置朝向最佳位置移動時，則
其 ME matching error 將 monotonically 減小。
在此類方法中，每一個 block 的 motion vector 
(MV)都使用一些固定的 search patterns，最有
名的方法有 the three-step search (TSS) [20]，
the four-step search (4SS) [21]，the diamond 
search (DS) [24]等。這一類方法很容易實
現，但由於缺乏調適性，因此搜尋效率不夠
好。第二分類為 fast search integer-pixel ME 
algorithms using multiresolution search，在此
分類方法中，不同 resolution 視訊影像的關係
將充分利用，wavelet-based multiresolution 
representation 是常用的配合技術[33-36]。此
類方法通常先在 low resolution video frame找
到大概的 MV，再於 high resolution video 
frame 找到較精確的 MV。第三分類是 fast 
search integer-pixel ME algorithms using 
subsampled pixels on matching error 
computations，在此分類方法中，subsampled 
video frames 用來做運動估測，以降低處理的
pixels 數量而加快速度[37-39]。例如:用 2:1 
pixel subsampling in horizontal and vertical 
directions，則計算量只有原來的 1/4。第四分
類是 fast search integer-pixel ME algorithms 
using spatio-temporal correction [40-46]。由於
此類方法做出的結果，並非是最佳的結果，
因此不是本研究所要研究的對象。 
另外在 fast full search (快速全域搜尋) 
integer-pixel ME algorithms 方面亦可再細分
為 以 下 三 類 。 第 一 分 類 是 candidate 
elimination algorithms，通常是利用一些簡單
又有效的數學不等式將不可能的 MV 
candidates 排除（不必計算）以降低計算量。
在 [47]中提出的 the successive elimination 
algorithm (SEA)是最原始的方法，接著有許
多 SEA 的改良方法提出以降低計算量
[47-53]。SEA 的基本原理是:若我們已經找到
一個目前的最佳解，其對應的 matching error
以 MEmin 表示。若有一個搜尋位置，其預
測的最小值(the low bound)若已經比目前的
MEmin 還大，則這個搜尋位置就不可能是最
佳解，因此就可以不需要做真正的計算而直
接＂跳過＂。由於預測最小值(the low bound)
所需的計算較真正的計算簡單許多，因此可
以省掉許多計算，而達到加速的目的。目前
這些改良式的 SEA 方法，通常把一個 block
拆成若干個 sub-block，以尋找更快的計算。
第二分類是 partial distortion elimination (PDE) 
algorithms，其原理是每一次做 SAD 計算時，
可以分為好幾部分做，例如一個 16×16 block
可以用 4 個 4×4 blocks 依順序計算。若部分
計算後的 intermediate PME (partial matching 
error)值已超過目前已知的最小 ME 值，
MEmin，則其餘的部分計算就可以免除，以
降低計算量[54-60]。例如 Kim and Choi [57]
提 出 一 個 調 適 性 的 sequential matching 
algorithm，其掃描方式可以有四種方向: (1) 
top-to-bottom ， (2) bottom-to-top ， (3) 
left-to-right，and (4) right-to-left。通常 PDE
是以 row-based 為主，亦即每次只計算一個
 5
SAD values 拿出來使用，以減少計算量。 
詳細的 JM_FFS Procedure 如下所列： 
Step 1 Set the search window center (the 
predicted motion vector (MV) of the 
INTER16×16 mode), and set the 
minimal matching error min_error = ∞. 
Step 2 If ME in an MB is performed for the 
first time, pre-compute the SAD values 
for all possible search positions in all 
INTER-modes. 
Step 3 Select the next MV, m, according to 
the spiral search order. 
Step 4 Set ))(,(),( mm csSADJ MOTION =λ . If 
min_error ≤ ),( MOTIONJ λm , go to Step 
6. 
Step 5 Compute ),(_ MOTIONCOSTMV λm , and set 
),(_),( MOTIONMOTION COSTMVJ λλ mm =
))(,( mcsSAD+ . If min_error 
> ),( MOTIONJ λm , set min_error 
= ),( MOTIONJ λm  and the best MV 
best_MV = m. 
Step 6 If any MV in the search window is not 
computed, go to Step 3. 
Step 7 Record the optimum MV (best_MV) 
and the minimal matching error 
(min_error) of the current 
INTER-mode. 
對於 JM_FS 及 JM_FFS 的性能，我們可
以觀察以下兩個 video sequences “Akiyo”及
“Foreman”的實驗結果(如 Tables 2 及 3 所
示)。評斷性能因素是 processing time (ms)，
MV_COST 的計算次數，及 SAD 的計算次數。
我們可以發現，對於含有快速運動物體的
video sequence (如 the Foreman sequence)，
JM_FFS 較 JM_FS 較佳，但對於只含有很慢
運 動 物 體 的 video sequence ( 如  Akiyo 
sequence)，JM_FS 反而較 JM_FFS 為佳。 
在現有的方法 JM_FFS 中，所使用的 data 
reusing 技術，雖然可以在 video sequence 含有
快速運動物體時，產生良好的效果以減少計
算量。但其中對於 4×4 SAD 值的計算是全部
都要做(沒有選擇性) ，對於沒有需要的 4×4 
SAD 值的計算就會發生浪費計算的情況。因
此在本研究中，我們將提出新的 data reusing
技術(modified data reusing)。另外，在搜尋次
序方面，JM_FS 及 JM_FFS 都使用固定的
spiral search order，其搜尋的順序固定且和
video data 的內容沒有任何關係，因此其性能
就受到很大的影響。在本研究中，我們將提
出新穎的十字搜尋順序(rood search order)。綜
合而言，為了降低全域搜尋運動估測方法的
計算複雜度，在本研究中提出了兩個主要的
技術。第一個技術叫改良式資料再利用
(MDR)，此方法以減少 SAD 計算量來減少運
動估測所需的處理時間，其中不必要及重複
的運動估測計算量將大量減少。在所提的十
字搜尋順序，其搜尋順序將使 MV_COST 值的
分佈與搜尋順序呈線性關係，MV_COST 計算
量將大量地減少。第二個技術叫可調適的搜
尋順序(ASO)，ASO 依每個 variable size block
的 predicted MV 的 magnitude，在螺旋搜尋順
序及十字搜尋順序之間調適性地切換運動估
測順序來減少 MV_COST 計算量，並進一步減
少運動估測所需的處理時間。 
 
三、研究方法與成果 
 
在 H.264 系統中[14]，每一個 block 的 motion 
vector (MV) ，是先利用 integer-pixel ME 
algorithm 尋找到一個最佳的 integer-pixel 
MV，再利用 fractional-pixel ME algorithm 接
續做 local refinement，以找到一個最佳的
fractional-pixel MV。若使用傳統的全域搜尋
運動估測方法，且 integer-pixel MV，搜尋區
域為 16×16，從這 7 種 inter modes 中找到最
佳的 integer-pixel MV 需要 16×16×7 search 
positions，這是一序列繁雜的計算。因此在本
研究中，我們提出一個應用於 H.264 視訊編碼
之可調適快速全域搜尋運動估測方法，其目
的是加快 H.264 編碼端壓縮程序的速度，但不
會影響到編碼的結果。 
為了降低全域搜尋運動估測方法的計算
複雜度，在本研究中提出了兩個主要的技
術。第一個技術叫改良式資料再利用(MDR)，
此方法以減少 SAD 計算量來減少運動估測所
需的處理時間，其中不必要及重複的運動估
測計算量將大量減少。在所提的十字搜尋順
序，其搜尋順序將使 MV_COST 值的分佈與搜
尋順序呈線性關係，MV_COST 計算量將大量
地減少。第二個技術叫可調適的搜尋順序
(ASO)，ASO 依每個 variable size block 的
predicted MV 的 magnitude，在螺旋搜尋順序
 7
candidate MVs 之 MV_COST 值時都是按照固
定的 the spiral search order。由於 MV_COST
值與 the spiral search order 沒有直接的關係，
因此所有 candidate MVs 的 MV_COST 值都需
要計算。但如果我們可以找到一個合適的
search order 使得 MV_COST 值和對應的 
search order 是“線性的關係”，即 MV_COST
是 monotonically non-decreasing function of the 
search order，則 MV_COST 的計算量將可以大
量的減少。在所提的 rood search order (RSO)
中，MV_COST 值的分佈和 the search order 是
“線性的關係”。因此，若目前的 MV_COST 值
比目前的MEmin還大，則剩下的MV candidates
相關的 MV_COST 計算都可以免除(都會比目
前的 MEmin 還大)。在所提的 RSO，(1) 每一
個 MV_COST 值都用一個固定的 MOTIONλ  (Eq. 
(1))估計。(2) 一個 variable size block 所有的
估 計 MV_COST 值 都 以 monotonically 
non-decreasing order 依順序排列。若有 2 個(含)
以上位置的 MV_COST 值相同，則其座標絕對
值之和 (即|x|+|y|) 較小的順序優先在前。若有
2 個(含)以上位置的 MV_COST 值相同且其
|x|+|y|值亦相同，則依最原始之 the spiral search 
order 之順序。(3) 在所提的 RSO 中，根據估
計 MV_COST 值順序排列，下一個 MV_COST
值一定大於或等於目前的 MV_COST 值。 
接著我們需要面對兩個問題: (1) 如何將
所提的 RSO 技術實現在 H.264 編碼上，(2) 如
何避免 RSO 所產生的 side effect。由於對每一
個 INTER-mode MV_COST 把 the MV 
displacement (or the MV predicted error) 
between the candidate MV ， m ， and the 
predicted MV，p，轉化為 matching error 的一
部份 (使用特定的 λMOTION)。由於 search window
的中心設定為 the integer position of the 
predicted MV，p，而 p 是 1/4-pixel 精確度，
因此 the predicted MV，p，與 the search window 
center 的 水 平 及 垂 直 方 向 的 可 能 差 值 
(deviations) 為 ±3/4-pixel ， ±1/2-pixel ，
±1/4-pixel，及 zero-pixel (7 種差值)，所以總
共有 49 種可能的 deviations。針對每一種
deviation，我們可以設定其對應的 RSO，所以
我們可以有 49 種 RSOs。有一種特殊狀況是: 
the predicted MV，p，與 the search window 
center 的 deviation 為 out of a specified range，
此時我們可以使用傳統的 the spiral search 
order。Fig. 5 顯示對 deviation d=(0, 0)時的一
個例子，Fig. 5 (a)是 MV_COST 值，Fig. 5 (b)
是 JM_FS 的 spiral search order，而 Fig. 5 (c)
是所提之 RSO，由此例子可以看出 spiral 
search order 與 MV_COST 值沒有大小順序關
係，但所提的 RSO 的 search order 是 linearly 
related with MV_COST 值。 
 
3. Proposed Adaptive Search Order (ASO) 
若一個 video sequence 只包含一些 small 
motion objects，則絕大部分的最佳 MVs 將呈
現十字分佈 (如 Fig. 4 所示的例子)，但若一
個 video sequence 包含了一些 large motion 
objects，則最佳 MVs 雖然仍呈現十字分佈，
但有一部份最佳 MVs 將遠離十架區域(rood 
area)。所提的 RSO 對於包含一些 small motion 
objects 的 video sequences 應該較有效，但對
於包含一些 larger motion objects 的 video 
sequences 而言，其效果不見得較 JM_FS 的
spiral search order 好。因此在此研究中，我們
將採用一種 adaptive search order (ASO) 的策
略。若 H.264 某一個 variable size blocks 的
predicted MV (PMV) 的 magnitude 小於設定
的門檻，則採用所提的 rood search order 
(RSO)。否則，我們就沿用 JM_FS 所使用的
spiral search order。當然我們也需要發展一套
精密估測機制，以決定每一個 variable size 
block 的最佳 predicted MV。原則上，我們可
以利用  (1) spatially neighboring blocks 的
MVs ， (2) motion-compensated (temporally) 
neighboring blocks 的 MVs，(3) other INTER 
modes 的 MVs 等各種資訊以決定每一個
variable size block 的 predicted MV。 
本研究計畫中，我們將使用三種不同類型
的 H.264/AVC 視訊序列以實際測試所提方法
的性能，第一類為 small-motion 視訊序列，例
如“Akiyo”及“News”，第二類為 medium-motion
視訊序列，例如“Silent”及“Carphone”，第三
類為 large-motion 視訊序列，如“Stefan”及
“Foreman”，我們亦會實現現有的全域搜尋運
動估測方法，以便與所提方法做性能比較，
這些方法包括 H.264 的 JM_FS [11, 14], H.264
的 JM_FFS [11, 14], the adaptive matching scan 
based on representative pixels [57], the adaptive 
 9
438-442, Aug. 1994. 
[23] J. N. Kim and T. S. Choi, “A fast three-step 
search algorithm with minimum checking 
points using unimodal error surface 
assumption,” IEEE Trans. on Consumer 
Electronics, vol. 44, no. 3, pp. 638-648, Aug. 
1998. 
[24] S. Zhu and K. K. Ma, “A new diamond search 
algorithm for fast block-matching motion 
estimation,” IEEE Trans. on Image 
Processing, vol. 9, no. 2, pp. 287-290, Feb. 
2000. 
[25] C. Zhu, X. Lin, and L. P. Chau, 
“Hexagon-based search pattern for fast block 
motion estimation,” IEEE Trans. on Circuits 
and Systems for Video Technology, vol. 12, no. 
5, pp. 349-355, May 2002. 
[26] K. K. Ma and G. Qiu, “Unequal-arm adaptive 
rood pattern search for fast block-matching 
motion estimation in the JVT/H.26L,” in Proc. 
of IEEE Int. Conf. on Image Processing, Sept. 
2003, vol. 1, pp. 901-904. 
[27] Z. Zhou, M. T. Sun, and Y. F. Hsu, “Fast 
variable block-size motion estimation 
algorithms based on merge and split 
procedures for H.264/MPEG-4 AVC,” in Proc. 
of IEEE Int. Sym. on Circuits and Systems, 
May 2004, pp. 725-728. 
[28] Y. K. Chen and T. C. Chen, “A fast and 
effective method for motion estimation,” in 
Proc. of IEEE Int. Conf. on Multimedia and 
Expo, June 2004. 
[29] C. W. Lam, L. M. Po, and C. H. Cheung, “A 
novel kite-cross-diamond search algorithm for 
fast block matching motion estimation,” in 
Proc. of IEEE Int. Sym. on Circuits and 
Systems, May 2004, pp. 729-732. 
[30] Y. Liu and S. Oraintara, “A novel adaptive 
multi-mode search algorithm for fast 
block-matching motion estimation,” in Proc. 
of IEEE Int. Sym. on Circuits and Systems, 
May 2004, pp. 977-980. 
[31] Y. Liu and S. Oraintara, “Complexity 
comparison of fast block-matching motion 
estimation algorithms,” in Proc. of IEEE Int. 
Conf. on Acoustics, Speech, and Signal 
Processing, May 2004, pp. 341-344. 
[32] H. Jia and L. Zhang, “A new cross diamond 
search algorithm for block motion 
estimation,” in Proc. of IEEE Int. Conf. on 
Acoustics, Speech, and Signal Processing, 
May 2004, pp. 357-360. 
[33] M. Bierling, “Displacement estimation by 
hierarchical block matching,” in Proc. of SPIE, 
1988, vol. 1001, pp. 942-951. 
[34] Y. Q. Shi and X. Xia, “A thresholding 
multiresolution block matching algorithm,” 
IEEE Trans. on Circuits and Systems for 
Video Technology, vol. 7, no. 2, pp. 437-440, 
Feb. 1997. 
[35] J. Chalidabhongse and C. C. J. Kuo, “Fast 
motion vector estimation using 
multiresolution-spatio-temporal correlations,” 
IEEE Trans. on Circuits and Systems for 
Video Technology, vol. 7, no. 3, pp. 477-488, 
June 1997. 
[36] Y. Q. Zhang and S. Zafar, 
“Motion-compensated wavelet transform 
coding for color video compression,” IEEE 
Trans. on Circuits and Systems for Video 
Technology, vol. 2, no. 3, pp. 285-296, Sept. 
1992. 
[37] B. Liu and A. Zaccarin, “New fast algorithms 
for the estimation of block motion vectors,” 
IEEE Trans. on Circuits and Systems for 
Video Technology, vol. 3, no. 2, pp. 148-157, 
April 1993. 
[38] C. K. Cheung and L. M. Po, “Normalized 
partial distortion search algorithm for block 
motion estimation,” IEEE Trans. on Circuits 
and Systems for Video Technology, vol. 10, no. 
3, pp. 417-422, April 2000. 
[39] C. H. Cheung and L. M. Po, “Adjustable 
partial distortion search algorithm for fast 
block motion estimation,” IEEE Trans. on 
Circuits and Systems for Video Technology, 
vol. 13, no. 1, pp. 100-110, Jan. 2003. 
[40] L. J. Luo, C. Zou, and X. Q. Gao, “A new 
prediction search algorithm for block motion 
estimation in video coding,” IEEE Trans. on 
Consumer Electronics, vol. 43, no. 1, pp. 
56-61, Feb. 1997. 
[41] J. B. Xu, L. M. Po, and C. K. Cheng, 
“Adaptive motion tracking block matching 
algorithms for video coding,” IEEE Trans. on 
Circuits and Systems for Video Technology, 
vol. 97, no. 7, pp. 1025-1029, Oct. 1999. 
[42] A. Chang, P. H. W. Wong, Y. M. Yeung, and O. 
C. Au, “Fast integer motion estimation for 
H.264 video coding standard,” in Proc. of 
IEEE Int. Conf. on Multimedia and Expo, 
June 2004. 
[43] C. H. Hsieh, P. C. Lu, J. S. Shyn, and E. H. Lu, 
“Motion estimation algorithm using interblock 
correlation,” Electronics Letters, vol. 26, no. 5, 
pp. 276-277, Mar. 1990. 
[44] J. Chana and P. Agathoklis, “Adaptive motion 
estimating for efficient video compression,” in 
Proc. of 29th Asilomar Conf. on Signals, 
Systems, and Computers, 1996, vol. 1, pp. 
690-693. 
[45] J. C. Tsai, C. H. Hsieh, S. K. Weng, and M. F. 
 Perform the ME 
computations for the 
INTER16×16 mode 
in the first level 
Exit
Start
Perform the ME 
computations for the 
INTER modes in the
second level 
Perform the ME 
computations for the 
INTER modes in the
third level 
Perform INTRA 
mode prediction 
computations 
 
Fig. 2. The proposed MDR technique. 
 
 
Fig. 3. Typical surface values of the rate term R(m-p). 
 
 
Fig. 4. The distributions of the MV displacement d of the 8×8 block type for the four video sequences, namely, (a) 
“Container,” (b) “Foreman,” (c)”Mobile,” and (d) “Tempete.” 
 
 13
 
Table 5. The simulation results for the “Salesman” sequence with R=16, NumberReferenceFrames=1, and QP=28 of 
the five comparison fast full search algorithms and the proposed algorithm (MDR+ASO). 
Methods time (ms) improve MV_COST improve SAD improve PSNR (dB) encoding bits
JM_FS 624 － 4376048 － 24554428 － 36.99 186776 
JM_FFS 594 4.81% 100450 97.70% 27323620 -11.28% 36.99 186768 
PDE-M1 597 4.33% 4376048 0.00% 22942810 6.56% 36.99 186776 
PDE-M2 578 7.37% 4376048 0.00% 21621884 11.94% 36.99 186776 
MDR 538 13.78% 4376048 0.00% 16096012 34.45% 36.99 186776 
MDR+ASO 504 19.23% 1627665 62.81% 16135263 34.29% 36.99 186776 
 
 
Table 6. The simulation results for the “Akiyo” sequence with R=16, NumberReferenceFrames=1, and QP=28 of the 
five comparison fast full search algorithms and the proposed algorithm (MDR+ASO). 
Methods time (ms) improve MV_COST improve SAD improve PSNR (dB) encoding bits
JM_FS 508 － 4376048 － 16732774 － 39.29 101592 
JM_FFS 592 -16.54% 381831 91.27% 27323620 -63.29% 39.29 101696 
PDE-M1 485 4.53% 4376048 0.00% 14865103 11.16% 39.29 101592 
PDE-M2 471 7.28% 4376048 0.00% 13723558 17.98% 39.29 101592 
MDR 496 2.36% 4376048 0.00% 14171468 15.31% 39.29 101592 
MDR+ASO 451 11.22% 1036888 76.31% 14217173 15.03% 39.29 101592 
 
 
Table 7. The simulation results for the “Carphone” sequence with R=32, NumberReferenceFrames=1, and QP=28 
of the five comparison fast full search algorithms and the proposed algorithm (MDR+ASO). 
Methods time (ms) improve MV_COST improve SAD improve PSNR (dB) encoding bits
JM_FS 1562 － 16977782 － 75972525 － 38.15 347632 
JM_FFS 1684 -7.81% 1413046 91.68% 106007616 -39.53% 38.17 348896 
PDE-M1 1420 9.09% 16977782 0.00% 69700072 8.26% 38.15 347632 
PDE-M2 1396 10.63% 16977782 0.00% 67369783 11.32% 38.15 347632 
MDR 1384 11.40% 16977782 0.00% 57586701 24.20% 38.15 347632 
MDR+ASO 1280 18.05% 6193447 63.52% 57698496 24.05% 38.15 347632 
 
 
Table 8. The simulation results for the “Salesman” sequence with R=32, NumberReferenceFrames=1, and QP=28 of 
the five comparison fast full search algorithms and the proposed algorithm (MDR+ASO). 
Methods time (ms) improve MV_COST improve SAD improve PSNR (dB) encoding bits
JM_FS 1530 － 16977782 － 75590925 － 36.97 186608 
JM_FFS 1623 -6.08% 196321 98.84% 106007616 -40.24% 36.98 186680 
PDE-M1 1401 8.43% 16977782 0.00% 71791904 5.03% 36.97 186608 
PDE-M2 1361 11.05% 16977782 0.00% 68071392 9.95% 36.97 186608 
MDR 1367 10.65% 16977782 0.00% 58438466 22.69% 36.97 186608 
MDR+ASO 1234 19.35% 5030808 70.37% 58540023 22.56% 36.97 186608 
 
 
