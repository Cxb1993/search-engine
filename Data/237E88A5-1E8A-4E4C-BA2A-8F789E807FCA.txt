 1
 
A Limited Issue e-Coupon Scheme Based on Digital Rights Concept 
 
 
ABSTRACT 
Digital rights-based e-commerce applications have gained scholars’ attention in recent years. 
Some of existing digital rights schemes focus on developing the digital rights infrastructure and 
protecting digital content from attack by malicious users, while the rest focus on supporting an 
issuer in issuing digital rights without limitations on quantity. Relatively few scholars discuss 
developing an e-coupon scheme with a limited issue property although such a scheme is 
necessary, especially when e-coupons are issued to redeem high value products or to purchase 
products at high discounts. Therefore, we combine the digital right concept and public key 
infrastructure (PKI) to design a limited issue e-coupon scheme in this paper. The proposed 
e-coupon scheme not only supports the limited issue requirement but also prevents duplicate 
redemption by users and over-issuing of e-coupons by brokers. 
 
Keyword: E-coupon, Digital rights, PKI, Limited issue 
 
1. Introduction 
In past years, a variety of payment systems such as e-cash, e-checks, account-based 
payments, on-line credit payments and micropayments have been proposed to support 
increasingly complex requirements raised by the growth in e-commerce transactions (Chaum, 
1983; Chaum et al., 1989; Okamoto and Ohta, 1992; Chaum et al. 1997, Fan et al., 2000; Song 
and Korba, 2004). Each system has unique strengths and weaknesses. For example, the major 
feature of e-cash is its untraceability, but its security mechanism is not very strong. In contrast, 
on-line credit payment systems enable Internet transmission of large transaction fees protected by 
strong security mechanism, but allow banks and sellers to trace customers’ shopping behaviors. 
In nonelectronic commercial activities, coupons have been widely used to promote products 
for many years. The value of a coupon can range from very low to very high. A coupon can be 
used to redeem a bowl of ice cream or to purchase an HDTV at a 40% discount. In other words, a 
coupon can be treated as having valuable digital content or digital rights. However, most existing 
digital rights schemes focus on developing a digital rights protection infrastructure for digital 
broadcasting or on protecting the digital rights on devices such as MP3 players, DVDs and so on 
from being tampered with, copied or distributed by illegal users (Fujimura and Nakajima, 1998; 
Fujimura et al. 1999; Fujimura, 1999; Matsuyama and Fujimura, 1999; Fujimura et al., 2000; 
Fujimura and Eastlake, 2003; Stini et al., 2006). Before we wrote this paper, we did not see 
scholars applied the digital rights concept to developing an e-coupon scheme having the limited 
issue property thought to be necessary for some special demands, or to controlling the number of 
e-coupons issued to make sure issuers can generate acceptable revenues through issuing 
e-coupons. 
 3
transaction phases: issuance, transference and redemption phases. A detailed 
description of each transaction follows. 
 
A. Issue transaction 
During the issue transaction, the issuer gives ownership of a ticket to the user. 
An issue transaction consists of seven steps:  
Step 1. User Ui sends its request and payment to the issuer. 
Step 2. The issuer sends a certificate to user Ui. 
Step 3. User Ui sends back the certificate to the issuer. 
Step 4. The issuer sends a ticket T to user Ui. 
Step 5. User Ui generates a new ticket key Ki and computes an issue request Ri =(h(T), 
h(Ki)), where h( ) is a one-way hash function. Then user Ui sends Ri back to 
the issuer. 
Step 6. The issuer generates ownership information IOi=(h(T), nil, h(Ki)) first. Then 
the issuer registers IOi with the ticket-token manager, where Ki is the 
ticket-token for T. 
Step 7. The ticket-token manager announces IOi. Then user Ui can verify ownership 
by verifying the announced IOi using the user’s own Ki. 
 
B. Transfer transaction 
In a transfer transaction, a user Ui transfers ownership of a ticket T to another 
user Uj. Four steps are included in the transfer transaction. 
Step 1. User Uj sends a purchase request to user Ui. Then, user Ui sends a ticket T to user Uj. 
Step 2. User Uj generates a new ticket-token Kj, creates a transfer request Rj=(h(T), 
h(Kj)), and sends Ri back to Uj. 
Step 3. After receiving the transfer request from Rj from user Uj, user Ui generates 
new ownership information IOj=(h(T), Ki, h(Kj)) and sends IOj to the 
ticket-token manager. 
Step 4. The ticket-token manager compares h(Ki) in IOi with the hashed value of Kj in IOj. If they 
are the same, the ticket-token manager replaces the ticket-token from Ki with Kj and 
announces IOj. Then user Uj can confirm sole valid ownership of T by verifying IOj. 
 
C. Redemption transaction 
In a redemption transaction, the user redeems the rights represented by the 
ticket to a service provider. If user Ui wants to redeem a ticket to request the services 
of the service provider, three steps must be performed: 
Step 1. User Ui presents ticket T and ticket-token Ki to the service provider.  
Step 2. The service provider generates ownership information IO'i=(h(T), Ki, nil) for 
user Ui and presents IO'i to the ticket-token manager. 
Step 3. The ticket-token manager checks whether h(Ki) in IOi is the same as the hash 
value of Ki in IO'i given by user Ui. If they are the same, the ticket-token 
 5
scheme, we assume the token server is a trust third party (TTP) designated by the issuer or broker 
and trusted by users. The proposed scheme also assumes that an issuer has authorized several 
brokers to issue e-coupons at the same time. That is, to control the number of e-coupon issued by 
brokers, an issuer must monitor several authorized brokers simultaneously.  
That user accounts may suffer from being illegally altered or deleted by malicious brokers or 
service providers must be considered if user accounts are maintained by service providers or 
brokers. To solve this problem, an account server has been introduced into the proposed scheme. 
The account server is always connected to the Internet and each user can store e-coupons 
purchased or collected from different brokers in the user’s own account, which is managed by the 
user. Basically, the account server is separated from brokers, issuers and service providers, and is 
trusted by users. Its function is almost like a current e-mail server, except that the e-mail server 
stores e-mails for users instead of e-coupons.  
Internet
Issuer Server
Broker Server
Service Provider
User A
User B
1. Request to 
authorize
2. Authorize
User A accountUser A account
User B accountUser B account
3. Request
to issue
4. Issue
5. Request to
Transfer
6. Transfer
8. Redeem
7. Request to 
redeem
9. Goods/
service
Token Server
:E-coupon flow
:Request
Account Server
 
Figure 1. Framework of the proposed scheme 
 
3.2 Proposed E-coupon Protocols 
In addition to the three general transactions in the digital rights circulation or digital rights 
trading concepts, one transaction, called authorization, is included in the proposed scheme. 
Before describing these four transactions, we first introduce the preprocessing performed by the 
issuer to prepare the e-coupon template (eCT) and initial seed for each authorized broker. Note 
that all transmitted data are encrypted by using the SSL protocol during preprocessing as well as 
during the four transactions: authorization, issue, transfer and redemption. 
 
Preprocessing  
For different promotional activities, an issuer must prepare different kinds of e-coupon 
 7
public so that users can verify that their received e-coupons are valid. The first m hash values are 
embedded into e-coupons issued by broker B1, as shown in Figure 3. In the issue transaction, user 
U1 gets a hash value as )(H 1
m
11)1(m RR =+  but user Um gets a hash value as )(H 11111 RR = . All 
users can verify their received hash values using R1(m+1), which broker B1 has made public in 
advance. Note that the hash values generated by broker Bi also serve as the serial numbers of the 
issued e-coupons. In other words, each issued e-coupon contains a unique hash value. Therefore, 
a broker can ensure that the owner of each issued e-coupon is unique and the issuer can prevent 
the authorized broker from over-issuing e-coupons. In the proposed scheme, an e-coupon issued 
by broker Bi is defined as eC=(eCT, Ri, Rim, T, Sign) where Ri is the seed generated by the issuer 
for broker Bi, Rim is the hash value for user Um, T is the timestamp and Sign is the digital 
signature of (eCT, Ri, Rim, T) generated by broker Bi’s secret key. 
 
eCT1: R0=H5(Seed1), Seed1, H(),
R4=H1(Seed1)R1=H4(Seed1) R2=H3(Seed1) R3=H2(Seed1)
H1()
B1
Issuer
)R(HR 1
1
111 =
)R(HR 1
2
112 =
)R(HR 1
3
113 =
)R(HR 1
m
1m1 = U1
U(m-1)
U(m-2)
Um
)R(HR 1
1)(m
11)m(1
+
+ = Reserved for verification  
Figure 3. Flowchart of steps for broker B1 to issue e-coupons to users 
 
After preprocessing is completed, the main four transactions begin. A detailed description 
for each transaction follows. 
 
 
A. Authorization transaction 
If broker Bi wants to circulate an e-coupon on behalf of an issuer, broker Bi 
sends a request to the issuer to obtain authorization. 
 9
Step 3. After receiving the transfer request from Rj from user Uj, user Ui generates 
new ownership information IOj=(H(eC),Ki,H(Kj)) and sends IOj to the token 
server. 
Step 4. The token server compares H (Ki) in IOi and the hashed value of Kj in IOj. If they are 
equal, the token server replaces the token from Ki with Kj and announces IOj. Then user 
Uj can confirm that sole valid ownership of eC by verifying IOj. 
 
D. Redemption transaction 
When user Ui wants to redeem an e-coupon to request the services or goods of a 
service provider, three steps must be performed: 
Step 1. User Ui presents an e-coupon eC and token Ki to the service provider.  
Step 2. The service provider generates ownership information IO'i=(H(eC), Ki) for 
user Ui and presents IO'i to the token server. 
Step 3. The token server checks whether H(Ki) in IOi is the same as the hash value of 
Ki in IO'i given by user Ci. If they are equal, the token server deletes all 
information about e-coupon eC and notifies the service provider to process 
the user’s request. Otherwise, the token server notifies the service provider to 
reject user Ui’s redemption. 
 
3.3 Two Variants 
The proposed scheme can be extended to include two variants, each of which allows users to 
tailor the e-coupon scheme to specific e-commerce transactions. In the first, the proposed scheme 
can be easily modified to serve as a gift coupon scheme and each gift coupon represents 
high-value services or goods by providing payment instructions in Step 1 of the issue transaction 
and Step 1 of the redemption transaction. The modified issue transaction involving the first 
variant follows. 
Step 1. User Ui sends a request and payment to broker Bi. 
Step 2. Broker Bi sends his certificate to user Ui. 
Step 3. After receiving broker Bi’s certificate, user Ui initiates a secure channel by 
using the SSL protocol. Then user Ui sends his certificate to broker Bi. 
Step 4. Broker Bi sends an e-coupon eC to user Ui. 
Step 5. User Ui generates a new e-coupon key Ki and computes an issue request Reqi 
=(H(eCT), H (Ki)). Then user Ui sends Reqi back to the issuer. 
Step 6. Broker Bi generates ownership information IOi=(H(eC), H(Ki)) first. Then 
broker Bi registers IOi at the token server, where Ki is the token for eC. 
Step 7. The token server announces IOi. Then user Ci can verify ownership by 
verifying the announced IOi using the user’s own Ki . 
Note that in the modified issue transaction, user Ui must also send his certificate to 
broker Bi so that broker Bi can verify the user’s digital signature on user Ui’s payment 
instructions. 
 
 11
announced by the broker, the received eC is valid. 
 
4. Preventing forgery 
The proposed scheme provides two mechanisms to prevent e-coupons from being forged by 
unauthorized brokers: two kinds of hash chains and the digital signature technology. During 
authorization, broker Bi must send confirmation information IC=(Bi, IM, Ri(m+1), Hi(),Sign) to 
receive final authorization from the issuer. The issuer signs Rim and Bi using the issuer’s secret 
key and announces them after granting authorization to broker Bi, but only if the received Rim 
equals the m times hash operation of Ri. After receiving the issuer’s final acknowledgment, the 
authorized broker Bi also signs the last hash value Ri(m+1) and makes it public. Therefore, users 
can check whether a broker is authorized. In other words, even if an unauthorized broker is able 
to forge the initial seed, a user still can recognize the forged eC by comparing the Ri(m+1) 
announced by broker and the signed (Rim, Bi) announced by the issuer.   
 
5. Preventing illegal alternation or deletion 
The account server introduced in the proposed scheme is trusted by users and is separated 
from the issuer, broker or service provider. The account server allows users to manage and access 
their accounts and store their collected e-coupons or purchased gift coupons in their accounts in 
person. Therefore, the proposed scheme can prevent an e-coupon from being altered or deleted by 
malicious service providers.  
 
6. Preventing duplicate redemption 
The account server also provides an additional safeguard in the proposed scheme. After an 
e-coupon is issued to a user, the corresponding ownership information IO is sent to the account 
server. The token server deletes all information about e-coupon eC after an e-coupon is redeemed 
by a user to request services or goods from the service provider. Therefore, any duplicate 
redemption can be discovered by the token server after an illegal user hands over a forgery to 
obtain services or goods from the service provider. In other words, this mechanism in the 
proposed scheme helps prevent duplicate redemption.   
 
7. Non-repudiation 
During the authorization transaction, an issuer uses its secret key to sign the issue 
information IM while a broker also uses his secret key to sign the confirmation information IC. 
Because only the owner knows his own secret key and no one can forge a valid signature, 
non-repudiation of IM and IC is achieved. Furthermore, a user generates an e-coupon key for 
each e-coupon during the issue transaction. Because the owner alone knows the valid e-coupon 
key, the owner cannot deny redemption once the e-coupon is redeemed. 
These seven requirements are also fulfilled in our two variant approaches. Moreover, 
because payment is involved in our first variant, users must send their certificates to brokers. By 
using an e-coupon key, the hash value embedded in the e-coupon and a user’s certificate, the 
original owner of an e-coupon can be tracked backward in the event any duplicate redemption 
