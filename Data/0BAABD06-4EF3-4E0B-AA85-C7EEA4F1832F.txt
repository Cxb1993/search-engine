2一個 itemset Z 的 support 被定義為 “包含itemset Z 的交易總數佔全部交易總數的比
例”。關連法則探勘的問題可以細分為兩個子問題。首先，找出所有 support 大於或等於
minimum support （由 user 指定）的 itemsets。這些 itemsets 被稱為 large itemsets。其次，
由 large itemsets 推導出所有 confidence 大於或等於 minimum confidence （由 user 指定）
的關連法則。法則 YX 的 confidence 被定義為 “itemset YX 的 support 除以 itemset
X 的 support”。 例如，假設 Z 為 large itemset，所有形式為 YX ，滿足 ZYX  ，
YX 以及minimum confidence 條件的所有法則都會被產生。很明顯地，一旦所有的
large itemsets 被發掘之後，關連法則將可以很容易地被產生出來。
傳統發掘 large itemsets 的演算法，例如 Apriori[2] 和 FP-growth[7] 演算法，主要是
針對靜態的資料庫，並且需要多次對資料庫進行讀取，因此不符合 “資料流中的每一個資
料項目最多只能被檢視一次”的條件。此外，在資料流中發掘 large itemsets 所遇到最棘手
的問題是如何確保 large itemsets 的完整性 (completeness)。由於來自資料流的資料會不斷
地產生，目前的 large itemsets 可能很快地變成不是 large itemsets，反之，目前不是 large 的
itemsets 可能會變成 large itemsets。由於 “有限記憶體”的限制，我們不可能將所有的
itemsets 都儲存在記憶體，因此我們需要設計新的演算法來解決這些問題。
在資料流的環境中發掘 large itemsets 的研究已逐漸受到重視[5,8,9]。資料流探勘的時
間模式可分為下列三種：標界模式(landmark model)、傾斜式時間視窗模式(tilted-time window
model)和移動視窗模式(sliding window model)。標界模式所考慮的探勘範圍是從某一個預設
的標界(landmark)一直到現在，將所要探勘的資料都一律平等看待。不過，這種方式可能會
影響關連法則探勘結果的準確度。例如，一年前使用者的消費行為可能和最近三個月的消
費行為有極大的差異。因此，若將所有資料的重要性都視為相同，那麼使用探勘結果所做
的決策之正確性將會受到影響。
傾斜式時間視窗模式(tilted-time window model)的觀念來自於使用者通常對於最近的資
料變化會希望能用一種微觀的方式進行查詢，而對於較久遠的資料則用宏觀的方式來看
待。也就是說，此模式中的時間視窗的大小是可以不相等的。“傾斜式時間視窗模式”是根
據 “標界模式”改變而成的，雖然時間視窗的大小可以有不同的設定，但仍無法區別舊資
料和新資料的重要性。
在移動視窗模式(sliding window model)的環境中，假設所給定的移動視窗之長度為
T，T 表示距離現在最近的 T 筆交易。在這個模式下發掘關連法則的主要工作是從這 T 筆
交易中發掘所有的 large itemsets。雖然 “移動視窗模式”只考慮離現在最近的 T 筆交易，
但是這些資料所涵蓋的時間範圍可能很長，若忽略不同時間點的資料所代表的重要性之差
異，關連法則探勘的結果也將會受到影響。
Chang and Lee [4] 提出一種在資料流中發掘 large itemsets 但不需要產生任何
candidate itemsets的方法。他們使用 prefix-tree lattice 的架構來儲存 significant itemsets。所
謂 significant itemset 是指 itemset 的 support 在不久的將來可能會大於 minimum
support，而使得目前不是 large 的 itemset 變成 large itemset。對於老舊的交易所包含的
significant itemset，也可能隨著時間而減少它們的 support count，進而減少 significant itemset
的個數。所以，這個方法是藉由犧牲執行結果的準確度，讓處理的時間可以獲得適當的控
制。
Manku and Motwani [10] 提出 Lossy Counting algorithm 來計算 large itemset 的
approximate support count。在資料流的環境中，這個方法使用最大可能錯誤率(maximum
possible error)的觀念來維護所有可能的 large itemset。執行結果雖然是 approximate ，但錯
誤率可以被保證不超過使用者指定的參數值。
Giannella et al. [6] 提出一種稱為 FP-stream 的資料結構來儲存與時間變化相關的
support count。FP-stream 的架構主要包含兩個部份：一個是在記憶體中儲存 frequent 和
sub-frequent itemsets 的 pattern tree。另外，每一個 frequent pattern 都有一個傾斜式時間視
窗表(tilted-time window table)，儲存在各個 tilted-time window 中的 support count 。他們也
提出一套在資料流環境中建立、維護和更新 FP-stream 架構的方法，以達到在有限記憶體
中快速執行的目的。
4的支持個數的總和很大，但若它在權重高的視窗中的支持個數很低，也可能無法成為 large
item。這是一項非常合理且重要的考慮，因此我們所設計的加權移動視窗模式，在實際應
用中可以讓資料流探勘的結果更符合使用者的需求。
3. 發掘交易資料流中大型項目集的 one-pass 演算法
一個 itemset 是 items 所成的集合。若 itemset 的加權支持個數大於或等於最小加權支
持個數，則稱它為 large itemset。大小為 k 的 itemset 則稱之為 k-itemset。假設使用者所
設定的視窗個數為 n，每一個視窗所包含的時間為 t，則我們所考慮的是包含在現在這個
時間點之前 nt 的時間內之所有交易。假設目前的時間點為 iT ，x1,x2,...,xk 為 items。
CSi({x1,x2,...,xk})被定義為在所有視窗 Wij )n1( j 中，包含 itemset {x1,x2,...,xk} 的交易之
交易編號所成的集合。SPij ({x1,x2,...,xk})被定義為在移動視窗 Wij 中包含 itemset {x1,x2,...,xk}
的交易之交易編號所成的集合，而|SPij ({x1,x2,...,xk})| 則表示所包含的交易之個數。令視窗
Wij 的權重為 j，我們將根據下列幾點推論，設計一個發掘資料流中大型項目集的 one-pass
演算法。
推論(1)： 若
1
n
j
 ( | SPij ({x1,x2,...,xk}| j ) 大於或等於最小加權支持個數，則 {x1,x2,...,xk}
是一個 large k-itemset。
推論(2)： 若 itemset {x1,x2,...,xk} 是一個 large k-itemset，則它的任何子集合也必定是 large
itemset。
推論(3)： 使用類似 Apriori[3] 的方法，利用已產生的 large (k-1)-itemsets 來產生 candidate
k-itemsets。假設 Lk-1 為所有 large (k-1)-itemsets 所成的集合。X[1],X[2],…,X[k-1]代表 large
(k-1)-itemset X 中的 k-1 個 items 且X[1]<X[2]<…<X[k-1]。令 Ck 為 candidate k-itemsets 所
成的集合，則
Ck={{Xp[1],Xp[2],…,Xp[k-1],Xq[k-1]}|XpLk-1 and
XqLk-1 and Xp[1]=Xq[1],Xp[2]=Xq[2],…,and
Xp[k-2]=Xq[k-2], and Xp[k-1]<Xq[k-1]}
Candidate k-itemset {Xp[1], Xp[2],…,Xp[k-1], Xq[k-1]}的 CSi 值可以由下列的運算產生：
CSi({Xp[1],Xp[2],…,Xp[k-1],Xq[k-1]})
=CSi(Xp)CSi(Xq)
不同於 Apriori 的方法，我們不需要重複 scan 交易資料。一旦 candidate itemset 產生
之後，只要讀取 CSi 一次，即可計算出 SPij 值 (因為各視窗 Wij 所包含的交易編號範圍是已
知的)，並且利用推論(1)立刻判斷它是否為 large itemset。因此發掘資料流中大型項目集的
演算法設計主要包含下列三個步驟：
步驟(1)： scan 視窗 Wij )n1( j 所包含的交易資料一次，計算每一個 item 的 CSi 和 SPij
值。
步驟(2)： 從推論(1)和步驟(1)所得到的結果，找出 large 1-itemsets（亦即 large items）。
步驟(3)： 根據推論(3)，產生candidate k-itemsets (k2)，再利用 itemset 的 CSi 值產生所
有的 large k-itemsets。我們的方法在發掘 candidate k-itemsets 的同時，可以很容易地將它
的 CSi 值計算出來。
6次。各視窗 Wij )41( j 的權重 j分別為： 1= 0.4， 2 = 0.3， 3 = 0.2， 4 = 0.1， 1
4
1

j
j 。
表一為時間點 T1 時各視窗的交易資料，Tid 代表交易編號。根據 one-pass 演算法，首先
步驟 1 scan 所有視窗中的交易資料一次，計算每一個 item 的 CS1 和 SP1j 的值，如表二所
示。在時間點 T1 的最小加權支持個數為 30.20.1+50.20.2+20.20.3+ 30.20.4=
0.62。
表二 包含各 item 的交易編號之集合(
jSP1 )
jSP1
item
J=4 j=3 j=2 j=1 CS1
{1} {1} {4,7,8}  {12} {1,4,7,8,12}
{2} {2} {5} {9} {13} {2,5,9,13}
{3} {1,2,3} {4,6,8} {10} {11} {1,2,3,4,6,8,10,11}
{4}   {10}  {10}
{5}  {4,6,8} {10}  {4,6,8,10}
{6} {1,3} {6}  {11} {1,3,6,11}
{7} {2} {5,7}  {13} {2,5,7,13}
{8}    {13} {13}
{9}   {9} {12} {9,12}
表三 item 的加權支持個數(
jSP1 )
jSP1
item
j=4 j=3 j=2 j=1 加權支持個數
{1} 1 3 0 1 1.1
{2} 1 1 1 1 1
{3} 3 3 1 1 1.6
{4} 0 0 1 0 0.3
{5} 0 3 1 0 0.9
{6} 2 1 0 1 0.8
{7} 1 2 0 1 0.9
{8} 0 0 0 1 0.4
{9} 0 0 1 1 0.7
在步驟 3，我們根據步驟 1 所得到的每個 item 的 SP1j 值，計算其加權支持個數。例如，
item {1} 的 加 權 支 持 個 數 為 各 個 視 窗 的 支 持 個 數 與 權 重 乘 積 的 總 和
10.4+00.3+30.2+10.1=1.1。由於 item {1} 的加權支持個數大於最小加權支持個數，
所以 item {1}是 large 1-itemset，其它依此類推，如表三所示。最後所得到的 large 1-itemsets
為 {1}、{2}、{3}、{5}、{6}、{7}和{9}。
步驟 4 根據所得到的 large 1-itemsets 來產生 candidate 2-itemsets，並且計算其 CS1及
SP1j，如表四所示。例如，candidate 2-itemset {1,5} 的 CS1 值可經由 CS1({1})CS1({5}) 計
算求得。由表二可知 CS1({1})={1,4,7,8,12}以及 CS1({5}) ={4,6,8,10}，交集運算後，可得到
表四中 CS1({1,5})={4,8}的結果。SP1j )41( j 的值也可以利用類似的方法計算出來。接著，
利用表四中 candidate 2-itemsets 的 SP1j 的值，計算其加權支持個數，如表五所示。最後所
得到的 large 2-itemset 為 {2,7}、{3,5}和{3,6}。
重複上述步驟，我們從所得到的 large 2-itemsets 產生 candidate 3-itemsets，並計算其
CS1 及 SP1j，如表六所示。最後再計算出 candidate 3-itemsets 的加權支持個數，如表七所示。
由於 candidate 3-itemset {3,5,6}的加權支持個數小於最小加權支持個數，無法再產生
candidate 4-itemsets，因此時間點 T1 的探勘工作到此結束。
如前面第 2 節的圖一所示，視窗 W21 為 T1 時間點過後五分鐘的交易視窗。假設現在開始進
行時間點 T2 的探勘，視窗 W24=W13，W23=W12，W22=W11，此時我們只要 scan 視窗 W21一
次，即可得到 W21 中每個 item 的 SP21 值，如表九所示。在時間點 T2 的最小加權支持個數
為 50.20.1+20.20.2+ 30.20.3+20.20.4=0.52。每個 item 的 CS2 值為
CS2({x})=CS1({x})-SP14({x})+SP21({x})，如表十所示。接著，我們回到 one-pass 演算法的步
驟 3，計算每個 item 的加權支持個數，如表十一所示，所得到的 large 1-itemsets 為 {1}、
8表六 包含 candidate 3-itemset 的交易編號之集合(
jSP1 )
jSP1
3-itemset
j=4 j=3 j=2 j=1 CS1
{3,5,6} 0 6 0 0 0
表七 candidate 3-itemset 的加權支持個數(
jSP1 )
|| 1 jSP
3-itemset
j=4 j=3 j=2 j=1 加權支持個數
{3,5,6} 0 1 0 0 0.2
表八 各視窗在時間點 T2 的交易資料
24w 23w 22w 21w
Tid itemset Tid itemset Tid itemset Tid Itemset
4 {1,3,5} 9 {2,9} 11 {3,6} 14 {3,9}
5 {2,7} 10 {3,4,5} 12 {1,9} 15 {1,4,5}
6 {3,5,6} 13 {2,7,8}
7 {1,7}
8 {1,3,5}
表九 SP21 的交易編號之集合
item Tid
{1} {15}
{3} {14}
{4} {15}
{5} {15}
{9} {14}
表十 包含各 item 的交易編號之集合(
jSP2 )
jSP2
item
j=4 j=3 j=2 j=1 CS2
{1} {4,7,8}  {12} {15} {4,7,8,12,15}
{2} {5} {9} {13}  {5,9,13}
{3} {4,6,8} {10} {11} {14} {4,6,8,10,11,14}
{4}  {10}  {15} {10,15}
{5} {4,6,8} {10}  {15} {4,6,8,10,15}
{6} {6}  {11}  {6,11}
{7} {5,7}  {13}  {5,7,13}
{8}   {13}  {13}
{9}  {9} {12} {14} {9,12,14}
表十一 item 的加權支持個數(
jSP2 )
jSP2
item
j=4 j=3 j=2 j=1 加權支持個數
{1} 3 0 1 1 1
{2} 1 1 1 0 0.6
{3} 3 1 1 1 1.2
{4} 0 1 0 1 0.6
{5} 3 1 0 1 0.9
{6} 1 0 1 0 0.4
{7} 2 0 1 0 0.5
{8} 0 0 1 0 0.3
{9} 0 1 1 1 0.9
5. 結論
在本論文中，我們提出加權移動視窗模式的架構，讓使用者可以根據資料的重要性，
對各個視窗設定不同的權重，使資料流探勘的結果更符合使用者的需求。
此外，我們所設計的 one-pass 資料流探勘演算法，不需要儲存所有可能的 itemsets 在各個
時間點的 support count，而是利用動態快速計算的方式來產生所有 large itemsets。我們預
