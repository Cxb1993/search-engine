1 Introduction
Trees are widely used to represent evolutionary, his-
torical, or hierarchical relationships in various fields
of classification. Biologists use the information con-
tained in the DNA sequences of a collection of organ-
isms, or taxa, to infer the evolutionary relationships
among those taxa. Phylogenetic trees typically rep-
resent the evolutionary history of a collection of ex-
tant species or the line of descent of some genes, and
may also be used to classify individuals (or popula-
tions) of the same species. Numerous phylogenetic
inference methods, e.g. maximum parsimony, max-
imum likelihood, distance matrix fitting, subtrees
consistency, and quartet based methods have been
proposed over the years [15, 1, 14, 26, 17, 27, 4];
furthermore, it is rather common to compare the
same set of species w.r.t. different biological se-
quences or different genes, hence obtaining various
trees. The resulting trees may agree in some parts
and differ in others. In general, one is interested in
finding the largest set of items on which the trees
agree. This fact motivates the compelling need to
compare different trees in order to achieve consen-
sus or extract partial agreements. For measuring the
similarity / difference between trees, several distance
measures have been proposed [9], e.g. the symmet-
ric difference metric [23], the nearest-neighbor inter-
change metric [29], the subtree transfer distance [2],
the Robinson and Foulds (RF) metric [24], and the
quartet metric [11, 6].
There have been many suggestions for how to in-
fer the consensus tree from a profile of trees in the
literature [7, 12, 3, 10]. Among them, many exten-
sively investigated results concerning the maximum
agreement subtree problem (MAST). Also known as
the maximum homeomorphic agreement subtree [5],
the problem is: given a set of rooted trees whose
leaves are drawn from the same set of items of size n,
find the largest subset of these items so that the por-
tions of the trees restricted to the subset are isomor-
phic. Amir and Keselman [3] show that the prob-
lem is NP-hard even for 3 unbounded degree trees.
The problem is also hard to approximate. Hein et
al. [19] show that the MAST for three trees with
unbounded degree cannot be approximated within
ratio 2log
δ n in polynomial time for any δ < 1, un-
less NP ⊂ DTIME[2polylog n]. On the positive side,
polynomial time algorithms are obtainable for three
or more bounded degree trees [3, 12], even though
the time complexity is exponential in the bound for
the degree. Efficient algorithms for the MAST prob-
lem for instances of two trees have been widely in-
vestigated in literature. Farach and Thorup [13] give
an O(n1.5 logn) time algorithm for two arbitrary de-
gree trees. Cole et al. [8] show that the MAST of
two binary trees can be found in O(n log n) time,
while the MAST of two degree d trees can be found
in O(min{n√d log2 n, nd logn log d}) time.
With the rapid expansion in genomic data, the
age of large-scale biomolecular sequence analysis has
arrived. An important line of research in post-
genome analysis is to analyze the evolution and
co-evolution genes clustering of genomic sequences.
Facing the known algorithmic difficulties of MAST
problem discussed above, here we turn our attention
to the problem of comparing the descendent subtrees
among a set of different phylogenetic trees according
to their Robinson-Foulds distance metric.
The Robinson-Foulds distance metric [24] is a
commonly used similarity measure, which is closely
related to the notion of symmetric set difference [16].
Formally, let A,B ⊂ S be two clusters of genes set S.
The symmetric set difference, ∆(A,B), is defined by
∆(A,B) = |A∪B\A∩B| = |A\B|+|B\A|. Further,
the normalized cluster distance, a RF-like metric,
d(A,B), is defined as d(A,B) = ∆(A,B)|A|+|B| The normal-
ized cluster distance between two sets is considered
to be a rough measurement of the degree of differ-
ence between them. Note that 0 ≤ d(A,B) ≤ 1;
d(A,B) = 0 if A = B, and d(A,B) = 1 if A∩B = ∅.
In other words, the smaller value of d(A,B) implies
a greater similarity of A,B.
Consider a rooted (unbounded degree) phyloge-
netic tree T with n leaves such that each leaf is la-
belled with a distinct number from 1 to n. Here
we assume that each internal node of T has at least
two children; thus the total size of T is bounded by
O(n). Let v be a (internal or leaf) vertex of T . The
descendent subtree of T descending from v, denoted
by T [v], is the subtree of T composed by all edges
and nodes of T descending from v. Furthermore, we
use LT (v) to denote the set of all descendent leaves
of v in T . That is, LT (v) = {x | x a leaf of T [v]}.
Furthermore, for clarity of presentation, we some-
times omit the subscript T and use L(v) as a short-
hand of LT (v) when the context is clear. Note that
L(v) = {v} if v itself is a leaf.
Let Ti, Tj be two rooted trees whose leaves are
drawn from the same set {1, . . . , n}. Two descen-
dent subtrees of Ti, Tj , namely Ti[vi] and Tj [vj ], are
called leaf-agree if LTi(vi) = LTj (vj). Two leaf-
agree isomorphic (or just isomorphic) subtrees, de-
noted by Ti[vi] ∼= Tj [vj ], are defined recursively as
the following: Either vi ∈ Ti and vj ∈ Tj are two
leaf nodes with the same label; otherwise, the chil-
1
Proof. We propose an O(n2) time algorithm,
All-Pair(T1, T2), shown in Figure ??. The algo-
rithm essentially builds up all ∆(·, ·)’s in a bottom
up manner. The correctness of the algorithm is eas-
ily followed by Corollary 1 and the correctness of the
computation ordering.
To ensure the correct computation ordering, we
introduce the following notations. Recall that the
v-descendant subtree, denoted by T [v], is the sub-
tree induced of by all descendants of v in T ; here we
assume that v is a descendant of itself. The level of
a node v in T , denoted by level(v), is the height of
T [v]. Thus, whenever we traverse nodes of a phylo-
genetic tree T in their increasing levels ordering, we
ensure that the descendants of a node v have already
been visited before v.
It is easily seen that Step 1 of All-Pair can
be computed in O(n) time by a bottom up com-
putation. A commonly used post order nodes tra-
versal of a tree suffices. Let v be the parent of
{v1, . . . , vm} in a tree T . It follows that |L(v)| =
|L(v1)|+ · · ·+ |L(vm)| with the initial condition that
|L(v)| = 1 when v is a leaf. Further, level(v) =
max{level(v1), . . . , level(vm)} + 1 with the initial
condition that level(v) = 1 when v is a leaf. These
computation can be done in time proportional to the
number of edges plus the number vertices in T , i.e.,
O(n) time.
Also, it is clear that the total works for the inner
loop of Step 3 to Step 9 take time proportional to the
number of edges plus the number vertices in T , i.e.,
O(n) time. Since there are exactly O(n) number of
iterations for the outer loop (Step 2), it follows that
All-Pair(T1, T2) finishes in O(n2) time. ¤
3 Nearest Subtrees
The lowest common ancestor (LCA) between two
nodes u and v in a tree is the furthest node from the
root node that exists on both paths from the root to
u and v. Harel and Tarjan [18] have shown that any
n-node tree can be preprocessed in O(n) time such
that subsequently LCA queries can be answered in
constant time.
3.1 Confluent Subtrees
Let T be a phylogenetic tree with leaf nodes L.
Given S ⊂ L, let set Λ(S) = {Lca(x, y) | x 6= y ∈
S} denote the collection of all (proper) lowest com-
mon ancestors defined over S.
Definition 5 (confluent subtree) Let T be a
phylogenetic tree with leaf nodes S. Given S ⊂ L,
the confluent subtree of S in T is a phylogenetic
tree, denoted by T↑S, with leaf nodes S and internal
nodes Λ(S). Further, u ∈ Λ(S) is a parent of v in
T↑S if and only if u is the lowest ancestor of v in T
comparing to any other node in Λ(S).
Our notation of confluent subtree is called induced
subtrees in the literature [8]. Let T be a phylogenetic
tree with leaf nodes L. A post-order (pre-order, or
in-order) traversal of nodes of L within T defines a
tree ordering of nodes on L. The following results is
a generalization of the section 8 of [8].
Lemma 2 Let T be an n-node phylogenetic tree
with leaf nodes L. The following subsequent oper-
ation can be done efficiently after an O(n) time pre-
processing. Given a query set A ⊂ L, the confluent
subtree T↑A can be constructed in O(|A|) time if A
is given in sorted tree ordering; otherwise, T↑A can
be constructed in O(|A| log log |A|) time.
Proof. We propose an O(|A|) time algorithm,
Confluent(T,A), shown in Figure ??. The al-
gorithm requires O(n) time preprocessing phase for
building up the tree ordering of L on T , and per-
form the Lca constant time queries preprocessing
[18]. Further, the input A ⊂ L is assumed to be
listed according to the tree ordering of L; other-
wise, we can use the data structure of van Emde
Boas [28] for sorting these finite ranged integers in
O(|A| log log |A|) time.
The correctness and the time analysis of the
proof is omitted for most of the details are similiar
to the arguments presented [8]. ¤
3.2 Nearest Subtrees
Here we discuss the problem of finding the nearest
descendent subtree within a phylogenetic tree given
a subset of leaf nodes.
Definition 6 (nearest subtree) Let T be a phy-
logenetic tree with leaf nodes L. Given A ⊂
L, a node (internal or leaf) v ∈ T (inducing
T [v]) is the nearest subtree of A in T if (∀x ∈
T ) (d(L(v), A) ≤ d(L(x), A)).
By utilizing Lemma 2, we can efficiently solve the
nearest subtrees problem.
Theorem 3 Let T be an n-leaf phylogenetic tree
with leaf nodes L. Given a collection of pairwise
3
Since all the conditions’ checking can be done in
again O(kn) time, it follows that the leaf-agree sub-
trees problem can be correctly solved in O(kn) time.
¤
Here we show that finding all isomorphic descendent
subtrees of phylogenetic trees can be done in linear
time as well.
Theorem 6 (isomorphic-subtree) Given a set
of n-leaf phylogenetic trees {T1, . . . , Tk}, finding all
k-tuple (v1, . . . , vk)’s such that T1[v1] ∼= T2[v2] ∼=
· · · ∼= Tk[vk] can be done in O(kn) time.
Proof. We use the η(x, i) function, defined in the
proof of Theorem 5, as the basics of testing iso-
morphism. Let x ∈ T1, y ∈ T2, it is clear that
T1[x] ∼= T2[y] implies LT1(x) = LT2(y). To re-
port all possible k-tuple (v1, . . . , vk)’s such that
T1[v1] ∼= T2[v2] ∼= · · · ∼= Tk[vk], it suffices to con-
sider only those leaf-agree subtrees. That is, tu-
ples of the form (η(x, 1), η(x, 2), . . . , η(x, k)) such as
LT1(x) = LT2(η(x, 2)) = · · · = LTk(η(x, k)). Note
that these tuples are obtainable in O(kn) time by
Theorem 5.
We say a vertex x ∈ T1 is a good start if and only
if T1[x] ∼= T2[η(x, 2)] ∼= · · · ∼= Tk[η(x, k)]. Let x be
the parent of {x1, . . . , xm}. Note that x is a good
start implies that each of {x1, . . . , xm} is a good
start, although the converse is not true. To establish
the sufficient and necessary condition, we associate
with each vertex v ∈ T with a unique label and let
λ(v) = minLT (v). Furthermore, for each vertex x
being the parent of a set of vertices {x1, . . . , xm}
in a tree T , we use the ordered list 〈x1, . . . , xm〉 to
arrange these k subtrees in their increasing λ(·) or-
der; i.e., λ(x1) < · · · < λ(xm). It is not hard to see
that the calculation of λ(·)’s and the arrangement
of subtrees ordering can be done for all phylogenetic
trees in linear, O(kn), time. In the following, we
use λ+(x) = 〈λ(x1), . . . , λ(xm)〉 to denote the labels
sequence for children of x. Now it shall be clear to
see that:
T1[x] ∼= T2[η(x, 2)] ∼= · · · ∼= Tk[η(x, k)] or x is a good start
if and only if
each child of {x1, . . . , xm} is a good start, and λ+(x) = λ+(η(x, 2)) = · · · = λ+(η(x, k))
Note that the total works for checking labels of
λ+(·)’s are basically equal to visiting the descendent
edges of the trees. Since no edge will be visited twice,
the total works can not be greater than O(kn), the
upper bound for the total number of edges in these
trees. It follows that the problem of finding all iso-
morphic descendent subtrees can be correctly solved
in O(kn) time. ¤
5 Applications to Bacterial
2CS Sequence Analysis
Rapid adaptation to environmental challenge is es-
sential for bacterial survival. To orchestrate their
adaptive responses to changes in their surroundings,
bacteria mainly use so-called two-component regula-
tory systems (2CS) [20]. These systems are usually
composed of a sensor kinase, which is able to detect
one or several environmental stimuli, and a response
regulator, which is phosphorylated by the sensor ki-
nase and which, in turn, activates the expression of
genes necessary for the appropriate physiological re-
sponse. Sensor kinases (or histidine kinases) usually
possess two domains: an input domain, which mon-
itors environmental stimuli, and a transmitter do-
main, which auto-phosphorylates following stimulus
detection. A classical response regulator contains
an amino-terminally located conserved receiver do-
main that is phosphorylated by the sensor kinase at
a strictly conserved aspartate residue, leading to ac-
tivation of the carboxy-terminal effector or output
domain [22, 25].
The identification of the function of these 2CS
would greatly facilitate not only our understanding
on the basic physiology and regulatory networks of
bacteria but also designing a way to prevent from
causing disease in humans. It is therefore interest-
ing to know whether the gene encoding regulatory
protein and the gene encoding the sensor kinase
in a 2CS were derived by duplication from an ex-
isting 2CS (the co-evolution) or they were evolved
independently and were assembled by recombina-
tion event later. Furthermore, one way of extract-
ing the useful clustering information that might
later lead to functional classifications of these 2CS
from the regulator tree and the sensor tree is to
incorporate the evolutionary information from both
trees. To address these questions, we collect regu-
latory protein encoding genes and sensor-encoding
genes of the 63 2CS within P. aeruginosa [25], and
construct the evolutionary distances as well as the
sensor and regulator gene trees as our model of
co-evolutionary clusterings. Based on these ob-
tained data, we have developed a web-based sys-
tem, mostly consists of a list of PHP programs,
for visualizing and integration of sensor and regula-
5
[14] J. Felsenstein. Numerical methods for inferring
evolutionary trees. Quarterly Review on Biol-
ogy, 57(4):379–404, 1982.
[15] W. M. Fitch. Toward defining the course of evo-
lution: Minimal change for a specific tree topol-
ogy. Systematic Zoology, 20:406–441, 1971.
[16] D. Gilbert, D. Westhead, N. Nagano, and
J. Thornton. Motif–based searching in tops pro-
tein topology databases, 1999.
[17] D. Gusfield. Efficient algorithms for inferring
evolutionary trees. Networks, 21:19–28, 1991.
[18] D. Harel and R. E. Tarjan. Fast algorithms for
finding nearest common ancestors. SIAM Jour-
nal on Computing, 13(2):338–355, 1984.
[19] J. Hein, T. Jiang, L. Wang, and K. Zhang.
On the complexity of comparing evolutionary
trees. Discrete Applied Mathematics, 71:153–
169, 1996.
[20] J.A. Hoch and T.J. Silhavy. Two-Component
Signal Transduction. ASM Press, 1995.
[21] Y.L. Lin. Two component systems se-
quence characteristics identification in bacter-
ial genome. In Sixth Proceedings World Mul-
ticonference on Systemics,Cybernetics and In-
formatics (SCI’2002), pages 445–449, Orlando,
Florida, 2002.
[22] J.S. Parkinson and E.C. Kofoid. Communi-
cation modules in bacterial signalling proteins.
Annu. Rev. Genet., 26:71–112, 1992.
[23] D. F. Robinson and L. R. Foulds. Comparison
of weighted labelled trees. In Combinatorial
mathematics, VI (Proc. Sixth Austral. Conf.,
Univ. New England, Armidale), Lecture Notes
in Mathematics 748, pages 119–126. Springer-
Verlag, Berlin, 1979.
[24] D. F. Robinson and L. R. Foulds. Compari-
son of phylogenetic trees. Math. Biosci, 53(1-
2):131–147, 1981.
[25] A. Rodrigue, Y. Quentin, A. Lazdunski,
V. Me´jean, and M. Foglino. Two-component
systems in pseudomonas aeruginosa: why so
many? Trends Microbiol., 8:498–504, 2000.
[26] N. Saitou and M. Nei. The neighbor-joining
method: a new method for reconstructing phy-
logenetic trees. Molecular Biology Evolution,
4:406–425, 1987.
[27] K. Strimmer and A. von Haeseler. Quartet puz-
zling: a quartet maximum-likelihood method
for reconstructing tree topologies. Molecular
Biology and Evolution, 13(7):964–969, 1996.
[28] P. van Emde Boas. Preserving order in a forest
in less than logarithmic time and linear space.
Information Processing Letters, 6:80–82, 1977.
[29] M. S. Waterman and T. F. Smith. On the sim-
ilarity of dendrograms. Journal of Theoretical
Biology, 73:789–800, 1978.
7
Springer Verlag, Lecture Notes in Computer Science 5092, Dalian, China, June 27-29, 2008.  
 
Terminology and Problem Definition
Abstractly, input to the haplotype blocking problem consists of m haplotype vectors. Each position in a
vector is associated with a site of interest on the chromosome. Usually, the position in the haplotype vector
has a value of 0 if it is the major allele or 1 if minor allele.
Let the haplotype matrix A be an m× n matrix of m observations over n markers (sites). We refer to
the jth allele of observation i by Aij . For simplicity, we first assume that Aij ∈ {0, 1}. A block, or marker
interval, [j, k] = 〈j, j + 1, . . . , k〉 is defined by two marker indices 1 ≤ j ≤ k ≤ n. A segmentation is a
set of non-overlapping non-empty marker intervals. A segmentation is full if the union of the intervals is
[1, n]. The data matrix limited to interval [j, k] is denoted by A(j, k); the values of the ith observation are
denoted by A(i, j, k), a binary string of length k − j + 1. Figure 1 illustrates an example of a 7 × 11 0-1
haplotype matrix.
1 2 3 4 5 6 7 8 9 10 11
 1 2 3 4 5 6 7 8 9 10 11 
h1 1 0 0 0 0 0 1 0 0 0 1 
h2 1 0 1 1 0 0 0 1 1 0 0 
h3 0 0 1 0 0 0 1 1 0 0 1 
h4 1 1 1 0 1 0 0 0 1 1 1 
h5 1 1 0 0 0 1 1 0 1 1 1 
h6 0 0 0 0 0 0 1 0 0 0 1 
H7 0 1 0 0 0 0 1 1 0 0 0 
 
Fig. 1. A haplotype matrix A and its corresponding submatrix A(8, 11).
Given an interval [j, k], a diversity function, δ : [j, k]→ δ(j, k) ∈ R is an evaluation function measuring
the diversity of the submatrix A(j, k). We say an interval [j′, k′] is a subinterval of [j, k], written [j′, k′] ⊂
[j, k], if j ≤ j′ and k′ ≤ k. Note that δ-function is a monotonic non-decreasing function from [1..n, 1..n] to
the unit real interval [0, 1]; that is, 0 ≤ δ(j′, k′) ≤ δ(j, k) ≤ 1 whenever [j′, k′] ⊂ [j, k].
Given an input set of n haplotype vectors, a solution to the Haplotype Block Selection (HBS) Problem
is a segmentation of marker intervals, revealing these non-overlapped haplotype blocks of interest in the
chromosome.
Problem 1 (Haplotype Block Selection – HBS (Generic)).
Input: A haplotype matrix A.
Output: A set S of marker intervals satisfying some given constraints.
Here in this paper we propose several efficient algorithms related to selecting interesting haplotype blocks
under different evaluation (diversity) functions that generalizes many previous results in the literatures
[15, 22, 6, 19, 1].
Diversity functions Several operational definitions have been used to identify haplotype-block struc-
tures, including LD-based [6, 19], recombination-based [12, 20], information-complexity-based [1, 13, 8] and
diversity-based [2, 15, 21] methods. The result of block partition and the meaning of each haplotype block
may be different by using different measuring formula. For simplicity, haplotype samples can be converted
into haplotype matrices by assigned major alleles to 0 and minor alleles to 1.
Definition 1 (haplotype block diversity). Given an interval [i, j] of a haplotype matrix A, a diversity
function, δ : [i, j]→ δ(i, j) ∈ R is an evaluation function measuring the diversity of the submatrix A(i, j).
Haplotype blocks are the genome regions with high LD, thus it implies that no matter what kinds
of haplotype block definition we used, the patterns of haplotype within the block will be small, and the
diversity of the block will be low. In terms of diversity functions, the block selection problem can be viewed
Problem 3 (farthest-sites). Given a haplotype matrix A and a given real diversity upper limit D, for each
marker site i find its corresponding farthest right marker j = R[i] so that δ(i, j) ≤ D. That is, output the
set {R(i) = j | δ(i, j) ≤ D < δ(i, j + 1), 1 ≤ i ≤ j ≤ n}. To simplify the boundary condition, we assume
that δ(i, n+ 1) =∞.
We show that all farthest-sites can be found totally in O(mn) time, linear proportional to the input
size, by the the similar techniques of the suffix tree as in the all-pair-block-diversity problem.
Problem 4 (longest-block). Given a haplotype matrix A and a diversity upper limitD, find the longest block
[i, j] so that δ(i, j) ≤ D. That is, output the argmaxi,j{|[i, j]| = j − i+ 1 | [i, j] ⊂ [1, n] and δ(i, j) ≤ D}.
We show that the longest-block can be found in O(n) time by examining the O(n)-sized farthest-sites
array; that is, the the longest-block can be found in linear time.
Problem 5 (k-longest-blocks). Given a haplotype matrix A and a diversity upper limit D, find a seg-
mentation consists of k feasible blocks such that the total length is maximized. That is, output the set
S = {B1, B2, . . . , Bk}, with δ(B) ≤ D for each B ∈ S, such that |B1|+ |B2|+ · · ·+ |Bk| is maximized.
We show that the k-longest-blocks can be found in O(nk). These blocks can be identified by examining
the farthest-sites array and sing the technique of sparse dynamic programming.
Problem 6 (all-intra-longest-block). Given a haplotype matrix A, a diversity upper limit D, for all con-
strained interval [i, j] ⊂ [1, n], find the corresponding longest block B ⊂ [i, j] with δ(B) ≤ D. That is,
output the argmaxB⊂[i,j]{|B| | B ⊂ [i, j] and δ(B) ≤ D}.
We show that the all-intra-longest-block can be found totally O(n2) time, which is a linear time
algorithm proportional to the output size.
Problem 7 (all-intra-k-longest-blocks). Given a haplotype matrix A, a diversity upper limit D, for all
constrained interval [i, j] ⊂ [1, n], find the longest segmentation with k feasible blocks such that the total
length is maximized. That is, output the set S = {B1, B2, . . . , Bk}, with δ(B) ≤ D for each B ∈ S,B ⊂
[i, j], such that |B1|+ |B2|+ · · ·+ |Bk| is maximized.
We show that the all-intra-k-longest-blocks can be found totally in O(n2k) time, which is a linear
time algorithm proportional to the output size.
Results
The rest of the paper is organized as the following. In Section 2, we propose an O(mn + n2) time, linear
proportional to the input plus output size, algorithm for computing the all-interval-diversities prob-
lem. We also show that all farthest-sites can be found totally in O(mn) time, linear proportional to
the input size. As a corollary, we show that the longest-block can be found in O(n) time by examining
the O(n)-sized farthest-sites array; that is, the the longest-block can be found in linear time. In Sec-
tion 3, we show that the k-longest-blocks can be found in O(nk). These blocks can be identified by
examining the farthest-sites array and sing the technique of sparse dynamic programming. We also show
that the all-intra-longest-block can be found totally O(n2) time, which is a linear time algorithm
proportional to the output size. The problem of all-intra-k-longest-blocks can be found totally in
O(n2k) time, which is a linear time algorithm proportional to the output size.
2 Computing Diversities of all Blocks
Given an m× n haplotype matrix A, the goal here is to compute the all pairs block diversity values. That
is, output the set {δ(i, j) | 1 ≤ i ≤ j ≤ n}. Here we show that by using techniques of the suffix tree [9, 17],
there exits an O(mn+n2) time, linear proportional to the input plus output size, algorithm for computing
the all-interval-diversities problem. Consider the 7×11 haplotype matrix illustrated at Figure 1, the
computation of the submatrix diversity, say A(4, 7), can be illustrates at Figure 2.
Our notation of confluent subtree is called induced subtrees in the literature [3]. Let T be a phylogenetic
tree with leaf nodes L. A post-order (pre-order, or in-order) traversal of nodes of L within T defines a tree
ordering of nodes on L. The following results is a generalization of the section 8 of [3].
Lemma 1. Let T be an n-node phylogenetic tree with leaf nodes L. The following subsequent operation can
be done efficiently after an O(n) time preprocessing. Given a query set A ⊂ L, the confluent subtree T↑A
can be constructed in O(|A|) time if A is given in sorted tree ordering; otherwise, T↑A can be constructed
in O(|A| log log |A|) time.
Confluent(T,A)
Input:A trees T with leaves L = {1, 2, . . . , n}, A ⊂ L.
Output: The confluent subtree of A in T , T↑A.
Preprocessing: Compute the tree ordering of L on T and the Lca queries preparation [11].
Notations: p[·, T ′], left[·, T ′], right[·, T ′]: parent, left, right children links.
1 Let A = 〈v1, v2, . . . , vk〉 be nodes of A in the tree ordering.
2 Create a dummy node λ and let level[T, λ]← +∞ ; Push(S, λ)
3 for i← 1 to k − 1 do B visit each vi’s.
4 x← Lca(vi, vi+1) ; y ← vi
5 while level[x, T ] > level[top[S], T ] do y ← Pop(S)
6 Push(S, x) ; p[vi+1, T
′]← x ; p[y, T ′]← x ; p[x, T ′]← top[S]
7 left[x, T ′]← y ; right[x, T ′]← vi+1 ; right[top[S], T ′]← x
8 root[T ′]← right[λ, T ′] ; return T ′ as T↑A;
Fig. 4. Computing the confluent subtree.
Proof. We propose an O(|A|) time algorithm, Confluent(T,A), shown in Figure 4. The algorithm re-
quires O(n) time preprocessing phase for building up the tree ordering of L on T , and perform the Lca
constant time queries preprocessing [11]. Further, the input A ⊂ L is assumed to be listed according to the
tree ordering of L; otherwise, we can use the data structure of van Emde Boas [18] for sorting these finite
ranged integers in O(|A| log log |A|) time. The correctness and the time analysis of the proof is omitted for
most of the details are similiar to the arguments presented in [3]. ¤
By Lemma 1, in O(mn) time, we can partition leaves of T ∗ into n sets {A1, A2, . . . , An}, where Ai consists
of all m suffixes started at column i in given haplotype matrix. These Ai’s subsets can be used to construct
the corresponding n confluent LCA subtrees, T ∗↑Ai ’s, as illustrated in Figure 5.
		 
		 		 		
 
Fig. 5. The corresponding n confluent LCA trees for n columns in a haplotype matrix.
Each LCA tree T ∗↑Ai represent the changing structure of m rows of submatrix A(i, n). Figure 6 shows an
example the confluent LCA subtrees, T ∗↑A8 , taken from the haplotype matrix shown in Figure 1. Observe
how the LCA tree reveals the structure of A(8, 11).
3 Longest k Blocks with Diversity Constraints
We discuss a series of problem related to finding multiple blocks with diversity constraints in the section.
Given a haplotype matrix A and a diversity upper limit D, let S = {B1, B2, . . . , Bk} be a segmentation
of A with δ(B) ≤ D for each B ∈ S. The length of S is the total length of all block in S; i.e., `(S) =
|B1|+ |B2|+ · · ·+ |Bk|. Our objective is to find a segmentation consists of k feasible blocks such that the
total length `(S) is maximized.
Given A and D, first we consider the most general form of the problem and define the block length
evaluation function
f(k, i, j) = max{`(S) | S a feasible segmentation of A(i, j) with k blocks}
Note that the k-longest-blocks asks to find the value f(k, 1, n). First of all, we prepare the left farthest
sites, L[j]’s, for each site j of A; according to Theorem 2, the array can be identified in O(mn) time. Here
we show that the answer can be found in O(nk) time after the preprocessing. The idea behind the dynamic
programming formula is illustrated at Figure 8.
 

 
	

Fig. 8. The O(kn) algorithm to compute f(k, 1, n).
It can be verified that
f(k, 1, j) = max{f(k, 1, j − 1), f(k − 1, 1, L[j]− 1) + j − L[j] + 1}
That is, the k-th block of the maximal segment S in [1, j] either does not include site j; otherwise, the
block [L[j], j] must be the last block of S. Note that f(k, 1, j) can be determined in O(1) time suppose
f(k − 1, 1, ·)’s and f(k, 1, 1..(j − 1))’s being ready. It follows that f(k, 1, ·)’s can be calculated from f(k −
1, 1, ·)’s, totally in O(n) time. Thus a computation ordering from f(1, 1, ·)’s, f(2, 1, ·)’s, . . . , to f(k, 1, ·)’s
leads to the following result.
Theorem 3 (k-longest-blocks). Given a haplotype matrix A and a diversity upper limit D, find a seg-
mentation consists of k feasible blocks such that the total length is maximized can be done in O(nk) time
after a linear time preprocessing.
Given A and D, the all-intra-longest-block asks to find, for all constrained interval [i, j] ⊂ [1, n],
the corresponding longest block B ⊂ [i, j] with δ(B) ≤ D. That is, the values f(1, i, j)’s. Similarly, we first
prepare the farthest sites of A in O(mn) time. Here we show that the answer can be found in O(n2) time
after the preprocessing. Using similar idea as illustrated at Figure 8. It can be verified that
f(1, i, j) = max{f(1, i, j − 1), (j − L[j] + 1)}
That is, the longest block in [i, j] either does not include site j; otherwise, the block [L[j], j] must be
the longest (feasible) block within [i, j]. Note that f(1, i, j) can be determined in O(1) time whenever
f(1, i, 1..(j − 1))’s being ready. It follows that f(1, i, ·)’s can be calculated totally in O(n) time. Thus a
computation ordering from f(1, 1, ·)’s, f(1, 2, ·)’s, . . . , to f(1, n, ·)’s leads to the following result.
Theorem 4 (all-intra-longest-block). Given a haplotype matrix A and a diversity upper limit D, find
for all constrained interval [i, j] ⊂ [1, n], the corresponding longest block B ⊂ [i, j] with δ(B) ≤ D can be
done in O(n2) time after a linear time preprocessing.
