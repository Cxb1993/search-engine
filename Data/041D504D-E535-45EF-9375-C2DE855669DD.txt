確的封包傳輸下，使用相同時槽傳輸封包，可縮短訊
框 (frame) 的長度及減少封包傳輸延遲。DTM-BU和
DTM-block則改善DTM-TD在基地台下有多個子節點
時，運用節點選取順序和測試時槽正確傳輸的方式，
有效增加時槽的重疊以縮短訊框長度。EEM包括兩種
方法： SEEM (Static Energy-Efficient Method) 和
DEEM (Dynamic Energy-Efficient Method)，其父節點
皆需要收集其所有子節點的封包，並經過聚集計算後
才可將資料傳送，故以由下而上的方式由樹狀結構中
的葉節點開始分配時槽，不在傳輸影響範圍內的節點
皆可平行傳輸，再藉由聚集計算後減少封包數量的方
法，節點可避免傳送無實際應用價值的封包，達到省
電的目的。其中SEEM將假設經過聚集計算後封包數
不減少，故節點分配與其子節點相同個數的時槽，而
DEEM假設計算後封包數固定，先分配節點少量的時
槽個數，若有過多的封包時再另外要求時槽。這兩類
型的集中式TDMA MAC協定，各有適當的使用時
機，我們可視應用和需求選用。 
我們提出的兩類型方法也具有拓樸管理和處理變
動資料量的能力，透過訊框中保留適當的自由時槽 
(free slot)、傳送控制訊息的時槽 (control slot) 和同步
時槽 (synchronization slot)，使網路中的節點可移動、
新增和刪除，而節點也能在變動資料量的情形下，彈
性的利用未使用的自由時槽傳輸封包，減少經常由基
地台重新安排訊框的控制成本。此外，我們提出的集
中式TDMA MAC協定，較適用於靜態的網路拓樸以
及節點有固定資料量的環境下，對於感測節點經常移
動等不穩定的環境，或資料突然大量增加的情形，需
要較長的時間和額外的電力才能處理。 
我們以實驗模擬的方式將提出的TDMA MAC協定
與以競爭為基礎的TMAC (Timeout-MAC) [7] 和以
TDMA為基礎的TRAMA (TRaffic-Adaptive Medium 
Access) [20] 協定做比較，藉由調整網路中的節點個
數、樹狀結構和資料量，分析在電力和時間上的表
現。本篇論文的貢獻為提出降低封包傳輸延遲為主要
目的的DTM和減少電力花費為主的EEM；降低MAC
協定的控制成本以增加無線感測網路的壽命；減少感
測節點的閒置聆聽及封包竊聽和碰撞的發生；兩類協
定皆可減少電力的花費和封包傳輸的延遲時間；可處
理拓樸變動的問題；支援現有且較經常被使用的查
詢。本論文依序先介紹研究動機和目的，在第2節說
明集中式TDMA MAC協定的背景，第3節介紹我們提
出的兩類集中式TDMA MAC協定，第4節討論如何處
理拓樸變動，第5節呈現實驗結果及評估分析，第6節
為結論和未來研究方向。 
 
2. 背景 
 
我們先討論應用層如何決定節點的資料量，包括固
定和變動的資料量產生的原因，以及如何讓節點根據
應用層的決定工作，再分別說明MAC協定如何處理應
用層的決定，以及TDMA MAC協定在分配時槽上需
要注意的地方。 
 
2.1. 應用層與節點資料量的關係 
 
若從應用層開始考量，得知使用者可能的排程 
(schedule) 後即能了解節點在何種情形下會有固定或
變動的資料量，讓我們可以針對不同的情況或整合各
種情況而設計出適合的MAC協定。如同 [5] 所述，無
線感測網路中節點資料量的產生是由應用層來決
定，[16] 說明應用層如何決定節點的資料量。TinyDB
是一個分散式的查詢處理器，可以被使用在感測網路
中的每個節點，故可做為查詢處理的平台[16]。在無
線感測網路的應用中，主要可分為三種查詢來決定節
點的排程：(1) 定時查詢 (interval-based query)：可指
定特定的感測節點，使其在排定的時間間隔內回傳偵
測結果，也可做一些資料整合的運算，因此若使用此
類型的查詢，感測節點將在固定的時間間隔產生資
料；(2)事件查詢 (event-based query)：類似定時查詢，
但當特別的事件發生時，感測節點才執行此查詢。因
為我們無法預知事件的發生，故此類型的查詢將使節
點有不固定的資料量；(3)長期查詢  (lifetime-based 
query)：設定無線感測網路中節點使用的壽命，而不
強制指定節點回傳資料的時間間隔，但此時間間隔可
以在決定節點的使用壽命後被計算出來。本論文將長
期查詢視為定時查詢討論，若使用這兩種查詢，我們
可以將節點的排程視為固定的資料量。在實際應用
上，不同的需求可使用不同查詢，而MAC協定對於不
同類型的查詢可有不同的處理方法。 
除了查詢類型的討論外，當應用層決定查詢後需要
讓網路中的節點知道以便實行，其散佈的方式是由基
地台發送，經由根節點廣播給其子節點，再由這些節
點廣播給其子節點，如此反覆直到整個網路中參與查
詢的節點都接收到為止。當節點接收到查詢時，要決
定查詢只需在節點中執行或需要向其子節點散佈，若
一個查詢不被使用在特定的節點以及其子節點時，則
這些節點可不參與此查詢，不需再將查詢向下傳播，
並進入睡眠狀態以減少電力的花費。此外，[16] 也提
出SRT (Semantic Routing Tree) 的方法以分佈查詢於
部份網路中。概念上，SRT根據節點分佈的物理位置
為其編碼，例如給予節點座標，而使用者可在查詢中
指定節點的座標位置，不在座標範圍內的節點將不參
與此查詢，如此將可指定分佈於特殊區域內的節點，
為其設定排程。 
 
2.2. 集中式TDMA MAC協定 
 
因為節點的資料量主要經由應用層決定，包括事件
查詢也是由應用層決定觸發事件所需要的條件，再由
基地台將應用層決定的訊息依序廣播給網路中有參
與查詢的每個節點，故基地台在最初應用層決定節點
的排程後，即可安排節點需要使用的時槽，再將分配
後的時槽連同查詢一起廣播給網路中的節點，而不先
廣播查詢後再由節點間互相協調時槽的使用權，此為
集中式的TDMA MAC協定。在無線感測網路環境
中，雖然所有節點都使用於同一個應用，維持節點間
的公平性不是一個重要的議題，但每個節點因為分佈
區域的不同，或使用事件查詢，或查詢指定特別節點
重疊的方法讓多個節點在同一時槽傳送封包，以縮短
訊框長度，降低封包在不同訊框間的傳輸延遲。EEM
的設計主要透過節點收集封包後，利用聚集的計算以
減少傳送的封包數量，達到省電的目的。 
 
1
2
5
8
4
B
3
7
6 
1
B
2
1
1
B
1 
B 
3 
1 
2
1
1
B
4
2
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
2
1
1
B
2 
1 
1 
B 
7
4
4
2
8
7
4
2
3 
1 
1 
B 
5 
3 
3
1
1
B
time slot ID7
4
6 
3 
2 
1 
1 節點 ID 
使用連續時槽傳送封包
接收端 
 傳送端 
圖2. 使用DTM-TD的例子 
 
3.1. DTM 
 
無線感測網路在一些應用上，希望節點收集資料後
能迅速回應，以快速的反應出環境的變化，達到應用
上對及時性的需求。針對這些類型的應用，DTM的設
計將主要以減少封包傳輸延遲為目的，其次才為降低
電力的消耗。底下我們將介紹三種DTM，分別為
DTM-TD、DTM-BU和DTM-block，各以不同的方式
增加節點平行傳輸，以減少封包傳輸的延遲。 
 
3.1.1. DTM-TD 
 
底下介紹的DTM將先以處理定時查詢為主，在
各節點有固定資料量的情況下，替每個節點安排傳輸
的時槽。若使用事件查詢，也和定時查詢一樣，在訊
框中替每個節點安排其傳輸的時槽，但對於變動資料
量的部分將在第4節的新增節點時討論如何處理。 
 
DTM-TD對於定時查詢而言，因假設訊框的長度比
排程時間間隔短，故在某些訊框時可能會有特定的節
點其排程還未到，在分配到的時槽下節點無資料傳
送，故收送兩端都可繼續保持睡眠狀態不需醒來。因
此，基地台在經過DTM-TD的時槽分配法後，需要將
此資訊散佈給網路中的感測節點，基地台首先使用廣
播的方式將此資訊傳給level=1的節點，level=1的節點
再廣播給其level=2的子節點，以ripple的方式一層層傳
遞，直到所有參與查詢的節點都接收到為止。其中此
訊息的封包標頭需包括：參與此次查詢的節點ID；查
詢的類型，為定時查詢或事件查詢；查詢的需求，包
含欲取得的環境參數、各節點的排程間隔時間等；各
節點被分配到的時槽ID，包含需要傳送或接收的部
分。而節點在收到此廣播訊息之後，也需要記錄其被
分配到的時槽ID，需要醒來的訊框間隔以及醒來的狀
態為傳送或接收等。 
DTM-TD以由上而下的方式依序給予節點時
槽，樹的走訪則可使用深度優先或廣度優先方式。
DTM-TD是以快速傳送封包為目的，因此節點將不做
封包收集的動作，即不暫存封包亦不對封包做計算處
理，在節點接收到其子節點傳送的封包後立刻傳送給
其父節點，以減少封包的延遲時間，故對每個節點的
封包給予連續的時槽傳輸。在時槽安排不會產生錯誤
的情形下，我們發現其中有些節點的資料是可以被平
行傳輸的，即這些節點的部分傳輸時槽可以重疊，且
可平行傳輸的時槽多寡和節點在樹中的level值有關，
這些節點雖然有傳輸路徑連結卻不會影響彼此的傳
輸 。 這 些 可 平 行 傳 輸 的 節 點 如 下 所 述 ：
，若|c-f|=d, d 3，且c為f的祖父節
點，ts(c)-ts(f)=k，若k=0則為時槽重疊。只有當兩節點
距離為3以上時，時槽才能重疊，否則將發生碰撞或
無法傳送的錯誤情形，且d=3時可重疊1個位置，d=4
時可重疊2個位置，故以此類推d=n時可重疊n-2個位
置。 
fcTfc ,,, ∀∈ ≥
此外，DTM-TD和[3]中的DFS法有相同的缺點。雖
然我們的方法使用top-down的方式安排時槽，而 [3]
使用bottom-up的方式，但節點都需要經常的做狀態轉
換，包括醒來和睡眠、傳送和接收等的狀態轉換，都
將消耗少量不必要的電力。 
經過時槽重疊的處理後，我們可根據節點的level
值重新求得其所使用的時槽個數。若節點的level=1，
其佔用的時槽個數為1；若節點的level=2，其佔用的
時槽個數為2；若節點的level=3，其佔用的時槽個數
為3；若節點的level=4，其實際佔用的時槽個數為3 (因
可和 level=1的節點重疊1個時槽位置 )；若節點的
level=5，其實際佔用的時槽個數為3 (因可和level=2的
節點重疊1個時槽，且下一個傳輸時槽和level=1的節
點重疊，共可重疊2個時槽位置)；依此類推，若節點
的level=n，其實際佔用的時槽個數為3 (因可重疊n-3
個時槽)，因此，若已知傳輸的樹狀結構，則訊框長度
可用數學式求得：frame = 1*x+2*y+3*z (x為level=1的
節點個數，y為level=2的節點個數，z為level≥ 3的節點
個數。) 圖2為經過時槽重疊處理過後的例子。 
 
3.1.2. DTM-BU 
 
若基地台底下有多個子節點，則我們將這些子節
點視為不同的根節點；不同的根節點及其底下的節點
稱為分支。當基地台底下有多個分支，這些分支中的
節點因沒有傳輸路徑相連，故在封包的傳輸上除了共
同的父節點處 (基地台) 會發生碰撞外，不同分支節
點使用的其他時槽部分皆可重疊，DTM-TD在分支的
部分沒有做時槽重疊的動作，故其縮短的訊框長度有
限。DTM-BU 的方法將針對DTM-TD的此缺點做改
善。 
DTM-BU和DTM-TD一樣，所有節點的封包傳輸都
使用連續的時槽，在傳送的過程中將不暫存於節點
中。DTM-BU主要概念為決定一節點安排時槽的順 
3.2.2. DEEM 而後者將假設節點做完聚集後封包數皆為1，若有多
出的封包再要求額外的傳輸時槽。  
SEEM中不論節點做完聚集後的封包個數，時槽皆
一律以其子樹大小分配，此做法可適用於計算完後封
包數不固定的情況下。然而，在做完某些聚集後，我
們可得知節點的封包個數（例如sum、average、count、
max和min等），不論節點接收的封包多寡，在聚集的
計算後都將只剩下一個封包，因此，針對此類型的聚
集，我們提出DEEM 的方法。DEEM類似SEEM，節
點需要接收完其所有子節點的封包後，經過計算才能
傳輸，不同點在於DEEM假設節點在做完聚集後，剩
餘的封包個數固定，只安排一個時槽給所有計算完的
節點傳輸。圖6為DEEM分配節點時槽的例子。若使用
DEEM時，節點做完聚集後封包個數超過事先安排的
時槽個數，則節點可再要求額外的時槽傳輸，做法將
在第4節新增節點時介紹。SEEM和DEEM可根據查詢
指定的聚集類型選用，若在每次節點收集封包計算
後，剩餘的封包數固定，則可選用DEEM，若無法確
定計算後將剩餘的封包個數，則選用SEEM能避免封
包超過事先安排的時槽個數時，要求額外時槽花費的
電力。 
 
3.2.1. SEEM 
 
EEM針對節點做聚集的需求設計，對於每個節點
都需要收集其所有子節點的資料封包之後，經過計算
完才能再向其父節點傳送，此外，針對EEM我們假設
聚集的計算時間以時槽為單位，多餘的部分節點可轉
換為睡眠狀態。以下EEM的介紹皆為固定資料量的情
況，即使某些節點因為排程的關係在特定的訊框中無
資料傳送，我們也將替每個節點在訊框中安排其傳輸
的時槽。因為所有節點皆必須接收完其子節點的資
料，所以時槽的分配首先由葉節點開始，而所有不在
影響範圍內的節點，即不在2-hop內的節點都可以平行
的傳輸，使用同一個時槽ID傳送資料給各自的父節
點。若一節點擁有多個子節點，且這些子節點皆已接
收並計算完其子節點的資料封包，因節點需要接收完
其子節點的封包才可繼續動作，且這些子節點無法平
行傳輸 (在2-hop範圍內將發生碰撞)，故子節點間需
使用不同的時槽ID傳輸，而選擇的順序不同並不影響
整體結果。節點接收完所有子節點的資料封包後，才
可開始做聚集，若聚集的計算為 (sum或max等)，則
不論接收了多少封包，在每次節點做完計算後都只需
要傳送一個處理過後的封包，因此在計算的時槽過後
只需安排一個時槽給節點傳送即可。然而在做過某些
聚集後 (例如大於或小於)，無法估計所能減少的封包
數。因此SEEM都將以最壞的情況處理，即假設經過
聚集的計算後封包數量不會減少，故安排和子樹大小
相同數量的時槽給予此節點向上傳送。節點在收集完
其子節點的資料後，經過計算處理並將結果傳送給父
節點，如此反覆以由下而上的方式經由基地台安排時
槽，直到整棵樹中有參與查詢的節點都走過為止，最
後基地台再將此安排時槽的結果廣播給網路中的節
點。圖5為使用SEEM分配節點時槽的範例。 
 
 
1 2 3 4 5 6 7 8 9
1 
2 
5 4
B 
3
8 10 9 11 
8
4
12
6
10
5
5 
5
2
7 
4
2
2
1
12
76 
12 13 14
1
B
14
7
9
4
13
6
11
5
7
3
4 
6 
6
3
3
3
1
正在做計算的節點 ID
2
1
1 節點 ID
接收端 
 傳送端 
1
圖6. 使用DEEM的例子 
 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
23 24 25 26 27 28 
1 
2
5 4 
B 
3 
8 109 11 
1 
B 
8 
4 
4 
2 
3 
7 6 
14 
12 
6 
10 
5 
5 
5 
2 
5 
2 
5 
2 
7 
4 
2 
4 
2 
2 
1 
2 
1 
2 
1 
2 
1 
2 
1 
2 
1 
2
1
1
1 
B 
1
B
1
B
1
B
29 30 
1 
B 
1 
B 
1 
B 
1 
B 
1 
B 
1 
B 
2 
76 3 3 2
12 13 14
31 32 33 34 35
1 
B 
1 
B 
1 
B 
14 
7 
9 
4 
13 
6 
11 
5 
7 
3 
7 
3 
4 
6 
6 
3 
6 
3 
6 
3 
3 
3 
1 
3 
1 
3 
1 
3
1
3 
1 
3 
1 
22
36
正在做計算的節點 ID 
2 
1 
1 節點 ID 
接收端 
 傳送端 
1 
 
圖5. SEEM範例 
 
EEM和DTM相同，在某些訊框會因節點的排程時
間間隔未到而沒有資料的情形，因此節點除了需記錄
被分配到的時槽ID，需醒來的訊框和醒來狀態為接
收、傳送或計算之外，還需要記錄在哪些訊框需接收
幾個子節點的資料，除此之外，此法在基地台安排時
槽後廣播的封包標頭和DTM相同。 
EEM雖然是一個以節省電力為主的集中式時槽分
配法，和DTM降低封包延遲時間的目的不同，但是在
某些樹狀結構下，使用SEEM封包傳輸的延遲會比使
用DTM-TD低。因此若一棵樹有較多可平行傳輸的節
點 (例如葉節點較多的樹)，則使用SEEM的訊框長度
可短於DTM-TD，能有較低的封包傳輸延遲時間，例
如完全二元樹 (所有葉節點都在同一層且每個節點都 
我們使用程式來模擬無線感測網路在環境中的運
作情形，主要分成不同節點數和不同資料量等情況來
討論。實驗中使用由基地台產生的routing tree。節點
使用定時查詢和事件查詢做為資料產生的依據，定時
查詢指定網路中的所有節點參與，且皆使用相同的排
程。事件查詢指定網路中所有節點參與並使用相同的
環境參數，而節點產生的資料量以事件到達率計算，
若事件到達率為1，表示所有節點在每個訊框中都有
一個資料封包欲傳送，若事件到達率低於1，則將以
事件到達率乘上所有節點個數後，使用此數值隨機選
出有資料的節點，當作事件發生後節點收集環境資
訊。不同節點個數的實驗使用定時查詢，而不同資料
量的實驗使用事件查詢。 
實驗的比較對象中，除了TRAMA的資料封包為
(896*R)bytes以及其他時槽封包  (random access、
schedule packet、ChangeOver) 為(128*R) bytes外，我
們提出的方法和TMAC資料封包大小皆為 (256*R) 
bytes [4]，TMAC的控制封包 (RTS、CTS、ACK) 為
(20*R) bytes [1]，其中R為封包重傳的次數，使封包傳
輸在無線環境下有更高的可信度。而我們提出的方法
在實驗中，同步時槽長度為(5*R) bytes，時槽個數設
定為2，根據EYES node的無線電傳輸速率，同步時間
花費0.7 ms，控制時槽長度為(20*R) bytes，個數為樹
狀結構中的階層數加上5，自由時槽長度同資料封包
大小為(256*R) bytes，個數為資料傳輸時槽的三分之
一。我們的方法在以下實驗中，訊框都將包含這四種
時槽。TRAMA的random access部分，長度為7*1.44*N 
(N為所有節點個數) [20]，約需要花費(90*N) ms，
schedule_interval長度為N*2 [20]。在TRAMA中無提及
schedule access的長度，而父節點必須接收所有子節點
的封包，故在此我們假設各節點分配到的時槽個數等
於其階層值，如此可讓每個節點都有足夠使用的時槽
個數，將不會發生因為節點優先權固定而有節點無時
槽可用的情形，最後，ChangeOver長度等於所有節點
個數 [20]。 
 
5.3. 實驗結果 
 
5.3.1. 不同節點數下電力和時間的比較 
 
此實驗將藉由調整不同的節點個數，比較
DTM-TD、SEEM和其他協定在電力及時間上的花
費。每種節點個數使用不同的樹狀拓樸，並將結果取
平均值。 
圖7和圖8分別為各協定間時間和電力的實驗結
果。TRAMA因為封包碰撞遺失導致的排程不一致問
題，如此將增加資料封包的長度，需要使用較多的電
力和時間傳送一個封包，且其他控制封包大小為資料
封包的七分之一 (128 bytes) [20]，也較TMAC和我們
的方法使用的封包大，因TRAMA協定的需求皆使用
長度較長的封包，且需要交換過多的控制封包和排程
訊息，並使得閒置聆聽的時間增加，而在資料封包傳
輸的時槽部分，因沒有做時槽重疊或平行傳輸，故時
槽需使用的個數將比我們的方法多，為此法主要耗電
和耗時的原因，故此協定的表現在四種協定中最差。
圖7的時間上，SEEM、DTM-BU、DTM-block、TMAC
並無太大的區別，而DEEM則為所有協定中花費時間
最少的協定。 
圖8中TMAC在碰撞或節點無法傳輸時 (例如其父
節點收到RTS或CTS)，將一直閒置聆聽而不會轉為睡
眠狀態，因為以競爭為基礎的協定在發生碰撞後，若
節點轉為睡眠狀態將不知此狀態需維持多久 (經常的
狀態轉換也將花費額外電力)，故維持醒來狀態並隨機
選擇一段時間後，再進入contention window嘗試發送
訊息，而這段時間內節點的無線電皆為閒置聆聽為其
電力表現差的主要原因。雖然此實驗中SEEM的訊框
長度比DTM-TD的訊框長度多約兩倍，但因為傳送和
接收的所有封包個數一樣，在以TDMA為基礎的協
定，各個時槽中若不為傳送或接收的節點，可持續維
持睡眠狀態，故訊框長度較長之下，節點睡眠的時間
較多，而睡眠花費的電力極少，故SEEM花費的電力
和DTM-TD相近。此外，在使用我們的集中式TDMA 
MAC協定時，基地台廣播查詢和時槽分配資訊的電
力，在節點個數為30時約為5mA，故若在經過一段時
間後需由基地台重新分配時槽，也不需花費過多電
力。 
 
0
1
2
3
4
5
6
7
8
9
10 20 30 節點個數
時
間
(s
)
DTM-TD
DTM-block
DTM-BU
SEEM
DEEM
TRAMA
TMAC
圖7. 不同節點個數下傳輸花費的時間 
0
20
40
60
80
100
120
10 20 30 節點個數
電
力
(m
A)
DTM-TD
DTM-block
DTM-BU
SEEM
DEEM
TRAMA
TMAC
圖8. 不同節點個數下傳輸花費的電力 
 
5.3.2. 不同資料量下電力的比較 
 
International Conference on Distributed Computing Systems 
(ICDCS), 2005. 
[6] S. Cho, K. Kanuri, J. W. Cho, J. Y. Lee, S. D. June. 
Dynamic energy efficient TDMA-based MAC protocol for 
wireless sensor networks. In Proc. of the Joint International 
Conference on Autonomic and Autonomous Systems and 
International Conference on Networking and Services 
(ICAS/ICNS), 2005. 
[7] T. V. Dam, K. Langendoen. An adaptive energy-efficient 
MAC protocol for wireless sensor networks. In Proc. of the 
First ACM Conference on Embedded Networked Sensor 
Systems (SenSys), 2003. 
[8] J. Denga, Y. S. Han, W. B. Heinzelman, P. K. Varshney. 
Balanced-energy sleep scheduling scheme for high-density 
cluster-based sensor networks. Elsevier Computer Communi- 
cations Journal, 2005. 
[9] A. Deshpande, S. Nath, P. B. Gibbons, S. Seshan. 
Cache-and-query for wide area sensor databases. In Proc. of 
the ACM SIGMOD International Conference on Management 
of Data, 2003. 
[10] T. Herman, S. Tixeuil. A distributed TDMA slot 
assignment algorithm for wireless sensor networks. First 
International Workshop, ALGOSENSORS, 2004. 
[11] L. v. Hoesel, P. Havinga. A lightweight medium access 
protocol (LMAC) for wireless sensor networks: reducing 
preamble transmissions and transceiver state switches. In Proc. 
of the 1st International Workshop on Networked Sensing 
Systems (INSS), 2004. 
[12] L. Hoesel, T. Nieberg, H. Kip, P. Havinga. Advantages of 
a TDMA based, energy-efficient, self-organizing MAC 
protocol for WSNs. In Proc. of the 59th IEEE Vehicular 
Technology Conference (VTC), 2004. 
[13] R. Kalidindi, L. Ray, R. Kannan, S. Iyengar. Distributed 
energy aware MAC layer protocol for wireless sensor networks. 
International Conference on Wireless Networks, 2003. 
[14] Y. Li, W. Ye, J. Heidemann. Energy and latency control in 
low duty cycle MAC protocols. In Proc. of the IEEE Wireless 
Communications and Networking Conference (WCNC), 2005. 
[15] G. Lu, B. Krishnamachari, C. S. Raghavendra. An 
adaptive energy-efficient and low-latency MAC for data 
gathering in wireless sensor networks. In Proc. of the 18th 
International Parallel and Distributed Processing Symposium 
(IPDPS), 2004. 
[16] S. Madden, M. J. Franklin, J. M. Hellerstein W. Hong. 
The design of an acquisitional query processor for sensor 
networks. In Proc. of the 2003 ACM SIGMOD International 
Conference on Management of Data, 2003. 
[17] S. Mao, Y. T. Hou. BeamStar: A new low-cost data 
routing protocol for wireless sensor networks. Global 
Telecommunications Conference (GLOBECOM), 2004. 
[18] M. J. Miller, N. H. Vaidya. Power save mechanisms for 
multi-hop wireless networks. In Proc. of the First International 
Conference on Broadband Networks (BROADNETS), 2004. 
[19] P. C. Nar, E. Cayirci. PCSMAC: A power controlled 
sensor-MAC protocol for wireless sensor networks. In Proc. of 
the 2nd European Workshop on Wireless Sensor Network 
(EWSN), 2005. 
[20] V. Rajendran, K. Obraczka, J. Garcia-Luna-Aceves. 
Energy-efficient, collision-free medium access control for 
wireless sensor networks. In SenSys, 2003. 
[21] M. A. Sharaf, J. Beaver, A. Labrinidis, P. K. Chrysanthis. 
Balancing energy efficiency and quality of aggregate data in 
sensor networks. The Very Large Data Base (VLDB), 2004. 
[22] Eyes energy efficient sensor networks: http://www. 
eyes.eu.org/sensnet.htm 
 
可供推廣之研發成果資料表 
□ 可申請專利  □ 可技術移轉                                      日期：96 年 10 月 11 日 
國科會補助計畫 
計畫名稱：無線感測網路低耗能媒體存取控制層協定之研究 
計畫主持人：陳耀輝         
計畫編號：NSC95-2221-E-415-006   
學門領域：計算機網路與資料傳輸 
技術/創作名稱 查詢處理無線感測網路之集中式 TDMA 時槽分配協定技術 
發明人/創作人 陳耀輝 
中文： 
本計畫替無線感測網路設計新的集中式省電分時多工媒體存取控
制協定。透過各節點間適當的時槽分配，新協定可以減少封包的碰
撞、閒置聆聽、竊聽、控制成本，及降低封包傳輸的延遲時間。 
技術說明 英文： 
This research devises novel centralized energy-efficient TDMA (Time 
Division Multiple Access) MAC (Medium Access Control) protocols 
for wireless sensor network. The main idea is to assign time slots to 
each node adaptively so that it would reduce the level of packet 
collision, idle listening, overhearing, control overheads, and the latency 
of packet transmitting.  
可利用之產業 
及 
可開發之產品 
無線感測網路 
技術特點 新的集中式省電分時多工媒體存取控制協定 
推廣及運用的價值 可改善無線感測網路的效能 
※ 1.每項研發成果請填寫一式二份，一份隨成果報告送繳本會，一份送 貴單位
研發成果推廣單位（如技術移轉中心）。 
※ 2.本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。 
※ 3.本表若不敷使用，請自行影印使用。
 
 
(a) XML data (c) Stacks
SA 
A2 
A1 
SB
B2
B1
SC
C1
(b) Query  
A1  (1, 9, 1)
B1 (2, 8, 2)
A2 (3, 7, 3)
B2  (4, 6, 4)
C1  (5, 5, 5)
A 
B 
C 
Fig. 1. Storing intermediate results in stacks. 
 
Efficient Twig Pattern Matching over XML Streams 
 
Yaw-Huei Chen                     Ming-Chi Ho 
Department of Computer Science and Information Engineering 
National Chiayi University 
Chiayi, 600 Taiwan, ROC 
{ychen, s0920206}@mail.ncyu.edu.tw 
 
Abstract 
 
This paper presents a strategy that can efficiently 
evaluate twig queries over streaming XML data. The 
proposed method holistically processes twig queries and 
retrieves all matched patterns from the input data stream. 
The two-phase evaluation process is guided by the se-
quential inputs of start tags and end tags. In the first 
phase, it creates stacks and pointer structures to store the 
intermediate results. Then, the matched patterns are 
reconstructed from the stacks using the pointer structures. 
Experimental results indicate that the proposed method 
can efficiently find matched patterns. 
 
Keywords: XML, streaming data, XPath, twig query, 
pattern matching. 
 
1  Introduction 
 
XML data are composed of nested elements, each of 
which is delimited by a pair of start and end tags. A well-
formed XML document has properly nested tags and can 
be represented by a tree-structured model. When query-
ing XML data, an XPath based query pattern is specified 
to identify the desired structural relationship between the 
elements in the tree structure. For example, path expres-
sion //book/title matches book elements that have a child 
element title, where double slash // represents ancestor-
descendent (A-D) relationship and single slash / repre-
sents parent-child (P-C) relationship. Many strategies 
have been proposed to evaluate XPath queries [2-12], 
[14-19], [21-23].   
 
One of the methods, holistic twig join algorithm [3], 
uses a numbering scheme to represent the position of 
element occurrences in the tree structure and a chain of 
linked stacks to obtain matches for the query pattern. For 
example, as shown in Fig. 1(a), a 3-tuple (left position, 
right position, level) is used to encode the data. The 
query shown in Fig. 1(b) has a single path pattern 
//A//B//C. When processing the query, corresponding 
stacks are created for query nodes to store intermediate 
results, as shown in Fig. 1(c), where pointers are used to 
indicate the next element in the stream. We can recon-
struct query results from the stacks and pointers. For 
example, matched pattern <A2, B2, C1> is generated 
because C1 points to B2 and B2 points to A2 in the stacks. 
We can obtain <A1, B2, C1> as another matched pattern 
because A1 is below A2 in stack SA. Similarly, <A1, B1, 
C1> is also a matched pattern.  
 
Structural join algorithms are index-based XML 
query processing techniques [2-4]. Since a sort and 
merge join strategy is used in these algorithms, they are 
not suitable for processing streaming data. Another in-
dex-based method, which uses structural indexes to avoid 
unnecessary scanning of the XML document, does not 
support repetitive nodes in the twig pattern [6]. On the 
other hand, navigation-based algorithms compute query 
results by analyzing the input XML data one tag at a time 
[11], [21]. Most navigation-based systems act as a filter, 
whose objective is to decide whether the input document 
contains the query pattern. Because the system retains 
only states, we cannot reconstruct all the resulting pat-
terns using these filters. Another research proposes the 
use of a compact data structure for encoding pattern 
matches rather than storing them explicitly [9]. However, 
this approach returns only matched nodes instead of all 
the matched patterns. 
whole twig pattern can be composed. This approach 
wastes time and space to re-process the overlapped paths 
and to compare and combine the individual path results. 
It is better to evaluate the twig pattern as a whole against 
the XML data. 
  
3.1  Stack and Pointer 
 
In our approach, stacks are used to retain interme-
diate results. We associate each node in the query with a 
stack and arrange the stacks into a pattern that is resem-
ble the query pattern. The XML document is read in 
sequential and is viewed as a stream of events. Token 
nodes and pointers are created to record certain events 
that are encountered while reading through the XML 
document. For each incoming element, we create a token 
node in each corresponding stack to indicate the presence 
of the element. There are three different types of pointers 
used in our scheme: a pair of begin and end pointers 
marks the range of token nodes that are covered by the 
element in its child query node and a next pointer indi-
cates the beginning position of the token nodes in the 
stack that represents the immediate right sibling node in 
the query. The creation of the pointers is also a conse-
quence of certain events. When a start tag is encountered, 
we create a token node for the query node, set begin 
pointers to its children, and push the token node into the 
corresponding stack. When an end tag is encountered, we 
set the token node's end pointer and set its next pointer if 
the query node has an immediate right sibling node. For 
example, Fig. 3 illustrates the stack and pointer struc-
tures of a twig query pattern.  
 
3.2  Twig Pattern Matching 
 
A two-phase evaluation method guided by the se-
quential inputs of start tags and end tags is proposed in 
this paper to holistically process twig queries. In the first 
phase of the evaluation process, we convert all P-C (/) 
operators in the query pattern into A-D (//) operators and 
push tokens into the stacks accordingly. When construct-
ing the resulting patterns from the stacks in the second 
Stack B 
Stack E 
Stack C Stack A 
Stack F Stack D 
end pointer 
begin pointer 
next pointer 
Fig. 3. Stack and pointer structures for a twig pattern.
public void startElement() { 
    pushFlag = false;  
    level++; 
    if (input element is in the query) { 
        for (each query node in reverse order) {  
            if (the query node == the input element) { 
                pushFlag = true; 
                if (left sibling does not contain any close
                     token || parent does not contain any  
                     open token || left sibling is not  
                     covered by the parent)  
                pushFlag = false; } 
            if (pushFlag == true) {  
                create a token for the query node; 
                set begin pointer to every child; 
                push the token node into the stack;  
                open_count++; } 
        } 
    } 
} 
Fig. 4. The startElement() method. 
public void endElement() { 
    for (each matched query node in reverse order) 
 { 
        removeFlag = false; 
        for (each child of the query node) {  
            if (the token does not cover any close 
 token in the child node) {  
                removeFlag = true; 
                break; } 
        } 
        if (removeFlag == true) { 
            remove the token from the stack; 
            open_count--; } 
        else {  // modify the token node 
            set end pointer to every child; 
            set next pointer; 
            mark the token as close; 
            open_count--; } 
    } 
    level--; 
} 
Fig. 5. The endElement() method. 
operator specified in the query. Then, the subroutine 
appends the element to the temporary result and uses the 
pointers to guide the depth-first traversal.  
 
We use an example to illustrate this process. An 
XML data tree, a query pattern, and the corresponding 
intermediate results used in the example are shown in 
Fig 7(a), 7(b), and 7(c), respectively. When the end tag of 
A3 arrives in this example, we can start to construct the 
resulting pattern: <A3, A4, B2>. Note that <A3, A5, B2> 
does not satisfy the query pattern because A5's next 
pointer position (B3) is beyond A3's end pointer position 
(B2) in Stack B. Similarly, after receiving the end tag of 
A1, we construct the rest resulting patterns: <A1, A2, B2>, 
<A1, A2, B3>, <A1, A3, B3>, <A1, A4, B2>, <A1, A4, B3>, 
and <A1, A5, B3>. 
 
4  Implementation and Evaluation 
 
In this section we describe the implementation and 
evaluation of the proposed XML twig pattern finder. This 
program was implemented in JAVA on a J2SE 5.0 plat-
form. As discussed previously, the SAX API was used in 
the program to parse the input XML document. 
   
The experiments were conducted on a machine with 
a 3.20 GHz Pentium D processor and 1 GB main memory 
running Windows XP Professional SP2. As shown in 
Table 1, seven different XML datasets were used in the 
experiments. The first one was an auction dataset pro-
vided by XMark [24]; the second dataset was from 
GSFC/NASA [20]; the third one was an XML version of 
the ACM SIGMOD Record [1]; and the rest datasets 
were generated using an XML Generator from IBM [13]. 
The size of the datasets was in the range from 704 KB to 
116 MB and the maximum depth of the datasets was in 
the range from 7 to 24. Nineteen different query patterns 
were used and the experiment results are shown in Table 
2. 
 
Table 1.  Datasets used in the experiments. 
Data-
set Name (size) Elements 
Max-
depth 
D1 Auction (111 MB) 1666315 12 
D2 NASA (23 MB) 476646 8 
D3 SigmodRecord (704 KB) 16202 7 
D4 Synthetic1 (34 MB) 345931 24 
D5 Synthetic2 (54 MB) 556869 24 
D6 Synthetic3 (68 MB) 695351 24 
D7 Synthetic4 (116 MB) 1191812 24 
 
Two versions of the program were written for the 
experiments. One version only generated intermediate 
results in the stacks and the other version not only gener-
ated the intermediate results but also constructed the 
resulting patterns (without screen outputs). The process-
ing time of the two programs in the experiments is shown 
under headings 1st+2nd time and 1st time in Table 2, 
where 1st stands for the first phase and 1st+2nd stands 
for both phases. Experimental results indicate that the 
processing time for constructing matched patterns from 
the stacks is proportional to the number of resulting pat-
terns and the processing time for generating the interme-
diate results in the stacks is relatively small.  
 
Table 2.  Experiment results. 
Data 
Set Query 
1st+2nd 
Time 
Num of 
Results 
1st 
Time 
Stack 
Size 
TQ1 4.99 12715 5.08 63647 
TQ2 6.47 18770 6.41 47799 
TQ3 6.42 18770 6.39 47799 
TQ4 5.58 2000000 4.75 3004 
TQ5 5.58 0 4.86 5002 
D1 
TQ6 5.56 59486 5.47 201289 
TQ7 1.45 2219 1.48 17438 
TQ8 1.47 1136 1.47 18149 
TQ9 1.45 2410 1.45 14014 
TQ10 1.49 1026 1.47 7294 
D2 
TQ11 1.42 0 1.44 13605 
TQ12 0.19 5045 0.17 5339 
TQ13 0.20 5045 0.19 9525 
TQ14 0.28 129802 0.19 9426 
D3 
TQ15 0.19 5045 0.19 5339 
TQ16 213.28 474037482 1.81 51015 
TQ17 1.38 0 1.38 0 
TQ18 1.70 0 1.67 61821 
D4 
TQ19 52.77 122912469 1.83 49772 
TQ16 35.08 62405044 2.74 60289 
TQ17 2.16 0 2.16 0 
TQ18 2.67 0 2.59 88010 D5 
TQ19 15.39 30513795 2.66 65930 
TQ16 129.69 268734835 3.36 87977 
TQ17 2.61 0 2.59 0 
TQ18 3.16 0 3.11 113811 
D6 
TQ19 59.77 133610145 3.28 95271 
TQ16 19.56 21665688 7.42 91929 
TQ17 4.44 0 4.42 0 
TQ18 6.77 0 6.66 185149 
D7 
TQ19 13.74 16857305 6.44 115471 
 
5 Conclusions 
 
A strategy that matches twig pattern over streaming 
XML data is presented in this paper. Using stacks and 
pointer structures we can process twig queries containing 
P-C (/) operators, A-D (//) operators, and repetitive nodes. 
All matched patterns can be constructed from the inter-
mediate results stored in the stack and pointer structures. 
Because an element can be stored at most once in a stack, 
