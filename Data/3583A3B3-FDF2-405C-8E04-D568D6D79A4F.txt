‐ ii ‐ 
中文摘要 
  至目前為止，大多數市售的防毒系統皆是使用更新病毒碼的方法防止惡意程
式的侵害，當新的惡意程式出現至病毒碼釋出期間惡意程式早已對電腦造成傷
害。有鑑於此，我們針對蠕蟲、病毒、木馬與後門提出了有別於一般防毒軟體的
偵測技術，讓惡意程式偵測系統不僅能有效偵測現有的惡意程式，更具有預測未
知惡意程式的能力。本文利用靜態分析的技術萃取出 PE Table 裡的特徵 ，再利
用資料探勘裡的資訊增益方法找出有用的資訊，而統計裡的主成份分析被用來減
少龐大的資料量與去除雜訊，主成份分析除了大幅度減少訓練時間外更增加系統
的偵測能力，最後使用支援向量機進行惡意程式的偵測。此系統對於已知惡意程
式有高達 99.8%的偵測率，面對新的惡意程式更有 93.6%的預測能力，在此系統
架構下更有自動蒐集惡意程式來重新訓練偵測模組的能力，即使惡意程式不斷推
陳出新，仍可保有最新的偵測能力。 
關鍵字：惡意程式、主成份分析、資訊增益、支援向量機 
Contents of Table 
第一章 簡介 .............................................................................. 9 
1.1 背景 ............................................................................................... 9 
1.2 貢獻 ............................................................................................... 9 
第二章 相關工作 .................................................................... 10 
2.1 惡意程式(malware) ................................................................... 10 
2.1.1 Virus .................................................................................. 11 
2.1.2 Worm ................................................................................. 11 
2.1.3 Trojan ................................................................................ 12 
2.1.4 Backdoor ........................................................................... 13 
2.2 傳統的偵測方法......................................................................... 14 
2.2.1 病毒碼掃描法 .................................................................... 15 
2.2.2 啟發式分析法 .................................................................... 15 
2.2.3 加總比對法 ........................................................................ 15 
2.2.4 先知掃描法 ........................................................................ 16 
2.3 機器學習理方法 .......................................................................... 16 
第三章 Support Vector Machine & Information Gain &  
Principal Component Analysis .............................................. 16 
3.1 資料探勘 ..................................................................................... 16 
3.2 Information Gain ....................................................................... 16 
3.3 Principal Component Analysis ................................................. 17 
3.4 Support Vector Machine ............................................................ 21 
第四章 Malicious Detection System ..................................... 26 
4.1 MDS的概念 ................................................................................. 26 
4.2 系統架構 ..................................................................................... 27 
第五章 實驗與結果 ................................................................ 31 
5.1 實驗資料集與實驗環境 ............................................................. 31 
‐ iv ‐ 
圖 2 - 1 發送垃圾郵件前十大的蠕蟲 ..................................... 11 
圖 2 - 2 變種病毒比例表 ......................................................... 12 
圖 2 - 3 後門在惡意程式比率圖 ............................................. 14 
圖 2 - 4 後門成長比率圖 ......................................................... 14 
 
圖 3 - 1 資料分佈 ..................................................................... 18 
圖 3 - 2 eigenvectors ................................................................. 19 
圖 3 - 3 經PCA轉換後的資料分佈 ......................................... 19 
圖 3 - 4 經PCA轉換且減少為一維的資料分佈 ..................... 20 
圖 3 - 6 不好的分界例子 ......................................................... 22 
圖 3 - 7 最佳的超平面和邊緣 ................................................. 22 
圖 3 - 8 SVM在訓練錯誤的情況 ............................................. 23 
圖 3 - 9 映射函數Φ 投射到空間F ......................................... 24 
 
圖 4 - 1 實體系統架構圖 ......................................................... 26 
圖 4 - 2 系統架構圖 ................................................................. 27 
圖 4 - 3 程式版本資訊 ............................................................. 28 
圖 4 - 4 PE Table 結構 ............................................................. 29 
圖 4 - 5 Dependency Walker .................................................... 29 
圖 4 - 6 特徵產生器 ................................................................. 30 
 
圖 5 - 1 不同Info Gain值Virus的偵測與預測率 ................... 33 
圖 5 - 2 不同Info Gain值Worm的偵測與預測率 .................. 33 
圖 5 - 3 不同Info Gain值Trojan的偵測與預測率 ................. 34 
圖 5 - 4 不同Info Gain值Backdoor的偵測與預測率 ............ 34 
圖 5 - 5 Virus Gain值經PCA轉換CV比較 ............................. 35 
圖 5 - 6  Virus Gain值經PCA轉換OA比較 .......................... 35 
‐ vi ‐ 
‐ viii ‐ 
 
表 一 惡性程式比較表[11] ...................................................... 10 
表 二 PE Table 取出之特徵 ................................................... 29 
表 三 惡意程式數目表 ............................................................. 31 
表 四 正常程式數目表 ............................................................. 31 
表 五 經PCA轉換前後特徵數目比較 .................................... 36 
表 六 誤判率(FP)與程式數目 ................................................. 39 
 第二章 相關工作 
2.1 惡意程式(malware) 
『電腦病毒』單純指的是『Virus』，而『惡性程式』（Malware）則泛指所有不懷好意的程
式碼，包括電腦病毒(Virus)、特洛伊木馬(Trojan)程式、電腦蠕蟲(Worm)。在早期電腦病毒、
特洛伊木馬程式、電腦蠕蟲都是各自獨立的程式而且彼此不相干，但近幾年來單一型態的惡性
程式愈來愈少了，大部份都以『電腦病毒』加『電腦蠕蟲』或『特洛伊木馬程式』加『電腦蠕
蟲』的型態存在以便造成更大的影響力，而且比率以前者居多。例如：『梅莉莎』(MELISSA) 便
是結合『電腦病毒』及『電腦蠕蟲』的兩項特性。該惡性程式不但會感染 Word 的 Normal.dot
（此為電腦病毒特性），而且會透過 Outlook E-mail 大量散播（此為電腦蠕蟲特性）。例外一
個耳熟能詳的案例是結合了『特洛伊木馬程式』及『電腦蠕蟲』兩項特性的『探險蟲』
（ExploreZip）。探險蟲並不會感染任何檔案，但是會覆蓋掉(Overwrite)在區域網路上遠端電
腦中的重要檔案（此為特洛伊木馬程式特性），並且會透過區域網路將自己安裝到遠端電腦上
（此為電腦蠕蟲特性）。 在本論文特別把後門程式從特洛依木馬程式裡分出來，因為這一類數
目特別多，所以我們特別分開進行討論。 
 
 
 電腦病毒 電腦蠕蟲 木馬程式 後門程式 
感染其他檔案 O X X X 
被動散播自己 O X O O 
主動散播自己 X O X X 
造成程式 
增加數目 
一般隨電腦使
用率提高，受
染感檔案數目
則增加 
視網路連結狀況
而定，連結範圍
愈廣，散佈的數
目多 
不增加 不增加 
破壞能力 視寫作者而定 X 視寫作者而定 視寫作者而定
對企業的 
影響性 中 高 低 低 
 
 
 
 
 
 
 
 
 
 
表 一 惡性程式比較表[11] 
 
‐ 10 ‐ 
 今網路上充斥著各種病毒產生器，只要使用一些簡單的軟體，勾選一些想要的功能，就能產生
一個變種病毒，防毒軟體就沒有能力偵測到新的變種病毒，這更顯現出新型防毒軟體的重要性。 
 
圖 2 - 2 變種病毒比例表 
 
2.1.3 Trojan 
 木馬這個字是源自於希臘木馬屠城神話[15]，木馬程式通常偽裝或嵌入正常軟體裡面，這
些軟體提供一些有用的功能供使用者使用，但這些有用程式背後還藏著由駭客所寫而且使用者
並不知情的特別功能，它有著極高的隱密性不易被發覺。另一種讓使用者上當的方法是利用一
些特別字眼的檔名吸引使用者執行這些木馬軟體，最常使用的都是一些情色或是賺錢的廣告檔
名，即所謂的社交工程social engineering。特洛伊木馬程式就不像電腦病毒一樣會感染其他
檔案，特洛伊木馬程式通常都會以一些特殊管道進入使用者的電腦系統中，然後伺機執行其惡
意行為（如格式化磁碟、刪除檔案、竊取密碼等），Back Orifice特洛伊木馬程式便是一個案
例，透過該程式電腦駭客便有機會入侵主機竊取機密資料。一個完整的特洛伊木馬程序包含了
兩部分：服務端（伺服器部分）和客戶端（控制器部分）[16]。植入對方電腦的是服務端，而
駭客正是利用客戶端進入運行了服務端的電腦。運行了木馬程序的服務端以後，會產生一個容
易迷惑用戶的名稱的行程(process)，暗中打開一個對外的埠，向指定地點發送數據（如網路
遊戲的密碼，QQ密碼和用戶上網密碼等），駭客甚至可以利用這些打開的埠進入電腦系統。下
表是木馬程式技術發展非常迅速。主要是有些年輕人出於好奇，或是急於顯示自己實力，不斷
改進木馬程式的編寫。以JS.Fortnight.C為例，它是一個特洛伊木馬程式，它會丟棄一個檔案
然後該檔案會被插入 Microsoft Outlook Express 的預設簽章中。於是每次當您使用 Outlook 
Express 來傳送電子郵件時，訊息內容就會包含一個程式編碼，會在每次收件者開啟訊息時嘗
試連上特定的網站。JS.Fortnight.C 會使用 IFRAME 標籤來探測 Microsoft VM 弱點，其中 
SRC 欄位會被設為特洛伊木馬撰寫者的位址。在一連串的轉送之後，編碼過的 JavaScript 便
會載入包含該探測程式的 Applet。在未安裝修補程式的系統上，很多不同的登錄鍵與 Web 瀏
‐ 12 ‐ 
 5.在 5,326 或 5328 埠上等待進入連接允許駭客在您的電腦上進行活動。 
 
圖 2 - 3 後門在惡意程式比率圖 
 
圖 2 - 4 後門成長比率圖 
 
2.2 傳統的偵測方法 
 從過去到現在有許多種病毒偵測技術被發表，大約可區分成下列幾種：病毒碼掃描法
(Scanning method)、啟發式分析法(Heuristics method)、加總比對法(Checksum method)、
先知掃描法(The Virus Instruction Code Emulation(VICE) method)、即時輸出入掃描法
(Real-time I/O scan method)。以下將介紹這一些傳統病毒偵測方式。[17]  
 
‐ 14 ‐ 
 2.2.4 先知掃描法 
 這個方法的觀念是在正常的作業系統下建立一個虛擬機器，這台虛擬機會模擬 CPU 的行
為對可疑的惡意程式先進行假執行，即為軟體模擬方法(software simulation)，經過軟體模
擬行為後再經由一個事先被設計好的專家系統判斷是否為惡意程式。利用這種虛擬機器的方式
可以對抗多型(Polymorphic)與變種(mutation)的惡意程式，這些程式利用各種方法隱藏自己
的程式碼，常用的方法為壓縮或是加密的方法，只有在執行起來時才會知道，所以需要一台虛
擬機器來先做模擬。但這種方法極為浪費系統資源，所以很少有人利用這樣的方法開發防毒軟
體。 
 在這篇論文使用的方法較類似啓發式分析法，使用資料探勘的方法採集有用與重要的資
料，再利用機器學習的方法加以訓練與判定是否為惡意程式，在這篇論文裡資料探勘方法與機
器學習方法的組合有相當好的效果，並且誤判率比其它論文有更好的結果。 
2.3 機器學習理方法 
  這裡的做法是利用資料探勘的方法加上機器學習理論的角度進行研究。首先從正常與惡意
程式裡取出特定的特徵，因為不是所有特徵都是有用的，必需有一套良好的特徵萃取方法把有
用與重要的特徵取出，在這裡它使用 Information Gain，取出有益的特徵後使用 Support 
Vector Machine。 
 
第三章 Support Vector Machine & Information Gain & 
Principal Component Analysis 
3.1 資料探勘 
 資料探勘是從大量資料中找出其潛藏資訊的一種過程，資料探勘技術演算法主要被分成兩
類，一種是基於統計方法使用計算每一種資料的數目來辨別分佈情形，另一種是基於分群、分
類和相似度理論。現今資料探勘技術已被大量且廣泛的利用在商管、行銷、金融、資訊與生物
技術。在這篇論文裡我們使用了兩種資料探勘的技術：資訊增益(Information Gain)、主成份
分析(PCA: Principal Component Analysis)與一種機器學習(Machine Learning)方法：支援
向量機(SVM: Support Vector Machine)，以下為各位簡介各種方法的概要： 
3.2 Information Gain 
 J.R. Quilan提出了一個叫ID3 分類演算法[19]，這是information gain最早的概念，＂
‐ 16 ‐ 
 的成份之變異數為最大。 
  
假如有一筆資料裡有兩個特徵向量，它的資料分佈如圖 3-1 
 
圖 3 - 1 資料分佈 
 資料先經由 covariance 計算後得到 
 covariance = 
    0.8630   -0.5052 
    0.5052    0.8630 
 再算出它的 eigenvalues，最後得到 eigenvectors，因為這個範例只有兩維，所以算出的
來 eigenvectors 只會有兩個，如圖 3-2，紅色線(長線)是第一個 eigenvector，綠色線(短線)
是第二個 eigenvector，eigenvector 是互相正交的。如果我們完全都保留原來的資料不減少
特徵，等於只是把原來的資料映射到另一個空間而己(圖 3-3)，這裡如果把維度減到一維，表
把所有資訊量都投射到第一個特徵上，如圖 3-4，在經轉換後仍然保有大量原使的資料分佈情
況。 
‐ 18 ‐ 
  
圖 3 - 4 經 PCA 轉換且減少為一維的資料分佈 
 
下面我們將實際舉一個例子[21]： 
 有一個二維資料集， ，其 mean 為
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢
⎣
⎡
=
72
61
15
A [ ]74  
經 Covariance 運算後為  ⎥⎦
⎤⎢⎣
⎡
−
−
5.185.1
5.17
對角化運算 
[ ] 0=− XIA λ  →  (式 3-1) 0
5.185.1
5.17 =⎥⎦
⎤⎢⎣
⎡
−−
−−
Xλ
λ
求得兩個 IgenValue 8075.6,69.18 21 ==⇒ λλ 代回式 3-1 
各別求兩個解的 IgenVector 
0
19.05.1
5.169.11
2
1
1 =⎥⎦
⎤⎢⎣
⎡⎥⎦
⎤⎢⎣
⎡
−−
−−→
x
xλ  
05.169.11 21 =−− xx  (式 3-2) 
019.05.1 21 =−− xx  (式 3-3) 
式 3-2 與 3-3 相加求得結果 
069.119.13 21 =−− xx  
21 19.13
69.1
xx ⎥⎦
⎤⎢⎣
⎡
−=⇒ 得到第一個 IgenVector 
‐ 20 ‐ 
  
 
圖 3 - 6 不好的分界例子 
 對於超平面分類器如果我們能找到分隔兩個類別的最大邊緣(margin)(如圖 3-7)就能減
少在做測試時的錯誤(risks)。因為如此有可能不只只有一個超平面能區隔出最大的邊緣把兩
個類別分的最開，所以 Vapnik 與 Chervonenkis 指出最佳的超平面(OH: Optimal Hyperplane) 
意思是能分開兩個類別並且它的邊緣是最大的。 
 根據 w 與 b 來調整它的值滿足函數 | ( )iw x b | 1⋅ + =  li ,...,1= ，而正確分類的資料我們使用
這個函數 ，對於最佳超平面來說(( ) ) 1i iy w x b⋅ ⋅ + ≥ ，邊緣的距離我們可以用 2 / w  來表示(如
圖 3-7)， 此找到了最佳超平面就可以找出最大的邊緣因 ，我們使用 (( ) ) 1i iy w x b⋅ ⋅ + ≥ , i=1,…,l
與最小函數 21τ =( )
2
w w 。  
+1 
‐1 
w
b 
wx+b=0 
圖 3 - 5 超平面分類器
‐ 22 ‐ 
  真實世界的很多問題往往不是資料可以分離的情形(Separable Case)，所以原本的模型會
有問題(如圖 3-8)，因為大多的問題是資料不分離的情形(Non-separable Case)。所以要把已
經求出的資料分離的情形(Separable Case)的公式擴大，在原本用到的式子中，加上一個正的
Slack Variable， lii ,,1, K=ξ 則會變成： 
 1 and 1 −≤+•+≥+• bwxbwx ii  
ii bwx ξ−+≥+• 1  }1{+∈∀y ,  
ii bwx ξ+−≤+• 1  }1{−∈∀y , 0≥iξ  i∀  
組合上面的兩個不等式得到 
錯誤! 物件無法用編輯功能變數代碼來建立。 ，錯誤! 物件無法用編輯功能變數代碼來建立。
錯誤! 物件無法用編輯功能變數代碼來建立。  
對於資料不可以離問題的最佳化我們一樣再次使用 Lagrangian 來求得 
minimize 2
2
2
22
1
iCw ξ+  
subject to ( ) iii bwxy ξ−≥+• 1  li ,,1K=  
 這個 dual form 如下： 
maximize 
( ) ( )∑∑
==
⎟⎠
⎞⎜⎝
⎛ +•−=
l
ji
ijjijiji
l
i
ip C
xxyyL
1,1
1
2
1 δαααα
 
subject to ∑  ，
=
=
l
i
iiy
1
0α 0≥iα l,,1K=i  
 
圖 3 - 8 SVM 在訓練錯誤的情況 
 另一個解決不可以離問題的方法是使用一個非線性映射函數Φ (non-linear mapping 
‐ 24 ‐ 
 第四章 Malicious Detection System 
 在這個章節將介紹這個系統的架構與設計原理，我們盡量的把所有的細節談及，當您看完
這個章節後可以清楚知道整個系統如何運作與實做： 
4.1 MDS的概念 
 圖 4-1 是此系統的實體系統架構圖，整系架構分成兩個部份，分別為前端的偵測模組與後
端的資料探勘模組，偵測模負責偵測惡意程式，資料探勘模組負責特徵的採集、訓練與發佈。
首先由 Mining System 從程式資料庫中把每個正常程式與惡意程式裡的特徵萃取出來再轉送
給 Training System，Training System 的資料來源除了 Mining System 以外還有一部份是從
Knowledge Base 取出，Knowledge Base 這一部份是由人力介入挑選一些重要且有用的特徵出
來當作訓練資料，所以 Training System 收集完成資料後即開始進行訓練，把訓練出來的 SVM 
Detecting Module 再送到 Core Database 裡，而 Core Database 負責把 SVM Detecting Module
送到前端用戶端的電腦裡，用戶端可以定時的收到來自 Core Database 所訓練出的模組，以保
持有最佳的掃毒能力。在 Online Scanner Server 方面，這台 server 主要是被用來做為線上
掃毒服務，如果用戶端無安裝我們所開發的系統，可經由 IE Browser 進行網路上直接掃毒。 
 
圖 4 - 1 實體系統架構圖 
‐ 26 ‐ 
 裡取用的所有特徵。 
 
圖 4 - 3 程式版本資訊 
  在Microsoft的window產品從win3.1 開始每一個執行檔都有所謂的PE Table，它記載了
這隻程式所有相關的資訊，包括程式本身的資料、使用的DLL(Dynamic Link Library)、API
等等資訊，如圖 4-4 為PE Table裡的內容，在這裡我們使用的特徵為程式使用的DLL與API，但
並不只是單單只取它的名字而已，我們使用一個小工具Dependency Walker[26](如圖 4-5)取
出一隻程式裡所使用的DLL與API，這隻工具較特別的一點是它能找到這個程式裡某一個DLL裡
還用到那些DLL，在這裡我們取的特徵有四種，第一為程式直接用到的第一層DLL，如圖 4-4
紅色 1所示，第二為從第一層的DLL至最後一層使用到DLL的階層，取法為從第一個到最後一
個，如圖 4-4 紅色 2 所示，把每一個DLL串接起來即為另一種特徵，考慮使用這個特徵的原因
為惡意程式與正常程式使用DLL 的順序上會有所差異，第三種為第一層DLL裡被程式所使用到
的API名稱，如圖 4-4 紅色 3所示，最後一種特徵為第一層DLL裡會被其它DLL用到的API名稱如
圖 4-4 紅色 4，所有特徵樣式如表二所示。 
‐ 28 ‐ 
  從程式資料庫中經過 Data Parser 後取出我們所需使用的特徵，如圖 4-5 的特徵產生器，
在圖中紅色 1 的地方各別分次指定惡意程式與正常程式的位置就能取出我們所需的所有特徵。 
 在下一個階段Feature Miner，使用的技術是在第三章提到的Information Gain，把所有
特徵使用Information Gain(圖 4-5 紅色 2)得到每個特徵的Gain值，再跟據不同的Gain值範圍
找出我們想要的特徵(如圖 4-5 紅色 3)，經Information Gain 計算後再把特徵交由PCA做
Feature Reduction，因為PCA需要做大量的運算，所以這裡的程式我們使用C++實做，以增加
轉換效率，最後把轉換後的結果送給SVM[27]做訓練以輸出Model。整個Mining Module的程序
到這裡結束。 
 
圖 4 - 6 特徵產生器 
 在左半部的 Detecting Module 必需使用到 Mining Module 所產生出來的三項資訊：經
Information Gain 計算後所選取的特徵、經 PCA 轉換後的維度與 SVM training 後的 Model。 
這裡的程序與 Mining Module 有許多地方是雷同的，當使用者進行掃描時，一個執行檔進來我
們的系統會先把它的檔案特徵完全取出，再利用 Dependency Walker 取出 PE Table 裡的特徵，
而後比對 Mining Module 的 Information Gain 留下來的特徵，如果存在某個特徵則以 1 表示，
如無則以 0 表示，把整個比對後的字串乘上從 Mining Module 傳過來的 EigenVector 做 PCA
轉換減少維度，最後把降維後的特徵放入由 Mining Module 訓練出的 Module 做預測，如果不
是惡意程式則不與理會，但如果是則系統會把它回傳到病毒資料庫裡進行重新訓練，在這裡還
必需先由人工進行判斷是誤判或是真的為惡意程式才能放進資料庫，否則假設把誤判的程式放
入資料庫反而會影響訓練以後的結果。 
 
‐ 30 ‐ 
 True Positives(TP)：TP 指的是系統正確的偵測到惡意程式，TP 偵測率可以用下面式子示
%100*
FNTP
TP
+ 。 
True Negatives(TN)：TN 指的是系統正確判斷為正常程式，TN 偵測率可用下面式子表示
%100*
TNFP
TN
+ 。 
False Positives(FP)：FP 指的是系統把某隻程式判斷為惡意程式，但其實它是正常程式，也
就是所謂的誤判，誤判率可用下面表示 %100*
TNFP
FP
+ 。 
False Negatives(FN)：FN 指的是系統把某程式判斷為正常程式，但其實它是惡意程式，FN
偵測率可用下面式子表示 %100*
FNTP
FN
+ 。 
Overall Accuracy(OA)：它的定義是
%100∗+++
+
FNFPTNTP
TNTP
。評估這個 惡意程式偵測系統
的有效偵測率，它考慮的不只是較高的 TP 而且也考慮較低的 FP，所以 OA 是一個值得參考的
參數。 
CV Rate：我們使用這個符號代表系統的預測率，表示偵測一個未知或新的惡意程式的能力，
它的計算公式同於 OA。 
5.3 實驗結果 
 首先讓我們看四類惡意程式使用不同 Information Gain 值取出特徵再使用 SVM 訓練與預
測的結果，圖 5-1 為病毒的結果，圖 5-2 為 Worm 的結果，圖 5-3 為 Trojan 的結果，圖 5-4
為 Backdoor 的結果。橫軸為不同 Gain 值，縱軸為偵測率，Gain 值取法為從這個值至 1 為止(例
Gain 0.05 為 Gain 從 0.05 至 1 的範圍)我們可以很明顯的發現，每一類的偵測率(OA)與預測
率(CV)都隨著 Gain 值變小(特徵變多)而增加，到最後則有收斂的現象，不再增加，但很明顯
的可以發現，在 Trojan 與 Backdoor 這兩類整體的偵測率與預測率都小於 Virus 與 Backdoor，
原因是 Trojan 與 Backdoor 這兩類的程式與一般的程式非常類似，而且程式數目遠比前兩類高
出許多，所以效果較前兩類差。而 Trojan 這一類的 Gain 在 0.05 的預測率比其它 Gain 都要來
的高，這也許是因為 Trojan 這類惡意程式混雜了太多不同類型的程式在裡面所導致的原因。 
 
‐ 32 ‐ 
 92.7392.6292.5692.1191.8491.59
95.40
89.41
97.8997.7897.7597.4397.32
96.7096.22
93.35
85
87
89
91
93
95
97
99
0.000010.00010.00050.0010.0050.010.050.1
Info Gain
Detecting Rate(%)CV OA
 
圖 5 - 3 不同 Info Gain 值 Trojan 的偵測與預測率 
 
 
 
92.5192.58
91.35
92.51
91.3590.96
89.94
98.0597.89
95.21
97.20
95.21
96.22
95.17
84
86
88
90
92
94
96
98
100
0.000010.00010.00050.0010.0050.010.1
Info Gain
Detecting Rate(%)CV OA
 
圖 5 - 4 不同 Info Gain 值 Backdoor 的偵測與預測率 
 在這裡我們做一個小實驗，要把從 Information Gain 之後的特徵使用 PCA 減少維度，但
‐ 34 ‐ 
 96.27
96.4796.47
97.81
98.01
96.68
95.58
97.37
97.12
96.23
98.01
97.6197.73
97.97
98.17
98.54
98.0198.14
98.74
99.27
98.10
98.9198.95
98.6898.8598.5898.7098.74
98.9598.99
99.27
98.74
99.07
98.70
99.51
99.0798.87
98.58
98.38
99.03
95.5
96
96.5
97
97.5
98
98.5
99
99.5
80% 82% 84% 86% 88% 90% 92% 94% 96% 98%
EigenValue Cumulation(%)
Detecting Rate(%) Gain 0.01 Gain 0.00001
 
圖 5 - 6  Virus Gain 值經 PCA 轉換 OA 比較 
經 PCA 轉換後的特徵數與原始數目是大不同的，PCA 可以從數千個特徵資料減少到數百
筆，比率大約 10:1，如表五為各類別經 PCA 轉換後被使用做為訓練特徵的比較表。 
表 五 經 PCA 轉換前後特徵數目比較 
類型 Virus Worm Trojan Backdoor 
轉換前 1748 1802 2311 2561 
經 PCA 後 307 240 284 207 
 
 由圖 5-7、5-8 與 5-9 所示，經過 PCA 特徵轉換後的 CV 與 OA 都有明顯的提升，證明了 PCA
不只可以減少維度並且有提高偵測率的功能，而且由圖 5-10 的 TP 可以看出，幾乎每一類別的
偵測率都逼近 100%，而誤報率平均在 3%以下，在 Virus 與 Worm 這兩類誤報率更是在 1%以下。 
‐ 36 ‐ 
 93.62
95.22
94.88
91.93
92.45
98.69
99.36
99.55
98.97
98.28
10 20 30 40 50 60 70 80 90 100
Average
Virus
Worm
Trojan
Backdoor
Malware
Detecting Rate(%)
CV OA
 
圖 5 - 9 經 PCA 後的 CV 與 OA 
99.8
99.9
99.6
99.7
99.9
2.37
0.6
0.78
4.3
3.8
0 10 20 30 40 50 60 70 80 90 100
Average
Virus
Worm
Trojan
Backdoor
Malware
Detecting Rate(%)
TP FP
 
圖 5 - 10 經 PCA 後的 TP 與 FP   
 表六為經 PCA 後系統 FP 百分比與實際數目比較表，由表六可以看出整個系統的平均誤判
率並不高，在 1555 隻程式裡平均僅有 37 隻誤判，其中 Virus 與 Worm 各只有 9與 12 隻，其它
兩類 Trojan 與 Backdoor 較高的原因為這兩類惡意程式跟正常程式行為非常相近，所以才會有
稍高的誤判。 
‐ 38 ‐ 
 參考文獻 
 以文章使用到的順序排序 
[1] Yahoo news, http://tw.news.yahoo.com/060505/215/33rl9.html. 
[2] The Kaspersky Lab, http://www.kaspersky.com. 
[3] McAfee, Inc, http://www.mcafee.com/us/. 
[4] Trend Micro, Inc, http://www.trendmicro.com/en/home/us/enterprise.htm. 
[5] Symantec Corporation, http://www.symantec.com/index.htm. 
[6] Panda antivirus, http://www.pandasoftware.com/. 
[7] Microsoft, http://www.microsoft.com/. 
[8] Yahoo!, http://www.yahoo.com.tw. 
[9] Matt Pietrek, “An In-Depth Look into the Win32 Portable Executable File Format,” 
MSDN Magazine, March 2002. 
[10] Microsoft Corporation, “Portable Executable Formats,” Formats specification for 
Windows. 
[11] Trend 
technology, http://www.trendmicro.com/tw/security/general/guide/overview/guide01.h
tm. 
[12] Fred Cohen, "Computer Viruses", PhD Thesis, University of Southern California, 
ASP Press, 1988. 
[13] Worm. http://en.wikipedia.org/wiki/Computer_worm 
[14] Symantec Report2005. 
[15] Trojanhttp://en.wikipedia.org/wiki/Trojan_horse_%28computing%29 
[16] Trojan in 
wikipedia, http://zh.wikipedia.org/wiki/%E7%89%B9%E6%B4%9B%E4%BC%8A
%E6%9C%A8%E9%A9%AC_%28%E7%94%B5%E8%84%91%29. 
[17] 許明陽,逢甲大學資工系 Computer Viruses Detection Through Hooking API, 2001. 
[18] Tzu-Yen Wang, Shi-Jinn Horng, Ming-Yang Su, Chin-Hsiung Wu,Peng-Chu Wang 
and Wei-Zen Su, “A Surveillance Spyware Detection System Based on Data Mining 
Methods”, 2006 IEEE Congress on Evolutionary Computation, July 16-21, 2006, 
pp11005-11010. 
[19] J. R. Quinlan, “Induction of decision trees”, Machine Learning, 1, 1986 
[20] A tutorial on principal components 
analysis, http://csnet.otago.ac.nz/cosc453/student_tutorials/principal_components.pdf. 
[21] PCA, http://www.eng.man.ac.uk/mech/merg/Research/datafusion.org.uk/pca.html. 
[22] V. Vapnik, “Statistical Learning Theory,” Wiley, New York, 1998. 
[23] E. Ardizzone, A. Chella, R.Pirrone, “An Architecture for Automatic Gesture 
‐ 40 ‐ 
 ‐ 42 ‐ 
Appendix 
程式版本資訊特徵使用列表 
檔案關聯的註解 Comments 
公司名稱 CompanyName 
組建編號 FileBuildPart 
檔案的描述 FileDescription 
版本號碼的主號部份 FileMajorPart 
檔案版本號碼的次號部份 FileMinorPart 
檔案私用部分號碼 FilePrivatePart 
檔案版本號碼 FileVersion 
檔案的內部名稱 InternalName 
預設語言字串 Language 
所有套用至指定檔案的著作權注意事項 LegalCopyright 
商標與套用至檔案的註冊商標 LegalTrademarks 
建立檔案所使用的名稱 OriginalFilename 
檔案私用版本的資訊 ProductBuildPart 
與這個檔案關聯的產品版本號碼的主號部份 ProductMajorPart 
與這個檔案關聯的產品版本號碼的次號部份 ProductMinorPart 
檔案所散發的產品名稱 ProductName 
檔案關聯的產品私用部分號碼 ProductPrivatePart 
檔案所散發的產品版本 ProductVersion 
檔案的特殊組建資訊 SpecialBuild 
 
 
一 會議經過 
   2009 年國際網路、結構和儲存會議 (2009 IEEE International Conference on 
Networking, Architecture, and Storage (NAS'09)) ，今年在中國湖南省的張家界舉
行。會議從七月九日至七月十一日，在這三天的議程裡總計發表了近 50 篇論文，
議程分類如下： 
* Ad hoc mobile networks 
     * Mobility models and systems 
     * Network applications and services 
     * Network architectures and management 
     * Optical networks 
     * Peer-to-peer systems 
     * Resource allocation and management 
     * Routing protocols, 
     * Security, trust, and privacy 
     * Self-organizing networks 
     * Sensor networks 
     * Virtual & overlay networks 
     * Web services 
     * Network protocols 
     * Processor architectures 
     * Cache and memory systems 
     * Parallel computer architectures 
     * Evaluation of storage architectures 
     * Parallel I/O architectures 
     * Storage management software 
     * Power-efficient architectures and techniques 
     * High-availability architectures 
     * High-performance I/O systems 
     * Reconfigurable architectures 
     * Interconnect and network interface architectures 
     * Innovative hardware/software trade-offs 
     * Impact of compilers on architecture 
     * Performance evaluation 
     * Storage manageability, reliability, availability, and security 
     * Storage performance and scalability 
     * File systems, object-based storage, block-level storage 
     * Storage networking 
     * Energy aware storage 
