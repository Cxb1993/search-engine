Abstract 
It is well known that the 
node-searching problem is NP-complete 
on general graphs and that node-search 
number is identical to pathwidth + 1 and 
to vertex separation + 1. Bodlaender et al. 
gave a polynomial time algorithm for 
computing the pathwidth of a partial 
k-tree for a fixed k ≥ 1. However, its time 
complexity is Ω(n11) for the graphs with 
treewidth 2. 
A cactus graph is a connected graph in 
which any two simple cycles have at most 
one vertex in common, i.e., every edge in 
such a graph may belong to at most one 
cycle. Cactus graphs are also belonging to 
partial 2-trees. Therefore, the 
node-searching problem on cactus graphs 
can also be solved by Bodlaender’s 
algorithm. However the time complexity is 
quiet large. In this project, we provide an 
O(n2) algorithm for solving the 
node-searching problem on cactus graphs. 
. 
Keywords: node-searching problem; 
pathwidth; cactus graphs; avenue; search 
number; optimal search strategy. 
 
摘要 
眾所周知，點搜尋問題在一般圖上屬
於NP-complete。另外，點搜尋數等於路
徑寬度加 1，也等於點分隔數加 1。
Bodlaender 等人曾經提出一個多項式
時間的演算法用來計算偏k-樹 ( k固定
且 ≥ 1)的路徑寬度。然而，當樹寬度為
2，該演算法的時間複雜度為Ω(n11)。 
所謂仙人掌圖是一種連通圖，其中任
兩個單純環最多只相交一個點。也就是
說，每個邊只屬於最多兩個環。仙人掌
圖也是屬於偏 2-樹。因此Bodlaender的
演算法也可以用來解決仙人掌圖的點搜
尋問題，只不過其時間複雜度相當大。
本計畫中，我們提出O(n2)時間演算法計
算仙人掌圖的搜尋數。 
 
關鍵詞: 點搜尋問題; 路徑寬度; 仙人
掌圖; 通道; 搜尋數; 極佳搜尋策略。 
1 前言 
The allowable search moves in the 
node-searching problem are (1) placing a 
searcher on a vertex, and (2) removing a 
searcher from a vertex. Initially, all edges 
are considered contaminated. A 
contaminated edge is cleared if both its 
endpoints are simultaneously guarded by 
searchers. The entire graph is cleared if all 
its edges are cleared. A search strategy is a 
sequence of search moves that will clear a 
graph with all edges contaminated. The 
node-searching problem on a graph G is to 
compute the search number of G which is 
the minimum number of searchers needed to 
clear G. 
The node-searching problem is 
equivalent to several important problems, 
such as the interval thickness problem [16] 
with applications in combinatorics, the 
survivability problem [3] with applications 
in communication networks, the gate matrix 
layout problem[22], the path-width problem 
[27], the vertex separation problem [15] 
with applications in VLSI layout, and the 
narrowness problem [20] with applications 
 2
takes O(n11) time for a graph with treewidth 
even 2. 
A cactus graph is a connected graph in 
which any two simple cycles have at most 
one vertex in common, i.e., every edge in 
such a graph may belong to at most one 
cycle. Cactus graphs are also belonging to 
partial 2-trees. Therefore, the 
node-searching problem on cactus graphs 
can also be solved by Bodlaender’s 
algorithm. However the time complexity is 
quiet large. In this project, we provide an 
O(n2) algorithm for solving the 
node-searching problem on cactus graphs. 
3 研究方法 
3.1 Terminology 
 
In this project, we consider undirected 
connected graphs. For a graph G, we use 
V(G) and E(G) to denote the vertex set and 
edge set of G, respectively. Given two sets 
X and Y , we use X∪Y , X∩Y and X\Y to 
denote their union, intersection and 
difference, respectively. For two graphs G1 
and G2, we use G1∪G2 to denote the graph 
with vertex set V (G1)∪V (G2) and edge set 
E(G1)∪E(G2). An induced subgraph H in G 
is a subgraph such that for all u,v ∈ V (H), 
(u,v) ∈ E(H) if and only if (u,v) ∈ E(G). The 
subgraph of G induced by S⊆V(G), denoted 
by G[S], is the induced subgraph of G with 
S as the vertex set. For a subset X⊆V(G), 
G\X is the subgraph of G induced by 
V(G)\X. 
A path in a graph is a sequence of 
vertices, denoted by <v1,v2,…,vr> so that two 
vertices are adjacent if and only if they are 
consecutive in the sequence. A path in a 
graph is called an induced path if the 
subgraph induced by its vertex set is also a 
path. For a vertex u ∈ V(G), a connected 
component of G\{u} is called a branch of G 
at u. The branch of G at u containing vertex 
v is denoted by (G)u;v. We define the fork of 
G at u containing v, denoted by [G]u;v, as the 
subgraph of G induced by V ((G)u;v)∪{u}. 
Fig. 2 shows an example of branches and 
forks. 
Figure 2: Branches and forks of a graph G. (a) G. 
(b) Branches of G at u. (c) Forks of G at u. 
Given a block K of a cactus graph G and 
a vertex u in K, the subgraph G\V([G]u;v) 
(G\V((G)u;v), resp.) for any vertex v in K 
other than u, is called the tentacle branch 
(tentacle fork, resp.) of K at u and denoted 
by (G)K,u ([G]K,u, resp.). Notice that (G)K,u 
may be a disconnected subgraph. 
Throughout this report, we say tentacle as 
tentacle fork for abbreviation. For any pair 
of vertices x,y ∈ V (K), the enclosure 
subgraph of G from x to y, denoted by {G}x;y, 
is defined as G\V ((G)K,x∪(G)K,y). Refer to 
Fig. 3 where tentacle branches, tentacle 
forks, and enclosure subgraphs are shown. 
 4
all block K in G, there exists a pair of 
vertices x,y∈V(K) such that os({G}x;y,x,y) < 
k. 
 
Theorem 1. For a cactus graph G and an 
integer k≥2, G satisfies conditions VCk and 
BCk if and only if ns(G) ≥ k. 
 
In the following Lemma 3 and 4, G is a 
cactus graph satisfying conditions VCk and 
BCk for some integer k≥2, and Ak is the set of 
vertices x in V(G) having exactly two 
branches of search number no less than k. A 
block chain <v0,B0,v1,B1 ,…,Bn,vn> is a 
sequence of blocks BB0, . . . , Bn connected by 
a sequence of cut vertices v0 ,… , vn. 
 
Lemma 3. Assume that |Ak| ≥1. Then 
1. There exists a block chain in G 
containing all vertices of Ak. 
2. For all blocks K in G, |Ak∩K|≤2. 
3. Let K be a block such that Ak∩K = {x}. 
Then there exists u∈V(K) such that 
ns([G]K,x) < k and ns({G}x,u) < k. 
4. Let K be a block such that Ak∩K = {x, y}. 
Then ns([G]x;y)<k and os({G}x,y, x, y) ≤ k. 
 
Lemma 4. Assume that |Ak| = 0, and for all 
x∈V(G), there is exactly one branch at x of 
search number no less than k. Then there is 
an unique block K such that ns((G)K,u) < k 
and os(G\V ((G)K,u),u) ≥k for all u∈V(K). 
 
Definition 1. A block chain C = < v0 , B0, v1, 
BB1 , . . . , Bn, vn > is an avenue of a cactus 
graph G, if the following conditions hold: 
(1) If n = 0, then all branches at v0 in G have 
search numbers smaller than ns(G). 
(2) If n > 0, then 
(a) each of v0 and vn has only one branch, 
(G)v0,v1 and (G)vn,vn−1 respectively, with 
search number ns(G); 
(b) for 1≤ i ≤ n-2, vi has exactly two 
branches, (G)vi,vi−1 and (G)vi,vi+1, with 
search numbers ns(G); 
(c) for 0≤ j≤ n-1, ns({G}vj ,vj+1) < ns(G). 
When n = 0, the only vertex on C is 
called a hub vertex.  When n = 1, the only 
block on C is called a hub block. A graph 
may have more than one hub vertex but may 
contain only one hub block. When n > 1, the 
vertices with exactly two branches having 
search numbers ns(G) are called critical 
vertices and the vertices with only one 
branch having search number ns(G) are 
called outlet vertices. A vertex in any 
avenue is called an avenue vertex.  
Definition 2. A vertex x is k-critical in a 
rooted cactus graph G if ns(G) = k and 
os(G,x) = k + 1. 
Definition 3. A block K is k-critical in a 
rooted cactus graph G if ns(G) = k and 
os({G}u,v, u, v) ≥  k + 1 for any u ≠ v ∈ 
V(K). 
3.3 Types of rooted cactus graph 
Let u be a vertex of a cactus graph G, we 
classify G[u] into five types, denoted by 
τ(G[u]), as follows. 
 
Definition 4. Let G[u] be a rooted cactus 
graph. 
(1) If u is a hub vertex of G, then G[u] is of 
type H. 
 6
closest to u. 
          if ns((T1)v,u∪T2) = k, then ns(G) 
= k+1 and τ(T[u]) = H; 
          else ns(T) = k and τ(T[u]) = 
τ(T1[u]). 
   Case 3. τ (T1[u]) =  and ns(TibM 2) 
          < k. 
Assume that C is the critical 
block of T1 and there exists an 
avenue passing two cycle 
vertices x and y of C. Let G1 
and G2 be the disjoint cactus 
graphs in {T1}x,y – {x,y}. For i = 
1, 2, let (  resp.) denote 
the cactus graph induced by 
V(G
x
iG
y
iG
i)∪{x} (V(Gi)∪{y} resp.). 
Without loss of generality, we 
assume that ns(G1) ≥ ns(G2) and 
os( ,x) ≥ os( ,y). xG1 yG1
          if i = A1, BB1,D1 or E, then 
            if ns(T1∪T2) = k, then 
              ns(T) = k+1 and τ(T[u]) = 
H; 
            else ns(T) = k and τ(T[u]) = 
τ(T1[u]). 
          if i = C1, then 
            if os( ∪TyG1 2,y) = k, then 
ns(T) = k+1 and τ(T[u]) = 
H; 
            else ns(T) = k and τ(T[u]) = 
τ(T1[u]). 
          Let v be the cycle vertex closest 
to u. 
          if i = A2, then 
            if ns((T1)v,u∪T2) = k, 
              then ns(T) = k+1 and 
τ(T[u]) = H; 
            else ns(T) = k and τ(T[u]) = 
τ(T1[u]). 
          Let v be the critical vertex of T1 
closest to u. 
          if i = BB2, then 
            if ns((T1)v,u∪T2) = k, 
              then ns(T) = k+1 and 
τ(T[u]) = H; 
            else ns(T)=k and τ(T[u])= 
τ(T1[u]). 
          if i = C2, then 
            if os( ∪TxG2 2,x) = k or 
os( ∪TyG2 2,y) = k, then   
ns(T)=k+1 and τ(T[u])=H; 
            else ns(T) = k and τ(T[u]) = 
τ(T1[u]). 
          if i = D2, then 
            if os( ∪TxG2 2,x) = k, then   
ns(T)=k+1 and τ(T[u])=H; 
            else ns(T) = k. 
  Case 4. τ (T1[u]) = H,E, ns(T2) = k and 
τ(T2[u]) =H,E. 
Then ns(T) = k. 
if τ(T1[u])=τ(T2[u])=H then 
τ(T[u]) = H; 
else if τ(T1[u])=τ(T2[u])=E then 
τ(T[u]) = Mv; 
          else τ(T[u])=E. 
  Case 5. ns(T2) = k and τ(T2[u]) =I, . ibM
Then ns(T) = k+1 and τ(T[u]) = H. 
  Case 6. τ (T1[u])=I,  and ns(TibM 2)=k. 
Then ns(T)=k+1 and τ(T[u])= H. 
 
The block merge algorithm on cactus 
graphs is similar to the merge algorithm on 
cactus graphs. We first consider the two 
terminal cactus graphs. A two-terminal 
cactus graph is a cactus graph in which we 
pick a cycle contains two specified non-cut 
cycle vertices called the terminal vertices. In 
the following, we consider a two-terminal 
cactus graph T in which u and v are terminal 
vertices. Let T1 and T2 be the disjoint trees in 
T − {u, v}. Notice that, normally, T1 and T2 
are not empty. However, either one may be 
empty at any one time, but not both. For i = 
1, 2, let ui (vi resp.) be the vertex of Ti 
adjacent to u (v resp.) and let  ( resp.) 
denote the cactus graph induced by V(Ti)∪ 
{u} (V(Ti)∪{v} resp.). See Fig. 4. 
u
iT
v
iT
 8
First, we consider the locations of the 
start vertex and the end vertex in an optimal 
search strategy for T. 
 
Lemma 6. Let T be a cactus graph and k the 
maximum search number over all tentacles 
of T. If Δk = 2, then there exists an optimal 
search strategy for T in which the start 
vertex and the end vertex are located in two 
different heavy tentacles. 
 
Lemma 7. Let T be a cactus graph and k the 
maximum search number over all tentacles 
of T. If Δk = 3, then there exists an optimal 
search strategy for T in which the start 
vertex and the end vertex are located in two 
different heavy tentacles. 
 
Lemma 8. Let T be a cactus graph and k the 
maximum search number over all tentacles 
of T. If Δk ≥ 4, then there exists an optimal 
search strategy for T in which the start 
vertex and the end vertex are located in two 
different heavy tentacles. 
 
Lemma 9. Let T be a cactus graph and k the 
maximum search number over all tentacles 
of G. If Δk ≥ 5, then ns(T) = k + 2. 
 
Algorithm Block_Merge (T: cactus  
graph): integer; 
{ Let k be the maximum search number over 
all tentacles. } 
Case 0: If k = 1, then return(3). 
Case 1: Δk  ≥ 5, then return(k + 2). 
Case 2: 3 ≤ Δk ≤ 4, 
for each two heavy tentacles Tu and Tv, do 
if Oriented_Search({T}u,v, u, v) ≤k + 1, 
then return(k + 1); 
return(k + 2). 
Case 3: Δk = 2, { let Tu and Tv be the heavy 
tentacles } 
if os(Tu, u) = os(Tv, v) = k and os({T}u,v, u, 
v) ≤ k, then return(k). 
else return(k + 1). 
Case 4: Δk = 1, { let Tu be the heavy 
tentacle } 
Case 4.1: τ (Tu[u]) = E, 
if δk ≤ 1 and δk + Δk−1 ≤ 3, then 
for each tentacle Tv with search number k of 
type H or k−1 of type other than H, do 
if Oriented_Search({T}u,v, u, v) ≤ k, then 
return(k); 
return(k + 1). 
Case 4.2: τ (Tu[u]) = I or M, 
if Block_Merge(T0) < k, then return(k). 
else return(k + 1). 
Case 5: δk = 0, 
if δk ≤2 and  Δk−1 ≤3, then 
for each two tentacles Tu and Tv with 
search number k of type H or k−1 of 
type other than H, do 
if Oroented_Search({T}u,v, u, v) ≤k, then 
return(k). 
return(k + 1). 
end Block_Merge. 
 
Algorithm Oriented_Search (T: 
two-terminal cactus  graph, u,v: vertices): 
integer; 
Case 0: If k = 1, then return(3). 
Case 1: Δm ≥ 3 or ns(T1) = m + 1, then 
return(m + 2). 
Case 2: Δm ≤2 and ns(T1) = m, compute 
os( [u]), os( [v]), os( [u]), and 
os( [v]); 
uT1
vT1
uT2
vT2
Case 2.1: os( , v) = m and os( , u) ≤ m, vT1 uT2
 10
cographs. SIAM Journal on Discrete 
Mathematics, 6(2):181–188, 1993. 
[7] G. J. Chang, F. K. Hwang, and Y. C. 
Yao. Localizing combinatorial 
properties for partitions on block 
graphs. Journal of Combinatorial 
Optimization, 2(4):429–441, 1999. 
[8] J. A. Ellis, I. H. Sudborough, and J. S. 
Turner. The vertex separation and 
search number of a graph. Information 
and Computation, 113(1):50–79, 1994. 
[9] J. Gustedt. On the pathwidth of chordal 
graphs. Discrete Appl. 
Math.,45(3):233–248, 1993. 
[10] F. Harary and G. Prins. The 
block-cutpoint-tree of a graph. Publ. 
Math. Debrecen, 13:103–107, 1966. 
[11] F. Harary. A characterization of block 
graphs. Canad. Math. Bull, 6(1):1–6, 
1963. 
[12] E. Howorka. On metric properties of 
certain clique graphs. Journal of 
Combinatorial Theory. Series B, 
27(1):67–74, 1979. 
[13] D. C. Kay and G. Chartrand. A 
characterization of certain Ptolemaic 
graphs. Canad. J. Math., 17:342–346, 
1965. 
[14] N. G. Kinnersley. The vertex separation 
number of a graph equals its 
path-width. Information Processing 
Letters, 42(6):345–350, 1992. 
[15] L. M. Kirousis and C. H. Papadimitriou. 
Interval graphs and searching. Discrete 
Mathematics, 55(2):181–184, 1985. 
[16] L. M. Kirousis and C. H. Papadimitriou. 
Searching and pebbling. Theoretical 
Computer Science, 47(2):205–218, 
1986. 
[17] T. Kloks, H. Bodlaender, H. Muller, 
and D. Kratsch. Computing treewidth 
and minimum fill-in: all you need are 
the minimal separators. Lecture Notes 
in Comput. Sci., 726:260–271, 1993. 
[18] T. Kloks. In Treewidth - Computations 
and Approximations, volume 842 of 
Lecture Notes in Comput. Sci. Springer, 
1994. 
[19] A. Kornai and Z. Tuza. Narrowness, 
pathwidth, and their application in 
natural language processing. Discrete 
Applied Mathematics, 36:87–92, 1992. 
[20] N. Megiddo, S. L. Hakimi, M. R. Garey, 
D. S. Johnson, and C. H. Papadimitriou. 
The complexity of searching a graph. 
Journal of the Association for 
Computing Machinery, 35(1):18–44, 
1988. 
[21] R. H. Mohring. Graph problems related 
to gate matrix layout and PLA folding. 
In Computational graph theory, pages 
17–51. Springer, 1990. 
[22] B. Monien and I. H. Sudborough. Min 
cut is NP-complete for edge weighted 
trees. Theoretical Computer Science, 
58(1-3):209–229, 1988. 
[23] S. L. Peng, C. W. Ho, T. S. Hsu, M. T. 
Ko, and C. Y. Tang. A lineartime 
algorithm for constructing an optimal 
node-search strategy of a tree. Lecture 
Notes in Comput. Sci., 1449:279–288, 
1998. 
[24] S. L. Peng,M. T. Ko,C.W.Ho, T. S. Hsu, 
and C.Y. Tang. Graph searching on 
some subclasses of chordal graphs. 
Algorithmica, 27(3-4):395–426, 2000. 
 12
