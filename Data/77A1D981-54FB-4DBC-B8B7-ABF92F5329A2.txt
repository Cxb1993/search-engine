摘要 
隨著積體電路製造與設計技術的進步，積體電路已進入 SOC 世代。然而複雜的 SOC 晶片也
衍生許多新的挑戰，其中 SOC 測試的問題為最嚴重的挑戰之一。傳統上以測試機台為主之
測試流程已經無法使用在 SOC 測試上，以無線測試平台來解決傳統測試機台所面臨的困境
為一可能之路徑。然而此無線測試平台要能夠成功，需有許多可測性設計技術之支援。因
此本計畫將開發適用於無線測試平台之內嵌式記憶體自我測試（BIST）、自我診斷（BISD）
及自我修復（BISR）技術。本計畫為三年期之計畫，第一年主要工作在於開發研究記憶體
自我修復技術及測試相關之關鍵技術，於關鍵技術開發完成後。第二年在針對無線測試環
境下所需克服之困難點。因此在計畫第二年，我們開發出記憶體診斷資料壓縮技術，以克
服無線測試資料傳輸頻寬的問題。第三年，我們開發運用於無線測試平台之記憶體自我修
復技術。本報告針對第三年研究成果做詳細之介紹。 
 
英文摘要 
With the advent technology and design methodology, integrated-circuit design paradigm 
has moved to SOC era. However, many new challenges must be resolved for complex SOC 
designs. One of major challenges is SOC testing. One of difficult testing challenges is that 
conventional test flow based on ATE cannot meet the requirement of SOC testing. Testing 
ICs using wireless test platform has been proposed to cope with this problem. However, 
specific design-for-testability circuitry must be added in the circuit-under-test, such that the 
chip can be tested with the wireless test platform. This project has developed efficient 
built-in self-test, self-diagnosis, and self-repair techniques for embedded memories in SOCs 
which are tested using wireless test platform. In the last year of this project, we focus on the 
topics of memory built-in self-repair. Therefore, we describe the results of the proposed 
memory built-in self-repair techniques in more details in this report. 
 
1. 簡介 
隨著製程演進，電晶體維度不斷縮減，單位晶片面積下可容納的電晶體大幅增加。因
而現今的積體電路設計皆朝向高合度與複雜化的趨勢前進。例如現今所盛行的系統單晶片
(system-on-chip, SoC)以及廣泛討論的系統級封裝(system-in-package, SiP)、晶片網路
化(network-on-chip, NoC)等研究。在現今複雜晶片中，內嵌式記憶體(embedded memories)
為最重要的元件之一。根據ITRS(International Technology Roadmap for Semiconductors)
的預測，至 2010 年，嵌入式記憶體將占據 90%的晶片面積，嵌入式記體的良率(yield)與
可靠度(reliability)將大幅支配著整體晶片的品質。現今 SoC 中動輒上百顆內嵌記憶體的
設計已不再陌生。受限於 SoC 寶貴且極為有限的對外連接頻寬，以及對測試速度的要求，
內建的測試相關電路已成為目前最經濟、最廣泛使用的解決方案。而針對記憶體良率的提
升，記憶體內建自我修復(built-in self-repair, BISR)電路的相關研究甚為熱門，已有
多種電路架構被提出[1-18]。BISR 電路須搭配含有備份元件(redundancy)的可修復式的記
憶體(repairable memory)。常見的備份元件有備份列(redundant row)與備份行(redundant 
column)(i.e., 稱為 2維備份元件組態。但仍有其他如備份 word 或是適用於階層式
 
圖二: (a) 典型自動化測試機台(ATE); (b) 無線測試平台。 
 
然而，相對於接觸式資料傳輸，無線資料傳輸的頻寬較低。雖然無線測試機台的成本
已大幅降低，但如何有效率的使用測試頻寬、增加晶片內部的測試平行度與降低整體測試
時間，成為無線測試平台的主要議題。因此，我們針對使用於無線測試平台下之記憶體內
建自我修復電路(BISR)技術開發了具高測試平行度及低測試與修復時間的 BISR 架構。關鍵
技術如下：低機台占用之記憶體內建自我測試與修復技術及平行分享式內建記憶體自我修
復技術。 
2. 低測試機台占用之內建記憶體自我測試與修復技術 
由上述介紹可知，對於內嵌式記憶體良率的提升，記憶體內建自我與修復電路(BISR)
已是目前最經濟的有效解決方案，主要由內建自我測試(BIST)與內建備份元件分析(BIRA)
電路所組成。而 BIST 與 BIRA 分別執行測試演算法(test algorithm, TA)與備份元件分析
演算法(redundancy-analysis algorithm, RA)。隨著製程演進，由於高密度與走在極端設
計規則的內嵌式記憶體更易發生瑕疵，可程式化(programmable)的 BISR 設計，讓測試工程
師在面對不同的測試與製造條件下，由晶片外部去調整記憶體的演算法，提高瑕疵診斷、
定位、瑕疵覆蓋率與良率的能力。假設有單一典型可程式化的 BISR，測試機台控制流程如
下: BISR 的初始化Æ測試指令提供Æ監測是否完成Æ下一測試指令的提供，如此不斷重複
至演算法執行完畢。但 SoC 中的記憶體可能高達上百個，晶片內也須設計多組 BISR 電路，
測試機台的控制將極為複雜。此外，測試機台對單一晶片的測試也須隨時監控，測試機台
單一通道的占用時間將與晶片的整體測試時間相等。 
一般而言，SoC 中除了記憶體測試的記憶體 BIST 外，還可能會有 logic BIST 與 analog 
BIST。在典型架構下，不同種類的 BIST 將循序執行，而測試機台占用時間將是所有種類
BIST 測試的總和，測試平行度低且測試時間長(圖三(a))。因此，我們提出低測試機台占
用的 BISR 架構，測試機台的占用只需在 BISR 初始化階段，接著測試機台的使用權可釋放
給其他種類的 BIST 使用(圖三(b))。預期優點如下: 
(1) 不同種類 BIST 間，高測試平行度的實現。 
(2) 大幅降低整體晶片測試時間。 
(3) 大幅降低測試機台的控制複雜度。 
根據實驗分析顯示，在所提出低測試機台架構下，對於使用 2分享式 BISR、8 記憶體模組
(i.e., 容量分別是 512K、512K、256K、256K、128K、512K、512K、256K bits)且測試演
算法分別為 March CW(40N)與 March X(6N)(i.e. ,N 為 word 個數)情況下，測試機台占用
時脈週期數約為典型架構下的 0.1%。 
控制並序列傳輸 AID 值到每個 memory cluster。接著，WTTW 透過 SHIFT_A_EN、SHIFT_I_EN
與 TDI 分別控制與程式化 TSB 與 TIB 的內容。最後 WTTW 將 BISR_EN 拉起，以致能 BISR 展
開測試。 
 
圖五：低機台占用之內建自我修復電路架構與測試流程 
 
UNREP 與 DONE 屬於測試資訊的回報。UNREP 拉起表示 – 任一 memory cluster 中，有記憶
體模組無法修復(i.e.,備份元件不足)。而 DONE 拉起表示 – 所有的 memory 皆已執行測試
與修復完畢。假設共有 N組 memory cluster，其中 UNREP = 
(UNREP_0|UNREP_1|…|UNREP_N-1)，而 UNREP_i 且 i=0~N-1 表示了個別 memory cluster 是
否有記憶體模組無法修復的情形。相似的，DONE = (DONE_0 & DONE_1 &…& DONE_N-1)，而
DONE_i 且 i=0~N-1 表示了個別 memory cluster 是否內部所有的 memory 皆已執行測試與修
復完畢。此外，AID_i 且 i=0~N-2 負責將每個 memory cluster 中的 AID 暫存器串接起來。
而 REQ_i 且 i=0~N-2 串接 memory cluster 中的資料優先權電路，用於 TIU-cluster 間指令
傳輸的控制(i.e., 將於以下說明)。其餘 SHIFT_CSI_EN、CSI、OCCUPY、 CMD_REQ 與 AID
負責 memory cluster 端的測試指令要求以及 TIU 的測試指令輸出(i.e., 將於以下說明)。 
¾ TIU 指令傳輸機制 
如圖六(a)，假設 memory cluster 0 與 cluster 1 分別執行兩種不同測試演算法 – 
March C-與 MMCA+WIPD。其中 March C-與 MMCA+WIPD 分別屬於 single 與 two port SRAM 的
測試演算法。TSB 儲存了這兩種演算法的指令排序，而 TIB 儲存了所有測試指令。由於
signle-port 與 two-port SRAM 的測試演算法中，部分指令可共用，可減少儲存至 TIB 的
資料與所需暫存器空間。圖六(b)顯示了指令要求優先權的產生與測試指令要求的流程，此
機制是為了解決兩 memory cluster 中 BISR 同時要求測試指令的問題(i.e., congestion 
problem)。當 BISR 執行完一組測試指令時，內部的 FSM 會將 REQ_fsm(圖六(b))拉起，並
確認 REQ_in 是否為 1。REQ_in 來自上一級的 BISR，若為 1，表示前級有某 BISR 正有指令
的要求，本級 BISR 則會進入等待(i.e., 優先權由最前級最高，依序遞減)。反之若 REQ_in
為 0，BISR 也會確認來自 TIU 的 OCCUPY 是否為 1(i.e. ,由於從 BISR 從指令的要求到 TIU
真正把指令輸出會有段搜尋時間，倘若此時優先權比自己高的 BISR 也有指令需求，可能會
產生碰撞。所以當 TIU 一收到指令需求 CMD_REQ=1 後，在下一時脈週期就會把 OCCUPY 設為
TPG 根據 CCA 所送出的測試指令來產生測試徵狀。local bitmap 可蒐集由 TPG 所偵測的瑕
疵資訊。此外，Wrapper 端控制器可執行的 2簡易 RA 規則如下: 
(1) row-repair rule: 若所偵測到記憶體的瑕疵字組(faulty word)含有兩個以上的
瑕疵位元，則以備份列修復此 faulty word。 
(2) 1D-repair rule: 若備份列(行)使用完畢，將所有剩餘的備份行(列)修復 local 
bitmap 中的瑕疵資訊。 
CCA 內包含了一控制器—負責控制測試指令與瑕疵資訊的傳輸，以及一時序多工
BIRA(time-multiplexed BIRA)執行 local-repair-most (LRM)演算法[10]。LRM 演算法的
概念為: 確認 2D bitmap 中有最長瑕疵線(faulty line)的部分(i.e., 即瑕疵個數最多的
列或行)，並修復。若存在最長瑕疵列與最長瑕疵行相等(i.e., 瑕疵個數一致)，則可設計
BIRA 以備份列或備份行來修復最長瑕疵線。一般而言，BISR 內繞線密度最高的區域在於與
記憶體間的界面，因而，我們把 TPG 設計在記憶體相鄰處可降可能發生的繞線問題。此外，
CCA 與 Wrapper 間的繞線極少(i.e., Scan_en_C、Scan_out_C、Scan_en_L、Scan_out_L)，
使此架構可支援更多的記憶體模組。此外，每個 Wrapper 會有 4訊號線與另一 Wrapper 相
連接。假設共有 N個記憶體模組，其中 Unrep = (Unrep0|Unrep_1|…|UnrepN-1)，而 Unrepi
且 i=0~N-1 表示了個別記憶體模組是否有無法修復的情形。相似的，Done = (Done0 & Done1 
& … & DoneN-1)，而 Donei且 i=0~N-1 表示了個別的記憶體模組是否已執行測試與修復完
畢。而 Reqi 且 i=0~N-2 負責串接每個 Wrapper 內的優先權產生電路(i.e. ,如圖八(b))，
並由優先權來決定 Wrapper 是否可傳送資料至 CCA 做分析。當 Wrapper 已傳送完待分析資
料至 CCA，則 Wrapper 拉起 RAi (i=0~N-1)訊號。而 RA = (RA0|RA1|…|RAN-1)拉起，CCA 開
始分析。 
 
圖七: 平行分享式 BISR 電路架構圖 
 
¾ 記憶體修復流程 
我們以圖八(a)、(b)的 Wapper 與 CCA 狀態圖來說明修復流程。首先當電源開啟後，記
Wrapper 確認本身為最高優先權後才會送出 bitmap 資訊到 CCA。我們以圖九來說明三個記
憶體模組狀況下，CCA 的時序圖。在時間 t0 時，Wrapper0 與 Wrapper1 同時要求 CCA 服務，
Req0 與 Req1 同時拉起。由於 Wrapper0 有較高優先權，CCA 開始做 RAM0 的 RA 分析，之後
再執行 RAM1 的 RA 分析。而 t1 時，Wrapper2 提出 CCA 使用要求，此時 CCA 仍在執行 RAM1
的 RA。待 RAM1 分析做完，進入 RAM2 的 RA 分析。而 t2 時，RAM1 又再度要求 CCA 而執行
RA。 
 
圖九: 三個記憶體模組下 CCA 的時序圖 
 
以上，說明了 row-repair rule、1D-repair rule 以及 local-repair-most 的執行條件以
及 CCA-Wrapper 間的動作時機。而資料的詳細傳輸機制將於以下說明。 
¾ Bitmap 資訊與修復策略傳輸 
當 Wrapper 要求 CCA 的服務時，Wrapper 會先將 local bitmap 的資訊複製到 CCA 的
global bitmap。如圖十(a)，假設 local bitmap 的大小為 3×3，而 global bitmap 為 5×5。
由於不同 Wrapper 的 local bitmap 其容量可能不同，通常依據備份元件的個數來決定。因
此，我們設計 CCA 的 global bitmap 大小與最大容量 local bitmap 相等，以完整蒐集所有
Wrapper 端傳送的瑕疵資訊。傳送時，local bitmap 的每個列會個列會分批送出。Scan_en_L
拉起 3個時脈週期送出 100(i.e., 1 表示有紀錄瑕疵的位置)，而 CCA 會將此資訊暫存在
temp。待 local bitmap 的第一個列傳送完畢，Scan_en_L 下降，CCA 將 temp 的資訊寫入
global bitmap 的第一個列。依照此機制，local bitmap 的第二、三列也依序送入 temp，
並記錄在 global bitmap 的二、三列。因此，CCA 並不需要知道 local bitmap 的大小便能
將 local bitmap 中瑕疵的相對位置複製到 global bitmap。Bitmap 傳輸完畢後接著 Wrapper
將 RAi (i=0~N-1)訊號拉起，通知 CCA 開始做 RA 分析。 
當 CCA 分析完畢，將決定 bitmap 中的一列(行)做修復。如圖(b)，CCA 中含有兩組暫存器
記錄備份行或備份列的修復策略 – Strategy_SC 與 Strategy_SR。以圖(b)為例，CCA 決
定要修復 global bitmap 中第三行的瑕疵，因此 Strategy_SC 的第三位元紀錄為 1。由於
global bitmap 大小為 5×5，修復策略為 5+1 位元(i.e. ,MSB 的 R/C 表示修復列或行)。而
Scan_en_C 拉起後控制修復策略的輸出，並暫存在 Wrapper 端的 temp。傳送結束後，Wrapper
會將 local bitmap 中要修復的位置清除並將修復資訊另存。 
 圖十一: FPGA 展示架構圖與記憶體修復流程 
 
圖十一右側列出了FPGA的展示流程：(1) BISR Reset (BISR重置) Æ (2) AID Config. (設
定各 memory cluster 所需執行的演算法 ID) Æ (3) TIU Config. (設定 TIU 內容) Æ (4) Test 
Enable (啟動 BISR 展開測試) Æ (5) Scan Out (輸出所有計數器的值與記憶體修復分析結果) 
Æ (6) TPG Reset (重置 TPG 啟動第二次測試) Æ (7) Scan Out (輸出計數器的值)。 
圖十二(a)為 FPGA 的展示平台。在測試指令執行後，記憶體開始測試，並在測試完畢
後將以上說明的計數器值輸出，在透過 parser 將封包解出。如圖(b)，parser 將可在螢幕上
顯示出(1) 待測記憶體修復解果 – 可修復或不可修復，(2) TIU 的初始化時間與 BISR 執行
時間，(3) 修復徵狀 – 包含哪些備份元件被使用以及被修復的行/列位址。如圖(c)，parser
最後會顯示有 TIU/無 TIU BISR 的測試時間計算結果，並顯示其測試時間的比例。 
 
(a) 
可減少占用機台頻寬) 
表二首先定義了時間分析所需的相關參數，而我們將依照表三的四種 BISR 類別去討
論: 分別是(1) BISR 有搭配 TIU 與否，(2) 晶片內是否有可自我程式化的融絲。倘若任意
記憶體於測試當中，BIRA 判定記憶體的瑕疵分佈已無法修復，將結束整個測試與修復流
程。其占用機台時間會與記憶體可修復的情形不同。因此，圖十三(a)/(b)分別分析記憶
體可修復/不可修復情況下的機台占用時間。圖(a)顯示了四種情況，Case1/2 為有搭配 TIU
的 BISR。而 Case1 為 BISR 內未搭配自我程式化融絲，所以比 Case2 增加了傳送修復徵狀
至晶片外的時間(TSYN)。Case1 - 有搭配 TIU 且無自我程式化融絲的機台占用時間為: 
(K+1)TTIU + (K+1)TRSP + (K+1)TSYN 。K 值表示了考慮無線通道的傳輸速度。另外，Case3/4
是屬於沒有搭配 TIU 的 BISR，需要比 Case1/2 多考量 BISR 的執行時間(TBISR)。圖十三(b)
只考量有無 TIU 的兩種情況，因為記憶體無法修復的情況下，不管有無自我程式化融絲，
BISR 皆不須傳送修復徵狀。相似的，由於 Case2 無搭配 TIU，需要比 Case1 多考量 BISR
的執行時間(TBISR)。 
(a) 
 
 
 
 
(b) 
圖十三: 機台占用時間分析 (a) 記憶體可修復情形，(b) 記憶體不可修復情形 
 
 
¾ 使用於分析之 BISR 相關參數: 
表四: BISR 與記憶體參數 (BISR 為所提出的平行-分享式 BISR) 
Memory 
Cluster 
Memory 
Configuration 
(R)x(C)x(Word) 
Local Bitmap 
Configuration 
Redundancy 
Configuration 
0 9x4x64 (512K) 3x3 2R2C 
9x4x64 (512K) 4x4 2R3C 
9x4x32 (256K) 3x3 2R2C 
8x4x64 (256K) 4x4 2R3C 
8x4x32 (128K) 3x3 2R2C 
BISR with Self-Programmed Fuse 
F_SEL TIU BISR (T) NON-TIU BISR (N) T/N % 
00 484 467445 0.1035 % 
01 484 467842 0.1035 % 
10 484 476760 0.1015 % 
11 484 33187 1.4584 % 
BISR without Self-Programmed Fuse 
F_SEL TIU BISR (T) NON-TIU BISR (N) T/N % 
00 1202 468163 0.2567 %  
01 1202  468560  0.2565 %  
10 1202  477478  0.2517 %  
11 484  33187  1.4584 %  
由表六可觀察知，當記憶體可修復的情況下，當 BISR 有配置可自我程式化融絲時，有
/無使用 TIU 所佔用測試機台時間比例(i.e. ratio of T/N)約為 0.1%。而未配置可自我程
式化融絲的 BISR 略高於前者，也約在 0.25%。若記憶體不可修復，由於測試時間縮短，造
成 T/N 比例上升，但仍極低。以上分析，假設使用了所提出的平行-分享式 BISR，其 BISR
執行時間(TBISR)遠小於典型非平行-分享式 BISR。因此，若以典型非平行-分享式 BISR 做分
析，其 T/N 比將更低。 
 
圖十五: K 值 v.s. 機台占用時間與 T/N 比例 
 
此外，K值(i.e. 無線通道與待測電路時脈速度的比例)越大，表示無線傳輸通道速度
越慢於待測電路的速度。觀察圖十五，當 K值越大，未使用 TIU 架構 BISR 占用機台時間
(case3/4)仍遠大於有使用 TIU 架構的 BISR(case1/2)。再觀察 T/N 比，隨著 K值上升，T/N
比也會上升。這意謂著隨著 K值增加將會降低 TIU BISR 的優勢。無論如何，當 K=400，有
表九：Area Overhead  
平行-分享式 
BISR 面積 (P) 
cluster 0 記憶體
總面積 (M) 
(含備份元件) 
(P/M) % 
84008 10361000 0.81 % 
 
6. 晶片實作 
 
圖十六: 晶片佈局圖與晶片規格 
 
7. 結論與研究成果 
嵌入式記憶體的測試與修復甚為重要，已成為決定系統晶片良率與品質的關鍵之一。
針對於不斷提升的測試複雜度與成本，無線測試平台提供了相對於典型機台測試的另一低
成本的選擇，而不是靠不斷的提升與增加測試機台的複雜度來完成測試。本計畫為了使用
此一低成本的無線測試平台，設計了整合內建自我修復電路與測試平台間的電路。此外，
另提出了兩種電路階層上，將低測試與修復時間的 BISR 架構: 分別是(1)低測試機台占用
以及 (2)平行-分享式 BISR。實驗結果顯示，所提出的架構大幅降低測試與修復時間，進
而改善無線測試平台傳輸頻寬較低的問題。在三年計畫支持下，我們共發表 8篇 SCI 期刊
論文及 21 篇會議論文。以下，列出了本計畫中的論文產出。 
 
¾ 期刊論文 
1. J.-F. Li,``Testing ternary content addressable memories with comparison faults using march-like tests,'' IEEE 
Trans. Computer-Aided Design of Integrated Circuits and Systems, vol.26, no.5, pp. 919-931, May 2007.  
2. Y.-J. Huang and J.-F. Li,``Testing ternary content addressable memories with active neighborhood pattern 
sensitive faults ,'' IET Proc. Computers and Digital Techniques (formerly IEE Proc. Computers and Digital 
Techniques), vol.1, no.3, pp. 246-255, May 2007.  
13. J.-F. Li, C.-H. Wu, and C.-S. Hou,"A reliability-enhancement technique for RAMs with dynamic faults," in 
Proc. 1st VLSI Test Technology Workshop (VTTW), (Hsinchu), pp. , July 2007. 
14. J.-F. Li, F. Zheng, and K.-T. Cheng,"Diagnosing scan chains using SAT-based diagnostic pattern generation," 
in Proc. IEEE International SOC Conference (ISOCC), (Hsinchu), pp. 273-276, Sept. 2007. 
15. Y.-X. Yang, J.-F. Li, H.-N. Liu, and C.-L. Wey,"Design of cost-efficeint memory-based FFT processors ," in 
Proc. IEEE International SOC Conference (ISOCC), (Hsinchu), pp. 29-32, Sept. 2007. 
16. J.-F. Li,"Testing comparison faults of ternary content addressable memories with asymmetric cells," in Proc. 
IEEE Asian Test Symp. (ATS), (Beijing), pp. 495-500, Oct. 2007. 
17. H.-H. Wu, J.-F. Li, C.-F. Wu, and C.-W. Wu,"CAMEL: an efficient fault simulator with coupling fault 
simulation enhancement for CAMs," in Proc. IEEE Asian Test Symp. (ATS), (Beijing), pp. 355-360, Oct. 2007. 
18. C.-K. Lai, Y.-J. Huang and J.-F. Li,"A built-in self-repair scheme for ternary content addressable memories 
with address-input-free writing function ," in Proc. 2st VLSI Test Technology Workshop (VTTW), (Tainan), pp. , 
July 2008 (to appear). 
19. H.-N. Liu, Y.-J. Huang and J.-F. Li,"A packet-based built-in self-test method for RAMs in mesh-based NoCs ," 
in Proc. 19th VLSI/CAD Symp., (Pintung), pp. , Aug. 2008 (to appear). 
20. T.-W. Tseng and J.-F. Li, "A shared parallel built-in self-repair scheme for random access memories in SOCs," 
in Proc. IEEE Int. Test Conf. (ITC), (Santa Clara), Paper 25.2, pp. 1-8, Oct. 2008 (to appear). 
21. Y.-J. Huang and J.-F. Li,"A low-cost pipelined BIST scheme for homogeneous RAMs in multicore chips," in 
Proc. IEEE Asian Test Symp. (ATS), (Sapporo), pp. 495-500, Nov. 2008 (to appear). 
 
8. 參考文獻 
[1] I. Kim, Y. Zorian, G. Komoriya, H. Pham, F. P. Higgins, and J. L. Lweandowski, “Built in self repair for 
embedded high density SRAM,” in Proc. Int’l Test Conf. (ITC), Oct. 1998, pp. 1112–1119. 
[2] V. Schober, S. Paul, and O. Picot, “Memory built-in self-repair using redundant words,” in Proc. Int’l Test Conf. 
(ITC), Baltimore, Oct. 2001, pp. 995–1001. 
[3] S. Nakahara, K. Higeta, M. Kohno, T. Kawamura, and K. Kakitani, “Built-in self-test for GHz embedded 
SRAMs using flexible pattern generator and new repair algorithm,” in Proc. Int’l Test Conf. (ITC), 1999, pp. 
301–310. 
[4] D. K. Bhavsar, “An algorithm for row-column self-repair of RAMs and its implementation in the Alpha 
21264,” in Proc. Int’l Test Conf. (ITC), Atlantic City, Sept. 1999, pp. 311–318. 
[5] T. Kawagoe, J. Ohtani, M. Niiro, T. Ooishi, M. Hamada, and H. Hidaka, “A built-in self-repair analyzer 
(CRESTA) for embedded DRAMs,” in Proc. Int’l Test Conf. (ITC), 2000, pp. 567–574.  
[6] D. Xiaogang, S. M. Reddy, W.-T. Cheng, J. Rayhawk, and N. Mukherjee, “At-speed built-in self-repair 
analyzer for embedded word-oriented memories,” in International Conference on VLSI Design, 2004, pp. 
895–900. 
[7] M. Nicolaidis, N. Achouri, and S. Boutobza, “Dynamic data-bit memory built-in self-repair,” in Proc. 
IEEE/ACM Int’l Conf. on Computer-Aided Design (ICCAD), San Jose, Nov. 2003, pp. 588–594. 
[8] M. Nicolaidis, N. Achouri, and L. Anghel, “A diversified memory builtin self-repair approach for 
nanotechnologies,” in Proc. IEEE VLSI Test Symp. (VTS), Napa Valley, Apr. 2004, pp. 313–318. 
[9] C.-L. Su, Y.-T. Yeh, and C.-W. Wu, “An integrated ECC and redundancy repair scheme for memory reliability 
enhancement,” in Proc. IEEE Int’l Symp. on Defect and Fault Tolerance in VLSI Systems (DFT), Monterey, CA, 
Oct. 2005, pp. 81–89. 
可供推廣之研發成果資料表 
□ 可申請專利  ■ 可技術移轉                                      日期：97 年 10 月 30 日 
國科會補助計畫 
計畫名稱：用於無線測試平台之內嵌式記憶體自我測試、診斷與修
復技術 
計畫主持人：李進福 
計畫編號：NSC 96－2221－E－008－094－學門領域：微電子 
技術/創作名稱 平行分享式記憶體自我修復技術 (Parallel Shared Memory Built-in Self-Repair Technique) 
發明人/創作人 曾子維、李進福 
技術說明 
中文： 
 
 
 
英文：Embedded memories currently constitute a significant portion of the chip area for 
typical system-on-chip (SOC) designs. Built-in self-repair (BISR) techniques have been widely
used for enhancing the yield of embedded memories. This paper proposes a shared parallel 
BISR scheme for random access memories (RAMs) in SOCs. The shared parallel BISR can
test and repair multiple RAMs simultaneously. A global time-multiplexed built-in redundancy 
analyzer (TM-BIRA) is used to allocate redundancies of the RAMs under test and repair. We 
also design a 1500-compatible wrapper for chip-level control of the shared parallel BISR 
circuits. In comparison with the dedicated parallel BISR scheme (each memory has a 
self-contained BISR circuit), the proposed parallel BISR scheme can achieve 20% reduction of 
area cost by paying additional 0.005% test and repair time for serving 5 RAMs with spare rows 
and spare columns. 
可利用之產業 
及 
可開發之產品 
IC 設計、記憶體設計 
技術特點 
1. 低測試與修復時間 
2. 低面積成本 
3. 具有晶片層級自我測試與修復電路之 IEEE 1500 控制介面。 
