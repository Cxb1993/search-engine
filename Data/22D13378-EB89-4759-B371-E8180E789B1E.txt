 1
1. Introduction 
The approach of business modeling has been addressed recently due to the 
implementation of business application technologies such as ERP. A business model 
would be developed to incorporate with the development of an ERP software such as 
the “best practice” model for SAP. In most of the cases, the business models would be 
specified in terms of the process. For examples, SAP applied EPC (event process 
chain) approach to specify its business model. A business process such as ordering 
process would be described in terms of EPC. An ERP user should be familiar with the 
process while using the software. However, in the real case, a process model usually 
included a lengthy process contained many process components and hence might be 
difficult to study by the users as well as the managers.  
In addition to model a business from its process point view, functional approach 
was widely used by business modelers. Many tools such as IDEF or ARIS applied the 
hierarchical concept to build a functional model. This concept was expressed in the 
upper part of Fig-1. In this approach, a macro model was developed in the top level, 
then, the detailed models were built in the lower level to form a tree style. In other 
words, in the hierarchical approach, the more detailed model can be found in the 
lower level and the more abstract model can be specified in the higher level. 
Therefore, one can study the business model from a macro level to the detailed level 
or vise versa. One of the benefits of this approach was that a model can be studied 
from the abstract level to the detailed level. There would be no lengthy model in a 
sub-level of a hierarchical model. In addition, a manger only needed to study the 
properly abstract model and let the detailed parts to carry out by the subordinate users.  
As just mentioned, many business model used by ERP were specified in terms of 
process and hence might be too detailed to study by management level. On the other 
hand, a hierarchy functional model can represented a model from its abstracted point 
of view and hence might be suitable for the management level to study. However, 
there still lacks a bridge to link the process model and its respective hierarchical 
model (Fig-1). 
In this paper, an approach transferred an EPC based process model into the 
respective hierarchical functional model was proposed. The proposed approach would 
identify the structure errors in a process model and then modified it to a structured 
process model. Then a blocking approach would be used to group sets of process 
elements into several sub-function units and to form a hierarchical model.  
 
2. Background 
Due to the application of information technology in the workflow and ERP areas, 
various kinds of issues have been addressed on applying business modeling 
 3
addressed on integration the information view into a process model in a PDM/ERP 
collaboration system [Ouyang 02]. As to the works related to CIMOSA, many works 
were addressed on applied the templates and constructs to develop a CIMOSA model 
in various fields such as production planning [Ortiz 99], re-engineering [Abdmouleh 
04], and software system selection [Naeger 95].  
In the recent years, due to the fast development of information technology, 
several modeling methods have embedded web-based concepts into the approach. 
Among those, the most well-known technique probably was BPMN (Business Process 
Modeling Notation). It was developed by BPMI (Business Process Management 
Initiative) as a standard for business process modeling. “The primary goal of BPMN 
is to provide a notation that is readily understandable by all business users, from the 
business analysts that create the initial drafts of the processes, to the technical 
developers responsible for implementing the technology that will perform those 
processes, and finally, to the business people who will manage and monitor those 
processes” [BPMN 04].  
BPMN also provided a mapping to an XML based BPM (Business Process 
Management) execution language BPEL4WS. Therefore, the business process can be 
defined in terms of BPMN notations and then transferred into BPEL4WS oriented 
XML language. The transferred XML business process can be executed in the web 
service environment. 
Performance evaluation of workflow systems has been studied by many 
researchers. Petri net (PN) is one of the most popular methods used to model the 
systems. Basically, PN properties can be divided as behavior properties and structure 
properties. The former one was related to the flow of the tokens in the net such as 
reachabilities, liveness and boundness. The latter one was related to the entire 
structure of the net such as consistency and conservativeness [Murata 89].  
Several researchers also worked on developing the PN schema to represent certain 
characteristics of business processes. For instance Choi et al. have proposed a colored 
PN called “Test Net” to represented the concepts of AND/OR/Join/Split proposed by 
WfMC (Workflow Management Coalition) [Choi 02]. Coves et al. defined the 
business models as three categories: forward; backward and mutual, and developed 
the related PN model for each category [Coves 98]. Buhler et al. utilized BPEL4WS 
(Business Process Execution Language for Web-Service) to model the workflow in an 
agent-based system and then transferred the model into PN for further analysis 
[Buhler 05] 
Recently, the process modeling approach, event process chain (EPC), has been 
addressed by many researchers. For instance, a well structured EPC model has been 
defined such that certain structure error such as deadlock and multiply instance would 
 5
EPC model would then be constructed in terms of a Java based tools developed by 
this research. 
 
3.1 The Conceptual Level 
As mentioned before, the main concept of this research was to propose an 
approach such that a process model can be viewed hierarchically. However, in order 
to build a tree-structure model, it is necessary to modify an improper model into 
hierarchical form. Therefore, the improper process must be defined and identified first. 
In addition, how to modify various kinds of unstructured models into their respective 
structured model also should be specified first. Then, the next step was to develop an 
approach to group a structured model into several main blocks and sub-blocks and to 
build a hierarchical model based on the blocked model.  
 
3.2 The Design Level 
In this level, an approach to convert an unstructured business model to a 
structured model would be specified. The improper structure would be identified first. 
Then, the constructs caused the improper structured would be found. An approach 
modifying the constructs and to convert an improper structure to a proper structure 
would be proposed. Then, the next stage was to convert a structured model to its 
hierarchical form. An approach would be used to group a structure model into several 
main blocks contained respective-sub-blocks, and then to convert the grouped blocks 
into a tree structure.   
 
3.2.1 Improper Structure Modification 
Fig-3 shows the approach to transfer an improper structure to a proper structure. 
The first stage was to examine the improper structure of the process model, and the 
second stage was to analyze the semantic errors of the model.  
There were two situations caused an improper structure in a process model [Liu 
05]. One was “mismatched split-joint pairs”, and another was due to “improper 
nesting”. Basically, a pair of corresponding control elements in a process model 
would be a matched split-joint pairs if either AND Split v.s. AND Join, OR Split v.s. 
OR Joint, or XOR Split v.s. XOR Joint. Otherwise, there would be a mismatched 
split-joint pairs occurred. In addition, if two sets of matched split-joint pairs were not 
completely in a common path, the improper nesting would be occurred. For detailed 
definitions of this two terms, please refer to [Liu 05].  
For an improper structure model, the process behaviors might contain two kinds 
of semantic errors [Cuntz 05]. They are deadlock and multiple instances. Basically, 
most of the situations were due to the unmatched pairs of control elements.  
 7
to construct a hierarchical form for this model. There are two main tasks in this stage: 
to group the model into to several blocks based on the corresponding control elements, 
and then to develop the tree structure for this model based on the grouped blocks.  
The first stage was to group the model constructs into several blocks as shown in 
Fig-7. An approach applied the concepts of finding corresponding control elements in 
a process model, and then to form a group of blocks has been developed. The model 
in Fig-8 would be used as an example.  
The following symbols would be defined first: 
SP={spi, i=1..n} : a set of split control nodes in a process model.  
JP={jpj, j=1..n} : a set of joint controls in a process model. 
1 2{ , ,... }
i i i i
n
sp sp sp spi l l l=  : a set of links connected from split node spi. 
1 2{ , ,... }
j j j j
n
jp jp jp jpi l l l= : a set of links connected to joint node jpj. 
FPATHi,j= , , ,1 2{ , ,..... }
i j i j i j
np p p : a set of paths from a split node spi to a joint node jpj 
, , , ,
,1 ,2 ,[ , ,.... ]
i j i j i j i j
k k k k np l l l= : a path in a process model which is composed by a list of links 
,
,
i j
k nl  in a sequence order. 
, , , ,
, , 1 ,1[ ] [ , ,... ]
i j T i j i j i j
k k n k n kp l l l−= : a reversed path for path ,i jkp . 
RPATHj,i= , , ,1 2{ , ,..... }
j i j i j i
np p p : a set of reversed paths from a joint node jpj to a split 
node spi 
For example, in Fig-8, the split node set and joint node set can be represented as 
SP={n1, n2}, JP={n3, n4}. There are two links connected to n1 and n4 respectively. 
Therefore, ln1={pa, pi}, and ln4={ph, pk, pl}. In, addition, there are three paths from 
split node n1 to joint node n4, and hence it can be specified as: 
FPATHn1,n4= 1, 4 1, 4 1, 41 2 3{ , , }
n n n n n np p p . Each of the three paths can be represented as: 
1, 4
1 [ , , , , , ]
n np pa pb pc pe pg ph= , 1, 42 [ , , , , , ]n np pa pb pd pf pg ph= , 
1, 4
3 [ , , , ]
n np pi pj pk pl=  
In addition, there are three reversed paths from joint node n4 to the split node n1. 
Therefore, it can be written as RPATHn4,n1= 4, 1 4, 1 4, 11 2 3{ , , }
n n n n n np p p . Each of the three 
 9
2. 4nph l∈  and 4, 1 4, 11n n n np RPATH∈ , 4, 1 4, 12n n n np RPATH∈  such that 
4, 1
1
n nph p∈ and 4, 12n nph p∈ . In addition, 4npk l∈  and 4, 1 4, 13n n n np RPATH∈ such 
that 4, 13
n npk p∈ . 
3. This condition has been specified in the previous paragraph. It can be found that 
for each 1, 4n nkp  in FPATH
n1,n4, and for each 4, 1n nkp  in RPATH
n4,n1, such 
that 1, 4 4, 1[ ]n n T n nk kp p= for k=1,2,3. 
4. Both of the node n1 and n4 are AND nodes, 
 
On the other hand, split node n1 and joint node n3 cannot form a pair of 
corresponding control points since 1npa l∈ 1, 3n npi FPATH∉ .  
Based on the above definition, an algorithm can be developed to form pairs of 
split/joint nodes. Then, for each pair, all of the constructs in the path, including the 
control nodes, event nodes and function nodes would be grouped as a block as shown 
in Fig-7. 
 The final step in this stage was to build a hierarchical function model according 
to the information about the split/joint nodes and the grouped blocks. For instance, In 
Fig-9-1, the constructs between the control nodes 4 and 10 can be grouped as a block 
(block A). In addition, the constructs between control nodes 11 and 14 also can be 
group as another block (block B). Then, the constructs between the control nodes 3 
and 16 can be grouped as a higher level block (block C). Finally, the rest of constructs 
can be formed as a group. The resulted hierarchical model was shown in Fig-9-2. 
An algorithm has been developed to construct the tree model. There is one 
assumption has been made while developing this algorithm. That is in an ordinary 
EPC model, each event construct usually should follow a function construct. However, 
in this work, the event construct would not be considered in the building of the 
hierarchical model since each functional construct in the model would have a 
corresponded event construct.  
The additional symbols were required to specify the algorithm. 
fi: a function construct, where i=1..n 
k
iF : the kth function block in the level i of the tree model. 
Based on the above two definitions, a hierarchical model can be defined as: 
 11
i. Generate root node 1
PF  
ii. Find the first function node (node-2), let it be f2 and add to 1
PF . 
iii. Travel to the next node (node-3). Since it’s a split control node, then use step 
3.2 in the algorithm.  
iv. For Step 3.2.1, find the corresponding control element for node-3. That 
would be node-16. 
i. Back to Step 3 to find the next node was a function node f17. According 
to Step 3.1, add that node to 1
PF . 
ii. Back to Step 3 again, and find the end of the path, stop the search of 
this path. 
v. For Step 3.2.2, generate a next level functional block 2
CF and add into 1
PF .  
vi. For Step 3.2.3, let 2
CF be the next level root node. For each of the split path, 
go to Step 3. 
The rest of the process would add to sub-function blocks ( 3
AF , 3
BF ) into root 
2
CF since there were two split nodes (node-11 and node-5) in the path. Then, for each 
of the function block, certain function nodes (f6, f7, f13) would be added separately. The 
final hierarchical model would be (Fig 9-2): 
1
PF ={ 2
CF , f2, f17}, 2
CF ={ 3
AF , 3
BF }, 3
AF ={f6, f7} and 3
BF ={f13}  
 
3.3 The Implementation Stage 
In this level, the EPC business model would be constructed in ARIS. The XML 
file of the model would be exported and translated to an EPML (EPC Markup 
Language) file through a Java based XSLT translation templates developed by 
Mendling et al. [Mendling 04]. This EPML file would then be the input of another 
tool “EPC Tools” to check the semantic of the model [Cuntz 05]. This tool would 
simulate the EPC process model and identify the improper structure of the model. 
Then, the model should be modified by the analyzer based on the modification 
principles developed by this research. The structured model would then be analyzed 
by a Java based algorithm to translate to a model represented by a set of blocks. This 
model would then be transferred to a hierarchical tree model by another Java based 
 13
predecessors and successors of the split node. Also, the fourth row indicated the joint 
node and the fifth and sixth rows showed the predecessors and successors of the joint 
node. 
For instance, in the first row, the split node was Node-32-XOR. Its predecessor 
was Node-46 Function 1, and the successors were Node-37 Event 5, Node-62 XOR 
and Node-66 Event 4 respectively. In addition, the corresponding control node was 
joint node Node-34-XOR. Its predecessors and successor were Node-9 Event7, 
Node-37 Event 5, Node-64 XOR; and Node-18 Function 4 respectively. The similar 
information about another control pairs, Node-62 and Node-64, could be found in the 
bottom row of Figure-14-2. 
Once all of the corresponding control points have been identified, the next stage 
was to construct the hierarchical tree model. Another Java module, which take the 
table of control pairs as input and used the function block/function tree construction 
algorithm specified in section 3.2.2, was developed. Fig-15 showed the constructed 
hierarchical tree model about the empirical EPC model. As mentioned before, only the 
functional constructs would be specified in the tree model. It could be found that, 
instead of the root node in the level-1, there were four nodes in the level-2 of the tree 
(Node-32; 50; 5, and 42). Each node has its subsequent lower level nodes. For 
instance, for the root node 32 in the top of the EPC model, it has another lower level 
tree structure leaded by node 62 as the root. In, addition, there was another lower level 
node, Function 3, showed in the tree. It should be noticed that, although there were 
three split links for node 32, one of the branch only contained an event node and 
hence was not considered by the algorithm.  
 
5. Conclusion and Discussion 
 An approach to identify the functional hierarchy from an EPC model and then to 
construct a tree model was proposed in this work. This work can be used to support 
the feasibility of viewing a complex process model from its abstract level to the 
detailed stage. The major contributions of this paper are: 
1. A structural approach which modified an unstructured EPC model and then 
converted into a hierarchical tree model was developed. 
2. An approach to find the pairs of corresponding control elements from an EPC 
model has been defined and developed. 
3. An approach to construct a hierarchical tree model from an EPC model according 
its corresponding control elements have been defined and developed. 
However, there are some works still worth to do in the future: 
1. Analysis the diversity of the process flow after the logic change of the control 
elements. 
 15
Reference 
[Abdmouleh 04] Abdmouleh,A., Spadoni,M., and Vernadat, F., “Distributed 
Client/Server Architecture for CIMOSA-based Enterprise Components”, Computers 
in Industry, Vol.55 (2004), p239-p253. 
[Aalst 99] Aalst van der, W. M. P., “Formalization and Verification of Event-Driven 
Process Chains,” Information and Software Technology, Vol.41, 1999. 
[BPMN 04] Business Process Modeling Notation Version 1.0 (BPMN), BPMI , May 
2004. 
[Buhler 05] Buhler, P. A. and Vidal, J. M.,“Towards Adaptive Workflow Enactment 
Using Multiagent Systems”, Information Technology and Management Journal, Vol.6, 
No.1, 2003, p61-p87. 
[Chang 06] Chang, H.K.C., “The Design and Analyses Customer Relationship 
Management Using ARIS Technique”, International Journal of Management and 
Enterprise Development, Vol.3, No.1/2, 2006, p1-p28. 
[Cheng 99] Cheng-Leung, A., Pheng, K. L., and Leng, G. R. K., “IDEF: a 
comprehensive modeling methodology for the development of manufacturing 
enterprise systems,” International Journal of Production Research, Volume 37, No.17, 
1999.p3839-p3858. 
[Choi 02] Choi, I., Park, C. and Lee, C., “A Transactional Workflow Model for 
Engineering/manufacturing Processes”, International Journal of Computer Integrated 
Manufacturing, Vol. 15, No.2, 2002, p178-p192. 
[Coves 98] Coves, C. , Crestani, D. & Prunet, F., “Design and Analysis of Workflow 
Processes with Petri Net”, Proceeding of IEEE International Conference on  Systems, 
Man, and Cybernetics, Vol.1, 1998, p101-p106.  
[Cuntz 05] Cuntz, N. and Kindler, E. ”On the Semantic of EPCs: Efficient 
Calculation and Simulation,” Business Process Management, Proceeding of 3rd 
International Conference BPM 2005, Nancy, France, 2005, p398-p403.  
[Doniavi 00] Doniavi, A., Mileham, A. R., and Newnes, L. B., “A systems approach 
to photolithography process optimization in an electronics manufacturing 
environment,” International Journal of Production Research, Volume 38, No.11, 2000. 
p2515-p2528. 
[Dorador 00] Dorador, J.M., Young, R.I.M., “Application of IDEF0, IDEF3 and 
UML methodologies in the creation of information models”, International Journal of 
Computer Integrated Manufacturing, Vol.13, No.5, 2000, p430-p445.  
[IP 00] IP, W.H., Kwong, C.K., Fung, R., “Design of Maintenance System in MRPII”, 
Journal of Quality in Maintenance Engineering, Vol.6, No.3, 2000, p177-p191. 
[Kim 03] Kim, C. H., Weston, R. H., Hodgson, A., and Lee, K. H., “The 
complementary use of IDEF and UML modeling approaches,” Computers in Industry, 
 17
 
 
 
Fig-1 Relations between hierarchical model and process model 
 19
 
 
Structure
errors
Verify 
structure 
behavior
Transform
structure
*Improper nesting
*Corresponding control
element mismatched
Structured 
workflow
Transform 
structure
Correct the type of 
corresponding pair
*Improper nesting?
*Deadlock?
*Multiple Instances
Correct the type of 
corresponding pair
Correct the type of 
corresponding pair
Improper nesting&
 Multiple instances
Improper nesting & 
Deadlock
Deadlock/
Multiple instances
 
 
Fig-3 Improper structure modification
 21
 
 
Corresponding control 
elements 
Correction 
Split node Join node Change join node type 
AND OR AND 
AND XOR AND 
 
 
 
Fig-6 Approach to correct a multiple instances condition
 23
 
 
Fig-8 An example ECP model 
 
 25
 
Fig-10 Empirical EPC model and part of its EPML model 
 27
Event 8 Event 9
Event 10 Event 11
Function 5 Function 6
Function 7 Function 8
Event 12
Function 9
Event 13 Event 14 Event 15
Event 16 Event 17
Function 10
Function 11 Function 12
Function 13 Function 14
Event 18
Function 15
Event 8 Event 9
Event 10 Event 11
Function 5 Function 6
Function 7 Function 8
Event 12
Function 9
Event 13 Event 14 Event 15
Event 16 Event 17
Function 10
Function 11 Function 12
Function 13 Function 14
Event 18
Function 15
 
(1) 
Event 13 Event 14 Event 15
Function 10
Function 11 Function 12
Event 18
Function 15
Event 13 Event 14 Event 15
Function 10
Function 11 Function 12
Event 18
Function 15
 
(2) 
Event 1
Function 1
Event 2
Function 2
Event 3
Event 4 Event 5
Event 6 Event 7
Function 3
Function 4
Event 1
Function 1
Event 2
Function 2
Event 3
Event 4
Event 5
Event 6
Event 7
Function 3
Function 4
 
(3) 
Fig-12 The improper structure of the empirical models and their modifications 
 29
 
(1) 
 
 
(2) 
 
Fig-14 (1) the empirical EPC model and (2) its corresponding control points 
出席國際學術會議心得報告 
                                                             
計畫編號 96-2221-E-011-024- 
計畫名稱 商業流程階層化方法之研究 
出國人員姓名 
服務機關及職稱 歐陽超，台科大工管系 
會議時間地點 
May 21 – 25, 
Honolulu, Hawaii, USA 
會議名稱 The 2008 Hawaii International Conference on Business 
發表論文題目 Transfer a Business Process Model into a Hierarchical Function Model 
 
一、參加會議經過 
The 2008 Hawaii International Conference on Business was held May 21 – 25, at the 
Waikiki Beach Marriott Resort & Spa in Honolulu, Hawaii. About 400 participants 
representing more than 40 countries have attended this conference. I was assigned as the 
session chair in the “Management Information Systems” session in May 24. Three papers 
were presented in that session. The detailed information about that session was as 
follows: 
Saturday 
Time: 9:40 - 11:10 AM 5/24/2008 Room: Milo IV 
Session Topic: Management Information Systems 
Session Chair: Ou-Yang, Chao 
Transfer a Business Process Model into a Hierarchical Function Model 
Ou-Yang, Chao –— National Taiwan University of Science and Technology 
Wang, S.H. –— National Taiwan University of Science and Technology 
Applying Universal Design for Learning in a Graduate MIS Course 
Beckman, Paul –— San Francisco State University 
In addition, a paper entitled “Transfer a Business Process Model into a Hierarchical 
Function Model” from this year NSC project was presented in that conference. About 15 
people have attended the presentation and several questioned have asked and discussed 
after the presentation. 
 
二、與會心得 
Hawaii International Conference on Business is a conference contains variety of 
papers from different fields in business. The depth of the presented papers is diverse. One 
can find very good case paper such as a paper talked about the supply chain of new 
 2
 
Transfer a Business Process Model  
into a Hierarchical Function Model 
 
 
C. Ou-Yang 
S.H. Wang 
Department of Industrial Management 
National Taiwan University of Science and Technology 
43, Sec. 4, Keelung Rd. 
Taipei, Taiwan, 106 
 
 
 
Abstract 
With the increasing complexity of business process, to offer an effective and 
efficient process modeling tool is an important issue. Currently, a process model was 
usually included a lengthy process contained many process components and hence 
might be difficult to study by the users as well as the managers.  
Another concept, functional approach, was also widely used by business 
modelers. Many tools applied the hierarchical concept to build a functional model. 
That is, a macro model was developed in the top level, then, the detailed models were 
built in the lower level to form a tree style. In other words, in the hierarchical 
approach, the more detailed model can be found in the lower level and the more 
abstract model can be specified in the higher level. 
In this paper, an approach transferred an Event Process Chain (EPC) based 
process model into the respective hierarchical functional model was proposed. The 
proposed approach would identify the structure errors in a process model and then 
modified it to a structured process model. Then a blocking approach would be used to 
group sets of process elements into several sub-function units and to form a 
hierarchical model. 
 
Key Words: Hierarchical Model, Process Model, Event Process Chain (EPC) 
 4
addressed by many researchers. For instance, a well structured EPC model has been 
defined such that certain structure error such as deadlock and multiply instance would 
not take place [Wiley 97]. In addition, a few researchers have studied the properties of 
structured model in terms of analyzing the corresponding relationships of the control 
elements in an EPC model [Aalst 99][Liu 05]. Another approach, graph reduction, 
was addressed on removing the correct structure from an EPC model step by step 
based on certain developed rules. The left portion of the model was the place where 
improper structure might take place [Lin 02]. Finally, an approach which can transfer 
an EPC model into its corresponding PN model has been developed [Verbeek 01]. 
Based on this work, certain PN behavior properties such as liveness or boundness can 
be used to analyze an EPC model.  
As just mentioned, certain modeling approachs such as IDEF0 have embedded the 
hierarchical modeling concepts such that the reader can view the model from the top 
level abstract view to the lower level detailed view. However, other process modeling 
tools such as EPC do not have this perception. It would be very straightforward to 
construct a lengthy and complex model and hence cause the readers difficult to study 
the model. Therefore, this work would tend to develop an approach to transfer an EPC 
process model into a hierarchical model, and to support the feasibility of viewing the 
process model. 
 
3. The Proposed Approach 
Fig-2 shows the three-level framework of the proposed approach. In the 
conceptual level, the process model structure will be analyzed such that certain 
improper structure behaviors would be modified. Then, the structured model would be 
grouped as several blocks and to form a tree structure and to build a hierarchical 
business model. 
In the design level, the business model would be constructed in terms of EPC 
(event process chain) diagram. Then the improper structure such as improper nesting, 
deadlock and multiple instances of an EPC model would be analyzed and corrected. 
Finally, the structured EPC model would be grouped as several main blocks and 
sub-blocks. The grouped EPC model would then be transformed into a hierarchy 
model. 
In the final level, the design-specification level, the EPC model would be 
constructed by using ARIS modeling tool. The XML file of the model would be 
generated. A Java based XSLT (XML Translation Template) template would be 
developed to translated the XML into EPML (EPC XML) file. The translated file 
would be the input of software EPC Tools. The unstructured model would be 
identified by the tool. In addition, the category of the improper structure also would 
 6
After examining the situations of improper structure and semantic errors, 
following combinations might take place: (1) the occurrence of improper structure 
and multiple instances; (2) the co-existence of improper structure and deadlock, and 
(3) the occurrence of deadlock and multiple instances. 
 For the first situation, it was required to modify the improper nesting structure 
into proper hierarchical structure and then to analyze the corresponding control 
elements to solve the multiple instance problem. 
As to the second situation, that was co-existence of improper structure and 
deadlock. In addition to solve the improper structure problem, it was also necessary to 
identify the improper corresponding control elements and to solve the deadlock 
problem.  
For the final situation, that was the occurrence of deadlock and multiple instances. 
Since both of these situations were due to the improper of corresponding control 
elements, analyze and modify of the corresponding elements would be necessary. 
 
3.2.2 Hierarchical Model Development 
Once a process model has been transferred to a structure model, the next task was 
to construct a hierarchical form for this model. There are two main tasks in this stage: 
to group the model into several blocks based on the corresponding control elements, 
and then to develop the tree structure for this model based on the grouped blocks.  
The first stage was to group the model constructs into several blocks as shown in 
Fig-3. An approach applied the concepts of finding corresponding control elements in 
a process model, and then to form a group of blocks has been developed. There were 
three conditions would be identified in this approach. The first condition discovered 
that each of the links connected to either a split node or joint node must be in one of 
the path from the split node to the joint node or vise versa. The second condition 
identified that for each path from the split node to the joint node, there exists a 
corresponding reversed path from the joint node to the split node. Finally, for each 
pair, all of the constructs in the path, including the control nodes, event nodes and 
function nodes would be grouped as a block 
 The final step in this stage was to build a hierarchical function model according 
to the information about the split/joint nodes and the grouped blocks. For instance, In 
Fig-4-1, the constructs between the control nodes 4 and 10 can be grouped as a block 
(block A). In addition, the constructs between control nodes 11 and 14 also can be 
group as another block (block B). Then, the constructs between the control nodes 3 
and 16 can be grouped as a higher level block (block C). Finally, the rest of constructs 
can be formed as a group. The resulted hierarchical model was shown in Fig-4-2. 
 
 8
shown in a table. For instance, for the empirical model shown in Fig-8-1, it could be 
found that there were two pairs of corresponding control points (Node-32, Node-34; 
and Node-62, Node-64). These two pairs could be found in the top and bottom rows 
in the output table of the module. There are six columns in this table. The first column 
indicated the ID of the split node (Fig-8-2). The second and third column showed the 
predecessors and successors of the split node. Also, the fourth row indicated the joint 
node and the fifth and sixth rows showed the predecessors and successors of the joint 
node. 
Once all of the corresponding control points have been identified, the next stage 
was to construct the hierarchical tree model. Another Java module, which take the 
table of control pairs as input and used the function block/function tree construction 
algorithm specified in section 3.2.2, was developed. Fig-9 showed the constructed 
hierarchical tree model about the empirical EPC model. As mentioned before, only the 
functional constructs would be specified in the tree model. It could be found that, 
instead of the root node in the level-1, there were four nodes in the level-2 of the tree 
(Node-32; 50; 5, and 42). Each node has its subsequent lower level nodes. For 
instance, for the root node 32 in the top of the EPC model, it has another lower level 
tree structure leaded by node 62 as the root. In, addition, there was another lower level 
node, Function 3, showed in the tree. It should be noticed that, although there were 
three split links for node 32, one of the branch only contained an event node and 
hence was not considered by the algorithm.  
 
5. Conclusion and Discussion 
 An approach to identify the functional hierarchy from an EPC model and then to 
construct a tree model was proposed in this work. This work can be used to support 
the feasibility of viewing a complex process model from its abstract level to the 
detailed stage. The major contributions of this paper are: 
1. A structural approach which modified an unstructured EPC model and then 
converted into a hierarchical tree model was developed. 
2. An approach to find the pairs of corresponding control elements from an EPC 
model has been defined and developed. 
3. An approach to construct a hierarchical tree model from an EPC model according 
its corresponding control elements have been defined and developed. 
 
 10
 
C
on
ce
pt
ua
l 
St
ag
e
Analyze process model structure Building process model hierarchy
Draw EPC 
by ARIS
Detect errors of 
EPC structure
Function tree model 
of  business process
 Block EPC 
Hierarchical
Correct EPC 
structure
Draw 
EPC 
by ARIS
XML 
File
Transformation 
by XSLT plate 
EPC 
Tools
(Java)
EPML
File
Correct 
EPC 
structure
Execute 
algorithms
(Java)
Function tree 
model of  
business process
Structure 
errors report
Structured 
EPC
Blocked 
EPC
Input Process Output
D
es
ig
n 
St
ag
e
Im
pl
em
en
ta
tio
n 
 
St
ag
e
 
Fig-1 Proposed framework 
 12
 
 
(1) 
 
 
 
 
(2) 
 
Fig-4 (1) The sequence of building a hierarchical model, (2) The hierarchical 
model 
 
 14
 
 
 
Fig-6 Improper structure in the empirical model 
 16
 
(1) 
 
 
(2) 
 
Fig-8 (1) the empirical EPC model and (2) its corresponding control points 
