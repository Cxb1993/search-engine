中文摘要 
隨著日益複雜的晶片系統設計，電子系統層級的開發漸漸成為設計流程中主要且必要的一環。
大多數的電子系統層級設計使用高階的 C/C++語言像是 SystemC 較抽象的模擬驗證開發中的硬體設
計，並且利用此階段之高階模擬設計作為其軟體設計之使用平台，許多市面上的產品也對此軟硬體
同時開發的方式提供相關的支援。 
但在將硬體設計轉往暫存器轉移層級繼續晶片系統開發的過程中，由於高階語言有其模擬上的
限制，兩個層級間仍然存在著一些差距，像是硬體有同時執行的特性以及語法的不同等。因此，此
計畫提出 VeriC，一個類硬體描述語言以及完整的開發流程及工具，試著以 C++來達到與硬體描述
語言 Verilog 接近的語法及以時脈信號為基礎的模擬。因著高階語言的基礎，可輕易的與指令層級
或是 SystemC 的設計結合，以支援軟硬體同時開發加速設計流程；此外，配合轉譯工具可將 VeriC
設計轉成 Verilog 設計，縮短了暫存器轉移層級開發所需要的時間，發揮承先啟後的效果。 
 
Abstract 
Electronic System Level (ESL) is regarded as a necessary solution to deal with the ever 
increasingly complex System-on-Chip (SoC) design. Most ESL designs are modeling at the C 
high-level language (no matter functional C or SystemC). Although some commercial products are 
partially available, the lack of directly translating C or SystemC into RTL becomes a main 
obstacle to a seamless ESL flow from high level abstraction through RTL and all the way to the 
final chip design. We propose an efficient semi-hardware description language called VeriC 
(Verilog and C) to bridge ESL and RTL. Like SystemC, VeriC is based on C++ and not only 
describes the design by the syntax very close to Verilog, but also it can model the target design at 
both pin and cycle accuracy with an implicit clock mechanism, a modeling way closer to Verilog. 
Those VeriC modules can be directly translatable to RTL and also can be interoperable with other 
modules in C/SystemC/Verilog languages by hybrid simulation. Our objective is not to replace 
SystemC, but to move the RTL model up to a higher level such that detailed cycle-accurate 
implementation can be present even in C-level simulation, a supplemental and more efficient 
approach for bridging the gap between ESL design and RTL models. Experimental  results show 
that the VeriC simulation speed can be 2-10X faster than SystemC, because of the improvement in 
the simulation kernel (by taking advantages of input/output connections and a simpler cycle 
mechanism). It can also reach 10X-250X simulation speedup than Verilog in simulating the same 
behavior. 
 
describes the target design by a syntax style very 
close to Verilog, but also it can model the design at 
both pin and cycle accuracy with an implicit clock 
mechanism, a modelling way closer to Verilog. 
Those VeriC modules can be directly translatable to 
RTL and also can be interoperable with other 
modules in C/SystemC/Verilog languages by hybrid 
simulation. Our objective is not to replace SystemC, 
but instead to provide a supplemental and more 
efficient approach with a smoother and seamless 
design flow for bridging the gap between ESL 
design and RTL models. In addition, we provide 
additional module constructs for better modelling 
hardware modules, such as macro and bundle. The 
comparison is shown in TABLE I. Since the syntax 
of VeriC is very close to Verilog, the synthesized 
results by the Verilog translator can be expected to 
be as efficient as the hand-coded RTL. 
We discuss the implementation of VeriC in the 
next section, presenting the syntax with example 
code segments and the VeriC translator, and 
co-simulate VeriC and Verilog. The experiment 
results are shown in section III. Finally, section V 
concludes the paper. 
 
II. The Fast ESL Design Flow 
Contracting the gap between the ESL and the 
RTL is the main objective of this work. Thus, a fast 
ESL design flow is provided as a bridge to cross the 
gap, and it includes a semi-HDL language (VeriC), 
a VeriC-to-Verilog translator, and an efficient 
co-simulation mechanism as shown in Fig.1. 
VeriC’s syntax is similar with Verilog; a similar 
syntax helps Verilog coder easier to connect to 
VeriC. Basically, the VeriC simulation engine is 
written by the C++ language, VeriC adequately 
using the C++ overloading property to model those 
hardware components. Therefore, VeriC is also 
C/C++ compatible, and the execution intermixes 
with Verilog similar syntaxes and C/C++ syntaxes. 
System designers can easily perform the expected 
hardware behaviours by embedding C/C++ 
behaviour functions (from the ISS level) into the 
relevant VeriC modules, which shortens the design 
time from the ESL to the RTL design with 
cycle-/pin-accuracy. Thus, VeriC supports the 
feature of wrapping internally functional behaviour 
by pin-accurate module interface.  
Fig. 1. The proposed fast ESL design flow and 
features of VeriC. 
Due to support Verilog similar syntax, if follows 
some coding rules when coding VeriC can be easily 
to translate to Verilog. VeriC-to-Verilog translator 
according to the code with coding discipline 
translates VeriC code into target Verilog with 
syntax of current/next statements which will be 
illustrated in subsection B. In the proposed design 
model, those translated Verilog modules could be 
verified by VeriC/Verilog co-simulation. 
 
A. “VERIC”- Semi-Hardware Description 
Language 
There are several design policies in the VeriC 
semi-HDL description language. (1) Verilog 
compatible syntaxes are supported by C++ 
overloading for translating into Verilog, and the 
VeriC simulation engine is written in the C++ 
language, too. Thus, it is C/C++ compatible, and it 
is easy to integrate into the others C/C++ behavior 
functions even integrate into SystemC modules. (2) 
The clock signal is implicit without programmers’ 
specifying the clock signal. Therefore, updating of 
the scheduler and the register in the delta cycle is 
easy to deal with, and the performance can be 
boosted. Moreover, it is easier to write VeriC code 
than Verilog code by hiding the clock signal 
because VeriC allows a sequential/combinational 
intermixing coding style, as shown in Fig. 4. (3) We 
support a bundle concept, where several port 
signals are grouped as a bundle. For example, for 
any input port including address and data, a port 
bundle can be declared and then wiring multiple 
ports between modules can be significantly 
simplified as only connecting port bundles, instead 
of connecting many wires of data and address 
signals. (4) Three VeriC scheduler strategies are 
supported. Overall, the VeriC semi-HDL 
description language not only provides good 
simulation performance but is also easy to write and 
rapidly verified.  
 
 Fig. 3. Block diagram of VeriC simulation engine. 
 
When the run queue is empty after the above 
mentioned iterative execution, no module will be 
triggered, and all signals will be stable in this delta 
cycle. The evaluation of this cycle is then finished, 
and the simulation engine will update the states and 
prepare the next evaluation cycle. The implicit of 
the clock signal implies that the VeriC scheduler 
only needs to schedule the execution of modules in 
a single source clock signal without a negative-edge 
trigger. 
The candidate list shown in Fig.3 is initialized by 
different scheduler strategies for every delta cycle, 
and it will cause a critical performance issue to 
influence the numbers of modules to be executed. 
The event-trigger mechanism is the basic 
scheduling policy to avoid redundant execution 
(including unnecessary execution or unnecessary 
re-execution of the same module in the delta cycle), 
and triggered events include input changes and 
updates of internal registers. 
The evaluation phase includes implicit 
cycle-based simulation state, decision of 
dirty/non-dirty state, and execution and events 
triggers state. In order to avoid unnecessary 
re-execution of a module during each evaluation 
stage, this work provides three strategies for the 
candidate list. In order to illustrate VeriC’s 
scheduler, the modules drive others modules, called 
the effector and effectee is the module that be 
driven. We then define three impact factors: the 
“output effect”, “input effect”, and “wire effect”. A 
higher effect factor means that the effector 
influences more effectees. Therefore, a higher 
output effect factor means that more effectees will 
be driven, and a higher “input effect” means that 
more effectors may trigger this effectee. 
Additionally, a higher “wire effect” factor means 
that the module may easily be influenced by other 
modules. 
 The first strategy chooses and evaluates the 
highest difference by subtracting the input effect 
factor from the output effect factor. This is 
because a positive difference means the output 
effect factor is larger then the input factor. In other 
words, this effector may drive effectees more 
frequently than it is driven by other effectors. 
 The second strategy chooses the lowest wire 
effect factor. 
 The third strategy first chooses the highest 
input effect factor; if it has more than one input 
effect factor, then it chooses the highest output 
effect factor. 
Our experiments will show the three strategies’ 
simulation speeds and compare them with SystemC. 
Moreover, this work also shows the approximation 
ratio of the three strategies compared to the optimal 
scheduling result. 
For filter out most of the unnecessary executions, 
we illustrate a distinguishing dirty/non-dirty 
mechanism in the evaluation stage. At the start of a 
cycle evaluation, modules with internal register 
changes or input changes of modules are influenced 
by the other modules with register changes. In 
either of these two conditions, those modules will 
be marked as dirty, and the others will be marked as 
non-dirty. The dirty modules will be added to the 
run queue for current delta cycle execution. This 
policy efficiently reduces large numbers of module 
executions when most modules are idle. Our 
experiments show simulation speed comparisons 
with and without the dirty/non-dirty mechanism. 
A.3 User Debugging Interface 
In the perspective of hardware debugging, 
showing changes of signals in each cycle is the 
most essential debugging information for 
developers. However, in some debuggers, such as 
the gdb (GNU debugger), it is inconvenient to show 
this essential information in each cycle/event. Not 
only is it difficult to ensure whether the toggled 
signals are stable or not in a particular cycle/event, 
but also the considerable unnecessary information 
confuses users. Therefore, this work not only 
supports waveform output in most of the EDA tools, 
but provides an interactive user debugging interface 
that can solve the problem caused by source level 
debugging, and introduces a cycle/event level 
debugging. This interface helps the user to examine 
 Fig. 5. The flow of module-based co-simulation in 
delta cycle. 
 
Synchronization between the VeriC and Verilog 
simulation engines is another critical problem. The 
two schedulers may trigger co-simulation events in 
parallel, and this phenomenon will make the 
synchronization harder to deal with. By simplifying 
the problem, only one main synchronizer (scheduler) 
may be a good choice, and we take the VeriC 
scheduler as the main synchronizer. As shown in 
Fig.5, VeriC simulator can be viewed as a host, and 
Verilog simulator can be viewed as a client in the 
proposed co-simulation policy. The VeriC wrapper 
(wrapper of Module C) is used instead of the 
translated module (Module C), and the wrapper is 
responsible for sending and receiving data to and 
from the Verilog simulator. Several co-simulation 
APIs, following the VPI (Verilog Procedural 
Interface) standard, are built up for Verilog 
simulation to communicate with the VeriC 
simulation by IPC. In the example shown in Fig.4, 
several modules are executed by different output 
triggers, and the translated module (Verilog) 
executes using the wrapper and co-simulation APIs. 
At the begin of this delta cycle, the VeriC scheduler 
will send a start signal to the Verilog simulator for 
this delta cycle synchronization, and then the 
Verilog simulator will block for waiting 
co-simulation events. After module A executes, its 
outputs trigger Module C.  
In fact, the wrapper of Module C is triggered, 
triggering Module C in Verilog. Then the VeriC 
simulator will await the execution results. Module 
C in Verilog will be triggered for new inputs by 
IPC communication and the co-simulation APIs. By 
executing Module C, the outputs will be returned 
back to Module C’s wrapper, and then the VeriC 
scheduler will add the module that is triggered by 
Module C’s outputs to the run queue if the module 
was not originally on the run queue. In the example, 
Module C triggers Module B, and then Module B’s 
outputs will trigger Module C again. Thus, the 
co-simulation flow will be done again in the same 
delta cycle. When the run queue is empty (it means 
all output signals are stable), the VeriC scheduler 
will send an end signal to the Verilog simulator to 
finish this delta cycle. Overall, this shows the basic 
concept of the proposed module-based 
VeriC/Verilog co-simulation. Moreover, this work 
also proposes to automatically generate the wrapper 
and testbench with co-simulation APIs for the 
VeriC/Verilog co-simulation. 
 
III. Experiments 
In order to demonstrate VeriC’s proposed 
scheduling methods, we have implemented several 
hardware models write by VeriC and then translated 
those models into Verilog. Although the modeling 
capability to bridge ESL and RTL is the essential of 
VeriC, according section II can view the benefits of 
VeriC. We still employ several design models as a 
show cases and compare the simulation speeds of 
VeriC, SystemC, and Verilog. As shown in TABLE 
III, first case is a 4-pipeline stage arithmetic 
function unit which is modeled in a smaller case 
(~5 modules), and it performs simulation speeds of 
586 KCPS (KCPS, kilo- simulation cycle per 
second) in SystemC, about 1450 KCPS in VeriC, 
and 5.4 KCPS in Verilog. It shows about 250~270X 
faster compared to Verilog and 2~3X faster 
compared to SystemC.  
In the third case, we use cache-based data-race 
detection IP (~10 modules) for simulation, but it 
was only compared with VeriC. This case shows 
greater performance improvements over the 
dirty/non-dirty mechanism (about ~24%) because 
cache-miss may happen and cause most modules to 
enter the idle state. It also has larger differences 
(5.6~7.8%) among the proposed scheduling 
strategies; strategy I (output effect - input effect) 
benefits this case’s simulation, with some effectors 
driving effectees more frequently than they are 
driven by others effectors.  
Moreover, two larger cases, 7- and 12-pipeline 
stages processors, were considered. The 7-stage 
pipeline stages processor only has a functional ISS 
(instruction set simulator) and a synthesizable 
Verilog model, but it shows a large speed gap 
between their simulations (3549 KCPS vs. 1.6 
KCPS in a JPEG codecs application). It is nearly 
impossible to run these large patterns in a 
high-level simulation model for verification. 
Another larger case, the 12-pipeline stages 
processor (~20 modules), was developed by the 
Thus, we take another policy that just one 
Verilog module can be co-simulated with 
VeriC modules at a time to keep the 
performance. As shown in Fig.7, eight Verilog 
modules are individually co-simulated with 
VeriC modules, and the experiment 
environment is the same as Fig.6. Besides, it 
also dynamically checks that a Verilog 
module behaves completely the same as its 
corresponding VeriC module in every cycle. 
Due to co-simulation frequency and data 
communication size, it shows the 
co-simulation speed is among 5~25 KCPS 
(average 12.1 KCPS, and save 70.4% 
co-simulation time compared to Fig.6), hence 
it’s a feasible solution from VeriC to Verilog 
by HDL translation and co-simulation. 
Therefore, translated Verilog code can be 
synthesized for analyzing critical paths, and 
we can return back to modify VeriC to gain 
more performance for efficient co-design in 
fast turnaround time. 
The final experiment examines how 
efficiency of VeriC scheduler in TABLE V, 
and we try to find the distances between our 
proposed scheduling strategies and the 
optimal scheduling (approximation ratio 
→Real/Optimal). Therefore, there are several 
cases examined. In the case study of 
4-pipeline stage arithmetic function unit, our 
proposed scheduling strategies perform 
excellently near or equal to 1-approximation 
because of its regular data flow. In another 
case study (Cache-based data-race detection 
IP), it shows bad approximation without the 
dirty/non-dirty mechanism, because it has the 
property of low modules execution rate in 
delta cycle. Fortunately, three proposed 
scheduling strategies performs well by adding 
the dirty/non-dirty mechanism. The most 
complex case study, 12-pipeline stages 
processor with Dhrystone benchmark, is 
examined as 1.867, 1.197, 1.261, and 1.217 
approximation ratio. Scheduling strategy I 
performs best in the complex case study, but 
there are still many redundant re-executions. It 
may have some improvement space by a 
light-weight dynamically scheduling, and we 
list it as our future work. 
V. Summary and Conclusions 
In this paper, we present a new semi-hardware 
language, VeriC, for translating ESL to RTL 
by using C++. It has a syntax is similar to 
Verilog but has a higher abstract level and a 
faster simulation speed. VeriC also has a  
TABLE V 
 Approximation vs. Optimal Scheduling 
Ratio of 
(Approx / 
 Optimal ) 
Without 
dirty/   
non-dirty 
mechanism 
VeriC 
Scheduling 
Strategy I. 
VeriC 
Scheduling 
Strategy II. 
VeriC 
Scheduling 
Strategy 
III. 
4-pipeline 
stages FU 1.000005 1.000 1.000 1.000 
FFT IP 1.846 1.054 1.114 1.054 
Data-race 
detection IP 3.362 1.068 1.045 1.045 
12-pipeline 
stages MCU 1.867 1.197 1.261 1.217 
 
Verilog translator to translate the VeriC code 
into Verilog code, and a co-simulation 
mechanism can help to verify Verilog code. 
This work does not try to replace any existing 
tools or to replace Verilog or SystemC but 
rather gives an alternative approach from ESL 
to RTL in order to give a smoother and more 
seamless design flow from ESL to RTL to 
obtain a fast and robust design. 
 
References 
[1] B. Bailey, G. Martin, and A. Piziali. ESL Design and 
Verification: A Prescription for Electronic System 
Level Methodology. Morgan Kaufmann, 2007. 
[2] F. Bellard. QEMU, a Fast and Portable Dynamic 
Translator. Proceedings of the USENIX Annual 
Technical Conference, FREENIX Track, pages 
41–46, 2005. 
[3] R. Camposano. Behavioral synthesis. Annual ACM 
IEEE Design Automation Conference: Proceedings 
of the 33 rd annual conference on Design 
automation, 3(07):33–34, 1996. 
[4] L. Formaggio, F. Fummi, and G. Pravadelli. A 
timing-accurate HW/SW co-simulation of an ISS 
with SystemC. Proceedings of the 2nd 
IEEE/ACM/IFIP international conference on 
Hardware/software codesign and system synthesis, 
pages 152–157, 2004. 
[5] T. Grotker. System Design with SystemC. Kluwer 
Academic Publishers Norwell, MA, USA, 2002. 
[6] M. Haldar, G. Singh, S. Prabhakar, B. Dwivedi,  
and A. Ghosh. Construction of Concrete 
Verification Models from C++. In DAC, pages 
942–947. ACM, 2008. 
[7] A. Inc and C. Irvine. Addressing the Challenges of 
Synchronization/Communication and Debugging 
可供推廣之研發成果資料表 
■ 可申請專利  □ 可技術移轉                                      日期：98 年 10 月 28 日 
國科會補助計畫 
計畫名稱：異質多重核心晶片系統軟硬體設計:以 SOHO 網路應用 
為例 
計畫主持人：國立中正大學 資訊工程系 陳添福教授        
計畫編號：NSC 95-2221-E-194-019-MY3             
學門領域：資訊學門 
技術/創作名稱 針對軟硬體整合設計，為縮減電子系統層級至暫存器轉移層級的開發差距所提出之快速模擬類硬體描述語言 
發明人/創作人 陳添福、周書玄、文啟能、劉妍伶 
中文： 
VeriC，一個類硬體描述語言以及完整的開發流程及工具，用
以銜接抽象設計開發至暫存器轉移層級開發在設計上的落差，以
C++來達到與硬體描述語言 Verilog 接近的語法及以時脈信號為基
礎的模擬。因著高階語言的基礎，擁有較高速的模擬速度，加速所
需開發時間；並且可輕易的與其他指令層級或是 SystemC 等
C-based 的軟體層設計做一系列之整合開發；此外，配合轉譯工具
可將 VeriC 設計轉成 Verilog 設計，減少重新設計硬體所耗費的時
間，發揮承先啟後的效果。 技術說明 
英文： 
VeriC is based on C++ and not only describes the design by the syntax 
very close to Verilog, but also it can model the target design at both pin 
and cycle accuracy with an implicit clock mechanism, a modeling way 
closer to Verilog. Those VeriC modules can be directly translatable to 
RTL and also can be interoperable with other modules in 
C/SystemC/Verilog languages by hybrid simulation. Our objective is to 
move the RTL model up to a higher level such that detailed 
cycle-accurate implementation can be present even in C-level 
simulation, a supplemental and more efficient approach for bridging 
the gap between ESL design and RTL models. 
可利用之產業 
及 
可開發之產品 
晶片設計之軟硬體整合開發 
技術特點 
應用於 ESL 整合開發流程，利用高階語言快速的模擬以及類硬體描
述方式來縮短抽象階層的設計與驗證時間，利用提出的開發流程來
縮短設計由抽象階層轉至低階暫存器轉移層級的開發時間。 
附件二 
