Table 1:  VR levels and applications 
Animation 
Types 
Object  
Motion 
Interaction 
Triggers 
Interactive 
Level 
Types of  
Application 
3D surround w/ 
fixed camera path No motions 
• Key strokes 
• Mouse clicks • All purpose display 
3D surround w/ 
pre-defined viewpoints 
• E-learning 
• Entry-level video game 
3D surround w/ 
variable camera paths 
No or limited 
routine motions 
• Key strokes 
• Mouse clicks 
• Mouse or joystick navigations
Low 
• Virtual touring 
Pre-programmed activity Limited routine motions 
• Immersive video game 
• Interactive presentation
Programmable activity Selective routine motions 
• Key strokes 
• Mouse or joystick navigations
• Other types of input signals 
Medium • Operational simulation 
• Professional training 
Analytical activity Synthetic routine motions 
• Engineering design 
• Virtual military drill 
Emulated natural 
behavior 
Synthetic 
variable motions 
• Key strokes 
• Mouse or joystick navigation
• Other types of input signals 
• Parameter values 
High • Engineering experiment
•Virtual medical operation
 
 
Figure 1: The hierarchy of scenario entities 
 
2 METHODOLOGY 
The proposed method is prepared in three levels, a 
concept phase, an information analysis phase, and an 
implementation phase and are described as follows. 
2.1 Concept phase 
The concept phase describes how the virtual environment 
builder may conceive the scenario or prepare ideas about 
the desired theme. In this section, the major portions in a 
virtual environment are identified. 
A virtual environment is basically an interactive story-telling 
device with parametric subject contents that are logically 
related, and the presentation of a virtual theme is 
considered as the theme scenario. A scenario usually has 
a topic to which the subjects support. Most builders have 
specific ideas for a theme topic but may not be able to 
construct the subject contents in detail, not to mention the 
making of an integral virtual environment. 
Although a virtual theme is an imaginary reflection of the 
physical reality, the subjects within a virtual environment 
may not cover every intrinsic quality of the real 
environment, and only limited or the most desired qualities 
are presented. The selection of the virtual qualities is 
objective and is subjected to the available VR techniques 
and the average perception of the persons who operate the 
virtual environment. However, the selection of the virtual 
subjects is subjective. It has strong relation to the 
storytelling and can be decided by the virtual environment 
builder. This paper will not elaborate on the story-telling 
portion, but focus on the conversion procedures to a virtual 
environment. 
Therefore, before the making of a virtual environment, the 
environment builder or designer needs to have a 
preliminary comprehension on the operations of the virtual 
events and an imagination of the approximate scene 
appearance. From the structural point of view, there are 
four types of theme elements in a virtual environment:  
1. the 3D computer models;  
2. the I/O interface;  
3. the activity scripts; 
4. the database; 
The process of creating the virtual environment is the 
process of creating the elements plus the process of 
editing their relations. 
2.2 Information analysis phase 
The information analysis phase is the stage where theme 
or scenario concepts are translated into hierarchical data 
that contain the essence of the virtual environment. In this 
section, design intentions are analyzed and systematically 
extracted with an automatic mechanism. 
A designer’s intention can be systematically analyzed by 
traversing the scenario hierarchy of Figure 1 with a top-
down breadth-first fashion. The mechanism that handles 
the analysis process is a finite state automaton, which 
ensures the essences of the design intentions have been 
collected along the analysis process. Figure 2 illustrates 
the automaton for scenario analysis in the form of Petri net. 
The solid arcs guide the forward paths of analysis, while 
the dotted arcs form the verification procedures. Every 
forward transition in the automaton will trigger a query 
routine for the designer to enter desired items if applicable, 
while the verification transitions check only the rationality. 
The definition and entry items of each transition are listed 
in Table 2. The inputs of the queries will become the 
classes/objects, relations, functions, parameters, or initial 
values in the later object-oriented design process. 
 
 
Figure 2: The automaton for scenario decomposition 
Table 3: The virtual entities and their attributes 
Virtual Entities Function Descriptions Attributes 
Person Provide human being characters • Identity / Type • Parameters • Parametric animations
Creature Provide other living beings • Identity / Type • Parameters • Parametric animations
Mobile Provide moving objects • Identity / Type • Parameters • Parametric motions 
Particles Provide fine flying bits • Identity / Type • Parameters • Emitter 
Objects Provide stationary objects • Identity / Type • Parameters  
Lights Provide sources of illumination • Identity / Type • Parameters • Path 
Cameras Provide image recorders • Identity / Type • Parameters • Path 
Ground Provide gravitation boundary • Identity / Type • Parameters  
Background Provide far scenery • Identity / Type • Parameters  
Obstacles Provide force bouncing • Identity / Type • Parameters  
Hierarchy Provide hierarchical relation for objects • Identity / Type • Hierarchy tree 
References Provide relative coordinate • Identity / Type • Parameters 
Run motions Activate motion scripts • Script ID • Parameters 
Adjust attributes Operate value change • Attribute ID • New Value 
Play sound Activate sound scripts • Sound clip ID • Parameters 
I/O Message Read/Write strings • I/O addresses • Messages 
Process data Activate calculation scripts • Process type • Variables w/ values 
Patterns  Provide stored script fragments • Pattern ID • Parameters 
Grammar Provide script editing rules • Grammar ID • Logic value set 
 
A pack of functions may be saved as a basic unit, called 
pattern, for repeated uses. Patterns can also be 
constructed as hierarchical patterns for complex actions. 
The actions within an activity can be formalized as 
workflows. The arrangement of actions inside a workflow 
can be sequencial, parallel, or the combination of both, 
depending on the requirements of the theme logics and the 
design fashion of the  builder. 
Two issues are important in editing the workflows: (1) the 
logical correspondence between the virtual and the reality 
and (2) the passing and receiving of parameters. 
Figure 3 illustrates two typical patterns of workflow logic. 
Figure 3(a) is an example of conflict motions where action 
flows are switched based on realtime conditions to avoid 
resource conflict, and Figure 3(b) is an example of mutual 
exclusion. Note that in Figure 3(a), parameter passing is 
also affixed with respect to the action I/O. Each activity 
must be formalized first in concept then in practice before a 
pragmatic script can be created.  
Figure 4 is an example of hierarchical workflows where 
actions of desired capability are encapsulated to adapt the 
pattern and to ensure the rationality and connectivity. This 
type of script editing method can be considered as 
scripting by grammar in which upper level scripting rules for 
types of legal activities are pre-defined and stored for 
retrievals. In this case, the designer only needs to focus on 
detail editing of the individual pattern element. 
Developing I/O interface and database 
A virtual environment must interact with a human being 
operator in some way. The interface for interaction is 
always through a computer I/O port. Besides the 
audio/video outputs, a virtual environment must possess 
standard interface for keyboard, mouse, joystick, and other 
popular computer I/O devices. For customized I/O devices, 
a dedicated interface design is inevitable. The actions of 
I/O are part of an activity and are also included in the 
scripts. The database is a vault for organized data and 
stored script patterns. It is defined for large amount of 
realtime retrievals and storages. The stored data can also 
be processed, in parallel with specific algorithms in 
background while running the theme, to support a more 
realistic output.  
 
 
Figure 3: Examples of logical action workflows 
 
 
Figure 4: Hierarchical workflows 
 
3 SYSTEM DEVELOPMENT 
In this section, the developed concepts are put together 
with an UML tool to generate system outcomes. 
Based on the development above, the course of creating a 
virtual environment can be systematically organized into a 
process that takes design intentions, and then converts to 
documentation that can be directly adopted as procedures 
or instructions for editing the virtual environments. 
Table 5 : Essential Features of the Example Scenario 
Event Activity Action description Actor Script Activity relation Parameter 
robot_home() initialize robot robots* script000 -- (0,0,0) void 
machine_home() initialize machine tool machines* script010 -- (0,1,0) void 
agv_home() initialize AGV AGVs script020 -- (0,2,0) void 
asrs_home() initialize AS/RS AS/RS* script030 -- (0,3,0) void 
initialize() 
camera_home initialize camera cameras script040 -- (0,4,0) void 
part_enter() transport_in() robot go to entry robot()* script004 (0,0,0) (0,0,0) part#, position 
robot_pick() grasp part robot()* script002 (0,0,0) (0,0,1) orientation 
robot_move() robot go to position robot()* script001 (0,0,1) (0,0,0) reference, positions, pathpart_load () 
robot_place release part robot()* script003 (0,0,1) (0,0,0) orientation 
robot_pick() grasp part robot()* script002 (0,0,0) (0,0,1) orientation 
robot_move() robot go to position robot()* script001 (0,0,1) (0,0,0) reference, positions, pathpart_unload () 
robot_place() release part robot()* script003 (0,0,1) (0,0,0) orientation 
part_exit() transport_out() robot go to exit robot()* script005 (0,0,1) (0,0,0) part#, position 
transport_store() AGV go to AS/RS AGV() script021 (0,2,0) (0,2,0) positions 
asrs_rotate() find slot AS/RS* script031 (0,3,0) (0,3,1) slot# part_store() 
part_in() place part in AS/RS* script032 (0,3,1) (0,3,0) void 
asrs_rotate() find slot AS/RS* script031 (0,3,0) (0,3,1) slot# 
part_out() take part out AS/RS* script033 (0,3,1) (0,3,0) void part_retrieve() 
transport_retrieve() AGV go to machine AGV() script022 (0,2,0) (0,2,0) positions 
load_program() load part program machine()* script011 (0,1,0) (0,1,1) program# process_part() 
process_start() start auto routine machine()* script012 (0,1,1) (0,1,0) void 
cam_flollw() camera follow part camera() script042 (0,4,0) (0,4,0) path, reference 
camera_watch() 
cam_look() camera look at part camera() script041 (0,4,0) (0,4,0) positions, reference 
     * indicates hierarchical objects 
 
 
Figure 3: Examples of script objects 
 
3. Scripts for complex logical motions can be created by 
connecting script patterns, or Behavioral Graphs in 
Virtools, thus an adequate pattern bank is important for 
an effortless editing process. 
The above-mentioned issues are the heart of the proposed 
method, and should be elaborated to make the intelligent 
editor advantageous. 
The method is suggested for themes having 20 or more 
virtual objects and having complex interactions and 
activities. In samller cases, intuitive procedures would be 
sufficient, but would be less efficient to go through the 
proposed mechanism. 
The analysis of CPU resource allocation will be considered 
in the future to enhance the realtime performance of an 
edited theme. It is estimated that with the development of 
the scheme, the modeling or prototyping efforts for building 
an interactive virtual environment will decrease dramatically. 
6 ACKNOWLEDGEMENT  
This research is funded by the National Science Council of 
Taiwan, project number NSC 95-2221-E-324-038. 
7 REFERENCES 
[1] Sa A., Zachmann G., Virtual Reality as a Tool for 
Verification on Assembly and Maintenance Processes, 
Computers & Graphics, 1999, 23, 389-403. 
[2] Mujber T., Szecsi T., Hashmi M., Virtual Reality 
Applications in Manufacturing Process Simulation, J. 
of Material Processing Technology, 2004, 155-156, 
1834-1838.  
[3] Ong S., Mannan M., Virtual Reality Simulations and 
Animations in a Web-based Interactive Manufacturing 
Engineering Module, Computers & Education, 2004, 
43, 361-382. 
[4] Dangelmaier W., Fischer M., Gausemeier J., Grafe M., 
Matysczok C., Mueck B., Virtual and Augmented 
Reality Support for Discrete Manufacturing System 
Simulation, Computers in Industry, 2005, 56, 371-383. 
