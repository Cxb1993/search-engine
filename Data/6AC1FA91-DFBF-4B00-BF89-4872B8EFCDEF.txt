 2
 
經驗知識誘導、探勘與分享技術研發(II) 
 
               計畫編號：NSC99-2221-E-327-036 
               執行期限：99 年 08 月 01 日至 100 年 07 月 31 日 
               主持人：陳育仁 國立高雄第一科技大學 會計資訊學系(所) 
               共同主持人：陳裕民 國立成功大學 製造資訊與系統研究所 
                           李昇暾 國立成功大學 工業與資訊管理系(所) 
                           陳宗義 南華大學 電子商務管理學系 
               計劃參與人員：鄭雅如、黃鳳玲 國立高雄第一科技大學 會計資訊學系(所) 
 
Abstract 
    A professional virtual community provides an interactive platform for enterprise experts to create 
and share their empirical knowledge cooperatively, and the platform contains a tremendous amount of 
hidden empirical knowledge that knowledge experts have preserved in the discussion process. 
Therefore, enterprise knowledge management highly prioritizes how to verify the empirical 
knowledge effectively before archiving it into enterprise knowledge repository for reuse.  
This work develops a novel scheme of ontology-based empirical knowledge verification for 
professional virtual community to assist domain experts in a professional virtual community to verify 
empirical knowledge logics, thus ensuring the quality of empirical knowledge and providing accurate 
knowledge decision support for knowledge workers. In particular, this work has the following 
objectives: propose an empirical knowledge verification model for a professional virtual community, 
design an ontology-based empirical knowledge verification process, develop techniques related to the 
ontology-based empirical knowledge verification, and implement an ontology-based empirical 
knowledge verification mechanism with an illustrative example of securities trading.  
    Results of this study facilitate efforts within the professional virtual community to verify 
empirical knowledge in order to provide knowledge workers with logic-correct empirical knowledge 
for decision support.  
 
Keywords: Professional virtual community, empirical knowledge, knowledge verification, ontology  
 
 
1. Introduction  
The knowledge economy era emphasizes creating knowledge and effectively spreading useful 
knowledge for broad enterprise applications, which has received considerable interest in research 
efforts to promote the enterprise value.  
The professional virtual community is a frequently adopted interactive mechanism for enterprises to 
create, share, and apply knowledge. The community provides an interactive space for individuals 
with the same knowledge expertise or professions. Therefore, personal professional knowledge, i.e. 
empirical knowledge, can be expressed freely in a professional virtual community to create and share 
tacit knowledge, thus achieving the goal of becoming an intelligent enterprise [6].  
 4
knowledge validation. Meanwhile, concept matching includes concept mapping, concept locating and 
relation renewing, and relation labeling as well. Moreover, the relation comparison includes the path 
finding, relation and path combination, and relation consistency checking. Validation of the empirical 
knowledge includes concept modification and relation modification.  
 
2. Empirical Knowledge Verification Model for the Professional Virtual Community 
    This section first introduces the empirical knowledge management framework for a professional 
virtual community. Difference analysis for empirical knowledge is subsequently performed according 
to the professional empirical knowledge in a professional virtual community. Finally, the empirical 
knowledge verification model for a professional virtual community is designed based on the difference 
analysis results.  
 
2.1 Design on Empirical Knowledge Management Framework  
Knowledge experts in a professional virtual community capture required information and 
knowledge of each other through dialogue to accumulate empirical knowledge. Such dialogue contents 
thus become important sources for accumulating empirical knowledge.  
    To effectively manage experts’ unorganized but already expressed knowledge contents through a 
systematic method in order to manage tacit knowledge, this section introduces the empirical 
knowledge management framework for a professional virtual community, as shown in Fig. 1. 
Effectiveness of the proposed framework is illustrated by a knowledge management life cycle, which 
consists of empirical knowledge extraction, verification, construction, and reasoning. The knowledge 
management life cycle has the following elements:  
(1) Empirical knowledge extraction: Empirical knowledge from a professional virtual community is 
scattered all over the dialogue process among community members. Hence, empirical knowledge 
content generated from a professional virtual community is analyzed first and then constructed to 
be an empirical knowledge evolution course model in order to comprehend the distribution of 
empirical knowledge in the community. Subsequently, speech act analysis is performed of 
empirical knowledge contents under topic classification of empirical knowledge evolution course 
model to identify various characters inside the virtual community and discover the propagation 
tendency of empirical knowledge. Ultimately, domain empirical knowledge is extracted through 
the empirical knowledge evolution course model and the speech act analysis results. Moreover, 
different types of empirical knowledge are represented using ontology techniques. Consequently, 
the knowledge model and the empirical rules possess a reasoning capability, which facilitates the 
updating and maintenance of empirical knowledge in the future.  
(2) Empirical knowledge verification: Based on the ontology representation of the extracted empirical 
knowledge from part (1), the logical conflict problem from the extracted empirical knowledge 
model is verified via the empirical knowledge difference for the professional virtual community. 
Moreover, domain experts must modify the error logics to ensure the accuracy and consistency of 
the empirical knowledge model.  
(3) Empirical knowledge construction: After verifying empirical knowledge, the ontology-based 
 6
(1) Difference in usage habits of professional terms  
    A professional virtual community involves different modes of use and representation for 
professional terms under a certain topic due to different professional domains from its members. This 
situation thus causes ambiguous terms between empirical knowledge requesters and providers. This 
study cites the discussion website of a professional virtual community http://www.mobile01.com as an 
observational example to determine the common ambiguous situations of terms as follows.  
‧ Synonym: Different expressions for terms, but with the same meaning. For instance, the terms 
“mouse” and “optical mouse” are synonyms, while the terms “main board” and “mother board” are 
also synonyms in the computer domain (Fig. 2).  
‧ Homograph: Same term, but with different meanings while applying in different domains. For 
instance, the term “keyboard” refers to the keyboard in the computer domain and represents 
electronic piano in the music domain (Fig. 3).  
 
 
Figure 2. Example of Concept Synonym  
 
 
Figure 3. Example of Concept Homograph  
 
    Table 1 lists the relation types between knowledge concepts and their processing methods.  
 
Table 1. Relation Types between Knowledge Concepts and Processing Methods  
Relations 
between 
Knowledge 
Concepts 
Definition Processing Method 
The Same  Two knowledge concepts are identical or synonyms  
Select one of the two 
knowledge concepts 
to store into the 
empirical knowledge 
repository  
Similar To  
‧ Different knowledge 
concept names, but 
part of the attributes 
Determine whether 
the knowledge 
concepts belong to 
 8
 
Figure 5. Example of Knowledge Level Difference  
 
2.3 Design of Ontology-based Empirical Knowledge Verification Model  
    Based on the analyzed differences in usage habits of professional terms and discussion topic 
cognitions in Section 2.2, this section designs an ontology-based empirical knowledge verification 
model not only to facilitate the logic accuracy of empirical knowledge in the knowledge repository, 
but also to provide knowledge workers with decision support based on accurate knowledge (Fig. 6).  
 
 
Figure 6. Ontology-based Empirical Knowledge Verification Model  
 
The proposed ontology-based empirical knowledge verification model consists mainly of 
empirical knowledge verification and empirical knowledge validation, as described in the following.  
(1) Verification of empirical knowledge: This task involves conducting concept matching and 
relation comparison for the ontology-based empirical knowledge model, i.e. source ontology, as 
obtained from the empirical knowledge extraction and the verified empirical knowledge, i.e. 
target ontology, in the empirical knowledge repository. The concept matching method matches 
 10
3.1 Verification Procedure for Ontology-based Empirical Knowledge  
This section introduces the procedure of ontology-based empirical knowledge verification based 
on the ontology-based empirical knowledge verification model introduced in Section 2.3 to detect 
logical conflict problems generated from the priority difference in time for new and old knowledge 
models. The procedure thus provides experts with verification and modification for empirical 
knowledge (Fig. 9). The ontology-based empirical knowledge verification procedure consists mainly 
of concept matching, relation comparison, and empirical knowledge validation. Meanwhile, concept 
matching involves concept mapping, concept locating and relation renewing, and relation labeling, 
while relation comparison involves path finding, relation and path combination, and relation 
consistency checking. Empirical knowledge validation comprises concept modification and relation 
modification. They are discussed in the following sections.  
 
Figure 9. Ontology-based Empirical Knowledge Verification Procedure  
 
3.2 Concept Matching  
Concept matching attempts to match the similarity between knowledge concepts and establish the 
relation between two similar knowledge concepts from source ontology and target ontology. The 
operational steps are described as follows:  
 
Step 1. Concept mapping  
    Due to object-oriented ontology treatment concept as an object, this study applies the Tversky 
Algorithm [10][12] to estimate the name similarity for two concepts and their attributes. Equation (1) 
presents the formula for concept matching.  
                      
B A
T SB A
T S B
T
C C
ConceptSim(C , C )
C
−=                 (1) 
    where CSA denotes the concept from source ontology, and its attribute name set is AiSA={A1SA, 
 12
Table 2. Concept Similarity between Source Ontology and Target Ontology for Securities Trading  
 
Step 2. Concept locating and relation renewing  
Concept locating locates the concepts with a high concept similarity between source ontology and 
target ontology (such as the concepts S1, S2, S3, S4, S5, S6, S7, S8, S10 and S11 from the source ontology 
in Table 2) on the concepts in target ontology. The relations among the concepts in source ontology are 
then renewed (Fig. 11).  
 
Step 3. Relation labeling  
The relations between the located concepts are labeled based on the results from the concept 
locating. As an example of securities trading, assume that the maximum value Max of 
ConceptSim(CTB, CSA) is set as 0.700 and the minimum value Min of ConceptSim(CTB, CSA) is set as 
0.350. If the value of ConceptSim(CTB, CSA) exceeds 0.700, the relation “The Same” is established. 
Meanwhile, if the value of ConceptSim(CTB, CSA) ranges between 0.350 and 0.700, the relation 
“Similar To” is then established. If the value of ConceptSim(CTB, CSA) is lower than 0.350, then 
concept CSA must be labeled as an independent concept (Fig. 12).  
 
 
 14
 
Figure 12. Relation Labeling between Similar Concepts (An Example of Securities Trading) 
 
 
 16
3.3 Relation Comparison  
    This section uses the relation logic of target ontology to examine the accuracy of relation logic 
from source ontology according to the results of knowledge concept matching and relation 
construction for source ontology and target ontology. The comparing relation includes the following 
steps:  
 
Step 1. Path finding  
Path finding adopts target ontology as the searching target and utilizes the Directed Depth First 
Search method [4][8] to identify all possible paths from the initial concept node to the final concept 
node. The algorithm derived in Fig. 14 is explained as follows:  
INPUT: N concept nodes of target ontology 
Step 1.1 List all reachable neighboring nodes for each concept node.  
Step 1.2 Select a random concept node and treat it as V. Subsequently, the node is represented in red 
(where V represents the initial concept node).  
Step 1.3 Identify the reachable neighboring nodes for the initial concept node V based on the results 
from Step 1.1. They are then recorded in Tm (where Tm is used to record the neighboring 
nodes for the initial concept node V, where m denotes the searching frequency).  
Step 1.4 Select a random neighboring node from Tm and treat it as the initial concept node u for next 
search.  
Step 1.5 Set u as the initial concept node and change the color of the concept node V from red to blue.  
Step 1.6 Repeat Steps 1.3~1.5 until the concept node V has no other neighboring nodes can be 
identified. Then, go to Step 1.7.  
Step 1.7 Change the color of the final searched concept node to gray, and record it in L (where L is 
used to record the reachable concept nodes for the initial concept node V).  
Step 1.8 Repeat Step 1.7. If the identified concept node is the first initial concept node V or the 
concept node that has been recorded as gray, then continuously execute Step 1.7; otherwise, 
go to Step 19.  
Step 1.9 Output the results of L.  
 
 18
Meanwhile, Fig. 16 displays course of the path searching by using the concept node T8 as the initial 
concept node.  
 
 
Figure 15. Neighboring Nodes for Each Concept  
 
Table 3. Path Searching Record of the Initial Concept Node T8  
 
 
 
 20
From the path searching course in Fig.16, all the reachable concept nodes and their paths for the 
initial concept node T8 are listed below:  
 
‧All paths from concept node T8 to concept node T1:  
  T8→T4→T2→T1  
  T8→T6→T5→T1  
  T8→T7→T5→T1  
‧Path from concept node T8 to concept node T2:  
  T8→T4→T2  
‧Path from concept node T8 to concept node T4:  
  T8→T4  
‧Path from concept node T8 to concept node T5:  
  T8→T6→T5  
‧Path from concept node T8 to concept node T6:  
  T8→T6  
‧Path from concept node T8 to concept node T7:  
  T8→T7  
 
Step 2. Relation and path combination  
    Relation and path combination combines all relations from source ontology and the possible paths 
for the target ontology searched for from Step 1 in order to identify the logical structures among 
concepts for facilitating checking of the relation consistency.  
    According to Fig. 17, the relations among the concept nodes of source ontology are first 
decomposed. The decomposed relations and the possible paths for target ontology searched from Step 
1 are then combined. Finally, the logical structures among the concepts are identified from the results 
of combining the relations and the paths. These logical structures include the original logical structures 
and the new logical ones. The former indicates the logical structures formed by existing concepts and 
relations, while latter represents the logical structures created by new concepts already verified by 
domain experts.  
 
 
 22
As for the logical structures among concepts in Fig. 17, the logical structures belong to single 
relation logical structures if the relation types between source ontology and target ontology are all the 
same. Additionally, the logical structures belong to multiple relation logical structures if the relation 
types between source ontology and target ontology differ from each other. Meanwhile, the logic 
models of single relation logical structures can be classified into four logic models, namely correct, 
conflict, redundancy, and circularity, while the logic models of multiple relation logical structures can 
be classified into three logic models of relation normal, relation error, and relation difference. Each 
logic model is detailed as follows.  
‧ Correct: The relations and their directions between source ontology and target ontology are the 
same.  
‧ Conflict: The relations between source ontology and target ontology are the same, but with 
different directions.  
‧ Redundancy: While the relation has existed between concepts in target ontology, a relation from 
source ontology is added to the target ontology. The added relation causes the redundant relation 
in the target ontology.  
‧ Circularity: A relation from the source ontology is added to the target ontology. The added 
relation causes the circular relation among the concepts in the target ontology.  
‧ Relation normal: A relation from the source ontology is added to the target ontology. If the added 
relation in target ontology is reasonable, then the relation is defined as a relation normal.  
‧ Relation error: A relation from the source ontology is added to the target ontology. If the added 
relation in the target ontology is unreasonable, then the relation is defined as a relation error.  
‧ Relation difference: Inconsistent semantic descriptions cause different relations between the 
source ontology and the target ontology.  
 
    To effectively check the logic models for logical structures, this study applies OWL (Web 
Ontology Language) language [9][11][14] to represent all of the relations in the logical structures 
among concepts. According to Table 4, these relations are “Generalization (Is-a)”, “Aggregation 
(Part-of)”, “The Same”, and “Similar To”, respectively.  
 
Table 4. OWL Representation for Relations  
Relation Type OWL Representation Graph Representation 
Generalization 
(Is-a) (?a rdfs:subClassOf ?b)  
Aggregation 
(Part-of) part-of (x, y)  
The-Same equivalentClass (C1, C3) 
 
Similar-To 
‧(?C2 owl:sameAs ?C4) 
  (Concept names are 
different; parts of 
attribute names are 
same) 
‧(?C2 
 
 24
Table 5. Relation Consistency Checking Method for the Logic Model “Correct”   
Checking Result Relation Type Graph Representation Checking Method 
Source: (?S2 rdfs:subClassOf ?S1) 
Target: (?T4 rdfs:subClassOf ?T3) 
Concept Matching Result:  
equivalentClass (S1, T3), equivalentClass (S2, T4) 
Generalization 
Source: (?S2 rdfs:subClassOf ?S1) 
Target: (?T4 rdfs:subClassOf ?T3) 
Concept Matching Result:  
(1) equivalentClass (S1, T3), (?S2 owl:sameAs ?T4) 
(2) equivalentClass (S1, T3), (?T2 owl:disjointWith ?T4) 
P.S. Concepts S2 and T4 are in the same level 
 
Source: part-of(S2, S1) 
Target: part-of(T4, T3) 
Concept Matching Result:  
equivalentClass (S1, T3), equivalentClass (S2, T4) 
Correct 
Aggregation Source: part-of(S2, S1) 
Target: part-of(T4, T3) 
Concept Matching Result:  
(1) equivalentClass (S1, T3), (?S2 owl:sameAs ?T4) 
(2) equivalentClass (S1, T3), (?C2 owl:disjointWith ?C4) 
P.S. Concepts S2 and T4 are in the same level 
 26
Table 7. Relation Consistency Checking Method for the Logic Model “Redundancy” 
Checking Result Relation Type Graph Representation Checking Method 
Generalization 
Source: (?S1 rdfs:subClassOf ?S2) 
Target: (?T3 rdfs:subClassOf ?T4)∧(?T4 rdfs:subClassOf ?T5) 
Concept Matching Result:  
equivalentClass (S1, T3), equivalentClass (S2, T5) 
P.S. ∵(?T3 rdfs:subClassOf ?T4)∧(?T4 rdfs:subClassOf ?T5)  
      ⇒(?T3 rdfs:subClassOf ?T5)= (?S1 rdfs:subClassOf ?S2) 
    ∴(?S1 rdfs:subClassOf ?S2) is a redundant relation for target 
Redundancy 
Aggregation 
Source: part-of(S1, S2) 
Target: part-of(T3, T4)∧part-of(T4, T5) 
Concept Matching Result:  
equivalentClass (S1, T3), equivalentClass (S2, T5) 
P.S. ∵part-of(T3, T4)∧part-of(T4, T5)⇒part-of(T3, T5)=part-of(S1, S2) 
    ∴part-of(S1, S2) is a redundant relation for target 
 28
Table 9. Relation Consistency Checking Method for the Logic Model “Relation Normal” 
Checking Result Relation Type Graph Representation Checking Method 
Source: part-of(S2, S1) 
Target: (?T5 rdfs:subClassOf ?T4)∧part-of (T4, T3) 
Concept Matching Result:  
equivalentClass (S1, T3), equivalentClass (S2, T5) 
P.S. ∵ equivalentClass (S1, T3), equivalentClass (S2, T5) 
    ∴ part-of(T5, T3) can be established between concepts T3 and T5 
    ∵(?T5 rdfs:subClassOf ?T4) 
    ∴T4 is a super-concept of T5 and the relation between concepts T4  
      and T5 is generalization 
    ∵part-of(T5, T3), (?T5 rdfs:subClassOf ?T4), part-of(T4, T3) 
    ∴The relation logic is normal in target 
Relation Normal
Generalization 
and 
Aggregation Source: part-of(S2,S1) 
Target: part-of (T5,T4)∧(?T4 rdfs:subClassOf ?T3) 
Concept Matching Result:   
equivalentClass (S1, T3), equivalentClass (S2, T5) 
P.S. ∵ equivalentClass (S1, T3), equivalentClass (S2, T5) 
    ∴ part-of(T5, T3) can be established between concepts T3 and T5 
    ∵(?T4 rdfs:subClassOf ?T3) 
    ∴T4 is a super-concept of T5 and the relation between concepts T4 
      and T3 is generalization 
    ∵part-of(T5, T3), (?T4 rdfs:subClassOf ?T3), part-of(T5, T4) 
    ∴The relation logic is normal in target 
 30
Table 11. Relation Consistency Checking Method for the Logic Model “Relation Difference” 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Checking Result Relation Type Graph Representation Checking Method 
Source: (?S2 rdfs:subClassOf ?S1) 
Target: part-of (T4, T3) 
Concept Matching Result:  
( equivalentClass (S1, T3), equivalentClass (S2, T4) 
P.S. ∵(?S2 rdfs:subClassOf ?S1)≠part-of (T4, T3) and same relation     
      direction 
    ∴Semantic difference between source and target Relation 
Difference 
Generalization 
and 
Aggregation 
Source: (?S2 rdfs:subClassOf ?S1) 
Target: Part-of (T3, T4) 
Concept Matching Result:  
equivalentClass (S1, T3), equivalentClass (S2, T4) 
P.S. ∵(?S2 rdfs:subClassOf ?S1)≠part-of (T3, T4) and different relation  
      direction 
    ∴Semantic difference between source and target 
 32
Section 3.3. In contrast, the domain expert deletes the independent concept from the 
source ontology. Figure 19 shows the algorithm of concept modification.  
 
 
Figure 19. Concept Modification Process  
 
 34
depicts the process.  
 
Check 
Relations in Logical 
Structure   
Domain
Expert
Choose one Suitable Logical Structure and Store 
it into Empirical Knowledge Repository
Modify the Relation “Similar To” and Store 
it into Empirical Knowledge Repository
All Relations are 
“The Same”
Relations include “The 
Same” and “Similar To”
Complete Relation 
Modification for Logical 
Mode “Conflict”
 
Figure 21. Relation Modification Process for the Logic Model “Conflict”  
 
‧Relation modification for the logic model “Redundancy”: According to the defined logic 
model “Redundancy” in Table 7, the domain expert confirms the reason for causing 
redundancy. If the redundant reason in the target ontology is attributed to the relations from 
the source ontology, then the logical structure in the source ontology must be deleted by the 
domain expert, along with the original relations in the target ontology kept. If the redundant 
reason in the target ontology is attributed to the relations from the target ontology, then the 
logical structure of the target ontology must be replaced by the logical structure of the 
source ontology. Figure 22 schematically depicts the process.  
 
 36
 
Figure 23. Relation Modification Process for the Logic Model “Circularity”  
 
‧Relation modification for the logic model “Relation Normal”: Based on the logic model 
“Relation Normal” from Table 9, the domain expert confirms whether the logical structure 
that has been created owing to the relation combinations between the source ontology and 
the target ontology is opposed to the domain. If a fact is opposed to the domain, then the 
logical structure must be modified through the domain expert. Figure 24 illustrates the 
process of relation modification for the logic model “Relation Normal”.  
 
 
Figure 24. Relation Modification Process for the Logic Model “Relation Normal”  
 38
 
Figure 26. Relation Modification Process for the Logic Model “Relation Difference”  
 
4. Ontology-based Empirical Knowledge Verification Mechanism Implementation  
    Based on the proposed techniques for ontology-based empirical knowledge verification, 
this section implements an ontology-based empirical knowledge verification mechanism for 
professional virtual community. The following subsections describe the implementation 
environment and results of a security trading case.  
 
4.1 Implementation Environment  
    This study implemented a prototype to verify ontology-based empirical knowledge at 
the Knowledge Engineering and Management Laboratory at National Kaohsiung First 
University of Science and Technology. The implementation environment was as follows. 
Computer hardware was an Intel Core2-2.13G PC. Software was Microsoft  Windows XP 
Professional, Protégé 3.1.1, Apache HTTP Server Version 2.2, My SQL 5.0.51, and PHP 
5.2.5. Figure 27 displays the ontology-based empirical knowledge verification mechanism 
framework, which includes three layers of user interface, mechanism operation, and 
empirical knowledge repository.  
 
 40
 
Figure 28. Source Ontology (Example of Securities Trading)  
 
 
Figure 29. Target Ontology (Example of Securities Trading)  
 
 42
 
Figure 32. Results of Relation Labeling  
 
 
Figure 33. Path Finding Results of the Target Ontology  
 
 44
 
Figure 36. Results of Relation Consistency Checking  
 
5. Conclusions  
This work developed a novel mechanism to verify ontology-based knowledge 
verification to effectively address the logic errors generated in constructing empirical 
knowledge due to the differences in knowledge source, timing, and members’ descriptive 
manner in a professional virtual community, thus enhancing the quality of empirical 
knowledge in the knowledge repository and decision-making efficiency among knowledge 
workers. The primary results and contributions of this study are summarized as follows:  
(1) Empirical knowledge management framework for professional virtual community: This 
study designed an empirical knowledge management framework for professional virtual 
community based on the knowledge management method to effectively extract, store, 
manage, and share the empirical knowledge retained by experts within a professional 
virtual community.  
(2) Ontology-based empirical knowledge verification model: Based on the differences in 
usage habits of professional terms and discussion topic cognitions for members in a 
professional virtual community, this study designed a model of the ontology-based 
empirical knowledge verification in order to effectively detect logical errors for 
empirical knowledge before storing it into an empirical knowledge repository.  
(3) Ontology-based empirical knowledge verification techniques: Based on the designed 
model of ontology-based empirical knowledge verification, this study developed core 
techniques related to ontology-based empirical knowledge verification, including 
concept matching, relation comparison, and empirical knowledge validation, in order to 
validate empirical knowledge.  
 46
[12] Wang, J. Z. and Ali, F., An efficient ontology comparison tool for semantic web 
applications, IEEE/WIC/ACM International Conference on Web Intelligence, pp. 
372-378, 2005.  
[13] Yeh, C. W. and Chu, C. P., Molecular verification of rule-based systems based on DNA 
computation, IEEE Transactions on Knowledge and Data Engineering, Vol. 20, No. 7, 
pp. 965-975, 2008.  
[14] Zhao, W. and Liu, J. K., OWL/SWRL representation methodology for 
EXPRESS-driven product information model: Part II: Practice, Computers in Industry, 
Vol. 59, No. 6, pp. 590-600, 2008.  
[15] Zlatareva, N. P., A refinement framework to support validation and maintenance of 
knowledge-based systems, Expert Systems with Applications, Vol. 15, No. 3-4, pp. 
245-252, 1998.  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 48
Community in Knowledge-Intensive Service Industries」之研究報告與問題回答。 
 
二、與會心得 
[1] 國際會議所發表的論文內容，雖不像全文期刊如此嚴謹與完善，但卻常常是發表全
文期刊前的跳板。根據以往研讀期刊的經驗，絕大多數的期刊論文，之前大都有其
相關會議論文之發表，且會議論文發表的時效上，較接近原作者完成的時間。 
[2] 參加國際會議，可以瞭解世界各國專家學者們目前對於這些領域上的想法、努力與
貢獻，   對於自己往後的研究也可帶來相當的思索與啟發。另外，凝聽他人的報
告，從中亦可學習相當多的報告技巧，如語調、起承轉合與投影片製作等等，對於
未來國際會議之論文發表   上均有相當助益。 
[3] 要成為一位優秀的國際性學者，除了不斷地充實自己各方面的能力之外，更需不斷
地吸取  國際舞台的經驗，以「膽大心細」的心情面對是最好的寫照。 
 
三、攜回資料 
[1] ICEIS 2011 Conference Program Guide 一本。 
[2] ICEIS 2011 Proceeding CD 一片。 
 
 2
二、與會心得 
[1] 國際會議所發表的論文內容，雖不像全文期刊如此嚴謹與完善，但卻常常是發表全文期刊前的跳
板。根據以往研讀期刊的經驗，絕大多數的期刊論文，之前大都有其相關會議論文之發表，且會議
論文發表的時效上，較接近原作者完成的時間。 
[2] 參加國際會議，可以瞭解世界各國專家學者們目前對於這些領域上的想法、努力與貢獻，   對於
自己往後的研究也可帶來相當的思索與啟發。另外，凝聽他人的報告，從中亦可學習相當多的報告
技巧，如語調、起承轉合與投影片製作等等，對於未來國際會議之論文發表   上均有相當助益。 
[3] 要成為一位優秀的國際性學者，除了不斷地充實自己各方面的能力之外，更需不斷地吸取  國際舞
台的經驗，以「膽大心細」的心情面對是最好的寫照。 
 
三、攜回資料 
[1] ICEIS 2011 Conference Program Guide 一本。 
[2] ICEIS 2011 Proceeding CD 一片。 
 
99 年度專題研究計畫研究成果彙整表 
計畫主持人：陳育仁 計畫編號：99-2221-E-327-036- 
計畫名稱：經驗知識誘導、探勘與分享技術研發(II) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 1 1 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 1 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
