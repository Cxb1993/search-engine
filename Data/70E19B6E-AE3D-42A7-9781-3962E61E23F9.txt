2ZC/ZR 的 SD 設定也會影響資料封包
的傳遞時間。所有子節點與父節點的訊息
交換只會發生在 SD 時期，因此子節點與
父節點間的 SD 時間差，會造成封包傳遞
的額外延遲。以圖二為例，節點 2 的封包
只能在節點 1 的 SD 時段送給節點 1；節
點 1 收到的封包將在節點 0 的 SD 時段送
給節點 0。因此，如果要降低封包傳遞的
額外延遲，節點 2 與 1 的 SD 時間差與節
點 1 與 0 的 SD 時間差要盡量減少才行。
因此，如何安排各個 ZC/ZR 的 SD 設
定，以避免可能的傳輸碰撞，並降低資料
封包的傳遞延遲，便成為一個值得研究的
課題。由於 SD 是以 Beacon 訊框起始，安
排 SD的時間就等同於安排Beacon訊框的
傳送時間，所以這個問題實際上等於
Beacon 排程問題。目前 Beacon 排程這方
面的研究成果仍非常少，唯一的相關研究
[3]仍屬理論上的探討，並沒有具體可實行
的解決方案出現。
當一個裝置加入 ZigBee 網路時，它
必須分配到一個在此網路中唯一的網路位
址。ZigBee 的網路位址長度為 16 位元，
因此理論上總共有65,536個位址可供分配
（位址 0 保留給 ZC 使用）。對大部份的應
用而言，這樣的位址數量是足夠的。
在初始化樹狀 ZigBee 網路時，ZC 可以
設定下列「拓樸參數」：
 Lm: 樹的最大深度值(Depth Value)
值。ZC 的深度值為 0。深度值為
Lm 的裝置只能是 ZED，不可以是
ZR。
 Cm: 每個 ZC/ZR 裝置最多可以擁
有的子節點數目。
 Rm: 每個 ZC/ZR 裝置的子節點
中，可以擔任 ZR 的最大數量。
Lm, Cm, 和 Rm 的範圍皆在 0 與 14
之間，不過他們的設定並非完全獨立的。
這是因為某些設定組合並沒有意義（如
Rm > Cm），而某些組合允許加入的裝置數
目超過所有可分配的位址數目。
經由適當設定這些拓樸參數，ZC 可以
大略控制樹的形狀和範圍，不過樹的實際
結構仍會受到裝置實際地理位置分佈的影
響。
分散式位址分配機制 (Distributed
Address Assignment Mechanism; DAAM)
是 ZigBee 規格書中所建議的位址配置方
法。在 DAAM 中，樹中的每個可能位置
都已事先分配好一個唯一的位址。任何 ZR
只要知道自己所在的深度值以及拓樸參數
的設定，即可自行配置位址給與其聯結的
裝置而不會與網路上其他裝置的位址產生
衝突。DAAM 的另一個好處是它可以取代
傳統路由(Routing)協定的功能。當一個
ZC/ZR要發出一個封包或收到一個必須要
轉送出去的封包時，可以簡單根據目的端
的網路位址計算出下一跳躍(Next-Hop)節
點的位址，而無須查閱路由表。這項特性
讓 ZC/ZR 不必另外執行額外的路由協
定，也可以省掉儲存路由資訊的儲存空間。
DAAM 的缺點是缺乏彈性。因為位址
的配置方式與拓樸參數緊密相關，當拓樸
參數的設定值與裝置的實際地理位置分佈
無法匹配時，可能會造成許多裝置無法分
配到位址而許多預先配置的位址並沒有被
裝置實際使用。不幸的是，目前並沒有任
何方法可以自動設定適當的拓樸參數以減
少未分配位址的裝置數目。
4現有文獻中第一個探討 ZigBee 網路中
低延遲 Beacon 排程的論文[3]是由交大資
工所曾煜棋教授所領導的研究團隊所發表
的。他們證明了要找到一個可以極小化從
任何ZED到ZC的封包傳遞延遲的Beacon
排程是一個 NP-hard 的問題。作者也提出
了一個 Heuristic，設法讓傳輸不會造成衝
撞問題的 ZR 安排在同一時間傳送
Beacon，以儘量減少封包在每一個連結上
花費的等待時間。不過，此機制的運作需
要先得知整個網路的拓樸邏輯及所有同時
傳輸會造成衝撞問題的 ZR 關係，然後才
能進行 Beacon 排程。此要求並不符合
ZigBee 網路的運作規範。
在位址組態方面，網際網路上的位址組
態方式可分為 Stateful 和 Stateless 兩類。
前者假設由某個裝置集中維護目前的位址
配置資訊，並負責分配唯一的 IP 位址給其
他 未 組 態 的 節 點 。 Dynamic Host
Configuration Protocol (DHCP) [9]即是常
見的 Stateful 位址組態方式。在 Stateless
的位址組態方法中，節點允許自行選擇位
址，並透過 Duplicate Address Detection
(DAD) [10]的程序驗證其唯一性。
目前文獻上並未有直接針對 ZigBee 網
路提出的相關機制。不過 ZigBee 網路亦歸
類 於 行 動 隨 意 網 路 (Mobile Ad Hoc
Networks; MANETs)的一種。在 MANET
的位址組態方面，Gunes 等人曾提出一個
Stateful 的位址組態機制[11]。此方法由
MANET 中動態選出的某個節點負責維護
位址組態資訊，包含已分配的 IP 位址與對
應的 MAC 位址以及位址的使用週期。此
節點定期 Flood 此份組態資訊給網路中所
有的節點。已組態完成的節點須回覆確認
收到的訊息。未組態的節點則必須等到收
到此份組態資訊後才能提出位址組態的請
求訊息。若未組態的節點在一定時間內未
收到此份組態資訊，則它假設與維護組態
資訊節點間的連線已斷裂，於是會自己成
為新的組態資訊維護節點。
MANETconf [5] 是另一個 Stateful 的
位址組態機制。它假設每個已進行位址組
態的主機皆會維護一份尚未分配出去的
IP 位址列表。當未組態的節點要求 IP 位
址時，會向其已組態位址的鄰居尋求幫
助。鄰居節點則挑選一個尚未分配的 IP 位
址，並向所有其他已組態的主機發出訊
息，確認此位址尚未被分配出去也並未被
其他節點挑選出來等待確認，就可將此位
址配置給未組態的節點。此方法實際上將
位址組態視為傳統分散式系統中的
Distributed Agreement Problem，並依賴一
個分散式互斥存取協定(Distributed Mutual
Exclusion Protocol)來保證配置 IP 位址的
唯一性。
在另一個研究中[6]，每當有節點加入
網路時，父節點便把自己擁有的位址空間
使用Binary Split的方式切割，配置一塊（而
非單一一個）記憶體空間給新節點。此機
制的好處是每一個節點皆可以自行分配位
址給新加入的子節點，而不必詢問網路上
的其他節點。MANETconf與此機制設計的
重點在於克服節點損壞、訊息遺失、節點
移動、網路分隔與合併、以及同時發動位
址組態協定所可能造成的問題。他們的終
極目標是在上述問題發生時仍能夠保證位
址的唯一性，並且儘可能的降低未被配置
位址的節點數量。參考文獻[7] 對現有的
MANET位址組態機制提供了完整的綜合
評述。
傳 統 上 我 們 將 位 址 組 態 與 路 由
(Routing) 視為獨立不相干的議題。除了保
證位址唯一性外，位址組態機制並不設計
用來輔助網路路由。反觀ZigBee網路中的
6是與 DAAM 的下列兩個性質有關。
 P1: FFDs 可以 ZEDs 的角色加入網
路。當 Cm 值設定大於 Rm 時此性質成
立。
 P2: 限制加入一個 ZC/ZR 的子節點數
目。這是 DAAM 本來具有的性質。
因此我們設計位址組態的重點就是要
打破 P1 與 P2 這兩個性質。
五.結果與討論
在 Beacon 傳送時槽的排程方面，我們將任
兩個 ZC/ZR 裝置 u 與 v 之間的關係分為
下列四種型式：
Inhibited Pair (IP): 如果 u 與 v 為鄰居，則
u 或 v 其中之一已有子節點。如果 u 與 v
不為鄰居，則存在一 u 與 v 的共同鄰居為
u 或 v 其中之一的子節點。
Visible Pair (VP): u與v為鄰居，但u與v皆無
子節點。
Hidden Pair (HP): u與v不為鄰居，但存在u
與v的共同鄰居。這些共同鄰居皆非u或v
的子節點。
Unrelated Pair (UP): u與v不為鄰居，且u與v
並不擁有共同鄰居。
圖三為判定裝置u與v之間關係的決策
樹。圖中Vt為所有節點的集合，pn(i)為節
點i的鄰居集合，p(i)為節點i的父節點。
當判定裝置u與v之間的關係後，u與v
使用相同Beacon傳送時槽使其它裝置發生
訊框衝撞的機率經分析後為：
圖三：判定裝置 u 與 v 之間關係的決策樹。
 當(u, v)IP，衝撞形成的機率為 1。
 當 (u, v)VP ， 則 衝 撞 機 率 為
,
4
33
1),( pvuPV 





其中p為連結形
成的機率。
 當 (u, v)HP ， 則 衝 撞 機 率 為
,),( pvuPH  其中 17.0 。
 當 (u, v)UP ， 則 衝 撞 機 率 為
,)(
4
3
),( 1 pkvuPU











   其
中 
 

dk
k
sin
sin
1
3
2
)(
3/2
0 


 
有了這些機率值後，當某個 FFD u 搜
尋到可與其進行聯結的父節點時，它執行
圖四的演算法以決定其所使用的 Beacon
傳送時槽。
在 ZigBee 網路的位址組態方面，我們
總 共 提 出 了 三 個 機 制 ， 第 一 個 是
Centralized Stateful Address Configuration
(CSAC)。當 ZC 開始建立網路時，會設定
自身位址為 0。若距 ZC One-Hop 內之
ZigBee 裝置要加入網路，ZC 在收到該裝
置發出的 Association Request 訊息後，會
分配一個目前尚未使用的網路位址給予此
裝置，並將該裝置設為自身之子節點。當
ZigBee 裝置並非 ZC 之 One-Hop 鄰居節點
8需求。在 HAC 中，每個 ZR/ZC 在其路由
表中僅需為其每個使用 CSAC 的後代節點
建立一個項目。使用 DAAM 機制加入網
路的後代節點並不佔用路由表空間。
第三個位址組態機制為 Router-Based
Address Configuration (RBAC)。RBAC 將
位址空間切割為固定大小的區塊。當 FFD
加入網路時，使用 CSAC 相同的機制向 ZC
要求位址。但與 CSAC 不同的是，ZC 並
非僅配置一個位址給加入的 FFD，而是配
置一整個區塊。此區塊中的位址除第一個
配置給 FFD 外，其餘可供 FFD 成為 ZR 後
分配給加入它的 ZED 所使用。
RBAC 的好處也是可以降低路由表的
空間需求。在 RBAC 中，每個 ZR/ZC 在
其路由表中僅需為其每個後代 ZR 建立一
個項目。後代 ZED 並不佔用路由表空間。
我們進行了多項的實驗，以比較CSAC,
HAC, RBAC 與 DAAM 的效能。限於篇幅
限制，實驗結果無法放入此報告中。表一
列出我們為實驗結果所下的結論。
表一：各種位址組態機制的實驗比較結果
DAAM CSAC HAC RBAC
加入網路
的裝置數
目
低至高 最高 中 至
高
最高
Hop-count 低至高 中 中 中
路由空間
/ 維 護 成
本
無 最高 低 至
高
中
無縫重加
入比例
零 最高 低 至
中
中
從表中我們可以看到 RBAC 在加入網
路的裝置數目與 Hop-count 方面的表現與
CSAC 幾乎一樣，而路由的空間及維護成
本又低於 CSAC，因此是我們最後建議的
解決方案。
10
計畫成果自評
本計畫中關於 Beacon 傳送時槽排程部分的成果（Risk-aware beacon scheduling for
tree-based ZigBee/IEEE 802.15.4 wireless networks），已發表於第四屆國際無線網際網路
研討會[12]。我們後續加強了這部份的內容，修改後的版本預備投稿至國際期刊。至於
ZigBee 網路的位址配置協定方面的工作，先前已在第 22 屆的 AINA 國際研討會發表
[13]。後續版本已被國際期刊 Computer Communications 接受[14]。總結而言，此研究計
畫的成果算是符合原先規劃的。在申請專利方面，目前評估並不適合。除此之外，此研
究計畫的經費也支持了一位碩士班學生完成碩士論文，謹此致謝。
教授、台大電機系的魏宏宇和謝宏昀教授，以及交大電信系的王蒞君教授。前面幾位都
是第一次碰面，交大的王蒞君教授則是第三次在國外遇到，前面兩次我記得分別是 2003
年在阿拉斯加舉行的 ICC 以及 2004年在佛羅里達舉行的MASS會議。除此之外，還遇
到一位台大電機畢業後留美，現在加州 Fujitsu工作的Wei-Peng Chen博士，以及北京清
華畢業，現在德州大學阿靈頓分校任教的 Yonghe Liu教授。午宴時也和來至德國 Ericsson
的資深研究員 Joachim Sachs分享了在無線網路技術發展趨勢的一些看法。
會議發表的論文多圍繞在無線網路的相關技術。主題包括了Mobile Ad Hoc Networks,
Wireless Sensor Networks, IEEE 802.11, IEEE 802.16, IEEE 802.22, IEEE 802.15.4/ZigBee,
Cellular Networks, IPTV等，議題從實體層的 OFDMA, MIMO、資料鍵結層的MAC、一
直到應用層的 XMS 與人機介面都有人討論。其中一篇來自日本大阪大學的研究，特別
引起與會人員的熱烈討論。大阪大學的研究人員針對手機使用者使用手機上網瀏覽網頁
時，想要對瀏覽網頁中某個字眼，進行更進一步的瞭解(如查詢在Wiki百科中的說明)，
設計一個簡單且直覺的使用介面。使用者只要壓下手機中的某個鍵，網頁中央就會出現
一個點，只要使用者的按鍵沒有放開，這個點就會往外擴大成一個圓。當使用者放開按
鍵時，此時圓內所包括的文字，就會被當作可能的查詢目標而被傳送到網路端進行更進
一步的處理。這些文字中的詞，是有查詢優先權的。基本上剛好被圓蓋住的詞，最有可
能是使用者想要查詢的目標；另外名詞被查詢到的機會，也會高於其他詞性的詞。網路
端選擇出使用者最有可能要查詢的十個詞後，傳送回使用者的手機螢幕，讓使用者利用
手機上的數字按鍵進行選擇的動作。此種設計很簡單，使用者只要用一個按鍵就可以挑
出想要查詢的字眼，是很成功的設計。不過應用上還有一些困難，例如因排版關係被瀏
覽器分割成兩列的詞恐怕就無法適用。
三、建議
若搭乘本國航空公司(華航)班機到達檀香山，不含稅及兵險的機票價格就要四萬多
元。在國科會只補助四萬台幣出國費用的情況下，連機票錢都不夠，更不要說高達 755
美金(約合兩萬五千台幣)的註冊費用了。另外檀香山(Honolulu)到達會議地點茂宜(Maui)
島必須額外搭乘當地的小飛機，從機場到會場要搭乘十數公里的計程車，會場旅館一晚
Risk-Aware Beacon Scheduling for Tree-Based
ZigBee/IEEE 802.15.4 Wireless Networks
Li-Hsing Yen
∗
Dept. Computer Science & Information Eng.
National University of Kaohsiung
Kaohsiung, Taiwan 811, R.O.C.
lhyen@nuk.edu.tw
Yee Wei Law Marimuthu Palaniswami
†
Dept. Electrical & Electronic Eng.
The University of Melbourne
Parkville, Victoria 3052, Australia
{ywlaw,swami}@ee.unimelb.edu.au
ABSTRACT
In a tree-based ZigBee network, ZigBee routers (ZRs) must
schedule their beacon transmission times to avoid beacon
collisions. The beacon schedule determines packet deliv-
ery latency from the end devices to the ZigBee coordina-
tor at the root of the tree. Traditionally, beacon sched-
ules are chosen such that a ZR does not reuse the beacon
slots already claimed by its neighbors, or the neighbors of
its neighbors. We observe however that beacon slots can be
reused judiciously, especially when the risk of beacon col-
lision caused by such reuse is low. The advantage of such
reuse is that packet delivery latency can be reduced. We
formalize our observation by proposing a node pair classifi-
cation scheme, that classifies pairs of nodes that are at most
two hops apart. Based on this scheme, we can easily assess
the risk of slot reuse by a node pair. If the risk is high, slot
reuse is disallowed; otherwise, slot reuse is allowed. This
forms the essence of our ZigBee-compliant, distributed, risk-
aware, probabilistic beacon scheduling algorithm. Simulation
results confirm that our algorithm produces a lower latency
compared to if a more conventional slot reuse rule is used.
Categories and Subject Descriptors
COMPUTER-COMMUNICATION NETWORKS [Network
Architecture and Design]: Wireless communication
General Terms
ZigBee/IEEE 802.15.4 beacon scheduling
∗The first author is supported by the National Science Coun-
cil, ROC, under grant NSC 97-2221-E-390-014.
†The second and third authors are supported by the Aus-
tralian Research Council Research Network on Intelligent
Sensors, Sensor Networks and Information Processing (ISS-
NIP), and the DEST International Science and Linkage
Grant.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
WICON’08 November 17-19, 2008, Maui, Hawaii, USA.
Copyright 2008 ICST 978-963-9799-36-3 ...$5.00.
1. INTRODUCTION
A wireless Personal Area Network (PAN), as defined by
IEEE 802.15.4 [2], comprises devices that are characterized
by low power, low data rate, short communication range,
and low cost. IEEE 802.15.4 devices can be categorized into
full function devices (FFDs) and reduced function devices
(RFDs). FFDs are able to forward frames for other devices,
while RFDs lack such capability. An FFD can initiate a
PAN and act as the coordinator of the PAN. If beacon mode
is enabled, the PAN coordinator defines a superframe that
delineates the timing structure of the PAN. A superframe
consists of active and inactive periods (Fig. 1). The active
period begins with a beacon frame, by which nearby devices
can identify the presence of the coordinator and thereby
join the PAN by making association1 with the coordinator.
Beacon frames also serve the purpose of maintaining time
synchronization between the coordinator and associated de-
vices. Following the beacon is a number of time slots used
for data exchange between the coordinator and associated
clients. In the inactive period that follows the active period,
no data traffic is expected in the PAN so devices can either
enter power-saving mode or attempt communication with
devices in other coexisting PANs.
ZC’s child
The ZC
 ZC’s 
grandchild
listening
listening
listening
listening
time
Beacon
transmission
time offset
Active period
Beacon
For data 
exchange
Superframe 
Duration (SD)
Beacon Interval (BI)
Superframe
Inactive period
Figure 1: Example of a beacon schedule and the
structure of a superframe.
1.1 Problem Statement
1Association is a communication primitive on the MAC sub-
layer, specified by the standard, by which a device associates
itself with a particular PAN [6]. We say “associate” and
“join” interchangeably.
Table 1: Partial list of symbols
Symbol Semantics
2BO-SO Number of beacon slots
Lm Maximum depth of a tree
Cm Maximum number of children of a ZC/ZR
Rm Maximum number of children of a ZC/ZR that can
be ZRs
par(u) Parent of u
pn(u) Physical neighbor of u
V Vertex set representing all nodes in the network
Et Edge set defined by {(u, v)|v = par(u)}
Ep Edge set defined by {(u, v)|v = pn(u), u = pn(v)}
Gt Directed graph with vertex set V and edge set Et
Gp Undirected graph with vertex set V and edge set Ep
r Radio range
R Region where a WSN is deployed
A Area of R
l Width/height of R when R is square
p Probability that a node is another node’s physical
neighbor
J(u, v) Area of the region jointly covered by nodes u and v
d(u, v) Distance between nodes u and v
P (u, v) Expected probability that u’s and v’s slot sharing
may prevent future neighbors of u and v to associate
with either u or v
k Node v’s number of neighbors
γ,ϕ(k) See Proposition 1
A tree-based ZigBee network is characterized by the pa-
rameters Lm, Cm and Rm (Table 1). According to the Zig-
Bee specification, the ZC is at depth 0 and devices at depth
Lm can only be ZEDs, not ZRs. Let T (Lm,Rm) be the
maximal possible ZigBee tree (disregarding ZEDs) that can
be formed, given Lm and Rm. The number of ZC/ZRs in
T (Lm,Rm) is
∑Lm−1
i=0 Rm
i = Rm
Lm−1
Rm−1 . Therefore, if
2BO−SO ≥ Rm
Lm − 1
Rm− 1 , (1)
then each ZC/ZR can be assigned a unique beacon slot for
non-overlapping beacon transmissions. If (1) does not hold,
which often happens in practice, some beacon slots must be
reused to accommodate all possible ZRs in the network.
A ZED/ZR is allowed to send frames to its parent only
during the parent’s active period. If a ZR’s active period is
placed later than its parent’s, all packets that it receives from
its children during the current BI will not be forwarded to its
parent until the next BI. Similarly, a ZR is unable to receive
packets from its parent and then forward them to its children
within the same BI, if the ZR’s active period is placed earlier
than its parent’s. Therefore, uplink (from a device to its
parent) and downlink (from a ZR to its child) packet delivery
latencies are also determined by beacon scheduling. It is
a challenge to schedule ZC/ZR’s beacon transmissions to
avoid potential collisions while minimizing packet delivery
latency.
For the ensuing discussion, most of the symbols used are
summarized in Table 1.
3. RELATED WORK
Koubaˆa et al. [3] have studied the problem of finding a
collision-free beacon schedule with the assumption that each
ZR can have its own independent BI/SD setting. A schedule
was also provided when the given configuration is schedula-
ble. However, this schedule is not latency-aware. Tseng
and Pan [4] investigated the problem of finding a schedule
that minimizes the maximal uplink packet delivery latency.
They proved that this is an NP-hard problem and proposed
two heuristic scheduling algorithms, namely centralized tree-
based assignment and distributed slot assignment (DSA).
Centralized tree-based assignment requires complete topol-
ogy information as input and is not much better than DSA.
In DSA, each node u chooses the slot that gives the lowest
latency with respect to u’s parent, but at the same time
does not collide with the slots occupied by the nodes in u’s
2r-neighborhood.
All prior work [3, 4] emphasizes on reusing beacon slots
whenever possible to minimize the number of needed slots.
The feasibility of slot reuse depends not only on existing
links but also on interfering neighbors. A node u is con-
sidered to interfere with another node v if u is within v’s
transmission range. For any node u in a ZigBee tree, let
par(u) denote u’s parent in the tree. The tree can then be
modeled as a directed graph Gt(Vt, Et), where Vt is the set of
all ZigBee devices in the tree and Et = {(u, v)|v = par(u)}.
Let Gp(Vt, Ep) be an undirected graph that models the un-
derlying physical-layer topology of t, where (u, v) ∈ Ep if
devices u and v are within the transmission range of each
other. The set of nodes in Vt that are adjacent to u in
Gp are u’s physical neighbors, denoted by pn(u). All prior
work avoids allocating u’s beacon slot to another ZR v if
(u ∈ pn(v)) ∨ (∃w ∈ Vt − {u, v} : w ∈ pn(u) ∧ w ∈ pn(v)).
Take Fig. 2 as an example. The ZC and ZR 6 there are
prohibited from taking the same beacon slot, because doing
so would cause transmission collisions at ZR 1.
We argue that the rule imposed by prior work for slot
reuse is however too restrictive. After all, reusing a beacon
slot should be safe as long as there is no victim of such
reuse. For any ZC/ZR, its beacon slot is for data exchange
only between itself and its children. So when a ZC/ZR has
no child, beacons from other ZC/ZRs in the vicinity cannot
make victims at this ZC/ZR’s site. For example, there is
no victim when ZRs 1 and 3 in Fig. 2 take the same beacon
slot, although they have a physical neighbor in common (i.e.,
the ZC). This kind of slot-reuse is permitted by the ZigBee
specification. However, the specification does not allow slot
reuse between physical neighbors, though such a reuse does
not necessarily make a victim. The ZR pair (2, 6) in Fig. 2
is an example.
In the next section, we will present a systematic approach
for identifying the cases when slot reuse is relatively safe.
This is done by classifying pairs of nodes that are at most
two hops from each other into different pair types, and calcu-
lating the associated risk probability. High risk probability
means the corresponding node pair would at a high proba-
bility prevent a future neighboring node from joining, and
the node pair should therefore not share a beacon slot. Con-
versely, low risk probability means it is relatively safe for the
node pair to share the same beacon slot.
4. PROBABILISTIC RISK-AWARE BEACON
SCHEDULING
In this section, we first describe our node pair classifica-
tion scheme, then our risk probability assessment method-
ology, and finally our ZigBee-compliant, distributed, risk-
aware, probabilistic beacon scheduling algorithm. The node
by two nodes u and v is
E[J(u, v)] =
{(
pi − 3
√
3
4
)
r2 if d(u, v) ≤ r,
√
3
4
r2 if r < d(u, v) ≤ 2r.
Proof. See Appendix.
A node placed near the boundary of R will cover less area
than expected, as part of its coverage is outside R. This
is referred to as the border effect. To avoid clumsy results
caused by the border effect, the following analysis assumes
that the region covered by any node is completely within R.
If R is a rectangle area, the assumption can be achieved by
adopting the torus convention [1], which turns a flat rectan-
gle into a torus. With this assumption, the probability of
link occurrence [5] is p = pir2/A. Our core result is Propo-
sition 1.
Proposition 1. Assume nodes are uniformly distributed
in a region R of size A, and A À pir2. Assume also all
collided beacons and data grames are garbled. Suppose when
a new node w joins, a pair of nodes u and v are using the
same beacon slot. Denote by k the number of neighbors v
has, and by P (u, v) the expected probability that w can nei-
ther associate with u nor with v, then
if (u, v) ∈VP, P (u, v) = PV (u, v) =
(
1 + 3
√
3
4pi
)
p;
if (u, v) ∈HP, P (u, v) = PH(u, v) ≈ γp;
if (u, v) ∈UP, P (u, v) = PU (u, v) ≈
[
γ +
(√
3
4pi
− γ
)
ϕ(k)−1
]
p;
where p = pir
2
A
, γ ≈ 0.17, ϕ(k) = 2
3
∫ 2pi/3
θ=0
[
1− θ−sin θ
pi
]k
sin θdθ.
Note: If (u, v) ∈ IP, then the common neighbor of u and v
is already a victim of beacon collisions between u and v.
Proof. We first look at the case (u, v) ∈ VP. By the
definition of VP, u and v are physical neighbors but neither u
nor v has any child. PV (u, v) is the expected probability of w
appearing in the neighborhood of either u or v. Based on the
assumption that the nodes are uniformly distributed, and
the inclusion-exclusion principle, the expected probability is
(2pir2 − E[J(u, v)])/A. Now, invoking Lemma 1 with the
condition d(u, v) ≤ r, we have
PV (u, v) =
2pir2 − E[J(u, v)]
A
=
(
1 +
3
√
3
4pi
)
p.
We now look at the cases (u, v) ∈ HP and (u, v) ∈ UP
together, because they are closely related. Let us define the
following events which we will use later:
W : the new node w becomes a neighbor of u and v;
X: r < d(u, v) ≤ 2r;
Y : u and v do not share any neighbor;
ζi: v’s ith neighbor is a child of either u or v.
By the definition of HP, u and v are not physical neigh-
bors but have physical neighbors in common, although these
physical neighbors are neither u’s nor v’s children. PH(u, v)
is the expected probability of w becoming u’s and v’s com-
mon neighbor, which is
Pr[W |Y¯ ∧
k⋂
i=1
ζ¯i, X],
but since the event W is independent of ζi,
PH(u, v) = Pr[W |Y¯ ∧
k⋂
i=1
ζ¯i,X] = Pr[W |Y¯ , X]. (2)
By the definition of UP, u and v are not physical neighbors
and have no common neighbors. PU (u, v) is the expected
probability of w becoming a new common neighbor of u and
v. Using the same argument as before,
PU (u, v) = Pr[W |Y,X]. (3)
It is easy to see that
Pr[W |X] = Pr[W |Y,X] Pr[Y |X]+Pr[W |Y¯ ,X] Pr[Y¯ |X] (4)
In (4), we can find Pr[W |X] by simply invoking Lemma 1
with the condition r < d(u, v) ≤ 2r
Pr[W |X] = E[J(u, v)]
A
=
√
3
4pi
p. (5)
Also, in (4), we can find Pr[Y |X] as follows. If we denote
the area of the hatched region in Fig. 5 as J(u, v), and if
v has k neighbors, the probability of all v’s k neighbor not
falling in the hatched region is [1 − J(u, v)/(pir2)]k. From
the Appendix, J(u, v) = r2(θ− sin(θ)), where 0 ≤ θ ≤ 2pi/3
is defined as shown in Fig. 5. To get the expectation of
[1−J(u, v)/(pir2)]k, we need to integrate the expression over
[0, 2pi/3]:
Pr[Y |X] = E[{1− r2(θ − sin θ)/(pir2)}k]
=
∫ 2pi/3
θ=0
[
1− θ − sin θ
pi
]k
g(θ)dθ,
where g(θ) is the probability density function (p.d.f.) of θ.
From the Appendix, g(θ) = 2
3
sin θ, hence
Pr[Y |X] = 2
3
∫ 2pi/3
θ=0
[
1− θ − sin θ
pi
]k
sin θdθ, (6)
which is solely a function of k. For simplicity, we denote the
RHS of (6) as ϕ(k), i.e., Pr[Y |X] = ϕ(k). Fig. 6 shows that
ϕ(k) is very close to simulation results.
Figure 5: Deriving Pr[Y |X].
Subsituting (5) and (6) back into (4), we have
Pr[W |Y,X] = [1− ϕ(k)−1] Pr[W |Y¯ ,X] +
√
3
4pi
ϕ(k)−1p. (7)
Using (7), if we can find Pr[W |Y¯ , X], then we can find
Pr[W |Y,X]. But finding Pr[W |Y¯ ,X] analytically is non-
trivial. We resort to an experimental approach. From our
experiments (detail in Appendix), we found that Pr[W |Y¯ ,X]
is approximately linear with p, and if we denote the linear
constant by γ, then
γ ≈ 0.17. (8)
also the slots its neighbors occupy/follow. The vari-
ants are algorithms D2VHU, D2HU and D2U. D2VHU
and D2HU are extension of D1VHU and D1HU re-
spectively, with the benefit of the network reaching
steady state ealier. D2U rejects both VPs and HPs,
and in this sense it implements the slot reuse strategy
proposed by prior work [3, 4] in the literature. All
algorithms in this class accept slot reuse by UPs im-
plicitly. UPs by definition cannot be detected by any
local/distributed algorithms.
• Centralized algorithms that detect all IPs, VPs,
HPs and UPs: With complete topology information,
a ZC can detect all pair types. The variants are al-
gorithms CVHU, CHU, CU and C. From a practical
viewpoint, these algorithms are much less scalable and
much less energy-efficient than the distributed vari-
ants. We only mention them here for comparison with
the distributed variants later.
In summary, our core algorithm is ZigBee-compliant because
it can be executed while the ZigBee itself is being formed. It
is distributed because only local information is required. It
is risk-aware, because it can calculate the risk of slot reuse
by using Proposition 1. It is probabilistic, because it ac-
cepts/rejects slot reuse at a probability exactly dictated by
the calculated risk.
In the next section, simulation will show that in terms
of packet delivery latency, (1) our core algorithm is better
than Tseng et al.’s DSA, and (2) that the slot reuse rule
represented by our core algorithm is better than the slot
reuse rules espoused by the specification and prior work in
the literature.
Table 3: Variations of the core algorithm D1VHU
Distributed 1 Distributed 2 Centralized
VP X × X × × X × × ×
HP • • X X × X X × ×
UP • • • • • X X X ×
Name D1VHUD1HU D2VHUD2HUD2UCVHU CHU CU C
Legend:
X accepts slot reuse at probability 1− P (u, v)
× rejects slot reuse
• accepts implicitly
The algorithms are labeled according to whether they are dis-
tributed or centralized, and what pair type they accept for slot
reuse. For example, the distributed algorithm that detects only
IPs and VPs, and accepts slot reuse for VPs (probabilistically),
HPs (implicitly) and UPs (implicitly) is labeled D1VHU. Note
that all algorithms reject slot reuse by IPs.
5. SIMULATION RESULTS
We have two objectives for our simulations: (1) to com-
pare our algorithms with Tseng et al.’s DSA in terms of
average maximum latency and average latency; and (2) to
compare the algorithms in Table 3 in terms of average la-
tency and number of associated nodes – the latter compar-
ison is interesting because it tells us if the slot reuse rule
represented by our core algorithm is better than the slot
reuse rules espoused by the specification and prior work in
the literature.
To compare with Tseng et al.’s DSA, we use Tseng et al.’s
simulation settings and metrics. The simulation settings are
summarized on top of each sub-figure in Fig. 8. The metrics
used by Tseng et al. is average maximum latency, i.e., if
for the ith simulation run, the maximum latency is Li, then
the average maximum latency is
∑
i Li/max(i). Addition-
ally, we also use the more conventional metric of average
latency, which is defined as the average of the average laten-
cies of all simulation runs. As evident in Fig. 8, there are
five performance categories:
1. D1VHU, D2VHU and CVHU perform similarly and
are the best performers. The fact that CVHU perform
similarly to the other distributed algorithms mean that
there is no advantage in being able to detect all pair
types. Therefore in practice, either D1VHU or D2VHU
is recommended with the following trade-off in mind:
D1VHU requires less transmission by each ZR/ZED
but require more time to reach steady state, whereas
D2VHU has the opposite requirement.
2. D1HU, D2HU and CHU perform similarly and are
quite worse than the previous category. This obser-
vation confirms that allowing slot reuse by VPs judi-
ciously, as the previous category does, reduces latency.
3. D2U and CU perform similarly and are much worse
than the previous category. This observation confirms
that allowing slot reuse by HPs judiciously, as the pre-
vious category does, reduces latency.
4. Tseng et al.’s DSA is quite worse than the previous cat-
egory. DSA does not allow slot reuse between nodes
at most 2r apart. This observation confirms that al-
lowing slot reuse by UPs judiciously, as the previous
category does, reduces latency. Our numbers for DSA
are consistent with the numbers published by Tseng et
al. in their original paper [4].
5. Algorithm C is the worst performer since it does not
allow any slot reuse at all. This serves as the bench-
mark for the worst performers in beacon scheduling
algorithms.
We also see that both metrics average maximum latency and
average latency give the same comparison. In fact, if not to
compare with Tseng et al.’s DSA, average latency should be
preferred because it gives lower standard deviations.
In the following simulations, we compare D2VHU, D2HU,
D2U and C (each representing its own class) with Tseng et
al.’s DSA in terms of average latency and number of as-
sociated devices. Fig. 9(a)(b)(c) show that regardless of
the ‘shape’ of the tree (the ‘shape’ is adjusted by config-
uring the ZigBee parameters Lm, Rm and Cm), D2VHU,
D2HU and D2U consistently outperform DSA. Algorithm C
remains much worse than the rest.
In terms of number of associated devices, DSA can ad-
mit the most devices in its tree. Due its aggressive slot-
reuse policy, D2VHU can accommodate the least number
of devices, because for example, when a VP uses the same
beacon slot, the pair can no longer admit any child. The
difference between D2VHU and DSA is marginal for ‘flat’
trees (Fig. 9(d)). The difference becomes larger as the tree
becomes ‘taller’ (Fig. 9(e)(f)). Note though if we do not re-
strict Lm, D2VHU can admit virtually as many devices as
