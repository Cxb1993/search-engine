  2
行政院國家科學委員會專題研究計畫成果報告 
 
以粒子群法為基礎之新型高階混合式演化法的發展 
與其在結構最佳化設計問題之應用(II) 
Development of New PSO-based Hybrid Searching Algorithms 
and Their Applications in Structural Optimization (II) 
計畫編號：NSC 97－2211－E－008－049 
執行期限：97 年 08 月 01 日至 98 年 07 月 31 日 
主持人：莊德興   國立中央大學土木系!
計畫參與人員：林大為   國立中央大學土木所 
 
一、中文摘要 
本計畫主要是發展以粒子群法(Particle 
Swarm Optimization method, PSO)結合差分
演化法(Differential Evolution,DE)之高階啟
發式混合演化法，稱為 PSODE，期可有效
地搜尋複雜、多極值之非線性最佳化問題的
全域解，並應用於求解結構最佳化設計問
題。PSODE 的搜尋策略是將群體分成兩個
子族群，分別以 PSO 和 DE 進行演化，並透
過兩個子族群間訊息的傳遞與交換，來達到
維持粒子群多樣性的目的。研究中，另考慮
群體可能發生搜尋停滯的現象，故導入模擬
退火法 SA 來改善，簡稱為 PSODE-SA。經
實際算例演算發現 PSODE 可應用於連續、
離散和混合變數之結構最佳化設計問題，與
文獻其他演化法比較，可發現 PSODE-SA
所得之近似最佳解不比文獻結果差或更
好，穩定性亦佳。 
 
關鍵詞：混合型搜尋法、粒子群法、差分演
化法，模擬退火法、結構最佳化設計、連續
變數、離散變數、混合變數 
 
Abstract 
     In this research, a novel PSO-based 
(particle swarm optimization-based) hybrid 
meta-heuristic algorithm, PSODE, is proposed 
for finding the global optimum solution of 
complex and highly multimodal systems, with 
particular emphasis on structural optimization. 
In PSODE, the particles in the swarm will be 
divided into two groups first. The particles in 
the two groups will evolve new positions for 
the particles by using PSO and DE, 
respectively. Then, the particles in the two 
groups will share information together such 
that the diversity of the swarm can be 
maintained. For preventing stagnation of each 
particle, simulated annealing (SA) method 
was also considered in the algorithms. The 
proposed hybrid algorithm, PSODE-SA, is 
applied to solve for realistic problems of 
structural optimization that are characterized 
by non-linearity, non-convexity and by 
continuous, discrete design variables. 
Keywords: Hybrid metaheuristic algorithm, 
PSO, DE, SA, structural optimization, 
continuous variables, discrete variables, mixed 
variables. 
 
二、緣由與目的 
 
為加強全域搜尋的能力，近年來許多專
家、學者致力於研究具有仿生物現象及思
  4
值最佳的解，這個解稱之為自身最佳解 pb，
另一個極值則是全部粒子目前所找到適應
值最佳的解，稱為整體最佳解 gb。假設粒子
群包含 m 個粒子，則在搜尋過程中，粒子 i
的速度及位置乃根據下列二式進行更新[6]： 
 
i i i i g i
k 1 k 1 1 k k 2 2 k kv v c r (p x ) c r (p x )+ = + − + −  (1) 
i i i
k 1 k k 1x x v+ += +  (2) 
 
式中 k 為迭代次數， ikv 及 ikx 分別為粒子 i
於第 k 代之速度與位置，而 ikp 則為粒子 i
於第 k 代之自身最佳解， gkp 為第 k 代之整
體最佳解，更新後粒子 i 於第 k+1 代之速
度為與位置分別為 ik+1v 和 ik+1x ；r1、r2 為介
於 0~1 之間的均勻亂數，c1 和 c2 稱為學
習因子(Acceleration Constants)，Eberhart
和 Kennedy[6]建議將 c1、c2 皆取值為 2。 
Shi 和 Eberhart 於 1998年提出慣性權重
(Inertia Weight)的想法[9]，主要是針對式(1)
中的 ikv 給予一個慣性權重 w，藉以考量粒子
本身對搜尋最佳解的貢獻，即。 
 
i i i i g i
k 1 k 1 1 k k 2 2 k kv wv c r (p x ) c r (p x )+ = + − + −  (3) 
 
但是，式(3)中的慣性權重過大時，常有過度
修正(Overshooting)之現象產生，以致於無法
收歛至問題之最佳解。雖然採用較小的慣性
權重，有助於減少過度修正現象之發生機
率，卻無法保證所搜尋到的解為問題之最佳
解。為了解決不易選取合理之常數慣性權重
的困難，Shi 和 Eberhart[10]又提出將慣性權
重線性遞減的處理之方法，即 
 
max min
max
max
w ww w k
k
−= − ×  (4) 
式中 wmax 為使用者設定的慣性權重上限
值，wmin 為慣性權重下限值，一般建議 w 之
範圍為 0.8~1.4。 
雖然，慣性權重以線性遞減方式可以使
得初始搜尋階段擁有較高的慣性權重，藉以
保持初期全域搜尋的靈活性，並隨著演化過
程逐漸調降慣性權重，進而轉入局部搜尋之
動作，加強粒子之局部搜尋能力。但使用線
性遞減易造成搜尋初期下降速率過快，以及
後期搜尋階段收斂速率過慢之現象，導致需
花費較多的迭代次數才有機會搜尋到問題
之最佳解。 
為 了 克 服 上 述 問 題 ， Fourie 和
Groenwold[11]提出將慣性權重及最大速度
限制予以動態遞減方式處理，亦即當整體最
佳解經過連續 h 世代後仍無法改善時，則進
行動態遞減處理，如下試所示： 
 
k 1 k g g
k k-hmax max
k 1 k
w αw
,     if (p ) (p )
v βv
φ φ+
+
=⎧ ≥⎨ =⎩  (5) 
 
式中α和β分別為慣性權重及最大速度之動
態調整係數，通常建議取值在 0~1 之間。
g
k(p )φ 和 gk-h(p )φ 分別為第 k 代和第 k−h 代之整
體最佳解 gb 的適應值。初始最大速度 max0v 定
義如下： 
 
max
ub lbv γ(x x )= −  (6) 
 
式中 xub 及 xlb 分別為設計變數之上、下限，
γ則是決定搜尋空間中最大速度移動距離之
參數，本研究採用γ=1。 
上述作法之優點在於：僅需依據搜尋過
程中整體最佳解 gb 之適應值加以判斷是否
須調降慣性權重及最大速度，如此作法除了
可節省結構分析次數，更能提昇粒子之搜尋
效率。故本文在慣性權重及最大速度，即採
用此動態遞減策略處理，而α和β則採用
Fourie 和 Groenwold [11]的建議值，即
α=0.99、β=0.95。 
 
3-2  DE 演算法 
    Price 等人(1995 )提出之DE 演算法是
一種隨機的直接搜尋演算法，從某一隨機產
生的初始群體開始，按照一定的操作規則，
如選擇、交配、突變等等，不斷地迭代計算，
並根據每一個個體的適應度值，保留優良個
體，淘汰劣質個體，引導搜索過程向最佳解
逼近。 
DE的突變運算子是以隨機方式產生一
個向量 kiv
G (參考圖2)：  
    1 2 3( )
k k k k
i r r rv x F x x= + −G G G G      (7) 
式中F為加權因子，一般在0~2之間選取，
  6
降溫比例 Tred以及最終溫度 Tend，使其經過反覆
的求解過程，一直到達熱平衡狀態為止。SA 之
實際操作過程如下： 
1.  決定 Tstart、Tred 及 Tend，並輸入系統相關
資料。 
2.  隨機選取一初始可行解 x0，並計算其適
應值φ0，而目前的最佳解則為 x*=x0。 
3. 設定起始溫度 Tj，j=0，也就是 T0=Tstart，
進行以下迴圈過程 
(a)  在 x0 鄰近區域進行隨機擾動產生一
鄰近可行解 x1，並計算其適應值φ1。 
(b)  計算Δφ=φ1−φ0。 
(c)  若Δφ≤0，令 x*=x1，φ*=φ1。 
(d)  若Δφ>0，則產生均勻亂數 R，並根
據式 (10)計算波茲曼機率 P。若
P≥R，則令 x*=x1，φ∗=φ1；若 P<R，
則 x*=x0。 
4. 調降溫度 Tj+1=TredTj，並重複步驟 3 直到
滿足下列終止條件：若 Tj≤Tend，則停止
搜尋。 
3-6  PSODE—SA 混合搜尋程序 
由於整體最佳解 gbest是 PSODE 搜尋過
程中主要的引導機制，一旦整體最佳解落入
局部最佳解時，將會造成搜尋效益不彰。為
避免整體最佳解提前收歛於局部最佳解，本
文利用 SA 之跳躍機制結合 PSODE 之整體
最佳解進行局部搜尋，除了可以增加整體最
佳解跳脫至下一個最佳解之機會，更能提升
PSODE 之全域搜尋之能力。 
SA 的使用時機則為：若 gk p 之適應值經
過連續 h 世代，均不再改善，此時針對該世
代之 gbest以 SA 進行局部搜尋。首先，根據
下式選取 gbest的一個鄰近解 gkˆ p ： 
g g g
1 k k 2 ub k
g g g
1 k k 2 k lb
ˆ  if  R 0.5  ,  p p R (x p )
ˆ if  R 0.5  ,  p p R (p x )
⎧ > = + −⎪⎨ ≤ = − −⎪⎩
 (11) 
若 gkˆ p 的適應值較 gk p 來得好，則以 gkpˆ 取代
g
k p 。反之，若 gkˆ p 之適應值比 gk p 大，則使用
SA 中的波茲曼機率，決定是否接受 gkpˆ 進行
後續之搜尋動作。重覆上述作法直到 SA 中
的溫度達到最終溫度後，即可終止此一世代
於整體最佳解之鄰近區域進行局部搜尋之
動作。而此一經由 SA 局部搜尋更新後的整
體最佳解，即為 PSODE 下一世代的整體最
佳解。如此反覆的迭代搜尋過程，直到達到
最大迭代次數。 
 
四、結果與討論 
4-1 十桿桁架 
 圖 2 所示之十桿桁架的桿件截面必須
取自 32 個離散斷面集合，除了位移限制之
外，並根據 AISC 容許應力設計法建立桿件
的應力限制與長細比限制[16]。 
PSODE-SA 設計結果與文獻的比較整
理如表 1 所示，其中 PSO-SA[18]的速度更
新公式是採用原始 PSO 的公式。由表 2 之
結果顯示，本文方法與 PSO-SA 都可以找到
相同的最佳解，而且都比文獻[16]好，而
PSODE-SA 找到最佳解的代數則較 PSO-SA
少，但兩者找到最佳解的機率約略相同。 
  
 
 
 
 
 
 
 
 
圖 2、十桿桁架 
 
表 1、十桿桁架設計結果與文獻比較 
演算法 結構重
(lb) 
{ }jgmax  
Rounding 16304.6 −1.363x10−2
SDR, α=0.9  14806.5 −9.747x10−3文獻 
[16] 
SDR, α=1.0 14639.4 7.205x10−2
PSO−SA [18] 14802.1 −3.852x10−2
PSODE-SA 14802.1 −3.852x10−2
 
(1) (2) 
(3) (4) 
(6) (7) 
(8) 
(5) 
(9) 
(10) 
13 
4 
5 
6 
360 in. 360 in. 
36
0 
in
. 
100 kips 100 kips
  8
解修正初始移動方向，並逐步降低最差解的
影響，不僅有助於提高收斂速度，亦可增加
求解穩定性。 
 本計畫已發表一本技術報告和一篇碩
士論文，並正撰稿投稿期刊中。 
 
六、參考文獻 
1. Rajeev, S. and Krishnamoorthy, C.S., 
(1997) “Genetic Algorithms-based 
Methodologies for Design Optimization of 
Trusses,” Journal of Structural 
Engineering, ASCE, Vol. 123(3), pp. 
350-358. 
2. Yang, J. and Soh, C.K., (1997) “Structural 
Optimization by Genetic Algorithms with 
Tournament Selection,” Journal of 
Computing in Civil Engineering, ASCE, 
Vol. 11(3), pp. 195-200. 
3. Eberhart, R.C. and Kennedy, J., (1995) “A 
New Optimizer Using Particle Swarm 
Theory,” Proceedings of the Sixth 
International Symposium on Micro 
Machine and Human Science, pp. 39-43, 
Nagoya, Japan, IEEE Service Center, 
Piscataway, NJ. 
4. Eberhart, R.C. and Shi, Y., (2001) 
“Particle Swarm Optimization: 
Developments, Applications and 
Resources,” Proceedings of the IEEE 
International Conference on Evolutionary 
Computation, pp. 81-86. 
5. 赫然、王永吉、王青、周津慧、胡陳勇，
(2005) ”一種改進的自適應逃逸微粒群
算法及實驗分析”，軟件學報，第 16 卷，
第 12 期，pp.2036-2044。 
6. Xie, X.F., Zhang, W.J. and Yang, Z.L., 
(2002) “A Dissipative Particle Swarm 
Optimization,” Proceedings of the IEEE 
Congress on Evolututionary Computation, 
Vol. 2, pp. 1456-1461. 
7. Ratnaweera, A., Halgamuge, S.K. and 
Watson, H.C., (2004) “Self-Organizing 
Hierarchical Particle Swarm Optimizer 
with Time-Varying Acceleration 
Coefficients,” IEEE Transations on 
Evolutionary Computation, Vol. 8(3), pp. 
240-255. 
8. Løvbjerg, M., Rasmussen, T.K. and 
Krink, T., (2001) “Hybrid Particle Swarm 
Optimizer with Breeding and 
Subpopulations,” In Spector, L., E. 
Goodman, A. Wu, W.B. Langdon, H.-M. 
Voigt, M. Gen, S. Sen, M. Dorigo, S. 
Pezeshk, M. Garzon, and E. Burke, 
editors. Proceedings. of the Genetic and 
Evolutionary Computation Conference, 
July 7-11, 2001, San Francisco, CA, USA, 
pp. 469-476. 
9. Shi, Y. and Eberhart, R.C., (1998) “A 
Modified Particle Swarm Optimizer,” 
Proceedings of the IEEE International 
Conference on Evolutionary 
Computation, Anchorage, AK, USA, 
May 4-9, 1998, pp. 69-73. 
10. Shi, Y. and Eberhart, R.C., (1998) 
“Parameter Selection in Particle Swarm 
Optimization,” Evolutionary 
Programming VII, Springer, Berlin, pp. 
591-600. 
11. Fourie, R.C. and Groenwold, A.A., (2002) 
“The Particle Swarm Optimization 
Algorithm in Size and Shape 
Optimization,” Structural and 
Multidiscipline Optimization, Vol. 23(4), 
pp. 259-267.  
12. Metropolis, N., Rosenbluth, A.W., Teller, 
A.H. and Teller, E., (1953) “Equation of 
State Calculation by Fast Computing 
Machines,” Journal of Chemical Physics, 
Vol. 21(6), pp. 1087-1092. 
13. Kirkpatrick, S., Gelatt, C.D., and Vecchi, 
