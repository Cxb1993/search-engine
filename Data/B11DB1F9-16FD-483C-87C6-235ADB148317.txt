(a) (b) (c) (d) (e) (f)
Figure 1: The proposed physically-motivated blendshape technique. (a) Source shape. (b) Target shape.
(c-f) Interpolating input shapes while interacting with an obstacle.
(a) (b) (c) (d)
Figure 2: Linear interpolation versus our technique. (a) Source shape. (b) Target shape. (c) Linearly
interpolated result with α = 0.5. (d) Interpolated with the proposed method with the same α.
otherwise there will be too many key poses need to be sculpted to accommodate all possible deformations
and the number of key poses is typically limited. The later requires extra manual efforts or simulations to
produce visually-pleasant results. For example, Borshukov [8] demonstrated both possibilities. Our shape
interpolation method is based on mass-spring system and it is very straight forward to be associated with
physical interaction. It can be easily carried out by applying external forces or additional constraints on the
interpolation.
Our interpolation method is well suited for natural deformations due to the physically-motivated under-
lying mass-spring system. Simulating the equilibrium of the vertex positions is the main computational cost
of the technique. The core computation is solving a sparse linear system, which can be accelerated with
current graphics processor. We demonstrate our shape interpolation technique with a wide variety of shapes
that exhibit complicated geometry and deformations.
Contributions. There are two substantial contributions in our work:
1. A solution which creates natural looking shape interpolation results based on the mass-spring sys-
tems. The proposed method requires no geometric analysis, articulated skeleton, or any manual
intervention. Since it does not require a skeleton to drive the deformation, and thus is not limited to
articulated shapes.
2. Physical interaction can be achieved under the same framework with additional collision detection
and handling.
2 Related Work
Our technique leverages a significant body of works for interpolating between shapes in two or three di-
mensions, mass-spring systems, and rest length animation.
Shape Interpolation and Deformation. Shape interpolation has been widely used for animating geometric
deformation. Linear vertex interpolation (the “blendshapes” technique) is the most common method for
shape interpolation. However, it suffers from artifacts such as causing the moving parts (e.g. arms and legs)
to shrink and collapse. Shape interpolation can also be achieved using an articulated skeleton. The skeleton
2
G0 G1 G2
(0.70, 0.10, 0.20) (0.33, 0.33, 0.33) (0.12, 0.75, 0.12)
Figure 3: Blending between multiple shapes. The top row shows three source shapes and the bottom row
shows blended results with corresponding weights shown as (w0, w1, w2).
interpolated rest lengths.
A mass-spring systemM = 〈V,S〉 is defined by a collection of vertices V = {vi|i = 1...nv} connected
by springs S = {sq|q = 1...ns}. Each spring sq ∈ S connects two vertices veq0 and veq1 , where eq0 =
e(sq, 0) and eq1 = e(sq, 1) and function e returns the indices of spring sq’s two vertices. We enforce
1 ≤ eq0 < eq1 ≤ nv . In addition, sq is characterized by a rest length rq = r(sq) and spring constant
kq = k(sq), where functions r and k return the rest length and spring constant of spring sq , respectively.
To perform shape interpolation, we first build two consistent mass-spring systemsM0 = 〈V0,S0〉 and
M1 = 〈V1,S1〉 from two meshes G0 and G1 which are vertex-wise correspondence and have the same
topology. Inherently the two consistent mass-spring systems have the same structure.
3.1 Solving Intermediate Shapes
The two mass-spring systems are initially set to be in their equilibrium, therefore r0q =‖ v0eq0 − v0eq1 ‖,
and r1q can be computed similarly. For each α ∈ [0, 1], the interpolated result from the input shapes is the
equilibrium state of a new mass-spring system M¯ = 〈V¯, S¯〉, where for each spring,
r¯q = (1− α)r0q + αr1q . (1)
4
by assigning Dirichlet boundary conditions to the global stiffness matrix, i.e., by replacing the block of
the global stiffness matrix corresponding to boundary vertices with an identity matrix. The entries of the
boundary vertices in f are replaced by zeros to enforce that the corresponding vertices do not move. A
straightforward (and automatic) method to assign the boundary conditions is to find vertices which remain
static between the source and target shapes. However, this is unlikely to apply to general input meshes.
Alternatively, certain vertices on the surface can be manually marked as boundary conditions. During the
interpolation, the positions of the marked vertices are then simply interpolated linearly. However, we found
that this method often does not yield visually pleasing results, because these marked vertices still follow a
linear trajectory during interpolation.
A more general method which allows all the surface vertices to move freely is to use an auxiliary object
as an anchor, whose vertex positions act as the boundary conditions. For example, placing a rectangle
around the center of mass of the object would keep this region fixed through the pose interpolation. We use
the following procedure to add an anchor:
1. Select an anchor position inside the source shape (Figure 4(a)).
2. When building the topology of the mass-spring system (as in Section 3), we connect additional
springs to the vertices of the shape and the anchor. All the springs belonging to the anchor are set as
hard constraints by setting a very large spring constant. This enforces rigidity during the relaxation
detailed in the next step. In our examples, we use a rectangular plane containing six springs as an
anchor.
3. The rest lengths of the internal springs that connect surface vertices to the anchor are computed from
the source shape based on the user-assigned anchor positions. However, The rest lengths of these
surface-anchor springs in the target shape still remains unknown. We have to determine the location
of the anchor first. One possible solution is to reverse the roles of anchor and shape, i.e., we set all
the vertices in the target shape as the boundary conditions, and copy the rest lengths of the springs
connecting the anchor to the source, then determine the positions of anchor vertices within the target
shape by solving the equilibrium.
4. Once the locations of the anchors are known, we can determine an optimal rigid transformation
T = {R|t} between the anchors of the source and target shapes such that p1i = Rp0i + t, where p0i
and p1i are the positions of the source and target anchors’ vertices, respectively.
5. For each step during the shape interpolation, we move the anchor according to the linearly-interpolated
rigid transformation T ′ = {q(I,R, α)|αt}, where q is the function that interpolates the identity ma-
trix I and the rotation matrix R with a weight α using quaternions [28]. We subsequently fix the
interpolated anchor vertices as the boundary conditions and compute the equilibrium state of the
mass-spring system. To improve numerical stability, we solve for the equilibrium in the local coordi-
nate frame of the (initial) anchor. Afterwards, we reapply the rigid transformation to both the anchor
and the shape. This is illustrated in Figure 4.
3.4 Structure, Bending and Internal Springs
We formulate the mass-spring system as a combination of structure springs and bending springs (similar to
[10]). The structure springs model the elastic properties of the object’s surface, connecting neighboring ver-
tices. The bending springs define the bending and flexural properties of the material, and connect a vertex
to secondary neighboring vertices (i.e., at a distance of 2). These bending springs help maintain the object’s
resting shape and preserve surface curvature. In addition, we may add springs, or even extra vertices, inside
the shape to help preserve volume and prevent the shape from collapsing on itself. Otherwise a large sur-
face tends to be crumpled due to insufficient numerical precision. Constrained Delaunay tetrahedralization
[29] is a good method for determining internal springs. To prevent springs with long rest lengths we can
perform mesh refinement by inserting new vertices. Those vertices have to be added to all the input shapes
correspondingly. Certain additional vertices that are inside the input shapes can be assigned as an anchor as
described in Section 3.3.
6
Figure 5: Physical interactions. The top row shows the original interpolation. The bottom row shows the
same interpolation while a vertex is pulled away from the face. Parts of the mesh boundary are fixed as
boundary conditions.
Shape nv ns tCPU tGPU
Man 2.2k 21.6k 2.23 3.62
Face 8.1k 65.1k 40.11 3.67
Cat 7.3k 81.7k 67.58 13.67
Horse 8.5k 96.1k 81.36 15.95
Hand 18.6k 150.4k 153.99 26.28
Table 1: Statistics on the size of the input shapes and average running time per interpolation step (in sec-
onds). There are 36 steps for the interpolation between the source and target for all the experiments. nv:
number of vertices (including internal and anchor vertices), ns: number of springs, tCPU : running time
with the PARDISO solver, tGPU : running time with the Cusp solver.
method can reproduce visually pleasant motions from just a few example shapes (e.g. the opening and clos-
ing of the hand). The proposed method is easier to apply and also provides physical interaction capabilities.
However its computational cost is higher than as-rigid-as possible methods.
Implementation. A sparse matrix direct solver is required to solve Eq. (3). We have adopted both PAR-
DISO, a CPU-based solver [27, 26], and Cusp, a GPU-based solver [6]. A good mass-spring system frame-
work can be found at [3]. We also use SOLID [32] for collision detection. Table 1 lists the statistics of each
shape interpolation. We select a variety of 3D shapes, with the number of vertices range from 2k to 18k.
All the results are generated on a desktop computer with a 2.66GHz Intel Core 2 Quad CPU, an NVIDIA
Quadro FX 580 GPU, and 3.0GB main memory. The actual execution time for each Newton–Raphson step
is to a large extent determined by the complexity of the mass-spring system.
Limitations. A mass-spring system may have more than one equilibrium. This leads to element inversion
problem. We found that the element inversion problem is more likely to occur if the input shapes contains
folds due to self-intersecting triangles.
8
[12] Kevin G. Der, Robert W. Sumner, and Jovan Popovic´. Inverse kinematics for reduced deformable
models. ACM Transactions on Graphics, 25(3):1174–1179, 2006. (SIGGRAPH 2006 Conference
Proceedings).
[13] Mathieu Desbrun, Peter Schro¨der, and Alan Barr. Interactive animation of structured deformable
objects. In Proceedings of the Graphics Interface 1999, pages 1–8, 1999.
[14] Takeo Igarashi, Tomer Moscovich, and John F. Hughes. As-rigid-as-possible shape manipulation.
ACM Transactions on Graphics, 24(3):1134–1141, 2005. (SIGGRAPH 2005 Conference Proceed-
ings).
[15] Martin Kilian, Niloy J. Mitra, and Helmut Pottmann. Geometric modeling in shape space. ACM
Transactions on Graphics, 26(3):64:1–64:8, 2007. (SIGGRAPH 2007 Conference Proceedings).
[16] Ryo Kondo, Takashi Kanai, and Ken-ichi Anjyo. Directable animation of elastic objects. In Proceed-
ings of the 2005 ACM SIGGRAPH/Eurographics Symposium on Computer Animation, pages 127–134,
2005.
[17] Yuencheng Lee, Demetri Terzopoulos, and Keith Waters. Realistic modeling for facial animation. In
ACM SIGGRAPH 1995 Conference Proceedings, pages 55–62, 1995.
[18] J. P. Lewis and Ken-ichi Anjyo. Direct manipulation blendshapes. IEEE Computer Graphics and
Applications, 30(4):42–50, 2010.
[19] J. P. Lewis, Matt Cordner, and Nickson Fong. Pose space deformation: a unified approach to shape
interpolation and skeleton-driven deformation. In ACM SIGGRAPH 2000 Conference Proceedings,
pages 165–172, 2000.
[20] Alan Liu, Frank Tendick, Kevin Cleary, and Christoph Kaufmann. A survey of surgical simula-
tion: applications, technology, and education. Presence: Teleoperators and Virtual Environments,
12(6):599–614, 2003.
[21] Gavin S. P. Miller. The motion dynamics of snakes and worms. ACM SIGGRAPH Computer Graphics,
22(4):169–173, 1988. (SIGGRAPH 1988 Conference Proceedings).
[22] L. P. Nedel and D. Thalmann. Real time muscle deformations using mass-spring systems. In Proceed-
ings of the Computer Graphics International 1998, pages 156–165, 1998.
[23] Tiberiu Popa, Dan Julius, and Alla Sheffer. Material-aware mesh deformations. In Proceedings of the
2006 IEEE International Conference on Shape Modeling and Applications, page 22, 2006.
[24] Marc H. Raibert and Jessica K. Hodgins. Animation of dynamic legged locomotion. ACM SIGGRAPH
Computer Graphics, 25(4):349–358, 1991. (SIGGRAPH 1991 Conference Proceedings).
[25] Damien Rohmer, Stefanie Hahmann, and Marie-Paule Cani. Exact volume preserving skinning with
shape control. In Proceedings of the 2009 ACM SIGGRAPH/Eurographics Symposium on Computer
Animation, pages 83–92, 2009.
[26] Olaf Schenk, Matthias Bollhofer, and Rudolf A. Roemer. On large-scale diagonalization techniques
for the Anderson model of localization. SIAM Journal on Scientific Computing, 28(3):963–983, 2006.
[27] Olaf Schenk, Andreas Wa¨chter, and Michael Hagemann. Matching-based preprocessing algorithms to
the solution of saddle-point problems in large-scale nonconvex interior-point optimization. In Journal
of Computational Optimization and Applications, volume 36, pages 321–341, 2007.
[28] Ken Shoemake. Animating rotation with quaternion curves. ACM SIGGRAPH Computer Graphics,
19(3):245–254, 1985. (SIGGRAPH 1985 Conference Proceedings).
[29] Hang Si and Klaus Ga¨rtner. Meshing piecewise linear complexes by constrained delaunay tetrahedral-
izations. In Proceedings of the 14th International Meshing Roundtable, pages 147–163, 2005.
10
Figure 6: Results of shape interpolation using the proposed method. The input shapes are blue, while
interpolated shapes are yellow. Table 1 lists the number of vertices, number of springs, and timings for each
shape. The set of hand shapes in the second row is identical to the one used in Figure 1.
12
國科會補助計畫衍生研發成果推廣資料表
日期:2011/06/14
國科會補助計畫
計畫名稱: 角色動畫與流體動畫之風格化非擬真繪圖之研究
計畫主持人: 陳炳宇
計畫編號: 98-2221-E-002-140-MY2 學門領域: 計算機圖學
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
本研究之部份成果已獲邀於日本情報處理學會所主辦的 IPSJ SIGCG 132th 
Seminar 中進行發表，並榮獲 Excellent Research Presentation Award 的殊
榮。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
