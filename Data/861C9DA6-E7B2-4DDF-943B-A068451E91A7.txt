 
中 文 摘 要 ： 本三年期計畫之目的是提出一個例外處理的樣式語言，並為
物件導向語言如 Java 與 C#等開發的軟體系統，提供一個軟
體容錯與診斷的解決方案並研發相關工具。第一年整理歸納
出五個例外處理樣式，構成一個樣式語言，使得前述的物件
導向語言可依循此樣式處理例外，並達到強健度等級第一級
（錯誤報告）；第二年繼續完成三個例外處理樣式，使得前
述物件導向語言的例外處理可以達到強健度等級第二（狀態
回復）或第三級（行為回復）。第三年度計畫，則實作一個
支援 Java 語言例外處理的靜態分析工具，協助開發人員快速
分析程式碼例外處理的問題點，並以此工具診斷一個開放原
始碼軟體的例外處理。 
中文關鍵詞： 例外處理，軟體容錯與診斷，物件導向設計，設計樣式，樣
式語言 
英 文 摘 要 ： A pattern language for exception handling is proposed 
to achieve fault tolerance and enable fault-
diagnosis. Based on this pattern language, a tool has 
been developed to assist Java developers undertaking 
exception handling design and diagnosis. In first 
year, we completed five exception handling patterns 
and accordingly proposed a pattern language. The 
application of the five patterns can achieve the 
exception handling goal of error reporting. In the 
second year, we added three more exception handling 
patterns to the language, which now helps achieving 
state recovery and behavior recovery. In the third 
year, we have implemented a static analysis tool 
called Robusta to assist Java developers in analyzing 
the source of exceptions in source code. The tool has 
been applied to diagnose exception handling in an 
open source application program. 
英文關鍵詞： exception handling, software fault tolerance and 
diagnosis, object-oriented design, design patterns, 
pattern language 
 
 2 
Program 等。我們將此七個例外處理壞味道偵測與
修復的功能實作於我們的工具中。以下，3.1 小節
將介紹每個例外處理壞味道的特徵， 3.2 小節介紹
工具的安裝方法，3.3 小節介紹例外處理壞味道偵
測與修復的使用方式，3.4 小節介紹視覺化例外處
理資訊如何呈現。 
 
3.1、例外處理壞味道介紹 
 在前二年的計劃中，我們檢視了許多的程式
碼，找出了一些不好的例外處理方式，並且將其中
最常見的模式歸納出來，這七個例外處理壞味道，
我們將分述於 3.1.1~3.1.7 小節。 
3.1.1、Ignored Exception 
 特徵：開發人員在處理 Java 的受檢例外
(checked exception)時，必須要遵照 handle-or-declare 
規則[7]，亦即遇到會拋出受檢例外的副程式時，開
發人員必須用 try-catch來處理例外，或是直接將例
外宣告在函式上。開發人員很容易被這個規則困
擾，所以常常會有以下的情況發生：開發人員只記
得將會拋出受檢例外的副程式用 try-catch 區塊包
覆，留下空白的 catch 區塊而忘了實作例外處理的
程式碼。無論開發人員使用的副程式會拋出受檢或
是非受檢的例外(unchecked exception)，只要使用
try-catch語法，但是 catch區塊沒有任何的實作，我
們就稱這種程式碼包含了 Ignored Exception 的壞味
道。 
 造成的影響：因為 catch 區塊並沒有做任何例
外的處理，程序將永遠會認為現在的執行狀態是正
確的；若程序執行中發生例外，將不會有任何線索
可循，使用者也不會察覺任何異狀，最後可能會導
致資料損毀。 
 偵測規則：如果 catch 區塊裡面沒有任何的程
式碼，就判定為 Ignored Exception。 
3.1.2、Dummy Handler 
特徵：開發人員在處理 Java 受檢例外時，最
方便的方法，就是利用 Eclipse 所提供的 quick fix，
快速產生 try-catch的程式碼片段，並且將例外的堆
疊資訊直接印出來，如圖一粗體部分的程式碼片段
所示。 
 
 
這類程式碼只是單純地將例外訊息記錄起來
或是傾印到背景主控台的畫面中，此畫面僅供程式
開發人員檢查錯誤時使用，末端使用者無法知悉例
外的發生與相關資訊，我們稱這種程式碼包含了
Dummy Handler 的壞味道。 
造成的影響：這樣的程式碼看似已經處理過例
外，但是程式實際在執行時，如果發生例外而導致
程式狀態錯誤，程式將會繼續執行。使用者會在程
式錯誤的情況下繼續使用程式，可能導致資料的損
毀。 
偵測規則：檢查 catch 區塊，如果 catch 區塊
裡面只有印出例外的程式碼，而沒有將例外傳遞出
去，則判定為 Dummy Handler。 
3.1.3、Careless Cleanup 
 特徵：因為例外的發生，造成關閉資源的程式
碼無法被執行。這種程式碼及稱為有 Careless 
Cleanup 的壞味道。常見的情況有三： 
a. 將關閉串流的程式碼寫在 try區塊或是 catch 區
塊裡面。 
b. 在函式裡面呼叫會拋出例外的副程式，並且在
這個副程式後面做關閉串流的處理。 
c. 在 finally 區塊中，關閉資源的程式碼在會拋出
例外的副程式後面。 
 造成的影響：當例外發生時，釋放資源的程式
碼會被略過，造成資源的鎖定。 
 偵測規則：檢查所有實作 Closeable 介面的類
別中，close 的副程式是否在 try/catch 區塊裡被呼
叫。如果這類關閉資源的副程式在 try/catch區塊被
呼叫，則判定為 Careless Cleanup。另外，在 finally
區塊中，如果關閉資源的程式碼在其他會拋出例外
副程式後面，則此關閉資源的程式碼也會被認為是
Careless Cleanup。 
但是Closeable介面中規定 close函式一定要拋
出 IOException，而會拋出例外的程式碼不應該被放
在 finally 區塊裡面，否則 catch 區塊裡面拋出的例
外會被 finally 區塊所拋出的例外覆蓋[8]。圖二為
finally 區塊拋出的範例覆蓋 catch 區塊所拋出例外
的一種範例。當程式碼執行到第六行發生例外時，
會在第八行將例外拋出，再執行第十行的程式碼；
如第十行執行時又發生例外，則第十行所拋出的例
外會覆蓋第八行執行時拋出的例外。 
為此，我們特別設定一個壞味道檢查的例外狀
況：若 try 區塊裡面只有單純關閉資源的程式碼，
整個函式並沒有例外會拋出，則此關閉例外的程式
碼並不會被當作 Careless Cleanup。這樣一來，當關
閉資源的程式碼就被擷取成一個副程式移到 finally
區塊的時候，就不會被判斷為 Careless Cleanup 的
壞味道。 
01  public void readContent(File filePath) { 
02    File filePath = “/home/users/report.txt”; 
03    FileInputStream in = null; 
04     try { 
05         in = new FileInputStream(filePath); 
06         in.read(); 
07     } catch (IOException e) { 
08         e.printStackTrace();   
09     } finally { 
10  closeStream(in); 
11     } 
12  } 
圖一、Dummy Handler 範例程式 
 4 
3.2.1、壞味道偵測條件設定 
 開發人員可以在 Package Explorer 這個
workbench 視窗中，利用專案右鍵選單中的選項 -  
Properties，找到工具的設定畫面 Robusta Detector 
Settings，如圖六。圖六為壞味道偵測的設定頁面，
其中 Detecting Code Smell Type 裡面有六個壞味道
偵測的選項，開發人員可以針對想要檢查的壞味道
做勾選。Example Code 部分則是在開發人員勾選了
欲偵測壞味道的時候，自動顯示範例程式碼，提醒
開發人員這類壞味道可能的程式碼結構。六個例外
處理壞味道中，Dummy Handler、Over logging 以及
Careless Cleanup 除了工具預設的程式碼類型可以
被偵測，亦提供開發人員做壞味道的設定。 
 Dummy Handler 的設定畫面如圖三，開發人員
可以勾選左上方的選項，決定是否要對沒有拋出例
外的 catch 區塊做這四種類型程式碼的偵測。或是
使用者可以點選畫面右上方區塊，user defined extra 
rule 下面的 Open 按鍵，設定額外要被偵測的程式
碼類型。圖四為開發人員自訂條件的偵測畫面，會
在開發人員按下圖三中的 Open 鍵後顯示。如果開
發人員想以特定類別下所有的方法都當作壞味道
偵測，以 java.lang.String 這個類別為例子，則必須
輸入 java.lang.String.*。如果開發人員不指定類別，
僅想要偵測特定的函式名稱，以 toString 這個函式
為例子，則必須輸入*.toString。如果開發人員想偵
測特定類別的特定函式名稱，以 java.lang.String 類
別 的 函 式 toString 為 例 ， 則 須 輸 入
java.lang.String.toString。這些詳細的設定方法，都
可以在按下圖四畫面中的 HELP 按鍵後取得。 
 Over Logging 的設定畫面如圖五。開發人員核
選左邊的 Trace the exception even though it’s 
casted，表示即使例外轉型，若是重複被記錄，一
樣視為 Over Logging 的壞味道。右邊的兩個選項，
是讓開發人員選擇何種類型的 log 方式要被當作
Over Logging 的壞味道；右邊的 Open 按鍵，則是
開啟開發人員自訂 log 方式的視窗如圖四，操作方
式如前述。 
 Careless Cleanup 的設定畫面如圖七所示。左
上方的方塊被核選時，若同一類別下的方法也包含
關閉串流的程式碼，又是撰寫在 try 區塊中，則也
會被認定為符合此壞味道。右邊的 Open 按鍵按下
去的畫面如圖四所示，設定方法亦同。 
 
圖三、Dummy Handler 設定畫面 
 
 
圖四、開發人員自訂偵測條件 
 
 
圖五、Over Logging 設定畫面 
 6 
Robusta 在偵測到此一壞味道，會在關閉的程式碼
前面加上警告標籤，提示開發人員作修復。Robusta
提供了兩種修復方式：1. 快速修復，將關閉資源的
程式碼移動至 finally區塊。2. 重構，將關閉資源的
程式碼擷取成一個副程式，再移至 finally區塊。第
一種修復方式，限於關閉資源的程式碼本身不會拋
出例外時才提供。以本範例來說，Robusta 偵測到
第 54 行的程式碼會拋出例外，所以只提供第二種
修復方式，重構。Robusta 會提示使用者將關閉資
源的程式擷出成另外一個副程式，並且在裡面處理
可能拋出的例外，使之不會再拋出例外，最後再將
此一副程式移至 finally區塊。其修復後的結果，如
圖十一所示。為了讓資源可以在 finally被關閉，修
復時，要先將程式碼宣告至 try 區塊外面，再將擷
取出一個關閉資源的副程式。第 63 行這個關閉資
源的副程式不會再拋出例外，所以可以放在 finally
區塊中關閉副程式。從圖十一的範例中可以發現，
第 68 行被加上一個警告標籤，此一警告標籤為
Dummy Handler 壞味道的標籤。為了不讓關閉資源
的程式碼拋出的例外再執行期間覆蓋先拋出的例
外，所以這樣的作法是必須的。 
 
圖十、Careless Cleanup 範例程式碼 
 
 
圖十一、Careless Cleanup 重構後的範例程式碼 
 Unprotected main program 的範例程式碼如圖
十二，第 5行與第 7行的程式碼可能隱含未受檢的
例外，所以語法檢查時不會提示任何訊息。Robusta
會在 main 的前面加上警告標籤，提示開發人員修
復此一壞味道。而修復此一壞味道，Robusta 提供
一種修復方式，快速修復，將程式碼移至大的
try-catch區塊中。其修復的結果如圖十三所示。 
 
圖十二、Unprotected main program 
 
 
圖十三、Unprotected main program修復結果 
 Over Logging 的範例程式碼如圖十四所示。第
51 行的副程式會被第 39的副程式呼叫；第 39行的
副程式會被第 27的副程式呼叫；第 27 行的副程式
會被第 17行的副程式呼叫。被呼叫的三個副程式
都會拋出例外；相同的例外，IOException 會在第
22 行，第 33 行，第 58行重複地被記錄，造成 Over 
Logging 的壞味道，所以第 33 行與第 58 行會有警
告標籤。Robusta 提供了兩種修復方式：1. 快速修
復，移除此一重複的紀錄。2. 重構，移除整個 Call 
Chain中所有重複的紀錄。以圖十四中第 33行的警
告標籤為範例，如果開發人員選擇快速修復，則第
33 行的壞味道會被移除，修復結果如圖十五所示。
如果開發人員選擇重構，則第 33 行與第 58 行的紀
錄會一起被刪除，只保留第 22 行，也就是最上層
的紀錄；修復結果如圖十六所示。 
 
圖十四、Over Logging 範例程式碼 
 
 8 
個類別的方法中呼叫的情況，找出例外處理的階層
中最薄弱的一環，我們亦提供兩種視圖供開發人員
使用，亦即 3.3.2 要介紹的呼叫階層圖以及例外處
理的 Call Chain。 
3.3.1、例外處理壞味道報表 
 開發人員可以利用 Eclipse 的選單，選擇
Window  Show View  Other… Robusta  
Exception Code Smell Report 找到例外處理壞味道
報表的 workbench，開啟後的畫面如圖二十。下拉
式選單裡面包含所有開啟中的專案；按下 Refresh
按鍵會重新檢查開啟中的專案；按下 Generate按鍵
會產生壞味道報表如圖二十三。捲動壞味道報表統
計圖，下面有針對各個類別以及壞味道種類的詳細
分布資訊，如圖二十五所示。 
 
圖二十、壞味道報表初始畫面 
3.3.2、例外處理 Call Chain 圖與呼叫階層圖 
  Robusta 經由對原始碼的靜態分析，提供 Call 
Chain 的循序圖以及階層圖的兩種供開發人員分
析例外處理的情況。圖二十六為 Robusta 提供的呼
叫階層檢視圖，上半部是 Call Chain 的循序圖，下
半部是階層圖。 
4、實際案例應用：SyncFree 
4.1、SyncFree簡介 
在 2003 年，國立台北科技大學資工系實作第
一版 SyncFree 這個開放原始碼的跨平台同步軟
體，任何可以運行 Java Standard Edition 的作業系
統，都可以使用 SyncFree 來同步來源端與目的端的
資料。除了功能性需求的增加，我們希望 SyncFree
也要提升非功能性需求，以增加強健度。下一個小
節將以 SyncFree 的例外處理為範例，說明如何使用
Robusta 提升 SyncFree 的強健度。 
4.2、修改範例說明 
 問題說明：當使用者透過 SyncFree 的 FTP 協
定進行檔案同步時，若網路異常，則會使同步資料
失敗。使用者希望遇到網路異常時有提示訊息，待
修復網路異常問題後，可以從中斷的部分繼續進行
同步，無須全部重來。 
 修復方法：首先可以利用 Call Chain圖檢查例
外問題影響範圍，如圖二十一所示。開發人員決
定，當 CopyFile 函式捕捉到例外時，確認狀態正確
後，直接往上層回報，統一由 DoSyncByProfile 作
重新同步的處理。 
為了讓例外可以被識別，我們先定義一個繼承
於 Exception 類 別 的 例 外 為
FTPConnectionException。再根據 Call Chain，我們
先對 CopyFile 作例外壞味道偵測，發現其中含有
DummyHandler 與 Careless Cleanup 二種壞味道，如
圖二十二所示。修復第 112 行及第 123 行的壞味
道 ， 使 其 拋 出 先 前 所 定 義 的 例 外
FTPConnectionException。修復第 121 行的壞味道，
使得關閉資源的動作被擷出成一個不會拋例外的
副程式，然後移至 finally區塊。兩個壞味道修復後
的結果如圖二十七所示。從呼叫階層圖二十八中得
知 CopyFile 函式會被 doCopyFile 與 DoSync 所呼
叫，所以還需要修正 doCopyFile 與 DoSync 函式，
使其直接將例外拋出，讓 DoSyncByProfile 可以做
重試的設計。最後要修改 DoSyncByProfile 函式；
先 將 捕 捉 到 的 例 外 類 型 改 為
FTPConnetionException，如圖二十九所示。再利用
Robusta 重構功能，將程式碼修改為例外發生時，
重試兩次。為了增加與使用者的互動性，再手動增
加程式碼，開啟對話方塊詢問使用者是否要重試，
修改後的結果如圖三十一。如此即完成所有提升例
外強健度的步驟。 
 
圖二十一、SyncFree Call Chain 
 
圖二十二、CopyFile 原始碼 
 10 
 
圖二十六、Call Chain 與呼叫階層圖 
 
 
圖二十七、CopyFile 修復結果 
 
圖二十八、呼叫階層圖 
 
 
圖二十九、更改 DoSyncByProfile 捕捉的例外類型 
5、現行工具比較 
 現行常用的靜態分析工具有 CheckStyle[9]，
EclEmma[10]，PMD[11]等。其中 PMD 有預設的例
外處理壞味道檢查規則，所以我們會與之比較。另
外，十分著名的 Bug 檢查軟體，Findbugs[12]也可
以協助開發人員找出可能發生 Bug 的程式碼，我們
將這兩套軟體比較的結果列於表二。其中 Over 
Logging、Nested Try Statement、Unprotected main 
program的壞味道僅 Robusta 有提供偵測的功能，至
於這七個壞味道的修復功能，只有 Robusta 有提供。 
6、結論 
 本研究提出的例外處理輔助工具Robusta可以
協助開發人員迅速找出六種例外處理壞味道，並為
七種例外處理壞味道提出修復的方案。另外佐以視
 12 
Hsieh, and I-Lang Wu, "Exception Handling 
Refactorings: Directed by Goals and Driven 
by Bug Fixing," Journal of Systems and 
Software, Vol. 82, No. 2, Feb 2009, pp. 
333-345. 
[7] S.Stelting, Robust Java: Exception Handling, 
Testing and Debugging, Pretice Hall PTR, 2005. 
[8] B. Eckel, Thinking in Java, 4th ed., Prentice 
Hall, 2006, pp. 477-478. 
[9] "checkstyle - Checkstyle 5.6," [Online]. 
Available: http://checkstyle.sourceforge.net/. 
[10] "EclEmma - Java Code Coverage for Eclipse," 
[Online]. Available: http://www.eclemma.org/. 
[11] "PMD," [Online]. Available: 
http://pmd.sourceforge.net/. 
[12] "FindBugs - Find Bugs in Java Programs," 
[Online]. Available: 
http://findbugs.sourceforge.net/. 
[13] 蕭登益, 謝金雲, "應用敏捷式例外處理方法與
工具提升既有系統強健度 - 以 SyncFree 為
例," in Joint Conference on 7th TCSE and 22nd 
OOTA, 新北市, 2011. 
[14] 吳承濠、謝金雲、陳建村, "應用強健度故事檢
驗雲端軟體之研究：以 Dropbox 為例," in 8th 
TCSE, 台北市, 2012. 
(1) "Agent incentives in system design, " Prof. Xiaotie Deng, City University of Hong Kong, CN. 
(2) "Cultural-Based Particle Swarm Optimization for Multi-objective Optimization, " Prof. Gray 
G. Yen, Oklahoma State University, USA. 
(3) "Neural Network Approaches to Nonlinear and Robust Model Predictive Control, "Prof. Jun 
Wang, The Chinese University of Hong Kong, CN. 
(4) "Achieving Artificial General Intelligence: What Kinds of Specialized Applications Can Help 
Progress Toward General AI? " Dr. Ben Goertzel, Novamente LLC and Biomind LLC, USA. 
(5) "Application of Game Theory in Wireless Networking, " Dr. Maode Ma, Nanyang Technological 
University, SG 
由本次的大會所安排的 5 場 Keynote Speech 來看，目前在人工智慧上的研究已逐漸走向應用。像是第一位
講者是將人工智慧中的 Game theory 應用在網際網路系統中的效能調效上，並且以數個系統設計上的範例說明
Game theory 的應用。而在第四位講者所關注的議題更令人引發省思，講者說明目前人工智慧上的研究大多著重
在僅能完成特定工作的"narrow AI"，而講者則在演講中介紹了許多能夠結合 AI 技術的應用領域，像是應用在
生化科技上的 AI 助理、在遊戲中的虛擬角色，或是能夠處理多功能的機器人研究等等有趣的應用。透過這樣的
場合及演講，學生能夠獲得一些未來研究上的想法及啟迪，也能夠和國際學者間進行交流，將有助於規劃未來
研究方向及內容。(下圖為 Prof. Jun Wang 說明利用類神經網路的技術來發展非線性且具強健性的模型預測控
制) 
 
本次會議也有許多相當有趣的論文研究： 
(1) Research of Unicode Data Exchange Technology on Internet of Things (Guofu Feng, et al.)：作
者分析目前許多針對多國語言的編碼及轉換方法，並提出一個設計上的指引，用以解決物聯網中資料交
換的議題。 
附件: 會議展示海報 
 
developed by CloudBee platform, and it doesn’t allow 
users to install and configure software.  
Our survey shows that these CI services are not yet sufficient 
in achieving automatic provisioning. This motivates us to 
extend ezIntegrate toward automatic provisioning by using the 
cloud computing technology. In automatic provisioning, A. 
Keller et al. described the provisioning flow by using BPEL 
process language, and used BPEL4WS engine to run the 
process to achieve automatic provisioning software [1]. R. 
Mietzner and F. Leymann proposed a generic provisioning 
ﬂows which were independent from the underlying 
provisioning engines and designed a generic infrastructure by 
web service and BPEL technology [16]. However, the 
provisioning flow cannot be completely automated. Some 
tasks require human intervention to complete, for example, the 
complicated adjustment and configuration for performance of 
database only can be done by humans. 
3 Provisioning job and flow design 
3.1 Provisioning item definition 
The provisioning items are listed below. For simplicity of 
reference, we assume manual installation is performed by a 
role called CI engineer. 
(1) Operating System: as far as CI is concerned, the operating 
system is the most complicated piece of software to install. 
Despite much simplification in the installation of the start-
of-the-art operating systems, the process of installation 
still needs human intervention, for example, in filling 
required information in order to continue. Also, additional 
configuration tasks such as network configuration, system 
update, and so on, need to be done manually.  
(2) Software: We distinguish three types of provisioning jobs 
by the decreasing degree of human participation.  
a) Software that requires manual installation: this type of 
software installation involves human participation. 
Some software may require the installation of other 
software as a pre-requisite.  
b) Software that can be installed unattended: Installation 
can proceed without human participation, for example, 
in automatic software upgrades and script-driven 
installation. In the latter, a prepared script and other 
information files (e.g., answer file used in installing 
Windows software) provide answers to the various 
options and parameters required during installation.  
c) Portable software: portable software is platform-
independent and whose installation involves only 
copying the program files, configuration files and data, 
and so on to the designated directory. 
(3) Libraries: libraries need to be installed to make a compile 
runs successfully before running other the jobs such as 
unit testing. For example, the GUI libraries (e.g. SWT, Qt, 
etc.) have to be installed in the integration environment.  
(4) Builders: a builder in ezIntegrate (e.g., Java Compile 
builder, JUnit [12] builder, LOC builder, etc.) executes a 
single job. All builders implement the java interface 
Builder defined by ezIntegrate. The design allows the IS 
to launch the builders without knowing its specific 
implementation. 
 
 
Figure 1. The semi-automatic provisioning in ezIntegrate 
 
 
Figure 2. (a) Manual provisioning flow of an OS. (b) Manual 
provisioning flow of software. (c) Flow of automatic provisioning. 
3.2 Provisioning flow design 
For provisioning the above integration environment on IS, we 
propose a semi-automation flow as shown in Figure 1. First, 
ezIntegrate searches suitable operating systems from 
Eucalyptus based on the project’s integration needs. If not 
found, CI engineer can install and configure a new operating 
system as a virtual machine (VM) image, which is then 
uploaded to Eucalyptus. Second, ezIntegrate boots up the 
required VM image as a VM instance. Then, the CI engineer 
can decide to install and configure the software either 
manually or automatically according to the type of installation 
required. Upon completion of all the provisioning jobs, the 
VM instance is turned off and stored as a new VM image 
ready for use in the future. The entire provisioning flow 
includes the flows of installing an operating system manually, 
installing software manually, and installing software, libraries, 
and builders automatically, as Figure 2 shows. The details in 
design of these sub-flows are described as follows:  
(1) Install OS/IS manually: refer to Figure 2(a) for installing 
an operating system manually. The CI engineer can create 
a new VM image by using virtualization tools. Upon 
completion, the CI engineer installs the JRE and IS 
program to make the VM instance capable of taking 
continuous integration for SyncFree [19], an open source 
application for data synchronization. In a nutshell, SyncFree 
synchronizes user-designated directories and files between 
two different sites, e.g., from a Windows personal computer 
to a Fedora server. SyncFree is cross-platform: Windows, 
Fedora, and Debian are supported. Since different naming and 
path rules apply, the developer of SyncFree has created test 
suites on each of the different platforms. As such, the CI for 
SyncFree must include different platforms. A build is 
considered successful only if all the platform-specific tests 
pass. In addition, the test coverage analysis tool Cobertura [4] 
is used for measuring test coverage for the SyncFree project. 
Before a build can be executed, multiple platform-specific ISs 
must be prepared. The provisioning flow includes installation 
and configuration of operating system, related software and 
builders. In what follows, the semi-automatic provisioning is 
illustrated for preparing a Fedora IS in two stages:  
(1) Installing Linux Fedora platform, JRE, and IS manually: 
To begin with, CI engineer creates a new VM image. The 
VM is booted up, the installation image of Linux Fedora 
is mounted. The rest of the installation proceeds as in the 
usual way. Upon completion, the system environment is 
configured for account management, networking, and so 
on. Then, JRE and the ezIntegrate IS are installed. The 
VM image is then uploaded to Eucalyptus  
(2) Installing Cobertura, Ant builder, and JUnit builder 
automatically: ezIntegrate automatically installs the 
builders for Cobertura, Ant and JUnit on the Fedora IS. In 
so doing, ezIntegrate first boots the Fedora IS prepared in 
the first stage, and assigns a unique identifier for the target 
VM instance. Then, ezIntegrate packs each of Cobertura, 
Ant, and JUnit into a corresponding provisioning job, 
which contains all the required information for executing 
the job, including the target VM instance identifier, URL 
of software, and a script for installation and configuration. 
The provisioning jobs are written into the JobPool and are 
taken by the Fedora IS with the matched unique identifier. 
The matching IS unpacks a provisioning job, downloads 
software accordingly, and executes the installation and 
configuration script. The process is repeated until all 
provisioning jobs are completed. By now, the Fedora IS is 
fully equipped with the four-layer integration environment 
to take the Fedora-specific build including compilation, 
Cobertura, Ant, and JUnit jobs.  
5 Conclusion 
For a cloud CI offering to be successful, project-by-project 
provisioning of CI environment must be feasible. In this paper, 
we presented a semi-automatic provisioning flow for 
preparing integration stations in ezIntegrate, a cloud CI 
system using Eucalyptus as the infrastructure. Also, the 
provisioning flow is implemented for integrating human-
intervened and automatic provisioning process with the BPEL 
technology. Presently, ezIntegrate is both in active use and 
development in our group. A real example of provisioning for 
a multi-platform file synchronization application called 
SyncFree is presented. Currently, we are developing a tool for 
translating the provisioning process into BPEL files and 
looking into the optimization of managing the VM resources. 
Acknowledgements 
This research is funded by the National Science Council of 
Taiwan under grant contracts 99-2221-E-027-096-MY3 and 
98-2221-E-027-049-MY3, and a grant from MOEA under 
grant contract 101-EC-17-A-02-S1-135. We thank Shi-Chun 
Wang, Shuan-Hao Wang, Chih-Ping Wang, and Yao-Ting 
Chang for their contributions to the ezIntegrate project. 
References 
[1] A. Keller and R. Badonnel, "Automating the 
provisioning of application services with the bpel4ws 
workflow language," Utility Computing, pp. 15-27, 2004. 
[2] Amazon Web Services: http://aws.amazon.com/ 
[3] CloudBee: http://www.cloudbees.com/ 
[4] Cobertura: http://cobertura.sourceforge.net/ 
[5] CruiseControl: http://cruisecontrol.sourceforge.net/ 
[6] E. Brynjolfsson, et al., "Cloud Computing and 
Electricity: Beyond the Utility Model," Communications 
of the Acm, volume 53, pp. 32-34, May 2010. 
[7] Eucalyptus: http://open.eucalyptus.com 
[8] FaZend: http://www.fazend.com/ 
[9] G. Chang Jie, et al., "A Framework for Native Multi-
Tenancy Application Development and Management," 
E-Commerce Technology and the 4th IEEE 
International Conference on Enterprise Computing, E-
Commerce, and E-Services (CEC-EEE2007), 2007, pp. 
551-558. 
[10] Jenkins: http://jenkins-ci.org/ 
[11] J. Shore and Chromatic, The Art of Agile Development, 
O'Reilly Media, 2007. 
[12] JUnit: http://www.junit.org/ 
[13] K. Beck, Extreme Programming Explained: Embrace 
Change 2nd, Addison-Wesley, 2004. 
[14] K. Schwaber and M. Beedle, Agile Software 
Development with Scrum, Prentice Hall, 2001. 
[15] M. Cusumano, "Cloud Computing and SaaS as New 
Computing Platforms," Communications of the Acm, 
volume 53, pp. 27-29, Apr 2010. 
[16] R. Mietzner and F. Leymann, "Towards Provisioning the 
Cloud: on the Usage of Multi-granularity Flows and 
Services to Realize a Unified Provisioning Infrastructure 
for SaaS Applications," IEEE Congress on Services - 
Part I, 2008, pp. 3-10. 
[17] S. H. E. Freeman, and K. Arnold, JavaSpaces(TM) 
Principles, Patterns, and Practice, Prentice Hall, 1999. 
[18] S. M. Paul M. Duvall, Andrew Glover, Continuous 
Integration: Improving Software Quality and Reducing 
Risk, Addison-Wesley Professional, 2007. 
[19] SyncFree: http://www.openfoundry.org/of/projects/280/ 
[20] Y. C. Cheng, et al., "A Distributed System for 
Continuous Integration with JINI," presented at the 14th 
International Conference on Distributed Multimedia 
Systems, Hyatt Harborside at Logan Int'l Airport, 
Boston, USA, Sep. 4~6, 2008. 
98年度專題研究計畫研究成果彙整表 
計畫主持人：鄭有進 計畫編號：98-2221-E-027-049-MY3 
計畫名稱：以例外處理為策略的軟體容錯與診斷：樣式語言、物件導向設計與診斷工具 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 2 1 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 1 1 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
