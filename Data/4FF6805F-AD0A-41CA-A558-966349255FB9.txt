multi-core platform. Unfortunately, the supporting concurrent 
software developed for multi-core processors legs far behind the 
advance of hardware and much more erro-prone. In order to 
increase the usability of formal verification in practice, this project 
provides an integrated framework and new theories to further reduce 
the high analysis complexity by including reduction technique into 
our system. 
 
2to design parallel applications running on
many CPU cores at the same time. The
software must have simultaneous
multi-threading technology (SMT) written
into its code. Without SMT the software will
only recognize one core and there is no
performance gain from multi-core platform.
Unfortunately, the supporting concurrent
software developed for multi-core
processors legs far behind the advance of
hardware and much more erro-prone. In
order to increase the usability of formal
verification in practice, this project provides
an integrated framework and new theories to
further reduce the high analysis complexity
by including reduction technique into our
system.
Keywords: formal verification, concurrent
systems, state explosion, multi-core,
multi-threading technology.
二、研究緣由與目的
Software defect incidents reported to
CERT [27] grew by 2,099% between 1998
and 2002. The economic impact of software
defects has reached billions of dollars
worldwide in 2004, according to Computer
Economics’ report. Moreover, many
software products had been delayed for
months or years, e.g., Windows Server 2003
was delayed for nine months because of
defect issues. The same problem also occurs
in Taiwan nowadays.
The causes of the unfortunate
repercussion of software defects include 1)
the increasingly high complexity of software
products, 2) today's open networked
environment. A bug in software is at least a
DoS (Denial of Service) attack waiting to be
discovered. The problem remains that we are
clearly not doing a good enough job
understanding and mitigating the risks in our
software. More and more software defect
problems will occur recently and in the
future [1]. Much more work is needed
before we can really produce excellent
security software products that give users
peace of mind.
Research works [5-16] show that static
analysis is useful for uncovering software
defects. In addition, the study of reported
defect vulnerabilities demonstrated that of
more than half of the vulnerability categories
identified in year 2001 could be detected
theoretically with static analysis [3].
This research project focuses on the formal
verification techniques designed for
concurrent software systems. Despite many
works in decades have been done in the area
of formal verification, one of main
bottleneck so far is the state explosion
problem. The capability and performance of
current techniques still cannot efficiently
verify typical large-scale software systems in
practice. In addition, multi-core processors
usher in a brand new era in personal
computers. A traditional single-core
processor can only process one thread at a
time, spending a majority of time waiting for
data from memory. In contrast, each core in
a multi-core processor processes a software
thread simultaneously to improve system
efficiency. In order be able to gain from the
hardware technology progress we will have
4三、文獻探討、研究方法
Uni-core processors and multi-core
processors demand different verification
theories and analysis tools. Example I shows
that sequential and concurrent programs
demands different analysis complexity.
Example II illustrates the fact that
verification theories and analysis tools
designed for uni-core processors do not
work for multi-core processors. We need
new theories and tools for the analysis of
multi-threaded programs on multi-core
processors.
Example I
integer x, y;
Init
x := 0; y := 0;
Function A
if( x < 10) x := x+1;---atomic actionα
Function B
if( y < 10) y := y+1;---atomic actionβ
For a sequential program, a sequential
execution of functions A and B will have
only 2*10 states. In contrast, suppose that
functions A and B are executed in different
threads on a uni-core processor and actionsα 
and β are atomic actions that appear to
execute as a single, indivisible action. There
are 10*10 states generated. The number of
states will grow exponentially in the number
of threads, which is termed as “the state
explosion problem.” Formal verification
techniques and tools should handle the
problem even for moderately sized
concurrent programs.
After decades of research in concurrent
systems, many verification theories and tools
have been developed to diminish the state
explosion problem for concurrent programs.
However, those theories and tools are not
suitable for the analysis of multi-threaded
programs running in parallel on a multi-core
processor. Example II illustrates the
difference.
Example II
integer x, y;
Init
x := 0
Function C
 x := x+1 --- atomic action γ  
Function D
x := x+1 --- atomic action δ 
If functions C and D in Example II are
executed in different threads on a uni-core
processor, where actionsγ andδ are atomic
actions, then there are two possible
execution sequences “δ γ”and “γ δ” as in 
the interleaving model. The interleaving
model is both adequate and sufficiently
abstract to allow for the practical
specification and verification of many
properties of concurrent programs on a
uni-core processor. As a result, the
interleaving model is widely adopted in state
of the art verification theories and tools.
Unfortunately, the interleaving model can
not honestly capture the dynamic behaviors
of multi-core processors. If functions C and
D are in a multi-threaded program and
executed on different CPU cores, then the
6function
 q0 is the initial state.
 F (the acceptance condition) is a
subset of Q .
Among the formal verification
techniques, compositional verification is
considered more suitable for verifying
concurrent software systems or architecture
specifications of a target system [20]. In
compositional verification, a system is first
divided into hierarchical modules
(subsystems). State spaces of modules are
then recursively constructed from reduced
state spaces of submodules. As a reduced
state space could be much smaller than the
original one, the compositional verification
technique provides an attractive approach
for analyzing large-scale systems.
Compositional verification techniques
resemble structural-reduction techniques for
system models [3]. Nevertheless,
compositional verification techniques are
applied to state spaces instead of system
models. Compositional verification
techniques are more effective than
structural-reduction techniques since state
spaces explicitly describe the dynamic
behaviors of systems.
The main goal of compositional
verification techniques is to hierarchically
and efficiently generate equivalent and much
smaller state spaces. However, the concept
of equivalence does not consider
compositional mechanisms. It is possible
that the interesting properties of systems are
not preserved after we replace one module
with another equivalent module. In order to
hierarchically generate an equivalent state
space, the concept of congruence is essential.
Two models mi and mi' are said to be
congruent if for all systems S =f(m1,…mi…, 
mn ) and
S′ = f(m1,…m′i…, mn ),
S and S′ areequivalent, where f is an
operator (or function). In other words, after
one model is replaced with another
congruent model, the new global state space
is equivalent to the old one. Various
compositional verification techniques have
been proposed for the algebraic treatment of
processes by using equations and
inequalities for processes expressions. These
approaches
to the algebraic treatment of processes can
be identified by an acceptance of
synchronized communication as the
primitive means of interaction among
processes [21].
Primary process algebras include for
example, Milner’sCCS [21], Hoare’s CSP 
[14], and Bergstra and Klop’sACP [15].
Equivalences and congruences of processes
are well founded in those process algebras
for event-based systems.
THE MODEL
In this section, we introduce the
modeling technique, multiset labeled
transition systems (MLTSs in the sequel).
MLTSs are closely related to labeled
transition systems (LTSs for short), which
are intensively used as a state-space model
in the family of process algebras. There are
three distinguishing features between
MLTSs and traditional LTSs. First, the label
of a transition is a multiset of actions in
8buffers of asynchronous communication
have unbounded capability. An
asynchronously receiving process, as in the
case of synchronous communication, may be
blocked in order to wait for messages. Note
that channels for synchronous
communication have no buffer for the
storage of messages, since synchronous
communication between processes has to
take place at the same time.
DEADLOCK STATE AND
REACHABLE STATE
In this section, we focus on the
properties of deadlock states and reachable
states. A state is said to be reachable in an
MLTS if the state can be reached from the
initial state via directed edges. Recall that a
state in MLTSs could be interpreted as a
condition. Thus, a reachable state can be
considered as a possible condition that a
process or system can reach. A system is
said to be deadlocking if the system has
reached a condition (state) such that the
system cannot do anything. In practice, a
deadlock state reflects a failure or successful
termination of a system. In order to
distinguish failure from successful
termination, we preserve the conditions of
deadlocking systems, i.e., deadlock states.
From the inspection of deadlock states, we
can easily determine whether a deadlocking
system fails or successfully terminates. In
addition, a deadlock state, which provides
detailed conditions of the whole system, is
useful for debugging and modifying an
improper system design. The following
defines reachable states and deadlock states
in MLTSs.
Definition 2 (Reachable States)
Let (S, ΣT, T, sin) be an MLTS. A state s is 
reachablein (S, ΣT , T, sin) if
1) s = sin or
2) ∃ ( s0, m1, s1)…(sn-1, mn, sn) such
that
i) n ≥ 1, i) s0= sin, ii) sn = s, and iv) ∀ 1
≤ j ≤ n: (sj-1, mj, sj) ∈T.
Definition 3 (Deadlock)
Let (S, ΣT, T, sin) be an MLTS. A state s is 
a deadlockstate of (S, ΣT, T, sin) if
1) s is reachable in (S, ΣT , T, sin) and
2) ∃ (s, m, s′) ∈T (s has no outgoing
transition).
CONDENSATION THEORIES FOR
MULTI-THREAD CONCURRENT
SYSTEMS
This section presents our newly derived
condensation theories for the compositional
verification of deadlock states and reachable
states. We call our condensation theories
MTTFD equivalence and MTT-state
equivalence. MTTFD equivalence preserves
the property of deadlock states while
MTT-state equivalence preserves the
property of reachable states.
The computation of an MLTS can be
described in terms of paths. A path is an
alternating sequence of states and transitions
in MLTSs. for the occurrence of a path to be
successful, we need to consider the global
condition, which consists of a local
condition and an environment condition. We
use MT-traces in order to deduce and
compare the global conditions required for
the occurrences of paths (actions).
10
terms of reachable states. This means that
MTT-state equivalent MLTSs are
interchangeable in the compositional
verification of MLTSs without loss of any
reachable state. In a finite MLTS, there
exists an infinite sequence of events iff there
is a loop of transitions. Therefore, livelock
exists in a finite MLTS only when the
MLTS has loops. In order to facilitate the
analysis of livelock, we will classify loops
into T -loops, B-loops, and AS-loops. We
first partition actions into blocking actions
and non-blocking actions, and also partition
transitions into blocking transitions and
non-blocking transitions.
Definition 4 (Blocking, Non-blocking, T
-loops,B-loops, and AS-loops)
‧ An action x is said to be a blocking action
if x is a synchronous action or
asynchronously receiving action (because a
blocking action may be blocked due to the
conditions in the environment).
‧ An action x is a non-blocking action if x
is an asynchronously sending actions or
invisible actions.
‧ A transition t is a blocking transition if t
executes one or more blocking actions;
transition t is a non-blocking transition
otherwise.
‧ A loop of actions/transitions is a B-loop
(blocking-loop) if the loop executes at least
one blocking action/transition.
‧ A loop of actions/transitions is a T -loop
if the loop executes only invisible action T.
‧ An AS-loop (asynchronous-sending loop)
i) executes one or more asynchronously
sending
action and ii) does not execute any blocking
action.
Divergences and MTT-Divergences
The reachability of T -loops can be
examined using divergences or our
MTT-divergences. This section illustrates
the strength of our MTT-divergences over
divergences.
Definition 5 (Divergences)
Let P  (S, Σ, T, sin) be an MLTS.
‧ A trace σ is a divergence of P if there 
exist
1) sin  σ ⇒ s and
2) s − T∞→, where T∞ is an infinite
sequence of T s.
‧The set of divergences of P is denoted by
Div(P).
A trace σ is a divergence if 1) a state s can 
be reached from the initial state sin via trace
σ and 2) aninfinite sequence of invisible
action T can be executed from s. In finite
MLTSs, a divergence is a trace leading to a
T -loop. For an MLTS P, Div(P) denotes the
set of divergences of P.
Definition 6 (MTT-Divergences)
Let P  (S, Σ, T, sin) be an MLTS.
‧ An MT-trace σ is an MTT-divergence of
P iff there exist
1) sin ≡ σ ≡ f s and
2) s− T∞→ , where T∞ is an infinite
sequence of T s.
‧ MTT-Div (P) denotes the set of
MTT-divergences of P.
We use MT-traces to define
MTT-divergences. An MT-trace σ is an 
MTT-divergence iff 1) a state s can be
reached from the initial state sin via
MT-trace σ and 2) aninfinite sequence of
12
P and Q are livelock-equivalent iff
"there exists σp ∈ MTT-Loop(P) iff
there exists σq ∈ MTT-Loop(Q) such that
σp ≈ σq."
An MTT-loop is the MT-trace of a loop
which is reachable from the initial sate. Let
σ1 = (a!)(b?C!)(d?)and σb= (c!)(d?a!)(b?)
be two MTT-loops. We said that σ1and σ2
are equivalent(denoted by σ1 ≈ σ2) because
│ σ1│=│ σ2│, i.e., (a!) + (b?C!) +
(d?) = (c!) + (d?a!) + (b?). Two MLTSs P
and Q are livelock equivalent iff for each
MTT-loop σp of P, there exists an 
MTT-loop σqof Q such that σP and σq are 
equivalent, and vice versa.
Definition 9 (MTT-Failures-Divergences
Equivalence (MTTFD Equivalence))
Let P and S be finite MLTSs with a common
set of actions Σ. iP and S are
MTT-Failures-Divergences equivalent
(MTTFD equivalent) iff
1) MTT-Fail(P) = MTT-Fail(S),
2) MTT-Div(P) = MTT-Div(S), and
3) MTT-AS-Div(P) = MTT-AS-Div(S).
Two MLTSs are MTTFD equivalent iff they
are equivalent in MTT-failures,
MTT-divergences, and
MTT-AS-divergences. Heuristic rules based
on MTTFD-equivalence can be used for the
compositional verification of livelock.
HEURISTIC RULES FOR
MULTI-THREAD CONCURRENT
SYSTEMS
Based on the concepts of MTTFD
equivalence and MTT-state equivalence
introduced above, we present several
heuristic rules for efficient verification of
multi-thread concurrent systems. Rule 1
suggests that states which are linked by a
loop of invisible transitions, can be fused
into a macro state and a self-loop invisible
transition. A transition is called an invisible
transition if it executes only invisible actions.
A transition (s1, as, s2) is called a self-loop
transition if its starting state and ending state
are identical, i.e., s1 = s2.
Rule 1 (Invisible Loops)
If state are linked by an (invisible) loop p =
{s1 t1 s2 … sntn s1} (n>1) such that ∀ ti
∈ p (1 ≤ i ≤ n): ti is an invisibletransition
(ti.EpreC = φ and ti.EpostC = φ), then 1) al
transitions in loop p are removed; 2) all
states in loop p are fused into one macro
state s by Rule 1-1 (State Fusion) below; and
3) one self-loop invisible transition (s, T, s)
is added.
Rule 1-1 (State Fusion) (Fusing a set of
states {s1 s2 … sn} (n ≥2) into a macro state 
s) 1) Each in-transition (sa, as, si) of state si
becomes (sa, as, s) and each out-transition
(si, as, sb) of state si becomes (s, as, sb),
where (1 ≤ i ≤ n); 2) Ifone of the states {s1
s2 … sn} is the initial state, then sbecomes
the initial state; 3) states s represents states
{s1s2 … sn}; and 4) al states {s1 s2 … sn} 
are removed.
Rule 2 provides conditions to remove
one of two states linked by an invisible
transition. Redundant parallel transitions are
removed as well. Rule 2 preserves MTTFD
equivalence (deadlock states).
Rule 2 (Redundant States) If 1) there exists
on transition trm = (s1, as, s2 ) such that s1
14
incident on srm are removed and , iii) If srm
is the initial state, then the in-transitions of
srm are removed.
Rule 6(Redundancy of Paths) Transition trm
= (s1, as, sb) is redundant and can be
removed if there exists a path σ = { s1 t1 
s2… tn-1 sn} (1 < n) such that 1) trm ∉ σ, 
2) trm and σ are MT-Equivalent, and 3)
σ.EPreC ≤ trm.EPreC.
Rule 7 removes transitions which are
parallel and execute identical actions.
Rule 7 (Redundant Transitions)
If there exist two transitions (s1, as, s2) and
(s'1, a's, s'2) such that s1 = s'1, as = a's and
s2 = s'2, then one of the two transitions can
be removed.
四、計畫成果自評
本計畫專注於研究並行性軟體系統的正規
驗證。儘管已有許多研究成果在正規驗證
法，可惜的是正規驗證法的複雜度是以指
數方式而增加，現今正規驗證法的技術並
不能應用於實際的並行性軟體開發計劃。
此研究計劃已發展一個整合性的架構以及
新的理論來進一步的減低正規驗證法的複
雜度，以提高正規驗證法的實用性。與原
計畫書中所述之預定目標完全相符。此驗
證系統重要的成果包括
 Modular Approach
 Formal defect specification library
 Abstract parallel model as the basis of
formal verification
 New state space reduction techniques
for the state explosion problem
 Efficient verification for sophisticated
defect properties
 Counterexample generation and
correction suggestion
在使用資料測試後，結果十分良好。
五、參考文獻
[1] J.J.P. Tsai and S. J.H. Yang, Monitoring
and Debugging Distributed Real-Time
Systems, IEEE Computer Society Press,
1995.
[2] J.J.P. Tsai, Y. Bi, S. J.H. Yang and R.
A.W. Smith, Distributed Real-Time Systems:
Monitoring, Debugging, and Visualization,
John Wiley and Sons, 1996.
[3] G. Berthelot, "Checking Properties of
Nets Using Transformations," Lecture Notes
in Computer Science, 222, pp. 19-40, 1986.
[4] M. Zhou, K. McDermott, and P.A. Patel,
"Petri Net Synthesis and Analysis of a
Flexible Manufacturing System Cell," IEEE
Trans. on Systems, Man, and Cybernetics,
pp.
523-531, vol. 23, no. 2, Mar. 1993.
[5] G.J. Holzmann, Design and Validation
of Computer Protocols, Prentice Hall, 1991.
[6] E.A. Emerson and A.P. Sistla,
"Symmetry and Modelchecking," Proc. Fifth
Int'l Computer-Aided Verification Conf.,
Lecture Notes in Computer Science, 697, pp.
463-478, Springer-Verlag, 1993.
[7] J. Burch, E. Clarke, K. McMillan, D.
Dill, and L. Hwang, "Symbolic Model
Checking: 1020 States and Beyond," Proc.
IEEE Symp. Logic in Computer Science, pp.
428-439,
1990.
[8] R. Alur, C. Courcoubetis, and D. Dill.
"Model-Checking in Dense Real-Time,"
Information and Computation, pp. 2-34,
16
Systems Using Petri-Net-Based
Condensation Rules," ACM Trans. on
Programming Languages and Systems, Vol.
20, No. 5, pp. 917-979, 1998.
[26] J.J.P. Tsai, E.Y.T. Juan, and A. Sahay,
"Model and Algorithm for Efficient
verification of High-Assurance Properties of
Real-Time Systems," IEEE Trans. on
Knowledge and Data Engineering, 2002.
[27] Paula Rooney, “Missing the boat on 
multithreading?” EE Times, December, 
2006 .
97 年度專題研究計畫研究成果彙整表 
計畫主持人：阮議聰 計畫編號：97-2221-E-019-013-MY3 
計畫名稱：並行性軟體系統的正規驗證 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100 字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：□已發表 □未發表之文稿 ■撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100 字為限） 
本研究已開發新的正規驗證基礎理論(MTTFD equivalence 以及 MTT-state 
equivalence)。研究的結果已投稿主要期刊以及撰寫論文中。 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
此研究專注於研究並行性軟體系統的正規驗證。正規驗證法在近幾十年內儘管已有許多研
究成果，可惜的是正規驗證法的複雜度是以指數方式而增加，現今正規驗證法的技術並不
能應用於實際的並行性軟體開發計劃。另外多核心的處理器使得個人電腦邁向另一個嶄新
的紀元，為了從現今硬體技術發展上獲益，我們將必須設計能夠在非常多核心上同時執行
的並行性軟體。並行性軟體必須具有同時執行的多執行緒技術(SMT)寫於程式碼中。沒有
SMT，軟體只能執行於單一個核心上，軟體的性能將無法從多核心處理器上得到任何的提
升。令人遺憾的是支援多核心處理器的軟體發展遠遠落後硬體的發展，而且更容易出錯。
此研究計劃發展一個整合性的架構以及新的理論來進一步的減低正規驗證法的複雜度，以
提高正規驗證法的實用性。此驗證系統重要的成果包括 
Modular approach 
Formal defect specification library  
Abstract parallel model as the basis of formal verification 
New state space reduction techniques for the state explosion problem 
Efficient verification for sophisticated defect properties 
Counterexample generation and correction suggestion 
   在使用資料測試後，結果十分良好。 
 
