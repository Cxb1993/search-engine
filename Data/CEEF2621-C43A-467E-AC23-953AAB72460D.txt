 
中 文 摘 要 ： 本計畫之研究目的為進行基金組合之投資策略預測，藉此策
略可幫助投資人增加投資報酬率及減少投資時的風險。我們
使用基因規劃法提出兩個模型。第一個交易模型使用索丁諾
比率來選取基金，並且平均分配資金至被選取的基金以增加
投資報酬率，此模型在實驗中有比較好的年化報酬率。第二
個交易模型同樣使用索丁諾比率來選取基金，但改以平均數
變異數模型為基礎，分配資金至被選取的基金以降低風險。
與文獻結果比較，這兩個模型都有較佳之報酬率。此外我們
也提出了使用基因規劃法來交易台灣加權指數之模型，在大
多數情形下可以獲利，但與文獻結果比較，因只交易於台灣
加權指數，報酬率較投資在具有獲利能力多筆基金的模型
低，但仍能夠獲利。由上述結果可知，基因規劃法所演化出
的交易策略適合使用於瞬息萬變的交易市場。本計畫所提出
之二項主要研究成果，已分別發表於研討會。 
中文關鍵詞： 投資組合、風險、基因規劃法、報酬率、索丁諾比率、平均
數變異數模型 
英 文 摘 要 ： The aim of this project is to find the profitable 
trading strategies of mutual fund. The strategies can 
help investors to earn return and to reduce risk in 
the investment. We first propose two trading models 
based on the genetic programming (GP). The first 
trading model utilizes the Sortino ratio to select 
funds, and it allocates capital uniformly to the 
selected funds to increase return. The model earns 
the higher annualized return in our experiment. The 
second trading model also utilizes the Sortino ratio 
to select funds, but it allocates capital with the 
mean-variance model to selected funds to diversify 
the risk. Comparing with the previous researches, 
these two models get better returns than previous 
models. Besides, we also propose a model which 
utilizes GP to trade TIAEX (Taiwan Stock Exchange 
Capitalization Weighted Stock Index), and it can earn 
return in most scenarios. However, comparing with the 
previous researches, the model only trades on TAIEX, 
hence the return of the model is inferior to the 
return of the models which trade on many profitable 
funds. But our model still can earn return. From 
these results, we obtain a conclusion that the 
trading strategies evolved by GP may be suitable for 
- 1 - 
一、前言與研究目的 
金融市場相當複雜且充滿了不確定性，投資人在普遍欠缺完備知識以及資訊的不對稱
或不透明的情況下，想要藉由投資獲利並非易事。市場會被許多外在的因素所影響，例如: 
國際金融市場的互動、政治因素、或者是人為操控…等。由於基金的投資標的與投資市場
相當的多元化，投資人在沒有足夠的知識和資訊之下難以獲利甚至於虧損。因此在進行投
資時，研究如何在追求最大利益的同時亦須考慮可能的風險，並設法避免過度躁進而造成
無法彌補的傷害。 
 
 為了得知基金或股票價格的變動，有些研究 [Huan05, Ince08, Leu10] 使用歷史資料加
上使用人工智慧和時間序列方法，以找到精確的方法來預測股市的波動。更進一步，有些
研究試著去演化交易策略來決定買賣時機點。使用在股市預測的工具包含支持向量迴歸 
(support vector regression, SVR) [Ince08] 、支持向量機 (support vector machine, SVM) 
[Chiu09, Chou08, Huan05, Powe08]、基因演算法 (genetic algorithm, GA)[Blan08, Chan09, 
Chen09, Chiu09, Chou08, Hass07, Kwon07, Tsai10, Tsai11]、基因規劃法 (genetic programming, 
GP) [Potv04, Zhan06]、人工神經網路 (artificial neural network, ANN) [Hass07, Ince08, 
Kwon07, Leu10, Tsai10, Yu10, Powe08, Tsai10]。這些研究的目標是為了改善預測股票波動的
準確度。在這些研究當中，可依評估標準分成三個種類。第一種是去預測股票市場趨勢上
漲或下跌的準確率 [Chiu09, Chou08, Huan05 ]。第二種是計算預測的股市價格與實際上股市
價格的差距，最常使用的評估方式是均方根誤差 (root mean square error, RMSE) 以及平均
絕對百分比誤差 (mean absolute percentage error, MAPE) [Boya10, Hass07, Ince08, Leu10, 
Yu10]。第三種是應用機器學習的技術用於從歷史資料中探勘交易策略，並利用這些交易策
略交易股票算出其報酬率，通常都跟 buy-and-hold交易策略比較。[Blan08, Chan09, Chen09, 
Potv04]。 
 
 然而在這些研究中，只有考慮預測的準確度或是交易策略的報酬率，對於投資時的風
險並沒有多加著墨，在實際應用於金融市場交易時，仍有不足之處。根據投資理論分析，
引起金融市場波動的主要風險來源有兩種，一為「系統風險」（systematic risk），二為「非
系統風險」（unsystematic risk）[Elto06, Fund00]。假設投資人只投資一種資產，且其報酬率
的標準差非常大，代表投資人承受的風險相當高；而當投資的資產數量增加，投資組合報
酬率的標準差（風險）便會逐步降低。而當證券數量增加至無窮大時，仍有一部份的風險
無法避免，這部份就稱為「系統風險」。所以，由於投資資產數量增加而減少的風險則稱為
「非系統風險」。 
 
本計畫的兩項研究成果，已於國內研討會發表。茲簡要說明如下： 
1. 索丁諾比率與平均數變異數模型的共同基金投資之基因規劃法：使用索丅諾比率
(Sortino ration)計算基金的績效以選出投資標的，使用平均分配、平均數變異數模
- 3 - 
結果。 
 
 
 
圖 1索丁諾比率與平均數變異數模型的共同基金投資之基因規劃法。 
 
 
- 5 - 
 
表 1 不同模型於 2004年 1月 1日至 2008年 12月 31日績效比較。ROIcum為累積報酬率，
ARcum為年化報酬率。 
Model name ROIcum ARcum 
The 4433 rule -27.50%  -6.23% 
MSCI world price index -11.21% -2.35% 
S&P 500 composite price index -18.51% -4.01% 
Our first model (best strategy,N=20;γ=70%) 71.18% 11.35% 
Our second model (best strategy,N=20;γ=70%;λ=1) 49.32% 8.35% 
Tsai’s model by GA (constant weight,N=35;γ=70%) 39.53% 6.89% 
Tsai’s model by GA (constant weight,N=45;γ=70%) 37.35% 6.55% 
Tsai’s model by GA (constant weight,N=55;γ=70%) 33.78% 5.99% 
 
圖 4 基因規劃法之台灣股市交易預測流程圖。 
 
 
- 7 - 
在每代基因規劃法的每個交易策略，我們把它套用在已找出的三個已延伸的訓練期
間，且每一個策略計算出三個累積報酬率，以及累積報酬率的平均值與標準差。而我們設
定基因規劃法的適應函數，是最大化累積報酬率的平均值除以其標準差，以得到最能夠穩
定獲利的交易策略。在演化結束後，可以獲得一個在歷史資料中具有穩定且可獲利的交易
策略，之後把這個交易策略應用在測試期間。 
  
 我們的交易資料為台灣加權指數 (Taiwan Stock Exchange Capitalization Weighted Stock 
Index, TAIEX)，以收盤價計算累積報酬率。交易期間從 2000年 9 月 14日到 2010年 5 月
21日。此區間起始點與結束點收盤價相近，且其中包含牛市、熊市、以及盤整的價格變化。
我們假設每次交易手續費為 0.6%，且不可放空。 
 
 在我們的研究中，使用兩顆算數術樹以及表 2 之特徵集合，配合使用歷史資料找出相
似的訓練期間。我們使用基因規劃法配合不同的訓練天數來訓練交易策略，包含 90、180、
270、365、455、545、635、730 天；而測試天數則分別有 90、180、365 天，因此在每個
實驗會有 24個結果。表 3是此實驗之累積報酬率，可知大部分的情形下可獲利。當訓練天
數為 730 天且測試天數為 365 天時，我們得到最高的累積報酬率為 165.30%，比起使用
buy-and-hold策略累積報酬率 1.19%高出許多。(註：研討會論文發表後，我們有重做實驗，
故表 3與研討會論文稍有不同) 
 
表 3：2000年 9月 14日至 2010年 5月 21日之累積報酬率。 
Training 
period 
Testing period=90 Testing period=180 Testing period=365 
Mean Stdev. Mean Stdev. Mean Stdev. 
90 37.63% 26.44% 46.55% 34.45% 68.08% 38.77% 
180 96.95% 36.20% 80.15% 61.11% 48.35% 54.97% 
270 -0.84% 19.20% 28.54% 25.36% 121.21% 46.32% 
365 17.10% 24.01% 19.84% 39.37% 100.35% 41.38% 
455 43.63% 32.34% 13.21% 29.76% 96.11% 44.95% 
545 2.49% 17.20% 57.58% 52.00% 114.66% 48.59% 
635 97.72% 38.31% 88.64% 51.75% 151.29% 50.35% 
730 5.60% 14.66% 51.88% 36.05% 165.30% 46.94% 
Mean 37.54% 26.05% 48.30% 41.23% 108.17% 46.53% 
Stdev. 40.23% 8.88% 27.19% 12.43% 39.15% 5.07% 
 
我們還將此模型與 Tsai[Tsai11]的模型比較，結果如表 4。從表 4中，可知雖然本論文
之報酬率較低，其原因是 Tsai的模型是從多筆基金當中，選出有獲利潛力的基金來投資，
而本論文之模型只有投資在台灣加權指數上，因此本模型於投資在多筆股票時仍具有大量
獲利的潛力。 
表 4 與 Tsai模型之比較。 
 Tsai’s model on GA  
(constant weights, N=45, γ=70%) 
Our model on the GP 
(training period=730, testing period 
=365) 
Year ROI ROIcum ARcum ROI ROIcum ARcum 
- 9 - 
6 [Chiu09] D. Y. Chiu and P. J. Chen, “Dynamically exploring internal mechanism of stock 
market by fuzzy-based support vector machines with high dimension input space and genetic 
algorithm,” Expert Systems with Applications, Vol. 36, pp. 1240–1248, 2009. 
7 [Chou08] R. Choudhry and K. Garg, “A hybrid machine learning system for stock machine 
market forecasting,” Proc. of World Academy of Science, Engineering and Technology, Vol. 
39, pp. 315–318, Mar. 2008. 
8 [Elto06] E. J. Elton, M. J. Gruber, S. J. Brown and W. N. Goetzmann, Modern Portfolio 
Theory and Investment Analysis, Wiley, 2006. 
9 [Fund00] FundDJ Co., Ltd., “FundDJ.” http://www.funddj.com/. 
10 [Hass07] M. R. Hassan, B. Nath, and M. Kirley, “A fusion model of HMM, ANN and GA 
for stock market forecasting,” Expert System with Application, Vol. 33, pp. 171–180, 2007. 
11 [Holl75] J. H. Holland, Adaptation in natural and artificial systems: an introduction analysis 
with applications to biology, control, and artificial intelligence. University of Michigan Press, 
1975. 
12 [Huan05] W. Huang, Y. Nakamori, and S. Y. Wang, “Forecasting stock market movement 
direction with support vector machine,” Computers & Operations Research, Vol. 32, pp. 
2513–2522, 2005. 
13 [Ince08] H. Ince and T. B. Trafalis, “Short term forecasting with support vector machines 
and application to stock price prediction,” International Journal of General Systems, Vol. 37, 
pp. 677–687, 2008. 
14 [Jhou11] S.M. Jhou,, C.B. Yang and H.H. Chen, "Taiwan Stock Forecasting with the Genetic 
Programming," Proc. of the 16th Conference on Artificial Intelligence and Applications, 
Taoyuan, Taiwan, Nov. 11-13, 2011. 
15 [Kwon07] K. Kwon and B. R. Moon, “A hybrid neurogenetic approach for stock 
forecasting,” IEEE Transactions on Neural Networks, Vol. 18(3), pp. 851–864, 2007. 
16 [Leu10] Y. Leu, C. P. Lee, and C. C. Hung, “A fuzzy time series-based neural network 
approach to option price forecasting,” the 2nd Asian Conference on Intelligent Information 
and Database Systems, Vol. 5990, pp. 360–369, 2010. 
17 [Potv04] J.-Y. Potvin, P. Soriano, and M. Vallee, “Generating trading rules on the stock 
markets with genetic programming,” Computers & Operations Research, Vol. 31, pp. 
1033–1047, 2004. 
18 [Powe08] N. Powell, S. Y. Foo, and M. Weatherspoon, “Supervised and unsupervised 
methods for stock trend forecasting,” Proc. the 40th Southeastern Symposium on System 
Theory, New Orleans, LA, USA, Mar. 2008. 
19 Taiwan Economic Journal Co., Ltd, “TEJ.” http://www.tej.com.tw/twsite/Default.aspx, 1991. 
20 [Tsai10] C. F. Tsai and Y. C. Hsiao, “Combining multiple feature selection methods for 
stock prediction: Union, intersection, and multi-intersection approaches,” Decision Support 
Systems, Vol. 50, pp. 258–269, 2010. 
21 [Tsai11] T. J. Tsai, C. B. Yang, and Y. H. Peng, “Genetic algorithms for the investment of 
the mutual fund with global trend indicator,” Expert Systems with Applications, Vol. 38(3), 
pp. 1697–1701, 2011. 
Genetic Programming for the Investment of the Mutual Fund with Sortino Ratio
and Mean Variance Model∗
Hung-Hsin Chen, Chang-Biau Yang† and Yung-Hsing Peng
Department of Computer Science and Engineering
National Sun Yat-sen University
Kaohsiung 80424, Taiwan
Abstract—In this paper, we propose two genetic-
programming-based models that improve the trading strat-
egy for mutual funds. These two models can get better
returns and reduce risks. The first model increases the return
by selecting funds with high Sortino ratios and allocates the
capital equally, achieving the best annualized return. The
second model also selects funds with high Sortino ratios,
but reduces the risk by allocating the capital with the mean
variance model.
Most importantly, our model utilizes the genetic program-
ming to generate feasible trading signals to gain return,
which is suitable for the market that changes anytime. To
verify our model, we simulate the investment for mutual
funds from January 1999 to December 2009 (11 years in
total). The experimental results show that our first model can
gain return from 2004/1/1 to 2008/12/31, achieving the best
annualized return 9.11%, which is better than the annualized
return 6.89% of the previous approach. In addition, our
second model with smaller downside volatility can achieve
almost the same return as previous results.
Keywords-fund; global trend indicator; monitoring indica-
tor; Sortino ratio; genetic programming; annualized return.
I. INTRODUCTION
More and more investors are interested in investing
financial products such as stocks, futures and mutual
funds in recent years. However, the financial market is
so complex with nonstationary and chaotic data series,
thus it is full of risks. It is hard for investors who lack
comprehensive investment information to get return in the
market.
To get good return in the financial market, many re-
searchers have applied artificial intelligence techniques
and soft computing methods such as support vector re-
gression (SVR) [4], [16], support vector machine (SVM)
[3], [11], [4], genetic algorithm (GA) [5], [15], genetic
programming (GP) [12], artificial neural network (ANN)
[5], [6] and so on to prediction of trends or values of the
market. By using these methods, one may can extract the
rules or patterns hidden in the market.
In this paper, we confine our investment to mutual
funds. A fund pools money from many investors, and then
it invests the money in stocks, bonds, securities, assets,
or some combination of these investments. Investors can
reduce the loss risk by investing their money in a wide
∗This research work was partially supported by the National Science
Council of Taiwan under contract NSC99-2221-E-110-048.
†Corresponding author: cbyang@cse.nsysu.edu.tw
variety of funds, or by choosing the appropriate timing to
sell or buy the shares of these funds.
In this paper, we desire to study how to find the best
portfolio for each period, and how to allocate the capital
to the portfolio until the best timing to sell. First, we
measure the Sortino ratio [14] of each fund and choose
the funds with higher Sortino ratio as our portfolio. The
Sortino ratio, which only penalizes the returns that are
negative or below a user-defined target, is a modification
of the Sharpe ratio [13]. The Sortino ratio is better than
the Sharpe ratio as a measure of portfolio risk when the
distribution of excess returns is skewed [1]. Second, we
use the mean-variance model [9] to decide how to allocate
the capital to funds, by which we can reduce the risks as
much as possible. Third, we use historical data series to
decide when to redeem our portfolio.
Tsai et al. [15] Proposed the global trend indicator
(GTI) to evaluate the trend of mutual funds, and then
they applied the genetic algorithm to select funds. Their
return performance is better than the buy-and-hold method
and the 4433 rule. In this paper, we propose two models
that utilize genetic programming to generate effective
trading signals. With these trading signals, the first model
increases the annualized return by selecting funds with
high Sortino ratios and allocates the capital equally. To
reduce the risk, we devise the second model, which also
selects funds with high Sortino ratios, but allocates the
capital with the mean variance model.
The first proposed model gets better returns than Tsai’s
results. The second proposed model can achieve almost
the same return as Tsai’s results with a lower risk.
The rest of this paper is organized as follows. In Section
II, we will present some background knowledge of this
paper, including Sortino ratio, mean variance model and
genetic programming. In Section III, we will propose
our two models, both of which improve Tsai’s result by
adopting effective trading signals generated by genetic
programming. In Section IV, we will show some bench-
marks, and present the experimental results of our two
models. Finally, the conclusion of this paper will be given
in Section V.
II. PRELIMINARIES
In this section, we will give an introduction to portfolio
theory, mean variance model, Sortino ratio, and genetic
programming, which serve as the background knowledge
and will be used in the following sections.
selling the portfolio, we refer to the signals generated by
genetic programming.
A. The Flow Chart of Investment
The flow chart of our investment is shown in Figure
1. In each trading period (here we adopt one week), we
check whether the fund market is open or not by check-
ing the function isMarketOpen(t) [15]. The function
isMarketOpen(t) returns “true” if the number of tradable
funds at time t is greater than 10% of all funds issued
before time t. Otherwise, this function returns “false”. If
isMarketOpen(t) returns “true”, we will derive a trading
rule (by GP) that generates signals for deciding the tim-
ing of buying, holding, or selling. If isMarketOpen(t)
returns “false” and the trading period is one week, we will
trade at time tb, where tb is the nearest day before t that
isMarketOpen(tb) returns “true”.
In bull market, we buy or hold the funds. Before
investing, the rank of funds are determined by the Sortino
ratio. Then, according to the rank of funds, inferior funds
that are held in our portfolio will be replaced by superior
funds. In bear market, all the funds in our portfolio will
be redeemed.
B. Selecting Funds with the Sortino ratio
In this paper, we set the RMAR in Equation 3 to zero,
which means that we only consider the negative return as
the risk of investment.
If we decide to purchase funds at date t and there is no
fund in our portfolio, then the top fn funds in the last tp
months (ranked by the Sortino ratio) are selected.
Assume there are some funds already in our portfolio F
and the ranks of their Sortino ratios are from 1 to |F | in
the beginning. We define a redeeming threshold, denoted
as γ, for replacing inferior funds. Our portfolio is updated
by the following steps.
1) Set the initial trading date to t. Rank the Sortino
ratios for all funds in the last tp months before t.
2) Redeem the holding funds (if any) whose ranks fall
outside the top γ × |F |, and replace them by better
funds which do not exist in our portfolio. Note that
if the new funds get negative returns in the last tp
months, these funds are not chosen.
3) If t is the date for the end of investment, then go to
Step 4. Otherwise, set t = t + 7 (one day) and go
to Step 2.
4) Report the results.
C. Allocating the Capital with the Mean Variance Model
To allocate our capital with the MV model, we assume
that there are some funds in our portfolio, and that the
returns of funds in the market will be reflected by their
historical price series.
Assuming that the λ = 1.0, we solve Equation 1 to get
the best weights of capital of the funds in our portfolio.
The capital is reallocated when some funds are redeemed
and some new funds are added into the portfolio, until the
end of investment.
Market open on date t?
Evaluate each fund according 
to the Sortino ratio
Redeem inferior fund holdings 
and invest in superior funds
Move to next trading period
Check current 
market situation
The timing of buying, holding, 
or selling by the strategy trained 
from GP
Redeem all 
fund holdings
End investing?
yes
buying
yes
selling
no
no
Start investing
Stop
Find the nearest 
date t
b
before t and 
the market is open 
on t
b
Figure 1. The flow chart for investing funds.
D. Determining the Timing with the Genetic Programming
The function set of our method for GP contains the
operators for calculating the trading signals. We involve
the operators ’>’, ’<’, ’=’, ’≥’, ’≤’, ’and’, ’or’ here.
In addition, because the transaction fee has great impact
to the return, we put the weekly monitor index (MI) [15] in
our terminal set to avoid over-trading. Assume that we can
buy and sell the global trend indicator (GTI) [15] index,
and the transaction fee is 3% in each transaction.
Our fitness function in GP is to maximize the return of
GTI. Because GTI represents the situation of the market,
we can gain return when the trend of GTI goes up. With
GP, we can first obtain a function that generates trading
signals (true or false) to get the best return of GTI in the
training period. Next, we adopt this function to determine
the action we should take at date t. The action can be
interpreted as follows.
• buying: If the signal of t is true and the signal of
(t − 7) is false, then we select appropriate funds as
our portfolio and allocate the capital to them with our
method.
Table I
THE RETURNS AND AVERAGE OF NEGATIVE RETURNS FOR N = {5, 10, 15, 20}, tp = 6, AND γ = 70% IN THE TRAINING PERIOD FROM
1999/1/1 TO 2003/12/31. HERE EQ REPRESENTS THAT THE CAPITAL IS ALLOCATED EQUALLY, MV REPRESENTS THAT THE CAPITAL IS
ALLOCATED WITH THE MV MODEL (λ = 1.0), ROI REPRESENTS THE RETURN OF INVESTMENT, AND AVGNEG REPRESENTS THE AVERAGE OF
NEGATIVE RETURNS.
year N = 5 10 15 20
ROI AVGNEG ROI AVGNEG ROI AVGNEG ROI AVGNEG
1999 EQ 139.64% -2.64% 116.08% -2.37% 92.50% -1.89% 83.03% -1.80%
1999 MV 291.72% -2.34% 113.66% -1.34% 113.53% -1.34% 113.12% -1.32%
2000 EQ 1.42% -2.76% -8.25% -2.42% -7.31% -2.29% -9.93% -2.57%
2000 MV 14.28% -2.50% 6.44% -2.49% 3.92% -1.98% 2.19% -2.20%
2001 EQ -0.50% -1.88% -0.43% -1.62% -1.69% -1.60% -3.99% -1.49%
2001 MV -4.52% -1.98% -3.03% -0.72% -1.61% -0.70% -5.26% -0.80%
2002 EQ 6.09% -2.56% -2.18% -2.36% -4.37% -2.35% -1.32% -1.96%
2002 MV 12.12% -2.52% -19.98% -1.63% -20.03% -1.60% -15.88% -1.77%
2003 EQ 28.27% -1.57% 18.23% -1.53% 24.23% -1.51% 31.85% -1.44%
2003 MV 34.35% -1.98% 11.32% -1.01% 12.77% -1.07% 15.22% -0.87%
2004 EQ 15.30% -1.56% 11.87% -1.63% 15.23% -1.76% 11.08% -1.64%
2004 MV 17.50% -1.52% 17.47% -1.43% 11.83% -0.96% 11.83% -0.96%
2005 EQ 21.92% -1.68% 27.65% -1.68% 24.96% -1.43% 29.71% -1.63%
2005 MV 11.75% -1.12% 14.26% -1.18% 11.68% -1.71% 14.94% -1.69%
2006 EQ 20.15% -2.76% 15.31% -2.30% 14.01% -2.52% 14.22% -2.30%
2006 MV 25.99% -2.54% 10.55% -2.20% 19.63% -1.93% 14.21% -1.84%
2007 EQ 40.97% -4.11% 39.97% -3.70% 36.91% -3.43% 34.11% -3.26%
2007 MV 42.28% -3.14% 6.24% -2.80% 6.39% -2.66% 10.33% -2.73%
2008 EQ -72.56% -5.75% -68.67% -5.40% -65.79% -5.20% -65.07% -4.81%
2008 MV -70.97% -6.04% -64.88% -5.18% -55.49% -4.02% -46.39% -3.75%
2009 EQ 62.11% -2.27% 62.11% -2.27% 62.11% -2.27% 62.11% -2.27%
2009 MV 62.11% -2.27% 62.11% -2.27% 62.11% -2.27% 62.11% -2.27%
then the trading function generates either a true or false
signal. Otherwise the market situation is considered as
ambiguous, and the current signal remains the same as
the previous signal.
We run the GP 100 times and select the best prof-
itable trading functions in the training period for N =
{5, 10, 15, 20}, tp = 6, and γ = 70%. The training results
and testing results of these functions are shown in Table
III.
Most of the trading functions that are generated by GP
can get profits both in the training and testing period,
because GTI index is the average weight index of all funds,
and the funds we selected usually take high percentage of
GTI index. Hence the trading functions which can get high
profit by trading GTI index usualy can get high profit in
trading funds.
The buying and selling rules of the best trading function
generated by GP are shown in Table IV. According to
these results, we know that most profitable trading func-
tions in the training period can also obtain good results in
the testing period, and the value of portfolio is more stable
when the capital is allocated by our MV model, since the
average of negative returns is smaller.
To end this section, we compare the performance of
our models with various models. The results are shown
in Table V, where the period for computing ROIcum
(cumulated ROI) and ARcum (annualized ROI) is from
2004/1/1 to 2008/12/31. One can see that in Table V, our
models outperform other strategies.
Table III
THE RETURNS OF THE BEST PROFITABLE STRATEGIES GENERATED
BY THE GP WITH N = {5, 10, 15, 20}, tp = 6, AND γ = 70%. HERE
EQ REPRESENTS THAT THE CAPITAL IS ALLOCATED EQUALLY, MV
MEANS THAT THE CAPITAL IS ALLOCATED WITH THE MV MODEL
(λ = 1.0). THE TRAINING PERIOD IS FROM 1999/1/1 TO 2003/12/31,
AND THE TESTING PERIOD IS FROM 2004/1/1 TO 2009/12/31.
Model training ROI testing ROI
N = 5 EQ 509.61% 100.33%
N = 5 MV 432.44% 91.89%
N = 10 EQ 315.14% 94.83%
N = 10 MV 140.78% 99.91%
N = 15 EQ 276.59% 106.09%
N = 15 MV 46.55% 99.34%
N = 20 EQ 287.98% 125.68%
N = 20 MV 184.08% 116.72%
Table IV
THE BUYING AND SELLING RULES OF THE BEST PROFITABLE
STRATEGIES GENERATED BY GP IN THE TRAINING PERIOD FROM
1999/1/1 TO 2003/12/31.
buying rule ((MI(t) > 0.8) = (MI(t− 7) > 0.7))
> MI(t− 7)) ≤MI(t)
selling rule MI(t− 7) < 0.7
V. CONCLUSION
In this paper, we propose two effective models for
investment. Our models select funds with the Sortino ratio
and determine the timing to buy and sell funds with genetic
programming. Our first model with equally allocated capi-
tal can gain return from 2004/1/1 to 2008/12/31, achieving
the best annualized return 9.11%, which is better than the
Taiwan Stock Forecasting with the Genetic Programming∗
Siao-Ming Jhou, Chang-Biau Yang† and Hung-Hsin Chen
Department of Computer Science and Engineering
National Sun Yat-sen University
Kaohsiung 80424, Taiwan
Abstract—In this paper, we propose a model for generating
profitable trading strategies for Taiwan stock market. Our
model applies the genetic programming (GP) to obtain prof-
itable and stable trading strategies in the training period, and
then the strategies are applied to trade the stock in the testing
period. The variables for GP include 6 basic information
and 25 technical indicators. We perform five experiments on
Taiwan Stock Exchange Capitalization Weighted Stock Index
(TAIEX) from 2000/9/14 to 2010/5/21. In these experiments,
we find that the trading strategies generated by GP with
two arithmetic trees have more stable returns. In addition,
if we obtain the trading strategies in three historical periods
which are the most similar to the current training period,
we are able to earn higher return in the testing period. In
each experiment, 24 cases are considered. The testing period
is rolling updated with the sliding window scheme. The best
cumulative return 166.57% occurs when 545-day training
period pairs with 365-day testing period, which is much
higher than the buy-and-hold strategy.
Keywords-stock; Taiwan Stock Exchange Capitalization
Weighted Stock Index; genetic programming; annualized
return; feature set.
I. INTRODUCTION
Predicting the fluctuation of the stock market is a
very popular research. Many investors are interested in
investment, but forecasting the movement of the stock
market index is very difficult, because the stock market
is usually affected by many external factors, such as the
interaction of international financial markets, the political
factors, the human operations, etc. Generally, investors
do not have sufficient knowledge and information about
investment so that they cannot gain return easily.
To get the patterns of price fluctuation hidden in the
stock market, some studies [1], [9], [10] investigated
historical data to find a precise solution of the stock market
volatility by using the methods of artificial intelligence
and statistics. Furthermore, some studies tried to generate
trading strategies for deciding the timing of buying and
selling. The methods for forecasting the stock market
fluctuation include support vector regression (SVR) [10],
support vector machine (SVM) [5], [6], [9], [14], genetic
algorithm (GA) [1], [3], [4], [5], [6], [7], [11], [16], [17],
genetic programming (GP) [13], [19], artificial neural
network (NN) [7], [10], [11], [12], [16], [18]. The goal of
these studies is to mine the pattern of the price fluctuation
and to improve the accuracy of predicting the trend of
the stock market. Among these studies, three benchmarks
∗This research work was partially supported by the National Science
Council of Taiwan under contract NSC99-2221-E-110-048.
†Corresponding author: cbyang@cse.nsysu.edu.tw
are usually used. The first is to predict whether the trend
of the stock market is raising or falling. [5], [6], [9],
[14], [16]. The second benchmark is the difference of
predicted indices and the real ones. The most commonly
used measurements are root mean squared error (RMSE)
and mean absolute percentage error (MAPE) [2], [7], [10],
[12], [18]. The third benchmark is to apply the machine
learning techniques to mine the trading strategies from
the historical data, and the return got by applying these
strategies to trade one stock is usually compared with the
buy-and-hold strategy [1], [3], [4], [13].
In this paper, our goal is to earn stable return in
Taiwan stock market. The trading strategy is applied to
Taiwan Stock Exchange Capitalization Weighted Stock
Index (TAIEX) in the testing period. The total trading
period is from 2000/9/14 to 2010/5/21, approximately 10
years in total. The best cumulative return 166.57% occurs
when 545-day training period pairs with 365-day testing
period, which is much higher than the return of the buy-
and-hold strategy 1.19%.
The rest of this paper is organized as follows. We will
introduce the genetic programming (GP) in Section II. In
Section III, we will present our method that the trading
strategies are generated by GP. In Section IV, we will
show our experimental results. Finally, in Section V, we
will give the conclusion and some future works.
II. PRELIMINARIES
In this section, we will give an introduction of the
genetic programming, which is the background knowledge
of this paper. The genetic programming (GP), which is
extended from the genetic algorithm (GA), was proposed
by Koza at 1992 [8]. The great advantage of GP is that
it can be applied in varieties of problems with some
constraints. The solutions of these problems generated by
GP are represented as formulas. The representation of
the chromosome of GP is more flexible than GA. The
solutions of GA are string structures with fixed length
which need to be encoded and to be decoded for answer
transformation. The tree structure of GP has dynamic
extensibility. GP can parse the tree structure to get the
corresponding solution. Therefore, GP is more suitable for
searching trading strategies. One trading strategy is usually
produced by predefined functions, constants and variables.
The evolutions in GP are summarized as follows.
1) Initialization: The initial population is composed
of individuals, which are generated randomly. The
structure of an individual is a tree.
Proceedings of the 2011 Conference on Technologies and Applications of Artificial Intelligence (TAAI 2011)
151TAAI 2011, November 11-13, 2011, Chung-Li, Taiwan 
ISBN 978-986-87804-0-8
Search for three historical periods which are the most 
similar to the training period by RMSE measurement.
Find the most profitable trading strategy for the three 
historical periods with GP.
Apply the trading strategy to the testing period.
End
Set the training period and testing period
Yes
Is the sifted testing period over the trading 
period?
Start
No
Figure 2. The flow chart for investing one stock.
Training period
Testing 
period
Training period
Testing 
period
Training period
Testing 
period
t
t+p
t+p
t+p*2
t+p*2
t+p*3
t-n+1
(t+p)-n+1
(t+p*2)-n+1
time line
time line
time line
Figure 3. The training period and the testing period with the sliding
window scheme. Here, n, t, and p represent the length (day) of the
training period, the current date, and the length (day) of the testing period,
respectively.
B. Training Interval Selection from Historical Data
Leu et al. [12] and Yu et al. [18] predict the stock close
price by finding the historical period which is similar to
the training period. In this paper, the training period is
defined to be an interval just before the current testing
period. The lengths of training and testing periods need
not be the same. The historical period is selected from the
interval starting from the very beginning to the day just
before the training period. The goal of historical periods
is to help the model construction of the training period.
In our model, three historical periods which are the most
similar to the current training period are chosen from the
historical data by the measurement of the root mean square
error (RMSE). Here, all data series are formed by the daily
close prices.
The equation of RMSE is given as follows:
RMSE(X1, X2) =
√∑n
j=1(x1,j − x2,j)2
n
, (1)
where X1, X2, x1,j , x2,j , and n represent the data series
of the first period, the data series of the second period,
the jth element of the first period, the jth element of the
second period, and the length of the period, respectively.
After we find the 3 historical periods with the lowest
RMSE values compared to the training period, we extend
these periods. That is, suppose that the lengths of the
training and testing periods are d1 and d2, respectively.
The length of the historical period we search is d1, and
the length of the extended period is d1+d2. Each strategy
generated by GP is used to trade the stock in the 3
extended historical periods, then we can get 3 returns with
their standard deviation. The higher the average return
divided by its standard deviation is, the more stable and
profitable the trading strategy is. After getting the best
trading strategy, we apply it in the testing period.
C. Generating the Trading Strategy with the Genetic Pro-
gramming
To utilize the genetic programming (GP), we have to
define the function nodes and the terminal nodes first.
The function nodes for our method consist of operators
’>’, ’<’, ’=’, ’≥’, ’≤’, ’logical and’, ’logical or’, ’+’, ’-
’, and ’×’. The terminal nodes involve 6 basic information
and 25 technical indicators of one stock, which are open
prices, close prices, highest prices, lowest prices, the
trading volumes, the amount of prices, MTM5, OBV ,
DI , volume5, volume20, RSI5, RSI14, MA10, MA20,
TAPI , PSY 14, WMS5, WMS9, BIAS10, BIAS14,
BIAS20, OSC5, RSV 9, K3, D3, EMA12, EMA26,
DIF , and MACD9. We denote these 31 features as
full features. The constants for the terminal nodes are
the numbers generated randomly between −1.0 and 1.0.
In addition, we modify the left subtree of the original
arithmetic tree to a buy-tree, and the right subtree to a sell-
tree. With this modification, the trading signal generated
by two arithmetic trees on date t is given as follows.
IF (the value of the buy-tree on date t> 0)
AND (the value of the sell-tree on date t< 0)
THEN signal(t) ← TRUE
ELSE IF (the value of the buy-tree on date t< 0)
AND (the value of the sell-tree on date t> 0)
THEN signal(t) ← FALSE
ELSE
signal(t) ← signal(t− 1)
END IF
(2)
According to the trading signal, the action we should
take at date t is described as follows.
Proceedings of the 2011 Conference on Technologies and Applications of Artificial Intelligence (TAAI 2011)
153
Table I
THE PARAMETERS OF THE GENETIC PROGRAMMING.
Population size 100
Number of generations 200
Initial method equal mix of Full and Grow method
Selection method roulette wheel
Crossover rate 90%
Mutation rate 50%
Maximum depth 3
Table II
THE CUMULATIVE RETURNS FROM 2000/9/14 TO 2010/05/21 WITH
TWO ARITHMETIC TREES FOR GP AND THREE HISTORICAL TRAINING
PERIODS.
Training \testing period 90 180 365 Avg. Stdev.
90 61.27% 53.61% 68.44% 61.11% 7.41%
180 65.69% 66.76% 0.35% 44.27% 38.04%
270 -8.64% -2.30% 109.28% 32.78% 66.33%
365 -19.52% 4.26% 56.52% 13.75% 38.90%
455 68.88% 27.06% 75.71% 57.22% 26.34%
545 60.41% 126.72% 166.57% 117.90% 53.62%
635 73.61% 38.70% 145.58% 85.96% 54.50%
730 21.66% 78.56% 61.72% 53.98% 29.23%
Avg. 40.42% 49.17% 85.52%
Stdev. 37.30% 42.21% 53.17%
unnecessary transactions, hence it did not earn high return.
In Experiments II, III, and IV, two arithmetic trees with
different feature sets are used for training trading strate-
gies, but the training periods in these experiments are not
highly related with the testing period, hence it is hard for
GP to train a profitable trading strategies.
Among the five experiments, the fifth is the most prof-
itable. The cumulative returns of the experiment are shown
in Table II. As one can see, the cumulative returns of all
cases are almost positive, it means that our method has
only small probability to lose money. In the experiment,
when the 545-day training period pairs with 365-day
testing period, we can get the highest cumulative return
166.57%, which is higher than the return of the buy-and-
hold strategy 1.19%. We show the trading record in Figure
5 in 2001 and trading strategies in Table III in the ten
years. In Figure 5, we can buy TAIEX at relatively low
price and sell it at relatively high price in the bull market,
such as the 2nd buying time, 7th buying time, 2nd selling
time, and 7th selling time. In the bear market, we can sell
the stock before the stock crashes, such as 2nd, 3rd, and
6th selling time. It reveals the profitability of our model.
V. CONCLUSION
In this paper, we propose a novel model for investment
in Taiwan Stock Exchange Capitalization Weighted Stock
Index (TAIEX). Our trading strategies are generated by
two arithmetic trees in GP. When 545-day training period
pairs with 365-day testing period, the cumulative return is
166.57%, higher than the buy-and-hold strategy.
In the future, we will try to find more suitable strategies
by searching more periods from the historical data, and
modify the evaluating method for finding similar patterns.
The longest common subsequence or dynamic time warp-
ing is one of the possible ways to find the most similar
subsequences in our training data for GP. We will also
apply the risk management and the portfolio to the stock
investment.
 
 





 






 
 







 







 




 


 




 


 




 
 

 






 
 






 
 





 

 





 

 







 







 





 

 







 







 





 

 





 
	
 







 







 





 
 
 








 








 







	
 






 


 








 







 





 

 







 




	


 




	
 

 






 
 







 






	
 





 
	
 







 







 





 
 
 







 




 


 




 


 




 
 

	



Figure 5. The trading record from 2001/1/1 to 2001/12/31 with 545-day
training period and 365-day testing period in TAIEX. Here, a vertical
solid line represents buying time and a vertical dotted line represents
selling time.
Table III
THE TRADING STRATEGIES FROM 2000/9/14 TO 2010/5/21 WITH
545-DAY TRAINING PERIOD AND 365-DAY TESTING PERIOD IN
TAIEX.
testing period return trading arithmetic trading
count trees strategies
000914˜010913 16.61% 9 buy rule RSV9
sell rule (0.5≥ PSY 14 )AND(-0.1 < BIAS14)
010914˜020913 3.96% 11 buy rule (highp−(-0.3))−(MA
14 )
sell rule MACD9>((D3)OR(MACD9 ))
020914˜030913 29.89% 18 buy rule MA
10×((0.6)OR(highp))
sell rule RSV 9 < 0.3×OSC5
030914˜040912 12.33% 3 buy rule (BIAS
14 > MACD9 )≥ MACD9
sell rule (OBV − avg.volume20 )< avg.volume20
040913˜050912 1.57% 20 buy rule (RSI
5 − BIAS20 )≤0.7
sell rule ((MA14)OR(MA14))≤ MA20
050913˜060912 1.12% 16 buy rule DIF
sell rule (BIAS20 − RSI5 )≥(PSY 14 + PSY 14 )
060913˜070912 16.60% 21 buy rule -0.6 ≤ (amoutp ≥-0.1)
sell rule (RSV 9 < MACD9)> PSY 14
070913˜080911 -6.11% 5 buy rule BIAS
14
sell rule BIAS20
080912˜090911 34.01% 17 buy rule (0.9≥ RSI
14)+BIAS14
sell rule -1.0 −(highp > avg.volume20 )
090912˜100521 4.48% 14 buy rule D
3 > WMS5
sell rule (DIF − MTM5 )≤(0.6×WMS5)
REFERENCES
[1] P. F. Blanco, D. Sagi, and J.I.Hdalgo, “Technical market in-
dicators optimization using evolutionary algorithm,” Proc.
of the 2008 GECCO conference companion on Genetic and
evolutionary computation, Atlanta, USA, July 2008.
[2] M. A. Boyacioglu and D. Avci, “An adaptive network-based
fuzzy inference system ANFIS for the prediction of stock
market return: The case of the istanbul stock exchange,”
Expert Systems with Applications, Vol. 37, pp. 7908–7912,
2010.
[3] T. J. Chang, S. C. Yang, and K. J. Chang, “Portfolio
optimization problems in different risk measures using ge-
netic algorithm,” Expert Systems with Applications, Vol. 36,
pp. 10529–10537, 2009.
[4] J. S. Chen, J. L. Hou, S. M. Wu, and Y. W. C. Chien,
“Constructing investment strategy portfolios by combina-
Proceedings of the 2011 Conference on Technologies and Applications of Artificial Intelligence (TAAI 2011)
155
- 1 -
參加「國際計算與安全會議」報告
楊昌彪
國立中山大學資訊工程學系
一、參加會議經過
台灣蒙古雙邊國際合作計畫(98-2923-E-011-004-MY3)主持人為
洪西進教授(執行機關: 國立臺灣科技大學資訊工程系)，協同主持人
為鄭有進教授(台北科技大學)、楊昌彪教授(中山大學)。執行期間為
2009年8月至2012年7月。由於鄭有進教授於2010年無法一起至蒙古進
行交流互訪，故協同主持人變更為楊竹星教授(成功大學)。國立蒙古
大學的NYAMJAV.J教授則是蒙古的對口聯絡與執行者。計畫主要目
的藉由台灣蒙古兩國學者的互訪與交流，針對惡意程式之偵測與防治
進行探討，並視議程進行可能的共同合作，或者擴大規模並召開國際
性相關會議。
2010年6月，以該國際合作計畫名義，共有三人出國至蒙古烏蘭
巴托(國立蒙古大學)進行國際合作交流：洪西進教授(台灣科技大
學)、楊竹星教授(成功大學)、楊昌彪教授(中山大學)。在交流期間，
由NYAMJAV.J教授帶領其他教授、研究生、助理等約10人，與我們
進行雙邊會談與交流。會議由NYAMJAV.J教授與洪西進教授共同主
持，並由與會人員發表演說。在蒙古交流期間，除了口頭報告外，亦
規劃2011年在蒙古召開小型國際會議，並將會議主題稍加延伸，以便
擴大參與。
國際計算與安全會議 (The 2011 International Conference on
Computing and Security)便是在上述背景所舉辦的會議。舉辦地點為蒙
古烏蘭巴托(Ulaanbaatar, Mongolia，蒙古文為 Улаанбаатар的國立蒙古
大學(The National University of Mongolia) ，會期為2011年7月8日至7
月11日。
蒙古航空(AERO MONGOLIA，成立於2002年)最近有香港至烏
蘭巴托的航線，因此我取道香港。2011/7/7，由高雄先飛香港，然後
再轉機至烏蘭巴托。雖然在香港赤蠟角機場起飛時，延誤了大約三個
- 3 -
Itemset on Peer-to-Peer Networks”
3. Feng-Tse Lin and Hahn-Ming Lee, “Layered Architecture and 
Virtualization Technology of Cloud Computing”
4. Ching-Ming Lin, Xian Wang, and Shi-Jinn Horng, “Topic 
Classified on Micro Blog Using Improved FCM”
蒙古國立大學，英文：The National University of Mongolia
（NMU），西裡爾蒙古文：Монгол Улсын Их Сургууль，拉丁蒙古文：
Mongol Ulsyn Ikh Surguul，於1942年成立。蒙古國立大學是蒙古國
最高學府，是該國最早建立的唯一的綜合性大學，為社會學科學、
自然科學研究重要中心之一。下圖為該校校徽：
蒙古國立大學校徽
目前，蒙古國立大學擁有12000名學生(2006年資料）。目前蒙
古國立大學設置的系院如下：
 地理地質系
 生物系
 化學系
 數學與計算機科學學院
 物理與電子學院
 蒙古學學院
 外國語言和文化學院
 經濟科學學院
 法學院
 社會科學學院
 國際關係學院
- 5 -
俄文C對應至英文S，俄文л對應至英文L等等，詳如附表所列。掌握
對應表後，有些與英文近似的俄文，或外來的蒙古文，即可一目了然。
例如，「銀行」的俄文為Банк，蒙古文也如此寫，利用對應表，換成
英文字母即為 bank，與英文完全一樣；「超級市場」的俄文
Супермаркет，蒙古文也如此寫，換成英文字母即為supermarket ，與
英文完全一樣。「蒙古」之蒙古文為монгол，對應至英文即為Mongol。
附表：俄文字母與英文字母對應表
А а Б б В в Г г Д д Е е Ё ё Ж ж З з И и Й й
а бэ вэ гэ дэ йэ йо же зэ и
и 
кра́ткое
a b v g d ye / ie yo / io (zh) z i y
К к Л л М м Н н О о П п Р р С с Т т У у Ф ф
ка эл эм эн о пэ эр эс тэ у эф
k l m n o p (r) s t u f
Х х Ц ц Ч ч Ш ш Щ щ Ъ ъ Ы ы Ь ь Э э Ю ю Я я
ха цэ чэ ша ща
твёрдый 
знак
ы
мя́кий 
знак
э йу йа
(kh) ts (ch) (sh) (shch) - (y) - e yu / iu ya / ia
四、攜回資料名稱及內容
此次會議之後，我攜回會議論文集光碟片一片，如下：
1. Proceedings of the 2011 International Conference on
Computing and Security, Ulan Bator, Mongolia, July 7-11,
2011.
- 7 -
楊昌彪教授於會場演講廳留影
TABLE I
THE FOUR GC-LCS PROBLEMS DEFINED BY CHEN AND CHAO [6] AND
THE TIME COMPLEXITIES OF THEIR PROPOSED METHODS.
Including P Excluding P
As subsequence SEQ-IC-LCS SEQ-EC-LCS
O(nmr)
As substring STR-IC-LCS STR-EC-LCS
O(nmr) O(nmr)
II. A COUNTER EXAMPLE TO CHEN AND CHAO’S
ALGORITHM
Definition 1. (STR-EC-LCS problem [6]). Given two input
sequences X and Y of lengths n and m, respectively, and
a constraint string P of length r, the STR-EC-LCS (string
excluding) problem is to find the longest common subsequence
Z of X and Y excluding P as a substring.
For the STR-EC-LCS problem, Chen and Chao [6] proposed
an dynamic programming algorithm with O(nmr) time to
solve it. Their recurrence formula is shown in Figure 1, where
LChen(i, j, k) denotes the length of the LCS of X1..i and Y1..j
excluding P1..k as a substring.
Now we provide a simple counter example, X = axbc,
Y = abyc and P = ac, which breaks Chen and Chao’s
algorithm for the STR-EC-LCS problem. Evidently, the LCS
of X and Y , abc, does not contain ac as a substring. That
is to say, abc excludes the constraint P . However, Chen and
Chao’s algorithm would return the answer LChen(4, 4, 2) = 2,
where the corresponding result sequence is ab or bc. Part of
the recursive process of calling LChen(4, 4, 2) is illustrated in
Figure 2. One can see that their answer is not correct and the
length is shorter than |abc| = 3. It concludes that Chen and
Chao’s algorithm fails to solve the STR-EC-LCS problem.
III. A STRAIGHTFORWARD BACKTRACKING ALGORITHM
In this section, we give a simple straightforward back-
tracking algorithm which correctly solves the STR-EC-LCS
problem. Although it runs in exponential time, we will show
that it can be reduced to an efficient polynomial-time algorithm
with similar ideas in the next section.
Algorithm 1 shows a backtracking algorithm for solving the
STR-EC-LCS problem. We denote L1(i, j,Tail) as the longest
length of the common subsequence of X1..i and Y1..j such that
the concatenation of the common subsequence and string Tail
excludes P as a substring. For each recursive step, string Tail
denotes the tail of the possible answer sequence obtained by
the previous step. The answer of STR-EC-LCS is obtained
by invoking L1(n,m, φ) recursively, where ‘φ’ denotes the
empty string. We consider the example, X = axbc, Y = abyc
and P = ac, which breaks Chen and Chao’s algorithm for
the STR-EC-LCS problem in the previous section. Part of
the recursive process of invoking L1(4, 4, φ) is illustrated in
Figure 3. The bold edges indicate the path corresponding to
the answer, abc. We also note that L1(0, 0, ‘ac’) = −∞ since
the constraint is violated, which means that node L1(0, 0, ‘ac’)
is never considered as a part of the answer.
It is not difficult to examine the correctness of Algorithm
1. The boundary conditions are handled in Lines 1-4, where
Lines 3-4 deal with the normal terminations. Lines 1-2 deal
with the case that the constraint P has been contained in Tail
as a substring, or more precisely, a prefix. The constraint has
been violated in this case, thus −∞ is returned which means
that we would never consider this state as a part of the answer.
Lines 5-7 consider the case that xi and yj are matched. In this
case, we call L1 recursively to determine whether the matched
symbol xi should be chosen as a part of the answer or not.
If we choose xi as a part of the answer, xi will be inserted
in front of Tail to form a new string New Tail, where ‘⊕’
denotes the string concatenation. Lines 8-9 consider the case
of mismatch in which either xi or yj will be dropped.
It is evident that even if we use the dynamic programming
technique to reduce the total number of states in the recursive
process, there are still O(nm|Σ|m) states in the worst case.
Theorem 1. Algorithm 1 can correctly solve the STR-EC-LCS
problem in exponential time.
IV. OUR ALGORITHM FOR THE STR-EC-LCS PROBLEM
Although Algorithm 1 requires exponential time, in this
section, we will show that the required time can be reduced and
thus an efficient algorithm with polynomial time is proposed.
After investigating the relationship between the string Tail and
the constraint P in Algorithm 1, we find that a property holds
when solving STR-EC-LCS with the recursive function L1, as
shown in Lemma 1.
Definition 2. (Longest prefix-suffix). Given two strings S1
and S2, we denote LPS(S1, S2) as the longest prefix of S1
that matches a suffix of S2.
Lemma 1. For a given string S excluding P as a substring,
L1(i, j, S) = L1(i, j,LPS(S, P )).
Proof. We assume L1(i, j, S) ̸= L1(i, j,LPS(S, P )) and
prove it by contradiction. For ease of presentation, we denote
S = V V ′ where V = LPS(S, P ). Besides, we denote the
corresponding strings of L1(i, j, S) and L1(i, j, V ) as U1
and U2, respectively. In other words, |U1| = L1(i, j, S) and
|U2| = L1(i, j, V ). If L1(i, j, S) ̸= L1(i, j, V ), then two
possible cases would be considered as follows.
1) L1(i, j, S) > L1(i, j, V ). It means that U1S excludes
P as a substring and U1V contains P as a substring,
otherwise U1 can be concatenated with V and gains
a better length |U1| > L1(i, j, V ). However, U1V is
a prefix of U1S. If U1V contains P as a substring,
U1S would also contain P as a substring, which is a
contradiction.
2) L1(i, j, S) < L1(i, j, V ). It means that U2S = U2V V ′
contains P as a substring and U2V excludes P as a
substring. By definition, S = V V ′ excludes P , the
occurrence of P in U2V V ′ should start inside U2 and
end inside V ′. Thus, there would exist a suffix of P that
is also a prefix of V V ′ and its length is longer than |V |.
L1(4,4,ψ) = 3
L1(3,3,“c”) = 2 L1(3,4,ψ) L1(4,3,ψ)
L1(2,3,“c”) L1(3,2,“c”) = 2
L1(2,1,“bc”) = 1 L1(2,2,“c”) L1(3,1,“c”)
+1 (c)
+1 (b)
L1(1,1,“bc”) = 1 L1(2,0,“bc”)
L1(0,0,“abc”) = 0 L1(0,1,“bc”) L1(1,0,“bc”)
+1 (a)
L1(2,1,“c”)
L1(1,1,“c”) = 0
L1(0,0,“ac”) = -∞
L1(3,0,“c”)
L1(2,0,“c”)
L1(0,1,“c”) = 0 L1(1,0,“c”) = 0
+1 (a)
Fig. 3. Part of the process of invoking L1(4, 4, φ), where X = axbc, Y = abyc and P = ac. The result shows that L1(4, 4, φ) = 3.
Algorithm 2 L2(i, j, l)
1: if l = |P | then {◃ boundary condition: violating the constraint}
2: return −∞
3: else if i = 0 or j = 0 then {◃ normal boundary condition}
4: return 0
5: else if xi = yj then {◃ matched}
6: l′ ⇐ |LPS(xi ⊕ P(r−l+1)..r, P )|
7: return max{L2(i− 1, j − 1, l′) + 1,L2(i− 1, j, l),L2(i, j − 1, l)}
8: else {◃ xi ̸= yj , mismatched}
9: return max{L2(i− 1, j, l),L2(i, j − 1, l)}
10: end if
P(r−l+1)..r, P )| in Line 6. By observing the paths in the
recursive process of calling L2, the behaviors of the third
parameter l can be described as follows. When xi is equal to
p(r−l), we set the new prefix-suffix length l′ with l+1, which
means that the length of matched suffix of P increases by one.
On the other hand, when xi is not equal to p(r−l), the length of
matched suffix of P has to be shortened to the largest l′ such
that P(r−l+1)..(r−l+l′−1) = P(r−l′+2)..r and xi = p(r−l′+1).
One can see that this process is similar to slide a pattern
when executing Knuth-Morris-Pratt (KMP) algorithm [8, 14],
a famous string matching algorithm. KMP algorithm searches
for a pattern in a text efficiently by precomputing the prefix
function of the given pattern [8] and then sliding the pattern
efficiently when the matching failure occurs.
Definition 3. (Prefix function [8]). Given a string S, the prefix
function f(i) denotes the length of the longest prefix of S1..i−1
that matches a suffix of S1..i.
Figure 4(a) shows the table of the pattern S = ababbababc
and its corresponding prefix function. For example, f(9) = 4,
f(4) = 2 and f(2) = 0 illustrate the sliding process of
KMP algorithm [8, 14] when the matching failure occurs
after S1..9 was matched, as shown in Figure 4(b). We should
notice that the constraint P is backward matched when L1 and
L2 are called recursively. Therefore, we will precompute the
prefix function of the reversed string P of P . We should also
notice that the amortized analysis of the linear-time matching,
or more precisely, constant-time sliding, of KMP algorithm
would be violated since there are more than one path in the
recursive process of calling L2. To ensure the sliding of the
pattern to be executed efficiently, we define the next function as
follows, which achieves constant query time by precomputing
a two-dimensional table.
Definition 4. (Next function). Given a string S and a symbol
σ ∈ Σ, the next function pi(i, σ) denotes the length of the
longest prefix of S1..i+1 that matches a suffix of S1..i ⊕ σ.
ternational Journal of Foundations Computer Science,
Vol. 16, No. 6, pp. 1099–1109, 2005.
[5] C. Blum, M. J. Blesa, and M. Lo´pez-Iba´n˜ez, “Beam
search for the longest common subsequence problem,”
Computers and Operations Research, Vol. 36, No. 12,
pp. 3178–3186, 2009.
[6] Y. C. Chen and K. M. Chao, “On the generalized
constrained longest common subsequence problems,”
Journal of Combinatorial Optimization, Vol. 21, No. 3,
pp. 383–392, 2011.
[7] F. Y. L. Chin, A. D. Santis, A. L. Ferrara, N. L. Ho,
and S. K. Kim, “A simple algorithm for the constrained
sequence problems,” Information Processing Letters,
Vol. 90, No. 4, pp. 175–179, 2004.
[8] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein,
Introduction to Algorithms. MIT Press, second ed., 2001.
[9] Z. Gotthilf, D. Hermelin, G. M. Landau, and M. Lewen-
stein, “Restricted LCS,” String Processing and Infor-
mation Retrieval (SPIRE), Lecture Notes in Computer
Science, Vol. 6393, pp. 250–257, 2010.
[10] Z. Gotthilf, D. Hermelin, and M. Lewenstein, “Con-
strained LCS: hardness and approximation,” Combi-
natorial Pattern Matching, 19th Annual Symposium
(CPM2008), Pisa, Italy, pp. 255–262, 2008.
[11] D. S. Hirschberg, “Algorithms for the longest common
subsequence problem,” Journal of the ACM, Vol. 24,
No. 4, pp. 664–675, 1977.
[12] J. W. Hunt and T. G. Szymanski, “A fast algorithm for
computing longest common subsequences,” Communica-
tions of the ACM, Vol. 20, No. 5, pp. 350–353, 1977.
[13] C. S. Iliopoulos and M. S. Rahman, “New efficient
algorithms for the LCS and constrained LCS problems,”
Information Processing Letters, Vol. 106, No. 1, pp. 13–
18, 2008.
[14] D. E. Knuth, J. H. Morris Jr., and V. Pratt, “Fast pat-
tern matching in strings,” SIAM Journal on Computing,
Vol. 6, No. 2, pp. 323–350, 1977.
[15] D. Maier, “The complexity of some problems on sub-
sequences and supersequences,” Journal of the ACM,
Vol. 25, pp. 322–336, 1978.
[16] Y. H. Peng, C. B. Yang, K. S. Huang, and K. T.
Tseng, “An algorithm and applications to sequence align-
ment with weighted constraints,” International Journal of
Foundations of Computer Science, Vol. 21, No. 1, pp. 51–
59, 2010.
[17] S. J. Shyu and C. Y. Tsai, “Finding the longest common
subsequence for multiple biological sequences by ant
colony optimization,” Computers and Operations Re-
search, Vol. 36, No. 1, pp. 73–91, 2009.
[18] C. Y. Tang, C. L. Lu, M. D. T. Chang, Y. T. Tsai, Y. J.
Sun, K. M. Chao, J. M. Chang, Y. H. Chiou, C. M.
Wu, H. T. Chang, and W. I. Chou, “Constrained multiple
sequence alignment tool development and its application
to RNase family alignment,” Journal of Bioinformatics
and Computational Biology, Vol. 1, pp. 267–287, 2003.
[19] Y. T. Tsai, “The constrained longest common sub-
sequence problem,” Information Processing Letters,
Vol. 88, No. 4, pp. 173–176, 2003.
[20] P. van Emde Boas, “Preserving order in a forest in
less than logarithmic time and linear space,” Information
Processing Letters, Vol. 6, No. 3, pp. 80–82, 1977.
[21] R. Wagner and M. Fischer, “The string-to-string cor-
rection problem,” Journal of the ACM, Vol. 21, No. 1,
pp. 168–173, 1974.
[22] C. B. Yang and R. C. T. Lee, “Systolic algorithm for the
longest common subsequence problem,” Journal of the
Chinese Institute of Engineers, Vol. 10, No. 6, pp. 691–
699, 1987.
99 年度專題研究計畫研究成果彙整表 
計畫主持人：楊昌彪 計畫編號：99-2221-E-110-048- 
計畫名稱：分散風險之基金組合投資策略預測 
量化 
成果項目 
實際已達
成數（被
接受或已
發表）
預期總達
成數(含實
際已達成
數) 
本計畫
實際貢
獻百分
比 
單位
備註（質化說明：如數個計畫
共同成果、成果列為該期刊
之封面故事...等） 
期刊論文 0 0 100%  
研究報告/技術報
告 0 0 100%  
研討會論文 2 2 100% 
篇
H. H. Chen, C. B. Yang, and Y. 
H. Peng, ’Genetic 
programming for the 
investment of the mutual fund 
with Ssortino ratio and mean 
variance model,’ Proc. of the 
15th Conference on Artificial 
Intelligence and 
Applications, Hsinchu, 
Taiwan, Nov. 2010. 
S.M. Jhou,, C.B. Yang and H.H. 
Chen, ’’’’’’’’Taiwan 
Stock Forecasting with the 
Genetic 
Programming,’’’’’’’’ 
Proc. of the 16th Conference 
on Artificial Intelligence 
and Applications, Taoyuan, 
Taiwan, Nov. 11-13, 2011. 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 10 10 100%  
博士生 3 3 100%  
博士後研究員 0 0 100%  
國
內 
參與計畫人
力 
（本國籍） 
專任助理 0 0 100% 
人次
 
期刊論文 0 0 100%  
研究報告/技術報
告 0 0 100%  
國
外 
論文著作 
研討會論文 1 1 100% 
篇
Hsing-Yen Ann, Chang-Biau 
Yang and Chiou-Ting 
Tseng, ’’’’ Efficient 
