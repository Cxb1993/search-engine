  1
整合多訂單的工作排程之研究(I) 
The multiple orders per job scheduling problem (I) 
計畫編號：NSC 96-2221-E-269-025 
執行期限：96 年 8 月 1 日至 97 年 7 月 31 日 
計畫主持人：陳禎祥  遠東科技大學企業管理系 
計畫參與人員： 李明興  遠東科技大學企業管理系 
 陳逸謙  遠東科技大學資訊管理系 
 余國訓  遠東科技大學行銷與流通管理系 
 盧佳玲  南台科技大學工業管理研究所 
 
 
中文摘要 
半導體製造是現今世界上最大產業之
ㄧ，每年營收超過兩千億美元；近年來國
內許多半導體廠商紛紛宣佈新的投資計
劃，積極發展及建造十二吋晶圓廠，預計
幾年內約有 20 多座的十二吋晶圓廠陸續
完工。未來幾年我們可預見台灣半導體產
業將從過去生產八吋晶圓時代漸漸走向生
產十二吋晶圓的時代。晶圓傳送盒
(front-opening unified pod; FOUP)是十二
吋晶圓廠中的晶圓傳送設備，每一批晶圓
（由 25 片或 13 片晶圓組成）擺放在潔淨
氮氣的晶圓傳送盒內，晶圓傳送盒內之晶
圓在某些作業之加工為批次加工，不管盒
內有幾片晶圓，其批次加工時間固定。因
此，十二吋半導體製造業者需要將不同顧
客的多張訂單組合在一個特定的晶圓傳送
盒，也就是將多張訂單組合成一個相同的
工作，再將這些工作有順序地安排在機台
上進行加工，使顧客訂單之交期能有效確
保。以上問題有兩項主要的決策，包括：
(1)如何將多張訂單組成單一工作？此稱
為工作組成；(2)所有訂單組成工作後，這
些工作將依什麼順序及何時被安排在機台
上進行加工？此稱為工作排程。為了獲得
排程的最佳解，必須同時考慮及制定工作
組成及工作排程兩項決策；以上是本計畫
將探討的問題，我們稱之為整合多訂單的
工作排程。 
本計畫整合多訂單的工作排程之研究
將探討在不同製造環境下之整合多訂單的
工作排程，這些不同製造環境包括：單機、
平行機台、流程工廠及零工工廠等，本年
度將探討單機及平行機台之整合多訂單的
工作排程問題。藉由本計畫的進行，希望
能將現有的傳統排程領域推向更具整合能
力、更符合實務運作之整合多訂單的工作
排程領域。 
 
關鍵詞：排程、多訂單工作、整數規劃、
啟發解、半導體製造 
 
Abstract 
The semiconductor manufacturing 
industry is one of the largest industries in 
the world, with annual revenues exceeding 
US $200 Billion. The semiconductor 
manufacturers announced the new 
investment plans to develop and construct 
300-mm wafer fabs successively. It is 
estimated that more than twenty 300-mm 
wafer fabs will be complete in a few years. 
Predictably in the near future, Taiwan 
semiconductor industries will move from 
producing 200-mm wafer era to 300-mm era. 
The standard unit of lot transfer between 
tools in a 300-mm fab is the front-opening 
unified pod (FOUP). FOUPs are containers 
that hold a 25-wafer (or 13-wafer) lot of 
300-mm wafers in an inert, nitrogen 
atmosphere. In addition, the processing time 
of some operations is the same regardless of 
the number of wafers in the FOUP (lot 
processing). Thus, 300-mm semiconductor 
manufacturers often have the need to group 
  3
algorithms to solve them. Erramilli and Mason 
(2008) studied the problems 
1|moj(lot)| ∑ =ni iiCw1  and Pm|moj(lot), 
ri|∑ =ni iiCw1 , where ri denoted ready time of 
order i. They presented column generation 
heuristics to solve the proposed problems. 
Jia and Mason (2007) investigated the 
problem Pm|moj(lot), ri, sjl|∑ =ni iiCw1 , where 
sjl was the setup time of job j on machine l. 
A mixed-integer program was proposed and 
a number of polynomial-time heuristic 
approaches were presented. Erramilli and 
Mason (2006) investigated the problem 
1|moj(lot), batch|∑ =ni iiTw1 , where “batch” 
denoted the lots needed to be grouped 
batches. A mixed integer program and a new 
simulated annealing-based heuristic were 
proposed to solve the problem. Erramilli and 
Mason (2008) studied the problem 
1|moj(lot), batch, incompatible| ∑ =ni iiTw1 , 
where “incompatible” denoted the 
incompatible job family case. A 
mixed-integer programming formulation and 
a number of simple heuristic approaches 
were presented. Laub et al (2007) studied 
the problems F2|moj(lot)|Cmax and 
F2|moj(item)|Cmax. An optimization model 
was presented that addresses both job 
formation and job sequencing. They also 
designed an efficient heuristic to solve the 
problem F2|moj(item)|Cmax. 
Related MOJ scheduling literature falls 
into three production environments:  
(i) Single machine. See for example, Qu 
and Mason (2005), Erramilli and Mason 
(2006), Erramilli and Mason (2008), 
and Erramilli and Mason (2008).  
(ii) Parallel machines. See Jia and Mason 
(2007) and Erramilli and Mason (2008).  
(iii) Two-machine flow-shop. See Laub et al 
(2007).  
Additionally, related MOJ scheduling 
literature falls into three performance 
measures:  
(i) Total weighted completion times. See 
for example, Qu and Mason (2005), Jia 
and Mason (2007), and Erramilli and 
Mason (2008).  
(ii) Total weighted tardiness. See Qu and 
Mason (2005), Erramilli and Mason 
(2006) and Erramilli and Mason (2008).  
(iii) Makespan. See Laub et al (2007).  
The previous MOJ scheduling 
environments focus single machine, parallel 
machines, and two-machine flow-shop, 
while the performance measures concentrate 
on ∑ =ni iiCw1 , ∑ =ni iiTw1 , and Cmax. To date, 
there are not any MOJ scheduling articles 
using ∑ =ni iC1  as the performance measure. 
This study investigates the problems 
1|moj(lot)|∑=ni iC1  and 1|moj(item)|∑ =ni iC1 . 
The objective is to assign the orders to jobs 
and schedule the jobs to minimize the total 
completion time for the entire set of orders. 
This study first provides two NP-hardness 
proofs and presents some properties for the 
two proposed problems. Two mixed binary 
integer programming (BIP) models are 
provided to derive the optimal solution, one 
model for 1|moj(lot)|∑=ni iC1  and the other 
for 1|moj(item)|∑=ni iC1 . Additionally, two 
efficient heuristics are proposed for finding 
the near-optimal solution for large-sized 
problems, one heuristic for 
1|moj(lot)| ∑=ni iC1  and the other for 
1|moj(item)|∑ =ni iC1 . Computational results 
are provided to demonstrate the efficiency of 
the models and the effectiveness of the 
heuristics. 
 
 
Problem description and notation 
definition 
 
The following notation was used throughout 
the study: 
Symbol definition 
Oi order number i  
Jj job number j  
J[j] the job in the sequence position j  
 
  5
1|moj(item)| ∑=ni iC1 . The following is a 
simple example. 
 
 
The problem 1|moj(lot)|∑ =Ni iC1  
 
This section provides an optimization model 
and an efficient heuristic for the problem 
1|moj(lot)|∑ =Ni iC1 . The optimization model 
is Model L, while the efficient heuristic is 
Heuristic H1. 
 
Model L 
Mathematical programming formulation is a 
natural method of solving machine 
scheduling problems (Rinnooy Kan, 1976). 
Most mathematical programming 
formulations of scheduling problems involve 
mixed binary integer programming (BIP) in 
which some variables are binary and the 
others are continuous. According to the 
properties for the proposed problem, we 
present a two-phase mixed BIP model. The 
proposed model is Model L and it consists 
of a Phase I model and a Phase II model.  
 
Property 1  For the 1|moj(lot)| ∑ =Ni iC1  
problem, there exists an optimal schedule in 
which the total number of jobs is minimal. 
 
Property 2  For the 1|moj(lot)| ∑ =Ni iC1  
problem, there exists an optimal schedule in 
which each job consists of all the orders, and 
the jobs are sequenced in non-increasing 
sequence of the number of orders in the job. 
 
The optimization model employs an 
integer programming technique to find the 
optimal solution for 1|moj(lot)|∑ =Ni iC1 . To 
avoid infeasible schedule generation, we set 
φ = Min{N, F}. A two-phase integer 
programming formulation is presented. The 
Phase I model is based on Property 1, while 
the Phase II model is based on Property 2. 
The objective of the Phase I model is to find 
the minimum number of job (Φ*), while the 
Phase II model is to find the minimum total 
completion time of orders. 
 
Phase I model 
Minimize Φ = ∑
=
N
j
jW
1
][   (1) 
Subject to  
∑
=
φ
1
][
j
jiX  = 1   i = 1, 2, …, n  (2) 
∑
=
N
i
jii X
1
][σ  ≤ K   j = 1, 2, …, φ  (3) 
∑
=
N
i
jiX
1
][  ≤ LLU[j]   j = 1, 2, …, φ  (4) 
U[j] ≤ LL∑
=
N
i
jiX
1
][    j = 1, 2, …, φ  (5) 
Φ ≥ 0; Xi[j] is binary  i = 1, 2, …, N; j = 1, 
2, …, φ; U[j] is binary  j = 1, 2, …, φ  (6) 
LL = ρLφ  (7) 
 
Phase II model 
Minimize ρL∑
=
*
1
][
Φ
j
jjn  (8) 
Subject to  
∑
=
*
1
][
Φ
j
jiX  = 1   i = 1, 2, …, n  (9) 
∑
=
N
i
jiX
1
][  ≥ 1   j = 1, 2, …, Φ*  (10) 
∑
=
N
i
jii X
1
][σ  ≤ K   j = 1, 2, …, Φ*  (11) 
n[j] = ∑
=
N
i
jiX
1
][    j = 1, 2, …, Φ*   (12) 
n[j] ≥ 0, j = 1, 2, …, Φ*; Xi[j] ∈ {0, 1}, i = 1, 
2, …, n; j = 1, 2, …, Φ*  (13) 
 
Heuristic H1 
Although the integer programming approach 
can solve the problem being considered, 
large problems are difficult to solve without 
considerable computational efforts. 
Therefore, a heuristic algorithm is proposed 
to solve the problem 1|moj(lot)|∑ =Ni iC1 . The 
first fit decreasing (FFD) algorithm is a 
popular heuristic for solving bin-packing 
problems. For the detailed FFD algorithm, 
  7
BIP models are provided to derive the 
optimal solution, Model L for 
1|moj(lot)| ∑ =Ni iC1  and Model I for 
1|moj(item)| ∑ =Ni iC1 . Since the proposed 
problems are strongly NP-hard, two 
heuristic algorithms are also presented to 
derive the near-optimal solutions, Heuristic 
H1 for 1|moj(lot)|∑ =Ni iC1  and Heuristic H2 
for 1|moj(item)|∑ =Ni iC1 . The experiments 
results demonstrated the efficiency of 
models and effectiveness of proposed 
heuristics. We are able to solve optimally up 
to 40-order instances for 1|moj(lot)|∑ =Ni iC1  
in reasonable time. The proposed heuristics 
are effective and the average percentage 
errors are smaller than 5% for 
1|moj(lot)|∑ =Ni iC1 and 1|moj(item)|∑ =Ni iC1 . 
Future research should address problems 
under different shop environments, 
including flow-shop and job-shop. Problems 
with other performance measures, such as 
makespan or maximum lateness, may be 
considered.  
 
 
References 
 
Chan LMA, Simchi-Levi D and Bramel J 
(1998). Worst-case analyses, linear 
programming and the bin-packing 
problem. Math Program 83: 213−227. 
Erramilli V and Mason SJ (2006). Multiple 
orders per job compatible batch 
scheduling. IEEE Trans Electron Pack 
Manuf 29(4): 285−296. 
Erramilli V and Mason SJ (2008). Multiple 
orders per job batch scheduling with 
incompatible jobs. Ann Opns Res 159: 
245−260. 
Garey MR and Johnson DS (1979). 
Computers and Intractability: A Guide to 
the Theory of NP-Completeness. W.H. 
Freeman and Company: San Francisco. 
Jia J and Mason SJ (2007). Semiconductor 
manufacturing scheduling of jobs 
containing multiple orders on identical 
parallel machines. Int J Prod Res, to 
appear. 
Jampani J and Mason SJ (2008). Column 
generation heuristics for multiple 
machine, multiple orders per job 
scheduling problems. Ann Opns Res 159: 
261−273. 
Laub JD, Fowler JW and Keha AB (2007). 
Minimizing makespan with 
multiple-orders- per-job in a 
two-machine flowshop. Eur J Opl Res 
182(1): 63−79. 
Mason SJ, Kutanoglu E, Fowler JW, Qu P, 
Glass CA (2004). The single machine 
multiple orders per job scheduling 
problem. Working paper, University of 
Arkansas. 
Pinedo M (2002). Scheduling Theory, 
Algorithms, and Systems. Prentice Hall: 
New Jersey. 
Qu P and Mason SJ (2005). Metaheuristic 
scheduling of 300mm jobs containing 
multiple orders. IEEE Trans Semiconduct 
Manuf 18(4): 633−643. 
Rinnooy Kan AHG (1976). Machine 
Scheduling Problems: Classification, 
Complexity and Computations. Martinus 
Nijhoff: The Hague, Holland. 
 
表 Y04 
三、 考察參觀活動(無是項活動者省略) 
無 
 
四、 建議 
無 
 
五、 攜回資料名稱及內容 
1. Conference Program: 研討會的流程安排，包括活動進行的名稱、時間、地點等。 
2. Proceedings: 此 論 文 集 包 括 ： ISBN-10: 1-934272-45-0 (Collection) 、 ISBN-13: 
978-1-934272-45-9 (Collection) 、 ISBN-10: 1-934272-46-9 (Volume) 、 ISBN-13: 
978-1-934272-46-6 (Volume) ，由國際資訊與系統學會所主辦。 
3. 研討會之論文全文光碟 ISBN-10: 1-934272-49-3 與 ISBN-13: 978-1-934272-49-7。 
 
 
六、其他 
本次參加在美國奧蘭多市舉辦的學術會議承蒙國科會在出國經費上的補助，得以成
行，謹此誌謝。 
 
 
 
 2
together. A mixed integer program (MIP) is 
developed and tested. A new simulated 
annealing-based heuristic solves compatible 
problems to within 4% of optimality in a few 
minutes. Erramilli and Mason (2008) studied the 
problem 1|moj(batch), incompatible|∑=ni iiTw1 . They 
considered the single machine MOJ batch 
scheduling problem to minimize total weighted 
tardiness. They also considered that orders have 
multiple product types, that is, the incompatible job 
family case wherein jobs that belong to the same 
family (product type) can be grouped together in a 
production batch. A mixed-integer programming 
formulation for the MOJ batch scheduling problem 
on a single batch processing machine is presented. 
A number of simple heuristic approaches are 
investigated in an attempt to find near-optimal 
solutions in a reasonable amount of computation 
time. 
Jia and Mason (2007) investigated the 
identical parallel machine MOJ scheduling problem 
to minimize total weighted order completion time. 
They also considered two kinds of processing 
environments, lot and item processing, in the 
presence of non-zero order ready times and 
sequence-independent setup times between jobs. A 
mixed-integer program is proposed. A number of 
polynomial-time heuristic approaches are proposed. 
Erramilli and Mason (2008) studied the problem of 
1|moj(lot)|∑=ni iiCw1  and Pm|moj(lot), ri|∑=ni iiCw1 . 
Column generation heuristics were presented for 
single and parallel machine MOJ scheduling 
problems to minimize total weighted order 
completion time. 
Laub et al (2007) studied the problems of 
F2|moj(item)|Cmax and F2|moj(lot)|Cmax. They 
investigated the two-machine flow-shop MOJ 
scheduling with minimizing makespan as the 
criterion. Lower bounds for the makespan 
performance measure are provided for combinations 
of lot processing and item processing machines. An 
optimization model is presented that addresses both 
job formation and job sequencing. We define a 
heuristic to minimize the makespan for the MOJ 
problem for two-machine item-processing 
flow-shops. The heuristic obtains solutions within 
2% of a tight lower bound and runs in O(HF) time, 
where H is the number of orders and F is the 
restricted number of jobs. 
This study investigates the single machine 
MOJ scheduling problem to minimize the total 
completion time. Both the lot and item processing 
cases are considered. This paper first presents some 
properties for the proposed problem. Two mixed 
binary integer programming (BIP) models are 
provided to derive the optimal solution, one model 
for 1|moj(lot)| ∑=ni iC1  and the other for 
1|moj(lot)|∑=ni iC1 . 
2. Problem description and notation 
definition 
Figure 1 illustrates the representation of a 
schedule involving multiple orders per job. The 
following notation was used throughout the study: 
 
Symbol definition 
Oi order number i;  
Ji job number j;  
 
Input parameters 
M a very large positive number;  
N the number of orders;  
K the job capacity;  
F the number of Foups for all orders to assign; 
φ the number of jobs for all orders to assign, 
where φ = min{N, F}; 
σi the size of order i;  
ρI the unit item processing time; 
ρL the unit lot processing time; 
 
Decision variables 
nj the number of orders of job j;  
sj the sub-total order sizes of job j;  
Ci the completion time of order i (equals the 
completion time of the job to which order i is 
assigned);  
Xij 1 if order i is assigned to job j; 0 otherwise;  
Wj 1 if any order is assigned to job j; 0 
otherwise;  
 
Assumptions 
(1) Customer order sizes are less than the 
maximum capacity of a job, that is, σi ≤ K. 
(2) Assume individual orders cannot be split 
across multiple jobs due to customer-specific 
traceability issues. 
(3) φ must be at least equal to the number of 
orders for which σi > K/2, as orders that have 
size greater than one-half of FOUP capacity 
cannot be combined into a single job. 
 4
solution to the bin-packing problem.   
 
3-Partition problem: Given a set of 3m integers a1, 
a2, …, a3m, each of size between b/4 and b/2, such 
that ∑=mi ia3 1  = mb, is there a partition of the ai’s 
into m groups of 3, each summing exactly to b? 
3-Partition problem is NP-hard in the strong 
sense (Garey and Johnson, 1979).  
 
Theorem 2.  The problem 1|moj(item)|∑=Ni iC1  is 
NP-hard in the strong sense. 
Proof.  The proof is based on a reduction of 
3-Partition problem to 1|moj(item)| ∑=Ni iC1 . The 
following instance of 1|moj(item)|∑=Ni iC1  can be 
constructed.  
N = 3m, φ = m, K = b, ρ = 1, σi = ai where i = 1, 
2, …, 3m. 
The threshold value of total weighted completion 
time is defined as  
Y = 3bm(m + 1)/2. 
The decision version of the problem 
1|moj(item)|∑=Ni iC1  asks whether there is a feasible 
schedule such that ∑=Ni iC1 ≤ Y. Clearly, the 
construction can be done in polynomial time. We 
shall show that 1|moj(item)|∑=Ni iC1  has a schedule 
with an objective value less than or equal to 3Kφ(φ 
+ 1)/2 if and only if there exists a solution for the 
3-Partition problem. If this 3-Partition instance has a 
solution, then without loss of generality a partition 
of the ai’s into m groups of 3, each summing exactly 
to b. Thus the total weighted completion time of 
customer orders is ∑ =mj bj13  = 3bm(m + 1)/2. 
Conversely, a solution to 1|moj(item)|∑=Ni iC1 , when 
one exists, provides a partition of the ai’s into m 
groups of 3 and each summing exactly to b and is, 
therefore, a solution to the 3-Partition problem.   
3. The problem 1|moj(lot)|∑ =Ni iC1  
The objective was found in Eq. (1). The 
objective was to minimize the total weighted 
completion times of all orders during the time 
horizon.  
 
Property 1  For the 1|moj(lot)|∑=Ni iC1  problem, 
there exists an optimal schedule in which the total 
number of job is minimal. 
 
Property 2. For the 1|moj(lot)|∑=Ni iC1  problem, 
there exists an optimal schedule in which each job 
consists of all the orders, and the jobs are sequenced 
in descending order of the number of orders of the 
job. 
 
The objective of the Phase I model was to 
find the minimum number of jobs (Φ*), while the 
Phase II model was to find the minimum total 
completion time of orders. 
 
Phase I model 
 
The objective was found in Eq. (1). The 
objective was to minimize the total jobs during the 
time horizon. 
Minimize  Φ = ∑
=
N
j
jW
1
  (1) 
Constraint set (2) ensured that each order is 
assigned to exactly one job.  
Subject to  ∑
=
φ
1j
ijX  = 1   i = 1, 2, …, n  (2) 
Constraint set (3) restricted the customer 
order sizes placed in the same job cannot exceed 
FOUP capacity K.  
∑
=
N
i
iji X
1
σ  ≤ K   j = 1, 2, …, φ  (3) 
Constraint sets (4) and (5) stated the relation 
between Wj and ∑=Ni ijX1 . Constraint set (4) ensured 
that if Wj = 0 then ∑=Ni ijX1  = 0 and if ∑=Ni ijX1  ≥ 
1 then Wj = 1, while constraint set (5) guaranteed 
that if ∑=Ni ijX1  = 0 then Wj = 0 and if Wj = 1 
then∑=Ni ijX1  ≥ 1.  
∑
=
N
i
ijX
1
 ≤ MWj   j = 1, 2, …, φ  (4) 
Wj ≤ M∑
=
N
i
ijX
1
   j = 1, 2, …, φ  (5) 
Constraint set (6) specified the 
non-negativity of Φ and set up the binary 
restrictions for Xij and Wj. 
Φ ≥ 0, Xij is binary   i = 1, 2, …, N; j = 1, 2, …, φ  
