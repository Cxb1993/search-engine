to enter the system until there are enough customers in the system have been served so 
that the number of customers in the system decreases to a threshold value F  
( 0 1F K≤ < − ). At that time, the server requires to take an exponential startup time 
with parameter β  to start allowing customers in the system. Thus, the system 
operates normally until the number of customers in the system reaches its capacity at 
which time the above process is repeated all over again. 
The following notations and probabilities are used throughout this chapter. 
F  threshold level 
K  system capacity ( )1K F> +   
S  service time random variable 
U  remaining service time random variable 
( )S u  distribution function (d.f.) of S  
( )s u  probability density function (p.d.f.) of S  
( )*S θ  Laplace-Stieltjes transform (LST) of S  
( ) ( )* lS θ  l th order derivative of ( )*S θ  with respect to θ  
( )0,0P t  probability of no customers in the system at time t  when the arrivals 
are not allowed to enter the system 
( )0,nP t  probability of n  customers in the system at time t  when the arrivals 
are not allowed to enter the system, where 1,2,..., .n K=  
( )1,0P t  probability of no customers in the system at time t  when the arrivals 
are allowed to enter the system 
( )1,nP t  probability of n  customers in the system at time t  when the arrivals 
are allowed to enter the system, where 1,2,..., 1.n K= −  
0,0P  
steady state probability of no customers in the system when the 
arrivals are not allowed to enter the system 
0,nP  
steady state probability of n  customers in the system when the 
arrivals are not allowed to enter the system, where 1,2,..., .n K=  
1,0P  
steady state probability of no customers in the system when the 
arrivals are allowed to enter the system 
1,nP  
steady state probability of n  customers in the system when the 
arrivals are allowed to enter the system, where 1,2,..., 1.n K= −  
1s  mean service time 
The special case with system capacity K=F+1 is presented in the appendix. 
( ) ( ) ( )1, 1 1, 1 1, 2, , , .K K KP u t P u t P u t
t u
λ λ
− − −
∂ ∂ 
− = − + ∂ ∂ 
 (9) 
 
In steady state, let us define 
( )
→∞
= =0, 0,lim ,    0,1,..., .n n
t
P P t n K  
 
( )
→∞
= = −1, 0,lim ,    0,1,..., 1.n n
t
P P t n K  
 
( ) ( )
→∞
= =0, 0,lim , ,    1,2,..., .n n
t
P u P u t n F  
 
( ) ( )
→∞
= = −1, 1,lim , ,    0,1,..., 1.n n
t
P u P u t n K  
 
and further define 
( ) ( )= =0, 0, ,    1,2,...,n nP u P s u n F . (10) 
From (1)-(10), we can easily obtain the following steady state equations: 
( )0,0 0,10 0 ,P Pβ= − +  (11) 
( ) ( ) ( ) ( )β +− = − + , ≤ ≤0, 0, 0, 1d 0    1 ,
d
n n nP u P s u P s u n F
u
 (12) 
( ) ( ) ( )+− = , + ≤ ≤ −0, 0, 1d 0    1 1,
d
n nP u P s u F n K
u
 (13) 
( ) ( )0, 1, 1d ,
d
K KP u P u
u
λ
−
− =  (14) 
( )1,0 0,0 1,10 0 ,P P Pλ β= − + +  (15) 
( ) ( ) ( ) ( ) ( ) ( )1,1 1,1 0,1 1,0 1,2d 0
d
P u P u P s u P s u P s u
u
λ β λ− = − + + + ,  (16) 
( ) ( ) ( ) ( ) ( ) ( )λ β λ
− +− = − + + + ,
≤ ≤
1, 1, 0, 1, 1 1, 1
d
0
d
    2 ,
n n n n nP u P u P s u P u P s u
u
n F
 (17) 
( ) ( ) ( ) ( ) ( )λ λ
− +− = − + + , + ≤ ≤ −1, 1, 1, 1 1, 1
d
0    1 2,
d
n n n nP u P u P u P s u F n K
u
 (18) 
( ) ( ) ( )1, 1 1, 1 1, 2d .
d
K K KP u P u P u
u
λ λ
− − −
− = − +  (19) 
Further define 
( )
ζ
β −
=
= ≤ ≤∑
1
0, 0,
0
0 ,    1 ,
n
n i
i
P P n K  where ζ ≤ ≤ −=  ≤ ≤
,    0 1,
,    ,
n
n n F
F F n K
 (27) 
and 
( ) ( )βϕ+ = − + , ≤ ≤ −0, 1 , 0, 0,0 0    1 1,n n F n nP P P n K   
where ϕ , ≤ ≤= 

,
1    1 ,
0,    otherwise.
n F
n F
 
(28) 
Using (28) in (20) and (21), we get  
( ) ( ) ( )θθ θ
−
= , ≤ ≤ −
*
*
0, 0,
1
0    1 1.n n
S
P P n K  (29) 
Taking 0limθ →  in (29) and using ˆL'Hospital's  rule once gives 
( ) ( )= , ≤ ≤ −*0, 1 0,0 0    1 1,n nP s P n K  (30) 
where ( ) ( )* 11 0s S= −  is the mean service time. 
Using (27) in (30), we have  
( ) φ= , ≤ ≤ −*0, 0,00    1 1n nP P n K , (31) 
where ( )ζφ β β −
=
= 
+ ≤ ≤
1
1 1
1,                            0,
1 ,    1 .n
n
n
s s n K
 (32) 
Thus, ( ) ( ) ( )* * *0,1 0,2 0, 10 ,  0 ,...,  0KP P P −  can be obtained by using (31). 
Next, we derive the expressions of ( ) ( )1, 0  1nP n K≤ ≤  in terms of 1,0P and 
0,0P . Using (31) in (23)-(24) and then setting θ λ=  in (23)-(26), we finally obtain 
( ) ( ) ( ) ( )( )
* *
1,1 1 0,0 1,0
1,2 *
0
0 ,  
P P S P S
P
S
βφ λ λ λ
λ
− −
=  (33) 
( ) ( ) ( ) ( )( )
βϕ φ λ λ λ
λ
−
+
− −
= ≤ ≤ −
* *
1, , 0,0 1, 1
1, 1 *
0
0 ,    2 2,
n n F n n
n
P P S P
P n K
S
 (34) 
( ) ( )*1, 1 1, 20 .K KP Pλ λ− −=  (35) 
To obtain ( ) ( )*1, 1  1 1nP n Kλ− ≤ ≤ −  in (34)-(35), using (31) in (23)-(24) again, 
differentiating (23)-(26) ( )1l −  times with respect to θ  and setting θ λ= , we 
finally get 
( )λ
κ

+ =


= = −




 
1*
1
,    1,
,                  2,3, , 3,
0,                    otherwise.
n n
n
S
n K  (43) 
Remark: The representative meaning of the above formulation (42) is to sum up all 
possible products of k sκ  in which the total of subscript values of κ  equals n. We 
give an easily understood example for n = 4: 
4 4 3 1 2 2 1 3 1 1 2 1 2 1 2 1 1 1 1 1 1
2 2 4
4 3 1 2 1 2 1    2 3 .
κ κ κ κ κ κ κ κ κ κ κ κ κ κ κ κ κ κ κ κ
κ κ κ κ κ κ κ
Ψ = + + + + + + +
= + + + +
 
 
Using (42) and (43) to solve (2.41) recursively, and including (15) and (33), we finally 
get 
( ) ( ) ( )1,1 1,0 0,00 1 1 ,P A P B P= +  (44) 
( ) ( ) ( )
−
=
 = Ψ + ≤ ≤ − ∑1, 1,0 0,0
2
0 ,    2 1,
n
n n i
i
P A i P B i P n K  (45) 
where 
( ) ( )( )
λ
λλ
λ
λ
−
=

 
−
= = 
   
 ≤ ≤ − 
*
*
2
,                         1,
1
,    2,
,                  3 1,n
n
S
A n n
S
n K
 (46) 
( ) ( )( )
ζ
β
ϕ φ λβ
λ
β φ βϕ φ−
− − − −
=


− =
  +
= − = 
   


− ≤ ≤ −


∑ 
2
*
1, 1
*
1 1, 1
1
,                                              1,
1
,               2,
,      3 1.
n
F
n i i n F n
i
n
S
B n n
S
n K
 (47) 
Substituting (45), (44), and (35) into (39) finally yields 
( ) ( ) ( ) ( ) ( ) ( ) ( ) ( )1 1* 1 * 1 * 1*0, 1, 0,0 1, 1,0
1 1 2
0 0 0 0 0 .
K F K
K i n i
i i i
P P S P S P P Sβ φ λ
− −
= = =
 
= − + + + 
 
∑ ∑ ∑  (56) 
So ( ) ( ) ( )* * *0,1 0,2 0,0 ,  0 ,...,  0KP P P  is known in terms of 0,0P , which can be 
determined using the normalizing condition 
1
0, 1,
0 0
1.
K K
i i
i i
P P
−
= =
+ =∑ ∑  (57) 
To demonstrate the working of the recursive method, we first describe the solution 
algorithm for calculating the steady state probabilities, ( ) ( )*0, 0  0nP n K≤ ≤  and 
( ) ( )*1, 0  0 1nP n K≤ ≤ − . Next, to illustrate the solution algorithm, we provide three 
simple examples where the service time distributions are exponential, k-stage Erlang, 
and deterministic, respectively. 
Let F be the threshold, K be the maximum capacity of the system, and let 
( ) ( )* lS θ  be the l-th derivative of ( )*S θ , where 1,  2,...,l K= . We set the values of 
F, K, and the LST expression of the service time distribution, namely ( )*S θ . The 
steps of the solution algorithm are stated as follows: 
Step 1. For each 0,  1,...,n K= , compute nφ  using (32). 
Step 2. For each 1,  2,..., 1n K= − , compute ( )*0, 0nP  using (31) in terms of 
0,0P . 
Step 3. Compute n ( )1 2n K≤ ≤ −  and nκ ( )1 3n K≤ ≤ −  using (40) and (43), 
respectively. 
Step 4. For each 0,  1,..., 3n K= − , compute nΨ  using (42). 
Step 5. For each 1,  2,..., 1n K= − , compute ( )A n  and ( )B n using (46) and 
(47). 
Step 6. For each 1,  2,..., 1n K= − , compute ( )1, 0nP  using (44) and (45) in 
terms of 1,0P  and 0,0P . 
Step 7. Compute 1,0P  using (48) in terms of 0,0P . Thus ( )1, 0nP  
( )≤ ≤ − 1 1n K  are achieved from Step 6. 
Step 8. For each 1,  2,..., 1n K= − , compute ( )*1, 0nP  using (49) and (50) in 
terms of 0,0P . 
Step 9. For n K= , compute ( )*0, 0nP  using (56) in terms of 0,0P . 
Step 10. Determine 0,0P  using (57). Thus ( ) ( )*0, 0  1,  2,...,nP n K=  are 
achieved from Steps 2 and 9, and ( ) ( )*1, 0  0,  1,..., 1nP n K= −  are 
achieved from Steps 7 to 8. 
( ) ( ) ( )1,1 1,0 0,00 1 1P A P B P= + ,  
( ) ( ) ( )1,2 0 1,0 0,00 2 2P A P B P = Ψ +  ,  
( ) ( ) ( ) ( ) ( )1,3 1 1,0 0,0 0 1,0 0,00 2 2 3 3P A P B P A P B P   = Ψ + + Ψ +    .  
Step 7. Compute 1,0P  using (48) in terms of 0,0P . Thus ( ) ( )1, 0  1 3nP n≤ ≤  are 
achieved from Step 6. 
From (48), we finally have 
( )( )2 3
1,0 0,02
1
P P
σ α α σ σ σ
α
− + + +
= , ( )( )*1,0 1,00P P= ,  
( ) ( )( )21,1 0,021 10P Pσµ α σ σα
− + +
= ,  
( ) ( )( )1,2 0,021 10P Pσµ α σα
− +
= ,  
( ) ( )1,3 0,0210P Pσµ αα
−
= .  
Step 8. For each 1,  2,  3n = , compute ( )*1, 0nP  using (49) and (50) in terms of 0,0P . 
Using (49) and (50) yields 
( ) ( )( )2*1,1 0,021 10P Pσ α σ σα
− + +
= , ( ) ( )( )*1,2 0,021 10P Pσ α σα
− +
= , 
 
and ( ) ( )*1,3 0,0210P Pσ αα
−
= .  
Step 9. For 4n = , compute ( )*0, 0nP  using (56) in terms of 0,0P . 
Using (56), it follows that 
( ) ( )*0,4 0,0210P Pαα
−
= .  
Step 10. Determine 0,0P  using (57). Thus ( ) ( )*0, 0  0,  1,...,4nP n =  are achieved 
from Steps 2 and 9, and ( ) ( )*1, 0  0,  1,  2,  3nP n =  are achieved from Steps 7 
to 8. 
( ) ( ) ( )( )
2
0,0 2 2 31 3 1 1 3 3 2
P
α
α α α α σ α α σ σ σ
=
+ − + − + − + + + +
. 
 
( ) ( ) ( )1,1 1,0 0,00 1 1P A P B P= + ,  
( ) ( ) ( )1,2 0 1,0 0,00 2 2P A P B P = Ψ +  ,  
Step 7. Compute 1,0P  using (48) in terms of 0,0P . Thus ( ) ( )1, 0  1 2nP n≤ ≤  are 
achieved from Step 6. 
It implies from (48) that 
( ) ( )( ) ( )
( )
3 2
1,0 0,02 2
1 1 3 2 1 4 6
1 4 6
P P
τ γ τ τ γ γ τ τ
τ τ γ
 
− + − + + +
 
=
+ +
, ( )( )*1,0 1,00P P= ,  
( ) ( )( )( )( )
3
1,1 0,02 2
1 1 3 2
0 3
1 4 6
P P
τ µ τ γ γ
τ τ γ
+ − −
=
+ +
, 
 
( ) ( )( )( )
3
1,2 0,02 2
1 3 2
0 9
1 4 6
P P
τ µ γ γ
τ τ γ
− −
=
+ +
. 
 
Step 8. For each 1,  2n = , compute ( )*1, 0nP  using (49) and (50) in terms of 0,0P . 
Using (49) and (50) yields 
( ) ( )( )( )( )( )
2
*
1,1 0,02 2
1 1 3 2 1 3 3
0
1 4 6
P P
τ τ γ γ τ τ
τ τ γ
+ − − + +
=
+ +
, 
 
and ( ) ( )( )( )2*1,2 0,021 3 2 1 3 30P Pτ γ γ τ τγ
− − + +
= .  
 
Step 9. For 3n = , compute ( )*0, 0nP  using (56) in terms of 0,0P . 
It follows from (56) that 
( ) ( )( )( )( )
2
*
0,3 0,02 2
1 3 2 3 10 10
0
1 4 6
P P
γ γ τ τ
τ τ γ
− − + +
=
+ +
. 
 
Step 10. Determine 0,0P  using (57). Thus ( ) ( )*0, 0  0,  1,...,3nP n =  are achieved 
from Steps 2 and 9, and ( ) ( )*1, 0  0,  1,  2nP n =  are achieved from Steps 7 to 8. 
( ) ( ) ( )1,1 1,0 0,00 1 1P A P B P= + ,  
( ) ( ) ( )1,2 0 1,0 0,00 2 2P A P B P = Ψ +  ,  
Step 7. Compute 1,0P  using (48) in terms of 0,0P . Thus ( ) ( )1, 0  1 2nP n≤ ≤  are 
achieved from Step 6. 
We find from (48) that 
( ) ( )
( )1,0 0,02
1 1 1
1
e
P P
e
ρ
ρ
α α ρ α
α ρ ρ
 
− + − − 
=
+ −
, ( )( )*1,0 1,00P P= ,  
( ) ( )( )1,1 0,02
1
0
1
P P
e ρ
α µ
α ρ
−
= −
+ −
, 
 
( ) ( )( )1,2 0,02
1
0
1
P P
e ρ
α ρµ
α ρ
−
= −
+ −
. 
 
Step 8. For each 1,  2n = , compute ( )*1, 0nP  using (49) and (50) in terms of 0,0P . 
Using (49) and (50) yields 
( ) ( )( )( )
*
1,1 0,02
1 1
0
1
e
P P
e
ρ
ρ
α
ρα ρ
− −
= −
+ −
 and ( ) ( )*1,2 0,0210P Pαρα
−
= − . 
 
Step 9. For 3n = , compute ( )*0, 0nP  using (56) in terms of 0,0P . 
It follows from (56) that 
( ) ( ) ( ) ( )( )
*
0,3 0,02
1 2 1 1
0
1
e e
P P
e
ρ ρ
ρ
α ρ
ρα ρ
 
− − − +
 
=
+ −
. 
 
Step 10. Determine 0,0P  using (57). Thus ( ) ( )*0, 0  0,  1,...,3nP n =  are achieved 
from Steps 2 and 9, and ( ) ( )*1, 0  0,  1,  2nP n =  are achieved from Steps 7 to 
8. 
( )
( ) ( ) ( )
2
0,0
1
22 2 2
1
1 2 1 .
P e
e
ρ
ρ
ρα ρ
ρ ρ α α αρ α ρ α α
−
= + − ×
 + + − + + − − − −
 
 
 
5. Optimal F policy  
Our analysis is based on the following system performance measures of the F  
Case 4: 5,  225,  300,  350.h b s blC C C C= = = =  
Case 5: 10,  225,  300,  350.h b s blC C C C= = = =  
In this section we provide the numerical results of the optimal value *F  and the 
minimum expected cost for three interarrival time distributions and specific values of 
λ , µ , β . We first fix ( ),µ β  = (1.0, 3.0) and choose different values of λ  = 0.5, 
0.6, 0.7. Next, we fix ( ),λ β  = (0.8, 3.0) and consider various values of µ = 1.0, 1.1, 
1.2. Finally, we fix ( ),λ µ  = (0.8, 1.0) and select different values of β = 2.0, 4.0, 
5.0. 
The optimal value of F, *F , and its minimum expected cost ( )*TC F  for the 
above five cases are shown in Tables 1-3. For fixed values of ( ),µ β  and various 
values of λ  in Tables 1-3, we observe that (i) ( )*TC F  increases as λ  increases 
for any case; and (ii) *F  decreases as λ  increases for any case. For fixed values of 
( ),λ β  and various values of µ  in Tables 1-3, we find that (i) ( )*TC F  decreases 
as µ  increases for any case; and (ii) *F  increases as µ  increases for any case. 
Again, for fixed ( ),λ µ  and various values of β  in Tables 1-3, we observe that (i) ( )*TC F  slightly decreases as β  increases for any case; and (ii) *F  does not 
change at all when β  changes from 2.0 to 5.0 for any case. Intuitively, *F  is 
insensitive to changes in β . 
It can be easily see from Tables 1 through 3 that (i) *F  increases as hC  
decreases or blC  increases (see cases 4-5 and cases 1-2); and (ii) hC  and blC   
have a larger effect on *F  than bC  and sC   (see cases 3-4 and cases 2-3).  
無研發成果推廣資料 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  

