 1 
???????????????????? UI????????
??(3/3) 
A Visual and Reuse-based software construction approach for the 
user look and feel design and implementation of pervasive device 
(3/3) 
?????NSC 96-2221-E-009-024- 
?????2007 ? 8 ? 1 ?? 2008 ? 10 ? 31 ? 
???????  ??????????? 
???? 
???? 
??????????????????????????????
???????PDA ???????????????user look and feel?
????????????????, ????????????????
?????????? 1-1? 
 
 
 
? 1-1 The process of the proposed methodology 
 
?????????????, ???????????????? Man 
Machine Interface (MMI) ??????????????????? 
A) Generic UI template for the user look and feel design of cellular 
 3 
and feel program? 
????????? UI ??????????????????????
????????Application software function????????????
??????????? UI ????????????????????? UI
??????? UI programmer???????????? UI pattern??? ?
UI Visual Authoring System??????????????????????
???? UI ???????? 
 
???????????????????????????????????
??????Object-oriented Technology???????????????? 
User look and feel? User Interface (UI)? P rvasive devices. 
 
 
???? 
It has been shown that the major effort spent on the design and implementation 
of the system software for pervasive  devices (or handset device such as cellular phone) 
is the Man Machine Interface (MMI). The User Interface (UI) has become a major 
consideration for the new model release of pervasive devices. 
Based on the previous years’ NSC research result, A Visual and Reused-based 
Paradigm for Software Construction, we extend this model to support the user look 
and feel design and implementation for pervasive devices such as cellular phone. 
Specifically, an extended methodology is proposed as depicted in Figure 1-2. 
Figure 1-2 The process of the proposed methodology 
 5 
This implies that both UI designers and UI programmers have to follow a long 
iterative process in order to meet the final UI requirement specification. To reduce 
UI designer’s heavy workload in this long iterative process, we construct a generic 
UI template for UI designers to easily design and authoring the user look and feel 
patterns. These created UI patterns can be reused easily to create new user look and 
feel for new pervasive devices. To reduce UI programmer’s tedious workload in this 
long iterative process, we construct an UI pattern generator to automatically generate 
the UI program according to the UI pattern generated from the generic UI template.  
 
Based on this innovative approach, programmers can concentrate on the 
application functional design and implementation without being bothered by the UI 
designers. The UI designer alone can complete the UI design and implementation 
without bothering the UI programmers since the UI program will be generated 
automatically by using the UI pattern generator. 
 
Keywords?Software Productivity, Software Reuse, Reusable Component, Reusable 
Multimedia Component, Object-oriented Technology, Visual Programming, Visual 
Requirement, User look and feel, User Interface (UI), Pervasive devices. 
 
 
????????? 
Developing application software with sophisticated and elegance user interface is a 
complex and time-consuming task. Studies have shown that near 80 percent of the 
code of applications is devoted to the user interface (UI) [Ed Lee, 1990], and that 
about 50 percent of the implementation time is devoted to implementing the UI 
portion [Myers and Rosson 1992]. Thus, UI plays a significant role in the 
development of application software. For year, researches in software engineering 
area have been seeking better solutions to aid system developers to build user 
interface. 
In general, the process of developing a user interface includes the following 
activities or steps:  
1) UI designers create the UI requirement specification using text, graphic, 
illustrations, and relevant multimedia representation.  
 7 
.  
Figure 2-2 A Visual-based software construction model 
 
In (Chen et al., 2004), a visual-based software construction (VBSC) model has 
been proposed for supporting this software construction model. Here, we propose a UI 
design patterns generator to generate the user look and feel of mobile phone. The 
proposed UI design patterns generator has integrated into the visual-based software 
construction methodology. In order to demonstrate the feasibility and applicability of 
the proposed UI design patterns generator, a simulator is designed and implemented 
for carrying out the software simulation.   
The benefit of the proposed approach is that it enables UI designers to generate user 
look and feel easily and quickly, and generate the target UI program without writing 
any textual code. Thus the proposed approach is very suitable for UI designers. In 
addition, the created UI pattern can be reused by UI designer to generate target user 
look and feel. Therefore, it can reduce UI application system’s development time.   
 
There are a few specific tools available for creating the user look and feel for 
pervasive devices based on the Visual authoring approach. The most common tools 
found in industrial sectors for the UI development of pervasive devices are eMbedded 
Visual C++, Rapid, and Symbian’s Eclipse tools. 
Microsoft Windows Mobile 2003 Second Edition (mobile phone operating system) 
not only provides a complete developing tool on this platform such as GUI framework 
and Visual developing environment, eMbedded Visual C++, but also a simulator to 
verify the executing result from the machine. On creating the UI, it offers an 
authoring environment for limited functions such as designing pull down menus. If 
users want to create a more complicated design such as inserting a picture on the 
screen, they need to write the script program.   
Rapid is a crossed platform system, developed by e-SIM, for embedded system 
design, implementation, and simulating. It provides object layout during UI 
 9 
 
Fig. 3-1 the Framework of UI templates generator and visual-based UI construction 
methodology 
 
The framework includes the following major parts: (1) The UI templates generator, 
which is used to create the initial UI prototype; (2) The visual UI authoring tool, 
which is used to modify or fine tune UI template (created by UI templates generator) 
to generate UI prototype; (3) The program generator, which is used to produce the 
target application system code according to the target UI prototype generated; (4) The 
software design framework, which is used to generate software system architecture 
for the target application system; and (5) The simulator, which is used for software 
simulation. 
UI designer: A person who is responsible for the UI design of the software system. 
He or she can use UI templates generator to create a UI template and use the visual UI 
authoring tool to modify or fine tune the UI template. 
Generic UI template: It is consisted of UI structure template, UI layout template, 
and UI style template which will be elaborated in section 3.2.2. 
UI Template constructor: A tool for making new UI Templates. It instantiates the 
generic UI template to construct the UI template and then stores it into UI templates 
database through the UI template manager.  
UI Template manager: A database management system for managing UI templates; 
it provides an interface for adding or deleting UI templates as well as for retrieving an 
existing UI template. 
UI template database: A database for storing UI templates.  
 11 
the mobile device. Then, there will be several functional buttons ready for pressing to 
initiate the desired function. To press a specific functional button, it takes us to the 
corresponding screen associated with the function. These functional buttons are 
usually organized into a tree style structure as shown in Fig. 3-2(a) and consists of 
two basic elements 1) Node that represents a screen or a function and 2) Link that 
defines the relationship between screen and screen or screen and function. 
A screen (or node), which is not a leaf, can be considered as a container (or scene) 
that may contains many actors (or UI components) including, text actor which 
provides function of text representation, icon actor which provides function of 
drawing representation, input box actor which allows user to input data during 
execution of a specific function such as pressing telephone number, and list box actor 
which represents function of multiple data. A link provides a binding among nodes 
and functions, and control information for a screen to another screen (node to node) 
navigation.  
A screen or node at leaf level will be considered as a function. There are many 
common functions in most of the current mobile devices including the essential 
functions (such as communication, phone books, and conversation records) and 
value-added functions (such as recording, camera, Java game, infrared transmission). 
These functions usually are implemented by API programmers.  
Thus, the UI of mobile device can be quite different if the UI navigation structure 
is different, the layout of actors in a container (or scene) is different, and the style of 
actors (leave node) is different. In the following section, we investigate the UI of 
different mobile devices to quest for the common presentation template of mobile 
device. 
 
3.2.2 Generic UI Template 
After comparing the UI of different mobile devices, we find that there are some 
similarities of appearance of user interface when these mobile devices are made by 
the same manufacturer. Nevertheless, even though the mobile device comes from 
 13 
  
(a) Layout1 (b) Layout2 
Fig. 3-3 Two different Layouts 
In general, the UI positioning arrangement has regularity. Taking an example of 
tree structure of UI, the layout is almost the same in the same level of scene. We only 
needed to define few of them then we could describe layout of each scene in the entire 
UI completely. Therefore, we could use a layout template to create the same layout for 
each scene under consideration in UI design of a mobile device. The layout template 
consisted of layout data of each scene. Layout of scene is made of 1) name of layout 
and 2) each actor’s information in the scene.  
 
n Style Template 
The other factor that affects the UI prototype of a mobile device is the UI style. 
The UI style considers the style of actor’s appearance. An actor’s appearance is 
decided by its attributes in a scene. Even though it is the same actor, different 
attributes may produce different appearances.  
As shown in Fig. 3-4, appearance based on icons (left hand side) could be changed 
to be appearance based on icon with text (right hand side) by changing its attributes. 
Therefore, style template is used to change each actor’s appearance in the scene. The 
style template consisted of each actor’s style data which is the relevant attributes of 
actor’s appearance.  
 
 15 
 
Fig. 3-5 Generic UI templates for mobile devices 
3.2.4 UI Templates Generation Procedures Using UI templates generator  
How to use the UI templates generator to create different UI templates is 
summarized below.  
Step 1 Select a Generic UI Template 
The UI designer needs to select the required type of structure template, layout 
template, and style template.  
 
Step 2 Generate the complete UI structure from the chosen structure template  
The system sets up all the scenes and actors according to the structure template 
chosen by the UI designer and sets up the required file for the visual UI authoring tool 
such as script file, multimedia file, and so forth. As shown in Fig. 3-6, we chose the 
tree structure template. From the “Stand By” scene, the system sets up all scenes, 
actors, and required files on each scene.  
 
Step 3 Generate the desired layout based on the information in layout template for 
each scene (or node in the tree structure) 
 17 
 
Fig. 3-6 Tree structure of UI 
 
 
Fig. 3-7 Layout selection 
 
 
Fig. 3-8 Style choice 
 
 19 
this methodology, we can obtain initial version of UI template for mobile devices. 
2. Visual UI authoring: This stage falls under the visual UI authoring tool section of 
this methodology. In this stage, we generate a target UI prototype to meet user’s UI 
requirement. 
3. Application code generation: This stage falls under the program generator section 
of this methodology. In this stage, we produce a target application system code. 
3. Simulation: This stage falls under the simulator section of this methodology. In this 
stage, we verify whether the produced target software system code works normally 
under the simulator. 
In the following subsections, we elaborate this development process. 
 
3.3.1 UI template Generation 
 
The first stage is UI template generation (refer to Fig. 3-11). Mobile UI template 
generator instantiates the generic UI template to construct the UI templates, and then 
stores it into UI templates database through UI template manager. By the end of this 
stage, we will obtain an initial version of the UI template for the mobile device under 
consideration. 
 
 
Fig. 3-11 Generating initial UI prototype using UI templates generator 
 
 
 21 
3) Code optimizer: If the efficiency is not good during program execution, it enters 
into this step to adjust application system code until the efficiency is met. 
Eventually, the target application system code for the mobile device is generated 
by the end of this stage. 
 
 
Fig. 3-13 Generation application code using program generator 
 
3.3.4 Simulation  
After the above stages are completed, we receive the application program code of 
the target platform and enter the last simulation stage (refer to Fig. 3-14). In this stage, 
we have software and hardware simulation two phases: 
1) Software simulation: We combine device module and application system code to 
do software simulation on laptop through the simulator, which verifies whether 
the generated application system works normally and meets the expectations.  
2) Hardware emulation: When the software simulation is completed, we could 
download program to EPROM (Erasable Programmable Read-Only Memory) 
directly, and execute it on hardware (the target mobile device). 
 
 
Fig. 3-14 Using simulator to do software simulation  
 23 
 
Fig. 3-15 The relationship between UI kernel and other components 
 
1. The Signaling protocol. It is the communication and synchronization 
mechanism that connects the UI kernel, UI task, DSC task, and GSM tasks.  
2. The UI kernel. It distributes tasks that request to fulfill the execution of 
application functions (UI tasks). The UI kernel does not directly request driver 
functions, which allows the generic software framework to serve as a 
hardware-independent platform for software applications. Each task has a mailbox for 
storing signals. Signal behavior is task-dependent. 
3. The UI task. This task displays the current scene content on a handset panel 
based on the requested signals received from the UI kernel. 
3. The GSM task. It is a software component that manages the GSM subsystem; 
this task provides a stable interface via the signaling protocol. In response to the 
requested signals from the UI kernel, the GSM provides information on the current 
communication status. The AT command interface provides a connection between 
the GSM task and GSM sub-system; the GSM task must conform to the signaling 
protocol to provide GSM sub-system services. 
5. The DSC task. It is a software component that manages the digital camera 
hardware; this task controls the DSC module to perform the services of snapshot, 
image uploading, and image previewing.  
6. The keypad ISR. It is registered to the interrupt target system; this ISR 
 25 
communication services. It integrates the GSM sub-system and provides GSM 
services via the signaling protocol.   
  
3.4.2.3 Implementing the DSC Task According to the Signal Protocol 
Since DSC device specification is not unified, we were unable to design a system 
using a single architecture. We therefore designed a DSC software framework 
containing a DSC task, DSC API, DSC driver, and DSC device. The DSC driver is the 
programming code for controlling the DSC device, and the DSC API is a set of library 
functions for integrating the DSC driver, which is used for calling purposes by the 
DSC task. We take the Sunplus which is DSC supplier as DSC device.   
3.4.2.4 Porting Keypad ISR to a Keypad Device 
The Keypad ISR is executed via the key press interrupt. Each time a key is 
pressed, the processor instructs the Keypad ISR to send a signal to the UI kernel. To 
create a keypad ISR for the target software framework, a programmer must register 
the keypad ISR on the interrupt vector table of the target system. 
 
3.4.2.5 Porting a Display API to a Panel Device 
The display API makes it possible for an application to draw images and text on a 
panel. We used the Borland Visual Component Library (VCL) to implement a display 
API for simulation purposes.  
Once a GKI class library is ported to a target OS (ex. Windows 2000) and GSM 
task, DSC (ex. SUNPLUS DSC) task, and Keypad ISRs are implemented for specific 
hardware devices, then software system architecture is created (refer to Fig. 3-16). 
 
 27 
 
n without the Use of Created UI Template to Generate Target UI Prototype 
If there is no suitable UI template in the UI templates database can be used 
directly, we have to use a visual UI authoring tool to generate target UI prototype. 
 
n Using the Created UI Template to Generate Target UI Prototype 
If there is suitable created UI template, we can modify it into target UI prototype 
by a visual UI authoring tool. This modification includes (1) Replacing icon and text 
from one of the screens; (2) Deleting some screens; (3) Creating one screen to the 
created UI template. 
  
3.5.4 Data and Analysis 
l Case 1: Development Time of Generating a Six-screen UI Prototype 
Fig. 3-17 presents the time spent to generate a six-screen UI prototype with the  
use of UI templates generator and without the use of UI templates generator. Based on 
the collected data, we found that the average time spent to generate this target UI 
prototype with the use of UI templates generator is 9.92 minutes and the average time 
spent without the use of UI templates generator is 36.38 minutes. The development 
time without the use of UI templates generator is about 3.7 times [(36.38 / 9.92)] 
longer than with the use of UI templates generator. The 27-minute difference 
represents a time savings of 73%. 
 
 29 
l Case 3: Development Time of Generating an Eighteen-screen UI prototype 
Fig. 3-19 presents the time spent to generate an eighteen-screen UI prototype with 
the use of created UI template and without the use of created UI template. Based on 
the collected data, we found that the average time spent to generate this UI prototype 
with the use of created UI template is 10.85 minutes and the average time spent 
without the use of created UI template is 80.05 minutes. The development time 
without the use of created UI template is about 7.4 times [(80.05 / 10.85)] longer than 
with the use of created UI template. The 69-minute difference represents a time 
savings of 86%. 
0
20
40
60
80
100
120
140
160
1 4 7 10 13 16 19 22 25 28 31 34 37
Student No.
Ti
m
e(
m
in
.)
Without the use of created UI template
With the use of  created UI template
 
Fig. 3-19 Time spent in generating an eighteen-screen UI prototype 
 
Table 3-1 Average time spent in generating six, twelve, and eighteen screens UI 
prototype 
       Time spent 
 
 
Screens 
Average time spent 
with the use of  
created UI template 
(Minutes) 
Average time spent 
without the use of  
created UI template 
(Minutes) 
Time ratio between average 
time spent without the use 
of created UI template and  
average time spent with the 
use of created UI template 
six screens  9.92 36.38 3.7 
twelve screens 10.38 53.10 5.2 
Eighteen screens 10.85 80.05 7.4 
 
From Table 3-1, we can note that (refer to column 3) without the use of created UI 
 31 
3.6.1 Create an Initial Version UI Template  
 
Step 1: First, we launch and initialize the Visual UI Template system by opening a 
new UI Template project. The screen will appear as shown in Fig. 3-21. 
 
Step 2: Click the “Template” button as shown in Fig. 3-21, then the system will lead 
us to define the Structure Template, Layout Template, and Style Template. First, we 
create an UI structure instance from the Structure template.  In our current system, 
there are two, tree and list, for users to choose from.  The rest of other UI structure 
could be generated by re-assembly. Fig. 3-22 shows the result of selecting “tree” 
structure. Fig. 3-23 shows the result of selecting “list” structure. 
 
 
Fig. 3-21 Main screen of Visual UI Template system 
 
Click “Template” button to define the UI 
structure template, layout template, and 
style template 
 33 
Template (refer to Fig. 3-24).  There are two choices for user; one is icon at the top 
and text at the bottom. The other one is icon at the bottom and text at the top. The rest 
of other UI layout could be generated by re-assembly.  
When we select “mobile layout 1”, its layout is icon at the top and text at the 
bottom as shown in Fig. 3-25. If we select “mobile layout 2”, its layout is icon at the 
bottom and text at the top as shown in Fig. 3-26. We could select the suitable layout 
by clicking “OK” button to create an UI layout instance. 
 
Step 4: At last, we create an UI style instance by Style Template. Refer to Fig. 3-27. It 
allows user to select actor of UI presenting by icon or icon with text. In our system, 
we provide style with icon or style with icon plus text. The rest of other UI style could 
be generated by re-assembly.   
 
 
Fig. 3-24 Main screen of UI layout template 
 
 
 
 35 
  
Fig.  3-28 Actor is presented by 
icon 
Fig.  3-29 Actor is presented by icon with text 
 
 
At this moment, we have obtained an initial UI template for a handset device as 
shown in Fig. 3-30. Click “Save” button to save it. 
 
 
Fig. 3-30 Initial UI templates for a handset device 
 
3.6.2 Using Visual UI Authoring Tool to Fine Tune UI Template 
 
 37 
Step 6: adding new buttons. Because the “Setting” node is newly created, we have to 
add content of this node. Its content includes following three items: “Standard”, 
“Home”, and “Quiet”. We support a graphical editor (refer to Fig. 3-33) which 
enables UI designers to select background color, picture, and text actors. In addition, 
there are actors of list box and input box for designers to select from. Fig. 3-34 shows 
the final result after authoring. 
 
Fig. 3-33 Graphical editor 
 
Picture 
Text  
The edit area 
Text  
Input box 
List box 
Background 
 39 
Then, we select a new icon for insertion from the icon bank provided by our system as 
shown in Fig. 3-36.  
 
 
Fig. 3-36 Choices a button to replace 
 
Now, we have fined tune the UI template generated by UI design template generator 
in order to meet the UI requirements of the target application system.  
 
3.6.3 Generating an Target Application System Code  
In the following, we present the setting and binding features provided in the 
environment system to generate the target application system code. Figures 3-37 to 46 
show the details of how the target application system code can be generated.  
Fig. 3-37 depicts how to perform the model, screen size, and function setting 
features. In the Figure, we click on the “Setting” button then set up the screen size of 
the mobile device on the panel page, and on the function page module, set up the 
required function of the mobile device. Here, we assume there are two function 
modules, one is GSM and the other is sound. After choosing the required function 
module, click the “OK” button to complete the setting function module. The equipped 
Step 1: Click this button 
Step 2: choice a graphic type 
Step 3: choice a graphic style 
 41 
 
Fig. 3-38 The equipped function module of mobile device 
 
Make sure the links on the screens are correct to operate the mobile device 
correctly. We set the linking function with other screens on every scene. First, right 
click on the object as circled in Fig. 3-39, choose Link from the menu to view whether 
its type is set to link, and set the link to a screen (Step 1 of Fig. 3-39). Meanwhile, we 
also check which button on the mobile device corresponds to the button on the screen 
and triggers the menu item (Step 2 of Fig. 3-39). 
After making sure the screen linking is correct, we bind the function module of 
the mobile device with the screen of the mobile device together (Fig. 3-40). We have 
to choose the screen for binding first (Step 1 of Fig. 3-40), and then click the “Bind” 
button (Step 2 of Fig. 3-40). Fig. 4-21 depicts an example of the function setting for 
the “OK” button. Select the item for function binding (Step 1 of Fig. 3-41), and then 
click the “Binding” button (Step 2 of Fig. 3-41).  
Fig. 3-42 depicts the associated functions and function key available for binding 
and simulation. On the function page, we have a binding option on the function menu; 
and from the trigger page, we set which button corresponds to the actor as shown on 
the bottom right side. Up to this point, we have completed the function binding 
 43 
 
Fig. 3-40 Execute binding function  
 
 
Fig. 3-41 Function setting for the “OK” button 
Step1: Select Dial  Item 
Step 2: Choose Bind 
function module 
Step1: Click “O K” button 
Step 2: Click “Binding” button  
 45 
 
Fig. 3-43 Generating the target application system code 
 
   
Fig. 3-44 Screen of stand by Fig. 3-45 Dial a number Fig. 3-46 Take a picture 
 
 
 
Click “GenCode” button to 
generate application system 
code 
 47 
two parts by using function binding system. In this way, any future changes of the 
UI will not affect the corresponding application function implementation. Vice 
versa for the case that the UI is not changed but the associated application 
functions needed to be changed.  
3) Long iterative process between UI designers and UI programmers can be avoided 
while using the proposed approach to design and implement the UI prototype of 
the mobile devices. 
4) Rich UI template can be supported by the proposed UI templates generator to ease 
a UI designer to reuse to create target UI prototype. Hence, it can reduce time 
spent while developing application system.  
5) The software system architecture of mobile device can be designed by the 
proposed generic software framework, which reduces the need to re-design UI 
following OS or hardware device changes. 
 
 
? . ??????  
 In the 1st year project, we have completed three UI templates (structure template, 
layout template, and style template) for the UI construction of pervasive devices. We 
also conduct an experiment to substantiate the advantages of using the three UI 
templates to design the UI of pervasive devices. From the experimental results, we 
find the use of three UI templates will speedup the construction of UI for pervasive 
devices and the maintenance of UI program will be much easier.  
In the 2nd year project, we have comple ted the Generic design framework for UI 
and application function integration of handset device and Generic software 
framework for application function or API module design and implementation 
In the 3rd year project, we have completed the Generic software framework for 
application function or API module design and implementation, and Simulator 
implementation for the MMI simulation of handset device. 
 49 
??? ??? ??? ??? (?????I  269189) 
2) ?????????????????? (??????????????
?????) ???????????? (??) ?????????? ?
?? ??? ??? (pending) 
3) A Generic and Visual Interfacing Framework for Bridging the Interface between 
Application Systems  and Speech Recognizers  (USA) inventors: ??? ??? ?
??(pending) 
 
Technology transfer: 
1) MPEG4 ?????????? (??????????),  
2) ????????????? (???????????),  
3) ?? Java???????????????????? (???????
????),  
 
?.  ???? 
[1] Ben Shneiderman, Catherine Plaisant, Design the user interface, 4th, Addison Wesley, 2005 
[2] Ian Sommerville, Software Engineering, 8th, Addison Wesley, 2006 
[3] Roger S. Pressman, Software engineering: A practitioner’s approach, 6th, McGraw-Hill, 2005.  
[4] Wikipedia: http://en.wikipedia.org 
[5] Graphical User Interfaces and Graphic Standards , Jon Peddie, 1992, McGraw-Hill 
[6] E. Lee, “User-interface development tools,” IEEE Software , Vol. 7, 1990, pp. 31-36.  
[7] B. A. Myers, “User interface software tools,” ACM Transactions on Computer-Human 
Interaction, Vol. 2, 1995, pp 63-103. 
[8] B. A. Myers, S. E. Hudson, R. Pausch, “Past, present, and future of user interface software 
tools,” ACM Transactions on Computer-Human Interaction, Vol. 7, 2000, pp. 3-28. 
[9] B. Shneiderman, “Creating creativity: user interfaces for supporting innovation,” ACM 
Transactions on Computer-Human Interaction, Vol. 7, 2000, pp.113-138. 
[10] S. Lauesen, User Interface Design, Addison Wesley, 2005.  
[11] C. Frauenberger, T. Stockman, V. Putz, R. Holdrich. "Mode independent interaction pattern 
design," in Proceedings of the Ninth International Conference on Information Visualization 
(IV'05), 2005, pp. 23-30.  
[12] R. Jeffries, "Designing interfaces for programmers," IEEE Software , Vol. 14, 1997, pp. 89-91 
[13] D. J. Chen, M. J. Tsai, J. C. Dai, David TK, Chen, “Visual based software construction: visual 
requirement authoring tool and visual program generator,” in Proceedings of the International 
Computer Symposium, 2004, pp.171-176. 
[14] D. J. Chen, W. C. Chen, K. M. Kavi, “Visual requirement representation,” The Journal of 
Systems and Software  61 (2002), pp. 129-143. 
[15] D. J. Chen, S. K. Huang, “Interface of reusable software components,” Journal of 
Object-Oriented Programming, Vol. 5, 1993, pp 42-53. 
 51 
[36] Jyi-Sheng Tyan, The Design and Implementation of a Script Language and Playback for 
Scenario-Based Electronic Book, N.C.TU. Taiwan, Master Thesis, 1999. 
[37] Chwan-Hung Wang, “On the Enhancement of an Multimedia Authoring Tool for the 
Visual-Based User Interface Requirement Representation”, N.C.T.U, Taiwan, Master Thesis, 
2002. 
[38] Jia-Chen Dai, “Visual-Based User Interface Generator,” N.C.T.U Taiwan, Master Thesis, 2002 
Jia-Chen Dai, “Visual-Based User Interface Generator”, N.C.T.U Taiwan, Master Thesis, 
2002. 
[39] G. E. Krasner, S. T. Pope, “A cookbook for using the model-view controller user interface 
paradigm in Smalltalk-80,” Journal of Object-Oriented Programming, 1998, Vol.1, 1998, pp. 
26-49. 
[40] Shang-Ting Yang, “User look and Feel Design for Handset Devices Based on Visual 
Requirement Authoring and Program Generating Methodology,” N.C.T.U Taiwan, Master 
Thesis, 2003. 
[41] D. Martin, I. Sommerville, “Patterns of cooperative interaction: Linking ethnomethodology and 
design,” ACM Transactions on Computer-Human Interaction, Vol. 11, 2004, pp.59-89. 
[42] K. Hornbæk, B. B. Bederson, C. Plaisant, “Navigation patterns and usability of zoomable user 
interfaces with and without an overview,” ACM Transactions on Computer-Human Interaction, 
Vol. 9, 2002, pp. 362-389. 
[43] D. R. Olsen, B. W. Halversen, “Interface usage measurement in a user interface management 
system,” in Proceedings of the 1st annual ACM SIGGRAPH Symposium on User Interface 
software, 1988, pp. 102-108. 
[44] V. Novak, C. Sandor, G. Klinker. "An AR workbench for experimenting with attentive user 
interfaces," in Proceedings of the Third IEEE and ACM International Symposium on Mixed 
and Augmented Reality (ISMAR'04), 2004, pp. 283-285, 
[45] X. Kong, L. Liu, D. Lowe, "Supporting Web User Interface Prototyping through Information 
Modeling and System Architecting," in Proceedings of the IEEE International Conference on 
e-Business Engineering (ICEBE'05), 2005, pp. 63-70. 
 53 
Figure A-1).  
Main screen has two text actors; one is “Software Demo” actor, the other is 
“Video Player” actor. There is only one image actor on main screen which is . 
“Play and Snapshot” screen has four text actors including Size, Play, Snapshot 
and Back. There are six image actors on Snapshot screen which are , , , 
, , . 
 
  
Fig. A-1 Main screen of the video player UI 
application system 
Fig. A-2 Snapshot screen of the video player UI 
application system 
 
Size : To enlarge or shrink the image including Large, Medium, and Small which 
is presented by , , and  respectively.  
Play: To play video by clicking  icon. 
Snapshot: To take a picture using  icon.  
Back: To return to Main screen by clicking icon . 
 
2. Maintain the Video player Application System 
We add following functions to video player UI application system: 
(1) Add help function to software demo screen. If you encounter any problems, 
link following website for assistance. You have to add one text actor (Help) 
and one image actor ( ) here. 
(2) Add function of volume adjustment in play screen which can turn up or turn 
down volume. You have to add one text actor (Contrast) and two image 
actors ( , ) here. 
 55 
Appendix B: Generating Target UI Prototype 
  
B.1 Generating a Six-screen UI Prototype 
 
At the first phrase, a six-screen UI prototype (Fig. B-1) was generated which 
includes Stand by, Menu, Dial, Message, Address Book, and Settings. The actor 
layout of each screen is shown in Figure B-7 to Figure B-9, Figure B-14 to Figure 
B-15, and Figure B-23. 
 
B.1.1 Generating a Six-screen UI Prototype without the Use of Created UI 
Template 
If there are no suitable created UI templates in the UI templates database, we 
have to create above mentioned screens by using visual UI authoring tool. 
 
 
 
Fig. B-1 A six-screen UI prototype. Fig. B-2 The created UI template.  
 
B.1.2 Using the Created UI Template to Generate a Six-screen UI prototype  
We search for the created UI templates from UI templates database, and found 
there is one created UI template as shown in Figure B-2. By using the visual UI 
authoring tool, we can fine tune the created UI template to generate the six-screen UI 
prototype. The processes are listed below: 
1. First, replace the image actor by  and change the text actor “ChunghWa” 
to be “Mobile” of “Stand by” screen from the created UI template. 
2. Then, delete the multimedia and snapshot screen provided by the created UI 
template 
3. Last, create a new screen– “Setting”, and add one list box in this screen, as shown 
in Fig. B-15. 
 
 57 
B.3 Generating an Eighteen-screen UI Prototype 
 
Third, an eighteen-screen UI prototype was generated. Refer to Figure B-5. 
B.3.1 Generating an Eighteen-screen UI Prototype without the Use of Created UI 
Template 
If there are no suitable created UI templates in the UI templates database, we 
have to create above mentioned screens (From Figure B-7 to B-24) by using the visual 
UI authoring tool. 
 
  
Fig. B-5 An Eighteen-screen UI prototype. Fig. B-6 The created UI template. 
 
B.3.2 Using the Created UI Template to Generate an Eighteen-screen UI prototype 
We search for the created UI templates from UI templates database, and found 
there is one created UI template for use. (Refer to B-6)  
By using the visual UI authoring tool, we can fine tune the created UI template to 
generate the eighteen-screen UI prototype. The processes are listed below: 
1. First, replace the image actor by  and change the text actor “ChunghWa” to 
be “Mobile” of “Stand by” screen from the created UI template. 
2. Then, delete the multimedia and snapshot screen provided by the created UI 
template. 
3. Last, create a new screen – “Games”, and add one list box in this screen, as shown 
 59 
 
   
Fig. B-16 Screen of Date and 
Time. 
Fig. B-17 Screen of Setting 
date. 
Fig. B-18 Screen of Setting 
time. 
 
   
Fig. B-19 Screen of 
Language. 
Fig. B-20 Screen of Tinkle. Fig. B-21 Screen of 
Calendar. 
 
   
Fig. B-22 Screen of 
Calculator. 
Fig. B-23 Screen of Games. Fig. B-24 Screen of Dial. 
 
 經歷： 
 
Cross-straights Tri-Jiaotong conference on Applied 
Linguisttics held at Nan Yang Hotel, Xi’an Jiaotong 
University, from 10/17 to 10/19 
 
Conference Location: Nan Yang Hotel, Xi’an Jiaotong University 
 
In this conference, I personally present two papers:  
1) Multimedia English Test Delivery System: a Total Solution 
2) The Design and Implementation of an Error Checking System for English 
Composition Based on Chinese Learner English Corpus 
 
We arrived at Xi’an Jiaotong University on the 16th of Oct.  
 
Day 1 (10/17): Attend a half day tutorial program in distance learning based on Skyclass 
synchronized teaching service. The system is developed at Xi’an Jiaotong University , 
a research group leaded by 鄭慶華 教授. The other half day focus on the 
visiting of their computer laboratory aimed for English teaching and learning. 
 
Day 2(10/18); Attend a full day conference programs organized by the hoster, 
Xi’an Jiaotong University. The detailed program is listed in the appendix. 
 
Day 3(10/19); Attend a half day conference programs that focus on the plenary 
discussion on how to perform a good English teaching and learning. The other 
half day is the board meeting on the discussion of the future conference 
scheduled on the March, 2008. 
 
End of the Cross-straights Tri-Jiaotong conference on Applied Linguisttics held 
at Nan Yang Hotel. 
 
Day 4(10/20) Early flight to 上海. In the afternoon, we visit 上海交通大學外語學院. 
Meeting with Professor Wei, Nai-Xing, 楊惠中 胡開寶 副院長.  
 
Day 5(10/21) Laboratories visiting at 上海交通大學外語學院 and 網路教學學院. IIn 
the afternoon, a discussion on the possible future collaboration between our 
distance learning technologies and their teaching and learning content is the 
focus. 
 
Day 6(10/22) In the morning from 9:00 to 11:00AM,  a private discussion on the 
future collaboration with 胡開寶 副院長 is conducted at 上海交通大學徐匯校區. 
Come back Taiwan in the afternoon. 
 
心得： 
It is truly an eye-opening experience to visit those campus at both 西安交通大
學 and 上海交通大學. The big campus and modern architecture with hardware 
facilities in the college made me surprise all the way.   






 
 經歷： 
 
Cross-straights Tri-Jiaotong conference on Applied 
Linguisttics held at Nan Yang Hotel, Xi’an Jiaotong 
University, from 10/17 to 10/19 
 
Conference Location: Nan Yang Hotel, Xi’an Jiaotong University 
 
In this conference, I personally present two papers:  
1) Multimedia English Test Delivery System: a Total Solution 
2) The Design and Implementation of an Error Checking System for English 
Composition Based on Chinese Learner English Corpus 
 
We arrived at Xi’an Jiaotong University on the 16th of Oct.  
 
Day 1 (10/17): Attend a half day tutorial program in distance learning based on Skyclass 
synchronized teaching service. The system is developed at Xi’an Jiaotong University , 
a research group leaded by 鄭慶華 教授. The other half day focus on the 
visiting of their computer laboratory aimed for English teaching and learning. 
 
Day 2(10/18); Attend a full day conference programs organized by the hoster, 
Xi’an Jiaotong University. The detailed program is listed in the appendix. 
 
Day 3(10/19); Attend a half day conference programs that focus on the plenary 
discussion on how to perform a good English teaching and learning. The other 
half day is the board meeting on the discussion of the future conference 
scheduled on the March, 2008. 
 
End of the Cross-straights Tri-Jiaotong conference on Applied Linguisttics held 
at Nan Yang Hotel. 
 
Day 4(10/20) Early flight to 上海. In the afternoon, we visit 上海交通大學外語學院. 
Meeting with Professor Wei, Nai-Xing, 楊惠中 胡開寶 副院長.  
 
Day 5(10/21) Laboratories visiting at 上海交通大學外語學院 and 網路教學學院. IIn 
the afternoon, a discussion on the possible future collaboration between our 
distance learning technologies and their teaching and learning content is the 
focus. 
 
Day 6(10/22) In the morning from 9:00 to 11:00AM,  a private discussion on the 
future collaboration with 胡開寶 副院長 is conducted at 上海交通大學徐匯校區. 
Come back Taiwan in the afternoon. 
 
心得： 
It is truly an eye-opening experience to visit those campus at both 西安交通大
學 and 上海交通大學. The big campus and modern architecture with hardware 
facilities in the college made me surprise all the way.   






