前言 
 
近年來微型製造的技術越來越發達，再加上通訊技術及電池技術的改進，因此讓微小
的電腦，也就是感測器(Sensor)，可具有感應、傳輸及資料處理的能力。而感測器大多是以
節點的形態呈現，它不但能夠感應及偵測環境的目標物及改變，並且可處理收集到的數據，
經過處理後以無線傳輸的方式送到資料收集中心或基地台(Base Station)，這種方式所形成的
網路為無線感測網路(Wireless Sensor Network)。 
如何提昇能源效益一直是無線感測網路研究中的重要議題[1][2][3]，在所有節點之間找
出最有效率的繞徑(Routing)是提昇無線感測網路能源效益的方法之一，而連接支配集合
(Connected Dominating Set, CDS)的建構是目前共通且常用的方法。無線感測網路常以 CDS
作為虛擬骨幹，以求取傳輸時具有較高的效能。有效率的繞徑可以讓網路在進行資料交換
時避免過多不必要的傳輸而達到節能的目的。Mu_CDS (Minimum Connected Dominating Set) 
是整個網路結構裡所有的 CDS 組合中，擁有最小節點數量的 CDS，故找出 Mu_CDS 將
可以使網路繞徑達到最高效率。 
找出 Mu_CDS 是 CDS 研究中的主要目的，但是在節點數量龐大的環境下找出 Mu_CDS
是十分困難的，即使在 Unit Disc Graph(UDG)中求 Mu_CDS 仍然是 NP-hard 問題[4]，因此
我們通常退而求其次的找出 Minimal Connected Dominating Set (Ma_CDS)，本研究定義
Ma_CDS 為一 CDS，而且拿掉它任一節點都會使它不再是 CDS。它可以看成 Mu_CDS 的
近似解，而且文獻中找出的最小 CDS 通常為一 Ma_CDS。在圖 1 中我們給一個 Mu_CDS
與 Ma_CDS 之比較性例子。 
             
(a) Mu_CDS         (b) Ma_CDS 
圖 1. Mu_CDS 與 Ma_CDS 的例子 
無線感測網路(Wireless Sensor Network, WSN)最初是應用於軍事上，如戰場偵察。然
而，無線感測網路目前使用已在許多應用領域，包括環境監測(如：監測污染)、醫療應用(如：
遠距照護)，另外也應用在家庭自動化、交通管制和商業上[5]。 
受限於感測器必須使用電池來供應運作所需的能源以及傳輸距離的限制(大部份的傳
輸距離從數公尺到一百公尺不等)。為了節省傳輸時的能量消耗以及距離限制的問題，因此
感測器距離基地台較遠時，感測器需要透過其它感測器來做傳輸，此種方式稱為多重跳躍
（Multiple-hop），藉由此方法將資料經由多個感測器傳回基地台。此方法雖然可以擺脫距
離的限制，但因為需透過較多感測器來傳輸，所以傳輸時所的能源消耗會較大。 
一般而言，以 CDS 為基礎的繞徑方式，被認為是非常好的方法，其主要的優點就是
可以把 CDS 當作一個虛擬骨幹，可以快速的適應網路拓樸的改變。Mu_CDS (Minimum 
Connected Dominating Set) 是整個網路結構裡所有的 CDS 組合中，擁有最少節點的 CDS。
尋找近似 Mu_CDS 一直是這方面研究的重點，在隨機分布且節點數量龐大的環境中找出 
Mu_CDS 並不容易[6]，因為當節點數量龐大時，演算法的複雜度是相當大的。目前的研究
所提出的演算法多以求近似解的方式來找出 Mu_CDS，而 Performance Ratio 則為比較眾
多演算法效益的一項指標[4][7][8]。舉例來說：當節點佈置完成後，會存在包含 N 個節點
的 Mu_CDS，若根據特定演算法可以找出由 M 個節點所形成的 CDS ，則此演算法的 
Performance Ratio 為 M/N，而 M/N 的比值越接近 1 則表示此演算法找出的 CDS 越接
近 Mu_CDS。 
在文獻[9]中證明了任一節點的鄰居範圍內至多有五個獨立節點，利用此結果可推得
MIS 大小至多是 Mu_CDS 五倍的結論。因此找出 MIS 是一種尋找 Mu_CDS 近似解的方
法，此方法可以保證所找出的 MIS 大小為 Mu_CDS 的 5 倍以內 [10][11]。 
在眾多 CDS 文獻中所提出的演算法主要可歸納為集中式與分散式兩種，茲分述如下： 
1.集中式 CDS 演算法 
由 Li 等人[12]及 Guha and Khuller[13]所提出的 CDS 演算法則為集中式，其中[12]先
透過廣度優先搜尋找出 MIS(Maximal IS)後，再將 MIS 連接形成 CDS，搜尋過程皆以 ID 較
小者優先。 
2.分散式 CDS 演算法 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
    圖 2. 第一部分研究架構圖 
接著，我們將兩部分詳細敘述如下： 
1.利用基因演算法求 CDS 最小化問題： 
 先前文獻提出 CDS 演算法大多是先以某一節點為起始點，然後進而找出 MIS，最後在
將 MIS 中的節點建立連線。但是此方式所找出的 CDS 屬於 Minimal CDS 而非 Minimum 
CDS，故本研究期望利用基因演算法演化、多同步搜尋的特性，試圖找出接近 Minimum CDS
的 CDS。 
 本研究提出兩種初始族群的方式： 
(1). 以隨機節點作為初始節點 (Random-based) 
文獻 
著色分散式演算
法建構 CDS 
改良分散式演算
法建構 CDS 
基因演算法尋
找 MCDS 
文獻 
分散式演算法建
構 CDS 
文獻 
集中式演算法建
構 CDS 
基因演算法 
Random based 
基因演算法 
CDS based 
基因演算法尋
找 MIS 
改良 
著色分散式演算
法建構 CDS 
分散式演算法 
 
模擬比較 
集中式演算法 
 
Lemma 3. 給定一個 I_DS，I_DSB，和一個互斥的節點集合，DESB， I_DSB ∪ DESB
是強連通的集合，則集合必為一個 I_CDS。 
 
在[18]中作者利用 O_DS 建構出一個向外傳輸的拓璞(該文稱之為 Strongly Connected 
Dominating Set, SCDS)，其實就是本文定義的 O_CDS，然 O_CDS 的傳輸方向僅能保證由
集合中的節點向集合外傳輸，而卻不能保證將外面的訊息傳輸進來，形成只送不收的狀況。
為改進此一問題，本文將建構另一相反方向的 I_CDS，I_CDS 的傳輸方向是由集合外的點
向集合內傳輸訊息，再透過 O_CDS∪I_CDS 可以讓 O_CDS 藉由在 I_CDS 接收集合外的資
訊，同時也可以讓 I_CDS 藉由 O_CDS 將資料傳送出去，達到將 O_CDS 和 I_CDS 強連通
的網路拓璞。O_CDS∪I_CDS 是一個雙向對外連通的強連通集，我們再定義一個
Bidirectional CDS(B_CDS)如下：                  .    
B_CDS 為一強連通集合，並滿足(3)： 
(3)對所有 B_CDS 外之頂點 x ，必存在 1 2, _y y B CDS ，使得 1( , )y x E 且  
2( , )x y E  
以下我們證明任意非 disjoint 的 O_CDS 與 I_CDS 之聯集必為一個 B_CDS：         . 
Theorem 1.Given an O_CDS, say O_CDSA, and an I_CDS, say I_DSB , where 
_ _A BO CDS I CDS   , then the union set _ _A BO CDS I CDS  must be an 
_B CDS . 
集合中的頂點會有最少一條有向路徑是 CDS 中的頂點向外傳輸連結。在有向圖中，一
個 CDS 的先決條件有兩個：1)CDS 必須是強連通的；2)任何一個非 CDS 集合中的頂點會
有最少一條有向路徑是 CDS 中的頂點向外傳輸連結，這就是 SCDS(Strongly Connected 
Dominating Set)[18]。而在有向圖中，因為有些傳輸路徑為單向的，由 DS 中的節點向外傳
輸訊息給外面節點，所以只要不形成互相連通的狀態，建構 DS，使 DS 的控制樞紐可以傳
達訊息給其他的節點，再將 DS 作連結，即可以達到網路網絡的互連通訊狀態。主要是因
為 DS 簡化繞徑，DS 的主控制樞紐可以在一個較小的子網路集合中產生連通支配集，發揮
其控制效能，主導的控制頂點必須維持發布訊息的功能，減少其他被支配集的耗能。因為
在拓璞圖中，若將方式設為向外傳輸，選取起點後得到的路徑拓璞圖為集合內的節點向集
合外的節點傳輸的 DS，即 Outward Dominating Set (O_DS)，若更改選取方向為向內傳輸，
1. Input: 一個有向圖 ( , )G V E  和其相反方向的圖 ( , )R RG V E  
2. 利用演算法1在G 圖中找出 _O DS  
3.  找一個有最多向外傳輸鄰點的節點 s， _s O DS    
4.  在G 圖中將根設定為 s建構廣度搜尋樹T，並在顛倒傳輸方向的 RG 建構另一個廣度搜尋
樹 RT   
5.  以T 為基礎, 延伸擴張 _O DS 讓每一個 屬於 _O DS 中的節點最少有一個路徑從 s 向
其延伸 ，且 _ { }O DS s ，所有被選取的節點依照以下步驟選取： 
5.1 for i=m to 2 do  
5.1.1  for every node in _ iO DS L  do 
5.1.1.1  If all the parents of the node  in 1iL  are not in _O DS ,   
        then add one of it’s parents in 1iL   to _O DS   
5.1.2  end for  
5.2  end for  
6.Based on RT ,expand _ RO DS such that there exists at least one directed path from s to 
every node in _ { }RO DS s  as follows: 
6.0 _ : _RO DS O DS  
6.1 for j=n to 2 do  
6.1.1 for every node in _ R RjO DS L  do 
6.1.1.1  If all the parents of the node  in 
1j
RL   are not in _
RO DS ,  
         then add one of it’s parents in 
1j
RL   to _
RO DS   
6.1.2  end for  
6.2 end for 
6.3 If _ RO DS equals to _O DS ,  
Then _ : _ RO CDS O DS  and go to 8 
7. Based on T , expand _O DS such that there exists at least one directed path  
   from s to every node in _ { }O DS s  as follows: 
7.0 _ : _ RO DS O DS  
1.  Input: A directed graph ( , )G V E  
2.   By using Algorithm 2 we construct a _O CDS   
3.  Input: The directed graph ( , )R RG V E  
4.   By using Algorithm 2 we construct a _ RO CDS , except that we use the root s  
as the initial node in constructing RDS  and as the root in constructing _ RO CDS  
5.   Let _ : _ RI CDS O CDS  
6.  Output: _ : _ _B CDS O CDS I CDS   
透過演算法 3 我們可以得到 _B CDS。 
 
結果與討論 
GA 求解 Ma_CDS 的特性分析如下： 
1.用 GA 把每個節點組成個體來找 CDS 屬於集中式，但每一組個體是同步搜尋。 
2.GA 是用隨機取樣的方式，利用隨機、交配、突變的機制來達到快速找出較小的 CDS。效
率上基本上比一般演算法好，但在節點數量大時用 GA 才有它明顯的效果。我們將前面所
提出的演算法進行比較分析。 
GA 參數設定方面： 
1.族群大小： 
基因演算法一般族群大小大多設定在 30~50 之間，族群若設定過小會使演化過於緩
慢；若設定過於龐大則會造成演算法的複雜度，使得計算過於冗贅。在求解 CDS 問題上，
我們以 30 作為每代的族群大小。 
2.演化代數： 
 決定基因演算法更迭幾次的參數，視問題的複雜度和收斂程度來決定演化代數的大
小。因為符合 CDS 條件較嚴格，於是收斂程度也較有限，以 40~70 代作為演化代數。 
3.突變機率： 
 突變為基因演算法中重要的參數，一般突變率設定值都很小，0.001 是典型的突變率。
40
70
100
1 60
當代最
佳CDS
大小
代數
迭代比較圖 Random-
based
CDS-based
10
40
70
1 60
當代最
佳CDS
大小
代數
迭代比較圖 CDS-based
Random-
based
 
圖 3. 兩種初始族群演化差異(節點 200 半徑 20)       圖 4. 兩種初始族群演化差異(節點 200 半徑 50) 
由圖 3 和圖 4 可知，Random-based 演算法一開始的 CDS 較大，這是因為它是以隨機方
式，二分之一的機率產生 CDS 候選節點；而 CDS-based 演算法則是初始節點即透過演算法
找出 CDS，故一開始就能找到較小的 CDS。當傳輸半徑越大，節點密度越大時，兩種演算
法的差異更為明顯。 
                表 2 兩種初始族群演算法最佳模擬結果 
演算法 CDS 大小 標準差
Random-based 43.46 2.14 
CDS-based 43.08 2.17 
各演算法模擬比較分析 
本文並將下列七組演算法進行比較分析。 
1. 集中式[12] 
2. 分散式[14] 
3. 改良分散式[4] 
4. 著色分散式[16] 
5. 改良著色分散式[19] 
6. GA (Random Based)  
7. GA (CDS Based) 
各演算法模擬結果如下。 
最符合經濟效益的MCDS。 
此方式主要是考慮感測節點的能源效益，藉由此概念建立出 MCDS。相對於傳統的方式
來建立 MCDS，以更多元的方式來評估考量 MCDS 的建立。在傳統的概念下所建立出的 MCDS
是期望找出網路拓樸中 CDS 的絕對最小集合，但卻忽略考量 CDS 集合中的感測節點。因為
在正常狀況下，經過一段時間後，每個感測節點電量是不相同的。若是由電量較少的感測
節點來建立 CDS，作為整個網路的枝幹有其風險性，於是我們將在拓樸中每個感測節點的
電量作為組成 CDS 的依據。 
未來也可以利用 PSO 動態移動的搜尋空間的特性來模擬比較，進一步結合 PSO 和 GA 特
性來分別解決同一件問題中不同的部分。在文獻[35]中提出將 GA 和 PSO 混合的概念來解決
多種模式問題，未來研究將會將此概念納入來求解 MCDS 問題。 
    另 一 方 面 ， 我 們 延 伸 了 Du etc.[40] 的 方 法 ， 提 出 了 一 個 演 算 法
_ : _ _B CDS O CDS I CDS  ，使得有傳輸半徑差異的網路，除了發揮向外傳訊的功能以外，
藉由 B_CDS 的定義形成雙向通訊讓傳輸的路徑更簡化迅速，減少多餘的繞徑。在本文中，
我們擴充該演算法得到一組可以對外做雙向傳輸的 B_CDS，考慮到單向和雙向的傳輸繞
徑，讓得出的研究成果比較符合實際網路拓樸。未來我們將朝減少 CDS 數量的方向上作研
究，並將只能處理集中式的演算法改善為也能處理分散式情況的演算法。讓有單向傳輸的
網路拓樸，也可以很容易的找到最短傳輸路徑，減少多餘繞徑，相信在節省耗能的方面也
有更大的研究貢獻 
 
參考文獻 
[1] J. Carle and D. Simplot, ”Energy Efficient Area Monitoring by Sensor Networks”, IEEE 
Computer, vol. 37, no. 2, pp.40-46, 2004. 
[2] M. Cardei, and D.Z. Du, ”Improving Wireless Sensor Network Lifetime through Power 
Aware Organization”, ACM Wireless Networks, vol.11, no.3, pp.333-340, May 2005. 
[3] Q. Xue and A. Ganz, ”Maximizing Sensor Network Lifetime: Analysis and Design 
Guidelines”, Proceedings of MILCOM, vol. 2, pp. 1144-1150, Oct. 2004. 
[4] M. Min, H. Du, X. Jia, C.X. Huang, S.C.H. Huang, and W. Wu, "Improving Construction 
for Connected Dominating Set with Steiner Tree in Wireless Sensor Networks," Journal of 
Global Optimization, vol. 35, no. 1, pp. 111-119, May 2006.  
[5] 潘貞君、林致廷，“無線感測網路概論與示範應用”，自動化科技學會會刊，2009.04. 
[6] M.R. Garey and D.S. Johnson, "Computers and Intractability: A Guide to the Theory of  
NP-Completeness", Freeman, New York, 1979. 
Dominating Sets”, Journal of Information Science and Engineering, vol. 23, no. 4, 
pp.1073-1086, July 2007. 
[18]  D.Z. Du, M.T. Thai, Y. Li, D. Liu, and S.Zhu "Strongly Connected Dominating Sets in 
Wireless  Sensor Networks with Unidirectional Links", Springer-Verlag Berlin 
Heidelberg 2006,APWeb 2006, LNCS 3841, pp.13–24, 2006. 
[19] 周照偉、康家瑋、陳柏宏、歐雅惠, “UDG 中建構 CDS 的著色式分散演算法”,  2008
數位科技與創新管理研討會, 華梵大學資管系, 2008.06。 
                                                                      .  
                                                                 .              
                                                                 . 
 
計畫成果自評 
 
未來也可以利用 PSO 動態移動的搜尋空間的特性來模擬比較，進一步結合 PSO 和 GA 特
性來分別解決同一件問題中不同的部分。將 GA 和 PSO 混合的概念來解決多種模式問題，未
來研究將會將此概念納入來求解 MCDS 問題。 
    另 一 方 面 ， 我 們 延 伸 了 Du etc.[18] 的 方 法 ， 提 出 了 一 個 演 算 法
_ : _ _B CDS O CDS I CDS  ，使得有傳輸半徑差異的網路，除了發揮向外傳訊的功能以外，
藉由 B_CDS 的定義形成雙向通訊讓傳輸的路徑更簡化迅速，減少多餘的繞徑。在本文中，
我們擴充該演算法得到一組可以對外做雙向傳輸的 B_CDS，考慮到單向和雙向的傳輸繞
徑，讓得出的研究成果比較符合實際網路拓樸。未來我們將朝減少 CDS 數量的方向上作研
究，並將只能處理集中式的演算法改善為也能處理分散式情況的演算法。讓有單向傳輸的
網路拓樸，也可以很容易的找到最短傳輸路徑，減少多餘繞徑，相信在節省耗能的方面也
有更大的研究貢獻。 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
表 Y04 
報告內容應包括下列各項： 
一、參加會議經過 
 
本研討會在上海青松城大酒店舉辦之國際研討會。論文為 EI, INSPEC, 和 DBLP 引
用。本次參與會議為電腦與資訊科學之重要國際研討會，今年為第八屆，該研討會
每年聚集了來自全球各地的科學家、工程師、電腦使用者以及學者等，研討範圍涵
蓋經驗分享、理論與工具發展等，並分享未來該領域可能面臨的挑戰及可能之因應
方案。本人發表之論文還被收錄於 Springer之 Studies in Computational Intelligence 208 
(SCI 208, Computer and Information Science 2009, pp.179-192)專書中。  
 
二、與會心得 
這次研討會共計有 32 場次，每場次發表 5~7 篇論文，總計 205 篇，涵蓋範圍幾乎
包含了資訊技術領域中所有重要的議題，分別是 Communication Systems & Network 
(3 場), Data Mining & Knowledge Discovery (3 場), Software Engineering and 
Information Engineering (3 場), Algorithm (2 場), Parallel and Distributed Computing & 
System (2場), Image Processing & Pattern Recognition (2場), Computer Security (2場), 
Mobile/Wireless Computing (2 場), Visual and Multimedia Computing (2 場), Web 
Engineering & Application (2 場), Artificial Intelligence, Computer Architecture and 
VLSI, , Intelligent Control Systems, Techniques for Specification, Verification and 
Validation, “Database, Data Warehousing, Data Engineering＂, Information Science 
and Systems, Economics and Financial Systems, “Internet Technology and 
Applications, e-Commerce＂。而職這幾年的主要研究相關領域有 Communication 
Systems & Network, Computer Security, Mobile/Wireless Computing 及 Artificial 
Intelligence 等，與本次接受論文領域比較起來，似乎並未偏離目前主流，應該還有
相當多值得深入探索的空間。另一方面，職也嗅出了一些趨勢-—跨領域的整合方
向，例如：Bioinformatics and Geoinformatics 及 Economics and Financial Systems 
等，都是值得在不久的將來投入心血的新領域。 
    這次的行程讓職收穫滿滿，當然除了個人的收穫外，也冀望能以自己綿薄之力
為學校及國家增加一些可見度。其實這次能夠成行，需要感謝的單位或人很多。首
先要感謝的是全力支持的國科會，長期以來對職的研究不吝給予補助與支持，有了
國科會的支持，研究成果的發表才能如此順利；接著，更要感謝的是一路上隨時支
持相伴的學校---義守大學，學校在研究環境的塑造及给與教師們研究資源方面，讓
職雖然在研究的路上跌跌撞撞，但仍勇敢的、欣然的接受挑戰。當然，中山大學資
管系的合作夥伴---陳嘉玫教授及準博士賴谷鑫先生也是職深深感謝的對象，這份合
作情誼讓人感動，冀望這合作能持續而久遠。最後，要感謝的是即將畢業的我的碩
士班研究生---歐雅惠同學，她的細心與投入讓這次論文發表增色不少。 
    這次也讓職深刻體會出跨校合作的好處及效率，未來針對跨領域的研究，除
了可以跨校合作之外，更可以跨領域合作，以激盪出更多的創意、產出更優質的
研究成果。 
三、考察參觀活動(無是項活動者省略) 
四、建議 
建議多多鼓勵國內師生到國外發表文章為國爭光。 
 
五、攜回資料名稱及內容 
Springer 、論文集。 
 
論文集與研討會光碟、期刊。 
 
本人發表 1 篇論文摘要如下： 
表 Y04 
活動相片如下： 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
