行政院國家科學委員會專題研究計畫成果報告 
混合式錯誤更正碼晶片設計研究(I) 
Study of Chip Design for Error-Correcting-Code Employing  
Mixed Signal 
計畫編號：NSC 96-2221-E-027-119 
執行期間：96年8月1日 至 97年7月31日 
主持人：李文達 台北科技大學電子工程系 副教授 
一、 中文摘要 
本計畫提出一個以節省晶片面積為訴求的低密度
同位檢查碼解碼器之超大型積體電路架構設計。一般低
密度奇偶檢查碼的解碼器裡含有水平運算單元以及垂
直運算單元的硬體兩個部份，而我們提出的方法是將水
平運算單元以及垂直運算單元兩個硬體摺疊在一起，目
的在於更有效率的使用兩個硬體部分執行相同運算的
加法器，以達到資源共享，並且進一步的節省解碼器邏
輯運算單元的面積。我們將所提之新型摺疊式低密度奇
偶檢查碼解碼器以 Xilinx Vertix-4 的 FPGA 來進行驗
證。實驗結果我們提出的方法相較典型的方法實現在解
碼器的硬體上，在邏輯運算單元上我們可節省 17.82%
的硬體，而邏輯運算單元再加上外部的控制電路做比
較，則我們提出的方法整體的面積比典型方法節省
12.1%的面積。最後我們以台積電 (TSMC)所提供
的.18um 1P6M 製程來完成一個低密度奇偶檢查解碼
器晶片，晶片的面積包括 I/O 為 1.96×1.96mm2，吞吐量
為 5.631Mbps。 
ABSTRACT 
In this project, a low hardware cost of VLSI 
architecture design for Low Density Parity Check(LDPC) 
Decoder is proposed. Traditional LDPC decoders need 
horizontal and vertical processors. In our design, we 
develop a horizontal and vertical folding structure for 
LDPC which can share the adders and, thus can reduce the 
chip area cost. For demonstrating this proposed 
architecture, a Xilinx FPGA (HW-V4-ML402-USA) is 
used. Experimental results show that, our architecture can 
save 17.82% hardware cost for combinational logic unit 
and save 12.1% total hardware cost for a LDPC decoder. 
Finally, a new LDPC decoder employing HVFS is 
designed using TSMC 0.18um 1P6M CMOS technology. 
The chip size including I/O PAD is 296.196.1 mm× . 
二、 計畫的緣由與目的 
從過去到現在，通訊的重要性一直跟我們生活有著
密不可分的關係，尤其是在科技發展突飛猛進的時代，
有關通訊產品的應用以及研究更是日新月異，特別是在
近十年來我們生活起居普遍接觸到的民生消費電子產品
大部份都朝向具備通訊傳輸的功能，然而資料在傳輸的
過程中，由於傳輸的通道會受到雜訊的干擾，特別是無
線通訊系統，以致於傳輸的資料在接收端很容易出錯，
此時通訊的傳輸系統常常會需要使用到錯誤更正碼
(Error Correct Code, ECC)來更正這些在傳輸中被雜訊干
擾而發生錯誤的訊息。在眾多的錯誤更正碼系統中，有
一種碼稱為低密度奇偶檢查碼(Low-Density-Parity Check, 
LDPC)[1]，更是在近年中廣泛的為專家學者所討論，主
要是因為其編碼增益 (Coding Gain) 接近向農極限
(Shannon Limit)，其效能僅次於渦輪碼(Turbo Code)，然
而因為渦輪碼編碼和解碼的複雜度高，在實現上所需的
硬體成本太高，因此目前許多研究的目標以實現 LDPC
的硬體為主。 
近年有關 LDPC 的效能，專家學者投入了很多的心
力積極的探討如何改善使 LDPC 的效能，由於 LDPC 的
效能跟其奇偶檢查矩陣有著密切的關係，於是有很多相
關的論文對其奇偶檢查矩陣的排列提出一些新的方法
[2-3]，以達到更好的錯誤更正效能。另外有一些論文提
出支援多種不同碼率的架構[4]，除了能夠配合不同的奇
偶檢查矩陣之外，更能提高編碼的效率與彈性，而目前
有很多晶片已經被實現出來其中有提出高效能[5]，還有
結合渦輪碼的演算法所實現的解碼晶片[6]，而本計畫在
已提出的方法跟實現的晶片[7-11]，提出了一種能夠將
LDPC 的水平與垂直的硬體運算單元，利用摺疊運算的方
式來達到資源共享，以降低整體解碼器硬體資源。 
三、研究方法及成果 
1.低密度奇偶檢查碼系統 
首先介紹 Tanner 圖跟奇偶檢查矩陣之間的關係，
Tanner 圖是在 1981 年由 Tanner 發明的，他以圖形的方
式來表示奇偶檢查矩陣排列的情形，所以此圖被稱為
Tanner 圖，如圖一所示 
 
圖一、Tanner 圖 
利用兩個運算單元中執行相同功能的加法器，而相較典
型的架構我們只需大約付出一半的加法器，另外以多工
器作為選擇水平運算以及垂直運算的切換如此一來在
同一個硬體則可以處理水平和垂直達到和典型硬體相
同的功能，而我們所規畫的水平垂直摺疊共享的架構如
圖六所示。 
 
 
圖六 水平垂直摺疊共享架構 
 
2.3 記憶體的規劃及控制 
另外 LDPC 的解碼特性是利用資訊之間如同奇偶
檢查矩陣的排列關係來彼此互相更新來達到更正錯誤
的能力，但是要將這些資訊彼此間的關係儲存起來必須
克服一些困難，因為我們所開發的硬體必須能有平行處
理的能力，所以在水平處理必須能同時將一整列的資訊
同時讀出作處理，相對的在垂直步驟時也能夠同時將一
整個行的資訊同時讀取出來運算，以圖七來解釋我們的
奇偶檢查矩陣的排列以及記憶體的規劃。 
 
 
圖七 矩陣與記憶體的規劃 
 
圖七中為我們資訊間的排列關係，因為一個列有 6
個資訊，所以我們規劃了 6 個記憶體來存放我們的資
訊，為了要克服能夠在執行水平步驟以垂直步驟時能夠
同時將資訊從存放的記憶體讀取出來，我們資訊擺放的
方式如同圖七所示，資訊以斜列的方式存入一個記憶體
內，這樣一來即可以在執行水平步驟以及垂直步驟時能
夠將記憶體的資訊同時擷取出來。 
 
3.實驗的模擬分析比較 
我們將典型的架構以及水平垂直摺疊共享的架構
同時實現後再以 ISE 軟體將其合成的資源做比較，比較
結果如表一所示，針對此改善的方式主要節省大量的加
法器的使用，而節省加法器數目的計算及比較如表二所
示。 
表一 架構資源表比較表 
Source utilization Traditional architecture Proposed architecture
Number of 1 6 6 
Combinational 
Slice 606 498 
Total occupied 
slice 1148 1009 
 
表二 加法器多工器硬體資源比較表 
P.S. NPR：Number of 1s in one row 
在使用軟體合成的比較中可以顯示我們所設計的
架構比典型的架構確實有減少硬體耗費資源的現象，接
著我們將該一架構使用 Xilinx Virtex-4 作為驗證工具，
圖八為 FPGA 的佈局圖和規格。 
 
 
FPGA Process Xilinx Vertix-4 
Resource utilization Traditional architecture Proposed architecture
Number of adder 
NPR×(NPR－2) )+ 
(NPR－1)2 
NPR×(NPR－2) 
 
Adder occupied slice (Number of adder) × 6 (Number of adder) × 6
Number of 
multiplexer 0 NPR × 2 
Multiplexer occupied 
slice 0 NPR × 7 
Total occupied slice
6［NPR×(NPR－2)+ 
(NPR－1)2］ 
NPR×［(NPR－2)× 6
 + 7］ 
表 Y04 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                         97  年  9 月  15 日 
報告人 
姓名 
 
李文達 服務機構及職稱 
國立臺北科技大學 
電腦通訊與控制研究所   
副教授 
時間 
 
會議地點 
2008/8/19~2008/8/24 
日本 仙台 
本會核定
補助文號 NSC 96-2221-E-027 -119 
會議 
名稱 
The 2008 IEEE VTS Asia Pacific Wireless Communications Symposium    
(中文) 2008 年亞太無線通訊國際研討會議（2008APWCS） 
發表 
論文 
題目 
IC Design of Turbo Decoder Using New Adaptive Iteration Algorithm 
附件三
 
表 Y04 
三、 建議 
台灣應可多申請辦理該類大型國際研討會，除可刺激國內學
術研究發展，更可以提昇台灣國際能見度及學術交流與水準。 
 
四、 攜回資料名稱及內容 
1. 2008亞太無線通訊國際研討會議（2008APWCS）論文集
摘要及會議論文集光碟片。 
五、 其他 
感謝國科會計畫NSC 96-2221-E-027 -119之經費補助，使得本
研究得以順利進行，以及成果能至國外發表。 
py1
sy
py2
int1 −
eL eL 2
int2−
eL
int−y
eL1
LRL
 
Figure 2. A typical turbo decoder architecture 
    In 1996, the first early termination Cross-Entropy (CE) [6] 
was presented. This algorithm is using the difference of current 
iteration and previous iteration extrinsic information in turbo 
decoder to stop iteration. Then, some scholars use CE 
algorithm to develop two simple stopping criteria, the sign 
change ratio (SCR) and the hard decision aided (HDA) 
techniques for early termination [7]. The advantages and 
disadvantages of these stop criteria were analyzed in [2]. The 
main disadvantages of early termination always need large 
extra memory or need one more iterations for early termination. 
Therefore, iteration times and reality hardware requirement 
will be a trade-off for turbo decoder implementation. In section 
III, we will propose a new adaptive iteration algorithm that can 
provide a novel stop criteria without any extra memory and 
needless setting a threshold value to be a stopping condition. 
III. A NEW ADAPTIVE ITERATION ALGORITHM 
A. Algorithm Describtion 
    In this section, we will introduce a new adaptive iteration 
algorithm for turbo decoder. The idea is that we use the 
difference of the maximum and minimum extrinsic information 
error to be a stop iteration condition. After the large 
programming of simulations and statistics, we can observe the 
variation of extrinsic information in different SNR that they 
will be increased when SNR increases. Table I shows the 
extrinsic information to be distributed in different SNR channel 
environment. We can find out the absolute value of maximum 
and minimum extrinsic information ( ||Lemax , ||L
e
min ) will be 
distributed between 0 and 31. The absolute value ||Lemax  and 
||Lemin  will increase when SNR increases. When SNR rises more 
than 1db, we can find out only after two iterations, the extrinsic 
information will be saturated at 31 and -32 (If 6bit is used to 
represent the extrinsic information). Therefore, we can 
recognize extrinsic information which imply noise factor to 
evaluate the channel quality. 
    Figure 3 shows the flowchart of new adaptive algorithm. 
Firstly, we calculate the extrinsic information and find out the 
maximum ( eLmax ) and minimum value (
eLmin ) in current frame, 
simultaneously. Then, we can obtain the absolute value of 
maximum and minimum extrinsic information. We calculate 
the difference between the maximum and minimum extrinsic 
information called extrinsic information error ( ||-|L|LD ee minmax= ). 
We save this extrinsic information error ( D ) in current 
iteration and go to next iteration. In the next iteration, we 
repeat the calculation until getting a new extrinsic information 
error. Now we can use these two error values between last with 
current iteration which to control iteration counter. If the two 
error values are the same (matched), then it means that we can 
stop the iteration. If the two error values are different 
(mismatched), then it means that we can increase the iteration 
counter until satisfying stop iteration condition. 
Calculate Extrinsic
 Max &  Min Value
if==0
Iter_cnt=Iter_cnt+1
Go to next 
iteration
yes
no
Stop iteration
START
Calculate Difference of 
Max & Min Value
Storage the Difference 
Value at Current Iteration
XOR the 
Current Difference Value
With Last  Difference 
Value
 
Figure 3. New adaptive iteration algorithm flowchart 
TABLE I. EXTRINSIC INFORMATION DISTRIBUTE IN DIFFERENT SNR ( ||-|L|LD ee minmax= ) 
  SNR 
Iteration 0db 0.5db 1db 1.5db 2db 
extrinsic max min D max min D max min D max min D max min D 
0 17 -16 1 27 -24 3 31 -27 4 31 -32 -1 31 -32 -1 
1 17 -15 2 30 -29 1 31 -32 -1 31 -32 -1 31 -32 -1 
2 15 -14 1 31 -29 2 31 -32 -1 31 -32 -1 31 -32 -1 
3 17 -15 2 31 -32 -1 31 -32 -1 31 -32 -1 31 -32 -1 
4 16 -17 -1 31 -32 -1 31 -32 -1 31 -32 -1 31 -32 -1 
5 16 -13 3 31 -32 -1 31 -32 -1 31 -32 -1 31 -32 -1 
6 18 -14 4 31 -32 -1 31 -32 -1 31 -32 -1 31 -32 -1 
7 16 -16 0 31 -32 -1 31 -32 -1 31 -32 -1 31 -32 -1 
