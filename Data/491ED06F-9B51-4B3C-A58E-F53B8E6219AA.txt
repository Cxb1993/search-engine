 2
行政院國家科學委員會專題研究計畫成果報告 
 
Integrating the Cadabia Database into Network Development 
Environments 
 
計畫編號：NSC 96-2221-E-194-060- 
執行期限 96 年 8 月 1 日至 97 年 7 月 31 日 
主持人：貝若爾   
地址中正大學資訊工程研究所 
dan@cs.ccu.edu.tw 電話 (05)272-0411(33103) 
 
一、中文摘要 
 
關鍵詞：類別代數、分散式物件導向資料庫、「是
一個」層級架構、物件識別串列。 
 
這個專案計畫是基於之前幾個 Cadabia 資料
庫系統的國科會專案計畫: 
(NSC 95-2221-E-194-048,NSC94-2213-E194-024, 
NSC93-2213-E-194-010, NSC92-2213-E194-019, 
NSC91-2213-E194-022)。此 project 整合 Cadabia 資
料庫系統，成為一個網路開發環境。 
 
Abstract 
 
This project is based on several previous NSC 
projects for the Cadabia middleware system: 
(NSC 95-2221-E-194-048, NSC94-2213-E194-024, 
NSC 93-2213-E-194-010, NSC92-2213-E194-019, 
NSC91-2213-E194-022).  This project involves 
integrating Cadabia kernels into a network 
development environment.   
 
Keywords: Class algebra, distributed object-oriented 
middleware, IS-A hierarchy, OidList 
 
二、緣由與目的 Original Purpose 
  Cadabia is a middleware for persistent storage.  
It offers object-oriented typing of the persistent storage, 
similar to OWL-DL. 
The goal of Cadabia is to provide a secure 
peer-to-peer object-oriented network programming 
environment.  This will be attained by sharing class 
definitions of successive “kernel” levels.  As long as 
the same ontologies are used for these kernel 
definitions, Cadabia queries can provide secure access 
to both user data and class definitions.  The successive 
kernels will eventually offer method/application calls, 
transactions, security, and cloud computing services.  
Cadabia’s default editor can either be run as a 
stand-alone application or as a Web application.   
 Most users and companies would prefer to keep 
personal data on their own machines rather than on 
“portal” machines that are controlled by third parties.  
Such a “3rd generation” network programming 
environment should be easy to use.  Average lay 
people should be able to design secure home pages for 
buying/selling/bidding/electing/teaching/evaluating 
etc.  The Cadabia project has this as a long-range goal. 
The persistent storage of Cadabia is based on all 
three major database paradigms: network, hierarchical, 
and relational.  Like network databases, Cadabia uses 
network-wide pointers between objects.  These are 
Cadabia’s “binary relations”.  A binary relation and its 
inverse are stored as a sorted set of object pointers for 
each relationship of an object.  In this way, a 
relationship looks much like a Java collection (i.e. 
HashSet).  So far, only sorted sets of object identifiers 
have been implemented.  They have been sufficient to 
represent other collections such as lists, vectors, sparse 
arrays, trees, graphs, and hash sets, although more 
efficient implementations of these collections could be 
offered in higher-level kernels.   
Cadabia back-end servers are currently one of three 
kinds – SQL, Typed XML Mind maps [1], and Exist 
XML databases [2].  SQL tables are arranged into a 
class hierarchy, with attributes being added to subclass 
tables.  The SQL tables are enhanced with an “OidSet” 
type, which is stored as a string of sorted network-wide 
object pointers.  Since this string represents a set of 
values of a relationship, the SQL table is theoretically 
no longer in first-normal form, unless the whole OidSet 
is thought of as one value.   
The object identifiers are formed of three parts: 1. 
A prefix that stands for either the URL of a Cadabia 
server or a JDO FetchPlan [3] for a set of servers with 
compatible ontologies 2. A class name 3. An object 
name.  The primary key of a SQL table (i.e. class) is 
used as an object name.  Semantic Web XML, RDF, 
and OWL databases make use of the rdf:ID to 
reference objects within documents.   
Currently, there is one file per class in an Exist 
implementation of a Cadabia backend, with nested 
objects inheriting the file’s permissions via implicit 
“partOf” inheritance.  The partOf relationships must be 
specially declared and implemented using 
