即時線上自我修復架構(I) 
“A Real-Time On-Line Built-In Self-Repair Architecture” 
計畫編號：NSC96-2221-E-005-105 
執行期間：96 年 8 月 1 日 至 97 年 7 月 31 日 
主持人：黃德成  國立中興大學 資訊科學與工程學系 
 
一、 中文摘要 
在本計劃中，我們以平行診斷的自我測試
架構[1]為基礎，並且由[2]的記憶體備份方式
作輔助，建構出線上自我診斷架構，再與我們
所提出的儲存陣列與轉換電路做整合，發展出
一個能夠達到即時線上多重內嵌式記憶體自
我維修的架構。此外，我們亦提出一個新的
March 演算法，運用於我們的線上自我修復架
構中，以其診斷 SRAM 與 DRAM 的基本錯誤
模型。透過實驗結果顯示，我們所提出的方法
能夠達到即時線上自我修復，且能有效的降低
測試成本。 
Abstract 
In this project, we apply the parallel 
transparent diagnostic BIST and divided 
word-line repair to build the on-line BISD 
architecture. Integrated to our proposed store 
array and switch circuit, we develop an 
architecture to achieve real-time multi-embedded 
memory self-repair mechanism. Moreover, we 
propose a new March algorithm and apply it to 
our real-time BISR architecture to diagnose the 
basic fault model of SRAM and DRAM. With 
the experimental results show, our proposed 
approach can achieve Real-Time Self-Repair and 
significantly reduce the cost of testing. 
 
二、 計畫的緣由與目的 
隨著半導體技術的不斷提升，製程的進
步，使得系統單晶片(System on a Chip, SoC)
近年來成長快速，過去需要多顆晶片才能組成
的系統，如今可以由系統單晶片來實現。因應
此趨勢，市面上常看的到系統單晶片產品的應
用，凡舉通訊產品、消費性電子產品等，都是
系統單晶片的主要應用產品市場。 
在一個典型的系統單晶片中，記憶體往往
是其組成的關鍵，記憶體一般會高密度的覆蓋
在其晶片的大區塊上，因此，影響著整顆晶片
的良率[3]。為了提升記憶體的使用率，許多研
究使用新的記憶體測試方法以及不同的記憶
體替換方式來達到此目的。在文獻[4]中指出，
使用不同的內建自我修復(Built-In Self-Repair, 
BISR)方式，能夠提升記憶體的良率達到
5%~20%，而這也使得 SoC 的良率可以提高
2%~10%。因此，記憶體的測試以及修復技術
在增進 SoC 良率上，是個重要的議題。 
然而在眾多的內建自我修復研究中，絕大
多數都是採用離線自我修復架構，必須先使用
離線自我測試來取得測試結果，但是使用離線
自我測試並無法即時取得系統發生的錯誤，必
須等到系統重置之後，才能由離線自我測試偵
測到錯誤，如此則無法達到即時性的測試並修
復；而在錯誤記憶體位址與相對應備份記憶體
位址的儲存方面，一般都是利用內容可定址記
憶體(Content Addressable Memory, CAM)來做
為儲存裝置，但是系統要存取記憶體時，CAM 
必須對其所要存取的記憶體位址與其內部所
有儲存內容做搜尋比對，如此的搜尋比對動
作，勢必會造成時間上的延遲，也由於每次存
由於測試結構的原因，在典型的離線自我
修復架構中，一般都利用 CAM 來記錄正常記憶
體錯誤位址，以及錯誤位址所對應的備份記憶
體位址，如圖 3所示，由於我們採用區塊式備
份方式，n表示其所切割的區塊數，所以在 CAM 
中亦分為多個區塊(BS0~BSn-1)，各別都儲存著
正常記憶體錯誤位址(Address of faulty 
blocks, FW)，以及錯誤位址所對應的備份記
憶體位址(Address of spare rows, SR)，且
在每個區塊中，都有比對機制(Comparator)，
而在每次存取記憶體時，其記憶體位址(Row 
address)都必須透過比對機制，將要存取的位
址與 CAM 所儲存的全部錯誤記憶體位址(FW)
做搜尋比對，假如要存取的記憶體位址(Row 
address)與其內部的錯誤記憶體位址(FW)有
所吻合(Match)則輸出所對應的備份記憶體位
址(SR)，而也由於區塊式備份的關係，當所切
割的區塊數 n越大時，則需要記錄的正常記憶
體錯誤位址(FW)與其相對應的備份記憶體位
址(SR)也相對的增多，因此 CAM 所需的儲存記
憶體位址將會隨著所切割的區塊多寡成線性
成長。 
 
圖 3: 內容可定址記憶體區塊圖 
由於離線自我修復，無法達到即時性的測
試與修復，其測試動作亦須停止系統的正常工
作才能進行測試，無法即時發現錯誤，除此之
外，離線自我修復中一般使用 CAM 做為儲存裝
置，故系統每次存取記憶體位址時，都必須對
CAM 的資料內容做一次搜尋比對，並且當 CAM
儲存完記憶體錯誤位址及其相對應的備份記
憶體位址後，須將原本應該寫入正常記憶體的
資料再次寫入其對應的備份記憶體中，因此會
造成些微的時間延遲，也造成要達到即時線上
自我修復的瓶頸。 
3.3 線上內建自我修復架構概念 
如圖 4所示，我們將建構一個線上的自我
診斷(BISD)架構，其測試診斷動作，能夠線上
執行診斷，不必停止系統正常運作，故在測試
模式中，則由內建自我修復控制器(BISR 
Controller)來執行診斷與修復工作，且在此
以[1]為基礎建構線上自我診斷架構於 RT 
BISR Interface 區塊中，使其能夠達到線上自
我診斷，而其記憶體錯誤位址將不再使用 CAM 
來做為儲存裝置，在此採用儲存陣列(Store 
array)來取代 CAM 的角色，而在即時性的修復
上，則將儲存陣列所儲存的錯誤位址透過備份
比較器(Store Comparator)做平行比對，並輸
出錯誤位址相對應的備份記憶體資料，接著再
由我們所提出的轉換電路(Switch circuit)來
執行替換修復動作，讓其決定輸出正常記憶體
資料或是備份記憶體資料。 
 
圖 4: 線上區塊式內建自我修復架構 
本計劃採用區塊式備份方式，因此我們再
將區塊式備份方式與整體架構做更詳細的敘
述，如圖 5 所示，將記憶體以四個區塊(Bank 
體位址(111)時，則透過比較器(Comparator)
將要存取的記憶體位址與儲存陣列中所儲存
的錯誤記憶體位址做比對運算，比較器的結構
如圖 8，透過 XNOR 的運算，可以取得比對結
果，由比較器的輸出來致能其相對應的備份記
憶體；當比較器輸出為 1時，則表示要存取的
位址與其錯誤位址相吻合，並且將輸出致能其
相對應的備份記憶體，反之輸出為 0，則表示
沒有相吻合。最後透過轉換電路選擇輸出相對
應的備份記憶體資料，如此則完成整個修復動
作。 
 
圖 7: 儲存陣列架構區塊圖 
 
圖 8: 比較器電路圖 
C. 轉換電路架構運作 
在我們的內建自我修復架構中，轉換電路
(Switch circuit)執行著讓記憶體輸出正確資
料的工作，轉換電路圖，如圖 9所示，其運作
方式是以兩種模式進行，分別是正常模式
(Normal Mode)與自我測試模式(BIST Mode)，
而本計劃的線上自我修復架構是不必停止系
統正常工作，且能進行自我測試診斷動作，所
以轉換電路要能配合系統兩種模式運作。 
1. 正常模式(Normal Mode) 
轉換電路真值表如表一，當在正常模式下
( BISTNor/ 訊號為 1)，除錯訊號(Debug line)
將由除錯資料(Debug data)來決定輸出，並且
透過 D-FF 重置功能來輔助；正常模式下，若
除錯資料為 0，則將 D-FF 的 SET 設為 0、CLR
設為 1，而 D-FF 的內部資料則固定為 0，所以
其輸出資料(Q)為 0，則除錯訊號為 0；反之，
若除錯資料為 1，則將 D-FF 的 SET 設為 1、CLR 
設為 0，而 D-FF 的內部資料則固定為 1，所以
其輸出資料(Q)為 1，則除錯訊號為 1，透過除
錯訊號控制輸出正常記憶體或備份記憶體資
料。 
2. 測試模式(BIST Mode) 
轉換電路真值表如表一，當在測試模式下
( BISTNor/ 訊號為 0)，除錯訊號(Debug line)
將直接由診斷結果來決定輸出，且以時脈
(Clock)做觸發，如果診斷結果發現有錯誤
時，亦須將診斷結果寫入至除錯資料(Debug 
data)中；測試模式下，將 D-FF 的 SET 與 CLR
皆設為 0，讓 D-FF 的輸出由其本身的時脈
(Clock)作觸發，並將資料暫存在 D-FF 中。所
以則由 D-FF 輸入的資料(D)直接輸出資料(Q)
至除錯訊號，透過除錯訊號控制輸出正常記憶
體或備份記憶體資料。 
z 資料維持錯誤(DRF)：記憶體元件在一段
的時間周期之後，無法維持其邏輯值。 
演算法的診斷操作如圖 11，在區塊中，對
於每個March操作動作將以三個字組為一個單
位，其主要概念是由第一個字組與第三個字組
來激發第二個字組發生耦合錯誤，我們將記憶
體分割成五個診斷群組，而針對第一個字組與
最後一個字組上的處理，我們將由第一個字組
之前的位置-1 開始執行，並且在最後一個字組
之後的位置 6結束。我們所提出的診斷演算法
如圖 3-17，每個 March 中執行讀取/寫入，並
且針對中間的字組計算時間延遲，以讀取/寫
入來觸發錯誤模型的發生，亦以計算時間延遲
來診斷資料維持錯誤(DRF)，而在每次執行讀
取動作時，則對該字組進行診斷與修復動作。
演算法中 j 表示為字組位址，ai 表示為此時
記憶體內部資料，di 則表示其測試的圖樣為
Q/QQ，而 Q則為目前記憶體中所儲存的資料。 
 
圖 11: 演算法診斷操作圖 
]);(),([:7
]);(),([:6
]);(),([:5
]);(),([:4
]);(),([:3
]);(),([:2
]);(),([:1
1
2
1
2
1
2
1
2
1
2
1
2
1
2
+
+
+
+
+
+
+
+
+
+
+
+
+
+
⇓
⇑
⇑
⇓
⇓
⇑
⇑
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
j
DelaiwdirM
DeldiwdirM
DeldiwairM
DelaiwairM
DelaiwairM
DelaiwairM
DelaiwairM
 
圖 12: 七個 March 的診斷演算法 
B. 診斷演算法範例 
如圖 13，以一個實例來詳述我們所提出的
診斷演算法，在區塊中我們以字組 0、1 和 2
為一個診斷群組，在 M1 中，先對字組 0 執行
r(ai)w(/ai)，當字組 0 執行完 w(/ai)後，其
字組 0 的資料將由“001＂改變為“110＂，接
著再對字組 1 執行 r(ai)w(/ai)，當字組 1執
行完 w(/ai)後，字組 1 的資料將由“101＂改
變為“010＂，並且開始計算時間延遲(Del)，
直到要下一次 M2 要執行字組 1 的 r(/ai)之
前，才結束計算時間延遲，最後再對字組 2執
行 r(ai)w(/ai)，字組 2的資料也將由“110＂
轉變為“001＂。接著我們將以相似的步驟來
執行 M2 至 M7 的診斷動作。在 M1 至 M4 的診斷
過程中，我們主要是診斷不同字組之間所發生
的錯誤；在同一個字組本身所發生的錯誤，則
是由 M5 至 M7 來執行診斷動作。在診斷演算法
中，di 表示其測試的圖樣為 Q/QQ，而 Q 則表
示目前記憶體中所儲存的資料，故對於狀態耦
合錯誤(State Coupling Fault, CFst)，我們
則可以由測試圖樣 di 來診斷其同一個字組本
身所發生的 CFst。因此，如範例中所示，執行
完 M4 診斷動作後，字組 1的資料為“101＂，
而當執行完 M5 的診斷動作寫入 di 後，字組 1
的資料則改變為“111＂。承上述，由於我們
以備份記憶體資料與正常記憶體資料做比對
診斷，所以我們在每次讀取動作執行時，將會
對該字組進行診斷以及修復動作。 
 
圖 13: 診斷演算法之診斷範例 
在波形圖中，會發現我們必須多一個時脈的時
間來灌錯，即圖中所圈選的部份，而我們修復
的時間僅需一個時脈的時間，如此確實可以達
到即時的線上自我修復架構。 
 
圖 15: 記憶體自我修復耦合錯誤(CFin)<↑
/inv>示意圖 case1 & case2 
 
圖 16: 記憶體自我修復耦合錯誤(CFin)<↑
/inv>波形圖 case1 & case2 
3.8 修復率分析 
A. 修復率分析 
由於製程上的原因，現實上所發生錯誤位
址的分布會較為群聚，所以我們採用的隨機亂
數產生錯誤位址，並不符合現實錯誤位址的分
布，因此我們接下來則採用波氏分布(Poisson 
distribution)來產生隨機亂數的錯誤位址，
由於採用波氏分布，其所產生出來的亂數位址
會較為群聚，較符合因製程所影響的錯誤位址
分布，故如圖 17 與圖 18 所示，與上一個隨機
產生錯誤位址相比較，可以發現僅需要較少的
備份記憶體數量，就可以達到更高的修復率，
因此當錯誤的區塊更為集中時，則自我修復架
構的修復率就會越高。 
 
圖 17: 128*512 記憶體灌 0.2%錯誤之修復率 
 
圖 17: 128*512 記憶體灌 0.4%錯誤之修復率 
B. 硬體負擔分析 
接下來我們分析其硬體的負擔，如表二，
表中的 SR(Spare Row)則表示備份記憶體列
數，而 BS(Bank Select)則表示所切割出來的
區塊個數，RAM size 則是記憶體大小(Row * 
Column)。而表中的硬體成本計算出來的單位
是 Gates，而原始的記憶體硬體成本分析則不
包含備份記憶體，而擁有 BISR 機制的硬體成
本分析，則包含原始記憶體、備份記憶體與
BISR 的修復架構，而成本分析的百分比則表
示在原始的記憶體硬體成本下，加上 BISR 機
制後所增加的硬體成本百分比。在表中，其
1024*16、SR=4、BS=8 的成本分析增加 9.44%，
因為我們採用區塊分割備份方式，而將其 16
的 Bits 寬度分割了 8 個區塊，這將其分割出
太多的區塊來，而造成硬體成本的增加，而當
