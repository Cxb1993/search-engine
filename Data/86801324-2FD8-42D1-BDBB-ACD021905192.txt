CKNN query for moving objects with uncertain 
velocities. Object a moves toward east with a 
starting location at (1,4), and its velocity lies in 
between 1 m/sec and 2 m/sec (i.e., the velocity of 
a is within the range [1, 2]). Similarly, object b 
moves toward south with a starting location at 
(5,3), and the velocity of b is within [1, 2]. For 
ease of illustration, query object q is stationary at 
location (5,4). Segment Sa and segment Sb in the 
figure represent the possible locations of the 
moving objects a and b, respectively, which are 
obtained from the velocities of the moving 
objects. In other words, the location of a (or b) 
can be at any point of Sa (or Sb). At time 1, if a 
and b are located at (2,4) and (5,2), respectively, 
as shown in Case (a), then the 1NN of q is b. 
However, if a and b are at (3,4) and (5,1), 
respectively, which is as likely to occur as in 
Case (b), then the 1NN of q is a. From this 
example, we see that all “possible” locations of 
an object should be taken into account in 
searching for the KNNs of q so as to guarantee 
that all possible answers will be included in the 
result. These possible answers are named the 
possible-KNNs (or PKNNs for short). Identifying 
the PKNNs for every time instant is a 
complicated issue and will be investigated 
thoroughly in this project. 
 
II. RELATED WORK 
Past methods in the literature can be classified 
into two categories according to how the 
velocity of a moving object is treated. Works in 
the first category assume the velocity of a 
moving object is fixed [1, 2, 3, 4]. Under this 
assumption, the trajectory of a moving object 
can be precisely determined. Tao et al. [3] 
proposed a repetitive query processing approach 
for answering CKNN queries. Recently, they 
proposed another method [4] to overcome the 
high-cost problems of their repetitive query 
processing approach, but the method is only 
applicable to static objects. To adapt to moving 
objects and reduce computational cost, 
Raptopoulou et al. [2] proposed an efficient 
method that processes the CKNN query by 
tracing the change of the K-th nearest neighbor. 
Iwerks et al. [1] answered the CKNN query 
through the technique of processing the within 
query. 
Works of the second category release the 
assumption of fixed velocity of moving objects 
so that the velocity is uncertain. Under this 
circumstance, the exact moving trajectory is 
impossible to achieve. Most current approaches 
assume that the location of every object is 
updated repeatedly so as to learn the trajectory of 
a moving object and to process a CKNN query 
[5, 6, 7, 8]. However, due to the nature of 
discrete location updates, the KNNs of a query 
object within two consecutive updates are 
unknown. Song et al. [6] proposed an approach 
in which the snapshot KNN query is reevaluated 
at each time instant at which the moving query 
object location is updated. Mouratidis et al. [5], 
Xiong et al. [7], and Yu et al. [8] extended the 
approach presented in [6] to adapt to moving 
object datasets. 
 
III. UNCERTAIN DISTANCE 
MODEL 
The distance between two objects in our 
model is represented in Euclidean distance. We 
assume the given velocity is between a minimal 
and a maximal velocity and is represented as a 
two-dimensional vector.  
of multiple equations which describe the 
subcases.  
Let us consider an example in Figure 2 to 
illustrate how to derive the minimal distance 
function . In this example, , ( )o qd t
M mo (t)o (t)  first moves toward M mq (t)q (t) , 
then intersects, and then leaves 
M mq (t)q (t) . 
We can see that 
M mo (t)o (t)  intersects 
M mq (t)q (t) within the subinterval [t3, t9].  
The subinterval [t3, t9] is termed the zero 
distance interval within which the minimal 
distance function  = 0. In addition to 
this zero distance interval, there is a 
perpendicular distance
, ( )o qd t
M m( ( ), (t)q (t))Md o t q  
within the subinterval [t1, t8]. That is, the 
distance between  and ( )Mo t M mq (t)q (t)  
within this time interval happens to be equal to 
the length of a line segment from  
perpendicular to 
( )Mo t
M mq (t)q (t) . In the other time 
intervals, this fact does not hold. We term the 
subinterval [t1, t8] the perpendicular distance 
interval of M m( ( ), (t)q (t))Md o t q . Similarly, we 
can find that the perpendicular distance intervals 
of M m( ( ), (t)o (t))Md q t o , M m( ( ), (t)q (t))Md o t q , 
and M m( ( ), (t)o (t))md q t o  are the subintervals [t2, 
t7],   [t4, t11],     and [t5, t10], respectively. 
The zero distance interval and the perpendicular 
distance intervals can be utilized to facilitate the 
derivation of the minimal distance function 
. For example, in Figure 2 the interval 
[
, ( )o qd t
st , t1] overlaps neither with the zero distance 
interval nor with the perpendicular distance 
intervals. Therefore, only four equations 
, , 
, and  are 
possible to be the minimal distance function 
 within [ts, t1]. Because equation 
 gives the smallest value at 
the time instant within [ts, t1], we have the 
minimal distance function             
 = , ∀t ∈ [ts, t1]. 
Besides the above four equations, 
( ( ), ( )M Md o t q t )
)
)
)
( ( ), ( ))m Md o t q t
( ( ), ( )M md o t q t ( ( ), ( ))m md o t q t
, ( )o qd t
( ( ), ( )M Md o t q t
, ( )o qd t ( ( ), ( )M md o t q t
M m( ( ), (t)q (t))Md o t q  in [t1, t2] is also possible 
to be the minimal distance function because its 
perpendicular distance interval [t1, t8] overlaps 
[t1, t2]. As equation d( ,( )Mo t M mq (t)q (t) ) is 
the equation having the smallest value at each 
time instant during [t1, t2], the minimal distance 
function  = , ( )o qd t M m( ( ), (t)q (t))Md o t q , ∀t 
∈ [t1, t2]. In the following, we describe how to 
obtain the zero distance interval and the 
perpendicular distance interval separately.  
    Given two non-parallel segments 
M mo (t)o (t)  and M mq (t)q (t) . The zero 
distance interval, denoted as , can be 
obtained as , 
where 
[ 0, 0]s et t
[max( , ), min( , )]s s e et o t q t o t q
( . 0 . 0) . ( . 0 . 0) .
. . . .
x y
y x y x
M Ms
o
M M M M
q y o y q v q x o x q v
t
o v q v q v o v
− × − − ×= × − ×
( . 0 . 0) . ( . 0 . 0) .
. . . .
x y
y x y x
M Ms
q
M M M M
q y o y o v q x o x o v
t
o v q v q v o v
− × − − ×= × − ×
( . 0 . 0) . ( . 0 . 0) .
. . . .
x y
y x y x
m me
o
m m m m
q y o y q v q x o x q v
t
o v q v q v o v
− × − − ×= × − ×
 
( . 0 . 0) . ( . 0 . 0) .
. . . .
x y
y x y x
m me
q
m m m m
q y o y o v q x o x o v
t
o v q v q v o v
− × − − ×= × − ×
 
    To illustrate how to derive the 
perpendicular distance intervals, we take 
equation M m( ( ), (t)q (t))Md o t q  as an example.  
 
In Figure 2, the perpendicular distance interval 
object o to the query object q, denoted as 
 , within the entire time interval [ts, te]. 
It can be estimated by utilizing the 
function-switching time points  of the 
minimal distance function . Recall that 
the query time interval [ts, te] can be divided into 
n subintervals according to 
m in ,o qd
FSTPt
, ( )o qd t
F ST Pt  of . 
Hence, we have  = min{  }, where 1 
≤ i ≤ n and 
, ( )o qd t
m in ,o qd imd
}{
2
1
, , 1
                            
4
min ( ), ( )     otherwise,
i
i
i i
im
o q i o q i
bc if t
ad
d t d t
+
+
⎧ − <⎪= ⎨⎪⎩
2
i
i
i
b t
a
− <
i
 
and  is represented in the form 
 (referring to Equation (1) 
in Section 3) within the subinterval [ ,
, ( )o qd t
2
i ia t b t c× + × +
it 1it + ], and 
t1 = st  and tn+1 = . et
    The second parameter is the global 
maximal distance of the object o to the query 
object q, denoted as  , within the entire 
time interval [ts, te]. It can be estimated by 
utilizing the function-switching time points 
max ,o qd
F ST Pt  of the maximal distance function 
. Similarly, the time interval [ts, te] can 
be divided into m subintervals according to 
, ( )o qd t
F ST Pt  of . Then, we have  , ( )o qd t
max , max{ }jo q md = d
j
, where 1 ≤ j ≤ m and 
,  and 
 is represented in the form 
1m a x { , ( ) , , ( ) }jM jd D o q t D o q t +=
, ( )o qd t
2
j ja t b t c× + × + j  within the subinterval 
[ jt , 1jt + ], and t1 = ts and tm+1 = te. 
    In the pruning phase, the maximal distance 
 of each object o within [ts, te] is first 
computed, and objects are sorted in ascending 
order of their maximal distances  . 
Then, the pruning distance 
m ax ,o qd
m ax ,o qd
pruningd  is set to the 
maximal distance  of the Kth object, 
because there are K-objects whose maximal 
distances are less than or equal to 
m ax ,o qd
pruningd . 
Finally, whether each object o can be pruned or 
not is determined by comparing its minimal 
distance  with the pruning distance 
. If the minimal distance  of 
object o is greater than , object o can be 
pruned. Otherwise, object o is a candidate for the 
CKNN Query. 
m in ,o qd
pruningd m in ,o qd
pruningd
 
Candidate-Distilling Phase 
In the candidate-distilling phase, the object 
whose maximal distance to the query object q 
ranks the Kth smallest among all the objects’ 
maximal distances to q (which is hereafter 
abbreviated as the Kth smallest maximal 
distance) is continuously monitored from st  to 
 so as to generate an answer-curve. This 
answer-curve can be used to facilitate the task of 
finding the result-changing time points and their 
corresponding PKNNs. Let 
et
Ktho  be the object 
with the Kth smallest maximal distance to q 
among all objects. The maximal distance of 
Ktho  to q at time t is equal to the value of the 
maximal distance function  at t. 
Notice that there are exactly K objects whose 
maximal distances to the query object q at time t 
are less than or equal to the distance . 
Thus, an object o is one of the PKNNs of the 
query object q at time t if its minimal distance to 
q is less than or equal to the distance . 
Otherwise, at least K objects are closer to q at 
time t than the object o is, i.e., object o cannot be 
the PKNN at time t. At each time instant, there 
exists a maximal distance between 
, ( )K tho qD t
, ( )K tho qD t
, ( )K tho qD t
Ktho  and q. 
These maximal distances (i.e., the values of the 
maximal distance functions ) at all 
time instants within [ts, te] together form the 
answer-curve in the time-distance space. 
, ( )o qD tKth
