 
中 文 摘 要 ： 在虛擬的戶外環境中，樹木或森林通常是不可缺少的。為了
增加樹木的逼真性，美術人員通常使用大量的多邊形來建構
樹木的三維模型。然而這會導致渲染時，需要花費大量的記
憶體空間及計算時間。本篇論文提出一種壓縮樹木三維模型
的方法，如何在保有高擬真度的同時，使用較少的記憶體空
間，更有效率的渲染、描繪樹木模型。首先，使用 K-中心聚
集法來將樹木分群，而群中的每棵成員樹，皆可透過一顆具
有代表性的樹及一筆差異性資料來重建。將一筆由樹根開始
排序的樹木資料用一個抽象表示式代替，並且用修改樹木編
輯距離來計算、測量樹木之間的差異性。並且，透過每棵樹
木元件在描繪後，在結果上的重要程度，來定義其細節分級
優先度，以便使用細節分級機制。為了加速渲染，使用圖形
處理單元執行細節分級機制，並且引用幾何物件，此舉有利
於描繪同一群中成員樹木相同的組成元件。最後，用四組森
林資料來檢測我們所提出的壓縮方法的有效性。實驗結果證
明了我們的方法可以節省大量的記憶體空間、維持樹木的逼
真性並加速渲染時的速度。 
中文關鍵詞： 自動化 K-中心聚集，修改樹木編輯距離，樹木壓縮，樹木描
繪 
英 文 摘 要 ： Trees or forests are indispensable and ubiquitous in 
virtual outdoor environments. Artists usually use 
high polygon counts to construct detailed 3D tree 
models to increase realism. However, large memory 
spaces are required, and considerable computation 
power is used for rendering. This paper proposes a 
compression method for 3D tree models to achieve 
rendering efficiency with less memory space and high 
visual fidelity of trees simultaneously. Trees are 
clustered using automatic K-medoids clustering 
method, and each member tree in the cluster can be 
reconstructed based on the representative tree with 
differential data. An abstract representation of an 
ordered rooted tree for each tree model is 
introduced, and the similarity between trees was 
measured using the modified tree edit distance. 
Moreover, an LOD priority for each component was 
associated to facilitate the LOD mechanism by 
considering the contribution to the visual perception 
after rendering. For accelerating rendering, GPU was 
exploited to benefit the LOD mechanism, and the 
1 
行政院國家科學委員會補助專題研究計畫 
□期中進度報告 
■期末報告 
 
樹木管線：樹木合成、資料壓縮、與描繪之研究 
Tree Pipeline: A Study on Tree Synthesis, Compression, and Rendering 
 
計畫類別：■個別型計畫   □整合型計畫 
計畫編號：NSC 100 － 2221 － E － 259 － 031 － 
執行期間：2011年 08月 01日 至 2012年 12 月 31日 
 
執行機構及系所：國立東華大學資訊工程學系暨研究所 
 
計畫主持人：戴文凱 
共同主持人： 
計畫參與人員：林琮凱 李冠逸 黃俊彥 許紘瑋 
國立東華大學資訊工程學系暨研究所 博士班學生 
 
王思元 丘家存 林長毅 吳國維 黃昭元 黃軍皓 吳以尋  
邱明騰 陳炯佑 鄭程元 謝慧萍 
國立東華大學資訊工程學系暨研究所 碩士班學生 
 
 
本計畫除繳交成果報告外，另含下列出國報告，共 _2_ 份： 
□移地研究心得報告 
■出席國際學術會議心得報告 
□國際合作研究計畫國外研究報告 
 
處理方式：除列管計畫及下列情形者外，得立即公開查詢 
            □涉及專利或其他智慧財產權，■一年□二年後可公開查詢 
 
中   華   民   國 101年 12月 31日 
 
3 
into k clusters incrementally. For each cluster, the 
representative tree is compared with the member 
trees to obtain the differential data, including MTED 
operation sequences, transformation matrices, and 
geometry data of the component. The differential 
data of each tree combined with the representative 
tree is exploited to reconstruct all trees in the cluster. 
   Rendering trees in a forest is inefficient without 
exploiting level of detail mechanism. Geometry data 
of the differential data consists of components. For 
each component, we associated an LOD priority to 
facilitate the LOD mechanism according to the 
contribution to the visual perception. A number of 
levels based on the distance of the tree to camera are 
introduced, and each level is predefined on the basis 
of a percentage of polygons that are rendered with 
most acceptable visual perception. The geometry 
data of each medoid and the differential data of each 
member tree is the compressed data of the input tree 
to save disk space and the I/O time. Based on the 
MTED operation sequences, the component is shared 
among member trees, and the multiple of instances 
facilitate geometry instancing for accelerating 
rendering and saving the memory space. Also, our 
LOD mechanism was performed on GPU to stream 
components at the correct level. 
  Our contributions are as follows: (a) All tree 
models can be compressed into a single file with less 
disk storage and less memory space using component 
instances. (b) An efficient GPU-based LOD is 
proposed to achieve rendering efficiency with high 
visual fidelity of trees. (c) A novel similarity 
measurement is introduced by using MTED which 
considers both topology and geometry similarity of 
trees while TED only considers topology similarity 
of trees. (d) A tree reconstruction method using the 
refined MTED operation sequence which can also 
facilitate the LOD mechanism is introduced. (e) An 
AKC method is proposed to cluster trees. (f) A novel 
LOD mechanism for trees is introduced to associate 
each component of trees with an LOD priority to 
accelerate the rendering. 
Four sample testing forests were used to evaluate the 
effectiveness of our method. The experimental 
results demonstrate that the file size can be reduced 
by above 54%, and the loading time is almost 3 times 
faster than that of other file formats. The average 
rendering performance can be accelerated up to 
346.29% by using component instancing and GPU 
based LOD, compared with rendering by tree 
instancing without LOD. The remainder of this paper 
is organized as follows: Section 2 briefly presents 
surveys of the related work in tree representation, 
shape similarity, and level of detail techniques; 
Section 3 provides a description of our method for 
compressing trees; Section 4 provides the 
experimental results and comparisons; and finally, 
Section 5 offers conclusions and future work. 
RELATED WORK 
  The work related to our approach is reviewed from 
the following fields: tree representations, shape 
similarity, and LOD techniques. 
  Tree Representation Rule-based representations 
are most commonly used for plants and trees, such as 
parametric L-systems [4][5]. Trees are constructed 
by replacing symbols of the derived string based on 
specified production rules by geometry data, such as 
trunk, branches, twigs, and leaves. 
Although this representation is concise and powerful, 
it is not easy to conduct the target rules, and is also a 
tedious task for non-experts to adjust the parameter 
values to control trees development flexibly. In 
addition, it is challenging to generate the geometry 
data for symbols realistically. 
  For image-based representations, the most 
commonly used representations are billboards and 
impostors. Billboard clouds were introduced by 
Fuhrmann et al. [6], Lacewell et al. [7], and Mantler 
et al. [8] based on the work of D e´coret et al. [9]. The 
geometry of the tree is replaced with a few images 
textured on polygons, namely impostors. For 
billboards, trees are represented by rectangles, which 
always face the viewer. This representation provides 
excellent visual results at a far-medium distance; 
however, it is inadequate at close views. Moreover, 
upon rendering realism for transparency [10], 
shadow [11], lighting [11] and efficiency for level of 
detail [12], animation [13][14], and interaction with 
environment [13][14] are issues that must be 
addressed. 
  Geometry-based representations are used to 
substitute triangles by points or line primitives, as 
proposed by Weber et al. [15], Stamminger et al. 
[16], Deussen et al. [17], and Gilet et al. [18]. The 
substitution is based on the importance of the 
triangles of trees to increase the efficiency of 
5 
simplify complex plant organs by uniting them into 
several representative quadrilaterals. Deng et al. [36] 
improved previous method of Zhang et al. [35] by 
proposing broad and thin foliage simplification 
algorithms to manage various types of leaves to 
obtain a superior representation of foliage. Lluch et 
al. [20] presented a hybrid multi-resolution scheme 
to represent each LOD of trees. Although these 
methods maintain the visual fidelity, the cost of 
memory is considerably high to store the simplified 
data. 
  For stochastic simplification LOD technique, 
Deussen et al. [17] represented a plant models by 
using a small set of point and line primitives. Each 
LOD level is generated by randomly replacing the 
leaves with points and twigs with line primitives 
while maintaining the visual quality. This method 
requires extra memory space to store the LOD data. 
Klein et al. [37] achieved interactive rendering of 
complex scenes by only rendering samples of 
polygons based on the camera position. This method 
reduces the geometry data substantially; however, it 
cannot maintain the visual fidelity of scenes. Cook et 
al. [38] rendered scenes by randomly selecting a 
subset of the geometric elements and altering those 
elements based on the overall appearance of the 
scene. This method requires no extra memory space 
with preserving the visual fidelity. Gumbau et al. [12] 
introduced a view-dependent multi-resolution LOD 
scheme to interactively reduce the amount of 
geometry required to represent the foliage. Foliage is 
divided into a cloud of cells, and leaves inside each 
cell are stochastically sorted to perform the 
simplification operation on LOD. 
  Inspired by Klein et al. [37] and Cook et al. [38], 
our proposed LOD technique is used to associate 
each component with an LOD priority according to 
its importance, and selects a subset of components to 
render according to the LOD level without the 
requirements of extra memory space. In addition, we 
exploit GPU to speed up the LOD mechanism. 
Recently, Cai et al. [39] proposed a model 
compression method based on Octree. This method 
can achieve a high compression rate and enable 
progressive transmission of encoded 3D data over 
the Internet. However, this method is only for a 
single model. Moreover, LOD mechanism and 
geometry instancing are too complicate to integrate 
this method for accelerating the rendering. 
METHODS 
The input tree model is represented using a 
topology graph, and all trees are subsequently 
clustered into k groups by using AKC with MTED. 
The differential data of each tree combined with the 
medoid tree is obtained and exploited to reconstruct 
all trees in the cluster. To integrate the compression 
method with LOD mechanism, each component of a 
tree is associated with a priority threshold by its 
optimal fit LOD level, and the associated MTED 
operations are subsequently sorted by the priority to 
render each component according to its LOD level. 
Furthermore, to accelerate rendering, geometry 
instancing is applied for similar components among 
member trees, and the GPU-based LOD mechanism 
is performed by streaming components at the correct 
level. 
 
A. Preprocessing 
Without loss of generality, the input tree model 
was assumed to be represented by a 3D mesh 
(component) hierarchy with bill boarding foliage. An 
abstract representation of an ordered rooted tree, 
topology graph G = (V, A), was used to represent the 
input tree, in which V (G) = {  |   is a component 
(trunk, branch, or foliage) of the input tree} and A (G) 
= {<  ,   > |<   ,   > indicates the connectivity 
relationship between components in the tree 
structure}.  
 
B. Tree Similarity 
  The tree clustering is to proceed on the basis of 
tree similarity. Two trees are considered similar if 
both their topology and geometry are similar. The 
topology similarity is measured by MTED, inspired 
by the tree edit distance [2], and the geometry 
similarity is measured based on the shape descriptor 
[29]. 
7 
the new representative tree is re-selected at update 
step. Regardless of which tree is selected initially, 
the result of compression is not affected. At each 
iteration, assign each tree as a member tree    to a 
cluster    if the tree is most similar to the 
representative tree (e.g., medoid)    of   . That is, 
  
where t is the     iteration, i ∈  [1; k], k is the 
number of clusters, mi is the representative tree of 
cluster   , and       (  ,   ) is the similarity 
between mi and dj.  
  At the update step, the representative tree in each 
cluster is re-selected to ensure that the tree is most 
similar to all member trees. The representative tree 
   
     
 is updated as follows: 
 
where    and    are in the same cluster     
   
. The 
step of evaluation is to see if the clustering is stable 
at t iteration. The clustering is said to be stable if the 
geometry data size of all clusters at the t+     
clustering is larger than that of all clusters at the  
    clustering. The geometry data size      is 
determined as follows: 
 
where k is the number of clusters, Size(  ) denotes 
the polygon count of mi, and the      (  ,   ) is the 
similarity between mi and dj , which denotes the 
polygon count of differential components. When 
stable, the clustering process stops, and the geometry 
data size is optimal. Otherwise, one more cluster is 
required. The selection of the representative tree 
     of the new cluster is based on two criteria: 
 
where k is the number of clusters (iterations). The 
new initial representative tree in a new cluster is 
selected when the polygon count of differential 
components compared with each representative tree 
is larger or equal to its polygon count; that is, dj,i and 
mi are distinct. If no member tree satisfies this 
criterion, a tree with most dissimilarity is selected. 
 
D. Tree Differential Data 
  For each member tree, d, in a cluster, the tree 
differential data DiffData(m, d) must be computed. 
DiffData(m, d) consists of a sequence of MTED 
operations required to transform m into d and the 
associated data of the corresponding components. 
The associated data, transformation matrix Mparent 
and geometry data, for each operation must be ready 
beforehand to build the connectivity relationship 
between components and the approximate 
components of member tree. Three additional pieces 
of information for Add operation are required, 
including the parent node, left sibling node, and 
children nodes of the adding node. One more 
information for Map operation is the scaling matrix 
Mscale of the mapped node because the Map 
operation is a mapping for two similar nodes without 
considering the scale (see Section III-B). No 
associated data exists for Delete operation. 
Relabel(  
  → 
 
  
) operation requires saving of extra 
geometry data of  
 
  
, and Mparent of  
 
  
 is used 
instead. For operation Map(  
  → 
 
  
), the geometry 
data of   
  is used for  
 
  
when reconstructing  
 
  
of 
tree   ; therefore, we save the space for   
  
, the 
Mparent of   
  is replaced by that of  
 
  
 to 
correctly maintain local transformation, and the 
scaling matrix Mscale of   
  can be obtained by 
determining theratios of corresponding axes of   
  ’s 
9 
refined by the following rules: 
(1) Add(  
  
) + Map(  
    
 
  
)= Add(  
  ) 
(2) Add(  
  
) + Relabel(  
    
 
  
)= Add( 
 
  
) 
(3) Add(  
  
) + Delete(  
  ) = ϕ.  
Rule 1 denotes that the net operation is to add   
   
because   
  and  
 
  
are similar in geometry. In other 
words, no differenceoccurs when adding  
 
  
or  
 
  
 ; 
however, adding   
  can reduce the geometry data 
because the geometry of the representative tree 
already exists. Rule 2 denotes that   
   and  
 
  
are 
not similar, and  
 
  
of member tree must be added. 
Rule 3 denotes that both operations can be removed 
when adding    
   and subsequently deleting it. Fig. 
4 shows an example of refining MTED operations. 
The algorithm of computing differential data, Diff 
Data(mi, dj)(Algorithm 5), is shown in Fig. 6. The 
refined MTED operation sequence consists of only 
Add operations. Therefore, member tree 
reconstruction can be accelerated, and the refined 
MTED operation sequence can be used for the level 
of detail representation. 
E. Level of detail 
For each component in an operation, we 
associated an LOD priority to facilitate the LOD 
mechanism. The LOD priorities of 
branch components and foliage components are 
considered separately. The LOD priority of a branch 
node   
  is defined as follows: 
 
where      (   
 ) denotes the shape difference, 
       
    (  
 )denotes the normalized distance from the 
trunk node (root node) to a branch node   
  in the 
tree topology graph, and α and β are weights for 
leveraging this two metrics. 
  The shape difference measures the shape 
dissimilarity between the convex polyhedrons of tree 
T and T −   
 . T −   
 indicates that the subtree 
rooted by   
  is removed. Namely,       is defined 
as
 
where        is the shape dissimilarity (see Section 
III-B), and poly(T) is the convex polyhedron of tree 
T. The normalized distance for a branch node   
  is 
defined as follows: 
 
where         (  
 ) is the tree level distance from 
root node to node   
 , and recursively defined 
by
 
  The idea of defining priority for foliage is to 
assign the foliage near the trunk a lower priority 
because it contributes less to the shape of the tree. 
Foliage at outer layer has higher priority than those 
at inner layer to remove the foliage at all leaf 
branches averagely. Therefore, the LOD priority for 
foliage node   
  is defined as follows: 
 
where   
 :parent is the parent node (branch node) of 
the foliage node,         (.) is the tree level distance, 
        (T) is the number of the branch nodes in 
tree T, and        (  
 ) is the order of sibling from 
the leftmost one to itself. 
  According to the LOD priority, the operation 
sequence of the tree differential data is rearranged in 
a non-decreasing order. Numerous criteria of LOD 
[37][24][38][36][20][12] can be applied to the 
proposed LOD priority. This study presets a number 
of levels based on the distance of the tree to camera 
and the percentage of polygons being rendered with 
most acceptable visual perception at each level. 
Hence, each component in the operation sequence is 
marked by its optimal fit LOD level. When rendering, 
components of a tree with LOD priority lower than 
11 
geometry and material information, as shown in Fig. 
7. That is, the index and size of vertex data in the 
vertex buffer and index buffer, and textures and 
shading parameters. The transformation matrix is an 
associated matrix of scaling and world 
transformation matrices from root to the node of the 
operation in the tree topology graph. 
  Components of the medoid tree in a cluster may be 
reused several times. Therefore, the performance of 
rendering can be accelerated by using component 
instancing. The geometry shaders (GS) were 
exploited to perform LOD. A point list was used to 
represent the instance-specific data of each instance 
of component, and was passed to GS. In GS, the 
distance to camera was obtained and used as the 
LOD priority threshold for pruning redundant details. 
The GS eventually streamed instance-specific data 
for those that were not pruned, and instancing was 
subsequently performed. 
CONCLUSIONS AND FUTURE WORK 
This paper presents a compression method for 
trees based on tree similarity to save memory space 
with rendering efficiency. A topology graph for a 
tree model is introduced. The similarity between 
trees is measured by MTED, which considers both 
the similarity of topology relationship and geometry. 
Based on MTED, we propose an AKC method to 
group trees into k clusters incrementally, and to 
select the medoid of each cluster to reduce similar 
components of member trees. Finally, our method 
uses the organized differential data to represent all 
member trees. The shared components are rendered 
by using geometry instancing [42] for accelerating 
rendering. Moreover, we associate each component 
with an LOD priority to facilitate the LOD 
mechanism according to the contribution of the 
visual perception after rendering, and exploit GPU to 
speed up the LOD mechanism. Our compression 
method can reduce the file size by above 54%, and 
accelerate the loading time by 3 times that of 
compared file formats. Moreover, the average 
rendering performance was accelerated by up to 
346.29% using component instancing and 
GPU-based LOD mechanism.  
The effectiveness of compression can be further 
reduced because the proposed MTED method 
guarantees the ordering relationship between sibling 
nodes. For example, two trees, F and G, are in the 
same cluster, and each tree consists of three 
components, as shown in Figures 15(a) and (b), 
respectively. Assume that tree F is the representative 
tree, and tree G is the member tree. Ideally, if the 
MTED operation sequence consists of Map (  → 
  ), Map(  →  ), and Map (  →  ), no extra 
memory space is required to store the geometry data 
of components. However, the MTED operation 
sequence is in an order, that is, Map(  →  ), 
Relabel(  →  ), and Relabel(  →  ), because 
node BF is the left sibling of node    to reduce the 
effectiveness of compression because of the extra 
memory space required for the geometry data of 
components    and   . Future studies will relax 
the order of sibling nodes to improve the 
13 
[Online]. Available: 
http://doi.acm.org/10.1145/1889863. 1889877 
[15] J. Weber and J. Penn, “Creation and rendering 
of realistic trees,” in Proceedings of the 22nd annual 
conference on Computer graphics and interactive 
techniques, ser. SIGGRAPH ’95. New York, NY, 
USA: ACM, 1995, pp. 119–128. [Online]. Available: 
http://doi.acm.org/10.1145/ 218380.218427 
[16] M. Stamminger and G. Drettakis, “Interactive 
sampling and rendering for complex and procedural 
geometry,” in Proceedings of the 12th Eurographics 
Workshop on Rendering Techniques. London, UK: 
Springer-Verlag, 2001, pp. 151–162. [Online]. 
Available: http://dl.acm.org/citation.cfm? 
id=647653.732280 
[17] O. Deussen, C. Colditz, M. Stamminger, and G. 
Drettakis, “Interactive visualization of complex plant 
ecosystems,” in Proceedings of the conference on 
Visualization ’02, ser. VIS ’02. Washington, DC, 
USA: IEEE Computer Society, 2002, pp. 219–226. 
[Online]. Available: 
http://dl.acm.org/citation.cfm?id=602099.602133 
[18] G. Gilet, A. Meyer, and F. Neyret, “Point-based 
rendering of trees,” in Eurographics Workshop on 
Natural Phenomena, P. P. E. Galin, Ed., 2005, pp. 
67–72. [Online]. Available:  http://wwwevasion. 
imag.fr/Publications/2005/GMN05  
[19] I. Remolar, C. Rebollo, M. Chover, and J. 
Ribelles, “Real-time tree rendering,” in 
Computational Science - ICCS 2004, ser. Lecture 
Notes in Computer Science, M. Bubak, G. van 
Albada, P. Sloot, and J. Dongarra, Eds. Springer 
Berlin / Heidelberg, 2004, vol. 3039, pp. 173–180. 
[20] J. Lluch, E. Camahort, J. L. Hidalgo, and R. 
Vivo, “A hybrid mutiresolution representation for 
fast tree modeling and rendering,” Procedia 
Computer Science, vol. 1, no. 1, pp. 485 – 494, 2010, 
iCCS 2010. [Online]. Available:  http://www. 
sciencedirect.com/science/article/pii/ 
S1877050910000530 
[21] A. Tal and E. Zuckerberger, “Mesh retrieval by 
components,” in Advances in Computer Graphics 
and Computer Vision, ser. Communications in 
Computer and Information Science, J. Braz, A. 
Ranchordas, H. Araujo, and J. Jorge, Eds. Springer 
Berlin Heidelberg, 2007, vol. 4, pp. 44–57. 
[22] D.-Y. Chen, X.-P. Tian, Y.-T. Shen, and M. 
Ouhyoung, “On visual similarity based 3d model 
retrieval,” Computer Graphics Forum, vol. 22, no. 3, 
pp. 223–232, 2003. [Online].  Available: 
http://dx.doi.org/10.1111/1467-8659.00669 
[23] D. Zhang and G. Lu, “An integrated approach to 
shape based image retrieval,” in Proc. of 5th Asian 
Conference on Computer Vision (ACCV), 2002, pp. 
652–657.  
[24] T. P. Wallace and P. A. Wintz, “An efficient 
three-dimensional aircraft recognition algorithm 
using normalized fourier descriptors,” Computer 
Graphics and Image Processing, vol. 13, no. 2, pp. 99 
– 126, 1980. [Online]. Available: 
http://www.sciencedirect.com/science/article/ 
B7GXF- 
4PW613J-1/2/a9f50d86712f45130b91a0130155ead3 
[25] R. Ohbuchi, K. Osada, T. Furuya, and T. Banno, 
“Salient local visual features for shape-based 3d 
model retrieval,” in Shape Modeling and 
Applications, 2008. SMI 2008. IEEE International 
Conference on, 2008, pp. 93 –102. [26] D. G. Lowe, 
“Distinctive image features from scaleinvariant 
keypoints,” International Journal of Computer Vision, 
vol. 60, pp. 91–110, 2004. [Online]. Available: 
http://dx.doi.org/ 10.1023/ 
B:VISI.0000029664.99615.94 
[27] R. Gal and D. Cohen-Or, “Salient geometric 
features for partial shape matching and similarity,” 
ACM Trans. Graph., vol. 25, pp. 130–150, January 
2006. [Online]. Available: 
http://doi.acm.org/10.1145/1122501.1122507  
[28] Y. Lamdan and H. J. Wolfson, “Geometric 
hashing: A general and efficient model-based 
recognition scheme,” in Computer Vision., Second 
International Conference on, Dec. 1988, pp. 238 –
249. 
[29] T. Funkhouser, M. Kazhdan, P. Shilane, P. Min, 
W. Kiefer, A. Tal, S. Rusinkiewicz, and D. Dobkin, 
“Modeling by example,” ACM Trans. Graph., vol. 
23, pp. 652–663, August 2004. [Online]. 
Available:http://doi.acm.org/10.1145/1015706. 
1015775 
[30] H. Sundar, D. Silver, N. Gagvani, and S. 
Dickinson, “Skeleton based shape matching and 
retrieval,” in Proceedings of the Shape Modeling 
International 2003. Washington, DC, USA: IEEE 
Computer Society, 2003, pp. 130–139. [Online]. 
Available: 
http://dl.acm.org/citation.cfm?id=829510.830339 
15 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。 
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■  達成目標 
□ 未達成目標（請說明，以 100 字為限） 
□ 實驗失敗 
□ 因故實驗中斷 
□ 其他原因 
說明：  
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100 字為限） 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
 
 我們提出一個 Tree Pipeline 系統，能將美術人員建置完整的大量的樹林幾
何資訊進行壓縮降低資料量減少儲存空間與 I/O 頻寬，或者給予的幾棵
範例樹合成出整片樹林並且符合美術人員要求的環境設定。在描繪的時
候，透過 GPU 還原出原始樹林同時也使用 GPU 來加速描繪的速度(使用
Geometry instancing)並導入 Level of Detail 的技術，提升整體描繪效能。 
 
我們已將上述方法之研究成果，彙總成學術論文發表: 
 Shih-Yuan Wang, Cong-Kai Lin, Wen-Kai Tai*,“Compressing 3D Trees with 
Rendering Efficiency Based on Differential Data and Editing Operations,
“ IEEE Transactions on Multimedia, Accepted and will be published in 
Feb. 2013 (SCI/IF 1.935, 5Y-IF= 2.164) (COMPUTER SCIENCE, 
INFORMATION SYSTEMS 22/133)(COMPUTER SCIENCE, SOFTWARE 
ENGINEERING 7/103)(TELECOMMUNICATIONS15/78) 
 
 
國立東華大學 
補助國內大學校院博士班研究生出席國際會議報告 
National Dong Hwa University 
 The report of attendance overseas International conference for PH.D student 
 
姓名 Name  許紘瑋 
系所及年級 Dept. & Year  資訊工程學系博士班三年級 
會議時間 
Conference Date 
 自 2011 年 11 月 2 日至 2011 年 11 月 3 日 
 Fr  Yr  M  D  to  Yr  M  D 
地點 
Conference site 
 USA, California, City of Orange 
會議正式名 
Conference Name 
IEEE International Games Innovation Conference 
擬發表論文題目 
Title of Paper 
Fractal Territory Board Game 
一、與會心得 Report 
 
    IEEE International Games Innovation Conference (IGIC) 為一年一度之遊戲創新國際研討
會，第一屆於 2009 年在倫敦舉行，第二屆在香港，本年度為第三屆。此會議目的能夠讓全世界
遊戲相關技術或內容的開發者分享彼此之間創新想法，並且可以在會議中交換意見，期望可以
激發出更不一樣的火花。此會議並不局限於學術界，也歡迎產業界與政界參與。 
 
    本次為學生第五次出席國際研討會，但先前會議的參與者絕大多數為華人，除了正式報告
時使用英文之外，私底下的交換意見與討論都可以使用中文進行。與本次會議相比之下，此次
研討會的參與者來自世界各地，正式報告與會後之討論皆使用英文。 
 
    學生在 Paper Session 1 進行口頭報告，報告完之後的 Q&A 時間，意外地大家都非常熱絡地
提問，並一同討論我們研究論文的未來性、發展性，更甚至於還提供了非常多具有建設性的意
見，讓我有了更多的想法。Session 結束後，更有來自日本的 Kien 與我進行更深入的討論，恰巧
Kien 的研究題目與我們 Lab 的其中一個方向相符合，我們又剛好下榻同一間飯店，本次會議期
間與他的互動非常多，也交換了聯絡方式，希望未來有什麼新的研究成果可以互相分享。除此
之外，也認識了來自新加坡、印度、美國的研究生，彼此分享並交換想法。 
 
    此趟美國行，著實令我大開眼界，一直以來，我都只有在東南亞地區參與研討會。來到民
主大國，除了研究與想法的創新讓我備受薰陶之外，當地民眾對於服務與法治的觀念強烈，更
是令我印象深刻。期望之後能夠再接再厲，發表更多的論文於國際會議上。 
 
 
 
 
國科會補助專題研究計畫出席國際學術會議心得報告 
                                  日期： 101 年 11 月 19 日 
                                 
一、參加會議經過 
2012/11/2  
    中午從桃園中正機場搭乘 CX495前往香港，並轉機 CX6732前往加德滿都，抵達
時間為當地時間晚上十點半。辦完落地簽證出機場就接近十二點，飯店接駁車已經
在外頭等待，抵達飯店已經快一點了。 
2012/11/3 
   由於我們住的飯店並不是會議舉辦地點，故早上七點搭乘大會的接駁車前往會
議地點，註冊並領取資料後，便於會場等待。九點開場，各主持人致詞完畢後，緊
接著第一場的 Keynote。之後，有一個特別的 Session，每一位參加 DEMO的研究者，
必須要在 45秒內報告完自己的研究，短短約十分鐘內就聽完下午所有要展示的題目。
之後是 Regular Session 1，共有五篇報告，全部都是來自日本的研究。午餐過後，
計畫編號 NSC 100 － 2221 － E － 259 － 031 － 
計畫名稱 樹木管線：樹木合成、資料壓縮、與描繪之研究 
出國人員
姓名 
許紘瑋 
服務機構
及職稱 
國立東華大學資訊工程所博士生 
會議時間 
2012 年 11 月 3 日至 
2012 年 11 月 5 日 會議地點 Kathmandu, Nepal 
會議名稱 
(中文)第九屆先進電腦娛樂研討會 
(英文) 9th Advances in Computer Entertainment Conference 
發表題目 
(中文)賽道自動化生成系統 
(英文) An Automatic Race Track Generating System 
二、與會心得 
Advances in Computer Entertainment Conference (ACE) 為一年一度之先進電腦
娛樂研討會，本次為第九屆，並且也是史上第一次電腦娛樂相關的會議舉辦在一個
新興國家( Emerging World) 尼泊爾。此會議目的是希望能夠集結全世界電腦娛樂上
的研究者們，不分業界或是學界，一同分享與討論最先進的電腦娛樂技術，在會議中交換
意見，以激發出不同的火花。 
本次為學生第六次出席國際研討會，雖然之前已經有過相當的經驗，但是要前
往如此的新興國家參加會議還是有些許緊張。除此之外，尼泊爾位於西馬拉雅山脈，
其首都加德滿都位於約海拔一千四百公尺左右，氣候和環境都與之前到過的國家截
然不同，也因此事前準備花費相當多的時間。 
此會議有一個很特殊的 Kids Workshops，這是我之前沒有聽說過的。主要是與
當地的國中、小學合作，讓與小孩電腦娛樂相關的研究者可以與當地的小朋友們進
行臨床的實驗、測試。也由於這個 Workshop的緣故，我們前往較偏僻的地區，並且
步行了約 20分鐘才抵達一間國小，並在那裏舉辦會議的行程。此段時間讓我看到了
一般觀光客看不到的真正村落樣貌，讓我可以直接接觸當地最真實的環境與小孩子
們，真的是看到很多不一樣的東西。 
學生於 Regular Session 3進行口頭報告，但是由於先前的 Keynote 2演講延遲，
故報告時間濃縮成九分鐘，並且沒有提問的時間，著實可惜。不過，由於有了先前
出國的經驗，這一次我把握 Coffee Break的時間，主動去找一些報告的論文是我感
興趣的作者，特別是來自紐西蘭的 Chris Deaker所發表的論文，題目為 A Survey of 
Players’ Opinions on Interface Customization in World of Warcraft，讓我們
從那一天熱烈討論之後，幾乎都是一起行動。 
五、攜回資料名稱及內容 
1. ACE2012 Proceedings 乙本 
 
六、其他 
    感謝學校與國科會能夠提供本次參與會議之經費，使本人能夠順利地參加本次
於尼泊爾舉辦的國際會議。日後學生必定會更加努力跟隨世界的脈動，遵循戴文凱
教授的指導，於各大國際期刊中展現我國的研發能力。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
國科會補助計畫衍生研發成果推廣資料表
日期:2013/03/05
國科會補助計畫
計畫名稱: 樹木管線：樹木合成、資料壓縮、與描繪之研究
計畫主持人: 戴文凱
計畫編號: 100-2221-E-259-031- 學門領域: 計算機圖學
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
 我們提出一個 Tree Pipeline 系統，能將美術人員建置完整的大量的樹林幾
何資訊進行壓縮降低資料量減少儲存空間與 I/O 頻寬，或者給予的幾棵範例樹
合成出整片樹林並且符合美術人員要求的環境設定。在描繪的時候，透過GPU 還
原出原始樹林同時也使用 GPU 來加速描繪的速度(使用 Geometry instancing)
並導入 Level of Detail 的技術，提升整體描繪效能。 
 
我們已將上述方法之研究成果，彙總成學術論文發表: 
 Shih-Yuan Wang, Cong-Kai Lin, Wen-Kai Tai*,’Compressing 3D Trees 
with Rendering Efficiency Based on Differential Data and Editing 
Operations,’ IEEE Transactions on Multimedia, Accepted and will be 
published in Feb. 2013 (SCI/IF 1.935, 5Y-IF= 2.164) (COMPUTER SCIENCE, 
INFORMATION SYSTEMS 22/133)(COMPUTER SCIENCE, SOFTWARE ENGINEERING 
7/103)(TELECOMMUNICATIONS15/78) 
 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
