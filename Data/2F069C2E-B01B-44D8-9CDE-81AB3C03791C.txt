中英文摘要
給定一個邊(edge)上具有長度函數(length function)  REl : 的完全圖(complete graph)
G = (V, E)，及一個 V 的子集 R，則 Steiner 樹(Steiner tree)是 G 的一個連通且沒有迴路的子
圖(connected and acyclic subgraph)，且包含 R 中所有的點。R 稱為端末點(terminals)，而 V\R
中的點稱為 Steiner(或 optional)點。我們定義 Steiner 樹的長度等於樹中所有的邊的長度總
和，而 Steiner 樹問題(the Steiner tree problem)就是要在 G 中找一個具有最小長度的 Steiner
樹 [10, 15, 23]。這個問題在 Euclidean metric[17]或 rectilinear metric[18]都被證明是
NP-complete 問題。Steiner 樹問題及其相關問題有廣泛的應用，例如 VLSI 的廣域或局部的
繞路(local or global routing)、網路的繞路(network routing)、電信通訊(telecommunication)、
無線通訊(wireless communication)及傳輸等[7, 10, 15, 16, 20, 23, 24, 26]。
在本計畫中我們嘗試研究一個與 Steiner 樹問題(the Steiner tree problem)相關的變形問
題：給定一完全圖(complete graph) G = (V, E)；長度函數(length function)  REl : ；及兩個
點的子集合 R V and R’R，我們定義 selected-leaf-terminal Steiner 樹是一種特殊 Steiner
樹，它不但包含所有 R 中的點，而且 R\R’中的點必需為此 Steiner 樹的葉子(leaves)。而
selected-leaf-terminal Steiner 樹問題(選擇性葉端點 Steiner 樹問題)就是要去找一個總長度
 
 

Tvu
vul
,
, 最小的 selected-leaf-terminal Steiner 樹。在本計畫中，我們嘗試証明當邊的長度被
限制在{1, 2}，此問題是 NP-complete，也是 MAX SNP-hard。同時我們也將發展多項式時
間(polynomial time)之近似演算法(approximation algorithms)。
關鍵詞：多項式時間近似演算法、Steiner 樹問題、選擇性葉端點 Steiner 樹問題、NP-complete
問題、MAX SNP-hard。
Abstract
In this project, we try to show that SLTSTP is both NP-complete and MAX SNP-hard. We
shall also develop a polynomial time approximation algorithm for the problem.
Keywords: polynomial time approximation algorithms, the Steiner tree problem, the
selected-leaf-terminal Steiner tree problem, NP-complete, MAX SNP-hard.
(一) 前言
給定一個邊(edge)上具有長度函數(length function)  R: El 的完全圖(complete graph)
G = (V, E)，及一個 V 的子集 R，則 Steiner 樹(Steiner tree)是 G 的一個連通沒有迴路的子圖
(connected and acyclic subgraph)，且包含 R 中所有的點。R 稱為端末點(terminals)，而 V\R
中的點稱為 Steiner(或 optional)點。我們定義 Steiner 樹的長度等於樹中所有的邊的長度總
和，而 Steiner 樹問題(the Steiner tree problem)就是要在 G 中找一個具有最小長度的 Steiner
樹 [10,15,23] 。這個問題在 Euclidean metric[17] 或 rectilinear metric[18] 都被證明是
NP-complete 問題。Steiner 樹問題及其相關問題有廣泛的應用，例如 VLSI 的廣域或局部的
繞路(local or global routing)、網路的繞路(network routing)、電信通訊(telecommunication)、
無線通訊(wireless communication)及傳輸、生物資訊(bioinformatics)等 [7, 10, 15, 16, 20, 23,
24, 26]。另外，對於這類問題複雜度的証明和各種近似演算法的效率分析，可參考[3, 4, 5, 6,
14, 22, 25, 27, 30]。
在一些實際的應用中，某些端末點(terminals)會被要求要是 Steiner 樹的葉節點(leaves)，
而其它的端末點可以不需是葉節點。舉例來說，在 VLSI 的廣域繞徑(global routing)中，某
些端末點代表針角(pins)和閘門(gates)，它們不允許為 Steiner 點以增加穩定性，而某些端末
點卻被允許可視為 Steiner 點以減少總成本(total cost)。另一方面，在網路資源分配中，一些
被對應到 Steiner 點的伺服器不能被當作 routers，而其他的伺服器皆無此限制。因此，根據
  mnfnO ,3 -時間複雜度的近似演算法求解 SLTSTP，並使其逼近值在 2ρ內，其中
 mnf , 代表求解 Steiner 樹問題的近似演算法之時間複雜度，n 表示輸入圖的點個數，m 則
表示邊個數。
(三) 研究方法、進行步驟及執行進度
3-1 研究方法
本計畫考慮的圖都為有限(finite)、簡單(simple)、且無迴路(loopless)的圖，用 G = (V, E)
代表一個圖，其中 V 和 E 分別代表點集合和邊集合。另外我們也會用 V(G)來代表點集合，
用 E(G)來代表邊集合。令 G[X]代表由 X 所生成的子圖，X 為 V(G)的子集合。一條從 u 到 u’，
長度為 k 的路徑(path)用一個序列 kvvv ,,, 21  來表示，其中 u = v0，u’= vk，且對於所有 i = 1,
2, …, k，(vi-1, vi)屬於 E，我們也可稱上述的路徑為(u, u’)-路徑。而路徑的長度定義為該路徑
上的邊數。另外，若一條路徑上的所有點全相異(distinct)，則稱此路徑為簡單路徑(simple
path)。
定義 1：對於一個圖 G = (V, E)，其長度函數 l 若符合下列四個條件，則稱為可測度(metric)
的：
1. 對於每一個點 u 屬於 V， l(u, u) = 0。
2. 對於 V 中任意兩點 u、v，l(u, v)0。
3. 對於 V 中任意兩點 u、v，l(u, v) = l(v, u)。
4. 對於 V 中任意三點 u、v、w， l(u, v) + l(v, w)l(u, w) (三角不等式)。
在本計畫中，假設長度函數皆為可測度的。
件，則可稱Π1 L-reduce 到Π2：
(a) 演算法 A1 產生一個Π2的 input instant A1 (I1)滿足 )())(( 111 IOPTIAOPT  ，其中
OPT(I1) 和 OPT(A1(I1))分別代表 I1 和 A1 (I1)的最佳解(optimal solutions)。
(b) 給定任一 A1(I1)的解，其 cost 為 c2，演算法 A2 在多項式時間內產生一個解，其 cost
為 c1 滿足 |))((||)(| 11211 IAOPTcIOPTc   。
對於某一個問題，若所有的 MAX SNP 問題都可以被 L-reduced 到它，則此問題稱為
MAX SNP-hard，但此問題本身可能不是 MAX SNP。換句話說，我們可以藉由提供一個從
某個 MAX SNP-hard 問題到此問題的 L-reduction 來証明此問題是 MAX SNP-hard。Arora et
al. 証明了如果任何的 MAX SNP-hard 問題有一個 polynomial-time approximation
scheme(PTAS)，則 P = NP [1]。
定義 4： 定義 restricted Steiner 樹(RSTP)問題如下：
Input instance：一個可測的長度函數 l：E→{ 1 , 2 }的完全圖 G = (V, E)，和一個端末點所成
的集合 R，R 為 V 之真子集。
問題：找到一個長度最小的 Steiner 樹。
性質 2：[5] RSTP 是一個 MAX SNP-hard 問題。
性質 3：SLTSTP(1,2)是一個 MAX SNP-hard 問題。
在本計畫中，我們將嘗試提出一個從 RSTP 到 SLTSTP(1,2)的 L-reduction。假設 I1 = (G, l, R)
為 RSTP 的一個 input instance，其中 G = (V, E)為一個完全圖，l：E→ {1, 2}，R 為包含於 V
的一個收集末端點的集合。我們嘗試提出一個多項式時間的演算法 A1，依照下面的步驟將
第二步驟：發展與分析 selected-leaf-terminal Steiner 樹問題的近似演算法。
在本計畫中，我們嘗試對 SLTSTP 這個問題提出一個多項式時間之近似演算法。我們
預計的進行步驟如下：
令 ASTP 代表一個目前求解 Steiner 樹問題最佳近似演算法，且其逼近值為
55.1
2
3ln
1  [30]。我們演算法的觀念為先使用 ASTP 來造出 Steiner 樹 SA = (VA, EA)，接
著再將其轉換成一個 selected-leaf-terminal Steiner 樹。對於一個屬於 VA 的點 w，我們令
)(wN
AS
為一個集合，而此集合由所有在 SA 上與點 w 相鄰(adjacent)的點所組成，我們將此
集合稱作“w 的 SA 鄰居”(SA-neighborhood of w)。更進一步，我們令 |)(| wNd
AA SS
 。假設 w1,
w2, …,wk 為 w 的 SA鄰居，使得 ),(),(),( 21 kwwlwwlwwl   。其中，我們將 w1稱作“w
的第一 SA 鄰居”，記作 )(1 wN
AS
，而 w2 稱作“w 的第二 SA 鄰居”，記作 )(2 wN
AS
。
對於任一個屬於 V(SA)的點 r，我們使用 star(r)代表由集合 )}(:),{( rNvvr
AS
 構成的 SA
子樹(sub-tree)。對於任一個長度函數為  R: El 的圖 G，我們定義 


)(
)()(
GEe
elGlen 。之
前我們已經定義過 )]([ rNG
AS
表示在 G 中，且由 )(rN
AS
生成的子圖。我們使用
)])([( rGGMST
AS
來表示 )]([ rNG
AS
的最小加權生成樹(minimum spanning tree)。接下來，我
們將根據下列主要步驟提出我們的近似演算法：
演算法 ASLTSTP(selected-leaf-terminal Steiner樹問題的近似演算法)
輸入：一個具有測度長度函數為  R: El 的完全圖 G = (V, E)，以及一個端末點所成的集
合 R，R 是 V 的真子集，還有一個 R 的子集 R’。
輸出：一個 selected-leaf-terminal Steiner 樹 TG
第三步驟：分析 selected-leaf-terminal Steiner 樹問題的逼近演算法。
接下來我們要分析此演算法的複雜度。
性質 4. 令 r 為集合 '\ RR 中的一個點，且





 



 

0,1||)(max
'
Rvds
Rv
SA
。也令 w0 = 0，以
及 w1,w2,…,ws 代表 SA = (VA, EA)中前 s 個邊長最小的邊。我們便可得到



'\
)())((
RRr
ASrstarlen ，
其中











RRSlen
RRRw
R
A
s
i
i
'if)(
'and'if
'if0
0


 。
)(1 rN
AS
RrRr R’ R’
SA
(a) (b)
)(1 rN
AS
rr R’ R’R R
TG
(c) (d)
)(1 rN
AS
圖二: ASLTSTP 執行圖示。剛開始輸入例子如圖(a)。執行步驟 2 後，Steiner 樹 SA 如圖(b)表
示。對於一點 r  R \ R’，執行步驟 3-1 後將會移除兩個邊，因此只有一個邊  rNr, 1SA 會
接到 r 如圖(c)表示。當執行步驟 3-2 後，的最少權重生成樹就會被建構出來如圖(d)表示。
l(v1, v2)l(r, v1) + l(r, v2),
l(v2, v3)l(r, v2) + l(r, v3) ,
…,
l(vk-1, vk)l(r, vk-1) + l(vi, vk) 。
因此 len(P) = l(v1, v2) + l(v2, v3) + … + l(vk-1, vk)
l(r, v1) + 2．l(r, v2) + 2．l(r, v3) + … + 2．l(r, vk-1) + l(r, vk)
= 2．len(star(r))– ))(,())(,( 21 rNrlrNrl
AA SS

因為路徑 P 也是 G[NG(r)] 的生成樹，
len(MST(G[NG(r)]))2．len(star(r))– ))(,())(,( 21 rNrlrNrl
AA SS

圖三   rNrN
AA SS
21 , 路徑
若 TA 為演算法執行後所得到的一個 selected-leaf-terminal Steiner 樹，由 TA 可建構出：
len(TA)len(SA) + 


'\
1 )))(,())(()]))([(((
RRr
SG rNrlrstarlenrNGMSTlen A
len(SA) + 


'\
2 )))(,())(((
RRr
S rNrlrstarlen A
len(SA) + 
 '\
)))(((
RRr
rstarlen
r
v1 = rN
AS
1
v2
v3 v4
vk -1
vk = rN
AS
2
似演算法之集合，使得無論多小的正常數> 0，集合中存在一近似演算法求解 A，其近似
值為 1 +。如果我們成功證明 the selected-leaf-terminal Steiner 樹問題為 MAX SNP-hard，
則我們有極大的理由相信此問題無多項式近似機制，但是否存在常數逼近值的多項式時間
近似演算法則是一值得深入探討的主題。
性質 9. 在長度函數為非可測度的情況下，研究這個問題是否存在近似演算法。
第五步驟：利用求解 selected-leaf-terminal Steiner 樹問題的技巧，研究相關問題。
3-3 執行進度
已完成所有進行步驟。
年 第一年度 第二年度
月
8,
9
月
10,
11
月
12,
1
月
2,
3
月
4,
5
月
6,
7
月
8,
9
月
10,
11
月
12,
1
月
2,
3
月
4,
5
月
6,
7
月
完成項目 1 ■ ■
完成項目 2 ■ ■
完成項目 3 ■ ■ ■
完成項目 4 ■ ■ ■ ■
完成項目 5 ■ ■ ■
完成項目 6 ■ ■
完成項目 7 ■ ■
完成項目 8 ■ ■ ■
完成項目 9 ■ ■
完成項目 10 ■ ■ ■
hardness of approximation problems,” Journal of the Association for Computing
Machin-ery, vol. 45, pp. 501-555, 1998.
[2] H. J. Bandelt and H. M. Mulder, Distance-hereditary graphs, Journal of Combinatorial
Theory Series B, 41(1):182--208, Augest 1986.
[3] P. Berman and V. Ramaiyer,  “Improved approximations for the Steiner tree problem,” 
Journal of Algorithms, vol. 17(3), pp. 381-408, 1994.
[4] M. Bern, “Faster exact algorithms for Steiner tree in planar networks,” Networks, vol. 20,
pp. 109-120, 1990.
[5] M. Bern and P. Plassmann, “The Steiner problem with edge lengths 1 and 2,” Information
Processing Letters, vol. 32(4), pp. 171-176, 1989.
[6] A. Borchers and D. Z. Du, “The k-Steiner ratio in graphs,” SIAM Journal on Computing,
vol. 26(3), pp. 857-869, 1997.
[7] A. Caldewl, A. Kahng, S. Mantik, I. Markov, and A. Zelikovsky, “On wirelength
estimations for row-based placement,” in Proceedings of the 1998 International Symposium
on Physical Design (ISPD), pp. 4-11.
[8] M. S. Chang, S. Y. Hsieh, and G. H. Chen, Dynamic Programming on Distance-Hereditary
Graphs, in Proceedings of 7th International Symposium on Algorithms and Computation
(ISAAC'97), LNCS 1350, pp. 344-353, 1997.
[9] Y. H. Chen, C. L. Lu, and C. Y. Tang,  “On the ful and botleneck ful Steiner tree 
problems,”in Proceedings of the 9th Annual International Conference on Computing and
Combinatorics(COCOON), LNCS 2697, pp. 122-129, 2003.
[10] X. Cheng and D. Z. Du, Steiner Trees in Industry, Kluwer Academic Publishers, Dordrecht,
Netherlands, 2001.
[11] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein, Introduction to Algorithms
(Second Edition), MIT Press, Cambridge, 2001.
[12] B. Courcele, J. A. Makovsky, U. Rotics, “Graphs of Bounded Clique-width”, Theory of
Computing Systems, vol. 33, pp. 125-150, 2000.
[13] A. D'atri and M. Moscarini, Distance-hereditary graphs, Steiner trees, and connected
domination, SIAM Journal on Computing, 17(3):521-538, 1988.
[14] D. Z. Du, “On component-size bounded Steiner trees,” Discrete Applied Mathematics,
vol.60, pp. 131-140, 1995.
[15] D. Z. Du, J. M. Smith, and J. H. Rubinstein, Advance in Steiner Tree, Kluwer Academic
Publishers, Dordrecht, Netherlands, 2000.
[16] L. Foulds and R. Graham, “The Steiner problem in phylogeny is NP-complete,” Advances
in Applied Mathematics, vol. 3, pp. 43-49, 1982.
[17] M. Garey, R. Graham, and D. Johnson, “The complexity of computing Steiner minimal 
trees,” SIAM Journal on Applied Mathematics, vol. 32, pp. 835-859, 1977.
[18] M. Garey and D. Johnson, “The rectilinear Steiner problem is NP-complete,” SIAM Journal
on Applied Mathematics, vol. 32, pp. 826-834, 1977.
[19] M. C. Golumbic, U. Rotics, “On the Clique-Width of Perfect Graph Classes”, in
Proceedings of the 25th International Workshop on Graph-Theoretic Concepts in Computer
Science (WG'99), LNCS 1665, pp. 135-147, 1999.
[20] D. Graur and W. H. Li, Fundamentals of Molecular Evolution (2nd Edition), Sinauer
problem,”Proceedings of the 4th Annual Conference on Theory and Applications of Models
of Computation (TAMC07, Shanghai, China), Lecture Notes in Computer Science 4484, pp.
274-283, 2007. (SCI Expanded)
2. Sun-Yuan Hsieh and Huang-Ming Gao, “Hardness and Approximation of the
Selected-leaf-terminal Steiner Tree Problem,” Proceedings of the 7th International
Conference on Parallel and Distributed Computing, Applications and Technologies
(PDCAT’06, Taipei, TAIWAN), IEEE Computer Society Press.(EI)
3. Sun-Yuan Hsieh and Shih-Cheng Yang, “Approximating the selected-internal Steiner tree,” 
Theoretical Computer Science, vol. 381, no. 1-3, pp. 288-291, 2007. (SCI, EI)
4. Sun-Yuan Hsieh and Huang-Ming Gao, “On the partial terminal Steiner tree problem,”
Journal of Supercomputing, vol. 41, no. 1, pp. 41-52, July 2007. (SCI)
S.-Y. Hsieh, S.-C. Yang / Theoretical Computer Science 381 (2007) 288–291 289
hardness of the problem1 follows immediately from the hardness results of the Steiner tree problem. It is conceivable
that this problem maybe of practical interest. For example, in a network resource allocation, some specified servers
(terminals) must act as transmitters and the others need not have this restriction. Consequently, in a solution tree, some
terminals are restricted to be internal vertices and the others can be leaves or internal vertices. Another example is in
a sensor network, some nodes might be especially cheap devices that can receive but cannot transmit.
In this paper, we present a 2ρ-approximation algorithm for the problem, where ρ is the best-known approximation
ratio for SISTP. The rest of this paper is organized as follows: In the next Section 2, we present an approximation
algorithm for the problem. Finally, some concluding remarks are provided in Section 3.
2. An approximation algorithm
In this section, we present an approximation Algorithm ASISTP for SISTP. Some useful definitions and notations
are first provided. For a graph G, the degree of v in G, denoted by degG(v), is the number of edges incident to v in G.
A path of length k from a vertex v0 to a vertex vk in a graph G = (V, E) is a sequence 〈v0, v1, v2, . . . , vk〉 of vertices
such that (vi−1, vi ) ∈ E for i = 1, 2, . . . , k. We use PG[u, u′] to denote a path from u to u′ in G. A path is simple if
all vertices in the path are distinct. The cost function c used throughout this paper is metric. For an edge e in a tree T ,
c(e) is the cost of e, and c(T ) is the sum of all the edge costs of T .
Let ASTP denote the best-known approximation algorithm for STP with ratio ρ = 1 + ln 32 ≈ 1.55 [14], and also
let SA = (VA, EA) be the Steiner tree returned by ASTP. For a Steiner tree T of the instance I = (G, R, R′, c) of the
problem SISTP, a vertex v ∈ V (T ) is said to be a demand-leaf if v is a leaf of T and v ∈ R′. Hereafter, we assume
that |R \ R′| ≥ 2 if R′ 6= ∅ (to make sure that the solution of SISTP exists).
Lemma 1. Let T be a Steiner tree of the instance I = (G, R, R′, c) of the problem SISTP such that |R \ R′| ≥ 2. If v
is a demand-leaf of T , then there is an internal vertex mv ∈ V (T ) satisfying one of the following two conditions: (1)
degT (mv) = 2 and mv 6∈ R′, and (2) degT (mv) ≥ 3.
Proof. If neither Condition (1) nor Condition (2) holds, then the resulting tree T is a path 〈v, v1, v2, . . . , vn−1〉 such
that v, v1, v2, . . . , vn−2 are all in R′. Then, |R\R′| ≤ 1 < 2, which contradicts to the assumption that |R\R′| ≥ 2. 
The skeleton of our algorithm is first to apply ASTP to obtain a Steiner tree SA = (VA, EA) spanning R, and then
transform it to a selected-internal Steiner tree based on Lemma 1 to make each demand-leaf of SA to be an internal
vertex. We next present our approximation algorithm, namely Algorithm ASISTP. We call the two vertices mv and tv
selected by Algorithm ASISTP for each demand-leaf v the medium vertex and the target vertex of v, respectively.
It is not difficult to show the following result, which is useful for analyzing the approximation ratio of our algorithm
in Theorem 5.
Lemma 2. Let v1, v2, . . . , vl be an order of the demand-leaves of SA handled by Algorithm ASISTP. Then, the paths
PSA [v1,mv1 ], PSA [v2,mv2 ], . . . , PSA [vl ,mvl ] are pairwise edge-disjoint.
Lemma 3. Suppose that v is a demand-leaf of the current tree T , which is being handled by Algorithm ASISTP. Then,
the target vertex tv does not belong to PSA [v,mv].
Proof. According to Line 8 of the algorithm, it is clear that tv does not belong to PT [v,mv], i.e., tv is not a vertex in
PT [v,mv]. Assume that PT [v,mv] = 〈v0(=v), v1, v2, . . . , vk(=mv)〉. It can be shown by induction that the vertices
of PSA [v,mv] are contained in PT [v,mv] and the relative order of the vertices in PSA [v,mv] are retained in PT [v,mv],
i.e., PSA [v,mv] = 〈v0, vi1 , vi2 , . . . , vi j , vk〉, where 0 < i1 < i2 < · · · < i j < k. Therefore, tv is not a vertex in
PSA [v,mv]. 
Lemma 4. Let P = 〈v1, v2, . . . , vk−1, vk〉 be a path of a graph G = (V, E) with a metric cost function c : E → R+,
and let P ′ = 〈v1, v2, . . . , vk−2, vk−1〉. Then, c(v1, vk)− c(vk−1, vk) ≤ c(P ′), where c(P ′) =∑k−2j=1 c(v j , v j+1).
1 It was shown that if any MAX SNP-hard problem has a polynomial-time approximation scheme (PTAS), then P = NP [1]. In other words, it is
very unlikely that for a MAX SNP-hard problem to have a PTAS.
S.-Y. Hsieh, S.-C. Yang / Theoretical Computer Science 381 (2007) 288–291 291
Therefore, we have that c(Ts) = c(SA) + ∑v∈LR′ (c(v, tv) − c(mv, tv)) (by the algorithm) ≤
c(SA) + ∑v∈LR′ c(PSA [v,mv]) (by Lemmas 3 and 4) ≤ c(SA) + (c(SA) − ∑v∈Q c(PSA [v,mv])) ≤
2c(SA)−∑|Q|i=1 c(ei ) (by the fact that e1, e2, . . . , e|Q| is the first |Q| smallest-cost edges in SA) = 2c(SA)−∑φ
i=1 c(ei ) = (2 −
∑φ
i=1 c(ei )
c(SA)
)c(SA) ≤ (2 −
∑φ
i=1 c(ei )
c(SA)
)ρc(T ∗) (by c(SA) ≤ ρc(T ∗)). Therefore, c(Ts )c(T ∗) ≤
(2−
∑φ
i=1 c(ei )
c(SA)
)ρ. It is clear that 0 ≤ σc(SA) ≤ 1. 
We next analyze the time complexity of Algorithm ASISTP. Let f (n,m) be the time complexity of an approximation
algorithm ASTP for the Steiner tree problem, where n and m are the numbers of vertices and edges of the input graph
G, respectively. Hence, constructing SA in Step 1 takes f (n,m) time. Based on the linear-time depth-first-search to
find the medium vertex mv for each demand-leaf v, the overall for-loop (lines 4–10) can be implemented to run in
O(|R′|(|VA| + |EA|)) = O(|R′||VA|) = O(n2) time. Therefore, we have the following result.
Theorem 6. Algorithm ASISTP can be implemented to run in time O(n2)+ f (n,m).
3. Concluding remarks
In this paper, we develop an approximation algorithm for the selected-internal Steiner tree problem. A future work
is to extend our result to obtain a better approximation algorithm or study the case where the cost function is not
metric.
References
[1] S. Arora, C. Lund, R. Motwani, M. Sudan, M. Szegedy, Proof verification and the hardness of approximation problems, Journal of the
Association for Computing Machinery 45 (1998) 501–555.
[2] M. Bern, Faster exact algorithms for Steiner tree in planar networks, Networks 20 (1990) 109–120.
[3] A. Borchers, D.Z. Du, The k-Steiner ratio in graphs, SIAM Journal on Computing 26 (3) (1997) 857–869.
[4] X. Cheng, D.Z. Du, Steiner Trees in Industry, Kluwer Academic Publishers, Dordrecht, Netherlands, 2001.
[5] D.Z. Du, On component-size bounded Steiner trees, Discrete Applied Mathematics 60 (1995) 131–140.
[6] D.Z. Du, J.M. Smith, J.H. Rubinstein, Advance in Steiner Tree, Kluwer Academic Publishers, Dordrecht, Netherlands, 2000.
[7] L. Foulds, R. Graham, The Steiner problem in phylogeny is NP-complete, Advances in Applied Mathematics 3 (1982) 43–49.
[8] M. Garey, R. Graham, D. Johnson, The complexity of computing Steiner minimal trees, SIAM Journal on Applied Mathematics 32 (1977)
835–859.
[9] M. Garey, D. Johnson, The rectilinear Steiner problem is NP-complete, SIAM Journal on Applied Mathematics 32 (1977) 826–834.
[10] D. Graur, W.H. Li, Fundamentals of Molecular Evolution, Second ed., Sinauer Publishers, Sunderland, Massachusetts, 2000.
[11] S. Hougardy, H.J. Pro¨mel, A 1.598 approximation algorithm for the Steiner tree problem in graphs, in: Proceedings of the 10th Annual
ACM–SIAM Symposium on Discrete Algorithms, SODA, 1999, pp. 448–453.
[12] A.B. Kahng, G. Robins, On Optimal Interconnections for VLSI, Kluwer Publishers, 1995.
[13] C.L. Lu, C.Y. Tang, R.C.T. Lee, The full Steiner tree problem, Theoretical Computer Science 306 (2003) 55–67.
[14] G. Robins, A. Zelikovsky, Improved Steiner tree approximation in graphs, in: Proceedings of the 11th Annual ACM–SIAM Symposium on
Discrete Algorithms, SODA, 2000, pp. 770–779.
Metadata of the article that will be visualized in Online First  
 
Journal Name The Journal of Supercomputing 
Article Title On the partial terminal Steiner tree problem 
Corresponding Author Family name Hsieh 
 Particle  
 Given Name Sun-Yuan 
 Suffix  
 Division Department of Computer Science and Information Engineering 
 Organization National Cheng Kung University 
 Address No 1. University Road, Tainan, 701, Taiwan 
 E-mail hsiehsy@mail.ncku.edu.tw 
Author Family name Gao 
 Particle  
 Given Name Huang-Ming 
 Suffix  
 Division Department of Computer Science and Information Engineering 
 Organization National Cheng Kung University 
 Address No 1. University Road, Tainan, 701, Taiwan 
 E-mail  
Schedule Received  
 Revised  
 Accepted  
Abstract We investigate a practical variant of the well-known graph Steiner tree problem. For a 
complete graph G =(V ,E ) with length function l :E →R+ and two vertex subsets 
R ⊂V  and R ' ⊆R , a partial terminal Steiner tree  is a Steiner tree which contains all 
vertices in R  such that all vertices in R ∖R '  belong to the leaves of this Steiner tree. 
The partial terminal Steiner tree problem  is to find a partial terminal Steiner tree T  
whose total lengths ∑ (u,v)∈Tl (u ,v ) is minimum. In this paper, we show that the problem 
is both NP-complete and MAX SNP-hard when the lengths of edges are restricted to 
either 1 or 2. We also provide an approximation algorithm for the problem. 
Keywords The Steiner tree problem - The partial terminal Steiner tree problem - NP-complete - 
MAX SNP-hard - Approximation algorithms 
Footnotes  
 
A
UT
HO
R’
S 
PR
O
O
F
Journal ID: 11227, Article ID: 102, Date: 2007-01-28, Proof No: 1
UN
CO
RR
EC
TE
D 
PR
OO
F
« SUPE 11227 layout: Small Extended ﬁle: supe102.tex (Nadia) aid: 102 doctopic: OriginalPaper class: spr-small-v1 v.2007/01/17 Prn:18/01/2007; 12:59 p. 2»
S.-Y. Hsieh, H.-M. Gao
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
global and local routing, network routing, telecommunications, wireless communi-
cations, transportation, and so on [6, 8, 12, 13, 17, 20, 21, 23]. Interested readers
may refer to [2–5, 11, 16, 18, 19, 22, 24, 27] for some algorithmic results, includ-
ing hardness proofs and approximation algorithms together with their performance
analyses.
In some practical applications, some terminal vertices are required to be leaves
in the Steiner tree and the others may not. For example, in network resource alloca-
tion, some servers are not allowed to act as transmitters corresponding to the Steiner
vertices, and the other servers cannot have this restriction. Another example is in a
sensor network, some nodes might be especially cheap devices that can receive but
cannot transmit. Consequently, in a solution tree, some terminals are restricted to
be leaves and the others can be leaves or internal vertices. Motivated by the above
requirements, we study the following variant of the Steiner tree problem. For a com-
plete graph G = (V ,E) with length function l : E → R+ and two vertex subsets
R ⊂ V and R′ ⊆ R, a partial terminal Steiner tree is a Steiner tree which contains
all vertices in R such that all vertices in R \ R′ belong to the leaves of this Steiner
tree. The partial terminal Steiner tree problem (PTSTP for short) is to ﬁnd a partial
terminal Steiner tree with the minimum length for the given complete graph. Since
a trivial solution can be obtained when |R| = 1, we assume |R| ≥ 2 throughout this
paper. In the special case of R′ = ∅ (i.e., all the vertices of R belong to the leaves),
PTSTP is equal to the terminal Steiner tree problem [10, 24], or the full Steiner tree
problem [25] that was independently proposed by Lu et al. The full Steiner tree prob-
lem has an application on the reconstruction of phylogenetic (or evolutionary) tree
in biology. From the viewpoints of biologists, the terminals of a full Steiner tree T
can be regarded as the extant taxa (or species, morphological features, biomolecu-
lar sequences), the internal vertices of T as the extinct ancestral taxa, and the length
of each edge in T as the evolutionary time along it. Then T might correspond to
an evolutionary tree of the extant species, which trends to minimize the tree length
according to the principle of parsimony (i.e., nature always ﬁnds the paths that re-
quire a minimum evolution) [17]. Hence, the problem of reconstruction of such kind
of phylogenetic tree can be considered as the full Steiner tree problem, if the extant
taxa and their possible ancestral taxa are given. The full Steiner tree problem also has
applications in VLSI global routing and telecommunications [24].
The currently best-known approximation algorithm for the Steiner tree problem
has the approximation ratio ρ = 1 + (ln 3/2) ≈ 1.55 [27]. For the length func-
tion be metric (i.e., the lengths of edges satisfy the triangle inequality), Lin and
Xue [24] presented a polynomial time approximation algorithm with performance
ratio ρ + 2 for the terminal Steiner tree problem; Chen, Lu, and Tang [7] provided a
2ρ-approximation algorithm for the above problem. In particular, Lu et al. [25] pre-
sented a 53 -approximation algorithm for the terminal Steiner tree problem when the
lengths of edges are restricted to either 1 or 2. In this paper, we ﬁrst show that PTSTP
is both NP-complete and MAX SNP-hard. We then construct a O(n3 +f (n,m))-time
algorithm with approximation ratio within 2ρ for PTSTP, where f (n,m) is the time
complexity of the best-known approximation algorithm for Steiner tree problem on
an input graph with n vertices and m edges.
The rest of this paper is organized as follows: In the next section, some necessary
deﬁnitions and notations are introduced. In Sect. 3, we show that PTSTP is both
A
UT
HO
R’
S 
PR
O
O
F
Journal ID: 11227, Article ID: 102, Date: 2007-01-28, Proof No: 1
UN
CO
RR
EC
TE
D 
PR
OO
F
« SUPE 11227 layout: Small Extended ﬁle: supe102.tex (Nadia) aid: 102 doctopic: OriginalPaper class: spr-small-v1 v.2007/01/17 Prn:18/01/2007; 12:59 p. 4»
S.-Y. Hsieh, H.-M. Gao
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
as a graph) that maximizes |{x : ψ(x,G,S)}|, where ψ is a ﬁrst-order expression.
Papadimitrious and Yannakakis showed that all problems within MAX NP and MAX
SNP have constant-factor approximation algorithms. Furthermore, MAX SNP has
problems that are “complete” with respect to some type of polynomial reduction,
called L-reduction, that preserves approximability. The reduction is formally deﬁned
as follows:
Deﬁnition 3 Let 1 and 2 be two optimization problems, we say that 1 L-reduces
to 2 if there are polynomial time algorithms A1 and A2 and positive constants α and
β such that for any instance I1 of 1, the following conditions are satisﬁed:
(a) Algorithm A1 produces an instance A1(I1) for 2 such that OPT(A1(I1)) ≤ α ·
OPT(I1), where OPT(I1) and OPT(A1(I1)) represent optimal solutions of I1 and
A1(I1), respectively.
(b) Given any solution of A1(I1) with cost c2, algorithm A2 produces a solution of I1
with cost c1 in polynomial time such that |c1 −OPT(I1)| ≤ β · |c2 −OPT(A1(I1)|.
A problem is MAX SNP-hard if every MAX SNP problem can L-reduces to this
problem, but the problem itself may not be MAX SNP. On the other hand, we can
show a problem to be MAX SNP-hard by providing a L-reduction from some MAX
SNP-hard problem to it. Arora et al. showed that if any MAX SNP-hard problem has
a polynomial-time approximation scheme (PTAS)1, then P = NP [1]. In other words,
it is very unlikely for a MAX SNP-hard problem to have a PTAS.
3 MAX SNP-hardness
In this section, we show that PTSTP is MAX SNP-hard.
Deﬁnition 4 We deﬁne a restricted version of the Steiner tree problem (RSTP) be-
low:
PROBLEM RSTP
INSTANCE: A complete graph G = (V ,E) with a metric length function l : E →
{1,2}, a proper subset R ⊂ V of terminals.
QUESTION: Find a Steiner tree with minimum length.
Lemma 1 [4] RSTP is a MAX SNP-hard problem.
Theorem 2 PTSTP(1,2) is a MAX SNP-hard problem.
Proof We present an L-reduction from RSTP to PTSTP(1,2). Let I1 = (G, l,R) be
an input instance of RSTP, where G = (V ,E) is a complete graph, l : E → {1,2}, and
R ⊂ V is the set of terminals. We provide a polynomial-time algorithm A1, which
transforms I1 into an input instance A1(I1) of PTSTP(1,2) as follows:
1A polynomial-time approximation scheme is a family of polynomial-time algorithms such that for each
 > 0, there is a member of this family that achieves an approximation ratio of 1 + .
A
UT
HO
R’
S 
PR
O
O
F
Journal ID: 11227, Article ID: 102, Date: 2007-01-28, Proof No: 1
UN
CO
RR
EC
TE
D 
PR
OO
F
« SUPE 11227 layout: Small Extended ﬁle: supe102.tex (Nadia) aid: 102 doctopic: OriginalPaper class: spr-small-v1 v.2007/01/17 Prn:18/01/2007; 12:59 p. 6»
S.-Y. Hsieh, H.-M. Gao
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
(OPT(I1) + |R \ R′|) = c1 − OPT(I1) by Eq. 1. Consequently, |c1 − OPT(I1)| ≤
β · |c2 − OPT(A1(I1))| by β = 1. The proof is completed. 
4 An approximation algorithm
In this section, we present an approximation algorithm for PTSTP. Let ASTP be the
best-known approximation algorithm for the Steiner tree problem with ratio ρ = 1 +
(ln 3/2) ≈ 1.55 [27]. The concept of our algorithm is ﬁrst to apply ASTP to obtain a
Steiner tree SA = (VA,EA), and then transform it to a partial terminal Steiner tree.
For a vertex w ∈ VA, let NSA(w) be the set, called SA-neighborhood of w, con-
sisting of all the vertices in SA which are adjacent to w. We also call the ver-
tices in NSA(w) SA-neighbors of w. Further, let dSA(w) = |NSA(w)|. Assume that
w1,w2, . . . ,wk are the SA-neighbors of w such that l(w,w1) ≤ l(w,w2) ≤ · · · ≤
l(w,wk). In particular, w1 and w2 are said to be the ﬁrst and second SA-neighbors of
w, denoted by N1SA(w) and N
2
SA
(w), respectively.
For a vertex r ∈ V (SA), we use star(r) to denote a subtree of SA formed by
{(r, v) : v ∈ NSA(r)}. For a graph G with a length function l : E(G) → R+, let
len(G) = ∑e∈E(G) l(e). Recall that G[NSA(r)] is the subgraph of G induced by
NSA(r). We use MST(G[NSA(r)]) to denote a minimum-weight spanning tree of
G[NSA(r)]. We now present our approximation algorithm.
ALGORITHM APTSTP (approximation algorithm for the partial terminal Steiner
tree problem)
Input: A complete graph G = (V ,E) with a metric length function l : E → R+,
a proper subset R ⊂ V of terminals, and a subset R′ ⊆ R.
Output: A partial terminal Steiner tree TG.
Step 1 Delete all the edges in the set ER\R′ = {(u, v)|u,v ∈ R \R′} (note that the
edges of ER\R′ cannot appear in any partial terminal Steiner tree).
Step 2 (Find a Steiner tree in G).
Use the currently best-known approximation algorithm to ﬁnd a Steiner tree
SA in G.
Step 3. (Transform SA into a partial terminal Steiner tree.)
if SA is not a partial terminal Steiner tree then
for each r ∈ R \R′ with |NSA(r)| ≥ 2 in SA do
3-1. Remove all the edges in star(r) \ {(r,N1SA(r))} from SA.
3-2. Find MST(G[NSA(r)]) and add all the edges of MST(G[NSA(r)])
into current SA.
end for
Return TG = SA.
Figure 2 illustrates an example of executing the algorithm. An input instance is
shown in Fig. 2a. After executing Step 2, a Steiner tree SA shown in Fig. 2b is ob-
tained. In Fig. 2c, for a vertex r ∈ R \R′, two edges are removed after executing Step
3-1; and thus only one edge (r,N1SA(r)) is incident to r . In Fig. 2d, a minimum-weight
spanning tree of NSA(r) is constructed after executing Step 3-2.
A
UT
HO
R’
S 
PR
O
O
F
Journal ID: 11227, Article ID: 102, Date: 2007-01-28, Proof No: 1
UN
CO
RR
EC
TE
D 
PR
OO
F
« SUPE 11227 layout: Small Extended ﬁle: supe102.tex (Nadia) aid: 102 doctopic: OriginalPaper class: spr-small-v1 v.2007/01/17 Prn:18/01/2007; 12:59 p. 8»
S.-Y. Hsieh, H.-M. Gao
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
On the other hand,
∑
r∈R\R′
len(star(r))+
∑
v∈R′
len(star(v))
=
∑
(r,v)∈star(r); r∈R; v /∈R
l(r, v)+ 2 · len(SA[R]).
Thus we have
∑
r∈R\R′
len(star(r)) +
∑
v∈R′
len(star(v))− len(SA[R])
=
∑
(r,v)∈star(r); r∈R; v /∈R
l(r, v)+ len(SA[R]) ≤ len(SA). (5)
Moreover, since the maximum of the number of edges of SA[R] occurs when
the subgraph of SA induced by R forms a subtree in SA, we have |E(SA[R])| ≤
|R| − 1. Consequently,
∑
v∈R′
dSA(v)− |E(SA[R])| ≥
∑
v∈R′
dSA(v)− |R| + 1. (6)
CASE 3.1.
∑
v∈R′ dSA(v) − |R| + 1 ≤ 0. In this case, s =
max{(∑v∈R′ dSA(v)) − |R| + 1,0} = 0. Then, as with the aid of Eq. 4,
Eq. 5 can be further simpliﬁed as
∑
r∈R\R′ len(star(r)) ≤ len(SA) −
(
∑
v∈R′ len(star(v))− len(SA[R])) ≤ len(SA) = len(SA)−
∑0
i=0 wi .
CASE 3.2.
∑
v∈R′ dSA(v) − |R| + 1 > 0. In this case, s =
max{(∑v∈R′ dSA(v))−|R|+1,0} =∑v∈R′ dSA(v)−|R|+1. Since every
edge of SA[R] has at least one endpoint in R′, all the edges in SA[R]
are included in
⋃
v∈R′ star(v). By the above observation and the fact that∑
v∈R′ dSA(v)−|E(SA[R])| ≥
∑
v∈R′ dSA(v)−|R|+1 = s, the subgraph
formed by the edges in
⋃
v∈R′ star(v)\E(SA[R]) contains at least s edges
in SA. Therefore,
∑
v∈R′ len(star(v)) − len(SA[R]) ≥
∑s
i=0 wi . Then,
Eq. 5 can be further simpliﬁed as
∑
r∈R\R′ len(star(r)) ≤ len(SA) −
(
∑
v∈R′ len(star(v))− len(SA[R])) ≤ len(SA)−
∑s
i=0 wi .
By combing the above cases, we complete the proof.

We say that an algorithm for a problem has an approximation ratio of 	(n) if, for
any input of size n, the cost C of the solution produced by the algorithm is within a
factor of 	(n) of the cost C∗ of an optimal solution: max( C
C∗ ,
C∗
C
) ≤ 	(n). We also
call an algorithm that achieves an approximation ratio of 	(n) a 	(n)-approximation
algorithm.
Theorem 3 Algorithm APTSTP is a (2 − δlen(SA) )ρ-approximation algorithm for the
partial terminal Steiner tree problem, where δ is deﬁned in the statement of Lemma 2,
A
UT
HO
R’
S 
PR
O
O
F
Journal ID: 11227, Article ID: 102, Date: 2007-01-28, Proof No: 1
UN
CO
RR
EC
TE
D 
PR
OO
F
« SUPE 11227 layout: Small Extended ﬁle: supe102.tex (Nadia) aid: 102 doctopic: OriginalPaper class: spr-small-v1 v.2007/01/17 Prn:18/01/2007; 12:59 p. 10»
S.-Y. Hsieh, H.-M. Gao
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
Let TA be a partial terminal Steiner tree returned by the algorithm. By construction
of TA, we have that
len(TA) ≤ len(SA)+
∑
r∈R\R′
(
len(MST(G[NG(r)])) − len(star(r)) + l
(
r,N1SA(r)
))
≤ len(SA)+
∑
r∈R\R′
(
len
(
star(r)
)− l(r,N2SA(r))
)
/∗ by Eq. 11 ∗ /
≤ len(SA)+
∑
r∈R\R′
len(star(r))
≤ len(SA)+ (len(SA)− δ) /∗ by Lemma 2 ∗ /
≤ ρ · len(TO)+ (len(SA)− δ) /∗ by Eq. 9 ∗ / . (12)
Consequently, we have that
len(TA)
len(TO)
≤ ρ · len(TO)+ (len(SA)− δ)
len(TO)
= ρ + len(SA)− δ
len(TO)
= ρ + ρ · (len(SA)− δ)
ρ · len(TO)
≤ ρ + ρ · len(SA)− ρ · δ
len(SA)
/∗ by Eq. 9 ∗ /
=
(
2 − δ
len(SA)
)
· ρ
Therefore, APTSTP is a (2− δlen(SA) )ρ-approximation algorithm. On the other hand,
by the deﬁnition of δ in the statement of Lemma 2, 0 ≤ δlen(SA) ≤ 1. 
In the remainder of this section, we analyze the time complexity of our algorithm.
Clearly, Step 1 can be implemented in O(|E(G)|) time. Step 2 can be implemented in
f (n,m) time, where f (n,m) is the time complexity of the best known approximation
algorithm for Steiner tree problem.
In Step 3, checking whether SA is a partial terminal Steiner tree can be done in
O(|V (G)|) time. Clearly, the total cost of executing Step 3-1 takes O(E(G)). To
implement Step 3-2, we can use Prim’s Algorithm [9] to ﬁnd a minimum spanning
tree of G[NSA(r)] in O(|NSA(r)|2) time for each r ∈ R \R′. Therefore, the total cost
of executing Step 3-2 takes O(|V (G)|3). Therefore, we have the following result.
Theorem 4 Algorithm APTSTP runs in O(|V (G)|3) + f (n,m) time, where f (n,m)
is the time complexity of the best known approximation algorithm for the Steiner tree
problem.
A
UT
HO
R’
S 
PR
O
O
F
Journal ID: 11227, Article ID: 102, Date: 2007-01-28, Proof No: 1
UN
CO
RR
EC
TE
D 
PR
OO
F
« SUPE 11227 layout: Small Extended ﬁle: supe102.tex (Nadia) aid: 102 doctopic: OriginalPaper class: spr-small-v1 v.2007/01/17 Prn:18/01/2007; 12:59 p. 12»
S.-Y. Hsieh, H.-M. Gao
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
26. Papadimitriou CH, Yannakakis M (1988) Optimization, approximation, and complexity classes. In:
Proceedings of the 20th ACM symposium on theory of computing, pp 229–234
27. Robins G, Zelikovsky A (2005) Improved Steiner tree approximation in graphs. SIAM J Discret Math
19(1):122–134
28. West DB (2001) Introduction to graph theory, 2nd edn. Prentice Hall, Upper Saddle River
1行政院國科會補助專家學人出席國際學術會議報告 (格式)
96 年 09 月 13 日
報告人姓名 謝孫源
服務機構
及 職 稱
國立成功大學
資訊工程學系
教授
時間
會議
地點
96 年 09 月 04 日
至
96 年 09 月 08 日
日本熊本
本會核定
補助文號
NSC 95-2221-E-006
-076 -
會 議 名 稱
(中文) 第二屆國際創新計算資訊控制會議
(英文) Second International Conference on Innovative Computing,
Information and Control (ICICIC 2007)
發表論文題目
(中文) 3 元 N 立方體的路徑與迴圈
(英文) Path and Cycle Embedding of 3-ary N-cubes
報告內容應包括下列各項:
一、參加會議經過
二、與會心得
三、考察參觀活動(無是項活動者省略)
四、建議
五、攜回資料名稱及內容
六、其他
3- Fault Detection and Identification
- Optimization and Decision Making
- Control Systems and Applications
- Systems Identification
- Risk Analysis and Management
- Modeling and Simulation Techniques
- Others
此次大會共從超過 1000篇投稿中接受 624篇論文，共利用 81個Parallel
Sessions 分三天發表。
筆 者 於 九 月 六 日 Section B25(Innovative Techniques and
Applications)口頭發表一篇論文；題目為「Path and Cycle Embedding of
3-ary N-cubes」。在此次會議中筆者亦與多位在美國、德國、日本、
大陸、南韓、波蘭及南非等地之學者或專家做經驗交流，彼此分享研
究心得，可謂受益良多。
(二) 與會心得
此次會議議題相當廣泛，大家參與會議時討論亦非常熱烈，大會
安排共安排 81 個 sessions(分成 A、B、C 三大組)口頭發表，使得大家
可以針對自己興趣之主題充分與發表者深入討論，因此收獲相當多。
由於有多人參與討論，大家亦可交換心得及了解目前在各個領域之最
新研究情形，並且也可讓各國專家學者了解台灣在相關領域研究成
果，可說是一舉數得。
經由這次會議的參與，不但得以認識一些相關領域之學者，互相
交換研究心得，而且可吸收最新資訊，對日後之研究將有所助益。
1行政院國科會補助專家學人出席國際學術會議報告 (格式)
96 年 09 月 13 日
報告人姓名 謝孫源
服務機構
及 職 稱
國立成功大學
資訊工程學系
教授
時間
會議
地點
96 年 09 月 04 日
至
96 年 09 月 08 日
日本熊本
本會核定
補助文號
NSC 95-2221-E-006
-076 -
會 議 名 稱
(中文) 第二屆國際創新計算資訊控制會議
(英文) Second International Conference on Innovative Computing,
Information and Control (ICICIC 2007)
發表論文題目
(中文) 3 元 N 立方體的路徑與迴圈
(英文) Path and Cycle Embedding of 3-ary N-cubes
報告內容應包括下列各項:
一、參加會議經過
二、與會心得
三、考察參觀活動(無是項活動者省略)
四、建議
五、攜回資料名稱及內容
六、其他
3- Fault Detection and Identification
- Optimization and Decision Making
- Control Systems and Applications
- Systems Identification
- Risk Analysis and Management
- Modeling and Simulation Techniques
- Others
此次大會共從超過 1000篇投稿中接受 624篇論文，共利用 81個Parallel
Sessions 分三天發表。
筆 者 於 九 月 六 日 Section B25(Innovative Techniques and
Applications)口頭發表一篇論文；題目為「Path and Cycle Embedding of
3-ary N-cubes」。在此次會議中筆者亦與多位在美國、德國、日本、
大陸、南韓、波蘭及南非等地之學者或專家做經驗交流，彼此分享研
究心得，可謂受益良多。
(二) 與會心得
此次會議議題相當廣泛，大家參與會議時討論亦非常熱烈，大會
安排共安排 81 個 sessions(分成 A、B、C 三大組)口頭發表，使得大家
可以針對自己興趣之主題充分與發表者深入討論，因此收獲相當多。
由於有多人參與討論，大家亦可交換心得及了解目前在各個領域之最
新研究情形，並且也可讓各國專家學者了解台灣在相關領域研究成
果，可說是一舉數得。
經由這次會議的參與，不但得以認識一些相關領域之學者，互相
交換研究心得，而且可吸收最新資訊，對日後之研究將有所助益。
