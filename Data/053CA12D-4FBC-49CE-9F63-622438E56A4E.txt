i.e. a complicated visualization metaphor can be 
composed and assembled from basic ones, each of which 
is independently replaceable. The benefits of xDIVA 
can already be demonstrated by several applications. 
英文關鍵詞： visual debugging, debugging visualization, software 
visualization, composable visualization metaphors, 
program visualization. 
 
layouts are implemented in xDIVA. The change animation system
is described in Section 4 and its examples are shown in Section 5.
Related work is given in Section 6. Section 7 concludes the paper
and addresses future work.
2. AN OVERVIEW OF XDIVA
Research or commercial products that visualize software entities
such as source code, structures, metrics, etc. have been available
for decades. In general, if application domains are limited and data
types are constrained and finite, constructing successful visualiza-
tions is not a problem.
The software visualization community uses “models” to describe
the constraints that shape the data. Once a model is defined, visu-
alizations called “views” are implemented. For example, a graph
model has two major entities called “node” and “edge” with which
graph visualization algorithms are concerned. These are called
“model entities.” Once model entities are defined, the visualiza-
tion algorithms draw the model entities into view entities (graph-
ical representation). For example, a graph node can be drawn as
a circle with the key data values drawn inside. The mappings be-
tween model entities and view entities typically can be configured
to some extent. This is called the “model-view” paradigm, which
has been applied widely in software visualization research [6, 11].
Still, the visualization problem remains a difficult one if the
domain of the data is not constrained or limited. A simple example
using a debugging scenario can illustrate the problem. Consider a
class X with three attributes which are given poor names.
class X {
int a ;
int b ;
int c ;
};
The meaning of class X can be interpreted in several ways depend-
ing on the application domain. For example, X can be a vector in a
3-dimensional space. A visualization with an arrow pointing to the
direction (a,b,c) is most suitable for the interpretation. Next, in a
commercial scenario a,b and c can constitute three kinds of product
revenue of company X. A pie chart can be a suitable visualization
for the interpretation. In another scenario a,b,c may be the coeffi-
cients of a 2D line ax+by=c. A 2D line that satisfies the equation
is the best visualization. In fact, such interpretations can go on and
on forever. It is unlikely that any fixed-mapping visualization will
be available a priori to cover everything that might be of interest.
The diversity of interpretations is what makes the problem diffi-
cult. In general, the interpretations can be arbitrary, an incorrect
guess concerning visualization interpretations can make practical
use awkward. This problem, from the best of our knowledge, is
rarely addressed. Yet, it is impossible to avoid for the purposes of
practical debugging visualization.
xDIVA’s design rationale comes from ancient human wisdom.
When facing infinite construction choices, humans have learned to
find common basic building blocks for all choices, set up the in-
terfaces between the basic building blocks, and then establish en-
gineering methods or frameworks to assemble and compose these
building blocks. This wisdom can be explained by a term – com-
posability. Composability, in general, refers to a system design
principle that deals with the inter-relationships of components. A
highly composable system provides recombinant components that
can be selected and assembled in various combinations to satisfy
specific user requirements. One essential attribute that makes a
component composable is that it is self-contained, i.e. it can be
deployed independently. A component may cooperate with other
Figure 1: Composability: An arrow-shape can be composed
from two ultimate basic VMs.
components, but dependent components are replaceable. This is
the key to the reusability of visualization metaphors in xDIVA.
For example, xDIVA may not prepare a visualization for render-
ing a 3D vector as an arrow-shape VM for 3D Computer Graphics
programming. However, in xDIVA, it is possible to construct an
arrow-shape VM from two ultimate basic shapes, cone and cylin-
der, as in Fig. 1. More importantly, this arrow-shape VM can be
used to compose other VMs, such as an XYZ-axis that is composed
from three orthogonal arrow-shape VMs. In this process, no pro-
gramming is needed. Since no code need be written, there is no
need for testing and debugging and therefore the number of VMs
can be extended at a fast speed. This example briefly explains how
xDIVA works.
2.1 The Debugger Front-End
Currently, the supported debuggers include JDB and GDB.
These command-line debuggers are wrapped by a GUI front-end
called “Minerva” (see Fig. 2), which is written by Java. Minerva
wraps the debuggers and intercepts the input/output of the
debuggers by I/O redirection. In Minerva, programmers can
browse the source code, set break points, run the debuggee, and
display variable values in textual and numerical representation.
When users want to visualize a variable to xDIVA, a button called
“visualize” can be clicked. Once a variable is visualized, the
debugging information is transmitted from Minerva to xDIVA by
networking. xDIVA is built under Windows platform (the default
platform of 3D engine Ogre[18]). So, it is possible to debug a
program in Linux and visualize its program states in a Windows
machine. Screen-shots and demo clips of xDIVA can be accessed
at xDIVA’s website:
http://www.csie.ncu.edu.tw/~ypcheng/xdiva.htm
2.2 The Mapping Dialog
When a variable is visualized the first time, a mapping dialog
(see Fig. 3) pops up for a user to construct his visualization. Here,
a simple example is presented to give an overview of the xDIVA.
In Fig. 3, a binary tree node of class btnode
class btnode {
boolean travel ;
btnode left;
btnode right;
};
is visualized. The structure of the visualized object is shown in the
middle sub-window. The left sub-window contains a set of basic
building blocks to construct visualizations for the variable. These
basic building blocks are called mapping nodes, which are catego-
rized by their functionality. A mapping node can be viewed as a
box with standard interfaces (IN ports and OUT ports). Each box
may carry an entity. This entity can be a VM, a mathematical com-
putation, string composer, etc. An IN port can accept a single link
Figure 3: The mapping dialog when a new variable is visualized.
Figure 5: The visualization for btnode.
One question that has been raised repeatedly since the introduc-
tion of xDIVA is whether the learning curve is too steep for map-
ping editing. Although there is not yet a formal usability study on
how easy it is to construct a mapping, once a programmer under-
stands the basics of the mapping nodes from the tutorials, the drag-
and-drop is the last thing to learn. xDIVA tries its best to block any
invalid linking immediately. These user friendly measures have
been continually considered to smooth the learning curve. Another
answer to the above question is: Most users will have no need to
learn mapping techniques thoroughly. In the near future, xDIVA
is heading toward supporting theme-based VM libraries. That is,
most VMs will be pre-made (by the xDIVA team or third parties)
using Composer and these VMs will be grouped and categorized
into themes. Users should be able to search the libraries for appli-
cable themes and find common VMs to use immediately. If the
search fails, the user can reuse the existed mappings to prevent
starting from scratch.
Another question that is frequently raised is: Are there some
visualizations that cannot be created by assembling? This problem
can be answered with an analogy to shaping metal. In shaping
metal, the molding process can create a shape that is difficult to
produce using other processes like forging. However, the shape
can still be approximated by fusing several pieces of forged metal.
In a debugging scenario, it is not necessary for a visualization to
be exquisite or accurate. However, if any approximation is
unacceptable, then new ultimate basic VM should be
programmed. It is believed this problem will be alleviated as more
theme libraries are built.
3. LAYOUT IN XDIVA
In xDIVA, the mapping dialog allows a programmer to construct
a visualization for a variable. Note that, a variable can have a com-
pound and complicated inner structure, such as an object that in-
cludes an array of other objects. If a variable contains pointers
(C,C++) or references (Java), these variables can be unfolded by
clicking at the reference VMs representing the variables. To save
the time used when clicking reference VMs one by one, an auto-
matic unfolding can be set up in xDIVA. A programmer can set up
the stop conditions for the automatic unfolding.
When plenty of VMs are added to the scene, a common need is
to arrange VMs into a way that exploits the knowledge of a pro-
grammer. The arrangement is known as layout. Layout plays an
important role in almost any kind of visualizations. Fruitful re-
searches in layout, such as [14, 8], have been done for decades.
Re-inventing the wheel is the last thing that xDIVA plans to do. In-
stead, xDIVA focuses on providing an object-oriented framework
for different layout algorithms to add to with minimum cost.
There are four kinds of layouts in xDIVA we need to deal with:
1. When a new VM is created in the scene, how is it placed?
2. In mapping dialog, setting up the _vm_rx, _vm_ry, and _vm_rz
of a VM is equivalent to configuring a layout manually for
VMs inside a compound variable.
3. In mapping dialog, a set of VMs can be linked to a container
which employs a layout algorithm (for example, arranging
elements into a 2D array). It is equivalent to configuring
layout automatically for VMs inside a compound variable.
These layout algorithms are typically much less complicated
than the next case.
4. In a 3D scene, a set of VMs (which may or may not be linked
by reference VMs) are selected to apply a layout algorithm.
We call such layout static_layout.
Figure 6: Shape transformation using shape hints.
Note that general key-frame animation needs to deal with shape
transformation, such as the case in Fig. 6 (with or without shape
hints). Fortunately, there is no need to deal with such issues in
xDIVA. At last, some types of change events are not interpolated,
such as the value change of a pointer. This type of change events
will be collected first and then discarded. Pointer values are mem-
ory addresses. It is difficult to create a meaningful animation for
such a case.
4.3 Tweening the Mapping-Bound Changes
For most cases in key-frame animation, linear interpolation is
often adequate. To begin animation, a user should tell CAS the
duration and animation speed at which CAS is to work. A dialog
like Fig. 7 pops up for users to configure the animation parame-
ters. The difficult part is how to generate frames for the interpo-
lated values. One simple solution to tweening is to save the current
values of all the watched variables, feed the interpolated values to
watched variables, and then re-evaluate all the mapping trees to
redraw VMs. The solution is to repeat the process when a break
point is hit, where all watched variables are updated and VMs are
updated next. Although this simple solution works in theory, it is
not a graceful one. Performance and architecture impact are major
concerns.
To address the problem more gracefully and keep xDIVA’s archi-
tecture stable, the proxy design pattern [7] is applied. In xDIVA,
wop is an object which keeps a watched variable. To decouple CAS
from the core data structure, for each wop, it is encapsulated by a
proxy_wop. If animation is not enabled, when there is a need to ac-
cess watch variable, proxy_wop accepts the method call and passes
the call to real wop. If animation is enabled, proxy_wop will return
the interpolated values it has kept. Fig. 8 shows when there are new
values to be written, the difference between animation is enabled or
disabled.
4.4 Tweening Layout-Bound Changes and VM
Creation/Deletion
Once the mapping-bound changes are taken care of, change events
made by layout algorithms are dealt with next. Note that if a VM
position is linked (directly or indirectly) to variables, it will be
locked out from layout algorithms. Computing the interpolated val-
ues of VM positions is straightforward in a linear interpolation. As
described in the previous section, a layout algorithm returns a new
position for each VM. So, CAS can collect the results from two key
frames. By comparing the results, it is easy to build change events
Figure 7: The dialog to enter animation parameters.
Figure 8: Applying proxy design pattern in tweening.
Figure 10: The AVL tree rotation example. (a)(c) are key frames and (c) is one of the selected interpolated frame.
Figure 11: The binary tree example, where (a)(f) are key-frames and (b)-(e) are tweening frames.
Engineering, 19(3):214–230, 1993.
[9] II James H. Cross, T. Dean Hendrix, Jhilmil Jain, and
Larry A. Barowski. Dynamic object viewers for data
structures. In SIGCSE ’07: Proceedings of the 38th SIGCSE
technical symposium on Computer science education, pages
4–8, New York, NY, USA, 2007. ACM.
[10] Jeffrey L. Korn and Andrew W. Appel. Traversal-based
visualization of data structures. In INFOVIS, pages 11–18,
1998.
[11] A. Kuhn and O. Greevy. Exploiting the analogy between
traces and signal processing. In Proceedings IEEE
International Conference on Software Maintainance (ICSM
2006), pages 101–106. IEEE Computer Society, 2006.
[12] Andrés Moreno, Niko Myller, Erkki Sutinen, and Mordechai
Ben-Ari. Visualizing programs with jeliot 3. In AVI, pages
373–376, 2004.
[13] Sougata Mukherjea and John T. Stasko. Toward visual
debugging: integrating algorithm animation capabilities
within a source-level debugger. ACM Trans. Comput.-Hum.
Interact., 1(3):215–244, 1994.
[14] prefuse. The prefuse visualization toolkit. http://prefuse.org.
[15] Guido Rößling and Bernd Freisleben. Experiences in using
animations in introductory computer science lectures. In
SIGCSE, pages 134–138, 2000.
[16] John T. Stasko. Tango: A framework and system for
algorithm animation. IEEE Computer, 23(9):27–39, 1990.
[17] John T. Stasko. Animating algorithms with xtango. SIGACT
News, 23(2):67–71, 1992.
[18] Steve Streeting. The object-oriented graphics rendering
engine (ogre). available on http://www.ogre3d.org.
[19] Visualization The Graphics and Center at Georgia Tech.
Usability (GVU). Polka.
[20] Andreas Zeller and Dorothea Lutkehaus. DDD - a free
graphical front-end for UNIX debuggers. SIGPLAN Notices,
31(1):22–27, 1996.
standard,  and  expressive  graphical  notations  to  help  one  reason  about  complex 
artifacts. However, while software‐intensive systems are among the most complex of 
artifacts,  reality  is  that  the  vast  majority  of  developers  live  fully  in  the  textual 
dimension  and,  like  Flatlanders,  have  no  understanding  of  or  desire  for  the  visual 
dimension save for a few diagrams with dubious semantics that they may hastily and 
ethereally  sketch  on  a  whiteboard.  This  community  (of  SoftVis  researchers)  have 
produced some compelling  ideas – but none of them are what one can claim to be 
fully mainstream. This keynote will discuss why this  is so and what we might do to 
narrow this gap to attend to the pain points of developers. 
 
這篇講題令人收穫最多。令人對最受歡迎的 UML 有不一樣的看法。另外在會議
當中也與其他國家的學者進行了交流與討論。 
 
Abstract 
 
xDIVA, a 3D debugging visualization tool, provides a platform by which 
visualization metaphors are interactive, composable and decoupled from 
data, i.e. a complicated visualization can be composed and assembled from 
basic ones, each of which is independently replaceable. Based on the 
progress of xDIVA, this tool demo paper describes an automatic animation 
system to generate interpolated frames between key frames, where key 
frames are snapshots of the 3D scene at breakpoints. This approach does 
not require users to add or write any animation code and is more feasible 
for practical use. 
 
 
 
 
 
 
 
Conference Program 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/12/20
國科會補助計畫
計畫名稱: 3D軟體除錯視覺化工具xDIVA 之建構
計畫主持人: 鄭永斌
計畫編號: 99-2220-E-008-002- 學門領域: 自由軟體暨嵌入式系統
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
本計畫執行成果獲得 
 
自由軟體國家型計畫的績優團隊 
 
未來以推廣至 EDA (Electronic Design Automation) 產業中使用為首要目標
 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
