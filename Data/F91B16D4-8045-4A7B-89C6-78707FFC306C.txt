2摘要：近年來，利用繪圖處理器（GPUs）來實作高效率的密碼相關演算法已經
是許多密碼學研究單位的重點。而在本文中，我們也處理了如何在特徵值為 3
且體為有限體的奇異橢圓曲線上實作ηT pairing 演算法並使其有效率運算。我們
將演算法分別實作在 NVIDIA GTX 285、GTX 480、Tesla C1060 和 Tesla C2050
繪圖處理器上，並整理出其執行結果。ηT pairing 演算法共有三種不同實作方法，
分別為「一支執行緒處理一次 pairing 運算」（實作 I），「多支執行緒同時處理一
次 pairing 運算」（實作 II）以及「多支執行緒以 bitsliced 方式同時處理多次 pairing
運算」（實作 III）。在單片 GTX 285 繪圖處理器上，對應到三種不同的有限體 F397、
F3193 和 F3509 的橢圓曲線上，實作 III 的 pairing 運算時間分別為 1.47、8.15 和 140.7
毫秒。在單片 GTX 480 繪圖處理器上，對應到三種不同的有限體 F397、F3193 和
F3509 的橢圓曲線上，實作 III 的單位時間運算量分別為每秒 33710 次、4970 次和
332 次 pairing。以目前我們所知，這是首次在繪圖處理器上實作ηT pairing 演算
法。此外，這也是目前所有ηT pairing 演算法的軟體實作中，單一晶片上達到最
大單位時間運算量的實作。
關鍵字：ηT pairing、graphics processing unit
4F2131 [2]。
最近，由於應用pairing的密碼學發展出許多新穎的密碼應用，例如：
identity-based encryption，此研究領域已經引起了許多研究者的關注。而在我們
的研究中也在特徵值為3的奇異橢圓曲線（supersingular elliptic curve）上實作了
高效率的ηT pairing運算。在之前許多已經提出的Tate pairing實作中，不論在硬體
上還是軟體上其執行速度都相當的有效率[7, 13]，然而，就我們所知，目前還沒
有相關的ηT pairing的實作。
我們首先說明在 NVIDIA GTX 285、GTX 480、Tesla C1060 和 Tesla C2050
顯示卡上實作ηT pairing 的經驗。對於使用多重執行緒的 GPU 實作而言，有效利
用演算法中已有的平行結構是重要的。我們在接下來的小節中會詳細解說三種不
同的ηT pairing 實作策略。其中實作 I 中，每一次 pairing 計算都使用一支執行緒，
而在實作 II 中，每一次 pairing 計算都使用多支執行緒。在實作 III 中則是以
bitsliced 的方式同時利用多支執行緒計算多個 pairing。以實作 III 而言，在 F397、
F3193 和 F3509 上的 pairing 計算時間分別是 1.47、8.15 和 140.7 毫秒。在 GTX480
的執行環境下，在 F397、F3193 和 F3509 上，實作 III 的每秒 pairing 運算次數分別可
以達到 33710、4970 和 332 次。以我們所知，這是首次的 GPU 實作成果。
本文接下來的章節編排如下：在第 3 節中，我們會先針對開發環境和實作上
使用的各種 NVIDIA GPU 做一些背景介紹。在第 4 節裡，我們會解說在有限體
F3m 上的ηT pairing 運算和在 GPU 實作上相對應數學計算的運算設計。然後接下
來會在第 5 節中展示我們的實作和執行結果，最後在第 6 節中給出本文結論。
三、背景知識
在本節中，我們會介紹NVIDIA GPU的整合開發環境CUDA（Compute Unified
Device Architecture）和本文實作中所使用的各種NVIDIA GPU的相關背景知識。
1 CUDA
CUDA讓應用程式設計師可以使用高階的類C語言在NVIDIA GPU上編寫程
式[15]。一個GPU程式編譯過程如下：首先，一般在CPU上執行的C/C++程式碼
被分隔出來並且用標準的C/C++編譯器如gcc編譯。程式剩餘用CUDA擴充功能編
寫並預計在GPU上執行的部份，也就是所謂的「核心」（kernel），用CUDA專用
編譯器nvcc編譯。nvcc的輸出格式為PTX（Parallel Thread eX-ecution），是一種類
6 暫存記憶體（Register file）：每個 SM 上有16384 個 32 位元暫存器，或
者 64KB 的暫存 記憶體。程式可以對暫存器中的儲存資料進行最快速的
存取。暫存器是私用的而只能讓所屬的執行緒存取。
 共享記憶體（Shared memory）：每個 SM 上的 16KB 可讀寫記憶體。它
由16個32位元記 憶庫組成，並可以快速存取，其中如果沒有產生記憶庫衝
突（bank conflict）則與存取速 度與暫存記憶體相同。共享記憶體只可以
由相同的執行緒區塊中的執行緒存取。
 全域記憶體（Global memory）: 1–2 GB 可讀寫記憶體。已知其存取速度較
共享記憶體慢 100 倍。全域記憶體可以讓所有GPU上得執行緒存取。
 常量記憶體（Constant memory）: 64KB 唯讀記憶體。因為其為快取所以比
全域記憶體還 快速。常量記憶體可被GPU上的所有執行緒讀取。
最後特別留意，雖然每個SM的暫存記憶體比共享記憶體還大，但暫存器為
非執行緒共有所以無法共享。而且暫存器只能在指令內定址，所以在定址模式
（addressing mode）上不如共享記憶體靈活。因次能夠有效率的利用共享記憶體
極為關鍵。在 Compute Capability 1.3 中，每 個SM可以同時有32個warps（1024
支執行緒），16384個32位元暫存器和16KB共享記憶體。我們應盡可能的在資源
限制下讓更多的執行緒區塊同時執行以達到有效的 latency hiding。例如：考慮
一個有四個warp的執行緒區塊。如果考慮一個SM中的warps最大數量，則每個SM
最多可以執行8個執行緒區塊。但是如果每個執行緒需要20個暫存器，則每個SM
至多能跑6個執行緒區塊。如果每個執行緒區塊使用4KB共享記憶體，每個SM的
區塊數則被限制在四個。總結來說，為了可以達到最大效能，在平行化的執行緒
數量以及暫存器和共享記憶體大小中間取得平衡是相當要緊的。
3 G4xx 系列顯示卡
在我們的實作中也在使用了GTX 480顯示卡，而其中使用新的GF100 GPU晶
片。GF100屬於Fermi架構的家族並且擁有Compute Capability 2.x。其最引起關注
不同於前世代的改進是雙倍精度浮點數運算（double-precision floating-point
arithmetic）。但是因為我們的實作中不會使 用到這項特點，此改進在本研究中並
不明顯，因此接下來的討論會將重點擺在Fermi家族的其他方面上。
在新的Fermi架構中，NVIDIA改稱SP為CUDA核（CUDA core）。每個GPU
上的CUDA核從240個增加到512個，而每個SM從8個SP改為擁有32個CUDA核。
8表1. NVIDIA顯示卡規格
Specifications GTX 285 GTX 480 Tesla C1060 Tesla C2050
CUDA Cores 240 480 240 448
Arithmetic Clock (GHz) 1.476 1.401 1.296 1.15
Single-precision GFLOPS 1063 1345 933 1030
Standard Memory Configuration (GB) 1 1.536 4 3
Memory Bandwidth (GB/sec) 159 177.4 102 144
四、研究方法
本節中會詳細描述在 F3m 上的 ηT pairing 的定義、元素的最佳表示法和 GPU 上
F3m 的乘 法以及平行運算時執行緒的配置。
1 ηT pairing的定義
特徵值為 3 的ηT pairing 可以在奇異橢圓曲線上定義：
E : y 2x 3xb, b1
令 r 為最大的質數使得 r # E F
3m，且 r 36m1 。令在 E F3m中秩為 r 的子
群表示為 E F
3mr。則ηT pairing 是為雙線性映射（bilinear mapping）
T : E F3m[r]E F36mrE F36m F36m F36mr
2 F3m中元素的表示法
在 GPU 上我們嘗試了三種不同的ηT pairing 運算實作方法。其中一種是利用
多支執行緒平行計算一個 F3m上的單一元素，而另外一種則是在 bitsliced 的模式
下利用多支執行緒平行計算多個 F3m上的多個元素。在本文中，我們標示前者為
實作 II（Parallel），而後者則為實作 III（Bitsliced）。為了分析比較，本研究中也
納入了不使用平行處理的基本演算實作，稱為實作 I（Serial）。實作 I、II、III 如
表 2 所列。接下來我們將討論在實作 I、II、III 中分別相應的 F3m元素的表示法。
表 2. 實作類別
實作 I II III
特性 Serial Parallel Bitsliced
10
不同於實作 II，實作 III 的表示式不會有多餘的 0 存在。也就是說，在實
作 II 中用了 322m 32 個字元來表示 32 個 F3m 元素，而在實作 III 中只需
2m個字元即可。
3 F3m 上的乘法運算
ηT pairing 上最主要的運算是體乘法。這裡我們會說明在實作 I、II 和 III 上
個別的乘法演算法。為了達到最佳的效能，我們嘗試將所有的輸入資料存放在共
享記憶體中並在執行指令過程中只存取共享記憶體，以避開較慢的全域記憶體存
取來增加速度。只是在 pre-Fermi 架構上針對 F3509 的實作，在實作 III 中無法將
全部資料存在共享記憶體中，因此一些暫存數據會儲 存在全域記憶中。
實作 I 令 A(x) , B(x)為 F3m 中的元素，其中不可約多項式為 f (x)。則 F3m 上的
體乘法 C xA xB xmod f x需做一個多項式乘法 A xB x和一個對於
f x的模除法。在實作 I 中，我們用 Comb 方法[12]來處理多項式乘法，如演算
法 1 所述。
演算法1 F3m 的Comb乘法 [12]
INPUT: A(x),B(x)  F3m, W
OUTPUT: C(x)= A(x)·B(x)
1 C(x) ← 0
2 for i ← 1 to W-1 do
3 for j ← 0 to m/Wdo
4 C(x) ← C(x)+ A[j]i·B(x)xjW+i
5 end for
6 end for
7 return C(x) ← Reduction(C(x))
關於模 f x的模除法部份，我們使用Nakajima等人提出的ROT方法
(Reduction Optimal Trinomials) [14]。注意，在實作I中沒有任何的平行處理。這
裡我們只用了一個執行緒。
實作 II 實作 II 基本上就是實作 I 的平行化。為了可以平行處理演算法 1 中
第四步的 A jiB xx jWi，我們讓 Comb 方法中的一個區塊為一格字元的長度 W，
然後每個執行緒上運 算 m w 次 F3m 的加法。所以，每個執行緒的主要工作就是
計算步驟 2 到步驟 6 的第二層迴 圈。既然所需要的執行緒數量與字元長度相
12
和 Tesla C2050 執行實作 III 的結果。這裡也會順便展示 ηT pairing 中乘法的單
位時間運算量的實驗結果。
1 實作技巧
雖然CUDA SPMD的架構允許一個warp 有條件判斷式（conditional branch）
出現，但是這會使 warp 中產生相異指令於是降低效率。所以為了達到效率最佳
化，我們儘量在程式碼中避開條件判斷式，並且儘量選擇合適的演算法來運算
ηT pairing 所需的 F3m上的操作。舉例來說，因為對於 F3m 上的元素 A(x)三次乘冪
運算較快且可平行化，所以我們利用費瑪定理，將 A(x)提昇到 3m2 次方來計算
A(x)的倒數（inverse）。我們也使用 Shirase 等人提出的演算法[3]作為我們 ηT
pairing 計算的主要部份。而 Shirase 等人也利用 torus 實作此演算法[16]。此外，
一些 pairing 計算中產生的暫存資料必須存放在暫存記憶體中。如果我們一次性
做完全部的 pairing 計算，就需要相當大的暫存記憶空間來存放這些暫存資料。
所以為了平衡暫存記憶體使用量，我們將整個 pairing 運算分為兩個部份，分別
為計算 pairing 最重要的 Miller loop 和最後的乘冪運算[16]。
在本文撰寫之時，NVIDIA GeForce GTX 285 被認為是中階顯示卡。其 GPU
時脈為 1476 MHz。由於將關鍵的資料結構設計成可完整存放在 GT200b 的內建
記憶體上，我們可以將整個計算放在單一 SM 上，如 4.2 節所述。因而我們在 30
個 SM 上實作ηT pairing 和 F3m上的乘法，然後在 4.3 節中彙整研究結果。在分析
報告中，我們利用 CUDA API 中的 cudaEvent 來測量時間。為了符合 66、89 和
128 位元 AES 的安全級別（security level），我們選擇在有限體 F397、F3193 和 F3509
上實作ηT pairing。
2 性能測試結果 I
不同有限體上的pairing在GTX 285上的執行數據分別呈示在表3、表4和表5中。
表3. F397 Per-SM 執行時間(ms)
實作 I II III
Addition 0.00014 0.0003 0.00002
Subtraction 0.00014 0.0003 0.00002
Multiplication 0.1748 0.0175 0.001
Cubing 0.0499 0.0096 0.00008
Inverse 22.07 3.09 0.11
ηT pairing 337.53 43.75 1.472
14
的權衡考量。
3 性能測結果 II
本節中我們將呈現實驗中ηT pairing 和 F3m上體乘法在 NVIDIA GTX 285、
GTX 480、Tesla C1060 和 Tesla C2050 顯示卡上面使用全部的 SM 後單位時間運
算量。我們將重點擺在實作 III 上因為依據 4.2 這是三種實作中最快的方法。如
2.2 中所述，每個區塊中執行緒的數量、暫存記憶體和共享記憶體使用量的平衡
是很重要的。當其中一執行緒區塊在存取記憶體或等待資料傳輸時，我們需要另
外的區塊填補上空檔以充分利用計算資源。就是說，每個 SM 中執行中的執行緒
區塊數量有多少是很重要的效能指標。為此，我們設定執行緒區塊的數量為所選
用 GPU 上 SM 個數的倍數，其中 GTX 285 和 Tesla C1060 有 30 個 SM，而 GTX
480 有 15 個，Tesla C2050 有 14 個。我們在表 6 說明在ηT pairing 使用的執行緒
區塊數量，而在表 7 中說明乘法所使用的區塊數量。同樣的，表 8 說明ηT pairing
的單位時間運算量而表 9 說明 F3m上單位時間運算量。
表6.ηT pairing 使用區塊數目
Base field GTX 285
Tesla
C1060
GTX 480
Tesla
C2050
F397 60 60 60 98
F3193 30 30 30 56
F3509 20 20 30 28
表7. F3m 乘法使用區塊數目
Base field GTX 285
Tesla
C1060
GTX 480
Tesla
C2050
F397 120 120 120 112
F3193 60 60 90 84
F3509 30 30 90 84
至於在 F3m上的乘法運算，我們將一半的資料存放在暫時記憶體，而另外一半存
放在共享記憶體。也因為如此，一個 SM 上區塊的數量被可用的暫存器數量所限
制。在實作有限體 F3509 的情況中，對 GTX 285 和 Tesla C1060 而言，需要的暫
16
6143 萬次。而在 GPU 上，F397 上的ηT pairing 的執行時間約為 29 微秒。這比雙
核的 2.6 GHz Intel Core 2 處理器上得最佳結果要好上許多[13]。但是在 F3509 上
GPU 的ηT pairing 執行時間約為 3.01 毫秒，而這比八核的 2.9 GHz Intel i7 處理器
上得最佳結果還慢[13]。我們認為在較大的有限體上，因為在 GPU 上快速的內
建記憶體大小有限制，因此造成 GPU 實作會比 CPU 實作慢。無論如何在較小的
有限體上，因為運算上使用了相對來說數目很少的暫存器，又可以大量有效率的
平行化，所以 GPU 的運算效率可以輕易超越 CPU。
表10. 多核心處理器 ηT pairing 執行效率比較
Curve Architecture #cores Freq. (GHz) Time (ms)
Beuchat et al. [13] E F397 Intel Core 2 2 2.6 0.090
本文 E F397 NVIDIA GTX 480 480 1.4 0.029
Beuchat et al. [13] E F3193  Intel Core 2 2 2.6 0.550
本文 E F3193  NVIDIA GTX 480 480 1.4 0.201
Aranha et al. [1] E F21223  Intel Xeon 45nm 8 2.0 1.51
Beuchat et al. [13] E F3509  Intel Core 2 4 2.4 2.94
Beuchat et al. [13] E F3509  Intel Core i7 8 2.9 1.87
本文 E F3509  NVIDIA GTX 480 480 1.4 3.01
六、結論
本文中，我們分析了ηT pairing 在不同的 GPU 實作策略上的實驗數據。實作
I 使用單一執行緒計算單一 pairing，而實作 II 使用多支執行緒來平行計算單一
pairing。實作 III 則是在 bitslice 模式下利用多支執行緒來平行處理多個 pairing。
在 GTX 285 上三個實作中最好的實驗結果為實作 III，其在 F397、F3193 和 F3509 運
算單一 pairing 的執行時間分別為 1.47、8.15 和 140.7 毫秒。在 GTX 480 上，實
作 III在 F397、F3193和F3509上運算ηT pairing的單位時間運算量分別為每秒33710、
4970 和 332 次。這是首次在 GPU 上運算ηT pairing 的實作成果。就我們所知，
這也是目前在單一晶片上較小的有限體中最快的軟體實作。即使在較大的有限體
如 F3509 上，其運算成果不如較小的有限體般理想，這樣的實作成果對於某些實
際應用已經足夠。
我們已經在特徵值為 3 的有限體 F3m上實作ηT pairing。其他還有在特徵值為
p 的有限體 Fp 上的普通曲線的 pairing。實作這些較大特徵值的 pairing 並且與目
前成果比較將會是我們未來的研究方向。
18
[12] D. Hankerson, A. Menezes, and S. Vanstone, Guide to Elliptic Curve
Cryptography, Springer, 2004.
[13] J.-L. Beuchat, E. López-Trejo, L. Martínez-Ramos, S. Mitsunari, and F.
Rodríguez- Henríquez, “Multi-core Implementation of the Tate Pairing over
Supersingular Eliptic Curves”, CANS 2009, LNCS 5888, pp. 413–432, 2009.
[14] T. Nakajima, T. Izu, and T. Takagi, “Reduction Optimal Trinomials for Efficient 
Software Implementation of the ηT pairing”, IWSEC 2007, LNCS 4752, 
pp.44–57, 2007.
[15] NVIDIA, CUDA Zone, http://www.nvidia.com/ob ject/cuda home new.html.
Efficient Implementation of Pairing-based Cryptography
[16] M. Shirase, T. Takagi , and E. Okamoto, “Some Eficient Algorithms for the 
Final Exponentiation of ηT pairing”, IPSEC 2007, LNCS 4464, pp. 254–268,
2007.
[17] R. Szerwinski and T. Guneysu, “Exploiting the Power of GPUs for Asymmetric 
Cryptography”, CHES 2008, LNCS5154, pp. 79–99, 2008.
出國報告（訪問及會議） 
 
 
 
 
 
 
訪問美國哈佛大學及 
參加國際密碼學會議 
 
 
 
 
 
 
 
 
  
服務機關：國立台灣大學電機工程學系 
姓名職稱：鄭振牟助理教授 
派赴國家：Boston, USA 
Santa Barbara, USA 
出國期間：2010/08/2~27 
報告日期：2010/09/20 
經費來源：FD97021、99C6222、99R30401
2 
 
本次出訪與參加會議的緣由 
1. 8/3-13 訪問美國哈佛大學 
這次利用暑假，前往美國波士頓訪問本人的博士班指導教授、哈佛大學孔祥重教授
的實驗室，以延續之前孔教授訪問台灣時所開啟的無線網路研究合作項目。在 8/3
至 8/13 為期十一天的訪問行程中，與孔教授及其實驗室裡成員們一同切磋目前最
熱門的一些研究課題，收穫非常豐富。主要的研究課題，是能促進容錯數據交換的
無線網路，包含了無線網路中心及特定環境下的多主機數據複製功能。藉由結合運
算域驅動的傳送機制與拓樸網路層進行網路編碼，在高封包漏失的環境下，改善多
餘線路的容錯能力，可以提供一個極有意義的成果。這樣的網路編碼系統，可以改
善無線網路的傳輸效能與數據交換容錯能力。無線網路編碼的前景在兩大領域：增
加網路的附載能力及復原能力，減低意外斷線情況的發生，在現存的電信流量下，
可藉由隨機線性編碼的方式將封包與網路結合提升效率。研究結果指出，這樣的系
統展現了拓樸網路層編碼結構的細節，從而確認了由電信交叉流量及從數據流量機
器得到分散式運算域驅動傳輸規則系統，實現了編碼成果，卻可避免總體排程器所
衍生出的編碼機會成本。目前已知編碼可被用來提升網路的負載，藉由減少無線網
路數據交換傳輸的數量。在實作中，建構系統可了解欲提升電信交叉流量並不容易，
如果能確認電信流量的方向，藉由標記封包並使用平衡電信傳導離開根層的方式極
大化編碼機會。在這個交叉點，封包在傳送前即被編譯在一起。在無線網狀網路中，
更進一步的編碼程序提供了提高錯誤容忍度的能力。首先，多餘路徑的存在跨越了
多衝突域，編碼是一種平行傳送封包的有效方式，可減少總傳輸時間。其次，編碼
在多節點的網路裡可產生獨立於接收器的原創封包。其結果是獨立連結可恢復彼此
所造成的損失。第三，就像其他許多編碼結構，隨機線性編碼程序可以防止點票券
收集問題。接收者被要求收集一組充足獨特封包而非其他任一集合以恢復數據。為
了開發這些成果，促進一般無線網狀拓樸結構的網路編碼，多址數據交換，數據管
理，及時多媒體通訊，及分配計算等領域的關鍵問題。藉由建構與模擬網路編碼細
節分析負載及容錯的成果，使得系統能完成在高漏失情況下的數據傳送，而這是未
4 
 
何寫快的組合語言」的一小時快速課程。Krzysztof Pietrzak 等理論家們說我們所
做的側向攻擊（side-channel attack）模型不夠一般，無法涵蓋所有的攻擊方式。但
他們所提出的完美系統雖然可以抵抗他們所定義的合理程度的洩密且保障資料具有
semantic security，意即任何有意義的資料都不會外流，但是速度卻因為太慢而無法
使用。 
第二節是目前流行的絡（lattices），首先由目前密碼學界當紅的美國喬治亞理工學
院的 Chris Peikert 上台講解如何快速取得在一個絡上的 discrete gaussian 分佈，這是
最近的 lattice 系列結果所需要的 sampling algorithm，Peikert 確實提高這些演算法到
兩位數以上的倍速。之後則是探討在 lattice 密碼系統上如何進行授權（delegation）
和 identity-based encryption 等協定問題。 
邀請演講是由 GMR（Goldwasser-Micali-Rackoff）提出 zero-knowledge proof 之後
的第四分之一個世紀紀念。由 Shafi Goldwasser、Silvio Micali 和 Charlie Rackoff 三
人提出了歷史故事和其演變。 
第三節演講的主題是 Fully Homomorphic Encryption（可對密文進行所有算術或邏
輯操作的密碼系統），這也是目前的熱門課題。首先上台的是開創目前流行的 
Craig Gentry，他提出如何在最壞情況下，並假設在絡上求最短線性獨立向量 
（Shortest Independent Vector Problem）為困難下做出 FHE，本文獲得了本次最佳
論文。不過經我們詢問 Gentry 發現，這個漂亮的 average-case to worst-case 
reduction 的緊緻性仍然不是很理想。之後 Gentry 和 Halevi、Vinod Vaikuntanathan
提出如何從 1-hop 做出 i-hop（hop = homomorphic operation）的過程。也就是 FHE
中的 bootstrapping，他們解釋在某些系統中這個 bootstrapping 可以很有效率的持續
到任意的 i。第四場由 LORIA 的 Gaborit 等人則講解如何做出緊緻的多層次（但是
有限多層）加密系統，並以某個絡系統為例。我們可以從今天共有五場 lattice 相關
的演講，看出絡理論還是目前最熱門的課題。這一天的最後一節是四個半理論的題
材，Fully Secure Functional Encryption with General Relations from the Decisional 
Linear Assumption （ Tatsuaki Okamoto and Katsuyuki Takashima ）和 Structure-
6 
 
跟我們關係最密切的是我們尊敬的共同作者 Shamir 先生在會前跑來跟我們討論的，
也就是他的徒弟 Dinur 在上面發表他們某種基於 fast Fourier transform 的方法是否
可以比我們正要發表的文章更快。我們費了不少力氣還是沒有說服這位 Turing 獎
得主，於是雙方言明實作為憑。另外幾個有趣的演講：Nadia Heninger 小姐提出她
和 Cohn 教授提出來 Coppersmith Lemma 的 ideal lattice 版本，以及 Freeman-Boneh
提出的使 homomorphic signature 作 network coding 的方法。自由發表會在 1 點結束。 
我們接下來的活動就全部歸在 CHES，除了 Ivan Damgård 和 David Naccache 在次
日有個雙元演講：前者主張理論密碼學非常好，沒有什麼問題，後者則主張現在的
理論密碼學或許跟實際有少許脫節。即使如此，Naccache 批判的也並沒有很嚴厲。
我們覺得或許實際狀況比他說得更糟糕。 
8/18 今年的 CHES 由畢業於瑞士洛桑理工學院(EPFL, Switzerland)的 Aumasson 博士
的演講揭開序幕。第一節三個演講都是關於低計算量的密碼系統，由於近來各式各
樣的裝置紛紛擁有無線或有線網路通信的能力，而大多數這類的裝置，由於電力或
是成本限制，它們的計算能力通常都非常有限。在這類裝置日漸普及的今天，網路
通信的能力對人類來說，不啻是一把兩面刃。用在好的方面固然為人類生活的便利
性與品質提升有著極大的幫助，但同時也對恐怖份子等壞人，提供了絕佳的攻擊機
會。因此，當人們日漸熱絡地討論著「物件的網際網路 (Internet of Things) 」的同
時，身為密碼學家的 CHES 參與大眾，對如何保全這樣低計算能力的裝置有著極
大的興趣。這也是為什麼今年的 CHES 會由低計算量的密碼系統揭開序幕的重要
原因之一。其中最有趣的當屬第二場演講，來自新加坡南洋理工大學的博士後研究
員 Poschmann 博士講述了他們設計用來用在印刷積體電路上面的 PRINTcipher。由
於這樣的電路的尺寸巨大，又只擁有極其有限層數的電路設計，對於想要以逆向工
程找出密鑰的攻擊者來說是極其容易的。但 Poschmann 博士強調我們必須從整個
系統成本的角度來考慮，也就是說如果利用逆向工程找出密鑰的成本要高於破解後
所獲得的利益，那麼這樣對攻擊者來說就缺乏破解的動機，因而達到安全風險控管
的目標，這樣的密碼系統或許在實務上能夠找到應用的利基。這讓我想到，多變量
8 
 
SHA-3 第二輪倖存的候選演算法所得到的效能評估結果，獲得與會大眾高度的注
意，顯示 GPU 作為高效能計算平台已在密碼學界獲得普遍的認可。Bos 所屬的
Lenstra 研究團隊，向來以利用大規模平行計算硬體解決密碼學上重要問題著稱，
他們今年另外一項重大突破，就是前述發表在今年 CRYPTO 上面、分解 RSA-768
的論文。我們研究團隊和 Lenstra 團隊，自前年底開始，就陸續有些交流，除邀請
其中另一位非常重要的研究主力 Kleinjung 博士訪問台灣外，去年 CHES 在 EPFL
舉辦時，我們也曾參觀他們由超過兩百台 PS3 所組成、極為壯觀的高效能計算叢
集，當時雙方還就 PS3 與 GPU 孰優孰劣有過相當深入的討論。 
CHES 大會晚宴則是在距離開會地點 UCSB 約十二英里的 Four Seasons Biltmore 舉
辦。晚宴後由我們的長期研究夥伴，美國伊利諾大學芝加哥分校的 Bernstein 教授
上台進行即席演講，提到 CRYPTO 社群因為近年來故步自封，其研究重要性已逐
漸被 CHES 等較為實際的會議取代，他並舉今年 CRYPTO 與 CHES 一同舉辦為例，
自從 CHES 開幕以後，CRYPTO 參與人數就大幅減少，證明密碼學社群需要與現
實生活中一些重要的研究課題有更緊密的連結，方能有更健全的發展。Bernstein
教授的演講，詼諧幽默又深富哲理，獲得了與會大眾熱烈的掌聲。 
8/20 的第一節演講，是關於 PUFs 和 RNGs，這些都是密碼系統中非常重要的硬體
元件，非常適合台灣 IC design 的研究社群投入一起研究，相信以台灣在這方面充
沛的研發能量與眾多優秀的研究人才，假以時日必能有豐碩的收穫。休息後，大會
邀請到了美國加州大學聖地牙哥分校的 Shacham 教授，與大家分享他在汽車電子
與電子投票機安全性研究上面的一些發現。雖然關於這些系統在安全方面的漏洞時
有所聞，但是聽到他第一手的經驗，還是感到蠻震驚的，這些系統在設計上就缺發
安全方面的考量，使得駭客能夠輕易地取得汽車上或投票機內重要的控制權，進而
進行各式各樣的攻擊，整個系統毫無安全性可言。這讓我們想起台北捷運的悠遊卡
系統，在我們研究團隊的分析下，也是充滿著各式各樣安全性的漏洞。在我們日常
生活日益仰賴這類電子系統的今天，我們實在沒有藉口對資訊安全掉以輕心，如何
亡羊補牢，使我們能享受資訊科技所帶來的便利，又不至於遭到駭客或恐怖份子的
10 
 
（double-blind review process），過程異常嚴謹，決不下於頂尖國際期刊；因此品
質極高，所有近年來重大的密碼學進展，多由這七場國際性密碼相關的會議中產出。
協會歷年來皆委託 Springer 出版社，將這七場會議的論文集結成冊，收錄在
Lecture Notes in Computer Science 系列中。不幸的是，這個系列因為過於龐雜，內
容難免良莠不齊，因此遭到 SCI 除名，這連帶嚴重地打擊了國內密碼學研究社群，
減低了優秀研究人才投入的動力，實為一大憾事。在此我們呼籲，台灣科研界應正
視科研成果評估制度僵化這個問題，諸多不下於頂尖國際期刊的會議論文不被承認
為科研成果，凸顯出國內科研制度重大的缺失。 
      
99 年度專題研究計畫研究成果彙整表 
計畫主持人：鄭振牟 計畫編號：99-2218-E-002-025- 
計畫名稱：社群及行動安全技術之研究與應用--子計畫一:雲端計算及行動安全平台之建構與關鍵密碼
模組之研究開發(1/2) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
