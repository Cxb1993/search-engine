Article
Journal of Information Science
37(5) 532–545
 The Author(s) 2011
Reprints and permission: sagepub.
co.uk/journalsPermissions.nav
DOI: 10.1177/0165551511416436
jis.sagepub.com
MHUI-max: An efficient algorithm for
discovering high-utility itemsets from
data streams
Hua-Fu Li
Department of Information Management, Kainan University, Taiwan
Abstract
Online mining of utility itemsets from data streams is one of the most interesting research issues in stream data mining. Although a
number of relevant approaches have been proposed in recent years, they have the drawback of producing a large number of candidate
itemsets for high-utility itemset mining. In this paper, an efficient algorithm, called MHUI-max (Mining High-Utility Itemsets based on
LexTree-maxHTU), is proposed for mining high-utility itemsets from data streams with fewer candidates. Based on the framework of
the MHUI-max algorithm, an effective representation of item information, called TID-list, and a new lexicographical tree-based data
structure, called LexTree-maxHTU, has been developed to improve the efficiency of discovering high-utility itemsets with positive
profits from data streams. Experimental results show that the proposed algorithm, MHUI-max, outperforms the existing approaches,
MHUI-TID and THUI-Mine, for mining high-utility itemsets from data streams over transaction-sensitive sliding windows.
Keywords
Data streams; data mining; data stream mining; utility mining; high-utility itemset
1. Introduction
Mining frequent itemsets from large databases has been widely studied over the last decade [1–7]. The frequent itemset
mining model treats all items in a large database by considering only whether an item appeared in a transaction.
However, the count of an itemset may be not a sufficient indicator of interest. It does not reveal the utility of an itemset.
The utility can be measured in terms of cost, profit or other expressions of user preferences. However, frequent patterns
may only contribute a small portion of the overall utility, whereas non-frequent patterns may contribute a large portion.
Consequently, a new model of frequent itemset mining, utility mining model [8], is proposed to address the limitation of
frequent itemset mining. Based on the utility mining model, utility can be seen as a measure of how useful or profitable
an itemset is. The utility of an itemset X is the sum of the utilities of itemset X in all the transactions containing X. An
itemset X is called a high-utility itemset if, and only if, the utility of X is greater than or equal to a user-defined minimum
utility threshold. Otherwise, it is a low-utility itemset. Hence, the goal of utility mining is to find a set of high-utility pat-
terns from large databases. However, a utility itemset may consist of some low-utility items. That means that, if we use
downward closure property, i.e., if an itemset is frequent then all its subsets must be frequent, to mine high-utility item-
sets, all combinations of the items must be generated. The number of candidates is extremely large and the cost of com-
putation time and memory requirement will be unreasonable [9]. Consequently, the challenge of utility mining is not
only in restricting the size of the generated candidate utility itemsets but also in simplifying the computation time of cal-
culating the utility of itemsets.
In recent years, knowledge discovery and data mining communities have focused on pattern mining of data streams.
A data stream (or streaming data) is an infinite sequence of data elements which continuously accrue at a rapid rate.
Based on the unique characteristics of data streams, proposed approaches for mining such streaming data and for mining
traditional datasets are different in the following aspects [10]. First, as data elements in data streams accrue rapidly, the
Corresponding author:
Hua-Fu Li, Department of Information Management, Kainan University, Taoyuan 338, Taiwan.
Email: lihuafu@gmail.com
• Based on the experimental results, our proposed algorithm MHUI-max outperforms the existing utility mining
algorithms, MHUI-TID and THUI-Mine, for mining high-utility itemsets from data streams.
1.2. Roadmap
The remainder of this paper is organized as follows. The problem of mining high-utility itemsets from data streams is
defined in Section 2. The proposed utility mining algorithm, MHUI-max, is described in Section 3. Section 4 discusses
the experimental results of MHUI-max. Some discussions of MHUI-max algorithm are described in Section 5. Finally,
we conclude the work in Section 6.
2. Problem statement
In this section, we first define the problem of mining high-utility itemsets from data streams and then describe the related
works of utility data mining.
2.1. Problem definition
Given a finite set of n distinct items I = {i1, i2,., in}. Each item ip has a unit profit u(ip), where 1 ≤ p ≤ n. An itemset
X = (i1, i2,., ik) is a non-empty set of k distinct items in the lexicographic order, where ij ∈ I, 1 ≤ j ≤ k, and k is the
length of X. An itemset with length k is called k-itemset. An itemset Xi is an itemset X with a prefix i. For example, the
prefix of the 3-itemset (abc) is the item a. A transaction T = <TID, (i1, i2, ., ik)> consists of a transaction identifier
(TID) and a set of items (i1, i2, ., ik), where ij ∈ I, j = 1, 2, ., k. A data stream DS = {T1, T2, ., Tm} is an infinite
sequence of transactions, and each transaction Td has an unique identifier d, called TID, where 1 ≤ d ≤ m, and m is the
TID of latest incoming transaction.
Definition 1. A transaction-sensitive sliding window (TSW) is a window of DS that slides forward for every transac-
tion. The TSW at each slide has a fixed number of w transactions, and w is the size of the TSW. Consequently, current
transaction-sensitive sliding window (CTSW) = [TN – w + 1, TN – w + 2, ., TN], i.e., TSWN – w+ 1, where the index
(N – w + 1) is the window identifier WID of CTSW.
Example 1. An example data stream DS, as given in Figure 1, is composed of four consecutive TSWs: TSW1 = [T1,
T2, ., T9], TSW2 = [T2, T3, ., T10], TSW3 = [T3, T4, ., T11] and TSW4 = [T4, T5, ., T12], when the window size,
w = 9, is given.
Definition 2. The quantity of an item ip is called local transaction utility (LTU) of ip, and is denoted as o(ip, Tq), repre-
sents the quantity of item ip in the transaction Tq. For example, in Figure 1, o(a, T3) is 12 and o(c, T1) is 26.
TID Items with quantity (i: q)
T1 (c: 26), (e: 1)
T2 (b: 6), (d: 1)
T3 (a: 12), (d: 1)
T4 (b: 1), (d: 7)
T5 (c: 12), (e: 2)
T6 (a: 1), (b: 4), (e: 1)
T7 (b: 10), (e: 1) Item Profit (per unit)
T8 (a: 1), (b: 1), (c: 1), (d: 3), (e: 1) a 3
T9 (a: 2), (b: 1), (c: 27), (e: 2) b 10
T10 (b: 6), (c: 2) c 1
T11 (b:3), (c:6), (d: 2) d 6
T12 (b: 2), (c: 1), (d:1) e 5
(a) An example data stream (b) An example utility table
Figure 1. An example data stream and an example utility (profit) table.
Li 534
Journal of Information Science, 37 (5) 2011, pp. 532–545  The Author(s), DOI: 10.1177/0165551511416436
For example, the transaction utility of each transaction of Example 1 is recorded into a transaction utility table (TU-
table) and shown in Figure 3. Based on definition 7, we can see that tu(TSW1) = 456, tu(TSW2) = 487, tu(TSW3) = 463
and tu(TSW4) = 442 in this example.
Definition 8. Transaction-weighted utilization of an itemset X, denoted as twu(X), is the sum of the transaction utilities
of all transactions of CTSW containing X as a subset. For example, in TSW1 of Example 1, the transaction-weighted utili-
zation of 2-itemset (bd) is 146, i.e., twu(bd) = tu(T2) + tu(T4) + tu(T8) = 66 + 52 + 37 = 155.
Definition 9. An itemset X is called a high transaction-weighted utilization itemset (HTU-itemset) if and only if
twu(X) ˜ min_utility, where min_utility is a user-defined minimum utility threshold. For example, if min_utility is 120,
the 2-itemset (bd) is a HTU-itemset, i.e., 2-HTU-itemset, since twu(bd) is 155 in TSW1.
Definition 10. An itemset X is called a maximal high transaction-weighted utilization itemset (max-HTU-itemset) if
and only if X has no superset that is a HTU-itemset.
Property 1 (Transaction-Weighted Downward Closure Property). Let X be a k-itemset and Y be a (k− 1)-itemset
such that Y ⊂ X. If X is a HTU-itemset, Y is also a HTU-itemset.
For instance, if min_utility is 120 for TSW1 of Example 1, since the 3-itemset (abe) is a HTU-itemset, its subsets, i.e.,
{(a), (b), (e), (ab), (ae), (be)}, are also HTU-itemsets.
3. MHUI-max: efficient mining of high-utility itemsets from data streams
In this section, an efficient utility mining algorithm, called MHUI-max (Mining High-Utility Itemsets based on
LexTree-maxHTU), is proposed to find a set of high-utility itemsets from data streams over transaction-sensitive sliding
windows. An effective representation of item information, called TID-list, and a novel lexicographic tree-based data
structure, called LexTree-maxHTU (Lexicographical Tree with max-HTU-itemsets), are developed for maintaining a set
of candidate high-utility itemsets from the current transaction-sensitive sliding window. Based on the framework of the
proposed MHUI-max algorithm, the process of mining high-utility itemsets from data streams over transaction-sensitive
sliding windows is composed of three phases: window initialization phase (discussed in Section 3.1), window sliding
phase (discussed in Section 3.2), and high-utility itemset generation phase (discussed in Section 3.3). Given the window
size w of transaction-sensitive sliding window TSW, the window initialization phase is activated while the number of
transactions generated so far is less than the window size w. After the window CTSW is full, the second phase is acti-
vated. Furthermore, high-utility itemset pattern generation is performed periodically in the window sliding phase.
Consequently, we shall focus on the definition of LexTree-maxHTU and devise efficient algorithms for the building and
maintenance of LexTree-maxHTU in this section.
3.1. Window initialization phase: constructing a LexTree-maxHTU from first transaction-sensitive sliding
window
In this section, an effective lexicographical tree-based data structure, called LexTree-maxHTU (Lexicographical Tree
with max-HTU-itemsets), is proposed for maintaining the essential information of high-utility itemsets from data streams
over sliding windows. Building an algorithm of LexTree-maxHTU, called LexTree-maxHTU-Build, in the window initia-
lization phase is given in Figure 4. The proposed data structure LexTree-maxHTU comprises three components: header-
list and TIDlists and a set of MaxTrees with prefixes pi, denoted by pi.MaxTree. Each entry e in the header-list has a
TIDlist which maintains all TIDs containing the entry. Furthermore, each prefix pi of MaxTree is an entry contained in
the TIDlist and each node in the MaxTree is a max-HTU-itemset. Moreover, in the LexTree-maxHTU, the component
TIDlist is used to restrict the number of candidates and to reduce the processing time and memory usage needed. The
definition of TIDlist is given as follows.
Definition 11 (TIDlist). For each item x in the current transaction-sensitive sliding window CTSW, a sorted list with
at least w values, denoted as TIDlist(x), is constructed. The construction process of TIDlist is described as follows. If the
item x is in the i-th transaction of CTSW, the absolute value i is stored in the TIDlist(x).
For example, the representations of TIDlist of each item in TSW1 and TSW2 are given in Figure 2. From this figure,
we can find that item (a) appears in transactions T3, T6, T8, and T9 of TSW1. Hence, the TIDlist of item (a), i.e.,
TIDlist(a), is {3, 6, 8, 9} in TSW1 and TIDlist(a) within TSW2 is {2, 5, 7, 8}. Note that the construction process of
TIDlist for each item of CTSW is called TIDlist-Build in the utility mining framework of MHUI-max algorithm.
When the first transaction-sensitive sliding window TSW1 is full, the LexTree-maxHTU based on the discovered item
information, TIDlists, is constructed as follows. First, a set of high transaction-weighted utilization 1-itemsets, i.e.,
1-HTU-itemsets, of TSW1 is generated by using the TIDlist, and the transaction utility table (TU-table) (in step 5 of
Li 536
Journal of Information Science, 37 (5) 2011, pp. 532–545  The Author(s), DOI: 10.1177/0165551511416436
{2, 3, 4, 8}d
{2, 4, 6, 7, 8, 9}b
{1, 5, 6, 7, 8, 9}e
{1, 5, 8, 9}c
{3, 6, 8, 9}a
TIDlists of TSW1Items
header-list       TIDlists
abe
bd
be
ce
LexTree-maxHTU of MHUI-max in TSW1
if min_utility = 120 in TSW1
TIDlist(abe) = {6, 8, 9}
TIDlist(bd) = {2, 4, 8}
TIDlist(be) = {6, 7, 8 , 9}
TIDlist(ce) = {1, 5, 8, 9}
twu(abe) = 138
twu(bd) = 155
twu(be) = 243
twu(ce) = 143
Figure 5. Status of LexTree-maxHTU after inserting all max-HTU-itemsets of TSW1.
Algorithm Itemset-Type-Classify
Input: A transaction-sensitive sliding window TSWj = {Tj, Tj+1,…, Tj+w-1} with w transactions, 
and a new incoming transaction Tj+w;
Output: Three sets of updated-item-types: Insert-Itemset-Set, Delete-Itemset-Set and Interesc-
Itemset-Set of TSWj+1 = {Tj+1, Tj+2,…, Tj+w};
Method:
Begin
1. foreach itemset hi of Tj+w do
2. add hi into Insert-Itemset-Set;
3. endfor
4. foreach itemset hj of Tj do
5. if hj ∈ Insert-Itemset-Set then
6. add hi into Intersec-Itemset-Set;
7. else add hj into Delete-Itemset-Set;
8. endif
9. endfor
End
Figure 6. Algorithm Itemset-Type-Classify used in window sliding phase.
3.2. Window sliding phase: efficient maintenance of the LexTree-maxHTU while CTSW sliding
The window sliding phase of mining high-utility itemsets from data streams is activated when the window is full and a
new transaction arrives. In this phase, two operations of the MHUI-max algorithm are performed to maintain the pro-
posed data structure LexTree-maxHTU. The first operation is to update item-information TIDlist and the transaction util-
ity table (discussed in Section 3.2.1) and the second operation is to update the MaxTrees of LexTree-maxHTU (discussed
in Section 3.2.2) while window CTSW sliding.
3.2.1. Update TIDlist of LexTree-maxHTU and TU-table while window CTSW sliding. The first step in maintaining the
LexTree-maxHTU in the window sliding phase is to reconstruct the TIDlists and TU-table. First, all itemsets that
recorded in the deleted transaction Tj and the new incoming transaction Tj+w while window CTSW sliding is classified
into three updated itemset types: Delete-Itemset, Insert-Itemset and Intersec-Itemset, by using an effective approach
called Itemset-Type-Classify. Algorithm Itemset-Type-Classify is shown in Figure 6 and described as follows. If an item-
set is stored in a new incoming transaction while window CTSW sliding, it is called an Insert-Itemset (in steps 1–3 of
Itemset-Type-Classify algorithm). If an itemset is recorded in the deleted transaction, it is called a Delete-Itemset (in
step 7). If an itemset is not only in the deleted transaction but also in the new incoming transaction, the itemset is called
Li 538
Journal of Information Science, 37 (5) 2011, pp. 532–545  The Author(s), DOI: 10.1177/0165551511416436
HTU-itemsets. In the HUI-verification step of MHUI-max algorithm, the true utility value of HTU-itemsets is computed
by one pass over partial TSW (pTSW). Based on the TIDlist structures, the range of pTSW of MHUI-max is determined
by performing the union operation on TIDlists of HTU-itemsets generated from previous sub-HTU-itemset generation
step. After performing sub-HTU-itemset generation and HUI-verification, a set of high-utility itemsets of CTSW of
Example 1 is generated and given in Figure 9.
4. Experimental results of the proposed algorithm MHUI-max
In this section, several experiments are evaluated to compare our proposed algorithm, MHUI-max, with the existing
approaches THUI-Mine [29] and MHUI-TID [30]. All the programs are implemented in C++ STL and compiled with
Algorithm LexTree-maxHTU-Update
Input: A user-defined minimum utility threshold min_utility, a transaction utility table TU-table, a transaction-sensitive sliding 
window TSWj = {Tj, Tj+1,…, Tj+w-1} with w transactions, and a new incoming transaction Tj+w;
Output: An updated LexTree-maxHTU of TSWj+1 = {Tj+1, Tj+2,…, Tj+w};
Method:
Begin
1. perform TT-Update on TIDlists of items within Tj and Tj+w;
2. compute tu(Tj+w) of Tj+w and insert it into TU-table;
/* tu: transaction utility */
3. perform Itemset-Type-Classify to find three item types, Delete-Itemset-Set, Insert-Itemset-Set and Intersec-Itemset-Set, from 
the deleted transaction Tj and the new incoming transaction Tj+w;
4. /* Case I: if itemset Xi is a Delete-Itemset */
5. foreach entry Xi of Delete-Itemset-Set do
6. delete the transaction utility of Tj, i.e., tu(Tj), from twu(Xi);
7. if twu(Xi) < min_utility then
8. delete the node Xi from iMaxTree of LexTree-maxHTU;
9. endif
10. endfor
11. /* Case II: if itemset Xi is an Insert-Itemset */
12. foreach entry Xi of Insert-Itemset-Set do
13. add the transaction utility of Tj+w, i.e., tu(Tj+w), to twu(Xi);
14. if twu(Xi) ≥ min_utility and Xi is a max-HTU-itemset then
15. insert Xi into i.MaxTree of LexTree-amaxHTU as a tree node;
16. endif
17. endfor
18. /* Case III: if itemset Xi is an Intersec-Itemset */
19. foreach entry Xi of Intersec-Item-Set do 
20. delete the value of tu(Tj) from twu(Xi);
21. add the value of tu(Tj+w) to twu(Xi);
22. if i.MaxTree contains Xi as a node and twu(Xi) ≤ min_utility then
23. delete Xi from i.MaxTree of LexTree-maxHTU;
24. elseif twu(Xi) >min_utility and Xi is a max-HTU-itemset then
25. insert Xi into i.MaxTree as a node;
26. delete all subsets of Xi from i.MaxTree;
27. endif
28. endfor
End
Figure 7. Algorithm LexTree-maxHTU-Update in the window sliding phase.
Li 540
Journal of Information Science, 37 (5) 2011, pp. 532–545  The Author(s), DOI: 10.1177/0165551511416436
window sliding phase and generation time of high-utility itemsets from the structure in pattern generation phase of min-
ing utility itemsets from data streams.
0
20
40
60
80
100
120
140
160
0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1
Minimum Utility Threshold (%)
EX
ec
ut
io
n 
Ti
m
e 
(s
ec
.)
MHUI-max MHUI-TID THUI-Mine
Figure 11. Execution time of MHUI-max, MHUI-TID and THUI-Mine under various utility thresholds min_utility on T10I6D100K
(|w| = 30K, |P| = 10K).
Utility Value Distribution
0
50
100
150
200
250
0 200 400 600 800 1000
External Utility (Profit)
N
um
be
r o
f I
te
m
s
Figure 10. Profit value distribution with distinct 1000 items [30].
Table 2. Name and parameter of each data set with D100K [30]
Synthetic data sets Average items per transaction Average length of maximal utility pattern Number of items
T5I4 5 4 1000
T10I6 10 6 1000
T15I10 15 10 1000
T20I15 20 15 1000
T30I20 30 20 1000
Table 1. Meanings of symbols used in the experiments [30]
Symbols Meaning
|w| Window size (30K)
|P| Partition size used in THUI-Mine (10K)
min_utility User-defined minimum utility threshold (0.2%× tu(CTSW) to 1%× tu(CTSW))
Qitem Quantity of each item in each transaction (1–5)
Uitem Utility of each item (1–1K)
Li 542
Journal of Information Science, 37 (5) 2011, pp. 532–545  The Author(s), DOI: 10.1177/0165551511416436
usage of MHUI-max is stable. Consequently, our proposed algorithm MHUI-max runs significantly faster and uses less
memory than the existing algorithms, MHUI-TID and THUI-Mine.
5. Discussion
The differences between the proposed algorithm, MHUI-max, and the existing approach, MHUI-TID, are described as
follows. In the framework of MHUI-TID algorithm, only 2-HTU-itemsets are stored in the data structure LexTree-2HTU
in the window initialization phase and the window sliding phases. In these phases, the memory requirement of MHUI-
TID is less than that of our algorithm MHUI-max. However, the memory requirement of MHUI-TID in the last pattern
generation phase is much greater than that of MHUI-max. In the last phase of mining high-utility itemsets from data
streams, MHUI-TID uses a level-wise candidate generation approach to generate and verify large candidate utility item-
sets. The level-wise pattern generation approach is the performance bottleneck in time and memory efficiency of MHUI-
TID algorithm.
Based on the framework of our proposed MHUI-max algorithm, only max-HTU-itemsets are recorded in the data
structure LexTree-maxHTU during all phases for mining high-utility itemsets from data streams. The memory usage of
MHUI-max is stable. Furthermore, all max-HTU-itemsets are stored in the LexTree-maxHTU; MHUI-max can use a
top-down pattern generation and verification method to generate all high-utility itemsets. This is because, if an itemset
is a max-HTU-itemset, all its subsets are HTU-itemsets and generated immediately. This is the major reason why the
proposed method MHUI-max outperforms the existing approach, MHUI-TID.
6. Conclusions and future work
In this paper, we have addressed the issue of efficient mining of high-utility itemsets from streaming data. Under the
streaming environment, single-pass pattern mining, limited memory usage and real-time processing are major challenges
for mining utility itemsets from data streams. An efficient algorithm, MHUI-max, is proposed for mining high-utility
itemsets from data streams over sliding windows. An effective summary data structure, LexTree-maxHTU, has been
developed for maintaining a set max-HTU-itemsets from current transaction-sensitive stream sliding window.
Experimental results show that MHUI-max can find high-utility itemsets with higher performance by generating fewer
candidate itemsets and reducing the computation time of utility value. Moreover, it also shows that MHUI-max outper-
forms other existing utility mining algorithms, MHUI-TID and THUI-Mine, under different experimental conditions and
is scalable with streaming data. For future work, we will extend the concepts developed in this paper to find top-K high-
utility itemsets from data streams over sliding windows and mining high and top-K utility itemsets from data steams
with millions of objects.
Acknowledgement
The authors thank the reviewers for their comments, which improved the quality of the paper. The paper was partially supported by the
National Science Council of Taiwan under research grant no. NSC99-2221-E-424-005.
References
[1] Agrawal R, Imielinski T, Swami A. Mining associations rules between sets of items in large databases, In: Proc. of ACM
SIGMOD Intel. Conf. on Management of Data, 1993, pp. 207–216.
[2] Agrawal R, Mannila H, Srikant R, Toivonen H, Verkamo AI. Fast discovery of associations rules. In: Advances in Knowledge
Discovery and Data Mining. AAAI/MIT Press, 1996, pp. 307–328.
[3] Agrawal R, Srikant R. Fast algorithms for mining association rules in large databases. In: Proc. of the 20th Intel. Conf. on Very
Large Databases (VLDB), 1994, pp. 487–499.
[4] Han J, Pei J, Yin Y. Mining frequent patterns without candidate generation. In: Proc. of ACM SIGMOD Intel. Conf. on
Management of Data, 2000, pp. 1–12.
[5] Lee C-H, Lin C-R, Chen M-S. Sliding-window filtering: an efficient algorithm for incremental mining. In: Proc. of the ACM
10th Intel. Conf. on Information and Knowledge Management (CIKM), 2001, pp. 263–270.
[6] Park JS, Chen MS, Yu PS. Using a hash-based method with transaction trimming for mining association rules. IEEE
Transactions on Knowledge and Data Engineering (TKDE), 1997; 9(5): 813–825.
[7] Savasere A, Omiecinski E, Navathe S. An efficient algorithm for mining association rules in large database. In: Proc. of the
21th Intel. Conf. on Very Large Databases (VLDB), 1995, pp. 432–444.
[8] Chan R, Yang Q, Shen YD. Mining high-utility itemsets. In: Proc. of the 3rd IEEE Intel. Conf. on Data Mining (ICDM), 2003.
Li 544
Journal of Information Science, 37 (5) 2011, pp. 532–545  The Author(s), DOI: 10.1177/0165551511416436
國科會補助計畫衍生研發成果推廣資料表
日期:2011/11/15
國科會補助計畫
計畫名稱: 資料串流上高利益樣式探勘技術之研發
計畫主持人: 李華富
計畫編號: 99-2221-E-424-005- 學門領域: 人工智慧
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
