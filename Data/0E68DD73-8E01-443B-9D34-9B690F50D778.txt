2（一）計畫中文摘要：
關鍵詞：獨立展開樹、凱利圖、旋轉圖、三價凱利圖、連結網路、平行傳輸、容錯
若能以某節點當作樹根，找出多棵獨立展開樹(independent spanning trees)，此根節點
便可利用這些不同的獨立展開樹，找出數條互斥的路徑對同一節點進行平行傳輸，達到分
散負載及縮短完成時間的目的；這種節點互斥的平行路徑傳輸的方式，也可應用於訊息安
全分送；此外，獨立展開樹另外一個應用是容錯，容許在多個節點及連結都發生錯誤的情
況之下依然可以保證傳輸成功。
由於找出獨立展開樹問題在一般圖是很困難，於是很多學者在一些連結網路上進行獨
立展開樹的研究，如 planar graph、chordal ring、 product graph 及 hypercube 等。至於在凱
利圖(Cayley graph)上建構獨立展開樹的研究還不多，只有 star graph、arrangement graph 及
constant degree 4 cayley graph 等連結網路被探討，而在這些連結網路所建構的展開樹大都是
邊互斥(edge disjoint)而非節點互斥(vertex disjoint)。
在此計劃中，我們針對二種凱利圖：旋轉圖(rotator graph)及三價凱利圖(trivalent cayley
graph)進行研究。選擇旋轉圖建構獨立展開樹是因為旋轉圖有一些比其他的連結網路更優良
的特性，是一個值得研究的連結網路，例如與旋轉圖一樣具有對稱性及遞迴建構特性的星
狀圖(star graph)，旋轉圖有比它更短的直徑。三價凱利圖也同樣屬於凱利圖家族成員之一，
它擁有每個節點分支度皆為 3 的特性，且不會隨著節點數的增加而改變。
利用它們的拓樸特性，本計劃在旋轉圖上發展出平行建構出(n - 1)棵節點互斥獨立展
開樹演算法；此外我們也在三價凱利圖上發展出於線性時間平行建構 3 棵節點互斥獨立展
開樹演算法。
4(一) 研究目的與文獻探討
A spanning tree in a graph G is a connected subgraph of G that contains all nodes of G
without forming any cycle. Usually, a network is modeled by a graph G = (V, E), where V = V(G)
and E = E(G) are node set and edge set of G, so spanning trees in the network are easily
constructed. Fault-tolerant broadcasting, secure message distribution, and parallel transmission
are important issues for numerous applications in networks. It is a common idea to design
multiple independent spanning trees (ISTs for short) as a broadcasting scheme or a distribution
protocol for receiving the high levels of fault-tolerance and of security in a network. For
fault-tolerant broadcasting, a rooted spanning tree in the underlying graph of a network can be
viewed as a broadcasting scheme of the source node (i.e., the root) such that the fault-tolerance
can be achieved by sending multiple copies of the message in the multiple independent spanning
trees. For secure message distribution, a message is separated into several parts in the process of
distribution. Then, the different messages are sent safely from the distributor to different nodes
via the distribution protocol such that every node can correctly obtain its own message and keep
the message secret to every other node [1]. In addition, , we can utilize an arbitrary node as root
to construct multiple independent spanning trees, and then the root node can use these multiple
independent spanning trees to find several parallel paths to a node for parallel transmission.
Let T and T’be spanning trees in a graph G. For x, zV(T), we denote T[x, z] as the unique
path from x to z in T. These two spanning trees T and T’are called edge disjoint independent
spanning trees if they are rooted at the same node, say r, and such that E(T[r, x])∩E(T’[r, x]) =
Ø for every node xV(T) \ {r}. Furthermore, these two spanning trees T and T’are called vertex
disjoint independent spanning trees if they are rooted at the same node, say r, and such that V(T[r,
x])∩V(T’[r, x]) = {r, x} and E(T[r, x])∩E(T’[r, x]) = Ø for every node xV(T) \ {r}. Also, we
refer a set of spanning trees of G to be edge/vertex disjoint independent if they are mutually
edge/vertex disjoint independent. Obviously, there are more qualifications in vertex disjoint
independent spanning trees than edge disjoint independent spanning trees, so constructing vertex
disjoint independent spanning trees is more difficult than constructing edge disjoint independent
spanning trees. If k independent spanning trees rooted at node r are constructed in a graph G, then
there k edge/vertex disjoint paths between nodes r and x for every node xV(T) \ {r}. Thus, the
speed-up of transmission between nodes r and x can be achieved by these k edge/vertex disjoint
paths. For fault-tolerant application, if (k -1) edges or vertices are faulty, then there is at least one
path between nodes r and x such that the reliability of the network can be enhanced.
It also can achieve parallel transmission and fault-tolerant application by constructing k
vertex disjoint paths between any given two nodes which is discussed in the study of internally
6ISTs on rotator graphs. Consequently, we develop an algorithm to construct (n - 1) vertex disjoint
independent spanning trees on rotator graphs in this project.
All of Cayley graphs are regular where each node has the same degree, but the degree of the
nodes increases with the size of these graphs [48]. This property can make the use of these graphs
costly for networks with large number of nodes. Therefore, fixed node-degree graphs are very
suitable for networks with large number of nodes because total edges increases with the size of
these graphs linearly [49].
For the trivalent Cayley graph of scale n, each node corresponds to a circular permutation of
n symbols in lexicographic order where each symbol may be present in either uncomplemented or
complemented form. The degree of each node in trivalent Cayley graphs is three and the edges of
the trivalent Cayley graph of scale n are defined by the following three generators as follows:
(s1 s2 s3…sn)  f (s2 s3… sn 1s )
(s1 s2 s3…sn) 
1f ( ns s1 s2…sn-1)
(s1 s2 s3…sn) g (s1 s2 s3… ns )
By the definition of trivalent Cayley graphs [50], the graph is a fixed node-degree graph and
has many good topological properties such as symmetry, logarithmic diameter [51], and Hamilton
cycles [52]. In this project, we design a linear time algorithm for constructing 3 vertex disjoint
independent spanning trees on the trivalent Cayley graph.
8______________________________________________________________________________
Procedure RG-Gen-Parents(x)
Begin
0. Let x = s1s2…sn and sa = 1 and sb = s1 - 1 and sc = n and US = Ø and TK = Ø and TK’= Ø
1. x’=ĝ(a, x);
add 1 to US;
if x’= 123…n then
if a = n then
parent(T2 , x) = x’; // Rule 1.1
add 2 to TK;
else
parent(Ta+1 , x) = x’; // Rule 1.2
add (a + 1) to TK;
add 2 to TK’;
else
k = s1;
parent(Tk , x) = x’; // Rule 1.3
add k to TK;
2. x’=ĝ(b, x);
Let x’= s’1s’2…s’n
add s’1 to US;
add s’1 to TK’;
if s’k…s’n = k…n and s’k-1 = 1 and s’k-2 = (k–1)then
parent(Tk , x) = x’; // Rule 2.1
add k to TK;
if x’= 23…n1 then
parent(T2 , x) = x’; // Rule 2.2
add 2 to TK;
3. if s’1…s’i = (n–i + 1)…n and s’i+1 = (k–1) and s’i+2 = 1 and s’i+3 = k then
parent(Tk , x) = x’; // Rule 3.1
add k to TK;
if s’1…s’i = (n–i + 1)…n and s’i+1 = 1 and s’i+2 = 2 then
parent(T2 , x) = x’; // Rule 3.2
add 2 to TK;
4. x’=ĝ(c, x);
10
3. Independent Spanning Trees on Trivalent Cayley Graphs
3.1 Trivalent Cayley Graphs and Their Cycle Structure
Definition 3.1. (Vadapalli and Srimani [50]) For integer n ≥ 2, the n-dimensional trivalent Cayley
graph, denoted by TCn, is an undirected graph on M = n × 2n nodes. Each node corresponds to a
circular permutation of n symbols * 1
*
1
*
0 ... nsss in lexicographic order, where each symbol
*
is { is ,
is } stands for either uncomplemented form (i.e., si) or complemented form (i.e., is ). For
arbitrary node x = * 1
*
2
*
0
*
1
*
1
* ......  kknkk ssssss TCn, edges incident with x are of the type (x, δ(x)),
whereδ{f, f -1, g} is called the generator in the graph and is defined in the following way:
f(x) = ** 1
*
2
*
0
*
1
*
1 ...... kkknk ssssss  ((x, f(x)) is referred to as the f-edge of x),
f -1(x) = * 2
*
0
*
1
*
1
**
1 ......  knkkk ssssss ((x, f
-1(x)) is referred to as the f -1-edge of x), and
g(x) = * 1
*
2
*
0
*
1
*
1
* ......  kknkk ssssss ((x, g(x)) is referred to as the g-edge of x).
Note that the graph TCn constructed above is a symmetric regular graph of degree 3 and has
3n × 2n-1 edges. Fig. 3.1 depicts TC2 and TC3, where we use English alphabets for describing
symbols of nodes.
Fig. 3.1: Trivalent Cayley graphs (a)TC2 and (b)TC3.
Let I = s1s2…sn-1 be the identity permutation and x denote the permutation obtained from x
by complementing all its symbols. Define the composition of generators as (δ1∙δ2)(x) =δ1(δ2(x)).
It is easy to see that, for each δ{f, f -1}, δn(x) = x and δ0(x) = δ2n(x) = x for every nodeTCn.
For simplicity, we write f -2 (x) to mean (f -1)2(x). Henceforth, a cycle consisting of 2n nodes x, f(x),
f 2 (x),…, f 2n-1 (x) together with f-edges/f -1-edges of them is called an f-cycle. Moreover, all the
n2n nodes in TCn are partitioned into 2n-1 disjoint f-cycles of length 2n such that both nodes x and
x are contained in the same f-cycle. Furthermore, these f-cycles are connected by g-edges. In
particular, each f-cycle has a unique node starting with s0 and a unique node staring with 0s . We
will refer to this pair of nodes as base nodes of the cycle. To identify a base node x, we convert
each symbol of x to 0 for uncomplemented form and to 1 for complemented form, and denote the
resultant binary string as b(x) = bn-1bn-2…b0 for bi {0, 1} with 0≤i ≤ n–1. Consequently, each
12
Fig. 3.3: Expand CCN3 to CCN4 and there exist two type partitions in CCN4.
The path from x to y (including x and y) in the f -1 orientation (k -> k + 1 orientation) of a
cycle is denoted by C[x, y]. We may also regard C[x, y] as the set of nodes in such a path. We now
partition an f-cycle into two halves with equal length, where each part is called a half-cycle.
Subsequently, type-A and type-B partitions and half-cycles in part-1 and part-2 of f-cycles are
defined as follows:
type )b(in12 ybb part-1 )b(in12 ybb part-2
type-A 00 ))](,1()),(,0[( ybnybC  11 ))](,1()),(,0[( ybnybC 
type-B 10 ))](,1()),(,2[( ybybC 01 ))](,1()),(,2[( ybybC
3.2 Construction of ISTs
In this section, we use CCNn to present our algorithm for constructing 3 ISTs on TC-graphs.
Because TC-graphs are node-symmetric, without loss of generality, we consider I as the root for
every IST. Moreover, since TCn is a regular graph of degree 3, the root in each IST has only one
child. For eachδ{f, f -1, g}, we denote Tδas an IST of TCn such thatδ(x) = I, where x is the one
child of the root. Let T = {Tf , Tf -1, Tg}. For each T T , the parent of a node xTCn, denoted by
parent(T, x), is the node adjacent to x in the path T[x, I]. In our constructing scheme of ISTs,
every node x in TCn connecting their parents is applied in a unified rule except nodes in primary
cycles. We first describe the parent of a node x in each tree if x is contained in a primary cycle.
For each node xC<00…0>, we have the following assignments:
14
______________________________________________________________________
Function SEEK(x)
begin
Let x = (k, <b(y)>) be a node with b(y) = bn-1bn-2…b1b0 = 0 where 0≤k≤n–1;
Case b1b0 = 00: //type-A partition in part-1
if k < (n–1) and there exists a nodex’C[(k+1, <b(y)>), (n–1, <b(y)>)]
such that a(x’) = )(xa , return TRUE;
else return FASLE.
Case b1b0 = 10: //type-B partition in part-1
if (k < (n–1) and there exists a nodex’C[(k+1, <b(y)>), (n–1, <b(y)>)]
such that a(x’) = )(xa ) or
(there exists a node x’C[(0, <b( y )>), (1, <b( y )>)] such that a(x’) =a(x)),
return TRUE;
else return FASLE.
Case b1b0 = 01: //type-B partition in part-1
if k < 1 and there exists a nodex’C[(1, <b(y)>), (1, <b(y)>)]
such that a(x’) = )(xa , return TRUE;
else return FASLE.
end SEEK
______________________________________________________________________
With the aid of function SEEK(x), the following procedure can be used to generate the
parent of a node x in each tree TT, where x is a node in the part-1 of an f-cycle and not in any
primary cycle. For a node x in the part-2 of an f-cycle, the procedure TC-Gen-Parents(x) can be
made an amendment by exchanging Tf and Tf -1 in each of the assignment of parents.
______________________________________________________________________
Procedure TC-Gen-Parents(x)
begin
0. Let x = (k, <b(y)>) be a node with b(y) = bn-1bn-2…b1b0 = 0 where 0≤k≤n–1;
parent(Tf , x) = f -1(x);
1. if b0 = a(x) and seek(x), then parent(Tf -1, x) = f(x);
parent(Tg, x) = g(x);
parent(Tf , x) = f(x);
2. if b0 = a(x) and not seek(x), then parent(Tf -1, x) = f -1(x);
parent(Tg, x) = g(x);
16
[2] K. Kaneko, Y. Suzuki, Node-to-node internally disjoint paths problem in bubble-sort graphs,
Proc. 10th Pacific Rim International Symposium on Dependable Computing (2004) 173-182.
[3] K. Kaneko, Internally-disjoint paths problem in Bi-rotator Graphs, IEICE Trans. on
Information and Systems E88-D (7) (2005) 1678-1684.
[4] D. Lou, A. Saito, L. Teng, A note on internally disjoint alternating paths in bipartite graphs,
Discrete Mathematics 290 (1) (2005) 105-108.
[5] A. Zehavi, A. Itai, Three tree-paths, Journal of Graph Theory 13 (1989) 175-188.
[6] J. Cheriyan, S.N. Maheshwari, Finding nonseparating induced cycles and independent
spanning trees in 3-connected graphs, Journal of Algorithms 9 (1988) 507-537.
[7] S. Curran, O. Lee, X. Yu, Finding four independent trees, SIAM Journal on Computing 35
(2006) 1023-1058.
[8] A. Itai, M. Rodeh, The multi-tree approach to reliability in distributed networks, Information
and Computation 79 (1988), 43-59.
[9] A. Huck, Independent trees in graphs, Graphs and Combinatorics 10 (1994) 29-45.
[10] A. Huck, Independent trees in planar graphs, Graphs and Combinatorics 15 (1999) 29-77.
[11] K. Miura, D. Takahashi, S. Nakano, T. Nishizeki, A linear-time algorithm to find four
independent spanning trees in four-connected planar graphs, International Journal of
Foundations of Computer Science 10 (1999) 195-210.
[12] S. Nagai, S. Nakano, A linear-time algorithm to find independent spanning trees in maximal
planar graphs, Proc. 26th Workshop on Graph-Theoretic Concepts in Computer Science, WG
2000, LNCS 1928, Springer (2000) 290-301.
[13] Y. Iwasaki, Y. Kajiwara, K. Obokata, Y. Igarashi, Independent spanning trees of chordal
rings, Information Processing Letters 69 (1999) 155-160.
[14] J.S. Yang, J.M. Chang, S.M. Tang, Y.L. Wang, Reducing the height of independent spanning
trees in chordal rings, IEEE Transactions on Parallel and Distributed Systems 18 (5) (2007)
644-657.
[15] K. Obokata, Y. Iwasaki, F. Bao, Y. Igarashi, Independent Spanning trees of product graphs
and their construction, IEICE Trans. Fundamentals of Electronics, Communications and
Computer Sciences E79-A (1996) 1894-1903.
[16] S.M. Tang, Y.L. Wang, Y.H. Leu, Optimal independent spanning trees on hypercubes,
Journal of Information Science and Engineering 20 (2004) 143-155.
[17] J.S. Yang, S.M. Tang, J.M. Chang, Y.L. Wang, Parallel construction of optimal independent
spanning trees on hypercubes, Parallel Computing 33 (2007) 73-79.
[18] J.S. Yang, Independent Spanning Trees on Some Interconnection Networks, National Taiwan
University of Science and Technology, 2007.
18
[36] J.S. Jwo, S. Lakshmivarahan, K.K. Dhall, Embedding of cycles and grids in star graphs, J.
Circuits Syst. Comput. 1 (1991).
[37] S. Ranka, J. Wang, N. Yeh, Embedding meshes on the star graph, J. Parallel Distrib. Comput.
19 (1993) 131-135.
[38] J. Misic, Z.Jovanovic, Routing function and deadlock avoidance in a star graph
interconnection network, J. Parallel Distrib. Comput. 22 (1994) 216-228.
[39] S. Latifi, Task allocation in the star graph, IEEE Trans. Parallel Distrib. Syst. 5 (1994)
1220-1224.
[40] S. Latif, Migration of tasks in interconnection network based on the star graph, J. Parallel
Distrib. Comput. 31 (1994) 166-173.
[41] P.F. Corbett, Rotator Graphs: An Efficient Topology for Point-to-Point multiprocessor
Networks, IEEE Transactions on Parallel and Distributed System 3 (1992) 622-626.
[42] S. Ponnusway, V. A Comparative Study of Star Graphs and Rotator Graphs, International
Conference on Parallel Processing (1994) I46-I150.
[43] S. Puswamy, V. Chaudhary, Message Distribution of Minimal Path Routing in Rotator and
Star Interconnection Networks, Technical Report PDCL-93-05-05, Wayne State University,
Parallel and Distributed Computing Laboratory (1993).
[44] S. Ponnuswamy, Cayley graphs for point-to-point communication and VLSI implementation,
TR-95-33 (draft).
[45] P. Fragopoulou and S. G. Akl, Edge-disjoint spanning trees on the star network with
applications to fault tolerance, IEEE Trans. on Computers 45 (2) (1996) 174-185.
[46] Chin-Tsai Lin, Embedding k(n –k) edge-disjoint spanning trees in arrangement graphs,
Journal of Parallel and Distributed Computing 63 (2003) 1277-1287.
[47] Abderezak Touzene, Edges-disjoint spanning trees on the binary wrapped butterfly network
with applications to fault tolerance, Parallel Computing 28 (2002) 649-666.
[48] S.B. Akers and B. Krishnamurthy, A group theoretic model for symmetric interconnecton
networks, IEEE Trans. Comput. 38 (1989) 555-566.
[49] C. Chen, D.P. Agrawal and J.r. Burke, dBCube, A new class of hierarchical multiprocessor
interconnection networks with area efficient layout, IEEE Trans. Parallel Distributed
Systems 4 (1993) 1332-1344.
[50] P. Vadapalli and P.K. Srimani, Trivalent Cayley graphs for interconnection network, Inform.
Process. Lett. 54 (1995) 329-335.
[51] C.H. Tsai, C.N. Hung, L.H. Hsu, and C.H. Chang, The correct diameter of trivalent Cayley
graphs, Inform. Process. Lett. 72 (1999) 109-111.
[52] M.D. Wagh, J. Mo, Hamilton cycles in Trivalent Cayley graphs, Inform. Process. Lett. 60
出席國際學術會議心得報告
計畫編號 NSC 98－ 2221－ E－ 011－ 075
計畫名稱 連結網路多重獨立展開樹之研究
出國人員姓名
服務機關及職稱
徐俊傑
國立臺灣科技大學教授
會議時間地點
Sep. 22~25, 2009
奧地利維也納
會議名稱 International Conference on Parallel Processing
發表論文題目 Transition-Aware Dynamic Voltage Scaling for Jitter-Controlled Real-TimeScheduling: A Tree-Structured Approach
一、參加會議經過
ICPP為全球知名的平行處理方面的國際會議，此次會議於 2009年 9月 22日至 25日於奧
地利維也納舉行，包含 Simulation and Modelling in Emergent Computational Systems，Parallel
Programming Models and Systems Software for High-End Computing ， Advanced Distributed and
Parallel Network Applications，Next Generation of Wireless and Mobile Networks，Embedded Multicore
Systems-on-Chip ， Scheduling and Resource Management for Parallel and Distributed Systems ，
Optimization and Management of Heterogeneous Networked Systems，Distributed XML Processing: Theory
and Practice，Real-time Systems on Multicore Platforms: Theory and Practice等 9個 workshop。參加者
涵蓋全球從事平行與分散式處理之研究人員，主題除了有關平行與分散式處理架構、軟體、
演算法、與在各領域應用之外，還談到如何增進平行與分散式系統計算效率、穩定度
(stability)、容錯(fault tolerance)、最佳化(optimization)與排程 (scheduling) …等議題，內容廣泛
且豐富。由於論文素質相當高，會場討論非常熱烈，會議於 9月 25日圓滿結束。
Transition-Aware Dynamic Voltage Scaling for Jitter-Controlled Real-
Time Scheduling: A Tree-Structured Approach
Da-Ren Chen¥, and Chiun-Chieh Hsu§
¥Dept. of Information Management Hwa Hsia Institute of Technology, Taiwan, R.O.C.
§Department of Information Management, National Taiwan University of Science and Technology
danny@cc.hwh.edu.tw¥, cchsu@cs.ntust.edu.tw§
Abstract
Dynamic Voltage Scaling (DVS) is a key technique for embedded
real-time systems to reduce energy consumption by lowering the
supply voltage and operating frequency. Most existing DVS
algorithms have to generate the canonical schedules or estimate
the lengths of slack time in advance for generating the voltage
scaling decisions. Therefore, these methods execute either on the
length (least-common- multiple) of schedules which is exponential
length in general or spend much overhead for estimating available
slack which is hard to predict accurately. In this paper, we study
the periodic dynamic real-time tasks, whose periods are
transformed in a jitter-controlled manner, and assuming their jobs
could be completed early. Our approach constructs a tree structure
corresponding to a schedule and maintains the tree at each early-
completion point. Our approach consisting off-line and on-line
algorithm also handles the transition times and takes O(nk) and
O(k+
min
max
p
p ) time respectively, where n, k and
min
max
p
p denotes the
number of jobs, task and degree, respectively.
Keywords: dynamic voltage scaling, real-time scheduling, jitter
control
1. Introduction
Most DVS scheduling algorithm are known to be quite
effective in reducing the energy consumption of a target
system. However, a significant limitation of DVS processor
is their unable to change the operation voltage and frequency
immediately. The limitation, known as transition time
overhead, including translation time required for power
delivery system and the time for relocking a clock generator
requires approximately 130μsin Intel® M processors [4,22].
The architecture, in addition, needs 10-15μsto ensure system
memory access unavailability to match isochronous device
needs. Therefore, ignoring time overhead in real-time
systems may incur deadline misses, which results in low
system performance or even system failure[12]. Another
problem is the transition energy overhead, which increases
the systems’energy consumption if DVS algorithm adjusts
voltage/speed level frequently. Much literature, therefore,
ignoring transition energy overhead may not reduce actual
total energy consumption in the systems.
In the network systems, jitter presents the variation in the
time between packet arriving caused by network congestion,
time drift or route changes [11,20]. In the periodic task
systems, a task’s jitter is usually caused by the interference of
other tasks[13]. For example, the delay and jitter control in
ATM (Asynchronous Transfer Mode), a multimedia stream
requires QoS including end-to-end delay 100ms and the
bandwidth are allocated approximately to guarantee the in
network systems. Novel real-time applications, like Voice
over IP (VoIP) and Video on Demand (VoD) have jitter
control requirements. The most direct way for generating the
jitterless schedules is to transform the lengths of all task
periods into the multiples [5]. Jitter-controlled schedules
have the advantages of regular start, preemption and finish
times, and therefore they provide good predictability and
generate the schedules more quickly.
Many previous works study the problem of real-time
scheduling with inter-task DVS [1,7,12,15,16,17,19]. Yao et
al. [19] proposed a theoretical DVS model and an O(n3)
algorithm for computing minimum energy DVS schedule in a
continuous variable voltages processor. Ishihara et al.[6]
proposed an optimal voltage allocation method using a
discrete variable voltage processor. The optimality of this
technique is confined to a single task. Kwon et al. [8]
proposed an optimal discrete approach, which combined with
the continuous version in [19] and therefore requires O(n3)
time. Recent work proposed by Li et al. [10] gives O(dn log
n) time algorithm that constructs a minimum energy schedule
without computing the optimal continuous schedule in
advance. They still have to, however, generate a standard
schedule prior to voltage scaling algorithm. Therefore, the
lengths of such schedules depend on the LCM of the length
of task periods, their algorithms cannot be completed in full
polynomial time. These off-line techniques, in addition,
consider WCET of tasks and the slack caused by task early-
completion cannot be utilized to save more energy. They do
not, in addition, consider inter-task transition overhead,
which will likely cause deadline misses or even system
failure.
In practice, real-time systems usually reveal large
variations in the implementation workload experienced by
their applications. Related literature [1,3] discovered that the
worst-case execution time is usually ten-time longer than the
best-case execution in practical applications. Many
researches [1,8,9,12,14], therefore, focus on the dynamic
reclaiming techniques instead of simply the static power
managements [18,19]. Krishna et al. [9] present a power-
Definition1: Two distinct jobs are called connected if a job
resumes or begins immediately its execution after another
job.
Definition 2: A CJ-treeΓis an ordered tree in which each
node corresponds to a job in the jitter-controlled schedule. It
satisfies the following properties:
(1) Each node corresponding to a job has a job index and
relative start and worst-case finish time.
(2) A parent node with respect to its children has lower
priority and connects to the nodes corresponding to the
job in the schedule. When a job ji,h connect to two or
more jobs, the node(job) with the highest priority
becomes ji,h’s parent.
(3) A job corresponding to a non-terminal node executes
immediately after that of its left-most child.
Assuming d, n and k denote the number of speed levels, jobs
and tasks in an jitter-controlled schedule, respectively, where
k≧2. Therefore, CJ-tree has the following properties.
Lemma1: The height of a CJ-tree is k.
Lemma2: The degree of a CJ-tree is
min
max
p
p .
Proposition 3: The maximum number of nodes and leaf
nodes is n and
min
max
p
p , respectively.
CJ-tree algorithm
Procedure insertion(Γ: CJ-tree, x: new node)
01 vthe root of T
02 WHILE v≠nul
03 {IF fx=bv THEN add new vertex x as the leftmost child of vertex v.
04 IF fx>bv AND jx and jv are connected THEN
05 IF v has non-leftmost child w and fx≦bw
06 THEN vw
07 ELSE add new vertex as the child of v
08 IF fx>bv AND jx and jv are not connected
09 THEN vthe child of v of which the execution interval covers
fx.
10 IF fx<bv THEN vthe leftmost child of v.
11 }
12 v=location of x
Figure 2. Procedure Insertion( ) in CJ-tree structure.
2.2 Tree Construction
The basic idea for constructing a CJ-tree is similar to that for
creating a search tree. We start with a tree containing just one
node ji,h, h≧0, namely, the root. To insert a node, we
compare its task index, start time and finish time with the
nodes in CJ-tree. Let Ti denotes a set of jobs with task index
i. We select and remove a job each time from an nonempty
set Ti with the highest index i and insert it to a CJ-tree using
algorithm insertion( ). To insert new job jx,y, we first compare
its finish time fx with the start time bv of the job jv already in
the tree, starting at the root v and moving to the leftmost if
fx=bv and node v has a leftmost child. If node v does not have
leftmost child, a new vertex corresponding to job jx is
inserted as a new leftmost child of v. When fx<bv and jx and jv
are connected job, adding a new node corresponding to jx as
a new child of node v or moving to the child of v if node x
connect to this child of v. If fx>bv, node x is reserved in job
set R for next iteration. Algorithm insertion() gives the
pseudo code for adding a new node corresponding this job as
its worse-case finish time. In the pseudo code, x denotes an
insertion node, and v is a current node for locating node x.
Example. In Figure 1(a), a system has three task sets T1{j1,0,
j1,1, j1,2, j1,3}, T2={j2,0, j2,1} and T3={j3,0} with p1=d1=3.25,
we1=1.6, p2=d2=6.5, we2=2.2, p3=d3=13 and we3=2.2. Firstly,
the job j3,0 in T3 is selected as the root of CJ-tree. In the
Figure 3, job j2,0 is selected as an input and becomes the
leftmost child of j3,0 because of f2,0=b3,0. The next input, node
j2,1, becomes the second child of b3,0 because of lines 5-7 in
Figure 2. Notably, it is unnecessary to sort the jobs according
to their priorities or start or finish times. That is, they are
arbitrarily selected in the same set. We proceed with node
j1,2, line 7 causes j1,2 to move down the tree and eventually j1,2
becomes the child of j2,1. For node j1,1, line 8 creates a new
leaf node j1,1 as the child of T3,0. When node v=j1,3, line 6
creates a new child node of j2,1. In the line 10, node j1,0
becomes the leftmost child of node j2,0. Figure 4 present the
CJ-tree of Figure 1(a).
The off-line procedure insertion( ) runs in O(nk) time to
insert n nodes into a CJ-tree. The root is a job with the
longest task period, without loss of generality, we can only
consider the jobs in the interval [0, pmax] and a CJ-tree has
only one root.
Figure 3. A CJ-tree corresponding
to the jitter-controlled schedule in Figure 1.
2.3 The Properties of CJ-tree
Whenever a job completes early, the CJ-tree corresponding
to the task system is adjusted to present the slack availability
of the existing nodes. Each job (node) could perform the
following two operations.
Stretch: A job stretches its execution length by lowering its
execution speed/voltage.
Move: A job moves its execution duration to postpone its
start or finish times.
According the above operations, we define the ancestor
nodes of an early-completion job ji,h.
APi,h: Ancestor path of ji,h contains a set of ancestors of node
ji,h.
SAli,h: the stretchable ancestor of ji,h at level l is capable of
performing Stretch operation.
MAli,h: the movable ancestor of ji,h at level l only performs
Move operation if necessary.
otherwise.,
,)(,
,,,,,,
,,,,
.
,
,.
,
,
m
jJj
i
cont
yx
jJj
i
yxx,y
m
Jj
i
cont
yx
Jj
i
rem
yx
S
we
S
we
slackjMS
S
we
S
we
Slack
yxyxhiyxyxhi
yxhiyxhi







(7)
In the equation (2), the remainder slack is returned to SA
node jx,y. That is,
slackx,y + rem
yxslack , , MS(jx,y)<slackx,y.
itself
yxslack , = (8)
0 , otherwise.
Therefore, the new speed of SA node jx,y is
.)(andnodeais,
,,
,
, x,yx,yx,yitself
yxyx
yxitself
yx slackjMSSAjSe
e
S 


Each SA node is able to scale its speed/voltage with those of
its descendant nodes in the same speed/voltage level. The
transition energy is also required by a SA and its descendant
nodes. Let curryxS , denote the current speed of job jx,y and θthe
number of transitions required for the jobs in Jx,yjx,y. The
primitive energy consumption required for Jx,yjx,y. is as
follows:
).1(20,)( ,
,
,,
,,,
 

yxcurr
hi
i
jJj
curr
hi
consum
yx JES
we
SPE
yxyxhi
 (9)
When the jobs in Jx,yjx,y execute at speed Sk derived from
equation (4), the energy consumption can be denoted as
follows:
.)(3)('
,
,
,,
,,
itself
yx
yxitself
yx
k
Jj
i
k
consum
yx S
we
SPE
S
we
SPE yxhi 

 (10)
The energy saving can be denoted as
.' ,,,
consum
yx
consum
yx
save
yx EEE  (11)
3.2 Single MA node
In an inter-task DVS system, the number of voltage/speed
transition during an MA node’s execution is determined by its
node degree. Therefore, the number of transitions that have
not begun yet can be denoted as
MA
yx ,T =
otherwise.}2max{0,
child,rightmostitsbeforecompletedis)}1(2max{0,
,C
, jC
x,y
x,yx,y 
Given the length of available slack, we can derive a
continuous speed
node.ais,
,,
,
,
,,
,, MAj
tslacke
e
S x,yMA
x,y
avail
yx
Jj
hi
Jj
hi
cont
yx
yxhi
yxhi





T
(12)
Notably, the length of WCET in equation (12) does not
contain that of job jx,y, since jx,y is a MA node which performs
Move operation only. We can derive a discrete speed level Sm
from equation (4). Similarly, when Sm > contyxS , , the unused
available slack allocated to jx,y can be derived as follows.
node.Ais,,,,, .
,
, MjS
we
-
S
we
Slack x,y
m
Jj
i
cont
yx
Jj
i
rem
yx
yxhiyxhi

 (13)
Similar to equation (8), the unused slack are accumulated in
itself
yxslack , which can be delivered upward to its ancestors
nodes.
Similar to equations (9), (10) and (11), the amount of saving
energy obtained by MA node is denoted as follows.
consum
yxE , ))(( ,
,, E
S
we
SP MAyx
k
Jj
i
k
yxhi 

 T , (14)
where consumyxE , excludes the energy consumption of node jx,y.
Figure 4. A CJ-tree corresponding to the schedule in
Figure 5(a)
3.3 The selection of SA and MA nodes.
To decrease energy consumption and transition overhead, the
combination of SA and/or MA nodes should be selected
carefully. In the best case, we may find the adjacent SA nodes
covering the longest interval. When there is no adjacent SA
node in the AP, the combinations non-adjacent SA nodes are
the secondary plan. If the former cases do not exist, the MA
node with the longest available slack is accepted.
Figure 5. Job j1,0 completes early at t=0.9
Example. In the Figure 5, a three-task system has a DVS
processor with three voltage levels v={0.7, 0.9, 1}, and each
job has worse-case execution we1=1.6, we2=2.4 and we3=1.8
under the highest execution speed Scurr.=1, respectively.
When job j1,0 complete early at time t=0.9, the CJ-tree
corresponding to the figure 5(a) is shown in Figure 4.
Assuming the length of time of each transition takes Δt=0.05,
our objective is to decrease the times of voltage adjustment
and energy consumption. In the first case, when slack1,0=0.7
is devoted to SA1,0, only the nodes in J2,0={j1,1} share the
slack to adjust its speed level. By equation (12) the
continuous and discrete speed level of J1,0 is
13 IF bli,h > ECi,h THEN
14 bli,h bli,h–slacki,h
15 ELSE eli,h eli,h–slacki,h
16 IF fx>bv AND jx and jv are not connected
17 THEN vthe child of v of which the execution interval covers fx.
18 IF fx<bv THEN vthe leftmost child of v.
19 l ++;
}
v=location of x
Figure 7 shows the algorithm CJ-tree adjustment. It
first moves the children of early completion node upward one
level (Lines 05-08). It then passes the slack to the suitable set
of SA and MA nodes in the ancestor path. When the parent of
ji,h is a MA node, it performs Move operation to update its
start or finish time (lines 12-15), meanwhile, its children
nodes begun after its modified finish time are moved upward
as its sibling nodes (lines 16-18). In briefly, the node
completing early or performing Move operation will be
checked the necessity for adjusting their children. On the
contrary, the children of a node performing Stretch do not
need this adjustment.
4.2 The Combination of SA and MA nodes
In the section, we focus on the combinations of SA and MA
nodes for scaling their speeds and those of their descendant
nodes. Firstly, we provide the notations for each SA and MA
node. According to the parameters, we can decide which
nodes provide the most contribution to energy efficiency
when they utilize the slack.
(1) Active interval of jli,hAP can be denoted as :
fli,h－bli,h , jli,h is SA node,
AIli,h= fli,h－bli,h －eli,h, jli,h is MR node,
ffinal－bli,h －eli,h, jli,h is MA and finished before
its rightmost child,
where ji,h denotes the early completion job. The contribution
factor (CF) derived from point (1) is the proposed criterion:

hiAI
E
,
2  , jx,y is SA node
(2) CF(jlx,y) =

hi
l
hi
AI
EC
,
,2  , jx,y is MA and finished before its
rightmost child,

hi
l
hi
AI
EC
,
, )12(  , otherwise.
In the point (2), jlx,y can be replaced with a set of SA and MA
node, the lower the CF(.) of the nodes the higher contribution
of the interval they obtain. The factor encourages the
algorithm to extend the length of active interval while
excluding the nodes with higher transition overhead.
Although the slack produced by a job is fixed, its“available”
slack varies according to its adopted combinations of SA and
MA nodes. Initially, we search upward alone the AP a SA
node with the lowest CF value, and gather the other SA or
MA one by one which does not increase the overhead
loading. However, this way gives rise to a problem; when the
length of active interval is too long for a DVS processor to
provide lower discrete voltage/speed level, the set of jobs
could not be finished on their timing constraints. Therefore, a
halting condition is provided to prevent the set of SA and MA
from over stretch. By the equations form (7) to (13), when
the halting condition is satisfied, that is, as long
as
remSlackΠ <0, the set Πof SA and MA nodes stops gathering
the ancestor node. The DVS algorithm JCRT shown in
Figure 8 can be divided into two phases.
01 JCRT-DVS algorithm
02 input hihihi APECSlack ,,, and,
03 Π=null,Π’=null, cur_loading=∞
04 Search a node j in APi,h with the smallest CF(j)
05 WHILE CF(Π)≦cur_loading AND remSlackΠ ≧2Δt
06 IF j is SA node THEN APi,hAPi,h - j
07 ΠΠj, cur_loading=CF(Π)
07 Derive a speed level Sk such that
.
Π
contS > Sk
08 Compute
availSlackΠ ,
remSlackΠ and
descSlackΠ according
to
.
Π
contS and Sk
08 IF Sk≧Sjcurr THEN continue the while loop
09 IF Sjitself> Sk THEN APi,hAPi,h∪j AND Set Sk as the new
speed of the jobs in JΠΠ-j
09 Set Sk as the new speed of the jobs in JΠΠ
10 Picking the other ancestor j with the smallest CF(Πj) from
APi,h
11 END WHILE
12 Π’ APi,h
14 Find Sk such that
cont
ΠS ' ≦Sk
15 WHILE tSlack Π
itself
Π  '' T ≦0 OR currΠS ' < Sk
16 Remove j fromΠ’such that CF(Π’)is minimum
17 Find speed level Sk such that
.
Π'
contS ≦ Sk
18 Scale the speed of the jobs inΠ’as Sk
19 Update the start, finish and preemption of the jobs inΠ.
Figure 8. JCRT-DVS algorithm.
Phase1: Add one SA or MA node with lowest overhead
loading each time in the promising set Π. Check whether the
overhead loading of Π is non-increased and
remSlackΠ ≧0. If
its not, we stop adding a node inΠ.
Phase2: The second phase utilizes the remainder slack of
phase 1 or a slack cannot contain the ancestor nodes with
lower transition loading. Initially, we put the unused ancestor
nodes in the Π’, and remove them one by one according to
overhead loading in increasing order.
5. Performance Analysis
5.1 The Time Complexities
The analysis of the time complexity can be divided into two
parts; off-line and on-line algorithms. The off-line algorithm
sorts the tasks according to their periods, transforms the
periods and profiles the start, finish and preemption times of
each task. Also, procedure insertion( ) belonging among
these off-line algorithms needs O(k) time. Since the sorting
of tasks dominates the complexities of off-line algorithms, its
time complexity is O(k+nlogn) where k and n denotes the
number of job and task, respectively. Whenever a job
complete early, the on-line algorithms including tree-
adjustment and JCRT-DVS algorithms are launched. The CJ-
tree using a link-listed data structure needs constant time to
[21] D. Zhu, D. Mosse and R. Melhem. Power-Aware scheduling
for and/or graphs in Real-time systems. IEEE Trans. Parallel and
Distributed Sys., 15(9): 849-864, Sep. 2004.
[22] Intel Corporation, Wireless Intel SpeedStep Power Manager –
Optimizing power consumption for the intel PXA27x processor
family, Wireless Intel SpeedStep® Power Manager White paper,
2004. http://download.intel.com/ pressroom/kits/
pxa27x/wp_wireless_speedstep.pdf
98年度專題研究計畫研究成果彙整表 
計畫主持人：徐俊傑 計畫編號：98-2221-E-011-075- 
計畫名稱：連結網路多重獨立展開樹之研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 1 1 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 1 1 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 1 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
