need a cache replacement algorithm that can satisfy 
user requests and also make more profit to content 
providers. In this paper, we concentrate on the cache 
reward, penalty, and presentation quality issues for 
having smooth multimedia presentations over the 
mobile web environment. 
 
In this paper, we will propose a cache and 
replacement schemes and mechanisms for 
transforming multimedia objects using MPEG-21 
digital item adaptation. Additionally, we will also 
devise suitable cache and replacement schemes for 
multimedia objects in the current best effort and the 
future mobile environment. Our proposed multimedia 
proxy system will cover the following concerns: (1) 
develop MPEG-21 digital item adaptation related 
techniques to transform digital items according to 
devices' capabilities (2) cache and replacement policy 
for multimedia objects, (3) design a system 
architecture for the proposed multimedia proxy using 
MPEG-21 digital item adaptation. 
 
The remaining part of this paper is organized as 
follows. Section 2 introduces some related works for 
web cache algorithms. Section 3 depicts the system 
architecture for the proposed multimedia proxy using 
MPEG-21 digital item adaptation. Section 4 
introduces the proposed cache algorithm for adapted 
MPEG-21 digital item. Section 5 gives a definition of 
cache reward. Section 5 has conclusion remarks. 
 
2. Related Works 
 
This Section provides a brief overview of 
MPEG-21 Multimedia Framework, existing web 
caching algorithms, and the digital item adaptation 
scheme. 
 
2.1 MPEG-21 Multimedia Framework 
 
MPEG-21 defines a open framework for 
multimedia delivery and consumption for use by all 
the users/players in the delivery and consumption 
chain. MPEG-21 is based on two essential concepts: 
the Digital Item which is the fundamental unit of 
distribution and transaction of multimedia object and 
the concept of Users interacting with Digital Items. 
The Digital Items can be considered as the “what” of 
the Multimedia Framework. For example, a Digital 
Item can be a video collection, a music album, and a 
photo. Users can be considered the “who” of the 
Multimedia Framework. 
 
The goal of MPEG-21multimedia framework is 
to support users to exchange, access, consume, trade 
and otherwise manipulate Digital Items in an efficient, 
transparent and interoperable way. MPEG-21. defines 
the schemes and elements that are needed to support 
the multimedia delivery chain.  
 
Within MPEG-21, multimedia systems that 
propose to facilitate a wide range of actions involving 
“Digital Items”. In a multimedia system, there are 
many kinds of content, and many possible ways of 
describing multimedia object to reflect its context of 
use. This presents a strong challenge to lay out a 
powerful and flexible model for Digital Items which 
can accommodate the myriad forms that content can 
take. In MPEG-21, the Digital Item Declaration 
specification provides such flexibility for representing 
Digital Items. For example, we can take a “web page” 
as a Digital Item. A web page typically consists of an 
HTML document with embedded “links” to various 
image files such as JPEGs and GIFs, and possibly 
contains some layout information such as CSS 
(Cascading Style Sheets). It is straightforward to 
inspect a HTML document and deduce that this 
Digital Item consists of the HTML document itself, 
plus all of the other resources upon which it depends. 
 
The purpose of the Digital Item Declaration 
(DID) specification is to describe a set of abstract 
terms and concepts to form a useful model for 
defining Digital Items. Within MPEG-21, a Digital 
Item is the digital representation of “a work”, which is 
acted upon managed, described, exchanged, and 
collected. The goal of the MPEG-21 Digital Item 
model is to be as flexible and general as possible, 
while providing for the “hooks” that enable higher 
level functionality.  The MPEG-21 Digital Item 
model can be served as a key foundation in the 
building of other MPEG-21 elements such as 
Identification & Description or IPMP. This model 
specifically does not define a language in and of 
itself.  Instead, the model helps to provide a common 
set of abstract concepts and terms that can be used to 
define such a scheme, or to perform mappings 
between existing schemes capable of Digital Item 
Declaration, for comparison purposes. 
 
The Digital Item Declaration (DID) technology 
is described in three parts: 
 
• Model: The Digital Item Declaration Model 
describes a set of abstract terms and concepts 
to form a useful model for defining Digital 
Items. Within this model, a Digital Item is the 
digital representation of “a work”, and as 
such, it is the thing that is acted upon 
(managed, described, exchanged, collected, 
etc.) within the model.  
 
• Representation: description of the syntax and 
semantics of each of the Digital Item 
Declaration elements, as represented in 
XML.  
specify the characteristics of a User, 
including preferences to particular media 
resources, preferences regarding the 
presentation of media resources, and the 
mobility characteristics of a User. 
Additionally, description tools to support the 
accessibility of Digital Items to various users, 
including those with audio-visual 
impairments, are being considered. 
 
• Terminal Capabilities: Description tools that 
specify the capability of terminals, including 
media resource encoding and decoding 
capability, hardware, software and 
system-related specifications, as well as 
communication protocols that are supported 
by the terminal. 
 
• Network Characteristics: Description tools 
that specify the capabilities and conditions of 
a network, including bandwidth utilization, 
delay and error characteristics. 
 
• Natural Environment Characteristics: 
Description tools that specify the location 
and time of a User in a given environment, as 
well as audio-visual characteristics of the 
natural environment, which may include 
auditory noise levels and illumination 
properties. 
 
• Resource Adaptability: Tools to assist with 
the adaptation of resources including the 
adaptation of binary resources in a generic 
way and metadata adaptation. Additionally, 
tools that assist in making 
resource-complexity trade-offs and making 
associations between descriptions and 
resource characteristics for Quality of Service 
are targeted. 
 
• Session Mobility: Tools that specify how to 
transfer the state of Digital Items from one 
User to another. Specifically, the capture, 
transfer and reconstruction of state 
information will be specified 
 
3. System Architecture 
 
In order to have a more efficient content adaptation 
over broadband Internet, a new proxy system 
architecture should be designed for MPEG-21digital 
items. The adaptation proxy contains following 
components: (1) Description Adaptation Engine, (2) 
Resource Adaptation Engine, (3) Description Cache, 
and (4) Resource Cache. 
Figure 1 depicts the abstract proxy system 
architecture for transcoding MPEG-21 digital 
items. 
 
The operational scenario is as follows. When a 
user wants to perform digital item adaptation, the user 
connects with one of the adaptation proxy with user's 
usage environment description. After the user's device 
has connected the proxy system, the user sends a 
request through the adaptation proxy for fetching 
remote digital item. The adaptation proxy then sends 
the request to the remove server that stores the digital 
item. After the digital item is full transmission, the 
adaptation proxy performs content adaptation 
according to the user's usage environment description. 
The description adaptation engine is responsible for 
converting the digital item from original one to 
adapted one according to the user's usage environment 
description. The resource adaptation engine is 
responsible for transforming multimedia object from 
the original one to adapted one according user's device 
and networking environments. After the digital item is 
adapted, the adapted digital item description is cached 
in the description cache, and the adapted digital item 
resource is cached in the resource cache. Meanwhile, 
the adapted digital item is forward to the user. Figure 
1depicts the abstract proxy system architecture for 
transcoding digital items in MPEG-21 space. 
 
4. Algorithm 
 
This section presents a caching algorithm that is 
based on the content's transcoding cost and users' 
usages. The detailed consideration and design of the 
proposed caching algorithm is depicted and discussed. 
 
4.1 Adaptation Cost Control Policy (TCC) 
 
The Adaptation Cost Control (ACC) policy aims 
at maximizing the satisfaction of user by caching only 
those objects that have a higher adaptation cost ratio 
than others. ACC associates every object i with an 
adaptation cost ratio ACi, which correlates the 
transcoding cost TCi in retrieving the object i with the 
size Si (measured in bytes) of the object. The value of 
algorithm is that some objects are brought into the 
cache and may never be requested again. It is also 
known as the pollution problem. The pollution 
problem is caused by objects with a short period of 
sudden popularity increase and occupy the cache 
spaces. These stale objects may never be accessed 
again and still persist in the cache for a long time 
because their priorities remain high. LFU with 
Dynamic Aging (LFUDA) uses dynamic aging to 
accommodate shifts in the set of popular objects. The 
dynamic aging policy simply increments the cache age 
when evicting objects from the cache – setting it to the 
key value of the evicted object. LFUDA has the 
property that the cache age is always less than or equal 
to the minimum key value in the cache. This prevents 
the need for parameterization of the policy, which 
LFU-Aging requires. By adding the cache age factor, 
the influence of previously popular objects from 
polluting the cache is limited. The 
ACC-DS-Frequency with the dynamic aging policy is 
depicted as follows: 
 
10,)))1(*()*((*)(
maxmax
<<+−+= ii
i
i
i
i WLWT
T
W
AC
AC
FiPr  (5) 
 
Parameter L is the age factor that starts at 0 and 
is updated when evicting objects from the cache. 
Parameter L is set to the priority value Pr(evicted) of 
the evicted object. Parameter L is defined as follows: 
)(iPrmin)Pr(evictedL
cachei∈
==   (6) 
 
Every time an object i is evicted from the cache, 
the value of parameter L is calculated. L is the same as 
the priority value of the evicted object i. When a new 
object j is put into cache, the priority of new object j 
that replaces the object i is calculated from Equation 
(5) with the parameter L. In this way, the priority of 
new object j is bigger than parameter L. Every time an 
object is evicted from the cache, the parameter L as 
well as the priority of new object j are increased. At 
some point, the priority of stale objects that stored in 
cache will become less than new object j because the 
stale objects do not increase their priority. The priority 
of new object j gets high enough than these ”long time 
no accessed” objects.  
 
Therefore, the stale objects with high priority 
value get replaced if they are not accessed again. In 
this way, the pollution problem can be solved because 
these objects will not persist in the cache. The ”aging” 
mechanism prevents proxy cache from pollution. 
Using the aging technique, our caching policy can 
avoid the pollution problem. Figure 2 shows the detail 
algorithm of our adaptation cost caching policy. The 
operation of the caching policy is as follows: 
 
 
Figure 2 The Adaptation Cost Caching Policy 
 
1. At time t, if the client sends a request to 
acquire the desired object, then the proxy examines 
the cache (priority queue) to identify the requested 
data. 
 
2. If the requested data is already stored in the 
cache, then the proxy re-calculates the priority of this 
data. The proxy will update the priority of this data 
according to the ACC-DSFrequency with the dynamic 
aging policy. The counter of hit is plus one. At the 
same time, the proxy sends back the requested data to 
the client. 
 
3. If the requested data are not in the cache, then 
the proxy sends a request to the server. After the proxy 
gets the requested data, it calculates the priority of this 
data and then puts it into the cache according to this 
priority. The counter of miss is plus one. At the same 
time, the proxy sends back the requested data to the 
client. 
 
4.4 Caching Reward 
 
In this Section, a definition of cache reward is 
Algorithm: The Adaptation Cost Caching Policy 
Symbols definition: 
 CacheQueue: the priority queue that stores the cache data 
 RequestData: the data that are requested by users 
 L: the aging factor 
End definition 
while a request arrives do 
 // Checking cache is empty or not. If cache is empty, retrieves 
 // the requested data from server and then stores the requested 
 // data into cache. 
 if CacheQueue.empty() then 
 Server.Retrieve(RequestData); 
 RequestData.priority= CalculateProfit(RequestData); 
 CacheQueue.push(RequestData); 
 Miss++; 
 else 
 if CacheQueue.find(RequestData) then 
 TotalHitByte=TotalHitByte+RequestData.bytes; 
TotalHitReward=TotalHitReward+RequestData.cost; 
RequestData.priority= CalculateProfit(RequestData); 
CacheQueue.update(RequestData); 
Hit++; 
else 
Server.Retrieve(RequestData); 
while StorageSize <= CalculateCacheQueueSize() do 
if EnableAging==true then 
L=(RequestData.top()).priority; 
end if 
CacheQueue.pop(); 
 end while 
RequestData.priority= CalculateProfit(RequestData); 
CacheQueue.push(RequestData); 
Miss++; 
end if 
 end if 
end while 
 
