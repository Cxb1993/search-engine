dh
dr
0%
5%
10%
15%
20%
25%
30%
0.00 0.25 0.50 0.75 1.00
CSM cone ratio
average cone ratio
max cone ratio
Vxy
ξ
β
α
P
Q
(a) symmetric cone (b) histogram of cone ratio (c) ray-line intersection (d) asymmetric cone
Figure 1: Configurations of a symmetric cone (a) and an asymmetric cone (d), the histogram for cone ratios
(b) and illustration of our ray-line intersection algorithm (c).
1
2
3
4
5
6
7
8
1
2
3
4
5
(a) cone step mapping (b) anisotropic cone mapping
Figure 2: Space leaping procedures for cone step mapping (a) and anisotropic cone mapping (b).
2.1 Cone step mapping
CSM belongs to the category of space leaping. Its bounding volume is a symmetric cone. For each texel,
a cone is computed associated with it. It describes the largest empty space above that texel which can
be bounded by a cone. This cone’s tip is the texel itself. Hence, such a cone is described by a single
parameter, cone ratio. The cone ratio ξ is defined as the ratio between the radius and the height of the
cone, i.e. ξ = dr/dh, measuring the opening angle of the cone as shown in Figure 1(a).
The cone ratio is within the range of [0, 1]. It is partly because we can obtain better precision by
mapping 256 levels of texture to a smaller range. More importantly, in practice, cone ratio is unlikely
larger than one. For example, the blue curve in Figure 1(b) is the histogram of cone ratios for the brick
texture. Most cone ratios are clustered below 0.25.
As shown in Figure 2(a), once we have the cone ratio for each texel, the exact intersection of the viewing
ray and the displacement map can be found by repeatedly performing 2D ray-line intersections. Dummer
used a more expensive procedure for finding 2D ray-line intersection. Here, we present a simpler and faster
method as shown in Figure 1(c). Because of similar triangles, we know that α : β = ξ : |Vxy|, where Vxy
is the vector PQ’s projection on the x− y plane of the tangent space, P and Q are entry and exit points.
Hence, the ratio γ = α/(α+β) equals ξ/(ξ+ |Vxy|). Therefore, we should march γVxy in the texture space.
The procedure halts when either the solution converges or loop count exceeds a maximum limit.
2
20 steps 30 steps 40 steps
Figure 4: Comparisons of convergence between CSM and ACM. The top row shows convergence of CSM
and the bottom row is for ACM. Note that, on the discontinuity border in the middle, CSM at 20 steps
appears too flat. However, ACM at 20 steps is already very close to the final solution.
2.3 Adaptive hierarchical preprocessing
The preprocessing of ACM is pretty straightforward. For each texel, we expand the search radius incremen-
tally for each sector. For each expansion, several new texels are considered. The cone ratio is updated if the
new texel offers a lower cone ratio. The current minimal cone ratio also provides the short circuit condition
to terminate the search. This process takes on average 0.03 to 0.2 seconds for a 256×256 displacement
map depending on its content. To apply ACM to dynamic displacement maps, we propose an adaptive
hierarchical preprocessing algorithm (Algorithm 1) to speed up the process. We first build a pyramid for
the displacement map using the max operator. That is, the height of the parent equals the maximal height
of its four children. This is for maintaining the property that parents have more conservative cone ratios
than their children. This property guarantees that, for a time-critical application, children can simply
copy parent’s cone ratio for conservative bounding volumes. The convergence could be a little slower with
conservative ratios, but it is always correct. The ACM for the top level is calculated as usual. When
calculating the cone ratios from top to bottom, we first compare whether a texel’s height is similar to its
parent’s height. If so, then it simply copies its parent’s cone ratio. Otherwise, it performs regular cone
ratio search, but with its parent’s cone ratio as the initial short circuit condition. This often terminates
the search very quickly since we already have a very close estimation.
In practice, we found that it is often sufficient to set a high threshold for similarity in the above
algorithm. It is because the resulted ACM is just more conservative but won’t incur errors. Thus, we
found the adaptive method seldom reaches the finest level. Table 2 shows the preprocessing time for three
different displacement maps. The adaptive method offers more than 10x speedup. The processing time is
now below 0.01 seconds, making it possible to apply ACM to dynamic displacement maps.
4
(a) displacement map (b) ACM texture (c) rendering
Figure 5: ACM texture. (a) The brick displacement map. (b) The computed 4-sector ACM texture. (c)
Rendering of mapping brick over a plane using ACM.
(a) parallax occlusion mapping (b) relief mapping (c) cone step mapping (d) anisotropic cone mapping
Figure 6: Comparisons of several inverse displacement mapping methods. Notice that, even with many
steps (around 200), there still exist stair-stepping artifacts in the renderings of parallax occlusion mapping
(a) and relief mapping (b) due to sampling aliasing at the high-frequency part of the displacement map. At
the same time, because many steps are used, the frame rate drops to only around 25 fps. Both cone step
mapping (c) and anisotropic cone mapping (d) do not exhibit such artifacts. However, anisotropic cone
mapping method is around two times faster than cone step mapping. The rendering speed for anisotropic
cone mapping is around 200 fps on an NVIDIA 7900 when rendered at a resolution of 1024× 768.
many steps are used, the frame rate is around 25 fps. CSM and ACM have less artifacts. The frame rates of
CSM and ACM are around 100fps and 200fps respectively. In Figure 7, instead of fixing rendering quality,
we fixed the frame rate at 60fps and compare the rendering quality of these four method. Again, CSM and
ACM have much less artifacts than POM and RM.
Figure 8 shows an example of applying dynamic displacement on a simple water simulation. We generate
displacement maps at each time instance using simple sinusoids. The synthetic displacement map is then
processed by our adaptive algorithm to obtain its ACM texture. These processes are performed on CPU.
The displacement map and its ACM texture are then fed to the rendering system on GPU.
In this project, for mapped geometry, we present an extension towards more accurate intersection for
real-time inverse displacement mapping. Our adaptive hierarchical preprocessing algorithm allows us to
render scenes with dynamic displacement maps in real time. In addition, the proposed anisotropic cone
mapping provides better cone ratio than cone step mapping because of the use of asymmetric cones.
Therefore, it usually requires less steps to converge. As a result, it is faster than CSM to reach a target
quality. As relaxed cone stepping, combination of ACM with binary search could further reduce artifacts
with a faster speed. In addition, our hierarchical preprocessing approach can be extended to handle relaxed
cone step mapping, greatly reducing the overhead of preprocessing.
6
Figure 9: BSSRDF needs to consider the lights’ contributions from a neighborhood.
(a) geometry model (b) vertex map (c) normal map
Figure 10: The geometry image for the bunny model (a). The map in the middle stores positions of vertices,
and the map on the right stores the normals for vertices. They are displayed in geometry image format.
(Image courtesy of Gu.)
image are the grid points on the regular topology. The regular topology structure makes it easy to store extra
information of vertices in the texture space, and to pass those textures as parameters to a programmable
graphics hardware. Its square domain texture space covers the whole model instead of using a mutli-chart
format. It also makes the processing simpler.
The regular topology structure of the geometry image makes it very suitful for hardware rendering.
In the geometry image space, neighboring pixels are also the neighboring vertices. Thus, we don’t need
to record the topology, and we can get neighborhood information easily. Further, geometry image not
only maps geometry onto a square image domain but also attempts to minimize distortion and keeps the
distance ratio between vertices, which is helpful to avoid artifacts. Based on these features, we propose a
method for translucent material rendering on GPUs.
The only problem with geometry images is that the boundaries of a geometry image texture are irregular
(as shown in Figure 11). We need to record the boundary connectivity before rendering, and take care of
the boundaries carefully when we adopt geometry images for translucent material rendering. It costs more
effort to make the boundaries seamless. Praun et al. solved the problem perfectly by mapping a model onto
a sphere [8], and then they could cut it properly (as shown in Figure 12). A sphere is a simple geometry
that is easy to unfold by “X-cut” and still keeps its boundary connectivity simple. Thanks to this idea,
we can render the translucent effect without suffering the boundary problem. The limitation of spherical
parametrization is that it only works for genus-zero models.
8
C1 = zr
(
σtr +
1
dr
)
, C2 = zv
(
σtr +
1
dv
)
α′ = σ′s/σ
′
t is the reduced albedo.
σtr =
√
3σaσ′t is the effective transport extinction coefficient.
σ′t = σ
′
s + σa is the reduced extinction coefficient.
σ′s = reduced scattering coefficient (given)
σa = absorption coefficient (given)
r = ‖xi − xo‖ is the distance from xo to the point of illumination.
dr =
√
r2 + z2r is the distance to the real light source.
dv =
√
r2 + z2v is the distance to the virtual source.
zr = 1/σ
′
t is the distance from the the real source to the surface.
zv = 1 + 4/3A is the distance from the the virtual source to the surface.
A = 1+Fdr
1−Fdr
Fdr = −
1.440
η2
+ 0.710
η
+ 0.668 + 0.636η
η = relative refraction index (given)
3.4 Locality of Subsurface Scattering Effects
Subsurface scattering is a global effect; however, light’s distribution exponentially falls off and this limits
the volume it can affect. It largely can be represented as a local effect. According to its locality, we adjust
our sampling policy. Instead of uniform sampling, denser samples are given for nearby points, and sparser
samples are for the areas distant from the point under evaluation. Dachsbacher et al. took the similar
sampling policy [2].
3.5 Precomputing The Dipole Approximation Rd(r)
Evaluating the multiple scattering term is a very costly process. Fortunately, dipole approximation for
multiple scattering only depends on the distance between the incident and leaving points of light rays.
It allows us to tabulate the evaluation results, requiring only a linear storage. The models have been
normalized, so we sample Rd(r) with interval 0.001 between r = 0.0 ∼ 1.0. This gives 1000 samples totally.
Precomputing dipole approximation significantly reduces the rendering time with a very low extra storage
for tabulation. It is very cost-effective.
3.6 BSSRDF Image Filter Design
In general, the filter is good to be large enough to cover all regions where Rd is significantly large. However,
large filters are expensive. Thus, we use a hierarchical filter based on a mip-map of the irradiance texture.
Figure 13 illustrates the filter design. In the filter, there are three rings of sampling points, surrounding
the given shading point, at three levels of the min-map. The inner sampling points are on the top level of
the min-map; the outer sampling points are on the lowest level of the min-map, and so on. By design, the
10
(a) BRDF rendering of Gargoyle (b) BSSRDF rendering of Gargoyle
(c) BRDF rendering of Beethoven (d) BSSRDF rendering of Beethoven
Figure 15: Comparisons between BRDF rendering and BSSRDF rendering.
4 Conclusions
In this project, we study how to utilize GPU’s programmability and computation power to enable real-time
realistic rendering for complex geometry and complex materials. More specifically, we focus on real-time
rendering for mapped geometry and translucent materials. For the former, we have proposed to use
anisotropic cones as bounding volume for more accurate ray-surface intersection. In addition, we have
proposed a hierarchical preprocessing method for obtaining anisotropic cones, enabling applications with
time-varying displacement maps. For the later, we have proposed to use geometry images to reparameterize
surface. In such a parameterization, BSSRDF rendering can be effectively performed using simple image
filtering.
Below are papers and thesis produced by this project.
• Yu-Jen Chen, Zong-Nan Shen, Ying-Chieh Chen, Chun-Fa Chang, Yung-Yu Chuang, Jieh Hsiang.
Extensions to Inverse Displacement Mapping: Towards More Accurate Silhouette and Dynamic Dis-
placement. Symposium on Interactive 3D Graphics and Games, Redwood City, February 2008.
• Wei-Ren Lin and Yung-Yu Chuang. Real-Time Multi-Layer Translucent Material Editing. Proceed-
12
ings of Computer Graphics Workshop 2008.
• 林威任. 多層次半透明材質之即時編輯. 國立台灣大學資訊工程學研究所碩士論文. 2008.
• 陳譽仁. 非對稱圓錐映射貼圖. 國立台灣大學資訊工程學研究所碩士論文. 2007.
• 林宗勳. 基於幾何圖像之即時半透明材質繪圖. 國立台灣大學資訊工程學研究所碩士論文. 2007.
References
[1] Nathan A. Carr, Jesse D. Hall, and John C. Hart. Gpu algorithms for radiosity and subsurface scatter-
ing. In HWWS ’03: Proceedings of the ACM SIGGRAPH/EUROGRAPHICS conference on Graphics
hardware, pages 51–59, Aire-la-Ville, Switzerland, Switzerland, 2003. Eurographics Association.
[2] Carsten Dachsbacher and Marc Stamminger. Translucent shadow maps. In Proceedings of Eurographics
Symposium on Rendring 2003, pages 197–201, 2003.
[3] Jonathan Dummer. Cone step mapping. Unpublished draft available at
http://www.lonesock.net/files/ConeStepMapping.pdf, 2006.
[4] Xianfeng Gu, Steven J. Gortler, and Hugues Hoppe. Geometry images. In SIGGRAPH ’02: Proceedings
of the 29th annual conference on Computer graphics and interactive techniques, pages 355–361, New
York, NY, USA, 2002. ACM Press.
[5] Henrik Wann Jensen and Juan Buhler. A rapid hierarchical rendering technique for translucent mate-
rials. ACM Transactions on Graphics, 21(3):576–581, 2002.
[6] Hendrik P. A. Lensch, Michael Goesele, Philippe Bekaert, Jan Kautz, Marcus Magnor, Jochen Lang, and
Hans-Peter Seidel. Interactive rendering of translucent objects. Computer Graphics Forum, 22(2):195–
205, June 2003.
[7] Tom Mertens, Jan Kautz, Philippe Bekaert, Hans-Peter Seidelz, and Frank Van Reeth. Interactive
rendering of translucent deformable objects. In EGRW ’03: Proceedings of the 14th Eurographics
workshop on Rendering, pages 130–140, Aire-la-Ville, Switzerland, Switzerland, 2003. Eurographics
Association.
[8] Emil Praun and Hugues Hoppe. Spherical parametrization and remeshing. ACM Trans. Graph.,
22(3):340–349, 2003.
14
副審委員知道外審委員的身分外，外審委員彼此仍然保持匿名性，以求公正。如果審查委員
之間無法達成共識，主審委員將再另外邀請一至兩位議程委員會之成員擔任額外審查委員
(extra reviewer)，對該論文提出評審意見，提供意見供主審委員做出決定，後答辯階段之後就
是議程委員會議來決定每一篇論文的接受與否。 
     議程委員會議假美國洛杉磯展示中心(Los Angeles Convention Center)舉辦，委員會主席
Kurt Akeley 首先說明會議程序，會議將由全體會議(plenary session)及個別會議(breakout 
session)所構成。在個別會議中，論文的主審委員與副審委員將私下溝通是否要接受該論文，
如果無法達成共識，則另尋議程委員會之成員來擔任額外審查委員，額外審查委員則須閱讀
論文並提出自己的意見，最後主審委員將召集副審委員及所有額外審查委員一起討論並達成
論文接受與否的共識。由於要保持匿名性，個別會議由主審委員召集，於會場的不同角落舉
行，所以其他的議程委員也不知道每一個個別會議所討論之論文為何。在全體會議中，則由
全體議程委員與會，首先將外審評分過低的論文不予討論，其他的論文則逐篇討論，首先將
所有與該篇論文有利益衝突(conflict)的議程委員請出會場，接著主審委員將簡介該論文的內
容、優點、缺點及最後之決定。如果尚未能做出決定，則可以提出需要額外審查委員之要求。
兩天的會議即由全體會議及個別會議交互進行直至對所有論文做出決定為止，最後主審委員
還要為每一篇論文提供一說明(summary)以供作者了解該論文接受或拒絕的關鍵所在。此次會
議共計有 320 篇論文投稿，最後共接受 59 篇論文。 
    筆者於 8/11 至 8/15 則參加 ACM SIGGRAPH 國際電腦圖學暨互動技術年會，該會議是電
腦圖學研究的最高殿堂，本次會議假美國洛杉磯展示中心(Los Angeles Convention Center)舉
辦，大會估計共有兩萬餘人與會。除電腦圖學研究之論文(technical paper)發表外，尚有短期
課程(classes)、最新研究簡短報告(Talks)、研究海報展示(poster)、論壇(panel)、新科技展示(New 
Tech Demos)、電腦動畫展示(computer animation festival)、藝術作品展示(art gallery)及展覽
(exhibition)等精采活動。此次會議筆者共計參與一篇研究海報展示(Animating Lips-Sync 
Speech Faces with Compact Key-Shapes)。 
    本次會議共計五天，會議第一天(8/11)，筆者上午參加主題為”Great Failed Ideas in 
Production”的 production session，下午則參加 Pixar 創辦人兼 CEO Ed Catmull 的 keynote speech
及”Smile for the camera”的 talk。當天晚上的 fast forward 議程，則由各論文的作者利用 50 秒
