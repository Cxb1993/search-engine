圖 3 SLE的編碼器方塊圖
是否為特殊的序列，然後將這些資訊位元進行編碼
(Decision); (3) 傳送編碼後的碼到匯流排上(Output)。
2.2序列式匯流排反相編碼 (Serial Bus-Invert coding)
我們提出的第二種低功率編碼方法，稱之為序列式
匯流排反相編碼 (serial bus-invert coding, SBI)。 這個
方法的主要精神是應用了匯流排反相編碼的觀念
[3]，然而我們加入的同位元是加在資料封包後面，而
不增加匯流排上的位元線。 假設每一組封包有 u筆字
組，且每一筆字組包含了 v位元。則編碼演算法敘述如
下：
(1) 在時間 i上，計算目前匯流排字組與下一筆資料字
組之間的漢明距離 N
(2) 如果漢明距離 N大於 v/2，則令 INVi-1 = 1，且匯流
排字組等於反相後的資料字組 (if N >v/2,匯流排字
組 ii DZ  )
(3)否則， INVi-1 = 0，且匯流排字組等於資料字組
( ii DZ  )
(4) 儲存 INVi-1的值，在一組封包裡面，重複步驟 1到
步驟 3，直到 u 筆字組都編碼完成
(5) 然後在送出 u 筆字組後，再傳送 INV 字組，這個
INV字組將指示 iZ 是否要反相
(6) 解碼的演算法，則是根據 INV 字組來決定匯流排
字組是否反相
圖 4 是一個 u=4 的 SBI 方法的範例，其中
01234 ,,,, ZZZZZ 為編碼後的字組。
接下將介紹 SBI 的硬體設計。為了減少硬體的面
積，我們選擇了 u=4的 SBI來實現，稱之為 SBI4 編碼，
首先規劃硬體為兩大部分，如圖 5 所示，一部分是控
制單元 (Control Unit)，另一部分是資料路徑 (Data
Path)。 控制單元負責傳送控制信號給資料路徑，而資
料路徑則根據控制信號來執行相關的操作，這些操作
包括 (1) 將資料字組送給“Bus-invert Circuit”，這個
電路是進行匯流排反相編碼的處理，將匯流排字組傳
送到匯流排上。
圖 4序列式匯流排反相編碼的封包內容 (u=4)
圖 5 序列式匯流排反相編碼的編碼器方塊圖 (u=4)
而且將反相位元送給“INV Register”儲存起來 (匯流
排反相編碼和儲存反相位元); (2) 等到匯流排字組傳
送完後，再傳送 INV 字組到匯流排上 (反相位元的輸
出)。
2.3 序列式串音迴避編碼 (serial crosstalk avoidance
coding)
一條線的傳輸延遲時間可以定義如下 [2]
  01  pTdelay (1)
其中 λ是耦合電容(coupling capacitance)對基板電容
(substrate capacitance)的比例，且 }4,3,2,1{p ，τ0是沒有
串音干擾的延遲時間，且一條線的最差延遲時間為
(1+4λ)τ0。
參 考 文 獻 [4,5] 所 提 出 的 FTC(4,3) (forbidden
transition condition)編碼方法，他們用組合電路來完
成。所編出來的碼 (codeword)，每一組碼都可以避免
相鄰位元的反向變化(01到 10或 10到 01)。
我們提出這個序列式串音迴避編碼，在這個方法裡
面，資料是以封包(package)的形式來傳輸，每筆封包
包含3筆字組，且每筆字組有3個位元。我們將編碼步
驟整理如下:
(1) 初始化 00 DZ 
(2) 在時間 i上，我們檢查下一筆資料 Di與目前匯流排
上的資料 Zi-1之間的轉態有沒有滿足 FTC
(3) 如果轉態滿足 FTC， 則設定 INVi-1 = 0，並且設定
ii DZ 
(4) 否則令 INVi-1 = 1並且將輸入資料的第二個位元反
相後送到匯流排上 ( ),,(),,( 210210
iiiiii dddzzz  )
(5) 儲存 INVi-1 ，重複步驟 2到步驟 4，直到封包內的
資料都編碼完成
(6) 在 Z3，先將 INV1複製到 INV2 。如果 Z
2到 Z3之間
的轉態沒有滿足 FTC，則 INV1 將要反相
( 11 INVINV  )
(7) 解碼的演算法，則是根據 INV 字組來決定匯流排
字組是否反相
3.2 硬體的實現與模擬
我們使用硬體描述語言 Verilog 來進行硬體的製
作，在合成的 CAD 工具部分則是用 Synopsys 公司所
提供的 Design Compiler。合成的元件庫是使用聯電
(United Microelectronics Corporation)0.18 微米的製
程。在量測編碼器和解碼器的功率消耗時，我們是輸
入 1000筆隨機的字組，然後使用 Prime Power這套軟
體來測量。最後我們將匯流排用 HSPICE的 RLC傳輸
線模型 (transmission line)來模擬，並且考量匯流排線
為第 4層金屬線 (metal-4)，寬度為 0.28微米，最小間
距為 0.28 微米，其中耦合電容與基底電容的比例λ
=1.87而且τ0=1.38ns。
如圖 10(a)所示，我們先建立一個簡單的 AMBA
的環境 [10]，裡面包含有 2 個測試介面控制器 (test
interface controller)、 2 個僕人端 (default slave、
internal memory)、1個仲裁器、1個解碼器、2個多工
器。我們使用的傳輸形式為漸進式區塊傳輸模式
(INCR)。然後將我們提出的編解碼器放到主人端與僕
人端之間，如圖 10(b)所示。
表 1 是各種編碼技術在 32 位元匯流排的比較，
在編碼解器面積上，我們提出的方法面積大於匯流排
相編碼，那是因為我們需要將一些資訊位元儲存起
來，所以需要用到暫存器來完成，也因此在循序邏輯
的消耗也較多，雖然在編解碼器的面積消耗比匯流排
相編碼大，但是因為我們的方法是將同位元是加在資
訊位元後面，而不增加匯流排的線，所以我們可以節
省匯流排的面積。
在匯流排上的功率損耗，SBI4可以節省 18.9%，
比匯流排相編碼的 11%還好，然而 SLE 只有節省
5.6%。但是我們的編碼方法是序列式編碼，所以如果
匯流排寬度越來越大時，SLE 的編碼效率能可以維持
這個水準。延遲時間的測量是用 Design Compiler，所
有電路的操作頻率都設定在 50M赫茲，而在錯誤控制
碼方面，並列式的漢明碼可以節省 43%，而 RS(15,13)
碼與 RS(7,5)碼則分別節省 42.9%、31.1%，綜合以上的
模擬結果，雖然我們提出的演算法中，編解碼器的面
積大於匯流排相編碼和並列式漢明碼，但是我們的編
碼方法，可以在不增加匯流排面積的情況下，而節省
的功率消耗與匯流排相編碼和並列式漢明碼相同的水
準。
在串音迴避編碼方面，我們與保護線編碼
(shielding)，複製編碼(duplication)與 FTC(4,3)，和我們
所提的架構 SCAC(4,3)做比較，它們都是將匯流排上的
延遲時間限制在(1+2λ)τ0。
在速度上由於雖然字組經過編碼後，在匯流排上
傳輸的速渡加快了，但是加上了編解碼器必須多一些
額外的編碼時間。在編解碼器的延遲上，SCAC(4,3)
電路需要一些額外的暫存器，所以在編解碼器的延遲
比較嚴重。在面積上，SCAC(4,3)的面積明顯大於其它
架構，但是在整體的面積上是最小的，因為它有效的
減少了匯流排的數量。在匯流排的平均消耗能量上，
SCAC(4,3)改善未編碼時匯流排的消耗能量，且與其它
架構比較下也是最佳的。
圖 10 (a) 簡單的 AMBA平台 (b) 編解碼器與系
統的連接
在本研究中，我們提出了序列式匯流排編碼，用
來降低匯流排的功率消耗與串音干擾。並且我們將這
幾種編碼實現在一個簡單的 AMBA平台上。實驗結果
顯示，我們提出的低功率編碼，可以降低匯流排的功
率消耗約 5.6% ~ 19%，而提出的串音迴避編碼，可以
減少匯流排的傳輸延遲。我們實現的 Reed-Solomon
碼，可以節省匯流排的功率 31% ~ 43%。在未來的研
究中，我們期望更縮小編解碼器的面積，並且整合低
功率與串音迴避編碼成為一個完整的統一編碼架構。
四、參考文獻
[1] Dake Liu and C. Svensson, “Power consumption
estimation in CMOS VLSI chips,”IEEE Journal of
Solid-State Circuits, vol. 29, no. 6, pp. 663–670, June
1994.
[2] S. R. Sridhara and N. R. Shanbhag, “Coding for
system-on-chip networks: a unified framework,”
IEEE Trans. VLSI Systems, vol. 13, no. 6, pp.
655-667, June 2005.
[3] M. R. Stan and W. P. Burleson, “Bus-Invert coding
for low power I/O,”IEEE Trans. VLSI Systems, vol.
3, no. 1, pp. 49-58, March 1995.
[4] B. Victor and K. Keutzer, “Bus encoding to prevent
crosstalk delay,”in Proc. ICCAD, pp. 57-63, Nov.
2001.
[5] S. R. Sridhara, A. Ahmed, and N. R. Shanbhag,
“Area and energy-efficient crosstalk avoidance codes
for on-chip buses,”in Proc. ICCD, pp. 12-17, Oct.
2004.
[6] B. Arazi, A commonsense approach to the theory of
error correcting codes, Cambridge, MA: The MIT
Press, Feb. 1988.
[7] Star-Hspice Manual, Avant, CA, June 2001.
