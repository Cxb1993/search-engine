 2
中 文 摘 要 
本計畫提出一個利用彩色派翠網(Colored Petri Net, CPN)來分析 SELinux 作
業系統中安全政策檔案中資訊流(Information flow)的方法。SELinux 作業系統中
的安全政策檔內具有數千條安全規則，使得一般系統管理員很難確定當他/她們
修改某些安全規則時，是否仍能保證原來預定的安全目標。為解決此問題，我們
針對 SELinux 的安全政策檔提出一個正規的資訊流模型，而且設計一個查詢語言
來幫助系統管理者表示他/她期望（或不希望）發生的資訊流。我們發展出一套
方法來將 SELinux 的安全政策與安全目標分別轉換為彩色派翠網的政策與查詢
圖形，同時我們也開發一個稱為 SELAnalyzer 的程式來幫助系統管理者自動驗證
SELinux 的安全政策是否設定正確。在本研究中，我們舉出兩個例子來說明此方
法及 SELanzlyzer 程式的用處 
關鍵字：作業系統、彩色派翠網、資訊安全政策、安全目標、資訊流英文摘要 
 
英 文 摘 要 
In this project, we studied a Colored Petri Nets (CPN) approach to analyze the 
information flow in the policy file of Security-Enhanced Linux (SELinux). The 
SELinux access control decisions are based on a security policy file that contains 
several thousands of security rules. It becomes a challenge for policy administrator to 
determine whether the modification of the security policy file conforms to the 
pre-specified security goals. To address this issue, we proposed a formal information 
flow model for SELinux security policy file, and presented a simple query language to 
help administrators to express the expected/unexpected information flow. We 
developed a method to transform the SELinux policy and security goal into Policy 
CPN Diagram and Query CPN Diagram. A tool named SELAnalyzer that can 
 4
give future research directions in Section 5. 
2. Verification Tool and Process 
In order to verify the user maintained SELinux security policy with user 
specified security goal, we need a verification tool which can automatically parse the 
policy, parse the query, construct the model to simplify the policy, and deduce the 
model automatically to conclude that whether the security policy satisfies the security 
goal or not. We propose the tool, named SELAnalyzer, to responds for theses tasks. In 
SELAnalyzer, CPN is used to model the security policy and query separately, into the 
Policy CPN Diagram and Query CPN Diagram. Allow relation is the majority part of 
SELinux policy, and it is the most important relation in the information flow. Hence, 
the SELAnalyzer only focus on allow relations and model information flow with 
allow relations in Policy CPN Diagram. 
3. CPN diagram transformation 
3.1 Policy CPN Diagram Transformation 
 First of all, the allow relation will be extracted from SELinux policy and 
transformed into Policy CPN Diagram. For each allow relation, the source type and 
destination type will be transformed into CPN place with the name as the SELinux 
type name. Each of the permission in the allow relation will be transformed into place 
named “RL” if this is a read-like permission and “WL” if write-like permission. For 
example, the following two allow relations (1) and (2) will be transformed into Policy 
CPN Diagram as Figure1. 
allow p1, p2:c { read, write }; 
allow p1, p2:c { read ,write }; 
(1) 
(2) 
 6
SELinux type place. In different user query situation, there will be different condition 
in “if” decision of the arc expression. If the condition was satisfied for any 
information flow passes through, then returns the altered token to SELinux type place. 
If the condition was not satisfied, then drops this token. The information flow will be 
terminated after the token was dropped, and this information flow will be excluded 
from the result information flow set for the user query.  
user_t :(WL,+,!(fsadm_t)):fixed_disk_device_t; (4) 
Then the Security Query Diagram for (4) will be modeled as Figure 3. 
3.3 Diagram Combination 
 After the Policy CPN Diagram and Query CPN Diagram were transformed 
successfully, the Combined CPN Diagram should be established. First, the SELinux 
type in Query CPN Diagram should be replaced by the type with the same name in 
Security Policy Diagram. Second, add the “security” transition and “end” place at the 
end of the SELinux type in query. Finally, put initial tokens on all query types and the 
SELinux type that corresponding to the first query type. For example, if (5) and (6) 
are only two policy statements in SELinux policy, and the security goal is defined as 
(4). 
Figure 3. Security Query Diagram for (4) 
 8
traverse many other types and then flows to fsadm_t. The second “+” has the similar 
meaning. After the goal is specified by user in positive representation, SLAT 
improperly converts it to the negative representation as: 
!(t=user_t & E[t !=fsadm_t  t=∪  fixed_disk_device_t &  
EF (k=TRUE & t= fixed_disk_device_t)]) 
This negative representation means that the information flow which starts from 
user_t, flows through fsadm_t, and flows to fixed_disk_device_t is the illegal 
information flow. However, if the administrator consider that the information flow 
which starts from user_t, pass trough fsadm_t, and flows to fixed_disk_device_t is the 
illegal one, then SLAT is unable to come out the right verification. PAL, unlike SLAT, 
has to transform the security goal to a security query program. For example, for the 
same security goal (7), the query of PAL is: 
init(fdisk_automaton, [user_t, R, U]). 
trans(fdisk_automaton,[T0,R0,U0],(Class,Perm),[T1,R1,U1],[neq(T1,fsadm_t)]). 
trans(fdisk_automaton,[T0,R0,U0],(Class,Perm),[fixed_disk_device_t,R1,U1], []). 
final(fdisk_automaton, [fixed_disk_device_t,_R,_U], []). 
Note that there is a neq operator in the second line of above query. The above 
program means that administrator wants to “find all information-flow which starts 
from user_t and flow to fixed_disk_device_t without passing through fsadm_t”. The 
disadvantage of PAL is that its query is much more complicated than SLAT’s and ours. 
It looks more like a small program than a simple query.. In addition, the analysis 
engine behind PAL and ours are very different. PAL use the logic program to deduce 
the results, while ours uses the CPN to perform the analysis. The graphic property of 
CPN graph and the data type design in the token flown from place to place can give 
users more useful information in the course of query formulation and security analysis.  
 10
model a security query. In addition, the graphic property of CPN model allows the 
administrators to easily use and comprehend the analysis results. Our contribution in 
this paper includes: (1) proposed a model to transform the allow-rule police statement 
to Policy CPN Diagram, (2) designed an intuitive as well as powerful query language 
to express the information flow that the administrators may concern, and (3) proposed 
a method to combine the Policy CPN Diagram of security policy file and Query CPN 
Diagram of user query in respective as an Combined CPN Diagram to let our CPN 
engine to perform analysis automatically. 
Currently, we only analyze allow rules. We assume that the SELinux types don’t 
change in the operation. However, the types do change in the real world with type 
transition rules .The address of other rules will be the direction of our future research. 
Moreover, we only consider about one query a time. The research of multi-query 
analysis and multi-query conflict resolution is also the interesting future research. 
References 
1.Peter A. Loscocco, Stephen D. Smalley, Patrick A. Muckelbauer, Ruth C. Taylor, S. 
Jeff Turner, John F. Farrell., The Inevitability of Failure: The Flawed Assumption 
of Security in Modern Computing Environments. Proceedings of the 21st National 
Information Systems Security Conference (1998) 303-314. 
2. NSA SELinux, http://www.nsa.gov/selinux/ 
3. TCSEC, http://www.radium.ncsc.mil/tpep/library/rainbow/5200.28-STD.html 
4. P.A. Loscocco, and S.D. Smalley, Meeting critical security objectives with 
Security-Enhanced Linux. In proceedings of the 2001 Ottawa Linux Symposium 
(2001) 
5. M. Archer, E. Leonard and M Pradella, Towards a Methodology and tool for the 
Analysis of Security-Enhanced Linux Security Policies. NRL Memorandum Report 
