英文摘要 
Low power microprocessor architecture has become the one of the most hot-spot researches 
in embedded systems. Most power reduction techniques have focused on microprocessor 
components, such as BTB, cache, and ROB. Only few studies have focused on the development 
of the low-power register file architecture. Lack of such design causes that the size of a register 
file cannot be efficiently extended in an embedded microprocessor, and becomes a performance 
bottleneck.  
There are some issues in designing low-power register file architecture： 
(1) If we take care of only the hardware design, we cannot efficiently reduce dynamic power 
consumption, caused by run-time execution for individual programs. 
(2) If we take care of only the software solution, we may need a high-complexity algorithm for 
compilers to generate low-power execution code. 
This is a one-year project, which the goal is to apply the hardware/software co-design 
principle to design low-power register file architecture. At first, we study the trade-off between 
power consumption and performance for register files in an embedded processor. Then we 
partition the whole framework into the hardware architecture and the software compiler. For the 
hardware architecture, we propose an optimized circuit to control multiple supply-voltages for 
register files. The jobs include the multi-supply-voltage management, and the register-content 
backup management. For the software compiler, we propose a dynamic power-controlling 
instruction set, and insert these instructions into programs by compiler annotation. All designs 
require to be integrated into an embedded-processor platform to evaluate system-level power 
consumption and performance.  
By realizing this project, the team crews can get solid experience in designing an embedded 
system, and also, they can study the importance of system-level power/performance evaluations. 
 
 
 
 
Keywords: microprocessor, low-power register file architecture, multi-supply-voltage 
management, register-content backup management, power-controlling instruction set, 
power-saving code annotation 
Also, both of them support out-of-order-execution for lower CPI. 
There are two implicit problems to adopt these features in an embedded processor. First, it 
may require more hardware resources, such as registers, functional units etc, in a processor to 
execute a great deal of operations. Second, it may require some smarter techniques to 
dynamically resolve data dependency. Many efficient approaches have been proposed to resolve 
above problems in conventional processors. For example, register renaming is used to allow 
instructions to write their results from functional units into any free registers for resolving name 
dependency due to out-of-order execution. Another example is speculation execution. It predicts 
program execution directions after branch instructions, and fetches the instructions speculatively 
for execution from predicted directions. 
The reorder buffer (ROB) and the register file are the two most critical components to 
implement above features. The ROB maintains a precise state after an interrupt or exception 
occurs, and flushes the instructions along wrong-execution path. The register file holds the values 
committed from the ROB, and waits for references by later instructions. A register would become 
free if its name is redefined in the later instruction. 
Unfortunately, such cooperation will make serious leakage power for register file. This is 
because in order to avoid missing committed values from the ROB, the register file has to stay in 
full-power mode in any pipeline stages. Some unused registers, therefore, waste energy, including 
the registers that would store the values has not been produced yet, or store the values never be 
referenced again in the future. So we can conclude that there are two kinds of register’s leakage 
power occurring during program execution. The first one, we call it the Intra-Pipeline Leakage 
Power, occurs between the instruction’s decode stage and the commit stage. During this interval, 
the register stores nothing, but has to wait for instruction commitment. The second one, we call it 
the Seldom-Used Leakage Power, occurs when the register value is no longer to be used, or 
would be used again after a long period. In this case, all nearby instructions (subsequent 
consumers) that need that value as source operands have already read it (no matter from the ROB 
or from the register), or no consumer instructions appear again for a long period. More seriously, 
some short-lived register-values [9] cause registers never being referenced once (i.e., 
seldom-used), even after instruction decode stage, but these registers still have to be allocated and 
wait for those values’ commitment. 
In this project, we propose a pure hardware approach to reduce the leakage power of register 
file, such that some complex features (e.g., out-of-order execution, speculation execution, etc) 
can be applied to high-end embedded processors. In the proposed approach, we design a 
monitoring scheme in the pipeline datapath to identify the timing of powering up or powering 
down a register. The objective of this monitoring scheme is to find out which register-values 
causing leakage-power (described above), and to maximize the benefits from register 
supply-voltage changes. The supply-voltages to a register in this paper include the active mode (1 
Volts), drowsy mode (0.3 Volts), and destroy mode (0 Volts), as defined in [3]. 
文獻探討 
Several researches save leakage power by using software approaches [3][6][7]. These 
approaches use some specific registers, which called the power state registers, to control supply 
misprediction occurs, we should power on all drowsy registers to restore the precise state for the 
pipeline. If all branch instructions have been committed, we can power off all of the drowsy 
mode registers into the destroy mode. 
To implement the approach discussed above for saving the intra-pipeline leakage power, we 
need to modify the architecture of the ROB to monitor instruction sequence, and add a 
voltage-scaling controller for each register. For the ROB, we add two bits to each ROB entry. 
One bit is used to indicate that the destination register of this entry has been redefined or not. 
Another bit is used to identify whether a branch instruction exists between this entry and the later 
redefined entry (i.e., speculative redefined instruction). Because the ROB is a CAM-like (Content 
Addressable Memory) structure, both of these two bits can be updated by each incoming 
instruction. For each register, we use a two-bit power-state-register to record its supply voltage. 
The value of the power-state register will be determined by a voltage-scaling controller which 
performs voltage scaling strategies described above according to the ROB’s monitoring results.   
By such a pure hardware approach, we found that there is no performance penalty in writing a 
value into a register with DVS controls because we power on the destination register before an 
instruction commits. Also, there is no performance penalty in reading an operand from a register 
because we power off only the registers that has been redefined in the ROB, and power on all 
registers that are in the drowsy mode when a branch misprediction occurs. 
 
(2) Approach for the Seldom-Used Register Leakage Power 
To save the seldom-used-register’s leakage power, we use a decay approach [11] to identify 
which registers are seldom-used. We setup a period (decay cycle) to observe whether a register 
has been accessed or not during this period. If a register has not been accessed during this period, 
we can suppose that it is a seldom-used register and then power down this register in the drowsy 
mode to save leakage power. (It cannot be powered down to the destroy mode further because no 
redefined instructions occur in this period.) It is very easy to implement the decay approach by 
using a counter to setup the decay period and adding an extra bit for each register to indicate 
whether it has been accessed or not in the period. 
The problem of this approach is that the register we have power-down after decayed may 
need to be read again in the future. In this case, we need one cycle delay to power on this register 
in the active mode. The decay period we select may impact such performance penalty. A large 
decay period can avoid a register from being powered-down before next reference, but waste 
much leakage power to wait for decay. On the other hand, a small decay period may save more 
leakage power, but results in performance penalty described above. Therefore, the setup of the 
decay period would be a trade-off, and could be selected by individual program. 
結果與討論 
Figure 1 shows register file power consumption for integer benchmarks and floating point 
benchmarks. In integer benchmarks, we found the leakage power of intra-pipeline save 7%~40% 
power. In floating benchmarks, we save 42~69% intra-pipeline leakage power. Our Intra-pipeline 
approach performs well in floating point benchmarks than integer benchmarks due to longer 
 
Figure 3. Register file power consumption under different ROB sizes  
 
推廣及運用的價值 
本技術可有效解決目前嵌入式處理器中暫存器耗電量過大的問
題。根據實驗結果發現本技術與其他類似技術相比, 約可減少 21% 
~67%的電量, 同時效能犧牲可控制在 7%以內, 因此非常適合將此
技術推廣至嵌入式低電耗暫存器架構設計。 
※ 1.每項研發成果請填寫一式二份，一份隨成果報告送繳本會，一份送 貴單位
研發成果推廣單位（如技術移轉中心）。 
※ 2.本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。 
※ 3.本表若不敷使用，請自行影印使用。 
