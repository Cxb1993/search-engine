摘要 
本計劃提出了一個利用區域點特性，有效率地將未組織之點集合進行表面重建的演算
法。本方法不但完全自動化、有效率而且更具一般性。除了點集合之外，本方法不需要其
他額外的資訊，而其演算過程主要是改善 Gopi and Krishnan 所提出之表面重建演算法，
因此，本方法亦繼承了該演算法高效率的特性。事實上，Gopi and Krishnan 所提出的表
面重建演算法雖可減少其執行時間，但卻失去重建模型時所需之一般性，為了解決這個問
題，本研究便提出利用區域點特性的方法，進一步改善其一般性的問題。經過實驗證明，
本研究不但允許重建更一般化的點集合，而且能夠呈現更好的重建結果。本研究的主要貢
獻有三，包括：一、本方法能夠正確地重建出表面具有尖銳特性、非常接近的面以及點集
合非均勻分佈之模型。二、重建的效果更好。三、不需要使用者設定任何參數即可執行。
而上述之貢獻則主要是經由兩個步驟而來︰一、進行鄰近點集合的修改。二、以其平滑性
依序進行表面重建。 
 4
1 Introduction 
 
Surface reconstruction is the problem of finding the surface from unorganized 
point sets, obtained from 3D ranged scanner or ranged data. It is an important topic of 
research in computer graphics and Computer Aided Design (CAD). The challenge in 
this problem is to reconstruct desired result with wide variety of different types of 
points sets. The point set to be reconstructed must be sufficiently dense in order to 
capture the features of the surfaces of the original model. With sufficient density it is 
relatively easy to reconstruct smooth parts. For non-smooth parts, like sharp features, 
are difficult to be reconstructed even with sufficient density. Undesired or 
non-manifold triangulation would occur at parts with: 1.varying density or 2. sharp 
features or 3.relatively near surfaces. In this paper, our algorithm only takes the point 
sets as inputs. Each point is locally projected onto the best fit plane of its neighbor 
points, then triangulation is performed in a propagating manner until all points are 
visited. 
 
Our algorithm can be divided into following steps:  
1. Finding neighbor points of each point. (in section 3) 
2. Finding the normal of each point.  (in section 4) 
3. Modification of neighbor points of each point.  (in section 5) 
4. Propagating triangulation in a smoothness directed order.  (in section 6) 
 
2 Related work 
 
Hoppe et al. [3] presented an algorithm to reconstruct the surface as the zero set 
of a signed distance function. Sharp features of the surface cannot be reconstructed. 
 
The algorithm presented by Edelsbrunner & Mücke [4] is highly sensitive to the 
user input parameter α. 
 
Gopi & Krishnan [1] presented an efficient algorithm, but it requires the 
assumption that the input point sets have sufficient density, which is not always the 
case especially at sharp features. Our method make modification to this method to 
allow for more general type of point sets. 
 
Turk & O’Brien [5] presented a method to model surfaces with RBFs (Radial 
Basis Functions). Their approach is restricted to small point sets. Carr at el. [6] make 
it feasible for large point sets. Their approach can automatically fill parts where there 
 6
accurate than using k-nearest neighbor with constant k and more efficient than using 
k-nearest neighbor with adaptive k. In contrast with [4], for which the radius of the 
α–ball are to be tried out until a desired result is obtained, defining radius as r = µm is 
better since it is calculated automatically and adaptively. But the distance from p to its 
nearest point sometimes is not a good measure to estimate the density of neighbor 
points of p. For example, if the distance from p to its nearest point is extremely small 
(relative to the density), the radius calculated would be very small. The resulting 
neighbor points would be under-sampled for p. The worst case is that only the nearest 
point itself is the neighbor point of p. The attempt in finding radius adaptively is to 
meet the need that a point set might not have a uniform density throughout. In Table 1, 
it is shown that adaptive radius defined as r = µm is only suitable for point sets with 
uniformly changing density, but normally point sets are not distributed in such way. 
 
We observed that most point sets contains parts with distribution of type 4, i.e. 
we cannot just simply use the distance to the nearest point to estimate the surrounding 
density of each point. However, it is reasonable to assume an overall average density. 
Instead of using adaptive radius for each point, we use a fixed radius for all points in a 
point set. We set the radius to be the largest radius among all radii calculated by r = 
µm. To avoid outlier points, we take r = (mean of all radii) + 3 * (standard deviation 
of all radii). The neighbor points obtained by this way tend to be a little over-sampled. 
In step 3, it is further discussed that how this problem is solved. By this way, the 
neighbor points are found automatically (no user input parameter) and efficiently 
while avoiding under-sampling. We us µ = 2.0 for all point sets tested, and it turns out 
to work fine. 
 8
 
 
The main idea is to propagate normals in the order such that the next normal to 
be propagated is the one having the smallest enclosing angle (regardless of the 
orientation). In point sets with relatively (with respect to the density) near surfaces as 
shown in Fig 1, it is possible that the propagation jumps to a different surface. The 
resulting normals could still have inconsistency after the normal propagation. As 
shown in Fig 4(a), point set Knot is one such case. We use the same normal 
propagation algorithm except that we use a different cost function for the minimum 
spanning tree. Our new cost function is designed so that the cost is large for 2 points 
of different surface even if their normals have a small enclosing angle. This correctly 
prevents normal propagation from jumping to different surfaces. Our cost function is 
defined as: cost(p,q) = | d · (normal of p) | + | d · (normal of q) | , for which d is the 
normalized vector from p to q. As shown in Fig 2, edges formed by points on different 
surfaces are assigned large costs thereby prevents propagation from jumping to 
different surfaces. The propagation order with the new cost function is in shown in 
Fig 3. 
 
  (a)      (b)      (c) 
Fig 1: Error occurs when there are near surfaces. (a) Normals before propagation. (b) The order 
of propagation. (c) After normal propagation there is still inconsistency in orientation. 
Riemannian graph Å nodes = all points in S +  
      edges = all edges formed by each point to its neighbor points 
For all edge (p,q) 
 cost(p,q) Å 1 - | normal of p · normal of q | 
Find MST according to the cost calculated 
Start from a seed point, set it as the root node of the MST 
Traverse down MST in a depth-first order 
During the traversal from parent node p to child node q 
 If normal of p · normal of q < 0 
       normal of q Å -1 * normal of q 
 10
is not a desired result, since it is easy to form triangulation incorrectly by forming 
edges crossing difference surfaces. The goal in this step is to remove neighbor points 
of p which does not belong to the surface for which p belongs to. Since the orientation 
of normals of all points is consistent after step 2, we can now use the direction of the 
normals to determine if 2 nearby points are on different surfaces. We modify the 
neighbor points of p by simply removing neighbor points whose normals have 
enclosing angles ,with the normal of p, greater than 90 degrees. In cases like that in 
Fig 5, it correctly removes points belongs to the different surfaces. This indirectly 
prevents undesired triangulations which crosses different surfaces. Fig 6 shows that 
the point set Knot would has surface crossing triangles if neighbor points are not 
modified. 
 
The normal of each point are to be recalculated since the neighbor points has 
been changed. The accuracy in the normals is needed in step 4. 
 
 
(a)     (b)     (c) 
Fig 5. Modification of neighbor points. (a) Both point q and s are not on the same surface as p. 
But both points are incorrectly included as neighbor points of p. (b) Normals of q and s have enclosing 
angles ,with the normal of p, greater than 90 degrees. (c) Both point q and s are removed from the 
neighbor points of p. 
 
 (a)  (b) 
Fig 6: Example Knot. (a) Contains triangles crossing different surfaces due to that neighbor 
points include points from different surfaces. (b) Problem is fixed after modification of neighbor points 
by removing points belongs to different surfaces. 
 12
Our algorithm for triangulation: 
 
 
The main modification to the triangulation algorithm is the order of propagation. 
Our algorithm propagates the triangulation in a smoothness directed priority order 
instead of the breadth-first order in [1]. A priority queue is maintained for the 
boundary points which have not yet been chosen as the reference point. The key of a 
point p in the priority queue is the angle between the normal of p and the normal of q, 
for which point q was the reference point which previously formed a triangle with p. 
By propagating in this order, the triangulations for smoother surfaces are done first. 
Not only does this prevent undesired triangulation at sharp features, but it also 
generates much smoother triangle meshes. This smoothing effect can be seen in Fig 7. 
Note that our method of smoothing does not actually changes the location of the 
points, we achieve this by a careful order of triangulation. 
 
There are 3 more modification to the algorithm in [1]. In step 1, the normals are 
already calculated. So, we use that calculated normals instead of estimating it as in [1]. 
By using the calculated normals,  the priority order can be calculated more 
accurately. In stead of using an angle criterion to prevent forming sharp triangles, we 
adopted the localized Delaunay triangulation in [2]. In our algorithm, the reference 
point can also form triangles with points outside the sphere of influence (i.e. not in the 
neighbor points of the reference point), if there is an exiting edge between it and the 
reference point. This is to close small holes produced at parts with low density. 
 
Start from a seed point 
Propagate triangulation in the smoothness directed order 
Project neighbor points onto the best fit plane 
Remove occluding points 
Sort points by angle (in 2D) 
Remove neighbor points not satisfying Delaunay check 
Form triangles around the reference point with the neighbor points and the  
 existing boundary edges 
 14
 (a)  (b) 
 (c)  (d)  
(e) 
Fig 8: (a) Bunny: 35947 points, 71865 triangles, 47.2 sec;   (b) Fandisk: 16475 points, 32916 
triangles, 18.9 sec; (c) Cat: 10000 points, 19965 triangles, 9.4 sec; (d) Knot: 10000 points, 19989 
triangles, 9.9 sec; (e) Holes: 4000 points, 8006 triangles, 3.8 sec 
 
 (a)  (b) 
Fig 9: Showing the result by original algorithm in [1]. (a) Knot: 10000 points, 18715 triangles, 
8.1 sec, µ = 2.0; (b) Knot: 10000 points, 19449 triangles, 7.9 sec, µ = 3.0 
 
8 Conclusion 
 
We have introduced an efficient surface reconstruction algorithm which only 
takes the point set as input. No more additional information, like point normals, is 
needed. Further, it requires no user input parameter. It correctly reconstructs wide 
varieties of point sets. No non-manifold occurred at sharp features and near surfaces. 
The resulting triangle mesh is smooth than that in [1]. The resulting triangle meshes 
only contains the original points in the point sets. 
 
