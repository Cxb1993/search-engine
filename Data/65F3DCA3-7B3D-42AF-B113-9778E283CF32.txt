2 
 
Keywords: Memory system testing, data 
cache testing, instruction cache testing, data 
TLB testing, software-based testing. 
 
2、計畫說明 
記憶元件普遍的存在所有的嵌入式系
統、SOC 產品當中，而其中的隨機存取記
憶體(RAM)，構成了記憶體系統的主要部
份。作為應用程式、韌體在執行期間的儲
存元件，其功能的正確性關乎系統的可靠
度，因為不論是程式本身、或是其所運算
的資料，都會進入隨機存取記憶體。若是
記憶體本身有缺陷則會造成程式或資料在
讀取的過程中被破壞，最終可能造成系統
誤動作。 
另外由於記憶體佔用晶片面積的比例
往往比其他的邏輯電路更大，例如在著名
的Alpha處理器中有接近 1/3的晶片面積是
由快取記憶體所佔用，而 StrongARM 
SA110的晶片面積則有90%被RAM元件佔
據[1]。這意味著他們在生產過程中出現瑕
疵的機率也更大。因此檢測隨機存取記憶
元件的重要性，並不亞於其他邏輯運算部
份(如處理器)的測試。 
傳統上測試隨機存取記憶體的方案，
以 March-based 演 算 法 搭 配 硬 體 的
BIST(Built-in Self Test)電路來達成。由表一
可以看出，March 系的演算法可以在 O(n)
的複雜度下提供相當合理的測試速度，並
且支援眾多的錯誤模型(fault model)；而
BIST電路就是將組成March演算法的讀寫
動作，以及所需要的背景資料 (data 
background)以硬體加以實現的邏輯電路。 
 
表一、不同測試方法 
演算法 Fault model 複雜度 
測試 1M記
憶體需時 
GALPAT AF,SAF,TF,CF O(n^2) 2.5天 
MATS++ AF,SAF,TF O(n) 0.63秒 
March C- AF,SAF,TF,CF O(n) 1.0秒 
MOVI AF,SAF,TF,CF O(nlog2n) 3.3小時 
 
BIST電路由其對測試演算法的彈性作
區別，可以進一步分為下列三大類：純硬
體(hardwired)、微碼控制(microcode-based)
與處理器控制(processor-based)。純硬體的
BIST電路可提供最快的測試速度，但由於
其動作已固定於電路中，所以無法改變所
使用的演算法，微碼控制的 BIST架構提供
了修改測試演算法的彈性，但修改的程度
仍受限於 BIST 電路所具備的硬體資源
(microcode 的容量限制)[2]。前兩種架構對
於系統中不同記憶體模組(例如快取和TLB)
需要個別獨立的 BIST 電路以及相對應的
輸入/輸出針腳，這對於在晶片不同部位散
佈了大量獨立記憶體模組的 SoC 晶片來
說，會使 BIST額外耗用的面積和腳位成為
成本上的一大負擔。 
第三種方案是由處理器控制的
BIST(processor-based BIST)架構[3][4]，其
基本精神就是將 BIST 電路整合進系統的
匯流排當中，由處理器以程式來控制 BIST
電路的行為，因此不但可以有最大程度的
演算法修改彈性，同時也可以透過匯流排
去測試系統中不同部位的獨立記憶體模
組，大幅降低了面積和腳位的成本。這樣
的測試方式和我們先前在「適用於 SOC測
試平台之內嵌式微處理器之設計與測試」
計劃中所發展出來的技術[5]有著一樣的基
本精神。但是經由對於前述計劃所獲得的
研究成果的評估，我們認為用處理器的運
算能力結合適當的軟體測試程式，可以更
進一步的將 BIST 電路(或其他測試所需的
電路)的硬體需求最小化，甚至完全取代。
本計劃的目的即為結合先前由處理器測試
所取得的技術基礎，進一步發展在隨機存
4 
 
軟體式測試方案，可達到 100%的記憶體測
試效率，99.13%的控制邏輯測試效率。 
 
快取記憶體是記憶體系統中最重要的
元件，其主要目的在於暫存微處理器先前
使用過的資料，使得下次有機會存取時可
直接而省去冗長的系統記憶體讀取時間，
以提升微處理器系統的整體效能。快取記
憶體並不像一般記憶體可以直接進行存
取，故利用軟體進行測試之複雜度較一般
系統記憶體高。我們針對記憶體系統中的
直接對映式(Direct-mapped)資料快取，設計
了一套軟體式測試方案，能分別對其中的
記憶體元件如：資料記憶體、TAG 記憶體
等，及邏輯元件如：快取控制器、多工器、
TAG 比較器等元件進行完整的測試。其測
試的方法如圖三： 
Test 
Methodology
March 
Algorithm
Structural 
methods
Data Memory 
(Data unit)
Tag Memory 
(Tag Unit)
PA Tag Memory 
(PA Tag Unit)
Multiplexer 
(Data Unit)
Dirty 
unit
Valid 
unit
Tag Address 
Comparator
Cache 
Controller
Functional 
methods
Memory Logic module
 
圖三、記憶體系統各元件的測試策略 
 
針對不同元件的特性，我們將測試策
略分成三種：(1)記憶體元件利用 Software 
March algorithm進行測試。(2)快取控制器
利用其功能之特性進行測試。(3)其他邏輯
元件則利用其結構之特性進行測試。以下
針對各元件之測試進行說明： 
(1)記憶體相關元件：包含 TAG、Data
和 Physical address TAG(PA TAG)三個元
件，透過 Software March algorithm來進行
測試。其中 TAG及 PA TAG特性造成無法
直接達成March演算法所需要的讀取/寫入
動作，必須以間接的方式達成。以 TAG記
憶體為例，TAG 是存取位址的一部分，
March 演算法之讀取運算是透過快取記憶
體 Read hit的時的 TAG比較達成； March
演算法之寫入運算的動作是透過 Read miss
所造成的快取 Entry 取代同時會替換掉對
應的 TAG記憶體。March演算法所需的位
址遞增或遞減則可透過控制存取位址中的
Index欄位來達成。 
 March 演算法中的讀取必須有判斷資
料正確性的功能，我們利用人工的快取/記
憶體資料矛盾來達成此一功能，如圖四所
示，當我們將快取記憶體及系統記憶體相
同位址[T,i,x]分別設定成 D 及!D 時之後再
進行快取的讀取。若 TAG沒有錯誤會讀到
快取記憶體內的 D值，若 TAG有錯則會讀
到系統記憶體中的!D 值，進行快取的讀取
可得到March所需的判斷資料正確性功能。 
 
 
圖四、採用人工資料矛盾之March檢查法 
 
 為了使所發展的 Software March 演算
法能套用到各種不同類型的快取記憶體，
我們針對各記憶體元件開發出所需的
March運算對應的假指令，若對應到不同的
微處理器 ISA 僅需要將對應的假指令轉換
成實際 ISA即可。 
表二、各記憶體元件的測試假指令 
Memory 
Module Op. Instruction Sequence 
Data 
RAM 
wDB DC; WM([T,i,x],DBn) EC; R([T,i,x],DBn) 
rDB R([T,i,x],data) 
Tag RAM 
wDB DC; WM([DBn,i,x],D) EC; R([DBn,i,x],D) 
rDB DC; WM([DBn,i,x],!D) EC; R([DBn,i,x],D) 
PA  
Tag RAM 
wDB EC; W ([Tn,i,x],D) DC; WM([Tn,i,x],!D) 
rDB EC; CLEARi 
6 
 
 
對於此資料快取而言，我們發展的測
試程式在 RAM 記憶體模組的部分可以達
到跟傳統 March-based 演算法搭配硬體 
BIST相同的效果，而針對控制相關的邏輯
元件也有和 Scan insertion 相當的測試效
能。 
 
3.3 發展一套針對資料轉譯查詢緩衝器
(Data TLB)的軟體式測試方案，可達到
100%的記憶體測試效率，97.29%的錯誤涵
蓋率。 
 
TLB 是位於 MMU 當中的一個快取結
構，其主要目的為將一部份的分頁表(page 
table)暫存於 MMU內，使得 MMU可以在
每次快取命中的時候快速的將處理器送出
的虛擬位址轉換成實體位址，傳送到匯流
排作資料的存取。由於本實驗使用的處理
器的快取記憶體採用哈佛架構，所以MMU
當中的 TLB 也會區分為 Data TLB 和
Instruction TLB，分別用來存放轉譯資料快
取和轉譯指令快取所需的分頁表。本實驗
採用上述成果1當中所描述的ARM相容平
台，該平台包含了一組相容於 ARM 9 的
MMU協同處理器，以及搭配的兩個 TLB。
我們成功的開發出以 ARM 指令集撰寫的
軟體測試程式，來完成對平台中 MMU 內
部的 data TLB的測試。 
由於 TLB本身的功能在性質上相當接
近快取記憶體，因此我們用以實現軟體測
試的基本概念也和上述成果 2 中測試快取
的方式是一樣的，利用人工製造的矛盾來
辨識讀取到的數值，是被快取住的複製版
本還是在主憶體中的原始版本，進而了解
記憶體模組是否如我們所預測的動作。在
測試快取記憶體時，我們只要製造主記憶
和快取內容的矛盾，即可比較出測試結果
是否如預期；而 TLB所儲存的內容是記憶
體位址，因此我們在測試時所製造的矛
盾，實際上是主記憶體中的分頁表內某個
項目，和該項目被暫存在 TLB中的版本在
內容上的差異。有了這樣的差異，會使得
同一個虛擬位址被轉譯成兩種不同的實體
位址，端看他參照的分頁表項目是 TLB中
的版本還是在主記憶體中的版本。若正確
的資料只被放置在其中一個版本所產生的
實體位址，則我們可以確認 TLB的寫入和
讀取動作是否有因為記憶體的缺陷，而產
生不必要的 TLB失誤(TLB miss)，進而因
為這樣的失誤而讀取到錯誤的數值。 
 
TLB
MMU
T PPNA T,i PPNB
tag data address data
Page table
index
i
Data from the 
TLB
 VA[T,i,o] from CPU
圖六、TLB的結構與動作機制 
 
我們使用的 ARM平台，具有一個直接
對映式(Direct-mapped)結構的 Data TLB，
其基本結構如圖六所示，區分為存放虛擬
位址的 TAG欄位和存放轉譯後實體位址的
PPN 欄位，因此要確認這個記憶體模組的
正確性，必需分別對直接對這兩個欄位作
march演算法所描述的讀寫動作。如同快取
記憶體，TLB 自身也有一套管理控制電
路，我們同時也以軟體測試的方式完成了
這些電路的測試，下面將本次實驗成果分
為三大部份介紹： 
 
(1) TAG欄位的測試 
由於 TLB當中的 TAG所記載的實際上
就是被轉譯的虛擬位址中的較高位元的部
8 
 
動作的假指令： 
表七、PPN測試用假指令 
Operation Instruction Sequence 
wDB INVi ; WM([T,i,o],D) 
rDB WM([T,i,o],!D) ; INVi ; 
RM([T,i,o],!D) 
 
實際的測試程式的產生，是由上述假指
令轉換為 ARM組合語言，在實驗平台上執
行耗用的時間和空間，以及最終得測試效
率列於下表八： 
表八、Data TLB的 PPN欄位測試成果 
Fault 
model 
Fault 
Coverage 
程式大小 
測試時間
(cycle) 
SAF 100% 
3.39 KB 228,538 
TF 100% 
AF 100% 
CFst 100% 
CFin 100% 
CFid 100% 
 
(3) TLB控制邏輯的測試 
除了 RAM-based元件以外 TLB也包含
一套用來控制記憶模組的專用控制電路，
其中包括了 Controller, Tag comparator, 
Valid unit和一些多工電路。這套控制電路
被用來實現 TLB的寫入、讀取和管理等相
關機能。我們也利用和前述成果 2 當中類
似的方法，完成了測試過程，結果如下表
所列： 
表九、Data TLB的邏輯電路測試結果 
Component 
Hard 
Detected 
Total 
Faults 
Fault 
Coverage 
Controller 96 133 72.18% 
Tag Comparator 86 86 100% 
Valid Unit 1252 1254 99.84% 
Mux & others 36 38 94.74% 
Total Modules 1470 1511 97.29% 
 
3.4 發展一套針對指令快取 (Instruction 
cache)的軟體式測試方案，可達到 100%的
記憶體測試效率 (本計畫的突破處) 
 
快取記憶體是記憶體系統中最重要的
元件，其主要目的在於暫存微處理器先前
使用過的資料，使得下次有機會存取時可
直接而省去冗長的系統記憶體讀取時間，
以提升微處理器系統的整體效能。其指令
快取的測試複雜度與困難度是遠高於資料
快取記憶體，原因如下：[6][7][8][9][10] 
(i)   相對於資料快取記憶體，我們無法
在不影響測試結果的條件下單純的
使用指令的方式去讀/寫指令快取記
憶體。 
(ii)   相對於資料快取記憶體，其結果驗
證無法使用我們上述測試資料快取
記憶體的方式，利用快取與主記憶
體內容的不一致性去驗證其正確
性，因為直接對指令快取記憶體作
讀取的這個行為不管是在那個硬體
架構底下都是不會被允許的。 
(iii)   資料快取對於所寫入的內容不具有
限制性，無論寫入什麼內容都不會
中斷系統執行，所以可以容易的滿
足 March 的要求，放入所指定的
DB；但是指令快取記憶體並不具這
項特性，如果放入指令快取記憶體
的內容不是個合法的指令，那將會
導致整個系統的測試中斷，而且，
大部分的情況底，March 所要求的
DBs 都不會是合法的指令，這使得
指令快取的測試難度大大增加。 
 
為了解決上述所提出的問題，我們開
發出一套指令快取的測試方式與流程，其
10 
 
以下是測試的方式與流程： 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
將上述的指令與測試方式轉換成 ARM 組
合語言，在實驗平台所的最終測試結果列
於下表十： 
March / FM SOA March C-- (%) March C- (%)
SAF
TF
AF
Intra word
Inter word
CFst
Intra word
Inter word
CFin
Intra word
Inter word
CFid
Intra word
Inter word
100 100
100 100
98.23
100
100
100
100
100
100
100
100
100
100
100
100
100
100
100  
 表十、指令快取 TAG欄位測試結果 
 
而其中，SOA March C--中 AF不足的部分
為 SOA March C--這個演算法先天的限制
[11]。 
(ii) 指令快取 DATA Array 測試 
指令快取 Data Array的測試最困難的
點在於 March 所要求的 DB不屬於合法指
令，在這部分我們提出兩種解決的作法。 
 
(一) 利用相似指令取代 March 所要求的
DB:假設表十一的上方為 March 所規
定的 DB，可是其本身非合法指令，
所以我們在 ISA中尋找一個合法且相
似的指令當作替代性的 DB 來進行測
試，因為所使用的替代性 DB 與原本
的 DB 相似度會影響最後的測試結
果，所以我們定義相似的函數(eq.1)，
來量化所尋找的替代性 DB 與原本的
DB相似度有多高。 
 
0000_0000 0000_0000 0000_0000 0000_0000 
111_0001 1010_0000 1000_0000 0000_000 
表十一、DB及替代性的 DB 
 
其中，HD 代表 Hamming Distance, 
NBs 代表整個 word 的長度，以下是
一個簡單的例子。 
 
 
 
 
 
 
 
圖十一、SIM計算實例 
 
因為我們所測試的指令快取其
00000000_00000000_11111111_11111111   (1) 
00000000_11001100_11111111_00110011   (2)  
HD = 8, NBs =32 
SIM = 1 -  = 75%                   
March C- for instruction cache tag array 
// N = # of cache entry 
//L = # of line size 
 
DC;   //disable instruction cache 
//M1 element wDB 
for(i=0; i<N; i++) 
{     //write instruction in assign space 
 for(j=0; j<L ; j++) { 
            WM ([DB, i, j], I);  
} 
EC;   //enable instruction cache 
      ([DB, i, 0], I); 
     DC;   //disable instruction cache 
} 
 
//M2 element (rDB, w ) 
for(i=0; i<N; i++) 
{ 
for(j=0; j<L ; j++) { 
            WM ([DB, i, j], !I);  
} 
EC; 
E ([DB, i, j], I); 
C (R, r); 
DC; 
for(j=0; j<L; j++){ 
WM ([ , i, j], I); 
} 
EC; 
 ([ , i, 0], I); 
} 
………………………………………………………………… 
March elements M3, M4, M5 and M6 are implemented in a 
similar way 
………………………………………………………………… 
If(ERROR_Counter = = 0) 
 “Test Successful”; 
else 
 “Test Failed” 
12 
 
Immediate operand
Test Window
Immediate operand
Neighbor region
081632 24
圖十四、充分立即值的長度 
 
如圖十四所示，藉由重複測試邊界上
的位元來消除邊界上的問題，我們提出了
兩個規則。 
 
 
 
 
 
 
利用這兩規則即可解決降低測試
granularity所引起的邊界問題。此外，我
們對 Test Pattern(TP)做了一個廣義的定
義，讓這套測試方式可以簡易的移植到各
種平台架構上。 
 
 
 
 
DB  
0000_0000_0000 1111_1111_1111 
0000_1111_1111 1111_0000_0000 
1111_0000_1111 0000_1111_0000 
0011_0011_0011 1100_1100_1100 
0101_0101_0101 1010_1010_1010 
 
 
 
(二)少考慮了指令快取部分位置的偶
合關係。所以必須要再對這部分做額外的
測試。 
在移動立即值的位置後，從指令快取
讀出來的內容就不再是個合法的指令，所
以我們需要在 processor 及指令快取間放
置 Instruction Reorder switch，負責把
指令的立即值位置移回到原本的位置，讓
指令能夠順利被執行。(圖十五) 
32 2324 16 15 8 7 0
Instruction Reorder Switch
Control sigmnal
32 2324 16 7 0 15 8
 
圖十五、Instruction Reorder Switch 
 
為了能夠讓測試順利的進行，指令快
取的 cache line必須要有特別的安排： 
DB1 DBn JI DB2 ……… DS
 
 
這樣的安排是為了能夠及時 Disable 
Switch及跳回 Sequence Control Segment。 
下圖是部分的測試碼，從這裡可以清楚看
到測試流程跟對 Instruction Reorder 
Switch的控制。 
 
 
 
 
 
 
 
 
 
 
 
 
 
(1) IM – TW > 0 
(2) # of shift bits of test window is equal to TW 
IM (the length of Immediate Operand) 
TW (the length of Test Window) 
WL (word length) 
(3) ,  
    
 
表十三、 The DB and  for 12 bits immediate 
operand[12] [13] 
        
   
 
 
 
 
 
 
 
m1_loop_start 
  STR R4, [R2], #WordInc 
  SUBS R7, R7, #0x1 
  BNE m1_loop_start 
  STR R6, [R2], #WordInc 
  STR R5, [R2], #WordInc 
  SUB R2, R2, #0x20 
 
MRC p15, 0, R1, c1, c0, 0 
  ORR R1, R1, #IC_bit 
MCR p15, 0, R1, c1, c0, 0    ;Enable IC 
  MCR p15, 0, R10, c11, c0, 0  ;Enable reorder switch 
  MOV pc, R2              ;change the value of program counter 
  BIC R1, R1, #IC_bit 
  MCR p15, 0, R1, c1, c0, 0       ; disable IC   
Set the content of main memory 
14 
 
Methodology for In_System Testing of 
Processor Cache Tag Arrays,” IEEE 16th 
International On-Line Testing Symposium 
(IOLTS), 2010. 
[7] Janusz Sosnowski, “In System Testing of 
Cache Memories,” in the Proceeding of IEEE 
International Test Conference, 1995. 
[8]Janusz Sosnowski, “Improving Software 
Based Self-Testing for Cache Memories,” 
IEEE CONFERENCE on Design and Test 
Workshop, 2007.  
[9] Sultan M. AL-Harbi, Sandeep K. Gupta, 
“A Methodology for Transforming Memory 
Tests for In-System Testing of Direct Mapped 
Cache Tags,” Proceeding of the 16th IEEE 
VLSI Test Symposium 1998.  
[10] Stefano Di Carlo, Paolo Prinetto, 
Alessandro Savino “Software-Based 
Self-Test of Set-Associative Cache 
Memories,” IEEE Transactions on Computer, 
2011. 
[11] AD J. VAN DE GOOR, YERVANT 
ZORIAN, “Effective march Algorithm for 
Testing Single-Order Addressed Memories”, 
Design Automation with the European Event 
in ASIC Design,1993. 
[12] Ad J. van de Goor and lssam B.S. Tlili, 
“A Systematic Method for Modifying March 
Tests for Bit-Oriented Memories into Tests 
for Word-Oriented Memories,” IEEE 
Transactions on Computers, Oct. 2003. 
[13] Rob Dekker, Frans Beebker, Loek 
Thijssen, “A Realistic Fault Model and Test 
Algorithm for Static Random Access 
Memories”, IEEE Transactions on 
Computer-Aided Design of Intergraded 
Circuits and Systems, June 1990. 
 
 DISC 上，資料尋找的方法不再是載入到 main memory ，而是就近、就“大量”到 storage 去
做 comparisons. 由於大量 video資料的應用產生，很多傳統作法正面臨調整。 
 
 
 
Fig. 1 會場一角(Songdo ConvensiA, Incheon, Korea)， 與在會議上來自新加坡、美國、及來
自大陸的韓國留學生留影。  
 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/07
國科會補助計畫
計畫名稱: 適用於單晶片系統內微處理器記憶體系統的軟體式測試方案與測試自動化
計畫主持人: 陳中和
計畫編號: 97-2221-E-006-250-MY3 學門領域: 積體電路及系統設計
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
