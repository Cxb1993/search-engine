行政院國家科學委員會補助專題研究計畫■ 成 果 報 告   
□期中進度報告 
 
無編號樹狀結構比對問題之時間複雜度探討 
 
計畫類別：■ 個別型計畫 □ 整合型計畫 
計畫編號：NSC 99-2628-E-260-009-  
執行期間：99年 08月 01日 至 100年 07月 31日 
 
計畫主持人： 黃光璿 
 
計畫參與人員： 陳世群、陳奎昊、吳安迪、吳家森、張喬幃、戴君潔、
吳承育、黃裕文 
 
 
成果報告類型(依經費核定清單規定繳交)：■精簡報告  □完整報告 
 
本成果報告包括以下應繳交之附件： 
□赴國外出差或研習心得報告一份 
□赴大陸地區出差或研習心得報告一份 
□出席國際學術會議心得報告及發表之論文各一份 
□國際合作研究計畫國外研究報告書一份 
 
 
處理方式：除產學合作研究計畫、提升產業技術及人才培育研究計畫、
列管計畫及下列情形者外，得立即公開查詢 
          □涉及專利或其他智慧財產權，□一年□二年後可公開查詢 
          
執行單位： 國立暨南國際大學資訊工程學系 
 
中 華 民 國 一 百 年 十 一 月 十 五 日 
 圖表 1無編號樹 與其所對應之成對括弧表示式  
在定義 上任意兩個表示式之距離(metric)前，我們先定義其間的排比式(alignment)。
假定 、 ， 之排比式 定義如下： 
PA1： 與 分別為由 插入適當空白字元(space)所得之字串，並且 與 之長度
相同。令 且 。 
PA2：若 與 同時為括弧，則其必須同時為左括弧，或同時為右括弧。 
PA3：若 、 、 、 皆為括弧，其中 ，則 與 互為配子
若且為若(if and only if) 與 互為配子。 
我們稱 排比(align)到 ，其中 。在此要特別注意，在給定 與 的情形下，
其排比式並非唯一(unique)，如圖表 2所示，所列之排比式 僅為其中一種排比法。 
 
  
圖表 2 兩配對括弧表示式( 、 )與其排比式  
 接下來我們定義 與 間之「括弧重組距離」(rearrangement distance)，並以 表示
之。對於任意由 與 所產生之排比式 ，其間之重組距離 定義為 中對
到空白的括弧數，由於 與 之長度相等，因此 中的空白數會對等同於 中的空白數，
故 亦可視為 中對到空白的括弧數。直觀而言，此函數紀錄排比式 須經
過幾次的括弧重組，始可將 換成 。 則定義為 與 間所有的排比式可形成之
最小重組距離，亦即 
 圖表 4 對應於圖表 3之一組括弧字串 
 
 
圖表 5 虛線部分為括弧字串所隱含之邊 
 
圖表 6 化約所參照之對應表 
考慮雙頁圖上之最大獨立集問題，令 G為此問題一例子(instance)。現在說明如何將其
化約(reduce)成括弧字串最小重組距離問題。我們分兩階段進行化約程序(reduction)，第一
階段將雙頁圖之最大獨立集問題化約成括弧字串排比問題，第二階段再將括弧字串排比問
題透過對偶性，轉換成括弧字串最小重組距離問題。所謂括弧字串排比問題，指的是如何
將任意給定之 、 進行滿足 PA1~PA3排比，使得所對到(align)的之括弧總數最多。
不難看出，若得到 、 之最佳排比法，即可求得其間之最小重組距離。 
令 為 G上由左至右排列之頂點，我們以 與 分別表示 對應於圖表 6之
第一行與第二行括弧子字串，並令 B 為 個左括弧與 個右括弧串接之括弧字串。令
且 (如圖表 4所示)，基本上這就是第一階段化約程序之輸
出，但注意此時 與 兩字串長度不一定相等，因此我們需要在 與 前端補上一些括弧
使其長度相等。令 ，若 ，則令 為空字串且令 為 個左括弧與 個右括
弧串接之括弧字串；反之，若 ，則令 為 個左括弧與 個右括弧串接之括弧字串，
且令 空字串。最後，令 與 ，則此即為化約程序所欲之輸出。於附錄
中，我們證明下列結果： 
[10] P. Dehornoy, On the rotation distance between binary trees, Advances in Mathematics 223 
(2010) 1316–1355. 
[11] J. Felsenstein, Inferring Phylogenies, Sinauer Associates, 2004. 
[12] M.R. Garey, D.S. Johnson, A note on ‘‘A note on ‘Some simplified NP-complete graph 
problems’’’, SIGACT News 9 (1978) 17–17. 
[13] M.R. Garey, D.S. Johnson, L. Stockmeyer, Some simplified NP-complete problems, in: 
Proceedings of the 6th Annual ACM Symposium on Theory of Computing, ACM, Seattle, 
WA, United States, 1974, pp. 47–63. 
[14] M.R. Garey, D.S. Johnson, Computers and intractability: a guide to the theory of 
NP-completeness, W.H. Freeman and Company, 1979. 
[15] C. Germain, J. Pallo, Two shortest path metrics on well-formed parentheses strings, 
Information Processing Letters 60 (1996) 283–287. 
[16] A. Gibbons, P. Sant, Rotation sequences and edge-colouring of binary tree pairs, Theoretical 
Computer Science 326 (2004) 409–418. 
[17] T. Jiang, G. Lin, B. Ma, K. Zhang, A general edit distance between RNA structures, Journal 
of Computational Biology 9 (2002) 371–388. 
[18] T. Jiang, L. Wang, K. Zhang, Alignment of trees — an alternative to tree edit, Theoretical 
Computer Science 143 (1995) 137–148. 
[19] D.E. Knuth, The Art of Computer Programming, vol. 4, Addison-Wesley, 2006. 
[20] M. Li, L. Zhang, Better approximation of diagonal-flip transformation and rotation 
transformation, in: The 4th Annual International Conference on Computing and 
Combinatorics, COCOON’98, Springer-Verlag, Taipei, Taiwan, 1998, pp. 85–94. 
[21] G. Lin, Z.Z. Chen, T. Jiang, J. Wen, The longest common subsequence problem for 
sequences with nested arc annotations, Journal of Computer and System Sciences 65 (2002) 
465–480. 
[22] J.M. Lucas, D.R. Vanbaronaigien, F. Ruskey, On rotations and the generation of binary trees, 
Journal of Algorithms 15 (1993) 343–366. 
[23] F. Luccio, L. Pagli, On the upper bound on the rotation distance of binary trees, Information 
Processing Letters 31 (1989) 57–60. 
[24] F. Magniez, M. Rougemont, Property testing of regular tree languages, Algorithmica 49 
(2007) 127–146. 
[25] E. Makinen, On the rotation distance of binary trees, Information Processing Letters 26 
(1988) 271–272. 
[26] J. Pallo, On the rotation distance in the lattice of binary trees, Information Processing 
Letters 25 (1987) 369–373. 
[27] J. Pallo, A distance metric on binary trees using lattice-theoretic measures, Information 
Processing Letters 34 (1990) 113–116. 
[28] J. Pallo, An efficient upper bound of the rotation distance of binary trees, Information 
Processing Letters 73 (2000) 87–92. 
[29] A.A. Ruiz, F. Luccio, A.M. Enriquez, L. Pagli, k-restricted rotation with an application to 
search tree rebalancing, in: Workshop on Algorithms and Data Structures, Springer, Berlin, 
Heidelberg, 2005, pp. 2–13. 
[30] D.D. Sleator, R.E. Tarjan, W.R. Thurston, Rotation distance, triangulations, and hyperbolic 
This article appeared in a journal published by Elsevier. The attached
copy is furnished to the author for internal non-commercial research
and education use, including for instruction at the authors institution
and sharing with colleagues.
Other uses, including reproduction and distribution, or selling or
licensing copies, or posting to personal, institutional or third party
websites are prohibited.
In most cases authors are permitted to post their version of the
article (e.g. in Word or Tex form) to their personal website or
institutional repository. Authors requiring further information
regarding Elsevier’s archiving and manuscript policies are
encouraged to visit:
http://www.elsevier.com/copyright
Author's personal copy
3924 C.-S. Wu, G.-S. Huang / Theoretical Computer Science 411 (2010) 3923–3931
Fig. 1. Tree rotations.
or variants [7,15,27,34] of rotation distance, and others focused on estimating (numerical or algorithmic) upper and lower
bounds [23,25,26,28,30] for this metric. More references on tree rotation distance can be found in [3,8–10,16,20,22,28].
The second approach is based on the idea of aligning two trees so that their corresponding similar parts can be identified
and associated. An alignment is constructed under some constraints. Usually, it must be consistent with the structures of
the two compared trees. Even so, there are too many ways to align them, and thus, a cost function that can judge the quality
of an alignment is defined so that a best alignment, which has the minimum cost, can be chosen. A substitution matrix is
used to weigh the cost for aligning two nodes of the trees, and the cost for the whole alignment is evaluated as the sum of
costs for aligning all nodes in this alignment. The tree alignment distance [18] is an instance.
Our method in this paper follows the alignment approach. Let Tn be the set of all rooted trees with n unlabeled vertices.
For any T ∈ Tn, its parenthesis representation π(T ) can be obtained recursively as follows:
1. if T is a tree with only one node, π(T ) =();
2. if the root of T is rT and T1, . . . , Tk are children of rT in this order, then π(T ) = (π(T1) . . . π(Tk)) for k ≥ 1.
To compare the distance between any two trees T1, T2 ∈ Tn, we compare the distance between π(T1) and π(T2). An optimal
alignment for π(T1) and π(T2) is constructed in order to get the distance.
Inspired by thework of Jiang et al. [17], we originally proposed thismetricwhile studying how to compare RNA secondary
structures. However, after successive failures in designing a polynomial-time algorithm using dynamic programming, we
realized that our current formulation could be NP-hard. Then following the research lines of [21], we successfully proved
the NP-hardness and learned that it is necessary to circumvent this pitfall in order to develop a practical model for RNA
secondary structure comparisons. This goal was achieved and the result is described in [33].
The organization of this paper is as follows. Section 2 formally defines the parenthesis rearrangement distance problem,
and Section 3 proves its NP-hardness. Afterward, Section 4 provides a 1.5-approximation algorithm, and finally, Section 5
concludes this study.
2. The parenthesis rearrangement distance problem
A parenthesis string is a finite string over the symbols ‘(’ and ‘)’. A parenthesis string a1 . . . a2n is properly nestedwhen it
contains n occurrences of ‘(’ and n occurrences of ‘)’, where the kth ‘(’ precedes the kth ‘)’ for 1 ≤ k ≤ n. Let Pn be the set
of properly nested parenthesis strings of length 2n. For P ∈ Pn, we use P[i] to refer to the ith parenthesis of P and P[i . . . j]
to refer to the substring of P from position i to position j. We say that P[i] pairs with P[j]where 1 ≤ i < j ≤ 2n iff (1) P[i] is
a left parenthesis and P[j] is a right parenthesis; and (2) P[i+ 1 . . . j− 1] is properly nested (including the empty string). In
this case, we say that P[i] and P[j] form a pair, and call P[i] amate of P[j] and vice versa.
Before introducing our main problem, we define the concept of parenthesis alignments for nested parenthesis strings. For
P1, P2 ∈ Pn, we say that (A1, A2) is an alignment for P1 and P2 where A1 = a1[1] . . . a1[m] and A2 = a2[1] . . . a2[m] if and
only if the following conditions hold:
PA1 The strings A1 and A2 are obtained from P1 and P2, respectively, by inserting spaces. This impliesm ≥ 2n.
PA2 If a1[i] and a2[i] are parentheses, they are of the same type (i.e. both are left parentheses or both are right parentheses).
PA3 Suppose a1[i], a1[j], a2[i] and a2[j] are parentheses where 1 ≤ i < j ≤ m. Then a1[i] and a1[j] form a pair if and only if
a2[i] and a2[j] form a pair.
In the above definition, we say that a1[i] is aligned with a2[i] for 1 ≤ i ≤ m. If a1[i] and a2[i] are parentheses of the same
type, then it is said that there is amatch occurring at position i in this alignment; otherwise there is amismatch.
Example 1. Let us consider the instance in Fig. 2. We use a dotted line to link two parentheses that form a pair. A space is
symbolized by a minus sign. Notice that a match occurs at position 1 and a mismatch occurs at position 2 in the alignment
(A1, A2). There are in total eight matches (at positions 1, 3, 5, 6, 9, 10, 11, 12) and four mismatches (at positions 2, 4, 7, 8).
The rearrangement distance for an alignment (A1, A2), denoted by D(A1, A2), is defined as the number of mismatched
parentheses in A1, which is equal to the number of mismatched parentheses in A2. The rearrangement distance D(P1, P2) for
two nested parenthesis strings P1 and P2 is defined as the minimum value of D(A1, A2) over all possible alignments (A1, A2)
Author's personal copy
3926 C.-S. Wu, G.-S. Huang / Theoretical Computer Science 411 (2010) 3923–3931
(a) A 3-regular two-page graph G.
(b) The output of the reduction from (a).
(c) The ‘edges’ of G on (b).
Fig. 3. An illustration of the reduction.
Fig. 4. The gadgets for the reduction to the DPRS problem.
Lemma 1 ([21]). The maximum independent set problem restricted to simple cubic 2-page graphs is NP-hard.
Lemma 1 is built on the results from [12–14,35]. In the following paragraphs, we are going to show that the DPRS problem
is NP-complete.
We will show how to reduce the maximum independent set problem from simple cubic two-page graphs to the DPRS
problem. Let G be such a graph with n vertices; see Fig. 3(a) for an example. We classify vertices of G into three cases, and
each case is further divided into four subcases, as shown in Fig. 4. The reduction starts from a linear scan on vertices of G
from left to right, and finally two nested parenthesis strings S1 and S2 will be output.
Suppose the vertices of G are labeled in an orderly fashion by vi for 1 ≤ i ≤ n from left to right. For each vi, we look
at Fig. 4 and get the corresponding upper block Ui and lower block Li. Set S ′1 =
∏
1≤i≤n BUi and S
′
2 =
∏
1≤i≤n BLi where B
consists of 10n left parentheses followed by 10n right parentheses. The purpose of these B blocks is to serve as delimiters
that can force an optimal alignment to align Ui with Li for 1 ≤ i ≤ n (see Fig. 3(b) for an illustration and Lemma 3 for a
formal proof). Notice that the lengths of S ′1 and S
′
2 may not be equal. In fact, if vi has one upward edge and two downward
edges, |Ui| − |Li| = 1; conversely, if vi has two upward edges and one downward edge, |Ui| − |Li| = −1. Therefore, we
have to add more parentheses in order to make the lengths of S ′1 and S
′
2 equal. Let δ = S ′1 − S ′2. Since every vertex of G has
odd degree, the total number of vertices of Gmust be even, which implies that δ is even. When δ > 0, let H1 be the empty
string and H2 consist of δ2 left parentheses followed by
δ
2 right parentheses. Otherwise, for δ ≤ 0, let H1 consist of −δ2 left
parentheses followed by −δ2 right parentheses and H2 be the empty string. Let S1 be H1S
′
1 and S2 be H2S
′
2. The output of the
reduction is S1 and S2.
Author's personal copy
3928 C.-S. Wu, G.-S. Huang / Theoretical Computer Science 411 (2010) 3923–3931
Fig. 8. The structure of the output of the reduction. Notice that the traces of any optimal alignment for S1 and S2 are limited to being within the dotted-line
boxes.
Lemma 2 reveals a key point. Each complex U and L acts as a ‘switch’. The ‘switch on’ indicates that all edge parentheses
are matched up, and in this case, we acquire three matches for Cases 1 and 2, and get seven matches for Case 3 in Fig. 4.
When the switch turns off, we always get one less match.
Recall that S1 = H1∏1≤i≤n BUi and S2 = H2∏1≤i≤n BLi, which are the output of the reduction. In order to simplify the
description of proof for Lemma 3, we set U0 = H1 and L0 = H2.
Lemma 3. For any output of the reduction S1 and S2, there exists an optimal alignment that aligns Ui with Li for 0 ≤ i ≤ n.
Proof. We use Bℓt,i and B
r
t,i to refer to the partition of the ith B block of St , for t = 1, 2, such that Bℓt,i and Brt,i contain only left
parentheses and right parentheses, respectively. For any optimal alignment for S1 and S2, we first show that it cannot align
a parenthesis of Br1,i with a parenthesis of B
r
2,j for j ≠ i. If that was the case, let their positions be k1 in S1 and k2 in S2. In the
following, we will show that the absolute value of k1 − k2 is very large, which implies that there are too many mismatches
in this alignment so it cannot be optimal. Without loss of generality, assume i > j. Notice that the number of parentheses
in each block listed in Fig. 4 is between 4 and 9. It follows that
k1 ≥
i−1
q=0
Uq+ i−1
q=1
Bℓ1,qBr1,q+ Bℓ1,i
≥ 4(i− 1)+ (i− 1) |B| + |B|
2
. (1)
Similarly, we have
k2 ≤
j−1
q=0
Lq+ j−
q=1
Bℓ1,qBr1,q ≤ n+ 9(j− 1)+ j |B| . (2)
When we subtract Eq. (2) from Eq. (1), we obtain
k1 − k2 ≥ 4(i− 1)+ (i− 1) |B| + |B|2 − n− 9(j− 1)− j |B|
≥ |B|
2
− n+ |B|(i− 1− j)+ 4(i− 1)− 9(j− 1). (3)
Since i > j, the term |B|(i− 1− j) ≥ 0 and 4(i− 1) ≥ 4(j− 1). Eq. (3) can be further simplified into
k1 − k2 ≥ |B|2 − n− 5(j− 1) ≥
|B|
2
− 6n = 10n− 6n = 4n. (4)
Eq. (4) implies that there are at least 4nmismatched parentheses in S1 for any alignment of S1 and S2 that aligns S1[k1]with
S2[k2], since we have to insert at least 4n spaces into S2[1 . . . k2] in order to make its length equal to S1[1 . . . k1].
Consider the alignment A′ that aligns Ui with Li in the way shown in Figs. 5–7, and aligns Bℓ1,i with B
ℓ
2,i and B
r
1,i with B
r
2,i
accordingly for 1 ≤ i ≤ n. Wewould like to count an upper bound for the number of mismatched parentheses that occurred
in S1 for A′. Aligning H1 with H2 contributes at most nmismatched parentheses since the length of H1 is at most n; aligning
each Ui with Li for 1 ≤ i ≤ n contributes at most 2, as shown in Figs. 5–7. To sum up, there are at most n + 2n = 3n
mismatched parentheses occurring in S1 for A′. Therefore, the alignment that aligns S1[k1] with S2[k2] is worse than A′, a
contradiction.
The same argument can be extended to exclude the following two cases in an optimal alignment for S1 and S2: (1) aligning
Br1,i with Lj for 1 ≤ i ≠ j ≤ n; and (2) aligning Br1,1 with H2. See Fig. 8 for an illustration. Combining these two cases with
the original one, we conclude that Br1,i can only be aligned with B
r
2,i and Li for 1 ≤ i ≤ n in an optimal alignment. A similar
argument from symmetry would establish that Bℓ1,i can only be aligned with B
ℓ
2,i and Li−1 for 1 ≤ i ≤ n (recall that we set
L0 = H2) in an optimal alignment.
As a summary, the above arguments reveal the fact that Br1,iUiB
ℓ
1,i+1 can only be aligned with B
r
2,iLiB
ℓ
2,i+1 for 1 ≤ i ≤ n−1
in any optimal alignment for S1 and S2, as shown in Fig. 8. Since Br1,i and B
ℓ
1,i+1 are perfectly matched to B
r
2,i and B
ℓ
2,i+1,
the minimum number of mismatches between Br1,iUiB
ℓ
1,i+1 and B
r
2,iLiB
ℓ
2,i+1 is equal to the minimum number of mismatches
between Ui and Li for 0 ≤ i ≤ n. This establishes the claim of this lemma. 
Author's personal copy
3930 C.-S. Wu, G.-S. Huang / Theoretical Computer Science 411 (2010) 3923–3931
We use DR(P1, P2) to denote the parenthesis rearrangement distance according to PA1–PA3 and PR. Then we have the
following lemma.
Lemma 6. Theminimum of DL(P1, P2) and DR(P1, P2) is a 1.5-approximation for D(P1, P2) for any two nested parenthesis strings
P1 and P2 whose lengths are equal.
Proof. Let (A∗1, A
∗
2) be an optimal way to align P1 and P2 for evaluating D(P1, P2). By definition, we have to count the number
of mismatched parentheses in A∗1 . We distinguish three cases.
1. Both ends of a pair of parentheses are mismatched. Let B be the number of such pairs.
2. Only the left end of a pair of parentheses is mismatched. Let L be the number of such pairs.
3. Only the right end of a pair of parentheses is mismatched. Let R be the number of such pairs.
Then clearlywe haveD(P1, P2) = L+R+2B. It is not difficult to see thatDL(P1, P2) ≤ 2L+R+2B since (A∗1, A∗2) can be relaxed
to a feasible solution for PA1–PA3 and PL by aligning L right parentheses with spaces. Similarly, DR(P1, P2) ≤ L + 2R + 2B.
Therefore, we have
D(P1, P2) ≤ min{DL(P1, P2),DR(P1, P2)} ≤ L+ R+ 2B+min{L, R}
≤ L+ R+ 2B+ (L+ R)/2 ≤ 3
2
(L+ R+ 2B) = 3
2
D(P1, P2). 
In the next paragraphs, we are going to propose a simple dynamic programming algorithm that can evaluate DR(P1, P2)
in time O(n4). The algorithm that evaluates DL(P1, P2) in O(n4) can also be obtained symmetrically.
Let i1 and i2 be indices over P1 for 1 ≤ i1 ≤ i2 ≤ 2n and j1 and j2 be indices over P2 for 1 ≤ j1 ≤ j2 ≤ 2n.
A four-dimensional array AR(i1, i2; j1, j2) is computed for evaluating DR(P1, P2), and finally we would get DR(P1, P2) =
AR(1, 2n; 1, 2n). Intuitively, AR(i1, i2; j1, j2) records the minimum cost for aligning P1[i1 . . . i2]with P2[j1 . . . j2] according to
PA1–PA3 and rule PR such that the number of parentheses in P1[i1 . . . i2] that are aligned with spaces is minimized. Notice
that there could be ‘free’ parentheses in P1[i1 . . . i2] and P2[j1 . . . j2], i.e., parentheses whosemates are not within P1[i1 . . . i2]
and P2[j1 . . . j2]. In this case, all free parentheses are forced to be aligned with spaces. Accordingly, AR(i1, i2; j1, j2) can be
computed by the following dynamic program, which considers all possible combinations of P1[i2] and P2[j2].
1. Either P1[i2] or P2[j2] is a left parenthesis. This left parenthesis has to be aligned with a space. Thus, let AR(i1, i2; j1, j2) be
AR(i1, i2 − 1; j1, j2)+ 1 when P1[i2] is a left parenthesis; otherwise, let it be AR(i1, i2; j1, j2 − 1).
2. Both P1[i2] and P2[j2] are right parentheses. The value for AR(i1, i2; j1, j2) is the minimum over the following four cases.
(a) Align P1[i2]with a space: AR(i1, i2 − 1; j1, j2)+ 1.
(b) Align P2[j2]with a space: AR(i1, i2; j1, j2 − 1).
(c) Align P1[i2]with P2[j2] but not the mates: AR(i1, i2 − 1; j1, j2 − 1).
(d) Align P1[i2]with P2[j2] togetherwith themates: AR(i1, P1[i′2]−1; j1, P2[j′2]−1)+AR(P1[i′2]+1, i2−1; P1[j′2]+1, j2−1)
where i′2 and j
′
2 are the positions of the mates of i2 and j2, respectively.
The time complexity is clearly in O(n4) since there are four indices for the AR table and the computation for each entry takes
only O(1) time. To combine with Lemma 6, therefore we have the main theorem in this section.
Theorem 3. There exists a 1.5-approximation algorithm for computing the parenthesis rearrangement distance in time O(n4).
5. Concluding remarks
We have shown that the PRD problem is NP-hard in Section 2 and proposed a 1.5-approximation algorithm for it in
Section 4. In our reduction, we reduced the maximum independent set problem restricted to simple cubic two-page graphs
to this problem. It has been shown in [2] that the maximum independent set problem on planar graphs (and so for the cubic
two-page graphs) admits a PTAS. Hence, our reduction provides no clue as to whether the PRD problem is APX-hard or not.
We leave this question to future research.
Acknowledgements
Wewould like to thank the anonymous referees for their constructive commentswhichhave greatly improved the quality
of this paper.
References
[1] T. Akutsu, A relation between edit distance for ordered trees and edit distance for Euler strings, Information Processing Letters 100 (2006) 105–109.
[2] B.S. Baker, Approximation algorithms for NP-complete problems on planar graphs, Journal of the ACM 41 (1994) 153–180.
[3] J.L. Baril, J.M. Pallo, Efficient lower and upper bounds of the diagonal-flip distance between triangulations, Information Processing Letters 100 (2006)
131–136.
國科會補助計畫衍生研發成果推廣資料表
日期:2011/11/14
國科會補助計畫
計畫名稱: 無編號樹狀結構比對問題之時間複雜度探討
計畫主持人: 黃光璿
計畫編號: 99-2628-E-260-009- 學門領域: 計算機理論與演算法
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
