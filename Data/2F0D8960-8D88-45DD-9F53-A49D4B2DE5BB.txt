 1
 
行政院國家科學委員會專題研究計畫成果報告 
多核心系統的即時可排程性之分析工具  
計畫編號：NSC 98-2220-E-007-028 
 
執行期限：98 年 8 月 1 日至 99 年 7 月 31 日 
計畫主持人： 石維寬教授   國立清華大學資訊工程學系(所) 
     
 
一、中文摘要 
 
 
所謂即時系統，就是系統內的每
項工作都有其各自的規定完成時間
(Deadline)，這些工作通常被稱為即
時性工作，而即時系統必須保證每一
項即時性工作都能在其 deadline 前
完成。為了決定目前系統內的工作該
採取何種排程策略，所以我們必須能
夠知道即時性工作將於何時完成。 
 
隨著科技的進步與單處理器系
統面對的物理極限，多核心系統已成
為勢在必行的趨勢。不過由於系統內
的工作是否可以順利執行完成還須
視乎它所需的各種資源的需求量，這
甚至牽涉到工作之間的先後關係和
彼此間的協調作用，而且排程演算法
選擇工作時也遷就於系統內擁有的
週期性與非週期性工作的多寡，因此
設計一個好的多核心即時排程演算
法須要有全方面的考慮，其難度相當
地高。由於我們很難對多核心系統內
的各項工作妥善的排程，因此常造成
整個系統的利用度低下，無形中浪費
了優良的硬體設備。 
 
為了能夠改善多核心系統資源
利用度不足的情況，所以本計畫將提
供一個多核心系統的即時可排程性
之系統分析工具(Multi-core System 
Real-time Schedulability Analysis 
Tool, MRST)，以協助系統開發者在
執行期前便可針對每一份工作的特
性與其 deadline 來安排一個合宜的
執行順位。多核心系統內的工作的可
排程性嚴重影響到系統內資源的利
用度，對於系統使用率來說是一項重
要的衡量指標，抑是系統可靠度的重
要依據之一。本計畫將會針對工作的
特性與指定的排程演算法則來模擬
這些工作的可排程性，以偵測工作群
組是否可以順利被排程；而當系統無
法排程時，我們會盡量提供一個可以
使工作滿足可排程性的建議，以協助
開發人員充分利用現有硬體資源，增
加系統的總體使用率。 
 
 
關鍵詞：即時系統、Deadline、多核心
系統、可排程性之系統分析工具組。 
 
Abstract 
 
 
As the progress of the 
information, electronic science and 
technology, and the drop of cost with 
hardware devices, resources that can 
be used in the system also increase 
accordingly. It has been already unable 
  3
法的設計裡，影響到系統內工作任務排
程的成功與否。因此開發者在設計系統
與其程序時，必須依照系統的設計規格
與需求來選擇適當的切入點，如此才能
開發出符合預期的產品。 
 
誠如上述，程序的可排程性是衡量
系統成功與否的指標之一，但是開發者
通常無法輕易得知程式在系統上是否能
夠滿足此一性質。但在設計初期，我們
可以藉由過去程式的大致執行時間與資
源需求來估計其在新系統上是否滿足可
排程性。因此本計畫的目標便是提供一
個多核心系統的即時可排程性之系統分
析工具，藉由程序過去執行時期的統計
資訊，在設計階段便可依特定的排程演
算法來調整程序的執行周期、時間等性
質，減輕在實體平台上的測試負擔。 
 
在我們設計的分析工具裡，除了提
供 基 於 多 核 心 系 統 的 EDF(Earliest 
Deadline First)與 RM(Rate-monotonic)排
程演算法以分析任務群組是否滿足可排
程性之外，並會在無法順利排程時嘗試
調整任務群組的工作參數，使其滿足可
排程性，以做為開發者在設計系統與程
式時的參考。 
 
三、在 QEMU 上的實作 
 
為了更精確掌握每個工作的實際執行
時間，我們預估在 QEMU 上模擬每個工作
的執行過程。QEMU 自由軟體是由 Fabrice 
Bellard 所編寫的模擬處理器，是可以支持
多種 CPU 的硬體模擬器，具有高速度及跨
平台的特性，更因它也是功能性的模擬器
(function-level emulator)，因此可以藉由加
入額外的模擬器來增加一些QEMU原本沒
有模擬的部分，來達到提昇整個系統的效
能。然而 QEMU 是種用 host 端 timer，缺
乏估量軟體執行的效能分析，所以在功能
性模擬的虛擬平台中，我們希望能提供程
式的預估時間模擬環境。QEMU 使用不同
其它模擬器的技術，其模擬方式是採用動
態二進位轉譯(Portable  Dynamic Binary 
Translator)。如下圖(一)，在整體的指令的
轉譯過程中，Guest instructions 將會分組為
一個一個的 Translation blocks(TB)，並會改
寫成為 TCG micro ops，此時 TCG (Tiny 
Code Generator) 再 將 其 轉 譯 為 Host 
instructions 並在 host 端執行，在此是做為
許多 compiler 使用的最佳化技巧應用。 
 
圖(一)、QEMU code-gen flow 
在排程軟體的整合上，模擬環境是建
置在QEMU 0.12.3、X86 host 、MRST自由
軟體專案。如下圖二所示，以MRST做為排
程模擬分析工具，讓系統開發人員可以在
系統實際完成前就可以先行測試工作是否
可以在系統上正常排程，因此就不需要等
到系統完成後才進行實際測試。另外，在
QEMU中加plug-in過程，以off-line模式並
依ARM官方指令cycle timing，做為進行執
行軟體的virtual cycle計算(其中是以每一
個TB為計算單位)，QEMU每執行完一個
TB就會從code cache中跳出；下圖二表示結
合QEMU virtual platform外掛(plug-in)計算
週期數的模組精準模擬後，所產生的週期
資訊進而做為排程軟體的測試輸入資訊 。 
 
圖(二)、QEMU 與排程軟體的整合 
利用 QEMU 能讓我們開發出高效
能、快速並具有效能分析和除錯的虛擬平
  5
 
 
五、參考文獻 
 
[1]  Scheduling algorithms for 
multiprogramming in a hard real-time 
environment, C. L. Liu and J. W. 
Layland, Journal of the ACM, 20(1) , 
pp. 40-61, 1973. 
[2]  Scheduling real-time, periodic jobs 
using imprecise results, J. W. S. Liu, K. 
J. Lin, and S. Natarajan, Proceedings of 
the IEEE 8th Real-Time Systems 
Symposium, San Jose, California, 
December 1987. 
[3]  Performance of algorithms for 
scheduling periodic jobs to minimize 
average error, J. Y. Chung and J. W. S. 
Liu, Proceedings of the IEEE 9th 
Real-Time Systems Symposium, 
Huntsville, Alabama, December 1988. 
[4]  The rate-monotonic scheduling 
algorithm: Exact characterization and 
average behavior, J. Lehoczky, L. Sha, 
and Y. Ding, Proceedings of the IEEE 
Real-Time Systems Symposium, 99. 
166-171, 1989. 
[5]  On the competitiveness of on-line 
real-time task scheduling, S. Baruah, G. 
Koren, D. Mao, B. Mishra, A. 
Raghunathan, L. Rosier, D. Shasha and 
F. Wang, Proc. of the 12th Real-Time 
Systems Symposium, San Antonio, 
Texas, pp. 106-115, December 1991. 
[6]  [22]  Applying new scheduling 
theory to static priority pre-emptive 
scheduling, N. C. Audsley, A. Burns, M. 
Richardson, K. Tindell, and A. 
Wellings, Software Engineering 
Journal, 8(5), pp. 284-292, 1993. 
[7]  PERTS: A Prototyping Environment for 
Real-Time Systems, J. W. S. Liu, J. L. 
Redondo, Z. Deng, T. S. Tia, R. Bettati, 
A. Silberman, M. Storch, R. Ha and W. 
K. Shih, Real-Time Systems 
Symposium, pp. 184-188, Dec. 1993. 
[8]  A better polynomial-time 
schedulability test for real-time 
fixed-priority scheduling algorithms, C. 
C. Han, H. Y. Tyan. 18th IEEE 
Real-Time Systems Symposium (RTSS 
'97), pp. 36, 1997. 
[9]  Rate Monotonic Analysis: the 
Hyperbolic Bound, Enrico Bini, 
Giorgio C. Buttazzo, Giuseppe M. 
Buttazzo, IEEE Transactions on 
Computers, Vol. 52, pp. 933-942, Jul 
2003. 
[10]  An Improved Rate- Monotonic 
Admission Control And Its 
Applications”, S. Lauzac, R. Melhem, 
D. Mosse, IEEE Transactions on 
Computer, 52(3), pp. 337-350, 2003. 
[11]  Rate monotonic schedulability tests 
using period-dependent conditions, 
Wan-Chen Lu, Kwei-Jay Lin, 
Hsin-Wen Wei, and Wei-Kuan Shih, 
accepted by Real-Time System, 
Springer, online since September 05, 
2007 (SCIE, EI) 
[12]  Current Results on EDZL Scheduling 
for Multiprocessor Real-Time Systems, 
Wei Hsin-Wen; Chao, Yi-Hsiung; Lin, 
Shun-Shii; Lin, Kwei-Jay; Shih, 
Wei-Kuan, 13th IEEE International 
Conference on Embedded and 
Real-Time Computing Systems and 
Application (RTCSA), 21-24 Aug. 
2007 Page(s): 120-130 (EI) 
 
