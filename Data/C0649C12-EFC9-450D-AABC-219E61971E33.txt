 2
considered.  When the arrival times of all the jobs at the bottleneck stage are determined, any 
heuristics for unrelated parallel machines can be applied to schedule the jobs at the bottleneck 
stage. 
The three machine selection rules used in this research are as follows: given a job at a 
stage, the first machine selection rule, EAAM, is to select the machine with the earliest 
available time among the available machines.  The second selection rule, ECAM, is to select 
the machine with the earliest completion time when the job is assigned to the available 
machines.  The third selection rule, ECALLM, is to select the machine with the earliest 
completion time when the job is assigned to all the machines at the stage, including available 
and unavailable machines.  This rule may cause an idle period of the job.  However, since 
unrelated parallel machines are considered at the stage, an unavailable but more efficient 
machine may produce earlier completion time for the job.  When the machine selection rules 
are used in the bottleneck-based heuristics to determine the arrival time of a job to the 
bottleneck stage, the application is straightforward.  Since only one job is considered at a 
time, when the job arrives at each of the upstream stages, it is easy to calculate its completion 
time on each available machine and each unavailable machine and determine the machine that 
the job will be assigned to according to the machine selection rules.  However, when the 
machine selection rules are applied with dispatching rules, the procedure will become more 
complicated.  Since the candidate problem is a flow shop problem, we can schedule jobs 
stage by stage.  At each stage, an array is set to record the updated machine available time 
for each machine, and an array is set to record the updated arrival time of each job.  Also, a 
time clock is set to record the updated decision time for schedule making; the updated 
decision time is the smallest updated machine available time.  The initial available times of 
all the machines are zero, and the initial arrival time of a job is its completion time at the 
previous stage.  When the time clock runs to time t, the machine or machines whose updated 
available time(s) are earlier than time t will be identified, and the job or jobs whose updated 
arrival times are earlier than time t will be identified.  Then, the dispatching rules will be 
used to select the best available job, the machine selection rules will be used to assign an 
appropriate machine to the selected job, and the completion time of the job on the machine 
will be used to update the available time of the machine.  
The two decision rules at the bottleneck stage are derived by considering a variation of 
Moore’s algorithm (Moore 1968), which minimizes the total number of tardy jobs for single 
machine scheduling.  The main idea of Moore’s algorithm is that it does not consider a job 
for scheduling if the job is decided to be tardy.  As for the non-tardy jobs, they are scheduled 
according to the earliest due date (EDD) rule.  The decision rules compare a job’s due date 
and completion time to justify its tardiness.  Two types of due dates and two types of 
completion times are considered.  Given a job, say job i, the two types of due dates are the 
given due date (di) and the estimated operational due date ( id
)
= minibi wd − ), and the two types 
of completion times are the completion time at the bottleneck stage b ( ibC = }{min ibsibss pR + ) 
and the estimated completion time at the last stage J ( iJC
)
= minibib wC + ).  Note that Ribs is the 
ready time of job i to be processed on machine s at the bottleneck stage, which is the larger 
value between the arrival time of job i at the bottleneck stage and the available time of 
machine s at the bottleneck stage.  Also, since unrelated parallel machines exist at the 
bottleneck stage, job i can be assigned to any machine s at the stage.  Its completion time 
( ibC ) is defined to be the smallest of the completion times on all the machines at the stage 
( }{min ibsibss pR + ).  When the tardiness of all the jobs is justified, the non-tardy jobs will be 
scheduled according to the decision rules.  The first decision rule selects the job with the 
 4
Step 6. Let U = }{ minibiib wdCi −≤  and V = }{ minibiib wdCi −> . 
Step 7. If U≠ φ , select the job with smallest estimated operational due date.  If there are 
more than one job with the same smallest estimated operational due date, select the 
one with the smallest completion time at the bottleneck stage, ibC .  If U = φ , 
select the job with the smallest completion time at the bottleneck stage, ibC  for 
i∈V.  Let the selected job be job k. 
 
When the jobs for the bottleneck stage and the upstream stages are scheduled, the jobs 
will move to the downstream stages according to their schedule at the bottleneck stage, that is 
the schedule S, and the dispatching rules will be used to schedule the jobs at the downstream 
stages.  Many dispatching rules have been developed for flexible flow line problems.  
Hunsucker and Shah (1992) evaluated the performance of six priority rules under congestion 
levels in the constrained flow shop with multiple processors for mean tardiness and number of 
tardy jobs.  This study suggested that the SPT rule yielded good performances for both the 
performance measures considered.  Brah (1996) examined the performance of ten 
well-known dispatching rules in static flow shop with multiple processors.  The study 
suggested that S/RPT+SPT, MDD, and EDD rules would be best for mean tardiness and 
maximum tardiness.  Kadipasaoglu et al. (1997) conducted a study to make a comparison of 
dispatching rules in static and dynamic hybrid flow systems.  The COVERT rule performed 
well in regards to the total tardiness criterion in their research.  Jayamohan and Rajendran 
(2000) studied many dispatching rules in flexible flow shops.  They reported that simple 
dispatching rules, such as SPT, could offer a good performance for the number of tardy jobs.  
Lee et al. (2004) used several dispatching rules to compare the performance with their 
proposed heuristics in the hybrid flow shop.  The ATC and COVERT dispatching rules 
showed good results in regard to the total tardiness.  Since the previous researches showed 
different conclusions regarding the performance of the dispatching rules on the FFL problems 
with due date related objectives, a pilot experiment with a large number of randomly 
generated problems was conducted to evaluate the effect of all the previous  dispatching 
rules on scheduling the jobs at the downstream stages in the proposed bottleneck-based 
heuristics.  Computational results showed that these dispatching rules have insignificant 
effect on the proposed heuristics; however, ATC performed slightly better than the other 
dispatching rules.  Therefore, ATC was chosen to schedule the jobs at the downstream stages, 
and two bottleneck-based heuristics, denoted as BDD+ATC and BODD+ATC, were 
developed for the candidate problem.  Priority functions of the six dispatching rules are 
stated as below:  
 
(1) Shortest Processing Time (SPT) 
iji pZ =  
(2) Earliest Due Date (EDD) 
ii dZ =  
(3) Modified Due Date (MDD) 
},max{ iii wtdZ +=  
(4) Combining of the Slack per Remaining Work and the Shortest Processing Time 
(S/RPT + SPT) 
},/)max{( ijijiiii ppwtwdZ ×−−=  
(5) Apparent Tardiness Cost (ATC) 
ijijijiii ppatppwcdZ /]/})({exp[ ⋅−−−−−−= +  
 6
problems.  The average number of tardy jobs, the relative deviation index (RDI) and the 
number of best solutions produced (NBS) are the three criteria used to evaluate the 
performance of the dispatching rules and the bottleneck-based heuristics.  The relative 
deviation index (RDI) has been used in several papers such as Lee et al. (2004) and Choi et al. 
(2005), which is defined as below: 
RDI ⎪⎩
⎪⎨
⎧ ≠−−
−
=
otherwise. 0
 0,)( if bw
bw
ba SS
SS
SS
 
Sa is the solution value obtained by method a, and Sb and Sw are, respectively, the best and 
the worst solution values among the solutions obtained by all the methods included in the 
comparison.  
“Please Insert Table 2 about here” 
The results of the average number of tardy jobs in Table 2 show several noteworthy points.  
First, the machine selection rules significantly affect the performance of the dispatching rules 
and the bottleneck-based heuristics.  When the dispatching rules are used, the average of the 
average number of tardy jobs produced by EAAM is 41.48; this number of ECAM and 
ECALLM is 22.27 and 16.97, respectively.  These numbers show that ECALLM dominates 
EAAM and ECAM by 59% and 24%, respectively.  A similar result can be obtained for the 
bottleneck-based heuristics; ECALLM dominates EAAM and ECAM by about 66% and 13%, 
respectively.  Therefore, we conclude that ECALLM is the machine selection rule that 
should be considered for the candidate problem.  Second, within each of the machine 
selection rules, the bottleneck-based heuristics significantly outperform the dispatching rules.  
When EAAM is used, the average number of tardy jobs produced by the worst 
bottleneck-based heuristic, BODD+ATC, is 34.40, and produced by the best dispatching rule, 
S/RPT+SPT, is 37.58; BODD+ATC dominates S/RPT+SPT by 8%.  This dominance 
percentage increases to 38% and 27%, respectively, when ECAM and ECALLM are used.  
Also, within each of the machine selection rules, the average numbers of tardy jobs produced 
by the bottleneck-based heuristics are very close.  These numbers are all around 34, 11, and 
10, respectively, when EAAM, ECAM, and ECALLM are used.  These results reach to one 
conclusion: the performance of the two decision rules used to schedule the jobs at the 
bottleneck stage is very close. 
The results of the average RDI and the NBS in Table 2 strongly support the previous 
conclusions.  For the dispatching rules, when EAAM is used, the average RDIs are all 
around 0.80 to 0.90.  They decrease to around 0.20 to 0.40 when ECAM is used and further 
decrease to around 0.10 to 0.20 when ECALLM is used.  On the contrary, when EAAM is 
used, all the NBS are 0, and they increase to a few hundred when ECAM and ECALLM are 
used.  As for the bottleneck-based heuristics, when EAAM is used, the average RDIs are all 
around 0.68.  They significantly decrease to about 0.04 when ECAM is used and further 
decrease to about 0.01 when ECALLM is used.  The NBS shows the same tendency as that 
of the dispatching rules.  When EAAM is used, all the NBS are less than or equal to 3.  
They significantly increase to over 3,500 when ECAM is used and further increase to over 
5,500 when ECALLM is used.  Therefore, we can conclude that ECALLM significantly 
dominates ECAM and EAAM for the dispatching rules and the bottleneck-based heuristics.  
Also, within each of the machine selection rules we can easily identify that the 
bottleneck-based heuristics significantly dominates the dispatching rules.  When EAAM is 
used, the average RDIs of the dispatching rules are all around 0.80, and they decrease to 
around 0.68 when the heuristics are used.  When ECAM and ECALLM are used, this 
comparison is even clearer; the average RDI of the dispatching rules is about 10 times that of 
the heuristics, and the NBS of the dispatching rules is about 1/10 that of the heuristics.   
 8
increases.  The average RDI decreases from 0.0099 to 0.0060 when the workload difference 
increases from 1.1 (low level) to 2.0 (high level).  This result shows that 
BODD+ATC/ECALLM is more effective for the problems with higher distinct bottleneck 
phenomenon.  However, it still performs well even when the bottleneck phenomenon is not 
distinct.  We calculated the average RDI for ATC/ECALLM under the condition where the 
workload difference is 1.1 and found that the average RDI is 0.1442.  This value is obviously 
much worse than that of BODD+ATC/ECALLM.  Also, the average RDI shows that the 
relative performance of BODD+ATC/ECALLM improves when the bottleneck stage is placed 
further back in the flow line.  The average RDI decreases from 0.0107 to 0.0052 when the 
position of the bottleneck stage moves from the first quarter of the line (low level) to the third 
quarter of the line (high level).     
Finally, we take into consideration the efficiency of the bottleneck-based heuristics.  All 
heuristics are coded in C++ language, and all experiments are performed on a PC with 
Pentium 4, 2.4 GHz CPU and 512 MB RAM.  Table 8 displays the average computation time 
(in sec.) required for BODD+ATC/ECALLM to solve a problem.  The results indicate that 
the average CPU time for BODD+ATC/ECALLM to solve a 100-job problem is less than 0.3 
seconds, which is fast enough for it to be used in practice. 
 
“Please Insert Table 7 about here” 
“Please Insert Table 8 about here” 
 
3. Conclusions 
This paper develops bottleneck-based heuristics to solve the FFL problem with unrelated 
parallel machines and with a bottleneck stage.  The objective is to minimize the number of tardy 
jobs of the problem.  Computational results have shown that the proposed bottleneck-based 
heuristics significantly outperform six well-known dispatching rules for the candidate problem.  
This is mainly contributed by the new approach for determining the arrival times of the jobs to the 
bottleneck stage and the decision rules for scheduling the jobs on the bottleneck stage.  The 
results have also shown that the machine selection rule, ECALLM, should be used when the 
unrelated parallel machines are considered in the stages. 
The experimental design has also found some interesting points.  First, the effectiveness 
of BODD+ATC/ECALLM is robust to the problem size and to the variation of job processing 
time.  Second, BODD+ATC/ECALLM is still effective even if the bottleneck phenomenon is 
not distinct.  Third, the relative performance of BODD+ATC/ECALLM improves when the 
bottleneck stage is placed further back.  Finally, BODD+ATC/ECALLM is very efficient and 
can be applied to real world problems. 
As mentioned in the literature review, there are only a few research papers published on 
the FFL problem with unrelated parallel machines.  These papers deal with the FFL problem 
considering different characteristics, such as sequence dependent setup times, and solve the 
problem using local search methods, such as simulated annealing and genetic algorithms.  
Therefore, this new bottleneck-based approach can be further applied to the FFL problem 
considering other characteristics, such as setup operations and reentrant processing; it can also 
consider other objectives such as total tardiness, total flow time, and makespan.  Also, the 
new approach deserves to be applied to solve other scheduling problems with bottleneck 
stages.  Furthermore, while conducting this research, we found that different methods for 
generating job’s processing time at each stage significantly affected the performance of the 
dispatching rules but not the performance of the proposed heuristics.  For instance, the job’s 
processing time is generated with the assumption that the efficiency of the machines at a stage 
is consistent for all the jobs.  None of the topics, considering the processing time information 
 10
Lenstra, J. K., Rinnooy Kan, A. H. G. and Brucker, P., Complexity of machine scheduling 
problems. Annals of Discrete Mathematics, 1977, 1, 343-362. 
Linn, R. and Zhang, W., Hybrid flow shop scheduling: A survey. Computer & Industrial 
Engineering, 1999, 37, 57–61. 
Low, C. Y., Simulated annealing heuristic for flow shop scheduling problems with unrelated 
parallel machines. Computers and Operations Research, 2005, 32, 2013–2025. 
Moore, J. M., Sequencing n jobs on one machine to minimize the number of tardy jobs. 
Management Science, 1968, 15, 102–109. 
Pinedo, M., Scheduling: Theory, Algorithms, and Systems. 2002 (Prentice-Hall, Upper Saddle 
River, New Jersey). 
Ruiz, R. and Maroto, C., A genetic algorithm for hybrid flowshops with sequence dependent 
setup times and machine eligibility. European Journal of Operational Research, 2006, 
169, 781–800. 
Santos, D. L., Hunsucker, J. L. and Deal, D. E., Global lower bound for flow shops with 
multiple processors. European Journal of Operational Research, 1995, 80, 112–120. 
Sawik, T., An exact approach for batch scheduling in flexible flow lines with limited 
intermediate buffers. Mathematical and Computer Modeling, 2002, 36, 461–471. 
Yang, T., Kuo, Y. and Chang, I., Tabu-search simulation optimization approach for flow-shop 
scheduling with multiple processors – a case study. International Journal of Production 
Research, 2004, 42, 4015–4030. 
Yu, L., Shih, H. M., Pfund, M., Carlyle, W.M., and Fowler, J.W., Scheduling of unrelated 
parallel machines: an application to PWB manufacturing. IIE Transactions, 2002, 34, 
921–931. 
Table 1.  Experimental Design for Generating Test Problems 
Experimental Factor Factor Levels (low, medium, high) 
Number of jobs 30, 50, 100  
Number of stages 5, 10, 20 
Variation of job processing time U[10,50], U[10,100], U[10,200] 
Tightness of job due date U[0.1L, 0.9L], U[0.1L, 1.3L], U[0.1L, 1.7L], 
Workload difference  1.1, 1.5, 2.0  
Position of the bottleneck stage The first, second, and third quarter of the flow line 
 
Table 2.  Performance comparisons of the proposed heuristics and the dispatching rules (in terms of average 
RDI, average number of total tardy jobs (ATJ), and number of best solutions (NBS)) 
ATJ Average RDI (NBS) 
Machine selection rules Machine selection rules Heuristics 
EAAM ECAM ECALLM EAAM ECAM ECALLM 
SPT 39.21  25.63  20.52  0.8322 (0) 0.4063 (19) 0.2793 (66)
EDD 45.35  25.52  17.58  0.9486 (0) 0.3631 (267) 0.1987 (711)
MDD 40.46  19.07  15.35  0.8353 (0) 0.234 (182) 0.1483 (421)
S/RPT+SPT 37.58  23.70  18.71  0.7869 (0) 0.3555 (21) 0.2346 (95)
ATC 44.80  19.92  14.10  0.9388 (0) 0.2384 (352) 0.1162 (847)
COVERT 41.47  19.78  15.56  0.8574 (0) 0.2506 (170) 0.1548 (385)
BDD+ATC 34.21  11.47  10.11  0.6771 (1) 0.0360 (3548) 0.0095 (5560)
BODD+ATC 34.40  11.68  10.07  0.6796 (3) 0.0379 (3805) 0.0077 (5981)
