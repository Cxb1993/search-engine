 I
一、 中文摘要 
在此計畫我們探討k次方樹根問題（k-th tree root problem）與Steiner k次方樹根問
題（k-Steiner root problem）。給一樹狀圖T，它的k次方圖，記為Tk，是一個節點
集與T相同，但兩節點在T中距離在k以內即是相鄰的圖形。 如果G是T的k次方
圖，則T稱為G的一個k次方樹根(k-th tree root)。給定一個圖形G與一個正整數k，
所謂的k次方樹根問題（k-th tree root problem）就是要找一個樹狀圖T使得T的k
次方圖就是G，如果T存在的話。所謂的Steiner k次方樹根問題（k-Steiner root 
problem）是k次方樹根問題的一種推廣：給定一個圖形G與一個正整數k，要找
的樹狀圖T滿足（1）T的節點集V(T)包含G的節點集V(G)且（2）T的k次方圖限制
在V(G)上恰好就是G。在k 為給定的狀況下，此問題稱為方根樹問題（Steiner方
根樹問題）。在此，G必是有弦圖。 
在過去發表於SWAT2006的工作中，根據G 的clique tree是其方根樹的核心
這個觀察，對k次方樹根問題與方根樹問題，我們皆設計了線性時間的演算法。
在發表於SWAT2006的論文中，我們只描述了當k為偶數的演算法。k為奇數時的
演算法在概念上是將maximal clique用minimal vertex separator取代，大致上是重
複k為偶數時的演算法。在此計畫中， 我們找到一個方法將k為奇數的k次方樹根
問題轉化為一個k-1次方樹根的問題， 因此得到一個簡潔的k次方樹根問題的線
性時間演算法。 
關於3-Steiner樹根問題，透過有弦圖的一個分解樹與maximal cliques和
minimal vertex separators在Steiner root的特殊拓樸結構， 設計了第一個多項式時
間的演算法。此初步結果已發表於WG2007. 
 
關鍵詞： Steiner k次方樹根問題、k次方樹根問題、有弦圖 
 III
目錄 
 
一、 Linear Time Algorithms for Tree Root Problems ------------------- 1 
二、 On 3-Steiner Root Problem ------------------------------------------- 19 
a characterization of p-th tree powers and proposed a heuristic algorithm to construct a p-th
tree root. Their algorithm runs in O(n3) time, but its correctness is not proved in the paper.
It was unknown whether the p-th tree root problem can be solved in o(n3) time [10, 11]. In this
paper we improve Kearney and Corneil’s result [10] by giving linear-time algorithms for the tree
root problem and the p-th tree root problem for any given p.
The rest of the paper is organized as follows. Section 2 gives the preliminaries. Section 3
gives our linear-time algorithms for the 2h-th tree root problem for any given positive number
h. Section 4 gives our linear-time algorithms for the (2h+1)-st tree root problems for any given
non-negative number h. Section 5 gives our linear-time algorithm for the tree root problem.
Section 6 concludes the paper.
2 Preliminaries
For any set S, let |S| denote the cardinality of S. All graphs in this paper are undirected, simple,
and have no self-loops. Let V (G) (respectively, E(G)) consist of the nodes (respectively, edges)
of graph G. For any subset U of V (G), let G[U ] denote the subgraph of G induced by U . A
node is dominating in G if it is adjacent to all other nodes in G. Let Dom(G) consist of the
dominating nodes of G. Dom(G) can be computed from G in linear time.
A clique of G is a complete subgraph of G. A clique K of G is maximal if K ∪ {u} for any
node u ∈ G \K is not a clique of G. Let KG consist of the maximal cliques of G. For each node
u of G, let KG(u) consist of the maximal cliques of G containing u. A node u is simplicial in G
if |KG(u)| = 1. For any simplicial node u of G, let κG(u) denote the unique maximal clique of
G that contains u.
Lemma 1 For any two graphs G and H on the same node set, we have that G = H if and only
if KG(u) = KH(u) holds for each node u.
Proof. The only-if direction is straightforward. To see the other direction, suppose that
G 6= H. There have to be two nodes u and w such that edge (u,w) belongs to exactly one of
G and H. Without loss of generality, we may assume that (u,w) belongs to G but does not
belong to H. At least one maximal clique of G contains both u and w. No maximal clique of
H contains both u and w. We have KG(u) 6= KH(u) or KG(w) 6= KH(w).
A subset S of V (G) is a separator of a connected graph G if G[V (G) \ S] has at least two
connected components. A separator S of G is a (u,w)-separator of G if nodes u and w are in
different connected components of G[V (G) \ S]. A (u,w)-separator S of G is minimal if any
proper subset of S is not a (u,w)-separator of G. A minimal node separator of G is a minimal
(u,w)-separator of G for some nodes u and w of G.
2.1 Notation for trees
Let T be a tree. Let PathT (u,w) denote the path of T between u and w. Let distT (u,w) denote
the distance of nodes u and w in T . Let NT,i(u) consist of the nodes w with distT (u,w) ≤ i.
Let diam(T ) = maxu,w∈V (T ) distT (u,w). We define T (i) recursively as follows.
Let T (0) = T . For each i with 1 ≤ i ≤ 0.5 · diam(T ), let T (i) be the tree obtained
by deleting the leaves of T (i− 1).
Let Centroid(T ) be T (b0.5·diam(T )c), which is either a single node or a single edge. Centroid(T )
can be computed from T in linear time.
For any positive integer h, we say that a node u is h-extreme in T if
min
w∈V (T (h))
distT (u,w) = h.
2
2.3 Tree powers
It is well known that any tree power is chordal (see, e.g., [10, 13]). The next lemma displays
dualities among the maximal cliques and minimal node separators of 2h-th and (2h+1)-st tree
powers. For example, if T is as shown in Figure 1(a), then by Lemma 3(1) with h = 3, the
maximal cliques of T 6 are NT,3(vi), i = 23, 24, 26, 27, 29, 30. By Lemma 3(4) with h = 2, the
minimal node separators of T 5 are NT,2(vi), i = 23, 24, 26, 27, 29, 30.
Lemma 3 Let T be a tree. Let h be a nonnegative integer. The following statements hold for
any subsets K and S of V (T ).
1. K is a maximal clique of T 2h if and only if there is a node u of T (h) with NT,h(u) = K.
2. K is a maximal clique of T 2h+1 if and only if there is an edge (u,w) of T (h) with NT,h(u)∪
NT,h(w) = K.
3. S is a minimal node separator of T 2h if and only if there is an edge (u,w) of T (h) with
NT,h(u) ∩NT,h(w) = S.
4. S is a minimal node separator of T 2h+1 if and only if there is a node u of T (h+ 1) with
NT,h(u) = S.
Proof. Statements 1 and 2 were proved by Gupta and Singh [7]. Statement 3 follows
immediately from Statement 1 and the following claim, which holds for any clique tree T of any
chordal graph G:
Claim 1. S is a minimal node separator of G if and only if S = K1 ∩K2 holds for
some edge (K1,K2) of T .
Proof. For each edge e of T , let Se consist of the nodes u of G such that e belongs to
the subtree of T induced by KG(u). That is, Se = {u ∈ V (G) | e ∈ E(T [KG(u)])}.
Ho and Lee [8] showed that S is a minimal node separator of G if and only if
S = Se for some e ∈ E(T ). Therefore, the claim follows from S(K1,K2) = K1 ∩K2,
which can proved by verifying that (K1,K2) is an edge of T [KG(u)] if and only if
{K1,K2} ⊆ KG(u) if and only if u ∈ K1 ∩K2.
A separator S of T 2h+1 is minimal if any proper subset of S is not a separator of T 2h+1.
Note that a minimal node separator of T 2h+1 may not be a minimal separator of T 2h+1, because
a minimal (u,w)-separator may contain a minimal (x, y)-separator for some other nodes x and
y of T 2h+1. We need the following claim to prove Statement 4.
Claim 2. For any node u of T (h+ 1), NT,h(u) is a minimal separator of T 2h+1.
Proof. Let S = NT,h(u). Observe that F = T [V (T ) \ S] has at least two connected
components. For any node x in F , we have distT (u, x) ≥ h+1. Let x and y be nodes
in two distinct connected components of F . We have distT (x, y) ≥ 2h+2, so S is an
(x, y)-separator in T 2h+1. Now, let x and y be two nodes in two distinct connected
components of F with distT (u, x) = distT (u, y) = h + 1. For any node w in S, we
have distT (w, x) ≤ 2h+ 1 and distT (w, y) ≤ 2h+ 1, i.e., T 2h+1[V (T ) \ (S \ {w})] is
connected. Therefore, S is a minimal separator of T 2h+1.
Since a minimal separator of T 2h+1 has to be a minimal node separator of T 2h+1, Claim 2
implies the if direction of Statement 4. As for the other direction, let S be a minimal node
4
T has X-centers if and only if c∗ is an X-center of T .
The if direction is straightforward. As for the only-if direction, let c 6= c∗ be an arbitrary X-
center of T . Observe that c cannot belong to Centroid(T ), even if |Centroid(T )| = 2. Consider
T as being rooted at c. By c 6∈ V (Centroid(T )), there has to be one subtree of T whose depth
is at least two plus that of any other subtree of T . Since c is an X-center with respect to X,
we know that all nodes of X have to be in that deepest subtree. Therefore, the neighbor of c
in that deepest subtree has to be an X-center of T . By iteratively applying this argument, c∗
has to be an X-center of T . By the claim, it takes linear time to determine whether T admits
an X-center by checking whether c∗ is indeed an X-center of T . The remaining X-centers can
be identified by the following easily verifiable observation:
A node node y 6= c∗ of T is an X-center of T if and only if the connected component
of T \ {c∗} containing y does not contain any node in X.
Therefore, all X-centers of T can be computed in O(n) time.
2.5 Global settings
Since chordal graphs can be recognized in linear time [15, 19] and it takes linear time to compute
a clique tree of a chordal graph [9], the rest of the paper assumes that the input n-node and
m-edge graph G is chordal and we are given a clique tree T of G.
3 Solving the 2h-th tree root problem
Let h be a given positive integer. Subsection 3.1 addresses the concept of coordinates of a
node and develops a linear-time algorithm to assign a coordinate to each node. Subsection 3.2
gives a characterization for 2h-th tree powers via the existence of some coordinate assignment.
Subsection 3.3 gives a linear-time algorithm for solving the 2h-th tree root problem for any
given h.
3.1 Coordinates
Let Π(K, i) consist of the nodes u with NT ,i(K) = KG(u). We say that (K, i) is a coordinate
of u if u ∈ Π(K, i). Although the definition is not restricted to the case that G admits a 2h-th
tree root, let us use Figure 1 to explain this crucial concept. Suppose that G = T 6. For each
index i with vi ∈ V (T (3)), let Ki = NT,3(vi). Observe that
KG(v14) = {K24,K27,K30} = NT ,1(K27) = NT ,2(K24).
Therefore, both (K27, 1) and (K24, 2) are coordinates of v14. One can also verify that v15 ∈
Π(K27, 1) ∩Π(K24, 2).
Lemma 6 If G admits a 2h-th tree root T , then each h-extreme node u of T is simplicial in G
and has a unique coordinate (κG(u), 0).
Proof. The lemma follows from Lemmas 3(1) and 4.
A (U, h)-assignment is a function Φ : V (G)→ KG×{0, 1, . . . , h} that satisfies the following
properties, where Φ1(u) (respectively, Φ2(u)) is the first (respectively, second) component of
Φ(u) (i.e., Φ(u) = (Φ1(u),Φ2(u))):
Property 1: For each node u of G, Φ(u) is a coordinate of u.
6
Input:
• a chordal graph G;
• a clique tree T of G;
• a subset U of V (G);
• a positive number h.
Output:
• A (U, h)-assignment Φ.
Algorithm main
1: for each node u of G do
2: let u be white and compute the coordinates of u.
3: end for
4: for each maximal clique K of G do
5: choose a white node u ∈ Π(K,h).
6: let Φ(u) = (K,h) and let u be black.
7: end for
8: for each white node u of G do
9: let `(u) be the largest index i with i ≤ h−1 such that u ∈ Π(K, i) holds for some maximal
clique K of G.
10: end for
11: let K∗ be a maximal clique of G in V (Centroid(T )).
12: for each white node u in Dom(G) do
13: let Φ(u) = (K∗, h− 1) and let u be gray.
14: end for
15: for each node u in U do
16: call hook(u, `(u)).
17: end for
18: while there are still white nodes of G do
19: let u be a white node of G with the smallest `(u).
20: call hook(u, `(u)).
21: end while
Subroutine hook(u, i)
1: let K be a maximal clique of G with u ∈ Π(K, i).
2: let Φ(u) = (K, i) and let u be black.
3: for each white node w ∈ Π(K, i) do
4: let Φ(w) = (K, i) and let w be gray.
5: end for
6: for j = i+ 1 to h− 1 do
7: choose a non-black node w ∈ Π(K, j).
8: let Φ(w) = (K, j) and let w be black.
9: for each white node w ∈ Π(K, j) do
10: let Φ(w) = (K, j) and let w be gray.
11: end for
12: end for
Algorithm 1: Computing a (U, h)-assignment.
8
As for the other direction of the claim, suppose that K is an Xu-center of T [KG(u)].
That is,
distT (K,K ′) ≤ distT (K,K ′′) = `
holds for any K ′ ∈ KG(u) and K ′′ ∈ Xu. Thus, Condition (1) holds for any maximal
clique K ′ of G:
• By definition of `, we know that distT (K,K ′) > ` implies u /∈ K ′.
• Since u ∈ K, we know that u 6∈ K ′ implies the existence of a maximal clique
K ′′ on PathT (K,K ′) with K ′′ 6= K ′ and K ′′ ∈ Xu. Therefore, distT (K,K ′) >
distT (K,K ′′) = `.
Observe that |KG(u)| is no more than O(1) plus the degree of node u in G (see, e.g. [6]). We
have ∑
K∈KG
|V (K)| =
∑
u∈V (G)
|KG(u)| = O(n+m).
It follows from Claim 3 and Lemma 5 that Steps 1–3 of algorithm main can be implemented
to run in O(m+ n) time. After obtaining all coordinates of all nodes, Steps 4–14 of algorithm
main can easily be implemented to run in O(m+ n) time. By verifying that each node changes
color O(1) times throughout the execution of Algorithm 1, it is also not difficult to see that
Steps 15–21 of algorithm main run in O(m+ n) time.
3.2 A characterization for 2h-th tree powers
Lemma 9 A 2h-th tree root of G in which U is h-disjoint can be obtained from a (U, h)-
assignment in linear time.
Proof. Let Φ be a (U, h)-assignment. We construct a graph T with V (T ) = V (G) as follows.
• Let C consist of the nodes u of G with Φ2(u) = h. By Properties 1 and 2 of Φ, we
know that Φ provides a one-to-one mapping between C and KG. Let T [C] be the tree
isomorphic to T via this one-to-one mapping.
• Let ut,0 be the t-th node in U . For each t = 1, 2, . . . , |U |, let ut,h be the node with
Φ(ut,h) = (Φ1(ut,0), h). By Property 4 of Φ, we can choose a set of (h − 1)|U | distinct
nodes ut,j with 1 ≤ t ≤ |U | and 1 ≤ j ≤ h− 1 such that Φ(ut,j) = (Φ1(ut,0), j). Now, for
each t = 1, 2, . . . , |U | and j = 0, 1, . . . , h− 1, we add an edge between ut,j and ut,j+1.
• For each node u that is still not incident to any edge, we know that 0 ≤ Φ2(u) < h. By
Property 3 of Φ, we know that there is a node w with Φ(w) = (Φ1(u), 1 + Φ2(u)). We
simply add an edge between u and w.
One can easily verify that T can be obtained from Φ in linear time; the resulting T is a tree; U
is h-disjoint in T ; and the path of T attached to T [C] has length no more than h.
We first prove T (h) = T [C] by showing that each leaf of T [C] is attached by a length-h path
in T . By definition of T , it suffices to ensure that for each leaf K of T , there exists a node v
of G with Φ(v) = (K, 0): Let K ′ be the maximal clique of G with (K,K ′) ∈ E(T ). By the
maximality of K, there exists a node u in K \K ′. By definition of clique tree, KG(u) induces
a subtree of T . Since K is a leaf of T , it follows that KG(u) = {K}, i.e., (K, 0) is the unique
coordinate of u. By Property 1 of Φ, we have Φ(u) = (K, 0).
We next show that Φ(v) = (K,h) implies NT,h(v) = K.
10
4.1 A linear-time reduction
Lemma 11 Let h be a positive integer. Let T and Tˆ be trees on the same node set such that
neither of T 2h+1 and Tˆ 2h+1 is complete. Let R be the (h + 1)-reduced tree of T . Let Rˆ be the
(h+ 1)-reduced tree of Tˆ . Then, T 2h+1 = Tˆ 2h+1 if and only if
1. R2h = Rˆ2h and
2. κT 2h+1(u) = κTˆ 2h+1(u) holds for each (h+ 1)-extreme node u of T .
Proof. We first prove the only-if direction. Suppose that T 2h+1 = Tˆ 2h+1 is not complete.
By Lemma 3(2), the following three sets are identical: (i) the set of (h + 1)-extreme nodes of
T , (ii) the set of (h + 1)-extreme nodes of Tˆ , and (iii) the set of simplicial nodes of T 2h+1.
Thus, Condition 2 holds trivially from Lemma 1. Assume for a contradiction that Condition 1
does not hold. That is, there are nodes u and w of R (and Rˆ) such that dist Rˆ(u,w) ≤ 2h and
distR(u,w) > 2h. Hence, dist Tˆ (u,w) ≤ 2h and distT (u,w) > 2h. By dist Tˆ (u,w) ≤ 2h, there
has to be a node x of Tˆ (h+ 1) such that NTˆ ,h(x) contains both u and w. By distT (u,w) > 2h,
there cannot be any node y of T (h+1) such thatNT,h(y) contains both u and w. By Lemma 3(4),
some minimal node separator of Tˆ 2h+1 contains both u and w, but no minimal node separator
of T 2h+1 contains both u and w, contradicting the assumption that T 2h+1 = Tˆ 2h+1.
As for the other direction, we show that Conditions 1 and 2 together imply that the statement
distT (u,w) ≤ 2h+ 1 if and only if dist Tˆ (u,w) ≤ 2h+ 1
holds for any two nodes u and w. Suppose that one of u and w, say, u is an (h+1)-extreme node of
T . One can see that (i) distT (u,w) ≤ 2h+1 if and only if w ∈ κT 2h+1(u); (ii) dist Tˆ (u,w) ≤ 2h+1
if and only if w ∈ κTˆ 2h+1(u). Since Condition 2 ensures κT 2h+1(u) = κTˆ 2h+1(u), the above
statement holds.
It remains to prove the above statement for nodes u and w that are both in R (and Rˆ). By
R2h = Rˆ2h, we have distT (u,w) ≤ 2h if and only if dist Tˆ (u,w) ≤ 2h. Therefore, it suffices to
show that distR(u,w) = 2h+ 1 implies dist Rˆ(u,w) ≤ 2h+ 1. Let (x, y) be the middle edge on
the path between u and w in T . Clearly, both x and y are in R(h). Without loss of generality,
let us assume that distR(u, x) = h = distR(w, y). Since (x, y) is an edge of R(h), it follows from
Lemma 4 that maximal cliques NR,h(x) and NR,h(y) of R2h are adjacent in the unique clique
tree of R2h = Rˆ2h. Let x′ and y′ be the nodes of Rˆ(h) corresponding to maximal cliques NR,h(x)
and NR,h(y) through the isomorphism between Rˆ(h) and the clique tree of Rˆ2h as defined in
Lemma 4. That is, NRˆ,h(x
′) = NR,h(x) and NRˆ,h(y
′) = NR,h(y). It follows that dist Rˆ(x
′, u) ≤ h
and dist Rˆ(y
′, w) ≤ h. Observe that (x′, y′) is an edge of Rˆ(h). Therefore, dist Rˆ(u,w) ≤ 2h+ 1.
The following lemma shows that the above reduction can be done in linear time.
Lemma 12 Given a graph T 2h+1, where tree T and integer h are unknown, it takes linear time
to compute R2h, where R is the (h+ 1)-reduced tree of T .
Proof. Let S consist of the minimal node separators of T 2h+1, which can be computed from
T 2h+1 in linear time [2]. By Lemmas 3(1) and 3(4), we know that S is exactly the set of the
maximal cliques of R2h. Thus, the edges of R2h can be obtained naively as follows:
For each set S in S
For each pair u and w of nodes in S
output edge (u,w).
12
of Ti and ui the only simplicial node of R2hi that belongs to Si. Therefore, Si \ {ui}
is a subset of some set in Si+1. It also follows from Lemma 3(1) that Si+1 consists
of the maximal cliques of R2hi+1.
Since Si consists of the maximal cliques ofR2hi , there has to be at least one simplicial node ofR2hi .
Therefore, Step 5 never aborts throughout the execution. For the correctness of Algorithm 2,
it remains to ensure that if nodes ui and uj with i < j belong to a set of S1, then uj ∈ Si.
Let k be the largest index such that Sk contains a set that contains both ui and uj . Since ui
is deleted in the i-th iteration, k ≤ i. We have shown above that Sk \ {uk} has to be a subset
of a set in Sk+1. If k < i, then some set in Sk+1 contains both ui and uj , contradicting the
definition of k. Therefore, k = i. By definition of Si, it is the only set in Si that contains ui.
Thus, by definition of k, uj is also in Si.
As for the running time, each iteration the while-loop deletes a node. Therefore, the number
of iterations of the while-loop is O(n). The number of times that Step 8 is executed is exactly
the number of edges in the output graph. The number of times that Step 13 is executed is∑
S∈S |S|, which is also linear in the size of the input graph. Therefore, Algorithm 2 runs in
linear time.
4.2 A linear-time algorithm for the (2h+ 1)-st tree root problem
Theorem 2 The (2h + 1)-st tree root problem for any given n-node m-edge graph G and any
given non-negative integer h can be solved in O(n+m) time.
Proof. The proof focuses on the case that h is positive. We compute the maximal cliques
and the minimal node separators of G and then compute the simplicial nodes of G. For each
maximal clique K of G that contains at least one simplicial node, we arbitrarily choose a node
uK of K that belongs to exactly one minimal node separator of G. Let U consist of these nodes
uK , one for each such maximal clique K that contains simplicial nodes of G. Now we apply
Lemma 12 to obtain graph G′ from G. Note that even if the input chordal graph G is not an
odd tree power, the algorithm described in Lemma 12 still runs or aborts in linear time. If
G = T 2h+1 for a tree T , then G′ = R2h where R is the (h+ 1)-reduced tree of T . Moreover, we
know that if G is the (2h+ 1)-st power of some tree, then there G′ admits a 2h-th tree root T ′
such that U is h-disjoint in T ′. We then resort to Lemma 10 to obtain such a tree T ′ in linear
time. The resulting tree T is obtained from T ′ by attaching each simplicial node x to the node
uK in U such that x and uK belongs to the same maximal clique K of G.
We show that if G = Tˆ 2h+1 holds for some unknown tree Tˆ , then the algorithm correctly
outputs a tree T with G = T 2h+1. Let Rˆ be the (h + 1)-reduced tree of Tˆ . By Lemma 12, we
know that G′ = Rˆ2h. Since each node uK of U belongs to exactly one minimal node separator
of G, uK has to be an h-extreme node of Rˆ. Moreover, if u and u′ are two distinct nodes in
U , then dist Tˆ (u, u
′) ≥ 2h, since otherwise u and u′ would have to belong to the same maximal
clique of G, contradicting the definition of U . Therefore, Tˆ is a 2h-th tree root of G′ such that
U is h-disjoint in Tˆ . It follows from Lemma 10 that the tree R obtained by our algorithm has
to be a 2h-th tree root of G′ such that U is h-disjoint in T . We have R2h = Rˆ2h.
Next we show that κTˆ 2h+1(x) = κT 2h+1(x) holds for each simplicial node x of G. Let uK
be the node of U that x attached to in T . Let y be the node of T (h + 1) that is closest to x
in T . Let yˆ be the node of Tˆ (h + 1) that is closest to x in Tˆ . κT 2h+1(x) consists of the nodes
in NT,h(y) plus the nodes attached to uK in T . Since NT,h(y) is the maximal clique of R2h
that contains uK and NTˆ ,h(yˆ) is the maximal clique of Rˆ
2h that contains uK , by Lemma 3(4)
we have NT,h(y) = NTˆ ,h(yˆ). A node w belongs to K \ NTˆ ,h(yˆ) if and only if w is an (h + 1)-
extreme node of Tˆ with dist Tˆ (w, z) = h, where z is the node of Tˆ (h) that is closest to uK
14
Case 3: |Dom(G)| ≥ 3. We show
minH = d0.5 · diam(T )e+ 1.
Let h be an index in H. Let T be a 2h-th tree root of G in which U is h-disjoint. By |Dom(G)| ≥
3, one can verify that diam(T ) ≤ 4h− 2. Therefore, diam(T ) = diam(T (h)) ≤ 2h− 2, implying
that minH ≥ 0.5 · diam(T ) + 1. Observe that d0.5 · diam(T )e+ 1 is the smallest number that
is no less than 0.5 · diam(T ) + 1. We prove the equality by showing that if 2h ≥ diam(T ) + 4,
then G also admits a (2h− 2)-nd tree root in which U is (h− 1)-disjoint.
The rest of the proof assumes diam(T ) ≤ 2h− 4, which directly implies that
NT ,h−2(K∗) = KG. (2)
For any maximal clique K of G other than K∗, observe that diam(T ) ≤ 2h− 4 also implies
Π(K,h) ⊆ Π(pi(K), h− 1); (3)
Π(K,h− 1) ⊆ Π(pi(K), h− 2). (4)
Let Φ be a (U, h)-assignment. Let Φ′ be obtained from Φ by the following steps.
1. For each node u with Φ2(u) ≤ h− 2, we simply let Φ′(u) = Φ(u).
2. For the node u with Φ(u) = (K∗, h), i.e., u = N−1T,h(K
∗), let Φ′(u) = (K∗, h− 1). For each
node u of G with Φ(u) = (K∗, h− 1), let Φ′(u) = (K∗, h− 2).
3. For each maximal clique K 6= K∗ of G that is not a leaf of T , we do the following:
(a) Choose an arbitrary child K1 of K in T and let Φ′(N−1T,h(K1)) = (K,h− 1).
(b) For each child K2 of K other than K1, let Φ′(N−1T,h(K2)) = (pi(K), h− 2).
(c) For each node u of G with Φ(u) = (K,h− 1), let Φ′(u) = (pi(K), h− 2).
4. For each maximal clique K 6= K∗ of G that is a leaf of T , we do the following:
(a) Choose an arbitrary node u with Φ(u) = (K,h− 1) and let Φ′(u) = (K,h− 1).
(b) For each node w 6= u with Φ(w) = (K,h− 1), let Φ′(w) = (pi(K), h− 2).
5. For each node w with Φ(w) = (K,h) and pi(K) = K∗, let Φ′(w) = (K∗, h− 2).
We show that Φ′ is a (U, h− 1)-assignment.
• Property 1: One can verify that Φ′(u) is well defined for each node u of G. Moreover,
by Property 1 of Φ and Equations (2), (3), and (4), one can also verify that Φ′(u) is a
coordinate of u.
• Property 2: By Property 2 of Φ and Steps 2, 3(a), and 4(a), one can see that for each
maximal clique K of G, there exists a unique node u of G with Φ′(u) = (K,h− 1).
• Property 3: Property 2 of Φ′ ensures that if u is a node with Φ′2(u) = h − 2, then there
is a node w with Φ′1(w) = Φ′1(u) and Φ′2(w) = Φ′2(u) + 1. Property 3 of Φ and Step 1
ensures that if u is a node with Φ′2(u) < h−2, then there is a node w with Φ′1(w) = Φ′1(u)
and Φ′2(w) = Φ′2(u) + 1.
• Property 4: It follows immediately from Step 1.
16
[8] C.-W. Ho and R. C. T. Lee. Counting clique trees and computing perfect elimination
schemes in parallel. Information Processing Letters, 31:61–68, 1989.
[9] W.-L. Hsu and T.-H. Ma. Fast and simple algorithms for recognizing chordal comparability
graphs and interval graphs. SIAM Journal on Computing, 28:1004–1020, 1999.
[10] P. E. Kearney and D. G. Corneil. Tree powers. Journal of Algorithms, 29:111–131, 1998.
[11] L. C. Lau. Bipartite roots of graphs. In Proceedings of the Fifteenth Annual ACM-SIAM
Symposium on Discrete Algorithms, pages 952–961, 2004.
[12] L. C. Lau and D. G. Corneil. Recognizing powers of proper interval, split, and chordal
graphs. SIAM Journal on Computing, 18(1):83–102, 2004.
[13] Y. L. Lin and S. Skiena. Algorithms for square roots of graphs. SIAM Journal on Discrete
Mathematics, 8:99–118, 1995.
[14] R. Motwani and M. Sudan. Computing roots of graphs is hard. Discrete Applied Mathe-
matics, 54:81–88, 1994.
[15] D. Rose, R. Tarjan, and G. Lueker. Algorithmic aspects of vertex elimination of graph.
SIAM Journal on Computing, 5(2):266–283, 1976.
[16] I. C. Ross and F. Harary. The squares of a tree. Bell System Technical Journal, 39:641–647,
1960.
[17] P. Sreenivasa Kumar and C. E. Veni Madhavan. Minimal vertex separators of chordal
graphs. Discrete Applied Mathematics, 89:155–168, 1998.
[18] P. Sreenivasa Kumar and C. E. Veni Madhavan. Clique tree generalization and new sub-
classes of chordal graphs. Discrete Applied Mathematics, 117:109–131, 2002.
[19] R. Tarjan and M. Yannakakis. Simple linear time algorithms to test chordality of graphs,
test acyclicity of hypergraphs and selectively reduce acyclic hypergraphs. SIAM Journal
on Computing, 13(3):566–576, 1984.
18
Figure 1: (a)A graph G, (b)A 3-Steiner root T of G.
called the k-tree root of G. Kearney and Corneil showed that the problem
can be solved in O(n3) time [14]. The result was improved to O(n+m) by
Chang, Ko, and Lu [2].
Consider an unrooted tree T with leaf set V . The k-leaf power of T
is a graph, denoted as T kL, with V (T
k
L) = V and E(T
k
L) = {(u, v) | u, v ∈
V and dT (u, v) ≤ k}. We call T a k-leaf root of T kL. The k-leaf power
recognition problem is to decide whether a graph has such a k-leaf root.
While requiring that all internal nodes of a k-leaf root have degrees at least
three, the k-leaf power recognition problem becomes the k-phylogenetic root
problem and such a k-leaf root is called a k-phylogenetic root of G. These
two problems were studied in [1, 4, 5, 10–13, 15]. Nishimura et. al. showed
that the k-leaf power recognition problem can be solved in O(|V |3) time for
k ≤ 4 [15]. Lin et. al. showed that the k-phylogenetic root problem can
be solved in O(|V | + |E|) time for k ≤ 4 [13]. Under the assumption that
the maximum degree of the phylogenetic root is bounded from above by a
constant, there is a linear-time algorithm that determines whether a graph
has a k-phylogenetic root for arbitrary k [4, 5]. The complexity of the k-leaf
power recognition problem is still open for k ≥ 5 [7]. Special cases of the
problem with k = 5 were studied in [10, 12].
A tree T is called a Steiner tree of vertex set V if V ⊆ V (T ). Given a
graph G and positive integer k, the k-Steiner root problem asks for a Steiner
tree T of V (G) such that G is the subgraph of T k induced by V (G). If such
a tree T exists, it is called a k-Steiner root of G. For a graph G, denote
the set of k-Steiner roots of G by SRk(G). A graph and a 3-Steiner root of
the graph are shown in Figure 1(a) and (b) respectively. This problem was
first studied in [13], and can be solved in linear time for k ≤ 3 [1, 13]. But
it remains open for k ≥ 3.
This paper gives a linear time algorithm for the 3-Steiner root problem.
The k-leaf power recognition problem can be solved in polynomial time if
20
a tree T is a maximal subtree containing u as a leaf. Thus the number of
branches at u is the degree of u.
A graph G is chordal if it contains no induced subgraph which is a cycle
of size greater than three. In other words, G is chordal if every cycle of
length at least four has a chord, i.e., an edge between two nonconsecutive
vertices of the cycle. Since any induced subgraph of a chordal graph is still a
chordal graph and any power of a tree is a chordal graph, any graph having
Steiner roots is chordal. Namely, for a graph G, if SRk(G) 6= ∅ for some
k ≥ 0, then G is chordal. Thus, in the rest of paper, we only consider chordal
graphs. Chordal graphs have been extensively studied [9].
3 Sketch of the Algorithm
Let T be a k-Steiner root of graph G. We call the vertices and edges of T tree
vertices and tree edges, respectively. The vertices in V (G) and V (T ) \V (G)
are called real vertices and Steiner vertices, respectively. For a set S of tree
vertices, we use Real(S) to denote the set of real vertices in S. Let X and
Y be subsets of V (T ) and V (G), respectively. We use T [X] to denote the
subgraph (a forest) of T induced by X. We use T (Y ) to denote the minimal
subtree of T containing Y . Actually, T (Y ) is the subtree T ′ of T satisfying
the conditions that Real(V (T ′)) = Y and all leaves of T ′ are real vertices.
Let S be any minimal vertex separator of G and K be any maximal clique
of G. If T (S) is a star, its topology is represented by (a, S \ a), where a
is the central vertex of T (S). When a is a Steiner vertex, the topology is
denoted as (β, S), where β denotes a generic Steiner vertex. If T (K) is a
conjoined star, let its two central vertices of be a and b, where a and b can
be Steiner vertices. Let Sa = Real(NT (a)\{b}) and Sb = Real(NT (b)\{a}).
Then Sa ∪ Sb ∪ Real({a, b}) = K. The topology of T (K) is represented by
(a, Sa, b, Sb). We refer to edge (a, b) as the central edges of T (K). Please
refer to Figure 1(b) for examples. A bold edge in tree T of Figure 1(b) is
the central edge of T (K) of some maximal clique K of G. For instance,
K8 = {v3, v6, v9, v14, v15, v16}, T (K8) is a conjoined stars, and the central
edge of T (K8) is (v14, β) where β is a Steiner vertex.
In the following, α and β are generic Steiner vertices. A minimal vertex
separator S ⊂ K is maximal with respect to K if S is not properly contained
in any other minimal vertex separator contained in K. A minimal vertex
separator is maximal if it is maximal with respect to every maximal clique
containing it.
Lemma 1 Suppose G is connected and has a 3-Steiner root T . Let S and
K be a minimal vertex separator and a maximal clique of G, respectively.
Let N1, N2, and N3 denote the set of minimal vertex separators of type 1,
type 2, and type 3, contained in K. Let N a2 denote the set of the minimal
22
• Both T1(S) and T2(S) are stars and both central vertices of T1(S) and
T2(S) are Steiner vertices.
For two compatible 3-Steiner roots T1 and T2 of G1 and G2 sharing a clique
S, respectively, define the join Steiner tree of T1 and T2 at S, denoted as
T1
⊙
S T2 or as T1
⊙
T2 if S is clear, as follows: First identify the two central
vertices of T1(S) and T2(S) if both T1(S) and T2(S) are stars and both central
vertices of T1(S) and T2(S) are Steiner vertices. Now T1 and T2 share a
vertex set V (T1(S)) = V (T2(S)). Then let T1
⊙
S T2 = T1
⊕
V (T1(S))
T2.
Immediately following the above definition we have the following lemma.
Lemma 2 Suppose G1 and G2 share a clique S and both G1 and G2 have 3-
Steiner roots. Let T1 and T2 be 3-Steiner roots of G1 and G2, respectively. If
T1 and T2 are compatible and T = T1
⊙
S T2 has the property that dT (V (G1)\
S, V (G2) \ S) > 3, then T is a 3-Steiner root of G1
⊕
S G2.
Let G = (V,E) be a connected chordal graph and K¯ be a maximal clique
of G. A decomposition tree of G with respect to K¯, denoted by D(G, K¯), is
recursively defined as follows. Every node H of a decomposition tree is asso-
ciated with a 5-tuple (HG,HV ,HK ,HC ,HS). Decomposition tree D(G, K¯)
is a rooted tree rooted at node R with RG = G, RV = V , RK = K¯, RC = V ,
and RS = ∅. Node H has no child if HG is a clique. Suppose HG is not
a clique and HG −HK has k components. Let HG[C1],HG[C2], . . . , HG[Ck]
be the k components of HG − HK . Let Si = NG(Ci) and Vi = Ci ∪ Si
for 1 ≤ i ≤ k. Clearly Si is a proper subset of HK and is a minimal ver-
tex separator of G for 1 ≤ i ≤ k. Let Ki be a maximal clique of G such
that Si ⊂ Ki and Ki ⊆ Vi for 1 ≤ i ≤ k. Then H has k child nodes
H1,H2, . . . ,Hk with (Hi)V = Vi, (Hi)G = G[Vi], (Hi)K = Ki, (Hi)S = Si,
and (Hi)C = Ci for 1 ≤ i ≤ k. Figure 2 shows a decomposition tree of
graph G shown in Figure 1(a). Since G is a chordal graph, each node H
of D(G, K¯) corresponds to a maximal clique HK of G. Each edge (H, Hˆ)
of D(G, K¯), where Hˆ is a child node of H, corresponds to a minimal ver-
tex separator HˆS = NG(HˆC) = HK ∩ HˆK of G. Let DH be the subtree of
D(G, K¯) rooted at node H and V (DH) be the set of nodes of DH . Then
HV =
⋃
Hˆ∈V (DH) HˆK . In fact, a decomposition tree of a chordal graph is a
special clique tree.
Now we are ready to describe the algorithm for determining whether a con-
nected chordal graph having a 3-Steiner root. The algorithm arbitrarily se-
lects a maximal clique K¯ of G and constructs a decomposition tree D(G, K¯)
of G with respect to K¯. Then for each node H of D(G, K¯) perform the
following operations in the ordering from leaves up to the root in a dynamic
programming way: Firstly compute a set P(H) of topologies of HK . Next
compute a set T (H) of 3-Steiner roots of HG. Initially T (H) is empty. For
24
For a node H with |HS | = 2, either T (HS) is a star with a Steiner central
vertex or T (HS) is an edge in any 3-Steiner root T of G. Suppose |HS | = 2.
Let Υstar(H) be a 3-Steiner root of HG such that both vertices in HS are
leaves of Υstar(H) and the distance λstar(H) = dΥstar(H)(HC ,HS) between
HS and HC in tree Υstar(H) is the maximum among all distances between
HS and HC in all 3-Steiner roots of HG. We observe that G has a 3-Steiner
root T with T (HV ) = Υstar(H) if G has a 3-Steiner root T ′ with T ′(HS)
being a star. Assume that HS = {a, b} and H∗ is the parent node of H.
Suppose T is a 3-Steiner root of G with that T (HS) is an edge. If b is a
leaf of T (HV ), and dT (HV )(HS , HC) = 1, then for any sibling node H
′ of
H with H ′S = HS , a is a leaf of T (H
′
V ) and dT (H′V )(H
′
S ,H
′
C) = 2. Besides,
dT (H∗K)(HS , H
∗
K \HS) > 1. Similarly, if dT (H∗K)(HS ,H∗K \HS) = 1 and b is
a central vertex and a is a leaf of T (H∗K), then for all child node H
′ of H∗,
b is a leaf and dT (H′V )(H
′
S ,H
′
C) > 1.
Now consider a node H with |HS | > 2. For a topology S of HS , define
Υ(H,S) be a 3-Steiner root Π of HG with that Π(HS) = S and the dis-
tance dΠ(HS ,HC) between HS and HC in Π is maximum among distances
between HS and HC in all 3-Steiner roots Π′ of HG with Π′(HS) = S. It is
straightforward to verify that if G has a 3-Steiner root T with T (HS) = S,
then G has a 3-Steiner root T such that T (HV ) = Υ(H,S).
The correctness of the algorithm is based upon the above observations.
Now we describe the algorithm for obtaining a set P(H) of potential topolo-
gies of HK for a node H of D(G, K¯). For simplicity of notations, let N1,
N2, and N3 denote the set of minimal vertex separators of type 1, type 2,
and type 3 contained in HK , respectively, and let N a2 denote the set of the
minimal vertex separators in N2 containing vertex a. For a node H with
|HS | = 1, define λ(H) to be the maximum distance dΠ(HS ,HC) among all
3-Steiner roots Π of HG in T (H) and define Υ(H) to be a 3-Steiner root Π
of HG in T (H) with dΠ(v,HC) = λ(H). In the following, assume that G
has a 3-Steiner root and α and β are generic Steiner vertices. The contain-
ment relation between maximal cliques and minimal vertex separators are
important in solving the problem. We classify HK into 7 types according to
the minimal vertex separators contained in HK .
1. HK is a type (a) clique, i.e., HK contains two minimal separators A
and B of type 3 and A ∩ B = {a, b}. Then, let P(H) = {(a,A \
{a, b}, b, B \ {a, b}), (b, A \ {a, b}, a, B \ {a, b})}.
2. HK is a type (b) clique, i.e., HK contains two minimal separators
A and B of type 3 and A ∩ B = {a}. Then, let P(H) = {(a,A \
{a}, β, B \ {a}), (β,A \ {a}, a, B \ {a})}. For example, (H8)K of the
decomposition tree in Figure 2 is a type (b) clique.
3. HK is a type (c) clique, i.e., HK contains two minimal separators A
and B of type 3 and A ∩B = ∅. Then, either P(H) = {(α,A, β,B)}.
26
(a) |N a2 | ≥ 2 and |N b2 | ≥ 2. Then P(H) = {(a,A, b,HK \ (A ∪
{a, b}))}.
(b) |N a2 | ≥ 2 and N b2 = {S = {b, c}}. Then P(H) = {(a,A, b,HK \
(A ∪ {a, b})), (a,A, c,HK \ (A ∪ {a, c}))}
(c) |N a2 | = 1 and |N b2 | = 1. Let N a2 = {{a, b}} and N b2 = {{c, d}}. If
HK = {a, b, c, d}, then P(H) = {(α, {a, b}, β, {c, d}), (a, {b}, c,HK\
{a, b, c}), (a, {b}, d,HK\{a, b, d}), (b, {a}, c,HK\{a, b, c}), (b, {a}, d,HK\
{a, b, d})}; else P(H) = {(a, {b}, c,HK \ {a, b, c}), (a, {b}, d,HK \
{a, b, d}), (b, {a}, c,HK \ {a, b, c}), (b, {a}, d,HK \ {a, b, d})}.
6. HK is a type (f) clique, i.e., N3 = ∅ and there is a vertex a ∈ HK such
that N2 = N a2 . Let Sa =
⋃
S∈Na2 S. There are two cases:
(a) |N a2 | ≥ 2. We have several cases:
i. There exists a child node Hˆ of H with |HˆS | = 2 satisfying
one of the following two conditions hold: (i) Π(HˆS) is a star
for all trees Π ∈ T (Hˆ); and (ii) there does not exists a tree
Π ∈ T (Hˆ) with that Π(HˆS) is an edge, a is a leaf of Π,
and dΠ(HˆS , HˆC) > 1. Then assume HˆS = {a, x} and let
P(H) = {(a,HK \ {a, x}, β, {x}), (a, {x}, β,HK \ {a, x})}.
ii. The above case does not hold and there exists a child node Hˆ
of H with |HˆS | = 1 such that λ(Hˆ) < 3. Assume HˆS = {x}.
If x ∈ Sa and a 6= x, let P(H) = {(a,HK \ {a, x}, β, {x})}.
Otherwise x /∈ Sa, let P(H) = {(a, Sa \ {a}, β,HK \ Sa)}.
iii. |HS | = 2 and the above two cases do not hold. Assume
HS = {a, b}. In a 3-Steiner root T of G either T (HS) is an
edge or T (HS) is a star. Let P(H) = {(a, Sa \ {a}, β,HK \
Sa), (a,HK \ {a, b}, β, {b})}.
iv. |HS | = 1 and the above three cases do not hold. Assume
HS = {x}. If x ∈ Sa and a 6= x, let P(H) = {(a,HK \
{a, x}, β, {x}), (a, Sa \ {a}, β,HK \ Sa)}. Otherwise x /∈ Sa,
let P(H) = {(a, Sa \ {a}, β,HK \ Sa)}.
(b) |N a2 | = 1 and N a2 = {S = {a, b}}. Let P(H) = {(α, S, β,HK \S),
(a, {b}, β,HK \ S), (b, {a}, β,HK \ S)}.
7. HK is a type (g) clique, i.e., N3 = ∅ and N2 = ∅. We claim that
if G has a 3-Steiner root, then there is a 3-Steiner root T of G such
that T (K) = (α, Va, β, Vb) where Va ∩ Vb = ∅ and Va ∪ Vb = HK .
Assume HS = {u}. If λ(Hˆ) > 1 for all child nodes, then let P(H) =
{(α, {u}, β,HK \ {u})}. Otherwise there exists exactly one child node
Hˆ of H with λ(Hˆ) = 1. Assume HˆS = {v}. Let P(H) = {(α,HK \
{v}, β, {v})}.
28
4 Complexity
We use n and m for the numbers of vertices and edges of a graph, respec-
tively. A chordal graph can be recognized in O(n+m) time. A clique tree of
a chordal graph can be constructed in O(n+m) time. A decomposition tree
D(G, K¯) of a chordal graph G can be constructed from a clique tree of G in
O(n+m) time. There are O(n) maximal cliques and O(n) minimal vertex
separators in a chordal graph. Every node of a decomposition tree corre-
sponds to a maximal cliques. Hence the number of nodes of a decomposition
tree is O(n). Every edge of a decomposition tree corresponds to a minimal
vertex separator. It is easy to verify that only constant number of topologies
of HK in P(H) for every node H of D(G, K¯). For each topology Γ ∈ P(H),
we run Algorithm 1 once to construct the a 3-Steiner root Υ of HG if it
exists. The running time of Algorithm 1 is O(|HK |+
∑
1≤i≤h |(Hˆi)S |) where
Hˆ1, Hˆ2, . . . , Hˆh are all child nodes of H. Since we run Algorithm 1 |P(H)|
times for each node H of D(G, K¯), the total running time of Algorithm 1 is∑
H∈V (D(G,K¯))O(|P(H)| · (|HK |+
∑
i |(Hˆi)S |))
=
∑
H∈V (D(G,K¯))O(|P(H)| · 2 · |HK |) = O(n +m). The total running time
for computing P(H) for each node H of D(G, K¯) is O(n+m). It can be an-
alyzed in the same way as we did for the total running time of Algorithm 1.
Thus we have the following theorem:
Theorem 1 A graph having a 3-Steiner root can be recognized in O(n+m)
time.
References
[1] A. Brandsta¨dt and Van Bang Le, Structure and linear time recognition
of 3-leaf powers, Information Processing Letters 98 (2006) 133–138.
[2] Maw-Shang Chang, Ming-Tat Ko, and Hsueh-I Lu, Linear time algo-
rithms for tree root problems, in Proceedings of the 10th Scandinavian
Workshop on Algorithm Theory (SWAT 2006), Lecture Notes in Com-
put. Sci. 4059, Springer-Verlag, Berlin, (2006) 411–422.
[3] L. Sunil Chandran, A linear time algorithm for enumerating all the max-
imum and minimal separators of a chordal graph, in Proceedings of the
7th Annual International Conference on Computing and Combinatorics
(COCOON 2001), Lecture Notes in Comput. Sci. 2108, Springer-Verlag,
Berlin, (2001) 308–317.
[4] Z.-Z. Chen, T. Jiang, and G.-H. Lin, Computing phylogenetic roots with
bounded degrees and errors, SIAM J. Comput. 32 (2003) 864–879.
[5] Z.-Z Chen and Tatsuie Tsukiji, Computing bounded-degree phylogenetic
roots of disconnected graphs, Journal of Algorithms 59 (2006) 125–148.
30
