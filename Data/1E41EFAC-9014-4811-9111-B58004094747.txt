I 
中文摘要 
實際生產線的裝配系統，經常是由流程型工廠(flowshop)與平行機(parallel machines)兩
者混合而成的環境，此生產系統稱之為混合型流程工廠(hybrid flowshop)。而一般的排程研
究，大多假設機器在任何時刻皆處於可使用的狀態，然而，實際的狀況並非如此，機器可
能因為故障而必須維修，或是因為預防維護，而必須停止運轉，進行維護與調整的工作，
因此，機器在特定期間無法使用。為了使裝配系統更有效率，預先將機器維護與調整列入
生產排程的考量因素，讓生產排程更符合實務。本研究是針對雙階段混合型流程工廠，第
一階段和第二階段皆可包含多部平行機，維修政策是以「完成工作數」為基礎，也就是完
成某特定工作個數後，機器必須進行預防維護，而目標函數為最大完工時間(Makespan)最
小化。首先，推導最大完工時間的下界值，然後，運用 MULTIFIT 演算法的二分搜尋架構、
Modified-L 演算法、Johnson 法則、FAM 或 LBM 法則，以及應用前推式或後推式之演算
程序，發展啟發式演算法。本研究提出了四個啟發式演算法，並加以評估與分析，並且與
Allaoui and Artiba 所提出的 H 演算比較。結果顯示，MLJLF 演算法完全優於 H 演算法，
且改善百分比高達 41.16%。 
 
關鍵字：雙階段混合型流程工廠、機器使用限制、啟發式演算法、最大完工時間 
英文摘要 
In the realistic production environment, many assembly lines are similar to hybrid flowshop 
which are the combination of flowshop and parallel machines. The majority of the scheduling 
studies carry a common assumption that machines are available all the time. However, machines 
may not always be available in the scheduling period due to breakdown or preventive 
maintenance. That is, machines may be subject to some unavailability periods due to maintenance 
activities. This paper deals with two-stage flowshop scheduling problem with preventive 
maintenance activity, and the objective is minimizing makespan. The preventive maintenance 
policy is based on “number of finished jobs”. The paper derives the lower bound, and then 
applies MILTIFIT algorithm, Modified-L algorithm, Johnson’s rule, FAM or LBM rule, and 
forward or backward procedure to construct four heuristics. The heuristics are evaluated and 
analyzed, and then compared with H heuristic by Allaoui and Artiba. The computational results 
show that MLJLF algorithm is completely superior to H algorithm. And the average percentage 
of improvement is 41.16%. 
 
Keywords: two-stage hybrid flowshop, machine availability, heuristic, makespan 
2 
續之前的研究，在 1999 年，研究 max//)(2 CanrPF − 的問題，針對機器一使用受限制的問
題，提出 H1 演算法；針對機器二使用受限制的問題，提出 H2 演算法，並以誤差界限分析
法加以分析。Liao 等人 [16] 於 2005 年，針對雙平行機環境下，機器維護政策是以「特定
期間」依據，分析機器使用受限制的四種情況。並以 TMO 演算法為基礎，加以延伸發展
出演算法，求解該問題的最佳解，其演算複雜度雖為指數型，但演算效率良好。 
以上的研究，所考量機器使用受限制的問題，都假設維護都是發生在「特定期間」，
預防維護時間點與時間長度皆為已知的。但 Dell’Amico 與 Martello [6] 研究印刷電路板
(PCB)製造過程，機器預防維護政策是以「完成工作數」為依據，是故，在不同的生產環境
下，必須配合不同的預防維護政策。 
Liao 等人[15] 於 2007 年，考量雙平行機環境下，利用 TMO 演算法，分析「完成工作
數」為維護政策與總工作數的關係，發展演算法求解最佳解，使得最大完工時間最小化。
另外，Liao 與 Tsai [18] 於 2005 年，以「完成工作數」做為機器維護政策之依據，應用在
雙機流程型工廠，提出一個有效的多項式複雜度(polynomial time complexity)之 HD 演算法，
使得最大完工時間最小化，其演算結果約有 97%達到最佳解，演算績效非常好。延續此研
究，Liao 與 Huang [17] 於 2006 年，是以「完成工作數」做為機器維護政策之依據，應用
在雙階段混合型流程工廠，針對 max21 /2,1/)(2 CMMPF == 的環境，推導出此環境的下界
值(Lower Bound，LB)，並且發展 SJ 演算法，該演算結果等於 LB，比例約為 49.6%，平均
相對誤差百分比僅約 1.09%，是一個相當有效的演算法。 
3.2 平行機的研究 
混合型流程工廠的環境下，每一階段皆有多部平行機，平行機中每台機器之負荷平衡
是相當重要的，故探討平衡平行機負荷的演算法是相當重要的。首先，在 1978 年，Coffman 
等人於 [5] 針對 max// CP 的環境，發展出 MULTIFIT 演算法，經由實驗證明迭代次數為七
次，可求得相當優良的解。Gupta and Ho [9] 針對 Bin-packing 問題，發展 MBS 演算法，
並證明總容量小於等於兩倍的箱容量時，可以求得最佳解。Fleszar and Hindi [7] 針對 Gupta 
and Ho 的研究，發展 MBS’ 演算法，改善了 MBS 演算法，且再發展出以鄰域搜尋的演算
法 Modified-L 演算法。對於 Bin-packing 所發展的演算法，使用在 max// CP 的問題上，可得
不錯的演算效率，故本研究採取此平衡負荷之演算程序。 
3.3 混合型流程工廠的研究 
1988 年，Gupta [10] 將混合型流程型工廠排程定義為 NP-hard 的問題，之後的相關研
究，大多是提出有效的啟發式演算法求解之。 Lee 和 Vairaktarakis [13] 針對
max2211 /,/)(2 CmMmMPF == 的問題，提出了複雜度為 )log( nknO 之 H’演算法，其中 k 為
階段數、 n為工作數。Brah 與 Hunsucker [3] 針對 max2211 /,/)(2 CmMmMPF == 的環境
下，提出分枝界限法。Portmann 等人 [19] 於 1998 年，應用基因演算法 (Genetic Algorithm，
GA)發展三個啟發式演算法，求得初始的上界值，再應用改善的上界值，提升分枝界限法
的演算效率。Haouari 等人 [11] 針對雙階段的混合型流程工廠，導出四個下界值，以及使
用兩個啟發式演算法計算上界值，並且找出四個洞悉策略(fathoming strategy) ，使得所發展
的分枝界限法更為有效，求解較大的問題時，所花費的時間在可接受的範圍內。 
以上混合型流程工廠的研究，皆未考量維護的問題，只有 Allaoui 與 Artiba [1] 在 2006
年，在 max21 /,1/)(2 CmMMPF == 環境下，考量機器預防維護，提出 H 演算法。此研究
在第二階段，只有一次維護，而且維護的開始時間及結束時間都是已知且固定。H 演算法
先採用 Johnson 法則排定工作順序，利用 FAM 法則指派工作到第一階段的機器，再利用
LBM 的規則，指派工作到第二階段的機器，並針對此維護政策推導出下界值，進而提出分
枝界限法求解之，該研究也比較分析 list scheduling heuristic (LIST)、LPT (longest processing 
time)、H 演算法的誤差界限績效(worst-case performance)。 
 
4 
4.2 演算法步驟 
本研究為雙階段混合型流程工廠，第一階段和第二階段皆包含多部平行機器。故在發
展演算法時，要兼具同一階段中每部機器負荷的平衡，以及第二階段的機器閒置時間最小
化的能力。在同一階段之每部機器負荷平衡的問題上，運用 MULTIFIT 演算法的架構，做
為工作指派至各機器之依據，再運用 Modified-L 演算法之工作搜尋技巧，使每台機器上的
負荷更為平衡；在第二階段，機器閒置時間最小化的問題上，運用 Johnson 法則，以及指
派工作至特定機器之 FAM 或 LBM 法則，使得機器的閒置時間能趨近最小化。 
運用以上演算法的架構、搜尋技巧與指派法則，再配合前推式(forward)與後推式
(backward)的演算程序，分別發展四個啟發式演算法，稱之為 MLJFF、MLJFB、MLJLF、
MLJLB 演算法。以下就此四個演算法加以說明之。 
1. MLJFF 演算法 
步驟一：先用 LPT 法則，排定第一階段的工作序列 S。 
步驟二：使用 MULTIFIT 與 Modified-L 演算法，依據工作序列 S，排定出第一階段每台機
器上的工作集合 1,...,1 , mksk = 。 
步驟三：將第一階段的每台機器上的 ks ，分別依 Johnson 法則排序。 
步驟四：將第一階段，每個機器上的工作排序，使用 FAM 法則，排定工作在第二階段的各
機器上。 
步驟五：計算所有工作中，最後完成的時間，即為最大完工時間。 
2. MLJLF 演算法 
MLJLF 是將 MLJFF 演算法步驟四的 FAM 改為 LBM 法則，即為 MLJLF 演算法。 
3. MLJFB 演算法 
MLJFB 是將 MLJFF 演算法前推式演算程序方式，改為後推式演算程序，故將 MLJFF
演算法的步驟一至步驟四，第一階段修改為第二階段，而第二階段修改為第一階段即可。 
4. MLJLB 演算法 
MLJLB 是將 MLJFB 演算法步驟四的 FAM 法則改為 LBM 法則。 
五、結果與建議 
本研究採用 C++撰寫程式，在 PC Pentium D 2.8 GHz 下執行程式。第一階段與第二階
段的機器都有預防維護的必要，兩階段的機器數設定為 (3,5)；總工作數則分為 
(40,60,80,100) 四種；預防維護是以「完成工作數」為基礎，即處理完成某些工作個數後，
必須進行機器維護。將兩階段機器之完成工作數分別設定為(3,5,7)。實驗例子中，機器組合
有四種，四個不同工作個數，預防維護政策有九種組合，每一個組合皆進行 20 個例子，總
共進行 2880 次試驗。 
針對所提出的啟發式演算法，採用了 MULTIFIT 和 Modified-L 演算法的優點，並使用
Johnson 法則，使得第二階段的機器閒置趨近最小化。在演算程序方面，前推式優於後前
推式演算程序，比例高達 99.48%，表示前推式演算程序較適合雙階段混合型流程型工廠之
排程問題。本研究所提出的演算法中，以 MLJLF 為最佳，其與下界值的平均差異，也只有
8.28%，且當在 21 kk = 的情況下，相對誤差百分比會更小；當工作個數 n較大時，相對誤差
百分比會比較小。MLJLF 在 2880 個例子中，全部優於 H 演算法，而且平均改善率為 41.16%，
最大改善率為 49.10%，在各種條件下，改善率的幅度皆約為 40%，表示本研究對 H 演算法
的改善率呈穩定狀態。 
本研究將試圖將演算法延伸至多階段混合型流程工廠，將是本研究另一個主題。 
 
6 
七、計畫結果自評 
7.1 研究成果 
本研究首先對機器使用受到限制的探討，了解機器受到限制可分為三類： 
1. 機器受到限制的時間點為固定的，且受到限制的期間是固定的，如同預防維修的排定是
為固定的。 
2. 機器受到限制的時間點為特定時間範圍，稱之為時間區間(time window)。也就是說，預
防維護事先規畫在某一特定期間，至於何時開始維護，可視生產狀況略做彈性調整。 
3. 機器是否受到限制，視機器所處理的工作數而定。也就是說，當機器完成了某特定工作
個數後，應進行機器的調整或準備，此時機器是處於非生產狀態，然後才能繼續處理其
他工作。 
探討完機器受到限制之情況後，本研究針對雙階段混合型流程工廠，並以「完成工作
數」為機器使用限制、目標函數為最大完工時間之排程環境，進行下界值的推導，並且考
量機器負荷平衡與閒置的問題，發展啟發式演算法。本研究提出了四個啟發式演算法，並
加以比較之，結果顯示 MLJLF 演算法有較佳之演算結果。MLJLF 演算法與下界值的平均
差異，也只有 10.06%，可見本研究所提出的演算法是有效的。 
本研究的研究成果與預期目標相符，完成當時之預期最終成果—發展有效之啟發式演
算法，求解雙階段混合型流程工廠在機器維修政策下，機器利用率最大化。 
7.2 學術論文之發表 
本研究成果在學術論文發表的情況如下： 
1. L. M. Liao and C. H. Tsai, Heuristic algorithms for two-machine flowshop with availability 
constraints, Computers and Industrial Engineering. doi:10.1016/j.cie.2008.06.003 (SCI) 
2. L. M. Liao and C. J. Huang, Tabu search for scheduling a non-permutation flowshop with 
tardiness objective, The 8th Asia Pacific Industrial Engineering & Management System and 
2007 Chinese Institute of Industrial Engineers Conference (APIEMS & CIIE Conference 
2007), Ambassador Hotel, Kaohsiung, Taiwan, R.O.C., December 9-12, 2007. 
3. L. M. Liao and C. J. Huang, An Effective Heuristic for Two-machine Flowshop with Batch 
Processing Machines, The 38th conference on Computers and Industrial Engineering 
(ICCIE2008), Beijing, China, October 31 to November 2, 2008. 
4. L. M. Liao and C. J. Huang, Tabu search for non-permutation flowshop scheduling problem 
minimizing total tardiness, Journal of Scheduling. (2008 Submitted) (SCI) 
5. 廖麗滿、張哲維，混合型流程工廠於機器使用限制下之排程研究，2008 系統科學與工程
年會，宜蘭。(榮獲論文競賽優等獎) 
6. 廖麗滿、黃俊維，機器使用限制下雙階段混合型流程工廠之排程，技術學刊。(2008 
Submitted) 
 
7.3 實務之價值性 
本研究考量之環境為一般生產裝配系統，是為混合型流程工廠(hybrid flowshop，HFS)。
而且也考量了機器可使用期間的問題，使得生產排程更貼近實務。當機器必須做預防維修，
或是機器由於某些因素必須做好事先準備時，皆可使用本研究的演算程序，排定工作之順
序，以達到機器利用率最大化，或是閒置時間最小化。本研究所發展的啟發式演算法，其
複雜度為多項式(polynormial)，不但演算速度快，而且其演算結果佳，可應用在不同的預防
維護政策下，以改善排程之效率。 
現階段，研究方向朝著兩個主題進行： 
1. 使用 GA 發展演算法。 
2. 將研究的環境延伸至三個階段以上之混合型流程工廠。 
An intelligent agent-based collaborative workflow for inter-enterprise PCB 
product design 
 
C.J. Huang 1, L.M. Liao 2 
1,2Department of Industrial Engineering and Management, National Chin-Yi University of Technology, Taichung, 
Taiwan, ROC 
 
 
Abstract – Currently, there is tremendous pressure to 
design and develop products in a short period of time to 
reduce time-to-market and project’s life cycle. Researchers 
often propose workflow management system as a 
mechanism to facilitate teamwork in a collaborative product 
development environment. In this paper, we develop an 
agent-based collaborative workflow platform (ACWP), in 
which a group of intelligent agents work autonomously and 
collaboratively to perform workflow tasks and access data 
from a distributed environment. By the aid of intelligent 
agents, our system can execute customized workflow tasks 
for inter-enterprise users based on their individual requests, 
and conquer the complexity of product design in distributed, 
heterogeneous platform. The application of multi-agent 
systems ACWP for collaborative workflow management is 
investigated through an inter-enterprise PCB product 
design. ACWP facilitates PCB product design and team 
interaction in a collaborative but distributed product 
development environment and moves up the whole 
performance of design process. 
 
Keywords – PCB design, workflow, agent, collaboration 
 
 
I. INTRODUCTION 
 
As the fields of network and Internet technology 
mature, there will be an increased need to build 
collaborative tool that are able to facilitate teamwork in a 
distributed, complex product development environment. 
Especially in a dynamic, loosely coupled collaborative 
environment, a flexible and adaptive inter-enterprise 
workflow is more suitable for those Internet-based 
business enterprises [1]. To address the issues of product 
design in a distributed, heterogeneous environment, 
research on multi agent-based workflow system and their 
applications are on the rise. 
In this paper, a multi-agent-based collaborative 
workflow platform for collaborative design is proposed. 
Following the specifications of workflow reference model 
provided by Workflow Management Coalition (WfMC) 
[2], the system kernel supports five agents to manage the 
workflow enactment mechanism in a manner of 
autonomy and cooperation, a main function agent to 
control the flow logic, and a gateway agent as an interface 
to communicate with the client agent used by 
collaborative design partner. In order for agents to 
communicate effectively and enhance interoperability, the 
multi-agent system is developed by applying the JADE 
framework [3] as a linking to the heterogeneous design 
systems in a distributed environment. The proposed 
architecture will improves workflow management by 
delegating tasks to autonomous agents and moves up the 
whole performance of design process. 
This paper is structured as follows. Section 2 presents 
a literature review on the application of agent-based 
workflow in collaborative product design. Section 3 
discusses the proposed agent-based system platform, its 
major component and how it works. Section 4 illustrates a 
real world scenario on printed circuit board (PCB) design. 
Finally, our conclusions are drawn in Section 5. 
 
 
II. BACKGROUND 
 
Workflow is a process which delivers the right task to 
the right people at right time and optimizes the processing 
time within the operations [4, 5]. It allows information 
transparency and connectivity, together with task tracking 
and monitoring effectively and optimized. The Workflow 
Management Coalition defines workflow reference model 
as a guideline for developing workflow management 
system (WfMS) [2]. Based on the characteristics of 
structure, complexity, repetitiveness, predictability, and 
degree of automation, WfMS was classified into four 
types [5, 6, 7]. Considering on how the participants are 
working together, Kvan [8] think two types of design as a 
continuous close-coupled process, in which the 
participants work closely to realize a design, and, in fact, 
a loose-coupled process, in which each participant 
contributing what they can in different domains of 
expertise. However, if we consider a cross-organizational 
workflow on heterogeneous platform in a distributed 
environment, their logic relation for flexible and dynamic 
workflow composition is still under investigation [1]. 
Agent technologies are intended to reduce risks of 
collaborations for concurrent, complex and distributed 
product design and manufacturing [9]. Agents are capable 
of acting autonomously, cooperatively, and collectively, 
based on their mental states such as goals, beliefs, and 
actions [10]. An agent based workflow management 
system is a set of software agents that manage and 
coordinate the flow of work defined by a business process 
[4, 11]. A multi-agent work system (MAS) is defined as a 
loosely coupled network of problem solvers that work 
together to solve problems that are beyond the individual 
capabilities of each problem solver [12]. Using agents to 
perform WfMS functions is an emerging field where 
researchers are exploring the ability of agents to improve 
process integration, interoperability, and adaptability [13]. 
There are many researchers exploring the power of 
agent technology to provide flexible, distributed, and 
 1891-4244-1529-2/07/$25.00 ©2007 IEEE
The responsibility of WfEnA is to perform user’s 
assigned tasks. The users defined in ACWP can also ask 
the WfEnA to provide predefined services. When a user 
signs on to the system, the MFA wake up the WfEnA and 
the WfEnA will first display an unfinished tasks list and 
highlight the delayed tasks. If the user selects a task to 
execute, the invoked application will be activated. When 
a task is done, workflow engine will mark the task with a 
‘done’ signal and set the following task ‘active’. 
The designed goal of WfMA is to define workflow 
components (such as task, document, and message), to 
create workflow template, and to generate workflow 
instance duplicated from workflow template. 
The WfCA is designed for monitoring and control the 
status of workflow instance. WfCA tracks the real time 
status of workflow progress by querying the workflow 
instances, and set the workflow status as ‘start’, 
‘suspend’, ‘resume’, ‘abort’, and ‘query’. 
The WfEA provides functions for evaluating projects 
including user performance analysis and overall project 
performance evaluation.  
Fig. 3 describes the user class diagram and the 
relationship between user type and corresponding 
authority. When users login, the system presents different 
interfaces based on users’ role and authority. The system 
administrator has the highest authority and is permitted to 
perform all system functions. A workflow designer can 
start the WfEnA, the WfMA and the WfCA to manage 
the workflow definition and execution, such as task and 
workflow template definition, workflow instance 
creation, and workflow status monitoring. A user, e.g. 
project manager and system company’s manager/auditor, 
with authority of workflow evaluator can wake up the 
WfEnA to analyze the performance of a single user or the 
whole project. Finally, collaborative users are just 
allowed to perform the functions supported by WfEnA, 
e.g., modify personal data, show work lists, and execute 
designated task. 
 
B. Workflow Component Model 
 
During the past several years, we have been working 
on the definition of workflow ontology supporting 
collaborative product design and have developed a 
prototype on [4, 9].  
User
Workflow Evaluator System AdministratorWorkflow Designer Collaborative User
Groups of 
Collaborative 
Design House
Groups of 
Collaborative 
Designer
Groups of 
Collaborative 
Customers
Project Manager
AdministratorsCollaborative Workflow Designer
System Company's
Manager/Auditor
Interact with GA()
Wake up/Execute  
WfEnA()
Execute WfCA()
Execute WfMA()
Execute WfEnA()
Execute WfEA()
Execute WfEnA()
Execute all the 
agents/moudles
 
Fig. 3. User class diagram and corresponding authority 
 
 
Fig. 4. Workflow component model 
 
In this paper, we refine and construct WfMS elements 
based on the workflow ontology model defined in 
previous research [4, 9]. Fig. 4 shows the class diagram of 
Workflow component model. The proposed agent-based 
collaborative workflow model consists of the following 
elements as: 
y Workflow is a collection of partial or total set of tasks 
organized to accomplish some business processes.  
y Workflow template is a type of workflow definition. It 
is used to generate workflow instance. 
y Workflow instance is a duplicate of workflow template 
for execution. 
y Task is a partial or total order of operations, 
descriptions for human actions, or other tasks. Task is 
bound to particular resources that fulfill the activity. 
y Task instance is a duplicate of task for execution in 
workflow instance. 
y Message and document are all a type of resource for 
reference during the execution of tasks. 
 
The relationship between workflow components 
includes roles, transition rules, dispatching rules, invoked 
applications, and client applications. Messages and 
documents are the basic elements embedded in tasks for 
delivering information when the workflow is executing. 
A workflow template consists of multi cascaded tasks that 
are defined by applying transition rules. Fig. 5 describes 
the entity-relationship model of database for workflow 
template definition. 
 
IV. SCENARIO OF COLLABORATIVE PCB DESIGN 
AND SYSTEM IMPLEMENTTION 
 
A. Introduction to the environment of collaborative PCB 
design 
 
The challenge of process analysis is to model the 
entire process and transform it into an accurate workflow. 
 191
Proceedings of the 2007 IEEE IEEM
