行政院國家科學委員會補助專題研究計畫
■ 成 果 報 告   
□期中進度報告 
 
癭瘤樹上之最長遞增子序列問題 
 
計畫類別：■ 個別型計畫 □ 整合型計畫 
計畫編號：NSC 100-2221-E-260-026-  
執行期間：100年 08月 01日 至 101年 07月 31日 
 
計畫主持人： 黃光璿 
 
計畫參與人員： 陳奎昊、吳嘉森、吳承育、鐘啟豪、周季蔚 
 
 
成果報告類型(依經費核定清單規定繳交)：■精簡報告  □完整報告 
 
本成果報告包括以下應繳交之附件： 
□赴國外出差或研習心得報告一份 
□赴大陸地區出差或研習心得報告一份 
□出席國際學術會議心得報告及發表之論文各一份 
□國際合作研究計畫國外研究報告書一份 
 
 
處理方式：除產學合作研究計畫、提升產業技術及人才培育研究計畫、
列管計畫及下列情形者外，得立即公開查詢 
          □涉及專利或其他智慧財產權，□一年□二年後可公開查詢 
          
執行單位： 國立暨南國際大學資訊工程學系 
 
中 華 民 國 一 百 年 十 二 月 一 日 
並放在 cover 的最後位置。為了要能找出 LIS，插入數字 的同時，還必須用指標
(pointer)，將 指向 所在的 list的左鄰居的 head，以便於 trace back時可以找出 LIS。對
於任意數字序列 ，令 為 依照 greedy method 所建構之 cover，則 中 list
的個數，即為 之 LIS 長度。建構 之關鍵，在於每次讀到新的數字 時，如何在
中，找到 該插入的位置。令 為一 cover， 為
之 head，依照 cover 的定義，則可知 。因此，我們可以用
binary search找到所欲插入數字之正確位置，也就是說，每個數字皆可在 時間內
完成插入動作。若序列 中的數字被限定到 ，更可以利用 van Emde Boas tree 
[Bo77]作為優先佇列(priority queue)，在 時間內完成數字插入動作。我們以記
號 ( )cov A B 表示將序列 B 中之數字依序加入 ( )cov A 之結果，其時間複雜度為
( | | l g lg | | )O B B 。 
 我們解決 GLIS 問題之步驟，分成兩階段，第一階段化簡 GT，使得所有的 gall 上
皆不具有分支。其方法為複製所有 galls上之 paths，並將分支移至新增之 paths上，(參
見圖一)。不難看出，經過此化簡，gall上皆不具分支，且化簡後之 gall tree其大小至多
為 GT之兩倍，換言之不影響時間複雜度。另一方面，求解 GT之 LIS問題等價於在新
的 gall tree上解 LIS問題。因此，不失一般性，我們可一開始就假定 GT上之 gall皆不
具分支。 
 
圖 1 化簡 gall tree  
對於不經過 gall之 paths，其上之 LIS可透過 depth-first search，運用序列上建構 cover
的方式，找到對應的 LIS。因此，整個問題的關鍵在於如何計算 gall上之 LIS，此為第二階
段所欲解決之問題。對於任一 gall，可依其結構將之分解成四部分：前段、左股、右股與
後段，分別以T 、L、R與D表示。理論上需計算 ( )cov T L 與 ( )cov T R ，再將兩者之結
果合併，最後在加入D，然而這個做法會導致使用過多的計算時間，也就是說要花費 ( )O
的時間去處理複製與合併 covers之動作，其中 為 LIS之長度，最糟的情況下 可以是
'93., Fifth International Conference on, 1993, pp. 220-224. 
[CYY05] E. Chen, H. Yuan, and L. Yang, Longest Increasing Subsequences in Windows Based 
on Canonical Antichain Partition. in: X. Deng, and D. Du, (Eds.), Algorithms and 
Computation, Springer Berlin / Heidelberg, 2005, pp. 1153-1162. 
[CYY07]  E. Chen, L. Yang, and H. Yuan, Longest increasing subsequences in windows based on 
canonical antichain partition. Theoretical Computer Science 378 (2007) 223-236. 
[CP10]  M. Crochemore, and E. Porat, Fast computation of a longest increasing subsequence 
and application. Information and Computation 208 (2010) 1054-1059. 
[De09]  S. Deorowicz, An algorithm for solving the longest increasing circular subsequence 
problem. Information Processing Letters 109 (2009) 630-634. 
[Fr75]  M.L. Fredman, On computing the length of longest increasing subsequences. Discrete 
Mathematics 11 (1975) 29-35. 
[Gr02]  P. Groeneboom, Hydrodynamical methods for analyzing longest increasing 
subsequences. Journal of Computational and Applied Mathematics 142 (2002) 83-105. 
[Gu97] D. Gusfield, Algorithms on Strings, Trees, and Sequences, Cambridge University Press, 
1997. 
[HS77]  J. Hunt, and T. Szymanski, A fast algorithm for computing longest common 
subsequences. Communications of the ACM 20 (1977) 350-353. 
[LVZ06]  D. Liben-Nowell, E. Vee, and A. Zhu, Finding longest increasing and common 
subsequences in streaming data. Journal of Combinatorial Optimization 11 (2006) 
155-175. 
[SS10]  M. Saks, and C. Seshadhri, Estimating the Longest Increasing Sequence in 
Polylogarithmic Time, Foundations of Computer Science (FOCS), 2010 51st Annual 
IEEE Symposium on, 2010, pp. 458-467. 
[Sc61] C. Schensted, Longest increasing and decreasing subsequences. Canadian Journal of 
Mathematics 13 (1961) 179-191. 
[Se06]  D. Semé, A CGM Algorithm Solving the Longest Increasing Subsequence Problem. in: 
M. Gavrilova, O. Gervasi, V. Kumar, C. Tan, D. Taniar, A. Laganà, Y. Mun, and H. 
Choo, (Eds.), Computational Science and Its Applications - ICCSA 2006, Springer 
Berlin / Heidelberg, 2006, pp. 10-21. 
[TY10]  H. Thomas, and A. Yong, Longest increasing subsequences, Plancherel-type measure 
and the Hecke insertion algorithm. Advances in Applied Mathematics In Press, 
Corrected Proof, 2010. 
[Ti06]  A. Tiskin, Longest Common Subsequences in Permutations and Maximum Cliques in 
Circle Graphs. in: M. Lewenstein, and G. Valiente, (Eds.), Combinatorial Pattern 
Matching, Springer Berlin / Heidelberg, 2006, pp. 270-281. 
[Wu10] J.Y. Wu, An algorithm for computing longest increasing subsequences on galled trees. 
Master’s thesis, National Chi Nan University, 2010. 
[YHC05] I.H. Yang, C.-P. Huang, and K.-M. Chao, A fast algorithm for computing a longest 
common increasing subsequence. Information Processing Letters 93 (2005) 249-253. 
. 
 相關著作之發表： 
在本計畫的支持下，我們共發表一篇會內議論文： 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/12/01
國科會補助計畫
計畫名稱: 癭瘤樹上之最長遞增子序列問題
計畫主持人: 黃光璿
計畫編號: 100-2221-E-260-026- 學門領域: 計算機理論與演算法
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
