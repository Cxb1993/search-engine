目 錄
一、中英文摘要… … … … … … … … … … … … … … … … … … … … … … 1
二、分年階段性目標… … … … … … … … … … … … … … … … … … … … 3
三、第一、二、三年已完成目標… … … … … … … … … … … … … … ... 3
四、結語… … … … … … … … … … … … … … … … … … … … … … … … .. 17
五、參考文獻… … … … … … … … … … … … … … … … … … … … … … . 18
附件一 期刊論文
附件二 會議論文
2Abstract
Aiming at the requirements of e-Diagnostics and e-Maintenance system integration and management of
semiconductor manufacturing equipment, this main project adopts distributed object-orientated technology and
new generation Internet technology, such as XML, SOAP, WSDL, UDDI, Microsoft .NET, etc., to develop the
Web Service Agent. This Generic Web Service Agent will be inherited by all the sub-projects. In this system, all
the communication massages use the format of XML (eXtensible Markup Language) and the communications
between different applications or system components are defined with SOAP (Simple Object Access Protocol).
After completing the construction of various web servers, their corresponding web-service interface properties
are described with WSDL (Web Services Description Language). These properties include data type definitions,
web service supported functions, the formats of input/output messages, etc. Then UDDI (Universal Description,
Discovery and Integration) will be applied to register the characteristics and specifications of each web server to
provide the access for client-end applications to this web server. Finally, the transmission of communication
messages will be achieved via HTTP (Hyper Text Transfer Protocol), which is the most unobstructed transfer
protocol in Internet. In addition, concerning to the issue of security, the system applies SSL (Secure Sockets
Layer) security protocol and the mechanism of authentication to be responsible for identifying the service
requests.
The research topics for the main project are as follows:
1) Studying and analyzing the requirements of information integration for e-Diagnostics and e-Maintenance
Systems.
2) Studying the core information and security technologies of e-Diagnostics and e-Maintenance Systems.
3) Designing the information integration architecture of e-Diagnostics and e-Maintenance Systems.
4) Designing the scheme for the heterogeneous system information exchange mechanism and developing the
process flows for e-Diagnostics and e-Maintenance Systems.
5) Designing the scheme of the Generic Web Service Agent.
6) Implementing the Generic Web Service Agent.
7) Designing and implementing the schemes of the message transmission security architecture and the
authentication mechanism based on Web Service technologies.
8) Implementing the information integration architecture of e-Diagnostics and e-Maintenance Systems.
9) Establishing the process messages and testing scenarios of the e-Diagnostics and e-Maintenance Systems.
10) Performing integration tests among the main project and sub-projects.
11) Performing on-line tests and performance evaluation.
41.機台生產資料的收集、分類、儲存與整合之需求。
2.機台診斷與預防保養流程之需求。
3.機台診斷與預防保養系統與其它支援資訊系統間資訊交換之需求。
4.工廠端診斷與預防保養伺服器之功能需求。
5.遠端診斷與預防保養伺服器之功能需求。
6.半導體製造商與設備供應商間診斷與預防保養資訊交換之需求。
7.安全網路連線機制之需求。
8.人機介面之需求。
9.事件信息通知遞送之需求。
10.遠端機台監控、操作與設定之需求。
11.適合以網站服務呈現之功能列舉。
主題二：研究網路式診斷與預防保養系統所需之核心資訊技術與安全技術
本主題將針對完成本計畫所需的核心技術作深入研究，概分為核心資訊技術與核心安全技術兩類，簡述
如下：
2.1核心資訊技術
2.1.1 XML（eXtensible Markup Language ）相關技術[4]
XML為W3C推薦的標準，其承繼 SGML（Standard
Generalized Markup Language）之延展性、文件自我
描述特性及強大的文件結構化功能，但卻摒除
SGML 過於龐大複雜的缺點。XML 是一種可延伸
的標示語言，可針對不同的應用領域，定義所需的
標記（Tag）；同時和 SGML 一樣，XML 是一種元
語言（Meta-Language），可用來定義出其它的語言。
HTML（Hyper Text Markup Language）著重於資料
如何在網頁上呈現，無法表達文件內容的涵義，因
此只適合人的瀏覽閱讀，如圖一(a)所示。而 XML
則可利用制定的標記，在文件中自我表達出文件內
容的意義，因此，除了適合人的閱讀外，機器（應
用程式）亦可經由 Tag 明瞭其涵義，而進行處理或
整合其它資料。如圖一(b)所示，可輕易明瞭該文件
描述了一個型別（Type）為Wire Bonder，型號（Model）
是 UTC300，販賣商（Vendor）是 IME 的機台
（Equipment）。
XML將資料的呈現與資料的內容分開，同一份文件
可經由 XSL（eXtensible Style-Sheet Language）[5]轉
換為適合不同裝置顯示的文件，如圖二所示。同時，
XML是純文字檔，可跨不同平台與應用程式，且容
易進行處理及整合。
綜合上述各類優點，XML是目前表達資料的主流技
術，本計畫之資料均將以 XML表示，並以 XSLT技術進行轉換與整合。因此 XML相關技術[6]：如 DTD、
XML Schema、XSLT、XML Document Object Model、Xpath等及其相關之開發展，均在本主題研究之列。
2.1.2 XML Web Services [7]
(a) HTML Exmaple:
<html>
<body>
<p>WIRE
BONDER</p>
<p>UTC300</p>
<p>IME</p>
<p>06-2757575</p>
</body>
</html>
(b) XML Example:
<?xml version="1.0"
encoding="Big5"?>
<Equipment>
<Type>WIRE
BONDER</Type>
<Model>UTC300</Model>
<Vendor>
<Name>IME</Name>
<Tel>06-2757575</Tel>
</Vendor>
</Equipment>
圖一 HTML 與 XML語法描敘範例
XML文件
棑版樣本3
棑版樣本2
棑版樣本1
電腦
手機
PDA
圖二 在不同平台上顯示同一份 XML文件
6Microsoft .NET為微軟新一代 Internet的開發平台，其底層以 XML為資料交換的基礎，可協助企業快速
地建置 Internet及 Intranet的應用程式。Microsoft .NET最重要的兩個主要願景為(1)讓應用程式可以從任
何裝置（包含手機、Pocket PC、電話、IA家電等）存取 Internet；(2)能讓網站的功能當作是元件一般，
然後透過網路服務存取之。其.NET Framework包含有非常完整的類別函式庫，且 Visual Studio.NET可在
同一個發展環境內支援二十多種程式語言，並能跨語言相互繼承，同時介面友善、功能強大，可作為快
速開發各種Web Service及應用程式，是本總計畫主要的開發工具之一。
2.2核心安全技術
本總計畫將應用植基於網路服務基礎協定上之新一代資訊安全軟體技術（如WS-Security、XML Signature
and XML Encryption等）與 SSL (Socket Secure Layer)傳輸安全協定，確保整體系統運作與網路傳輸的安
全性（Security）。本系統中將設計有包含基本認證、XML Signature認證及授權等功能之使用者身份統一
認證機制，並運用 SSL 維護資訊傳遞的安全，最後加上 XML Encryption 以保護資料本身的機密性
（Confidential）與安全性。根據上述研究 SSL、WS-Security、XML Signature、XML Encryption、與 SSO
(Single Sign-On)等主題的運作原理與相關實作技術，簡述如下：
2.2.1 SSL（Socket Secure Layer）
SSL可於網際網路上建立安全的連接（Connectivity），SSL可對在用戶端與伺服器間傳送的訊息進行加密
和解密。資料加密可以保護訊息在傳輸時不會被讀取，藉以確保機密性。如果單以點對點（Point-to-Point）
的傳輸安全性而言，SSL已經能符合確保驗證(藉著驗證憑證)、機密性(藉著以私密金鑰加密資料)及完整
性(藉著核對資料)的安全性需求。但是，隨著網路服務的日益發展，網路服務可提供的功能漸趨強大與複
雜，而網路服務間的功能以跨網際網路的方式整合亦愈來愈頻繁，原本點對點的傳輸安全已經無法完全
符合需求。因此，藉由 SOAP 訊息本身提供解決安全問題方法的主張於是被提出，藉此維護端對端
（End-to-End）之間的安全，確保資訊於多方傳輸中的機密性與安全性。目前由微軟所提出的 GXA架構
[13]中，已包含解決網路服務端對端安全性問題的WS-Security機制，可透過WS-Security所支援的 XML
Signature及 XML Encryption解決相關問題。
2.2.2 WS-Security[14]
WS-Security可將數位簽章及加密的機制嵌入至 SOAP訊息的框架中，網路服務的安全將不必受限於傳輸
的方式，讓網路服務可以真正達到透過網際網路跨平臺整合之目的。WS-Security利用 SOAP標頭元件攜
帶具安全性相關資料的方式，使得 SOAP 訊息本身可以擁有安全保障。目前 WS-Security 擁有由 W3C
(World Wide Web Consortium)所訂定的 XML Signature及 XML Encryption兩種規格標準，它並未指定簽章
或加密的格式，而是定義出嵌入 SOAP訊息內其它規格配置的安全性資訊的方法，主要為 XML架構安全
性中繼資料容器的規格。
A. XML Signature
XML Signature於 SOAP標頭中存在相關於簽章所需的資料，可能包含如何簽署訊息的方式、使用的金鑰
以及產生的簽章值等。WS-Security 提供 UsernameToken 及 BinarySecurityToken 二種方式實作 XML
Signature，如果期盼較高的安全性，則應選擇以 BinarySecurityToken 方式進行，因為它是利用 X.509 或
Kerberos的憑證金鑰對實現簽章與驗證工作，可確保簽章者的唯一性；UsernameToken則由簽章者利用帳
號密碼以雜湊函數(不同的編碼方式)產生簽章值，伺服器接收到簽章值，將其以約定的方式還原後，辨識
是否為認可的使用者，故簽章值本身不具唯一性，安全性相對降低。
B. XML Encryption
XML Encryption可以加密SOAP本文(SOAP:Body)的內容，使SOAP訊息保持機密性。使用XML Encryption
時，SOAP標頭中將包含本文中被加密訊息的參考值，而本文受加密的部份則包含對應於標頭的參考值、
加密的方式、使用的金鑰和產生的加密值，只有訊息的接收者才擁有相對應的金鑰來解密資料。
WS-Security亦提供了二種方式來實作 XML Encryption，分別為對稱加密(Symmetric Encryption)及非對稱
加密(Asymmetric Encryption)。對稱加密表示用來加密訊息的金鑰與解密的金鑰是相同的；非對稱加密表
81. 工廠端的機台嵌入式模組 EEA（Equipment with Embedded Agents）（子計畫一）。
2. 工廠端的廠內診斷與預防保養伺服器 ODMS（On-site Diagnostics/Maintenance Server）與廠內診斷與
預防保養資料庫 LDMD（Local Diagnostics/Maintenance Database），以及設備供應商端的遠端診斷與
預防保養伺服器 RDMS（Remote Diagnostics/Maintenance Server）與全球診斷與預防保養資料庫
GDMD（Global Diagnostics/Maintenance Database）（子計畫二）。
3. 工廠端的先進製程控制與全面機台效率量測伺服器 AOS（APC/OEE Server）（子計畫三）。
4. 工廠端料配件物流管理伺服器 OLMS（On-site Logistics Management Server）與設備供應商端的遠端
料配件物流管理伺服器 RLMS（Remote Logistics Management Server）（子計畫四）。
5. 工廠端的廠內可偵錯性評估器 ODE（On-site Diagnosability Evaluator）及設備供應商端的遠端可偵錯
評估器 RDE（Remote Diagnosability Evaluator）（子計畫五）等。
本系統採用網路服務為各子系統間通訊的基礎建設，各子系統之各式服務功能，可利用網路服務加以包
裹（Wrap），並發佈到網路服務註冊節點（UDDI Registry Node），供其它系統或客戶端（Client）搜尋使
用，因此包含 UDDI 網路服務註冊機制系統。同時，為提昇整體系統運作之安全，本系統亦將設計統一
之認證服務（Authentication Service）機制，藉以解決各元件存取上的安全問題。
3.3 設計系統元件模型
在完成系統架構模型之設計後，將進一步地以物件模式化（Object Modeling）技術設計描述系統元件模型，
將計畫中所有系統元件模型繪出，如圖七為各元件之功能與資訊整合初步之規劃元件模型。圖中系統元
件包含有工廠端的 EEA（子計畫一）、ODMS（子計畫二之 I）、AOS（子計畫三）、OLMS（子計畫四之 I）
及 ODE（子計畫五之 I）；設備供應商端的 RDMS（子計畫二之 II）、RLMS（子計畫四之 II）及 RDE（子
計畫五之 II）；認證用的統一認證服務 Authentication Service、網路服務註冊節點 UDDI（總計畫）及其它
工廠與設備供應商端的系統元件等。
主題四：設計異質系統資料交換機制暨開發網路式診斷與預防保養處理流程
本主題將進行異質系統資料交換機制之設計，現敘述如下：
4.1 異質系統資料交換機制之設計
在電子診斷與預防保養資訊整合系統中，包含許多異質系統及資料來源，因此必須考慮資料格式轉換的
Internet
( SOAP/ WSDL/
UDDI )
Supplier Side
User
Policies
& Profiles
Factory Side
Authentication
Service
SOAP SOAPFirewall Firewall
Remote Diagnostics/
Maintenance Server
(RDMS)
Firewall
SOAP
SOAPFirewall
Web Services for Other
Factories and Suppliers
Legacy
Systems
Other
Factories/Suppliers
Components
RDMS Communication
Manager
Web-Service Agent Web-Service Agent
Diagnostics-
Solutions
Retrieval
System
Remote
Equipment
Engineering
System
Equipment
with
Embedded
Agents
(EEA)
AOS Communication
Manager
ODMS Communication
Manager
On-site Diagnostics/
Maintenance
Server (ODMS)
Diagno
stics
Mainte
nance
APC / OEE Server
(AOS)
Web-Service Agent
OEEAPCLogisticsManagement
Web-Service Agent
On-Site
Logistics Management
Server (OLMS)
OLMS Communication
Manager
Diagnosability
Evaluation
Web-Service Agent
On-Site
Diagnosability
Evaluator (ODE)
ODE Communication
Manager
Web-Service Agent Web-Service Agent
Diagnosability
Evaluation
Web-Service Agent
Remote Diagnosability
Evaluator (RDE)
RDE Communication
Manager
Logistics
Management
Remote Logistics
Management
Server (RLMS)
RLMS Communication
Manager
Web-Service Agent
Web-Service Agent
Device Communication Manager
Data Collection
Plans
Data Collection
Manager
EEData Collector
Device Metadata
IO
Device
Equipment
Resource
Equipment
Module
Proccess
Capability
Equipment
Material
Location
Carrier
Port
Clock
Port
Locatio
n
OBEM
App
1
App
2Em
be
dd
ed
Li
nu
x Web-Service Agent
Device Communication Manager
Data Collection
Plans
Data Collection
Manager
EEData Collector
Device Metadata
IO
Device
Equipment
Resource
Equipment
Module
Proccess
Capability
Equipment
Material
Location
Carrier
Port
Clock
Port
Locatio
n
OBEM
Em
be
dd
ed
Li
nu
x
App
1
App
2
Physical
Equipment
Embedded
Agents
圖七 半導體機台網路式診斷與預防保養系統之功能與資訊整合架構
10
Mechanism）和存取區域資料庫（Local Database
Access ） 等 功 能 ， 並 設 計 一 溝 通 核 心
（Communication Kernel）負責上述功能的管理與
使用；後續其它子系統元件只要繼承此通用網服基
元，即具有此共同基本功能，並可根據本身之需
求，擴充建構其它客制化功能。
此外，本系統將應用 Web Services 機制作為系統
之基礎架構，同時將利用隨插即用的觀念來設計系
統，因此所有的元件將都可像介面卡一樣插在Web
Services Infrastructure上。未來如規劃加入系統的
其它新元件，只要符合此行為架構骨幹，即可加入一起運作。其它的企業系統元件，例如MES、ERP 及
SCM 等，只要繼承此通用網服基元，亦可產生插在Web Services Infrastructure 的溝通元件。
第二年部份
主題六：建構供所有子計畫繼承使用之通用網服基元（Web Service Agent）
為達到跨平台與跨語言繼承使用之效能，主題五所設計的通用網服基元，將分別實作 C#、JAVA 與崁入
式等三個版本，俾利所有子計畫之繼承使用。
在此設計架構下，各系統元件僅需負責專注在發展各自的功能，至於與各個元件間之資訊傳遞，則由該
元件內的通用網路服務基元（Web-Service Agent）負責傳輸。另一方面，各 Communication Manager在收
到資訊時，不用管資訊來自何家公司，只要對由通用網路服務基元（Web-Service Agent）所傳送來的資訊
進行解譯的動作，並將解譯的資訊傳給該功能元件，因此工廠內部的系統與設備供應商系統資訊可有效
地整合、共享與運用。
以下將分別描述通用網路服務基元各功能之初步構思與建構方法：
6.1 建立通訊骨幹：
建立通訊骨幹即是建立雙方以 SOAP 溝通前的初始狀
態設定，當雙方要初始化 SOAP 通訊協定時，就會啟
動此功能。圖九所示為初始化 SOAP 通訊協定的循序
圖，茲說明如下：
6.1.1設定服務資訊（Set service information）：
Business System呼叫 Communication Kernel中關於初
始化 SOAP 的功能來設定欲使用的服務資訊，然後
Communication Kernel再使用 SOAP Interface的設定服
務資訊功能藉以設定網路位址與服務名稱的相關資
訊。
6.1.2設定 SOAP訊息（Set SOAP messages）
Communication Kernel呼叫 SOAP Interface的功能來設定 SOAP訊息，其中包括使用 SOAP通訊協定的相
關繫結（Binding）屬性。.
6.1.3執行呼叫（Invoke）
Communication Kernel在得到使用服務的繫結相關資訊後，可運用 SOAP Interface的功能實際呼叫遠端系
統元件提供的服務。
6.2 使用 UDDI註冊機制
圖八 通用網服基元（Web-Service Agent）樣版
: B u s in e s s
S y s te m
: S o a p In te r fa c e: C o m m u n ic a t io n K e r n e l
1 . // S e t s e r v ic e
1 .1 . // S e t s e rv ic e in fo r m a t io n
1 .3 . // In v o k e
1 .2 . // S e t S O A P m e s s a g e s
圖九 建立通訊骨幹的循序圖
12
#1.1傳送 XML文件（Send XML files）
Business System呼叫 Communication Kernel中使用 XSL的功
能，藉由 Communication Kernel 傳送欲轉換的 XML 文件給
XSLT Mechanism物件。
#1.1.1讀取 XSL檔案（Load XSL files）
XSLT Mechanism向資料庫讀取欲轉換 XML Schema的 XSL文
件。
#1.1.2進行 XSLT（XSL transform
XSLT Mechanism得以進行 XSL Transform動作。
#1.1.3儲存轉換後的 XML文件（Save XML files）
在轉換成功後，XSLT Mechanism將轉換後的 XML文件儲存至資料庫。
6.5 通用網服基元的類別圖
為使通用網服基元可以達到跨平台及跨程式語言使用的目標，針對目前兩大發展平台：Microsoft .NET及
Sun J2EE，分別設計了 C#及 Java兩個版本的通用網服基元，以及供 Embedded System使用的崁入式通用
網服基元。值得關注之處，為目前 Microsoft .NET 架構已支援二十多種程式語言，並且得以互相繼承。
而 Sun的 J2EE架構亦可執行於任何平台之上。如此即可實現所設計通用網服基元的目標。
圖十三為通用網服基元初步的類別圖，藉以顯示其內各功能間的靜態關係，共分為 CommunicationKernel、
SOAPInterface、UDDIRegistryMechanism、SecurityMechanism、LocalDatabase及 XSLTMechanism等六大
類別。其中 CommunicationKernel負責所有機制對外的界面(Boundary)。由圖可知，Communication Kernel
將通用網服基元內各個物件的運作連繫起來，所以其它的系統元件只要繼承 Communication Kernel，即
具有使用通用網服基元內所有物件的能力。
主題七：設計與實作以網路服務為通訊機制之統一認證機制及訊息安全傳輸架構
本計畫之通用網服基元將使用 SSL傳輸安全協定與 XML Encryption實現資訊的保護，並結合統一認證機
制，登入使用者的 SOAP訊息及驗證 XML Signature藉以滿足系統安全性的需求。當需使用透過 Internet
進行資料傳輸時，就會啟動此安全機制。圖十四為本計畫擬建構之資訊安全與驗證授權機制示意圖：首
: Business
System
: CommunicationKernel : XSLTMechanism : LocalDatebase
1. //UseXSLT
1.1. // SendXMLfiles
1.1.1. // LoadXSLfiles
1.1.2. //XSLtransform
1.1.3. // SaveXMLfiles
圖十二 使用 XSLT機制的循序圖
圖十三 通用網服基元初步的類別圖
14
主題八：實作半導體機台網路式診斷與預防保養資訊整合架構
本主題將依據前面主題之設計，實作出半導體機台網路式診斷與預防保養資訊整合架構，以下將分別說
明預估的開發環境、軟體需求與實作步驟。
8.1開發環境
本網路式診斷與預防保養資訊整合架構將以Windows 2000為開發平台，發展通用網服基元（Web Service Agent）
與Authentication Service等系統元件，並將分別以C#、JAVA與崁入式技術等三種不同方式開發通用網服基元，
以供所有子計畫繼承使用。其中RDMS（子計畫二之 II）的通用網服基元將利用 Java語言實作，與Authentication
Service則將以C#實作，採用Microsoft .NET CLR為其執行環境。如此，本計畫可驗證此架構在不同執行環境
上的互通性。
8.2 軟體需求
 Borland JBuilder 7
本實作以 Java程式語言來發展 RDMS的通用網服基元系統元件，並選擇 Borland Jbuilder 7為其發展工具。
Microsoft Visual Studio .NET
本實作以 C#程式語言來發展 ODMS 的通用網服基元與 Authentication Service，並選擇 Microsoft Visual
Studio .NET為其發展工具。
 Apache Axis與Microsoft Internet Information Services
使用 Apache Axis作為 RDMS的Web Server；而 ODMS及 Authentication Service的Web Server則採用
Microsoft Internet Information Services。
Microsoft SQL Server 2000
採用Microsoft SQL Server 2000以建置工廠端診斷
資料庫及各伺服元件的本端資料庫。
8.3 實作步驟
整個網路式診斷與預防保養資訊整合架構之實作
步驟初步擬定如圖十七所示，說明如下：
1.定義各系統元件的Web Services。
2.定義各Web Services的連結位址。
3.產生其Web Services的WSDL。
4.註冊Web Services於任一個 UDDI節點。
5.實作Web Services的內容。
6.使用其Web Services的 Client端，從 UUDI節點
找到 Web Services，依據 WSDL 建立其 Web
Services的 Proxy，並實作 Client端的內容。
第三年部份
主題九：建構機台網路式診斷與預防保養系統之行為架構訊息與整合測試腳本
為設計網路式診斷與預防保養系統，必須事先依據各個子計畫系統元件間溝通的模式，定義好各種功能
運作之架構訊息（Framework Messages），亦即定義出系統間透過 SOAP傳輸的運做訊息，以此做為系統
功能發展的依據，並當成整合測試的腳本（Scenario）。本主題將針對各個子計畫實際的功能需求，訂定
各自的行為架構訊息，初步規劃說明如下：
9.1 機台診斷流程說明：（如圖十八所示）：
1. EEA將 EE資料與錯誤訊息傳送給 ODMS作為診斷與修復資訊。
圖十七 網路式診斷與預防保養資訊整合架構實作流程圖
16
保修依據。
13. EEA將診斷與保修結果回傳給 RDMS。
14. RDMS 將此新的機台問題與保修方案傳送
給所有的客戶做參考。
9.3 APC/OEE系統流程說明（如圖二十所示）
1. EEA將 EE資料傳送給 AOS。
2. AOS使用 DM ( Data Mining )、IS ( Intelligent
Search )與 FMEA ( Failure Mode and Effects
Analysis ) 進行資料分析。
3. AOS將資料分析結果回傳給 EEA進行改進
措施。
4. AOS 將資料分析結果傳送給 OLMS 供料配
件物流管理之參考。
5. AOS將資料分析結果傳送給 ODE供可偵錯
性策略擬定之參考。
9.4 機台料配件物流管理流程說明（如圖二十一
所示）
1. ODMS 將需要備料之零件資訊傳送給
OLMS。
2. ODME將模擬分析之後需要備料之零件資訊
傳送給 OLMS。
3. OLMS 使用 CFPR ( Collaborative Planning
Forecasting and Replenishment ) 分析從
ODMS與 ODE得到之備料資訊。
4. OLMS根據 CFPR分析所得到之將備料資訊
向 RLMS要求確認及備料。
5. RLMS根據從OLMS得到之將備料資訊提供
意見並進行備料。
6. 將備好之零件傳送給 OLMS。
9.5 機台可偵錯性線上評估流程說明（如圖二十
二所示）
1. EEA將EE資料傳送給ODE進行機台可偵錯
性分析。
2. ODE 根據從 EEA 得到之 EE 資料進行機台可
偵錯性評估。
3. ODE根據從 EEA得到之 EE資料請求 RDE給
予評估協助。
4. RDE 根據從 ODE 得到之 EE 資料進行評估和
準備給予協助。
5. RDE根據從 ODE得到之 EE資料提供 ODE適
當的協助。
6. ODE 將機台可偵錯性評估結果傳送給 ODMS
供診斷與維護架構擬定之參考。
7. ODMS 根據從 ODE 得到之評估結果傳送給
OLMS作為料配件物流管理之參考。
ODEEEA ODMS OLMS RDE
1.deliver EE data for diagnosability
analysis
2.evaluate diagnosability
6.deliver the evaluation results for diagnostics and prognostics purposes
3.request supplier's supports
4.evaluate and prepare supports
5.provide appropriate supports
7.deliver the evaluation results for spare-parts considerations
Factory Side Supplier Side
Internet
圖二十二 機台可偵錯性及可維護性研究與線上評估流程圖
Factory Side Supplier Side
Internet
ODEODMS OLMS RLMS
1.pass information for spare-parts considerations
2.pass information for
spare-parts considerations
3.analyze using CPFR
4.request for spare-parts information
5.prepare the spare-parts
information
6.provide the required spare-parts information
圖二十一 機台料配件物流管理流程圖
EEA AOS OLMS ODE
1.deliver EE data
2.analyze using DM, IS, & FMEA
4.deliver the analysis results
3.feedback analysis results
5.deliver the analysis results
圖二十 APC/OEE系統流程圖
18
五、參考文獻
[1] e-Diagnostics and EEC Workshop, International SEMATECH, Munich, Germany, Apr. 16, 2002.
http://www.sematech.org/
[2] e-Diagnostics Guidebook, version 1.5, International SEMATECH, Oct. 2002. http://www.sematech.org/
[3] Web site of the Center for Intelligent Maintenance Systems (IMS). http://www.imscenter.net/
[4] XML Specification. http://www.w3c.org/XML
[5] Extensible Stylesheet Language (XSL) Specification. http://www.w3.org/TR/1999/WD-xsl-19990421/
[6] W3C Web Site. http://www.w3.org/
[7] Web Services. http://www.webservices.org
[8] SOAP Specification. http://www.w3c.org/tr/soap
[9] WSDL Specification. http://www.w3c.org/tr/wsdl
[10] UDDI Specification. http://www.uddi.org
[11] B. Meyer, “.NET Is Coming,” Computer, vol. 34, pp.92-97, Aug. 2001.
[12] Microsoft .NET, http://www.microsoft.com/net/
[13]GXA Defines Framework for Web Services. http://www.directionsonmicrosoft.com
[14] Web Services Enhancements for Microsoft .NET.
http://msdn.microsoft.com/webservices/building/wse/default.aspx
[1] M.-H. Hung, F.-T. Cheng, and S.-C. Yeh, "Development of a
Web-Services-based e-Diagnostics Framework for the Semiconductor
Manufacturing Industry," IEEE Transactions on Semiconductor Manufacturing,
vol. 18, no. 1, pp. 122-135, February 2005.
HUNG et al.: DEVELOPMENT OF WEB-SERVICES-BASED e-DIAGNOSTICS FRAMEWORK 123
Fig. 1. Development procedure of the WSDF.
supporting systems, and deliver diagnostics information among
fabs and suppliers. Therefore, the construction of an e-diagnos-
tics system involves a variety of cross-platform information in-
tegration issues, such as the development of data transformation
mechanism, the design of communication messages, the selec-
tion of data transmission protocols, and the construction of a
safe network connection.
To fulfill the requirements of e-diagnostics systems and
remedy the shortcomings of existing diagnostic systems, this
paper proposes an e-diagnostics framework, called Web-Ser-
vices-based e-diagnostics framework (WSDF), which is based
on the new-generation distributed object technology—Web Ser-
vices [13]. WSDF possesses the mechanism of automatically
integrating diagnostics information over the Internet and thus
can support many functions needed for e-diagnostics, such as
automatically collecting equipment data, remotely diagnosing,
fixing, and monitoring equipment, and analyzing and predicting
the equipment performance.
WSDF uses the Web-Services technology to resolve the
information integration problems among cross-network,
cross-platform, and heterogeneous systems. In particular,
eXtensible Markup Language (XML) [14], [15] is exploited
to express data such that various kinds of information can
be exchanged and integrated among different systems and
platforms. In addition, Simple Object Access Protocol (SOAP)
[16] [17] is used as the messaging protocol to achieve the
interoperability of cross-platform and distributed systems. It is
notable that SOAP messages can be transported using Hyper
Text Transmission Protocol (HTTP) such that communication
messages can successfully pass through the firewall. Also, with
the property that Web Services are programmable application
components that can be described by Web Services Description
Language (WSDL) [18] and published on the Web, WSDF
allows semiconductor fabs to register equipment engineering
services and suppliers to register diagnostics services on Uni-
versal Description Discovery and Integration (UDDI) registry
nodes [19]. As such, client applications can find those equip-
ment engineering services and diagnostics services on Web and
use them. Therefore, WSDF can easily be expanded for global
applications involving multiple fabs and multiple suppliers.
Besides, a unified authentication-service mechanism and a safe
network connection are also designed in the framework.
The remainder of the paper is organized as follows. Section II
introduces the procedure of system development. Section III de-
tails the design of the WSDF. The object-oriented analysis and
design of system components in WSDF are depicted in Sec-
tion IV. Section V constructs a paradigm application of e-diag-
nostics and describes the associated implementation and inte-
gration test. Section VI provides the summary and conclusions.
Finally, Appendix A describes the acronyms in the paper.
II. DEVELOPMENT PROCEDURE
A systematic procedure is devised to develop the WSDF,
as shown in Fig. 1. Five stages are included in the procedure:
system analysis, e-diagnostics framework design, component
design and implementation, application construction, and
system integration and testing. Each stage of the procedure is
described as follows.
HUNG et al.: DEVELOPMENT OF WEB-SERVICES-BASED e-DIAGNOSTICS FRAMEWORK 125
Fig. 2. WSDF model.
Fig. 3. System component model of the WSDF.
B. Design the System Component Model
Based on the framework model in Fig. 2, the system com-
ponent model of WSDF is designed as in Fig. 3. The system
components include fab’s DAS and ODS, supplier’s RDS, au-
thentication service, and service components of other factories
and suppliers. The major server components, DAS, ODS, and
RDS in WSDF are described as follows.
HUNG et al.: DEVELOPMENT OF WEB-SERVICES-BASED e-DIAGNOSTICS FRAMEWORK 127
Fig. 5. Functional blocks of the Web-Service agent.
plug-and-play fashion. In such a manner, other business com-
ponents, such as manufacturing execution system (MES), enter-
prise resources planning (ERP), and supply chain management
(SCM), can also inherit the Web-Service agent to interoperate
with WSDF components.
According to aforementioned properties, WSDF can be ex-
panded for global applications involving multiple fabs and mul-
tiple suppliers, as shown in Fig. 4. The DASs in semiconductor
fabs can register various EE Web Services into UDDI registry
nodes such that the RDSs of suppliers can find and use these
services to obtain global EE data and access specific equipment.
At the same time, semiconductor fabs that possess diverse kinds
of equipment can find and use the correct diagnostics Web Ser-
vices registered by suppliers from any UDDI registry node. In
the manner that the service components of factories and sup-
pliers are described with WSDL and registered through UDDI
and can communicate with each other via SOAP, the global ap-
plication of WSDF can be achieved.
C. Identify Generic Functions Among Components
As described previously, several common functions, in-
cluding SOAP communication, UDDI registration, security
mechanism, data exchange mechanism, and local database
access, can be identified and put together to become the
Web-Service agent. In Fig. 5, the functional blocks that include
SOAP Interface, UDDI Registry Mechansim, Security Mech-
anism, eXtensible Stylesheet Language [35] Transformations
(XSLT) Mechanism, and Local Database, are used to express
these common functions, individually. Also, the Communi-
cation Kernel is designed to manage and use these functions.
Additional generic capabilities can also be added in the future.
D. Define Framework Messages
For the design of WSDF to support a specific application
operation, the framework messages, which are the communica-
tion messages among WSDF system components to complete
that operation, should be defined. According to the scenario of
the framework messages, the necessary system components in
WSDF and their associated methods and attributes can then be
designed. For example, Fig. 6 shows a set of designed frame-
work messages for completing an e-diagnostics operation,
which are described as follows.
1) When a fault occurs, the equipment delivers the error mes-
sage to DAS.
2) DAS passes the error message to ODS.
3) ODS searches the LDD for the diagnostic solution (check-
point solution) based on the error message.
4) ODS responds to DAS with the checkpoint solution.
5) DAS itself with the aid of onsite engineers may trou-
bleshoot the equipment based on the checkpoint solution.
6) DAS reports the diagnostic status to ODS. This completes
the local diagnostic operation.
7) If no diagnostic solution for the occurring fault is found
locally, or the fault cannot be remedied accordingly, then
DAS delivers the error message to RDS.
8) RDS responds to DAS with the checkpoint solutions,
which are obtained from the diagnostics-solutions re-
trieval system, which is a remote diagnostics system on
the supplier side.
9) DAS itself with the aid of onsite engineers may trou-
bleshoot the equipment based on the checkpoint solution
obtained in Step 8).
10)DAS reports the diagnostic status to ODS.
11)ODS saves the new case, which includes the information
of the fault and the associated diagnostic solution to LDD
to facilitate future local diagnostic operations.
12)DAS reports the diagnostic status to RDS to complete the
remote diagnostic operation.
The above framework messages consider ISMT e-diagnos-
tics capabilities [2] of Levels 0 and 1. Also, the framework mes-
sages of other operations, such as APC/OEE (Level 2 capability)
and e-maintenance (Level 3 capability) can also be defined [36].
The associated example scenarios considering the four levels of
e-diagnostics capabilities will be presented in Section V. It is
noted that the framework messages could be derived based on
the requirements of customized e-diagnostics operations or by
HUNG et al.: DEVELOPMENT OF WEB-SERVICES-BASED e-DIAGNOSTICS FRAMEWORK 129
Fig. 7. Use case diagram of the Web-Service agent.
service mechanism. This use case also includes the use case
“Connect to local database” to access user authorization data
from the local database.
According to the scenarios in all of the use cases, the se-
quence diagrams are developed. Then, the corresponding class
diagrams are designed. For the purpose of demonstrating the
properties of cross-platform and cross-language designs for the
Web-Service agent, this research develops two versions, Java
and C#, of Web-Service agent, aiming for two popular main-
stream programming platforms, Sun J2EE [21] and Microsoft
.NET [22], respectively. Currently, Microsoft .NET has sup-
ported over 20 programming languages, including C , Visual
Basic, and C#, and .NET allows cross-language inheritances.
Also, Java can be executed almost on any platform. Therefore,
system components can have two choices for selecting Java or
C# version of Web-Service agent to inherit.
Due to the space limit, only the Java version of the OOD
class diagram of the Web-Service agent is presented in Fig. 8.
The figure also illustrates the static relationships among the
constituent classes of the Web-Service agent, which are Se-
curityMechanism, SOAPInterface, CommunicationKernel,
XSLTMechanism, LocalDatabase, and UDDIRegistryMecha-
nism. Among these classes, CommunicationKernel associates
with all the other classes and possesses outward (boundary)
functional interfaces. Thus, a system component can possess
the functions provided by the Web-Service agent by just inher-
iting the CommunicationKernel class.
B. DAS
From the framework messages defined in Section III-D, the
communication messages associated with DAS can be identi-
fied. Then, the functional requirements of DAS can be summa-
rized as follows:
1) possess a SOAP communication interface for messaging
and coordination;
2) provide a UDDI registry mechanism for registering and
searching Web Services;
3) provide an XSLT mechanism for transforming the formats
of XML documents;
4) possess a security mechanism to encrypt and decrypt the
data delivered over the Internet and to provide authentica-
tion and authorization of accessing system services;
5) provide the functions of accessing the local database;
6) provide functions for remotely manipulating, monitoring,
and controlling equipment;
7) report EE data;
8) diagnose equipment.
HUNG et al.: DEVELOPMENT OF WEB-SERVICES-BASED e-DIAGNOSTICS FRAMEWORK 131
Fig. 9. Class diagram of DAS.
identification data to obtain the user’s authorization status.
OASIS SAML standard [23], [24] and Microsoft .NET passport
[25] may be referred to implement the authentication-service
mechanism. This part can also involve the PKI technique [38]
to encrypt and decrypt messages with public keys.
V. SYSTEM IMPLEMENTATION AND INTEGRATION TEST
A paradigm e-diagnostics system based on the WSDF model
shown in Figs. 2 and 3 has been successfully implemented, es-
tablished, and tested at the Automation Laboratory, Institute
of Manufacturing Engineering, National Cheng Kung Univer-
sity, Taiwan, R.O.C. The details of system implementation and
testing are described below.
A. System Implementation
Microsoft Windows 2000 [22] is selected as the development
platform. Specifically, DAS and RDS are programmed in Java
and adopt Sun JRE [21] as their execution environment with
Borland JBuilder 7 [39] being the development tool. On the
other hand, ODS and the authentication-service mechanism are
implemented in C#, and Microsoft .NET CLR is their execution
environment with Visual Studio .NET [22] being the develop-
ment tool. This type of implementation can also verify the in-
teroperability of WSDF among heterogeneous systems.
Also, Apache Axis [40] is selected as the Web servers of DAS
and RDS, while ODS and the authentication-service mechanism
adopt Microsoft Internet Information Services (IIS) [22] as the
Web servers. Finally, Microsoft SQL Server 2000 [22] is used
to construct the various databases.
B. Paradigm Application of e-Diagnostics
According to Figs. 2 and 3, a paradigm application of e-diag-
nostics using WSDF is constructed to verify the effectiveness of
HUNG et al.: DEVELOPMENT OF WEB-SERVICES-BASED e-DIAGNOSTICS FRAMEWORK 133
Fig. 11. Illustration of the operations of the authentication-service mechanism.
model can predict the future potential faults of equipment
before they occur. Accordingly, equipment engineers can take
necessary precautions against those faults in advance such that
the availability of equipment can be effectively raised.
To test the e-diagnostics paradigm application in a simulated
environment, OBEM equipment simulators [27] are used to re-
place the equipment. Also, compliance equipment simulators
(CEM) may be developed and employed in the future.
C. Integration Test
A snapshot of the integration test of the paradigm e-diagnos-
tics system is shown in Fig. 12. The graphical user interfaces
(GUIs) for DAS, ODS, RDS, and equipment simulators are dis-
played. Four major scenarios are adopted to test the system,
which are described as follows.
1) Diagnose Equipment Through ODS:
a) When an error occurs on equipment, the equipment sends
the error messages, which include equipment type, error
code, faulty part, and fault symptoms, to DAS. DAS then
delivers the error messages to ODS. Next, ODS searches
the relevant diagnostic solutions from the LDD according
to the error messages. Finally, ODS replies the diagnostic
solutions to DAS.
b) If a proper diagnostic solution is available, the onsite
equipment engineer executes the suggestion for diag-
nosing and repairing the equipment.
c) After successfully fixing the fault, the onsite equipment
engineer reports the successful repair information, which
includes the fault and the associated diagnostic solution
and the restoration status to ODS via DAS. ODS then
stores the repair information and statuses into the LDD
for the reference of next local diagnostic tasks.
2) Diagnose Equipment Through RDS:
a) In case no proper local diagnostic solution is available (ei-
ther the retrieved solution is invalid or no local solutions
exist), the onsite equipment engineer delivers the error re-
lated information to RDS through the Internet via DAS.
After RDS receives the error information, the DSRS in
RDS will then process the error information and return
the proper diagnostic solution to DAS.
b) Same as Step b) in the Scenario 1).
c) Same as Step c) in the Scenario 1). DAS also reports the
repair information and statuses to RDS for the reference
of RDS’s future diagnostics tasks.
3) Remotely Diagnose Equipment Through DAS and RDS:
a) If a proper diagnostic solution is still unavailable, via DAS
the onsite equipment engineer can ask RDS for advanced
expert’s diagnostics services.
b) The equipment supplier’s expert can perform remote op-
erations to diagnose and repair the equipment through the
remote equipment engineering system on RDS.
c) In case DAS and/or the factory onsite equipment engineer
finds any unreasonable remote operation on equipment,
the remote operation can be stopped immediately.
d) The equipment expert on the supplier side stores the repair
information and statuses to the global diagnostics data-
base (GDD) for future references.
It is noted that when RDS is conducting a remote diagnosis
on the faulty equipment at steps b) and c), DAS will display
messages to warn that the equipment is under remote diagnosis
mode.
4) EE Data Collection and Predictive Maintenance:
a) DAS collects EE data from equipment and then forwards
these EE data to ODS.
HUNG et al.: DEVELOPMENT OF WEB-SERVICES-BASED e-DIAGNOSTICS FRAMEWORK 135
[15] Guide for style usage of XML for semiconductor manufacturing appli-
cations (2003, Jan.). [Online]. Available: www.semi.org
[16] SOAP specification [Online]. Available: http://www.w3c.org/tr/soap
[17] Provisional specification for XML message structures (2003, May). [On-
line]. Available: www.semi.org
[18] WSDL specification [Online]. Available: http://www.w3c.org/tr/wsdl
[19] UDDI specification [Online]. Available: http://www.uddi.org
[20] G. Booch, J. Rumbaugh, and I. Jacobson, The Unified Modeling Lan-
guage Guide. New York: Addison-Wesley, 1999.
[21] Sun Java Web site, http://java.sun.com/.
[22] Microsoft web site [Online]. Available: http://www.microsoft.com/
[23] Z. Svoboda. (2002) Securing Web Services with Single Sign-On
[Online]. Available: http://www.theserverside.com/resources/arti-
cles/Systinet-web-services-part-6/article.html
[24] Security assertion markup language (SAML) v1.1 [Online]. Available:
http://www.oasis-open.org/specs/index.php#samlv1.1
[25] Microsoft .NET passport [Online]. Available: http://www.microsoft.
com/netservices/passport
[26] SSL 3.0 specification [Online]. Available: http://wp.netscape.com/
eng/ssl3/
[27] F.-T. Cheng and C.-Y. Teng, “An object-based controller for equipment
communications in semiconductor manufacturing,” Robot. Comput.-In-
tegrated Manufact., vol. 185–6, pp. 371–386, Oct. 2002.
[28] F.-T. Cheng and M.-T. Lin, “Enhancement of semiconductor equipment
communications using a web-enabled equipment driver,” IEEE Trans.
Semiconduct. Manufact., vol. 14, pp. 372–380, Nov. 2001.
[29] The Object-Based Equipment Model, 2001. Semiconductor equipment
and materials international, SEMI E98, SEMI International Standard
CD-ROM.
[30] Provisional specification for the common equipment model (CEM)
(2003, Jan.). [Online]. Available: www.semi.org
[31] H. Balen, Distributed Object Architectures with CORBA: SIGS, May
2000.
[32] R. Sessions, COM and DCOM: Micrsoft’s Vision for Distributed Ob-
jects, Jun. 1997.
[33] Provisional Specification for Equipment Self Description (ESD), May
2003. SEMI E125.
[34] Proposed standard for equipment data acquisition solutions (2003, Jan.).
[Online]. Available: www.semi.org
[35] XSL Specification [Online]. Available: http://www.w3.org/TR/xsl/
[36] S.-C. Yeh, “Development of a Web-Services-based information integra-
tion framework for e-diagnostics,” Master dissertation, National Cheng
Kung Univ., Taiwan, R.O.C., 2002.
[37] OPC foundation web site [Online]. Available: http://opcfoundation.org/
[38] Public Key Infrastructure [Online]. Available: http://www.pkiforum.org/
[39] Borland Software Corp. [Online]. Available: http://www.borland.com/
[40] Apache AXIS [Online]. Available: http://ws.apache.org/axis/
[41] J. Han and M. Kamber, Data Mining: Concepts and Techniques. San
Mateo, CA: Morgan Kaufmann, 2001.
[42] Ontology.org [Online]. Available: http://www.ontology.org/
[43] M.-H. Hung, R.-J. Huang, and F.-T. Cheng, “Development of an e-di-
agnostics system for semiconductor equipment using data mining and
ontology,” in Proc. 7th Int. Conf. Automation Technol., Taiwan, R.O.C.,
Sept. 2003, pp. 37–42.
[44] G.-W. Huang, “Design and implementation of e-maintenance functional
schemes for semiconductor equipment,” M.S. thesis, National Cheng
Kung Univ., Taiwan, R.O.C., 2003.
Min-Hsiung Hung was born in Chang-Hua, Taiwan,
R.O.C., on September 9, 1966. He received the B.S.
degree from Chung Cheng Institute of Technology,
Taiwan, the M.S. degree from National Cheng Kung
University, Taiwan, and the Ph.D. degree from The
Ohio State University, Columbus, in 1988, 1992, and
1999, respectively, all in electrical engineering.
He is currently an Associate Professor of electrical
engineering at Chung Cheng Institute of Technology,
National Defense University, Taiwan. His research
interests include factory automation for semicon-
ductor manufacturing, e-manufacturing, e-diagnostics, remote monitoring
and control technologies, information technology applications, intelligent
control, dynamic simulation and control of robotics, microprocessor systems,
embedded systems, and systems on programmable chips.
Fan-Tien Cheng (S’87–M’89–SM’98) received the
B.S. degree from the National Cheng Kung Univer-
sity, Taiwan, R.O.C., and the M.S. and Ph.D. degrees
from The Ohio State University, Columbus, in 1976,
1982, and 1989, all in electrical engineering.
He was employed by the Chung Shan Institute of
Science and Technology (CSIST), Taiwan, as a Re-
search Assistant in 1976 and was promoted to Assis-
tant Scientist, Associate Scientist, and Senior Scien-
tist in 1982, 1986, and 1994, respectively. He left the
Institute in August of 1995 when he was named an
Associate Professor of Manufacturing Engineering at the National Cheng Kung
University (NCKU). He was promoted to Full Professor in August 1997 and a
Distinguished Professor in August 2003. He served as the Director of the In-
stitute of Manufacturing Engineering from August 1998 to July 2001. When
he was in the CSIST, he served as the Director of Managing Office for design,
development, testing, and maintenance of modern fire control systems. His re-
search interests include factory automation for semiconductor manufacturing,
e-manufacturing, e-diagnostics, as well as control and optimization of multiple-
chain robotic mechanisms and redundant manipulators. He built a web-enabled
experimental manufacturing execution system, a holonic supply chain informa-
tion system, and a test bed of e-diagnostics framework for semiconductor man-
ufacturing at the Automation Laboratory of the Institute of Manufacturing En-
gineering for educational and research purposes.
Dr. Cheng was honored for his work with the Senior Scientist Award of
the R.O.C. Department of Defense in 1994. He won the Kayamori Best Paper
Award of the 1999 IEEE International Conference on Robotics and Automation.
He served as the Program Chair of 2002 IEEE/ASME International Conference
on Advanced Manufacturing Technologies and Education (AMTE 2002),
Award Chair of the Seventh International Conference on Automation Tech-
nology (Automation 2003), and Finance Chair of the 2003 IEEE International
Conference on Robotics and Automation (ICRA 2003). Currently, he serves
as the Program Chair of International Conference on Hands-on Intelligent
Mechatronics and Automation (HIMA 2005). He has been an Associate Editor
of the IEEE TRANSACTIONS ON ROBOTICS AND AUTOMATION since May 2000.
He is a board member of Chinese Institute of Automation Engineers. He
received the Outstanding Industry-University Cooperation Award in 2003 from
the Ministry of Education of R.O.C., and the Distinguished Industry-University
Professor Award of NCKU in 2004. He also served as advisor of the winners
of the 1999, 2000, and 2003 Acer Dragon Thesis Awards.
Sze-Chien Yeh was born in Taipei, Taiwan, R.O.C.,
on April 14, 1976. He received the B.S. degree in me-
chanical engineering from the Tam Kang University,
Taiwan, in 2000, and the M.S. degree in manufac-
turing engineering from National Cheng Kung Uni-
versity, Taiwan, in 2002.
He currently works as a System Analyst in the
R&D center for supply chain management, Pouchen
International Group, Taiwan. His research interests
include equipment automation and factory automa-
tion for semiconductor manufacturing.
Mr. Yeh received the Web Services Programming Award from Microsoft in
July 2002.
Development of an e-Diagnostics/Maintenance framework
for semiconductor factories with security considerations
Min-Hsiung Hunga,*, Kuan-Yii Chena, Rui-Wen Hoa, Fan-Tien Chengb
aDepartment of Electrical Engineering, Chung Cheng Institute of Technology, National Defense University, Tao-Yuan 335, Taiwan, ROC
bInstitute of Manufacturing Engineering, National Cheng Kung University, Tainan 70101, Taiwan, ROC
Abstract
In recent years, the concept of e-Diagnostics and e-Maintenance is proposed in the semiconductor industry. By using Internet and
information technologies, e-Diagnostics and e-Maintenance intend to provide equipment specialists with the remote capabilities of
connectivity, manipulation, configuration, performance monitoring, and data collection and analysis on equipment to achieve the goal of
promptly diagnosing, repairing, and maintaining equipment. In this paper, new-generation information software technologies and object-
oriented technologies, such as Web Services, XML signature, XML encryption, UML, etc. are used to develop an e-Diagnostics/Maintenance
framework with security considerations. The proposed framework can achieve the automaton of diagnostic processes and the integration of
diagnostics and maintenance information under a secure communication infrastructure.
q 2004 Elsevier Ltd. All rights reserved.
Keywords: e-Diagnostics; e-Maintenance; Semiconductor Equipment; Web Services; Information integration framework
1. Introduction
The cost of equipment approximately occupies 75% of
the total investment for a semiconductor factory [1].
However, according to the statistics, such costly equipment
only possesses 33% of overall equipment effectiveness
(OEE) [1]. There is too much time during which the
equipment is either idle or under the routine/non-routine
maintenance. Therefore, how to effectively increase the
equipment effectiveness and availability has become a very
important task to be dealt with in the semiconductor factory.
It is also one of the key factors for gaining profits.
Generally, a semiconductor factory can increase the
equipment’s effectiveness and availability by diagnostics
and maintenance measures [2]. At present, the work of
diagnostics and maintenance on equipment is still far away
from full automation. When a problem occurs to equipment,
the equipment engineer may obtain the relevant remedy
solution from past experiences or by looking up
the equipment repair and maintenance documents provided
by the equipment supplier. If the problem is too compli-
cated, the equipment supplier may need to send equipment
service engineers to the factory to perform diagnostics,
testing, and maintenance on the equipment. Sometimes, the
equipment service engineer needs to bring the symptom
back to the equipment supplier’s diagnostics center and
uses the information system to inquire the solution
information or purchase the required maintenance com-
ponents. Hence, the diagnosis and repair on failed equip-
ment usually cannot be performed immediately such that the
downtime of equipment is long and causes a significant
production loss [3].
Due to the advancement of information and Internet
technologies, the concept of e-Diagnostics [4] and e-Main-
tenance [5] is proposed recently in the semiconductor
industry. By leveraging information and Internet technol-
ogies, the e-Diagnostics/Maintenance system provides equip-
ment supplier’s experts with the capability to remotely link to
factory’s equipment through Internet, allowing them to take
remote actions, such as setup, control, configuration,
diagnosis, de-bugging/fixing, performance monitoring, and
data collection and analysis. Accordingly, equipment can be
rapidly repaired and maintained, and equipment performance
1474-0346/$ - see front matter q 2004 Elsevier Ltd. All rights reserved.
doi:10.1016/j.aei.2004.07.004
Advanced Engineering Informatics 17 (2003) 165–178
www.elsevier.com/locate/aei
* Corresponding author. Tel.: C886-3-3809991 ext 162; fax: C886-3-
3801407.
E-mail addresses: minmin@ccit.edu.tw (M.-H. Hung), chengft@
mail.ncku.edu.tw (F.-T. Cheng).
and integration test. Finally, Section 7 provides the
summary and conclusions. Finally, Appendix A describes
the acronyms in the paper.
2. Design of the e-Diagnostics/Maintenance framework
The proposed Web-Services-based e-Diagnostics/Main-
tenance framework with security considerations is shown in
Fig. 1. For the sake of security, an outer firewall is installed
between the Internet and the enterprise (IC factory or
equipment supplier) to protect the security of Extranet
information of the enterprise. Also, an inner firewall
is installed within the enterprise to handle the inspection
and screening of the information that intends to enter the
enterprise’s Intranet for avoiding confidential data of
equipment being stolen or damaged. The information
components in Extranet usually need to communicate with
other information components outside the enterprise;
therefore, public Internet Protocol (IP) addresses are used.
On the contrary, the information components inside Intranet
need to use private IP addresses to lower the possibility of
suffering damages.
As shown in Fig. 1, the proposed e-Diagnostics/
Maintenance framework consists of Equipment with
Embedded Agent (EEA), On-site Diagnostics/Maintenance
Server (ODMS), Local Diagnostics/Maintenance Database
(LDMD) and On-site Global Equipment Engineering
Database (OGEED) in Intranet on IC factory side,
Monitoring and Security Server (MSS) in Extranet on IC
factory side, Remote Diagnostics/Maintenance Server
(RDMS) and Global Diagnostics/Maintenance Database
(GDMD) in Extranet on equipment supplier side, and
Universal Description Discovery and Integration (UDDI)
[26] Registry Node in Internet.
EEA is the equipment that contains an embedded agent.
The embedded agent in EEA is responsible for monitoring
the equipment and collecting equipment engineering data
and can exchange data with other system components
through SOAP.
ODMS is the diagnostics and maintenance server
component. It contains various equipment engineering
Web Services components to provide diverse functions
and information required for equipment diagnostics and
maintenance. Moreover, ODMS is also responsible for
handling the local diagnostics and maintenance process of
equipment. For instance, when an error occurs on equip-
ment, the diagnostics will be processed first by ODMS to
solve the equipment problem. If the problem cannot be
solved locally, the equipment engineer near EEA may then
make a judgment for whether or not to activate the remote
diagnostics to request the assistance of the diagnostics
system on the equipment supplier side through Internet.
Such an operation practice can save the network bandwidth
and avoid the security threat that comes from the remote
diagnostics services through Internet.
ODMS can also retrieve equipment engineering (EE)
data from EEAs and save them into OGEED. These EE data
Fig. 1. The proposed Web-Services-based e-Diagnostics/Maintenance framework with security considerations.
M.-H. Hung et al. / Advanced Engineering Informatics 17 (2003) 165–178 167
various functions and information required for the diag-
nostics, maintenance, and engineering operations of equip-
ment in the IC factory. These equipment-engineering
components of ODMS are built upon ODMS Web-Services
Agent. Other system components can use the functions
provided by ODMS by calling the methods in ODMS Web-
Services Agent with SOAP.
MSS is responsible for providing the system with a
unified mechanism of user authentication and authori-
zation with single sign-on capability [27]. In addition,
MSS applies the technologies, such as XML signature and
XML encryption, to authenticate the accuracy of the
remote operation messages of equipment. MSS also
contains the functions of user policies and profiles
management, which can collectively manage the infor-
mation and authorization of the system users. Accord-
ingly, the maintenance cost is reduced and the security is
enhanced. Besides, MSS acts as the security guard for
equipment and the remote diagnostics server component.
It provides the function of security logging that can
monitor and record all of the remote operation statuses of
the system to provide evidences for the system security
audit. The functions provided by MSS are built upon MSS
Web-Services Agent in the form of Web Services. Other
system components can use the functions provided by
MSS by calling the methods in MSS Web-Services Agent
through SOAP.
In RDMS on the equipment supplier side, professional
diagnostics and equipment engineering components are
designed to provide remote diagnostics and maintenance
functions. Similarly, the functions provided by RDMS are
built upon RDMS Web-Services Agent in the form of Web
Services. Other system components can use the functions
provided by RDMS by calling the methods in RDMS Web-
Services Agent with SOAP.
Since Web Services are exploited as the communi-
cation infrastructure, and Web Services are loosely
coupled, the proposed framework has good expandability.
If a new component is implemented in the form of Web
Services, then it can be easily added to the system
communication infrastructure to interoperate with other
components.
4. Analysis and design of the monitoring and security
server
This section describes the analysis and design of the MSS
that plays the key role of security considerations in the
proposed e-Diagnostics/Maintenance framework. The
development follows the procedure of the standard object-
oriented system development. The functional requirements
are analyzed first, and then the object-oriented analysis
(OOA) and object-oriented design (OOD) are subsequently
performed.
4.1. Analysis of functional requirements
In this section, the functional requirements of MSS are
analyzed. The analyses include the following six phases: (1)
single sign-on authentication and authorization service; (2)
confirmation of data accuracy; (3) assurance of information
confidentiality; (4) management of system users; (5) audit of
system operations; and (6) safety guard and communication
agent.
4.1.1. Single sign-on authentication and authorization
service
All the components of the e-Diagnostics/Maintenance
system have the access security problem. In the proposed
framework, a single sign-on authentication and authoriz-
ation service is required. As such, after users passing the
authentication through the Web Services, a single integrated
authorization process can be performed so that it is not
necessary for the users to repeatedly perform login activities
among different system components for achieving inte-
grated operations among system components.
As shown in Fig. 3, a user requests MSS Web-Services
Agent to login the system via the user interface. MSS Web-
Services Agent, then, authenticates the user’s identity
through the authentication service. After finishing the
authentication, the user role-based identification is obtained
and fed back to the user. After successfully completing the
authentication for login, the user can use the feedback user
role-based identification to request MSS Web-Services
Agent to perform subsequent system operations. MSS
Web-Services Agent hands over the request to the
authorization service for processing authorization. Then,
after the authorization result is obtained, it will be passed to
the relevant application program for execution. By referring
to.NET passport mechanism [30] and Security Assertion
Markup Language (SAML) standard of OASIS [31],
together with incorporating the Public Key Infrastructure
(PKI) mechanism [32] to encrypt/decrypt the transmitted
data, the single sign-on authentication and authorization
service is implemented.
4.1.2. Confirmation of data accuracy
The application of XML signature [23] can ensure the
integrity of SOAP messages transmitting in Internet. Also,
the SOAP message receiving side can authenticate the
transmitter’s identity through authenticating the XML
signature in the message. Combining these two character-
istics, the non-repudiation can be achieved as the basis for
security auditing.
The utilization of certificates is required for processing the
authentication work of XML signature. To enable the system
to effectively obtain and securely manage all the certifica-
tions, MSS is designed to uniformly authenticate the XML
signature of messages. As shown in Fig. 4, the user on RDMS
uses her/his certificate kept in the current user certification
store under the current operating system account to add XML
M.-H. Hung et al. / Advanced Engineering Informatics 17 (2003) 165–178 169
XML signature to the request SOAP message, and then the
system transmits the signed SOAP message to MSS for
requesting services. After receiving the signed SOAP
message, MSS applies the trusted certificate that is relative
to the service requester and saved in the local machine
certification store to authenticate the XML signature of the
received SOAP message. After the authentication process is
passed, MSS applies that trusted certificate that is relative to
the service requester to implement XML encryption to the
execution result of the service request, and then feeds the
encrypted result back to RDMS. The encrypted data can
finally be decrypted only by the service requester.
4.1.4. Management of system users
MSS is responsible for providing a single sign-on
authentication and authorization service for the proposed
framework. Thus, it needs to possess the function of the
system user management. To avoid providing too much
authorization to users, which will reduce the overall security
of the system, a role-based authorization mechanism is
applied. According to the identities and the professional
specialties of users participating system operations, the role
is classified into different user groups. Then, the users in
different groups are granted with different authorizations for
using the system applications.
For instance, the person who belongs to the administrator
group can add or delete the system users’ accounts and data
and manage the entire system, the person who belongs to the
tool-analyst group can obtain the equipment engineering
data for analysis, and the person who belongs to the
technical-support-specialist group can operate the equip-
ment either at the local site or on the remote side to perform
relevant diagnostics and maintenance tasks. In this way,
each user belongs to a certain user group. By setting up the
user groups for obtaining proper authority of using system
components, the management of user authorizations is
achieved.
4.1.5. Audit of system operations
When the function of remote diagnostics and mainten-
ance is performed, MSS is responsible for auditing all
external communications of the IC factory. Therefore, all
remote operations in the e-Diagnostics/Maintenance system
shall be recorded in MSS for the purpose of security
auditing. The records in MSS should include the requested
operation, the user information, the execution time,
execution results, and whether the requested operation is
authorized or not, so that the information security auditors
can smoothly perform their tasks. Moreover, a graphical
user interface is constructed to display the latest system
operation records. At any time, the information security
maintainer of the enterprise can monitor the system
operation statuses through this graphical user interface to
prevent any occurrence of system damages that may come
from unsecured behaviors.
4.1.6. Safety guard and communication agent
MSS is both the safety guard and the communication
agent between EEA and RDMS However, MSS is mainly
responsible for establishing the security functions for the
system, instead of practically performing requested oper-
ations. Therefore, MSS needs to possess the ability to pass
the requested operations on to other system components that
actually perform the associated operations. For instance, in
the operation that EEA requests remote diagnostics services
from RDMS, EEA actually sends the request to MSS, and
Fig. 5. Requirement analysis of the assurance of information confidentiality.
M.-H. Hung et al. / Advanced Engineering Informatics 17 (2003) 165–178 171
† Create a User: Administrator can add new system users
to the Account via MSS. This use case includes the
use cases of Get Current Users and Get Current User
Groups to avoid repeatedly setting up accounts for
existing users. Also, by selecting the newly added system
user and assigning the specific user group that the user
should belong to, the relevant authorization task is
completed.
† Create a User Group: Administrator can add a new user
group and the relevant authorization into the Account via
MSS.
† Modify Privileges: Administrator can revise the auth-
orities of the user groups stored in the Account via MSS.
This use case includes the use case of Get Current User
Groups to realize the authority setup status of the current
user groups. This authority setup status is used as the
basis for modifying the privileges.
According to the use case diagram, every use case is
further described to subsequently generate the correspond-
ing scenarios. Then, based on the scenarios, the OOA of
MSS is performed to create the sequence diagrams and class
diagrams of the OOA stage. Due to the space limit, here
only the sequence diagram of the remote single sign-on
authentication and authorization of MSS is demonstrated in
Fig. 7. For the rest of the detailed descriptions of OOA,
please refer to the Ref. [33].
The sequence diagram in Fig. 7 is described as follows.
Step 1. The user at RDMS sends the sign-on message with
XML signature and encryption to the interface of
MSS, MSSinterface.
Step 2. MSSinterface passes the sign-on message on to the
MSS Web-Services Agent.
Step 3. MSSWeb-ServicesAgent checks the XML signa-
ture of the message and gets the public key, the
encryption token, relevant to the remote user by
using the method and information in the machine
key store of MSS, MSSMachineKeyStore.
Step 4. MSSWeb-ServicesAgent decrypts the message
with the public key by calling the method in
MSSMachineKeyStore. Then the ID and password
of the remote user in plain-text format can be
obtained.
Step 5. MSSWeb-ServicesAgent authenticates the remote
user and gets the role-based authorization of the
remote user by using the method and information in
the database, Account.
Step 6. MSSWeb-ServicesAgent records the action infor-
mation that includes the user ID, user role, action
time, action, and condition into the auditing
database of MSS, MSSAuditingDatabase.
Step 7. MSSWeb-ServicesAgent encrypts the role-based
authorization information with the public key and
sends the encrypted information to RDMS through
MSSinterface. The user at RDMS can then decrypt
the message with his/her private key to get the role-
based authorization, which can be used in sub-
sequent system component accesses.
4.3. Object-oriented design
According to the sequence diagrams and class diagrams
generated during the OOA stage, the OOD of MSS can be
performed in depth to produce the sequence diagrams and
class diagrams of the OOD stage. Fig. 8 shows the sequence
Fig. 7. Sequence diagram of remote single sign-on authentication and authorization at the OOA stage.
M.-H. Hung et al. / Advanced Engineering Informatics 17 (2003) 165–178 173
equipment engineering system on the RDMS is created to
enable the supplier experts to remotely operate equipment
through MSS.
On the ODMS, in addition to the diagnostics component,
which can retrieve diagnostic solutions from LDMD
according to the equipment error messages, a prognostic
model for equipment predictive maintenance [37] is also
built by using neural network and time series analysis
techniques. The prognostic model can predict the future
potential faults of equipment before they occur. Accord-
ingly, equipment engineers can take necessary precautions
against those faults in advance such that the availability of
equipment can be effectively raised.
This prototype system adopts Windows 2000 as the
development platform to develop the system components
such as MSS, EEA, RDMS, ODMS, etc. Java language is
applied for the implementation of EEA, and Sun JRE [38] is
adopted as its execution environment. On the other hand,
MSS, ODMS, and RDMS are implemented with C#, and
Microsoft.Net CLR [39] is used as their execution
environment. This implementation has also proved the
interoperability of the proposed information integration
framework under heterogeneous execution environments
and different language programs.
The software tools of the system implementation include
(1) Borland Jbuilder 7 [40]; (2) Microsoft Visual Studio.NET
[39]; (3) Apache axis [41] and Microsoft Internet Infor-
mation Services [39]; (4) Microsoft SQL Server 2000 [39],
and (5) Microsoft Web Services Enhancement [42]. On the
other hand, the hardware for system deployment uses four
sets of Pentium IV PCs, where EEA, MSS, RDMS and
ODMS are separately installed in different PCs.
Fig. 10 depicts the system integration and testing of the
paradigm e-Diagnostics application. The designs of MSS,
EEA, ODMS and RDMS all have graphical user interfaces
for the convenience of users to operate the system. In this
prototype system, the equipment is substituted with the
equipment simulator that complies with CEM specifications.
In order to verify the effectiveness of the proposed
e-Diagnostics/Maintenance framework, various operational
scenarios are designed to test the system. Among them,
one scenario for e-Diagnostics operation and one for
e-Maintenance operation are described below.
† e-Diagnostics scenario:
1. When an error occurs on equipment, the equipment
sends the error message to EEA. EEA then delivers
the error message to ODMS. ODMS searches the
relevant diagnostic solution from the LDMD accord-
ing to the error message. Finally, ODMS replies the
diagnostic solution to EEA.
2. If a proper diagnostic solution is available, the on-
site equipment engineer executes the suggestion for
diagnosing and repairing the equipment.
3. The on-site equipment engineer reports the restor-
ation status to ODMS via EEA. ODMS stores
Fig. 9. Class diagram of MSS at the OOD stage.
M.-H. Hung et al. / Advanced Engineering Informatics 17 (2003) 165–178 175
7. Summary and conclusions
Based on the Web Services technology and new-
generation information security technologies, this paper
proposes an e-Diagnostics/Maintenance framework with
security considerations for the semiconductor industry. The
system is developed with an object-oriented approach. After
the system requirements are analyzed, the system frame-
work is designed first. Next, the system component model is
sketched. Then, the OOA and design, together with the
system implementation, integration, and testing, are
sequentially performed. The proposed framework provides
the mechanism for automatically integrating diagnostics
and maintenance information through Internet so that
various functions, such as automatic collection of equip-
ment engineering data, remote diagnostics, fixing, monitoring
of equipment, and fault prediction, which are necessary
to adequately support the e-Diagnostics/Maintenance tasks
in semiconductor factories, can be established. In addition,
the proposed framework can meet various security
requirements, such as the authentication and authorization
of users, the protection of information confidentiality, the
safeguard of data transmission security, and the monitoring
of system operations.
Because open and object-oriented technologies are used
to develop the system, the proposed e-Diagnostics/Mainte-
nance framework possesses the characteristics of openness,
modularity, expandability, easy maintenance, and low cost.
It is believed that the proposed framework can meet the
requirements of e-Diagnostics/Maintenance systems for the
semiconductor industry.
The authors would like to thank the National Science
Council of the Republic of China for financially supporting
this research under Contract No. NSC-91-2212-E-014-011,
NSC-92-2212-E-014-003, and NSC-92-2212-E-006-098.
Appendix A. Acronyms
APC Advanced Process Control
CEM Common Equipment Model
EEA Equipment with Embedded Agent
GDMD Global Diagnostics/Maintenance Database
GXA Global XML Web Service Architecture
HTTP Hyper Text Transfer Protocol
HTTPS Hyper Text Transfer Protocol with Secure Socket
Layer
IP Internet Protocol
ISDN Integrated Services Digital Network
LDMD Local Diagnostics/Maintenance Database
MSS Monitoring and Security Server
OBEM Object-Based Equipment Model
ODMS On-site Diagnostics/Maintenance Server
OEE Overall Equipment Effectiveness
OGEED On-site Global Equipment Engineering Database
OOA Object-Oriented Analysis
OOD Object-Oriented Design
PKI Public Key Infrastructure
RDMS Remote Diagnostics/Maintenance Server
SAML Security Assertion Markup Language
SOAP Simple Object Access Protocol
SPC Statistics Process Control
SSL Secure Socket Layer
SSO Single Sign On
UDDI Universal Description Discovery and Integration
UML Unified Modeling Language
WSDF Web-Services-based e-Diagnostics Framework
XML eXtensible Markup Language
References
[1] SEMI (Semiconductor Equipment and Material International). http://
www.semi.org.
[2] Lee J, Wang B. Computer-aided maintenance—methodologies and
practices. Boston: Kluwer Academic; 1999.
[3] Raman R. Diagnostics in IC manufacturing: a case study.: Semicon-
ductor International; 2001, http://www.e-insite.net/semiconductor/.
[4] e-Diagnostics and EEC Workshop. International SEMATECH,
Austin, Texas; 2001, http://www.sematech.org/.
[5] Web site of the Center for Intelligent Maintenance Systems (IMS),
http://www.imscenter.net/.
[6] Singer P. e-Diagnostics: monitoring tool performance: Semiconductor
International; 2001, http://www.e-insite.net/semiconductor/.
[7] e-Diagnostics and EEC Workshop. International SEMATECH,
Munich, Germany; 2002, http://www.sematech.org/.
[8] e-Diagnostics Guidebook, version 1.5, International SEMATECH;
2002, http://www.sematech.org/.
[9] LocyM.The impact of e-Diagnostics—one year later. IEEE international
symposium on semiconductor manufacturing; 2001, p. 435–8.
[10] Inaba M, Aizono T, Sonobe K, Fukube H, Iizumi T, Arima J, et al. The
development of security system and visual service support software
for on-line diagnostics. IEEE international symposium on semicon-
ductor manufacturing, 2001, p. 45–8.
[11] Deb S, Ghoshal S. Remote diagnosis server architecture. AUTO-
TESTCON proceedings of IEEE systems readiness technology
conference; 2001 p. 988–98.
[12] Fong ACM, Hui SC. An intelligent online machine fault diagnostics
system. Comput Control Eng J 2001;12(5):217–23.
[13] Li H, Shi T, Li Z, Tao Y, Chen W, Yang S. Internet-based remote
diagnosis: concept, system architecture and prototype. The third world
congress on intelligent control and automation; 2000. p. 719–23.
[14] Caldwell NHM, Breton BC, Holburn DM. Remote instrument
diagnosis on the Internet. IEEE Intelligent (Expert) Systems 1998;
13(3):70–6.
[15] Errath RA, Dominguez JJ. Remote drive condition monitoring. IEEE-
IAS/PCA cement industry technical conference; 1999. p. 31–48.
[16] Rao JS, Sharma S, Gupta T, Zubair M. On-line diagnostics using the
Internet. The third Asia Pacific conference systems integrity and
maintenance; 2002. p. 268.
[17] Rao JS, Zubair M, Rao C. Condition monitoring of power plants
through Internet, integrated manufacturing systems. Int J Manufact
Technol 2003;14(6):508.
[18] Web services, http://www.webservices.org.
[19] XML specification, http://www.w3c.org/XML.
[20] SOAP specification, http://www.w3c.org/tr/soap.
M.-H. Hung et al. / Advanced Engineering Informatics 17 (2003) 165–178 177
[3] Y.-C. Su, M.-H. Hung, F.-T. Cheng, and Y.-T. Chen, "A Processing Quality
Prognostics Scheme for Plasma Sputtering in TFT-LCD Manufacturing,"
IEEE Transactions on Semiconductor Manufacturing, vol. 19, no. 2, pp. 183-194,
May 2006. (NSC_93_2622_E_006_005, NSC_94_2622_E_006_001,
NSC_94_2212_E_014_001) [SCI, EI]
184 IEEE TRANSACTIONS ON SEMICONDUCTOR MANUFACTURING, VOL. 19, NO. 2, MAY 2006
Fig. 1. Relationship between production equipment and measurement equipment.
Fig. 2. Conceptual diagram of QPS.
and processing quality under certain specific processing con-
ditions only. Nonetheless, equipment recipes are frequently
changed during production such that the process model needs
to be updated accordingly. Also, the prediction (called con-
jecture in this paper) accuracy was evaluated offline. Thus,
these DOE-based models may not be applicable to practical
production equipment and lack an online evaluation method for
the conjecture accuracy when the in situ measured quality data
are unavailable.
In this paper, a novel quality prognostics scheme (QPS) for
plasma sputtering in TFT-LCD manufacturing processes is pro-
posed. Distinct from previous research, the proposed QPS pos-
sesses capabilities of both conjecture and prediction. As shown
in Fig. 2, the QPS consists of a conjecture model and a pre-
diction model. The conjecture model is capable of conjecturing
the processing quality of current-lot glasses based on the values
of current-lot processing parameters online and in real time.
Further, the prediction model is able to predict the processing
quality of next-lot glasses based on the conjectured quality value
of current lot and the quality measurement data of several pre-
vious lots. Through this two-tier architecture, the functions of
the QPS can be flexibly utilized by using either only the conjec-
ture model or both models to fit the various needs for the plants.
For online evaluating, whether the conjecture results are trust-
worthy or not when the measured quality values are unavail-
able, a reliance index (RI) is developed for the conjecture model.
By defining a reliance threshold of the RI, a conjecture result
having an RI value greater than the reliance threshold can be
regarded as being trustworthy. On the contrary, the conjecture
result having an RI value smaller than the reliance threshold is
incredible. Thus, when the conjecture model warns that the pro-
cessing quality is out of limit, the quality engineer is then able to
verify that the alarm is caused by the process problem or by the
conjecture error itself based on the RI value. Also, with the aid
of the RI, the quality engineer may be more confident in using
the conjecture model to online estimate the processing quality of
all pieces of glass when the in situ measured quality data are un-
available, which is called virtual metrology (VM). In contrast, in
current practice of TFT-LCD plants, only two out of 100 pieces
of glass are offline sampled for measuring the quality, waiting
about 30 to 90 min after one processing of glass is finished. This
impedes the prompt detection of quality defects.
For increasing the accuracy of the QPS, a self-searching
mechanism is designed to automatically search the best set of
parameters and functions used by the conjecture and prediction
algorithms for cases that the processing properties vary or
the recipe changes. The QPS also possesses an auto-adjusting
mechanism that is developed for tuning the system parameters
and bringing the conjecture accuracy within an acceptable
bound when the accuracy is out of limit.
One set of plasma sputtering equipment in a TFT-LCD plant
is used as the paradigm production equipment for the QPS. Tests
on normal and abnormal processing conditions show that the
values of the mean absolute percentage error (MAPE) of both
the conjecture and the prediction results are less than 2%, which
validates the effectiveness of the proposed QPS.
The rest of the paper is organized as follows. Section II de-
scribes the architecture design of the QPS. Section III illustrates
how to model the quality prognostics scheme for one set of
plasma sputtering equipment in a TFT-LCD plant. Section IV
presents the test results and discussion. Finally, the conclusions
are made in Section V.
II. ARCHITECTURE DESIGN OF QPS
The architecture of the proposed QPS is designed as in Fig.3.
The QPS can be roughly divided into five parts: 1) conjecture
model; 2) prediction model; 3) self-searching and auto-ad-
justing mechanisms; 4) user selection-and-setup interface; and
5) reliance index. The function of each part is described as
follows.
A. Conjecture Model
The conjecture model is designed to estimate the current-lot
quality based on the current lot processing parameters. It can be
186 IEEE TRANSACTIONS ON SEMICONDUCTOR MANUFACTURING, VOL. 19, NO. 2, MAY 2006
mechanism is launched to activate the self-searching mech-
anism to establish a more accurate conjecture model, whose
conjecture accuracy will comply with the acceptable bounds.
D. User Selection-and-Setup Interface
The proposed QPS allows users to select various conjec-
ture and prediction algorithms. According to the equipment
properties, appropriate algorithms are selected to establish the
prognostics scheme. The algorithm types grow in accordance
with the various types of equipment considered. The more the
algorithms are evolved, the more applications the prognostics
scheme may be applied to. User selection-and-setup interface
is designed for the user to select proper conjecture/prediction
algorithms and to set up the associated initial parameters/func-
tions. Following the selections and setup, the QPS can start to
run.
E. Reliance Index
Generally, in TFT-LCD plants, after production equipment
finishes one processing of products, it must wait a period of
time, approximately 30 90 min, prior to sending some of the
products (two out of 100) to measurement equipment for exam-
ining the processing quality. Before the actual measured quality
data are available, the accuracy of the conjectured quality values
of the QPS cannot be evaluated. To solve this problem, a reliance
index RI is proposed to online evaluate whether the conjecture
results are trustworthy or not in cases that the actual measured
values are unavailable. The derivation and usage of RI are de-
scribed as the following four steps.
Step 1) Construct the standard pattern:
Assume that the largest tolerable conjecture error of
a QPS is . If there are sets of training plus
testing data with conjecture errors less than ,
and each set of data contains parameters, then
these data , , are re-
garded as normal data of the parameters and selected
to construct the standard pattern as follows. First,
each datum is normalized by
(1)
where and
are the mean and standard deviation of the th
parameter, respectively. The standard pattern is
defined as and ,
. By doing this, the mean and stan-
dard deviation of the normalized values of each
parameter are zero and one, respectively. Therefore,
each parameter of the normalized standard pattern
is zero. Then, since each
testing data set is normalized to , it can be com-
pared with [as stated in Steps 2)–4)] to determine
whether the testing data set is similar to the normal
data sets or not and to evaluate the conjecture error.
Step 2) Compute the Mahalanobis Distance:
The Mahalanobis distance [19], [20] is a dis-
tance measure considering correlations between
variables by which different patterns can be identi-
fied. It is a useful way of determining the similarity
of an unknown sample set to a known one. If two
data sets have high degree of similarity, their is
small. On the contrary, if they are dissimilar, their
can magnify the effect of dissimilarity. Thus,
the Mahalanobis distance can be a useful index of
quality classification. The between the stan-
dardized testing data and the standard pattern
is computed as follows.
First, the correlation coefficients of the parameters
of data sets, whose conjecture errors are less than
, are computed as
(2)
Then, the correlation coefficient matrix can be
obtained as
.
.
.
.
.
.
.
.
.
.
.
.
(3)
Assume that the inverse matrix of is defined as ,
that is
.
.
.
.
.
.
.
.
.
.
.
.
(4)
The Mahalanobis distance between and
is defined as
(5)
By substituting (4) into (5) and the fact that is
a zero vector, the can be simplified to
and computed by
(6)
where and are the th and th values of the
normalized testing data set, respectively, and is the
number of parameters.
Step 3) Compute the value of the reliance index RI:
188 IEEE TRANSACTIONS ON SEMICONDUCTOR MANUFACTURING, VOL. 19, NO. 2, MAY 2006
Fig. 5. Deployment flow of QPS.
properties, opinions of equipment engineers, operating manual,
and parameter correlation analysis.
Fig. 5 indicates the deployment flow of the QPS.
By considering several previous-lots measurement data
from the measurement equipment,
together with the conjecture value conceived from the cur-
rent-lot sensor data of the production equipment, the next-lot
prediction value of the sputtering coating thickness can
be prognosed.
A. Construction of Conjecture Model
In this illustrative example, back-propagation NNs [13]–[15]
are applied to establish the conjecture model. The construction
procedures of the conjecture model are illustrated in Fig. 6.
The first step in establishing an NN conjecture model is to
collect equipment parameters. During production, 96 items of
parameters are selected as valid sensor data based on the equip-
ment properties. The parameters can be categorized into six
groups: vacuum, inert gas concentration, temperature, voltage,
electric current, and power. According to the parameter features
and opinions of equipment engineers, 40 out of 96 parameters,
mainly related to vacuum, inert gas concentration, and power,
are carefully screened as input parameters. The sampling period
of sensor data is 10 s and six samples of sensor data correspond
to the measurement datum of one product.
Generally speaking, adopting one or two hidden layers may
achieve good convergence. Moreover, with more nodes in the
hidden layer, the convergence rate will accelerate, a smaller
error will be achieved, and a better conjecture result will be
accomplished. Nonetheless, too many nodes may cause over-
learning and excessive training time. On the contrary, too few
nodes can lead to the correlation between inputs and outputs
not being constructed. Consequently, the number of nodes must
be properly set to maximize the efficiency.
Regarding selecting the transfer function in the hidden layer,
Log-Sigmoid is one of the basic transfer functional types
(11)
An alternative type of transfer function is Hyper Tangent-Sig-
moid
(12)
In this example, there are two hidden layers, and the possible
numbers of nodes is between 1 and 50. Moreover, the possible
transfer functions are Log-Sigmoid or Hyper Tangent-Sigmoid.
The best combination of the hidden layer number, node number,
and transfer function is selected using the self-searching mech-
anism explained in (11) and (12).
Before entering the network training process, the input raw
data is normalized to increase the training efficiency. After fin-
ishing the training, the output data is also denormalized to re-
cover the actual physical scale of the output data. This example
chooses training cycle number and error bounds as conditions
for training termination. The training terminates when either
a training cycle number reaches the limit or when the error is
within the bounds specified by users. Common NNs usually
set initial weights randomly; whereas, the present example ap-
plied the conditional-random method [15] proposed by Nguyen
and Widrow to create initial weights. Mean square error (MSE)
190 IEEE TRANSACTIONS ON SEMICONDUCTOR MANUFACTURING, VOL. 19, NO. 2, MAY 2006
Fig. 7. Operating procedure of auto-adjusting mechanism with reliance index.
The more closely the MAPE value approaches zero, the
better the conjecture/prediction accuracy of the model holds.
MAPE can represent the average conjecture/prediction error of
a quality prognostics system. For the plasma sputtering process
of TFT-LCD plants, MAPE is required to be less than 2%.
The formula for Max Error is
Max Error (16)
For the plasma sputtering process of TFT-LCD plants, the Max
Error is required to be less than 5%.
D. Operating Procedure of Auto-Adjusting Mechanism With
Reliance Index
Fig. 7 shows the operating procedures of the auto-adjusting
mechanism with reliance index. Upon running the conjecture
mechanism [Step (A1)], the system will concurrently calculate
RI using data of the processing parameters [Step (R1)]. Then,
the value of RI is compared with the reliance threshold [Step
(R2)]. If the value of RI is less than the threshold, meaning that
the conjecture values may not be believable, the quality engi-
neer needs to decide whether actual measurement should be per-
formed [Step (R3)]. If actual measurement needs to be executed,
the product is then sent to measurement equipment for mea-
suring [Step (R4)]. As the measured quality data are available
[Step (A2)], the conjecture accuracy is evaluated [Step (A3)].
If the error is greater than M%, say [Step (A4)], the
auto-adjusting mechanism is activated to add the inaccurate data
to the training data set [Step (A5)]. The self-searching mecha-
nism is then launched to rebuild a more accurate conjecture al-
gorithm [Step (A6)]. As the new model is constructed, the RI
and RI threshold need to be recalculated.
IV. RESULTS AND DISCUSSION
In this section, the performance tests are conducted on
the QPS using three types of prognostics models: 1) (NN) +
(WMA); 2) NN + NN; and 3) CNN. Two kinds of processing
192 IEEE TRANSACTIONS ON SEMICONDUCTOR MANUFACTURING, VOL. 19, NO. 2, MAY 2006
Fig. 10. Prediction results on processing with drift.
TABLE III
PREDICTION ERRORS ON PROCESSING WITH DRIFT
NN, and CNN models are 1.73%, 1.76%, and 1.63%, respec-
tively. All are less than 2%. Also, the Max Error values of these
models are 5.07%, 4.59%, and 4.46%, respectively. In normal
processing conditions, the prediction performance of the CNN
model is better than the other two models.
Fig. 10 and Table III illustrate the prediction results of the
QPS using data of the processing parameters with drift. As
shown in Table III, the prediction MAPE values of NN + WMA,
NN + NN, and CNN models are 0.9%, 1.34%, and 1.1%, re-
spectively. All are less than 2%. Also, the Max Error values of
these models are 2.86%, 2.89%, and 4.53%, respectively. In
processing conditions with drift, the prediction performance of
the NN + WMA model is better than the other two models.
C. Test Results With Auto-Adjusting
Fig. 11 shows the conjecture results of the NN and CNN
models on processing having shift with/without auto-adjusting.
When processing shift occurs, because the shifted processing
data are not within the original training data set of the con-
jecture model, the conjecture accuracy will reduce, as shown
in sample 3 circumscribed by dotted ovals. At this time, the
auto-adjusting mechanism is activated to incorporate the shifted
processing data for retraining the conjecture model. After the
retraining is completed, if similar shifts emerge, the conjecture
model is then able to accurately conjecture the shifts, as shown
in samples 12 and 18 circumscribed by thick circles. Therefore,
the auto-adjusting mechanism that is based on the learning ca-
pability of NN or CNN effectively enhances the accuracy of pro-
cessing quality conjectures.
TABLE IV
RELIANCE INDEX ACCURACY
D. Test Results of Reliance Index
To evaluate the accuracy of the reliance index, 130 sets of
data are applied for testing. If the following two situations occur,
the conjecture with RI is regarded as being wrong: 1) the ac-
tual conjecture error is greater than 5% and the conjecture error
with RI is less than 5% and 2) the actual conjecture error is less
than 5% and the conjecture error with RI is greater than 5%.
Otherwise, the conjecture result with RI is considered correct.
Table IV shows the reliance index accuracy of the conjecture re-
sults. In the test, 122 out of the 130 testing data sets are correct.
Thus, the accuracy of the proposed reliance index is fairly high,
approximately .
V. CONCLUSION
This paper proposes a quality prognostics scheme that
includes self-searching and auto-adjusting mechanisms. The
quality prognostics scheme can perform virtual metrology and
quality prediction. Furthermore, the conjecture and prediction
models in this scheme are relatively generic and exchange-
able. The features of user selection and interface setup and
self-searching mechanisms help developers to efficiently de-
velop a quality prognostics scheme that can be rapidly applied
to different types of equipment. In addition, the auto-adjusting
mechanism automatically tunes the conjecture scheme in the
event of offsets of equipment properties, increasing the adapt-
ability of this scheme. In addition, a reliance index is proposed
to determine whether the conjecture quality is believable or not.
The reliance index enables the quality prognostics system to
effectively monitor the status of the processing quality in real
time. In turn, the objective of glass-to-glass quality monitoring
can be achieved. Based on the conjecture/prediction results
194 IEEE TRANSACTIONS ON SEMICONDUCTOR MANUFACTURING, VOL. 19, NO. 2, MAY 2006
Min-Hsiung Hung (M’01) was born in Chang-Hua,
Taiwan, R.O.C., on September 9, 1966. He received
the B.S. degree from Chung Cheng Institute of
Technology, Tao-Yuan, Taiwan, in 1988, the M.S.
degree from National Cheng Kung University,
Tainan, Taiwan, in 1992, and the Ph.D. degree from
The Ohio State University, Columbus, in 1999, all
in electrical engineering.
He is currently an Associate Professor of electrical
engineering at Chung Cheng Institute of Technology,
National Defense University. His current research in-
terests include factory automation for semiconductor manufacturing, e-Manu-
facturing, e-Diagnostics, remote monitoring and control technologies, informa-
tion technology applications, intelligent control, dynamic simulation and con-
trol of robotics, microprocessor systems, embedded systems, and systems on
programmable chips.
Fan-Tien Cheng (S’87–M’89–SM’98) received the
B.S. degree from the National Cheng Kung Univer-
sity (NCKU), Tainan, Taiwan, R.O.C., in 1976, and
the M.S. and Ph.D. degrees from The Ohio State Uni-
versity, Columbus, in 1982 and 1989, respectively, all
in electrical engineering.
He was with the Chung Shan Institute of Science
and Technology (CSIST), Taoyuan, Taiwan, as a Re-
search Assistant, in 1976, and was promoted to Assis-
tant Scientist, Associate Scientist, and Senior Scien-
tist in 1982, 1986, and 1994, respectively. He served
as the Director of the Managing Office in the design, development, testing, and
maintenance of a modern fire control system. In 1995, he joined the National
Cheng Kung University as an Associate Professor of manufacturing engineering
and was promoted to a Full Professor, in August 1997, and to a Distinguished
Professor, in August 2003. He also served as the Director of the Institute of
Manufacturing Engineering, from August 1998 to July 2001. He built a web-en-
abled experimental manufacturing execution system, a supply-chain informa-
tion system for IC-Packaging, and a test bed of e-diagnostics framework for
semiconductor manufacturing at the Automation Laboratory of the Institute of
Manufacturing Engineering for educational and research purposes. His research
interests include factory automation for semiconductor manufacturing, e-man-
ufacturing, e-diagnostics, as well as control and optimization of multiple-chain
robotic mechanisms and redundant manipulators.
Yeh-Tung Chen (S’06) was born in Kaohsiung,
Taiwan, R.O.C., on January 26, 1978. He received
the B.S. and M.S. degrees from National Cheng
Kung University, Tainan, Taiwan, in 2001 and
2003, respectively, both in statistics. He is currently
working toward the Ph.D. degree at the Institute of
Manufacturing Engineering, National Cheng Kung
University.
His research interests include factory automation
for semiconductor manufacturing, e-manufacturing,
industrial statistics, quality management, reliability
analysis, and system simulation.
 1 
Development of a Software Tester for Distributed  
Object-Oriented Systems1 
Fan-Tien Cheng2, Yu-Chuan Su, Chin-Hui Wang, and Shang-Lun Wu 
Institute of Manufacturing Engineering 
National Cheng Kung University 
Tainan 701, Taiwan, R.O.C. 
 
September 22, 2005 submitted 
February 9, 2006 revised 
April 5, 2006 2nd revised 
Key words: distributed object-oriented systems, unified modeling language, 
software tester, test-plan wizard. 
Subject Index: EL3 
ABSTRACT 
It is well-known that testing and debugging in the stage of software development demand 
great deal of resources, and open-environment architecture of general distributed systems tends to 
increase the complexity of testing. To resolve the problems mentioned above, this work proposes a 
Software Tester for distributed object-oriented systems. This Software Tester possesses a test-plan 
wizard which can generate a test-result template and test-plan execution codes according to class 
diagrams and sequence diagrams. The Software Tester is applicable to the tests of an individual 
unit or module and even the whole distributed object-oriented system as long as the functions and 
operations of the components or system can be presented with only class diagrams (as well as 
interface definitions) and sequence diagrams generated by the tools used during software 
development. Two examples are applied to demonstrate the usage of this Software Tester for 
performing a unit test and a system integration test. Research results indicate that this Software 
Tester enables an integrated planning of software development and testing, reduces testing cost, 
and improves overall development efficiency. 
                                                 
1 Submitted as a full paper. 
2 The corresponding author (E-mail: chengft@mail.ncku.edu.tw). 
 3 
Collect and study
domain knowledge
Collect
requirements
Analyze
requirements
Define Use Cases
Identify each scenario
in each Use Case refine
Find classes
Refine sequence
diagrams
Initial sequence
diagram for each
scenario
Initial class diagrams
Key mechanism
Find classes' relationships
and their operations/attributes
iterative
Design complete
System implementation
System integration
produce
produce
Testing
produceFinal class
& sequence
diagrams
System
Analysis
OOA
Implementation
OOD
Integration
and
Testing
 
(a) 
Final class &
sequence
diagrams
Programmers
perform
implementation
Testing engineers
prepare test plans
System ready for
testing
 
(b) 
Figure 1: Development Procedure for Object-Oriented Systems 
 5 
between system components. In conclusion, under the mechanism based on state diagrams, we can 
test an individual object or class, but the integration tests that distributed systems require may not 
be supported. 
Instead of state diagrams, in our research, we choose sequence diagrams as the references to 
edit the test plans. Sequence diagrams can describe workflows of each scenario in time sequence 
and also the objects needed for each scenario, as well as the interactions between those objects. By 
testing all the scenarios in time sequence mentioned above, we could know whether all the system 
functions are correctly implemented or not. 
In addition, in the aspect of distributed software testing architectures, researches aimed at 
individually designing an exclusive testing architecture to a specific communication standard of 
distributed systems. For example, a testing architecture (Robert, 2001) was developed with CORBA 
(OMG, 2005b) techniques and schemed with test components for executing testing of the 
e-commerce system constructed under CORBA infrastructure. As for the web environment, a testing 
architecture (Wang, 1999) was implemented in accordance with two main programs: server-side JSP 
program, and client-side JavaScript program. Also, the considerations of performing testing in the 
web environment were mentioned in (Nguyen, 2000).  
A Software Tester is proposed in this work to help testing engineers to cope with the testing 
requirements of distributed systems that are developed by the object-oriented development 
procedure. In this Software Tester, we implement a Test-Plan Wizard that uses class diagrams and 
interface definitions as foundations and sequence diagrams as testing scenarios to edit the test plans 
for fulfilling the component functional tests, system integration tests, and performance tests. 
According to the contents of the test plans, Test-Plan Wizard can systematically generate test-plan 
execution codes. These execution codes are performed to test the software component and/or 
system. Then, test results are generated. Finally, test report is created through a Comparator 
comparing the test results with the predefined reference outputs. The testing programs generated 
and experiences obtained may be converted to become error detecting and/or diagnosing modules 
for the software system after deployment. 
 7 
Test-Plan Wizard
Unit/System Under Test
Comparator
Test-Plan
Execution Codes
(*.exe)
Test Reports
Test-Result
Template &
Reference I/O Test Results
1. Input entities
for testing
3. Input
testing
Scenarios
4. Specify reference
input/output data
5. Generate a test-result
template with reference
I/O for comparison
7. Generate
test-plan
execution
codes
8. Perform tests
9. Generate
test results
10. Pass data
to compare
11. Generate
test reports
Class Diagrams / Interface
Definitions of All Modules
(Entities for Testing)
Sequence Diagrams
/ System Scenario
Diagrams
(Testing Scenarios)
6. Pass
data to
compare
2. Select a sequence
diagram for testing
Testing
Engineers
 
Figure 2: Signal Flow and Functional Block Diagram of Software Tester  
B. Development Procedure of the Software Tester 
In this work, the development procedures for object-oriented systems are followed to develop 
the Software Tester. Figure 3 is the use case diagram built by requirement analysis, and Fig. 4 is the 
signal flow and functional block diagram of the Test-Plan Wizard that is the kernel of the Software 
Tester. According to Figs. 3 and 4, the detailed descriptions of these four use cases: input UML 
diagrams, specify reference input/output data, generate test-plan execution codes, and analyze 
results are presented below. 
1) Input UML Diagrams 
The most commonly used UML editing software is Rational Rose (IBM, 2005) developed by 
Rational Software Corporation. Rational Rose provides users a graphic user interface (GUI) to 
perform OOA and OOD in accordance with UML specifications. Then, Rational Rose saves the 
results, such as class diagrams and sequence diagrams, in .mdl text files. 
 9 
In order to apply the Software Tester with the UML editing software, we refer to the 
UML specification defined by OMG (OMG, 2005a) and generate the document structures of 
class diagrams (as well as interface definitions) and sequence diagrams as shown in Fig. 5. 
Based on these two document structures, we can respectively design UML parsers to fit 
different editing software tools, such as Rational Rose and other editing software tools that 
support UML. Testing engineers then input the UML class and sequence diagrams in .mdl 
files to Test-Plan Wizard to generate the information needed for later steps. In this work, we 
take Rational Rose as the example tool to design the parsers. The explanations of parsing 
class diagrams and sequence diagrams are presented as follows. 
a. Process of Parsing Class Diagrams (Fig. 4, Steps 1, 2, 3) 
In the process of parsing class diagrams, firstly testing engineers input the .mdl file to the 
Parser for Class Diagrams and the system starts to build up the information for all classes. To 
each class, as indicated in Fig. 5(a), class name, class stereotype, and super class are first 
parsed, followed by the class attribute. If a class attribute is parsed to be a basic data type, 
such as integer or string, it is recorded directly. The information parsed includes attribute 
name, attribute type, initial value, and attribute visibility. After completing parsing all the 
information of class attributes, the system goes on parsing class operations. The information 
parsed includes operation name, operation return type, operation visibility, and operation 
parameters, which further includes parameter name, parameter type, initial value, and 
parameter visibility. In turn, all the classes concerned are parsed. 
If testing engineers intend to process the integration test of a distributed system, the 
interface definitions (such as the interface definition language (IDL) files of CORBA (OMG, 
2005b)) of all the distributed components are also required. The process of parsing interface 
definitions in the .idl file is similar to that of parsing class diagrams in the .mdl file. 
Observing Fig. 5(a), IDLType is equivalent to ClassType, Interface_1 is similar to Class_1, 
etc. 
 11 
diagrams that are related together to be the test entity (Fig. 4, Steps 4, 5). 
We take a single sequence diagram to explain the process. As shown in Fig. 5(b), the 
objects used in the sequence diagram will be parsed out first, and then each object's name, 
stereotype, and super class are extracted. The collaborative relationships of the object, namely 
collaborations are parsed, next. Each collaboration of the object will have a collaboration 
name, a sequence number, a supplier class, and then the direction of the collaboration that 
may start from client to supplier or from supplier to client. Note that, the object itself is 
defined as the client. Because the collaboration is actually an operation to an object or a class 
of the supplier, we only have to know the class name and the operation name of the supplier 
class. If detailed operation information of the supplier class is needed, we then refer to the 
class information diagram and copy the operation parameters, such as operation name, 
operation return type, and operation visibility into the contents of operation information in the 
sequence information diagram. 
A sequence diagram is composed of many steps. One or several related steps are grouped 
to become a scenario and annotated with an “illustrative note”. Once the input parameters of a 
scenario are assigned and the scenario is initiated, then the steps in this scenario will be 
executed sequentially and continuously until all the outputs are generated. Therefore, test 
plans shall be designed based on each scenario, and the parser shall be able to identify all the 
scenarios in a sequence diagram. 
2) Specify Reference Input/Output Data 
Test-Plan Generator in Fig. 4 takes each scenario in a sequence diagram as the reference 
to design the test plan. Then, the test case information generated by Test-Plan Generator is 
passed to Reference I/O Editor (Fig. 4, Step 10). According to the test case information, 
Reference I/O Editor then generates data input interface for a testing engineer to specify input 
values and output reference data (Fig. 4, Steps 11, 12). For fool proofing, after a testing 
engineer inputs all the values, Reference I/O Editor will validate the values according to the 
data types and constraints required. If an input value does not correspond to which the data 
 13 
outputs to generate a test report, and then the test report is displayed via User Interface. 
Unit/System Under Test
Test-Plan Execution Codes
createTestCodeFile()
addCode()
perform tests
Comparator
setReferenceData()
compare()
passResultData()
send actual test output
Testing
Engineer
UML Diagram Parser
parseClassDiagram()
parseSequenceDiagram()
getSequenceName()
inputUMLFile()
Test-Code Generator
setReferenceData()
editTestCode()
setConnectionData()
createConnectionCode()
generate
Reference IO Editor
validate()
createTemplate()
specifyData()
input data
pass a test-result template
with reference I/O
UserInterface
show()
specifyData()
queryConnectionData()
repeatSpecifiedData()
input data
show reports
use
input data
Test-Plan Generator
passDiagramInfo()
queryTestPlan()
createTestPlan()
input data
input data
interact withselect sequence diagram
Test-Plan Wizard  
Figure 6: Class Diagram of the Software Tester  
 
III. ILLUSTRATIVE EXAMPLES 
Aiming at the development of the Software Tester, we have designed two examples for 
illustration. Example 1 illustrates how to use class diagrams and sequence diagrams to process 
the unit test of a single component. Example 2 demonstrates how to take advantage of parsing 
the .idl file of IDL (Interface Definition Language) to process the integration test among the 
system components. 
A. Example I 
Figure 7(a) is the class diagram for the unit-test illustrative example. In this class 
diagram, we have designed an actor: Client and three classes: genericServiceAgent, 
ServiceAgent, and DataHandler. They are defined as follows. Client is the client-side that 
requests services. genericSercviceAgent is responsible for defining the basic functions to 
provide services of general server-side components. For example, when Client proposes a 
service request to ServiceAgent, Client is asked to register in advance. So, a basic function, 
 15 
genericServiceAgent
register(ID : String, Passwd : String) : Boolean
Client
ServiceAgent
agentID : String
requestService(Parameter1:Integer, Data_Name:String) : Integer
processData(Parameter1 : Integer, Parameter2 : Integer) : Integer
DataHandler
queryData(Data_Name : String) : Integer
 
(a) Class Diagram 
Client
ServiceAgent DataHandler
1: register(String, String)
2: requestService(Integer, String)
4: processData(Integer, Integer)
3: queryData(String)
Scenario 2
Scenario 1
 
(b) Sequence Diagram 
Figure 7: The Class and Sequence Diagrams of the Unit-Test Illustrative Example 
 
 17 
01   (object Class "ServiceAgent"
02               stereotype   "control"
03               superclasses (list
04    (object Inheritance_Relationship
05                supplier   "genericServiceAgent"))
06    operations  (list Operations
07                (object Operation  "requestSerice"
08                       parameters             (list Parameters
09                             (object Parameter "Parameter1"
10                                  type                "Integer"
11                                   inity                "3"
12                                  visibility         "public")
13                  (object Parameter  "Data_name"
14                                  type                "String"
15                                  inity                "Data_A"
16                                  visibility        "public"))
17                 Result                           "Integer"
18                 OpExportContro          "Public")
                                          :
                                          :
35   class_attribute_list
36      (object ClassAttribute "agentID"
37           type                         "string"
38           inity                          "Service_1"
39           opExportContro        "Public")
40         ))) Document Structure
of Class Diagram
Class Information DiagramRational Rose UML Model File
UML Parser for
Class Diagram
reference
input
．．．
theNameClassType
theAttributeName
theStereoType
theAttributeType
theInitialValue
theAttributeVisibility
theOperationName
theOperationReturnType
theOperationVisibility
theOperationParameter
theParameterName
theParameterType
theInitialValue
theParameterVisibility
theSuperClass
Operation
Attribute
Name
ServiceAgentClassType
agentID
control
…
genericServiceAgent
string
Service_1
Public
requestService
Integer
public
theParameter_1
theParameter_2
…
…
Parameter1
Integer
3
public
Data_name
String
public
Data_A
Operation_1
Attribute_1
Name
Operation_2
Class_1
Class_1
Class_2
…
…
…
… …
…
…
Class_2
．．．
 
Figure 8: Schematic Diagram for Parsing the Unit-Test Class Diagram
 19 
instructions for logging the time of the test-program execution, as Line 8: 
start_time[i]=TestExec.getTime() and Line 11: end_time[i]=TestExec.getTime() shown. At 
last, Test-Codes Generator writes the data into the test-result template (Lines 12-13). 
After testing, the execution codes enforce the unit/system under test to generate the 
actual test results, which include execution time and actual outputs, and fill them into the 
test-result template, shown as the values in brackets in Fig. 9. Then, Comparator compares the 
actual outputs with the reference outputs. If actual output value is in the tolerable range, the 
test result will be "passed (GO)"; if not, "failed (NG)". For this example, the reference output 
of operation requestService is 30±15, while the actual output is 55 that is out of the tolerable 
range. Therefore, the test result is NG. 
Non-functional tests such as response time, throughput, resource usage, etc. (Timothy 
and Robert, 2001) are important for software performance considerations. This Software 
Tester may also perform non-functional tests. In this example, the tests of response time and 
throughput are illustrated. The corresponding test-result template with reference I/O data for 
these two non-functional tests of the operation requestService() is shown in Table 1. For 
response time test, when the illustrative note of response time test is parsed, the test case 
information generated by Test-Plan Generator is passed to Reference I/O Editor (Fig. 4, Step 
10). According to the test case information, Reference I/O Editor then generates data input 
interface for a testing engineer to specify input values and output reference data (Fig. 4, Steps 
11, 12). Afterward, the testing engineer sets the function’s “Response Time Specification” and 
“Repetition” to be 2.0 seconds and 100, respectively at Step 12 of Fig. 4. These inputs are sent 
to the Test-Code Generator via Step 14 of Fig. 4. Then the Test-Code Generator will set the 
repition2 parameter with 100 (as shown in Line 22 of the Test-Plan Execution Codes in Fig. 9) 
and calculate the average response time and check if the average response time is within the 
specification. From Table 1, the average response time (151/100 seconds) is less than the 
specification (2 seconds), hence the test result is GO.  
For throughput test, a testing engineer sets the “Configuration for Throughput Test” and 
“Throughput Specification” accordingly. As specified in Table 1, the requestService() 
messages will be fed 10 times for every 2 seconds. This throughput test period will last for 60 
 21 
Table 1: Test-Result Template with Reference I/O Data for Non-Functional Test 
 
 
 
requestService
Scena-
rio
2
2
Operation
Reference Input
Parameter 
Name
Data 
Type
Value
requestService
Parameter 1
Data_name
Parameter 1
Data_name
Integer
String
String
Integer
3
Data_A
4
Data_B
Execution
Time
15:22:37
Repeti-
tion
N/A
Reference 
Output
Through-
put
Spec.
(time/min.)
Response 
Time
Spec. 
(sec.)
Actual Output Test Result (GO/NG)
N/A
100
2.0
N/A
--
[ 90 ]
15:20:06 100
15:23:38
15:22:38
Non-
Functional
Test
Response 
Time
Through-
put
Test 
Period 
(sec.)
Qty Per 
Feed 
(time)
Feeding 
Period 
(sec.)
N/A N/A N/A
60.0 10 2.0
Configuration for 
Throughput Test
Through-
put
(time/min.)
Response 
Time
(sec.)
[ 151/100 ]
--
Through-
put
--
[ NG ]
Response 
Time
--
[ GO ]
 23 
communication holons (CH) together form a holonic information coordination system (HICS) 
that exchange information among companies by transferring RosettaNet business messages 
(RosettaNet, 2005). Besides CH, as depicted in Fig. 10, Company A also consists of holonic 
manufacturing execution system (HMES) (Cheng et al., 2004a), holonic enterprise resource 
planning (HERP), data warehouse (DWH), and exchange holon (EH). EH is responsible for 
data exchange among HMES, HERP, DWH, and CH. Consequently, back-end integration is 
primarily handled by the communication interfaces between EH and CH via CORBA/IIOP 
protocol. Besides, EH is also in charge of the packing and unpacking processes of RosettaNet 
business messages. 
In the definition of RosettaNet specifications, different partner interface processes (PIPs) 
represent different business processes. In this example, PIP 3A4 is adopted to demonstrate the 
communication between two companies. PIP 3A4 defines the business process of requesting 
purchase order and enables a buyer to place an order to a seller and rapidly gets the response 
from the seller. 
As shown in Fig. 11, when the seller receives the request of PurchaseOrderRequest from 
the buyer (Message 1), the seller first signals the buyer with ReceiptAcknowledgement 
(Message 1.1). After evaluation, the seller then responds the buyer the 
PurchaseOrderConfirmationAction (Message 1.2). When the buyer receives the 
PurchaseOrderConfirmationAction , the buyer signals the seller the ReceiptAcknowledgement 
(Message 1.2.1).  
In this example, we choose the above Messages 1 and 1.1 of PIP 3A4 (as shown in the 
dotted box of Fig. 11) to explain the test workflow of supply chain information exchange. 
Other PIP messages can be tested similarly. The detailed sequence diagram of Messages 1 and 
1.1 are shown in Fig. 12(a).  
Two ends of the Internet separately represent two companies, Company A and Company 
B, in the supply chain. Company A serves as the buyer and Company B the seller. The 
processes of parsing IDLs and sequence diagrams for the system integration test and the 
 25 
acknowledge A:EH that the order has being correctly placed. Meanwhile, B:CH also calls 
recieveMessage(Order) of B:EH to pass the order information to B:EH.  
For system integration tests, we need to add illustrative notes which indicate inputs and 
outputs of each test scenario, as depicted in Fig. 12(a). Figure 12(b) also displays that each 
system component (such as CH or EH) may have many CORBA IDL operations. With those 
illustrative notes, we can know which CORBA interface operations of each system 
component are invoked during system integration tests. 
Figure 13 shows the test-result template with reference I/O data for Example II. This 
test-result template includes columns of reference input, reference output, actual output and 
test result. The parameter names of reference inputs should be the same as those parameter 
names in IDL operation, sendMessage(), of CH as shown in Fig. 12(b). Similarly, the 
parameter names of reference outputs for output (1) and output (2) also have to be the same as 
those parameter names of reportACK() and receiveMessage() of EH IDL operations, 
respectively. Comparator executes the comparisons of actual outputs to reference outputs and 
generates test results, accordingly.
 27 
1
Operation
Reference Input
Parameter Name Data Type Value
sendMessage
[ GO ]
Input
Scenario
BusinessMessage
PartnerIPAddress
DbTable
OrderID
String
String
String
String
XML Document
140.116.86.157
SPILInitiator3A4
3A4105178970
1
Operation
Reference Output
Parameter Name Data Type Value
reportACK
Output (1)
Scenario
ACK String Receipt Acknowledgment
Tolerance 
Range
--
Actual Output Test Result (GO/NG)
Receipt 
Acknowledgment
[ GO ]
1
Operation
Reference Output
Parameter Name Data Type Value
receiveMessage
Output (2)
Scenario
PIP String 3A4
Tolerance 
Range
--
Actual Output Test Result (GO/NG)
IP140.116.86.157
PORT1886
NO1051789014
IP140.116.86.157
PORT1886
NO1051789014
Request ActionString
String
String
String
String
String
String
ActionCode
FileName
PartnerIPAddress
OrderID
OurCompany
PartnerCompany
BusinessMessage
140.116.86.157
3A4105178970
UMC
SPIL
XML Document
--
--
--
--
--
--
--
[ Request Action ]
[ 3A4 ]
[ 140.116.86.157 ]
[ 3A4105178970]
[ UMC ]
[ SPIL ]
[ XML Document ]
[ GO ]
[ GO ]
[ GO ]
[ GO ]
[ GO ]
[ GO ]
[ GO ]
 
Figure 13 Test-Result Template with Reference I/O Data for Example II 
 29 
According to different levels of each distributed object-oriented system, this Software 
Tester provides proper features that are applicable to both unit tests and system integration 
tests. In performing component testing to a single unit, the testing target will be the class 
diagrams in component level, and the testing scenarios will be designed by the sequence 
diagrams that describe the dynamic behavior of the component. As for system integration test, 
the testing targets will be the interface definitions of all modules, and the testing scenarios 
will be the sequence diagrams that describe the framework messages (Orfali, 1996; Cheng, 
1999; Cheng et al., 2004b) among components. If we treat a module component as an object, 
then its interface definition diagram is similar to a class diagram. For example, if the 
distributed system applies CORBA as its communication infrastructure, then the interface 
definition of each component is expressed by an .idl file that is similar to a .mdl file of a class 
diagram. Therefore, as long as a system uses UML to describe its class diagrams and 
sequence diagrams, then we can use this Software Tester to execute the tests on the object that 
is as small as an individual component and as large as a whole distributed object-oriented 
system. 
This Software Tester can edit test plans both for functional and non-functional tests 
(Jorgensen, 1995; Nguyen, 2000; Timothy and Robert, 2001). Because the columns of 
reference I/O template are designed to be able to dynamically expanded, the flexibility of 
supporting the Software Tester to different testing types can be increased by the way of 
adding new column contents. Due to adopting UML sequence diagrams as the foundation, the 
Software Tester can use the class attributes and operations as parameters to set reference I/O 
data for sequential functional tests. If non-functional tests, such as stress tests and 
performance tests, are planned, then testing engineers can add columns (i.e., “Configuration 
for Throughput Test”, “Execution Time”, “Repetition”, etc.) to the test-result template with 
reference I/O. In accordance with sequence diagrams, testing scenarios are edited and finally 
non-functional tests are performed. 
 
 
 31 
REFERENCES 
1. Cheng, F.-T., Chang, C.-F., and Wu, S.-L., 2004a, "Development of Holonic 
Manufacturing Execution systems," Journal of Intelligent Manufacturing Vol. 15, No. 2, 
pp. 253-267. 
2. Cheng, F.-T., Shen, E. Deng, J-Y., and Nguyen, K., 1999, “Development of a System 
Framework for the Computer-Integrated Manufacturing Execution System: a Distributed 
Object-Oriented Approach,” Journal of Computer Integrated Manufacturing, Vol. 12, No. 
5, pp.381-402. 
3. Cheng, F.-T., Yang, H.-C., and Huang, E., 2002, "Development of an Educational Supply 
Chain Information System Using Object Web Technology," Journal of the Chinese 
Institute of Engineers, Vol. 25, No 6, pp.735-752. 
4. Cheng, F.-T., Yang, H.-C., and Lin, J.-Y., 2004b, "Development of Holonic Information 
Coordination Systems with Failure-Recovery Considerations," IEEE Transactions on 
Automation Science and Engineering, Vol. 1, No. 1, pp. 58-72. 
5. Chevalley, P., 2001, "Automated Generation of Statistical Test Cases from UML State 
Diagram," Proceedings of 25th Annual International Computer Software and Applications 
Conference, Chicago, U.S.A., pp.205-214. 
6. Hartmann, J., Imoberdorf, C., and Meisinger, M., 2000, "UML-Based Integration 
Testing," Proceedings of ACM International Symposium on Software Testing and Analysis, 
Volume 25, Issue 5, Portland, U.S.A., pp.60-70. 
7. Huang, E., Cheng, F.-T., and Yang, H.-C., 1999, "Development of a Collaborative and 
Event-Driven Supply Chain Information System Using Mobile Object Technology," 
Proceedings of the IEEE International Conference on Robotics and Automation, Detroit, 
Michigan, U.S.A, Vol. 13, pp.1776-1781. 
8. IBM, 2005, Rational Software, Available: http://www-306.ibm.com/software/rational. 
9. Jorgensen, P. C., 1995, Software Testing - a Craftsman's Approach, CRC Press, U.S.A. 
10. Kim, Y.-G., Hong, H.-S., Bae, D.-H., and Cha, S.-D., 1999, "Test Cases Generation from 
UML State Diagrams," Proceedings of the IEE International Conference on Software, Vol. 
附件二 會議論文
[1] M.-H. Hung, F.-Y. Hsu, Z.-L. Wang, F.-T. Cheng, R. Lai, and T. Huang, "A
Secure Collaborative e-Diagnostics Framework for Semiconductor Factories,"
in Proc. 2005 IEEE International Conference on Automation Science and
Engineering, Edmonton, Canada, August 2005.
[2] Y.-C. Su, F.-T. Cheng, G.-W. Huang, M.-H. Hung, and T. Yang, "A Quality
Prognostics Scheme for Semiconductor and TFT-LCD Manufacturing
Processes," in Proc. of The 30th Annual Conference of the IEEE Industrial
Electronics Society (IECON 2004), Busan, Korea, November 2004.
(NSC_92_2212_E_006_098, NSC_93_2622_E_006_005)
[3] M.-H. Hung, F.-T. Cheng, and S.-C. Yeh, "Developing a Web-services-based
e-Diagnostics Framework," in Proc. 2003 IEEE International Conference on
Robotics and Automation, Taipei, Taiwan, R.O.C., pp. 596-603, September 2003.
[4] F.-T. Cheng, C.-H. Wang, and Y.-C. Su, "Development of a Generic Tester for
Distributed Object-Oriented Systems," in Proc. 2003 IEEE International
Conference on Robotics and Automation, Taipei, Taiwan, R.O.C., pp. 1723-1730,
September 2003. (NSC_91_2212_E_006_061)
[5] J. Chang, F.-T. Cheng, and Tsung-Li Wang, "Novel Semiconductor Business
Model – Engineering Chain for the Semiconductor Industry," submitted to
2007 IEEE International Conference on Robotics and Automation, Roma, Italy,
April 2007.
A Secure Collaborative e-Diagnostics Framework for Semiconductor 
Factories*
Min-Hsiung Hung, Member, IEEE, Feng-Yi Hsu 
Department of Electrical Engineering 
Chung Cheng Institute of Technology 
National Defense University 
Taoyuan, Taiwan, R.O.C. 
minmin@ccit.edu.tw
Tsung-Li Wang, Fan-Tien Cheng, Senior Member, IEEE,
Robin Lai, and Tina Huang
Institute of Manufacturing Engineering 
National Cheng Kung University 
Tainan, Taiwan, R.O.C. 
chengft@mail.ncku.edu.tw
* This work is partially supported by National Science Council, Taiwan, R.O.C., under Contract #93-2212-E-014-001 to M.-H. Hung and Contract  
#93-2212-E-006-023 to F.-T. Cheng.
Abstract - According to the collaborative Diagnostics 
functions and the interface C requirements suggested in the 
recent e-Diagnostics guidebook of International 
SEMATECH, this paper proposes a novel e-Diagnostics 
framework, called Secure Collaborative e-Diagnostics 
Framework (SCDF). SCDF is developed based on the 
technologies of Web Services, clustering, and 
new-generation information security.  In addition to 
providing a variety of e-diagnostics functions, SCDF 
possesses mechanisms to solve several important issues, 
such as data isolation for different suppliers, supporting 
remote diagnoses through multi-party collaboration, 
diagnostics service and storage failover for assuring system 
availability and the security measures related to above issues. 
SCDF provides a possible solution to part of the 
e-Diagnostics interface C and can be applied in 
semiconductor industry to increase the equipment 
effectiveness and availability.
Index Terms - Collaborative e-Diagnostics Framework, 
Web Services, Clustering, Security Measures, Failover.
I. INTRODUCTION
According to a recent report from Semiconductor 
Equipment and Material International (SEMI), the cost of 
equipment approximately occupies 75% of the total 
investment for a semiconductor factory, and the overall 
equipment effectiveness (OEE) is only 33% [1]. Therefore, 
how to effectively increase the effectiveness and availability 
of equipment has become a very important task in 
semiconductor industry. It is also one of the key factors for 
the enterprise to gain profits. 
In recent years, the concept of e-Diagnostics [2] has been 
proposed in semiconductor industry. By using information 
and Internet technologies, an e-Diagnostics system can 
allow the experts of the equipment supplier, or simply called 
supplier, to remotely connect to factory’s equipment through 
Internet, enabling them to take remote actions, such as 
configuration, diagnosis, de-bugging/fixing, performance 
monitoring, and data collection and analysis. Consequently, 
the failed equipment can be rapidly repaired, and the 
supplier can continuously improve the performance of 
equipment.  
In e-Diagnostics guidebook V1.6 [3] of International 
SEMATECH, interface C had been defined as the access 
interface to e-Diagnostics between an IC factory and the 
supporting suppliers. Interface C involves many 
requirements, including interoperability (communication), 
security, supplier data separation, etc, and has a need to be 
standardized in the future. As such, this paper proposes a 
novel e-Diagnostics framework, called Secure Collaborative 
e-Diagnostics Framework (SCDF), which is intended to be a 
possible solution to part of Interface C. In addition to 
tackling the general communication and security problems 
of e-Diagnostics, SCDF also provides mechanisms to solve 
several important issues that are not figured out in previous 
work, such as data isolation for different suppliers, 
supporting remote diagnoses through multi-party 
collaboration, diagnostics service and storage failover for 
assuring system availability, and the security measures 
related to above issues. 
The rest of the paper is organized as follows. Section 2 
introduces the architecture design of the SCDF. Section 3 
describes the system component model. The methodologies 
for major mechanisms are presented in Section 4. Section 5 
depicts the design and implementation of the system 
components, while section 6 shows the integration test 
results. Section 7 is the summary and conclusions. 
II. ARCHITECTURE DESIGN OF THE SCDF
The architecture of the proposed SCDF is designed as 
shown in Fig. 1. For considering the security of the 
hardware-connectivity layer, the enterprises (both the IC 
factory side and the suppliers’ side) are divided into Extranet 
and Intranet. An outer firewall is installed between Internet 
and Extranet to protect the information security of Extranet. 
Also, an inner firewall is deployed within the enterprise to 
inspect and screen the messages that intend to enter Intranet 
such that steal or damage of confidential equipment data can 
be avoided. Information components in Extranet usually 
need to communicate with outside information components; 
Proceedings of the 2005 IEEE
International Conference on Automation Science and Engineering
Edmonton, Canada, August 1 & 2, 2005
0-7803-9426-7/05/$20.00 ©2005 IEEE 185
[7] registry nodes in both Internet and the Intranet of the IC 
factory for registering and discovering Web Services. 
III. SYSTEM COMPONENT MODEL
The system component model of the SCDF is shown in 
Fig. 2 and depicted as follows. 
GED may follow SEMI’s Equipment Data Acquisition 
(EDA) standards [8] to access equipment engineering data 
from CEM (Common Equipment Model) [9] compliant 
equipment. GED can flexibly accept, activate, and 
deactivate data collection plans and report the results 
through a data collection manager. Inside GED, a 
communication agent is designed to integrate customized 
applications via Web Services. Therefore, other system 
components can use the functions provided by GED by 
calling the methods in the communication agent with SOAP. 
Intranet UDDI contains several components for 
describing, registering, and searching Web Services on 
factory’s servers. We develop a UDDI communication 
kernel to wrap these components in the form of Web 
Services such that other system components can use the 
functions of the Intranet UDDI via SOAP. 
EDM contains EE components, such as diagnostics, 
maintenance, and APC/OEE (Advanced Process 
Control/Overall Equipment Effectiveness), to provide 
functions and information required for the diagnoses, 
maintenance, performance analyses, and management of IC 
factory’s equipment. EDM also possesses components of 
XML signature process and XML encryption process to 
protect the information security of the delivered SOAP 
messages. The functions of EDM are built upon an EDM 
Web-Service Agent. Other system components can use 
EDM’s functions through calling the methods on EDM 
Web-Service Agent with SOAP. 
MSS contains components to provide functions, such as 
single sign-on authentication and authorization for users to 
login the system, certificates issue for data encryption and 
digital signature, secure logging of system operations for 
security auditing, and user policies and profiles management. 
The functions of MSS are built upon a MSS Web-Service 
Agent. Other system components can use the functions 
provided by MSS by calling the methods in MSS 
Web-Services Agent through SOAP. 
Each RDS contains professional EE components to 
provide remote diagnostics and maintenance functions. For 
example, a remote EE system can allow experts of the 
suppliers to remotely connect to and access the IC factory’s 
equipment through EDM. A diagnostics-solutions retrieval 
system is able to remotely provide diagnostics solutions to 
IC factories. The expert collaboration component is capable 
of enabling multiple experts to simultaneously work on a 
single equipment diagnostics task through remote 
collaboration. Similarly, the functions of RDS are built upon 
a RDS Web-Service Agent. Other system components can 
use the functions provided by RDS by calling the methods 
on the RDS Web-Service Agent with SOAP.!
Internet
( SOAP/ WSDL/UDDI )
Equipment
Suppliers SideIC Factory Side
SOAP SOAP
SOAP
Third-Party
Support Company
Firewall
Extranet
(DMZ)Intranet
Manager
Diagnostics
Equipment
(EDM)
Monitoring
and
Security
Server
Remote
Diagnostics
Server
(RDS)
Standardize
Description
Mechanism
Search
Mechanism
Registry
Mechanism
UDDI Communication Kernel
Firewall Firewall
RDS Web-Service Agent
Remote
Equipment
Engineering
System
Diagnostics-
Solutions
Retrieval
System
Expert
Collaboration
RDS Web-Service Agent
Remote
Equipment
Engineering
System
Diagnostics-
Solutions
Retrieval
System
Expert
Collaboration
Inner
Firewall
Generic
Embedded
Device
(GED)
Physical
Equipment
IO
Device
Equipment
Resource
Equipment
Module
Proccess
Capability
Equipment
Material
Location
Carrier
PortClock
Port Location
CEM
Communication Agent
ApplicationInterface
Embedded
Application
EquipmentDriver
DataCollection
Manager
DCPlan
DCReport
EDM Web-Service Agent
Equipment
Management Diagnostics
APC/
OEE
Mainten-
ance
XML
Encryption
Process
XML
Signature
Process
Outer
Firewall
(MSS)
Firewall
Backup
MSS Web-Service Agent
Authentication
&
Authorization
Service
(SSO)
Secure
Logging
User
Policies
&
Profiles
Management
Certificate
IssueUniversal
Description
Discovery
and
Integration
(UDDI)
Fig. 2 System component model of the SCDF.
187
4) According to the above Web services’ URL, GED can 
call the diagnostics service on EDM a1.
5) Assume that the diagnostics service on EDM a1 has no 
response for a predefined times of retries of Step 4. 
6) GED sequentially refers to the 2nd Web services’ URL 
that is located on EDM a2.
7) According to the above Web services’ URL, GED can 
call the diagnostics service on EDM a2.
8) If Step 7 succeeds, the equipment can then be diagnosed 
through the same service on EDM a2.
The service failover mechanism described above is valid 
for service failures due to the problem of the service itself or 
the server failure. By contrast, Microsoft Server 2003 
clustering technology [12] can accomplish service failover 
only in the case of server failure. 
D. Database Failover Mechanism 
To prevent data loss, a simple database failover 
mechanism is designed. We adopt dual SQL servers for the 
databases. The SQL server has a built-in real-time 
transactional data replication function. Any transaction, such 
as addition, modification, and deletion of data, occurs in one 
SQL database, the content of the related database in the 
other SQL server will be synchronously updated in real-time 
such that the contents in both SQL databases are consistent. 
The database failover mechanism is shown in Fig. 6 and 
described as follow: 
1) First, the real-time transactional data replication 
function of the dual SQL databases is started. 
2) Each EDM creates a database look-up table that 
contains the IDs and IPs of the dual databases. 
3) EDM first refers to the 1st database IP address in the 
loop-up table. 
4) EDM can then access the 1st database (DB 1). 
5) Assume that DB 1 has no response for a predefined 
times of retries of Step 4. 
6) EDM refers to the 2nd database IP address in the look-up 
table.
7) EDM can then access the 2nd database (DB2). 
Notably, Microsoft server cluster (MSSC) technology [12] 
can also be used for storage failover. However, the hardware 
for MSSC needs to satisfy some criteria and is far expensive 
than that used in the database failover mechanism in Fig. 6. 
V. DESIGN AND IMPLEMENTATION OF THE SYSTEM 
COMPONENTS
We adopt object-oriented approach to develop the system 
components in SCDF. The Unified Modeling Language 
(UML) is used as the tool. 
First, we conduct thorough analyses of functional 
requirements for all of the system components. Then, the use 
case diagrams for these components can be drawn. Next, 
each use case in the use case diagrams is further investigated 
to subsequently generate the corresponding scenarios. Then, 
based on these scenarios, the object-oriented analysis and 
design (OOA and OOD) of system components using UML 
are performed. Consequently, the sequence diagrams, the 
class diagrams, and other useful diagrams can be obtained. 
For the detailed descriptions of OOA and OOD of the 
system components in SCDF, please refer to [13]. 
A prototype e-Diagnostics system is constructed to 
validate the effectiveness of the SCDF. To provide 
diagnostics and predictive-maintenance functions, we 
created several EE subsystems. Specifically, in EDM and 
RDS, we used data-mining and ontology technologies to 
develop a Diagnostics-Solution Retrieval System (DSRS) 
[14], which can receive equipment fault descriptions from 
remote factory clients and respond with the associated 
diagnostic solutions and knowledge through the 
Web-Services mechanism for facilitating equipment 
technicians to rapidly fix the equipment faults. In EDM, a 
prognostic model [14] was also built by using neural 
network and time series analysis techniques. The prognostic 
model can predict the future potential faults of equipment 
before they occur. Accordingly, equipment technicians can 
˪˸˵ʳ˦˸ ̅̉ ˼˶ ˸̆ ʳ˨ ˥˟ ʳ˴ ́˘˗ ˠʳ˴́ ʳ˜ ˗
˪˸˵ʳ˦˸ ̅̉ ˼˶ ˸̆ ʳ˨ ˥˟ ʳ˴ ˆ˘˗ ˠʳ˴ˆ ʳ˜ ˗
˪˸˵ʳ˦˸ ̅̉ ˼˶ ˸̆ ʳ˨ ˥˟ ʳ˴ ˅˘˗ ˠʳ˴˅ ʳ˜ ˗
˪˸˵ʳ˦˸ ̅̉ ˼˶ ˸̆ ʳ˨ ˥˟ ʳ˴ ˄˘˗ ˠʳ˴˄ ʳ˜ ˗
˪˸˵ʳ˦˸ ̅̉ ˼˶ ˸̆ ʳ˔ ˷˷ ̅˸ ̆̆˘˗ ˠʳ˜˗
EDM an
EDM a1
EDM a2
.
.
.
.
.
.
4.Request diagnostics
from EDM a1
8.Diagnose
equipment
through EDM a2
5.EDM a1 has no response
3.Refer to the
first WSs URL
Equipment
with GED
6.Refer to the second
WSs URL
7.Request diagnostics
from EDM a2
UDDI
1.Periodically register update
WS addresses of EDMs
.
.
.
2.Dynamically look up the
WS URLs of EDMs
*WS : Web Services
Look-Up Table on GED
Fig. 5 Service failover mechanism.
Local Diagnostics DB2Local Diagnostics DB1
1. Start real-time transactional
data replication
Database Look-up Table on EDM
EDM
2.Create a database
look-up table
3. Refer to the first
Database IP
Address
4. Access DB1
7. Access DB2
6. Refer to the second Database IP Address
5. DB1 has no response
˜ˣʳ˔ ˷˷ ̅˸ ̆̆˅˗˕˅
˜ˣʳ˔ ˷˷ ̅˸ ̆̆˄˗˕˄
˗ ˴̇˴˵˴̆˸ ʳ˔˷ ˷ ̅˸̆̆˗ ˴ ̇˴˵˴ ̆˸ ʳ˜˗
Fig. 6 Database failover mechanism. 
189
[2] Y.-C. Su, F.-T. Cheng, G.-W. Huang, M.-H. Hung, and T. Yang, "A Quality
Prognostics Scheme for Semiconductor and TFT-LCD Manufacturing
Processes," in Proc. of The 30th Annual Conference of the IEEE Industrial
Electronics Society (IECON 2004), Busan, Korea, November 2004.
(NSC_92_2212_E_006_098, NSC_93_2622_E_006_005)
purpose in most studies and the applications of the proposed 
conjecture schemes are only limited to certain types of 
equipment.   
Production
Equipment
Measurement
Equipment
Sensor
Data
Quality
Measurement
Data
Product
t∆
 
Fig. 1 Relationship between Production Equipment and 
Measurement Equipment 
Currently, most semiconductor and TFT-LCD plants employ 
batch production, so once defects are discovered, not simply one 
or two units of products are discarded, but the entire lot is. 
Therefore, not only product yield drops, but serious impact is 
brought to production capacity and cost. Every manufacturer, 
consequently, is eager to find a way to predict production quality 
of the next lot. Therefore, this paper proposes a quality 
prognostics scheme to solve the above-mentioned problem. The 
proposed quality prognostics scheme has three features. The first 
feature is that the quality prognostics scheme can predict the 
production quality of the next lot based on the current-lot sensor 
data of the production equipment and several previous-lots 
quality measurement data from the measurement equipment. This 
is a distinct difference from some general quality monitoring 
systems, such as statistic process control (SPC) and advanced 
process control (APC).  
The quality prognostics scheme consists of a conjecture 
model and a prediction model. Thus, the second feature is that it 
can be used for both virtual metrology and quality prediction. The 
conjecture model can be applied for virtual metrology. With this 
two-tier arrangement, the quality prognostics scheme can form 
proper combination according to the plant’s real need. This makes 
the scheme become more applicable. Numerous algorithms of 
artificial intelligence and statistics may be applied for the 
conjecture model. The selection criteria are based on the physics 
and parameter properties of the equipment. The prediction 
algorithms used in the prediction model are weighted moving 
average, neural network, or any algorithm with prediction 
capability.   
The third feature is that the quality prognostics scheme 
possesses a self-searching mechanism and a self-adjusting 
mechanism. Upon the new conjecture or prediction algorithm 
being selected, the self-searching mechanism will be activated. 
The self-searching mechanism will search for the best set of 
parameters and/or functions for the conjecture algorithm or 
prediction algorithm from all the possible parameters/functions 
combinations exhaustively. This best set will produce the best 
conjecture or prediction results that satisfy the desired accuracy 
bounds. Then, the conjecture or prediction model enters the 
normal running model. After a period of time, if the prediction 
accuracy exceeds an acceptable bound or the equipment 
properties are altered due to scheduled maintenance or part 
change, the self-adjusting mechanism is launched to tune the 
system parameters to bring the prediction accuracy within the 
acceptable bounds. 
The rest of this paper is organized as follows. Section 2 
explains the quality prognostics scheme. Section 3 introduces 
how to build up a quality prognostics scheme with an illustrative 
example. Finally, Section 4 presents the conclusion. 
II. Quality Prognostics Scheme 
Fig. 2 shows the quality prognostics scheme with 
self-searching and self-adjusting mechanisms. The scheme can be 
divided into four parts: (1) conjecture model with pre-process of 
raw data; (2) prediction model with evaluation of prediction 
accuracy; (3) self-searching and self-adjusting mechanisms; (4) 
user selection and interface setup. The function of each part is 
elucidated as follows. 
A. Conjecture Model with Pre-process of Raw Data 
z Pre-process of Raw Data 
Because various process parameters and sensor data of 
production equipment are involved, and parameters used in 
conjecture model might be only a part of them, desired input data 
have to be selected from myriads of process parameters and 
sensor data. In general, the guidelines of parameter selection 
depend on the relationships between the parameters and the 
product as well as the properties of the conjecture algorithm. Here 
equipment engineers’ and suppliers’ expertise plays an important 
role. Additionally, the different data formats acquired from the 
process parameters of the production equipment and sensor data 
have to be transformed to the input formats the conjecture model 
requires. Pre-processor of raw data has to handle the different 
formats.   
z Conjecture Model 
The purpose of the conjecture model is to conjecture the 
current-lot quality based on the sensor data of the current lot. 
Because diverse types of production equipment in semiconductor 
and TFT-LCD plants possess different properties, it is very 
unlikely to apply one conjecture algorithm to all types of 
equipment. To solve the above-mentioned problem, a universal 
conjecture model is proposed. Numerous algorithms of artificial 
intelligence and statistics may be applied to establish the 
conjecture model. The selection criteria are based on the 
properties of the production equipment. Meanwhile the conjecture 
model itself can also be applied for the purpose of virtual 
metrology. This is an urgently needed function for many 
semiconductor and TFT-LCD plants. In this paper, neural 
networks are applied to construct the illustrative conjecture model 
that will be presented in section 3.   
B. Prediction Model with Evaluation of Prediction 
Accuracy 
z Prediction Model 
The goal of the prediction model is to predict the next-lot 
quality according to the current-lot conjecture value and the 
quality measurement data of several previous lots. Like the 
conjecture model, various algorithms with prediction capability 
can be selected as the prediction model. The selection criteria are 
based on the properties of the equipment. In this paper, weighted 
moving average is used to build the prediction model.  
z Prediction-Accuracy Evaluation 
Prediction accuracy is very important to a quality prediction 
system. Poor accuracy of a prediction system contributes less on 
the actual applications. There are several ways to evaluate 
prediction accuracy. Appropriate prediction accuracy indexes are 
selected based on the properties of the evaluated object. In this 
work, the prediction accuracy evaluation indexes for the 
illustrative example are mean absolute percentage error (MAPE) 
and max error. 
C. Self-searching and Self-adjusting Mechanisms 
One of the features of the quality prognostics scheme is that it 
proposes a self-searching mechanism and a self-adjusting 
16
1
15
2
14
3
13
4
12
5
11
6
10
7
9
8
Input/Output 
Port
Process 
Modules
Rotating 
Module
15m
7.5
m
Process Direction
 
Fig. 3 Example Equipment (Sputtering of TFT-LCD Factory) 
A. Construction of Conjecture Model 
Numerous algorithms of artificial intelligence and statistics may 
be applied to construct a conjecture model. In this illustrative 
example, back-propagation neural networks [9, 10] are applied to 
build up the conjecture model. The construction procedures of the 
conjecture model is illustrated in Fig. 5 and the details are 
elucidated as follows.  
Procedure 1: Collect Sensor Data and Select Input Parameters 
 The first step to build up a neural-network conjecture model 
is to collect sensor data. During production process, recordable 
parameters of the equipment are about 177 items. Eliminating the 
fixed items set up by the equipment engineers, 96 items of 
parameters are selected as valid sensor data based on the 
equipment properties. The parameters can be categorized into 6 
groups: vacuum, inert gas concentration, temperature, voltage, 
electric current, and power. Then, based on the equipment 
features, parameter properties, and equipment engineers’ opinions, 
40 out of 96 parameters are carefully screened as input 
parameters. The 40 parameters mainly include vacuum, inert gas 
concentration, and power.  
 The sampling period of sensor data is 10 seconds. Thus, 6 
samples of sensor data and one sheet of finished products are 
generated every minute. Table 1 displays several samples of 
sensor data and product measurement data. The information listed 
from left to right is sample time, vacuum, gas concentration 1, gas 
concentration 2, gas concentration 3, power, move-in time, and 
product measurement data. The above-mentioned description 
 
Production
Equipment
Prognostics Scheme
After
Measurement
Equipment
measurement
data at
measurement
data at
conjecture
value at
prediction
value at
Measurement Data
measurement
data at
Sensor DataNeural Network
t
1 2( , ,..., )i i i nY Y Y− − −
t∆
1( ~ )mX X
i nY − 2iY − 1iY − iˆY 1iY +%
t n t− ∆ 2t t− ∆ t t−∆ t t+ ∆
1 1 1 2 2
ˆ . . .i i i i i i i i n i nY w Y w Y w Y w Y+ − − − − − −= + + + +%
 
Fig. 4 Deployment Flow of Quality Prognostics Scheme 
(1)
Collect sensor data and
select input parameters
(2)
Assign hidden layer numbers,
node numbers, and
transfer functions
(3)
Select training data
set and test data set
(4)
raw data
Normalize
(5)
Set up conditions for
training termination
(6)
Set up initial weights
(8)
Compute error between
conjecture value and
actual measurement datum
(9)
Meet termination
conditions ?
(13)
Establish
complete model
(10)
Return error to tune
weights
(11)
Finish self-
searching ?
(12)
Select new layer
number, node number
and transfer function
No
Yes
No
Yes
Arrangement for
self-searching
(7)
Run neural networks
 
Fig. 5 Conjecture Model Construction Flow Chart with Neural 
Networks 
explains that 6 samples of sensor data correspond to the 
measurement datum of one product. Here, the measurement 
datum is the reflection wavelength of sputtering coating thickness. 
A pair of sheets are randomly selected from 100 sheets and 
measured in every 100 minutes. The sensors record a set of input 
parameters every 10 seconds; 6 set of parameters will, therefore, 
be produced every minute. In this example, all the 6 set of 
parameters are feeded into the neural-network conjecture model 
in order of time sequence. 
Table 1: Samples of Sensor Data and Product Measurement Data 
Procedure 2: Assign Hidden Layer Numbers, Node Numbers, 
and Transfer Functions 
z Hidden Layer and Node 
Normally, to adopt one or two hidden layers may achieve nice 
convergence. And, with more nodes in hidden layer, convergent 
rate will be accelerated, smaller error will be achieved, and finally 
better conjecture result will be accomplished. Nonetheless, too 
sample time vacuum
gas
concentration
1
gas
concentration
2
gas
concentration
3
power move-in time
product
measurement
data
hh:mm:ss micro bar cubic cm/min cubic cm/min cubic cm/min kW yy/mm/dd mm:ss nm*100
12:13:02 1.50E-04 0.7 0.5 -2.2 5.1 2003/5/1 12:13 6.85
12:13:12 1.20E-04 0.7 0.3 -1.7 6
12:13:22 2.60E-03 67.5 0.1 208.8 7.5
12:13:32 7.80E-05 1.7 0.5 -1.7 1.3
12:13:42 3.70E-04 0.9 0.5 -1.7 1.7
12:13:52 1.70E-04 0.9 0.5 -1.7 10.9
12:14:02 1.40E-04 0.9 0.5 -1.7 5.1 2003/5/1 12:14 6.78
12:14:12 1.10E-04 0.9 0.5 -1.7 6.1
12:14:22 2.60E-03 67.5 0.9 208.8 7.6
12:14:32 3.80E-05 1.3 0.5 -1.7 0
12:14:42 2.40E-04 0.9 1.3 -1.7 3.3
12:14:52 1.80E-04 0.9 0.5 -1.7 1.7
Initially, users shall specify all the possible combinations of 
weights. Then, the self-searching mechanism will calculate all the 
prediction values ( 1iY +% ) corresponding to all the possible 
combinations of weights exhaustively. Finally, the best weights 
will be selected by checking that the error between its associated 
prediction value ( 1iY +% ) and the actual measurement value ( 1iY + ) 
is minimal. 
C. Evaluation of Prediction Accuracy 
This example employs two evaluation indexes: mean absolute 
percentage error (MAPE) and max error for evaluating prediction 
accuracy. The formulas are illustrated as follows: 
1
100 %
n
i i
i i
A FMAPE
n A
=
−
= ∑         (5) 
i iMaxError Max A F= −        (6) 
 i = 1,…,n , iA : actual values, iF : prediction values, n: 
sample number 
The closer MAPE value gets to zero, the better the prediction 
accuracy of the model holds. The value of MaxError stands for 
the maximal difference between the actual value and the 
prediction value. 
D. Prediction Results 
This example adopts weighted moving average to generate 
prediction results. Besides, this example employs two different 
sets of equipment parameters to train the prognostics model so as 
to check if similar prediction results may be achieved while 
different data are inputted for training. Figs 6 (a) and 6 (b) display 
the prediction results by using neural-network conjecture model 
together with weighted moving average. Table 2 shows the 
comparison between Figs. 6 (a) and 6 (b). 
 
 
 
 
 
 
 
Fig. 6 Prediction Results by Applying Neural-Network 
Conjecture Model together with Weighted Moving Average 
 
Table 2 Prediction Results Comparison by Applying 
Neural-Network Conjecture Model and Weighted Moving 
Average 
 
Training Data 
Sets 
Test Data 
Sets 
MAPE (%) 
MaxErr (nm)
Ref. (700nm)
(a) 1-50 51-85 2.0536 40.63 (5.8%)
(b) 86-135 136-170 2.0730 45.18 (6.5%)
Comparing prediction results in Tables. 2, the MAPE values 
in both sets do not exceed 5%, which implies that the quality 
prognostics scheme is applicable. 
IV. Conclusion 
This work proposes a quality prognostics scheme with 
self-searching and self-adjusting mechanisms. This quality 
prognostics scheme possesses the functions of virtual metrology 
and quality prediction. Furthermore, the conjecture and prediction 
models in this scheme are rather generic and exchangeable. It 
means that different algorithms for dealing with different 
equipment properties may be applied to construct them. The 
features of user selection and interface setup and self-searching 
mechanism help scheme developers to build up a quality 
prognostics scheme that can be rapidly applied to different types 
of equipment. Besides, the self-adjusting mechanism will 
automatically tune the prognostics scheme when offsets of 
equipment properties occur, which makes this scheme more 
adaptable. Based on the prediction results of the illustrative 
example, it is believed that this quality prognostics scheme can 
predict the product quality of the next-lot efficiently and 
effectively.  
V. References 
[1] A. Imai, R. Miyamoto, and K. Ozawa, “Universal Architecture to 
Improve Equipment Maintenance Work,” in Proc. 2001 IEEE 
International Conference on Semiconductor Manufacturing, Oct. 
2001, pp. 55-58. 
[2] B. Zhang and G. S. May “Towards Real-Time Fault Identification in 
Plasma Etching Using Neural Networks,” in Proc. 1998 IEEE/SEMI 
Advanced Semiconductor Manufacturing Conference, Sept. 1998, pp. 
61-68. 
[3] T. N. Tsai, S. Y. Liu, and T. H. Yang, “A SMT Reflow Soldering 
Process Diagnosis System Using Neurofuzzy Approach,” 
International Journal of Fuzzy Systems, Vol.3, No. 4, Dec. 2001, pp. 
541-547. 
[4] L. L. Lee, C. D. Schaper, and W. K. Ho, “Real-Time Predictive 
Control of Photoresist Film Thickness Uniformity,” IEEE 
Transactions on Semiconductor Manufacturing, Vol. 15, No. 1, 
February 2002, pp. 51-59. 
[5] W. K. Ho, A. Tay, and C. D. Schaper, “Optimal Predictive Control 
with Constraints for the Processing of Semiconductor Wafers on 
Bake Plates,” IEEE Transactions on Semiconductor Manufacturing, 
Vol. 13, No. 1, February 2000, pp. 88-96. 
[6] C. Hess, and L. H. Weiland, “Extraction of Wafer-Level Defect 
Density Distributions to Improve Yield Prediction,” IEEE 
Transactions on Semiconductor Manufacturing,Vol. 12, No. 2, 
February 1999, pp. 175-183. 
[7] J. A. Mittereder, J. A. Roussos, W. T. Anderson, and D. E. Ioannou, 
“Quantitative Measurement of Channel Temperature of GaAs 
Devices for Reliable Life-Time Prediction,” IEEE Transactions on 
Reliability, Vol. 51, No. 4, December 2002, pp. 482-485. 
[8] B. Kaczer, R. Degraeve, N. Pangon, and G. Groeseneken, “The 
Influence of Elevated Temperature on Degradation and Lifetime 
Prediction of Thin Silicon-Dioxide Films,” IEEE Transactions on 
Electron Devices, Vol. 47, No. 7, July 2000, pp. 1514-1521. 
[9] H. C. Zhang, and S. H. Huang, “Applications of Neural Networks in 
Manufacturing,” International Journal of Production Research, Vol. 
33, No. 3, 1995, pp.705-728. 
[10] C. T Lin, C.S. George Lee, “Neural Fuzzy Systems,” Prentice Hall 
PTR, 1996.  
[11] F. M. Ham and I. Kostanic, “Principles of Neurocomputing for 
Science and Engineering,” McGraw-Hill, 2001. 
(a) Data Sets 1-85 (b) Data Sets 86-170
Proceedings of the 1003 IEEE 
Inter"8lional Confereoco on Robotics &Automation 
Taipei, ~ s i w a n ,  September 14-19, m a 3  
Development of a Web-services-based e-Diagnostics Framework 
Min-Hsiung Hung* 
Department of Electrical Engineering 
Chung Cheng Institute of Technology 
National Defense University 
Taoyuan, Taiwan, R.O.C. 
miumin@ccit.edu.tw 
Abst rac t  
In recent yeors, the emerging Web-services technology hos 
provided a new and excellent solution to the data integration 
among heterogeneous systems. In this pape,: a 
Web-services-based e-diagnostics framework (WSDF) is 
proposed It can achieve the automotion ofdiognostic processes 
and dia~ostics-informalion integration /or semiconductor 
equipment. First, the system framework and fhe system 
component model are designed Then. the object-oriented 
unolysis and design ofqvstem components are accomplished. In 
particular for the purpose of code w s e ,  several common 
functions, such as SOAP communication, UDDI registrafion, 
securiry mechanism, data exchange mechanism, and local 
dotobase access, are built into (I generic component, called 
Web-service Agent. By inheriting fhe Web-service Agent, other 
system components can be constructed and have these common 
functions. In addition. LI generic equipment object model, LI 
unified authentication-service mechanism, and a sofe nemork 
connection are also designed in the framework. WSDF is 
intended to support the e-diagnostics functions defined by 
tnternationol SEMATECH. tf is believed fhor WSDF c m  be 
applied to construct e-diagnostics systems /or semiconductor 
manufacruring industy. 
1 Introduct ion 
A semiconductor fab possesses a variety of equipment whose 
repair and maintenance are mostly undertaken by the equipment 
supplier. When equipment goes wrong, the an-site engineer must 
look up the diagnostic solutions from the supplier's Web site or 
manuals, according to the equipment data report, to fix the 
problem. In most cases, the supplier needs to send field-service 
experts to the fab to perform on-site diagnosis, testing, and repair. 
However,,due to the distance, the diagnosis and repair on failed 
equipment usually cannot be performed immediately such that 
the long downtime causes a significant production loss. Thus, the 
concept of e-diagnostics is proposed recently in the 
semiconductor manufacturing industry. With e-diagnostics, 
supplier's experts can remotely link to fab's equipment through 
Internet, allowing them to take actions, such as configuration, 
diagnosis, de-huggingifix, performance monitoring, and data 
collection and analysis, to rapidly repair and maintain equipment, 
so as to reduce production loss and continuously improve 
equipment performance [1]-[4]. 
In recent years, some remote diagnostic systems have been 
developed and applied in different industries and applications, 
such as semiconductor manufacturing [5][6],  microscope 
industry (71, cement industry [XI, on-line health care [9], 
international space stations ilO], and intelligent on-line 
machine-fault diagnoses [I l l .  However, these existing diagnostic 
systems have Shortcomings either on connectivity, such as using 
dedicate ISDN connections [SI or telephone lines [XI, or on the 
approach of information integration, such as adopting proprietaty 
I Tbs aulbon wodd Wrs le ,hank the National Ssimee Comcii Republic o i c h w  (Contran No. 
NSC91-1212-E-W6o61 d N S C  91-2212~E-OIbOil) for hcidiym~~ninsnglhU n m o h .  
2. TIE cornrnpandhg zlvUlor. 
Fan-Tien Cheng Sze-Chien Yeh 
Institute of Manufacturing Engineering 
National Cheng Kung Universitv 
Tainan, Taiwan, R.O.C. 
chengft@mail.ncku.edu.W 
technologies [5][lO], only providing limiied' functions of 
downloading equipment data for analyses [6] ,  or manually 
browsing and integrating Web sites' data [7][9][11]. 
To achieve the automation of diagnostics information 
integration, an e-diagnostics system needs to integrate many 
heterogeneous data and systems on Intranet and Internet. For 
example, it must collect, access, and integrate diverse equipment 
data, exchange information among the diagnostics system and the 
supporting systems, and deliver diagnostics information between 
fahs and suppliers. Therefore, the construction of an 
e-diagnostics system involves a variety of cross-platform 
information integration issues, such as the development of data 
transformation mechanism, the design of communication 
messages, the selection of data transmission protocols, and the 
construction of a safe network connection. 
To fulfill the requirements of e-diagnostics systems and 
remedy the shortcomings of existing diagnostic systems, this 
paper proposes an e-diagnostics framework, called WSDF, which 
i s  based on the new-generation distributed object technology - 
Web services [12][13]. WSDF possesses the mechanism of 
automatically integrating diagnostics information over lntemet 
and thus can support many functions needed for e-diagnostics, 
such as automatically collecting equipment data, remotely 
diagnosing, fixing, and monitoring equipment, and analyzing and 
predicting the equipment performance. 
WSDF uses the Web-services technology to resolve the 
information integration problems among cross-network, 
cross-platform, and heterogeneous systems. In particular, XML 
(extensible Markup Language) [I41 is exploited to express data 
such that various kinds of information can he exchanged and 
integrated among different systems and platforms 1151. In 
addition, SOAP (Simple Object Access Protocol) [I61 is used as 
the messaging protocol to achieve the interoperability of 
cross-platform, dismhuted systems. It is notable that SOAP 
messages can be transported using HTTP (Hyper Text 
Transmission Protocol) such that communication messages can 
successfully pass through the firewall [17]. Also, with the 
property that Web services are programmable application 
components that can he described by Web Services Description 
Language (WSDL) [I XI and published on the Web, WSDF allows 
that semiconductor fabs register equipment engineering services 
and suppliers register diagnostics services on Universal 
Description Discovety and Integration (LJDDI) registv nodes [I91 
so that client applications can find them and use these services. 
Therefore, WSDF can easily be expanded for global applications 
involving multiple fabs and multiple suppliers. Besides, a generic 
equipment object model, a unified authentication-service 
mechanism, and a safe nehvork connection are also designed in 
the framework. 
The remainder of the paper is organized as follows. Section 2 
introduces the procedure of system development. Section 3 
details the design of the Web-services-based e-diagnostics 
0-7803-7736-2/03/$17.00 02003 IEEE 596 
Factory Side Supplier Side 
sow 
Figure 3. The system component model of the WSDF. 
them into GDD. Also, it can allow manually performing remote 
diagnostic operations on fab's equipment through DASs. 
research refen to SAML [21] and Microsoft .NET Passport [22] 
to design an authentication-service mechanism that can resolve 
the authentication and authorization problem of accessing system 
components and provide the whole system with the Single cumponents. 
DAS can monitor and control equipment that conforms to the 
Object-Based Equipment Model (OBEM) speoifcalion [23][24]  
For the security problem of accessing system components, this by Method Invocation through CORBA (Common Object 
Request Broker Architecture) or DCOM (Distributed Common 
Object Model). Inside a DAS, the Data Acquisition Manager 
(DAM) is responsible for communicating with other server 
3.2 Design the System Component 
Model 
Based on the kamework model in 
Fig. 2, the system component model of 
WSDF is designed as in Fig. 3. The 
system components include fab's DAS 
and ODs, supplier's RDS, 
Authentication Service, and service 
Components of other factories and 
suppliers. The major server 
components, DAS, ODs, and RDS in 
WSDF are described as follows. 
I / \ / \  ' g-J.rga.pJ j \ EWYIW.", I."lrnrn ' 
.. 
~ 
I FactoryE I 
Figure 4. WSDF's global application involving multiple fabs and multiple 
suppliers. 
598 
4 Development of system components in WSDF 
This section describes the object-oriented analysis and design 
of system components in WSDF, including Web-service Agent, 
Data Acquisition Server (DAS), On-site Diagnostics Server 
(ODs), Remote Diagnostics Server (RDS), Equipment Object 
Model, and Authentication Service. 
4.1 Web-service Agent 
The functional requirements of Web-service Agent are as 
follows. 
0 Possess SOAP communication interfaces for messaging and 
coordination. 
0 Provide a UDDI registry mechanism for registering and 
searching Web services. 
0 Provide an XSLT mechanism for transforming the formats of 
XML documents. 
0 Hold a security mechanism to encrypt and decrypt the data 
delivered over Internet and to provide authentication and 
authorization of accessing system services. 
0 Provide the functions of accessing local databases. 
Based on above hnctional requirements, the Use Case 
diagram of Web-service Agent using UML is shown in Fig. 7. 
The actors are described as follows: Business System represents 
the system components using the functions of Web-service Agent; 
External System is the remote system that communicates with 
local system components through Internet; UDDI Registty Node 
stands for one of registry nodes in the global UDDl organization; 
Local Database represents the database at the place where 
Web-sewice Agent or the system component possessing 
Web-service Agent is located; Authentication Services are the 
Web services that provide unified authentication and 
authorization for communications among system components. 
The use cases in Fig. 7 are described as follows: '*Construct 
communication backbone" is to set up the initialization of the 
SOAP communication function; "Use UDDl registry 
mechanism" includes the use case "Construct communication 
backbone". In other words, aRer initializing the SOAP 
communication function, system services can be registered and 
searched over Internet; "Connect to local databases" is to access 
the local databases; In "Use XSLT mechanism", system 
components can transform XML scbemas and generate XML 
documents. This use case includes the use case "Connect to local 
database" to save (retrieve) XML data into (fiom) the local 
I 1 
cmr*rtm ,_.I @a"b... 
"S. =x ..our* m.crm*m h+nmksUon wrrk.. 
Figure 7'. Use Case diagram for the Web-sewice Agent. 
database. In "Use security mechanism", system components 
communicate with each other through secure mechanisms, such 
as encryption/ decryption, digital signature, and using the unified 
authentication-service mechanism. This use case also includes 
the use case "Connect to local database" to read user 
authorization data fiom databases. 
According to the scenarios in all of the use cases, the sequence 
diagram are developed. In turn, the corresponding class 
diagrams are designed. For the purpose of cross-platform and 
cross-language use of Web-service Agent, this research develops 
two versions, C# and Java, of Web-service Agent, aiming for 
current two mainstream programming platforms, Microsoff .NET 
and Sun JZEE, respectively. It is notable that currently 
Microsoft .NET has supported over twenty programming 
languages, including C U ,  Visual Basic, and C#, and it allows 
crowlanguage inheritances. Besides, Java can be executed 
almost on any platform. Therefore, system components that 
inherit Wcb-service Agent can communicate with each other 
regardless of their programming languages and execution 
Figure 8. Class diacrams of Web-sewice Agent. 
600 
Machine Engineering Data Port, and MachineResource objects in 
the machine pmxy correspond to Equipment, EquipmentModule, 
Equipment Engineering Data Port, EquipmentResource objects in 
OBEM, respectively. Hence, through the machine proxy, DAS 
can connect to equipment and access the equipment engineering 
data by object method invocation over CORBA or DCOM. 
4.5 Authentication Service Mechanism 
To resolve the authentication and authorization problem of 
accessing system components and to pmvide the system with the 
Single Sign-On capability, a unified authentication-service 
mechanism is constmcted. Its operations are illustrated in Fig. 11. 
Authentication Manager receives the user request and delivers it 
to Authentication Services to verify the user's identity and access 
the user data, such as user policies and profiles. Authentication 
Manager then compares the user account data sent back fiom 
Authentication Services with the user identification data to obtain 
the user' authorization status. OASIS' SAML standard [21] and 
Microsoft .NET passport 1221 are referred to implement the 
authentication-service mechanism. In the fuhue, this part can also 
involve the PKI technique 1251 to encrypt and decrypt messages 
with Public Key. 
5 System Implementation and Integration Test 
5.1 System Implementation 
0 Development Environment: 
In this research, Microsofl Windows 2000 is selected as the 
development platform. Specifically, DAS and RDS are 
programmed in Java and adopt Sun JRE as their execution 
environment. On the other hand, ODS and the 
authentication-service mechanism are implemented in C#, and 
Microsofl .NET CLR is their execution environment. This 
type of implementation can also verify the interoperability of 
WSDF among heterogeneous systems. 
0 Software Requirement: 
(I) Borland Jbuilder 7 
DAS and RDS are implemented in Java, and Borland 
JBuilder 7 is the development tool. 
The authentication-service mechanism and ODS are 
programmed in C#, and Microsofl Visual Studio .NET is 
used as the development tool. 
(3) Apache Axis and Microsofi Internet Information Services 
(11s) 
Apache Axis is selected a s  the Web servers of DAS and 
RDS, while ODS and the authentication-service mechanism 
adopt Microsofl IJS as the Web servers. 
Microsoft SQL Server 2000 is used to construct the various 
databases. 
(2) Microsofl Visual Studio .NET 
(4) Microsoft SQL Server 2000 
5.2 Paradigm Application of e-Diagnostics 
According to Fig. 2, a paradigm application of e-diagnostics 
using WSDF is constructed to verify the effectiveness of WSDF. 
Ihe  paradigm e-diagnostics system is developed based on the 
scenario of tiamework messages in Fig. 6.  
5.3 Integration Test 
One snapshot of the integration test of the paradigm 
e-diagnostics system is shown in Fig. 12. For easy operation of 
the system there are graphical user interfaces (GUIs) in DAS, 
ODs, and RDS. The test results show that WSDF can meet the 
design objectives. 
Figure 11. Illustration of the operations of the 
authentication-service mechanism. 
6 Summary and Conclusions 
A Web-services-based e-diagnostics framework, called 
WSDF, is proposed in this paper. It is intended to support the 
e-diagnostics capabilities defined by International 
SEMATECH. Because WSDF is developed with Web-services 
technologies, it can successfully resolve the information 
integration problem among cross-network, cross-platform, 
and heterogeneous systems of e-diagnostics. In addition, 
WSDF uses Web services as the communication infrastructure, 
which is loosely coupled and peer-to-peer. Thus, system 
components can easily he added in and be plug-and-play. Also, it 
adopts open technologies, so the system development cost is low. 
Although not all of the functions needed for e-diagnostics are 
currently implemented in the WSDF system, the systematic 
methodology provided in this paper to develop WSDF can be a 
very useful reference for developing e-diagnostics systems. 
Based on the characteristics of WSDF, it is believed that WSDF 
can be applied to construct e-diagnostics systems for 
semiconductor manufacturing industry and can potentially be 
applied to other industries that need e-diagnostics. More detailed 
techniques of developing WSDF can be found in [26]. 
References 
[I] P. Singer, "E-Diagnostics: Monitoring Tool Performance," 
Semiconductor Internationot, Mar. 2001. 
httD:/lmvwe-insite.neysemiconductor/ 
[2] R. Raman, "E-Diagnostics in IC Manufacturing: A Case 
Study," Semiconductor Cntemationat, July 200 1. 
h~:i/wwwe-insite.net/semiconductor~ 
[3] e-Diagnosrics ond EEC Workrhop, hiernational 
SEMATECH, Austin, Texas, USA, Oct. 19, 2001. 
htto://w,sematech.orgi 
[4] e-Diagnostics Guidebook, version 1.1, lnternational 
SEMATECH, Dec. 2001. httu:ilu?vw.sematech.org! 
[ 5 ]  M. Locy, "The Impact of E-Diagnostics ~ One Year Later," 
in 2001 IEEE Inlernafionot Symposium on Semiconductor 
Monufacfuring,pp. 435-438, Oct. 8-10,2001. 
[6] M. Inaba, T. Aizono, K. Sonohe, H. Fukube, T. Iizumi, 1. 
Arima, and Y. Usami, "The Development of Security 
System and Visual Service Support Software for On-Line 
Diagnostics," in 2001 IEEE International Symposium on 
Semiconductor Manufichrring, pp. 435-438, Oct. 8-10. 
2001. 
602 
[4] F.-T. Cheng, C.-H. Wang, and Y.-C. Su, "Development of a Generic Tester for
Distributed Object-Oriented Systems," in Proc. 2003 IEEE International
Conference on Robotics and Automation, Taipei, Taiwan, R.O.C., pp. 1723-1730,
September 2003. (NSC_91_2212_E_006_061)
overall cost of s o h a r e  development will be greatly decreased, : 
Nowadays, software industry trends towards highly labor 
diversifying and outsourcing. According to the object-oriented 
development procedure, analysis and design engineers describe 
the system with UML diagrams and then hand these diagrams to 
programmers for implementation. In order to make sure that the 
programmers implement the system correctly in accordance with 
these diagrams, testing engineers have to prove the functions and 
evaluate the performance of the system. Programmers and testing 
engineers rely on these UML diagrams to communicate with one 
another. To simplify and speed up testing, we have to make 
testing engineers quickly understand the contents of 
implementation and to eliminate the time spent an waiting for the 
completion of implementation before creating test plans and 
programs. Therefore, in this research, we try to make testing 
engineers and programmers work individually but synchronously. 
As shown in Fig. l(b), when programmers perform 
implementation with the final class and sequence diagrams, 
synchronously testing engineers start to generate test plans and 
programs based on the same class and sequence diagmms. As 
soon as implementations completed, testing engineers can 
immediately apply test plans and programs to evaluate functions 
and performances of each component and the whole system. 
When the integration test of a distributed system is performed, 
the interface definitions (such as the interface definition language 
(IDL) files of CORBA [ 5 ] )  of all the distributed components are 
also required. 
To design the test plans in parallel with implementation can 
greatly reduce the loading and time of testing. Therefore, it is 
desired that those UML diagrams generated in the OOD stage 
can be useful for testing. Some researchers studied on the 
applicability of those UML diagrams to do testing. Among them, 
Chevalley [6] approached it by designing a functional testing 
method according to probability theory. In this approach, an 
automation theory is  defined and, through state diagrams, test 
cases are automatically generated. Hartman" et al. [7] fin1 
proposed that a set of communication semantics have to be 
created and be used to standardize the state diagrams of each 
component to build a global behavioral model that describes the 
whole system, and then one can select the test cases needed for 
integration tests of the model. Kim et al. [SI used the data flow 
and control flow of state diagrams and referred to the path testing 
method of traditional testing theory to perform tests. The 
researches mentioned above focus more on how to generate test 
cases by referring the possible state changes and using state 
diagrams. According to the definition of UML, state diagram are 
used to display a series of state changes caused by an object's 
responses to the events in its life cycle. The purpose of state 
diagrams is to highlight the process of control of state changes. 
Therefore, to an individual object or class, we can generate the 
test cases with state diagrams; however, state diagrams cannot 
present the interaction between objects or message flows between 
system components. In conclusion, under the mechanism based 
on state diagrams, we can test an individual object or class, but 
the integration tests that distributed systems need may not be 
supported. 
Instead of state diagrams, in our research, we choose 
sequence diagrams as the references to edit the test plans. 
Sequence diagrams can describe workflows of each scenario in 
time sequence and also the objects needed for each scenario, as 
well as the interactions between those objects. By testing all the 
scenarios in time sequence mentioned above, we could know 
whether all the system functions are correctly implemented or 
not. 
In addition, in the aspect of distributed sohare testing 
architectures, researches aimed at individually designing an 
exclusive testing architecture to a specific communication 
standard of distributed systems. For example, a testing 
architecture [9] was developed with CORBA [SI techniques and 
schemed with masrer fesf component for managing testing and 
rest componenr for executing testing for the e-commerce system 
constructed under CORBA infrastructure. As for the web 
environment, a testing architecture [IO] was constructed in 
accordance with two main programs: server-side program, e.g. 
JSP, and client-side program, e.g. JavaScript. Also, the 
considerations of performing testing in the web environment 
were mentioned in [ I l l .  At present, distributed system 
communication specifications are not too many, and we can have 
a different testing architecture for each distributed environment. 
However, as more and more distributed communication standards 
are established, and the situation that two or more than two kinds 
of distributed communication standards used in an 
implementation becomes more popular, then a generic testing 
scheme may have to developed to cope with the problem of 
generality. 
A Generic Tester is proposed in this work to help testing 
engineers to cope with the testing requirements of distributed 
systems that are developed by the object-oriented development 
procedure. In this Generic Tester, we implement a Test-Plan 
Wizard that uses class diagrams and interface definitions as 
foundations and sequence diagrams as testing scenarios to edit 
the test plans for fulfilling the component functional tests, system 
integration tests and performance tests. According to the contents 
of the test plans, Test-Plan Wizard can systematically generate 
test-plan execution codes. These execution codes are performed 
to test the soflware component or system. Then, test results are 
generated. Finally, test report is created through a Comparator 
comparing the test results with the predefined reference outputs. 
The testing programs and experiences of previous testing may be 
componentized to become testing modules with the functions of 
error detecting and diagnosing for the software system after 
deployment. 
This work is organized as follows. Section 1 includes the 
background, references, and an outline of the proposed Generic 
Tester. The detailed functional mechanism and development 
procedure of the Generic Tester is introduced in Section 2. 
Section 3 presents the illustrative example. Section 4 discusses 
about the coverage of testing of the Generic Tester. Finally, this 
paper ends with summary and conclusions. 
2. Development of the Generic Tester for Distributed 
Object-Oriented Systems (CTDOS) 
This section is going to introduce the scheme and 
development procedure of the Generic Tester. The OOD-stage 
class diagram of the Generic Tester is also presented in this 
section. 
2.1 The Scheme o f  the GTDOS 
Figure 2 depicts the functional block diagram of the Generic 
1724 
Ted-Plan Wizard 
................... . I j :. ~ -m,DMCI .. Test-Plan Generator 
I Test-Result 1 
Definitions of All Modules 
(Entities far Testing) 
Figure 4: Signal Flow and Functional Block Diagram of the Test-Plan Wizard 
(2) . Process of Parsing Sequence Diagram (Fig. 4, Steps 4-7) 
In the process of parsing sequence diagram, the system will 
first find out the names of all the sequence diagrams in the .mdl 
file. Testing engineers can then select one 01 more diagrams that 
arc related together to be the test entity. 
We take a single sequence diagram to explain the process. To 
each scenario, as shown in Fig. 5(b), the scenario number in the 
sequence diagram will be parsed out first, and then we parse the 
object used in the scenario. Following, the object's name, 
stereowe, and super class are extracted. The collaborative 
relationships of the object, namely collaborations are parsed, next. 
Each collaboration of the object will have a collaboration name, a 
sequence number, a supplier class, and then the direction of the 
collaboration that may start from client to supplier or from 
supplier to client. Note that, the object itself is defined as the 
client. Because the collaboration is actually an operation to an 
object or a class of the supplier, we only have to h o w  the class 
name and the operation name o f  the supplier class. If detailed 
operation information of the supplier class is needed, we then 
refer to the class information diagram and fill operation name, 
operation reNm type, operation visibility, and operation 
parameters into the contents of operation information. 
A sequence diagram is composed of many steps. One or 
several related steps are grouped to become a scenario. Once the 
input parameters of a scenario are assigned and the scenario is 
initiated, then the steps in this scenario will be executed 
sequentially and continuously until all the outputs are generated. 
Therefore, test plans shall be designed based on each scenario, 
and the parser shall be able to identify all the scenarios in a 
sequence diagram. 
B. Specify Reference IupuUOutput Data 
Test-Plan Generator in Fig. 4 takes each scenario in a 
sequence diagram as the reference to design test plan. Then the 
test case information generated by Test-Plans Generator is passed 
to Reference I/O Editor (Fig. 4, Step IO). According to the 
test-case information, Reference 110 Editor then generates data 
input interface for a testing engineer to specify input values and 
reference output data (Fig. 4, Steps 11, 
12). For foolproof purpose, after a 
testing engineer inputs all the values, 
Reference I10 Editor will validate the 
values according to the data types and 
bounds required. If the value input is 
not correspond to which the data type 
required, such as requiring integer but 
inputting string, the system will request 
the testing engineer to re-input the 
value. Finally, reference input values 
will pass to Test-Code Generator to 
generate test-plan execution codes (Fig. 
4, Step 14) and test-result template that 
includes information about steps of 
testing and reference I10 values for the 
use of comparing the test results (Fig. 4, 
Step 13). 
C. Generate Test-Plan Execution 
Afrer Test-Plan Generator decides 
which scenario is to be tested. Test-Plan 
Codes 
Generator will pass the related 
information about the scenario to Test-Code Generator (Fig. 4, 
Step 9). Based on this test plan information and the reference 
inputs from Reference YO Editor (Fig. 4, Step 14), Test-Code 
Generator is ready to generate the corresponding test-plan 
execution codes (Fig. 4, Step 15). As such, every scenario in 
seauence diagrams can be tested with the desired reference 
inputs. 
E 
- 
(a) Class-Diagram Document Structure 
i 
(b) Sequence-Diagram Document Structure 
Figure 5:  Document Structures o fc l a s s  Diagrams and 
Sequence Diagrams 
1726 
Figure 8 is the schematic diagram far parsing the Rational 
Rose UML model file of class diagram. In the lefl side of Fig. 8, 
the block of Rational Rose UML model file contains the related 
information in .mdl file of ServiceAgent, which is framed with 
dot line in Fig. 7(a). In the process of parsing data, the parser 
refers to the document structure of class diagram (Fig. 5(a)) 
togenerate the desired document structure. The output of the 
parser is shown in the class information diagram depicted in the 
right side of Fig. 8. For example, the Class name, 
“ServiceAgent” (Line I), is filled into the blank of theName of 
Name; the stereotype, “control” (Line 2), into IheStereoType of 
Name; the superclass, “genericServiceAgent” (Lines 3-9 ,  into 
theSuperClass of Nome; the ClassAttribute, “agentlD (Line 36). 
into rheArtributeName of Attribute-1; the Operation, 
“requestService”, into theOperationName of Operation-I; and so 
forth. Then the contents of the ClassAttribute, “agentID, (i.e., 
“string”, “Service-I”, and “Public” (Lines 37-39)) are filled into 
the tree structure under the node Attribute-I built referring to the 
strnchxe of the Attribute in Fig. 5(a). By the same token, the 
Operotion-I tree structure is built according to the Operation, 
“requestService”, and its contents (Lines 7-22). The UML 
sequence diagram model file can be parsed in a similar way. 
Figure 9 illustrates the test-result template with reference U 0  
data and test-plan execution codes generated by Test-Codes 
Generator. In the test-result template, Test-Plan Generator 
sequentially fills the operations invoked from Scenarios 1 and 2 
in Fig. 7(b) into test-result template. To input reference input data, 
first Reference VO Editor searches for the related input data of 
the desired operations in elasdsequence information diagrams. 
For example, the operation in Scenario I is register0 of 
genericServiceAgent. The parameter name of register0 are ID 
and Posswd, and their data type is string. All of the information 
mentioned above is shown in the test-result template by the 
Reference I/O Editor, then the testing engineers can input “ime” 
and “63906“ for ID and Passwd, respectively. Also, in the 
template, we design a repetition column for testing engineers to 
fill in the times of execution. If n is filled, then this scenario will 
he executed n times. 
In the test-plan execution codes of Fig. 9, the codes are 
divided into two groups. The first group is the connection codes 
responsible for connecting test-plan execution codes and the 
soflware under test. When Test-Codes Generator knows that 
Client is the actor, ServiceAgent and DoroHandler are the classes 
of this test, it will create the connection codes, which declare the 
implementation objects of the classes for later testing programs 
(Lines 4-5). The second group is the test codes in charge of 
executing test plans to the software under test. Such as the Lines 
6-12, the Test-Codes Generator firstly get the output t p e  of 
Scenario 1 from test-result template with reference IiO data. The 
output type describes that the return (output) data of register is in 
the type of Boolean. Then the Test-Codes Generator creates the 
codes of Boolean Output-I as the Line 8 shown. According to 
the operation name and from the class information diagram 
shown in the lefl bottom of Fig. 9, the class of the function 
register0 is genericServiceAgent that is the super class of 
ServiceAgent. Then the Test-Code Generator utilizes the object, 
oServiceAgent, built in Line 4 to execute the operation and to fill 
the reference input data into the parameter values to complete the 
test codes for the function (Lines 8-9). Test-Codes Generator also 
creates the instructions for logging the time of the testprogram 
execution, as Line 7: stort-time=TestExecgelTimeO and Line IO:  
end-time =TeslExec.gelTimeO) shown. At last, Test-Codes 
Generator writes the data into test-result template (Lines 11-12), 
Afler testing, the execution codes enforce the unitfsystem 
under test to generate the actual test results, which includes 
execution time and actual outputs, and fi l l  them into the 
test-result template (Fig. IO). Then Comparator compares the 
actual outputs with the reference outputs. If actual output value is 
in the tolerable range, the test result will be “passed (GO)”; if not, 
“failed (NG)”. For this example, the reference output of operation 
requestService is 30f15, while the actual output is 55 that is out 
of the tolerable range. Therefore, the test result is NG. 
4. Consideration for Test Coverage 
The only reference information of the proposed Generic 
Tester is the class diagrams and sequence diagrams generated in 
the OOD stage of the process of object-oriented development. 
h e  to the limitation of the notations used in sequence diagrams 
of UML specification, sequence diagrams cannot completely 
replace other diagrams’ descriptions to the system. Therefore, the 
test coverage of the Generic Tester has to be considered. 
In the process of object-oriented development procedure, in 
order to specifically describe system functions, designers usually 
describe the process of logical control of a sequence diagram in a 
colloquial way, such as adding a “comment”. For programmers, 
it will not have any difficulties to implement the software 
according to these colloquial descriptions. However, the Generic 
Tester may not be able to parse colloquial descriptions, so it may 
cause a testing-sequence problem. To deal with this problem, we 
allow designers to use certain “comment” to describe the logical 
sequence of execution, such as do-loop and if-then-else processes. 
Then, the Generic Tester will parse the “comment” and pass it to 
the testing engineer for editinglmodifymg the test plans. 
By the same approach, if necessary, we can ask the testing 
engineer to refer to other UML diagrams, such as state diagrams 
and activity diagrams, to edit test plans. According to the design 
mentioned above, the supports of the Generic Tester to other 
diagrams can he enhanced, and test-coverage rate can be 
improved. 
According to each different levels of each distributed 
object-oriented system, this Generic Tester provides proper 
features that are applicable to both unit tests and system 
integration tests. In performing component testing to a single unit, 
the testing target will be the class diagram in component level, 
and the testing scenarios will be designed by the sequence 
diagrams that describe the dynamic behavior of the component. 
As to the level of a system integration test, the testing targets will 
be the interface definitions of all modules, and the testing 
scenarios will be the sequence diagrams that describe the 
framework messages [13][14][15] among components. Ifwe treat 
a component as an object, then its interface definition diagram is 
similar to a class diagram. For example, if the distributed system 
applies COREIA [5] as its communication infrasbucture, then the 
interface definition of each component is expressed by an 
Interface Definition Language (IDL) file that is similar to a .mdl 
file of a class diagram. Therefore, as long as a system uses UML 
to describe its class diagrams and sequence diagrams, then we 
can use this Generic Tester to execute the tests to the scale that is 
as small as an individual component to as large as a whole 
distributed object-oriented system. 
1728 
This Generic Tester can edit test plans 
both for hnctional and non-functional tests 
[16][17]. Because of the columns of 
reference U 0  template are designed to he 
dynamically added, the flexibility of 
supporting the Generic Tester to different 
testing types can be increased by the way of 
adding new column contents. Due to 
adopting UML sequence diagmms as the 
foundation, the Generic Tester can use the 
Scenario 
I 
Reference Output Achlal Test 
operation Execution Time R ~ ~ T ~ ~ ~  value IToierance 0uwut 
Range (GONG) 
register 
I 
152003 
,5:2001 Boolean Tme - TNe GO 
class attributes and operations as parameters to set reference U 0  
data for sequential functional tests. If non-functional tests, such 
as stress tests and performance tests, are planned, then testing 
engineers can add columns (i.e., repetition time, repetition 
intermission, log of test results, etc.) to the test-result template 
with reference UO. In accordance with sequence diagrams, 
testing scenarios are edited and finally non-functional tests are 
performed. 
5. Summary and Conclusions 
A Generic Tester for Distributed Object-Oriented Systems is 
developed in this work. This Generic Tester is adaptable to unit 
tests of each individual component and to system tests of the 
entire distributed object-oriented system, as long as the functions 
and behavior of the componentisystem can be presented with 
only class diagrams (as well as interface definitions) and 
sequence diagrams. The Test-Plan Wizard is the kernel of the 
Generic Tester. The Test-Plan Wizard adopts class diagrams as 
the foundation and divides the steps in sequence diagrams into 
several scenarios to design the test plans. Testing Engineers can 
specify the reference inputioutput data to the Test-Plan Wizard. 
Based on the desired class diagmms, the selectable sequence 
diagrams, and the reference inputioutput data, test-plan execution 
codes and test-result template with reference inputloutputs are 
generated. The test-plan execution codes are performed to invoke 
the unitlsystem under test and generate test results. The actual 
outputs in the test result are compared with the reference outputs 
in the test-result template by the Comparator; and, finally, the test 
reports are created. 
Not only functional tests, but also non-functional tests (i.e. 
performance tests, stress tests, etc.) can be performed by the 
Generic Tester. An illusuative example is presented to help 
readers comprehend the scheme of the Generic Tester. Test 
coverage of the Generic Tester is also considered m this work. 
Because the Generic Tester needs class diagrams and sequence 
diagrams only, test plans can be generated without waiting the 
completion of the system implementation. As such, it is believed 
that with this Generic Tester, the development cycle of the 
distributed object-oriented system can be reduced and, hence, the 
overall development efficiency can be improved. 
References 
[I] E. Huang, E-T. Cheng, and H.-C. Yang, “Development of a 
Collaborative and Event-Driven Supply Chain Information 
System Using Mobile Object Technology,” Pmc. 1999 IEEE 
International conference on Robotics and Automation, Detroit, 
Michigan, U.S.A, vol. 13, pp.1776-1781, SeptembedOctober. 
1999. 
[2] F.-T. Cheng, H.-C. Yang, and E. Huang, “Development of an 
Educational Supply Chain Information System Using Object Web 
2 
Technology,” to appear in Journal of h e  Chinese Institute of 
Engineers. vol. 25,2002. 
[31 Object Management Group, Unified Modeling Language 
Specifkation, available at http:/lm.uml.org. 
[41 S. R. Schach, Classical and Object-Oriented Softwm 
Engineering with UML and JAVA, McGraw-Hill Company, 
Singapore, 1999. 
[ 5 ]  Object Management Group, Common Ohject Request 
Bmker Anhitecture, available at http://www.corha.org. 
[6] P. Chevalley, “Automated Generation of Statistical Test 
Cases from UML State Diagram,” in Pmc. 25th Annual 
International Computer S o h  and Applications Conference, 
Chicago, U.S.A.,pp.205-214, Oct 2001. 
[71 J. Nartmann, C. ImoberdotC and M. Meisinger, 
“UML-Based Integration Testing,” in P m .  2000 ACM 
International Spposim on Software Testing and Analysis, 
Volume 25, Issue 5, Portland, U.S.A., pp.60-70, Sep 2000. 
[SI Y-G Kim, H .4 .  Hong, D.-H. Bae, and S.-D. Cha, “Test 
Cases Generation from UML State Diagrams,” in 1999 Sohare,  
IEEPmceedings-, Volume 146, Issue 4, pp. 187-192, Aug 1999. 
[9] R. L. Robert, “CORBA-Based E-commerce Application 
Testing Architecture,” in P m .  2001 ACNEEE International 
Conference on Computer Systems and Applications, Beirut, 
Lebanon, pp.474-477, June 2001. 
[IO] E-J. Wang, “An Object-Oriented Architecture Supporting 
Web Application Testing,” in hoc. 1999, IEEE the TwenIy-Third 
Annual Infernational Computer Sofnvare and Applications 
Conference, Phoenix, U.S.A., pp.122-127, Oct 1999. 
[ I l l  H. Q. Nguyen, Testing Applications on the Web: Test 
Planning for Internet-Based System, John Wiley & Sons, 2000, 
Canada. 
1121 Rational Software Corporation. Rational Rose 2002, 
available at http://w\nvrational.com. 
1131 R. Mal i ,  D. Harkey, and J. Edwards, The Essential 
Dishibnted Obj,t, Survival Guide, New York John Willy & 
Sans, 1996. 
[I41 E-T. Cheng, E. Shen, I-Y. Deng, and K. Nguyen, 
“Development of a System ‘Framework for the 
Computer-Integrated Manufacturing Execution System: a 
Distributed Object-Oriented Approach,” International Journal of 
Computer Integrated ManuhctuMg, vol. 12, no. 5,  pp.381-402, 
September/October, 1999. 
[I51 E-T. Cheng, H.-C. Yang, J.-Y. Lin, and M.-H. Hung, “The 
Development of Holonic Information Coordination Systems with 
Security Considerations and Error-Recovery Capabilities,” in 
Pmc. 2001 IEEE International Conference on Robotics and 
Aulomation, Seoul, Korea, pp.1832-1838, may, 2001 
[I61 Paul C. Jorgensen, Software Testing - a Cra/?sman’s 
AppmCh> CRC Press, Inc, 1995, U.S.A. 
117) H. Q. Nguyen, TeUog Computer S&an, 2nd EdiUon, 
John Wiley & Sons, 2000, Canada. 
requestService ;;;:i Integer 30 115 5 5  NG 
1730 
 Novel Semiconductor Business Model –  
Engineering Chain for the Semiconductor Industry1 
 
Jonathan, Chang Yung-Cheng 
Member, IEEE 
Institute of Manufacturing Engineering 
National Cheng Kung University 
Tainan, Taiwan, R.O.C. 
P9893101@ccmail.ncku.edu.tw 
Fan-Tien Cheng 2 
Senior Member, IEEE 
Institute of Manufacturing Engineering 
National Cheng Kung University 
Tainan, Taiwan, R.O.C. 
chengft@mail.ncku.edu.tw 
Tsung-Li Wang 
Student Member, IEEE 
Institute of Manufacturing Engineering 
National Cheng Kung University 
Tainan, Taiwan, R.O.C. 
peterw@super.ime.ncku.edu.tw 
 
Abstract - The foundry business model was first developed by 
TSMC in 1985. A foundry should provide customers with IC 
manufacturing services. Those customers include IC design 
houses, integrated device manufacturers (IDM), and system 
suppliers. However, most electronic products are consumer 
products, and their life cycle has been reducing with time. An 
IC design house needs to continuously develop ICs with new 
functions to meet the current market demand for consumable 
products. Meanwhile, to support customers for high speed and 
low cost end product development, foundry service providers 
must also continue developing new process technologies, from 
0.25um down to 32nm. Unfortunately, advances in new 
manufacturing process technologies also create difficulties in 
new IC design. These advances increase the IC design failure 
rate. Currently, no effective working model and system exists to 
solve this problem. To formulate this high IC design failure 
problem, this work proposes a novel Engineering-Chain (EC) 
business model. This work also proposes an Engineering Chain 
Management System (ECMS) to help achieve the goals of EC, 
such as improving IC design success rate, reducing IC design 
cycle time, lowering IC design costs, and increasing revenue. 
 
I.  INTRODUCTION – CHALLENGE IN THE 
SEMICONDUCTOR INDUSTRY 
 
The overall functionality of electronic products recently has 
improved at unprecedented speeds. In 1970, every ten thousand 
persons shared one electronic product. Today, everyone can own 10 
electronic products on average. The demand for electronics products 
increases significantly. To fulfill strong market demand, the 
improvements in the numbers and functions of electronic products 
are supported by innovations in semiconductor process technologies, 
which can produce the same IC cell functions in one-millionth of 
the space used by electronic products in 1970. The semiconductor 
industry currently dominates changes in electronic products.   
Three trends exist in the semiconductor industry for supporting 
rapid functional changes in end products. First, faster IC design is 
required to support shorter life cycle of IC products when IC is 
assembled in end products and the end product life cycle is getting 
shorter. Therefore, rapid IC design is required to support the change 
in the new digital consumer era. 
Second, Moore’s law holds that IC function capacity doubles 
every 18 months [1], therefore the whole semiconductor industry is 
striving to sustain this trend of increasing IC function capacity. New 
process technologies are developed to fulfill this trend to maintain 
its competitiveness.  
Third, owing to the considerable investment necessary to 
establish an IC manufacturing factory, specialization in the 
semiconductor industry has also become a trend. The current 
semiconductor industry working model functions as follows: an IC 
design house focuses on IC design, a foundry service provider 
supports IC manufacturing, and so on. Revenue growth rates in IC 
design houses (32%) and foundry service providers (29%) are, 
respectively, higher than overall semiconductor industry growth 
(15%) [2]. The driver of the overall increase in semiconductor 
industry revenue primarily comes from the new collaborative 
working model between IC design houses and foundries. 
Figure 1 shows that, in 2004, only 34% of first IC designs can 
be successfully released for mass-production [3] with these new 
environment changes and by applying the current collaborative 
fabless business model. Therefore, a new business model is required, 
along with a framework for accomplishing it.  
In the semiconductor industry new collaborative working model, 
a single IC design company cannot complete a new IC design task 
without considering manufacturing capability. An IC design is only 
completed and qualified when it is fully proved for 
manufacturability in a foundry production line.    
 
Fig. 1. IC design success rates. 
 
Most IC design companies believe that the greatest challenges in 
the IC design cycle are cost and cycle time [4]. In the next 
generation of process technology, mask cost will increase 100% [5]. 
Mask costs are doubled following each failure of the first IC design. 
The IC design company must pay reworking costs and the new 
project is left idle while waiting for second and even third rework 
results. The IC design cycle is extended and design costs are 
increased. Increasing first design success rate not only reduces 
design costs and IC design cycle time, but also increases revenue 
via earlier market entry. 
High design success rate will not require IC design reworking 
and increase the overall product revenue. Recent studies found that 
applying a new process technology and embedding more functions 
in an IC may increase the failure rate of IC design [3]. While more 
functions are designed into one IC chip and a new process 
technology is used for wafer fabrication, the increased design 
complexity of process technology makes it difficult to obtain a high 
success rate for first IC design.  
The following presents an example to help clarify the challenges 
---------------------------------------------- 
1. The authors would like to thank the National Science Council of the 
Republic of China for financially supporting this research under 
Contract No: NSC-95-2221-E006-347-MY3. 
2. The corresponding author (e-mail: chengft@mail.ncku.edu.tw).
 90nm process technologies, more than 70% of photo layer designs 
must be completed via OPC operation.  
After the adoption of OPC design technology in IC design, IC 
design data size has been significantly increased. Basically, OPC is 
applied to improve the design success rate; however excessive 
quantities of OPC data may increase the design difficulty in this 
remote collaborative design environment, which lacks a feasible 
system architecture and communication standards.   
When IC design is completed and the designed product enters the 
mass-production phase, SC plays the key role to assure smooth 
order-to-delivery operation. However, certain IC designs might not 
be able to enter this mass-production phase owing to high IC design 
failure rates. As such, like the existing SC management system, 
which can increase mass-production efficiency, a novel Engineering 
Chain Management System (ECMS) is also required for boosting 
product-development efficiency. 
Traditional computer-integrated-manufacturing (CIM) functions 
in the semiconductor industry focus on intra-factory operation 
support, including planning, scheduling, manufacturing execution 
control, SPC (statistic process control), APC (advanced process 
control), AEC (advanced equipment control), yield management, and 
so on [12]. All these CIM functions are designed based on the 
operations of a single semiconductor company. 
Due to the evolution of the new business model, as depicted in 
Fig. 4, different from IDM’s (integrated design and manufacturing) 
operations, current IC design, wafer manufacturing, IC assembly and 
test are handled by a new collaborative working team – fabless 
design house, foundry service provider, and assembly service 
provider. Consequently, the traditional CIM scope needs to be 
enhanced for including the supply chain management system (using 
RosettaNet framework for example) and the ECMS to produce a new 
comprehensive CIM architecture for supporting this new 
e-manufacturing operation [10][11]. Figure 5 shows this new CIM 
scope. 
The CIM framework of 
SEMATECH has become the 
automation standard for 
semiconductors [12]-[14]. 
This study follows the same 
methodology to establish the 
CIM framework to develop 
the ECMS framework. 
Therefore, the ECMS 
framework presented in this 
work is designed to provide a 
modular, component-based 
application architecture that 
satisfies several objectives, 
including interoperability, 
substitutability, extendibility, 
and reuse of applications 
[16][17]. The ECMS 
requirements used to define 
functional components and 
operating scenarios are 
summarized in the following 
section. This work further 
develops the ECMS 
framework to produce better 
leveraging distributed 
computing standards and 
details application integration 
among components. 
 
 
IV. REQUIREMENTS OF THE ENGINEERING CHAIN 
MANAGEMENT SYSTEM 
Fig. 6. Engineering Chain Management System. 
 
Fig. 4. New semiconductor business model. 
Fig. 5. New CIM scope to support Engineering Chain. 
 IC design success rate and fast IC design cycle. However, several 
issues may be still encountered and result in IC design failure.  
The objectives of the EC operation include “First Tape Out 
Success”, “Design Cost Reduction”, “Design Cycle-Time 
Reduction”, “Empowerment Agility”, “WIP Visibility”, “Asset 
Utilization” and “Time to Market”. With the generic protocol, 
common system architecture and operation standards, the ECMS can 
provide an effective design environment for all design partners to 
improve IC design success rate for minimizing time-to-market and 
design cost. 
 
V. IMPLEMENTATION OF THE ENGINEERING CHAIN 
MANAGEMENT SYSTEM  
 
Supporting the above EC operating scenarios in the ECMS 
architecture requires exchanging considerable engineering data. 
Currently, there is no industrial standard (as what the semiconductor 
industry did for logistics data) for EC engineering-data exchange in 
the semiconductor industry. This work adopts the new generation 
distributed objected-oriented technology with web services [19] as 
the enabling technology of the ECMS framework. 
 
A. Applying the Concept of Framework to Design the ECMS 
 
The ECMS enhances the first-pass (passing the qualification at 
the first design) possibility in the IC design cycle through coherent 
operation by efficient and effective design information sharing. 
Without the ECMS, several fragmental system applications exist for 
partial implementation of EC operations. Notably, no standard exists 
for implementing applications to support the EC operations. 
Existing EC applications that are not based on the framework 
concept eventually become legacy systems, which cannot be easily 
integrated with other applications in each service partner of the EC. 
Even worse, various applications for the same function may be 
established owing to the adoption of different information exchange 
mechanisms among service partners. For example, a single design 
house must maintain different 
yield information exchange 
platforms with all engaged 
foundry service suppliers that do 
not use the same platform. 
Consequently, when a single 
design project is initiated in a 
design house with numerous 
possible service providers, 
separate interfaces must be 
established with various 
IP/library service providers, 
mask houses, foundry service 
providers and assembly/test 
houses owing to the lack of a 
framework design and standard 
protocols. 
A framework design in the 
ECMS provides several benefits 
for all CIM managers in an EC 
environment [13]. With the 
advance of the application of 
Internet and information 
technologies to e-manufacturing, 
a framework design based on 
these two technologies can 
enhance IC design productivity 
in EC operations. Therefore, the 
ECMS framework, which 
fulfills the key requirements of 
the EC, can remarkably improve the efficiency of design 
collaboration in EC. 
 
B. Implementation of the ECMS Framework 
 
To support the ECMS requirements, the ECMS framework 
should possess four key functionalities: 
1) EC Operating Capability: The ECMS should be equipped 
with five levels of EC operating capabilities: 
i Remote access and remote collaboration  
ii Data collection and debugging 
iii Data analysis 
iv IC design operating- scenario-management capability  
v Project and product management.   
2) Data Security: Data transfer via the Internet in the ECMS is 
critical, and may even be a determinant of the success of a new 
device design. Data security thus is the main consideration of the 
ECMS implementation.  
3) EC Application Service Registration and Publication: Overall, 
the EC is constructed by many applications located in various 
member companies for completing a specified design project. A 
service registration mechanism should be constructed to enable 
various members to register available applications and services 
corresponding to specific design projects. 
4) Communication Protocol: The ECMS is built on top of the 
Internet with a firewall constructed in each company. The ECMS 
should adopt mainstream network protocols, which can directly pass 
through the firewall. Consequently, the new-generation distributed 
object technology, known as web services, is adopted to construct the 
communication infrastructure of the ECMS. 
Figure 8 reveals that the ECMS framework comprises five main 
servers, including the IC design management server, IP/library 
management server, masking service server, foundry service server, 
and assembly/test service server, the functions of which are 
described below. 
Fig. 8. ECMS framework. 
 Microsoft Visual Studio.NET 2005, Internet Information Services 
(IIS) 6.0, SQL Servers 2000, and Web Services Enhancement (WSE) 
3.0. The network bandwidth is 100 M bits per sec. The 
data-transmission performance of traditional FTP tool was measured 
and referred as the benchmark for evaluating the T-WS and LDT-WS 
methods. As presented in Fig. 12, for the case of 100 G data size, the 
proposed LDT-WS method requires 16,580 seconds that is 54% 
faster than the T-WS method (25,534 seconds) and 8% slower than 
the FTP method (15,197 seconds). However, the FTP method 
requires a dedicated communication port without flexible security 
control and can only be applied manually. As for the LDT-WS 
method, it can be automatically and seamlessly integrated into the 
EC agent as well as the ECMS framework. Therefore, the proposed 
LDT-WS method is preferred. 
 
E. Operation Integration through Industry Leveraging 
 
The degree of improvement of this proposed new CIM scope for 
supporting IC design cannot be evaluated based simply on internal 
laboratory simulation. Given comprehensive system analysis and 
demonstration of the implementation of the ECMS in the Autolab of 
the Institute of Manufacturing Engineering at National Cheng Kung 
University (NCKU), this study also initiated industry leveraging for 
overall system integration with physical operation to evaluate the 
ECMS performance. Currently, the Business Management System 
(BMS) in the Fabless Semiconductor Association (FSA) [18] has 
engaged with NCKU to support the development and performance 
evaluation of this project. Several IC design houses and foundry 
service providers are reviewing this overall plan for possible 
participation.  
 
F. Implementation Challenges and Future Work 
 
The contribution of this work is providing the comprehensive EC 
operation scenarios and proposing the novel ECMS of entire IC 
design cycle for supporting collaborative IC design. The greatest 
challenge in the implementation of this EC model and the ECMS is 
to gather precise and detailed design operations to ensure the 
inclusion of comprehensive scenarios in the EC model. Without 
comprehensive and detailed operating scenarios, any missing 
scenario will easily result in a serious production defect and 
consequent design failure. The design flow proposed in this 
work is collected from the author’s experience of foundry 
operation, mask preparation, semiconductor industry 
supply-chain and industry leveraging activities. 
With comprehensive and critical scenarios and information 
defined in the EC working model, the other challenge is to 
design a framework for facilitating the realization and 
integration of the EC working model. Based on years of 
object-oriented framework design study in the Institute of 
Manufacturing Engineering, National Cheng Kung University, 
this work provides a systematic methodology for designing and 
implementing the proposed ECMS system. However, several 
challenges were encountered in the ECMS framework 
implementation: 
1. Even with the definition of comprehensive EC 
scenarios, to provide a flexible framework to support all data 
among EC members without industry-wide open standards, it 
is necessary to collect and assess all possible data formats to ensure 
that the framework can support them without extra customization. 
The data include the design rule file, WAT (wafer acceptance test) 
data, and so on. The ECMS message formats defined should include 
all possible data formats applied in the semiconductor industry.   
2. The data volume in the EC exceeds any volume we have 
handled in the e-manufacturing environment with SECS/GEM 
protocols. Secure, reliable, and efficient transfer protocols are 
required to support the transmission of these huge IC design files. 
3. It is difficult to measure IC design performance if the result of 
Fig. 11. Framework messages for design house requesting yield reports from foundry service. 
0
5000
10000
15000
20000
25000
30000
1M 10M 100M 1G 10G 100G
(Bytes)
(S
ec
on
ds
)
T-WS LDT-WS FTP
Fig. 12 Comparison of Data-Transmission Performance 
