 2 
當重要的。通常，對 XML 做查詢，是從元素組成的樹狀結構中，根據選擇限制找
到符合的 pattern。舉例來說，表示式 XQuery [2]︰
doc(“papers.xml”)//article[title=‘Query']//author[fn=‘jack']， 
將從 paper.xml 這份文件中擷取所有的文章標題為“Query”，而且其中一名作者
的名字為“jack”的資料。其中，雙斜線表示祖孫關係，每一個“author”元素
必須有一個小孩元素名為“fn” 內容為“jack”，而這些“author”元素又是名
為“article”的孫子，且該“article”元素有小孩元素名稱為“title”、內容為
“Query”。假如在元素“author”前為單斜線，則它會以“article”的小孩方式
被擷取。 
 
三、文獻探討 
 
為了要處理查詢樹，之前的研究[1, 5, 10, 21]首先計算元素間個別的父子和祖孫
關係，然後再將部份結果做合併。因為個別的結構限制選擇性較少，會造成大量
的中間結果而需要很多時間。在研究[3]中，Bruno et al.設計了 holistic 查詢計
算，利用連結堆疊以輸出從根節點到葉節點的路徑答案，再將其經過排序並合併
後成為查詢結果。在研究[3]中，TwigStackXB 以 B-tree 為基準使用了 XB-trees
作為索引的方法，而且索引的指標是雙向的，往下的指標標記著所有它可達到範
圍的元素，以迅速處理祖孫關係，但是無法直接處理其它結構關係。在研究[10]
中，Jiang et al.提出了 XR-tree，為一種 B+-tree 的變形，引用在研究[11]的 XRTwig
方法，更積極地處理對元素忽略這部份。該論文使用研究[13, 18, 19]中的全域邊
修復演算法以快速達到下一個完整配對的查詢結果。然而，當查詢樹具有父子關
係的時候，XRTwig 可能輸出大量錯誤的結果，造成後置處理所花的時間很高。 
 
另一方面，研究[17]的 ViST 和研究[14]的 PRIX，將 XML 文件和查詢樹轉換成
序列。然後，利用索引字串來快速地進行序列配對。PRIX 對於有順序的父子關
係比 TwigStackXB 有更好的效率。然而，對於一個沒有排序好或具有祖孫關係
的查詢來說，效率並不佳。 
 
四、研究方法 
 
首先我們以範例解釋之前研究的缺點。在圖 1 的範例中，節點 A 是查詢樹中的
根節點，CA為它的指標，初始值指向第一個元素 a1，堆疊 SA初始值為空的。其
他的節點的設定也相似。在 XML 中的每個元素記錄了開始-結尾的編碼 (L & 
R)，以及深度 (D)。每次我們會處理指標指著中，具有最小 L 值的元素，在其對
應的堆疊和父親的堆疊中清除舊的元素。當父親找到時，會在父親的堆疊上建立 
 4 
 
 
 
 
 
 
 
 
 
 
 
 
節點的指標，我們利用額外的 Ri，i 的範圍為 0≦i≦m，用來記錄 Pi可到達的元
素最大的 R 值。 
 
我們的 XCut 演算法利用 XB+-tree 來快速處理樹狀結構，該演算法藉由根節點呼
叫遞迴程序的方法相似於 XRTwig。然而，XCut 會根據查詢句依照層次順序造訪
XB+-tree 的元素。特別的是，我們會先針對每個節點，譬如節點 A，將其佇列
QA，填滿索引樹中根節點內的元素，叫做 TA，然後，開始測試在佇列中最前面
的元素是否滿足了查詢樹的邊限制。在遞迴呼叫中，一個節點先呼叫它的父親，
然後呼叫它下面所有的小孩。假如父親的元素和它自己佇列中第一個元素都是樹
葉元素，它們就是符合巢狀關係。我們使用 (Li, Ri)表示呼叫者的範圍，也就是
父親的元素，並用 (Lj, Rj)來表示目前的節點的範圍。這裡只有四個可能的情
況，也就是：完全落後，領先的，被包含，或包含別人 [3]。在第一種情況中，
目前的節點刪除它的最上層的元素，以測試佇列中的下一個元素是不是被包含
(情況 3)。同樣的在情況 4 中，此節點的元素包含呼叫者的，所以此節點也刪除
第一個元素以接著測試第二個。在情況 2 中，節點回應 Lj 給呼叫者，父親可以
使用回傳的值去快速地刪除佇列直到某一個元素 R 值大於 Lj。在情況 3 中，AD
關係的邊找到，目前的節點將進一步地呼叫它的所有小孩節點來確保它的所有子
樹的邊都滿足限制。若所有小孩節點都回傳 0 時，節點回應 0 給他的父親。換句
話說，假如此節點的最上層元素和父親的元素都是內部元素，或是只有其一是內
部元素，我們可應用情況 5 和情況 6，因為在索引樹中一個內部的元素會聚集樹
葉元素。 
 
基於上述的理由，我們結合了這兩種 PID 非 0 的情況，推論出其為內部的元素。
所以，當呼叫根節點的回傳值為 0 時，我們將節點佇列中的第一個元素，以索引
指到的元素取代。若它是葉元素，我們則不對它做任何動作。然後，XCut 再一
次開始上述的呼叫。若最上層的元素都是葉元素，XCut 會執行另一個遞迴呼叫 
 6 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
表格 4 顯示針對 XMark 的資料 (~113MB)執行 Q11 和 Q12 的時間。如圖，較大的
XML 資料庫將會需要更多的時間來完成。然而，XCut 可以輕鬆地在 2 秒內完成
查詢句，這樣傑出的效能主要是因為選擇限制式的處理有更高的選擇性。 
 
在本計畫中，我們提出了 XCut 演算法，用來加速處理 XML 的查詢句。XCut 利
用了 XB+-tree 來表示群組的元素，並在查詢樹上進行層次順序的造訪。我們討論
如何有系統地利用 XCut 來擴增 XML 元素間包含的關係，實驗結果證明我們所
提出的演算法有強烈的優勢。在未來的研究中，我們希望探索新的方法幫助加速
其它類型的 XML 查詢句。目前我們也正在整理計畫成果，預計投稿至國際會議
或期刊。 
 
六、參考文獻 
 
[1] S. Al-Khalifa, H. V. Jagadish, N. Koudas, J. M. Patel, D. Srivastava, and Y. Wu,              
"Structural Joins: A Primitive for Efficient XML Query Pattern Matching," in 
Proc. of ICDE, San Jose, California, pp. 141-152, February 26 - March 01, 2002.  
[2] S. Boag, D. Chamberlin, M. F. Fernandez, D. Florescu, J. Robie, and J. Simeon,  
   "XQuery 1.0: An XML Query Language," http://www.w3.org/TR/xquery/, 2003.  
[3] N. Bruno, N. Koudas, and D. Srivastava, "Holistic Twig Joins: Optimal XML  
   Pattern Matching," in Proc. of ACM SIGMOD, Wisconsin, June 4-6, 2002.  
[4] Z. Chen, H. V. Jagadish, L. V. S. Lakshmanan, and S. Paparizos, "From Tree  
Patterns to Generalized Tree Patterns: On Efficient Evaluation of XQuery," in 
Proc. of VLDB, Germany, Sept., 2003.  
[5] S.-Y. Chien, Z. Vagena, D. Zhang, V. J. Tsotras, and C. Zaniolo, "Efficient   
