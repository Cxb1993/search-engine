2行政院國家科學委員會專題研究計畫成果報告
服務導向之網路服務整合平台設計與實作
Design and Implementation of Service Oriented WWW Service Integration Platform
計畫編號：NSC 96-2221-E-036-035-
執行期限：96 年 8 月 1 日至 97 年 7 月 31 日
主持人：鄭福炯(fccheng@ttu.edu.tw) 大同大學資工所
計畫參與人員：洪泰昌，張立楷，邱顯駿，林家輝
一、中文摘要
我們先前已發展出服務串接的應用軟體
(WSIT：WWW Service Integration Tool)，讓使用
者可以容易的整合龐大WWW上現存服務。但現有公
開 Web Service 應用並不多，如果我們可以利用現
有龐大 WWW 上服務並將其轉換成公開 Web
Service，將可以大量豐富公開 Web Service。因
此，本研究發展出可以方便的將WWW上服務模組化
並轉換成公開 Web Service 之方法與工具；同時
WSIT 所串接之服務為緊密相依的整合方式(流程串
接方式)。我們希望在服務整合時能讓服務相依性
更低，本研究利用事件驅動架構在服務的整合
上，使各服務間的相依性降低，進而建立一更有
彈性之服務整合方式。
關鍵詞：全球資訊網、串接網路服務、網路服務
整合工具、可擴展標記語言、統一模式語言、服
務導向架構、事件驅動架構、無所不在的服務。
二、前言
根據 Internet Systems Consortium, Inc.
(ISC) 的 Internet 調查報告[1], 到 97 年八月
為止，有超過 570,000,000 伺服器主機在
Internet 上 (圖一)。WWW (World Wide Web)
已經變成人類有史以來最大的資訊及服務資
源中心。但是目前大多數的服務都是獨立而
分散的(例如，網路股票資訊與電子郵件服
務)；當我們需要一個在特定股價就能以電子
郵件自動通知我們的服務時，我們就需要有
一整合工具，來串接與整合網路股票資訊及
網路電子郵件服務。
圖一 Host Count of Internet Domain Survey
而現有如此龐大之網路資源如果可以加
以再利用及整合，那所創造出來的將是一個
有無數新服務之遠景，同時對現有網路應用
及使用者將有莫大助益。我們期望藉由此研
究能建立一服務整合之方法與平台。
就現存網際網路服務，我們發現大部分
網際網路服務的提供者，在建構網際網路服
務時，他們通常會以該公司所相關之核心業
務為基礎，來建構他們的網際網路服務。例
如，以電信公司為例，在他們網站上可能會
提供發送簡訊 (SMS) 服務和多媒體簡訊
(MMS) 服務，而這些服務可能不會出現在證
券公司的網站上；相反的，證券公司網站
上，可能會提供即時股票資訊、線上下單
等。以使用者角度而言，這些服務是各自獨
立而不相關的，如果要整合這些各自獨立不
同的系統服務，是需要相當時間與成本的，
而服務整合的困難處， 我們可以分別從服務
提供者和服務使用者二個角度來分析：
第一種從服務提供者角度分析，必須由
不同服務提供者彼此進行後端系統整合，例
如入口網站業者 hinet (www.hinet.net) 或
yahoo (www.yahoo.com.tw) 等，希望在其網
來之行為重新設計，亦即進行行為
細部調整 (如為萃取出之資料命
名)、刪除或新增行為步驟等；
 另一個是邏輯設計，其在整體架構
之角色如圖二之(B)元件，使用者
使用此介面，將由紀錄器紀錄下之
行為加入邏輯設計，而這些設計到
最後都會被儲存為 XML 格式之記
錄。
III. (Replayer)執行引擎：
 執行引擎在我們的設計中必須包含
兩種功能，一是必須執行 (重新產
生 ) 使用者行為，在此功能實作
上，執行引擎模組 (圖二之 (C)
元件) 會從紀錄檔的XML紀錄中讀
入使用者記錄，而後呼叫 JRex
API (D 元件) ，JRex API 則呼
叫 Mozilla GECKO 引擎 (E 元件)
去執行相對應之動作，去和 Web
Server 作溝通，而後再將執行結
果反饋給 JRex，透過 JRex API
再將執行結果傳回執行引擎。
 而執行引擎之另一功能為執行邏輯
元件之功能，我們將邏輯元件功能
實作在該邏輯元件程式功能中，以
便執行各邏輯元件所應負擔之角
色，例如，值的賦予、條件的判
斷、工作起始、結束等，邏輯功能
之迴圈則隱含於流程線設計中。
以下，已開發完成的 Reorder，Designer
與 Replayer Tools，以簡單的股票警示服務整
合為例，展示其成果。
股票警示服務流程如下：
(1). 到雅虎奇摩網查詢遠傳股價。
(2). 如果遠傳股價 37≦ 元則等待 30 秒
後，重新執行步驟 1 杏則執行步驟
3。
(3). 寄發"遠傳股價>37 元"警示郵件，並
結束跳回執行引擎。
使用者利用 WSIT 整合上述服務之流程如下所
述：
1.開啟Reorder 程式，來模組化股票查詢
服務以及發送 Web mail 服務。
(b)Reorder(a) Reorder Control Panel
Select record
file
Open
Recorder
Start
Record
Workbench of Recorder
圖三(A) 模組化股票查詢服務之操作介面
2. 開啟 Designer 並匯入上一步驟所模組
化之股票查詢服務
圖三(B) 匯入模組化股票查詢服務
3. 進一步匯入上一步驟所模組化之發送
Web mail 服務
圖三(C) 匯入模組化 Web mail 服務
4. 將以匯入之服務串接，並加上邏輯控
化、及更有效及彈性之網路服務整合方面進行研
究及實作。以期使服務再利用、服務組合更加有
效率、更容易，同時也使服務更可靠。
I. 服務包裝(Service Wrapper)工具：
圖四 Wrapper 及 Publishing 架構
此工具除可將現有網路模組化外，並能將其包
裝成符合 W3C 的 Web Service 標準介面以供其他
服務來使用。經由此工具將可由現行網路應用資
源轉化出大量之 Web Service 來。其發展概念如
圖四。
Wrapper 工具部分如圖四(A)，主要利用已被
Recorder 模組化之服務模組，將其重新包裝成
Web service 模組。為更清楚說明，我們以
Greatest Common Divisors (GCD)之服務封裝成
Web Service 模組為例，說明如下：
1. 以 Java Servlet 技術來封裝服務流程，圖五
為GCD之 Java的實作。而此 Java Code 以
UML activity diagram 來描述即為圖六中之
GCD 的 Service Module，即為我們所要封
裝之服務流程。服務流程為一 UML activity
diagram 所描述之一網路行為流程；其來源
是使用者用 WSIT Recorder 所產生的。當一
流程行為執行時，有可能需要輸入資料，例
如計算 GCD 時需要輸入兩個參數 a 和 b。
2. 在封裝服務流程中封裝工具必須自動去解譯
流程行為，判斷其輸入及產出。例如 GCD
服務中，a 和 b 號是輸入，而 a 為產出。
3. 最後封裝工具可依照 WSDL specification 定
義之標準自動為此服務產生 WSDL 文件。如
圖七為此 GCD 服務封裝後之 WSDL 文件。
//GCD in Java implementation
public int gcd( int a , int b )
{
while (a != b) {
if (a > b) {
a = a - b;
}
else {
b = b - a;
}
}
return a;
}
圖五 Greatest Common Devisior (GCD) in Java
圖六 Wrapper service module
<?xml version="1.0" encoding="UTF-8"?>
<wsdl:definitions targetNamespace="http://test"
xmlns="http://schemas.xmlsoap.org/wsdl/"
xmlns:apachesoap="http://xml.apache.org/xml-soap"
xmlns:impl="http://test" xmlns:intf="http://test"
xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"
xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/"
xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<wsdl:message name="getGcdResponse">
<wsdl:part name="getGcdReturn" type="xsd:int"/>
</wsdl:message>
<wsdl:message name="getGcdRequest">
<wsdl:part name="a" type="xsd:int"/>
<wsdl:part name="b" type="xsd:int"/>
</wsdl:message>
<wsdl:portType name="GCDPortType">
<wsdl:operation name="getGcd" parameterOrder="a b">
<wsdl:input message="impl:getGcdRequest"
name="getGcdRequest"/>
<wsdl:output message="impl:getGcdResponse"
name="getGcdResponse"/>
</wsdl:operation>
</wsdl:portType>
<wsdl:binding name="GCDSoapBinding"
type="impl:GCDPortType">
<wsdlsoap:binding style="rpc"
transport="http://schemas.xmlsoap.org/soap/http"/>
<wsdl:operation name="getGcd">
<wsdlsoap:operation soapAction=""/>
<wsdl:input name="getGcdRequest">
達成服務的整合。如圖九中參與者有角色如下：
 Requester： 服務請求者。
 Service Logic Handler：服務提供者，提供
特定服務之邏輯控制。
 Stocker Query Service(1)：股票查詢服務
(1) 。
 Stocker Query Service(2)：股票查詢服務
(2) 。
 Web Mail Service(1) ：網路郵件服務(1) 。
 Web Mail Service(2) ：網路郵件服務(2) 。
圖九 EDA 的服務整合
參與者的溝通都是透過 event，當 requester
發出一個服務請求時，其系統動作流程如下：
1. Requester 產生要求服務的 event (E.1)並將
其送入 event pool。
2. Service Logic Handler 對此服務 event 有註
冊 ， 並 且 被 通 知 。 此 時 Service Logic
Handler 服務會啟動，並產生要求特定股票
資訊之 event (E.2) 並送入 event pool。
3. Stocker Query Service(1)接受到 E.2 event
通知後，即會開始始進行股票查詢服務，如
果查詢服務在執行時沒有例外發生，則會將
查詢結果以 event (E.3)方式送入 event
pool。如果有例外發生則會 trigger Stocker
Query Service(2)服務。
4. Service Logic Handler 接受到 E.3 event 通
知，即進行判斷是否應啟動 Web Mail 服
務，或是必須再送出產生要求特定股票資訊
之 event。在此假設必須啟動 Web Mail 服
務，這時 Service Logic Handler 會產生要求
Web Mail event (E.4)服務並將 event 送到
event pool。
5. Web Mail Service(1)收到要求 Web Mail 服
務之 event 並處理 mail 之發送，如果發送
mail 服務在執行時沒有例外發生，則會將服
務完成之訊息以 event (E.5)方式送入 event
pool，如果有例外發生則會 trigger Web Mail
Service(2)服務。
6. Requester 接收 event (E.5)確認服務已經完
成。
以上為以 EDA 方式的作為服務整合之概念推
導。從以上推導我們可以得知這樣的整合模型將
會有幾個特點:
 更有彈性：可將各服務間的相依性減至最
低，由於模組之間溝通皆以 event 為中介，
透過 Event 方式模組間溝通，將不再緊密結
合。發送 event 之發送者不須擔心接收端狀
況，也不須考慮接收者是誰，該 event 發送
出去後，服務即完成。而接收 event 端可能
會有超過一個以上之接收者，將會利用這個
event 去進行本身所需進行之服務。
 服務容錯：單一服務可以由一個以上同性質
服務加以進行。ㄧ個單一服務的失敗並不會
影響服務整合進行。甚至只要仍有ㄧ個服務
可以完成，則整個服務即可被順利完成。
 效率提升：由於單一服務可以由一個以上同
性質服務同時間加以進行，所需之服務可以
由效率最高之服務來完成。這一特性對多變
的網際網路環境可以提升網路服務之品質。
而完成這樣的系統設計，我們亦建立完整的
event 模型，包含：
 Event producing：event 產生方式。
 Event listener：event 註冊模式建立。
 Event notification：event 通知模式建立。
 Event Handler：event 處理模式建立。
 Event lifecycle：event 物件生命週期之定
義。
 Event relation model：event 間之關聯性模
型之定義。
 Event dependence model：event 間相依性
可供推廣之研發成果資料表
■ 可申請專利 □ 可技術移轉 日期：97 年 10 月 31 日
國科會補助計畫
計畫名稱：服務導向之網路服務整合平台設計與實作
計畫主持人：鄭福炯
計畫編號：NSC 96-2221-E-036-035- 學門領域：資訊工
程
技術/創作名稱 一種可以自動將 WWW 服務自動轉換為標準 Web Service 的方法
發明人/創作人 鄭福炯，洪泰昌
技術說明
中文：
WWW 為有史以來最龐大之資訊及服務中心，但現有公開 Web Service 應
用並不多，如果我們可以利用現有龐大 WWW 上服務並將其轉換成公開
Web Service，將可以大量豐富公開 Web Service。因此，本研究發展出
可以方便的將 WWW 上服務模組化並轉換成公開 Web Service 之方法與工
具。使用者可以利用本創作之方法及工具將現有之 WWW 上服務自動轉換
成 標 準 Web Service ， 讓 服 務 從 human-oriented 轉 換 成
machine-oriented，使程式也可存取以前無法存取之服務。
英文：
World Wide Web (WWW) has become the richest resource pool of services
and information in human history. But there are few open and useful Web
Services now. If we can wrap the existing WWW services into standard Web
services, we can enrich the number of open Web Services. Therefore, we
had developed the methodology and tool chains (i.e. WWW service
wrapper) to do so. By using our wrapper, users can modulize and
automatically translate WWW services into Web Services. Our tools
transform the human-oriented services to machine-oriented and
program-accessible services.
可利用之產業
及
可開發之產品
企業之資訊應用：內部資訊系統整合、服務建立發佈。
個人：可利用現有 WWW 服務不必重新再造新的 Web Service。
技術特點
 可以將 WWW 網路服務模組化
 自動將 WWW 網路服務轉換為標準 Web Service
 達成讓以往大量但程式無法存取之 WWW 服務，轉化成可以讓
程式存取之 Web Service 之目的
推廣及運用的價
值
 可利用此創作讓一般使用者或是企業使用者將現有之 WWW 服
務包裝成 Web Service，並且將其公開出來，使其他程式可以
來利用此服務。
 此創作可以讓現有龐大之 WWW 上服務，馬上成為 Web Service
之基礎，解決公開 public Web Service 不足之問題。
正式會議則從 6 月10日開始。大會安排了三個 Keynotes, 六個 Tutorials, 六個Hands-on 
Tutorials, 36 場technical paper sessions 及18場special panel sessions 細內容如下 :
1. 三個 Keynotes:
A. EDA for Digital, Programmable, Multi-Radios: Justin R. Rattner
Intel Senior Fellow, Vice President, Director, Corporate Technology Group
and Chief Technology Officer, Intel Corp.
B. Challenges on Design Complexities for Advanced Wireless Silicon Systems: Sanjay K. Jha
Chief Operating Officer, Qualcomm and President, Qualcomm CDMA Technologies
C. Idea to Implementation: A Different Perspective on System Design: Jack Little
President, CEO, and Co-founder of The Mathworks, Inc.
2. 六個Tutorials:
Tutorial 1: Bridging a Verification Gap: C++ to RTL for Practical Design
Tutorial 2: Programming Massively Parallel Processors: The NVIDIA Experience
Tutorial 3: Robust Analog Mixed-signal Design
Tutorial 4: DFM Revisited: A Comprehensive Analysis of Variability at all Levels of 
Abstraction
Tutorial 5: Low Power Techniques for SoC Design
Tutorial 6: System-level Design for Embedded Systems
3. 六個Hands-on Tutorials:
A. Elevating Confidence in Creation and Re-use of Design IP Through Mutation-based 
Analysis Technology
B. IP Validation for Macro and Embedded SoC
C. Advanced Methodologies in Validating and Integrating High Speed Serial 
D. Interconnects in the Ultra Deep Sub-micron CMOS Era
E. Integration, Test, Repair & Debug of Embedded -memory IP in an SoC
F. What, Why and How: Using a Chip Prediction System to Find the Best IP Solution for 
Your Next Chip
G. Hardened DDR PHY Integration 
