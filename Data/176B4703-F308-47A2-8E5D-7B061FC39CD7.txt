The synthesis result is obtained using Synopsys 
Design Compiler Topographical Technology with TSMC 
0.18um library. 
英文關鍵詞： Computer arithmetic, parallel addition, multi-operand 
operation, squarer., digital design 
 
 2 
 
second group uses two 4-bit binary words to store the 
intermediate sum and carry word, and binary adders to 
accumulate the result. It has one advantage over the 
BCD-CSA approach that the decimal addition can share 
the circuits (binary CSA) with binary addition. However, 
the intermediate result may be greater than 9 and become 
an invalid BCD number. Correction value must be added 
to adjust the result to ensure that two proper BCD 
numbers per digit are produced and sent to the final CPA. 
R. D. Kenney et al. [7] proposed three techniques to 
perform such corrections. The called non-speculation 
technique is a better choice for parallel addition. It uses 
tree of binary CSAs to quickly accumulate all BCD 
operands and performs the correction after the 
accumulation. The approach proposed by L. Dadda [8] 
also uses tree of binary CSAs to accumulate operands 
and uses a CPA to obtain a non-redundant binary value. 
Then BD (Binary2Decimal) cells are used to covert a 
binary value to multi-digit BCD numbers. The third 
group uses signed–digit number or specific BCD code. 
The approaches [9, 10, 11] use two BCD-4221 digits to 
store the intermediate sum. The associate decimal adder 
accepts three or four BCD-4221 operands and reduces 
them into two BCD-4221 words. Decimal multipliers in 
[9, 11] exploit such kind of adders to reduce partial 
products in parallel and achieve significant improvement 
over previous approaches. 
 In this project, we propose a new multi-operand 
parallel decimal adder modified after the non-speculation 
design of [7]. The proposed design uses binary CSAs to 
accumulate BCD-8421 input operands and efficiently 
perform corrections during the accumulation. The latency 
complexity of the decimal adder can be derived 
compared to that of a binary adder with the same number 
of operands. Furthermore, it can be transformed to be a 
combined decimal/binary adder with a little more area. 
Based on the proposed parallel, two parallel decimal 
squarer are designed. The first one produces partial 
products using digit-squarers and the second using 
double-multiplicaiton. The synthesis result obtained 
using Synopsys Design Compiler Topographical 
Technology with TSMC 0.18um library is very close to 
the estimated result. 
The next section introduces a specific set of modules, 
with which the new decimal adder is built. In Section 3, 
the proposed new decimal parallel adder is shown. The 
latency complexity is derived in Section 4. A combined 
decimal/binary adder is proposed in Section 5. Then 
synthesis results are given. The final section draws 
conclusions. 
II. BASIC MODULES 
In the proposed parallel adders, tree of four-bit CSAs is 
used to accumulate the operands. If the leftmost carry 
C[4]=1 holds in some 4-bit CSA, a correction value +6  
must be added to the intermediate result. The key idea 
behind our approach is that we attempt to minimize the 
additional operands resulting from the corrections as well 
as performs these corrections during accumulation.  
Instead of one additional operand per request, we propose 
a set of circuit modules to merge several requests of 
correction to produce one additional operand. The 
following circuit modules are used in our design. 
 
Plus6 
A module accepts one BCD-8421 digit X and 
produces a sum value of X + 6, where the sum is not 
greater than 11112. 
 
MC4 (Merging Four Corrections) 
The module merges four correction values and 
produces at most one bit carry-out to the next more 
significant digit and one even number in the range of 
0~14 left in the current digit. The Fig. 1 shows its 
diagram. Each Ci[4] is the leftmost carry bit from some 
4-bit CSA i. If Ci[4] =1, a correction value of +6 should 
be added. The output function of module MC4 can be 
described as follows: 
123
4
1
2]1[2]2[2]3[]0[10]4[6 ×+×+×+×=×∑
=
SSSHSC
i
i
. (1) 
The number of the four bits (S[3], S[2], S[1], S[0]) forms 
a new operand to be added to the sum. 
 
Fig. 1: The block diagram of an MC4 module. 
 
MC3 (Merging Three Corrections) 
The module merges three correction values and 
produces at most one bit carry-out and one even number 
in the range of 0~8 left in the current digit. The output 
function of module MC3 can be described as follows: 
123
3
1
2]1[2]2[2]3[]0[10]4[6 ×+×+×+×=×∑
=
SSSHSC
i
i
. (2)  
The four bits (S[3], S[2], S[1], S[0]) forms a new 
operand to be added. Since its value is not greater than 
nine, it can be added with six later.  
M3X 
It is special kind of MC3 module. The idea behind the 
design is like conditional adder. If two of the three inputs 
arrive earlier, the circuit in advance produces two 
possible results assuming another input being high or low 
and uses the latest arriving carry to select the output.  
The module is designed to avoid the use of one more 
CSA stage in certain situations. 
 
FCC (Final Correction Circuit) 
In a tree of binary CSAs, the CSA at the final stage 
produces two 4-bit operands, the sum S and carry C.  
The carry C[4] determines whether adding six or not . It 
is propagated to the next more significant digit. 
Furthermore, a carry in, C[0], is fed from the previous 
3
1-bit carry 
in 
(S[3], S[2], S[1])   
1-bit carry out 
(HS[0]) 
MC4 
C1[4] C2[4] C3[4] C4[4] 
S[0] 
 4 
 
NNN
4
3
3
1
4
1
3
2 =××+× . 
Assuming that the MC4 modules takes zero time 
delay, the number of stage p of the proposed [N:2] 
decimal adder can be estimated as follows: 
)
2
(log)
4
3(2 3/4
NpN p ==>×= . 
In reality, to avoid that the MC4 module contributes 
delay to the critical path, the reduction of corrections 
must be delayed for two stages. Hence, the required 
number of stages can be up to p+2.  
    Next, we consider the design which uses only the 
MC3 modules. The number of the second stage of the 
proposed [N:2] decimal adder can be stated as follows:  
NNN
9
7
3
1
3
1
3
2 =××+× .        
Assuming that the MC3 module takes zero time 
delay, the number of stage q of the proposed [N:2] 
decimal adder can be estimated as follows: 
)
2
(log)
9
7(2 7/9
NqN p ==>×= .          
In reality, to avoid that the MC3 module contributes 
delay to the critical path, the reduction of corrections 
must be delayed for one stage. Hence, the required 
number of stages can be up to q+1.  
We compare the three numbers: k, p and q: 
kkp 41.1
3log4log
2log3log ≈−
−×≈ ,              (4) 
.61.1
7log9log
2log3log kkq ≈−
−×≈               (5) 
 
Let us consider N=16, thus k being 5.12. So, p= 5.12 
× 1.41=7.22 ( q =8.24). The estimated number of CSA 
stages is 7.22+2=9.22 (8.24+1=9.24). The estimation is 
very close to the design of Fig. 3. 
 
V. COMBINED DECIMAL/BINARY ADDTION 
The proposed decimal adder can produce binary sum 
with adding very simple circuit. As shown in Fig. 4, an 
AND gate is inserted in between the c[4] and the input of 
a correction module. The 1-bit D/B signal is used to 
select either decimal or binary result.   
Fig. 4: A combined decimal/binary parallel adder. 
VI. SYNTHESIS RESULTS 
We coded the proposed decimal adders with 16 operands 
of 16 digits in Verilog. For comparison, we also coded a 
binary adder based on Wallace tree, the non-speculative 
adder in [7], the adder based mixed binary and BCD 
approach in [8], the one based on BCD-CSA in [12] and 
the delay-optimized BCD-4221 adder in [9], including 
conversion circuits such that it can accept and produce 
BCD-8421 operands. All circuits were synthesized using 
Synopsys Design Compiler Topographical Technology 
with TSMC 0.18um library. All input operands are driven 
by a 1x inverter and all outputs have the load of one 1x 
buffer. The highest optimization priority is set to 
minimize the delay. Table 2 shows the synthesis result. 
The delay and area ratios are given with respect to the 
binary adder. The design based on BCD-CSAs [12] is the 
fastest.  However, it is difficult to reuse the BCD-CSA 
to generate binary sum. Among the designs based on 
binary CSAs, which can be reused to generate binary sum, 
the proposed design has the smallest values of AT and 
AT2. Recall that the delay ratio of the binary adder to the 
proposed decimal adders is estimated as 1.75 in Section 3. 
The synthesis result actually is very close to the 
estimated result. The proposed combined decimal/binary 
adder only needs a little more area than the proposed 
decimal adder. The final row shows the result of a 
combined design in [13]. We do not code this design. The 
ratios are given in [13], which are derived with 
gate-model only, not synthesized by Synopsys Design 
Compiler. 
Based on the proposed parallel, two parallel decimal 
squarer are designed. The first one produces partial 
products using digit-squarers and the second using 
double-multiplicaiton [14]. The synthesis results 
compared to sequential ones are shown in Table 3.  
 
VII.結論與自評 
我們在此計畫中，提出了一種新的多運算元平行加法
氣，並分析其電路效能。然後運用它，完成了平行平
方器，並和先前已發表之循序平方器比較。在產生部
分積方法，採用了兩種型式：一位數平方器和兩倍乘
法器。我們已發表論文如[15]與 [16]。未來我們要進
一步完成平行程法器。 
REFERENCES 
[1] IBM Corporation, “Decimal Arithmetic FAQ,” 
http://speleptrove.com.com/decimal/decifaq1.html, 2007 
[2] M. F. Cowlishaw, “Decimal Floating-Point: Algorism for 
Computers,” Proc. 16th IEEE Symp. Computer Arithmetic 
(ARITH ’03), pp. 104-111, 2003. 
[3] IEEE Standard for Floating-Point Arithmetic, IEEE 
Working Group of the Microprocessor Standards 
Subcommittee, IEEE, 2008. 
[4] M. S. Schmookler and A. Weinberger, “High Speed 
Decimal Addition,” IEEE Trans. Computers, vol. 20, no. 8, 
pp. 862-866, Aug. 1971. 
[5] T. Lang and A. Nannmarelli, “A Radix-10 Combinational 
Multiplier,” Proc. 40th Asilomar Conf. Signals, Systems, and 
Computers, pp. 313-317, 2006. 
[6] M. A. Erle and M. J. Schulte, “Decimal Multiplication Via 
Carry- Save Addition,” Proc. 14th IEEE International 
Conference on Application-Specific Systems, Architectures, 
and Processors, pp. 348–358, 2003. 
[7] R. D. Kenney and M. J. Schulte, “High-Speed Multioperand 
Decimal Adder,” IEEE Trans. on Computers, vol. 54, no. 8, 
 1
國科會補助出席國際會議報告書 
 
姓    名 林寬仁 職稱 副教授 服務單位 輔仁大學電機工程系
中  文 第 7 屆資訊安全與保障國際會議 
會議名稱 
英  文 The 7th International Conference on Information 
Assurance and Security  
會議日期 100 年 11 月 5 日～100 年 11 月 8 日 會議地點 Melaka, Malasia 
一、本次會議主題及討論重點摘錄： 
   本次會議 International Conference on Information Assurance and Security(IAS)是由 Machine 
Intelligence Research Labs 與會議舉辦地點之 Melaka 科技大學所共同籌辦。由 IEEE Systems, 
Man and Cybernetics Society (SMCS) - Spain Chapter 與 Czechoslovakia Chapter 技術主辦，並由
IEEE Systems, Man and Cybernetics Society (SMCS) - TC on Soft Computing 與 TC on Homeland 
Security 技術支援。同時舉辦的會議尚有 11th International Conference on Hybird Intelligent 
Systems (HIS 2011)。 IAS 會議主題包含三大部分：「Information Assurance, Security 
Mechanisms,Methodologies and Models」、「Secure System Architectures and Security Application」
與「Image Engineering, Multimedia Signal Processing and Communication Security」。其中第二主
題包括「Secure Hardware and Smartcards」，我們的論文屬於此部分。雖然大會論文偏向理論與
軟體，我們即希望多瞭解在這兩方面之發展，因此參加一個以資訊安全與保障為主題之會議，
而非以電路設計為主的會議。 
    此次 IAS 會議共收到來自 45 個國家共 141 篇投稿。每篇論文至少有五個 reviewer 審查，
最後共接授了約 60 篇論文，並收錄在 IEET 電子資料庫 (IEL)。此次大會安排相當多場專題
演講，包括日本 Kyushy 大學教授 Hideyuki Takagi 主講 “Interactive Evolutionary Computation: 
Acceleration, Research and Applications for Human Science＂，西班牙 Salamance 大學 Emillo S. 
Corchado 教授主講＂Cyber Secuirty by Means of Unsupervised Learning Models and New 
Challenged＂， Melaka 科技大學 Shahrin Sahib 教授主講”Exposure Index of Internet Users for 
Privacy and Security Assessment＂。而發表的論文則分為三天報告，分為「information hiding & 
multimedia security」、「socio-technical research in information security」、「identification, 
authentication & user privacy」、「secure system architecture & emerging technology」、「wireless 
network security」與「intrusion detection & prevention」等單元。 
  
 3
      
開幕式                                  麻六甲華人商埠 
 
 
 
The next section reviews the principles of the DPA 
attack and introduces the simulation toolkit implemented 
by ourselves. The temporal jitter and its effectiveness 
against DPA-attacks are discussed in Section 3. The 
variable-latency pipeline based on FIFOs is described in 
Section 4. A hardware implementation of the AES 
algorithm is shown in Section 5. The final section draws 
conclusions. 
II. DPA ATTACK AND SIMULATION 
The goal of DAP attacks is to reveal secret key of 
cryptographic devices. The scenario consists of five steps 
[1, 2]:  (1) The first step is to choose an intermediate 
result f(d,k) of cryptographic algorithm executed by the 
device,  where d is a known plaintext or ciphertext value 
and k is a small part of the secret key. (2) The second step is 
to measure the power consumption of the cryptographic 
device when it executes the cryptographic algorithm. Given 
D different data blocks, written as a vector (d1,…, dD), an 
attacker records each power trace for each run and refers to 
the trace corresponding to data block di as a vector (ti,1,…, 
ti,T), where T is the number of sampling points in a trace. A 
power trace matrix P of size D× T is obtained.  (3) The 
third step is to calculate a hypothetical intermediate value 
for every possible choice of the k. We can use a vector 
(k1,…,kK) to represent all possible choices, The calculation 
of function f(d,k) results in a matrix V of size D × K. (4) 
The fourth step is to map the hypothetical intermediate 
values V to a matrix H of hypothetical power consumption 
values computed with a power consumption model. (5) The 
last step is to determine the linear relationship between the 
hypothetical power consumption values H and the 
measured power consumption value P. Different statistical 
analysis techniques can be exploited. In our implementation, 
the correlation coefficient between the columns hi and pj is 
calculated. This will results in a matrix R of size K × T. 
The value ri,j is higher, the better the column hi and pj 
match. The highest value reveals that the key guess ki is 
correct and the value change of f(d,k) should occur at time 
instant tj.  
TDS7254B
Oscilloscope
Power Supply
GPIB port
R
+
-
UUA
CH1 CH2
Trigger Voltage
 
Fig. 1: Experimental setup to emulate DPA attacks.  
We have built an experiment environment as shown in Fig. 
1 to emulate DPA attacks. The unit under attacking (UUA) 
can be a software- or hardware-implemented cryptographic 
algorithm. An 82-ohm resister is inserted between the 
power GND and cryptographic device ground pin. In 
digital oscilloscope, channel 1 is used to trigger the 
recording from an external device and channel 2 to record 
the voltage signal at the 82-ohm resistor.  
III. TEMPORAL JITTER AND DPA-RESISTANCE 
The greater correlation coefficient is, the more probability a 
DPA attack succeeds. Noise and temporal jitter can 
influence the value of the correlation coefficient. Let a 
random variable Pj denote the power consumption of the 
attacked device at position tj and Hi the hypothetical power 
consumption value for the key hypothesis ki. The 
correlation coefficient can be calculated as follows: 
)()(
)()()(
)()(
),(
),(
ji
jiji
ji
ji
ji PVarHVar
PEHEPHE
PVarHVar
PHCov
PH ⋅
⋅−⋅=⋅=ρ
.   
The measured Pj actually contains two components: 
the power consumption Pe,j which is caused by the value 
change of f(d,k) and the noise Pn,j which is statistically 
independent of Pe,j. The correlation ρ(Hi,Pj) can be 
calculated based on the ρ(Hi, Pe,j) and the SNR:   
.
11
),(
)(
)(
1
),(
)()(
)()()(
),( ,
,
,
,
,,
,,
SNR
PH
PVar
PVar
PH
PPVarHVar
PEHEPHE
PH jei
je
jn
je
jnjei
jeijei
ji
+
=
+
=+⋅
⋅−⋅= ρρρ
 
The SNR quantifies how much information is leaked 
at point tj in a power trace. The higher the SNR, the higher 
is the leakage. To make a countermeasure successful, a 
designer should increase the Var(Pn,j) or decrease the 
Var(Pe,j).  
Another strategy to counteract DPA attacks is to make 
the time instant of executing f(d,k) unpredictable, i.e., it can 
be executed at different moments of time in each power 
trace. A probability bˆ  can be used to model the variation 
of the time instant. With probability bˆ it holds that jPˆ = Pj, 
where jPˆ  corresponds to the power consumption of the 
output of f(d,k) at the moment of tj. Furthermore, with 
probability (1- bˆ ) it holds that jPˆ = Pother, where Pother  
corresponds to the power consumption of some other 
operations. The covariance )ˆ,( ji PHCov  can therefore be 
calculated as follows: 
).,()ˆ1()ˆ,(ˆ)ˆ,( otherijiji PHCovbPHCovbPHCov ⋅−+⋅=  
Pj and Pother can be considered to be independent, so the 
second term can be ignored. Therefore, the correlation 
)ˆ,( ji PHρ  can be calculated as follows: 
 
 
Table 1: Schedule table for accessing FIFOs given the 
clock cycles for which the data token will stay at 
FIFO-1, FIFO-2, FIFO-3 and FIFO-4 are 6, 3, 2 and 
1, respectively.  
t FIFO-1 FIFO-2 FIFO-3 FIFO-4 
1 W  W  W  W  
2        R 
3 W   R     
4     W R   
5       W  
6        R 
7 W R    R   
8   W    W  
9  R      R 
10 W  W R     
11     W    
12    R     
13  R   W    
14   W   R   
15       W  
16  R  R  R   
 
Table 2: Equations to determine when to access 
FIFOs, assuming that the number of stages is four, 
the depth of FIFOs is four and the random number is 
16-bit wide. 
  Time instant to access FIFO 
write 
tw(1, 1)=1, tw(1,2)=tw(1,1)+1+RN[3:0], 
tw(1,3)=tw(1,2)+1 +RN[7:4],  
tw(1, 4)=tw(1, 3)+1+RN[11:8] 
FIFO 
-1 
read tr(1, k)= tw(1, k)+RN[15;12], k=1,…, 4
write tw(2, 1)=1, tw(2, k)=tr(1, k)+1, k=2,..,4 FIFO 
-2 read tr(2, k)= tw(2, k)+RN[11;8], k=1,…, 4 
write tw(3, 1)=1, tw(3, k)=tr(2, k)+1, k=2,..,4 FIFO 
-3 read tr(3, k)= tw(3, k)+RN[7:4], k=1,…, 4 
write tw(4, 1)=1, tw(4, k)=tr(3, k)+1, k=2,..,4 FIFO 
-4 read tr(4, k)= tw(4, k)+RN[3:0], k=1,…, 4 
The most crucial part of hardware implementation of 
the AES encryption algorithm is the SubByte operation. The 
SubByte operations is realized with composite-field 
GF((24)2) arithmetic logic [15, 16]. It is partitioned into 
four blocks as shown in Fig. 4. Other three operations are 
in combination with the affine transformation. We 
implement the AES algorithm of 128-bit key operating at 
ECB mode using the pipeline in the Fig. 3. The whole 
design is implemented with four-stage pipeline as shown in 
Fig. 5. The true RNG was implemented using the FIRO 
structure [17]. The round keys are generated on-the-fly by 
hardware. The design was synthesized using Synopsys 
Design Vision in topographical mode with TSMC 0.18 um 
technology. The post-synthesis design was verified by 
NC-Verilog. Simulation waveforms were captured with 
Debussy. Fig. 6 shows the behavior of control signals to 
FIFOs in one round, where the random number is 6321H. 
Fig. 7 shows the behavior for all ten rounds. The pipeline 
clock runs at a period of 6.5ns. The period of round_clock 
corresponds to the pipeline latency of a round. The figure 
shows that they are not fixed. The area is 150% larger than 
a non-protected design. 
VI. CONCLUSION 
Hardware security is crucial to the information security. In 
this paper, we have proposed a design architecture which 
enhances the hardware security against DPA and fault 
attacks. The key idea is to insert FIFOs in between two 
successive pipeline stages and randomly vary the duration 
in which data stay at FIFOs in every pipeline loop. This can 
make the time instant of executing certain operation 
unpredictable. The more timing variation appears, the less 
probability the attack succeeds. The proposed approach 
provides more possible configurations than previous 
approaches as well as it can be realized in both ASIC and 
FPGA implementations. We implemented the required 
controller and data path. Furthermore, the AES algorithm 
was realized with the proposed pipeline of four stages. The 
design was successfully synthesized and verified using 
Synopsys Design Vision in topographical mode with TSMC 
0.18 um technology. 
 
ACKNOWLEDGMENTS 
This work was supported by the National Science Council, 
Taiwan, R.O.C. under grant NSC 100-2221-E-030-020 and 
99-2628-E-030-001. 
REFERENCES 
[1] P. Kocher, J. Jaffe, and B. Jun, “Differential Power Analysis,” 
Advances in Cryptology – CRYPTO ’99, LNCS, vol. 1666, pp. 
388-397, 1999. 
[2] S. Mangard, E. Oswald and T. Popp, Power Analysis Attacks 
Revealing the Secrets of Smart Cards, Springer, 2007. 
[3] K. Tiri, M.  Akmal, and I. Verbauwhede., “A Dynamic and 
Differential CMOS Logic with Signal Independent Power 
 
 
      
Fig. 5: Four-stage pipeline implementation of the AES encryption algorithm. 
 
 
 
Fig. 6: Simulation waveforms of FIFOs’ access control given that the duration of the data stay at FIFO-1, FIFO-2, 
FIFO-3 and FIFO-4 are 6, 3, 2 and 1 clock cycles, respectively.  
 
 
Fig. 7: Ten-round simulation waveforms of the AES encryption algorithm implemented with our proposed pipeline. 
 
100年度專題研究計畫研究成果彙整表 
計畫主持人：林寬仁 計畫編號：100-2221-E-030-020- 
計畫名稱：十進制浮點平方器之硬體設計 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 1 1 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 2 2 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
