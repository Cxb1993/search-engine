 2
貳、英文摘要 
For the computation of complex arithmetic functions, such a sequence of 
multiplication/division and exponential operation, logarithmic number system (LNS) has the 
advantages of high speed and high precision. However, when the word length of LNS arithmetic 
unit is large than 32 bits, the hardware cost of the unit becomes very large for its implementation. 
In this research, we investigate the applicability of dynamic reconfiguration technique to LNS 
implementation, to lessen this large-hardware problem of LNS arithmetic. Three research tasks 
have been implemented: First, we designed a 32-bit LNS arithmetic unit and a 32-bit 
floating-point arithmetic unit, which are connected as co-processor of the Microblaze processor 
of Xilinx SOPC system, through OPB bus. Secondly, we developed a speech recognition system 
on this Xilinx Microblaze SOPC system that allows the operations of floating-point and LNS 
arithmetic. We found that some arithmetic functions of speech recognition can be fastened if they 
are implemented in LNS arithmetic. Finally, we developed the dynamic reconfiguration technique 
on Virtex-II FPGAs through the use of ICAP. However, the reconfiguration time is too long for 
the speech recognition application (about 0.3 second for a 0.4 MB bitstream). We conclude that 
LNS arithmetic can fasten the speed of speech recognition and dynamic reconfigurable 
computing technique can only apply to a coarse-grain computing system. 
 
Keywords: Reconfigurable computing, Exponential and logarithmic functions, Logarithmic 
number system, Floating-point number system, Dynamic partial reconfiguration
 4
integrated circuit)或者是以一些獨立 IC 組成的電路板(board-level design)來設計。這種方法
通常執行速度較快且有效率，但較缺乏彈性。另一種方法則是使用微處理器以軟體的方式
實現計算，優點是非常具有彈性，但執行速度較慢。可重組式計算 (Reconfigurable 
Computing)是介於這兩種方式之間的另一種方法，它可提供具有彈性且有效率的計算。可
重組式計算系統包含有一組陣列式的可重組元件，如FPGA中之Logic Cell，這類可程式化
的元件配合可更改的連線資源，可以動態的或以非動態的方式組合成不同的硬體電路以適
應不同的應用。動態可重組式的架構的優點在於，當不同的硬體需求只有在系統執行期間
(at run-time)才可以被偵測出時，系統的硬體使用效率就可達到最佳化。 
 
1.2. 研究目的 
 本研究的目的即在探討如何以可重組式計算(Reconfigurable Computing)的技術將 LNS
算術單元以動態重組的方式有彈性的與浮點數算術單元並存於嵌入式系統中。當系統所需
之計算較適合以LNS算術實現時，LNS算術單元即可重組出現以執行計算；反之，則以浮
點數算術單元取代之。如此一來，長位元LNS算術單元的高硬體成本即不再成為實際應用
的問題，而一個高計算效率與低硬體成本之可重組式嵌入式處理器將可用來計算日益複雜
的算術運算。我們並且計畫將此一可重組式的單元應用於自動語音辨認系統。我們將研究
如何在 Xilinx Virtex 發展板上設計此一可重組式的 LNS 算術單元，以達到最佳效率的自動
語音辨認系統。 
 
1.3. 研究工作 
 首先，我們將浮點數及對數數字系統之算術單元實現於 Xilinx Virtex-II Multimedia 發
 6
制，即可輕易利用同一份的對數加減法硬體電路來求得 )(log2 BA+ 、 )(log2 BA− 、
)(log2
BA 、 )(log2 B A 、 )(log2
Be 及 ))(ln(log2 B 等六種不同的複雜函數，以逹到硬體共用及
減少成本付出的目的。 
Generator
Function code
Function code
adder
Max
FI vvv =
a
a
a
b
b
multiplier
2ln    
unit     
lexponentia
    2lnxex
unit     
ionnormalizat
1    2lnxe±
unit     
clogarithmi
)1ln(  y+
y multiplier
)2ln ( 1−
Function code
Result
MUX
MUX
MUX
圖一：LNS 加減法器電路架構圖 
3、 單音語音辨認的軟硬體設計 
 此單音語音辨認的演算流程[13]有A/D訊號取樣、去除語音靜音、預強調處理、語音音
框切取、視窗化處理、計算線性預估參數、計算倒頻譜參數、計算轉移導頻譜參數、建立
初始模型、計算狀態觀測機率、找出最大機率值路徑，當機率值路徑收斂時得到該語音的
模型值。以上為語音辨認中訓練的流程。 辨識為對未知語音經過上述流程得到未知語音
的模型值，再與以訓練過的語音模型值作比對，最接近的為辨識的結果。我們採用以隱藏
式馬卡夫為基礎的統計方法辨識，語音樣本取樣頻率為 8Khz，每個取樣點以 16 位元表示，
以 240 個取樣點為一音框，每各音框間重疊 160 取樣點，視窗化處理採用漢明窗處理;13 階
的到頻譜參數和 13 階的轉移倒頻譜參數。辨認數字為 0 到 9。高斯機率密度函數需計算浮
 8
                              
           圖二                                        圖三 
Partially Reconfigurable Module(PRM) : 系統執行期間，更換的模組。 
Partially Reconfigurable Region (PRR) :  PRM download 到 FPGA 的可重組範圍及位置。 
Base Region: 只於初始的時後重組，於系統執行期間將不會被重組。 
4.2 硬體設計流程 
硬體流程是為了產生每個 PRM 的三種類型的位元串流檔。一種為清空 PRR;第二種為
PRM 載入到 PRR;第三種為包含 PRM 的系統初始載入到 FPGA 用的位元串流檔。首先使用
EDK 建構出系統雛型，然後掛載自訂的算術單元到 OPB 上，接著於 EDK 合成以便產生第
一層的 VHDL 硬體描述語言，以及第二層的 base 部分的各個元件的 netlist 檔以及第二層的
自訂算術單元 netlist 檔。由於動態可重組模組與靜態部分的溝通需透過 Bus Macro；因此，
由 EDK 產生的第一層 netlist 及自訂算術單元的 netlist 並不可以直接採用。需要在第一層的
硬體描述語言中宣告及連結 Bus Macro 及其他的一些修改，然後再對這兩類硬體描述語言
再次合成。以上所述的所有全部的 netlist 檔，依其在系統中的層級和功能分別放到目錄結
構的各個目錄中。然後分別在每個目錄下完成 Ngdbuild 或 Implementation 的步驟，個別的
Implementation 流程與一般的流程相同。以下說明流程的主要步驟。 
目錄結構的各個主要目錄的功能描述如下: 
   (一)目錄 XpsPrj : 使用 XPS 建構一系統，於建構系統過程中相關的檔案產生於此目錄
 101
部電路。模組 A、模組 B 和模組 C 以外的其他所有邏輯元件都為最上層的 HDL 所描述，
另外最上層的HDL中還需描述每各模組的PORT寬度和方向。第二層的各個模組的實作即
交給各開發子團隊實現。 
 PRR 的形狀和面積的限制(此限制針對發展版的 FPGA 而言)，寬度必須為整數倍
CLB，即不能佔據部分的 CLB。高度可不為整行 FPGA 高，因為 patch 後的新
Implementation工具會處理模組上下部分的區域使沒有glitchless特性的資源移到別處[15]。 
4.3 軟體設計流程 
 建構系統軟體部分的流程則是可被 EDK 完整支援，只要採用硬體式的 Debug 模組並
與 Microblaze 溝通，而此 Debug 模組藉由 JTAG 介面與 PC 端溝通，這種硬體式 Debug 可
不用將軟體可執行檔與位元串流檔整合。除了多了驅動 Internal Configuration Access Port 
(ICAP)的相關指令外，此系統的軟體部分建構與非動態重組系統的軟體一致。 
 ICAP 提供嵌入式處理器，如 MicroBlaze 或 PowerPC，於 FPGA 已經完成初始規劃
後，於 FPGA 系統執行期間，能夠去控制 FPGA 的再次重組過程及寫入和讀取
Configuration Memory 中的重組位元串流檔。Microblaze 使用 ICAP 元件及其驅動程式和相
關的函式，讀取外部記憶體中的位元串流檔，然後完成 FPGA 的部分重組。 
 
4.4  實驗結果 
因為 LNS 算術單元所佔面積太大，在製作其重組硬體模組(PRM)時產生繞線問題，無法
解決。我們改以浮點數算術單元以及定點數(Fix-point, FXP)算術單元(包含乘法及加法運算)
來從事重組電路的實驗。實驗結果(表一)顯示重組一個 PRM(約 0.4MBytes)所需時間甚長。 
 
 121
digital filters,” IEEE Transactions on Acoustics, Speech, and Signal Processing, vol. 
ASSP-33, no. 3, pp. 718-719, June 1985. 
[3] Hartmut Henkel, “Improved addition for logarithmic number system,” IEEE Transactions on 
Acoustics, Speech, and Signal Processing, vol. 37, no. 2, pp. 301-303, Feb. 1989. 
 [4] J. N. Coleman and E. I. Chester, “A 32-bit logarithmic arithmetic unit and its performance 
compared to floating-point,” Proceedings of 14th IEEE Symposium on Computer Arithmetic, 
Australia, pp. 142-151, 1999. 
[5] Chichyang Chen, Rui-Lin Chen, and Chih-Huan Yang, “Pipelined computation of very large 
word-length LNS addition/subtraction with polynomial hardware cost,” IEEE Transactions 
on Computers, vol. 49, no. 7, July 2000, pp.716-726. 
[6] Chichyang Chen, Rui-Lin Chen, “Performance-improved computation of very large 
word-length LNS addition/subtraction using signed-digit arithmetic,” Proceedings of IEEE 
International Conference on Application-Specific Systems, Architectures, and Processors, 
June 24-26 2003, pp. 326 -336. 
[7] Fang-shi Lai and Ching-Farn Eric Wu, “A hybrid number system processor with geometric 
and complex arithmetic capabilities,” IEEE Transactions on Computers, vol. 40, no. 8, pp. 
952-962, Aug. 1991. 
[8] Katherine Compton, ”Reconfigurable Computing: A Survey of Systems and Software”, ACM 
Survey, June 2002 
 [9] Albert A. Liddicoat and Michael J. Flynn, “High-Performance Floating Point Divide,” Proc. 
Euromicro Symposium on Digital Systems, pp. 354-361, 2001. 
