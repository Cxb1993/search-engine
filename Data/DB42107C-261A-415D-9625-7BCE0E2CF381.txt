 2
framework [11]，在 i* framework 中，
strategic dependency (SD) 及 strategic 
rationale (SR) 是其 2 個主要的塑膜元件，
其中 SD 是用來表示在 actor 之間的相依關
係，而 SR 則是用來描述 stakeholder 的興
趣和所關係的事及它們如何被系統及環境
的組態處理。Tropos 使用 i* framework 來
發 展 一 個 針 對 agent software 的
requirements-driven 需 求 開 發 方 法 論 
[12]，這個方法論包括幾個階段：early 
requirement 、 late requirements 、
architectural、detailed design。相同地，
Formal Tropos 採用 i* framework 的符號來
當成其 modeling 架構 [13]，除此之外，
Formal Tropos 也使用 temporal logic [14]來
當其正式的規範語言，而 Formal Tropos 來
執行正式的驗證是使用NuSMV這個model 
checker [15]。 
 
四、研究方法 
 在本研究中，我們首先定義了幾種不
同的角色及角色關係，經由定義不同的角
色關係，我們可以設計用以滿足使用者在
完成其工作的協同共作的機制。同時，一
個協同共作的平台必須提供一些協同共作
的服務來讓使用者發展其軟體需求；我們
另外也發展了幾個有用的協同共作樣式，
事實上，大部分主要的協同共作行為都是
遵循這些協同共作樣式的，在所有的
stakeholder 都完成其需求的撰寫之後，將
會有一個整合的需求規範產生。 
 首先，我們將角色分成二類，一類為
客戶端的角色，另一類則為開發端所屬的
角色，不同的角色有其不同的任務，以下
為本研究所定義之所有角色及其說明： 
z Client representative：與 development 
representative 溝通討論以決定將參與
軟體需求開發的人員有那些。 
z Stakeholder：為所開發之軟體系統主
要的使用者。各種不同的使用者經由
協同共作的平台撰寫其各自的需求，
同時其他的角色可以對其所撰寫之需
求進行建議及註解，接著使用者可以
依其建議而將其需求進行修改。 
z Client manager：主要是和 stakeholder
及 development manager 進行溝通。除
此之外，client manager 也負責對所有
stakeholder 所撰寫之需求進行管理及
監控。 
z Development representative：與 client 
representative 進行溝通討論以決定將
參與軟體需求開發的人員有那些。 
z Analyst：除了負責系統分析之外，同
時 也 透 過 協 同 共 作 的 方 式 幫 助
stakeholder 撰寫其真正的需求。 
z Development manager ： 主 要 是 和
analyst 及 client manager 進行溝通。除
此之外，development manager 也負責
整合之需求規範的產生。 
我們除了定義上述之六種不同的角色
外，我們也定義了六種不同的角色關係，
以下為本成果所定義之角色關係及其說
明： 
z Representative-representative 
negotiation role relationship：這個角
色關係的形成發生在角色指派的階
段。在這個階段至少各有一個 client 
representative 及 development 
representative 進行討論及溝通以決定
在進行需求開發時的角色扮演。其角
色關係圖如下圖所示。 
 
z Stakeholder-analyst collaborative role 
relationship：在客戶端有各種不同的
stakeholder 存在，不同的 stakeholder
經由協同共作的平台撰寫其各自的需
求，接著 analyst 可以對 stakeholder 所
撰 寫 之 需 求 進 行 建 議 以 輔 助
stakeholder 完成更適合及確實的需求
撰寫。其角色關係圖如下圖所示。 
 
z (Client manager / stakeholder)- 
development manager role 
relationship：這個角色關係包括了三
種不同的角色。主要是 client manager
與 development manager 進行溝通，
Stakeholder Analyst 
Client  
representative 
Development 
representative 
 4
 
Future：這個協同共作樣式的所有參與人
都是相同角色； 
Detailed description：事實上，這個協同
共作樣式主要是考量 stakeholder，某個
stakeholder 寫下其需求時，另一個
stakeholder 可以檢視其需求。 
 
Single central collaboration： 
Name：Single central collaboration； 
Short description：有一個 manager 來當
管理者的角色，這個 manager 是所有其
他角色的橋接者； 
Roles：角色包括了 stakeholder、client 
manager、analyst、development manager； 
Collaborative diagram： 
 
Future：有一個 manager 來當管理者的角
色； 
Detailed description：根據 manager 的角
色來分有兩種協同共作樣式，當 client 
manager 來扮演管理者角色時，其他角色
為 stakeholder ， 如 果 是 development 
manager 來扮演管理者時，其他人則為
analyst。 
 
Multi central collaboration： 
Name：Multi central collaboration； 
Short description：這個協同共作樣式包
括了兩種 manager； 
Roles ： 包 括 了 stakeholder 、 client 
manager、analyst、development manager； 
Collaborative diagram： 
 
Future：這個協同共作樣式發生在需求開
發的後期； 
Detailed description：這個協同共作樣式
主要針對 client manager 和 development 
manager 之間的溝通，除此之外，client 
manager 會和 stakeholder 進行溝通互
動，而 development manager 則是會和
analyst 互動。 
 
最後，本研究針對協同共作的特色及軟
體需求開發的目的發展出一個協同共作的
軟體需求開發流程，在這個開發流程中，
包括了 5 個活動及一些相關的文件產出
物。完整的協合共作需求發展流程如【圖
一】所示，而每一個活動之描述如下： 
1. Role assignment activity：這個活動主
要的任何是進行協同共作軟體需求開
發的事前準備工作，也就是 client 
manager及 development manager先進行
溝通及討論以決定參與的角色人員有
那些。 
2. Role assignment validation activity：在
完成角色指派時，必須要執行角色指派
的確認及檢查以決定先前所做的角色
指派是否適當，如果有一些角色衝突發
生或角色指派不適當時，也須回到上一
個活動，相反地，如果沒有發生角色不
適當指派時便進入到下一個活動
Stakeholder authoring activity。 
3. Stakeholder authoring activity ：
Stakeholder 開始撰寫其各自的需求，將
會產生 initial requirements 的產出物，
而這個產出物將當下一次再度進入此
活動時的輸入。 
4. Analyst commenting activity：這個活動
要求 stakeholder 所撰寫的需求當輸
入，因此 analyst 可以針對 stakeholder
所撰寫之需求進行建議及註解。如果需
求當未完成，會再度返回上一個活動
stakeholder authoring activity，但如果所
有 stakeholder 已完成需求的撰寫則會
進入要下一個活動  SRS generation 
activity。 
5. SRS generation activity：執行最後的整
合性的需求文件規範的製作。 
 6
Conference, pages 127–137, 2003. 
[11] E. Yu. Towards modelling and 
reasoning support for early-phase 
requirements engineering. In Proceedings 
of the 3rd IEEE International Symposium 
on Requirements Engineering, pages 
226–235, 1997. 
[12] P. Bresciani, A. Perini, P. Giorgini, F. 
Giunchiglia, and J. Mylopoulos. Tropos: 
An agent-oriented software development 
methodology. Journal of Autonomous 
Agents and Multi-Agent Systems, 
8(3):203–236, 2004. 
[13] A. Fuxman, M. Pistore, J. Mylopoulos, 
and P. Traverso. Model checking early 
requirements specifications in tropos. In 
Proceedings of the Fifth IEEE 
International Symposium on 
Requirements Engineering, pages 
174–181, 2001. 
[14] Z. Manna and A. Pnueli. The Temporal 
Logic of Reactive and Concurrent 
Systems: Specification. Springer-Verlag, 
1992. 
[15] A. Cimatti, E. M. Clarke, E. 
Giunchiglia, F. Giunchiglia, M. Pistore, 
M. Roveri, R. Sebastiani, and A. 
Tacchella. Nusmv 2: An opensource tool 
for symbolic model checking. In 
Proceedings of International Conference 
on Computer-Aided Verification, 2002. 
[16] C.-Y. Tsai and C.-H. Huang. A 
multi-role collaborative method and 
platform for developing software 
requirements. In Proceedings of The 2006 
International Conference on Software 
Engineering Research&Practice and 
Conference on Programming 
Language&Compilers, volume 1, pages 
274–280, 2006. 
 
