Intrusion Detection and Identification System Using Data Mining and Forensic Techniques 2 
 2
行政院國家科學委員會專題研究計畫成果報告 
以資料探勘與 Forensic 技術研製ㄧ個身份辨認與即時偵
測入侵行為之系統 
Intrusion Detection and Identification System Using Data Mining and 
Forensic Technique 
計畫編號：NSC 97－2221－E－029－009－ 
執行期限：九十七年八月一日至九十八年七月三十一日 
主持人：呂芳懌  副教授  東海大學資訊工程與科學系 
共同主持人： 無 
計畫參與人員：李志揚 黃耀田 陳永倫 趙梗延 黃宏瑋  
邱炫又 呂佩勳 梁國基 
東海大學資訊工程與科學系 
 
Abstract. Presently, most computers authenticate a user’s 
ID and password before the user can log in. However, if 
the two items are known to hackers, there is a risk of 
security breach. In this paper, we propose a system, 
named the Intrusion Detection and Identification System 
(IDIS), which builds a profile for each user in an intranet 
to keep track of his/her usage habits as forensic features. 
In this way the IDIS can identify who the underlying user 
in the intranet is by comparing the user’s current inputs 
with the features collected in the profiles established for 
all users. User habits are extracted from their usage 
histories by using data mining techniques. When an 
attack is discovered, the IDIS switches the user’s inputs 
to a honey pot not only to isolate the user from the 
underlying system, but also to collect many more attack 
features by using the honey pot to enrich attack patterns 
which will improve performance of future detection. Our 
experimental results show that the recognition accuracy 
of students in the computer science department of our 
university is nearly 99.16% since they are sophisticated 
users. The recognition accuracy of those other than 
computer science students is 94.43%. 
Key words:  Forensic Features, Intrusion 
Detection, Data Mining, Identifying Users, Attack 
Patterns 
1   Introduction 
Being widely used and quickly developed in recent 
years, network technologies have provided us with 
new life and shopping experiences, particularly in the 
fields of e-business, e-learning and e-money. But 
along with network development, there has come a 
huge increase in network crime. It not only greatly 
affects our everyday life, which relies heavily on 
networks and Internet technologies, but also damages 
computer systems that serve our daily activities, 
including business, learning, entertainment and so on. 
Forty million user files of MasterCard and VISA 
were exposed in 2005 when the company cooperating 
with CardSystem Solutions was hacked [1, 2]. Many 
people were forced to renew their credit cards to 
avoid any financial loss. This event shows the 
importance of network security. Besides, internal 
hacking is difficult to detect because firewalls and 
IDSs usually only defend against outside attacks. 
Currently, many systems can identify who the 
user logging into a system is by deploying 
biotechnical verifications [3-9]. Most current 
computers check UID and password as an 
authentication. But hackers may install Trojans to 
pilfer victims' security patterns, or issue a large scale 
of trials with the assistance of a dictionary to access 
Intrusion Detection and Identification System Using Data Mining and Forensic Techniques 4 
 4
3.1   Command Monitor 
As an extended portion of an operating system, the 
command monitor comprises an input interceptor and 
system call filter. It records sensitive system calls, 
which are defined as system calls that may change 
system settings (e.g., kill process and close service) 
and access sensitive data (e.g., open a file that has 
system attributes), in a table named a sensitive call 
table. When a user submits a command, at least one 
interrupt for receiving and processing the command 
will be generated. The system kernel on accepting the 
interrupt or the first interrupt will notify the input 
interceptor, a subsystem that intercepts user 
commands, to receive the command and pass it to the 
shell (command interpreter). A system call generated 
by the shell in executing a command is compared 
with a sensitive call table. Once matched, the system 
call will be transferred to a system call filter to check 
whether the call is safe or not based on the safety 
level of the call and the access limitation of the user. 
Unsafe system calls will be retained for further 
analysis. Safe ones will be sent to the system kernel 
to perform their corresponding service. 
In fact, many user operations, including mouse 
movement and key press, will generate interrupts. 
Our goal is to extract the characteristics of user 
inputs. Therefore, only commands are addressed in 
this research so as to simplify the scope. 
Besides, we divide users into groups according to 
their occupations. Each group G has its 
corresponding inhibited commands, named a 
class-limited command list (G), e.g., an unauthorized 
office receptionist should not submit network 
administrating commands [18]. 
user C-sequence + discrimination 
score
C-sequence + 
appearance 
count
Log file Habit file User profile
commands
 
Fig. 1. Control flow of the generation of a user profile 
3.2   Mining Server 
A mining server extracts commands that a user has 
habitually used from his/her log file, identifies 
C-sequences, counts the times that a C-sequence 
appears in the log file, and stores the result in the 
user's habit file, in which a C-sequence is followed 
by its appearance count. The user's habit file is then 
compared with all others’ habit files in the underlying 
system to identify the user- specific C-sequences and 
C-sequences that are commonly used by all or most 
users. After that, a C-sequence’s discrimination 
score, used to identify whether the probable user who 
submits the C-sequence is among the users of the 
system, is calculated to generate the user’s profile 
[19, 20], which is a copy of his/her habit file, but a 
C-sequence’s appearance count is replaced by its 
discrimination score. Fig. 1 illustrates the control 
flow. The way to calculate a discrimination score will 
be described later.  
3.2.1 Mining User Habits and Attack Patterns 
A log file consists of many sessions. Each comprises 
commands a user has submitted within the period of 
time between his/her login and the corresponding 
logout. Given a user’s log file, the IDIS processes the 
commands with a size 10 sliding window, named a 
Log-sliding window (Log-window), to partition the 
commands along their submitted sequence into 
k-grams where k is the number of consecutive 
commands, k =2, 3, 4....10. The reader may ask why 
the window size is 10. The reason is that according to 
our data the longest user habit we collected in this 
research was 6 commands, and the longest command 
sequence, e.g., L, that contains a user habit, e.g., H, 
constrained on first(L)=first(H) and last(L)=last(H) 
was 10 commands where first(X) and last(X) 
respectively represent the first and last commands of 
a sequence of commands X where X=L or H.  In 
addition, another sliding window of 10 commands, 
named a Compared-sliding window (Com-window), 
is deployed on another concerned session. This time, 
k’ consecutive commands, preserving their submitted 
sequence, are extracted from a Com-window 
generating a total of (10 – k’ + 1) k’-grams, k’=2, 3, 
4,...10. The mining server compares each of 
10
2
(10 1)
K
k
=
− +∑  k-grams with 10
' 2
(10 ' 1)
K
k
=
− +∑ k’-grams 
by using the longest common sequence algorithm 
which can reveal the similarity between two strings 
by skipping noises. After that, the Com-window 
shifts one command right. The procedure is repeated 
until the last session of the log file is involved. Then 
the Log-window shifts one input command right. The 
whole procedure is repeated until the last ten or all (if 
less than ten) commands of the last second session 
are encountered by the Log-window.  
Here is an example. Assume that a log file has r 
sessions. Each of the first r-1 sessions, e.g., session x, 
x=1,2,…r-1, is compared with each of its following 
sessions (i.e., sessions x+1 to r), denoted by session y. 
That is, a total of ( 1) / 2r r − session comparisons are 
performed. During the comparison of sessions x and 
y, each of the |session x|-9 Log-windows will be 
compared with each of the |session y|-9 
Com-windows where |session u| is the number of 
commands session u has, and u=x or y. Hence, a total 
Intrusion Detection and Identification System Using Data Mining and Forensic Techniques 6 
 6
information retrieval domain, e.g., to calculate a 
weight for a C-sequence. Given a set of user habit 
files 1 2{ , ,... }ND UP UP UP= where N is the number 
of users (also, number of habit files) in an intranet, 
let 1 2{ , ,... }kT CS CS CS= be the set of C-sequences 
retrieved from D, and 
1 2{ ' , ' , ... ' }i MiD UP UP UP= the set of habit files 
that contain iCS , iCS T∈ . The weight Wij of CSi in 
UPj is defined as  
( )
( )
ij
i         
ij
0.5logsf
  i=1,2,3...M, j=1,2,3...N [21]
log N 1sf 0.5 1.5
i
ij
j
N
MW ns
AVG ns
+⎛ ⎞⎜ ⎟⎝ ⎠= × ++ +
(2) 
where sfij is the appearance count of CSi in UPj, nsj 
the total number of C-sequences in UPj, AVG(ns) the 
average number of C-sequences an element of D has, 
and log((N+0.5)/Mi)/log(N+1) is the ICPF (inverse 
characteristics profile frequency) [21]. Given an 
unknown user x’s current input commands CMDs (1
≦x≦N), the similarity score between CMDs and 
UPj is defined as 
1
p
xj ij
i
SimS W
=
= ∑  where p is the 
number of C-sequences appearing in both the CMDs 
and UPj. The higher a similarity score, the higher 
probability the user is the person who submits these 
input commands. 
3.3 Detection Server 
As stated above, attackers' common behaviors are 
represented by a reverse tree, named common reverse 
tree. Fig. 5 gives an example. Nodes of the first level, 
including format, del and reboot, are the last 
commands of attackers' common behaviors. All 
hacker-specific attack patterns are also organized in a 
reverse tree, denoted by specific reverse tree, in 
which a leaf node is accompanied by the 
corresponding hacker’s ID. A monitored command 
list consists of two lists, a common monitored 
command list and a specific monitored command list, 
which respectively comprise all commands of the 
first levels of the common and specific reverse trees.  
format
del
reboot
log
cd
attrib
hold telnet
dir
cat
su
su
dir pop
rootCd  format
Pop  dir  format
Dir  log  attrib  del
Cat  telnet  hold  del
Su  hold  del
Su  del
Su  reboot  
(A) Attack patterns  (B) The corresponding common 
reverse tree 
Fig. 5. Representation of attackers' common behaviors 
Assume that a user has entered m commands {C1, 
C2,…Cm} after his/her login where Ci is submitted 
prior to Ci+1, i = 1, 2, … , m-1. To detect intrusion 
online, the underlying input command Ci, 1≦i≦m, 
is compared with the common monitored command 
list first. If they match, a modified deep-first search 
traversal algorithm will start traversing the sub-tree 
of the common reverse tree which is rooted at Ci to 
determine whether the user’s inputs, Cj to Ci-1, j = 1, 
2,….or i-2, in the reverse order of their arrival can 
finally reach a leaf node or not.  
In this algorithm, when one input command Cj 
matches node Nk, a node at level k, in the common 
reverse tree, and Cj-q, q = 1, 2, …, or j-1, with the 
smallest q (if there are several such Cj-q) also 
matches one of Nk’s immediate child nodes, e.g., 
Nk+1, then let Cj = Cj-q (i.e., skip q-1 consecutive 
noisy input commands) and try to find another Cj-q 
that matches one of Nk+1’s immediate child nodes. 
Each time when no such Cj-q can lead the algorithm 
to arrive at a leaf, the algorithm backtracks to the last 
second matched node, e.g., Nk (note the last matched 
one is Nk+1), and tries to find Cj-q’ that matches 
Nk’s other immediate child where Cj-q’ is located 
between C1 and Cj-q (since on the last match on Nk, 
the smallest q is chosen as the next command that 
matches Nk+1, therefore, it should be that q’≧q), 
and q’ is the smallest integer if several q’s exist. 
When one is found (at level k+1), the algorithm looks 
for a matched node at level k+2. The procedure is 
repeated until no such Cj-q can match Nk’s 
immediate child or the algorithm reaches a leaf node.  
The latter is considered as an attack. The detection 
server replies to the command monitor with an 
“unsafe” message. The former will trigger the IDIS 
to perform the algorithm again but, this time, on the 
specific reverse tree instead of on the common 
reverse tree to check whether there is a 
hacker-specific attack or not. If yes, the detection 
server replies with an “unsafe” message accompanied 
by the hacker’s ID; otherwise, it sends a “safe” 
message to the command monitor. 
3.4 Attack Types 
In this study, there are three types of intrusions. Type 
0 is defined as the situation where a user of a specific 
group submits a command that the group members 
are prohibited from using. Type I attack is an attack 
that intrudes into a system using a sensitive 
Intrusion Detection and Identification System Using Data Mining and Forensic Techniques 8 
 8
data in a honey pot with a file extension, e.g., .susp, 
and redo all operations if necessary, e.g., after the 
updated files and data have been authenticated by the 
system manager. If no one complains that his/her 
operations have been ignored, the saved files and 
data will be deleted after a pre-defined period of 
time. 
true
false
Y
N
Y
Try to access file  F
F exists in 
virtual file table
F.uds exists
Deletion flag Access contents from ram disk and return
Load F.uds to ram disk
Load F to ram Record F in the virtual file table
Return “File not found＂
N
 
Fig. 6. File accessing flow in a honey pot 
3.5.2 System Kernel 
In a single-user multi-tasking system, e.g., 
MS-Windows operating system, only the disk system 
needs to be protected. All modifications to ram disk 
performed by hackers will disappear after system 
shutdown. The system kernel and settings remain in 
the same state as at the time point when the command 
monitor switched the hacker’s inputs to the honey 
pot. Rebooting can recover them. 
In a multi-user multi-tasking system, both disk and 
kernel need to be protected. There are two ways to 
implement a honey pot as a multi-user multi-tasking 
system. In the first approach, an extra machine such 
as a mirror is required. All user operations, including 
submitting and executing commands, key strikes and 
mouse moving and clicking, are sent to both the 
mirror and the protected system, but responses 
generated by the mirror are suppressed. When an 
attack is discovered, the hacker’s inputs are 
transferred to the honey pot (i.e., the mirror) only, not 
to the protected system. System responses now come 
from the honey pot. The advantage is that normally 
the honey pot is an online system, and the time 
required to switch an attacker from the protected 
system to the mirror is almost zero. Attackers will 
unsuspectingly face the honey pot. The disadvantage 
is that an extra machine is required. 
In the second approach, the honey pot is 
implemented as a virtual machine platform, which 
tracks user operations normally. When the command 
monitor discovers that there is an attack, it notifies 
the honey pot to build a virtual machine for each 
hacker, transfers memory image generated for the 
hacker to the virtual machine, and then redirects the 
hacker’s inputs to the virtual machine. The 
disadvantage is that it requires transferring memory 
image to the honey pot, causing extra network flow, 
e.g., for a 32-bits system, probably up to 4 GB data 
have to be transferred. An attacker may issue several 
attacks at the same time to generate a mass of inner 
network flow (i.e., a DoS/DDoS attack) which will 
paralyze the system, thus preventing it from 
performing normal services. 
Fig. 7 shows our framework, mirror twin, which is a 
compromise between the two approaches, and in 
which the mirror is a virtual machine platform. Both 
the honey pot and the backup system of the protected 
system are virtual systems running on the platform. 
The mirror mirrors the protected system like the first 
approach stated above.  
When an attack is discovered, the command monitor 
running on the mirror creates a virtual machine for 
the hacker and moves his/her memory image to the 
virtual machine. All the hacker’s inputs are redirected 
to the virtual machine to continue serving the hacker. 
The hacker now enters a honey-pot mode from a 
protection mode. Meanwhile, the command monitor 
in the protected system kills the process originally 
generated for serving the hacker and notifies the 
router (firewall) to stop routing the hacker’s input 
commands to the protected system. Fortunately, due 
to limitation of memory by the operating system (i.e., 
virtual memory), the size of a memory image is 
seldom huge. However, once too much network flow 
is issued between the protected system and the 
mirror, the firewall will disconnect the sessions 
established for the hackers to avoid an internal 
DoS/DDoS attack. 
Memory image
Internet Router/Firewall
The protected system
The mirror (virtual machine platform)
Honey pot 1 
(virtual 
machine)
...Honey pot 2 (virtual 
machine) 
Honey pot n 
(virtual 
machine) 
Backup 
system virtual 
machine
In honey pot mode, hacker＇s 
inputs are not sent to the 
protected system
 
Fig. 7. Framework of a mirror twin 
4. Experiments 
We collected 655 students' log files between October 
1, 2006 and January 31, 2007 from the Tunghai 
University Computer Center as the experimental data. 
None of the students was told that his/her computer 
habits would be observed. Hence, they all acted 
normally. Among the students, 424 were computer 
science students, and 231 were in the Management 
and Social Science colleges. Three characteristics of 
user habits were examined, including commands that 
were frequently used, the order in which they were 
Intrusion Detection and Identification System Using Data Mining and Forensic Techniques 10 
 10
randomly inserting Ci, i = 1, 2, 3, …x-1, into any 
position among the elements of R under the 
constraint that Ci should be prior to Ci+1. After 
insertion, Ci might be adjacent to Ci+1 or separated 
by several commands, and now the location of Cx 
became q+x-1. For example, #793(11) in the first 
record of Table 3 indicates that the last command of 
attack pattern #793 (cd cd ls AC2), x=|#793| = 4, and 
is inserted into the 8th (i.e., qth) position of log 
01982. Original C’8 becomes C’9. Commands cd, cd 
and ls are mixed with those in {C’2, C’3, … , C’7}. 
After that, Cx becomes the 11th command. 
Nevertheless, the commands coming from both #793 
and R individually follow their original submitted 
sequence.  
Table 3. Patterns obtained by mixing log contents with a 
single command attack pattern and the detection 
results 
 
 Mixed patterns Detected attack patterns 
User 
log 
file 
No. 
of  
inser
ted 
patte
rns 
ID of an inserted 
pattern (inserted 
location) 
No. 
of 
detect
ed 
patter
ns 
ID of a detected 
pattern (detected 
location) 
log019
82 
2 #632(4), 
#793(11) 
2 #2000(4), 
#1657(11) 
log028
64 
19 #7(5), 
#1603(12), … 
19 #1(5), #100(12), 
#2001(20), 
log028
71 
9 #1515(6), 
#1845(15), … 
9 #1991(6), 
#2006(15), … 
… … … … … 
The field “ID of a detected pattern (detected 
location)” in Table 3 represents the ID of a detected 
pattern followed by a detected location, which is the 
position of the pattern’s last command. For example, 
#1657(11) in the first record shows that attack pattern 
#1657 (ls AC2), which ended at position 11 of 
log01982, was detected. Basically, a shorter pattern 
may be contained in a longer one. Hence, the ID of a 
detected pattern may be different from that of the one 
inserted since #1657 is a proper subset of #793. From 
Table 3, we can conclude that the number of patterns 
inserted is equal to that of those discovered, i.e., 
precision = recall = 100%. The detection process 
costs 326 ms, which is short enough to detect attacks 
in real-time, i.e., the two reverse trees can effectively 
help users to identify hacking behaviors. 
 
A1_Stage_1 A1_Stage_2 A1_Stage_3 
A2_Stage_1 A2_Stage_2 
A3_Stage_1 A3_Stage_2 A3_Stage_3 A3_Stage_4 
… 
Fig. 8. A part of a log file consisting of multi-stage attack 
patterns. Each line has several stages. Each stage is 
a user habit ended by a single command attack 
pattern. 
Table 4. Patterns obtained by mixing log contents and 
multi-stage attack patterns, and the detection 
results 
 Mixed patterns Detected attack patterns  
User 
log 
file 
No. 
of  
inser
ted 
patte
rns 
ID of an inserted 
pattern (inserted 
location) 
No. 
of 
detect
ed 
patter
ns 
ID of a detected 
pattern (detected 
location) 
log128
15 
7 #1(4), #3(13), 
#4(20)… 
7 #1(4), #3(13) , 
#4(20)…. 
log128
26 
25 #1(7), #6(16), 
#8(26)… 
25 #1(7), #6(16), 
#8(26),… 
log128
38 
7 #6(6), #9(15), 
#2(22)… 
7 #6(6), #9(15), 
#2(22)… 
… … … … … 
4.3 Detecting a Multi-stage Attack Pattern 
Fig. 8 shows a log file consisting of multi-stage 
attack patterns. Each line has several stages. Each 
stage in turn is a user habit ended by a single 
command attack pattern. For detecting multi-stage 
attack patterns, again, let a = b = 15 given nineteen 
stages, S1 to S19, from which 85 different attack 
commands are retrieved, 
i.e., 19
1
| { | , }| 85r r r i
i
C C is a command C S
=
∈ =∪ where
{ | , }p p p iC C is a command C S∈ ∩
{ | , }q q q jC C is a command C S φ∈ = , i, j = 1, 2, …19, 
and i ≠ j. That means, S1 to S19 are 
non-cross-reference patterns so that all the IDs of 
detected patterns, as shown in Table 4, are exactly 
the same as those of the inserted ones. The two 
reverse trees are both six levels in height, and 
108,888 commands extracted from 655 user log files 
were compared, costing 469 ms which is also short 
enough to discover attacks in real time and which is 
also longer than that for detecting single command 
attack patterns since reverse trees are higher and tree 
traversal time, of course, is longer. Also, the 
precision = recall = 1. 
Intrusion Detection and Identification System Using Data Mining and Forensic Techniques 12 
 12
[16] M. Chau, J.J. Xu, and H. Chen, “Extracting 
Meaningful Entities from Police Narrative Reports,” 
National Conference on Digital Government Research, 
2002, pp. 271-275. 
[17] J.B.D. Cabrera, L. Lewis, and R.K. Mehra, “Detection 
and Classification of Intrusion and Faults Using 
Sentences of System Calls,” SIGMOD Record, vol.30, 
no.4, 2001, pp.25-34. 
[18] F. Dridi, B. Muschall, and G. Pernul, “Administration 
of an RBAC System," International Conference on 
System Sciences, 2004, pp.1-6. 
http://csdl2.computer.org/comp/proceedings/hicss/2004
/2056/07/205670187b.pdf 
[19] Y. Okazaki, I. Sato, and S. Goto, “A New Intrusion 
Detection Method Based on Process Profiling,” 
Symposium on Applications and the Internet, Feb. 2002, 
pp. 82 -90. 
[20] J.E. Dickerson, and J.A. Dickerson, “Fuzzy Network 
Profiling for Intrusion Detection,” International 
Conference of the North American Society on Fuzzy 
Information Processing, July 2000, pp. 301-306. 
[21] A. Leuski, “Evaluating Document Clustering of 
Interactive Information Retrieval,” ACM CIKM, Nov. 
2001, pp. 33-40. 
[22] V.S. Verykios et al., “State-of-the-Art in Privacy 
Preserving Data Mining,” SIGMOD Record, vol.33, 
no.1, March 2004, pp.50-57. 
[23] K. Lu, Z. Chen, Z. Jin, and Jichang Guo, “An 
Adaptive Real-Time Intrusion Detection System Using 
Sequence of System Call, ” IEEE Electrical and 
Computer Engineering, May/mai 2003, pp.789-792 
[24] Fang-Yie Leu, and Zhi-Yang L, “An Inner DoS/DDoS 
Attack Detection System,” the 6th International 
Conference on Cybernetics and Information 
Technologies, Systems and Applications (CITSA 2009), 
July 2009, 
 
之session (共有五個parallel session同時進行)，都是和WiMax與Wireless network
有關者。 
7 月 13 日仍是 7:30 到會場聆聽由奧地利 University of Vienna 教授 Dr. Karl H. 
Muller 主講之 The New Science of Cybernetics: vision and Research Designs。Ｍ
uller 教授介紹 1960s~1970s 之科學在視覺上之研究狀況，進而進入 21 世紀之研究現
況，並告知目前之視覺已有人工智慧之特性。下午則因必須與 Georgia Institute of 
Technology 的教授 Dr.Ｒutherfoord Rebecca 共同主持 Information and Computing 
Technology III 之 session，現場除了兩位主持人自己報告的兩篇論文之外，亦有三篇
來自加拿大與捷克共和國(兩篇)之文章，大家在會場上相言甚歡，討論亦甚熱烈，最後
因 Professor Rutherfoord 必須先行離去而結束該 session。大家彼此交換名片，希望
有一天能相互訪問與合作，也邀大家有機會到台灣來從事交流與訪問。 
Session 結束後接著就是大會的頒獎典禮，個人因 paper 內容出色與充實而獲得
session best paper 獎，當大會宣佈得獎者與得獎者來自台灣時，現場響起掌聲，在眾
目睽睽之下起立，上台接受頒獎，此時因遠從地球那一端的台灣長途跋涉來到此地所引
起的疲勞與上台以英文報告之精神壓力，霎時間不見了蹤影，這一趟是值得了。  
結束了研討會，次日離開佛羅里達轉往紐約搭機返國。 
 
二、與會心得 
7 月 11 日之 keynote speaker Dr. Savoiee 對百年樹人之概念及其推崇，他認為
在過去數年當中，因為平台技術上已有重大突破，不論同步教學與非同步教學，不論是
線上問答與學習情緒之監督，皆已經比較成熟了，目前全世界已有多套線上教學輔助系
統與學習系統推出市場。雖如此，但他認為技術仍需不斷創新與進步，方能持續地推動
教育改革與發展，會議中並不斷強調教育對人類之各項意義與功效，他後亦提到唯有良
好的教育，才能富強國家與社會。事實上，真實世界真的也是如此。 
7月12日除了上午之keynote speech之外，所參與之session皆與Wireless Sensor 
Network 與 Communication 有關，收益著實良多，只因為大家都有各自的方法與想法，
點子亦不同。這一些方法想法都可以實際運用在自己的研究上，例如，現場有一位美國
學者專家在報告時提到，Diffie-Hellman 之 PKDS 可以不必在網路上傳遞 private key
而只傳遞 public key 的情形下，通訊者雙方可以所收到之 public key 和自己之 private 
key 各自計算出共同之 common private key，而以之加密資料，但他只用在有線網路中。
當下，我認為這個方法在有線網路中並不出色，但在無線網路中則因電波傳播在空氣
中，有心的駭客皆可直接擷取之，因此用在無線網路中特別能突顯其特色。這個方法我
現在正將之應用在 WiMax 的 device 認證上，取代 WiMax 原有之 PKMv1。經學生實作證實，
其效果遠大於 PKMv1，現在正在申請台灣與美國的專利中，真是一項意外的收穫與心得。 
附錄: CITSA 2009 報告之論文 
 An Inner DoS/DDoS Attack Detection System 
Fang-Yie Leu, and Zhi-Yang Li 
Dept. of Computer Science, Tunghai University, Taiwan 
leufy@thu.edu.tw, g942819@thu.edu.tw
 
                                                                
Abstract 
  In this article, we proposed an inner intrusion detection 
system, named Cumulative-Sum-based Inner Intrusion 
Detection System (CSIIDS), which detects inner malicious 
behaviors, launched toward local servers/hosts by other 
local hosts. Detection is performed based on Cumulative 
Sum (CUSUM) algorithm. Experimental results show that 
CSIIDSs can carry out a higher security level for the 
protected network system. 
Keyword: CUSUM, Inner Attack, Inner Intrusion 
Detection 
1. Introduction 
  Recently, networks have brought us a convenient 
environment for data access and communication. Many 
people communicate with others and/or retrieve data 
through networks almost everyday. However, when people 
exploit convenience provided by networks, more and more 
threats are now threatening networks, e.g., hackers issue 
Denial of Service (DoS) and Distributed Denial of Service 
(DDoS) attacks to destroy a system, or make victims unable 
to work properly, resulting in an enterprise or a company’ 
huge amount of financial loss or missing its business 
opportunities. Many famous attack packages provide 
friendly user interfaces and can be conveniently 
downloaded from the Internet. That is why hackers can 
very easily launch attacks, even they are naïve attackers.  
  In this article, we proposed an inner intrusion detection 
system, named Cumulative-Sum-based Inner Intrusion 
Detection System (CSIIDS), which detects malicious 
behaviors, attacks and distributed attacks launched toward 
local servers/hosts by local hosts. Detection is performed 
based on Cumulative Sum (CUSUM) algorithm [4].   
The rest of this article is organized as follows. Section 2 
introduces IDS systems and the Cumulative Sum algorithm. 
Section 3 describes CSIIDS framework and its detection 
algorithms. Experimental results are shown and discussed 
in section 4. Section 5 concludes this article and addresses 
our future research. 
2. Background and Related Work 
2.1 Cumulative Sum (CUSUM) Algorithm 
  The CUSUM [3] can be used to detect attacks when 
network flow increases suddenly and continuously. Figure 
1 illustrates the CUSUM behaviors. Let Xn be the number 
of packets collected in a sampling time nΔ , and X  be 
the mean value of X, where X={Xn, n=0,1,2,3,…} . Let the 
Zn = Xn -α , whereα is the peak value of normal traffic. 
So, Z , the mean value of Z = {Zn, n=0,1,2,3,…}, must be 
negative. 
  When DoS or DDoS occurs, Zn will be positive very 
quickly. If an attack starts, Zk ≥ Z + h, where k is the 
starting time and h is the abnormal traffic network 
threshold. We accumulate Zk with formula (1). 
 yn = (yn-1+Zk)+, y0 = 0                         (1) 
where N is the attack threshold. If the accumulative value 
yn > N at some time point after the starting time, indicating 
that there is a DoS or DDoS attack.  
alerting message to Response Manager, which on receiving 
the message alerts local administrators to response properly. 
A CSIIDS also sends related detection statistics to other 
collaborative CSIIDSs which will integrate the statistics for 
further detection. However, this paper focuses on inner 
attacks only. The methods to detect in-bound, forwarded 
and out-bound attacks and their consequent activities have 
been described in another paper [12]. 
IP address MAC address Subnet ID
Figure 3. Host List which has three fields to record local 
hosts’ address information 
3.1 Packet Analyzer 
  As shown in Figure 2, Packet Analyzer is composed of a 
type-1 Header processor, two type-2 Header processors, 
and Host List. Host List as shown in Figure 3 consists of 
three fields, IP address, MAC address and subnet ID, which 
together are used to record address information for local 
hosts protected by a CSIIDS. Hosts in a network 
management unit are grouped as subnets which can be 
identified by their subnet address, e.g., 140.128.101.XX. In 
other words, a tuple in the list retains information 
concerning a host or a subnet. All type-1 switches are 
connected to the type-1 Header processor. All type-2 
switches are connected to the two type-2 Header processors, 
which will be described later. A Header processor, 
regardless type-1 or type-2, on receiving a packet sent by 
switches retrieves K fields from the packet header, 
including Source IP, Destination IP, Protocol, TTL…etc, 
and classifies the packet into one of the two classes, inner 
or others’ by comparing the packets’ source IPs and 
destination IPs with the Host List. The packets whose 
source IPs and destination IPs are both listed in the Host 
List are inner packets. Other packets will be sent to 
ID-others. The Header processor algorithms are as follows. 
Algorithm 1: Type-1 Header Processor/*distinguishes 
packets that are not inner packets*/ 
Input: A packet P sent by a type-1 switch; Host List 
Output: P is a packet other than an inner packet 
{If (P’ source IP and destination IP are both not in Host 
List)  
/*P is not an inner packet*/ 
send P to ID-others subsystem to detect malicious 
behaviors;} 
Algorithm 2: Type-2 Header Processor /*distinguishes 
inner packets from other packets*/ 
Input: A packet P sent by a type-2 switch; Host List 
Output: P is an inner packet 
{If (P’s source IP and destination IP are both in Host List)  
/*P is an inner packet*/ 
send P to ID-inner subsystem to detect malicious 
behaviors;} 
3.2 Intrusion Detector 
  ID-inner subsystem detects whether local hosts/users of 
the underlying network management system are now 
attacking other local hosts/servers or not by invoking the 
CUSUM algorithm. ID-others subsystem detects other 
DoS/DDoS attacks other than inner DoS/DDoS attacks. 
Table 1. The Heap Table whose ID is 140.128.101.111 
(within second Q) 
   
Attributes
S-IP 
Protoc
ol 
Type Count Size 
(KB) 
Sequ. # 
140.128.10
2.12 
TCP SYN 35,021 2,189 2372311437
3357477985
… 
140.128.10
2.12 
TCP Req 80 5.032 3299181253
3335287903
… 
140.128.10
1.20 
UDP -- 1,438 978,272 No available
164.128.77
.15 
ICM
P 
Req 553 35 18176 
143.128.10
1.2 
TCP SYN 10 0.625 658919540
level-1 switches, one for entering and the other for leaving 
the router. Packets of model-1 may be issued by switches of 
any level. To detect model-2 and model-3 attacks, one of 
the type-2 Header Processors is connected to all level-1 
switches. We call the processor, type-2’ Header Processor. 
Also, to avoid missing model-1 attacks, all lower-level 
(level-2 to level-n) switches also need to be monitored. 
They are connected to the other type-2 Header processor. 
However, such will introduce a problem, i.e., when a packet 
flows through k switches before arriving at its destination, 
it will be duplicated k times in packet statistics. This may 
conduct a false alarm. So, ID-inner should be able to check 
to see whether a packet P has been received or not by 
checking P’s source IP, destination IP and sequence number. 
If yes, P’s information will not be redundantly added to the 
corresponding Heap table. 
In model-3, owing to unknowing number of attacking 
subnets, it is hard to choose proper threshold if we detect 
DoS/DDoS attack on sender side. Detecting on receiver 
side can avoid the problem since a subnet’s normal 
incoming traffic’s CUSUM parameters innerX , innerZ , innerα ,  
innerh , innerH  can be observed beforehand. One may ask 
how to differentiate an inner and an in-bound packet on 
receiver side. In fact, the differentiation can be achieved by 
checking to see whether an incoming packet’s source IP is 
in the Host list or not. If yes, it is an inner packet. From the 
statistics collected under un-attacked circumstance, it can 
derive its CUSUM parameters for inner packets. When 
detecting DoS/DDoS attacks, it accesses the parameters to 
perform its detection. Also, CUSUM algorithm is often 
implemented on router [7][8] as a network-based IDS [9] 
which does not collect model-1 traffic. Seldom IDSs that 
implement CUSUM are host-based. That is, IDSs using 
CUSUM often omit inner traffic when detecting 
DoS/DDoS attacks since they assume attacks only come 
from outsider. Hackers always attack outside-world hosts. 
But, this assumption is not always true [6].  
To discriminate whether a DoS/DDoS is an inter-subnet 
or intra-subnet attack, we further classify tuples in Host 
List into groups. Those hosts belonging to a subnet form a 
group. ID-inner on receiving a packet P checks P’s source 
IP and destination IP to see if they belong to the same 
subnet. If not, P is an inter-subnet packet. Otherwise, it is 
an intra-subnet packet. Each time when Accumulator 
receives a packet P, it checks the corresponding Heap table 
(recall, identifying the table based on P’s destination IP) to 
see whether or not P’s source IP, protocol and packet type 
are already in the table. If not, it inserts a new tuple into the 
Heap table given P’s source IP, protocol, type, count =1, 
P and P’s sequence number. If yes, e.g., tuple k, it further 
checks to see whether the sequence number exists in tuple k 
or not. If yes, P is a duplicated packet. The Accumulator 
discards P. If not, it appends the sequence number to k’s 
sequence # field, and increases “count” by one and “size” 
by P  as a part of network traffic cumulated by CUSUM 
algorithm. The detection algorithms of model 1 and models 
2 and 3 are as follows. 
Algorithm 3: Detecting model-1 inner attack 
Input: A packet P sent by type-2 Header processor; 
/*Assume P’s source IP is _Sr IP , destination IP 
is _Des IP , protocol is T , type is yT  and seq# is 
Q*/ 
Output: Whether there is a model-1 attack 
{1. search the corresponding Heap table, i.e., 
table _Des IP ; 
2. if (Sr_IP, T and yT  exist in table _Des IP , e.g., 
tuple k,) {if (P’s sequence number Q does not exist in 
sequ#(k))      
/*Accumulator accumulates packet statistics*/ 
        
{ ( ) ( ) 1;count k count k= + ( ) ( ) ;size k size k P= +    
         append Q to sequ#(k);} 
else discard P;} 
    else insert a new tuple with S_IP= _Sr IP , count=1, 
protocol= T , type= yT , size= P  and sequ# = Q to 
table _Des IP ; 
2,160 Bandwidth consumption 
attack 2,685 
The first experiment is detecting inner packets with 
resource consumption attacks and bandwidth consumption 
attacks. The parameters of CSIIDS areα=500, h=1000, and 
N=5000 on detecting resource consumption attacks. Table 4 
lists the detection results of resource consumption attack on 
7,604 ANP/sec. ART/SD, ATT/SD, AWT/SD, APL and 
AML respectively represent average response time (the 
period from attack begins to attack is first 
discovered)/standard deviation, average turnaround time 
(the period from attack begins to detection 
finishes)/standard deviation, average waiting time (the 
period packets wait to be detected)/standard deviation, 
average processor load and average memory load. Those 
packets received from type-2 and type-2’ switches are also 
sent to the tested security systems to detect attacks. McAfee 
VirusScan, Panda Titanium, FG-100A and CSIIDS have 
relatively shorter ART, but CSIIDS uses less APL and AML 
than others, except Snort. However, Kaspersky, McAfee 
VirusScan, Panda Titanium, Snort and FG-100A do not 
support measuring mechanisms to evaluate AWT. 
Table 4. Detection results of Resource Consumption 
Attack on 7,604 ANP/sec 
 Statistics 
Secu. 
Systems 
ART/SD 
(sec.) 
ATT/SD 
(sec.) 
AWT/SD 
(sec.) 
APL 
(%) 
AML 
(%) 
Kaspersky 10/0 10/0 -- 78 48 
McAfee 2/0 10/0 -- 52 67.2
Panda 
Titanium 
2/0 10/0 -- 99 74 
Snort 6/0 13/0.03 -- 26.9 15.74
FG-100A 1/0 10/0 -- 90.8 41.7
CSIIDS 1.45/0.018 10/0 0/0 29.1 30.2
Table 5 and Table 6 respectively show the results of 
attack intensities on 15,645 ANP/sec and 17,075ANP/sec. 
The results are similar to that of Table 4. 
Table 5. Detection results of Resource Consumption 
Attack on 15,645ANP/sec 
Statistics
Secu. 
Systems 
ART/SD 
(sec.) 
ATT/SD 
(sec.) 
AWT/SD 
(sec.) 
APL 
(%) 
AML 
(%) 
Kaspersky 10/0 10/0 -- 77 49 
McAfee 2/0 10/0 -- 52.2 67.5
Panda 
Titanium 
2/0 10/0 -- 99 77.4
Snort 8/0 15/0.02 -- 41.5 15.9
FG-100A 1/0 10/0 -- 92.2 40.9
CSIIDS 1.44/0.023 10/0 0/0 32.1 32.3
Table 6. Detection results of Resource Consumption 
Attack on 17,075ANP/sec 
Statistics
Secu. 
Systems 
ART/SD 
(sec.) 
ATT/SD 
(sec.) 
AWT/SD 
(sec.) 
APL 
(%) 
AML 
(%) 
Kaspersky 10/0 10/0 -- 79 48 
McAfee 2/0 10/0 -- 52.3 68.4
Panda 
Titanium 
2/0 10/0 -- 99 78.9
Snort 8/0 15/0.73 -- 51.5 15.8
FG-100A 1/0 10/0 -- 93.9 41.1
CSIIDS 1.44/0.015 10/0 0/0 33.6 34.1
The results of bandwidth consumption attack on 2,160 
ANP/sec and 2,685 ANP/sec are shown in Table 7 and 
Table 8, respectively. The parameters of CSIIDS areα=500, 
h=1000, and N=2000. FG-100A’s processor load decreases 
very quickly, because the handling rule is not very 
appropriate for resource consumption attack. When 
FG-100A discovers a bandwidth consumption attack, it 
throws packets directly, but it terminates sessions when a 
resource consumption attack is found. 
Table 7. Detection results of Bandwidth Consumption 
Attack on 2,160ANP/sec 
Statistics
Secu. 
ART/SD 
(sec.) 
ATT/SD 
(sec.) 
AWT/SD 
(sec.) 
APL 
(%)
AML 
(%) 
