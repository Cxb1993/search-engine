 行政院國家科學委員會補助專題研究計畫 V 成 果 報 告  期中進度報告 
 
提升產業技術及人才培育研究計畫-數位浮水印技術於數位監
視系統之應用 
 
 
計畫類別：V 個別型計畫  □ 整合型計畫 
計畫編號：NSC  94－  2622  － E － 011  － 025 －CC3 
執行期間：2005 年 11 月 01 日至 2007 年 03 月 31 日 
 
計畫主持人：郭景明 
共同主持人： 
計畫參與人員：  
 
 
成果報告類型(依經費核定清單規定繳交)：V精簡報告  □完整報告 
 
本成果報告包括以下應繳交之附件： 
□赴國外出差或研習心得報告一份 
□赴大陸地區出差或研習心得報告一份 
□出席國際學術會議心得報告及發表之論文各一份 
□國際合作研究計畫國外研究報告書一份 
 
 
處理方式：除產學合作研究計畫、提升產業技術及人才培育研究計畫、列
管計畫及下列情形者外，得立即公開查詢 
          V 涉及專利或其他智慧財產權，□一年 V二年後可公開查詢 
          
執行單位： 
 
中   華   民   國 96 年 5 月 22 日 
附件一 
因此在監視系統的應用上有相當高的應用價值。 
推廣及運用的價
值 
對於學術研究方面，資料隱藏及數位浮水印技術是多媒體處理的
一個很重要的研究主題，在國際上也特別為這個主題成立了 IEEE 
Transaction on Information Forensics and Security 期刊，原因在於
目前電腦科技成熟，數位資料遭受修改、攻擊、複製的機會大為
增加，因此必須為這些需要受到保護的資料提供一安全之機制。
另外由於全球生活品質將持續提升，以致對安全要求越來越高，
而監視器材引領著台灣安防產業的持續發展，依照安全與自動化
雜誌於 2005 年所做的產業調查報告顯示，2004 年國內監視器材
產值已達 215.88 億新台幣(內銷市場比重 34%，外銷市場比重
66%)，成長 17%(內銷市場成長 13.7%，外銷市場成長 20%)，佔
台灣安防產業八成以上之產值。其中的內/外銷營收比例為 34：
66，顯示台灣的「監視」製造商逐漸受到國際市場的肯定，由於
潛在商機龐大，全球正在發展數位監控系統的廠商可說是為數眾
多，因此具備可驗證擷取資料正確性，甚至在資料遭受竄改後是
否有能力將原有資料補回的能力將成為專業巿場的主導者。 
本計劃中所規劃之工作包括針對擷取資料之資料隱藏技術及數位
高速壓縮技術作全面之研究及嚐試突破，可為國內監視系統工業
在技術上提供相當高的支援並可為合作廠商產品提供額外之加分
特色。 
※ 1.每項研發成果請填寫一式二份，一份隨成果報告送繳本會，一份送 貴單位研
發成果推廣單位（如技術移轉中心）。 
※ 2.本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。 
3.本表若不敷使用，請自行影印使用。
Section IV are compatible to these BTC extensions. In the 
following, the traditional BTC is introduced. 
The original image is first divided into nxn blocks. Suppose 
m= 2n , and 1x , 2x , …, mx  are values of the pixels in a block. The 
first and second moments, and the variance of the block are 
x = ∑
=
m
i
ixm 1
1                                                                               (1) 
2x = ∑
=
m
i
ixm 1
21                                                                             (2) 
222 )(xx −=σ .                                                                        (3) 
      Since the BTC inherently is a one bit quantizer, we 
define thx = x , and 
⎩⎨
⎧
=<
=≥
aoutputxx
boutputxx
thi
thi
,
,                                                                 (4) 
where i=1, 2, …, m; variables a and b are low and high means, 
respectively. The central idea of the BTC is to preserve the first and 
second moments when the pixels are replaced by low and high 
means. Hence, the variables a and b are obtained by solving the 
following two equations: 
⎩⎨
⎧
+−=
+−=
,)(
)(
222 qbaqmxm
qbaqmxm                                                             (5) 
where q is the number of pixel values in the block higher than x . 
Solving for a and b, we obtain 
qm
qxa −−= σ
 
q
qmxb −+= σ                                                                         (6) 
Each block is represented by a, b, and an nxn bitmap, where a and b 
are assigned with 8 bits, respectively, and the bitmap requires 2n  
bits. Hence, the bit rate of 2 bits/pixel is achieved with block size of 
4x4. In Figs. 1(b) to 1(d), we give three different BTC decoded 
images with block sizes of 4x4, 8x8, and 16x16, which are with bit 
rates of 2, 1.25, and 1.0625 bits/pixel, respectively. It is clear that 
the image quality degrades rapidly with high compression ratio. 
 
3. ERROR DIFFUSION (EDF) 
 
Error diffusion plays a key role in steganography, which will be 
introduced in Section IV. In this section, we provide a brief 
overview of error diffusion. For a much better approach than 
dithered halftoning, Floyd and Steinberg [10] proposed a reasonable 
computational halftoning with much better quality and higher 
spatial resolution, named error diffusion, by quantizing each pixel 
according to a statistical analysis of the input pixel and its 
neighbors, leading to a stochastic arrangement of the printed dots. 
Furthermore, when it comes to display color works, this technique 
eliminates the occurrence of the moiré effect that is produced by 
superimposing two or more halftone patterns of different color 
channels. In the past few years, the error diffusion had great 
progress in printing industry, which included the following studies: 
applying adaptive error kernel to distribute errors to three instead of 
four neighbors [19] in order to decrease the computational 
complexity and eliminate the worm effect inherently existing in 
halftone patterns; the concept of using green-noise halftoning 
algorithm to produce patterns with adjustable coarseness that can be 
tuned to the reliability of a given printer to produce dots 
consistently [20]-[26]. 
The standard EDF flow chart is shown in Fig. 2. The variable 
jix ,  represents the current input pixel value and 
'
, jix  is the diffused 
error sum added up from the neighboring processed pixels. The 
variable 
jib ,  is the binary output in position ),( ji , and the error 
kernel nmh ,  is used to diffuse the error caused by the difference, jie , , 
between the output binary value and the input gray level value. 
Three well-known error kernels are shown in Fig. 3. The variable 
jiv ,  is the modified gray output. The relationships between jib , , 
jiv ,  and jie ,  are given as, 
'
,,, jijiji xxv += , where ∑∑
= −=
++ ×=
2
0
2
2
,,
'
,
m n
nmnjmiji hex                      (7) 
jijiji bve ,,, −= , where 
⎪⎩
⎪⎨
⎧
≥
<
=
128255
1280
,
,
,
ji
ji
ji
vif
vif
b                     (8)  
We numerically define 0 as a black pixel and 255 as a white pixel. 
Figures 4(a)-(c) are the error-diffused images obtained by three 
different error kernels, Floyd [10], Jarvis [8], and Stucki [9], 
respectively. As shown in Fig. 4, the EDF has the ability of 
compensating the local average gray level by diffusing the error to 
the unprocessed anti-causal neighborhood pixels. Hence, the 
average local gray level remains the same as the original multi-tone 
image. Since the output of the EDF is only two-tone and similar to 
the BTC, we combine the EDF and BTC in order to improve the 
quality of traditional BTC in the following section. 
 
4. COMPLEMENTARY STEGANOGRAPHY IN ERROR-
DIFFUSED BTC IMAGES 
 
4.1. Error-Diffused Block Truncation Coding (EDBTC) 
 
We now describe how to cooperate EDF with BTC. Similar to the 
traditional EDF, we simply modify Eq. 8 as 
jijiji ove ,,, −= , where 
⎪⎩
⎪⎨
⎧
≥
<
=
thji
thji
ji
xvifb
xvifa
o
,
,
,
                        (9) 
where the variable 
jio ,  stands for the BTC encoded result, and the 
variable thx  is the first moment of the corresponding block. Since 
the BTC inherently is a block-wised processing, each block is 
represented by two gray levels, and the bit rate and image quality 
are decreased along with the increase in block size. Hence, the 
EDBTC is proposed to improve the image quality of traditional 
BTC. The improvements are addressed in Section VI. 
 
4.2. Complementary Steganography in EDBTC (CSEDBTC) 
 
We now describe how to embed messages into the EDBTC image. 
The central idea is to distribute a visual pattern into two or more 
EDBTC images, which is also called secret sharing. The advantage 
of doing this is to improve the security, since anyone who intends 
to decode the embedded message has to gather all the embedded 
images. For example, assume that a bank has six vaults that must be 
opened by six different secret keys. The bank employs four senior 
tellers, but the bank does not need to trust or rely on any of them 
individually. Hence, they would like to design a secret sharing 
system such that any two of the four senior tellers can open one 
vault together. 
In the following, we simply introduce the case with only two 
host images, yet it can be extended into more images. The flow 
chart of CSEDBTC is shown in Fig. 5. First, we denote the first 
embedded EDBTC image as EDBTC1, and the second one as 
EDBTC2. The notations BTC1 and BTC2 stand for normal BTC 
images of the two host images. The size of the hidden visual pattern 
could be enlarged to fit the size of the host image. The variable WW  
is the set of locations of all the “white” pixels in the watermark and 
BW  the set of locations of all the “black” pixels. The variables 
BEDBTC )1( and AEDBTC )1(  represent the locations of the high 
and low means of EDBTC1, respectively. Similarly, the variables 
BEDBTC )2( and AEDBTC )2(  are the locations of the high and 
low means of EDBTC2, respectively. In the decoder, the low and 
high means will be taken as black and white pixels, respectively. 
The objective is to adequately arrange the locations of the low and 
union operation. If the processing position ),( ji  of EDBTC1 
satisfies the following condition, then Eqs. (12) and (13) are applied: 
{[ ),( ji ∈ kW
m
k
W
1=∪ ] AND [ jix , +
'
, jix < thx ]}. 
If the processing position ),( ji  of EDBTC2 satisfies the 
following condition, then Eqs. (10) and (11) are applied: 
{[ ),( ji ∈ kB
m
k
W
1=∪ ] AND [ ),( ji  ∈ BEDBTC )1( ] AND [ jix , +
'
, jix ≥ thx ]}. 
If the processing position ),( ji  of EDBTC2 satisfies the 
following condition, then Eqs. (12) and (13) are applied: 
{[ ),( ji ∈ kW
m
k
W
1=∪ ] AND [ ),( ji  ∈ BEDBTC )1( ] AND [ jix , +
'
, jix < thx ]}. 
The embedded patterns can be selected from the predefined 
database. Hence, the correlation detector as in Eq. 20 is employed 
here to test if the decoded patterns are matched to the patterns in the 
database. By doing this, even a low correlation, such as 5, is 
determined as a positive detection, and then the exact pattern can be 
extracted from the database. 
 
6. EXPERIMENTAL RESULTS 
 
In this section we apply the proposed EDBTC, CSEDBTC, as well 
as extension techniques, SRS and MCS, to demonstrate the 
performance of the proposed algorithms. Eight tested images are 
employed in experiments as shown in Fig. 7, which include Lena, 
Mandrill, Elaine, Boat, Airplane, Peppers, Milk, and Lake images. 
The quality comparisons between the traditional BTC and the three 
EDBTC images are depicted in Fig. 8, which are the average results 
of the 8 tested images described above. It is clear that nearly all 
hybrid methods are better than traditional BTC. Especially, the 
Floyd EDBTC is the best combination. Hence, for the sake of 
simplifying the experiments, the Floyd EDBTC is chosen for 
further verification of the proposed CSEDBTC, and the standard 
deviation σ  is fixed at 1.3 for quality evaluation in the rest of the 
paper. An experimental example is given in Fig. 9, where the three 
images are obtained with the proposed EDBTC with block size of 
4x4, 8x8, and 16x16, respectively. Compared to the traditional BTC 
as shown in Fig. 1, the EDBTC images shown in Fig. 9 are with 
quality 51.24, 44.4, and 37.03dB measured by Eq. 21. These are 
with less false contours or blocking effect in smooth regions than in 
traditional BTC images. 
        In Figs. 10-12, we give extensive experiments with different 
combinations of parameters, which include additive noise (ADN), 
median filter size (MFS), Peak Signal to Noise Ratio (PSNR), and 
Correct Decoded Rate (CDR). In Fig. 10, depicting the CDR versus 
9 different ADN, it is clear that the CDR increases with higher 
AND because higher ADN can effectively force the positions of 
high and low means to obey the distribution of the embedded 
information bit. Figure 11 shows that in spite of the fact that a high 
ADN contributes high CDR, the image quality degrade as well, 
which implies that the strength of ADN should be determined 
according to the applications; a high accuracy of information 
conveying application leads to a high ADN, while a high image 
quality demanding application chooses low noise. Another 
phenomenon needs to be addressed here. In general, the quality of 
EDBTC1 is lower than EDBTC2, which can be explained by 
comparing the conditions of Eq. 10 and 12 with the conditions of 
Eq. 14 and 16. It is clear that there are more restrictions in selecting 
a pixel to be added/subtracted with ADN in EDBTC2 than that in 
EDBTC1. Hence, there are fewer pixels in EDBTC2 processed with 
ADN than EDBTC1. It is the main reason behind the phenomenon 
that EDBTC1 is with lower quality than EDBTC2.  Note that, there 
are 8 tested host images shown in Fig. 7, and 100 random generated 
bi-level embedded messages employed in Figs. 10-11. Hence, the 
possibilities of black and white pixel numbers are even. However, 
in practical applications, the embedded messages may be bi-level 
meaningful logos or boldface letters. For this, in Fig. 12, we adopt 
the embedded pattern as shown in the top of Fig. 13 as the 
experimental subject. Some EDBTC results using the proposed 
CSEDBTC are shown in Fig. 13, where the pattern is embedded 
with three different ADN. The decoded patterns with different 
extents of pepper-and-salt noises are shown in the fourth row. In 
general, a less pepper-and-salt noise is achieved with a higher ADN. 
Moreover, the median filter is generally acknowledged as a good 
way in eliminating the pepper-and-salt noise. The larger filter size 
can be used to delete larger cluster of pepper-and-salt noise. Hence, 
with higher ADN, the smaller filter size is sufficient for removing 
the pepper-and-salt noise. It is clear that in Fig. 12, the best 
decoded rates corresponding to the ADN of 5, 10, and 15 are 
obtained by median filter size of 9, 7, and 5, respectively. Figure 12 
is depicted with the average CDR of the 8 tested images as 
described above, whereas for the Lena image, the best filter sizes 
for ADN 5, 10, and 15 are 7, 5, and 3, respectively. The decoded 
patterns processed with the median filter are shown in the fifth row 
of Fig. 13. All the cases are with enormous improvements in CDR 
by the median filter post-processing. The correlation indicators are 
shown in the last row of Fig. 13, where the other randomly 
generated 199 patterns are used for comparison. In all the cases, the 
indicators are all high enough (>5) for determining the right 
embedded pattern. 
        In Figs. 14-16, we conduct a series of experiments to give a 
deep exploration of the parameters’ selection in SRS. The 
referenced block described in Section V-A is located in the bottom 
of the host image of size QP ×1 , where 1P  is the BTC encoded 
block size and Q  is the width of the host image. Note that, it is 
better to choose a referenced block with middle average gray level, 
e.g. 128. Figure 14 shows the variation of CDR versus ADN. It is 
similar to Fig. 10 that the CDR increases with a higher ADN. 
However, the curve in Fig. 14 is flatter than the one in Fig. 10, 
which means that SRS is inferior to the normal CSEDBTC when a 
high ADN is involved. This phenomenon can be explained based on 
the fact that the EDBTC2 in SRS always references to a piece of 
block, which is taken as a “pseudo EDBTC1”. However, the piece 
of block may not be as adaptive as a normal EDBTC1, e.g., 
unbalanced high mean or low mean in the same block. In Fig. 15, 
since SRS is adopted, there is only one curve corresponding to the 
embedded EDBTC image. Similar to Fig. 11, the PSNR decreases 
with higher ADN. Note that, there are 8 tested host images as 
shown in Fig.7 and 100 random generated bi-level embedded 
messages are employed in Figs. 14-15. In Fig. 16, we still employ 
the embedded pattern as shown in the top-left corner of Fig. 13 as 
the experimental subject. Since the CDR of the SRS is lower than 
the normal CSEDBTC, the decoded results are with more pepper-
and-salt noise. Hence, the larger MFS is required in SRS than in 
normal CSEDBTC. As shown in Fig. 16, the best CDR 
corresponding to the ADN of 5, 10, and 15 are obtained with MFS 
of 13, 11, and 9, respectively. Figure 16 is depicted according to the 
average CDR of the 8 tested images as described above, whereas 
for Lena image, the best MFS for ADN 5, 10, and 15 are 11, 9, and 
7, respectively. The decoded results with the median filter post-
processing are shown in the third row of Fig. 17. The correlation 
indicators are shown in the last row of Fig. 17. 
        In Figs. 18-20, we depict the decoded correlation and PSNR 
versus embedded pattern number. All the results are averaged from 
the 8 tested host images shown in Fig. 7 and 100 random generated 
bi-level embedded patterns. In Fig. 18, it is clear that the average 
decoded correlation decreases with the increase in the embedded 
pattern number. It is suggested that the embedded number is not 
higher than 20, since from a various number of tests indicating that 
the decoded correlation with this embedded number is able to be 
maintained higher than 6 for correct decoding. From Figs. 19-20, 
we can observe that the image quality degrades a lot with a small 
increase in embedded number, yet degrades slowly with significant 
increase in embedded number. The users can easily choose the best 
combinations in PSNR and embedded pattern number they need 
from Figs. 19-20. Some practical results with Lena image are given 
in Fig. 21, which include the embedded pattern number 2, 10, and 
15. All the embedded patterns can be correctly decoded, since the 
decoded correlations are much higher than the irrelevant pseudo 
random generated patterns; even with the embedded number 15. 
Summarizing the discussions above, the proposed method is able to 
 
 
 * 7/1
2
   * 7/4
8
5/4
8
   * 8/4
2
4/4
2
1/1
2
3/1
2
5/1
2
 3/4
8
5/4
8
7/4
8
5/4
8
3/4
8
 2/4
2
4/4
2
8/4
2
4/4
2
2/4
2
    1/4
8
3/4
8
5/4
8
3/4
8
1/4
8
 1/4
2
2/4
2
4/4
2
2/4
2
1/4
2
              (a)                          (b)                                  (c) 
Fig. 3. Error kernels ( nmh , ). (a) Floyd [10]. (b) Jarvis [8]. (c) Stucki 
[9]. 
 
   
(a)                                                  (b) 
 
(c) 
Fig. 4.  Error-diffused results of size 512x512, and printed at 
300dpi. (a) Floyd. (b) Jarvis. (c) Stucki. 
Threshold
EDF kernel
jix ,
jiv ,
jie ,
-+
+
+
Noise Adding
(      )
nmh ,
'
, jix
Noise 
Substrating
(       )
Noise Adding
(       )
Noise 
Substrating
(      )
AN
AN
AN
AN
jio ,
x
 
Fig. 5. Flow chart of CSEDBTC. 
0
5
10
15
0
5
10
15
-0.05
0
0.05
0.1
0.15
0.2
i axisj axis
co
ef
fic
ie
nt
 v
al
ue
s 
w
(i,
j)
0
5
10
15
0
5
10
15
-0.02
0
0.02
0.04
0.06
0.08
0.1
i axisj axis
co
ef
fic
ie
nt
 v
al
ue
s 
w
(i,
j)
 
(a)                                            (b) 
0
5
10
15
0
5
10
15
-0.02
0
0.02
0.04
0.06
0.08
i axisj axis
co
ef
fic
ie
nt
 v
al
ue
s 
w
(i,
j)
 
(c) 
Fig. 6. Gaussian filter. (a)σ =1. (a)σ =1.3. (a)σ =1.6. 
 
        
Fig. 7.  Thumbnail of 8 tested images. Left to right and top to 
bottom: Lena, Mandrill, Elaine, Boat, Airplane, Peppers, Milk, and 
Lake images. 
Sigma=1
25.00
30.00
35.00
40.00
45.00
50.00
Block Size
Ga
us
sia
n P
SN
R
BTC 44.12 37.94 32.42 28.99 26.00 
Floyd EDBTC 45.72 40.46 34.85 30.75 27.37 
Jarvis EDBTC 42.96 39.09 34.27 30.39 27.09 
Stucki EDBTC 43.48 39.39 34.40 30.47 27.14 
4 8 16 32 64
 
(a) 
Sigma=1.3
25.00
30.00
35.00
40.00
45.00
50.00
55.00
Block Size
Ga
us
sia
n P
SN
R
BTC 46.74 40.21 33.90 29.93 26.63 
Floyd EDBTC 49.99 43.66 36.87 32.01 28.19 
Jarvis EDBTC 47.43 42.36 36.42 31.76 27.99 
Stucki EDBTC 47.85 42.64 36.50 31.80 28.00 
4 8 16 32 64
 
(b) 
Sigma=1.6
26.00
31.00
36.00
41.00
46.00
51.00
56.00
Block Size
Ga
us
sia
n P
SN
R
BTC 48.62 42.09 35.20 30.76 27.15 
Floyd EDBTC 53.44 46.32 38.61 33.09 28.88 
Jarvis EDBTC 51.08 45.13 38.26 32.89 28.71 
Stucki EDBTC 51.43 45.39 38.32 32.92 28.71 
4 8 16 32 64
 
(c) 
Fig. 8. Quality comparisons under different Gaussian standard 
deviations. (averaged from the 8 tested images) (a)σ =1. (a)σ =1.3. 
(a)σ =1.6. 
 
  
(a)                                                 (b) 
PSNR vs ADN
43.66 43.58
43.43
43.14
42.80
42.39
41.98
41.57
41.17
41.00
41.50
42.00
42.50
43.00
43.50
44.00
0 2 4 6 8 10 12 14 16ADN
PS
NR
 
Fig. 15. PSNR vs. ADN. (Averaged from the 8 tested host images 
shown in Fig. 7 and 100 random generated bi-level embedded 
patterns) 
 
CDR vs MFS
60
70
80
90
100
MFS
CD
R
ADN=5 60.74 73.36 82.36 87.51 90.13 91.31 91.67 91.49 91.02 
ADN=10 65.14 80.99 89.79 93.28 94.33 94.40 93.99 93.33 92.54 
ADN=15 67.61 84.75 92.74 95.10 95.44 95.13 94.54 93.77 92.89 
0 3 5 7 9 11 13 15 17
 
Fig. 16. CDR vs. MFS. Filter size of 0 means no median filter is 
applied. (Averaged from the 8 tested host images shown in Fig. 7, 
embedded pattern is shown in the top-left corner of Fig. 13) 
 
 AN =5 AN =10 AN =15 
EDBTC1 
 
PSNR=43.95dB 
 
PSNR=43.25dB PSNR=42.31dB 
Decoded 
pattern 
processed 
with the 
median 
filter 
 
CDR=93.4%, 
MFS=11x11 
 
CDR=95.36, 
MFS=9x9 
CDR=95.94, 
MFS=7x7 
Correlatio
n detected 
result 0 50 100 150 200-100
0
100
200
300
400
500
Embedded pattern index number
co
rr
e
la
tio
n
 o
f w
at
er
m
ar
ks
 
Correlation=444.45 
0 50 100 150 200
-100
0
100
200
300
400
500
Embedded pattern index number
co
rr
e
la
tio
n
 o
f w
at
er
m
ar
ks
 
Correlation=464.47 
0 50 100 150 200
-100
0
100
200
300
400
500
Embedded pattern index number
co
rr
e
la
tio
n
 o
f w
at
er
m
ar
ks
Correlation=470.4 
Fig. 17. Practical performance demonstration under three different 
ADN. 
 
Correlation vs Embedded pattern number
0
20
40
60
80
100
120
140
160
180
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
Embedded pattern number
De
co
de
d c
orr
ela
tio
n
ADN=5
ADN=10
ADN=15
 
Fig. 18. Correlation vs. embedded pattern number. (Averaged from 
the 8 tested host images shown in Fig. 7 and 100 random generated 
bi-level embedded patterns) 
PSNR vs Embedded pattern number (EDBTC1)
25
27
29
31
33
35
37
39
41
43
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
Embedded pattern number
PS
NR
ADN=5
ADN=10
ADN=15
 
Fig. 19. PSNR vs. embedded pattern number of EDBTC1. 
(Averaged from the 8 tested host images shown in Fig. 7 and 100 
random generated bi-level embedded patterns) 
PSNR vs Embedded pattern number (EDBTC2)
25
27
29
31
33
35
37
39
41
43
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
Embedded pattern number
PS
NR
ADN=5
ADN=10
ADN=15
 
Fig. 20. PSNR vs. embedded pattern number of EDBTC2. 
(Averaged from the 8 tested host images shown in Fig. 7 and 100 
random generated bi-level embedded patterns) 
Embedde
d pattern 
number 
EDBTC1 EDBTC2 Correlation detected result 
2 
PSNR=38.76dB 
 
PSNR=39.37dB 
0 100 200 300 400
-20
0
20
40
60
80
Embedded pattern index number
co
rr
e
la
tio
n
 o
f w
a
te
rm
ar
ks
10 
PSNR=35.95dB 
 
PSNR=36.98dB 
0 500 1000 1500 2000
-5
0
5
10
15
Embedded pattern index number
co
rr
e
la
tio
n
 o
f w
a
te
rm
ar
ks
15 
PSNR=35.84dB 
 
PSNR=36.87dB 
0 500 1000 1500 2000 2500 3000
-4
-2
0
2
4
6
8
10
Embedded pattern index number
co
rr
e
la
tio
n
 o
f w
a
te
rm
ar
ks
Fig. 21. Practical performance demonstration under three different 
embedded pattern numbers. 
