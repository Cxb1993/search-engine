 1 
 
行政院國家科學委員會專題研究計畫成果報告 
NSC Open Source Project—總計畫： 
嵌入式網路通訊裝置測試中心：方法與工具之實驗、開發與推廣 
計畫編號：96-2218-E-009-014 
執行期限：96 年08 月01 日至97 年07 月31 日 
主持人：林盈達 教授  國立交通大學 資訊工程學系(所) 
 
1. 摘要 
    嵌入式系統由於在價格以及體積等具有
競爭力的條件下，逐步成為許多廠商致力於
開發各種建構在嵌入式系統平台上的網路通
訊裝置，但是在眾多的裝置上卻沒有可用來
評比各項嵌入式系統網路裝置的好方法，因
此本計畫的目的便是希望建構一個量測評比
嵌入系統網路通訊裝置的平台，除了能依據
效能協助選擇適當的嵌入式網路通訊裝置，
亦能協助開發者於開發時測試該裝置的效能
以及改進的方向，藉此達到在效能以及規格
上取得平衡，發揮嵌入式系統的優勢以及最
大的效能。 
    本測試系統包含三個子計畫，針對嵌入
式系統網路通訊裝置最令人關切的三項評比
項目：耗電量分析、核心系統與通訊行為分
析及儲存系統效能等進行效能測試評比工具
開發，總計畫亦開發供此三子計畫利用之共
通測試平台(Common Test Platform)，做為子
計畫測試時所需要使用的網路相關測試平
台，以及所要測試的背景網路流量，以總計
畫所提供的背景流量，做為三項子計畫的測
試基底，觀察在該流量之下，對待測裝置的
效能影響及評比，整合嵌入式系統處理器指
令集耗電量測分析、系統核心事件分析和通
訊行為分析及儲存媒體效能分析等技術及工
具，達成對嵌入式網路通訊裝置進行完整效
能的測試及評比，除了能幫助產品開發者進
行效能改進及選擇適合使用的元件平台，亦
可做為學術上進行相關研究時有實際上產品
的數據供做先進技術的研發，並將此系統原
始碼公開，提供開放原始碼社群使用及研究。 
 
關鍵詞： 嵌入式系統、網路通訊裝置、耗電
量、系統核心事件、儲存媒體、開放原始碼 
 
 
 
2. 緣由與目的 
嵌入式系統被大量的開發在生活上各種
不同的產品上，拜晶片及處理器設計和製程
技術進步所賜，使用者很容易透過各個嵌入
系統上進行網際網路存取，不論是有線網路
或是無線網路(WiFi, GSM, WiMAX等)等網路
介面和技術被大量應用在嵌入式系統裝置上
供使用者進行資料存取，雖然使用者可以方
便的透過這些輕便且可攜式的裝置隨時隨地
存取網際網路，可是伴隨這些網路流量對於
嵌入式系統造成的各項元件影響，卻沒有一
個共通標準和平台可以做為整體性的測試，
這不只會成為使用者在選擇適用自己的平台
時的困擾，也成為系統開發者在開發初期選
擇規格時沒有依據的標準，可能因為選擇不
適當的規格而造成開發失敗，如何選擇所需
的網路裝置元件並可顧及使用者在使用上的
需求，又不影響對裝置使用上的效能，將會
成為未來嵌入式系統網路通訊裝置一個重要
的議題。 
    有鑑於此，本計畫的目標即對於當前嵌
入式網路通訊裝置所面臨到的問題，進行相
關的研究及討論，配合相關的技術和理論，
研發各項技術以及測試評比平台，為達到此
目的，本計畫共將開發包含總計畫及三個子
計畫共四項相關測試工具進行嵌入式系統評
比，分別如下所述： 
ü 嵌入式系統共通測試平台(Embedded 
Common Test Platform, CTP 1.1.0) 
ü 嵌入式系統耗電分析評比測試(Design 
and Development of Power Consumption 
Analysis and Benchmarking Tools for 
Embedded Network and Communication 
Devices, EPC 1.2.0) 
ü 嵌入式核心與通訊行為效能評比測試
(Design and Development for Kernels 
and Protocols Analysis and 
Benchmarking Tools for Embedded 
 3 
 
每單位時間的耗電量。 
 
圖三 DaVinci開發板Test Point 
 
    而異質多核心平台上，本系統所選用的
平台具有RISC處理器與DSP所組成，RISC
處理器可依上面的方法量測得知，但DSP
並非RISC架構，因此必須經由分析執行
的程式所需使用的指令，再依每道指令
對硬體需求所耗用的電量進行量測。除
此之外，DSP並非一直處於使用的狀態，
因此也必需將閒置的時間量測出來，將
其扣除於總耗電量之外，另外較特殊的
是在處理器與DSP進行溝通使用IPC時所
耗的額外電量亦需進行考量。 
    而TI DaVinci系統則是利用TI所提供的
工具協助收集資料，並對這些資料進行
分析。 
 
圖四 以Tektronix示波器進行異質多核心系統耗電量
測 
 
u 嵌入式核心與通訊行為效能評比測試
(Design and Development for Kernels 
and Protocols Analysis and 
Benchmarking Tools for Embedded 
Networking and Communication Devices, 
KPT): 本系統著眼於開發一套合適的輔
助工具，協助嵌入式通訊裝置的開發者
正確界定造成延遲與封包遺漏的原因，
進而分析問題及改善缺失，目的是要發
展一個Linux網路通訊協定堆疊的分析工
具，讓嵌入式網路裝置發展者可以利用
此平台工具來分析裝置本身的核心網路
行為，包括了： 
l 網路封包在核心系統內的傳輸流程 
l 網路封包在核心系統內的接收流程 
l 網路封包傳輸時的延遲 
l 網路封包接收時的延遲 
本系統設計的主要內容有三項： 
(1) 核心補釘(Kernel patching) 
(2) 記錄(Logging) 
(3) 分析(Analysis) 
系統架構如圖五。 
圖五 KPT系統架構圖 
 
    本計畫新增的主要元件為圖五斜線
的深色部份，包括分布在核心網路堆疊
裡的虛線區域，做為Linux Kernel 
Patching，而Instrument Modules用來
控制核心補釘的主要模組，做為輸出想
要記錄的重要元件，此外在作業系統之
上尚有Instrument Configuration 
Interface及Log File Generator and 
Analyzer，用於設定Instrument 
Modules所要監看的核心函式，及負責輸
出log檔案以及分析log檔案。同時必須
研究在此項技術之下，應使用何種技術
達到目的而不影響系統效能。 
 
 
 5 
 
patching與未進行Kernel patching的核心進行
效能比較，針對FTP、HTTP及ICMP等通訊協
定測試的結果，在不同協定的網路傳輸都能
與原始的Linux Kernel一樣順暢，表示在執行
Kernel patching後對整體的網路效能影響並
不大，而輸出log部份，比較procfs與printk的
效能，由於printk使用System I/O會造成對系
統效能影響甚鉅，相對之下使用memory紀錄
log檔，可以避免隨時都在開啓檔案、寫入檔
案等問題，減低整體系統負擔。 
    ESB子計畫針對各項議題進行對快閃記
憶體的效能評估，而在快閃記憶體空間使用
率上，YAFFS對於儲存大容量檔案的表現上最     
出色，而若系統中多數的檔案大小小於一個
page size的話則是以JFFS2較節省空間；記憶
體使用量部分，JFFS2在處理檔案的執行動作
上較迅速，但是用來作位址轉換的資料結構
太多，導致消耗掉大量的記憶體空間，YAFFS
在這項測試中的使用量上表現是最好的，與
檔案的數目成正相關，但是使用量還是遠少
於JFFS2，而NFTL+FAT的組合，因FAT32系統的
關係，建構一個檔案就需要消耗一個
FAT_ENTRY，所以消耗程度只和檔案個數有
關；而垃圾回收效能上，重複的讀寫動作反
應在NFTL+FAT32會被page cache吸收掉，導致
讀/寫/抹除次數減少，JFFS2則因為平均抹除
的影響，使得額外負擔讀/寫/抹除的次數較
多，花費的時間也較多，但是在挑選垃圾回
收的目標區塊時只是機率性的從多個串列中
某一個串列挑出串列前端區塊，因此實際花
費的時間不多，YAFFS和NFTL的垃圾回收策略
是dynamic garbage collection，可輕易的挑選
出目標區塊作垃圾回收，而NFTL每一次變更
資料時，都要讀取整個virtual unit chain的區
塊一次，所以花費的讀取次數較多較費時。 
在平均磨損部份，JFFS2使用99/1法則選擇垃
圾回收的目標區塊，其它兩個只做dynamic 
wear-leaving，若資料皆動態，變動性很大時，
則三者差異性不大，而經過實驗，三者對於
wear-leaving的效果都不盡理想。 
 
5. 參考文獻 
[1] "Using the NCTUns 2.0 Network Simulator 
and Emulator to Facilitate Network 
Researches", S.Y. Wang - Proc. 2nd 
International Conference on Testbeds and 
Research, 2006. 
[2] “Harpoon: a flow-level traffic generator for 
router and network tests”, J. Sommers, H. 
Kim, P. Barford - ACM SIGMETRICS 
Performance Evaluation Review, 2004. 
[3] A. Tirumala, F. Qin, J. Dugan, J. Ferguson, 
and K. Gibbs. Iperf 1.7.0 -- the TCP/UDP 
bandwidth measurement tool. 
http://dast.nlanr.net/Projects/Iperf, 2004. 
[4] Paul Barford , Mark Crovella, Generating 
representative Web workloads for network 
and server performance evaluation, 
Proceedings of the 1998 ACM SIGMETRICS 
joint international conference on 
Measurement and modeling of computer 
systems, p.151-160, June 22-26, 1998, 
Madison, Wisconsin, United States. 
[5] Charles R. Simpson, Jr. , Dheeraj Reddy , 
George F. Riley, Empirical Models of TCP 
and UDP End-User Network Traffic from 
NETI@home Data Analysis, Proceedings of 
the 20th Workshop on Principles of 
Advanced and Distributed Simulation, 
p.166-174, May 24-26, 2006. 
[6] Jelena Mirkovic , Brett Wilson , Alefiya 
Hussain , Sonia Fahmy , Peter Reiher , 
Roshan Thomas , Stephen Schwab, 
Automating DDoS experimentation, 
Proceedings of the DETER Community 
Workshop on Cyber Security 
Experimentation and Test on DETER 
Community Workshop on Cyber Security 
Experimentation and Test 2007, p.4-4, 
August 06-07, 2007, Boston, MA. 
[7] J. Sommers, P. Barford, Self-configuring 
network traffic generation, Proceedings of 
the 4th ACM SIGCOMM conference on 
Internet, 2004. 
 7 
 
Module HOWTO”, Available from: 
http://www.tldp.org/HOWTO/Module-HO
WTO/ 
[28] Jongmoo Choi, “Kernel aware module 
verification for robust reconfigurable 
operating system”, Journal of Information 
Science and Engineering, Vol. 23 No. 5, pp. 
1339-1347, Sep. 2007. 
[29] Moore, R. J., “Dynamic probes and 
generalized kernel hooks interface for 
Linux”, Proceedings of the fourth annual 
Linux showcase and conference. Atlanta, 
GA, USA, pp. 139-145, 2000. 
[30] Nicolas Loriant and Jean-Marc 
MenaudGeneralized, “Dynamic Probes for 
the Linux Kernel and Applications with 
Arachne”, In Proc. of the 2007 IADIS 
Conference on Applied Computing, Feb. 
2007. 
[31] R. Krishnakumar, “Kernel Korner: Kprobes - 
a Kernel Debugger”, Linux Journal, Jun. 
2006. 
[32] Jeong-Won Kim, Young-Uhg Lho, Young-Ju 
Kim et al, “A memory copy reduction 
scheme for networked multimedia service 
in Linux kernel”, Lecture Notes in 
Computer Science, 2002, 2510: 188–195. 
[33] 曹敏峰, " Linux網路通訊協定堆疊之高
效率動態的指令嵌入平台之設計與實作
", 交大資工所碩士論文, 2008. 
[34] G. Irlam, “Unix File Size Survey,” 1993. 
http://www.gordoni.com/ufs93.html 
[35] A. Inoue and D. Wong, "NAND Flash 
Applications Design Guide" , April, 2003. 
[36] Li-Pin Chang and Tei-Wei Kuo, "Efficient 
Management for Large-Scale 
Flash-Memory Storage Systems with 
Resource Conservation," ACM 
Transactions on Storage, Volume 1, Issue 
4, 2005. 
[37] Intel Corporation, “Understanding the 
Flash Translation Layer (FTL) 
Specification". 
[38] SSFDC Forum, "SmartMediaTM 
Specification", 1999. 
[39] Compact Flash Association, “Compact 
FlashTM 1.4 Specification," 1998. 
[40] Linux MTD project and M-System, “NAND 
Flash Memory Translation Layer (NFTL).” 
[41] Nitesh Goyal and Rabi N Mahapatra 
"Energy Characterization of CRAMFS for 
Embedded Systems", Proceedings of 
International Workshop on Software 
Support for Portable Storage (IWSSPS), 
March 2005. 
[42] Siddharth Choudhuri, Rabi Mahapatra, 
"Energy Characterization of Filesystems 
for Diskless Embedded Systems", Design 
Automation Conference (DAC), June 2004. 
[43] Aleph One Company, “Yet Another Flash 
Filing System (YAFFS) "' 
[44] L. P. Chang and T. W. Kuo, “An Adaptive 
Striping Architecture for Flash Memory 
Storage Systems of Embedded Systems,” 
8th IEEE RTAS, September 2002, pp. 
187-196 
[45] Han-joon Kim and S. Lee, “A New Flash 
Memory Management for Flash Storage 
System.“, In Proceedings of the 23rd 
Annual International Computer Software 
and Applications Conference, pages 
284–289, 1999. 
[46] Ousterhout, J., Da Costa, H., Harrison, D., 
Kunze, J., Kupfer, M., and Thompson, J., A 
Trace- Driven Analysis of the UNIX 4.2 
BSD File System, Proceedings of the Tenth 
Symposium on Operating Systems 
Principles, Orcas Island WA, December 
1985, pp. 15-24. 
[47] Atsuo Kawaguchi et al., “A Flash-Memory 
Based File System”, in USENIX Technical 
