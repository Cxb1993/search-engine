2 
針對粗顆粒多重臨界電壓 CMOS 技術之電源開關繞線 
“Power-Switch Routing for Coarse-Grain MTCMOS Technologies” 
計畫編號：NSC99-2221-E-009-186 
執行期間：99 年 8月 1 日 至 100 年 7 月 31 日 
主持人：趙家佐 交通大學電子工程系副教授 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
4 
successfully turned on. Besides finding a feasible Hamiltonian 
path of MTCMOS switches, the switch routing also attempt to 
minimize the length of the Hamiltonian path so that more 
routing resources can be left for the routing of low-Vt cells. 
However, not any pair of switches can be connected to each 
other. The Manhattan-distance between two connected switches 
has to be under a limit. Otherwise the loading added from the 
connection would violate the output-loading constraint of cell’s 
timing library, resulting in an unpredictably long signal delay. In 
addition, the hard macros in the floorplan may break the 
regularity of switches’ placement, which further increases the 
difficulty of finding a feasible Hamiltonian path of switches. 
In this project, we develop a switch-routing framework for 
coarse-grain MTCMOS technologies, which first attempts to 
find a feasible Hamiltonian path covering all MTCMOS 
switches under the Manhattan-distance constraint and also 
minimize the length of the Hamiltonian path. If a feasible 
Hamiltonian path cannot be obtained, an acyclic trunk path 
covering a maximal number of switches will be reported along 
with branches covering the rest switches. The proposed 
switch-routing framework needs to take advantage of the 
location regularity of most switches, such that the path length 
can be minimized. Also the proposed framework needs to 
provide the flexibility to handle the location irregularity of some 
switches caused by hard macros, such that the resulting trunk 
path can cover maximal switches. In addition, the proposed 
switch-routing framework needs to be embedded in a design 
flow of the MTCMOS technology provided by an IC foundry 
[13]. We will conduct experiments on industrial MTCMOS 
designs to show that the proposed framework can effectively 
find a feasible Hamiltonian path with shorter length and shorter 
turn-on time. We will also compare the proposed framework 
with a state-of-the-art TSP solver (such as Concorde [15], 
GOBLIN [16], or LKH [17]). 
 
2. BACKGROUND 
   In this section, we introduce the MTCMOS technology and 
some related background information used in the proposed 
switch-routing framework. We focus on the discuss of 
MTCMOS designs using header switches. But the proposed 
framework can be easily applied to footer-switch MTCMOS 
designs in a similar manner. 
 
2.1. Architecture of MTCMOS Designs 
Figure 1 first illustrates the overview of an MTCMOS 
design using header switches. The power-gated low-Vt cells are 
connected to the virtual VDD, whose power supply is controlled 
by the MTCMOS switches placed between the virtual VDD and 
true VDD. When the system turns on the wake-up-request signal, 
the header switches are turned on in order so that the virtual 
VDD can obtain the power from the true VDD. After the system 
receives the wake-up-acknowledge signal, the system starts to 
send jobs to the gated logics. When the system turns off the 
wake-up-request signal, the switches are turned off and the 
virtual VDD cannot provide any power to the gated cells, 
meaning that no leakage current can be generated on the gated 
cells. 
 
Figure 1: MTCMOS power-supply architecture using 
header switches 
 
Figure 2 shows the physical layout of this 
power-supply architecture. On the vertical power meshes, 
the true VDD and VSS are alternatively provided. On the 
horizontal power rails, the virtual VDD and VSS are 
alternately provided, where an MTCMOS switch is placed 
to control the connection between a true-VDD mesh and a 
virtual-VDD rail. A VSS rail is directly connected to a VSS 
mesh through a via. Therefore, the location of an 
MTCMOS switch must be on the intersection of a vertical 
power mesh and a horizontal power rail. The spacing 
between two power rails depends on a standard cell’s height 
and the spacing between two power mesh depends on the 
whole chip’s power planning. 
 
 
Figure 2: Physical layout of the MTCMOS 
power-supply architecture using header switches. 
 
2.2. Switch Allocation 
The area ratio of the MTCMOS switches over the total 
cells determines the IR drop on the power rails as well as 
the placement pattern for the switch allocation. The 
switch-placement pattern used in our MTCMOS designs is 
similar to Figure 3. 
 
 
Figure 3: Placement pattern of MTCMOS switches. 
According to the switch-placement pattern, the switch 
allocation then evenly places the MTCMOS switches over 
the IC except the hard macros, where no switch can be 
inserted. If the encountered hard macro is an SRAM core or 
6 
 
Figure 7: Trunk path and branch for switch 
routing. 
The second objective of the switch routing is to 
minimize the total length of the trunk path in terms of 
Manhattan-distance. A shorter trunk path can leave more 
routing resources for the routing of the gated low-$V_t$ 
cells. Also, a shorter routing path can result in a shorter 
response time of the wake-up-acknowledge signal. 
The problem formulation of the proposed 
switch-routing framework is summarized as follows. 
Input:  
 The location of each switch after switch 
allocation. 
 The Manhattan-distance constraint between two 
connected switches. 
 The starting location (the wake-up-req. signal). 
Output: 
 A trunk path which visits each switch at most 
once. 
 Branches which cover the switches not visited by 
the trunk path. 
Objective: 
 First priority: maximize the number of switches 
covered by the trunk path. 
 Second priority: minimize the total length of the 
trunk path and branches in terms of 
Manhattan-distance. 
 
3.2. MTCMOS Switch Routing Using TSP Solver 
Several TSP solvers have been developed in the past 
to find a Hamiltonian path with minimal length. However, 
current public TSP solvers (such as Concorde [15], 
GOBLIN [16], or LKH [17]) are all performed based on a 
complete graph, where any two nodes are connected to each 
other and a Hamiltonian path can always be easily found. 
Due to the Manhattan-distance constraint, the connection 
graph of MTCMOS switch routing is not complete and 
hence the existing TSP solver cannot be directly applied to 
solve the MTCMOS switch routing. 
In order to do so, we try the following method based 
on a modified complete graph. First, we assign each edge's 
weight as the distance between the two switches of the edge 
if this distance is smaller than the given Manhattan-distance 
constraint. Then, to further lead the TSP result to satisfy the 
Manhattan-distance constraint, we assign an excessively 
large weight to each edge whose distance between its two 
switches exceeds the constraint. In our experiment, this 
excessively large weight is set to the summation of the 
distance between any two switches. In other words, as long 
as any of those constraint-violated edges is included in the 
resulting Hamiltonian path, the length of the Hamiltonian 
path is guaranteed to be larger than that of a path including 
no constraint-violated edge. Therefore, while a TSP solver 
tries to minimize the path length, those constraint-violated 
edges should be avoided if the TSP algorithm is optimal 
enough. 
Unfortunately, the TSP solvers we tried cannot lead to 
a Hamiltonian path without going through a 
constraint-violated edge. We will show the experimental 
results later in the project. This inefficiency of using an 
existing TSP solver to solve MTCMOS routing is actually 
one of our motivations to develop our own framework for 
MTCMOS switch routing. 
 
4. PROPOSED SWITCH-ROUTING FRAMEWORK 
Basically, our switch-routing framework applies a 
greedy-based algorithm to find a minimal Hamiltonian 
trunk path of switches. The algorithm begins with a given 
starting point (the wake-up-req. signal) and each time 
selects the unvisited switch closest to the current switch as 
the next routed switch. Also, we utilize the following three 
techniques, the bridge creation (Section 4.2), the switch 
absorption (Section 4.3), and the rectangle routing (Section 
4.4), to enhance algorithm’s flexibility of finding a feasible 
Hamiltonian path and reduce total path length. 
 The bridge creation is applied when the distance from 
the current switch to its closest switch exceeds the 
Manhattan-distance constraint. The switch absorption is 
applied when using bridge creation may increase the total 
path length too much. The rectangle routing is applied to 
preserve some rectangles containing a maximal number of 
regularly-placed switches and then route the switches inside 
those rectangles with a minimal-length path. The data 
structure representing switch’s location is shown in Section 
4.1. The overall flow of the proposed switch-routing 
framework is summarized in Section 4.5. 
4.1. Data Structure for Switch’s Location 
In our switch-routing framework, we use a 
two-dimensional position matrix to record the location of 
switches. The elements on the same row (column) have the 
same coordinate in the X (Y) axis. If the value of an 
element is 1, a switch is located at the element’s location. 
Otherwise, no switch exists on that location. The distance 
between each pair of adjacent rows (or columns) may not 
be the same and hence is recorded in another matrix, called 
distance matrix. The search for switches discussed in later 
subsections is performed based on the position and distance 
matrices. Note that we do not record the distance between 
each two switches to speed up the search of the closest 
switch. This is because the total number of switches in our 
MTCMOS design may be larger than 100K and the size of 
a N
2
 edge matrix may exceed our system’s limitation. 
 
4.2. Bridge Creation 
 Since a greedy algorithm is applied to select the next 
routed switch of the trunk path, it is quite often that the resulting 
8 
target switch is usually higher than absorbing one switch. 
However, after the bridge is created, we may be able to route a 
group of unvisited switches close to the target switch with short 
edges, which can compensate the cost of creating the bridge. 
Therefore, the cost of creating a bridge should be the average 
edge length added before the next bridge creation (including the 
length of the current bridge). 
 In fact, at the early phase of switch routing, a lot unvisited 
switches can be routed after a bridge is created. Thus, we will 
not consider the use of switch absorption at all until a high 
percentage of switches are already routed (more specifically, 
98% in our method), which can save the computational 
overhead of comparing the costs of bridge creation and switch 
absorption. Once using switch absorption, we stop using bridge 
creation and absorb all the remaining unvisited switches. 
Therefore, we compare the cost of creating a bridge with the 
average added length of absorbing each of the remaining 
switches. 
 The most possible way to absorb an unvisited switch is to 
break the edge either coming to or starting from its closest 
routed switch. Thus, the cost of absorbing the unvisited switch 
can be approximately estimated by the shorter added length of 
choosing either of the above two edges for absorption. To 
collect this absorption cost for all unvisited switches from 
scratch is expensive. Hence, for each unvisited switch, we 
record its closest routed switch, its distance to the closest routed 
switch, and its absorption cost. Each time a new switch is routed, 
we check whether its distance to each unvisited switch is smaller 
than its recorded closest distance. If yes, we update the 
closest-routed-switch information for the unvisited switch. If no, 
no change is made. Note that we start to record the above 
closest-routed-switch information when 98% of the switches are 
already routed. Its computational overhead is limited. 
 As to the second problem, the ordering of absorbed 
switches may affect its total added path length since the new 
absorbed switch may form a better edge to break for the later 
absorbed switches. Thus, we always absorb the switch with the 
shortest distance to its closest routed switch, leaving the other 
switches a chance of shortening their distance to their closest 
routed switch. Also, we maintain the same closest-routed-switch 
information as above to determine the next absorbed switch. 
 
4.4. Rectangle Routing 
 For a MTCMOS design, majority of the switches are 
placed regularly based on a placement pattern. To take 
advantage of this regularity, we first identify several 
maximal-size rectangles in which the switches are all regularly 
placed, meaning that the X-axis (or Y-axis) distance between 
any two adjacent switches is the same. Then we route all the 
switches inside a rectangle at once. In fact, the”rectangle” 
defined in our framework does not have a real rectangular shape 
physically due to the placement patterns, but we conceptually 
view it as a rectangle as shown in Figure 11. For such rectangles, 
a minimum Hamiltonian path covering all rectangle’s switches 
can always be found efficiently. 
 
 
Fig 11: (a) A conceptual rectangle used in our rectangle 
routing, and (b) the real location of the switches inside the 
rectangle. 
In our framework, we use only the following three 
types of Hamiltonian-path routing to route the switches 
within a rectangle. Because the X-axis unit length (X-axis 
distance between two adjacent switches) is much longer 
than the Y-axis unit length in the used placement pattern, we 
try to avoid the traverse in X-axis as much as possible. With 
these three types of Hamiltonian-path routing, we can 
guarantee that the resulting Hamiltonian path within the 
rectangle has the shortest length given the input switch (the 
first routed switch). Once the routing type and the input 
switch is determined, its output switch (the last routed 
switch in the rectangle) is determined as well. 
 Figure 12 shows the three types of Hamiltonian-path 
routing and their corresponding path length on a M x N 
rectangle. When the input switch is on the top (or bottom) side 
of the rectangle, we apply the Type-1 routing. To use the 
Type-1 routing, P has to be odd, where P means that the input 
switch is the Pth switch on the top side counting from the closer 
right or left side. Therefore, an input switch with an even P will 
not be considered when the routing starts from the top side. 
 
 
Fig 12: Rules for routing a single rectangle. 
 When the input switch is on the left (or right) side, we 
choose the proper routing between type-2 and type-3 routing. To 
apply type-2 routing, N has to be even, where N is number of 
rows. To apply type-3 routing, G has to be odd, where G means 
that the input switch is the Gth switch on the left side counting 
from the closer top or bottom side. If both type-2 and type-3 
routing cannot be applied to an input switch, then that input 
switch will not be considered when the routing starts from the 
left side. If both type-2 and type-3 routing can be applied to an 
input switch, then both types will be considered for that input 
switch. Note that the total length for each type routing listed in 
Figure 12 is only an approximation (lower bound actually). The 
sawtooth-like top and bottom sides require a little extra length in 
10 
 
design chip size 
(mm2) 
# of 
switches 
# of 
rect. 
switch 
% in 
rect. 
Total 
MD 
(µm) 
trunk path 
coverage 
Runtime 
(sec) 
Case 1 13.595 17523 0 0 257385 100% 107 
1 40.10 256425 100% 90 
2 53.03 256349 100% 71 
3 55.41 257042 100% 73 
Case 2 13.552 20593 0 0 325196 100% 102 
1 39.14 323945 100% 102 
2 50.17 327959 100% 112 
3 51.27 326792 100% 80 
Case 3 29.426 57035 0 0 853093 100% 373 
1 40.16 852055 100% 181 
2 58.09 850614 100% 111 
3 72.31 854374 100% 150 
Case 4 66.234 173420 0 0 2570350 100% 4139 
1 39.04 2545080 100% 1512 
2 46.06 2548310 100% 1589 
3 52.14 2550770 100% 1374 
Table 1: Results of the proposed switch-routing framework 
on 4 industrial MTCMOS designs. 
 
As the result shows, the proposed switch-routing framework 
can always find a feasible trunk path covering all the switches.   
Also, using only the largest one or two rectangles can already 
result in the shortest trunk path. It is because majority of the 
switches are regularly placed in real designs so that the largest 
two rectangles can cover around 50% of the total switches. In 
addition, the reported runtime demonstrates that the complexity 
of the proposed framework is scalable to large industrial designs, 
where the longest runtime is around 1.15 hours for routing 173K 
MTCMOS switches. Even we try the number of used rectangles 
from 0 to 3 respectively, the total runtime for the largest case is 
around 2.4 hours. 
 
5.2. Compared with Vendor Solution 
In this subsection, we compare the proposed framework with 
a rough solution provided by an EDA vendor, which is a script 
file operating on the design database used in a back-end tool, 
not a tool’s standard built-in function. Also, this solution does 
not consider the Manhattan-distance constraint. However, it is 
the only switch-routing solution we can get from our EDA 
vendor. Actually, one of our motivations to start developing the 
proposed switch-routing framework is from seeing the 
inefficiency of this rough vendor solution. The comparison 
results are reported in Table 2. 
In Table 2, Column 3 and 4 list the total Manhattan distance 
of the trunk path and its number of violations against the 
Manhattan-distance constraint, respectively. Column 5 and 6 list 
the total wire length and the number of vias in use after detail 
route, respectively. Column 7 lists the path’s response time from 
the wake-up-request signal to the wake-up-acknowledge signal.  
As the result shows, the proposed switch-routing framework 
performs better than the vendor’s solution at every reported item.  
Note that the switch delay with an oversized output loading is 
estimated by using the linear extrapolation.  The actual 
response time for the vendor’s solution might be larger than the 
reported number shows. 
 
 
 
design method total MD 
(µm) 
# of MD 
violation 
wire length 
(µm) 
# of via response 
time (µs) 
Case 1 vendor 922634 382 1907690 142625 7.87 
proposed 256349 0 573513 142119 6.62 
Case 2 vendor 908123 317 1892643 168948 8.53 
proposed 323945 0 720615 167933 7.67 
Case 3 vendor 1991841 429 4193585 475952 21.85 
proposed 850614 0 1904906 464989 19.79 
Case 4 vendor 5356878 580 11346593 1438786 63.28 
proposed 2545080 0 5715291 1416614 58.50 
Table 2: Comparison between the propose framework 
and a vendor solution. 
 
5.3. Compared with Vendor Solution 
In this subsection, we attempt to solve the switch-routing 
problem by applying a TSP solver based on a modified 
complete graph as described in Section 3.2. Since we set an 
excessively large weight to each edge whose distance between 
its two switches exceeds the constraint, the TSP solver should 
avoid passing through such a constraint-violated edge while 
minimizing the total path length. If the TSP solver is optimal 
enough, no constraint-violated edge will be visited and hence a 
feasible Hamiltonian path can be found. 
We first implement a simple greedy TSP algorithm, denoted 
as TSP1, which selects the unvisited switch closest to the 
current switch as its next ordered switch each time. Also, TSP1 
will try several different initial switches individually. Among 
those trails, TSP1 reports the Hamiltonian path covering the 
least number of constraint-violated edges. The number of trials 
used in TSP1 is 0.1% of the total switches. Note that the search 
of the closest unvisited switch is done based on the same data 
structure as the proposed method (Section 4.1), such that we can 
avoid the use of a huge N
2
 matrix for storing all edge’s weight, 
where N is the total number of switches. Thus, the search of the 
closest unvisited switch in TSP1 may be relatively slow 
compared to the use of a N
2
 edge matrix. 
Table 3 compares the total Manhattan distance of the 
resulting Hamiltonian path, the number of constraint-violated 
edges, and the runtime between TSP1 and the proposed 
framework. As the result shows, the listed total Manhattan 
distance between TSP1 and the proposed framework is close.  
However, the path reported by TSP1 contains at least 24 more 
constraint-violated edges for each benchmark design.  To 
eliminate all the constraint-violated edges from the reported 
path, a significant amount of Manhattan distance is needs be 
added to form a feasible Hamiltonian path. Also, the runtime of 
TSP1 is much longer than that of the proposed framework, 
especially for the largest design. 
 
design method total MD 
(µm) 
# of MD 
violation 
runtime 
(sec) 
Case 1 TSP1 259218 24 1008 
proposed 256349 0 71 
Case 2 TSP1 321048 28 1087 
proposed 323945 0 102 
Case 3 TSP1 857110 26 10298 
proposed 850614 0 111 
Case 4 TSP1 2550120 32 193379 
proposed 2545080 0 1512 
Table 3: Comparison between the propose framework 
and a greedy-based TSP solver. 
 
12 
[20] G. Guti n, H. Jakubowicz, S. Ronen, and A. Zverovitch, 
Seismic Vessel Problem, Communications in DQM 8, 
pp.13-20, 2005. 
表 Y04 
 
四、攜回資料名稱及內容: 
攜回一 CD 論文集 
 
 
五、其他 
無 
 
 
99 年度專題研究計畫研究成果彙整表 
計畫主持人：趙家佐 計畫編號：99-2221-E-009-186- 
計畫名稱：針對粗顆粒多重臨界電壓 CMOS 技術之電源開關繞線 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 6 6 100%  
博士生 2 2 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 6 6 100%  
博士生 2 2 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
