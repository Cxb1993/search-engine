746 WSEAS TRANSACTIONS ON COMMUNICATIONS Issues 5, Volume 5, May 2006 ISSN:1109-2742 
alleviated when the system is able to allocate 
multiple OVSF codes to a request, the system 
complexity and the design cost will be increased 
when multiple transceivers are involved in user 
equipment. Thus, due to the system complexity and 
the associated design cost, the number of codes 
assigned to a request will be limited, and the problem 
of code blocking cannot be completely alleviated.  
Two important strategies have been proposed to 
reduce the effects of code blocking. They are the 
code assignment scheme, which tells us how to 
allocate an appropriate code to a request, and the 
code reassignment scheme which tells us how to 
relocate the codes in the OVSF code trees when code 
blocking occurs. The code reassignment mechanism 
proposed in [3] can completely alleviate code 
blocking, but will incur code reassignment costs.  
There is much literature available  [3]-[20], that 
is focused on code assignment and code reassignment 
problems. Most of these studies are under a 
single-code-per-request environment [5] to [14]. For 
a multiple-code-per-request environment there is 
scant literature available.. Although the single-code 
researches could be extended, there are some 
problems that need to be studied, such as the amount 
of codes to be assigned to a request, the sequence of 
the code assignment, and the relationship between 
the allocated codes. In this paper, we address the 
multi-code assignment strategy in the forward link of 
the UMTS system. Our multi-code assignment 
strategy is designed based on the single-code 
assignment and reassignment strategies proposed in 
[11]-[13]. The major goal of our multi-code 
assignment strategy is to derive a code word, whose 
resources waste ratio is less than the constraint. The 
required codes of the code word should be as few as 
possible, and the system must be able to find the 
appropriate codes to satisfy the condition of the code 
word.  
The rest of this paper is organized as follows. In 
section 2 we look at some of the reviews regarding 
the code management strategies, and section 3 we 
describe our code word generation method. The 
simulation results are described in section 4, and 
finally we draw our conclusion in section 5. 
 
2   Related works 
Many single-code-per-request assignment strategies 
have been proposed in the past few years, including 
the Left-most strategy (LM)[4], Compact Index 
strategy (CI)[5][6], Regional division assignment 
strategy [7], Crowded-First strategy (CF)[8][9], 
weight crowded- first strategy [10], and 
Crowded-Group First strategy (CGF) [11][12][13]. 
These strategies are all focused on reducing code 
blocking probability and the time complexity. The 
left-most strategy allocates the code placed in the 
code tree as much as possible to the left to the request. 
Chen et al. proposed an improvement on the 
Left-most strategy [14]. The strategy allocates codes 
placed on the left-hand side of the code tree to the 
requests with low data rate, and allocates codes 
placed on the right-hand side to the requests with a 
high data rate. When each request ends its service, the 
request occupying the code on the rightmost side, is 
relocated to the code just released. The main 
drawback of these strategies is that it may perform a 
large number of unnecessary code reassignments.  
The compact index strategy tries to reduce the 
probability of code blocking without the 
reassignment strategy. It tries to allocate the code in 
the crowded branch to the request. It selects the codes 
based on the value of the compact index, which 
represents the positional relationship of a code in the 
code tree. The code in the crowded branch has a 
smaller compact index value. Thus, the code with the 
smaller compact index is preferred for allocation. 
The computation complexity of the strategy is 
O(NlogN). 
The crowded-first strategy improves the 
computation complexity by solving the code 
assignment problem. It always selects the code 
whose immediate upper-layer sub-branch will have 
the least free capacity after the allocation. The basic 
idea of this strategy is similar to that of the compact 
index strategy, but the computation complexity of the 
crowded-first strategy is O(N). However, due to the 
fact that this strategy may require a recursive search 
from the level of the request’s rate up to the root node, 
its main drawback is the large amount of decision 
time.  
The idea of the weight crowded-first strategy is 
quite similar to the crowded-first strategy. The 
difference is that it selects the code with the minimal 
number codes that will be blocked after the candidate 
code is assigned. Since the number of the lower layer 
codes to be blocked is the same for every candidate 
codes, the difference will be in the number of the 
upper layer codes to be blocked. The computation 
complexity of this strategy is slightly better than that 
of the crowded-first strategy. However, the code 
blocking probability of this strategy is worse than 
that of the crowded-first strategy.   
In order to improve the computation complexity, 
we proposed the crowded-group first strategy. The 
main idea behind our strategy is to make the OVSF 
code tree as compact as possible in order to be able to 
accept more new requests At first glance it looks very 
similar to the compact index strategy and the 
748 WSEAS TRANSACTIONS ON COMMUNICATIONS Issues 5, Volume 5, May 2006 ISSN:1109-2742 
identified as Csf,bn, where sf is the spreading factor, 
and its range is from 4 to 512 (downlink) or from 4 to 
256 (uplink) for the chip rate of 3.84 Mcps. The 
second sub-index, bn, is the branch number, and its 
range is from 1 to sf. Let S=(s1, s2, s3, s4, s5, s6, s7,) 
denote the set of the current residual codes in the 
system, and si denotes the amount of the unused code 
whose spreading factor is 2i+1, where 71 ≤≤ i . The 
value of si can be evaluated by using the cost 
functions proposed on [11]-[13]. Let A denote a code 
word, A=(a1,a2,a3,a4,a5,a6,a7,), and ai denotes the 
required codes whose spreading factor is 2i+1, where 
71 ≤≤ i . The actual demand rate of request j is Rj, 
and the capacity of code word A is Ra. The resources 
waste ratio can be defined as (Ra-Rj)/Ra. Let f denote 
the maximal resources waste ratio. Assuming that at 
most n codes can be used by each request, our goal is 
to derive a code word with a resources waste ratio 
that is less than f. The required codes of the code 
word should be as few as possible, and the system can 
find the appropriate codes to satisfy the condition of 
the code word. 
The detailed procedure of the code word 
generation is described as follows: 
1. Let Rj’= Rj, and i=1. set ai=0, 71 ≤≤ i . 
2. If the data rate of spreading factor 2i is less than 
Rj’, then jump to step 3. Else, increase i until the 
data rate of spreading factor 2i is less than Rj’, 
and i≤ 7. If i>7, and the resources waste ratio ≤ f 
when c7=c7+1, then update S and jump to step 6. 
Else, jump to step 7. 
3. If si>0, then Rj’= Rj’-(data rate of spreading 
factor 2i), ai=ai+1, and si = si-1. Update S. 
4. If Rj’>0, and the amount of the codes of the code 
word < n, increase i and return to step 2. Else If 
Rj=0, jump to step 6. 
5. ai=ai-1, and si = si+1. Decrease i. If si-1>0, and 
resources waste ratio ≤ f when ai-1=ai-1+1, 
Update S and jump to step 6. Else, jump to step 7. 
6. If there is a requirement with ak>1 and sk-1>0, 
then ak=ak-2 and sk-1=sk-1-1 and update S. 
Allocates the codes to satisfy the condition of the 
code word A. 
7. The system cannot find the appropriate code 
word under the assumption that at most n codes 
can be used by each request, and under the 
constraint of maximal resources waste ratio f. 
The request j should be blocked. 
In this paper, we have adopted the 
crowded-group first strategy proposed in [11]-[13] to 
select the appropriate code. The system will allocate 
the code by increasing order of the spreading factor. 
For example, let us consider the code tree in Figure 1, 
S=(0,0,0,1,3,7,19), f=20%, and n=2. Suppose a 
request with data rate 6R arrives, the code word of 
this request is  (0,0,0,0,1,1,0). Then the system will 
allocate code C64,2, and code C128,12, to the request. Or 
suppose that a request with data rate 7R arrives, the 
code word of this request is (0,0,0,1,0,0,0). The 
system will allocate code C32,4 to the request. Let’s 
suppose n=3, the code word of the request with data 
rate 7R is (0,0,0,0,1,1,1), and the system will allocate 
the code C64,2, the code C128,12, and the code C256,2, to 
the request. 
However, suppose f=10% and a request with 
data rate 7R arrives, then the system cannot find the 
appropriate code to satisfy the request, and the 
request with data rate 7R will be blocked. It is evident 
that when f=100% and all the si is ∞ , the code word 
generated by our method is the same as that generated 
by the method proposed in [19]. 
It is evident that the required codes of the code 
word generated by our method are as few as possible, 
and the system can find the appropriate codes to 
satisfy the condition of the code word. The 
computation complexity of the code word generation 
method is bounded by the amount of the assigned 
OVSF code, and by the layers of the OVSF code tree. 
 
4 Simulation results  
In this section, we implement a simulator to evaluate 
the performance of the proposed code generation 
method in the above sections. According to the 
UMTS standard [1,10], the maximal spreading factor 
of the simulation is 256. New requests arrive in a 
Poisson distribution with mean arrival rate λ  
(requests/unit time), and the data rate of each request 
is between 1R to16R. The request duration is 
exponentially distributed with a mean value of 1 unit 
of time. The traffic pattern can be denoted as the ratio 
of the arrival rate of (1R:2R:3R:4R:5R:6R:7R:8R) or 
(1R:2R:3R:4R:5R:6R:7R:8R:9R:10R:11R:12R:13R:
14R:15R:16R). To ensure stable results, each 
simulation will run with at least 1,000,000 incoming 
requests. In the following we make observations on 
the impact of the constraint on the amount of 
allocated code, and on the impact of the constraint of 
the maximal resources waste ratio. 
In this study we are interested in two 
performance metrics: the resource utilization, and the 
code blocking probability. The definition of resource 
utilization is proposed in [7][8], and the code 
blocking probability is defined as [7][8]. 
 
∑
∑
=
== K
k
k
K
k
kk B
ilitying probabcode block
1
1
λ
λ   
where kλ , and kB  are the arrival rate, and the code 
750 WSEAS TRANSACTIONS ON COMMUNICATIONS Issues 5, Volume 5, May 2006 ISSN:1109-2742 
variable-spreading-factor codes in W-CDMA,” 
Proc. IEEE Vehicular Technology Conf. Fall, pp. 
1884-1888, 2001. 
[8] Y.-C. Tesng, C.-M, Chao, and S.-L. Wu, “Code 
Placement and Replacement Strategies for 
Wideband CDMA OVSF Code Tree 
Management,” in Proc. Of IEEE GLOBECOM, 
vol.1, pp. 562-566, 2001.  
[9] Y.-C. Tesng, C.-M, Chao, and S.-L. Wu, “Code 
Placement and Replacement Strategies for 
Wideband CDMA OVSF Code Tree 
Management,” IEEE Transaction on Mobile 
Computing, Vol. 1, No. 4, pp. 293-302, Oct.-Dec. 
2002.  
[10] A. N. Rouskas, D. N. Skoutas, “OVSF codes 
assignment and reassignment at the forward link 
of W-CDMA 3G systems,” Proc. IEEE PIMRC, 
pp. 2404 –2408, 2002. 
[11] M.-X. Chen, and R.-H. Hwang, “Efficient Code 
Assignment Strategy for UMTS,” IEEE 
Vehicular Technology Conference (VTC Fall 
2004), Los Angeles, Sep. 2004. 
[12] M.-X. Chen, and R.-H. Hwang, “Efficient 
OVSF codes assignment strategy and 
management architecture in Wideband 
CDMA,”IEEE First International Conference on 
Broadband Networks (BROADNETS 2004), San 
Jose, Oct. 2004. 
[13] M.-X. Chen, and R.-H. Hwang, “Efficient 
OVSF code assignment and reassignment 
strategies in UMTS," IEEE Transactions on 
Mobile Computing, to appear.  
[14] W.-T. Chen, Y.-P. Wu and H.-C. Hsiao, “A 
Novel Code Assignment Scheme for W-CDMA 
Systems,” Proc. IEEE Vehicular Technology 
Conf. Fall, pp. 1182-1186, 2001.  
[15] B.-J. Chang, M.-X. Chen, R.-H. Hwang, and 
J.-F. Juang, “Markov-based OVSF Code 
Assignment Scheme and Call Admission Control 
for Wideband-CDMA Communications,” 
Wireless Personal Communications, Vol. 34, 
No.4, pp. 373-394, Sep. 2005. 
[16] W.-T. Chen, Y.-P Wu, and H.-C. Hsiao, “A 
Novel Code Assignment Scheme for W-CDMA 
Systems,” Proc. IEEE Vehicular Technology 
Conf. Fall, pp. 1182-1186, 2001. [17] R.-G. 
Cheng and P. Lin, “OVSF Code Assignment for 
IMT-2000,” Proc. IEEE Vehicular Technology 
Conf. Spring, pp. 2188-2192, 2000. 
[18] F. Shueh, Z.-E. P. Liu, and W.-S. E. Chen, “A 
fair, efficient, and exchangeable channelization 
code assignment scheme for IMT-2000,” in Proc. 
IEEE Int. Conf. Personal Wireless 
Communications (ICPWC), Hyderabad, India, 
2000, pp. 429–433. 
[19] C.-M. Chao; Y.-C. Tseng; L.-C. 
Wang, ”Reducing internal and external 
fragmentations of OVSF codes in WCDMA 
systems with multiple codes,” Proc. of IEEE 
WCNC 2003, pp. 693-698, 2003. 
[20] C.-M. Chao, Y.-C. Tseng, and L.-C. Wang, 
“Reducing Internal and External Fragmentations 
of OVSF Codes in WCDMA Systems With 
Multiple Codes,” IEEE Trans. on Wireless 
Communications, Vol. 4, No. 4, pp. 1516-1526 
July 2004. 
 
Fig. 1: System structure 
752 WSEAS TRANSACTIONS ON COMMUNICATIONS Issues 5, Volume 5, May 2006 ISSN:1109-2742 
0
0.1
0.2
0.3
0.4
0.5
0.6
30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 105 110
Traffic Load
Pr
ob
. O
f C
od
e 
B
lo
ck
in
g #1 #2 #3 #4
#5 #6 #7
 
(a) f=0% 
0
0.1
0.2
0.3
0.4
0.5
0.6
30 34 38 42 46 50 54 58 62 66 70 74 78 82 86 90 94 98 102 106 110
Traffic Load
Pr
ob
. O
f C
od
e 
B
lo
ck
in
g
#1 #2 #3 #4
#5 #6 #7
 
(b) f=20% 
0
0.1
0.2
0.3
0.4
0.5
0.6
30 34 38 42 46 50 54 58 62 66 70 74 78 82 86 90 94 98 102 106 110
Traffic Load
Pr
ob
. O
f C
od
e 
B
lo
ck
in
g
#1 #2 #3 #4
#5 #6 #7
 
(c) f=40% 
Fig. 4: The code blocking probability: traffic 
pattern=(1:1:1:1:1:1:1:1) 
0
0.1
0.2
0.3
0.4
0.5
30 36 42 48 54 60 66 72 78 84 90 96 102 108Traffic Load
#1 #2 #3 #4
#5 #6 #7
 
(a) f=0% 
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
30 34 38 42 46 50 54 58 62 66 70 74 78 82 86 90 94 98 102 106 110
Traffic Load
Pr
ob
. O
f C
od
e 
B
lo
ck
in
g #1 #2 #3 #4
#5 #6 #7
 
(b) f=20% 
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
30 34 38 42 46 50 54 58 62 66 70 74 78 82 86 90 94 98 102 106 110
Traffic Load
Pr
ob
. O
f C
od
e 
B
lo
ck
in
g
#1 #2 #3 #4
#5 #6 #7
 
(c) f=40% 
Fig. 5: The code blocking probability: traffic pattern 
B 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
