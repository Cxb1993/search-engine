摘要 
工作流程管理技術提供對於企業內複雜商業流程(business process)的模組化管理，一般說來
一個工作流程管理系統(WFMS, Workflow Management System)是由兩個主要的元件-設計環
境與執行環境-所組成，為了要確保所建構目標工作流程系統的正確性，工作流程規格的結
構、時序以及資源正確性都必須被檢驗。在本報告中，我們以遞增性的方法，針對設計過
程中每次設計動作之後的資源統一性以及時序限制進行分析，並且提供適當的資訊給設計
者以及系統維護者，以求幫助正確的建構有效率的工作流程應用程式。 
 
關鍵字：工作流程管理系統，遞增性方法，資源統一性，時序限制 
 
Abstract 
 
Workflow management technology helps modulizing and controlling complex business 
processes within an enterprise. Generally speaking, a workflow management system (WfMS) is 
composed of two primary components, a design environment and a run-time system. Structural, 
timing and resource verifications of a workflow specification are required to help assure the 
correctness of the specified system. In this paper, we address an incremental methodology to 
analyze resource consistency and timing constraints after each editing activity of a workflow 
specification and to provide proper feedbacks to designer or maintainer of the workflow 
specification.  
 
Keywords: Workflow Management System, WfMS, Incremental Methodlogy, Resource 
Consistency, Timing Constraints 
Definition 1 (Workflow Specification) 
Workflow Specification ws = (N, F, R, S, E) 
(1) N: a set of processes, where ∈∀n N, n.TYPE  = {ACTIVITY, AND-SPLIT, 
XOR-SPLIT, AND-JOIN} 
(2) F: a set of flow, where F, f = (n∈∀f i, nj), ni, nj∈ N∪ {S, E} 
(3) R: a set of sets of resources referenced by each process, where R, = {r∈∀ iR iR n | rn 
is a resource accessed by ni, ni∈N, ni.Type = ACTIVITY} 
(4) S and E are the starting and the ending process correspondingly. S, E  N ∈
 
[2] describes path, reachability, distance and ancestor. In order to construct our algorithm, 
we define path, reachability, distance, ancestor, distance to ancestor, nearest common ancestor 
and control block formally in following definitions.  
 
Definition 2 (Path) 
A path p = (n1, n2, …, nt) where  i, 1 ≤ i ≤ t-1, ∀ ∈+  )n,(n 1ii F 
A path p is acyclic, if  n∀ i, nj∈ p, i ≠ j, ni ≠ nj
The length of an acyclic path p is denoted as |p|. |p| = t 
 
Definition 3 (Reachability) 
Process nj is reachable from process ni if there is an acyclic path p = (ni, …, nj) Reachable(ni, 
nj) is a boolean function to denote whether nj is reachable from ni 
 
function returns the distance between two processes ni and nj 
Definition 5 (Ancestor) 
stor of nj if Reachable(ni, nj) = True 
estor of both nj and nk
 
efinition 6 (Distance to the Common Ancestor) 
. We define distance of nj, nk to its common 
e(ni, nj), Distance(ni, nk)) 
Definition 7 (Nearest Common Ancestor) 
stor of nj and nk where DCA(ni, nj, nk) is the shortest 
 
In our algorithm, function NCA(ni, nj) is defined as a function returns the nearest common 
efinition 8 (Control Block) 
trol Block where ns, n
⎪⎩
⎪⎨
⎧
=
∃
=
otherwise.FALSE,
  )n,...,(np               
path  a   if TRUE,
)n,nReachable( jiji
Definition 4 (Distance) 
Distance(ni, nj) is a 
 
Process ni is an ance
Process ni is a common ancestor of nj and nk if ni is an anc
D
Let ni is the common ancestor of nj and nk
ancestor ni as DCA(ni, nj, nk) 
DCA(ni, nj, nk) = MIN(Distanc
 
Process ni is a nearest common ance
among all the common ancestor of nj and nk. 
 
 
ancestor of process ni and nj 
 
D
B = (ns, ne, NB) is a Con e∈N, NB is a subset of N. NB contains each 
n
nly if ne.TYPE = AND-JOIN or 
ly if NB1 NB2  = 
process n where Reachable(ns, n) = Reachable(n, e) = true. 
B.start = ns, B.end = ns and ns.TYPE = AND_SPLIT if and o
ns.TYPE = XOR_SPLIT if and only if ne.TYPE = XOR-JOIN. 
Two control blocks B1 and B2 are said to be distinct if and on ∩  φ , B is 
⎪⎪
⎪
⎩
⎪⎪
⎪
⎨
⎧
∞+
=
=
=
otherwise.,
) n ,n Reachable(              
or  ) n ,n Reachable(              
 if  ), }  )n ..., ,(np              
or    )n ..., ,(n  p   |   |p|  {  MIN(
)n,istance(n
ij
ji
ij
ji
jiD
1 
said to be totally contained by B2 if and only if NB1 ⊆  NB2. 
 
with the corresponding split path. The information used within an incremental algorithm is 
recorded in the resource list on each split path, and is updated when resource references and 
activity processes are added in or deleted from the workflow specification.  
Besides we define the notation for resource conflicts and how to record resource conflict for each 
efinition 13 (Resource Conflict) 
if and only if r is a resource, ni and nj 
process for usage of incremental algorithm. 
 
D ∈(r, ni, nj) is a resource conflict  N, r  R , Rj, and ni 
, n
Definition 14  
Conflict set for a Process) 
n or any i = 1,.., k and n ≠ n , (r, n, ni) is a resource 
he notation in definition 14 would be used in section 4. 
RD (Check Resource Dependency) 
cons
hen CSP 
back
SPLIT_PATH SET CSP 
ws,  
1. 
∈ i
and nj potentially concurrent in execution. W.L.O.G, (r, ni, nj) and (r j, ni) is considered as 
the same in our discussion. 
 
(Resource 
.Rd(r) = {n1, …, nk} is and only if f i
conflict 
 
T
There are two algorithms CSP (Collect Split Paths) and C
tructed. CSP is used to collect the processes which might execute concurrently and CRD is 
used to detect the resource dependencies among them. Since not all resource dependencies result 
in resource conflicts, the CSP algorithm is executed first and the result set is passed to CRD for 
execution. CSP and CRD are applied when adding or deleting a resource r associated with a 
process n. Adding a process can be viewed as adding multiple resources to the process, and 
deleting a process can be viewed as deleting all the resources referenced by the process. 
In CSP algorithm, first, a flow queue Q is initialized. Q is used to store the flows w
 tracks the processes starting from the target process n. At line 2 all the in-flows of n are put 
into Q. At line 5, the first flow f = (ni, nj) in Q is dequeued and checked for its type. If the 
algorithm finds that the source process of the flow, ni, is typed as AND-SPLIT, the resource list 
along with the split path which the process n belonging to is updated at line 8. The resource list is 
updated according to what editing operation that triggers the function. Adding resource reference 
to the target process can be viewed as adding resource reference to the split path where the target 
process n belongs to, and removing resource reference from the target process n can also operate 
in similar way. At line 9 to 10, the split paths from the AND-SPLIT process other than the path 
from the target process n are collected into the result SPLIT_PATH set CSP. At line 12, the 
in-flows of the ni are enqueued into Q, and the loop start from line 4 to line 12 continues until Q 
is empty. 
 
(workflow specification 
process n, resource r) 
CSP = φ  
2. flow qu eeu  Q = φ ; // initialize flow queue 
flow of process n into Q 
w
3. ∀  in-flow f of n, Q.enqueue(f); // put the in
4. hile Q ≠ φ  // back tracking ws from the process n 
5. Let f = Q.dequeue() and assume that f = (ni, nj)  
6. //collect information about parallel split path when //meet an AND-SPLIT  
7.    if (ni.TYPE = AND-SPLIT) then  
8. ∃  a split path SPk where ni, n ∈  SPk, Update  Resource List of SPk 
ac  p
9. 
 //co ce path into CSP 
cording to the editing operation on rocess n and r 
∀  out-flow of ni f’, where f’ = (ni, nk), nk ≠ nj  
10. llecting all the split paths other than the //sour
11. ∃  a split path SPm where ni, nk ∈ SPm, CSP = CSP + SPm 
12. ∀ -flow f” of n in i, Q.enqueue(f”) 
 
We have shown that any process which is potentially concurrent to target process n must be 
ESOURCE_CONFLICT SET CRD 
ce 
concluded in some split path contained in SPLIT_PATH set CSP. With the SPLIT_PATH set 
collected in CSP algorithm, line 2 and 3 of CRD algorithm check the resource list along with 
each split path to see if the resource r is referenced by other processes in the split paths not 
containing process n. At line 4 we update the resource conflict list according to the resource 
conflict found in algorithm. 
 
R
(SPLIT_PATH set P, process n, resour r ) 
1. CRD = φ  
4.   EST(n) = MAX( {EST(ni) + d(ni) |  
i, n)} );  
5.   LET(n) = MAX( {LET
f = (ni, n)} ) ; 
6. else if (n.Type = XOR-JOIN or n = End Process) then 
, n)} );  
8.   LET(n) = MAX( {LET
f = (ni, n)} ) ; 
9. else  
 (n) = EST(ni) + d(ni);  
n) ≠ EST_old or  
  then 
14.   store EST_old to EST’(
A ’, “ripple”); // continue 
∀  flow f =   (n
(ni) |  ∀  flow 
7.   EST(n) = MIN( {EST(ni) + d(ni) |  ∀  flow f = (ni
(ni) |  ∀  flow 
10.   EST
11.   LET(n) = LET(ni) + D(n); 
12. // store old data for analysis 
13. if ( mode = “target” or (EST(
LET(n) ≠ LET_old) )
n);  
15.   store LET_old to LET’(n) 
16.   ∀  n’ ∈ N, (n, n’) ∈ F,  
Calculate_E I(ws, n
 
.2. The Definition of Resource Conflict with Temporal Consideration and the Temporal 
With EAI for each activity process, two activity processes are potentially overlapped in 
exec
Definition 14 (Intersection between EAIs) 
d as [EST(ni), LET(ni)], [EST(nj), LET(nj)] 
. [EST(ni), 
4
Related Editing Operations 
 
ution if and only if their EAI are overlapped. Before we define the potential overlapped 
execution, two operators on EAI is defined as following. 
 
EAI of two processes ni, nj are denote
[EST(ni), LET(ni)] ∩ [EST(nj), LET(nj)] means the interaction of the two interval
LET(ni)] ∩ [EST(nj), LET(nj)] = φ  if and only if LET(ni) < EST(nj) or LET(nj) < EST(ni); 
on the contrtry, [EST(ni), LET(ni)] ∩ [EST(nj), LET(nj)] ≠ φ . If [EST(ni), LET(ni)] ∩ 
[EST(nj), LET(nj)] ≠ φ , [EST(ni), LET(ni)] ∩ [EST(nj), LET(nj)] is defined as 
[ MAX({EST(ni), EST(nj
 
Definition 15 (Total Containment between EAIs) 
eans [EST(nj), LET(nj)] is totally contained by 
 
After the operators for EAIs are defined, the formal description of potential overlapped execution 
efinition 16 (Potential Overlapped Execution) 
ly overlapped in execution if and only if ni, n
)}), MIN({LET(ni), LET(nj)}) ] 
[EST(nj), LET(nj)] ⊆  [EST(ni), LET(ni)] m
[EST(ni), LET(ni)]. [EST(nj), LET(nj)] ⊆  [EST(ni), LET(ni)] if and only if EST(nj) ≦ 
EST(ni) and  LET(ni) ≧ LET(nj).  
and the resource conflict with temporal consideration is defined in Definition 16 and 17. 
 
D
Two activity processes ni and nj are potential j ∈  
N where i ≠ j, ni.Type = nj.Type = ACTIVITY, and [EST(ni), LET(ni)] ∩ [EST(nj), LET(nj)] 
≠ φ  
 
Definition 16  
nflict with Temporal Consideration) 
ideration where r is a resource ni and nj 
(Resource Co
(r, ni, nj) is a resource conflict with temporal cons ∈ 
N if and only if r ∈ Ri, Rj, ni and nj are potentially concurrent potentially overlapped in 
execution. W.L.O.G, r, n (
 
Adding or deleting a resource reference from some process might increase or eliminate one 
or m
dding a new process with d(n) and D(n) zero, and 
caus
 of some process n (d(n) or 
D(n)
i, nj) and (r, nj, ni) is considered as the same in our discussion. 
ore resource conflicts, and only the processes in resource conflict are required to be checked 
if there’s any overlapping in their execution.  
Adding a new process can be viewed as a
es no effect on EAI of existing processes. Deleting an activity process can be viewed as the 
values of d(n) and D(n) of the target process are modified to zero.  
Directly modifying minimal and maximal execution duration
) affects EAI of its following processes until the influence disappears. Such editing operation 
is called temporal related editing operations. 
 
[LET’(n), LET(n)] )  then  
4.       RCT = RCT –(r, n , n)
i, nx, ni) is no longer  
6. else if ( LET’(
(ni),LET(ni)] ≠ 
x ; 
5.       info( resource conflict (r
potentially overlapped ); 
n) > LET(n) )  then 
7.   ∀  r ∈ R(n), (r, nx, n) ∈ n.rd(r) 
8.     if ( [LET(n),LET’(n)] ∩ [EST φ   
&& (r, nx, n) ∉ RCT )  en th
9.       RCT = RCT + (r,
th temporal  
 ) 
11. else if ( EST’(n
(ni),LET(ni)] ≠ 
 nx, n); 
10.       info( resource conflict wi
consideration(ri, nx, ni) is created
) < EST(n) )  then  
12.   ∀  r ∈ R(n), (r, nx, n) ∈ n.rd(r) 
13.     if ( [EST’(n),EST(n)] ∩ [EST φ   
14.       RCT ,
th temporal  
 ) 
16. else if ( EST’(n
)] ∩ [EST(ni),LET(ni)] ⊆  
hen 
19.       RCT = RCT –(r, n , n
i, nx, ni) is no longer  
21. if ( EST’(n) ≠ T(n) )  then 
&& (r, nx, n) ∉ RCT )  then 
 = RCT + (r, n  n); x
15.       info( resource conflict wi
consideration(ri, nx, ni) is created
) > EST(n) )  then 
17.   ∀  (r, nx, n) ∈ RCT 
18.     if ( [EST(n),LET(n
[EST(n),EST’(n)] )  t
x ); 
20.       info( resource conflict (r
potentially overlapped ); 
EST(n)) or (LET’(n) ≠ LE
22.   ∀  n’ ∈ N, (n, n’) ∈ F, CDM(ws, n’); 
 
 
5. Discussion of Time Complexity 
Since the existing work on analysis of resource conflicts in workflow specification neglect 
the t
ms through the number of processes 
t case with the total and static methodology, it has 
bette
tatic methodology in average case is still O(N), since it 
alwa
6. Conclusions and Future Work 
orkflow specification is a formal description of design and implementation of workflow 
 
emporal factors, in comparison of time complexity of our approach and the traditional one, 
we also focus on the part without temporal consideration. 
We simply discuss the time complexity of the algorith
required to be visited. With a workflow specification in which there are N processes. Since the 
total and static methodology for analysis of resource conflicts [2] visit all the processes in the 
workflow specification for each analysis, the worst case is O(N). In our approach, tracking of 
processes is required when detecting potential concurrent execution. The worst case is also O(N) 
when all the processes are sequentially ordered. However the calculation is only required when 
AND-SPLIT is met in algorithm CSP, and when all the processes are sequentially ordered, there’s 
no AND-SPLIT in the workflow specification. 
Although our approach has the same wors
r time complexity in average cases. 
The time complexity for total and s
ys tracks the whole schema. In our approach, the number of nodes required to be visited is in 
average equal to the length from the start process to the target process. Now we conclude the 
average case of our algorithm as O(logkN), where k is the average number of branches of each 
process. Value of k is influenced by the structure of the workflow specification. With a fixed 
number of processes in a workflow specification, more control processes results more branches 
for each process, i.e. the more processes visited the less calculations required, and therefore, our 
approach is much better in average cases to the traditional approach.  
 
 
W
applications. Proper environment for verification of structural, resource, and timing constraints 
helps designers produce workflow applications with high quality. There’re various effective 
approaches for verification of structural and temporal correctness. However, there lacks a real 
time approach for designers to verify resource conflicts associated with the designer’s editing 
activity. This paper describes an incremental algorithm verifying resource conflicts in workflow 
specification after every editing operation. We discuss the conditions causing resource conflicts 
and the algorithm to detect them. Our approach provides abundant information to the designer 
after each editing operation. The time complexity of efficiency about our algorithm is better then 
