同時考慮暫存器繫結及時序差異排序以最小化時鐘週期之研究 
Simultaneous Application of Register Binding and Clock Skew Scheduling  
For Clock Period Minimization 
 
計畫編號：NSC95-2221-E-033-075-MY2 
執行期間：95 年 8 月 1 日 至 97 年 7 月 31 日 
主持人：中原大學電子工程學系黃世旭副教授 
 
一、 中文摘要 
目前在高階合成階段，尚未有任何研究探討使
用時序差異來進行電路的最佳化。本專題研究
計畫是第一個嘗試非零時序差異電路的高階
合成之研究。我們發現：在高階合成階段，不
同的暫存器繫結會產生不同的時序限制，進而
對時鐘週期有顯著的影響。根據此觀察，我們
將暫存器繫結對時鐘週期最小化的問題公式
化。給定暫存器的個數，我們的目標是利用暫
存器繫結以最小化時鐘週期。在本專題研究計
畫，我們提出一個混合整數線性規劃方法以求
得最佳解，並提出兩個啟發式演算法來求得近
似最佳解。實驗結果顯示：大多數的測試電路
都可以達到時鐘週期的下限，且不需要額外增
加暫存器的數目。 
英文摘要 
In modern high-speed circuit design, the clock 
skew has been widely utilized as a manageable 
resource to improve the circuit performance. 
However, in the high-level synthesis stage, the 
circuit is never optimized for utilizing the clock 
skew. In this research project, we present the 
first attempt for high-level synthesis of nonzero 
clock skew circuits. We show the register 
binding in the high-level synthesis stage has a 
significant impact on the clocking constraints 
between registers. As a result, different register 
binding solutions lead to different smallest 
feasible clock periods. Based on that observation, 
we formally draw up the problem of register 
binding for clock period minimization. Given a 
constraint on the number of registers, our 
objective is to find the minimum-period register 
binding solution. In this research project, we 
propose an MILP (Mixed Integer Linear 
Programming) method to obtain the optimal 
solution, and two heuristic algorithms to solve 
the same problem in polynomial time complexity. 
Experimental data show, in most benchmark 
circuits, the lower bound of the clock period can 
be achieved without any extra overhead on the 
number of registers. 
 
二、 計畫的緣由與目的 
Among the various objectives in developing 
sequential circuits, clock period minimization is 
always one of the most important subjects. 
Especially, as design complexity continues to 
increase, it is necessary to develop more 
aggressive techniques for clock period 
minimization [1,2]. 
In the design of an edge-triggered circuit, if the 
clock edge arrives at each register 
simultaneously, the clock period cannot be 
shorter than the longest combinational delay. 
However, if the clock arrival times of registers 
are properly scheduled, the clock period of a 
nonzero clock skew circuit can be shorter than 
each register represents only one variable), this 
lower bound can be achieved. However, since 
there is no register sharing, this register binding 
solution uses too many registers. Thus this 
register binding solution is impractical. Let’s 
consider the register binding solution in which 
R1 = {a}, R2 = {b}, R3 = {c}, R4 = {d}, R5 = {e}, 
R6 = {f}, and R7 = {g}. Figure 2(a) gives the 
corresponding circuit graph G1. For the circuit 
graph G1, Figure 2(b) gives the corresponding 
constraint graph Gcg(G1), in which the setup 
constraints are drawn in solid lines and the hold 
constraints are drawn in dotted lines. By 
applying the minimum-period clock skew 
scheduling, the smallest feasible clock period of 
this register binding solution achieves 12, which 
is the lower bound of the clock period. However, 
this register binding solution requires 7 registers. 
 
Figure 1: (a) Scheduled DFG. (b) Lifetime 
analysis. 
 
Figure 2: (a) Circuit graph G1. (b) Constraint 
graph Gcg(G1). 
On the other hand, although we can use the left 
edge algorithm [10] to achieve the lower bound 
of the number of registers, the register binding 
solution obtained by left edge algorithm often 
restricts the utilization of clock skew. Let’s 
consider the register binding solution obtained 
by the left edge algorithm: R1 = {c,f}, R2 = 
{a,d,g}, and R3 = {b,e}. Figure 3(a) gives the 
corresponding circuit graph G2. Then, for the 
circuit graph G2, we derive the corresponding 
constraint graph Gcg(G2) as shown in Figure 3(b). 
We find, when the clock period is 16, a critical 
cycle host→R2→host already exists in the 
constraint graph Gcg(G2). Therefore, even if the 
minimum-period clock skew scheduling is 
applied, the smallest feasible clock period is still 
16 (that is, PMCSS(G2) = 16). In other words, in 
this example, if we adopt the register binding 
solution obtained by the left edge algorithm, the 
clock skew cannot be utilized to further improve 
circuit performance. 
 
Figure 3: (a) Circuit graph G2. (b) Constraint 
graph Gcg(G2). 
In fact, in this example, there is a register 
binding solution that not only uses the lower 
bound of the number of registers but also works 
with the lower bound of the clock period. Let’s 
consider the following register binding solution: 
R1 = {c,f}, R2 = {a,d}, and R3 = {b,e,g}. Note 
xu,i + xv,i ≤ 1.                                                             
If variable u is assigned to register Ri (that is, xu,i 
= 1), then the value of Tu must be exactly the 
same as the value of Ti. On the other hand, if 
variable u is not assigned to register Ri (i.e., xu,i 
= 0), then there is no constraint on the clock 
skew between Tu and Ti. Let s denote a constant 
value that approximates infinity, that is, s→∞, 
and thus does not restrict the clock skew. Then, 
for every combination of variable u and register 
Ri, we have the following two constraints: 
Tu - Ti ≤ (1 - xu,i) × s.                                                 
Ti - Tu ≤ (1 - xu,i) × s.                                                 
Let Dk denote the constant value corresponding 
to the maximum delay of operation ok. Then, for 
the input variable u and the output variable v of 
operation ok, we have the following setup 
constraint: 
Tu - Tv ≤ P - Dk.                                                        
Let dk denote the constant value corresponding 
to the minimum delay of operation ok. Then, for 
the input variable u and the output variable v of 
operation ok, we have the following hold 
constraint: 
Tv - Tu ≤ dk.                                                               
Note the number of constraints due to Formula 1, 
Formula 2, Formula 3, Formula 4, Formula 5, 
and Formula 6 are O(m), O(m2), O(m×n), 
O(m×n), O(m2), and O(m2), respectively, where 
m is the number of variables in the scheduled 
DFG and n is the number of registers. Therefore, 
the number of constraints in our MILP 
formulation is O(m2+m×n). 
 
Heuristic approach  
Since the MILP is NP-hard, we also propose a 
heuristic approach to deal with the problem in 
polynomial time complexity. Our heuristic 
approach is an iteration process of assigning 
variables to registers. We present two kinds of 
priority functions to determine the priorities of 
variables and registers. 
z Accurate priority functions. This kind of 
priority function is more accurate but also 
requires more computing time. When this 
kind of priority function is used, the time 
complexity of our heuristic approach is 
O(m3×n), where m is the number of 
variables in the scheduled DFG and n is the 
number of registers. Experimental data 
show: compared with our MILP approach, 
the average overhead on the number of 
registers (for working with the lower bound 
of the clock period) is only 3.3%. 
z Simple priority functions. This kind of 
priority function requires less computing 
time but is also less accurate. When this 
kind of priority function is used, the time 
complexity of our heuristic approach is 
O(m2). Experimental data show: compared 
with our MILP approach, the average 
overhead on the number of registers (for 
working with the lower bound of the clock 
period) is only 8.3%. 
 
四、 結論與討論 
Table 1 tabulates the characteristics of the 
benchmark circuits. The column #ops denotes 
the number of operations. The column #vars 
denotes the number of variables. The column 
Design Constraints gives 6-tuple 
(#steps,#alus,#muls,#divs, #sels,#comps), where 
#steps, #alus, #muls, #divs, #sels, and #comp are 
the number of control steps, ALUs, multipliers, 
divisors, selectors, and comparators, respectively. 
For example, the design constraints of 
is maximized. 
We have submitted our work to IEEE Trans. on 
CAD. The paper is currently under the revision 
process. 
 
五、參考文獻 
[1] N. Maheshwari and S.S. Sapatnekar, “Timing 
Analysis and Optimization of Sequential 
Circuits,” Kluwer Academic Publishers, 1999. 
[2] S.S. Sapatnekar, “Timing,” Kluwer 
Academic Publishers, 2004. 
[3] J.P. Fishburn, “Clock Skew Optimization,” 
IEEE Trans. on Computers, vol. 39, no. 7, pp. 
945—951, 1990. 
[4] S.M. Burns, “Performance Analysis and 
Optimization of Asynchronous Circuits,” 
Ph.D. Thesis, California Institute of 
Technology, Pasadena, California, U.S.A., 
1991. 
[5] R.B. Deokar and S.S. Sapatnekar, “A 
Graph-Theoretic Approach to Clock Skew 
Optimization,” Proc. of IEEE International 
Symposium on Circuits and Systems, vol. 1, 
pp.407—410, 1994. 
[6] C. Albrecht, B. Korte, J. Schietke, and J. 
Vygen, “Cycle Time and Slack Optimization 
for VLSI Chips,” Proc. of IEEE/ACM 
International Conference on Computer Aided 
Design, pp. 232—238, 1999. 
[7] J.L. Neves and E.G. Friedman, “Design 
Methodology for Synthesizing Clock 
Distribution Networks Exploiting Non-Zero 
Localized Clock Skew,” IEEE Trans. on Very 
Large Scale Integration Systems, vol. 4, no. 2, 
pp. 286—291, 1996. 
[8] A. Takahashi, E. Inouet, and Y. Kajitani, 
“Clock Tree Routing Realizing a Clock 
Schedule for Semi-Synchronous Circuits,” 
Proc. of IEEE/ACM International Conference 
on Computer Aided Design, pp. 37—42, 
1997. 
[9] D. D. Gajski, N. D. Dutt, A.C.H Wu, and 
S.Y.L Lin, “High-Level Synthesis: 
Introduction to Chip and System Design,” 
Kluwer Academic Publishers, 1992. 
[10] F.J. Kurdahi and A.C. Parker, “REAL: A 
Program for Register Allocation,” Proc. of 
IEEE/ACM Design Automation Conference, 
pp. 210—215, 1987. 
[11] C. Tseng and D.P. Siewiorek, “Automatic 
Synthesis of Data Paths in Digital Systems,” 
IEEE Trans. on Computer-Aided Design,” vol. 
5, no. 3, pp. 379—395, 1986. 
Left Edge Circuit #ops #vars Design 
Constraints RegB PMCSS 
(ns) 
PB 
(ns) 
HAL 11 8 (4,2,2,0,0,1) 4 4.70 4.03 
AR 28 30 (8,4,3,0,0,0) 8 4.70 4.03 
BF 29 30 (8,3,2,0,0,0) 6 4.48 4.03 
EWF 34 47 (14,4,2,0,0,0) 11 4.70 4.03 
IDCT1 48 60 (12,6,3,1,0,0) 21 11.90 11.50 
Motion 290 430 (42,12,15,8,2,0) 111 11.90 11.50 
Sha1 540 540 (86,41,34,0,0,0) 100 4.70 4.03 
Table 1: Characteristics of benchmark circuits. 
附錄 
本人本年度共有 3 篇期刊論文發表，3 篇國際會議論文發表，茲表列如下。 
期刊論文 
[1] Y.T. Nieh, S.H. Huang, and S.Y. Hsu, “Opposite-Phase Clock Tree for Peak Current Reduction”, IEICE 
Transactions on Fundamentals of Electronics, Communications, and Computer Sciences, Volume 90-A, No. 12, 
pp. 2727—2735, 2007. (SCI) 
[2] W.C. Yu and S.H. Huang, “An ILP Approach to Heat-Driven Functional Unit Binding”, Tamkang Journal of 
Science and Engineering, Volume 11, No. 1, pp. 29—36, 2008. (EI) 
[3] S.H. Huang and C.H. Cheng, “An ILP Approach to the Simultaneous Application of Operation Scheduling and 
Power Management”, IEICE Transactions on Fundamentals of Electronics, Communications, and Computer 
Sciences, Volume 91-A, No. 1, pp. 375—382, 2008. (SCI) 
國際會議論文 
[1] W.T. Yen, S.H. Huang, and C.H. Cheng, "Simultaneous Operation Scheduling and Operation Delay Selection to 
Minimize Cycle-by-Cycle Power Differential", Lecture Notes in Computer Science, Volume 4809, pp. 638—647, 
2007. (EI) 
[2] S. H. Huang, C.L. Wang, and M.L. Huang, “A Floorplan-Based Power Network Analysis Methodology for 
System-on-chip Designs”, Lecture Notes in Computer Science, Volume 4808, pp. 507—516, 2007. (EI) 
[3] C.M. Chang, S.H. Huang, Y.K. Ho, J.Z. Lin, H.P. Wang, and Y.S, Lu, “Type-Matching Clock Tree for Zero 
Skew Clock Gating”, Proc. of IEEE/ACM Design Automation Conference (DAC), pp. 714—719, 2008. (EI) 
 
 
 
 
 
 
 
 
 
 
 
Type-Matching Clock Tree for Zero Skew Clock Gating 
Chia-Ming Chang, Shih-Hsu Huang, Yuan-Kai Ho,  
Jia-Zong Lin, Hsin-Po Wang*, Yu-Sheng Lu* 
Department of Electronic Engineering, Chung Yuan Christian University, Chung Li, Taiwan, R.O.C. 
*SpringSoft, Inc., Hsin Chu, Taiwan, R.O.C. 
{ g9302605, shhuang, g9576045, g9476019}@cycu.edu.tw, {hsinpo_wang, sam_lu}@springsoft.com 
 
ABSTRACT 
Clock skew minimization is always very important in the clock 
tree synthesis. Due to clock gating, the clock tree may include 
different types of logic gates, e.g., AND gates, OR gates, and 
buffer gates. If the logic gates at the same level are in different 
types, which have different timing behaviors, the control of clock 
skew becomes difficult. Based on that observation, in this paper, 
we present a novel clock tree design style, called type-matching 
clock tree, to ensure that the logic gates at the same level are in 
the same type. We prove that any clock control logic can always 
be transformed to our type-matching clock tree. Then, based on 
the idea of type-matching clock tree, we propose a zero skew 
gated clock tree synthesis algorithm. Compared with the industry-
strength gated clock tree synthesis, experimental data show that 
our approach can significantly reduce the clock skew in every 
process corner with a small penalty on the clock tree area and the 
clock tree power consumption.  
Categories and Subject Descriptors 
B.7.2 [Integrated Circuits]: Design Aids – Layout, Placement 
and routing. 
General Terms 
Design, Performance. 
Keywords 
Physical design, clock network synthesis, gated clock. 
1. INTRODUCTION 
In a synchronous sequential circuit, the clock signal is used to 
define a relative time reference for the movement of data. The 
clock skew is the maximum difference among the clock latencies 
(i.e., clock delays) from the clock source to flip-flops. Since the 
clock skew degrades the circuit performance, the minimization of 
clock skew [1-4] is always a very important topic in the design of 
synchronous sequential circuit.  
Further, the clock signal is the most active signal in a synchronous 
sequential circuit. Thus, it is also important to distribute the clock 
signal with low power. It is very often that only a portion of the 
circuit is active. Thus, clock gating [5-11] has been recognized as 
one of the most effective techniques to reduce the power 
consumption. However, the impact of clock gating on the control 
of clock skew has not been well studied. In this paper, we propose 
a novel clock tree design style for clock gating in order to 
eliminate the clock skew. 
1.1 Comments on Previous Works 
Earlier researches [1] focus on zero skew clock tree routing. 
However, the clock buffers are also a main source of clock skew. 
To control the clock skew induced by the clock buffers, the load-
matching approach [2-4] has been widely adopted. Unfortunately, 
in case of clock gating, the load-matching approach may not 
properly control the clock skew. Due to clock gating, the clock 
tree may include different types of logic gates, e.g., AND gates, 
OR gates, and buffer gates. As a result, at the same level of the 
clock tree, the logic gates may be in different types, which have 
different timing behaviors. Note that, for different types of logic 
gates, even if they drive identical loads, the clock skew still 
cannot be controlled. 
Previous clock gating researches [5-10] mainly focus on the 
derivation of clock control logic for minimizing the power 
consumption. For previous clock gating researches that ever 
mentioned the control of clock skew [8-11], we classify them into 
two categories and point out their limitations as below. 
(1) Borkovic et al. [11] simplify the clock control logic by adding 
extra enabling circuitry into the data path. They [11] expect that 
the clock skew can be reduced after the simplification of clock 
control logic. However, they [11] do not actually study the 
implementation of clock tree. Besides, since many wasteful clock 
switching activities are not masked off, the power consumption 
becomes larger. 
(2) Farrahi et al. [8] equalize the number of logic gates in all the 
paths from the clock source to flip-flops. Oh et al. [9] and Garret 
et al. [10] study zero skew gated clock tree routing. Although they 
[8-10] study the implementation of the gated clock tree, they do 
not consider the clock skew induced by the logic gates. However, 
the logic gates are a main source of clock skew. 
1.2 Our Contributions 
In this paper, we present a novel clock tree design style, called 
type-matching clock tree, for zero skew clock gating. Our type-
matching clock tree ensures the following property: the logic gates 
at the same level are in the same type. Due to this property, our 
type-matching clock tree has the following two advantages. 
(1) By combining with the load-matching approach, our type-
matching clock tree can achieve almost zero skew. 
(2) Our type-matching clock tree is insensitive to the process 
corner variations. Thus, the circuit reliability is enhanced. 
 
 
714
40.3
Take the gated clock tree shown in Figure 3 as an example. At 
level 2, U11 is a buffer gate, while U9 is a two-input AND gate. 
At level 3, U12, U13, and U14 are buffer gates, while U10 is a 
two-input AND gate. To illustrate the clock skew analysis, 
without loss of generality, we make the following assumptions.  
(1) This clock tree is targeted to UMC 0.18µm cell library, and the 
buffer gates and the two-input AND gates are implemented by 
using the cell CLKBUFX4 and the cell AND2X4, respectively. 
(2) The output load (including both the wire capacitance and the 
pin capacitances) of each logic gate is 0.06 pf. 
(3) The input transition time of the clock source (i.e., the input 
transition time of clock buffer U8) is 100 ps. 
Based on the above assumptions, we analyze the clock skew of 
the gated clock tree shown in Figure 3. Note that, due to type 
mismatch, for the logic gates at the same level, even if they drive 
identical output loads (i.e., 0.06 pf), they still have different cell 
delays. First, we consider the typical process corner. In the typical 
process corner, the cell delays of U8, U11, U9, U12, U13, U14, 
and U10 are 160, 165, 155, 165, 165, 165, and 155 ps, 
respectively. With an analysis, we find that: the maximum clock 
latency (induced by the logic gates) is 490 ps, which occurs in the 
path U8 →U11→U12 and the path U8→U11→U13; and the 
minimum clock latency (induced by the logic gates) is 470 ps, 
which occurs in the path U8→U9→U10. Therefore, in the typical 
process corner, the clock skew is 20 ps. 
Next, we consider the worst process corner. In the worst process 
corner, the cell delays of U8, U11, U9, U12, U13, U14, and U10 
are 256, 280, 267, 280, 280, 280, and 267, respectively. With an 
analysis, we find that: the maximum clock latency and the 
minimum clock latency are 816 and 790 ps, respectively. 
Therefore, in the worst process corner, the clock skew is 26 ps. 
Intuitively, we may use gate sizing to reduce the clock skew. 
However, in the cell library, for each type of logic gate, only few 
sizes can be selected. Therefore, the clock skew often cannot be 
reduced by gate sizing. Take the gated clock tree shown in Figure 
3 as an example. The cell AND2X4 is faster than the cell 
CLKBUFX4. In the cell library, among all the cells smaller than 
the cell AND2X4, the cell AND2X2 is the largest one. Instead of 
using AND2X4, we try to use AND2X2 to implement U9 and 
U10. In the typical process corner, the cell delays of U8, U11, U9, 
U12, U13, U14, and U10 become 160, 165, 220, 165, 165, 185, 
and 233 ps, respectively; as a result, the clock skew is 123 ps. 
Obviously, downsizing the two-input AND-gates cannot reduce 
the clock skew. 
To reduce the clock skew, we find that the industry-strength gated 
clock tree synthesis [12] is not load-matching. In fact, for a 
specific process corner, it is possible to adjust the output loads to 
eliminate the clock skew. However, as the process corner varies, 
the clock skew still exists. Take the gated clock tree shown in 
Figure 3 as an example. Suppose that the output loads of U9 and 
U10 are increased to be 0.069 and 0.067 pf, respectively, and the 
output load of U14 is decreased to 0.057 pf. Then, in the typical 
process corner, the cell delays of U8, U11, U9, U12, U13, U14, 
and U10 become 160, 165, 165, 165, 165, 165, and 165 ps, 
respectively; as a result, the clock skew is 0 ps. However, in the 
worst process corner, the cell delays of U8, U11, U9, U12, U13, 
U14, and U10 are 256, 280, 281, 280, 280, 280, and 282 ps, 
respectively; as a result, the clock skew is 3 ps. Obviously, 
although the clock skew is eliminated in the typical process corner, 
it still exists in the worst process corner. 
We summarize the above discussions. In a gated clock tree, due to 
type mismatch, the logic gates at the same level may have 
different cell delays. Note that this clock skew (due to type 
mismatch) cannot be eliminated no matter we use gate sizing or 
output load adjustment. Thus, we have the following motivation: 
in case of clock gating, can we derive a gated clock tree in which 
the logic gates at the same level are in the same type? In next 
section, we propose a novel clock tree design style, called type-
matching clock tree, to ensure this property. 
4. TYPE-MATCHING CLOCK TREE 
A clock tree is called a type-matching clock tree, if the logic gates 
at the same level are in the same type. In this Section, we study 
the design of a type-matching clock tree.  
4.1 Logical Type Buffers 
In fact, we can use an AND-type buffer to replace a buffer gate 
(i.e., a conventional clock buffer). Figure 4 (a) gives the buffer 
gate. Figure 4 (b) gives our AND-type buffer. Note that, in our 
AND-type buffer, pin B is connected to logic value 1. As a result, 
the clock is always enabled. Therefore, the functionality of our 
AND-type buffer is exactly the same as that of buffer gate. 
Similarly, we also can use an OR-type buffer to replace a buffer 
gate. Figure 4 (c) gives the OR-type buffer. Note that, in the OR-
type buffer, pin B is connected to logic value 0. 
 
Figure 4. (a) Buffer gate. (b) AND-type buffer. (c) OR-type 
buffer. 
Suppose that a clock control logic is implemented using AND 
gates. Then, the corresponding gated clock tree consists of both 
AND gates and buffer gates. We can use the following principle 
to ensure type-matching. At each level of the gated clock tree, if 
both buffer gates and AND gates exist, we use AND-type buffers 
to replace buffers gates. As a result, all the logic gates at this level 
can be in AND-type. 
Take the gated clock tree shown in Figure 3 as an example. At 
level 2, U11 is a buffer gate and U9 is a two-input AND gate. To 
ensure type-matching, U11 is replaced with an AND-type buffer. 
At level 3, U12, U13, and U14 are buffer gates and U10 is a two-
input AND gate. To ensure type-matching, U12, U13, and U14 
are replaced with AND-type buffers. As a result, we obtain a type-
matching clock tree as shown in Figure 5. It should be pointed out 
that: if the logic gates at the same level drive identical loads, our 
type-matching clock tree can always achieve zero skew regardless 
of the process corner variations. 
Note that, if only one specific logical type exists at the same level 
of the clock tree (except for the buffer gate), we always can use 
that specific logical type as a buffer to replace the buffer gate for 
type-matching. For example, for negative-edge-triggered flip-
flops, the clock control logic is often implemented by using OR 
gates. The corresponding gated clock tree consists of both OR 
gates and buffer gates. To ensure type-matching, we can use OR-
type buffers to replace buffer gates. 
716
include all the nodes at the current level of the gated clock tree. 
We use the set finish to include all the gated clock domains that 
have only one cluster (i.e., we use the set finish to include all the 
gated clock domains that have only one node at the current level). 
If the set root(no) belongs to the set finish, all the nodes in the set 
N’ are implemented using logical type type(no) to achieve type-
matching and then we decrease the value of integer variable no; 
otherwise, all the nodes in the set N’ are implemented using buffer 
gates. The repeat-until iteration process repeats until the clock 
source is reached (i.e., no = 1 and root(1) ⊆finish). Finally, we use 
[2] to vary wire widths and lengths to balance the wire delays at 
each level of our clock tree. 
The clustering process of a gated clock domain is based on the 
load-matching technique proposed in [2]. However, since [2] does 
not consider clock gating, here we should make some 
modifications. The reason is as below: although the clustering 
processes of different gated clock domains are performed 
separately and independently, we still need to balance the loads of 
clusters among different gated clock domains. Thus, we give an 
upper bound on the load of each cluster. Under this upper bound 
constraint, the objective of the clustering process of a gated clock 
domain is to maximize the minimum load among all the clusters. 
In addition, we also give a lower bound on the load of each cluster. 
After the clustering process is done, for those clusters whose loads 
are less than this lower bound, we add dummy loads to meet this 
lower bound constraint.  
Take the clock control logic shown in Figure 2 as an example. We 
have type(1) = buffer, type (2) = AND, type(3) = AND, root(1) = 
{U8/Y}, root(2) = {U9/Y}, and root(3) = {U10/Y}. The gated 
clock tree is synthesized in the bottom-up manner. Assume that, 
during the clustering processes of gated clock domains U8/Y, 
U9/Y, and U10/Y the numbers of clusters are 2, 1, and 1, 
respectively. Then, there are totally four clusters at this level, and 
the set finish is {U9/Y, U10/Y}. Since root(3) ⊆ finish and type(3) 
= AND, we use AND-type to implement the four upper-level 
nodes that drive these four clusters. Next, we move to the upper 
level. Assume that, during the clustering processes of gated clock 
domains U8/Y and U9/Y, the numbers of clusters are 1 and 1, 
respectively. Then, there are totally two clusters at this level, and 
the set finish is {U8/Y, U9/Y}. Since root(2) ⊆ finish and type(2) 
= AND, we also use AND-type to implement the two upper-level 
nodes that drive these two clusters. Next, we move to the upper 
level. Assume that, during the clustering process of gated clock 
domain U8/Y, the number of clusters is 1. Then, there is only one 
cluster at this level and the set finish is {U8/Y}. Since root(1) ⊆ 
finish and type(1) = buffer, we use buffer gate to implement the 
upper-level node that drives this cluster. We also find that the 
clock source has been reached. The topology of our synthesized 
gated clock tree is as shown in Figure 5.  
6. EXPERIMENTAL RESULTS 
We use seven circuits, which are targeted to UMC 0.18µm process 
technology, to test the effectiveness of our type-matching clock 
tree. These seven circuits are classified into the following two 
categories: 
(1) Circuits S15850.1, S35932, S38417, S38584, and S38584.1 
are adopted from ISCAS’89 benchmark suite. Originally, these 
five circuits do not consider clock gating. For the purpose of 
experiment, here, we arbitrarily create their clock control logics.  
(2) Circuits IND1 and IND2 are real-life industry designs. Their 
RTL codes are written with clock gating considered. Then, their 
gate-level netlists (including their clock control logics) are 
obtained by logic synthesis.  
Note that we use SOC Encounter [12] to obtain the placed netlists 
of these seven circuits.  
We have used C programming language to implement our 
proposed type-matching load-matching clock tree synthesis 
approach. To validate the effectiveness of our type-matching 
clock tree, we also implement the following two design methods: 
(1) Method-A: load-matching gated clock tree synthesis. We 
disable the feature of type-matching used in our gated clock tree 
synthesis. In other words, we do not use logical type buffers. 
During gated clock tree synthesis, whenever a clock buffer is 
needed, we use the buffer gate. As a result, the gated clock tree is 
only load-matching. 
(2) Method-B: industry-strength gated clock tree synthesis. We 
use SOC Encounter [12] to perform gated clock tree synthesis. 
The clock skew constraint is set to be 0 ps. Note that the resulting 
gated clock tree is neither type-matching nor load-matching. 
For all these three methods, including our approach, Method-A, 
and Method-B, we make the following two assumptions during 
clock tree synthesis: 
(1) Each clock tree is synthesized with respect to the worst 
process corner.  
(2) The clock latency constraint is set to 1500 ps. Note that both 
the logic gate delay and the wire delay are included in the 
calculation of clock latency. 
Table 1 tabulates the clock skew values of these three methods in 
different process corners. From Table 1, we find that: compared 
with Method-A and Method-B, in every test circuit, our approach 
can always achieve the smallest clock skew in every process 
corner. In fact, among all the test circuits, the largest clock skew 
(among all the process corners) obtained by our approach is only 
45 ps. With an analysis to Table 1, we find that: the average 
improvement of our approach over Method-A on the clock skews 
in the best process corner, the typical process corner, and the 
worst process corner achieve 85.6%, 85.6%, and 85.4%, 
respectively; the average improvement of our approach over 
Method-B on the clock skews in the best process corner, the 
typical process corner, and the worst process corner achieve 
78.0%, 70.0%, and 57.1%, respectively. 
Table 2 tabulates the clock tree areas and the clock tree power 
consumptions of these three methods. The clock tree area includes 
both the logic gates and the wires. The clock tree power 
consumption includes the switching power and the short-circuit 
power. Note that the clock tree power consumption is related to 
the switching probabilities of the clock tree wires. Here, we make 
the following assumptions: 
(1) For circuits S15850.1, S35932, S38417, S38584, and 
S38584.1, we assume that the active probability of each enable 
signal is 50%. We also assume that the active probability of each 
enable signal is independent. Then, the switching probability of 
each clock tree wire can be calculated. 
718
