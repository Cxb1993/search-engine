摘要 
網際網路是現代人生活中一個不可或缺的存在，諸如：書信往返、銀行帳戶往來、政
府機關相關業務…等皆可由網際網路進行操作，但是，在這樣便捷的背後卻隱藏了許多惡
意的使用者。常見的攻擊行為如：病毒攻擊、木馬程式甚至網頁癱瘓…等，如何才能讓使
用者避免遭受到這樣的惡意攻擊便是一個重要的研究課題。目前有許多種方式可以去偵測
網際網路是否有發生異常，特徵法、資料統計法便是較常見的幾種偵測方式。然而，現今
網際網路的速度從原本的 100Mbps 成長到 1Gbps、10Gbps，100Gbps，為了因應這麼快速
的網路流量，偵測異常行為變越趨困難。同一時間所流過的資料量越趨龐大，我們就需要
更強大的運算能力去消化這些快速增長的資料。 
 
Sketch 速寫演算法可以將大量的資料精簡摘要成較少量的資訊，對於網際網路中形形
色色、源源不絕的封包流是一個很好的演算法去統計這些資訊。我們的系統便是基於 sketch
速寫演算法而衍生出來。由於速寫演算法是由多個雜湊函數所組成，本身就有一定程度的
誤差存在，如何能在記憶空間使用與系統準確率中取一個平衡便是一個重要的課題，尤其，
現今網路速度的增進會間接影響速寫演算法的準確度，為了增加系統的準確度，增加 Sketch
速寫演算法的陣列大小，或是使用密集的取樣頻率都是一個可行的方式。但是如此一來便
會增加處理器的負擔。為了提升處理器的處理效能，我們使用川流處理器來進行 Sketch 速
寫演算法部分的運算以期能得較高的運算速度。 
 
Abstract 
Stream processing architectures have been proposed as efficient and flexible platforms for 
network packet processing. This is because packet processing shares many of the same 
characteristics of media and image processing that motivate stream architectures: little global 
data reuse, abundant data parallelism, and high computational complexity. Moreover, in 
comparison with multithread approach, stream architecture provides much lower cost to hide a 
given amount of latency. This is due to a very large number of threads, which contain the full 
architecture state, is required to keep the memory pipeline full  .  
 
We study and benchmark the performance of sketch based algorithms for network traffic 
change detection based on the stream architecture at Storm-1 SoC development platform. We 
seek the possibility to map and derive an efficient way of handling such data structure on stream 
architecture. The goal is to process and summarize an enormous amount of data in real time, at 
wire speed, in a limited space. We believe the unique memory hierarchy and processing 
capability provide the greatest flexibility for such applications with high performance. 
許多多核心的架構。如 Neelam Goyal[16] 與 Randy Smith[17]等人所提出的利用 GPU/SIMD 的
架構實現異常偵測中，特徵法的字串比對。另一方面，GPU 也被大量運用於 IP 路由、軟體路由
器的設計，如Jin Zhao[18]等人利用NVIDIA 8800GT實現PC版本的軟體路由器，Sangjin Han[19]
等人則使用 NVIDIA GTX480 實現高速度的軟體路由器 PacketShader，另外，Shuai Mu[20]等人
也使用 NViDIA GT200 處理 IP 路由。 
 
四、 研究方法 
1、 川流處理器架構 
Storm-1 發展板 的硬體架構圖上包含有一顆 500MHz 的川流處理器 SP16-G160，512MByte DDR2 
記憶體（由 2 條 256MByte、233MHz DDR2 記憶體組成），32Mbytes NOR Flash，並有一個
10/100/1000Mbps 的 RJ45 PHY 直接與 SP16 連接。而其 PCI 匯流排的傳輸速度可為 33MHz 或
66MHz，經由板子上的 S3 切換器控制之。Storm-1 發展板含有一個獨立的 Linux 作業系統於開
發版的 Flash 上，其核心版本為 2.6.22.19-sp16_hdk。我們也可以使用 U-Boot 指定發展板使
用NFS server上的 Linux Kernel為其開機系統。 其核心SP16-G160，是一顆 system-on-a-chip 
(SOC) 的川流處理器。它包含了一個用來處理及控制資料的通用處理單元 General Purpose 
Unit (GPU)、一個資料平行核心執行單元 Data-parallel Kernel Execution Unit (DPU) 用來
處理內部的密集運算迴圈，以及其他的輔助的單元，如：Ethernet MAC、PCI...等。其晶片架
構如圖一所示。 
 
        圖一 SP16-G160 之硬體架構圖 
 在通用處理單元中，System MIPS 處理器負責管理基本的系統需求，包含執行 Linux 作業
系統、I/O 的驅動以及執行使用者工作介面。而另一個部分則是 DSP MIPS 處理器，它負責執行
Stream C程式並與資料平行核心執行單元串聯運作。SP16-G160主要的處理硬體則是由DSP MIPS
處理器、資料平行核心執行單元（Data-parallel Kernel Execution Unit）以及記憶體介面單
元（Memory interface unit）所組成。DSP MIPS 處理器是用來執行 DSP 應用程式，並且將核
心函式指令發送給 DPU 執行，包含 DSP MIPS 處理器與資料平行核心執行單元的同步化、資料串
流的載入與儲存、以及運算指令的讀取。這個處理器運作在 280MHz 的操作頻率下，資料與指令
快取則各為4Kbyte × 4-way的集合關聯式快取記憶體（4Kbyte × 4-way set associative cache 
memory），總大小為 16Kbyte。資料平行核心執行單元（DPU）專門執行需要密集運算的訊號及
該封包的目的端來源位址與封包大小截取出來，送到 sketch 模組。在 sketch 模組中目的端來
源位置會經過奇數個不同的雜湊函數（hash function）產生出其鍵值（key），並依其鍵值在雜
湊函數表中對應的位址對該封包的封包大小進行累加。 Forecast 模組則是在每個區間結
束後執行，在這個模組中，系統會依照起始設定所定義的 window size 對 St-1至 St-w的 sketch
陣列進行加總，並求出其平均值陣列 Sf。最後則是 change detection 模組，系統會將該區間所
統計的 sketch 陣列 St減去 forecast 所算出的 Sf陣列，取得誤差陣列 Se，並對 Se陣列求其第二
動差（second moment），再將此值乘上一個常數可得門檻值 T。最後，依據不同分析方式，對
Se中相對應的值做（variance）運算，當該值大於門檻值 T，那個值便會被標記為有問題的 Flow。 
1-2. 漏判（False Negative）與誤判（False Positive） 
 我們的模擬系統採用 3 種不同的方式去分析該流量檔，正確分析、直接分析、2 階段分析
（two-pass）。正確分析是指將前一個區間的所有封包流統計及分析，在這個部分封包的目的端
位址並不需要經過雜湊函數，系統會將其資料正確的記錄下來，以供實驗組的比較。 另外 2
種方式則是將目的端地址經過雜湊函數簡化後，再進行統計分析。由於雜湊函數有一定的碰撞
機率，所以部分的目的端位址可能經過雜湊函數後會映射到相同的鍵值，所以會有一定的誤判
率。 由於在真實環境中，2 階段分析法代表的是前一個區間所有的封包流量在誤差陣列 Se
運算完之後必須將其重現，以便對該區間所有流過的封包流進行查詢，這樣的程序大多僅能在
離線的方式運作。若系統要即時的偵測，所能提供的模擬方式就只有直接分析，在這樣的方式
中，由於前一個區間有出現的目的端位址未必會出現在這個區間,而在這個區間也有可能會有新
的目的端位址出現，再經過雜湊函數運算後，便有可能發生許多誤判的情況發生。 
2、 測試方法 
在我們的測試中，我們使用〝MAWI 200302270000.pcap〞流量記錄檔[15]，其紀錄總時間為 900
秒，所包含之封包流個數為 51778，總計 3514656 個封包，平均流量為 15.70Mbps。在測試時我
們給予模擬器不同的設定參數組合，Hash 函數個數為 3個與 5個，Hash 函數之 entry 個數分別
為 4K、8K、16K 與 32K，門檻值 0.8、0.6、0.4、0.2、0.1、0.05、0.02、0.01，並且將觀測區
間設定為 60 秒。 
模擬器之參數設定 
雜湊函數 3、5 
entry 4K、8K、16K、32K 
門檻值 0.8、0.6、0.4，0.2，0.1、0.05、0.02、0.01 
觀測區間 60s 
表一 模擬器參數設定 
3、 測試結果與分析 
 我們實際模擬測試的結果如下表二、表三所示（以直接分析法分析），由於門檻值對系統準
確度並沒有絕對的影響，它主要是用來設定系統敏感度的一個參數。但是由於敏感度的改變，
可以偵測到的資料數量便會有很大的差異，所以在表中我們所看到，在高門檻值參數的時候它
 理論上 SP16-G160 每個指令周期能夠執行 16lanes*5ALU 共 80 個相加指令，比單核心單一
運算元的處理器還要快上了 80 倍。而移動平均的運算大多都是矩陣運算，像 Sketch 這樣的資
料結構就很適合使用像 SPI SP16-G160 這種平行運算的處理器來加快整體的用做速度。 
1、 結果與效能分析 
在模擬部分，我們採用步進的方式去量測它的效能增加，首先我們測試 SPI 單獨運算 16 筆資料
所需要的運算時間，當資料要從記憶體載入到 LRF 大約需要 326ns（163 時脈周期），運算時間
大約是 164ns（82 時脈周期），而資料寫回大約需時 226ns(113 時脈周期)。 
第二次我們使用 32 筆資料，當資料要從記憶體載入到 LRF 大約需要 334ns（167 時脈周期），
運算時間大約是 186ns（93 時脈周期），而資料寫回大約需時 236ns(118 時脈周期)。相較於只
運算 16 筆資料的速度，資料載入大約多了 4個時脈周期 ，運算多了 11 個時脈周期，而寫回大
約多了 5個個時脈周期。之後我們使用更大量的資料，1360 筆資料為 16 筆資料的的 85 倍。其
所需的運算時間大約為：資料要從記憶體載入到 LRF 需時 1636ns（818 時脈周期），運算時間
大約是 2012ns（1006 時脈周期），而資料寫回大約需時 1544ns(777 時脈周期)。 
依照以上數據，運算的部分 16 筆資料的運算大約耗時 11~12 個時脈周期，而運算起使時間大約
是 150 的時脈周期。再加上資料載入及寫回大約是 16 筆資料的 5~6 倍。所以，若是能盡量的減
少呼叫核心副程式的次數，或是每次呼叫核心副程式都盡可能塞入最多的資料，這樣便可以解
省掉很多的時間。另一方面，若是連續呼叫核心副程式，在資料存入及寫出 LRF 的時間是可以
重疊的，在前面有提到，記憶體資料的傳輸是雙向的，當讀出資料的同時是可以同時寫入資料。 
七、 結論與未來工作 
有鑑於上述的討論，若我們想降低直接分析法的 False Negative 值，最好的方式便是降低
觀測區間的時間，增加每個 Flow 延續到下一個觀測區間的機率，但是顯而易見的，若觀測區間
的時間減少，我們所需要的運算能力就會大幅度的增加，原先 60 秒才須完成的運算要減少至
10 秒、甚至 1秒。以 32K、5H、windows size 為 3 的移動平均的運算來說，光是運算大約就要
耗掉 13M 個運算周期（32K × 5 × 82 ＝ 12960K），其中 82 個運算周期是 80 個運算周期為除法
運算、3個 sketch 則會需要 2次的加法，需要 2個運算周期，若是還要即時偵測並同步更新，
所需要的運算能力就會變得相當高。為了能夠讓變異偵測系統可以即時運作在高速的網路環境
並提供大量資料統計能力（上千筆或上萬筆 sketch 陣列）的考量下，採用多核心、多運算元的
處理器是必要的。由於 SPI 處理器擁有多條通道平行運算與多個 ALU，非常適合用於矩陣等高
資料平行的運算，提供高密集的運算能力， 
高速網路摘要處理 
但以現今封包運作的方式來看，每個時間點就只有一個封包會經由網路介面傳送過來，意
指在這個時間點只有一個待處理的資料，以 SPI 只有 500MHz 的時脈來說，並無法在封包處理上
獲得校能的提升。因此我們採用 NetFPGA 發展平台來協助我們做前端的封包分析及摘要到
Sketch 陣列的部分。我們的系統可以提供更優於傳統單一核心處理器的處理速度，給予移動平
均運算更快速的資料處理，如此一來我們的系統便有能力可以處理更多，或是在更短時間內處
理更多的資料。基於 SPI 川流處理器所提供的特殊架構，它可以給予程式更高的平行運算能力，
也可以減少資料在記憶體與運算單元中頻繁搬移所產生的時間損耗。由於目前我們測試的 SPI
運算能力還有部分可以改善的空間，如何能在資料搬移及運算中取的一個平衡，便會是接下來
我們最需要努力的方向。另外，在越趨高速的網路環境下，我們的系統是否有能力更進一步處
[17] Randy Smith, Neelam Goyal, Justin Ormont, Karthikeyan Sankaralingam, and Cristian 
Estan. Evaluating GPUs for Network Packet Signature Matching. In Proceedings of the 
International Symposium on Performance Analysis of Systems and Software (ISPASS), 2009. 
[18] Jin Zhao, Xinya Zhang, Xin Wang, Xiangyang Xue. Achieving O(1) IP lookup on GPU- 
based software routers. In SIGCOMM Comput. Commun. Rev. , 2010 
[19] Sangjin Han, Keon Jang, KyoungSoo Park, Sue Moon. PacketShader: a GPU-accelerated 
software router, Proceedings of the ACM SIGCOMM 2010 conference on SIGCOMM, 
2010 
[20] Shuai Mu, Xinya Zhang, Nairen Zhang, Jiaxin Lu , Yangdong Steve Deng, Shu Zhang, IP 
Routing Processing with Graphic Processors, in Design, Automation & Test in Europe 
Conference & Exhibition (DATE), 2010 
??????????????????NetFPGA?NetFPGA ????? 4 ??
???? 1 Gbps ???????????????????????? Xilinx 
Virtex2-Pro 50 ? FPGA ??NetFPGA ???????? Xilinx Spartan II FPGA?
???????? NetFPGA ?????????? 2 ???? 18MBit ? SRAM 
? 64MByte ? DDR2 DRAM???????????? Serial ATA?SATA????
?????? NetFPGA ??????????????????? 
 
???????????????????????????????????
???????????????????????????????????
???????????????????????????????????
??? 
 
 
????????? 
???? 
?????, ??????? 
98年度專題研究計畫研究成果彙整表 
計畫主持人：賴裕昆 計畫編號：98-2221-E-033-025- 
計畫名稱：川流處理器架構於高速網路流量變異偵測分析之應用與研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際
已達成數)
本計畫
實際貢
獻百分
比 
單位 
備註（質化說明：如
數 個 計 畫 共 同 成
果、成果列為該期刊
之封面故事...等）
期刊論文 0 0 100%  
研究報告/技術報告 1 1 100% 
＇＇＇＇跨領域學程教
學實驗室的建制與規
劃＇＇＇＇, 中原大學
技術報告, 
研討會論文 1 1 100% 
篇 
＇ 速 寫 演 算 法 於
NetFPGA 之硬體實現與
其應用探討＇＇＇＇, 
2009 全國電信研討會 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 5 5 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  國外 論文著作 
研究報告/技術報告 0 0 100% 
篇 
 
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
