1.1 The computational models
The non-fair central daemon model (or, simply, central daemon model) was first introduced by Dijkstra
[1] in 1974. Under this computational model, if the system starts with a configuration in which no node
in the system is privileged, then the system is deadlocked. Otherwise, the central daemon in the system
will non-deterministically select exactly one privileged processor and exactly one executable rule in the
processor’s local algorithm, and let the selected processor execute the action part of the selected rule.
The local state of the selected processor thus changes, which in the meantime results in the change of the
global configuration of the system. The system will repeat the above process to change configurations as
long as it does not encounter any deadlock situation. Thus the behavior of the system under the action
of the algorithm can be described by executions defined as follows: an infinite sequence of configurations
Γ = (γ1, γ2, . . .) of a distributed system is called an infinite execution (of the algorithm in the system)
under the central daemon model if for any i ≥ 1, γi+1 is obtained from γi after exactly one processor in the
system makes a move in the ith step γi → γi+1; a finite sequence of configurations Γ = (γ1, γ2, . . . , γk) of a
distributed system is called a finite execution (of the algorithm in the system) under the central daemon
model if (1) k = 1, or for any i = 1, 2, . . . , k − 1, γi+1 is obtained from γi after exactly one processor in
the system makes a move in the ith step γi → γi+1, and (2) no node is privileged in the last configuration
γk.
The non-fair distributed daemon model (or, simply, distributed daemon model) was later considered
by Burns [2] in 1987. The difference between the central daemon model and the distributed daemon
model is the number of processors that make moves in a step of an execution of the algorithm. Under the
central daemon model, exactly one privileged processor in the system is non-deterministically selected by
the central daemon to make a move in a step of an execution of the algorithm. Under the distributed
daemon model, however, an arbitrary number of privileged processors are non-deterministically selected
by the distributed daemon to simultaneously make moves in a step. Thus, we can also define executions
for the distributed daemon model as follows: an infinite sequence of configurations Γ = (γ1, γ2, . . .) of a
distributed system is called an infinite execution (of the algorithm in the system) under the distributed
daemon model if for any i ≥ 1, γi+1 is obtained from γi after a certain number of privileged processors
selected by the distributed daemon simultaneously make moves in the ith step γi → γi+1; a finite sequence
of configurations Γ = (γ1, γ2, . . . , γk) of a distributed system is called a finite execution (of the algorithm
in the system) under the distributed daemon model if (1) k = 1, or for any i = 1, 2, . . . , k − 1, γi+1
is obtained from γi after a certain number of privileged processors selected by the distributed daemon
simultaneously make moves in the ith step γi → γi+1, and (2) no node is privileged in the last configuration
γk. As a consequence of the above definitions, the central daemon model is a restricted version of the
distributed daemon model, i.e., the set of all distributed-daemon-model executions contains the set of all
central-daemon-model executions.
The weakly fair daemon model (or, simply, fair daemon model) [3] is a different restricted version of
the distributed daemon model. Precisely, an execution Γ under the distributed daemon model is called
an execution under the fair daemon model if for any suffix Γ′ of Γ, no node can be privileged infinitely
many times without making any move in Γ′. It follows immediately from this definition that every finite
execution is a fair-daemon-model execution.
1.2 Self-stabilization
A distributed algorithm and a subset of executions (of the algorithm under a certain computational
model), called legal executions, are designed to solve a specific problem such as the shortest path problem,
2
2 The main result
Suppose G = (V,E) is a distributed system equipped with a distributed algorithm DA and γ is a
configuration of the system. Let Mγ denote the set {x ∈ V | x is privileged in γ}. We now construct an
execution of DA under the central daemon model starting with γ, using a recursive defining process as
follows:
1) Let γ0 = γ and for any x ∈ V , let the priority of x in γ0, pγ0(x) = 0.
2) For any i ≥ 0, if Mγi 6= ∅, select a node u ∈ {x ∈ Mγi | ∀y ∈Mγi , pγi(x) 6 pγi(y)} to make a move,
which results in the ith step γi → γi+1; let the priority of u in γi+1, pγi+1(u) = i+ 1; and for any
x ∈ V − {u}, let the priority of x in γi+1, pγi+1(x) = pγi(x).
If in the above recursive defining process we ever encounter that Mγi = ∅ for some i, then we obtain a
finite execution Γ = (γ0, . . . , γi) of DA under the central daemon model starting with γ. Otherwise, if
in the above recursive defining process we never encounter that Mγi = ∅ for some i, then we obtain an
infinite execution Γ = (γ0, γ1, . . .) of DA under the central daemon model starting with γ.
Lemma 1 For any configuration γ, the execution Γ of DA starting with γ as constructed above is an
execution under the fair daemon model.
Proof. Suppose Γ is not an execution under the fair daemon model. Then there exists a suffix Γ′ of Γ
and a node x such that x is privileged infinitely many times without making any move in Γ′. Since x never
makes any move in Γ′, the priority of x never changes in Γ′. Let γi1 , γi2 , . . . , γin be the first n configurations
in Γ′ in which x is privileged, where n is the number of nodes in the system. For k = 1, 2, . . . , n, let xk
be the node that makes a move in the step γik → γik+1. Since x does not make a move in the step
γi1 → γi1+1, x1 6= x. In view of the above defining process for Γ, pγi1+1(x1) > pγi1+1(x) and the priority
of x1 cannot decrease in (γi1+1, γi1+2, . . .). Since the priority of x never changes in (γi1+1, γi1+2, . . .), we
have that pγik (x1) > pγik (x) for any k = 2, 3, . . . , n. Hence x1 cannot be selected to make a move in the
step γik → γik+1 for any k = 2, 3, . . . , n, and thus the node x2 that makes a move in the step γi2 → γi2+1
is distinct from either x or x1. Similarly, we can derive that pγi
k
(x2) > pγi
k
(x) for any k = 3, 4, . . . , n.
Hence x2 cannot be selected to make a move in the step γik → γik+1 for any k = 3, 4, . . . , n, and thus the
node x3 that makes a move in the step γi3 → γi3+1 is distinct from any of x, x1 and x2. Arguing in this
way, we will eventually get that x, x1, x2, . . . , and xn are all distinct and thus the system has more than
n nodes, a contradiction. Therefore Γ must be an execution under the fair daemon model.
Theorem 1 For any self-stabilizing algorithm under the fair daemon model (for a particular problem)
which is not self-stabilizing under the central daemon model, if any safe configuration under the fair
daemon model is also a safe configuration under the central daemon model, the worst-case stabilization
time, measured in steps, is infinity, i.e., for any K > 0, there exists an execution of this algorithm under
the fair daemon model whose stabilization time is greater than or equal to K.
Proof. Since the algorithm is not self-stabilizing under the central daemon model, there exists an
execution Γ under the central daemon model which contains no safe configuration under the central
daemon model. If Γ is a finite execution, then it is an execution under the fair daemon model. Since the
algorithm is self-stabilizing under the fair daemon model, Γ contains a safe configuration under the fair
daemon model, which is also a safe configuration under the central daemon model in view of the hypothesis
of the theorem. A contradiction occurs. Hence Γ must be an infinite execution. Let Γ = (γ0, γ1, . . .).
4
..
.
Node 2 is privileged by G1 and 
selected by the central daemon 
to make a move.
r
43
1
)}}2,1{{()2( =s
)}2,1{()4( =s)}2,1{()3( =s
)}2,1{()1( =s
)}}2,1{{()( =rs
2
r
43
1
)}2,1{()2( =s
)}2,1{()4( =s)}2,1{()3( =s
)}2,1{()1( =s
)}}2,1{{()( =rs
2
r
43
1
)}2,1{()2( =s
)}2,1{()4( =s)}2,1{()3( =s
)}2,1{()1( =s
)}}2,1{{()( =rs
2
Node 2 is privileged by G2 and 
selected by the central daemon 
to make a move.
Figure 1: An infinite cyclic execution of the SBF algorithm under the central daemon model.
6
[13] Dolev, S., Israeli, A., Moran, S.: Self-stabilization of dynamic systems assuming only read/write
atomicity. Distributed Computing 7, 3-16 (1993).
[14] Devismes, S.: A silent self-stabilizing algorithm for finding cut-nodes and bridges. Parallel Processing
Letters 15, 183-198 (2005).
8
本人此行的份費用為九萬多元，僅機票便需五萬多元，而國科會只補助五萬元，差距相當大，因
此本人建議國科會調高補助的額度，以確實達到鼓勵國內學者參加國外學術會議的效果。 
 
 
 
四、 其他 
 
本人自 PDPTA'10攜回下列資料： 
 WORLDCOMP'10所有 22個研討會議程一本 
 PDPTA'10論文集兩本(上下冊) 
 PDPTA'10論文集光碟一片 
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：□已發表 □未發表之文稿 ■撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100字為限） 
研究成果已被學術期刊 International Journal of Artificial Life Research (IJALR) 
接受，即將刊登。 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500字為限） 
The theoretical implication of our new finding in this report is: for any problem, 
the existence of self-stabilizing algorithms for the weakly fair daemon model only, 
is unsatisfactory; it is of significance to pursue self-stabilizing algorithms 
for the central daemon model or, even better, for the distributed daemon model.
