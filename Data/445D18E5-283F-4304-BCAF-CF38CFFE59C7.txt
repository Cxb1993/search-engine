information and passive information usage. Our 
project utilizes the latest information technology 
and applies them to the development of social 
networks, including data mining, information security 
and privacy, cloud computing, graph theory, agent 
technology, location-based services, e-learning 
technology, and semantic webs. The final goal is 
building a user-centric and controllable social 
network where users can control their own data and 
analyze and use to their advantages. 
 
英文關鍵詞： social network services, user-centric 
 
 II 
 
摘要 
 
有鑑於現今社群網路的盛行，使用者每天產生海量的資料，然而目前的社群
網路卻都處於封閉的狀態，使用者無法對社群網路中自己的資料做進一步的利用。
本計畫希望藉由建立自行開發的社群網站，整合分散於各地的各種計算與儲存資
源，透過總計畫整合起來，提供一個集合各項功能與資源而成的分散式架構社群
網站平台。我們所建立的社群網路服務已可提供使用者自訂專屬的使用介面網頁，
並且綜合各子計畫所做的分析與研究，使用者可依據其需求，進行各項社群網路
資料的分析，同時靈活取用社群網路所產生的各項基本資料，本計畫已建立合理
的隱私管理機制，以及各項資料存取的管理與其使用介面，並且可與現存的網路
服務作結合。 
本計畫的總體目標為發展一開放且以使用者為主軸的社群網路。有別於現行
社群網路服務的制式化界面，以及有限的資料使用、封閉式的社群網路資訊、被
動的社群網路資訊利用。在此社群網路中，我們結合資訊領域研究中最新的技術，
包括資料檢索與探勘、資訊安全與隱私、雲端計算、圖型理論、代理人技術、位
置感知服務、數位學習和語意網等，目的就是建立一個使用者可以自行掌控自己
所有的資料，並進而分析和再利用資料的社群網路。 
 
關鍵詞: 社群網路服務、使用者為中心 
 
 IV 
 
目錄 
一、前言........................................................................................................................ 1 
二、研究目的................................................................................................................ 2 
三、文獻探討................................................................................................................ 5 
四、研究方法.............................................................................................................. 22 
五、結果與討論.......................................................................................................... 50 
六、參考文獻.............................................................................................................. 51 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 1 
 
一、 前言 
社群網路是目前 Internet 上最夯的話題之一，尤其是大量使用者所產生的海
量資料，對傳統的資料儲存而言是一大挑戰，而雲端計算剛好可以用來滿足社群
網路的資料儲存需求。 
社群網路服務（Social Networking Service，SNS）主要的作用是為一群擁有
相同興趣與活動的人建立線上社群[1]。這類服務往往是基於網際網路，為使用
者提供各種聯繫、交流的互動通路，如電子郵件、即時訊息服務等。他們通常可
透過朋友，一傳十、十傳百地把網路展延，極其類似樹葉的脈絡，所以中國大陸
上的人們稱類似的網站為脈絡網站。大多數的社群網路會提供多種讓使用者互動
起來的方式，例如聊天、寄信、影音、檔案分享、部落格、討論群組等。社群網
路為資訊的交流與分享提供了新的途徑。作爲社群網路的網站一般會擁有數以百
萬計的登記使用者，使用該服務已成為了使用者們每天的生活要務。當前世界上
有許多知名的社交網路服務網站，包括Facebook[2]、Myspace[3]、LinkedIn[4]、
Orkut[5,6]、Twitter[7,8]、Flickr[9.10]等等。而人人網、開心網、麥樂行等則在中
國大陸較有名氣。早期網際網路上大多數維持著很多提供使用者互動支援的服務，
例如BBS，新聞群組等，使用者多透過聊天室進行交流。隨著Blog等新型的網路
交際工具的出現，使用者可以透過網站上建立的個人首頁來分享喜愛的資訊。在
2002年至2004年間，世界上三大最受歡迎的社群網路服務類網站分別是
Friendster[11,12]、MySpace[3]與Bebo[13,14]。而在2005年之際，MySpace成為了
世上最大的社群網路服務類網站。傳聞當時其頁面存取量超越了作為著名搜尋引
擎的Google。接著在2006年第三方被允許開發，基於Facebook網站API的應用，
使得Facebook隨後一躍成為全球使用者量成長最快的網站，眾多網站隨後開始仿
效開發自己網站的API。社群服務網站的發展驗證了「六度分隔理論」（Six Degrees 
of Separation）[15,16]，即「人際關聯脈絡方面你必然可以透過不超出六位中間
人間接與世上任意先生女士相識」。個體的社交圈會不斷地擴大和重疊並在最終
形成一個大的社群網路。在此類透過「朋友的朋友是朋友」的原則下，實作而得
到發展的線上社群網路中，Friendster具備一定的代表性。社群服務類網站最早出
現是在2005年3月，由雅虎360°[17]首先推出，是以商業盈利為目的。接著在2005
年6月新聞集團成功收購MySpace。隨後在2005年12月，英國ITV購得Friends 
Reunited。此後在世界各地湧現出各種不同語言的社群網路服務類網站。 
本計畫希望建立國內自行開發的社群網站，並且整合分散於各地的各種計算
與儲存資源，透過總計畫整合起來，提供一個集合各項功能與資源而成的分散式
架構社群網站平台。所建立的社群網路服務將提供使用者可自訂專屬的使用介面
網頁，並且綜合各子計畫的所做的分析與研究，使用者可依據其需求要求各項社
群網路資料的分析，同時可靈活取用社群網路所產生的各項基本資料，本計畫已
建立合理的隱私管理機制，以及各項資料存取的管理與其使用介面，並且可於現
行的網路服務作結合。本計畫的總體目標為發展一開放並且以使用者為主軸的社
 3 
 
之，根據利用疊加後的圖形所形成的全域圖有效探勘頻繁最大完全子圖，藉以研
討量化使用者間因交互作用而產生的關聯性；接著，再將社群網站的環境視為一
個資料串流的環境，利用我們提出的路徑樹演算法，有效的探勘出序式式樣，如
此可以找出使用者近來關注議題的演進史。最後，我們以結構化同儕網路為基礎，
考慮擴大搜尋的範圍來滿足各種的查詢，並利用支持檔案名稱部份配對設計出有
效的搜尋機制。 
 
子計畫二：利用雲端計算的社群網路架構與建置(Social Network Architecture 
and Construction Based on Cloud Computing) 
本子計畫二的目的是研發利用雲端計算技術，去建置一分散式社群網路服務
架構，並利用虛擬化的技術達到資源的充分利用。首先，利用雲端計算技術中的
實體網路虛擬化，使得實體網路可以切分為多個虛擬網路，可建立虛擬區域網路
(VLAN)與虛擬私有網路(VPN)，因此網路的拓樸可能隨時改變，且在同一實體
設備上之虛擬設備間，亦需要有網路之通訊，因此虛擬設備之間的網路通訊將不
同於現有一般實體網路。在此環境下，利用現有的網路技術，使用者在進行網路
通訊時，需要將網路功能加入且包裝於資料封包中，然而，使用者並不清楚網路
之拓樸與狀況，無法使得網路的利用率最佳化，因此我們計畫使用虛擬之網路功
能，來管理虛擬網路。 
在本子計畫二中，我們將社群網路服務建置在雲端計算的架構上，主要以虛
擬化網路連結，以及虛擬化網路儲存為主。並建置使用者介面，提供社群網路服
務開發者方便設定其傳輸品質與功能。為適合雲端傳輸模式，亦將於二、三期研
究與發展相關傳輸協定，我們計畫帶入雲端計算研究中虛擬物件(virtualized 
object)之定址方式，用來發展雲端路由演算法。 
 
子計畫三：植基於圖形理論的使用者導向社群網絡分析之研究(A Study of 
User-Oriented Social Network Analysis Based on Graph Theory) 
本子計畫三的目標是以圖形理論為基礎來研究社群網路分析中常使用的
Metrics，並以使用者導向為依據探討分群相關主題。在第一期計畫中我們首先研
究目前適用於整體社群網路常見的Metrics，在轉換為使用者導向之社群網路時，
由於圖形結構的改變，所新增或減少的特性將影響這些 Metrics 而需要做適度的
修改，可能使得計算變得較為簡單或更趨複雜。由於分群在社群網路中扮演著相
當重要的角色，好的分群演算法不但可以減低系統的負擔，所提供適當的分群資
訊能讓系統更恰當的給予不同族群適合的資訊或服務，因此我們研究是否在使用
者導向社群網路中能夠降低分群複雜度並提出證明及演算法。而在社群網路中找
出特殊關係族群或使用者的議題也是大家所關注的。有別於以往單純找出某一特
殊圖形，目前像 k-center、k-clique、k-club 等新的問題，不但應用更為廣泛，而
且目前研究成果不多，因此我們的研究不但會在學術界提供成果，更會使本系統
之雲端處理更加實用。 
 5 
 
到資料庫進行分析且檢索有這些喜好的人按照興趣數列出。除此之外，使用者的
RDF 檔會存放在伺服器端，能達到語意網的資料共享、整合，而可被用到其它
應用上。 
 
三、 文獻探討 
 Hinet Hicloud 
中華電信提供了 Hicloud CaaS 服務[18]，如圖一所示，它採用雲端虛擬化技
術所開發之雲端伺服器服務。它提供了真實的虛擬運算環境，可以在多種作業系
統(Windows、Linux 等作業環境)上使用服務介面，並讓使用者可載入自訂的應用
環境，執行自己所要提供的網路服務。 
 
圖一 Hicloud CaaS architecture 
 
 Customizing Network Functions for High Performance Cloud Computing  
Miyamoto[19]等人為雲端計算研發了一個客制化的網路功能元件，如果使用
者欲使用一般網路功能，如：防火牆、加解密等，則封包必須先傳至 edge node
加上標籤，再由 edge node 將其轉發至 routing node 上，routing node 根據封包上
的標籤，將封包傳至所需要的 processing node，由 processing node 服務其所需之
網路功能。該架構可減少雲端計算上網路功能元件的數量，來達成共享之機制，
然而，在路由效能上必須多加考量，因為路由器將會藉此而產生額外的負擔。 
 DaVinci: Dynamically Adaptive Virtual Networks for a Customized Internet 
He[20]等人設計一個路徑可動態調整的虛擬網路，他們利用多條實體路徑來
完成一條虛擬路徑，該方法可調整虛擬路徑的頻寬，滿足不同的頻寬要求。一個
簡單的例子，節點 1 與節點 2 有兩條路徑，一條延遲時間與頻寬分別為 5ms 與
100Mbps，另一條為 10ms 與 1000Mbps，在傳送資料時，會先分析資料的特性，
 7 
 
 審查地圖和突出的問題和機會使用訪談或講習班。 
 設計和實施行動，以實現期望的變化。 
 映射網絡後再次觀察一段時間。 
一般使用者希望找到多年失聯的朋友或與緊密聯繫的好友有更多互動。對於
商人則希望能夠知道哪些使用者適合及需要他的產品或服務。好的社群網路分析
可以提供最適合的推薦並且提供完整的關係分析。社群網路在社會科學中應用也
越來越多，目前已經有應用在心理學、健康管理、商業管理、金融交涉…等各個
領域。而最近社群網路分析研究亦開始注重領導者網路，也就是在一個團體網路
中分析扮演重要聯絡人及能夠維持該團體關係的使用者，這樣的使用者對於該團
體而言變演著組織維持團體關係的關鍵。而這樣的聯絡人到底有多重要呢？我們
可以從他所在團體的大小來看。上述的問題以及類似的問題使得我們必須在社群
網路分析中定義一些『Metrics』，也就是測量參數，來量化並評測哪些使用者具
有特殊的地位或特質。目前常見的 Metrics 有： 
• Bridge：圖形中的一個邊若被拿掉後會導致圖形分成兩部份的話，則稱這個
邊為 Bridge。 
• Local Bridge：圖形中的一個邊只要邊的兩個端點沒有共通的鄰居就是一個
Local Bridge，和 Bridge 的不同點在於 Local Bridge 可以包含於一個回圈中。 
• Centralization：每個點的連結數差異度除以最大可能的差異度的總和。一個
集中的網路的連結會集中於單一點或少數點的周圍，反之一個不集中的網路
則會分散的較為平均。 
• Cohesion：這個數值是在測量使用者直接互相連結的多寡。一個團體若是每
個人都互相認識則被稱為『Clique』。若是沒有這麼強烈的連結的話則稱為
『Social Circles』。 
• Individual-Level Density：這個數值表示認識其他人的緣份，也就是經由其他
人的推薦認識的機率。 
• Global-Level Density：類似 Individual-Level Density，這數值表示整個網路中
相識的機率，亦可看作稀疏與密集網路的區別。 
• Path Length：社群網路中的兩個點之間的距離。整個社群網路的平均路徑長
度的是所有兩兩點之間的距離總和之平均。 
• Prestige：在一個有向圖中，是用來描述一個點的集中度。『Degree Prestige』、
『Proximity Prestige』、『Status Prestige』都是 Prestige 的測量方式。 
• Radiality：一個個人網路到達網路並提供新資訊及影響的等級。 
• Reach：網路中的任何成員到達其他網路成員的等級。 
• k-neighbors[21]：圖形中的一個點的所有距離為整數 k 的鄰居，我們用 Nk(V)
來表示。這個問題可以用 Breadth-First-Search（BFS）演算法來解決。 
• Components[21]：找出圖形中連通的部份。可以用 BFS 或 Depth-First-Search
（DFS）演算法來解決。 
• Shortest Paths[21]：可以用 BFS 或 2-Way BFS 演算法來解決。下列六種都是
 9 
 
o 可能位於網路中較好的位置。 
o 可能有良好的互動滿足組織的需求。 
o 通常被認為是第三方公司或是簽約者。 
• Cluster Coefficient[21]：一個點的 Clustering Coefficient 是與所有鄰居的邊數
除以可能的|N(v)|*(|N(v)|-1)最大值。而整個網路的 Clustering Coefficient 就是
所有點的平均值。然而對所有的點計算未加權的平均值不是一個好的測量方
法。因為 Clustering Coefficient 其實就是所有的三角形除以所有相連的三個點
的組合。也就是下列公式： 
 
而另一個社群網路分析關心的議題是分群問題。人與人之間的關係錯綜複
雜並且不時的在變動，在這樣的環境下的分群是很困難的。若是系統有好的分群
系統，則系統可以推薦給使用者適當的群組或是其他使用者來拓展使用者的交友
範圍。目前常見的分群問題有： 
• Overlapping And Non-Overlapping Clustering[21]：大部分的圖形分群都專注於
Non-Overlapping。最近，一些 Overlapping 的研究結果逐漸增加，其中有部份
的研究是利用 Non-Overlapping 的演算法修改而成的。而在社群網路中，族群
是經常互相重疊的。 
• Correlation Clustering[21]：每個人分別有兩個名單，分別是好友名單及壞人
名單。找出好感值最高的分群方式。這個問題可以改寫為每個人為一個點，
互相都有邊相連，而每個邊會被標記為『+』、『-』或不標記。我們想要將
這些人分成 k 個群組使得標記為『+』的總邊數減掉標記為『-』的總邊數是
所有組合中的最大值。 
• Bipartite Clustering[21]：在一個二分圖中，點被分作兩個子集合，而每個子集
合中的任意兩個點不會有邊，也就是邊只會存在於兩個點子集合之間。在這
樣的圖形中，我們對找出最大的完整二分子圖感到有興趣。另一個問題則是
將二分圖分群使得每個子群都是完整二分圖。而另一個有趣的 Bipartite 
Clustering 問題則是我們將一個點子集合定為成員，而令一個點子集合則定為
特質。在這樣的定義下我們希望將成員的子集合分群（不論是重疊或不重疊）
使得被分在一起的成員都具有相似的特質。 
• Hierarchical Partition Of Graph[21]：為了分配大型網路，階層策略是很必要的
且經常使用。大部分的演算法是要花費很多時間並且難以直接套用到大型網
路。其中一個方法是先將大型網路切割成較小的網路再套用這些演算法。 
• Clustering With Modularity[21]：Modularity 是由 Newman 定義來測量分群的
好壞。要找出一個有最大的 Modularity 的分群仍舊是一個 NP-Hard 問題。許
多這個領域的結果是使用 Graph Spectrum Theory。 
 11 
 
受限在一個特定的系統裡，只要有支援代理人平台的電腦或伺服器上都可以執行
[26,27]。 
現今運用代理人技術的領域涵蓋很廣泛，幾乎各個領域皆有專家學者投入相
關研究。代理人技術的源頭，以分散式人工智慧(Distributed Artificial Intelligence, 
DAI)[28-30]與分散式計算(Distributed Computing, DC)[31,32]方面最受到矚目與
關切。在 1970 年間，分散式人工智慧(DAI)領域中的專家學者開始規畫初期的代
理人基礎理論、架構與實驗等相關研究。它們在實驗中發現智慧化或有理性的行
為特質並不是靠個體代理人所能產生的，然而發現智慧化卻是融合一群代理人之
單純行為後所顯現出來的行為。 
代理人是具有溝通(communication)與合作(collaboration/cooperation)的機制。
國際間有許多訂定代理人技術標準的單位或組織，例如：FIPA (Foundation for 
Intelligent Physical Agents)[33]與 OMG (Object Management Group) [34]。 
 一般代理人所具備的特質如下： 
 Adaptivity：代理人具備學習能力並能隨經驗增長 
 Autonomy：代理人必須具有主動性，朝達成目標的方向下有自主能力
採取啟發性的行為 
 Collaborative behavior：代理人具備可以與其他代理人合作並一起達成
目標的能力與行為 
 Inferential capability：代理人具備推論的能力 
 Knowledge-level communication ability：代理人在與其他代理人溝通時，
具備使用人性化語言與溝通方式的能力 
 Mobility：代理人具備機動引導之能力，可以從一個 host 移至另一個 
 Personality：代理人具備個性化之特質 
 Reactivity：代理人具備選擇性感測與反應的能力 
 Temporal continuity：代理人具備保持身分扮演一致性的特質並能夠長
時間的維持 
代理人有能力自主地完成特定的任務，然而當面對一些複雜的問題時，如處
理分散式資料，或是與分散式控制之系統互動時，就需採用多代理人系統
(Multi-Agent System, MAS)。其中每個代理人都具備不同的特性功能，在完成某
一個共同目標的過程中扮演不同的角色。而一個多代理人系統是一個透過非緊密
式連結(weakly coupled)而成的網狀系統，其中包含很多個別的解決方案(problem 
solver)，而這些 problem solver 結合後的解決問題的能力，遠大於個體的 solver。
而多代理人系統也包含多種自動化 component 組合而成，其具備下列的特性： 
 每個代理人不具備完整可以獨力解決問題的能力 
 採用分散式的控制系統 
 代理人之間共用與分享同一個資料庫 
 採用不同步的計算方式 
基於以上的探討，多代理人系統的特質，如：adaptivity, autonomy, social, 
 13 
 
體(ontology)內的問題領域知識。 
 推薦系統 (Recommender System) 
推薦系統透過預測使用者對新物品的喜好（包括無形的物品，如：服務），
在做決策建議時提供個人化的建議。推薦系統主要廣泛使用了下列兩種演算法：
基於上下文法（context-based methods）和協同過濾法（collaborative filtering）。
基於上下文法測量被評估物品（目標物）的相似性，由使用者過去的經驗中，為
使用者（目標使用者）提供建議[43-46]。協同過濾法則藉由，對目標項目有相似
喜好的其他使用者的以往經驗為基礎，為目標使用者作出建議[46-49]。它可以推
測出，類似喜好的使用者對某項目(不)喜歡的可能性[50]。 
然而，推薦系統的效能受到一些阻礙限制[51,52]。由於缺乏新使用者以往經
驗的資訊，在使用基於上下文法時，可能會做出不準確的建議（新使用者問題）。
同樣地，由於新項目缺乏過去其他使用者對相關項目的經驗，在使用協同過濾法
時，往往無法做出建議（新項目問題）。在大多數協同過濾法的實施中，每個使
用者只能估算出一小部分的可用項目，推薦系統很難精確地從有限數據中測量用
戶的相似性（數據稀疏性問題）。最後，若推薦系統中沒有任何使用過的經驗時，
每個使用者或項目對系統來說都是陌生的，這會導致新用戶問題和新項目問題成
為極端值。 
為了解決上述的問題，通常採取兩種方法。第一個方法，是盡可能的蒐集所
需的新使用者/新項目的資料，以避免數據稀疏性、新使用者、和新項目這三種
問題[53]。然而根據以往的案例，這種方法並不能有效地改善推薦系統的準確性。
甚至在某些情況下，反而可能會更糟。第二種方法則是包含了更多額外的指標或
評分（使用者對於(不)喜歡的項目所給予的其他評分）[52,54-55]。在一定程度上，
它提高了推薦系統的準確性。但因為這種方式是在高度限制的情況下使用，可能
會因不同系統情況的改變而有所變動。 
在近年來，數位學習社群推薦系統（SNRS）已經普及地被作為一種替代方
式來設計推薦系統[56]。與傳統的推薦系統相比，使用者對系統的反映在SNRS
上有更大的影響力[57]。從另方面來看，基於上下文法的系統直接從使用者過去
的經驗和決策中的物品屬性來推測使用者的喜好。而使用協同過濾法的系統則是
自動編列出一組具有類似喜好的使用者；假設有一名使用者對某項目表示喜好時，
系統會推薦給同組的使用者。SNRS的另個優點是以反應在產品營銷中相關社會
影響力研究的重要性為基礎，在做出決定性的建議時，確實地考慮到使用者間的
社交關係[58]。 
在社群網站中，使用者們依共同的喜好兩兩互相聯結。在積極的情況下每個
使用者需要去推薦一個項目，給一個或更多的朋友。那些朋友當中有些人可能對
此項目曾有過經驗；假若沒有的話，也可從中獲得新的建議。在友誼的基礎下，
這些建議具有相當的可信度，因而可以被採納[59]。在消極的情況下，則不需使
用者從朋友中請求建議。使用者可以由一個或多個朋友中，觀察到一些項目的使
用，並將它解釋為一個隱含的建議。所以，使用者對資料的蒐集是極有幫助的。
 15 
 
有效的發掘、自動化執行、整合與再利用。」[75]，這句話是 Tim Berners-Lee，
James Hendler，Ora Lassila，在 2001 年 5 月 Science American 雜誌，The Semantic 
Web 裡提到，而將資料加以定義、連結，使得賦予完善的意義主要是利用知識本
體的相關資料模型(data-model)，例如，資源描述框架  (Resource Description 
Framework，RDF)[76]、資源描述框架基模 (Resource Description Framework 
Schema，RDF Schema，RDFs)[77]、網路知識本體語言(Web Ontology Language，
OWL)[78]、SPARQL（SPARQL Protocol and RDF Query Language）[79]等等，以
上皆是 W3C 語意網的標準。 
語意網的目標是使得網路上現有的資料，彼此使用新的格式 RDF，去進分
享資料，機器可以藉由 meta language 去處理，使用這些資料，還可以透過
SPARQL 的 RDF 查詢上的查詢語法，搜尋出有用的資料。而 RDF 進一步發展
延伸知識表示法（Knowledge representation and reasoning）的 RDFs，透過 RDFs
可以創建出自己的知識本體，去自行定義知識本體內的物件屬性、類別，OWL
更將擴展了 RDFs 內的資料，補足 RDFs 內原本所缺乏的，增加了一些類別之間
的關係的屬性等。 
藉 由 以 上 這 些 語 意 的 技 術 ， 也 發 展 出 很 多 公 共 詞 表 ， 如
FOAF(Friend-of-a-Friend，朋友的朋友)[80]、SIOC(Semantically-Interlinked Online 
Communities )[81] 、 Dublin Core[82] 、 SKOS(Simple Knowledge Organization 
System)[83]。 
在[84]之中，提及一個語意網應用程式的架構，應包含： 
1. RDF Parser/Serializer 
2. RDF Store 
3. RDF Query Engine 
4. Application。 
RDF Parser 用來將各種 Serialization formats 格式的文字轉換成 triples 的
RDF 資料模組型態；RDF Serializer 與 RDF Parser 功能相反，將 triples 的
RDF 資料模組型態轉換成各種的 Serialization formats 格式。 
RDF Store 是一個資料庫被用來儲存、取得 triple 的資料格式。除了擁
有與一般資料庫相似的功能，RDF Store 擁有額外的能力去合併來自多個來
源的資料。 
RDF Query Engine與RDF Store息息相關，使用一個結構化的查詢語言，
提供了能力從 RDF Store 中取得資訊。 
Application 是一個應用程式，可以透過這些資料作一些處理；分析、使
用者之間的互動、存檔 … 等等。必須透過一些程式語言去達成這些能力，
透過 RDF query engine 去存取這些 RDF store，架構圖如圖三所示。 
 17 
 
知識本體是建構特定領域的概念，對事物作統合的詮釋、描述，[86]提出以
下四點特性： 
1. 概念化(Conceptualization) : 
將某領域的概念化，以提供結構性知識的描述，讓該領域的相關成員能
相互溝通。 
2. 正規化(Formal) : 
知識本體是一群正規化表示的概念集合，以清楚的語意定義及數學符號所
形成的語言描述，可為人類所閱讀。 
3. 明確的(Explicit) : 
所使用的概念及使用這些概念的限制都有明確的定義，可供機器理解。 
4. 可分享(Share) : 
[87]提出對知識本體的看法：知識本體能夠對特定領域進行概念及關係的
定義，藉推論程序獲得隱性知識的建構，因此較能貼近對真實世界的認
知。[88]描述知識本體主要是以框架和邏輯為基礎，表達真實世界的知識
脈絡。綜合以上兩點，知識本體表達的是真實世界共同認可的知識，反
映的是領域中公認的概念集，可作為溝通的媒介。 
知識本體在語意網中是很重要的角色，而它的建置決定了語意網裡的知識架
構，一般而言，建構知識本體之步驟主要有下列八項[85]： 
1. 決定領域和範圍。 
2. 考慮再使用已存在的知識本體。 
3. 列舉項目，匯集重要的詞彙。 
4. 定義分類。 
5. 定義類別屬性。 
6. 定義屬性之片面(facets)。 
7. 定義樣立、建議知識節點。 
8. 檢查異常。 
 語意搜尋引擎 (Semantic Search Engine) 
在全球資訊網還沒被發明以前的 1990 年初，已經有搜索工具存在－－Archie、
Gopher 等，但只能用來查詢散佈在各個分散主機裡的文件。而之後網際網路快速
發展，有了 Web 技術之後，搜索工具也有些進步，是不僅可搜尋又可瀏覽分類目
錄的「目錄導航系統」，但是缺點是網站的收錄及更新都要靠人工維護，在資訊量
大增的 1994 年，不太受用。然而同年 7 月，Lycos 發明了在搜尋結果中使用「網
頁自動摘要」，此為搜尋引擎史上最重要的進步。後續幾年，搜尋引擎都有不錯的
發展，1995 年第一個具有「網頁內容分析、有智能處理能力」的搜尋引擎產生了。
1997 年，開始對搜索結果進行簡單的「自動分類法」。隔年，Google 成立了，成
為目前世界流行的搜尋引擎之一。 
搜尋引擎發展至今，數量已經有上百個搜尋引擎，而從發展趨勢來看，隨著
科技越來越進步，在資訊時代下知識量的成長與日遽增，網路上的資訊量大爆炸，
 19 
 
 
圖五 Bing 中文版網頁上搜尋「how old is Tim Berners-Lee」的結果 
而用相同的字串在 Google 英文版上面搜尋，搜尋結果如圖六所示，因為
Google 並不是把關鍵字搜尋替換掉，而是加入語意搜尋技術做結合，所以還是
會出現一般搜尋的結果。Knowledge Graph 可以讓使用者搜尋 Google 知道的各種
人物、地點或事物，包括地標、名人、城市、運動隊伍、建築、地理景觀、電影、
天體、藝術品等，並即時地將相關資訊顯示出來[89]。在圖六中，紅色框框為新
功能加入之後新增的區塊，左、右框分別為問題解答和特別整理過的相關資訊，
但是這兩個框框並不是搜尋任何問題時都會出現 。  
 21 
 
 
圖七 Wolfram Alpha 對於「how is Tim Berners-Lee」的計算結果 
三個不同的網路搜尋/計算引擎，用相同的問題去做提問，因為所用的技術
不同，而結果有非常大的不同。現今時代知識量暴增，在網路上的資源也大爆炸，
根據 Netcraft 從 1995 年 8 月至 2012 年 7 月的網頁數量統計表如圖八所示，尤其
近年來網頁數增加的非常驚人，如何從 665,916,461 個網頁精確得找尋出想要的
資訊，「了解你問的，給你想要的」絕對是現今搜尋引擎能繼續保有市場的條件，
而這非語意搜尋、知識型引擎莫屬。 
 
圖八 Netcraft 從 1995 年 8 月至 2012 年 7 月之網頁總數統計表[90] 
 23 
 
路服務中的資料，另外使用者也可以根據自己的需求及興趣，利用社群網路的資
料，使用子計畫開發的功能，進行使用者在網站上個人的社群網路資訊探勘，以
及在隱私權機制下，利用多代理人及結合語意網的機制，針對社群網路資料的搜
尋。本計畫建立的社群網路服務將利用雲端計算、圖形理論及虛擬化技術，同時
也提供數位學習的功能，將建立可回饋的資訊給使用者的機制。 
在子計畫一部分： 
本子計劃一將社群網站中使用者間的關聯視為一個圖，以圖形結構表示之，
根據利用疊加後的圖形所形成的全域圖，有效探勘頻繁最大的完全子圖，藉以研
討量化使用者間因交互作用而產生的關聯性；接著，再將社群網站的環境視為一
個資料串流的環境，利用我們提出的路徑樹演算法，有效的探勘序列式樣，如此
可以找出使用者近來關注議題的演進史。最後，我們以結構化同儕網路為基礎，
考慮擴大搜尋的範圍來滿足各種的查詢，並利用支持檔案名稱部份配對設計出有
效的搜尋機制。 
我們第一年總共討論三個議題，分別為探勘最大完全子圖，在資料串流環境
下探勘序列式樣以及在結構化同儕網路下設計支持部分檔名查詢的有效搜尋機
制，茲分述如下： 
 探勘最大完全子圖 
近年來，圖形探勘已是資料探勘中熱門的研究項目並且應用在相當多的領域。
然而，大部份的高頻圖形探勘演算法並沒有專注於特定拓撲結構，像是完全子圖
(clique)。本篇研究中，我們將探討在圖形資料庫中，找出一種最大且頻繁出現
的特殊結構：完全子圖(clique)。 
首先，我們將探討如何在靜態資料中探勘完全子圖的問題，我們將問題描述，
讓 Σ表示為一標籤集合，一個圖形(graph) G = ( V, E, λ ) 則代表著一個無向標籤
圖形，其中 V 代表著圖中的節點(vertex)集合, E 代表著邊(edge)的集合，而 λ 則
為一對應函數，將每一個節點對應到一個屬於 Σ的標籤。而一個完全子圖(clique), 
C, 則為一個完全連結的節點集合，且當子圖內包含 k個節點時，則稱為 k-clique。
在圖形探勘的問題中，首先要面對的就是圖形異種同形(isomorphism)的問題，異
種同形的定義如下： 
Definition (isomorphic) 
A graph G1 = (V1, E1, λ1 ) is isomorphic to another graph G2 = (V2, E2, λ2 ) iff the 
following two conditions hold 
1. |V1| = |V2| 
2. there exists a bijection  f : V1 →V2  such that for u≠v if (u,v)∈E1 then ( f(u), 
f(v))∈E2 and if λ1(u) =λ1(v), then λ1(f(u)) = λ1(f(v)) 
當一個子圖 H 與圖形 G 裡的某一個完全子圖是異種同形時，我們則稱圖形
G 支持完全子圖 H。為了節省判斷異種同型的時間，我們將資料庫中所有的圖形
先全部疊加成一張疊加的圖形，而為了保證所有圖形中的完全子圖都會在疊加後
的圖形中找到一個同構的子圖存在，我們將每一張圖拆成一個一個的邊，並根據
 25 
 
2. For each Ci∈BC do 
Scan Ci to obtain its frequent 2-cliques. 
Let CANiC = {frequent 2-cliques} 
3. while CANiC  is not empty  
apply MaxMiner to obtain the resulting set Fi 
4. Let 1
k
i iF F== U  and MFC = ∅  
5. while F ≠ ∅  
let g∈F be a candidate of maximal frequent cliques 
                  \ { }F F g=  
if g is frequent  
        { }MFC MFC g= ∪  
else 
add each subclique of g into F 
return MFC 
 
在這項研究中，我們將圖形集合疊加為一個疊加圖後，利用有效率的
GVG_Mine 演算法探勘最大頻繁完全子圖。 
 在資料串流環境下探勘序列式樣 
因為現今社群網路已變成社會大眾大多數人每天會登入交流的平台，每天都
會有數以百萬筆資料做更新，因此我們將社群網站的環境視為一個資料串流的環
境。在本篇研究中，我們就是要探討在資料串流的環境下如何有效探勘序列式樣。
由於大多數的使用者感興趣的是當下的資訊，而非先前的資訊，我們將透過時間
窗(time window)的機制來區分哪些資料為使用者感興趣的資訊。並且提出一個樹
狀的資料結構(Path tree)，來儲存各使用者的瀏覽路徑，我們以下面的例子說明
在初步想法中，我們如何建立此樹狀結構。 
 
圖十一 Data of sensor gathering in each time period 
 27 
 
10:     insert i into node1
js
 with timestamp kt ; 
11:     if sup_count( 1
js
node ) ≥ εn  then 
12:      Path Extension; 
13: Pruning Process; 
在這項研究中，我們利用Path Tree資料結構和儲存資料大小和正確度能取得
良好權衡的PA演算法來探勘在資料串流環境下的序列式樣。  
 在結構化同儕網路下設計支持部分檔名查詢的有效搜尋機制 
在本子計畫一中，我們希望引入兩個在一般部分字串查詢上常用的特殊符
號 ’+’, ’*’，以方便使用者表達其欲搜尋的檔名。’+’代表剛剛好一個字元，如使
用者下達 A+B，則代表只要是開頭 A 結尾 B，且 A 與 B 中間剛剛好有一個字元
的檔名，即為符合目標。’*’代表沒有或是有多個字元，如使用者下達 A*B，則
代表只要開頭 A 結尾 B，而 A 與 B中間不管有沒有字元或是有多個字元的檔名，
即為符合目標。在介紹完’+’與”*’之後，我們將從檔案發表(File puplish)以及查詢
處理(Query processing)兩方面來討論。 
 在 CHORD 中，每一個發表的檔案會經由一個雜湊函式，將其檔名(或是根
據關鍵字)對應成在 CHORD ring 上的一個值，而該檔案的索引值則會儲存於負
責範圍包含該值的節點上。所以在計畫中，我們將考慮如何將發表檔案之檔名對
應到 CHORD ring 上的一個值，且必須要能提供部分檔名的查詢。我們的初步想
法為，當一個檔案要被發表時，我們將其發布的檔名(或關鍵字，在之後的討論
中我們皆以檔名統稱之)利用滑動視窗(sliding window)切成一個一個長度為 d 的
片段，在這裡我們引入兩個參數，d 與 r，d 代表的是 dimension，r 則代表 range。
在得到這些長度為 d 的片段後，我們將利用下面的式子將一個長度為 d 的片段對
應為 CHORD ring 上面的一點: 
1
m
0 1 1
0
( , ......, ) ( )  mod 2
d
j
d j
j
Loc v v v v r
−
−
=
= ∑
………公式一 
在公式一中，p 代表最後對應的值，我們將稱其為 key 值，m 代表在 CHORD
中 Finger table 的大小，si 則代表在這長度為 d 的片段中第 i-1 的字元。上述式子
的意義為:將每一個字元先對應為一個 0~r-1 的值，在將他們在字串中的位置全重
加入考量，加總起來得到的值，即代表這個長度為 d 的片段在考慮字元不同位置
的關係下所得到的一個對應值，接著，再將該值 mod CHORD 上的最大值(2m)
使其能符合 CHORD 的 key 值的範圍。對於一個長度為 len 的檔名，根據上式，
將會得到 len-d+1 個 key 值，我們將這 len-d+1 個 key 直接發表於 CHORD 中，
也就是說，一個檔名長度為 len 的檔案，在 CHORD 中，將會儲存於 len-d+1 個
索引值。下面我們列出檔案發表的演算法： 
 29 
 
在公式二中，f(si)={0,1,…,r-1}的意思是當碰到’+’這個字元時，我們將會將在
這個維度(dimension)的所有可能值皆考慮，在上例中，如果H(B)=1, H(C)=0, 
H(D)=2，而r=3時，我們將會得到<1,0,0,2>, <1,0,1,2>以及<1,0,2,2>三組數字，這
三組數字再利用公式二的下式，即可各得到一個key值，我們只需將查詢繞境
(routing)至負責範圍包含這些key值的節點(在例子中會產生三個值)，即可找到所
有檔名包含”BC+D”字串的檔案。因為只要該檔案之檔名包含”BC+D”這個子字串，
無論是”BCAD”, “BCBD”或是”BCCD”等等皆是符合的字串，而這些符合的字串，
在維度一，維度二以及維度四時，其產生的值分別為H(B), H(C)以及H(D)，只有
在維度三上，其可能為H(A), H(B)或是H(C)等等，也就是說，在該維度上所有可
能的值皆有可能，是故，我們將’+’對應為所有可能的值，在找尋的過程中即不
會漏掉任何可能符合的檔案。下面我們列出查詢處理的演算法： 
A l g o r i t h m   S e a r c h
I n p u t  :  
           :  q u e r y
           :  d i m e n s i o n
P r o c e d u r e     Q u e r y  (  ,  )
1 :    S e l e c t  t h e  r e p r e s e n t e d  s t r i n g   i n    
2 :    T r a n s l a t e   t o   a c c o r d i n g  t o  e q u a t i o n  3  
3 :    i f  (  c o n t a
Q
d
Q d
S Q
S Q P
Q P i n s  " - 1 " )
4 :         e x t e n d s  t o  
5 :        F o r  e a c h   i n  
6 :            T r a n s l a t e   i n t o  a  k e y  a c c o r d i n g  t o  e q u a t i o n  1
7 :            P u t  t h e  k e y  i n t o  s e a r c h _ p o o l
8 :    e l s e
9 :        T r a n s l a t e   i n t o  a
Q P C Q P
Q P C Q P
Q P
Q P  k e y  a c c o r d i n g  t o  e q u a t i o n  1
1 0 :      P u t  t h e  k e y  i n t o  s e a r c h _ p o o l
1 1 :  F o r  e a c h  k e y  i n  t h e  s e a r c h _ p o o l
1 2 :      S e a r c h  t h e   p e e r s  r e s p o n s i b l e  f o r  t h e  k e y  
1 3 :  e n d
   
在這項研究中，我們提出了一個新的搜尋機制，可以讓不同的同儕系統擁有
支援部份配對查詢的能力，並且我們的方法能夠支援複雜的查詢與保證查詢結果
的品質。 
 
在子計畫二部分： 
本子計畫的目的是研發並利用雲端計算技術，當作建設社群網路服務平台的
架構。在雲端計算中，利用虛擬化的技術達到資源的充分利用是雲端計算的一大
特色，因此本子計畫的目標是利用此概念，使得社群網路主機的資源，包括網路
和儲存等資源，能夠利用虛擬化技術整合在一起，以便充分利用實體資源，藉此
 31 
 
圖十三 NIT Social Network UI 
 
圖十四 子計畫二系統架構圖 
 入口網站的帳號操作介面與統一帳號操作介面之整合 
由於社群網站的使用平台相當多樣，且網路平台的架構是建設在雲端的基礎
上，也跟以往的研究皆不相同。因此第一年需對開發介面訂立統一的標準，建立
共同的開發界面以利最後的整合。 
 系統效能及事件紀錄 
 33 
 
析後也是可以利用既有的圖形演算法來修改套用，例如：Bridge 可以對應到找一
個圖的 Cut Vertex，Betweenness 可以利用最短路境演算法來修改…等，因此我們
首先要先分析使用者導向的社群網路是否具有一些特殊圖形性質來讓我們可以
利用，好讓我們在修改套用演算法時能夠降低時間及空間複雜度讓系統能夠節省
更多資源。使用者自行定義的社群網路會隨著參數的調整而改變圖形，例如若是
設定為彼此都互相認識的使用者就會衍生出一個完全圖，若是設定以該使用者為
中心去掉其他具有共同好友的身份的使用者則會衍生出一個星星。若是把興趣看
作虛擬的點，設定至少要有列出一定數量以上的興趣（也就是有過若干邊連向興
趣）的使用者來過濾的話則會衍生出一個二分圖來。在這樣的一個環境中看似有
無窮可能的衍生圖，其實由於參數的限制，我們仍舊可以歸納出在哪些設定時會
有特殊性質出現供我們利用，因此在第一個方向中我們首先要先歸納參數對圖形
的影響在利用既有的演算法來修改套用。 
而圖形分群在圖形理論中其實也是有相當的研究成果，尤其是在
Non-overlapping 的部份。然而，較為符合社群網路的是 Overlapping 的研究，因
為人與人之間的關係錯綜複雜，有些使用者不是能夠輕易的被分到某個單一族群
而與其他族群沒有聯繫。在生物領域中，經常被拿來比較的 k-Means 演算法原本
也是個 Non-Overlapping 的演算法，但是後來 Cleuziou 將其一般化至
Overlapping[95] 。 雖 然 Overlapping 的 研 究 開 始 的 比 較 晚 ， 但 是 由 於
Non-Overlapping 的演算法有相當多研究成果，因此大部分 Overlapping 分群或多
或少都有參考 Non-Overlapping 的演算法概念。我們的研究則是基於使用者社群
網路的圖形特性來選擇相近的演算法來套用，由於社群網路不斷的有使用者加入
且人際關係是不時在變動的，因此好的分群演算法能讓系統快速分群並維持系統
順暢。 
尋找特殊子圖的部份由於圖形理論有蠻多的研究成果，因此我們主要是研究
k-Center、k-Clique、k-Club 等較為特殊的圖形。要注意的是 k-clique 與 k-club 在
圖形理論中雖然有相似名稱但是找的是完全不一樣的子圖，而 k-Center 雖然是找
Center，但是由於 Center 是位於各個族群密集處，因此其實也可以看作是一種分
群問題。k-Clique 的部份，由定義可以知道我們必須讓 k-Clique 距離為 k，也就
是我們可以把問題轉為在圖形中找出直徑為 k 的子圖，這樣我們就可以參考及利
用找直徑的演算法來做修改。而 k-Club 的部份，因為必須是在衍生子圖上的距
離為 k 所以難度比 k-Clique 高，但也更貼近實務。 
圖形相似度比對的應用很廣泛，例如：生物的蛋白質比對，車載網路、社群
網路想要尋找相似的人或團體…ㄉ等。一直以來圖形相似度的比對是個難題。本
子計畫三目前的研究成果主要可以分成下列三種： 
1. Graph Isomorphism： 
圖 G 及 H 同構是指存在一個雙向對應函數 f 使得 G 的任意兩個點若有邊相
鄰的話若且唯若 H 中的對應的兩個點也要有邊相鄰。這樣的雙向對應通常叫做
邊維持雙向對應，而一般的看法則是偏向結構維持雙向對應。用圖形同構來測量
 35 
 
 自主式多代理人系統架構 
本系統主要目標在於提供使用者代理人機制，進行社群網站的資訊收集，如
圖十六所示為自主式多代理人系統架構，主要分為五個子系統，分別是 UI Agent
子系統、User Agent 子系統、Social Agent 子系統、DataBase 子系統、Search Agent
子系統，以下將就各子系統分別說明之： 
1. UI Agent 子系統：提供使用者操作本系統的操作介面，執行其餘各子系
統的功能。 
2. User Agent子系統：提供使用者連接社群網站，通過身份認證動作之後，
才交由 Social Agent 進行資料擷取與儲存的工作。 
3. Social Agent 子系統：擷取使用者在社群網站所發佈的訊息、以及擷取
使用者在社群網站的朋友所發佈的訊息，並將資料傳送到 DataBase 子
系統。 
4. DataBase 子系統：主要是將 Social Agent 子系統所傳送過來的資料進行
儲存作業，以及 Search Agent 子系統的查詢作業，亦為將來 Discovery
機制的資料挖掘時，提供運算所需的資料。 
5. Search Agent 子系統：主要提供使用者可以搜尋資料庫，搜尋自己、以
及朋友在社群網站所發佈的訊息內容。 
 
圖十六 子計畫四系統架構圖 
由於 Facebook 可提供 JavaScript、PHP、iOS、Android 的 SDK，我們選擇使
用 Facebook SDK for PHP，做為系統開發的環境。如圖十七所示為自主式多代理
人系統運作流程圖，在使用者執行本系統的 Facebook App 時，系統呈現的是 UI 
 37 
 
在本計畫中，我們定義目前系統現有使用者在社群網路上的熟人也是系統的
使用者。在SNRS中，每個使用者只會收到自己熟人的建議，但不代表每個建議
都是來自於自己的熟人。另一方面，使用者也提出一個項目，要求自己的熟人提
出建議，但他本身卻不能提供建議。這個方法無法有效地解決社群網路中的數據
稀疏性問題。在現實的生活中，我們稱「專家」為有一群對一個或多個知識領域
有豐富知識和興趣的人們[105]。專家們之間經常會進行交流思想、意見、甚至
內幕消息。因此他們對同個領域都有一定程度的知識，也具有共同的基本觀點。
這樣的群體我們稱之為專家組織。 
把專家組織加入SNRS中，將有效地緩和數據稀疏性問題的影響。藉由專家
組織和SNRS機制的整和，使某領域的專家在被要求提供建議時，即使他缺乏以
往的經驗，但仍然能夠從專家組織中間接地提供建議。若專家組織沒有被整和的
話，被要求者在尋求建議時，很可能會向非專家尋求，將導致數據稀疏性問題加
深擴大。SNRS使用自主軟體代理為基礎。每一個代理都代表一個單一的使用者，
去徵求採購項目的建議。每一個代理者間的連接，都代表他們之間互相熟悉。代
理者可以互相給予不同的誠信指數，但只可能拿到熟人給予的誠信指數。代理者
去評估是否購買各種物品時，如果被評估的項目，代理者沒有使用的經驗，他將
尋求建議，流程如圖十八所示。首先，我們先確認代理者是否為專家組織的成員。
如果是，他將可以從其他成員那邊得到建議，並以此為基礎做出決定；若不是的
話，則是會向自己的熟人尋求建議。 
 39 
 
代理者的基本原則是： 
1.無論對項目的喜好為何，直接或間接去提供建議。圖十九為間接提供的過
程。 
2.從熟人的建議中，決定是否採購項目。如圖二十所示。 
3.根據獲得建議的經驗，去評估熟人的可信度。 
 
圖十九 代理者接受建議的流程 
 
圖二十 代理者請求熟人提供意見，決定是否採購項目 
每個代理者在採購初選擇時，對每個項目都有不同的喜好。我們用一組屬性
來標記喜歡或不喜歡，未標記者則表示無感。一開始我們不會知道代理者對項目
的喜好，在經由採購後才能得知。在採購過一個後，我們可以確認是否保留此項
 41 
 
, ,1i i i iε µ µ= ∀ ∈Μ ≤ ≤ Ω    (3) 
如果選定的組成員數，大於一個專家組織所需的最小成員數，他們將會被目
前的專家組織移除，並被放置到一個新創立的小組。 
相反的，若有表現出類似建議的專家組織，就可以合併成一個新的組織。方
法如下述： 
當代理者決定停止接受意見時，如果有兩個專家組織同時提供意見，這時存
在ι 為分別來自於兩個專家組織（R和R’）對上個項目的建議。 
1
, , , !j j j j
j
r r r R r R R R
ι
=
′ ′ ′ ′≡ ∀ ∈ ∀ ∈ ≡I   (4) 
然後將兩個專家組織R和R’相結合，成為一個新的專家組織。 
定義Ψ為SNRS中的所有代理者。ΛΨ是代理者ψ的所有的建議請求。AΨ為ψ的
所有熟人。d(λk, αk)是代理者ψ透過熟人αk的建議請求λk的搜尋距離。 
效能的衡量標準是所有社群網路代理者每個建議請求的平均搜尋距離總和。
式（5）中所產生的值越低，代表效能越高；產生的值越高，則效能越低。 
( , )
k k
k kd
ψ ψλ α
ψ ψ ψ
λ α
∈Λ ∈Α
∈Ψ Λ × Α
∑ ∑
∑     (5) 
另一個效能的指標是去平均每個代理者為他的熟人所評比的誠信指數的總
和。令T(ψ, αk)為代理者ψ所獲得的熟人αk誠信指數。下式（6）所產生的值越高，
則效能越高；產生的值越低，則效能越低。 
( , )
k
kT
ψα
ψ ψ
ψ α
∈Α
∈Ψ Α
∑
∑
    (6) 
 
在子計畫六部分： 
本子計畫六分成四個階段進行，各階段簡要說明如下： 
1. 文獻彙整研究：由於研究初步階段對於語意網還尚未很了解，需要廣泛
閱讀語意網相關文獻及資料模型相關教學資料，閱讀同時作彙整，希望能夠熟悉
語意網架構、運作方法、資料模型相關語法以及了解語意網是否已經曾有與本計
畫相關的研究，方法和成果為何，進一步思索並決定第二階段研究的方向，並從
其中整理分析可用的資料。 
 43 
 
 硬體環境：Linux 電腦作業系統。 
由於 Facebook 並沒有提供相關的語意技術支援，只有提供支援 JavaScript、
PHP、Android 與 iOS 的 SDK，我們選擇了 JavaScript 和 PHP 的 SDK 來完成我
們將 Facebook 資料轉成語意格式的應用程式。 
然而依照現今的網頁伺服器、資料庫，並未將相關的語意工具整合融入，所
以我們決定，將藉由現有的 RDF System 去實作，將 RDF 檔案以 Triple 格式去
儲存 Facebook 的大量資料到資料庫中。從 http://www.w3.org/RDF/網站中，見到
許多現今正在開發的工具，而 RAP[106]、ARC2[107]、4Store[108]、Jena[109]
是比較熱門的工具，在這之中 ARC2 是比較成熟並持續在發展中的工具。於是我
們選擇了 ARC2 做為我們將 RDF 檔案分析成 Triple 格式存入資料庫的工具。 
ARC2 是一個基於 LAMP system（Linux、Apache、MySQL、PHP），一個整
合型的 RDF System，包含了多種的語法分析器，如：RDF/XML, N-Triples, Turtle, 
SPARQL + SPOG, Legacy XML, HTML tag soup, RSS 2.0, Google Social Graph 
API JSON…，並擁有網頁閱讀器，支援 Proxies、Redirects、Content Negotiation，
將網頁內的 RDF 內容匯入，將 RDF 資料儲存進 MySQL 的資料庫內[107]。 
使用 ARC2 可以透過兩種方式： 
1. ARC2 所產生的網頁控制介面 SPARQL endpoint  
2. 透過 Command Line 的方式去使用 ./cli.php 
以上兩種方法皆可以將一個 RDF 檔案格式的檔案、網頁內含有 RDF 文件，
匯入至資料庫內，再利用正規的 SPARQL 語法去查詢，除了上述的方法之外，
亦可以使用 PHP 來撰寫自己的應用程式。 
 
 
圖二十二 子計畫六系統架構圖 
 
使用 Facebook API 去得到使用者資料，並透過 Converters 將資料轉換成
ARC2 可以匯入的 RDF 格式，將所有的 RDF 資源在 RDF Store 中進行合併，並
使用 ARC2 的 Parser and Serializer，讓已經 parse 出來的檔案，可以共享資源於
網路上，在圖十二的中央為 ARC2，同時擁有 RDF Parser/Serializer、RDF Store、
RDF Query Engine 的功能，缺少的只是應用程式，如何分析使用資料的介面。 
 45 
 
 
圖二十四 子計畫六系統運作流程圖 
使用者在瀏覽到網頁後，有兩個步驟 1. 提供自身的基本資料 2. 透過網頁去
使用 RDF Store 中的資料。會先立即判斷是否同意網頁應用程式取得使用者的資
料，在同意過後，網頁應用程式就可以透過 Facebook javascript SDK 取得使用者
的基本資料，經由應用程式產生成 RDF 檔案並匯入至 RDF Store。 
接著使用者可以在網頁頁面中，透過 Autocomplete 來選擇 RDF Store 中的興
趣項目，以及按下搜尋按鈕後，搜尋出 RDF Store 中所有擁有共同興趣的所有使
用者。 
 系統操作說明 
系統建構於 Facebook 平台上，發展結合語意技術的應用程式，所以必須持
有 Facebook 帳戶之使用者才能使用。使用步驟如下： 
步驟一：進入 Facebook 網址(http://www.facebook.com/ )，登入後在 FB 網頁
上方搜尋本計畫開發之應用程式名稱，Semantic Web RDF Reader，如圖二十五所
示。 
 
圖二十五登入 Facebook 網站後，在上方搜尋 Semantic Web RDF Reader 應用程式 
步驟二：初次使用之用戶，為確保隱私權原則，須要先點選同意，允許授權
後才能使用。若是授權過的使用者可以直接使用應用程式(跳至步驟四)。 
步驟三：應用程式將會存取你的基本資料，並做成 RDF 檔案提供查詢興趣。 
步驟四：進入成功後顯示畫面如圖二十六所示。同時可以輸入你想搜尋的興
趣。 
 47 
 
 
圖二十七 輸入台東大學資工系學會之後的檢索結果 
操作範例二：如果同時選取多個興趣查詢，結果關於這些人感到有興趣的數
量有了變化，如圖二十八所示。其中 Ting-Han Su 在選取的興趣”阿福 Afu 樂福
星球 Official”、”FHM Taiwan 男人幫國際中文版”以及”台東大學資工學系”中，
對於其中兩個有興趣，而 HsiHo Huang 也是對其中兩個有興趣，馬俊鵬則只有一
個。 
 49 
 
 
圖二十九 自動完成文字輸入功能會列出讓使用者做參考的項目列 
SPARQL 語法解析：資料庫內的資料是以 RDF Triple 格式儲存，所以透過如
圖三十的 SPARQL 語法，可以針對所有使用者的興趣作為搜尋的目標及依據去
列出參考的項目。此語法中，對於查詢每一個檔案?rdf，將每一個檔案中的主題
人物?person，興趣?interest 給列出來，並使用已輸入的字詞"term"，透過 FILTER
過濾器，用 regex 正規表示法的方式，去篩選所有符合條件的 100 個結果? 
interest_name。 
 
圖三十 根據使用者輸入項目，搜尋所有使用者的興趣列出之 SPARQL 語法 
而當使用者輸入檢索項目後，會依循圖三十一的語法，執行尋找共同興趣的
所有使用者。此語法中，在查詢每一個檔案?rdf 的使用者，留下擁有興趣 interest1
或興趣(interest2 的使用者?person)，並利用 count(?interest)計算出每一個使用者，
所擁有這些的興趣數。 
PREFIX foaf: <http://xmlns.com/foaf/0.1/> 
PREFIX dc: <http://purl.org/dc/elements/1.1/> 
 
SELECT DISTINCT ?interest_name WHERE { 
  GRAPH ?rdf { ?rdf foaf:primaryTopic ?person . 
        ?person foaf:interest ?interest . 
        ?interest dc:title ?interest_name. 
        FILTER regex(?interest_name , "term") 
 } 
} 
LIMIT 100; 
 51 
 
社群網路平台並完成以下的基礎建設：定義統一操作介面之制訂、定義統一的帳
號操作介面轉換到不同子計畫帳號的程式開發、入口網站的帳號操作介面與統一
帳號操作介面之整合、系統效能監視及事件紀錄功能。在子計畫三，社群網路分
析之使用者導向 Metrics 對我們所研究的相似圖形比對提供了社群網路另一種
不同於資料探勘的搜尋方式，可以讓整個社群網路之搜尋系統更完善。同時，在
容錯研究方面也讓相似圖形比對可以更貼近實務，讓使用者感覺系統更具有使用
者導向的彈性。在子計畫四，我們開發了以多代理人為基礎的搜尋與發現機制已
經可以提供描述資料以及個人化的搜尋與發現服務，並可同時支援社群網路資料
可視性、推薦與分享之相關應用。在子畫五，我們以使用者的需求為出發點，結
合推薦演算法以及雲端運算系統，提供了目前國內少見的Elearning2.0 系統示範
應用，藉由此計畫的執行將可為我國正值起飛之際的數位學習產業打下基礎，並
且提供一個新的開發方向和具備前瞻性的示範應用。在子計畫六，發展出一個能
夠將Facebook個人資料、興趣等社群資料語意化的應用程式，利用此應用程式取
出的語意格式資料來實作語意檢索工具，讓使用者可檢索共同朋友的喜好項目。
語意化過後的檔案，將能夠擴展到其它平台上應用，達到資料共享、整合。 
 
六、 參考文獻 
[1] Wikipedia, “Social Network Service”,  
http://en.wikipedia.org/wiki/Social_network_servic 
[2] Facebook, http://www.facebook.com 
[3] MySpace, http://www.myspace.com 
[4] LinkedIn, http://www.linkedin.com 
[5] Orkut, http://www.orkut.com 
[6] Wikipedia, “Orkut”, http://en.wikipedia.org/wiki/Orkut 
[7] Twitter, http://twitter.com 
[8] Wikipedia, “Twitter”, http://en.wikipedia.org/wiki/Twitter 
[9] Flickr, http://www.flickr.com 
[10] Wikipedia, “Flickr”, http://en.wikipedia.org/wiki/Flickr 
[11] Friendster, http://www.friendster.com 
[12] Wikipedia, “Friendster”, http://en.wikipedia.org/wiki/Friendster 
[13] Bebo, http://www.bebo.com 
[14] Wikipedia, “Bebo”, http://en.wikipedia.org/wiki/Bebo 
[15] Wikipedia, “Six Degrees of Separation”,  
http://en.wikipedia.org/wiki/Six_degrees_of_separation 
[16] X. Ke, “A Social Networking Services System Based on the “Six Degrees of 
Separation” Theory and Damping Factors,” Proceedings of Second International 
Conference on Future Networks (ICFN ‘10), pp.438-441, 2010. 
 53 
 
Conference and Exposition (PSCE ‘09), pp.1-7, 2009. 
[32] J. J. Nolan, A. K. Sood and R. Simon, “An Agent-Based Architecture for 
Distributed Imagery and Geospatial Computing,” Proceedings of 29th Applied 
Imagery Pattern Recognition Workshop, pp.252-258, 2000. 
[33] FIPA, http://www.fipa.org 
[34] OMG, http://www.omg.org 
[35] J. Chen, “Research on Individualized Information Retrieval System Based on 
Multi-Agent,” Shanghai Jiao Tong University, Master’s Thesis, December 1, 
2006. 
[36] V. Podobnik and I. Lovrek, “Multi-Agent System for Automation of B2C 
Processes in the Future Internet,” Proceedings of 27th IEEE Conference on 
Computer Communications (INFOCOM ‘08) Workshops, pp.1-4, Phoenix, USA, 
2008. 
[37] V. Podobnik and I. Lovrek, “Multi-Agent System for Automation of B2C 
Processes in the Future Internet,” Proceedings of 27th IEEE Conference on 
Computer Communications (INFOCOM ‘08) Workshops, pp.1-4, Phoenix, USA, 
2008. 
[38] L. Yuen, M. Chang, Y. K. Lai and C. K. Poon, “Excalibur: A Personalized 
Meta-Search Engine,” Proceedings of 28th Annual International Computer 
Software and Applications Conference (COMPSAC ‘04), vol. 2, pp.49-50, 2004. 
[39] M. Radovanovic and M. Ivanovic, “Cats: A Classification-Powered Meta-Search 
Engine,” Advances in Web Intelligence and Data Mining, Springer-Verlag, vol. 
23, pp.191-200, 2006. 
[40] S. Souldatos, T. Dalamagas and T. Sellis, “Captain Nemo: A Meta-Search Engine 
with Personalized Hierarchical Search Space,” Informatics, vol. 30, pp.173-182, 
2006. 
[41] N. Zacharis and T. Panayiotopoulos, “SpiderServer: The Meta-Search Engine of 
WebNaut,” Proceedings of the 2nd Hellenic Conference on Artificial Intelligence, 
pp.475-86, 2002. 
[42] M. Kanteev, I. Minakov, G. Rzevski, P. Skovelev and S. Volman, “Multi-Agent 
Meta-Search Engine Based on Domain Ontology,” Springer, vol. 4476, pp. 
269-274, July 2007. 
[43] M. Montaner, B. López, and J. Lluís de la Rosa, A taxonomy of recommender 
agents on the internet. Artificial Intelligence Review. (2003), 19, 285-330. 
[44] M. Pazzani and D. Billsus, Content-based recommendation systems the adaptive 
web. In Peter Brusilovsky, Alfred Kobsa, Wolfgang Nejdl (Eds.): The Adaptive 
Web, Methods and Strategies of Web Personalization, volume 4321 of LNCS. 
(2007), 325-41. 
 55 
 
ACM Conference on Recommender Systems. (2007), 17-24. 
[58] M. R. Subramani and B. Rajagopalan, Knowledge-sharing and influence in 
online social networks via viral marketing. Communications of the ACM. (2003), 
46, 300-07. 
[59] J. He, W. Chu, and Z. Liu, Inferring privacy information from social networks. In 
Proc. of IEEE International Conference on Intelligence and Security Informatics. 
(2006), 154-65. 
[60] P. Domingos and M. Richardson, Mining the network value of customers. In 
Proc. of the 7th ACM SIGKDD International Conference on Knowledge 
discovery and data mining. (2001), 57-66. 
[61] K. Fischer, J. P. Müller, I. Heimig, and A.-W. Scheer, Intelligent agents in virtual 
enterprises, In Proc. of 1st International Conference on Practical Applications of 
Intelligent Agents and Multi-Agent Technology (PAAM'96). (1996), 205-23. 
[62] C. M. Macal and M. J. North, Tutorial on agent-based modelling and simulation. 
Journal of Simulation. (2010), 4, 151-62. 
[63] S. Chalmers, P. Gray, and A. Preece, Supporting virtual organisations using BDI 
agents and constraints. In Proc. of 6th International Workshop on Cooperative 
Information Agents (CIA’02). (2002), 175-84. 
[64] M. Kim, J. Seo, S. Noh, and S. Han, Reliable social trust management with 
mitigating sparsity problem. Journal of Wireless Mobile Networks, Ubiquitous 
Computing, and Dependable Applications. (2010), 1, 86-97. 
[65] J. R. Nicholas, On agent-based software engineering. Artificial Intelligence. 
(2000), 117, 277-96. 
[66] P. Massa and P. Avesani, Trust-aware collaborative filtering for recommender 
systems. In Proc. of Federated International Conference on the Move to 
Meaningful Internet Systems. (2004), 492-508. 
[67] J. Sabater and C. Sierra, Reputation and social network analysis in multi-agent 
systems. In Proc. of the 1st International Joint Conference on Autonomous 
Agents and Multiagent Systems. (2002), Part 1, 475-82. 
[68] J. M. Pujol, R. Sanguesa, and J. Delgado, Extracting reputation in multi agent 
systems by means of social network topology. In Proc. of the 1st International 
Joint Conference on Autonomous Agents and Multiagent Systems. (2002), Part 1, 
467-74. 
[69] S. Marti and H. Garcia-Molina, Taxonomy of trust: Categorizing P2P reputation 
systems. Computer Networks.  (2006), 50, 472-84. 
[70] F. E. Walter, S. Battiston, and F. Schweitzer, A model of a trust-based 
recommendation system on a social network. Autonomous Agents and 
Multi-Agent Systems. (2007), 16, 57-74. 
 57 
 
[89] Google 語 意 搜 尋  Knowledge Graph 讓 搜 尋 不 再 是 字 串 , 
2012 ,http://mag.udn.com/mag/digital/storypage.jsp?f_ART_ID=390130 
[90] 2012 Total Sites Across All Domains August 1995 - May 2012 
http://news.netcraft.com/archives/2012/05/02/may-2012-web-server-survey.html 
[91] Hakia 語意搜尋引擎, http://hakia.com/ 
[92] ELGG www.elgg.org 
[93] Hadoop  hadoop.apache.org/ 
[94] P.J. Artymiuk, A.R. Poirrette, H.M. Grindley, D.W. Rice, and P. Willette, “A 
graph-theoretic approach to the identification of three-dimensional patterns of 
amino acid side-chains in protein structures,” J. Mol. Biol. 243 (1994) 327-344. 
[95] G. Cleuziou, “A generalization of k-means for overlapping clustering,” 
Universited’ Orleans, LIFO Rapport No RR-2007-15. 
[96] B. Zelinka, “On a certain distance between isomorphism classes of graph,” 
Časopis pro pěst. Matematiky 100 (1975) 371-373. 
[97] S.-L. Peng and Y.-W. Tsay, “Measuring protein structural similarity by maximum 
common edge subgraphs,” LNAI 6216 (2010) 100-107. 
[98] M.L. Fernandez and G. Valiente, “A graph distance metric combining maximum 
common subgraph and minimum common supergraph,” Pattern Recognit. Lett. 
22 (2001) 753-758. 
[99] A.E. Brouwer, W.E. Haemers, “Spectra of graphs,” manuscript. 
[100] R.C. Wilson and P. Zhu, “A study of graph spectra for comparing graphs 
and trees,” Pattern Recognition 41 (2008) 2833-2841 
[101] A. Robles-Kelly and E.R. Hancock, “Edit distance from graph spectra,” 
Proceedings of the Ninth IEEE International Conference on Computer Vision 
(ICCV 2003), vol 1, 234-241. 
[102] D. Gernert, “Measuring the similarity of complex structures by means of 
graph grammars,” Bulletin of the EATCS 7 (1979) 3-9. 
[103] M. Dehmer and F. Emmert-Streib, “Comparing large graphs efficiently by 
margins of feature vectors,” Applied Mathematics and Computation 188 (2007) 
1699-1710. 
[104] L.A. Zager and G.C. Verghese, “Graph similarity scoring and matching,” 
Applied Mathematics Letters 21 (2008) 86-94. 
[105] D. W. McDonald and M.S. Ackerman, Expertise recommender: A flexible 
recommendation system and architecture. In Proc. of the 2000 ACM Conference 
on Computer Supported Cooperative Work. (2000), 231-40. 
[106] RAP - RDF API for PHP V0.9.6, 
http://www4.wiwiss.fu-berlin.de/bizer/rdfapi/, retrived Aug. 2012. 
[107] ARC, https://github.com/semsol/arc2/wiki, retrived Aug. 2012. 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/10/28
國科會補助計畫
計畫名稱: 總計畫(I)
計畫主持人: 張瑞雄
計畫編號: 100-2221-E-259-009- 學門領域: 計算機網路與網際網路
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
辦理 SuComs 2011, ICS 2012 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
