Abstract 
Communication services today, such as telephony, instant message, email, and VoIP, use 
a specific user or device ID to specify the called party. If the callee’s ID is unknown, 
communication becomes impossible. Another way to indicate the callee(s) is to specify the 
callee’s attributes, such as the callee’s name, age, etc. A set of user attributes, which is 
meaningful and easy to remember, can be used to set up a communication. Developed in the 
first year of this project, a Multi-Function Personal/Group Communication (MFPGC) system 
supports communications using specific IDs and/or multiple under-specified attributes. 
Communications using multiple user attributes is feasible through publishing and querying 
users’ attributes on a DHT. The DHT of MFPGC system is based on Chord, and Bloom filter 
is used to represent user attributes, which can be string, numeric, and hybrid data. In the 
second year of this project, we designed a new Bloom filter that can represent large ranges of 
numeric data in a space-efficient way. The techniques we used are grouping and/or 
overlapping the elements of the inserted numeric ranges. The design also supports data/range 
queries of multiple attributes. The grouping scheme reduces the number of keys inserted into 
a Bloom filter, while the overlapping scheme reduces the number of bits set to one in a 
Bloom filter. In addition, these two schemes can be combined to provide both benefits. To 
minimize the total false positive rate of all attributes, we have developed a two-phase 
algorithm using the marginal utility theory and gradient descent to optimize parameter 
configurations of a combined grouping and overlapping Bloom filter. Numeric analysis has 
also been conducted to demonstrate the effectiveness of our modified Bloom filter and the 
proposed configuration algorithm. The numeric results show that as the size of an inserted 
numeric range increases, overlapping scheme should be used first, and then both overlapping 
and grouping need to be used. The combined grouping and overlapping Bloom filter 
significantly reduces the false positive rates of data sets with large ranges of numeric data. 
 
Keywords: Bloom filter, numeric range query, multiple-attribute query 
 
  2
Bloom filter needs 1.44×log2(1/f) bits of space per inserted element [2]. As a result, a Bloom 
filter is space-inefficient in representing a large range of numeric data in a straightforward 
manner. For example, a square area of Latitude 25.0000°-25.0999° and Longitude 
121.1000°-121.1999° represents approximately 1 km by 1 km square area. To be accurate to 
the four decimal places, the area can be represented by two integer intervals [250000, ..., 
250999] and [1211000, …, 1211999]; each range consists of 1000 integers. Note that the 
precession of this representation is about 10 meters. This data type is valuable in supporting 
location-based communications, for example, broadcasting messages to users in this area. 
However, to obtain a false positive rate of 0.001, a traditional Bloom filter needs 
approximately 48K bits, while the size of a typical Bloom filter is less than 1K bits. It is 
obvious that a traditional Bloom filter is unsuitable for representing large ranges of numeric 
data. A new space-efficient design is essential to apply a Bloom filter to versatile 
applications. 
The objective of this project is to develop a new Bloom filter to represent multiple data 
attributes, which may include large ranges of numeric data. The new design should be 
space-efficient to provide a small probability of false positives for membership queries, as a 
traditional Bloom filter does for data sets of atomic data types. Our new Bloom filter design 
can be easily applied to various applications. In particular, it can be used in multiple attribute 
range queries [13, 14] where the use of Bloom filter has never been considered. 
The remainder of the report is organized as follows. Section II describes our new Bloom 
filter designs for representing numeric ranges. Analytic models to obtain the false positive 
rates of the new designs are presented in Section III. Section IV describes a two-phase 
optimization algorithm using marginal utility theory and gradient descent to obtain a near 
optimal configuration of the modified Bloom filter. Section V discusses the simulation and 
analytic results, while Section VI concludes the report. 
  4
       )11( / mnknk e
m
p −≈−=             (1) 
Let f denote the false positive rate. An element that is not in the set would be determined as a 
false positive if all its k hashed array positions are set to 1. Thus f can be expressed as 
follows. 
                )1()1( / kmnkk e-pf −−≈=           (2) 
The false positive rate is minimized when k = (m/n)ln2 and p = 1/2, i.e., when half of the 
array positions are set to 1 [2]. 
In this project, we intend to use a Bloom filter for multi-attribute data/range queries. A 
data set, S, contains multiple data attributes. Each attribute is specified by an attribute name 
and an attribute value. The attribute values can be atomic or numeric ranges. An atomic data 
value can be a text string or an integer. Floating point numbers can be represented by integers 
with a desired degree of accuracy. For example, Latitude 23.2621448° can be represented by 
232621 with accuracy to the four decimal places, i.e, 10 meters. In addition, the attribute 
value can be a numeric range, for example, Latitude 23.0000°-23.999°. Hashing an attribute 
into a Bloom filter is to hash the text string concatenating the attribute name and the attribute 
value. For example, inserting Latitude 23.0000° is to set array positions hi ("Latitude:230000") 
to 1. For multiple-attribute queries, we are interested in checking if a data set S1 is a subset of 
another set S2. Let BF(S) denote the Bloom filter representing data set S. It is clear that if all 
array positions that are set to 1 in BF(S1) are also set in BF(S2), we can assume S1 is a subset 
of S2 with a possibility of being wrong. 
We will describe three approaches to modify a traditional Bloom filter for multi-attribute 
queries. We focus on how a numeric range is represented by the modified Bloom filter; 
attributes of atomic data type are treated in the same way as the traditional Bloom filter. The 
techniques we used are grouping successive elements (i.e., successive numbers of a numeric 
  6
Bloom filter, other numbers of the group would be determined as false positives by the 
Bloom filter. The false positives caused by grouping successive numbers will be referred to 
as grouping false positives. 
2. Overlapping hashed positions of successive elements 
Another solution for inserting a large range of numbers in a Bloom filter is to reduce the 
number of array positions set to 1 by overlapping the hashed positions of successive numbers. 
In a traditional Bloom filter, k independent hash functions hash each inserted element to k 
array positions, and the positions are set to 1. In this overlapping scheme, each inserted 
number also sets k array positions to 1, but only some, s (s < k), of the k positions are 
determined by hashing the inserted number. The remaining (k-s) of the hashed positions are 
determined by hashing the successive numbers, i.e., (k-s) of the k hashed positions of an 
inserted number are the same as those of its successive number. Figure 3 depicts hashed 
positions of an example overlapping Bloom filter, where k = 5 and s = 2. The array positions 
set by Age 0 are h1(Age0), h2(Age0), h1(Age1), h2(Age1), and h1(Age2). Only two array 
positions are determined by Age 0; the other three array positions are determined by Age 1 
and Age 2. By overlapping the inserted bits of successive numbers, the number of array 
positions set to 1 by a numeric range is reduced. The cost of this approach is that numbers 
adjacent to an inserted range have higher false positive rates, because their hashed array 
positions overlap with those of the inserted numbers. This will be referred to as overlapping 
 
Figure 3. An example of hashed array positions for an overlapping Bloom filter. 
  8
of array positions set by each inserted key is k. The false positive rate of each approach can 
be derived as follows. 
1. Grouping Bloom filter 
We first consider a grouping Bloom filter. Let d denote the size of a group, i.e., the 
number of discrete numeric values per group. Let g(n,d,k) denote the expected number of 
hashed positions generated by a numeric range of size n; note that the hashed array positions 
may be duplicated. g(n,d,k) is derived through Eq. (3). 
⎡ ⎤ kd
nddinkkdng
d
i
)11(//)(),,(
1
0
+−=∑ += −
=
          (3) 
After setting g(n,d,k) hashed positions to 1, the probability that a bit position in the Bloom 
filter is still 0 can be expressed as follows. 
mk
d
n
e
m
p kdngg
/)11(
),,()11(
+−−
≈−=           (4) 
The elements that may cause grouping false positives are those that are not in the 
inserted range, but in the same group with the inserted keys. The expected number of those 
elements can be expressed as in Eq. (5). 
1)1(
mod)(
1
0 −=−=
∑ ++−
= d
d
dd
d
dini
d
i      (5) 
Let fg denote the false positive rate of a grouping Bloom filter; fg can be expressed as Eq. (6). 
The first term to the right of the equal sign in Eq. (6) represents the probability of grouping 
false positives, and the second term represents the probability of false positives that are not 
caused by grouping. 
 )1()1(1 kgg pnR
dnR
nR
df −−
−−−+−
−=      (6) 
2. Overlapping Bloom filter 
Let s denote the number of hashed positions generated by each inserted element. When 
  10
( ) mksd
n
ksdngo
go em
p
/)1(,,,)11(
+−−≈−=      (12) 
The number of groups that may cause overlapping false positives at each end of the 
inserted numeric range can be expressed as, 
⎡ ⎤ . 1/ −= skr        (13) 
The false positive probability of an overlapping Bloom filter can be expressed as Eq. (14). 
The first term to the right of the equal sign in Eq. (14) represents the probability of grouping 
false positives, the second term the probability of overlapping false positives, and the last 
term represents the probability of false positives that are caused by neither grouping nor 
overlapping. 
k
go
r
i
is
gogo pnR
rddnRp
nR
d
nR
df )1(2)1()1(21
1
−−
−−−−+∑ −−+−
−=
=
  (14) 
IV. Near Optimal Configurations of the Proposed Bloom Filters 
For grouping and overlapping Bloom filters, the optimal choices of k, d and s are the key 
factors to minimize the false positive rates. First, we consider a simple situation where only a 
single numeric range is inserted in a Bloom filter. Although this simple situation may seem 
impractical, it can clearly demonstrate how the false positive rate of each scheme holds as the 
range of the inserted numeric data increases. Followed, we will consider 
the optimal configurations of a Bloom filter representing a multi-attribute data set with 
1. 
numeric ranges. 
The configuration for a single numeric range 
To fairly compare the performance of different schemes, the optimal configuration, i.e., 
the best choice of k, d and s, for a given numeric range should be used. Note that the 
grouping-overlapping Bloom filter is the most general of all schemes; other schemes are the 
special cases of the grouping-overlapping Bloom filter. Indeed, the traditional Bloom filter is 
  12
because the false positive rate appears to be a concave function of k. On the other hand, 
arranging the possible choices of (d, s) pair in a sequence with an increasing order of s/d, we 
obtain a sequence as follows, (…, (3, 1), (2, 1), (1, 1), (1,2), (1,3), …). Note that the number 
of hashed positions of an inserted range increases as s/d increases. Our experiments show that 
the false positive rate also appears to be a concave function with respect to this sequence. 
Therefore, the optimal choice of (d, s) can be obtained by finding the minimum point. The 
proposed algorithm to derive the optimal choice of k, d and s is listed in Figure 5. First we 
obtain the initial (d, s) using Eq. (17), and then starting from the initial (d, s), we obtain the 
optimal choice of (d, s) using the conjecture that the false positive rate is a concave function 
w.r.t. the (d, s) sequence described above. In addition, for each considered (d, s) pair, the 
optimal k value can be obtained by using the conjecture that the false positive rate is a 
conc
ch k. The exact reason is 
ents. 
2. O
ave function of k. 
Note that the algorithm uses a two-level nested loop to search the optimal choice of (k, d, 
s). The outer loop searches the optimal choice of (d, s), and the inner loop searches the 
optimal k. These two loops are not exchangeable, because the false positive rate is not a 
concave function of k when the optimal choice of (d, s) is used for ea
unclear to us, but counter examples were found in our experim
ptimal configuration for a data set with numeric ranges 
Figure 5. Searching the optimal (k, d, s) configuration for a single numeric range. 
  14
number of hashed positions (k) by 1. Assuming p is close to 1/2, the reduced false positive 
rate, denoted as f’, can be approximated as in (19) 
fpf k
2
    )1(' ≈−=   
11+
      (18) 
The marginal utility to price ratio can be approximated as 
        ) 
2
-()1(
2
- 
1
≈−≈−+ pkk           (19) 
In the following approximations for the false positive rate of a num
11' 1+− kkff
eric range, we 
ose to 1/2. 
erlapping techniques are used. The false positive rate in (14) can be 
approximated by 
assume that ni is small with respect to Ri (i.e., ni << Ri) and p is cl
(a) Case 1: considering attribute Ai whose si = 1 and di > 1 
Such an attribute will be referred to as a grouping-overlapping attribute because both 
grouping and ov
k
iii nRR −
iiiii
k
ii
iiiir
j
js
ii
i
ii
i
prddnRd
p
nR
rddnRp
nR
d
nR
df i
)1(2)1(13
)1(2)1()1(21
1
−−−−−+−≈
−−
−−−−+∑ −−+−
−=
=  (20) 
From (11), the number of hashed positions generated by this attribute can be expressed as 
k
di
i
nb i +−=  1         (21) 
y increasing di by 1. 
Thus the reduced false positive rate, f ', can be approximated as follows. 
To reduce the false positive rate, extra array positions can be allocated b
k
iii nRR −
iiiii pdrdnRdf )1()1(223' −− − − +++≈     (22) 
The increased number of hashed positions allocated, bi', can be expressed as follows. 
k
di
i −
nb i +−= 1'        (23) 
The marginal utility to price ratio can be approximated as follows. 
1
  16
ksnb iii ++−=  1))(1('        (30) 
The marginal utility to price ratio can be expressed as follows. 
         )1( -  
'
'
ii
s
ii nR
p
bb
ff i−≈−
−
             (31) 
For an optimally-configured Bloom filter, all attributes have the same marginal utility to price 
ratio. Thus from (20) and (32), we have 
ii
s
k
nR
i)2
1(
)
2
1( 1 ≈+                 (32) 
From (33), we further obtain 
 
)2ln(
)ln(-1  iii
nRks +≈ ,       (33) 
Eq. (34) indicates that for an overlapping attribute, the number of hashed positions 
generated by each inserted key, si, can also be determined by the chosen k. 
Note that no grouping attribute is considered, because grouping causes more false 
positive. Given k, we can determine whether attribute Ai is a grouping-overlapping or 
overlapping attribute from Eqs. (27) and (34). di and si can be obtained as follows. 
)))
2
1(
3
( round,1max( 1+= kiii nRd       (34) 
))
)2ln(
)ln(-1 round( max(1, iii
nRks +=       (35) 
If di =1, it is an overlapping attribute; otherwise, it is a grouping-overlapping attribute. 
The algorithm that determines the initial k (denoted as kini) is shown in Figure 6. The initial k, 
kini, is chosen so that less than half of the array positions set to 1 with kini -1 hashed positions 
for each key, and more than half of the array positions set with kini hashed positions for each 
key. 
B. Phase 2: minimizing the total false positive rate by gradient descent 
  18
the largest improvement per bit change on fT is chosen. Note that the improvement of fT per 
bit change used in Phase 2 is similar to the marginal utility to price ratio used in Phase 1. 
However, the utility function used in Phase 2 is the total false positive rate; by contrast, that 
of Phase 1 is the false positive rate of the attribute under consideration. In addition, the value 
of p (the probability that an array position is set) is acutely computed in Phase 2, while it is 
assumed to be 1/2 in Phase 1. Since we cannot be sure of the optimal choice of k, given kini 
obtained in Phase 1, the gradient search for the optimal choice of di and si is performed for all 
k’s where kini -4 ≤ k ≤ kini +3. The detailed Phase 2 algorithm is shown in Figure 7. 
V. Simulation and Analytic Results 
To validate the analytic model presented in Section III and to evaluate the performance 
of the configuration algorithms presented in Section IV, we developed a simulation program 
that computes the expected false positive rate when a single numeric range is inserted in a 
grouping and/or overlapping Bloom filter. The inputs of the simulation program include the 
attribute name, the scope of the attribute and the size of the inserted range. The program 
literally computes the average false positive rate for all the possible inserted ranges of a given 
size. For example, given attribute Age with scope [0..120] and an inserted range of size 10, 
the program can compute the average false positive rate for all possible inserted ranges in 
{[0..9], [1..10], [2..11], …, [111..120]}. However, the analytic models presented in Section III 
assume that overlapping false positives exit on both ends of each inserted range. Therefore, 
our simulation program ignores the inserted ranges that do not allow all possible overlapping 
false positives on either end. For an example attribute, Age, if (k, d, s) = (8, 10, 2), the 
program ignores inserted ranges {[0..9], [1..10], [2..11], [109..118], [110..119],[111..120]}, 
and only considers {[3..12], [4..13], [5..14], …, [108..117]}, so that on each end of the 
inserted ranges considered, there are exactly 3 numbers (i.e., ⎡ ⎤ 1/ −sk  shown in Eq. (13)) 
that may cause overlapping false positives. For any given inserted range, the simulation 
  20
perfectly random. However, this may not be true for a specific attribute name, “Age” in this 
example, which leads to a smaller false positive rate. On the other hand, the analytic and 
average simulation results are consistent for all sizes of inserted ranges. This verifies the 
correctness of our analytic model, and indicates our analytic model produces the average 
false positive rates. To represent the average case and to speed up the comparison, for the 
experiments hereafter, we will only use the analytic model. 
1. Scenario 1: a single numeric range 
For all experiments on representing a single numeric range hereafter, the scope size of 
the attribute R is 10000, and the size of Bloom filter is 512 bits (i.e., m = 512). Figure 9 plots 
the false positive rates of four schemes when a single numeric range is inserted and the size 
of the inserted numeric range increases from 10 to 1200. The optimal choice of (k, d, s) is 
used for each inserted range under each Bloom filter scheme. The results indicate that for a 
given inserted range, the traditional Bloom filter has the largest false positive rate. The false 
positive rates of both the traditional and the grouping Bloom filters increase rapidly when the 
size of the inserted range (n) is larger than 20. When n = 22, the grouping Bloom filter starts 
 
Figure 9. The impact of the inserted range size on false positive rate. 
  22
Figure 10 plots a1 of each Bloom filter scheme, upon varying inserted range size from 1 to 
1200, and R being 10000. We expect that about half (i.e., 256) of the array positions are set to 
1. The grouping Bloom filter has the slightest variations in a1, as n increases. On the other 
hand, the others have large variations. It is interesting that a1 of those schemes are of zigzag 
curves. Each drop of the a1 curves indicates a decrement of k for the traditional Bloom filter, 
and a decrement of s for both the overlapping and the grouping-overlapping Bloom filters for 
n < 250. When n > 250, k =1 for the traditional Bloom filter, and thus k cannot be decreased 
further. In addition, s =1 for the overlapping Bloom filter, and cannot be reduced further. As a 
result, after that, a1 of both schemes increases steadily as n increases. On the other hand, the 
grouping-overlapping Bloom filter starts grouping by increasing d by 1 when n=511 and 897. 
As a result, a1 is kept close to m/2 (256). The results are consistent with the results in Figure 
9; the false positive rate of the grouping-overlapping schemes increases slower than that of 
the overlapping scheme as n increases. 
Figure 11 plots the values of k and s of all schemes and Figure 12 plots the values of d 
for the grouping and grouping-overlapping schemes upon varying n value from 5 to 1200. 
 
Figure 11. The optimal values of k and s for all schemes. 
  24
store a numeric range of size up to 240, the overlapping Bloom filter up to 340, and the 
grouping-overlapping Bloom filter up to 1000. Note that although the false positive rate of an 
overlapping Bloom filter is very low when n is less than 240, it increases more rapidly than 
that of a grouping Bloom filter afterwards. When n is larger than 360, its false positive rate 
surpasses that of the grouping Bloom filer. In summary, as the size of the inserted range 
increases, we suggest utilizing only overlapping technique first, and then both overlapping 
and grouping techniques. 
 
 
Figure 12 The optimal values of d for the grouping and 
grouping-overlapping schemes. 
  26
Table 1. The attributes used in multi-attribute experiments. 
Attribute Name Data Type and Scope Size of inserted range 
First Name Text string － 
Last Name Text string － 
University Text string － 
Hobby Text string － 
Vocation Text string － 
Age Integer [1,..,120] 10 
Year Integer [1900,..,2100] 20 
Income Integer [0,..,5000] 500 
Longitude Integer [-1800000,..,1800000] 100 
Latitude Integer [-900000,..,900000] 100 
 
Table 2. The expected number of array positions set to 1, and the total false positive rates. 
 k = 11 
(kini-4) 
k = 12 
(kini-3) 
k = 13 
(kini-2) 
k = 14 
(kini-1) 
k = 15 
(kini) 
k = 16 
(kini+1) 
k = 17 
(kini+2) 
k = 17 
(kini+3) 
a1 214 232 237 261 270 275 280 284 
fT 5.818E-3 5.652E-3 5.602E-3 5.549E-3 5.496E-3 5.503E-3 5.589E-3 5.727E-3
 
Table 3 displays the detailed configurations of the grouping-overlapping Bloom filter 
and the false positive rate of each attribute. The results indicate that the false positive rates of 
atomic data type decrease as k increases. On the other hand, the false positive rates of 
numeric ranges are in the form of irregular patterns. They may not be a concave function of k; 
attribute Age is such an example. The configurations to minimize the false positive rates 
per-attribute basis and all-attributes basis are not exactly the same. For example, the 
minimum total false positive rate occurs at k = 15, while the minimum false positive rate of 
attribute Longitude at k=16. Note that the number of array positions allocated for each 
attribute (bi) increases as k increases. In addition, attributes with larger false positive rates 
have more array positions. For example, among all attributes, Income accounts for 62% 
(3.4/5.496≈0.619) of the total false positive rate and obtains the largest number of array 
positions. The results show that the grouping-overlapping Bloom filter provides very low 
  28
Table 4. The distribution of the optimal k. 
The optimal k kini-3 kini-2 kini-1 kini kini+1 kini+2 
Occurrences 0 1 216 781 2 0 
 
Table 5 The distribution of the expected number of array positions set to 1. 
≤ 254 [255,..,259] [260,..,264] [265,..,269] [270,..,274] [275,..,279] ≥ 280
Occurrences 2 1 77 502 361 56 1 
 
 
VI. Conclusions 
Traditional Bloom filter is space-inefficient to represent data sets that contain large 
ranges of numeric data. In this report, we presented grouping and overlapping Bloom filter 
schemes for representing a data set with numeric ranges. In addition, we have developed 
algorithms based on the marginal utility theory and gradient descent to obtain the optimal 
configurations of the modified Bloom filter schemes. Numeric analysis and computer 
simulations have been conducted to show the effectiveness of our schemes and configuration 
algorithms. Our experiments showed that the overlapping technique can be used for all sizes 
of numeric ranges, while the grouping technique should only be applied for large numeric 
ranges. The numeric results also showed that the grouping-overlapping Bloom filter provides 
very low false positive rates for multi-attribute range queries, which are not attainable for the 
traditional Bloom filter. Moreover, the optimally-configured grouping-overlapping Bloom 
filter set slightly more than half of the array positions. 
In this report, we assume the number of hashed positions, k, of an inserted key of each 
attribute is the same. It is possible that different k for different attributes may result in a lower 
overall false positive rate. In addition, the conjectures we made in searching the optimal 
choice of (k, d, s) for a numeric range may need a formal proof. The optimal configuration of 
a grouping-overlapping Bloom filter for a data set with numeric ranges obtained from our 
algorithm may not be the optimum configuration, but only a local optimum.
  30
