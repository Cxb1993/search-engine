1 
 
行政院國家科學委員會補助專題研究計畫■ 成 果 報 告   □期中進度報告 
 
符合次世代晶片上通訊思維之具備佈局考量的 
系統架構合成技術 (3/3) 
 
計畫類別：□ 個別型計畫  ▓ 整合型計畫 
計畫編號：NSC － 99 － 2220 － E － 009 － 008 
執行期間： 99 年 8 月 1 日至 100 年 7 月 31 日 
 
計畫主持人：黃俊達 副教授 國立交通大學電子所 
共同主持人： 
計畫參與人員：黃雅詩、陳嘉怡、陳詣航、張瀚元、彭晧凌、王峻澤、
黃崇羽 
 
成果報告類型(依經費核定清單規定繳交)：□精簡報告  ▓完整報告 
 
本成果報告包括以下應繳交之附件： 
□赴國外出差或研習心得報告一份 
□赴大陸地區出差或研習心得報告一份 
□出席國際學術會議心得報告及發表之論文各一份 
□國際合作研究計畫國外研究報告書一份 
 
 
處理方式：除產學合作研究計畫、提升產業技術及人才培育研究計畫、
列管計畫及下列情形者外，得立即公開查詢 
          □涉及專利或其他智慧財產權，□一年▓二年後可公開查詢 
          
執行單位： 
 
 
中   華   民   國  100 年   10 月    25 日 
3 
 
Abstract 
In deep submicron technology, wire delay is no longer negligible and is gradually becoming 
a dominant factor of system performance. There have been several approaches proposed in the 
past to deal with the critical issue arisen from long interconnects, and the distributed register 
architecture is one of them. Several types of distributed register (DR) architectures, where the 
whole system is divided into several logic clusters, are also broadly studied. In general, all 
DR-based architectures try to keep most interconnects local within a cluster and thus minimize 
the number of inter-cluster long interconnects for better area and performance outcome. 
In this project, first we develop synthesis frameworks on distributed register-file 
microarchitecture (DRFM), which is one of the DR-based architectures. In DRFM, the number of 
inter-island connections (IICs) is used as an evaluation metric for quality of result (QoR) at early 
design phases. This work proposes a new resource-constrained communication synthesis 
algorithm for IIC minimization. An iterative binding-then-rescheduling scheme is used to obtain a 
better outcome in the expanded solution space. Furthermore, we add an extra size constraint on 
read port of register file to make the underlying architectural assumption of DRFM more realistic. 
The experimental results show that up to 24.7% IIC and 12% latency reduction can be achieved 
as compared to the previous work. 
Also, global interconnect delay is becoming one of the most critical performance obstacles 
in system-on-chip (SoC) designs nowadays. Recent years latency-insensitive system (LIS), which 
enables multicycle communication to tolerate variant interconnect delay without substantially 
modifying pre-designed IP cores, has been proposed to conquer this issue. However, imbalanced 
interconnect latency and communication back-pressure residing in an LIS still degrade system 
throughput. In this project, we present a throughput optimization technique with minimal queue 
insertion. We first model a given LIS as a quantitative graph (QG), which can be further 
compacted using the proposed techniques, so that much bigger problems can be handled. On top 
of QG, the optimal solution with minimal queue size can be achieved through integer linear 
programming based on the proposed constraint formulation in an acceptable runtime. The 
experimental results show that our approach can deal with moderately large systems in a 
reasonable runtime and save about 28% of queues compared to the prior art. 
 
Keyword 
Distributed register architecture, interconnect model, scheduling and binding, 
performance-driven, multicycle communication, latency-insensitive system. 
 
5 
 
and is recently proposed in [20]. The DRFM is composed of multiple islands and each of them 
has its own register file, functional units (FUs), and data-routing logic. DRFM is particularly 
adequate for platforms with a rich set of distributed memory blocks, e.g., modern FPGAs. While 
utilizing DRFM, one should be aware that how to map operations of a target system into islands 
can have a significant impact on the final outcome in terms of area and performance [20]. Hence, 
developing an intelligent synthesis algorithm targeting DRFM is important and needs extensive 
studies further. 
In this project, first we propose a new resource-constrained resource binding algorithm for 
inter-island connection minimization targeting DRFM. Given a resource constraint (i.e., number 
of available islands), the proposed algorithm applies an iterative binding-then-rescheduling 
process first, and then invokes an access conflict removal procedure. At each control step (cstep), 
operation nodes scheduled at the current cstep are appropriately assigned to islands first, and then 
rescheduling is applied to expand the solution space so that a better synthesis output can be 
produced. The rescheduling and rebinding process also tries to minimize data access conflicts due 
to limited read ports at the same time. Finally, an access conflict removal procedure is invoked to 
ensure that no data access conflicts are left at the end of the proposed algorithm. The 
experimental results confirm that our algorithm does produce better outcomes with 21.0% ~ 
24.7% fewer IICs on average than the prior art. 
Moreover, latency-insensitive-design (LID) is a design methodology, which can tolerate 
interconnect delay variation at late stages of the design process [3], [9], [25]. LID encapsulates 
each IP core (pearl) with an automatically-synthesized interface (shell) and inserts a proper 
number of relay stations (RS) to pipeline inter-shell interconnects for sustaining the target 
operating frequency. Based on LID, one can derive a corresponding latency-insensitive system 
(LIS) from the original plain synchronous system. Thus in this project, we present a throughput 
optimization technique with minimal queue insertion. At first, a new representation named 
quantitative graph (QG), which is evolved from the marked graph, is proposed for LIS modeling. 
Then we develop a series of operations to accomplish the goal, which include: 1) compressing a 
QG into a compacted one (CQG) with identical throughput for problem size reduction; 2) 
deriving a set of constraints to guarantee the maximal throughput based on the CQG; 3) obtaining 
an optimal solution with minimal queue size subject to the above constraint set through integer 
linear programming (ILP); 4) transforming the optimal solution for the CQG into the optimal 
solution for the original QG. Since our technique employs ILP, unsurprisingly it can outperform 
the existing heuristic method in terms of queue size. Also notice that our approach can still handle 
reasonably large systems in an acceptable runtime because ILP is merely applied at the CQG 
7 
 
output. When implementing a system utilizing DRFM, [20] shows that different implementations 
could produce tremendously different results in terms of area and performance. Namely, how to 
map operations into islands needs to be handled very carefully. As well, [20] finds that the 
number of inter-island connections (IICs), which can properly estimate the cost of global 
interconnects, is highly correlated with the resultant resource usage and system performance after 
synthesis. Consequently, the number of IICs can be used as the metric to rate the quality of 
synthesis output. 
 
Here we reveal two key observations. First, the solution space is quite limited in [20] since 
the given scheduled DFG is not allowed being altered, which is also mentioned in [21]. Given a 
scheduled DFG as shown in Fig. 2(a), if there are two available islands (IA and IB) and the given 
DFG cannot be altered, then the optimal synthesis (i.e., resource binding) result is presented in 
Fig. 2(b). The (operation) nodes within the same shaded region are mapped into the same island. 
Apparently, the solution in Fig. 2(b) needs two IICs. However, if rescheduling is allowed, a better 
solution can be obtained as shown in Fig. 2(c), where only one IIC is demanded. Note that the 
 
Fig. 2  (a) The scheduled DFG, (b) the scheduled and bound DFG, and 
(c) the scheduled and bound DFG after rescheduling. 
9 
 
DT2,7 and DT1,11. Apparently, at least one of these three read accesses has to be postponed, 
which consequently increases the latency of the DFG from four to five. The approach in [20] 
deals with this problem by data-forwarding, which adds input buffers into the input routing logic. 
In that approach, each data-forwarding consumes one read port and takes one cstep. However, 
incorporating read port restriction during scheduling and binding can minimize those read access 
conflicts without increasing hardware cost (i.e., input buffers). Another DFG, as shown in 
Fig. 4(b), demonstrates that it is possible to keep the latency still four without introducing any 
data access conflicts if the read port restriction is properly deliberated. 
 
The problem formulation of this work is as follows: Given a DFG and a resource constraint 
(the number of islands), obtain a scheduled and bound DFG with the minimized latency as well 
as minimize the number of required IICs. 
The overall flow of the proposed method is shown in Fig. 5. Given a DFG, list-scheduling is 
first performed to obtain an initial scheduling result and followed by the iterative cstep-by-cstep 
binding-then-rescheduling process. In each iteration, two operations, island assignment (binding) 
and IIC refinement (rescheduling), are applied consecutively. The way used for island assignment 
in this work is similar to the horizontal assignment adopted in [20]. Namely, island assignment is 
formulated as a minimum-weighted bipartite matching problem, where a weight on an edge 
represents the number of extra IICs induced by the corresponding matching. However, the 
aforementioned algorithm does not allow rescheduling and generally produces a locally 
optimized solution. Hence, an IIC refinement process is proposed to look for a better result from 
the expanded solution space via rescheduling. More details are described in Section 4.1. 
Meanwhile, the IIC refinement procedure is also capable of handling the read port restriction. 
 
Fig. 5  The overall flow of the proposed algorithm. 
11 
 
(ii) Find a swap pair with the largest gain from FSPS. 
(iii) Swap the pair then lock the operation node. 
(iv) Update FSPS and recalculate the gains of pairs in FSPS. 
(v) Repeat (ii) to (iv) until FSPS is empty. 
(vi) Keep the fist k swaps and undo the rest if the partial gain sum of the first k swaps is 
the largest and positive; go to (i). 
(vii) Otherwise, terminate IIC refinement. 
For example, a partially scheduled and bound DFG is shown in Fig. 6(a) with an IIC number 
equal to 4, where FSPS = {(1, 5), (1, 7), (2, a), (2, 8), (3, 6), (3, 9), (4, b), (4, c), (5, 7), (5, a), 
(6, 9), (8, a), (9, c), (9, b)}. Initially, the gains of all feasible swap pairs in FSPS are 
calculated as follows: 
g1,5 = 0 g1,7 = –1 g2,a = –1 g2,8 = –1 g3,6 = 0 g3,9 = –2 g4,b = 0 g4,c = –1 g5,7 = –2 g5,a = 0 
g6,9 = –1g8,a = –1 g9,c = 0 g9,b = 1 
Then the swap pair (9, b) is selected to be swapped and node 9 is locked after the swap. The 
FSPS and the gains are therefore needed to be further updated accordingly. This process is not 
terminated until FSPS is empty. Table 1 shows the gain and the partial gain sum of the eight 
consecutive feasible swaps in this iteration. As a result, only the first three swaps, including (9, 
b), (1, 5) and (2, a), are actually desired. The resultant DFG at the end of this iteration is 
shown in Fig. 6(b) and it merely requires two IICs instead of four in Fig. 6(a). 
B. Coping with read port restriction 
The approach proposed in the previous section neglects the read port restriction. However, as 
illustrated in Fig. 4, considering the read port restriction during scheduling and binding can 
effectively minimize access conflicts without increasing hardware cost. Therefore, an 
augmented IIC refinement process is further presented in this subsection. 
During IIC refinement, a secondary gain hu,v of the swap pair (u, v) is defined as the 
Table 1  Gains and partial gain sums in an iteration 
n-th swap 1 2 3 4 5 6 7 8 
Swapped 
pair 
(9, b) (1, 5) (2, a) (5, a) (7, a) (4, c) (3, b) (6, b) 
Gain 1 0 1 0 –1 –1 1 –2 
Partial 
gain sum 
1 1 2 2 1 0 1 –1 
13 
 
comprehensive comparisons, two different synthesis flows are created, as depicted in Fig. 7. 
Given an input DFG and a resource constraint, list scheduling is first performed to provide an 
initial scheduling result for both flows. Then, Flow1 implements the approach proposed in [20], 
while Flow2 carries out the proposed approach. The access conflict removal procedure is then 
conducted as a post-processing for both flows. 
The test cases are from different benchmark sets [29]–[31], which are frequently used in 
high-level synthesis field. The basic information of these test cases (DFGs) is given in Table 2. 
The first three columns list the names, number of nodes, and number of edges, respectively. The 
last column reports the minimum possible latency obtained by ASAP scheduling with unlimited 
available resources. Two configurations are deliberated in our experiments – synthesis is 
performed without (with) a resource constraint in Configuration 1 (2), respectively. In 
Configuration 1, the number of islands is set as the minimum number that still guarantees the 
synthesis outcome with the minimum latency indicated in Table 2; that is, there is in fact no 
resource constraint at all. However, the assumption about unlimited available hardware resource 
is impractical in the real world. Hence, in Configuration 2, for every test case the number of 
available islands is reduced by half as: 



2
1 Config. in islands #  2 Config. in islands #  (3)
Table 3 reports the experimental results without read port restriction, which means that only 
the primary gain is deliberated during node swapping. The results show that the proposed Flow2 
achieves on average 21.0% and 24.5% IIC reduction in Configuration 1 and 2 respectively as 
Table 2  The basic information of benchmark 
Test case #nodes #edges
Minimum 
latency 
fir2 40 39 11 
fir1 44 43 11 
lee 49 62 9 
cos 82 91 8 
honda 105 104 15 
wribmp 106 88 7 
dir 127 126 15 
chem 342 327 15 
fft16 414 672 14 
u5ml 564 557 26 
15 
 
lower bound of latency obtained from Table 3 and two resultant latencies given by two different 
synthesis flows. The proposed Flow 2 achieves the minimum latency for all test cases in both 
configurations while Flow1 increases the average latency by about 12%, which clearly 
demonstrates that the proposed method can handle the read port restriction very well. 
As previously mentioned, the number of inter-island connections (IICs) is different from the 
number of inter-island transfers (IITs). In general, the number of IITs is commonly used for 
power estimation of on-chip communication, while the number of IICs is mostly used to estimate 
the cost of global interconnects. Nevertheless, during synthesis, it is not always possible to reduce 
both IICs and IITs at the same time; in other word, there is a tradeoff between area/performance 
(IIC) and power (IIT) optimization. Obviously, the synthesis algorithm proposed in this article 
focuses on IIC minimization. 
 
 
Throughput optimization for latency-insensitive system with minimal queue insertion 
 
Throughput optimization for LIS has been extensively discussed in recent years. Several 
research works are done based on different hardware architecture assumptions and different 
physical layout assumptions. Earlier works (before 2003) regard every LIS as an ideal system, 
which assumes infinite queue size and thus no back-pressure. To the best of our knowledge, Lu 
and Koh are the first ones who propose the method to deal with the throughout optimization of 
LIS with back-pressure arising from the effect of finite queue size on communication channel 
[32], [33]. They show a practical LIS with finite queue size can still achieve the same maximal 
sustainable throughput of its ideal LIS counterpart if proper queue sizing is performed. After that, 
Collins et al. use a marked graph to model an LIS alternatively [34], [35]. They propose a 
heuristic approach for queue sizing that can produce fairly good solutions with a short runtime. In 
addition, they also make a different assumption on hardware architecture of communication 
channel compared with the one used in [9], [10]. In our opinion, Collins’ assumption better fits 
the real-world design environment. However, their method is heuristic-based, order-dependent, 
and thus does not guarantee the optimality. Casu and Macchiarulo avoid queue sizing issue by 
scheduling the activation of IP cores, instead [36], [37]. However, one limitation is that planning 
a schedule needs enough knowledge about the overall system behavior, which is not necessarily 
available to engineers at this design stage. Bufistov et al. propose a method that combines both 
queue sizing and relay station insertion techniques to achieve optimal throughput [38]. However, 
they assume channel latency gets increased as queue size becomes large, which is not generally 
17 
 
void event at every RS output initially. At timestamp 1, all IP cores produce their first valid 
events; while every RS just puts a τ at its output. At timestamp 2, core C receives a valid event 
from one of its two input channels, but core C needs both first valid events from each of its input 
channels for producing its own second valid event. As a result, the first valid data produced by 
core B is stored in the internal queue within core C and then waits. Meanwhile core C is stalled 
and outputs a void event. Since the queue of lower input channel of core C becomes full at the 
end of timestamp 2, core C must compel core B to stall at the next timestamp to avoid valid event 
loss due to queue overflow. This effect of finite queue size is referred to as back-pressure. The 
channels with back-pressure in Fig. 8(a) are colored in red. At timestamp 3, core C receives both 
valid events from its two input channels so that it can produce its own next valid output event; 
whereas core B is stalled at this timestamp due to back-pressure from core C. Fig. 8(b) depicts the 
output event sequence of core C. It is evident that core C produces three valid events every four 
timestamps. In other words, the throughput of this system is three fourth. This example explicitly 
confirms that even for an acyclic synchronous system, the throughput can still be less than one 
due to the effect of back-pressure. 
Here we summarize the pros and cons of LIS. LIS is a promising approach for coping with 
variant and unknown latency incurred by global interconnects at early design stages. By properly 
encapsulating IP cores and inserting relay stations, this approach guarantees correctness of system 
functionality. However, this approach does not guarantee to achieve the maximal possible system 
throughput due to back-pressure. 
 
Marked graph (MG) is a conventional representation for modeling concurrent operations 
within a system. Its simplicity makes it quite amenable for analyzing the behaviors of 
synchronous systems like LIS. A marked graph consists of two different types of nodes: places 
(a) 
(b) 
Fig. 9 (a) The models used in marked 
19 
 
A. Quantitative Graph (QG) 
 
A quantitative graph with respect to a given MG is a quadruple (V, E, w, q), where V is the set 
of vertices corresponding to the transitions in that MG; E  V × V is the set of edges 
representing the place pairs in that MG; w : E → Z* specifies the number of valid tokens for 
an edge e, denoted as w(e); and q : E → Z+ indicates the queue size for an edge e, denoted as 
q(e). That is, for an edge e = (v1, v2), w(e) specifies the number of tokens in the place on solid 
edge from transition v1 to transition v2 and q(e) specifies the one on dashed edge from 
transition v2 to transition v1 in the original MG, respectively. Fig. 10 gives an example about 
the transformation from an MG to a QG. 
As mentioned, the MST of a system is bound by the lowest TPR of all cycles in its MG. For a 
QG, the MST can also be determined in a similar way. First, identify all cycles in a QG, 
assuming that all edges are undirected. By doing so, every cycle C’ in an original MG can 
always find its counterpart cycle C in the corresponding QG. Next, a cycle C in QG is 
represented as a set of edges. The edges in C can be partitioned into two disjoint set F and R, 
where F contains the edges being traversed in its regular direction while R contains those 
being traversed in its revere direction. Then, for every edge e along a cycle C in QG, 
accumulating either w(e) or q(e) depends on whether it belongs to F or R, and the resultant 
value is actually equal to the number of tokens in the counterpart cycle C’ in MG. As well, the 
number of edges in C (i.e., |C|) is the same as the number of places in C’. Similarly, the TPR 
of a cycle C in QG is further defined as: 
RFC
eqew
CTPR ReFe 




)()(
)(  (4) 
It becomes apparent that finding the lowest TPR of all cycles in MG is now equivalent to 
identifying the lowest TPR of all cycles in QG because both of them are indeed identical. 
 
 
Fig. 10 Transformation from an MG to a QG. 
21 
 
)]([min)(,)()(
,)()(,)()(
)()(
)()(
ebebecec
eqeqewew
pEeppEe
p
pEe
p
pEe
p






　　
　　
 (7) 
 
Property 2: If CQG H’ is derived from CQG H by applying path condensation, then MST 
in H’ is identical to that in H. 
Fig. 5(a) illustrates an example of path condensation. It is apparent that the size of CQG (in 
terms of vertices and edges) can be effectively reduced, while MST remains unaltered for 
both CQGs before and after path condensation. 
 
Edge Unification: 
After applying path condensation, there may be multiple edges between two vertices in CQG, 
as shown in Fig. 11(a). For such pair of vertices vi and vj, Em(vi, vj) is the set containing all 
parallel edges from vi to vj. An edge ed  Em(vi, vj) is called a dominating edge if c(ed) – w(ed) 
≥ c(ek) – w(ek) for every edge ek  Em(vi, vj). Then, given a CQG H and Em(vi, vj), the 
operation edge unification derives a new CQG H’ from H by removing all edges in Em(vi, vj) 
except leaving one dominating edge ed and modifying b(ed) as: 



),(
)()(
jimk vvEe
kd ebeb  (8) 
 
Property 3: Given a CQG H representing any arbitrary acyclic system, a CQG H’ derived 
from H by applying edge unification, a cycle C passing through that specific dominating edge 
ed, then the total queue size along C suggested by H’ with target MST of H’ = 1 is also 
mandatory for any cycle C’ in H derived from C by replacing ed with other parallel edge to 
ensure MST of H = 1. 
The proofs of above three properties are omitted due to page limitation. Fig. 11(b) illustrates 
an example of edge unification, and as a result the number of edges is reduced. Moreover, 
after edge unification shown in Fig. 11(b), path condensation can again be applied along the 
path (v1, v4, v5) to further reduce the size of CQG. That is, these two operations can be 
performed repeatedly until no further reduction can be made. Fig. 11(c) gives the final 
minimal CQG, which contains only two vertices and an edge. 
 
23 
 
cycles in H, and this number can increase extremely fast even if the graph size just grows a 
bit. Thus, it now becomes clear that why we have to compact a given QG by all means before 
performing ILP. Meanwhile, since one or more cycles may be compacted into a single edge, 
e.g., Fig. 11(c). Thus, (11) gives the constraint for a special kind of cycle that contains only 
one edge, where the cycle is formed by traversing that edge in its normal (forward) direction 
as well as its reverse direction. 
 
D. Recovery Phase 
 
Once ILP produces an optimal solution for a given CQG, certain operations should follow to 
further derive the optimal solution for the original QG. Then, we present two operations, edge 
split and path expansion, for this purpose. 
 
Edge Split: 
Assume an edge ed(wd, qd, cd) is a selected dominating edge and ek(wk, qk, ck) is ed’s removed 
Fig. 12 (a) The edge split operation. (b) The path expansion operation. (c) The solution 
for original QG. 
(b) 
(a) 
(c) 
25 
 
example of path expansion. At last, as shown in Fig. 12(c), edge split and path expansion can 
be performed repeatedly until the complete optimal solution for the original QG is obtained. 
At the end of this section, Fig. 13 summarizes the overall flow of our proposed method for 
minimal queue insertion. Unlike [34], [35], identifying strongly connected components (SCCs) 
is unnecessary here since the testcases are acylic. 
 
The proposed approach has been implemented in C++/Linux environment. Since it is difficult 
for us to get a bunch of real-world systems, alternatively, we decide to randomly build a set of 
different-sized directed acyclic graphs (DAGs) as QGs for evaluation, which is similar to the 
approach used in the experimental setup of [35]. Furthermore, latency of every edge in a DAG 
(i.e., communication channel in a system) is also randomly assigned with an integer within the 
interval [1, L]; that is, the number of relay stations required inserting at each edge (channel) is 
within the range [0, L – 1]. All experiments are conducted on a workstation with an AMD 
1.81GHz CPU and 2GB RAM. The package lp_solve is adopted when solving ILP [41]. 
Our first experiment is to verify whether the proposed compaction techniques are effective. 
Johnson’s algorithm [42] is applied to identify all cycles in both the original QG and the minimal 
CQG. The experimental results shown in Table 5 clearly indicate that the proposed technique can 
successfully reduce the number of vertices and edges as well as achieve a remarkable reduction 
of cycle count. Before compaction, the cycle count for several test cases even exceeds one 
million, which makes ILP virtually impossible to find a feasible solution. 
In our second experiment, we compare our proposed method with Collins’ heuristic method 
roposed in [35]. Table 6 and Table 7 report the results with L = 3 and 16, respectively. The results 
show that our proposed method can achieve an average reduction of 23% and 28% in queue size 
Table 5  Experimental results of cycle reduction. 
Case Name 
Original QG Minimal CQG 
(V, E) #Cycles (V, E) #Cycles 
Testcase1 (11,15) 55 (8,11) 12 
Testcase2 (17,21) 51 (13,17) 14 
Testcase3 (45,61) 30540 (20,35) 10123 
Testcase4 (58,76) 48590 (39,45) 10497 
Testcase5 (104,121) 42435 (56,73) 19754 
Testcase6 (126,172) > 1Million (77,98) 132415 
Testcase7 (175,201) > 1Million (66,84) 15423 
Testcase8 (297,318) > 1Million (116,142) 23862 
27 
 
the proposed method also outperforms the previous work by about 12% in terms of average 
latency. As a result, the proposed algorithm should be regarded as a better alternative while 
performing architectural synthesis targeting DRFM. 
Furthermore, a throughput optimization technique for LIS with minimal queue size is 
presented. First, an LIS is transformed as a newly proposed quantitative graph; next, the size of 
QG can be minimized through the developed compaction operations; ILP then follows to get an 
exact solution of minimal queue size, which can further be converted into an optimal solution for 
the original LIS. The experimental results demonstrate that our algorithm can achieve an average 
reduction of up to 28% in queue size as compared to the prior art. Moreover, the required runtime 
is merely about half an hour for a system with hundreds of cores. Consequently, we believe that 
the proposed technique is a better alternative to resolve the issue of queue sizing for moderately 
large systems in practice. The proposed algorithm can only handle acyclic systems at this 
moment. We are currently working on developing on improved version that can deal with cyclic 
systems as well. 
 
Table 7  Experimental results with L=16. 
L L=16 
Case Name 
Proposed Method Collins’ Method [12] ILP directly to QG 
#Queues 
Run- 
time 
#Queues 
Run- 
time 
#Queues 
Run- 
time 
Testcase1 68 1 68 0 68 1 
Testcase2 76 0 77 0 76 0 
Testcase3 290 9 437 6 290 19 
Testcase4 291 31 351 19 291 52 
Testcase5 256 77 386 48 256 459 
Testcase6 519 1438 793 913 * * 
Testcase7 673 69 753 40 * * 
Testcase8 641 131 1035 83 * * 
Ratio 0.72 1.58 1 1 - - 
29 
 
and Systems, vol. 23, no. 4, pp. 550–564, Apr. 2004. 
[14] C.-I Chen and J.-D. Huang, “A Hierarchical Criticality-Aware Architectural  Synthesis 
Framework for Multicycle Communication,” IEICE Trans. on Fundamentals, vol. E93-A, no. 
7, pp. 1300–1308, Jul. 2010. 
[15] S.-H. Huang, C.-H. Chiang, and C.-H. Cheng, “Three-dimension scheduling under 
multi-cycle interconnect communications,” IEICE Electronics Express, vol. 2, no. 4 
pp.108–114, Feb. 2005. 
[16] J. Cong, Y. Fan, and Z. Zhang, “Architecture-level synthesis for automatic interconnect 
pipelining,” Proc. Design Automation Conf., pp. 602–607, Jun. 2004. 
[17] W.-S. Huang, Y.-R. Hong, J.-D. Huang, and Y.-S. Huang, “A multicycle communication 
architecture and synthesis flow for global interconnect resource sharing,” Proc. Asia and 
South Pacific Design Automation Conf., pp. 16–21, Jan. 2008. 
[18] Y.-S. Huang, Y.-J. Hong, and J.-D. Huang, “Communication Synthesis for Interconnect 
Minimization in Multicycle Communication Architecture,” IEICE Trans. on Fundamentals. 
vol. E92-A, no. 12, pp. 3143–3150, Dec. 2009. 
[19] Ohchi, N. Togawa, M. Yanagisawa, and T. Ohtsuki, “High-level synthesis algorithms with 
floorplaning for distributed/shared-register architectures,” Proc. Int’l Symp. VLSI Design, 
Automation and Test, pp. 164–167, Apr. 2008. 
[20] J. Cong, Y. Fan, and J. Xu, “Simultaneous resource binding and interconnection optimization 
based on a distributed register-file microarchitecture,” ACM Trans. Design Automation 
Electronics Systems vol. 14, no. 3, pp. 1–31, May. 2009. 
[21] K. Lim, Y. Kim, and T. Kim, “Interconnect and communication synthesis for distributed 
register-file microarchitecture,” Proc. Design Automation Conf., pp. 765–770, Jun. 2007. 
[22] J.-D. Huang, C.-I Chen, Y.-T. Lin, and W.-L. Hsu, “Communication synthesis for 
interconnect minimization targeting distributed register-file microarchitecture,” IEICE Trans. 
on Fundamentals, vol. E94-A, no. 4, pp. 1151–1155, Apr. 2011. 
[23] S. Gao, K. Seto, S. Komatsu, and M. Fujita, “Pipeline scheduling for array based 
reconfigurable architectures considering interconnect delays,” Proc. Int’l Conf. 
Field-Programmable Technology, pp. 137–144, Dec. 2005. 
[24] Terechko, E. L. Thenaff, M. Garg, J. van Eijndhoven, and H. Corporaal, “Inter-cluster 
communication models for clustered VLIW processors,” Proc. Int’l Symp. High 
Performance Computer Architecture, 2003.International Technology Roadmap for 
Semiconductors. Semiconductor Industry Association, 2007. 
[25] L. P. Carloni, K. L. McMillan and A. L. Sangiovanni-Vincentelli, “Theory of 
latency-insensitive design,” IEEE Trans. on CAD, vol. 20, no. 9, pp. 1059–1076, Sep. 2001. 
31 
 
六、 成果自評 
 
在學術論文發表方面, 在今年度我們發表了以下國際會議期刊： 
1. Che-Hua Shih, Ya-Ching Yang, Chia-Chih Yen, Juinn-Dar Huang, and Jing-Yang Jou, 
“FSM-Based Formal Compliance Verification of Interface Protocols,” Journal of Information 
Science and Engineering, vol. 26, no. 5, pp. 1601–1617, Sep. 2010. 
2. Juinn-Dar Huang, Chia-I Chen, Yen-Ting Lin, and Wan-Lin Hsu, “Communication synthesis 
for interconnect minimization targeting distributed register-file microarchitecture,” IEICE 
Trans. on Fundamentals, vol. E94-A, no. 4, pp. 1151–1155, Apr. 2011. 
3. Juinn-Dar Huang, Chia-I Chen, Wan-Ling Hsu, Yen-Ting Lin, and Jing-Yang Jou, 
“Performance-driven architectural synthesis for distributed register-file microarchitecture 
with inter-island delay,” IEICE Trans. on Fundamentals, to appear. 
 
及以下國際會議論文： 
1. Ya-Shih Huang and Juinn-Dar Huang, “Throughput-Driven Hierarchical Placement for 
Two-Dimensional Regular Multicycle Communication Architecture,” Asia Symposium on 
Quality Electronic Design, pp. 134–139, Aug. 2010. 
2. Juinn-Dar Huang, Chia-I Chen, Wan-Ling Hsu, Yen-Ting Lin, and Jing-Yang Jou, 
“Inter-Island Delay Aware Communication Synthesis for Island-Based Distributed Register 
Architecture,” Proc. of the 16th Workshop on Synthesis and System Integration of Mixed 
Information Technologies, pp. 58–63, Oct. 2010. 
3. Juinn-Dar Huang, Yi-Hang Chen, and Ya-Chien Ho, “Quantitative Graph-Based Minimal 
Queue Sizing for Throughput Optimization in Latency-Insensitive Designs,” Proc. of the 
16th Workshop on Synthesis and System Integration of Mixed Information Technologies, pp. 
430–435, Oct. 2010. 
4. Juinn-Dar Huang, Yi-Hang Chen, and Ya-Chien Ho, “Throughput Optimization for 
Latency-Insensitive System with Minimal Queue Insertion,” Proc. of IEEE Asia and South 
Pacific Design Automation Conference, pp.585–590, Jan. 2011. 
5. Juinn-Dar Huang, Yi-Hang Chen, and Wan-Hsien Lin, “Performance-Optimal Behavioral 
Synthesis with Degenerable Compound Functional Units,” Proc. of IEEE International 
Symposium on VLSI Design, Automation, and Test, pp. 337–340, Apr. 2011. (Best Paper 
Candidate) 
 
33 
 
可供推廣之研發成果資料表 
□ 可申請專利  ▓ 可技術移轉                                     日期：100 年 10 月 30 日 
國科會補助計畫 
計畫名稱： 
符合次世代晶片上通訊思維之具備佈局考量的系統架構合成技術 
計畫主持人：黃俊達 副教授  國立交通大學電子所 
計畫編號：NSC99－2220－E－009－008 
學門領域：微電學門 
技術/創作名稱 無考量群集島信號延遲之分散式暫存器架構上之合成系統 
發明人/創作人 黃俊達 陳嘉怡 
技術說明 
中文： 
分散式暫存器系統的基本概念是將整個系統切割成數個子群，每個
子群有各自局部的運算單元和儲存元件，並盡量減少全域的信號傳
遞。即是使信號傳遞局部化，以得到更好的合成面積和系統效能。
目前已有不同的分散式暫存器架構，我們針對「無考量群集島信號
延遲之分散式暫存器架構」提出以減少「群集島之間的連線」為主
的合成系統，同時我們另外增加對多埠暫存器群讀取埠數目的限
制，使得整個問題的設定更符合現實世界。 
英文： 
Several types of distributed register (DR) architectures, where the 
whole system is divided into several logic clusters, are also broadly 
studied. In general, all DR-based architectures try to keep most 
interconnects local within a cluster and thus minimize the number of 
inter-cluster long interconnects for better area and performance 
outcome. In this project, we develop synthesis frameworks on 
distributed register-file microarchitecture (DRFM) in order to decrease 
the number of inter-island connections (IICs), which is used as an 
evaluation metric for quality of result (QoR) at early design phases.
Furthermore, we add an extra size constraint on read port of register 
file to make the underlying architectural assumption of DRFM more 
realistic. 
可利用之產業 
及 
可開發之產品 
1. Electronic Design Automation (EDA) (EDA 產業) 
2. Integrated Circuit Design (IC 設計產業) 
技術特點 
「無考量群集島信號延遲之分散式暫存器架構」如同一般的分散式
暫存器架構，將整個系統切割成數個子群，每個子群有各自局部的
運算單元和儲存元件。針對無考量群集島信號延遲之分散式暫存器
架構，我們提供一套以連線資源和系統效能為考量之合成系統。 
35 
 
可供推廣之研發成果資料表 
□ 可申請專利  ▓ 可技術移轉                                    日期：100 年 10 月 30 日 
國科會補助計畫 
計畫名稱： 
符合次世代晶片上通訊思維之具備佈局考量的系統架構合成技術 
計畫主持人：黃俊達 副教授  國立交通大學電子所 
計畫編號：NSC99－2220－E－009－008 
學門領域：微電學門 
技術/創作名稱 針對延遲容忍系統上之以產能最佳化導向之最少佇列插入法 
發明人/創作人 黃俊達 陳詣航 何亞謙 
技術說明 
中文： 
由於全域長導線延遲在現今的系統設計成為一個很重要的問題，近
年來延遲容忍系統的研究也漸漸的被重視。延遲容忍系統的特色在
於使已設計完成的智財擁有允許多時脈週期通訊的能力，不需要修
改本來的設計以解決導線延遲過長的問題。在本研究成果中，我們
提供了安插最小佇列的系統效能優化方法以解決在延遲容忍系統
中信號延遲長度不平均和通訊的負回授所造成系統效能下降的問
題。 
英文： 
As manufacturing processes are constantly moving toward very deep 
submicron (VDSM) technology, global interconnect delay is becoming 
one of the most critical performance obstacles in system-on-chip (SoC) 
designs nowadays. Recent years latency-insensitive-design (LID), 
which enables multicycle communication to tolerate variant 
inter-connect delay without substantially modifying pre-designed IP 
cores, has been proposed to conquer this issue. In this work, we present 
a throughput optimization technique with minimal queue insertion to 
solve the problem of degraded system throughput resident in LID. 
可利用之產業 
及 
可開發之產品 
1. Electronic Design Automation (EDA) (EDA 產業) 
2. Integrated Circuit Design (IC 設計產業) 
技術特點 
We first model a given LIS as a quantitative graph (QG), which can be 
further compacted using the proposed techniques, so that much bigger 
problems can be handled. On top of QG, the optimal solution with 
minimal queue size can be achieved through integer linear 
programming based on the proposed constraint formulation in an 
acceptable runtime. 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/31
國科會補助計畫
計畫名稱: 子計畫一：符合次世代晶片上通訊思維之具備幾何考量的系統架構合成技術
(3/3)
計畫主持人: 黃俊達
計畫編號: 99-2220-E-009-008- 學門領域: 晶片科技計畫--整合型學術研究
計畫
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
*參與教育部主「九十九學年度大學校院積體電路電腦輔助設計(CAD)軟體製作
競賽」榮獲 定題組 佳作 
 作品名稱：3D IC Design Partitioning with Power Consideration, 得獎年
月：100 年 6 月 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
