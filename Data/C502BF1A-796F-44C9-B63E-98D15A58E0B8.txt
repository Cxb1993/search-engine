 2 
2
2 ( )
1.
1
n p k
p kp k
+
−
+ + +
yv+i = yv ⊕ z1,i, i = 1, 2,…, c, 
in c/p computation steps. Note that yv+c is computed by Pp. 
Phase m (m = 3, 4,…, k + 1): Initially, Pp sends yv+(m–2)c to all the other PEs. Next, Pp–k+m–1 scatters 
zm–1 among all the PEs evenly, each PE having c/p values. All the PEs then concurrently perform 
yv+(m–2)c+i = yv+(m–2)c ⊕ zm–1,i, i = 1, 2,…, c, 
in c/p computation steps. Note that yv+(m–1)c is computed by Pp. 
 
Let C(n, p, k) denote the number of computation steps required by Algorithm A(n, p, k), and R(n, p, k) 
denote the number of communication steps. 
Property 1. C(n, p, k) = 
Property 2. When k = 1, R(n, p, k) = p(p − 1); when k ≥ 2, R(n, p, k) = (2k − 1)(p – 1)(p + k – 1)/2k. 
 
If p ≥ 2k + 1 and k ≥ 2, A(n, p, k) can be modified to move the communications performed by the last 
k PEs after phase 2 to be performed in phase 1, resulting in the faster Algorithm B(n, p, k) [34]. B(n, p, k) 
takes  
23
2
1
2
12
  ) , ,( 22 +−+−
−
= kkpp
k
k
kpnS
 
communication steps. The number of computation steps does not change. 
Since A(n, p, k) requires that p = kq + 1, we may not be able to use a suitable value of k to solve the 
prefix problem faster by using more PEs. For example, when p − 1 is a prime number, the value of k can 
only be 1 or p − 1. Even if p − 1 is not a prime number, k may only be able to assume very few integer 
values. 
 
3. New algorithm 
The new algorithm is based on A(n, p, k), which is invoked in phase 1. Since it has four parameters, 
its complexity analysis is very complicated, and is beyond the scope of this paper, partly because of space 
limitation. 
 
Algorithm Q(n, p, k, r) {Solving the prefix problem of n inputs, x1, x2 ,…, xn, with p PEs to obtain y1, 
y2 ,..., yn, where n > p = kq + r, k ≥ 1, q ≥ 1, r ≥ 2. It can be shown that if k < r, the condition n ≥ p(p + r)/2 
must hold; if k ≥ r, then n ≥ (p2 + kp + r(k − r + 2))/2 must be true. For ease of presentation, assume that all 
numerical values are integers.} 
Phase 1:  Partition the inputs into two parts: N1 = (x1, x2,…, xv) and N2 = (xv+1, xv+2,..., xn), where 1 ≤ 
v < n. The value of v is decided such that in this phase the first p − r + 1 PEs take the same number of 
computation steps as that of the other r − 1 PEs. How the value of v is obtained will be known later. P1, 
P2,..., Pp−r+1 take N1 as input to compute y1, y2 ,..., yv by invoking A(v, p − r + 1, k). In the mean time, N2 is 
distributed evenly to the other r − 1 PEs Pp−r+2, Pp−r+3,..., Pp, each PE holding c = (n − v)/(r − 1) of the input 
values. Thus, the r − 1 PEs can compute z1 = (z1,1, z1,2,..., z1,c), z2 = (z2,1, z2,2,..., z2,c),..., zr−1 = (zr−1,1, zr−1,2,..., 
zr−1,c), respectively, where  
zi,j = (v + (i − 1)c + 1):(v + (i − 1)c + j). 
Note that yv is obtained by Pp−r+1.  
Phase 2: Initially Pp−r+1 sends yv to all other PEs. Then, Pp−r+2 distributes z1 evenly to all PEs, each PE 
 4 
)1(2
2
)2)(2)(12(
 ) , , ,( −+
−+−−
= p
k
kppk
rkpnRQ
k
rkprpk
rkpnRQ
2
))()(12(
 ) , , ,(
−+−−
=
A(n, p, k), k can only be 1 or 11. In contrast, Q(n, p, k, r) can have more k values to choose, providing p − 1 
≥ r ≥ 2. If k = 2 and r = 2, then the execution of Q(n, 12, 2, 2) is as follows:  
Phase 1: Partition inputs into N1 = (x1, x2 ,…, xv) and N2 = (xv+1, xv+2,..., xn). Since p − r + 1 = 11, the 
first 11 PEs take N1 as input to invoke A(v, 11, 2) and obtain y1, y2 ,..., yv. Therefore, P1, P2,..., P11 take 
C(v, 11, 2) computation steps to compute the prefixes of N1. From Property 1, we have 
17313  1
1  2  22 121
2)  (112
  )2 ,11 ,( −=−
+++
+
= v/
v
vC
. 
In the mean time, N2 is distributed to r − 1 = 1 PE; that is, P12 has c = n − v input values. P12 computes 
z1 by taking n − v − 1 computation steps. Since P1, P2,..., P11 take the same number of computation steps as 
P12 does, we have  
13v/73 − 1 = n − v − 1, 
v = 73n/86. 
Thus, c = n − v = 13n/86, and P12 computes z1 = (z1,1, z1,2,..., z1,13n/86). Note that yv = y73n/86 is obtained 
by P11 and C(73n/86, 11, 2) = 13n/86 − 1.  
Phase 2: P11 sends y73n/86 to the other 11 PEs. P12 distributes 1/12 of z1 to each of the other 11 PEs. 
Since z1 contains 13n/86 values, each PE receives 1/12 ×13n/86 = 13n/1032 values. That is, P10 sends z1,1 
through z1,13n/1032, z1,13n/1032+1 through z1,26n/1032,..., z1,143n/1032+1 through z1,13n/86 to P1, P2,..., P11, respectively. 
Finally, all the 12 PEs concurrently compute y73n/86+1, y73n/86+2,..., yn.  
We use CQ(n, p, k, r) to represent the number of computation steps required by Q(n, p, k, r), and use 
RQ(n, p, k, r) to represent the number of communication steps. Let v = αp,k,r n, where 0 < αp,k,r < 1. The 
following theorems can be proved [20]. 
Theorem 1.  
)2(
1)1(  )1(
  
2
2
 , ,
+−++
+++−++−
=
rkrkpp
krpk  rp
rkpα
. 
Theorem 2. 
1  
)]2([
)]1()1([2
  ) , , ,(
2
2
−
+−++
+−−++
=
rkrkppp
rkrkppn
rkpnCQ
. 
Theorem 3.  
When k = 1 and r = 2, RQ(n, p, k, r) = p(p − 1); 
when k = 1 and r ≥ 3, RQ(n, p, k, r) = (p − r + 1)(p − r) + (2r − 3)(p − 1); 
when k ≥ 2 and r = 2,                                         ; 
when k ≥ 2 and r ≥ 3,                            + (2r − 3)(p − 1). 
 
4. Comparison of algorithms 
For ease of presentation, we assume that a computation step takes a unit of time, and a communication 
step takes τ units of time. Therefore, the running time of A(n, p, k) is C(n, p, k) + τ R(n, p, k), and the 
running time of B(n, p, k) is C(n, p, k) + τ S(n, p, k).  
Now, we compare the running times of A(n, p, k), B(n, p, k), and Q(n, p, k, r). Suppose n = 8192, p = 
 6 
k
0 2 4 6 8 10 12
R
u
n
n
in
g
 t
im
e
1440
1460
1480
1500
1520
1540
1560
Algorithm Q (r = 2)
Algorithm A
 
Fig. 6. Running times of A and Q when n = 8192, p = 12 and τ = 1. 
k
0 2 4 6 8 10 12
R
u
n
n
in
g
 t
im
e
1325
1330
1335
1340
1345
1350
1355
1360
1365
Algorithm Q (r = 2)
Algorithm A
 
Fig. 7. Running times of A and Q when n = 8192, p = 12, and τ = 0.1. 
 
Therefore, when p − 1 is not prime and τ = 1, Algorithm B is the fastest, and Algorithm Q is faster 
than Algorithm A; when p − 1 is not prime and τ = 0.1, Algorithm A is the fastest, and Algorithm Q is 
faster than Algorithm B. However, when p − 1 is prime, Algorithm B does not exist, and Algorithm Q can 
be faster than Algorithm A when τ = 1; but when τ = 0.1, Algorithm A is slightly faster than Q. In general, 
Algorithm Q is faster than A when τ ≥ 1. 
 
5. Conclusion 
In this paper, we have presented Algorithm Q, a computation-efficient parallel prefix algorithm for 
multicomputers with half-duplex communications. The algorithm is based on Algorithm A, but its time 
complexity becomes much more complicated. The new algorithm can be faster than previous ones. This is 
especially true when the ratio of the duration of a communication step to that of a computation step is 
greater than or equal to one.  
 
 8 
[21] P.M. Kogge and H.S. Stone, “A parallel algorithm for the efficient solution of a general class of 
recurrence equations,” IEEE Trans. Comput., Aug. 1973, vol. C-22, pp. 783-791. 
[22] C.P. Kruskal, T. Madej, and L. Rudolph, “Parallel prefix on fully connected direct connection 
machines,” in Proc. Int. Conf. on Parallel Processing, St. Charles, IL, 1986, pp. 278-284. 
[23] C.P. Kruskal, L. Rudolph, and M. Snir, “The power of parallel prefix,” IEEE Trans. Comput., Oct. 
1985, vol. C-34, pp. 965-968. 
[24] R.E. Ladner and M.J. Fischer, “Parallel prefix computation,” J. ACM, Oct. 1980, vol. 27, pp. 
831-838. 
[25] S. Lakshmivarahan and S.K. Dhall, Parallel Computing Using the Prefix Problem. Oxford University 
Press, Oxford, UK, 1994. 
[26] S. Lakshmivarahan, C.M. Yang, and S.K. Dhall, “On a new class of optimal parallel prefix circuits 
with (size + depth) = 2n – 2 and lοg n ≤ depth ≤ (2 log n – 3),” in Proc. Int. Conf. on Parallel 
Processing, St. Charles, IL, 1987, pp. 58-65. 
[27] F.T. Leighton, Introduction to Parallel Algorithms and Architectures: Arrays, Trees, Hypercubes. 
Morgan Kaufmann, San Mateo, CA, 1992. 
[28] R. Lin, K. Nakano, S. Olariu, M.C. Pinotti, J.L. Schwing, and A.Y. Zomaya, “Scalable 
hardware-algorithms for binary prefix sums,” IEEE Trans. Parallel Distributed Syst., Aug. 2000, vol. 
11, pp. 838-850. 
[29] Y.-C. Lin, “A family of computation-efficient parallel prefix algorithms,” WSEAS Transactions on 
Computers, 2006, vol. 5, pp. 3060-3066. 
[30] Y.-C. Lin, “Optimal parallel prefix circuits with fan-out 2 and corresponding parallel algorithms,” 
Neural, Parallel & Scientific Computations, Mar. 1999, vol. 7, pp. 33-42. 
[31] Y.-C. Lin and J.-N. Chen, “Z4: A new depth-size optimal parallel prefix circuit with small depth,” 
Neural, Parallel & Scientific Computations, Sep. 2003, vol. 11, pp. 221-235. 
[32] Y.-C. Lin and J.-W. Hsiao, “A new approach to constructing optimal parallel prefix circuits with 
small depth,” J. Parallel Distrib. Comput., Jan. 2004, vol. 64, pp. 97-107. 
[33] Y.-C. Lin, Y.-H. Hsu, and C.-K. Liu, “Constructing H4, a fast depth-size optimal parallel prefix 
circuit,” J. Supercomput., Mar. 2003, vol. 24, pp. 279-304. 
[34] Y.-C. Lin and L.-L. Hung, “New families of computation-efficient parallel prefix algorithms,” 
WSEAS Trans. on Computers, 2009, vol. 8, pp. 1651-1660. 
[35] Y.-C. Lin and L.-L. Hung, “Parallel prefix algorithms on the multicomputer,” WSEAS Trans. on 
Computer Research, 2008, vol. 3, pp. 229-239. 
[36] Y.-C. Lin and C.M. Lin, “Efficient parallel prefix algorithms on multicomputers,” J. Information 
Science and Engineering, Jan. 2000, vol. 16, pp. 41-64. 
[37] Y.-C. Lin and C.-K. Liu, “Finding optimal parallel prefix circuits with fan-out 2 in constant time,” 
Inform. Process. Lett., May 1999, vol. 70, pp. 191-195. 
[38] Y.-C. Lin and C.-C. Shih, “A new class of depth-size optimal parallel prefix circuits,” J. 
Supercomput., July 1999, vol. 14, pp. 39-52. 
[39] Y.-C. Lin and C.-C. Shih, “Optimal parallel prefix circuits with fan-out at most 4,” in Proc. 2nd 
IASTED Int. Conf. on Parallel and Distributed Computing and Networks, Brisbane, Australia, 1998, 
pp. 312-317. 
[40] Y.-C. Lin and C.-Y. Su, “Faster optimal parallel prefix circuits: New algorithmic construction,” J. 
 1 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                    日期：100 年 10 月 25 日 
一、參加會議經過 
這個會議特別安排四個 keynote speeches，各有兩個在 26日與 27 日。四個
keynote speeches 都參加的人可在 27日晚上抽獎。我很幸運也抽到 iPod。 
我除了發表論文，也擔任 Session 2-C: Algorithms and Applications 的主
席，順利完成任務。 
此次也遇見一些新、舊朋友。美國 University of Southern California 的黃
鎧教授是 keynote speaker 之一。我與黃教授認識約 20年，所以他在 26日晚上邀
我一起去濟州島，但實在無法未事先請假就去，只好實說婉拒。 
計畫編號 NSC 99-2221-E-309-011 
計畫名稱 設計有效率的平行前置演算法 
出國人員
姓名 林彥君 
服務機構
及職稱 長榮大學 資訊工程學系 教授 
會議時間 
100 年 5月 26 日
至 
100 年 5月 28 日 
會議地點 南韓釜山 
會議名稱 
第 9屆 IEEE 國際平行暨分散式處理及應用會議 
Ninth IEEE International Symposium on Parallel and Distributed 
Processing with Applications 
發表論文
題目 
用於多重電腦的新平行前置計算演算法 
New Parallel Prefix Algorithm for Multicomputers 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/09/16
國科會補助計畫
計畫名稱: 設計有效率的平行前置演算法
計畫主持人: 林彥君
計畫編號: 99-2221-E-309-011- 學門領域: 平行與分散處理
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
