2中英文摘要
中文摘要︰
本計畫所開發的資料路徑產生系統，主要包括五大部分：(1) 捨棄式乘法(truncated
multipliers)相關單元、(2) multi-partite函數計算單元、(3) 以多階 piecewise 查表逼近之函
數計算單元、(4) 基本浮點格式算術運算單元、(5) 定點和浮點浮點格式之整合型CORDIC
運算單元。本產生系統可自動化產生任意精確度之相關算術運算單元之 portable RTL 程
式碼。本計畫成果包括許多不同精確度下，各種不同設計方式資料路徑運算單元之合成
結果比較，提供使用者選擇最合適的硬體架構。
Abstract︰
We developed a datapath generation system that produces hardware of five major datapath
arithmetic function units: (1) truncated multipliers, (2) multi-partitite function units, (3)
high-order piecewise table-look-up function units, (4) basic floating-point arithmetic units, and
(5) fixe-point and floating-point CORDIC function units. This system generates
technology-independent RTL codes for various arithmetic function units based on designers’
requirement including target accuracy, preferred methods, and delay/area constraints. The
results contain extensive comparison of datapath synthesis results using various
implementation methods. Designers can select the most suitable approaches.
關鍵詞 (keywords)：
計算機算術(computer arithmetic), 函數求值(function evaluation), piecewise table-look-up，
bipartite, multipartite, truncated multiplier, CORDIC, 浮點算術(floating-point arithmetic).
4一、 研究目的
隨著內嵌式 SOC的普及以及多媒體與網路相關應用的需求，現在資料路徑的功能越
來越複雜，通常包括多個可變位元精確度之算術運算模組以及函數產生器之特殊硬體
等，如數位通訊調變應用上所需的正弦／餘弦函數產生器，微處理器中計算一些超越函
數，如開根號、三角函數／指數／對數等運算的算術運算單元，如果這些函數算術運算
功能單元，都是由使用者自行設計的話，將會花費相當多的時間。此外﹐許多 EDA工具
目前提供的算術運算模組並不足以應付如 3D電腦繪圖等高效能需求的應用設計需求，因
此本計劃發展的算數單元產生器﹐將能為使用者產生符合需要的函數產生器計算單元。
二、 文獻探討
查表法(Table-based Method)是常被使用的特殊函式的計算方法，它的好處是計算速度
快而且很適合做管線化設計，所以很適合使用在高效能需求的應用上，查表法可以分為
直接查表法和間接查表法，間接查表法常見的方法有 Bipartite 和 Multi-partite [1-3],
Piecewise Table Lookup Method[4-8]；Bipartite和Multi-partite方法只需要查表與加法（不
須乘法）的硬體，但是需要的表格面積也隨位元精確度呈指數增加；間接查表法方法利
用近似方程式(approximate function)搭配表格(Lookup Table)，將查出的方程式﹐以乘法和
加法做內插計算出最後的方程式近似解，方程式內插法所使用的近似方程式 degree會影
響設計上之精確度及計算複雜度，隨者 degree增加，運算結果的精確度會提高，但運算
電路將更複雜而使的計算速度減低。雖然先前的研究已經個別探討此兩種 Table-based 函
數計算，但是尚欠缺針對此兩種不同設計方法，在不同精確度和不同階數下之詳細比較。
此外，目前 cell-based 設計流程中邏輯合成所用到 Synopsys Designware library，並無支
援上述兩種設計，因此無法根據使用者的需求，自動合成最合適的函數計算硬體。本計
畫開發此兩種函數計算之自動合成器，並詳盡的比較在不同參數下之硬體面積和速度。
有關捨棄式乘法器之相關研究，已經散見於相關文獻[9-11]，雖然它可有效降低乘法
相關運算單元的複雜度，但是目前的 Synopsys Designware library並不支援合成此種捨棄
式乘法器硬體，造成許多常見的乘法相關的計算單元（如向量內積計算）之設計，非常
沒有效率，因此本計畫也實現此種捨棄式乘法器之自動合成，讓使用者可在 cell-based設
計流程使用。
目前大部分的資料路徑運算單元均採用定點格式(fixed-point)，但是在一些要求大數值
範圍之應用，如電腦繪圖，往往需要浮點乘法和加法器[12][13]，但是目前台灣學術界所
使用的 Synopsys Designware library並不支援浮點運算單元之合成，因此本計畫也開發浮
點基本算術單元。
CORDIC運算單元是資料路徑中一個重要的運算單元，它可實現許多超越函數之算術
計算，大部分 CORDIC相關研究均以定點格式(fixed-point)為主，而且僅針對 CORDIC 兩
種運算模式 (vectoring mode 和 rotation mode)中之 rotation mode [14-15]，本計畫同時考
量兩種運算模式，設計出高 throughput 之 fully-pipelined 定點格式整合型 CORDIC 處理
器。此外，本計畫最後也設計出浮點格式之 mixed-CORDIC 處理器，可應用在三維電腦
繪圖等須大量浮點運算之相關硬體設計 [12]。
三、 研究方法，結果與討論
(1) Multipartite Method
Multipartite 是利用查表和加法計算函數值。其中 bipartite(或稱 2-partite)，是屬於
6表一: 各種Multipartite不同切割數的合成數據比較
2-part Results 8-bit 12-bit 16-bit 20-bit 24-bit
1 3.2 9.1 21.5 71.8 572.2
2 3.3 9.1 21.5 71.8 572.3
3 3.3 9.1 21.5 71.8 572.3
4 3.4 9.2 21.6 71.9 572.4
Area
gate count
(K)
5 3.6 9.3 21.8 72.1 573.0
1 7.1 7.4 9.3 11.3 13.9
2 6.0 6.5 8.0 9.6 11.8
3 4.7 5.5 6.7 8.0 9.7
4 3.5 4.5 5.4 6.2 7.6
Delay
(ns)
5 2.3 3.5 4.0 4.5 5.5
3-part Results 8-bit 12-bit 16-bit 20-bit 24-bit
1 2.6 12.0 21.7 56.4 247.6
2 2.7 12.0 21.8 56.5 247.7
3 2.8 12.1 22.0 56.6 247.8
4 2.8 12.4 22.1 56.8 247.9
Area
gate count
(K)
5 3.0 12.6 22.5 57.2 248.6
1 7.6 10.4 11.6 13.4 14.9
2 6.3 8.7 9.8 11.3 12.7
3 5.0 7.0 8.0 9.2 10.5
4 3.8 5.4 6.2 7.0 8.2
Delay
(ns)
5 2.5 3.8 4.3 4.9 5.9
4-part Results 8-bit 12-bit 16-bit 20-bit 24-bit
1 2.4 16.0 24.4 56.9 197.4
2 2.4 16.1 24.6 57.0 197.6
3 2.4 16.2 24.8 57.2 197.9
4 2.5 16.3 25.1 57.6 198.2
Area
gate count
(K)
5 2.7 17.0 25.7 58.2 199.0
1 7.8 10.7 11.9 13.8 15.2
2 6.6 9.0 10.0 11.7 13.0
3 5.3 7.4 8.2 9.5 10.8
4 4.0 5.8 6.4 7.3 8.5
Delay
(ns)
5 2.8 4.1 4.6 5.2 6.3
圖二： 各精確度下 2-part、3-part和 4-part架構的(a) 延遲和(b) 面積之比較
Delay
(ns)
8方法產生函數產生器的流程圖。資料路徑上需要使用到乘法，實作上使用 Partial Product
Multiplier 來減少電路延遲和面積，最後的加總則使用多輸入元加法器(multi-operands
adder)來實現以節省延遲和面積。
                   (a) degree=1                    (b) degree=2
圖四： Piecewise方法函數產生器架構圖。
圖五： Piecewise方法產生函數產生器的流程圖
10
  (a) delay (ns)                           (b) 面積
圖六：倒數函式在不同精確度下各種方法的(a)延遲和(b)面積之比較。
圖七：圖六(b)之的局部放大圖
以 multipartite而言，2-part的實現在 16-bit以下的精確度面積小，但是超過 16-bit的精確
度時則是 3-part和 4-part的面積較小，類似的情形在 piecewise方法上也有出現，精確度
小於 18-bit以下時使用 Deg-1的面積消耗較小，但是超過 18-bit以上時，則是使用 Deg-2
可以有較小的面積，主要的原因是來自於 ROM 面積的成長，在相同的精確度下，ROM
表格面積是 Deg-1 > Deg-2，但是內插電路面積則是 Deg-2 > Deg-1，當精確度提高後 ROM
面積成長的速度超過內插電路面積之後整體面積變成 Deg-2比較小了。
類似的結果也出現在其他函式上，如次方運算和對數運算，因此當設計這些特殊函
式計算硬體時，在做速度和面積的取捨時除了不同方法的考量之外，該方法在不同精確
度下也應該選擇不同的實現架構，而這個精確度選擇的分界點發生在 16-bit 至 20-bit 之
間，如圖七。
12
(3) Truncated Multiplier
傳統的乘法器單元為輸入(m位元 * n位元)則輸出(m+n位元)的乘法計算結果，但是
資料路徑的設計中並不是一定都會完整的使用 m+n位元寬度的計算結果，例如當某個資
料路徑其內部運算數值需要維持在 32-bit (S15.16，此表示法中 S為符號位元，小數點以
前代表整數部分，以後代表小數份)的情況下，則傳統乘法器產生出的 64-bit（S31.32）
需要轉換成 32-bit（S15.16），所以必須將乘法器產生的數值去掉前 16 個位元以及後 16
個位元，而這些每次都必須去掉的位元是可以不需要運算的，所以考量將這些多餘的計
算硬體刪除，即為 Truncated Multiplier。圖九是一個 truncated array multiplier之架構圖。
圖九: Truncated array multiplier。
本合成系統中提供的可刪除掉前面位元與後面位元的計算硬體的 truncated
multiplier，本乘法器在刪除前面位元的部份在刪除不須計算的硬體後，由於需要調整兩
個輸入值的位元，這將會造成些許誤差，所以也必須加上額外的修正電路以避免誤差擴
大，最後只需再加入 LZA（Leading Zero/One Anticipation）以及 shifter和一個加法器的
硬體就可以實現刪除掉前面不需要位元的乘法器，而刪除後面位元的部份在將不需要的
計算硬體刪除後，用少許的修電路差代替以降低誤差，表六為 64-bit truncate to 32-bit(刪
除前 16位元與後 16位元)的乘法器與傳統樹結構乘法器的比較，顯示能有效節省約一半
面積。
表六：Array與 Tree結構 Truncated Multiplier與傳統乘法器 area/time比較。
Truncated Multiplier Area (gate count) Time (ns)
Array 4332 14.02
Tree 6395 5
No truncate 8820 5
圖十為 8x6-bit捨棄式乘法器，其中有兩個參數 t與 k。t代表捨棄掉部分乘積位元
(partial product bits)的行數，即實體電路中沒有真正產生的部份，如圖中三角形所圍的地
方。為了與實體電路中真正有產生的部份乘積位元作區隔，我們以灰階來表示。另一個
14
x1y6 x2y6 x3y6 x4y6 x5y6 x6y6 x7y6 x8y6
x1y5 x2y5 x3y5 x4y5 x5y5 x6y5 x7y5 x8y5
x1y4 x2y4 x3y4 x4y4 x5y4 x6y4 x7y4 x8y4
x1y3 x2y3 x3y3 x4y3 x5y3 x6y3 x7y3 x8y3
x1y2 x2y2 x3y2 x4y2 x5y2 x6y2 x7y2 x8y2
x1y1 x2y1 x3y1 x4y1 x5y1 x6y1 x7y1 x8y1 x5y6
x6y5
x7y4
x8y3
z1 z2 z3 z4 z5 z6 z7 z8 z9 z10 z11 z12 z13 z14
圖十二：變數修正(Variable Correction)
表七：捨棄式乘法器的合成資訊
Parametersnm -bit
truncated
multiplier k T
Area
gate count
(k)
Delay
(ns)
Normalized
Max Error
(ulps)
Area
Reduction
Ratio
0 0 3.65 4.725 - -
0 10 2.67 5.00 9 26.85%
1 9 3.00 4.612 4.000 17.81%
2 8 3.10 4.593 1.751 15.07%
16x16
3 7 3.18 4.700 0.751 12.88%
0 0 8.37 5.288 - -
0 16 6.37 5.29 15 23.90%
1 15 6.53 5.280 7.000 21.98%
2 14 6.80 5.246 3.250 18.76%
24x24
3 13 6.93 5.335 1.5000 17.20%
0 0 14.64 5.826 - -
0 20 11.62 5.77 19 20.63%
1 19 12.10 5.760 9.000 17.35%
2 18 12.31 5.778 4.250 15.92%
32x32
3 17 12.53 5.687 2.000 14.41%
k t
不產生
保留
(最後輸出值)
捨棄
變數修正值
16
圖十四： 浮點數乘加單元架構
圖十五： 浮點數向量內積單元架構
18
(5) CORDIC-based Function Units
本計畫開發定點格式(fixed-point)和浮點格式(floating-point)之 CORDIC 處理器單元，
其中定點格式 CORDIC採用 fully-pipelined架構，因此所需的加法器個數會隨位元精確度
而線性增加，但是不需要移位器。表十一為 fully-ipelined CORDIC於不同位元寬度下所
需 pipeline深度與 pre-Layout Synthesis結果資訊。例如﹐一個 32位元精確度﹐工作頻率
為 100MHz之 pipelined CORDIC約須 30K gates。
表十一：定點 fully pipelined CORDIC 之合成數據。(TSMC 0.13um slow )
accuracy 16 bits 24 bits 32 bits
Pipeline stage number
Normal iteration 17 26 34
Scaling iteration 11 15 20
Total 28 41 54
Clock cycle Area (um2 / gate count)
10 ns 398075/ 79616
870217
/ 174044
1489069
/ 297814
5 ns 457556/ 91512
893991
/ 178799
1498721
/ 299745
本計劃也已經設計出 IEEE-754單精準度浮點格式之 mixed-CORDIC的計算單元，它
整合兩種 CORDIC運算模式 (vectoring mode和 rotation mode)，如圖十六。除了前置和
後置處理單元之外，它的核心分成兩大部分（粗調級和微調級），第一部份（粗調級）採
用 pipelined CORDIC 架構，第二部份（微調級）則採用乘法加法硬體，配合查表 ROM
來實現。前置處理（包括兩個 pipelined stages）主要是將輸入值轉換成 CORDIC能處理
的收斂範圍內。粗調級的 13 pipelined stages執行 CORDIC 運算的前半部份（向量旋轉的
角度精確度在小數 N/2 位元內），微調級的 6 pipelined stages，在 rotation mode執
行向量旋轉，在vectoring mode則是計算向量和x軸的夾角以及向量的長度。此架構共
用vectoring mode和rotation mode之硬體，並將向量長度之修正動作，提前到前N/4
pipelined CORDIC stages 完成，因此可降低計算的時間。
表十二是在 TSMC 0.13um standard cell library下合成的結果(cycle time：4ns)。可以看
到合成後的總面積為112.7K gate count，其中以粗調級的CORDIC stage佔全部面積的48%
為最大，而微調級部分僅佔 15%左右。在 cycle time方面，浮點Mix-CORDIC最快可以
壓至 4ns，cycle time最長是在後置處理及旋轉部分，因此所實現的架構其 throughput每
秒可以產生 250M 的旋轉運算。表十三為浮點 Mix-CORDIC 和 fully-pipelined 浮點
CORDIC在 area、cycle time與 latency的比較，浮點Mix-CORDIC架構在同樣 cycle time
情況下的面積比 fully-pipelined浮點 CORDIC節省約 34%，其 cycle數目也從 49個減為
25個，這表示其電路的 latency可以大幅的降低，可以節省約 49%。
20
降低比例 34% - 49%
四、 參考文獻
[1] M. J. Schulte, J. E. Stine, “Approximating Elementary Functions with Symmetric Bipartite
Tables”, IEEE Trans on Computers, Vol.48, No. 8, pp. 842 – 847, 8 Aug.1999.
[2] F. de Dinechin and A. Tisserand, “Some Improvements on Multipartite Table Methods”,
Proc. 15th IEEE Symp. on Computer Arithmetic, pp.128 – 135, June 2001.
[3] F. de Dinechin and A. Tisserand, “Multipartite Table Methods”, IEEE Trans on Computers,
Vol.54, No. 3, pp. 319 – 330, March 2005.
[4] Cao, J., et al., “High-Performance Architectures for Elementary Function Generation”, Proc.
15th IEEE Symp. on Computer Arithmetic, pp. 136 – 144, June 2001.
[5] E. G. III Walters, M. J. Schulte, “Efficient Function Approximation Using Truncated
Multipliers and Squarers”, Proc. 17th IEEE Symp. on Computer Arithmetic, pp. 232 – 239,
June 2005.
[6] J.-A. Pineino, et al., “High-speed Function Approximation Using a Minimax Quadratic
Interpolator”, IEEE Trans. Computers, Vol. 54, No. 3, pp. 304-318, Mar. 2005.
[7] T. Sasao, et al., “Numerical Function Generators Using LUT Cascades”, IEEE Trans
Computers, Vol. 56, No. 6, pp. 826-838, June 2007.
[8] D.-U. Lee, et al., “Hardware Implementation Trade-Offs of Polynomial Approximations
and Interpolations”, IEEE Trans Computers, Vol. 57, No. 5, pp. 686-701, May 2008.
[9] M. J. Schulte and E. E. Swartzlander, Jr., “Truncated Multiplication with Correction
Constant,” VLSI Signal Processing,VI, New York: IEEE Press, pp. 388-396, 1993.
[10] J. E. Stine and O. M. Duverne, “Variations on Truncated Multiplications”, Proc.
Euromicro Symp. On Digital System Design, 2003.
[11] L-D Van and C-C. Yang, “Generalized Low-Error Area-Efficient Fixed-Width
Multipliers,” IEEE Trans on Circuits and Systems-I, Vol. 52, pp. 1608-1619, 2005.
[12] T. Lang and E. Antelo, “High-Throughput CORDIC-Based Geometry Operations for 3D
Computer Graphics,” IEEE Transactions on Computers, vol. 54, no. 3, pp.347-361, Mar.
2005.
[13] T. Lang and J. D. Bruguera, “Floating-Point Multiply-Add- Fused with Reduced Latency,”
IEEE Trans. On Computers, Vol. 53, No. 8, pp. 988-1003, Aug. 2004.
[14] T.-B. Juang, S.-F. Hsiao, and M.-Y. Tsai, “Para-CORDIC: Parallel CORDIC Rotation
Algorithm”, IEEE Trans. Circuits and Systems, I: Regular Papers, Vol. 51, No. 8, pp.
1515-1524, Aug. 2004.
[15] E. Antelo, J. Villalba, and El L. Zapata, “Low-Latency Pipelined 2D and 3D CORDIC
Processors”, IEEE Trans. Computers, Vol. 57, No. 3, pp. 404-416, Mar. 2008.
