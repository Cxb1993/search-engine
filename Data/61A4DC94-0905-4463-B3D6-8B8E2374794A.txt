1一. 中文摘要
一個 CDS(Connected Dominating Set)的大小是指它所包含的節點數目的多寡。一個較小的 CDS
可以減少傳輸時的封包流量，並且可以簡化連線管理。因此，一個較小的 CDS 將可以直接改進整
個無線網路的效能。由此可見，建立最小的 CDS 是被期望的。但是，在一個給定的連通圖內，尋
找一個最小的 CDS 的問題已經被證明為 NP-complete。當一個問題被證明為 NP-complete，則後續
的需求將是為這個問題設計各種的啟發式演算法。因此，本研究計畫的目的是為無線網路研發高效
能的啟發式分散式演算法來建立較小的 CDS。一種重要的 CDS 演算法類型是由一個標記(marking)
處理程序與一個重新標記(remarking)處理程序所構成。這類 CDS 演算法首先採用標記處理程序來
建立一個初始的 CDS，然後再試圖使用重新標記處理程序來減少這個初始的 CDS 的大小。我們稱
這類型的 CDS 演算法為“remarking_based的 CDS 演算法”。本研究計畫己根據 remarking_based 的
CDS 演算法的技巧為無線網路設計二個有效的 CDS 啟發式分散式演算法。進一步地，我們也分析
我們所提出的 CDS 演算法的通訊複雜度與計算複雜度。最後，我們採用電腦模擬來評估我們所提
出的 CDS 演算法的效能，並且與文獻上已有的 CDS 演算法的效能作比較。此外，因為 CDS 問題
是 NP-complete，所以本研究計畫己採用線性規劃的技巧來為 CDS 問題設計一個 optimal CDS MILP
(Mixed Integer Linear Programming) formulation。此 optimal CDS MILP formulation 可以作為 CDS 問
題的最佳集中式演算法。這個 optimal CDS MILP formulation 可以用來檢視目前已有之 CDS 啟發式
演算法的實際誤差範圍以評估這些啟發式演算法的好壞。
關鍵詞：連通支配集、分散式演算法、線性規劃、無線網路
二. 英文摘要
The size of a CDS (Connected Dominating Set) is the number of nodes it contains. A smaller CDS
has the advantage of reducing the packet traffic and simplifying the connectivity management. Thus, a
smaller CDS will directly lead to the performance improvement in the whole wireless network. Therefore,
it is desirable to construct a minimum CDS. However, the problem of determining a minimum CDS of a
given connected graph has been shown to be NP-complete. When a problem is proved to be NP-complete,
the subsequent quest will be to search for various heuristic algorithms for the problem. Therefore, this
project is to develop high-performance distributed algorithms to establish a smaller CDS in a wireless
network. One important kind of CDS algorithms consists of a marking process and a remarking process.
These algorithms first establish an initial CDS by the marking process. Then, these algorithms employ the
remarking process to shrink the CDS generated from the marking process. We call these algorithms “the
remarking-based CDS algorithms.”In this project, based on the approach of the remarking-based CDS
algorithms, two efficient heuristic distributed CDS algorithms have been designed. Furthermore, the
communication and computation complexities of the proposed CDS algorithms have been analyzed.
Finally, computer simulations have been made to evaluate the performance of the proposed CDS
algorithms as well as compare them with those of the existing CDS algorithms in the literature. In
addition, since the CDS problem is NP-complete, our project has adopted linear programming techniques
in the design of an optimal CDS MILP (Mixed Integer Linear Programming) formulation for the CDS
problem. The optimal CDS MILP formulation can be used as a centralized optimal algorithm for the CDS
problem as well as a judging criterion to evaluate the real error ranges of existing CDS heuristic
algorithms.
Keywords: Connected Dominating Set, Distributed Algorithm, Linear Programming, Wireless Network
三. 報告內容
1.前言
3此外，因為 CDS 問題是 NP-complete，所以本研究計畫的另一目的是採用線性規劃的技巧來為 CDS
問題設計一個 optimal MILP formulation。此 optimal MILP formulation 將可以作為 CDS 問題的最佳
集中式演算法。這個 optimal MILP formulation 將可以用來檢視目前已有之 CDS 啟發式演算法的實
際誤差範圍以評估這些啟發式演算法的好壞。
3.文獻探討
首先，我們將對一些重要的 remarking_based 的 CDS 演算法作一些基本的介紹。然後，我們將
列舉一些應用線性規劃來解決無線網路之相關問題的相關文獻。
在無線網路中，以下這四篇 CDS 相關文獻：文獻[WuLi01]、文獻[WDGS02]、文獻[DaWu04]
和文獻[InSS07]，形成一組重要的 remarking_based 的 CDS 演算法，它們的基本架構很類似。我們
稱文獻[WuLi01]所提出的 CDS 演算法為 WL 演算法。我們稱文獻[WDGS02]所提出的 CDS 演算法
為 WDGS 演算法。我們稱文獻[DaWu04]所提出的 CDS 演算法為 DW 演算法。我們稱文獻[InSS07]
所提出的 CDS 演算法為 ED 演算法。
WL 演算法首先用標記 (marking)處理程序建立一個初始的 CDS，然後再利用重新標記
(remarking)處理程序來刪除多餘的 gateway 以便得到一個較小的 CDS。令函數 m(vi)  {T, F}為一
個標記函數。當 m(vi) = T 時，則節點 vi 是 CDS 中的一個節點(即 gateway)。反之，當 m(vi) = F 時，
則節點 vi 為一個 non-gateway。在 WL 演算法中，一開始，每一個節點的標記(即標記函數值)皆為
F。然後，每一個節點收集其 2-hop 鄰居節點的資訊。之後，每一個節點再去判斷其任意兩個鄰居
節點之間是否存在一條鏈結。假如有一對鄰居節點無鏈結存在，則此節點把自己重新標記為 T。反
之，如果任意兩個鄰居節點之間都有鏈結存在，則此節點的標記維持不變。當每一個節點都完成這
個標記處理程序以後，一個初始的 CDS 便被產生。之後，WL 演算法再以規則 1 及規則 2 來重新
標記每一個節點以便刪除此一初始 CDS 中多餘的成員。規則 1: 考慮二個標記為 T 之節點 v 和 u。
假如 N[v]N[u]並且 id(v)id(u)，則節點 v 之標記將由 T 改為 F。規則 2: 考慮三個標記為 T 之節
點 v、u 和 w。假如 N(v)N(u)N(w)並且 id(v)min{id(u), id(w)}，則節點 v 之標記將由 T 改為
F。
WDGS 演算法延伸了 WL 演算法之優先權的想法。WDGS 演算法是以一個節點之鄰居節點的
個數(degree)或一個節點之電力(power)來當作重新標記處理程序的主要優先權，而以 id 當作重新標
記處理程序之次要優先權。模擬結果顯示 WDGS 演算法所建立的 CDS 可以有較長的生命週期
[WDGS02]。DW 演算法的標記處理程序與 WL 演算法的標記處理程序相同。在 DW 演算法中，在
建立了一個初始的 CDS 之後，考慮任何一個屬於此初始 CDS 的節點 v。假如在 v 的 1-hop 鄰居之
中，有一組標記為 T 之節點，它們的 id 都比 v 大並且這組節點可以覆蓋 v 的所有鄰居節點並且這組
節點是連通的，那麼 v 的標記將由 T 改為 F。ED 演算法使用 degree 或 id 或此二者混合的方式來當
作重新標記處理程序的優先權。ED 演算法的標記處理程序與 WL 演算法的標記處理程序相同。在
ED 演算法中，在建立了一個初始 CDS 之後，考慮任何一個屬於此初始 CDS 的節點 v。在 v 的 1-hop
鄰居之中，挑選出優先權比 v 大且標記為 T 之節點，之後再挑選 v 的 2-hop 鄰居之中有連到這組節
點並且優先權比 v 大的節點。假如在這二次挑選出來的節點之中可以找出一組節點可以覆蓋 v 的所
有鄰居節點並且這組節點是連通的，則節點 v 的標記將由 T 改為 F。
總而言之，這四個 CDS 演算法主要是以 WL 演算法的標記處理程序為基礎來建立一個初始
CDS，之後再利用具有優先權特性的重新標記處理程序去刪除此初始 CDS 中多餘的成員。基本上，
在建立一個初始 CDS 之後，這一個初始 CDS 中的成員必須把自己是 gateway 的訊息傳送出去，以
便能執行重新標記處理程序。
線性規劃(Linear Programming，LP)是目前運用相當廣泛之數學規劃方法[HiLi86]，與其他傳
統數學學門相比較，線性規劃算是非常新也非常實用的一門應用數學。當我們面對一個極為複雜的
特殊問題時，線性規劃提供我們能夠陳述問題的目標，並且能決定出達到該目標的最佳結果。一般
來說，線性規劃首先判斷一個問題是否有解，更進一步地，線性規劃不僅能夠幫我們找到問題的合
適解，而且能找到最佳的合適解。目前已有相當多的研究人員採用線性規劃來解決無線網路的相關
問題。例如，最小化電力相關問題[GuYa04]，廣播∕多播繞送問題[GuYa04]，網路連結性問題
5id(vi)：代表節點 vi 的 id，一般說來，vi 的 id 為 i。
degree(vi)：代表節點 vi 的分支度。我們也以 max{ ( )}
i
iv V
d degree v

 代表網路的分支度。
N(vi)：代表節點 vi 的的鄰居節點集合，也就是說，如果 vj 是 vi 的鄰居節點，則 vj N(vi)。注意，
viN(vi)。
m(vi)：節點 iv 的標記。當 m(vi)為 T 時，節點 vi 是 CDS 中的一個節點(即 vi 為 gateway)。當 m(vi)為
F 時，節點 vi 不是 CDS 中的一個節點(即 vi 為 non-gateway)。當 m(vi)為 U 時，節點 vi 是一個狀態不
明(unknown state)的節點。注意，標記 U 是在我們的 UR_DW 演算法和 UR_ED 演算法中才存在，
其它文獻上的 CDS 演算法並無此標記。
key(vi)：key 是一個用來決定節點之間的優先權的函數[InSS07]。當 key ={id}時，如果 key(vi) 
key(vj)，則 id(vi)id(vj)；反之，如果 key(vi) > key(vj)，則 id(vi) > id(vj)。當 key ={degree, id}時，如
果 key(vi)key(vj)，則degree(vi)degree(vj)或degree(vi) = degree(vj)且 id(vi)id(vj)；反之，如果 key(vi)
> key(vj)，則 degree(vi) > degree(vj)或 degree(vi) = degree(vj)且 id(vi) > id(vj)。
根據上述的假設與符號，現在讓我們重新定義 CDS 問題。
CDS 問題定義
在以 remarking 技巧來求解 CDS 問題時，CDS 問題可以被重新定義如下：給定一個無線網路
圖 G = (V, E)，此處 V 代表此無線網路上的所有節點所形成的集合， E 代表此無線網路上的所有鏈
結所形成的集合。鏈結(vi , vj)  E 表示節點 vi 可以直接傳送封包給節點 vj。求一個函數
  , ,i im v T F v V   ，使得所有 m(vi) = T 的節點形成一個 CDS。注意，就我們的 UR_DW 演算
法和 UR_ED 演算法而言，標記 U 僅會在 CDS 的建立過程中出現。當我們的 UR_DW 演算法和
UR_ED 演算法結束時，每一個節點的標記不是 T 就是 F。
我們的 UR_DW 演算法
接下來，我們描述我們的 UR_DW 演算法。
UR_DW 演算法的虛擬碼（每一個節點 iv V 執行此演算法）
步驟 1. Initially assign m(vi) to U and round = 1.
步驟 2. Build subgraphs G[Vi] and G[Vi], where
          i j j i j j j iV v v N v m v T m v U key v key v        and
      i j j i j jV v v N v m v T m v U      .
步驟 3. If G[Vi] is a connected subgraph and N(vi) － Vi{N(vj) | vjVi}, then change m(vi) to F.
步驟 4. If m(vi) = U and G[Vi] is not a connected subgraph, then change m(vi) to T.
步驟 5. If m(vi) = U and N(vi) － Vi{N(vj) | vjVi}, then change m(vi) to T.
步驟 6. Broadcast id(vi) and m(vi) to all its neighbors.
步驟 7. If m(vi) = U, then round = round + 1 and go to 步驟 2; else stop.
接下來，讓我們說明 UR_DW 演算法建立較小 CDS 的步驟。在步驟 1，節點 vi 將自己的標記
初始化為 U 並且將 round 初始化為 1。在步驟 2，節點 vi 將 m(vi) = T 的鄰居節點和優先權比自己大
且 m(vi) = U 的鄰居節點取出來形成 Vi，並且畫成一個子圖 G[Vi]。在此同時，節點 vi 將所有 m(vi)
= U 或 m(vi) = T 的鄰居節點取出來形成 Vi，並且畫成一個子圖 G[Vi]。在步驟 3，節點 vi 確認子圖
G[Vi]是否為一個連通圖並且確認自己的每一個鄰居節點是否存在在集合 Vi中或是可以藉由一條
鏈結和 Vi中的節點連通。如果是，則將自己重新標記為F ，再執行下一個步驟；反之，則執行下
一個步驟。在步驟 4，如果節點 vi 的 m(vi) = U，則節點 vi 確認子圖 G[Vi]是否為一個連通圖。如果
是，則執行下一個步驟；反之，則將自己重新標記為 T，再執行下一個步驟。在步驟 5，如果節點
7搜尋演算法可以用來作如此的連通檢查[HoSR97]。在步驟4，檢查子圖G[Vi]是否連通的計算複雜
度為O(n2)，此處n為子圖G[Vi]上的節點總數。在步驟3，檢查子圖G[Vi]是否能覆蓋N(vi) 中所有
的節點的計算複雜度為O(nd)。在步驟5，檢查子圖G[Vi]是否能覆蓋N(vi) 中所有的節點的計算
複雜度為O(nd)。因此，我們的UR_DW演算法的計算複雜度為O(r(n2 + nd + n2 + nd)) =
O(r(n2)) = O(r(kd)2) = O(rd2)，此處r  n為回合數。
在另一方面，每一個節點在執行我們的 UR_DW 演算法時，它在每一回合都要傳送封包給它
所有的鄰居節點。所以，在最差的情況下，每一個節點的通訊複雜度為 O(rd)。因此，我們的 UR_DW
演算法的通訊複雜度和計算複雜度分別為 O(rd) 和 O(rd2) 。
我們的 UR_ED 演算法
除了上述的 UR_DW 演算法外，根據 remarking_based 的 CDS 演算法的技巧並以 ED 演算法為
基礎，我們已經研發一個高效能的 remarking_based 的 CDS 分散式演算法。我們稱此 CDS 演算法
為 UR_ED 演算法，此處 U 代表 unknown state，R 代表 round。 UR_ED 演算法己發表成為一篇研
討會論文[ShTL10]。欲了解 UR_ED 演算法者，敬請参閱文獻[ShTL10]，此處我們不再重覆介紹
UR_ED 演算法。
電腦模擬之環境與結果
底下，我們將以電腦模擬的方式來評估和比較 WL 演算法、WDGS 演算法、DW 演算法和我
們的 UR_DW 演算法的效能。關於 ED 演算法和我們的 UR_ED 演算法之效能的評估和比較，敬請
参閱文獻[ShTL10]，此處我們不再重覆介紹。
在我們的電腦模擬環境中，我們假設無線網路的拓樸是靜態的，所以無線網路上的每一個節點
都是靜止不動的。無線網路上的所有節點是任意地分佈在一個 2V V m 的區域內。無線網路上的
節點總數分別為 20、30、40 直到 170、180、190、200。在我們的電腦模擬環境中，我們考慮三種
可能的節點平均分支度，其值分別為 6、12 和 18。我們設定每一個節點的傳輸半徑之值為一個剛
好可以使得網路上：總分支度平均分支度網路節點總數，的值。在我們的電腦模擬環境中，我
們考慮二種優先權函數: key{id}和 key{degree, id}。最後，在我們的電腦模擬中，我們的效能評
估項目為 CDS 的大小。一個 CDS 演算法若其產生的 CDS 愈小，則表示此 CDS 演算法的效能愈佳。
接下來，讓我們討論我們的模擬結果。每一個圖中的垂直軸 p 代表 CDS 之節點總數與無線網
路上之節點總數的比值。每一個圖中的水平軸 n 代表無線網路上之節點總數。每一個模擬數據是以
模擬 10000 次後取其平均值而得到的。
當 key{id}時，我們評估和比較 WL 演算法、DW 演算法和我們的 UR_DW 演算法的效能。
模擬結果如圖 6、圖 7 和圖 8 所示。由圖 6，我們可以發現我們的 UR_DW 演算法所產生的 CDS
大小分別比 WL 演算法和 DW 演算法所產生的 CDS 大小平均小大約 9.93%和 7.10%左右。由圖 7，
我們可以發現我們的 UR_DW 演算法所產生的 CDS 大小分別比 WL 演算法和 DW 演算法所產生的
CDS 大小平均小大約 13.49%和 7.11%左右。由圖 8，我們可以發現我們的 UR_DW 演算法所產生
的 CDS 大小分別比 WL 演算法和 DW 演算法所產生的 CDS 大小平均小大約 11.76%和 5.56%左右。
當 key{degree, id}時，我們評估和比較 WDGS 演算法、DW 演算法和我們的 UR_DW 演算法
的效能。模擬結果如圖 9、圖 10 和圖 11 所示。由圖 9，我們可以發現我們的 UR_DW 演算法所產
生的 CDS 大小分別比 WDGS 演算法和 DW 演算法所產生的 CDS 大小平均小大約 5.99%和 5.25%
左右。由圖 10，我們可以發現我們的 UR_DW 演算法所產生的 CDS 大小分別比 WDGS 演算法和
DW 演算法所產生的 CDS 大小平均小大約 11.52%和 8.73%左右。由圖 11，我們可以發現我們的
UR_DW 演算法所產生的 CDS 大小分別比 WDGS 演算法和 DW 演算法所產生的 CDS 大小平均小
大約 10.90%和 8.38%左右。
由這些模擬數據來看，我們可以知道我們的 UR_DW 演算法確實有較佳的效能。
我們的 optimal CDS MILP formulation
底下，我們描述我們根據線性規劃的技巧為 CDS 問題所設計的一個 optimal MILP formulation
(我們稱它為我們的 optimal CDS MILP formulation)。此 optimal CDS MILP formulation 可作為 CDS
9和我們的 optimal CDS MILP formulation 的效能。模擬結果如圖 15、圖 16 和圖 17 所示。由圖 15，
我們可以發現 WDGS 演算法、DW 演算法和我們的 UR_DW 演算法所產生的 CDS 大小分別比我們
的 optimal CDS MILP formulation 所產生的 CDS 大小平均大大約 13.44%、12.97%和 7.35%左右。
由圖 16，我們可以發現 WDGS 演算法、DW 演算法和我們的 UR_DW 演算法所產生的 CDS 大小
分別比我們的 optimal CDS MILP formulation所產生的CDS大小平均大大約 11.15%、9.68%和 3.12%
左右。由圖 17，我們可以發現 WDGS 演算法、DW 演算法和我們的 UR_DW 演算法所產生的 CDS
大小分別比我們的 optimal CDS MILP formulation 所產生的 CDS 大小平均大大約 9.16%、8.01%和
1.56%左右。
由這些模擬數據來看，我們可以知道我們的 optimal CDS MILP formulation 確實可以用來檢視
目前已有之 CDS 啟發式演算法的實際誤差範圍以評估這些 CDS 啟發式演算法的好壞。
6. 結論與建議
本研究計畫己根據 remarking_based 的 CDS 演算法的技巧為無線網路設計二個有效的 CDS 啟
發式分散式演算法: UR_DW 演算法和 UR_ED 演算法。UR_ED 演算法己發表成為一篇研討會論
文，而本研究報告描述了 UR_DW 演算法。進一步地，本研究報告也分析我們所提出的 CDS 演算
法的通訊複雜度與計算複雜度。最後，本研究報告採用電腦模擬來評估我們所提出的 UR_DW 演
算法的效能，並且與文獻上已有的 CDS 演算法的效能作比較。電腦模擬結果顯示我們的 UR_DW
演算法確實能產生較小的 CDS。
雖然一些 CDS 演算法己經被提出來，但是我們的 UR_DW 演算與它們有二個實質上的差異。
首先，一般的 CDS 演算法只有 T 和 F 兩種標記，但我們的 UR_DW 演算法多定義了一個稱為 U 的
標記，此技巧可以延後決定一個節點的最後標記。事實上，此技巧可以避免太早宣告一個標記應該
為 F 的節點之標記為 T，如此將可減少 gateway 的數量。第二，一般的 CDS 演算法只作兩回合，
卽一回合作標記處理程序，另一回合作重新標記處理程序，而我們的 UR_DW 演算法卻有機會多
作幾回合，以盡可能地減少 gateway 的數量。但是當回合數多時，我們的 UR_DW 演算法的通訊複
雜度和計算複雜度也就隨著增加。在我們的 UR_DW 演算中，或許可以藉著控制回合數，而在通
訊複雜度和計算複雜度與所產生的 CDS 大小之間求得一個平衡，這一點將是我們日後需要再探討
的地方。
此外，因為 CDS 問題是 NP-complete，所以本研究計畫己採用線性規劃的技巧來設計一個 CDS
問題之最佳集中式演算法，我們稱為我們的 optimal CDS MILP formulation。我們的 optimal CDS
MILP formulation 可以用來檢視目前已有之 CDS 啟發式演算法的實際誤差範圍以評估這些啟發式
演算法的好壞。但在電腦模擬過程中，我們發現當無線網路之節點總數變多時，我們的 optimal CDS
MILP formulation 之執行時間常常非常地久。這一點將是我們日後需要尋求改善的地方。
11
Communications and Networks, vol. 4, no. 1, pp. 59-70, March 2002.
[WuLi01] J. Wu and H. Li, "A dominating-set-based routing scheme in ad hoc wireless networks,"
Telecommunication Systems, vol. 18, no. 1-3, pp. 13-36, September 2001.
[ZoCh05] Y. Zou and K. Chakrabarty, "A distributed coverage- and connectivity-centric technique for
selecting active nodes in wireless sensor networks," IEEE Transactions on Computers, vol.
54, no. 8, pp. 978-991, August 2005.
本研究計畫之相關著作
[CCHL09] Fang-Chen Chuang, Chun-Chung Chen, Chun-An Hsieh, Ren-Hao Liao, and Pi-Rong Sheu,
November 2009, "A mobile phone bidding system," Proceedings of UHC 2009: U-Home
Conference, pp.134-143, November 19, 2009, Kun Shan University, Tainan, Taiwan, R.O.C.
(NSC 98-2221-E-224-028, 本計畫對此篇論文之實際貢獻百分比約為 10%)
[CWLS09] Fang-Chen Chuang, Ming-Teng Wu, Ren-Hao Liao, and Pi-Rong Sheu, November 2009, "A
mobile-phone based real time testing system," Proceedings of 2009 the International
Conference on Computer and Network Technologies on Education (CNTE 2009), November
26-27, 2009, Chung Hua University, Hsinchu, Taiwan, R.O.C. (NSC 98-2221-E-224-028,
本計畫對此篇論文之實際貢獻百分比約為 10%)
[CHCL09] Fang-Chen Chuang, Jau-Jiun Hsu, Gu-Wei Chen, Ren-Hao Liao, and Pi-Rong Sheu,
December 2009, "A mobile phone based group buying system," Proceedings of ICSSMET
2009: International Conference on Safety & Security Management and Engineering
Technology, vol. 1, pp. 127-132, December 17-18, 2009, Wu Feng Institute of Technology,
Chiayi, Taiwan, R.O.C. (NSC 98-2221-E-224-028, 本計畫對此篇論文之實際貢獻百分比
約為 10%)
[ChSC09] Young-Long Chen, Pi-Rong Sheu, and Fu-Kai Cheung, December 2009, "A study on cluster
head selection with a weighted function in wireless sensor networks," Proceedings of
ICSSMET 2009: International Conference on Safety & Security Management and
Engineering Technology, vol. 1, pp. 137-144, December 17-18, 2009, Wu Feng Institute of
Technology, Chiayi, Taiwan, R.O.C. (NSC 98-2218-E-025-002 & NSC 98-2221-E-224-028,
本計畫對此篇論文之實際貢獻百分比約為 30%)
[SHLC10] Pi-Rong Sheu, Chuan-Fu Hu, Chi-Chiuan Liou, Fang-Chen Chuang, and Yi-Cyun Chen,
April 2010, "An efficient and interference-aware centralized routing tree algorithm for the
routing and packet scheduling problem in IEEE 802.16 mesh networks," Proceedings of the
2010 International Conference on Communications and Mobile Computing (CMC 2010),
pp.496-503, April 12-14, 2010, Shenzhen, China. (NSC 98-2221-E-224-028, 本計畫對此
篇論文之實際貢獻百分比約為 70%) (Paper acceptance rate = 338/695, 約為 49%)
[CCSS10] Young-Long Chen, Fu-Kai Cheung, Pi-Rong Sheu, and Jia-Syong Su, September 2010, "An
efficient scheme to improve the performance of LEACH in wireless sensor networks,"
Proceedings of WASN 2010: Workshop on Wireless, Ad Hoc, and Sensor Networks,
September 2-3, 2010, National Taiwan University, Taipei, Taiwan, R.O.C. (NSC
98-2221-E-224-028 & NSC 99-2221-E-025-011, 本計畫對此篇論文之實際貢獻百分比約
為 20%)
[ShTL10] Pi-Rong Sheu, Hung-Yuan Tsai, and Chi-Chiuan Liou, October 2010, "A new algorithm for
calculating smaller connected dominating sets in ad hoc wireless networks," Proceedings of
the Taiwan Academic Network Conference 2010 (TANET 2010), October 27-29, 2010,
National University of Tainan, Tainan, Taiwan, R.O.C. (NSC 98-2221-E-224-028, 本計畫
對此篇論文之實際貢獻百分比約為 100%) (Paper acceptance rate = 220/316, 約為 70%)
[CCSL10] Young-Long Chen, Fu-Kai Cheung, Pi-Rong Sheu, and Jia-Sheng Lin, December 2010,
"Application of a coverage algorithm to a new architecture for wireless sensor networks,"
accepted and to appear in Proceedings of 2010 the National Symposium on
Telecommunications (NST 2010), December 3-4, 2010, Chang Gung University, Tao-Yuan,
Taiwan, R.O.C. (NSC 98-2221-E-224-028 & NSC 99-2221-E-025-011, 本計畫對此篇論文
之實際貢獻百分比約為 20%)
13
圖 6 分支度為 6 且 key{id}時，不同 CDS 演
算法之效能的比較
圖 7 分支度為 12 且 key{id}時，不同 CDS 演
算法之效能的比較
圖 8 分支度為 18 且 key{id}時，不同 CDS 演
算法之效能的比較
圖 9 分支度為 6 且 key{degree, id}時，不同
CDS 演算法之效能的比較
圖 10 分支度為 12 且 key{degree, id}時，不同
CDS 演算法之效能的比較
圖 11 分支度為 18 且 key{degree, id}時，不同
CDS 演算法之效能的比較
15
五. 計畫成果自評
(1) 本研究報告之內容為在無線網路上二個建立較小 CDS 之啟發式分散式演算法和一個 CDS 問題
之最佳集中式演算法，這與原計畫「無線網路上最小 CDS 之分散式演算法之研究」所規劃的預
期目標大致上是一致的。
(2) 在本研究報告所設計的 UR_DW 演算法和 UR_ED 演算法中，U 代表 unknown state，R 代表
round。就我們所知，這兩個觀念，unknown state 和 round，在目前 CDS 相關文獻中尚未被提
出。這是本研究計畫成果的特色和重點之一。
(3) 在本研究報告中，我們己以線性規劃為基礎為 CDS 問題設計一個 optimal MILP formulation 來
作為 CDS 問題之最佳集中式演算法。此 optimal CDS MILP formulation 可以用來檢視目前已有
之 CDS 啟發式演算法的實際誤差範圍以評估這些啟發式演算法的好壞。
(4) 本研究報告關於 UR_ED 演算法之內容己撰寫成一篇為 TANET 2010 所接受之研討會論文，此
可証明本研究計畫之成果具有學術價值。
(5) 關於本研究計畫之相關著作，敬請参閱參考文獻。
(6) 藉由此研究計畫，本研究計畫相關人員對無線網路之相關知識有更多更深的認識。這建立了本
研究計畫相關人員將來從事無線網路之更深學術研究的基礎。
2量可以被提高。也就是說，我們的繞送樹演算法可以提升網路的整體效能。電腦模擬結果顯示，我們
所提出之繞送樹演算法的效能比 IEEE 802.16 標準之繞送樹演算法和Hemyari等人之兩個繞送樹演算
法的效能還佳。
二、與會心得
這次參加在大陸深圳舉行的 2010 年國際通訊和行動計算會議是個人第一次參加在大陸舉行的
國際學術研討會。雖然祗有短短的幾天，但這次研討會給個人留下很深刻的印象和感想。首先，由
大陸深圳的建設，個人感受到大陸己具備一定程度的現代化，其在各方面的競爭力己不容輕忽。其
次，2010 年國際通訊和行動計算會議的参與者很多是來自大陸的大學。實事上，近年來，大陸學者
在國際學術舞台己愈來愈活躍。例如，近年來，在大陸舉行的國際學術研討會己有愈來愈多的趨勢。
因此，整體來說，由於大陸學術界的進步，近年來，台灣學術界面對的壓力與挑戰是愈來愈大。
近年來，無線網路己是網路與通訊領域中相當熱門且重要的研究主題之一，很多國家都有很多
的學者專家投入其中。藉由 2010 年國際通訊和行動計算會議，我們更可看出眾多大陸學者專家己在
多事無線網路的相關研究。為了提昇台灣學術界在無線網路方面的競爭力，個人認為國內學者專家
應再加強彼此的合作關係，例如，建立更多的跨系所合作與跨校合作，以形成更多的研究團隊，如
此應該可以強化台灣學術界在無線網路方面的競爭力。
三、考察參觀活動(無是項活動者略)
無
四、建議
無
五、攜回資料名稱及內容
(1) 大會論文集第三冊之紙本一冊，約 557 頁左右。論文集名稱為”2010 WRI International Conference
on Communications and Mobile Computing,Volumn III”。
(2) 大會論文集全冊之光碟一片。論文集名稱為”2010 WRI International Conference on
Communications and Mobile Computing”。
六、其他
(1) 此研討會之論文集己收錄在 IEEE Xplore。
(2) 此研討會之論文集己收錄在 Ei Compendex。
Transmission
Opportunity …TransmissionOpportunity TransmissionOpportunity …Minislot 1 Minislot 2 Minislot 256
16 256
time
Frame n+2Frame n+1Frame nFrame n-1
Control subframe Data subframe
 
Figure 3. The frame structure of IEEE 802.16 
mesh network. 
 
illustrated in Figure 3. The control subframe consists 
of 16 transmission opportunities and is used for trans-
ferring and managing the control packets that contain 
information related to scheduling and network configu-
rations. The data subframe is responsible to transfer 
user data packets. Each data subframe is divided into 
256 minislots. A scheduling scheme is to allocate the 
256 minislots to meet the requirement of all the SSs so 
that all of their packets can be delivered to the BS. 
According to the IEEE 802.16-2004 standard [4], 
there are two possible scheduling schemes in IEEE 
802.16 mesh networks: centralized and distributed 
scheduling schemes. Only the centralized scheduling 
scheme is considered in this paper. In the centralized 
scheduling scheme, all the transmission requests, traf-
fic scheduling, and routing paths are managed by the 
BS. Therefore, if a SS has packets to be transmitted, it 
must send a bandwidth request to the BS. The BS will 
allocate resources and schedule the packet transmis-
sions according to all the requests from each SS. 
Basically, a centralized scheduling scheme can be 
roughly separated into two phases. In the first phase, 
the BS will collect all the SSs’s bandwidth requests. 
Each SS will ask for uplink bandwidth through send-
ing the MSH-CSCH: Request packet to the BS. In the 
second phase, the BS first allocates uplink bandwidth 
according to the bandwidth requests from each SS. The 
BS then broadcast uplink bandwidth allocation infor-
mation to each SS through the MSH-CSCH: Grant 
packet.  
As the IEEE 802.16 mesh network is a wireless 
network, there always exist interferences among the 
transmissions of SSs [2], [5]. Therefore, it is obvious 
that the various numbers of simultaneously proceeded 
transmissions resulted from different kinds of interfer-
ence-aware scheduling schemes will significantly af-
fect the scheduling length, the channel utilization rate 
(CUR), and the system throughput. 
Generally speaking, in order to make each SS effi-
ciently propose its bandwidth request to the BS, and  
the BS also allocate bandwidth appropriately to each 
SS, the BS often converts the topology of the network 
into a tree structure. Figure 4 is an example. The root 
of the tree is the BS, which has a link to each SS adja-
cent to the BS. Each of the other SSs will also be a 
node in the tree. Each node in the routing tree is as-
signed a level number. In general, the level number of 
the BS is assigned 0. Then, the level number of a node 
is its hop count to the BS. Packets from each SS may 
be transmitted through the links of the tree, so the tree 
is named a routing tree. In general, a routing tree 
should reduce the interferences among SSs as much as 
possible, so that much more multiple SSs can transmit 
packets at the same time slot. 
In other words, a centralized scheduling scheme can 
be divided two main stages in practice. Firstly, the to-
pology of the network is transferred into a routing tree. 
Secondly, the minislots are allocated or scheduled to 
the nodes of the routing tree. For this reason, the cen-
tralized scheduling problem sometimes is also called 
the routing and packet scheduling (RPS) problem [5], 
which has become an important research issues in 
IEEE 802.16 mesh networks. In fact, there have ex-
isted many researches related to the RPS problem [2], 
[3], [5], [6], [7], [9], [10]. In this paper, we study the 
RPS problem and propose an efficient algorithm to 
solve it. In fact, we design an efficient centralized al-
gorithm to construct a routing tree that allows more 
concurrent transmissions to improve the network per-
formance.  
To sum up, in this paper, we design an efficient and 
interference-aware centralized routing tree algorithm  
 
v7
v6
v1
v11
v9
v5
v4
v2
v0
v10
v8
v3
 
(a) 
v0
v3
v5 v4 v8 v6v9
v7v10 v11
v1v2
 
(b) 
 
  Minislot 
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 
1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
2 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 
3 0 0 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 
4 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 
5 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 
6 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 
7 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
8 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 
9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
10 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
N
od
e 
id
  
11 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
(c) 
Figure 4. (a) A mesh network topology. (b) The 
routing tree established by the method pro-
posed in IEEE 802.16 standard. (c) A schedul-
ing table obtained by the nearest to BS policy. 
497
Authorized licensed use limited to: National Yunlin University of Technology. Downloaded on July 25,2010 at 08:48:03 UTC from IEEE Xplore.  Restrictions apply. 
3. Related Researches 
 
In this section, related researches are reviewed. To 
be more specific, three routing tree algorithms and two 
scheduling algorithms are presented. 
 
3.1. Routing Tree Algorithms 
 
Assume that the root of a network topology is the 
BS. The routing tree algorithm is to find a set of paths 
to send packets from each node to the BS with less 
interference. The criterion of choosing a parent node to 
establish a routing tree in the algorithm proposed in the 
IEEE 802.16 standard is the strength of signal. To 
minimize interference and ensures load balance, 
Hemyari et al. proposed two routing tree algorithms 
for building a routing tree [3]. We call them Hemyari’s 
first algorithm and Hemyari’s second algorithm, re-
spectively. In Hemyari’s first algorithm, five parame-
ters are considered for each node: (1) The number of 
child nodes. (2) The number of hops to BS. (3) The 
number of interferences resulted from the neighbors. (4) 
The number of packets to be sent. (5) The id of the 
node. In Hemyari’s second algorithm, only the last 
four parameters are taken into account. As an example, 
when Hemyari’s first and second algorithms are ap-
plied to the network in Figure 4(a), the resultant rout-
ing trees are shown in Figure 5(a) and 5(b), respec-
tively. 
 
3.2. Scheduling Algorithms 
 
In fact, the nearest to BS policy adopted in the ex-
ample in Figure 4 is involved in a scheduling algo-
rithm named Transmission-Tree Scheduling (TTS) 
algorithm [2]. To accomplish all the packet transmis-
sions with less minislots, a better centralized schedul-
ing scheme has been proposed in [6], which is named 
Enhanced Transmission-Tree Scheduling (ETTS) algo-
rithm. The main difference between the two algorithms 
is as follows. ETTS algorithm thinks that a node with 
larger node degree may have higher probability of 
transmitting packets, which implies that more other 
nodes may be interfered by such a high-degree node, 
and its transmission loads are heavier. Therefore, if 
this kind of nodes can send packets first, the entire 
network performance will be better. Thus, ETTS algo-
rithm adopts the largest node degree policy to allocate 
the minislots. On the other hand, similar to TTS, ETTS 
first chooses one node using its policy (if there exist 
multiple nodes with the same node degree, the one 
with the smallest id will be chosen) to start transmis-
sion, then mark interfered nodes, and then conduct  
v0
v3
v5 v4 v8 v6v9
v7v10 v11
v1v2
 
(a) 
v0
v3
v5 v4 v8 v6v9
v7v10 v11
v1v2
 
(b) 
Figure 5. (a) the routing tree established by 
Hemyari’s first algorithm. (b)The routing tree 
established by Hemyari’s second algorithm. 
 
those un-interfered nodes to send packets simultane-
ously. For each chosen node, the transmitter will de-
crease its number of packets by 1 while the receiver 
will increase its number of packets by 1. When there is 
no node that can transmit its queued packets, a round 
ends. The same procedure is repeated until the number 
of packets of each node is 0. 
 
4. An Efficient and Interference-Aware 
Centralized Routing Tree Algorithm 
 
After checking the ETTS algorithm, it can be found 
that if a node has more neighbors, the node may be-
come the bottleneck of the packet transmissions in the 
network. As a result, if a scheduling algorithm allows 
nodes with more neighbors to transmit their packets 
with higher priority, the chance of more other nodes 
transmitting packets at the same time will be increased, 
which in turn resulting a shorter scheduling length. 
Based on such an observation, we develop an efficient 
and interference-aware centralized routing tree algo-
rithm whose criterion of choosing a parent node for a 
node is the number of interferences associated with the 
node. For a node vi in a routing tree, its interference 
number is defined as degree(vi) − mi − 1, where mi de-
notes the number of neighbors of vi in the mesh net-
work but not in the current routing tree. Note that de-
gree(vi) is the node degree of vi in the mesh network. 
Before describing our algorithm in detail, let us 
state some assumptions and definitions. Firstly, our 
algorithm adopts the transmission-constraint model 
and the assumptions given in Section 2. Secondly, each 
node is assigned a unique id that is an integer. Thirdly, 
our algorithm is executed at the BS and only one node 
is considered each time.  
Our algorithm consists of the following steps:  
Step 1: Let i = 0 and v0 be the root; 
Step 2: i = i + 1; hop-count = 0; 
Step 3: Compute the set pi of the neighbors of node vi 
whose distance to the BS being equal to hop-
499
Authorized licensed use limited to: National Yunlin University of Technology. Downloaded on July 25,2010 at 08:48:03 UTC from IEEE Xplore.  Restrictions apply. 
  Minislot 
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 
1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 
2 0 1 0 1 1 0 0 0 1 0 1 0 0 0 
3 0 0 0 0 0 0 1 0 0 0 0 1 0 1 
4 1 0 0 0 0 0 0 1 0 0 0 0 0 0 
5 0 0 1 0 0 0 0 0 0 1 0 0 0 0 
6 0 1 0 0 1 0 0 0 0 0 0 0 0 0 
7 0 0 0 1 0 0 0 0 0 0 0 0 0 0 
8 0 0 0 0 0 0 0 0 0 1 0 0 0 0 
9 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
10 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
N
od
e 
id
 
11 0 0 0 0 0 0 1 0 0 0 0 0 0 0 
(a) 
 
  Minislot 
  1 2 3 4 5 6 7 8 9 10 11 12 13 1 0 0 1 0 0 0 0 1 0 0 1 0 0 
2 0 0 0 0 1 1 1 0 0 1 0 0 1 
3 1 0 0 1 0 0 0 0 1 0 0 0 0 
4 0 1 0 0 0 0 0 0 0 0 0 1 0 
5 0 0 1 0 0 0 0 1 0 0 0 0 0 
6 0 1 0 0 0 1 0 0 0 0 0 0 0 
7 0 0 0 0 1 0 0 0 0 0 0 0 0 
8 0 0 0 0 0 0 0 1 0 0 0 0 0 
9 0 0 1 0 0 0 0 0 0 0 0 0 0 
10 0 0 0 0 0 0 0 0 0 0 1 0 0 
N
od
e 
id
 
11 1 0 0 0 0 0 1 0 0 0 0 0 0 
(b) 
Figure 8. (a) The scheduling table obtained by 
Hemyari’s first algorithm+TTS algorithm. (b) 
The scheduling table obtained by Hemyari’s 
first algorithm+ETTS algorithm. 
 
  Minislot 
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 
2 0 1 0 1 1 0 0 1 0 0 1 0 0 0 
3 0 0 0 0 0 1 0 0 1 0 0 1 0 1 
4 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
5 0 0 1 0 0 0 1 0 0 1 0 0 0 0 
6 0 1 0 0 0 0 0 0 0 0 0 0 0 0 
7 1 0 0 0 0 0 0 0 0 0 0 0 0 0 
8 0 0 0 0 0 0 1 0 0 1 0 0 0 0 
9 0 0 0 0 0 0 0 0 0 0 0 0 1 0 
10 0 0 0 0 0 1 0 0 0 0 0 0 0 0 
N
od
e 
id
 
11 0 0 0 0 0 0 0 0 1 0 0 0 0 0 
(a) 
 
  Minislot 
  1 2 3 4 5 6 7 8 9 10 11 12 13 1 0 0 1 0 0 0 0 1 0 0 0 0 0 
2 0 0 0 0 1 1 1 0 0 1 0 0 1 
3 1 0 0 1 0 0 0 0 1 0 0 1 0 
4 0 1 0 0 0 0 0 0 0 0 0 0 0 
5 0 0 1 0 0 0 0 1 0 0 1 0 0 
6 0 1 0 0 0 0 0 0 0 0 0 0 0 
7 0 0 0 0 1 0 0 0 0 0 0 0 0 
8 0 0 0 0 0 0 0 1 0 0 1 0 0 
9 0 0 1 0 0 0 0 0 0 0 0 0 0 
10 1 0 0 0 0 0 0 0 0 0 0 0 0 
N
od
e 
id
  
11 0 0 0 1 0 0 0 0 0 0 0 0 0 
(b) 
Figure 9. (a) The scheduling table obtained by 
Hemyari’s second algorithm + TTS algorithm. 
(b) The scheduling table obtained by 
Hemyari’s second algorithm + ETTS algorithm. 
  Minislot 
  1 2 3 4 5 6 7 8 9 10 11 12 13 1 1 0 1 0 0 1 0 0 0 0 0 0 0 
2 0 1 0 1 1 0 0 0 1 0 0 1 0 
3 0 0 0 0 0 0 1 0 0 1 0 0 1 
4 1 0 0 0 0 0 0 0 0 0 0 0 0 
5 0 0 1 0 0 0 0 1 0 0 1 0 0 
6 0 1 0 0 1 0 0 0 0 0 0 0 0 
7 0 0 0 1 0 0 0 0 0 0 0 0 0 
8 0 0 0 0 0 0 0 1 0 0 0 0 0 
9 0 0 0 0 0 0 0 0 0 0 1 0 0 
10 0 0 0 0 0 1 0 0 0 0 0 0 0 
N
od
e 
id
 
11 0 0 0 0 0 0 1 0 0 0 0 0 0 
(a) 
 
  Minislot 
  1 2 3 4 5 6 7 8 9 10 11 12 1 0 0 1 0 0 0 0 1 0 0 1 0 
2 0 0 0 0 1 1 1 0 0 1 0 1 
3 1 0 0 1 0 0 0 0 1 0 0 0 
4 0 1 0 0 0 0 0 0 0 0 0 0 
5 0 0 1 0 0 0 0 1 0 0 1 0 
6 0 1 0 0 0 1 0 0 0 0 0 0 
7 0 0 0 0 1 0 0 0 0 0 0 0 
8 0 0 0 0 0 0 0 1 0 0 0 0 
9 0 0 1 0 0 0 0 0 0 0 0 0 
10 1 0 0 0 0 0 0 0 0 0 0 0 
N
od
e 
id
 
11 0 0 0 1 0 0 0 0 0 0 0 0 
(b) 
Figure 10. (a) The scheduling table obtained 
by our algorithm + TTS algorithm. (b) The 
scheduling table obtained by our algorithm +  
ETTS algorithm. 
 
5. Computer Simulations 
 
In this section, through computer simulations, we 
examine the efficiency of our routing tree algorithm 
and three other algorithms: IEEE 802.16 standard algo-
rithm, Hemyari’s first algorithm, and Hemyari’s sec-
ond algorithm. The efficiency is evaluated in terms of 
the number of minislots, CUR, and the system 
throughput. CUR is defined to be the value = the total 
minislots used by all the nodes to transmit packets / 
(the number of nodes × the number of minislots). Sys-
tem throughput is defined to be the value = the total 
number of the packets transmitted by all nodes / the 
length of minislots. 
In the computer simulation, our hardware is a PC 
with two Intel® Pentium® IV CPU runs at 3.40GHz 
and 1014MB RAM. In software aspect, we use C pro-
gramming language. The environment of our computer 
simulations is assumed to be a static network topology 
conducted in a 100 × 100 m2 two-dimensional free 
space. The nodes are randomly allocated in such an 
area, with the number of nodes ranging from 5 to 120 
at a gap of 5. The radius of transmission range of each 
node is the same and assumed to be 20 m. Thus, there 
exists a bidirectional link between a pair of nodes if 
their distance is equal to or less than 20 m. Each node 
501
Authorized licensed use limited to: National Yunlin University of Technology. Downloaded on July 25,2010 at 08:48:03 UTC from IEEE Xplore.  Restrictions apply. 
 Table 3. A comparison on system throughput. 
 TTS ETTS 
Packet 
Algorithm 1~10 1~10 
IEEE 802.16 standard 86.13%   88.41%
Hemyari’s first algorithm 92.13%   95.06%
Hemyari’s first algorithm 93.55%   96.31%
Our algorithm 97.56% 100.00%
 
our routing tree algorithm can even achieve 11.59%, 
4.94%, and 3.69% increase in the system throughput, 
respectively. 
 
6. Conclusions 
 
In this paper, based on the observation at the 
ETTS algorithm, we have proposed a new routing tree 
algorithm for IEEE 802.16 mesh network. Compared 
with the routing tree algorithms proposed by Hemyari 
et al., our algorithm is simpler and more efficient. 
Simulation results demonstrate that working with ei-
ther TTS algorithm or ETTS algorithm, our algorithm 
can effectively reduce the scheduling length, increase 
CUR, and improve the system throughput. Compared 
with the routing tree algorithms proposed by the IEEE 
802.16 standard and Hemyari et al., our interference-
aware centralized routing tree algorithm has better per-
formance on not only scheduling length but also CUR 
and system throughput.  
 
Acknowledgements 
 
This work was supported in part by the National 
Science Council of the Republic of China under Grant 
No. NSC 98-2221-E-224-028. 
 
References 
 
[1] H. Bölcskel, A. Paulraj, K. V. S. Hari, R. Nabar, and W. 
Lu, “Fixed Broadband Wireless Access: State of the Art, 
Challenges, and Future Directions,” IEEE Communications 
Magazine, vol. 39, no. 1, January 2001, pp. 100–108. 
 
[2] B. Han, W. Jia, and L. Lin, “Performance Evaluation of 
Scheduling in IEEE 802.16 Based Wireless Mesh Net-
works,” Computer Communications, vol. 30, no. 4, February 
2007, pp. 782-792. 
 
[3] A. A. Hemyari, N. K. Noordin, A. Ismail, S. Khatun, Y. 
H. Tahir, and Y. A.  Qassem, “Centralized Scheduling, Rout-
ing Tree in WiMAX Mesh Networks,” Proceedings of the 
International Conference on Innovations in Information 
Technology (IIT 2008), December 2008, pp. 539-543. 
 
[4] IEEE Std. 802.16-2004, IEEE Standard for Local and 
Metropolitan Area Networks--Part 16: Air Interface for 
Fixed Broadband Wireless Access Systems, October 2004. 
 
[5] F. Jin, A. Arora, J. Hwang, and H. A. Choi, “Routing and 
Packet Scheduling in WiMAX Mesh Networks,” Proceed-
ings of the 4th International Conference on Broadband 
Communications, Networks and Systems (BROADNETS 
2007), September 2007, pp. 574-582. 
 
[6] K. P. Shih, H. C. Chen, C. T. Chiang, P. Y. Lin, and J. F. 
Huang, “An Interference-Aware Centralized Scheduling in 
IEEE 802.16 Wireless Mesh Networks,” Proceedings of the 
National Symposium on Telecommunications, December 
2008, pp. 1480-1484. 
 
[7] J. Tao, F. Liu, Z. Zeng, and Z. Lin, “Throughput En-
hancement in WiMAX Mesh Networks Using Concurrent 
Transmission,” Proceedings of the International Conference 
on Wireless Communications, Networking and Mobile Com-
puting (WCNM), vol. 2, September 2005, pp. 871–874.  
 
[8] W. Webb, “Broadband Fixed Wireless Access as a Key 
Component of the Future Integrated Communications Envi-
ronment,” IEEE Communications Magazine, vol. 39, no. 9, 
September 2001, pp. 115–121. 
 
[9] H. Y. Wei, S. Ganguly, R. Izmailov, and Z. J. Haas, “In-
terference-Aware IEEE 802.16 WiMAX Mesh Networks,” 
Proceedings of the IEEE Vehicular Technology Conference 
(VTC), vol. 5, May 2005, pp. 3102–3106. 
 
[10] Y. J. Xu, Z. T. Li, X. F. Zhong, and H. M. Xu, “A 
Bandwidth Scheduling Algorithm Based on Minimum Inter-
ference Traffic in Mesh Mode,” Proceedings of the Interna-
tional Conference on Wireless Communications, Networking 
and Mobile Computing (WiCom 2007), September 2007, pp. 
822-825. 
 
 
503
Authorized licensed use limited to: National Yunlin University of Technology. Downloaded on July 25,2010 at 08:48:03 UTC from IEEE Xplore.  Restrictions apply. 
98年度專題研究計畫研究成果彙整表 
計畫主持人：許丕榮 計畫編號：98-2221-E-224-028- 
計畫名稱：無線網路上最小 CDS 之分散式演算法之研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 0%  
研究報告/技術報告 1 1 100%  
研討會論文 1 1 100% 
篇 其它相關之研討
會論文，敬請参考
成果報告中之参
考文獻。 
論文著作 
專書 0 0 0%   
申請中件數 0 0 0%  專利 已獲得件數 0 0 0% 件  
件數 0 0 0% 件  
技術移轉 
權利金 0 0 0% 千元  
碩士生 7 7 100%  
博士生 0 0 0%  
博士後研究員 0 0 0%  
國內 
參與計畫人力 
（本國籍） 
專任助理 1 1 0% 
人次 
此專任助理是由
教育部「培育優質
人力促進就業計
畫」大專校院研究
人才延攬方案所
聘任 
期刊論文 0 0 0%  
研究報告/技術報告 0 0 0%  
研討會論文 1 1 70% 
篇 
 
論文著作 
專書 0 0 0% 章/本  
申請中件數 0 0 0%  專利 已獲得件數 0 0 0% 件  
件數 0 0 0% 件  
技術移轉 
權利金 0 0 0% 千元  
碩士生 0 0 0%  
博士生 0 0 0%  
博士後研究員 0 0 0%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 0% 
人次 
 
 
