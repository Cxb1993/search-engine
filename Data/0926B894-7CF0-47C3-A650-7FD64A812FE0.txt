 2
行政院國家科學委員會專題研究計畫成果報告 
 
計畫編號：NSC 99-2221-E-006-123 
執行期限：99 年 08 月 01 日至 100 年 07 月 31 日 
主持人：侯廷偉       
計畫參與人員：林錦陽, 陳國益, 馬天彥, 蔡淳宇, 陳志杰 
執行機構及單位名稱：成功大學 工程科學系 
 
中文摘要 
本計劃旨在探討網路應用程式在應用程
式伺服器平台的節能省電機會。在保持網路
應用程式的執行效能之前提下，藉由精確的
CPU 頻率管理達到減少應用程式伺服器能源
耗用之目的。本研究提出一新穎的省電方
式。利用應用程式伺服器的核心軟體元件
Java 虛擬機器(JVM)在執行期間所產生的動
態資訊，精確判斷應用程式伺服器的狀態，
並據此調整 CPU 的電壓及頻率，同時達到省
電與維持伺服器執行效能之目的。經實驗驗
證，所提出之方法可節省約 14–23%的耗
電，同時仍保有 96%的伺服器執行效能。此
一研究結果證明所提出的新穎省電方法確實
可有效解決應用程式伺服器的耗能問題。 
 
關鍵詞：節能省電, 應用程式伺服器, Java 虛
擬機器, 多核心處理器 
 
Abstract 
The research goal of this study is to 
develop a new power-saving strategy of the 
application server with the minimum 
performance degradation. Our motivation is to 
develop a new power-saving strategy which is 
based on the Java virtual machine (JVM), the 
base software component of application servers. 
The experimental results show that the phases 
of an application server are related to the 
run-time information of a JVM. With the 
run-time information of a JVM, the voltage of 
processors can be adjusted precisely to match 
the demand of an application server. Thus the 
energy wastage can be reduced with well 
performance maintenance. Our experimental 
results show that the proposed power-saving 
approach saves 14% to 23% energy with only 
4% performance degradation. Compared to 
other approaches based on performance 
monitors, the power-saving approach proposed 
in this project is more efficient.  
Keywords: Energy-efficiency, Application 
server, Java Virtual Machine, Multi-core 
processor 
 
1. Introduction 
With the trend of energy saving and 
carbon reduction, the energy wastage of the 
long-running application server is becoming an 
important issue. For example, while application 
servers tend to co-locate at data centers, the 
annual data center energy consumption in US is 
estimated to grow to over 100 billion kWh at a 
cost of $7.4 billion by 2011 [1]. 
In order to reduce power consumption of a 
long-running application server, the energy 
wastage of processors is highlighted, since the 
CPU consumes much more energy than other 
hardware components [2]. The Dynamic 
Voltage and Frequency Scaling (DVFS) 
technique is available in modern processors [3]. 
Many studies use the DVFS technique to adjust 
processor voltage and frequency to reduce 
 4
power-levels are inserted into binary codes of 
applications based on the offline profiling. 
However, the additional profiling work 
leads to the unavoidable overhead. In addition, 
the compiler-directed profiling only works with 
a single application at a time. It leads to either 
less efficiency or great overheads of profiling 
approaches in multi-tasking and multi-cores 
systems. Instead of the additional work of the 
profiling, our approaches use the run-time 
information which is already available in 
virtual machines. Thus the overheads of phase 
detections could be limited. 
On the other hand, the phase detection by 
performance monitors is widely used in 
industries and researches. The information of 
performance monitors can be observed by the 
run-time statistics, built-in hardware registers 
and external sensors. The use of run-time 
statistics [18-21], such as the processor usage, 
is a popular approach to reduce energy wastage. 
Some studies use performance counters, a set of 
built-in registers of CPUs, to detect the phase 
and adjust the power-level [22, 23]. 
In addition, the use of external sensors, 
such as the thermal probe, to observe the heat 
generation and adjust the power-level is also a 
popular approach [24-26]. Some studies use a 
group of hardware registers, such as the 
numbers of stall cycles and retired instructions, 
to detect the phase and adjust the power-level 
[27-29]. Moreover, some studies use the 
information of hardware registers to improve 
task scheduling, and reach the goal of 
power-saving [30, 31].  
Since the variations of performance 
monitors can only be observed after the phase 
is changed, the possibility of energy wastage 
and performance degradations could be 
remained by this approach. In order to eliminate 
this possibility, the beforehand phase detection 
is proposed. The phases could be observed 
precisely by the run-time information already 
available in a JVM, before they actually change. 
The precise information of phases could be 
used to adjust appropriate frequencies, and then 
reduce the most of energy wastage with 
performance maintenance. 
3. Methodology 
The backgrounds are described in this 
section. Then, the methodology is presented. 
3.1 Backgrounds 
In order to reach the requirements of 
security and portability, modern web 
applications are usually hosted on the 
application server with Java technique. The 
application server can be considered as a 
container of various types of web applications. 
The web applications use application servers as 
an interface to communicate with external 
resources, such as the hardware, network and 
databases. 
Many advantages of application servers 
are observed. For example, the integrity of data 
and code of web applications can be guaranteed. 
The centralized configuration leads to efficient 
management and the security benefit of central 
access control for the administrator. The 
advantages above result in the reduction of total 
cost of ownership and well transaction support 
for developers. 
The structure of an application server is 
shown in Figure 1. The libraries of Java 2 
Enterprise Edition (J2EE) provide the support 
for web applications. In addition, the Java 
Virtual Machine (JVM) of Java 2 Standard 
Edition (J2SE) is used to interpret the bytecode 
of web applications to machine codes. It is 
worth noting that an application server is 
 6
better opportunity for efficiently determining 
the memory phase of the server at runtime. First, 
the garbage collector, as such, is dedicated to 
the memory analysis and optimization. Second, 
the collector and the mutator are typically 
mutually-exclusive (i.e. non-overlapping); that 
is, the GC phase (i.e. the execution period of 
GC) would not be interfered with by the 
mutator behavior. Also, the server is based on 
the architecture where all applications are 
executed on a single JVM instance. 
Based on these facts, a reasonable 
hypothesis would be that the GC phase of a 
server implies the memory phase. Technically, 
since the JVM can identify all the GC phases at 
runtime, the correct timing to lower the CPU 
frequencies of the device can be determined 
naturally, thus achieving the power-saving goal. 
Under this concept, the mutation phase would 
be referred to as the execution phase. 
To further support this hypothesis, we 
conduct the following experiment. Two Java 
benchmarks, Sunflow and Eclipse, from the 
Dacapo benchmark suite are used. A special 
measure called Stall Cycle Per Instruction 
(SCPI) is employed (tracked) to analyze the 
phases of the applications (benchmarks). The 
SCPI is defined as follows: 
 
where Mem_Stall and Instr_Ret are both the 
built into hardware events. Instr_Ret stands for 
the number of instructions retired. Mem_Stall 
represents the number of the stalled cycles, 
which reflects the time the CPU needs to wait 
for the required input data from memory. 
In this experiment, a low value of SCPI is 
used to indicate an execution phase, since it 
implies a high CPU workload. On the other 
hand, a high value of SCPI is used to signify a 
memory phase, which normally implies the 
CPU waiting for memory requests and actually 
the timing to lower the CPU frequencies.  
Figure 3 and Figure 4, respectively, show 
the experimental results for the benchmarks 
Eclipse and Sunflow, where the SCPI values 
and the GC periods are plotted. Here, each GC 
period (or GC phase) stands for an engaged 
period of GC, and the disengaged periods of 
GC can be viewed as the mutation phases. 
 
Figure 3. The SCPI statistics of Eclipse  
 
Figure 4. The SCPI statistics of Sunflow  
It could be observed that the SCPI values 
of the mutation phases vary greatly and are very 
instable. That is because the workload in the 
mutation phase actually refers to the application 
Instr_Ret
Mem_Stall
=SCPI
 8
The former corresponds to the timing 
informing module, which is added for 
observing and gathering the required GC 
information, e.g. the timing information about 
the start and the end of a GC phase. The latter 
is realized by the frequency adjustment module, 
which is embedded in the kernel for efficiently 
adjusting the CPU frequencies (as requested). 
All the requests are from the timing informing 
module. It is also worth noting that the 
frequency adjustment module includes in-line 
assembly codes that can directly adjust CPU 
frequencies by accessing some particular 
registers of the CPU. Thus, compared with the 
method based on user-level calls, the way we 
adjust CPU frequencies is more efficient; the 
required CPU cycles for the frequency 
adjustment are minimized. 
In addition, the power-saving approach 
brings two advantages, in comparison with the 
traditional methods. The first is the reliable 
phase identification, which, as described earlier, 
is simply because of the nature of the garbage 
collection (i.e. the memory phase). As we have 
seen in the previous experiment (Figure 3 and 
Figure 4), each of the GC phases always 
reflects a memory-intensive period. Therefore, 
our approach can avoid the inappropriate 
adjustment of the CPU frequencies. It should be 
noted that lowering the CPU frequencies in an 
execution phase (i.e. mutation phase) could 
degrade the overall system performance. For 
those methods based on profiling or PM, an 
inappropriate frequency adjustment may occur 
due to an inaccurate phase detection, thereby 
causing unnecessary performance degradation 
and energy wastage. 
The second advantage of the proposed 
approach is that the overhead of the phase 
identification/detection is quite low. In fact, 
most of the power-saving approaches require 
the phase identification, and this usually has a 
negative impact on the system performance, e.g. 
the additional profiling work. Since the phase 
identification of our approach is entirely based 
on the runtime information already available in 
the JVM, the overhead can be minimized. 
5. Experimental results 
In order to validate the power-efficiency 
of the proposed power-saving approach, the 
following experiments are conducted. All the 
measurements are based on a server with the 
Q6800 processor, a Quad-Core Intel CPU. The 
frequency of each core is allowed to be adjusted 
independently from 1.7 to 2.9 GHz. The Fedora 
Core 14 with kernel version 2.6.35 and Sun's 
Java System Application Server 9.1, are used in 
the experiments.  
In addition, a state-of-the-art Hotspot 
JVM, shipped with OpenJDK 1.7, is used in the 
experiments. The GC configuration is entirely 
based on the default settings in the HotSpot 
JVM, in which the used garbage collector is a 
generational garbage collector. The 
garbage-collected space is divided into two 
generations, the young generation and the 
tenured generation. The copying collector is 
used in the young generation. The young 
generation is optimized for those objects with a 
short lifetime. After several collections, the 
survived objects are moved to the tenured 
generation since these objects have a longer 
lifetime. In the tenured generation, the 
mark-sweep-compact collector is used to 
collect the garbage concurrently. 
In the experiments, the measurement of 
CPU power consumption is critical. A widely 
used dynamic power measurement of CMOS 
circuits is used in this study. The dynamic 
 10
 
Figure 7. The performance comparison 
 
Figure 8. The power consumption comparison 
 
Figure 9. The energy-delay product comparison 
  
Avrora Batik Eclipse Fop H2 Jython Luindex Lusearch Pmd Sunflow Tomcat Tradebeans Tradesoap Xalan
0.0
0.2
0.4
0.6
0.8
1.0
1.2
Pe
rfo
rm
an
ce
 
(N
o
rm
a
liz
ed
)
Dacapo Benchmarks
 max-frequency   min-frequency    OSGi power-saving   ondemand   conservative
Avrora Batik Eclipse Fop H2 Jython Luindex Lusearch Pmd Sunflow Tomcat Tradebeans Tradesoap Xalan
0.0
0.2
0.4
0.6
0.8
1.0
1.2
1.4  max-frequency   min-frequency    OSGi power-saving   ondemand   conservative
Po
w
er
 
co
n
su
m
pt
io
n
 
(N
o
rm
a
liz
e
d)
Dacapo Benchmarks
Avrora Batik Eclipse Fop H2 Jython Luindex Lusearch Pmd Sunflow Tomcat Tradebeans Tradesoap Xalan
0.0
0.2
0.4
0.6
0.8
1.0
1.4
1.6
1.8
2.0
2.2
2.4
2.6
 max-frequency   min-frequency    OSGi power-saving   ondemand   conservative
En
e
rg
y-
de
la
y 
Pr
o
du
ct
 
(N
o
rm
a
liz
e
d)
Dacapo Benchmarks
 12
is also based on the GVM power saving method 
and has been published in an international 
conference [32] (EI). Recently, we have been 
preparing a paper that totally reflects the 
research results of this project. The paper is 
entitled “GVM, a Power-Efficient Green Java 
Virtual Machine” and will be submitted to 
IEEE Transactions on Computers (SCI). In 
addition, a doctoral dissertation, Toward a 
Green (Java) Virtual Machine, the 
Power-Efficient Technique for Application 
Servers [33] is also published during the course 
of this project. Overall, the key objectives of 
this project have been met and exceeded.  
 
References 
[1] K. G. Brill, "Data center energy efficiency and 
productivity," White Paper,(The Uptime 
Institute), 2007. 
[2] R. Bianchini and R. Rajamony, "Power and 
energy management for server systems," 
Computer, vol. 37, pp. 68-76, 2004. 
[3] S. Herbert and D. Marculescu, "Analysis of 
dynamic voltage/frequency scaling in 
chip-multiprocessors," presented at the 
Proceedings of the 2007 international 
symposium on Low power electronics and 
design, Portland, OR, USA, 2007. 
[4] C. Isci, et al., "Long-term workload phases: 
Duration predictions and applications to 
DVFS," Micro, IEEE, vol. 25, pp. 39-51, 2005. 
[5] W. Fornaciari, et al., "Power optimization of 
system-level address buses based on software 
profiling," presented at the Proceedings of the 
eighth international workshop on 
Hardware/software codesign, San Diego, 
California, United States, 2000. 
[6] T. Sherwood, et al., "Phase tracking and 
prediction," SIGARCH Comput. Archit. News, 
vol. 31, pp. 336-349, 2003. 
[7] J. R. Lorch and A. J. Smith, "Improving 
dynamic voltage scaling algorithms with 
PACE," 2001, pp. 50-61. 
[8] H. Aydin, et al., "Dynamic and aggressive 
scheduling techniques for power-aware 
real-time systems," 2001, p. 95. 
[9] P. Pillai and K. G. Shin, "Real-time dynamic 
voltage scaling for low-power embedded 
operating systems," 2001, pp. 89-102. 
[10] M. Weiser, et al., "Scheduling for reduced CPU 
energy," Mobile Computing, pp. 449-471, 1996. 
[11] T. D. Burd and R. W. Brodersen, "Energy 
efficient CMOS microprocessor design," 1995, 
p. 288. 
[12] J. Pouwelse, et al., "Dynamic voltage scaling on 
a low-power microprocessor," presented at the 
Proceedings of the 7th annual international 
conference on Mobile computing and 
networking, Rome, Italy, 2001. 
[13] K. Flautner, et al., "Automatic performance 
setting for dynamic voltage scaling," Wireless 
networks, vol. 8, pp. 507-520, 2002. 
[14] V. Delaluz, et al., "Dram energy management 
using sof ware and hardware directed power 
mode control," in 7th international conference 
on high performance computer architecture, 
2001, p. 0159. 
[15] D. Mosse, et al., "Compiler-assisted dynamic 
power-aware scheduling for real-time 
applications," in Workshop on Compilers and 
Operating Systems for Low-Power, 2000. 
[16] C. H. Hsu, et al., "Compiler-directed dynamic 
frequency and voltage scheduling," 
Power-Aware Computer Systems, pp. 65-81, 
2001. 
[17] C. H. Hsu and U. Kremer, "The design, 
implementation, and evaluation of a compiler 
algorithm for CPU energy reduction," ACM 
SIGPLAN Notices, vol. 38, pp. 38-48, 2003. 
[18] R. Ge, et al., "Cpu miser: A 
performance-directed, run-time system for 
power-aware clusters," Proc. International 
Conference on Parallel Processing, pp. 18-26, 
2007. 
[19] X. Wang, et al., "Power-aware CPU utilization 
control for distributed real-time systems," in 
Proceedings of the 2009 15th IEEE Real-Time 
and Embedded Technology and Applications 
Symposium, 2009, pp. 233-242. 
[20] S. Rivoire, et al., "A comparison of high-level 
full-system power models," presented at the 
Proceedings of the 2008 conference on Power 
aware computing and systems, San Diego, 
California, 2008. 
[21] N. E. Pettis and Y. H. Lu, "A homogeneous 
architecture for power policy integration in 
operating systems," IEEE Transactions on 
Computers, pp. 945-955, 2008. 
[22] M. Curtis-Maury, et al., "Identifying 
energy-efficient concurrency levels using 
machine learning," presented at the Proceedings 
of the 2007 IEEE International Conference on 
Cluster Computing, 2007. 
[23] A. Merkel and F. Bellosa, "Balancing power 
consumption in multiprocessor systems," ACM 
SIGOPS Operating Systems Review, vol. 40, pp. 
403-414, 2006. 
[24] F. J. Mesa-Martinez, et al., "Power model 
validation through thermal measurements," 
SIGARCH Comput. Archit. News, vol. 35, pp. 
302-311, 2007. 
[25] R. Rao, et al., "Throughput of multi-core 
processors under thermal constraints," presented 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
日期： 100  年 6 月 31  日 
 
一、參加會議經過 
此次會議是機器學習與計算國際會議在2010於新加坡Quality飯店舉
辦，此次會議提供了研究者、工程師、學術工作者和各行各業的專家
們一個在機器學習與計算的平台來分享其研究成果，會議期間為
9/7-11/7，開幕式由大會主席報告，並介紹與會貴賓，本次大會邀請
了3位IEEE院士Jacek M. Zurada、Jacek M. Zurada和Wang Jun發表
演說，所有會議論文分別於18個會議場次宣講，本次發表的論文安排
計畫編號 99-2221-E-006-123- 
計畫名稱 節能省電之 Java 虛擬機器 (GVM) 
出國人員
姓名 
陳富國 
(計畫共同主持人) 
服務機構
及職稱 
弘光科技大學資訊
管理系助理教授 
會議時間 100 年 2 月 26 日~100 年 2 月 28 日 會議地點 Singapore 
會議名稱 
2011 3rd International Conference on Machine 
Learning and Computing (ICMLC 2011) 
發表論文
題目 
Inductive Learning of Information Security Course 
by Robot Assistant 
附錄一、研討會照片 
 
 
 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/07/12
國科會補助計畫
計畫名稱: 節能省電之Java 虛擬機器 (GVM)
計畫主持人: 侯廷偉
計畫編號: 99-2221-E-006-123- 學門領域: 計算機結構與計算機系統
無研發成果推廣資料
博士後研究員 1 1 100%  
專任助理 0 0 100%  
期刊論文 1 0 100% 
Chin-Yang Lin and 
Ting-Wei Hou, ＇An 
Efficient Approach to 
Cyclic Reference 
Counting Based on a 
Coarse-Grained 
Search,＇ Information 
Processing Letters, 
volume 111, issue 1, pp. 
1-10, December 15, 
2010. (SCI) 
國外 論文著作 
研究報告 /技術報
告 0 0 100% 
篇 
 
碩士生 2 2 100%  
博士生 2 2 100%  
博士後研究員 1 1 100%  
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
其他成果 
(無法以量化表達之
成果如辦理學術活
動、獲得獎項、重要
國際合作、研究成果
國際影響力及其他
協助產業技術發展
之 具 體 效 益 事 項
等，請以文字敘述填
列。) 
1. 此論文獲大會頒發 佳作論文獎: Chin-Yang Lin, Ting-Wei Hou and Chih-Wei 
Hsu, ＇Study and Porting Text To Speech Engine for Android Platform,＇
Proceedings of 2011 Symposium on Digital Life Technologies (DLT-2011), 
July 7-8, 2011.  
 
2. 博士論文產出: 陳國益, 基於 Java 虛擬機器的應用程式伺服器之省電技術
(2011 成功大學)  
 
3. 除了上述已經發表之論文外，另有: 
#. 審稿中論文(1 篇): ＇A Power-saving Technique for the OSGi Platform＇, 
submitted for publication in IEICE Transactions on Information and 
Systems. (SCI) - 此論文將 GVM 省電技術延伸至 OSGi Middleware  
#. 撰寫中論文(1 篇 約 8 成完整度):  ＇GVM, a Power-Efficient Green Java 
Virtual Machine＇； 預計投往 IEEE Transactions on Computers (SCI) 
 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100 字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100 字為限） 
計畫(含進行中)成果: 1.已發表 1篇:發表於 ICMEE 2010 (EI)； 2.成大博士論文:基於
Java 虛擬機器的應用程式伺服器之省電技術； 3.審稿中 1篇:投往 IEICE(SCI)； 4.撰寫中 1
篇:8 成完整度,預計投往 IEEE Transactions on Computers(SCI) 
