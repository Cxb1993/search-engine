2 
 
無線廣播境中空間資料存取機制之設計 
 Design of Spatial Data Access Mechanisms in the Wireless Broadcast 
Environment 
 
計畫編號：NSC99-2218-E-468-003 
執行期限： 99 年 2 月 1 日至 99 年 10 月 31 日 
主持人：沈俊宏    亞洲大學資訊傳播學系 
 
(關鍵詞：與位置相關的空間查詢，空間索
引，無線資料廣播) 
在無線資料廣播環境中，與位置相關的空
間查詢為行動使用者依據目前所在位置查
詢相關的空間物件。視窗查詢是一種重要
的空間查詢，此查詢會找出指定視窗範圍
內所有的空間物件。傳統的空間索引結構
是針對磁碟上可任意存取而設計，並不能
直接套用於線性存取的無線廣播空間資料，
來達到有效率地存取。在這個計畫裡，我
們提出一個以 Hilbert-curve 為基礎的索
引方法，來有效地處理無線資料廣播系統
上的視窗查詢。為了保留空間資料的區域
性，我們將空間資料以 Hilbert-curve 的編
排順序依序播放於無線頻道上。經由我們
的觀察，視窗查詢的結果物件集中，空間
物件可能彼此互為鄰居。為了快速找到指
定視窗範圍內的空間物件，我們建立索引
結構，提供空間物件週遭附近之空間物件
的資訊，來加速處理查詢過程。 
(Key Words: Location-dependent spatial 
query, spatial index, wireless data broadcast) 
Location-dependent spatial query in the 
wireless data broadcast environment is that 
mobile users query the spatial objects de-
pendent on their current location. The win-
dow query is one of the essential spatial 
queries, which finds spatial objects located 
within a given window. Traditional spatial 
indexes are designed for disks with random 
access. They cannot be directly applied to 
the wireless broadcast spatial data with the 
linear access to support efficient access.  In 
this project, we propose a Hilbert 
curve-based index for efficiently processing 
window queries in the wireless data broad-
cast systems. To preserve the spatial locality, 
we allocate spatial objects on the wireless 
channel in the Hilbert-curve order. From our 
observation, the answered objects of the 
window queries may be the neighbors of 
each other. To quickly answer window que-
ries, we construct an index that provides the 
information about neighbors of the spatial 
object to speed up the query processing.  
二、緣由與目的 
無線資料廣播是一種有效同時傳送資訊給
眾多行動使用者的機制。利用無線資料廣
播傳送空間資料來支援與位置相關的空間
查詢 (location-dependent spatial query ，
LDSQ) 是個重要的議題 [3][7][8][9][11]。
無線環境中的 LDSQ 為行動使用者依據目
前所在位置查詢相關的空間物件，例如：
依據使用者目前所在位置查詢區域交通路
況以及查詢距離最近的餐廳。LDSQ 包括
視窗範圍查詢 (window queries)、最近鄰
居查詢 (nearest-neighbor queries，NN)、k
個最近鄰居查詢 (k-nearest-neighbor que-
ries，kNN) [6]。在這個計畫中，我們致力
於視窗查詢。視窗範圍查詢為給定一個二
維矩形的視窗，查詢在此視窗內所有的空
間物件，例如：找出我目前所在鄉鎮內的
所有 7-11 便利商店。 
在傳統磁碟存取環境中，已有很多支援有
效率空間查詢的空間索引結構，如R-Tree 
[4]、KD-Tree [2]、Quad-Tree [2]。然而這
4 
間物件鄰居的資訊，能有效率地處理查詢， 減少行動設備聽頻道的時間，降低行動設
備電力的消耗。 
五、參考文獻 
[1] H. L. Chen and Y. I. Chang, “Neighbor 
Finding Based on Space Filling 
Curves,” Information Systems, Vol. 30, 
No. 3, pp. 205–226, May 2005. 
[2] V. Gaede and O. Gunther, “Multidi-
mensional Access Methods,” ACM 
Computing Surveys, Vol. 30, No. 2, pp. 
170–231, June 1998. 
[3] B. Gedik, A. Singh, and L. Liu, “Ener-
gy Efficient Exact kNN Search in 
Wireless Broadcast Environments,” 
Proc. of the 12th ACM Int. Workshop 
on Geographic Info. Systems, pp. 
137–146, 2004. 
[4] A. Guttman, “R-trees: A Dynamic in-
dex structure for Spatial Searching,” 
Proc. of the ACM SIGMOD Conf. on 
Management of Data, pp. 47–54, 1984. 
[5] T. Imielinski, S. Viswanathan, and B. 
R. Badrinath, “Data on Air: Organiza-
tion and Access”, IEEE Trans. on 
Knowledge and Data Eng., Vol. 9, No. 
3, pp. 353–372, May/June 1997. 
[6] W. S. Ku, R. Zimmermann, and H. 
Wang, “Location-Based Spatial Query 
Processing in Wireless Broadcast En-
vironments,” IEEE Trans. on Know-
ledge and Data Eng., Vol. 7, No. 6, pp. 
778–791, June 2008. 
[7] H. Wang and R. Zimmermann, “A 
Novel Dual-Index Design to Efficiently 
Support Snapshot Location-Based 
Query Processing in Mobile Environ-
ments,” IEEE Trans. on Mobile Com-
puting, Vol. 9, No. 9, pp. 1280-1292, 
Sep. 2010. 
[8] B. Zheng, W. C. Lee, and D. L. Lee, 
“Search K Nearest Neighbors on Air,” 
Proc. of the 4th Int. Conf. on Mobile 
Data Management, pp. 181–195, 2003. 
[9] B. Zheng, W. C. Lee, and D. L. Lee, 
“Spatial Queries in Wireless Broadcast 
Systems,” Wireless Networks, Vol. 10, 
No. 6, pp. 723–736, Nov. 2004. 
[10] B. Zheng, W. C. Lee, C. K. Lee, D. L. 
Lee, and M. Shao, “A Distributed Spa-
tial Index for Error-Prone Wireless Da-
ta Broadcast,” The VLDB Journal, Vol. 
18, No. 4, pp. 959-986, Aug. 2009. 
[11] B. Zheng, J. Xu, W. C. Lee, and D. L. 
Lee, “Grid-Partition Index: A Hybrid 
Approach to Nearest-Neighbor Queries 
in Wireless Location-Based Services,” 
The VLDB Journal, Vo. 15, No. 1, pp. 
21–39, Jan. 2006. 
六、圖表 
0
1 2
3 4 5
6
7
8
9
10
11
12
1314
15
16
17
1819
20
21 22
23 24
25 26
27
28
29
30 31 32 33
34
35
36
37 38
39 40
41 42
43
44
45
46
47
48
49
50
515253
54
55
56
57
58 59 60
61 62
63
：空間物件  
圖 1 空間物件於階層 3 的 Hilbert-curve 上
的分佈 
AN ID-TREE INDEX STRATEGY FOR SUPPORTING SIMILARITY SEARCHES 
IN INFORMATION FILTERING SYSTEMS 
Ye-In Chang 
Dept. of Computer Science and 
Engineering 
Jun-Hong Shen 
Dept. of Information 
Communication 
Yi-Siang Wang 
Dept. of Computer Science and 
Engineering 
National Sun Yat-Sen University 
Email: changyi@cse.nsysu.edu.tw 
Asia University 
Email: shenjh@asia.edu.tw 
National Sun Yat-Sen University 
ABSTRACT 
Finding the nearest neighbor is one of the most 
important search operations in the field of 
information filtering. Aggarwal et al. have 
proposed SG-table strategy to index user profiles to 
support finding similar profiles for a query, 
reducing the number of accessed profiles. However, 
it can only improve some particular queries 
because of collisions in the index. Therefore, in 
this paper, to avoid the collision problem, we 
propose a signature-based structure, called the 
identifier tree (ID-tree), to index the signatures of 
user profiles via partitioning them into several 
subgroups globally. From our simulation, we have 
shown that the ID-tree strategy can reduce the most 
number of accessed profiles in the similarity search 
as compared with the SG-table strategy. 
1. INTRODUCTION 
With a tremendous amount of information being 
delivered over World Wide Web, information 
filtering (IF) helps users find the right information 
items, while filtering out undesired ones [3]. 
Similarity search is one kind of searching strategies 
that are usually applied on the signature-based IF 
systems. Similarity search strategies involve 
complex objects, and finding objects in a data set S 
similar to a query object q, based on some 
similarity functions [1]. A similarity function is 
composed of two variants. One is the number of 
identical items between the database object and the 
query object, called match, and the other is the 
number of different items between them, called difJ. 
For the sake of convention, it will assume that the 
similarity function is such that higher values imply 
greater similarity. Moreover, the function must 
ensures that it is an increasing function in terms of 
the number of identical items and is decreasing in 
terms of the number of different items between two 
objects. 
Similarity search strategies have been applied on 
many data analysis tasks in multimedia, time-series, 
biological and scientific databases. Most 
applications on these database systems involve data 
that has considerably less structure and whose 
specification is therefore less precise. Some 
example applications include collections of more 
complex data such as images, videos, audio 
recordings, text documents, time series, and DNA 
sequences [5]. Among similarity search strategies, 
the nearest neighbor (NN) search is the 
fundamental one for the others, which finds objects 
whose features have values similar to those of a 
given query object or set of query objects. In this 
paper, we focus on NN queries in the signature­
based IF systems. 
An example of the relationship between a query 
and user profiles in the similarity search is shown 
in Figure I. In this example, there are two profiles 
in the database. To find the nearest neighbor Pi of 
query user Q, the similarity function Sim(Pi, Q) = 
(matchldifJ) is used, where i is the ith profile in the 
database. Because there are 2 identical items (i.e., a 
and b) and 2 different items (i.e., c and d) between 
Q and PI, the similarity value between them is 2/2 
= I. Similar to PI, the similarity value between Q 
and P2 is 1/2 = 0.5. Therefore, PI is more similar 
to Q as compared to P2 according to the similarity 
function. 
_ : Query 
o : User Profile 
Figure 1: The relationship between a query and user 
profiles in the similarity search 
Aggarwal et at. have proposed SG-table strategy [1] 
to index user profiles to support rmding similar 
profiles for a query. In the SG-table strategy, 
signatures can be used to filter most of the 
dissimilar profiles according to the query. However, 
lET 2010-37 
Figure 2: An example of the ID-tree after the pre­
processing step 
2. 1.2. The extension part 
Because there is only one ID-key in each ID node 
after the preprocessing part, the filtering effect of 
subgroups using ID-keys may be inefficient. To 
improve the filtering efficiency of each subgroup, a 
method for extending an ID node with more than 
one ID-key is used in our strategy. Because there 
may be more than one different item between two 
subgroups partitioned by an ID node, the basic idea 
of extending the ID-keys of each ID node is to find 
all the different items between two subgroups to 
partition them at one time. In other words, we 
increase the number of ID-keys in each ID node to 
partition each group more precisely. 
In the extension part, three arrays key_set, U _key 
and I_key are used in each ID node to record the 
information of subgroups partitioned by it. key_set 
is used to record the ID-keys in an ID node. U _key 
is used to record the ID-keys which have been used 
by the descendant of an ID node. C key is used to 
record the intersection of all profiles in each 
subgroup partitioned by an ID node. 
To extend the ID-keys of each ID node, the 
extension part recursively traces ID nodes in the 
ID-tree in the post-order manner. In each ID node, 
the extension steps are as follows. 
Step 1. U _key of the ID node is the union of U _key of 
its left and right children. 
Step 2. key _set of the ID node is the " 1" bit positions 
of the bitwise XOR operation of C keys between 
its left and right children, excluding its U _key. 
Step 3. I_key of the ID node is the result ofthe bitwise 
AND operation of I_keys between its left and right 
children. 
Step 4. The final U _key of the ID node is set to the 
union of its U_key and key_set. 
Step 5. Assign the bits to the links pointing to the left 
and right children of the ID node according to 
whether the subgroups contain the ID-keys, i.e., 
key_set. 
Take an ID node shown in Figure 3 as an example. 
In Step 1, we get U _key of ID node D is null. In Step 2, 
key _set of ID node D is the "1" bit positions of the 
bitwise XOR operation of I _keys of profiles P4 and P5, 
excluding its U _key; that is, {7, 9}. In Step 3, we get its 
I_key = {OlOlOIOIOO}. In Step 4, its U_key is updated 
by the union of its U_key and key_set, i.e., U_key = {7, 
9} shown in Figure 4. In Step 5, bits "01" is 
assigned to its left link to indicate that profile P4 
does not contain 7 but contains 9. Its right link is 
processed in the same way. Figure 4 shows the 
final result after the extension for the ID-tree 
shown in Figure 2. 
o : the union operation 
D : the exclusion operation 
I XOR I : the bitwise XOR operation 
� : the bitwise AND operation 
Figure 3: An example of the extension part 
Figure 4: The final result of the extension part 
2.2. The Minimum Optimistic Bound 
To filter out the dissimilar profiles by subgroups 
more precisely, we propose a strategy to calculate 
the minimal optimistic bound of the similarity 
between each subgroup and the query. For each ID­
key in ID node pt of the ID-tree, the optimistic 
bounds of similarity between query q and two 
subgroups partitioned by pt are calculated. Because 
profiles are partitioned into two subgroups by an 
ID node, we can calculate the optimistic bounds of 
these subgroups at one time. The calculation is 
processed in Type 1 shown in Figure 5 and Type 2 
shown in Figure 6, respectively. Therefore, the 
similarity between q and two subgroups partitioned 
by pt can be calculated after each ID-key of pt is 
traced. These values of similarity will be recorded 
in pt. Ie, which is the left-hand subgroup, and pt.re, 
which is the right-hand subgroup, and added to 
query _link, which is a linked list used in processing 
the similarity search. 
RET 2010-39 
optimistic similarity between the subgroups 
partitioned by A and q. By following the four cases 
between the ID-keys and the query described in the 
previous section, the max_match and min _ diff of 
10 nodes Band C can be calculated by the ID-keys 
of A. After sorting elements by their 
(max_match/min_difJ) in query_link in the 
descending order, 10 node B will be the first 
element of query _link and the left and right 
children of B are traced, recursively. 
Step 2 
Step 6 
Step I 
1 "'''_"''''"1 ' 1 min dlrr 0 
P9 P6 
Figure 7: A tracing example of the similarity search 
using best-first search (BFS) in an ID-tree with the 
nearest neighbor query q = ( 1,2,8) 
In Step 4, the first element of query _link is a leaf 
node of the ID-tree, which points to profile P8. 
Therefore, we will calculate the number of 
matched items between query q and profile P8 (i. e., 
3) and the number of different items between them 
(i.e., 2). Then, profile P8 will be added to 
query _link and sorted again. In Steps 5 and 6, 
because the first element of the linked list is a 
profile, P8, the search is terminated and P8 will be 
the answer. In query _link, it is obvious that 3 10 
nodes (i.e., 6 optimistic bounds) are used to 
calculate with q. Therefore, 7 ID-keys in the 10-
tree and 1 profile in the disk are checked to answer 
nearest neighbor query q. 
Linked-list: 
SICI) 1 A 1 3 1 0 1 
SICI) 2 B I 3 I 0 H c 2 2 1 
StCI13 E 3 0 H c 2 H D 1 2 1 2 1 
StCl1 -I L 3 I H C 2 H D 1 2 [ 2 H K [ 2 1 2 1 
SICI) 5 p, 3 2 H c 2 H D 1 2 1 2 H K 1 2 1 2 1 
SICI) 6 p, 3 2 H C 2 H D 1 2 1 2 H K 1 2 1 2 1 
Figure 8: The linked lists ofBFS 
3. PERFORMANCE 
In this section, we make a comparison of our ID­
tree strategy and the SO-table strategy [1] in the 
similarity search. 
3. 1. The Simulation Model 
In this simulation, we use the profile generator 
which has been discussed in [4] to generate 
synthetic profiles and to evaluate the performance. 
Each synthetic profile will be transformed into the 
signature defined in [6] after the generation. 
We cluster N = 2000 user profiles into the same 
group. All the profile signatures are randomly 
created by using a uniform distribution with 
similarity parameter Q = 0.5, 0 :::; Q :::;1, for the 
positions that will be set to "1." That is, for each bit 
which is set to "1'" in the signature of the base 
profile, there is a probability Q that the 
corresponding bit of the new profile signature is 
also set to "l." The set of domain items, D, is 
composed of 100 items, i. e., D = 100. The length of 
each profile, W, is fixed, i.e., W = 20. In the 
following, our simulation results are the average of 
1000 queries. 
According to the similarity function defined in [1], 
two parameters query_match and query _diff are 
used to generate the synthetic queries. To control 
the similarity between the query and the user 
profiles, a profile signature in the database will be 
picked at random as the seed of the query. Then, 
for all of the items in the seed signature, parameter 
query_match will be set as the number of matched 
items between the query and this seed signature, 
where 0 :::; query_match :::; w. That is, if 
query_match is set to 3, there will be three bit 
positions set to "1" in the synthetic query which are 
also turned on in the seed signature. 
Moreover, parameter query _ diff will be set as the 
number of different items between the query and 
the seed signature, where 0 :::; query _ diff:::; (D­
query_match). That is, if query_diff is set to 2, 
there will be 2 positions chosen from those 
positions of the seed signature which are turned on 
and not used by the matched items. If there are not 
enough" 1" bits in the seed signature to tum off, we 
will pick "0" bits at random to turn on in the 
synthetic query until the number of different items 
between the query and the seed signature is equal 
to query _ diff. 
Therefore, parameter query _sim is used to control 
the minimum similarity value between the query 
and its nearest neighbor. That is, query _sim = 
query _ match/query _ diff. Therefore, parameter 
query_match will be the minimum number of 
matched items between the query and its nearest 
neighbor, and query _ diff will be the maximum 
number of different items between them. Moreover, 
query Jim will be the minimum similarity value 
between the query and its nearest neighbor. By 
using these two parameters, we can adjust the 
lower bound of the nearest neighbor found by the 
query. 
3.2. Experimental Results 
According to those settings of these parameters, a 
comparison of the number of accessed profiles and 
the number of traversed bits in the index by using 
RET 2010-41 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/01/25
國科會補助計畫
計畫名稱: 無線廣播環境中空間資料存取機制之設計
計畫主持人: 沈俊宏
計畫編號: 99-2218-E-468-003- 學門領域: 資料庫系統及資料工程
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
