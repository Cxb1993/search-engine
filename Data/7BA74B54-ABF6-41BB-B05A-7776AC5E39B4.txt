  i
摘要 
H.264 影像壓縮標準之中，提出了可變區塊的區塊比對及模式選擇，並定義每一個 16x16
區塊具有 259 種不同子區塊的組合及模式選擇，因此可有效的改善編碼效率。然而可變區塊
區塊比對演算法及模式選擇亦同時增加了運動估測的複雜度。另一方面，隨著影像解析度畫
質提升的需求，整個影像的資料量及比對次數亦相對的提升。 
    為了可以有效降低 H.264 運算複雜度及降低高解析度畫質的資料量及比對次數，於是本
研究計畫提出了 MRMS (Multi-Resolution Multi-Shaped) 運動估測演算法。其主要是將可變
區塊區塊比對演算法、模式選擇及多階層運動估測進行結合。並於整個演算法的推導過程
中，考量其規律性，進一步提出 MRMS 的 VLSI 架構。在 VLSI 架構設計過程，為了有效的
減少運算資源及增加資料再利用性，於是在 SAD (Sum of Absolute Difference) 累加運算的部
分採用了 BSU (Basic Searching Unit)架構。 
本研究所提出之 MRMS 具有以下幾個特點：階層式搜尋、規律性高、支援 H.264 之可變
區塊區塊比對及模式選擇、資料再利用高，複雜度比 FSBMA（Full Search Block Matching 
Algorithm）最高可降低 3315倍的運算複雜度。為了獲得畫質及位元率的比較，本研究將MRMS
與 H.264 源碼（JM12.1 版本）進行整合。並透過多種不同的標準影像串列與 H.264 源碼中的
FSBMA 進行畫質及位元率的比較，實驗結果呈現出測試影像的 MRMS 位元元元率失真曲線
及 FSBMA 位元率失真曲線二者的誤差值皆在 0.5dB 之內，其多半的誤差在 0.2dB 之內。 
關鍵詞：H.264、多階層、運動估測、可變區塊、模式選擇 
 
 
 
 
 
 
  I
目錄 
摘要 ....................................................................................................................................................... i 
Abstract ................................................................................................................................................ ii 
目錄 ....................................................................................................................................................... I 
圖表目錄 ............................................................................................................................................ III 
第一章 動機 ...................................................................................................................................... 1 
第二章 研究背景及目的 .................................................................................................................. 2 
第 1 節 Full Search Algorithm (FSA) ....................................................................................... 4 
第 2 節 Three-Step Search (TSS) ............................................................................................. 5 
第 3 節 New Three-Step Search (NTSS) .................................................................................. 7 
第 4 節 Four-Step Search (FSS) ............................................................................................. 10 
第 5 節 Diamond Search ......................................................................................................... 12 
第三章 MRMS 演算法 ................................................................................................................... 14 
第四章 VLSI 架構 .......................................................................................................................... 20 
第五章 程式撰寫 ............................................................................................................................ 32 
第六章 運算複雜度 ........................................................................................................................ 37 
第七章 實驗結果 ............................................................................................................................ 38 
第八章 結論 .................................................................................................................................... 52 
  III
圖表目錄 
圖 1  Block modes of H.264. .............................................................................................................. 2 
圖 2  Full Search Algorithm ................................................................................................................ 4 
圖 3  Three-Step Search ...................................................................................................................... 6 
圖 4  New Three-Step Search ............................................................................................................. 8 
圖 5  NTSS之程式流程 ...................................................................................................................... 9 
圖 6  Four-Step Search ...................................................................................................................... 11 
圖 7  Diamond Search ....................................................................................................................... 13 
圖 8  三階層縮圖結構 ...................................................................................................................... 16 
圖 9  階層搜尋關係 .......................................................................................................................... 17 
圖 10 初步模式選擇與最後模式選擇關係圖 ................................................................................. 18 
圖 11 硬體驗証程式流程圖 ............................................................................................................. 19 
圖 12  VLSI簡易架構圖 .................................................................................................................. 21 
圖 13  BSU架構圖 ........................................................................................................................... 22 
圖 14  4×4 的現在影像區塊和 8×8 的參考影像區塊 ................................................................... 22 
圖 15 多工器控制訊號 ..................................................................................................................... 23 
圖 16  BSU計算週期和資料傳遞關係 ........................................................................................... 23 
圖 17  可變區塊的組合情形 ........................................................................................................... 26 
圖 18  8×8 區塊分割成四個 4×4 區塊及相對之搜尋範圍 ........................................................... 26 
圖 19  區塊累加暫存器和MV關係 ................................................................................................ 27 
圖 20  8×8 區塊分割成四個 4×4 區塊運算順序 ........................................................................... 28 
  V
圖 43  miss_am_148 位元率失真曲線圖 ....................................................................................... 48 
圖 44  hall_299 位元率失真曲線圖 ................................................................................................ 49 
圖 45  coastguard_298 位元率失真曲線圖 .................................................................................... 49 
圖 46  akiyo_298 位元率失真曲線圖 ............................................................................................. 50 
圖 47  acer_202 位元率失真曲線圖 ............................................................................................... 50 
圖 48  trevor_148 位元率失真曲線圖 ............................................................................................ 51 
 
 第二章  研究背景及目的 
對於消除影像時間上的冗餘，運動估測(Motion Estimation)一直是影像編碼中不可或缺的
步驟，近年來，關於運動估測的研究也持續不斷的推陳出新。但不管運動估測演算法怎樣的
進步，總是脫離不了區塊比對演算法(Block Matching Algorithm )的範疇。而早期所採用的固
定區塊大小區塊比對演算法並無法完全有效的處理影像中物件不同程度的變化，因此在
H.264[1]視訊壓縮技術中提出了可變區塊的區塊比對演算法（VBS-BMA），希望藉此更進一
步改善視訊的壓縮效率。其主要的概念為：將每一個 16×16 的區塊（MB Macroblock）切割
16 個沒有相互重疊的 4×4 基本子區塊（primitive sub-block），並以此 16 個基本子區塊來組合
出其他不同大小的子區塊（sub-block），若 16×16 區塊為四個 8x8 區塊所組合而成，則每一
8x8 區塊則可以再分別由四個 4x4 區塊所組合而成，反之若 16×16 區塊為 16×16、16×8 及 8×
16 區塊所組合而成，則每一子區塊則不再做額外的區塊組合。亦即每一個 MB 皆可有 259 種
不同的區塊組合（圖 1）。並於最後透過拉格朗（Lagrange）方程式，從中比較出最適合的區
塊組合，此即為模式選擇。 
 
 
 
 
 
 
 
 
 
 
16 16 
16 16 
8
8 8 
8
Sub-block modes 
 
 
8 
8 
8
8 
4
4 4 
4
圖1 Block modes of H.264. 
 2
 有別於採用階層式的區塊搜尋比對，亦有相當多的文獻在進行探討及改良位於一個平面
上進行區塊搜尋比對，下文中例舉幾種較廣為人知的運動估測演算法： 
第1節  Full Search Algorithm (FSA) 
    全域搜尋演算法(Full Search Algorithm, FSA)亦稱之為全域搜尋區塊比對法（Full 
Search Block Matching Algorithm, FSBMA ）所採用的搜尋方法就如同其名一般，會將其
搜尋範圍之內的所有候選區塊進行 SAD 值比對，並於最後比較出一個具有最小 SAD 值
的 MV。由於該演算法為進行所有候選區塊的比對，於是在時間及複雜度的方面相對於
其他快速區塊比對搜尋演算法而言較高，但該演算法是所有區塊比對演算法中唯一能夠
保證其 MV 為搜尋範圍之中最佳 MV 值，另一方面，也由於該演算法具有極佳的規律性，
於是近年來，亦有不少的研究為採用硬體設計來實現全域搜尋演算法。 
全域搜尋演算法區塊大小及搜尋範圍如圖 2，其中 N 為現在影像區塊大小而 W 則為
其水準及垂直方向的最大偏移位置。 
 
 
 
 N+2W 
 
 4
 
 
 N+2W 
search range 
W
W W
W
N 
N 
block 
 
 
 
 
 
 frame 
 
圖2 Full Search Algorithm 
 0-1
-1
1
1
2
2-2
-2
3
3
-3
-3
4
-4
-4
4 5
5
-5
-5
6
6
-6
-6
7
7-7
-7
1
1
11
1
11
1
1
2
2
222
2
2 2
3
3
333
3
3
3
 
：the search point on Nth step 
：the minimum SAD on Nth step 
    ：search path 
    ：motion vector 
 6
圖3 Three-Step Search  
 
 
 
 個候選區塊之中找出最小 SAD 的區塊位置，此區塊位置亦為最後所得之運動向
量。 
圖 5  為 NTSS 之程式流程架構說明。 
 
 
0-1
-1
1
1
2
2-2
-2
3
3
-3
-3
4
-4
-4
4 5
5
-5
-5
6
6
-6
-6
7
7-7
-7
1
1
11
1
11
1
1
1
111
1
1 1
1
 
圖4 New Three-Step Search 
 
 
 
 
 
 8
 第4節  Four-Step Search (FSS) 
FSS 是改良 TSS 的方法。以下說明 FSS 演算法的運動估測實現方法為何： 
步驟一：利用５×５的搜尋範圍取代 TSS 中９×９的搜尋範圍，並從這九個候選區塊之中
找出最小 SAD 的區塊位置。 
步驟二：從步驟一預測之區塊位置進行區分，步驟二將有二種不同的可能結果。而每一
種結果皆有其各自的估測結果 
        一：前一步驟預測最小 SAD 的區塊位置為前一步驟的候選區塊中心，則最後的
運動估則的搜尋區塊大小縮減為３×３，並從該九點之中預測出最小 SAD
值的區塊位置，即為最後之運動向量。如圖 6  3    5 
        二：若步驟一預測的最小 SAD 的區塊位置為角落四個候選區塊之一，則以此區
塊為中心並以 ±２間距新增五個候選區塊 (圖 6  2    3)。然後由此六個
候選區塊之中預測出最小 SAD 的區塊位置。 
反之，若步驟一預測的最小 SAD 的區塊位置為水準或垂直方向的中心點位
置，則以此區塊為中心並以 ±２間距新增三個候選區塊(圖 6  1    2)。然
後由此四個候選區塊之中預測出最小 SAD 的區塊位置。 
重複步驟二。 
 10
 第5節  Diamond Search 
Diamond Search 為改良 FSS，其主要概念為假設運動向量大部分皆為位於中心點的
附近。因此該演算法設計是將 FSS 的矩形改變成菱形，其預測方式相似於 FSS。以下說
明 FSS 演算法的運動估測實現方法為何： 
步驟一：利用５×５的菱形取代 FSS 中的矩形，並從這九個候選區塊之中找出最小 SAD
的區塊位置。 
步驟二：從步驟一預測之區塊位置進行區分，步驟二將有二種不同的可能結果。而每一
種結果皆有其各自的估測結果 
        一：前一步驟預測最小 SAD 的區塊位置為前一步驟的候選區塊中心，則最後的
運動估則的搜尋區塊大小縮減為３×３，並從該九點之中預測出最小 SAD
值的區塊位置，即為最後之運動向量。如圖 7  3    5 
        二：若步驟一預測的最小 SAD 的區塊位置為角落四個候選區塊之一，則以此區
塊為中心並以 ±２間距新增五個候選區塊 (圖 7   1    2)。然後由此六個
候選區塊之中預測出最小 SAD 的區塊位置。 
反之，若步驟一預測的最小 SAD 的區塊位置為水準或垂直方向的中心點位
置，則以此區塊為中心並以 ±２間距新增三個候選區塊(圖 7  2    3)。然
後由此四個候選區塊之中預測出最小 SAD 的區塊位置。 
重複步驟二。 
 12
 第三章  MRMS 演算法 
本研究所提出的 MRMS 演算法，是依據文獻[2]的設計基礎進行改進。MRMS 演算法為
將整個搜尋過程分成三個階層，由上而下分別稱之為：level 2、level 1 及 level 0。其中 level 0
代表精細層、level 2 代表粗糙層。並且將 level 0 的搜尋區塊範圍定義為： 
 14
]16~16[ −
16x8、8x16 及 8x8 大小的區塊之 SAD 值，最後通過拉格朗(Lagrange)方程式計算得出最小的
   
而層與層之間的比例關係式為： 
1,0     ),2,2(),( )()1( ==+ lforjiIjiI lklk  
亦即每往上一層時，原區塊的水準及垂直方向皆會縮為原階層的二分之一。亦即，level 2
資料量為原 level 0 的十六分之一，而現在影像區塊大小從 16×16 大小逐層縮小為 4×4 大小，
搜尋範圍亦從±16 逐層縮小為±4（圖 8），因此階層式搜尋比對可以有效減少資料量及比對次
數。 
為了有效減少計算複雜度，因此 MRMS 演算法中的 level 1 固定只取二個候選區塊中心，
並且將整個 MRMS 演算法的階層定義成三層。為了維持 level 1 候選區塊中心的準確性，於
是在 level 2 比對搜尋過程中，是由一個 4x4 大小的現在影像區塊並從其參考影像區塊範圍之
中，使用全域搜尋演算法做±4 範圍的比對搜尋，並且從±4 的範圍之中找出最小和次小 SAD
值的 MV。 
level 1 則是以 level 2 所運算得之二個最小和次小 SAD 值的 MV 為候選區塊中心，並以
8x8、8x4、4x8 及 4x4 這四種區塊組合大小為現在影像區塊的基礎，分別從其各自參考影像
區塊搜尋範圍之中，使用全域搜尋演算法做±2 的比對搜尋，並計算出其各自最小的 SAD 值，
並將其各自 SAD 值直接按比例將 8x8、8x4、4x8 及 4x4 這四種區塊組合大小還原成 16x16、
 8 pels
4 pels
16 pels
level 1水 平 軸 和 垂
直 軸 各 按 照 2:1的
比 例 縮 小 成 level 2
level 0水 平 軸 和 垂
直 軸 各 按 照 2:1的
比 例 縮 小 成 level 1
Level 2
Level 1
Level 0
 
圖8 三階層縮圖結構 
 16
 Level 1
Level 0
16
16
8
8
 
 
 
Level 1
Level 0
16
16
8
8
 
圖10 初步模式選擇與最後模式選擇關係圖 
 
 18
  20
第四章  VLSI 架構 
硬體實現 MRMS 演算時，主要的參考為文獻[2]及文獻[3]。主要的概念為三個階層
SAD 值運算皆是由一個 BSU 運算單元所完成，但 BSU 一次只執行一個 4×4 大小的現在
影像區塊，並從其參考影像區塊中做±2 的搜尋。圖 12 為其 VLSI 架構圖。 
於 level 2 時，因為亦是以 4×4 大小的現在影像區塊做±4 的搜尋，於是只需從其參考
影像區塊±4 搜尋之中選擇出最小和次小 SAD 的 MV 值即可，並不需要將所有的搜尋結
果都存到暫存器之中，只需將 BSU 完成運算的 SAD 值直接透過比較器找出到目前為止
最小和次小 SAD 值及其 MV 即可。 
而在level 1時，則必須分別以8x8、4x8、8x4及4x4模式為基礎組合成四種8x8區塊 ，
於是會將所有4x4大小的現在影像區塊SAD值比對結果，利用暫存器將其±2範圍比對結果
的SAD值進行儲存，並於四個4x4區塊皆完成搜尋之後，透過區塊組合累加器將每一個4x4
區塊的SAD值累加成四種模式所組合而成的8x8區塊SAD值，並直接依比例關係將四種
8x8區塊SAD值，放大成16x16、8x16、16x8及8x8模式為基礎組合而成的四種16x16區塊
SAD值，最後透過比較器找出最適合的初步模式選擇及其MV。 
最後於 level 0時，由於必須根據 level 1的 16x16區塊模式選擇結果是否是由四個 8x8
區塊所組成，來進行最後 16x16 區塊的區塊組合及模式選擇。若 level 1 的 16x16 區塊是
由四個 8x8 區塊所組成，此時則會將每一個 8x8 區塊再進行一次模式選擇及區塊組合，
於是等同於 level 1 的運算過程，不同的是，於最後不需再將 SAD 值按比例放大。反之，
若為 16x16 區塊是由其他區塊大小所組成，則於 level 0 時，則該區塊的區塊組合及模式
選擇則依 level 1 的模式選擇結果而直接再進行一次 ME 的±2 搜尋即可，不再需要進行區
塊組合及模式選擇。 
   C
  O
  U
  N
  T
M
U
X
1
M
U
X
3
M
U
X
2 DFF
DFF
DFF
DFFMC1
MC2
MC3
Reset
SAD
C
lP
rP
PE0
PE1
PE4
PE3
PE2
 
圖13 BSU 架構圖 
row0
row7
P(x,y)
lP rP
C(x,y)
x
y
 
 
 
 
 
 
圖14 4×4 的現在影像區塊和 8×8 的參考影像區塊 
 22
 另一方面，由於三個階層的搜尋皆是透過 BSU 來完成運算，而 BSU 一次只完成一個 4×
4 大小的現在影像區塊在其±2 搜尋範圍的 SAD 值運算，於是每一階層必須反覆的去呼叫
BSU，以達到 MRMS 演算法的設計理念。由於 BSU 的呼叫次數跟模式選擇並無直接的關係，
只有跟該階層的現在影像區塊大小及其搜尋範圍相關。各階階層各別需要呼叫幾次 BSU 以及
各階層的起始搜尋點、區塊大小、以及搜尋範圍如(表一)。 
 階層 起始搜尋點 區塊大小 搜尋範圍 BSU 呼叫次數 
2 1 4x4 ±4 4 
1 2 8x8 ±2 2x4 
0 1 16x16 ±2 16 
 
 
 
表一 各階層定義與 BSU 關係 
 
我們將整個設計預期分割成三個主要的程式架構，分別稱之為 Bsu、Bsu_cntr 及 Top，以
下為各別程式主要負責的功能介紹。 
Bsu： 
Bsu 為最底層的程式架構，其負責的功能是在於計算 SAD 值。於每次呼叫 Bsu 時，代表
上層的 Bsu_cntr 已經將搜尋影像 8×8 區塊的資料及現在影像 4×4 區塊的資料都準備完畢，於
是上層的 Bsu_cntr 將會給 Bsu 一個 bsu_start 的訊號，代表可以開始做整個 8×8 區塊和 4*4 區
塊的 SAD 值計算。而不同於 MRMCS 架構，在多工器控制訊號的部分，採用計數器方式去
產生所需要的控制訊號。而由於一次是比對 4×4 的區塊，於是完成一個完整 SAD 值共需 16
個時間週期的累加。因為在 Bsu 計算的過程中一次是進行 4×4 對 4×8 的 SAD 計算，換言之，
要完成整個搜尋影像 8×8 區塊以及現在影像 4×4 區塊共需要 80 個時間週期。當 Bsu 開始被告
知開始計算時，每 16 週期時會利用 bsu_rdy 的訊號通知 Bsu_cntr 可以開始連續抓取五週的
 24
  
 
 
 
    
 
圖17 可變區塊的組合情形 
 
 
 
圖18 8×8 區塊分割成四個 4×4 區塊及相對之搜尋範圍 
 
 26
                     
8
8
4
4
43
21
 
圖20 8×8 區塊分割成四個 4×4 區塊運算順序 
 
level 0：由於在 level 1 時，已經進行過初步的可變區塊組合及模式選擇。若在 level 1 的
模式選擇為圖 21 的區塊組合時，則此時只須將每一個 BSU 的 4x4 區塊比對結果直接累加成
二倍大小的原區塊組合模式即可，並從其中找出各別形狀最小 SAD 值的 MV 即可，並不需要
將各別 4x4 區塊的比對結果暫存起來。反之，若選擇的模式為圖 22 時，此時則必須再針對每
一個 8x8 區塊進行一次可變區塊的區塊組合及模式選擇，此時每一個 8x8 大小的可能區塊組
合、記憶體分配及模式選擇方式都相同於 level 1。值得注意的是，不管怎樣的區塊組合，最
後都將組成一個 16x16 的現在影像區塊。而圖 23 則表示 16×16 區塊如何分割成 16 個 4x4 區
塊及呼叫 BSU 的順序。 
 28
   
1 2
3 4
14
13
87
6
5
12
10
11
9
1615
16
16
4
4
 
 
 
 
 
 
圖23 16×16 區塊分割順序 
Top： 
Top 主要在於必須將 Bsu_cntr 所回傳之 MV 進行運算最後得到完整的 MV： 
2,1     )2()2( ：lll MVMV =         2 )1()2()1( MVMVMV +⋅= l
l ：在哪一個 找到最小 SAD )2(MV
    2 )0()1()0( MVMVMV +⋅=  
並依此 MV 將所需之比對影像區塊準備完成，最後發出 mv_rdy 通知 Bsu_cntr 開始進行
該階層的執行。 
而圖 24 則為 Bsu、Bsu_cntr 及 Top 三者彼此呼叫的關係簡圖。 
 
 
 30
 第五章  程式撰寫 
為了實際評估 MRMS 的執行效率，於是將 MRMS 演算法與 H.264 源碼之 JM12.1 版本進
行整合。圖 25 為 JM12.1 程式流程簡圖，其中在編碼端的部分是由 Lencod.c 開始執行，並於
一開始的時候透過 configure 函數呼叫參數檔，進行整個編碼流程一些相關參數的設定如量化
參數、模式選擇、參考範圍、比對影像…等。再回到 Lencod.c 這一個主程式繼續往下執行，
並如圖中所示一層一層的往下呼叫直到遇到 encode_one_macroblock 函數，此時會由參數檔的
設定而決定進入 md_highfast.c、md_high.c、md_low.c 亦或者 md_highlose.c，由於我們設定為
md_high.c 於是程式將會進入到 md_highfast.c，而 md_highfast.c 及該程式所包含之函數為程式
主要修改部分。 
 lencod.C
Configfile.c
frame_picture(frame_pic_1, 0)
 32
 
 
 
 
 
 
 
 
 
 
圖25 H.264 程式流程簡圖 
 
讀取
參數
設定
檔
Configure (argc, argv)
encode_one_frame
image.c
image.c
code_a_picture(frame)
image.c
encode_one_slice
slice.c
參數
設定
檔決
定進
入哪
一個
md.c
encode_one_macroblock
Md_high.c
PartitionMotionSearch
  34
由於 MRMS 提早進行模式選擇的預測，於是原程式架構必須進行修改，修改結果如圖
27。在 LI 時，雖然是運算出 8x8、4x8、8x4 及 4x4 這四種模式的運動估測，但是因為比例關
係所以會等同於在 L0 進行 16x16、16x8、8x16 及 8x8 該四種模式的運動估測。最後將該四種
模式透過原 JM 所提供之 RD 最佳化公式來決定出初步的模式為何及其 MV 值。而在 L0，則
會根據 L1 的模式選擇結果而有二種可能： 
Case1 ：選擇 8x8 模式，此時則將針對每一個 8x8 區塊再進行一次 8x8 區塊以下的模式選擇
以決定出最佳的模式及 MV 值。則此時 Inter 的模式則為該模式及 SKIP，最後與 Intra
的模式一起透過 RD 最佳化的公式選擇出最好的模式及其 MV 值。 
Case2 ：選擇 16x16、16x8、8x16 其中之一的模式，則在 L0 則不再進行一次模式選擇。則此
時 Inter 的模式則為該模式及 SKIP，最後與 Intra 的模式一起透過 RD 最佳化的公式選擇
出最好的模式及其 MV 值。 
從程式流程架構中，可以瞭解到整個 JM12.1 的編碼流程。而實際上程式撰寫時，JM12.1
最主要是透過三個函數來實現整個程式架構如圖 28。在執行區塊比對時，會根據參數檔的設
定來決定須要執行哪些區塊形狀，然後根據參數檔所支援的區塊形狀來決定呼叫哪一些
PartitionMotionSearch，再根據每一種模式的有多少個子區塊來決定 BlockMotionSearch 函數
的呼叫次數，並於此函數中根據參數檔設定而決定採用哪一種搜尋模式。但當支援到 8x8 以
下的區塊比對時，則此時在 md_highfast.c 程式之中會去呼叫 submacroblock_mode_decision 函
數，該函數一樣會呼叫 PartitionMotionSearch 函數，不同的是，在 submacroblock_mode_decision
函數之中，會先決定一種 8x8 以下的模式，並稱之為 P8x8。最後，當支援的模式區塊比對結
束時，將會與 SKIP 一起組成 inter 的模式，之後就會去呼叫 compute_mode_RD_cost 函數，
最後比較出最適合之模式。 
 
 由於 MRMS 的搜尋及模式選擇的部分不完全相同於 JM12.1 的方法，於是有一些地方必
須進行一些必要性的修改，圖 29 為程式修改之後的流程。MRMS 與 JM 源碼最大的不同點為： 
1. 必須進行二次的模式選擇。 
2. 並且必須進行縮圖的動作然後在執行區塊比對。 
以下為針對各階層的修改做說明： 
L2：該階層是以 4x4 區塊為大小並做±4 的搜尋比對，因為比例的關係，於是該階層的 4x4 區
塊大小會等同於在 L0 的 16x16 大小的區塊，於是利用四點取一點的方式將整個 16x16 的區塊
縮成 4x4 的區塊大小，再進行比對。最後得到最小及次小的 MV 值。 
L1：由於該階層必須決定出 16x16、8x16、16x8 及 8x8 這四種模式，按比例關係，於是等同
於在階層執行 8x8、4x8、8x4 及 4x4 這四種模式的區塊比對，類似於 L2 的做法，不同的是，
會將每一個 4x4 區塊的結果暫存起來，然後累加出各個形狀的區塊大小，再從此找出每一種
區塊的最小 MV 值為何，於最後透過 compute_mode_RD_cost 函數找出一種最適合的模式。 
L0：該階層會根據 L1 的結果而決定出只剩下哪些模式必須進行比對，其動作原理等同於 L1
的方式，只是該階層並不需要再進行縮圖的過程即可直接進行區塊比對。並將其結果與 intra
的模式一起透過 compute_mode_RD_cos 函數找出最適合的模式及 MV 值。 
 PartitionMotionSearch
BlockMotionSearch
compute_mode_RD_cost
 
 
 
 
 Encoding ME and mode-selection end
 
 
圖29 MRMS 函數關係 
 36
  38
第七章  實驗結果 
在實際評估 MRMS 的壓縮效能方面，除了將 MRMS 演算法實現於 H.264 源碼之外，
更進一步的與 H.264 源碼中的 FSBMA 進行比較。亦將所收集到之數據畫出其各別之位元
率失真曲線圖。其中測試了十八種不同的影像，其分別為：bridge-far、carphone、claire、
container、foreman、grandma、highway、mthr_dotr、news、salesman、silent、suzie、miss_am、
hall、coastguard、akiyo、acer 及 trevor。並將 QP（量化參數）值分別設為 4、12、20、28、
36 及 44。 
表二為 MRMS 及 FSBMA 的 Bit rate 及 PSNR 值比較。圖 30 到圖 48 分別為各影像
之位元率失真曲線圖。 
 
Seq. QP 
Bit rate (kbits/s) PSNR(dB) 
FSBMA MRMS 誤差 FSBMA MRMS 誤差 
bridge-close 
4 4384.00 4395.87 -11.87 59.3169 59.3333 -0.0164
12 2775.11 2777.51 -2.4 50.2497 50.2480 0.0017
20 1009.72 1007.83 1.89 42.0618 42.0641 -0.0023
28 103.80 103.38 0.42 34.9674 34.9562 0.0112
36 13.39 13.54 -0.15 31.9372 31.9628 -0.0256
44 6.08 6.06 0.02 30.2687 30.2278 0.0409
bridge-far 
4 4430.06 4432.94 -2.88 60.8924 60.8734 0.019 
12 2496.58 2500.80 -4.22 49.8745 49.8780 -0.0035
20 478.16 475.75 2.41 42.1884 42.1627 0.0257
28 7.73 7.58 0.15 38.0504 38.0400 0.0104
36 3.70 3.70 0 37.8919 37.8919 0 
44 3.94 3.94 0 37.8881 37.8881 0 
carphone 
4 3607.84 3667.51 -59.67 59.2928 59.2495 0.0433
12 1671.70 1736.58 -64.88 49.5911 49.5896 0.0015
20 711.49 755.04 -43.55 43.3079 43.2765 0.0314
28 257.88 281.01 -23.13 37.1234 37.0417 0.0817
  40
36 21.12 21.71 -0.59 31.1218 30.9592 0.1626
44 8.09 8.12 -0.03 27.6556 27.5441 0.1115
news 
4 1677.33 1708.51 -31.18 57.6381 57.7223 -0.0842
12 582.99 603.65 -20.66 48.8995 48.9043 -0.0048
20 269.53 280.99 -11.46 42.7020 42.6972 0.0048
28 114.82 120.93 -6.11 36.6914 36.6271 0.0643
36 38.19 41.15 -2.96 31.5332 31.4030 0.1302
44 12.87 13.30 -0.43 27.6744 27.4264 0.248 
salesman 
4 2827.56 2836.50 -8.94 58.1164 58.0967 0.0197
12 715.99 724.08 -8.09 48.4866 48.4509 0.0357
20 220.00 227.40 -7.4 41.4426 41.4240 0.0186
28 77.86 82.56 -4.7 35.5556 35.5557 -0.0001
36 20.20 21.45 -1.25 31.5075 31.3783 0.1292
44 8.02 7.95 0.07 28.2169 28.0155 0.2014
silent 
4 2404.67 2435.86 -31.19 58.0686 58.0520 0.0166
12 737.00 764.83 -27.83 48.8830 48.8675 0.0155
20 322.33 339.49 -17.16 41.8214 41.8397 -0.0183
28 122.12 130.36 -8.24 35.8648 35.9033 -0.0385
36 35.58 38.13 -2.55 31.6766 31.6305 0.0461
44 12.21 12.36 -0.15 28.1840 28.0794 0.1046
suzie_148 
4 3013.88 3051.22 -37.34 59.2696 59.2529 0.0167
12 1299.34 1333.48 -34.14 49.4131 49.4170 -0.0039
20 546.19 570.31 -24.12 43.0738 43.0645 0.0093
28 148.18 157.48 -9.3 37.1845 37.1330 0.0515
36 34.70 36.63 -1.93 32.4555 32.3207 0.1348
44 14.28 14.49 -0.21 28.8581 28.7175 0.1406
miss_am_148 
4 3162.64 3170.83 -8.19 59.6536 59.6044 0.0492
12 1209.94 1227.48 -17.54 49.9851 49.9938 -0.0087
20 261.90 271.04 -9.14 44.7703 44.6524 0.1179
28 63.55 66.59 -3.04 39.7736 39.6345 0.1391
36 15.20 15.21 -0.01 35.2094 35.0664 0.143 
44 7.83 7.79 0.04 32.1965 32.1596 0.0369
hall_299 
4 3626.59 3629.64 -3.05 59.5927 59.5546 0.0381
12 1725.66 1733.43 -7.77 49.7144 49.7096 0.0048
20 334.99 338.66 -3.67 42.7336 42.7142 0.0194
28 67.11 69.43 -2.32 37.3863 37.4147 -0.0284
 bridge-close
30
32
34
36
38
40
42
44
46
48
50
52
0 500 1000 1500 2000 2500 3000 kbit/s
PSNR
FSBMA
MRMS
 
圖30 bridge-close 位元率失真曲線圖 
 
 
bridge-far
36
38
40
42
44
46
48
50
52
0 500 1000 1500 2000 2500 3000 kbit/s
PSNR
FSBMA
MRMS
 
圖31 bridge-far 位元率失真曲線圖 
 42
 container
31
33
35
37
39
41
43
45
47
49
0 100 200 300 400 500 600 700 800 kbit/s
PSNR
FSBMA
MRMS
 
圖34 container 位元率失真曲線圖 
foreman
30
32
34
36
38
40
42
44
46
48
50
0 300 600 900 1200 1500 1800 2100 2400 kbit/s
PSNR
FSBMA
MRMS
 
圖35 foreman 位元率失真曲線圖 
 44
 mthr_dotr
30
32
34
36
38
40
42
44
46
48
50
0 200 400 600 800 1000 1200 kbit/s
PSNR
FSBMA
MRMS
 
圖38 mthr_dotr 位元率失真曲線圖 
 
news
31
33
35
37
39
41
43
45
47
49
0 100 200 300 400 500 600 700 kbit/s
PSNR
FSBMA
MRMS
 
圖39 news 位元率失真曲線圖 
 46
 suzie_148
32
34
36
38
40
42
44
46
48
50
0 200 400 600 800 1000 1200 1400 kbit/s
PSNR
FSBMA
MRMS
 
圖42 suzie_148 位元率失真曲線圖 
miss_am_148
35
37
39
41
43
45
47
49
0 200 400 600 800 1000 1200 1400 kbit/s
PSNR
FSBMA
MRMS
 
圖43 miss_am_148 位元率失真曲線圖 
 48
 akiyo_298
33
35
37
39
41
43
45
47
49
0 50 100 150 200 250 300 350 kbit/s
PSNR
FSBMA
MRMS
 
圖46 akiyo_298 位元率失真曲線圖 
acer_202
30
32
34
36
38
40
42
44
46
48
50
0 300 600 900 1200 1500 1800 2100 2400 kbit/s
PSNR
FSBMA
MRMS
 
圖47 acer_202 位元率失真曲線圖 
 50
  52
第八章  結論 
為解決 H.264 高複雜度運算效能及 HD 高資料量的比對次數，本研究計畫所提出的階層式
搜尋區塊比對結合模式選擇的 MRMS 演算法具有以下幾個特點： 
 階層式搜尋：MRMS 演算法採用階層式搜尋方式，階層式區塊比對演算法可以將整個
候選區塊有效的減少亦藉此來減少資料量。 
 規律性：MRMS 在每一階層皆採用 FSBMA 搜尋所以具有極高規律性且資料具有連續
性，所以有利於硬體實現，而連續性資料亦方便記憶體讀取。 
 複雜度：由複雜度公式的比較，可以瞭解到 MRMS 比 FSMBA 在 case 1 的條件下可以
降低高達 3315 倍的運算複雜度，在 case 2 的條件下也還可以降低 41 倍的複雜度。 
 資料再利用率：MRMS 的硬體架構方面，由於參考了 BSU 架構，可以有效的減少運
算資源，並增加資料利用率。 
 區塊比對：MRMS 支援 H.264 可變區塊區塊比對法。 
 Mode Select：MRMS 支援 H.264 之模式選擇。 
 
 
 
 
 
 
 
 
  54
第十章  參考文獻 
[1]  I.E.G. Richardson, H.264 and MPEG-4 Video Compression, John Wiley & Sons, 2003. 
[2]  J. H. Lee, K. W. Lim, B. C. Song, and J. B. Ra, “A fast multi-resolution block matching 
algorithm and its VVLSI architecture for low bit-rate video coding,” IEEE Transactions on 
Circuits and Systems for Video Technology, vol. 11, no. 12, pp. 1289–1301, Dec. 2001. 
[3]  C. N. Chen and Y. C. Su, “The Design and Implement of a Multi-Resolution Motion 
Estimation VLSI Architecture,” Multimedia and Network System Conference 2006, pp.56, 
2006. 
[4]  J.F. Shen, T.C. Wang and L.G. Chen, “A novel low-power full-search block-matching 
motion-estimation design for H.263+,” IEEE Trans. Circuits and Systems for Video 
Technology, pp.890-897, 2001. 
[5]  L. de Vos and M. Schobinger, “VVLSI architecture for a flexible block matching processor,” 
IEEE Trans. Circuits and Systems for Video Technology, Vol.5, pp.417-428, 1995. 
[6]  Z. He, M. L. Liou, Philip.C.H. Chan, and R. Li,“An Efficient VVLSI Architecture for New 
Three-step Search Algorithm,” Proceeding of the 38th IEEE Midwest symposium on Circuits 
and Systems, vol.2, pp.1228-1231, 1996. 
[7]  P. Pirsch, “VVLSI Architectures for Video Compression-A Survey,” Proc. IEEE, Vol.83, 
pp.220-246, 1995. 
[8]  A.P. Chandrakasan and R.W. Brodersen, “Minimizing Power Consumption in Digital CMOS 
Circuits,” Proceedings of the IEEE, Vol. 83, pp.498-523, 1995. 
[9]  L. Thuyen and M. Glesner, “Configurable VVLSI-architectures for both standard DCT and 
shape-adaptive DCT in future MPEG-4 circuit implementations,” IEEE Trans. Circuits and 
Systems, vol. 2, pp.461-464, 2000. 
  56
[19]  S. Y. Yap and J. V. McCanny, “A VLSI Architecture for Variable Block Size Video 
Motion Estimation,” IEEE Trans. Circuits and Systems, pp.384-389, Vol. 51,2004. 
[20]  C.-Y. Cho, S.-Y. Huang, and J.-S. Wang, “An embedded merging scheme for 
H.264/AVC motion estimation,” Image Processing, 2003. Proceedings., International 
Conference on, vol. 1, pp. I909-12, 14-17 Sep 2003. 
[21]  C. Y. Cho, S. Y. Huang, J. N. Hwang  and J. S. Wang,” An embedded merging scheme 
for VVLSI implementation of H.264/AVC motion estimation modules, ” Image Processing, 
2005. ICIP 2005. IEEE International Conference on, Vol.3,  pp.III- 1016-19, 11-14 Sept. 2005 
[22]  Z. Zhou and M.-T. Sun, “Fast macroblock inter mode decision and motion estimation for 
H.264/MPEG-4 AVC,” in Proceedings of the IEEE International Conference on Image 
Processing (ICIP '04), vol. 5, pp. 789–792, Singapore, Singapore, October 2004. 
[23]  K.H. Han and Y. L. Lee, “Fast Macroblock Mode Determination to Reduce H.264 
Complexity,” IEICE Transactions on Fundamentals of Electronics, Communications and 
Computer Sciences, vol.E88-A n.3, pp.800-804, March 2005  
[24]  B. D. Choi, J. H. Nam, M. C. Hwang, and S. J. Ko, “Fast Motion Estimation and 
Intermode Selection for H.264, ” EURASIP Journal on Applied Signal Processing, Vol. 2006 , 
8 pages, June 2006 
[25]  S. Kato, K. Sugimoto, F. Moschetti and Choong Seng Boon, “ Hierarchical mode search 
with classification of bisectional prediction modes based on the position of motion boundary 
[video coding], ” Image Processing, 2004. ICIP '04. 2004 International Conference on, Vol.1, 
pp.485-488, 24-27 Oct. 2004 
[26]  H. Kim and Y. Altunhasak, “Low-complexity macroblock mode selection for H.264-AVC 
encoders,  ” Image Processing, 2004. ICIP '04. 2004 International Conference on, Vol.2,  
pp.765-768,  24-27 Oct. 2004 
 
