行政院國家科學委員會補助專題研究計畫成果報告
 
 
在樹形結構同儕網路上快速廣播方法之研究 
Fast Broadcast In Tree-Structured P2P Networks 
 
計畫編號：NSC 95－2221－E－029－018－ 
執行期間：2006 年 08月 01日至 2007 年 12月 31日 
計畫主持人：林正偉 東海大學資訊管理學系 
計畫參與人員：陳澤龍、黃彥菱 
 
中文摘要 
 
關鍵詞：對等式網路、分散式雜湊表、動態適應、擴張樹、廣播排程 
 
廣播(broadcast)能力是執行許多網路功能不可或缺的重要機制，如事件廣域通知、非
結構化資料檢索、聚合資料調查等。在傳統的網路上，廣播訊息可以跟據網路的拓樸結構
有效的傳送到網路上的每一個節點。然而，如何在對等式(peer-to-peer)網路上進行廣播卻
不是一件直覺的事。對於拓樸結構相對起來較為穩定的特定結構化對等式網路應用，我們
設計出一個由下而上的廣播排程演算法(Broadcast Schedule Rearranger，簡稱 BSR)，在結
構化對等式網路上建立一個廣播擴張樹(spanning tree)，並進一步在其上調整廣播排程。實
驗結果顯示 BSR 可以有效的重新安排廣播排程，使得完成廣播所需的時間降低到與理論
最短時間十分接近。 
 
Abstract 
 
Keywords: Peer-to-peer network, Distributed Hash Table, Adaptive, Spanning Tree, Broadcast 
Scheduling 
 
Broadcasting messages to all nodes in a network is considered as a basic service to 
support many network operations, such as global notification of an event, arbitrary or 
semi-structure queries, aggregation of distributed information, and so no. In traditional network 
infrastructure, broadcasting can be accomplished efficiently according to the network’s topology. 
However, in P2P networks, broadcasting is several more difficult due to the inherent 
metamorphosis of P2P networks. For long-run applications, we have developed an algorithm, 
denoted as BSR (Broadcast Schedule Rearranger), which builds a broadcast spanning tree in a 
structured DHT-based P2P network, and then schedules the forwardings of non-leaf peers in the 
tree. Experiment results show that the broadcast time needed to disseminate a message to all 
peers is significantly reduced. 
 
一、緒論 
 
近年來，對等式網路(peer-to-peer networks，或稱 P2P網路、點對點網路、同儕網路)[1]-[9]
吸引了許多研究人員的注意。集合網路上的資源(如 CPU power、storage等)，透過分散式
的管理，對等式網路可以提供巨大的計算能力和儲存空間，如 P2P Storage System [21]、
P2P Grid environments [22]等研究均顯示出對等式網路在未來網路應用上面將扮演重要的
角色。今日，對等式網路已經被廣泛的使用在檔案分享應用上面。 
多數的結構化(structured)對等式網路使用分散式雜湊表(Distributed Hash Table，簡稱
DHT)做為節點及物件定址的根據，以特定的拓樸結構來決定任意兩節點之間的路由路
徑，如 CAN [5], Pastry [6], Tapestry [7], Chord [8], Kademlia [9]等等。使用 DHT，可以讓對
等式網路上的任意一個節點很容易地透過一個物件的名稱(key)找到存放該物件(value)的
節點的位址，進而取得該物件。然而，相對於(key, value)這種較為簡單的關連式查詢，DHT
擴張樹上的父親節點。我們假設有一個連續的環狀 DHT 位址空間，大小為2s。大部份的
DHT都可以被映射到類似的空間。這個網路上的每一個節點x擁有這個環狀空間的一個連
續位址子空間[x, w)，w為x的立即後繼者(immediate successor)。 
我們定義父親函數Ps(x)如下： 
 
  Ps(x)=
⎩
⎨
⎧
x-(x-α)/β , for α+2s-1≥x>α
x+(α-x)/β , otherwise,           (1) 
 
其中α是一個所有節點共同約定的一個位址常數，在 DHT位址空間上，用來定義擴張樹的
樹根節點。而β是一個大於 1的常數，與樹的高度相關。 
我們定義 
 
  Psi(x)=
⎩
⎨
⎧
Ps(x) , i=1
Ps(Psi-1(x)) , i>1.
            (2) 
 
我們很容易可以看出，Psi(x)比Psi-1(x)更靠近α，而且Ps∞(x)會趨近α，即 
 
  Ps∞(x)=α.                (3) 
 
對於任一節點x，Ps(x), Ps2(x), …, Ps∞(x)的位置分佈有兩種情形。1)Ps(x), Ps2(x), …, 
Ps∞(x)全部在x所擁有的位址子空間[x, w)內，如圖二(a)所示，在這種情形下，x為擴張樹的
樹根；2)存在一個i，使得Ps(x), Ps2(x), …, Psi-1(x)在[x, w)內，而Psi(x), …, Ps∞(x)不在，如圖
二(b)與(c)所示，在這種情形下，x在擴張樹的父親節點定義為擁有包含Psi(x)的位址子空間
[y, z)的節點y，z為y的立即後繼者。由於Psi(x)會不斷的向α趨近，我們可以肯定不會形成迴
路，且只有一個樹根。當所有的節點都利用父親函數決定自己的角色後，一棵擴張樹就建
立了。 
實務上，隨著節點的加入與離開而造成網路拓樸改變時，網路上的每一個節點會不斷
的檢查自己的狀態。當節點x發現α落入它所擁有的位址子空間[x, w)後，它就變成擴張樹
的樹根。若不然，x依序計算Ps(x), Ps2(x), …, Psi-1(x)，直到發現有一個i使得Psi(x)跳脫[x, w)，
這時x利用該 DHT所提供的節點查詢函式，尋找擁有包含Psi(x)的位址子空間的節點y。x向
y做出請求，成為y在擴張樹中的兒子。 
很明顯的，這個構建擴張樹的方法是全分散式的，而且每個節點尋找父親節點的成本
很低。由於節點所擁有的位址子空間會隨著節點的加入或者離開而改變，父親節點也可能
因此發生變化。因此每個節點都會持續監督網路的狀態，來確定父親節點的狀態。當父親
節點的狀態發生改變時，它必須重新計算新的父親節點，重新連結到擴張樹上。 
 
2. 廣播排程與問題定義 
 
對於一棵擴張樹上的廣播排程，我們正式定義如下。 
 
對於一個樹形結構T(V, E)，V={1, 2, 3,…, |V|}為T上節點之集合，其中 1為T的樹根，E為
 
圖二：利用父親函數定義節點在擴張樹中的父親節點 
由 Lemma 1，我們知道，任意樹至少有
一個(也許很多個)最佳廣播排程，每一個節
點會比它的子孫早接收到廣播訊息，其對應
的到達陣列 A會如圖四所示。根據收到廣播
訊息的時間，我們可以將擴張樹分解成許多
層，如同洋蔥一樣。這個發現，促使我們考
慮使用『剥洋蔥法』來尋找最佳廣播排程。
與其讓已經收到廣播訊息的節點漫無目標
地尋找尚未收到廣播訊息的節點，不如反過
來，由尚未收到廣播訊息的節點去尋找已經
收到廣播訊息的節點，而這些收到廣播訊息
的節點，會在擴張樹上較上層的地方。如同
剥洋蔥一般，我們試著先找出在最後一個時
間點收到廣播訊息的節點，這些節點應該會
在擴張樹的最底層；然後，將這些節點去除
掉，得到一個較小的樹。接下來，再找出在
倒數第二個時間點收到廣播訊息的節點。這
個過程一直重複下去，直到所有的節點都找
到他們的上游節點，如圖五(a)~(d)所示，圖五
(e)以相同顏色呈現出擴張樹上在相同時間
點得到廣播訊息的節點。 
 
三、BSR (Broadcast Schedule Rearranger)
演算法 
 
針對變動較不頻繁的結構化對等式網路
應用，如多媒體串流系統，我們根據上述的『剥洋蔥法』，設計出一個演算法，稱為 BSR，
在結構化對等式網路上建立一個廣播擴張樹，並進一步在其上調整廣播排程，使得完成廣
播所需的時間降低到與理論最短時間十分接近[23]。 
BSR演算法如圖六所示。S是計算用的不可行排程，S*是以相反的順序執行 S得到的可
行排程。令 R*=Cost(S)，S中在第 1, 2, …, R*時間點執行的訊息傳送，在 S*中則反過來分
別在 R*, …, 2, 1時間點執行。亦即 
 
  ∀(k, u→v)∈Sk⇔(R*-k+1, u→v)∈S*R*-k+1    (4) 
 
。BSR有兩個主要的迴圈。外面的大迴圈(第 4-25行)，每一回合計算在一個單位時間內有
那些節點可以進行的訊息傳送，依序計算S1、S2…SR*，亦即S*R*、S*R*-1…S*2、S*1。 
每一回合，BSR 會從擴張樹的底部開始，讓每一個還未找到上游節點的白色節點往上
尋找一個白色或紅色的節點作廣播排程的調整(第 7到 20行)，調整的方式如圖七(a)-(c)、
圖八所示。當這個回合所有可能的調整都完成後，BSR會重漆節點的顏色，為下一個回合
準備，如圖七(c)-(d)所示。 
 
圖五：『剥洋蔥法』尋找最佳廣播排程 
令 S=∅, S*=∅, 所有節點漆為白色 
將所有的節點根據在擴張樹的高度由大到小排序 
令 k=0  // k為總回合數 
While 尚有節點(白色，樹根除外)還未找到上游節點 
  // 開始一個新回合 
  k=k+1 
  For還未嚐試去找上游節點的節點中深度最深的節點 v 
     找一個白色或紅色的祖先節點 u 
     If u是白色 
        // 調整Sk, 如圖七(a)~(c)所示 
        把(k, u→v)加入 S 
        把 u漆為黑色, v漆為綠色 
     End if 
     If u是紅色 
        // 調整Sk-1, 如圖八所示 
        把(k-1, x→u)、(k-1, v→w)從 S移除 
        換成(k-1, x→v)、(k-1, u→w) 
        把 u漆為白色, v漆為紅色  
     End if 
  End for 
  // 重新漆色，為下一個回合準備，如圖七(c)~(d)所示 
  把所有紅色節點漆為紫色 
  把所有綠色節點漆為紅色 
  把所有黑色節點漆為白色 
End while 
For all (t, u→v) in S, insert (k-t+1, u→v) into S* 
Round(S*)=R*=k 
圖六：BSR演算法。在第 k回合，紫色節點表示
在 2回合前(第 k-2回合前)已經找到上游節點，
不再調整。紅色節點表示在上一回合(第 k-1回
合)找到上游節點，可能會調整(第 14-19行)。綠
色節點表示在這個回合中找到一個黑色節點作
為上游節點(第 9-13行)。白色節點表示在本回合
中尚未做出選擇的節點。 
[4] Napster, http://www.napster.com. 
[5] Sylvia Ratnasamy, Paul Francis, Mark Handley, Richard Karp, and Scott Shenker, “A Scalable Content Addressable 
Network,” Tech. Report TR-00-010, Berkeley, CA, 2000. 
[6] Antony Rowstron and Peter Druschel, “Pastry: Scalable, Decentralized Object Location, and Routing for Large-Scale 
Peer-to-Peer Systems,” Lecture Notes in Computer Science 2218 (2001). 
[7] Ben Y. Zhao, John D. Kubiatowicz, and Anthony D. Joseph., “Tapestry: An Infrastructure for Fault-Tolerant Wide-Area 
Location and Routing,” U.C. Berkeley Technical Report UCB//CSD-01-1141, April 2000. 
[8] I. Stoica, R. Morris, D. Karger, M. Kaashoek, and H. Balakrishnan, “Chord: A scalable peer-to-peer lookup service for 
internet applications,” Tech. Report TR-819, MIT, January 2002. 
[9] Petar Maymounkov and David Mazires, “Kademlia: A Peer-to-Peer Information System Based On the XOR Metric,” 
International Workshop on Peer-to-Peer Systems (IPTPS’02), 2002. 
[10] E. P. Markatos, “Tracing a Large-Scale Peer to Peer System: An Hour in the Life of Gnutella”, International Symposium 
on Cluster Computing and the Grid, 2002. 
[11] M. Ripeanu, I. Foster, and A. Iamnitchi, “Mapping the Gnutella Network: Properties of Large-Scale Peer-to-Peer Systems 
and Implications for System Design,” International Workshop on Peer-to-Peer Systems (IPTPS’02), 2002. 
[12] Stefan Saroiu, P. Krishna Gummadi, and Steven D. Gribble, “A Measurement Study of Peer-to-Peer File Sharing Systems,” 
Multimedia Computing and Networking (MMCN ’02), San Jose, USA, 2002. 
[13] Matthew Harren, Joseph M. Hellerstein, Ryan Huebsch, and Boon Thau Loo, “Complex Queries in DHT-Based 
Peer-to-Peer Networks,” Interational Workshop on Peer-to-Peer Systems (IPTPS’02), 2002. 
[14] Sameh El-Ansary,Luc Onana Alima,Per Brand,and Seif Haridi, “Effcient Broadcast in Structured P2P Networks,” 
Interational Workshop on Peer-to-Peer Systems (IPTPS’03), 2003. 
[15] Ali Ghodsi, Luc Onana Alima, Sameh El-Ansary, Per Brand, and Seif Haridi, “Self-Correcting Broadcast in Distributed 
Hash Tables”, IASTED International Conference, Parallel and Distributed Computing and Systems, 2003. 
[16] Ji Li, Karen Sollins, Dah-Yoh Lim, “Implementing Aggregation and Broadcast over Distributed Hash Tables,” ACM 
Computer Communication Review, Volume 35, Number 1, January 2005. 
[17] Sylvia Ratnasamy, Mark Handley, Richard Karp, and Scott Shenker, “Application-Level Multicast Using 
Content-Addressable Networks,” International Workshop on Networked Group Communication (NGC ’01), 2001. 
[18] Hung-Chung Hsiao and Chung-Ta King, “Scoped Broadcast in Dynamic Peer-to-Peer Networks”, International Computer 
Software and Applications Conference (COMPSAC’05), 2005. 
[19] Hung-Chung Hsiao and Chung-Ta King, “Tornado: A Capability-Aware Peer-to-Peer Storage Overlay”, Journal of Parallel 
and Distributed Computing, 64(6):747-758, June 2004. 
[20] Ion Stoica, Dan Adkins, Sylvia Ratnasamy, Scott Shenker, Sonesh Surana, and Shelley Zhuang, “Internet Indirection 
Infrastructure,” International Workshop on Peer-to-Peer Systems (IPTPS’02), 2002. 
[21] Athicha Muthitacharoen, Robert Morris, Thomer M. Gil, and Benjie Chen, “Ivy: A Read/Write Peer-to-Peer File System,” 
Symposium on Operating Systems Design and Implementation, 2002. 
[22] Ben Paechter, T. Baeck, M. Schoenauer, A.E. Eiben, and J. Merelo, “A Distributed Resource Evolutionary Algorithm 
Machine,” Congress on Evolutionary Computation (CEC 2000), San Diego, USA, 2000. 
[23] Jeng-Wei Lin, “A Bottom-Up Approach to Redirect A P2P Broadcast Spanning Tree,” Mosharaka International Conference 
on Communications, Networking and Information Technology, Amman, Jordan, 2007. 
[24] Jeng-Wei Lin, “Rearrange Broadcast Schedules on DHT-Based Peer-to-Peer Networks,” International Conference on 
Information Networking 2008, Busan, Korea, 2008. 
[25] OpenDHT. http://opendht.org. 
 
 
