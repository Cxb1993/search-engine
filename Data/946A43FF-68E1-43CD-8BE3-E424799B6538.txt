find the relations of the system processes by using 
the aggregation technology to improve the detection 
rate of traditional dynamic malware detection. For 
the evaluation of our proposed system, we execute the 
malware samples in the virtual machine and using 
process monitor tool to recorded system processes, 
and then detect whether our system can detect the 
malware or not. Experimental results show that we can 
detect 11% malware used the multiple processes to 
complete malicious intent in the 140 malware samples, 
and improve the weakness of previous studies which 
must used white list to avoid false positive. 
英文關鍵詞： Transparent malware, behavioral detection, system 
call, self-replication, survival intent, dependence 
matrix 
 
摘要 
透通型惡意程式可以隱身在合法程式後面進行惡意行為而嫁禍於人，容易造
成誤判的情形。雖然目前這類惡意程式約佔所有惡意程式約 19%的比例，但過去
利用系統呼叫的行為來偵測惡意程式的研究，大多採用以行程(process)為追蹤
單位，認為惡意程式是一個或一群可獨立運作的行程，使得這樣的方法是不適用
於偵測透通型惡意程式的存在。過去研究也顯示利用偵測存活意圖行為來偵測惡
意程式是有效的方法，但這些研究僅適用在未受感染的電腦中偵測惡意程式的入
侵行為，可是在實際的應用環境中要達到這個前置條件是有困難。 
針對此問題本研究提出聚合式偵測技術來改善，所謂聚合式偵測是指系統中
所有可執行模組(Module)從自我複製與存活意圖兩個特徵來分析，這些模組聚合
分析後具有此二特徵時，我們便認為此為惡意程式，為實現聚合分析本研究以相
依矩陣來記錄系統中所有模組，並提出演算法進行偵測，藉此以改善傳統惡意程
式行為偵測的缺陷。本研究中實驗了 140支惡意程，其中有 11%惡意程式具有利
用多模組來完成自我複製行為，在 J.A.Mories 以及 V.Skormin 等研究中將會對
該類型惡意程式產生漏報，本研究採聚合偵測技術克服此缺點並成功偵測出此類
型惡意程式，此外在惡意程式存活行為偵測改善了先前研究須採用白名單的缺點，
降低了誤報的情形。  
關鍵詞：透通型惡意程式、行為偵測、系統呼叫、自我複製、相依關係矩陣 
 
ABSTRACT 
As transparent malware leverage legal process to perform evil actions, they are 
easy to mislead the judgment of malware detectors. Although this kind of malware 
stands about 19% of all malware, traditional malware detectors are hard to detect 
them for their tracking granularity is set to process. Previous researches also indicated 
that the survival intention is an important feature of malware, unfortunately, most of 
these systems need to be started from a „clean‟ system. This assumption is not very 
easy to achieve in practical environments. In this project we propose the use of 
dependency structure matrix to record the behavior of all process in user‟s system and 
also propose an algorithm to detect multiple processes‟ self-replication and survival 
behavior, find the relations of the system processes by using the aggregation 
technology to improve the detection rate of traditional dynamic malware detection. 
For the evaluation of our proposed system, we execute the malware samples in the 
virtual machine and using process monitor tool to recorded system processes, and 
then detect whether our system can detect the malware or not. Experimental results 
show that we can detect 11% malware used the multiple processes to complete 
malicious intent in the 140 malware samples, and improve the weakness of previous 
studies which must used white list to avoid false positive.     
Keyword：Transparent malware, behavioral detection, system call, self-replication, 
survival intent, dependence matrix 
 
但這個方法仍屬於前述以程序中心為導向的惡意程式偵測技術，並存在著以下缺
點：(1) 所觀察到的行為不完整：只觀察到單一 process 的行為，若惡意程式有
其他共犯惡意檔案在同時執行時則無法完整監控、偵測其完整的惡意行為。(2)
誤判：如上圖(一)所示的惡意程式，傳統 Behavior Base 偵測方式將會看到
Explorer.exe 在各個實體儲存裝置間複製、散布，以[6][8]方式無法偵測到此惡意
程式的複製行為，另外該惡意程式也會利用 Explorer.exe 各目錄底下產生
autorun.inf 在 Ming-Wei WU [11]與 Yi-Min Wang [12]研究中將會誤判 Explorer.exe
為惡意程式然而事實上該惡意程是利用Kava0.dll來操控Explorer.exe進而達到複
製目的。 
因此本研究提出以聚合式偵測方式來改善上述動態偵測技術因以程序中心
為導向而產生的缺點，在本研究中聚合式偵測技術表同時監控使用者系統中所有
模組((Module：此處表 PE 格式檔案)的行為，並找出模組與模組間的關聯，偵測
模組聚合後是否會產生自我複製以及存活意圖此兩種特徵，為了達成此一目的，
本研究提出利用相依矩陣來系統中所有模組的行為。相依矩陣為一對稱矩陣，其
目的是為了讓工作流程最佳化而採用的一種方法[17]，矩陣中每一行或列皆代表
系統中某一模組的行為，本研究修改原始相依矩陣中每個元素的格式，令其表示
各種不同的系統呼叫，如下圖(二)位置(1，2)表示模組 A 建立(CreateProcess) 模
組 B，位置(2，4)表模組 B 建立模組 D。 
 模組 A 模組 B 模組 C 模組 D 
模組 A 0000000 0000001 0000000 0000000 
模組 B 0000000 0000000 0000000 0000001 
模組 C 0000000 0000000 0000000 0000000 
模組 D 0000000 0000000 0000000 0000000 
圖二、相依矩陣示意圖 
 
本報告的結構如下：第二節為相關研究，包含先前利用自我複製行為以及惡
意程式存活意圖來進行惡意程式偵測相關技術，第三節為研究方法及所利用的矩
陣模型以及偵測方法，第四節為實驗環境與與實驗結果，第五節為結論。 
2.相關研究 
 J.A.Morales[6]研究中認為若惡意程式被歸類為病毒，則自我參考複製(SRR：
Self-Reference Replication)必為其主要特徵之一，因此該惡意程式所展現的行為
中必會有一連串的讀檔案(ReadFile)與寫檔案(WriteFile)的系統呼叫來達成自我
參考複製，並且過程中可能會透過一個或多個記憶體暫存空間來完成。如圖三，
VX1.exe 將自己讀入記憶體佔存空間 M2 及 M3，最後再寫出為 VX2.exe。自我
3.聚合偵測技術 
本研究考量惡意程式會利用合法程序或是共犯程序來完成自我複製以及存
活意圖行為，所以若只監控單一程序時，將無法得到其完整行為而無法成功判斷
出其是否具有上述惡意行為特徵。因此本研究透過相依關係矩陣來紀錄系統中所
有模組(執行檔、動態函式庫、驅動程式)的活動。 
 在自我參考複製行為特徵上，當偵測到某一模組有寫出 PE File 時，則嘗試
找出相關模組間是否存在 DLL Injection 關係或是相依關係，當存在著前述關係
時，參與自我複製行為的模組將形成如圖五所示的迴圈。因此在相依關係矩陣中
若發現迴圈，此時將參與迴圈的模組行為經過聚合後，可將其行為特徵推論回[17] 
[18]所定義的自我參考複製行為，並依此判定相關模組為可疑模組。 
 
圖五 自我參考複製行為中的迴圈（圖片來源:本研究） 
 對於惡意程式自我餐可複製的行為特徵，本研究歸納出下列四種行為模式，
其中模式一、模式二、模式三皆有迴圈形成，： 
模式1: 如圖六(a)，此行為同[6][7][8]等學者定義的自我參考複製行為，單
一程序讀取自己後，再寫出到實體儲存裝置中。 
模式2: 如圖六(b)，M1 首先寫出惡意 DLL 檔 M2，接著利用 DLLinjection
技術，將 M2 載入合法程式中，再利用合法程式 M3 執行 ReadFile 或  
    CreatefileMapping 系統呼叫讀取 M1 之後再將其複製出為 M4。 
模式3: 如圖六(c)，M2啟動M3 (微軟作業系統內建的合法程序如cmd.exe、
Conime.exe) 後，利用 M3 讀取 M1 再寫出 M3。 
模式4: 如圖六(d)，M1 執行後會丟出數個檔案 M2 及 M3，M2 讀取 M3 後
再將其寫出成 M4。 
在上述惡意程式自我複製的四個行為模式中，只有第一個行為模式合乎
先前研究自我參考複製的定義，然而像惡意程式 krap[13]、Vaklik[14]、
Katusha[16]等屬於第二個行為模式(以 Magania 為例，當它在受害者主機上執
行時，首先它會產生 nodqq0.dll 並將其植入 Explorer.exe 中，隨後 Explorer 會
執行 CreateFileMapping 系統呼叫讀取 Magania.exe，再將其複製成 ca.exe 並
散佈到各個實體儲存裝置的根目錄中，如圖一所示。)，Pioloyd 等屬於第三個
行為模式，Welchia 等屬於第四個行為模式。前述所列舉的惡意程式其共同特
         
(a)                                          (b) 
圖七.本研究與先前研究自我參考複製定義之差別示意圖 （圖片來源:本研究） 
 
    當惡意程式行為特徵為自我參考複製行為模式三時，相關模組間行為透過
ProcessCreate 系統呼叫建立出執行複製模組與被複製模組間的相依關係。所謂相
依關係為，若 A 程式必須依賴於 B 程式才可存活於系統中，則稱 A 程式相依於
B 程式，如圖八，M2 相依於 M1，M3 相依於 M2， 相關模組行為和讀取行為聚
合貣來看，則會形成 M2→M1→M3→M2 的迴圈，此時我們將 M3 的行為認為是
由 M1 所控制，所以 M3 讀取 M1 的行為視為 M1 讀取自己，因此將該行為模式
推論回先前研究所定義的自我參考複製行為，因此若矩陣中偵測到迴圈存在，則
表示系統中存在惡意自我參考複製行為。  
 當惡意程式行為特徵為自我參考複製行為模式四時，相關模組間行為透過
ProcessCreate、WriteFile 系統呼叫建立出執行複製模組與被複製模組間擁有共同
父模組的關係，如圖九。M2、M3 皆由 M1 所寫出，因此 M2 與 M3 擁有相同父
模組，若將相關模組行為和讀取行為聚合貣來看，則認為 M2、M3 的行為可視
為 M1 的一部分，因此將行為模式推論回先前研究所定義的自我參考複製行為，
並將此關係中所包含的所有模組皆列為可疑的惡意模組。 
 在[11][12]研究中，對於惡意程式存活意圖偵測著重在監控程序是否有存取
ASEP 行 為 ， 如 圖 十 (a) 木 馬 程 式 Swizzor 會 利 用 dwdsregt.exe 對
HKLM\SOFTWARE\Microsoft \Windows\CurrentVersion\Run 進行註冊，以確保下
次受害者重新啟動電腦時，dwdsregt.exe 可以自動執行。在先前研究中當偵測到
dwdsregt.exe 試圖存取、修改 ASEP 時即判斷該程序為惡意程式。但是在合法程
式中也會有存取 ASEP 行為，如圖十(b)，防毒軟體 Avria.exe 再進行安裝時，會
對 HKLM\SOFTWARE\Microsoft \Windows\CurrentVersion\Run 進行註冊，令電腦
重新啟動時可以自動執行 Start Antivir.exe。比較圖十(a)與圖十(b)後可以發現若以
程序導向的觀念來偵測存活意圖時，將無法分辨惡意程式與合法程式間的差別，
因此先前研究的偵測方法皆會有嚴重的誤判(False Positive)的情形存在。 
4. 實驗與結果分析 
 本計畫在微軟作業系統上利用 Virtual PC 建立虛擬環境，且在未受惡意程式
感染的環境(系統中不存在任何惡意程式)中執行惡意程式樣本，惡意程式樣本來
源為 VX Heaven [24]以及 offensive computing[25]網站所提供，虛擬環境中所執行
作業系統為 Win XP SP2，惡意程式執行時以 Process Monitor 紀錄系統中所有程
序所產生的系統呼叫。Process Monitor 為由微軟所提供的系統安全檢測工具，其
會即時記錄系統中所有程序的活動，包括檔案系統、網路、Window 登入檔等的
相關活動，最後再將其產生的紀錄載入相依關係矩陣以供後續分析及偵測。 
    本實驗流程分為三部份。第一部份為前測部分，訓練資料集包含了 50 支惡
意程式樣本，微軟作業系統中共 46 支合法程序，以及通過卡巴斯基、賽門鐵克、
Anti-vir等防毒軟體驗證的合法軟體在執行安裝過程時所產生的50支合法程序。
由於合法程式在執行安裝動作時，也會利用 ReadFile 以及 WritleFile 產生 PE 格
式檔案，因此該部份的實驗目的為區分出惡意程式與合法程式在產生 PE File 時
的不同行為特徵，找出前述章節中提到檔案大小 T1 門檻值、矩陣搜尋深度 T2
門檻值、檔案大小差異 T3 門檻值以及自我複製完成時間 T4 門檻值。我們利用
T1、T2 門檻值在進行矩陣搜尋前先過濾掉合法程式，T3 門檻值則限制了矩陣的
搜尋深度，以降低矩陣搜尋時所消耗的時間及系統資源，T4 則為了區分出正常
系統中的檔案備份動作，與惡意程式自我複製行為的差別。 
    第二部份實驗為偵測率分析，分析樣本包括了 140 支惡意程式樣本以及通過
卡巴斯基、賽門鐵克、Anti-vir 等防毒軟體驗證的合法軟體在執行安裝過程時所
產生的 50 支合法程序。此部分樣本不包含前述事前訓練中的樣本資料集，此外
該部份實驗仍包含微軟作業系統中共 46 支合法程序，實驗目的為驗證本研究中
提出聚合式自我複製行為與存活意圖行為偵測技術對於惡意程式的偵測能力。 
    第三部份為與商業防毒軟體 Nova Shield[26]、ClamAV[27]比對，驗證本研究
採取的聚合式偵測技術，能偵測出以多個程序共同完成自我複製行為，並可以有
效偵測知型態惡意程式。 
實驗首先啟動未受惡意程式感染虛擬環境，並執行惡意程式，執行時間為五
分鐘。紀錄的資料載入相依關係矩陣後進行自我複製與存活意圖行為偵測，若未
偵測出惡意程式則視為漏報(False Negative)，若偵測出惡意程式，但未能在
SOPHOS 中找出相關資料為誤報。在自我複製行為偵測部份，門檻值的參數設定
如表一，自我參考複製實驗結果如表二所示。在自我參考複製行為偵測上由於蠕
蟲可能藉由 E-mail 或是網路來達成其散佈的目的，而本研究偵測方式侷限於分
析單一系統內模組的行為，因此有部分蠕蟲未能發現其自我參考複製行為，
Trojan較少展現出自我複製行為，但其大部分皆具有存活意圖行為，在病毒(Virus)
方面，感染行為(Injection)可能只植入片段程式碼，因此本研究中會認為該病毒
此動作為寫出不屬於自我參考複製行為，因此仍有部分 Virus 未能偵測出。 
 
 
 
達 503 個不同版本，可見該惡意程式頻繁的進行變種，其中在卡巴斯基三月份報
告中更指出[28]，該惡意程式除了快速變種外，也採用加殼壓縮技術，增加靜態
偵測分析的困難度，因此造成該蠕蟲不斷的出現在 2010 年各月份前 20 名感染主
機數量最多的報告中，在防毒軟體更新病毒檔前對新型態惡意程式無抵抗能力，
此時惡意程式所造成的威脅最大。 
 
圖十一.  Nova Shield 判斷 xxx.exe為自我複製 （圖片來源: [26]） 
 
表三.  利用多個程序共同完成自我複製行為惡意程式(製表: 本研究) 
     
    為了驗證上述傳統靜態偵測技術缺點，在本研究中蒐集了 152 支 krap 惡意
程式家族，並將檔案上傳至 Virus total[29]網站，該網站為提供約 40 家防毒軟體
針對所上傳檔案的掃描結果，在這 152 支 Keap 家族中，並非每一隻都可以被每
一家防毒軟體所偵測出來，例如：2010 年 9 月 27 號卡巴斯基判斷出 9b8kmipy.com
為惡意程式 packed.win32.krap.b，ClamAV 同時也判斷出該檔案為惡意程式
  
參考文獻 
[1] Moser, A., Kruegel, C., and Kirda, E. 2007. Exploring Multiple Execution Paths 
for Malware Analysis. In IEEE Symposium on Security and Privacy, Oakland 
 [2] B. Krebs. 2007.Mpack exploit tool slips through security holes. The Washington 
Post, June. 
 [3] Fossi,  M.,  2008,Johnson, Symantec global Internet security threat report 
trendsfor. 
 [4] Marcus, D., Greve, P., Masiello, S., and Scharoun, D. 2009.  Mcafee threats 
report: Third quarter 2009. 
 [5] Manuel Egele, 2011. A Survey on automated dynamic malware analysis 
techniques and tools, ACM Computing Surveys. 
[6] Jose Andre Morales. 2008. Identification of file infecting virus through detection 
of self-reference replication, Springer  
[7] Jose Ander Morales, 2008. Characterizing and detecting virus replication, Third 
International Conference on Systems  
[8] V.skormin, A. Volynkin, 2007Prevention of information attacks by run-time 
detection of self-replication in computer codes. Journal of Computer Security  
[9] Egele, M.,kruegel, E., Yin. 2007 Dynamic spyware analysis  USENIX Annual 
Technical Conference on Proceedings of the USENIX Annual Technical 
Conference 
[10] Yin, H., Song, D., Egele, M., Kruegel. 2007. Panorama: capturing system-wide 
information flow for malware detection and analysis. In: Proceedings of the 
14th ACM conference on Computer and communications security, pp. 116-127. 
ACM New York, NY, USA 
[11] Yi-Min Wang, 2004. Gatekeeper: monitoring auto-start extensibility 
points(ASEPs) for Spyware management, LISA 
[12] Ming-Wei WU .2007, Self-Healing Spyware: Detection, and remediation, IEEE 
Transactions on Reliability  
[13] W32/Krap 
http://www.sophos.com/en-us//threat-center/threat-analyses/viruses-and-spywar
e/Mal~Krap-I.aspx  
[14] SOPHOS. 2005 W32/Agobot. 
http://www.sophos.com/security/analyses/viruses-and-spyware/w32agobotqo.html. 
[15]SOPHOS .2007 W32/Sdbot. 
http://www.sophos.com/security/analyses/viruses-and-spyware/w32sdbotze.html. 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/12/06
國科會補助計畫
計畫名稱: 以全系統程式關係矩陣偵測透通型惡意程式之研究
計畫主持人: 陳奕明
計畫編號: 99-2221-E-008-094- 學門領域: 資訊安全
無研發成果推廣資料
for Malware 
Detection 
(ICPADS 2011) 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
