fashion to some devices which need to limit the power supply. The second fashion is
to cope with data simultaneously on the strength of extra processors to support the
system more computational capacity. The products of Intelr CoreTM2 duo and Intelr
CoreTM2 quad nowadays are on the basis of this concept [3]. Besides, the uniprocessor
architecture development not only suffers the bottleneck of IC processes but has the more
cost than multiprocessor architecture. Thereby, the multiprocessor architecture platform
becomes more and more popular to the applications with higher computational capacity
for meeting the fast-grown demand of applications and increasing the performance of
whole system. Besides, heterogenous multiprocessor platforms has become the major
trend. For example, ”TMS320DM6446” of Texas Instruments is a powerful embedded
system platform to support highly-computing requirement of multimedia applications [4].
The multiprocessor system can be typically classified to two kinds of architectures:
homogenous and heterogenous. The homogenous multiprocessor system as implied by the
name has serval identical processors. On the contrary, the heterogenous multiprocessor
system has different characteristics processors including the general purpose processors
(GPP) and the special purpose processors (DSP). Among this two kinds of processors, the
DSPs are dedicated to handle the complex large mathematic equations and the decoding
or encoding of multimedia streams. Moreover, because the DSPs have large amount of
registers to speed the computation up, the operation fashions of them are non-preemptable
to avoid the overhead of unnecessary context switch. In opposition to DSPs, due to the
GPPs are not dedicated to special purpose, the frequency of GPPs must be much higher
than DSPs to be evenly matched with handling some special applications. Hence the
homogenous multiprocessor systems lose their predominance under the consideration of
cost. Furthermore, the architecture of DSPs is provided with predictable execution time,
it has more advantage in real-time system. Consequently, the application of heterogenous
multiprocess systems become noteworthiness in industry, such as automotive systems,
communication network, consumer electronics and mobile handhelds.
Nevertheless, many researchers have made their studies on the scheduling in the ho-
mogenous multiprocessor systems: A pioneering ”the highest actual density first (HAD)”
algorithm which takes the actual remaining density into account to schedule a set of pe-
riodic tasks is presented in [5]. An EDF-based schedulability test and EDF (k) algorithm
with periodic task sets are shown by Goossens et al [6]. Baker purposes an analysis
of schedulability test with the preemptive earliest deadline first algorithm and deadline
monotonic algorithm on m identical processors in [7]. Besides, a new schedulability test,
dedicated to preemptive deadline scheduling of periodic or sporadic tasks on a single-queue
m-server system, is proposed with a new concept, called a µ-busy interval [8].
Those researches mentioned above are preemptive algorithms. On the other hand,
some scholars develop their schedulability tests based on non-preemptive algorithms, such
as: Sanjoy purposes a feasibility analysis based on non-preemptive earliest-deadline first
algorithm upon several identical processors in [9]. An on-line non-preemptive scheduling
algorithm that is easy to be implemented for both, underload and overload upon the
homogenous multiprocessor system is investigated in [10].
On the contrary, it is relative to be scanty of researches in heterogenous multiprocessor
systems. One of the most significant reason is that the problems of real-time system
are NP-hard [11] and the characteristics of heterogenous multiprocessor system lead the
2
DSP queue doesn’t break off when DSP is active against [13]. Furthermore, in order
to improve the upper bound limit, we choose Earliest-Deadline-First (EDF) scheduling
algorithm as our basis algorithm instead of RM algorithm. Note that the schedulability
tests of prior researches just calculate the total utilization of GPP, but we count both
the DSP and GPP utilizations separately in our schedulability tests. It give a more
precise analysis than previous researches. Finally, we evaluate the effect of the proposed
algorithms by a series of simulations. Our paper offers a precise schedulability test analysis
for task scheduling in heterogenous multiprocessor systems.
In Section 2, we first introduce the architecture of a heterogenous multiprocessor sys-
tem. And in Section 3, we then propose our deadline-assignment method considering
that the platform has different processors and tasks have non-preemptive execution re-
quirements on the DSP. We illustrate the simulation and propose the evaluation results
in Section 4. Finally, Section 5 presents an inductive conclusion of this paper and our
future work.
2 System Model
2.1 Processor Model
In this section, we will describe the processor architecture in this paper. The system
architecture is composed of two different kinds of computational units named general
purpose processor (GPP) and digital signal processor (DSP), respectively, is built in
the same chip. Hence, the heterogenous multiprocessor system can exchange message to
each other via sharing a common bus. Figure 2 illustrates the abstract of heterogenous
dual-core architecture.
Figure 2: Architecture configuration of the dual-core system
For instance, in the playback upon TMS320C64x of Texas Instruments [4], the general
purpose processor (ARM9) saves the captured raw frame data from the video capture
device to the common memory shared by the GPP and the DSP, and then invokes the
DSP to begin encoding those data using a video encoder algorithm. After above steps,
the GPP writes those handled data to the file system.
The functionality of host port interface (HPI) in Figure 2 lets the GPP can directly
access the cache of the DSP and thereby speed the communication up. Furthermore,
the two processors are built on the same chip and both can share the memory address
4
Figure 4: Illustration of schedulers on dual-core systems
3 Real-Time Task Scheduling on Two Heterogenous
Processor System
In this section, we propose the on-line EDF-based scheduling algorithm and apply the
deadline assignments for off-line schedulability test and on-line admission control. To
accept more sporadic tasks on the GPP or the DSP separately, we adjust the load of the
GPP or the DSP to make the load unbalanced to let more sporadic tasks be accepted.
Therefore, the weighted deadline assignment strategy (WDA) which adjusts the relative
deadline of subtasks with a weighted parameter γ is proposed.
3.1 Deadline Assignment for Subtasks on Processors
In order to guarantee the real-time requirements of tasks on the system with two het-
erogenous processors, the idea behind our proposed approach is to assign the relative
deadlines to the subtasks of a DSP task and do the off-line schedulability analysis. In
runtime, when the processor (i.e., GPP or DSP) is idle, the global scheduler dispatchs
the subjob with the most urgent absolute deadline in the corresponding ready queues to
the processors. As forementioned, the system maintains a global scheduler that has the
responsibility to dispatch subjobs to appropriate processors, as Figure 4 shown, against
local scheduler that only deals with its own processor such as GPP or DSP. Furthermore,
the scheduling strategy of the scheduler is EDF [15]. In this section, first we discuss how
to assign the relative deadlines to the subtasks of a DSP task.
A DSP task is composed of three subtasks that carry out on different processors
according to their execution requirements. Each subtask can be considered as a stream
of subjobs. The subtasks of task τi can be viewed as individual and independent tasks
with equal period but different absolute deadlines. Let di,pre, di,dsp and di,post represent
the relative deadline of three subtasks, i.e., τi,pre, τi,dsp, and τi,post of task τi, respectively.
If a job τi,j arrives at ri,j, its corresponding subjobs are τi,j,pre, τi,j,dsp, and τi,j,post. Let
adi,j,pre, adi,j,dsp, and adi,j,post denote the corresponding absolute deadlines of the subjobs.
The absolute deadline of subjob τi,j,pre/(τi,j,dsp) is the ready time of subjob τi,j,dsp/(τi,j,post).
The absolute deadlines are derived by the following equations:
adi,j,pre = ri,j + di,pre.
adi,j,dsp = adi,j,pre + di,pre.
6
Figure 5: Example of splitting DSP task to subtasks
3.2 Online EDF-based Scheduling Algorithm
The proposed Online EDF-based Scheduling Algorithm (OESA) is based onEDF schedul-
ing algorithm [15], that always assigns the highest priority to the job with the absolute
deadline nearest to the current time. The most significant difference about the scheduling
strategy in this paper is the scheduler takes no absolute deadlines of jobs but absolute
deadlines of subjobs as the foundation of priority assignment in runtime, i.e., the subjob
whose absolute deadline is the closest to the current time of all subjobs of all ready jobs
has the highest priority to be executed. If a job finishes its partial works on one processor
GPP(/DSP)and it still needs to be executed on the other processor DSP(/GPP) whose
characteristics is different from the previous one, the job then is migrated to the other
processor. Algorithm 1 describes the scheduling situation in detail.
Whenever a scheduling event occurs such as subjob finishes and new job released, etc,
the global scheduler is invoked. The scheduler has the two queues, G-queue and D-queue
to maintain job information. The elements in the queues are in the order of non-decreasing
absolute deadlines. Besides, we use two variables named nowGPP and nowDSP to keep
the information of jobs running on the GPP and the DSP, respectively.
From steps 1 to 15, the scheduler deals with the operations after subjobs completion by
checking the statuses of jobs, such as changing statuses or clearing nowGPP and nowDSP.
There are three kinds of statuses of job named pre, dsp, and post, respectively, and the
order of them takes turns. Each status represents the execution requirement of job now.
Hence, a job has no status of dsp if it is a instance of a regular task. From steps 16 to 19,
the scheduler checks if the subjob of the new arrival job is more urgent than the current
running subjob. If the result is true, the running subjob will be preempted. Finally,
because of the non-preemptive fashion of DSP, the scheduler must check whether DSP is
active or not before assigning subjob to it in step 20.
3.3 Off-line Schedulability Test Analysis
In our study, we propose a off-line schedulability test analysis to determine whether the
system with n tasks is schedulable or not, which is divided into two parts. The first part
is used for the consideration of the GPP and the other is used for the DSP. As long as
one of them is failed, the system is unschedulable.
8
• ui,post denotes the utilization of τi,post, where ui,post = ci,postdi,post .
Because of the characteristics of splitting jobs, we then conclude the following corollary
that deal with the GPP schedulability.
Corollary 1 A system with the task set T , where T consists of n independent and pre-
emptable tasks, is schedulable via the EDF algorithm if
UT =
∑
τi∈Φ
(ui,pre + ui,post) +
∑
τi∈T−Φ
ui ≤ 1. (5)
Proof. The proof is a direct consequence of the point of view of visualization men-
tioned behind Theorem 1. ¤
3.3.2 On the Digital Signal Processor
We show the schedulability test on the DSP in this subsection. First, we define some
basic notations.
• Cmax is the maximal blocking time of all non-preemptable subtasks on the DSP, i.e.,
Cmax = max∀τi∈Φ{ci,dsp}.
• Dmin is the minimal relative deadline of all non-preemptable subtasks on the DSP,
that is Dmin = min∀τi∈Φ{di,dsp}.
Theorem 2 [19] For a system with non-preemptable subtasks is schedulable via the EDF
algorithm if ∑
τi∈Φ
ui,dsp ≤ 1− Cmax
Dmin
. (6)
Therefore, we follow Theorem 2 as our scheduling test on DSP. Due to take consider-
ation of different processors, the advantages is not only to enhance the schedulability but
to relax the total utilization UT .
4 Simulation and Performance Evaluations
The purpose of this section is to evaluate the performance of the proposed scheduling
scheme. We develop a simulation model for the scheme, and use some numerical examples
to show the capabilities of our scheme. We investigate two kinds of experiments. First we
examine the task sets in the heterogenous multiprocessor system to be scheduled or not.
10
Table 1: Parameters for the extended experiments
Parameter Default value
MIT Ti
NAT [Ti, 2× Ti]
ui (0,1]
ci [25,50]
ρ 0.2, 0.8
ki,dsp 0.2, 0.8
task numbers 5, 10, 15, ...,25
(a) Task number is 30 (b) Task number is 50
Figure 6: Performance of different schedulability test methods
which is defined as
∑ ci,pre+ci,dsp+ci,post
Ti
), the results of OESA are similar to that of DPCP,
MDSS and RSHD. The schedulability ratios start to drop when the total utilizations are
equal to 0.4, 0.5, 0.6 and 0.8 under DPCP, OESA, MDSS and RSHD, respectively. We
can also observe that the performance of OESA is better than MDSS and DPCP in most
situation. However, the performance of OESA algorithm is worse than that of RSHD
when the total utilization of the system is less than 0.9. That is because Equation 5
of our OESA algorithm lets the utilization of DSP tasks become twice lager against the
other algorithms. Therefore, the performance of OESA algorithm decays when the total
utilization of the system is about equal to 0.5. However, although the point, where
the schedulability ratios decreasing of our OESA algorithm is earlier than RSHD and
MDSS, the decay ratio of our OESA algorithm is smoother and outperforms the others
when the total utilization of the system is larger than 0.9. The reason can be concluded
that because we use EDF-based scheduling algorithm as our method which is different
from the compared RM-based algorithms, the schedulability upper bound of EDF-based
algorithm is higher than that of RM-based algorithm. Moreover, the previous researches
only take the total utilization including DSP activities as blocking time on GPP into
account. Our proposed method separates the utilization calculation for the GPP and the
DSP, respectively. Hence, our method is better when the system has a higher load. When
the task number is equal to 50, the similar results can be obtained in Figure 6(b).
4.2.2 The Extended Experiment
At the extended experiment, we compare four deadline assignment strategies under our
method. The strategies are ED, EQS, EQF, and EQD. Figures 7(a), 7(b), 7(c), and
7(d) show the rejected ratios when ki,dsp = 0.8 and ρ = 0.8, ki,dsp = 0.2 and ρ = 0.8,
12
ki,dsp = 0.8 and ρ = 0.2, and ki,dsp = 0.2 and ρ = 0.2, respectively. From Figure 7(a), we
can observe that the rejected ratio of ED strategy is always near 0.8. The reason is that
ED strategy always assigns most of the relative deadline of the task to the subtask τi,pre if
τi is a DSP task, and then it causes the admission control test for the DSP to fail. Almost
all DSP tasks are rejected. Thereby, its rejected ratio is close to the ρ value, i.e., 0.8.
The similar results are shown in Figure 7(b), too. In addition, we can observe the EQF
strategy outperforms the other strategies. Furthermore, because EQF strategy assigns
relative deadlines to subtaks according to their execution requirements, it has better
flexibility than the other compared strategies, i.e., ED, EQS, and EQD. As we know
that EQS strategy assigns “slack” to subtasks fairly, and EQD strategy assigns “relative
deadlines” of subtasks impartially. Consequently, EQF strategy has better performance
than the others, and EQS strategy outperforms EQD strategy.
Moreover, the performance of EQD(/EQS) in Figures 7(b) and 7(d) is worse than
that of EQD(/EQS) in Figure 7(a) and 7(c) on average. The reason is that for a DSP
task τi when ki,dsp = 0.8 and ρ = 0.8, or ki,dsp = 0.8 and ρ = 0.2, EQD(/EQS) strategy
assigns the relative deadline to subtasks fairly and causes the utilization of subtask τi,dsp
becomes larger (because ci,gpp is relatively smaller). On the contrary, EQD(/EQS) strategy
brings out the utilization of a DSP task on GPP larger when ki,dsp = 0.2 and ρ = 0.8,
or ki,dsp = 0.2 and ρ = 0.2. As the twice larger utilization caused by DSP tasks in
Equation 5, the higher the utilization on GPP is, the worse the performance becomes.
Furthermore, when there are more DSP tasks in the system, there are more tasks which
cause the utilization of Equation 5 twice larger.
Another noticeable point is that the performance of EQF strategy is worse than EQS
and EQD in Figure 7(c). It is because when ki,dsp = 0.8 and ρ = 0.2, the ci,gpp of a DSP
task is relatively smaller than ci,dsp. So the fair deadline assignment strategies such as
EQS and EQD cause the utilization of subtasks on GPP smaller comparatively. However,
EQF strategy keeps the utilization of subtasks form imbalance. Equation 5, hence, is
hard to pass for EQF strategy.
Besides, the performance differences among EQF, EQS and EQD in Figure 7(a) are
larger than those in Figure 7(b), Figure 7(c) and Figure 7(d). It is because when ki,dsp =
0.2 and ρ = 0.8, ki,dsp = 0.8 and ρ = 0.2, and ki,dsp = 0.2 and ρ = 0.2, Equation 5 has
a higher probability of failure than that of Equation 6. When the load of the DSP is
higher (i.e., the case where ki,dsp = 0.8 and ρ = 0.8), the load on GPP is lighter relatively.
The deadline assignment strategy which has larger flexibility such as EQF can affect the
system more and the difference between those deadline assignment strategies therefore is
more obvious. Note that the rejected ratio of EQF strategy increases faster than the
other strategies just because DSP has already no adjustable spaces. In Figure 7(c) and
Figure 7(d), ED strategy has the alike ratio as the value of ρ initially. It has the same
reason of why ED strategy rejects tasks in Figure 7(a) initially. Nevertheless, the rejected
ratio of ED strategy becomes worst as the task numbers increase against Figure 7(a) and
Figure 7(b). The scheduler rejects sporadic tasks while the task numbers increases just
because of not only the DSP tasks but also the regular tasks.
One more significant point is that EQD, EQS and EQF strategies have similar results
in Figures 7(b), 7(c), and 7(d). It is due to the total utilization of GPP when ki,dsp = 0.2
and ρ = 0.8, ki,dsp = 0.8 and ρ = 0.2, and ki,dsp = 0.2 and ρ = 0.2 is higher than that
14
[10] S. Dolev and A. Keizelman, “Non-preemptive real-time scheduling of multimedia tasks,” in
Proc. Third IEEE Symposium on Computers and Communications ISCC ’98, pp. 652–656,
30 June–2 July 1998.
[11] C. Lee, J. Lehoczky, D. Siewiorek, R. Rajkumar, and J. Hansen, “A scalable solution
to the multi-resource qos problem,” in Proc. 20th IEEE Real-Time Systems Symposium,
pp. 315–326, 1–3 Dec. 1999.
[12] K. Kim, D. Kim, and C. Park, “Real-time scheduling in heterogeneous dual-core architec-
tures,” in Proc. 12th International Conference on Parallel and Distributed Systems ICPADS
2006, vol. 2, p. 6pp., 12–15 July 2006.
[13] P. Gai, L. Abeni, and G. Buttazzo, “Multiprocessor dsp scheduling in system-on-a-chip
architectures,” in Proc. 14th Euromicro Conference on Real-Time Systems, pp. 231–238,
19–21 June 2002.
[14] L. Sha, R. Rajkumar, and J. P. Lehoczky, “Priority inheritance protocols: an approach to
real-time synchronization,” IEEE Transactions on Services Computing, vol. 39, pp. 1175–
1185, Sept. 1990.
[15] C. L. Liu and J. W. Layland, “Scheduling algorithms for multiprogramming in a hard-real-
time environment,” Journal of the ACM (JACM), vol. 20, no. 1, pp. 46–61, 1973.
[16] P. G. Paulin, C. Pilkington, M. Langevin, E. Bensoudane, O. Benny, D. Lyonnard, B. Lav-
igueur, and D. Lo, “Distributed object models for multi-processor soc’s, with application
to low-power multimedia wireless systems,” in DATE ’06: Proceedings of the conference on
Design, automation and test in Europe, pp. 482–487, 2006.
[17] B. Kao and H. Garcia-Molina, “Deadline assignment in a distributed soft real-time system,”
IEEE Transactions on Parallel and Distributed Systems, vol. 8, pp. 1268–1274, Dec. 1997.
[18] J. M. Lo´pez, J. L. Dı´az, and D. F. Garc´ıa, “Utilization bounds for edf scheduling on real-
time multiprocessor systems,” Real-Time System, vol. 28, no. 1, 2004.
[19] J. W. S. Liu, Real-Time Systems. Prentice Hall, 2000.
16
報告內容應包括下列各項： 
一、參加會議經過 
二、與會心得 
三、考察參觀活動(無是項活動者省略) 
四、建議 
五、攜回資料名稱及內容 
  會議論文光碟片一片 
六、其他 
（本表格係參照國科會格式訂定） 
studies, the tutorial discusses the issues of integrating heterogeneous wireless 
technologies and healthcare-specific functionalities. In particular, the tutorial 
points out the formation of ad hoc support groups to aid patients/victims who 
have succumbed to illnesses/accidents. 
 
 Mobility Modeling for Future Mobile Network Design and Simulation: 
Future networks will consist of numerous wireless devices, many of which will 
be mobile. With the proliferation of handheld devices that are tightly coupled 
with our everyday life, human mobility is likely to play a key role in designing 
and evaluating efficient networks and services of the future. A new generation of 
infrastructure-less networks is being introduced, including ad hoc, sensor and 
delay tolerant networks that will rely heavily of mobile nodes for connectivity 
and communication establishment. Also, with the introduction of vehicular 
networks, it will be imperative to model and understand vehicular mobility 
patterns. Hence, there is a compelling need to study, analyze and understand 
mobility models in order to have valid evaluation tools for future mobile 
protocols, networks and services. This tutorial discusses issues of mobility 
modeling, focusing on ‘realistic’ aspects traditionally ignored in random models 
(such as random walks, or random way point). The tutorial has two main parts. 
The first part starts from the classification of major mobility models, establishes 
a framework (called IMPORTANT) to systematically analyze such models and 
walks through several key studies that motivate the need for new models. By 
evaluating the effects of mobility on several classes of future mobile networks 
and protocols (e.g., ad hoc and encounter routing protocols) the tutorial provides 
insight into the shortcomings of conventional (random) models and introduces 
another rich set of models (e.g., Group, Freeway, Manhattan). Focus is given to 
two main questions: Why and how does mobility affect routing performance? 
The second part of the tutorial utilizes extensive measurements of existing 
wireless networks (mainly WLANs and Bluetooth) to establish a more realistic 
我有參加了其中的兩個session：Mobile Ad Hoc Networks與Performance 
Evaluation & Analysis。晚上是歡迎晚會，和與會的他國學者做了一次學術
交流。另外，值得一提的是晚會的場所位在萊比錫大學的一個二次大戰時的
碉堡，學校方面改建成一個酒吧，非常有創意。 
 
第三天: 
上午由我報告我們的論文，報告之後和聆聽的學者做了一些交流。之後，我
和另外一位大陸學者搭乘德國的高速鐵路到另一座城市德勒斯豋參觀，該城
為舊東德的首都，包含了文化與自然地景。 
。 
 
第四天: 
上午有一場 keynote，由 Dr. Stefan Schmid主講 Next-Generation Mobile 
Networks: 3GPP Evolved Packet System and Femtocell Technologies，以下
是他的演講部份內容： 
3GPP has recently completed the first release of the Evolved Packet System 
(EPS), which comprises the next-generation radio access LTE and Evolved 
Packet Core (EPC). Although optimized towards LTE, the EPC enables operators 
to accommodate also legacy 3GPP radio access technologies (namely 2G and 3G) 
as well as non-3GPP radio access technologies (such as HRPD, WiMAX and 
WLAN).  Following a short historic retrospect of its development, beginning 
with the initial goals and visions, this talk will provide an overview of the now 
standardized Evolved Packet Core, and its capabilities and operation.  The talk 
will focus on the open issues as well as the ongoing and future work, such as the 
problem of route optimization, per-flow mobility management, and advanced 
policy control.  Finally, the talk will look at the prospects of upcoming Femto 
Technologies, and report on current and future research activities in this area. 
 
 
