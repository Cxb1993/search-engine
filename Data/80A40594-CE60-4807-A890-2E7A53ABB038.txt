兆級晶片系統前瞻技術研究-子計畫七 
兆級晶片系統模擬與正規驗證之整合技術 (2/3) 
“Combining Simulation and Formal Verification Techniques for  
Trillion-transistor-Scale System-on-Chip (TS-SoC) (2/3)” 
計畫編號：NSC 94-2215-E-002-035 
執行期間：95 年 8 月 1 日至 96 年 7 月 31 日 
主持人：黃鐘揚 台灣大學電機系暨電子所助理教授 
 
一、 中文摘要 
本子計劃今年持續去年的進度，繼續在正規驗證引
擎以及 RTL 設計除錯之輔助工具上進行研究，主要完
成的項目有二：(一) 針對複雜的電路結構所設計強健
的限制條件滿足產生器，以及 (二) 高階設計內涵自動
萃取演算法以提高設計驗證與除錯的效能。其中項目一
我們的限制條件滿足產生器之基本效能與現今世上最
快的產生器並駕齊驅，但是我們再加上針對複雜電路所
設計之專門演算法，我們的產生器之效能能夠在快上
15 到 20 倍。至於項目二我們開發出一套不限制於程式
碼風格之高階設計內涵自動萃取演算法，能夠自動的從
RTL 電路描述檔中萃取出各式各樣複雜的有線狀態自
動機以及計數器，這是連現今業界最先進的電子電路設
計自動化工具都做不到的事，這些演算法將有助於本計
劃在第三年實現智慧型的電路驗證與除錯工具。 
關鍵詞：正規驗證，設計除錯，限制條件滿足產生器，
高階設計內涵，RTL 電路描述。 
英文摘要 
In this year we continue to work on the formal 
verification engine and intelligent debugging algorithms. 
Specifically, we accomplished two major milestones: (1) 
we have implemented a robust circuit-based Boolean 
Satisfiability (SAT) engine for complex netlist structure, 
and (2) we devised an algorithm to automatically extract 
high-level design intents for intelligent RTL verification.  
We have compared the performance of our 
circuit-based SAT solver with many state-of-the-art 
solvers. Our experimental results showed that with the 
baseline algorithm, our solver can achieve competitive 
performance. However, after we further add on more 
circuit structure-oriented algorithms, our solver can 
outperform the others by 15-20 times. 
On the other hand, our high-level design intent 
extraction algorithm can automatically identify various 
types of constructs from the RTL hardware description 
files. We can extract explicit and implicit Finite State 
Machines (FSM) as well as the counters, which will be 
very useful for the future intelligent design verification 
and debugging. This feature is much more advanced even 
to the most prestigious industrial Electronic Design 
Automation (EDA) tools. 
Keywords ： formal verification, design debugging, 
Boolean constraint satisfiability solver, high-level design 
intent, RTL hardware description files. 
二、 限制條件滿足產生器 
In the past year, we have implemented a robust 
circuit-based SAT solver, called QuteSAT, in which its 
baseline solver (i.e. without using circuit information) can 
perform as well as the state-of-the-art Conjunctive Normal 
Form (CNF) solvers (e.g. zChaff [1] and miniSat [2]), and 
with just a little help from the circuit information, it can 
2.2 Engineering an efficient circuit SAT 
In order to implement an efficient circuit-based SAT 
solver, we adopt most of the advanced CNF SAT 
algorithms, and then further improve it by the circuit 
specific techniques. The outline of our SAT algorithm is 
similar to most of the CNF-based SAT (e.g. [1]). For 
example, Modern SAT solvers apply various learning 
techniques to prune out the search space [4][5]. In CNF 
SAT, learned information is stored as clauses such that the 
SAT algorithms can be applied on both the original and 
the new clauses. In circuit SAT, on the other hand, the 
learned information is usually recorded as attached AND 
gates with tied ‘0’ at the outputs. Therefore, the circuit 
SAT algorithms can then be executed on the same data 
structure. 
Moreover, during the learning process, it is essential 
to figure out the causes of the implications. An intuitive 
way is to store this information as an explicit implication 
graph. However, this requires an extra amount of storage, 
and may lead to great overhead in the backtracking 
process. We propose an implicit implication recording 
method for circuit-base SAT as follows: 
Implicit implication graph construction: 
1. If the implication type is “DIRECT”, then the 
antecedent pointer is the single implication source. 
2. If the implication type is “INDIRECT”, then the 
implication sources are the watched candidates of the 
antecedent gate that are (a) non-watched variables, 
and (b) watched variables with watched values, 
excluding the implied pin. 
2.3 Experimental Results 
We conduct our experiments on the Equivalence 
Checking (EC) problems for the benchmark circuits. The 
benchmark we use include ISCAS 85/89 and ITC99 
circuits. We use the logic synthesis tool ABC [6] to map 
the circuit into two different cell libraries, one including 
complex gates, and the other with primitive gates only. 
The CNF representation is based on the Tseitin 
transformation. We select two state-of-the-art CNF SAT 
solvers: zChaff [1] and miniSat [2], and one well-known 
circuit-based SAT solver: NIMO [7], for comparison. All 
the experiments are conducted on a 3.2GHz Linux 
machine with 2GB memory. 
We categorize our experiments into two sets: one 
without the use of circuit information — CNF SAT and 
our baseline solvers belong to this category. The other 
utilizes the circuit information in different ways — our 
“-J” option turns on the J-frontier technique, and the 
default NIMO applies signal correlation learning. As for 
the “-u” option of NIMO, it turns off the “explicit 
learning”. However, based on our observation1, it is still 
somehow taking the advantage of the circuit information. 
The experimental results in Table 1 show that our 
baseline solver can achieve the comparable performance 
with the fastest CNF solvers. To the best of our knowledge, 
this is the first time that a circuit-based SAT solver can be 
as efficient as the CNF one while still retains the complete 
circuit information. This is mainly owing to our generic 
watching scheme for general gate types and the implicit 
implication graph that facilitates the fast conflict-driven 
learning.  
On the other hand, the J-frontier method is a heuristic 
that should be effective not only for the EC problem but 
also for the general SAT problems like property checking. 
It concentrates on the most relevant search space, and with 
the advanced technique like “decision restart”, our 
experimental results show that our circuit SAT can 
constantly beat the CNF SAT solvers for 15+ times. 
The other circuit-based SAT solver “NIMO” utilizes 
the signal correlation learning which is especially useful 
                                                 
1 We conducted EC on structurally identical circuits and found that 
NIMO (even with –u) made 0 decision (of course no conflict) and 
finished in 0 time. This is impossible for all the other SAT solvers that do 
not use circuit (hashing) information. 
Example: In “demo1”, it can be shown that the only 
assignment that satisfies lemma 1 is lines 9-10 “if (rst) ns 
<= 2’b00”. The other assignments will have non-empty 
intersection { ns }. Therefore, the reset signal is “rst” and 
the reset state is “2’b00”.  □ 
STG generation of explicit FSM: Once the state 
variable(s) and the reset state have been recognized, the 
STG of an ex-FSM can be easily derived from the 
assignment list of the state variable(s). For example, in 
line 16 of the design “demo1”, since we know that “cs” is 
the output of the state transition function (Theorem 1) and 
“reset” is the reset signal, the current state must be 
“2’b00”, and the state transition condition can be 
simplified as “en”. The next state, therefore, should be the 
source expression “2’b10”. 
 
3.2 Implicit FSM Extraction 
In practical HDL designs, however, it is not always 
possible to explicitly define the set of legal states, and it 
may be more code-efficient to describe the state transitions 
as functions of state variables, instead of enumerated 
constant (state values). Therefore, we define the term 
“implicit FSM (imp-FSM)” as follows: 
Definition 2 (Implicit FSM): 
An implicit FSM has the following properties:  
(1) Its number of states, state encoding and reset state 
may not be explicitly defined. 
(2) Some of its state transition functions are implicitly 
defined in terms of state variables (and maybe with other 
variables). 
An example of implicit FSM is as shown in Figure 3. 
We use the following theorem to identify implicit FSM: 
Similar to explicit FSMs, we follow the theorems 
below to extract the implicit FSMs. 
Theorem 2: State variable recognition of implicit FSM 
If a signal v ∈ PSV is a state variable of an implicit FSM, 
then there exists a signal w ∈ SIGS, such that ⎯ 
case 1. w ∈ v.ADS and v ∈ w.ADS,             or 
case 2. w ∈ v.ACS, v ∈ w.ADS, and | w.ADS | > 1. 
Example: The ADS and ACS of signals of “demo2” is as 
shown in Table 3. Since d1 ∈ PSV, d1 ∈ d2.ADS, and d2 
∈ d1.ADS, this is an implicit FSM with d1 as the state 
variable.                    □ 
Reset state recognition of implicit FSM: Since the reset 
state of the implicit FSM may not be explicitly defined, 
the method in Lemma 1.1 may not work. However, if such 
reset state is indeed explicitly specified, we can still 
recognize it through this lemma. For example, we can 
recognize the reset state of “demo2” as “d1 = 0”, and the 
reset signal as “~reset”. 
STG generation of implicit FSM: We use Binary 
Decision Diagram (BDD) to construct the STG of the 
imp-FSM. Without loss of generosity, let’s assume the 
assignments for the combinational and sequential logic are 
grouped in two different blocks, as shown in Figure 8, 
where X and Y are the outputs of the sequential and 
combinational blocks, respectively. Let Y = comb(X, ∑x), 
and X = seq(Y, ∑y), where “comb” and “seq” are the state 
Figure 2. An example of explicit FSM 
1  … 
 2  reg  [1:0] ns; 
 3  reg        go; 
 4  wire [1:0] cs; 
 5  … 
 6  assign cs = ns; 
 7  … 
 8  always @ ( posedge clk or 
posedge rst ) begin 
 9     if ( rst ) begin 
10        ns <= 2＇b00;  
11        go <= 1＇b0; 
12     end 
13     else begin 
14        go <= ( cs == 2＇b10 ) & en; 
15        case ( cs ) 
16        2＇b00: ns <= ( en ) ? 2＇b10: 2＇b00;
17        2＇b10: ns <= ( en ) ? 2＇b01: 2＇b10;
18        2＇b01: ns <= ( en ) ? 2＇b00: 2＇b01;
19        default: ns <= 2＇b00; 
20        endcase 
21     end 22  end 
23  … 
team in our institute[9], and Sun Microsystems 
(“picoJava”)[10]. 
We compare our extracted results with two 
commercial tools ⎯ Debussy[11] and Design 
Compiler[12]. As shown in Table 2, our tool is the only 
one that supports all ex-FSM, imp-FSM, and counter 
extractions. Debussy (DB) supports ex-FSM extraction, 
but not the others. We have compared their extracted 
ex-FSMs with ours and it shows that both are exactly 
matched. On the other hand, Design Compiler (DC) 
supports only partial ex-FSM extraction. Without the help 
of compiler directives, it can only identify ex-FSMs with 
explicit “case-statement” style. If there is any other 
assignment mixed in the same block (e.g. FSM output 
logic), DC will not be able to recognize it. 
Table 3 shows our FSM and counter extraction results. 
Please note that they are from real RTL designs and most 
of them are very complicated. Taking the “USB” design as 
an example [8], it is from the DMA unit and the source 
code contains 553 lines, 1 module, and 33 “always” blocks. 
Our extraction algorithm can successfully identify the 
FSM and use its symbolic name as the FSM states. This is 
very useful for design verification and debugging as we 
will discuss in the next section. 
3.5 Graphical User Interface (GUI)s 
We also provide a comprehensive Graphic User 
Interface( GUI ). Figure 5 shows the layout of our GUI 
window. There are three sub-windows as follows: 
¾ Module Hierarchy Window: 
This shows the design hierarchy. The extracted 
information is also listed in this window. Double click on 
the item (module, FSM, or counter) of your interest, the 
program will open the corresponding information 
automatically.  
¾ Code Viewer Window:  
This is a source code editor that supports syntax highlight. 
User can compare extracted control units (CUs) and their 
corresponding source code information. 
¾ Quick Link Window: 
This provides an area to store quick link of extracted CUs. 
For large designs, user may need to view several CUs at 
the same time. Instead of opening all of them on the 
desktop or closing them frequently, user can place 
temporarily inactive CUs in this window, and when they 
are needed later, just clicks the quick link button, and the 
program will open its corresponding information. 
 
 
Figure 14 shows the layout of the Detail Viewer 
window. There are two views: FSM view and counter 
view. Once user double clicks the control unit listed in the 
Module Hierarchy window, the Detail Viewer is opened 
automatically and displays detail information. If user hides 
the Detail Viewer, the program will add one quick link 
button to the Quick Link window so that user can easily 
go back. For FSMs, Detail Viewer shows the State 
Transition Graph/Table and the analysis result including 
Table 2:  
Comparison of results 
 DB DC Ours 
ex-FSM ○ △ ○ 
imp-FS
M ╳ ╳ ○ 
Counter ╳ ╳ ○ 
Note:○ Fully supported 
     △ Partially  
     ╳ Not Supported 
Table 3: Summary of result
 ex-FSM imp-FSM counter
AC97 0 0 9 
USB 6 0 16 
AES 1 0 1 
Router 1 0 1 
OCRS 2 0 3 
RCRS 3 0 4 
Contest 2 2 0 
PicoJava 3 18 1 
Figure 5. Layout of our main GUI window 
