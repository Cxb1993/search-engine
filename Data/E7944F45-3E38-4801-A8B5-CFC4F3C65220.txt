Abstract: As system-on-chip (SoC) becomes prevalent in the intelligent system applications, 
the reliability issue of SoC is getting more attention in the design industry due to the rapid 
increasing rate of radiation-induced soft errors while the SoC fabrication enters the very deep 
submicron technology. Therefore, the SoC dependability becomes a critical issue in safety-critical 
applications. Validating such systems is imperative to guarantee the dependability of the systems 
before they are being put to use. Moreover, it is beneficial to assess the SoC robustness in early 
design phase in order to significantly reduce the cost and time of re-design. To fulfill such needs, in 
this study, we propose a useful IP-based SoC-level risk model using failure mode and effects 
analysis (FMEA) method to assess the robustness of a SoC in SystemC transaction-level modeling 
(TLM) design level. The proposed risk model is able to facilitate the measure of the robustness and 
scales of failure-induced risks in a system, which can be used to identify the critical components 
and major failure modes for protection so as to effectively reduce the impact of failures to the 
system. A case study is used to demonstrate our risk model under CoWare Platform Architect 
environment. A system verification tool was created to assist us in measuring the robustness of the 
system, in locating the weaknesses of the system, and in understanding the effect of faults on 
system failure behavior during the SoC design phase. The contribution of this work is to promote 
the dependability verification to TLM abstraction level that can significantly enhance the simulation 
performance, and provide the comprehensive results to validate the system dependability in early 
design phase for safety-critical applications. 
Keywords: FMEA, risk assessment, SystemC, safety-critical application, system-on-chip. 
 
1. Introduction 
As system-on-chip (SoC) becomes more and more 
complicated, the SoC could encounter the reliability 
problem due to the increased likelihood of faults or 
radiation-induced soft errors especially when the 
chip fabrication enters the very deep submicron 
technology [1-3]. Since SoC becomes prevalent in 
the intelligent system applications, such as 
intelligent automotive systems or intelligent robots, 
which require a stringent dependability while the 
systems are in operation. Thus, it is essential to 
perform the failure mode and effects analysis 
(FMEA) method to locate the vulnerability of the 
SoC and provide the practical fault-tolerant 
strategies to improve its reliability and safety [4]. 
However, due to the high complexity of the SoC, the 
incorporation of the FMEA and fault-tolerant 
demand into the SoC will further raise the design 
complexity. Therefore, we need to adopt the 
behavioral level or higher level of abstraction to 
describe/model the SoC, such as using SystemC, to 
tackle the complexity of the SoC design and 
verification. An important issue in the design of SoC 
is how to validate the system dependability as early 
in the development phase to reduce the re-design 
cost. As a result, a SoC-level dependability 
verification platform is required to facilitate the 
designers in assessing the robustness of a SoC with 
an efficient manner. Normally, the FMEA method 
and fault injection approach are employed to analyze 
the impact of failures to the system and measure the 
risks of the system.  
Previously, the issue of SoC-level risk 
assessment is seldom addressed especially in 
SystemC transaction-level modeling (TLM) design 
level. In paper [4], the authors presented a FMEA 
method at SoC-level design in RTL description to 
design in compliance with IEC61508. A memory 
sub-system embedded in fault-robust 
microcontrollers for automotive applications was 
used to demonstrate the feasibility of their FMEA 
method. However, the scheme presented in [4] can 
only apply to RTL and gate level, which limits the 
scope of its application. Furthermore, the 
complexity of oncoming SoC increases rapidly, so it 
may still require considerable time and efforts to 
implement a SoC using RTL description. In paper 
[5], the authors proposed a dependability benchmark 
for automotive engine control applications. They 
showed the feasibility of the proposed dependability 
benchmark using a prototype of diesel electronic 
control unit (ECU) control engine system. The fault 
injection campaigns were conducted to measure the 
dependability of benchmark prototype. The domain 
levels of PV and PV+T, where IP represents the 
slave module.  
3 SoC-Level Risk Assessment 
When SoCs are applied to safety-critical 
applications, fault-robust designs with the 
dependability validation are required to guarantee 
that the developed SoCs are able to comply with the 
dependability or safety requirements defined by the 
international norms, such as IEC61508 [8, 9]. For 
the complicated IP-based SoCs or embedded 
systems, it is unpractical and not cost-effective to 
protect the entire SoC or system. Analyzing the 
vulnerability of SoCs or systems can help designers 
not only invest limited resources on the most crucial 
region but also understand the gain derived from the 
investment.  
In this section, we propose a SoC-level risk 
model to quickly assess the SoC’s vulnerability at 
SystemC TLM level. Conceptually, our risk model is 
based on the FMEA method with the 
simulation-based fault injection approach to 
measure the robustness of SoCs. From the 
assessment results, the rank of component 
vulnerability related to the risk scale of causing the 
system failure can be acquired. The notations used 
in the risk model are developed below. 
z n: number of components to be investigated in 
the SoC; 
z z: number of possible failure modes of the SoC; 
z C(i): the ith component, where 1 ≤ i ≤ n; 
z FR_C(i): failure rate of the ith component; 
z SFR_C(i): the part of SoC failure rate 
contributed from the failure rate of the ith 
component; 
z SFR: SoC failure rate; 
z R(t): SoC reliability; 
z FM(k): the kth failure mode of the SoC, where 1 
≤ k ≤ z; 
z NE: no effect which means that a fault/error 
happening in a component has no impact on 
the SoC operation at all; 
z P (i, FM(K)): probability of FM(K) if a failure 
occurs in the ith component; 
z P (i, NE): probability of no effect for a failure 
occurring in the ith component; 
z P(i, SF): probability of SoC failure for a failure 
occurring in the ith component; 
z S_FM(k): severity rate of the kth failure mode, 
where 1 ≤ k ≤ z; 
z RPN_C(i): risk priority number of the ith 
component; 
z RPN_FM(k): risk priority number of the kth 
failure mode. 
The potential SoC failure modes can be 
identified from the fault injection campaigns. We 
can inject the faults into a specific component so as 
to result in the failures of that component, and then 
investigate the effect of component’s failures on the 
SoC behaviors. Throughout the injection campaigns 
for each component, we can identify the failure 
modes of the SoC, which are caused by the failures 
of components in the SoC. The parameters of z and 
P(i, FM(k)) can be derived from the fault injection 
campaigns. The derivation process by fault injection 
experiments is described as follows: 
Several notations are developed first: 
z S_FM: a set of SoC failure modes used to record 
the possible SoC failure modes happened in the 
fault injection campaigns. 
z counter(i, k): a counter array for the ith 
component used to count the number of the kth 
SoC failure mode occurred in the fault injection 
experiment of the ith component, where 1 ≤ i ≤ n, 
and k represents the kth SoC failure mode in the 
set S_FM. 
z no_fi(i): the number of fault injection campaigns 
performed in the ith component, where1 ≤ i ≤ n. 
Fault injection process: 
z = 0; S_FM = Φ; 
for i = 1 to n //fault injection experiment for 
the ith component;// 
for j = 1 to no_fi(i) 
{injecting a fault into the ith component, and 
investigating the effect of component’s failure on 
the SoC behavior; then, identifying which failure 
mode of the SoC encountered due to this fault 
injection.  
 if (the SoC failure mode caused by this injection 
campaign is new, and therefore, it cannot be 
found in the set S_FM; in other words, this 
type of failure mode does not occur in the 
previous injection campaigns) 
 then {z = z + 1; adding this SoC failure mode to 
the set S_FM; k = z; counter(i, k) = counter(i, 
k) + 1} 
 else {find the value of k by locating the position 
of current SoC failure mode in the set S_FM; 
 4
failure mode, which is caused by the ith component 
failing to perform its intended function.  
The RPN_FM(k) represents the risk scale of the 
kth failure mode, which can be calculated by  
∑
=
××= n
i
kFMiPiCFRkFMSkFMRPN
1
))(,()(_)(_)(_  
where 1 ≤ k ≤ z.  expresses 
the occurrence rate of the kth failure mode in a SoC. 
This sort of assessment can reveal the risk levels of 
the failure modes to its system and identify the 
major failure modes for protection so as to reduce 
the impact of failures to the system. 
∑
=
×n
i
kFMiPiCFR
1
))(,()(_
4 System Verification Platform 
We have created an effective robustness verification 
tool under the environment of CoWare Platform 
Architect [11] for dependability validation of system 
design with SystemC. Figure 2 shows the 
operational flow of the verification tool. The tool 
platform provides the capability to quickly handle 
the operation of fault injection campaigns and 
dependability analysis for the systems modeled by 
one or a mixture of the following levels of 
abstraction [12, 13]: bus-cycle accurate level, 
untimed functional TLM with primitive channel 
sc_fifo, and timed functional TLM with hierarchical 
channel. So, the tool is able to deal with the fault 
injection at different modeling levels of abstraction 
and offers the time-triggered or event-triggered 
methodologies to decide when to inject a fault. This 
injection tool can significantly reduce the effort and 
time for performing the fault injection campaigns. 
Besides that, the verification platform dramatically 
increases the efficiency of carrying out the system 
robustness validation and risk assessment.  
5 Case Study 
An ARM-based SoC platform provided by CoWare 
Platform Architect [11] was used to demonstrate the 
feasibility of our risk model. The illustrated SoC 
platform was modeled at the timed functional TLM 
abstraction level. This case study is to investigate 
two components, AMBA AHB and the memory 
sub-system, to assess their risk scales to the 
SoC-controlled system. We exploited the system 
verification platform to perform the fault injection 
process associated with the risk model presented in 
Section 3 to identify the potential failure modes and 
obtain the values of z and P(i, FM(k)) for the 
components of AMBA AHB and memory 
sub-system. The possible SoC failure modes 
classified from the fault injection process could be 
fatal failure (FF), such as system crash or process 
hang, silent data corruption (SDC), correct 
data/incorrect time (CD/IT), and deadlock (DL) 
(note that we declare the failure mode as DL if the 
execution of benchmark exceeds the 1.5 times of 
normal execution time). In the following, we 
summarize the data used in this case study. 
z n = 2, {C(1), C(2)} = {AMBA AHB, memory 
sub-system}. 
z z = 4, {FM(1), FM(2), FM(3), FM(4)} = {FF, 
SDC, CD/IT, DL}. 
z The benchmarks employed in the fault injection 
process are: JPEG (pixels: 255 × 154), matrix 
multiplication (M-M: 50 × 50), quicksort (QS: 
3000 elements) and FFT (256 points). 
5.1 AMBA AHB Vulnerability Assessment 
The system bus, such as AMBA AHB, provides an 
interconnected platform for IP-based SoC. 
Apparently, the robustness of system bus plays an 
important role in the SoC reliability.  
The results of fault injection process for AHB 
system bus under various benchmarks are shown in 
Table 1, which has been published in our previous 
paper [14]. The results of a particular benchmark in 
Table 1 were derived from the six thousand fault 
injection campaigns, where each injection campaign 
injected 1-bit flip fault to bus signals. The fault 
duration lasts for the length of one-time data 
transaction. The statistics derived from six thousand 
times of fault injection campaigns have been 
verified to guarantee the validity of the analysis. We 
also found that the rank of vulnerability of bus 
signals is ‘HADDR’ > ‘HSIZE’ > ‘HDATA’ for all 
benchmarks, if the fault targets are restricted to 
those three categories of bus signals.  
From Table 1, it is evident that the susceptibility 
of the SoC to bus faults is benchmark-dependent and 
the rank of system bus vulnerability over different 
benchmarks is JPEG > M-M > FFT > QS. However, 
all benchmarks exhibit the same trend in that the 
probabilities of FF show no substantial difference, 
and while a fault arises in the bus signals, the 
occurring probabilities of SDC and FF occupy the 
top two ranks. The results of the last row offer the 
 6
for j = 1 to Nbench 
{ 
Step 1: Run the jth benchmark in the experimental 
SoC platform under CoWare Platform 
Architect to collect the desired bus 
read/write transaction information that 
include address, data and control signals of 
each data transaction into an operational 
profile during the program execution. The 
value of Nd-t can be obtained from this step. 
Step 2: Cp-b-err = 0; Ninj(j) = 0; 
While Cp-b-err < Np-b-err do 
 {Terror can be decided by randomly choosing 
a number x between one and Nd-t. It means 
that Terror is equivalent to the time of the xth 
data transaction occurring in the bus system. 
Similarly, Aerror is determined by randomly 
choosing an address between one and Sm. A 
bit is randomly picked up from the word 
pointed by Aerror, and the bit selected is 
flipped. 
If ((Situation 1 occurs) or (Situation 2 
occurs))  
then {the injected bit error won’t cause 
damage to the system;} 
else {Cp-b-err = Cp-b-err + 1; 
record this propagated bit error to 
Sp-b-err(j) including Terror, Aerror and bit 
location.} 
//Situation 1 and 2 are described in the 
beginning of Section 5.2. The operational 
profile generated in Step 1 is exploited to 
help us investigate the resulting situation 
caused by the current bit error. From the 
operational profile, we check the memory 
access patterns beginning from the time of 
occurrence of bit error to identify which 
situation the injected bit error will lead to. // 
Ninj(j) = Ninj(j) + 1;} 
}         
The Type 1 experimental process was carried 
out to estimate Pp-b-err, where Nbench, Sm and Np-b-err 
were set as the values of 4, 524288, and 500 
respectively. Table 2 shows the propagation 
probability of bit errors for four benchmarks. It is 
evident that the propagation probability is 
benchmark-variant and a bit error in memory would 
have the probability between 0.866% and 3.551% to 
propagate the bit error from memory to system. The 
results imply that most of the bit errors won’t cause 
damage to the system. 
Table 2: Propagation probability of bit errors. 
Benchmark Ninj  Np-b-err  Pp-b-err  
M-M 14079 500 3.551% 
QS 23309 500 2.145% 
JPEG 27410 500 1.824% 
FFT 57716 500 0.866% 
Type 2 experiment: From Type 1 experimental 
process, we collect Np-b-err bit errors for each 
benchmark to the set Sp-b-err(j). Those propagated bit 
errors are used to assess the failure probability of 
propagated bit errors. Therefore, Np-b-err 
simulation-based fault injection campaigns are 
conducted under CoWare Platform Architect, and 
each injection campaign injects a bit error into the 
memory according to the error scenarios recorded in 
the set Sp-b-err(j). Therefore, we can examine the SoC 
behavior for each injected bit error.         
We should point out that the function of Type 1 
experiment can be accomplished by Type 2 
experiment. However, Type 2 experiment is based 
on the simulation-based fault injection approach, 
which requires higher simulation time than Type 1 
experiment. As can be seen from Table 2 and 4, if 
we use only Type 2 experiment to assess the 
propagation probability and failure probability of bit 
errors as illustrated in Table 2, 4, and 5, a huge 
number of simulation-based fault injection 
campaigns should be conducted. As a result, an 
enormous amount of simulation time is required to 
complete the injection campaigns. Instead, we 
developed a software tool used in Type 1 experiment 
to quickly identify which situation the injected bit 
error will lead to. Using this approach, the number 
of simulation-based fault injection campaigns 
performed in Type 2 experiment decreases 
dramatically. Since the performance of software tool 
adopted in Type 1 experiment is higher than that of 
simulation-based fault injection campaign employed 
in Type 2 experiment. Therefore, we can save a 
considerable simulation time. The data of Table 2 
indicate that without the help of Type 1 experiment, 
we need to carry out a few ten thousand 
simulation-based fault injection campaigns in Type 2 
experiment. As opposite to that, with the assistance 
 8
following data were used to show the risk 
assessment for the selected components: {FR_C(1), 
FR_C(2)} = {0.001/hour, 0.005/hour} {S_FM(1), 
S_FM(2), S_FM(3), S_FM(4)} = {10, 8, 4, 6}. 
According to the expressions presented in Section 3, 
the SoC failure rate, reliability and RPN are obtained 
below: 
SFR_C(1) = 0.001/h × 0.7322 = 7.322 × 10-4/h 
SFR_C(2) = 0.005/h × 0.01745 = 8.725 × 10-5/h 
SFR = SFR_C(1) + SFR_C(2) = 8.1945 × 10-4/h 
e tSFRtR ×−=)(  
RPN_C(1) = 0.001/h × ((19.41 × 10 + 38.16 × 8 + 
7.59 × 4 + 8.06 × 6) × 10-2) = 5.781 × 10-3/h 
RPN_C(2) = 0.005/h × ((0.0 × 10 + 1.304 × 8 + 
0.152 × 4 + 0.289 × 6) × 10-2) = 6.387 × 10-4/h 
RPN_FM(1) = 10 × ((0.001/h × 19.41 + 0.005/h × 
0.0) × 10-2) = 1.941 × 10-3/h 
RPN_FM(2) = 8 × ((0.001/h × 38.16 + 0.005/h × 
1.304) × 10-2) = 3.5744 × 10-3/h 
RPN_FM(3) = 4 × ((0.001/h× 7.59 + 0.005/h × 
0.152) × 10-2) = 3.34 × 10-4/h 
RPN_FM(4) = 6 × ((0.001/h × 8.06 + 0.005/h × 
0.289) × 10-2) = 5.703 × 10-4/h 
Compared RPN_C(1) with RPN_C(2), it is 
evident that the failure of AMBA AHB is more 
critical than the failure of memory sub-system. So, 
the result suggests that the AHB system bus is more 
urgent to be protected than the memory. Moreover, 
the data of RPN_FM(k), k from one to four, infer 
that SDC is the most crucial failure mode in this 
illustrated example. Throughout the above 
vulnerability and risk analyses, we can identify the 
critical components and failure modes, which are the 
major targets for design enhancement. In this case 
study, the top priority of the design enhancement is 
to raise the robustness of the AHB ‘HADDR’ bus 
signals to significantly reduce the rate of SDC 
occurrence and the scales of system risks if the 
system reliability/safety is not adequate. 
We should notice that the case study presented 
here uses only two components for easy 
demonstration of our idea. In the future, for 
completeness, the work will include more 
components, such as ARM CPU, in the vulnerability 
and risk analyses.  
6 Conclusions 
In this work, we have presented a valuable 
SoC-level risk model, and exploited an ARM-based 
SoC platform to demonstrate its feasibility and 
usefulness. The main contributions of this study are 
first to raise the level of dependability validation to 
the untimed/timed functional TLM, and therefore, 
the efficiency of the validation process is 
dramatically increased; second to develop a useful 
risk model to assess the scales of failure-induced 
risks in a system; third to conduct a thorough 
vulnerability analysis of the AMBA bus and 
memory sub-systems based on a real ARM-based 
system platform modeled in SystemC TLM 
abstraction level. The analyses help us measure the 
robustness of the bus and memory sub-systems and 
locate the critical bus signals to be guarded.  
Acknowledgments: The authors acknowledge the 
support of the National Science Council, R.O.C., 
under Contract No. NSC 97-2221-E-216-018. 
Thanks are also due to the National Chip 
Implementation Center, R.O.C., for their support of 
SystemC design tool – CoWare Platform Architect. 
References: 
[1] C. Constantinescu, “Impact of deep submicron 
technology on dependability of VLSI circuits,” 
in 2002 Proc. IEEE Int. Conf. on Dependable 
Systems and Networks, pp. 205-209. 
[2] R. Baumann, “Soft errors in advanced 
computer systems,” IEEE Design & Test of 
Computers, vol. 22, issue 3, pp. 258 – 266, 
May-June 2005. 
[3] Y. Zorian et al., “Impact of soft error 
challenge on SoC design,” in 2005 Proc. 11th 
IEEE Int. On-Line Testing Symposium, pp. 
63 – 68. 
[4] R. Mariani, G. Boschi, and F. Colucci, “Using 
an innovative SoC-level FMEA methodology 
to design in compliance with IEC61508,” in 
2007 Proc. Design, Automation & Test in 
Europe Conf. & Exhibition, pp. 492-497. 
[5] J.-C. Ruiz et al., “On Benchmarking the 
Dependability of Automotive Engine Control 
Applications,” in 2004 Proc. IEEE Int. Conf. on 
 10
 Fig. 2. The operational flow of robustness verification tool.
 12
  14
表  Y04 
報告內容應包括下列各項： 
一、 參加會議經過 
此會議是在瑞士洛桑市舉行，作者是搭乘長榮班機到奧地利、維也納，再
轉搭歐洲鐵路到洛桑市參加第4屆IEEE Industrial Embedded Systems會
議。此次會議共有23篇長篇論文，分成6個梯次作口頭發表，每一篇論文有
25分鐘的報告時間。另外有三個梯次的work-in-progress發表，每一篇論
文有10分鐘的報告時間，報告結束後還有論文海報，與會者可以直接和作
者討論其研究的議題。此會議的主題範圍包括了Network Analysis and 
Modeling, SoC Platforms, Design Methods and Real Time, Wireless 
Health, Networking and communications, Embedded Software, Network 
Design and Optimization, Reconfigurable Platforms and Industrial 
Control, Control and Designs。參加的學者來自美國，台灣，韓國，日本
以及歐洲的國家。作者有一篇長篇論文和一篇work-in-progress論文發表，
長篇論文被安排在第一天下午報告，講題是 “SoC-Level Risk Assessment 
Using FMEA Approach in System Design with SystemC”。在這篇論文報告
後，與會學者提出了兩個問題及一些意見，這些意見具有參考的價值。另
一篇work-in-progress論文被安排在第二天下午報告，講題是 “Robustness 
Investigation of the FlexRay System” 。在這篇論文報告後，同時有論文海報
張貼，與會者直接和作者討論這個研究的議題。作者也利用此次會議的機
會，和來自韓國，日本以及歐洲國家的學者交換一些研究的心得和經驗。
第二天晚上會議主辦單位安排了一場晚宴，地點是在奧林匹克博物館。所
以我們先參觀奧林匹克博物館，之後再到博物館二樓用餐。 
二、 與會心得 
此會議是一年一度 IEEE Industrial Electronics Society 組織所舉辦在
Industrial Embedded Systems 方面的會議，今年是第 4屆。可以透過此會
議與其他國家的學者討論交流，並且掌握最新的研究題材與研究結果。可
以用來檢視作者目前及未來的研究方向與課題的價值與重要性，對於以後
的研究有相當的幫助。另外也有機會請教一些國際級的學者，傾聽他們對一
些議題的意見及看法，可以幫助作者對一些困惑的地方及觀念做一澄清，
對於往後的研究也是有相當的幫助。研究心得是未來輻射線粒子，對於深次
微米製程的晶片影響力越來越大，造成暫時性錯誤的機率也越來越高。此
問題將會影響處理器及系統晶片的可靠度。所以有幾個問題值得進一步的探
討(針對深次微米製程的系統晶片): FMEA 分析流程建立，容錯技術的有
效性，灌錯及錯誤模擬分析工具環境的建立，系統驗證分析平台建立等等。
 
三、 攜回資料名稱及內容 
會議論文集光碟片 
