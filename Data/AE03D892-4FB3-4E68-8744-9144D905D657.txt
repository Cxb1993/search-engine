 2
力學的定律來設計電腦 [12]。 
(3) Deutsch (1985)：提出第一台萬用的量子圖林機和量子平行計算的方法[13]。 
(4) Yao (1993)：提出量子電路的複雜度理論[14]。 
(5) Shor (1994)：提出一可以在多項式時間內破解因數分解和離散對數的量子演算法。使
得 RSA 密碼法面臨被破解的命運[15]-[17]。 
(6) Grover (1996)：提出有效的量子搜索演算法[18]。 
(7) Vandersypen etl (1999)：建立 3 個位元的 NMR 量子電腦來實現 Grover 演算法[19]。 
(8) Vandersypen etl (2000)：建立5個位元的NMR量子電腦來實現order-finding演算法[20]。 
(9) Vandersypen etl (2001)：建立 7 個位元的 NMR 量子電腦來實現因數分解演算法[21]。 
(10) 2003 年 World Scientific 成立第一份量子資訊研究的專業期刊[22]。 
(11) 2004 年 MagiQ 科技公司推出第一套量子加解密系統的商品[23]。 
(12) Kastner (2005):闡述如何使用量子點(Quantum dot)的技術來實現隔熱的量子電腦，進
而解決傳統電腦的難題[24]。 
從以上的敘述可知量子計算的研究已有 20 年歷史，從理論，演算法，實現和商品化，
一步一步地被加以完成。由於量子計算是利用分子，原子和光子等奈米級的粒子來實現
計算的演算法，故它是屬於奈米技術的範籌，目前世面上的奈米技術介紹書籍[25]-[28]，
均將量子計算和量子通訊視為奈米科技的分支之一。目前量子計算在數位信號處理方面
的一重要研究子題為設計離散信號轉換的量子電路，這分支的研究情形整理如下： 
(1) Shor (1994) ：提出量子離散傅立葉轉換的電路，並且利用此電路來解決大整數分解的
問題[15]。 
(2) Fijany 和 William (1998) ：提出小波轉換(wavelet transform)的量子電路[29]。 
(3) Klappenecker 和 Rotteler (2001) ：提出量子離散正餘弦轉換的電路，這個設計主要是
reuse Shor 在 1994 年所提的量子離散傅立葉轉換的電路[30]。 
(4) Labunet 等 (2001) ：設計出分數 Walsh 轉換的量子電路[31]。 
(5) Cybenko (2001) ： 利用 QR 分解將一般正交矩陣分解成 plane rotation matrix 的乘積，
進而設計出其量子電路[32]。 
(6) Agaian 和 Klappenecker (2002) : 設計出傾斜轉換(Slant transform) 的量子電路[33]。 
(7) Klappenecker 和 Rotteler (2003) ：設計出分數傅立葉轉換轉換的量子電路[34]。 
(8) Tseng 和 Hwang (2004): 設計出 8x8 離散哈特萊(Hartley)轉換的量子電路[35]。 
(9) Tseng 和 Hwang (2004): 設計出 8x8 離散傅立葉(Fourier)轉換的量子電路[36]。 
(10) Tseng 和 Hwang (2004): 利用遞迴分解法設計出一般化的離散傅立葉(Fourier)轉換的
量子電路[37]。 
(11) Tseng 和 Hwang (2005): 設計出 8x8 離散餘弦(cosine)轉換的量子電路[38]。 
(12) Tseng 和 Hwang (2005): 利用遞迴分解法設計出一般化的離散傅立葉(Fourier)轉換的
量子電路[39]。 
(13) Karafyllidis (2005):發展出量子電路的軟體模擬器，可驗証各種離散信號轉換量子電
路的正確性[40]。 
迄此，我們已將量子計算的簡史描述完畢，接著讓我們來看遺傳演算法的發展簡史，
遺傳演算法(Genetic Algorithm，GA)最初是由美國密西根大學的 John Holland 在 1960 年
所發展的，提出以自然界進化現象來發展人工智慧系統。1967 年 Bagley 在它的論文中提
出了遺傳演算法一詞，主要目的在處理一些遊戲的程式。直到 1975 年，由 John Holland
所著作的 Adaptation in Natural and Artificial System 一書[41]，奠定了遺傳演算法的主要基
礎。1989 年 Goldberg 出版 Genetic Algorithms in Search, Optimization and Machine Learning
 4
∑−
=
=
12
0
n
i
i icψ      此處 ∑−
=
=
12
0
2 1
n
i
ic   
為了更明白其表示法，以下我們舉個簡單的例子來做說明，若已知有一 3 個 qubits 的量子
暫存器，其表示如下： 
1 1 1
22 2
1 1 3
22 2
−
⎡ ⎤⎢ ⎥⎥⎢ ⎦⎣  
因此由張量積(Tensor product)展開，我們可得到下式： 
1 3 1 3 1 3 1 3000 001 010 011 100 101 110 111
4 4 4 4 4 4 4 4
+ − − + + − −  
由此式子可看出狀態 000 , 001 , 010 , 011 , 100 , 101 , 110 , 111 的機率分別為 1/16，
3/16，1/16，3/16，1/16，3/16，1/16，3/16，因此 3 個 qubits 就有八種狀態的線性組合，
這將增加表示法的多樣性。量子遺傳演算法是由 Han 和 Kim 在 2002 年根據量子計算的
原理所設計出來的演算法[69]，其整體的架構如下圖所示 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Q(t-1):量子位元暫存器 
P(t):二進位解答 
b 
 B(t) 
P(t) 
Q(t-1) Q Q-gate 
更新 更新
觀察 
   選擇最佳值與全區移動 
1x
t 和 11bt− 選較佳 
區域移動區域移動 
觀察 
1b
t
2b
t btn
1x
t x tn
-1
1q
t -1qtn
x tn 和 1btn− 選較佳 
 6
而完整的流程圖如下圖所示，此流程圖很容易利用 C 語言或 Matlab 將它轉成程式。 
 
迄此我們已將量子遺傳演算法簡述完畢，底下讓我們來探討如何使用此演算法來解決背
包問題。 
2、背包問題求解 
給定 m 個物品和一個背包，如何挑出一些物品使得下列利益最大 
∑
=
=
m
i
ii xpxf
1
)(  
 開始
設 t = 0
初始化 Q(t)
觀察 Q(t)產生 P(t)
計算 P(t)適應函數值
從 P(t)取最佳存入 B(t)
否 
觀察 Q(t-1)產生 P(t)
計算 P(t)適應函數值
更新 Q(t)
B(t-1)和 P(t)中取最佳存入B(t)
在 B(t)中取最佳存入 b
移動條件是否成立 
移動 
終止條件是否成立 
是 
否
是 
 程式結束 
t t+1←
 8
0 100 200 300 400 500 600 700 800 900 1000
580
585
590
595
600
605
610
615
620
Generations
pr
of
it
GA-Rep2
QGA
 
圖 1 背包 100 個項目 GA 與 QGA 之比較 
 
0 100 200 300 400 500 600 700 800 900 1000
1420
1440
1460
1480
1500
1520
1540
Generations
pr
of
it
GA-Rep2
QGA
 
圖 2 背包 250 個項目 GA 與 QGA 之比較 
 
 10
為 1，但型二和型三則不能全頻帶設計。在微分器設計上，我們四種類型皆採用，但因為
第二型與第三型不能設計全頻帶，故最高頻率 pf 我們設定分別為0.92π 和0.88π，濾波器
係數長度為 25 點。我們將量子遺傳演算法其參數設定如下，每個濾波器係數有 32 個二
進 制 位 元 ， 族 群 數 目 50 ， 世 代 數 2000 ， 旋 轉 角 度 3 5 0.09θ θ π= = ，
1 2 4 6 7 8 0θ θ θ θ θ θ= = = = = = ，每代均實施全域移動，以下分別是程式模擬結果，圖 4 為
使用量子遺傳演算法設計第一型 2 階 25 點微分器其收斂情況，而圖 5 為第一型偶數階奇
數點二階微分器的振幅響應，圖 6 為第二型偶數階偶數點四階微分器的振幅響應，圖 7
為第三型奇數階奇數點三階微分器的振幅響應，圖 8 為第四型奇數階偶數點五階微分器
的振幅響應。表 2 為量子遺傳演算法與傳統遺傳演算法應用於微分器的比較，傳統遺傳
演算法參數設定分別為，每個濾波器係數有 32 個二進制位元，族群數目 50，世代數 2000，
交配率及突變率則經找尋發現分別是 0.9 及 0.02 可獲得較好的效能。表中的平均值為程
式執行 30 次後最小平方誤差的平均值，由表可看出量子遺傳演算法比傳統遺傳演算法可
獲得更好的效能。 
 
 
0 200 400 600 800 1000 1200 1400 1600 1800 2000
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
Generations
Fi
tn
es
s 
V
al
ue
 
圖 4 量子遺傳演算法應用於第一型 2 階 25 點微分器之收斂情形 
 
 12
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9
0
0.01
0.02
0.03
0.04
0.05
0.06
0.07
0.08
0.09
Frequency
M
ag
ni
tu
de
Ideal
Simulation
 
圖 7 使用 QGA 設計三階 17 點微分器之振幅響應 
 
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1
0
0.005
0.01
0.015
0.02
0.025
0.03
0.035
Frequency
M
ag
ni
tu
de
Ideal
Simulation
 
圖 8 使用 QGA 設計五階 32 點微分器之振幅響應 
 
 14
a5               ,    if  
( ) 5               ,    if  
don't care  ,   otherwise
a b
ω ω
τ ω ω ω ω
≤⎧⎪= ≤ ≤⎨⎪⎩
 
其中， / 4; / 2a bω π ω π= = 。在濾波器參數中，我們設 K= 4，因此有(1+4*K)個係數，即
17 個係數，另外 QGA 參數中我們設族群數目為 100，世代數為 1000，每代均實施全域
移動，旋轉角度 3 5 0.09θ θ π= = ， 1 2 4 6 7 8 0θ θ θ θ θ θ= = = = = = ，每個係數為 16 個二進位字
元，故每個染色體有 272 個二進位字元。為了便於比較，我們也使用傳統遺傳演算法設
計，其參數族群數目、世代數、染色體長度均與 QGA 相同，而交配率與突變率分別為
0.9 及 0.02。圖 9~12 是由傳統 GA 設計低通濾波器所得的結果，而圖 13~16 是由 QGA 設
計低通濾波器所得的結果，由圖可知設計結果其極點均位於單位元內，故所設計出的濾
波器均穩定，GA 及 QGA 所設計的誤差值分別為 49.5883 10−× 與 44.0637 10−× ，可看出量
子遺傳演算法比傳統遺傳演算法可獲得更好的效能。 
 
 
0 100 200 300 400 500 600 700 800 900 1000
10
-4
10
-3
10
-2
10
-1
10
0
10
1
 
圖 9 使用傳統 GA 設計低通濾波器其收斂情況 
 
 16
0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5
3.5
4
4.5
5
5.5
6
Normalised Frequency  (*pi rad/sample)
G
ro
up
 d
el
ay
 (i
n 
sa
m
pl
es
)
 
圖 12 使用傳統 GA 設計低通濾波器其群延遲頻率響應圖 
 
 
0 100 200 300 400 500 600 700 800 900 1000
10-4
10-3
10-2
10-1
 
圖 13 使用 QGA 設計低通濾波器其收斂情況 
 
 18
0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5
3.5
4
4.5
5
5.5
6
Normalised Frequency  (*pi rad/sample)
G
ro
up
 d
el
ay
 (i
n 
sa
m
pl
es
)
 
圖 16 使用 QGA 設計低通濾波器其群延遲頻率響應圖 
 
五、結論與討論 
在此計劃中，我們已成功地推導有效的量子遺傳演算法來解決各種最佳化的問題,一
個典型的應用便是背包問題，再者，我們利用量子遺傳演算法來設計各種規格的 FIR 和
IIR 數位濾波器，本計畫的實行，已經順利地達成這個目的。量子遺傳演算法是一非常有
效的工具，可以解決工程上各種最佳化的問題，不侷限於信號處理這個領域而已，故可
將此方法延伸至通訊，控制，資訊等各領域的應用上。 
 
六、參考文獻 
[1] N. Zettili, Quantum Mechanics: Concepts and Applications, John Wiley & Sons, 2001.  
[2] D. J. Griffiths, “Introduction to Quantum Mechanics”, Second Edition, Prentice Hall, 2005.  
[3] H. K. Lo, T. Spiller and S. Popescu, Quantum Information and Computation, World Scientific, 1998.  
[4] M. Brooks Ed., Quantum Computing and Communication, Springer Verlag, 1999.  
[5] C. P. Williams and S. H. Clearwater, Ultimate Zero and One: Computing at the Quantum Frontier, 
Copernicus, 2000. 
[6] M.A. Nielsen and I. L. Chuang, Quantum Computation and Quantum Information, Cambridge University 
Press, 2000. 
[7] G. Leuchs and T. Beth, Quantum Information Processing, Wiley-Vch, 2003. 
[8] G. Benenti, G. Casati and G. Strini, Principles of Quantum Computation and Information-Volume I: Basic 
Concepts, World Scientific, 2004. 
[9] D. Belkic, Quantum-Mechanical Signal Processing and Spectral Analysis, IOP Publishing Ltd, 2005. 
[10] Y. C. Eldar and A.V. Oppenheim, Quantum signal processing, IEEE Signal Processing Magazine, pp.12-32, 
Nov. 2002. 
[11] P. Benioff, “The computer as a physical system: A microscopic quantum mechanical Hamiltonian model of 
computers as represented by Turing machines”, Journal of Statistical Physics, vol.22, pp.563-591, 1980. 
[12] R. Feynman, “Simulating physics with computers”, Inter. Journal of Theoretical Physics, vol.21, 
pp.467-488, 1982. 
[13] D. Deutsch, “Quantum theory, the Church-Turing principle, and the universal quantum computer”, Proc. 
Royal Society London, Series A, vol.400, pp.97-117, 1985. 
[14] A. Yao, “Quantum circuit complexity,” Proceedings 34th Annual Symposium on Foundations of Computer 
 20
[45] N.Chaiyaratana and A.M.S.Zalzala, “Hybridization of neural networks and genetic algorithms for 
time-optimal control”, Evolutionary Computation, vol.1, pp.389-396, 1999. 
[46] K.S. Tang, K.F. Man, S. Kwong and Q. He, “Genetic algorithms and their application,” IEEE Signal 
Processing Magazine, pp.22-37, Nov.1996. 
[47] K.F. Man, K.S. Tang and S. Kwong, Genetic Algorithm, Springer, 1999. 
[48] D. Suckley, “Genetic algorithm in the design of FIR filters,” IEE Proc.-G, Vol.138, pp.234-238, Apr. 1991. 
[49] G. Wade, A. Roberts and G. Williams, “Multiplier-less FIR filter design using a genetic algorithm,” IEE 
Proc.-Vis. Image Signal Processing, Vol.141, pp.175-180, June 1994. 
[50] H.C. Lu and S.T. Tzeng, “Design of two-dimensional FIR digital filters for sampling structure conversion 
by genetic algorithm approach,” Signal Processing, vol.80, pp.1445-1458, 2000. 
[51] K.S. Tang, K.F. Man, S. Kwong and Z.F. Liu, “Design and optimization of IIR filter structure using 
hierarchical genetic algorithms,” IEEE Trans. on Industrial Electronics, Vol.45, pp.481-487, June 1998. 
[52] R. Thamvichai, T. Bose and R.L. Haupt, “Design of 2-D multiplierless IIR filters using the genetic 
algorithm,” IEEE Trans. on Circuits and Systems,-I, Vol.49, pp.878-882, June 2002. 
[53] N.E. Mastorakis, I.F. Gonos and M.N.S. Swamy, “Design of two-dimensional recursive filters using genetic 
algorithms,” IEEE Trans. on Circuits and Systems-I, Vol.50, pp.634-639, May 2003. 
[54] H. Safiri, M. Ahmadi, G.A. Jullien and W.C. Miller, “A new algorithm for the elimination of common 
subexpressions in hardware implementation of digital filters by using genetic programming,” Journal of 
VLSI Signal Processing, Vol.31, pp.91-100, 2002. 
[55] K. Uesaka and M. Kawamata, “Evolutionary synthesis of digital filter structures using genetic 
programming,” IEEE Trans. on Circuits and Systems-II, Vol.50, pp.977-983, Dec. 2003. 
[56] S.C. Ng, S.H. Leung, C.Y. Chung, A. Luk and W.H. Lau, “The genetic search approach: a new learning 
algorithm for adaptive IIR filtering,” IEEE Signal Processing Magazine, pp.38-46, Nov.1996. 
[57] M. Gudmundsson, E. A. El-Kwae and M.R. Kabuka, “Edge detection in medical images using a genetic 
algorithm,” IEEE Trans. on Medical Imaging, Vol.17, pp.469-474, June 1998. 
[58] P.K. Kumsawat, K. Attakitmongcol and A. Srikaew, “A new approach for optimization in image 
watermarking by using genetic algorithms,” IEEE Trans. on Signal Processing, vol.53, pp.4707-4719, Dec. 
2005. 
[59] S.B. Cho and J.Y. Lee, “A human-oriented image retrieval system using interactive genetic algorithm,” 
IEEE Trans. on Systems, Man, and Cybernetics-A, Vol.32, pp.452-458, May 2002. 
[60] S.B. Cho, “Emotional image and musical information retrieval with interactive genetic algorithm,” Proc. Of 
The IEEE, Vol.92, pp.702-711, Apr.2004. 
[61] D.R. Bull and D.W. Redmill, “Optimization of image coding algorithms and architectures using genetic 
algorithms,” IEEE Trans. on Industrial Electronics, Vol.43, pp.549-558, Oct. 1996. 
[62] S.K. Mitra, C.A. Murthy and M.K. Kundu, “Techniques for fractal image compression using genetic 
algorithm,” IEEE Trans. on Image Processing, Vol.7, pp.586-593, Apr. 1998. 
[63] D. Dasgupta, G. Hernandez and F. Nino, “An evolutionary algorithm for fractal coding of binary images,” 
IEEE Trans. on Evolutionary Computation, Vol.4, pp.172-181, July 2000. 
[64] A.S. Abutaleb and M. Kamel, “A genetic algorithm for the estimation of ridges in fingerprints,” IEEE Trans. 
on Image Processing, Vol.8, pp.1134-1139, Aug. 1999. 
[65] C. Liu and H. Wechsler, “Evolutionary pursuit and its application to face recognition,” IEEE Trans. on 
Pattern Analysis and Machine Intelligence, Vol.22, pp.570-582, June 2000. 
[66] A.D. Parkins and A.K. Nandi, “Genetic programming techniques for hand written digit recognition,” Signal 
Processing, Vol.84, pp.2345-2365, 2004. 
[67] Y.U. Yim and S.Y. Oh, “Three-feature based automatic lane detection algorithm (TFALDA) for 
autonomous driving,” IEEE Trans. on Intelligent Transportation Systems, Vol.4, pp.219-225, Dec. 2003. 
[68] S. M. Bhandarkar and H. Zhang, “Image segmentation using evolutionary computation,” IEEE Trans. on 
Evolutionary Computation, Vol.3, pp.1-21, Apr. 1999. 
[69] K.H. Han and J.H. Kim, “Quantum-inspired evolutionary algorithm for a class of combinatorial 
optimization”, IEEE Transactions on Evolutionary Computation, vol.6, pp.580-593, June 2002. 
[70] K.H. Han and J.H. Kim, “Quantum-inspired evolutionary algorithms with a new termination criterion, He 
Gate, and Two-Phase Scheme, ” IEEE Transactions on Evolutionary Computation, vol.8, pp.156-169, Apr. 
2004. 
 
七、計畫成果自評 
本計畫已成功推導量子遺傳演算法來解決背包問題,再者,亦利用量子遺傳演算法來設計
各種規格的 FIR和 IIR數位濾波器,模擬結果均較傳統的遺傳演算法有較佳的結果,這些
成果適合寫成論文發表。 
 
Digital Integrator Design Using Recursive Romberg 
Integration Rule and Fractional Sample Delay 
 
C.C. Tseng 
Department of Computer and Communication Engineering 
National Kaohsiung First University of Science and Technology 
Kaohsiung, Taiwan 
tcc@ccms.nkfust.edu.tw 
  
Abstract—In this paper, the digital IIR integrator design based 
on recursive Romberg integration rule and fractional sample 
delay will be investigated. Starting with the trapezoidal 
integrators, the approximation error of frequency response of 
digital integrator can be reduced recursively by using 
Romberg rule. Although the proposed IIR digital integrators 
will involve the implementation of fractional sample delays, 
this problem is easily solved by applying well-documented 
design techniques of the FIR Lagrange and IIR allpass 
fractional delay filters. Several design examples are illustrated 
to demonstrate the effectiveness of the proposed method. 
I. INTRODUCTION 
Digital integrator is an important device in the areas of 
control, radar and biomedical engineering [1]-[3]. In the 
literature, some typical transfer functions of IIR integrators 
are given by 
            Rectangular:     
1
1
1 1
)(
−
−
−
=
z
zzH                      (1) 
           Trapezoidal:     
1
1
2 1
1
2
1)(
−
−
−
+
=
z
zzH                   (2) 
           Simpson:    
2
21
3 1
41
3
1)(
−
−−
−
++
=
z
zzzH           (3) 
Moreover, in the numerical analysis textbooks, three typical 
approaches to evaluate the numerical integration are 
Newton-Cotes quadrature rule, Romberg integration rule 
and Gauss-Legendre integration rule [4]. Two special cases 
of Newton-Cotes rule are trapezoidal and Simpson rules 
which have been used to design IIR integrators )(2 zH  and 
)(3 zH  in Eq.(2)(3). So far, the topic that applies the 
Romberg integration rule to design integrator is still not 
investigated in the literature. The purpose of this paper is to 
study this problem. The Romberg integration is proposed in 
1955 and its historical background can be found in [5]. 
Romberg integration uses the composite trapezoidal rule to 
give preliminary approximations and then applies the 
Richardson extrapolation process to obtain improvements of 
the approximations. In [6], a linear systolic array and 
systolic ring have been presented to compute the Romberg 
integral table efficiently.  Recently, Romberg integration has 
been also extended to compute fuzzy integration [7]. 
II. RECURSIVE ROMBERG INTEGRATION RULE 
In this section, we will review the recursive Romberg 
integration rule which can be used to estimate the following 
definite integral numerically: 
                               dxxf
b
a∫ )(                                 (4) 
where interval [a,b] is the integral region. Because Romberg 
method needs to use composite trapezoidal integration (CTI) 
rule, let us describe CTI rule below. Suppose that the 
interval [a,b] is uniformly partitioned into M subintervals 
],[ 1 kk xx −  (k=1,2,...,M). The length of each subinterval is 
M
abh −=  and the sampling point kx  is equal to kha + . 
Given the M+1 sampling data ))(,( kk xfx , then the CTI 
rule for M subintervals can be expressed as 
    
[ ]
∑
∑
−
=
−
=
−
++=



++
+++
=
+=
1
1
1
210
1
1
)())()((
2
)()(2
)(2)(2)(
2
)()(
2
),(
M
k
k
MM
M
k
kk
xfhbfafh
xfxf
xfxfxfh
xfxfhhfT
"
      (5) 
After studying error analysis, it can be shown that the error 
for the composite trapezoidal rule is of order )( 2hO , i.e. 
             )(),()( 2hOhfTdxxf
b
a
+=∫                 (6) 
Moreover, when we choose JM 2= , the composite 
trapezoidal integration can be computed recursively. The 
main result is summarized as the following fact: 
Fact 1: Define ( ))()()0( 2 bfafT ab += −  and  
27261-4244-0921-7/07 $25.00 © 2007 IEEE.
Fig.2(c) shows the error curve 2,JE  defined in Eq.(19) for 
α=0.95. Obviously, the error 2,JE  is a decreasing function 
of J.  
Case 3: k=3 
In this case, the transfer function )(3, zR J  is give by 
J
JJJJJ
JJJ
z
zzzzz
zzz
zRzR
zR
J
JJ
J
2
8
2
8
2
7
2
6
2
5
2
4
2
3
2
2
2
1
2
2,12,
3,
1
21710243521024436
10243521024217
22835
1
164
)()(64
)(
−
−−−−−
−−−
−
−
−
++++
++++
×
=
−
−
=
                                                                                        (21) 
Fig.2(d) shows the error curve 3,JE  for α=0.95. Clearly, 
the error 3,JE   decreases when J increases. Moreover, 
when J approaches infinity, 3,JE  will go to minus infinity. 
    So far, the transfer function )(, zR kJ  of Romberg 
integrator has been obtained for k=0, 1, 2, 3. The remaining 
problem is how to get )(, zR kJ  for k>3. In the following, 
one recursive computation method is developed to solve this 
problem. From Eq.(17), (20) and (21), the transfer function 
)(, zR kJ  can be rewritten as a unified form below: 
                   
)1(2
)(
2
2
2
2
0
)(
,
J
k
k
J
i
z
zb
zR
kJ
i
k
i
kJ
−
−
−
=
−
=
∑
                     (22) 
Now, using Eq.(22), the transfer function in Eq.(16) can be 
written as 
  
)1(2
14
1
1
)14(2
4
)(
14
1)(
14
4)(
2
2
1
2
2
2
12
1
2
2
0
)1(
2
0
)1(
1,11,,
J
k
k
J
i
J
kk
J
i
z
zb
zzb
zRzRzR
kJ
i
k
ik
i
k
ik
k
kJkkJk
k
kJ
−
−
−
−
−
−
−
−










−
−



+



−
=
−
−
−
=
−
=
−
=
−
−−−
∑
∑  (23) 
Comparing Eq.(22) and Eq.(23), the coefficient sequence 
],,,[ )(
2
)(
1
)(
0
kkk
kbbb "  can be obtained from the coefficient 
sequence ],,,[ )1(
2
)1(
1
)1(
0 1
−−−
−
kkk
kbbb "  by using the following 
recursive relation: 
           
],0,,0,,0,[
14
1
]1,0,,0,0,1[],,,[
)14(2
4
],,,[
)1(
2
)1(
2
)1(
1
)1(
0
12
)1(
2
)1(
1
)1(
0
)(
2
)(
1
)(
0
1
1
1
−−−−
−
−−−
−
−
−
−
−
∗
−
=
kkkk
k
zeros
kkk
k
k
kkk
k
k
k
k
bbbb
bbb
bbb
"

""
"
(24) 
where notation * denotes the convolution operator. The 
initial condition of the recursive relation in Eq.(24) is 
],[],[ 2121
)0(
1
)0(
0 =bb . For illustrating the effectiveness of the 
above recursive relation, one typical example is described 
below: For k=1, we have the following results: 
            [ ] [ ]
],,[
,0,1,1],[
],,[
6
1
6
4
6
1
2
1
2
1
3
1
2
1
2
1
6
4
)1(
2
)1(
1
)1(
0
=
−∗=
bbb
            (25) 
So far, the design of Romberg integrator has been described 
in details. In the next section, let us study how to use 
fractional sample delay to implement this kind of IIR 
integrator )(, zR kJ . 
IV. IMPLEMENTATION ISSUE 
In this section, the implementation issue of IIR integrator 
)(, zR kJ  will be studied. To achieve this purpose, the 
transfer function in Eq.(22) is rewritten as 
              
kJ
k
J
z
zb
zR i
ik
i
kJkJ 2
2
0
)(
,
)(1
)(
2
1)(
2
1
2
1
−
−
−
=
∑
=
−
           (26) 
Based on this equation, a general direct-form realization of 
integrator )(, zR kJ  is shown in Fig.3. It is clear that this 
structure only uses the fractional sample delay Jz 2
1− . Once 
this fractional delay element is implemented and inserted 
into the structure in Fig.3, the IIR integrator is realized. 
Thus, the problem is reduced to design fractional sample 
delay Jz 2
1−
. Fortunately, this design is easily solved by 
applying well-documented techniques of the FIR Lagrange 
and IIR allpass fractional delay filters in [8]. In the 
following, FIR case is studied. The FIR transfer function to 
approximate the delay Jz 2
1−
 is approximated by 
                         ∑
=
−
=
M
n
nJ
n
L
J zczzC
0
)()(                    (27) 
where the filter coefficients )( J
nc  can be computed by the 
following formula [8]: 
                       ∏
≠= −
−+
=
M
nmm
J
n mn
mL
c J
,0
2
1
)(                  (28) 
The L is usually chosen as the integer nearest to 
2
M .  
Inserting the FIR filter )(2 zC  with M=20 and L=10 into the 
structure in Fig.3 with J=k=2, the resultant magnitude of the 
2728
Closed-Form Design of Variable Fractional Order 
Integrator Using Complex Cepstrum 
 
C.C. Tseng 
Department of Computer and Communication Engineering 
National Kaohsiung First University of Science and Technology 
Kaohsiung, Taiwan 
tcc@ccms.nkfust.edu.tw 
  
Abstract—In this paper, the design problem of variable 
fractional order integrator (FOI) is investigated. First, the 
transfer function of FOI is obtained by taking fractional power 
of the transfer function of conventional first order integrator. 
Then, to implement this irrational transfer function, the 
complex cepstrum and Taylor series expansion are used to get 
a realizable approximated rational function. The proposed 
implementation structure is similar to the conventional Farrow 
structure of fractional sample delay filter. Finally, the design of 
variable fractional Simpson integrator is demonstrated to 
illustrate the performance of the proposed method. 
I. INTRODUCTION 
In recent year, the variable digital filter design has become 
an important research topic in digital signal processing area 
[1]-[5]. The main feature of variable filter is that the 
frequency characteristics can be quickly changed without re-
designing a new filter, so the variable filter is particularly 
useful for on-line signal processing. Generally speaking, the 
design of variable digital filter can be classified into the 
following two categories. One is the digital filters with 
adjustable magnitude response. This kind of filter is useful 
in audio signal processing and noise reduction [1][2]. The 
other is the digital filter with adjustable fractional delay 
response. This type of filter has been widely used in the 
applications of time adjustment in digital receiver, antenna 
array processing, speech coding and synthesis, modeling of 
music instruments and A/D conversion etc [3][4]. An 
excellent survey of the variable fractional delay filter design 
has been presented in tutorial paper [3]. Except the above 
two kinds of filters, the design of digital filters with 
adjustable magnitude and fractional delay responses have 
been also considered recently [5]. 
    On the other hand, the fractional calculus has received 
great attentions in many engineering applications and 
science including fluid flow, automatic control, electrical 
networks, electromagnetic theory and image processing [6]-
[11]. The integer order n of derivative 
n
n
n
dx
xfdxfD )()( =  of function f(x) is generalized to 
fractional order )( xfD υ , where υ  is a real number. One 
of important research topics in fractional calculus is to 
implement the fractional operator υD  in continuous and 
discrete time domains. An excellent survey of this 
implementation has been presented in the recent paper [7]. 
For continuous time case, some methods for obtaining an 
approximated rational function using evaluation, 
interpolation and curve fitting techniques have been studied. 
For discrete time case, there have been several methods 
presented to design FIR and IIR filters for implementing 
operator υD , including fractional differencing formula, 
trapezoidal rule, continued fraction expansion, and Prony's 
method [8]-[11]. 
     In this paper, we will study the discrete-time 
implementation of fractional operator υD , that is, the 
design of fractional order integrator (FOI). When the order 
υ  is a negative fractional number, it is called fractional 
order integrator design. If order υ  is a positive fractional 
number, it is referred to as fractional order differentiator 
design. In the conventional FOI designs, the order υ  is 
assumed to be a fixed fractional number. Here, we will 
extend the order υ  to be an adjustable fractional number. 
Thus, it is a research branch of variable filter design. In the 
proposed method, the transfer function of FOI will be 
obtained by taking fractional power of the transfer function 
of conventional first order integrator. To implement this 
irrational transfer function, the complex cepstrum and 
Taylor series expansion are utilized to get a realizable 
approximated rational function. The proposed 
implementation structure is similar to the conventional 
Farrow structure of fractional sample delay filter. The 
details are described in next two sections. 
II. PRELIMINARIES 
In this paper, we will use complex cepstrum to design 
variable fractional order integrator, so let us first review the 
34471-4244-0921-7/07 $25.00 © 2007 IEEE.
fractional delay filter implementation [12]. Thus, once 
integer order integrator )( zG  is given, its fractional order 
version )( zH  is easily obtained by using the above design 
procedure. In next section, the design of variable fractional 
order Simpson integrator will be used to illustrate this design 
procedure  
III. DESIGN OF VARIABLE FRACTIONAL ORDER SIMPSON 
INTEGRATOR 
The transfer function of Simpson integrator is given by 
                 
2
21
1
41
3
1)(
−
−−
−
++
=
z
zzzG                     (11) 
Replacing z  by ωje , the frequency response of )( zG  is 
given by 
                   
)sin(3
)cos(2)(
ω
ωω
j
eG j +=                      (12) 
When ω  is small, we have 1cos ≈ω  and ωω ≈sin . 
Thus, the frequency response can be approximated by 
                             
ω
ω
j
eG j 1)( ≈                           (13) 
for small frequency ω . It is clear that )( zG  is an 
approximated integrator. Fig.2(a)(b) show the magnitude 
response |)(| ωjeG  and normalized phase response 
πω 5.0/))(( jeGangle . The dashed lines are the ideal 
response 
ω
1  and 2π− . Now, the fractional order Simpson 
integrator )( zH  can be obtained by taking υ -th power of 
)( zzG , that is,  
                        [ ]υ)()( zzGzH =                         (14) 
Using Eq.(13), the frequency response of )( zH  can be 
approximated by 
                    ωυ
υ
ω
ω
jj e
j
eH 



≈
1)(                   (15) 
for small frequency ω . Thus, )( ωjeH  approximates the 
ideal frequency response )(ωD  well at low frequency 
range if delay I is chosen as υ− . Because )( zH  in 
Eq.(14) is an irrational function, it can not be realized. In 
order to implement )( zH , let us find its rational 
approximation by using complex cepstrum. To achieve this 
purpose, )(zG  in (11) is factorized into the following 
product form by using polynomial factorization: 
        
)1)(1(3
)1()1()( 11
111
−−
−−
−+
++
=
zz
bzzzazG a               (16) 
where 732.332 =+=a  and 268.032 =−=b . 
Taking logarithm at both sides of Eq.(14) and using Eq.(16), 
we have complex cepstrum of )( zH  below: 
 
[ ]




−−+−
++++
=
=
−−
−
)1ln()1ln(
)1ln()1ln()ln(
)(ln))(ln(
11
11
3
zz
bzz
zzGzH
a
a
υ
υ
    (17) 
Using power series in Eq.(7), we have 
n
N
n
n
a
n
n
n
n
a
n
n
n
n
n
n
n
n
n
a
a
z
n
z
n
z
n
z
n
z
n
zzz
−
=
−
−
∞
=
−
∞
=
−
∞
=
−
∞
=
−
−
−−−
∑
∑
∑∑∑
−−+
≈
−−+
=
+
−
+−=
−−+−+
1
1
1
1
1
111
1
1111
)()1(1
)()1(1
1)1()(
)1ln()1ln()1ln(
   (18) 
and 
              
∑
∑
=
∞
=
−
−≈
−
−=+
2
1
1
)(
)()1ln(
N
n
n
n
n
n
n
z
n
b
z
n
bbz
                   (19) 
where integer 1N  and 2N  is the truncation order. 
Substituting Eq.(18)(19) into Eq.(17), it yields 
   
)(
)()1(1
)ln()(
))(ln(
1
2
1
1
3
1
zC
z
n
z
n
b
zH
n
N
n
n
a
n
an
N
n
n
υ
υ
=










−−+
+
+
−
−
≈
−
=
−
=
∑
∑
    (20) 
where non-causal FIR filter )( zC  is defined by 
           
n
N
n
n
a
n
an
N
n
n
z
n
z
n
bzC
−
=
−
=
∑
∑
−−+
+
+
−
−=
1
2
1
1
3
1
)()1(1
)ln()()(
       (21) 
Taking exponentiation at both side of Eq.(20) and using 
Taylor series expansion, we get 
            


 


+=
+≈
+=
≈
∏∑
∑
∑
==
=
∞
=
m
k
M
m
m
m
M
m
m
m
m
zC
k
zC
zC
m
m
zC
ezH
11
1
1
)(
)(1
)(
!
1
!
))((1
)(
υ
υ
υ
υ
             (22) 
where integer M  is the truncation order. Based on this 
equation, )( zH  can be implemented by using structure in 
Fig.1 where )( zC  is given in Eq.(21). When we choose 
1001 =N , 1002 =N , 5=M  and 3.0=υ , Fig.3(a)(b) 
show the magnitude response |)(| ωjeH  and normalized 
3449
Eigenvector and Fractionalization of Discrete 
Hadamard Transform 
 
C.C. Tseng 
Department of Computer and Communication Engineering 
National Kaohsiung First University of Science and Technology 
Kaohsiung, Taiwan 
tcc@ccms.nkfust.edu.tw 
  
Abstract—In this paper, the eigenvector and fractionalization 
of discrete Hadamard transform (DHT) is investigated. First, a 
Kronecker product method for finding eigenvalue and 
eigenvector of DHT matrix is described. Then, the number of 
sign change of eigenvector is used to arrange the index of 
eigenvector. Next, a discrete fractional Hadamard transform is 
defined by using the result of eigen-decomposition. Finally, the 
comparison with conventional recursive computation method 
is made to demonstrate the effectiveness of the proposed 
method. 
I. INTRODUCTION 
    The unitary transforms have been extensively used in 
various digital signal processing applications including 
image compression and data interpolation [1][2]. Some 
typical ones are the discrete Fourier transform (DFT), the 
discrete cosine transform (DCT) and discrete Hadamard 
transform (DHT) etc. One of the active research topics is to 
study the eigen-decomposition of these unitary transform 
matrices. The eigen-structures of DFT matrix have been 
investigated in [3]-[6]. The main task is to study the 
multiplicities of eigenvalues and to find real, symmetric and 
orthogonal eigenvectors. Recently, the researchers are 
interested in finding Hermite-Gaussian like eigenvectors of 
DFT matrix for defining the discrete fractional Fourier 
transform [7][8]. In [9], the eigen-decomposition of discrete 
Hartley transform is first derived by using the relationship 
between Hartley and Fourier transforms. Then, the discrete 
fractional Hartley transform is defined. As to the eigen-
properties of discrete cosine transform and its generalized 
version, they have been studied in [10]-[12]. 
  In this paper, we will study the eigen-structure of discrete 
Hadamard transform for defining its fractional transform. In 
[13], a recursive method has been presented to compute the 
orthogonal eigenvectors of DHT. Later on, this recursive 
computation method is improved in [14] and used to define 
discrete fractional Hadamard transform. Because the DHT is 
usually defined by using Kronecker product, it will be more 
suitably for us to compute eigenvector of DHT by using 
Kronecker product instead of using recursive method. This 
is the main purpose of this paper. This paper is organized as 
follows. In section II, the DHT and Kronecker product are 
reviewed briefly. In section III, the conventional recursive 
method for finding eigenvectors of DHT is described. In 
section IV, the Kronecker product method is developed to 
compute the eigenvector of DHT and comparison with 
recursive method is made. Finally, a conclusion remark is 
drawn. 
II. KRONECKER PRODUCT AND HADAMARD TRANSFORM 
    Let A is an mxn matrix and B is a pxq matrix, then the 
Kronecker product of A and B is a mpxnq matrix given by 
          








=⊗
BaBaBa
BaBaBa
BaBaBa
BA
mnmm
n
n
"
#%##
"
"
21
22221
11211
          (1) 
where ija  denotes the element of A at i-th row and j-th 
column. If the dimensions of the matrices are chosen 
suitably, the Kronecker product satisfies the following 
properties: 
(1) )()())(( 21212121 BBAABBAA ⊗=⊗⊗  
(2) )()())()(( 321321332211 BBBAAABABABA ⊗=⊗⊗⊗  
(3) 111 )()( −−− ⊗=⊗ BABA  and TTT BABA )()( ⊗=⊗  
(4) If u and v are two vectors, the vuvu =⊗ )(  is valid, 
where ⋅  denotes the Euclidean norm. 
Based on the Kronecker product, the DHT matrix with size 
nn 22 × , denoted by nH , can be defined recursively as 
                
11
11
11
2
1
−
−−
−−
⊗=



−
=
n
nn
nn
n
HH
HH
HH
H                     (2) 
where 2x2 DHT matrix 1H  is given by 
23071-4244-0921-7/07 $25.00 © 2007 IEEE.
are the eigenvectors of matrix nH , where 
12,,1,0 −= nk " . The corresponding eigenvalues are 
given by ∏−
=
−
1
0
)1(
n
l
b l . 
It is easy to show that the eigenvectors of nH  obtained by 
this Kronecker product method satisfy the following two 
properties:  
(1) The number of sign-changes in knv ,  ( 12,,1,0 −=
nk " ) 
are from 0 to 12 −n . The eigenvalue corresponding to 
eigenvector with even number of sign change is 1, and 
eignevalue corresponding to eigenvector with odd number 
of sign change is -1.  
(2) The norm of eigenvectors knv ,  are equal to 1, that is, 
1, =knv  for 12,,1,0 −=
nk " . Thus, a real orthonormal 
eigenvector set is obtained by this method. 
As an example, Table 1 lists the 8 eigenvectors and their 
corresponding eigenvalues and sign changes for the case of 
3H . It is clear that the properties are satisfied. Although the 
above method can be used to compute eigenvectors of DHT 
matrix nH , it is a sequential method. To speed up the 
computation, we can use the following fact to achieve the 
purpose: 
Fact 3: If the eigen-decomposition of matrices R and S are 
given by 
              1222
1
111
−− Λ=Λ= EESandEER          (14) 
then the eigen-decomposition of matrix SR ⊗  is given by 
1−ΛEE , where 21 EEE ⊗=  and 21 Λ⊗Λ=Λ . 
Proof: From equation (14), we have 
       
1
1
212121
1
2
1
12121
1
222
1
111
))()((
))()((
)()(
−
−
−−
−−
Λ=
⊗Λ⊗Λ⊗=
⊗Λ⊗Λ⊗=
Λ⊗Λ=⊗
EE
EEEE
EEEE
EEEESR
      (15) 
The proof is completed. 
Based on this fact and the factorization 
111 HHHH n ⊗⊗⊗= " , we have the following result: If 
eigen-decomposition of DHT matrix nH is 
1−
nnn UDU , 
then  
           1111 UUUUU n ⊗⊗⊗⊗= "                (16.a) 
           1111 DDDDD n ⊗⊗⊗⊗= "              (16.b) 
where matrices 1U  and 1D  are defined in equation (4). 
Using this result, a procedure to compute the discrete 
fractional Hadamard transform matrix is described below: 
Step 1: Use the equation (16.a) to compute the matrix nU , 
then the k-th column vector of nU  is the eigenvector knv ,  
with unit norm, where 12,,1,0 −= nk " . 
Step 2: Use the number of sign change of each eigenvector 
to permute the index of eigenvector such that the number of 
sign change of knv ,  is equal to k, as done in [14]. 
Step 3: The discrete fractional Hadamard matrix with angle 
α  is computed by 
                      ∑−
=
−
=
12
0
,,,
n
k
T
knkn
jk
n vveH
α
α
                      (17) 
Based on this transform matrix, the fractional DHT of signal 
is described below. Given the data vector of signal 
                 Tnxxxx )]12()1()0([ −= "          (18) 
then its fractional DHT is defined by 
                                xHy n αα ,=                                 (19) 
where 
                     Tnyyyy )]12()1()0([ −= "α        (20) 
Now, the fractional DHT of signal  )1.0sin()( nnx π=  is 
used to illustrate this computation method. Fig.1(a)(b) show 
the real and imaginary parts of fractional DHT αy  with 
8=n  and πα 5.0= . Moreover, Fig.2(a)(b) depict the 
real and imaginary parts of fractional DHT αy  with 8=n  
and πα = . In this case, the result is same as the 
conventional DHT, so imaginary part is zero. 
   Finally, let us compare the above computation method 
with conventional approach in section III. First, 
conventional method needs normalization of eigenvector, 
but the proposed method does not perform this action. 
Second, the proposed method only uses the Kronecker 
product to compute eigenvectors, so it is easier to program 
than conventional recursive method. For example, the 
instruction Kron.m in MATLAB language can be used to 
achieve this purpose. Third, the proposed method is easily 
extended to find the eigen-decomposition of complex 
Hadamard transform in [15]. The details are described 
below: The complex Hadamard transform matrix with size 
nn 22 ×  in [15] is defined by 
           nn CCCCC
⊗
=⊗⊗⊗= 1111 "              (21) 
where complex matrix 1C  is  
                    


−−
=
1
1
2
1
1 i
i
C                          (22) 
It is easy to show the eigen-decomposition of matrix 1C  is 
given by 11111
−
= QDQC , where 
   

 −
=
)cos()sin(
)sin()cos(
88
88
1 ππ
ππ ii
Q     


−
=
10
01
1D   (23)  
Based on fact 3, the eigen-decomposition of complex 
Hadamard matrix nC is given by 
1−
nnn QDQ with 
        1111 QQQQQn ⊗⊗⊗⊗= "                  (24.a) 
           1111 DDDDD n ⊗⊗⊗⊗= "               (24.b) 
2309
