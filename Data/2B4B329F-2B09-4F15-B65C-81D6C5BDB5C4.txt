 1 
1.中文摘要 
近年來，以嵌入式平台為主的消費型電子產品領域蓬勃發展，許多功能方面的
需求日益繁雜，利用多個異質核心、強調多功能整合的嵌入式平台已成為市面
上的趨勢。然而，當整體的系統架構日趨複雜的同時，確保軟體品質的工作也
隨之困難。SQA (Software Quality Assurance)一直是開發過程中，確保軟體品質
重要的一環；而軟體驗證中，藉由動態測試的方式更是能有效而準確地來確保
軟體產品的正確性。並行程式的非決定性行為是造成測試時主要的困難所在，
在針對非決定性行為的測試研究方面，可達性測試法已證實具有完整測試的能
力、效能卓著，並廣泛被研究以符合各種存取模式；但在基礎架構上，當待測
程式具忙碌等待迴圈時，可達性測試法尚無可行的解決方案。 
 
在此子計畫中，我們將基於可達性測試法，並進一步利用 Dynamic effective 
testing 的概念，建構一兼具有 state-covered 及 transition-covered 特性的並行軟體
測試架構，用以針對多核心嵌入式系統的軟體進行測試。除此之外，面對嵌入
式系統關注的耗電量與最差執行時間 (WECT)估算等議題，計畫中亦從程式實
際執行時的有限狀態機的角度，提出更為精確的計算方式。在實作方面，計畫
將針對 Android 平台，開發一系列的工具組及函式庫，使得多核心嵌入式系統
的軟體測試得以有效廣泛地進行。 
 
關鍵詞：Dynamic testing, Reachability testing, Dynamic effective testing, 
Concurrent testing, Android 
 
Abstract 
Embedded platform based consumer electronics products and their functional 
requirements are growth rapidly in recent years. Multi- functional integration of 
embedded platform has become the market trend, and the systems for single special 
purpose have been unable to meet market demand. However, to ensure the quality of 
software is also difficult when the overall system architecture become increasingly 
complex in the meanwhile. SQA (Software Quality Assurance) has been an important 
development process to ensure software quality and dynamic testing is not only 
efficient also accurate to ensure the correctness of software products. 
Non-deterministic behavior is the major difficulty for testing concurrent programs. 
The reachability testing is proven to be a good scheme for testing this kind of 
concurrent programs. Researchers applied the reachability testing to a variety of 
synchronization models. Nevertheless, for concurrent programs with busy-waiting 
 3 
behavior)。一般所謂非決定行為指的是：當程式重複執行時，即使給定相同的
輸入值，程式因為並行協同工作的緣故，可能產生不同的執行結果。這與單一
核心系統執行循序程式(sequential program)時的情形是大不相同的。 
 
由非決定性[1,2]衍生的可能問題[3,4]是：(a) 並行程式中某次執行結果的正確，
並無法保證其後的執行都能得到正確的結果；(b) 甚至是當程式開發人員針對
某個程式錯誤進行修正後，測試中重複多次執行都得到正確的結果，卻仍然無
法確認程式的錯誤已確實被修正。然而，對於軟體測試工作人員而言，儘可能
找出軟體中潛在的錯誤一直是努力的目標；換言之，如何處理並行程式的非決
定性行為，並妥善完成測試是使用多核心、並行架構必頇面對的課題。 
 
在嘗試處理並行程式的非決定性行為時，首先面對的是：並行程式中不同的程
序(processes)可能會存取相同的物件，這些存取動作彼此間會相互競爭特定的順
序，即 race condition，是造成非決定性行為影響程式執行結果的主因。為了或
得特定的執行結果，避免非決定性行為所帶來的執行錯誤，程式撰寫人員往往
被要求妥善地使用某些系統呼叫 (synchronization primitives)，例如：signal, 
semaphore, monitor, lock 等[5,6]，來達到同步這些存取動作的目的，最終讓這些
動作能按照軟體系統設計時要求的順序執行；因此這些相互競爭的動作被稱為
synchronization events。就軟體開發人員的角度而言，面對目前複雜的系統架構，
適當地設計與使用同步用的系統呼叫並不是容易的事，研究並發展完整的測試
方法，才是確保正確地使用系統呼叫與並行程式正確性的最佳手段。 
 
爲了解決並行程式執行衍生的非決定性行為，將執行過程中所有 synchronization 
events 的執行順序記錄下來、作為當錯誤產生時除錯的依據，是一種常見的方
式。根據前面所提到：程式執行的結果影響自 synchronization events 間特定的
執行順序；因此如果想要在反覆的執行過程中得到相同的執行結果，藉由記錄
前次執行的 synchronization events 順序並依此控制之後的程式的執行是必然的
手段。在並行架構中，如果想要達到控制程式執行、重現前次執行結果的目的，
僅需要記錄 synchronization events 間 partially order 的關係，而一次完整執行中
所產生的記錄即稱作為 SYN-sequence。 
 
這種利用 SYN-sequence 控制並行程式執行即是 deterministic testing 的核心精神，
deterministic testing 整個流程是：將 SYN-sequence 作為程式輸入的一部分，利
用特定的協定將並行程式中所有的 synchronization events 作包裝，使得執行過
程中 synchronization events 能按照預先輸入的 SYN-sequence 完成執行。這種概
念雖然適當地處理了並行程式非決定性行為的問題，但仍明顯存在一個盲點：
在每次重複的測試過程中，執行的 SYN-sequence 都與先次相同，而
synchronization events 可能的排列情形卻往往總數龐大，因此倚賴 deterministic 
 5 
Reachability testing 整個測試過程如圖一可粗分成兩個階段：monitor phase 與
replay phase。在 monitor phase 中，受測程式的執行如同 nondeterministic testing
一般，是完全不受控制的，系統的排程可自由地組合任何可能 SYN-sequence
並完成執行。對於 reachability testing 整體架構而言，monitor phase 所需要作的
僅是將受測程式執行的 SYN-sequence 作確實記錄，供作後續的分析與執行需要。
至於 replay phase，顧名思義其目的在於重現前次的執行，應用 deterministic 
testing 的概念，受測程式在執行時需指定 synchronization events 的 partially order
關係，藉由 reachability testing 提供的協定，將所有 synchronization events 按指
定的次序完成執行。 
 
圖一：Reachability testing 架構圖 
很明顯地，單純地實作 monitor phase 與 replay phase 並不能解決 nondeterministic 
testing與 deterministic testing的不足，reachability testing因此導入了 race analyzer
的機制，將 monitor phase 與 replay phase 作完美的結合。Race analyzer 的主要工
作在於從 monitor phase 記錄的 SYN-sequence 中，分析出其他不同於此
SYN-sequence 但又可能出現的 partially order 關係，稱作 race variant。換言之，
race analyzer 可藉由更動 SYN-sequence 中部分 synchronization events 的 partially 
order 關係產生許多 race variants；由於在被更動點之後的 synchronization events
已無法保證其執行的必然性（例如：經由不同的執行順序，執行過程中可能會
產生不同的變數值，而這些變數值可能會作為程式中 conditional branch的依據，
並決定部分程式碼的執行與否）；相對於 SYN-sequence，race variants 將不再代
表某次完整的執行順序，而是某個執行順序中最前面的一部分；當要進行受測
程式的整個執行時，必頇將 replay phase 作一適當的調整。 
 
除了針對 reachability testing 的效能進行提升外，黃冠寰博士亦持續針對具有迴
圈的並行程式提出解決方案。就以往的 reachability testing 而言，在 monitor 的
過程中並不對受測程式的執行進行任何干預，因此一旦受測程式中出先無窮迴
圈，或是因為 processes 間交互行為衍生 livelock，都可能造成 monitor 的過程無
Execution P with input X
Race analyzer
(To derive race-variants)
Prefix-based replay of R
…………
A SYN-sequence S
Queue to store race variants
Derived race variants
Remove a race variant R from 
queue
Obtain a SYN-sequence
 7 
 對於單一個嵌入式裝置而言，每次執行只針對特定的 SYN-sequence 進
行測試，多個 SYN-sequences 將可分散至不同的嵌入式裝置執行，加快
測試時效。 
 架構中將設置一中控的 server，蒐集各個嵌入式裝置測試產生的
SYN-sequences，加以分析並引導後續測試產生其他的 SYN-sequences，
利用主從式解決嵌入式裝置硬體資源缺乏的問題。 
 
 在實際應用層面，有鑒於目前許多開放式嵌入式平台不斷被提出，但針對嵌
入式特性設計的並行程式測試工具上仍相當缺乏；加上考量各家嵌入式平台
的完整性，Open Handset Alliance 提出的 Android 因為具有以下特性： 
 
 採用嵌入式 Linux 作為底層架構，相關文件較為完整，針對此開發的程
式碼也將較容易移植到其他同為 Linux 底層的嵌入式系統。 
 面對應用程式開發人員的是一變形的 Java Virtual Machine─Dalvik，
Open Handset Alliance 並提供工具可將現有 bytecode 格式的 Java 程式轉
換至該平台上執行，不但有利於軟體人員開發應用，亦可重複利用既有
的 Java 函式庫。 
 Open Handset Alliance 以 Google 為首，投入相當多資源對整體平台進行
最佳化，相對於其他平台，針對 Android 開發工具組將具有較高的實用
價值。 
 
研究計畫將針對 Android，研究 Android 細部架構與系統呼叫，對嵌入式系
統的並行行為，實作一完整的測試平台。 
 
4.研究目標及執行進度 
本計畫原規劃為三年期之多年期計畫，於計畫提案所提出的研究目標如下： 
 
第一年： 
 以 reachability testing 架構與 DTD 與 DET 的概念，完成 state machine 
generation 子系統，使得開發人員能更有效地了解程式實際行為。 
 針對嵌入式系統所關注的耗電量與 WCET 估算的議題，規劃所需的測試架
構。 
 完成分散式測試的系統架構規劃，使得整體測試流程能分散於多個嵌入式裝
置，加速整體測試效率。 
 完成主從式測試的系統架構規劃，將複雜的分析運算移到 server 端執行。 
 研讀 Android 系統文件。 
 
 9 
圖二：Experimental result of some concurrent programs in the "Clash of the 
Titans benchmark". 
 Deadlock1 deadlock2 DiningPhil 
Number of different SYN-sequence 
generated/total number of tests 8/8 3/3 36/41 
Number of states in the reachable state 
graph  39 22 1834 
Number of transitions in the reachable state 
graph 54 26 5415 
Time required to perform dynamic effective 
testing 4.106 (s) 1.55 (s) 
245.456 
(s) 
Time required to generate reachable state 
graph 0.042 (s) 0.014 (s) 0.014 (s) 
Limitation of timeout 0.5 0.5 5 
Number of deadlock state in the reachable 
state graph 1 1 1 
Number of distinct deadlock which enter 
deadlock state 2 1 1 
 
 
圖三： Experimental results of some classical synchronization problems 
 Producer-
Consumer 
with 
finite 
buffer 
Readers-
writers(2
R2W) 
DiningPh
-ilosopher
s2 
DiningPh
-ilosopher
s3 
Cigarette 
smokers 
Number of different 
SYN-sequence 
generated/total 
number of tests 
148/149 52/55 8/8 130/161 13/16 
Number of states in 
the reachable state 
graph  
210 1134 85 457 329 
Number of 
transitions in the 
reachable state graph 
348 1604 141 816 802 
Time required to 
perform dynamic 
effective testing 
88.844 (s) 29.328 (s) 4.688 (s) 84.255 (s) 23.235 (s) 
Time required to 
generate reachable 
state graph 
3.891 (s) 17.313 (s) 0.077 (s) 74.665 (s) 1.86 (s) 
Limitation of timeout 0.5 (s) 0.5 (s) 0.5 (s) 0.5 (s) 0.5 
Number of deadlock 
state in the reachable 
state graph 
0 0 1 8 6 
Number of distinct 
deadlock which enter 
deadlock state 
0 0 1 16 6 
 
 11 
   我們認為目前計畫研究內容與原計畫相符，不論進度及研究成果都達成預期
目標，也深具學術或應用價值，預期研究成果將可發表於很好的學術期刊。 
 
6.參考文獻 
1. “Debugging Concurrent Programs,” C. E. Mcdowell and D. P. Helmold, 
ACM Computing Surveys, Volume 21, Number 4, December 1999. 
2. “Testing of Distributed Programs,” K.-C. Tai and R. H. Carver, Chapter 33 in 
Parallel and Distributed Computing Handbook, editor A. Y. Zomaya, 
McGraw-Hill, 1996. 
3. “Debugging Ada Tasking Programs,” D. Helmbold and D. Luckham, IEEE 
Software, Volume 2, Number 2, pages 66-74, 1985. 
4. “Testing of Concurrent Software,” K.-C. Tai, Proceeding of the 13th Annual 
International Computer Software and Applications Conference, pp. 62-64, 
1989. 
5. “A Survey of Synchronization Methods for Parallel Computers,” A. Dinning, 
IEEE Computer, July 1989. 
6. “Operating System Concepts, 6th Edition,” A. Silberschatz, P. B. Galvin, and 
G. Gagne, John Wiley & Sons, ISBN: 0471417432, June 2001. 
7. “Testing concurrent Java programs using randomized scheduling,” S. D. 
Stoller, Proceedings of the 2
nd
 Workshop on Runtime Verification (RV’02), 
Electronic Notes in Theoretical Computer Science, Volume 70, Issue 4, Elsevier, 
pp. 142-157, December 2002. 
8. “Heuristics for finding concurrent bugs,” Y. Ben-Asher, E. Farchi, Y. Eytani, 
Proceedings of the 17
th
 International Parallel and Distributed Processing 
Symposium (IPDPS 2003) PADTAD Workshop, IEEE Computer Society Press, 
April 2003. 
9. “Reachability Testing: An Approach to Testing Concurrent Software,” G.-H. 
Hwang, K.-C. Tai, and T.-L. Huang, International Journal of Software 
Engineering and Knowledge Engineering, Volume 5, Number 4, December 
1995. 
10. “Model Checking,” Clarke, Jr., E. M., O. Grumberg and D. A. Peled, MIT 
Press, 1999. 
11. “Logic in Computer Science: Modelling and Reasoning About Systems,” 
Huth, M. and M. Ryan, Cambridge University Press, 2004. 
12. “Java PathFinder,” http://javapathfinder.sourceforge.net/. 
13. “MAGIC website,” http://www.cs.cmu.edu/~chaki/magic. 
14. “A Systematic Parallel Testing Method for Concurrent Programs,” G.-H. 
