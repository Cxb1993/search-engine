1中文摘要：
軟體重工 (Software Rework)不但可能會影響軟體產品品質 (Software Product
Quality)也可能會降低軟體流程績效(Software Process Performance)，因而增加軟體專案
發展的 不確定性(Uncertainty)。導致軟體重工的因素雖然可以經由因果分析(Causal
Analysis)的方式來找出，然而使用因果分析的方式所需的人力(Effort)卻相當可觀，主
要是由眾多可能的原因(Causes)中找出主要的原因的困難度極高。為解決此種情況，本
研究提出以預測(Prediction)可能產重工為基礎的方法來降低因果分析的困難度。此種
方式主要以多維度關聯規則分析技術 (Multidimensional Association Rule mining
techniques)分析軟體發展流程中所採行的行動(Action)來預測可能的軟體重工。此方式
可以運用來建立軟體重工的預測模型(Prediction Model)，而此預測模型則可用來預測
緊接的軟體發展流程中的行動，以便找出那些行動可能產生重工。針對所找出的可能
重工行動，專案工作人員便可以進行矯正的動作。本研究最大的優點為對於即將採行
的軟體行動進行事先的預測，如此則專案工作人員可以於可能發生重工之前進行矯正
的行動，以降低事後因果分析的人力。
關鍵詞：軟體重工、因果分析、資料探勘
英文摘要：
Software rework affects product quality, degrades software process performance and
causes software project uncertainty. The causes of rework can be identified via causal
analysis; however significant effort is required to identify the causes of reworks among a
broad range of possible causes. To address this problem, this study presents a novel
approach for predicting the costly rework of software process. The proposed approach
attempts to model costly rework patterns based on executed actions in the software process
using Multidimensional Association Rule mining techniques. The proposed approach is
employed to build a costly rework prediction model that can be applied to predict which
subsequent actions in the software process are likely to be costly. When a subsequent action
is predicted to be a costly rework action, the action then can be further analyzed and
corrected to prevent costly rework. The primary advantage of the proposed approach is that
costly reworks can be predicted in advance and the effort required to identify the causes of
rework can also be reduced significantly.
Keywords: Software rework, causal analysis, data mining
3定義軟體流程的相關屬性。例如 Hassan and Holt 運用資料探勘的技術於軟體發展過程
中的修改紀錄(software modification history)來建立預測模型(Prediction models)，而所建
立的模型則可用來預測未來軟體元件所可能產生的瑕疵(defects)與錯誤(errors)，此預測
的結果則運用於軟體測試時針對可能發生瑕疵的軟體元件加強測試 [10]。Khoshgoftaar
et al.則使用決策樹模型(classification tree models)來評估軟體品質(software-quality)，此
決策樹則經由對軟體模組不同的扳本資訊的探勘而建立 [11]。同樣運用於評估軟體品
質的是 Dick et al. 運用模糊集群分析(fuzzy clustering)於包含軟體修改紀錄的軟體資料
庫(software metric databases)上來評估與預測軟體品質 [12]。此外蒐集自自由軟體發展
流程的資料也可以用來找出產生軟體重工的樣式(patterns)，例如 Jensen and Scacchi 便
運用資料探勘的技術於自由軟體發展流程的資訊(Open Source Software Development
Community)來找出軟體發展流程的問題所在(software process flow)並產生以工作為導
向的軟體流程描述資訊 [13]，這些分析的結果可以進一步提供分析人員來分析，以便
找出許多降低軟體重工的因素 [14]。
然而造成軟體重工的因素並非為單一因子，而有可能為一系列不當的軟體發展行
動所致(Actions)，這些行動則可以使用一組預先定義的屬性來描述，如行動的複雜度
(Action complexity)、行動執行時間(performed date)等，要找出行動與行動間的關聯規
則可以透過資料探勘中的關聯規則分析技術來達成，其中每一個執行的行動可視為一
個單一的交易(transaction)，這些交易則依照所選定的一個屬性來編排。例如以執行日
期來編排，則所有行動將按照執行日期的順序排列，而關連性也將由此排列的行動來
尋找。然而排列這些交易的屬性有可能為多重的，例如執行的順序與元件修改次數，
而要針對兩個屬性所排列而成的行動來進行關聯規則分析則需要運用到多維度關聯規
則分析技術(Multidimensional Association Rule mining techniques) [15]，本研究所提出的
AB-CRP 方式便是基於多維度關聯規則分析技術 [16, 17] 來分析所搜集的流程資訊以
便找出高成本重工的樣式(costly rework patterns)，以提供因果分析的依據，並降低因果
分析所需的人力與成本。
3. 文獻探討
軟體的重工可能源自於軟體所發生的瑕疵[18]，軟體重工可視為對於達成相同的
專案目標下，重複執行某些專案行動(Action)，也就是說這些重複執行的專案行動並未
對專案增加任何的效益(如品質) [19]，軟體重工可視為專案成本中重要的一環，它不但
可能會造成軟體成本與時程過度的使用(Overrun) [20]，也可能因此而造成專案的不確
定性(uncertainty)與無法預估(unpredictability) [21]。因為大部分的軟體重工皆源自於軟
體瑕疵，因此追蹤軟體瑕疵並找出造成瑕疵的原因並成為預防軟體重工的重要行動
[22]。瑕疵分類(defect classification)主要將軟體瑕疵依照事先定義的特性加以分類並且
排順序，藉以加速選取瑕疵來進行分析，包含瑕疵發生位置(defect location)、偵測或修
復瑕疵所需的人力(time required to detect)、瑕疵成因(defect cause)、專案與成本的沖擊
(cost and impact)與瑕疵的嚴重性(severity of defects)等[23]。在專案計畫階段軟體的重工
率可經由對於資源配置與工作包執行順序的適當安排而降低，這些資訊可以經由過去
專案執行的資訊而獲得，然而要建立評估的準則以便進行預測則非容易的事。因此為
了能於專案規劃的階段即能準確的預測專案的重工，經由專案規劃初期所獲得的資訊
可以經由風險評估模型來預測專案的風險，並藉此降低專案重工。
許多的方法皆可用來建立軟體重工預測模型，例如關聯規則分析技術(association
5到 ai+k 所造成，而 R2則可能源自於軟體發展 aj 到 aj+k 所致，其中軟體發展 ai到 ai+k與
aj 到 aj+k 行動間可以找出共同的高成本重工樣式。
a1 ai R1... aj... aj+k R2 ...
t0
ai+k... ...
t1 t2 t3 t3+(t1-t0)
t3+(t2-t0)
(圖一)、用來執行某特定工作所使用的行動
在圖一中的 actions 主要是以時間的順序來排列，然而在大部分的情況下影響高成
本重工的因素可能多於一個，而用來組織行動的維度也會有多個，因此多維度重工樣
式也就需要運用到本研究中。所選取的維度可以用來對於專案執行行動執行關聯規則
分析的作業，每一個執行行動皆可視為一個單獨的點，因此如果使用兩個維度來組織
執行行動的話，將可形成一個二維的空間，因此多維度的關聯規則分析便可運用來進
行重工樣式的找尋了，而本步驟的工作就是應用多維度的關聯規則分析的技術來找出
高成本重工的作業。用來執行某特定 Task 的軟體發展行動可以如圖二中的二維的空
間，其中 A1 and A2 可視為兩個已選定的維度(dimensions)，例如執行的時間順序與所
產生 D action 的數目，因此一個軟體發展行動 ai 便可進ㄧ步表示成 ai(A1,A2)，而二維
度的高成本重工樣式便可表示成{Pi(u1, v1), H(u2, v2)} where u1, u2A1 and v1, v2A2，其
中 Pi 為整個 pattern 的第一個點(起點)，故可視為參考點(reference point, RP)，而 H 則
為最後的一個點，因此可稱為終點(target point, TP)，此終點也是關連性規則中的目標
屬行(class attributes)，而介於 TP 與 RP 間的點則為中間點(intermediate point, IP)。
ai ai+k
Actions used to perform Taskj
u1
R1
...v1
A1
A2
v2
v4
u2
...
R2
u3 u4
v3
aj+k ...
aj
(圖二)、多維度高成本重工樣式
因此多維度的軟體發展行動樣式可以表達為{Pi(0, 0), H(u2-u1, v2-v1)}，而而判斷
ㄧ連串的 actions 是否具有高成本重工樣式的依據則由相對位置來決定。例如軟體發展
行動{ai(u3, v3), R1(u4, v4)}可以判定為具有高成本重工的 defect，如果(1) ai 符合 Pi，(2)
u4-u3 = u2-u1 且 v4-v3 = v2-v1。由上面的步驟可知高成本重工樣式(costly rework patterns)
可以經由對於軟體發展行動記錄的分析而得到，然而多維度(multidimensional)的環境
將會增加分析的困難度，而不同維度中的可能情況數量也將會降低分析的效率，因此
773 H 344 0 1 0 0 0
74 H 128 0 0 1 0 0 0
75 L 0 0 0 0 0 0 0 1
(圖四)、利用多個 span 的規則庫來預測軟體發展行動
可以將不同 span 的規則集合組合起來以提升預測的準確性，例如將 2-span、
3-span、4-span 或是 5-span 的規則集合組合其來(如 RM = R2R3R4R5)來進行預測，
而當有任規則可以符合某一行動時即可將該行動預測為高成本重工行動(High)。圖四
顯示利用多個 span 所產生的規則來進行預測的結果，其中第二行顯示的為該行動實際
的結果(是否為 High)，而第 3、4、5 與 6 行則分別為利用 2-span、3-span 、4-span 、
5-span 的規則來進行預測時的正確數目，而空白的部分則表示沒有規則可以符合該行
動，對於一個實際為高成本重工的行動，正確的預測數顯示在第 7 行，而錯誤的預測
數則顯示在第 8 行(將 High 預測為 Low)，對於一個實際上為非高成本重工的行動，正
確的預測數則顯示在第 10 行，而錯誤的預測數則顯示在第 9 行(將 Low 預測為 High)，
圖四的結果可以整理如圖五的方式來顯示，其中的 accuracy與 recall 的值大可達到 83%
左右，表示所組成的規則庫可以有效的找出高成本重工的行動，雖然 specificity 值下
降到 84%左右，然而 precision 仍然維持在 70%左右，這也表示大約有三分之二的高成
本重工的行動可以被預測出來。
Classified as H L
H class 51 11
L class 22 116
Accuracy = 83.50
Precision =69.86
Recall = 82.26
Specificity =84.06
(圖五) 、利用多個 span 的規則庫所預測的結果
在圖六所顯示的結果為對於 62 行動利用多 span 的規則來預測的結果分布情形，
對於每一種規則的正確的預測的比率顯示在橫軸上方，由圖六可以看出若使用 4-span
的規則來進行預測，則大約有 80%的高成本重工的行動可以有效的預測出來，但是若
增加到 5-span 則大約也僅增加到 82%左右，然而增加到 5-span 時將會耗用更多建立規
則的資源，因此在使用多規則進行預測時採用適當的 span 的建立規則庫可加系統預測
的效率。
80.65% 82.26%
59.68%
40.32%
0.00%
20.00%
40.00%
60.00%
80.00%
100.00%
2-span 3-span 4-span 5-span
co
rr
ec
tp
re
di
ct
io
ns
(圖六)Fig. 13. Discovered rework actions using different spans.
