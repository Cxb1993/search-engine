I目錄
摘要 ............................................................................................................................................ II
ABSTRACT............................................................................................................................... III
前言 ............................................................................................................................................2
研究目的 .....................................................................................................................................4
文獻探討 .....................................................................................................................................5
FIGURE 1 SPIGOT的系統架構 ..............................................................................................7
FIGURE 2 用來做分散式MEMORY-MAPPED FILE的 VIRTUAL GLOBAL MEMORY IMAGE 8
結果與討論 .................................................................................................................................9
參考文獻 ...................................................................................................................................10
計畫成果自評............................................................................................................................12
III
Abstract
For a large amount of data-intensive applications, the researchers pay more
attention to the study of Data Grids today. The data grids usually replicate the shared
files among the sites to increase the availability and performance. However, the
transparency of adapting the data grid services into applications is not enough. More
than that, the file-level replication and transfer are not efficient if the user only needs
parts of a file. On the other hand, there are more and more applications consuming
mutable data in the grids. It is very expensive to maintain the data consistency of the
replicas across the wide area network. Therefore, we propose a “Cache Grid”called
“Spigot” to provide transparency and data consistency for the grid users. By
integrating the data grid service with distributed shared memory and data archiving,
the users can treat the “Spigot” as a huge file cache of remote shared files. Spigot
replicates the data in fragment-level and keeps the replicas consistent automatically.
With these unique features, we hope the Cache Grid is able to expedite the
development of grid computing. Experimental results show reduced turnaround time
in data-intensive applications, particularly when fragment size is low and analysis
time and network latency are great.
Keywords: Data Replication, On-demand Access, Data Consistency, Distributed
Shared Memory (DSM), Teamster-G
3作，例如天氣預測的應用程式，當要預測後天的天氣時，必需要先預測出明天天
氣的結果，才能由明天天氣的結果去預測後天的。另外，還會有一些應用程式是
以管線化[1][2]在運作的，這是一個管線化的運作流程中，使用者只對最後的運
算結果有興趣，對於運算過程中 所產生的結果則不需保留。所以，我們認為可
變資料(mutable data)在資料網格上被應用的情形，將會越來越普遍。而在目前所
有的資料格網的服務，對於在大量的資料複本中，維持資料的一致性將會是個很
大的問題。為了維持這些大檔案的資料一致性，會需要付出高昂的代價。
明顯地，現存的 data grid systems 尚有許多改進的空間。這也就是本年度研
究計畫所要討論的議題。
5文獻探討
接著，我們將針對現行的相關網格系統進行討論，並且和我們所設計的
Spigot 做比較。
NFS 是一個有名的共享網路檔案的系統，它是一個在 Unix 系統下存取遠端
檔案系統的標準解決辦法。它很容易被了解，用戶端可以透過網路來掛載檔案目
錄，之後在存取伺服器端的檔案時就像是在存取本地端檔案一樣。此外，應用程
式可以完全不用改變的去對檔案存取。然而，它有一個很大的問題就是它是使用
LAN 的通訊協定，無法在 WAN 上工作。顯然的，NFS 並不能夠滿足全域性的
檔案共享的需求。GridFTP [3]是由 Glubus 這個工具所提供的，他使用了 GSI 的
安全機制來控制和認證資料，同時也有多通道的資料傳送和部份檔案傳送。除了
這些以外，它也可以支援直接的伺服器對伺服器資料傳輸。然而，資料一致性是
它的一個很大的問題，它無法使用在共享可變資料的環境上。雖然它提供了部分
檔案的存取功能，但是使用者必需要指定所要的部分檔案的那個部分，這對使用
者來說太難了。
DataMover [4] 是一個強力的製造複本系統，Storage Resource Manager [5][6]
(SRM)支援用戶端可以把資料在區域網路內由 Hierarchical Resource Manager
(HRM)的 High Performance StorageSystem [7] (HPSS)產生複本到本地端。
DataMover 提供各種大量儲存系統，以利其他的科學家的應用程式去做分析。用
戶端可以透過 DataMover 取得檔案，DataMover 會在發出要求的 HRM 裡建立
一個資料夾，然後再用 SRM 來複製檔案。但是，複本依然是整個檔案去作複製
的動作，它沒辦法讓使用者透通的去存取一個檔案的某一部分。除此之外，當資
料的是可變的時候，同樣的會有資料一致性的問題產生。
Storage Resource Broker (SRB) [8]是由 San Diego Supercomputer Center
(SDSC)所發展出來的，他是一個提供給應用程式單一的應用程式介面(API)介面
來存取異質性網路環境儲存資源的解決辦法。當用戶端需要資料時， 它會呼叫
一個代理者(Agent)， 這個代理者會去查詢 Metadatacatalog(MCAT)伺服器以取得
實際檔案儲存位置的資訊，然後再由這個代理者幫用戶端取得所需要的資料。而
相同的，它沒辦法透通的去存取一個檔案的某一部分，而且在共享可變資料時也
是會有資料一致性的問題所產生。SRB 也具有封存（Persistent archive）的功能
[9,10]，主要是針對容錯、災後重建（disaster recovery）及負載平衡等理由將資
料製作多份複本散佈在網路上供使用者存取，並提供分散式版本控制之功能來加
強資料分享的好處，此外也將資料的存取分成聚集（collection）、資料集（dataset）
及資源（resource）三個層次來提供對資料隱私的保障。
JUXMEM [1][11][12]提供給使用者在多變的網路環境下，既可以增加資料的
可獲得性，又可以透通的去存取可變檔案的功能。他是以 JXTA 的 P2P 的架構
加上了分散式共用記憶體系統(DSM)的觀念來實作的，以較鬆散的共同合作方式
7研究方法
Figure 1 Spigot 的系統架構
如 Figure 1 所示的 Spigot 系統架構，本研究計畫設計出的系統 Spigot 包含了
三個主要的模組，分別是 SFPS (Spigot Fragments Publishing Service module), SFS
(Spigot Filesystem module)和 SUTIL (Spigot Utility module)。並且 Spigot 採用了
FUSE [22]和 Teamster-G [23] 作為實現 Spigot 的子系統。
每當 Spigot 一啟動後，每一個 replica server 就必須透過 SFPS 這個模組，將
它所擁有的 file replicas 註冊到一個 file lookup server，這個 file lookup server 會維
護一個表格註記目前這個 data grid 中，各個共享檔案的 LFN 與其 PFNs 之間的
對應關係。
SFS 模組的設計，主要是為了達成研究目標當中提出的系統特性，『對
data-intensive application 而言，使用介面要完全透通』。換句話說此模組是 Spigot
提供給 data-intensive applications 的一個資料存取介面。SFS 的設計採用了 FUSE
kernel module 來攔截來自 data-intensive applications 的所有 native I/O system
calls，並進一步的將這些 system calls 轉換為 Spigot 能夠處理的 Spigot operations。
Spigot 會根據這些 Spigot operations 的請求，透通地完成 data-intensive applications
所需 file fragments 的傳輸。值得特別注意的是，在 computing nodes 上運行
Spigot，並不會影響到一般工作的執行。SFS 採用掛載(mounting)的方式將 Spigot
所提供的一個 global namespace 掛載到各個 computing nodes 的/Spigot 目錄下，
如此，Spigot 只有在 data-intensive applications 存取/Spigot 目錄下的檔案時，才
會去攔截相關的 I/O system calls。
SUTIL 模組的設計，則是為了實現 Spigot 的兩個核心的功能，『On-demand
的 fragment-level 資料傳輸』和『維護 data consistency』。其中，所謂的 on-demand
的資料傳輸，指的是 SUTIL 的模組只有在透過 SFS 攔截到 data-intensive
applications 的資料存取要求時才會啟動。這種 on-demand 啟動的方式，可以精確
9結果與討論
本 年 度 的 研 究 提 出 了 一 個 DSM-based Fragment-level File Sharing
Framework，命名為 Spigot。我們設計並實現 Spigot 的目的，主要是希望能夠讓
資料格網的使用者存取遠端的共享檔案，就有如打開水龍頭汲水一樣簡單。
首先，Spigot 允許在 grid computing solution 出現之前就行之有年的
data-intensive applications (legacy data-intensive applications)，不需要經過任何的
程式碼改寫或重新編譯，也能有效地利用 data grid 所帶來的好處。這些 legacy
data-intensive applications 可以透過 native I/O system calls 去存取存放在遠端的共
享檔案，而且可以根據 applications 的需要只從遠端傳回需要的 file fragments。
對任何 data-intensive applications 來說，Spigot 提供服務的方式，就和一個檔案系
統沒兩樣。我們把這個特性稱為對使用者的透通性，達到對使用者的透通性是本
研究的重要成果之一，畢竟目前被廣泛採用的資料共享系統，仍然要求使用者採
取一套專有的 data transfer API。
另一方面，傳統觀念認為在 grid environment 上維護 replica consistency 是不
合成本，且對於系統設計是相當複雜的事。然而，Spigot 打破了這個迷思，我們
採用以往 DSM 系統維護 data consistency 的方式，以檔案的片段為單位，來降低
整個檔案同步的負擔。
最後，初步的實驗數據也顯示，較之傳統的 file-level transfer approach，Spigot
所 採 用 的 fragment-level on-demand transfer approach 更 能 有 效 的 縮 短
data-intensive application 等待檔案傳輸所需的時間，進而提升 application 執行的
效能。特別是當一個 data-intensive application 所需的資料片段相對地小，而
computing node 與 replica servers 之間的網路延遲又相當地長，此時 Spigot 所展
現出的效能尤其顯著。
11
Service,”Research Report RR-5593, INRIA, IRISA, Rennes, France, June 2005.
[13] Jehn-Ruey Jiang, Ghung-Ta King, Chi-Shang Liao and Ching-Hao Liu, “MUREX: A Mutable
Replica Control Scheme for Structured Peer-to-Peer Storage System,”International Journal of
Pervasive Computing and Communications, to appear.
[14] 中央研究院珍藏歷史文物數位典藏計劃, http://saturn.ihp.sinica.edu.tw/~dahcr/index.html
[15] 數位典藏國家型科技計劃, http://www.ndap.org.tw
[16] 張瑞雄, 王智敏, 林春福, 黃甯園, 林皓嶔, “應用格網技術於數位點藏系統”, 第四屆數
位典藏研討會
[17] http://www.unigrid.org.tw/index.html
[18] Chao-Tung Yang, Chuan-Lin Lai, Po-Chi Shih and Kuan-Ching Li, "A Resource Broker for
Computing Nodes Selection in Grid Computing Environments," Lecture Notes in Computer Science,
Springer-Verlag Heidelberg, Volume 3251, September 2004, pp. 931-934. (NCHC-KING_010200)
[19] Ruay-Shiung Chang, Chih-Min Wang and Po-Hung Chen, "Replica Selection on Co-Allocation
Data Grids," Proceedings of Second International Symposium on Parallel and Distributed Processing
and Applications (ISPA'2004), Hong Kong, China, December 2004. (NCHC-KING_010200)
[20] Kuan-Ching Li, Hsun-Chang Chang, Chung-Yuan Yang, and Li-Jen Chang, "On Construction of a
MPI Parallel Program Visualization Toolkit for Cluster and Grid Environments," Proceedings of The
First Workshop on Grid Technologies and Applications (WoGTA 2004), HsinChu, Taiwan, December
2004. (NCHC-KING_010200)
[21] Kuan-Ching Li, Hsun-Chang Chang, Li-Jen Chang, and Chung-Yuan Yang, "On Implementation
of Visuel Performance Monitoring and Analysis Tool for Cluster and Grid Environments," Proceedings
of The First Workshop on Grid Technologies and Applications (WoGTA 2004), HsinChu, Taiwan,
December 2004. (NCHC-KING_010200)
[22] FUSE home page, http://fuse.sourceforge.net/ .
[23] Tyng-Yeu Liang Chun-Yi Wu Jyh-Biau Chang Ce-Kuen Shieh ,“Teamster-G: a grid-enabled
software DSM system,”IEEE International Symposium on Cluster Computing and the Grid, 2005,
CCGrid 2005.
出席國際學術會議心得報告
計畫編號 NSC 96-2221-E-426-004
計畫名稱 快取格網：一個基於分散式共用記憶體的透通性資料格網系統之研究
出國人員姓名
服務機關及職稱
張志標
立德大學資訊科學與應用學系助理教授
會議時間地點 2008/03/21 ~ 2008/03/28 日本，沖繩，宜野灣
會議名稱 The Fourth International Symposium on Frontiers in Networking withApplications (FINA2008)
發表論文題目 A Performance Study of Virtual Machine Migration vs. Thread Migration forGrid Systems
一、參加會議經過
本人所參加的國際會議是在 2008 年三月 25~28 日於日本沖繩線宜野灣市舉行的第四屆
FINA 2008(The Fourth International Symposium on Frontiers in Networking with Applications)，它
是第二十二屆 AINA 2008(The IEEE 22nd International Conference on Advanced Information
Networking and Applications)之子會議。AINA 2008是由 IEEE Computer Society的 Technical
Committee on Distributed Processing (TCDP)所贊助，一直是電腦網路理論、設計與應用，以及
分散式系統研究領域中，一個歷史悠久並且舉足輕重的國際會議。會議論文之投稿人數與品
質皆有相當高的水準，其會議收錄之優秀論文亦收錄於 International Journal of Business
Intelligence and Data Mining (IJBIDM)、Mobile Information Systems (MIS)、Journal of
Interconnection Networks (JOIN)、Journal of Mobile Multimedia (JMM)、International Journal of
Web and Grid Services (IJWGC)等國際知名期刊的 special issues當中。本會議也邀請了多位學
術界與業界之知名人士，於會議中進行 keynote addresses，使會議增添不少光彩與內容。
本人的論文宣讀時間為 2008年 3月 25日 11:30~13:00 的 session。本次會議有相當多台
灣的研究人員參加，在會場中表現相當活躍，並且發表相當多的研究成果。當天稍早到達會
場報到並領取會議論文集光碟片之後，便開始當天的議程。在本人發表的議程中，有來自韓
國、歐洲與中國等學者，報告他們的研究成果。格網計算研究在各國所受到重視之程度，可
見一斑。會議預計每個人的報告時間為三十分鐘，由於事前妥善之準備與豐富之經驗，使得
論文發表的歷程相當順利。報告完畢後也和與會人士有相當熱烈的交流互動，並且取得相當
多的回饋。該 session 結束後，本人也與本計畫隨行之研究團隊(成大謝錫堃教授、高應大梁
廷宇教授等)就地整理此次論文發表所得之資料與回饋，立即把本計劃之後續，初步擬定進行
的步驟與修正。此行之收穫，可說是相當豐富。
A Performance Study of Virtual Machine Migration vs. Thread Migration for 
Grid Systems* 
 
 
Po-Cheng Chen1, Cheng-I Lin1, Sheng-Wei Huang1, Jyh-Biau Chang2, Ce-Kuen Shieh1, Tyng-Yeu Liang3 
{kid, neu, swh, shieh}@ee.ncku.edu.tw1, andrew@mail.leader.edu.tw2, lty@mail.ee.kuas.edu.tw3 
Institute of Computer and Communication Engineering, 
Department of Electrical Engineering, National Cheng Kung University1 
Department of Information Management, Leader University2 
Department of Electrical Engineering, National Kaohsiung University of Applied Science3 
 
 
                                                        
* This work is sponsored by NSC grants (NSC 95-2221-E-426-007-) 
Abstract 
 
Grid computing integrates abundant distributed 
resources into a single large-scale problem solving 
environment for parallel applications. However, the 
grid is a non-dedicated and dynamic computing 
environment. Grid applications consequently compete 
with each other for non-dedicated shared resources; 
moreover, shared resources are probably reclaimed by 
their owners according to administration policies, e.g. 
the scheduled maintenance. The job migration 
mechanisms which take the non-dedicated and 
dynamic natures of grids into consideration, therefore, 
become important for optimizing the application 
performance. The experiments of two job migration 
mechanisms, i.e. virtual machine migration and node 
reconfiguration by thread migration were presented in 
this study. We completed experiments on both LAN and 
WAN scenarios with a page-based grid-enabled DSM 
system, Teamster-G. The experimental results suggest 
the performance of virtual machine migration 
competes with node reconfiguration on equal terms; 
and further, they demonstrated the potential 
applications of virtual machine technique in the grid 
environment.  
 
1. Introduction 
 
Grid computing is a popular platform for executing 
the computing-intensive and data-intensive 
applications such as bioinformatics, high energy 
physics, climate modeling, economics, 
automotive/aerospace industry, and so forth. The 
applications are usually decomposed into several 
parallel jobs which communicate with each other and 
demand many computational resources unavailable in a 
single site. To facilitate managing the parallel jobs and 
use the computational resources, a grid computing 
system provides a transparent way to integrate many 
geographically distributed resources into a single 
virtual organization. Besides, dynamic job migration, 
in the meantime, becomes an important issue due to the 
dynamic and non-dedicated natures of girds [1-3].  
The dynamic nature causes the availability problem 
of grids. Shared resources in the grid environment are 
generally administrated by different autonomies and 
governed under different policies. They may 
dynamically join or leave a virtual organization. 
During the course of application execution, some 
shared resources used by the application have to be 
reclaimed by their respective owners for any kind of 
possibilities, for example, the scheduled maintenance, 
the sharing schedule, etc. The non-dedicated nature 
imposes the other difficulty on grid systems. The 
traditional cluster computing assumes that dedicated 
resources are available for computation. Whereas grid 
computing is noted for concurrently resource sharing. 
The resources used by the application are generally 
shared by others at the same time. The design of 
traditional cluster computing with the assumption of 
dedicated resource is apparently not feasible in the grid 
environment. Adapting grid systems to the dynamic 
and non-dedicated shared resources by run-time job 
migration is consequently very important. 
Thread migration is a common mechanism used for 
job migration in previous studies [1], [4-6]. On the 
other hand, virtual machine migration [9-10] is also a 
possible solution for job migration due to its popularity 
and maturity [7-8]. It provides high isolation, security 
and the customization environment with administrator 
privilege for users to execute their applications inside 
separate virtual machines. It is consequently more 
generally adopted in the grid environment recently. 
Para-virtualization technique is further adopted to 
optimize system performance by some up-to-date 
22nd International Conference on Advanced Information Networking and Applications -  Workshops
Unrecognized Copyright Information
DOI 10.1109/WAINA.2008.28
86978-0-7695-3096-3/08 $25.00 © 2008 IEEE
virtual machine migration. However, a shared storage 
also introduces overhead. 
 
4. Node Reconfiguration 
 
Node reconfiguration by user-level thread migration 
is another evaluated mechanism of this paper. 
Workload redistribution is the common objective of 
both node reconfiguration and virtual machine 
migration. Node reconfiguration mechanism makes 
application workload migrate from source node to 
destination node, and then let source node depart 
original computing environment. Besides, the 
destination node may be a new node dynamically joins 
the computing environment. 
There are two implementation fashions of node 
reconfiguration. One is synchronous method and the 
other is asynchronous method. Synchronous method is 
that all nodes are paused during reconfiguration. On 
the contrary, asynchronous method means all nodes 
continue to work simultaneously with reconfiguration. 
Save & restore and live migration techniques of Xen 
are respectively classified as synchronous and 
asynchronous fashion. Synchronous method may make 
performance down even though it is easier to design. 
Alternatively, we can obtain better performance by 
asynchronous method as long as we pay more attention 
to correctly maintain the order of node reconfiguration 
messages. Therefore, our evaluating mechanism is 
implemented by asynchronous methods. 
The implementation of node reconfiguration 
mechanism involves how to redistribute workload and 
how to add/delete nodes. Workload redistribution can 
be achieved by user-level thread migration that is 
already supported by the thread package of Teamster-
G. In general, adding a node is simpler than deleting 
one. We create an environment for executing working 
threads by an rsh connection to invoke a remote node. 
Furthermore, a newly added node maintains initially no 
synchronization information and page tables 2 ; the 
system thus has to provide the most up-to-date 
information for the new node. 
Same as virtual machine migration, node 
reconfiguration mechanism also needs to transfer in-
memory states from source node to destination node. 
However, it is easier to do this because it is built inside 
the DSM kernel. DSM systems usually cache memory 
pages for nodes accessing them. When a node is going 
to depart from the DSM system, we have to ensure that 
memory pages are consistent among remainder nodes. 
                                                        
2  Teamster-G is a page-based DSM system. Thus, every node in 
Teamster-G maintains its page table. Each entry of the page table 
records information referred to memory consistency of a shared 
page. 
During the maintenance of memory consistency, page 
movement among nodes is required. For example, the 
memory pages cached on a departing node should be 
moved to other nodes to prevent data loss. As 
Teamster-G supports both sequential and release 
consistency models, node reconfiguration mechanism 
must take these two consistency models into account. 
To maintain sequential consistency, a single-writer-
multiple-readers protocol is usually employed. With 
this protocol, memory pages that have two or more 
replicas must be read-only. On the other hand, only a 
single copy of a page will exist if it has been modified. 
When a node departs, some of the memory pages 
cached on this node may be read-only while the others 
are modifiable. For the read-only pages, simply 
discarding them will not cause any coherence problem 
because they can be found on other nodes. However, 
for modifiable pages, node reconfiguration mechanism 
is necessary to move them to the other nodes.  
Release consistency is usually implemented in 
conjunction with the multiple writer protocol. In such 
case, replicas of a memory page may have different 
contents for different nodes. As the result, even when a 
page on a departing node has multiple replicas, it must 
be examined to see if movement of this page is 
necessary. If this page has not been modified, it can be 
safely discarded. Otherwise, this page must be moved 
to the other nodes or the modifications must be flushed 
to the other replicas. 
 
5. Experiments 
 
To evaluate the performance of virtual machine 
migration and node reconfiguration, we conducted 
several experiments on Teamster-G, including intra-
cluster and inter-cluster environments. Both evaluated 
job migration mechanisms were performed on the Xen-
based virtual clusters for the sake of fairness criterion, 
even though the node reconfiguration can be executed 
alone without virtual machine technique support.  
Actually, we have compared the performance of 
parallel applications on the Xen-based virtual cluster 
with native cluster before performance studies of job 
migration mechanisms. P. Ruth et al suggested that 
regardless of the problem size of experimental 
application, the virtualization incurs a constant 
overhead about 20 seconds [2]. However, M. Tatezono 
et al suggested that the overhead incurred by 
virtualization is dependent on different application 
behaviors from 0% to 20% [11]. According to our 
verification, the para-virtualization technique of Xen 
incurs overhead mainly on wide-area network I/O. If 
the experimental application is executed inside a 
cluster, the virtualization only incurs a little overhead 
88
live migration and save & restore technique of Xen. To 
avoid modifying the IP configuration of each DomU 
after cluster migration, we designed a virtual network. 
The virtual network interfaces of each DomU were 
assigned a set of private IP addresses which are in the 
same layer-3 subnet with the physical network 
interfaces: eth0 of each Dom0s in both two clusters. 
On the other hand, Dom0s between two clusters 
finished entire DomUs migration via eth1. 
Besides, the network configuration and most steps 
of node reconfiguration by user-level thread migration 
were the same as the experiment of virtual machine 
migration. However, the virtual network was not 
necessary anymore because migrated jobs could be 
correctly executed with different IP address by using 
node reconfiguration mechanism. Node 1 to Node 8 
were launched at first to form two computing cluster, 
and then the benchmark applications were executed on 
the first cluster (Node 1 to Node 4). After the 
application had been executed 50% of total iterations, 
we moved the DomUs from source cluster (Node 1 to 
Node 4) to another cluster (Node 5 to Node 8) by using 
node reconfiguration mechanism.  
 
Figure 2. One of the inter-cluster network configuration 
 
5.5. Results and Discussion 
 
Table 2. The intra-cluster experimental result (seconds) 
 Without Any Reconfiguration  
Node 
Reconfiguration 
Live 
Migration 
N-Body 3999.407 4002.664 4024.374 
MM 1972.777 1988.006 2001.911 
 
Table 3. The inter-cluster experimental result (seconds) 
 Node Reconfiguration Live Migration 
Save & 
Restore 
N-Body 4123.546 4069.647 4160.015 
MM 2114.764 2042.242 2140.272 
 
Table 2 and Table 3 show the results of the four 
experimental cases. We also recorded the experimental 
result of executing the benchmark without any job 
migration to be a reference value which is all the same 
to both intra-cluster and inter-cluster scenarios. We 
found out the slowdown caused by evaluated job 
migration mechanisms is insignificant.  
 
 
Figure 3. System throughputs of intra-cluster experiments 
 
 
Figure 4. System throughputs of inter-cluster experiments 
 
Figure 3 and Figure 4 illustrate the system 
throughput with different job migration mechanism. 
The system throughput was defined as the inverse of 
turn-around time. According to Figure 3, node 
reconfiguration mechanism had better performance 
than virtual machine migration mechanism with Xen 
technique in intra-cluster scenario. After all, node 
reconfiguration mechanism is seamlessly constructed 
with the experimental grid-enabled DSM system, and it 
can more precisely reduce unnecessary in-memory 
states movement. However, according to Figure 4, live 
migration mechanism of Xen had the better 
performance in inter-cluster scenario. The performance 
of node reconfiguration mechanism was limited by our 
preliminary implementation, in which Node 1 has to be 
available as the node reconfiguration manager during 
the application run-time. Although the jobs on Node 1 
migrate to another cluster, it still receives unnecessary 
messages which cause the residual dependency 
problem and slowdown the performance. The worse 
performance of node reconfiguration mechanism in our 
experimental case was also due to longer migration 
time. The migration time of node reconfiguration 
mechanism closely depended on the distance between 
90
