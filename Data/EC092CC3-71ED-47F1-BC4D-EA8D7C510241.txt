algorithm as a solution. To enable three-dimensional (3D) 
optimization, a greedy algorithm, referred to as the multiple 
fragment heuristic, is modified to derive a good initial solution at 
stage one. Stage two initiates two local refinement techniques, 3D 
planarization and 3D relaxation, to reduce the wire or power cost 
and to relax the number of TSVs in use to meet the constraint, 
respectively. Experimental results show that the proposed algorithm 
results in comparable performance to a Genetic-Algorithm (GA) 
method but it runs at least two-orders faster, which makes it more 
practical for TSV-constrained scan-chain ordering for 3D-IC 
designs.  
 
To achieve high-performance computing on embedded systems, 
three-dimensional (3D) multi-core processors have become a 
promising alternative where energy efficiency is crucial to its 
success. Many heuristics applying Dynamic 
Voltage and Frequency Scaling (DVFS) techniques were proposed 
for energy minimization. However, most of the previous works were 
built upon a fixed task-to-core mapping where many slack spaces 
can be further improved. Therefore, the other goal in this work is to 
propose two dynamic remapping strategies to enhance an energy-
aware task-scheduling algorithm considering transmission cost. 
Experimental results show that the energy-saving rate of the best 
strategy is 16 percent higher than the previous work on average. 
Moreover, compared to an ILP solution, the enhanced algorithm can 
run at least three-order faster while achieving comparable 
performance on total energy consumption. 
 
 I 
摘 要 
 
多核心單晶片系統為實現高效能嵌入式系統的可靠方式，而三維積體電路為
現在階段實作多核心系統的最佳技術。但是三維積體電路本身仍存在許多議題等
待著我們來探討。其中，最常被人關注的即是良率與高功耗密度問題。這是因為
在堆疉的過程中可能會產生缺陷。除此之外，矽穿孔除了會占面積也可能是會導
致缺陷的來源。還有三維多核心處理器由於高功耗密度問題，易有大量的能量消
耗。因此，除何降低耗能便成為另一個主要議題。 
 
首先 在考慮矽穿孔使用數目的限制下，我們提出一個快速的兩階段演算
法，來決定掃描鏈的串接順序。第一階段，先使用貪婪演算法稱之為多片段錯誤
嚐試法，得到一組初始解。第二階段為得到一組最佳解，會利用三維平坦化與三
維鬆弛化來降低連線或功耗成本與符合矽穿孔使用數目限制。實驗結果顯示我們
所提出的演算法，可達到與基因演算法相差不多的效能，並且效率比基因演算法
快一百倍以上。這也顯示我們的方法可實際應用於三維積體電路掃描鏈的設計。 
 
三維積體電路為實作出高效能嵌入式系統的最佳技術，但其耗能問題可能會
導致不理想的表現。因此，針對耗能最小化，許多利用動態壓頻調整法被提出。
然而，大部份先前的研究團隊使用的都是固定式核心對應法，留下了許多可再降
低耗能的進步空間。因此，另一個研究議題便是在考慮核心間資料傳輸延遲時
間，提出降低耗能的任務排程演算法。此演算法結合動態重覆對應法來提高耗能
節省率。實驗結果顯示，我們所提出的演算法，其耗能節省率較先前的演算法高
出十六個百分比。除此之外，我們的演算法不僅比整數線性規劃快上一千倍以
上，還可達到與整數線性規劃解相差不多的耗能節省率。 
 
 
關鍵字：矽穿孔 ; 掃描測試 ; 核心對應法; 任務排程; 動態壓頻調整 
 
 
 
 
 
 
 
 
 
 
 III
Table of Content 
 
List of Figure.............................................................................................................. V 
List of Tables .............................................................................................................. VI 
 
Chapter 1  Introduction ............................................................................................. 1 
1.1 Research goal ............................................................................................ 3 
1.2 Method ....................................................................................................... 4 
1.2.1 First year ........................................................................................ 5 
1.2.2 Second year .................................................................................... 6 
 
Chapter 2  Fast scan-chain ordering for 3D-IC designs under through-silicon-via 
(TSV) constraints .................................................................................... 9 
2.1 Introduction ............................................................................................... 9 
2.2 Problem formulation of scan-chain ordering for TSV-constrained 
3D-IC designs ............................................................................................ 12 
2.2.1 Wire-cost minimization problem ................................................ 12 
2.2.2 Power-cost minimization problem .............................................. 14 
2.2.3 Wire-and-power cost minimization problem .............................. 19 
2.3 A fast scan-chain ordering ......................................................................... 19 
2.3.1 Minimizing wire cost .................................................................. 19 
2.3.2 Minimizing power cost ............................................................... 26 
2.3.3 Minimizing wire-and-power cost simultaneously....................... 27 
  
Chapter 3 Enhancing Energy-Efficient Task Scheduling on 3D Multi-Core 
Processors by Dynamic Remapping ....................................................... 28 
3.1 Introduction ............................................................................................... 28 
3.2 Problem formulation .................................................................................. 31 
3.2.1 Data flow graph ........................................................................... 31 
3.2.2 Timing versus resource constraint .............................................. 31 
3.2.3 Energy model .............................................................................. 33 
3.3 Baseline algorithm under a fixed task-to-core mapping ........................... 34 
3.3.1 Task-to-core mapping ................................................................. 37 
3.3.2 Voltage scaling ............................................................................ 37 
3.4 Dynamic task-to-core remapping strategies .............................................. 38 
3.4.1 Dynamic remapping (DR) ........................................................... 38 
3.4.2 Iterative dynamic remapping (IDR) ............................................ 42 
 V 
 
List of Figures 
 
Figure 1.1: 2D and 3D integration of micro-systems ................................................ 1 
Figure 1.2: 3D IC stacking technology ...................................................................... 2 
Figure 1.3: 3D-MFH flow .......................................................................................... 6 
Figure 1.4: System overview of task scheduler ......................................................... 7 
Figure 1.5: Design flow of scheduling with dynamic remapping methods ............... 8 
 
Figure 2.1: Comparison between 2D and 3D scan-chain designs ............................. 10 
Figure 2.2: Flow of proposed scan reordering algorithm .......................................... 14 
Figure 2.3: Calculations for weighted transitions ...................................................... 17 
Figure 2.4: Multiple Fragment Heuristic example ..................................................... 22 
Figure 2.5: Illustration of the neighbor heuristic ....................................................... 22 
Figure 2.6: Illustration of the application of the FastPair method ............................. 23 
Figure 2.7: Example of six-point Planarization ......................................................... 24 
Figure 2.8: Example of 3D Planarization .................................................................. 25 
Figure 2.9: Example of 3D Relaxation ...................................................................... 26 
 
Figure 3.1: Examples for different task-to-core mapping strategies .......................... 30 
Figure 3.2: Example for DFG and scheduling result of 31 tasks ............................... 32 
Figure 3.3: Transmission cost in a 3D multi-core processor ..................................... 33 
Figure 3.4: Voltage versus latency curve ................................................................... 34 
Figure 3.5: Design flow of baseline scheduling......................................................... 36 
Figure 3.6: Design flow of DR/IDR .......................................................................... 40 
Figure 3.7: First stage of DR strategy under a timing constraint 16 .......................... 41 
Figure 3.8: Second stage of DR strategy under a timing constraint 20 ..................... 41 
 
Figure 4.1: Proposed 3D scan design flow ................................................................ 44 
Figure 4.2: Comparison among GA and our algorithm for considering power and wire 
simultaneously on circuit s1423............................................................... 51 
Figure 4.3: Comparison among GA and our algorithm for considering power and wire 
simultaneously on circuit s5378............................................................... 52 
Figure 4.4: 24 scan chains for circuit bench2 (50K gates with 4095 FFs) ................ 53 
Figure 4.5: 108 scan chains for circuit bench7 (385K gates with 17983 FFs) .......... 53 
 
 
 1 
Chapter 1  
Introduction 
 
The next generation of integrated micro-system technologies enables ever 
increasing functionality and performance by utilizing the 3rd dimension. 3D 
integration of designs can bring together the virtues of overall performance, 
heterogeneous integration and miniaturization. International Technology Roadmap of 
Semiconductor (ITRS) points out that 3D integration is one of the most promising 
solutions to sustain the performance improvement beyond 65nm. Figure 1.1(a) 
illustrates an example of the integrated micro-system composed of five individual 
functional blocks. Traditionally, these five blocks are integrated in 2D packaging or 
printed wiring board (PWB). In the fashion of 3D architecture, each block can be built 
in the separate layer and stacked one-by-one vertically as shown in Figure 1.1(b). 
Apparently, the form-factor (i.e. X and Y dimensions) of the micro-system shrinks 
significantly and the overall and worst-case interconnect length can be also reduced. 
 
B1
B2
B3 B4
B5
 
(a) 
 
(b) 
 
Figure 1.1: 2D and 3D integration of micro-systems 
 
 3 
interconnect delay, footprint, performance and heterogeneous technology mixing. 
 
Potential advantages of 3D integration technology captured significant attention. 
However, 3D multi-core system has a severe thermal issue due to high power density. 
High temperature spots worsen the system reliability and cause failure. The problem 
of consuming tremendous amount of energy is more severe on high-performance 
computing systems. Therefore, the minimization of power consumption has become a 
paramount concern for present large-scale 3D multi-core systems. 
 
Nowadays, energy-efficiency is crucial to low-power design and high-performance 
computing. Many previous researches focus on energy minimization that can be 
applied at both the behavior level and the physical level. Many physical design 
solutions are proposed for this issue, including microchannel liquid cooling [28], 
floorplanning [29] and thermal TSVs [30]. Among all the high-level techniques are 
more effective than the low-level ones for energy minimization especially on 3D 
multi-core systems, such as thermal-aware task scheduling [31] and power-aware task 
scheduling [32]. More advanced techniques for energy efficiency are proposed and 
can be classified into Voltage selection (VS) (also called voltage scheduling) [33] and 
power management (PM) [34]. Both techniques mainly target the system-level energy 
saving while VS is more attractive than PM in general [35]. One of VS scheduling, 
Dynamic voltage and frequency Scaling (DVFS) scheduling algorithms has become 
more popular recently. 
 
1.1 Research Goal 
 
Both pre-bond testing and post-bond testing are important for improving the 
yield of 3D ICs. Scan-chain design is the most prevailing Design-for-Testability (DFT) 
technique which aims to reduce the difficulty of testing on the Circuit Under Test 
(CUT). Experimental results in [17] also suggested that the more TSVs in use in the 
scan chain, the less wire cost. Such observation combined with the TSV induced yield 
loss indicates an important tradeoff between wire cost and the number of TSVs in use. 
Therefore, a constraint of TSVs in use must be considered for a 3D-IC design. This 
work addresses the problem of scan-chain ordering under a limited number of 
Through-Silicon Vias (TSVs) constraints by presenting a fast two-stage algorithm as a 
solution.  
 
In addition, since a 3D multi-core processor often consumes excessive energy, 
leading to a problem of high power density [26] [27], energy efficiency becomes its 
 5 
(DVFS) scheduling algorithm, has prevailed recently. Many heuristics applying 
Dynamic Voltage and Frequency Scaling (DVFS) techniques were proposed for 
energy minimization. However, most of the previous works were built upon a fixed 
task-to-core mapping where many slack spaces can be further improved. Therefore, in 
this work, we propose two dynamic remapping strategies to enhance an energy-aware 
task-scheduling algorithm considering transmission cost. 
 
1.2.1 First year 
 
According to the formulation for the TSV constrained scan-chain ordering 
problem, two approaches are proposed in [17]. One approach is developed on the 
basis of Genetic Algorithm (GA), and the other is based on Integer Linear 
Programming (ILP). Although the GA approach may possibly find the near-optimal 
solution, the quality of one identified solution cannot be guaranteed. Moreover, the 
ILP approach, which will find the optimal cost, may not be able to produce a feasible 
solution within a limited time. The experimental result in [17] shows a lower-bound 
value on the total scan-stitching wire cost, which was obtained quickly through the 
ILP approach without providing a detailed ordering of scan FFs. 
 
From a practical perspective, a fast algorithm needs to be developed that will 
overcome the runtime issue. Therefore, we propose a fast two-stage algorithm. In 
stage 1, we convert the 3D scan-chain ordering problem into a TSP problem. Then, a 
tour-construction heuristic [20] with the support of a particular closest-pair data 
structure, FastPair, [21] is used to stitch a simple path as an initial solution. During 
stage 2, local refinement by 3D planarization and constraint-solving by 3D relaxation 
minimize the total cost and reduce the number of TSVs in use, respectively. Figure 1.3 
shows the overall flow.  
 
We present problem formulations of TSV-constrained scan chain ordering for 
3D-IC designs, with three different objectives: 
• Wire-cost minimization 
• Power-cost minimization 
• Wire-and-power cost minimization 
 
 
 
 
 
 7 
energy-efficiency on a 3D-multi-core architecture. Figure 1.4 shows the system 
overview of the timing-and-resource constrained scheduler. Inputs to a scheduler 
include a task graph, a timing constraint, a resource constraint and an energy model. 
All tasks after scheduling must be assigned into one core with a correct execution 
order. Moreover, energy minimization is the objective of a scheduler where the 
energy-saving rate is computed to estimate the energy- efficiency of schedulers. 
 
 
Figure 1.4: system overview of task scheduler 
 
Wu et al. [41] proposed an energy-efficient task scheduling algorithm on top of 
[40] via DVFS at the system level and formulated a priority gain function considering 
both gains and losses for selecting tasks to scale down its frequency.  
 
Built on top of the previous task-scheduling algorithms [41], two dynamic 
task-to-core mapping strategies, Dynamic Remapping (DR) and Iterative Dynamic 
Remapping (IDR), are proposed to reduce slack slots and to improve Energy-Saving 
Rate (ESR). Experimental results show that ESR of the algorithm with the IDR 
strategy is 16 percent higher than the previous work [41] on average. Moreover, 
compared to an ILP solution, both two proposed strategies can run at least three-order 
faster and achieve comparable performance on energy saving. Figure 1.5 shows the 
flow of the DR or IDR strategy. There are two rounds in the DR strategy where 
task-to-core mapping and voltage scaling are performed in both round. 
 
 9 
Chapter 2  
Fast scan-chain ordering for 3D-IC designs 
under through-silicon-via (TSV) constraints 
 
2.1 Introduction 
 
Interconnect along with scaling technology plays an important role in deciding 
circuit performance. Structural Three-Dimensional (3D) integration is emerging as a 
promising solution to reduce the length of long interconnects across circuits [1]. 
Moreover, 3D integration provides many other advantages over the traditional 
Two-Dimensional (2D) implementation, such as better packaging efficiency and 
higher transistor density. These advantages, collectively, not only provide significant 
performance improvement but also alleviate the problems caused by long 
interconnects [2], [3], [4], [5]. Among all vertical-integration techniques, 
Through-Silicon Via (TSV) provides the best timing and power performance for 
interconnection. However, TSVs typically incur additional area overhead and may 
become another source of defects [6]. Therefore, considering yield loss and area cost, 
the number of TSVs in use is typically limited in a 3D Integrated Circuit (IC) design. 
 
On the other hand, scan-chain design is the most prevailing 
Design-for-Testability (DFT) technique which aims to reduce the difficulty of testing 
on the Circuit Under Test (CUT). In order to guarantee high fault coverage on 
complex designs, the CUT is modified during the synthesis stage to enhance its 
controllability and observability. All Flip-Flops (FFs) are replaced by 
multiplexed-input scan FFs with multiple operation modes. During the test mode, i.e., 
when a signal test is activated, the values of one test pattern are shifted to scan FFs of 
the scan chain in sequel. Later, the pattern is applied to the combinational logic 
through the primary inputs under the function mode. The response values are finally 
captured at the primary outputs and shifted out through the scan chain once again 
under the test mode. Scan testing reduces the sequential problem into a combinational 
problem; thus, high coverage can be efficiently achieved. 
 
Although scan FFs enhance the testability on the CUT, the stitching wire of a 
scan chain can be long and may deteriorate signal integrity or even violate the timing 
constraint. Therefore, scan-chain ordering, referring to the order decision for scan FFs 
 11 
constraint of TSVs in use must be considered for a 3D-IC design. 
 
Both pre-bond testing and post-bond testing are important for improving the 
yield of 3D ICs. For enabling pre-bond testability, Lewis et al. [18] proposed a 
scan-island based design and Kumar et al. [19] proposed a hyper-graph based 
partitioning for pre-bond 3D IC testing. Additionally, several scan-ordering 
approaches for 3D IC post-bond testing were accordingly proposed in [17]. VIA3D 
uses the fewest number of TSVs to alleviate TSV impact on the scan-stitching wire. 
MAP3D first maps all scan FFs onto one single layer, followed by the 2D scan-chain 
reordering technique. OPT3D considers TSV impact during cost computation for 
scan-stitching wire. OPT3D outperforms the other two in terms of total wire cost. 
However, scan-induced power dissipation is not considered by such work and is also 
an important issue for 3D ICs. A Genetic Algorithm (GA) method was then proposed 
in [17] where the runtime issue remains unresolved and solution quality is unstable. 
Hence, a fast 3D scan-chain design is presented in this work to simultaneously 
consider wire and power costs. 
 
In this work, TSV-constrained scan-chain ordering is first analyzed and 
formulated into a Traveling Salesman Problem (TSP). Later, a fast algorithm is 
developed to minimize the scan-stitching wire and/or scan-induced power dissipation, 
to simultaneously satisfy the constraint on the number of TSVs in use for 3D-IC 
designs. Our algorithm consists of two phases: First, we construct an initial simple 
path through all scan FFs using a modified greedy algorithm, the multiple fragment 
heuristic, via a dynamic closest pair data structure FastPair. Second, we propose two 
new techniques, 3D planarization and 3D relaxation, to minimize the wire/power cost 
and to reduce the TSV number, respectively. Experiments show the practicality of our 
algorithm by producing comparable scan-stitching wire length (and total power 
dissipation) to the GA method with a two-order speedup on average. 
 
As a result, the contributions of this work can be summarized as: 
• Formulate scan-chain ordering considering TSV constraints into a modified 
TSP problem. 
• Propose a greedy algorithm for scan-chain ordering of 3D-IC designs to 
simultaneously minimize wire and power costs. 
• Demonstrate that the proposed algorithm can be practically used while 
supporting multiple scan chains. 
 
 
 13 
 
∑ |𝑥𝜋(𝑖) − 𝑥𝜋(𝑖−1)| + |𝑦𝜋(𝑖) − 𝑦𝜋(𝑖−1)|𝑛−1𝑖=1              (1) 
 
In Equation (1), xπ(i) and yπ(i) denote the x and y coordinates of the ith scan FF in 
the scan-FF ordering, respectively. All scan FFs are placed on the same plane and the 
cost of scan-stitching wire is defined as the sum of the Manhattan distances between 
two consecutive FFs, ci and ci+1, in this formulation. However, since FFs can be 
located across different layers for 3D-IC designs, the TSV cost for connecting two 
cross-layer FFs needs to be considered and the layer information of FFs needs to be 
included. 
{(x0, y0, L0), (x1, y1, L1),…, (xn−1, yn−1,Ln−1)} 
 
The total cost of scan-stitching wire is modified as follows: 
 
∑ |𝑥𝜋(𝑖) − 𝑥𝜋(𝑖−1)| + |𝑦𝜋(𝑖) − 𝑦𝜋(𝑖−1)|𝑛−1𝑖=1 + 𝐶𝑇𝑇𝑇 × |𝐿𝜋(𝑖) − 𝐿𝜋(𝑖−1)|  (2) 
 
In Equation (2), CTSV denotes the equivalent scan-stitching wire cost for one 
TSV connecting two consecutive layers. Generally, CTSV can be defined as the height 
of one TSV. Moreover, considering manufacturability and yield loss, the total number 
of TSVs in use becomes a constraint to this problem and can be expressed as 
 
𝑁𝑇𝑇𝑇 = ∑ |𝐿𝜋(𝑖) − 𝐿𝜋(𝑖−1)|𝑛−1𝑖=1                   (3) 
 
According to the modified formulation for the TSV constrained scan-chain 
ordering problem, two approaches are proposed in [17]. One approach is developed 
on the basis of Genetic Algorithm (GA), and the other is based on Integer Linear 
Programming (ILP). Although the GA approach may possibly find the near-optimal 
solution, the quality of one identified solution cannot be guaranteed. Moreover, the 
ILP approach, which will find the optimal cost, may not be able to produce a feasible 
solution within a limited time. The experimental result in [17] shows a lower-bound 
value on the total scan-stitching wire cost, which was obtained quickly through the 
ILP approach without providing a detailed ordering of scan FFs. 
 15 
designs. 
 
1) Estimation of Power Dissipation: Previous power-optimized ordering 
techniques focus on both the total power and the peak power consumption. The total 
power consumption is the sum of power consumed during testing and the peak power 
consumption is the highest power consumption used among all test patterns. 
Therefore, the dynamic power consumption can be expressed as: 
 
 P = 0.5・𝐶𝑙𝑑・𝑉𝑑𝑑2 ・F・S                   (4) 
 
where P is the dynamic power consumption, Cld is the load capacitor, Vdd is the 
supply voltage, S is the switching activity, and F is the clock frequency, respectively. 
 
 According to Equation (4), the power consumption during scan-shift operations 
is highly correlated with the switching activities in the CUT. In practice, it is 
time-consuming to count the exact number of all switching activities in the CUT, but 
the number of scan-chain transitions and the triggered transitions of logic elements in 
CUT are proven highly correlated in [11]. In other words, the number of transitions in 
the scan chain is a good estimation for total switching activities in the CUT. 
 
 Total switching activities in the CUT during scan-shift operations depend on the 
transitions in the scan chain and the corresponding positions. Thus, the number of 
Weighted Transitions (WT) can be defined as follows, 
 WT = �(𝑠𝑖𝑧𝑒 − 𝑝𝑜𝑠𝑖𝑡𝑖𝑜𝑛) 
 
where WT represents the real switching activities in the CUT, size is the total number 
of scan FFs, and position is indexed from the different beginning locations between 
the input vector and output response. Hence, every transition in the input vector or the 
output response has its own weight to reflect the real condition. Defined below are 
several necessary notations used in the weight transitions throughout the remainder of 
the paper: 
 {c0, c1,…, cn−1}: n scan FFs in the CUT C. 
 O =〈cπ(0), cπ(1), . . . , cπ(n−1)〉: Scan-chain ordering with n scan FFs. 
 V = {v0, v1,… , vn−1}: n-bit input pattern where vi is scanned in the scan FF 
ci during scan testing. Therefore,〈vπ(0), vπ(1), . . . , vπ(n−1)〉 represents an 
 17 
 
Figure 2.3: Calculations for weighted transitions 
 
 19 
the proposed algorithm. Further details are provided in Section 2.3. 
 
2.2.3 Wire-and-power cost minimization problem 
  
Two previous 3D-IC scan-chain ordering problem (with different objectives) are 
reviewed. One is to minimize the total cost of scan-stitching wire cost; the other is to 
minimize the scan-induced power cost during testing. In a more advanced case, we 
would like to simultaneously consider wire and power costs. Cost function in this new 
problem is combined from the wire and power cost function. 
 
The problem of scan-chain ordering to minimize the power and wire cost 
simultaneously can be formulated into: 
Input: CUT C with n scan cells {c0, c1, . . . , cn−1}, their layer information 
{L0,L1, . . . ,Ln−1}, and a fixed set of m test patterns {V1, R1, V2, R2, . . . , 
Vm, Rm}. 
Output: Scan-cell ordering is formed as follows〈cπ(0), cπ(1), . . . , cπ(n−1)〉 such 
that the combined cost ((1 − α) × wire cost + α × power cost) is 
minimized under a TSV constraint. 
  
 The same flow illustrated in Figure 2.2 is used again to solve the combined-cost 
optimization problem. Experimental results in Section IV will also show that the 
proposed algorithm can efficiently minimize the combined cost when ordering scan 
FFs. 
 
2.3 A fast scan-chain ordering 
 
In this section, the proposed algorithm is elaborated with respect to different 
objectives, including wire-cost minimization in Section 2.3-A, power-cost 
minimization in Section 2.3-B, and wire-and-power (combined) cost minimization in 
Section 2.3-C, respectively. 
 
2.3.1 Minimizing wire cost 
 
According to Figure 2, in stage 1, a state-of-the-art tour-construction heuristic 
used in TSP problems, multiple fragment heuristic [20], is incorporated. Moreover, a 
dynamic closest-pair data structure, FastPair [21], is implemented to facilitate the 
considerable computation of pair-wise cost in the tour-construction heuristic. An 
initial solution is obtained in stage 1 and sent to stage 2 to perform 3D planarization to 
 21 
Figure 2.4(c). 
 
In Algorithm 2.1, the closest-pair computation in line 4 realized by different 
implementations can result in different performances. To the best of our knowledge, 
FastPair is one of the best data structures and first proposed for handling dynamic 
closest-pair problems with pair-wise cost functions [21]. It behaves similar to the 
neighbor heuristic where each point stores its own nearest neighbor, but differs from 
the creation of initial neighbor values. Before exploring FastPair, we first outline the 
concept of the neighbor heuristic where each point p stores its nearest point from the 
point set S based on the following equation: 
 d(p) = 𝑚𝑖𝑛𝑞∈𝑇−{𝑝}𝐷(𝑝, 𝑞)                   (10) 
 
where D(p, q) is a user-defined function and computes the distance between scan FFs. 
That is, 
 D(p, q) = |xp − xq| + |yp − yq| + cTSV × |Lp − Lq|   (11)  
Three operations of insertion, deletion, and query are employed by the neighbor 
heuristic to maintain nearest neighbors. A query scans over distances and selects the 
smallest one. This process is illustrated in Figure 2.5. Figure 2.5 (a) shows the 
initialization of one neighbor heuristic. The nearest neighbors of nodes 1, 6, and 7 are 
nodes 2, 5, 6, respectively; the node pairs (2, 3) and (4, 5) are the closest nodes to 
each other. After deleting node 5, node 4 and node 6 need to update their closest nodes 
to be node 3 and node 4, respectively. The corresponding result is illustrated as Figure 
2.5 (b). 
 
FastPair is developed on the basis of the neighbor heuristic with some 
improvements. Instead of computing all possible distances, FastPair is initialized as a 
single directed path. This structure has the advantage of requiring only one update 
after deleting one node, which differs from the neighbor heuristic. Figure 2.6 shows 
an example. In Figure 2.6 (a), a single directed path is formed as 1 → 2 → 3 → 4 
→ 5 → 6 → 7. In the beginning, node 1 checks all other points and finds the 
min-cost point. Then, node 2 checks nodes 3, 4, 5, 6, and 7 without node 1. Finally, 
node 6 only checks one node, node 7, and connects to it. Therefore, such initialization 
can be explained by a graph that depicts how each node finds its closest node by only 
checking the nodes that have not been connected. The FastPair heuristic only updates  
 23 
the closest node for node 4 after deleting node 5 in Figure 2.6 (b). Overall, the 
FastPair heuristic runs in the time complexity of O(n2) and outperforms the neighbor 
heuristic empirically according to [21]. A comparison of run time for deleting an 
object and querying the closest pair among several different closest pair data 
structures is thoroughly surveyed; FastPair is known so far to be the best one for many 
applications. Therefore, considering time efficiency, FastPair and its operations are 
incorporated when developing our multiple-fragment-heuristic-based algorithm. 
 
 
Figure 2.6: Illustration of the application of the FastPair method 
 
2) Local Refinement and Constraint Solving: After obtaining the initial solution, 
the second stage of our algorithm applies two strategies to optimize total wire cost 
and/or to relax TSVs in use. Figure 2.7 (a) shows an initial path with the un-optimized 
wire cost. In the study of the optimization theory, 2D planarization is one common 
technique to reduce the total cost in the TSP problem. The key idea behind this is to 
planarize a graph and remove all cross edges on the plane. A modified tour with 
cross-edge removal results in a shorter cost than that from the initial tour. Figure 2.7 
(b) shows such an example. Cross edges, (2, 6) and (3,7) are replaced by edges (2,3) 
and (6,7). 
 
 25 
number of TSVs in use and to satisfy the TSV constraint. 3D relaxation reverses all 
fragments of 1 to (n-1) edges again to find the best reduction of TSVs in use until the 
target number is achieved. Later, 3D planarization is also performed to further reduce 
the total wire cost but it uses no extra TSVs. Figure 2.9 shows an example that 
illustrates the 3D relaxation process. The left part of Figure 9 represents an initial 
scan-chain ordering: 1 → 2 → 3 → 4 → 5. After reversing the fragment 2 → 3 
→ 4 to 4 → 3 → 2, the total number of TSVs in use can be effectively reduced and 
shown as the right part in Figure 2.9. Two new reversed fragments, 1 → 2 to 1 → 4 
and 4 → 5 to 2 → 5, save six TSVs in use. 
 
 
 
Figure 2.8: Example of 3D Planarization 
 
 27 
stores the pair-wise transitions is established to avoid repeated calculations in the 
proposed algorithm. After constructing the scan-chain ordering, the sum of the total 
transitions between scan FFs is minimized by the multiple fragment heuristic. 
Furthermore, we improve the total weighted transitions by rotating it n times and 
choose the best solution. Figure 2.3 shows an example where the total scan-induced 
transitions between scan FFs are accumulated in the first row (Total Trans). Although 
the sum of the total transitions are the same, the power-optimized ordering shown in 
Figure 3(b) has better total weighted transitions by rotating the initial ordering SC1 
→ SC2 → SC3 → SC4 three times into SC2 →SC3 →SC4 →SC1. 
 
Although the construction of the look-up table takes more time than the cost 
computation in the scan-stitching wire minimization problem, the time complexity is 
still O (n2) and it outperforms the technique proposed in [22]. 
 
2.3.3 Minimizing wire-and-power cost simultaneously 
 
In the problem, the wire and power costs are optimized simultaneously to 
determine the scan-chain ordering. The flow to solve the combined-cost optimization 
problem is similar to the previous problems. According to the problem formulation, 
the inputs to the algorithm are test patterns and layout information, and the objective 
is to optimize the combined cost including the wire and power costs. 
 
For computing the initial solution, we combine the user-defined function D(p, q) 
in Equation (11) and Equation (12) to count the combined cost between scan FFs 
considering m test patterns. That is: 
 
𝐷(𝑝, 𝑞) = (1 − 𝛼) × 𝐷𝑤𝑖𝑤𝑤(𝑝, 𝑞) + 𝛼 × 𝐷𝑝𝑝𝑤𝑤𝑤(𝑝, 𝑞)            (13) 
 
where Dwire (p, q) and Dpower (p, q) are shown in Equation (12) and Equation (11). 
User-defined coefficient α ranges from 0 to 1. When α = 0, this problem becomes 
a pure wire cost minimization problem. While α = 1, only power cost is considered, 
as in the power-cost minimization problem. 
 
 
 
 
 
 
 29 
priority function only considers power gain, mobility and computation density for 
each task independently while neglecting the overall gains and losses from scaling 
down the frequency of one task candidate. To alleviate such problem, Wu et al. from 
[41] proposed an energy-efficient task scheduling algorithm via DVFS at the system 
level and formulated an priority gain function considering both gains and losses for 
selecting tasks to be scaled. Figure 3.1 (a) shows the result in [41] for scheduling 31 
tasks on 3D processors with eight cores considering transmission cost under a timing 
constraint 15. In summary, all the previous works used fixed task-to-core mapping 
strategies where many slack spaces can be further utilized. 
 
To take Figure 3.1 (a) for example, an exploration of the slack slots is conducted 
after applying DVFS. Due to the fixed task-to-core mapping, many time slots 
(denoted a .x. in Figure 3.1 (a)) can be further utilized. For example, if we move task 
N2 from core 001 to core 010 using a slower frequency as shown in Figure 3.1 (b), the 
remaining spaces can be better utilized and thus the energy-saving rate is improved.  
 
Built on top of the previous task-scheduling algorithms [40] [41], two dynamic 
task-to-core mapping strategies, Dynamic Remapping (DR) and Iterative Dynamic 
Remapping (IDR), are proposed to reduce slack slots and to improve Energy-Saving 
Rate (ESR). Experimental results show that ESR of the algorithm with the IDR 
strategy is 16 percent higher than the previous work [41] on average. Moreover, 
compared to an ILP solution, both two proposed strategies can run at least three-order 
faster and achieve comparable performance on energy saving. 
 
The rest of this work is organized as follows. Section 3.2 formulates the problem 
of this work. In Section 3.3, the framework of task-to-core mapping and scheduling 
with DVFS based on [40] and [41] is presented. Two dynamic task-to-core remapping 
strategies are elaborated in Section 3.4. Section 4.2 provides the experimental result to 
show the energy efficiency of modified algorithms compared with a previous work 
[41] and an ILP solution. Finally, Section 5 concludes this paper. 
 31 
3.2 Problem formulation 
 
In this work, the core problem is how to find a schedule which can achieve the 
best energy efficiency on 3D multi-core processors. Figure 3.2 (a) is such a sample 
schedule which assigns 31 tasks to eight cores on a 3D processor under a timing 
constraint 20. Input information required by a schedule includes a task graph, a timing 
constraint, a resource constraint and an energy model. All tasks after scheduling must 
be assigned to one core in a correct execution order. Moreover, energy minimization is 
the objective for schedule where energy-saving rate is defined to approximate the 
energy efficiency of the computed schedule. 
 
3.2.1 Data flow graph 
 
One of the input data for scheduling is an unscheduled task graph. A task graph is 
also called a Data Flow Graph (DFG) that usually describes the behavior of design. 
Figure 3.2 (b) shows an example of a task graph with 31 nodes. Precedent constraint 
refers to the situation that a node vi connected by a directed edge to a node vj under 
the constraint that vj can start execution if and only if vi finishes completely. 
 
3.2.2 Timing versus Resource Constraint 
 
A Critical Path of a DFG is defined as the longest path that the summation of 
execution time of the nodes in the path is the maximum among all paths. In our work, 
the timing constraint can be specified by the user but is required to be larger than the 
length of the critical path. 
 
3D multi-core processors are illustrated as Figure 3.3 where both the number of 
cores per layer and the number of layers are parameters in our work. The transmission 
cost between any two cores is also considered and can be specified by users. We 
denote the transmission cost on the same core as α, to the neighboring core on the 
same layer as β, and to a neighboring core on the neighboring layer as γ. Given 
Figure 3.2 and Figure 3.3, task N17 is assigned to core 010, and task N20 (a successor 
of task N17) is assigned to core 100. The transmission cost between these two tasks is 1 × β + 1 × γ. 
 
 
 
 33 
 
Figure 3.3: Transmission cost in a 3D multi-core processor 
 
3.2.3 Energy model 
 
To minimize energy consumption, an energy model needs to be incorporated into 
the DVFS technique. The number of the allowable voltage levels determined by the 
designer's preference and the manufacturing technology. Figure 3.4 shows voltage 
versus latency curve from [31]. In [41], the energy model in Table 3.1 was proposed 
based on [31] and includes 3 voltage levels: 5V, 3V and 2.4V. In this work, energy 
consumption can be defined as the execution delay multiplied by the power. We use 
such energy model to perform the voltage scaling. As shown in the energy model, the 
increase of execution-delay for each task from 5V to 3V and 3V to 2.4V are the same 
and the gain of energy reduction by lowering down a task from 5V to 3V and 3V to 
2.4V are 17t and 3.2t, respectively. 
 
 
Table 3.1: Energy model 
 
 
 
 
 35 
operation are computed. Second, task-to-core mapping decides the core that a task 
runs on and its execution order. After task-to-core mapping, the initial energy of each 
task t 5V can be derived. Later, a task candidate set is computed based on a gain 
function and tasks with the highest rankings take turn to be selected for voltage 
scaling. Last, the energy-saving rate is derived to evaluate the energy efficiency of the 
schedule computed by the ORI algorithm. The pseudocode of the ORI algorithm is 
shown below. 
 
 
 
 
 
 
 37 
3.3.1 Task-to-core mapping 
 
In the baseline algorithm, task-to-core mapping is computed by 
List-Scheduling-based approach [42] [43] (through a dynamic priority list). The ready 
tasks are stored in the dynamic priority list for each time slot of each core. A task is 
ready to be mapped to a core if and only if all of its predecessors are mapped and the 
core mapping of such task satisfies its transmission constraint. The priority of tasks 
mapping to core is decided by their mobility: 
 
𝑚𝑜𝑏𝑖𝑙𝑖𝑡𝑦 =  𝐴𝐿𝐴𝑃 –  𝐴𝑆𝐴𝑃        (15) 
 
A task with a lower mobility has the higher priority to be mapped. Mapping each 
task in the dynamic priority list to its free core needs to consider the dependence of 
the given DFG. Furthermore, a task is preferred to be mapped to the same core with 
its predecessor to avoid generating additional dependency. 
 
3.3.2 Voltage scaling 
 
After the task-to-core mapping, the remaining space can be further reduced by 
rescheduling tasks using DVFS which changes the voltage level and increases the 
execution time for a task. All tasks with space_rate ≥ 1 are selected to be the candidate 
for voltage scaling where the space_rate is: 
 
𝑠𝑝𝑎𝑐𝑒_𝑟𝑎𝑡𝑒 =  mobility
𝑑𝑤𝑙𝑎𝑦
           (16) 
 
Variable delay in Equation (16) denotes the execution delay of a task. If a task 
with space rate < 1, there are not enough slack slots for scaling down the frequency of 
a task. After constructing the task candidate set, each task with the highest gain value 
is selected for voltage scaling. 
 
Another key problem is how to decide the priority of each candidate using the 
gain function, where the gain function of the task candidate Ci can be defined as: 
 Gain𝑝𝑣𝑤𝑤𝑎𝑙𝑙(𝐶𝑖) =  Gain(𝐶𝑖) − Lose(𝑃𝑆𝑖)     (17) 
 
Gain (Ci) in Equation (18) denotes the gain (energy reduction) after scaling 
 39 
3V) is performed under the initial timing constraint. Only 5V → 3V voltage scaling is 
applied to prevent the failure of task-to-core remapping later. After the first round of 
voltage scaling, the changed ASAP time and ALAP time of each task are updated. In 
the second round, mobility of each task need to be recomputed and then the 
task-to-core remapping and voltage scaling (5V→ 3V and 3V → 2.4V) are applied 
under the timing-constraint limit, respectively. Task-to-core remapping is also 
computed by List-Scheduling-based approach [42] [43] and the priority of tasks 
remapping to core is decided according to their mobility. After the task-to-core 
remapping, the distribution of executed tasks on each core can be more uniform. 
 
Figure 3.7 and Figure 3.8 show the example of scheduling 31 tasks with the DR 
strategy on 3D processors with eight cores. The initial timing constraint is set to be 16 
(starting from 1.05 critical path length) and the timing constraint limit is set to be 20. 
Figure 3.7 (a) and Figure 3.7 (b) show the first round of the DR strategy including 
task-to-core mapping and voltage scaling with 5V → 3V under a given timing 
constraint 16, respectively. After the voltage scaling in the first round, the distribution 
of executed tasks on each core is unbalanced. Especially on core 010, 18 slack slots 
are available. In the second round, the task-to-core remapping is applied to the result 
in Figure 3.8 (a) under the timing constraint limit 20, then voltage scaling 5V→ 3V 
and 3V → 2:4V are applied as shown in Figure 3.8 (b). Comparing Figure 3.7 (b) with 
Figure 3.8 (a), after the task-to-core remapping in the second round, the distribution of 
executed tasks on each core is found more balanced. Hence, a higher energy-saving 
rate is achieved after the voltage scaling in the second round. The final energy-saving 
rate of the DR strategy is 55.32 percent more than that from the ORI method on the 
same case. 
 
 
 
 
 
 
 41 
 
Figure 3.7: First stage of DR strategy under a timing constraint 16 
 
Figure 3.8: Second stage of DR strategy under a timing constraint 20 
 43 
 
 
For example, scheduling 31 tasks with the IDR strategy on a 3D processor with 
eight cores is illustrated. In the first round of the IDR strategy under a initial timing 
constraint 16, task-to-core mapping and voltage scaling with 5V →  3V are 
performed as in Figure 3.7 (a) and Figure 3.7 (b). Then, the current timing constraint 
is relaxed to 17. In the second round, task-to-core remapping and voltage scaling with 
5V →  3V under the timing constraint 17 are performed, respectively. In the 
following rounds (the third and fourth rounds), task-to-core remapping and voltage 
scaling with 5V → 3V are performed under the timing constraint 18 and 19. At last, 
when the current timing constraint is 20, we perform task-to-core remapping and 
voltage scaling (5V →  3V and 3V →  2.4V ) in the final round. The final 
energy-saving rate of the IDR strategy is 63:17 percent more than that from the ORI 
method on the same case. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 45 
In Figure 4.1, we also perform logic synthesis and scan insertion for the original 
design and then retrieve the test information via Standard Test Interface Language 
(STIL) files by using TetraMax. Two input data, including the layout information and 
test patterns, are achieved to reduce the scan induced power by performing the 
proposed algorithm. Using the same input data, we also perform the proposed 
algorithm by simultaneously considering wire and power costs. 
 
For an objective comparison, the settings used in the previous GA approach [17] 
are employed here. The population size is set to 2000; the same operators are used, 
which include reproduction, crossover, and mutation. The GA stops when no more 
than 0.0001 percent improvement on the fitness score (i.e., the total scan-stitching 
wire length or total weighted transitions) can be obtained for the last 1000 
generations. 
 
 Both the proposed 3D scan-chain ordering algorithm and the previous GA 
approach are exercised on a Linux machine with a Pentium Core Duo (2.4 GHz) 
processor and 4 GB memory. TSMC .18μm library is used and the height of a TSV is 
set as 10μm while the partitions for 3D ICs range from 3 to 5. ISCAS’89 benchmark 
circuits and two large 3D-IC designs from [23] are used to conduct experiments. 
 
 All experiments are divided into four parts. The first part minimizes the 
scan-stitching wire cost. The second part reflects the results of the scan-induced 
power dissipation reduction. The third part identifies the best scan-chain ordering 
while simultaneously considering wire-and-power costs. It is natural to use multiple 
scan chains to prevent long test-application time when the total number of scan FFs is 
large. Therefore, the last part applies the proposed algorithm to multiple scan chains 
on two large 3D-IC designs from [23]. 
 
4.1.2 Experimental results 
 
4.1.2.1 Minimizing wire cost 
 
Table 4.1 shows the preliminary performance of our algorithm with TSV 
constraints. The third column shows the TSV usage in the initial ordering. The fourth 
column reports the TSV constraints followed by the TSV usage in the wire-cost 
minimized ordering. The fifth and sixth columns show the total wire cost in μm after 
performing 3D relaxation and 3D planarization, respectively. Both solutions can 
satisfy the related TSV constraints. The seventh column reports the reduction rate 
 47 
method and the proposed algorithm, respectively. The sixth column shows the 
improvement ratio of our approach compared with the GA method. The seventh and 
eighth columns report run time in seconds for our algorithm and the GA method, 
respectively. The last column shows the speed-up rate of our algorithm compared with 
the GA method. The run time of the proposed algorithm is proportional to the number 
of iterations used to perform 3D planarization and circuit size. Although the proposed 
algorithm results in the slightly inferior total cost on s15850, it produces comparable 
or even better results than the GA method on all other larger circuits. Moreover, the 
proposed algorithm can run at least two-orders faster than the GA method. 
 
 
Table 4.2: Wire length and runtime comparison with different TSV constraint 
 
4.1.2.2 Minimizing power cost 
 
Table 4.3 shows the performance of our algorithm with the TSV constraint. In 
this case, the information for the number of layers for all circuits are shown. The third 
column shows the TSV usage in the initial ordering. The fourth column reports the 
TSV usage in the power-cost minimized ordering and the TSV constraints. The fifth 
and sixth columns show the total weighted transitions after performing 3D relaxation 
and 3D planarization, respectively. The seventh column also reports the reduction rate 
from two proposed techniques during stage 2. 
 
Table 4.3 also shows good reduction in the total number of TSVs on the big 
circuits, especially on s35932. Particularly, the five-layer s35932 has the best 
 49 
 
Table 4.4: Power dissipation and runtime comparison with different TSV constraint 
 
4.1.2.3 Considering wire-and-power costs simultaneously 
 
We further perform the proposed algorithm under TSV constraints while 
simultaneously considering wire and power costs. Table 4.5 and table 4.6 report the 
results of comparing the wire-and-power costs between the GA method and our 
algorithm under TSV constraints 20 for circuit s1423 (total number of FFs is 74) and 
circuit s5378 (total number of FFs is 179) with three-layer partitions. The first column 
specifies the coefficient α in Equation (13) from 0 to 1. The second and third 
columns show the total wire cost after performing the GA method and the proposed 
algorithm, respectively. The fourth column shows the improvement ratio of our 
approach to the GA method. The fifth and sixth columns show the total power cost 
after performing the GA method and the proposed algorithm, respectively. The 
seventh column also shows the improvement ratio of our approach compared with the 
GA method. The last column shows the speed-up rate of our algorithm compared with 
the GA method. Similarly, the proposed algorithm produce comparable or even better 
results with at least two-orders run time speedups to the GA method. 
 
 51 
show the total weighted transitions under different coefficient values after performing 
the GA method and the proposed algorithm, respectively. According to Figure 4.2 and 
Figure 4.3, as the coefficient increases, power cost decreases but wire cost increases, 
and vice versa. The coefficient α can be adjusted by users at their discretion. Again, 
the proposed algorithm can result in comparable or even better wire and/or power cost 
compared with the result from the GA method. 
 
 
 
 
Figure 4.2: Comparison among GA and our algorithm for considering power and wire 
simultaneously on circuit s1423 
 
 53 
increases, the power cost decreases but the wire cost increases. The combined cost for 
bench 2 and bench 7 can be computed in seconds; thus, the efficiency of the proposed 
algorithm is demonstrated. In summary, our algorithm is capable of supporting 
multiple scan chains after scan partitioning. 
 
 
 
 
Figure 4.4: 24 scan chains for circuit bench2 (50K gates with 4095 FFs) 
 
 
 
 
 
Figure 4.5: 108 scan chains for circuit bench7 (385K gates with 17983 FFs) 
 
 
 
 
 
 55 
 
Table 4.7 demonstrates the efficiency of three methods. The energy-saving rate 
of ILP-based method is 55.24 percent on average. The energy-saving rate of ORI 
method is 48.60 percent and their difference is 12.40 percent on average. The 
energy-saving rate of DR method is 53.14 percent and their difference between DR 
and ILP is 3.82 percent on average. The energy-saving rate of IDR method is 53.87 
percent and their between IDR and ILP is 2.54 percent on average. Experimental 
result shows our two dynamic remapping methods are superior to the baseline method 
by achieving a comparable performance as ILP. Besides, two proposed methods only 
take less than 1 second to complete, resulting in 300X to 11, 000X speedups when 
comparing to the ILP-based method. 
 
 
 
 
Table 4.7: Energy-saving rate (ESR) and the ESR Difference (ΔESR) of different 
mapping strategies 
 
 
 
4.2.2.2 Compare different strategies with transmission costs 
 
In this section, we only compare the dynamic-remapping scheduling algorithms 
with the baseline algorithm when considering transmission cost. We further tested two 
dynamic remapping strategies on graphs with node size 50, 100, 300, 500 and 1000, 
and randomly selected 10 cases of each size. Table 4.8 shows the settings of 3D 
multi-core processors with transmission costs (α = 0, β = 2 and γ = 1). Timing 
constraints were set from 1.2X to 1.5X Critical-Path Length (CPL) for each case. For 
the DR and IDR methods, we set the initial timing constraint 1.05X CPL. For the IDR 
method, the timing constraint increases 0.1X CPL for each round of voltage scaling. 
 57 
 
Table 4.9: Comparison of energy-saving rates (ESRs) and ESR improvement (+ESR) 
 
 
 
 
 
 
 
 
 
 
 
 
 
 59 
Experimental results show the solutions from the two task-to-core remapping 
strategies are more close to the ILP solution where IDR only has 2.54 percent 
difference. Besides, two proposed methods can run 300X to 11,000X faster than the 
ILP method. Our experiments also show that the energy-saving rate of the IDR 
method can achieve 16 percent higher than that of the baseline algorithm on average. 
As a result, the scheduling algorithm with dynamic task-to-core remapping can result 
in more energy efficient scheduling than that with a fixed task-to-core mapping. 
 
Based on such result, the scheduling algorithm with dynamic task-to-core 
remapping can result in more energy efficient scheduling than that with a fixed 
task-to-core mapping. We also implemented an ILP-based method for an optimal 
solution without considering the transmission costs between cores. The experimental 
results show IDR strategy can achieve comparable performance as the ILP and the 
energy-saving difference between IDR and ILP is only −2.54 percent on average. 
However, in our future work, we would like to further validate our IDR strategy 
considering transmission costs between cores. Hence, the problem is formulated into 
Quadratic Programming (QP) and compared to the IDR solution considering the 
transmission costs between cores. However, the scalability problem of QP-based 
method is more sever with transmission costs. Therefore, scheduling with a larger task 
graph is implemented into Genetic Algorithm (GA) and also compared to our IDR 
solution.  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 61 
Virazel, “Design of routing-constrained low power scan chains,” in DATE’04: 
Proceedings of the conference on Design, automation and test in Europe. Washington, 
DC, USA: IEEE Computer Society, 2004, p. 10062. 
[14] X.-L. Huang and J.-l. Huang, “A routability constrained scan chain ordering 
technique for test power reduction,” in Design Automation, 2006. Asia and South 
Paciﬁc Conference on, 24-27 2006, p. 5 pp. 
[15] B. Paul, R. Mukhopadhyay, and I. Gupta, “Genetic algorithm based scan chain 
optimization and test power reduction using physical information,” in TENCON 2006. 
2006 IEEE Region 10 Conference, 14-17 2006, pp. 1 –4. 
[16] Y.-Z. Wu and M.-T. Chao, “Scan-chain reordering for minimizing scan-shift 
power based on non-speciﬁed test cubes,” in VLSI Test Symposium, 2008. VTS 2008. 
26th IEEE, april 2008, pp. 147 –154. 
[17] X. Wu, P. Falkenstern, K. Chakrabarty, and Y. Xie, “Scan-chain design and 
optimization for three-dimensional integrated circuits,” J. Emerg. Technol. Comput. 
Syst., vol. 5, no. 2, pp. 1–26, 2009. 
[18] D. Lewis and H.-H. Lee, “A scan island based design enabling prebond 
testability in die-stacked microprocessors,” in Test Conference, 2007. ITC 2007, 
IEEE International, oct. 2007, pp. 1 –8. 
[19] A. Kumar, S. Reddy, I. Pomeranz, and B. Becker, “Hyper-graph based 
partitioning to reduce dft cost for pre-bond 3d-ic testing,” in Design, Automation Test 
in Europe Conference Exhibition (DATE), 2011, March 2011, pp. 1 –6. 
[20] J. L. Bentley, “Experiments on traveling salesman heuristics,” in SODA ’90: 
Proceedings of the ﬁrst annual ACM-SIAM symposium on Discrete algorithms. 
Philadelphia, PA, USA: Society for Industrial and Applied Mathematics, 1990, pp. 
91–99. 
[21] D. Eppstein, “Fast hierarchical clustering and other applications of dynamic 
closest pairs,” J. Exp. Algorithmics, vol. 5, p. 1, 2000. 
[22] C. Giri, S. K. Roy, B. Banerjee, and H. Rahaman, “Scan chain design targeting 
dual power and delay optimization for 3d integrated circuit,” Advances in Computing, 
Control, and Telecommunication Technologies, International Conference on, vol. 0, 
pp. 845–849, 2009. 
[23] “Taiwan integrated circuit computer-aided design (ic/cad) contest, http : //cad 
contest.cs.nctu.edu.tw/cad11/,” 2011. 
[24] 'International Technology Roadmap for Semiconductors (ITRS)', 
http://www.itrs.net/ 
[25] Kahle, J. and Day, M. and Hofstee, H. and johns, C. and Maeurer, T.and Shippy, 
D.: 'Introduction to the Cell multiprocessor', IBM Journal of Research and 
Development, July, 2005, 49, (4/5), pp. 589-604 
 63 
2, (2), pp. 81-97 
[40] Wu, C.-B., Lin, Y.-L.: 'Energy-Ef_cient Task Scheduling for DVFS-Multi-Core 
3D IC'. Master thesis, National Tsing Hua University, 2010 
[41] Gajski, D. D. and Dutt, N. D. and Wu, A. C.-H. and Lin, S. Y.-L.: 
'Scheduling','High-Level Synthesis: Introduction to Chip and System Design'(Springer, 
1992, 1st edn.), pp. 213-258 
[42] Adam, T. L. and Chandy, K. M. and Dickson, J. R.: 'A comparison of list 
schedules for parallel processing systems'. ACM, Commun. 1974, 17, (12), pp. 
685-690 
[43] 'Standard Task Graph Set, Kasahara Laboratory Department of Electrical, 
Electronics and Computer Enginnering, Waseda University', 
http://www.kasahara.elec.waseda.ac.jp/schedule/index.html 
[44] Chandrakasan, A. P. and Potkonjak, M. and Mehra, R. and Rabaey, J. and 
Brodersen, R.: 'Optimizing power using transformations', IEEE Trans. on 
Computer-Aided Design of Integrated Circuits and Systems., Jan, 1995, 14, (1), pp. 
12-31 
 
99 年度專題研究計畫研究成果彙整表 
計畫主持人：溫宏斌 計畫編號：99-2220-E-009-039- 
計畫名稱：針對 3D 整合之電子設計自動化技術開發--子計畫五：應用在驗證與測試 3D IC 整合過程中
以計算智慧為基礎的測試向量產生方法(2/2) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 1 1 100%  
研討會論文 4 4 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 2 2 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 8 8 100%  
博士生 1 1 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100 字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 ■申請中 □無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100 字為限） 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
A.學術成就 
1.提出針對 scan-chain ordering 在考慮降低繞線長度或是功能消秏的演算法。 
2.在配合 DVFS(動態電壓頻率規劃)的技術下，設計一套 task scheduling 的演算法來降低
IC 的消秏能量。 
3.目前有四篇論文發表在國內會議中 (The 22nd VLSI Design / CAD Symposium 2 篇，2011 
VLSI Test Technology Workshop) 
4.另外有兩篇論文已投稿至國際期刊(IEEE TVLSI, IET Computer and Digital 
Techniques) 
三維積電路比傳統的二維積體電路有著許多顯著的優勢，但三維積體電路比二維積體電路
面臨了更嚴重的熱問題，因為我們提出了 task scheduling 的演算法並配合 DVFS(動態電
壓頻率規劃)的技術，調整每個 task 執行的電壓頻率，進而平衡三維積體電路中每一層的
溫度分佈。 
B.技術創新： 
良率問題在三維積體電路中極為重要，而良率與製造成本息息相關，因此 Design for 
Testability 在三積體電路中更是不可或缺的一項技術，scan-chain based 的測試是 DFT
中常見的方法，我們提出了快速的演算法來幫助我們決定 scan-chain 的順序，用來降低
繞線長度以及功能消秏。 
C.社會影響： 
