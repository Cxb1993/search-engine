 1
 
行政院國家科學委員會補助專題研究計畫■ 成 果 報 告   □期中進度報告 
 
嵌入式網路通訊裝置核心與網路協定行為
效能評比技術與工具之研發 
 
 
計畫類別：□ 個別型計畫  ■ 整合型計畫 
計畫編號：NSC 99－2220－E－009－046 
執行期間：99 年 08 月 01 日至 100 年 07 月 31 日 
 
計畫主持人：曾建超 教授 
共同主持人： 
計畫參與人員：李宗鴻、游家明、蘇育彣、林家樑 
 
 
成果報告類型(依經費核定清單規定繳交)：□精簡報告  ■完整報告 
 
本成果報告包括以下應繳交之附件： 
□赴國外出差或研習心得報告一份 
□赴大陸地區出差或研習心得報告一份 
□出席國際學術會議心得報告及發表之論文各一份 
□國際合作研究計畫國外研究報告書一份 
 
 
處理方式：除產學合作研究計畫、提升產業技術及人才培育研究計畫、
列管計畫及下列情形者外，得立即公開查詢 
          ■涉及專利或其他智慧財產權，□一年■五年後可公開查詢 
 
執行單位：國立交通大學資訊工程學系(所) 
 
中   華   民   國  100  年  10  月  30  日
 3
一、 研究動機 
隨著電腦科技的進步無線網際網路技
術的興起，嵌入式 (Embedded) 網路通訊
裝置日益普及，然而，目前尚未有一套完
整的工具，能夠協助網通裝置開發者，深
入瞭解網通裝置的通訊行為。為了加速網
通裝置研發時程與提升研發效率，有必要
開發一套嵌入式裝置通訊行為的分析工
具，以協助開發者診斷嵌入式裝置通訊行
為的缺失和效能(例如: 傳輸延遲、反應時
間以及封包遺漏等問題)，縮短研發週期。 
本計畫之目的即是要發展嵌入式網路
通訊裝置核心行為與網路協定之效能分析
工具。一個嵌入式網路通訊裝置的通訊行
為，包含基本的網路存取能力，以及其中
的傳輸延遲、反應時間以及封包遺漏等效
能指標。傳輸延遲、反應時間與封包遺漏
會受到使用的網路類型、核心系統及網路
協定等種種因素的影響而有所變化[1]。尤
其當嵌入式網路通訊裝置在網路上漫遊
(Roaming)期間，與各個無線網路基地台間
進行交遞(Handover)時，從應用程式到網
路協定，乃至作業系統內網路相關的核心
元件，都會因應交遞而有所動作，而造成
傳輸延遲、封包遺失甚至連線中斷。因此，
為了確實掌握嵌入式網通裝置的網路通訊
行為，有必要開發一套輔助工具，協助嵌
入式網通裝置的開發者正確界定通訊行為
的效能瓶頸，進而分析問題及改善缺失。 
然而，目前尚未有一套工具，能夠協
助開發者深入瞭解嵌入式網通裝置之通訊
行為。本計畫之目標即是要發展嵌入式網
路通訊裝置之整體通訊行為的整合分析工
具，以協助嵌入式裝置研發人員診斷通訊
行為的缺失或瓶頸。 
 
二、 背景知識與相關技術 
嵌入式網路通訊裝置的通訊行為除了
基本的網路存取(Access)能力外，我們經常
關心的是傳輸延遲 (Delay)、反應時間
(Response Time)以及封包遺漏(Packet Loss)
等效能指標。這些效能指標會因為通訊行
為的影響而有所變化。 
如圖一所示，網路通訊裝置內部會實
作網路堆疊協定(Protocol Stack)，而通訊行
為則由通訊兩端的網路堆協互動而產生的
整體行為。當裝置要傳遞資料時，資料會
先經由堆疊協定處理，經由底層網路界面
傳送，透過網路傳輸到達另一端裝置時，
再經由底層網路界面接收，交由裝置內部
的堆疊協定處理。因為應用層的行為分析
須針對個別應用層程式進行客製化，因
此，本計劃只針對傳輸層以下的行為提供
一個標準化的整合分析工具，並以幾個代
表性的應用程式為例，進行實測與分析，
以驗證本工具的正確性及可行性。 
 
圖一、網路堆協與通訊示意圖 
一般而言，傳輸層、網路層以及部份
鏈結層的協定是實作於核心(Kernel)作業
系統。因此，網路通訊行為基本上可分
為:(1)系統內部的(Internal)核心行為，如：
作業系統(Operating System)核心內部網路
相關元件(Component)的行為、元件間的訊
息交換 (Signaling) 等，以及 (2) 外顯的
(External)網路協定行為，例如: DHCP、
TCP、IP、Ethernet、IEEE 802.11、ARP
等。但目前仍沒有一套合適的工具能協助
開發者，分析這些指標以及造成延遲與封
 5
為(Protocol Log)，產生整合紀錄(Integrated 
Log)，以及提供通訊行為分析的功能和圖
型化的使用者介面，讓使用者可以很方便
的觀察與分析網通裝置的整體通訊行為。 
因為 Linux 作業系統中，網路協定堆
疊屬於 Kernel Space，Kernel Space 的程式
行為都受到核心系統所保護，因此，當我
們要輸出 Kernel Space 的系統資訊時，需
藉由系統呼叫(System Calls)或在 Linux 核
心程式中嵌入指令以輸出系統資訊。但網
路協定堆疊之核心函式的數量過於龐大，
執行過程需記錄許多系統資訊，如果透過
系統呼叫方式輸出訊息，會造成核心系統
頻繁地在 Kernel Space 與 User Space 之間
作切換，增加核心系統負擔，進而影響本
工具的準確性，因此我們採用在 Linux 核
心程式嵌入指令的方式來紀錄相關資訊。 
嵌入指令的方式，大略可以分成
Source Instrumentation 和 Binary 
Instrumentation 二 種 類 型 。 Source 
Instrumentation 是將記錄指令嵌入於系統
原始程式碼，Binary Instrumentation 則是
將記錄指令指令嵌入於 Object Code 中。
因為嵌入式網通裝置的 CPU 架構非常多
樣化，如果選用 Binary Instrumentation，
則需要針對每一種 CPU 架構，調整嵌入指
令的方式，也較難針對處理網路封包的核
心函式與核心事件進行追蹤。因此我們採
用 Source Instrumentation 的方式，將記錄
指令嵌入於系統原始程式碼。 
因為我們的目標是要追蹤網路核心行
為，只需要記錄存取網路封包的函式
(Procedure Level)行為，因此，只需要粗糙
(Coarse-grained)的剖析程度，以縮小核心
行為記錄。 
而為了降低嵌入指令對作業系統的運
作模式與執行效能的影響，以及提高記錄
核心行為的彈性與方便性，我們採用
Configurable Kernel Instrumentation、虛擬
記憶體以及背景移轉的機制(容後說明)。 
 
四、 量測與分析系統設計與實作 
圖三為我們開發的核心行為量測架構
圖。如圖所示，首先在核心系統原始碼的
中，嵌入追蹤網路核心函式以及網路事件
的指令，嵌入的指令包含 Kernel Probes(探
針)和 Instrument Module，而 Event Module
則是採用 Linux Netlink [19]。Kernel Probes
是記錄核心行為的觸發點，只是一些負責
轉移控制權的指令（容後說明）。Instrument 
Module 利用 Linux Kernel Module [20~23]
機制所完成，負責記錄核心函式執行時
序，以及核心行為與網路協定行為整併所
需的相關資訊。Event Module 則負責偵測
並回報核心事件（例如：Router Events 與
網路介面 Events）。 
由於 Linux Kernel Modules 可以在
User Space 中進行編譯，並以掛載及卸載
的方式延伸或補強原本核心的功能，可以
在要執行分析封包的時候，才選擇掛載
Instrument Module，不需要修改 Linux 
Kernel，也不必重新開機。而當需要修改
核心網路函式輸出的程式碼，我們只要在
User Space 修改並重新編譯 Instrument 
Modules 的 程 式 碼 ， 再 將 Instrument 
Modules 重新掛載，就可以達到修改 Linux 
Kernel 功能的目的。 
Profile Manager 包含 Kernel Function 
Monitor 與 Event Monitor。Kernel Function 
Monitor 定期將 Instrument Module 內的
Function Log 備份到磁碟。Event Monitor
則透過 Netlink 訊息交換機制，由 Event 
Module中取得核心事件資訊。此外，Profile 
Manager 也提供 GUI 讓使用者設定預觀察
的函式，以告知 Instrument Module 要記錄
哪些函式。 
 
 7
技術，以動態背景移轉的機制，在不中斷
量測與記錄的程序，持續由核心系統的暫
存記憶體讀取核心函式記錄，並將核心函
式記錄寫入外部儲存空間，以解決嵌入式
裝置儲存空間或核心系統記憶體空間的限
制，延長量測觀察的時間。 
如前所述，Instrument Module 會先將
核心函式記錄寫入核心記憶體暫存。雖然
Function Monitor 可以採用 proc 檔案系統
(proc filesystem; procfs)讀取核心函式記錄
[25]，但是採用 proc 需要由核心系統記憶
體拷貝到使用者空間的記憶體，這個多餘
的拷貝動作會浪廢許多 CPU 資源。 
 
1MB for RX
1MB for TX
2MB
RAM
Kernel Space
MMAP VMA of Profile Manager
Read Kernel 
Log
User Space
Profile
Manager
 
圖五、記憶體映射背景移轉機制 
 
藉由記憶體映射之動態背景移轉機
制，核心系統並不會因為頻繁地系統輸出
入(System I/O)，或多餘的核心系統與使用
者空間的記憶體拷貝動作，造成額外的負
擔，也能夠適當地消除記憶體空間不足的
問題。 
(B) 封包關聯技術 
Integrated Analyzer 的目標是要協助
開發者排除問題或找出網路通訊協定堆疊
的效能瓶頸。因此，Instrument Module 需
要紀錄封包在核心系統的處理過程與時間
資訊，以及核心行為記錄(Kernel Behavior 
Log, KBL) 與 外 顯 的 網 路 行 為 記 錄
(Protocol Behavior Log, PBL)的關連資
訊。利用這些關聯資訊，Integrated Analyzer
可以整倂 KBL 與 PBL。 
由於封包擷取工具取得的 PBL 已經
包含有完整的封包資料，因此 Instrument 
Module 不需再完整的封包資料，僅需記錄
各項核心行為記錄是由那一個封包觸發的
關聯資訊，藉由關聯資訊， Integrated 
Analyzer 就可達成整倂 KBL 與 PBL 目標。 
因此，當核心函式處理某個封包時，
Instrument Module 需要記錄該封包具有代
表性的整倂資訊，藉由該資訊 Integrated 
Analyzer 可以由 PBL 中找到該封包，進行
KBL 與 PBL 的整併。 
PBL的封包記錄包含各階層網路協定
(Link Layer、Network Layer 和 Transport 
Layer)的 Header。但由於網路封包在核心
網路協定堆疊會經過層層的封裝或拆解，
所以不是所有的核心函式都會看到 MAC
或 IP Header 的資訊。 
封包進入核心系統會先進入傳輸層
(Transport Layer)。此時，封包還不會包含
IP 或 MAC Header 的資訊，而且傳輸層的
網路協定非常多種，也缺乏代表封包的共
同資訊。所以，我們為每一個封包指定一
個 ID，來追蹤此封包在核心系統內部網路
協定堆疊的處理過程。 
當 封 包 進 入 到 網 路 層 (Network 
Layer)，則封包將擁有 IP Header，我們從
RFC 791 [27]得知：在一段時間內，一對
Source 和 Destination 的同一種網路協定連
線中，IP Header 的 Identification 必須為唯
一的。因此，我們只需要取得以下四項資
訊即可作為整倂的參考: 
• Destination IP Address  
• Source IP Address 
• Identification 
• Protocol 
 9
Polymorphism
Direct use 
function
PT
DT
Indirect use 
function IT
1.
2.
3.
Selective 
Auto-Instrument
Patched 
Source Code
Original 
Source Code
PT: Polymorphism Table
DT: Direct use Table
IT: Indirect use Table
Control Flow
Data Flow
 
圖九、選擇性自動指令嵌入技術流程圖 
Linux 核心系統採用 struct sk_buff 
(Socket Buffer) [28]來管理與儲存封包的
資料結構。在 Linux 核心系統所有處理網
路封包的核心函式都會直接(Direct)或者
間接(Indirect)的使用到 struct sk_buff，因
此，我們可以以 struct sk_buff 為依據，找
出所有的網路封包處理函式，並且將指令
自動嵌入於函式內，產生修改過的核心系
統 (Patched Kernel) 並且安裝於網路裝置
中。 
但是，如圖十所示，在尋找處理網路封
包函式時，必須考慮 struct sk_buff 可能存
在的各種變形(Polymorphism): 
(a) Alias: 由 Macro 定義所產生，便於使
用的新識別名稱，在編譯前會由
compiler 呼叫 preprocessor 將此新識
別名稱替換為原始的識別名稱。 
(b) Customized Data Types: 利用 typedef
將 struct sk_buff 重新定義其識別名
稱，與 Alias 不同的地方是 Customized 
Data Types 於 Compiler 編譯程式碼時
才 轉 換 新 的 識 別 名 稱 成 struct 
sk_buff，而不是於 preprocessor 階段。 
(c) Nested Structure: 將 struct sk_buff 與
其他資料型態組合成一個新的資料型
態，因此新的資料型態與 struct sk_buff
產生關聯，網路封包處理函式則可以
透過新的資料型態存取 struct sk_buff。 
 
圖十、Polymorphism of sk_buff 
此外，也有可能存在 Multi-level 
Polymorphism of sk_buff，如圖十一，struct 
sk_buff 存在於 Alias，而 struct sk_buff 再經
由 Alias 存在於 Nested Structure。 
 
圖十一、Multi-level Polymorphism 
所以我們必須在尋找封包處理函式之
前，分析程式原始碼內部 struct sk_buff 存
在的多種變化形式。若函式至少傳遞或回
傳一個結構型態為 struct sk_buff 或其變形
的參數，則歸類為 Direct Use Functions。 
另一種封包處理函式使用 struct 
sk_buff 的方式是 Indirect Use。有些函式雖
然沒有直接使用 struct sk_buff，但如果呼
叫 Direct Use Functions 或者被 Direct Use 
Functions呼叫時，會間接地實質存取 struct 
sk_buff，那麼這些函式是處理封包的核心
函式，我們將這些函式歸類為 Indirect Use 
Functions。 
此外，核心函式如果呼叫 Indirect Use 
Functions 或者被 Indirect Use Functions 呼
叫 時 ， 也 會 間 接 地 實 質 存 取 struct 
sk_buff，因此 Indirect Use 具備遞移關係，
 11
析結果。 
以下說明整合分析工具架構中，Log 
Matcher、Log Accessor、Call Procedure 
Analyzer 與 Time Analyzer 四個部分的設
計。 
1. Log Matcher: 
Log Matcher 的功能是將四個 Log
檔整併，整併的方式是透過 KBL 
Footprints 中的關聯資訊，找出某一封
包的網路協定行為(PBL)與全部核心行
為(KBL)記錄。因此，使用者除了藉由
PBL 觀察某一封包的封包資訊外，還
可以關聯到 KBL 所記錄的核心函式處
理封包的時序。反之，使用者也可透過
觀察某些有興趣的核心函式，關聯至
PBL 記錄，以顯示核心函式處理過的
封包內容。 
另外 Event Log 及 DHCP log 也可
透過其時間戳記(timestamp)，以一定的
時間範圍關聯至 PBL，讓使用者觀察
此 Event 或 DHCP message 發生時，封
包資訊為何。 
在封包關聯技術中有提到，為了將
KBL 與 PBL 關聯，在 KBL 記錄了
Footprints 以儲存封包相關資訊。有些
KBL 記錄中的 Footprints 具有 IP 
Header 資訊。圖十三展示 Footprints 與
KBL 的 IP Header 資訊關聯性。Log 
Matcher 先針對具有 IP Header 資訊的
KBL 記錄，以 Footprint 與 PBL 封包中
的 IP Source Address、IP Destination 
Address 、 Protocol Number 以 及
Identification 為 Key，利用 Hashing 的
方式進行關聯。關聯以後，再以
Footprints中的Packet ID找出其他處理
同一封包但沒有 IP Header資訊的KBL
記錄。 
 
圖十三、核心函式紀錄與網路協定行為紀錄整併參考資訊對照 
2. Log Accessor 
Log Accessor 是存取 Log Matcher
整併的資料的 API 介面。Call Procedure
及 Time Analyzer 可藉由 Log Accessor
提供的 API 存取整併後的資料進行分
析，例如:某封包關連到的核心函式資
料、Authentication 封包的發生時間等。 
3. Call Procedure 
如前所述，透過 Packet ID 可以歸
納出某一封包的核心函式呼叫流程，但
Instrument Module 是採用 sk_buff 的
address 為 Packet ID，而 sk_buff address
會被系統回收利用，因此不同封包的處
理流程可能會擁有相同的 Packet ID，
以致無法分辨不同封包的核心函式處
理記錄。 
此問題的解決方法，是利用核心函
式 skb_release_data() 函式當作分水
 13
 
圖十四、TCP 傳輸速率–  Memory 
Logging Disabled 
 
圖十五、TCP 傳輸速率- Memory Logging 
Enabled and Disk Movement Disabled 
 
 
圖十六、TCP 傳輸速率-Memory Logging 
Enabled and Disk Movement 
圖十四顯示，在 Logging Disabled 的
情況，2.6.21-SI 與 2.6.21-RAW 的 TCP 傳
輸速率是相同的，驗證儘管選擇性嵌入
6813*2 = 13626 個 Probe 於核心系統中，
依然不影響原始的核心系統運作行為。然
而 2.6.21-KFT 的傳輸速率卻是大幅低落。
而從圖十五得知，在 Logging Enabled 但
Disk Movement Disabled 的情況之下，
2.6.21-SI 與 2.6.21-RAW 傳輸速率的差別
幾乎是微乎其微，傳輸速率只降低
0.1Mbits/sec，至於 2.6.21-KFT 的傳輸速率
依然低落。 
圖十六顯示 Memory Logging 與 Disk 
Movement 同時 enabled 的 TCP 傳輸速率。
本工具在 Disk Logging Enabled 時，對效
能也僅僅有 4%的些微影響，然而 KFT 對
於核心系統的影響高達 94.47%。 
網通裝置在交遞過程中，除了執行核
心函式外，也會觸發一些核心事件，而網
路協定堆疊的運作有時需要特別的事件觸
發，但目前事件通知機制並不完備，因此
網路核心函式或DHCP的運作會出現不必
要的等待時間。本具可以整合通訊兩端互
相交換的訊息封包與核心行為，提過通訊
過程的流程與時間分析。 
我們以無線區域網路 SIP-based VoIP
為例，展示我們的工具在 MN 漫遊時，交
遞過程的整體通訊行為與時間分析。 
 
圖十七、無線網路測試環境圖 
如圖十七所示。為了避免外界訊號干
擾影響實驗結果，我們使用阻隔箱
(Shading Box)和可程式衰減器(Attenuator)
建置實驗環境，我們將通訊裝置、封包擷
取主機與兩個基地台的天線放在同一個阻
隔箱，基地台的天線訊號先經由可程式化
衰減器，再連接到阻隔箱內的天線插槽。 
 15
從原服務基地台(AP1)的訊號涵蓋範圍移
動至目標基地台(AP2)。當 MN 離開 AP1
範圍時，會觸發 Link DOWN，MN 之後進
入 AP2 範圍，會觸發 Link UP。 
圖十八是實測過程產生的核心事件、
核心函式以及封包紀錄，經由由 Integrated 
Analyzer 整併與顯示的結果。Integrated 
Analyzer 的 GUI 介面共分為三大部份: 
Packet Viewer、Kernel Function Viewer 和
Kernel Event Viewer。這三個 Viewers 的視
窗可以使用者拖拉縮小或放大。 
Packet Viewer 顯示封包擷取器所擷取
到的網路封包，Kernel Function Viewer 顯
示處理封包的核心函式與執行時間點。
Kernel Event Viewer 則顯示被觸發的核心
事件與時間點。因為 Integrated Analyzer
會建立封包與核心函式以及事件紀錄的關
連，在 Packet Viewer 選取某一網路封包，
就可以在 Kernel Function Viewer 與 Kernel 
Event Viewer 顯示該封包相對應的核心函
式和事件紀錄，反之，也可由選取某一核
心函式或事件，連結相對應的網路封包。 
圖十九是使用為整合分析工具所得到
的 VoIP Handover 過程時間分析結果。本
工具可以歸納 Handover 時，斷線再連線過
程中各個階段的延遲時間。從結果可得
知，整個交遞行為過程花了將近 50 秒的時
間，其中 Probing Delay 佔據 90%以上的時
間。先前的研究也都顯示 Probing Phase 的
確會佔據交遞過程中極大部分的延遲時
間，因此有許多研究致力於減少 Probing 
Phase 的延遲時間。 
另外，利用本工具可以十分清楚的追蹤
封包處理過程中所境過的處理程序，並以
圖形化的方式呈現。圖二十是處理 TCP 封
包的核心函式 Call Graph。藉由形化的呈
現，使用者可以很容易地掌握整個網路協
定堆疊處理流程的呼叫關係。 
本工具也能夠自動的計算嵌入式網路
通訊裝置的交遞行為延遲時間，提供不同
解析程度的分析。而本工具親切的圖形化
界面，能讓使用者可以很容易的分析網路
通訊的核心系統行為，觀察系統效能，釐
清與改善網路通訊的問題，藉此全面剖析
網路協定堆疊。 
 
 
圖二十、TCP 封包的 Call Graph 
六、 結果與討論 
我們的追蹤與量測工具可以用來(1)
自動嵌入追蹤指令、(2)產生核心行為紀
錄、(3)整合核心行與網路協定行為和(4)
提供整體通訊流程與時間分析。實驗結果
驗證，我的的工具確實可以用來分析整體
通訊行為，對系統的影響也極小，並可因
應未來 Linux 核心版本的演進。利用這套
工具，使用者經由相關網路協定的測試，
 17
Journal, Jun. 2006. 
[18] Byungjoon Lee, Seong Moon, and 
Youngseok Lee, “Application-Specific 
Packet Capturing using Kernel Probes,” 
IFIP/IEEE international conference on 
Symposium on Integrated Network 
Management, 2009. 
[19]  J. Salim, H. Khosravi, A. Kleen, and 
A. Kuznetsov, “Linux Netlink as an IP 
Services Protocol,” IETF RFC 3549, 
July 2003. 
[20] Bryan Henderson, “Linux Loadable 
Kernel Module HOWTO,” Available 
from:http://www.tldp.org/HOWTO/Mo
dule-HOWTO/ 
[21] Jongmoo Choi, “Kernel aware module 
verification for robust reconfigurable 
operating system,” Journal of 
Information Science and Engineering, 
Vol. 23 No. 5, pp. 1339-1347, Sep. 
2007. 
[22] Min-Feng Tsao, “Design and 
Implementation of an Efficient and 
Configurable Instrument Platform for 
Linux Network Protocol Stack,” Master 
Thesis, NCTU, 2008. 
[23] Jonathan Corbet, Alessandro Rubini, 
Greg Kroah-Hartman, “Linux Device 
Driver – 3rd Edition,” O'Reilly, 2005 
[24] Nicolas Loriant and Jean-Marc 
MenaudGeneralized, “Dynamic Probes 
for the Linux Kernel and Applications 
with Arachne,” IADIS Conference on 
Applied Computing, Feb. 2007. 
[25] Steve Best, “Linux® Debugging and 
Performance Tuning: Tips and 
Techniques,” Prentice Hall, Oct. 2005. 
[26] Daniel p. Bovet， “Understanding the 
Linux Kernel,＂ O’Reilly, Aug. 2006 
[27] M. D. Rey, “Internet Protocol,” IETF 
RFC 791, Sept. 1981. 
[28] K. Wehrle, F. Pahlke, H. Ritter, D. 
Muller, and M. Bechler, “The Linux 
Networking Architecture – Design and 
Implementation of Network Protocols 
in the Linux Kernel,” Prentice Hall, 
April 2004. 
[29] Nikolai Joukov, Avishay Traeger, 
Rakesh Iyer, Charles P. Wright, and 
Erez Zadok, “Operating System 
Profiling via Latency Analysis,” 7th 
symposium on Operating Systems 
Design and Implementation. 
[30] Yuan-Li Hsu, “Analysis of Link-layer 
and Cross-layer Handover Behavior of 
IEEE 802.11 Wireless Networks,” 
Master Thesis, NCTU, 2009 
[31] Iperf, Available from: http:// 
sourceforge.net/projects/iperf/ 
[32] H. Velayos, G.. Karlsson, “Techniques 
to reduce the IEEE 802.11b handover 
time,” IEEE International Conference 
on Communications, vol. 7, pp. 3844 – 
3848, June 2004 
[33] S. Shin, A. Forte, A. Rawat, and H. 
Schulzrinne, “Reducing MAC Layer 
Handover Latency in IEEE 802.11 
Wireless LANs” ACM MobiWac, 
October 2004.. 
[34] H. Wu, K. Tan, Y. Zhang, Q. Zhang, 
“Proactive Scan: Fast Handover with 
Smart Triggers for 802.11 Wireless 
LAN,” INFOCOM, pp.749-757, May 
2007 
[35] Ping-Jung Huang, Yu-Chee Tseng, and 
Kun-Cheng Tsai, “A Fast Handover 
Mechanism for IEEE 802.11 and IAPP 
Networks,” IEEE Vehicular Technology 
Conference, pp.966-970, May 2006 
 
 19
Patents: 
1. Jen-Shun Yang, Ray-Guang Cheng and Chien-Chao Tseng. “用於路由協議的方法及系
統,” POC Patent No. ZL200710142223.1, 12/15/2010. 
2. Jui-Tang Wang, Yuan-Ying Hsu, Jen-Shun Yang and Chien-Chao Tseng. “System and 
Method for Wireless Mobile Network Authentication,” POC Patent No. 
ZL200710193625.4, 05/25/2011. 
3. Jun-Yu Lai, Kue-Li Huang, Jui-Tang, Wang, Chien-Chao Tseng and Chao-Nan Wu. 
“Routing Method and Routing Path Recovery Mechanism in Wireless Sensor Network 
Environment,” USA Patent No 7983207, 07/10/2011. 
4. Yuan-Ying Hsu, Jen-Shun Yang, and Chien-Chao Tseng. “Methods and System for a 
Routing Protocol,” USA Patent No. 7996558, 08/09/2011. 
5. Yu-Wen Chen, Jui-Tang Wang, and Chien-Chao Tseng. “Group Authentication Method,” 
USA Patent No. 8005460, 08/23/2011.. 
6. Yung-Chien Shih, Jen-Shun Yang, and Chien-Chao Tseng. “Distributed channel 
allocation method and wireless mesh network therewith,” USA Patent No. 8059593, 
11/15/2011, PRC Patent Pending.  
7. Jui-Tang Wang, Yuan-Ying Hsu, Jen-Shun Yang and Chien-Chao Tseng. “System and 
Method for Wireless Mobile Network Authentication,” POC Patent No. 8060741, 
11/15/2011. 
8. Chien-Chao Tseng, Yung-Sheng Lee, Yu-Jen Chang and Elia Chen. “Network 
Association Method For Public Transportation System (應用於大眾運輸系統中的網路
連結建立方法,)” ROC Patent Pending.  
9. Kue-Li Huang, Chao-Nan Wu, Jui-Tang, Wang and Chien-Chao Tseng. “無線感測網路
中具省電效果之骨幹導向結構、建立方法及修復方法 ,” ROC and USA Patent 
Pending. 
10. Chien-Chao Tseng, Tsung-Hung Li and Hung-Hsin Chang, “A Mechanism for Tracing 
Network Packet Processing Procedure (一種追蹤網路封包處理程序的機制,)” ROC 
Patent Pending. 
 
99 年度專題研究計畫研究成果彙整表 
計畫主持人：曾建超 計畫編號：99-2220-E-009-046- 
計畫名稱：嵌入式網路通訊裝置評比技術與工具之研發--子計畫三:嵌入式網路通訊裝置核心與網路協
定行為效能分析評比技術與工具之研發(中心分項)(2/2) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 0%  
研究報告/技術報告 2 2 100%  
研討會論文 2 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 2 0 70%  專利 已獲得件數 0 0 100% 件  
件數 1 0 100% 件  
技術移轉 
權利金 100 0 100% 千元  
碩士生 4 0 100%  
博士生 1 0 60%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 6 7 50%  
研究報告/技術報告 0 0 100%  
研討會論文 1 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 1 0 30%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
