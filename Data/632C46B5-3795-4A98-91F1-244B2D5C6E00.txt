圖三：Coral的階層式結構及搜尋
理論上、此方式確實可以減少網路在搜尋時的遞延成
本(Lookup Latency)，但Coral卻沒有考慮到：此三層
k_bucket tree彼此間所擁有的資訊，各有優勢；如何在
各層之間在適合的情形下，做適當的切換，以充分利
用到各層資訊的特性。此外、Coral也沒有考慮到各個
節點本身的k_bucket tree應該如何維護，會更有利於搜
尋速度的提升。
因此、我們提出了嶄新的初始化網路拓墣的方法，並
發展出一套「叢集間動態快速搜尋法」。以求有效維
護各個節點的k_bucket tree，並詳細考慮在各種情形
下， 應該如何在各層k_bucket tree間做適當的切換，
以加速節點搜尋的速度，及降低搜尋失敗的機率。
Dynamic Fast Clustering Search（DFCS）演算法：
1. 先在Levl-0尋找， 看是否直接有Target node
2. 再找Level-2 ，ㄧ直詢問下去，直到沒有更近的
結果時，切到Lev-1繼續找
3. 先比較 ”自己Level-1所知的”，是否有比 ”經更
新後的 Level-2所知的”更近？
(i) 若無：則由 “Level-2所知最近的節點“ 的
Level-1繼續找起
(找的規則為先看Lev-0，有否完全match
者；若無，之後才回到Lev-1找更近者)，
然後將找的結果回傳。
(ii) 若有：去詢問此節點，而此節點
(找的規則為：先看Level-0，有否完全
match者，若有、則將之直接回傳；否則、
再續看Level-2上，是否有更近且cid相同
者，若有、則將之直接回傳；若無、最後
才回到Level-1找更近者)
幫忙就其所知的k_bucket tree，去詢問the
target node。之後、再將結果回傳。
4. 最後，就重複步驟1.~3.，ㄧ直問下去，直到找
到或確定Fail為止，Lookup結束。
我們DFCS演算法的優點如下：
1. 充分利用原先Lev-0的優點，有效降地詢問成本
(Lookup Latency)：根據實驗顯示，每個被詢問
的節點被詢問時，先查看其Level-0層的k_bucket
資訊，常直接便找到target node，因此可以有效
降地許多詢問成本。如下圖所示：
1’2’
Lev-2：
Lev-1：t1,…
Lev-0：to,…
t2’：
t2’
Kad. Cost：C0+C0+C1+C0
Coral Cost：C2+C2+C1(…)+C0
DFCS Cost：C2+C2+C0
Kad. Cost > Coral Cost > DFCS Cost
2. 利用各節點的Level-2及Level-1的資訊，進一步
降地詢問成本：當要由一層，切往上切換到另一
層k_bucket tree，去繼續詢問時，就由詢問者先
將自己的上一層所知的，是否有比自己目前所在
的這層k_bucket tree更新後所知的資訊，更近目
標節點(target node)？若是，才切換。否則、應由
之前提供最近節點的資訊給我的那個節點的上一
層，回傳給我其所知是否有跟我在同一個Cluster
