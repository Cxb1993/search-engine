slow. In the literature, there are two methods used 
to overcome this problem. One resorts to the 
technique of selective encryption just for the 
important data. Another is to redesign the entropy 
code to further make itself has the encrypting and 
error-correcting capacities at the same time. 
However, most the previous work in the literature, 
only two capabilities, compression and encryption, or 
compression and error-correction, can be achieved. 
In this project, first we will propose 
 A novel Huffman coding/decoding algorithm with the 
capability of encryption, and its performance 
evaluation in compression and security. 
 Novel coding/decoding algorithms for the error-
resilient variable-length codes and their performance 
evaluation in compression and error-correction. 
 A novel coding/decoding algorithm for the error-
correcting arithmetic code and its performance 
evaluation in compression and error-correction. 
Then, based on the result of our previous work – 
joint source-channel decoding scheme and the result 
of previous work in the literature– joint source-
channel coding scheme, to overall evaluate the 
performance of the system in compression, security, 
and error-correction. 
 
英文關鍵詞： entropy code, entropy coding, entropy decoding, 
variable-length code, reversible variable-length 
code ,variable-length error- correcting code, 
arithmetic code, joint source/channel coding, joint 
source/channel decoding 
 
 Abstract 
With the advancement of the technology in wireless communication, people can quickly join 
in a video conference in anywhere through their mobile device. Usually, the tremendous quality of 
video data must be entropy coded and the encoded video data will be protected by encryption 
from theft for secure communication. Finally, the encrypted data will be further protected by a 
channel code to enhance error-resistance against noise. However, it’s not practical to encrypt the 
encoded video data directly since the quantity of the encoded video data is still relatively large to 
always make the encryption very slow. In the literature, there are two methods used to overcome 
this problem. One resorts to the technique of selective encryption just for the important data. 
Another is to redesign the entropy code to further make itself has the encrypting and 
error-correcting capacities at the same time. However, most the previous work in the literature, 
only two capabilities, compression and encryption, or compression and error-correction, can be 
achieved. 
In this project, first we will propose 
 A novel Huffman coding/decoding algorithm with the capability of encryption, and its 
performance evaluation in compression and security. 
 Novel coding/decoding algorithms for the error-resilient variable-length codes and their 
performance evaluation in compression and error-correction. 
 A novel coding/decoding algorithm for the error-correcting arithmetic code and its 
performance evaluation in compression and error-correction. 
Then, based on the result of our previous work – joint source-channel decoding scheme and 
the result of previous work in the literature– joint source-channel coding scheme, to overall 
evaluate the performance of the system in compression, security, and error-correction. 
 
Keywords：entropy code, entropy coding, entropy decoding, variable-length code, reversible 
variable-length code ,variable-length error- correcting code, arithmetic code, joint source/channel 
coding, joint source/channel decoding 
 
 
 及強軔加密(encryption with enough security)能力之熵碼(entropy codes), 例如霍夫曼碼
（Huffman code）及算術碼（arithmetic code）, 為本計畫之重點。 
在一個頻寬有限且錯誤率比較高的無線通道(wireless channel)裏： 
首先，音訊、影像、或視訊資料都得透過訊源編碼（source coding）技術，以降低其龐
大之資料量。霍夫曼碼及算術碼是兩種廣範地被採用之熵碼。 
 霍夫曼碼：許多圖像或視訊壓縮標準，例如：JPEG、 MPEG-1、MPEG-2、H.263++ 等，
都採用這類變動長度碼（ Variable Length Code，VLC）。 
 算術碼：JPEG200 及 H.264/AVC 壓縮標準採用。 
然而，無論採用霍夫曼碼或算術碼編碼後之位元串流（bit-stream），有以下兩個缺點： 
1. 其未提供加密功能，因此機密資料容易外流； 
2. 且當傳輸通道有雜訊時，相當不具有抗錯（error-resilience）能力，也就是說，在傳送
的位元串流中，僅僅只有一個位元發生錯誤，對解碼器來說，就足以造成一連串的解碼
錯誤，此現象即所謂錯誤蔓延（error-propagation）。 
尤其，如果將位元串流先行加密再傳送，對接收端來說更不允許有任何位元發生錯誤,否則
不論合法或非法接收者皆不能取得正確訊息。 
接者，為解決這個問題，通常對於壓縮及加密過的資料會反過來加入一些多餘訊息
（redundancy），即所謂通道編碼（channel coding），藉以保護壓縮及加密過的資料。 
然而，即使壓縮過的多媒體資料，其資料量仍相當龐大，直接加密顯然不切實際，因
所耗時間太大。文獻上採取部份加密技術[1]或對碼本身重新設計[2-4]。後者技術, 利用碼
殘留較多剩餘訊息(redundancy)，讓碼本身除了具有加密功能[3-4]外，亦具有些許錯誤更
正能力[5-6](可視作一弱通道碼)，如再串接一較強通道碼，如圖一所示[7]，構成一整合式
訊源編碼，通道編碼,及加密系統，其適合行動裝置在無線網路環境下傳輸多煤體資料。 
 
二、研究方法與結果 
 
我們所提出的具有加密功能之整數型算數碼的編解碼演算法，其簡述如下： 
以整體的架構圖，如圖二所示，我們將其分成改良式整數型算數碼的編解碼、金鑰等二大
部份作說明。 
 主要構思 
假設一個文章由 A、B、C 三種符號組成，每種符號在文章中出現的機率分別為 0.5, 0.3,及
0.2。其原有 Entropy  
E = -0.5log0.5-0.3log0.3-0.2log0.2 = 1.485475。 
  
 金鑰產生方法： 
用亂數產生器（Pseudo-Random Bit Generator）產生二元序列 K (128 或 256 位元)，此為整
個系統之起始金鑰，隨後利用 SHA-256 演算法產生第一組 128 位元的雜湊函數值 H1，接者
將第一組雜湊函數值與 K 合併，再餵給 SHA-256 演算法產生第二組雜湊函數值 H2，也就
是 Hi = SHA-256(Mi) 及 Mi = K||H1||H2||…||Hi-1 (M1= K, M2=K||H1, M3=K||H1||H2, and so 
on ) 。最後金鑰向量 KV = H1||H2||…||HT (T 為雜湊函數 SHA-256 所執行次數)，其 KV 裏
的位元總數(128T)要大於或等於 3N (N 為符號序列的長度），金鑰向量裏每三個位元用來
決定每次編碼一個符號時，所有符號所分配之區間（Interval）如何調整。 
 
 具有加密功能之整數型算數碼的編碼： 
Step 1. 以 ASCII code (共 256個符號) 和 EOF (End Of File) 符號為編碼的字集 (共 257
個符號)，對欲編碼之資訊以符號為單位進行編碼。 
Step 2. 在預編碼的資料上，於編碼前先進行統計各符號在資料中所出現的次數，假設未
出現的符號總數等於 D，則訊息總符號數等於 257-D，因此，各符號出現次數除以訊息總符
號數即為此符號之出現機率。 
Step 3. 依照傳統算術編碼演算法來編碼，但所不同的是，編碼過程中會根據金鑰向量(Key 
Vector; KV)裏的值(一次取三個位元)，如表一所示，來決定是否(key值為 000表示所有符
號所分配之區間（Interval）維持不調整，其它表示需調整)及如何變動各符號原先所分配到
的區間大小及位置，調整方法如 Step 4所述。 
Step 4. 圖三(a)所示，Key值為 001，僅增加一區間大小，即將出現機率最高之符號 A當下
所分配的區間大小加 1、EOF 符號所分配的區間大小減 1，並將所有介於前述兩個符號間的
其它符號各自所對應區間其位置往 EOF 符號方向位移 1(shift one)。圖三(b)所示，Key值為
101，變動兩區間大小，即將出現機率最高之符號 A及出現機率第三高之符號 C 當下所分配
的區間大小均加 1、EOF 符號所分配的區間大小減 2。 
Step 5. 最後，當整個資訊都編碼完成後，再對 EOF 符號作編碼。 
 
 具有加密功能之整數型算數碼的解碼： 
解碼端只要擁有系統之起始金鑰 K，即能產生金鑰向量 KV，就能正確地調整區段並成功地
解出原有資料。 
 Integer Implementation,” in Proc. of the 11th IEEE International Symposium on 
Communications and Information Technologies, Hangzhou, China, Oct. 12-14, 2011, pp. 
518-521. 
3. Yuh-Ming Huang and Sheng-Chi Wu, “The Construction of Binary Huffman Equivalent 
Codes with a Greater Number of Synchronizing Codewords,” to appear in Int. J. Ad Hoc and 
Ubiquitous Computing, 2012. 
4. 林郁婷, “A Study of Low-complexity Joint Source-Channel Turbo Decoding for Serially 
Concatenated Arithmetic Codes and Convolutional Codes,” 暨大資工所碩士論文, July 
2010. 
5. 賴姿婷, “A Study of Low-complexity Joint Source-Channel Turbo Decoding for Serially 
Concatenated Variable Length Codes and Convolutional Codes,” 暨大資工所碩士論文, July 
2010. 
6. 黃信凱, " A Study of Sequential MAP Decoding of Variable Length Codes with Self 
synchronization Strings " 暨大資工所碩士論文, Jul. 2011 
 
四、 參考文獻 
[1] S. Lian, Z. Liu, and H. Wang, “Secure Advanced Video Coding Basedon Selective 
Encryption Algorithms,” IEEE Transactions on Consumer Electronics, vol. 52, vo. 2, pp. 
621-629, May. 2006. 
[2] J. Zhou, Z. Liang, Y. Chen, and O. C. Au, “Security Analysis of Multimedia Encryption 
Schemes Based on Multiple Huffman Table,” IEEE Signal Processing Letters, vol. 14, no. 3, 
pp. 201-204, Mar. 2007. 
[3] J. Wen, H. Kim, and J. D. Villasenor, “Binary arithmetic coding with key-based interval 
splitting,”IEEE Signal Processing Letters, vol. 13, pp. 69–72, Feb. 2006. 
[4] M. Grangetto, E. Magli, and G. Olmo, “Multimedia selective encryption by means of 
randomized arithmetic coding, “ IEEE Transactions on Multimedia, vol. 8, no. 5, pp. 
905-917, Oct. 2006. 
[5] P. Teekaput and S. Chokchaitam, “Protecting Embedded Error Detection Anthrnetic Coding 
from Eavesdroppers,” ICCE International Conference on Consumer Electronics, pp. 59-60, 
Jan. 2005. 
[6] P. Teekaput and S. Chokchaitam, “Secure Embedded Error Detection Arithmetic Coding,” 
ICITA International Conference on Information Technology and Applications, Vol. 2, pp. 
568-571, July 2005. 
[7] Z. Li, Q. Sun, Y. Lian, and C. W. Chen, “Joint Source-Channel-Authentication Resource 
Allocation and Unequal Authenticity Protection for Multimedia Over Wireless Networks,” 
IEEE Trans on Multimedia, vol. 9, no. 4, pp. 837-850, Jun. 2007. 
表 Y04 
(一) 
報告人姓名  
黃育銘 
 
服務機構 
及職稱 
 
暨南國暨大學資訊工程學系 
副教授 
     時間 
會議     
地點 
 100.10.12 – 100.10.14 
杭州,大陸 
本會核定 
補助文號 
 
計畫編號: NSC 99-2628-E-260 -010 
會議 
名稱 
 (中文)  
 (英文) The 11thIEEE International Symposium on Communications and 
Information Technologies (ISCIT 2011) 
 
發表 
論文 
題目 
 (中文)  
 (英文) Yuh-Ming Huang and Yin-Chen Liang, “A Secure Arithmetic Coding 
Algorithm Based on Integer Implementation”. 
報告內容應包括下列各項： 
一、參加會議經過與心得 
 
ISCIT 會議是亞太地區輪流主辦的國際會議，232篇投稿論文，錄取106篇，論文接
受率大約45.68%。今年主辦單位:浙江大學，其學者在通訊領域的研究相當權威。 
 
A. 聆聽大會專題演講心得： 
 
“Global Collaboration for innovative Cognitive Systems”  
Speaker: Prof. Joseph Mitola III, Fellow of IEEE, Vice President for Research 
Enterprises Stevens Institute of Technology 
Wednesday, October 12, 2011, 10:00 – 11:00 
“Going Green and Global for a Golden Future ?” 
Speaker: Prof. Tariq S. Durrani, Fellow of IEEE, University of Strathclyde, UK 
Wednesday, October 12, 2011, 11:30 – 12:30 
 
“Green and Cognitive Communications for the Future” 是今年會議的主題, 除了
以上兩場專題演講, 另一Industrial Forum: Plenary Special Panel “Cognitive Radio 
Standards and Regulation”, 及多場論文發表主題: “Energy-efficient Green 
Communications and Networking” and ”Cognitive Radio Network”, 均在探討綠
能及認知通訊。 
表 Y04 
(二) 
報告人姓名  
黃育銘 
 
服務機構 
及職稱 
 
暨南國暨大學資訊工程學系 
副教授 
     時間 
會議     
地點 
 100.10.15 – 100.10.17 
上海,大陸 
本會核定 
補助文號 
 
計畫編號: NSC 99-2628-E-260 -010 
會議 
名稱 
 (中文)  
 (英文) The 4th International Congress on Image and Signal Processing (CISP 
2011), Shanghai, China, October 15-17, 2011. 
發表 
論文 
題目 
 (中文)  
 (英文) Yuh-Ming Huang and Pei-Wun Jhan, “Two Improved Data Hiding 
Schemes”. 
報告內容應包括下列各項： 
二、參加會議經過與心得 
 
CISP 會議是每年均在大陸舉辦的國際會議，參與人員多達500位以上，論文接受率
大約是50%。 
 
A. 聆聽大會專題演講心得： 
 “Hardware Advances in Cryptography” 
Speaker: Prof. Thanos Stouraitis, Fellow of IEEE, President-Elect of IEEE Circuits and 
Systems Society 
Wednesday, October 15, 2011, 08:45– 09:30 
演講內容介紹了 Finite field 之實作技巧及硬體架構, 例如: systolic architecture for 
cryptography 及 systolic Montgomery multiplication. 也介紹了最新加密之硬體架構: Dual 
-field implementations and Dual-field RNS implementations.  
“Brain Decoding: State of the Art and Future Challenges” 
Speaker: Prof. Seong-Whan Lee, Fellow of IEEE, Hyundai-Kia Motor Chair 
Wednesday, October 15, 2011, 09:30 – 10:15 
演講內容介紹了 
 What is Brain decoding? 
 How to Measure Brain Activity? Functional magnetic resonance (FMRI) and  
ElectroEncephaloGraph (EEG) 
 How to Decode Human Brain? Case study: Brain decoding with FMRI data. Machine 
learning techniques are now changing the way neuroimaging data are analyzed 
 Applications of Brain Decoding: Brain-Computer Interface (BCI) – Translation of human 
intentions into a technical control signal without using activity of muscles or peripheral 
nerves, brain disease prediction and diagnosis, predicting mental states, and lie detection. 
A Secure Arithmetic Coding Algorithm  
Based on Integer Implementation 
 
Yuh-Ming Huang  
Dept. of Computer Science and Information Engineering 
National Chi Nan University 
Puli, Nantou, Taiwan, ROC 
ymhuang@csie.ncnu.edu.tw 
Yin-Chen Liang 
Dept. of Computer Science and Information Engineering 
National Chi Nan University 
Puli, Nantou, Taiwan, ROC 
s94321908@ncnu.edu.tw 
 
Abstract—This paper presents a novel modification of integer 
arithmetic code, which performs compression and encryption at 
the same time. It is quite different from the randomized 
arithmetic code (RAC), the interval splitting arithmetic code 
(ISAC), and the secure arithmetic code (SAC). In security, we 
apply the Pseudo-Random Bit Generator (PRBG) and the Secure 
Hash Algorithm (SHA-256) to construct the key vector. Each bit 
of the key vector known to both the encoder and decoder is used 
to determine whether the source intervals respectively allocated to 
each of the different symbols are needed to be adjusted prior to 
encoding each new symbol. Experimental results indicate that 
our proposed code does not compromise the coding efficiency. 
Keywords-arithmetic coding; randomized arithmetic coding; 
secure arithmetic code; encryption; data compression;  
pseudorandom bit generator ; Secure Hash Algorithm 
I.  INTRODUCTION  
The demand in joint compression and encryption is 
growing more conspicuous with the development in 
multimedia applications, such as digital rights management [1].  
There are three approaches to achieve both compression 
and encryption. First, the simplest approach is to use a 
traditional entropy code for compressing, and then the 
compressed multimedia data is totally encrypted by a 
traditional cryptographic algorithm such as the Data 
Encryption Standard (DES) [2] or the Advanced Encryption 
Standard (AES) [3]. This approach is poorly suited to real-time 
multimedia applications since its computational complexity is 
extremely high. Second, the computational complexity can be 
reduced significantly by the selective encryption approaches 
[4-5] since they only encrypt the important portion of the 
multimedia data. Third, the entropy code, such as the Huffman 
code or the arithmetic code, is modified to possess the 
functionality of encryption. In this paper, we focus on the third 
approach. 
In Huffman coding, Wu and Kuo [6-8] proposed a multiple 
Huffman table (MHT) scheme that alternately uses the multiple 
statistical models in a secret order. The advantage of this kind 
of scheme is to offer a certain level of security and an 
uninfluenced coding efficiency simultaneously. Unfortunately, 
MHT method is just secure against ciphertext-only attack, and 
is vulnerable to know-plaintext attack and chosen- plaintext 
attack [9].  
In arithmetic coding (AC) [11-12], Grangetto et al. [13] 
presented a RAC based on randomly swapping of two intervals 
during the process of binary AC and it was utilized to encrypt 
the JPEG2000 coded images [10]. According to a secret key, 
Kim et al. [14-15] presented a binary ISAC to offer the security 
by splitting the interval of each symbol. Jakimoski et al. [16] 
analyzed that the key-based interval splitting AC is vulnerable 
to known-plaintext attack and pointed out that the randomized 
arithmetic coding is not as secure as the authors claimed. Kim 
et al. [17] provided a SAC which applies two permutations to 
the input symbol sequence and the output symbol sequence for 
increasing the security. However, Zhou et al. [18-20] and Sun 
et al. [21] independently proved that it is still not secure under 
the chosen-plaintext attack and known-plaintext attack. 
Unfortunately, the splitting AC will compromise the coding 
efficiency. It was shown in the Table 1 of [15] or in the Table 
VI of [17]. This motivates us to design a new secure arithmetic 
code without influencing the coding efficiency. 
In this paper, we provide a novel scheme to adjust the sizes 
of intervals associated with the chosen symbols, which are 
determined by a secret key. Our proposed technique can offer a 
high degree of security and does not compromise the coding 
efficiency. The paper is organized as follows. Section II briefly 
introduces the integer AC. Our proposed scheme is presented 
in Section III. The evaluation of the security and the coding 
efficiency is discussed in Section IV. Finally, some concluding 
remarks are made in Section V.   
II. ARITHMETIC CODING BASED ON INTEGER 
IMPLEMENTATION 
For a source with a sequence of symbols (x1, x2,…,xN), 
where xn∈ A, 1≤ n ≤ N and A is the set of ASCII symbols. The 
principle of AC is to recursively partition a source interval [L, 
U) into non-overlapped subintervals according to the source 
symbol probabilities. The initial source interval is set to the 
unit interval [0, 1) of real numbers. Once a new symbol is 
encoded, one of those subintervals is selected as the new 
source interval according to the value of this new symbol. If 
this new symbol is the last symbol, the new source interval is 
the code interval, which is the interval a tag (any real number 
in the interval) will reside. The binary representation in finite 
length of this tag is the arithmetic code of the symbol 
sequence. For sources with highly skewed source symbol 
probabilities and for sources with longer sequence length, 
The 11th International Symposium on Communications & Information Technologies (ISCIT 2011)978-1-4577-1295-1/11/$26.00©2011IEEE 518
 Hi = SHA-256(Mi), where 1≤ i ≤ T and H0 denotes 
an empty bit string. 
Step 4) Repeat Step 3 for T times until the size of the bit 
sequence H1||H2||…||HT  (denoted as KV) is not less 
than N. KV is used as the key vector for the secure 
AC. 
C. Encooder 
Initially, let source interval  be equal to [0, W-1]. 
For i = 1 : N-1 
{ 
Divide the source interval as the traditional integer AC 
does. 
If KV[i] = 1, Then  
{ 
Increase the size of the source interval associated with 
the symbol with the largest probability by one. 
Choose the source interval which satisfies the following 
two conditions: 1) its size is greater than 1, 2) the 
probability of the corresponding symbol is smallest, then 
decrease the size by one. 
} 
// KV[i] denotes the i-th bit of the key vector KV. 
Encode the observed symbol xi.  
Update the source interval according to the current symbol 
encoded. 
} 
TABLE I. EIGHT DIFFERENT ADJUSTMENT POLICIES USED IN AC 
Key bits Description 
000 The size of each of the source intervals is unchanged 
001 The size of the source interval associated with the symbol with the highest occurring frequency is increased by one 
011 The size of the source interval associated with the symbol with the second highest occurring frequency is increased by one 
010 The size of the source interval associated with the symbol with 
the third highest occurring frequency is increased by one 
110 
The size of each of the source intervals respectively associated 
with the symbols with the highest  and the second highest 
occurring frequency is increased by one 
111 
The size of each of the source intervals respectively associated 
with the symbol with the second highest  and the third highest 
occurring frequency is increased by one 
101 
The size of each of the source intervals respectively associated 
with the symbols with the highest  and the third highest 
occurring frequency is increased by one 
100 
The size of each of the source intervals respectively associated 
with the symbols with the top three highest  occurring 
frequencies is increased by one 
 
The proposed encoding algorithm can be easily extended 
to the version that the size of each of two or more source 
intervals is increased by one. Table I shows that three key bits 
are required at a time to determine the adjustment policy for 
each of the source intervals once a symbol to be encoded. Fig. 
2 gives two examples. In Fig. 2 (a), the size of the interval 
associated with the symbol A is increased by one, whereas the 
size of the interval associated with the symbol EOF is 
decreased by one. Other interval size is unchanged. The 
positions of all of the intervals are altered slightly. In Fig. 2 
(b), the size of each of the intervals respectively associated 
with the symbol A and the symbol C is increased by one, 
whereas the size of the interval associated with the symbol 
EOF is decreased by two. Other interval size is unchanged. 
The positions of all of the intervals are altered slightly. 
D. Decoder 
In the decoder, once the secret key K is known, the key 
vector KV can be generated successfully. Then, the symbol 
sequence can be decoded correctly just by mimicking the 
encoder algorithm. 
 
Figure 2.  Alternative ways to adjust the size of each of the 
source intervals. 
IV. EVALUATIONS 
In this section, we first show the experimental results 
respectively obtained by the traditional integer AC and the 
modified integer AC, then discuss the security of our proposed 
scheme under the three known attacks. 
A. Coding Efficiency 
The proposed algorithm has been tested on various source 
benchmarks taken from the Canterbury Corpus file set 
(available at http://corpus.canterbury.ac.nz). These 
benchmarks were designed specifically for testing new 
compression algorithms. 
Table II shows that our proposed scheme does not 
compromise the coding efficiency. In worst case, the 
compression ratio of our proposed scheme is equal to that of 
the traditional one.  
B. Cryptanalysis 
We evaluate the security of our proposed scheme under the 
ciphertext-only attack, the known-plaintext attack, and the 
chosen-plaintext attack.  
1) Ciphertext-only attack 
The ciphertext-only attack is the most common attack. An 
attacker can break the encryption scheme according to the 
encrypted bit stream. Assume the length of the input symbol 
sequence is equal to N. The complexity of breaking the key 520
                                 978-1-4244-9306-7/11/$26.00 ©2011 IEEE                                 1784
2011 4th International Congress on Image and Signal Processing                       
Two Improved Data Hiding Schemes  
Yuh-Ming Huang  
Dept. of Computer Science and Information Engineering 
National Chi Nan University 
Puli, Nantou, Taiwan, ROC 
ymhuang@csie.ncnu.edu.tw 
Pei-Wun Jhan 
Dept. of Computer Science and Information Engineering 
National Chi Nan University 
Puli, Nantou, Taiwan, ROC 
s98321535@ncnu.edu.tw
Abstract—The meaning of data (information) hiding is to embed 
the secret information into a cover host, such as an image. 
Usually, the naked eye of the people cannot perceive any change 
when the image is modified slightly. The evaluation of data 
hiding schemes should be measured by the distortion (or called 
Mean Square Error; MSE) and the embedding rate (the average 
number of bits embedded in a cover pixel). In this paper, we 
propose two improved data hiding schemes. One is to improve 
the EMD (Exploiting Modification Direction)-based data hiding 
algorithm to have higher stego-image quality. The other is to 
improve the Matrix encoding-based data hiding algorithm by 
using the idea of Hamming+1 to further improve the stego-image 
quality. Both proposed improved schemes are verified to be 
correct through the theoretical analysis and the experiment. 
Keywords- EMD; matrix encoding; magic matrix; (5,3) linear 
code; linear block code; data hiding; information hiding; 
Hamming+1; distortion; embedding rate 
I. INTRODUCTION  
With the rapid growth in digital technology, it is 
convenient for us to communicate with each other via a 
variety of communications products. The multimedia data 
flows, such as image and video, have been around us 
everywhere. Since that it is not easy for the naked eye to 
detect any anomaly in a picture with a little distortion. Data 
hiding technology [1] can be used to hide the secret 
information in a picture.  
In 2006, Zhang et al. proposed a data hiding scheme by 
exploiting modification direction (EMD) [2], in which each 
secret digit in a (2n+1)-ary notational system is carried by n 
cover pixels and, at most, only one pixel is increased or 
decreased by 1. Hence, this scheme can provide high stego-
image quality, but limited hiding capacity. Theoretically, this 
scheme is optimal in terms of the stego-image quality for a 
fixed embedding rate. In 2007, Chang et al. [3] showed that 
the embedding rate is bounded by log25/2. Besides, by using a 
technology of two-stage embedding, an improved EMD hiding 
method was proposed to increase the embedding rate. 
Basically, a trade off exists between the embedding rate and 
the hiding capacity [3-7]. In 2010, Chang et al. [7] extended 
the work of [2] and proposed a flexible EMD-based data 
hiding scheme. 
Alternative way of data hiding, called matrix encoding, 
was early proposed by Crandall [8] in 1998. Matrix encoding 
was used in the well-known steganographic algorithm F5 [9] 
and applied to large payload applications [10]. Relations 
between the linear codes and the steganography were studied 
in [11]. In 2007, Zhang et al. [12] proposed the idea of 
Hamming+1 to increase the embedding rate for matrix 
encoding. Further improvement in embedding rate and stego-
image quality was respectively proposed in [13] and [14]. 
In this paper, we propose two data hiding schemes 
respectively for improving the methods of [7] and [14] with 
lower distortion. The paper is organized as follows. Section II 
introduces our proposed schemes. The experimental results are 
shown in section III. Finally, some remarks on future work are 
made in Section IV. 
II. TWO IMPROVED DATA HIDING SCHEMES 
A. EMD-Based 
Based on the method of Zhang and Wang [2], Chen et al. 
[7] proposed a data hiding scheme with a different extraction 
function, as shown in Eq. (1), to increase the hiding capacity. 
0 1 2
1 2 1 2( , ) ( ) mod , 
where 0 255 and 1 2.     i
f g g g n g n n
g i
= × + ×
≤ ≤ ≤ ≤  (1) 
 Figure. 1. The f values generated with n = 2. 
 
0 1
1 2 1 2( , ) ( ) mod 2   
nf g g g n g n= × + ×
 (2) 
According to the Eq. (1), the function f values are 
depicted, as shown in Fig. 1. Those f values, enclosed in a 
square, are mutually different and within [0,n2-1] in any n×n 
sliding window. The advantage of this method is that it is 
flexible to choose different n which depends on the 
requirement of large hiding capacity or high stego-image 
quality. But, we observe that there exist two flaws for this 
method. One is that the value of log2n2 is not necessary an 
integer. Another is that, for the right red box in Fig. 1, the f 
value 1 nearest to the f value 2 is on the left, not on the upper 
or lower right corner. Here, we propose another different 
extraction function, as shown in Eq. (2), and adopt an irregular 
                                                                                                                                          1786
 
Recently, based on the (5, 3) linear block code and the idea of 
Hamming+1 [12], Lin et al. [14] proposed another data hiding 
scheme with the same embedding rate and the better stego-
image quality. In the proposed scheme, we modify the 
exclusive-or equations (4-1) ~ (4-3) adopted in [14] by double 
using the idea of Hamming+1 to further improve the stego-
image quality. The modified exclusive-or equations are shown 
in equations (5-1) ~ (5-3). 
 
Table I. Standard array for a (5, 3) code 
data 000 
(d0) 
001 
(d1) 
010 
(d2) 
011 
(d3) 
100 
(d4) 
101 
(d5) 
110 
(d6) 
111 
(d7) 
Coset Leader 
 00000 
(e0)(c0) 
00111 
(c1) 
01001 
(c2) 
01110 
(c3) 
10010 
(c4) 
10101 
(c5) 
11011 
(c6) 
11100 
(c7) 
00001 
(e1) 
00110 01000 01111 10011 10100 11010 11101 
00010 
(e2) 
00101 01011 01100 10000 10111 11001 11110 
00011 
(e3) 
00100 01010 01101 10001 10110 11000 11111 
 
1) (5, 3) linear block code 
 
For a (5, 3) linear code with the generator matrix 
53
00111
01001
10010
×
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢
⎣
⎡
=G
.
 The standard array for this code is shown 
in Table I. Any vector v ∈ GF(2)5, there must exist a codeword 
ci and a coset leader ej, such that  
v = ci + ej = di×G + ej  = di×G + (0, 0, 0, ej0, ej1). That is, 
the vector v can be obtained once we know di, ej0, and ej1. 
For simplifying the notation, we denote each di as (d1, d2, d3).  
 
2) Embedding  
 
Step 1: The original gray-level image is partitioned into 
several blocks and each block contains six pixels of which the 
pixel values are respectively equal to p1, p2, …, p6 and the 
binary representation of pi is pi7pi6pi5pi4pi3pi2pi1pi0,  where 
1 ≤ i ≤ 6.  
Step 2: The hiding data represented in a binary bitstream 
b1b2…bN is partitioned into several blocks and each block 
contains six bits s1s2s3s4s5s6. 
Step 3： For i = 1 to N/6 {For each block of secret bits 
s1s2s3s4s5s6, let v = (s1, s2, s3, s4, s5) and find the di and the 
ej by the equation v = di×G + ej. Then, some of the pixel 
values, p1, p2, …, p6, will be increased or decreased by 1 to 
make the equations (5-0) ~ (5-3) hold.  
} 
 
1 1 4 0 0
2 1 5 0 1
3 1 6 0 6
                                    ( 4 -1)
                                    ( 4 -2 )
                                     ( 4 -3 )
j
j
p p e
p p e
p p s
⊕ =
⊕ =
⊕ =
 
1 0 2 0 3 0 1 2 3
1 1 2 1 4 0 0
2 1 3 1 5 0 1
3 1 4 1 6 0 6
( , ) 0                      (5 -0 )
                           (5-1)
                          (5-2 )
                           (5-3)
j
j
d p p p d d d
p p p e
p p p e
p p p s
=
⊕ ⊕ =
⊕ ⊕ =
⊕ ⊕ =  
 
In Eq. (5-0), d(p10p20p30, d1d2d3) denotes the Hamming 
distance between p10 p20 p30 and d1 d2 d3. 
 
3) Extracting  
 
Step1 ： The stego-image is partitioned into several 
blocks and each block contains six pixels of which the pixel 
values are respectively equal to p1, p2, …, p6 and the binary 
representation of pi is pi7pi6pi5pi4pi3pi2pi1pi0,  where 1≤ i ≤ 6. 
Step2：For i = 1 to N/6 {First, we get d1, d2, d3, ej0, and 
ej1 by setting d1 = p10, d2 = p20, d3 = p30, ej0 = p11⊕p21⊕p40, 
and ej1 = p21⊕p31⊕p50. Then, we get the secret bits (s1, s2, s3, 
s4, s5) = (d1, d2, d3)×G + (0, 0, 0, ej0, ej1). Finally, s6 = p31⊕
p41⊕p60. } 
 
Example 2. 
 
z Embedding 
Suppose (p1, p2, p3, p4, p5, p6) = ((100)10, (100)10, (220)10, 
(151)10, (95)10, (90)10) = ((01100100)2, (01100100)2, 
(11011100)2, (10010111)2, (01011111)2, (01011010)2) and 
(s1s2s3s4s5s6) = (101110). First, we find di  = (d1d2d3) = (101) 
and ej = (0, 0, 0, ej0, ej1) = (0,0,0,1,0) by letting v = 
(1,0,1,1,1). Hence, p10 ≠ d1, p20 = d2, p30 ≠ d1, p11⊕p21⊕p40 = 1, 
p21 ⊕ p31 ⊕ p50 = 1, and p31 ⊕ p41 ⊕ p60 = 1. Then, we 
complement the least significant bit of p1 and decrease the 
pixel value of p3 by 1 to make the equations (5-0) ~ (5-3) hold.  
That is, (p1, p2, p3, p4, p5, p6) is now modified as ((101)10, 
(100)10, (219)10, (151)10, (95)10, (90)10) (= ((01100101)2, 
(01100100)2, (11011011)2, (10010111)2, (01011111)2, 
(01011010)2)) to complete the hiding of the secret bits 101110. 
Remark: It needs to modify three pixels (complement p10, p30, 
and p50) in the original method of [14]. 
 
z Extracting 
According to the six pixel values (01100101, 01100100, 
11011011, 10010111, 01011111,  01011010) and the 
equations (5-1)~(5-3),  we first obtain (d1, d2, d3) = (p10, p20, 
p30) = (1,0,1), ej0 = p11⊕p21⊕p40 = 0⊕0⊕1 = 1, and ej1 = p21
⊕p31⊕p50 = 0⊕1⊕1 = 0, then we get the secret bits (s1, s2, s3, 
s4, s5) = (1, 0, 1)×G + (0, 0, 0, 1, 0) = (1, 0, 1, 1, 1). Finally, s6 
= p31⊕p41⊕p60 = 1⊕1⊕0 = 0. 
 
4) Theoretical analysis of  the distortion 
 
The embedding rate R is equal to 1 (= 6/6).  
The derivation of the average distortion is similar to that of 
[14], here, we omit the detailed derivation. 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/01/31
國科會補助計畫
計畫名稱: 設計具有加密及抗錯能力之熵編解碼演算法及其在壓縮效能、安全性、及錯
誤更正效能之評估
計畫主持人: 黃育銘
計畫編號: 99-2628-E-260-010- 學門領域: 資訊安全
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
