Keyword：Programming Instruction、
Automatic Assessment, Model Checking, 
Computer-aided Instruction 
 
二、 緣由與目的 
程式設計的課程長久以來一直是
相關教育研究的重要議題。尤其程式
設計是非常重要的基礎課程，但卻也
是問題最多的一門課[1, 2]。許多研究
顯示初學者的學習障礙並非來自於程
式語言的語法語意[3-5]，而是難於理
解抽象的概念[1, 6]，以及不知道如何
結合習得的知識解決問題[7]。單純的
課程講授對學生的幫助有限，尚須配
合大量的練習才能讓初學者熟稔的應
用所學。因此，「做中學（learning by 
doing）」才是比較好的學習方式，它
讓初學者能夠透過練習具體的了解講
授的課程內容，這比被動的聽課更適
合程式語言的學習。 
更深入的發現，初學者的學習困
難，最典型的表現，就是反映在程式
除錯上。然而，在現有的教學環境下，
我們卻很少有機會觀察並輔導學生們
如何進行除錯[8]。這迫使他們一面要
構思如何撰寫程式解出問題，一面還
要嘗試讀懂程式編譯與執行時出現的
錯誤訊息。在兩方面的挑戰下，往往
修正了一個錯誤卻又產生其它新的錯
誤的現象屢見不鮮[8]。此一情況若未
能設法解決，不僅大幅降低程式練習
的功效，無形中還會徒增初學者的挫
折感。而挫折感是初學者的大敵，其
負面影響不容小覷[2]。 
因此，假若我們能透過某種技
術，更有效地掌握學生們程式除錯的
過程並予以協助，則其資訊不僅可以
作為教學參考，藉由協助除錯與診斷
的過程，更可以進一步地瞭解個別學
生的學習情況，進而給予適當的輔導
或練習教材。 
三、 結果與討論 
問題描述 
除錯是諸多概念與技巧的整體展
現[8-10]，對初學者而言，找到程式缺
陷要比修正缺陷困難，原因在於程式
除錯的技巧與策略還不純熟，以及對
問題缺乏認識。根據美國電機電子學
會和計算機協會的定義，軟體的錯誤
可分為三種不同層次，分別為錯誤
（ errors）、缺陷（ faults）與故障
（failures）。故障是缺陷在程式執行
時的外顯，而缺陷來自於人腦的錯
誤，詳細定義如下表： 
表一、錯誤的三個層次 
層 次 定  義 
錯誤 
Errors 
錯誤是人所造成的。它的另一
個 同 義 詞 是 「 失 誤 」
（mistake）。人們在撰寫程式
時，經常由於思慮不周或不小
心，而發生錯誤。錯誤傾向於
繁殖；例如，一個與需求有關
的錯誤，會在設計時被放大，
然後進一步延續到編碼。 
缺陷 
Faults 
缺陷是錯誤的結果。更準確的
說，缺陷是錯誤的外顯，存在
於表達之中，例如，文字紀錄、
系統分析圖、結構設計圖、原
始碼等。「瑕疵」（defect）是
它的同義詞；「臭蟲」也是。
缺陷可能不易發現，尤其是缺
期的屬性是否存在於系統所有的可能
狀態中，藉以判定是否符合規格描述
[17]。模型檢驗的一個重要優點是可以
提供產生反例的程式路徑[17-19]。當
模型檢驗器發現某筆資料執行所得的
結果不滿足特定規格的要求時，系統
會提供訊息將發生反例的執行路徑以
及相關的背景參數呈現出來，透過分
析反例路徑我們得以試圖瞭解缺陷的
位置與可能成因（如圖一所示）。 
程式設計除錯輔助系統 
綜合前面分析，本年度的計劃構
想，是結合自動程式評估系統與模型
檢驗方法，將前者的檢測方式以模型
檢驗技術加以置換，使得評估系統能
夠提供更精確的訊息，判斷程式出現
缺陷的位置。另一方面，針對我們教
學所用的範例程式，同樣可以利用模
型檢驗技術，預先將各種初學者容易
常犯的錯誤反例路徑，連同錯誤的成
因、除錯策略與解決方式等予以分析
歸納，整理成各種樣版錯誤模型，然
後結合前面判斷程式缺陷的資訊，即
可推論其背後可能的錯誤，幫助初學
者自我診斷學習上的盲點，同時提供
回饋資訊供教師教學上的參考，或針
對學生容易混淆、誤解的概念加強輔
導。 
四、 計畫成果自評 
為了完成本計畫的重要的核心，
亦即，協助學生診斷程式缺陷所在的
可能位置。我們建立了一套「具體－
符號測試（concolic testing）」系統。
這是一種新型態的軟體驗證工具，結
合了模型驗證與軟體測試的優點，有
系統地對於程式以測試的方式進行驗
證。其原理說明如附件一。有了此一
工具之後，我們便可利用它來檢驗初
學所撰寫的練習程式。 
在驗證的過程中，只要發現程式
中有某些行為表現不符預期，則系統
即可啟動自動除錯的機制，來協助初
學者尋找缺陷程式碼可能出現的位
置。我們依據具體－符號測試的精
神，提出了一套新的「具體－符號除
錯（concolic debugging）」演算法，能
夠根據錯誤案例（a failed test）所走過
的路徑，透過推理分析以及追加的測
試案例，來尋找出缺陷可能存在的位
置。詳細說明如附件二。整體系統運
作如下圖所示： 
 
圖二、程式設計除錯輔助系統 
為了驗證此一系統及方法的有效
性，我們進行了兩階段的實驗設計。
第一階段（實驗一）主要的目的，是
驗證具體－符號測試的涵蓋率，以瞭
解自動評估的成效。我們挑選了 15 支
大一新生常見的樣本程式進行測試，
發現平均涵蓋率達到 92.12%（標準差
tomorrow.2.c 1 0 50 98.00% 100.00% 
tomorrow.3.c 0 1 50 100.00% 98.00% 
triangle.1.c 0 1 40 100.00% 97.50% 
triangle.2.c 1 1 21 95.24% 95.24% 
triangle.3.c 1 1 39 97.44% 97.44% 
   
Average 94.29% 96.36% 
   
StdDev 8.92% 3.03% 
以上描述是本計畫所完成的主要
部分。受限於時間及人力因素，本計
劃原先所企圖更大的目標範圍：將所
發現的缺陷位置，透過教材樣版的分
析，反饋到教學上，以便讓學生（與
教師）知道在哪一部份的程式設計觀
念上出現問題。這一部分未能來得及
整合進來，留待將來的計畫再來實現。 
綜合以上所述，本研究初步已達
成當初計畫所規劃的目標。由於其實
用價值，未來我們希望能持續投入研
究，使本計畫的結果能更完整，開發
出使用更方便的系統，以貼近教學的
需要，之後將本計畫成果以學術論文
形式發表。 
 
五、 參考文獻 
 
[1] Butler, M. and Morgan, M. Learning 
challenges faced by novice 
programming students studying high 
level and low feedback concepts. 
ASCILATE 2007 Singapore, 992007), 
107. 
[2] Rodrigo, M., Mercedes, T., Baker, R. 
S., Jadud, M. C., Amarra, A. C. M., Dy, 
T., Espejo-Lahoz, M. B. V., Lim, S. A. 
L., Pascua, S. A. M. S. and Sugay, J. O. 
Affective and behavioral predictors of 
novice programmer achievement. ACM, 
City, 2009. 
[3] Gomes, A. and Mendes, A. J. An 
environment to improve programming 
education. ACM New York, NY, USA, 
City, 2007. 
[4] Lahtinen, E., Ala-Mutka, K. and 
Järvinen, H. M. A study of the 
difficulties of novice programmers. 
ACM, City, 2005. 
[5] Robins, A., Rountree, J. and 
Rountree, N. Learning and teaching 
programming: A review and discussion. 
Computer Science Education, 13, 2 
2003), 137-172. 
[6] Mayer, R. E. The psychology of how 
novices learn computer programming. 
ACM Computing Surveys (CSUR), 13, 1 
1981), 121-141. 
[7] 程尚文 and Shang-Wen, C. 使用
樣板教學於初階程式設計課程之探討; 
Teaching Programming Patterns in an 
Introductory Programming Course. 
Dissertation/Thesis, 國立中山大學; 資
訊管理學系研究所, 2009. 
[8] Murphy, L., Lewandowski, G., 
McCauley, R., Simon, B., Thomas, L. 
and Zander, C. Debugging: the good, the 
bad, and the quirky--a qualitative 
analysis of novices' strategies. ACM, 
City, 2008. 
[9] Ahmadzadeh, M., Elliman, D. and 
Engineering Notes, 30, 5 2005), 272. 
[28] Godefroid, P., Klarlund, N. and Sen, 
K. DART: Directed automated random 
testing. ACM, City, 2005. 
[29] Abreu, R., Zoeteweij, P. and Van 
Gemund, A. On the accuracy of 
spectrum-based fault localization. City, 
2007. 
[30] Eric Wong, W., Debroy, V. and 
Choi, B. A family of code 
coverage-based heuristics for effective 
fault localization. Journal of Systems 
and Software2009). 
[31] Jiang, B., Zhang, Z., Tse, T. and 
Chen, T. How well do test case 
prioritization techniques support 
statistical fault localization. IEEE, City, 
2009. 
[32] Hao, D., Xie, T., Zhang, L., Wang, 
X., Sun, J. and Mei, H. Test input 
reduction for result inspection to 
facilitate fault localization. Automated 
Software Engineering, 17, 1 2010), 5-31. 
[33] Renieres, M. and Reiss, S. Fault 
localization with nearest neighbor 
queries. City, 2003. 
[34] Wang, T. and Roychoudhury, A. 
Automated path generation for software 
fault localization. ACM, City, 2005. 
[35] Guo, L., Roychoudhury, A. and 
Wang, T. Accurately choosing execution 
runs for software fault localization. 
Springer, City, 2006. 
[36] Groce, A., Chaki, S., Kroening, D. 
and Strichman, O. Error explanation 
with distance metrics. International 
Journal on Software Tools for 
Technology Transfer (STTT), 8, 3 2006), 
229-247. 
 
Input: 
: a sequence of path conditions(PC) executed in the previous 
execution 
: a position of a PC in path beyond with PCs should not be 
negated 
Output: 
A set of generated test cases 
 { 
     
    WHILE  DO 
        //  is a symbolic path formula of  
        //  is kth path condition of  and  is executed 
first 
            // negate the path constraints 
                    // returns NULL if  is 
unsatisfiable 
        IF  is not NULL THEN 
            ; 
             
        END 
         
    END 
} 
圖四、具體－符號測試演算法[21] 
具體－符號測試係利用路徑限制來產生測試輸入的方式，理論上能達到相當
高的測試涵蓋率，相關的文獻顯示，具體－符號測試在中、小型的應用程式和函
式庫（程式碼約兩千行至六千行左右，如：GNU Coreutils [22]與 SGLIB [23]
 第一次執行： 
 由 L6進入函式 test_me()。Concolic Testing演算法首先會亂數給
定test_me中的x與y數值，例如： ， ，同時建立symbolic 
variable， 。 
 運行到 L7時，取得 與  
 運行到 L8時，因 ，所以跳到 L11結束；同時記錄略過 L8的路
徑限制為 ，找到進入 L8需滿足的條件為  
 第二次執行： 
 由 L6進入函式 test_me()。由於先前已取得進入 L8的滿足條件為
，因此依該條件給定 x與 y數值，如： ， 。 
 運行到 L7時，取得 與  
 運行到 L8時，取得路徑限制為  
 運行到 L9時，因 ，所以跳到 L11結束；同時記錄略過
L9的路徑限制為 ，找到進入 L9需滿足的條件為 
 
 第三次執行： 
 由 L6進入函式 test_me()。由於先前已取得進入 L9的滿足條件為
，因此依該條件給定 x與 y數值，
如：  
 運行到 L7時，取得 z=20與  
 運行到 L8時，取得路徑限制為  
 運行到 L9時，取得路徑限制為  
運行到 L10時發現錯誤（ERROR） 
圖六、範例程式的具體－符號測試執行流程 
附件二、具體－符號除錯（Concolic Debugging） 
正確案例與錯誤測試案例的品質與數量對於頻譜式缺陷定位有著微妙的影
響。由於頻譜式的定位方式係利用每個陳述式在正確與錯誤案例頻譜中出現的比
例來推斷其風險，因此測試案例的涵蓋率與數量都直接影響著缺陷定位的準確
性，[29-32]。越多的錯誤案例或許可以提升準確度，但是過多的正確案例未必
能提升準確度，有時甚至會降低頻譜式定位的準確度[29, 30]，當測試案例選擇
不當時，很容易發生低估具有實際缺陷的陳述式的風險（誤警，true-negative）
或高估非缺陷陳述式的風險（誤判，false-positive）。 
我們從本研究的文獻回顧的說明中知道實體－符號測試會探索受測程式的
分支路徑、蒐集各分支路徑上的限制條件，並且利用 SMT解題器解出這些限制的
滿足條件來自動產生測試資料。受到實體－符號測試演算法的啟發，我們提出了
一套新的缺陷定位方式──具體－符號除錯（concolic debugging），希望能改
善頻譜式缺陷定位的缺點。我們的演算法只須一則錯誤案例便可進行缺陷定位，
而不像頻譜式缺陷定位需要準備許多的錯誤案例與正確案例才能進行定位，其
次，我們不需要準備正確案例，因此不會發生如頻譜式缺陷定位因正確案例選擇
不當而降低定位的準確度 
 
圖七、路徑分支的差異可能是缺陷的位置 
使用實體－符號除錯進行缺陷定位時，我們首先會給定一個錯誤案例，然後
透過推演該案例的路徑條件來找到最近似的正確案例（圖七）。在文獻中我們發
現，錯誤案例頻譜與最近似的正確案例頻譜，他們兩者間的差異極可能是缺陷的
位置[33-36]，因此我們推測近似路徑的分支差異亦可能是缺陷存在的位置。具
體的演算法如圖八所示。 
Passed 
 
 
Failed Failed faulty block 
branch 
program path 
Illustration: 
Suspicious 
difference 
         
    END 
} 
圖八、實體－符號除錯演算法 
取得錯誤路徑的限制條件 
給定一個錯誤案例，我們能夠利用逐行執行的方式觀察該案例的執行路徑、
取得了各分支路徑的路徑條件（path conditions）與路徑限制式（path 
constraints）。 
 
 
(a) (b) 
圖九、實體－符號測試缺陷定位示意圖 
圖九(a)為程式碼，圖九(b)為其控制流程圖（CFG）。給定一個錯誤輸入
T1:<a=0>，該輸入的執行路徑為 P1:{L2,L5,L6,L8,L11,L12}，此時我們可以觀
察到造成故障的輸入所滿足的路徑限制為：  
邏輯否定運算與回溯路徑的路徑條件 
  
  
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/21
國科會補助計畫
計畫名稱: 新式自動程式評估與診斷系統
計畫主持人: 鄭炳強
計畫編號: 99-2221-E-110-049- 學門領域: 程式語言與軟體工程
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
本計畫由於受限於研究生人力，目前所開發出來之系統，只完成核心部分技術，
因此，距離實際可以推港或技術移轉尚有些許距離。 
未來系統完成後，預期對於學生程式設計教學會有實質性幫助。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
