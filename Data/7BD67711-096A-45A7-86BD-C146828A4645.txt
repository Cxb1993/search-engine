  2
expensive. 
In this work, we develop a baseball event detection system that integrates mid-level cues including scoreboard 
information and shot transition types to classify ten significant events. The event classifier is designed based on a BBN. 
Instead of using a large number low-level features as the evidences of the BBN, we employ a small number of  
mid-level cues, which makes the BBN network simpler and more effective. We further derive a set of event decision 
rules from inferred results of the network. The rules are then stored in a lookup table. The system achieves high 
detection accuracy ( precision rate of 95% and recall rate of 89%). Moreover, it is very simple and computationally 
efficient since the event classification is only a table lookup process.  
 
2. Proposed method (研究方法) 
The conceptual diagram of the proposed event detection system is shown in Fig. 1. It consists of low-level feature 
processing, mid-level cue extraction and high-level inferring. The mid-level cues include scoreboard information and 
shot transitions of two successive shots. The two types of mid-level cues are fused with a BBN, which infers the event 
types according to those cues. This is different from the conventional BBN-based approaches, which employ 
low-level features as the evidences of BBN, thus usually yielding a large network. Because the BBN in our system is 
simple and with low complexity, it only requires to estimate a small number of linkage probabilities.. This would 
avoid the degradation of the generalization performance of a classifier, which often occurs in a large network. In 
addition, training efforts could be reduced significantly. 
 
2.1 Shot Transition Classification 
Our observation indicates that the following three classes of shot transitions occur frequently in baseball videos: (a) 
pitch+infield (pitch followed by infield), (b) pitch+outfield (pitch followed by outfield), and (c) pitch+non-field (pitch 
followed by non-field). The significant events of baseball are deeply related to the three typical shot transitions. The 
event of “ground out” usually displays that a batter hit a ball into infield and then the second baseman catch the ball 
and pass it to the first baseman. The sequence passes through two shots from pitch to infield, as shown in Fig. 2(a). 
The shot transition of pitch+infield often appears in videos of ground out, double play, bunt, etc. The “fly out” event 
usually displays that a batter hit a ball into outfield and then center fielder catch the ball. The sequence passes through 
two shots from pitch to outfield, as shown in Fig. 2(b). The shot transition of pitch+outfield often appears in videos of 
fly out, sacrifice fly, homerun, etc. The “strike out” event may start from the shot that the batter swings a miss, and 
then the second shot switches to the close-up of pitcher, which is a non-field scene (neither infield nor outfield) , as 
shown in Fig.2 (c). The shot transition of pitch+non-field often appears in videos of strike out, walk, etc. Therefore, 
the three types of the shot transitions are chosen as key clues inferring which event possibly happens in a video.  
 
Fig. 1. Conceptual block diagram of proposed event detection 
Low-level processing 
Input video 
Scoreboard information 
extraction 
Shot transition 
classification 
BBN-based event 
classifier 
Event
Low-level 
Feature extraction
Mid-level 
Cue extraction
High-level 
Semantic inferring
  4
 
Fig. 4. BBN structure of the proposed event detection 
Node D represents the transition of occupied base statuses after an event. We define the occupied status of the 
three bases by 3-bit code, hereafter referred to as occupied base code (OBC), which represent the base status of the 
offense For examples, (000) represents no base is occupied, (001) the 1st base is occupied, (010) the 2nd base occupied, 
(011) the 1st and 2nd bases are occupied, and so on. The OBC has eight possible codes, which are from (000) to (111). 
Node D represents the transition of the two consecutive OBC after an event occurs, and thus the transition can have 64 
types. Such many OBC transition types would make the conditional probability P(D|X) sparse, which may result in 
poor generalization performance. Thus further reduction of the number of transition types is necessary. To guarantee 
workability of the BBN, the 64 types of OBC transitions are further categorized into eight groups with the following 
procedure. The OBCs are first divided into zero Z (000) and non-zero NZ. Thus the transitions of OBC, denoted as 
o1→o2, become Z→Z, Z→NZ, NZ→Z, and NZ→NZ. For each transition of these four types we can further check 
whether o1 and o2 is equal (EQ) or not equal (NE). We also consider the change of weight of o1 and o2. The weight of 
OBC is defined as the number of nonzero bits; e.g., wt(000)=0, wt(001)=1, wt(010)=1, wt(011)=2 and so on. If o1 
=011 and o2=000, then the weight change is −2, denoted as DEC2 (decreased by 2). Four types of the weight changes 
are considered: NC (no change), INC1 (increased by 1), DEC1 (decreased by 1), and DEC2 (decreased by 2). After 
the categorization, the node D have eight values, d1, d2,…, d8, as shown in Table 3. 
Given the values of the variables (the evidences A, B, C and D), and associated conditional probabilities, we can 
compute the likelihood (probability) of each event by 
)()()()()(
)(
)(
)()(
iiiii
i
i
i
xdPxcPxbPxaPxP
,a,b,c,dxP
a,b,c,dP
,a,b,c,dxPa,b,c,dxP
⋅⋅⋅⋅⋅=
⋅=
=
α
α  (1)
where α is a constant of proportionality. The probabilities including P(x1),…, P(x11), and P(xi| a1),…, P(xi| a3), P(b1| 
xi),…, P(b3| xi), P(c1| xi),…, P(c3| xi), P(d1| xi),…, P(d4| xi), for i=1, 2…,11, are estimated from the available training 
data. In this work, we collect 640 events and manually label their evidences to be the training set and estimate 
probabilities using frequency approach for the BBN. In testing, to determine which event occurs under the given 
evidences, i.e., aj, bk, cl, dm, we calculate the likelihoods using Eq(1) for the defined ten events (neglecting x11). The 
event which corresponds to the maximum likelihood is the result. 
In order to achieve real-time event detection, we further simplify the implementation of the event classifier by 
deriving simple rules from the inferred results of BBN. For each event, we first calculate all likelihoods, namely, P(xi| 
a, b, c, d) for all possible values of a, b, c, and d. Then we sort the likelihoods in a decreasing order. Finally, calculate 
cumulative probability from sorted results. If the cumulative probability is greater than 0.95, stop the calculation, and 
convert these evidences corresponding to larger likelihoods into rules for the particular event. The inferred rules 
derived satisfy all conditions (evidences) selected. Table 4 shows the likelihoods and inferring rules for the predefined 
ten events. It is noted that in formulating rules, we sometimes discard the cases that have very small likelihood but may 
produce ambiguity, i.e. one condition simultaneously fits two or more rules. 
 
P(X) 
P(A|X) P(B|X) P(C|X) P(D|X)
A 
X
B C D
  6
Table 4 Likelihood of P(xi| a, b, c, d) and inferring rule for event 
Event Sorted likelihood of  P(xi| a, b, c, d) 
Inferring rule Event Sorted likelihood of  P(xi| a, b, c, d) 
Inferring rule 
x1: SO 
P(x1| a3, b1, c2, d1) = 0.50 
P(x1| a3, b1, c2, d4) = 0.25 
P(x1| a3, b1, c2, d3) = 0.21 
A: pitch+nonfield, B: NC, C: 
INC 1, D: Z→Z, NZ→Z or 
(NZ→NZ & EQ) 
x6: 
AO/GO 
P(x6| a1, b1, c2, d1) = 0.30 
P(x6| a2, b1, c2, d1) = 0.23 
P(x6| a1, b1, c2, d3) = 0.11 
P(x6| a1, b1, c2, d4) = 0.10 
P(x6| a2, b1, c2, d3) = 0.09 
P(x6| a2, b1, c2, d4) = 0.08 
P(x6| a1, b1, c2, d5) = 0.04 
P(x6| a2, b1, c2, d5) = 0.03 
A: pitch+infield or 
pitch+outfield, B: NC, C: 
INC 1, D: Z→Z, NZ→Z or 
(NZ→NZ & EQ) or  
(NZ→NZ & NE & NC) 
x2: HR 
P(x2| a2, b3, c1, d3) = 0.44 
P(x2| a2, b2, c1, d3) = 0.21 
P(x2| a2, b3, c1, d1) = 0.21 
P(x2| a2, b2, c1, d1) = 0.09 
*P(x2| a2, b3, c4, d3) = 0.03 
A: pitch+outfield, B: INC, C: 
NC, D: Z→Z or NZ→Z x7: DP 
P(x7| a1, b1, c3, d3) = 0.85 
P(x7| a1, b1, c3, d7) = 0.07 
*P(x7| a3, b1, c3, d3) = 0.07 
A: pitch+infield, B: NC, C: 
INC 2, D: NZ→Z or 
(NZ→NZ & NE & DEC 1)
x3: SF 
P(x3| a2, b2, c2, d7) = 0.67 
P(x3| a2, b2, c2, d3) = 0.33 
A: pitch+outfield, B: INC 1, 
C: INC 1, D: NZ→Z or 
(NZ→NZ & EQ) 
x8: W 
P(x8| a3, b1, c1, d2) = 0.51 
P(x8| a3, b1, c1, d6) = 0.46 
A: pitch+nonfield, B: NC, 
C: NC, D: Z→NZ or 
(NZ→NZ & NE & INC 1)
x4: H 
P(x4| a2, b1, c1, d2) = 0.59 
P(x4| a2, b1, c1, d6) = 0.25 
P(x4| a1, b1, c1, d2) = 0.09 
P(x4| a1, b1, c1, d6) = 0.04 
A: pitch+infield or 
pitch+outfield, B: NC, C: NC, 
D: Z→NZ or  (NZ→NZ & 
NE & INC1) 
x9: SB 
P(x9| a1, b1, c1, d5) = 0.88 
*P(x9| a3, b1, c1, d5) = 0.13 
A: pitch+infield, B: NC, C: 
NC, D: (NZ→NZ & NE & 
NC) 
x5: H&R 
P(x5| a2, b2, c1, d5) = 0.29 
P(x5| a2, b2, c1, d4) = 0.13 
P(x5| a2, b2, c1, d7) = 0.11 
P(x5| a2, b3, c1, d5) = 0.11 
P(x5| a2, b2, c1, d8) = 0.06 
P(x5| a2, b3, c1, d4) = 0.05 
P(x5| a2, b3, c1, d7) = 0.05 
P(x5| a1, b2, c1, d5) = 0.03 
P(x5| a2, b3, c1, d8) = 0.02 
*P(x5| a2, b2, c2, d5) = 0.02 
*P(x5| a2, b2, c1, d3) = 0.02 
P(x5| a1, b2, c1, d4) = 0.01 
P(x5| a1, b2, c1, d7) = 0.01 
A: pitch+infield or 
pitch+outfield, B: INC, C: 
NC,  D: (NZ→NZ & EQ) or 
(NZ→NZ & NE & NC) or 
(NZ→NZ & NE & DEC) 
x10: 
WP/PB/
BK 
P(x10| a3, b1, c1, d5) = 0.74 
*P(x10| a3, b2, c1, d7) = 0.12 
*P(x10| a3, b1, c1, d5) = 0.12 
A: pitch+nonfield, B: NC, 
C: NC, D: (NZ→NZ & NE 
& NC) 
PS: * discarded case 
 
Table 5. Detection result of ten events 
 SO HR SF H H&R AO/GO DP W SB WP/PB/BK Total 
# of ground 
truth 
102 19 3 101 32 276 13 69 8 7 630 
# of detected 97 16 4 92 27 261 14 68 7 6 592 
# of miss 11 3 0 14 6 23 2 6 2 2 69 
# of false alarm 6 0 1 5 1 8 3 5 1 1 31 
Recall rate 89% 84% 100% 86% 81% 92% 85% 91% 75% 71% 89% 
Precision rate 94% 100% 75% 95% 96% 97% 79% 93% 86% 83% 95% 
 
4. Conclusions (結論) 
An effective system for detecting ten significant baseball events from broadcast videos has been presented in this 
report. The scoreboard caption which represents game status is extracted with the detection and recognition scheme. 
Three types of shot transitions including pitch+infield, pitch+outfield and pitch+nonfield are identified using the 
spatial color features and temporal color features of two consecutive shots. We fuse the scoreboard information and 
shot transition types to develop a Bayesian Belief event inferring network. We further derive a set of event decision 
