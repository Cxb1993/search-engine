的環境下所提出來的構思。 
由於在內嵌式 Linux 上眾多的開發平台
之中，Intel 公司所推出的 IXDP425[3]，不僅
在傳輸速度上較快，提供較多的周邊設備，而
且也是最多人使用的開發平台[4]，因此，Intel 
IXDP425 開發平台已逐漸廣受產業界上的喜
愛。所以我們提出的開放式軟體系統平台，是
架構在 Intel IXDP425 的硬體平台下，採用內
嵌式 SnapGear Linux系統。其整合 Atheros無
線區域網路驅動程式及 WiMAX Customer 
Premise Equipment (CPE)的驅動程式，並往上
建構 WiFi 至 WiMAX 異質橋接器雛型介面，
以提供在家庭中用戶端的 WiFi 應用到戶外
WiMAX 廣域無線應用之資訊銜接與擷取。 
就目前國外的案例來看，在 2007 年 2 月
4 號的 Business section of the New York Times
中曾有一篇報導[5]。Meraki Networks 這家公
司利用小型無線 Repeater裝置，在美國舊金山
架設 Free Community WiFi network。居民可以
在家中透過此裝置接收戶外的 WiFi 訊號，並
透過這個 Meraki Mini 的 repeater 功能，再把
WiFi 訊號延伸至屋內任一角落。可是其產品
只適用於 WiFi 的環境，並無支援未來將普極
化的 WiMAX。基於這個想法，我們可以藉此
整合 WiFi 和 WiMAX 此兩種無線技術。透過
軟體橋接器之開放式軟體系統平台，使得
WiFi 及 WiMAX 訊號可以互相轉換，延長其
訊號傳輸的距離。 
現今一般 last mile 的服務都是由有線網
路提供，例如：xDSL、Cable甚至於傳統的撥
接上網，每多一戶使用者，就必須加以佈置網
路線連接上網。由於現今新興無線網路技術－
WiMAX 的問世，可以利用其廣大的涵蓋範
圍、高頻寬及傳輸速率大的特性，不需要為各
個使用者佈置電話線或是 Cable 線，不僅節省
成本，又可以改善現今 last mile 傳輸速率不理
想等等的問題。且其穿透能力不足，導致在室
內有可能會造成 WiMAX 訊號的傳輸衰弱與
死角[6]。因此本論文提出建立WiFi與WiMAX
異質性網路橋接系統，其可收發送WiMAX的
訊號，透過所建立的核心模組將訊號轉換成
WiFi並延長其訊號傳輸的距離，達到 last mile 
plus 10 yards訊號無死角的最終目標。 
 
II. 系統架構 
如同先前所述，目前 WiMAX 的技術會產
生傳輸衰弱與死角的問題，所以我們提出
WiFi 與 WiMAX 異質性網路橋接器之雛型介
面系統。透過 WiFi 及 WiMAX 訊號相互轉換
的方式，延伸訊號傳輸之範圍，來解決 last mile 
plus 10 yards這樣的困境。本系統在兼具模組
化、彈性、擴展性與延伸性，並滿足安全性、
行動性、服務品質(QoS)與服務應用等功能的
考量下，定義如圖一所示 WiFi 與 WiMAX 端
對端網路系統雛型的架構。在此種架構下，使
用者所採用的各自獨立分散式網路架構，若是
在 WiMAX 訊號強的地方(如：戶外、郊區…
等等)，使用者可直接與WiMAX Base Station
進行連線，若在 WiMAX訊號微弱的地方(如：
室內、地下室…等等)，則可透過本系統所開
發的 WiFi 與 WiMAX 異質性網路橋接器之雛
型介面，將訊號延伸至使用者的 WiFi 裝置，
讓使用者存取網際網路之資訊。 
 
 
圖一、WiFi 與 WiMAX 端對端的網路系統雛型架構 
 
Daemon 控制介面整合。  
 WiMAX 裝置驅動程式移植至 SnapGear 
Linux 作業系統。  
 WiFi to WiMAX 軟體橋接器模組開發。  
 開放原始碼 goahead HTTP軟體模組移植
整合至 SnapGear Linux 作業系統及互動
式網頁控制介面程式發展。 
 
III. 系統實作 
本章主要描述 WiFi 與 WiMAX 異質性網
路橋接器雛型介面系統之開發與設計。WiFi
與 WiMAX 異質性網路橋接器之雛型介面系
統主要是提供以內嵌式 Linux 軟體橋接器平
台，整合室內 802.11 無線區域網路與 802.16
室外都會網路之存取技術，透過 2-Tire的硬體
架構，利用 WiMAX 訊號轉換成 WiFi 訊號，
來解決 WiMAX 訊號的傳輸死角問題，達到
last mile plus 10 yard的最終目標。 
本系統主要將無線區域網路之驅動整合
至 Intel IXDP425 開發板，使其可編譯出符合
Intel IXDP425 的系統核心檔並使用嵌入式
Linux BSP(Board Support Package)軟體讓網路
功能可以正常運作，各套件間關係如圖三所
示。 
 802.1d Ethernet Bridging：選擇此項目讓
所編譯出的 zImage 核心檔擁有 Ethernet 
to WiFi Bridge 功能。 
 Bonding driver support：將多個乙太網通
道綁定為一個，也就是兩塊網路卡具有
相同的 IP位址並且聚合成一個 logic link
運作，可以用來實現負載均衡或硬體冗
餘。 
 Wireless LAN drivers (non-hamradio) & 
Wireless Extensions：支援無線區域網路。 
 Dummy net driver support：支援使用 SLIP
或 PPP傳輸協定(如：ADSL用戶)的使用
者。 
 Intel(R) PRO/100+ support：選擇相對應的
網路卡廠商與型號。 
 
 
圖三、系統套件關連圖 
 
主要流程如圖四所示。使用者需先準備
SnapGear embedded Linux kernel(我們是以
Linux kernel 2.6.9為例)，並對其作設定，將所
需之模組及功能一併儲存至系統核心中。接下
來，將 Atheros 無線區域網路驅動程式進行修
改與編譯後，再讓其與 SnapGear embedded 
Linux kernel進行整合。最後利用 ARM Linux 
cross compiler編譯產生 zImage 系統核心檔，
並透過 TFTP 將其載入至 Intel IXDP425 開發
平台。  
 
 
圖四、開發流程圖 
 
而將所編譯好的系統核心成功載入至
Intel IXDP425 開發平台。如圖五所示，使用
RS-232 將電腦主機與 Intel IXDP425 連接，啟
動 Linux 下的超級終端機 minicom，或是
Windows XP 內建之超級終端機。連接完成
後，將「使用連線」設定為 COM1、「每秒傳
輸位元」設為 115200、「資料位元」設定為 8
以及「流量控制」設定為無。設定完成後啟動
 圖六、測試環境---案例一 
 
 
圖七、測試環境---案例二 
 
其二如圖七所示，整體環境同案例一，但
是將 CPE 置於使用者所在之房間內並連接至
Switch，測試電腦 A安裝 Chariot console，測
試電腦 B 與測試電腦 C 分別安裝 EndPoint 1
與 EndPoint 2，且將測試電腦 B與測試電腦 C
的 IP 分 別 設 定 為 140.138.99.184 與
140.138.99.185。 
其三如圖八所示之測試環境，將 CPE 置
於建築物窗戶邊，並連接至 Switch，Intel IXDP 
425 與測試電腦 A 再對 Switch 作連接，並且
將 Chariot console 安裝於測試電腦 A，測試電
腦 B 與測試電腦 C 分別安裝 EndPoint 1 與
EndPoint 2 ， 並 分 別 將 其 IP 設 定 成
140.138.99.184與 140.138.99.185。 
 
 
圖八、測試環境---案例三  
 
測試時，執行 Chariot console並在 Pair 1
中輸入 EndPoint 1及 EndPoint 2 電腦之 IP，並
執行為期十分鐘之測試。以下為案例一之測試
結果： 
 
圖九、測試案例一之 Throughput 
 
 
圖十、測試案例一之 Transaction Rate 
 
我們可由圖九與圖十觀察得知，在案例一
中最小的 Throughput 為 0.921 Mbps，最大的
