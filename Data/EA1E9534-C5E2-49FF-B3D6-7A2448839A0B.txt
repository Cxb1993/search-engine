2行政院國家科學委員會專題研究計劃成果報告
多媒體共享之網路服務平台-
子計畫三：多媒體共享網路之群播通訊研究(3/3)
計劃編號﹕NSC 95-2221-E-002-066
執行期限﹕95 年 8 月 1 日至 96 年 7 月 31 日
主持人﹕廖婉君博士 國立台灣大學電機工程學系
計畫參與人員：郭嘉駿、施兆芳、林怡君、姚立偉
國立台灣大學電機工程學系
摘要 -- 本年度計畫主要研究多媒體內容傳輸網路
(Multimedia Content Delivery Network)中群播樹
之路由演算法的設計。我們所針對的應用是要求高頻
寬需求服務。目前相關研究大都是結合史坦爾樹
(Steiner tree)演算法以及重新路由(rerouting)機
制，這類作法的主要缺點是其所產生的群播樹會使用
較多的網路連結(link)，因而較浪費網路資源。在本
年計畫中我們提出演算法改進此缺點，並結合 IP
multicast 及 overlay network 優點，藉由模擬驗
證，我們所提出的演算法使用較少網路資源。此外，
我們亦分析所提出的演算法在壞情況下之效能，並討
論延申此演算法以支援動態群組的可能性。
關鍵詞：多媒體內容傳輸網路、群播
Abstract—In this project, we propose a new multicast
delivery mechanism for bandwidth-demanding
applications in IP networks. Our mechanism, Multiple-
destination Overlay Multicast, combines the advantages
of IP multicast and overlay multicast. We formulate the
Multiple-destination Overlay Multicast routing problem
as an optimization problem, which is NP-hard. We then
design an algorithm based on Lagrangean relaxation on
our formulation and propose a distributed protocol based
on the algorithm. For network operators, our mechanism
uses less network bandwidth than both IP multicast and
overlay multicast. For end users, our mechanism uses less
interface bandwidth than overlay multicast.
Keywords- multicast; application-layer multicast; overlay
multicast.
I. INTRODUCTION
Multicast is an efficient way of one-to-many and
many-to-many communications 錯誤! 找不到參照
來源。. Each multicast group consists of a set of
members, and each member can be a sender or
receiver of the group. The sender for a multicast
group delivers data in a multicast tree to all receivers
of the group. For simplicity and robustness, current
IP multicast routing protocols 錯誤! 找不到參照來
源。–錯誤 ! 找不到參照來源。 rely on unicast
routing protocols, which find the shortest path from a
sender to a receiver, to construct a multicast tree in
the IP network. Therefore, an IP multicast tree is a
shortest-path tree, which is the union of the shortest
path from each member to the root of the tree.
Although finding a shortest-path tree is not difficult,
the bandwidth used in a shortest-path tree is not
optimal for multicast communications, because the
routing of a shortest-path tree is inflexible. The path
from the root to each member is fixed in a shortest-
path tree, regardless of the identities and locations of
other members. Consider Fig. 1 for example, where
Fig. 1 (a) is an IP network topology. Node 1 is the
root, and nodes 6, 11, and 13 are the group members.
With the shortest path tree (Fig. 1 (b)), it takes ten
packet-hops for transmissions, where a packet hop
corresponds to sending a packet over one hop. The
path in the shortest-path tree from node 1 to node 11
is independent of the path from node 1 to node 13,
even though nodes 11 and 13 are quite close. The
total bandwidth consumption can be reduced by first
sharing a common path from node 1 to node 12 and
then connecting nodes 11 and 13 to node 12, but
these paths are not the shortest paths in the IP
network. Therefore, the above example shows that a
shortest-path tree may induce higher bandwidth
consumption.
Due to the slow deployment of IP multicast,
overlay multicast, i.e., application-layer multicast,
has been proposed to construct a multicast tree in an
overlay network. The overlay network can be
considered as a complete graph in which only the
members of a multicast group can be the nodes. Each
edge in the overlay network corresponds to a
shortest-path in the IP network, connecting the two
4flexibility of overlay multicast but alleviates the
stress problem by including multiple destination
addresses in each IP header [20][21]. With MOM, a
router uses the existing unicast routing protocol with
the receivers’addresses to find the neighbor routers
for packet delivery. A packet is duplicated only when
it must be delivered to more than one neighbor router.
Including multiple addresses in a packet has many
advantages, as have been demonstrated in the
literature (e.g., [22-25]).
MOM combines the advantages of overlay
multicast and IP multicast. The path from the root to
each member is not constrained to be the shortest
path in the IP network, and each link in MOM sends
much fewer packets. Consider Fig. 1 (d) for example,
where there are six packet-hops sent in an MOM tree.
Node 6 sends one packet with the addresses of nodes
11 and 13. The packet follows the shortest paths to
nodes 11 and 13 and is duplicated at node 12. Each
link sends exactly one packet. This example shows
that MOM has the following advantages.
 For network operators, MOM consumes less
network bandwidth than both IP multicast
and overlay multicast. MOM uses less
network bandwidth thanks to the flexibility of
routing in overlay multicast and much fewer
packets sent in each link.
 For end users, MOM consumes less interface
bandwidth than overlay multicast. MOM uses
less interface bandwidth thanks to multiple
addresses being included in each packet. As a
result, each member can send data to other
members with much fewer packets.
In the next section, we show that the above two
statements hold for all cases by proving that IP
multicast and overlay multicast are two special cases
of MOM.
In this paper, we model the Multiple-destination
Overlay Multicast (MOM) routing problem as an
optimization problem. The problem is to minimize
the total number of packet-hops sent in an MOM tree.
We use Integer Linear Programming (ILP) to
formulate the MOM routing problem, which is NP-
hard with the reduction from Vertex Cover [36]. We
design an algorithm based on Lagrangean relaxation
錯誤 ! 找不到參照來源。 on our proposed ILP
formulation. We adopt Lagrange relaxation, instead
of other optimization techniques, due to the
following reasons. First, our algorithm decomposes
the original problem into multiple sub-problems such
that each sub-problem can be solved by each sender
and receivers independently. In other words, the
algorithm can be implemented in a distributed
manner. Second, the algorithm adapts to the change
to group membership and network topology. The
algorithm iteratively reduces the cost of a multicast
tree according to the current group membership and
the IP network topology. Third, the algorithm can
find the lower bound on the total number of packets
sent in the optimal MOM tree. Since using the ILP
formulation to find the optimal MOM tree with a
large number of members in large IP network is
computationally infeasible, the lower bound obtained
by our algorithm provides the benchmark to compare
with other algorithms for the problem. Please note
that we also design a 2-approximation algorithm for
this problem in 錯誤! 找不到參照來源。, but the
algorithm requires centralized computation and is not
suitable to be implemented in the distributed IP
network.
Compared with the algorithms to find Steiner trees
in the IP network, our algorithm can support a large
number of multicast groups because the members
collaboratively find the multicast trees. We believe
that the members are more suited than the routers to
find a multicast tree because each member tends to
participate in much fewer multicast groups than
routers, allowing each of them to contribute
computing power to collaboratively find the tree for
each participating group. In addition, MOM does not
require any new routing algorithm, and ISPs only
need to enable the multi-destination delivery in
routers, which is a standard in IPv4 as defined in [10].
We also design a protocol, which is described briefly
at the end of Section III, based the proposed
algorithm, and the protocol can be implemented as a
client middleware that can be accessed by any
application software, such as Bit Torrent, for overlay
multicast services. Therefore, compared with Steiner
tree algorithms, we believe that MOM is more
suitable for bandwidth demanding applications in the
Internet.
MOM is applied to applications different from IP
multicast and overlay multicast. Its design goal is to
minimize the bandwidth consumption, while IP
multicast is to support a large number of members.
Previous research results for overlay multicast focus
mainly on scalability (i.e., to support more groups)
錯誤! 找不到參照來源。–錯誤! 找不到參照來
源。 or on real-time applications to minimize end-to-
end delay 錯誤! 找不到參照來源。–錯誤! 找不到
6TABLE II. DECISION VARIABLES OF THE MOM ROUTING PROBLEM.
Symbol Description
,
m
p q a binary variable that represents if arc ( , )p q in CG is in the MOM tree and in the path from s to member m,
m R  , C( , )p q A 
,
p
u v an integer variable that represents the number of leaf nodes in pT with the addresses in the packets sent in arc
( , )u v of pT , p M  , ( , ) pu v A 
,
p
u v an integer variable that represents the number of packets delivered in arc ( , )u v of pT , p M  , ( , ) pu v A 
,
p
u vD the set of leaf nodes in pT with the addresses in the packets sent in arc ( , )u v of pT , p M  , ( , ) pu v A  ,
namely, , ,
p p
u v u vD 
,
p
u vK a subset of ,
p
u vD such that each leaf node in ,
p
u vK belongs to the packet sent in arc ( , )u v with addresses,
p M  , ( , ) pu v A 
,
p
u vU a subset of ,
p
u vD such that each leaf node in ,
p
u vU belongs to the packet sent in arc ( , )u v with fewer than 
addresses; namely, , , ,
p p p
u v u v u vU D K 
Proof: The above inequality holds because any
MOM tree with at most 2 addresses in each packet
is a feasible solution to the MOM routing problem
with at most 1 addresses in each packet. 
Theorem 1. The following inequalities hold,
 *SPT XOM R  , * *OM XOM   , and *XOM ST   ,
where 1 .
Proof: The routing of an MOM tree is identical to
the shortest-path tree if the sender directly sends the
data to all receivers. Besides that, each arc in the
MOM tree delivers exactly one packet if  is R .
Therefore, the shortest path tree is a feasible solution
to the MOM routing problem with  as R , and
SPT is no less than  *XOM R . The optimal overlay
multicast tree is the minimum spanning tree, which
is also the optimal solution to the MOM routing
problem with  as one. In other words, *OM is
identical to *XOM 1 . Therefore, *OM is no less than
*XOM  according to Lemma 1, 1 . Since any
MOM tree with as R is a feasible solution to the
Steiner tree problem,  *XOM R is no less than ST .
Therefore, *XOM  is no less than ST according to
Lemma 1, 1 . 
We formulate the MOM routing problem as an
integer linear programming problem. The
formulation has the following objective function,
,
( , )
min
p
p
u v
p M u v A

 
 .
The above objective function minimizes the
number of packets sent in an MOM tree in the IP
network. The formulation has the following
constraints,

C C
, ,
:( , ) :( , )
0, ,m mp q q p
p p q A p q p A
m R q R m 
 
        , (1)
C C
, ,
:( , ) :( , )
1,m mp m m p
p p m A p m p A
m R 
 
     , (2)
C C
, ,
:( , ) :( , )
1,m ms q q s
q s q A q q s A
m R 
 
     , (3)
, , C, ( , ) , , ( , )
m p
p q u q pp q A m R u q A        , (4)
, , , , ( , ) ,
p
v
p p
v x u v p p
x C
p M u v A v L 

      , (5)
, , , , ( , )
p p
u v u v pp M u v A        . (6)
Constraints (1)–(3) obtain the identities of
relaying members in the path from the sender s to
each member m in the MOM tree. For each relaying
member, constraint (1) finds the two adjacent
members in the path. Constraints (2) and (3) decide
the adjacent relaying member for member m and
sender s in the path. Therefore, for each member p,
we can obtain the set of other members to which p
must relay data with the three constraints. Note that
member p must send data to other members via pT .
For each arc ( , )u v in pT , constraints (4) and (5) find
,
p
u v , the number of downstream members served by
arc ( , )u v . If member q is relayed by p, constraint (4)
enforces that ,
p
u q is one for the incident arc ( , )u q . For
8, ,
( , )
min
C
m m
p q p q
m R p q A
 
 
 .
The constraints of the first sub-problem include
constraints (1)–(3). The first sub-problem is identical
to the shortest-path problem for sender s and each
receiver m in the overlay network. We can solve the
problem with any distributed shortest-path algorithm.
Note that the cost ,
m
p q of each arc ( , )p q in the
overlay network can be different for each receiver m
in the shortest-path problem.
The objective function of the second sub-problem
is expressed as follows,
, , ,
( , ) :( , )
min
p p p
p m p
u v p q u q
p M u v A q L u u q A m R
  
    
        
     .
The constraints of the second sub-problem
include constraints (5) and (6). We decompose the
sub-problem into the Leaf Selection Problem (LSP)
for each member p in M. For each member p in M,
LSP is to select some leaf nodes in pT to which p
must send data. The objective function of LSP for
member p contains two terms. The first one is the
total number of packets sent in pT , and the second
one is the sum of the profit of each selected leaf
node. Each leaf node q creates profit ,
m
p q
m R


 if it is
selected, i.e., variable ,
p
u q is one, where u is the
parent node of q in pT . Therefore, the objective
function is to minimize the net cost for each member
p to send data to the selected leaf nodes in pT . The
constraints in LSP for each member p enforces that
each router in pT must deliver the packets according
to the destination addresses. Intuitively, we obtain
more profit in this problem if we choose more leaf
nodes. However, more selected leaf nodes also incur
more bandwidth consumption in pT . Therefore, we
have to find the best trade-off to select the leaf nodes.
B. Solve the Leaf Selection Problem
We design a dynamic programming algorithm to
find the optimal solution to LSP. We select the
dynamic programming method to exploit the tree
structure of this problem. For each member p, the
method enables each node u in tree pT to avoid
storing and computing the net costs of all possible
selections of the downstream leaf nodes. In contrast,
each node u in the dynamic programming method
stores and computes only the best selections of
downstream leaf nodes when u receives a packet with
k addresses, 1 k   . In other words, node u is
required to store and compute only  possible
selections of downstream leaf nodes. Therefore, the
dynamic programming method can effectively reduce
the memory and computational time to solve the
problem.
Each arc ( , )u v in pT needs to deliver packets to
the downstream selected leaf nodes ,
p
u vD . To
minimize the number of packets sent in the arc, we
have to include the addresses of more downstream
selected leaf nodes in each packet. Therefore, our
algorithm allows only one packet with fewer than 
addresses, while every other packet must include 
addresses. For arc ( , )u v in pT , let ,
p
u vK denote the set
of packed selected leaves of the arc, where each
selected leaf node in the set is located in a packet
with addresses. In contrast, let ,pu vU denote the set
of unpacked selected leaves of the arc, and each
selected leaf nodes in the set is located in a packet
with fewer than  addresses. In our dynamic
programming algorithm, we obtain ,
p
u vK and ,
p
u vU
from ,
p
v wK and ,
p
v wU of each downstream arc ( , )v w of
( , )u v such that the size of ,
p
u vU is less than . More
specifically, we pack the unpacked selected leaves of
each downstream arc ( , )v w to ,
p
u vK to reduce the size
of ,
p
u vU . Therefore, our algorithm is operated in a
bottom-up manner.
For each member p and each arc ( , )u v in pT , let
, ,( )
p
u v u vj denote the optimal net cost obtained in the
sub-tree that includes all arcs in the path from p to v
and all arcs downstream to v, where ,u vj is the
number of unpacked selected leaves in the sub-tree.
We find , ,( )
p
u v u vj in the bottom-up manner as
follows. We first consider the leaf node. For each
leaf node q with u as the parent node in pT , net cost
, (1)
p
u q is therefore ,1 mp q
m R


 because u is a selected
leaf node in this case. In contrast, net cost , (0)
p
u q is
zero and corresponds to the case that u is not
selected. We then consider each node v with fewer
than child nodes, where a child node is a leaf node
of pT . Net cost , ,( )
p
u v u vj represents the case that ,u vj
child nodes  ,1 2, ,..., u vjq q q are selected, and we
obtain , ,( )
p
u v u vj as follows,
10
become the packed selected leaves and belong to the
same packet sent in each arc of the path from p to v.
Therefore, each arc in the path needs to send one
packet for the selected leaf nodes. Finally, if v has
more than child nodes, where each child node is a
leaf node, then net cost , ,( )
p
u v u vj selects the i child
nodes  1 2, ,..., iq q q with the largest profit such that
, ,( )
p
u v u vj satisfies the following equation, where
, /u vj   packet with the unpacked selected leaves
must be sent in arc ( , )u v , and /i   packets with
the packed selected leaves must be sent in each arc
of the path from p to v. Note that we do not consider
the packet with the unpacked selected leaves sent in
the path from p to v since the packet can be merged
with other packets with other unpacked selected
leaves located in the different branches of pT .
Therefore, we count the packet induced by these
unpacked selected leaves later when we consider the
upstream arcs. Note that equations (9) and (10) are
two special cases of (11), and the above scenario
considers only each node v with all child nodes as
the leaf nodes of pT . For each other node v in pT , we
generalize , ,( )
p
u v u vj as follows,
where  , : pv w vj w C is a set containing a ,v wj for each
downstream arc ( , )v w . The net cost consists of the
packet with the unpacked selected nodes sent in
( , )u v , the packets merged from the downstream arcs
and sent in path ,p vP , and the sum of the net cost
obtained from the downstream arcs. One way to find
, ,( )
p
u v u vj is to consider all the
p
vCO    
combinations
of ,v wj for each downstream arc ( , )v w . However, we
reduce the running time to  22 pvO C with an
auxiliary graph, as explained in the Appendix.
Fig. 2 gives our dynamic programming algorithm
for LSP. Step 1 sets the initial values for each leaf
node. Step 2 finds , ,( )
p
u v u vj for each arc ( , )u v and
each ,u vj in the bottom-up manner. Step 3 determines
the optimal ,u vj for each arc ( , )u v in the top-down
manner, where ,u vj is the optimal number of
unpacked selected leaves obtained in our algorithm.
Finally, Step four finds the selected leaf nodes and
the net cost of the tree pT . Consider the tree in Fig. 3
for example with  as three, where the number
below each receiver is the profit associated with the
receiver q, namely, 1,
m
q
m R


 . For each arc ( , )u v in 1T ,
Table III lists ,u vj for each arc ( , )u v , the possible
combinations of ,v wj of the each downstream arc
( , )v w , and the net cost , ,( )
p
u v u vj . The ,u vj in bold is
the optimal ,u vj , which corresponds to an optimal
collection of ,v wj found in Step 3 of our algorithm.
For example, considering arc (1,2), 1,2j is zero since
1
1,2 (0) has the minimum net cost. Moreover,
2,4 2,5 2,6( , , )j j j of the downstream arcs corresponding
to 1,2j is (1,1,1). Therefore, 2,5j is one, 5,9 5,10( , )j j is
(1,0), and member 9 is a selected leaf node. The
selected leaf nodes are nodes 4, 9, 6, 11, 12, and 8 in
this example.
Theorem 3. The dynamic programming algorithm
obtains the optimal solution to LSP in  22 pO V .
Proof: For each arc ( , )u v in pT , we can obtain
, ,( )
p
u v u vj for all ,u vj in  22 pvO C according to
Lemma 2. The computational time of our algorithm
is
22
p
p
v
v V
O C

 
   
 . Therefore, our dynamic
programming algorithm finds the optimal solution to
LSP in  22 pO V . 
C. Find and Improve the Feasible MOM Tree
The solution to LSP for each member may not
build a feasible multicast tree for the MOM routing
problem because each member independently selects
the leaf nodes to send data. Some members may not
be able to receive data from the sender. Therefore,
we use the solution to the shortest path problem for
each member in the overlay network, which is the
first sub-problem to LRP, to find the feasible MOM
tree. For each receiver m, the shortest-path problem
for m decides the identity of each member p located
in the path from the sender to m, and each member p
can then obtain the identities of other members to
which p must relay data. The solution guarantees
that each member is able to receive the data from the
sender. The advantage of adopting the shortest-path
tree in the overlay network as the feasible solution to
the MOM routing problem is that the members can
find the tree in a distributed manner similar to the IP
multicast routing protocols. Initially, the tree
12
6
11
13
1
6
11
13
1
(1,1,1)
(1,1,1)
(1,1,1)
(1,1,1)
(1,1,1)
3
3
3
3
3
6
11
13
1
6
11
13
1
(1,0.7,0.7)
(0.7,0.7,0.7)
(0.7,0.7,0.7)
(1,1.3,1)
(1,1,1.3)
2.1
2.1
3.3
3.3
2.4
6
11
13
1
6
11
13
1
(1,0.4,0.4)
(0.4,0.4,0.4)
(0.4,0.4,0.4)
(1,1.6,1)
(1,1,1.6)
1.2
1.2
3.6
3.6
1.8
(a)Iteration 1 ( 3 ) (b) Iteration 2 ( 3 ) (c) Iteration 3 ( 3 )
6
11
13
1
6
11
13
1
(1.6,1,1)
(0.4,1,0.4)
(0.4,0.4,1)
(1,1.6,1)
(1,1,1.6)
1.8
1.8
3.6
3.6
3.6
6
11
13
1
6
11
13
1
(1.6,0.25,0.25)
(0.4,1,0.4)
(0.4,0.4,1)
(1,2.35,1)
(1,1,2.35)
1.8
1.8
4.35
4.35
2.1
6
11
13
1
6
11
13
1
(1.6,0.25,0.25)
(0.4,1.25,0.4)
(0.4,0.4,1.25)
(0.75,2.1,0.75)
(0.75,0.75,2.1)
2.05
2.05
3.6
3.6
2.1
(d) Iteration 4 ( 3 ) (e) Iteration 5 ( 2 ) (f) Iteration 6 ( 1 )
Fig. 5. An example of our algorithm with  equal to two.
Therefore, if p does not relay data to q in the MOM
tree, we decrease ,
m
p q for each member m such that
the arc is more likely to be selected in the shortest
path problem for m, and member p tends to relay data
to q in the MOM tree. Therefore, the cost ,
m
p q , which
is the Lagrange multiplier in LRP, plays an important
role in finding a bandwidth efficient MOM tree.
Fig. 4 shows the details of our algorithm for the
MOM routing problem. Our algorithm assigns unit
cost to each arc for each receiver in Step 1. Then,
our algorithm iteratively adjusts the cost ,
m
p q of each
arc ( , )p q for each receiver m to reroute the MOM
tree. At each iteration, we first find the solutions to
the shortest-path problem and LSP and then find
XOM , the total bandwidth consumption in the MOM
tree, in Step 2 according to the solution to the
shortest-path problem for each receiver. We adjust
the cost of each arc for each receiver in Step 3 such
that we can find the MOM tree with less bandwidth
consumption at the next iteration. Our algorithm
stops when the number of iterations  is larger than
a threshold N, when our algorithm can no longer
adjust the cost, or when the difference of the total
bandwidth consumption of our MOM tree and the
lower bound on the total bandwidth consumption in
the optimal MOM tree is within a threshold . The
parameter  in Step 3 is a parameter that dominates
the modification of the Lagrange multipliers at each
iteration of the subgradient algorithm. With a larger
, the MOM tree improves faster, but the obtained
MOM tree tends to consume more bandwidth than
14
30
35
40
45
50
55
60
65
0 1 2 3 4 5 6 7 8 9 10 11
Delta
T
ot
al
nu
m
be
ro
fp
ac
ke
ts
se
nt
in
a
tr
ee
MST SPT
MOM-LAG MOMOPT
ST
Fig. 6. Comparison of the bandwidth consumption of different multicast trees in the small network.
We do not compare the MOM tree with the
overlay multicast trees proposed in previous work
since the minimum spanning tree is the optimal
overlay multicast tree. In other words, there is no
overlay multicast tree in the previous work that can
consume less bandwidth than the minimum spanning
tree. In addition, it is not suitable to compare the
MOM tree with the overlay multicast trees in the
previous work since these overlay multicast trees are
designed for different applications. Note that the
minimum spanning tree is the same as the optimal
MOM tree with  equal to one.
In the simulation, we use the flat graph with the
Waxman distribution 錯誤! 找不到參照來源。 as
the network topology to test our algorithm in
networks with different graph characteristics. We
also use MBone 錯誤! 找不到參照來源。 and the
Internet topology with the power-law distribution
generated by Inet錯誤!找不到參照來源。錯誤!找
不到參照來源。 to verify our algorithm in more
realistic networks. In our simulation, each node is a
router, and each member is a host randomly attached
to a router. The simulation results are averaged over
100 samples. The input parameters are listed as
follows. (1) Graph characteristic. We generate
random flat graphs with the Waxman distribution.
Given the physical locations of two nodes, the
distribution determines whether there exists a link
connecting the two nodes. The distribution has two
parameters  and . The graph with a larger  and
 has a larger node degree and a smaller graph
diameter 錯誤! 找不到參照來源。. Therefore, the
multicast trees in different graphs lead to different
characteristics. (2) Group size. The group size is the
number of receivers in a multicast tree. (3) The
maximum number of addresses that can be included
in each packet, i.e.,  . Since  is an important
parameter in our algorithm, we present our
simulation results with different values of  in most
figures to find the proper  in different scenarios. (4)
Distribution of receivers. We use the affinity and
disaffinity model 錯誤 ! 找不到參照來源。 to
describe the distribution of receivers in a multicast
tree. With a positive affinity index, receivers tend to
cluster. With a negative affinity index, receivers tend
to spread out. When the affinity index is zero, all
receivers are chosen uniformly at random among all
nodes.
We measure the following performance metrics in
our simulation. (1) Cost of a multicast tree. (2)
Number of packets sent by each member. It
represents the consumption of the interface
bandwidth of each member. (3) Stress of each link. It
is the number of packets sent in each link. (4)
Number of addresses in the header of each packet. (5)
Depth of a multicast tree. We measure the depth of a
tree in terms of the number of members and the
number of hops from the sender to each leaf member.
The depth of a multicast tree is correlated with the
end-to-end delay from the sender to a receiver. (6)
Distance from each member to the parent member. It
is the number of hops from the parent member to
each member.
To find the optimal solutions, we first adopt a
small network with 30 nodes in Fig. 6 because
solving large ILP problems is computationally
infeasible. We use CPLEX 錯誤! 找不到參照來
源。 with the ILP formulation in錯誤! 找不到參照
來源。 and our proposed formulation to find the
Steiner tree and the optimal MOM tree, respectively.
Fig. 6 compares the total number of packets sent in
the Steiner tree (ST), shortest-path tree (SPT), the
16
0
100
200
300
400
500
600
700
800
0 1 2 3 4 5 6 7 8 9 10 11
Delta
T
ot
al
nu
m
be
ro
fp
ac
ke
ts
se
nt
in
a
tr
ee
MST
SPT
MOM-LAG
MOM-LB
0
100
200
300
400
500
600
0 1 2 3 4 5 6 7 8 9 10 11
Delta
T
ot
al
nu
m
be
ro
fp
ac
ke
ts
se
nt
in
a
tr
ee
MST SPT
MOM-LAG MOM-LB
(a) Bandwidth cost of a tree in MBone (b) Bandwidth cost of a tree in the Internet
0
5
10
15
20
25
30
35
40
0 1 2 3 4 5 6 7 8 9 10 11
Delta
M
ax
im
um
st
re
ss
of
a
lin
k MST(Internet)
MOM-LAG(Internet)
MST(MBone)
MOM-LAG(MBone)
SPT
0
100
200
300
400
500
600
0 5 10 15 20 25 30 35 40 45 50
Iteration
B
an
dw
id
th
co
st
Small sigma
Large sigma
Lower bound
(c) Stress of a link (d) Bandwidth cost of a tree in the Internet
Fig. 9. Comparison of different multicast trees in MBone and the Internet topology generated by Inet, where the
group size is 120.
represents the Internet has a smaller diameter as
compared to MBone, and we have smaller multicast
trees in the graph, as shown in Figs. 9 (a) and (b). A
multicast tree in the Internet tends to span the nodes
with the backbone routers, and we have a multicast
tree with a smaller depth since each node in the tree
tends to have more child nodes. Therefore, Fig. 9 (c)
shows that a few links that connect to the backbone
routers deliver a large number of identical packets in
the Internet for overlay multicast, and MOM with a
small  can effectively reduce the redundancy of the
packet delivery. Fig. 9 (d) shows that the number of
iterations in our algorithm is controllable. Note that
 corresponds to 1 or 10 in this simulation. Our
algorithm with a large  converges with about 11
iterations. Note that it is possible that at a certain
iterations, our algorithm obtains a solution worse
than the solution of an iteration. The reason behind
searching toward a locally worse direction is to avoid
being trapped in a locally optimal solution. Our
algorithm with a small  in Fig. 9 (d) converges
more slowly and obtains a solution at the 45th
iteration, which is better than the one obtained at the
11th iteration with a large . Therefore, the number
of iterations of our algorithm is controllable, and the
sender can find the trade-off between the overhead
and the quality of the solution with different .
V. CONCLUSION
In this paper, we propose a new multicast delivery
mechanism, MOM, for bandwidth-demanding
applications. Our mechanism use less bandwidth
compared with both IP multicast and overlay
multicast. The routing of our mechanism is more
flexible than IP multicast, and our mechanism avoids
the stress problem in overlay multicast. We model
our Multiple-destination Overlay Multicast problem
as an optimization problem, which is NP-hard. We
prove that the optimal solutions to our problem use
less bandwidth than the shortest-path trees and the
optimal solutions to overlay multicast for all
instances. We formulate the problem as an integer
linear programming problem. We design an
algorithm based on Lagrangean relaxation. We also
會議報告
一 參加會議經過
本次出國開會主要是到香港參加 IEEE ICC 2007的研討會，並發表論文，其
題目分別為”Utility-Based Resource Allocation for Layer-Encoded IPTV Multicast in
IEEE 802.16 (WiMAX) Wireless Networks。”IEEE ICC為目前 IEEE 在無線通訊
領域十分重要的國際會議之一，此會議將論文分為 8 個 symposia 及 1 general
sessions進行口頭報告及討論，並有 exhibition同時進行; 此會議將論文安排成三
天，中間穿插著 panel discussions, business application sessions 及 幾個 keynote
speeches。 今年的主題主要包括 communications Theory、Communications QoS,
Reliability and Performance Modeling、Multimedia Communications and Home
Networking、Signal Processing for Communications、Wireless Communications、
Ad Hoc and Sensor Networks。 此外並參予 IEEE Globecom 2007 executive
committee board meeting 討論。
除了專業報告外，會後更與多位對此協定有關及有興趣的人士進行討論。此
外，除了自己的 session 之外，也參與其他相關的演講及討論，已確實掌握最新
技術發展現況，並激發新的研究想法。由 IEEE ICC 2007的論文發表來看，很明
顯的目前的技術仍是以無線網路技術為發展重心。
二與會心得與建議
由 IEEE ICC 2007的論文發表來看，很明顯的無線網路技術發展儼然已是目
前最重要的趨勢，此外 cognitive ratio and collaboration networking及 4G的發展
也十分值得注意 。希望今後國內的研究及研究計劃也應繼續朝向此方向進行，
以其與世界一流研究同步。
此外，此次會議中明顯看出，大陸學者積極參予 IEEE ComSoc 相關活動，
其企圖心與積極的態度更甚台灣的學者，這點實在值得注意。
三攜回資料名稱與內容
IEEE ICC 2007 之 conference proceedings 的 CD-ROM。
