 I 
摘要: 
本計畫提出一個嵌入式系統模擬與設計流程，並利用現場可程式化邏輯閘陣列，實現
於水下嵌入式系統。 
近年來，由於一般用途微處理器時脈已高達每秒 34 億，而各主要處理器供應商亦開始
推出多重核心微處理器，並對於各項特殊應用易有特殊之微處理器。單一通用型微處理器
已無法同時符合各項應用需求，若針對個別應用設計不同之微處理器，對於成本與設計困
難度亦無法兼顧。故本計畫提出一個簡易之模擬與設計方法，已符合特殊功能上的需求。 
嵌入式系統需具有許多應用上之特殊性，與一般通用型系統有所不同。為了具備設計
上彈性與功能需求上之特殊性，用於水下相移陣列系統中，故使用現場可程式化邏輯閘陣
列，以達到上述之目標 
 
關鍵字: 
可程式化邏輯閘陣列、嵌入式系統 
 
Abstract: 
In this project, we purpose a simple design methodology in simulation and design a specific 
embedded processing system which applied to underwater ultrasonic image system. 
Recent years, the commercial microprocessor clock rate is up to 3.4GHz (Giga-Hertz), 
Quad-Core, FSB (Front Side Bus) 1333MHz. Although in such high speed processor and transfer 
rate, the bottleneck of specialize system will not be solved. The specialize system still needed in 
each kinds of applications. We purpose an evaluation and design methodology apply to specific 
requirement in each system without changing whole system architecture. 
In the design methodology, we purpose a reconfigurable coprocessor with any processor 
base system. In such system, implement the coprocessor to balance the entire system loading. 
With hardware embedded system design methodology, we used a large scale FPGA (Field 
Programmable Gate Arrays) development platform to implementation our system. In system level, 
we implement system IO in MicroBlaze soft processor. In the specialize application, we design 
the coprocessor with underwater ultrasonic image algorithm. In the basic unit computing 
component level, we used asynchronous circuit protocol to communicate with other function 
block. 
 
Keywords： 
Applying Field Programmable Gate Array、Embedded Systems 
 2 
Image Processing Algorithm: 
In the single sensor element system, the signal data is only the strength of the signal. If there 
is one static sensor, we can only determine the distance by the signal strength. But in our design, 
the transmitter and the receiver is not only one sensor, the transmitter sensor in x-axis is 19 sensor 
elements, and the receiver sensor in y-axis is 19 sensor elements either, as shown in Fig.3-3.1. 
 
 
 
 
 
 
 
In start time zero, the transmitters generate a pulse signal in angle φ1.The pulse travels to 
the target surface, and the surface reflect the pulse. At the start time, the receiver sensor receives 
from the reflecting signal without knowing the receiving angle. After the angleφ 1 was 
transmitted complete, the next angleφ2 will be generated. 
 
 
 
 
 
 
 
For each of the transmitting angle, the receiving sensors in Y-axis receive the reflecting 
signal in different time slot, successively. In different receiving sensor, the received signal will 
also be different. 
 
 
 
 
 
 
 
 
 
The Prog.3-3.1 is the image algorithm used in this system. The pseudo code program presents the 
algorithm of the nineteen receiving sensor in T-type sensor array step by step. 
Fig.3-3.3 Distance and angles with receiver sensors 
Fig.3-3.2 Transmitter to the target 
Fig.3-3.1 T-type sensor element 
 4 
System Implementation: 
In this chapter, we describe the architecture and design of this embedded system. According 
to the image algorithm, we first evaluate the time and the memory space requirement in our 
application. At the second stage, we develop hardware and soft ware platform of the system. Last, 
after the signal receiving, is the system in processing received signal and generate image. 
Simulation: 
After received the signal, the next step is to compute the time and the distance. The image 
algorithm was implemented in C programming language to estimate the cost in time and memory 
consumption. And testing image was generated a bitmap to see the correctness of the image file. 
In order to prevent difficulty in debugging, we separate the program to fourth parts. There is 
many kind of programming environments, each of them must be ANSI C compatible. This 
simulation code implemented in C will be more portable, flexible. 
Before implementation, we must analysis the image algorithm in data processing flow and 
control flow. 
z Data processing flow: 
The received signal data in this design is pre-store in the hard drive. When 
the computation starts, these signal data will be fetched to the system memory. 
Loading time is dependent on the fetch method, storage architecture, data transfer 
interface and the buffer size, as shown in Fig.4-1.1. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Fig.4-1.1 Data flow diagram 
 6 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Last sub-function block is the operation of generating image. To reduce the 
memory size and computation, output image format is the bitmap image file 
format. In order to represent the strength of the signal, the image is painted in 
8-bits gray color. 
 
Fig.4-1.4 Computing signal (detail)
 8 
Hardware and Software Platform: 
 In recent years, because the progresses of semiconductor processing technology, the single 
silicon device is include more transistors. Intel’s first generation processors in the early 1970’s 
consisted of just one or two thousand transistors. That increased to tens of thousands in the late 
seventies as Intel pushed its 8086 processor. Progress continued through the hundreds of 
thousands of transistors with the 80286 and 80386 families, and finally reached the million 
transistor mark with the 486DX and its integrated FPU. The nineties was the decade of the 
Pentium processor, from its 3-million transistor introduction in 1993 to the 25-million transistors 
Pentium III in the late nineties. Finally, the current Pentium 4 processors boast a modest 
55-million transistor count. 
Xilinx Virtex Series FPGA 
 With the design, we must choose large scale logic gate array to satisfy the system 
requirement. The latest release device is Virtex 5 series, but in development environment does not 
full support, we must choose the previous version. And the device Virtex 4 SX35 was chose. 
 SX series family is High-performance solution for Digital Signal Processing (DSP) 
applications. The specification of SX35 is in Table 4.1. 
 
 
 
 
 
 
 
 
 
 
 
 
The block diagram of development board is in Fig.4-2.1. Virtex 4 SX35 is the SRAM based 
FPGA device, when the power is off, the configuration information will lost. So the configuration 
device is need. In latest device, there are many kinds of method and device to configure, in 
configuration method such as SPI, JTAG, SelectMAP, Master Serial and Slave Serial, in device 
such as ROM, Linear FLASH, Serial FLASH, CompactFlash, JTAG direct configuration. (As in 
the Fig.4-2.2) 
 
 
 
 
 
 
 
 
Table 4.1 Virtex 4 SX35 spec. 
Fig.4-2.1 Virtex 4 and other system device 
 10 
File System 
In this system, the signal file is pre-saved in the Compact Flash disk drive. The file system 
must be access the flash device. We add a device into this embedded system named Xilinx 
SystemACE compact flash disk driver chip. 
 
 
 
 
 
 
 
 
 
Design with the SystemACE, we can integrated the whole configuration file into a 
CompactFlash device, but the support of the file format only the FAT16 file system be 
configurable, the FAT32 is only the function of file system (as Fig.4-2.5). 
 
 
 
 
 
 
 
 
 
Terminal and Debugging 
 To reduce the complexity of design and testing, we use the HyperTerminal to be our console 
terminal in Windows based system. Debug is an important part in system design. In large scale of 
systems also use the console terminal to be their system status monitor. With the respond message, 
we can know the step, exception or process occurs or not. 
 
 
 
 
 
 
 
 
Fig.4-2.4 SystemACE Flash device 
Fig.4-2.5 SystemACE application 
Fig.4-2.6 HyperTerminal 
 12 
 In the Table 4.1a, 4.1b we can compare the processing time difference between these 
generations. The Table 4.2a, 4.2b is the gate array resource usage of latest version. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Table 4.2a List of Generation and time consumption 
Table 4.2b Comparison diagram 
Table 4.3a FPGA resource usage 
 14 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Fig.4-3.3 is the output image. The system output image was saved in the storage device, 
because this image is a part of the image in the final image of the whole system, and output to the 
monitor is not useful to image combination. 
 
 
 
 
 
 
Fig.4-3.2a Terminal Result 
Fig.4-3.2b System Terminal Output 
Fig.4-3.3 Image output 
 16 
synchronous SRAM will speed up our system processing. 
z SOC Design: With FPGA design, using the logic cell implementing system can be 
easily converted to cell-based chip design. Beside the memory block cost much more 
die area in our system, the other function unit can be designed into a silicon die. 
 
Reference: 
[1]   Chris J. Myers “Asynchronous circuit design” Wiley & Sons, 2001 
[2]   Scott Hauck “Asynchronous Design Methodologies: An Overview” Proceedings of IEEE,  
Vol. 83, No. 1, pp. 69-93, January, 1995. 
 
 
計畫成果自評： 
1. 完成成果： 
利用現場可程式化邏輯閘陣列，實現於水下嵌入式系統，並且整合成像演算法
到本嵌入式系統，可運作無誤完成成像。將成像演算法以該嵌入是系統之特殊
處理器進行運算。 
2. 學術或應用價值： 
該計畫執行過程研究許多FPGA的設計方案，最後以合成嵌入式系統實現演算效
能，符合目前嵌入式系統應用之設計需求。 
3. 發表碩士論文： 
Chien-Chih Wang “Applying Field Programmable Gate Array Techniques to 
Underwater Embedded Systems Design” NTOU, 2007 
4. 發表國際會議論文： 
YuanLin Wen1, MuDer Jeng , LiDer Jeng and Fan, Pei-Shu “An Intelligent 
Technique Based on Petri Nets for Diagnosability Enhancement of Discrete Event 
Systems” KES International, 2006 
在 2006 10th International Conference on Knowledge-Based & Intelligent 
Information & Engineering Systems 會議期間，我的口述論文報告時間被安排在 10 月 10
號下午二點四十分。我所發表的論文題目是“An Intelligent Technique Based on Petri Nets 
for Diagnosability Enhancement of Discrete Event Systems＂歸類在 Logic Based 
Intelligent Information Systems session 中。整個報告過程相當順利，與會學者也當場
提出二個問題與我交換心得，讓我獲益匪淺，我並且說明了我們的作法並解釋讓他充份的了
解，也獲得他深度的肯定與認同，無形中增添不少信心，也學習到了更多的相關知識。 
 
本次會議原應由我的恩師電機系鄭慕德教授與會，惟因鄭老師於同一時間另有一個IEEE 
SMC 2006年度大會於台灣圓山飯店舉辦，其並擔任本次大會之Program Co-chair因此無法分
身，後簽奉同意改有筆者代理，有幸能代理老師出國參加學術會議真是難得的一次機會。 
本次會議為KES International 之年度大會，會議於十月九日至十月十一日，在英國
Bournemouth之國際會議中心舉行，共有1395篇論文投稿，最後大會接受480篇論文。這些文
章被組織為107個分組討論會，其中包含以下之系列討論會(multiple sessions):  
Fuzzy and Neuro-Fuzzy Systems, Data Mining, Intelligent Signal Processing, Control and Robotics, 
Intelligent Vision and Image Processing,Evolutionary Computation, Intelligent Systems 
Applications, Knowledge Management and Ontologies, AI for Decision Making, Communicative 
Intelligence,Evolutionary Computation,Intelligent Signal Processing, Control and Robotics, 
Machine Learning and Classical AI, Web Intelligence, Multimedia, e-Learning and Teaching, 
Hybrid Intelligent Systems,Fuzzy and Neuro-Fuzzy Systems,Industrial Applications of Intelligent 
Systems,Knowledge Based and Expert Systems…等。由上述這些主題看來，KES國際研討會是
一個主題相當廣泛的會議。本次大會還邀請了Prof. Nikola Kasabov, Prof. Josef Kitler, Prof. 
Jong-Hwan Kim, Prof. Luca Maria Gambardella, Dr Ben Azvine, Dr Danilo Mandic等六位教授擔
任大會演講，主題分別是「Evolving Intelligent Systems: Methods and Applications」,「Feature 
Selection in Pattern Recognition」,「Evolvable Genetic Robot in a Ubiquitous World」,「Ant Colony 
Optimisation」,「Industrial Applications of Intelligent Systems」,「Towards Multimodal Computing: 
Extracting Information from Signal Nonlinearity and Determinism」。 
在 2006 10th International Conference on Knowledge-Based & Intelligent 
Information & Engineering Systems 會議期間，我的口述論文報告時間被安排在 10 月 10
號下午二點四十分。我所發表的論文題目是“An Intelligent Technique Based on Petri Nets 
for Diagnosability Enhancement of Discrete Event Systems＂歸類在 Logic Based 
Intelligent Information Systems session 中。整個報告過程相當順利，與會學者也當場
提出二個問題與我交換心得，讓我獲益匪淺，我並且說明了我們的作法並解釋讓他充份的了
解，也獲得他深度的肯定與認同，無形中增添不少信心，也學習到了更多的相關知識。 
 
二、與會心得 
 
 An Intelligent Technique Based on Petri Nets for 
Diagnosability Enhancement of Discrete Event Systems 
YuanLin Wen1, MuDer Jeng 1, LiDer Jeng2 and Fan, Pei-Shu3 
1  Department of Electrical Engineering,  
National Taiwan Ocean University, Keelung, 202, Taiwan 
{D88530004, Jeng4}@mail.ntou.edu.tw 
2  Department of Electrical Engineering,  
Chung-Yuan Christian University, Chung-Li, 320, Taiwan 
Lider@cycu.edu.tw 
3  College of Mechanica and Electrical Engineering, 
 National Taipei University of Technology, Taipei, 106, Taiwan 
Fanpishu@yahoo.com.tw 
Abstract. This paper presents an intelligent systematic methodology for en-
hancing diagnosability of discrete event systems by adding sensors. The meth-
odology consists of the following iteractive steps. First, Petri nets are used to 
model the target system. Then, an algorithm of polynomial complexity is 
adopted to analyze a sufficient condition of diagnosability of the modeled sys-
tem. Here, diagnosability is defined in the context of the discrete event systems 
theory, which was first introduced by Sampath [3]. If the system is found to be 
possibly non-diagnosable, T-components of the Petri net model are computed 
to find a location in the system for adding a sensor. The objective is to distin-
guish multiple T-components with the same observable event sequences. The 
diagnosability-checking algorithm is used again to see if the system with the 
newly added sensor is diagnosable. The process is repeated until either the sys-
tem is diagnosable or diagnosability of the system cannot be enhanced.  
1   Introduction 
Discrete event system such as semiconductor manufacturing machines are very com-
plex and expensive, and therefore their reliable operations are significantly important 
for reducing the production costs. When a fault is diagnosed, a recovery procedure is 
taken to bring the machine back to the normal operational status.  
Diagnosability of discrete event systems was first defined formally by Sampath et 
al. [3]. The merit of their approach is that a model-based, systematic methodology is 
proposed to detect a specific type of failure in finite delay after its occurrence. In 
addition, they present a necessary and sufficient condition for checking diagnosability. 
One of the challenges of diagnosis is that not all events are observable. It is difficult to 
differentiate between a nominal and a faulty trace within a bounded delay from the 
time of the occurrence of a fault. Thus, the computational cost for checking diag-
                                                          
4
 Corresponding author 
 events longer) trace obtained by extending s  in L , then every trace ω  in L  that is 
observation equivalent to ν , i.e., ( ) ( )M Mω ν= , should contain in it a iF -type fail-
ure. In other words, a system is called diagnosable, if all of the failure types defined, 
no matter how the system trajectory gets into a failure event, and no matter what the 
following system continuations can be, we can always infer retrospectively in finite 
steps n and declare that a failure of the particular type has occurred. 
The following example informally illustrates the concept of non-diagnosable net. 
Example 1 Fig. 1 shows an FSM model G of some system where state 1 is the initial 
state. The event fξ  is a failure and thus unobservable while all other events , ,α β γ  
and δ  are normal and observable. Fig.1 has three cycles 6 7 8 6
β γ δ
→ → →  , 
3 4 5 3
β γ δ
→ → → and 9 10 11 9
β γ δ
→ → →  that correspond to the same observable mapping β γ δ , 
where an observable mapping maps the unobservable labels to nulls and the observ-
able labels to themselves. However, the former cycle is reached from a failure while 
the latter is not. Thus, the system is not diagnosable. 
 
The disadvantage of the FSM approach is the computational inefficiency, since the 
number of states of a system is in general exponential to the size of the system. 
In the following section, we will present our previous approach for checking diag-
nosability, which is based on net structures without enumerating the states. 
3   A Polynomial Algorithm for Checking Diagnosability 
We consider a system modeled by a Petri net, ( , , , , )oG P T I O M= . The set of places 
P is partitioned into the set of observable places oP and the set of unobservable uoP , 
i.e., o uoP P P= ∪ and o uoP P∩ = ∅ . The set of transitions T is partitioned into the set of 
observable transitions 
oT  and the set of unobservable transition uoT , i.e., o uoT T T= ∪  
and
o uoT T∩ = ∅ . Labels are associated with places and transitions denoting conditions 
and events, respectively. Failures are labels associated to unobservable transitions. We 
call a label associated with an unobservable place or transition an unobservable label. 
In a Petri net, a T-invariant may represent a firing sequence that takes the model 
from a marking back to that marking where a T-invariant is defined by the following 
equation: 
0=• XAT . 
The incidence matrix )),(( ij ptAA =  is defined as follows: 
)(,)(1 jiji tIptOpif ∉∈{=),( ij ptA
otherwise0
)(,)(1 jiji tOptIpif ∉∈−
 
A T-invariant shows the possibility of regeneration of a certain marking of the 
model. A T-invariant X is said to be minimal if there is no other invariant X1 such that 
 Hydride
MO
Water
From 
Vent Pipe
Gate Valve 
Set
Chemical Pump 
To Scrubber
Oil Mist 
Eliminator
Particulate
Pressure 
Sensor
Control 
PC
 
Fig. 3. Diagnosability Enhancement procedure. 
 Table 1. Observable labels of T-components. 
iX  Set of T-invariants iX  Observable labels without sensor ( ( ))T iC Xξ  
1X  {t2,t3,t4} , ,β γ δ< >  
2X  {t7,t8,t9} , ,β γ δ< >  
Next we analyze to see if sensors are available for use, This requires adequately 
understanding the system functions and its components, and can only be done manu-
ally. Support that after the manual analysis, we have   available sensors of Fig. 4 
shown in Table 2.  
Table 2. Available Sensors Table 
No. Fail-
ures 
Available Sensors Location 
1 1fσ  Pressure  ( pS ) Location 1l  in the system(e.g. output of a pump)  
2 1fσ  Temperature( tS ) Location 2l  in the System(e.g. process chamber)  
Then, we try to add all available sensors to the system of Fig.4, and collect all 
those observable sensor readings in Table 3, where P(H to H) means that the reading 
of the pressure sensor changes from High to High. 
For the pair of T-components with the same observable label as listed in Table 1, 
where 1( ( ))TC Xξ = 2( ( ))TC Xξ , ,β γ δ=< > , we obtain that after adding the pressure 
sensor pS , the new observable labels of the pair of  T-components are distinguishable. 
Therefore, pS  is added to the Diagnosability Enhancement Sensors Set ( )D S . The 
new observable labels after adding the pressure sensor pS  are shown in Fig. 5. In this 
example, adding the temperature sensor is useless since the pair of T-components still 
have the same observable label (< β ,T(H to L>,< γ ,T(L to H>,<δ ,T(H to H>). 
Table 3. Observable sensor readings of Fig.4 
Transition Event  Pressure Sensor  Temperature sensor 
t1 <α >  P(H to H) T(H to H) 
t2 < β > P(H to L) T(H to L) 
t3 < γ > P(L to H) T(L to H) 
t4 <δ > P(H to H) T(H to H) 
t6 <α >  P(H to H) T(H to H) 
t7 < β > P(H to H) T(H to L) 
t8 < γ > P(H to H) T(L to H) 
t9 <δ > P(H to H) T(H to H) 
 
Next, we check the well-diagnosability property of the new system. Since 
1( ( )) ( ,TC Xξ β= <  P(H to H>,< λ ,P(H to H)>, < δ ,P(H to H)>) and 
2( ( )) ( ,TC Xξ β= < P(H to L>,< λ ,P(L to H)>, <δ ,P(H to H)>), the new  system with 
pS  added is a well-diagnosable system with respect to failure 1f . 
The Diagnosability Enhancement Sensors Set ( )D S  has one sensor, pressure sen-
sor pS . Thus, we just need to add pS  sensors to the system to enhance its diagnosabil-
