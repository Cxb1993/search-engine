中文摘要 
在本研究計畫中，我們研發一個新的多面向(multi-facet)仲裁器，以及研發用於設計此
新仲裁器之新的階層化模型驅動平台式設計流程。此用於多面向新仲裁器開發之設計
流程如下三個設計層級(階段): 1. 高階仲裁器平台式設計模型推導，2. 中階仲裁器平台
式架構模型設計，與 3. 低階仲裁器的硬體實現設計和實作。 
 
 
 
 
英文摘要 
In this project, we have designed a new multi-facet arbiter and developed a new hierarchical 
model-driven platform-based design flow for the new arbiter via the hierarchical three 
phases: 1. the derivation of an arbiter design model, 2. the design of a platform-based arbiter 
architecture model based on the arbiter design model, 3. the implementation and automatic 
generation of the arbiter hardware from the architecture model.  
 
 
 
 
 
 
 
關鍵詞 
多面向(Multi-facet)、仲裁器(Arbiter)、模型驅動設計流程(Model-driven design flow)、設
計空間(Design space)、設計模型(Design model)。 
 
 
JOU et al.: MODEL-DRIVEN DESIGN AND GENERATION OF NEW MULTI-FACET ARBITERS: FROM THE DESIGN MODEL TO THE HARDWARE SYNTHESIS 1185
Fig. 1. N arbiters in a N×N crossbar switch.
in very large scale integration (VLSI) design by efficient and
fast automatic generations.
To meet the growing demand for designing the low cost
and/or high-speed arbiters, many arbiter implementations [3]–
[5], [7]–[11] have been proposed. For on-chip or off-chip
communication, the most popular arbiter scheme is the round-
robin arbiter, since it is fair and starvation-free. The iSLIP
[11] authors have implemented an N × N switch arbiters in
hardware which they call a programmable priority encoder.
Chao et al. [10] described the design of a round-robin arbiter
for a packet switch. They referred to their hardware design
as a ping pong arbiter. Using the same idea of the ping
pong, another arbiter design, called switch arbiter (SA), was
proposed in [3]. An SA is constructed by a tree structure
composed of 4 × 4 SA nodes. An SA node consists of a
D flip-flop, four priority encoders, a 4-bit ring counter, five
4-input OR gates, and four 2-input AND gates. The SA is
the fastest among known arbiters, but it has a more complex
structure. Zhengy and Yang [4] proposed two arbiters, PRRA
and IPRRA, which are based on a binary search algorithm and
have the least area but are slower.
In contrast to round-robin arbiters which divide the band-
width (BW) of a shared resource into equal parts for every
requester, BW-constraint arbiters are used in certain systems
in which the bandwidth requirements of requesters signifi-
cantly differ. In this circumstance, bandwidth requirements
of requesters are unpredictable. Thus, BW-constraint arbiters
arbitrate requesters according to their allocated bandwidth
weights (BW weights), which indicate their relative quantity
of bandwidth requirement. A larger allocated BW weight
corresponds to a more required bandwidth. LOTTERYBUS
[9] is a well-known BW-constraint arbiter that is often used in
SoCs to arbitrate on-chip buses. LOTTERYBUS decides the
granted request using a probability approach. Input requests
with larger BW weights are more likely to be granted, and
vice versa. Therefore, it avoids the starvation. If the arbiter
can allocate a resource to requesters in proportion to their BW
weights, the resource utilization will be maximized. Instead of
enforcing an upper bound on a requested service, the credit-
control static-priority arbiter (CCSP) proposed by Akesson
et al. [5] enforced an upper bound on a provided service. It can
provide appropriate bandwidth allocation when the bandwidth
requirement of requesters is unknown. Each input of the CCSP
accumulates the quantity of resources during each time unit
according to the magnitude of the average BW request ratio r,
where 0 ≤ r ≤ 1, and consumes it when the request arrivals.
None of the above arbiters meets all of the six objectives.
From the SoC design point of view the architectures of the
arbiters have not been rightly structured to date. The problem
resides in lack of the proper arbiter design model, architecture
model, and modular hardware design and generation, which
will be well addressed here by using 3-phase model-driven
flow.
Each phase is organized as follows. First, the design model
derivation phase (i.e., the phase 1 of the design flow) is
described among Sections II–V. Then, the architecture model
or template (i.e., the phase 2 of the design flow) is described
in Section VI. Finally, the arbiter hardware implementation
and generation phase (i.e., the phase 3 of the design flow) is
described among Sections VII and VIII.
And the rest sections of this paper are organized as follows.
Section II introduces the background for multi-facet arbiters.
Section III describes some issues of the arbiter design, with
the corresponding solutions provided in Section IV. Section
V describes the proposed arbiter design model. The proposed
arbiter architecture model and template are derived in Sec-
tion VI. In Section VII, we derive and propose an efficient
hardware implementation of the arbiter architecture model to
speed up much the arbitration performance. The automatic
generator is introduced in Section VIII before studying the
design results of multi-facet arbiters with various arbitrating
properties in Section IX. Finally, conclusions and future work
are presented in Section X.
II. Background for Multi-Facet Arbiters
When a monopolized-only resource is shared by N masters,
a unit of usage time of the resource (referred to as a time unit
hereafter) can be allocated to only one master by an arbiter.
Therefore, if many masters request the resource at the same
time, an arbiter is needed to fairly and efficiently determine
which master can use a time unit. In the following, we assume
that the cycle time of an arbiter is the same as a time unit for
simplicity of discussions, although, they can be different. The
time interval at which the arbiter has serviced every master
with a request is defined as an arbitration round, which is
determined by the number of masters who request the resource
simultaneously, but it does not exceed N time units, where N
is the number of masters.
An arbiter considers the request signals provided by each
master and some other information, including the following:
1) bandwidth (BW) request ratio of the masters: for example,
if the allocated BW request ratio of three masters is 3:2:1, the
first master is allocated three time units of the resource usage,
the second master is allocated two time units of resource
usage, and so on; 2) waiting latency (WL) of each master:
this time is defined as the number of time units that the
master waits for the arbiter’s grant; 3) resource granularity:
it indicates the maximum number of data units that a granted
master could obtain (transfer) from (to) the shared resource
per time unit. The data unit is defined as the basic unit of
the quantum or bandwidth that the shared resource could
JOU et al.: MODEL-DRIVEN DESIGN AND GENERATION OF NEW MULTI-FACET ARBITERS: FROM THE DESIGN MODEL TO THE HARDWARE SYNTHESIS 1187
lack of a comprehensive arbiter design, architecture models,
and the relative systematic design flow.
IV. Solutions to the Design Issues of Arbiters
To solve the problems encountered in arbiter design, the
following solutions are proposed.
A. Solution to the Issue of BW Request Quantity and Waiting
Latency Tradeoff
It is not appropriate to arbitrate the masters, which have
different WL requirements, based only on their BW request
quantities. An additional arbitration input, called the priority,
is added for each master; it is used to arbitrate the masters
under the BW request ratio constraint. Masters with small
WL requirements are assigned high priority. The arbiter grants
the masters according to their priorities and BW request
ratio. This priority-based BW request ratio arbitration can be
classified further into non-equal-priority arbitration and equal-
priority arbitration, which then should be implemented as a
BW request ratio-based round-robin arbiter. However, how
to combine the BW request ratio constraint and the priority?
Should this be priority-based BW request ratio arbitration or
BW request ratio-based priority arbitration? This is addressed
later during the development of the proposed new arbiter
design model.
B. Solution to the Issue of Resource Granularity and Arbitrat-
ing Latency Tradeoff
To deal with the coupling or tradeoff between resource gran-
ularity and AL, preemptive or non-preemptive arbitrations can
be used to decouple resource granularity and AL. Preemptive
and non-preemptive arbitrations belong to non-equal-priority-
based arbitration. Preemptive arbitration allows the higher-
priority masters to interrupt and preempt the resource usage of
a lower-priority master, and thus, higher-priority masters will
have smaller WLs than those of lower-priority masters.
Compared with preemption, non-preemptive arbitration can
decrease the ALs of the lower-priority masters, but increase
the WLs of higher-priority masters, which may introduce
the deadlock or starvation. A tradeoff between WL and AL
must thus be considered. To avoid the deadlocks or starvation
caused by non-preemptive arbitration, a bandwidth-weight
tuning scheme is proposed to regulate and limit bandwidth
gained by the masters. The scheme is presented in Section VI.
Again, should this be the priority-based preemptive arbitration
or the preemption-based priority arbitration? This is solved in
the construction of the arbiter design model following.
C. Solution to the Issue of Resource Granularity and Fairness
Tradeoff
The tight relation between resource granularity and AL
can be decoupled using a non-preemption arbitration design.
Therefore, the finest resource granularity is adopted to allocate
the shared resource to increase resource utilization while
keeping fairness. To achieve fairness, a set of masters’ BW
request ratios is used, and a counting-based master isolation
scheme is applied to protect the bandwidth of each master
from being taken by other masters. Each master is given some
time units, called BW quota. Every time the shared resource
is granted to and used by a master, that master’s BW quota is
decreased. When a master uses up its BW quota, its succeeding
requests are ignored by the arbiter to prevent the bandwidth
of other masters from being taken.
D. Solution to the Issue of Integrity
Parametric and composite design concepts are applied to de-
sign an arbiter which implements versatile arbitrating schemes
proposed above. The composite parametric arbiter template to
be developed should be reconfigured modularly as a linear-
priority arbiter with the preemption or non-preemption scheme
to favor higher-priority masters and lower-priority masters
with lower WLs and lower ALs, respectively. On the other
side, the modular arbiter also could be reconfigured as an
equal-priority arbiter like a round-robin arbiter to prevent
masters from deadlocks or starvations. Moreover, the master
isolation idea is implemented to maintain fairness between
masters. That is we want to develop a new multi-facet arbiter
design model and its architecture template (or model) in the
following sections to integrate the above-mentioned solutions.
V. Development of the New Multi-Facet Arbiter
Design Model
After the analyses and studies of arbiter issues and their
solutions, the design and development of a new arbiter design
model with multi-facet using the design space exploration
technique is described in detail below.
A. Design Space Exploration of the Arbiter Design Model
The design of the integrated arbiter design model with the
design space exploration method involves exploring alternate
arbiter configurations to generate an efficient design model.
Based on the arbiter design solutions above, the three essential
factors of arbitration are priority, preemption, and bandwidth.
These factors are explored to derive and build the proposed
multi-facet arbiter design model. How many essential factor
configurations (and their inverses) does the design space
have? How many valid arbiter designs are there? What is
the processing order of the essential factors in the multi-facet
design model for the design of a valid arbiter? In the design
space, every essential factor affects the arbitration. The design
space of a multi-facet arbiter with some or all of those factors
or their inverses may be wide, so an exact design model has
to be explored and designed for efficient arbiter design.
Assume that the three essential factors priority, preemp-
tion, and bandwidth, are labeled as I, E, and W, respec-
tively, and that they indicate that the arbiter will be realized
with the equal-priority, the preemptive and the bandwidth-
constraint schemes, respectively. I ′, E′, and W ′ indicate that
the arbiters will be realized with the non-equal-priority, the
non-preemptive, and the non-bandwidth-constraint schemes,
respectively. For example, an arbiter with I, E′, and W ′
has equal-priority, (then) non-preemption, and (finally) non-
bandwidth-constraint properties (circuit modules). Note that
JOU et al.: MODEL-DRIVEN DESIGN AND GENERATION OF NEW MULTI-FACET ARBITERS: FROM THE DESIGN MODEL TO THE HARDWARE SYNTHESIS 1189
Algorithm 1 PREM(ri0 ∼ riN−1, g0 ∼ gN−1)
Input: ri0∼ riN−1(N requests (masked), see Fig. 5)
Output: g0∼ gN−1(N output grants)
begin
for i = 0 to N − 1 do gi←0;
for i = 0 to N − 1 do begin
if rii= = 1 then gi←1;
break;
end-for
end
Fig. 5. New multi-facet arbiter architecture model, MAM, for arbiters in
Table I.
To derive the multi-facet architecture model, called MAM,
from the arbiter design model of Table I is just like to
implement the multi-facet arbiter’s architecture template from
the Table. In contrast to the top-down or left-to-right design
methodology of SoCs used in the design of the arbiter design
model in Table I, the bottom-up or right-to-left SoC implemen-
tation methodology is applied for the arbiter architecture and
template implementation from Table I. Thus, with the bottom-
up order of the essential factors preemption, priority and band-
width from the right to the left in the arbiter design model of
Table I, we first derive and implement the arbiter architecture
starting from the preemption property (the rightmost of the
arbiter design model) using the PREEMPTION module, which
has the arbiter request signals as the inputs and the grant sig-
nals as the outputs to realize the preemption arbitration. It may
preempt the lower-priority requesters and gives the grant to the
requester with the highest property when all those requests
come at the same time. The algorithm of the PREEMPTION
module, denoted as PREM, is designed as Algorithm 1, where
ri0∼ riN−1 are the signals masked by the TOKEN−CONTROL
module, and g0∼ gN−1 are the output grants.
Next, the non-preemptive and the priority properties, top and
right, respectively, from the preemption property in the design
model of Table I are considered. To realize the non-preemptive
and/or the equal-priority arbitrating properties based on the
PREEMPTION module, a masking operation that implements
the non-preemptive and the equal-priority properties on the
input (left) side of the PREEMPTION module by masking
undesired input requests of the PREEMPTION module is
adopted. To do this, it is required that: 1) know which input
requests are desired under a certain arbitrating property, and
2) mask those undesired input requests. To achieve 1, a
TOKEN−GENERATION module, which generates the tokens
(or masking information) used at the current cycle by refer-
encing the grant-relative information from the PREEMPTION
Algorithm 2 TG(I, ri0 ∼ riN−1, g0∼gN−1, Q0∼QN−1, D0∼DN−1)
Input: I, ri0∼riN−1, g0∼gN−1(N grants, see Fig. 5)
Input: Q0∼QN−1(N internal states)
Output : D0∼DN−1(N tokens)
begin
anyRI0←0; // N internal wires
anyRI1 ← ri0; // ri0: I/P from PREM module
if I == 1 // for equal-priority arbitration
then begin
for i = 0 to N-1 do begin
if i ≥ 2 then anyRIi← rii−1or anyRIi−1;
Di← Qi and anyRIi;
end
end
else begin // for non-equal-priority arbitration (I’)
for i = 0 to N-1 do Di← gi;
. . .
end
if . . . begin . . . end //expansible for any other
arbitration
output all Di
end
module at the previous time cycle, is applied. To achieve 2, a
TOKEN−CONTROL module, which masks and filters out the
undesired input requests according to the tokens generated by
the TOKEN− GENERATION module, is used.
In theTOKEN−GENERATION module, the tokens can be
generated differently according to the equal-priority, non-
equal-priority, or other arbitrating properties by setting the
parameters I or other parameters from outside. For exam-
ple, the tokens in non-preemptive arbitration are used to
tell the arbiter which higher-priority input requests should
be blocked such that the lower-priority input request can
be granted continuously; the tokens in the equal-priority
arbitration are used to inform the arbiter which input re-
quests will be granted during the present arbitration round.
Thus, the function of the TOKEN−GENERATION module
is expandable. The algorithm of the TOKEN−GENERATION
module, denoted as TG, is designed as Algorithm 2,
where Q0∼QN−1 are the internal states of the TOKEN−
CONTROL module, and D0 ∼ DN−1 are the token informa-
tion. The reconfiguration parameter, I, is used to configure the
priority arbitrating property.
The algorithm of the TOKEN−CONTROL module denoted
as TC, which masks the undesired input requests according
to the tokens generated by TG, is designed as Algorithm 3,
where re0∼reN−1 are signals which have not yet been masked
by the TOKEN−CONTROL module, and the reconfiguration
parameter, E, is used to configure the preemption arbitrating
property. The main function of the TC module is used to filter
out the input requests according to D’s masking information,
and thus realize the equal-priority or the non-preemptive
arbitrating property.
Based on the algorithm, the tokens generated from the
TOKEN−GENERATION module can be used to mask some
input requests to avoid undesired ones from entering the
JOU et al.: MODEL-DRIVEN DESIGN AND GENERATION OF NEW MULTI-FACET ARBITERS: FROM THE DESIGN MODEL TO THE HARDWARE SYNTHESIS 1191
arbiter is a whole multi-facet arbiter, as shown in Fig. 5; it
can be reconfigured to behave any arbitrating property by
setting the appropriate reconfiguration parameters W, I and
E as shown in Fig. 5 and Table I.
Note that the template in Fig. 5 is reusable, composite,
modular and expandable. Take the WI ′ E arbiter design as
an example. Using the MAM, it can be directly obtained by
setting the parameters W, I, and E to 101. Or, we can remove
the modules TOKEN−CONTROL and TOKEN−GENERATION
from the figure of the MAM, and connect the two remaining
modules directly to obtain the design. In other words, the
proposed multi-facet arbiter can be flexibly configured and
synthesized with some feature(s) (e.g., W ′I, W ′I ′E′, WI, and
so on) reconfigurable at run-time or fixed at compile-time
(synthesis).
VII. Hardware Realization of the Multi-Facet
Arbiter Architecture Model
The unified and flexible multi-facet arbiter architecture
model, MAM, includes an integrated and composite archi-
tecture template and module algorithms, which can be used
to derive arbiter hardware. However, MAM does not provide
information on how to efficiently implement efficient and/or
flexible hardware for the multi-facet arbiter. If the arbiter
hardware is implemented directly from the N-input MAM,
the speed and area complexities all are O(N); for large-scale
arbitration, such cost (of speed and area) is high and thus
not suitable for hardware implementation. How to realize
cost-efficiency arbiter hardware in terms of circuit speed
and area from MAM is still a problem, and will be solved
here.
To keep the basic integrated architecture template of the
MAM unchanged while maintaining a high performance
and/or a low cost, the decentralized modular structure and the
parallel hardware implementation are the only ways for imple-
menting efficient hardware for the template. A thorough exam-
ination of the MAM architecture template and the respective
algorithms of TOKEN−CONTROL, TOKEN−GENERATION,
and BANDWIDTH modules shows that they can be imple-
mented using a decentralized parallel tree. First, the algorithm
of the PREEMPTION module is examined in detail; we found
that it can be designed high performance with a parallel tree.
Then, due to the modular property of the MAM architecture
template, we can combine those respective modules into an
integrated multi-facet arbiter with a decentralized and parallel
tree hardware structure, called DPT, efficiently, where the
TOKEN−CONTROL, TOKEN− GENERATION and BAND-
WIDTH modules are designed and located decentralizedly
on individual leaves of the DPT, and the PREEMPTION
module forms the parallel tree structure of the DPT. How
to develop and design this efficient DPT structure and its
hardware modules for the multi-facet arbiters are topics of
the following subsections.
A. Derivation of the DPT
There are many parallel tree structures, including the binary
tree, the quad tree, and the octal tree, with at most two, four,
Algorithm 5 N−Input−Multi-facet−Arbiter
Input: r0∼rN−1, w0∼wN−1, W, I, E, rst (reset signal)
Output : g0∼gN−1(N output grants)
begin
L ←log4N	; // assume N > 4 here
for i = 0 to (N/ 4 – 1) do-parallel
LeafNodeArbit(r4i ∼r4i+3, w4i ∼ w4i+3, W, I, E, set−rr,
g4i∼g4i+3, ggi+(4L−1−4)/3, rgi+(4L−1−4)/3);
end-for
NonleafTree (rg0 ∼ rg(4L−4)/3−1, gg0 ∼ gg(4L−4)/3−1);
4InputRoot(rst, rg0∼rg3, gg0∼gg3, set−rr); // a R4 root
output g0∼gN−1;
end
and eight branches at a node, respectively. To find the most
appropriate parallel tree structure for the proposed hardware
model, the quad tree is used as an example to design the DPT.
After the structure of the DPT is designed, the DPT design
cases (binary tree, quad tree, and octal tree) are analyzed and
the best one for decentralized parallel arbitration is determined.
Based on the algorithm of the PREEMPTION module, a
quad tree-based N-input DPT can be derived and defined as
a complete 4-ary tree with L = log4N levels. Nodes in the
DPT are partitioned into levels. The node at level 0 is called
the root node, which has two cases, one with two and one
with four children, respectively, depending on N. In the first
case, if log2N is even, then the root node with four children
is designed, denoted as R4. In the second case, the root node
has two children and is denoted as R2. The internal nodes,
Ii, of the DPT are labeled from i = 0 to i = M − 1 (where
M is defined later) from left to right, from the high level to
the low level (toward leaves). If the root node is R4 and L≥2,
then M = 4(4L−2 − 1)/3; otherwise, M = 2(4L−2 − 1)/3.
Nodes at level log4N − 1 are called leaf nodes, denoted as
lj , and labeled from j = 0 to j = N/4 − 1 from left to right.
Input requests r4k, r4k+1, r4k+2, and r4k+3 are processed at leaf
node lk. Leaf nodes include the combined function of modules
TOKEN−CONTROL, TOKEN−GENERATION, BANDWIDTH,
and the initial part of PREEMPTION.
The DPT is highly scalable with input request number
N ; following its tree structure, large-input DPTs can be
recursively designed and constructed from small-input DPTs.
An N-input DPT can be constructed using four (N/4)-input, or
two (N/2)-input DPTs and one root node, R4 or R2, as shown
in Fig. 6(a) and (b), respectively. Consider the root node with
four children case as an example for the following design. The
DPT hardware algorithm, N−Input−Multi-facet−Arbiter, of
the multi-facet arbiter with size N is designed as Algorithm 5.
In the hardware algorithm of N−Input−Multi-facet−Arbiter
and for any other module, the keyword do-parallel means
that the operations in its scope are executed and intercon-
nected in parallel to reflect their parallel design features.
In N−Input−Multi-facet−Arbiter, there are three sub-hardware
units: the leaf nodes called LeafNodeArbit(. . . ), the internal
nodes called NonleafTree(...), and one root node called 4Inpu-
tRoot in the DPT structure to be designed; their designs are
described in detail in the following sections.
JOU et al.: MODEL-DRIVEN DESIGN AND GENERATION OF NEW MULTI-FACET ARBITERS: FROM THE DESIGN MODEL TO THE HARDWARE SYNTHESIS 1193
Fig. 7. Hardware diagram of a 4-input LeafNodeArbit.
signal is ANDed with the Q signal to realize non-preemptive
arbitration, i.e., rii ← rei · Q.
The main function of the TG module is to generate the D
signals, masking information, to inform the TC to mask input
requests to realize the equal-priority or the non-preemptive
arbitrating property by using multiplexers. The function of the
PREM module is a linear-priority selector. The outputs of the
PREM module, i.e., g′0 ˜g′3, are ANDed with the en signal.
The rg signal is used to inform the upper level, the Non-
leafTree, whether there is any request signal in it. We use
the set−rr signal to preset the Q value in the 1−InputTC
module and load the wi value into QB in the 1−InputBW
module. The signal en which is received from the upper
level, the NonleafTree, is used to enable four 1−InputBW and
four 1−InputTC modules and perform AND logic operation
with g′0 to g′3 signals. After finishing the designs of hardware
implementation algorithms for LeafNodeArbit(...) and their
relative sub-hardware modules, the hardware algorithms of
functions NonleafTree(...) and 4InputRoot(...) are designed as
shown below.
C. Design of the NonleafTree Structure
The NonleafTree structure is composed of Internal−Nodes
based on the PREEMPTION module in the hardware template
of MAM. If an Internal−Node is the leftmost (middle-left,
middle-right, and rightmost) child node of its parent node, the
input en is connected to the output gg0 (gg1, gg2, and gg3)
from the parent node. An Internal−Node σ at level L−2 is the
parent node of four leaf nodes. The inputs rg0, rg1, rg2, and
rg3 of σ are connected to the corresponding output rg of its
four children leaf nodes, respectively. The hardware algorithm,
NonleafTree(...), is designed as Algorithm 9.
The hardware design of all Internal−Nodes and their con-
necting patterns in the DPT is the same, making it scalable
and reusable. An Internal−Node is used to implement a 4-
input linear-priority selector that always selects the input with
the highest priority in it as the granted output as follows. It
has one output rg, which represents the representative request
of any request in its four inputs.
Algorithm 9 NonleafTree(rg0 ∼ rg(4log4N	−4)/3−1,
gg0∼gg(4log4N	−4)/3−1)
Input: rg4∼rg(4log4N	−4)/3−1, gg0∼gg3
Output: rg0∼rg3, gg4∼gg(4log4N	−4)/3−1
begin
L ←log4N	; // the number of levels
for i = L-2 downto 1 do
for j = 0 to 4i- 1 do-parallel
RG ← 4(4i-1)/3 + 4j;
GP ← (4i-1)/3 + j -1;
Internal−Node(rgRG∼rgRG+3, ggGP ,
ggRG∼ggRG+3, rgGP );
end-for
end-for
outputrg0∼rg3, gg4∼ gg(4L−4)/3−1;
end
Algorithm 10 Internal−Node(rg0∼rg3, en, gg0∼gg3, rg)
Input: rg0∼rg3, en
Output: gg0∼gg3, rg
begin
rg ← rg0 or rg1 or rg2 or rg3;
if en == 1 then
if rg0 == 1 then gg0 ←1
else begin gg0 ← 0;
if rg1 == 1 then gg1 ← 1
else begin gg1 ← 0;
if rg2 == 1 then gg2← 1
else begingg2←1;
if rg3 == 1 then gg3← 1 else gg3 ← 0;
end
end
end
end
else begin gg0 ← 0; gg1 ← 0; gg2 ← 0; gg3 ← 0; end
output gg0∼gg3, rg;
end
D. Design of the Root Node
The case of a root node with four children (nodes) is taken
as an example (the process is the same for the root with two
children). The root has four request inputs marked as rg0,
rg1, rg2, and rg3 from its four children, respectively. It also
provides four grant outputs gg0, gg1, gg2, and gg3 to notify
its leftmost, middle-left, middle-right, and rightmost children,
respectively. The main function of the root nodes is to realize
the preemption arbitration PREM; the hardware algorithms for
two cases of the root node are shown in Algorithm 11.
E. Different DPT Tree Structures Evaluation
Why is a quad tree with 4-input PREEMPTION modules
used to recursively construct the DPT structure instead of
the 2-input binary tree or the 8-input octal tree? Taking
the design of a typical 16-input WI arbiter as an example,
2-, 4-, and 8-input PREEMPTION modules are examined,
respectively. With the Synopsys Design Vision (2007.03-sp3)
JOU et al.: MODEL-DRIVEN DESIGN AND GENERATION OF NEW MULTI-FACET ARBITERS: FROM THE DESIGN MODEL TO THE HARDWARE SYNTHESIS 1195
TABLE IV
Area Results (No. of NAND2XL) for Six Arbiters
N 4 8 16 32 64 128 256 512
Arbiters
W ′I 63 131 262 533 1071 2150 4317 8606
W ′I ′E′ 77 143 214 451 1099 1628 3850 7177
W ′I ′E 13 31 106 277 409 501 1328 2346
WI 569 985 1545 3417 7274 12 647 25 105 48 385
WI ′E′ 503 923 1480 3138 6355 11 573 24 172 46 215
WI ′E 337 612 1037 2272 4376 7898 16 381 34 222
TABLE V
Timing Results (In Terms of FO4 Delay) for W ′I , SA, PRRA, and
IPRRAs
N 4 8 16 32 64 128 256 512
Arbiters
W ′I 7.52 12.86 15.77 18.31 20.38 23.53 25.47 28.50
SA 9.34 11.16 12.25 16.25 19.16 23.17 26.08 29.96
PRRA 12.01 15.52 19.04 22.68 26.20 29.72 33.23 36.75
IPRRA 11.16 14.68 18.56 21.71 25.35 29.35 33.35 37.48
compute the time and area complexities of them, and compare
them with the proposed WI BW-constraint arbiter theoretically
in Section IX-B.
A. Comparison of Round-Robin Arbiters
The round-robin W ′I arbiter generated by CGA is compared
to existing efficient round-robin arbiters SA [3], PRRA, and
IPRRA [4]. Table V shows the timing results of the designs
in terms of FO4 delay. Although the delay of W ′I is slightly
higher than that of SA for the cases with a small number of
inputs, it outperforms the SA for the cases with a large number
of inputs, and guarantees fairness. Additionally, the SA is not
fair for the non-uniformly distributed requests [4], and the
growing demand for a large number of inputs is the necessaries
in the modern MPSoCs with thousands of cores [1], [2]. From
the above point of view, our W ′I still has the advantage of the
performance.
W ′I is faster than other designs with delay time improve-
ments of 25.3% over PRRA and 21.5% over IPRRA for the
512-input case. As shown in Fig. 9, the critical path delays of
SA and W ′I grow with log4N while others grow with log2N.
The time delay of W ′I grows slower than that of SA because
of its scalable design for internal nodes and the root node
in the DPT structure. The timing improvements of W ′I over
PRRA and IPRRA are more significant for large scales since
the DPT has fewer levels compared to those of PRRA and
IPRRA.
Table VI shows the area results of the designs in terms
of the number of NAND2XL gates. Compared with PRRA
and IPRRA, W ′I requires fewer NAND2XL gates in all cases
due to its efficient DPT structure. W ′I also has lower area
costs than those of SA in all cases since most of its nodes
are implemented in scalable combinational logic except leaf
nodes. W ′I has the lowest area cost of all known round-robin
arbiters. As shown in Fig. 10, the area costs of all designs
grow linearly with N. The area improvements of W ′I over the
Fig. 9. Growing curves of critical path delays (in terms of FO4 delay) for
four arbiters.
TABLE VI
Area Results for W ′I , SA, PRRA, and IPRRA
N 4 8 16 32 64 128 256 512
Arbiters
W ′I 63 131 262 533 1071 2150 4317 8606
SA 72 198 420 894 1814 3685 7395 14 846
PRRA 72 161 341 702 1423 2865 5749 11 518
IPRRA 71 155 326 668 1355 2728 5484 10 965
Fig. 10. Area comparison of W ′I, IPRRA, PRRA, and SA in terms of the
number of NAND-2 gates.
other designs are proportional to the number of input requests
due to the proposed scalable design, simple implementation,
and the complete design model and template.
In summary, the performance and area of the proposed W ′I
arbiter all are almost better than others. One of main reasons
is that the proposed arbiter uses the DPT tree, which is a
decentralized quad tree structure. The tree used in PRRA and
IPRRA is a centralized binary tree with a ring interconnection
connecting each input; SA also uses a centralized quad tree.
So, the proposed multi-facet arbiter could obtain the batter
timing and area results.
B. Comparisons of BW-Constraint Arbiters
In this section, the WI arbiter is compared to existing BW-
constraint arbiters LOTTERYBUS [9] and CCSP [5] only in
terms of their delay time and area complexities according
to their respective hardware structures, because their detailed
circuit designs are unknown.
All the BW-constraint arbiters use BW weights to indicate
the BW quantity held by each requester. For simplicity, it is
assumed the width of the BW weight value is b. After some
non-trivial computations (omitted here), the time and area
complexities of LOTTERYBUS, CCSP and WI were obtained
恩計畫成果自評 
本計畫主要目的在研發一個新的多面向(multi-facet)仲裁器，以及研發用於設計此
新仲裁器之新的階層化模型驅動平台式設計流程。在經過一年的時間，已發展出
一套全新的多面向仲裁器模型，並且基於此模型，建構出階層化仲裁器模型驅動
平台。藉此平台，我們設計出七種不同功能的全新仲裁器。相關成果發表在國際
知名會議 IEEE Design Automation Conference (DAC 2010)，並且發表在 IEEE 
Transactions on Computer-Aided Design of Integrated Circuits and Systems 
(TCAD)。整體來說，我們已達成本計劃這一年的研究進度。以下是我們的成果： 
 
1. 論文發表 
I. Jer Min Jou, Sih-Sian Wu, Yun-Lung Lee, Cheng Chou, Yuan-Long 
Jeang, “New model-driven design and generation of multi-facet 
arbiters part I: From the design model to the architecture model”, 
Design Automation Conference (DAC), 2010 47th ACM/IEEE. 
II. Jer Min Jou, Yun-Lung Lee, Sih-Sian Wu, "Efficient design and 
generation of a multi-facet arbiter", 2010 IEEE 8th Symposium on 
Application Specific Processors. 
III. Jer Min Jou, Yun-Lung Lee, Sih-Sian Wu, "Model-Driven Design 
and Generation of New Multi-Facet Arbiters: From the Design 
Model to the Hardware Synthesis", accepted, to be published in 
IEEE Transactions on Computer-Aided Design of Integrated 
Circuits and Systems (TCAD). 
 
2. 專利 
I. 中華民國專利申請中, 周哲民, et. al. “非集中式絕對公平仲裁
器”, 文號:0972033120-0. 
II. 中華民國專利申請中, 周哲民, et. al. “快速公平仲裁器”, 
文號:0972020612-0. 
III. 中華民國專利申請中, 周哲民, et. al. “兩種易擴充快速公平
仲裁器”, 文號:0972020611-0. 
 
3. 競賽得獎 
  -榮獲思源2010 EDA獎 
 
 
 - 2 - 
題，並且在執行之前就將同步的問題處理掉，如此就不會在執行時產生衝突。像
是常用的靜態多執行緒同步方式是柵欄(barrier)同步機制，做法是在撰寫程式
時，將存取共用資料的程式區段加入柵欄同步機制，使得同一時間只有一個執行
緒能夠存取共用資料。但柵欄同步機制的缺點是其它也會存取共用資料的執行緒
需要等待，浪費了處理核心的運算資源，因而使得效能及並行度受到限制。然而，
有些執行緒間的運算資料及控制資料相關情形只在多執行緒並行執行時才會產
生，是屬於動態的且難以在事先就察覺到，而靜態的多執行緒並行執行同步方式
無法滿足此般需求，不僅使並行程式的撰寫不具彈性，更無法有效提升效能。未
來，多執行緒動態並行執行將是研究主流。 
 
三、 建議 
感謝國科會所給予的補助，對於個人研究與發展有極大助益。另外由此次大
陸之參訪了解對岸進步之神速，與做某些事之用心(因為有利可圖)及彈性(當然這
是極權之故)，值得我們深思並要加大努力才行。建議國內多到對岸參訪，除了
官式行程之外，應多看多聽知己知彼，才可能適當反應以期百戰百勝。另應積極
爭取承辦國際會議的機會，以增加我國之國際學術的能見度，促進與他國學者之
深入交流與合作，也可藉由會議期間與本地工商資源結合，做整體規劃，以促進
國家未來之發展。 
 
四、 攜回資料名稱及內容 
1. 論文光碟一片 
2. 大會手冊一本 
3. International Conference on Automatic Control and  Artificial Intelligence 2012 
Call for Papers 一張 
 
99 年度專題研究計畫研究成果彙整表 
計畫主持人：周哲民 計畫編號：99-2221-E-006-224- 
計畫名稱：多面向仲裁器之模型驅動平台式設計與實作(I) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 3 3 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 1 1 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 1 100%  
研究報告/技術報告 0 0 100%  
研討會論文 2 2 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
