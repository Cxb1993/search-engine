In the first of the project, we did the research in 
AUTOSAR architecture. In the second of this project, 
we focus on development tools for AUTOSAR platform, 
especially for ArcCore tool. At the end, In order to 
improve the performance of this kind of application, 
we study the OpenCL architecture and design the 
OpenCL compiler flow. This report includes the 
following items for our preliminary results: AUTOSAR 
tools research, ArcCore platform implementation 
analysis, Design an automotive compiler framework for 
OpenCL 
 
英文關鍵詞： AUTOSAR、Automotive Electronics、Software Component、
ArcCore tool、OpenCL 
 
 I 
 
摘    要 
汽車電子產業發展近三十年，為了滿足省能、安全、舒適、智慧化等創新需求，汽車內所搭載的
車用電子系統產品比例持續成長。提升了各種需求的同時，卻也大幅增加車用電子環境的複雜度，使
得電子系統整合愈來愈困難，這對於各大車廠以及電子元件製造商車是個重要且急需解決的議題。為
了解決這個議題，在 2003 年歐美日主要車廠成立 AUTOSAR(AUTomotive Open System ARchitecture) 
汽車開放系統架構聯盟，提供一標準化汽車軟體架構，透過整合或通用軟體元件以提高軟體的交換及
可再利用性，幫助車用電子產業的成長。 
在本計畫中，一開始先對 AUTOSAR 做統整的介紹並分析 AUTOSAR 相關軟體工具開發平台，
再針對 ArcCore 開發平台的實作進行研究，最後再藉由 T32 和 Code Composer Studio 來分析程式執
行時的行為，提供車用電子開發人員對於 AUTOSAR 的實作與開發更深入的了解，幫助目前國內對於
車用系統的相關技術發展，其次，我們也對車用影像處理器進行研究，為了加強車用影像的效能，本
計畫針對 OpenCL 架構，設計了 compiler framework 來幫助車用影像處理器達到加速的效果。這個報告
中有下列幾個重點項目： 
AUTOSAR 開發工具平台研究 
 ArcCore 平台的實作分析 
 AUTOSAR 程式的模擬與測試 
 設計車用 OpenCL compiler framework。 
 
 
 
 
 
 
 
 
 
 
 
關鍵詞：AUTOSAR、車用電子、軟體元件、ArcCore 開發平台、OpenCL 編譯技術 
 
 
 
 1 
 
壹、 前言 
在此計畫中，本子計畫對已對 AUTOSAR 的軟體架構從 AUTOSAR Software、AUTOSAR Run-Time 
Environment、AUTOSAR Basic Software到底層ECU-Hardware做分析與研究，並且有相當程度之了解；
因此主要進行之項目為 AUTOSAR 相關軟體開發工具的研究，透過開發平台實作進行研究，提供車
用電子開發人員對於 AUTOSAR 的實作與開發更深入的了解，幫助目前國內對於車用系統的相關技
術發展。 
 其次，為了改善車用影像軟體的效能，本計畫針對 OpenCL 架構進行研究，並設計出針對車用之
OpenCL compiler framework，藉以達到加速的效果。除此之外，我們也有做 SIMD 來加速車用應用程
式的執行，以及使用 c++ vector 來幫助程式的可讀性，來加強車用影像處理器的效能及方便開發人員
撰寫程式。 
 
貳、 研究背景及目的 
車用電子產業發展迅速，汽車內所搭載的車用電子系統愈來愈多，舉凡從與行車控制相關的電子
控制元件(ECU)、微控制元件(MCU)到行車安全防護系統(Active/Passive Safety)、車載導航系統(In-Dash 
Navigation)和資訊娛樂系統(In-Vehicle Information)，這些車用電子系統提高了行車的安全度、便利性
以及滿足了資訊娛樂的需求，但大大增加車用電子電機環境的複雜度。當一台車內所搭載的車用電子
系統愈來愈多，使得軟硬體整合的困難度也逐漸提升，拉長了汽車生產的周期同時也增加了後續維護
的費用，這對於各大車廠以及電子元件製造商車是個重要且急需解決的議題。為了增加車用電子軟體
的重覆使用性，追求一致的標準與加速車用電子系統的整合，在 2003 年歐美日主要車廠成立
AUTOSAR(AUTomotive Open System ARchitecture) 汽車開放系統架構聯盟，由各大車廠、一級供應
商、工具製造商以及晶片製造商所組成，提供一個標準化汽車軟體架構，透過整合或通用軟體元件以
提高軟體的交換及可再利用性，縮短整個車用電子元件系統的軟硬體開發時程，同時達到降低開發成
本的目的。 
藉由 AUTOSAR 此模組化的開發方法，幫助車電系統製造商從上描述 ECU 的硬體規格，以及定
義共同的軟體溝通介面，最後產生與硬體控制相關的基礎軟體(OS, ECU abstraction, drivers, services, 
communication, …)以及相關的 runtime 環境(APIs, data types, … )、跟應用程式，縮短整個車電元件的
軟硬體開發時程，遵循國際標準的車電元件軟體介面，可在不同汽車平台上運作，同時可重複使用，
將大大降低汽車電子軟體整合成本，提高車廠採購意願提昇其產值。由此看出，AUTSOAR 對於車電
系統軟體開發尤其重要，因此，本計畫進行 AUTOSAR 標準化架構之研究，並針對 AUTOSAR 核心
RTE 層進行分析與探討，為國內車用電子技術帶來寶貴經驗。 
在另一方，為了加速車用影像處理器的效能，本計畫針對 OpenCL 做相關研究。OpenCL 是由 
Khronos Group 針對 heterogeneous device 進行平行化運算所設計的標準 API 以及程式語言，主要設
計目的是要提供一個容易使用、且適用於各種不同裝置的平行化計算平台。目前，最為常見的就是所
謂的 GPGPU 應用，由於各家廠商的 GPGPU 方案都是互不相容的，而這對 GPGPU 的發展也是不
利的，所以 Apple 決定提出一個統一的 GPGPU 方案。這個方案得到包括 AMD、IBM、Intel、NVIDIA 
等相關廠商的支持，並很快就交由 Khronos Group 進行標準化。OpenCL 提供了兩種平行化的模式，
 3 
 
體、感測器或者是驅動器在AUTOSAR Software層都代表一個個的軟體元件，將負責操作不
同的工作。 
 AUTOSAR Basic Software, BSW：包含許多不同的基本軟體，提供底層必要的功能，如系統
服務(Services)、特定電子控制單元功能(ECU Abstraction)、I/O驅動程式(Microcontroller 
Abstraction)及特定原始設備製造商(OEM)功能(Complex Drivers)等。 
 ECU-Hardware：ECU可視為車中的微電腦控制系統，由運算單元、儲存單元、軟出入單元以
及控制電路所組成，其功能就是將所接收到的訊息經過程式運算之後輸出相對應的結果。 
由以上可以知道 AUTOSAR 提供了一套車用電子標準架構來幫助車用軟體的開發，透過這套標準
化架構，上層應用軟體將可以方便移植到同樣符合 AUTOSAR 標準的平台之上。 
為了要更深入的了解 AUTOSAR 整體架構，本計畫研究目前國際上知名的 AUTOSAR 開發平台，
以下先針對目前國際上較著名的 AUTOSAR 開發平台做探討與比較： 
 Dspace：支援 AUTOSAR 4.0 版本 
 SystemDesk：符合AUTOSAR標準的分散式系統定義工具。OEM可以使用此工具描述軟
體元件，SystemDesk描述軟體元件，或者將現存的軟體元件導入SystemDesk做進一步處
理。其AUTOSAR執行環境生成功能，可用來產生原始碼並且經由TargetLink來最佳化。
此外也提供模擬平台，用來測試軟體平台或子系統的運作與效能。 
 TargetLink AUTOSAR module：提供AUTOSAR軟體元件描述、模型設計、原始碼生成、
模擬（支援MIL/SIL/PIL迴路測試）等功能。 
 Vector：支援 AUTOSAR 3.0、3.1 版本 
 DaVinci System Architect：一個符合AUTOSAR標準的分散式系統定義工具，OEM可以使
用DaVinci System Architect進行車輛的分散式功能定義，並生成正式的規範。系統供應商
也可以使用DaVinci System Architect進行分系統的定義。 
 DaVinci Developer：一個專用於符合AUTOSAR標準的軟體發展工具，它可以用來配置
並生成MICROSAR RTE。 
 DaVinci Network Designer：一個網路通信設計工具，可以與DaVinci System Architect和
DaVinci Developer一起構成AUTOSAR工具鏈，也可以單獨用於汽車匯流排網路設計。 
 MICROSAR：是Vector根據AUTOSAR標準開發的一系列軟體模組，包括RTE、CAL、
OS、COM、IO、SYS和DIAG等等。 
 MathWorks：支援 AUTOSAR 3.2 版本 
 Simulink：提供其功能強大且十分彈性的內建函式庫，讓工程人員不必另外使用新模組
或工具開發AUTOSAR元件。 
 Real-time Workshop Embedded Coder：產生與AUTOSAR標準相容的程式碼，及自動產生
支援AUTOSAR 執行環境API的測試架構，使得軟體迴路測試得以快速實現。 
 Software-in-the-loop：確認已產生的程式碼是否有效，並與參考的模型行為加以比對測試。 
 ArcCore：支援 AUTOSAR 3.1 版本 
 Arctic Core：一個符合AUTOSAR標準的開放原始碼嵌入式系統平台，提供一系列軟體模
組，包括OS、COM、CAN、LIN、DET…等。 
 5 
 
 
圖二. Arctic Core AUTOSAR 3.1 Roadmap 
(source: http://arccore.com/arctic-core-autosar-roadmap) 
 在圖二中的 AUTOSAR RTE 以及 AUTOSAR OS 即為本計畫的研究重點，下圖三為 Arctic Core 
實作的目錄架構，左邊為軟體開發者提供的任務配置及程式應用內容；右邊則是 Arctic Core 支援的
標準函式庫，提供給軟體開發者呼叫底層的函式，包含通訊架構以及系統操作和設備的驅動等。其中 
system 即為 kernel OS 的部分，而使用者的 RTE code 將會呼叫標準函式庫裡的 RTE 或 component 
來執行。 
圖三.  ArcCore directory architecture 
 7 
 
Events 也會被封裝起來自動呼叫；而作業系統和通訊設備因為都跟 TARGET 上的 I/O PORT 和 
INTERRUPT 習習相關，必須基於特定的 CPU 架構來實作。 
在這裡用 “blinker node” 來舉例說明整個程式的流程，整個程式主要就是會透過 RTE 來跟底層
做溝通，改變目前 blinker 的狀態值，使 blinker 可以順利達到閃爍的效果。我們先從 Task.c 來開始
整個程式的流程，在 Task.c 中有三個 Task ，分別是 OsIdle、bTask25、Startup： 
 
 在 Os_Cfg.c 中必須依照系統的規格 (圖 6.1) 設定每個 Tasks 的資訊 (圖 6.2)，如有設定 Alarm 
也必須一起定義 (圖 6.3)。 
void OsIdle( void ) {
       for(;;); 
} 
/* 
 * This basic task should execute every 25 OS ticks
 */ 
void bTask25( void ) { 
       blinker_component_main(); 
       TerminateTask(); 
} /* 
 * This is the startup task. It is activated once immediately after the OS i started. 
 */ 
void Startup( void ) { 
       // Call second phase of startup sequence. 
       EcuM_StartupTwo(); 
       /* 
        * Activate scheduled tasks. OS tick is 1ms. 
        * The Blink is run every 25 ms with an offset of 25ms. 
        */ 
       SetRelAlarm(ALARM_ID_alarm10, 10, 10); // ADC data acquisition 
       SetRelAlarm(ALARM_ID_alarm25, 25, 25); // ADC data acquisition 
       SetRelAlarm(ALARM_ID_alarm100, 100, 100); // ADC data acquisition 
       // End of startup_task(). 
       TerminateTask(); 
} 
 9 
 
要呼叫到底層的函式就必須透過 Component 的 AUTOSAR 介面來和 RTE 進行溝通，藉由 RTE 的
幫忙來呼叫到 BSW 的函式。 
圖八.   OS、task、component and RTE relationship 
 
B. Simulation and Testing 
 
表二. Arctic Core support platforms 
目前 Arctic Core 已經支援許多平台，除了 MCU 也有 Mapping 一些重要的 driver ，如 CAN、
ADC、DIO 等等。如表二所示，Arctic Core 支援的平台包含 ARM、PowerPC 及 HCS 等架構，如
果想要使用模擬器來測試也提供 MPC551x 系列和 MPC5554 來開發車用電子應用軟體。在 PowerPC 
中的 MPC5516 和 ARM 的 TI-TMS570 此二種開發平台為汽車應用中常使用的微控制器平台，而 
TI-TMS570 上除了包含二顆 ARM Cortex-R4F MPU (如圖九) ，更擁有 FlexRay、CAN、LIN、HET 定
 11 
 
 
2. 如果在 nowFlash 中 “Keep Window” 的項目也有勾選，會看到載入過程資訊的對話框，最
下面會有程式載入的執行時間，以及錯誤資訊。 
 
3. 開啟 Code Composer Studio ，選擇 “Target → Debug…” ，新增一個新的 Debug section 。 
4. 設定 Debug section，在 Main 中選擇你所載入的執行檔， Debugger 中設定 CPU 和 Load 
選項為 “Load symbol only” ，接著按下 Debug 按鈕。 
 13 
 
 
我們可以嘗試在 tiny.c 的 etask_1 function 裡設 break point ，再按 run 執行就可以進入這個 
task 中繼續 trace 整個 source code。 
 
 
 15 
 
徑。在這裡 CPU 我們選擇 “MPC5516” .  
 
 
5. 選擇 ArcCore → Load  ，在出現的對話框中選擇要燒錄的執行檔。 
 
 17 
 
C.  OpenCL for Embedded Automotive Applications 
我們以 PAC Duo 當作實驗的平台，PAC Duo 是由一顆 ARM 和兩顆由工研院所開發的 PAC DSP
組合而成的，每顆 PAC DSP 搭載有 VLIW 的指令集並且是 five-way issue 的 DSP，同時，在 PAC DSP
上有三個 cluster，其一主要是負責 control flow，另外兩個主要是負責計算。圖13主要是OpenCL platform 
model 和 memory model在 PAC Duo 上的對應關係，而圖 14 則是將 OpenCL execution model 對應到 PAC 
Duo 上。 
 
圖 13. OpenCL platform model and memory model 
 
圖 14. OpenCL execution model 
 
 OpenCL compiler support for PAC Duo 
為了讓 PAC DSP 能夠支援 OpenCL C program，我們整合了自身開發的 PAC DSP C compiler 以及
其他研究單位的研發成果(reference)，進而為 PAC DSP 設計了一套 OpenCL compilation flow(圖 15)。 
 
圖 15. OpenCL compiler flow 
 19 
 
 
圖 16. Performance for OpenCL compiler framework 
 
伍、 結果與討論 
在這個計畫中，我們一開始先對 AUTOSAR 的架構做一個統整的介紹，並探討與比較目前國際
上的 AUTOSAR 軟體開發工具平台；其次我們針對有開放原始碼的 ArcCore 開發平台工具做進一步
的研究，分析其原始碼的架構，與 AUTOSAR 的相對應關係，讓軟體開發人員更了解 AUTOSAR 的
實作與開發流程；最後我們使用 T32 模擬器和 Code Composer Studio 的 IDE 來對 MPC5516 和 
TI-TMS570 開發板進行模擬與測試基於 AUTOSAR 標準所開發之程式碼，實際了解程式行為與實作
設計。 
在另一方面，本計畫為 embedded multi-core DSP system－PAC Duo 設計以及實做了 OpenCL 的
framework，不同於 GPGPU，DSPs 是 embedded system，而且通常都搭載有特殊的 computing resource
用來達到高效能以及 low-power 的效果，因此，我們不僅僅只有設計 compilation flow 和 runtime 
system，同時我們也提出了名為 Cluster-aware Work-item Dispatching 的 optimization 技巧，將原本 data 
parallel 的 OpenCL 轉換為 instruction parallel，而實驗結果也顯示，藉由 CWD optimization，我們的
performance 最多可以增進 1.68 倍，而平均也有 1.33 倍的增進。 
 
陸、 參考文獻 
[1]  Official website of the AUTOSAR Partnership: www.autosar.org 
[2]  Official website of the OSEK VDX Portal: www.osek-vdx.org 
[3]  Official website of the Jaspar: www.jaspar.jp 
[4]  Official website of the GENIVI Alliance: www.genivi.org 
[5]  AUTOSAR GbR: AUTOSAR Technical Overview V2.2.1 (2008) 
[6]  AUTOSAR GbR: Software Component Template V3.0.1 (2008) 
[7]  AUTOSAR GbR: AUTOSAR methodology V1.2.1 (2008) 
[8]  AUTOSAR GbR: AUTOSAR Specification of Functional Bus V1.0.1 (2008) 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/08/07
國科會補助計畫
計畫名稱: 子計畫一：車用電子系統開發平台以及最佳化工具設計(1/3)
計畫主持人: 李政崑
計畫編號: 100-2220-E-007-003- 學門領域: 智慧電子科技計畫-整合型學術研
究計畫
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
此計劃的成果，研發車用 OpenCL 編譯器最佳化技術，不僅對於產業界能提升車
用電子廠商的國際競爭力外，也預期可以結合國內廠商的硬體研發實力，將我
們所發展的各項技術與演算法在多核心嵌入式平台下實現，預期對國內車用電
子產業競爭力有很大的助益，本計畫也預計將會針對其進行相關業界的技術轉
移以及專利申請。 
並且本計畫延續著 99 年國科會＇ 先進車用電子系統開發平台總計畫＇的成果
繼續將車電系統之研究向前推進，目前已與工研院學界分包案針對車用電子軟
體系統開發平台進行研究合作，未來將繼續與工研院合作，針對車用馬達軟硬
體開發技術之研究，進行相關技術討論與合作。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
