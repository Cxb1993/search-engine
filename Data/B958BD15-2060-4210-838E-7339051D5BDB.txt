 表 C012                                                                         共 25 頁  第      頁 2 
中文摘要 
本計畫針對多個特定領域的應用程式在硬體架構方面（包括：資料流路徑，控制單元，指令集，
元件之間的連線，以及記憶體系統）進行客製化，以期達到效能、電源和彈性的平衡，並且降低設計
實作的成本和複雜度。 
此一客製化流程，將根據所給定的應用程式集以及硬體架構的限制。經由系統化的分析，該特定
應用程式的算術計算、資料傳遞和記憶體儲存之間的關聯結構都能展現出來。接著發展編譯流程的基
礎架構，用以分析應用程式的複雜相依性、控制流程和資料相依性。評估所設計產生的特定應用架構
的效能、電源和成本。。 
關鍵詞：特定應用架構 (Application-Specific Architecture), 特定應用指令 (Application-Specific 
Instruction) 
 
 
 
 
英文摘要 
The focus of this project is to customize a set of applications along with all aspects of a hardware 
architecture such as the datapath, control path, instruction set, interconnect, and instruction/data memory 
subsystems to achieve the balance among performance, energy, and flexibility as well as to reduce both cost 
and complexity of implementations for embedded systems. 
This customization will be started from the given application programs and optional hardware 
configuration constraints. The compilation infrastructure to analyze the complicated dependence, control flow, 
and dataflow of a set of application programs was developed to derive a highly efficient Application Specific 
Architecture (ASA). 
Key Words: Application-Specific Architecture, Application-Specific Instruction 
 
 
 
研究目的 
The goal of this year is to build an infrastructure for research in application specific architecture 
formulations and backend compilation for application-specific instructions, coprocessor, and loop accelerator. 
In order to investigate and evaluate ASAs, retargetable compilers and simulators are required which can be 
tuned with minimum effort to generate code to evaluate the target ASAs. The following research activities 
will be accomplished in the 1
st
 year to achieve the success of this project:  
 To formulate ASA problem to efficiently exploit various forms of parallelism include Instruction 
Level Parallelism (ILP), fine-grain Thread Level Parallelism (TLP), and Loop-Level Parallelism 
(LLP). 
 To establish the GCC compilation system to form the research basis of compilation.  
 To extend the GCC with new capabilities of retargetable ASI and ASCop support. 
 To establish the SimpleScalar toolset to provide an RISC infrastructure for architectural modeling, 
simulation and evaluation. 
 To establish the Trimaran infrastructure to form the research basis multi-clustered VLIW 
architectures. 
 To extend the Trimaran system with new capabilities of retargetable ASI and ASCop support. 
 To establish the ArchC infrastructure to support SystemC-based Machine Description 
 
 
 
 
 
 
 表 C012                                                                         共 25 頁  第      頁 4 
unrolling systematically to break the boundary of basic blocks. Secondly, from the algorithmic perspective, 
we will use a novel technique of using local registers in the AFU to overcome the operand I/O constraints to 
an ASI. 
 
Figure1. The mathematic formulation of ASIs. 
 
 
Figure2. The mathematic formulation of the single 
cut identification. 
 
 
 
Figure3. The mathematic formulation of the 
isomorphic checking. 
 
 
 
Figure4. The mathematic formulation of ASI 
selection.
Rretargetable GCC compilation system 
In this project, we add an ASI replacement pass into GCC to extend an existing ISA with custom 
instructions for domain-specific processor acceleration and to support these instructions into the compiler. 
The proposed ASIP design flow for application analysis and code synthesis in GCC is depicted in Figure 5 
and 6 using the suggestions of [23]. 
 
 
 
Figure5. ASA Design Flow with GCC 
Compilation Process 
 
 
 
Figure 6. ASI Replacement Pass for GCC back-end. 
AchC for RISC infrastructure  
SystemC has been used as a system level modeling language to support descriptions of ASA (right now, 
these descriptions are not synthesizable). The ArchC Simulator Generator (acsim) [24] has been composed by 
a simulator generator and a decoder generator in order to create all C++ classes and/or SystemC modules 
necessary to build the architecture simulator. In this project, we extracted the compiler dependent information 
from these two descriptions to GCC’s machine description file. We developed a complete design framework 
in Figure 7 using ArchC to integrate application analysis, ASI, ASCop, and ASLA generation and 
selection,and code synthesis for ASA automatic exploration. 
  6 
[2]  A. Verma et al., “Rethinking custom ISE identification: a new processor-agnostic method,” Proceedings of 
the 2007 international Conference on Compilers, Architecture, and Synthesis For Embedded Systems, 
Salzburg, Austria, 2007. 
[3] R. Leupers et al., “Instruction Selection for Embedded DSPs with Complex Instructions,” Proc. European 
Design Automation Conf., Sept. 1996. 
[4] A. Aho et al., “Code Generation Using Tree Pattern Matching and Dynamic Programming,” ACM Trans. 
Programming Languages and Systems, vol. 11, no. 4, pp. 491-516, Oct. 1989.  
[5] H. Choi et al., “Synthesis of Application Specific Instructions for Embedded DSP Software,” IEEE Trans. 
Computers, vol. 48, no. 6, pp. 603-614, June 1999.  
[6] M. Hall et al., “Maximizing Multiprocessor Performance with the SUIF Compiler," IEEE Computer, 
December 1996. 
[7] M. Gschwind et al., “Instruction set selection for ASIP design,” Proceedings of the Seventh International 
Workshop on Hardware/Software Codesign 1999 (CODES ’99), 3-5 May 1999, Pages: 7-11. 
[8] I. Huang and A.M. Despain, “Synthesis of Application Specific Instruction Sets,” IEEE Trans. Computer 
Aided Design, vol. 14, no. 6, June 1995. 
[9] J.V. Praet et al., “Instruction Set Definition and Instruction Selection for ASIPs,” Proc. Int'l Symp. High 
Level Synthesis, 1994. 
[10] B. Kienhuis et al., “The construction of a retargetable simulator for an architecture template,” Proceedings of 
the Sixth International Workshop on Hardware/Software Codesign 1998 (CODES/CASHE ’98),15-18 
March 1998, Pages: 125-129. 
[11] S. Hanono et al., “Instruction selection, resource allocation, and scheduling in the AVIV retargetable code 
generator,” Proceedings of the Design Automation Conference 1998, 15-19 June 1998, Pages: 510-515. 
[12] A. Verma et al., “Rethinking custom ISE identification: a new processor-agnostic method,” Proceedings of 
the 2007 international Conference on Compilers, Architecture, and Synthesis For Embedded Systems, 
Salzburg, Austria, 2007. 
[13] F. Sun et al., “Custom-instruction synthesis for extensible-processor platforms,” IEEE Trans. Comput. Aided 
Des. Integr. Circuits Syst., vol. 23, no. 2, pp. 216–228, Feb. 2004 
[14] N. Clark et al. Application-specific processing on a general-purpose core via transparent instruction set 
customization,” Proc. of the 37th Annual International Symposium on Microarchitecture, pages 30–40,Dec. 
2004. 
[15] J. Cong et al., “Application-Specific Instruction Generation for Configurable Processor Architectures,” Proc. 
Int'l Symp. Field Programmable Gate Arrays, pp. 183-189, 2004.  
[16] R. Kastne et al., “Instruction Generation for Hybrid Reconfigurable Systems,” ACM Trans. Design 
Automation of Electronic Systems, vol. 7, no. 4, Apr. 2002. 
[17] L. Pozzi et al., “Exact and Approximate Algorithms for the Extension of Embedded Processor Instruction 
Sets,” IEEE Trans. Computer Aided Design, vol. 25, no. 7, July 2006. 
[18] D. Fischer et al., “Efficient architecture/compiler co-exploration for ASIPs,” In Int. Conf. Compilers, 
Architecture, & Synthesis for Embedded Systems, pages 27.34, Oct. 2002. 
[19] 陳柏宏, " Task Partition and Scheduling on Multiple Heterogeneous Application Specific Instruction Set 
Processors" 逢甲大學資訊工程學系碩士論文, 2009 
[20] 曾成濱, " Application Specific Instruction set Exploration on VLIW Architecture" 逢甲大學資訊工程學系
碩士論文, 2009 
[21] 許哲榮, " Automatic Instruction-Set Extension for Domain-Specific Multiple Programs" 逢甲大學資訊工
程學系碩士論文, 2008 
[22] 蔡昀澤, " Application specific architecture design using ArchC " 逢甲大學資訊工程學系碩士論文, 2009 
[23] K. Kennedy and J. R. Allen. Optimizing compilers for modern architectures: A dependence-based approach. 
Morgan Kaufmann Publishers Inc., 2002. 
[24] http://archc.sourceforge.net/ 
[25] K. Fan et al., “Modulo scheduling for highly customized datapaths to increase hardware reusability,” Proc. 
of the 2008 International Symposium on Code Generation and Optimization, pages 124–133, Apr. 2008. 
[26] D. W. Wall. Limits of instruction-level parallelism. In ASPLOS, 1991. 
 
附錄 
WORLDCOMP'10 (The 2010 World Congress in Computer Science, Computer Engineering, and Applied 
Computing), ESA'10 - 8th International Conference on Embedded Systems and Applications,July 12-15, 2010, 
Monte Carlo Resort, Las Vegas Nevada, USA. pp.105-108 
 
  8 
 
  10 
 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                    日期：99年 07月 21日 
                                 
一、參加會議經過 
逢甲大學資訊工程學系副教授王益文 於民國 99 年 7 月 12 日至 7 月 15 日，在美
國拉斯維加斯(Las Vegas, USA)參加 2010年第 8屆嵌入式系統與應用國際研討會議(英
文簡稱為 ESA'10)。 
ESA'10 為 WORLDCOMP'10 (The 2010 World Congress in Computer Science, 
Computer Engineering, and Applied Computing) 之下的其中一個研討會，網址為
http://www.world-academy-of-science.org/worldcomp09/ws。本次 WORLDCOMP'10 共
包含了 22個不同的研討會，同時於拉斯維加斯舉行。自 2006年起，WORLDCOMP每年皆
在拉斯維加斯舉辦，今年已經是第五年。而其所涵蓋的研究課題均與資訊工程領域有
關：舉凡硬體設計、影像處理、資料探勘、數位學習、分散式計算、人工智慧、軟體
工程、電子商務，以及生物資訊等著名的研究主題，在 WORLDCOMP 底下均各自有其專
屬的研討會。 
計畫編號 NSC  98-2221-E-035 -061 
計畫名稱 嵌入式系統之特定應用架構研究(I) 
出國人員
姓名 
王益文 
服務機構
及職稱 
逢甲大學資訊工程學系  副教授 
會議時間 
99年 7月 12日至 
99年 7月 15日 
會議地點 
美國拉斯維加斯(Las Vegas)之
Monte Carlo Resort Hotel 
會議名稱 
第 8屆嵌入式系統與應用國際研討會議 
(ESA'10- 8th International Conference on Embedded Systems and 
Applications) 
發表論文
題目 
Application Specific Instruction set Exploration on VLIW 
Architectures 
“FPGA-Accelerated Floating-Point Customization on Extensible 
Computing Systems” 
 Sunil Kr. Singh, R.K. Singh, M.P.S. Bhatia , “System Level 
Architectural Synthesis and Compilation Technique in Reconfigurable 
Computing System” 
 Che Wei Lin, Chang Hong Lin , “A Power-saving Code-compression Design 
for the VLIW Embedded Systems” 
ESA'10研討會議程在 7月 15日的傍晚結束後，我於 7月 15日晚上離開拉斯維
加斯，最後於 7月 19日深夜返抵台灣。 
 
二、與會心得 
這些專題演講中，理論與實務面均兼顧，十分值得花時間聽講。其中最有興趣的是
網格運算，雲端運算，網路上的平行計算即將成為未來資訊領域上的研究與應用重點。 
在我進行報告的時候，約有二十四位學者在現場。session結束後，有一些熱烈的
討論，獲得一些很好的意見。多數報告者，在完成自己的報告後便直接離場了。 
在每天會議行程結束後，利用晚上剩餘的時間參觀拉斯維加斯。出席 BIOCOMP'10
是相當寶貴的經驗，搭十多個小時的飛機，收穫也非常豐富。 
 
三、建議 
拉斯維加斯，夏天中午的溫度可以達到攝氏四十幾度。晚上最冷的時候仍有
33℃。外地人實在不容易適應，與會人士要注意防曬，多補充水分。如果是六月
Application Specific Instruction set Exploration              
on VLIW Architectures 
 
Chengpin Tseng, Chiuyun Hung, De-Sheng Chen, Kuei-Chung Chang and Yi-wen Wang 
Department of Information Engineering and Computer Science, Feng Chia University, Taichung 407, Taiwan
 
 
Abstract - Selecting operations on critical path as 
Application Specific Instruction set (ASIs) extension and 
scheduling along with parallel operations on a multiple-issue 
VLIW architecture can obtain a better performance with 
efficient hardware utilization. However, manually explore 
ASIs may be very complex and time consuming. This paper 
presents an automatic design flow for ASIs exploration on 
VLIW architectures using a Force-Directed Scheduling (FDS) 
algorithm and a proposed heuristic. Firstly, the applications 
in C source code will be translated into a data flow graph 
representation, and then using the proposed heuristic to 
explore efficient ASIs and simultaneously cooperating with 
FDS for VLIW. The experimental results show that our 
approach obtains average 12% improvement from the 
performance of the maximum instruction level parallelism 
(ILP) on the base VLIW without ASIs. 
Keywords: Application Specific Instructions, VLIW, Force-
Directed Scheduling  
 
1 Introduction 
  Both Application Specific Instruction set (ASIs) 
on base processor and VLIW architectures are two of the 
most popular methodologies to achieve the required 
computing power in embedded system design. The VLIW 
architecture is utilized to provide instruction level parallelism, 
whereas ASI is used to shorten critical path. Selecting 
operations on critical path as ASI and scheduling parallel 
operations on a multiple-issue architecture can obtain the 
better performance with efficient hardware utilization. 
In this paper, a methodology is proposed for exploring 
ILP  based on Trimaran Infrastructure [2], a compiler and 
simulator tool-chain for VLIW. The FDS algorithm [1] is 
used to obtain the initial number of Functional Units (FUs) 
and the initial instruction scheduling. Then the heuristic is 
applied to iteratively select ASIs and reschedule instructions 
to reduce the execution latency and FU utilization.  
______________________________________ 
This work was supported by the National Science Council of 
Taiwan under Grant NSC 98-2221-E-035 -061 - 
All finally selected ASIs will be implemented as an 
Application-specific Function Unit (AFU) and the extended 
instruction set of the original VLIW. The hardware cost and 
the number of I/O ports of an ASI will be considered as given 
constraints. The objective is to reduce the execution latency 
of the application programs.  
2 Related work 
 Comprehensive studies of VLIW instruction set 
customization can be found in [3,4,5]. The number of 
registers and FUs will also be customized for scalability. The 
results show that the study of applications in detail can be 
beneficial to automatically select instruction set. 
Although the infinite number of FUs can provide 
satisfactory ILP to speedup, it is still possible to improve the 
execution speed by applying ASIs [6]. However, the ASI 
exploration methodology for multi-issue architecture should 
be different from single issue, because not all of the parallel 
operations should be counted into the profits of an ASI, but 
the real gain of an ASI will be the slack of critical path 
operations instead [7]. In this paper, three ASI estimation 
methodologies are summarized: objective function based, 
scheduling based, and simulation based. Usually the 
scheduling based methodology can get the balance between 
the exploration time and the precision at ASIs selection phase, 
but the assumption of “infinite number of FUs” may 
misestimate the real performance gain during ASI selection.   
The deviations of critical path after applying an ASI are 
also an important issue to decrease the benefits of selected 
ASIs. Wu et al. [8], new ASI candidates are generated from 
the new critical path information of previously selected ASI 
candidates. However, their simple greedy method will always 
choose the high performance ASIs from the ASI candidate 
pool as final ASIs. The co-effect on critical path among these 
ASIs will lead to a low quality solution.  
3 Design methodology 
 We present an automatic design flow using a FDS 
algorithm cooperated with the proposed heuristic for ASIs 
exploration on VLIW architectures. The input of proposed 
methodology is source codes of an application, which is 
written in C language. The Trimaran [2] is used to generate 
Children of the application. Height(k) is the normalization of 
height(k).  
)(*))()(()( kRkHeightkChildrenkScheFree +=    (1) 
)
)(
)(,
)(
)(()(
kchildren
kheight
kheight
kchildrenMinkR =             (2) 
The value of children(k) an height(k) should be balanced 
that all idle FUs can be filled and no child is leaved. Any ASI 
with imbalance value may lead to a worse utilization. For 
example, if the value of height(k) is larger than the value of 
children(k), there will not be enough children to fill the large 
amount of idle FUs. R(k) represents the imbalance, as in (2). 
Even with a large Children(k) or Height(k),  ScheFree(k) may 
be still small while the FUs utilization are very imbalanced.   
Figure. 2.  ASI Latency 
With multi-issue architecture, the time saving of an ASI 
only saves the slack on critical path. We assume all of non-
critical path operations can be perfectly parallel executed on 
FUs. Therefore, the slack of those operations is not counted 
into the time saving of ASI. ET_SW(t) is the execution latency 
of operations which are in the critical path of template t when 
executes on base processor. ET_HW(t) is the execution 
latency that template t be implemented as an ASI. 
ASI_saving(t) represents the time saving which ET_SW(t) 
subtracts ET_HW(t). For example (Figure 2), subgraph 8, 7, 
10 is a template and node 7, 10 is on critical path. The 
ET_SW(t) is sum of the execution cycles of node 7, 10 on 
base processor. ET_HW(t) is the sum of the hardware latency 
of node 7,10. ASI_saving(k) is the sum of the ASI_saving(t) of 
all templates in candidate k. Occ(k) is the sum of all the 
execution times of templates in candidate k. Latency(k) is the 
total time saving of candidate k which is normalized with all 
candidates C, as in (3).  
∑∑
∈∈
=
CiCi
kOcc
kOcc
isavingASI
ksavingASIkLatency
)(
)(*
)(_
)(_)(         (3) 
The number of utilized FUs can be reduced if an ASI 
includes the maximum parallel operations. There are two 
types of FUs can be reduced: Integer/Floating Point FU. 
ISaving(t) is the number of reduced I-type FUs of template t 
in a BB. FSaving(t) is the number of reduced F-type FUs. For 
example, the number of maximum parallel I-type operations 
of BB 0 is 4. If an ASI includes two operations of them, it 
reduces two I-type FUs usage of BB 0 ideally. The maximum 
number of FUs usage is different between BBs, and only the 
BB with globally maximum one can really reduce the FU 
usage by applying ASI. IFSaving(k) represents such property, 
as in (4). Imax and Fmax are the number of I-type and F-type 
FUs of an application after FDS scheduling. MI(t) and MF(t) 
are binary values. MI(t) is 0 if template t is not in the global 
maximum BB. And 1 if is in the global maximum BB.  
  
∑∑
∈∈
+=
CtCt FMax
tFSavingtMF
IMax
tISavingtMIkIFSaving )(*)()(*)()(
      (4) 
Finally, the PriorityValue(k) of candidate k is used as the 
priority of selecting ASI, as in (5). 
PriorityValue(k)= ScheFree(k)+ Latency(k)+ IFSaving(k)         (5) 
5 Experimental results 
5.1 Simulation Environment 
The benchmarks are from Mibench [9] and the assembly 
level IR is generated by Trimaran 4.0. For the proposed 
methodology, the value of HW-Quota is unlimited, and 
Nin/Nout is given as 3/2. We use the value of hardware latency 
(Table. I) as the hardware cost. The result is evaluated by a 
very simple instruction set simulation model: ScheBase which 
only estimates the computing behaviour and without memory 
miss consideration.  
TABLE I  
LATENCY OF INSTRUCTIONS IN CYCLES 
Name Latency Name Latency Name Latency
ABS 0.5 SHL 0.2 Store 1 
ADD 0.5 CMPP 0.3 Branch 1 
SUB 0.5 MOVE 0.1 CONV 0.2 
DIV 7.2 Load_C1 2 MAX 0.5 
MPY 2.3 Load_C2 7 MIN 0.5 
5.2 Experimental Results 
In the experiment, we compare the results of proposed 
methodology with the result which do not use ASIs. Although 
the maximum ILP is been satisfied by the base architecture, 
the results still show an average 12% improvement while 
using ASIs.  
Figure 3 shows the results of sha. The x-axis is the base 
VLIW architecture which indicates the I/O constraints and the 
無研發成果推廣資料 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
國外研討會論文篇 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
