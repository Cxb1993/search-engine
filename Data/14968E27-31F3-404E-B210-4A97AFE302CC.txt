ABSTRACT  
 
In recent years, many researches have introduced that a programmable method 
which computes many complex image processing tasks is offered based on the 
architecture of Cellular Neural Networks (CNN). The goal of this project is to propose 
the architecture of CNN consists of the analog computational units which can do 
real-time and parallel processing. One ideal property of CNN is that the signal values 
are placed on a regular geometric 2-D grid, and the direct interactions between signal 
values are limited within a finite local neighborhood. Based on this property, the 
architecture is easily implemented on VLSI for image texture boundary detection. In 
order to handle and display image information, the bio-inspired perceptual processor, 
called BIP, is designed to optimize the execution of short, computationally-intensive 
loops. The reduced instruction set computer (RISC) architecture, however, is a 
powerful basis for implementing BIP. This architecture provides an effective 
branching mechanism, a deterministic cache strategy, and a powerful load/store 
concept. Bio-inspired perceptual applications are generally characterized as 
computationally intensive with a large data, loop-dominant control flow behavior, and 
accumulation-based operations. This BIP can quickly execute matrix operations 
without extra overhead. High flexibility in use, small area on silicon, high data 
throughput, and fast portability to a wide range of technologies are our main targets in 
the core development. 
 
摘   要 
 近年來，多數的研究已經說明在仿細胞神經網路(Cellular Neural Networks; 
CNN) 型態的架構下，提供一個可用程式化的方式來處理多數複雜的影像處
理工作。本計劃提出CNN的架構中包含了可做即時處理的平行類比計算單
元，其中有一個理想的特性是這些處理單元是有規則的二維陣列排列，且本
身與鄰近的細胞單元為區域性的元件連接。由於此種特性，使得這種架構很
容易在超大型積體電路上實現。為了要處理影像的資訊，bio-inspired perceptua
處理器（bio-inspired perceptual processor, BIP）是設計用來最佳化密集性迴圈
的計算，我們利用精簡指令集來實現BIP；精簡指令集的架構提供有效率的
branch機制，決定性的 cache策略以及儲存和載入的觀念。Bio-inspired 
perceptual的應用常常會用到大量資料的計算，迴圈的行為控制以及累加的運
算。我們設計此晶片的目標：達到快速的作矩陣的運算、更有彈性運用、減
少晶片上佔用的面積、較高的資料產能以及大範圍的通訊距離和快速的攜帶
型科技。 
 
cloning template defined by two (2r + 1) × (2r + 1) real matrices A and B, as well as 
the constant term I. In addition, as a very special case, if the input and the initial state 
values are sufficiently small and f is piecewise linear, then the dynamics of the CNN 
array is linear. 
Unlike other standard analog processing arrays, or neural networks, the 
one-to-one geometric (topographic) correspondence between the processing elements 
and the processed signal-array elements (e.g., pixels) is of crucial importance. 
Moreover, the template has geometrical meanings which can be exploited to provide 
with geometric insights and simpler design methods. 
Σ ∫ f
1−
*A
*B
Z
u yxx&
 
Fig. 1: The dynamic route of state in CNN. 
 
( )x t
( )y t
 
Fig. 2: The feature of the equation. 
 
2. CNN-Based Texture Boundary Detection 
Based on the processing element in Fig. , the system architecture of the analog 
circuit for the CNN-based TBD is constructed here. The circuit system is a conceptual 
block diagram of an analog computer shown in Fig.. It consists of the 16×16 CNN 
array with templates, the analog absolute value circuit, and the summation unit. To 
schematic view of the modified single neural element (cell). The input current to the 
cell can be set continuously within the range limited by the unit current. This will 
result in the nonlinear function for Iyij(t). The sigmoid function is realized by using 
two-level shifted current mirrors connected in series. The saturation levels of the 
sigmoid with slope set as 1 are determined by the current source IL. This piecewise 
approximation of symmetric current limiting with cascaded current mirrors has been 
used effectively in other implementations, but most of implementations are applied 
for binary image processing only. 
 
In addition, a single cell includes the neuron cell unit, the template A unit, and 
the template B unit shown in Fig. 5. The neural cell unit for the proposed algorithm 
must contain two input nodes. To obtain negative template coefficients in the 
current-mode design, both the template A and B units contain one current inverter in 
our design and the details will be described in following section. The correct cell 
activities are regulated by the switches within the single cell circuit, whose 
functionalities are listed in Table 1. 
 
Table 1: Functionalities of the switches in the schematic circuit in Fig. . 
Logic 
Switch 
High Voltage 
(3.3V) 
Low Voltage 
(0V) 
Vac Normal operation Initial phase 
Vtap Choosing positive template A Choosing negative template A 
Vtbp Choosing positive template B Choosing negative template B 
 
 
 
Fig. 5: Schematic circuit of a single CNN cell with fixed templates design. 
 
 
(a) (b) (c) 
 
(d) 
Fig. 6: Template realization in the circuit of CNN-based TBD, where (a) is for 
positive output, (b) is for current inverter, (c) is for the image input unit, and (d) is for 
the programmable current amplifier. 
 
 
5. Boundary Selection 
The boundary conditions are defined by the border cells which surround the 
active grid. Any virtual variable in i×ij must be specified via boundary conditions, of 
which the most commonly used are for 5×5 neighborhood. Excepting 16×16 cells, the 
central 8×8 cells are the real array of the image, and the others cells are the boundary 
cells. The boundary conditions in our design are like padding processing, but are the 
extending of the central 8×8 cells. The width of the boundary cells depends on the 
size of the Gaussian filters. The real boundary conditions outside the 16×16 cells can 
be considered as fixed, zero-flux, and dynamic boundary conditions, respectively. 
However, the reasons why we choose the zero-flue condition as the boundary 
condition are due to no input in our algorithm and the natural definition (no cells, no 
inputs). 
 
Mbin  iuij (t)   
Ai,j;k,l．iykl (t) 
(1:1)
 
(a) 
 
(b) 
Fig. 8: (a) Results of the modified Gaussian filters. (b) Results of the 
CNN-based Gaussian filters. 
 
    The results shown in Fig. 8(a) are similar to Fig 8(b) but not exactly the same. 
Because the differences between (a) and (b) exist, the results of distance processing 
and threshold processing after modified Gaussian filters and CNN-based Gaussian 
filters will be much different as shown in Fig. 9. There are more results of different 
inputs shown in Figs. 10 and 11. 
 
 
 
0° 
 
45° 
 
90° 
 
135° 
 Fig. 11: This demonstrates the results of both modified and CNN-based TBD. (a) input 3; 
(b) and (c) show the results before and after threshold processing of modified TBD. (d) 
and (e) show the results before and after threshold processing of CNN-based TBD. 
 
二、Design of Bio-Inspired Perceptual Processor  
1. System Overview 
The development of the bio-inspired perceptual processor is to meet the system 
demands that are based on sophisticated arithmetic algorithms and that emphasize on 
both hardware and software solutions. The verified tools offer the opportunity to trade 
off between software (for flexibility) and hardware (for performance and power 
optimization).  
The development flow consists of two parts: hardware implementation and 
software development. Software includes two development tools: the assembler and 
the emulator. The assembler can translate BIP’s assembly language into binary codes 
(or called machine codes). The emulator can emulate the computations of the 
processor hardware and verify the precision of different floating-point formats such as 
32- or 24-bit. In hardware design, using the hardware description language (HDL) 
implements the processor and improves performance and power dissipation for 
 
(a) 
 
(b) 
 
(d) 
 
(c) 
 
(e) 
application-driven design can reduce complexity and is greatly enhanced at 
performance. For an embedded BIP, it is necessary that the architecture should 
support effective data communication between memory system and execution units, 
low-overhead loop control, and accumulator-based instruction set architecture. 
 
Thus, we propose an efficient method of data representation and a hardware 
implementation to utilize a smaller program memory, while maintaining other merits 
of the RISC, such as simple decoding, fixed instruction size, and high performance. 
BIP is a 24-bit BIP with a floating-point unit and is ease of use. The BIP processor has 
the architecture of a 24-bit single-instruction/multiple-data (SIMD) instruction set 
with five addressing modes, and a five-level pipeline executing engine, which is 
Instruction Fetch (IF), Instruction Decode (ID), Execution (EX1, EX2), and Write 
Back (WB). It is important to perform parallel multiplication and arithmetic 
operations in a single cycle. This allows instruction execution to overlap. Thus, the 
effective execution time for most instructions is one cycle. Some key features of BIP 
are listed below: 
 24-bit fixed length instructions which support 2- and/or 3-operand. 
 Five pipeline stages to improve throughput. 
 Five addressing modes and one control mode. Up to the support of 32 
instructions. 
 Two bank internal memories for use of vector addressing. 
 24 address stacks and 70 data stacks. 
 Block repeat capability. 
 Zero-overhead loops with a single-cycle branch. 
 Branch conflict with hardware detection and solution. 
 Power saving consideration. 
Floating-point operations provide fast, accurate, and precise computations. The 
24-bit floating-point format is compatible with IEEE 754 standard. Specifically, BIP 
facilitates floating-point operations at high speed for bio-inspired perceptual signal 
processing, which offers addition, subtraction, multiplication, and simulated division. 
 
The block diagram of proposed BIP is shown in Fig. 12. BIP is functionally 
partitioned into the following major blocks: a computation unit, which indicates ALU, 
multiplier, and accumulators, a program control unit, an external bus control dictating 
BIP external buses, a vector address generator computing the addresses which are 
used in vector operations. The program control unit performs instruction fetch, 
decoding, exception handling, and wait state supports. The PCU generators the next 
address to the program memory and controls hardware loops. 
to offer fewer registers and addressing modes than other types of processors. Thus, the 
architecture of BIP is defined as a fixed instruction length at 24 bits. A 24-bit 
instruction uses five bits each for addressing 8 general-purpose registers. BIP 
instruction set includes five addressing modes and is classified into three groups as 
data transfer, arithmetic, and control instructions. The total of defined instructions is 
twenty-five. 
 
4. Addressing Mode 
Most of bio-inspired perceptual processing is related with auto-correlation, 
convolution, and FIR calculation. Hence, addressing modes are to enhance the 
hardware computing capability for the algorithms. Five types of addressing modes 
allow access of data and instruction words from memory and registers: register, direct, 
indirect, immediate, and vector addressing modes. 
Particularly, we design an auto-index method which uses auxiliary registers to 
address memory data as shown in Fig. 13. This method called vector addressing can 
easily get memory data in a single multiplier instruction. When the instruction 
decoder gets the vector address, the address would represent the coordinate of the 
matrix. Matrix multiplication is based on the operation of RAM0 and R3 (the third 
general-purpose register). The results are stored to the R3 register. An example for the 
equation of matrix multiplication is as 
∑
−=
+−=
0
1
],1[],[
rj
rjhjrkxy .                               (5) 
We can replace the above with the following BIP micro codes: 
 
The index of a matrix coordinate is defined by auxiliary registers (AR0 and AR1). 
The index can automatically increase so that the pointer indicates the next matrix 
address. Hence, this addressing method enables a single-instruction matrix 
computation so that the size of program memory and the number of program memory 
access can be reduced. Additionally, we also define a control mode to control data 
paths. The control mode is designed for program control and setting of repeat counters. 
By two auxiliary registers, BIP can execute four-level nested program. 
6. Compiler Structure 
Also we implement a compiler to translate C code into BIP instruction set. The 
compiler works on Linux Fedora Core 3. Since Linux operating system havs Lex and 
Yacc, which are the tool kits to generate scanner and parser of a compiler and 
provided on Linux operating system.  
The language of this compiler supported is very like ANSI C. In fact, we use 
only a subset of ANSI C’s grammar rule as our grammar rule. The design and 
implement flow is describe in Fig.15 as follows. 
 
 
Fig. 15: Design and implementation flow of compiler using Lex and Yacc. 
 
Scanner 
Source Codes 
Preprocessor 
Parser 
Code Generator 
Symbol Table 
Assembly Codes 
Semantic Routines 
Assembler 
My Implementation Use Lex to 
generate
Use YACC to 
generate
Use GNU 
assembler 
Use C 
preprocessor
Object Files 
Linker 
Executable Files 
Use Collect2 
Contain Some 
Optimizers 
Intermediate Representation 
Verify 512 point FFT result as follows, list front 32 terms. Fig. 18(a) shows the C 
program simulation and Fig. 18(b) shows post-sim verification accurately. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  Fig. 18: (a) the result of C Simulator        (b)Post-sim verification 
 
● Discrete Cosine Transform verification 
The 36-point DCT-2 is calculated by fixed-point shifting 13-bit, and the total of 
36 terms output data are as follows.  
 
1-D 36-point DCT-2 
 
 
 
For input X： 
 
10,)
2
)12(cos(][][2][
1
0
−≤≤+= ∑−
=
Nk
N
nknxk
N
kX
N
n
πβ
11.....1
0..........21][ −≤≤
==
Nk
kkβ
三、Conclusions 
   In this project, a biological-inspired model for hybrid-order TBD algorithm, 
which mimics mechanism of early stage of human vision is proposed and 
experimental results are generally consistent to human visual sensation. Due to the 
parallel signal processing of Cellular Neural Networks (CNN), the computation time 
will greatly decrease. Contrary to the original biological-inspired model for 
hybrid-order TBD algorithm which has local maximum detection, the modified TBD 
algorithm can completely transfer to CNN-based TBD and be implemented on 
CNN-based analog circuits. Without local maximum detection, the boundaries of 
results for the CNN-based TBD are thick, but clear and exact. We also designed an 
effective current-mode CMOS circuit using cascaded current mirrors with fixed or 
programmable templates to implement the CNN-based TBD. The designed circuits 
are very suitable for CNN-based image processing in real time. On the other hand, we 
have synthesized the Veriolg description of the Bio-inspired perceptual processor core for 
the UMC 0.18μm CMOS process. Finally, the design has been integrated in the total 
area of 6.5 mm2 by using UMC 0.18μm 1P6M CMOS technology and the 
CNN-based TBD simulation results with HSPICE based on the 0.35μm TSMC 2P4M 
process have demonstrated the superior functionalities of the designed circuit. 
 
 
References: 
[1] M. Dolle, S. Jhand, W. Lehner, O. Müller, and M. Schlett, “A 32-b RISC/DSP Microprocessor 
with Reduced Complexity,” IEEE J. Solid-State Circuits, vol. 32, pp. 1056-1066, Jul. 1997. 
[2] J. Nurmi, V. Eerola, E. Ofner, A. Gierlinger, J. Jernej, T. Karema, and T. Raita-aho, “A DSP core 
for speech coding applications,” in Proc. ICASSP, vol. 2, pp. 429-432, 1994. 
[3] J. Eyre and J. Bier, “The Evolution of DSP Processor: From Early Architectures to The Latest 
Developments,” IEEE Signal Processing Magazine, March 2000. 
[4] H. R. Jang, S. H. Kim, and Y. H. Chang, “A Digital Signal Processor for Low Power,” in Proc. 
AP-ASIC, pp. 42-45, 1999. 
[5] E. A. Lee, “Programmable DSPs: A brief overview,” IEEE Micro, vol. 10, pp. 14-16, Oct. 1990. 
[6] J. E. Varrients, E. Sánchex-Sinencio, and J. Ramírez-Angulo, “A current-mode cellular neural 
network implementation,” IEEE Trans. on Circuits and Systems- II, vol. 40, no. 3, pp. 147-155, 
Mar. 1993. 
[7] K. W. Current and J. E. Current, “CMOS current-mode circuits for neural networks,” IEEE Int. 
Symp. on Circuits and Systems, vol. 4, pp. 2971-2974, May 1990. 
