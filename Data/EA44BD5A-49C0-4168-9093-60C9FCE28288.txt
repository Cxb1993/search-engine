1 
 
1. Introduction 
As the advance in technologies, more and more transistors can be placed into a single chip, which 
makes a System On a Chip (SOC) feasible. However, due to the increasing complexity in modern VLSI 
designs, there exist more and more errors that escape pre-silicon validation. These errors can only be 
detected and repaired after a chip is manufactured, which makes post-silicon debugging flow become more 
and more important than ever. However, the EE Times [12] points out that “post-silicon debugging can cost 
15 to 20 million and take six months to complete.” Besides, Abramovici et al. [3] also show that the 
post-silicon debugging now contributes averagely 35% of the development. Thus, it is very important to 
develop new methodologies to reduce the design cycle and cost of post-silicon debugging flow. 
There exist two ways to perform post-silicon debugging. The first way, called metal fix [8], [16], tries 
to change metal layer masks without any modification to transistor masks. Since transistor masks are usually 
much more costly to be respun than metal layer masks, the post-silicon debugging cost can be saved if we 
only need to replace metal layer masks. The other way uses Focus Ion Beam (FIB) to perform post-silicon 
debugging on individual chips after a chip is manufactured. It cuts unwanted electrical connections or 
deposits conductive material to make new connections. In order to perform the desired debugging steps, 
both of the above two techniques require to place some logic gates, which have no functions, on a chip 
before tape-out. Thus, we can make use of some of these cells once errors are detected. We call these 
pre-placed standard cells as spare cells or dummy cells since they do not connect to the original circuit. 
Since we only need to change routes without replacement of cells, this flow not only can reduce design cost 
but also reduce cycle time. 
For better timing, spare cells should be placed close to regions or modules that tend to fault. Improperly 
placed spare cells can only be reached through long wires, and hence they would lead to large increments in 
the propagation delay of the resulting circuit. However, it is difficult to determine an ideal distribution of 
spare cells in practice. Therefore, engineers often rely on bug analysis from previous silicon dies to 
determine how spare cells should be inserted in silicon dies. 
 
1.1 Previous Work 
In the past decades, post-silicon error repair was usually performed manually. However, because there is 
a pressing need for automation, several methodologies used to automate this process are proposed recently. 
Chang et al. [7] fix functional errors using exhaustive search of resynthesized netlists followed by ECO 
routing. They also use symmetry-based rewiring and local resynthesis to fix electrical errors. Based on 
dynamic programming, Chen et al. [9] propose a technology-remapping technique for timing ECO. Then, Lu 
et al. [18] fix the input slew, output loading, and delay violations by inserting buffers (spare cells). However, 
these methods might not easily be extended for functional ECO. Recently, Jiang et al. [14] propose a 
matching-based ECO synthesizer, which can implement the incremental design changes using the available 
spare cells as well as try to reduce the prohibitive photomask cost at the same time.  
As to the spare-cell placement, there exist limited works. In order to access each spare cell with a 
shorter wirelength for each cell, spare cells are usually placed uniformly in a placement region. According to 
the design stage that it applies, we can classify these works into three categories such as before placement, 
during placement, or after placement. Yee [24] and Payne [19] try to insert spare cells after placement, 
3 
 
 
Fig. 2. Different design flows for insertion of spare cells.  
(a) Insertion of spare cells before placement. (b) Insertion of spare cells after post-placement optimization.  
(c) Insertion of spare cells after placement and before post-placement optimization. 
 
More importantly, we are the first work to discuss the insertion of tie cells for spare cells. After spare 
cells have been placed, we also have to allocate tie cells for connecting to all spare cells to reduce leakage 
power. Although these connections have no timing issue, they would make congestion more worse if we 
insert fewer tie cells. As shown in Figure 3 (a), we only insert a tie cell in the whole placement region and all 
spare cells need to connect to it, which would lead to longer connections and make congestion more serious. 
On the contrary, if we insert a tie cell for each spare cell as shown in Figure 3(b), it would waste placement 
area. Thus, it is better to insert tie cells according to the distribution of spare cells and congestion of each 
region. If there exists a serious routing congestion in a region, we would insert more tie cells to reduce the 
overhead of routing wires; otherwise, we would insert fewer tie cells to reduce overhead of placement area 
(see Figure 3(c)). Thus, in this report, we propose a design flow to insert spare cells and tie cells after  
placement and before post-placement optimization. The experimental results show that our design flow 
would induce fewer wirelength than Jiang et al. [15]. Besides, the congestion induced by insertion of spare 
cells and tie ties would smaller than their method. 
 
Fig. 3. (a) There exists only one tie cell which is connected by all spare cells. 
 It would induce a serious congestion problem (tie cells are denoted by green rectangles). 
 (b) There exists a tie cell for each spare cell. It would waste placement area. 
 (c) Insertion of proper number of tie cells according to distribution of spare cells 
and the routability in each region. 
5 
 
4. GLOBAL DISTRIBUTION AND LEGALIZATION OF SPARE CELLS 
In the global distribution stage, we would like to allocate spare cells uniformly in a chip. Besides, they 
should have minimal impact on the performance of a design. 
 
4.1 Design Flow in Global Distribution Stage 
Figure 5 shows the design flow of the global distribution stage. We first cut a whole chip into equal 
bins by recursively performing quadrature cuts on a region until the numbers of cells in each region are 
smaller than a defined number. Then, the number and type of spare cells in each bin are determined 
according to the pre-placed cells in the region. Besides, we should check whether there exists enough 
whitespace to place allocated spare cells in each bin. If it is, we can find the location of each spare cell by 
using the weighted bipartite matching algorithm; otherwise, some cells need to be spread out of the bin to 
place the spare cells. 
 
Fig. 5. Global distribution flow 
 
After a chip has been divided into several bins, we can determine the number and type of spare cells in 
a bin according to the following equations: 
| sk
Bi
 | = α* | ck
Bi
 |     (1) 
where | sk
Bi
 | is the number of spare cells of type k in bin Bi | ck
Bi
 | is the number of pre-placed cells of 
the same type in Bi, and α is the user defined variable, which is the ratio of spare cells that we intend to  
place in a design. In our experiments, the value of α is set between 0.01 to 0.05. The equation means that the 
number of spare cells in each type should be proportional to the amount of cells with the same type. 
Figure 6 shows the design flow to determine the number and type of spare cells in each bin. After the 
amount of spare cells in each bin has been determined, we have to check whether there exists enough space 
to place spare cells in each bin. If it is not, we have to spread some cells from this bin to another bin. Since 
we insert spare cells before post-optimization, there still exist many spaces in a placement bin; and thus we 
almost can ignore this condition. 
 
4.2 Placement of Spare Cells 
Now, we determine the optimal row for each spare cell in each bin by applying the weighted bipartite  
matching algorithm. Let | rj | denote the area of whitespace in a row rj , and Asi denote the area of a spare cell 
si . We first show how to construct a bipartite graph, denoted by G(V, E), as follows :  
V = { NS∪ NR } 
E = { ( nsi, nrj) |nsi ∈ NS , nrj ∈ NR , if  Asi < |rj | } 
Cost: F( nsi, nrj) = Fsi,rj  
 
7 
 
 
Figure 7 shows one example to allocate spare cells to rows in a bin. Figure 7(a) shows a placement in a 
bin, which contains 5 rows, and three spare cells allocated to the bin. Figure 7(b) shows the corresponding 
bipartite graph. Since there exists not enough space in row 3, there exists no edge connecting to nr3 in the 
graph. 
 
4.3 Legalization 
In the global distribution stage, we have placed spare cells in feasible rows, which means the 
whitespace of a row is larger than the area of the spare cell assigned to it. In the legalization stage, a spare 
cell is placed directly into the nearest row if there exists an enough continuous room in the row; otherwise, 
we have to slightly move the cells in the row forward or backward so that it can contain the spare cell. 
We legalize the placement of all cells in a bin by modifying a famous legalization methodology, named 
Abacus [23]. In the classical standard cell placement flow, the global placement stage desires to place all 
cells with minimal total wirelength. However, there still exist some overlaps between cells after the stage. 
Thus, Abacus algorithm focuses on legalizing these cells by aligning them to the nearest rows to get an 
overlap-free placement by using a dynamic programming. Its objective is to minimize the movement 
distance of the initial placement and the final placement. Thus, after each spare cell has been allocated to a 
row, we can use Abacus to legalize all cells. However, because the results of legalization would be affected 
by the initial locations of cells, we need to determine the initial location of a spare cell in a row. To keep the 
insertion have less effect on the initial placement, we would place spare cells to the locations with a larger 
continuous space. Then, we apply Abacus row by row to get a feasible placement for all cells in a bin. 
 
5. DETAILED PLACEMENT 
In the detailed placement stage, we determine the proper number of tie cells in each bin and place them 
in a proper locations to consider the trade-off in the placement area and routability. Finally, we further 
optimize wirelength and routability of the whole design to get better results. 
 
5.1 Design Flow in Detailed Placement 
In the detailed placement stage, we first optimize wirelength by using a bipartite matching algorithm 
[13]. Then, the congestion in each region is estimated (note that the congestion model is introduced in 
subsection V-B). According to the distribution of spare cells and the congestion in each region, we can insert 
tie cells at proper locations. After this process, we would check the congestion value in each bin again. If the 
bin is still congested, we can reduce its congestion by the two techniques, inflation and spreading, proposed 
by the methodology CRISP [20]. Figure 8 shows the design flow in the detailed placement stage. 
 
5.2 Review of Congestion Model 
We use the congestion model proposed by RUDY [22] to estimate the routability of a placement. To 
evaluate the congestion of a placement, we first partition the placement region into uniform non-overlapping 
grids, called congestion grids. Then we define a congestion value Cg for each congestion grid g. Cg 
represents the amount of congestions caused by the nets within the congestion grid. Before we show how to  
9 
 
5.3 Allocation of Tie Cells 
To reduce leakage power, we have to insert tie cells into a chip so that all spare cells can be connected 
to a tie cell. However, fewer tie cells would induce longer connections between tie cells and spare cells, and 
thus it will make congestion more serious in a placement region; on the contrary, more tie cells will occupy 
additional chip areas. Thus, we desire to determine a proper number of tie cells according to the congestion 
map to balance the trade-off of chip area and routability. 
Each bin can be divided into several congestion grids, and we set a grid as a minimum unit to insert a 
tie cell if there exists at least one spare cell in it. According to the congestion model proposed in the previous 
subsection, we can compute a congestion value for each grid. Thus, we set each grid as unshifted in the 
initial condition. If a grid has a congestion value higher than a defined value, we set that grid as shifted. 
Therefore, for each unshifted grid, we will check the congestion values of its neighbors. If the neighbor grid 
is also unshifted, we would group these two grids into a bigger grid and set the congestion value of the new 
grid as the average congestion of these two grids. We would repeat this process until all its neighbors are 
shifted. Once a grid is shifted, we insert a tie cell into the corresponding grid. 
 
 
Fig. 10. Allocation of tie cells according to the congestion map. 
 
 
In Figure 10, we have separated a bin into 16 grids. The high congestion grid is marked as the color of 
dark black, and the lower congestion grid is marked as the color of light dark in Figure 10(a). After applying 
the above process, we would insert 9 tie cells in this bin as shown in Figure 10(b). 
 
 
5.4 Congestion reduction 
After tie cells are placed into a bin, the congestion of the bin will become more serious because of the 
additional connections between spare cells and tie cells. To reduce the congestion, we apply the two 
techniques, which are cell inflation and cell spreading, proposed by CRISP [20] to reduce routing congestion.  
The idea is to inflate a cell first if it is placed in a congestion region. Then, we would spread those inflated 
cells out of the congestion region in order to get a legal placement. The two operations inflation and spread 
are repeated until the congestion value in the bin is reduced. To guarantee that spare cells can be placed in 
the bin allocated in the global distribution stage, we should limit the boundary of spare cells when we 
perform inflating and spreading. 
 
 
11 
 
 
TABLE II 
THE COMPARISON OF HPWL RATIOS. 
6.2 Comparison of the average spare distance 
Then, we compare the average spare distance between spare cells and standard cells with same type in 
this experiment. According to the definition of Jiang et al. [15], the average spare distance shows whether 
each spare cell is placed close to the standard cells with the same type. They consider that spare cells can be 
utilized more effectively in the post-silicon repair if each standard cell has a spare cell with the same type 
close to it. Let dmin( ci, T(ci) ) represent the minimize distance from a standard cell ci to a spare cell of the 
same type T(ci) of ci . Then the average spare distance davg for a placement solution can be computed by the 
following equation: 
davg = (Σci ∈ V dmin( ci, T(ci) ) / |V|  
where | V | donates the total number of standard cells in the original design. Table III compares the 
average spare distance in different spare cell insertion rates between our algorithm and Jiang et al.’s [15], 
and we can have shorter distance compared to Jiang et al. [15] in average. 
 
TABLE III 
THE COMPARISON OF THE AVERAGE SPARE DISTANCE. 
13 
 
 
 
Fig. 11. Estimated routing demand by Jiang et al. after spare cells and tie 
cells are inserted. Light red represents low demand, dark red represents high 
demand. The circuit is from the IWLS 2005 benchmark suit [1]. 
 
 
Fig. 12. Estimated routing demand by Ours after tie cells are also inserted. 
 
8. REFERENCE 
[1] IWLS 2005 Benchmarks. 
http://iwls.org/iwls2005/benchmarks.html. 
[2] OpenCores. http://www.opencores.org. 
[3] M. Abramovici, P. Bradley, K. Dwarakanath, P. Levin, G. Memmi, and D. Miller. ”A reconfigurable 
design-for-debug infrastructure for SoCs,” In Proc. of DAC, pp.7-12, 2006. 
[4] C. Bingert, C. D. Gorsuch, O. G. Mercado, A. K. Myers, J. A. Schadt, and B. W. Yeager. US patent 
6,600,341: Integrated circuit and associated design method using spare gate islands, 2003. 
[5] U. Brenner, et al., ”Almost optimum placement legalization by minimum cost flow and dynamic 
programming,” In Proc. of ISPD, pp.2-9, 2004. 
[6] P. Chaisemartin. US patent 6,586,961: Structure and method of repair of integrated circuits, 2003. 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                     日期：99年 10月 15日 
                                 
一、參加會議經過 
    2010 設計自動化研討會(The 2010 Design Automation Conference) 為全世界
設計自動化相關領域最有名的大型研討會，亦為本人所主持之實驗室每年必參與之
國際研討會。今年的會議在美國加州 Anaheim程式舉辦，而 Anaheim是個還在成長
中的城市，由於非常接近墨西哥，人口將近一半是西班牙裔人，白人在這裡反而算
是少數民族，這個城市給我的感覺和 Phoenix非常像。 
二、與會心得 
    DAC是每年 IC設計自動化領域之重要研討會，今年很榮幸的我們實驗室也有一
篇論文在 DAC中發表，主題是跟類比電路擺置相關的問題，類比電路自動化的問題，
計畫編號 NSC 97－2221－E－006－251－MY2 
計畫名稱 為了擺置備份邏輯閘之漸進式邏輯閘擺置 
出國人員
姓名 
林家民 
服務機構
及職稱 
成功大學電機系助理教授 
會議時間 
99年 6月 13日至
99年 6月 18日 
會議地點 美國 Anaheim, CA 
會議名稱 
(中文)2010 設計自動化研討會 
(英文)The 2010 Design Automation Conference 
發表論文
題目 
(中文) 考量邊界限制及效能導向之類比電路擺置方法 
(英文) Performance-driven Analog Placement Considering 
Boundary Constraint 
無研發成果推廣資料 
研討會論文 3 0 100% 
1. J.-M Lin and Jia-Ru 
Chuang,＇Efficient 
Multi-Layer 
Obstacle-Avoiding 
Preferred Direction 
Rectilinear Steiner Tree 
Construction,＇has been 
accepted by ACM Asia South 
Pacific Design Automation 
Conference (ASP-DAC ), 
2011. 
2. Cheng-Wu Lin, Jai-Ming 
Lin, Chun-Po Huang, and 
Soon-Jyh 
Chang,＇Performance-driven 
AnalogPlacement 
Considering Boundary 
Constraint,＇ in Proc. of 
ACM/IEEE Design Automation 
Conference (DAC), Anaheim, 
California U.S.A, pp. 
292-297 , June 2010. 
3. Jai-Ming Lin, Hsi 
Hung,＇UFO: Unified Convex 
Optimization Algorithms for 
Fixed-Outline 
Floorplanning,＇in Proc. of 
ACM Asia South Pacific 
Design Automation 
Conference (ASP-DAC ), 
Taipei, Taiwan, pp. 
555-560, January 2010. 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 4 4 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次
 
 
