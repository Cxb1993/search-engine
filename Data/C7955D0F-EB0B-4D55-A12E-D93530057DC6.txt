1 
 
摘要 
 
本研究重點著重於具多重屬性之大量資料高效能查詢演算法，透過演算法實現壓縮資料、
快速查詢等功能。然而隨著資訊電子化普及導致數位資料的查詢需求快速成長，在過去面對此
問題的解決方法大多以演算法搜尋資料庫，然而無論是分散式或集中式系統架構對於龐大的查
詢需求也會造成資源負擔。高效能的查詢模式如Bloom filter、CMAC，主要原理是將原始資料
轉換為低維度型態以利提高運算效率。然而此類型查詢模式原始的設計重點在於簡單的二元查
詢，如存在屬性。對於多重屬性查詢必須設計出更複雜的結構，效能也相對地降低。本研究改
良傳統CMAC神經網路，開發多屬性編碼及反饋修正訓練演算法，實現多屬性查詢架構。本研
究將以台灣自用車牌做為訓練樣本，實現多屬性編碼、資料壓縮及快速搜尋等功能。以不同的
記憶體大小評估資料壓縮效率及誤判率。本研究所發展之演算法不僅具有壓縮資料的效果、多
屬性快速查詢的效能，更能感受到誤判率的優秀表現。 
關鍵詞：多屬性分類,小腦模型控制器,  布隆篩檢 
 
 
 
 
Abstract 
 
This research focuses on developing a high-speed query algorithm for multi-attribute large-volume 
data, in which data compression and fast querying can be simultaneously achieved. In the past 
decade, this type of problem is usually resolved by storing the data in a database, and querying is 
carried out through database-embedded methods. As the data volume is growing in a tenfold fashion, 
these methods are encountering difficulties in data manipulation as far as efficiency is concerned. A 
number of approaches, e.g., the Bloom Filters, have been proposed for querying purposes in 
large-volume data using a compact structure requiring less memory space. These approaches often 
limit themselves to single-attribute querying, and the multi counterpart can only be achieved by 
layered implementations where errors, e.g., the false positives, are prone to increase. We propose an 
improved CMAC mechanism seeking to achieve fast multi-attribute querying with less memory 
space and errors. Experimental results show favorable performances for our proposed mechanism. 
 
Keywords: Multi-attribute, CMAC, Bloom Filter 
 
  
3 
 
以提高多屬性分類之複雜度。 
(三) 降低誤判率─誤判率是關鍵的績效評估指標，無論是 Bloom Filter 或 CMAC 都需透過科學
實驗過程獲得最佳參數組合，考量收斂時間、記憶體儲存空間、誤判率等多方目標水準之
下方能發揮最佳效益。 
三、 研究方法 
本研究結合 CMAC 與 Bloom Filter 特性透過實驗評估及分析，發展適用於文字字串類型的
多屬性分類演算法，除了具有查表演算法的優點，更提供多屬性分類功能。本研究提出多屬性
分類 CMAC 演算法(Multi-Attribute Classification-CMAC，以下簡稱 MAC-CMAC)如圖 1。以傳
統的 CMAC 單層 Association 單輸出架構為基礎，將單屬性輸出轉變成多屬性輸出模式。為了
提升編碼效率將多個雜湊單元編碼架構改良成序列式編碼以簡化編碼過程。而輸出門檻值由固
定門檻誤差，改良成動態樣本門檻視窗，藉由訓練過程中動態取得多目標屬性專屬的門檻視
窗。 
 
圖 1. MAC-CMAC 網路架構 
本研究發展之演算法可應用於字串型態、連續及非連續數值的類型，因此樣本可包含符號、
字元等串列形式組合而成，例如:URL、車牌號碼等。編碼方式使用樣本字元所對應之 ASCII 
Code 進行組合式編碼。本研究所使用之樣本為車牌號碼，車牌由 26 個英文字母、10 個阿拉
伯數字以及特殊符號所組合的字串，為了提高其組合複雜度，採用組合式編碼，使其降低樣本
編碼重複率。 
CMAC 演算法關鍵階段就屬雜湊定址階段，傳統 CMAC 採用多組雜湊演算函數作為定址
組合，MAC-CMAC 採用單一單元雜湊定址，改善傳統固定長度、固定雜湊定址數量等限制，
對於動態長度的樣本能提供更適當的解決方案。單一單元雜湊定址就是使用單一雜湊函數對樣
本進行序列式定址編碼，產生之定址編碼組合，作為權重記憶體定址索引指標，也就是該樣本
所對應之索引陣列定址的集合。本研究利用樣本的特徵值作為編碼種子，包含 ASCII 特徵值、
權重記憶體大小ሺ݉ሻ、雜湊因子ሺߛሻ以及串列編碼累加值 ሺ߲ሻ 如式 1。本研究所發展的雜湊函數
適用於動態的樣本大小與連續字元串列組合字串等類型。依據樣本的長度ሺ݈ሺ݌ሻሻ產生雜湊編碼
數量，其定址輸出結構如同傳統 CMAC 使用多個雜湊函數產生多組定址。 
本研究主要是發展多屬性分類，因此每個樣本需設定單一屬性分類，並且以實數方式表示。
本研究以目標值ሺܶሺ݌ሻሻ作為樣本的分類屬性。神經網路訓練階段在每個分類屬性集合(்ܵ)，以
5 
 
算法結構單純與計算簡易等特性，大幅降低實作的複雜度。首先載入 MAC-CMAC 神經網路，
包含權重節點向量、雜湊函數、分類屬性之動態門檻視窗等資料。回想階段與訓練階段相同需
進行樣本編碼、雜湊定址，累加定址之權重節點產生輸出值(β)如式 7，並以訓練階段的動態門
檻視窗ሺ ௞ܶሻ作為判別分類屬性之指標，判斷若ε落在某一個動態門檻視窗內即表示為該分類屬
性，若滿足多個門檻視窗或無任何吻合，將回應無法識別。 
 
Algorithm Recall(p) 
1: ௞ܶ ൌ ሼ ଵܶ, ଶܶ, … , ௝ܶሽ 
2: ܹ݁݅ ՚ ܮ݋ܽ݀ܥܯܣܥሺሻ
3: ߚ ՚ ܵݑ݉ሺܹ݁݅ሾܪܽݏ݄ሺ݌ሻሿሻ
4: ࢌ࢕࢘ ݅ ൌ 0 ݐ݋ ௞ܶ. ܿ݋ݑ݊ݐ ࢊ࢕ 
5: ࢏ࢌ ሺ ௜ܶ. ݈݋ݓ݁ݎܾ݋ݑ݊݀ ൑ ߚ ൑ ௜ܶ. ݑ݌ܾ݋ݑ݊݀ ሻ
6:  ࡾࢋ࢚࢛࢘࢔ ݅
圖 3. 回想階段 
 
β ൌ ቀ∑ ܹ݁݅ ቀ݄൫݌ሺ݆ሻ൯ቁ௟ሺ௣ሻ௝ୀ଴ ቁ                                       (7) 
四、 實驗結果 
研究實驗內容將針對多目標屬性數量、儲存空間及樣本數量來進行實驗分析，並以
FAR(False Accept Rate)、FRR(False Reject Rate)作為衡量效能的指標，而誤判率影響的因子包
含樣本數量、記憶體大小等因素。影響記憶體大小的因素包含：權重網路陣列大小、權重網路
陣列儲存資料型態(解析度)。在相同的記憶體大小限制下，當權重網路陣列越大，解析度相對
的降低。以車牌號碼作為實驗樣本，車牌號碼為六位英數字及分隔符號所組成，並隨機將車牌
歸類成不同的分類屬性，做為樣本之目標值。 
1. 記憶體空間與解析度對於誤判率的影響 
本階段實驗以相同的樣本數量進行實驗，以不同規模的記憶體大小來分析其誤判率效
能。記憶體大小將由解析度與權重陣列大小所構成，而解析度與權重陣列將成反比。以權
重節點所儲存的實數範圍稱為解析度(γ)，本研究將解析度分成 16-bit, 24-bit, 32-bit 三種層級，
實數由正負號、整數及小數所構成。實驗階段所使用之解析度所對應之實數範圍及收斂誤
差參數(如表 1)。 
    表 1.解析度的儲存實數範圍對照表 
解析度 實數範圍 收斂誤差參數(݁ݎݎ) 
16-bit +/- 1.9999 0.001 
24-bit +/- 7.999999 0.00001 
32-bit +/- 15.99999999 0.00000001 
 
由於解析度與權重陣列大小息息相關，若採用高解析度(32-bit)將減少權重陣列數量，導
致陣列激發重複性高，造成收斂不易；若著重於權重陣列數量，會導致解析度太低造成門
檻視窗過大以致誤判率偏高。因此如何權衡這些因素，讓演算架構達到最佳效率將是本階
段實驗的主要目的。本階段實驗採用訓練樣本及測試樣本各 100,000 組，隨機將樣本目標屬
性分成 5 種類型(1.0~5.0)，以不同的記憶體空間分別測試 16-bit、24-bit、32-bit 三種不同等
級解析度的誤判率表現。由此階段實驗(如表 2)可得知誤判率與解析度關係密切，然而解析
7 
 
表 5. 32-bit 解析度實驗結果 
            分類屬性
記憶體(KB) 
5 10 15 
FAR FRR FAR FRR FAR FRR 
400 7256 16576 897 34038 2015 44327 
500 8 0 3 0 3 0 
600 0 0 1 0 1 0 
700 1 0 1 0 1 0 
800 1 0 2 0 0 0 
900 2 0 2 0 0 0 
1,000 3 0 0 0 0 0 
※結果為誤判次數 
 
由實驗結果得知，當相同解析度環境下，目標屬性將會影響門檻視窗的收斂效果，當
目標屬性越多越容易導致不同的目標屬性門檻視窗重疊，而產生多個目標屬性輸出，並且
無法分辨樣本的正確目標屬性。然而實驗結果顯示高解析度的環境下可有效降低誤判率，
但也大幅減少權重陣列的數量，產生樣本雜湊編碼重複機會高，造成不同目標屬性門檻視
窗重疊，發生多目標屬性輸出。因此由本階段實驗得知，本研究所發展之多目標屬性演算
架構對於目標屬性數量的多寡與誤判率並無顯著影響，但目標屬性過多將導致不易收斂，
而影響收斂時間。 
本研究所採用之樣本目標 ௞ܶ為實數，隨著目標屬性而遞增。而本演算架構之目標輸出
值ωሺ݌ሻ由樣本雜湊編碼所激發的權重陣列累加產生，因此樣本目標值的訂定與權重陣列的
解析度關係密切。本研究建議目標值( ௞ܶ)的設計必須依據解析度的範圍及樣本長度(݈ሺ݌ሻ)而
訂(如式 8)，而目標值集合建議以等距方式設計，避免造成權重值失衡影響收斂的效果。 
∑ ߛ௠௜௡
௟ሺ௣ሻ ൏ ௞ܶ ൏ ∑ ߛ௠௔௫
௟ሺ௣ሻ                        (8) 
 
3. MAC-CMAC 與 Bloom Filter 對於多目標屬性效能比較 
本階段將以 Bloom Filter 演算法作為對照實驗，傳統 Bloom Filter 與 CMAC 相同，為單
屬性輸出。因此為了達到多屬性輸出。Guo[6]提出降低 BF 所浪費的空間與效能，使用多層
級 BF，依據樣本數量動態增減其 BF 的層級數量，使其達到動態改變目的，然而雖然為多
層級架構但仍為單屬性輸出。本研究將傳統的 Bloom Filter 以多層次架構實現，將每個分類
屬性樣本儲存至個別 BF 層級，藉此達到多屬性輸出之目的。然而此作法雖可達到多目標屬
性輸出，會容易造成層級誤判的現象，產生 FAR 的誤判現象。 
本研究將設計多層級 Bloom Filter 網路架構(如圖 4)實現多屬性分類，由於傳統 Bloom 
Filter 是採用多個雜湊函數作為輸入定址數量，為了實現字串長度動態定址編碼，因此將
Bloom Filter 改成單一雜湊函數序列式定址編碼，並且與 MAC-CMAC 使用相同之雜湊函數
模型，避免雜湊定址效果的差異而影響實驗結果。 
9 
 
而 Bloom Filter 應用於大量資料且多目標屬性環境下，需要更大的記憶體儲存空間。若儲存
空間不足將容易導致 FRR 現象。 
 
五、 結論 
本研究提出一種應用於字串快速搜尋與屬性識別的改良式 MAC-CMAC 演算法，不僅可應
用於大量資料字串的識別，更可應用於分散式資料庫查詢服務中，透過分散式快速搜尋識別進
行前處理，過濾不存在資料庫內的資訊，以減輕後端資料庫服務的負擔。本研究將由先前CMAC
單屬性研究[13]延伸發展，為了解決多屬性輸出需求，並保留快速搜尋的優點，透過多屬性的
架構提供更多元應用。 
本研究透過三項實驗階段得知，記憶體空間、儲存陣列解析度兩者參數對於誤判率有密切
的關係，高解析度有助於控制誤判率的現象，但需要花費更長的收斂時間，因此適合於離線模
式的應用環境。本研究以搜尋應用最普及的 Bloom Filter 演算法為基礎，改良為多屬性輸出架
構作為實驗對照組。實驗結果發現 MAC-CMAC 演算法對於龐大資料量的應用較為適合，與
Bloom Filter 演算法最大的優勢在於不具有 FRR(Type I error)的問題，因此對於已存在的資料搜
尋應用更為適合。實驗結果得知在有限的記憶體空間環境下 MAC-CMAC 的誤判率相對的穩定
度。在未來的研究方向將朝向多元、長度不一致的字串樣本進行多屬性識別的研究，將
MAC-CMAC 演算法應用於更寬廣的領域。 
六、 參考文獻 
[1] Albus, J. S. (1975). “A New Approach to Manipulator Control: The Cerebellar Model 
Articulation Controller (CMAC).” ASME J. Dynamic Systems, Measurement, Control, 
pp.220-227. 
[2] Albus, J. S. (1975). “Data Storage in the Cerebellar Model Articulation Controller (CMAC).” 
ASME J. Dynamic Systems, Measurement, Control, pp.228-233. 
[3] Albus, J. S. (1979). “A Model of the Brain for Robot Control, Part2: A Neurological Model.” 
BYTE, vol.4, no.7, pp.54-95. 
[4] Cohen, S., and Matias, Y. (2003). “Spectral bloom filters.” In Proc. 22nd ACM International 
Conference on Management of Data (SIGMOD), pages 241. 
[5] Fan, L., Cao, P., Almeida, J., and Broder, A. (2000). “Summary cache: A scalable wide-area 
web cache sharing protocol.” IEEE/ACM Trans. Networking, 8(3):281rans. 
[6] Guo, D., Wu, J., Chen, H., and Luo, X. (2009). “The Dynamic Bloom Filters.” IEEE 
Transaction on Knowledge and Data Engineering. 
[7] Hao, F., Kodialam, M., and Lakshman, T. V. (2007). “Building high accuracy bloom filters 
using partitioned hashing.” In Proc. SIGMETRICS/ Performance, pages 277TRICS. 
[8] Iiguni, Y. (1996). “Hierarchical Image Coding via Cerebellar Model Arithmetic Computers.” 
IEEE Transaction on Image Processing, vol.5, no.10, pp.1393-1401. 
