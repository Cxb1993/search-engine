 1 
行政院國家科學委員會補助專題研究計畫 
■ 成 果 報 告   
□期中進度報告 
 
網路服務應用程式之整合性部署方案之研究與發展 
 
 
計畫類別：■ 個別型計畫  □ 整合型計畫 
計畫編號：NSC  99－2221－E－029－039－ 
執行期間： 99年 08月 01日至 100年 07月 31 日 
 
計畫主持人：陳隆彬  副教授  
共同主持人：  
計畫參與人員： 黃昱翔，陳志賢，李秉蓁 
 
 
成果報告類型(依經費核定清單規定繳交)：■精簡報告  □完整報告 
 
本成果報告包括以下應繳交之附件： 
□赴國外出差或研習心得報告一份 
□赴大陸地區出差或研習心得報告一份 
□出席國際學術會議心得報告及發表之論文各一份 
□國際合作研究計畫國外研究報告書一份 
 
 
處理方式：除產學合作研究計畫、提升產業技術及人才培育研究計畫、列管
計畫及下列情形者外，得立即公開查詢 
          □涉及專利或其他智慧財產權，□一年■二年後可公開查詢 
          
執行單位：東海大學 資訊工程學系 
 
中   華   民   國  100 年  7 月   31 日
 3 
2. Problem Definitions 
 
2.1. Object Dependency Graph 
  
A dynamic web application is represented as an 
ODG (object dependency graph) G = (O, F), O = 
            , where each       refers to a web 
object and each link            refers to the 
dependency relation from object    to object    
       . We assume that G is a connected graph 
and the dependency relation induced by F is acyclic. 
In ODG G, if an edge            then    is 
called a predecessor of   , and    is called a 
successor of   . The nodes without predecessors are 
called initial nodes (or initial objects), and the nodes 
without successors are called final nodes (or final 
objects). For mathematical convenience, assume that 
ODG contains only one initial node   , and    has 
only one incident edge          (called initial edge). 
Through this report, we use the conventional notation 
    to represent the set minus operation that 
removes elements in set Y from set X. If there exists a 
path from    to    in graph G, denote it by       . 
For a node set     , let 
                       . 
2.2. Deployment Strategies 
In each update delivery operation, a host is 
designated as the client host issuing the request for 
web object reconstruction. A sequence of computer 
hosts (or servers             ) forms a linear 
structure if host      is connected to host   , 
     . In the network, host    is referred to as 
root host and host    is referred to as terminal host. 
The linear structured network forms a supply-demand 
chain in which upstream servers construct and deliver 
the objects demanded by downstream servers. In the 
ODG, a set of objects, denoted by T , are designated 
as the target objects. Those objects in PRED(T) are 
called intermediate objects. An update delivery 
involves the execution of intermediate objects via 
server cooperation, eventually reconstructing the 
target objects T at the terminal host. Clearly, objects 
neither intermediate nor target are useless at 
reconstructing T . In this report, we simply disregard 
useless objects and assume                . 
Upon receiving a request for updating the 
designated target T , the following protocol 
coordinates servers. Initially, root host    retrieves 
information such as network bandwidths and CPU 
loadings from the servers. The root host then 
determines a deployment strategy, which is an 
assignment assigning objects to servers, and then 
informs all other hosts to achieve an agreement on this 
strategy. We assume that each host owns copies of the 
executable codes of all objects in the ODG, however, 
during implementation of the strategy, a host only 
executes objects assigned to it. 
In the supply-demand chain of servers, 
transmitting data upwardly is prohibited. Specifically, 
if    is a predecessor of    , the host hosting object 
   must be upstream or same to the host hosting 
object    . Definition 2.1 defines deployment strategy 
for such an environment formally. 
Definition 2.1 (Feasible deployment strategy): 
For ODG G = (O, F) and linear structured 
network             , a feasible deployment 
strategy in terms of target T is a sequence of 
object sets              that satisfies the 
following properties: 
(1)                               
 0 
(2)                    
(3)                                       
                          
      
 
Hereinafter, unless specified otherwise, a 
deployment strategy refers to a feasible deployment 
strategy. In Definition 2.1,              forms a 
mutually exclusive partition on       , with object 
   (i.e. the object without predecessor other than   ) 
in    and target objects in    . In the example 
depicted in Figure 1, strategy            is feasible, 
but    
    
    
   is not, since Object 3 is assigned to 
host   , while its predecessor Object 2 is assigned to 
host   . 
 
Figure 1. Deployment strategies with T = {5, 7}: (a) feasible, and 
(b) infeasible. 
2.3. Minimum Cost Deployment Strategy 
The cost of the deployment strategy is 
formulated via the notion of cut. A cut        of 
graph G = (O, F) is a partition on node set O such that 
                   . Moreover, the initial 
object    must be in part    and the set of target 
objects T must be in part   . For a pair of cuts 
        and    
    
  , if      
        
    , 
denote it by            
    
  . Also, if 
           
    
  and       
 , denote it by 
           
    
  . The set of edges across the cut 
is denoted by 
                                         . 
The cut cost, in terms of a weighting function 
      , is defined and denoted by 
                                        . For 
convenience, edges from         (or from        ) 
 5 
 
 
4. Experimental Results 
This section describes experiments to evaluate 
various deployment strategy algorithms. The 
experimental system architecture is shown in Figure 2. 
The Controller component manages the experimental 
workflow. The Data Generator component randomly 
generates all the experimental data, including network 
topologies, ODGs, and costs. Aside from the Data 
Generator, various types of modules determine 
deployment strategies with different approaches. The 
executions of deployment strategies are performed on 
OMNet++ simulation environment [9]. Finally, when 
all simulations are completed the results are directed 
to a Data Analysis component which displays the 
summary of the experimental results. All the programs 
are implemented using C++ language and run in a 
normal PC with one Intel Core 2 Duo CPU and 4G 
memory. 
 
Figure 2. The experimental system architecture. 
 
During the experiments, the network topology is 
set as a chain of hosts with depth 6 and is fixed in all 
simulation runs. The ODGs are generated randomly 
based on the following rules. First, given the 
cardinality of the ODG, the nodes are numbered with 
unique IDs. The initial node is numbered 0. The edges 
are then added one by one based on the following 
rules. When adding edge (a, b), the start node a is 
chosen from those nodes reachable from node 0, and 
the end node b is chosen from those nodes having ID 
larger than the ID of a. With this rule, the generated 
graphs are guaranteed to be acyclic and connected. 
After the network topology and ODG are 
constructed, the net and comp costs of objects are 
generated randomly. Two configurations of costs are 
evaluated: 
• Configuration 1: The costs for all hosts are set on 
the same basis. 
• Configuration 2: The root server has greater CPU 
power and higher network bandwidth. Specifically, 
the costs of the root host are weighted with a factor 
     . 
The experiments are performed on an OMNet++ 
simulation environment. In each simulation run, the 
input data includes ODG, network topology, as well as 
the deployment strategy. When executing simulation, 
each host    computes the nodes assigned to it. Each 
computation for an object    requires time 
         . Upon completion of the computation of 
  ,    transmits the result data of    to all hosts 
hosting the successor nodes of   . Each transmission 
of object    from host    to      requires time 
          . According to the problem model, a host 
   can start to compute a node only when all the 
predecessor nodes are available in   . The simulation 
run ends when all target nodes are obtained at the 
terminal host. 
In this experiment, the following three different 
deploying approaches are evaluated: GREEDY, 
ROOT, and CLIENT. 
 
Figure 3. Average time of web object reconstructions: (a) 
Configuration 1. (b) Configuration 2. 
 
This section describes experiments to evaluate 
various deployment strategy algorithms. Figure 3 plots 
the experimental results for all three approaches with 
Configuration 1 and 2, where the Y-axis represents the 
time required for reconstructing all objects, and the 
X-axis represents the number of objects. Each 
measured value is obtained by averaging over 100 
runs of simulations, showing that GREEDY obviously 
outperforms the others in object reconstruction time. 
Observing Figure 3, all approaches can be divided into 
Group A and Group B, where Group A outperforms 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/11/03
國科會補助計畫
計畫名稱: 網路服務應用程式之整合性部署方案之研究與發展
計畫主持人: 陳隆彬
計畫編號: 99-2221-E-029-039- 學門領域: 平行與分散處理
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
