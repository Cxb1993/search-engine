II
關鍵詞：SMP 叢集；資源分配；資源預估；工作排程
本研究主要討論 cluster of SMPs(將許多 symmetric multiprocessors 利用高速網路相
連的叢集)上，(1) parallel jobs 的各種資源分配(resources allocation)演算法之研究，(2) jobs
所須各項資源(尤其是執行時間和記憶體)的預估，對上述各種資源分配演算法效能影響
之研究。其中(1)是先前計劃的重點，本年度(98 年)報告則是著重在(2)。
(1).先前在 parallel computers 上的資源分配策略，大多只注重 CPUs 分配，主要目
的是盡量讓 CPUs 分配出去，減少閒置。另一方面，為了降低通訊負擔，許多研究則建
議分配到 parallel jobs 的 CPUs，儘量集中在一起（或稱為連續），但是仍然有等待時間
過長，以及 external fragmentation 的問題。先前計劃討論的是﹕資源分配策略必須同時
兼顧 CPU、記憶體、communication cost 等資源的有效分配，以降低 parallel jobs 的平
均 slowdown、增加整體 CPU 使用率、並且顧及整體 parallel jobs 的公平性。
(2).另外ㄧ個有趣的議題是：許多資源分配演算法執行前，必須先得到 jobs 執行時
所須各項資源的預估值，然後根據這些值安排 jobs 執行的順序。先前相關學者只對預估
執行時間的準確性，有各種不同的研究及看法。因為使用者提供的預估值常常與真實的
執行時間有出入，有些學者建議用先前的執行記錄做預估或利用 model，由 system 自動
產生預估值，來取代使用者提供的值，更有些學者認為預估值不準確反而有助於整體的
效能。本年度(98)執行計劃，除了執行時間預估值的影響研究之外，也希望探討 job 所
需要的記憶體的使用者預估值，對系統效能影響之研究。我們利用符合本研究的 cluster
of SMPs 模擬環境做實驗，實驗結果顯示﹕不論執行時間預估值或所需記憶體預估值，
若能比真正所需要的做適當的增加，反而會有比較好的表現，因為提供較大的預估值，
讓較小的 jobs 提前執行的機會增加，整體效能會因此增加。然而實驗結果也顯示﹕預估
值若太大，則無法得到改善。
2而錯失了本身可以 backfilled 的機會[15]。
現舉簡例說明預估值正確性與否，對系統效能的影響之初步觀察：
CPU 3 3 3 4
需求 1 2 4 1
預估錯誤
(太少)
2 4 1 2
Time time time
根據原來的預估
所做的安排
實際的執行情形
job 3, 4無法提前
正確的預估
job 3, 4可以提前
圗二 執行時間的預估值對系統效能的影響 (A.原始的預估，B. 實際的執行情行，預估
太少，C. 正確的預估)
圗二 A 是原始的預估值，然而卻因為預估值不正確(假設預估過短的 job 執行時不
會被 killed)，使得 job 3 和 job 4 失去 backfill 的機會(如圖二 B)，但若能夠正確的預估
job 1 的執行時間，如圖二 C 所示，job 3 和 job 4 就可以提前執行，也不會影響 job 2
的執行，因此整體的執行效能會提升。
由先前的成果可以知道[21]，好的 resource allocation policy 必須同時兼顧 CPU、記
憶體和通訊負擔等資源。相同的道理，預估值的研究也一樣要多方考量。先前的研究大
都只著重在執行時間的預估，本年度的計劃，除了執行時間之外，使用者提出欲執行的
jobs 所需要的記憶體預估值的影響，讓系統做出正確的資源分配策略也是非常值得探討
的議題；實驗結果顯示﹕預估值較大時有時候反而比較好，原因正如[15]提及，提供較
大的預估值，讓小的 jobs 提前執行的機會大大增加，整體效能會增加。但是預估值太大
則無法得到改善。
2. 相關研究
根據研究 parallel job scheduling 的專家 D. Feitelson 的說法，這一類研究的基本假
設如下[1, 2, 3, 14, 15, 18]：
 當一個新的 job 到達系統時，系統會依照這個 job 要求的 CPUs 個數、當時系統中
每個 queue 所包含 jobs 的個數及當時 CPUs 的分配的情況，執行某些策略，來決
定何時分配 CPUs 給此 job。而這些被分配出去的 CPUs 會固定給此 job 使用，一直
到此 job 完成工作，再將這些 CPUs 歸還給系統。
 除了最簡單的 FCFS 之外，backfilling scheduling 是 parallel job scheduling algorithms
中最常見且有效的策略，在此機制下，使用者必須提供此 job 執行時間的預估值。
較小的預估值，有機會讓此 job 提前執行，但往後真正的執行時間若大於此預估
值，此 job 可能會被 killed。
我們可用如圖三，一個 2-Dimension 的圖來表示 Parallel Job scheduling 的執行。圖
中左下角的原點表示現在的時間，而水平與垂直軸分別代表時間與 CPU 個數，每個 job
都可以視為一個矩形，矩形的長度(橫軸方向)是此 job 執行時所需的時間，高度(縱軸方
4而遭 killed。為了探討使用者做預估值時的心理，[6]建議先將執行時間超過預估值
時會被系統 killed 的限制移除，結果顯示大約有一半的使用者會提供較佳的執行時
間預估值，然而對整體的平均預估值準確性仍然沒有太大的幫助。另外，[16]發現，
使用者的預估值會用比較籠統的數據，實驗證實，使用者的值大概落在幾個樣本值
上，例如半小時、一小時等等，這些籠統的數據當然準確度不佳。
 預估值的準確性對整體效能的影響：在 backfilling algorithms(例如 EASY)環境之
下，使用者提供執行時間的預估值是一定需要的，現在討論的是，對整體系統的效
能來說，這些預估值愈準確愈好，還是不準確反而較好。這個議題見仁見智，有人
覺得不準確反而有助於整體的效能提升[1, 10, 14]，甚至故意將使用者預估值都乘以
某個大於 1 的數，以當成最後的預估值；但是另外一些學者卻認為，許多使用者因
為害怕預估值太緊湊，如果最後執行時間超過預估值會遭 killed，因此普遍提供較
大的預估值，如此一來讓小的 jobs 提前執行的機會大大增加，scheduling algorithm
其實是變成了 shortest job first (SJF) [15]。一般而言，SJF 整體效能會較佳，但是對
一些需要 resources 較多的 jobs 較不公平。為了保障需要 resources 較多的 jobs 的公
平性，[15]建議保留原先執行之順序，將 algorithm 改良成 shortest job backfilled first
(SJBF)。
 系統提供預估值的相關研究︰我們知道，backfill algorithms (例如 EASY)的環境下，
使用者必須提供所有 submitted jobs 的執行時間預估值給系統參考，然後系統可以
直接利用這些值安排 jobs 執行的順序，也可以經過 algorithm 調整執行時間預估值
後再決定[17]，下面則介紹一些調整預估值的相關的方法︰
故意讓這些預估值不準確，將放大的預估值當系統 prediction︰正如前面提及，
有人覺得不準反而有助於整體的效能提升[1, 10, 14]，[17] 試著將使用者預估值
加倍(故意把預估值的準確性降低)，結果發現效能竟然比原先以原始的預估值的
效能還要好，如同前面的討論，原因應該是執行時間小的 jobs 紛紛提前執行的
機會大大增加，scheduling algorithm 其實是變成了 shortest job first (SJF)所致。
利用歷史資訊: 許多大型系統的工作具有高度的重複性，也就是說有些使用者
(或系統 )會重複執行相同的程式，有些程式也會有高度的依賴相關性，這種情
形之下可以利用歷史資訊來預估 jobs的執行時間。[10]建議可以用 application file
name, user, 或 node number 當編號，收集相同編號所有 jobs 的執行時間，然後
用平均值(或加上一些值，例如 1.5 倍的 standard deviation，以避免預估值不夠而
遭系統 killed)當 prediction 預估值。
系統幫使用者產生 prediction 預估值:有鑑於先前的系統 prediction algorithms，
例如使用 genetic algorithms，instance-based learning 複雜程度甚至超過 EASY 本
身，而且讓一般使用者最無法接受的事是 prediction 是由系統產生，但若此
prediction 小於實際執行時間，此 job 卻會被 killed，因此[15]提出一個可以同時
解決上面二個問題的 algorithm。第一、prediction 值是同一個使用者前二次執行
執行時間的平均值，prediction 值當作系統安排 jobs 執行順序的依據，計算過程
非常簡單。第二、保留使用者的預估值，預估值當成是否 killed 的值，非系統的
6讓小的 jobs 提前執行的機會大大增加，整體效能會增加。但是預估值比真正值大太多
(T=1500)或太少(T=25)則無法得到改善。
步驟二﹕假設所有的執行時間預估值都正確，測量記憶體預估值的效應。
真正執行所需記憶體之設定方式如下﹕因為預估值若比實際的執行值小時，job 會
被移除，因此我們只有考量比真正執行所需記憶體大或相等的預估值，所以每個 job 的
記憶體預估值=(真正所需的記憶體+從 1 到 M 任取的亂數)，其中 M 為記憶體設定的參
數，M=0 表示真正需的記憶體和預估值相同，M 越大表示預估值比實際所需記憶體差
異越大。
表二 假設所有的執行時間預估值都正確，僅考量記憶體預估值的效應
M=0 M=5 M=10 M=15 M=20
Average of Wait Time 1757.9 1670.4 1707.1 1737.6 1776.6
Average of Turnaround Time 1801.5 1714.0 1750.6 1781.2 1820.2
Average of Slowdown 67.0 64.0 64.5 66.7 69.5
從表二可以發現，以 M=0(即真正所需記憶體和預估值相同)為測試的基準點，預估
值較大時有時候反而比較好，例如在 M=5 最佳，M=10 時次之。原因正如[15]提及，提
供較大的預估值，讓小的 jobs 提前執行的機會大大增加，整體效能會增加。但是預估值
比真正值大太多(M=20)則無法得到改善。
步驟三﹕測量執行時間預估值及記憶體需求預估的效應。
這部份的實驗採用前二個步驟中，第一部份的執行時間預估假設和第二部份的記憶
體需求預估假設，其他和前面的假設相同。從圖四可以發現和前面類似的結論﹕最佳情
形發生在 T=50、M=15 時。然而 T 太大時(例如 T=500 時在各種 M 值時都普遍不佳)。
當 M 太大時，例如 M=30 時在各種 M 值時表現不穩定(T=50 最好，但 T=100 時最差)。
60.0
62.0
64.0
66.0
68.0
70.0
T=25 T=50 T=100 T=500
預估執行時間增加的部分
平
均
sl
ow
do
w
n M=5
M=10
M=15
M=20
M=30
圖四 同時考量執行時間預估值記憶體預估值的效應
4. 結論
叢集系統是一項非常重要的高性能計算環境研究議題。本計劃的重點，是使用者對
submitted jobs 的執行時間預估值，及記憶體需求預估值的正確與否，對整個系統效能
8High-Performance Computing in Asia-Pacific Region, 2005.
10. A. W. Mu’alem and D. Feitelson, Utilization, Predictability, Workloads, and User
Runtime Estimates in Scheduling the IBM SP2 with Backfilling, IEEE Transaction on
Parallel and Distributed Systems, vol.12, no.6, June 2001, pp.529-543.
11. I. Rao and E. N. Huh, A Probabilistic and Adaptive Scheduling Algorithm using
System-Generated Predictions for Inter-Grid Resource Sharing, The Journal of
Supercomputing, Vol. 45, 2008, pp.185-204.
12. K. H. Seo, Fragmentation-Efficient Node Allocation Algorithm in 2-D Mesh-Connected
Systems, Proceedings of the 8th International Symposium on Parallel Architectures,
Algorithms and Networks, 2005.
13. S. Srinivasan and R. Kettimuthu et al., Characterization of Backfilling Strategies for
Parallel Job Scheduling, IEEE Parallel Processing Workshops, 2002, pp.514–519.
14. D. Talby and D. Feitelson, Improving and Stabilizing Parallel Computer Performance
Using Adaptive Backfilling, In: 19th International Parallel and Distributed Processing
Symposium, April 2005
15. D. Tsafrir, Y. Etsion, and D. Feitelson, Backfilling Using System-Generated
Predictions Rather Than User Runtime Estimates, IEEE Transactions on Parallel and
Distributed Systems, Vol. 18, No. 6, June 2007, pp.789-803.
16. D. Tsafrir, Y. Etsion, and D. Feitelson, Modeling User Runtime Estimates, Job
Scheduling Strategies for Parallel Processing, pp. 1-35, June 2005.
17. D. Tsafrir, Y. Etsion, and D. Feitelson, Backfilling Using Runtime Predictions Rather
Than User estimates, Technical Report 2005-5, school of Computer science and
Engineering, The Hebrew Univ., Feb. 2005.
18. Y. Zhang, H. Franke, J. Moreira, and A. Sivasubramaniam, An integrated approach to
parallel scheduling using gang-scheduling, backfilling, and migration, IEEE
Transactions on Parallel and Distributed Systems, Volume 14 ,Issue 3 ,2003, pp.236 –
247.
19. Y. Zhang, H. Franke, J. E. Moreira, and A. Sivasubramaniam, A, Improving parallel
job scheduling by combining gang scheduling and backfilling techniques, Proceedings
of 14th Parallel and Distributed Processing Symposium, May 2000, pp.133-142.
20. Z. Zhu, Efficient processor allocation strategies for mesh-connected parallel computers.
Journal of Parallel and Distributed Computing, 16:328-337, 1992.
21. 王逸民，SMP Clusters上資源分配之研究，Accepted by Asian Journal of Arts and
Sciences。
98年度專題研究計畫研究成果彙整表 
計畫主持人：王逸民 計畫編號：98-2221-E-126-004- 
計畫名稱：SMP 叢集上資源分配之研究: 資源預估之影響(III) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
