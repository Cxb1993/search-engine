 
 I 
 
摘要 
在研究志願型計算系統(Volunteer Computing System;簡稱為 VCS)與各個
棋類程式結合的過程中，我們已研發出一套嶄新的模式，使用這些結合模式的好
處在於不需要修改太多的程式碼、盡可能縮短總執行時間，讓現有程式能簡單快
速地與 VCS 結合，簡易取得遠端資源的協助，達到充分運用資源的目的，以期
解決更多問題。 
本子計畫已成功讓多個應用軟體與 VCS 結合，其中包含我們所研發的圍棋、
六子棋、暗棋、五子棋、及 coin problem 求解問題，實驗顯示使用 7 台電腦同
時執行的圍棋程式對戰 1台電腦執行的圍棋程式之勝率為 71.4 %、而使用 20 台
電腦進行六子棋的搜尋之效能是單機的 8.27 倍，再再凸顯結合模式整合 VCS 的
效用。除了將研究成果撰寫成論文發表於研討會上，還持續研發各式棋類程式並
在國際電腦對局競賽獲得許多佳績。 
 
關鍵詞：電腦對局遊戲、志願型計算、圍棋、暗棋、六子棋。 
  
 III 
 
目錄 
摘要................................................................................................................................ I 
Abstract ......................................................................................................................... II 
目錄.............................................................................................................................. III 
壹、前言........................................................................................................................ 1 
貳、研究目的................................................................................................................ 2 
參、文獻探討................................................................................................................ 3 
肆、研究方法................................................................................................................ 4 
一、圍棋................................................................................................................ 4 
二、六子棋............................................................................................................ 5 
三、暗棋................................................................................................................ 6 
四、麻將.............................................................................................................. 21 
五、蜜月橋牌...................................................................................................... 24 
六、5 五將棋....................................................................................................... 31 
七、五子棋新棋規及五~七路五子棋勝負問題之研究 ................................... 34 
八、Coin Problem ............................................................................................... 52 
伍、結果與討論.......................................................................................................... 57 
參考文獻...................................................................................................................... 57 
國科會補助專題研究計畫成果報告自評表.............................................................. 66 
 
 
  
 2 
 
貳、研究目的 
許多電腦對局遊戲具較高複雜度，遊戲中仰賴非常大量的計算資源與儲存空
間去展開與搜尋，然而日常生活中有許多運算資源都是閒置未被使用的，若是能
將這些資源加以利用，應用在益智遊戲的破解或電腦棋類的計算等，應能解決更
多過去無法處理的問題。基於這個目的，我們致力於將電腦圍棋、暗棋、六子棋
等程式與志願型計算系統結合，透過許多閒置的運算資源協助遊戲程式的計算，
達到平行化計算的目的，期望藉此提升棋類程式的棋力。 
我們對於各種 computer game 有興趣，但是我們都知道一般的 computer game
在計算時，進行遊戲樹的展開是最耗計算資源的，通常深層的展開都極為費時費
力，而計算資源愈豐富意味著遊戲樹能被展開的愈深。為了應付更複雜的情況，
需要不斷增強電腦的計算能力、記憶體容量、儲存空間等，導致成本支出不斷地
增加，舊有設備也要不斷的淘汰。另外，在現有技術下硬體設備有其發展的瓶頸，
不可能無止境地增強。上述理由皆是這類應用在過去無法被妥善處理的原因。 
隨著網路技術的發展，網格運算、志願型計算、雲端計算等技術的提出，透
過網路將許多便宜的電腦設備串接在一起，組成比大型主機更強大的運算系統，
使得這類的應用問題能夠被解決。然而，在日常生活中，許多計算資源並沒有被
充分運用，為了充分利用現有資源，我們採用吳教授所開發的 Desktop Grid 
computing system，將實驗室的電腦串聯在一起，讓實驗室裡所有的電腦都能盡
一己之力，提供更多資源讓 computer game 的能力更上一層樓，期望電腦遊戲程
式能從中獲得好處，使 computer game 的表現有朝一日能達到職業棋士的水準。 
  
 肆
一
使用
Sear
始執
等
WO
完畢
都是
始化
為
ADA
PC
等 W
並自
圖所
 
、研究方
、圍棋 
由本研究
Monte-Ca
ch)，透過
行任務所
WORKER 
RKER 準備
或做更多
為了達到
處於 read
程式就能
ADAPTER
PTER 轉送
故整個執
啟動 ADAP
ORKER 執
我結束，
示。 
法 
群黃士傑同
rlo Tree Se
大量模擬棋
花的時間較
ready 後才
就緒，若
事情。 
此目的，我
y 的狀態，
直接執行任
，ADAPT
給 WOR
行流程為 A
TER 並賦
行結束再
接著，執行
學研發的
arch 的搜尋
局的做法
久，如果
能開始執
把這些時間
們事先在
只有 ADA
務，並在
ER 扮演傳
KER，反之
PP 產生任
予任務，A
把結果告訴
結果一路
4 
電腦圍棋程
算法，是一
來獲得較好
等到 PC 收
行任務，
拿來執行
PC 啟動 W
PTER 會被
PC 與 WO
話者的角
亦然。 
務後送給
DAPTER 將
ADAPT
回傳到 AP
式 ERICA
種最佳優
著手。而
到任務在
而這中間
任務，則
ORKER，在
啟動與結束
RKER 中間
色，如果
BROKER，
任務轉交
ER，ADAP
P 即任務圓
，ERICA
先搜尋演算
ERICA 從
啟動 WOR
已浪費了許
WORKER
整個過程
。故 WO
增加一個
有來至 PC
BROKER 在
給待命中的
TER 在將結
滿結束。
的搜尋核心
法(Best-F
啟動到可以
KER，就需
多時間在
就能更早執
中，WORK
RKER 不需
中繼程式
的訊息就
分配給 P
WORKE
果回覆給
執行流程如
 
是
irst 
開
要
等
行
ER
初
，稱
由
C，
R，
PC
下
 接著
機的
搜尋
20 台
三
(Co
的構
(一)
為一
 
我們讓六
再透過 V
時間做比
平均需要
電腦約快
Nu
com
 
、暗棋 
我們所研
mputer Oly
想說明如
 暗棋與 B
西洋棋的
個單位，
子棋程式在
CS 分別使
較。實驗結
184.33 秒
1 台電腦
mber of 
puters 
1 
4 
8 
12 
16 
20 
發的暗棋
mpiad 2011
下。 
itBoard 資料
棋盤一共有
可以使用一
單機執行
用 4~20 台
果如下表
，而使用 2
8.27 倍，若
Total time 
16880 searc
155572.83 (
62001.08 (
33021.50 (
24463.34 (
21724.56 (
18801.79 (
程式 Dark
，在荷蘭)
結構 
64 個格子
種名為 B
6 
16880 個不
電腦平行地
。實驗結果
0 台電腦平
使用的電
for 
hes
Aver
ea
s) 18
s) 7
s) 3
s) 2
s) 2
s) 2
Craft 參加
，榮獲電腦
，剛好跟
itBoard 的
同迫著搜
執行這 16
顯示，使用
行地做同樣
腦愈多，效
age time fo
ch search
4.33 (s) 
3.46 (s) 
9.13 (s) 
8.99 (s) 
5.74 (s) 
2.28 (s) 
第 16 屆
暗棋金牌
64 位元 CP
資料結構來
尋，並記錄
880 個迫著
1 台電腦
的事只需
能還會愈
r Speed
1.00 
2.51 
4.71 
6.36 
7.16 
8.27 
國際電腦奧
。研發的技
U 的電腦
儲存資料
 
所花的時間
搜尋，並與
執行一次迫
22.28 秒
高。 
up 
林匹亞競
術及結合 V
一樣都是以
，並讓程式
。
單
著
，故
賽
CS
64
的
 8 
 
   
 
(2) BitBoard 兵種表示法 
有了 BitBoard 表示法後就可以開始用它來儲存棋盤上的資料了。我們使用
一個無負號的 32 位元整數(unsigned integer，之後內文的整數一律代表無負號整
數)，來儲存一種兵種，而暗棋有帥、仕、相、硨、傌、炮、兵、將、士、象、
車、馬、包、卒共十四種兵種以及空格、未翻子，需要十六個整數來儲存他們，
為了方便撰寫程式，可以先定義整數 U32，然後宣告十六個整數跟幾個必要的資
訊，如圖 3。 
typedef  unsigned  int  U32; //可以表示 0x00000000 ~ 0xFFFFFFFF 
U32  piece[16];//各個索引分別代表：0 空格, 1 帥, 2 仕, 3 相, 4 俥, 5 傌, 6
炮,  
               7 兵,8 將, 9 士, 10 象, 11 車, 12 馬, 13 包, 14 卒,15 未翻
子。 
U32  red, black, occupied;// 所有紅子、黑子位置，所有有棋子的位置。
圖 3 兵種的宣告 
我們必須記錄 14 個兵種、所有空格、未翻子、紅子、黑子、有棋子之格子
的位置，有了以上資訊就可以使用邏輯運算快速取得盤面上我們所需要的訊息，
若需要其他資訊也可以自行額外加入。 
圖 4 為一個範例盤面，●為未翻開的子。假設目前盤面是這樣，挑出其中
X X X X 
 
X X 
 
X X 
 
X 
 
 
X 
3 2 1 0 
7 6 5 4 
11 10 9 8 
15 14 13 12
19 18 17 16
23 22 21 20
27 26 25 24
31 30 29 28
 
圖 1 32 位元對應位置 圖 2 BitBoard 範例 
 10 
 
          
 
 
(3) BitBoard 行與列的遮罩 
有了 BitBoard 後還可以利用它做許多事情，我們常常會需要讀取棋盤上指
定行或列的資料，這時就能用 BitBoard 行與列的遮罩來作運算。 
圖 9 為一個行遮罩的範例，一行相當於每列都有一個相同的地方被占據一
格，例如從右邊數來第二行為 0010  0010  0010  0010  0010  0010  0010  
0010，用十六進位表示就是 0x22222222，可以很容易地推出第一行為 0x11111111、
第三行為 0x44444444、第四行為 0x88888888，十分好記。 
圖 10 為一個列的遮罩範例，一列都會占據四格連續的位置，例如從上方數
來第二列就是 0000  0000  0000  0000  0000  0000  1111  0000，用十六進
位表示就是 0x000000F0，很容易地推出第一列是 0x0000000F、第三列是
0x00000F00。 
 
8 4 2 1 
X X  X 
圖 8 加法快速算出其代表的十六進位數字之範例 
X X  X 
X  X X 
X    
X X X  
X  X  
X X   
X X  X 
X  X X 
圖 7 occupied 有棋子位置
所存的值 0xBDCAE8BD 
    
  X  
    
X X X  
  X  
    
    
    
圖 6 red 所有紅子位置所
存的值 0x0002E020 
 12 
 
各作一次 and 就可以得到圖 11 的結果，若想知道這結果裡哪些是紅子的話只需
再跟 red 做一次 and 運算即可得圖 12 的結果。 
 
      
 
若想知道其他資訊，也可以自行設計新的邏輯，使用 BitBoard 查詢資料都
只需幾次 and 或 or 邏輯運算就可以得到想要的結果，在大量計算時能比傳統的
迴圈計算快上許多。這種結構運算十分快速、又容易實作出來，有這種結構就能
快速產生走步。 
(5) BitBoard 產生一般兵種走步 
程式在得到盤面資訊後一定要做產生候選著手的動作，資料結構好壞與否會
大幅影響產生的速度。利用 BitBoard 結構產生走步十分簡單又快速，只需要幾
個邏輯運算即可，在暗棋遊戲中，炮以外的兵種都只能往隔壁的一格移動和吃子，
只有炮在吃子時才可以飛過多個格子，本節先討論產生炮吃子以外的一般兵種之
走步方式。 
紅子資訊都存在 piece[16]陣列 1~7 號索引中，黑子為 8~14 號，若要產生紅
子之走步只需用迴圈看 piece[16]的 1~7 號中之數值是否有不為 0 的值，不為 0
則代表該子有出現在棋盤上，為 0 的話代表棋盤上沒有該子，除了主將以外的子
都有兩個，小兵有五個，一個子不一定只會出現在棋盤上的一個位置，例如圖 4
的仕所存的值為 0x00024000，仕有兩個，必須先選擇其中一個位置才可以處理，
我們使用 Least Significant 1 Bit (LS1B)函式： 
    
    
    
X    
    
    
    
    
圖 12 從圖 10 中找出紅子 
X    
X    
X    
X    
X    
X    
X X  X 
X    
圖 11 圖 4 的盤面和行列做遮罩
 14 
 
將跟炮同一列且有棋子的位置(炮那格不算)擷取出來，移動到第一列統一處
理，移動後只有最低的 4 個位元有效，其他 28 個位元都是 0，這時炮可能會存
在於四個位置：從右數來第 0、1、2、3 行。 
若炮在第0行則炮位會有以下八種組合，每一列各為一種，●代表任意一子，
○代表炮位： 
 
 
很明顯的可以觀察出來，將盤面的資訊存入 x，先消去最的小位元後，若 x
不為零則代表下一個最小位元為炮可以吃子的位置，而且最多只有一個可以吃的
位置，若為零則代表炮在該列沒有子可吃： 
if(x){ 
U32 mask = LS1B(x);  
 return (x ^= mask) ? LS1B(x) : 0;   
} 
else  return 0; 
0 0x00000012 16 0x00121000 
1 0x00000025 17 0x00252000 
2 0x0000004A 18 0x004A4000 
3 0x00000084 19 0x00848000 
4 0x00000121 20 0x01210000 
5 0x00000252 21 0x02520000 
6 0x000004A4 22 0x04A40000 
7 0x00000848 23 0x08480000 
8 0x00001210 24 0x12100000 
9 0x00002520 25 0x25200000 
10 0x00004A40 26 0x4A400000 
11 0x00008480 27 0x84800000 
12 0x00012100 28 0x21000000 
13 0x00025200 29 0x52000000 
14 0x0004A400 30 0xA4000000 
15 0x00084800 31 0x48000000 
表 2 一般兵種 32 個位置之走步遮罩表 
   炮 
  ● 炮 
 ●  炮 
 ○ ● 炮 
●   炮 
○  ● 炮 
○ ●  炮 
● ○ ● 炮 
圖 13 炮在第 0 行可能有的炮位
 16 
 
U32 CGenC2(U32 x){ 
 return CGenCL(x&0x11111100); 
} 
在第三個位置時就需要切成兩邊再合併了，part 為右半邊，右半邊需要兩個
位元都有子時才可能有炮位，且必定在最右邊的位元(如下圖)，左半邊直接把左
邊五個位元取出後執行 CGenCL(x)即可： 
U32 CGenC3(U32 x){ 
 U32 part = 0; 
 if((x&0x00000011)==0x00000011) 
  part |= 1; 
 return part | CGenCL(x&0x11111000); 
} 
第四個位置時右邊切三個位元，左邊切五個即可： 
U32 CGenC4(U32 x){  
 U32 part = 0; 
 part = CGenCR(x&0x00000111); 
 return part | CGenCL(x&0x11110000); 
} 
第五~八個位置左右對稱，能以此類推簡單找出。最後將移動的位置還原後，
把行與列的炮位做一次 or 運算，再與對手的顏色(red、black)做 and 運算就可以
找出所有的炮位了。 
(二) Bits 與棋盤編號之間的轉換 
使用 BitBoard 的時候需要常常在 Bits 與棋盤編號(整數)之間做轉換，例如圖 
1 中的 7 號位置，用 Bits 表示為 0x00000080，將棋盤編號轉成 Bits 只需使用位
元左移運算子，將 1<<需要的號碼之位置即可，本範例中為 1<<7。但是 Bits 的
值直接轉成整數會變成 2^7 也就是 128，這不是正確答案。 
 18 
 
 █   
    
█    
    
    
    
包    
    
 
該盤面的 Key 值即為 Array[暗子][2]♁Array[暗子][11]♁Array[包][27]。 
在我們的做法中，還需要一些變數例如目前的行動方、該盤面的搜尋深度和
該次搜尋的最大深度等資訊。如此最後產生 Zobrist Hash Key 才能夠在
Transposition Table 上使用。 
Zobrist Hashing 技術可以提升 Transposition Table 的存取速度。但 32 Bits 的
變數不足以表示所有的棋盤狀況，而且記憶體大小也不足以記錄所有可能的盤面。
所以會有 Collision 的問題，即一個 Zobrist Hash Key 可能表示不同盤面。由於
Collision Rate 很低，通常在數千分之一到數萬分之一。發生 Collision 的節點不
一定出現在主要分支上，進而影響搜尋結果。目前許多程式普遍選擇承擔
Collision 的風險。 
使用 64 Bits 的 Zobrist Hash Key 來取代原本的 32 Bits，將 64 Bits 拆為兩份
32 Bits，將其中一組作為原本的 Zobrist Hash Key，另一組則為檢查碼，雖然會
占用較原本多一倍的空間，但可大幅降低 Collision Rate，較單純擴大一倍 Table
大小的效果好很多。本程式的實作只使用 16 Bits 作為檢查碼，但這樣最佳情形
下就可以將錯誤率降至原本不用檢查碼的 1/65536，約為原本的六萬分之一。實
驗證實這個改善方式非常有效，降低後的 Collision Rate 在極端複雜盤面下仍不
會超過三十萬分之一。 
 20 
 
同分步的情形分為兩種，一種是搜尋的所有走步都是 0 分，沒吃到子或是沒
有有利的兌子形勢。這時我們就需要找出一個趨勢，希望我方大子可以去壓迫對
方較小的子，所以我們另外採取單方搜尋的方式，希望能給程式一個趨勢來做出
行動。 
因為單方搜尋只產生我方走步，故可能會經過對方所掌控的位置。在走步產
生時程式會檢查棋子走步的目標周圍是否存在對我方該棋子具有威脅的棋子，若
存在，則此不產生此走步。需要檢查的部分還有炮的威脅問題，將目前欲產生之
子當作炮來產生走步，如此最多只有三個走步出現。若出現走步的目標能吃炮，
則代表選擇此步會被炮打到，也不產生此走步。 
另一種則是有吃到子或是被吃子，非 0 分的同分步，我們可以針對吃到子的
深度給予額外的調分以判別高下。越早吃到子的走步應該要比較晚吃到子的多分。
例如：第三層吃到就-3 分，第五層就-5 分。如此一來第三層吃到子的走步就會
比第五層吃到子的走步高 2 分，程式就會選擇較快吃到子的那一步。 
(五) 循環盤面的處理 
暗棋中，陷入循環盤面（通常為某一方長追）時，這盤棋雙方很有可能因為
很多回合不吃子也不翻子而和棋。但是在許多的循環盤面中，某一方是可以獲勝
的。所以本程式在偵測到此情形時，對於進入循環盤面的走步由每層漸進式更新
審局分數改為雙方子力差的分數。這樣可以評斷出進入循環走步時，對我方是否
有利：若我方為大負分，應該要讓盤面繼續循環以求和；反之若我方為大正分，
則可以考慮放棄被長追的子，走其它步以打開局面。 
(六) 暗棋與 VCS 結合 
台灣大學幾年前開發了一個 Chinese Dark Chess Playing System，稱為
DarkChess，提供一個介面讓電腦暗棋程式進行對下、測試，所以一個暗棋程式
只需要接收目前的盤面資訊，待程式搜尋過後再將走步回應給 DarkChess 即可。 
暗棋程式與 VCS 結合的方法與六子棋的結合方式類似，由於無法取得
DarkChess 介面的程式碼，所以需要在 DarkChess 與 Broker 中間插入一個中繼程
式，作為兩者溝通的橋樑，詳細步驟如下：(1) DarkChess 將盤面資訊送給中繼程
式，(2)中繼程式接收 DarkChess 的盤面資訊，再將盤面資訊編碼傳送到 Broker，
(3) Broker 尋找閒置的 Worker 協助搜尋，(4) Worker 搜尋結束後，將結果編碼回
傳給 Broker，(5) Broker 將搜尋結果傳送給中繼程式，(6)中繼程式最後將走步送
到 DarkChess。如圖 15 所示。 
 22 
 
而牌型分的計算是將所有需要的牌乘上它的類型分再乘上剩餘的張數，吃牌
可以吃上家，也可以自己摸到，碰牌除了自己摸到外，不管哪一家打出都可以碰，
所以碰的類型分會比較高，而間接類型或者是眼牌就一定只能自己來摸，因此分
數最低。 
預建表中的內容則如下表 3-3 所示，最左邊三個數字代表的是這個牌型的組
數搭數以及有效牌數，至於是什麼牌型就是用從後面來累加的做計算，第一個讀
取到的牌型就是沒有任一張，下一個牌型就是有一張九萬，再下一個也就是第三
行就是兩張九萬，第六行就會是一張八萬。接下來的數字則是代表需要的牌以及
他的需求類型，以一張九萬來說，它的組搭數為零，有效牌有三張，因此最前面
是{0 0 3}，接下來它的有效牌共有{7 8 9}三個，有效牌類型都是間接有效牌，就
會寫成{7 4 8 4 9 4}，其中 4 代表的就是間接有效牌的意思。而「非眼牌的情況」
代表是說我們認為這副牌沒有眼牌或者沒有適合當眼牌的牌存在。 
 非眼牌
的情況 
需求類型 眼牌的
情況 
需求類型 
沒有牌 0 0 0  0 0 9 1 4 2 4 3 4 4 4 5 4 6 4 7 4 8 4 9 4  
一張 9 萬 0 0 3 7 4 8 4 9 4 0 1 9 1 4 2 4 3 4 4 4 5 4 6 4 7 4 8 4 9 3  
兩張 9 萬 0 1 3 7 4 8 4 9 2 1 0 0   
 
 
(二) 動態重調整 
因為每位玩家的捨牌都有其決策，打出對他有利的一張牌，使得每張牌出現
的機率不均等。因此我們透過統計的方式得出那些牌是比較常出現的，這個動作
是在遊戲過程中動態做蒐集，我們可逐漸知道別人的捨牌取向，若對方有在遊戲
中調整策略我們也可以自動把權重更新回來進而應對，找出更正確的捨牌。 
再者，我們再統計細分為各家結果。這方式在各家打牌習慣有明顯差異時就
可以起到充足的作用，例如統計結果顯示萬子的出現率較高，但若現在有另一家
較容易打筒子，而他處於我們上家時，我們就可以將我們想「吃」的牌朝向筒子
方向做發展，藉此就可以提高進牌的機率。 
(三) 避免放槍機制 
在麻將遊戲中，如何讓自己快速胡牌固然是很重要的，但是若在胡牌之前就
放槍給別人的話遊戲就結束了。在這我們將推算哪張牌會比較容易胡牌，也就是
哪一張牌它能碰到的組合越多則代表該牌越有可能被胡牌。 
(四) 特殊牌型比對 
 24 
 
尚缺
剩餘 
9 8 7 6 5 4 3 2 1 
71 0.014 0.038 0.093 0.197 0.352 0.532 0.711 0.909 0.949 
70 0.014 0.038 0.093 0.197 0.352 0.532 0.711 0.909 0.949 
69 0.014 0.038 0.093 0.197 0.352 0.532 0.711 0.909 0.949 
68 0.014 0.037 0.088 0.197 0.352 0.532 0.706 0.900 0.949 
67 0.013 0.037 0.088 0.191 0.352 0.531 0.694 0.900 0.949 
… … … … … … … … … … 
55 0.001 0.005 0.029 0.114 0.266 0.424 0.557 0.651 0.730 
54 0.001 0.004 0.024 0.101 0.249 0.413 0.550 0.638 0.719 
53 0.000 0.003 0.020 0.093 0.237 0.395 0.525 0.626 0.712 
 
在打牌過程中就可以利用這些資料來做期望值的計算，舉例來說假如在剩餘
張數還有 71 張的情況下，也就是自己開局的第一巡目，若是以混一色為目標來
做考慮，發現我們還缺 4 張牌就可以胡到混一色的牌型，查表後得知在缺 4 張牌
且剩餘張數是 71 張的時候，胡牌的機率是 0.532(見表 3-8)，預期上可以獲得 6000
分，同時假設我們只是單純的打牌的話，根據統計結果胡牌率是 0.8，預期可以
獲得 3000 分。這裡胡牌的定義皆為 10 巡目之前，並且設定其他家不會胡牌，藉
此減少掉模擬時變因。 
不只是混一色的牌型，各種大牌型都採用這種方法模擬，有了這些大牌型模
擬的數據，往後在遊戲中，就可以根據手牌狀況來決定打牌的方向了。 
 
五、蜜月橋牌 
(一) 程式的資料結構 
使用二維陣列作為資料結構如下圖，二維陣列雖然運算速度沒有一維陣列或
者是 BitBoard 來的快，但是可以區分出花色，對判斷出牌是否合法以及展開搜
尋，可以加快程式的判斷以及方便撰寫，十分實用。 
♠2 ♠3 ♠4 ♠5 ♠6 ♠7 ♠8 ♠9 ♠10 ♠J ♠Q ♠K ♠A 
♥2 ♥3 ♥4 ♥5 ♥6 ♥7 ♥8 ♥9 ♥10 ♥J ♥Q ♥K ♥A 
♦2 ♦3 ♦4 ♦5 ♦6 ♦7 ♦8 ♦9 ♦10 ♦J ♦Q ♦K ♦A 
♣2 ♣3 ♣4 ♣5 ♣6 ♣7 ♣8 ♣9 ♣10 ♣J ♣Q ♣K ♣A 
 喊上
方喊
而對
(三)
一方
牌，
價值
且擁
樣子
 
去。如果說
到他想要
自己越不
 換牌演算
換牌階段
會有優先
是否想要得
來決定他
有下一輪
在每一回
就可以利
 
審局函數
點數
Ace
K 
Q 
J 
10 
每一門花
的花色及線
利，不如讓
法 
每一回合都
出牌權，通
到這張牌
會出什麼牌
的出牌權。
合換牌的階
用機率算出
把每張牌的
 
 
色得到的分
位，因為我
對方喊到反
會有一張
常先手的
。而後手的
。雙方出完
 
段時，會先
我們出哪
牌組
價值先分
改良過
26 
數都過低
方的手牌
而達成勝
翻開來的牌
一方會根據
一方則會
牌以後牌
以一個表
一張牌有最
狀態紀錄
成王牌花色
後審局分
王牌花色
100 
95 
90 
88 
86 
的話，這時
本來就是比
利條件較低
擺在檯面
出現的牌
根據先手方
較大的一方
格紀錄每一
高的機率
圖 
及非王牌
數表 
候也會放
較弱勢，
，還比較
上，這時候
來決定他將
出的牌以
可以得到
張牌的狀
可以達到自
花色如下表
非王
棄喊牌，讓
所以喊上去
有可能獲勝
拿到控制權
要出哪一
及翻開的牌
出現的那張
態如下圖
己的目的
： 
牌花色 
90 
60 
50 
40 
37 
對
反
。 
的
張 
的
牌
，這
。 
 
 花色
會根
回傳
(五)
的 M
 
在打無王
都是各自
據這個規
的分數都
 蜜月橋牌
首先演算
ax 層。就
規則的時候
獨立的。所
則作展開。
是在子節點
的 Alpha-B
法的每一個
如下圖一樣
排序
，其實與一
以我們在做
在展開的
持先手玩
eta pruning
節點都是
。 
28 
過後的搜尋
般有王牌
無王的 M
過程中，我
家得到的分
演算法 
Max層只是
序列圖
花色的規則
in–Max 演
們都是以
數。 
差別在於是
很相似，
算法展開
「先手」的
我方的M
差別在於每
搜尋的時候
角度，子節
ax層還是對
 
個
也
點
方
 30 
 
    int maxi = 0; 
    int same_f1, same_f2, dif_f1, dif_f2, dif_f3; 
    for (int i = 0; i < flower; i++)  
 { 
  if ((order & (1<<i)) != 0)  
  { 
   minimum = VeryBig; 
      maximum = -VeryBig; 
     /* 無缺門的處理 */  
   same_f1 = search (order, 0 ,i);//搜尋找對家比自己小的牌 
   if (same_f1 != NoFind)  
   { 
  maximum=max(maximum,1+AlphaBeta(order,flower,level-1,yes,alpha,beta)); 
    if(maximum >= beta) return maximum; 
    alpha = max( alpha ,maximum); 
   }  
  same_f2 = search (order, i+1,flower);//搜尋對家比自己大的牌 
   if (same_f2 != NoFind)  
   { 
 minimum=min(minimum,level-1-AlphaBeta(order,flower,level-1,no,alpha,beta)); 
    if(minimum <= alpha) return minimum;//alpha cut 
    beta = min (beta, minimum); 
   } 
   simu_score[number] = max( minimum, maximum); 
   number++; 
 32 
 
狀況，若有放子視為 1，若無視為 0，以後面剩餘的位元記錄是否有吃入對方任
何子，將其填滿之後，通常我們會以 0x00000000 的方式以方便程式撰寫。 
由於使用 32 位元表示，在編譯器裡編輯程式時，必須使用十六進位表示法
才容易觀察變數內容。舉例來說，若角行位於下圖中 2 號位置，原本應該表示為 
0000 0000 0000 0000 0000 0000 0000 0100，但切換至十六進位後，則以
0x00000004 作記錄。 
 
取得 BitBoard 表示法後，本論文將透過無負號的 32 位元整數(unsigned 
integer)，來儲存每一種兵種在棋盤上的狀況。將雙方在盤面上的王將(玉將)、飛
車、角行、金將、銀將和步兵以及在盤面下被雙方吃入的子對應到代表的數字。
倘若我們要了解其中一方棋子例如我方或者敵方在盤面當中所佔的位置(red / 
black / occupied)，只要將其目標作 or 運算即可。 
(二) 兵種走步生成 
1. 一般走步生成 
針對一般的兵種來說，走步的生成相當的固定，針對我方棋子執行以下的動
作： 
(1)從所有我方的棋子當中，依照王將→龍王→龍馬→飛車→角行→金將→銀將
→步兵的順序找出可移動的第一顆子。 
(2)針對該棋子在資料庫當中找出其相對應兵種在該位置能行走到的位置，我們
給予這些位置一個數值，相當於一個對應的遮罩。 
(3)針對每一個可以行走到的位置，生成一個走步，並且將該走步從原本的遮罩
當中取消掉。 
(4)重複動作(3)直到該棋子可被生成的走步皆完成了，便將這顆可以移動的棋子
從我方的遮罩當中消除，回到動作(2)，找下一顆可以移動的棋子。直到所有
棋子皆生成適當的走步為止。 
範例 金 13 的遮罩
    
    
    
    
    
 
走步 1 生成 
 
金 13 的遮罩 
 
走步 2 生成 
    
    
    
    
    
 
4 3 2 1 0 
9 8 7 6 5 
14 13 12 11 10
19 18 17 16 15
24 23 22 21 20
 34 
 
的過程當中，雖然能夠吃入對方的子，但是在盤面上沒有子的時候卻不會優先選
擇打入。 
而在審局分數的配置技巧上，有些程式選用的是動態配置，例如當盤面符合
哪些條件的時候，便給予不同的子力分數，隨著不同的局勢動態的做調整。但由
於 5 五將棋在遊戲的過程當中涉及走子、吃子、升變、打入等等的狀況，在這個
部分我們先不考慮做動態的子力分數配置。而我們也將場邊的分數做些微的調整
(如下表所示)，在搜尋過程當中，打入才可以列為優先考慮的其中一部份。 
 王將 龍王 龍馬 飛車 角行 金將 銀將 步兵 
場上 10000 850 750 550 450 200 170 120 
場邊 10000 800 700 500 400 150 100 70 
 
(四) Transposition Table 的設計與實作 
針對 5 五將棋這個項目，在搜尋樹展開的過程當中我們也會在許多重複盤面
上花費許多時間，因此我們使用 Transposition Table (簡稱為 T.T.)來儲存我們搜尋
過程當中會遇到的重複盤面，以降低我們展開搜尋樹的時間，也讓我們在有限時
間內提升可搜尋的層數。Zobrist Hashing 是由 Albert Lindsey Zobrist 在 1969 年提
出的一個雜湊函數，將大量的隨機亂數以 XOR 運算得出一個 Zobrist Hashing key，
來表示各種盤面。 
另外，也因為記憶體容量的問題，我們針對可能發生的 Collision 問題做出
相關的應對策略。將 64 Bits 的 Zobrist Key 拆為兩份 32 Bits 所組成的碼，將其中
一組作為檢測碼，另一組則為原本的 Zobrist Key，雖然會占用較原本多一倍的空
間，但可大幅降低 Collision Rate，較單純擴大一倍 Table 大小的效果好很多。 
七、五子棋新棋規及五~七路五子棋勝負問題之研究 
(一) 目前五子棋的困境 
五子棋目前的處境是這樣，首先是規則越來越多也越複雜，我們有看到這個
趨勢，從 1899 年到現在還不斷地在改，而且越改越複雜。身份要換來換去，還
有一堆禁著，這是走法不對稱的棋規。另外，指定開局、交換、禁手規則並不自
然，所以玩家很難記得所有規則，這個是普遍的大問題。 
基本上，對於佔有優勢的一方，應該加以更多的限制，這就是「佔優者受限」
的觀念，本是無可厚非的事；然而，為了公平性而定了一堆繁複的規則，使得人
們在玩這個遊戲的時候就越來越不容易搞清楚要怎麼玩了。我們知道，其它有一
些棋盤規模較小的棋類也是已有定論(已遭破解），例如井字遊戲，已知雙方均不
犯錯時必和。另外，例如盤面大小為 6×6 的黑白棋，已被證明是「後下必勝」。
其它已被破解的棋類如連四棋(Connect-Four)、Qubic、8×8 Domineering、Fanorona，
這些遊戲就不太會再舉行比賽了，而因規模較小也沒有人去改良其棋規。 
 36 
 
 
(2) 林氏新棋規 
2012 年 5 月份林順喜教授在台灣師大及開南大學兩校的演講中，首度提出
「林氏新棋規」，試圖挽救五子棋的命運。其中有幾個目標，第一個目標是要「維
持連五」，連五這個傳統的規則我們一定要維持。第二個目標是要「規則簡單」，
可是別人的規則已設計得那麼複雜，要怎麼簡化? 第三個目標是要「雙方公平」，
希望遊戲要公平，有更理想的簡單棋規嗎? 
首先根據 Allis 的研究成果我們知道：如果黑方第一手下在天元，黑方有很
快的手段(最多 35 步)就可把白方打敗了，一個例子如下圖所示。 
 
經過長時間的構思，我們想到一個新棋規，這個新棋規目前取名為「林氏新
棋規」，只有唯一的一條規則。這條規則非常簡單，就是我們規定第一手黑方只
能下在棋盤的外環區域，第二手起雙方就全部都自由了。現在我們來探討為何這
樣設計，根據我們長時間下五子棋的經驗，可瞭解黑方若第一手下在天元，必定
是最有威力的，因為這位置所有方向都可延伸出去最長的距離，攻擊的力度當然
也最佳。反過來，若黑方第一手下在棋盤外圍，則往邊界方向就有了障礙，當然
連五的機會就較少了，這時白方會贏的機會就大為增加了。 
(3) 尋找公平邊界 
 38 
 
的軟硬體技術來說，如果有一個程式能快速搜索到 30 層，那就已經很了不起了。
58 手才贏的話，其實是到最後的時候才看到贏的路徑，前面都是看不到的，所
以必須等到約 30 手後才開始明朗化，誰優誰劣才比較能一目了然。那你會想說
到 30 步就會看到必勝之路，所以被破解了?並沒有，因為 30 步也是因為在更早
之前少了很多步看不到答案黑方才會落敗，如果看得到的話，黑方早已準備抵制
白方了。總而言之，遊戲樹裡有一方看不到那麼深而落敗，如果他提早看到，這
一局白方還不見得會贏。 
 
另一個例子如上圖，我們將第一手擺在隔了角落一個位置，我們也讓三段的
「黑石」自動對下，但它纏鬥了很久很久，結果在第 120 步白贏了。另外，下圖
左的黑方第一手下在下邊界，結果白在第 44 步贏了。下圖右的例子則黑贏了。 
  
可見有些時候白會贏，有些時候黑會贏，可是會發現一件事情，對這個軟體
而言，如果第一步不是下在很中間或很靠邊界，它基本上會纏鬥了很久某一方才
看到贏的路徑或者最後形成和局。因此由這些例子可以看出，如果黑方第一手下
在天元幾乎是必贏，但是如果下在最角落，黑方就很容易輸，因為第一手的發展
性低。簡單來說，就是黑方下在中央佔很大的優勢，下在角落會吃虧，所以我們
要去尋找一條所謂的邊界，在那個邊界上對雙方而言，都不容易贏也不容易輸，
 40 
 
(三) 資料結構與演算法 
(1) Proof Number Search 演算法 
Proof number search(縮寫為 PNS) 是 Allis 在 1994 年提出的演算法，主要
用於兩人對局遊戲時，能證明某些盤面必勝、必敗的演算法。兩人對局遊戲例如：
六子棋、五子棋、圍棋、象棋等，都能適用 PNS 來證明某些盤面的勝負。PNS
是一種 best first search 的演算法，需把整顆搜尋樹存在記憶體當中，直到證明
勝負或資源耗盡為止。  
 
上圖是之後說明時會用到的例子，PNS 將攻擊方下完著手之盤面用圓型代
表，防守方下完著手之盤面用方型代表。此例以五子棋來說，根節點 R 是黑方
(攻擊方)，M、N 為白方(防守方)，A~G 為黑方(攻擊方)。 
若要證明此例黑必勝(R 必勝)，白方所有擋法都要能證明是黑必勝(M、N 必
勝)，所以圓型節點又稱為 And 節點；要證明 M 是黑必勝， A~D 其中一個黑
必勝即可，所以方型節點又稱為 Or 節點。我們說 PNS 也是一種 And/Or 樹。  
Proof number search 主要有兩個數值 proof number(pn) 和 disproof 
number(dn)，代表的意義為當前盤面還須展開幾個子盤面才可以證明此盤面必勝
或必敗，所以當一個盤面必勝時，pn 與 dn 的值分別為 0 與∞，反之當必敗時其
值分別為∞與 0，而預設值皆為 1，代表未知，如下圖所示，其中較粗的箭頭代
表最佳路徑。 
 
 (2) 
的演
first
也較
為 m
一個
 
 
 
 
 
tran
法中
繁的
min
376
 
Depth Firs
Depth firs
算法，顧名
 search，然
PNS 小，
ost-promi
子節點比
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
由 pesud
sposition ta
也加上了
switch，如
(pt,݌ଶ(1+ε
5，即可改
t Proof Nu
t proof num
思義是將
而 Df-pn
此技術增加
sing node
此節點更佳
o code 中
ble，以改進
1+ε的方法
圖 4-7 所
)) ，假設
善頻繁 swi
mber Searc
ber search(
原本 proof
的優點在於
兩個 thre
，若此節點
，下圖為
可以明顯
PNS 記憶
改良，避
示，若將下
ε= 0.25，
tch 的問題
42 
h 演算法
簡稱 Df-pn
 number se
展開的內
shold 變數
的 pn 或 dn
此技術的 p
看出此技
體不足及
免因門檻太
方式子中
則下圖中左
 。 
)為 Ayumu
arch 運用 b
部節點較少
作為門檻值
的值超過
seudo code
術有用到
效能不佳的
嚴格而造
的 p ݐଵ = 
方 3013 的
 Nagai 於
est first sea
，所耗費
，判斷目
threshold 
。 
iterative 
缺點。然
成 MPN 在
min(pt,݌ଶ+
值變成 3
2002 年所提
rch 改為 d
的記憶體資
前的節點是
，則代表有
deepening
而在 Df-p
不同子樹中
1) 改成 p ݐ
012(1+0.25
出
epth 
源
否
另
及
n 算
頻
ଵ = 
) = 
 44 
 
(四) 程式改良與實驗數據 
(1) 走步產生改良 
我利用 bitboard 的特性對走步產生做改良，將原本 Ogemust 網站上的 source 
code 運用 for 迴圈的方式改為用 shift bit 的方式去產生走步，減少計算所需的時
間；另外運用 mask 的方法將原先的走步產生順序改為更符合人類思考的模式，
以提升程式效率，如下圖所示，左側為原先走步產生次序，右側為 mask 後之走
步產生次序。 
       
此外，我更進一步想知道不同的遮罩方式，其效率是否也有差異，因此對每
一種n-mask遮罩做實驗，其中n-mask代表的意思是走步產生次序用到n個遮罩，
1≦n≦4，以上圖左側的棋盤表示法為例，27-28-35-36 為最內層的 mask，將此
同心矩形往外延伸即可得到其餘的 mask，如下圖所示。 
                                            
                                                                          
 
                               
 
 
 
 
 
 
 
因此我們可以比較用不同的遮罩數以及是否使用 shift bit 動作在同樣的測試
盤面中其耗費的時間多寡，如下表所示。 
mask2 mask3 
mask1 mask2 
mask1 
 46 
 
教之走步))，所得到的 64 位元整數即為 hash key，再到事先建好的 hash table 中
找答案。 
 
從下圖中我們可以知道 moveDB 這個二維陣列的 hash table 所存放的值就是
當前某個兵種在 square 位置可移動到哪些地方，而 mask 與 magic 分別存放此兵
種在 square 位置的 mask bitboard 值與對應的 magic number。 
 
然而在實作這個方法時遇到了兩個問題，其一為由於五子棋是八個方向都要
判別連五，因此 mask 出來的連五範圍最多有 27 個位置，故需要2ଶ଻容量大小的
table 存放，耗用太多的記憶體，所以我將水平垂直與斜線分開來處理，不過需
要多找一倍的 magic number 數量；再來遇到的問題是尋找 magic number 時
collision rate 很高，畢竟我希望找到的是 perfect hashing 的 magic number，因此為
了降低 collision rate，以及發現五子棋 hash table 所需存放的值為是否連五，故若
mask 結果為連五(以 F 表示)，而 hash key 對應的值亦為 F(如下圖)，則我視為沒
有 collision，反之亦然。 
 48 
 
上圖中可以清楚地看到若將黑子或白子落於小圓點處並不會造成連五，因為
雙方皆已將此點之連五範圍兩側封死，所以我們可以利用這些死點來減少走步產
生的數量，以達到效能加速之目的。 
然而在實作方面，定義一個 deadpoint 的 64 位元整數變數，用來記錄目前死
點在棋盤上的位置，而且會從根節點一路更新並傳遞下去；而在走步產生時，會
先將這些死點濾掉，以減少搜尋樹的分支度。至於如何判別此點是否為死點，方
法與判別是否連五大同小異，只需要判斷此點滿足黑白雙方皆不可能連五。此外，
在圖 5-7 中我們了解要滿足死點的條件至少棋盤上需有 16 個棋子，因此可以推
測這個方法應於中局左右(以 8×8 盤面大小而言)使用效果較好，下表為是否使用
Deadpoint 加速法之時間比較表。 
從下表中的數據來看，由於 Test1~Test8 皆為中局左右的盤面，所以效能提
升的幅度相當大；Test6 在使用此方法後時間反而增加的原因在於這個測試盤面
的死點相當少，因此 deadpoint 過濾的 overhead 造成了這個結果。 
欄 1 MMBG MMBG+DP 
Test1 2814.6 25.467 
Test2 312.307 8.032 
Test3 581.03 4.806 
Test4 6373.12 72.546 
Test5 3.845 4.666 
Test6 47.028 59.314 
Test7 2.387 2.347 
Test8 2.375 2.345 
此外，使用 deadpoint 還有一個優點，那就是如果需要縮小盤面來做實驗，
不需要改太多的地方，只要將 deadpoint 的預設值改成你想要遮蔽的區域，例如
把  8 × 8 大 小 的 盤 面 縮 小 成 6 × 6 ， 則 我 們 只 要 將 deadpoint 設 成
0xFF818181818181FF 即可(如下圖)，相當的方便且實用。  
 
(五) 實驗結果與分析 
 50 
 
由前一個實驗我們知道若要得出五子棋黑方第一手之盤面的勝負結果，只需
要對八分之一盤面做實驗即可。首先要實驗的盤面大小為 5×5，因此我們只要做
黑方第一手下在下圖的六個點，就可以得出整個盤面的勝負關係。 
 
實驗用的程式為前一章作眾多改良之五子棋程式，下表為各位置當成黑方第
一手所得到的勝負結果與執行時間。 
位置 執行時間(s) 勝負結果 
1 35.8 和 
2 39.04 和 
3 30.29 和 
4 41.9 和 
5 32.55 和 
6 34.3 和 
由上表可知，我們只需要花三十到四十秒左右的時間就可以得出 5×5 盤面的
勝負結果，皆為和。但其實在實驗之前就可以預料到這個結果，因為只要某一方
在 5×5 盤面任意位置下一子，則另一方在此位置之連五範圍皆不可能連五，因此
會導致盤面上的位置很快地都變成了死點。 
再來要實驗的盤面大小為 6×6，我們如同 5×5 盤面做黑方第一手下在下圖的
六個點，就可以得出整個盤面的勝負關係。 
 
 52 
 
八、Coin Problem 
(一) 前言與問題定義 
硬幣問題(Coin Problem)又叫找錢問題(Money-Changing Problem)或換硬幣
問題(Coin Exchange Problem)，也有人叫它做兌換郵票問題，是一個十分著名的
問題。 
Coin Problem 最早是由 Frobenius 提出的，他證明在兩個變數且互質的情況
下， 為最大無法湊出之數。因此在數學上最大無法湊出之金額被稱為 Frobenius 
number。 
所謂的 Coin Problem 的定義如下： 
令 n≧2，整數 0＜a1＜...＜an，GCD(a1,a2,…,an)=1。ai 代表第 i 種硬幣的面
額，這 n 種硬幣的可湊出之數可寫成  其中 xi 為非負整數。問題為求其最大無
法湊出之金額 N，也就是 Frobenius number。舉例來說，硬幣 4、9、10 最大無法
湊出之金額為 15，在大於等於 16 的幣值則都湊得出來，因此其 Frobenius number
即為 15。 
由於現在於兩個變數的情況下已有公式解，而在四個變數以上已知無
closed-form solution，故本論文只在三個變數的情況下做討論。此部分的問題現
在尚未有通解，但已知在某些情況下有解或是上限值。 
本論文延續「三個變數之硬幣問題之研究」的研究（以下以論文簡稱）。此
論文由國立台灣師範大學資訊工程所吳京達在 2007 年所發表，不同於傳統數學
推導的方式，以填表法處理硬幣問題，成功在最小數為特定數 2、3、4、5 或 6
時猜測出所有此問題之解，並證明解的正確性。但在最小數大於 6 時，我們發現
尚具有更複雜的規則。本論文完成最小數為 7 的證明，處理線規則多於兩個的更
複雜規則，並進一步整理出證明的原則。並且實作出程式，可猜測最小數大於 7
的問題的解規則。在以後融入證明的原則後，將實作出機械證明的程式。如此，
期望將能自動證明所有三個變數下的硬幣問題。 
(二) 研究方法 
本論文用填表法列出所有有相同特性的所有 g(a,b,c)的解。將 g(a,b,c)問題的
b、c 值以 mod a 的值分類，發現以這三個值分類時，以二維列表列出所有解時，
解的成長與 k、m 有關。然後再證明解規則的正確性，即確定解規則。下面以問
題 g(a,b,c)=g(3,3k+1,3m+2)為例作說明。 
下表表示 g(a,b,c)的 Frobenius number 表格(注意表中其解 s 為 Frobenius 
number+1)。 
 
 54 
 
2  42,0,6 
14,7,‐
1 
  42,0,6
7,7,‐1 
28,0,2
7,14,2
42,0,6
0,21,6 
0,7,1 
35,0,4 
0,14,4 
28,0,2 
0,21,9 
42,0,6 
0,14,6 
14,7,4 
3  42,0,1
2 
7,7,‐2 
28,0,6 
7,14,‐
1 
42,0,1
2 
0,14,‐
2 
14,7,2
0,7,‐2
35,0,9 
0,14,2 
28,0,6 
0,21,6 
42,0,12 
14,7,5 
42,0,12
0,21,12 
4  42,0,1
8 
0,21,‐
3 
42,0,1
8 
14,7,4
0,7,‐3
35,0,1
4 
0,14,0
28,0,1
0 
0,21,3
42,0,18 
0,14,4 
14,7,7 
42,0,18
7,7,4 
28,0,10 
7,14,10 
5  42,0,2
4 
0,14,‐
4 
14,7,5 
0,7,‐4
35,0,1
9 
0,14,‐
2 
28,0,1
4 
0,21,0
42,0,2
4 
0,21,3
42,0,24
7,7,3 
28,0,14 
7,14,7 
42,0,24
14,7,10 
6  0,7,‐5 
35,0,2
4 
0,14,‐
4 
28,0,1
8 
0,21,‐
3 
42,0,3
0 
28,0,1
8 
7,7,2 
7,14,4
42,0,3
0 
14,7,9
42,0,30
0,14,2 
14,7,10 
42,0,30 
0,21,9 
 
由於篇幅限制，在此僅做三條的解規則問題 g(7,7k+1,7m+3)的第三條解規則
之證明。如表格所示，g(7,7k+1,7m+3)有三條解規則，分別是 s1=42k、s2=14m、
s3=14k+7m-1。第三條解規則 s3=14k+7m-15 之線規則為 m≦2k-1 和 m≥k，如下
表所示。 
m
         
k 
1  2  3  4 5 6 7 8 9  1
0 
1  2
0 
2
8 
4
2 
4
2 
4
2 
         
2    4
1 
4
8 
5
6 
7
0 
8
4 
8
4 
8
4 
8
4 
8
4 
 56 
 
1. 皆以 b 來湊。y mod 7 = -2 = 5，b=7k+1 mod 7 =1，2b mod 7=2，最小 nb mod 
7=5 之 數 為  5b mod 7= 5 ， 但 5b=35k+5 =14k+21k+5 
=14k+21m/2+21/2+21z/2+6>14k+7m-2= (因為 m≦2k-1，令 m+1+z=2k 代入)，
故無解。 
2. 皆以 c 來湊。y mod 7 = 5，c=7m+3 mod 7 =3，2c mod 7 =6，3c mod 7 = 2，
但 3c=21m+9=14m+7m+9 =14k+14z+7m+9> y=14k+7m-2。4c 以上皆超過上限
值，故無解。 
3. 同 時 以 b 、 c 來 湊 。 (b+c)mod 7=4 ， (2b+c)mod 7=5 ， 但
(2b+c)=14k+2+7m+3>y=14k+7m-2 已超過上限值；而 (b+2c)  mod 7=0 但
(b+2c)=7k+1+14m+6=7k+7m+7m+7=14k+7m+7+7z (因為 m≥k，令 m=k+z 代入) 
> y=14k+7m-2，超過上限值。其餘 nb+nc 皆超過 2b+c 及 b+2c，因此皆會超過
上限值。如此，沒有小於 y=14k+7m-2 可用 a、b、c 湊出來，故無解。 
由 A、B 可知，當 g(7,7k+1,7m+3)且線規則在 L3: m≦2k-1、m≥k 時，解為
s3=14k+7m-1。 
本論文整理證明後發現，到目前為止，所有證明有解和無解的方法皆可藉由
線規則的轉換，推導到其結果。因此，在以下段落整理出證明的原則。 
(2) 研究成果二：證明原則整理 
證明分兩部分：有解和無解部分。本論文研究發現，到最小數 12 為止，只
需要配合線規則的轉換，皆可推導到結果。 
(a) 有解部分： 
有解部分需證明 y 大於等於解時皆能以 a、b、c 湊出來。所需證明之數區分
為 y mod a =1、y mod a =2 一直到 y mod a =a-1，各別嘗試以 a、b、c 湊出來，但
限制是不能超過上限 y 值。在過程中，b、c 可能需要用線規則做轉換，例如在
以上段落例子中，證明 y=s3=14k+7m-1 有解的部分，就需利用線規則 m≦2k-1，
令 m+1+z=2k 代入，以將目標 y 中的 k 轉換為 m，最後以 2c+7z 湊出解答。 
(b) 無解部分： 
無解部分需證明 y 小於解時皆不能以 a、b、c 湊出來。先分為以 b 來湊、以
c 來湊和同時以 b、c 來湊三種情況（注意三種情況 a 皆可拿來湊）。然後，以 y mod 
a = R 為目標，依 b mod a=r1、c mod a =r2 之值，在三種情況下分別嘗試湊出來。
令所湊之數為 y2，湊數字過程會發現，y2 mod a ≠ R，或者是 y2 mod a =R，但
y2>y。要證明 y2>y 的過程中，有時需將 m 轉換為 k 或 k 轉換為 m，這時需使用
線規則轉換。再依歸納法，可知 y2 再加上 b、c 皆會大於 y，得證。 
(四) Coin Problem 與 VCS 結合 
 58 
 
林立，林順喜，三個變數之硬幣問題之延伸研究，資訊技術應用及管理研討會，
2012，高雄，台灣，中華民國。 
林典餘，麻將人工智慧之研究。2008，國立交通大學研究所碩士論文。 
吳京達(2007)，「三個變數之硬幣問題之研究」，國立臺灣師範大學，碩士論文。 
施宣丞，林順喜，暗棋程式DarkCraft的設計與實作，TCGA 2012 conference，2012，
花蓮，台灣，中華民國。 
唐心皓，吹牛骰子之人工智慧改良。2011，國立臺灣資訊工程研究所碩士論文。 
莊凱閔、陳玥汝，電腦麻將演算法及相關議題之研究。2007，第十二屆人工智慧
與應用研討會。 
陳昌裕，林順喜，“五～七路五子棋勝負問題之研究＂，第十八屆人工智慧與應
用研討會，2013，台北，台灣，中華民國。 
陳新颺，林順喜，“電腦麻將程式 ThousandWind 的設計與實作＂，第十八屆人
工智慧與應用研討會，2013，台北，台灣，中華民國。 
陳志宏，勞永祥，林順喜，“運用志願型計算系統設計蒙地卡羅圍棋程式＂，第
十七屆人工智慧與應用研討會，2012，台南，台灣，中華民國。 
陳志宏，六子棋之棋型分類及審局函數之研究，國立臺灣師範大學，碩士論文，
2011。 
梁聖彥，朱德清，林順喜，機率性對局遊戲的電腦解法研究。2000，第五屆人工
智慧與應用研討會。 
勞永祥，電腦暗棋之人工智慧改良，國立臺灣師範大學，碩士論文，2011。 
黃士傑，New Heuristics for Monte-Carlo Tree Search Applied to the Game of Go。
2011，國立臺灣資訊工程研究所博士論文。 
黃德彥，五子棋相關棋類人工智慧之研究，國立交通大學碩士論文，2005 年。 
張瓈文，「德州撲克」不完全資訊賽局之研究。2006，國立臺灣資訊工程研究所
碩士論文。 
葉俊廷，非完全資訊賽局-蜜月橋牌之研究。2009，國立臺灣資訊工程研究所碩
士論文。 
 60 
 
Chessprogramming, http://chessprogramming.wikispaces.com/. 
Chih-Hung Chen, and Shun-Shii Lin, “Effective Integration Frameworks for 
Combining Computer Gaming programs with the Grid Computing System,” JSAI 
2013, Toyama, Toyama, Japan 2013. 
Chih-Hung Chen, Shun-Shii Lin, and Min-Huei Huang, “Volunteer Computing 
System Applied to Computer Games,” TCGA 2012 conference, Hualien, Taiwan, 
2012.  
Chinese Dark Chess Playing System, 
http://www.csie.ntu.edu.tw/~f92025/darkchess.htm. 
Claude E. Shannon , Programming a Computer Playing Chess, Philosophical 
Magazine, Ser. 7, Vol 41, No. 312 – March 1950. 
Coarse-grained parallelism, http://en.wikipedia.org/wiki/Parallel_computing. 
Connect6 homepage，http://www.connect6.org/. 
Contract Bridge, http://www.rpbridge.net/1a00.htm. 
D. Beihoffer, J. Hendry, A. Nijenhuis, S. Wagon, “Faster Algorithms for Forbenius 
Numbers,” The Electronic Journal of Combinatorics, Vol.12, 2005, R27. 
D. E. Knuth and R. W. Moore, "An Analysis of Alpha–Beta Pruning", Artificial 
Intelligence 6(4), pp. 293–326, 1975. 
D. M. Breuker, J. W. H. M. Uiterwijk, and H. J. van den Herik, “Solving 8×8 
Domineering,” Theoret. Comp. Sci., Vol. 230, 2000, pp. 196–206. 
Daniel Hellsson,A MahJong-Playing Program. 2000, LUND INSTITUTE OF 
TECHNOLOGY. Lund University. 
E. W. Weisstein, “Coin problem,” From MathWorld—A Wolfram Web Resource, 
http://mathworld.wolfram.com/CoinProblem.html. 
E. W. Weisstein, “Diophantine equation,” From MathWorld--A Wolfram Web 
Resource, http://mathworld.wolfram.com/DiophantineEquation.html. 
E. W. Weisstein, “FrobeniusNumber,” From MathWorld—A Wolfram Web Resource, 
http://mathworld.wolfram.com/FrobeniusNumber.html. 
E. W. Weisstein, “McNuggetNumber,” From MathWorld—A Wolfram Web Resource, 
http://mathworld.wolfram.com/McNuggetNumber.html. 
 62 
 
J.-C. Chen, T.-Y. Lin, S.-C. Hsu and T.-S. Hsu, "Design and Implementation of 
Computer Chinese Dark Chess Endgame Database", Proceeding of TCGA Workshop 
2012, Hualien, Taiwan, pp. 5–9, 2012. 
J. Dixmier, “Proof of a conjecture by Erd¨os and Graham concerning the problem of 
Frobenius,” Journal of Number Theory, Vol.34, 1990, pp.198-209. 
J. J. Sylvester, “Mathematical questions with their solutions,” The Educational Times, 
Vol.41, 1884, pp.21. 
J. L. R. Alfonsín, The Diophantine Frobenius problem, Oxford Lecture Series in 
Mathematics and its Applications, Oxford Univerity Press, 2005. 
J. Nash, ”Non-cooperative Games”, Math. Ann, 1951. 
J. Swanson, Game Theory and Poker., 2005. 
J. V. Neumann, ”Zur Theorie der gesellschaftsspiele”, Math. Ann, 1928. 
J. Wágner and I. Virág, “Solving Renju,” ICGA Journal, Vol. 24(1), 2001, pp. 30–34. 
Knuth, D.E., Moore, R.W.: An Analysis of Alpha-Beta Pruning. Artificial Inteligence 
6, 293–326 (1975) 
L. V. Allis, “Searching for Solutions in Games and Artificial Intelligence,” Ph.D. 
Thesis, University of Limburg, Maastricht, 1994. 
L. V. Allis, “A Knowledge-Based Approach of Connect-Four: The game is over, 
White to move wins,” M.Sc. thesis, Vrije Universiteit, Amsterdam, 1988. 
L. V. Allis, H. J. van den Herik, and M. P. H. Huntjens, “Go-Moku Solved by New 
Search Techniques,” Computational Intelligence, Vol. 12, 1996, pp. 7–23.  
L. V. Allis, M. van der Meulen, H. J. van den Herik, “Proof-number search,” Artificial 
Intelligence, Vol. 66 (1), 1994, pp. 91–124. 
L. V. Allis and P. N. A. Schoo, “Qubic Solved Again,” In H. J. van den Herik and L.V. 
Allis (eds.), Heuristic Programming in Artificial Intelligence 3: The Third Computer 
Olympiad, Ellis Horwood, Chichester, 1992, pp. 192–204. 
Loosely-coupled distributed system , 
http://en.wikipedia.org/wiki/Coupling_(computer_ programming). 
M.-K. Tsai, Y.-C. Lei, C.-W. Huang, C.-H. Chen, and C.-K. Chen, C++ Builder 6: 
Complete Guide, GrandTech Press, Taipei, Taiwan, 2007. 
 64 
 
Shih-Chieh Huang, Remi Coulom, and Shun-Shii Lin, 2010, " Monte-Carlo 
Simulation Balancing Applied to 9×9 Go", ICGA Journal, Vol. 33, No. 4, pp. 191-201. 
Shih-Chieh Huang, Remi Coulom, and Shun-Shii Lin, "Time Management for 
Monte-Carlo Tree Search Applied to the Game of Go", International Workshop on 
Computer Games (IWCG 2010), Hsinchu, Taiwan, November 18-20, 2010. 
Shih-Chieh Huang, Remi Coulom, and Shun-Shii Lin, "Monte-Carlo Simulation 
Balancing in Practice", The International Conference on Computers and Games 2010, 
JAIST, Kanazawa, Japan, September 24-26, 2010. 
Soeda, Shunsuke, Tomoyuki Kaneko, and Tetsuro Tanaka. "Dual lambda search and 
shogi endgames." Advances in Computer Games (2006): 126-139. 
Stephen J. J. Smith,Dana Nau,Tom Throop,Computer bridge: A big win for AI 
planning.1998, AI Magazine, 19(2):93–105 
Sylvain Gelly and David Silver.Combining online and offline knowledge in 
UCT.2007,In international Conference on Machine Learning. 
Sylvain Gelly and Yizao Wang.Exploration exploitation in Go:UCT for Monte-Carlo 
Go.2006, University of Paris-Sud, Orsay, France. 
T. C. Brown, P. J. Shiue, “A remark related to the Frobenius problem,” Fibonacci 
Quarterly, Vol.31, 1993, pp.31-36. 
T. H. Cormen, C. E. Leiserson, R. L. Riverst, C. Stein, Introduction to Algrithms, MIT 
Press, 2003. 
Tai-Pao Chuang, Che-Wun Chiou, Shun-Shii Lin, and Chiou-Yng Lee, 2011, 
"Fault-Tolerant Gaussian Normal Basis Multiplier over GF(2m)" accepted by IET 
Information Security.  
Tai-Pao Chuang, Che-Wun Chiou, and Shun-Shii Lin, 2011, "Self-checking 
Alternating Logic Bit-Parallel Gaussian Normal Basis Multiplier with Type-t," IET 
Information Security. Vol. 5, Issue 1, pp. 33–42. 
Tai-Pao Chuang and Shun-Shii Lin, 2011, "Improved Bounds on the List Decreasing 
Heuristic for the Vertex Cover", National Computer Symposium (NCS 2011), 
Algorithms and Bioinformatics Workshop, Taiwan, December 2-3, 2011. 
Takizawa, Takenobu, and Reijer Grimbergen. "Review: Computer shogi through 
2000." Computers and Games (2001): 433-442. 
Thomas, L. C., Games, Theory and Applications, Mineola N.Y.: Dover Publications. 
(2003) pp. 19. ISBN 0-486-43237-8. 
 66 
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應
用價值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是
否適合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評
估。 
 
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評
估 
■   達成目標   
□ 未達成目標（請說明，以 100 字為限） 
□ 實驗失敗 
□ 因故實驗中斷 
□ 其他原因 
說明：  
 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 □無 
技轉：□已技轉 □洽談中 □無 
其他： 
已發表一篇""Effective Integration Frameworks for Combining Computer 
Gaming programs with the Grid Computing System""英文論文在日本的 JSAI 
2013 研討會中，這個研討會也是日本人工智慧學會最重要的年度盛會。另
外，本研究計畫之部份成果已發表三篇國內研討會學術論文。在學術成就
及技術創新方面已有實質的貢獻。 
 
 68 
 
2013 年：陳新颺同學所開發的麻將程式「ThousandWind」榮獲 2013 年「臺灣電
腦對局學會」(TCGA 2013)電腦麻將銀牌。 
 
2012 年：陳新颺同學同學所開發的麻將程式「ThousandWind」榮獲 2012 TAAI 
CUP computer games Tournaments 電腦麻將競賽銀牌。 
2012 年：莊凱閔、陳玥汝同學所開發的麻將程式「MAJO」榮獲 2012 TCGA Cup 
Computer Game Tournaments 電腦麻將競賽銀牌。 
目前這些軟體均可實際加以應用在生活中，和高手對戰或做練習。在計畫中，我
們也產出許多對局的新做法，獲致甚多比賽的勝利，故此研究成果有一定之學術及應
用價值。亦可進一步發展，參加未來的電腦棋類比賽。 
另外，我們也訓練出很優秀的研究生，獲得很好的榮譽： 
2013 年：施宣丞同學碩士論文「暗棋程式 DarkCraft 的設計與實作」榮獲 2013
年「臺灣電腦對局學會」(TCGA 2013)碩士論文獎。 
    2012 年：黃士傑同學博士論文「New Heuristics for Monte-Carlo Tree Search 
Applied to the Game of Go」榮獲「臺灣電腦對局學會」博士論文獎。 
 
 
2 
 
 
 抵達橫濱後，首先就是前往民宿放行李，此時約是下午四點左右，因經過了
一整天的移動也覺得有些累，在稍作休息之後，就前往民宿老闆推薦的餐廳用餐，
剩下的時間就是在民宿休息等待明天開始的會議了。 
 
 第一天比賽 
 會議會場為日本慶應大學，從橫濱站搭電車到日吉站，一出站就可以看到，
雖然在出發去日本的前幾天臨時改了地點，但這個地點對於我們來說也是還蠻方
便的。但因為是臨時選的地點，會場的佈置就十分簡單，連海報都沒有，只有用
白板寫上會議的名稱。 
4 
 
 
 
 
 第二天比賽 
 這一天我們一大早就抵達會議會場，聽了幾場上午的研討會報告，接著中午
在學校附近用餐完畢後，於下午開始進行我們麻將比賽的項目。 
6 
 
報告人姓名 張懷文 就讀系所及年級  師範大學資工所 
碩士班二年級 
比賽名稱 (中文) 
(英文) 17th Computer Olympiad 
比賽項目 (中文) 5 五將棋 
(英文) Mimishogi 
補助項目 機票費：13,100 元 
 車費： 1,710 元 
生活費：24,143 元 
 
 參與開幕 
我們於活動的第一天(08.12)，就到達慶應大學的會場，進行報到的手續以及
參與了開幕式及 players meeting。在活動的會場結識了一些國外參賽的選手，
彼此交換了一下研發程式的心得。 
 
 
圖：開幕式圖片 
 
 
8 
 
在這場國際活動當中，ICGA 也在橫濱的一間飯店替我們準備了晚宴，讓我
們跟各國的選手以及到這個研討會的學者有機會進行交流。在享用美食之餘，也
和大家互相交流各個領域裡面的學術知識。 
 
 
 
 第一天比賽 
這次來日本最重要的部分就是參與五五將棋的比賽。這個項目是日本將棋的
分支，所以主要發展的團隊以日本為主。像今年參賽的隊伍有七隻，分別來
自日本、荷蘭、美國及台灣。我們的賽制是與每一位參賽選手都相互比一輪，
直接以這一輪的成績決定前三名，並沒有第二輪的賽制。 
 
 
 
10 
 
 
 買好票後由於不熟悉車種上錯車，導致原本應該坐上的車開走，最後請站務
人員幫忙，換了車票等一小時後的車，列車上的旅客並不多，由於早上太早起所
以在列車上大部分時間都在補眠，一小時後終於到達橫濱，出站後整齊乾淨的街
道其實讓人滿驚訝的，這點很值得台灣學習。 
 隔天到達比賽地點──慶應大學的協生館，參加開幕儀式，當天我是沒有比
賽的，並且暗棋組還有許多隊伍未到達，所以參加完以後就在學校周邊參觀環境
了。 
 
慶應大學附近的街道 
 
 第一天比賽 
 這次的暗棋大賽隊伍出乎意料的多，總共有 10 隊參與，較往年多出許多，
賽制為循環賽，所有隊伍都會互相對到，每組對戰為一先手一後手共兩場，值得
一提的是本次比賽有個法國人報名，這是暗棋有史以來第一次有外國人參與比賽，
對電腦暗棋領域來說是個里程碑。 
 第一場比賽由於為了減少大家的麻煩，所以小組負責人決定讓各單位有兩隻
以上程式的先各自對戰，所以是由我製作的 Darkness 對戰學長的 Tuxedo Cat，
12 
 
 
晚宴照片，中央為 Dark Knight 的作者 
 
 晚宴後的比賽我們對上中研院的 Flipper，這隻程式也是台灣比賽的常勝軍，
對戰結果很不幸的以兩敗作收，其中一局我認為是運氣不好，在一開始時大子就
已經被吃掉一些，這樣只要被強迫換子就很容易產生巨大的損失；而另一局雙方
翻棋只有微小差距但最後仍然追不回來無法翻盤導致輸棋。 
 再來對上的是交大的 Martis，對戰結果是兩和，其中的一局運氣相當好，在
我認為即將輸棋時，對方的程式出了些問題，一直長追某隻子而不採取包圍的戰
術，最後因為循環盤面作和。 
 在與 Flipper 和 Martis 的比賽中 server 有出現問題，其中之一是我明明還有
思考可用卻判我逾時，不過那一盤的勝負已經十分明顯，我決定直接認輸進行下
一盤就好；而與 Martis 比賽時，第二盤比賽伺服器不知道發生什麼問題，無法
自動對下，當時 Martis 的操作者也不在，所以其實第二場是隔天才比完。 
 第二天比賽 
 與 Rainbow 的比賽取得兩勝，這隻程式感覺在審局方面稍弱一些，而雙方
的翻棋運相差不大，所以在這場是以走棋來取得勝利。 
 接下來我們對上東華大學的 Diablo，對戰結果非常漂亮的取得兩勝，Diablo
在本次的賽事中取得銀牌，在這之前也是比賽的常勝軍，能夠兩場都贏過他我也
覺得相當意外，在這邊也很好的詮釋了暗棋的運氣成分。 
 比賽進行到此時，目前積分為第三名，並且只剩下最後一隊未比，在昨天晚
14 
 
 
 
五五將棋的比賽結果如下： 
 1 2 3 4 5 6 7 8  total 
1. Shokidoki (Netherlands)    # 1 1 1 1 1 1 1   7 
2. 1/128 Rigan (Japan)         0 # 1 1 1 1 1 1   6 
3. Mattari Yuuchan (Japan)         0 0 # 1 1 1 1 1   5 
4. EVG            (Taiwan)        0 0 0 # 1 1 1 1   4 
5. Deep Nikita      (USA)          0 0 0 0 # 0 1 1   2 
6. Mosho          (Japan)          0 0 0 0 1 # 0 1   2 
7. Kani            (Taiwan)        0 0 0 0 0 1 # 1   2 
8. Wonders         (Taiwan)        0 0 0 0 0 0 0 #   0 
 
16 
 
賽及參與研討會的過程當中，和學者教授和其他學校的同學相互交流。一方面可
以學習各個領域所在進行的研發狀況，一方面也可以跟自己同個項目的研發者一
起討論研究的方向。和研究室同學一起同行到日本的這禮拜，有時候我們回到旅
館也還在一起看程式，這是相當有趣且充實的經驗。 
 
本次暗棋比賽的是第一次有非台灣的選手參與，這是和以前大不相同的，可
預見的是未來相信會有更多人投入暗棋的領域進行開發，可以讓比賽競爭越來越
激烈，雖然本次比賽只獲得了第五名，但各位選手也大致介紹了自己使用的技術，
與他們交流獲得了相當多的資訊，對於未來開發程式相當有幫助。 
 
 非常感謝學校與國科會能夠提供這樣的機會讓我們出席這次國際性的比賽，
同時可以來日本認識看看這個國家，我覺得這樣的補助對於學生不管是增加國際
見聞或者是提高城市發展意願都是有非常大的幫助的。 
 
參與這次國際賽事，出國與選手們交流讓我們獲益良多，尤其是可以和非暗
棋領域的選手交換資訊，這讓未來的思路開拓很多。建議未來國科會還要繼續投
入資源在這方面上。 
 
四、其他 
 
 攜回資料名稱及內容：比賽手冊兩本。 
 致謝：在此特別感謝國科會補助學生參加國際競賽，以及林順喜老師的支持
與指導，以及實驗室同學的協助。 
2 
 
 
 抵達橫濱後，首先就是前往民宿放行李，此時約是下午四點左右，因經過了
一整天的移動也覺得有些累，在稍作休息之後，就前往民宿老闆推薦的餐廳用餐，
剩下的時間就是在民宿休息等待明天開始的會議了。 
 
 第一天比賽 
 會議會場為日本慶應大學，從橫濱站搭電車到日吉站，一出站就可以看到，
雖然在出發去日本的前幾天臨時改了地點，但這個地點對於我們來說也是還蠻方
便的。但因為是臨時選的地點，會場的佈置就十分簡單，連海報都沒有，只有用
白板寫上會議的名稱。 
4 
 
 
 
 
 第二天比賽 
 這一天我們一大早就抵達會議會場，聽了幾場上午的研討會報告，接著中午
在學校附近用餐完畢後，於下午開始進行我們麻將比賽的項目。 
6 
 
報告人姓名 張懷文 就讀系所及年級  師範大學資工所 
碩士班二年級 
比賽名稱 (中文) 
(英文) 17th Computer Olympiad 
比賽項目 (中文) 5 五將棋 
(英文) Mimishogi 
補助項目 機票費：13,100 元 
 車費： 1,710 元 
生活費：24,143 元 
 
 參與開幕 
我們於活動的第一天(08.12)，就到達慶應大學的會場，進行報到的手續以及
參與了開幕式及 players meeting。在活動的會場結識了一些國外參賽的選手，
彼此交換了一下研發程式的心得。 
 
 
圖：開幕式圖片 
 
 
8 
 
在這場國際活動當中，ICGA 也在橫濱的一間飯店替我們準備了晚宴，讓我
們跟各國的選手以及到這個研討會的學者有機會進行交流。在享用美食之餘，也
和大家互相交流各個領域裡面的學術知識。 
 
 
 
 第一天比賽 
這次來日本最重要的部分就是參與五五將棋的比賽。這個項目是日本將棋的
分支，所以主要發展的團隊以日本為主。像今年參賽的隊伍有七隻，分別來
自日本、荷蘭、美國及台灣。我們的賽制是與每一位參賽選手都相互比一輪，
直接以這一輪的成績決定前三名，並沒有第二輪的賽制。 
 
 
 
10 
 
 
 買好票後由於不熟悉車種上錯車，導致原本應該坐上的車開走，最後請站務
人員幫忙，換了車票等一小時後的車，列車上的旅客並不多，由於早上太早起所
以在列車上大部分時間都在補眠，一小時後終於到達橫濱，出站後整齊乾淨的街
道其實讓人滿驚訝的，這點很值得台灣學習。 
 隔天到達比賽地點──慶應大學的協生館，參加開幕儀式，當天我是沒有比
賽的，並且暗棋組還有許多隊伍未到達，所以參加完以後就在學校周邊參觀環境
了。 
 
慶應大學附近的街道 
 
 第一天比賽 
 這次的暗棋大賽隊伍出乎意料的多，總共有 10 隊參與，較往年多出許多，
賽制為循環賽，所有隊伍都會互相對到，每組對戰為一先手一後手共兩場，值得
一提的是本次比賽有個法國人報名，這是暗棋有史以來第一次有外國人參與比賽，
對電腦暗棋領域來說是個里程碑。 
 第一場比賽由於為了減少大家的麻煩，所以小組負責人決定讓各單位有兩隻
以上程式的先各自對戰，所以是由我製作的 Darkness 對戰學長的 Tuxedo Cat，
12 
 
 
晚宴照片，中央為 Dark Knight 的作者 
 
 晚宴後的比賽我們對上中研院的 Flipper，這隻程式也是台灣比賽的常勝軍，
對戰結果很不幸的以兩敗作收，其中一局我認為是運氣不好，在一開始時大子就
已經被吃掉一些，這樣只要被強迫換子就很容易產生巨大的損失；而另一局雙方
翻棋只有微小差距但最後仍然追不回來無法翻盤導致輸棋。 
 再來對上的是交大的 Martis，對戰結果是兩和，其中的一局運氣相當好，在
我認為即將輸棋時，對方的程式出了些問題，一直長追某隻子而不採取包圍的戰
術，最後因為循環盤面作和。 
 在與 Flipper 和 Martis 的比賽中 server 有出現問題，其中之一是我明明還有
思考可用卻判我逾時，不過那一盤的勝負已經十分明顯，我決定直接認輸進行下
一盤就好；而與 Martis 比賽時，第二盤比賽伺服器不知道發生什麼問題，無法
自動對下，當時 Martis 的操作者也不在，所以其實第二場是隔天才比完。 
 第二天比賽 
 與 Rainbow 的比賽取得兩勝，這隻程式感覺在審局方面稍弱一些，而雙方
的翻棋運相差不大，所以在這場是以走棋來取得勝利。 
 接下來我們對上東華大學的 Diablo，對戰結果非常漂亮的取得兩勝，Diablo
在本次的賽事中取得銀牌，在這之前也是比賽的常勝軍，能夠兩場都贏過他我也
覺得相當意外，在這邊也很好的詮釋了暗棋的運氣成分。 
 比賽進行到此時，目前積分為第三名，並且只剩下最後一隊未比，在昨天晚
14 
 
 
 
五五將棋的比賽結果如下： 
 1 2 3 4 5 6 7 8  total 
1. Shokidoki (Netherlands)    # 1 1 1 1 1 1 1   7 
2. 1/128 Rigan (Japan)         0 # 1 1 1 1 1 1   6 
3. Mattari Yuuchan (Japan)         0 0 # 1 1 1 1 1   5 
4. EVG            (Taiwan)        0 0 0 # 1 1 1 1   4 
5. Deep Nikita      (USA)          0 0 0 0 # 0 1 1   2 
6. Mosho          (Japan)          0 0 0 0 1 # 0 1   2 
7. Kani            (Taiwan)        0 0 0 0 0 1 # 1   2 
8. Wonders         (Taiwan)        0 0 0 0 0 0 0 #   0 
 
16 
 
賽及參與研討會的過程當中，和學者教授和其他學校的同學相互交流。一方面可
以學習各個領域所在進行的研發狀況，一方面也可以跟自己同個項目的研發者一
起討論研究的方向。和研究室同學一起同行到日本的這禮拜，有時候我們回到旅
館也還在一起看程式，這是相當有趣且充實的經驗。 
 
本次暗棋比賽的是第一次有非台灣的選手參與，這是和以前大不相同的，可
預見的是未來相信會有更多人投入暗棋的領域進行開發，可以讓比賽競爭越來越
激烈，雖然本次比賽只獲得了第五名，但各位選手也大致介紹了自己使用的技術，
與他們交流獲得了相當多的資訊，對於未來開發程式相當有幫助。 
 
 非常感謝學校與國科會能夠提供這樣的機會讓我們出席這次國際性的比賽，
同時可以來日本認識看看這個國家，我覺得這樣的補助對於學生不管是增加國際
見聞或者是提高城市發展意願都是有非常大的幫助的。 
 
參與這次國際賽事，出國與選手們交流讓我們獲益良多，尤其是可以和非暗
棋領域的選手交換資訊，這讓未來的思路開拓很多。建議未來國科會還要繼續投
入資源在這方面上。 
 
四、其他 
 
 攜回資料名稱及內容：比賽手冊兩本。 
 致謝：在此特別感謝國科會補助學生參加國際競賽，以及林順喜老師的支持
與指導，以及實驗室同學的協助。 
2 
 
  
 
 
 
 
4 
 
 
 
 
6 
 
  
 
 
 
  
 
 
 
  
 
 
 
  
 
  
8 
 
 
 
 
 
(08.13) ICGA paper  
 Investigating the Limits of Monte Carlo Tree Search Methods in Computer Go  
 MoHex 2.0: a pattern-based MCTS Hex player  
 On Semeai Detection in Monte-Carlo Go 
 
 
10 
 
 
 
 
  
 
 
 
                                 1 2 3 4 5 6 7 8  total 
1. Shokidoki (Netherlands)    # 1 1 1 1 1 1 1   7 
2. 1/128 Rigan (Japan)         0 # 1 1 1 1 1 1   6 
3. Mattari Yuuchan (Japan)         0 0 # 1 1 1 1 1   5 
4. EVG            (Taiwan)        0 0 0 # 1 1 1 1   4 
5. Deep Nikita      (USA)          0 0 0 0 # 0 1 1   2 
6. Mosho          (Japan)          0 0 0 0 1 # 0 1   2 
7. Kani            (Taiwan)        0 0 0 0 0 1 # 1   2 
8. Wonders         (Taiwan)        0 0 0 0 0 0 0 #   0 
 
 
  
 
 
12 
 
 
 
          2013  8  25  
    
  –   
2013 8 11 2011
8 19  
 
( )  
( ) 17th Computer Olympiad 
 
( )  
( ) Chinese Dark Chess 
  
 
 
 
 
    8/11( )
 
14 
 
 
 
 
 
10
 
Darkness Tuxedo Cat
 
Dark Knight
TCGA
Dark Knight
Monte-Carlo 
Tree Search
 
16 
 
 
Flipper Martis server
Martis
Martis  
 
Rainbow
 
Diablo Diablo
 
 
Dark Chesser
Dark Chesser  
 
 
 
Dark Knight 
Diablo 
Yahari 
 
 
 
 
國科會補助計畫衍生研發成果推廣資料表
日期:2013/11/14
國科會補助計畫
計畫名稱: 運用志願型計算系統設計蒙地卡羅圍棋程式
計畫主持人: 林順喜
計畫編號: 99-2221-E-003-011-MY3 學門領域: 人工智慧與仿生計算
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
本計畫將志願型系統的功能實做成功在我們的圍棋、五子棋、六子棋等程式中，
已可捐出並取用遠端的電腦計算資源，並已獲得不錯的加速效果，發表論文在
日本的 JSAI 2013 研討會中，這個研討會也是日本人工智慧學會最重要的年度
盛會。 
 
在比賽方面，我們也不遺餘力開發強大的棋牌類對局程式參賽，盡力爭取佳績
如下： 
2013 年：陳新颺同學所開發的麻將程式「ThousandWind」榮獲 2013 年「中華
民國人工智慧學會」(TAAI 2013)電腦麻將金牌。 
2013年：張懷文同學所開發的麻將程式「Wonders」榮獲 2013年「中華民國人
工智慧學會」(TAAI 2013)電腦「五五將棋」金牌。  
2013年：謝曜安同學所開發的暗棋程式「SGTDark」榮獲 2013年「中華民國人
工智慧學會」(TAAI 2013)電腦暗棋銀牌。 
2013年：劉孟謙同學所開發的象棋程式「Shark」榮獲 2013年「中華民國人工
智慧學會」(TAAI 2013)電腦暗棋銅牌。 
2013 年：沈庭瑋同學所開發的麻將程式「TaKe」榮獲 2013 年「中華民國人工
智慧學會」(TAAI 2013)電腦麻將銅牌。 
2013 年：陳新颺同學所開發的麻將程式「ThousandWind」榮獲 2013 年「國際
電腦奧林匹亞競賽」（17th Computer Olympiad, Aug. 12 - 18, 2013, Yokohama, 
Japan）電腦麻將銀牌。 
2013 年：莊凱閔、陳玥汝同學所開發的麻將程式「MAJO」榮獲 2013 年「國際
電腦奧林匹亞競賽」（17th Computer Olympiad, Aug. 12 - 18, 2013, Yokohama, 
Japan）電腦麻將銅牌。 
2013年：施宣丞同學碩士論文「暗棋程式 DarkCraft 的設計與實作」榮獲 2013
年「臺灣電腦對局學會」(TCGA 2013)碩士論文獎。 
2013 年：陳新颺同學所開發的麻將程式「ThousandWind」榮獲 2013 年「臺灣
電腦對局學會」(TCGA 2013)電腦麻將銀牌。 
2013 年：莊凱閔、陳玥汝同學所開發的麻將程式「MAJO」榮獲 2013 年「臺灣
電腦對局學會」(TCGA 2013)電腦麻將銅牌。 
2013 年：詹凱翔同學同學所開發的暗棋程式「Darkness」榮獲 2013 年「臺灣
電腦對局學會」(TCGA 2013)電腦暗棋銅牌。 
 
2012年：黃士傑同學博士論文「New Heuristics for Monte-Carlo Tree Search 
Applied to the Game of Go」榮獲「臺灣電腦對局學會」博士論文獎！ 
2012年：陳新颺同學同學所開發的麻將程式「ThousandWind」榮獲 2012 TAAI CUP 
computer games Tournaments 電腦麻將競賽銀牌。 
2012 年：詹凱翔同學同學所開發的暗棋程式「Darkness」榮獲 2012 TAAI CUP 
computer games Tournaments 電腦暗棋競賽銅牌。 
2012 年：勞永祥、陳志宏同學所開發的暗棋程式「Tuxedo Cat」榮獲 2012 年
「中華民國人工智慧學會」(TAAI 2012)電腦暗棋銅牌。 
2012 年：莊凱閔、陳玥汝同學所開發的麻將程式「MAJO」榮獲 2012 TCGA Cup 
Computer Game Tournaments 電腦麻將競賽銀牌。 
2012年：勞永祥、陳志宏同學所開發的暗棋程式「Tuxedo Cat」榮獲 2012 TCGA 
Cup Computer Game Tournaments 電腦暗棋競賽銅牌。 
2012 年：陳新颺同學所開發的麻將程式「ThousandWind」榮獲 2012 TCGA Cup 
Computer Game Tournaments 電腦麻將競賽 銅牌。 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100字為限） 
已發表一篇＇＇Effective Integration Frameworks for Combining Computer Gaming 
programs with the Grid Computing System＇＇英文論文在日本的 JSAI 2013 研討會中，這
個研討會也是日本人工智慧學會最重要的年度盛會。 
  另外，本研究計畫之部份成果已發表三篇國內研討會學術論文。在學術成就及技術創新
方面已有實質的貢獻。 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500字為限） 
在研究 VCS(Volunteer Computing System)與各個棋類程式結合的過程中，我們整理出一
個嶄新的模式，使用這些結合模式的好處在於不需要修改太多的程式碼、盡可能縮短總執
行時間，讓現有程式能簡單快速地與 VCS 結合，簡易取得遠端資源的協助，達到充分運用
資源的目的，藉此提升程式的效能，以期解決更多過去無法克服的問題。由於 VCS 透過網
路傳送訊息，且每個 Worker 為各自獨立的 PC，屬於 loosely-coupled類型，我們評估後
採取 coarse-grained parallelism 的方式，讓 Worker 每次收到任務都盡可能大量運算，
以分攤網路傳輸所造成的負擔。整體而言，符合預期的工作目標。 
   本子計畫已成功讓多個應用與 VCS 結合，其中我們團隊所研發的包含圍棋、六子棋、
暗棋、五子棋、及 coin problem 求解問題，並以圍棋與六子棋程式作為實驗項目，實驗
結果顯示，使用 7台電腦同時執行的圍棋程式對戰 1台電腦執行的圍棋程式之勝率為 71.4 
%、而使用 20 台電腦進行六子棋的搜尋之效能是單機的 8.27 倍，證實與 VCS 結合確實可
以提升效能。我們除了將研究成果撰寫成論文發表於研討會上，還致力發展不同棋類程式
並在國際電腦對局競賽獲得許多佳績。 
    本計畫將志願型系統的功能實做成功在我們的圍棋、五子棋、六子棋等程式中，已可
