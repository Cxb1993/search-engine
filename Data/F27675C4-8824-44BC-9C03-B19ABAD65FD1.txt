  2 
累加（MAC）以及內積(Dot Productor)的運算也是用
到乘法運算為主，圖 3 是我們對於這些運算當中所佔
的比例分析圖，尤其是除法和乘法就佔了其中的
83%。因此，我們希望在本研究計劃當中，研發在三
維繪圖當中的高速運算單元，為因應大量的乘法以及
除法運算，我們預期在本研究計劃當中，提出利用對
數為主的運算簡化乘法以及除法，在運算完畢後再進
行轉換為原來的二進位資料，以加速三維繪圖中幾何
子系統單元的相關運算。 
表 1 為對數系統運算轉換表，這個表中可以看
到對數系統轉換可以將原先較為困難的運算如乘
法、除法和開根號等轉換成為加法、減法和移位。可
達到簡化運算的目的。 
表 1 對數系統運算轉換表 
Operation NormalArithmetic LogarithmicArithmetic 
Multiplication z x y= ⋅  X Y+  
Division /z x y=  X Y−  
Reciprocal 1/z x=  X−  
Square Root z x=  1X >>  
Reciprocal 1/z x=  1X− >>  
Square 2z x=  1X <<  
Powering yz x=  2logY X+  
Addition z x y= +  2log (1 2 )Y XX −+ +  
Subtraction z x y= −  2log (1 2 )Y XX −+ −  
表 4 中 z 為 x 和 y 做運算後的結果，而 X 和 Y
則為 x 和 y 做以二為底的對數轉換後的值，也就是 X
和 Y 會等於 log2x 和 log2y。 
在電腦的計算中，除了加減法以外的運算，像是
乘法、除法、倒數與開根號等較困難的運算，這些運
算使用的時間與硬體成本遠大於加法、減法和移位，
所以這些運算可以轉換為以二為底的對數，來做加或
減的運算，以減少時間與硬體成本，且當所需要的運
算種類越多的時候，越能表現出對數算術單元的優
勢。因此，我們預期在本研究當中，將三維繪圖幾何
系統中如表 3 所列出的運算，先利用對數轉換單元
(LOG2)轉換二進位資料為對數資料後，利用快速加/
減法器做完運算，再利用反對數轉換單元(EXP2)轉為
原始二進位資料，以加速三維繪圖系統之運算能力，
我們所提出的架構圖如[圖 4]，op 則為對應的運算項
目，根據指令的種類來決定，v 則是 x 以及 y 經過調
整後的次方值。 
LOG2 LOG2
log2x log2 y
ADD/SUB BSH
EXP2(Anti-Log)
log2 z
z
1st Stage
2nd Stage
v x y
5 32 32
op
3
SCU
[圖 4] 我們所提出的對數系統為主的運算架構圖 
    由圖 4 可以得知，要用設計對數系統為基礎的運
算單元，必須有個良好的對數轉換器、高速加法器以
及反對數轉換器。我們在本年度第一年的研究方法
中，將針對對數轉換器以及高速加法器做改良與創新
的設計。 
3. 研究方法 
    本計畫的研究方法分為以下部分，包括：省面積之
快速平行 Ling 加法器設計與改良以及省面積與高精確
度的對數轉換器。 
(1) 省面積之快速平行 Ling 加法器設計與改良 
7a 6a 5a 4a 3a 2a 1a 0a7b 6b 5b 4b 3b 2b 1b 0b
7S 6S 5S 4S 3S 2S 1S 0S
7c
1level
2level
3level
 
 
ic
iH ip
: 1i jG +
2:k jP −
:i jP
:i kG 1: 1i kP− −1: 1k jG − +
ip
1: 1i kP− −
ic
ip : 1i jG + :i jP / 2i nH −
 
[圖 5] 我們所提出的省面積之快速平行 Ling 加法器架
構圖[42-43] 
  4 
IEEE Journal of Solid-State Circuits, vol. 39, no. 2, 
pp. 358-367, Feb. 2004. 
[7]. E. Lindholm, et al, “A User-Programmable Vertex 
Engine”, ACM SIGGRAPH 2001, 12-17 Aug. 2001. 
[8]. J.-H Sohn, et al., “A 155-mW 50-m vertices/s 
graphics processor with fixed-point programmable 
vertex shader for mobile applications”, IEEE 
Journal of Solid-State Circuits, vol. 41, Issue 5, pp. 
1081 – 1091, May 2006. 
[9]. K. Karagianni, et al., “Operation-Saving VLSI 
Architectures for 3D Geometrical Transformations”, 
IEEE Transaction on Computers, vol. 50, no. 6, pp. 
609-622, Jun. 2001. 
[10]. N. Ide, et al., “2.44-GFLOPS 300-MHz 
Floating-Point Vector-Processing Unit for 
High-Performance 3D Graphics Computing”, IEEE 
Journal of Solid-State Circuits, vol. 35, no. 7, pp. 
1025-1033, Jul. 2000. 
[11]. J.-H. Sohn, et al., "A Programmable Vertex Shader 
with Fixed-Point SIMD Datapath for Low Power 
Wireless Applications", The Eurographics 
Association, Graphics Hardware, 2004. 
[12]. B. Parhami, “Computer Arithmetic – Algorithms 
and Hardware Designs”, Oxford University Press, 
pp. 265 – 270, 2000. 
[13].  T. Lang and E. Antelo, ”High-Throughput 
CORDIC-Based Geometry Operations for 3D 
Computer Graphics,” IEEE Transaction on 
Computers, vol. 54, no. 3, pp. 347-361, Mar. 2005. 
[14].  C.-H. Chen and C.-Y. Lee, ”A Cost Effective 
Lighting Processor for 3D Graphics Application,” 
International Conference , vol. 2, pp.792 - 796, Oct. 
1999. 
[15].  David Harris, “An Exponentiation Unit For an 
OpenGL Lighting Engine,” IEEE Transaction on 
Computers, vol. 53, no. 3, Mar. 2004. 
[16].  B-G. Nam, et al., ”Development of a 3-D 
Graphics Rendering Engine with Lighting 
Acceleration for Handheld Multimedia Systems,” 
IEEE Transaction on Consumer Electronics, vol. 51, 
no. 3, pp.1020 – 1027, Aug. 2005. 
[17].  B.O. Schneider and J. V. Welzen, “Efficient 
Polygon Clipping for an SIMD Graphics Pipeline,” 
IEEE Transaction on Visualization and Computer 
Graphics, vol. 4, no. 3, Jul.-Sep. 1998. 
[18]. J.-W. Bae, et al., "An 11M-triangles/sec 3D 
graphics clipping engine for triangle primitives," 
IEEE International Symposium on Circuits and 
Systems , vol. 5, pp. 4570 - 4573, 23-26 May 2005. 
[19]. K. Karagiaizni and T. Stoarnitis,” A vector 
processor for 3-D geometrical transformations”, 
IEEE International Symposium on Circuits and 
Systems, vol. 4, pp. 482-485, 2001. 
[20]. K. Chung, et al.,” A 3-way SIMD engine for 
programmable triangle setup in embedded 3D 
graphics hardware” IEEE International Symposium 
on Circuits and Systems, vol. 5, pp. 4546 - 4549, 
2005. 
[21]. H. Kim, et al., ” A 231-MHz, 2.18-mW 32-bit 
Logarithmic Arithmetic Unit for Fixed-Point 3-D 
Graphics System”, Asian Solid-State Circuits 
Conference, pp. 305 – 308, Nov. 2005. 
[22]. J.-A. Pineiro, “Algorithm and architecture for 
logarithm, exponential, and powering computation,” 
IEEE Transaction on Computers, vol. 53, no. 9, pp. 
1085–1096, Sep. 2004. 
[23]. J. A. Pineiro, M. D. Ercegovac, and J. D. Bruguera, 
“High-radix logarithm with selection by rounding: 
Algorithm and implementation,” J. VLSI Signal 
Process. Systems, vol. 40, pp. 109–123, May 2005. 
[24]. D. K. Kostopoulos, “An algorithm for the 
computation of binary logarithms,” IEEE 
Transaction on Computers, vol. 40, no. 11, pp. 
1267–1270, Nov. 1991. 
[25]. M. J. Schulte and J. E. E. Swartzlander, 
“Hardware designs for exactly rounded elementary 
functions,” IEEE Transaction on Computers, vol. 43, 
no. 8, pp. 964–973, Aug. 1994. 
[26]. P. T. P. Tang, “Table-lookup algorithms for 
elementary functions and their error analysis,” Proc. 
10th Symp. Comput. Arithmetic, pp. 232–236. Jun. 
1991,  
[27]. J. E. Stine and M. J. Schulte, “The symmetric 
table addition method for accurate function 
approximation,” J. VLSI Signal Procesing Systmes, 
vol. 21, pp. 167–177, Jun. 1999. 
[28]. M. J. Schulte and J. E. Stine, “Approximating 
elementary functions with symmetric bipartite 
tables,” IEEE Transactions on Computers, vol. 48, 
no. 8, pp. 842–847, Aug. 1999. 
[29]. K. Johansson, O. Gustafsson and L. Wanhammar, 
“Implementation of elementary functions for 
logarithmic number systems,” IET Computer & 
Digital Techniques, Vol. 2, No. 4, pp. 295-304, July 
2008. 
[30]. S. Paul, N. Jayakumar, and S. P. Khatri, “A Fast 
Hardware Approach for Approximate, Efficient 
Logarithm and Antilogarithm Computations,” IEEE 
Transactions on VLSI Systems, Vol. 17, No. 2 pp. 
269-277, February 2009. 
[31]. J. N. Mitchell, Jr., “Computer multiplication and 
division using binary logarithms,” IRE 
Transanstions on Electronics Computers, vol. 11, no. 
11, pp. 512–517, Nov. 1962. 
[32]. M. Combet, H. V. Zonneveld and L. Verbeek, 
“Computation of the base two logarithm of binary 
numbers, IEEE Transactions on Electronic 
Computers, Vol. 14, No. 6, pp. 863–867, June 1965. 
[33]. S.L. SanGregory, R.E. Siferd, C. Brother, and D. 
Gallagher, “A Fast, Low-Power Logarithm 
Approximation with CMOS VLSI Implementation,” 
Proc. IEEE Midwest Symp. Circuits and Systems 
(MWSCAS), Vol. 1, pp. 388-391, Aug. 1999. 
[34]. K. H. Abed and R. E. Siferd, “CMOS VLSI 
implementation of a low-power logarithmic 
converter,” IEEE Transactions on Computers, Vol. 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                       日期： 99  年 12  月 10  日 
               
一、參加會議經過 
  亞太電路與系統會議為兩年一次舉辦的會議，本次會議由馬來西亞大學
(University Malaysia)舉辦，會議總共收到了 42 個國家共計 461 篇論文的投稿，最後
接受 305 篇論文，全為口頭論文的發表。本會議有十場的 Keynote 演講，包括了國
立成功大學電機系劉濱達教授參與演講。本次本人所發表的論文是計畫產出的研究
成果，該省面積的 Ling 加法器可以加速算術單元的執行以及節省電路面積。 
 
二、與會心得 
計畫編號 NSC 99-2221-E-251-008 
計畫名稱 應用對數系統加速三維電腦繪圖之運算單元設計與誤差分析(I) 
出國人員
姓名 莊作彬 
服務機構
及職稱 
國立屏東商業技術學院資訊工程
系副教授 
會議時間 99 年 12 月 6 日至 99 年 12 月 9 日 會議地點 馬來西亞吉隆坡 
會議名稱 
(中文)2010 年亞太電路與系統會議 
(英文)2010 Asia-Pacific Conferences on Circuits and Systems 
發表論文
題目 
(中文)省面積平行 Ling 加法器 
(英文)Area-Efficient Parallel-Prefix Ling Adders 
 與周世傑教授在開幕歡迎酒會留影 
 
與大會主席Prof. Sudhanshu Shekhar Jamuar留影 
     本次會議觀摩了很多跟自己研究相關的論文發表，包括Redundant的乘法器設
計、低誤差的對數轉換器設計以及IIR濾波器的設計等，本人覺得受益匪淺，回國之後
除了加強本身的研究主題工作外，其中對數轉換器也屬於本人研究範疇，故會將此篇論
文詳加研讀作為比較。另外，本人也開始規劃其他研究主題的閱讀以及研究的進行。 
  感謝國科會能補助本次會議的參加，讓我能夠加入國際會議的殿堂學習更多的
研究成果以及跟不同領域的國際研究學者交換意見與互動，我想這是國際會議帶給我的
積極動力，讓我能夠鞭策自己繼續努力進行研究，將本人研究成果往國際殿堂推動。 
期間本人聆聽了許多Keynote演講，包括成功大學電機系劉濱達教授的演講，發現每個
Keynote演講的研究成果都是經過長年累月的結晶而成，包括研究團隊的建立與研究成
果的發表等，讓本人獲益良多。本人會繼續在研究方面產出更多成果，繼續在國際會議
上面發表論文以及跟更多的學者交換意見，學習更多的研究知識。 
三、考察參觀活動(無是項活動者略) 
  無 
四、建議 
  無 
五、攜回資料名稱及內容 
  USB 記憶卡論文集 
六、其他 
  無 
 1i i is d c −= ⊕
                                                                       (4) 
Fig. 1 (a) is an 8-bit Kogge-Stone parallel-prefix adder. 
The fucntions of different node are defined in Fig. 1 (b). The 
black circlular node is defined as the carry node which 
performs the prefix computations given in Eq. (3), the white 
circular node is defined as the buffer. 
7a 6a 5a 4a 3a 2a 1a 0a7b 6b 5b 4b 3b 2b 1b 0b
7S 6S 5S 4S 3S 2S 1S 0S
7c
1level
2level
3level
 
(a) 
ia ib
idip ig :i jg
:i kp 1:k jp −
:i jp
:i kg :i kp1:k jg −
1ic −id
iS
 
(b) 
Fig. 1: (a) The architecture of an 8-bit Kogge-Sone parallel-prefix adder, and 
(b) the corresponding nodes defined in (a). 
B. Ling adders with/without parallel-prefix computation units 
In [9], Ling adders were proposed to speed up the 
computation of conventional CLAs. This is achieved by 
introducing one signal Hi, where Hi (also can be denoted as 
Ling carries) is obtained by the logical OR operations of the 
two consecutive carry signals, i.e.,  
1i i iH c c −= +                                                  (5) 
Using (2) in  (5), we can have: 
1 1 2 1 2 1 0.... ....i i i i i i iH g g p g p p p g− − − − −= + + ⋅ + + ⋅ ⋅ ⋅ ⋅
                       (6) 
As for example  we can have c3 as  
3 3 3 2 3 2 1 3 2 1 0c g p g p p g p p p g= + ⋅ + ⋅ ⋅ + ⋅ ⋅ ⋅
                       (7) 
and H3 can be represented as 
3 3 2 2 1 2 1 0H g g p g p p g= + + ⋅ + ⋅ ⋅
                                   (8) 
Comparing (7) with (8), we can observe that the number 
of logic levels for generating H3 is shorter by one for 
generating c3, which leads to faster computation of carries for 
each bit position, and the sum for Ling adders can be obtained 
according to (9), using a 2-to-1 multiplexor as shown in Fig. 
2(b). 
1 1 1( )ii i i i is H d H d p− − −= ⋅ + ⋅ ⊕
                                             (9) 
 In [10-11], the authors found that the operations of Ling 
adders can be executed in a parallel-prefix way, take H4 and 
H5 for example, the values of H4 and H5 can be computed by 
Ling adders which are given in Eq. (10). 
4 4 3 3 2 3 2 1 3 2 1 0
5 5 4 4 3 4 3 2 4 3 2 1 4 3 2 1 0
H g g p g p p g p p p g
H g g p g p p g p p p g p p p p g
= + + ⋅ + ⋅ ⋅ + ⋅ ⋅ ⋅
= + + ⋅ + ⋅ ⋅ + ⋅ ⋅ ⋅ + ⋅ ⋅ ⋅ ⋅
                   (10) 
By using the property of gi˙pi=gi, H4 and H5 can be re-
written as: 
4 4 3 3 2 2 1 3 2 1 0 0( ) (( ) ( )) ( )H g g p p g g p p p p g= + + ⋅ ⋅ + + ⋅ ⋅ ⋅ ⋅  
5 5 4 4 3 3 2 4 3 2 1 1 0( ) (( ) ( )) ( ) ( )H g g p p g g p p p p g g= + + ⋅ ⋅ + + ⋅ ⋅ ⋅ ⋅ +          (11) 
if we define 
: 1 1i i i iG g g− −= +  and : 1 1i i i iP p p− −= ⋅ , 
Equation (11) can be further expressed: 
4 4:3 3:2 2:1 3:2 1:0 0: 1H G P G P P G −= + ⋅ + ⋅ ⋅                                       (12) 
5 5:4 4:3 3:2 4:3 2:1 1:0H G P G P P G= + ⋅ + ⋅ ⋅  
By adopting the prefix carry nodes (explained in (3)), the 
values of H4 and H5 can be obtained in a parallel-prefix way, 
i.e.,  
4 4:3 3:2 2:1 1:0 0: 1 1: 2( , ) ( , ) ( , )H G P G P G P− − −= o o                                  (13) 
5 5:4 4:3 3:2 2:1 1:0 0: 1( , ) ( , ) ( , )H G P G P G P −= o o  
    Fig. 2 is an 8-bit Kogge-Stone parallel-prefix Ling adder. 
7a 6a 5a 4a 3a 2a 1a 0a7b 6b 5b 4b 3b 2b 1b 0b
7S 6S 5S 4S 3S 2S 1S 0S
7H
1level
2level
3level
 
(a) 
: 1i iG −: 1i iP −
ip 1ip − ig 1ig −
iS
id 1ip −
1iH −
: 1i jG +
1: 1i kP− − 2:k jP −
1:i jP−
:i kG 1: 1i kP− − 1: 1k jG − +
 
                          (b) 
Fig. 2: (a) The architecture of an 8-bit Kogge-Stone parallel-prefix Ling adder, 
(b) (from left to right) the black square nodes for computing the values of Pi 
and Gi ,  the diamonds nodes for computing the values of sum using Hi-1 as the 
selection signal, and  the black circle nodes for computing group generate and 
propagation signals
.
 
    From Fig. 2(a), it can be seen that, the signals Hi are 
computed by the parallel-prefix units, and the sums are 
produced by using 2-to-1 multiplexors for each bit position. If 
the last level in the parallel-prefix units can be further 
replaced to compute the carries instead of Hi, the values of 
sum can be computed by Exclusive-OR (XOR) gates direclty 
without multiplexors. This will lead to an area-efficient 
implementatoin, which we have discussed in Section III. 
737
  
[11]. Our proposed adders can save more than 11% logic gates 
over that of [11]. We have extended our methods to design the 
16-bit parallel-prefix Ling adder as shown in Fig. 4, where 
eight hexagon nodes in level 3 and eight rectangle nodes in 
level 4 in the higher group (i.e., bit-positions 8 to 15), and 
eight AND gates in level 4 in the lower group (i.e., bit-
positions 0 to 7) produce the real carries c0 to c15.  
 
Table I: comparisons of the number of logic gates for our proposed adder with 
the parallel-prefix Ling adder [11]. 
n [11] Ours Savings 
8-bit 112 92 17% 
16-bit 268 228 14% 
32-bit 628 548 12% 
64-bit 1444 1284 11% 
 
7a 6a 5a 4a 3a 2a 1a 0a7b 6b 5b 4b 3b 2b 1b 0b
7S 6S 5S 4S 3S 2S 1S 0S
7c
15a 14a 13a 12a 11a 10a 9a 8a15b 14b 13b 12b 11b 10b 9b 8b
15S 14S 13S 12S 11S 10S 9S 8S
15c
1level
2level
3level
4level
  
Fig. 4: Our proposed 16-bit parallel-prefix Ling adder. 
IV. SYNTHESIS  RESULTS AND COMPARISONS 
    We have coded our proposed adders using Verilog 
structuring HDL and synthesized using TSMC 0.18 µm 
CMOS technology. Table II shows the synthesis result for our 
adders and the previously reported parallel-prefix adders in [1] 
and parallel-prefix Ling adders in [11] based on Kogge-Stone 
style implementations.  
 
Table II: area comparisons for our proposed adder with the parallel-prefix 
Ling adder [11] and parallel-prefix adder [1] based on Kogge-Stone style 
implementations. (Unit: µm2) 
[11] [1] Ours Savings n 
Area Area Area vs.[11] vs. [1] 
8 (delay=1.03ns) 2341 1872 1922 17% -2% 
16 (delay=1.42ns) 5651 5069 4151 26% 18% 
32 (delay=1.87ns) 12357 9427 8262 33% 22% 
64 (delay=2.11ns) 29864 27133 19349 35% 28% 
     
In Table II, we can find that our proposed adder can save 
up to 28% and 35% of area over that of [1] and [11], 
respectively, for higher bit-widths. The delay for our proposed 
adder is shorter than [1]. Therefore, under the same delay 
constraint, the area required by [1] becomes more than ours. 
In Table III we show the area×delay savings for our proposed 
method over those of [1] and [11] with minimum delay. Our 
method could achieve up to 28.35% and 35.21% of saving in 
area×delay over those in [1] and [11], respectively.  
 
Table III: area×delay savings for our proposed adders. (Delay: ns, Area: µm2) 
[1] [11] Ours Area×delay 
Savings  
n 
Area Delay Area Delay Area Delay 
vs. [1] vs. [11] 
8-bit 1872 1.03 2341 1.03 1962 0.98 0.28% 20.26% 
16-bit 5069 1.42 5728 1.4 4826 1.27 14.85% 23.57% 
32-bit 10395 1.69 12357 1.87 9826 1.67 6.59% 28.89% 
64-bit 27133 2.1 29864 2.11 19349 2.11 28.35% 35.21% 
V. CONCLUSIONS 
    In this paper, we have proposed a technique for area-
efficient realization of parallel-prefix Ling adders using 
efficient parallel-prefix units. Synthesis results show 
significant saving of area by our method over the previous 
methods. The proposed method not only could be applied to 
the Kogge-Stone-style Ling adders, but also other parallel-
prefix style Ling adders. 
Acknowledgment 
This work was supported partly by NSC-99-2221-E-251-008, 
Taiwan. 
REFERENCES 
[1] P.M. Kogge and H.S. Stone, “A Parallel Algorithm for the Efficient 
Solution of a General Class of Recurrence Equations,” IEEE Trans. 
Computers, vol. 22, no. 8, pp. 786-792, Aug. 1973. 
[2] R.E. Ladner and M.J. Fisher, “Parallel Prefix Computation,” J. ACM, 
vol. 27, no. 4, pp. 831-838, Oct. 1980. 
[3] R.P. Brent and H.T. Kung, “A Regular Layout for Parallel Adders,” 
IEEE Trans. Computers, vol. 31, no. 3, pp. 260-264, Mar. 1982. 
[4] T. Han and D. Carlson, “Fast Area-Efficient VLSI Adders,” Proc. Symp. 
Computer Arithmetic, pp. 49-56, May 1987. 
[5] S. Knowles, “A Family of Adders,” Proc. 14th Symp. Computer 
Arithmetic, pp. 30-34, Apr. 1999. Reprinted in ARITH-15, pp. 277-281. 
[6] A. Beaumont-Smith and C.C. Lim, “Parallel-Prefix Adder Design,” 
Proc. 15th Symp. Computer Arithmetic, pp. 218-225, June 2001. 
[7] V.G. Oklobdzija et al., “Energy-Delay Estimation Technique for High- 
Performance Microprocessor VLSI Adders,” Proc. 16th Symp. 
Computer Arithmetic, pp. 15-22, June 2003. 
[8] S.Das, and S.P.Khatri,, “A Novel Hybrid Parallel-Prefix Adder 
Architecture With Efficient Timing-Area Characteristic ,” IEEE Trans. 
VLSI Systems, Vol. 16, no. 3, pp. 326-331, March 2008. 
[9] H. Ling, “High-Speed Binary Adder,” IBM J. R&D, vol. 25, pp. 156-
166, May 1981. 
[10] C. Efstathiou, H.T. Vergos, and D. Nikolos, “Ling Adders in Standard 
CMOS Technologies,” Proc. IEEE Int’l Conf. Electronics, Circuits, and 
Systems (ICECS), vol. 2, pp. 485-488, Sept. 2002. 
[11] D. Nikolos and C. Efstathiou, “High-Speed Parallel-Prefix Ling 
Adders,” IEEE Trans. Computers, Vol. 54, No.2, pp. 225-231, Feb. 
2005. 
[12] Lakshmanan, Ali Meaamar and  Masuri Othman, “High-Speed Hybrid 
Parallel-Prefix Carry-Select Adder Using Ling's Algorithm,” Proc. 
ISCE, pp. 598-603, 2006. 
[13] Alvaro V´azquez and Elisardo Antelo, “New Insights on Ling Adders,” 
Proc. 18th Symp. Computer Arithmetic, pp. 227-232, June 2007. 
[14] Youngmoon Choi and Earl E. Swartzlander, Jr., “Speculative Carry 
Generation with Prefix Adder,” IEEE Trans. VLSI Systems, vol. 16, no. 
3, pp. 321-326, Mar. 2008. 
739
99 年度專題研究計畫研究成果彙整表 
計畫主持人：莊作彬 計畫編號：99-2221-E-251-008- 
計畫名稱：應用對數系統加速三維電腦繪圖之運算單元設計與誤差分析(I) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 1 0%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 省面積與高精確
度的對數轉換器
(2011 VLSI-DAT)
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 4 3 133%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
省面積之快速平
行 Ling 加法器設
計 與 改 良 (2010 
APCCAS) 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
