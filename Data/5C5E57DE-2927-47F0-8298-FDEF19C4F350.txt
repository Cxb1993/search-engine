 1
一、 摘要 
隨著儲存技術的進步與網路多媒體的蓬
勃發展，個人電腦的儲存容量及使用者的資
料量都愈來愈大，缺乏足夠容量且經濟、簡
便的資料備份方法。另外，多數個人電腦仍
有不少的閒置空間未能充份利用，若能有效
透過網路做為對方的備份空間，同時系統能
自動進行資料的備份與更新，將可大幅簡化
資料的備份工作並降低個人資料損毀的風
險。本計畫研究前瞻的同儕網路技術，能將
為數眾多分散且自主的個人電腦自動組織
起來，充分利用個別電腦的閒置資源，建立
安全可信賴、低管理成本、高效能的網路檔
案儲存管理系統。第一年度主要集中在組織
結構、空間管理及網路傳輸等三個單元的研
發，已完成設計基本的系統組織機制及網路
儲存雛型系統，提供基本的系統註冊、簽入
及簽出功能，以及檔案查詢、協力式同步檔
案傳輸架構、具網路認知的網路資料收集模
組及簡易的內部儲存空間管理機制。第二年
度則完成檔案管理與許可控制此兩個單元
的研發，同時進行整合及系統微調的工作，
完成可信賴的同儕檔案儲存雛型系統，相關
技術並應用在數位學習及線上遊戲系統上。 
 
關鍵詞：檔案儲存系統、檔案散佈、節點選
擇、端對端路徑偵測、覆蓋網路 
Abstract 
With the rapid progress in storage 
technologies and the wide applications of 
Internet multimedia, the capacity of PC 
storage and the volume of user data are both 
getting large. For vast amount of PC users, 
there is still no widely-accepted simple, 
inexpensive, adequate solution for data 
backup. Besides, it happens often that most 
desktop computers have plenty of unused 
storage space. If a system can utilize the 
unused storage of a desktop computer to serve 
as the backup storage for another computer, 
and it can automatically backup and update 
user data, we will have a system that can 
simplify the overhead of data backup and 
reduce the risk of data lose dramatically. This 
project aims to design a system that will 
self-organize numerous heterogeneous, 
autonomous desktop computers and utilize 
their unused storage space to form a virtual 
persistent storage, which is trustworthy, 
low-cost management and high-performance. 
In the first year, we focus on the design and 
implementation of three parts: system 
organization, space management and network 
transmission. We have finished the 
architectural design and implementation of 
the prototype that supports login/logoff, file 
search, cooperative file transmission, path 
learning with link probing, and simple storage 
management. In the second year, we focus on 
the other two parts: file management and 
access control. We also integrate the whole 
units and fine-tune the system performance to 
finish the development of a trustworthy file 
storage system prototype. The developed 
technologies also were applied to an 
e-learning system and an online game system. 
 
Keywords: storage systems, file distribution, 
amplifiable multicast, peer selection,  
overlay networks 
 3
以大幅簡化資料的備份工作並降低彼此個
人資料的損毀風險。除了備份應用外，如何
結合為數眾多的閒置儲存空間，並加以妥善
運用，實為值得深入探討課題。然而互惠備
份資料，系統必須能防止資料流失、被篡改
或被窺視，才能確保資料的完整性與私密
性。但若部份存在 P2P 儲存系統的檔案允
許被公開讀取、傳佈，則此 P2P 儲存系統
也可以做為簡便的檔案分享或快取應用平
台，得以提升資料交換及散佈的效率，並提
供適當的檔案管理功能。 
目前的 P2P 系統缺乏很好的分散管理機
制，以致系統效能難以預測、且缺乏公平
性。理想的 P2P 系統是希望每一部電腦都
能共享資源，或以集體合作的方式來達到比
單一電腦更加穩定、安全、有效率的功能，
進而促進同儕社群的總體效益。然而現實的
P2P 系統多為開放、異質的環境，存在很多
只從系統獲取資源而不做任何貢獻的
Freeloaders，易形成不公平的狀況，進而劣
幣驅良幣而使得系統效能不穩，此即是 P2P 
系統中極為棘手的 free-riding 問題。根據統
計，現有 P2P 的應用系統中，80%左右都是
Freeloaders。 
另外，由於 P2P 系統為開放環境，可能存
在具惡意的個人或次團體，使系統或正常的
個人遭受攻擊或欺騙，以致無法正常運作或
資源浪費，因此 P2P 系統亟待建立信用機
制，用以區別使用者的良善，或做為排程
(Scheduling)及選擇的依據。在知名的情況
下，各別節點可以利用類似 Access Control 
Lists 的方法，建立好友名單或拒絕名單 
(White Lists or Black Lists)，來進行請求之
管控。但在大尺度、開放、異質的系統中，
每一節點隨時可能會與陌生的節點相連或
互動，目前很難有何依據來決定對方的良
莠。 
三、 研究目的 
本計畫將研究前瞻的 P2P 網路系統技
術，能將為數眾多分散(distributed)且具自主
性 (autonomous) 的 個 人 電 腦 自 動 組 織
(self-organizing)起來，充分利用個別電腦的
閒置資源，建立安全可信賴、低管理成本、
高效能的網路檔案儲存管理系統。系統中每
一部參與的個人電腦僅需提供少量或有限
的閒置儲存空間，透過多部電腦彼此之間的
互相合作分享，即可存取近乎無限容量的網
際儲存空間。 
擬研究的 P2P 網路儲存系統能以自我組
織、自我管理的方式來充份利用閒置的資
源，沒有集中的伺服器或分派器，可省卻許
多系統管理工作、降低儲存或備份系統的維
護成本。系統除允許使用者的電腦可以任意
自由登入或簽出外，也假設可能存在故障或
惡意的個人電腦或使用者，因此任一檔案或
區塊都可能存在被窺視、篡改或遺失的風
險，系統必須能自我修護或防禦，以充份發
揮 P2P 同儕系統的機動調適特性。另外，
除了能進行儲存空間的保全與分配管理、根
據參與者良莠來進行許可控制外，擬研究的
P2P 網路儲存系統也應能根據連網電腦的
 5
在具自主性的 P2P 系統中，個體是以自我
組織(Self-organization)的方式形成 P2P 疊加
應用網路(Overlay Networks)來進行內容分
享或分工合作。個體的組織方式，一般常粗
分成非結構方式(Unstructured)與結構化方
式(Structured)。最簡單的組織方式是以類似
星狀網路的方式連結，著名的 Napster[5,6]
即採用此方法，各對等的使用者節點無特別
的結構，所有的搜尋服務要求仍仰賴集中的
Directory Server 來提供服務，但檔案交換則
由使用者之間直接進行，不透過 Directory 
Server。常見的非結構方式則如一般 mesh
網路，各使用者自行選擇要互連的相鄰節
點，形成類似 Small World 或複雜網路
(Complex Networks)，當要進行檔案搜尋
時，則以廣度優先(Breadth-first)或深度優先
(Depth-first)的方式向相鄰節點廣播，直到找
到有足夠的搜尋結果或達到廣播限制條件
為 止 ， 前 者 如 Gnutella[8,9] ， 後 者 如
Freenet[10,11]。目前廣為流行的 Kazaa[12]
及 Skype[13]則採用以上兩者的混合形，系
統實質上分為多層 Supernode 及一般
node，同一層的 Supernodes 之間是用廣度
優先式廣播來搜尋，node 與 supernode 間，
或下層與上層 supernodes 之間則採用類似
星狀的方式。由於仰賴訊息廣播或集中式
Directory Servers，此類非結構組織者面對延
展性與安全性的挑戰[22,23,24]。 
自從 1999 年 Napster[5,6]推出成功之後，
P2P 技術重新受到重視。由於著作權的爭
議，使得主要用來做為音樂或軟體下載的
P2P 檔案交換系統一直備受法律關注。為避
免法律訴訟，Gnutella[8,9]、Freenet[10,11]
等系統即試圖以無中央伺服器的方式來運
作，使系統無特定集中的目標而難以被控
告。然而此類非結構化架構的系統仰賴訊息
廣播(Message Flooding)來進行搜尋，以致系
統效能不佳。因此在實務的 P2P 系統中，
改利用 Super-nodes 形成多級混合架構
(Hybrid) 來 運 作 ， 例 如 Kazaa[12] 與
eDonkey、eMule[16]等。在學術界則提倡結
構化架構的查詢系統與應用，例如 MIT 的
Chord [25,29]、Berkeley 的 Tapestry [30,31]
和 CAN[48]、Microsoft 的 Pastry/ [32,33,34]
等。早期此類系統著重在延展性的提升，不
論多級混合架構或結構化架構都已能有一
定程度之改善。 
除了檔案交換應用外，近幾年來許多學者
也試圖將 P2P 應用在其它方面。在疊加傳
輸網路(Overlay Networks)方面，則是利用應
用層的彈性，使參與的網路節點可以在 ISP
或 AS 的路徑限制下，仍能尋找出比現有 IP
層路由器執行 BGP[49]等協定所選擇的路
徑，更加穩定、快速、低封包遺失(low loss 
rate)的路徑。疊加傳輸網路讓應用層有機會
來控制或改變 IP 層主掌的封包傳輸路徑，
著名的研究如 Washington 的 Detour[50]、
Berkeley 的 PDF[51]、MIT 的 RON[52,53]
等。Washington 的 Detour[50]利用實際的網
際網路觀測資料，發現目前網際網路的
routing 效能離最佳化有一大段距離，平均
而言一半以上的路徑都存在更好、可顯著改
進即有路徑的替代路徑，很多 BGP 路徑的
傳輸效率都可以提高 25%以上，且封包遺失
 7
統的容錯性與檔案的完整性。 
A. PeerRank 同儕信譽評比機制 
我們已發展分散式的 PeerRank 方法，利
用 Eigenvector 式的 Reputation 機制來設計
許可控制機制，做為 P2P 資源管理的核心
技術。我們引進網頁分析、搜尋引擎的相關
技術，以便分析節點的信譽與排名。針對
P2P 的特性，我們利用類似 HITS[68]的雙矩
陣概念來計算節點的貢獻及消耗排名，並利
用類似 PageRank[69]的單矩陣概念來計算
節點的信用。不論 HITS 或 PageRank，都是
採 用 Eigenvector 方 法 來 計 算
Fixed-point[70]，參見 Figure 1。不同於
Voting 或 Averaging，此方法的好處是各節
點收斂後的權值會反映在最後計算的結
果 ， 如 r1＇=a11r1+a12r2+a13r3+a14r4 或
r1＇=Σa1iri。在雙矩陣的模型中，則利用各
節點的使用消耗來計算某節點的服務貢
獻，或利用各節點的服務貢獻來計算某節點
的使用消耗： 
∑
∑
=
=
=
=
n
y
n
y
ysyxxu
yuyxxs
1
1
)(*),()(
)(*),()(
U
S
Figure 1. Eigen-system example
r1 r2
r4 r3
a12r2
a21r1
a24r4
a31r1a41r1
a42r2
a32r2
a34r4
a14r4
a23r3a13r3
a43r3
r1’=a11r1+a12r2+a13r3+a14r4
r1
r2
r3
r4
a11      a12      a13      a14
a21      a22      a23      a24
a31      a32      a33      a34
a41      a42      a43      a44
r1’
r2 ’
r3 ’
r4 ’
=
Arnew rold
x’=Ax
Ax=λx
x: eigen-vector; λ: eigen-value
Increase ρ
Admit
& Not
More
Deny
Admit
& More
u>A & s<B
(u≤A or s≥B)
& σ≥C
σ<C
σ≥C u>A & s<B
(u≤A or s≥B)
& σ<C
Increase ρDecrease ρ
willingness-
to-serveρ
desired 
service 
level C
success rate σ
Figure 2. (a) Three states of a node and state transitions (b) A node adaptation control system 
(a) (b) 
 9
在 RON 的資料中不到六成，在 PlanetLab
的 資 料 中 不 到 四 成 ， 此 結 果 驗 證 了
Washington Detour 的分析，多數情況都存在
更好的替代路徑。傳統的網路繞徑技術需要
很高的動態網路監控成本，因此我們提出以
端對端為基礎的低成本網路繞徑機制，透過
動態學習的技術，節點會學習並記錄連到某
一目的地的最佳路徑群(Top Set)，隨時只要
測試少數幾條可能的替代路徑群 (Probe 
Set)，若發現有更好更穩定的路徑，即將新
發現的路徑從 Probe Set 加入並取代 Top Set
中較差的一條。 
D. Amplicast 協力式同步傳輸機制與
PeerTop 同儕選取機制 
同一檔案要同時備份散佈至多個使用者
時，我們提出結合 Amplification 與 Multicast
優點的 Amplicast 方法，同時支援防火牆，
Figure 4. System message flow, example amplicast trees, and PeerTop performance 
Node 1Source Node 3Node 2
Content request Content request Content request
Ack. (Invitation)
+ [Probe Set]
Ack. (Invitation)
+ [Probe Set]
Ack. (Invitation)
+ [Probe Set]
NxN Bandwidth Probing
Probe result Probe result Probe result
Planning result Planning result Planning result
Tree connection Tree connection Tree connection
Phase I – Network Probing
Phase II – Group Setup
Phase III – Content Transmission
Content Content
Content
Start Transmission
Finish Transmission
Planning and Scheduling
Tree Construction
Group Probing
(Bandwidth Probing)
Information Collection
Round 2
1
2 9
3 10
4 11
5 12
6 13
7 14
8 15
3
12
14
13
15
8
10 11
2
9
4
1
2 3
5 6 7
Round 1
0
20
40
60
80
100
0 100 200 300 400
Finish time (s)
Fi
ni
sh
 n
od
es
 (C
D
F,
 %
)
12.5% top set
50% top set
N-by-N
12.5% random set
Multicast
Amplification
 11
21. Brian Kantor and Phil Lapsley, 
“Network News Transfer Protocol 
(NNTP),” IETF RFC 977, February 1986. 
22. Ritter, J., "Why Gnutella Can't Scale. No, 
Really," http://www.darkridge.com/~jpr5/. 
23. Sripanidkulchai, K., "The Popularity of 
Gnutella Queries and Its Implications on 
Scalability," 
http://www.cs.cmu.edu/~kunwadee/researc
h/p2p/paper.html. 
24. Jovanovic, M., "Scalability Issues in 
Large Peer-to-Peer Networks - A Case 
Study of Gnutella," University of Cininnati 
Technical Report 2001. Available at 
http://www.ececs.uc.edu/~mjovanov/Resear
ch/paper.html. 
25. Stoica, I., Robert Morris, David Karger, 
M. Frans Kaashoek, and Hari Balakrishnan, 
“Chord: A Scalable Peer-to-peer Lookup 
Service for Internet Applications,” ACM 
SIGCOMM’01, August 27-31, 2001. 
26. K. Fu, M.F. Kaashoek, and D. Mazieres, 
“Fast and Secure Distributed Read-only 
File System,” ACM Transactions on 
Computer Systems, 20(1):1-24, February 
2002. 
27. M. Kallahalla, E. Riedel, R. 
Swaminathan, Q. Wang, and K. Fu, “Plutus: 
Scalable Secure File Sharing on Untrusted 
Storage,” in Proceedings of the 2nd 
Conference on File and Storage 
Technologies, 2003. 
28. B. Popescu, B. Crispo, and A.S. 
Tanenbaum, “Secure Data Replication over 
Untrusted Host,” in Proc. 9th Workshop on 
Hot Topics in Operating Systems, 2003. 
29. Frank Dabek. A Cooperative File System, 
Master's Thesis, September, 2001. 
30. Kubiatowicz, John, David Bindel, Yan 
Chen, Steven Czerwinski, Patrick Eaton, 
Dennis Geels, Ramakrishna Gummadi, 
Sean Rhea, Hakim Weatherspoon, Westley 
Weimer, Chris Wells, and Ben 
Zhao.  OceanStore: An Architecture for 
Global-Scale Persistent Storage,  ASPLOS 
2000, November 2000. 
31. Zhao, Ben Y., John D. Kubiatowicz, and 
Anthony D. Joseph, “Tapestry: An 
Infrastructure for Fault-tolerant Wide-area 
Location and Routing,” U. C. Berkeley 
Technical Report UCB/CSD-01-1141, April, 
2001. 
32. Rowstron, A., and P. Druschel, "Pastry: 
Scalable, distributed object location and 
routing for large-scale peer-to-peer 
systems," Middleware, 2001. 
33. Druschel, P., and A. Rowstron, "PAST: A 
large-scale, persistent peer-to-peer storage 
utility", HotOS VIII, Schoss Elmau, 
Germany,  May 2001. 
34. Rowstron, A., and P. Druschel, "Storage 
management and caching in PAST, a 
large-scale, persistent peer-to-peer storage 
utility", 18th ACM Symposium on 
Operating Systems Principles, 2001.  
35. Eytan Adar, and Bernardo A. Huberman, 
“Free Riding on Gnutella,” First Monday, 
Vol. 5, No. 10, October 2000. 
36. “Punishing Freeloaders Key to 
Cooperation?” 
http://www.infoanarchy.org/story/2002/1/11
/02517/7790. 
 13
INFOCOM 2003. 
56. Yang-hua Chu, Sanjay G. Rao, and Hui 
Zhang, "A Case for End System Multicast", 
Carnegie Mellon University, SIGMETRICS 
2002. 
57. Venkata N. Padmanabhan, Helen J. 
Wang, Philip A. Chou, Kunwadee 
Sripanidkulchai, "Distributiing Streaming 
Media Content Using Cooperative 
Networking", Microsoft Research & CMU, 
NOSSDAV 2002. 
58. Yang-hua Chu, Sanjay G. Rao, 
Srinicasan Seshan and Hui, "Enabling 
Conferencing Applications on the Internet 
using an Overlay Multicast Architecture", 
SIGCOMM 2001. 
59. Seungjoon Lee, Rob Sherwood, Bobby 
Bhattacharjee, "Cooperative Peer Groups in 
NICE", University of Maryland, 
INFOCOM 2003. 
60. Duc A. Tran, Kien A. Hua, Tai Do, 
"ZIGZAG: An Efficient Peet-to-Peer 
Scheme for Media Streaming", INFOCOM 
2003. 
61. Richard Lethin, “Reputation,” in 
Peer-to-Peer: Harnessing the Power of 
Disruptive Technologies, Edited by Andy 
Oram, O’Reilly and Associates, Inc., 2001, 
pp. 341-535. 
62. Mojo Nation Documentation, 
http://www.mojonation.net/docs/. 
63. The Free Haven Project, 
http://www.freehaven.net/. 
64. Fabrizio Cornelli, Ernesto Damiani and 
Sabrina De Capitani di Vimercai, 
“Choosing Reputable Servents in a P2P 
Network,” in Proc. World-Wide Web 
Conference, 2002. 
65. L. Xiong, L. Liu. “PeerTrust: Supporting 
Reputation-Based Trust in Peer-to-Peer 
Communities,” IEEE Transactions on 
Knowledge and Data Engineering (TKDE), 
Special Issue on Peer-to-Peer Based Data 
Management, 2004. 
66. Josep M. Pujol, Ramon Sanguesa and 
Jordi Delgado, “Extracting Reputation in 
Multi-agent Systems by Means of Social 
Network Topology,” in Proc. 1st 
International Conference on Autonomous 
Agents and Multiagent Systems, 2002. 
67. Sepandar Kamvar, Mario Schlosser and 
Hector Gar-cia-Molina, “The EigenTrust 
Algorithm for Reputation Management in 
P2P Networks,” in Proc. World-Wide Web 
Confer-ence, 2003. 
68. Jon M. Kleinberg, “Authoritative 
Sources in a Hyperlinked Environment,” In 
Proc. the 9th ACM-SIAM Symposium on 
Discrete Algorithms, 1998. 
69. Larry Page, Sergey Brin, R. Motwani, T. 
Winograd, “The PageRank Citation 
Ranking: Bringing Order to the Web,” 
Technical Report, Stanford Digital Library 
Technologies Project, 1998. 
70. Andrew Ng, Alice Zheng and Michael 
Jordan, “Link Analysis, Eigenvectors and 
Stability,” in Proc. 17th Int’l Joint 
Conference on Artificial Intelligence, 2001. 
 
 15
態在轉變。 
傳統遠距教學所使用的即時群播方式，藉
由 Server 提供給使用者收看，隨著使用者
的增加，當 Server 負荷不了時就必須增加
配備，每個使用者所做的動作，如打字、語
音、影像，都經由 Server 統一發送，對 Server
而言是相當大的負擔。 
在點對點(Peer-to-Peer、P2P)網路軟體的
設計概念下，把原本需要 Server 作中介的
動作分攤給各個 Peer，藉此減少 Server 的
負擔也降低了成本。P2P 架構已被應用在串
流視訊上，其中 CoopNet[8]建構了一個多重
分散的樹狀架構，各別傳送分割過的描述及
媒體訊號，Narada[4][5]著重於多重傳輸及
多重接收的串流應用，在 NICE 則著眼於大
型的 P2P 網路架構，利用了多層的等級體
系想法[3]。 
本論文以現有的點對點串流系統為基
礎，進一步針對網路遠距教學的需求，設計
點對點視訊教學系統。一般的點對點串流系
統大多以大規模不特定用戶為對象來進行
同步群播，但在教學應用中，則主要以班
級、社團等特定小社群(數十至上百人)為對
象，強調互動回饋及同儕合作。 
另外，在點對點系統中，特徵系統
(Eigen-System)已被用來進行節點(Peer)間
互相的評比運算，利用各別的評比值，可以
取得某個客觀的總體值作參考。本論文提出
以類似方法，計算 Peer 間各自對於他人網
路狀況的量測，經過比較後取得各 Peer 廣
泛認同的優良 Peer 作為傳播樹的上層，藉
此建構出減少因為非預期離線而影響的傳
播系統。 
此論文的第二部份說明系統架構、系統流
程到系統運作，並提到防火牆與整個系統的
關係及如何改善因為防火牆而造成的問
題，以及為系統設計的功能所引進的群組概
念使得系統更完善。第三部份說明如何使用
Eigen-System 計算數值藉此建構傳播樹，並
對整個系統作詳細解說。第四部份對系統進
行初步的效能模擬，最後部份提出相關討
論。 
I.2. 系統設計 
 
2.1 系統架構 
 
本研究提出以點對點的架構來減輕傳統
主從式服務伺服器(Service Center)的負擔，
來源節點 (Source Peer)分攤原本 Service 
Center 所要負擔各個收看者(Peer)的連結。
每個 Peer 會先連結至 Service Center，再經
由 Service Center 依照 Peer 選擇不同選課
(Course)分送給所屬的 Source Peer。在傳播
時是以 P2P 的網路架構作連結的方式，如
圖 I.1 P2P 網路架構 
 17
測試，測試之後把資料傳給 Source Peer，
Source Peer 會依據這些資料通知各個 Peer
必須連結的位址。Source Peer 會對進來的
Peer 作頻寬測試，從測試的結果計算該 Peer
最大能協助服務的數量並記錄以幫助建立
傳播樹時可以直接服務給更多的 Peer。由於
Service Center 所需要負擔的是統計、測量
及 Source Peer 負責單一 Course 播放給固定
Peer 的工作，有別於主從式要負擔所有播放
的工作，可減少頻寬的不足及 Service Center
負載過重的問題。 
 
2.4 穩定度及傳輸能力 
 
使用者對於影像的感受大致上有對於影
像畫質的感受、播放時的順暢度、語音及影
像的吻合度、以及開播後多久能夠接收到影
像，其他的因素應該有網路頻寬的消耗、電
腦資源的消耗等。本研究所提出的穩定度及
傳輸能力著重在解決播放時的順暢度及畫
質，網路相關的解決方法則是在第三節中提
出。由於設計的系統是假設運作在普及化的
DSL 網路頻寬中，提出的是測試每個 Peer
上傳及下載的能力，暫時忽略了其他影響網
路品質的因素，像是封包遺失率等，並配合
使用者在此設計的系統中所會有傳遞資訊
給其他 Peer 以及進行服務的次數來提出穩
定度的看法。 
穩定度是從接收的行為當中，藉由每個
Course 當中的 Source Peer 紀錄 Peer 在
Course 所停留的時間長短以及進入系統次
數，依照時間的長短來判別 Peer 對於接收
行為的狀態是否長時間接收、進出系統的次
數是否頻繁。當 Peer 在系統中的進出記錄
沒有多餘的次數，則稱這個 Peer 是很穩定
的在系統中進行服務。 
在研究中以數字計算的形式表達出 Peer
的穩定度及傳輸能力。假設在系統中進入 N
次，而總共進行了 K 種的 Course，則正常
來說一種 Course 應該是進入一次，而不會
有 N 大於 K 太多。系統會紀錄 Peer 進入的
次數 N 以及進行 Course 的種類 K，相同的
課程在不同的播放時間算是不同種的
Course，研究中利用進出率 = (N-K)/K 計算
出的數值，以實驗上允許的誤差值 5%為範
圍而定，計算出來的進出率如果在 5%以內
則判定此 Peer 在接收的行為當中算是穩定
的。 
在傳播的行為當中，藉著每個 Peer 服務
子節點來計算出 Peer本身的播能力。當 Peer
能正常傳播給其他 Child 而不造成 Course
傳播的中斷，則這個節點對於傳輸方面能力
不錯。在研究中設立了一個計算方式來讓
Peer 對於傳播的能力數字化，如式子 1 所
描述的 Serving 是每個 Peer 傳輸能力的計
算。 
Serving 的計算是藉由每一個 Child 接收
從 Peer 傳輸 Course 的時間來給予肯定該
Peer 的傳輸能力，而計算是由 Child 在
Course 結束之後回傳給 Source Peer，經過
Source Peer 依照網路連結的清單進行確認
並計算每個 Peer(s)所得到的 Serving，避免
有 Peer 做多餘的給分破壞系統平衡。 
 19
 
防毒軟體或防火牆軟體都是可以讓使用
者自由操控，但處於 NAT 底下的 Peer 除了
經由管理者設定外，User 不能自行讓外部
電腦自由進出內部網路，對於此研究所設計
的系統所要服務的是個大大的障礙。由於
NAT 及防火牆的特性，使得內部可以主動
要求外部電腦作連線，但是外部卻不能主動
跟內部作溝通，所以處於 NAT 之內的 Peer
只能接收而不能傳遞給下一個節點的狀
況，在 P2P 檔案交換系統當中也是個很大
的問題。 
NAT 的類型區分為 Full Cone、Restricted 
Cone、Port Restricted Cone、Symmetric 這四
種。當 Peer 登入至伺服器的同時，Service 
Center 會配合 Source Peer 的 Course 開播電
腦對 Peer 所使用的電腦作 NAT 型態的偵
測，如果偵測的是 Full Cone 型態則不作處
理，因為 Full Cone 的特性是該電腦一連到
外部，其他 Peer 都可主動自由地跟這台電
腦作聯繫；型態是 Restricted Cone 或 Port 
Restricted Cone，Service Center 會通知該
Peer 主動聯繫他人，並告知其他 Peer 其 IP
及 Port 以 便 聯 繫 ； 最 為 麻 煩 的 是
Symmetric，無法使用告知其他電腦的方式
就能聯繫，因為連不同電腦都會使用不同
Port，所以必須同時猜中兩台 NAT 電腦所
使用的 Port 才能讓它們連接起來，或用其
他電腦作傳輸中介，在此設計的系統中，處
理方式則是讓它們在整個播放系統連結的
最底層。 
 
I.3. 傳播樹的建立 
 
為達到視訊串流品質的優良及成本的降
低，此研究所設計的系統捨棄集中式伺服器
的群播方式，改用 P2P 的網路架構把伺服
器原本的分配連線的工作分攤給 Source 
Peer，把傳播的工作分給各個 Peer，以接續
的方式讓視訊流傳在 Peer 之間。 
在設計網路架構的同時，考慮到整個傳播
樹該如何作成長、該如何選出好的 Peer，以
及 Peer 進入或離開系統時整個連結該如何
作修補。 
 
3.1 分析節點 
 
此論文所提出挑選節點的方式是利用
Eigen-System 來計算出一個數值，藉由計算
出來的數值決定 Peer 在建構傳播樹時的層
級。在 Peer 與 Source Peer 連結的時候，會
跟所有 Peer 做連線間的測試。在 RON[1][2]
裡提到，加強處理能力的軟體通常都使用
TCP 或是類似 TCP 的壅塞控制，所以把處
理能力最佳化會著重於傳輸的型態上。大部
分的 TCP 傳輸品質藉由觀察 round-trip 
latency 還有封包遺失率，RON 用了一個簡
單的方程式結合了 latency 還有流失矩陣來
計算處理能力最佳化，可以用來驗證出一個
TCP 在處理能力的上限，測試出來的流失
率為 1%，且處理能力對於低的流失率較為
敏感。RON 對於網路挑選節點的概念與研
究相似，為了依照網路傳輸的封包流失率較
低及資料在網路上延遲的時間較短，因此在
 21
都是重新進入 Course 次數很少，在次數少
的狀況下 Serving 的量越多表示這個 Peer
不但可以穩固的停留在 Course 裡面又能服
務其他 Peer。依據 Serving 的不同表示能服
務的 Peer 數也不相同，所以在建構傳播樹
的時候優先把能夠服務更多 Peer 的放在傳
播樹較上層的位置。經過這三個步驟挑選出
來的 Peer 就是之後建立傳播樹時的中介
Peer，能在傳播 Course 時幫助整個系統經
由穩定的 Peer 傳輸 Course 到傳播樹的每一
個層級。 
大略說明建構方式： 
1. 第一個部分控制中介 Peer 的挑選順
序，從 Serving 最高的開始挑選，檢查
每個 Peer 是否符合條件，如果是尚未
連結的 Peer(non-connect)則從已經連結
的傳播樹中隨機挑選一處來連結，剛開
始時會有 Source Peer 可連結。然後利
用巢狀迴圈讓所有能成為中介用 Peer
全部建構。中介 Peer 的挑選是利用前
一節對 Peer 所做的分析，中介 Peer 的
挑選原則是：1、封包遺失率在 3%以
下。2、接收的穩定度在 5%以內。3、
能夠傳遞給其他 Peer。在皆符合條件的
狀況下依照 Serving 的數量來排定中介
用 Peer 的挑選順序。 
2. 第二部分是從非中介用的 Peer 中挑選
出能夠傳遞的 Peer，讓這些能夠傳遞但
是連結狀況不佳的從 Value 高低開始建
構於現有的傳播樹上。 
3. 第三部分把剩下的Peer依照Value高低
為先後建構在已知的傳播樹上，以連結
於中介的 Peer 為優先，其次則為第二
部分的 Peer。 
有了穩定的 Peer，在建構的同時把這些
Peer 安插在適當的位置有利整個系統傳播
的能更穩健。在研究設計了一個安插的方
式，就是把這些能夠作為中介的 Peer 串連
各層形成主要傳播線，如圖 I.3 ，其它沒有
成為中介的 Peer 但是卻有能力服務其他
Peer的則依照Value的高低來安排在已經形
成的主線旁邊，其他不能傳播服務的 Peer
則是在樹狀圖的最末端。如果主要傳播線上
所有的 Peer 不夠服務其他剩下 Peer 的狀
況，則把其他 Peer(s)以 Value 的高低直接建
構在較不穩定的 Peer 下，但是依舊從 Value
高者開始做建構的選擇，可以在雖然網路經
驗上的穩定度不夠的 Peer，但是在剩下 Peer
中卻有較佳的 Value，在網路硬體上的狀況
還能作為接續傳播的 Peer。 
圖 I.3 中粗線條的箭頭表示連接的 Peer
是主要傳播線上的 Peer，被連結的都是挑選
出來能作為中介的 Peer，從圖中可見每一層
都有一個中介用的 Peer 負責穩定地延續整
個 Course 的播放，而在傳播樹的尾端出現
一般 Peer 傳遞給一般 Peer 是因為沒有足夠
多的中介用 Peer 能夠使用，所以建構的標
準就回到原本利用Value的高低來做安排的
先後，讓剩下未被連結而 Value 高的 Peer
 23
的服務能力不足負荷其他 N-1 個 Peer 再加
上原本 Child 原本所負責的 M 個其他 Peer，
這種情形可能造成這些被服務的 Peer(s)接
收 Course 時發生斷斷續續的狀況。所以研
究中採用分攤的方式，從 N1 開始判斷當下
對他而言最好的 Peer 作連結，當然該連結
一定要未達到自己連結的上限，再換 N2 重
複作此動作直到 Nk 為止，這樣可以確保重
建連結數只有 N 條，而替補的最少次數也
是 N，但卻隱藏了很大的機率需要調整 N
次以上。在經由分攤方式讓每個 Peer 暫時
連結之後，當每離開 K 個 Peer，Source Peer
會通知在同個 Course 內所有的 Peer 同時連
線以建構較穩定的傳輸架構。 
 
3.5 偵測節點狀況 
 
當 Peer 進入的時候，會先登入至 Service 
Center，挑選播放的 Course 之後經由 Service 
Center 發送給 Source Peer，此時 Source Peer
就知道有節點進入並進行安排該名 Peer 的
插入點。所以當 Peer 進入時可以即時的判
斷及做出反應。但 Peer 離開的時候，不容
易判斷是否一時傳輸不順或是突然離開，於
是在此研究當中，讓每個 Child 都跟它的父
節點(Parent)隨時進行偵測，在 RON[1]裡有
提到當一個平均封包遺失率超過 30%或更
多算是高遺失率。所以在服務的設計中，假
設每秒最少需要傳遞 m 張畫格，當 Child
沒接收到的畫格是 m*30%，Child 則跟
Source Peer 回報該 Peer 已經離開，Source 
Peer 會要求其他與 Peer 連結的 Parent 及
Child 回報與該 Peer 的連結狀況以驗證 Peer
是否離開系統，如果 Parent 對於該 Peer 還
是能進行傳輸而 Child 接收不到，則 Source 
Peer 會把 Peer 當作在 NAT 或是防火牆後的
Peer 而重新進行連結。 
 
I.4. 模擬 
 
研究中模擬以有無利用穩定度來建構傳
播樹的差異，模擬的環境為 60 個 Peer 進行
50 分鐘的 Course，每秒進行一次斷線的判
斷，Peer 的斷線機率是隨機建立，之後才挑
選出中介的 Peer。模擬的過程記錄每個 Peer
在 Course 未經修補傳播樹的狀況下能接收
多長的時間。因為在同個 Course 裡的 Peer
才 會 互 相 偵 測 網 路 ， 所 以 在 計 算
Eigen-System 的時候是在同一個 Course 的
Peer 互相比較，而不是整個系統中的所有
Peer 一起計算。 
 
圖 I.4 是以亂數以及 Eigen-Based 兩種方
法在建構傳播樹時 Peer 接收 Course 的
CDF(Cumulative distribution function)關係
圖。此圖表達在到達 Time 之前已經有多少
比例的 Peer 已經斷線，例如圖中 20 分鐘
0
0.2
0.4
0.6
0.8
1
0 5 10 15 20 25 30 35 40 45 50
Time (min)
CD
F
Random
Eigen-Based
圖 I.4 Peer 持續接收數與時間關係圖
 25
[1] D. Andersen, H. Balakrishnan, F. 
Kaashoek, and R. Morris, “The Case for 
Resilient Overlay Network,” HotOS VIII, 
May 2001. 
[2] D. Andersen, H. Balakrishnan, F. 
Kaashoek, and R. Morris, “Resilient 
Overlay Networks,” Symp. on Operating 
Systems Principles, 2001. 
[3] S. Banerjee, Bobby Bhattacharjee, and C. 
Kommareddy, “Scalable Application 
Layer Multicast,” ACM SIGCOMM, 
2002. 
[4] Yang-hua Chu, Sanjay G. Rao, S. Seshan, 
and Hui Zhang, “A Case for End System 
Multicast,” IEEE Journal on selected 
Areas in Communications, Oct 2002. 
[5] Yang-Hua Chu, Sanjay G. Rao, S. Seshan, 
and Hui Zhang, “Enabling Conferencing 
Applications on the Internet Using an 
Overlay Multicast Architecture,” ACM 
SIGCOMM, 2001. 
[6] S. Jain, R. Mahajan, D. Wetherall, and G. 
Borriello, ”Scalable Selforganizing 
Overlays,” Tech. Rep., UW-CSE 02-06-04 
University of Washington, 2000. 
[7] K. Lai, M. Feldman, I. Stoica, and J. 
Chuang, “Incentives for Cooperation in 
Peer-to-Peer Networks,” Workshop on 
Economics of Peer-to-Peer System, 
Berkeley, CA, 2003. 
[8] V. N. Padmanabhan, H. J. Wang, P. A. 
Chou, and K. Sripanidkulchai, 
“Distributing Streaming Media Content 
Using Cooperative Networking,” 
ACM/IEEE NOSSDAV, 2002. 
 
II.具信用評比及客觀排名之點對點平台 
隨著寬頻網路的來臨，遊戲市場已從個人
單機版演進至多人網路。在傳統主從式架構
的線上遊戲平台中，伺服器容易成為系統效
能的瓶頸。為了提升線上遊戲平台的效能，
本論文提出混合式的點對點架構來分散各
節點間資料的訊息量，以便減輕伺服器的負
擔。另外，為了鼓勵使用者維持良好的表現
並 向 上 提 升 ， 我 們 提 出 以 特 徵 系 統
(Eigen-systems)的方式來對使用者進行信用
評比及勝負排名，除了能避免集體舞弊外，
也可以用來協助篩選對手或授以不同等級
的系統權利。藉由初步的量測、模擬與分
析，我們提出的混合式點對點架構，應可有
效提升線上遊戲平台的效能，並維持同儕間
的公平性及良性競爭。 
 
II.1. 前言 
 
由於低價電腦的盛行帶動個人電腦的普
及化，隨著網際網路的風行與寬頻化，電腦
遊戲也因而從個人單機版軟體走向多人同
時進行的線上遊戲，在許多地區都吸引眾多
 27
一伺服器之負擔與簡化所需的硬體設備。在
連線的過程中，訊息的傳送皆由各個節點自
行承擔，如圖 II.2 Session 1 可得知，進行
連線的各個節點直接與所在之其它節點溝
通，而伺服器只擔任儲存節點資訊、訊息重
導(Message Redirect)與查詢(Search)等中繼
角色，用以建立遊戲會議(game session)為主
要目的。 
在此架構下無節點伺服器，只有一個主要
的伺服器作用來處理節點的資訊如圖 II.2 
Service Center(服務中心)，用來協調會議與
節點資訊，而由四個節點所組成的遊戲會議
其所傳送的封包並不會流向遊戲服務中
心，因此伺服器無需維護 n 個會議所需之額
外負擔。 
 
2.2 系統流程 
 
圖 II.1 為整個系統的運作流程，大至上
分為十個主要步驟。與傳統/分散式主從式
架構相同，本系統使用遊戲服務中心作為伺
服器，避免與 Gnutella 為了達成節點之前的
溝通，所產生出過多的網路封包，採用主從
式構架可以有效的縮小與控制節點之間的
訊息傳送。 
本系統流程以下列步驟說明： 
1. 初始化系統所需之相關全域變數，如會
議、節點資訊，網路連線埠與相關協定。 
2. 登入至系統(非同步)，儲存登入者相關
資訊，如 IP、名稱等。 
3. 傳回該節點登入系統後的初始化資訊，
如大廳中的其它玩家，與目前系統中有
多少 Session 存在。 
4. 可建立屬於自己的房間，供其它人加
入。 
5. 可加入或離開所選擇的房間。 
6. 遊戲啟動在平台架構設計中，參考
Session 所需，分別具有三種彈性模式，
第一，當房間人數達該房所涉人數時，
系統會啟動遊戲，並互相傳送該 Session
個人的相關資訊。第二，人數不限時便
會以時間當做控制點，當房內有人時便
會在 S 秒後進行。第三，以第一個進入
主控者開啟進行。第二和第三皆為第一
個開啟 Session 者決定。 
7. 玩家根據系統所傳送的資訊，自組成一
圖 II.2 P2P 網路架構圖 
圖 II.1  系統流程圖 
 29
置之不理。評比值更動來源來自於 Session
結束之後， Peers 可以給予其他 Peer 評價
(優、劣與不予置評)，系統中以 1、-1 與 0
表示：1 代表優，-1 代表劣，0 代表不予置
評。 
評比資料全部由主伺服器控制，設定 Peer
的分數最低限制為 1，最高止於 100，至於
小數點是取到第三位，第四位四捨五入至第
三位，然而為了避免最低數據趨近於 0 而最
後歸 0，因此定義數據最低為 1，數據分佈
範圍為 1 至 100 之間，以最簡單方式控制全
部 Peer 分數。新人因為沒有好壞之分，因
此給予中心分數 50 為起始數據。n 代表原
始分數，由 Peer 所給正負評比決定：當 Peer
給正評比時，分數為 10*n1/2 (n 大於等於
1)。若 Peer 給負評比時，分數計算為 n/2(n
大於等於 1)。其分佈圖如圖 II.5 。 
此種正評比計算方式是為了分數越低者
升等越快；相對的，分數越高者升等越慢。
負評比計算方式是為讓分數越來越緩慢下
降，能夠激發使用者往較高等級挑戰的動
力。 
 
假設一個 Session 中有四個 Peer 之原始分
數都為中心分數 50，當 Peers 進入 Session
時，主伺服器並不會給予並且記錄任何資
料，當整個活動結束後，每個 Peer 會給予
其他評比。 
假設 Peer1 至 Peer4 所給予對方的評比值
如下：第一行表示 Peer1 各別給 Peer2 至
Peer4 是-1，+1 和 0，第二行表示 Peer2 個
別給 Peer1、Peer3 和 Peer4 是+1，0 和-1，
以此類推。 
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
+−
++
−+−
−+
0110
1001
1101
0110
 
此矩陣會直接傳回主伺服器進行正負評
比運算工作，而原始分數皆從中心分數 50
開始計算，換算成應得分數如下： 
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢
⎣
⎡
050102550
250505010
255010025
502550100
 
最後進行特徵系統運算所得評比，當特徵
向量前後相減平方後再開根號，所得的值小
於千分之ㄧ時，即是最後評比值。Peer1 至
Peer4 得到分別是 0.204、0.187、0.256、和
0.212，若當系統開啟時同一時段有第一批
新人加入，因為沒有好壞之分，便會以 50
當做起始值，不過系統寵分數會隨著時間而
有變化，因此採取移動平均方式使得新人的
分數隨著整體的改變而有所更動，使得新人
加入的評比更具有彈性化，移動平均的公式
如下： 
All=(1-α)*New+ α*(Averege Total 
圖 II.5 評比正負值分佈圖 
0
20
40
60
80
100
0 20 40 60 80 100
Old
N
ew
n/2
Old=New
10*(n^0.5)
 31
II.4. 初步結果 
 
4.1 架構測試 
 
目前許多線上遊戲採用分散式主從架
構，優點是可減輕伺服器的負擔，其缺點在
於每位節點資訊必須經由伺服器節點來傳
遞給所有節點資訊，若是伺服器節點設備差
或其他因素則會影響整體效能，而架構是針
對分散式主從架構做改良。本節針對分散式
Client-Server與架構對每位Peer承擔資料量
模擬測試。 
本論文使用以分散式主從架構為例的線
上遊戲「魔獸爭霸之寒冰霸權」測試傳輸
量，Server Peer 上傳與下載平均每秒總傳輸
量為 45.97KBs，其他 Peer 平均每秒總傳輸
量為 1.83KBs，由此看出，Server Peer 所要
承擔的是其他節點的 25 倍。 
以P2P 架構節點間訊息模擬測試，每Peer
所上傳與下載平均每秒總傳輸量為 13.84 
KBs，可得 P2P 架構比分散式主從架構的
Peer1 每秒傳輸量減少 32.13 KBs，讓其他
Peer 分擔 Peer1 的負荷量。 
 
 
 
架設在硬體環境限制下，如圖 II.6 所示
P2P 架構使得節點間所承擔的資料量平均
相同，與分散式主從架構做比較發現其它節
點平均多承擔 12.01KBs 資料量就可讓
Peer1 從 45.97KBs 降到 13.84KBs，雖然這
種方法使其他節點封包量變多，不過在硬體
環境的限制之下，這種方式可讓每位節點都
能盡相同責任而互相分工合作。 
 
4.2 模擬傳送封包與演算 
 
由演算法可演算出 Session 中所參與人數
之每一個所傳送的封包量的大小，並將其畫
出曲線圖如圖 II.7 。 
以下說明每個傳送封包的計算式：Server 
Peer 封包量曲線為(n-1)+(n+1)2 ；單一 Peer
封包量曲線為 2(n-1)；單一 Client 封包量曲
線為(n-1)；分散主從式架構總封包量曲線 
(n+1)(n-1)+(n-1)2 等於 P2P 架構總封包量
2n(n-1)。 
在總封包量相同情況下，可得知當
Session 中所參與的人數(n)越大時，Server 
Peer 所要承擔的是其他 Peer 的好幾十倍，
而在 P2P 架構中，採取的是公平性，即使
在硬體設施不一樣時，也不會因為其他 Peer
而受干擾，也是本論文的最大目標與改善
Server Peer 所要承擔之瓶頸。 
 
 
4.3 實作系統展示 
 
在系統架構中，利用 P2P 架構方式的簡單
小遊戲(撿紅點)，實際展示出來。圖 II.8 為
圖 II.6  分散式主從架構與P2P架構節點
間資料量比較圖 
0
5
10
15
20
25
30
35
40
45
50
Peer1 Peer2 Peer3 Peer4 Peer5 Peer6 Peer7 Peer8 Peer9 Peer10
Tr
af
fic
(K
B
s)
Distributed Server
Peer to Peer
 33
地維持在一個固定的名次，但是所得到之名
次並不會勝過全部選擇與強者做競爭的情
況。所以，會激勵使用者選擇與強者做競爭
的動力。 
4.5 討論 
 
本論文架構以 Session 形式進行群體運
作，然而在開啟 Session 方式上，因應設計
使用者的需求，而以彈性架構為主，分別討
論以下三種情況，第一，當房間人數達該房
所涉人數時，系統會啟動遊戲，並互相傳送
該 Session 個人的相關資訊。第二，人數不
限時會以時間當做控制點，當房內有人時便
會在 S 秒後進行。第三，以第一個進入主控
者開啟進行。第二和第三皆為第一個開啟
Session 者決定。Session 限制在第 0 節內文
中解釋，主要考量避免集體作弊(AT 團)或
造成等級低的無法升級。 
繼 Session 限制以等級規劃設計，將以特
徵系統設計評比，由每 Peer 給予-1、0 或
1(優、劣)如第 0 節所呈現，評比值的範圍
為了控制在一定的值內，因此採取升值為
10*n1/2，降值為 n/2，至於小數點是取到第
二位，第三位四捨五入至第二位，然而為了
避免最低數據趨近於 0 而最後歸 0，因此設
定在 1 以上，因此整個數據控制在 1 至 100
之內，新人沒有好壞之分將會以有 50 作為
起始，此方法目的在於給予每個使用者一個
參考對方的價值並且牽涉到是否擁有 Open 
a Session 之權利，因此信用評比是不可忽略
的ㄧ環。 
在此 P2P 網路架構強調公平性，不管是分
散主從式架構還是 P2P 網路架構，在總封
包數量相同條件之下，P2P 網路架構中每
Peer 分配封包量均相等，已達到公平、公
正、盡相同責任與互相分工合作的特色。而
此系統架構可同時擁有 10 至 100 人之中型
Session 為主，倘若 Session 內人數太多達幾
百人則會使個人主機造成不負使用，因此不
適合於本架構。在相同封包數的條件下，
P2P 網路架構每個 Peer 共同承擔之下，可
明顯降低分散式架構中負責承接 Server 的
負擔量。 
利用第 0 節所展示的實作系統驗證本論
文所提出的架構，分別就信用評比以及勝負
排名進行驗證，信用評比主要以 Session 內
各個使用者互相評分，而勝負排名分別以分
數、時間和場次提出討論，利用彈性的架
構，適用於不同 Session 中，更以模擬第 0
節看出贏強者影響甚大，加上使用移動平
均，令後一次的競爭並不會造成巨大的影響
力，而是以多個場次之最後結果為依據，因
此，可發現本論文已經實際完成整體系統架
構之設計。 
 
II.5. 小結 
 
本論文提出 P2P 網路架構，適用於分組式
中型 Session 之線上傳輸，即使有人半途離
線也並無影響；並以 3D 線上遊戲(十人)為
例子依兩種架構模擬與測量，在遊戲進行中
每個用戶同時扮演伺服器跟用戶端角色。 
比較分散式主從架構與 P2P 架構節點之
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                         2007 年 7 月 20 日 
報告人姓名 
 
吳俊興 
 
服務機構
及職稱 
 
國立高雄大學 資訊工程學系 
 
     時間 
會議 
     地點 
2007 年 7 月 9 日至 13 日 
法國 巴黎 
本會核定
補助文號
NSC 95-2221-E-390-006 
會議 
名稱 
 (中文)第十屆歐洲營養年會 
 (英文) 10th European Nutrition Conference 
發表 
論文 
題目 
 (中文) 以全球資訊網來整合多個食品資料庫之網路營養資料庫 
 (英文) A Web-based Nutrient Databank Integrating Multiple Food Databases 
報告內容應包括下列各項： 
一、參加會議經過 
 
此次赴法國巴黎參加第十屆歐洲國際營養研討會，並發表論文「以全球資訊網來整
合多個食品資料庫之網路營養資料庫」(A Web-based Nutrient Databank Integrating 
Multiple Food Databases)。此會議歷史悠久，每四年一次，系列會議至今已舉辦 40 年，
主要提供來自世界各地與營養科學領域相關的專家學者，一個合作交流與跨領域相互
學習的機會。今年的歐洲營養年會主題為 Nutrition and Metabolism（營養與代謝），會
議中總共有七場的 Plenary Lectures, 24 場的 Symposia, 15 場 Workshops 與 15 場的
Satellite symposia，12 場的 Oral communications，以及 849 張的海報展示，會議進行相
當緊湊，而且內容豐富。 
此次開會地點是在法國巴黎市中心的國際會議中心，場地寬敞，因此開會期間可以
全程同時容納所有的海報展示。本人全程與會，並在排定的主要交流場次與來自世界
各地的學者交換相關意見。食品營養成份資料庫的應用很多，全世界有很多國家也都
在建置自身的食品營養成份資料表，但相互之間的整合工作卻有待努力。在此方面，
歐洲各國近來也積極訂定各種格式以便使資料庫之資料可以相互流通。EuroFIR 
(European Food Information Resource Network)主要目的在於為歐洲地區建置一個具有
資料廣泛性、格式一致性的資料庫，提供單一且可信賴的資料來源，在本次大會也有
許多跨國合作的研究人員，聯合展示多篇相關研究成果的海報，並有專門的攤位來介
紹目前全球最大的營養資料庫整合計畫。此次與會正可與 EuroFIR 計畫的相關人員進
行交流。 
三、建議 
 
1. 運用資訊與網路技術於基因與醫療研究已普獲重視，未來運用在食品營養與預
防醫學研究仍有極大的空間，值得進行前瞻研究。 
2. 食品、藥品與醫療為生物技術的三大產業應用領域，其中食品更是人類維持生
存與健康的必需品，而且商業化開發的門檻較醫療、藥品為低。國內目前在推
展上可考慮加強在保健營養與保健食品方面的投資。 
3. 政府可結合民間力量，累積相關經驗及能量，協助學界舉辦大型或知名的國際
會議。 
 
四、攜回資料名稱及內容 
 
1. Programme, 10th European Nutrition Conference 乙冊 
2. Abstracts, 10th European Nutrition Conference 乙冊 
 
