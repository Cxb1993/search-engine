i行政院國家科學委員會專題研究計畫期末精簡報告
計畫名稱：R 個來源節點的最短路徑k-樹問題之研究
計畫編號：NSC 97-2221-E-143 -002- 執行期限：97 年 8 月 1 日 至 98 年 7 月 31 日
主持人：陳彥宏 (Yen Hung Chen) Email：yhchen@nttu.edu.tw
一、中文摘要
本計畫是去探討一些具R個來源節點(source vertex)的最短路徑k-樹(R-source shortest total path length
k-tree) 問題。目的是為了對廣域網路(WAN)中的quorumcast routing [群撥(multicast)繞境的一般化
(generalization) ] 提供一quorumcast routing tree (即一k-tee)，使得這棵樹能滿足某些服務品質的保證
（Quality-of-Service）。一k-tree被定義為圖(graph)上的一棵樹內有k個節點(vertex)，k<n，n為圖的
節點個數。給定一個無向圖G=(V,E)，邊上有非負的長度及一個來源節點的集合S⊂V內有R個節點。
我們研究三個問題: (i) R-source shortest paths k-tree (R-kSPST) problem。此問題是要去找一k-tree T
連結所有來源節點及圖上其它任k-R個節點使得樹上所有來源節點到此樹中的所有節點的總加總距
離是所有可能的k-tree中最小的。即我們要minimize Σs∈S{Σv∈V(T) dT(s,v)}，dT(s,v)是s和v在樹上路徑
(path) 的長度，V(T)為樹中節點的集合。(ii) R-source maximum source shortest paths k-tree (R-kMSST)
problem。此問題是要找一k-tree T連結所有來源節點及k-R個節點使得每個來源節點到此樹上的所有
節點的距離加總中最大的來源節點的距離要最小。即minimize maxs∈S {Σv∈V(T) dT(s,v)}。(iii) R-source
maximum vertex shortest paths k-tree (R-kMVST) problem。此問題則是要找一k-tree T連接所有來源節
點及k-R個節點使得樹上的每個節點到所有來源節點的距離加總中最大節點的距離是所有可能的
k-tree中最小的。即要minimize maxv∈V(T) {Σs∈S dT(s,v)}。此計畫我們我們成功的証明此三個問題為NP
困難，對於2-kSPST與2-kMVST問題，我們設計了polynomial time approximation schemes (PTASs) 的
近似演算法。對於2-kMSST問題我們設計了一個(2+)的近似演算法，>0。
關鍵詞：組合問題、近似演算法、NP困難、polynomial time approximation scheme、群播、quorumcast
routing、k-tree
Abstract
In this project, we investigate some k-tree problems of graphs with given two sources. Let G=(V,E) be an
undirected graph with nonnegative edge lengths and two sources s1, s2 V. A k-tree T of G is a tree
spanning k vertices in the G, k<|V|. The first problem is the 2-source shortest total path length k-tree
(2-kSPST) problem, in which we want to find a tree T=(VT,ET) spanning k vertices such that the total
distance from all vertex in VT to the two sources is minimized, i.e., we want to minimizevVT {dT(s1,v)+
dT(s2,v)} in which dT(s,v) is the length of the path between s and v on T. The second problem is the
2-source maximum source shortest paths k-tree (2-kMSST) problem, in which the objective function is the
maximum total distance from any source to all vertices in VT, i.e., max s∈{s1,s2}Σv∈VT dT(s,v). The third
problem is the 2-source maximum vertex shortest paths k-tree (2-kMVST) problem, in which the objective
function is the maximum total distance from any vertex in VT to the two sources, i.e., maxv∈VT {dT(s1,v)+
dT(s2,v)}. In this project, we show that these problems are NP-hard. We also present polynomial time
approximation schemes (PTASs) for the 2-kSPST and 2-KMVST problems. For the 2-kMSST problem,
we give a (2+)-approximation algorithm for any>0.
Keywords: combinatorial optimization problem, approximation algorithms, polynomial time
approximation scheme, NP-hard, k-tree, quorumcast routing, multicast routing
2connecting the multicast group such that packets can be routed from sources to destinations
along the tree edges and satisfies some Quality-of-Service (abbreviated QoS) [20, 22] criteria in
computer networks. The length of an edge usually signifies the cost of routing a packet along
the edge, and the cost from a source to a destination is the distance between the two vertices,
i.e., the sum of edge lengths of the unique path between the two vertices in the tree. With
different applications(QoS criteria), different objective functions can be used in these problems
to define what constitutes a good tree, but in general to minimize some distance related costs.
Given an undirected graph G=(V,E) with a nonnegative edge length function and SV a set
of R specified sources, the R-source shortest paths spanning (R-SPST) problem [13, 25, 27, 28]
is to find a spanning tree T minimizing sS {vV dT(s,v)}, where dT(s,v) is the length of the
path between s and v in T. If there is only one source, the problem is called the shortest paths
tree problem, i.e., a spanning tree in which the path from the source to each vertex is a shortest
path on the given graph. This problem has been well studied and most efficient algorithms run
in O(|E|+|V|log |V|) time [11].
In the case of R>1, the R-SPST problem is a generalization of the MRCT problem, in
which all vertices are sources. The MRCT problem is NP-hard [19]. The R-SPST problem for
general R is obviously NP-hard since the MRCT problem is a special case of the R-SPST
problem. For R=2, the NP-hardness of the R-SPST problem was shown independently in [13]
and [27] and a polynomial time approximation scheme (PTAS) was also proposed [27]. The
R-SPST problem for any constant R was also shown to be NP-hard [28] and a 2-approximation
algorithm can be found in the previous work of the authors [25].
While the R-SPST problem is defined by a min-sum objective function, Connamacher and
Proskurowski [10] posted two variants of the R-SPST problem with bottleneck objective
functions. They are the R-source maximum vertex shortest paths spanning tree (R-MVST) (also
called the R-source bottleneck vertex routing cost spanning tree (R-BVRT) in [6] ) problem
and the R-source maximum source shortest paths spanning tree (R-MSST) (also called the
R-source bottleneck source routing cost spanning tree (R-BSRT) in [6] ) problem, in which the
4vertex shortest paths k-tree (R-kMVST) problem is to find a k-tree T spanning exactly R
sources and k-R vertices in V \S with minimum CV(T) among all possible trees.
A famous application for these three problems is quorumcast routing [1, 8, 12, 15, 21, 24] in
computer networks. Quorumcast routing is a generalization of multicasting routing. In the
quorumcast routing, packets are sent from sources to a subset of group members (destinations),
where the members in the subset are not known a priori. The set of group members is called the
quorum pool [24] or residence set [8]. The subset of a quorum pool is called a quorumcast
group. The quorumcast routing problem is to select a quorumcast group and then construct a
quorumcast routing tree spanning sources and the quorumcast group members. The need of
quorumcast routing arises in a number of distributed applications [1, 8, 15, 24] and accessing
replicated data [8]. A possible application of these three problems is to construct quorumcast
routing trees subject to certain QoS constraints. There are R sources in a WAN and the quorum
pool (the set of destinations) is all vertices in the WAN. Now, each source has messages to be
quorumcasted. Because the distance from a source to a destination represents the delay or cost,
of the message routing, the total service quality in aspect of an internet service provider may be
measured by the total distance from all sources to a quorumcast group (i.e., any subset of
destinations). The R-kSPST is the tree optimizing the total quality. Then the average service
quality in the aspect of any customer (vertex) may be measured by the total distance from all
sources to it. The R-kMVST is the tree optimizing the worst average quality. Finally, the
average quality of a source may be measured by the total distance from it to a quorumcast
group, and the R-kMSST is the tree optimizing the worst average quality of the sources.
In this project, we focus on the complexity and approximation algorithms for these three
problems. We will show that these three problems are NP-hard. For the 2-kSPST and
2-kMVST problems, we will present PTASs. For the 2-kMSST problem, we will show a (2 +
ε)-approximation algorithm, forε>0. The rest of this project is organized as follows. In Section
2, some definitions and notations are given. In Section 3, we describe a PTAS for the 2-kSPST
problem. In Section 4, we show a (2 +ε)-approximation algorithm for the 2-kMSST. In Section
6of Bellman-Ford algorithm identifies an optimal i-hop constraint shortest path between s and
each destination t in V. It runs H-iteration for the all hops shortest path problem.
For this project, we assume that s1 and s2 are the two given sources. The next lemma comes
from [27].
Lemma 1. Suppose that P={s1=p1, p2,…,s2=p} is a tree T of G between s1 and s2. Let m1,
m2,…,mi be i vertices such that P connects the consecutive mj. Given two sources s1, s2 and the
i-tuple (m1, m2,…, mi), there is an O(in2) time algorithm which constructs a tree X spanning the
given vertices and having the property that dX(v,s1)+dX(v,s2)w(P) for any vV(X).
However, this lemma can't work on k-tree problems, since the tree X may has more than k
vertices. Hence, we modify above lemma such that this tree X has at most k vertices.
Lemma 2. Let P={s1=p1, p2,…,s2=p} be a path of a k-tree T and m1, m2,…,mi be i vertices
such that P connects the consecutive mj. Given the two sources s1, s2 and the i-tuple (m1, m2,…,
mi), there is an O(iki+1n2) time algorithm which constructs a tree X spanning the given vertices
such that |V(X)| at most k vertices and having the property that dX(v,s1)+dX(v,s2)w(P) for any
vV(X).
Proof. Let m0=s1 and mi+1=s2. For any 0ji, let Mj,h denote a h-hop constrained shortest path
between mj and mj+1. Let H=k-1, we first find the all hops shortest path problem between mj
and mj+1 for 0ji. Let a path collection PC={M0,h0, M1,h1,…, Mi,hi} denote a path set such that
h0+h1+…+hik-1. Then, for each path collection PC, we find a tree X and V(X)V(PC) such
that dX(v,s1)+dX(v,s2)w(P) for any vV(X). It can be designed by the previous algorithm [27].
We state the result but the proof is omitted.
Now, we analyze the time complexity of this algorithm. First, finding the all hops shortest
path between mj and mj+1 takes O(k|E|) time. Hence, totally we need O((i+1)k|E|) time. Then
we have at most O(ki+1) path collection and for each path collection, it takes O(in2) time to find
the tree X. Hence, the time complexity of this algorithm is O(iki+1n2).
3. A PTAS for the 2-kSPST Problem
In this section, we show a PTAS for the 2-kSPST problem. The PTAS is a modification of
8complexity of this algorithm is dominated by finding k-hop shortest path problem and one of
constructing the shortest path forest.
Now, we describe the PTAS and its performance analysis. Similar to the previous PTAS for
the 2-MRCT [27], our PTAS tries to guess some vertices of the path between the two sources.
For each guess, it first constructs a tree X spanning those guessed vertices and |V(X)|k. Then,
we extend the tree X to select k-|V(X)| vertices by adding shortest paths to X. The performance
is ensured by showing that at least one of the constructed trees is a good approximation
solution and the approximation ratio approaches to 1 as the number of guessed vertices
increasing. In the remaining paragraphs of this section, let Y be the optimal tree of the 2-kSPST.
Also let P=(p1=s1,p2,p3,…, p=s2) be the path between the two sources on Y. Now we introduce
a partition of the vertices, which appeared in the previous work for the 2-MRCT problem Fig. 1
[27].
Define Vi, 1i, as the set of the vertices connected to P at pi and also let piVi. Let 0
be an integer parameter to be determined later. For 0i+1, define mi=pj in which j is the
minimal index such that1qj|Vq|(ik)/(+1). By definition, s1=m0 and s2= m+1. For 0i
, let Ui=a<j<b Vj and Pi be the path from pa and pb, in which pa=mi and pb=mi+1. Also let U=
V(Y) \0iUi and M={mi:0i+1}. Note that the above definitions include the case mi=mi+1.
In such a case, Pi contains only one vertex and Ui is empty. By the above definitions, the vertex
set V is partitioned into U,U0,U1,…,Usatisfying the following properties. The next lemma
comes from [27]. We state the result but the proof is omitted.
Lemma 5. vUidG(v,M)vUidY(v,P)+k/2(+1)w(Pi) for any 0i and vU dG(v,M)
vUdY(v,P).
Our algorithm tries to correctly guess m1,m2,…,m and constructs a tree X spanning these
vertices with the property that dX(v,s1)+dX(v,s2)w(P) for any vV(X) and |V(X)|k. Once such
a tree X has been constructed, find a shortest path forest F of G with multiple roots V(X). Let a
spanning tree T’be the union of the forest F and X. For the tree T’, we partition V\V(X) into
two vertices sets L1 and L2 such that |L1|= k-|V(X)|, |L2|= n-k and dG(l1,X)dG(l2,X) for any
10
For a metric graph and an integer, we try each possible path (s1,m1,m2,…,mi,s2) for ik-2.
There exists at least one such paths whose internal vertices are also on the path P of the optimal
tree in the same order. Since the graph is a metric graph, the length of the path is no more than
w(P). Connecting all other vertices to the path by a shortest path forest and select (k-|V(P)|)
vertices which have smaller shortest paths to M. We have a k-tree and it is a (+2)/(+1)
-approximation solution of the 2-kSPST. However, a problem is encountered when the input is
a general graph instead of a metric graph. Hence, we need to apply Lemma 2. For a guessed
i-tuple (m1,m2,…,mi) of vertices, i, by Lemma 2, we can construct the tree X passing s1, s2
and the i-tuple such that |V(X)|k and dX(v,s1)+ dX(v,s2)w(P) for any vV(X).
We list the PTAS below.
[Algorithm PTAS-2-kSPST]
Input: A graph G=(V,E,w) and s1,s2V, an integer0, and k>0.
Output: A k-tree T of G.
1. For each iand i-tuple (m1,m2,…,mi) of vertices do
1.1 Let m0=s1 and mi+1=s2.
1.2 For 0ji, let H=k then find all hops shortest path from mj to mj+1.
1.3 Find a tree X as in Lemma 2.
1.4 Finding a shortest path forest F of G with multiple roots V(X). Let the spanning tree
T’be the union of the forest F and X.
1.5 For the tree T’, partition V \V(X) into two vertices sets L1 and L2 such that |L1|=
k-|V(X)|, |L2|= n-k and dG(l1,X)dG(l2,X) for any l1L1 and l2L2.
1.6 Let the k-tree T be the subtree of T’induced by L1V(X).
End for
2. Output the k-tree T with minimum CR(T) among all constructed trees.
The result of this section is summarized in the following theorem.
Theorem 2. The 2-kSPST problem admits a PTAS. For any constant >0, a (1+)-
approximation algorithm of the 2-kSPST of a graph G can be found in polynomial time. The
12
on Y. As defined in Section 3, let M=(m0=s1,m1,m2,…m,m+1=s2) be a set of not necessarily
distinct vertices of V(P), which partitions V(Y) into U,U0,U1,…,Usuch that |Ui|k/(+1). The
definitions of Pi, Vi are also the same as in the previous section. Our algorithm tries to correctly
guess m1,m2,…m and constructs a tree X spanning these vertices with the property that
dX(v,s1)+dX(v,s2)w(P) for any vV(X) and |V(X)|k. Once such a tree X has been constructed,
find a shortest path forest F of G with multiple roots V(X). Let a spanning treeT’be the union
of the forest F and X. For the treeT’, we partition V \ V(X) into two vertices sets L1 and L2 such
that |L1|=k-|V(X)|, |L2|=n-k and dG(l1,X)dG(l2,X) for any l1L1 and l2L2. The k-tree T is the
subtree of T’induced by L1V(X). We output the k-tree T with minimum CS(T) among all
constructed trees. In the next lemma, we show that T is a (2+1/(+1))-approximation solution
of the 2-kMSST problem.
Lemma 8. The k-tree T is a (2+1/(+1))-approximation solution of the 2-kMSST problem.
Proof. By definition, the vertices m1,m2,…mpartition the vertex set V(Y) into (U,U0,U1,…,U)
and the subsets satisfy the properties in Lemma 5. Since dX(v,s1)+dX(v,s2)w(P) for any vV(X)
with |V(X)|k, we have
CS(T)=maxsS {vV(T) dT(v,s)}vV(T) dT(v,X)+kw(P)=vV(X)dT(v,X)+vL1 dT(v,X)+kw(P)
=v{L1V(Y)}dT(v,X) + 2v{L1\V(Y)}dT(v,X) +kw(P). (7)
For each v{L1\V(Y)}, there exists a unique vertex y{V(Y)\V(T)}L2 such that dG(v,X)
dG(y,X). The equation (7) will be
CS(T)v{V(Y)}dT(v,X)+kw(P). (8)
For vU, since dG(v,X)dG(v,M) and by Lemma 5, we have
vUdG(v,X)vU dG(v,M)vU dY(v,P). (9)
Similarly dG(v,X)dG(v,M) for vUi, and then by Lemma 5, we have
0ivUidG(v,X)0i(vUidY(v,P)+k/2(+1)w(Pi))0ivUidY(v,P)+ k/2(+1)w(P). (10)
By equations (8)-(10) and Lemma 7,
CS(T)vV(Y)dG(v,X)+kw(P)vUdY(v,P)+0ivUidY(v,P)+( k/2(+1))w(P)+kw(P)
=vV(Y)dY(v,P)+ (2+3)/2(+1) kw(P) CS(Y)+(+2)/(+1) CS(Y)=(2+1/(+1))CS(Y),
14
comes from [6, 7]. We state the result but the proof is omitted.
Lemma 11. For any vertex yV(Y), dG(y,M’) dY(y,P)+1/(+2}w(P).
Let M be the set vertices in the i-tuple and M’=M{s1,s2}, i. We show the result for the
2-kMVST problem in the next lemma.
Lemma 12. Let X be a tree spanning M’and dX(v,s1)+dX(v,s2)w(P) for any vV(X) with
|V(X)|k. Finding a shortest path forest F of G with multiple roots V(X). Let a spanning treeT’
be the union of the forest F and X. For the treeT’, we partition V \V(X) into two vertices sets L1
and L2 such that |L1|= k-|V(X)|, |L2|= n-k and dG(l1,X)dG(l2,X) for any l1L1 and l2L2. The
k-tree T, which is the subtree of T’induced by L1V(X), is a (1+2/(+2))-approximation
solution of the 2-kMVST problem.
Proof. For each vertex vV(T), since it is connected to X by a shortest path, there exists a
vertex xV(X) such that dT(v,s1)=dG(v,x)+dT(x,s1) and dT(v,s2)=dG(v,x)+dT(x,s2). Therefore
DT(v,S)=2dG(v,X)+dT(x,s1)+dT(x,s2)2dG(v,X)+w(P).
For each vertex v{V(T)\V(Y)}, there exists a unique vertex y{V(Y)\V(T)}L2 such that
dG(v,X)dG(y,X), and hence we have DT(v,S) 2dG(v,X)+w(P) 2dG(y,X) + w(P). Since M’
V(X), dG(y,X) dG(y,M’), and then by Lemma 11 we have dG(y,X) dY(y,P)+1/(+2)w(P).
Consequently we have, for each vertex vV(T), there exists a unique vertex yV(Y) such that
DT(v,S)  2dG(y,X)+w(P)  2dY(y,P)+(2/(+2))w(P)+w(P)=DY(y,S)+(2/(+2))w(P)
(1+2/+2)DY(y,S), since w(P) DY(y,S). Then by definition, CV(T)=maxvV(T){DT(v,S)} 
maxvV(Y){( 1+2/(+2)) DY(v,S)}= (1+2/(+2))CV(Y).
Theorem 6. For any constant >0, there is an algorithm finding a (1+)-approximation
solution of the 2-kMVST in O(k2/-1n2/) time.
Proof. By Lemma 12, there exists a (1+2/(+2))-approximation solution of the 2-kMVST for
any integer 0. Similar to Theorem 2, the time complexity is O(ki+1 n+2). For any >0, we
take=2/-2, and the result follows.
三、參考文獻
[1] M. Ahamad and M.H. Ammar, Performance characterization of quorum-consensus
16
Proceedings, IEEE Global Telecommunications Conference (Globecom 1996),
1069-1073.
[13] A.M. Farley, P. Fragopoulou, D.W. Krumme, A. Proskurowski and D. Richards,
Multi-source spanning tree problems, Journal of Interconnection Networks 1 (2000),
61-71.
[14] P. Fragopoulou, Approximation algorithms for the k-source multicast tree construction
Problem, Networks 47 (2006), 178-183.
[15] H. Garcia-Molina and D. Barbara, How to assign votes in a distributed system, Journal
of the ACM 32 (1985), 841-860.
[16] N. Garg, A 3-approximation for the minimum tree spanning k vertices, in: Proceedings,
37th IEEE Symposium on Foundations of Computer Science (FOCS 1996), 302-309.
[17] R. Guerin and A. Orda, Computing shortest paths for any number of hops, IEEE/ACM
Transactions on Networking 10 (2002), 613--620.
[18] T.C. Hu, Optimum communication spanning trees, SIAM Journal on Computing 3
(1974), 188-195.
[19] D.S. Johnson, J.K. Lenstra and A.H.G. Rinnooy Kan, The complexity of the network
design problem, Networks 8 (1978), 279-285.
[20] J.F. Kurose and K.W. Ross, Computer Networking: A Top-Down Approach Featuring the
Internet, 4th edition, Addison Wesley Publishers, 2007.
[21] C. Low, Optimal quorumcast routing, in: Proceedings, IEEE Global Telecommunications
Conference (Globecom 1998), 3013-3016.
[22] C.A.S. Oliveira and P.M. Pardalos, A survey of combinatorial optimization problems in
multicast routing, Computers and Operations Research 32 (2005), 1953-1981.
[23] R. Ravi, R. Sundaram, M.V. Marathe, S.S. Ravi and D.J. Rosenkrantz, Spanning trees
short or small, SIAM Journal on Discrete Mathematics 9 (1996), 178-200.
[24] B. Wang and J. Hou, An efficient QoS routing algorithm for quorumcast communication,
Computer Networks 44 (2004), 43-61.
出席國際學術會議心得報告 
 
 
計畫編號 NSC 97-2221-E-143 -002 
計畫名稱 R 個來源節點的最短路徑k-樹問題之研究 
出國人員姓名 
服務機關及職稱 
陳彥宏 
台東大學資管系 
會議時間地點 Suwon (Korea) 6 月 29 日~7 月 1 日2009 年 
會議名稱 The 2007 International Conference on Computational Science 
and Applications (ICCSA 2009), Lecture Notes in Computer 
Science (LNCS) 
發表論文題目 A Fast Approximation Algorithm for the k Partition-Distance 
Problem 
 
 
 
一、參加會議經過 
 
計畫主持人於2009年6月29日赴韓國參加 ICCSA 2009會議發表論文” A Fast Approximation 
Algorithm for the k Partition-Distance Problem” 並刊登於Lecture Notes in Computer Science 
(LNCS), Springer-Verlag, Vol. 5593, pp. 537-546 [EI]。此會議主要收錄的是一些計算機的理
論與應用做結合的論文，是理論兼實務的會議。計劃主持人於6月30日當地時間下午4:10發
表20分鐘的演講，深獲與會人士相當多的迴響與討論，也獲得在場的一些教授們的一些建
議。會議期間計畫主持人也與想當多的國際學者討論交換研究心得，並聽取了多場關於演
算法與生物資訊方面的演講，獲得相當多豐富的經驗。 
 
 
二、與會心得 
 
ICCSA 2009 這次會議在韓國的水源市舉行，在這個會議發表的論文會被Lecture Notes in 
Computer Science (LNCS)所收錄，此會議歷年的接受率都約在百分之二十幾左右，是非常
不錯的一個國際會議，同時也是被EI所引用，本篇論文能獲接受實屬不易。計畫主持人於
2004年、2006年與2007年都曾在此會議中發表論文過，所以認識不少國際學者與大會的審
查專家(Program Committees)。這次再次赴會能再跟這些學者進行互相交換彼此的研究心得
與目前的研究趨勢，實在是令計劃主持人這位新進研究人員在自己未來的研究上有不少的
收穫，同時此篇論文演講發表完後也被大會的一位委員（Program Committee）肯定建議把
論文投稿到 ICCSA 2009 Special Issues的演算法頂級的期刊Journal of Algorithms，期望能順
利被接受。也期望將來能有機會能再次參與ㄧ些知名的國際會議，拓展自己的學術視野。 
 
 
 
