行政院國家科學委員會專題研究計畫成果報告 
目標導向軟體衡量與分析(3/3) 
Goal-Driven Software Measurement and Analysis (3/3) 
計畫編號：NSC 96－2221－E－008－008 
執行期限：96 年 08 月 01 日至 97 年 07 月 31 日 
主 持 人：李允中 國立中央大學軟體研究中心 
參與人員：陳宗傑、鄧煥友、徐易成、盧建成。 
 
摘要 
軟體發展就如同其他工程領域一樣，需要一個度量的機制提供軟體發
展過程中各種活動與產出的回饋與評估。然而，如何有效地協助軟體發展
人員實現軟體度量的程序與討論分析之結果是目前實務上最為關心的問
題。而在所有以目標為導向的軟體度量方法中，GQM是最廣為人所熟知，
也是目前業界應用最為廣泛的方法之一。GQM經由定義明確的度量目標開
始，透過問題的引導，不斷地細化度量目標，以協助度量人員根據度量目
標產生相對應的度量指標。本計畫的研究目的在於提出一個以GQM為基
礎，透過Goal-driven use cases (GDUC)所提供的分析工具加以擴充GQM 的
方法，以提出一個目標導向之度量與分析方法 (我們稱之為G2QM)，同時
為了有效地應用在實際導入軟體度量活動於軟體開發組織中，我們根據原
本GQM以及我們所提供的延伸機制 (extending mechanism)，制定相關的工
作表格 (worksheet templates) ，以幫助相關人員制定度量程式，並且實作
一個以服務導向架構 (service-oriented architecture) 為基礎的度量服務工
具。 
 
關鍵詞：軟體度量、GQM、目標導向軟體度量分析、代理人、網路服務。 
 
 
一、簡介 
Victor R. Basili教授指出[15]，軟體發展就如同其他工程領域一樣，需
要一個度量的機制提供軟體發展過程中各種活動與產出的回饋 (feedback) 
與評估 (evaluation)。透過度量的機制，可以幫助發展者了解、控制、預測、
以及改善相關的流程、產出與資源。針對如何度量軟體發展過程中的產
出，許多研究人員提出許多的度量指標，協助度量軟體發展過程中的不同
階段以及不同產出，然而，軟體度量的目的不在於如何產生這些度量指
標，而在於為何需要這些指標，希望透過這些指標的度量，幫助我們了解
接受程度較高的計算程序之一即為由 Albrecht所提出的 FPA分析方法。 
 
當軟體可以經由度量而量化後就可以進一步衍生出許多的估計及預
測。例如 Jack E. Matson等人提出以回歸分析的方式來預估軟體的發展所
需的人員時間或是預算 [29]，A. Abran等人亦有類似的研究 [1]，他們試
著依據 Albrecht 的研究資料，以線性回歸分析的方式，企圖找出 UFPs 在
各個階段中與 Effort(人月)之間的關係。而 A. Gopal, M.S. Krishnan等人則
提出以是否在策階段有使用到量化的資訊，及持續改善效率等兩個因子來
預測軟體的發展是否能成功 [16]。 
 
為了有效率地管理軟體專案並且持續的改善軟體品質，目前普遍被接
受的方法為相關品質與資源模型  (context-specific quality and resource 
models)，並透過適用該軟體組織之軟體度量程式 (organization-specific 
measurement programs)，定量 (quantitative) 以及定性 (qualitative) 的方法
收集相關的資料加以分析與解讀 [4]。透過定義測量的相關實體和屬性的
操作，這樣的品質和資源的模型能夠被模型成各種有關品質或生產力方面
的評估 (例如: 可靠性、可用性、可維護性、成本等)加以定義與測量。 
 
度量 (measurement) 是一種藉由一組精確的規則指定數字或符號來
描述真實世界中實物的屬性的一種過程 [11]。 度量可以被用來描述軟體
流程，軟體產品以及資源的特性並讓使用者了解其特質。同時也可以測量
如某些軟體產品的特性，軟體流程的效力或者是測量使用在特定程式大小
的產品的資源量。測量在其他工程領域中扮演很重要的角色，譬如測量以
及有系統的編撰知識典範和指導方針為主的原則，這些原則轉換知識並且
收集練習的經驗[4][13] [39] 以及 [22]。使用測量在軟體工程研究中另外添
加一種經驗性元素：測量新的方法、技術以及工具來了解它們的好處。換
言之，針對軟體專案的發展流程，軟體度量提供一個絕佳的機制以協助專
案了解什麼會成功以及為什麼不成功 [7][13]。透過軟體度量可以幫助我們
得到以下之優點[21][34][5][6][25][9][35][11][32] [15] [18][19]: 
• 提高軟體發展流程的瞭解度。 
• 提高軟體發展流程的控制性。 
• 提高軟體發展流程的改善能力。 
• 提供較為精確的軟體成本與時程的預估。 
• 針對技術、工具或方法的更新，提供一個客觀的評估準則。 
• 對於軟體專案成本與時程的改變，提供較為精確的預估。 
• 透過提高產量與效率，降低軟體開發成本。 
• 透過提高產量與效率，降低軟體開發週期。 
• 透過高品質的軟體改善客戶的滿意度與信心度。 
這些由上而下的方法主要著重於度量指標與其度量目標之間的關
係，以建立共同方法 (generic methods) 的方式取代定義預先的度量指標 
(例如 GQM 方法)，由上而下地引導制定客制化的相關度量指標，然後由
下而上地根據度量目標分析並且解讀所收集到的資料。然而，這些方法根
據所測量的度量範圍、定義相關度量指標的指導原則以及他們的潛在使用
方式之不同而有不同。根據研究結果顯示 GQM 方法是以上三個方法中最
具彈性的方式 [38]。 
 
 
3.2 目標導向軟體度量 
目標導向軟體度量 (goal-oriented measurement) 是透過明確 (explicit) 
以及精確 (precisely)地定義目標，經由明確的目標來描述為何此度量指標
要被使用的一種度量方式。除此之外，必須定義清晰明確之模型，透過此
模型有效的支援問題的引導並且使之具備可追蹤性 (traceable) 以及不含
糊性 (unambiguous)。在目標導向度量上有三種模型，分別為:  描述性 
(descriptive)、評價性 (evaluation)、以及預測性 (predictive)。例如, 某一個
測量目標是要處理有關軟體生產力 (productivity) 方面的量化。 在這種情
況下, 一個描述性模型 (descriptive model) 可以幫助我們定義在這個度量
目標以及環境的背景 (context) 下，所謂產量的操作性 (operationally)，以
及在此模型下的假定 (assumptions)。另一種測量目標可能是為了決定一個
元件 (component) 是否具有適當的有品質水準 (level of quality)，例如，基
於它的複雜性 (complexity)，耦合力 (coupling)，以及內聚力 (cohesion)。 
在這種情況下，需要一個評價模型 (evaluation model)。最後, 為了在一個
獨立的變數上提供相依性 (dependent)的變數之預測值 (estimated value)，
例如, 以計畫之大小測量計畫之影響，團隊經驗和其他的有影響之項目特
性, 我們需要描述並建立一個預測模型 (predictive model)。目標導向度量
可以有助於促進結構化的討論，並且增進關於度量與改善目標的一致性。
如此將有助於在一個組織中定義一個廣泛可被接受的度量指標以及模
型，這也可以說是度量活動是否成功的至關緊要之先決條件。 
 
 
3.2.1目標導向軟體度量之流程 (Process for Goal-Oriented Measurement) 
一般而言，目標導向軟體度量主要有六個步驟，我們分別將之簡單描
述如下(詳細的步驟請參考 [20])： 
步驟一: 確認組織中的相關特性 (Characterize the environment)。確認軟體
組織中的計畫，哪些相關的特性 (characteristics) 需要被度量。典
型的問題包含︰發展哪種產品？使用什麼方法？在什麼計畫期
間遇到了主要問題等等，這些特性主要都可以被量化，即使以前
 圖 1： The four phases of GQM 
 
在組織中被建立在專家的知識上的 GQM 樹狀目標，問題以及度量指
標 (見圖 2)[6][27]。知識累積的技術被用來記錄經由多年經驗所建立的工
程內含模型。這些內含模型給了度量程式珍貴的輸入，並且將會比目前可
用的精確流程模式更加重要，也會獲得預期的度量結果，也就是所謂的專
家的「假設」。然後實際的資料可以被用來與起初假設做比較，並且鑑定
錯誤起因(flaws)以及學習 casual關係，即使 GQM方法常被視為度量產物、
資源 [9][42]以及[44]。 
 
3.2.3 GQM軟體度量流程 (GQM processes) 
GQM 流程區分成幾個階段。在預先學習之後，下一個階段是定義一
套度量品質目標。在目標已設定之後，儘可能完整地衍生出定義目標的問
題。具體說明度量指標組成下一個步驟，而這些度量指標是為了解答定義
問題以及產品及流程對精確度量品質目標的一致性所需而收集的。GQM
計畫中敘述定義目標、問題以及度量指標。GQM計畫的三個層次(目標、
問題以及度量指標)與下列三個層面相符合 ( 圖 2): 
P
la
n
n
in
g
 
Goal 
Question 
Metric 
Goal 
attainment 
Answer 
Measurement 
Collected Data 
Data Collection 
Definition Interpretation 
Planning 
外，有關品質焦點屬性的效能以及變數影響品質焦點屬性效能之假設可被
證明。基於這份資料，在每一個度量目標下，一套問題，度量指標以及模
型就可以被定義 (詳細描述請參考 [8] 以及 [9])。當相關的度量計畫、度
量指標被描述以及定義之後，如何收集資料的機制就需要被建立。這些收
集資料的機制必須被描述在軟體度量計畫同時必須與相關的資料收集表
格建立關聯。之後，在軟體專案進行當中，便可以根據軟體度量計畫進行
相關資料的收集以及驗證這些被收集之資料的正確性與完整性。 
 
這些資料將在審視會議 (feedback sessions) 中進行分析與討論。參與
審視會議的人員包含相關的計畫發展人員以及度量人員 (measurement 
team)。這個會議提供 GQM在分析與解讀所收集的資料階段的基礎機制。
審視會議的主要目標為討論軟體度量計畫的初步研究發現和結果，並由
GQM相關專家根據由計畫相關人員所收集得到之資料進行解讀。 
 
當軟體發展專案結束之後，所有在這些階段所得到的相關資訊都需要
被整理、審視並且儲存在資料庫中，以做為下次的擷取與再利用。關於實
際應用 GQM的指導原則、相關範例以及步驟的進一步資料可以參考 [42]。 
 
3.2.4 GQM相關工具 (GQM Tools) 
以 GQM 為基礎的度量程式牽涉各種工作流程，因此，若有一套工具
可以支援這些工作流程，將可以使得 GQM 的度量過程更為有效率的執
行。一個自動化的工具可以減低資料收集時的工作負擔，同時可以有效的
進行資料分析與解讀 [28]。德國 Kaiserslautern大學在進行 ESPRIT Project 
PERFECT以及義大利的Milan相關研究人員針對GQM的工具曾經做了一
個簡單的考察，他們針對 GQM 的不同階段定義並且將這些工具分類 
[17]，這些工具所包含的相關活動包含: 
發展 GQM的樣板表格 (Developing a GQM Abstraction Sheet) 
發展 GQM計畫 (Developing a GQM Plan) 
收集資料 (Collecting Data) 
儲存資料 (Storing Data in the metric base) 
驗證資料 (Validating Data) 
準備資料 (Preparing Data) 
解讀資料 (Interpreting Data) 
準備報告資料 (Preparing Presentation Material) 
 
 
 
 
合而成，這些準則稱之為度量準則 (measurement principles)。 
 PSM 將軟體度量流程整合進入軟體與系統支援流程當中。這些度
量準則會因應不同的軟體計畫進行調適與修改，以保證所要度量
的因素不只包括成本、時程等，同時也提供有意義與有用的結果。 
 PSM定義一個以資訊為基礎 (information-driven) 的分析方法以幫
助專案經理進行軟體專案的決策。PSM 的分析方法結合不同的度
量指標以及非量化的軟體程式資料來確認與評估資訊的需求，包
含議題 (issues)、風險 (risks) 與問題 (problems)。 
 PSM提供一個企業階層管理的基礎。PSM是被設計用來幫助將軟
體度量放置於實際的軟體專案執行階段，因此，可以提供相關資
料以供處理企業階層的效率 (performance)、流程改善 (process 
improvement)、企業相關問題 (business-related questions)，同時 PSM
亦同時提供資訊技術 (information technology) 所需的度量需求。 
 
 
三、G2QM方法 
 
在第一年度，我們發展出一個利用GDUC擴充GQM的分析方法，透過GDUC
所提供的目標結構 (goal structure)、目標導向使用案例 (goal-driven use cases)、
以及目標互動 (goals interaction) 與目標階層 (goals hierarchy) 的機制，幫助引導
出相關的問題以產生度量指標與探討目標之間的優先性。並制訂目標導向軟體度
量與分析的相關步驟，描述目標導向軟體度量之各階段所使用的流程 
(processes)、方法 (methods) 與使用之工具 (tools); 
 
圖 3: G2QM方法 
 圖 5: 度量目標架構 
 
3.2 利用目標導向使用案例引導產生度量之實體與屬性 
我們利用目標導向使用案例的方法 (goal-driven use cases; GDUC)，針
對所定義的目標，透過一個使用案例的方式加以描述，一個使用案例可以
透過一個主要的劇本 (basic course) 以及多個選擇劇本 (alternative courses) 
加以描述，同時這些劇本又可以進一步引導出子目標 (sub-goal)，如此不
斷的重複，直到這些劇本可以透過簡單的動作來完成。透過這樣的細化方
式，我們可以將高抽象化的目標細化為可操作的動作，同時，由於劇本中
會描述需要使用的實體以及相關的屬性，因此這些實體與屬性便可以成為
欲度量之對象 (objects)。 
我們透過劇本與目標之間的細化，來定義需要被度量的實體與相關的
屬性，透過這些實體與屬性定義相關的度量指標。圖 6描述目標、使用案
例、劇本、以及度量指標之間的關係。首先，度量目標透過問題的方式加
以操作化 (operationalize)，由於在GDUC中，目標是透過使用案例來實現 
(realization)，因此我們可以利用使用案例來實現某一個 (或某一組) 相關
問題，同時這些使用案例可以利用相關的劇本加以描述，劇本內透過一連
串的步驟描述每個步驟所使用的動作以及所需使用的資料，而這些動作與
資料又可歸納成為新的目標，並且產生新的問題，如此反覆不斷細化，直
到所描述的劇本可以利用一個或一組簡單動作 (simple activity) 來完成為
止。 
 
同的工作表格 (Worksheet Template)，透過這些工作表格的協助，幫助使
用者可以將G2QM方法實際地應用於度量程序之中，同時，經由正規化地
描述 (formal representation) 這些工作表格，可以使得軟體系統自動化的處
理相關的工作表格，增進軟體度量程序的效率。 
在軟體度量領域中，為了有效的應用度量方法於實際的軟體發展組織
與軟體專案中，必須提供相關的工具以供使用者進行度量程序的相關活
動，這些工具包含一些工作表格、簡報圖表、資料庫系統、統計分析方法
等等，這些工具我們稱之為度量支援工具 (measurement support system; 
MSS)。其中，又以工作表格對於協助使用者明確定義相關資訊 (例如目標
的描述、問題的描述、度量目標的描述等等)具有重要的幫助以及引導使用
者進行相關的程序，因此，如何設計相關的工作表格，將是如何實際應用
G2QM方法的優先事項。 
此外，由於許多的度量程序與度量領域具有一定的相關性，尤其是在
相同或相似的專案計畫執行中，存有許多相似的度量目標與問題，因此，
如何透過再利用 (reuse) 的技術，將這些相關的度量目標、問題與度量指
標進行分類、儲存與擷取，更是目前軟體度量領域所沒有解決的議題。基
於以上的討論，本年度的主要目標在於根據上年度所發展的G2QM方法，
制訂相關的工作表格，使其得以實際應用於軟體度量的活動之中，同時透
過樣式 (patterns) 與再利用的技術，提高工作表格的品質，並且可以儲存
相關的經驗，以縮短軟體度量的程序，並確保其品質。 
 
步驟一: 根據G2QM方法之不同階段與目標，制訂相關的工作表格 
根據G2QM方法，我們制訂的工作表格包含以下幾個： 
 度量目標工作表 (measurement goal template) 
 
 
 目標結構工作表 (goal structure template) 
特殊度量指標欄位。在此步驟中，我們將透過執行實際的軟體專案來制訂
與修改相關的工作表格，使之符合並且容易地於實際軟體開發過程中使
用。 
 
步驟二:利用樣式的技術提高工作表格與度量指標的再利用性 (Apply the 
patterns for enhancing the reusability of worksheet template and metrics) 
透過再利用技術的輔助，建立具有品質的工作表格同時透過這些工作
表格對應相關的問題與度量指標，為此步驟的重點。例如對於相同或相似
的專案領域，通常會有相關的度量目標、問題以及度量指標，而這些相關
之資訊會隨著專案進行數量的累積，經由分析，得到分類 (classification) 的
依據，因此，工作表格應該可以記錄並且因應這些資訊，提供相關的再利
用建議，以縮短度量程序的進行，同時兼顧度量程序的品質。 
 
 利用樣式 (patterns) 的輔助，提高再利用的機制。針對問題的種
類與領域，透過分類的技巧，建立目標、問題與度量指標的相關
樣式結構 (pattern structure)，這些樣式將成為可再利用的元件，包
含於工作表格之中，以提高再利用之機制，同時可以累積前人的
經驗，提高品質的要求。 
 建立度量樣式的儲存與檢索機制。針對度量樣式的結構，制訂相
關的屬性、以及權重，透過相似度比對的技術，建立度量樣式的
儲存與檢索機制，以重用相似的度量樣式。 
 
步驟三 : 透過XML正規化地描述工作表格與度量指標  (Use XML to 
formally represent the worksheet template and metrics) 
在此步驟中，我們利用XML技術的方式，定義所制訂之工作表格相關
的XML Schema，以正規化地描述這些工作表格。透過以XML為基礎的描
述方式，可以提供以下幾個好處： 
 透過XML技術的協助，可以容易地利用電腦程式處理表格中的相
關資訊，  並且可以透過XML所提供的表現機制  (rendering 
mechanism)，針對相同的資料、呈現不同的表示方式，這種動態
呈現的機制，十分適合度量指標的呈現。 
 透過XML所提供的標準格式，可以當作共同交換格式 (exchange 
format)，方便地在不同程式(或服務)中進行資料的交換，同時可
以整合不同服務，  使之透過資料進行服務整合  (service 
composition)，提供基礎與進階的資料分析與解讀之功能。 
 
 
五、軟體度量系統實作 
U002 V 會員登入登出 
U003 V 修改會員資料 
U004 V 新增GQM plan 
U005 V 修改GQM plan 
U006 V 刪除GQM plan 
U007 V 顯示GQM plan 
U008 V 搜索GQM plan 
U009 V 友善的使用者介面 
表(二)：使用者介面子系統 
 
軟體度量子系統：用GQM的方法來做軟體度量。 
 
編號 完成 需求描述 
G001 V 能得到Goal 
G002 V 能得到Sheet 
G003 V 能得到Question 
G004 V 能得到Metric 
G005 V 能由Goal, (Sheet), Question, Metric做出GQM plan 
表(三)：軟體度量子系統 
 
訊息流向代理人子系統：根據使用者的需求和輸入訊息的類型，自動的將
訊息導向後端最適合的網際服務。 
 
編號 完成 需求描述 
M001 V Agent能正確理解使用者的需求 
M002 V Agent能正確處理訊息的流向 
M003 V Agent能利用Ontology，以對訊息做最佳處理 
表(四)：訊息流向代理人子系統 
 
資料庫存取網際服務子系統：將使用者的訊息存入資料庫或從資料庫中取
出。 
 
編號 完成 需求描述 
D001 V 能將訊息正確存入資料庫 
D002 V 能修改資料庫內儲存的訊息 
D003 V 能從資料庫搜索出所需資料 
表(五)：資料庫存取網際服務子系統 
 
本年度計畫之部分成果正整理為英文論文形式預計投稿於ITS期刊。 
 
 
八、參考資料 
 
[1] A. Abran and P.N. Robillard. Function points analysis: an empirical study 
of its measurement processes. IEEE Transactions on Software 
Engineering, (12), Dec. 1996. 
[2] A.J. Albrecht. Measuring application development productivity. 
Proceedings of the Join SHARE/GUIDE/IBM Application Development 
System, October 1979. 
[3] A.J. Albrecht and J.E. Gaffney. Software function, source lines of code, 
and development effort prediction: a software science validation. EEE 
Transactions on Software Engineering, (6):639--648, November 1983. 
[4] V.R. Basili, C. Caldiera, and H.D. Rombach. Experience factory. in J.J. 
Marciniak (ed.), Encyclopedia of Software Engineering, Vol. 1, John Wiley 
& Sons, 1994. 
[5] V.R. Basili, C. Caldiera, and H.D. Rombach. Goal/Question/Metric 
paradigm. J.J. Marciniak, ed., Vol. 1, John Wiley, 1994. 
[6] V.R. Basili and H.D. Rombach. The tame project: towards improvement 
oriented software environments. IEEE Transaction on Software 
Engineering, (6):758--773, June, 1988. 
[7] V.R. Basili, R.W. Selby, and D.H. Huthchens. Experimentation in software 
engineering. IEEE Transactions on Software Engineering, (7):733--743, 
July, 1986. 
[8] V.R. Basili and D.M. Weiss. A methodology for collecting valid software 
engineering data. IEEE Transactions on Software Engineering, 
(6):728--738, 1984. 
[9] L.C. Briand, L.C. Differding, and H.D. Rombach. Practical guidelines for 
measurement based process improvement, 1996. 
[10] N.E. Fenton. Software metrics: theory, tools and validation. Software 
Engineering Journal , January 1990. 
[11] N.E. Fenton and S.L. Pfleeger. Software Metrics: A rigorous and practical 
Quality Progress, October 1983. 
[25] F. van Latum, M. Oivo, B. Hoisl, and G. Ruhe. No improvement without 
feedback: experiences from goal oriented measurement at Schlumberger. 
In Proceedings of the 5th European Workshop on Software Process 
Technology (EWSPT96), Nancy, France, Lecture Notes in Computer 
Science 1149, pages 167--182. Springer Verlag, October 1996. 
[26] J. Lee and N.L Xue. July/August 1999. Analyzing user requirements by 
use cases: A goal-driven approach. IEEE Software, 16 (4):92-101. 
[27] Latum, Solingen, Oivo, Rombach, Hoisl, and Ruhe. Adopting GQM-based 
measurement in an industrial environment. IEEE Software, Jan/Feb 1998. 
[28] L. Lavazza. Providing automated support for the GQM measurement 
process. IEEE Software, pages 56--62, May/June 2000. 
[29] J.E. Matson, B.E. Barrett, and J.M. Mellichamp. Software development 
cost estimation using function points. IEEE Transactions on Software 
Engineering, (4), April 1994. 
[30] J. McGarry. Practical software measurement: objective information for 
decision makers. Addison-Wesley, Boston, MA, 2002. 
[31] J. McCall, P. Richards, and G. Walters. Factors in software quality. In 
RADC TR-77-369, 1977. Vols I,II,III, US Rome Air Development Center 
Reports NTIS AD/A-049 014, 015, 055, 1997 
[32] K.H. Moller and D.J. Paulisch. Software metrics: a practitioner's guide to 
improved product development Prentice-Hall, 1993. 
[33] G.. Murine. Applying software quality metrics in the requirements analysis 
phase of a distributive system. In Proceedings of the Minnowbrook 
Workshop. New York, 1990. 
[34] D.J. Paulisch and A.D. Carleton. Case studies of software process 
improvement measurement. IEEE Computer, pages 50--57, September, 
1994. 
[35] S.L. Pfleeger. Software engineering: the production of quality software 
McMillan Publishing, New York, 1991. 
[36] S. Pfleeger and D. Rombach. Measurement based process improvement. 
IEEE Software, 1994. 
附錄 A : 系統安裝指引與使用指南 
 
A.1 系統軟硬體需求 
 
項目 分類 備註 
Windows主機 硬體  
網際網路 硬體 保持24小時連線 
Java SE 軟體  
Tomcat Server 軟體  
MySQL 軟體  
Server端軟硬體需求 
 
項目 分類 
Windows或Linux主機 硬體 
網際網路 硬體 
Java SE  軟體 
Browser 軟體 
Client端軟硬體需求 
 
 處理 http的 Request與 Response：Java Server Pages 
 處理 XML：利用 JAXP (可以支援 XML Schema) 
 處理 SOAP Messaging：以 SAJJ為主，JAXM為輔 
 與 UDDI或 ebXML Registry 溝通：用 JXAR 
 處理 RPC：JAX-RPC 
 
Java API for XML Processing (JAXP)： 
    JAXP主要的功能為提供 XML的處理能力，支援 SAX、DOM與 XSLT等標
準，使得應用程式可以從 XML Parser與 XSLT Processor之中獨立出來。 
 
Java API for XML Messaging (JAXM)： 
    此一工具的主要功用為以類似 DOM的方法，組裝 SOAP Messaging，可
以讓開發者專心於建立、接收、傳送與拆解 SOAP Message，不必再去處理
XML 底層的通訊。 
 
Java API for XML-Based RPC (JAX-RPC)： 
    這是一個處理底層 RPC 通訊的工具，支援 HTTP、SOAP、以及 WSDL，
檔案如圖 8 所示。 
 
 
圖 8: j2sdk-1.4.2_05 及其文件檔 
 
    安裝步驟非常簡單，直接按滑鼠兩下即可安裝完成，進行一些選項
的選擇後，我們選擇安裝的目錄為 C:\j2sdk1.4.2_05，安裝程式就會幫
您將 Java 2 SDK 1.4.2_05 安裝完畢，安裝過程如圖 9 所示。 
 
 
圖 9: J2SE 安裝過程 
 圖 11：建立「JAVA_HOME」變數 
 
 
圖 12：修改「Path」變數 
 
 
圖 15：Java 是否安裝成功測試 
 
A.2.2 Step 2：安裝Java 2 SDK 1.4.2 Documentation 
    接下來，JDK 的文件檔，解壓縮在 C:\j2sdk1.4.2_05 下，解壓縮出
來的為一個 Docs 目錄，存在於 C:\j2sdk1.4.2_05 下，如圖 16、圖 17
所示。 
 
 
圖 16：安裝文件檔 
 
_4.html 下載，下載回來的檔案是一個 zip壓縮檔，如圖 18 所示。 
 
 
圖 18：Tomcat 5.0 for Java WSDP 1.4 檔案名稱 
 
    安裝 Tomcat 5.0 for Java WSDP 1.4 的方式非常簡單，在 Windows 
XP Profession 版本的系統中，只要將其解壓縮，解壓縮後執行即可。
進行至此步驟時，筆者建議將所有的 java 相關程式統一於在一個資料
夾下存取(在本文中是預設在 C：\java\ 下)，往後系統電腦位置變更
時，只需要移動檔案以及設定環境變數，就可以馬上移植於另外一台電
腦中。另外，在 http://java.sun.com/webservices/containers 的網
頁中，也提供本文上述之其它 Web Container，讓大家下載。 
    安裝好的 Tomcat 5.0 for Java WSDP 1.4，其執行方式仍未跟
Eclipse整合，故較為原始，為一原始執行檔，如要啟動 Tomcat伺服器，
需至其位置目錄下之 bin 目錄中，選擇 startup.bat，點擊此執行檔二
下，在 Dos視窗中即開始執行相關程式。此時我們仔細的看命令列中的
最後一行，如果最後一行顯示的是：「Server startup in 6328 ms」，
即代表 Tomcat 伺服器啟動完成，Tomcat 伺服器預設的 HTTP port 為
8080，此時我們可以於瀏覽器中鍵入：「http://localhost:8080」，即
代表本機的 HTTP 服務已經啟動。如圖 19、圖 20、圖 21 所示： 
 
 
圖 21：執行 Tomcat 後之 HTTP 服務畫面首頁 
 
A.2.5 Step 5：安裝JWSDP 1.4 
    如同本文開頭的說明，JWSDP 是 Java Web Services相關工具的集
合 ， 其 下 載 位 置 位 於
http://java.sun.com/webservices/downloads/1.4/。下載回來的檔案
為一安裝執行檔，點擊兩下之後即會進入其安裝畫面，按下一步來到授
權合約畫面，選擇同意後(APPROVE)按下一步來到選擇 SDK 畫面。在選
擇 SDK畫面中，我們可以選擇現有的 SDK 選項，或是其他版本的 SDK。
如果系統沒有找到其他的 SDK 版本位置的話，可以點選 Browse 按鈕，
自行去指定另一版本的 SDK 位置。選擇完畢後，按下一步來到 Web 
Container 選擇畫面，如圖 22、圖 23、圖 24、圖 25 所示。 
 
 圖 24：JWSDP1.4 安裝過程圖三—選擇 SDK 
 
 
圖 25：JWSDP1.4 安裝過程圖四—Web Container 選擇 
 
    接下來我們選擇安裝 JWSDP1.4 的位置，我們選擇在 C：
\java\jwsdp-1.4 下，按下一步來到安裝項目選擇畫面，畫面中有
Typical與自訂兩個選項，在本文的實作例子中，選擇自訂，按下一步
來到安裝項目選擇細項畫面。在安裝項目選擇細項畫面中，在本文的實
作例子中，我們是選擇全部的安裝細項。如圖 28、圖 29、圖 30 所示： 
 
 
圖 28：JWSDP1.4 安裝過程圖七—選擇安裝位置 
 
    選擇完安裝細項後，接下來設定 Tomcat 的帳號與密碼。在本文的
實作例子上，帳號設定為 admin，密碼則設定為 password。按下一步，
來到 HTTP Proxy Server設定畫面。如果讀者自行練習的網路設定中，
需要設定 Proxy Server，可以在此頁中設定。如圖 31、圖 32 所示： 
 
 
圖 31：JWSDP1.4 安裝過程圖十—設定 Tomcat 帳號與密碼 
 
 
圖 34：JWSDP1.4 安裝過程圖十三—安裝進行過程 
 
    安裝進行完成後，安裝畫面會顯示安裝已完成，如圖 35 所示。 
 
 
圖 35：JWSDP1.4 安裝過程圖十四—安裝完成資訊 
 圖 37：JWSDP1.4 安裝過程圖十六—文件檔位置 
 
    安裝好 JWSDP1.4 之後，執行 Tomcat已經可以由開始的程式集中執
行，與只安裝 Tomcat 5.0 for Java WSDP 1.4 比較，是方便許多，但
是我們的 Java 開發工具為 Eclipse，因此，如果可以在 Eclipse 中，邊
開發時即可直接開啟與關閉 Tomcat，將更方便。SYSDEO 這一家公司開
發了一個 plug-in 的套件，叫做 Sysdeo Eclipse Tomcat Launcher，該
套件的功能在於直接幫我們在 Eclipse 中做好執行 Tomcat 的相關功能
按鈕，方便我們開發 Web 應用程式時，執行與關閉 Tomcat 伺服器，其
優點在於它可以自動在 Tomcat 的 server.xml 中，新增 Context，缺點
為目前的版本仍無建立 web.xml 的精靈，以及不支援 EJB應用程式，該
套 件 下 載 網 址 在
http://www.sysdeo.com/eclipse/tomcatPlugin.html ，在本文的實作
範例中，下載的是 3.0 版，檔案名稱是 tomcatPluginV3.zip，此檔案是
屬於 Eclipse 的 plug-in，將其安裝在 Eclipse 中，安裝此 plug-in 完
畢後，開啟 Eclipse(如已經開啟，請重新啟動 Eclipse)，針對此 plug-in
進行設定。 
    在 Eclipse 中安裝 plug-in 的方式，是將其壓縮檔解壓縮在其目錄
下的 plugins 目錄中(eclipse\plugins\)，以 Sysdeo Eclipse Tomcat 
Launcher 為 例 ， 就 是 將 tomcatPluginV3.zip 解 壓 縮 在 路 徑
C:\java\eclipse\plugins(本文的實作範例，讀者實作時會因為讀者安
 圖 39：Sysdeo Eclipse Tomcat Launcher設定 2 
 
    接下來，選擇 Window→Preferences，在左方的樹狀目錄的最下方，
選擇 Tomcat，在 Tomcat version 中，選 Version 5.x，Tomcat home
則以 Browse 方式選擇 C:\java\tomcat-jwsdp-1.4(本文的實作範例位
置，讀者實作時會因為讀者安裝的位置不同而有所更動)，在下方的
Context declaration mode 中，此部分的功能為我們可以自行選擇
Context declaration 的模式，Sysdeo Eclipse Tomcat Launcher 會自
動將 Context 的內容新增在 Tomcat 的 server.xml 中(第一種模式，也
就是第一個選項)，或是另外寫成 Context files(第二種模式，也就是
第二個選項)，在本文的實作範例中，我們選第二個選項 Context 
files，而在 Context files 下的 Context directory位置則為預設(此
部分的目錄位置會隨 Tomcat home 的設定而更動)。樹狀選單中，Tomcat
下還有四個子選項，在 Advanced 中，Tomcat base 以 Browse 方式選擇
C:\java\tomcat-jwsdp-1.4(本文的實作範例位置，讀者實作時會因為
讀者安裝的位置不同而有所更動)。在 Tomcat Manager App 中，設定
ManagerApp username與 ManagerApp password(在本文的實作範例中，
ManagerApp username 為 admin，ManagerApp password 為 password)。
此時，有關 Sysdeo Eclipse Tomcat Launcher 在 Eclipse 中的設定大
致完成，有興趣的讀者可以自行研究在本文中未提及的其它設定。如圖 
 
圖 41：Sysdeo Eclipse Tomcat Launcher設定 4 
 
 
圖 42：Sysdeo Eclipse Tomcat Launcher設定 5 
    Axis 是一個以 Java 撰寫而成的 SOAP Engine，但是功能又大到超
過一個 SOAP Engine 的功能，也通過了 JAX-RPC與 SAAJ 的 Technology 
Compatibility Test，因此，Axis 的功用，以 Web Services 的觀點來
看，就是可以將 Java 的應用程式透過 Axis 的轉譯，變成 Web Services
中的 WSDL 描述，當然也可以將 WSDL 轉譯成 Java 程式碼，其部署 Web 
Services 的方式有兩種，第一種是直接將原始的 Java 程式部署到 Axis
的 Web App 目錄中，第二種方式是透過 Web Services Deployment 
Descriptor(WSDD)部署。 
    Axis 是 Apache SOAP引擎的第三代工具(Apache SOAP 是由 IBM 的
SOAP4J專案演化而來)。在當時 Apche SOAP第二版的設計者在討論如何
將該引擎設計的更有彈性、更容易安裝、而且可以同時處理 SOAP 和即
將被 W3C通過的 XML傳輸標準(也就是後來的 WSDL)。經過一連串的討論
和提案，最後開始了 Axis 這個專案。Axis 最主要的價值就在提供數種
簡單的模式協助程式設計師開發他們的網路服務。包括如下： 
1. 最簡單的模式，直接可以指定將某個物件以網路服務的方式發佈。
Axis 會自動產生相關的程式碼和產生 WSDL。程式設計師不需要去瞭
解詳細的網路服務定義即可撰寫網路服務。 
2. 由 WSDL產生 Java 程式碼。Axis 會產生此網路服務所需使用到的大
部分程式碼，程式設計師只要針對所提供的服務撰寫關鍵的程式碼
(例如企業規則、和後端系統的連接)即可。 
3. 由 Java 程式碼產生 WSDL。藉由提供 Java類別或是介面，可產生出
WSDL定義檔。在經由此 WSDL產生必要的程式碼，以建構網路服務。 
    除上述所介紹之功能外，仍有許多其它功能，有興趣的讀者可以在
http://www.xml.org.tw/XMLTool/display.asp?ID=20 以 及
http://ws.apache.org/axis/ 中找尋到更多有關於 Axis 的相關資料。 
    目前在 apache.org 的 Axis Project 中，較為穩定的版本為
Axis1.1，因此我們至 http://ws.apache.org/axis/下載 Axis1.1，由
於此為 Java寫成的程式檔，因此我們下載其 source 檔，下載回來的檔
案名稱為 axis-1_1-src.zip，將其解壓縮在 C:\java 目錄下，即完成
Axis1.1 的安裝。為使在 Eclipse 中可以使用 Axis1.1，因此我們開啟
Eclipse，在 Eclipse 中定義 Axis1.1 Library。 
    首先，選擇 Window→Preferences，在樹狀目錄中，選擇 Java，再
選擇其下的 Build Path，再選擇其下的 User Library，此時，右方的
的欄位中會出現 User Libraries 的畫面，剛安裝完 Eclipse 時，這部
分是沒有東西的，因此我們選擇New按鈕按下，此時會跳出一個New User 
Library視窗，在 User library name 中，填入 Axis 1.1，然後按下 OK
按鈕，如圖 45 所示。 
 
個 JAR檔位置的設定。 
 
 
圖 46：新增 User library 步驟 2 
 
 
圖 48：新增 User library 步驟 4 
 
A.2.7 Step 7：安裝XML Security 1.1 
    XML Security Project 主要是一個提供 XML 的安全標準格式的計
畫，並符合 W3C 的標準，分別有下列內容： 
 XML-Signature Syntax and Processing( 網 址 ：
http://www.w3.org/Signature/) 
 XML Encryption Syntax and Processing( 網 址 ：
http://www.w3.org/Encryption/2001/)  
    其網址為 http://xml.apache.org/security/index.html，並製作
了 Java 版本與 C++版本的 Library，Java 版本提供下載網址為 
http://xml.apache.org/security/dist/java-library/，下載回來的
檔 案 有 兩 個 ， 分 別 為 xml-security-bin-1_1_0.zip 與
xml-security-src-1_1_0.zip。兩個檔案分別也解壓縮到 C:\java 下，
解壓縮完的檔案目錄為 C:\java\xml-security-1_1_0(本文的實作範
例，讀者實作時會因為讀者安裝的位置不同而有所更動)，同樣的方式，
在 Eclipse 中定義 XML Security 1.1 的 Library，定義的方式和定義
 
圖 49：在 Eclipse 中利用 Axis建立 Web Services 服務建置步驟 1 
 
    按下 Next 按鈕，在 Context name部分，我們也不予以更動，仍使
用 axisdemo 為我們的 context name。接下來按下 Finish 按鈕，即完成
此 Project 的初步設定，此時在 Eclipse 主畫面的左方(本文的實作範
例預設，在 Eclipse 中，各項選項的視窗位置，皆可因使用者的喜好而
有所調整 )Package Explorer 視窗中，我們就可以看到多出一個
axisdemo的選項，按下滑鼠右鍵進入彈出式視窗的最下方的Properties
選項，在其左方的樹狀目錄下選擇 Java Build Path 選項後，按下其右
方的 Java Build Path畫面中的 Libraries標籤，此時下方的欄位會出
現許多列的 Library 名稱，按下其右方的 Add Library…按鈕，會出現
Add Library視窗，選擇其視窗下方欄位的 User Library，即可選擇我
們之前在 Eclipse 中自行定義出的 Library，如圖 50 所示。 
 
 
圖 51：Apache-AXIS 服務首頁 
 
 
圖 52：Apache-AXIS驗證成功頁 
 
 
圖 53：首頁 
 
 
圖 55：註冊畫面二 
 
 
圖 56：會員頁畫面 
 
