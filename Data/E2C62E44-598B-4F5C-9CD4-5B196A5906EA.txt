          第一章 計劃緣由與目的 
近年來由於科技進步，產品間常會互相整合，讓功能性大增，而嵌入式系統
的進步更是有目共睹的。本論文的影像黑盒子是 ARM 嵌入式系統為主體，加上 USB
攝影機及隨身碟，結合目前在台灣的使用率已相當普及的 GPRS 行動通訊，達到圖
像傳遞的功能。 
本論文的整體系統架構如圖 1-1 所示，包括影像黑盒子(Video Black-box)、
GPRS 網路、網際網路(Internet)、伺服端電腦(Sever Computer)和俱有 VNC 瀏覽
程式的客戶端電腦(VNC Clients)。 
 
圖 1-1 整體系統架構 
如圖 1-2 所示，影像黑盒子包括 ARM9 嵌入式系統、紅外線感測器、USB 分線
器、USB 介面攝影機、USB 介面隨身碟和 GPRS 模組。紅外線感測器所能感測的最
 2
系統的原理，和 GPRS 的網路架構。最後將說明 GPRS 的特性，包含 GPRS 的速度及
GPRS 及 GSM 的比較。 
在第三章中將介紹 ARM9 嵌入式系統。嵌入式系統如同一部簡易的個人電腦，
除了硬體架構外，還需要軟體支援。這裡我們將介紹嵌入式系統、使用 Linux 作
業系統的優點及本論文使用的 ARM9 嵌入式系統的核心 SAMSUNG S3C2410。 
 第四章中我們對整個程式環境進行瞭解。從發展版與電腦連線，到為發展版
安裝 Linux 作業系統，包含安裝載入程式 vivi bootload、安裝 linux 內核、安裝
根系統檔案，到最後在個人電腦中安裝環境開發環境。 
 第五章我們將說明 ARM9 端與 server 端程式設計。由於 ARM9 嵌入式系統的作
業系統，我們是使用開放原始碼、高穩定度的 Linux，因此可依我們的需要，將
USB 攝影機所取得的圖像，並將透過 GPRS，傳送到固定 IP 位址的 server 端電腦
上；在 server 電腦上接收圖像，並儲存在以當時時間（年/月/日）來命名的資料
夾中。 
在第六章中我們將進行實際影像黑盒子的製作。ARM9 嵌入式系統開機時自動
透過GPRS網路與網際網路(Internet)與伺服端電腦取得正確的時間(年/月/日/時
/分/秒)。當紅外線感測器感測到人體/物體移動時，USB 介面攝影機自動拍攝影
像，拍攝速度最快以每秒 5張的 JPEG 檔案(320 × 240)輸出。這些 JPEG 檔案以拍
攝當時的/時/分/秒來命名，並可將此 JPEG 檔案顯示於 ARM9 嵌入式系統的觸控螢
幕上。例如攝當時是 12 時 03 分 48 秒，圖檔名稱為 120348.jpeg。並且儲存於 USB
介面隨身碟內的年/月/日資料夾。年/月/日資料夾料夾由程式自動產生。除此之
外，影像黑盒子透過 GPRS(general packet radio service)模組的 SIM 卡及 AT 指
令與 GPRS 網路取得連線。GPRS 網路由電信公司所提供，它透過 Internet 與伺服
端電腦取得連線。然後，影像黑盒子將上述的 JPEG 檔案透過 GPRS 網路與 Internet
 4
第二章 GPRS 架構 
GPRS（General Packet Radio Service）是GSM（Global System for Moible 
Communications）行動電話用戶可用的一種移動數據服務，常被描述為2.5G系統，
介於第二代GSM與第三代CDMA移動通訊技術之間。具有隨時上線、依量計費、快速
連線、高速傳輸等優點，GPRS在GSM系統上，已成為一個網路傳輸的重要的角色。 
2.1 GPRS 的原理 
GPRS 是利用 GSM 網路中未使用的 TDMA 通道，提供中速的數據傳輸。有別於傳
統的電路交換（Circuit Switched Data, CSD）系統連接，一個資料連接要建立
並保持一個電路連接，整個連接過程中這條電路頻寬被獨占直到斷線為止，即使
網路上沒有進行數據傳遞，其他用戶也不能使用這個通道。GPRS 是採用封包交換
（Packet Switch），即是多名用戶可以共享一個相同的傳輸通道，每位用戶只有
在傳輸時才會佔用通道。如此一來。所有可用頻寬可以立刻分配給當前發送數據
的用戶，這樣更多的間隙發送或接收數據的用戶可以共享頻寬。 
2.2 GPRS 的網路架構 
GPRS 的網路架構是在 GSM 系統的基礎上建立，再增加兩個新的網路設備節點，
分別為 SGSN(Serving GPRS Support Node)以及 GGSN(Gateway GPRS Support 
Node)，SGSN 與 GGSN 具有封包 Packet 的處理與傳送功能，說明如下： 
 GGSN： 
 6
Internet
PSTN
ISDN
BSC
MSC
BTS
BTS
BTS
SIM
ME
SIM
ME
SIM
ME
BSC
BTS
BTS
BTS
VLR
AcU
HLR
Mobile Station Base Station
Subsystem
Network  and
Switching Subsystem
Public Network
Abis
interface A
interface
Um
interface
SGSN GGSN
Gb
Gn
Gi
Gs
GPRS Network
EIR
Gr
Gc
Gb
 
圖 2-1. GPRS 的網路架構 
對於 GPRS 而言，它所需要的分封資料邏輯通道基本上與 GSM 所定義的非常接
近，區分成封包廣播控制通道(Packet Broadcast Control Channel；PBCCH)、封
包共用控制通道(Packet Common Control Channel；PCCCH)及封包訊務控制通道
(Packet Traffic Channel；PTCH)等三部份，各部分通道種類如圖 2-2 所示。其
說明如下： 
 Packet Broadcast Control Channel 
只存在於 Downlink，廣播分組資料特有的系統資訊。 
 Packet Common Control Channel 
PCCCH負責廣播所有控制訊號及起始數據資料傳送(Initiate Packet 
Transfer)。包含有 PRACH (Packet Random Access Channel)，只存在於
 8
2.3 GPRS 的特性 
2.3.1 GPRS 的速度 
採用封包方式的 GPRS，使用閒置的蜂窩網路頻寬傳輸數據，理論上封包交換
系統可達到 115 kbit/s，不過實際速度最快約 50 kbit/s 左右。一般而言，連線
速度隨著離 BS 的距離的增加而下降，在人口密集的高網路密度沒有問題，不過在
人口稀少的郊區就比較有問題了。 
GPRS 的速度主要取決於同時分配到的 TDMA 時槽數目，分為 Downlink Slots
與 Uplink Slots，下載和上傳時槽可同時使用，不過同時使用的時槽（Active 
Slots）不能超過 5個。 
常見的 GPRS 時槽級別（GPRS Multislot Classes）有以下幾種，如圖 2-3 所
示： 
z Class 2：兩個 Downlink Slots 及一個 Uplink Slots。 
z Class 4：比 Class 2 多了一個 Downlink Slots。 
z Class 6：比 Class 4 多了一個 Uplink Slots。 
z Class 8：也就是俗稱的 4+1，為四個 Downlink Slots 及一個 Uplink 
Slots，這樣做可優化像 WEB 瀏覽器這樣大部分是下載流量的應用。一般
來說，GPRS 手機預設使用 Class 8 來傳輸。 
z Class 10：使用四個 Downlink Slots 及兩個 Uplink Slots。通常使用於
雙向數據差不多相等的情況下，如及時消息。 
 10
 圖 2-5. CSD 與 GPRS 速度比較 
2.3.2 GSM 與 GPRS 比較 
在固有的 GSM 網路架構下，使用的電路交換的傳輸模式，傳輸速率只有
9.6Kbps，當使用者想擷取 Internet 上的數據資料時，便會發生速度過慢及浪費
無線網路資源的現象。 
為了更有效率的利用無線網路資源，GSM 增加了 GPRS 的服務。GPRS 的特性可
分以下幾點說明之： 
1. 大幅提升 GSM 系統效率 
GPRS 封包交換的方式，使得用戶只在發送或接收數據資料期間才佔
用資源，這使得多個用戶能更共享同一通道，提高資源的使用率。 
2. 隨時與系統保持連線 
GPRS 功能類似公司網路租用專線，隨時與 Internet 連線，這種功能
使得 GPRS 被稱為“Always Connected＂。 
3. 傳輸速率快 
 12
 圖 2-6. GSM 與 GPRS 之技術比較 
目前 GPRS 提供了幾個是 GSM 系統所沒有的服務，主要有： 
z 點到點（Point-to-Point）服務：連接網際網路。 
z 點與多點（Point-to-multipoint）服務：一點與多點的多方傳播和多方
通話。 
z SMS和MMS服務：簡訊與多媒體訊息。 
z ISP所提供的服務：提供網際網路內容服務。 
z E-mail服務：透過POP3協定檢查閱讀發送電子郵件。 
 
 14
3. 即時運算系統（Real Time Operation Systems）用來管理應用軟體，並提供一
種機制，使得處理器在一次行程排程時執行一個行程，並在各個行程之間進行
程式切換。小型嵌入式系統可能不需要即時運算系統。 
 嵌入式系統從出現至今已經過了 30 多年的時間，近幾年隨著電腦、通信的整合需
求，原本僅限於軍事、工業上使用，目前已普及到家電產品、消費性電子的領域。經過
了下列四個歷程，嵌入式系統已成為一個熱門的領域： 
1. 以單晶片為核心的可程式控制器系統：無作業系統，透過程式語言對系統直接
控制； 
2. 以嵌入式 CPU 及簡單作業系統為核心的嵌入式系統：CPU 種類繁多，應用軟體
較具有專屬性； 
3. 以嵌入式作業系統：可在各類處理器上運作，作業系統核心小，效率高，具有
各種模組化及擴充性； 
4. 未來是以 Internet 為目標的嵌入式系統：與傳統嵌入式系統不一樣的是最近
興起的具有網際網路功能的嵌入式系統（Internet-enabled embedded 
system）。 
如果以系統複雜程度區分，我們可以將嵌入式系統分為三類： 
1. 小型嵌入式系統 
這類系統是採用一個 8或 16 位元的微處理器設計的；硬體與軟體複雜度很小，
只需要進行電路板等級的設計。 
這類嵌入式系統應用的範例有：巧克力自動販賣機、遠端電視（控制器）、數位
 16
針對這項用途開發與其他產品截然不同的一項系統，這就是所謂的客制化。嵌入式
系統與一般個人電腦最大的不同處也是在此，因為量身定做，所以我們通常需要經
過修改才可直接套用到其他的嵌入式產品上，這就是所謂的系統移植。而嵌入式系
統還有一些特別的地方，因為嵌入式系統運算強調效能期限的限制，所以必須達到
以下要求： 
z 即時功能：許多系統強調即時，也就是如果資料不能夠在規定時間內處理完
畢，將會造成嚴重後果。 
z 多重速度匹配：有些嵌入式系統不是同時只有一件工作正在執行，而是好幾件
工作同時執行，並且必須能夠達到不同的即時的要求，這種特性稱為多重速度
匹配。 
z 製造成本：建立一個系統的成本非常重要，因為製造成本決定了硬體零組件的
挑選。 
z 省電：電源的設計直接影響到製造成本。 
而嵌入式系統的種類相當的多，有多種的 CPU 搭配多種作業系統。常見的 CPU 有
X86 架構、ARM 架構、MIPS 架構、PowerPC 架構；常見的嵌入式作業系統除了傳統的
VxWORKs、pSOS、VRTX、ONX、LynxOS 和 OS-9 外，新興的嵌入式作業系統有 BeOS、eCOS、
Windows CE、Palm、EPOC、及時系統、Linux 及自行開發系統等。由其中已在市面上的
PDA 我們就可以看到：Palm m505 使用 Motorola Dragoball VZ 33MHz 搭配 Palm OS 4.0、
HP Jornada 565 使用 StrongARM SA1110 206MHz 搭配 Microsoft Pocket PC 2002、Nokia 
9910 使用 AMD 486 CPU, 33 MHz 搭配 EPOC 3.0、Sharp Zaurus C760 使用 IntelPXA255 
400MHz 搭配 Linux。 
 18
3. 網路功能強大： 
由於 Linux 的架構是由 UNIX 發展而來，因此 Linux 也具有強大的網路功
能。 
4. 跨平台： 
一開始 Linux 是基於 Intel 386 機器發展的，不過時代演進，出現了移植
到各式平台上的需求，目前許多程式設計者已經將 Linux 移植到各種平台上，
如 x86、MIPS、ARM、PowerPC、Motorola 68K、Hitachi SH3/SH4、Transmeta
等平台上運作。 
除了以上優勢之外，根據資訊市場情報中心（Market Intelligence Center，簡稱
MIC）的資料，也發現綜觀整體嵌入式 Linux 市場成長的原因有三個： 
1. Linux 在嵌入式系統所需的關鍵技術持續發展成熟，包含即時性
（Real-time）、開機速度、電源管理等。 
2. 國際組織如 OSDL（Open Source Development Lab）、CELFO（Consumer 
Electronics Linux Fourm）持續建立嵌入式 Linux 相關標準，解決版本分歧
與相容性問題。 
3. MontaVista 和 Wind River 等大廠持續投入維護體系與開發工具的支援。此將
彌補嵌入式系統相較於傳統專屬嵌入式作業系統的弱勢，加速嵌入式 Linux
從開發者社群邁向商業化應用。 
 
 20
此家族是針對更強大的多媒體市場和高效率的即時資料處理所設計的，可
運作達 430+MIPs（Dhrystone 2.1），家族中的 ARM1020E、ARM1022E 和
ARM1026EJ-S都具有DSP及 MMU。其中的ARM1020E是具有32k/32k位元的快取，
ARM1022E 是具有 16k/16k 位元的快取，而 ARM1026EJ-S 沒有 Cache。 
z ARM11 家族： 
針對高效率性能的 ARM11 家族，可運作達 740MIPs（Dhrystone 2.1），提
供 4~64K cache，包含下面四個系列 ARM11 MPCore、ARM1136J(F)-S、
ARM1156T2(F)-S 和 ARM1176JZ(F)-S 。 
z Cortex 家族：  
針對一些特別市場應用的 Cortex 家族，包含具有 Thumb-2 技術的 RM 
Cortex-A8、ARM Cortex-M3 和 ARM Cortex-R4。 
z SecurCore 家族： 
此家族是專門給 Smart Card 與安全的 IC 卡之用，包含了 SecurCore 
SC100、SecurCore SC110 和 SecurCore SC200、SecurCore SC210。除了體積
小、低耗電、高程式碼密度與效能外，這家族亦整合了各種特殊的安全功能，
可建立安全性電子商務、銀行、證件和公共交通的技術，且此家族還爲迅速發
展的 Java Card 平臺提供 Jazelle 加速技術。 
而在本論文所使用的是 S3C2410，是韓國 Samsung 公司以 ARM920T 為核心、0.18um 
CMOS 標準元件、memory complier 製作而成的一顆 16/32 位元 RISC 微處理器，主要設
計應用於低成本、低功率、高效能且體積小的手握裝置或是其他應用產品。圖 3-1 所示
為 ARM920T 功能方塊圖。 
 22
 圖 3-2. S3C2410 功能方塊圖 
1. 1.8V 核心電壓， 3.3V 記憶體電壓，3.3V 外部 I/O 電壓。 
2. 16KB 指令 cache，16KB 資料 cache。 
3. 外部記憶體控制器（SDRAM 控制和晶片選擇邏輯）。 
 24
第四章 程式開發環境 
4.1 發展版與電腦連線 
本論文中的發展版與個人電腦互相連線，我們可以使用串列埠(com port)。
在連接RS232後，開啟Windows的超級終端機，在連接埠設定中依照如圖4-1設定： 
z 每秒傳輸位元：115200 
z 資料位元：8 
z 停止位：1； 
z 流量控制：無 
 
圖4-1. Windows超級終端機設定 
 26
完成 Windows 的超級終端機或是 Linux 的 minicom 設定後，當我們開啟發
展版電源，在正常開機的情況下，可看到如圖 4-4 所示的資訊： 
 
圖4-4. 發展版開機畫面 
Vivi 為裝載程式（bootload）的名字，就如個人電腦裡的 BIOS 一樣，vivi
為一個引導系統的作用，是由 MIZI 公司所提供的 bootloader。在 VIVI 啟動後，
如果兩秒之內如果按空白鍵，將進入 VIVI 操作介面。當輸入 help 後，會顯示
VIVI 一些使用命令，如圖 4-5 所示。 
 
圖4-5. vivi指令 
 28
Dentry-cache hash table entries: 8192 (order: 4, 65536 bytes) 
Inode-cache hash table entries: 4096 (order: 3, 32768 bytes) 
Mount-cache hash table entries: 1024 (order: 1, 8192 bytes) 
Buffer-cache hash table entries: 4096 (order: 2, 16384 bytes) 
Page-cache hash table entries: 16384 (order: 4, 65536 bytes) 
POSIX conformance testing by UNIFIX 
Linux NET4.0 for Linux 2.4 
Based upon Swansea University Computer Society NET3.039 
Initializing RT netlink socket 
CPU clock = 200.000 Mhz, HCLK = 100.000 Mhz, PCLK = 50.000 Mhz 
Starting kswapd 
devfs: v1.10 (20020120) Richard Gooch (rgooch@atnf.csiro.au) 
devfs: boot_options: 0x1 
ttyS%d0 at I/O 0x50000000 (irq = 52) is a S3C2410 
ttyS%d1 at I/O 0x50004000 (irq = 55) is a S3C2410 
ttyS%d2 at I/O 0x50008000 (irq = 58) is a S3C2410 
Console: switching to colour frame buffer device 30x40 
Installed S3C2410 frame buffer 
pty: 256 Unix98 ptys configured 
s3c2410-ts initialized 
S3C2410 Real Time Clock Driver v0.1 
block: 128 slots per queue, batch=32 
eth0: cs8900 rev K(3.3 Volts) found at 0xd0000300 
cs89x0 media RJ-45, IRQ 37 
NAND device: Manufacture ID: 0xec, Chip ID: 0x76 (Samsung K9D1208V0M) 
 30
3. 安裝根系統檔案 
4.2.1 安裝 vivi bootloader 
在 Windows 中事先安裝好 JTAG 驅動程式，並將發展版接上電源和與電腦連
接，接著執行命令提示字元（DOS 界面），進入 jflash 所在的資料夾，執行 sjf2410 
/f:vivi。如圖 4-7 所示。經過 1 分鐘的寫入動作後，即可如圖 3-4 所示正常開
機。 
 
圖 4-7. sjf2410 執行結果 
4.2.2 安裝 linux 內核 
 32
的記憶體虛擬成硬碟，並將檔案系統映像檔解壓縮到該 RAMDISK 環境中。不過使
用 RAMDISK 方法，除了存放檔案系統映像檔所佔用的空間外，還必須佔用了一部
份記憶體來放置解壓縮後的檔案，而在希望使用最少系統資源的嵌入式系統上，
這樣反而沒有有效地使用系統資源。 
 Cramfs（Compressed Ram File System）是Linus Torvalds在Transmeta任
職時所參與研發出來的檔案系統，主要為了簡易和空間使用效率而設計出來的免
費唯讀Linux檔案系統，目前主要使用在嵌入式系統和精巧型系統上。不像傳統
檔案系統的壓縮映像檔，cramfs映像檔不必先解壓縮就可以使用，因此不像使用
RAMDISK那樣需要存放檔案系統映像檔和虛擬成硬碟的記憶體，只需要存放檔案
系統映像檔的空間即可。當瀏覽或讀取其檔案系統映像檔時，cramfs檔案系統會
及時解壓縮到記憶體中，且雖然cramfs採取了 zlib 做壓縮，但是它還是可以做
到高效的隨機讀取，幾乎跟使用RAMDISK時沒有差異性。在使用cramfs時有幾個
限制，最大的限制就是cramfs是唯讀的檔案系統，不能寫入，且沒有間戳記、壓
縮前每個檔案大小不能大於 16MB、壓縮後cramfs映像檔不能大於 256MB。既然 
cramfs 不會影響系統讀取文件的速度，又是一個高度壓縮的文件系統（cramfs 
的壓縮效率一般都能達到將近 50%，），對於在嵌入式系統上使用，cramfs就是
一個相當不錯的選擇。
 在圖 4-8 中，我們要將/root/s609/root_english 根檔案系統製作成一個
cramfs 映像檔。原本整 root_english 資料夾為 76027k，在輸入製作 cramfs 指
令： 
 mkcramfs root_english root.cramfs 
後，顯示為＂Everything: 34152 kilobytes＂。表示我們將原本大小為 76027kb
的資料夾，整個壓縮成一個 34152kb 的 cramfs 檔案系統映像檔。 
 34
 圖 4-9. 2.95.3 資料夾 
 
圖 4-10. 2.95.3/bin 資料夾 
 36
echo "source /usr/etc/profile" 
. /usr/etc/profile 
profile 草稿檔內容如圖 5-2 所示。注意打點(.)將使 profile 的設定長駐於 ARM
的 Linux 作業系統，一直到關機為止。 
 
                  圖 5-2 /usr/etc/profile 檔案內容 
ARM 開機時，日期設定為 2003 年 6 月 13 日 16 時 30 分 
/bin/date 061316302003 
啟動 ARM 端內部網路功能 
/sbin/ifconfig lo 127.0.0.1 up 
/sbin/inetd 
測試指定的驅動程式是否存在 
/sbin/modprobe s3c2410-ts 
 38
作業系統，一直到關機為止。 
 
                    圖 5-3. /usr/etc/shrc 檔案內容 
執行 usr/bin 下的 usb 草稿檔，以便掛載 USB 介面的驅動程式，usb 草稿檔如圖
5-4 所示。 
 
                  圖 5-4. /usr/bin/usb 檔案內容 
 40
                       圖 5-6. programs 目錄下的檔案內容 
5.1.3 program_start 程式 
 在將隨身碟 programs 目錄下的所有應用程式執行檔拷貝至 ARM 端 tmp 目錄
下後，接著執行 ARM 端 tmp 目錄下的應用程式 program_start。輸入： 
./program_start 
在 programs 目錄下，第一個被執行的應用程式是 program_start。圖 5-7
中是 program_start 程式流程。首先影像黑盒子會每隔 1 分鐘透過 GPRS 網路向
server 端取得正確時間字串，以便做在 ARM9 端做正確時間設定，這個動作在
ctimex.sh 草稿檔執行，一直到索取正確時間字串為止。qt2410-btns.o 是偵測
紅外線感測器輸出的驅動程式。當紅外線感測器偵測到人體靠近，便執行
capture.sh 草稿檔。此草稿檔主要功能為：攝影機取像並產生 jpeg 檔輸出、以
時/分/秒檔案名稱的形式存於 USB 隨身碟的年/月/日目錄中、將 jpeg 檔顯示於
 42
                      
圖 5-8 ctimex.sh 程式流程 
 
圖 5-9 gettimex 程式流程 
 44
tcsetattr(fd,TCSANOW,&newtio);  //套用 newtio 結構中的通訊協定 
註：/dev/ttyS1 在 Linux 系統上指的是 com2 
設定通訊傳輸速度 :此指令祇要設定一次，關機後下次開機即自動生效 
 RS232 的鮑率我們設為 115200bps，GPRS 模組預設是 9600bps，可用 Linux
的 minicom 或 windows 的超級終端機下 AT command 將 GPRS 模組的鮑率改成
115200，其指令為： 
AT+IPR=115200 
關閉 GPRS 模組回應(ECHO)的功能 
GPRS 模組開機時內定為回應所接受到的任何字元，也就是所謂的回應(ECHO)
模式。如果沒關閉 GPRS 的回應模式，會造成檔案傳輸功能的誤動作。我們可使
用 ATE0 指令以便關閉 GPRS 模組回應的功能。   
接下來分六個步驟(Step)說明，分別是步驟 1：登錄電信公司 APN；步驟 2：
註冊 GPRS 網路；步驟 3：查詢 GPRS 給本機(ARM)的 IP 位址；步驟 4：指定伺服
端電腦的 IP 位址；步驟 5：傳送字串及檔案；步驟 6：關閉指定伺服端電腦的 IP
位址；步驟 7：關閉 GPRS 功能。在 while 迴圈執行步驟 1-5。步驟 1-4 只需執行
一次即可對 GPRS 下 cipsend 指令，以便傳送檔案。若已執行過步驟 1-4 的指令，
在步驟 1 再下 at+cstt 指令時，便會收到 GPRS 所回應的 STATE: IP INITIAL 訊
息。此時，直接跳至步驟 5以便直接傳送字串及檔案。 
步驟 1：登錄電信公司 APN 
查閱各家電信公司的APN，大部份電信公司的APN為 internet。使用 at+cstt
 46
        { 
         perror("open"); 
         } 
//在while迴圈內，從透過com port 及開啟的GPRS網路檔案一次讀取一個block
資料。 
//一直到檔案結束或接收到 STOP 字串為止 
 while( (nread = read(fd,block,sizeof(block))) > 0 && 
strncmp(block,"STOP",4) != 0) 
 { 
  write(file_fd,block,nread);  //將 socket 介面所讀取到一個區塊
資料寫至 time_imf 檔   
memset(block,0,sizeof(block)); //將 block 的內容清空 
//最後一個 block 資料少於 1024，資料讀取完畢時，回傳值 res 小於或等於 0 
  res = res + nread; 
 } 
//正常情況脫離 while 迴圈時 res=18 
 close(file_fd);  //關閉 time_imf 檔 
        STEP++; 
        break; 
步驟 6.透過 AT+CIPCLOSE 指令關閉伺服器 IP Address。 
步驟 7. 透過 AT+CIPSHUT 重置 GPRS 
為了預防先前的連線沒中止，又執行程式會出現錯誤，所以我們先行切斷
GPRS 連線。成功切斷連線，GPRS 模組會回傳 OK；失敗回傳 ERROR。這裡出現 ERROR
表示目前尚未連上 GPRS，所以可以不用理會。read()及 write()只要碰到 \n 
 48
指令時，停留在迴圈，無法在預期時間內完成指定功能，此時關閉 GPRS 網路功
能並對 GPRS 作 RESET 動作 
        { 
 strcpy(s1,"AT+CIPCLOSE\r\n");          //關閉 GPRS 網路功能 
 write(fd,s1,strlen(s1));                //把指令傳給 GPRS 模組 
    memset(bufx,0,sizeof(bufx));            //清空 bufx 儲存空間 
 read(fd,bufx,20);         //讀取 GPRS 回應的訊息兩次 
    memset(bufx,0,sizeof(bufx));             
 read(fd,bufx,20);      
 strcpy(s1,"AT+CIPSHUT\r\n");       //重置 GPRS 
 write(fd,s1,strlen(s1));             //把指令傳給 GPRS 模組 
    memset(bufx,0,sizeof(bufx));           //清空 bufx 儲存空間 
 read(fd,bufx,20);        //讀取 GPRS 回應的訊息兩次  
    memset(bufx,0,sizeof(bufx));              
 read(fd,bufx,20); 
        }  
       abort();                            //脫離程式的執行 
        } 
//------------------------------------------------------------- 
int main() 
{ 
 void cipsend(int, int); 
 void response(int); 
 ................. 
    signal(SIGALRM, handler);             //設定計時終了處理函式 
    alarm(0);                             //關閉計時器功能 
 50
tcsetattr(fd,TCSANOW,&newtio);        //套用 newtio 結構中的通訊協定 
註：/dev/ttyS1 在 Linux 系統上指的是 com2 
 RS232 的鮑率我們設為 115200bps，GPRS 模組預設是 9600bps，可用 Linux
的 minicom 或 windows 的超級終端機下 AT command 將 GPRS 模組的鮑率改成
115200，其指令為： 
AT+IPR=115200 
AT+IPR 指令資料如下所示： 
AT+IPR Set fixed local rate 
Test command 
AT+IPR=? 
Response 
+IPR: (list of supported auto detectable 
<rate>s),(list of supported fixed-only<rate>s) 
OK 
Parameter 
see set command 
Read command 
AT+IPR? 
 
Response 
+IPR: <rate> OK 
Parameter 
see set command 
Set command 
AT+IPR=<rate> 
 
Response 
This parameter setting determines the data rate of 
the TA on the serial interface. The rate of command 
takes effect following the issuance of any result 
code associated with the current command line. 
 52
們送指令的時候要在後面加上 \r\n ( 0DH 0AH )，這樣 GPRS 模組才能正確收到
指令。而 GPRS 模組回傳訊息的格式為 <CR><LF>OK<CR><LF> ( 0DH 0AH OK 0DH 
0AH )，我們之前將序列埠的接收模式設為 newtio.c_iflag = IGNCR; ，將接收
到的<CR>忽略掉，否則會出錯。 
這邊用2個read()的用意是，因為模組會先傳一個<LF>進來，所以先用一個read()
將它收進來，第 2個 read()才是接收主要的訊息。res 指的是接收到的字串長度，
buf[res]= 0 是將最後一個字元設為 0，這樣才是正確的字串格式。 
AT+CIPSHUT 指令資料如下所示： 
AT+CIPSHUT Detach from GPRS network 
Test command 
AT+CIPSHUT=? 
Execute command 
AT+CIPSHUT<CR> 
Execute command 
AT+CIPSHUT<CR> 
 
Response 
This command is used to shut down 
connection. After this command executed, 
it will generally get a different IP 
address when starting up a new connection.
OK 
 
關閉 GPRS 模組回應(ECHO)的功能： 
GPRS 模組開機時內定為回應所接受到的任何字元，也就是所謂的回應(ECHO)模
式。如果沒關閉 GPRS 的回應模式，會造成檔案傳輸功能的誤動作。我們可使用 
ATE0 指令以便關閉 GPRS 模組回應的功能。 
 54
一次即可對 GPRS 下 cipsend 指令，以便傳送檔案。若已執行過步驟 1-4 的指令，
在步驟 1 再下 at+cstt 指令時，便會收到 GPRS 所回應的 STATE: IP INITIAL 訊
息。此時，直接跳至步驟 5以便直接傳送字串及檔案。 
步驟 1：登錄電信公司 APN 
查閱各家電信公司的APN，大部份電信公司的APN為 internet。使用 at+cstt
指令以便登錄電信公司的 APN。 
case 1: 
  strcpy(s1,"at+cstt=\"internet\"\r\n");   
  printf("STEP 1.......%s",s1);     
  res = write(fd,s1,strlen(s1));   //登錄電信公司的 APN 
  response(fd);       //讀取 GPRS 回應的<LF>
訊息 
  res = read(fd,buf,sizeof(buf));   //讀取 GPRS 回應的主要
訊息 
  buf[res] = 0; 
  printf("%s",buf); 
  if( strcmp(buf,"STATE: IP INITIAL") == 0 );  //判斷 GPRS 網
路是否已開啟 
  STEP = 5;       //若是，則直接跳至步驟 5 
    else 
  STEP++;        //若不是，則跳至步驟 2 
AT+CSTT 指令資料： 
 56
    STEP++; 
AT+CIICR 指令參考資料： 
AT+CIICR Attach to GPRS network 
Test command 
AT+CIICR=? 
Response 
OK 
Execute command 
AT+CIICR<CR> 
 
Response 
This command is used to activate a PDP 
context or establish a CSD 
connection for wireless connection. 
OK 
 
步驟 3：查詢 GPRS 網路給 ARM 的虛擬 IP 位址 
GPRS 數據機執行 AT+CIFSR 指令，以便查詢 GPRS 網路給 ARM 的虛擬 IP 位
址。透過 GPRS 數據機回傳一個虛擬 IP 給 ARM。因為 ARM 不須使用到此虛擬 IP，
因此 ARM 不做任何處理。 
case 3: 
  strcpy(s1,"AT+CIFSR\r\n");   //查詢虛擬 IP 位址 
  printf("STEP 3.......%s",s1); 
  res = write(fd,s1,strlen(s1)); 
  response(fd);                      //讀取 GPRS 回應的<LF>訊息 
  response(fd);                     //讀取 GPRS 回應的虛擬 IP  
  STEP++; 
 58
  response(fd);     //讀取 GPRS 回應的<LF>訊息 
  response(fd);     //讀取 GPRS 回應的<LF>訊息 2 
  STEP++; 
步驟 5：傳送字串及檔案 
    GPRS 模組使用 AT+CIPSEND=size\r\n 指令來傳送字元，其中 size 最大值為
1024。此指令下達後，緊接著傳送指定的 size 個字元。欲透過 GPRS 模組傳送檔
案，須先將檔案以 1024 個字元為一個區塊(BLOCK)作切割，然後再透過 GPRS 模
組傳送至指定 IP 的伺服端電腦。如此切割後，最後一個區塊可能不滿 1024 個字
元。相關程式如下。 
case 5: 
memset(s1,0,sizeof(s1));     //將 s1 的內容清空 
//傳送 TXFL 字串 
                strcpy(s1,"AT+CIPSEND=4\r\n"); 
    write(fd,s1,strlen(s1)); 
    printf("%s",s1); 
    response(fd); 
    write(fd,"TXFL",4); 
    response(fd); 
    response(fd);   
//開啟檔案     
    if ( (file_fd = open(filename, O_RDONLY) ) < 0 ) 
    { 
     perror("open"); 
    } 
 60
    printf("transfer_ok\n"); 
    exit(1); 
    STEP++; 
break; 
case 6: 
    strcpy(s1,"AT+CIPCLOSE\r\n"); // 關 閉 伺 服 器  IP 
Address 
    printf("STEP 5.......%s",s1); 
    write(fd,s1,strlen(s1));  
    response(fd); 
    response(fd); 
    STEP++; 
   break; 
case 7: 
    strcpy(s1,"AT+CIPSHUT\r\n"); //關閉 GPRS 網路功能 
    write(fd,s1,strlen(s1)); 
    printf("STEP 6......%s",s1); 
    response(fd); 
    response(fd); 
       exit(1); 
   break;   
  }   
 } 
 printf("Close.....\n"); 
 tcsetattr(fd,TCSANOW,&oldtio); 
 return 0;  
 62
                     圖 5-11 server 端 socket 程式流程 
socket 程式介面遵守 TCP/IP 網路通訊協定。寫程式時所有與硬體有關的部
分都是交給 Socket 應用程式介面(Application Program Interface，簡稱 API)。
API 可以看成就是一組函式，只要照著函式的格式、參數及變數，就可以達成指
定硬體的功能。Socket 依照作業系統有 windows 下的 API 與 unix-like 的 
API 兩種 ，兩者基本的概念與流程都一樣，差別在語法的不同。 
Ethernet 是 TCP/IP 通訊協定的其中一種。 欲透過 Ethernet 作資料的對
傳，分成 Clent 端及 Server 端兩種情況。就 Client 端而言，相關動作為 1. 建
立 socket 。2. 填寫連線遠端 server 的資料，包含連線協定( ipv4，ipv6， 
TCP ，UDP )及 server ip，server port 。3. 連線。4. 傳送資料或接收資料。
5. 結束 socket 連線。就 Server 端而言，相關動作為 1. 建立 socket。2. 建
立 IPv4 位址。3. 繫結 socket，等待連接。4. 接受連接。5. 傳送資料或接收
資料 6. 結束 socket 連線。接下來分別針對這些動作說明。 
 64
sockaddr_in，通常被稱為「網際網路 socket 位址結構」，並且定義在
<netinet/in.h>標頭檔中。 
// 建立 IPv4 位址 
 memset(&addr,0,sizeof(addr));    //清空原有網際網路
socket 位址結構設定 
 addr.sin_family = AF_INET;     //IPv4 協定 
 addr.sin_port = htons(PORT);   //將port號轉為16位元位址 
 addr.sin_addr.s_addr = htonl(INADDR_ANY); //允許來自任何 IP 位址
的連結 
3. 繫結 socket，等待連線 
為了讓 socket 可以被其它處理程序使用，一個伺服器程式需要給予 socket
一個名稱。因此，AF_UNIX socket 結合一個檔案系統名稱，AF_INET socket 則
結合一個 IP port 數值 
if( bind(sockfd, (struct sockaddr *)&addr, addr_len) == -1) 
 { 
  perror("bind :"); 
  exit(1); 
 } 
 printf("bind OK\n"); 
bind()系統呼叫，必須在 address 中指定位址，給予未命名的 socket 檔案
描述子定義一個名稱。addr_len 則要傳入位止結構長度。bind 成功之後，它會
回傳 0。如果失敗，它會回傳-1。 
 66
//由 time_imf.txt 檔讀取字串(月、日、時、分、年) 
              while( (res = read(time_fd,&block,sizeof(block))) > 0 ) 
               { 
//透過 UDP socket 介面將字串(月、日、時、分、年)傳至 ARM 端 
              sendto(sockfd, block, res,0 ,(struct sockaddr *)&addr, 
&addr_len);      
                } 
//傳送 STOP 字串至 ARM 端 
         sendto(sockfd, "\n", 1,0 ,(struct sockaddr *)&addr, &addr_len); 
         sendto(sockfd, "STOP\n", 5,0 ,(struct sockaddr *)&addr, 
&addr_len);   
          } 
//若所讀取的字串為 TXFL，則準備由 ARM 端接受檔案 
         if ( strncmp(buf,"TXFL",4) = 0 ) 
          { 
//開啟檔案 1.jpg ，路徑為/home/qmls/public_html/pic/ 
  file_fd = open(filename, O_WRONLY|O_CREAT , S_IRUSR|S_IWUSR); 
//清空 block 儲存空間 
  memset(block,0,sizeof(block)); 
//以一個區塊為單位，由 UDP socket 介面接受圖檔資料 
  while( (nread = recvfrom(sockfd,block , 
sizeof(block),0 ,(struct sockaddr *)&addr, &addr_len)) > 0  
    && strncmp(block,"STOP",4) != 0) 
  { 
//透過 UDP socket 介面所接受一個區塊圖檔資料，寫至 1.jpg 檔案中 
   write(file_fd,block,nread); 
 68
            圖 5-12 在 Internet 上搜尋可用的 vncserver 程式 
2. 使用 apt-get 指令安裝 vncserver 應用程式，如圖 5-13 所示，指令如下： 
#apt-get install vnc4server 
 70
4. 執行 vnc server 功能 
    執行 vnc server 功能時，有些電腦在圖形模式執行；有些電腦需在文字模
式執行。視該電腦的 Linux 作業系統的設定而異。若在圖形模式執行 vnc server
功能有問題時，可切換至文字模式執行 vnc server 功能。由圖形模式切換至文
字模式可按 Ctrl+Alt+F1；由文字模式切換至圖形模式可按 Ctrl+Alt+F7。假設
在圖形模式執行 vnc server 功能，指令如下： 
#vncserver(或 vnc4server) 
請注意 log file 的檔案名稱。在此範例 log file 的檔案名稱為 1.log，在
vnc 客戶端(client)執行 vncviewer 時，除了須指定 IP 位址外，也要指定 server
端所開啟的 log file 編號，如圖 5-15 所示。 
 
 72
   在google網站輸入realvnc關鍵字，即可找到下載vncviewer的應用程式‧網
址為http://www.realvnc.com/download.html。如圖 5-18 所示。檔名為
vnc-4_1_1-x86_win32.exe。 
下載網址為：http://www.realvnc.com/cg-bin/download.cgi
 
圖 5-18 vnc-4_1_1-x86_win32.exe 檔案位置所在的網頁畫面 
 
 74
運行 bootload開機程式等小體積代碼，bootload開機程式無須拷貝到
SDRAM。同樣的容量，NAND FLASH價格只有NOR FLASH 的1/5。 
5. ATA介面：經過162245 緩衝器驅動，可以外接IDE 硬碟，光碟機等設備。該
介面有一些信號由CPLD 提供。  
6. 外部匯流排介面：提供一個片選，一個中斷，16bit 位址線和16bit 資料線。
可以用於一般設備擴展。最大支援64Kbyte 空間。可透過此介面外接感測器
的訊號線。 
7. Ethernet網路介面：採用CS8900A，此晶片適合於嵌入式系統。 
8. 串列介面1(ttys0)：使用交叉電纜連接PC，即2－3，3－2，5－5，ARM9透過
此介面與PC作訊息溝通。 
9. 串列介面2(ttys1)：連接GPRS模組，資料傳輸速度是115200。 
10.類比輸入介面：S3C2410 內建的類比輸入接腳。 
11.CPLD JTAG 插座：EPM7032AECT 的JTAG 插座，用於燒寫Bootload程式。 
12.SD/MMC 卡座：支援熱插拔，軟體配合可以檢測自動卡插入。 
13. USB從機介面：用於和主機通訊，配合DNW 軟體，可以實現資料快速下載。 
14. USB主機介面：透過USB分線器，連接攝影機和隨身碟。 
15.MULTI-ICE 介面：可以直接連接MULTI-ICE和Smart－ICE等工具。本計劃採用
Linux作業系統，不須外接硬體模擬器(ICE)，所以沒有使用此介面。 
 76
 圖 6-3. 紅外線感測角度與距離 
 
圖6-4 感測器與ARM-9開發平台的連接 
如圖 6-5 所示，影像黑盒子是由 ARM9 開發平台、紅外線感測器、USB 分線
器、USB 介面攝影機、USB 介面隨身碟和 GPRS 模組所組合成。影像黑盒子開機時
自動透過 GPRS 網路與網際網路(Internet)與伺服端電腦連線，自動取得正確的
時間(年/月/日/時/分/秒)。當紅外線感測器感測到人體/物體移動時，USB 介面
攝影機自動拍攝影像，拍攝速度最快以每秒 5張的 JPEG 檔案(320 × 240)輸出。
這些 JPEG 檔案以拍攝當時的/時/分/秒來命名，並可將此 JPEG 檔案顯示於 ARM9
嵌入式系統的觸控螢幕上。例如攝當時是 12 時 03 分 48 秒，圖檔名稱為
 78
行 webcam-jpg 程式，然後產生 jpg 影像檔。 
 
圖 6-6 影像黑盒子與電腦連線 
 
圖 6-7 影像黑盒子所需的應用程式 
 80
上。這張照片是 11 時 42 分 59 秒所拍攝的，所以透過程式自動命名為
114259.jpeg。伺服端程式根據當時的年月日資訊，自動產生年月日資料夾。影
像黑盒子端的隨身碟也會自動產生如圖 6-10 所示的資料夾。 
 
圖 6-9 伺服端接收到影像黑盒子所傳來的 jpeg 圖檔，及時顯示在螢幕上 
 
圖 6-10 伺服端程式根據當時的年月日資訊，自動產生年月日資料夾 
 82
 圖 6-12 遠端 Windows 電腦啟動 VNC 察看伺服端電腦內圖檔 
此圖展示根據當時時間 2006 年 3 月 21 日，由程式自動產生 2006-03-21 資
料夾。然後將所接收來自影像黑盒子所拍攝到的圖檔，以當時時/分/秒自動命
名，存放於此資料夾。 
伺服端電腦需啟動 VNC（VNC Server）瀏覽器功能，察看端電腦需安裝 VNC 
Client 型瀏覽器。兩台電腦間只要有 Internet 連線，距離可相當遙遠，例如美
國至台灣。察看影像黑盒子所拍攝的內容，可不侷限於伺服端電腦。任何一台電
腦只要有 Internet 連線，經使用者名稱（username）及密碼（password）驗證
即可察看。如此提高了影像黑盒子的實用性。 
 除了將影像黑盒子擺在可用市電 110V 的位置進行實測外，我們也將影像黑
盒子擺在汽車內，使用車用 12V 電源，進行實測。圖 6-13 展示在 2006 年 5 月 1
日的實測結果。由程式在伺服端自動產生 200605-01 資料夾，然後將當日影像黑
盒子所自動拍攝圖檔傳至伺服端的 2006-05-01 資料夾內。圖檔以當時的時分/
 84
結論 
近年來嵌入式系統蓬勃發展，軟體上開放原始碼的作業系統 Linux 及硬體上
高支援度的 ARM 32 位元處理器，讓我們可以根據所要達到的功能，發展程式、
擴充裝置。本文中的影像黑盒子以 ARM 為基礎，透過影像擷取模組，將所取得
的圖像一方面儲存於擴充的 USB 隨身碟中，一方面透過 GPRS 無線網路連接
Internet，傳送至遠端一固定 IP 的伺服電腦上。未來更可以加上各類感測器、GPS
定位系統，讓功能更多樣化。 
使用 GPRS 除了可以達到無距離限制的問題，因採用傳輸封包多寡來計費，
連接傳輸資料的費用更是相較於傳統 GSM 系統來的低廉，但是雖然目前各家電
信業者 GSM/GPRS 服務範圍已相當普及，不過較偏遠地區，GPRS 會有訊號中
斷或是無法傳遞資料的問題。現在台灣地區發展中的手機 3G 無線通訊系統，也
是使用 APN 來連線，計費方式也是以封包傳送/接收的數量來計費，而 3G 的速
度最高可達 384Kbps，比 GPRS 的 57.6Kbps 多了好幾倍。一旦 3G 系統成熟時，
穩定度和所支援的頻寬都相較於 GPRS 來的好，相信未來使用 3G 系統，除了傳
送畫質更加的圖片檔外，流暢地傳送影片檔至遠端伺服電腦，甚至是直接傳送到
管理者的手機上，都是指日可待的。 
 
 86
2005 Page(s)：482 – 485. 
[7] Peng-Chao Zhang, Zhong-Ke Shi, Meng Xu, Design and implementation of 
vehicle monitoring system based on GPRS, Machine Learning and Cybernetics, 
2005. Proceedings of 2005 International Conference, Volume 6,  Aug. 2005 
Page(s)：3574 – 3578. 
[8] O. Al-Baker, R.Benlamri, A.Al-Qayedi, A GPRS-based remote human face 
identification system for handheld devices, Wireless and Optical 
Communications Networks, 2005. WOCN 2005, Second IFIP International 
Conference, 6-8 March 2005 Page(s)：367 – 371. 
[9] W. Tuttlebee, GPRS networks, Communications Engineer, Volume 1,  Issue 
6,  Dec. 2003-Jan. 2004 Page(s)：47 – 47. 
[10] Jiacun Wang, Real-time billing throughput analysis of wireless 
telecommunication systems, Networking, Sensing and Control, Proceedings, 
2005 IEEE, 19-22 March 2005 Page(s)：789 – 794. 
[11] Chih-Hung Wu, Shun-Chien Chang, Yu-Wei Huang, Design of a wireless 
ARM-based automatic meter reading and control system, Power Engineering 
Society General Meeting, 2004. IEEE, 6-10 June 2004 Page(s)：957 – 962. 
[12] R. Mullner, C.F. Ball, K. Ivanov, F. Treml, G. Spring, Quality of service in 
GPRS/EDGE mobile radio networks, Vehicular Technology Conference, VTC 
2004, IEEE 59th, Volume 5,  17-19 May 2004 Page(s)：2507 – 2511. 
[13] M. Ivanovich, J. Li, T. Neame, P. Fitzpatrick, Modelling GPRS data traffic, 
Global Telecommunications Conference, 2004. GLOBECOM '04, IEEE, 
88 
