into ITU-T H.263 and ISO/IEC MPEG-4 standard [7][8]. The efficiency of pixel 
prediction is increased by employing multiple pixel values in OBMC. However, this 
scheme is extremely high computational complexity because it requires iterative 
computation. 
In this paper, we propose a Kalman filter-based method to improve the 
conventional OBMC motion estimation, which is referred to embedded algorithm. In 
our previous works [9][10], the Kalman filter is embedded into conventional OBMC 
to improve the estimate accuracy of motion vectors and reduce blocking artifacts in 
the conventional BMA. Motivated by that works, the Kalman filter is applied directly 
during the optimization process for motion estimation. 
This paper is organized as follows. A brief review of the related works is 
presented in Section 2. In Section 3, we describe how to embed the Kalman filter into 
the optimization process of OBMC motion estimation. Simulation results are 
presented in Section 4 and finally the conclusions are given in Section 5. 
 
2. REVIEW OF RELATED WORKS 
2.1. The Kalman filter 
The Kalman filtering algorithm estimates the states of a system from noisy 
measurement [11] [12]. There are two major features in a Kalman filter. One is that its 
mathematical formulation is described in terms of state-space representation, and the 
other is that its solution is computed recursively. It consists of two consecutive stages: 
predicting and updating. We summarize the Kalman filter algorithm as follows:  
Predicted equation: 
( ) ( ) ( ) ( ) ( )kkkkk wΓvΦv +−−= 11  (1) 
Measurement equation: ( ) ( ) ( ) ( )kkkk evHz += , (2) 
where v(k) and z(k) are state and measurement vector at time k; Φ, H and Γ are state 
transition, measurement and driving matrices, respectively. Generally, we assume that 
w(k) and e(k) are white Gaussian with w(k)~N(0,Q(k)), e(k)~N(0,R(k)) and 
E[w(k)eT(l)]=0 for all k, l. Let )]0(ˆ)]0([ vv =E , and ]))0(ˆ)0())(0(ˆ)0([( TE vvvv −− )0(P=  
be initial conditions. Then the Kalman filter algorithm can be written as follows: 
<1> Prediction step: 
State vector is determined by 
)1(ˆ)1(ˆ −−Φ= +− kk vv  (3) 
Prediction-error covariance is calculated by 
)()1()()1()1()( kkkkkk TΓ−Γ+−−Φ= +− QPP  (4) 
<2> Updating step: 
[ ]∑
∈
− −−=
i
2
1i
v
)(ˆ)(W)(argmin
Ws
kbb vsIssrv  (11) 
where vb is the motion vector with minimum MSE. 
To solve eq. (11), we can initialize block motion vectors with a certain motion 
field, e.g., the zero motion field, and then iteratively refined these vectors block by 
block until the vector field converges [6]. Nevertheless, the iterative solution usually 
converges to a good local minimum rather than global minimum. It can be concluded 
that this method can effectively increase the motion compensation performance for 
both PSNR and visual quality, but it requires huge computational load. 
The other approach is a fast motion estimation algorithm based on the 
checkerboard block partitioning and grouping in encoding [14]. This algorithm, called 
the grouped OBMC (GOBMC), effectively decorrelates dependency among OBMC 
motion vectors and facilitates the search process. 
 
3. KALMAN FILTER EMBEDDED MOTION ESTIMATION FOR OBMC 
When the estimated MV is inaccurate, or the block based translational model is 
not appropriate, the predicted image will suffer from the notorious blocking artifact. 
In OBMC, each pixel value is predicted based not only on the estimated motion 
vector of the block that it belongs to, but also the motion vectors of its neighboring 
blocks. Therefore, we propose a Kalman filter embedded motion estimation for 
OBMC to search motion and estimate motion vector. Using Kalman filter to estimate 
motion vector, eq. (11) can be written as 
∑
∈
− −−=
iWs
2
1ib ))]((sIˆW)([minarg vKalmansrv k
v
b  (12) 
where ( )vKalman  is the estimated motion vectors based on Kalman filtering. By 
Kalman filter, the integer-point motion vector results floating-point motion vector 
which is used to generate motion compensation prediction. In such case, the motion 
vector is represented in integer-point, but it can generate motion compensation with 
fractional pixel accuracy. Note that the assigned bit rate for motion vector is not 
affected by ( )vKalman , and the total cost function will be reduced due to the 
accuracy increase in compensation.  
We employ the proposed scheme to obtain the measured motion vector. Then 
we model the motion vectors and determine the predicted motion vector by utilizing 
the inter-block correlation. Based on the measured and predicted motion vectors, a 
Kalman filter is applied to obtain an optimal estimation of motion vector. 
For the sake of simplicity to implement, we employ the two-dimensional AR 
(autoregressive) model to characterize the correlation of the motion vectors. The 
motion vector of the block at location (m, n) of the ith frame is denoted 
b) The prediction-error covariance is calculated by 
TT nmnmnm Γ),(),1(),( ΓQΦΦPP +−= +− . 
c) The Kalman gain is  
1)],(),([),(),( −−− += nmnmnmnm TT RHHPHPK . 
d) The estimated motion vector is updated: 
)],(ˆ),()[,(),(ˆ),(ˆ nmnmnmnmnm −−+ −+= vHzKvv  
This is the final estimated output. 
e) The filtering-error covariance is 
),(]),([),( nmnmnm −+ −= PHKIP . 
Then we obtain an optimal estimate of motion vector ]ˆ,ˆ[)( yx vvKalman =v , which 
is with fractional accuracy. 
<Step 2> Calculate the bit rate of the motion vector ]ˆ,ˆ[ yx vv  according to the H.263 
Huffman table [6] [7]. Note that transmission motion vector is ],[ yx zz , which is an 
integer; thus the required bit rate of motion vector will not be affected by Kalman 
filter. 
<Step 3> If the best match were found by eq.(12), then we would obtain the optimal 
motion vector, bv . Go to <Step 4>. Otherwise, go back to <Step 1> to select other 
location for estimation. 
<Step 4> Go to <Step 1> for next block. 
In this algorithm, the Kalman filter is embedded into OBMC.  
 
4. SIMULATION RESULTS 
The performance of the proposed Kalman filter embedded motion estimation 
for OBMC was evaluated using a set of standard image sequences including Foreman, 
and Carphone. All sequences are with QCIF (176×144) resolution and frame rate of 
10 Hz. The results are compared with the MSE-optimal scheme, conventional OBMC, 
G-OBMC, OBMC embedded Kalman filter and GOBMC embedded Kalman filter, 
respectively. The block size 16×16 (or 8×8) and search range 31×31 (or 15×15) for 
QCIF format were chosen, respectively. 
For the KF-based motion estimation, the parameters are chosen experimentally 
as follows: the model coefficients a1=a3=0.38 and a2=a4=0.12, model error variance 
q(k)=0.95, measurement error variance r(k)=1-q(k), initial error covariance P(0)=I, 
and initial state 0V =(0)ˆ . It is evident that from [15] [16], the estimated motion vectors 
are real values rather than integer. The displaced pixels may not be on the sampling 
grid. Therefore, the well-known bilinear interpolation is adopted to generate a motion 
compensated prediction frame. A Huffman codebook adopted from H.263 standard 
was used in the coding of 2-D differentially coded motion vectors. The common 
[5] ITU Telecom. Standardization sector of ITU, “Video coding for low bitrate 
communication,” Draft ITU-T Recommendation H.263 Version 2, Sept. 1997. 
[6] M. T. Orchard and G. J. Sullivan, “Overlapped block motion compensation: an 
estimation-theoretic approach,” IEEE Trans. Image Processing, vol. 3, no. 5, pp. 
693-699, Sept. 1994. 
[7] ITU-T Recommendation H.263, "Video coding for low bitrate communication," 
Feb. 1998. 
[8] Motion Picture Experts Group (ISO/IEC JTC 1/SC 29/WG 11)}, "Information 
technology - coding of audio-visual objects -, part 2: Visual (ISO/IEC 14496-2)," 
1999.  
[9] C. M. Kuo, C. H. Hsieh, Y. D. Jou, H C. Lin, and P. C. Lu, "Motion estimation 
for video compression using kalman filtering," IEEE Trans. Broadcast., vol. 42, 
no. 2, pp. 110-116, Jun. 1996. 
[10] C. M. Kuo, S. C. Chung and P. Y. Shih, “Kalman filtering based rate-constrained 
motion estimation for very low bit rate video coding,” IEEE Trans. Circuis Syst. 
Video Technol., vol. 16, no. 1, pp. 3-18, Jan. 2006. 
[11] C. K. Chui and G. Chen, Kalman Filtering with Real-Time Applications, 
Springer Series in Information Sciences, vol. 17 New York : Springer, 1987. 
[12] M. S. Grewal and A. P. Andrews, Kalman Filtering Theory and Practice, 
Prentice-Hall Inc., Englewood Cliffs (1993). 
[13] J.C.H. Ju, Y.K. Chen, and S.Y. Kung, “A fast rate-optimized motion estimation 
algorithm for low-bit-rate video coding,” IEEE Trans. Circuis Syst. Video 
Technol., vol.9, no. 7, pp. 994-1002, Oct. 1999. 
[14] T. Y. Kuo and C. C. Jay Kuo, ”Fast Overlapped Block Motion Compensation,” 
IEEE Trans. Circuis Syst. Video Technol., vol. 8, no. 6, pp. 705–712, October 
1998. 
[15] C. M. Kuo, C. P. Chao and C. H. Hsieh, “A new motion estimation algorithm for 
video coding using adaptive Kalman filter,” Real Time Imaging, vol. 8, pp. 
387-392, Jan. 2002. 
[16] C. M. Kuo, C. H. Hsieh, Y. D. Jou, H C. Lin, and P. C. Lu, "Motion estimation 
for video compression using kalman filtering," IEEE Trans. Broadcast., vol 42, 
no. 2, pp. 110-116, 1996. 
 29
30
31
32
33
34
35
36
1 16 31 46 61 76 91Frame
(dB) FSA OBMC GOBMC OBMC[KF] GOBMC[KF]
 
Fig. 1 Comparisons of PSNR performance for the MSE-Optimal (FSA), Iterative 
OBMC, Grouped OBMC, OBMC[KF] and GOBMC[KF], using QCIF-Foreman 
sequence 100 frames at 10 frames/sec., block size = 8×8, search range=[-15,16]. 
 
 
27
28
29
30
31
32
33
34
35
1 16 31 46 61 76 91 Frame
(dB) FSA OBMC GOBMC OBMC[KF] GOBMC[KF]
  
Fig. 2. Comparisons of PSNR performance for the MSE-Optimal (FSA), Iterative 
OBMC, Grouped OBMC, OBMC[KF] and GOBMC[KF], using] QCIF-Foreman 
sequence 100 frames at 10 frames/sec., block size = 16×16, search range=[-31,32]. 
 
 
