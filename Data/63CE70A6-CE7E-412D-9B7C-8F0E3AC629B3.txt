	
	
 
行政院國家科學委員會補助專題研究計畫 □期中進度報告 ■期末報告 
 
 
社群及行動安全技術之研究與應用—子計畫一： 
雲端計算及行動安全平台之建構與關鍵密碼模組之研究開發（2/2） 
 
 
計畫類別：□個別型計畫   ■整合型計畫 
計畫編號：NSC 100－2218－E－002－009－ 
執行期間：2011 年 08 月 01 日至 2012 年 07 月 31 日 
 
執行機構及系所：國立台灣大學電機工程學系 
 
計畫主持人：鄭振牟 
共同主持人：無 
計畫參與人員：金蘊、施傑仁、林楙榜、楊上逸、陳冠瑋、張運安、 
 王子衿、李鎬、侯凱元、吳崧銘、林裕盛、姜慧如、邱奕豪 
 
 
本計畫除繳交成果報告外，另須繳交以下出國報告： 
□赴國外移地研究心得報告 
□赴大陸地區移地研究心得報告 
■出席國際學術會議心得報告及發表之論文 
□國際合作研究計畫國外研究報告 
 
處理方式：除列管計畫及下列情形者外，得立即公開查詢 
            □涉及專利或其他智慧財產權，□一年□二年後可公開查詢 
 
 
中   華   民   國  101  年  9  月  30  日 
附件一	
II 
	 	
中文摘要 
 
在本篇論文中，我們以 iOS 裝置為運行平台設計並實作了一個用於 XML 數位
簽章的行動裝置之 XML 安全應用程序介面。此應用程序介面遵照 W3C 標準
XML Signature Syntax and Processing （Second Edition），以 LibXML2 作為
XML 語法分析器，並採用 OpenSSL 為密碼引擎，具有修改增添功能之彈性、
可簡單利用，並可移植至 Android 平台。 
使用應用程序介面同時也開啟了 iOS 裝置對 OpenCL 的支援。基於此應用程序
介面，實作了透過 iSmart 智能卡讀卡機以智能卡進行 XML 數位簽章。文中最
後展示應用程序介面效能並討論 XML 數位簽章後的 XML 檔案壓縮。 
 
關鍵字：XML 數位簽章 
 
  
1 
	 	
一、 前言 
Both mobile devices and XML had taken a significant place of modern web 
applications, and the importance of them will keep on increasing in the future. Smart 
phones are the trend of mobile devices, and had changed the way people accessing 
information. Instead of sitting in front of a computer, now people demand data 
anytime, anywhere. Being the raven carrying various kinds of content over the 
internet, XML is a crucial component widely adopted for applications. XML security 
is a key to open the gate of many financial or sensitive applications to XML. When it 
comes to smart phones, iPhone usually is the first one that comes into consumers’ 
mind. It is shocking that over 500,000 apps [1] in the App Store but none of the Apps 
provide a solution for XML Security. 
In the cellphone market, smart phones had occupied a large percentage of market 
share, and the speed of growth is still rising. According to Nielsen’s survey, smart 
phones became the majority of new cellphone purchases [2]. Fig. 1.1 shows the 
growth curve of new purchases of smart phones. On February 2012, first time in the 
history, the usage of smartphones and feature phones are equal [3] which is shown in 
Fig. 1.2. 
 
 
Fig. 1.1 Recent Acquirer Device OS Share [1] 
 
3 
	 	
二、 研究目的 
Extensible Markup Language (XML), an open standard defined in the XML 1.0 
Specification [4] produced by World Wide Web Consortium (W3C), is a markup 
language which has been widely used on the internet. XML is designed to be both 
human-readable and machine-readable, and emphasizes simplicity, generality, and 
usability over the Internet [4]. XML realized the platform independence for the digital 
information exchange. Hundreds of XML-based languages have been developed 
extending the usage of XML, such as RSS, Atom, SOAP, and XHTML. XML-based 
formats can also be seen in many office productivity tools. To communicate with 
Web Services [5], XML plays an indispensable role. Many of the e-commerce 
technologies like ebXML [6] are based on XML. 
To apply on the business, XML Security [7] is introduced to ensure the 
authenticity, integrity and confidentiality, making transmitting of sensitive data safe. 
XML Security consists of XML Signature, Encryption, and Key Management [7]. 
XML Encryption provides data confidentiality and XML Signature gives guarantee of 
data integrity and non-repudiation for XML message exchange. 
This thesis focuses on XML Signature, designs and implements an API, XML 
digital signature for iOS devices, “xDSi” for short. The proposed API follows the 
standard, XML Signature Syntax and Processing (Second Edition) [8], recommended 
by World Wide Web Consortium (W3C), and supports most of the REQUIRED 
features and some of the RECOMMENDED and OPTIONAL features defined in the 
documentation. In addition to XML Signature, xDSi enables OpenCL [9] support of 
iOS devices. This work shows that xDSi can also cooperate with smartcards, by using 
a smartcard reader to sign the XML file with the key stored in the smartcard. 
The human-readable characteristic of XML brings human baggage, and the use 
of markup tags makes XML files verbose as well. The size of an XML file gets bigger 
after being signed. An efficient compression method is needed to shrink the size of 
signed XML files, so that the transmitting loading can be lowered. The transmitting 
loading is especially important when it comes to Machine to Machine (M2M) 
applications. Compress XML files using gzip is a common approach in web services. 
On the other hand, W3C designed Efficient XML Interchange (EXI) format [10], 
using the information provided by XML schema, tended to achieve a better solution. 
The comparison between these two methods over general XML files had been made 
by W3C in Efficient XML Interchange Evaluation [11]. This thesis further discusses 
the comparison targeted on signed XML files. 
  
5 
	 	
 
Fig. Error! No text of specified style in document..1  
Schematic Structure of xDSi 
 
2. XML Signature 
This chapter introduces XML Signature. Section 2.1 gives the overview of XML 
Signature. The structure of XML Signature is illustrated in Section 2.2 and 
Canonical XML (C14n) in Section 2.3. Section 2.4 will describe the detail of 
XML Signature Processing. 
2.1 Overview of XML Signature 
XML Signature is the digital signature designed for XML transactions, and is 
defined in W3C document, XML Signature Syntax and Processing [4]. XML 
Signature provides integrity, message authentication, and/or signer 
authentication services for any type of data whether located within the XML 
document that includes the signature or elsewhere. Typically, XML 
Signature is used to sign XML documents, however anything accessible via a 
URL can be signed. Another important feature of XML Signature is the 
capability of signing specific portions of the XML document. Signing certain 
parts of the XML document while letting the rest to be modifiable. It's 
especially important when the components of one XML document are 
authored by different parties and signed at different time. Each signing 
should only gain the authentication of the relevant party, and only to the 
relevant components, rather than signs on the whole document, which will 
enclose the document and potentially refuse any further editing. 
The flexibility of XML Signatures allows it to sign several kinds of signature 
to meet different requirement of security or usage. 
 Full Signature：Sign over the whole document. 
7 
	 	
 Enveloping Signature 
The signed content contained in an Object element which is can be found 
inside the Signature element. The target, Object element or its content is 
identified via a Reference using a URI fragment identifier or transform. 
 Detached Signature 
The signed content is external to the Signature element, and is identified via 
a URI or transform. Typically, the Signature element and the signed content 
are not in the same XML document, but the Signature element also can be 
the sibling element of the data object to be signed. 
2.2 XML Signature Syntax 
This section introduces the XML Signature Syntax and its element. XML 
Signature can be applied to arbitrary digital content (data objects) by 
indirection, and itself is an XML document after signing. The structure of the 
XML Signature syntax is showed in Fig. 2.3: (where "?" denotes zero or one 
occurrence; "+" denotes one or more occurrences; and "*" denotes zero or 
more occurrences) 
 
 
Fig. 2.3 XML Signature Structure 
 
An XML signature is wrapped by a Signature element which contains 
SignedInfo, SignatureValue, KeyInfo (optional) and Object (optional). 
 Signature 
9 
	 	
<ds:Transform 
Algorithm="http://www.w3.org/TR/2001/REC-xml-
c14n-20010315"></ds:Transform> 
</ds:Transforms> 
 DigestMethod 
DigestMethod element specifies the digest algorithm for 
calculating the digest value via the identification (URI), normally 
SHA1. 
<ds:DigestMethod 
Algorithm="http://www.w3.org/2000/09/xmldsig#sha1
"> 
</ds:DigestMethod> 
 DigestValue 
DigestValue element keeps the digest value of the result of 
transformation. The digest value should be encoded in Base64. 
<ds:DigestValue>…</ds:DigestValue> 
 SignatureValue 
SignatureValue element keeps the signature value of XML Signature process. 
The signature value is not directly computed from SignedInfo using the 
algorithm specified in SignatureMethod. To compute the signature value, 
first canonicalize the SignedInfo element using the algorithm specified in 
CanonicalizationMethod, and then calculate the signature value using 
signature algorithm and the key. The signature value should be encoded in 
Base64. An example is showed as follows. 
<ds:SignatureValue>…</ds:SignatureValue> 
 KeyInfo 
KeyInfo is an optional element. It enables the receiver to obtain the key 
information needed to validate the signature. KeyInfo may contain keys, or 
certificates and other public key management information. An example of 
RSA key information is showed as follows. 
<ds:KeyInfo> 
<KeyValue> 
<RSAKeyValue> 
<Modulus>…</Modulus> 
<Exponent>AQAB</Exponent> 
</RSAKeyValue> 
</KeyValue> 
</ds:KeyInfo> 
11 
	 	
(1) First, apply the Transforms determined by the application to the 
data object. 
(2) Calculate the digest value of the result of Transforms. 
(3) Generate the Reference element, including the identification of 
the data object, transforms performed, and the digest algorithm 
used and the DigestValue. 
 Signature Generation 
(1) Collect all the Reference(s), and generate SignedInfo element 
with CanonicalizationMethod, SignatureMethod and 
Reference(s). 
(2) Canonicalize the SignedInfo element with the algorithm 
specified in the CanonicalizationMethod element and then 
calculate the signature value of the SignedInfo based on 
algorithm specified in SignatureMethod. 
(3) Store the signature value into the SignatureValue element. 
Generate the Signature element, including SignedInfo, 
SignatureValue, KeyInfo (optional) and Object (optional). 
2.3.2 Core Validation 
The process of verification is similar to XML Signature. The core 
validation includes two parts, Reference Validation and Signature 
Validation. 
 Reference Validation 
(1) Canonicalize the SignedInfo element based on the 
CanonicalizationMethod. 
(2) For each Reference in SignedInfo: 
 Dereference the URI and execute Transforms to obtain the 
data object. 
 Digest the resulting data object using the algorithm 
specified in DigestMethod of its own Reference element. 
 Compare the result with the one in DigestValue. 
Validation fails if mismatch. 
 Signature Validation 
(1) Obtain the key information from KeyInfo or from an external 
source. 
13 
	 	
Table 2-2 shows an example of Canonicalization, in which the effect of rule 
4, 5, 7 and 8 can be observed. 
 
Table 2-2 Canonicalization example 
Input Document 
<doc> 
 <e1/> 
 <e2 name=“1” id=“2”/> 
 <e3 
xmlns:a=“http://www.w3.org/2000/09/xmldsig#” 
 xmlns:b=“http://www.w3.org”> 
  <e4 xmlns:a=“http://www.w3.org”>  <e5/> 
</e4> 
</e3> 
</doc> 
Canonical Form 
<doc> 
 <e1></e1> 
 <e2 id=“2” name=“1”></e2> 
 <e3 xmlns:a=“http://www.w3.org/2000/09/xmldsig#” 
xmlns:b=“ http://www.w3.org”> 
  <e4>  <e5></e5>  </e4> 
</e3> 
</doc> 
 
Canonicalization is crucial to XML signature. An XML Document may have 
more than one legal serialized representation. The representation of some 
nodes in an XML document might be modified into another logically 
equivalent form after applying to applications, e.g. reordering the order of 
attribute. While transferring from device to device, the line terminator may 
be changed from CR to LF to CR LF, etc. The change might affect the way 
validation program renders the XML document. Since XML Signature is 
created by encrypting the SignedInfo which contains the results of running 
the serialized XML document through a Cryptographic hash function, any 
little difference would cause the digital signature to vary and lead to invalid 
while the validation. 
To avoid these problems, an XML Canonicalization transform is employed to 
guarantee that logically-identical XML documents give identical digital 
signatures. According to [4], before applying a transform which requires 
octets to a data object that is a node-set, the node-set must first be converted 
to an octet stream using Canonical XML 
2.5 Absent of XML Signature on iOS 
Although being useful and critical in many applications, there's no App 
found in the Apple App Store or library for iOS. This section shows some 
15 
	 	
Efficient XML Interchange (EXI) [10] format, a Binary XML format, is a 
W3C recommendation for enhancing the communication of XML data. EXI 
format is a compact, high performance XML representation designed for a 
broad range of applications. 
An advantage of EXI is that EXI can use constraints from the XML schema 
to reach better compression rate. However, to apply the "schema-informed" 
compression, the decoder needs a copy of the same schema used in encoding. 
EXI can also work well with partial schemas or in the absence of any schema. 
The more the input XML document suits the provided schema, the better 
compactness EXI can achieve. 
EXI uses a grammar-driven approach to encode the XML document into EXI 
format. While encoding the XML document into an EXI stream, EXI stream 
encoder [10] uses EXI grammars to map each of the elements and attributes 
to an event with a corresponding event code. The main idea of event codes is 
similar to Huffman Coding [23]. Table 3 1 shows XML elements relevant to 
each EXI event. 
Removing the labels from the start and end elements significantly reduces the 
file size. EXI also uses a string table to assign compact identifiers to some 
string values. With XML schema informed, EXI stream encoder can change 
the lexical form of element and attribute values to fatherly reduce the file size. 
 
Table 3-1 EXI events 
EXI Event Type Event Content Grammar Notation 
Start Document  SD 
End Document  ED 
Start Element qname 
SE ( qname ) 
SE ( * ) 
SE ( uri : * ) 
End Element  EE 
Attribute qname, value 
AT ( qname ) 
AT ( * ) 
AT ( uri : * ) 
Characters value CH 
 
3.2 Compactness Comparison 
The W3C Working Draft, Efficient XML Interchange Evaluation [11], 
compares the compactness of EXI and gzip. Fig. 3.1 shows the result that 
EXI is consistently smaller than gzipped XML. Fig. 3.2 shows a similar 
result obtained by the EXIficient [24] team. 
17 
	 	
四、 研究方法 
The proposed Solution, an XML digital signature for iOS devices, xDSi is introduced 
in this chapter. First, section 4.1 illustrates the system overview of the API. Section 
4.2 lists the libraries used as building block, and gives simple guides of introducing 
these libraries into iOS. The process flow of XML Signature of xDSi is detailed in 
section 4.3. Then section 4.4 describes the additional feature of xDSi, such as 
enabling OpenCL support, smart card implementation and a Canonicalization cache 
method. 
4. System Overview 
The XML digital signature for iOS devices, xDSi, is an API that targets on iOS 
devices and has been tested on iPhone 4 and The new iPad (a.k.a. iPad 3). The 
design goal of the API is to be flexible, fast and the most important, easy using. 
The main structure of xDSi is built upon a C parser, LibXML2, and a C 
cryptography library, OpenSSL and written in C programming language. The 
API enables OpenCL support of iOS devices, making it possible to accelerate 
cryptographic functions with OpenCL. The API can also cooperate with smart 
card. An example of communicating with a smart card through a smart card 
reader, iSmart, is implemented in this work. Fig. 4.1 shows the schematic 
structure of API. 
 
 
Fig. 4.1 Schematic Structure of xDSi (The same as Fig. 1.3) 
 
5. Libraries 
This section discusses two main libraries used as the building block of the API. 
5.1 LibXML2 
19 
	 	
 
Fig. 4.2 Process Flow 
Fig. 4.2 illustrates the process of xDSi to sign an XML document. After loading 
an XML file, xDSi first convert it into C string with UTF-8 encoding. Then parse 
the XML with LibXML2 to build the tree structure, and apply the Transforms 
(currently only Enveloped Signature Transform and XML Canonicalization, 
Canonical XML Version 1.0 and Canonical XML Version 1.1, are supported by 
xDSi). Compute the digest value of the data object using the digest algorithm 
(xDSi currently supports SHA1) and encode it into Base64 encoding with 
OpenSSL. 
Unlike XMLSec sign on the template XML file which contains uncompleted 
Signature elements provided by the user, users of xDSi don’t have to prepare the 
template XML file on their own before signing. xDSi automatically creates a 
new SignInfo element after digesting is done. Another advantage of this is that, 
while creating the SignInfo element, the Canonical form of SignInfo element is 
generating at the same time. As the result, the signature value can be computed 
without performing XML Canonicalization. 
Compute the signature value of the SignInfo element using the signature 
algorithm (xDSi currently supports RSA-SHA1) and encode it into Base64 
encoding with OpenSSL. The RSA key information is loaded from a Pem file 
and stored into the RSA structure of OpenSSL. Finally xDSi completes the 
Signature element and the signed XML document, finishes the signature. 
7. Additional Feature 
This section discusses the additional feature of the API. Users of the xDSi can 
decide to use these features. 
21 
	 	
This work also implements a smart card version. The implementation uses a 
smart card reader, iSmart, to communicate with a smart card. The smart card 
vendor, ID TECH, provides iSmart SDK [20] which controls the 
communication between iOS device and the smart card. 
The smart card used in this work is NXP JCOP 41 72K BYTES Mifare card. 
The implementation signs the XML document with the private key stored 
inside the smart card. The main progress is the same as the ordinary one 
showed in Fig. 4.2 while the signature value is computed by the smart card 
and returned to xDSi. 
To compute the RSA-SHA1 signature value, instead of inputting the 
Canonical form of SignInfo element to the smart card and signing RSA-
SHA1 directly, the padded digest value generated by xDSi is send to the 
smart card and compute the RSA encryption. Which means RSA-SHA1 
signature is separated into SHA1, PKCS #1 v1.5 Encoding and RSA 
encryption. 
The purpose of this is because the bandwidth of transmitting data to the smart 
card is small. To send the whole SignInfo element would take rounds of 
transmitting. The Canonical form of SignInfo element is digested and padded 
with PKCS #1 v1.5 Encoding. The input data of the smart card is reduced to 
35 bytes and can be transmitted in one round. 
After obtaining the data, the smart card performs RSA encryption using the 
private key stored inside the smart card. The output of RSA encryption is 
then returned to the iOS device and encoded with Base64. The final result is 
the signature value of XML Signature. 
7.3 Canonicalization Cache 
Canonical XML (C14N) is a core component for XML Signature. XML 
Canonicalization ensures that logically-identical XML documents give 
identical digital signatures. 
XML Canonicalization includes complex processing, and is the performance 
bottleneck of XML Signature. While performing C14N, the attributes and 
namespaces of the elements are sorted. C14N also involves XPath 
transformation. The complexity of XPath transformation is at least O(n2) 
[32]. 
[32] provides a transformation model based on Finite Automata to reduce the 
complexity of C14N to linear time. However, XML documents with exactly 
the same structure will be signed over and over again in practical use. The 
only difference between these XML documents might be only a few values 
23 
	 	
五、 結果與討論 
1. 實驗結果 
The experiment result is performed in this chapter. Section 5.1 gives the 
performance report of the API, xDSi. Section 5.2 shows the smart card 
implementation. 
1.1 Performance of XML Signature 
This Section details the performance report of the API, xDSi. 
1.1.1 Testing Environment 
xDSi has been tested on iPhone 4 and The new iPad (a.k.a. iPad 3). The 
performance data is obtained under testing configuration showed in Table 
5.1. 
 
Table 5.1 Testing Environment 
Host Device The new iPad 
CPU 1 GHz Apple A5X 
OS iOS 5.1.1 (9B206) 
Development Environment Xcode 4.3.2 (4E2002) 
iOS SDK iOS SDK 5.1 
XML Parser LibXML2 (libxml2.dylib) 
Cryptography Library OpenSSL 1.0.0.a 
 
1.1.2 Performance Analysis 
The time performance of xDSi signing XML documents with different 
amount of containing elements is showed in Fig. Error!	 No	 text	 of	
specified	style	in	document..2. 
25 
	 	
 Transform (Canonical XML Version 1.1) 
 
Fig. Error! No text of specified style in document..4 Time 
consumed by Canonicalization 
  
0
1000
2000
3000
4000
5000
6000
7000
1 8 64 512
Ti
m
e(
m
s)
XML document size(kByte)
27 
	 	
 
Fig. Error! No text of specified style in document..7 Time used on 
Canonicalization over total time as percentages 
1.1.3 Canonicalization 
 
Fig. Error! No text of specified style in document..8 Signature time 
without Canonicalization 
In many applications, Canonicalization can be reduced with the 
Canonicalization Cache method described in section Error! Reference 
source not found.. Fig. Error!	 No	 text	 of	 specified	 style	 in	
document..8 shows the signature time without Canonicalization. 
 
1.2 Smart Card 
0.00%
20.00%
40.00%
60.00%
80.00%
100.00%
120.00%
0 100 200 300 400 500 600
Pe
rc
en
ta
ge
XML document size(kByte)
0
10
20
30
40
50
0 1000 2000 3000 4000 5000
Ti
m
e(
m
s)
Number of XML Elements 
29 
	 	
informed, “EXI (Schema, Preserved)” means EXI compression with XML 
schema informed and preserve. “gzip” indicates compression with gzip. “EXI 
(Schema, Preserved)” preserves namespace prefixes and the lexical form of 
element and attribute values when encoding to EXI, so the resulting 
compression rate is lower. Preserving namespace prefixes and the lexical form 
of element and attribute values is important when it comes to XML Signature, 
since any change might invalidate the signature. To fully compatible with 
XML Signature comments and Processing Instructions should be preserved 
too [33]. 
In Fig. Error!	No	text	of	specified	style	 in	document..10, “EXI (Schema)” 
performs the best compression rate. The compression rate of “EXI (Schema, 
Preserved)” is lower but still better than “gzip”. Fig. Error!	 No	 text	 of	
specified	 style	 in	 document..11 shows the result of compression of the 
signed E-Invoice XML document. After signing, the size of the XML file 
increased 890 bytes. In this case, the compression rate of “EXI (Schema)” and 
“gzip” are closer than in Fig. Error!	 No	 text	 of	 specified	 style	 in	
document..10. The compression rates of “EXI (Schema, Preserved)” and 
“gzip” are almost the same. 
 
Fig. Error! No text of specified style in document..10 Compression of E-
Invoice XML 
 
XML
EXI
EXI
(Schema)
EXI
(Schema, 
Preserved)
gzip
0
0.2
0.4
0.6
0.8
1
1.2
co
m
pr
es
se
d f
ile
 siz
e /
 or
ig
in
al
 
XM
L s
iz
e
E‐invoice XML (3787 bytes)
31 
	 	
2. 結論與建議 
Providing guarantee of data integrity and non-repudiation for XML message 
exchange, XML Signature is an essential part of XML applications. This thesis 
provides a solution to XML Signature for iOS devices. An XML Signature API, 
xDSi, is designed and implemented, which is flexible and easy using. A caching 
method is proposed to reduce the bottleneck of XML Signature, Canonicalization. 
In additional, this work enables OpenCL support for iOS devices. To perform 
XML Signature on smart card, a special method is proposed to reduce the data 
transmitting time. 
The flexibility of xDSi allows users to add desired function, such as additional 
Transform methods or signature algorithms. For supporting more mobile devices, 
all the libraries used in the API is accessible on Android, and the API itself is 
written in C, which means the API should be able to be ported to Android easily 
by using Android NDK. 
 
  
33 
	 	
http://santuario.apache.org/ 
[15] Apache , “Xerces-C++ XML Parser” , Retrieved June 2012 from the World 
Wide Web: http://xerces.apache.org/xerces-c/ 
[16] Aleksey Sanin, “XML Security Library”, Retrieved March 2012 from the World 
Wide Web: http://www.aleksey.com/xmlsec/ 
[17] Daniel Veillard, “The XML C parser and toolkit of Gnome”, Retrieved March 
2012 from the World Wide Web: http://xmlsoft.org/ 
[18] EA Young and TJ Hudson, “OpenSSL: The Open Source toolkit for SSL/TLS” 
Retrieved March 2012 from the World Wide Web: http://www.openssl.org/ 
[19] Aleksey Sanin, “XML Security Library: XML Digital Signature”, Retrieved 
April 2012 from the World Wide Web: 
http://www.aleksey.com/xmlsec/xmldsig.html 
[20] ID TECH, “iSmart, Mobile Smart Card Reader”, Retrieved March 2012 from 
the World Wide Web: http://www.idtechproducts.com/products/mobile-
readers/136.html 
[21] J Boyer, “Canonical XML Version 1.0”, W3C Recommendation, 15 March 
2001. 
[22] J Boyer and G Marcy, ”Canonical XML Version 1.1”, W3C Recommendation, 
2 May 2008. 
[23] DA Huffman, “A method for the construction of minimum-redundancy codes”, 
Proceedings of the I. R. E., 1952. 
[24] Daniel Peintner, “EXIficient - open source implementation of the W3C 
Efficient XML Interchange (EXI) format”, Retrieved March 2012 from the 
World Wide Web: http://exificient.sourceforge.net/?id=performance 
[25] Apple, ”iOS 5.1 Release Notes: iOS SDK Release Notes for iOS 5.1”, Retrieved 
July 2012 from the World Wide Web: 
http://developer.apple.com/library/ios/#releasenotes/General/RN-iOSSDK-
5_1/_index.html 
[26] “Android NDK | Android Developers”, Retrieved July 2012 from the World 
Wide Web: http://developer.android.com/tools/sdk/ndk/index.html 
[27] annotunzdy, “OpenSSL for iOS”, Retrieved April 2012 from the World Wide 
Web: http://techracho.bpsinc.jp/annotunzdy/2012_03_15/5259 
[28] x2on, “OpenSSL-for-iPhone”, Retrieved April 2012 from the World Wide Web: 
https://github.com/x2on/OpenSSL-for-iPhone 
[29] “GitHub · Social Coding”, Retrieved July 2012 from the World Wide Web: 
https://github.com/ 
[30] “guardianproject/openssl-android”, Retrieved July 2012 from the World Wide 
Web: https://github.com/guardianproject/openssl-android 
35 
	 	
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用
價值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是
否適合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評
估。 
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□ 未達成目標（請說明，以 100 字為限） 
□ 實驗失敗 
□ 因故實驗中斷 
□ 其他原因 
說明： 
 
 
 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100 字為限） 
 
 
 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
 
儘管我們對於行動雲端運算有著絕佳的設想，但讓使用者困擾的問題卻始終
存在。首先，當使用者將涉及到個人隱私的資料存放在雲端時，就會產生信
任和隱私保護的問題；再者，由於行動終端裝置的電池容量與計算能力限
制，使得需要大量運算的資訊安全演算法變得更具挑戰性。本計畫所發展之
技術，正適以彌補此一重大缺口，具有高度進一步發展之可能性。 
 
  
附件二	
37 
	 	
時在學期中，本人只能參加一天的行程。早上 9 點鐘是美國西北大學 Alok N. 
Choudhary 教授的 keynote speech，講題是“Discovering Knowledge from Massive 
Social Networks and Science Data - Next Frontier for HPC”，Choudhary 教授報告了近
來他們利用雲端計算等新技術，應用在各個科學領域，所獲得高度成功的研究成
果，相當引人入勝。午餐過後則由業界人士跟與會大眾報告了在工業界所遭遇到
的重大問題，以及他們解決的心路歷程，包括來自加拿大電信商 TELUS 的 Ali El-
Haraki 報告的 “Small/Medium Enterprises Driving Innovation on Cloud 9”，以及來自
華為公司的 Guoli Yin 所報告的“Data Center Network Infrastructure”，都讓人耳目一
新，吸收到了許多在學校裡無法接觸到的觀點，頗有不虛此行的感覺。 
我們的論文“COCA: Computation Offload to Clouds using AOP”被安排在 5/15 星
期二下午 Session 4C 發表，獲得了與會大眾熱烈的迴響。接下來則是來自日本東
京大學的博士生 Ting Chen 報告他們所實做的一個系統“ParaLite: Supporting 
Collective Queries in Database System to Parallelize User-Defined Executable”，這個
題目也是本人目前正在發展的，所以在報告後聽眾裡有包含本人在內的研究學者，
與報告者進行了約半個小時的深入討論，收獲頗豐。晚宴時巧遇工研院雲端中心
闕志克主任同桌進餐，也進行了些研究相關的討論。 
 
2、 參加會議心得與建議 
本次 CCGrid 2012 會議中的數個精彩演講，讓本人覺得相當值回票價 。近年
來雲端計算崛起，實在是值得國內學者進一步深入研究的議題。因為這些研究對
於雲端計算典範是否能成功，有著決定性的影響力。政府目前非常重視在雲端計
算相關領域的研發，也投入了相當高的研發經費，如果學界能好好利用這個機會，
假以時日台灣必能在此領域獲得豐碩的研發成果，達到世界一流的水準。 
今年 CCGrid 的與會者有許多來自歐美及日本的博士班研究生，他們認為參加
一流的研討會絕對是進步的最佳方法之一。在這趟出差旅行中，本人在研究上獲
得了許多先進的寶貴意見，這實在是非常有助於未來本人在此領域上更進一步的
突破與改進。在此感謝台灣大學、國科會及 Intel-台大創新研究中心，給予本人這
個機會能夠更加深入瞭解目前雲端計算的專家學者之主流研究方向。 
 
3、 攜回資料 
會議論文集 
 
1 
 
出差期間：101年 5月 14日至 5月 17日 
事由：參加第十二屆 IEEE/ACM國際叢集、雲端、及網格計算會議 (CCGrid 
2012—The 12th IEEE/ACM International Symposium on Cluster, Cloud, and 
Grid Computing)。 
出差時間表： 
5/14 由台灣桃園機場經日本東京及美國華府轉機前往加拿大渥太華 
5/14 - 16 抵達加拿大渥太華，參加 CCGrid 2012 
5/16 搭機經美國華府及日本東京轉機返回台灣 
5/17 抵達台灣桃園機場 
 
 
1、 參加會議過程 
CCGrid 會議是叢集和網格計算研究領域每年發表最新研究成果和展示最新技
術發展的主要國際會議。CCGrid 的重點在各式科學計算、工業和商業應用的叢集
和網格計算系統。CCGrid 會議鼓勵來自學術界、工業界、實驗室、以及電子商務
的研究者、開發者、和使用者的參與，驅動叢集和網格計算研究領域未來的研究和
應用。近年來由於雲端計算的興起，CCGrid 也將範圍擴張至雲端計算，更名為叢
集、雲端、與網格計算會議，每年約在五月份舉行，由 IEEE及 ACM共同贊助。 
今年 CCGrid 在加拿大渥太華舉行，大會主席是當地的 Shikharesh Majumdar
教授，議程主席則是 Pavan Balaji教授與 Rajkumar Buyya教授。今年共收到了 302
篇文章，錄取了其中 83 篇，錄取率為 27.5%，可說是競爭相當激烈，水準相當不
錯的會議。 
時在學期中，本人只能參加一天的行程。早上 9 點鐘是美國西北大學 Alok N. 
Choudhary 教授的 keynote speech，講題是“Discovering Knowledge from Massive 
Social Networks and Science Data - Next Frontier for HPC”，Choudhary教授報告了近
來他們利用雲端計算等新技術，應用在各個科學領域，所獲得高度成功的研究成果，
相當引人入勝。午餐過後則由業界人士跟與會大眾報告了在工業界所遭遇到的重大
問題，以及他們解決的心路歷程，包括來自加拿大電信商 TELUS 的 Ali El-Haraki
報告的 “Small/Medium Enterprises Driving Innovation on Cloud 9”，以及來自華為公
司的 Guoli Yin所報告的“Data Center Network Infrastructure”，都讓人耳目一新，吸
收到了許多在學校裡無法接觸到的觀點，頗有不虛此行的感覺。 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/09/29
國科會補助計畫
計畫名稱: 子計畫一:雲端計算及行動安全平台之建構與關鍵密碼模組之研究開發(2/2)
計畫主持人: 鄭振牟
計畫編號: 100-2218-E-002-009- 學門領域: 資訊
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
