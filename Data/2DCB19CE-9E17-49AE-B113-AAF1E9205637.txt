In order to improve the power of using SNPs in both association studies and linkage analysis,
this project aims to deal with the following critical issues.
Issue 1: Haplotype Inference. Efficient and accurate computational methods for inferring hap-
lotypes from genotype data are still in high demand. Most of the computational methods
consider three models. The first model is based on perfect phylogeny (Gusfield, 2002), as-
suming there is no recombination. The second model is based on pure parsimony (Brown and
Harrower, 2004; Gusfield, 2003; Wang and Xu, 2003), assuming the number of haplotypes is
minimum. The third model is based on genotype data with pedigree information (Li and Jiang,
2004), assuming the number of recombination in the pedigree is minimum. Theoretically, the
above methods do not give the approximation bound of their algorithms, and practically,
each of them is still unable to obtain satisfying error rates. As a consequence, sophisticated
algorithms for the haplotype inference problem are still desirable.
Issue 2: Tag SNPs Selection. Existing algorithms for tag SNPs selection do not consider the
influence from missing data, genotyping errors, and noise data. Our previous study (Huang
et al., 2004) pointed out that selecting additional tag SNPs is able to tolerate missing data.
However, it is still unable to cope with genotyping errors. Therefore, novel tag SNPs selection
algorithms that can avoid the influence from missing data and genotyping errors are still
required. Furthermore, noise data in the haplotype database may increase the difficulty of tag
SNPs selection. Advanced algorithms that can find tag SNPs from a set of noise data will be
more useful and practical.
Issue 3: Haplotype Block Partition Using Genotype Data. Current algorithms for haplo-
type block partition either assume that the input is haplotype data or combine existing haplo-
type inference algorithms with their block partition algorithms (Zhang et al., 2004). However,
the algorithms for haplotype inference so far fail to obtain satisfied low error rates. Since the
partition of haplotype blocks and selection of tag SNPs both based on inferred haplotypes, the
accuracy of these algorithms is still questionable. As a result, novel approaches that partition
haplotype blocks and select tag SNPs directly using genotype data will be more accurate and
practical for association studies and linkage analysis.
In this project, we aim to design algorithms and implement software to address above issues.
The objectives of this project are summarized as follows.
Algorithms and Software for Haplotype Inference. The problems of haplotype inference based
on different models have been shown to be NP-hard. We will design efficient algorithms for
2
ILP problem by Li and Jiang (2004). Based on the ILP problem, they proposed a branch-and-
bound algorithm to find the optimal solutions. We have reformulated their ILP problem into the
IQP problem, and thus the approximate solutions for the IQP problem can be also obtained by the
SDP-relaxation technique. In this way, the approximation bounds of the remaining open problems
could be found.
We have implemented the proposed algorithms in MatLab since matrix computation is the major
part of the SDP-relaxation technique. There exist many algorithms (e.g., the interior point method)
that can solve the SDP problem efficiently. Thus, we may implement each proposed algorithm
by incorporating existing algorithms for the SDP problems. Many simulated tools (e.g., Hudson,
2002) and public genotype data (e.g., Drysdale et al., 2000) are available and released. We have
conducted extensive experiments of our algorithms on both simulated and biological data. Based on
the experimental results, we revise our algorithms or fine tune our programs to obtain better error
rates than current methods.
Haplotype patterns
SNP
loci
S
12
S
1
P
1
P
3
P
2
P
4
: Major allele : Minor allele : Missing data
P
1
P
2
P
4
P
3
h
1
S
1
S
2
S
3
S
4
S
5
S
6
S
7
S
8
S
9
S
10
S
11
S
12
P
1
P
3
P
2
P
4
S
12
S
1
h
2
A
C
B
P
1
P
3
P
2
P
4
S
12
S
1
h
3
D
P
1
P
3
P
2
P
4
S
12
S
1
h
4
E
Figure 1: The influence of missing data and genotyping errors
In the second year, we have been emphasized on the selection of tag SNPs considering the
influence from missing data, genotyping errors, and noise data. Figure 1 illustrates the influence
of missing data and genotyping errors. In this figure, a haplotype block (Figure 1 (A)) defined
by 12 SNPs is presented. Each column represents a haplotype pattern (P1, P2, P3, and P4) and
each row represents a SNP locus (S1, S2, ..., and S12). The black and grey boxes stand for the
major and minor alleles at each SNP locus, respectively. Suppose we select SNPs S1 and S12 as tag
SNPs. Ideally, the haplotype sample h1 should be identified as haplotype pattern P3 unambiguously
(Figure 1 (B)). Consider haplotype samples h2 and h3 with one tag SNP genotyped as missing data.
h2 can be identified as haplotype patterns P2 or P3 (Figure 1 (C)), and h3 can be identified as
P1 or P3 (Figure 1 (D)). Moreover, suppose the SNP S1 of the haplotype sample h4 flips into its
complementary allele due to genotyping errors. h4 is mis-identified as pattern P1 (Figure 1 (E)).
4
Daly, et al., 2001; Patil et al., 2001). We have tested these algorithms on some of those data sets
and refined our algorithms to obtain better performance.
In the third year, we proposed a new framework for the selection of tag SNPs based on haplotypes
instead of on a single SNP. The tag SNPs found by this framework form a set of haplotypes completely
predictive of the alleles of all untyped SNPs. We refer to this problem as MTMH, which is defined
as follows: given a set of SNPs, find a minimum subset of SNPs (called tag SNPs) which defines a
set of haplotypes completely predictive of the alleles of all untyped SNPs.
In contrast to traditional association studies or linkage analysis, the genome-wide association
studies using tag SNPs make no assumption on the location of disease genes and is a promising
approach for discovering disease susceptibility genes of complex diseases.
However, due to the limited size of the genotyping array, it is difficult to type all tag SNPs to
capture the allele of each common SNP on the human genome. Therefore, investigators are usually
forced to select a subset of tag SNPs, to prioritize them, or to relax the threshold of LD. But
these approaches often sacrifice the statistical power in subsequent association studies or analysis.
In addition, due to the incompleteness of the HapMap data, less common SNPs (e.g., minor allele
frequencies less than 5%) which may induce the disease are usually ignored and not captured by
current tag SNPs selection programs. To capture these less common SNPs, it is expected that more
tag SNPs have to be used. Moreover, a portion of tag SNPs may not be always successfully typed and
these missing data may greatly decrease the power of using tag SNPs. To avoid the influence from
missing data, it has been shown that additional tag SNPs have to be included into the solution. As a
consequence, sophisticated methods for reducing the number of tag SNPs are still highly demanded.
A number of methods have been proposed to identify the minimum tag SNPs using different
criteria. Most methods are mainly based on the pairwise LD between two diallelic SNPs. However,
these pairwise-based methods tend to produce numerous tag SNPs having little or no correlation
with untyped SNPs. The singleton tag SNPs (i.e., SNPs having no correlation with others) can
even account for more than 50% in their solutions. A few initial studies overcome the limitation
of pairwise LD between two diallelic SNPs by further considering the multiallelic LD between a
diallelic SNP and a multimarker (multiallelic) haplotype. These approaches can reduce the number
of tag SNPs or increase the statistical power but come at the cost of heavy computational overhead,
due to the exponential number of possible haplotypes to be tested. Recently, de Bakker et al. use a
peel-back approach and a multiallelic LD statistic for selecting tag SNPs. The developed program
is incorporated into Haploview, which is the official tagging tool used in the International HapMap
project. However, Haploview is still quite inefficient, because the number of possible haplotypes to
be tested by the LD statsitic still grows exponentially with respect to the number of SNPs. As a
6
[4] Gusfield, D. 2002. Haplotyping as perfect phylogeny: conceptual framework and efficient solu-
tions. In Proc. RECOMB’02, pages 166–175.
[5] Gusfield, D. 2003. Haplotyping by pure parsimony. In Proc. CPM’03, Lecture Notes in Com-
puter Science, 2676:144–155.
[6] Helmuth, L. 2001. Genome research: map of the human genome 3.0. Science, 293(5530):583–
585.
[7] Huang, Y.-T., Zhang, K., Chen, T., and Chao, K.-M. 2004. Approximation algorithms for the
selection of robust tag SNPs. In Proc. WABI’04, pages 278–289.
[8] Hudson, R.R. 2002. Generating samples under a Wright-Fisher neutral model of genetic varia-
tion. Bioinformatics, 18:337–338.
[9] Patil, N., Berno, A.J., Hinds, D.A., Barrett, W.A., Doshi, J.M., Hacker, C.R., Kautzer, C.R.,
Lee, D.H., Marjoribanks, C., McDonough, D.P., et al. 2001. Blocks of limited haplotype diver-
sity revealed by high-resolution scanning of human chromosome 21. Science, 294:1719–1723.
[10] Stephens, M., and Donnelly, P. 2003. A comparison of bayesian methods for haplotype recon-
struction from population genotype data. Am. J. Hum. Genet., 73:1162–1169.
[11] Wang, L., and Xu, Y. 2003. Haplotype inference by maximum parsimony. Bioinformatics,
19(14):1773–1780.
[12] Zhang, K., Deng, M., Chen, T., Waterman, M.S., and Sun, F. 2002. A dynamic programming
algorithm for haplotype partitioning. Proc. Nat. Acad. Sci., 99(11):7335–7339.
[13] Zhang, K., Sun, F., Waterman, M.S., and Chen, T. 2003. Haplotype block partition with
limited resources and applications to human chromosome 21 haplotype data. Am. J. Hum.
Genet., 73:63–73.
[14] Zhang, K., Qin, Z.S., Liu, J.S., Chen, T., Waterman, M.S., and Sun, F. 2004. Haplotype
block partition and tag SNP selection using genotype data and their applications to association
studies. Genome Research, 14:908–916.
8
SNP ST .
For the example in Figure 1, the set of SNPs C ′ = {S1, S2, S3} is one feasible solution for MHTP
but the minimum solution is C ′ = {S1, S3}, because the haplotype (0, 0) composed of SNPs S1 and
S3 perfectly co-occurs with all minor alleles at SNP S6. We also say that a set of SNPs C ′ can
replace a SNP ST if there exists a haplotype defined by SNPs in C ′ having perfect LD with SNP
ST .
Theorem 1. The MHTP problem is NP-hard.
Proof. We make a reduction from an NP-hard problem called Set Cover to the MHTP problem with
a reduction technique similar to Bafna et al (2003). The set covering (SC) problem is defined as
given a collection C of subsets of k elements, find a minimum subcollection C ′ ⊂ C (called set cover)
such that each element appears in at least one subset of C ′. Given an instance of the SC problem, a
collection C = {C1, C2, ..., Cn} of elements {E1, E2, ..., Ek}, we construct an instance of the MHTP
problem by first creating k haplotypes (h1 to hk) with n SNPs (S1 to Sn). Each element Ei ∈ Cj
produces a major allele on haplotype hi at SNP Sj and the remaining positions are all minor alleles.
Then we construct an additional haplotype hk+1 with all minor alleles from SNPs S1 to Sn. Finally,
we construct the target SNP to be replaced Sn+1 with major alleles only occurred in haplotypes h1
to hk and one minor allele occurred in haplotype hk+1.
Example. Given an instance of the SC problem C = {C1, C2, C3} over elements
{1, 2, 3, 4, 5}, where C1 = {1, 2, 5}, C2 = {3, 4}, C3 = {1, 4}, we construct 6 haplo-
types composed of 4 SNPs, where h1 = (0, 1, 0, 0), h2 = (0, 1, 1, 0), h3 = (1, 0, 1, 0),
h4 = (1, 0, 0, 0), h5 = (0, 1, 1, 0), and h6 = (1, 1, 1, 1),
Note that the additional haplotype (i.e., hk+1) contains all minor alleles at all SNP loci and the
SNP to be replaced (i.e., Sn+1) has only one minor allele occurred in hk+1. Thus, the haplotype hk+1
defined by SNPs S1 to Sn has perfect LD with the minor allele at Sn+1. For the above example, the
haplotype (1,1,1) defined by the first three SNPs indicates the occurrence of minor allele at SNP S4
and thus SNP S4 can be replaced by haplotype (1,1,1). We then show that the minimum set cover
for SC implies a minimum subset of SNPs which can replace SNP Sn+1 for MHTP, and vice versa.
Example. For the sample example, the minimum set cover for SC is C ′ = {C1, C2},
which covers all elements E = {1, 2, 3, 4, 5}. On the other hand, the minimum subset of
SNPs which can replace SNP S4 in the MHTP problem is C∗ = {S1, S2}, since haplotype
(1, 1) defined by SNPs S1 and S2 can indicate the occurrence of minor allele at SNP S4
(i.e., haplotype (1, 1) has perfect LD with SNPs S4).
10
algorithm (referred to as MHTagger) is given below.
Algorithm: MHTagger(C, ST )
1 Construct HT and H¯T containing minor and major alleles for SNP ST , respectively.
2 Identify the set of SNPs C ′ ⊆ C which are consistent with SNP ST .
3 For each SNP Si ∈ C ′, construct Hi ⊂ H¯T containing alleles complement to those in HT .
4 R← φ
5 while H¯T 6= φ and C ′ 6= φ do
6 Let Sj be the SNP Si ∈ C ′ that maximizes |Hi ∩ H¯T |.
7 H¯T ← H¯T −Hj
8 C ′ ← C ′ − Sj
9 R← R⋃Sj
10 end of while
11 if H¯T 6= φ
12 return φ
13 else
14 return R
Theorem 2. The MHTagger algorithm gives a solution within a factor of O(log k) of the optimal
solution.
Proof. Note that Lines 1-3 reduce MHTP to an instance of the set-covering (SC) problem and Lines
4–11 solve the instance of SC by a greedy algorithm. The greedy algorithm for solving the SC
problem has been shown to have O(logn) approximation, where n is the number of elements to be
covered. The number of elements (to be covered in the SC problem) corresponds to the number
of haplotypes in H¯T in the MHTP problem, where |H¯T | < |H| = O(k). Therefore, the MHTagger
algorithm also gives a solution of O(log k) approximation for the MHTP problem.
Extension for Handling Missing Data
In reality, a portion of SNPs may not be always typed successfully and these missing SNPs can
greatly reduce the power of using tag SNPs for association studies. For the example shown in
Figure 1, although the minimum solution is C ′ = {S1, S3}, we would fail to predict the allele at
SNP S6 if any of the two SNPs is missing. The negative effects from missing data can be avoided
by selecting a slightly larger set of SNPs for genotyping. Consequently, we extend the MHTagger
algorithm for tolerating a fixed amount of missing SNPs, because the missing rates of the genotyping
12
Appendix B: Algorithms for the Selection of Tag SNPs by
Predictive Haplotypes
In this appendix, we study the problem of MTMH defined as follows: given a set of SNPs, find a
minimum set of tag SNPs which defines a set of haplotypes completely predictive of the alleles of all
untyped SNPs. The MTMH problem is divided into three subproblems which are separately solved
in the following three stages: (1) find a minimum set of tag SNPs based on pairwise perfect LD
between diallelic SNPs; (2) for each of the found tag SNP, identify a minimum length haplotype
having perfect LD with the tag SNP by solving the MHTP problem; (3) select a minimum subset of
tag SNPs which defines a set of haplotypes completely predictive of alleles of all removed tag SNPs.
In the first stage, we describe a linear-time algorithm for finding a minimum set of tag SNPs based
on pairwise perfect LD. The second stage iteratively solves the MHTP problem by setting each tag
SNP as the target SNP to be replaced and running the MHTagger algorithm to find a haplotype
predictive of the alleles at the target SNP. The last stage is shown to be another NP-hard problem
and two algorithms are presented.
Stage 1: Finding a Minimum Set of Tag SNPs by Pairwise Perfect LD
The first stage of our algorithm solves the problem of finding a minimum set of tag SNPs based on
pairwise perfect LD between diallelic SNPs, which is defined as follows: given a set of SNPs find
a minimum subset of SNPs (called tag SNPs) such that each untyped SNP has perfect LD with
some tag SNP. A generalization of this problem with arbitrary LD setting (non-perfect LD) has
been shown to be NP-hard and numerous methods have been proposed. Existing methods usually
take O(n2k) time, where n is the number of SNPs and k is the number of haplotypes, due to the
need of computing LD (r2) between all pairs of SNPs. We observe that SNPs in perfect LD usually
have identical 0/1 (major/minor alleles) encoding in all haplotype samples. Instead of explicitly
computing r2 for all pairs of SNPs, we consider SNPs with identical encoding to be perfect LD.
Although this looks like a more stringent requirement, our experimental results indicate that the
solution found by this method is the same as those found by other programs based on explicitly
evaluating r2 = 1. This is mainly due to the sufficiently large sample size in real data sets, which lead
to different frequencies of major and minor alleles at each SNP. Thus, any two SNPs with r2 = 1
have identical allele pattern when encoded into 0/1 representation. For example (see Figure 2),
SNPs S1 and S2 are in perfect LD and they contain the same allele pattern (0,0,1,0) observed at
all haplotypes. Note that this stringent requirement satisfies various definitions of perfect LD (e.g.,
r2 = 1, D′ = 1, or no-four-gamete property).
14
running the MHTagger algorithm. The worst case of the MHTagger algorithm takes place when
the target SNP to be replaced ST has only one haplotype carrying the minor allele at this locus,
and all other haplotypes carrying major alleles. Thus, we have to select a set of SNPs which
produces complementary alleles for remaining (k − 1) haplotypes. Note that the greedy manner of
MHTagger guarantees that each selected SNP incurs at least one complementary allele for those
(k − 1) haplotypes. Therefore, MHTagger outputs at most k − 1 SNPs as the solution. As a
consequence, there are at most k − 1 incoming edges produced for each vertex in the replacement
graph.
Stage 3: Reserving a Minimum Subset of Tag SNPs Based on the Replace-
ment Graph
The input of the last stage is the replacement graph produced in the second stage. Denote the set
of all tag SNPs in the replacement graph as C. The replacement graph gives us the information
as to which tag SNPs in C can be replaced. Hence we can select a minimum subset of tag SNPs
C ′ ⊆ C such that the alleles of each removed tag SNP (i.e., C−C ′) can be predicted by a haplotype
defined by tag SNPs in C ′. However, not all SNPs can be safely removed because tag SNPs of these
removed SNPs may be also removed (e.g., SNPs S4, S5, and S6 in Figure 3). That is, the alleles of
these dependent SNPs can not be completely reconstructed if all of them are removed from the final
solution. The Haploview resolves this problem by sequentially removing a tag SNP on the basis of
the remaining SNPs in a peel-back manner. However, the tag SNPs removed in the early stage could
be used to replace more tag SNPs, and this global dependent relation is not considered. In the last
stage, we introduce an improved algorithm which considers the overall dependency among all tag
SNPs and selects a smaller set of tag SNPs based on the replacement graph as the final solution. In
the following, we describe two lemmas regarding the set of tag SNPs which can be safely removed.
Lemma 2. A tag SNP with incoming edges can be safely removed if it is not contained within a
cycle in the replacement graph.
Proof. A tag SNP with incoming edges in the replacement graph implies that there exist some other
tag SNPs which can replace it. For example, SNP S1 in Figure 3 can be directly removed from the
final solution since it can be replaced by SNPs S2 and S3. On the other hand, if the tag SNP is
contained in a directed cycle, it can not be safely removed, because each SNP is dependent on others
in the cycle for predicting its alleles. For example, SNPs S4, S5, S6 form a directed cycle. If all of
them are removed, we can not reconstruct the alleles of these SNPs even though we type all other
tag SNPs.
16
minimum subset of vertices V ′ ⊆ V such that V ′ contains at least one vertex for every directed cycle
in G. Let V ′ be a minimum solution of the MFVS problem. Note that each vertex in a directed
cycle of G has one incoming and one outgoing edges both contained in this cycle. The removal of
incoming edges of all vertices in V ′ can also break all cycles in G, which implies that V ′ is also a
minimum solution of MTSR. Therefore, MTSR can be solved by applying existing algorithms for
MFVS.
The best approximation algorithm for the MFVS problem gives a solution within a factor of
O(log v ∗ log log v) of the optimal solution, where v is the number of vertices. However, it requires
solving a linear-programming instance with exponential number of constraints, which is impractical
when applying on genome-wide data sets with millions of SNPs. To efficiently break all cycles in the
replacement graph, we turn to solve a relaxed problem which asks for a minimum subset of vertices
such that the removal of their incoming edges eliminates all back edges in the replacement graph. An
edge (u, v) connecting from vertex u to vertex v is said to be a back edge if vertex v is the ancestor
of vertex u in the depth-first-search (DFS) traversal of the graph. Note that the DFS traversal in a
graph produces back edges if and only if the graph has cycles, which implies that all cycles can be
indirectly broken by removing all back edges. Consequently, the solution of this relaxed problem is
a feasible solution to MTSR.
This relaxed problem can be solved in polynomial time since each back edge (u, v) uniquely
corresponds to one incoming edge of the vertex v and we require that only incoming edges of a
vertex can be removed. In the following, we describe an algorithm which removes all back edges
in the replacement graph by revising the DFS algorithm. During the DFS traversal, all incoming
edges of a vertex v are removed once a back edge (u, v) connecting from a descendant vertex u to
an ancestor vertex v is found. Therefore, the removal of incoming edges of vertex v eliminates the
back edge (u, v) and indirectly breaks cycles associated with this back edge. We repeat this process
until all back edges in this replacement graph are found and removed.
We integrate this algorithm with the FastPerfectLD and MHTagger algorithms introduced in
previous subsections and develop a program called HapTagger to solve all subproblems of MTMH
in three stages. After the last stage, the set of vertices in the replacement graph without incoming
edges indicate those tag SNPs of the output. A pseudo code of HapTagger is given below.
Algorithm: HapTagger(C)
1 Run FastPerfectLD to find a minimum set of tag SNPs C ′ ⊆ C
2 Construct a replacement graph G with vertices corresponding to SNPs in C ′
3 for each SNP Si ∈ C ′
18
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                          96 年 12 月 24 日 ???
 
報告人姓名  趙坤茂  劉效飛  陳芃安 
 
服務機構
及職稱 
台灣大學資訊工程系教授、博三、
碩二 
     時間 
會議 
     地點 
96 年 12月 17日至 19日 
 
日本 仙台 
本會核定
補助文號
NSC 96-2221-E-002 -034 - 
會議 
名稱 
 (中文) 第十八屆國際演算法及計算會議 (ISAAC 2007) 
 (英文) The 18th International Symposium on Algorithms and Computation 
發表 
論文 
題目 
 (中文) 計算有長度限制的最高分數區段之演算法 
 (英文) Algorithms for Computing the Length-Contrained Max-Score Segments 
with Applications to DNA Copy Number Data Analysis 
 
一、參加會議經過 
ISAAC是演算法領域重要的會議之一，這次的作品主要是探討在某些特定函數下，找出
最大函數值區段的有效演算法，我們所提出的方法改進了之前這問題最好的解法。 
這次會議有兩百多篇送審，共錄取約七十七篇，我們對其中多篇都極感興趣，因此幾乎
所有時間有大半在聽報告，增廣了不少見聞。 
仙台位於日本東北，這次會議的前一天，正好有個慶祝該研討會創辦人 Prof. Nishizeki
的祝壽研討會，我 12月 16日下午抵達仙台時，該研討會尚未結束，因此也去參加了後半段。
當天晚上是 ISAAC 2007 的正式歡迎餐會，我遇到了此次國內出席老師：李德財教授、許聞
廉教授、顏嗣鈞教授及呂學一教授。此外，當晚的 reception 是個 buffet，在走動間正好可和
幾位國際好友交流一下彼此的感想。 
隔天的會議由 Dr. Pankaj K. Agarwal開場，他提到幾何等高線資料分析上許多有趣的計算
問題，也開啟了我對該領域新的認識。然後就是一連串的論文發表，我們大多選擇有關
computational / combinatorial optimization的課題，收穫非常多。第二天由 Dr. Robin Thomas
給了 Keynote speech，精簡的演講讓人印象深刻。附上晚宴照片於下一頁，本研討會晚宴照慣
例由 Prof. Nishizeki開唱。 
我們的報告在第三天下午，報告的 session論文有四篇，我們排在第一篇，報告非常順利，
有幾位學者還特地留下來和我們進一步討論，提供了許多好的看法。 
我也趁這次出席會議，和一些朋友討論學術相關事宜，有位希臘學者 Evanthia 
Papadopoulou十年前參加 ISAAC時曾遇過，這次晚宴時正好坐在一起，暢談了許多彼此的見
解， 
會議於 12月 19日傍晚結束，我於 12月 20日中午，趕往仙台機場搭機回台，寫下美好
的句點。 
表 Y04 
