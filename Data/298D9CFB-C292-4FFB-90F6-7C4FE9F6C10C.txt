 2
二、緣由與目的 
 
Recent studies show that the patterns of linkage 
disequilibrium (LD) observed in human chromosome 
reveal a block-like structure; the high LD regions are 
called haplotype blocks. The existence of haplotype 
block structures has serious implications for associ- 
ation-based methods in mapping of disease genes. A 
Single Nucleotide Polymorphism or SNP is a DNA 
sequence variation occurring when a single nucleotide 
in the genome di®ers between members of species. In 
this project, we propose several efficient algorithms 
for identifying haplotype blocks in the genome. 
Especially, we develop a dynamic programming 
algorithm for haplotype block partitioning to minimize 
the number of tagSNPs required to account for most 
of the common haplotypes in each block. We imple- 
ment these algorithms and analyze the chromosome 
21 haplotype data given by Patil etal. [13]. As a result, 
we identify a total of 2,432 blocks (3,333 tagSNPs) 
which is 41.2% (27%) smaller than those identified by 
Patil et al. or Zhang et al. [17]. 
 
2.1 SNP, Genotype, Haplotype 
 
Mutation in DNA is the principle factor resulted 
in the phenotypic diﬀerences among human beings, 
and SNPs (single nucleotide polymorphism) are the 
most common mutations, hence it is fundamental to 
complete a map of all SNPs in the human population. 
Global pattern of human DNA sequence variation 
(haplotypes) defined by common SNPs have important 
implications for identifying disease association and 
human traits [5, 14]. Recent studies have shown that 
the patterns of linkage disequilibrium (LD) observed 
in human chromosome reveal a block-like structure [5, 
6, 13], and therefore the entire chromosome can be 
partitioned into high LD regions interspersed by low 
LD regions. The high LD regions are called haplotype 
blocks and the low LD ones are referred to as recomb- 
ination hotspots. There is little or even no occurrence 
of recombination within a haplotype block, and the 
SNPs are highly correlated in the block. Furthermore, 
each haplotype block, in which the genome is largely 
made up of regions of low diversity, can be character- 
ized by a small number of SNPs, which are referred to 
as tagSNPs [9]. This characteristic is very important 
and useful for medicine or therapy. 
Studying on SNP and haplotype blocks not only 
decrease the cost for detecting inherited diseases but 
also has many contributions for classifying the race of 
human and researching on species evolution. Our ulti- 
mate goal is to select haplotype block designations 
that best capture the structure within the data. 
 
2.2 Diversity functions 
 
Several operational definitions has been used to 
identify haplotype-block structures, including LD- 
based [6, 15], recombination-based [8, 16], informa- 
tion-complexity-based[2,10,7]and diversity-based [4, 
13, 18] methods. The result of block partition and the 
meaning of each haplotype block may be diﬀerent by 
using diﬀerent measuring formula. For simplicity, 
haplotype samples can be converted into haplotype 
matrices by assigned major alleles to 0 and minor 
alleles to 1. Given an m × n haplotype matrix A, a 
block A(i, j) (i, j are the block boundaries) of matrix A 
is viewed as m haplotype strings; they are partitioned 
into groups by merging identical haplotype strings 
into the same group. The probability pi of each 
haplotype pattern si, is defined accordingly such that 
pi= 1. As an example, Li [11] proposes a diversity 
formula defined by 
 
Note that δD(S) is the probability that two haplotype 
blocks chosen at random from S are different from 
each other. Other diﬀerent diversity functions have 
been discussed in the literatures [4, 12, 13, 18]. 
 
Definition 1 (haplotype block diversity) 
Given an interval [i, j] of a haplotype matrix A, a 
diversity function, δ : [i, j] → δ(i, j)  R is an evalu- 
ation function measuring the diversity of the 
submatrix A(i, j).  
 
Diversity measurement usually reflects the activity of 
recombination events occurred during the evolutionary 
process. Generally, haplotype blocks with low diver- 
sity indicates conserved regions of genome. 
 
Definition 2 (monotonic diversity)  
A diversity function δ is said to be monotonic if, for 
any haplotype block (interval) I = [i, j] of A, it follows 
that δ(i0, j0) ≤ δ(i, j) whenever [i0, j0]  [i, j]; that is, 
the diversity of any subinterval of I is always no larger 
than the diversity of I.  
 
It is easily verified that many diversity functions, in- 
cludeing the diversity function δD(S) defined by (1), 
are monotonic. For a diversity-based test, methods can 
be classified into two categories: those that divide 
strings of SNPs into blocks on the basis of the decay 
of LD across block bound aries and those that 
delineate blocks on the basis of some haplotype- 
diversity measure within the blocks. Patil et al. [13] 
defined a haplotype block as a region in which a 
fraction of percent or more of all the observed 
haplotypes are represented at least n times or at a 
given threshold in the sample. They applied the 
optimization criteria outlined by Zhang et al. [17, 18] 
and describe a general algorithm that defines block 
boundaries in a way that minimizes the number of 
tagSNPs that are required to uniquely distinguish a 
certain percentage of all the haplotypes in a region. 
Patil etal. have identified a total of 4,563 tagSNPs and 
a total of 4,135 blocks to define the haplotype 
 4
needs 2 tagSNPs (i.e. column 2 and column 4. ) 
Our strategy for selecting the tagSNPs in 
haplotype blocks is as the following. First, the 
common haplotypes are grouped into k distinct 
patterns in each block. After the missing data are 
assigned, we decide the least number of tagSNPs 
required based on the least number of haplotype 
patterns which needed to be distinguished such that 
haplotypes in these patterns contain at least ρ 
percentage of the unambiguous haplotypes in the 
blocks. Finally, we select a loci set which consists of 
minimum number of SNPs on the haplotypes such that 
at least ρ percentage of the unambiguous haplotypes 
can be uniquely distinguish; exhaustive searching 
method can be used very eﬃciently since the number 
of tagSNPs needed for each block is usually modest in 
the situation. The exhaustive searching algorithm 
which shown in Figure 2 enumerates next t-combi- 
nation in lexicographic order to generate the next 
candidate tagSNP loci set until each pattern can be 
uniquely distinguish. 
 
3.2 A linear space algorithm for haplotype block 
Partitioning 
 
Our previous study [3], given an m × n haplotype 
matrix A and a diversity upper limitD, an O(nk) time 
dynamic programming algorithm is proposed for 
finding a maximized segmentation S consists of k 
feasible monotonic blocks with the diversity of each 
block < D. Assume the diversity function is mono- 
tonic, the recurrence relation is shown as follow: 
f (k, 1, j) = max{f (k, 1, j − 1), 
f (k − 1, 1, L[j] − 1) + j − L[j] + 1} 
The idea behind the recurrence relation is as follow: 
the k-th block of the maximal segment S in [1, j] 
either does not include site j; otherwise, the block 
[L[j], j] must be the last block of S. Note that f (k, 1, j) 
can be determined in O(1) time suppose f (k − 1, 
1, ·)’s and f (k, 1, 1..(j − 1))’s being ready. It follows 
that f (k, 1, ·)’s can be calculated from f(k − 1, 1, ·)’s, 
totally in O(n) time. Thus a computation ordering 
from f (1, 1, ·)’s, f (2, 1, ·)’s, . . . , to f (k, 1, ·)’s leads 
to the total of O(nk) time.We can apply the dynamic 
programming theory to general case and get the 
lemma 1. 
 
Lemma 1 Given a submatrix A’(i, j) of m × n 
haplotype matrix A and a diversity upper limit D, for 
all constrained interval [i, j*], i ≤ j*≤ j, find a 
segmentation consists of k feasible blocks such that 
the total length is maximized can be done in O(|j − i|k) 
time after the preprocessed left farthest markers, 
L[i]’s are prepared.
 6
first compute f (bk2c, i, x)’s and f (dk2e, x + 1, j)’s, for 
all x = i ∼ j, and put results into A array and B array. 
Then, we find a x∗ such that the total length of blocks 
in the left hand side and right hand side of x∗ is 
maximized. That is, find a x∗ such that f (bk2c, i, x∗)+f 
(dk2e, x∗+ 1, j) is maximized. Next steps we use 
recursive algorithm Lis(bk2c, i, x∗) and Lis(dk2e, x∗+ 1, 
j) to list bk2cblocks in [i, x∗] and dk2eblocks in [x∗ + 1, 
j]. 
In the algorithm, we use six global data structures 
involving arrays L, R, A, B, C and Y -list. L array and 
R array are used to store the good partner points L[i]’s 
and R[i]’s whichhave been calculated in preprocessing. 
Y-list is used to store the boundaries of k blocks. In 
addition, we use A array and B array to store the 
results of f (bk2c, i, x)’s and f (dk2e, x + 1, j)’s. During 
the computation of f (bk2c, i, x)’s and f (dk2e, x + 1, 
j)’s, we use a C array replacing a k × n table to store 
the temporary results that will be used to calculate 
further results. All the space of R, L, A, B and C array 
are n. The space of Y -list is k, k ≤ n in general case, 
so the space used by the algorithm is O(n). The time 
complexity of the algorithm is O(nk) as shown in the 
following by induction. Let T (n, k) denote the time 
needed for Lis(k, 1, n). Assume that T(n’, k’) ≤ c2n’k’ 
for all n’ < n, k’ < k. According to the algorithm, we 
have: 
 
Let c2= 3c1, the above inequality will come into exist- 
ence, so we can prove the time complexity of the 
algorithm is O(nk).                           □ 
Although we assume that the block diversity 
evaluation function we used here is monotonic, we 
can modify small part of the algorithm such that it can 
be apply to non-monotonic blocks. In the case of 
non-monotonic blocks, for each SNP markers i, we 
use Li to denote the set of all x such that [x, i] is a 
feasible haplotype block. Let L = nl =ni =1|Li |, l is the 
average number of |Li| for each marker i. It can be 
shown that the modified algorithm spends O(knl) time 
and O(nl) space. By a similar proof of argument as 
shown above, the correctness of the algorithm can also 
be shown. 
The experimental results of the algorithm for 
finding the maximized segmentation S consists of k 
feasible blocks based on the specific diversity 
threshold D have been shown in [3]. Due to the space 
constraints, our system crashes when the size of 
genome becomes too long. By using the result of this 
section, the system space constraints is resolved. The 
system now can handle an input size of 50Mb 
regardless any choices of k. The system has been fully 
tested and executed reliably. The interested reader can 
obtain the developed system on our web site [1]. 
 
3.3 Longest blocks partition using limited number 
of tagSNPs 
 
In this subsection, we show a dynamic program- 
ming algorithm to partition haplotype blocks with 
constraints on diversity and tagSNPs number. That is, 
we want to find the longest segmentation S containing 
blocks with the diversity of each block is less than D 
and the total tagSNPs number required for these 
blocks does not exceed a specific number t. The probl- 
em definition is shown in Problem 2. 
According to the haplotype block definition in 
Patil et al. [13], we know that the common haplotypes 
coverage evaluation function is not monotonic. That is, 
for each SNP marker j there will be a left farthest 
marker i so that [i, j] is the longest haplotype block 
among all blocks that terminated at site j , but some 
interval [I’, j] ⊂ [i, j] are not feasible blocks. Thus, 
before the computation, we need to preprocess the set 
of left good partners Lifor each SNP marker i, Li= 
{x|[x, i] is a feasible haplotype block}. Furthermore, 
we assume that the number of tagSNPs required for 
each feasible haplotype block is also precomputed. 
After the preprocessing, we can show that finding the 
longest blocks covered by t agSNPs can be found in 
O(tL) (or O(tnl)); here ∑tdenote the number of 
tagSNPs used, and L =ni=1|Li| denote the total number 
of feasible blocks.  
Let f (i, t) define the length of the longest 
segmentation of haplotype A(1, i) covered by t 
tagSNPs, and tag(i, j) denote the number of tagSNPs 
required for block which bounded by sites i and j. It is 
interesting to note that f (i, t) can be computed by the 
following recurrence: 
 
 8
 
The largest block contains 128 common SNPs, which 
is longer than the largest block (containing 114 SNPs) 
identified by Patil et al. and the same as in Zhang et al.. 
Tables 2 and 3 show more analysis data of our 
experimental results. 
    According to our experimental results, we can 
partition 38.55 percent of genome region into blocks 
which do not require any tagSNPs. This is because 
that most of these blocks just contain few common 
SNPs, and there are 80 percent of common haplotypes 
have the same haplotype pattern (compatible) in these 
blocks. We termed these SNP loci as noninformative 
markers because they are the same among most (80%) 
of population. These data also show that as length of 
the genome region covered increase, we need to 
increase more and more extra tagSNPs to capture the 
haplotype information of the blocks, and the number 
of zero-tagged blocks becomes fewer.  
Note that although the average length of 
non-zero-tagged blocksbecome shorter as the genome 
region covered increase, the average length of total 
blocks becomes longer. Figure 6-a shows the percent- 
age of tagSNPs we identified when blocks cover 
certain percent of genome region.  
According to experimental results, when blocks 
cover 70 percent of genome region, we just required 
19.1% of tagSNPs (about 635 tagSNPs) to capture the 
majority of information about haplotypes. This also 
indicates that our method discovers that only a few 
tagSNPs is needed to capture the most of genome 
region information. Figure 6-b shows the percentage 
of genome region covered increases while the 
tagSNPs we identified increase by 5 percent.  
Note that as the number of tagSNPs increase, the 
marginal percentage of genome region covered 
decreases. This indicates that, as the genome region 
covered increases, fewer common SNPs are covered 
by each tagSNP on average. Figure 6-c shows the 
number of tagSNPs need to increases, while the 
percentage of genome region covered increases by 5 
percent. We find that as the genome region covered 
increases much more tagSNPs is needed to capture the 
haplotypes information. Especially, when the genome 
region covered increases form 95% to 100%, we need 
to use another extra 1,029 tagSNPs, about 30.87% of 
the total tagSNPs. It is interesting to note that our 
method discovers the marginal utility of tagSNPs 
decreases as the genome region covered increases. 
Furthermore, we examine the influence of common 
haplotype coverage, ρ, on the block patterns. 
The coverage with 70%, 80%, and 90% are 
examined. When the required coverage is 90%, the 
total number of blocks increases to 3,227. The total 
number of tagSNPs required to distinguish these 
blocks increases to 6,806. The length of the largest 
block decreases to 92 SNPs. These results are also 
better than Zhang et al.’s (3,573 blocks and 7,536 
tagSNPs required). When the coverage is decreased to 
70%, the total number of blocks decreases to 2,406 
with the largest block containng 177 common SNPs, 
and the total number of tagSNPs required to 
distinguish these blocks decreases to 1,848. The 
blocks number will decrease to 2,267 if we require 
1,977 tagSNPs which is the same as in Zhang et al. 
[17].
 10
In this project, we present dynamic program- 
ming algorithms for haplotype blocks partitioning 
such that the total blocks length is maximized and the 
total tagSNPs required is minimized. We also show 
in Theorem 1 that finding longest k-block segment- 
ation with diversity constraints can be done in O(nk) 
time and O(n) space. In Theorem 2, we show that 
finding a maximum segmentation with constraints on 
diversity and tagSNPs number can be done in O(tnl) 
time. Compared with Patil et al.’s results, our method 
identifies longer blocks and the numbers of blocks 
and tagSNPs required is reduced by 41.2% and 27% 
for the haplotype data on chromosome 21. We also 
show that the results discovered by our method are 
superior to Zhang et al.’s [17]. Our method discovers 
that we just require a few tagSNPs to capture a large 
portion of genome region information.  
Instead of genotyping all of the SNP markers on 
the chromosome, one may wish to use only the 
genotype information on the tagSNP. Only about 
13.9% (3,333) of all of the SNPs (24,047) can 
account for 80% of the common haplotypes in each 
block. This also means that we can figure out the 
haplotype features of most population by just 
checking a few SNP markers. Thus, studying the 
tagSNPs can dramatically reduce the time and effort 
for genotyping, without losing much haplotype 
information. 
SNP is the most common DNA mutation that 
causes the phenotypic differences among human 
beings. The SNP number accounts for 0.74%(24,047) 
of the total length of human chromosome 21 (32.4 
Mb). Using the characteristic of tagSNPs, we show 
that 3,333 tagSNPs suffice to capture most of inform- 
ation about haplotypes on human chromosome 21. 
We are tempted to say that the compression ratios of 
the chromosome to the haplotype, and the haplotype 
to tagSNPs, are about 1,400 and 7.21. 
 
五、參考文獻 
 
1. Providence university SNP and haplotype 
research center. http://bioinfo.cs.pu.edu.tw/hap/. 
2. Eric C. Anderson and John Novembre. Finding 
haplotype block boundaries by using the 
minimum-description-length principle. Am. 
J. of Human Genetics, 73:336–354, 2003. 
3. Wen-Pei Chen, Tso-Ching Lee, and Yaw-Ling 
Lin. Haplotype block partitioning and tagSNP 
selection on human chromosome 21. In
 Proceedings of the International Computer 
Symposium 2006, pages 1278–1283, 
Taipei,Taiwan, Dec 04-06, 2006. 
4. D. Clayton. Choosing a set of haplotype tagging 
SNPs from a larger set of diallelic loci.Nature 
Genetics, 29(2), 2001. 
5. M. J. Daly, J. D. Rioux, S. F. Schafiner, T. J. 
Hudson, and E. S. Lander. High-resolution 
haplotype structure in the human genome. 
Nature Genetics, 29:229–232, 2001. 
6. S. B. Gabriel, S. F. Schaner, H. Nguyen, et al. 
The structure of haplotype blocks in the human 
genome. Science, 296(5576):2225–2229, 2002. 
7. G. Greenspan and D. Geiger. Model based 
inference of haplotype block variation. In 
Seventh Annual International Conference on 
Computational Molecular Biology (RECOMB), 
2003. 
8. R. R. Hudson and N. L. Kaplan. Statistical 
properties of the number of recombination 
events in the history of a sample of dna 
sequences. Genetics, 111:147–164, 1985. 
9. G. C. Johnson, L. Esposito, B. J. Barratt, et al. 
Haplotype tagging for the identification of 
common disease genes. Nat Genet., 29(2): 233 – 
7, Oct 2001. 
10. M. Koivisto, M. Perola, R. Varilo, W. Hennah, J. 
Ekelund, M. Lukk, L. Peltonen, E. Ukkonen, and 
H. Mannila. An mdl method for finding 
haplotype blocks and for estimating the strength 
of haplotype block boundaries. In 8th Pacific 
Symposium on Biocomputing (PSB), pages 
502–513, 2003. 
11. W.H. Li and D. Graur. Fundamentals of 
Molecular Evolution. Sinauer Associates, Inc, 
1991. 
12. Yaw-Ling Lin and Wei-Shun Su. Identifying 
long haplotype blocks with low diversity. In 
Proceedings of the 23rd Workshop on 
Combinatorial Mathematics and Computation 
Theory, pages 151{159, Changhua,Taiwan, Apr 
28-29, 2006. 
13. N. Patil, A. J. Berno, D. A. Hinds, et al. Blocks 
of limited haplotype diversity revealed by high 
resolution scanning of human chromosome 21. 
Science, 294:1719–1723, 2001. 
14. J. D. Rioux, M. J. Daly, M. S. Silverberg, K. 
Lindblad, H. Steinhart, Z. Cohen, et al. Genetic 
variation in the 5q31 cytokine gene cluster 
confers susceptibility to crohn disease. Nature 
Genetics, 29:223–228, 2001. 
15.  J.D. Wall and J.K Pritchard. Haplotype blocks 
and linkage disequilibrium in the human genome.
 Nature Reviews Genetics, 4(8):587–597, 2003. 
16. N. Wang, J. M. Akey, K. Zhang, R. Chakraborty, 
and L. Jin. Distribution of recombination 
crossovers and the origin of haplotype blocks: 
the interplay of population history, 
recombination, and mutation. Am. J. Human 
Genetics, 71:1227–1234, 2002. 
17. K. Zhang, M. Deng, T. Chen, M.S. Waterman, 
and F. Sun. A dynamic programming algorithm 
