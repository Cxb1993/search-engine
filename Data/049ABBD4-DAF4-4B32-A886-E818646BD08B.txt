  2
????????? 
The software reliability models are widely 
employed to assess the software reliability. 
However, since most software reliability models 
embed certain restrictions or assumptions, selecting 
an appropriate model based on the characteristics of 
the software projects is challenging. In order to 
locate the suitable model, two approaches are 
adapted. The first one is to design a guideline, 
which could suggest fitting models for software 
projects. The other is to select the one with the 
highest confidence after various assessments. 
Basically, these two approaches both require users 
to manually opt for candidates. The 
decision-making processes would be a huge 
overhead while the software projects are huge and 
complicated. 
In order to reduce such overhead, researchers 
proposed an alternative approach that can adapt the 
characteristics of failure processes from the actual 
data set by using neural networks. For example, 
Karunaithi et al. [11] applied some kinds of neural 
network architecture to estimate the software 
reliability and used the execution time as input, 
cumulative the number of detected faults as desired 
output, and encoded the input and output into the 
binary bit string. The results showed that the neural 
network approach was good at identifying 
defect-prone modules software failures. 
Khoshgoftaar et al. [14-15] ever used the neural 
network as a tool for predicting the number of faults 
in programs. They introduced an approach for static 
reliability modeling and concluded that the neural 
networks produce models with better quality of fit 
and predictive quality. In addition, Cai et al. [19] 
examined the effectiveness of the neural network 
approach in handling dynamic software reliability 
data overall and present several new findings. They 
found that the neural network approach is more 
appropriate for handling datasets with `smooth' 
trends than for handling datasets with large 
fluctuations and the training results are much better 
than the prediction results in general. 
Next, we briefly introduce the concept of the 
neural networks. Neural networks are learning 
mechanisms that can approximate any non-linear 
continuous functions based on the given data. In 
general, neural networks consist of three 
components as follow:  
1. Neurons: each neuron can receive signal, process 
the signals and finally produce an output signal. Fig. 
1 depicts a neuron, where f is the activation function 
that processes the input signals and produces an 
output of the neuron, x are the outputs of the 
neurons in the previous layer, and w are the weights 
connected to the neurons of the previous layer. 
2. Network architecture: The most common type of 
neural network architecture is called feed-forward 
network shown in Fig. 2. This architecture is 
composed of three distinct layers: an input layer, a 
hidden layer, and an output layer. Note that the 
circles are represented as neurons and the 
connection of neurons across layers is called the 
connecting weight. 
3. Learning algorithm: The algorithm describes a 
process to adjust the weights. During the learning 
processes, the weights of network are adjusted to 
reduce the errors of the network outputs as 
compared to the standard answers. The 
back-propagation algorithm is the most widely 
employed one. In back-propagation algorithm, the 
weights of the network are iteratively trained with 
the errors propagated back from the output layer. 
Subsequently, we describe the learning algorithm 
of the neural network in a mathematical form. The 
objective of the neural networks is to approximate 
an non-linear function that can receive the vector 
(x1, …, xn) in RN and output the vector (y1,.., ym) in 
RM. Thus, the network can be denoted as: 
( )y F x= ,              (1) 
where x=(x1, …, xn) and y= (y1,.., ym). The values of 
yk are given by 
0
1
( ), 1, ,
H
k k jk j
j
y g b w h k M
=
= + =∑ K ,    (2) 
where 0
jkw  is the output “weight” from hidden 
layer node j to output layer node k, bk is the bias of 
the node k, hj is the output of the hidden layer, and g 
is an activation function in output layers. The values 
of the hidden layer are given by 
1
1
( ), 1, ,
N
j j ij i
i
h f b w x j H
=
= + =∑ K ,    (3) 
where 1ijw  is the input “weight” from input layer 
node i to hidden layer node j, bj is the bias of the 
node in the hidden layer, xi is the value at input 
node i, and f is the activation function in hidden 
layer. 
The approximated function of the neural 
networks can be considered as some compound 
functions, which can be rewritten as nested 
functions, such as f(g(x)). Because of this feature, 
the neural network can be applied to software 
reliability modeling since software reliability 
modeling is likely to build a model to explain the 
software failure behavior. 
As we mentioned above, the objective function 
of the neural network can be considered as 
compound functions. In other words, if we can 
derive a form of compound functions from the 
conventional software reliability models, we can 
  4
the hidden layer at the same time to achieve 
combinational models. 
More models selected will result that the 
combinational model has more accurate but it will 
take much more computation time. In this example, 
we will try to combine the GO model, the 
Delay-S-Shaped, and the logistic growth curve 
model. We use1 xe−− , 1 (1 ) xx e−− + , and )1(1 xe−+  
as the activation functions in the hidden layer. The 
output of the network is: 
11 12
13
21
21 22 12( ) (1 ) (1 (1 ) ) 1
w t w t
w
wy t w e w w t e
e
− −
−= − + − + + + , (18) 
where 1 2,j jw w  are the weights of the network. 
Note that 2 jw  are represented as the weight of each 
individual models and they are determined by the 
training algorithm (refer to Appendix for the proof 
of this deduction).  
This combinational model can adapt the 
characteristic of the given data set. Hence, this 
model itself can be considered as a general model 
for all software projects. Note that this method 
differs from those proposed by Lyu et al., since their 
model only combined the results from various 
models based on assigned weights. Our proposed 
approach automatically determines the weight of 
each model based on the characteristic of the given 
data set. 
2.3 ????????? 
As mentioned earlier, we have shown that the 
proposed approach is achievable. In this section, the 
implementation of the proposed neural-network- 
based models will be described. The following steps 
are required to apply our approach for software 
reliability prediction. 
1. Analyze the assumptions of the software project 
and if there is a suitable model, select the model. If 
there is no suitable model, select those models 
which partially meet the assumptions of project. 
2. Construct the neural network of selected models 
by designing the activation functions and bias. 
3. Given n fault-detection time interval data x1, 
x2, …, xn, we accumulate the execution time and 
divide it into 100 time units t1, t2, …, t100 , and then 
calculate the number of failures, T1, T2, …, T100. 
4. Feed the pairs of { ti, Ti } to the network to train 
the network by the back-propagation algorithm 
which is mentioned in the previous section. 
5. When the network trained, feed the future testing 
time to the network, and the network output is 
represented as the forecasting number of faults in 
the future. 
By these five steps, we can use the neural- 
network-based models to assess the software 
reliability, predict the total faults to be detected in 
the future. Note that in the Steps 2, the activation 
functions should be designed under some conditions 
which are (1) continuous and (2) differentiable 
everywhere, since we use the back-propagation 
algorithm in the Steps 4.  
 
?????? 
To validate the performances of our proposed 
approach, we use a real software failure data set. 
The data set was collected by John D. Musa of Bell 
Telephone Laboratories for a Real Time Command 
& Control (S1) which consists 21,700 lines of code 
(LOCs). During the testing phase, 136 faults were 
detected [2]. We first analyze the data set by using 
Laplace trend test [22] because software reliability 
studies are usually based on the application of 
growth models to obtain various measures. 
 Let the time interval [0, t] be divided into k 
units of time, and let n(i) be the number of faults 
observed during time unit i. The Laplace factor, u(k), 
is given by 
1 1
2
1
( 1)( 1) ( ) ( )
2( )
1 ( )
12
k k
i i
k
i
Ki n i n i
u k
k n i
= =
=
−− −
= −
∑ ∑
∑
.   (19) 
Note that negative value of u(k) indicates decreasing 
failure intensity, and thus reliability growth, while 
positive value indicates increasing failure intensity, 
and reliability decrease. Fig. 5 shows the Laplace 
trend test for the S1 data set. We can find that the 
reliability of this system is growth. If the trend of 
the data set is shown as reliability growth, then this 
application of data set is suitable to use exponential 
type of model, for example, the GO model. If the 
trend of the data set is shown as reliability decay 
followed by growth, then the data set is suitable to 
use the S-Shaped model, for example, the Delay 
S-Shaped model or the Inflection S-Shaped model. 
3.1???? 
The comparison criteria we engage to compare 
various models’ performance are described as 
follows. 
1. The root Mean of Square fitting errors (RMSE) 
[21] 
 
2
1
1 [ ( ) ]
k
i i
i
RMSE m t m
k =
= −∑     (20) 
Notice that m(ti) is the predicted number of faults 
at ti, and mi is actual number of faults at ti. The 
lower RMSE indicates less fitting error and better 
performance. 
2. The Relative Error (RE) [2] 
        kktMR endii ))(( −=          (21) 
  6
workable and have more accuracy with both 
goodness of fit and the prediction ability compared 
to existing conventional models. 
In this study, we present an SRGM with 
generalized TEF & change-point.  It is a much 
more realistic model and more suitable for 
describing the software fault detection process. Due 
to the incorporation of the generalized TEF & 
change-point, the proposed SRGM fits the real 
project data fairly well and it could give us a 
reasonable description of the resource consumption 
behavior. Experimental results obtained are in close 
accord with the real data.  
 
?????? 
[1] M. R. Lyu, Handbook of Software Reliability 
Engineering. McGraw-Hill, 1996. 
[2] J. D. Musa, A. Iannino, and K. Okumoto, 
Software Reliability, Measurement, Prediction and 
Application. McGraw-Hill, 1987. 
[3] M. Xie, Software Reliability Modeling. World 
Scientific Publishing, 1991. 
[4] C. Y. Huang, M. R. Lyu, and S. Y. Kuo, “A 
Unified Scheme of Some Nonhomogenous Poisson 
Process Models for Software Reliability 
Estimation,” IEEE Trans. Software Eng., Vol. 29, 
No. 3, March 2003, pp. 261-269. 
[5] Z. Jelinski, and P. B. Moranda, “Software 
Reliability Research,” in Statistical Computer 
Performance Evaluation (ed. Freiberger, W.), 
Academic Press, New York, 1972, pp. 465-484. 
[6] A. L. Goel, and K. Okumoto, “Time-Dependent 
error-Detection Rate Model for Software Reliability 
and Other Performance Measures,” IEEE 
transactions on Reliability Vol. R-28, No. 3, August 
1979, pp. 206-211. 
[7] M. Ohba, et al., “S-shaped Software Reliability 
Growth Curve: How Good Is It?” COMPSAC’82, 
1982, pp.38-44. 
[8] S. Yamada, and S. Osaki, “Reliability Growth 
Models for Hardware and Software Systems Based 
on Nonhomogeneous Poisson Processes: a Survey,” 
Microelectronics and Reliability, 23, 1983, pp. 
91-112. 
[9] S. Yamada, and S. Osaki, “S-shaped Software 
Reliability Growth Model with Four Types of 
Software Error Data,” Int. J. Systems Science, 14, 
1983, pp. 683-692. 
[10] N. Karunanithi, and Y. K. Malaiya, in M. R. 
Lyu Handbook of Software Reliability Engineering, 
pp. 699-726. 
[11] N. Karunanithi, Y. K. Malaiya, and D. 
Whitley, “Prediction of Software Reliability Using 
Neural Networks,” Proc. 1991 IEEE Int, Symp. on 
Soft. Rel. Eng., May 1991, pp. 124-130. 
[12] N. Karunanithi, D. Whitley, and Y. K. 
Malaiya, “Using Neural Networks in Reliability 
Prediction,” IEEE Software, Vol. 9, No. 4, July 
1992, pp. 53-59. 
[13] N. Karunanithi, D. Whitley, and Y. K. 
Malaiya, “Prediction of Software Reliability Using 
Connectionist Models,” IEEE Trans. On Software 
Eng., Vol. 18, No. 7, July 1992, pp. 563-574. 
[14] T. M. Khoshgoftaar, R. M. Szabo, and P. J. 
Guasti, “Exploring the Behavior of Neural-network 
Software Quality Models,” Software Eng. J., Vol. 
10, no. 3, pp. 89–96, May 1995. 
[15] R. Sitte, “Comparison of Software Reliability 
Growth Predictions: Neural networks vs. parametric 
recalibration”, IEEE transactions on Reliability, 
1999, pp. 285-291. 
[16] T. M. Khoshgoftaar, E. B. Allen, J. P. 
Hudepohl, and S. J. Aud, “Software Metric-based 
Neural-network Classification Models of a Very 
Large Telecommunications System,” in 
Applications and Science of Artificial Neural 
Networks II, S. K. Rogers and D. W. Ruck, Eds. 
Orlando, FL: SPIE-Int. Soc. Opt. Eng., Vol. 2760 of 
Proc. SPIE, Apr. 1996, pp. 634–645. 
[17] J. P. Hudepohl, S. J. Aud, T. M. Khoshgoftaar, 
E. B. Allen, and J. Mayrand, “EMERALD: 
Software Metrics and Models on the Desktop,” 
IEEE Software, vol. 13, no. 5, pp. 56–60, Sept. 
1996. 
[18] T. Dohi, Y. Nishio, and S. Osaki, “Optimal 
Software Release Scheduling Based on Artificial 
Neural Networks,” Annals of Software Engineering, 
Vol. 8, 1999, pp. 167-185. 
[19] K. Y. Cai, L. Cai, W. D. Wang, Z. Y. Yu, and 
D. Zhang, “On the Neural Network Approach in 
Software Reliability Modeling”, The Journal of 
Systems and Software, 2001, pp. 47-62. 
[20] S. L. Ho, M. Xie, and T. N. Goh, “A Study of 
the Connectionist Models for Software Reliability 
Prediction”, Computers and Mathematics with 
Applications, Vol. 46, 2003, pp. 1037-1045. 
[21] M.R. Lyu and A. Nikora, “Using Software 
Reliability Models More Effectively,” in IEEE 
Software, July 1992, pp.43-53. 
[22] K. Kanoun and J. C. Laprie, “Software 
Reliability Trend Analyses from Theoretical to 
Practical Considerations.”, IEEE Transactions on 
Software Engineering, Vol. 20, No. 9, Sep. 1994, pp. 
740-747. 
[23] N. E. Fenton and S. L. Pfleeger, Software 
Metrics: A Rigorous and Practical Approach. PWS 
Publishing Company. 
 
???? 
