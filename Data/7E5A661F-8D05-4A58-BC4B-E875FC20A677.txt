                                                                             
1. 簡介 
在三維空間場景中，光源和陰影一直是直接
影響整個三維空間中所有物件的最重要元素之
一，三維場景中缺乏光源則所有物件的顏色無法表
現出來，而三維空間之中陰影的品質和成像方式，
直接影響的是整個三維空間內所有的物件看起來
是否足夠真實，而且物件的陰影帶給觀察者的直接
視覺影響，便是讓觀察者能夠很清楚得了解到這個
三維空間場景裡，所有物件彼此的距離關係，讓觀
察者能夠很容易的分辦三維空間中物件彼此的距
離關係，並且帶給觀察者更擬真的三維空間成像結
果。目前電腦圖學中的陰影建立演算法主要分為以
影像成像 (image-based)為主的陰影映射 (shadow 
map) [6] [13] [20] [21] [29] 和 幾 何 成 像 
(geometry-based)為主的陰影區域 (shadow volume) 
[1] [3] [4] [5] [11] [15] ，前者的主要特性為陰影的
成像速度快，但是容易產生失真的鋸齒邊導致品質
下降，而後者則是成像品質佳但是需要極大的系統
資源而造成陰影成像速度不佳。近年來，很多的陰
影相關研究，皆是以這二者為基礎，以改善這二種
演算法的缺點為出發點，例如，使用平滑暫存區柔
和陰影邊演算法 (rendering fake soft shadows with 
smoothies) [9] 、陰影輪廓映射 (silhouette shadow 
map) [18] 和高效率混合式陰影成像演算法 (an 
efficient hybrid shadow rendering algorithm) [10] 等
都是以提升陰影成像的品質以及成像速度為主要
目標。在目前許多的陰影成像演算法中，所採用的
方法大部份皆由陰影映射的改良而來，原因在於傳
統的陰影映射演算法若要減少成像時，物體陰影邊
上的鋸齒狀，就必需要提高陰影映射的解析度，但
如此一來便使得資料計算量大幅上升，而相對的使
得效率下降，雖然目前大部份的演算法大部份都已
經成功的在低解析度的陰影映射下平衡陰影成像
品質和速度的要求，不過在目前複雜的三維空間場
景中，並不是單一的演算法就能夠滿足所有陰影成
像的要求，所以本論文最主要的研究動機便在於建
立一個速度與品質皆符合三維空間的動態場景要
求的演算法。 
 
2. 相關工作 
在真實世界中，陰影的產生是由於光源遭受
物體的遮擋，而使得原本應該有光源照射反應的陰
影投射面 (receiver)形成陰暗的顏色，在三維電腦
圖學當中建立產生陰影的方式有很多不一樣的做
法，因此本論文將在本章節中說明建立陰影的方法
理論以及三維場景中陰影成像的分類，在陰影成像
理論中主要分為二個大類別，一個是實體陰影 
(hard shadow)而另一個則是漸層陰影  (soft 
shadow)，並且針對最近幾年來所發展的各種不同
陰影成像技術進行介紹及說明。 
 
2.1 實體陰影 (Hard Shadow) 
所謂的實體陰影 [2] [4] 指的便是該演算法
在計算成像的物件陰影時，如圖 2.1所示實體陰影
僅計算物件遮擋到光源的面積部份，也就是只會考
慮實際上光源被物件所遮擋到的點，涵蓋這些點的
範圍部份即稱之為暗影 (umbra)，也就是僅計算實
體陰影部份，而不去考慮真實世界中陰影所會呈現
出來的漸層輪廓邊，使得計算量遠比將真實的陰影
完整表現出來的漸層陰影來得少，也因此在成像速
度上會比漸層陰影來得快速。  
     
 
圖 2.1：實體陰影示意圖 
 
                                                                             
把遮擋者會使得形成半影 (penumbra)的部份面積
也要將之考慮進計算裡，因此漸層陰影的計算工作
量和計算範圍是遠比實體陰影來得複雜及廣泛。 
 
 
圖 2.5：漸層陰影示意圖 
 
2.2.1 使用平滑暫存區成像柔和陰影 
使用平滑暫存區成像柔和陰影 [9] 由Eric 
Chan和Frédo Durand於2003年提出，此方法著重於
如何成像出柔和的陰影輪廓邊，因此提出了一個資
料結構稱為平滑值 (smoothie)其作用在將透明數
值 (alpha value)額外存放，以便能夠應用在成像出
陰影輪廓邊上的漸層效果。而這個方法首先，如圖
2.6(a)所示從光源對物體的方向建立一個物體的原
始陰影映射，接下來如圖2.6(b)所示，在物體的輪
廓邊上建立一個平滑值的基礎資料結構，再將此平
滑值存入平滑值暫存區 (smoothie buffer)中，並且
將每一個像素的深度數值和透明數值加入儲存，藉
由比較和過濾陰影映射和平滑值暫存區中的值而
產生柔和的陰影輪廓邊，最後根據使用者的視點繪
製出整個場景，而此方法所建立的漸層陰影範圍可
以藉由調整影響參數來決定漸層陰影的有效範圍。 
 
 
圖 2.6：平滑暫存區成像柔和陰影示意圖 
 
3. 演算法 
在一般三維場景之中，觀察者通常注視的目
標物都是以靜態物件為主，原因在於人眼對於不斷
持續運動的目標物，一般情況下都比較難有較高的
集中力去注視，所以相對於動態物件來說，一般而
言靜態物件在整個系統之中，都比動態物件來得容
易被持續的注意，因此動態物件本身的陰影品質更
不容易被觀察者所注意。 
 
3.1簡介 
本研究所提出的柔化陰影映射是改良傳統的
陰影映射演算法而來，傳統的陰影映射演算的主要
作法分成二部份，首先是先透過場景中光源視點的
方向，去對整個三維場景建立場影本身的深度映
射，接下來便是由攝影機的視點去成像整個三維場
景，最後經由深度映射和攝影機的視點所見的三維
場景做陰影的比較運算，去求得目前這個點是否落
在陰影之中或是位於光源下，在確認完陰影應該成
像的位置後，再將整個場景的陰影做成像的動作，
但是由於此演算法是以影像成像為主，故它建立的
陰影會有在陰影映射解析度低時，在陰影邊上有嚴
重鋸齒邊的問題，因此本論文的方法是基於在較低
解析度的陰影映射之下，仍然可以成像出相似於高
解析度下的陰影映射效果，所以本論文的方法便是
                                                                             
回圖形之中，針對整個深度映射的像素執行便可以
得到最後柔化的結果，而圖 3.2便是一個基本大小
為 33× 遮罩的示意圖。 
∑
=
=
n
i
iZ
n
R
1
1
       (3-2) 
 
987
654
321
ZZZ
ZZZ
ZZZ
 
圖 3.2：遮罩示意圖 
 
分離式高斯模糊： 
 所謂的分離式高斯模糊，其做法和傳統的高
斯模糊差別在於分離式高斯模糊利用高斯模糊計
算可以分離的原始特性，將其原本是二維的複雜運
算，把它拆解為二個較為簡單的一維運算，如此一
來可以減少許多不必要的多餘計算，使得使用高斯
模糊的計算過程更加快速，而公式(3-3)指的便是最
原始的高斯模糊的計算方法，主要的做法是藉由計
算高斯分佈找出高斯模糊的遮罩，再乘上高斯偏移
量 (offset)求得最後的結果，而因為高斯模型本身
的可分離特性，可以將其拆解為二個一維的運算式
如公式(3-4)所示，最後以公式(3-5)的方式表示成二
個一維的運算式，分別計算後再相乘求得最後結
果。 
2
22
2
2
2
1
),( σ
piσ
yx
D eyxg
+
−
=    (3-3)                            








•








=
−−
2
2
2
2
22
2
2
1
2
1
),( σσ
piσpiσ
yx
D eeyxg    (3-4)                  
)()( 11 ygxg DD •         (3-5) 
                           
 
3.2系統流程圖 
圖 3.3 為本論文所提出的演算法之運作流
程，從一開始由光源視點的方向對整個三維場景執
行快照後，用以建立深度映射之後，便將流程分成
二個部份，第一個部份和傳統陰影映射做法相同，
便是從攝影機視點的方向所見的三維場景和收集
完成的深度映射執行運算比較的動作，用以確定哪
一些像素是位於陰影之中，而哪一些像素是在光源
之下，以求得三維空間內所有物件的陰影大小、位
置及範圍，而另一個部份，由於如同之前所提到，
深度映射僅僅只是整個三維空間的深度值收集，因
此是不可能將其執行任何圖形運算，因此便要藉由
其它方式使其能夠經過處理，其方法也就是將深度
映射轉存入色調暫存區 (color buffer)使其成為一
張可以處理的影像，再來便可利用柔化的運算來將
整個深度映射執行柔化的運算，以減少陰影邊上的
不規則鋸齒化問題，經過柔化處理後將其深度映射
儲存，等待原始的深度映射和攝影機視點所見的三
維場景執行完比較後，確定所有物件的陰影大小及
位置，最後的步驟便是將柔化後的深度映射用以取
代未經處理的深度映射圖，並且將之成像在畫面
上，以得到最後的成果。 
 
圖 3.3：演算法流程圖 
                                                                             
4.1 實驗比較 
由於本實驗的目的便是在於，測試陰影成像
的過程採用柔化陰影映射的演算法，在設定深度映
射的解析度在不高的情況下，能得到成像過程的速
度佳而且成像品質和傳統陰影映射來做比較時可
以發現能夠降低減少場景中三維物件的陰影邊上
的人工失真的鋸齒化問題。而由圖 4.1可以看出傳
統的陰影映射演算法在解析度較低的情況下，確實
有著在陰影輪廓邊上成像品質不佳的情況，反觀柔
化陰影映射演算法不論在何種解析度之下都不曾
出現不規則的鋸齒化情況，而在此實驗中也可以看
出在解析度愈低的情形下，柔化所減少的不規則鋸
齒化在相對於高解析度之下較為明顯，其原因便在
於深度映射解析度提高後，發生陰影輪廓邊上有鋸
齒化的情況便會下降，因此柔化處理的影響便沒有
在低解析度下的陰影映射那麼強烈，但是在提高深
度映射的解析度時，將會使得需要佔用的顯示卡記
憶體耗用率快速上升，而使得整個系統效率下降，
而圖 4.2可以看到整個三維動態場景分別使用陰影
映射和柔化陰影映射運算陰影成像的結果比較。 
 
 
圖 4.1：陰影映射與柔化陰影映射比較圖 
 
 
 
圖 4.2：完整場景比較圖 
 
4.2 陰影成像之效率評估 
本實驗分別測試傳統的陰影映射  (shadow 
map)及柔化陰影映射 (blurring shadow map)之陰
影成像效率，以比較出兩者間僅考慮陰影成像效率
時，兩者間陰影成像效能的優劣，傳統的陰影映射
在成像陰影時，皆是透過三維場景中的光源視點對
整個三維場景執行一個快照的動作用以建立深度
映射，在建立深度映射後，將深度映射和攝影機視
點所見的三維場景執行簡單的比較判斷哪一個點
落在陰影中，而哪一些點是位於光源之下，藉此完
成整個陰影成像的過程，而柔化陰影映射則是在建
立完深度映射之後，將深度映射複製一份執行柔化
的處理並將柔化後的結果儲存，等待陰影成像的判
斷執行完畢後，將柔化後的深度映射取代原本的深
度映射，並把最後的結果成像在螢幕上供觀察者觀
視最後成像之結果，由於柔化陰影映射在成像階段
需要做額外的柔化處理運算，因此可預期整體的執
                                                                             
6. 參考文獻 
 
[1] A.S. Shastry, Soft-Edged Shadows, Available：
http://www.gamedev.net/reference/articles/article
2193.asp, 2005. 
[2] A. V. Nealen, Shadow Mapping and Shadow 
Volumes, Available ：http://www.devmaster.net, 
2005. 
[3] A. Watt, 3D Computer Graphics 3/e, Addison 
Wesley, 2000. 
[4] A. Woo, P. Poulin and A. Fournier, “A Survey 
of shadow Algorithms,” IEEE 
ComputerGraphics and Applications, pp. 13-32, 
1990. 
[5] C. Everitt, M. J. Kilgard, “Optimized Stencil 
Shadow Volumes,” Game Developers 
Conference, 2003. 
[6] C. Soler and F. X. Sillion, “Fast calculation of 
soft shadow textures using convolution,” 
Proceedings of the 25th annual conference on 
Computer graphics and interactive techniques, 
pp. 321-332, 1998. 
[7] C. Wyman, Charles Hansen, “Penumbra shadow 
map：Approximate soft shadow in real time,” 
Eurographics Conference Proceedings, 2003. 
[8] D. Astle and K. Hawkins, Beginning OpenGL 
Game Programming, Premier Press, 2004. 
[9] E. Chan and F. Durand, “Rendering fake soft 
shadows with smoothies,” Proceedings of the 
14th Eurographics workshop on Rendering, pp. 
208 – 218, 2003. 
[10] E. Chan and F. Durand, “An efficient hybrid 
shadow rendering algorithm,” Proceedings of the 
Eurographics Symposium on Rendering, 2004. 
[11] F. C. Crow, “Shadow algorithms for computer 
graphics,” Proceedings of the 4th annual 
conference on Computer graphics and interactive 
techniques, pp. 242-248, July 1977. 
[12] K. Garrein, Real-time Shadowing Techniques, 
Available ：
http://www.devmaster.net/articles/shadows/, 
2003. 
[13] L. Williams, “Casting curved shadows on 
curved surfaces,” Proceedings of the 5th annual 
conference on Computer graphics and interactive 
techniques, pp. 270 – 274, 1978. 
[14] M. Agrawala, R. Ramamoorthi and A. Heirich, 
Laurent Moll, “Efficient image-based methods 
for rendering soft shadows,” International 
Conference on Computer Graphics and 
Interactive Techniques, pp.375-384, 2000. 
[15] M. D. McCool, “Shadow volume 
reconstruction from depth map,” ACM 
Transactions on Graphics, pp.1-26, 2000. 
[16] M. Stamminger and G. Drettakis. “Perspective 
shadow maps,” In Proceedings of ACM 
SIGGRAPH, pp. 557-562, 2002. 
[17] Paul, Shadow Mapping ： casting curved 
shadows on curved surfaces, Available ：
http://www.paulsprojects.net, 2003. 
[18] P. Sen, M. Cammarano and P. Hanrahan, 
“Silhouette shadow map,” Proceedings of     
ACM SIGGRAPH, pp. 521-526, 2003. 
[19] R. Fernando, GPU Gems: Programming 
Techniques Tips and Tricks for Real-Time 
Graphics, Addison Wesley, 2004. 
[20] R. Fernando, S. Fernandez, Kavita Bala, and 
Donald P. Greenberg, “Adaptive shadow maps,” 
In Proceedings of ACM SIGGRAPH, pp. 387-390, 
2001. 
[21] R. S. Wright, Benjamin Lipchak, OpenGL 
SuperBible 3/e, SAMS, 2004. 
[22] S. Brabec, H. P. Seidel, “Single Sample Soft 
Shadows using Depth Maps,” In Proceedings of 
Graphics Interface, 2002. 
[23] T. Akenine-Möller and U. Assarsson, 
“Approximate soft shadows on arbitrary surfaces 
using penumbra wedges,” Proceedings of the 
13th Eurographics workshop on Rendering, pp. 
297-306, 2002. 
[24] T. Akenine-Möller and U. Assarsson, 
“Occlusion Culling and Z-fail for Soft Shadow 
Volume Algorithm,” The Visual Computer, 2002. 
[25] U. Assarsson and T. Akenine-Möller, “A 
Geometry-based Soft Shadow Volume Algorithm 
using Graphics Hardware,” ACM Transactions 
on Graphics (Proceedings of ACM SIGGRAPH), 
pp. 511-520, 2003. 
[26] U. Assarsson, M. Dougherty, M. Mounier, and 
T. Akenine-Möller, “An Optimized Soft Shadow 
Volume Algorithm with Real-Time 
Performance,” Graphics Hardware, pp. 33-40, 
2003. 
[27] U. Borgenstam and J. Svensson, “A Soft 
Shadow Rendering Framework in OpenGL,” 
Available ：
http://graphics.cs.lth.se/research/shadows/, 2004. 
[28] W. Chris, Using P-Buffers for Off-Screen 
Rendering in OpenGL, Available ：
http://developer.nvidia.com/object/PBuffers_for_
OffScreen.html, 2001. 
[29] Z. Ying, M. Tang and J. Dong, “Soft Shadow 
Maps for Area Light by Area Approximation,” 
Conference on Computer Graphics and 
Application, pp. 442, 2002.
 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告
95 年 12 月 16 日
報告人姓名 盧天麒
服務機構
及職稱
國立嘉義大學資訊工程學系
助理教授
時間
會議
地點
95/08/30~95/09/01
中國北京交通大學
本會核定
補助文號
NSC94-2213-E-415-007
會議
名稱
(中文) 2006 創新計算、資訊及控制國際研討會
(英文 ) International Conference on Innovative Computing, Information and
Control
發表
論文
題目
(中文) 在點對點網路環境下使用行動代理人進行物件共享之研究
(英文) Using Mobile Agents for Object Sharing in P2P Networks
Using Mobile Agents for Object Sharing in P2P Networks
Tainchi Lu and Mingchi Fu
Dept. Of Computer Science and Information Engineering
National Chiayi University
No. 300, University Rd., Chiayi, Taiwan 600, R.O.C.
tclu@mail.ncyu.edu.tw
Abstract
In this paper we devise a stationary agent to serve as a coordinator between federates and mobile clients.
Furthermore, we employ a logical ring construction to facilitate the object sharing and matching. A navigating agent
dispatched by the stationary agent can follow a mobile client to transport to the target. Besides, once the client requires
more remote objects, the navigating agent refers to the itinerary that was specified by the stationary agent to migrate to
the next destination for acquiring them. The experimental results show that the usage of mobile agents can increase
more capabilities, flexibilities, and adaptabilities to most large-scale simulations.
1. Introduction
Over the past few years, a large-scale simulation has been grown rapidly to serve as an auxiliary instrument for
troop training, military fighting, skill learning, financial analysis, and so forth. So many countries devote to develop a
wide variety of military simulators for the sake of improving their training efficiency, and decreasing accidental device
and human consumptions. In particular, the U.S. Department of Defense (DOD) has driven the evolution of standards to
support the interoperability of simulations in order to reduce considerable costs and improve qualities. High Level
Architecture (HLA) [1] is an integrated and general-purpose distributed architecture that is developed by the U.S. DOD
and has been approved by the IEEE as an open standard in 2000 to provide a common interoperable and reusable
architecture for a large-scale distributed modeling and simulation.
In this paper, a stationary agent is devised and deployed into the HLA federate for sake of regulating the user’s 
communication status and controlling the life-cycle of mobile agents. The stationary agent of a federate refers to the
user’s object preferences to look for an appropriate federate. Note that the user might stay at the original host or migrate
to another node later according to the stationary agent’s decision. At first, each stationary agent needs to find out its
possible candidate successors by means of using a logical ring construction. When the ring has been constructed, the
stationary agents know with each other along the ring, and try to carry out an object sharing operation in order to
understand the remote object models inside the other federates. So far, the stationary agent can have the capacity to
perform the object matching between the user’s object preferences and the global object model of the federation. As a
result, an appropriate federate is picked up by the stationary agent. The user will be redirected to connect to the next
target federate; meanwhile, the stationary agent stayed at the original host creates a mobile agent, namely navigating
agent, from the agent pool to be responsible for retrieving object information for the user [2]. The navigating agent
piggybacks the information retrieval policy defined by the user to transfer to the target federate, and it waits for the user
in accomplishing the client migration. After the agent and client migrations, it is obvious that the user can directly
access the most local objects from the local site instead of asking for the federate to dynamically subscribe more and
more remote objects from the other federates. Furthermore, we do not require any central server to coordinate the whole
simulation environment. In case of a user changes its mind to modify the information retrieval policy, the stationary
agent resided at the local site will carry out the object matching operation again to evaluate the user whether it is better
to stay at the local site or migrate to another suitable one.
2. Agent components
According to the functionalities of agents, we divide agents into two types, one is stationary agent, and the other is
navigating agent. Besides the two types of agents, there are two major components within the environment, including
agent pool and state capture manager. Each stationary agent is capable of organizing itself and coordinating the other
agent components. Except for the agent pool, default capabilities need to be assigned to the stationary agents,
navigating agents, and state capture manager to carry out some specific tasks. As shown in Figure 1, a stationary agent
resides at a host to coordinate the mobile agents, namely navigating agents. The navigating agent refers to the itinerary
[3] specified by the stationary agent to transfer it to a target host for gathering object information. Moreover, the state
capture manager periodically takes a look at the up-to-date state of navigating agents, and reports agent states to the
stationary agent. As a result, the stationary agent is able to determine the life-cycle of the navigating agents. In other
words, the navigating agents would be disposed, cloned, killed, dispatched, retracted, deactivated, and activated from
the agent pool according to the agent information gathering by the state capture manager.
01
2
3
4
5
6
7
K interval successor
1
2
3
[0,1]
[1,3]
[3,7]
1
1
3
K interval successor
1
2
3
[2,3]
[3,5]
[5,1]
3
3
7
K interval successor
1
2
3
[4,5]
[5,7]
[7,3]
nil.
7
7
Fig. 2. The association of stationary agents by means of employing a logical ring
N=3 N=4
N=5
1
1
2 2
3
3
N1
N2
N3
1
1 2
2
3
3 4
4
134
N1
N2
N3
123
N4
124 234
3
2
4
1
4
1 2
3
21
1
5
2
3
3
4
45
35
2
5
1
4
2
5
31
...
N=n
N1
N2
N3
N1
N2
N3
N4
N5 N1
N2
N3
N4
N5 N1
N2
N3 N4
N5
Nn
N4
Fig. 3. An illustration of performing the object sharing as the value of N is increasing
After the ring structure has been constructed and each agent node has been found out its exact successor, the
stationary agent resided at each federate not only keeps its local object model but also realizes its adjacent agent nodes.
In addition to the ring construction and successor finding, the stationary agent has to collect the object information at
the site of the federate and creates its object index table by carrying out the following object sharing operation. In the
beginning, each stationary agent solely possesses the local object information at the local site. When the object sharing
is finished, the stationary agent can gather the global object information from the other agent nodes. As shown in Figure
3, when the number of agent nodes is three (i.e. 3N ), we only require one round to accomplish the object sharing
operation. In other words, the agent node 1N can simultaneously receive the object 2 and object 3 from 2N and 3N ;
likewise, the other agent nodes can receive their specific object information as well. In the case of 4N , two rounds
are required to complete the job. As for the number of N reaches to n , we need at most  2n rounds to completely
collect the global object information through the ring.
4. Navigating agent
While a user is changing its data of interest continuously, the current federate may not provide the required local
object information to the mobile agent that was assigned to the user. Therefore, the federate is forced to dynamically
subscribe more and more remote objects from the other one. The situation will lead to a heavy inter-communication
overhead if the subscribing requirement is lasting. After a specific threshold is reached, the stationary agent will
recommend the user to transfer to another appropriate federate to obtain better information retrieval services. In addition
to the migration of the user, the mobile agent, namely navigating agent, is also taken into account to migrate between
the source node and the target host.
S . A g e n t F S 1 S . A g e n t F S 2
C l i e n t C l i e n t
C l i e n t
C l i e n t
A g e n t M i g r a t i o n
C l i e n t M i g r a t i o n
C l i e n t
R e c o n n e c t
C l i e n t
O r i g i n a l C o n n e c t i o n N e w C o n n e c t i o n
D i s c o n n e c t
Fig. 4. An illustration to migrate a navigating agent between federates
As shown in Figure 4, a mobile client first connects to federate 1 and declares its data of interest in a form of
information retrieval policy. After the stationary agent that is resided at federate 1 accomplishes the object sharing and
matching operations, it picks up federate 2 as an appropriate federate and specifies it to the client. Subsequently, the
client will be redirected to the federate 2. Meanwhile, the stationary agent, which is resided at federate 1, checks up the
client whether it is the first time to join in the environment or not. If the result is the former, the stationary agent
