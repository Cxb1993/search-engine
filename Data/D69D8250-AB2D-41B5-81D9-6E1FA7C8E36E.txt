中文摘要 
 
表面黏著技術 PCB 裝配生產線其瓶頸作業通成發生在表面黏著機器的裝配系統
中，而生產線的表面黏著機器裝配系統通常由兩台以上的機台所串連而成，過去研究著
重於單一機台的元件放置順序的最佳化，然而單一機台的最佳化並無法達到平衡含有多
部取置機的 PCB 裝配生產線。本研究將開發一多部取置機的 PCB 裝配生產線平衡原型
系統，首先利用最小生成樹演算法 MST 去求解把配置元件分發到各取置溝槽來解決問
題。因此，數學模型被發展在解決 PCB 裝配線內面臨的線平衡問題，其中包含了可行
設定與初始解的混合。開發一生產線平衡模式需要結合公式與專家推理知識並且重新整
理取置機的元件群組，此系統模型用來建構一幫助現場規劃人員能快速且正確的規劃元
件置料架於各機台的排列，並且減少規劃時間以提升產能的一個原型系統。 
 
關鍵字：表面黏著技術，PCB 裝配線，取置機，遺傳演算法，MST 演算法，生產線平
衡 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 II
報告內容 
1 Introduction 
 Printed circuit boards (PCBs) are extensively used in diverse electronic products today. 
Demands for sophisticated electronic products have smaller size but with greater function and 
reliability. The stringent requirement is to have a higher component density on PCBs. 
Therefore, PCB assembly must increase both the number of components and the variety of 
component types. The surface mount technology (SMT) with higher board density and 
transmission speed is replacing the Pin-Through-Hole (PTH) technology. A typical surface 
mount PCB assembly line is separated into four steps including screen printing, components 
placement, reflow and test. The quantity of surface mount components (SMCs) mounted by 
placement machines on PCB is generally large. The components themselves are also very 
delicate. Therefore, the placement operation is the most time-consuming among all of the 
operations in SMT assembly line; and it generally becomes a bottleneck in assembly line. The 
SMC placement operation hence has the greatest potential in cost reduction. Many 
researchers[2,3,5,6] indicated that an optimal component placement sequence reduces the total 
cycle time in a single placement machine PCB assembly line.  However, for an assembly 
line with multiple placement machines, instead of seeking the local optimal in one machine, 
line balancing within placement machines has a greater impact on increasing throughput rate. 
The research proposed a system model which is used to construct a prototype system that 
assists the process planners to solve the line balancing problem in SMT PCB assembly line. 
 
1.1 Problem Statement 
Because a SMT PCB assembly needs a lot of complicacy and a variety of component 
types, different types of placement machines are used to insert diverse types and sizes of 
SMCs. The PCB assembly populates active and passive components. The passive components 
are the majority of SMCs which are non-fine pitch components such as resistor, capacitors, 
and inductors. The passive SMCs are normally placed by a high speed placement machine 
called Chip Shooter (CS) machine. The active SMCs are the leaded components such as CPU 
and integrated circuit. They are normally placed by a machine with higher accuracy called 
Pick-and-Place (PAP) placement machine. A typical surface mount PCB assembly line 
generally uses different types of placement machines to populate various kinds of components 
including PAP machines and the CS machines. The focus of previous researches placed great 
efforts on optimizing the sequence of component placements and the assignment of 
component to feeders in a single placement machine PCB assembly line. However, these 
researches[5,12] may not solve problems faced in a PCB assembly line with multiple machines. 
The SMCs placement process is generally the most time-consuming in a PCB assembly 
line. The sequence optimization of placement operation in a single placement machine can 
reduce assembly time and increase yield rate in the assembly line with one placement 
machine. However, in a multiple-placement-machine PCB assembly line, the same 
component is populated in different operation times by using various placement machines. As 
a result, the placement time in a multi-machine PCB assembly line is often left unbalanced. 
The process planners must consider how to balance the loading among placement machines to 
reduce cycle time of the assembly line. Two issues should be addressed in balancing the PCB 
assembly line including: 
(1). The assignment of the same type of component to different feeder racks; 
(2). Solving Feeder Rack Allocation problem for balancing the PCB assembly line with 
multiple placement machines. 
 
1.2 Research Objective 
In practical manufacturing, CS and PAP machines are generally used together in an 
 1
  , g ∑
=
=
G
g
gNM
1
∈  {1,2,…,G}            
where,  represents the quantity of the gth group of SMC.  represents the quantity of 
the group. 
gN G
where, i  {1,2,…,M}, represents the sequence of components placement, ranged form 
1 to M. 
∈
Dominating time is the time of the single movement for a component placement operation. 
The time is the maximum value within the time of feeder carriage’s movement, the time of 
PCB table’s movement, and the time of a turret rotation. The mathematical models of the 
traveling times of these three moving parts are formulated as follows: 
(1). The time of PCB table X–Y directions movement [10]: 
The PCB table movement time is determined by the maximum movement time in the 
x-direction and y-direction. PCB table moves from the component coordinate ith  
to next component coordinate . The table moves along the X-axis and Y-axis 
directions simultaneously. The traveling distance, PTD, is formulated as: 
( )11 , −− ii YX
( ii YX , )
PTD = Max { }iiii YYXX −− −− 11  ,   
Where,  represents the placing location of a component in the PCB X-Y 
coordinates. 
( ii YX , )
The time of PCB table’s X–Y direction movement, PTT, is formulated as: 
PTT = Max ⎪⎭
⎪⎬⎫⎪⎩
⎪⎨⎧ −− −−
Y
ii
X
ii
V
YY
V
XX 11  , 
 
       
Where, V is the velocity of PCB carrying table’s movement, ratio of unit movement 
divided by time.  
 
(2). The time of feeder carriage movement [10]: 
The time of feeder carriage movement is determined by the movement time of feeder 
racks along the placement machine in the x-direction. The traveling distance of a feeder 
carriage movement from ith to the next location is: 
FD= ii FSFS −−1                      
Where,  represents the feeder rack associated with the ith component placement. iFS
The movement time of a feeder carriage can be represented as follows: 
FT =
f
ii
T
FSFS −−1                       
fT  is the velocity of feeder carriage for a single movement. 
 
(3). The time of turret movement [10]: 
The time of turret movement includes turret rotation time (NT) and Fixed Pick and 
Place (FPP) time. The time is not affected by the factors such as component size and 
position...etc. 
The rotational angle of the turret is a constant. The pick and place time (FPP) 
represents the time required to retrieve a component from the feeder carriage and 
simultaneously mount a component on the PCB. It’s generally a constant, too. 
 
(4). The maximum value among the PTT, FT and NT is regarded as the dominating time [10], 
DT: 
 3
 
 (a)           (b)
 
 
 (c)             (d) 
Figure 2 An example of the component assignment problem  
 
2.4 The GA Implementation in Feeder Rack Allocation  
The research further uses a GA approach in the feeder rack allocation problem in a PCB 
assembly line after the assignment of the same type components to different feeder. The 
adopted GA implementation is able to search the best chromosome and produce the near 
optimal sequence of feeder racks allocation for balancing PCB assembly line. The GA 
approach regards component groups as genes to generate the new chromosome. The 
chromosome represents the sequence of feeder rack allocation on a placement machine. The 
section addresses how the GA is used for solving the problem in this research.  
 
(1). Coding 
Each chromosome is constituted by gene sets. The process of defining gene is regarded 
as Coding. The coding process generally determines the success of a GA. In this research, a 
component group is regarded as a gene in coding process. The sequence of the genes in the 
chromosome represents the sequence of feeder rack allocation for a placement machine. In the 
Coding process, the component groups which have been assigned should not be assigned 
repeatedly because placement machine must populate all the components in a group before 
starting to populate components in the next group. According to Cheng’s [1] coding method, 
the research uses a symbol list including jobs and partitions as the coding scheme for feeder 
rack sequencing problem on the multiple machines. The symbols of jobs represent the 
placement priorities of component groups and the symbols of partitions, denoted with star "*", 
designate the partition of jobs performed by various machines. Consider an example with 9 
component groups populated by 3 CS machines. The chromosome can be represented as 
follows: [ ]8   4  6  *  9   1   5   3   *   7   2  
The two star symbols, *, separate the component groups into three parts. The first part in 
the chromosome contains the 2nd and 7th component groups that will be placed by the first 
 5
The fitness values of chromosomes are greater; the more chances the chromosomes are 
selected. The followings show the process of Roulette Wheel algorithm. 
Step1: Calculate sum of the fitness values of all chromosomes in a population,  ∑  )( ' xFit
Step2: Calculate selected probability of each chromosome , )(xP ∑=  )( '  )( '  )( xFitxFitxP  
Step3: Produce randomly a value N, [ ]1,0∈N  
Step4: Select the chromosome of the population where the summation of selected 
probability, , is lager than N; copy the chromosome to Mating Pool   )(∑ xP
Step5: If the number of chromosomes in Mating Pool less than current population size  
Then go to Step3. 
      Else ending for Roulette Wheel Selection 
 
(4). Crossover 
The crossover operation 
changes the position of genes 
between two parent 
chromosomes in the Mating Pool 
to produce the offspring 
chromosomes with high fitness 
value. The order-crossover 
operation which is a classical 
crossover operator is often used 
to solve path and sequence 
problem [16]. The advantage of 
the operator is able to easily 
reserve a good local genes sequence in the mating process. The research uses the 
order-crossover operation to mate the parent chromosomes. The operation requires a section 
of parent's chromosomes to be preserved during mating process. The operation of 
order-crossover is discussed as following and illustrated in Figure 3: 
Step1: Get stars positions (include partitioning section) from one parent  
  Get a randomly selected section from the same parent 
Step2: Copy selected stars positions and one section from one parent to offspring 
Step3: Copy remaining jobs from other parent by making a left-to-right switching to  
      offspring 
 
8   4  6  *   9 1 5 3 * 72 
8   4    *   7 92 * 1 3
 8   7  5  *  9 2 * 6 4 1 3 
Offspring
Parent2
Parent1 [
[
[
] 
] 
] 
Figure 3 An example of Order-Crossover operation 
(5). Mutation 
[ ]8   4  6  *  7   5   9   2   *   1   3 
[ ]8   4  6  *  2   5   9   7   *   1   3 
Offspring
New Offspring
[ ]8   4  6  *  7   5   9   2   *   1   3 
[ ]8   9  6  *  7   5   4   2   *   1   3 
Offspring
New Offspring
Offspring 
New Offspring
[ ]8   4  6  *  7   5   9   2   *   1   3 
[ ]8   4  6  *  7   *   9   2   5   1   3 
Offspring
New Offspring
B 
C 
D
[ ]8   4  6  *  7   5   9   2   *   1   3 
[ ]3   1   2    9    5    7   *   *   6   4    8
A
Figure 4 Four types of Two-Point Mutation operation 
The mutation operation can help 
to improve a local minimum problem 
during the GA implementation. 
Therefore, searching for alternative 
solutions by the mutation operation 
is considered in the research. 
Two-Point mutation operation 
randomly selects positions of genes 
to reverse in order to generate new 
offspring. The selected genes switch 
their positions where the genes may 
be either a job or a star. The various 
combinations of job and star cause 
 7
The input SMC data is supplied by a cooperated surface mount PCB assembly 
manufacturer which has four attributes including the sequence of the component, the 
coordinate information for placing the component on PCB and the feeder rack information 
where the component is loaded. The output data is the solution for feeder rack allocation on a 
machine and the sequence for placing component which will balance the workloads within CS 
machines in a PCB assembly line. 
 The prototype system is designed and executed as a meta-system to integrate with an 
existing GA program called Evolver. The programming language, Visual Basic for 
Application (VBA), is used to develop the meta-system. Evolver is a Microsoft Excel add-in 
program which is developed by the PALISADE, and uses GA to quickly solve complex 
optimization problems. VBA is also used to develop all the components of system, and to 
establish the link with Evolver. The implementation platform uses a personal computer with 
Inter Pentium IV CPU running Win XP operating system. 
 
3.2 GA Parameter Setting 
The mutation rate and crossover rate generally affect the performance of a GA 
implementation. To find an appropriate setting of these two parameters, this research uses 
various sets of parameters to evaluate their performance in minimizing cycle time. The first 
stage is to finds out the appropriate combination of the crossover rate and the mutation rate 
with the minimum cycle time. The range, from 0.5 to 1.0, for the crossover rate and the 
mutation rate are tried in the system implementation. After running 30 tests for each 
combination, an average of cycle times is obtained for various combinations. The 
combination with the minimum average time is selected as the default setting for system 
implementation. The result shows that the best combination for crossover rate and mutation 
rate are found 0.9 and 0.7 respectively among these 36 combinations.  
The stage also determines the stopping condition of GA searching. The stopping 
condition affects the quality of the result and runtime to arrive at a solution. The research 
conducts a pilot run to define the stopping condition of the GA implementation, i.e. the 
number of generations to reach convergence status. The result shows that the cycle time has 
not decreased after the 16520th generation of GA implementation. Meanwhile, it also shows a 
significant reduction in the cycle time in comparison with the original time which was 
planned manually by process engineers. The stopping condition of the GA implementation is 
set as 2000 generations after that the fitness values increase less than 1%. The parameter is 
then set in the Evolver to assist process planner to search a solution.  
 
3.3 Validation 
Two PCB assembly cases with different component group sizes are used to validate the 
prototype system. In case A, the PCB assembly with 736 SMCs divided into 87 groups are 
used. Case B uses the PCB assembly with 496 SMCs divided into 69 groups. Both cases use 
three CS machines to populate the SMCs. Analyzing the system output and comparing with 
original assembly time, a promising result is found in the reduction of process planning time 
and operation time of each CS machine as well.  12.94% and 14.7% improvement ratios in 
total operational time are found in Case A and B respectively. Both cases show that the cycle 
time of the PCB assembly line is reduced by the implementation of the prototype system. The 
output new feeder allocations are able to balance the workload of the CS machines in the 
assembly line. Since PCB assembly lines is generally batch type productions, a small 
reduction of cycle time can significantly decrease the total time of the assembly. Consequently, 
the throughput rate of the assembly line is increased. Moreover, the prototype system also 
helps to shorten the time needed in manually balancing assembly line which generally takes 
days to finish. By using the system, the process planners are able to solve systematically the 
 9
