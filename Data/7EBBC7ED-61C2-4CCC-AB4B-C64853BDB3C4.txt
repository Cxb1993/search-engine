行政院國家科學委員會專題研究計畫成果報告 
高性能與多功能的 WebGrid 系統的設計與製作-子計畫四: 
WebGrid 下的安全服務(2/2) 
 
(本研究成果 A Reliable Tree-Based Certificate Revocation Scheme in Grid 
Computing System 發表於 The Second Workshop on Grid Technologies and 
Applications WOGTA 2005, pp. 44-50, Dec. 2005;英文論文全文列於成果報告後) 
 
計畫編號：:NSC 93-2213-E-259-013 
執行期間：94 年 8 月 1 日至 95 年 7 月 31 日 
主持人：楊慶隆 國立東華大學資訊系 
 
一、中文摘要 
近 年 來 ， 隨 著 格 網 運 算  (Grid 
Computing) 的興起，使得在其上有了越來
越多的應用，因此格網上的安全亦愈漸被
重視。格網安全基礎建設 (Gris Security 
Infrastructure, GSI) 即是在格網環境裡用
來規範安全措施所制定的準則，其提供了
公 開 金 鑰 基 礎 建 設  (Public Key 
Infrastructure, PKI) 技術與憑證認證機制
來保障格網上訊息傳遞時的身分鑑別 
(Authentication)、資料完整性 (Integrity)、
不可否認性 (Non Repudiation)與私密性 
(Confidentiality) 等資訊安全四大基本功
能。然而，憑證在發行之後其合法性會隨
時間或其他原因而有所改變，因此在憑證
認證的使用上會有憑證是否仍具有有效性 
(Valid) 或是已經廢除了  (Revoked)的問
題，所以憑證機制皆要有一套管理憑證廢
除清單 (Certificate Revocation List) 的系
統來維護 PKI 的信任機制。而為了達到迅
速、確實和安全的憑證廢止資訊的檢查機
制，在我們的研究中，我們結合了 Binary 
hash tree 的安全性和 Huffman tree 的機率
特性來建立該機制，經過理論與模擬的驗
證並與現行機制相互比較，可看出我們所
提出的方案具有相當的改善。 
二、緣由與目的 
 由於近年來格網運算的運用越來越廣
泛，基於格網運算上的安全問題亦開始被
人們所探討，而使用格網資源所需之認證
機制則因此被規範在格網安全基礎建設 
(Gris Security Infrastructure, GSI) 底下。
GSI 主要是建立在由 Secure Socket Layer 
(SSL) [4] protocol 所衍生之 Transport 
Layer Security (TLS) [3] protocol 之上，透
過 SSL/TLS 的實作對資料加密，以保證訊
息通信之間的安全，而在認證機制方面則
是藉由公鑰 /私鑰的公開金鑰基礎建設 
(Public Key Infrastructure, PKI) 技術和
X.509 憑證[5] [6]，來提供安全網格認證之
基礎。此外，GSI 主要的運作則是藉由
Globus toolkit [1] [2]來整合完成。 
 由上描述可知，GSI 的認證機制是藉
由 PKI 與 X509 的憑證來完成。然而在 PKI
的環境下必需要有一憑證廢除機制來達到
欲在憑證過期前即廢止憑證的應用，因此
近年來相關的憑證廢除機制有越來越多被
發展出來，而在現行的機制其中，最被廣
泛 使 用 的 則 是 利 用 憑 證 廢 除 清 單 
(Certificate Revocation List) 的機制[7]。在
CRL 裡會記錄著已經被廢止的憑證的序
號及其他當時被 Certificate Authority (CA) 
所簽署時的資訊，因此使用者只要去下載
最新的 CRL 即可知目前被廢止的憑證有
哪些。然而由於使用者必須時常更新其
CRL，因此其存在著兩個重大的問題，一
Root 之下的葉節點，如此即可在最短時間
內搜尋到，增進其效率。 
 在此，我們舉個例子以顯示出我們提
出的使用霍夫曼樹建立憑證廢止機制的優
異之處。假設目前有八張已經廢止的憑證
且其序號為 1~8，其中序號 1~6 的憑證被
詢問到的機率皆為 0.05，而序號為 7 跟 8
的憑證被詢問到的機率則為 0.35，如此八
張憑證的詢問機率合剛好為 1，接下來我
們將所提出的霍夫曼樹與二元樹來做比
較，如圖一。圖中顯而易見的，我們所建
立的霍夫曼樹的最大樹高為 5，而二元樹
僅只有 3 而已，乍看下我們的方法較沒有
效率。然而由於這是有考量憑證被詢問的
機率，因此當我們計算平均樹高時，我們
所提出的方法平均樹高為 0.05 × 5 × 4+ 
0.05× 4 × 2+0.35 ×2+ 0.35 × 1 = 2.45，比起
二元樹的平均樹高還來的小，由此可知我
們的方法是有所改善的。 
 
圖一 . Example of binary Huffman CRT and balanced 
binary CRT 
由上述的例子可以知道我們在搜尋時
能夠更快更有效的我們所要詢問的憑證，
而真正的比對上我們則跟之前的 CRT 所
採用的方法一樣。也就是說，當要詢問某
一憑證是否在廢止名單中，則將其所在的
Root，樹高以及時戳加以 Hash 計算其值，
在根據其樹高找到其內部節點比較兩者
Hash 值是否一樣即可知道該憑證是否在
憑證清單中。另外要注意的是，若是想要
偽造的話，即是要解決不易產生碰撞的
Hash 問題，因此想要偽造的話是不太可行
的。 
之前的實例可以清楚的觀察到我們的
Huffman CRT 的樹高有顯著的下降，而接
下來我們將要從理論分析與實驗數據兩方
向來更近一步分析証明我們所提出的機制
所得到的平均樹高會比原本的 CRT 中的
平均樹高 2log n還要小。 
首先以理論分析，我們提出了兩個定
理如下： 
 
定理 一: 假設霍夫曼樹裡，讓 P = {p1, 
p2,… , pn}，且 
1
1
n
i
i
p
=
=∑  為其ｎ個子節點的
機率分布，則其平均樹高 H 將會接近其
entropy H(P)，並且其值必定會小於用ｎ所
建之平衡二位元 CRT 的平均樹高。 
證明: 假設第 i 個子節點的高度為 di，則平
均高度會是 
1
n
i i
i
p d
=
∑ 。根據 Theorem 3.3.2 
(p.51 in [16])，平均霍夫曼碼碼長n 必定滿
足 ( ) ( ) ( )2 2( ) log ( ) log < 1≤ +H P D H P Dn n ，其
中 D 為 size 的代號。因此對一個 n 節點的
二元樹  (D=2) 而言會滿足下列式子，
( )H n H P= = ，這明顯的可以看出其 entropy 
H(P) 當在 
1 2
1= = = ="
n
p p p n  時有其最
大值 ( )2 2
1
log 1 log
=
=∑n i i
i
p p n，得證。 
 我們可以利用定理一來重新計算之前
我們所舉的例子，其霍夫曼樹的 entropy 
H(0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.35, 
0.35)為 2.36，很接近我們之前所算的平均
高度 2.45，因此可知利用 entropy 可以很
接近的預測出平均樹高。 
 接下來我們考慮在實際的憑證環境
下，由於每個憑證所被詢問的機率不同，
因此可以將所有的憑證合理的歸類為兩群 
na 和 nb 而 na > nb 且 na + nb = n，其中 n 
為所有憑證之總和數，而根據 80-20 法
則，此兩群的詢問機率可訂為 pa 和 pb 其
中 pa < pb 且 pa + pb = 1，而每個子群各自
的詢問機率算法皆跟原本的一樣，因此我
們另外定 義兩個參 數 αn 和  αp 其 
na=αn×nb 且 pa=αp×pb 。則接下來的定理二
 
初步介紹完模擬結果後，接下來我們
要說明的是我們在模擬時所採用的骨幹架
構與及各憑證廢止機制間的比較。首先由
於 GSI 是採用 PKI 策略，一般而言，PKI
的憑證廢止機制有兩種不同的模型，分別
為 PKI reference model [10][18] 以及 
IETF standardization framework [19] 而我
們這邊的骨幹模型選擇的是 PKI reference 
model。 
在某些機制下，憑證的廢止資訊會被
CA 所簽證以提供其完整性與認證，在這
些機制則稱為 two-part 機制；而另外有些
機制則是靠有公信力的第三者，例如 CRL
發行者與 OCSP 回應端等，他們會將憑證
的廢止資訊回到 EEs 端再回傳至詢問者；
而上述不會是 CA 或是有公信力的第三
者，兩者皆須被機制所信任才是。此外，
不論是選擇何種機制，想要採用同一種骨
幹架構是不太可行的，所以骨幹架構在不
同的機制下皆需要稍微修改，例如 IETF
模型是利用 EE 端當作使用者或儲存空間
代替名簿，而由於 IETF 也定義了 RA 與
CA 間的溝通，因此亦可以稍作修改使其
能支援 OCSP 的機制。因此為了符合我們
所提出的機制，我們將模型稍作修改如圖
六。 
圖六.  Reference certificate revocation model 
而在許多憑證廢止的分析研究上，大
部分機制都是使用 US Federal PKI MITRE 
report [20]。但是 MITRE report 並非只單
純可用在 US Federal 政府機構上，亦可用
於其他政府機構、醫藥組織或網際網路組
織，而為了不失普遍性，本研究亦是使用
MITRE 環境與其他相關的機制 [11] [17] 
[18] 和 [21]。而為了易於分析，在此我們
只假設單個 CA 和多個 EEs，而所有的廢
止機制在此系統中皆可與 EE 端溝通。此
外利用 Certificate Management Ancillary 
Entity (CMAE) [18]當作為 CRL、CRT、
2-3CRT 與我們的霍夫曼 CRT 的儲存點，
而 OCSP 機制則提供其一個線上的 OCSP
回應端，而接下來的各機制的比較準則，
則是選擇最常被當作比較基準代表的效
能、即時性與安全性 [18] [20] [21]。 
z 效能比較: 
效能耗費主要是分作當其廢止憑證機
制的更新耗費與詢問耗費兩項。更新耗費
指的是從 CA 端更新最新的憑證廢止資訊
所耗費的成本，可用三個元件表示 (BW, 
TCA, TCMAE)，其中 BW 為 CA 到 CMAE 傳
輸時所耗費的頻寬大小，測量標準為每天
多少位元，另外 TCA 與 TCMAE 則是 CA 與
CMAE 間操作時所耗費的時間，測量標準
為毫秒。而詢問耗費則是者使用者尋問憑
證是否具有有效性時所耗費之成本，可用
四個元件表示 (BW, TCA, TCMAE, TEE) ，其
中分別表示了 CMAE 到 EE 端的頻寬耗費
與及 CA、CMAE、EE 端的操作時間耗費。 
z 即時性比較: 
即時性的比較則是利用即時更新廢止
資訊並檢測目前機制是否能夠正確判斷出
憑證的狀態。 
z 安全性比較: 
為了確保憑證的有效性，每個正確性
的回應訊息應該皆要被 CA 簽署以確保其
完整與認證性。 
由上述三個比較準則我們不難發現，
其中屬於交換性質，舉例而言若某個機制
要有好的及時性，則其必然需要時常更新
其憑證廢止資訊，然而如此即會造成更新
耗費相對的變高。 
接下來在介紹我們的比較結果前先提
出我們在此所使用到的參數，如列表二 
們所提的方法為目前最適於用在現行網路
中的憑證廢止機制，而改善了憑證廢止機
制則能更進一步的使得利用 PKI 憑證認證
機制的格網運算系統能更加的有效率。 
 
四、參考資料 
[1] I. Foster, C. Kesselman, G. Tsudik, and S. Tuecke, “A 
security architecture for computational grids”, in Proc. 5th 
ACM Conf. Computer and Communications Security, 1998, 
pp. 83-92. 
[2] R. Butler, D. Engert, I. Forster, C. Kesselman, S. 
Tuecke, J. Volmer, and V. Welch, “A national-scale 
authentication infrastructure”, IEEE Computer, Dec. 2000, 
vol. 33, no. 12, pp. 60-66. 
[3] T. Dierks and E.Rescorla, “The TLS Protocol Version 
1.1. “, RFC 2246, Mar. 2004, Available at : 
http://www.ietf.org/ 
internetdrafts/draft-ietf-tls-rfc2246-bis-06.txt. 
[4] A. Frier, P. Karlton, and P. Kocher, “The SSL 3.0 
Protocol”, Netscape Communications Corp. Nov. 18, 1996. 
[5] ITU-T. Information Technology-Open Systems 
Interconnection - The Directory: Authentication Framework, 
Recommendation X.509 (1997E), Jun. 1997. 
[6] R. Housley, W. Polk, W. Ford, and D. Solo, “Internet 
X.509 Public Key Infrastructure: Certificate and CRL 
Profile”, RFC 3280, Apr. 2002. 
[7] ITU-T. The Directory-Authentication Framework. 
Recommendation X.509, ITU-T, 2000. 
[8] M. Myers, R. Ankney, A. Malpani, S. Galperin, and C. 
Adams, “X.509 Internet Public Key Infrastructure Online 
Certificate Status Protocol-OCSP”, RFC 2560, 1999. 
[9] Rivest, “Can We Eliminate Certificate Revocation 
Lists”,  Proceeding of Financial Cryptography ’98, LNCS 
1465,  1998, 178-183. 
[10] P. Kocher, “On Certificate Revocation and Validation”,  
Proceeding of Financial Cryptography ’98, Springer LNCS 
1465, 1998, 199-216. 
[11] M. Naor, and K. Nissim, “Certificate Revocation and 
Certificate Update”, Proceeding of 7th USENIX Security 
Symposium, Jan 1998, 217-228. 
[12] H. Kikuchi, A. Kensuke, and S. Nakanishi, “Optimal 
Data Structure for Certificate Revocation”, The first 
International Workshop for Asia PKI (IWAP ’01), Oct. 
2001. 
[13] R. Rivest, “The MD5 message-digest algorithm”, RFC 
1321, 1992 
[14] U.S. Department of Commerce. Secure Hash Standard. 
FIPS Publication 180-2, 2002. 
[15] E. Horowitz, and S. Sahni, “Fundamentals of Data 
Structures in Pascal”, Pitman, 1984, 423-426. 
[16] R. G. Gallager, Information Theory and Reliable 
Communication, JOHN WIELY & SONs INC, 1968. 
[17] H. Kikuchi, A. Kensuke, and S. Nakanishi, 
“Performance Evaluation of Certificate Revocation Using 
K-valued Hash Tree”, Proceeding of ISW'99, 1999, 
103-117. 
[18] P. Zheng, “Tradeoff in Certificate Revocation 
Schemes.”, ACM SIGCOMM Computer Communications 
Review, 2003, Vol. 33, NO. 2, 103-112. 
[19] R. Housley, W. Polk, W. Ford, and D. Solo, “Internet 
X.509 Public Key Infrastructure Certificate and Certificate 
Revocation List (CRL) Profile”, Internet RFC 3280, 2002. 
[20] S. Berkovits, S. Chokhani, A. J. Furlong, J. A. Geiter, 
and J. C. Guild, “Public Key Infrastructure Study: Final 
Report”, MITRE Corporation, April 1994, 32-39. 
[21] A. Arens, “Public Key Certificate Revocation 
Schemes”,  Doctoral Dissertation at Queen University 
Canada, 2000, 12-21. 
 
 
 
 
 
 
 
 
 
 
 
 
 
revoked certificates, whereas, in the worst situation, the 
cost would be O(n) [12]. 
Considering our Grid computing environment, the 
query probabilities of certificates are not the same in 
real environment. Since all Grid nodes are provided 
with the different publicity, where the high publicity 
means the large amount of computing transactions and 
results in a high query request of certificate revocation. 
As a result, making the tree structure of the certificate 
revocation information be organized according the 
publicity (requested probability) seems reasonable. We 
put the revoked certificate with high requested 
probability near the root to decrease the depth and such 
that the query cost is reduced. 
In this paper, we use 80-20 rule to conform the 
different requested probability and put the revoked 
certificate in the Huffman tree according their different 
requested probability to reduce the average height of 
CRT scheme. The 80-20 rule used in management 
context is that twenty percent of the people owned 
eighty percent of their country's accumulated wealth. 
This analytic tool is usually called Pareto's Principle, 
the 80-20 Rule, the Vital Few or Trivial Many Rule. 
This rule motivates us that our PKI environment has 
the same characteristic that less websites will have 
higher requested probability due to large transactions. 
This paper is organized as follows. In Section 1, 
our Huffman CRT scheme is proposed; also both 
theoretical analyses and simulated results are given. 
Section 2 gives the evaluation of our scheme and other 
revocation schemes. Section 3 concludes the paper. 
 
2. The proposed revocation scheme 
 
The proposed Huffman CRT scheme takes the 
advantage of the Huffman tree structure to reduce the 
query cost between the repository and EEs (End-
Entities). The Huffman tree structure is helpful to build 
a hierarchy level when the requested probabilities are 
different. 
 
2.1 The proposed Huffman CRT scheme 
 
Our Huffman CRT tree is described as follows. 
First, using Huffman algorithm, put the certificate into 
the leaf node according its requested probability in the 
revocation table where stores each revoked certificate’s 
serial number, revocation reason and its number of 
requested times (Table 1 illustrates an example of 
revocation table). Then, the value of an internal node is 
computed by a collision intractable hash function h(⋅) 
on the value of its two children. Hash functions such as 
MD5 [13] or SHA [14] can be used here. Our Huffman 
CRT structure is a binary search tree satisfying the 
following properties. 
1) The path of more publicity leaf is shorter than that 
of less  publicity leaves from the tree root. 
2) Each leaf can be uniquely extracted by tracing out 
along the path from the tree root. 
 
Table 1. Example of revocation table 
Serial 
number Revoked reason Revocation date 
Number of  
requested 
times 
3d 6f 65 
11 0f 
Key 
compromised 20040101120000 90 
3d 2f 15 
21 13 
Affiliation 
changed 20040202120000 62 
5d 31 22 
15 12 
Key 
compromised 20040303120000 60 
#  
4d 6f 65 
22 5f 
Key 
compromised 20040101120000 23 
5f 7c 55 
23 41 Superseded 20040202120000 10 
3f 2a 45 
62 22 Certificate hold 20040303120000 3 
 
An algorithm of binary Huffman tree can be found 
in [15]. The insertion/deletion time complexity for the 
algorithm is O(n log n). The property of Huffman tree 
can distinguish the publicity from all candidates. The 
higher publicity weight can be placed into the nearer 
location from the root. 
We take an example to show the benefit of the 
proposed Huffman CRT scheme. Suppose that we have 
the eight revoked certificates and their serial numbers 
are 1~8 along with their requested probability pi=0.05, 
1≤i≤6, and p7=p8=0.35, where 
8
1
1i
i
p
=
=∑ . Figure 1 
shows these revoked certificates in the proposed 
Huffman CRT scheme and balanced binary hash tree 
scheme, respectively. From Figure 1, the maximum 
tree height in balanced binary CRT (tree height =3) is 
less than the proposed Huffman CRT (tree height =5). 
But, the average tree height (aka. the weighted external 
path length) of the proposed Huffman CRT 
8
1
i i
i
p d
=
∑ = 
(0.05 × 5 × 4+ 0.05× 4 × 2+0.35 ×2+ 0.35 × 1) = 2.45 
is less than  the average tree height of balanced binary 
CRT. 
To prove whether the certificate is valid or not is 
same as other CRT schemes, i.e. prove the existence of 
a particular leaf in the Huffman tree. CA can assure the 
authenticity of the data structure by signing a message 
containing the tree root, tree height and a timestamp. 
The proof is verified by checking the hash values of the 
tree nodes on the given path and then compare with the 
tree root, tree height and timestamp. Note that, building 
a fallacious proof for the existence of a leaf in the tree 
is trying to solve the collision intractability of hash 
function. The average height of the Huffman tree could 
 
Figure 2. The average height regarding to the balanced 
CRT and the proposed Huffman CRT  
for (3:7) and (2:8) cases 
 
The simulated results for three subgroups where 
na : nb : nc =5:3:2, pa : pb : pc=2:3:5 and na : nb : nc 
=7:2:1, pa : pb : pc=1:2:7 are shown in Figure 3. In this 
(1:2:7) case, the maximum reduction when n = 30,000 
was 0.88 times as small as balanced binary tree. 
 
 
Figure 3. The average height regarding to the balanced 
CRT and the proposed Huffman CRT 
for (2:3:5) and (1:2:7) cases 
 
2.3 The m-ary huffman CRT 
 
Kikuchi studied the CRT using balanced m-ary 
hash tree with the average height logmn  to reduce the 
update and query costs in a certificate revocation 
scheme [17]. Our proposed Huffman CRT can also be 
applied to the m-ary CRT by using the m-ary Huffman 
tree. By the same approach, for any positive integer m, 
the approximated average tree height of an m-ary 
Huffman tree for larger n is ( )2( ) logH P m . 
For example, using m=3, Figure 1 can be 
represented by a 3-ary binary CRT and a 3-ary 
Huffman CRT, shown in Figure 4. The average height 
of the balanced 3-ary tree is 2 and the average height of 
3-ary Huffman CRT is 
8
1
i i
i
p d
=
∑ = (0.05×4×2+ 
0.05×3×2++0.05×2×2+0.35×1×2)=1.6. The 
approximated value ( )2( ) logH P m  is 1.53. Figure 5 
shows the simulated results of the proposed m-ary 
Huffman CRTs, m=2, 4 and 8, for (2:8) case. 
 
Figure 4. Examples of 3-ary Huffman CRT and 
balanced 3-ary CRT 
 
 
Figure 5. The average heights for balanced m-ary 
CRTs and m-ary Huffman CRTs  
with (2:8) case for m=2, 4 and 8 
 
3. Evaluation 
 
Since the existing certificate revocation schemes 
are based on different strategies, so that we hardly 
compare them fairly. In this section, a common 
evaluation criteria will be defined, and then the 
evaluation for the proposed Huffman CRT scheme and 
other revocation schemes are given.2.1. 
 
3.1 Framework of analysis 
 
3.1.1 Reference model 
 
Since GSI uses the PKI strategy, thus we here use 
the PKI reference model to analuze the proposed tree-
based certification revocation scheme. Generally, PKI 
certificate revocation scheme is based on two types of 
models. The first one is referred to as the simplified 
PKI reference model [10], [18]; the second one is used 
in the IETF standardization framework [19]. 
In some schemes, the revocation information is 
digitally signed by the CA to provide the integrity and 
authenticity; these schemes are frequently referred as 
two-party schemes. In other schemes, a third party, e.g. 
CRL issuer or OCSP responder, is involved to sign the 
revocation information and response to EEs on the 
behalf of CA; both the CA and the third party must be 
based scheme to update the revocation information 
periodically. The CRT, 2-3 CRT and the proposed 
Huffman CRT scheme are all tree-based schemes with 
reduced data structures. These CRT schemes present 
the revocation information in compacted form (hashes 
in a tree), and intended to provide the EE with a 
minimal proof of confirmation message.  
 
Table 3. Comparison of the timeliness and security 
Schemes Timeliness Security 
CRL Low CA trusted 
OCSP 
High 
(depend on back-
end) 
CA and OCSP 
responder trusted 
CRT Over CRL CA trusted 
2-3 CRT Over CRT CA trusted 
The Huffman 
CRT Same as CRT CA trusted 
 
The formulaic expressions for bandwidth cost, 
update cost, and query cost for six revocation schemes 
(CRL, OCSP, CRT, 2-3 CRT, the binary Huffman 
CRT and the 4-ary Huffman CRT) are given in Table 4, 
5 and 6, respectively. The value “0.91” in Table 4 
comes from Figure 2 (Note: in (2:8 case), the 
maximum reduction when n = 30,000 is 0.91 times 
when compared to the balanced binary tree. Next, we 
use the values in Table 2 to calculate the numerical 
results (see Table 7).  
 
Table 4. Formulaic expression of bandwidth costs 
Schemes Update bandwidth cost Query bandwidth cost 
CRL u×(n×p×Lsn+ Lsign) q×(n×p×Lsn+ Lsign) 
0 
OCSP 
u×(n×p×Lsn+ Lsign) 
q×Lsign 
CRT u×(n×p×Lsn+ Lsign) 
q×(2×log2 (np)×Lhash+ 
Lsign) 
2-3 CRT u×(2×log2 (np)×Lsn+ Lsign) 
q×(2×log2 (np)×Lhash+ 
Lsign) 
Binary 
Huffman CRT u×(n×p×Lsn+ Lsign) 
q×(2×0.91×log2 
(np)×Lhash+ Lsign) 
4-ary 
Huffman CRT u×(n×p×Lsn+ Lsign) 
q×(2×0.91×log4 
(n×p)×Lhash+ Lsign) 
 
Table 5. Formulaic expression of update costs on CA 
and CMAE 
Schemes CA CMAE 
CRL u×Tsign u×Tver 
0 0 
OCSP 
u×Tsign u×Tver 
CRT u×(n×p×Thash+ Tsign) u×(Tver+ n×p×Thash) 
2-3 CRT u×(2×log2 (np)×Thash+ Tsign) 
u×(Tver+2×log2 
(np)×Thash) 
Binary 
Huffman CRT u×(n×p×Thash+ Tsign) u×(Tver+ n×p×Thash) 
4-ary Huffman 
CRT u× (n×p×Thash+ Tsign) u×(Tver+ n×p×Thash) 
 
Table 6. Formulaic expression of query costs on 
CA,CMAE and verifier 
Schemes 
Cost on 
CA 
Cost on 
CMAE 
Cost on Verifier 
CRL 0 0 q×Tver 
OCSP 0 q×Tsign q×Tver 
CRT 0 0 q×(Tver+ log2 (np)×Thash) 
2-3 CRT 0 0 q×(Tver+ log2 (np)×Thash) 
Binary Huffman 
CRT 
0 0 
q×(Tver+ 0.91×log2 
(np)×Thash) 
4-ary Huffman 
CRT 
0 0 
q×(Tver+ 0.91×log4 
(np)×Thash) 
 
Table 7. Daily update cost and query cost 
Daily update cost Daily query cost SchemesBW(bits)TCA(ms)TCMAE(ms)BW(bits) TCA(ms)TCMAE(ms)TEE(ms)
CRL 1.2e+5 1.2e+2 2 3.6e+11 0 0 6e+6 
0 0 0 OCSP 1.2e+5 1.2e+2 2 6.1e+9 0 3.6e+8 6e+6 
CRT 1.2e+5 2.7e+2 1.5e+2 1.7e+10 0 0 7.7e+6
2-3 CRT 2.9e+3 1.2e+2 3.1 1.7e+10 0 0 7.7e+6
Binary 
Huffman
CRT 
1.2e+5 2.7e+2 1.5e+2 1.6e+10 0 0 7.5e+6
4-ary 
Huffman
CRT 
1.2e+5 2.7e+2 1.5e+2 1.1e+10 0 0 6.8e+6
 
From Table 7, it is shown that the proposed 
Huffman CRT scheme can get the reduction in query 
bandwidth consumption and verifier’s effort than CRT 
and 2-3 CRT. OCSP is the only one that provides more 
timely revocation support with little querying 
bandwidth. However, due to the heavy processing 
overhead on OCSP responder, it is obvious that OCSP 
can hardly scale in internet environment. The CRL is 
the commonly-used due to the simplicity, but CRL has 
a severe scalability problem of huge bandwidth 
consumption when query processing. The 2-3 CRT 
performs the best performance in update cost. Since the 
CA just sends the different list and affected nodes to 
repository in the update process. All the tree-based 
architecture has a larger update cost in CA and 
repository, but the tree-based architecture meets the 
technical requirements for most applications. The 
security is proved as good as hash function. The only 
digital signing process (for the tree root) can be 
performed off-line, so signing keys do not need to be 
managed on the network. 
 
 
 
4. Concluding remarks 
 
In this paper, we consider the different requested 
probability in the real GSI environment. The advantage 
