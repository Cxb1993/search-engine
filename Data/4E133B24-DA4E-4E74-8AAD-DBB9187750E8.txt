 1
行政院國家科學委員會專題研究計畫成果報告 
顧客訂單排程問題在平行機環境之研究 
The study of the customer order scheduling problem  
on parallel machines 
中文摘要 
我們討論一個平行機的排程問題，其中要求整批工件(或顧客訂單)需一同運送給顧客。
基於下列理由使得訂單相關的準則，其重要性超越工件相關的準則。例如：只運送部分訂單
會增加額外的運輸費用，並也會增加訂單管理的成本，或顧客會要求廠商訂單整批一起送達。
這些因素使得訂單中所有工件完成後，再一起運送給顧客。 
本研究探討的準則為訂單完成時間總和(流程時間)的最小化，而訂單完成時間是指訂單
所有工件被完成的時間。每部機器一次只能處理一個工件且工件沒有優先權。我們將討論顧
客訂單問題在三種不同加工環境的情況。首先，探討每部機器均可加工所有工件的問題，我
們也討論等效平行機與非等效平行機情況。第二個例子是部分機器可加工所有工件，其餘機
器僅可加工一種工件的問題。最後，將探討每一部機器僅可加工專屬工件種類的情形。對於
這些問題，我們均提出總流程時間準則的下界限與演算法來求解，並作為進一步探討不同加
工情況的訂單流程時間問題的基礎。 
 
關鍵詞：排程、平行機、顧客訂單問題 
Abstract 
We consider the parallel machine scheduling problems where a set of jobs (customer order) is 
shipped at the same time. There are several reasons for considering the orders rather than the 
individual jobs within the orders. Shipping partial orders inevitably results in additional cost of 
transport and extra management effort. In addition, some customers may require suppliers to ship 
complete orders. Therefore, suppliers have to wait until all products for an order are ready.  
In this study, the considered objective is minimizing the sum of the order completion times at 
which all the jobs in the order have been processed. Each machine processes one job at a time and 
job pre-emption is not allowed. We discuss the following three cases of the customer order 
problems. The first case is that any one of machines is capable of processing all the jobs. We discuss 
both identical machines and non-identical (uniform) machines as well. The second case is that the 
part of machines can process all the jobs and the other can process one job type. Finally, the last 
case considers that each machine can process one and only one job type. We develop the lower 
3 
發式演算法 (Coffman 等人，1978)。而最佳解演算法則多採用動態規劃  (Dynamics 
Programming)演算法來探討。最近，Ho 與 Wong (1995)結合雙平行機的特性與字典搜尋法 
(lexicographic search)，提出雙平行機最佳解的 TMO 演算法，而 Lin 與 Liao (2004)應用 TMO
演算法，結合多平行機的特性與字典搜尋法，發展出多平行機總完成時間的最佳解 m-IMO
演算法。有關非等效平行機 ( max//Q C ) 問題的演算法較少被討論到，Horowitz 與 Sahni 
(1974)以動態規劃法發展出最佳解演算法，Liao 與 Lin (2003) 提出雙非等效雙平行機問題
( max2 //Q C )最佳解的演算法，他們以分派到機器的工作負荷觀點，發展出最佳解 TUMO 演
算法，計算效率是優於動態規劃法。Lin 與 Liao (2008a) 更將雙機問題延伸到多機問題
max//Qm C 上，提出 m-UMO 的最佳解演算法。 
完全彈性加工的情況是指每一部機器均可處理所有的工件，與一般平行機文獻的討論環
境相同中。Blocher 與 Chhajed (1996)針對多平行機訂單總流程時間問題提出兩階段的啟發性
演算法。先是決定訂單的順序，再來分派訂單的工件。在決定訂單的順序有兩種方式，一是
工件總處理時間，另一是最小完成時間；而分派訂單的工件也提出 LPT 法則與背包問題法則
(Bin Packing rule)。Yang (2005)證明雙平行機與多平行機的訂單總流程時間問題都是為
NP-hard 問題。Yang 與 Posner (2005) 提出ㄧ個多平行機問題啟的發性演算法，也提出兩個雙
機問題的啟發性演算法並作最差情況 (worst-case)分析。Leung 等人(2006)則是探討總加權流
程時間問題，他們延伸 Blocher 與 Chhajed (1996)在總流程時間問題的演算法，提出數個啟發
式演算法，並進行最差情況與數值實驗上的分析。以上所討論的平行機有相同加工速率，即
是等效平行機。而針對不同加工速率的平行機(非等效平行機)的問題上，則有 Leung 等人
(2007b)探討總加權流程時間問題，並提出啟發式演算法。 
而完全專門加工的情況，常見於多數接單生產(make-to-order)情形。前述的汽車維修廠的
問題就是完全專門加工的實務情況，另外 Leung 等人(2005b)也提出紙製品工廠，也是一種完
全專門加工的問題，因為每種紙製品僅能由特定專屬的機器生產。有關此加工情況的相關文
獻如下，Wagneur 與 Sriskandarajah(1993)以雙機開放性工廠(open shop)有工件重疊(job overlap)
的排程問題來替代雙機完全專門加工的環境的討論。Sung 與 Yoon(1998)證明了雙機總加權流
程時間的問題為 NP-hard。Leung 等人(2005b)探討總加權流程時間與總加權延遲時間等問題，
並證明三部平行機器的總流程時間問題為 NP-hard。Roemer (2006)也證明兩部平行機器總流
程時間的問題為 NP-hard。Leung 等人(2007a)發展總加權流程時間的啟發式演算法，並應用來
處理有工件釋放時間(release time)的情況上。除了上述的平行機環境外，針對其他環境的探
討，可參考 Gupta 等人(1997)與 Blocher 等人(1998)的文獻。 
在平行機的問題中，有一種雙等級加工限制問題。因為此問題具有完全彈性加工與完全
專門加工的性質，所以本研究探討混合加工情況的以此類問題來延伸探討。所謂雙等級加工
限制問題中，工件與機器都有等級「高」與等級「低」兩種水準，其中等級「高」的機器可
加工所有工件(完全彈性加工的情況)，而等級「低」的機器僅能加工等級「低」的工件(完全
專門加工的情況)。平行機的等級加工限制問題，也是常見的實務情況。在生產鋁箔過程中，
化成工程是關鍵的程序，不同電壓的化成設備具有替代性，就是高電壓的化成設備可生產較
低電壓(包含中電壓與低電壓)的鋁箔(游文清，1996)。Hwang 等人(2004) 也指出在服務業中，
常將會員區分不同等級，如一般會員、金卡會員與最高等級的白金卡會員。當白金卡(最高等
級)服務區在空閒時，也可提供一般與金卡會員的服務。另外，在機場上飛機停靠登機門的排
程問題也是一例，由於飛機的大小不同，部分登機門是無法停靠大型飛機(Salem 等人，2000)。
在針對等級加工限制的問題，Hwang 等人(2004)提出修改 LPT 啟發式演算法，以等級較少(限
制較多)的工件為優先，而相同等級的工件，再以 LPT 來安排順序，發展出 LG-LPT 啟發式演
算法。最近，Lin 與 Liao(2008b)討論雙等級加工的總完成時間問題，他們利用機器與工件加
工的特性，將此問題轉換成多等效平行機總完成時間的問題。 
接下來內容，將按照問題討論的關聯性，以完全彈性加工(等效與非等效平行機)、混合
5 
b
M2 
M1 
a  
圖 1. ( , )P a b 問題的示意圖  
 
以下說明本問題演算法的概念，在問題中有m 部機器與 k 筆訂單，而訂單 ( 1,2,.... )iO i k
的工件總處理時間總和為 iT 。首先開始處理訂單 1O ，由於這是第一筆處理的訂單，所有機器
均由零開始加工。加上訂單 1O 完成時間的下界限為 1 1 /h T m   ，所以各機器的可加工時段均
為( 10,h )。而分派工件的方式是，先將所有工件分派到機器 1M 的( 10,h )區間中，利用 ( , )P a b 演
算法，得到( 10,h )區間的最大完成時間 1s；而剩餘的工件再分派機器 2M 的( 10,h )區間，得到其
最大完成時間 2s。依此類推，直到完成機器 1mM  上的工件分派後，最後剩餘的工件，即是分
派的最後一部機器。當所有工件無法分派到這些機器的加工時段時，需要再放寬完成時間
1 1+1h h ，再重新開始這筆訂單的分派工作。直到所有工件可分派到所有機器上時，才可再
進行下一筆訂單的分派工作。依此類推，直到所有訂單均處理完畢。 
其中下列的情況產生，則無須分派到機器 1mM  ，即需放寬完成時間並重新開始分派工
件。因為可分派區間共有 1mh ，需分派的總處理時間總 1T ，所以有( 1 1mh T )的餘裕。若分派
到前 j 部機器，機器上的餘裕總和( 11( )
j
tt h s  )大於( 1 1mh T )，則表示剩餘的工件一定無法
分派到後續機器中，所以即可寬完成時間並重新開始分派工件。另外，在完成訂單 1O 時，機
器 jM ( 1,2,...,j m )的完成時間 1, j jC s ，是作為進行下筆訂單時，各機器的開始加工時間，
所以在訂單 2O 的機器 jM 的可加工時段為( 1, 2,jC h )。其本問題的演算法步驟如下： 
步驟 0：  將訂單 1 2( , ,   ...,  )kO O O 重新編號，以滿足 1 2 ... kT T T   。設 0i  ， 0, 0jC  以及
1
/tt jjC T m    ，其中 1,2,...,t k 、 1,2,...,j m 。  
步驟 1：  令 1i i  ，若 i k ，則到步驟 6；否則， iih C 。  
步驟 2：令 0j  與 1ii i tts mh T  。  
步驟 3：  1j j  。以 ( , )p a b 演算法計算 1,( , )i j ip C h 問題，得到 js。  
步驟 4：  若 1( )
j
ii tt h s s   ，則 1i ih h  ，回到步驟 2。  
步驟 5：  若 1j m  ，則 ,1 1iC s ，…， , 1 1i m mC s  ，並回到步驟 1；否則，回到步驟 3。 
步驟 6：  停止演算法，得到訂單總流程時間為 1
k
tt h 。  
演算法的簡略說明如下：在步驟 0，設定問題的起始條件訂單 i與機器 j 的開始時間 0, jC ，
並計算各訂單的下界限值 iC 。在步驟 1 為判斷是否訂單已全數作完，若尚未完成，則開始設
定訂單 i的完成時間 ih 。再下一步驟，則計算訂單 i的機器容許的餘額 is 。步驟 3 及 4，則是
利用 ( , )p a b 演算法處理得到 js值，並計算目前的餘額是否大於 is ，如果 1( )j ii tt h s s   ，則
放寬完成時間 ih ，回到步驟 2，重新分派工件。在步驟 5，當前( 1m  )部機器已完成分派工作，
表示訂單 i的完成時間為 ih ，並進行下一筆訂單。最後步驟為計算訂單流程時間為 1
k
tt h 。 
7 
中 1,2,...,j m 。  
步驟 1：  令 1i i  ，若 i k ，則到步驟 6；否則，算出
1
/i kkC T V  以及整個可能完成
時間的序列 [ ]lC 並令 0l  。  
步驟 2：令 0j  與 [ ]1 1m ii l j tj ts C v T       。  
步驟 3：  1j j  。以 ( , )p a b 演算法計算 [ ]1,( , )li j jp w C v    問題，得到 js。  
步驟 4：  若 [ ]1( )
j
l it tt C v s s      ，則 1l l  ，回到步驟 2。  
步驟 5：  若 1j m  ，則 ,1 1iw s ，…， , 1 1i m mw s  ， [ ]lih C 並回到步驟 1；否則，回到
步驟 3。  
步驟 6：  停止演算法，得到訂單總流程時間為 1
k
tt h 。  
演算法的說明如下：在步驟 0，設定問題的起始條件機器 j 上分派的工作負荷 0, jw 。在步
驟 1 為判斷是否訂單已全數作完，若尚未完成，則開始計算訂單 i的可能完成時間C 以及可能
完成時間的序列 [ ]lC 。在下一步驟，則計算訂單 i的機器容許工作負荷的餘額 is 。步驟 3 及 4，
則是利用 ( , )p a b 演算法處理得到 js 值，並計算目前的工作負荷餘額是否大於 is ，如果
[ ]1( )
j
l it tt C v s s      ，再回到步驟 2，則進行下一個可能完成時間 [ 1]lC  ，再重新分派工作
負荷。在步驟 5，當前( 1m  )部機器已完成分派工作負荷，表示訂單 i的完成時間為 [ ]lih C ，
並進行下一筆訂單。最後步驟為計算訂單流程時間為 1
k
tt h 。 
四、混合加工情況 
混合加工環境所涵蓋的問題是相當廣泛，本研究則針對雙等級加工的平行機問題，進
行訂單總流程時間最小化的討論。雙等級加工環境是指機器與工件均有「高」與「低」兩
等級，等級「高」的機器，可加工所有的工件；而等級「低」的機器，僅可加工等級「低」
的工件。這是由於問題中部份機器具備有完全彈性加工的性質(等級高的機器可加工所有工
件)，其餘機器則具備有完全專門加工(等級低的機器僅可加工等級低的工件)的情形，其加
工環境正好介於(或是說綜合)兩問題之間，探討與其他問題的差異與相同之處。 
下界限討論 
在 Lin 與 Liao (2008b)針對雙等級加工總完成時間問題提出下界限的討論，簡述如下：
系統中共有 Hm 部等級「高」與 Lm 部等級「低」的機器，而等級「高」工件有 Hn 個，其處
理時間的總和為 HT ；另有等級「低」工件共有 Ln 個，其處理時間的總和為 LT 。由於等級「高」
的工件僅可被等級「高」的機器來加工，可形成一個總完成時間的下界限 1 /H HLB T m   。
另一個總完成時間的下界限，就是所有的工作負荷除以所有的機器數 ， 以
2 ( ) /( )H L H LLB T T m m    來表示。所以下界限  1 2max ,LB LB LB 。 
本問題的下界限討論，是延續上述的討論，敘述如下：每筆訂單 iO 中，分別有 Hin 個等
級「高」的工件(其處理時間總和為 HiT )與 Lin 個等級「低」的工件(其處理時間總和為 LiT )，
處理的共有 Hm 部等級「高」與 Lm 部等級「低」的等效機器。依據上一段的下界限 LB的計
算方式，計算(單獨)訂單 i的下界限 iLB ，並按照各訂單的 iLB 值，將訂單的重新編號，使得
1 2 ... kLB LB LB   。接下來討論訂單 1 的情況，其等級「高」與等級「低」的工件總處理
9 
五、完全專門加工情況 
對於機器與工件的加工關係而言，完全彈性加工的環境是沒有限制的，其中任何一個工
件可由任一部機器加工。但在完全專門加工的環境，則是有著嚴格的限制。也就是說在完全
專門加工情況下，若有m 種不同的機器，僅可加工各自專屬的工件(共有m 類)，機器與工件
的對應關係是一對一的。在考量慮總流程時間最小化，若討論的對象是工件，可運用 SPT 法
則得到最佳解；若討論的對象是每筆訂單有相同種類的數個工件，則可利用訂單總處理時間
遞增排序來安排訂單。若訂單包含不同種類的工件，將使訂單總流程時間的問題會變得複雜，
即使是雙機的問題也是 NP-hard 問題(Roemer，2006)。 
在完全專門加工的問題中，每筆訂單中的各類工件會有不同的數量，但在同一類工件(不
同訂單)是在同一部專門機器上加工。而為使訂單總流程時間最小化，同一訂單的同一類工件
應集中加工不應分散，也就是同一筆訂單中的同一類工件，應一次加工完成，不應分數次加
工。有關集中加工的說明如下：在時間點P 時，某一專門機器上需在先加工訂單 A，再接著
加工訂單 B 。訂單 A有工件序列 AS 與工件 AJ 須加工，訂單 B 有工件 BJ 與工件序列 BS 須加
工。而 AS 、 AJ 、 BS 、 BJ 的處理時間分別為 SAP 、 JAP 、 SBP 、 JBP 。工件集中加工的順序，如
圖 2(a)所示。現在以工件 AJ 與工件 BJ 的互換，當作工件分散的範例，如圖 2(b)所示。 
現在計算兩種情況的完成時間。首先，如圖 2(a)的工件集中加工情形，訂單 A的完成時
間為 A SA JAC P P P   ，訂單B 的完成時間為 B SA JA JB SBC P P P P P     。在圖 2(b)的工件分
散加工情形，訂單 A 的完成時間為 A SA JB JAC P P P P     ，訂單 B 的完成時間為 BC  
SA JB JA SBP P P P P     。所以，可得 <A AC C ，訂單B 的完成時間是不變的。此為單一機器上
的討論，可延伸到m 部專門加工的機器上。結論為同一訂單工件分散加工的完成時間是大於
或等於同一訂單一起加工的完成時間。所以在本研究的計算實驗中，當一訂單含有m 類的專
門工件，所討論的參數為該類工件的總處理時間，而不討論該類工件的數量。 
雙機問題演算法 
由於完全專門加工的訂單總流程時間最小化是 NP-hard 問題，將先進行雙機問題的討論，
依據問題的特性，我們提出數個啟發式演算法來求解問題。有關問題說明如下：問題中有兩
部機器 AM 與 BM ，分別有專屬加工的 A類與 B 類工件。今有 k 筆訂單，在訂單 i 中有 A類工
件總處理時間為
iA
T 與B 類工件總處理時間為
iB
T 。 
由於工件總流程時間問題的最佳解，可按照工件處理時間的 SPT 次序得到。所以，我們
先僅考慮某一類的工件，按照該類的總處理時間的遞增次序，決定訂單的分派順序，來得到
答案，得到演算法 A 與 B。 
 
 
 AS  BJ BS  AJ  
(a) 
BJ AJ BS  AS   
(b) 
圖 2 專門機器上訂單 A 與訂單 B 加工順序示意圖 
(a)工件集中(a)工件分散 
 
11 
表 1  完全專門加工的訂單總流程時間問題，四種啟發式演算法計算結果 
  演算法 A  演算法 B 演算法 C  演算法 D 
k  iT  平均誤差 最小值數  平均誤差 最小值數 平均誤差 最小值數  平均誤差 最小值數
10 (10,50) 9.19% 6 9.47% 2 1.21% 18  0.11% 94
 (10,100) 11.31% 6 12.20% 2 1.25% 12  0.02% 97
 (10,500) 13.81% 1 14.02% 3 1.10% 13  0.02% 97
13 (10,50) 10.53% 1 10.75% 1 1.20% 9  0.03% 97
 (10,100) 12.90% 1 13.53% 1 1.21% 5  0.10% 96
 (10,500) 14.40% 1 15.86% 2 1.23% 7  0.05% 97
16 (10,50) 13.26% 0 10.57% 0 1.02% 5  0.03% 97
 (10,100) 14.17% 0 14.17% 0 1.67% 1  0.00% 100
 (10,500) 14.09% 0 18.66% 0 1.16% 7  0.00% 100
20 (10,50) 11.78% 0 12.13% 1 0.69% 6  0.02% 93
 (10,100) 14.69% 0 15.04% 0 1.09% 5  0.05% 95
 (10,500) 17.77% 0 16.41% 0 1.42% 3  0.03% 98
30 (10,50) 12.31% 0 12.98% 0 0.98% 8  0.01% 92
 (10,100) 14.35% 0 14.81% 0 0.93% 8  0.04% 92
 (10,500) 18.78% 0 17.81% 0 0.88% 4  0.02% 96
50 (10,50) 13.89% 0 13.79% 0 0.71% 1  0.00% 99
 (10,100) 16.82% 0 17.37% 0 0.86% 3  0.00% 97
 (10,500) 19.53% 0 19.57% 0 0.89% 9  0.09% 91
100 (10,50) 15.07% 0 15.23% 0 0.60% 1  0.00% 99
 (10,100) 18.22% 0 19.53% 0 0.75% 0  0.00% 100
 (10,500) 22.27% 0 21.88% 0 0.62% 3  0.01% 97
 
分支界限法 
為評估啟發式演算法的效能，以分支界限法來求解最佳解 *F ，以作為評量的基準。我們
以前述的啟發式演算法的最佳結果F 作為總流程時間的上界限，消除不必要的分支與節點，
以節省計算時間。另外，也應用工件總流程時間的性質，發展出下列最佳解性質：若訂單
( , )h i j 有著 A類工件總處理時間為
hA
T 與B 類工件總處理時間為
hB
T 。當
i jA A
T T 且
i jB B
T T ，
則訂單 i應排在訂單 j 之前。 
表 2 顯示分支界限法在不同參數(每組參數進行 100 個測試)求解的計算秒數(CPU 時間)
與節點數。由於是 NP-hard 問題，僅能在訂單數少( 10,13,16k  )的問題上進行討論。再將最
佳解( *F )分別與演算法 D 結果( DF )和啟發式演算法的最佳結果( F  )比較，誤差的計算方式分
別為 * *( ) /DF F F  100% 與 * *( ) / 100%F F F  ，結果如表 3 所示。在表 3 中顯示，演算法
D 的結果( DF )與最佳解( *F )，所有結果的平均誤差不超過 2%，顯示演算法 D 在雙機問題中
有著不錯的計算效能。 
 
 
 
 
13 
專門加工工件，其中第 j 筆訂單中第 i類工件處理時間的總和為 ijT ，而第 i類機器上目前已分
派訂單的完工時間 iCM ，以及目前已分派訂單的總流程時間F 。前推式與後推式演算法的步
驟敘述如下： 
前推式演算法 
步驟 1：  設一訂單集合 {1,2,..., }O k ， 0F  以及 1 2 ... 0mCM CM CM    。  
步驟 2：  試算訂單 ( )j O ，在機器 ( {1,2,..., })i m 的上完成時間 i ij i jC CM T  ，並試算出
訂單 j 的完成時間
1,2,...,
max { }ij ji mC C 。  
步驟 3：  找出最小訂單完成時間的訂單 h ，使得 min{ }h jj OC C ，並設 { }O O h  以及
i
i i hCM CM T   ( 1,2,..,i m )， hF F C  。  
步驟 4：  若 O   (空集合)，回到步驟 2，否則結束演算法  
後推式演算法 
步驟 1：  設所有訂單集合 {1,2,..., }O k ，
1
k i
i jj
CM T  ， 1,2,...,max { }jj mF CM  
步驟 2：  試算訂單 ( )j O ，在機器 ( {1,2,..., })i m 上未分派最後位置的前一筆訂單完成
時間 i ij i jC CM T  ，並試算出訂單 j 的前一筆訂單完成時間 1,2,...,max { }
i
j ji m
C C

 。  
步驟 3：  找出最小前一筆訂單完成時間的訂單 h，使得 min{ }h jj OC C ，並設 { }O O h  以
及 ii i hCM CM T   ( 1,2,..,i m )， hF F C  。  
步驟 4：  若 O   (空集合)，回到步驟 2，否則結束演算法  
為了比較前推式與後推式演算法與演算法 A，B，C，D 的效能。我們重新計算實驗，針
對雙機問題再次比較。考慮的參數有訂單數( k )為 10,13,16以及訂單中工件總處理時間區間( iT )
有(10,50)、(10,100)以及(10,500)等，共 9 個參數組合，每組合進行 100 個測試。方式為以六
種演算法結果中的最小值為基準，即是採計演算結果與最小值相同的個數，所以在同一組資
料中是可能有兩個以上的最小值。重新結果如表 4 所示。實驗結果顯示在雙機的問題中，前
推式演算法與後推式演算法，比先前四種演算法較佳。在 900 個問題中，演算法 D 共有的 110
個問題達到最小值，這 110 個問題在前推式演算法中也是達到最小值。 
 
表 4  前推式與後推式演算法與演算法 A，B，C，D 最小值數目 
k  iT  演算法 A 演算法 B 演算法 C 演算法 D 前推式 後推式 
10 (10,50) 2 2 3 24 62 65 
 (10,100) 0 3 3 17 63 54 
 (10,500) 4 1 4 17 73 46 
13 (10,50) 0 0 3 16 70 48 
 (10,100) 1 1 3 10 58 52 
 (10,500) 0 1 3 10 59 50 
16 (10,50) 0 0 0 5 51 55 
 (10,100) 0 0 0 3 46 54 
 (10,500) 0 0 0 8 54 46 
 合計 7 8 19 110 536 470 
15 
表 6  前推式與後推式演算法求得最佳解個數(每組組合有 100 個測試) 
 k = 10   13   
m  iT  前推式 後推式 綜合式 前推式 後推式 綜合式 
2 (10,50) 44 41 58 29 27 39 
 (10,100) 37 35 56 13 19 24 
 (10,500) 42 26 50 17 19 28 
         
3 (10,50) 35 28 50 13 19 28 
 (10,100) 27 23 44 9 13 19 
 (10,500) 30 26 44 12 10 22 
         
4 (10,50) 19 26 39 13 17 26 
 (10,100) 18 30 39 13 7 18 
 (10,500) 23 34 46 8 8 13 
         
5 (10,50) 18 32 42 6 11 17 
 (10,100) 14 30 40 6 6 12 
 (10,500) 17 26 39 8 12 19 
 
 
表 7  前推式與後推式演算法結果的為最佳解的個數( 16k  ) 
m  iT  前推式 後推式 綜合式 完成計算數 最佳解個數
2 (10,50) 0.94% 1.05% 0.64% 100 2 
 (10,100) 0.99% 0.90% 0.67% 100 17 
 (10,500) 1.15% 1.48% 0.85% 100 6 
3 (10,50) 0.52% 0.36% 0.22% 26 3 
 (10,100) 0.61% 0.59% 0.35% 23 6 
 (10,500) 0.78% 0.64% 0.49% 16 3 
 
 
表 8  分支界限法的計算時間與節點數 
 k = 10  13  
m  iT  秒數 節點數 秒數 節點數 
2 (10,50) 0.100 12095 5.541 607325 
 (10,100) 0.097 12216 5.177 553598 
 (10,500) 0.103 13121 8.425 938919 
3 (10,50) 1.047 114508 285.352 29443466 
 (10,100) 1.248 139241 375.575 37048116 
 (10,500) 1.474 167564 282.813 29115336 
4 (10,50) 7.284 725871 3060.592 285047320 
 (10,100) 6.577 666202 2677.772 252281163 
 (10,500) 4.986 511613 2758.430 261406910 
5 (10,50) 14.211 1279325 9822.344 867078208 
 (10,100) 13.021 1197959 6211.703 544586206 
 (10,500) 12.073 1121355 4970.916 444708282 
17 
七、參考文獻 
[1]. Blocher, J.D. and Chhajed,D. (1996) The customer order lead time problem on parallel 
machines, Naval Research Logistics, 43, 629–654. 
[2]. Blocher, J.D., Chhajed,D. and Leung,M.(1998) Customer order scheduling in a general job 
shop environment, Decision Sciences, 29, 951–981. 
[3]. Coffman, E.G., Garey, M.R., and Johnson, D.S. (1978) An application of bin-packing to 
multiprocessor scheduling, SIAM Journal of Computing, 7, 1-17. 
[4]. Graham, R.L. (1969) Boundaries on multiprocessing timing anomalies, SIAM Journal of 
Applied Mathematics, 17, 416-429. 
[5]. Gupta, JND, Ho, J.C.,  and van der Veen AA. (1997) Single machine hierarchical scheduling 
with customer orders and multiple job classes, Annals of Operations Research, 70, 127–43. 
[6]. Ho, J.C. and Wong, J.S. (1995) Makespan minimization for m parallel identical processors, 
Naval Research Logistics, 42, 935-948. 
[7]. Horowitz, E. and Sahni, S. (1976) Exact and approximate algorithms for scheduling 
Nonidentical processors, Journal of the Association for Computing Machinery, 23, 317-327. 
[8]. Hwang, H.C., Chang, S.Y. and Lee, K. (2004) Parallel machine scheduling under a grade of 
service provision, Computers and Operations Research, 31, 2055-2061. 
[9]. Leung, J.Y.-T., Li, H. and Pinedo, M. (2005a) Order scheduling models: An overview, in: 
Kendall, G., Burke, E.K., Petrovic, S. and Gendreau, M. (Eds.), Multidisciplinary Scheduling: 
Theory and Applications, Springer, pp. 37–53. 
[10]. Leung, J.Y.-T., Li, H. and Pinedo, M. (2005b) Order scheduling in an environment with 
dedicated resources in parallel, Journal of Scheduling, 8, 355–386. 
[11]. Leung, J.Y.-T., Li, H. and Pinedo, M. (2006) Approximation algorithms for minimizing total 
weighted completion time of orders on identical machines in parallel, Naval Research 
Logistics, 53, 243–260. 
[12]. Leung, J.Y.-T., Li, H. and Pinedo, M. (2007a) Scheduling orders for multiple product types to 
minimize total weighted completion time, Discrete Applied Mathematics, 155, 945–970. 
[13]. Leung, J.Y.-T., Li, H., Pinedo, M. and Zhang, J. (2007b) Minimizing total weighted 
completion time when scheduling orders in a flexible environment with uniform machines, 
Information Processing Letters, 103, 119–129. 
[14]. Liao, C.J. and Lin, C.H. (2003) Makespan minimization for two uniform parallel machines, 
International Journal of Production Economics, 84, 205-213. 
[15]. Lin, C.H. and Liao, C.J. (2004) Makespan minimization subject to flowtime optimality on 
identical parallel machines, Computers and Operations Research, 31, 1655-1666. 
[16]. Lin, C.H. and Liao, C.J. (2008a) Makespan minimization for multiple uniform machines, 
Computers and Industrial Engineering, 54, 983-992. 
[17]. Lin, C.H. and Liao, C.J. (2008b) Minimizing makespan on parallel machines with machine 
19 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
 達成目標 
□ 未達成目標（請說明，以 100 字為限） 
□ 實驗失敗 
□ 因故實驗中斷 
□ 其他原因 
說明： 
 
 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：□已發表 ■未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 □無 
技轉：□已技轉 □洽談中 □無 
其他：（以 100 字為限） 
 
 
 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
本研究針對顧客訂單問題在平行機的環境中，探討訂單總流程時間的最小化。
由於顧客訂單問題為相當實務考量生產排程的問題，平行機環境是常見的生
產環境，所以這研究是與生產實務上相關的議題。並且在研究中按照工件與
機器的加工關係，完整討論到完全彈性加工(包含等效與非等效平行機)、混
合加工與完全專門加工等問題，並提出相對應的演算法。本研究就學術成果
與生產實務應用層面具有相當的參考價值。 
 
 
98 年度專題研究計畫研究成果彙整表 
計畫主持人：林建宏 計畫編號：98-2221-E-228-003-MY2 
計畫名稱：顧客訂單排程問題在平行機環境之研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 2 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 1 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
