achieved.  
This project mainly discusses how to 
integrate all the current multimedia messaging 
environment through the “Ubiquitous and 
Unified Multimedia Messaging (UMM) 
Platform,” which provides a global user 
information management mechanism and 
presence tracking, which allows the subscribers 
to access the most suitable message service at 
anytime and anywhere. 
 In this project, we did a thorough research 
on the presence information management for 
instant messaging in the first stage. In the 
second stage, we designed and implemented 
the ubiquitous messaging environment and the 
interactive multimedia messaging. The result of 
this project has been submitted to the SCI 
journal, ACM/Springer Wireless Networks for 
publication. 
 
Keywords: Short Message Service, 
Multimedia Message Service, Instant 
Messaging, Unified Messaging 
 
二、緣由與目的 
 
目前網路上 (包括行動通訊網路以及網
際網路) 的訊息服務協定沒有一定的標準，
造成不同協定的訊息服務 (例如，Microsoft
的 MSN Messenger 與 MMS) 之間無法相互
溝通，這種封閉的訊息模式卻無法提供使用
者真正的“即時性”服務。除此之外，目前行
動通訊網路上的多媒體簡訊也都還停滯在呆
板地顯示圖片、影片的階段，沒有更進階的
服務，導致多媒體訊息無法與使用者的日常
生活更緊密的結合。與此同時，目前各種訊
息服務沒有完整的安全機制，導致訊息內容
監聽、詐騙簡訊等問題層出不窮。 
 因此基於解決上述問題之動機，我們提
出了一個 “智慧型整合式多媒體訊息平
台 ”(Ubiquitous and Unified Multimedia 
Message Platform; UMM)。本平台藉由結合目
前網際網路上以及行動通訊網路上所有可能
的多媒體訊息協定，提供一個完整的使用者
訊息管理機制，對於不同的多媒體訊息平台
資訊進行分析與轉換，讓使用者享有一個最
全面的訊息交換服務，無論使用者的位置在
哪裡、所使用的終端裝置為何，都會有一個
最適合的傳遞機制確保重要資訊的傳送與接
收。在這裡我們強調的是普及性 (ubiquity)：
使用者不必在乎他所選擇的訊息傳送平台，
藉由UID (Unified ID) 以及User Profile，多媒
體訊息可以隨時隨地自動轉換並且以最佳的
方式傳遞到收件者手中，如圖 一所示 
 
 
圖 一  多媒體訊息平台的智慧型整合 
 
我們對目前的各種訊息環境也提出了一
套良好的安全機制，達成每一個終端裝置與
本系統的互相認證以及資料加密。除此之
外，本系統實作了多媒體訊息在串流 
(streaming) 方面的支援，提供更有效率、更
快速的資訊傳遞環境。 
對於多媒體訊息內容，我們也將突破目
前的呈現方式：將“互動式”的觀念帶入了整
個多媒體訊息環境中。跳脫傳統編輯、回覆
訊息的刻板模式，使用者只需要藉由多媒體
訊息本身的互動介面，即可達到快速、無狹
縫式 (seamless) 的訊息傳遞。對於沒有鍵盤
的手機使用者來說，互動式的內容呈現也提
 2
上線 (presence) 資訊、聯絡人清單     
對照等。 
z Media Server (參照圖 二 (2) )：負責多
媒體訊息中可串流化內容  (streamable 
content) 的傳送。為了讓影音檔案等多
媒體訊息，能夠不需全部載入使用者的
終端裝置後，才能開始播放，進而增加
整體網路的使用效率。因此，UMM 
Server在遞送多媒體訊息的過程中，會把
多媒體訊息裡可串流化內容的部分獨立
出來轉存入Media Server的資料庫，並將
原訊息中該可串流化內容改用SDP描述
其規格與撥放需求，提供未來收件者與
Media Server之間RTP session的建立依
據 [14, 15]。如此一來，系統便可允許使
用者以串流方式擷取訊息內容，而不需
下載整個訊息內容。 
z Interactive Server (參照圖 二(3) )：當使
用者使用互動式的多媒體訊息時會帶來
一系列相互關聯的訊息交換，我們稱之
為議程 (session)。這些訊息交換的步驟
是基於議程中每一個狀態 (state) 之間
的轉換得來。Interactive Server主要負責 
(1) 一系列互動式多媒體訊息交談過程
的管理，包括兩封互動式多媒體訊息
的議程對應 (session mapping)，以及
議程狀態的追蹤 (state tracking) 等。 
(2) 對不同終端裝置上訊息的呈現配置
以及互動方式做最佳化，包括配置調
適 (layout adaptation) 以及議程調適 
(session adaptation)。 
z Application Server (參照圖 二(4) )：利
用UMM Server所提供的開放式介面 
(OSI)，服務開發者可以對每一個應用服
務定義其專屬的服務樣板  (service 
template)，讓我們的訊息傳送平台與不
同的進階服務結合。 
z 使用者終端設備 (參照圖 二(8) )：目前
UMM平台所支援的終端設備有：SMS 
UA、MMS UA、MSN UA、Mail UA以
及SIP UA。 
此外，我們的系統提供了兩個開放式的介
面：OI-HN 以及 OI-AP，其主要功能分述如
下： 
 
 
圖 三  系統元件圖 
 
z OI-HN (Open Interface for 
Heterogeneous Networks) (參照圖 三
(9) )：SIP/IM Connector、Email Connector
以及MMS Connector 就是利用此介面
所實作，這個介面讓我們的平台對不同
的網路，不同的訊息環境提供了標準的
連接方式，例如MSN Connector對於通訊
系統業者來說，就是一個標準的MMS 
Center [12, 13]。MSN Connector與GGSN
互連，並使用 3GPP [37] 所定義的MM1
介面與手機溝通。除了現有的Connectors
之外，對於異質網路上各種不同的多媒
體訊息服務，均可以利用此介面所提供
的API與UMM Server內部進行溝通整
合。 
z OI-AP (Open Interface for Application 
Service) (參照 圖  三 (8) )：每一個
Application Server都有自己的 service 
logic，這些服務需要訊息平台提供必要
的輔助資訊，如使用者上線追蹤 
(presence tracking) 作為決策的依據，藉
 4
的任何必要資訊，如事件發出的來源類別、
互動式多媒體訊息內容等資訊，藉由這些資
訊，Connector對於不同目的地的UPEvent有
各自的事件處理程序，以進行相對應的動作。 
 本系統的另一個重要元件為Interactive 
Server (以下簡稱I-Server)，I-Server建置於
J2EE 1.4 的平台之上，其中Model View 
Controller (參照圖 五(1)，以下簡稱MVC) 為
整個互動式訊息平台的管理中心，當一封
UIMM傳送到UPServer時，UPEngine會將訊
息的內容與互動式結構分離，並將互動式結
構交由MVC做調適 (adaptation)。MVC會將
此互動資訊轉換為UPInteractiveStruct類別傳
至Service Logic Descriptor紀錄，此時議程中
的transaction以及狀態 (state) 也會被保留以
供應用服務追蹤。 
 
圖 五  Interactive Server軟體架構 
 
Service Logic Descriptor (參照圖 五 (2) 
以抽象化的型態維持每一個應用服務的
service logic在關聯式資料表中，利用不同的
物件代表議程中的每一個狀態 (state)，其中
又有一個狀態指標指向使用者在transaction
中目前的狀態 (current state)。利用該狀態指
標，上層的UPTemplate Selector (參照圖 五 
(3) )、UPEntity Subscriber (參照圖 五 (4) )、
I-Sender以及I-Receiver (參照圖 五 (5) ) 會
根據目前狀態指標所指的內容呼叫
Policy-based Template Manager (參照圖 五 
(6) ) 動態地產生不同的議程樣板以及配置
樣板；而Application Server以及Interactive也
可以利用Service Logic Descriptor進行狀態的
追蹤以呼叫Service Adaptor (參照圖 五 (7) ) 
做必要的資訊處理。 
JSP TLD Composer (參照圖 五 (8) ) 是
系統提供給Application Server介面：OI-AP的
主要元件。利用OI-AP介面所提供的TLD (JSP 
Tag Library Document)，服務開發者可以對系
統平台上的應用服務定義專屬的服務樣板 
(Service Template)，並且描述該服務的service 
logic。JSP TLD Composer所提供的方法如
setUPPolicy() ，此方法可將服務樣板以及
service logic分別存入Policy-based Template 
Manager與Service Logic Descriptor中。 
此外OI-AP也包含了Application Service 
Connector (參照圖 五 (9) ) 讓每一個應用服
務對I-Server作統一的存取。 
 
三-2  多媒體訊息設計與實作 
 
 在介紹完 UMM 平台系統架構中的介面
與節點之後，接下來我們將說明在 UMM 平
台中的多媒體訊息設計與實作。 
由於現存訊息系統的限制，並不存在一
個共同的控制訊號網路，這是一個我們在試
圖整點現存訊息系統時遇到的困難。於是我
們設計一套多媒體互動訊息協定，透過這個
協定達成互動式多媒體訊息之傳遞、用戶端
裝置之狀態改變及連絡人名單管理等。 
如圖 六所示，多媒體互動訊息協定(MIP, 
Multimedia Interactive Protocol)的主要格式類
似HTTP分為兩部份：表頭和本體，用空白行
隔開。表頭的部份主要用來傳遞控制訊號或
全域參數等，而本體的部份主要用來傳遞資
訊參數，資訊參數部份主要以傳遞資訊為
主，有別於標頭的參數著重於控制訊號。以
上的標頭和本體合稱MIP Prefix。有些情況
下，MIP Prefix後會接著MIP Attachment，其
主要功能是用來傳遞文件內容，同樣是以一
 6
Step2-1: SD Æ CD 
 8
 如果上線被成功的處理完畢，則傳回應
用服務列表(aplist)和其他的帳號資訊。有關
aplist的格式請參見 2.1的 Step6-1。XHTML
頁面用來顯示上線成功的訊息給使用者(透
過 Client Browser)。 
Step2-2: SD Æ CD  
 如果上線失敗，則傳回錯誤訊息和
XHTML錯誤頁面。 
z Presence: Logout 
處理使用者離線的流程。和上線的流程
類似，唯訊息格式稍有不同。詳細的流程和
訊息格式如下： 
 
Step1-1: CD Æ SD 
 發出離線的請求。關於 Account欄位、
Passwd欄位和 CID欄位的說明請參見 2.2. 
Presence: Login。 
Step1-2: CD Æ SD 
 另一種發出請求的訊息格式。用 UID取
代 Step1-1的 Account。 
Step2-1: SD Æ CD 
 如果離線被處理成功，比照上線的流
程，傳回帳號資訊及應用服務列表等。 
Step2-2: SD Æ CD 
 如果離線失敗，傳回錯誤訊息及XHTML
錯誤頁面。 
z Contact List Negotiation 
用來交換用戶端和 Server端的連絡人資
訊。透過這個流程，用戶端程式可以取得、
更新、加入、更名連絡人列表。首先，用戶
端發出請求，並在訊息中指明要採取的動
作，例如：Ctlist-Option: get表示用戶端程式
欲取得連絡人列表，接著 Server端回傳處理
結果及連絡人列表。詳細流程及訊息格式如
下： 
 
Step1-1: CD Æ SD 
 用戶端程式發出變更或取得連絡人的請
求。用 Ctlist-Option 指定所要採取的動作：
get 表示不對連絡人列表做任何變動，僅從
Server 端取得連絡人列表；update 表示用戶
端程式將把用戶端裝置上的連絡人資料全部
上傳(將用戶端裝置的連絡人列表填在訊息
本體部份)，Server將用以取代舊有的連絡人
列表；add 表示要加入數位連絡人，欲加入
的連絡人資料填在訊息本體部份；rename表
示將針對若干位連絡人資料進行修改，修改
後的資料填在訊息本體部份。 
 連絡人資訊(ctlist)的欄位有：cid表示用
戶端裝置；display表示連絡人暱稱；account
表示連絡人帳號，例如在MMS Client上為手
機電話號碼；presence表示連絡人狀態，1為
上線，0為離線；is-umm-user表示此連絡人
是否為本系統的註冊用戶，1為「是本系統
用戶」，0為「非本系統用戶」，-1為「未
知」。其中 display和 presence可為空白。 
Step1-2: CD Æ SD 
 發出連絡人資訊取得或修改請求的另一
種訊息格式。和 Step1-1的不同點在於用 UID
取代 Account。 
Step2-1: SD Æ CD 
 若連絡人資訊被處理成功，則傳回目前
Server上的連絡人列表。連絡人資訊(ctlist)
的格式請參見 Step1-1。 
Step2-2: SD Æ CD 
 若連絡人資訊處理失敗，Server傳回錯
誤訊息。 
z I-Send 
處理發送一則互動式訊息的流程。先由
客戶端程式發出發送訊息的請求，接著
Server傳回樣版選擇的頁面。使用者選擇完
UPMessage物件的位址和埠號。 
 10
Step5: 
 Server Daemon建立連線至 Policy Unit。 
Step6: 
 Policy Unit將處理過後的信件轉達至
Server Daemon。 
z I-Receive 
處理接收互動式訊息的流程。首先，
Server會將訊息的多媒體內容經由負載網路
傳送至用戶，接著用戶端向 Server發出取回
訊息的請求，並由 Server傳回訊息的版面樣
式。最後，由用戶端程式結合接收的多媒體
內容和版面樣式組合成一封完整的信件並呈
現給使用者。 
 
Step1: Connector Æ CD 
客戶端經由負載網路收到多媒體內容，
例如MMS。此多媒體內容的Message-Type
標頭參數需為MESSAGE_TYPE_XHTML。 
Step2-1: CD Æ SD 
用戶端向 Server發出取回信件的請求。
此時的MID、APID可由Step1中的訊息得知。 
Step2-2: CD Æ SD 
另一種發出請求的方法，用 Account取
代 UID。 
Step3-1: SD Æ CD 
若請求被處理成功，則 Server傳回多媒體物
件的 ID(tagid)以及信件的版面架構(xhtml)。 
Step3-2: SD Æ CD 
若請求被處理失敗，則 Server傳回錯誤
訊息及錯誤頁面。 
Step4: CD Æ CB 
將多媒體內容與取回的版面架構組合成
完整的一封信件，並經由 Client Browser呈現
給使用者。 
Step5: CB Æ SD 
使用者在閱讀信件時，可選擇「回覆」
或「取消」。 
若選擇回覆則啟動 I-Reply的流程，且需
用 HTTP Get將下列資訊傳至 Server： 
z Reply-Indication 
Policy Unit通知 Server Daemon「使用者按
下 Reply鍵」的流程。 
Policy Unit
1
Server Daemon
Msg_Reply_IND
 
Step1: PU Æ SD 
Policy Unit通知 Server Daemon處理使
用者按下 Reply的事件。 
z I-Reply 
用來處理使用者回覆互動式信件的流
程。首先 Server利用負載網路傳遞一個 Push
訊息給用戶端程式，接著用戶端程式發出互
動式回覆的請求，然後使用跟 I-Send一樣的
流程送出互動式信件。 
Client 
Daemon
Server 
Daemon
Client 
Browser
1
2
Connector
Msg_Reply_REQ
3 T_Select_ST
Push Message
4
9 T_Select_RES
HTTP Get5
6 T_Select_LT
7
HTTP Get8
10 Send Media Content
 
Step1: ConnectorÆCD 
 Server利用負載網路送一封小信件至用
戶端程式，觸發用戶端程式發出請求。此時
Message-Type表頭參數內容為
message_push_interactive_reply。 
(Note: For more detailed information, 
please refer to API documentation:  
