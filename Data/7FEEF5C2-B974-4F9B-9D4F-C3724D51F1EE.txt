2 
 
 
              
 
	
,         
    ! " # $ %&' ( ) * + , -  . / 0
$ 	1 2 3 4 5 
) " # $ %6 7 8 9 / 0 $ :
; < = ; > ? @ ) 	A B 3  C < 3 D > ? E &  :; < = ; 
> ? F   G H I J K 	 NP-completeG H % L M N O 
P Q J K R S  T U V @ W X Y Z [ \   G H  :; < = ;
> ? %] ^ _ L A 1 2 ` a R S b c d e f . Z % 
 
  	  	  	  	 g  3 h i   j k 3 h i   G H 3 h i 
$ 3 h i 8 9 R S M d 3 h i % 
 
l
   
   
   
     
 
A protein is regarded as a linear chain of amino acid, and under specific 
conditions it folds into a unique native three-dimensional structure. The so called 
Thermodynamical Hypothesis states that the native structure of a protein is the one for 
which the free energy achieves the global minimum. The hydrophobic-hydrophilic 
model [1] for predicting the native structure of a protein is perhaps one of the most 
successful and best-studied models. From [2], the protein folding problem in the 
hydrophobic-hydrophilic model is shown to be an NP-complete problem. This paper 
is the first one in which we demonstrate that biological operations can be used to 
solve the protein folding problem in the hydrophobic-hydrophilic model. In order to 
achieve the goal, intelligent DNA algorithms are proposed. 
 
Keywords: Protein Folding Problem, Folding Pathways, Lattice Models, DNA-based 
Supercomputing, Bio-molecular Supercomputing. 
 
              
 
A. Intelligent DNA Algorithms for Finding Conformation of a Protein with 
Global Minimum Energy in the Hydrophobic-hydrophilic Model in a 
Two-dimensional Lattice 
 
Algorithm 1: Finding conformation of a protein with the amino acid sequence a = 
a1 … aL and global minimum energy in the hydrophobic-hydrophilic 
4 
 
(3b) ParallelAdder(T3, k, b). 
(3c) ParallelAssign(T3, k, d). 
(3d) Append-head(T3, wk, 10 ) and Append-head(T3, wk, 20 ). 
(3e) Amplify(T4, T5, T6). 
(3f) ParallelAdder(T5, k, d). 
(3g) ParallelAssign(T5, k, b). 
(3h) Append-head(T5, wk, 10) and Append-head(T5, wk, 21). 
(3i) Amplify(T6, T7, T8). 
(3j) ParallelSubtractor(T7, k, b). 
(3k) ParallelAssign(T7, k, d). 
(3l) Append-head(T7, wk, 11) and Append-head(T7, wk, 20). 
(3m) ParallelSubtractor(T8, k, d). 
(3n) ParallelAssign(T8, k, b). 
(3o) Append-head(T8, wk, 11) and Append-head(T8, wk, 21). 
(3p) T1 = ∪(T3, T5, T7, T8).  
EndFor 
(4) Append-head(T1, s2). 
EndProcedure 
 
Lemma 2: DNA strands for representing the origin of the coordinates in a 
two-dimensional lattice, (0, 0), and the first moving from the first lattice site to the 
second lattice site in the two-dimensional lattice can be constructed from the 
algorithm, InitialOrigin(T1). 
 
D. The Construction for Conformational Space to a Protein in the 
Hydrophobic-hydrophilic Model in a Two-dimensional Lattice 
 
Procedure ConstructConformationalSpace(T1). 
(1) For k = 3 to L 
(1a) Amplify(T1, T3, T4). 
(1a1)T3bad = +(T3, w(k – 1), 21) and T3off = −(T3, w(k – 1), 21). 
(1a2) T3bad = +(T3bad, w(k – 1), 10) and T3on = −(T3bad,w(k – 1), 10). 
(1a3) Discard(T3bad) and T3 = ∪(T3off , T3on). 
(1b) ParallelAdder(T3, k, b). 
(1c) ParallelAssign(T3, k, d). 
(1d) Amplify(T4, T5, T6). 
(1d1) T5bad = +(T5, w(k – 1), 21) and T5off = −(T5, w(k – 1), 21). 
(1d2) T5bad = +(T5bad, w(k – 1), 11) and T5on = −(T5bad, w(k – 1), 11). 
6 
 
  EndIf 
(1f) T9 = ∪(T10, T11). 
EndFor 
EndProcedure   
 
Lemma 4: DNA strands for preserving those coordinate values for moving of four 
different directions to a protein with the amino acid sequence a = a1 … aL in the 
hydrophobic-hydrophilic model in a two-dimensional lattice can be constructed from 
the algorithm, ParallelAssign(T9, k,Ω). 
 
F. The Construction of Parallel Adders of n Bits 
 
Procedure ParallelAdder(T12, k,) 
(1) T13 = +(T12, (k − 1), n0) and T14 = −(T12, (k − 1), n0). 
(2) If (Detect(T13) = = “yes”) then 
 (2a) ParallelIncreasement(T13, k, ). 
 (2b) Append-head(T13, k, n0). 
EndIf 
(3) If (Detect(T14) = = “yes”) then 
 (3a) ParallelComparator(T14, T14>, T14=, T14<, k, ). 
(3b) If (Detect(T14>) = = “yes”) then 
 (3c) ParallelDecreasement(T14>, k, ). 
  (3d) Append-head(T14>,k, n1). 
EndIf 
(3e) If (Detect(T14=) = = “yes”) then 
   (3f) ParallelSetZero(T14=, k, ) 
EndIf 
(3g) If (Detect(T14<) = = “yes”) then 
 (3h) ParallelSetOne(T14<, k, ). 
  (3i) Append-head(T14<,k, n0). 
EndIf 
EndIf 
  (3j) T12 = ∪(T13, T14>, T14=, T14<). 
EndProcedure 
 
Lemma 5: The algorithm, ParallelAdder(T12, k,), is used to perform parallel 
arithmetic addition for changing those coordinate values for moving of four different 
directions to a protein with the amino acid sequence a = a1 … aL in the 
8 
 
(3) For q = 2 to n − 1 
 (3a) T21 = +(T19, (k − 1), q1) and T22= −(T19, (k − 1), q1). 
(3b) Append-head(T21, k, q0) and Append-head(T22, k, q1). 
(3c) T23= +(T20, (k − 1), q1) and T24= −(T20, (k − 1), q1). 
(3d) Append-head(T23, k, q1) and Append-head(T24, k, q0). 
(3e) T19 = ∪(T19, T21). 
(3f) T20 = ∪(T22, T23, T24). 
    EndFor 
 (4) T18 = ∪(T19, T20). 
EndProcedure 
 
Lemma 7: The algorithm, ParallelIncreasement(T18, k, ), is used to perform 
parallel increased operations to change those coordinate values for moving of four 
different directions to a protein with the amino acid sequence a = a1 … aL in the 
hydrophobic-hydrophilic model in a two-dimensional lattice. 
 
I. The Construction of Parallel Comparators 
 
Procedure ParallelComparator(T25, T25>, T25=, T25<, k , ) 
(1) For q = n − 1 down to 2 
(1a) T25> = +(T25, (k − 1), q1) and T25= = −(T25, (k − 1), q1). 
(1b)If (Detect(T25=) = = “yes”) then 
 (1c) T25 = ∪(T25, T25=). 
 Else 
  (1d) Terminate the algorithm. 
End If 
EndFor 
(2) T25= = +(T25, (k − 1), 11) and T25< = −(T25, (k − 1), 11). 
EndProcedure.
 
Lemma 8: The algorithm, ParallelComparator(T25, T25>, T25=, T25<, k , ), is used 
to perform parallel comparators. 
 
J. The Construction of Parallel Decreased Operators 
 
Procedure ParallelDeceasement(T26, k, ) 
(1) T27 = +(T26, (k − 1), 11) and T28 = −(T26, (k − 1), 11). 
 (2) Append-head(T27, k, 10) and Append-head(T28, k, 11). 
10 
 
409-422, 1998. 
[3] L. M. Adleman. “Molecular Computation of Solutions to Combinatorial 
Problems”. Science, Volume 266, Number 11, pp. 1021-1024, 1994. 
[4] R. J. Lipton. “DNA Solution of Hard Computational Problems”. Science, 268, pp. 
542-545, 1995. 
[5] R. R. Sinden. DNA Structure and Function. Academic Press, 1994. 
[] A. Nayak, A. Sinclair and U. Zwick. “Spatial codes and the hardness of string 
folding problems”. Symposium on Discrete Algorithms archive Proceedings of the 
ninth annual ACM-SIAM symposium on Discrete algorithms table of contents, San 
Francisco, California, United States, pp. 639 - 648, 1998. 
[7 Pavel A. Pevzner. Computational Molecular Biology: An Algorithmic Approach. 
The MIT Press, 2000, ISBN 0-262-16197-4. 
  
 
A. THE DEFINITION OF THE SATISFIABILITY 
PROBLEM 
A clause is a formula that is of the form un ∨ un − 1 … ∨ 
u2 ∨ u1, where each uk for 1 ≤ k ≤ n is a Boolean variable or 
its negation. Definition 4−1 from [6] is introduced to 
denote the satisfiability problem. 
Definition 4−1: In general, a satisfiability problem 
includes a Boolean formula of the form C1 ∧ C2 … ∧ Cm 
where each Cj for 1 ≤ j ≤ m is a clause. Then, the question is 
to find values of the variables so that the whole formula has 
the value 1. This is equal to finding values to the variables 
that make each clause have the value 1. 
 
5. All of the possible solutions to the 
satisfiability problem 
 
Assume that U is a set of 2n possible choices and equal 
to {un un − 1 … u2 u1| ∀ uk ∈ {0, 1} for 1 ≤ k ≤ n}, which 
implies that the length of each element in U is n bits and 
each element represents one of 2n combinational states for n 
Boolean variables. For the sake of presentation, we suppose 
that uk0 is used to denote the value of uk to be zero and uk1 
means value of uk to be one. The following definition will 
show how each element in U is represented to be a unique 
computational state vector with 2n-tuples of binary 
numbers. 
Definition 4−2: The jth element in U can be represented as 
a unique computational state vector =1u   [ ]  , 
n2  12,12,11,1
T
nuuu
×
L  where ju  ,1  = 1, 1 ,ju  = 
1, ∀ hu  ,1  = 0 and ∀ 1 ,hu  = 0 for 1 ≤ h ≠ j ≤ 2n. 
The corresponding computational state vector for the 
first element, un0 un−10 … u20 u10, in U is 
[ ] , 00 1 n2  1 T×L  and the corresponding 
computational state vector for the last element, un1 un − 11 … 
u2
1
 u1
1
, in U is [ ] . 10 0 n2  1 T×L  For the sake of 
presentation, we assume that B is a set of the corresponding 
computational state vectors to the elements in U and B = 
{ [ ]  00 1 n2  1 T×L  … [ ] Tn2  110 0 ×L }. 
Because each component in B is a coordinated vector, we 
span B = 
n
C 2 [14], where 
n
C 2  is a Hilbert space. This 
implies that each vector in the set B is an orthonormal basis 
in a Hilbert space. 
 
6. Computational space of molecules for the 
satisfiability problem 
 
The following bio-molecular operations cited from [1] 
will be used to construct computational space of molecules 
for solving the satisfiability problem with m clauses and n 
Boolean variables. 
Definition 4−3: Given a set U = {un un − 1 … u2 u1| ∀ uk ∈ {0, 
1} for 1 ≤ k ≤ n}and a Boolean variable uj, the 
bio-molecular operation, “Append-Head”, appends uj onto 
the head of every element in the set U. The formal 
representation is written as Append-Head(U, uj) = {uj un un 
− 1 … u2 u1| ∀ uk ∈ {0, 1} for 1 ≤ k ≤ n and uj ∈ {0, 1}}. 
Definition 4−4: Given a set U = {un un − 1 … u2 u1| ∀ uk ∈ {0, 
1} for 1 ≤ k ≤ n}and a Boolean variable uj, the 
bio-molecular operation, “Append-Tail”, appends uj onto 
the end of every element in the set U. The formal 
representation is written as Append-Tail(U, uj) = {un un − 1 
… u2 u1 uj| ∀ uk ∈ {0, 1} for 1 ≤ k ≤ n and uj ∈ {0, 1}}. 
Definition 4−5: Given a set U = {un un − 1 … u2 u1| ∀ uk ∈ {0, 
1} for 1 ≤ k ≤ n}, the bio-molecular operation, 
“Discard(U)” sets U to be an empty set.  
Definition 4−6: Given a set U = {un un − 1 … u2 u1| ∀ uk ∈ {0, 
1} for 1 ≤ k ≤ n}, the bio-molecular operation “Amplify(U, 
{Ui})” creates a number of identical copies, Ui, of the set U, 
and then discard(U). 
Definition 4−7: Given a set U = {un un − 1 … u2 u1| ∀ uk ∈ {0, 
1} for 1 ≤ k ≤ n} and a Boolean variable, uj, if the value of uj 
is equal to one, then the bio-molecular extract operation 
creates two new sets, +(U, uj1) = {un un − 1 … uj1 … u2 u1| ∀ 
uk ∈ {0, 1} for 1 ≤ k ≠ j ≤ n}and −(U, uj1) = {un un − 1 … uj0 
… u2 u1| ∀ uk ∈ {0, 1} for 1 ≤ k ≠ j ≤ n}. Otherwise, it 
produces another two new sets, +(U, uj0) = {un un − 1 … uj0 
… u2 u1| ∀ uk ∈ {0, 1} for 1 ≤ k ≠ j ≤ n}and −(U, uj0) = {un 
un − 1 … uj1 … u2 u1| ∀ uk ∈ {0, 1} for 1 ≤ k ≠ j ≤ n}. 
Definition 4−8: Given m sets U1 … Um, the bio-molecular 
merge operation, ∪(U1, …, Um) = U1 ∪ … ∪ Um. 
Definition 4−9: Given a set U = {un un − 1 … u2 u1| ∀ uk ∈ {0, 
1} for 1 ≤ k ≤ n}, the bio-molecular operation “Detect(U)” 
returns true if U ≠ ∅. Otherwise, it returns  false. 
Definition 4−10: Given a set U = {un un − 1 … u2 u1| ∀ uk ∈ 
{0, 1} for 1 ≤ k ≤ n}, the bio-molecular operation 
“Read(U)” performs an arbitrary element in U. Even if U 
contains many different elements, the bio-molecular 
operation can give an explicit description of exactly one of 
them. 
For solving the satisfiability problem with m clauses and 
n Boolean variables, the following bio-molecular algorithm 
can be used to create all of the 2n possible choices. A set U 
is an empty set and is regarded as the input set of the 
DNA-based algorithm. The second parameter n in 
CombinationalStates(U, n) is to represent the number of 
Boolean variables. 
Procedure CombinationalStates(U, n) 
(0a) Append-Tail(U1, un1). 
(0b) Append-Tail(U2, un0). 
(0c) U = ∪(U1, U2). 
(1) For k = n − 1 downto 1 
(1a) Amplify(U, U1, U2). 
(1b) Append-Tail(U1, uk 1). 
(1c) Append-Tail(U2, uk 0). 
(1d) U = ∪(U1, U2). 
End For 
End Procedure 
Lemma 4−1: For solving the satisfiability problem with m 
clauses and n Boolean variables, 2n possible choices created 
from the DNA-based algorithm, CombinationalStates(U, 
n), form an orthonormal basis of a Hilbert space (i.e., a 
complex vector space, ).2nC  
  
 
the current clause through the relation cj ← cj ⊕ 
) ( 1 nj rc •−  for 1 ≤ j ≤ m.  
• Subsequently we reverse all those OR operations in 
order to restore every quantum bit of each quantum 
register to its initial state. This enables us to reuse the 
same quantum registers, should the problem, for 
example, require repeated OR operation.  
Subsequently, we reverse all those operations (NOT or 
CNOT) on the second quantum register to restore every 
quantum bit of the second quantum register to its initial 
state. This enables us to use the second quantum register 
repeatedly.  
 
 
 
 
11. Quantum algorithms of Lipton’s 
DNA-based algorithms for solving the 
satisfiability program 
 
Based on Algorithm 4−1 in Subsection E, the following 
quantum algorithm is proposed to work on the physical 
quantum computer proposed by Deutsch [2]. For 
convenience of our following presentation, we suppose that 
cj
1
 denotes the value of cj to be 1 and cj0 defines the value of 
cj to be 0 for 1 ≤ j ≤ m. We also assume that rk1 denotes the 
value of rk to be 1 and rk0 defines the value of rk to be 0 for 0 
≤ k ≤ n. Similarly, yk1 denotes the value of yk to be 1 and yk0 
defines the value of yk to be 0. Moreover, the notations used 
in Algorithm 4−2 below have been denoted in previous 
subsections. 
Algorithm 4−2: Quantum algorithms of Lipton’s 
DNA-based algorithm for solving the satisfiability problem 
with m clauses and n Boolean variables. 
(1) For an input Φ  = )( 01 sms c=⊗ ⊗ )( 10c ⊗  
)( 11 qnq r=⊗ ⊗ )( 00r ⊗ )( 01 qnq y=⊗ ⊗
),( 01 qnq u=⊗  2n possible choices of n bits (including all 
possible choices) are 0 ,1ϕ  = )( 221 ×=⊗ Ims ⊗ (I2×2) 
⊗ )( 221 ×=⊗ Inq ⊗ (I2×2) ⊗ )( 221 ×=⊗ Inq ⊗ H⊗n Φ  = 
n2
1 )( 01 sms c=⊗ ⊗ )( 10c ⊗ )( 11 qnq r=⊗ ⊗
)( 00r ⊗ )( 01 qnq y=⊗ ⊗ )).(( 101 qqnq uu +⊗ =  
(2) For j = 1 to m do begin 
(3)   For i = 1 to |Cj| do begin 
(4)     If the ith element in the jth clause is one of n Boolean 
variables uk, Then 
(5)   ij  ,ϕ  = )( 221 ×=⊗ Ims ⊗ (I2×2) 
⊗ )( 221 ×=⊗ Inq ⊗ (I2×2) 
⊗ )( 221 ×+=⊗ Ik np ⊗ ))(( 100 kkk uuy +⊕ ⊗
)( 221 1 ×−=⊗ Ikp ⊗ )( 221 ×=⊗ Inq 1 , −ijϕ =
n2
1
)( 0sj ms c=⊗ ⊗ )( 1 1 sjs c−=⊗ ⊗ )( 10c ⊗
)( 11 qnq r=⊗ ⊗ )( 00r ⊗ )( 01 pk np y+=⊗ ⊗  
)( 10 kk yy + ⊗ )( 01 1 pkp y−=⊗  ⊗  
)),(( 101 qqnq uu +⊗ =  where 
.11for  )( 1 ≥≥−•⊕= − sjrccc nsss  
(6)     Else 
(7)    ij  ,ϕ  = )( 221 ×=⊗ Ims ⊗ (I2×2) ⊗ )( 221 ×=⊗ Inq  ⊗  
(I2×2) 
⊗ )( 221 ×+=⊗ Ik np ⊗ ))()01
10(( 100
22
kkk uuy +⊕


×
⊗ )( 221 1 ×−=⊗ Ikp ⊗ )( 221 ×=⊗ Inq 1 , −ijϕ =
n2
1
)( 0sj ms c=⊗ ⊗ )( 1 1 sjs c−=⊗ ⊗ )( 10c ⊗
)( 11 qnq r=⊗ ⊗ )( 00r ⊗ )( 01 pk np y+=⊗ ⊗  
)( 01 kk yy + ⊗ )( 01 1 pkp y−=⊗  
⊗ )),(( 101 qqnq uu +⊗ =  where 
.11for  )( 1 ≥≥−•⊕= − sjrccc nsss  
(8)     End If 
(9)   End For 
(10) 1- ,1+jϕ  = QEC 
⊗ )( 221 ×=⊗ Inq ⊗ )( 221 ×=⊗ Inq jCj ,ϕ  = 
n2
1 )( 01 sj ms c+=⊗ ⊗  ( )( 1 njj rcc •⊕ − ) ⊗  
A
N
D
 
0  
Figure 4−2: AND operation of two Boolean variables. 
Figure 4−1: OR operation of two Boolean variables. 
O
R
 
1  
  
 
 
13. Complexity assessment  
 
From [6] and Algorithm 4−1, we know that the 
satisfiability problem with m clauses and n Boolean 
variables is solvable by O(m × n) biological operations, 
where the number of DNA sequences in computational 
space is O(2n), the longest DNA sequence in computational 
space is O(n), and the number of tubes is O(1). The 
following lemmas could be used to show the time 
complexity and space complexity of Algorithm 4−2 for 
solving the satisfiability problem with m clauses and n 
Boolean variables. 
Lemma 6−1: Time complexity of solving the satisfiability 
problem with m clauses and n Boolean variables is O(n) 
Hadamard gates, O(6 × m × n) NOT gates, O(2 × m × n) 
CNOT gates, O(m × n + m) CCNOT gates, and O(1) 
projective operators. 
Lemma 6−2: Space complexity of solving the satisfiability 
problem with m clauses and n Boolean variables is O(m + 3 
× n + 2) quantum bits. 
 
14. Application of cook’s theorem   
 
The classes P (the abbreviation of deterministic 
Polynomial) and NP (the abbreviation of 
Non-deterministic Polynomial) of problems are solvable in 
polynominal time by deterministic and nondeterministic 
Turing machines, respectively, and by the technique of 
polynomial-time reduction [15]. The following definition 
is applied to the definition of the class NP-complete of 
problems. 
Definition 7−1: A problem L is called NP-complete if (a) L 
∈  NP; and (b) for every problem L1 ∈  NP, there is a 
polynomial-time reduction from L1 to L. 
Cook’ s Theorem cited from [15] is that if one algorithm 
of solving a NP-complete problem is developed, then other 
problems will be solved by means of reduction to that 
problem. The following theorem is used to describe 
application of Cook’ s Theorem for the classes P and NP on 
a quantum computer and a molecular computer 
Theorem 7−1: Assume that L is the satisfiability problem 
that is NP-complete. Then P = NP if and only if L∈P. 
 
15. An example of three-qubit solution for the 
satisfiability problem  
 
Consider the formula: F = (u1), the simplest case of the 
satisfiability problem. It contains one clause, “ (u1)” , and 
one Boolean variable u1. The following algorithm, 
Algorithm 8−1, is the reduced version of Algorithm 4−2 
in Subsection H and is employed to find the answer of the 
satisfiability problem of the clause, F = (u1). 
Algorithm 8−1: Solving the satisfiability problem of the 
clause, F = (u1). 
(1) For an input Φ  = 01c  ⊗  01y  ⊗ ,01u  two 
choices are 0 ,1ϕ  = (I2×2) ⊗  (I2×2) ⊗ (H) Φ  = 
2
1 ( 01c ) ⊗  ( 01y ) ⊗ ).( 1101 uu +  
(2) 1 ,1ϕ  = (I2×2) 
⊗ ))(( 110101 uuy +⊕ ⊗ (I2×2) 0 ,1ϕ  = 
2
1 ( 01c ) 
⊗ )( 1101 yy + ⊗  ).( 1101 uu +  
(3) 1- ,2ϕ  = ))(( 110101 yyc +⊕ ⊗  (I2×2) ⊗  (I2×2) 
1 ,1ϕ  = 
2
1 ))(( 1101 cc + ⊗ )( 1101 yy + ⊗  
).( 1101 uu +  
(4) 0 ,2ϕ  = (I2×2) ⊗ ))()(( 11110101 uyuy ⊕+⊕ ⊗  
(I2×2) 1- ,2ϕ  = 
2
1 ))(( 1101 cc + ⊗  )( 01y  ⊗  
).( 1101 uu +   
(5) We obtain the final result, ,1,2ϕ  after a measurement 
of .0,2ϕ  
End Algorithm 
So, from Step (1) of Algorithm 8−1, for an input Φ  = 
0
1c  ⊗ 
0
1y  ⊗ ,
0
1u  2
1
 possible choices are 0 ,1ϕ  
= 
2
1
 ( 01c  
0
1y  
0
1u  + 
0
1c   
0
1y  
1
1u ). 
Then, in the first clause, the first Boolean variable is u1. 
Therefore, after the Step (2) of Algorithm 8−1 is 
performed, we have 1 ,1ϕ  = 2
1
 ( 01c  
0
1y  
0
1u  
+ 
0
1c  
1
1y  
1
1u ). Because only a clause and a 
Boolean variable are involved in the example, we could use 
CNOT gate to replace QEC in Figure 4−3 in Appendix A 
to evaluate whether the only clause with the only Boolean 
variable is true or not. Hence, the implementation of Step (3) 
and Step (4) in Algorithm 8−1 yields 1- ,2ϕ  = 2
1
 
( 01c  
0
1y  
0
1u  + 
1
1c  
1
1y  
1
1u ) and 0 ,2ϕ  
= 
2
1
 ( 01c  
0
1y  
0
1u  + 
1
1c  
0
1y  
1
1u ).  
Step (5) of Algorithm 8−1 is for a measurement on 
0 ,2ϕ  to find 
1
1c , i.e., the answer to the satisfiability 
problem for the formula: F = (u1). The measurement yields 
1 ,2ϕ  = 
1
1c  
0
1y  
1
1u , and the corresponding 
quantum circuit of the example above is shown in Figure 
8-1. 
  
 
respectively, on the second and first qubits to get the state 
(|000>+|011>)/2. Then the first qubit can be read out by a 
single pi/2 pulse along the x axis, as shown in Figure 8-2 (a). 
Similar steps applied to the third qubit result in the 
spectrum in Figure 8-2 (c). It is evident that the 
experimental results are in good agreement with our 
theoretical prediction, 
Therefore, due to the fact that NMR quantum operations 
are not made on individual nuclear spins, but on spin 
ensemble, there is a difference in  the operation between 
Figure 8-1 and our experiment.  Some remarks must be 
addressed. First of all, the three-qubit NMR experiment we 
have carried out suffices to make a comprehensive test for 
our theory, because we have achieved the key aspects of our 
theory. Although the simple case with three qubits did not 
reflect the efficiency of quantum computation for SAT 
problem, we argue that, with more variables and clauses 
involved, the quantum computing efficiency would be more 
and more evident, which could also be found in our later 
discussion about the computational complexity. Secondly, 
DNA computation does not involve entanglement, whereas 
entanglement does appear in our quantum treatment. The 
necessity of additional operations to disentangle the output 
qubits is not the intrinsic characteristic of our quantum 
mechanical treatment, but due to the unique feature of 
NMR technique. Anyway, those additional operations have 
not changed the essence of our implementation.  
  
 
ppm
50100150
0.0
5.0
10.0
15.0
20.0
  
Figure 8-2 (b):  The experimental spectra of the three-qubit 
solution for satisfiability problem after the readout on the 
second qubit. 
  
 
ppm
50100150
0.0
5.0
 
Figure 8-2 (a):  The experimental spectra of the three-qubit 
solution for satisfiability problem after the readout on the 
first qubit. 
 
 
ppm 50100150
-3.0
-2.0
-1.0
0.0
1.0
2.0
3.0
4.0
5.0
6.0
 
Figure 8-2 (c):  The experimental spectra of the three-qubit 
solution for satisfiability problem after the readout on the 
third qubit. 
 
16. Conclusions 
 
We have tried in this work to set up a bridge between the 
physical quantum computer proposed by Deutsch and the 
biological molecular computer proposed by Adleman. We 
have shown in Theorem 5−1 that the biological molecular 
computer proposed by Adleman is a subset of the physical 
quantum computer proposed by Deutsch and can thereby be 
implemented on the quantum computer. Moreover, we 
have also proven in Theorem 5−2 that for those famous 
NP-complete problems solvable on a bio-molecular 
computer, their corresponding DNA-based algorithms can 
be all implemented on a quantum machine. Based on this 
new computing paradigm, we have also demonstrated in 
Theorem 7−1 that P = NP. By using the mature technique 
of NMR, we have carried out a solution for the simplest 
satisfiability problem. The experimental results are in well 
agreement with the theoretical prediction. Although the 
current technology is only available for the simplest case of 
the satisfiability problem, we believe, with more advanced 
NMR technique and more experimental efforts, more 
complicated satisfiability solutions could be demonstrated 
by NMR experiments. We also expect that our algorithm 
could be carried out by a real quantum machine in the 
future. 
 
17. References  
 
[1] L. M. Adleman. “ Molecular Computation of Solutions to 
Combinatorial Problems” . Science, 266: 1021-1024, Nov. 11, 
1994. 
[2] D. Deutsch. “ Quantum Theory, the Church-Turing Principle 
and the Universal Quantum Computer” . Proceeding of Royal 
Society of London series A, 400, pp.97-117, 1985. 
[3] M. Guo, W.-L. Chang, M. Ho, J. Lu and J. Cao. “ Is Optimal 
Solution of Every NP-Complete or NP-Hard Problem 
Determined from its Characteristic for DNA-based 
Computing” . BioSystems, Vol. 80, No. 1, pp. 71-82, 2005. 
  
 
 
 
\ 
O 
R 
A 
N 
D 
 
 
 
 
 
Q 
E 
C O 
R 
…
 
O 
R 
O
R 
O 
R 
…
.
.
 
…
.
.
 
O 
R
  
O 
R 
O 
R 
00 =r
1y
11 =r
2y 12 =r
12 =−nr
11 =−nr
1=
n
r
ny
1−ny
10 =c
01 =c
0=
m
c
00 =r
1y
11 =r
2y12 =r
12 =−nr
1−ny
11 =−nr
ny
1=
n
r
10 =c
01 =c
0=mc
…
.
.
 
…
 
…
.
.
 
…
 
Figure 4−3: The full network is the QEC (the abbreviation of quantum evaluating circuit) to check whether 
the current clause is true or not). 
