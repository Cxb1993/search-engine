I摘 要
當我們面臨離散最佳化問題時, 所使用的方法通常可分成兩類: 第一類為
隱含式全域搜索法，例如分支界線法。第二類為啟發式搜尋法，如塔布搜尋法、
模擬退火法與基因演算法。分支界線法的缺點在於運算時間較長，面對較大型問
題時需要過長的時間才能找到最佳解。其優點在於只要運算能夠完成就可以保證
求得最佳解(optimal solution)。啟發式搜尋法的優點在可以於很短的時間內找到
一個品質不錯的解答，但是它的缺點在無法對於所找到解答的品質有所評估，也
就是無法得知此解與最佳解的距離有多遠。
本研究提出利用異質平行演算法來求解最佳化問題。所謂異質平行演算法
其在多個處理器上所運用的演算法是不同的。這樣可以把不同方法的優點加以結
合，並彌補所欠缺的部分。首先，第一部份的研究使用兩個處理器個別執行分支
界線法與啟發式演算法。其優點在於分支界線法可以提供目前找到解與最佳解之
間差距的估計。此外藉由搜尋法快速找到一個可行解的特性，可以提供分支界法
一個較好的上界值，以加快求解的速度，而分支界線法求解過程中產生資訊亦可
提供塔布搜尋法落入區域最佳解後合理的跳脫機制。本研究第二部份，重點在於
平行結構的改善。本研究以一個主從架構的模式來改善異質平行演算法的效能。
將執行分支界線法的處理單元做為主控單元(Master process)，而執行塔布搜尋的
處理單元當作從動單元。使用分支界線法作為控制異質平行搜尋法的主控單元，
並負責資訊儲存與交換的工作。資訊的交換只發生於塔布搜尋的重新開始，大幅
簡化溝通模式的複雜性，並可以輕易的擴展到更多的處理單元之上。研究的最後
針對在固定運算時間的限制下，分支界線法與塔布搜尋法最佳的配置的比例。
實驗的結果顯示在，結合分支界線法與塔布搜尋法之異質平行搜尋法，在大
規模的 TSP 問題上，當求解時間固定時，比單純之平行分界線法與平行塔布搜
尋，有較佳之表現。主從架構之下的異質平行搜尋法能更有效的進行資訊的交
換，並且從固定總運算資源的實驗中發現，異質平行搜尋法在增加從動單元的個
數後，求解品質仍保持不變。這顯示異質平行搜尋法擁有線性加速的特性，可以
增加搜尋程序的數量來縮短搜尋的時間。
關鍵詞：分支界線法、啟發式搜尋法、異質平行搜尋法
III
目 錄
摘 要.............................................................................................................................I
Abstract ......................................................................................................................... II
第一章 序論................................................................................................................1
1.1 研究背景.............................................................................................................1
1.2 研究動機與目的.................................................................................................1
1.3 研究架構.............................................................................................................3
第二章 文獻回顧........................................................................................................4
2.1 循序性啟發式搜尋法則.....................................................................................4
2.1.1 分支界線法(Branch and Bound).................................................................4
2.1.2 塔布搜尋法(Tabu Search) ...........................................................................5
2.1.3 模擬退火法(Simulated Annealing) .............................................................6
2.1.4 基因演算法(Genetic Algorithm) .................................................................7
2.2 平行運算.............................................................................................................7
2.2.1 平行運算的概念與發展..............................................................................7
2.2.2 平行運算硬體架構的分類..........................................................................8
2.2.3 平行程式發展環境.....................................................................................10
2.2.4 平行程式效率之衡量................................................................................10
2.3 平行演算法.......................................................................................................13
2.3.1 平行分支界線法(Parallel Branch and Bound)..........................................13
2.3.2 平行塔布搜尋(Parallel Tabu Search) ........................................................17
2.3.3 平行模擬退火法(Parallel Simulated Annealing) ......................................19
2.3.4 平行基因演算法(Parallel Genetic Algorithm)..........................................21
第三章 異質平行演算法模式建構..........................................................................23
3.1 異質平行演算法整體架構...............................................................................23
3.2 分支界線法與塔布搜尋法的結合...................................................................24
3.2.1 概念............................................................................................................24
3.2.2 結合分支界線法與塔布搜尋法之異質平行演算法................................25
3.3 主從架構之異質平行演算法...........................................................................28
3.3.1 概念............................................................................................................28
3.3.2 使用主從架構(master-slave)之異質平行演算法.....................................28
3.3.3 主從架構(master-slave)之異質平行演算法演算流程..............................29
第四章 實驗設計與結果分析..................................................................................31
4.1 銷售員旅行問題與演算法參數設定...............................................................31
V圖 目 錄
圖 1-1 計算曲線圖 .......................................................................................................2
圖 1-2 研究架構 ...........................................................................................................3
圖 2-1 SISD、SIMD、MIMD、MISD 運作模式圖 ...................................................9
圖 2-2 分享記憶系統架構圖 .......................................................................................9
圖 2-3 Message-Passing Multicomputer 一般化模型.................................................10
圖 2-4 程式平行化效率分析圖 .................................................................................12
圖 2-5 處理器個數、加速因子與非平行化比例 ......................................................12
圖 3-1 一般化異質平行搜尋法流程圖 .....................................................................23
圖 3-2 異質平行搜尋法訊息交換機制圖 .................................................................26
圖 3-3 主從架構(Master-Slave Structure)之異質平行演算架構圖...........................29
圖 4-1 2-opt 鄰近結構產生方式................................................................................33
圖 4-3 slave 個數對大規模問題(n=200)求解趨勢圖 ................................................38
1第一章 序論
1.1 研究背景
最佳化問題在工業工程領域的研究中，佔有極重要的的角色。大部分的最佳
化問題，要求出最佳解是相當困難的。常見的最佳化問題，如零工式生產排程問
題(job shop problem)、旅行者問題(traveling salesman problem)、混合整數規劃問
題(mixed integer programming problems)等，均屬於複雜的 NP-hard 問題，其問題
之特點在於求得最佳解的時間會隨著問題的大小呈指數成長。這類問題並沒有簡
單的規則或演算法可以在合理的時間內求得真正的最佳解。因此啟發式演算法
(heuristic search)常被運用在這些問題上，以期於合理的時間內找出可以接受的答
案。
然而，實務上面對大規模的最佳化問題時，仍然會面臨物理上運算速度限
制，使得運算的速度、求解問題規模的大小與求解的品質均會因此而受到限制。
為了克服這樣的障礙，除了演算法本身的改良外，運算環境的改進成為另一個思
考的方向，平行處理(parallel computing)便因此產生。平行處理同時利用多個處
理器(processor)進行運算處理同一個問題，是一種現有的處理器架構下，可以加
快運算速度的技術。近年來，由於電腦處理器的技術進步神速，除了運算速度快
速提升之外，價格也越趨便宜。因此利用多個處理器處理同一個問題已漸漸成為
一種趨勢。未來，為了在更短時間內，求解更大的問題，將不可避免的應用平行
處理的技術，以滿足我們對於求解品質與時效上的要求。
在最佳化問題中利用啟發式搜尋法求解一個困難問題時，電腦運算速度是影
響解答品質與搜尋速度的重要因素。以往被認為是不可能完成的演算過程，如今
藉由平行處理技術應用，是可能實現的。
1.2 研究動機與目的
對一個最佳化問題而言，其所有解空間中，某一解答的目標函數值不比任何
其他解差，稱為最佳解。利用啟發式搜尋法尋找最佳解的過程中，所獲得之最佳
解，我們稱之為最優解。由於啟發式演算法並沒有嚴謹的數學結構證明找到的解
答是否為最佳解。也就是說，當一個搜尋過程滿足停止條件而結束時，啟發式演
算法所提供的只是搜尋過程中所找到的最優解。此解與最佳解的差距並無法得
知。這是啟發式演算法普遍存在的問題：缺乏一合適的方法可以評估此最優解的
品質或信賴程度。如果採用分支界線法(branch and bound)進行問題的求解，雖然
其在求解過程中能提供可行解的下界，用以估計此可行解與實際最佳解的差距。
並透過隱含式的列舉結構，搜尋到所有的解空間，確定所得之解為最佳解。但是
此法的時間複雜度(time complexity)相當高。
比較演算法好壞並不是單純由求解的品質來衡量，根據不同規模問題我們所
可以容許的求解時間會有不同的結果。一般而言，啟發式搜尋法可以在很短的時
31.3 研究架構
第一章敘述研究的背景、動機及研究架構。第二章回顧相關文獻，對平行演
算法相關的研究與應用進行介紹。第三章為本論文方法的建構，提出平行演算程
序的架構與程序。研究架構如圖 1-2。
訂立研究目標
尋找相關文獻
創建研究方法
硬體籌置推導方法理論
實驗設計
推導是否合理？
軟硬體搭配運作無誤？
結果分析
否
否
是
是
圖 1-2 研究架構
5分支界線法，其未分解子問題集合是依照先進先出(FIFO)進行排列。如果未分解
子問題集合是依照後進先出(LIFO)進行排列，則歸類為 depth-first search。在最小
化問題中，Best-first search 將集合依據其評價後的值從小到大排列，有最小下界
的子問題優先選取。如果此集合未依一固定的方式排列，隨機選取子問題進行進
一步分解，則歸類為 random search。一般而言採用 Best-first search 的分支界線
法，在達到終止條件前所計算的子問題個數，平均而言是最低的，其有較低的時
間複雜度(time complexity)。
3. 排除法則(elimination rule)
排除法則是用來測試此問題所分解的子問題是否包含最佳解的方法。如果此
子問題所分解後續子問題未能包含最佳解，可以將此子問題從未分解子問題集合
中排除。
4. 停止條件(termination condition)
假如所有子問題都已經分解或排除，則達到分支界線法的停止條件。目前所
得到最好的解也就是問題的最佳解。
分支界線法應用的範圍十分廣泛，亦有相當多的文獻探討其基本的特性
(Lawler and Wood 1966, Balas 1968)，此外其廣泛的使用於求解最佳化問題上。
2.1.2 塔布搜尋法(Tabu Search)
塔布搜尋法(tabu search)是由 Glover(1989)提出的一種啟發式演算法(heuristic
search)，塔布搜尋法又稱為禁忌搜尋法，是一種利用鄰近解的搜尋方法。塔布搜
尋法是藉由其彈性的記憶結構，將前幾次搜尋過的移動路徑紀錄起來，並限制不
得重回之前紀錄起來的移動路徑。因此，當尋得較差的解時，系統亦接受，如此
反覆進行搜尋，可得到一近似解，此機制不但可以避免重複回到上一次的解，並
且可以避免陷入局部最佳解的困境。
Glover提出的塔布搜尋法是由以下三個概念所組成的: (1)利用記憶結構紀錄
已搜尋的歷史資訊，避免走重複路徑。(2)演算過程中必須定義搜尋中的控制機
制以及搜尋中的限制條件與期望法則。(3)塔布搜尋法導入不同的搜尋策略與記
憶結構。
1. 鄰近解的搜尋
在塔布搜尋過程中，依鄰近解的定義方式，每一個解都存在相對應的鄰近
解，將目前的解轉換到鄰近解的步驟，稱之為”移動(move)”。簡單塔布搜尋法
(simple tabu search)利用短期記憶結構紀錄前幾次的移動，避免在尋找最佳解的過
程中，倒退到前一個解，或是重複相同的路徑形成迴圈(cycle)。這種短期記憶架
構稱之為塔布串列(tabu list)。當候選的移動方向已經被紀錄在塔布串列時，稱之
為一個鄰近解被限制住(tabu)。塔布串列紀錄法則是採用先進先出(FIFO)，也就
是一個新的移動路徑進來，如果串列內紀錄路徑已滿，就把串列最舊的「移動」
7慢慢的接近區域搜尋。模擬退火法的搜尋過程也經由不斷的鄰近解移動來尋找較
佳的解，為避免在搜尋過程中被局部最佳化限制住的狀況，其以允許移動到較差
的解的方式來作為分散搜尋的機制，但是此一移動需以一函數所產生的機率大
小，來決定是否要進行移動，此機率一般稱為鄰近解的接受機率(acceptance
probability)。
Bonomi and Lutton(1984)將模擬退火法應用在 N 個城市的銷售員旅行問題
(TSP)求解上，其研究結果顯示模擬退火在大規模問題的求解上，求解的品質與
速度上均有相當良好的表現。
2.1.4 基因演算法(Genetic Algorithm)
遺傳演算法是由 Holland(1975)所提出。最初被應用於人工智慧相關領域，
因為其求解功能強大、應用便利所以逐漸的被應用於機器學習、排程問題等領
域。遺傳演算法主要仿效生物演化的過程，將求解問題編碼成類似染色體型式的
結構由其主要的三個運算子:複製(reproduction)、突變(mutation)與交配(crossover)
來產生新解，依照每個染色體適合度函數(fitness function)選取保留下來的新解，
直到構成一個新一代的族群為止，經過重複多代的演化，透過適合度函數的篩
選，最後演化出最佳的解。
Goldbreg and Lingle(1985)將基因演算法應用於銷售員旅行問題上，其以工作
順序 (job sequence)作為其可行解的形式，並設計新的運算子 PMX(Partially
Mapped Crossover)，來求解銷售員旅行問題。Chen et al.(1995)成功的將遺傳演算
法應用於流程式生產排程問題上。
2.2 平行運算
在本節中，針對平行運算概念的發展，平行電腦架構的分類，發展平行程式
所需的作業環境與工具以及衡量平行運算效率的方式，進行文獻的整理。2.2.1
節首先介紹平行電腦的起源與概念。2.2.2 節針對平行電腦的架構作一分類。2.2.3
節介紹發展平行程式時所需要的作業環境與程式發展工具。2.2.4 節針對平行運
算效率的衡量方式做一文獻的整理。
2.2.1 平行運算的概念與發展
由於科學上對計算量持續性的大量成長，縱使電腦硬體技術一日千里，但是
在某些研究領域，如天氣預報、DNA 結構的研究、天體運行、組合最佳化等方
面，目前單一電腦所能夠提供的計算量，仍不足以在合理的時間內完成運算。在
這樣的環境之下，平行運算的概念便孕育而出。平行運算並非全新的概念。
Gill(1958)便提出有關平行程式的概念，但是之後由於硬體技術無法配合，使得
此先進概念的發展停滯。直到 1980 年代中期積體電路技術發展成熟，平行計算
才又恢復蓬勃的發展。由於硬體技術上的成熟，使得平行計算的實現，已經不再
是遙不可及的夢想。
9(message-passing multicomputer)架構。圖 2-3 表示這此類電腦架構一般化模型。
圖 2-1 SISD、SIMD、MIMD、MISD 運作模式圖 (Flynn, 1966)
圖 2-2 分享記憶系統架構圖 (Wilkinson and Allen, 1999)
11
加速因子 ( ) s
p
t
S n
n t
 使用單一處理器的執行時間
使用 個處理器執行時間
在一般最佳的狀況下，平行程式的執行時間 tp 為使用單一處理器執行時間 ts 的
1/n，所以最佳的狀況下:
( )
/
s
s
t
S n n
t n
 
這樣的狀況稱為線性加速(linear speedup)。如果 S(n) > n，稱為超線性加速
(superlinear speedup)。這種現象的產生原因大概可以歸納成：平行程式中使用的
序列式演算法不是最佳化的演算法與多處理器系統上記憶體操作效率上的優勢
所引起。
效率(Efficiency)：為另一個可以用來衡量執行效率的指標，其定義如下
s
p
t
E
t n
 
 
使用單一處理器的執行時間
使用多處理器的執行時間 處理器個數
可以化簡成
( )
100%
S n
E
n
 
1. Amdahl’s Law
分析評估一個平行程式的執行效率時，可以發現程式本身是由不可平行化的
部分與可平行化的部分所組成，如圖 2-9 所示，加速因子可改寫成
( )
(1 ) / 1 ( 1)
s
s s
t n
S n
f t f t n n f
 
   
f 為程式碼中循序部分(serial section)的比例。當處理器個數 n 趨近於無窮大時：
1
( )
n
S n
f

這限制是由 Amdahl(1967)所提出。假設程式內有 5%的非平行化區域，則最大的
加速因子為 20，非平行化的比例越高增加處理器個數對執行效率的影響越是小。
圖 2-10 顯示處理器個數、加速因子與非平行化比例(f)之間的關係。
13
也無法在合理的時間內得到結果。在這纇的應用中，主要的目標在於於一定的運
算時間內，求解最大的問題規模與最高的精確度。根據這樣的概念，Gustafson
提出了有別於 speedup factor 另一個觀點的效能衡量指標：scaled speedup factor。
假設在單一處理器上，程式平行化部份的執行時間為 p，非平行化部份執行時間
為 s，在單一處理器上的總執行時間為固定的 s+p。令 s+p=1 將之代入 Amdahl’s
law，可改寫成
1
( )
/ (1 ) /
s p
S n
s p n s s n
 
  
根據 Gustafson’s law 假設平行化部份的執行時間是固定的，則在單一處理器上總
執行時間將變成 s+np，假設在平行處理環境下總計算時間 s+p=1，則 scaled
speedup factor 則可改寫成
( ) (1 )s
s np
S n s np n n s
s p
     

根據 scaled speedup factor 的定義，當在 20 個處理單元的平行環境下，程式中非
平行化部份為 5%時，speedup 為 19.05。相對使用 Amdahl’s law 所呈現的結果為
10.26。當處理單元的個數 n 增大的時候 speedup 的極限也隨之增加，不同於
Amdahl’s law 所呈現存在一明顯極限的結果。
雖然 Amdahl’s law 顯示，當問題規模大小固定的時候，平行運算在運算速度
的加快上是存在一明顯的極限的。雖然以加快運算時間的角度來衡量平行程式的
效能，其效果是有限的，但是由 Gustafson’s law 顯示，當運算時間為固定的時候，
使用更多的處理器，所能夠求解的問題規模也越大，所求解的精確度也越高。從
這個角度來衡量平行處理的應用是值得進行的，這也是平行運算主要的價值所
在。
2.3 平行演算法
在本節中針對各纇的平行演算法進行文獻的整理與歸納，主要可分成 2.3.1
平行分之界線法(Parallel Branch and Bound)、2.3.2 平行塔布搜尋法(Parallel Tabu
Search)、2.3.3 平行模擬退火法(Parallel Simulated Annealing)、2.3.4 平行基因演算
法(Parallel Genetic Algorithm)。
2.3.1 平行分支界線法(Parallel Branch and Bound)
在使用分支界線法(Branch and Bound)這種演算法來求解 NP-Hard 問題時，
最常出現的問題在於求解時間過長，或是在合理的時間內所能求得的答案的問題
規模過小，不符合需求。由於分支界線法可以將問題求解的空間用一樹狀結構來
表示，一個節點表示求解空間內一個子問題，這樣的問題結構，可以很輕易的將
演算結構修改成平行化的架構，以增快求解的效能。
15
以分類成 SSP(synchronous single pool) 、 ASP(asynchronous single pool) 、
SMP(asynchronous multiple pool)、AMP(asynchronous multiple pool)四大類。
1. SSP 演算法
SSP 演算法的概念為使用單一的工作流來維護子問題資訊，並且運算過程中
採用同步化的策略，所以每一個運算單元同時計算子問題時會有同樣的開始點與
結束點，主控單元於所有處理單元運算結束後，再指定新的子問題給各處理單元
求解。SSP 演算法多半只進行分支界線法理論上之研究，較少實際進行實作。SSP
演算法的特點在於固定數量的運算單元，單一表列結構的未評價子問題表列與一
個全域變數來儲存目前為止所求得之最佳值。Quinn(1990)於 64 處理單元的
NCUBE/7 Hypercube 求解十個 30-vertex TSP 問題。其發現如果訊息傳遞時間比
子問題運算時間少很多的話，可以得到不錯加速性。Gendron and Craninic(1993)
採用另一種方式實作 SSP 演算法。其提出的演算法分成兩個主要步驟：循序階
段(Sequential phase)與平行階段(Parallel phase)。在演算法執行初期由循序階段產
生足夠數量的子問題後在進入平行階段，以建少演算法執行初期，因子問題產生
數量不足，運算單元等待主控制單元分配子問題的時間。
2. ASP 演算法
ASP 演算法的特點與 SPP 演算法相同，差異在於 ASP 演算法不採用同步化
策略。各處理單元進行子問題運算時，不需要保持同步化，只需要在處理單元子
問題計算完畢後由主控單元指定儲存於工作流中的未求解子問題，繼續運算。
ASP 演算法理論方面的研究。Boehning et al. (1988) 在一個分享記憶體架構 20
處理單元的平行環境下求解 LP-based 整數規劃問題，結果顯示一些測試問題成
形超線性加速 (superliner speedup) 的狀況。Cannon 與 Hoffman(1990)在 DEC
VAX 上求解大規模的 0-1 整數規劃問題採用的方法為平行化的 Branch and Cut 方
法，其演算過程也是分成循序階段與平行階段兩部分，先執行循序階段產生足夠
子問題後再進入平行階段以節省起始狀態下，從動單元(slave)等待主控單元
(master)分配子問題的等待時間。結果顯示當計算下界的程序需要大量的計算時
間時，會有較佳的加數性。De Bruin et al. (1988) 使用 64 處理單元的 NCUBE/6
Hypercube 求解 0-1 整數規劃問題，結果發現演算法的效率為兩個主要的因素所
限制：訊息傳遞時間的耗損與工作負荷的平衡。Ralphs (2003)採用平行化 Branch
and Cut 法求解大規模有容量限制的車輛排程問題，並在 Beowulf cluster 上進行
問題的測試與數據的分析。
3. SMP 演算法
SMP 演算法其特徵在演算法執行過程維持數個獨立的工作流(work pool)以
紀錄運算所產生未評價子問題的資訊，並以定期以訊息傳遞程序對各自運作的工
作流進行同步化的作業。Pardalos 與 Rodgers(1990)提出了一個 SMP 演算法求解
0-1 unconstrained quadratic 問題。演算步驟分成兩大部分計算階段與訊息交換階
段。在計算階段執行 depth-first 的分支界線法進行運算，運算一定個數的子問題
後或是其對應的工作流(work pool)所有紀錄的未評價子問題已經計算完畢，進入
訊息交換階段，進行同步化的工作，重新分配各工作流(work pool)中所紀錄的子
17
低訊息傳送時間造成效能的損失。但是相對的，共享訊息所帶來的益處也隨著節
點間的訊息傳遞的最小化而變得較不明顯。由於其分解成獨立的子問題結構同時
進行求解，所以各處理器之間的負載平衡(load balance)成為這類演算法所必須重
視的問題。El-Dessouki 與 Huen(1980)提出了平行分解式 depth-first search 分支界
界線法並搭配負載平衡之策略。Karp 與 Zhang(1988)在分散式的平行系統中提出
平行分解式 best-first search 分支界線法，在分散其採用的為隨機負載平衡策略。
在非同步的 MIMD 系統上，由於其系統架構是由內部網路連結各運算節點而成，
透過內部網路傳遞訊息時間比起運算時間相對而言比共享記憶體架構的系統佔
較大的比例。所以在 MIMD 系統上，一般而言分解式的演算法比全域演算法擁
有較佳的效能表現。
Gendron 與 Grainic(1994)整理第二類平行方式的分支界線法，歸納出幾點結
論：1. 只有當問題所採用的排除法則在每個子問題執行時間大約相等，才適合
在 SIMD 系統上使用。2. 此類平行方式，同步化不是必須的。 3. 非步化單一工
作流 (ASP) 演算法只有在節點個數較少且每個節點排除法則運算需求較高時，
有較好的效能表現。4. ASP 演算法在分享記憶體架構的系統下有較佳的效能。5.
影響非同步多重工作流 (AMP) 演算法效能的主因在於是否保持良好的負載平
衡。大多數研究均採用合併式的負載平衡的策略，以達到較佳的結果。
第三類平行方式的研究，是相當值得研究的平行方式。Miller 與 Pekny (1993)
使用不同的分支法則同時進行同問題求解空間樹狀結構的建構。Janakiram et al.
(1988) 為採用不同評選法則同時進行求解空間結構的建構。Kumar 與 Kanal
(1984) 採用的方式為使用不同排除法則。這類平行方式，除了可以使用分支界
線法外，可以拓展到其他演算法如區域搜尋上。
2.3.1.4 平行分支界線法效能的改進
平行分支界線法效能的改進可以從: 使用更有效的循序方法，適當的設計平
行演算的程序兩方面著手。Ralphs(2003)採用了分支界線法衍生出來的方法
branch and cut 法作為平行化的基礎，以改進一般平行分支界線法面對大規模問
題時求解問題的效率。Yang 與 Das (1994)認為要設計一個有效率的平行分支界線
法首先必須分析問題在單一處理單元計算時所評價的子問題個數與單一處理單
元內部通訊所花費時間。這是在分析平行演算法加速性所必須獲得的資訊。其次
在平行環境下必須分析訊息傳遞對整體演算法的影響，以評估較為真實的加速特
性。最後當演算法在不同的硬體架構上實作時，必須考慮在不同的架構下最小化
的訊息換成本。Yang 與 Das 使用解析模式評估分解式平行分支界線法法的效率。
分析分支界線法平均求解節點個數，求解深度，與訊息傳遞時間的影響，以改善
平行分支界線法效能。包含訊息傳遞的因素，以估計較為貼近實際狀況的加速狀
況。並與模擬結果相比較，驗證其解析模式的正確性。
2.3.2 平行塔布搜尋(Parallel Tabu Search)
平行塔布搜尋法(parallel tabu search)是同時利用多個處理單元進行塔布搜尋
工作的搜尋方法，可以有效的改進求解速度。根據 Talbi et al.(1998)的分類，塔
19
於需要軟體發展環境的配合，所以以目前的技術環境而言，設計上尚有困難。
2.3.2.4 平行塔布搜尋的改進
在平行塔布搜尋法的改進上，除了改進傳統循序塔布搜尋效率外，尚可以考
慮如何在平行搜尋過程中設計更有效脫離機制與有效的涵蓋求解的空間並避免
重複搜尋已搜尋解空間。林(2001)在提出了涵蓋比率的概念，利用涵蓋比率評估
最優解的信賴程度，並透過長期記憶紀錄搜尋過程中涵蓋的區域，當搜尋過程搜
尋到之前已經涵蓋的部分時，重新隨機產生一新起始解，重新開始搜尋，可以有
效的減少搜尋程序落入迴圈中所浪費的時間。並且以涵蓋比率作為搜尋停止條
件，可以確保求解品質的水準。
2.3.3 平行模擬退火法(Parallel Simulated Annealing)
如何改進模擬退火法的執行效率，根據 Arts 與 Korst(1989)的看法，認為可
以以三種不同的方式，加速原始的模擬退火法。分別為：設計更快的循序演算法、
改進硬體設備與設計平行演算法。
在加速傳統循序演算法時可以設計一個適當的降溫計畫，在不影響求解品質
的條件下，加速其收斂的速度。緩慢的降溫計畫，雖然最後可以得到較佳的解，
但是由於搜尋序列太長，每次解的改進幅度有限，因此顯得缺乏效率。相對的如
果採用急促的降溫計畫，雖然使得搜尋工作收斂的很快，但是最終的求解品質往
往不佳。如果控制好降溫的時機與每個溫度下搜尋的長度，就可以在較短的時間
內，求得不錯品質的解。
此外使用運算速度較快的硬體設備進行模擬退火法的運算，是最直接加快演
算速度的方法。雖然目前硬體技術一日千里，但是相對比起求解規模所需要龐大
的運算量，硬體技術的改進仍然十分有限。在這樣的狀況下，平行運算變成為進
一歩加快運算可行的方法。除了平行環境所提供額外運算量的可加速模擬退火法
的速度外，演算法平行化後，透過訊息的溝通共享，往往會有不錯的效能表現。
Greening(1990)提出了一些平行模擬退火法的技巧，其認為設計平行模擬退火法
時，必須針對其中最耗時的部分-馬可夫鏈中數次試驗-設計有效的平行方法。一
個試驗(trial)包含以下三個步驟：
1. 產生新的鄰近解並計算目標函數。
2. 比較目前解與鄰近解目標函數值之差異，並計算接受機率。
3. 根據接受機率隨機抉擇是否接受該鄰近解。
完成這一系列的步驟後，如果接受該鄰近解便取代目前解。針對試驗(trial)的特
性，將其平行化，同時進行多次試驗，以增加移動的機率，依據此原則設計之平
行演算法一般稱為多向試驗(multiple trial)平行模擬退火法。
2.3.3.1 分工演算法(division algorithm)
21
搜尋過程中並不做溝通處理。錯誤演算法所決定的移動方向並不唯一，所以最終
並不如分工演算法與叢集演算法一樣會具備收斂的特性，必須依靠演算法設計者
的經驗，強制停止搜尋。
Aarts 與 Korst(1989)分析錯誤演算法實驗數據，結果顯示其平均誤差隨著處
理單元的增加而遞減，平均加速效果隨著處理單元數目增加而遞減，且難以收
斂。所以錯誤演算法雖然容易於 MIMD 系統上實作，但是其缺乏收斂的特性與
較差的加速性，是得實際上很少人使用。
2.3.3.4 平行模擬退火法的改進
在平行模擬退火法的改進上，可以將重點放在多向試驗的效率上。分工平行
模擬退火法，同時進行多個獨立的模擬退火搜尋程序，但是在搜尋的後段溫度偏
低時，各獨立的搜尋程序均很難找到可接受解，在這樣的狀態下，將耗去很多的
時間於尋找下一個可接受解上，而叢集平行模擬退火法，可由同時進行數個試
驗，有效的增加尋找到可接受解的機率。但是在模擬退火法執行的初期，溫度偏
高時，可以容易的找到可接受解的狀態下，叢集平行退火法明顯的花費多於的計
算時間於尋找可接受解上，並且無法如分工演算法一般開發更多的解空間以增加
搜尋廣度。張(2002)提出動態平行模擬退火法，結合分工演算法與叢集演算法的
優點。在高溫時採用獨立的分工演算法，以增進搜尋廣度。當溫度偏低，找到可
接受解的機率低於設定的搜尋效率下限，顯示獨立分工演算法各自的搜尋效率偏
低時，將效率較差的演算程序結合成叢集，並進行叢集平行退火法。在低溫時可
達到加速深度搜尋的效果。動態模平行模擬退火法理論上可以結合分工與叢集平
行模擬退火法的優點，但是在合併的時機上，必須進一歩的的研究以達到較佳的
結果。陳(2003)根據動態平行模擬退火法的架構，提出幾種不同合併策略，增進
其運算的效能。
2.3.4 平行基因演算法(Parallel Genetic Algorithm)
基因演算法的平行化可以採用兩種方式進行實作。第一種方式每個處理單元
產獨立的產生一與其他隔離的群體。每個處理擔元定期的透過遷徙(migration)操
作子將群體中最佳的個體與其他處理單元共享。第二種方式是每個處理單元負責
處理演算法的一部份功能，如選擇(selection)、交配(crossover)、突變(mutation)
等操作子。
第一種方式為較多研究採用的方式。其處理流程為：每個處理單元獨立的產
生其各自的起始子群體，擁有各自獨立的適合度函數，從各自的子群體中選取個
體，經由交配、突變等方式產生下一代的群體。計算到一定的世代後，各處理單
元將其群體中最佳的個體透過遷徙(migration)分享給其他處理單元。
遷徙(migration operator)，是平行基因演算法中特有的操作子。在平行基因
演算法中，各產生子代的來源除了親代以外，尚包含從別處而來的新個體。就如
同人類演化過程，當新的物種加入群體後，將加速物種的演化。平行基因演算法
根據此觀念設計了遷徙(migration operator)，各群體透過此操作子，加入新的個
體以增快演化的速度。
23
第三章 異質平行演算法模式建構
本章說明異質平行演算法的整體架構與不同類型演算法結合的方式。3.1 節
說明本研究整體模式之架構。3.2 節說明本研究第一部分：結合分支界線法與啟
發式搜尋法的異質平行搜尋法。3.3 節說明本研究第二部分：主從架構之異質平
行演算法。
3.1 異質平行演算法整體架構
本研究所採用的搜尋架構為一採用多演算法多處理單元的平行結合方式的
演算架構。每個處理單元中所使用的搜尋程序可以根據問題的特性以及研究上預
期的目標，指定不同功能，不同作用的演算法則。這樣的平行演算程序，可以稱
作為異質平行搜尋法(heterogeneous parallel search algorithm)。一般化模型演算的
流程如圖 3-1 所示。
啟發式搜尋法 啟發式搜尋法
停止搜尋
開始搜尋
是否達到訊息
溝通時點
訊息溝通程序
是否滿足
停止條件
否
是
否否
是
訊息溝通程序
是否達到訊息
溝通時點
是
否
P1 PmPn
… …
圖 3-1 一般化異質平行搜尋法流程圖
25
所以一個理想的啟發式搜尋法，必須具備搜尋速度的優勢以及搜尋過程中可
靠的求解品質評估方式。在傳統的序列式(sequential)搜尋法中，分支界線法擁有
可靠的求解品質評估方式。而啟發式搜尋法，如塔布搜尋，則擁有能夠快速求得
優良可行解的優勢。分支界線法為的求解空間為一列舉式的樹狀結構，而塔布搜
尋演算法卻是改善式(improved)的演算流程，存在很大的差異。一般整合兩者的
概念多半是採用一個層級(hierarchical)的架構，先以塔布搜尋求得一較優的目前
解，然後在分支界線法中，利用此可行解，去排除不需要搜尋的求解空間，以達
到減短求解時間的目的。但是這樣的方式無法完全利用到兩者的優勢，且並無針
對原來存在的缺點作一比較恰當的結合方式。
本研究第一部份的概念，就是以平行執行的方式，去整合分支界線法與塔布
搜尋法的優點。於平行程式的架構下，同時執行分支界線法與塔布搜尋法，透過
最優解與評估函數所產生下界值得資訊分享。來達到整合兩者優點的目的。
3.2.2 結合分支界線法與塔布搜尋法之異質平行演算法
本方法是採用平行處理的方式整合分支界線法與塔布搜尋法，本研究採用在
兩個處理單元 P1 P2 上同時個別進行分支界線法與啟發式搜尋法的程序。所以本
演算法可分成以下四個部分: 個別處理單元上進行的分支界限法、塔布搜尋法、
終止條件、訊息分享與溝通機制四個部份。
1. 分支界線法
分支界線法的執行步驟主要分成幾個步驟。初始化(initialize)：產生起始的
節點 S1，並將其存入 List 中。分支(branch)：從 List 取出目前需要分支的節點 Sc，
將其進一步分解成數個子節點 Sk 並計算所有子節點的下界值(UBk)並將新分支出
來的子節點存入 List 中，並使用排除法則去排除下界值大於目前解目標函數值的
節點(UBk≧G(S0))。選擇(Select)：從 List 中選出有最小 UB 值的節點，並判斷此
節點是否可表示一完整解。如果非表示一完整解則回到分支(branch)的步驟進一
步分解。如果表示一個完整的解，則進行比較(complete)的工作。比較(complete)：
主要為比較此解與最優解之間的好壞，如果目前解的目標函數值小於最優解的目
標函數值(G(Sc) < G(S0))，則最優解 S0 將由目前解 Sc 取代。結束條件：判斷 List
中紀錄的子節點否已經解完，假如 List 為空(empty)，則演算流程停止，並傳送
終止的訊號給其他的處理單元，此時 S0 所紀錄的解即為最佳解(optimal solution)。
2. 塔布搜尋法
循序塔布搜尋法演算程序可以分成三個主要的步驟。起始化：從某一啟發式
演算法中選擇一解當作模擬退火法的起始解，設定疊代次數 k=1 與設定目前的最
優解 S0 等於起始解 S1。解的移動：從鄰近解中選擇一解作為欲移動的方向，如
果此解不為塔布串列(tabu-list)所限制，則目前解往此解移動(Sk+1=Sc)，將此移動
加入塔布串列中，並刪除塔布串列中最舊的紀錄。如果此解在塔布串列的限制
中，則目前解不移動(Sk+1=Sk)，並比較目前解與最優解的目標函數值，如果目前
解有較佳的目標函數值(G(Sc)<G(S0))，則將最優解以目前解取代(S0=Sc)。最後疊
代數加一，並判斷停止條件。
27
本演算架構中，使用了 2 個停止條件以控制演算的進行。第一個停止條件 stop1
代表整體運算的停止條件。第二個停止條件 stop2 代表塔布搜尋需要跳脫目前求
解區域的條件。當 stop1 達成時，演算法之間傳送停止的訊息，並將最終結果輸
出。當 stop2 達成時，塔布搜尋法送出要求新起始解的訊息給分支界限法，並接
收分支界限法所提供的新起始解。
ALGORITHM 1. Heterogeneous Cooperative Parallel Search Procedure
Master process (P0)
Step1 Read cost matrix from file
Generate an initial solution S1 using heuristic
Step2 Send cost matrix and S1 to other process
Step3 BFS Branch-and-Bound
Step4 Send Termination Signal to all other processors
Step5 Output lower bound value and best solution found
Slave process (P1)
Step1 Receive cost matrix and S1 from master process P0
Step2 TabuSearch(S1)
Step3 If (Stop2 is met) then
Request and receive a new initial solution S1 from master process P0
Go to step2
ALGORITHM 2. BFS Branch-and-bound
Step 1: Set best solution S0= S1
Generate the initial node n1, store it in evaluated-but-unexpected
subproblem(eus) list
Step 2 Select the node nc with minimum lower bound (LB(nc)) from eus list
Compare LB(nc) and objective value of best solution G(S0).
If (LB(nc)≧G(S0)) then STOP; otherwise go to step 3.
Step 3 Branch current node nc to several child nodes nk
Compute LB(nk) and delete the nodes which LB(nk)≧G(S0)
Step 4 Generate a feasible solution fs(nk) by some heuristic
if (G(fs(nk)) < G(S0)) then set S0= fs(nk) and send S0 to process P1
Store nk in evs list.
Step 5 If (message from P1 is arrived) then
Receive S0 from process P1 and update S0
If (request from process P1 is met) then
Generate a new initial solution from nc with min LB(nc) in eus list
Send a new initial solution to process P1
Step 6 If (Stop1 is met) then STOP
If eus list= then STOP otherwise go to step 2
ALGORITHM 3. TabuSearch(S1)
Step 1 Set k=1
Start from an initial solution S1
Set best solution S0=S1
Step 2 Select a candidate solution Sc from neighborhood of Sk
If the move SkSc is prohibited by tabu list and
29
提供重新起始解，可以有效的跳脫之前搜尋的區域，可以減少重複搜尋的機率，
以增強搜尋的效率。在這樣的架構下，作為從動單元的塔布搜尋法可以以更有效
的方式同時兼顧減少重複搜尋的機率與加強搜尋最可能存在最佳解區域。各從動
單元在達到各自的重新開始條件時，除了接受由主控單元所提供的新起始解之
外，並同時交換最優解的資訊。主從架構之異質平行演算法如圖 3-3 所示。
Communication
medium
…………
Evaluated-but-unexpanded subproblem list
New initial
solution
Best
Solution
Best
Solution
Request
Self-contained
TS procedure
………….Best
Solution
New initial
solution
Self-contained
TS procedure
Best
Solution
New initial
solution
Request
Self-contained Branch-and-bound
圖 3-3 主從架構(Master-Slave Structure)之異質平行演算架構圖
在主從架構之中，資訊的交換只發生在塔布搜尋法需要跳離目前搜尋區域的
條件之下。最優解資訊透過主控單元的儲存與從動單元非同步化的交換資訊，可
以大幅減低因運算程序增多時，資料同步化所造成的問題。所以可以輕易的增加
從動單元的數量，以節省運算的時間。
3.3.3 主從架構(master-slave)之異質平行演算法演算流程
主從架構之異質平行演算法演算程序如 ALGORITHM 4 所示。分支界限法
演算程序如 ALGORITHM 5 所示。塔布搜尋法運算程序如 ALGORITHM 6。運
算流程與研究第一部分所提出的演算法類似，但時由於平行結構的改變，使得通
訊程序的複雜度大幅減低，並可以在更多的處理單元上使用。
ALGORITHM 4 Heterogeneous Cooperative Parallel Search Procedure
(Mster-slave)
Master process (P0)
Step1 Read cost matrix from file
Generate an initial solution S1 using heuristic
Step2 Send cost matrix and S1 to other process
Step3 BFS Branch-and-Bound
Step4 Send Termination Signal to all other processors
Step5 Output lower bound value and best solution found
31
第四章 實驗設計與結果分析
本研究之實驗所使用銷售員旅行問題(TSP)來衡量與演算法的效能。本研究
實驗分三部分：(1)比較異質演算架構與同質演算架構之效能差異。(2)比較對等
架構與主從架構之下結合分支界線法與塔布搜尋法之異質平行演算法的效能。(3)
研究在固定總運算時間主從架構下，從動單元(slave)的個數對運算效能的影響。
4.1 銷售員旅行問題與演算法參數設定
4.1.1 銷售員旅行問題
銷售員旅行問題(traveling salesman problem)為組合最佳化問題中著名的經
典問題，是由 Hassler Whitney 於 1934 年提出。一個銷售員從公司所在的城市出
發欲拜訪住在Ｎ個不同城市中的客戶。在整個訪問的過程中，銷售員必須拜訪每
座城市一次，且僅能拜訪一次，拜訪完所有的城市後必須回到原本出發的城市。
此問題的目的是希望能使整個拜訪的過程所花費的成本為最少。
問題的基本定義為：給定一有 N 個節點的網路 G = (V, E)，其中 V={1,…, N}
為節點(Nodes)之集合，E={(i, j) | i, j= 1,…, N} 為節線(Edges)之集合，c(i, j)代表
i 到 j 的成本，c(i, i)=∞；希望在此路網上求得一條以最小成本，自一點出發並經
過 N 中所有節點恰一次，再回到起始點的路線。TSP 問題可以使用一個整數規
劃的模式來表示(Dantzig et al., 1959):
( , ) ij
i V j V
c i j x
 

Subject to
1, ,ij
i V
x i V

  (1)
1, ,ij
j V
x j V

  (2)
1 forall ,ij
i S j V S
x S V S
  
   (3)
0 or 1, ,ijx i j V  (4)
這類問題的特點在於問題定義雖然簡單，但卻是求解相當困難 NP-complete
問題 (Lawer et al. ,1985). 如果使用全域搜索法(如分支界限法)求解，計算的雜度
為 O(2N)。
33
圖 4-1 2-opt 鄰近結構產生方式
3. 短期記憶結構與停止條件
塔布搜尋程序中使用一個短期的記憶結構來防止塔布搜尋移動到最近已經
到達過的解。根據 Glover 與 Laguna 的建議，本研究將短期記憶的長度設定為 7。
當塔布搜尋法無法改善目標值的疊代次數達 20000 次時，塔布搜尋法將跳離目前
求解的區域，由分支界限法所提供的新起始解重新開始搜尋。
4.2異質演算架構與同質演算架構之比較
4.2.1 實驗設計
1.實驗因子水準
本研究設計的兩個實驗因子為「問題規模」與「演算法」。問題規模方面，
選擇大問題(N=200)、中問題(N=100)、小問題(N=50)各 30 組資料，進行數據的
測試。運算時間分別設定為 7200 秒、3600 秒、1800 秒。演算法上則比較 BB、
BT 與 TT 三種平行演算法。因子水準設計值如表 4-1。
表 4-1. 實驗因子水準設計值
Factor Level
問題規模 50, 100, 200
演算法 BB, BT, TT
2. 反應變數標準化方法
實驗的反應變數以 TSP 總距離作為目標值。三種問題規模大小與運算時間
皆不同，必須以標準化的方式將目標值與時間轉換到同一標準。在時間部份，在
每一個測試問題中比較所有搜尋法所搜尋到的最佳解，並將其時間點設為 t*，將
其標準化為對數時間 4 ，其他所有的時間 t 換算成標準化對數時間
k= 10 *log (10000 )t t
 。目標值部份將目標值(z)除以各問題的起始解(zinit)作為標準
化的方法，經其他所有時間點的 z換算成標準化目標值 z/zinit，做以下的觀察與
分析。
i i+1
j+1 j
i i+1
jj+1
35
將運算時間分成三個階段進行 Duncan 檢定，結果如表 4-3, 4-4, 4-5 所示。本
研究所提出的異質平行搜尋法(BT)，在運算初期表現與平行分支界線法相當。運
算中期求解表現介於平行分支界線法(BB)與平行塔布搜尋法(TT)之間。最終結果
異質平行搜尋法在三個演算法中有最佳的表現。由運算曲線中可以觀察出，異質
平行搜尋法擁有比平行分支界線法更佳的改善速度與持續改善的能力。在運算時
間較充裕的狀態下，異質平行搜尋法可以獲得比平行塔布搜尋法與平行分支界線
法更佳的表現。
表 4-3 Duncan test (k=-4)
Duncan a
Subset for alpha = .05
method N 1 2
TT 90 .860394911
BT 90 .941016567
BB 90 .948008644
Sig. 1.000 .372
Means for groups in homogeneous subsets are displayed.
a. Uses Harmonic Mean Sample Size = 90.000.
表 4-4 Duncan test (k=0)
Duncan a
Subset for alpha = .05
method N 1 2
TT 90 .845061478
BT 90 .857186067
BB 90 .915482367
Sig. .140 1.000
Means for groups in homogeneous subsets are displayed.
a. Uses Harmonic Mean Sample Size = 90.000.
表 4-5 Duncan test (k=4)
Duncan a
Subset for alpha = .05
method N 1 2 3
BT 90 .814242933
TT 90 .837981433
BB 90 .893471922
Sig. 1.000 1.000 1.000
Means for groups in homogeneous subsets are displayed.
a. Uses Harmonic Mean Sample Size = 90.000.
37
的決定塔布重新開使的條件可以增進整體運算的效率，在相同的運算時間之下，
大部分的測試問題均能找到比原先模式更佳的目標值。但是在下界值的估計上，
幾乎沒有改變，新的資訊交換的模式與頻率，可以改善異質平行演算法中塔布搜
尋法的效率。但是在分支界線法部分的效能並無法從結果中看到明顯的改變。
4.4 主從架構下從動單元個數對整體效能的影響
在總運算時間固定之下，從動單元個數的多寡，決定了使用者實際等待的時
間。越多的從動單元，如果平行搜尋法擁有良好的線性加速的特性，可以有效簡
短使用者等待的時間。總運算時間限制在大問題：14400 秒、中問題：7200 秒、
小問題：3600 秒。從動單元個數為 1 到 5。在滿足總運算條件之下各組實驗的停
止時間如表 4-8 所示。
表 4-8 運算時間設定
Slave個數
問題規模
1 2 3 4 5
50 1800 1200 900 720 600
100 3600 2400 1800 1440 1200
200 7200 4800 3600 2880 2400
實驗的反應變數以 TSP 總距離作為目標值。在三種不同的問題規模之下，五種
不同從動單元個數，平均目標值，平均標準化目標值與平均的下界值如表 4-9 所
示。由於總運算時間固定，越多的從動單元，平行演算法中各自的演算時間也就
越短。在小規模問題(n=50)之下，增加從動單元個數，以減低運算時間，雖能夠
在目標函數值保持相同程度的改善，但是在下界值表現上，卻有明顯的差異。估
計下界值是由主控單元的分支界線法所提供，較短的運算時間之下，這樣的表現
是在預期之中。
表 4-9 固定總運算時間主從架構下，從動單元(slave)的個數對運算效能的影響
Slave 個數
問題規模
1 2 3 4 5
目標函數值 552.5 552.65 552.7 552.8 552.9
標準化目標值 0.811954 0.812161 0.812258 0.812397 0.81253550
下界值 450.45 449.2 447.95 447.55 446.75
目標函數值 758.5 758.7 759.25 758.9 759.8
標準化目標值 0.806167 0.806442 0.807014 0.80669 0.807568100
下界值 584.1 586.4 585.55 585 584.65
目標函數值 1058.45 1057.9 1057.4 1057.75 1058.5
標準化目標值 0.829952 0.829483 0.829075 0.829489 0.83006200
下界值 787.9 788.05 787.8 787.4 787
以 duncan 檢定比較不同的 slave 單元個數對目標值的影響，結果如表 4-10 所示。
39
第五章 結論
以平行執行的方式結合分支界線法與塔布搜尋法得到不錯的結果，顯示以平
行的方式結合不同演算法的構想是可行的方向，與預期的目標相符。結合分支界
線法與塔布搜尋法的異質平行搜尋法的效能主要來自分支界線法求解過程中評
估函數所產生最小下界值之子問題節點的資訊，提供塔布搜尋法一個合理的重新
開始起始解，可使塔布搜尋法避免落入已搜尋的求解空間，並優先搜尋最小下界
值之求解區域，增加求得最佳解之機率。
當異質演算法進一步的延伸更多的處理單元時。溝通模式是否有效率，成為
一個關鍵的因素。以主從(master-slave)架構作為平行執行溝通方式的異質演算法
可以簡化資訊溝通設計上的複雜度，在拓展到更多運算單元時，可以獲得較佳的
資訊交換效能。以分支界線法作為平行程式的主控單元，除了負責資訊交換與資
料儲存，分支界線法求解過程中評估函數所產生最小下界值之子問題節點的資
訊，提供塔布搜尋一個合理的重新開始起始解。在運算總時間固定之下，從動單
元，也就是塔布搜尋法的數量，對目標值的解影響不大。在比較採用 1-5 個塔布
搜尋法作為從動單元的實驗中，各組演算法最後的目標值大部分相同。這顯示在
實驗設定的範圍中，採用主從架構的異質平行搜尋法具備良好的線性加速性
(linear speedup)，可以藉由增加從動節點的數量，來縮短運算的時間。而演算法
中分支界線法與塔布搜尋法的比例以 1:3 為較佳的選擇。
41
Gill, S. (1958),“Parallel programming”, The Computer Journal, Vol.1, pp.2-10.
Glover, F. (1989),“Tabu search–part I”, ORSA Journal of Computing, Vol. 1, No. 3,
pp. 190-206.
Gendron, B. and Graninic, T. G. (1993), “A parallel branch-and-bound algorithm for
multicommodity location with balancing requirements”, INFOR, Vol. 32, No. 3,
pp. 151-165.
Gndron, B. and Grainic, T. G. (1994), “Parallel branch-and-bound algorithms: survey
and synthesis”, Operations Research, Vol. 42, No. 6, pp. 1042-1066.
Goldbreg, D. E. and Lingle, Jr. R. (1985), “Alleles, loci and the traveling salesman
problem”, Proceeding of an International Conference on Genetic Algorithm and
Their Application, pp. 160-180.
Greening, D. R. (1990),“Parallel simulated annealing techniques”, Physica D, Vol. 42,
pp. 293-306.
Gustafson, J. L. (1988), “Reevaluating Amdahl’s Law”, Comm. ACM, Vol. 32, No. 1,
pp. 532-533.
Holland, J. H. (1975), Adaptation in natural and artificial system, University of
Michigan Press.
Janakiram, V. K., Agrawal, D. P., and Mehrotra, R. (1988), “A Randomized Rarallel
Backtracking Algorithm”, IEEE Trans. Comp., Vol. 37, No. 12, pp. 1665-1676.
Jonas, K. and Zulio, S. A. (1997), “Parallel simulated annealing: an adaptive
approach”, 1997 IEEE 11th International Parallel Processing Symposium,
Geneva, SWITZERLAND.
Karp, R. M. and Zhang, Y. (1988), “A randomized parallel branch-and-bound
procedure”, Proc. ACM Symp. Theory Comput., pp. 290-300.
Kirkpatick, S. T., Gelett, Jr. C. D., and Vechhi, M. P. (1983), “Optimization by
simulated annealing”, science, Vol. 220, pp. 671-680.
Kumar, V. and Kanal, L. N. (1984), “Parallel branch-and-bound formulations for
AND/OR tree search”, IEEE Trans. Pattern Anal. And Mach. Intel., Vol. PAMI-6,
No. 6, pp. 768-778.
Laursen, P. S. (1993), “Simple approach to parallel branch and bound”, Parallel
Computing, Vol. 19, pp. 143-152.
Lawler E. L. and Wood, D. E. (1966), “Branch-and-bound methods: a survey”,
Operations Research, Vol. 14, pp. 699-719.
Marin, F. O., Treelles-Salazar, O., and Sandoval, F. (1994), “Genetic algorithms on
lan-message passing architectures using PVM: application to the routing
