choose web services at run time. The choosing is a kind 
of negotiation. It uses trust negotiation [13] to select web 
services that can be invoked. The kernel component to 
determine whether a web service can be invoked is 
credential. The model in [14] uses digital credentials for 
negotiation. It defines strategies for negotiation policies. 
The model in [15] handles k-leveled invocation of web 
services. The primary component used in the model is 
credentials. 
According to our survey, existing models generally 
statically determine whether a requester can invoke a web 
service. As to dynamically preventing information 
leakage during web service execution, they do nothing. 
 
III. THE MODEL 
 
Our previous work uses two time-consuming rules and a 
complicated join operator to control every variable access 
[3]. This results in large runtime overhead. In our opinion, 
sending sensitive information to a web services may be 
unavoidable. However, requesters may not send too much 
sensitive information to web services according to 
security consideration. For the web services whose 
providers are not trusted by a requester, the requester may 
even send no sensitive information to the web services. 
To reduce runtime overhead, our model WSIFC controls 
only the access of sensitive variables. 
WSIFC is based on lattice. A lattice is a partial 
ordered graph consisting of a min-node and a max-node. 
If a lattice is used to control information flows, the 
min-node possesses the least privileges while the 
max-node possesses the most ones. The traditional 
lattice-based model uses the “no read up” and “no write 
down” rules to control information flows (note that the 
“can flow” relationships in [1] inherits the spirit of the 
two rules). If the security levels of sensitive information 
are structured using the lattice model and the two rules 
are obeyed, no information leakage will occur. However, 
the traditional lattice-based information flow control 
model is a MAC (mandatory access control), which is 
criticized as too restricted. To loosen the restriction, 
WSIFC only places sensitive variables in a lattice and 
uses simple rules to replace the restricted “no read up” 
and “no write down” rules. 
Before formally defining WSIFC, we first describe 
information leakage in more details. Generally, 
information leakage occurs when malicious persons or 
web services illegally obtain others’ sensitive information. 
In general, persons can obtain information from screen or 
files, and web services can obtain information from files 
or other web services (either executing on the same site or 
on the other ones). Information leakage may thus happen 
when: (a) sensitive information is output to screens or 
files or (b) sensitive information is transferred to other 
web services. In our research, we suppose information 
transferring on the network is secure and thus skip the 
problem of cryptography. We also skip the effect of 
viruses and worms because they are out of the scope of 
our research. Below we turn our focus back to WSIFC. 
WSIFC uses security levels to decide whether an 
instruction may leak sensitive information during the 
execution of a web service. It attached a security level to 
every sensitive variable. Since a lattice is partial ordered 
and WSIFC is lattice-based, security levels should also be 
partial ordered. To achieve this, a security level in WSIFC 
is defined as: (Gp, security level number), in which Gp is 
a group number and security level number decides the 
sensitivity of the variable. To compare or exchange 
information associated with security levels, the 
information should be within the same group, which 
achieves partial ordering. Partial ordering is necessary 
when variables are incomparable. For example, a variable 
storing an American’s salary with a unit of USD cannot 
be compared with one storing a Taiwanese’s salary with a 
unit of NTD. 
According to the above description, the group 
number in a security level achieves partial ordering and 
the security level number decides the sensitivity of a 
variable. A security level number is between 0 and n, in 
which 0 means the less sensitive information and n the 
most sensitive one. The number n is decided by the user, 
in which larger n results in finer-grained control. In 
addition to security level, a sensitive variable is also 
associated with a tag, which is a set. A component in the 
set is an IP address plus a port number pair (port numbers 
represent web services in the IP). Tag decides whether 
sending information of a sensitive variable to another web 
service is secure. If the IP address plus port number pair 
of a web service is within a sensitive variable’s tag, 
information of the variable can be sent to the web service. 
By now we have discussed sensitive variables. As to 
non-sensitive ones, they possess neither security levels 
nor tags. That is, non-sensitive variables are not placed in 
a lattice. Nevertheless, the security level and tag of a 
variable may be adjusted during web service execution, 
which implies that a non-sensitive variable may become 
sensitive and vice versa during runtime. For example, 
after executing the statement “a=b;”, the security level 
and tag of variable a is adjusted to be the same as those of 
b. If b is sensitive, a becomes sensitive. 
As mentioned before, sensitive information 
managed by a web service may be leaked only when: (a) 
it is output to files or screens or (b) when it is transferred 
to other web services. The latter case of leakage can be 
prevented by tags associated with sensitive variables. To 
achieve the former leakage prevention, every file and 
screen that may receive output information should also be 
associated with a security level. Generally, the security 
level of a screen is decided by its location. The only 
possibility of changing a screen’s security level is 
changing its location. However, changing screen location 
is only known by persons and web service will never 
know that. Therefore, the security levels of screens will 
be unchanged during web service execution. As to files, 
their security levels also cannot be adjusted because the 
adjustment will affect the access of the existing 
information within the files. For example, if the security 
level number of a file is 3, it can be accessed by a user 
c. tagi is the tag of the sensitive variable vari. 
 
Rule 2 may confuse many readers because it 
completely violates the “no read up” and “no write 
down” rules of the traditional lattice-based model. 
In addition, it controls neither read nor write access. 
We explain Rule 2 as follows. Before that, we 
make a crucial assumption, which is: every data 
assigned to a variable is reliable. 
Existing information flow control models 
generally do not allow information with high 
security level to be assigned to low security level 
variable. On the other hand, WSIFC allows every 
assignment. To prevent leakage when sensitive 
information is output, WSIFC changes the security 
level and tag of a variable receiving a value as 
mentioned above. Suppose variable d_var is 
assigned a value derived from a sensitive variable 
set {vari}. Then, the security level number of 
d_var     wi l l     be     changed    to 
))(( )(var
1iSLVMAX
n
i= . According to the 
change, the security level of d_var will be 
upgraded if the initial SLV(d_var) is smaller 
than ))(( )(var
1iSLVMAX
n
i= . The upgrading 
prevents the variable d_var from being leaked. On 
the other hand, if the initial SLV(d_var) is larger 
than ))(( )(var
1iSLVMAX
n
i= , the security 
level of d_var will be downgraded. Under this 
situation, the information obtained by d_var will 
also not be leaked. According to the crucial 
assumption “every data assigned to a variable is 
reliable” mentioned above, both read and write 
access are secure according to Rule 2. 
Below we use the statement “a=b+c+d;” to 
explain Rule 2 (here we bypass the discussion of 
tags, which will be discussed in Rule 6). Suppose 
the initial security levels of the variables a, b, c, d, 
are respectively (1,1), (1,2), (1,3), and (1,4). In this 
case, the security level of the variable a is the 
smallest and existing information flow control 
model will ban the assignment. However, WSIFC 
allows the above statement to execute. After the 
execution, WSIFC changes the security of variable 
a to be (1,4). According to the change, the security 
level of variable a have been upgraded and 
therefore no information leakage will occur. On the 
other hand, if the initial security level of variable a 
is (1,5), the security level of variable a will be set 
(1,4) after the assignment. 
Rule 2 will become non-secure only when the 
above crucial assumption isn’t fulfilled. In this 
case, low security level variables may maliciously 
corrupt the information carried by high security 
level variables (note that even in this case, no 
information leakage will occur). We cannot 
estimate the possibility of the corruption. However, 
as the assumption is a compromise to reduce 
runtime overhead, taking risk is unavoidable. We 
think that making a compromise to bypass write 
check in Rule 2 is acceptable because the 
compromise may only corrupt but not leak 
information. Since the primary objective of WSIFC 
is preventing information leakage, a compromise 
that will not hurt the primary objective is not that 
serious. 
Rule 3. To output the information of a sensitive variable 
SVAR to a screen SCRN, SLV(SCRN) should be at 
least as large as SLV(SVAR). Remember that the 
function SLV extracts a sensitive variable’s security 
level number. This rule avoids high sensitive 
information to be captured by persons that can only 
read low sensitive information from a screen. 
Rule 4. If a variable VAR intends to read information 
from a file FLE, the reading operation is allowed. 
After the reading, the security level and tag of VAR 
should be set the same as those of the information 
read from FLE. The spirit of this rule is the same as 
Rule 2, because reading a value from a file 
corresponds to deriving a value from the file and 
then assigning the value to the variable. 
Rule 5. If a sensitive variable VAR intends to write its 
information to a file FLE, SLV(FLE) should be at 
least as large as SLV(VAR) . Reading and writing a 
file are totally different. When reading information 
from a file to a variable, the information being read 
can be protected as long as the security level and tag 
of the variable are set the same as the information. 
On the other hand, since the security level of a file 
cannot be changed as mentioned before, writing 
information with high security level to a low 
security level file may result in information leakage. 
Rule 6. To send the information of a sensitive variable to 
another web service, the service’s IP address plus 
port number pair should be within the tag of the 
variable. In the sending operation, the information 
and the security level of the variable should be sent 
together so that the web service receiving the 
information can protect the information using 
WSIFC. 
 
IV. PROOF OF CORRECTNESS 
 
Information leakage may occur under the following cases: 
(a) the information of a variable is output to a screen, (b) 
the information of a variable is output to a file, and (c) the 
information of a variable is sent to web services in other 
sites. The above cases reveal that information leakage 
may occur only when variable contents are output 
(sending information to other sites can be considered a 
every service invocation is difficult. Perhaps this is 
the most serious problem to solve because requiring 
every service provider to be honest is almost 
impossible. 
 
There are still other problems. We do not intend to 
discuss more because many problems are not within the 
technical area but within the human management area. 
We think that the problems are out of the scope of our 
research. 
 
VI. CONCLUSION 
 
Many researchers designed mechanisms to ensure secure 
access of web services. According to our survey, existing 
models generally statically decide whether a requester 
can invoke a web service but ignore the importance of 
dynamically preventing information leakage during web 
service execution. This paper proposes an information 
flow control model WSIFC (web service information 
flow control) for the prevention. WSIFC is based on 
lattice. The traditional lattice-based information flow 
control model is a MAC (mandatory access control) and 
is criticized as too restricted. To overcome this, WSIFC 
uses simple rules to replace the “no read up” and “no 
write down” rules for MAC. To reduce runtime overhead, 
WSIFC only monitors the flows of sensitive information 
using simple rules.  
WSIFC should be embedded in every web service. 
If a web service does not embed the model, information 
leakage may occur when the web service is invoked. 
Since web services are provided by providers around the 
world, we cannot require every provider to embed 
WSIFC in their web services. This is a problem almost 
without solution. Perhaps the software world needs a 
standard for embedding an information flow control 
model in every web service. If the standard is finally 
defined, we hope that the important concepts proposed by 
WSIFC can be used. 
 
REFERENCES 
[1] Denning, D. E., 1976. A Lattice Model of Secure Information Flow. 
Comm. ACM, vol. 19, no. 5, 236-243. 
[2] Chou, S. –C., 2004. Embedding Role-Based Access Control Model 
in Object-Oriented Systems to Protect Privacy. Journal of Systems 
and Software, 71(1-2), 143-161 
 
 
 
 
 
 
 
 
 
 
 
 
 
[3] Chou S. –C., and Huang, C. –H., 2010. An Extended XACML 
Model to Ensure Secure Information Access for Web Services. 
Journal of Systems and Software, vol. 83, no. 1., 77-84. 
[4] OASIS, 2003. eXtensible Access Control Markup Language 
(XACML) Version 1.0. OASIS Standard 18. 
[5] Shen, H. -B., Hong, F., 2006. An Attribute-Based Access Control 
Model for Web Services. IEEE International Conference on 
Parallel and Distributed Computing Applications and 
Technologies (PDCAT'06), 74-79. 
[6] Bhatti, R., Bertino, E., Ghafoor, A., 2004. A Trust-based 
Context-aware Access Control Model for Web Services. IEEE 
ICW’04, 184 – 191. 
[7] Bhatti, R., Ghafoor, A., Bertino, E., Joshi, J. B. D., 2005. 
X-GTRBAC: An XML-Based Policy Specification Framework 
and Architecture for Enterprise-Wide Access Control. ACM 
Transactions on Information and System Security, Vol. 8, No. 2, 
187 – 227. 
[8] Bertino, E., Bonatti P. A., Ferrari, E., 2001. TRBAC: A Temporal 
Role-Based Access Control Model. ACM Transactions on 
Information and System Security, Vol. 4, No. 3, 191 – 233. 
[9] Seamons, K. E., Winslett, M., Yu, T., 2001. Limiting the Disclosure 
Access Control Policies during Automated Trust Negotiation. 
Network and Distributed System Security Symposium. 
[10] Wonohoesodo R., Tari, Z., 2004. A Role Based Access Control for 
Web Services. Proceedings of the 2004 IEEE International 
Conference on Service Computing, 49-56. 
[11] Sandhu, R. S., Coyne, E. J., Feinstein, H. L., Youman, C. E., 1996. 
Role-Based Access Control Models. IEEE Computer, vol. 29, no. 
2, 38-47. 
[12] Skogsrud, H., Benatallah, B., Casati, F., 2004. Trust-Serv: 
Model-Rriven Lifecycle Management of Trust Negotiation 
Policies for Web Services. International World Wide Web 
Conference, 53-62. 
[13] Yu, T., Winslett, M., Seamons, K., 2003. Supporting Structured 
Credentials and Sensitive Policies through Interoperable Strategies 
for Automated Trust Negotiation. ACM Transactions on 
Information and System Security, vol. 6, no. 1, 1-42. 
[14] Koshutanski, H., Massacci, F., 2005. Interactive Credential 
Negotiation for Stateful Business Processes, Lecture notes in 
computer science, 256-272. 
[15] Mecella, M., Ouzzani, M., Paci, F., Bertino, E., 2006. An Access 
Control Enforcement for Conversation-based Web Services. 
International World Wide Web Conference, 257-266. 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/13
國科會補助計畫
計畫名稱: 網路服務程式之路徑再利用技術,安全控管模式,及品管模式之研究
計畫主持人: 周世杰
計畫編號: 99-2221-E-259-008- 學門領域: 程式語言與軟體工程
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
