成功的軟體都是具有很高技術的小團隊和個人動
機。 
 螺旋模型[4] 
螺旋中的每一圈代表軟體過程的一個階段。螺
旋模型和其它的軟體過程模型最大的不同之處在
於螺旋模型明確的考慮了風險。它使得不同的選擇
和風險清楚的表示出來，並且迫使管理者不得不去
考慮所有的可能性。但其缺點是缺乏明確的方法來
找出下一階段所需要達成目標的各種方法以及這
些方法的限制，和其它的替代方案。 
 雛型法(prototyping)模型[5] 
此模型的做法最大的優點是可以確實掌握客
戶的需求，靈活的做修改。在傳統的程式設計中，
雖然也有強調雛型系統的重要，但是，還是不如採
用物件導向技術來的容易建構、修改雛型系統。 
 
2.2 設計樣版(Design Patterns) 
自Gamma et al [6]提出設計樣版 (Design 
Patterns)之後，設計樣版的應用常被定位在解讀性
高，快速建置軟體架構上，在Gamma et al列舉出了
三大類設計模版，這些設計模版都可以應用在像是
資料結構、事件觸發處理、訊息的傳遞等等常見的
設計，加強了系統在設計時的可讀性及可再利用
性。設計樣版便成為幫助在特殊應用領域中瞭解軟
體元件中共有的架構與設計概念格式的基礎。 
2.3 UML (Unified Modeling Language) 
統一模式語言 (UML)[7]是一種 Modeling 
Language，結合了G. Booch，J. Rambaugh，與I. 
Jacobson 三人的物件導向方法論所提出的一種物
件導向語言(OO Language)，並被OMG 納入為標
準。發展至今(OMG UML v2.0)已經包含了類別圖
等13 種圖形用來描述軟體開發過程不同階段的抽
象概念，也因此UML已成為物件導向軟體開發的
一項重要的技術。目前UML 已成了一種通用的物
件導向語言(Object Oriented Language)，廣為被應
用在各類系統的描述及設計上，成為一種溝通設計
理念的語言。 
 
2.4 XML  
3C (World Web Consortium)於1998年初公佈
了XML（eXtensible Markup Language）的標準，提
供了一個可自訂標示名稱功能的標記語言(Markup 
Language)，使用者可以很容易的運用XML在網路
上自行製作所需要的文件內容及格式，並廣泛的發
展不同層次的應用[8]。XML不但具有標記語言的
特性外，也可以視為是中介語言(meta-language)，
因為它可以讓建置者自行定義語法規則，亦即透過
定義的延伸，指定標籤的語法，而不是端視標籤本
身的定義[9]。此外，因為具有meta-language的特
性，XML也被常用於描述各種領域應用。 
 
三、調適化軟體發展程序 
軟體開發過程中，從需求分析、設計、實作到
測試階段，甚至於軟體架構、設計概念、程式碼等，
應當也存在不少許多類似設計樣版般的基礎物
件，在此我們稱之為「軟體析解整合模型，
SEEM」，若我們能找出軟體開發過程中，每一階
段所使用的軟體標準的模組元素，先分析出最基本
結構，再將這些模組萃取之後予以封裝與解封裝、
並加入正規化的描述後，再透過模組識別與擷取以
及差異性分析，最後提供使用者再組裝成其所需元
件，使其充分運用各種軟體模組，達成從架構、設
計、程式與資料再使用之全方位再使用的目標。 
此外在整個分析、識別、擷取、重組的過程中，
也可以幫助程式開發人員再三檢視系統需求是否
正確，同時補充前一階段仍欠缺的規格，減少因為
程式開發人員經驗關係造成的需求描述不正確，以
致於最後軟體不符合需求，抑或軟體品質受到影
響，進一步提升軟體品質，同時由於設計的多樣
化，可能無法找到完全適合的軟體模組，透過每次
分析、擷取、重組的過程，將新產生的設計模組保
存下來，供日後系統開發時再使用，因此我們將這
個軟體開發程序，稱之為「調適化軟體發展程序，
(Adaptive Software Evolution Process)」。 
 
Software 
Evolution 
Elemental
Module
(SEEM)
Requirem
ent Analysis
Software Implementation
Sof
twa
re T
esti
ng
Sof
twa
re D
esig
n
Module 
Formalization
Mod
ule
Reco
nfigu
ratio
n
M
od
ul
e
 In
te
gr
at
io
n
 
圖 1. Adaptive Software Evolution Process 
 
圖1所描述的，就是本論文的中心概念，軟體
開發過程中每一階段所需及所建立的物件，都會與
其他階段互動；而每一階段所需要的模組，透過
Module Integration，從模組庫中選取出適當模組，
若 選 取 模 組 未 臻 合 適 ， 再 透 過 Module 
Reconfiguration加以重組，而新產生的模組，透過
Module Formalization的程序轉換成可再用的模組
元素，再回存到模組庫，供日後設計時使用，這個
結合Module Integration、Module Reconfiguration、
Module Formalization的架構，透過析解系統開發過
程中所需的模組，讓系統開發人員的焦點專注到核
心部分，讓系統開發人員逐步地明確定義系統需
求，因此我們稱之為Software Evolution Elemental 
Module (SEEM)。而扮演串接模組與軟體開發過程
立一個可析解整合表示格式，對於這個模式，在我
們先前的研究中所提出的以XML為基礎之軟體整
合模型-XUM提供了良好的格式，在此我們修正了
原本XUM著重在於軟體範例(software paradigm)與
元件間的整合與追蹤，進一步到個別元素特性的描
述，以支援軟體析解整合模型特性。 
Component Model 與  XML tag對應如Table 
2， 本研 究依 據 ORES(On-line Repository for 
Embedded System)[10]與BOTS[11]定義應用領域
分類所需依循的標籤及限制和參數問題等描述標
籤，並包含元件間溝通關係使用經驗儲存的標籤。 
Table 2 Component Model 與 XML tag 對應表 
 
 
四、研究案例 
本研究個案探討為利用符合樂高(LEGO)公
司所開發的標準教學模型 LEGO MINDSTORMS 
NXT 機器人開發套件(公司產品編號:9797)軟體系
統。 
 
圖 4. 系統介面圖 
圖 4為 SEEM元件儲存系統介面。 
系統元件檢索 
Step 1. Input Component Information Roles and 
Component Information XML Structure 
系統元件檢索主要依據系統文件描述來進行
條件檢索，利用本研究提供的使用者介面輸入範例
檢索條件，如下圖 5 ，利用上述制定的四項文件
提供元件檢索所需要的條件。 
 
圖 5.系統檢索圖(條件輸入) 
Step 2. List Conformed Components and Component 
Information 
依據檢索條件輸入到系統檢索畫面中，並且
按下檢索鍵，即可檢索到所有符合輸入條件限制的
元件。 
 
圖 6. 檢索結果 
 
圖 7為元件所表示成整合描述模型之 XML資訊。 
 
圖 7. 可再用元件之 SEEM 之 XML資訊表示 
 
五、結論與未來工作 
在本年度的計畫進程中，我們完成了基本可
