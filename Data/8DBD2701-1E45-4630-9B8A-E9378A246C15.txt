performance of IPTV can be improved significantly. In 
this project, we study and implement a ’dynamic 
bandwidth detection and traffic control mechanism’ 
on an industrial IPTV product to achieve the above 
goal. We use the principle of Kalman filter to design 
the mechanism. From the practical tests and 
evaluations, the proposed mechanism can indeed 
improve the performance of IPTV streaming and make 
the streaming playing more smoothly on receivers. 
英文關鍵詞： Real-time data streaming, Packet Loss, Delay Jitter, 
Dynamic Bandwidth Detection and Traffic Control 
Mechanism, Kalman Filter 
 
 II
行政院國家科學委員會專題研究計畫成果報告 
 
利用卡爾曼濾波器在802.11網狀網路中針對即時性多媒體串流研製動態頻寬偵測
與流量控管機制 
  
Using Kalman Filter to Study and Implement a Dynamic Bandwidth Detection and Traffic 
Control Mechanism for Real-time Multimedia Streaming in 802.11 Mesh Networks 
 
計畫編號：NSC 99-2221-E-030-013 
執行期限：99年8月1日至100年10月31日 
主 持 人：莊岳儒 助理教授 輔仁大學電機工程系 
 
中文摘要 
近年來，多媒體應用在網路上越來越熱門，
而在整個網路的流量中「即時性資料串流」(如
IPTV串流、影像串流、VoIP串流與即時線上遊戲
等)亦佔了一個重要的比例。以IPTV為例，目前在
業界的IPTV產品中，影像與聲音的資料可以先利
用H.264編碼壓縮技術先行編碼後，再以RTP串流
協定傳送至網際網路中。因此，使用者可以在他
們的辦公室裡透過有線或是無線網路來觀看他們
家中的電視節目。然而，由於目前的網際網路架
構針對此類型的即時性應用無法提供有效的服務
品質，所以在網際網路擁塞或訊號受干擾的環境
下，此類型應用的表現效果常常不佳。當網際網
路流量被擁塞或干擾時，資料封包的遺失與延遲
變異度會相當的劇烈。因此，如果IPTV傳送端可
以即時的偵測或預測出當時網際網路的狀況，並
聰明的控制其資料傳輸速率，此IPTV的表現效果
可以被大幅的改善。在本研究計畫中，我們在一
台業界的IPTV產品上研製一個「動態頻寬偵測與
流量控管機制」來達到上述的目的。我們利用卡
爾曼濾波器的原理來設計此機制。從實際的測試
與評估得知，此提出的機制的確可以改善IPTV串
流的表現效果，並使接收端的串流播放更順暢。 
 
關鍵詞：即時性資料串流、封包遺失、延遲變異
度、動態頻寬偵測與流量控管機制、卡爾曼濾波
器。 
英文摘要 
Recently, multimedia applications become more 
and more popular, and “real-time data streaming” 
(such as IPTV streaming, video streaming, VoIP 
streaming, and real-time on-line games, etc.) also 
occupy an important proportion of network traffics. 
An example of IPTV, in current industrial IPTV 
products, the video and audio data can be first 
encoded using the H.264 encoding and compressing 
technique and then delivered using the RTP 
streaming protocol in Internet. Hence, users can stay 
at their offices and watch the TV programs sent from 
homes via wire or wireless networks. However, 
because the current Internet architecture cannot 
provide sufficient QoS for such kind of the real-time 
applications, the performances of them are often 
poor under congested or interfered Internet 
environment. When Internet traffics are congested or 
interfered, the packet loss and delay jitter are severe. 
If the IPTV sender can detect or predict Internet 
condition in time and smartly control its data 
transmissions, the performance of IPTV can be 
improved significantly. In this project, we study and 
implement a “dynamic bandwidth detection and 
traffic control mechanism” on an industrial IPTV 
product to achieve the above goal. We use the 
principle of Kalman filter to design the mechanism. 
From the practical tests and evaluations, the 
proposed mechanism can indeed improve the 
performance of IPTV streaming and make the 
streaming playing more smoothly on receivers. 
 
Keywords: Real-time data streaming, Packet Loss, 
Delay Jitter, Dynamic Bandwidth Detection and 
Traffic Control Mechanism, Kalman Filter. 
Esti_value = Init_value×(1–frame_loss_rate),    (1) 
where Init_value is the initially default transmission 
rate. 
The second and third are random deviations. 
They can be denoted as GX (X = 1 and 2), which are 
randomly selected from the Gaussian distribution, 
and are also called the white Gaussian noise (WGN). 
Thus, the initial covariance (PCOV) can be derived 
from these two deviations (G1 and G2), and is 
presented in equation (2). 
2
2
2
1 GGPCOV += .            (2) 
After the initial PCOV is obtained, then we can 
calculate the Kalman gain (Kg). 
22
2
XCOV
COV
GP
PKg +=
,            (3) 
where GX can be G1 or G2 (random selection). After 
the Kg is determined, the predicted value 
(Kalman_value) of transmission rate at this time can 
be calculated as follows. 
Kalman_value = Init_value+(Kg)× 
(Esti_value–Init_value).       (4) 
At this time, if Kg is equal to 1, the obtained 
Kalman_value is the optimally predicted value. 
Otherwise, the Kalman covariance (Kalman_Cov) of 
this predicted value should be obtained. 
2)1(_ COVPKgCovKalman ×−= .       (5) 
Using the Kalman_Cov, the Pcov could be updated 
as follows. 
22 _ CovKalmanGP XCOV += ,       (6) 
where GX can be G1 or G2 (is random selection). The 
recursive processes are continuously executed from 
(3) to (6) until the obtained Kg is 1 (or approach to 
1). Then the optimally predicted value 
(Kalman_value) is obtained and the video streaming 
server can use it to transmit its data. 
3. Implementation of Traffic Prediction and 
Flow Control Mechanism 
When video streaming is forwarded in networks, 
it may suffer from frame loss and delay jitter, which 
cause that receivers cannot play the video smoothly 
and image lag occurs. Hence, we adopt Kalman 
filter principle to design and implement a traffic 
prediction and flow control mechanism to solve the 
above problems. The original idea comes from the 
auto bit rate function proposed in paper [7]. When 
the network traffic is light, receivers can play video 
streaming smoothly without using auto bit rate 
function. However, when the traffic begins heavy, 
receivers cannot play it smoothly anymore, and the 
auto bit rate function is enabled. Auto bit rate 
function can help the video streaming server 
automatically finding a suitable data transmission 
rate. But we found that the auto bit rate function has 
drawbacks. Although the video streaming server can 
adjust transmission rate to adapt networks status, it 
still needs to take a long time (about ten seconds) to 
recover the lagged image on the receiver. That is, the 
recovery time is too long. Moreover, the predicted 
transmission rate is often not precise, and it then 
causes the problem of long recovery time more 
severe. Here, our mechanism can improve the above 
two drawbacks, and is introduced in the following 
three subsections. 
3.1. Raising Feedback Frequency of Reports 
For the video streaming client-server architecture, 
the client (user) is initially set to report its detected 
frame loss ratio to the video server per three seconds. 
The frame loss ratio is obtained via dividing the 
actual number of received frames by the expected 
number of received frames in the client. When video 
server finds that the received frame loss ratio 
exceeds a predefined threshold value, it will start to 
enable the flow control mechanism. 
After the test and measurement, we find that the 
feedback frequency of the client’s reports may not 
be fast enough. Namely, the video server cannot be 
aware of the current network status and adjust 
transmission rate in time. Therefore, we raise the 
feedback frequency of reports to once per second. 
However, the high feedback frequency may also 
have a problem. That is the delay jitter becomes 
more sensitive in the client. The client may report a 
high frame loss ratio back to the video server, but 
some frames are just delayed a little time to reach 
the client, and the actual network traffic is not heavy 
so much (congestion is not severe so much). 
To solve the above problem of high feedback 
frequency, the video server adopts the modified 
mechanism with three steps to process these 
received frame loss information. First, if the 
received frame loss ratio is higher than the 
threshold_1, then the flow control is enabled 
immediately to set a new transmission rate. Second, 
 4
(receiver) (including a receiving PC, TV Anywhere 
player, and Netlimit program), as shown in Fig. 1. 
The RS232-USB connector provides a console 
control from PC to server for embedded system 
development and measurement. The PC runs 
NetTerm program to login the video server and 
perform consol control to monitor the system 
situation. 
The video streaming server uses H.264 codec to 
encode the video data sent from the video camera 
and transmits them into Internet. In tests, a PC plays 
a VCD image instead of the video camera to 
generate large video data. In the client, a receiving 
PC uses the TV Anywhere program to receive, 
decode, and play the video streaming. Using the TV 
Anywhere, our proposed mechanism can be enabled 
by setting the item of Auto Bitrate on the program. 
Besides, the TV Anywhere can also report 
information of frame loss ratio back to the video 
server periodically. The Netlimit program can 
provide the function of available bandwidth control 
to simulate various network congestion conditions. It 
is also installed in the receiving PC. 
4.2. Measurement Results 
When the Netlimit is used to limit network 
bandwidth, the frame loss occurs in this 
measurement system. In Fig. 2(a), the client reports 
frame loss ratio once per 3 seconds, and the recovery 
time of image lag is about 9 to 12 seconds. In Fig. 
2(b), the periodically reporting interval is shortened 
to one second, and the recovery time of image lag is 
about 6 to 8 seconds. Comparing Fig. 2(a) and Fig. 
2(b), we can find that when the feedback time 
interval is shortened from 3 to 1 second, the 
recovery time is also shortened. However, due to the 
sensitivity problem of delay jitter as mentioned 
above, the calculated transmission rate in the server 
has vibration situation. Hence, the modified 
mechanism described in subsection A of Section III 
is used. From Fig. 2(c), we can find that the 
modified mechanism can reduce the vibration 
situation, and the recovery time can be still keep in 6 
to 8 seconds. 
In Fig. 3, the performance of raising data rate 
mechanism mentioned in subsection B of Section III 
is presented. The white line A means the initially 
predefined transmission rate, and it is 125KBps 
(kilo-byte per second). The white line B means the 
adjusted transmission rate after the frame loss occurs, 
and it is 80KBps. During a transmission period, 
there is no frame loss, and the video server starts to 
try to raise the transmission rate at the two green 
points. Finally, the adjusted transmission rate is 
stable on the white line C. 
 
 
(a) Reporting once per 3 seconds. 
 
(b) Reporting once per 1 second. 
 
(c) Using the modified mechanism for reporting 
once per 1 second. 
Fig. 2. Performances comparison of different 
feedback frequencies. 
 
 
 
Fig. 3. Measurement result of using the raising data 
rate mechanism. 
 
In Fig. 4 and Fig. 5, we display the effects of 
Stop mechanism in high and low available 
bandwidth situations. To simulate high bandwidth 
situation, the Netlimit program is used to limit the 
network bandwidth up to 100KBps (the white line 
L), as shown in Fig. 4. The initially predefined 
transmission rate is set to 125KBps. When the server 
starts to adjust its transmission rate, the recovery 
time is about 2 to 4 seconds (circle A). We improve 
the lag time from more than 6 seconds to average 3 
seconds. Then the finally stable transmission rate is 
about 73.62KBps. The circles B and C mean that 
 6
 8
Addison-Wesley 5/E, 2009. 
[3] D.E. Catlin, “Estimation, Control, and the 
Discrete Kalman Filter,” Springer-Verlag, 
Applied Mathmatical Sciences, vol. 71, 1989. 
[4] S. Dan, “Kalman Filtering,” Embedded 
Systems Programming, Jun. 2001. 
[5] K.K. Leung, J.H. Winters, and L.J. Cimini, Jr., 
“Interference Estimation with Noisy 
Measurements in Broadband Wireless Packet 
Networks,” IEEE Vehicular Technology 
Conference, vol. 2, pp. 1125-1129, Oct. 2001. 
[6] R.E. Kalman, “A New Approach to Linear 
Filtering and Prediction Problems,” Journal of 
Basic Engineering (ASME), 82D, pp. 35-45, 
Mar. 1961. 
[7] C.-M. Yang and W.-T. Lee, “The Research and 
Adaption H.264 Video Transmission Based on 
Bandwidth Auto Detection,” Master Thesis of 
Tamkang University, Taiwan, Jun. 2007. 
[8] Yue-Ru Chuang, Chia-Sheng Hsu, and Je-Wei 
Chen, “Implementation of a Smart Traffic 
Prediction and Flow Control Mechanism for 
Video Streaming,” in Proc. IEEE 
IIH-MSP-2010, pp. 240-243, Oct. 2010. 
[9] Yue-Ru Chuang, Chia-Sheng Hsu, and Je-Wei 
Chen, “Implementation of an Intelligent 
Prediction and Control Mechanism with 
Kalman Filter for IPTV Streaming,” Fu Jen 
Studies (Science and Engineering), no. 43, Dec. 
2009. 
 
10月 17日有一場主題演講、九場口頭報告會議及三場海報會議。此場主題演講的主題是情
緒智能與機械智能，探討人類因各種情緒而改變的表情辨識，情緒智能技術包括精確理解情緒，
了解情緒所展現的意義並根據情緒來幫助決策。接著我選擇了高效率影音編碼與傳輸的會議，其
中有一主題是強健的影音傳輸基於網路編碼，主要是使用一個動態隨機網路模式配合帕森分布來
傳送到網路。海報展示會議則是對於雲端運算，資訊安全，演算法，多媒體智能等都有主題報告。
 
二、與會心得： 
 
此次會議除了讓自己能發表研究成果也讓我學到一些相關領域的研究，更看到許多新的技術
與各種不同的研究方法，無論是對多媒體影音串流流量控制的研究，或者是影像處理壓縮與生物
辨識等技術的演進。本次研討會的會議場次很多，沒辦法全部去聽完，不過可以從論文集光碟裡
面看到其他在本次會議沒聽到的論文，也有一些不錯的論文可以參考。相信這些學者專家的研究
會讓智能訊息隱藏，多媒體訊號處理，多媒體資料傳送網路，資料安全，生物檢測，人臉辨識等
領域更加精進。在本次研討會學習到很多，希望往後的研究也能繼續完成並向外發表。 
 
三、考察參觀活動(無是項活動者省略)。 
 
四、建議： 
 
希望在台灣也能舉辦更多的大型國際研討會。此舉不僅可以讓在台灣的學校學生更容易參與
學習，也可提升台灣的國際地位，促進學術交流的發展。 
 
五、攜回資料名稱及內容： 
 
1. IIH-MSP手冊：內容包含 IIHMSP2010簡介，會議主席，會議日程表，會議場地展示圖，
主題演講者及其演講主題，各個會議的主題以及場地，各個會議主席，每場會議包含的論文與演
講者，附近餐廳地圖，附近觀光點地圖，大眾運輸路線圖。 
2. IIH-MSP論文集光碟片：內容包含研討會介紹，組織成員，著作權聲明稿，論文目錄，此
會議所有論文內容，作者索引，發行者資訊。本光碟片開啟後便可查看此會議的論文。 
 
六、其他： 
 
感謝國科會計畫的補助與支持，讓本研究得以順利進行，也讓本人得以出席本次國際會議。
 
 
 
 
 
 
 
 
Implementation of a Smart Traffic Prediction and Flow Control Mechanism for 
Video Streaming 
Yue-Ru Chuang, Chia-Sheng Hsu, and Je-Wei Chen 
Department of Electronic Engineering, 
Fu Jen Catholic University, Taiwan, R.O.C. 
 
Abstract—Recently, all-IP intelligent video surveillance/door 
system is one of the attractive and important applications in 
the world. However, because the current Internet architecture 
cannot provide sufficient QoS for such kind of real-time 
applications, the performances of them are often poor under 
congested or interfered Internet environment. When Internet 
traffics are congested or interfered, the frame loss and delay 
jitter of video streaming are severe. In this paper, we design 
and implement a smart traffic prediction and flow control 
mechanism on an industrial video streaming product to 
improve the above problems. Here, we adopt the principle of 
Kalman filter to design the mechanism. From the practical 
tests and evaluations, the proposed mechanism can indeed 
improve the transmission performance of video streaming and 
make the streaming playing more smoothly on receivers. 
Keywords-video surveillance; video streaming; traffic 
prediction; flow control; Kalman filter 
I. INTRODUCTION 
Nowadays, various real-time video streaming of video 
surveillance systems transmitted via Internet are widely 
investigated. The real-time video surveillance can actively 
monitor and detect the abnormal events in time. The main 
features of playing the real-time video streaming are to first 
download a portion of the data frames in receiver’s (user’s) 
buffers, and then start to play these data. Thus, the receiving 
and playing operations can be performed simultaneously on 
a receiver to achieve the object of real-time surveillance. 
In most of the current industrial video streaming 
products, the video data will be first encoded using some 
encoding and compressing techniques (e.g., H.264) [1], and 
delivered using different streaming protocols (e.g., RTP, 
RTCP, and RTSP) [2]. That is, these encoded and 
compressed data streaming is first encapsulated into RTP 
packets and carried in UDP datagrams. After attaching IP 
headers with IP addresses, then they finally form MAC 
(medium access control) frames, and are transmitted into 
networks. Unfortunately, because the current IPv4 networks 
cannot provide sufficient QoS requirements for real-time 
applications, once network congestion occurs, the real-time 
data will be influenced significantly. That is, the congestion 
on Internet will cause severe frame loss and delay jitter, then 
the real-time streaming cannot be played smoothly and the 
image lag occurs on receivers. Moreover, the video sender 
cannot be aware of the situation in time, and still uses the 
same data rate to transmit its data into Internet. The 
congestion becomes more and more severe. Besides, if a 
user receiving video streaming is via wireless networks, the 
channel interference and fading can also cause large frame 
loss and delay jitter. The high frame loss and delay jitter will 
cause long image lag or even stop playing the image. 
In this paper, we design a smart traffic prediction and 
flow control mechanism to solve the above problem on an 
industrial video streaming product. In literature, many 
researchers have discussed how to estimate network traffic. 
However, because the actual traffic in Internet is variant and 
not easy to be predicted, these estimation performances are 
limited. We here adopt the Kalman filter principle [3] to 
predict the network traffics and concurrently dynamically 
control the transmission rate of the video streaming. The 
adopted product is a video streaming server. It utilizes H.264 
codec to encode and compress analog video signals to digital 
signals, and then transmits them to clients (users). The client 
uses a GUI program with HTTP function to receive and play 
the real-time streaming, and concurrently uses RTCP to 
report the receiving information back to the server. Thus, the 
server can calculate the actual traffic in Internet, and then 
dynamically adjust its transmission data rate to reduce frame 
loss and delay jitter. From the practical measurements, we 
can find that the designed flow control do improve the 
playing quality of the real-time streaming when congestion 
and interference occur in networks. Especially, when the 
available network bandwidth becomes very small, the 
mechanism can shorten the time of image lag significantly. 
The rest of this paper is organized as follows. In Section 
II, the principles of Kalman filter are introduced for traffic 
estimation and traffic prediction. The implementation on a 
video streaming platform (product) is described explicitly in 
Section III. In Section IV, the measurement environment 
and results are presented. Finally, some conclusions are 
remarked in Section V. 
II. USING KALMAN FILTER ON TRAFFIC ESTIMATION 
Kalman filter is an optimization algorithm using 
recursive data process. It is suitably used in a dynamically 
linear system, because it can use the measured deviation at 
this time unit to estimate the system state of the next time 
unit. Therefore, it is often implemented in embedded control 
systems to obtain accurate estimation of variables [4]. In the 
paper [5], authors use a two-dimensional Kalman filter to 
provide a new interference prediction mechanism for 
wireless networks. Similarly, we here also use this feature to 
predict the variant traffic on wire or wireless networks, and 
make a decision for flow (video streaming) control. 
2010 Sixth International Conference on Intelligent Information Hiding and Multimedia Signal Processing
978-0-7695-4222-5/10 $26.00 © 2010 IEEE
DOI 10.1109/IIHMSP.2010.67
240
ratio, which is denoted as five_lostframe. If the ratio of 
five_lostframe is higher than the threshold_2, then the flow 
control is enabled immediately. 
From the experiment results, the parameters of 
threshold_1 and threshold_2 can be respectively set to 0.90 
and 0.25, and the problem of delay jitter becomes more 
sensitive can be improved. 
B. Raising Data Rate Mechanism 
The available network bandwidth is often dynamically 
changed. It may be small at this time but large later. 
Moreover, the predicted data transmission rate based on 
Kalman filter also has a little deviation after comparing with 
the actually available network bandwidth. Hence, a timely 
raising data rate mechanism is required for a server. If the 
sever sends its data frames with some transmission rate for a 
while, and there is no frame loss. Then the server can try to 
properly increase its transmission rate and finally reach an 
optimal transmission rate after a successive adjustment. 
The initially predefined transmission rate (Tx1), which 
causes frame loss, will be stored in the parameter of K1, and 
then the Kalman filter algorithm is enabled to calculate a 
new and small transmission rate (Tx2). If the Tx2 still causes 
frame loss, then the K1 will be updated by the Tx2. 
Contrarily, if the T x2 does not cause any frame loss, then it 
will be stored in the parameter of K2. After a transmission 
period (TP), if there is still no frame loss, the server can try 
to properly increase its transmission rate. Here, K1 and K2 
are two inputs and sent to Kalman filter algorithm to 
calculate a new transmission rate (Tx3). If the Tx3 still does 
not cause any frame loss, the K2 will be updated by the Tx3. 
Similarly, if the newly obtained transmission rate (Tx3) 
still does not cause any frame loss after another transmission 
period (TP), then the K1 will be retrieved to its previous 
value, which is larger than the current value, and continue to 
run the Kalman filter algorithm using the new K1 and K2 to 
get the new transmission rate (Tx4). Based on the above 
processes, the derived transmission rate can gradually 
approach an actually optimal value. This is the raising data 
rate mechanism. 
C. Fast Image Rrecovery Mechanism 
When the frame loss or delay jitter becomes large and 
the client (user) cannot receive enough data frames in time, 
the image lag occurs. Here, we focus on discussing about 
how to shorten the recovery time when the image lag occurs. 
We developed the Stop mechanism to speed up the 
image recovery. When the server receives the information of 
frame loss ratio, which is higher than a predefined threshold 
value (threshold_3), the server stops continuously sending 
its data frames into its buffer immediately and then begins to 
predict the actually available bandwidth and estimate the 
optimal transmission rate. When the optimal transmission 
rate is obtained, the server still can not send its data frames 
into its buffer until the data frames previously stored in its 
buffer have been transmitted. Using the Stop mechanism, 
the recovery time in the client can be indeed shortened, and 
the result will be also displayed in Section IV. 
 
Figure 1. Video streaming measurement architecture. 
 
IV. MEASUREMENT ENVIRONMENT AND RESULTS 
A. Measurement Architecture and Environment 
The implementation and measurement architecture 
consists of three parts: (1) the video streaming server 
(sender) (including video camera and video streaming 
server), (2) the actual Internet connection, and (3) the video 
streaming client (receiver) (including a receiving PC, TV 
Anywhere player, and Netlimit program), as shown in Fig. 
1. The RS232-USB connector provides a console control 
from PC to server for embedded system development and 
measurement. The PC runs NetTerm program to login the 
video server and perform consol control to monitor the 
system situation. 
The video streaming server uses H.264 codec to encode 
the video data sent from the video camera and transmits 
them into Internet. In tests, a PC plays a VCD image instead 
of the video camera to generate large video data. In the 
client, a receiving PC uses the TV Anywhere program to 
receive, decode, and play the video streaming. Using the TV 
Anywhere, our proposed mechanism can be enabled by 
setting the item of Auto Bitrate on the program. Besides, the 
TV Anywhere can also report information of frame loss ratio 
back to the video server periodically. The Netlimit program 
can provide the function of available bandwidth control to 
simulate various network congestion conditions. It is also 
installed in the receiving PC. 
B. Measurement Results 
When the Netlimit is used to limit network bandwidth, 
the frame loss occurs in this measurement system. In Fig. 
2(a), the client reports frame loss ratio once per 3 seconds, 
and the recovery time of image lag is about 9 to 12 seconds. 
In Fig. 2(b), the periodically reporting interval is shortened 
to one second, and the recovery time of image lag is about 6 
to 8 seconds. Comparing Fig. 2(a) and Fig. 2(b), we can find 
that when the feedback time interval is shortened from 3 to 1 
second, the recovery time is also shortened. However, due to 
the sensitivity problem of delay jitter as mentioned above, 
the calculated transmission rate in the server has vibration 
situation. Hence, the modified mechanism described in 
subsection A of Section III is used. From Fig. 2(c), we can 
242
國科會補助計畫衍生研發成果推廣資料表
日期:2012/01/21
國科會補助計畫
計畫名稱: 利用卡爾曼濾波器在802.11網狀網路中針對即時性多媒體串流研製動態頻寬
偵測與流量控管機制
計畫主持人: 莊岳儒
計畫編號: 99-2221-E-030-013- 學門領域: 網路
無研發成果推廣資料
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
