the high computational complexity. Thus, in this 
project, our objective is to facilitate the 
satisfiability (SAT)-based bounded sequential 
equivalence checking (BSEC). We exploit two logic 
optimization techniques, node merging and node 
addition and removal, previously proposed by us to 
optimize the BSEC model, which is used to verify the 
equivalence of two sequential circuits. This 
optimization can reduce the computational complexity 
for a SAT solver to solve the verification problem. 
Additionally, we use the logic optimization 
techniques to modify the structure of the BSEC model 
such that the SAT solver could find a solution more 
quickly. We conducted the experiments on 9 large 
benchmarks. The experimental results show that we can 
save a total of approximately 39-h verification time 
for all the benchmarks by simplifying and 
restructuring the BSEC models. Thus, the enhanced 
SAT-based BSEC could verify large circuits that the 
current technique cannot deal with, providing a 
better verification quality and environment. 
英文關鍵詞： sequential equivalence checking, logic optimization, 
node merging, node addition and removal 
 
2 
 
要判斷BSEC model的輸出值是否可為 1或恆為 0，可以將BSEC model轉換成Conjunctive 
Normal Form (CNF) formula，並限制此 OR gate 的輸出值為 1，接著使用一個 SAT solver 來解
之。如果結果為 unsatisfiable，則此 BSEC model 的輸出值恆為 0，即 P 和 Q 在 k 個 timeframes
內相等效；反之，P 和 Q 不相等。 
然而，雖然現今的 SAT solver 很有效率，但當 k 值增加時，也就是所考慮的 timeframes
量變大時，BSEC model 的大小和 CNF 中的變數量也隨之增加，使得 SAT solver 的計算複
雜度增加而變得沒有效率。一般來說，要完全確定兩循序電路等效，所考慮的 timeframes
數量必須大於電路的 sequential depth，也就是在此 depth 之後，電路不會再產生新的 states。
因此，當 k 值持續增加時，要如何有效地降低計算複雜度已成為必要的研究議題，這也是
本計畫的主要研究目的。 
 在不改變 P 和 Q 等效性的條件下，將 BSEC model 最佳化以減少 CNF 中的變數量就是最
直接且有效的方法。過去，我們致力於開發邏輯最佳化技術，如節點合併(node merging)[10][11]
和節點新增與移除(node addition and removal)[12]。這些成果都已發表於知名的國際期刊
(TCAD)和研討會(DAC，ICCAD)。在本計畫中，我們將這些技術應用於簡化 BSEC model 以
增加 SAT-based BSEC 的可行性。 
 我們主要的方法如下：假設欲驗證 P 和 Q 兩個循序電路的等效性，在建立完其 miter 後，
我們先使用 node merging 和 node addition and removal 簡化此 miter。接著，展開此 miter 後，
我們再次使用 node merging 和 node addition and removal 來簡化展開後的 BSEC model，同時
我們改變此 model 的邏輯架構使得 SAT solver 可以更快速地求出解。 
 我們以 IWLS 2005 的測試電路[13]為實驗的測試電路。實驗結果顯示，對於其中 9 個較
複雜的測試電路，透過我們所開發出來的技術來增進 SAT-based BSEC 後，我們總共可以省下
39 小時的驗證時間。因此，我們可以成功地驗證現有技術因為高複雜度所無法處理的複雜電
路，提供更完整且快速的驗證環境。而此項成果已於國際期刊發表[14]。 
 
二.研究目的 
 本計畫的研究目的是研究如何應用 node merging 和 node addition and removal 兩技術以增
進 SAT-based BSEC，減少其計算複雜度使得 SAT solver 可以更快速地求得解。因此，可以驗
證更多更大的 timeframes 使驗證更完整且迅速。 
 
三.研究方法 
接下來，將先說明 node merging 和 node addition and removal 技術，接著再說明我們如何
將其應用於增進 SAT-based BSEC。 
 
1. Node merging： 
在一個電路中，當兩個節點的功能性相等時，或其不相等的效應不會在任何 primary 
outputs 被觀測到時，則此兩節點可以被合併而且不會改變電路的整體功能。其中，不相等的
效應不會在任何 primary outputs 被觀測到的合併又稱為 observability don’t care (ODC)-based 
node merging。我們以 Fig. 2 來說明 ODC-based node merging。Fig. 2(a)為一個 And-Inverter 
4 
 
此外，我們可以將上述滿足條件中的 ns 的值反轉而用以計算出另一種類型的 substitute 
nodes：若 ns = 0 為要能偵測 nt 上的 stuck-at 0 fault 的 MAs，而同時 ns = 1 為要能偵測 nt上的
stuck-at 1 fault 的 MAs，則 INV(ns)可取代 nt。INV(ns)即表示在 ns 的輸出上加上一個 inverter。
因此，根據上述的滿足條件和修改後的滿足條件，我們只需要兩次的 MA 計算，即可以找到
一個 target node 的 substitute nodes，而且有機會同時找到兩個以上的 substitute nodes。 
 
2. Node addition and removal： 
傳統上，node merging 是以電路中已存在的一節點取代另一節點，這技術的效率與效能已
被許多研究所證實與試驗[10][11][16][17]。然而，我們發現此技術仍可被延伸以達到更好的效
能。在一電路中，並非所有欲移除的 target node 皆具有 substitute node，也就是說存在某些 target 
node，我們找尋不到電路中的另一節點可以取代之。但我們發現，對於某些無 substitute node
的 target node 來說，我們可以透過加入一節點至電路中以取代之。如此，當我們加入一個節
點後而可以移除兩個以上的節點，則電路仍可變小。 
 
以 Fig. 3 中的電路為例。在 Fig. 3(a)(和 Fig. 2(b)相同)中，若我們欲移除 n6，利用先前所
提的 node merging 技術，我們會發現電路中沒有任何節點可以取代 n6。但是，如果我們加入
n8 至電路中如 Fig. 3(b)所示，n8 則可以正確地取代 n6 而不改變整體電路的功能，因為 n6 被移
除後 n2 也可以被移除，所以電路可被簡化如 Fig. 3(c)所示。 
因此，node addition and removal 的問題為：對於一個給定的 target node，找尋一節點，將
其加入電路後可以正確地取代 target node，我們稱此加入電路的節點為新增替代節點(added 
substitute node)。在 Fig. 3(b)中，n8 即為 n6 的 added substitute node。 
為找尋 added substitute node，我們延伸先前的滿足條件，提出使一新增節點為 added 
substitute node 的兩個滿足條件，當此兩滿足條件同時被滿足時，則此新增節點為一 added 
substitute node。 
由於 added substitute node 和傳統的 substitute 一樣，都是可以正確地取代目標節點，所以
如果將一節點新增至電路中後，若此節點滿足先前的滿足條件則此節點為 added substitute 
node。也就是說，我們可以利用先前的滿足條件來判斷一個新增至電路中的節點是否為 added 
substitute node。如在 Fig. 3(b)中，n8 滿足先前的滿足條件，所以其可正確地取代 target node。
然而，雖然先前的滿足條件可用來判斷一個新增至電路中的節點是否為added substitute node，
Fig. 3. An example for demonstrating node addition and removal. (a) n6 is a target node. 
(b) Add n8 into the circuit. (c) Use n8 to replace n6 and remove n2. 
n2 b 
n1 
n4 d 
n7 
n3 
O2 
O3 
O4 
O3 
O4 
O3 c n8 
n8 
d 
c 
b 
n4 
n3 
n3 
n4 d 
n2 
a n1 n7 
n6 
b 
(a) (b) 
a 
n6 
c 
a n1 n7 
(c) 
O1 
O2 
O1 O1 
O2 
O4 
6 
 
 
 
Fig. 4 顯示 8 種我們所考慮的 added substitute nodes，和其所對應的滿足條件 1 和滿足條件
2。其中，Fig. 4(a)為原本的 added substitute node，na = AND(nf1, nf2)。若我們反轉滿足條件 1
和滿足條件2中nf1的值，我們可以得到Type 2的added substitute node，na = AND(INV(nf1), nf2)。
若反轉滿足條件 1 和滿足條件 2 中 nf2 的值，我們可以得到 Type 3 的 added substitute node，na 
= AND(nf1, INV(nf2))。若同時反轉 nf1和 nf2的值，我們可以得到Type 4 的 added substitute node，
na = AND(INV(nf1), INV(nf2))。對應於 Type 1 ~ Type 4，若我們反轉 stuck-at fault 的值，我們可
以得到 Type 5 ~ Type 8 的 added substitute node，依序為 na = INV(AND(nf1, nf2))、na = 
INV(AND(INV(nf1), nf2)) 、na = INV(AND(nf1, INV(nf2))和 na = INV(AND(INV(nf1), INV(nf2)))。 
給定一個 target node，我們可以利用滿足條件 1和滿足條件 2來找其 added substitute nodes。
根據滿足條件 1，我們可以總是選擇一個在 MAs(nt=sa0)或 MAs(nt=sa1)中的節點當作 nf1，並
搭配滿足條件 2 來找尋 nf2。 
我們以 Fig. 3 為例來說明找尋 added substitute node 的方法。在 Fig. 3(a)中，假設 n6 為 target 
node。首先，我們計算 MAs(n6=sa0)，根據先前所說明計算 MAs 的方法，我們可以計算出
{nf1=1, nf2=1} is in MAs(nt=sa0) 
nf2=0 is implied by {(nf1 = 1)∪(MAs(nt=sa1))} 
Type 1 
{nf1=0, nf2=1} is in MAs(nt=sa0) 
nf2=0 is implied by {(nf1 = 0)∪(MAs(nt=sa1))} 
Type 2 
{nf1=1, nf2=0} is in MAs(nt=sa0) 
nf2=1 is implied by {(nf1 = 1)∪(MAs(nt=sa1))} 
Type 3 
{nf1=0, nf2=0} is in MAs(nt=sa0) 
nf2=1 is implied by {(nf1 = 0)∪(MAs(nt=sa1))} 
Type 4 
{nf1=1, nf2=1} is in MAs(nt=sa1) 
nf2=0 is implied by {(nf1 = 1)∪(MAs(nt=sa0))} 
Type 5 
{nf1=0, nf2=1} is in MAs(nt=sa1) 
nf2=0 is implied by {(nf1 = 0)∪(MAs(nt=sa0))} 
Type 6 
{nf1=0, nf2=0} is in MAs(nt=sa1) 
nf2=1 is implied by {(nf1 = 0)∪(MAs(nt=sa0))} 
Type 8 
{nf1=1, nf2=0} is in MAs(nt=sa1) 
nf2=1 is implied by {(nf1 = 1)∪(MAs(nt=sa0))} 
Type 7 
nf1 
nf2 
na 
nf1 
nf2 
na 
nf1 
nf2 
na 
nf1 
nf2 
na 
nf1 
nf2 
na 
nf1 
nf2 
na 
nf1 
nf2 
na 
nf1 
nf2 
na 
Fig. 4. Eight types of added substitute nodes and their corresponding conditions. 
8 
 
 
我們提出的簡化流程如下：在建構完 miter 後，我們會先使用 node merging 和 node addition 
and removal 技術簡化之。對於 miter 中的每個節點，我們都將其當作 target node 一次，首先
找尋其 substitute node取代之，若找不到 substitute node則找尋 added substitute node以取代之。
接著，展開簡化後的 miter 以建立 BSEC model。然後再次使用 node merging 和 node addition and 
removal 技術簡化此 BSEC model。最後再將此簡化後的 BSEC model 轉為 CNF，並使用 SAT 
solver 求解。在這簡化的過程中，我們選擇 target node 和(added) substitute node 的方法如下：
對於 target node，我們由靠近 primary inputs 端的節點開始選擇至靠近 primary outputs 端的節
點；而當其有(added) substitute nodes 時，我們選擇離此 target node 最遠的(added) substitute node
來取代它，目的是使得變數間的關係變得更密切，讓 SAT solver 能夠更快速地求出解。 
 
四.結果與討論 
我們使用 C language 來實現我們提出的技術，並將其建立在 ABC package[18]環境下。此
實驗在一台 3.0GHZ Linux platform (CentOS 4.6)上執行，而測試電路來自於 IWLS 2005 
suite[13]。在此實驗中，我們主要驗證兩個等校的電路。對於每個測試電路，我們先使用另一
個邏輯最佳化技術 resyn2 script[19]簡化之，然後將此簡化後的電路和其原本的電路做等校性
驗證。 
對於此簡化後的電路和其原本的電路，我們首先將其連接成一個 miter。接著將此 miter
展開成 k 個 timeframes 以產生 BSEC model。最後使用 MiniSat [20]為 SAT solver 來求解。為
了比較結果，我們總共執行了兩種簡化的方式：在第一種方式中，我們單純使用 reysn2 來簡
化 miter 和 BSEC model；在第二種簡化方式中，我們先使用 resyn2 做簡化接著再使用我們的
方法做簡化。此實驗設計可以顯示我們的方法可以和 resyn2 結合以達到更好的加速效果。最
後，我們也記錄下使用 SAT solver 來解簡化後的 BSEC model 的時間。 
實驗結果如 Table 1 所示。Columns 1 和 2 分別顯示測試電路的名稱和每個測試電路裡的
暫存器的數量。Column 3 顯示展開後的 timeframes 的數量 k。Column 4 顯示使用 SAT solver
解一個沒有簡化過的 BSEC model 所需花費的時間，在此，時間限制為 36000s。Columns 5-7
Fig. 5. The optimized BSEC model. 
10 
 
[2] E. I. Goldberg, M. Prasad and R. Brayton, “Using SAT for Combinational Equivalence 
Checking,” in Proc. Design, Automation and Test in Europe, 2001, pp. 114-121. 
[3] V. Paruthi and A. Kuehlmann, “Equivalence Checking Combining a Structural SAT-solver, 
BDD, and Simulation,” in Proc. Int. Conf. on Computer Design, 2000, pp. 459-464. 
[4] S. Reda and A. Salem, “Combinational Equivalence Checking Using Boolean Satisfiability 
and Binary Decision Diagrams,” in Proc. Design, Automation and Test in Europe, 2001, pp. 
122-126. 
[5] S.-C. Wu, C.-Y Wang, and J.-A. Hsieh, “The Potential and Limitation of Probability-based 
Equivalence Checking,” in Proc. Asian Test Symp., 2006, pp. 103-108. 
[6] Lynn C.-L. Chang, Charles H.-P. Wen, and J. Bhadra, “Speeding up Bounded Sequential 
Equivalence Checking with Cross-Timeframe State-Pair Constraints from Data Learning,” in 
Proc. Int. Test Conf., 2009, pp. 1-8. 
[7] D. Stoffel, M. Wedler, P. Warkentin, and W. Kunz, “Structural FSM traversal,” IEEE Trans. 
Computer-Aided Design, vol. 23, pp. 598-619, May 2004. 
[8] W. Wu and M. S. Hsiao, “Mining Global Constraints with Domain Knowledge for Improving 
Bounded Sequential Equivalence Checking,” IEEE Trans. Computer-Aided Design, vol. 27, pp. 
197-201, Jan. 2008. 
[9] D. Brand, “Verification of Large Synthesized Designs,” in Proc. Int. Conf. on Computer-Aided 
Design, 1993, pp. 534-537. 
[10] Y.-C. Chen, and C.-Y Wang, “Fast Detection of Node Mergers Using Logic Implications,” in 
Proc. Int. Conf. on Computer-Aided Design, 2009, pp. 785-788. 
[11] Y.-C. Chen, and C.-Y Wang, “Fast Node Merging with Don’t Cares Using Logic 
Implications,” IEEE Trans. Computer-Aided Design, vol. 29, pp. 1827-1832, Nov. 2010. 
[12] Y.-C. Chen, and C.-Y Wang, “Node Addition and Removal in the Presence of Don’t Cares,” in 
Proc. Design Automation Conf., 2010, pp. 505-510. 
[13] IWLS 2005 Benchmarks [Online]. Available: http://iwls.org/iwls2005/benchmarks.html. 
[14] Y.-C. Chen, and C.-Y Wang, “Logic Restructuring Using Node Addition and Removal,” IEEE 
Trans. Computer-Aided Design, vol. 31, pp. 260-270, Feb. 2012. 
[15] I. Hamzaoglu, and J. H. Patel, “New Techniques for Deterministic Test Pattern Generation,” in 
Proc. VLSI Test Symp., 1998, pp. 446-452. 
[16] Q. Zhu, N. Kitchen, A. Kuehlmann, and A. Sangiovanni-Vincentelli, “SAT Sweeping with 
Local Observability Don't Cares,” in Proc. Design Automation Conf., 2006, pp. 229-234. 
[17] S. Plaza, K.-H. Chang, I. L. Markov, and V. Bertacco, “Node Mergers in the Presence of Don't 
Cares," in Proc. Asia South Pacific Design Automation Conf., 2007, pp. 414-419. 
[18] Berkeley Logic Synthesis and Verification Group. ABC: A System for Sequential Synthesis 
and Verification [Online]. Available: http://www.eecs.berkeley.edu/~alanmi/abc 
[19] A. Mishchenko, S. Chatterjee, and R. Brayton, “DAG-aware AIG rewriting: A fresh look at 
combinational logic synthesis,” in Proc. Des. Automat. Conf., 2006, pp. 532–536. 
MiniSat [Online]. Available: http://minisat.se 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/12/18
國科會補助計畫
計畫名稱: 以邏輯最佳化技術促進基於滿足性之有限循序電路等效驗證之技術研究
計畫主持人: 陳勇志
計畫編號: 100-2218-E-155-006- 學門領域: 積體電路及系統設計
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
國內參與計畫人力-大專生-達成 1人次-預期 1人次-100%貢獻 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
