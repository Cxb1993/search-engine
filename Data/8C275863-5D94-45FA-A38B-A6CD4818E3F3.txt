      (13,25)1   
1 (10,30) (25,15) 0  
(26,18)11 (12,27) 1 (27,8)
Discriminator
1 
2 
1 
    在過去的研究中，有許多的資料結構被提出應用於多目標演化演算法上，例如[3]、[7]
與[9]。這些資料結構都包含兩項重要的程序，分別為插入與刪除。然而，刪除的程序是在應
用上最為複雜的，主要原因在於每當我們刪除一個解時，都比須經過一連串重整樹的動作來
維持剩下的解相互之間的關係。在過去所提出的資料結構中，於高維度(d>5)的情況下，其表
現是不盡理想的。由我們的實驗結果中可以證明，於高維度時，利用 marked k-d tree作為演
化演算法的資料結構，在執行效能的表現上可以明顯提升。 
2.1 Marked k-d tree 
     考慮一個維度為 k的解集合，p與 q為其中的兩個解。當 p在每個目標函數的表現上都
優於 q時，我們稱 p完全優於 q( p dominate q )。k-d tree中的 discriminator值表示要與第幾個
目標值做比較，比較後的結果根據二元搜尋樹的特性來完成新增節點的動作。 
    Marked k-d tree為 k-d tree的變形，差別為 marked k-d tree中，每個節點額外使用一個
marked 欄位，用來記錄該節點的解為 dominated 或是 nondominated(1 : nondominated , 0 : 
dominated)。我們對於每個節點 marked 欄位的初始值均設為 1。假設 r 也是其中的一個解，
當發現 p完全優於 r時，我們便需要將 r的 marked欄位改為 0。為了改善其他資料結構中，
刪除節點所造成的大量時間花費的缺點。對於那些 dominated的解，我們僅修改其 marked欄
位而不將它刪除。圖一為 marked k-d tree的例子。 
 
 
 
 
  圖 1. (26,18)完全優於(25,15) ，因此(25,15)的 marked欄位為 0 
2.2 detectDominance in marked k-d tree 
    detectDominance為我們演化演算法重要的程序之一。其主要的目的是判斷一個新增的解
p，是否能夠於 marked k-d tree中生存下來 (即於 marked k-d tree中，找不到任何一個解能夠
     (10,30) 1 
1 (9,31) (18,26) 1 
1  (19,20) (17,27) 1 
markDominance(20,25) 
     (10,30) 1 
1 (9,31) (18,26) 1 
0  (19,20) (17,27) 1 
優於 p時，表示 p能夠生存下來。此時，我們便需要將那些於 marked k-d tree中，會被 p完
全優於的解全部找出，並將其 marked欄位由 1改為 0。在此要特別強調，在這個程序中，我
們僅修改 dominated解的 marked欄位，而不將其刪除，以此達到增進執行效能的目的。 
    首先，p同樣先與樹根作線性比較。若 p完全優於樹根，則將樹根的 marked欄位改為 0。
接下來，與樹跟的第 i 個目標函數值作比較(i 為 discriminator 值)。比較過後，同樣會有以下
兩種情況 : 
    情況一 : 若 p的第 i個目標函數值(i為 discriminator值)小於樹根的第 i個目標函數值，
表示 p 不可能完全優於樹根右子樹中的所有解。因此，只需要檢查樹根的左子
樹部份。 
    情況二 : 若 p的第 i個目標函數值(i為 discriminator值)大於樹根的第 i個目標函數值，
表示 p 有可能完全優於樹根左子樹與右子樹中的所有解。因此，需要檢查樹根
的左子樹與子樹部份。 
         
 
 
 
圖 3.  markDominance 走訪路徑 
3.  適用於高維度資料的MOEA 
    過去致力於MOEAs的研究包含兩個目標。第一個為希望能夠獲得較佳的 Pareto font，第
二個為希望能夠加快執行時間。為了同時達到此兩項目標，大部分提出的演算法只能在低維
度的情況下達成。而我們所提出的演算法即便是在高維度(d>5)的情況下，也能夠同時達成這
兩項目標。底下為我們所提出演算法的流程 : 
輸入 : N (解的個數)  
             T (執行代數) 
個數的 1/10。實驗總代數設定為 100。 
 0/1 knapsack problem : 詳細的問題描述請參考[8]。解的個數以及 archive 容量大小如同
simple test problem的設定。背包個數為 3~8，物品數量為 150。 
    圖 4與圖 5表示在效能的表現上，我們的演算法明顯優於其他演算法，即使是在高維度
的情況下也是如此。圖 6表示在 SPEA中使用非固定容量 archive的情況下，使用 marked k-d 
tree會比使用 dominated tree來的有效率。表格 1為 C metric[8]的比較結果，根據結果可以明
顯的看出，由我們提出的演算法所得到的 Pareto font能夠幾乎完全優於所有由其他方法所得
到的 Pareto font。因此，由這些實驗數據結果可以證明，我們所提出的演算法無論是在哪一
方面都是優於其他演算法的，特別是在高維度的情況下。 
 
(A)                                       (B) 
圖 4. simple test problem 效能比較圖 (A)Population size: 300 and (B) Population size: 500 
 
(A)                                        (B) 
圖 5.  0/1 knapsack problem 效能比較圖 (A) Population size: 300 and (B) Population size: 500 
 [1]  W.-M. Chen, H.-K. Hwang, and T.-H. Tsai, Efficient maxima-finding algorithms for multidimensional samples, 
submitted.  
 [2] K. Deb, S. Agrawal, A. Pratap, and T. Meyarivan, A Fast Elitist Non-Dominated Sorting Genetic Algorithm for 
Multi-Objective Optimization: NSGA-II, In Proceedings of Parallel Problem Solving from Nature - PPSN VI, 
pages 849-858. Springer, 2000.  
 [3] J.E. Fieldsend, R.M. Everson, and S. Singh, Using Unconstrained Elite Archives for Multi-Objective Optimisation, 
IEEE Trans. Evol. Comput, 7(3):305-323, 2003.  
 [4] J. Horn, N. Nafpliotis, and D. E. Goldberg, A niched Pareto genetic algorithm for multiobjective optimization, in 
Proceedings of the First IEEE Conference on Evolutionary Computation, IEEE World Congress on Computational 
Intelligence. Piscataway, NJ: IEEE Press, 1994, vol.1, pp. 82–87.  
 [5]  J. D. Schaffer, Multiple objective optimization with vector evaluated genetic algorithms, in Proc. 1st Int. Conf. 
Genetic Algorithms, 1985, pp. 99–100.  
 [6]  N. Srinivas and K. Deb, Multiobjective optimization using nondominated sorting in genetic algorithms, Evol. 
Comput., vol. 2, no. 3, pp. 221–248, 1995.  
 [7]  Sanaz Mostaghim , Jurgen Teich, Quad-trees: A Data Structure for storing Pareto-sets in Multi-objective 
Evolutionary Algorithms with Elitism, in Evolutionary Computation Based Multi-Criteria Optimization : 
Theoretical Advances and Applications Springer Verlag, 2005.  
[8]  E. Zitzler, K. Deb, and L. Thiele, Comparison of multiobjective evolutionary algorithms: Empirical results, Evol. 
Comput., vol. 8, no. 2, pp. 173–195, 2000.  
[9]  H. Zhao, Z. Hu, and M.Takeichi. Multidimensional searching trees with minimum attribute. JSSST Computer 
Software, 19(1):22--28, Jan. 2002. 
[10]  E. Zitzler and L. Thiele, Multiobjective evolutionary algorithms: A comparative case study and the strength 
Pareto approach, IEEE Trans. Evol. Comput., vol. 3, pp. 257–271, Nov. 1999.  
[11] E. Zitzler and L. Thiele. SPEA2 : Improving the Strength Pareto Evolutionary Algorithm, TIK-Report 103, 2001. 
 
An efficient evolutionary algorithm for multiobjective 
optimization problems 
Wei-Mei Chen  and Wei-Ting Lee 
Department of Electronic Engineering, National Taiwan University of Science and Technology, Taipei, 106, Taiwan 
E-mail: wmchen@mail.ntust.edu.tw, willy701022@hotmail.com 
Abstract — An efficient evolutionary algorithm (EA) for 
the multiobjective optimization problems is proposed. To 
reduce the computational cost, a variant of k-d tree is 
used in our approach to preserve all nondominated 
solutions. Our experiments demonstrate that the 
algorithm outperforms the other popular multiobjective 
EA’s, especially for the higher dimensional cases.  
1. INTRODUCTION
A couple of popular multiobjective evolutionary 
algorithms (MOEAs) were proposed during the past twenty 
years, such as VEGA[5], NPGA[4], NSGA[6], and 
SPEA[10]. These evolutionary algorithms were 
demonstrated to be very suitable for solving multiobjective 
optimization problems. 
The goal of MOEA is to obtain the most feasible 
solutions lying on the Pareto front through the evolutionary 
mechanisms generations by generations. Every popular 
MOEA has its own efficient approach to preserve feasible 
solutions in the process. To avoid the computational costs of 
maintaining all nondominated sets, an elite archive with 
limited size is suggested to store the truncated nondominated 
sets [10]. However, restricting the size of archive reduces the 
quality of solutions, such as shrinking and retreating the 
estimated Pareto fronts; see [3].  
Generally, there are two kinds of archives: constrained 
archives and unconstrained archives. The number of 
comparisons for the constrained archive is less than that for 
the unconstrained one because of the smaller predefined size 
of the constrained archive. Therefore, in terms of execution 
time, the constrained archive performs better than the 
unconstrained archive. However, when the archive size 
exceeds the fixed size of the constrained archive, we need to 
cut down the archive for fitting the size, e.g., clustering in 
SPEA, truncation in SPEA2 [11]. After this process, we may 
lose  some elite  solutions. Thus, in  terms  of  elite  solutions, 
the unconstrained archive performs better than the 
constrained archive. 
In this paper, an elite evolutionary algorithm with an 
unconstrained archive is proposed. For reducing the 
computational cost, we preserve the elite solutions in a 
variant of k-d tree in [1] which is very suitable for finding  
the Pareto fronts.   In the data structure, it is very efficient to 
determine if a solution is dominated or not, then the new 
algorithm can filter out some solutions prior to further 
computation. Because of these improvements, our approach 
not only preserves the elite solutions but also reduces the 
execution time. 
 For the remainder of this paper, we explain in more 
detailed about our approach. In Section 2, we introduce a 
variant of k-d tree and related procedures for this tree 
structure. In Section 3, we propose a new approach for 
multiobjective optimization problems. Finally, we  show our 
experimental simulations to demonstrate that our approach 
performs better than the previous evolutionary algorithms.  
2. DATA STRUCTURES 
Recently several data structures are proposed for 
multiobjective evolutionary algorithms in [3], [7], and [9]. 
For these structures, there are two important operations: 
insertions and deletions. The deletion operation is the most 
complicated part in applications since it takes a sequence of 
processes to maintain the properties of the related data 
structures after each deletion. However, among all these 
assorted data structures the performances for moderate-
dimensional cases (with d>5) are not as distinguished as 
those for low-dimensional cases. Our experiments 
demonstrate that MOEAs work with a variant of k-d
treesalways run significantly faster than other popular data 
structures in higher dimensional problems. 
2.1 Marked k-d Trees 
Consider a set of k-dimentional points. A point p is 
said to dominate another point q if p-q has only positive 
coordinates. The idea of k-d trees is to use each coordinate 
cyclically in the order, from the first coordinate to the last, as 
the discriminator to direct points falling in the same subtree 
as in binary search trees.
A marked k-d tree is a variant of k-d trees [1] in 
which each node contains an extra binary variable called 
marked. The marked variable records whether the node is 
dominated or nondominated (1 for nondominated; 0 for 
dominated ). Initially the value is set to 1 for each node. If a 
node is dominated by another node, we assign the variable to 
This work is supported by National Science Council under the Grant 
NSC95-2221-E-011-074
1-4244-1190-4/07/$25.00 ©2007 IEEE. 30 PACRIM'07
           T ( maximum number of generations ) 
Output : A ( nondominated set ) 
Step 1. Initialization: Generate an initial population P0
and construct the marked k-d tree M0 (set the 
record of mark to 1 for all solutions). Set t=0. 
Step 2. Mating selection: Copy all the nondominated 
solutions (the record of mark is 1) into the 
mating pool and construct the new marked k-d
tree Mt+1’ as the archive with all nondominated 
solutions. 
Step 3. Variation: Apply the crossover and mutation 
operators to the mating pool (perform the 
detectDominance and markDominance
to every new solution on Mt+1’). Increasing 
generation counter (t = t + 1) 
Step 4. Termination : If t = T , then set the Mt+1’ as the 
final elite set. Else, go to Step 2. 
In order to obtain the true Pareto font, some popular 
MOEAs, such as SPEA and SPEA2, are proposed that  
fitness functions to find solutions which are close to the 
Pareto fonts. The solutions with fixed size, including the 
dominated and nondominated ones, are chosen and put into 
the mating pool according to their fitness values, and then 
the biological evolutionary mechanisms are performed. 
However, we suggest to randomly select some the 
nondominated solutions into the mating pool, then the final 
elite set is very close to the Pareto font.  
4. EXPERIMENTS AND CONCLUSIONS
We evaluate the performance of our approach and those 
of NSGA-II, SPEA and SPEA2 for a simple test function 
and the multiobjective 0/1 knapsack problem. Besides the 
execution time, we also study the popular C metric [8] for a 
pair of nondominated sets compared by calculating the 
fraction of each set that is covered by the other set. For 
unconstrained archives, we also compare the execution times 
of the approach SPEA implemented by marked k-d trees and 
dominated trees proposed in [3]. A PC with Pentium 4 CPU 
at 2.8GHz and 1Gbyte RAM is used for all experiments. 
Parameter Setting  
Simple test function:   Randomly set the positive value 
between [0,10000] to each objective for every solution. The 
numbers of objectives are considered from 3 to 8. The 
population size are 300, 500 and the size of archive is set to 
be the 1/10 of population size for SPEA and SPEA2. The 
generation is 100.   
0/1 Knapsack problem: The full 0/1 knapsack problem 
is described in [8]. The size of population and archive are the 
same as those used in the simple test function. The numbers 
of knapsacks are considered from 3 to 10 and the number of 
items is 150. 
Figure 4 and Figure 5 show that the performance of 
our approach is superior to those of the other algorithms, 
even in the higher dimensional cases. Figure 6 demonstrates 
that the marked k-d tree is more efficient for unconstrained 
archive in SPEA. Table 1 illustrates the C performance 
comparison of the fronts found by our approach and the 
other algorithms. According to the results, the final elite set 
found by our approach can almost dominate those of the 
other algorithms. Our experiments demonstrate that the 
algorithm outperforms the other popular multiobjective EA’s, 
especially for the higher dimensional cases.
(A)
                                                 (B) 
Figure 4. Performance values for simple test function. The graphs show 
the average execution times of 10 runs for each algorithm. (A) 
Population size: 300 and (B) Population size: 500 
                                              (A)
32
