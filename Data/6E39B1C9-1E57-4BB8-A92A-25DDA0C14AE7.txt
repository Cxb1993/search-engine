 2
 
圖 1：結合MDS與 HS-Console，OSD與
HS2後的系統架構圖 
 
二、系統設計 
圖 2 表示 Client 與 MDS 及 OSD 間的互
動關系，其中包含一個 OSD device driver 模
組，此模組可以看成是遠端 OSD 的驅動程
式，在計劃的系統架構中，我們規劃由 MDS
管理所有 OSD 中 superblock、物件位置配置
及安全性控制的的資訊，Client 在操作 OSD
中的物件時，很可能會同時向 MSD 及 OSD
兩部份要求服務，舉例來說 Client 端在執行
一個 open→read/write→close 操作時可能會
經過下列的步驟： 
 
 
圖 2：系統互動關係 
Client 向 MDS 取得目標 Object 的位置資
訊(存在那一個 OSD)及存取憑証。 
Client使用由MDS取得的資訊向OSD執
行物件操作。 
Client 向 MDS 通知物件內容已更新，請
MDS 處理物件一致性問題。 
  由上述操作可以得知 Client 端的物件
操作是有狀態性的，且不同的功能操作可能
有完全不同的操作流程，例如 mount OSD
的操作流程可能只跟 MDS 有關，比之
read/write 物件就有一定的差異，因此我們
可以說在 OSD device driver 模組中，操作狀
態轉移機制是重點之一，此外 OSD device 
driver 在實作上的考慮尚有： 
如何處理 Client-MDS binding 的問題。 
SCSI Upper layer 功能實作。 
是否實作裝置檔讓 user mount (例如：
/dev/osd0)。 
  圖 2 之 Networking 模組相較於其它兩
模 組 就 較 單 純 ， 在 系 統 中 我 們 規 劃
Networking 模組的功能主要在些處理所有
命令在網路上傳送的問題，換句話說此模組
的重點在實現 Client-MDS protocol 及
Client-OSD protocol，為了系統的相容性及
可用性，對於這兩個協定我們希望能遵守
T10 的標準。由目前初步的研究發現 Intel 
iSCSI/OSD 系統已有可用的 iSCSI 協定實
作，所以我們打算以修改 Intel iSCSI 中的
iSCSI 通訊模組著手，而不直接使用原來軟
體的原因是 Intel 實作的 iSCSI/OSD 協定稍
微舊了點，目前已有新的協定版本釋出。 
   OSD 是系統中儲存物件的媒體，圖 3
是計劃中規劃的OSD模型，圖中Networking
元件如同 Client 端系統的設計一樣，其功能
是用來處理 iSCSI 協定，Pre-processor 是讓
OST 可以有智慧處理物件的重要元件，在計
劃中我們規劃所有在 OSD 端執行物件儲取
時 ， 都 一 定 要 先 經 過 Pre-processor ，
Pre-processor會根據Metadata決定對物件預
先執行一些處理，Allocation manager 則用來
決定物件配置的方法，Object Cache 則是用
來處理物件 Cache 機制的元件。 
 4
HS-Console + Smart function Server)，廠商或
使用單位可以在 smart function server 上註
冊新的 smart function，而儲存裝置可以到
smart function server 上來抓取新的 smart 
function 新增功能。Application client、OSD、
smart function server 三者之間配合使用
smart function 之示意圖如圖 7 所示。 
 
 
圖 7：結合 Smart function server於MDS
及 HS-Console中 
 
三、FAT+的實現 
檔案系統(File System)在一般的作業系
統平台上，每一個檔案系統都不盡相同，
以 Linux 作業系統來講，可使用的檔案系
統種類就有好幾個，而依照不同的需求，
也可能需要選擇不同的檔案系統格式。而
FAT 為廣泛且理想的軟碟和記憶卡檔案系
統，適合用在不同作業系統中的資料交
流。因而廣泛的被各嵌入式系統支援如數
位相機、MP3 播放器等。圖 8 為檔案系統
存取流程圖。以資料存取可由兩個層面來
探討：從抽象的觀點與實體觀點。抽象來
看就是人類以邏輯觀點來組織並且管理資
料，這個抽象層面一般是以檔案與目錄型
態來展現。而從實體則有磁碟的輸出/入與
效率的考量。 
 
圖 8： FAT 檔案系統存取示意圖 
 FAT+ 概念圖如圖 9 所示，在此將檔案
分為超過 1MB 的大區塊單元與及小於 1MB
的小區塊單元兩種格式，分別規劃在固定的
磁區位址，例如開始由 0 開始寫入，一開始
是存放大區塊單元 1MB，實際上佔用掉傳
統 FAT 檔案配置 64 個 Clusters，接下來下
一個小區塊單元位於起頭偏移量 1MB 亦是
偏移一個大區塊單元的位址，而小區塊單元
所佔用掉的傳統FAT檔案配置是1個Cluster
的數量，檔案配置方式可以動態的改變。 
本文將原本 FAT 配置的最小單元由
cluster改成由多個或一個cluster所組成的小
區塊單元與大區塊單元兩種儲存單位，例如
有一顆 10G 的磁碟大多存放數位照片或影
片，由於數位影像目前大多是 1MB~2MB 大
小，可由此將大區塊單元設定為 2MB、小
區塊單元為 16KB。因此，當一個數位照片
被儲存時，由於大於小區塊單元的容量，所
以將會被存放在大區塊單元中。而在大區塊
單元使用的是連續配置空間能夠避免外部
破碎的產生，也可以使讀取的效率提高。嵌
入式系統之儲存特性，主要依照： 
1.檔案格式變化不大：如照片格式、影音格
式等。 
2.檔案大小變化不大：如數位照片檔案大小
大約可分為 5~6 種類型。 
3.封閉式/開放式檔案系統：如醫療方面所使
用的 PACS (Picture Archiving and 
Communication System)[40]系統則是屬
 6
為 0.9MB)將會存放在大區塊單元中的 1、2
的配置空間，其佔用掉傳統 FAT 配置空間總
共 64 個 Clusters 單位，B.jpg(大小為 1.4MB)
將會存放在大區塊單元中的 3、4、5 的配置
空間，總共佔用了傳統 FAT 配置空間共 96
個 Clusters 單位，C.jpg(大小為 0.7MB)將會
存放在大區塊單元中的 6、7 的配置空間，
共佔用了傳統FAT配置空間共64個Clusters
單位，其餘的 D、E 照片檔案，亦是如此放
置。此外，總共六個文字說明檔則會分別寫
入小區塊單元的 1、2、3、4、5、6 的檔案
配置區。 
  
圖 12： 數位相簿檔案配置 
另外，我們將說明小區塊與大區塊的數量
比，假設把小區塊或大區塊其中一項比值參
數設為 0，檔案配置方式將會只有小區塊或
者只有大區塊，以下舉例說明： 
我們假設此平台是使用於儲存影片或音
樂的儲存裝置，其中儲存體中的影片可能為
上百 MB，因此，大區塊單元可調整為 10MB
或者更大的單元量來儲存這些影音，並且連
續配置多個大區塊單元，也就是說可將小區
塊單元省略不配置，大區塊與小區塊的數量
比為：N:0。單純只配置大區塊單元，影片
播存裝置檔案配置方式如圖 13 所示，每個
大區塊單元是以 10MB 為單位，假設有一個
190MB 的影片檔案儲存，將會佔用掉 19 個
大區塊單元的儲存空間。但是，如果使用者
儲存了一個大小為 195MB 的影音檔案，一
樣也是佔用掉 19 個大區塊儲存空間，當檔
案儲存到最後一個空間時，只會用掉一個大
區塊單元中的 5MB，剩下的 5MB 將會損失
掉。因此，此問題可透過參數的調整改善，
如此一來我們可利用參數的調整設定後，可
盡量避免 FAT+內部嚴重的破碎問題。 
  
圖 13: 影音檔案儲存配置 
 藉由 FAT+所提供的大區塊單元與小區
塊單元兩種儲存單元，將大小固定的檔案存
放在特定的位址。假如大區塊單元內的資料
被刪除，下次存放進來的還是大區塊單元的
資料，不會被小區塊單元取代掉，如此的分
配也可以避免檔案刪除/新增後，傳統 FAT
檔案配置產生嚴重的破碎情況。但所規劃的
FAT+也非如此的完善，有許多小缺失是採
用 FAT+檔案配置會發生的情形，如檔案內
部破碎問題，如影音檔案儲存，但此問題可
由 FAT+對於應用場合的不同，進而調整參
數來改善。 
 
四、系統測試 
圖 14 為 FAT+載入系統之狀態圖，FAT+
之 IPC Port 為 0x17，其中最主要 FAT+模組
要與 Port 0x05 IDE 模組做銜接動作。 
  
圖 14: 載入 FAT+模組 
在 FAT+模組這個部份，完成的函式有：
FAT+_Create、FAT+_Write、FAT+_Open、
FAT+_Flush 以及 FAT+_Close。主要用來儲
存檔案使用，與一般 FAT 不同的是，FAT+
依照我們所規劃的方式儲存檔案，並可調整
參數，以適用於不同的場合使用。圖 15 為
 8
128KB。寫入完成後，將其儲存裝置(硬碟)
接上 PC，並且在 Windows 與 Linux 作業系
統環境下讀取，由於本文使用 FAT 格式之檔
案系統，是希望能夠再其他的作業系統環境
下亦能讀取其寫入之檔案，使其相容性提
高。而此部分驗證已無問題，因此寫入檔案
部分由 Linux 環境之下由一個簡單的程式，
將其寫入的 Cluster 列表印出，如圖 19 所示。 
  
圖 19: 寫入硬碟之 Clusters 顯示圖 
由於會將其配置方式規劃成 1:1，也是證
明寫入之檔案能夠跨越其大區塊單元或是
小區塊單元，類似於檔案破碎狀態。而寫入
速度本文在此提出兩種參數比較，一為大小
區塊單元比為 1:1 以及 1:8，此兩種參數比
寫入速度之比較，表 1 所示，可看出以 1:8
之參數比平均寫入速度相當固定，而以 1:1
之參數比由於相似於檔案破碎狀態，因此會
有±3~10 秒之起伏，但由此表可看出大區塊
單元寫入速度亦高於小區塊單元。 
表 1: 大小區塊單元不同參數比比較表 
 
此外，本文亦將一般之 FAT 格式檔案系
統模組化，可讓使用者依照應用之場合選擇
以 FAT 或者是 FAT+之儲存格式儲存檔案。
因此，在這裡本文也將一般的 FAT 檔案系統
與 FAT+做個比較表。 
 
 
圖 20: 以一般 FAT 格式儲存檔案 
如圖 20 所示，則是以一般 FAT 格式寫入
兩種檔案，一是單一檔案 1.25MB 檔案名稱
為 FG .H、另一個為 10 個檔案分別為 128KB
檔案名稱為 K~T，每次儲存以檔案破碎之
狀態寫入，其破碎狀態為 Cluster 固定以 100
與 28 寫入檔案，以此狀態與 FAT+參數比
1:1 之寫入速度做比較，其比較如表 2 所示。
由下表可看出以檔案格式、檔案大小變化不
大之特性下，於一般 FAT 格式置於嵌入式應
用中與本文所規劃之 FAT+相較之下，本文
所規劃 FAT+檔案寫入速度優於 FAT，由於
主要在 FAT+使用大區塊單元與小區塊單元
的規劃上是專門為了特殊場合所使用，對於
特定的檔案儲存方式有著比傳統 FAT 檔案
系統有較為優良的儲存方式，但並不代表
FAT 檔案系統可以因此退而不用，一般的應
用場合還是傳統的 FAT 的對於磁碟的使用
率較好。 
 
 表 2: 一般 FAT 與 FAT+寫入速度比較表 
