which no node in the system is privileged, then the system is deadlocked. Otherwise, the central
daemon in the system will non-deterministically select exactly one privileged processor and exactly
one executable rule in the processor’s local algorithm, and let the selected processor execute the
action part of the selected rule. The local state of the selected processor thus changes, which in the
meantime results in the change of the global configuration of the system. The system will repeat
the above process to change configurations as long as it does not encounter any deadlock situation.
Thus the behavior of the system under the action of the algorithm can be described by executions
defined as follows: an infinite sequence of configurations Γ = (γ1, γ2, . . .) of a distributed system
is called an infinite execution (of the algorithm in the system) under the central daemon model if
for any i ≥ 1, γi+1 is obtained from γi after exactly one processor in the system makes a move
in the ith step γi → γi+1; a finite sequence of configurations Γ = (γ1, γ2, . . . , γk) of a distributed
system is called a finite execution (of the algorithm in the system) under the central daemon model
if (1) k = 1, or for any i = 1, 2, . . . , k − 1, γi+1 is obtained from γi after exactly one processor
in the system makes a move in the ith step γi → γi+1, and (2) no node is privileged in the last
configuration γk.
The non-fair distributed daemon model (or, simply, distributed daemon model) was later con-
sidered by Burns [2] in 1987. The difference between the central daemon model and the distributed
daemon model is the number of processors that make moves in a step of an execution of the
algorithm. Under the central daemon model, exactly one privileged processor in the system is
non-deterministically selected by the central daemon to make a move in a step of an execution of
the algorithm. Under the distributed daemon model, however, an arbitrary number of privileged
processors are non-deterministically selected by the distributed daemon to simultaneously make
moves in a step. Thus, we can also define executions for the distributed daemon model as follows:
an infinite sequence of configurations Γ = (γ1, γ2, . . .) of a distributed system is called an infinite
execution (of the algorithm in the system) under the distributed daemon model if for any i ≥ 1,
γi+1 is obtained from γi after a certain number of privileged processors selected by the distributed
daemon simultaneously make moves in the ith step γi → γi+1; a finite sequence of configurations
Γ = (γ1, γ2, . . . , γk) of a distributed system is called a finite execution (of the algorithm in the
system) under the distributed daemon model if (1) k = 1, or for any i = 1, 2, . . . , k − 1, γi+1 is
obtained from γi after a certain number of privileged processors selected by the distributed daemon
simultaneously make moves in the ith step γi → γi+1, and (2) no node is privileged in the last con-
figuration γk. As a consequence of the above definitions, the central daemon model is a restricted
version of the distributed daemon model, i.e., the set of all distributed-daemon-model executions
contains the set of all central-daemon-model executions.
The weakly fair daemon model (or, simply, fair daemon model) [3] is a different restricted
version of the distributed daemon model. Precisely, an execution Γ under the distributed daemon
model is called an execution under the fair daemon model if for any suffix Γ′ of Γ, no node can be
privileged infinitely many times without making any move in Γ′. It follows immediately from this
definition that every finite execution is a fair-daemon-model execution.
1.2 Self-stabilization
A distributed algorithm and a subset of executions (of the algorithm under a certain computational
model), called legal executions, are designed to solve a specific problem such as the shortest path
problem, the bridge-finding problem, or the mutual exclusion problem, etc. Legal executions are
designed in such a way that if the system is engaged in any legal execution, the solution of the
2
time of the proposed algorithm under the distributed daemon model is verified to be O(m) steps,
where m is the number of edges in the system. In view of the above mentioned related works, the
proposed algorithm is the most efficient self-stabilizing edge-coloring algorithm for general graphs.
1.5 Organization of this paper
The rest of the paper is organized as follows: Section 2 introduces a new self-stabilizing algorithm
for edge-coloring general graphs with 2∆−1 colors. In Section 3, we prove that our algorithm is self-
stabilizing under the central daemon model. In the course of the proof, its worst-case stabilization
time is computed to be O(m) steps. In Section 4, we show that any execution of our algorithm under
the distributed daemon model can be converted into a longer or equal-length execution under the
central daemon model. Using this fact and the result obtained in Section 3 for the central daemon
model, we show that under the distributed daemon model our algorithm stabilizes in O(m) steps.
Finally, some remarks in Section 5 concludes this paper.
2 The proposed edge-coloring algorithm
The distributed system in consideration has a general underlying topology, and thus can be modelled
by a simple connected undirected graph G = (V,E), with each node u ∈ V representing a processor
in the system and each edge {u, v} ∈ E representing the bidirectional link connecting processors u
and v. It is assumed that
(1) each node in the system has a unique identifier and each node is denoted by its identifier,
(2) for any u ∈ V , N(u) denotes the set {v ∈ V | {u, v} ∈ E} (i.e., the set of neighbors of u),
(3) for any u ∈ V , N+(u) denotes the set {v ∈ N(u) | v > u},
(4) for any u ∈ V , N−(u) denotes the set {v ∈ N(u) | v < u},
(5) any u ∈ V maintains |N(u)| + 1 variables pu, cuv1 , cuv2 , . . . , and cuv|N(u)| , where v1, v2, . . . ,
v|N(u)| are neighbors of u,
(6) for any u ∈ V , the value of pu is taken from N(u)∪ {⊥},
(7) for any u ∈ V and for any v ∈ N(u), the value of cuv is taken from the color set B =
{0, 1, 2, . . . , 2∆− 2}, where ∆ is the maximum node degree of the system,
(8) for any u ∈ V , Q(u) denotes the predicate ∀x ∈ N(u), cux = cxu, and
(9) for any u ∈ V and for any v ∈ N(u), C(u, v) denotes the set {cux | x ∈ N(u)− {v}}.
Now we present our algorithm and legal executions intended to solve the edge-coloring problem as
follows:
Algorithm 1
{For any node u}
R1 ∃v ∈ N+(u) s.t. cuv 6= cvu → cuv := cvu
R2 Q(u)∧pu = ⊥∧∃v ∈ N
−(u) s.t. [pv = u∧cuv ∈ C(u, v)∪C(v, u)]→ cuv := min[B− (C(u, v)∪
C(v, u))]
R3 Q(u) ∧ ∃v ∈ N+(u) s.t. [cvu ∈ C(u, v) ∪ C(v, u) ∧ pv = ⊥] ∧ pu = ⊥ →
pu := max{x ∈ N
+(u) | cxu ∈ C(u, x) ∪ C(x, u) ∧ px = ⊥}
R4 Q(u) ∧ [pu < u ∨ (pu > u ∧ cpuu /∈ C(u, pu) ∪ C(pu, u))]→ pu := ⊥
Legal executions: are all those single-configuration executions (γ), where γ is any configura-
tion in which no node in the system is privileged.
Thus legitimate configurations are all those configurations in which no node is privileged. Note
4
3 Self-stabilization of Algorithm 1 under the central dae-
mon model
Our final goal is to show that Algorithm 1 self-stabilizes under the distributed daemon model to
legitimate configurations previously defined. In this section, we first prove that Algorithm 1 is self-
stabilizing under the central daemon model, because our proof for the distributed daemon model
needs to use this result for the central daemon model. In the course of our proof, we also compute
the worst-case stabilization time of Algorithm 1 under the central daemon model. However, due to
the space limitation, we omit most of the proofs of the following lemmas and theorems.
Lemma 2 Under the central daemon model, Algorithm 1 is self-stabilizing if and only if any exe-
cution of Algorithm 1 is a finite execution.
In the rest of this paper, let Γ = (γ1, γ2, . . .) denote an arbitrary execution of Algorithm 1 under
the central daemon model.
Lemma 3 Let u ∈ V and v ∈ N(u) with u < v. If γt1 and γt2 are two configurations in Γ such
that t1 < t2, cuv = cvu in γt1 and cuv 6= cvu in γt2, then v must execute R2 to change cvu in some
step in (γt1 , . . . , γt2).
Lemma 4 Let u ∈ V and v ∈ N(u). If γt1 and γt2 are two configurations in Γ such that t1 < t2,
cuv = cvu in both γt1 and γt2, and cuv remains fixed in (γt1 , . . . , γt2), then cvu remains fixed in
(γt1, . . . , γt2).
Lemma 5 Let u ∈ V and v ∈ N(u). If γt1, γt2 and γt3 are three configurations in Γ such that
t1 ≤ t2 < t3, for any y ∈ N(u) − {v}, cuy = cyu in γt1, cuv /∈ C(u, v) in γt2, and cuv remains fixed
in (γt1 , . . . , γt3), then cuv /∈ C(u, v) in γt3.
Corollary 1 Let u ∈ V and v ∈ N(u). If γt1 and γt2 are two configurations in Γ such that
t1 < t2, u executes R2 to change cuv in γt1 → γt1+1 and cuv remains fixed in (γt1+1, . . . , γt2), then
cuv /∈ C(u, v) in γt2.
Corollary 2 Let u ∈ V and v ∈ N(u) with u < v. If γt1 and γt2 are two configurations in Γ such
that t1 < t2, u executes R4 to change pu from v to ⊥ in γt1 → γt1+1, and cuv remains fixed in
(γt1, . . . , γt2), then cuv /∈ C(u, v) in γt2.
Lemma 6 Let u ∈ V and v ∈ N(u) with u < v. If u executes R3 to set pu = v in some step
γt1 → γt1+1 in Γ, then v can never execute R2 to change cvu in (γ1, γ2, . . . , γt1).
Lemma 7 Let u ∈ V and v ∈ N(u) with u < v. Then u executes R3 to set pu = v at most twice
in Γ.
In the rest of this paper, let n denote the number of nodes in G and m denote the number of
edges in G. Thus it is obvious that Σu∈V |N
+(u)| = m, where |N+(u)| is the cardinality of N+(u).
For presentation’s sake, for i = 1, 2, 3, 4, we call a step in Γ an Ri step if rule Ri is executed in
that step.
Lemma 8 The number of R3 steps in Γ is at most 2m.
6
Lemma 19 Let u be any node and let Γ′ = (γt1 , γt1+1, . . . , γt2) be any segment of Γ in which there
is no R1 step, u does not make any move, and in every R2 step of Γ′ only a node greater than u
makes a move. If u is privileged by R2 and there is a node v ∈ N−(u) such that pv = u ∧ cuv ∈
C(u, v)∪C(v, u) in γt1, then u is also privileged by R2 and pv = u∧ cuv ∈ C(u, v)∪C(v, u) in γt2,
and in this case, if u executes R2 to change cuv in γt2 → γt2+1, then the value of cuv in γt2+1 is
equal to min[B − (C(u, v) ∪ C(v, u))] in γt1.
Lemma 20 Let u be any node and let Γ′ = (γt1 , γt1+1, . . . , γt2) be any segment of Γ in which there
is no R1 step, u does not make any move, and in every R2 step of Γ′ only a node greater than u
makes a move. If there is a node v ∈ N−(u) such that u is privileged to execute R2 to change cuv
in γt1, then u is also privileged to execute R2 to change cuv in γt2, and in this case, if u executes R2
to change cuv in γt2 → γt2+1, then the value of cuv in γt2+1 is equal to min[B − (C(u, v)∪C(v, u))]
in γt1.
Lemma 21 Let u be any node and let Γ′ = (γt1 , γt1+1, . . . , γt2) be any segment of Γ in which u does
not make any move. If u is privileged by R1 and there is a node v ∈ N+(u) such that cuv 6= cvu in
γt1, then u is privileged by R1 and cuv 6= cvu in γt2, and in this case, if u executes R1 to change cuv
in γt2 → γt2+1, then the value of cuv in γt2+1 is equal to the value of cvu in γt1.
Lemma 22 Let u be any node and let Γ′ = (γt1 , γt1+1, . . . , γt2) be any segment of Γ in which u does
not make any move. If there is a node v ∈ N+(u) such that u is privileged to execute R1 to change
cuv in γt1, then u is also privileged to execute R1 to change cuv in γt2, and in this case, if u executes
R1 to change cuv in γt2 → γt2+1, then the value of cuv in γt2+1 is equal to the value of cvu in γt1.
Lemma 23 Let δ → δ′ be a step of an execution of Algorithm 1 under the distributed daemon
model. Suppose there are k nodes that make moves in δ → δ′. Then there exists a segment
Γδ = (γ0, γ1, . . . , γk) of an execution of Algorithm 1 under the central daemon model such that
γ0 = δ and γk = δ
′.
Theorem 3 Under the distributed daemon model, Algorithm 1 is self-stabilizing and the worst-case
stabilization time of Algorithm 1 is O(m) steps.
Proof. Let Γd = (γd1 , γ
d
2 , . . .) be any execution of Algorithm 1 under the distributed daemon
model. By Lemma 23, for any step γdt → γ
d
t+1 in Γ
d, we can find a segment Γct = (γ
c
t0, γ
c
t1, . . . , γ
c
tkt
)
of an execution of Algorithm 1 under the central daemon model such that kt ≥ 1, γ
c
t0 = γ
d
t and
γctkt = γ
d
t+1. It follows that γ
c
tkt
= γc(t+1)0. By combining all these segments, we get an execution
Γc = (γc10, γ
c
11, . . . , γ
c
1k1
= γc20, γ
c
21, . . . , γ
c
2k2
= γc30, . . .) of Algorithm 1 under the central daemon
model. Evidently, Γc is not shorter than Γd. By Theorem 2, Γc is finite. Hence Γd is finite. By
Lemma 16, Algorithm 1 is self-stabilizing under the distributed daemon model. Since Γc is not
shorter than Γd, it follows from Theorem 2 that the worst-case stabilization time of Algorithm 1
under the distributed daemon model is O(m) steps.
5 Concluding remarks
In this paper, we have proposed a self-stabilizing edge-coloring algorithm for general graphs under
the distributed daemon model. The proof of the stabilization property of our algorithm under
8
1v1 v2 v3 vn 1 vn
1111
The distributed 
daemon selects all 
nodes to execute R1.
Every node is 
privileged by R1.
2
v1 v2 v3 vn 1 vn
2222
Every node is 
privileged by R1.
1
v1 v2 v3 vn 1 vn
1111
Every node is 
privileged by R1.
The distributed 
daemon selects all 
nodes to execute R1.
Figure 1: An infinite execution of Algorithm 1 under the distributed daemon model.
[4] A. Arora, M.G. Gouda, Distributed reset, IEEE Trans. Comput. 43 1026-1038 (1994).
[5] T.C. Huang, J.C. Lin, H.J. Chen, A self-stabilizing algorithm which finds a 2-center of a tree,
Comput. Math. Appl. 40, 607-624 (2000).
[6] T.C. Huang, J.C. Lin, A self-stabilizing algorithm for the shortest path problem in a distributed
system, Comput. Math. Appl. 43, 103-109 (2002).
[7] T.C. Huang, A self-stabilizing algorithm for the shortest path problem assuming the distributed
daemon, Comput. Math. Appl. 50, 671-681(2005).
[8] T.C. Huang, J.C. Lin, C.Y. Chen, C.P. Wang, A self-stabilizing algorithm for finding a minimal
2-dominating set assuming the distributed demon model, Comput. Math. Appl. 54, 350-356
(2007).
[9] S-T. Huang, C-H. Tzeng, Distributed Edge Coloration for Bipartite Networks, LNCS 4280,
363-377 (2006).
[10] C-H. Tzeng, J-R. Jiang, S-T. Huang, A self-stabilizing (∆ + 4)-edge-coloring algorithm for
planar graphs in anonymous uniform systems, Inform. Process. Lett. 101, 168–173 (2007).
[11] Y. Sakurai, F. Ooshita, and T. Masuzawa, A Self-stabilizing Link-Coloring Protocol Resilient
to Byzantine Faults in Tree Networks, LNCS 3544, (2005) 283-298.
[12] T. Masuzawa, S. Tixeuil, A Self-stabilizing Link-Coloring Protocol Resilient to Unbounded
Byzantine Faults in Arbitrary Networks, LNCS 3974, 118-129 (2006).
[13] P. Chaudhury, H. Thompson, A self-stabilizing distributed algorithm for edge-coloring general
graphs, Australas. J. Comb. 38, 237-247 (2007).
[14] L. Kuszner, A. Nadolski, Self-stabilizing algorithm for edge-coloring of graphs, Found. of Com-
put. and Decis. Sci., 31 (2), 157-167 (2006).
10
98年度專題研究計畫研究成果彙整表 
計畫主持人：林基成 計畫編號：98-2221-E-155-042- 
計畫名稱：在分散式 daemon 計算模式下對一般圖形的邊著色的自我穩定演算法 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 2 2 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
