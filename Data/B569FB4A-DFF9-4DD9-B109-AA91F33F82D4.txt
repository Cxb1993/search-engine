 行政院國家科學委員會補助專題研究計畫; 成果報告   □ 期中進度報告 
即時線上節點排序演算法之設計與分析 
(第三年) 
 
計畫類別：; 個別型計畫  □ 整合型計畫 
計畫編號：NSC 97-2221-E-006-099-MY3 
執行期間： 99 年 8 月 1 日至 100 年 10 月 31 日 
 
計畫主持人：謝孫源 
共同主持人： 
計畫參與人員：洪婉馨、魏嘉成、陳俊安、高琪雅、吳宗翰 
 
 
成果報告類型(依經費核定清單規定繳交)：□精簡報告  ;完整報告 
 
本成果報告包括以下應繳交之附件： 
□赴國外出差或研習心得報告一份 
□赴大陸地區出差或研習心得報告一份 
□出席國際學術會議心得報告及發表之論文各一份 
□國際合作研究計畫國外研究報告書一份 
 
處理方式：除產學合作研究計畫、提升產業技術及人才培育研究計畫、列管計
畫及下列情形者外，得立即公開查詢 
          □涉及專利或其他智慧財產權，□一年□二年後可公開查詢 
          
執行單位：國立成功大學資訊工程系 
 
中   華   民   國  100  年  8  月   17  日 
 II
中文摘要 
 一個圖形的點排序是給定圖上的每一個點一個顏色，使得若有兩個點擁有相同顏色，則以這兩
點為端點的每一條路徑，必定存在一個擁有更大顏色的點。以線上即時的觀點來看點排序問題，點
v1, v2,…, vn是一個點接著一個點以任意順序的方式進入圖形中。而圖形的邊，則是由目前在圖形內
的點其在原本的圖上有邊的那些邊所組成。並且給定顏色後就不能再做更改。在本計畫中，我們設
計一個時間複雜度為 O(n3)的演算法來找到一般樹狀圖的線上點排序。我們也針對一種特殊的樹狀
圖，K1,n，也稱為星狀圖(stars)，設計一個最佳的線上即時演算法。接著，我們將我們的線上即時點
排序演算法修改為平行演算法，這個平行演算法需要 O(nlog2n)時間及 O(n3/log2n)處理器。 
關鍵字：點排序、線上即時、演算法、路徑圖、迴圈圖、樹狀圖、星狀圖、平行演算法。 
 
Abstract 
A node ranking of a graph G = (V, E) is a proper node coloring c: V → N such that any path in G with 
end nodes x, y fulfilling c(x) = c(y) contains an internal node z with c(z) > c(x). In the on-line version of 
the node ranking problem, the node v1, v2,…, vn are coming one by one in an arbitrary order; and only the 
edges of the subgraph induced by {v1, v2,…, vi} are known when the color for node vi be chosen. And the 
assigned color can not be changed later. In this project, we present a O(n3)-time algorithm to find an 
on-line node ranking for general tree. We also present an optimal on-line algorithm for special trees, K1,n, 
also called stars. Secondly, we modify our on-line node ranking algorithms to parallel algorithm in 
O(nlog2n) time using O(n3/log2n) processors. 
KEYWORD: Node-ranking, on-line, algorithm, path, cycle, tree, star, parallel algorithm. 
 
 
4 3 
1 
1 
2 
1 
1 
5 
v6 
v5 
v7 
v8 
v2 
v1 
v3 v4 
圖二：樹狀圖的一種線上即時點排序  
 2
設計了一個
O(nl
在點排序問題的平行演算法方面，Liang等人[19]在CREW PRAM模型中，設計了一個需要O(logn)
時間
而在線上即時點排序問題中，Bruoth和Horňák[5]證明了路徑圖(path)和迴圈圖(cycle)的線上即時
點排
(二) 研究目的 
截至目前為止，線上即時點排序問題的結果還很少，而線上即時點排序問題又比點排序問題更
為重
(三) 研究方法、進行步驟及執行進度 
在過去的研究中，點排序問題已經有提出一些演算法來求點排序的值。Iyer等人[9]
ogn)-時間的演算法來求出樹狀圖(tree)的最佳點排序。之後，Schäffer[22]則將在樹狀圖的成果改
進為線性時間的演算法。Katchalski等人[13]證明出樹狀圖的點排序值的範圍為χr(T) ≤ 1 + ⎣log2|V(T)|⎦；
也針對平面圖，證明出一些定理。Deogun等人[6]設計了O(n3)-時間的演算法來解決區間圖(interval 
graphs)的點排序問題，O(n6)-時間的演算法來解決排列圖(permutation graphs)的點排序問題，以及
O(n3χr(G)3d–3)-時間的演算法解決d-trapexoid的圖形，這裡的n是指輸入圖形的總點數，χr(G)是圖形G
的點排序值。Yu[29]則設計了一個O(n)-時間的演算法來求cographs的點排序。Wang和Yu[27]也設計
了一個O(αn3)-時間的演算法來求區間圖(interval graphs)的點排序，這裡的α代表區間圖的clique個數。
Kloks等人[14]證明在asteroidal triple-free的圖形上找其點排序值是NP-complete的問題。Abbas和
Stewart[1]的演算法是花了O(n4(n + m))的時間來解決在biconvex圖形上的點排序問題，Hsieh[8]的演
算法是花了O(n + m)的時間來解決在starlike圖形上的點排序問題。 
及O(n2)處理器的平行演算法來解決樹狀圖上的點排序問題；而在EREW PRAM模型中，則是需
要O(log2n)時間及O(n)處理器。Yu[29]在EREW PRAM模型中，設計了一個需要O(nlogn)時間及O(logn)
處理器的平行演算法來解決cograph圖形上的點排序問題。之後，Liu和Yu[20]將上述在cograph的平
行演算法改進為在EREW PRAM模型中，需要O(logn)時間及O(n/logn)處理器。 
序值的範圍。Schiermeyer等人[23]則是證明了在一些條件受限的圖形G中，其線上即時點排序的
值為 3。 
要。所以在本計畫中，我們將要設計一個 O(n3)-時間的演算法，來求出一般樹狀圖的線上即時
點排序；並且將這個演算法套用在路徑圖及迴圈圖上。我們也將要針對一種特殊的樹狀圖，K1,n(也
稱為星狀圖)，設計一個最佳的線上即時點排序演算法。此外，我們也將會把上述的線上即時點排序
演算法，修改為需要 O(nlog2n)的時間及 O(n3/log2n)的處理器的平行演算法。 
4 
3 7 
8 
2 
1 
6 
5 
v6 
v5 
v7 
v8 
v2 
v1 
v3 
v4 v9 
9 
圖三：星狀圖的一種糟糕的輸入順序狀況 
 
 4
3.1.4 樹狀圖的平行演算法 
在樹狀圖的線上即時點排序平行演算法部份，將以演算法Algorithm ST為基礎來設計。在這個
平行
3.1.4 路徑圖與迴圈圖的平行演算法 
在路徑圖及迴圈圖的線上即時點排序的平行演算法部份，我們將採用一個新的陣列 mark，其大
小為
3-2 進行步驟 
 
在計劃的前二年中，已經將循序演算法 Algorithm ST 及平行演算法 Algorithm PT 設計完成如
下：
Algorithm ST(T, n) 
 the number of nodes of tree T. 
演算法中，我們將採用CREW PRAM的模型來設計。此外，我們將會採用一些已知的平行演算
法及其運用來協助我們設計平行演算法，如：Prefix Computation、Interval Broadcasting以及Euler Tour，
這幾個知名平行演算法的詳細內容都可以參考[2]或[12]內的介紹。 
r；這一個新的陣列是用來幫助我們選擇一個適合的顏色給新加入的點。除此之外，我們依然
將會採用一些已經眾所周知的平行演算法，如：Prefix Computation、Interval Broadcasting。 
本計畫第三年依下列步驟進行：
 
Input: An integer n =
Output: Assignment c of the colors to the nodes. 
   1 :1 nk ← dotofor
)(R            :5
1]][y[color_arra            :4
   1       :3
,, ,say }],,,,[{in   of neighbors  theand  node new  theRead      :2
ANK
21 211
*
k
k
mk
v
iv
ni
uuuvvvTTvv kk
←
←
= −
dotofor
KK
 
ocedure RANK(vk) Pr
)(R            :5
1]][y[color_arra            :4
   1       :3
,, ,say  }],,,,[{in   of neighbors  theand  node new  theRead      :2
   1 :1
ANK
21121
*
k
k
mkkk
v
iv
ni
uuuvvvTTvv
nk
←
←
=
←
−
dotofor
dotofor
KK
 
 
Procedure RANK(vk) 
),(_A_CM      :28
),(_AC      :27
)(      :26
color suitable  theFind                                                           1]mark[      :25
arraymark on n ComputatioPrefix Apply       :24
0]mark[               :23
           :22
1]mark[                :21
 0]mark[            :20
   1       :19
arraymark on n ComputatioPrefix Apply       :18
1]mark[               :17
 1]mark[ and ]combine[            :16
0]mark[                :15
 1]combine[            :14
   1      :13
}1,0          
]mark[ |{  where,set leader  array withmark on  ngBroadcasti IntervalApply      :12
1]mark[                :11
          :10
0]mark[                 :9
 1]combine[             :8
color suitable a Choose                                                            1       :7
]][y[color_arra]combine[ compute n toComputatioPrefix Apply             :6
   1       :5
:4
0]][y[color_arra      :3
1)(      :2
 0 :1
RRAYOLORODIFY
RRAYOLOR
1
colorv
colorv
colorvc
ncolor
j
j
j
nj
j
jmj
j
mj
nj
ri
jiSS
j
j
mj
nj
juj
nj
iv
vc
m
k
k
k
mi i
k
k
←
+←
←
←
←
←
←
−←←
←
−<
←
≤≤
==
−←
←
−<
←
∑=
←
←
←
=
≤≤
>
>
else
thenif
pardotofor
thenif
thenif
pardotofor
else
thenif
pardotofor
pardotofor
else
thenif
 
 
 6
 8
在 Algorithm ST 中，Procedure RANK 的第七行是為了找到符合 combine[color]為 m，而且
combine[i] ≥ m – 1，i > color 的最小顏色。而在 Algorithm PT 中，Procedure RANK 的第七行至第廿
五行是為了避免選到的顏色 k，使得 combine[k] < m – 1。在第十二行中，我們利用 Interval 
Broadcasting 的方法，來確保 combine[k] ≥ m – 1，k ≥ a。從在第十四行至第十七行中，則是確保我
們選到的顏色 color，其 combine[color]為 m。 
接下來，在第十八行中，我們利用 Prefix Computation 的方法，則我們就可以得知如果 mark[j]
為 0 時，就代表顏色 j 不能再被選用。在第十九行至第廿三行中，我們將 mark array 的值做變換，
這是為了幫助我們計算有多少顏色是不能再被選用。在第廿四行中，我們再一次使用 Predix 
Computation 的方法，這樣我們就可以得知有多少顏色不能被點 vk 來選用。最後，在第廿五行中，
我們就可以選用適合的顏色給點 vk。 
因此，我們就證明了在平行演算法 Algorithm PT 中，Procedure RANK 的第七行至第廿五行的執
行結果，與在循序演算法 Algorithm ST 中，Procedure RANK 的第七行的執行結果等價。 
步驟13. 證明在平行演算法 Algorithm PT 中的 Procedure MODIFY_COLOR_ARRAY 的執行結果，
將會和在循序演算法 Algorithm ST 中的 Procedure MODIFY_COLOR_ARRAY 的執行結
果等價。 
在循序演算法 Algorithm ST 中的 Procedure MODIFY_COLOR_ARRAY 是用來修正舊有點的
color_array，以確保其正確性，我們利用深度優先(Depth-First-Search)的方法來修正。 
在平行演算法 Algorithm PT 中的 Procedure MODIFY_COLOR_ARRAY，第一行至第八行是針對
modify array 進行初始化。在第九行中，我們利用 Euler Tour 及其相關運用的方法，來找出所有點的
祖先分別是哪些點，我們用一個 k × k 的矩陣來記錄每一個點的祖先。在第十行至第十一行中，我
們利用 Prefix Computation 的方法來計算在樹 T*中，有多少個點是以 vk為樹根。 
在第十五行至第十七行中，我們先利用 Prefix Computation 的方法計算得到 ANC[vi][j]的結果，
在藉由 ANC[vi][j]的結果來判斷是否需要修改點 vi的 color_array。最後，因為在樹 T*中的點，在加
入點 vk 的顏色 j 之後，其後來再加入的鄰居就不能再被選用顏色 j 了；因此我們修正這些點的
color_array，以確保其正確性。 
如此一來，我們就證明了在平行演算法 Algorithm PT 中的 Procedure MODIFY_COLOR_ARRAY
的執行結果，與在循序演算法 Algorithm ST 中的 Procedure MODIFY_COLOR_ARRAY 的執行結果
等價。 
步驟14. 證明平行演算法 Algorithm PT 和循序演算法 Algorithm ST 的執行結果會等價。 
根據步驟 12，我們證明了在平行演算法 Algorithm PT 中，Procedure RANK 的第七行至第廿五
行的執行結果，與在循序演算法 Algorithm ST 中，Procedure RANK 的第七行的執行結果等價。根據
步驟 13，我們證明了在平行演算法 Algorithm PT 中的 Procedure MODIFY_COLOR_ARRAY 的執行
結果，與在循序演算法 Algorithm ST 中的 Procedure MODIFY_COLOR_ARRAY 的執行結果等價。
除此之外，其他的步驟都可以很清楚知道其等價關係。因此，我們就可以得知平行演算法 Algorithm 
PT 的執行結果和循序演算法 Algorithm ST 的執行結果等價。 
 10
步驟18. 設計迴圈圖的線上即時點排序平行演算法及分析 
對於迴圈圖的部份，根據步驟 6 的結果，我們亦可以採用路徑圖的線上即時點排序平行演算法，
來求得迴圈圖的線上即時點排序。 
3-3 執行進度 
已完成步驟 1~5。 
年 99 100 
月 8 月 
9 
月 
10 
月 
11 
月 
12 
月 
1
月
2
月
3
月
4
月
5
月
6
月
7
月
8
月
9 
月 
10 
月 
步驟 12 ■ ■ ■ ■ ■           
步驟 13    ■ ■ ■ ■ ■        
步驟 14      ■ ■ ■ ■       
步驟 15       ■ ■ ■ ■      
步驟 16        ■ ■ ■ ■ ■    
步驟 17          ■ ■ ■ ■   
步驟 18           ■ ■ ■ ■ ■ 
(四) 結果與討論 
本計畫已完成之工作項目： 
第一年完成之工作項目： 
1. 設計樹狀圖的線上即時點排序演算法 Algorithm ST。 
2. 證明執行演算法 Algorithm ST 後，所得到的 function c 將會是輸入樹狀圖的一個線上即時點排
序的解。 
3. 分析樹狀圖的線上即時點排序演算法 Algorithm ST 的時間複雜度。 
4. 設計路徑圖的線上即時點排序演算法。 
5. 分析路徑圖的線上即時點排序演算法的時間複雜度。 
 
第二年完成之工作項目： 
6. 證明如果我們採用演算法 Algorithm SP 來求 n 個點的迴圈圖(Cn)的線上即時點排序的解，則執
行演算法 Algorithm SP 後，所得到的 function c 將會是迴圈圖(Cn)的一個線上即時點排序的解。 
7. 設計迴圈圖的線上即時點排序演算法。 
8. 分析迴圈圖的線上即時點排序演算法。 
9. 設計星狀圖的線上即時點排序演算法。 
10. 分析星狀圖的線上即時點排序演算法。 
 12
graph,” Proceeding of the 11th Annual Symposium on Theoretical Aspects of Computer Science, P. 
Enjalbert, E.W. Mayr, K.W. Wagner, Lecture Notes in Computer Science 775, Springer-Verlag, Berlin, 
1994, pp. 747–758. 
[7] I. S. Duff and J. K. Reid, “The multifrontal solution of indefinite sparse symmetric linear equations,” 
ACM Transactions on Mathematical Software 9, pp. 302–325, 1983. 
[8] S. Y. Hsieh, “On vertex ranking of a starlike graph,” Information Processing Letters 82, pp. 131–135, 
2002. 
[9] A. V. Iyer, H. D. Ratliff and G. Vijayan, “Optimal node ranking of trees,” Information Processing 
Letters 28, pp. 225–229, 1988. 
[10] A. V. Iyer, H. D. Ratliff, and G. Vijayan, “Parallel assembly of modular products-an analysis,” 
Technical Report 88–06, Georgia Institute of Technology, Atlanta, GA, 1988. 
[11] A. V. Iyer, H. D. Ratliff, and G. Vijayan, “On edge ranking problems of trees and graphs,” Discrete 
Applied Mathematics 30, pp. 43–52, 1991. 
[12] J. JáJá, “An introduction to parallel algorithms," Addison-Wesley, Reading, MA, 1992. 
[13] M. Katchalski, W. McCuaig, and S. Seager, “Ordered colorings,” Discrete Mathematics 142, pp. 
141–154, 1995. 
[14] T. Kloks, H. Müller, and C. K. Wong, “Vertex ranking of asteroidal triple-free graphs,” Proceeding of 
the 7th International Symposium on Algorithms and Computation (ISAAC'96), Springer-Verlag, 
Lecture Notes in Computer Science 1178, 1996, pp. 174–182. 
[15] C. W. Lee and J. S. T. Juan, “Parallel Algorithm for On-Line Ranking in Trees,” Proceeding of the 
22nd Workshop on Combinatorial Mathematics and Computational Theory, National Cheng Kung 
University, Tainan, Taiwan, May 20-21, 2005, pp. 151-156. 
[16] C. W. Lee and J. S. T. Juan, “On-Line Ranking Algorithm for Trees,” Proceeding of the 2005 
International Conference on Foundations of Computer Science, Monte Carlo Resort, Las Vegas, 
Nevada, USA, June 27-30, 2005, pp. 46-51. 
[17] C. W. Lee, J. S. T. Juan, and T. L. Wu, “An On-Line Parallel Algorithm for Node Ranking of Trees,” 
Proceeding of the International Conference on Algorithms and Architectures Parallel Processing 
(ICA3PP09), Taipei, Taiwan, June 8-11, 2009, Lecture Notes in Computer Science 5574, pp.384-395. 
[18] C. E. Leiserson, “Area efficient graph layouts for VLSI,” Proceeding of the 21st Annual IEEE 
Symposium on Foundations of Computer Science, 1980, pp. 270–281. 
[19] Y. Liang, S. K. Dhall and S. Lakshmivarahan, “Parallel algorithm for ranking of trees,” Proceedings 
of the Second IEEE Symposium on Parallel and Distributed Processing, 1990, pp. 26–31. 
[20] C. M. Liu and M. S. Yu, “An optimal parallel algorithm for node ranking of cographs,” Discrete 
Applied Mathematics, Vol. 87,pp.187–201, 1998. 
[21] J. W. H. Liu, “The role of elimination trees in sparse factorization,” SIAM Journal of Matrix Analysis 
and Applications 11, pp. 134–172, 1990. 
[22] A. A. Schäffer, “Optimal node ranking of trees in linear time," Information Processing Letters 33, pp. 
91–96, 1989. 
[23] I. Schiermeyer, Zs. Tuza, M. Voigt, “On-line rankings of graphs,” Discrete Mathematics 212, pp. 
141–147, 2000. 
[24] G. Semanišin, and R. Soták, “On-line ranking number of certain classes of graphs,” Proceedings of 
 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                     日期：100 年 10 月 27 日 
一、參加會議經過 
二、與會心得 
三、考察參觀活動(無是項活動者略) 
四、建議 
五、攜回資料名稱及內容 
六、其他 
 
 
計畫編號 NSC 97－2221－E－006－099－MY3 
計畫名稱 即時線上節點排序演算法之設計與分析 
出國人員
姓名 葉泰麟 
服務機構
及職稱 
國立成功大學資訊工程學系 
兼任助理 
會議時間 
100 年 9月 26 日 
至 
100 年 9月 28 日 
會議地點 捷克布拉格 
會議名稱 
(中文) 
(英文) 2nd International conference on Applied Informatics and 
Computing Theory (AICT’11) 
發表論文
題目 
(中文) 
(英文) Fault Diagnosis for Hypercube-Like Networks 
這一屆國際學術會議共有五十一篇論文被接受，並且都有安排口頭報告的時間。每 
一篇論文報告者都有二十分鐘左右的時間來進行報告，而所有被接受的論文，也都刊登
於Recent Researches in Applied Informatics(ISBN: 978-1-61804-034-3)這本書裡。 
會議的第一天，早上8點到現場報到後，緊接在8點45分之後開場及致詞後登場的是Chair: 
Metin Demiralp的talk，其演講題目為「Dominating the Constancy in Enhanced 
Multivariance Product Representation (EMPR)」，然後就開始會議論文報告，而會
議分為三個Session，分別為AICT Session、CSCS Session、WORLD MEDICAL Session，
而學生的論文則被歸納到AICT Session；接下來下午時間主辦單位還有舉辦了一個歡迎
下午茶會，接著就又開始會議論文報告，而第一天的會議論文報告有十七篇論文的發表。 
再接下來的第二天會議，也是學生報告的當天，下午分為二大議程，其主題分別為：
「Computer Applications on Telecommunications」、「Modeling and Simulation」，
學生的議程主題為「Modeling and Simulation」，學生的時間是被安排在下午2點到4
點30分之間的第7位報告者，學生所發表的論文題目為「Fault Diagnosis for 
Hypercube-Like Networks」，經過20分鐘後的報告，Conference room c的Chair: Daewon 
Kim問一些基本的diagnosis問題，並詢問是否會繼續往下延伸至其他拓樸結構，而台下
的聆聽者也有問一些零星問題,主要都是問些有關於diagnosis的演算法效率及功用，而
第二天總共有十八篇論文發表。結束第二天的會議之後，接著是晚上的晚宴，所以參與
此會議的演講者皆可入場，並且在第一天報到的時候就會發放會議識別證和晚餐識別
證，所以有晚餐識別證的人都可以進入晚宴會場。 
第三天早上首先登場的是Dr. Frantisek Straka 的專題演講，其演講的題目為
「Collagen I Scaffold and Valve Interstitial Cells a Promising Approach for Heart 
Valves Tissue Engineering」；接下來的議程有六篇論文進行發表，其主題為：「Business 
在這次出國的期間體會到外國的讀書風氣，不太像是亞洲地區的埋頭苦讀寫作方式，而
且採取比較放鬆但有條理的研究方式，不但不會造成壓力過大，反而更會激發出不一樣
的想法於自我的研究當中，倘若在想不出任何研究進展時，坐在露天的咖啡廳中，的確
能增加更多腦袋休息的空間並且可以重新整理出不一樣的思維。 
這三天的會議安排相當紮實，所給予的Lecture也是幫助很大，尤其是每個上台報告
的學者都闡述的清楚又生動，然而美中不足的是這期間大會應該幫忙安排到當地會議舉
行地方的交通方式，在捷克文、捷克語不熟悉的情況下，購買乘車票有明顯的困難。還
有在當地消費的飾物，因為捷克布拉格買賣所提供的幣值為捷克當地的幣值，在台灣的
銀行根本沒有相對應的外幣兌換，以至於必須先換成歐元之後，前往捷克當地再換成克
朗，所以經過二道手續費的確造成不少的金錢流失。不過還是很慶幸可以藉由此次國科
會的協助出國開闊視野，的確讓學生見識到外國的讀書風氣與學術交流，倘若有下次機
會，學生更會善加利用這難得的好機會，極力爭取國際會議的論文發表。 
 
三、考察參觀活動(無是項活動者略) 
 由於本次會議沒有額外的考察參觀活動，因此在會議三天結束之後便與同行發表
論文的學長一同前往當地的著名景點，例如查理大橋、火藥塔、瓦茲拉夫廣場、天
文鐘廣場，還有品嚐當地著名的黑啤酒跟德國豬腳。 
 
 
 
 
 
當地德國豬腳 
 
瓦茲拉夫廣場 
 
 
 
表性的國際會議應多鼓勵國內學者或研究生多多參與，以提昇國際地位，並提高國內之 
研究水準，也增加國內各校研究生彼此之間的互動。 
但由於歐洲的各方面消費頗高，單只補助少許的生活費實在不足食住行的開銷，希
望如果可以的話，多增加些補助款項。而在出國前，也希望可以提早說明補助時所需要
提供的資料，以免可能準備不足而錯過了可以申請某項補助的機會。 
 
五、攜回資料名稱及內容 
1.研討會論文集Recent Researches in Applied Informatics(ISBN: 978-1-61804-034-3)
及光碟一片。 
2. 研討會註冊收據一張。 
3. 研討會三天各時段時間的詳細內容一份。 
 
六、其他 
照片記錄：(一) 學生參加本次研討會發表論文時 
 
照片記錄：(二) 研討會舉辦在 HOTEL ADRIA in Prague 
 
 
 
 
 
照片記錄：(四) 研討會註冊收據 
 
 
 
 
 
 
 
  
Each graph G belonging to this class is derived by merging two 
graphs, G0 and G1, where |V(G0)| = |V(G1)| = n, using n pairwise 
nonadjacent edges joining nodes in G0 with nodes in G1. It has 
been shown that, under the MM* model, all the faulty nodes in 
an n-dimensional hypercube-like networks can be identified 
correctly and completely, provided that the number of faulty 
processors is bounded by n for 5≥n  [7]. Given a syndrome of 
a given graph belonging to a class of hypercube-like networks, 
we first derive some new properties of hypercube-like networks 
based on their cycle decompositions. We then propose a 
O(N(log2N)
2
)-time diagnosis algorithm for hypercube-like 
networks under the MM* model. The proposed algorithm 
improves the Sengupta-Dahbura's algorithm [22] on a class of 
hypercube-like Networks.  
The remainder of this paper is organized as follows: Section 
II introduces some definitions, notations, and properties. 
Section III investigates the cycle decomposition properties of 
hypercube-like networks. Section IV presents the proposed 
diagnosis algorithm. Section V contains some concluding 
remarks. 
II. PRELIMINARIES 
A graph G = (V, E) is a pair of the node set V and the edge set 
E, where V is a finite set and E is a subset of {(u, v)| (u, v) is an 
unordered pair of V}. We also use V(G) and E(G) to denote the 
node set and edge set of G, respectively. It is well known that the 
topological structure of an interconnection network (network 
for brevity) can be modeled by a connected graph G = (V, E). If 
(u, v) is an edge in G, we say that u is adjacent to v. A neighbor 
of a node u in G is any node that is adjacent to u. Moreover, we 
use N(u) to denote the set of all its neighboring nodes, i.e., N(u) 
= {v ∈  V (G)| v is adjacent to u}. The degree of a node u, 
denoted by deg(u), in a simple graph G is the number of edges 
incident to u, i.e., deg(u) = |N(u)|. A graph G is said to be 
k-regular if the common degree of G is k.  
A path P[v0, vt] = 〈v0, v1, …, vt〉is a sequence of distinct 
nodes such that any two consecutive nodes are adjacent, where 
v0 and vt are the end-nodes of the path. A path may contain other 
subpaths, denoted by 〈v0, v1, … , vi, P[vi, vj], vj, vj+1, … , vt〉, 
where P[vi, vj] = 〈vi, vi+1, … , vj−1, vj〉. A cycle 〈v0, v1, …, vk〉 
for k ≥  2 is a sequence of nodes in which any two consecutive 
nodes are adjacent, where v0, v1, …, vk are all distinct. A cycle 
that traverses each node of G exactly once is a Hamiltonian 
cycle and a graph is said to be Hamiltonian if there exists a 
Hamiltonian cycle. A subgraph of a graph G = (V, E) is a graph 
(V’, E’) such that V’ ⊆ V and E’ ⊆ E. Given a set V’ ⊆ V , the 
subgraph of G = (V, E) induced by V’, denoted by G[V’], is the 
graph G’ = (V’, E’), where E’ = {(u, v) ∈ E : u, v ∈ V’}. An 
isomorphism from a simple graph G to a simple graph H is a 
one-to-one and onto function π : V(G) → V(H) such that (u, v) ∈ 
E(G) if and only if (π(u), π(v)) ∈ E(H). We say “G is isomorphic 
to H”, written as G ≅  H, if there is an isomorphism from G to H.  
In the PMC model, one node is assigned to test another node 
if and only if they are adjacent. Let r(u, v) = 0 (resp. 1) denote 
that u evaluates v as fault-free (resp. faulty). The collection of 
all test results forms a test syndrome, denoted as r. The PMC 
model assumes that a test result is 0 if the two relevant nodes are 
fault-free, is 1 if the tester is fault-free but the tested node is 
faulty, and is unpredictable if the tester is faulty, as shown in 
TABLE I.  
The MM* model deals with a faulty diagnosis by sending the 
same task from a node w to each pair of its distinct neighbors, u 
and v, and then comparing their responses. Diagnosis by the 
comparison approach can be modeled by a labeled multigraph, 
called the comparison graph M(G) = (V(G), L(G)), where V(G) 
is the set of all nodes and L(G) is the set of labeled edges, as 
shown in Fig. 1. A labeled edge (u, v)w ∈ L(G), with w being a 
label on the edge, connects u and v, which implies that nodes u 
and v are being compared by w.  
For (u, v)w ∈ L(G), the output of comparator w of u and v is 
denoted by r((u, v)w), a disagreement of the output is denoted by 
the comparison results r((u, v)w) = 1, whereas an agreement is 
denoted by r((u, v)w) = 0. The collection of all the comparison 
results is called a syndrome and denoted by r. Under the MM* 
model, each node w is a comparator for the pair of nodes u and v 
only if (w, u) ∈ E(G) and (w, v) ∈ E(G).  
Since the comparator node itself might be faulty, a 
comparison result r((u, v)w) = 0 implies that if the comparator 
node w is fault-free, then the compared nodes u and v are 
fault-free; on the other hand, a comparison result r((u, v)w) = 1 
implies that at least one of three processors must be faulty. The 
possible comparison results for the different conditions of the 
three nodes are shown in TABLE II.  
It has been observed in [16], [17], [20] that, in general, two 
different sets of faulty nodes could produce the same syndrome. 
A self-diagnosable system as presented above is called a 
t-diagnosable system if for every syndrome, there is a unique set 
of faulty nodes that could produce the syndrome, provided that 
the number of faulty nodes does not exceed t. Hence, these 
faulty nodes can be uniquely identified.  
Definition 1. Let r be a syndrome on system G. A cycle in G is 
TABLE I 
UNITS FOR MAGNETIC PROPERTIES 
Tested Tested node Tested result 
Fault-free Fault-free 0 
Fault-free Faulty 1 
Faulty Any case 0 or 1 
 
 
 
Fig. 1 A system G and its comparison graph M(G) 
Recent Researches ιn Applied Informatics
ISBN: 978-1-61804-034-3 206
  
cycle decomposition of HLn. 
(1) If C is r-zero, then all nodes on C are r-zero. 
(2) If C is r-nonzero, then all nodes on C are r-nonzero. 
(3) C is r-guarded if C is r-nonzero but is adjacent to some 
r-zero cycle. All nodes on an r-guarded cycle are r-guarded. 
(4) C is r-unguarded if C is r-nonzero and is not adjacent to 
any r-zero cycle. All nodes on an r-unguarded cycle are 
r-unguarded. 
For a node v in a cycle C of a cycle decomposition, the nodes 
in C that are adjacent to v are called internal neighbors and outer 
neighbors otherwise. Our diagnosis algorithm is based on the 
following lemma. 
Lemma 8. Let r be a syndrome on HLn for 11≥n . Assume there 
are at most n faulty nodes in HLn. In addition, let 
 2)1(log2)( 2 += nnα . Then, the following five conditions 
hold: 
(1) The nodes in every r-zero cycle in Dα(n)(G) are fault-free. 
(2) There is an r-zero cycle in Dα(n)(G). 
(3) There is at most one r-unguarded cycle in Dα(n)(G). 
(4) If there is an r-unguarded cycle C in Dα(n)(G), then there is 
at most one node on C such that all of its r-guarded neighboring 
nodes are faulty. 
(5) If there is one node on an r-unguarded cycle in Dα(n)(G) 
such that all of its r-guarded outer neighbors are faulty and each 
of its r-unguarded internal neighbors is either faulty or not 
adjacent to any fault-free r-guarded node, then the node is 
fault-free.  
Proof. Statement 1 can be shown as follows. Every cycle C in 
Dα(n)(G) consists of   122
2)1(log2)( 2 +≥= + nnnα  nodes. By 
Lemma 1, all the nodes in C has the same state. Moreover, since 
the number of faulty nodes is at most n, the nodes in C are 
fault-free. 
Statement 2 can be shown as follows. Since Dα(n)(G) contains 
  122 2)1(log2)( 2 +≥= +−− nnnnn α  cycles and the number of 
faulty nodes is at most n, then there must exist a cycle whose 
nodes are all fault-free nodes. By Definition 1, this cycle an 
r-zero cycle. 
Statement 3 can be shown using a contradiction. Assume 
there are two distinct r-unguarded cycles. Then, by Lemma 7, 
Dα(n)(G) would contain at least 
  12)2)1(log2(22))((2 2 +≥−+−=−− nnnnn α  
r-nonzero cycles. According to Lemma 1, there is at least 1+n  
faulty nodes, which leads to a contradiction. 
Statement 4 can be shown using a contradiction. Note that 
each outer neighbor of u (v) is r-guarded. Assume that there are 
two distinct nodes u and v on C such that their outer neighbors 
are faulty. Since each node has )(nn α−  outer neighbors and 
any two nodes in a graph belonging to HLn have at most two 
common neighbors (by Lemma 3), there are at least 
  12)2)1(log2(22))((2 2 +≥−+−=−− nnnnn α  faulty 
nodes in G, which leads a contradiction. 
If the conditions of statement 5 does not hold, there are at 
least 1)()( ++− nnn αα  faulty nodes, which leads to a 
contradiction.  
Based on the Lemma 8, the proposed algorithm is presented 
as follows.  
Algorithm 1: HL_DIAG 
input: (a) an integer 11≥n ; (b) )(nα ; (c) a cycle 
decomposition Dα(n)(G) of a graph G ∈ HLn, and (d) a 
syndrome r on G. 
output: A sequence (V0, V1), where V0 is the set of nodes that 
are diagnosed fault-free and V1 is the set of nodes that are 
diagnosed as faulty. 
Step 0: V0 := {}; V1 := {}.  
Step 1: Check all the cycles in Dα(n)(G) to determine all r-zero 
cycles and r-nonzero cycles. All the nodes on r-zero cycles 
are r-zero nodes and all the nodes on r-nonzero cycles are 
r-nonzero nodes. Diagnose all r-zero nodes as fault-free. Add 
all fault-free nodes into V0.  
Step 2: For each r-nonzero node u that is r-guarded, if there is 
an r-zero node w that is adjacent to u, and an r-zero node v 
that is adjacent to w, then diagnose u as “fault-free” or “faulty” 
according as r((u, v)w) = 0 or 1. Add all fault-free nodes into 
V0 and all faulty nodes into V1. 
Step 3: For each r-nonzero node u that is r-unguarded, if there 
is an r-guarded node w that is adjacent to u, and an r-guarded 
node v that is adjacent to w such that both w and v have been 
diagnosed as “fault-free”, then diagnose u as “fault-free” or 
“faulty” according as r((u, v)w) = 0 or 1. Add all fault-free 
nodes into V0 and all faulty nodes into V1. 
Step 4: For each remaining r-nonzero node u that is 
r-unguarded, if there is an r-unguarded node w that is an 
internal neighbor of u, and an r-guarded node v that is 
adjacent to w such that both w and v have been diagnosed as 
“fault-free”, then diagnose u as “fault-free” or “faulty” 
according as r((u, v)w) = 0 or 1. Add all fault-free nodes into 
V0 and all faulty nodes into V1. 
Step 5: For each node that is diagnosed as “undiagnosed”, 
then diagnose it as “fault-free”. Add all fault-free nodes into 
V0.  
Step 6: V0 is the set of nodes that have been diagnosed as 
fault-free and V1 is the set of nodes that have been diagnosed 
as faulty. Return (V0, V1).  
Lemma 9. Algorithm HL_DIAG can be implemented in 
linear-time. 
Proof. Step 1 take O(n2
n
) time; Step 2-4 takes O(n
2
2
n
) time, and 
Step 5 takes O(2
n
). So the total time needed by HL_DIAG when 
running on a syndrome on HLn is O(n
2
2
n
) = O(N(log2N)
2
). Note 
that the size of input for algorithm HL_DIAG is O(n
2
2
n
). 
Therefore, the time of algorithm HL_DIAG is linear in the size 
of input.  
According to Lemma 8 and Algorithm HL DIAG, we have 
the following result. 
Theorem 1. Let  2)1(log2)( 2 += nnα . Then, any n faulty 
nodes in a graph G ∈ HLn for 11≥n  can be diagnosed in linear 
time if the following two condition hold: 
(1) Every cycle in a cycle decomposition Dα(n)(G) is adjacent 
to at least ))(( nn α−  cycles in the same cycle 
decomposition. 
Recent Researches ιn Applied Informatics
ISBN: 978-1-61804-034-3 208
國科會補助計畫衍生研發成果推廣資料表
日期:2011/08/18
國科會補助計畫
計畫名稱: 即時線上節點排序演算法之設計與分析
計畫主持人: 謝孫源
計畫編號: 97-2221-E-006-099-MY3 學門領域: 計算機理論與演算法
無研發成果推廣資料
其他成果 
(無法以量化表達之
成果如辦理學術活
動、獲得獎項、重要
國際合作、研究成果
國際影響力及其他協
助產業技術發展之具
體效益事項等，請以
文字敘述填列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
