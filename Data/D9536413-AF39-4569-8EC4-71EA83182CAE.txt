中文摘要 
網路蠕蟲(Internet worm)為一可自動完成複製且破壞電腦與網際網路的惡意程式，其快速散播
的特性，對不斷成長的網際網路環境持續造成威脅，網路蠕蟲攻擊後造成的損失更是難以估
計，而現有的網路安全設備與軟體安全開發並無有效的方法可針對蠕蟲行為進行防治。本研
究中首先分析現有網路蠕蟲基本設計架構與各個元件功能，藉由網路安全防護角度來設計良
性蠕蟲(Friendly worm)的模組設計，透過此模組設計出來的良性蠕蟲經由 Testbed@TWISC 的
Emulab 封閉測試環境進行測試，根據設計條件達到網路安全維護的工作，有效協助網管人員
進行網路檢測代理，並更新修補程式等相關應用。 
關鍵詞：網路蠕蟲、網際網路、良性蠕蟲、安全性弱點 
 
 
Abstract 
The Internet worm is a program which can be repeated automatically and thus destroys computers 
and Internet space. Its characteristic of being easily spread constantly threatens the 
ceaselessly-growing Internet environment and causes inestimable damages. However, there’s no 
effective security device or software security development to aim at the Internet worm. Above all, 
this research analyzes the fundamental structure of its design and functions of each component and 
designs the module of friendly worm according to the perspective of network security protection. 
After being tested by a Testbed@TWISC's Emulab environment, this kind of friendly worm can 
achieve the goal of keeping Internet safe and being applied to security update program and other 
related ones.  
Keywords: Internet worm, Internet, Friendly worm, Vulnerability 
 
前言 
近年來，網路蠕蟲(Internet worm) [7-10]伴隨著多樣化傳播路徑和複雜的應用環境，使得
對電腦系統安全和網路安全的威脅日益增加。網路蠕蟲發生頻率也大幅提昇、潛伏期變得更
長、涵蓋面更廣，所造成的財務損失也更大。網路攻擊手法除了利用已知安全性弱點外，也
從傳統被動式入侵轉為主動式探測攻擊，模式由原有透過 E-Mail、網路芳鄰傳播，演變為利
用作業系統的安全性弱點入侵並進行探測，影響範圍由原來個人電腦的應用程式，延伸至網
路骨幹(backbone)、各式網路服務等。表 1 為利用各式弱點進行入侵並進行探測的蠕蟲範例，
以 Code Red 為例，在 9 個小時內就已成功入侵約二十五萬台電腦的 IIS Server；而隨後的
Slammer 是針對 SQL Server 進行攻擊，透過 UDP 協定攻擊 Port 1434，此外還以廣播方式快
速傳播蠕蟲。也因為 UDP 協定並不像 TCP 有連結導向(Connection-oriented)的連線方式，以
三向握手(Three-way handshake)建立連線，圖 1 所示為 Slammer 在短時間造成的災情分佈圖。
而後的 Blaster 則是充份利用 Microsoft DCOM 的安全性弱點，從自動重新開機，到植入 IRC 
Worm 進行跳板攻擊等，完全的攻陷用戶端，使用者完全無招架之力。Blaster 變種病毒 Welchia
則是以主動探測未修正 Microsoft DCOM 安全性弱點的電腦，並進行修補。但探測時採用的
ICMP echo 協定及 TCP Port 445 連線讓網路流量暴增，也讓網管人員不得不將 ICMP 及 TCP 
Port 445 封鎖。Sasser 則是利用 Local Security Authority Service(MS LSASS)遠端緩衝溢位造成
爆發的 CodeRed 等幾個網路蠕蟲的行為，在 2002 年將 CodeRed 這些網路蠕蟲的共同行為，
歸納出網路蠕蟲從目標選擇(Target Selection)開始，選擇利用安全性弱點(Exploitation)進行感
染目標(Infection)到最後反覆的傳播蠕蟲(Propagation)的蠕蟲生命週期四個階段 [11]。 
 
1. 目標選擇(Target Selection)：未受感染主機即將遭受攻擊感染的階段，這時網路蠕蟲正進
行偵察動作。網路蠕蟲必須決定它要攻擊那種作業系統平台，廣泛使用的平台會讓網路
蠕蟲有更大的感染範圍。其次，網路蠕蟲要選擇它要透過作業系統缺陷或軟體弱點來攻
擊相關服務。 
2. 利用安全性弱點(Exploitation)：當網路蠕蟲完成目標選擇階段任務後，則會藉著利用主機
所開啟的特定通訊埠服務，存在的特定安全性弱點來進一步嘗試利用安全性弱點程式發
動攻擊。 
3. 感染目標(Infection)：進入感染目標階段後，原先未受感染主機就變成了被感染主機。網
路蠕蟲就會在被感染主機上面複製自己，並依網路蠕蟲作者所下的定義執行其所需的動
作。 
4. 散播蠕蟲(Propagation)：網路蠕蟲藉著選擇新的目標來繼續它繁衍後代，這階段稱散播蠕
蟲階段，被感染的主機會藉由探測來選擇新的攻擊目標，這時候的網路流量是呈流出狀
態。與第一階段不同的是，在目標選擇階段，遠端被感染的主機選擇本地主機來進行探
測，在網路流量是呈流入狀態。 
 
網路蠕蟲週而復始的不斷循環這四個階段，讓網路蠕蟲的生命週期不斷延續下去，來達
到破壞網際網路的目的。 
 
Jose Nazario 等學者於 2001 年提出了網路蠕蟲的功能結構框架 [12]，主要為六個功能模
組：搜尋模組(Reconnaissance Capabilities)、特殊攻擊模組(Specific attack Capabilities)、命令
操作介面模組(Command Interface Capabilities)、通信模組(Communications Capabilities)、智慧
模組(Intelligence Capabilities)和非攻擊使用模組(Unused Attack Capabilities)。 
 
(一) 網路蠕蟲的傳播途徑 
網路蠕蟲可以藉由多種方式在網路上進行傳播，一般藉由以下幾種方式來進行： 
1. 作業系統或應用軟體的安全性弱點：網路蠕蟲最主要的傳播方式為透過 TCP/IP 通訊協
定，並利用作業系統、應用軟體或網路設備的安全性來進行攻擊。任何作業系統或應用
軟體都無法避免存在一些錯誤，開發者也不見得會立即發現，甚至是網路設備也不可避
免的存在缺陷，這個缺陷就是所謂的安全性弱點。網路蠕蟲就是利用電腦系統存在的安
全性弱點去撰寫程式來攻擊電腦網路。網路蠕蟲在發動攻擊時，首先會進行探測目標電
腦存在的安全性弱點，然後根據探測到的安全性弱點建立傳播路徑，最後再發動攻擊。
例如 2001 年的 Namda、2003 年的 SQL Slammer 蠕蟲與 Worm Blaster 蠕蟲，以及 2004
年的 Sasser 蠕蟲，都是屬於此類的範疇。 
2. Email 電子郵件傳播方式：Morris 蠕蟲是最早藉由電子郵件系統複製來進行傳播，網路蠕
蟲藉由使用者發送電子郵件，使用者在不知情的情況下點擊電子郵件附件，網路蠕蟲就
會感染此電腦。第一隻 Sobig 蠕蟲在 2005 年 5 月發作，Sober 蠕蟲誘騙收信人開啟含毒
優先原則，蠕蟲會選擇它所在網路內的 IP 位址。假設網路蠕蟲掃描的目標位址 IP 為 A，
則掃描的下一個位址 IP 為 A+1 或者 A−1。一旦掃描到具有很多安全性弱點主機的網路
時，就會達到很好的傳播效果。順序掃描策略的缺點是對同一台主機有可能會重複地掃
描，而引起網路擁塞。Blaster 是典型的順序掃描蠕蟲。 
4. 目標清單掃描：Staniford 等人提出了目標清單的掃描策略[9]，其目標清單是根據一份可
能容易被感染的目標清單資料庫，當網路蠕蟲在選擇感染目標時，會由這份目標清單資
料庫的 IP 位址進行嘗試感染。 
5. 路由掃描：C. C. Zou 等人提出了 routing worm 的概念 [6]，透過已知的 BGP 路由表來產
生 routing worm、/8 routing worm、/16 routing worm。當蠕蟲透過路由表中取得所有可用
的 IP 位置並進行攻擊，比起傳統的散佈時間短上許多，散播感染時間變可有效縮短。 
6. DNS 掃描策略：蠕蟲利用從 DNS 伺服器所得到的 IP 位址來建立目標主機位址清單，它
的優點是這些位址都是可用的，可大幅提高蠕蟲掃描的準確度。相對缺點為：1.清單涉
及範圍太小，查詢結果均由同一台 DNS 伺服器提供；2.蠕蟲需要攜帶一個相當大的位址
清單，將使得蠕蟲的傳播速度受到限制。 
7. 互助掃描策略：互助掃描策略是指蠕蟲會發送部份 IP 清單給每台被感染主機，然後每台
被感染主機再去掃描它所分得的 IP 區段，意指蠕蟲間的相互合作。當 A 主機感染 B 主
機後，A 主機將部份 IP 分給 B 主機，B 主機再開始掃所分得 IP 區段，一直循環傳播下
去。 
 
網路蠕蟲傳播速度的關鍵影響因素主要有四個：目標 IP 位址空間選擇、採用多線程搜尋、
有易感染主機列表以及傳播途徑的多樣化。因此，網路蠕蟲快速傳播的關鍵因素在於設計良
好的掃描策略。一般情況下，採用 DNS 掃描傳播的蠕蟲速度最慢，選擇性掃描和路由掃描比
隨機掃描的速度還要快;對於目標清單掃描，當列表超過 1M 位元組時，蠕蟲傳播的速度就會
比路由掃描蠕蟲慢；當列表大於 6M 時，蠕蟲傳播速度比隨機掃描還慢 [15]。互助掃描目前
還沒有找到容易實現且有效的演算法。因此，網路蠕蟲首先採用路由掃描，再利用隨機掃描
進行傳播是最佳選擇。 
 
良性蠕蟲設計 
系統存在弱點是網路蠕蟲傳播的前提。漏洞存在的必然性，網路蠕蟲才會長期存在，此
外，某個特定漏洞一般只存在於特定版本的系統或網路服務程式，利用單一或少量漏洞進行
傳播的網路蠕蟲必然會隨著系統的升級、服務程式的升級、漏洞修補而成為歷史。網路蠕蟲
開發者可以很快的利用新公佈的安全性弱點建構另一個惡意蠕蟲，例如 Li0n 蠕蟲整個傳播架
構和程式碼都是仿照 Ramen 蠕蟲，但替換了一個公佈時間較新的漏洞的攻擊程式碼，利用新
漏洞的蠕蟲可以具有更高的攻擊力。在本研究將採用模組化的方式設計良性蠕蟲，賦予感染
原件及指令元件具有高度的彈性，可以隨著任務的不同而調整其內容。 
前述文獻中，Jose Nazario 所提出的網路蠕蟲的五大基本元件與美國普渡大學 CERIAS 針
對蠕蟲傳播流程的定義可以發現，網路蠕蟲與行動代理人(Mobile Agent)的特性是相同的。行
動代理人(Mobile Agent)是一種可移動的程式，透過主機端依據某種特定目的派遣至伺服器端
的良性蠕蟲，並在不同主機間完成良性蠕蟲傳播。 
良性蠕蟲防治的機制可以從兩個方向來探討︰一是從它的實體架構來考慮，若破壞網路
蠕蟲的實體一部分，則破壞了它的完整性，使其不能正常工作。另一方面是從達到阻止它傳
播的目的，也同樣可以防治網路蠕蟲的威脅。本研究設計之良性蠕蟲的防護機制，具體可以
分為兩大安全措施︰ 
(1) 及時修補安全性弱點：根據影響範圍、破壞程度和傳播速度，並針對安全性弱點進
行等級評估，大部分網路蠕蟲利用的安全性弱點均為高危險安全性弱點。目前多數
有安全性弱點的軟體，其相對應的修補程式主要由該負責廠商所提供。良性蠕蟲則
透過即時修補安全性弱點，破壞了蠕蟲傳播的條件。 
(2) 網路安全檢測代理：入侵檢測技術可以採用網路蠕蟲的工作模式，網路蠕蟲完全符
合移動代理人的定義，結合移動代理技術，用於網路狀況資訊的獲取，而存在網路
蠕蟲主機都是很好的監控點。 
(二) 模組建構流程 
根據上述五大功能模組，在設計良性蠕蟲時依序如下： 
(1) Scan Module：掃描模組為一項重要因素，例如：SQL Snake 它是針對預設好的 IP
目標進行掃描，這樣可以避免像無頭蒼蠅般盲目的攻擊，特別是會避開 Class A 位
址中的 10.0.0.0~10.255.255.255，Class B位址中的 172.16.0.0~172.31.255.255與Class 
C 位址中的 192.168.0.0~192.168.255.255 三段私有 IP 位址，這三段位址不與網際網
路共用，路由器通常不會轉送這些 IPv4 位址。Nimda 與 CodeRed 蠕蟲是以跳躍式
（Island hopping）以隨機亂數的方式來掃描攻擊。在圖 3 中為產生目標 IP 的片段
程式碼，與進行本機端子網路循序掃描。 
(2) Exploit Module：開發良性蠕蟲首要目標為確定滲透的目標主機與如何利用目標，
這是一切網路蠕蟲的基本原則。選擇攻擊目標方面，所關心的是要選用哪種系統平
台與弱點服務來進行攻擊。不同的作業系統與版本，均有不同的系統代碼，在圖 4
為本研究良性蠕蟲判斷作業系統版本的片段程式碼。圖 5 為良性蠕蟲針對特定服務
的滲透 shellcode 片段程式碼。 
(3) Payload Module：當良性蠕蟲已經選擇好了目標主機，並且開始進行滲透攻擊，滲
透成功之後便是要將自己的程序(Process)隱藏在系統之中。而隱藏的方法有非常多
種，例如：安裝在系統核心(Kernel)之中，偽裝成惡意程式的 Rootkit，這些都是為
了要確保網路蠕蟲能夠隨時對這些目標主機進行控制，即使目標主機重新開機之
後，仍然會繼續執行網路蠕蟲。本研究中設計的是良性蠕蟲，並不需要刻意隱藏蠕
蟲的程序。圖 6 為良性蠕蟲設定為開機後執行的片段程式碼。安置良性蠕蟲程序
後，隨即進行系統修補的動作，在封閉測試環境中，良性蠕蟲取得系統修補程式是
利用 TFTP 來取得，圖 7 為取得系統修補程式與安裝修補程式片段程式碼。 
  
圖 6. 開機後執行的片段程式碼 
 
 
圖 7. 取得系統修補程式與安裝修補程式片段程式碼 
(4) Self-propagation Module：龐大的蠕蟲網路，一開始也都是從小範圍開始感染。從一
台主機受到感染開始，接著是區域子路路受到感染，再來根據需求進而對於內部網
路與外部廣域網路，最後整個網際網路的世界都會受到影響。在圖 8 片段程式碼
中，良性蠕蟲同樣利用 TFTP 的方式傳送自已的程式碼至目標主機。 
 
sprintf(cmdstr1, "tftp -i 10.1.1.23 GET %s\n", "WindowsXP-patch.exe"); 
sprintf(cmdstr, "tftp -i 10.1.1.23 GET %s\n", WORM_EXE) 
if (send(fd, cmdstr1, strlen(cmdstr1), 0) <= 0) 
  goto closesocket_and_return; 
if (send(fd, cmdstr, strlen(cmdstr), 0) <= 0) 
  goto closesocket_and_return; 
sprintf(cmdstr1, "start %s\n", "WindowsXP-patch.exe /f /q"); 
if (send(fd, cmdstr1, strlen(cmdstr1), 0) <= 0) 
  goto closesocket_and_return; 
Sleep(2000); 
RegCreateKeyEx( 
    /*hKey*/ HKEY_LOCAL_MACHINE, 
    /*lpSubKey*/ "SOFTWARE\\Microsoft\\Windows\\" 
    "CurrentVersion\\Run", 
    /*Reserved*/ 0, 
    /*lpClass*/ NULL, 
    /*dwOptions*/ REG_OPTION_NON_VOLATILE, 
    /*samDesired */ KEY_ALL_ACCESS, 
    /*lpSecurityAttributes*/ NULL, 
    /*phkResult */ &hKey, 
    /*lpdwDisposition */ 0); 
  RegSetValueExA(hKey, "friendly worm update", 0, REG_SZ, WormName, 50); 
RegCloseKey(hKey); 
 圖 9. 流程圖 
 
 
結論與未來研究方向 
至目前為止，在網路蠕蟲偵測及防治上，雖己提出許多機制，諸如流量偵測、入侵偵測
系統、入侵防禦系統、防火牆等等。而傳統的防禦架構不外乎就是防火牆串上入侵偵測再串
上防毒機置或是再串上網頁過濾或反垃圾郵件的香腸式資安防禦措施。但由於網路蠕蟲大多
會利用合法的通訊管道進行入侵，以傳統封包過濾（Packet filter）的防火牆顯然無法抵禦蠕
蟲的攻擊。而入侵偵測系統雖然可能發現蠕蟲的蹤跡，但由於大多數的入侵偵測系統都是以
特徵為基礎的（Signature-based）防禦機制，對新型的網路蠕蟲將失去偵測及防禦能力。或者
當網管人員看到相關的警示時，往往已經為時已晚，只能進行一些善後的處理工作。甚至因
為網路內過多的入侵偵測感測器、過多的路由器、交換集線器及一堆的伺服器，使得網管人
員也疲於奔命的修補系統、設定防禦規則，卻又於事無補。 
本研究主要目標為提出良性蠕蟲模組，透過此良性蠕蟲模型並加以實作，本研究之主要
貢獻如下所示： 
(1) 跳脫以往僅能透過標準程序取得並安裝修補程式的概念，利用此設計模式能建構出具有
修補能力的良性蠕蟲。 
(2) 藉由 Testbed@TWISC 合法封閉的 Emulab 環境中，建構出具有協助特性的良性網路蠕蟲。 
(3) 經由 Emulab 環境中的實驗證明，良性蠕蟲能有效藉由該弱點進行快速傳播工作，並有效
修補系統弱點。 
 
參考文獻 
1. CERT, "CERT Advisory CA-2001-23 Continued Threat of the "Code Red" Worm", 
 http://www.cert.org/advisories/CA-2001-23.html 
2. CERT, "CERT Advisory CA-2001-26 Nimda Worm", 
