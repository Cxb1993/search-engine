2是設計一個適用於 Java 軟體且全新的防
篡改技術。
二、設計方法
本計劃整合了三種軟體保護技術：不
明顯的雜湊運算（oblivious hashing）、
Guards Network、與複雜流程混淆法
（complex flow obfuscation）。並改良成
適用於 Java軟體的防篡改技術。
2.1 軟體的雜湊運算
其中一種可行的方法是在 Java 程式
中，加入額外的雜湊指令（ Hashing
Instruction），其負責在執行時期動態監控
堆疊的內容，確保堆疊的內容是否如先前
所預期的。其整體架構可利用圖 1來表示：
圖 1.不明顯的雜湊運算
圖 1 中深色的區塊就代表雜湊指令，
它負責取得上一個指令執行後所產生的
堆疊內容，轉換成相對應的雜湊值，並儲
存在區域變數之中。最後再將所有存放在
區域變數中的雜湊值，依序進行雜湊運
算，產生最終的雜湊值 H。此雜湊值 H即
可用來當成此指令區塊的特徵值。藉由比
對雜湊值 H是否正確，即可判別此指令區
塊是否曾經被篡改。
2.2 Guards Network
本計劃引入 Hoi Chang等人[3]所提出
的 Guards Network概念。Guard是指一段
與程式本義無關的程式碼，負責在程式執
行時進行一些與安全相關的行為。針對本
計劃而言，Guard 則是指負責計算與核對
最終雜湊碼 H的程式碼區塊。其主要的任
務有兩部份：
 核對（checksum）：在程式執行時，
核對其所保護的程式是否曾經被
篡改。如果核對錯誤，則必須觸發
一連串相對應的反應。這些反應可
大可小，小至只顯示一些警告或錯
誤訊息，大至產生嚴重的事件促使
程式當掉。但如果核對正確，則必
需確保接下來的程式流程，能夠依
照原先的程式本義繼續進行。
 恢復（repair）：在執行之前，將
已受損的資料與程式碼回復到原
來的形式。在通過核對之後，修復
或執行某些必要的程式碼，以防止
Guard被移除。
為了能夠在程式中自動產生 Guards
Network，則必須存在某些規律性或對稱
性。而且為了增強 Guards Network 的強
度，則必須包含環狀結構。經審慎考慮
後，在本計劃中所設計的 Guards Network
如圖 2所示。
圖 2.Guard Graph
支配者樹（dominator tree）是用來表
示流程圖中的支配關係的最有效方式之
一[5]。根節點代表起始節點，所有的節點
只屬於其子孫節點（descendant nodes）的
