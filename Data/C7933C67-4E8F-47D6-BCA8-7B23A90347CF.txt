1 
 
行政院國家科學委員會補助專題研究計畫
■ 成 果 報 告   
□期中進度報告 
 
 
 
不確定資料之索引與查詢處理 
 
 
 
計畫類別：■ 個別型計畫  □ 整合型計畫 
計畫編號：NSC 100-2221-E-027 -087 -MY2 
執行期間：  100 年 8 月 1 日至 102 年 7 月 31 日 
 
計畫主持人：劉傳銘 副教授 
計畫參與人員：賴傳淇、廖冠登、周彥廷、鍾志武、孫啟恩、張宏凱、 
麥哲倫、游凱安 、潘敬閎 
 
成果報告類型(依經費核定清單規定繳交)：□精簡報告  ■完整報告 
 
本成果報告包括以下應繳交之附件： 
■赴國外出差或研習心得報告一份 
□赴大陸地區出差或研習心得報告一份 
□出席國際學術會議心得報告及發表之論文各一份 
□國際合作研究計畫國外研究報告書一份 
 
處理方式：除產學合作研究計畫、提升產業技術及人才培育研究計畫、列
管計畫及下列情形者外，得立即公開查詢 
          □涉及專利或其他智慧財產權，□一年二年後可公開查詢 
          
執行單位：國立臺北科技大學 資訊工程學系 
中   華   民   國  102   年   10   月   25   日 
3 
 
等，而鄰近的香港與新加坡以及加拿大與歐洲等地亦有不錯的相關研究成果。本計畫也期望能
夠與目前在進行不確定性資料研究的重要團隊進行技術上的合作與資料上的交流，共同拓展不
確定性資料這個議題的範圍。就目前在不確定性資料相關研究來看，其研究議題大略粗分為下
列幾個方向： 
1. 不確定性資料的模型：這方面主要探討如何建立不確定性資料模型，以適當描述不確
定性資料實際上擁有的物理意義，而其所表示的資料容易運算與處理。 
2. 不確定性資料管理：主要在討論如何有效處理不確定性資料，以節省查詢時間或儲存
空間。目前一些常見作法是探討改良一些傳統的索引與查詢處理方式，使這些方法能
適用在不確定性資料。本計畫所探討的議題即屬於此一方向。 
3. 不確定性資料探勘：這方面主要是在考量不確定的因素下，開發一些方法來針對不確
定性資料進行資料探勘。 
本計畫的目的便是針對不確定性資料提出一些有效的索引管理方式，並能快速地進行一些
常見的查詢，如範圍查詢、最近相鄰點查詢、天際線(Skyline)查詢等。將由低維度資料開始進
行探討，再延伸考慮至高維度的不確定性資料。在查詢效能的分析上，我們將考慮查詢時CPU
所花費的運算時間以及經歷的I/O時間，而所提出的方法皆會以實驗模擬的方式與相關的方法
進行比較與分析。研究的成果可適用在一些實際例子中，如動態物件追蹤管理、適地性服務之
安全性、災害的擴散及移動的預測、城市人口分佈估計、交通狀況及環境影響之動態預測等。 
計劃中要探討的重點如下列所述，其中之一是在不確定性資料的高效索引結構–US+-Trees
上如何執行新增、刪除與修改，以及單點查詢、範圍查詢與機率性最近相鄰者查詢(Probabilistic 
Nearest-Neighbor Queries, PNN)。之後我們將探討如何在US+-Trees上執行大量更新操作的效能
研究，設法降低對記憶體I/O次數的操作，以增加查詢時的效能，同時考慮將US+-Trees拓展至
高維度空間。 
對於不確定性資料的管理，索引是個重要的研究議題。常用的索引空間資料的索引結構，
如R-tree，亦可用來索引不確定性資料，但其效能會隨著資料量的成長而趨於劣化，且當資料
維度增加時，會碰高維詛咒(Curse of Dimensionality) 的問題，索引的效能也令人無法滿意。計
畫提出了一個新的索引不確定性資料架構—S-Index (Sphere Index)，在進行資料查詢時擁有較
佳的效率，同時可支援多種查詢型態，如單點查詢、機率性範圍查詢和機率性最近相鄰者查詢。 
另一重點是探討不確定性資料的天際線查詢，因為不確定資料的各個獨立物件附有一組離
散分佈(Distribution) 的資料，因此在進行運算時會產生相當大的運算量，所以一般在做天際線
運算時，會借助索引的技巧，來有效的修剪(Pruning)資料，達到快速運算。針對天際線查詢，
一般常見的索引方式是採用Z-Tree[12]的技巧，在此我們提出了一種以Z-Tree為基礎而加以改
良的索引方式，可以達到更好的效果。 
最後的一個重點是在不確定性資料上進行資料探勘的探討，資料探勘技術目前已廣泛的被
使用於領域中，在多數的研究中，資料探勘主要目的是集中在「預測」與「解釋」資料。在這
兩個過程中，又可將資料歸類成四種型態之核心探勘工作，分別為資料預測工作、資料分類工
作、資料關聯判定、以及資料異常偵測。一直以來，研究者在資料探勘研究上，多數以確定性
資料(Certain data)為主，雖然在國外研究中，有相關針對不確定性資料之研究之論文，但是在
資料本身的誤差所造成的資料分類問題，還尚有改善之空間。 
5 
 
行溝通，CPS強調各個實體感應裝置透過運算網路進行連結與互動，資料的運用與處理就相當
重要，其應用包含了：無人駕駛車、無人飛行載具、醫療監控、環境監控與智慧住宅等。雖然
CPS可帶來許多便利，但在實際的應用上面對的資料將會是非常龐大的且充滿了各式各樣不同
性質的數據，如何將這些資料進行有效率的管理是值得探討的。而根據UC Berkeley[24]在2003
年所統計的結果，全球每年數位儲存的文件量至少是23 terabytes，資料量的成長十分快速。雖
然近年來硬體運算能力也不斷在進步，但面對成長如此快速的資料量，幫助似乎有限，所以如
何從大量的資料中進行有效率的查詢與分析出有用的資料一直是個方興未艾的研究議題，因此
大量資料處理亦為本計畫考量的因素之一。 
 
圖二：網宇實境系統於交通上應用示意圖 
本計畫主要在討論如何管理不確定性資料，提出有效的索引與查詢處理方法以節省查詢時
間或儲存空間。在進行研究討論之前我們已回顧傳統上一些具有代表性的索引方式，像是樹狀
結構的B-trees與R-trees，以及一些常見的技巧 [19]，如Space Filling Curves[20]與Voronoi 
Diagram[18]等，然後再提出適用於不確定性資料索引結構，當然，在低維度資料與高維度資
料的索引方式應會有所不同。在計畫中所考慮的索引方式上，我們會一一討論常見的查詢處理，
包含：單點查詢(Point Queries, PQ)、範圍查詢(Range Query, RQ)、機率性最近相鄰者查詢
(Probabilistic Nearest-Neighbor Query, PNN)等，定義如下: 
1. 單點查詢 
由使用者給定一個查詢的值 v，假設物件 oi有一機率分佈 Pi(x)，x為隨機變數。則查
詢回傳一個物件集合 O{(oi, pi)}，其中 pi代表了此物件值為 v的機率， )( vxPp ii  ，且
10  ip ，如定義 1。 
定義 1: Point Query (PQ) 
 Given a value v, where v , and PQ returns a set of tuples (oi, pi), where pi is the 
non-zero probability that )( vxPp ii  , and Pi is the probability distribution of oi. 
2. 範圍查詢 
由使用者給定一個範圍[l, u]，假設物件 oi有一機率分部 Pi(x)，其中 x 為隨機變數。則
查詢回傳一個物件集合 O{(oi, pi)}，其中 pi代表了此物件值為 v的機率， )( uxlPp ii  且
10  ip ，如定義 2。 
7 
 
 
圖三：US+-Trees結構 
2.2 天際線 
在介紹天際線定義前，我們須要先了解到何謂 dominate 的觀念。假設我們考慮一個由
               所組成的有限維度空間 D (finite d-dimensional space)，每個  都表示著一個屬
性，考慮任意兩個 tuples A 和 B，     代表 A 在維度    上的數值，如果               
     且                    ，則我們稱作 A dominates B ，記作    ，然而當     
且    ，我稱 A 與 B 為 incomparable，記作     。此外 dominate 具有遞移性，亦即
當   且   ，則   也會成立。考慮一個 d維座標空間中的不確定性資料集合 U，天際
線結果會是一個資料集合，包含了所有不會被任意其它不確定性資料 dominate 的資料，天際
線 SU的定義如下: 
𝑆 = {𝑋  𝑈| ! 𝑌  𝑈 ∩  𝑌  𝑋}。 
圖四展示了一個資料集合以及它的天際線，我們可以根據定義從圖中發現 A dominates E、
G、I與 B dominates E、F、G、H、I， A 和 F、B 和 C、D 和 F 等等則是呈現 Incomparable 
的現象，集合{A, B, C, D}則是此資料集合的天際線。 
 
圖四：資料集合{A, B, C, D, E, F, G, H, I}的天際線 
 
9 
 
以在考慮𝑦 時，𝑦 不予考慮，因此只有  dominates 𝑦 ，也就是說，只要  不出現，𝑦 就會成
為 Skyline的一員，所以我們可以推得𝑆𝑘𝑦   𝑦  =  −       = 0 5，根據公式來計算的話就
是𝑆𝑘𝑦   𝑦  =    𝑋  𝑦  ∗    𝑍  𝑦  =   − 0 5 ∗   − 0 = 0 5。以物件來看的話，考慮
物件 Y，要計算 SkyPr(Y)前須先分別求出𝑆𝑘𝑦   𝑦  、𝑆𝑘𝑦   𝑦  、𝑆𝑘𝑦   𝑦  ，且還需考慮其
各別的權重。因此根據公式： 
𝑆𝑘𝑦   𝑌 = ∑    𝑦 𝑆𝑘𝑦   𝑦 𝑦 𝑌 = 0 3 ∗  + 0 4 ∗ 0 5 + 0 2 ∗ 0 3 = 0 56。 
 
2.2.2 Z-Trees 
 在做天際線查詢時Z-Tree是一個常用的索引方式，一個維度為d的空間上，每個維度上
的值均為0~1區間，我們將空間均勻地切割成2 d個子空間，子空間在記憶體上的擺放順序就依
據Z-Order的方式進行擺放，以圖六為例，子空間擺放順序為ABCDEFGH 。根據這樣的擺放
方式，可以發現位置在後面的節點不可能會dominate前面的節點，所以在計算天際線的時候，
每一個節點只需要考慮在自己前面的節點，因此可以有效的減少dominance Test次數，以節省
計算量。 
 
圖六:空間切割示意圖以及Z-TRR和本計畫提出的方法 
2.3 反轉最近相鄰者 
反轉最近相鄰者查詢應用於許多重要的領域，如決策支援、資源收集、策略規劃、虛擬實
境等領域。所謂的反轉最近相鄰者，是由傳統最近相鄰者查詢的一種變化，最近相鄰者查詢主
要在於查詢離查詢點最近的物件有哪些，而反轉最近相鄰者查詢在找尋哪一個物件的最近鄰居
是查詢點，如定義 4。 
定義 4 反轉最近相鄰者 
一個資料集 D，o為資料 D的一個物件，也是候選者之一，dist(q,o)表示 q到 o的距離小於 o
到任何物件的距離，則物件 o為查詢點的反轉最近鄰居之一。 
RNN 𝑞 = {𝑜   | 𝑝   :   𝑠𝑡 𝑞 𝑜    𝑠𝑡 𝑜 𝑝 } 
 上述的定義是用在傳統反轉最近相鄰者查詢中，然而在不確定資料中傳統方法不在有效，
主要原因是資料不在是單一個點，而是由範圍組成，單純的歐基里斯距離計算已經無法使用，
所以下面定義 5我們改用機率反轉最近相鄰者定義。 
11 
 
要進行下面調整： 
𝐸𝑤t+ = 𝐸
𝑤
t / 2 
𝐸𝑛 t+ = 𝐸
𝑛 
t +  𝛼 𝐸
𝑛 
t 
其中，𝐸𝑤t+ 為調整過後的贏家節點錯誤率，𝐸
𝑤
t為原本贏家節點的錯誤率，𝐸
𝑛 
t+ 為鄰居
節點調整過後的錯誤率，𝐸𝑛 t為鄰居節點調整前的錯誤率，α則為分散因子(factor of distribution)，
其值為介於 0至 1的固定常數。 
2.4.3 平滑步驟(Smooth phase) 
在此步驟中，則重複地讓其進行第二步驟，直到所有節點不再生成，且所有節點所屬物件
不再更換為止。 
 
圖七:SOM群集法流程示意圖 
三、計畫執行情形 
3.1 US+-Trees和S-Index 
計畫針對不確定性資料，進行先前提出 US+-Trees 資料索引的更進一步探討，並考慮高維
度資料提出了一個新的索引— Sphere-Index。 
3.1.1 US+-Tree 
建立索引最主要目的是為了提供查詢不同需求的查詢服務，如果在搜尋中能減少不必查看
的節點數量，便可以有效地加快查詢速度，若當查詢不被索引支援時，此索引就毫無可用價值，
因此索引能夠支援多種查詢的種類是相當重要的一個部份。以下分別詳細述說在 US+-Tree 支
援的查詢種類與作法。 
1. 單點查詢 (Point query) 
單點查詢是最常見的一種查詢種類，在 US-Tree中查詢時，首先會依據單點查詢給定
的值，與根節點的值做比較，若比根節點的值大，則表示此查詢結果，不會落在根節點的
左子樹中；接下來，根節點的右子樹節點在與單點查詢的值做比較，以此方法不斷遞迴，
直到葉節點，因此葉節點存放的物件資訊，即是單點查詢的結果。 
以圖八為例，PQ(24)表示鍵值為 24 的點查詢，首先會與根節點 l11中的鍵值 25比較，
13 
 
兩節點中的葉節點 l4，也意味著在葉節點中的物件一定也與範圍查詢值有重疊的關係，因
此物件 O1、O2和 O3即是 RQ(17,27)的答案。 
3.1.2 S-Index 
上述 US+-Tree在高維度效能不理想，由於 US+-Tree每多增加一個就得多件一棵樹來做監
控，所以在高維度中 US+-Tree需要追蹤許多棵樹效能自然大打折扣，為了解決此問題，我們
此計畫提出一個新的索引方式—S-Index (Sphere-Index)，下面我們將從架構到最近相鄰者查詢
做介紹。S-Index 類似樹狀索引結構，主要分為兩個部分：上層內部節點(Internal level)和下層
葉節點串列(Leaf level)，如圖十所示。首先介紹下層葉節點結構，下層結構主要是雙向鏈結串
列結構組成，在每一個葉節點結構中，其包含兩個圓心、兩個半徑和其子節點指標。S-Index
中所有的因子是被儲存在葉節點中，在建置 S-Index 時，會決定一個中心點，作為所有葉節點
的共同圓心(在此稱作 Center_1)，根據此圓心可以得到一段歐幾里得距離，根據此距離關係可
以建立出各個葉節點，故每個葉節點的 MBR 是以中心點 (Center_1) 和半徑 (Radius_1)表示之，
如圖十一(a)所示。由於葉節點的其中一個圓心(Center_1)是共有的，所以整個鏈結串列外型又
似同心圓形狀。另外在此篇論文中並無特別討論選取 Center_1 的議題。 
 
圖十: S-Index (fan out=2) 
另外為了在找尋上更為有效率，在葉節點節構中，另外增加了一個圓心(Center_2)和半徑
(Radius_2)，這是為了記錄在該葉節點中因子的涵蓋範圍，其目的是為了在找尋時過濾掉不可
能的候選人，以便加速找尋的操作。如圖十一(b)所示，假設一個查詢點落在一個葉節點中時，
必須先將該葉節點中的所有因子全部比對之後，才能決定是否為所要其解或候選人，但此時若
透過該查詢點與 Center_2 取得的距離，在藉由 Radius_2 的判斷，即可知道該葉節點中所有因
子與查詢點的關係，因此可以節省不必要的大量運算。 
說明完下層葉結點結構，接下來介紹上層內部索引結構，由於下層的結構是一個有序的鏈
結串列，因此上層內部索引結構，可以利用葉節點中的每一個半徑 (Radius_1)，來當作鍵值，
建立上層的內部節點，因此內部節點是不儲存資料，僅儲存鍵值與子節點指標，並使用鍵值來
區分其子節點，其內部節點分支度擁有像 B+-Tree一樣的特性，是一個高度平衡且多子樹的樹
狀結構，並且保證其每個內部節點的使用量在50%以上。以圖8來說明索引建立的方法及流程，
首先圖十一 (b)中有 5 個圓 C1、C2、C3和 C4，且半徑分別為 R1、R2、R3和 R4，由關係可以得
知0  𝑅  𝑅  𝑅  𝑅4  ℛ，因此 C1 的涵蓋範圍可以表示為[0,R1]，C2 的涵蓋範圍可以表
示為(R1,R2]，C3的涵蓋範圍可以表示為(R2,R3]，以此類推，接著利用各葉節點的半徑，向上建
15 
 
葉節點，找出 v+r 內的覆蓋物件。 
以圖十三左邊為說明範例，假設一個範圍查詢，其 v 為範圍查詢中心點，r 為查詢半
徑範圍，且 d(v)為 v與中心點的歐幾里得距離(假設𝑅  d 𝑣  𝑅  d 𝑣    ℛ)。首先，使
用 d(v)做單點查詢，根據節點的走訪，最後得到葉節點 l3為與 v重疊之節點，由於 S-Index
的葉節點是鏈結串列的資料結構，再者此鏈結串列是一個有序排列關係，所以可以再藉由
向左走訪距離 r；和向右走訪距離 r，如圖十三右邊，最後在獲得的葉節點候選人中檢驗範
圍重疊的物件。 
當 S-Index 執行範圍查詢時，先會使用範圍查詢的中心點 v做一次單點查詢，找到範
圍查詢其中心點落在的葉節點位置。因為在 S-Index 中所有葉節點，組成了一個有序的鏈
結串列關係，所以可以藉由單點查尋找到的中心點 v落在的葉節點位置，再向左或向右走
訪相鄰葉節點，其走訪最遠範圍不超過範圍查詢的距離 r，其走訪葉節點個數為 S，因此範
圍查詢的時間複雜度為，一次單點查詢的成本為𝑂 𝑙𝑜𝑔𝑓𝑁 ，再加上葉節點走訪 O(S)，故記
憶題的存取數約為𝑂 𝑙𝑜𝑔𝑓𝑁 。 
3. 最近相鄰者查詢 
在 S-Index 中的機率性最近相鄰者查詢，會依照給定查詢點 v，回傳與此點最近的可能
結果。在這裡也使用了 Minimum Max Distance 的概念，如定義 3，找出最近物件其最遠的
距離，根據此段距離，就可以找出所有最近相鄰者的答案，換句話說最近相鄰者查詢，亦
即以 v為查詢中心點，Minimum Max Distance 為查詢半徑的機率性範圍查詢。 
以圖十四為例子說明，假設 v為查詢點，其欲找尋最近的相鄰者。則會先透過單點查
詢 v，找到其落在的葉節點 l3，接著透過葉節點鏈結串列，依序向左及向右走訪葉節點，
直到找到第一個完整資訊的物件(其機率為 1)時(葉節點 l4)，則此程序停止，回傳在這過程
中所尋訪的物件，即為最近相鄰者可能答案，因此最近相鄰者為(b,0.5)和(c,1)。 
S-Index 中的最近相鄰者查詢，是透過單點查詢找尋到 v落在的葉節點位置，再沿著
葉節點鏈結串列，分別向左和向右走訪，直到找到第一的完整的物件為止，因此可以得到
兩段距離，這段距離意義是表示，在此距離中保證必有一個物件是 v的最近鄰居。故在此
取最短距離，並設為最小最遠之距離。因此一次單點查詢的成本為𝑂 𝑙𝑜𝑔𝑓𝑁 ，再加上葉
節點走訪 O(S)，故記憶體存取數約為𝑂 𝑙𝑜𝑔𝑓𝑁 。 
 
 
圖十三：Sphere-Index 機率性範圍查詢 
17 
 
如果按照 Z-Tree 的方式，當我們看過 ABC 後，接著看的是 D，但可以 dominate D 的節點
有 ABC ，但節點 E卻只被 A dominate，相較之下，E所包含的 tuples 應該會擁有比較大的
SkyPr()，應該優先考慮E所包含的 tuples，這樣的方式可以幫助我們更快找到Top-k Skyline。 
 
以下的實驗結果是將我們提出的新索引方式，與未索引以及Z-Tree索引方式做比較，圖十
五為在不同維度下計算速度分析的實驗，如同我們前面說的，我的方法因為在高維度時，節點
間的比較次數會大幅小於Z-Tree的方式，所以隨著維度的升高我們的方法將得到更好的效率；
接著圖十六的實驗說明在大量資料下，三種方式各別的計算速度，由圖可知我們的索引方法在
大量資料下依然管用，當數量小的時，Naïve所呈現的結果與我們的方法並不會差異太大，因
為我們需要付出成本建立索引，但隨著數量增加時，索引所帶來的效果就會大幅提升，同時，
數量變大時相對的索引的高度就會增加，所以我們的方法降低節點間的比較次數，也可以有效
地提升效率，因此由此可知，我們的方法相較於Z-Tree有明顯的優勢。   
 
圖十五：不同維度時計算量的變化 (10,000 tuples) 
 
圖十六：不同tuple數量對計算量的影響 (dimension 4) 
3.3 不確定資料中反轉最近相鄰者查詢 
等分空間切割方法是利用SAA[28]的概念，此方法原本用於確定資料，經過改進後也可使
用於不確定資料，我們簡單講解SAA作法，首先在得到一組二維資料集和查詢點q之後，把資
料建立成R-tree並已查詢點為中心進行平分成六個區域(圖十七(a))，查詢點找尋條件最近距離，
並各區塊選出一個候選者，最後對六個候選者做反轉最近鄰居公式的判斷，確認這六個候選者
是否為查詢點的反轉最近相鄰者，下面將講解等分空間切割方法改進和原因。 
19 
 
3.4不確定性資料下的資料探勘 
3.4.1 不確定性資料格式 
不確定性資料格式可約略分為 eried 及 pdf 表示法。下面我們將針對如何決定資料格
式進行因素分析。 
1. 計算時間： 
如當資料格式為 eried 表示法[25]時，物件與群集間的相似度探討主要倚賴最大距離
(Maximum distance)做為評估，而當資料進行 pdf 格式進行相似度評估則倚賴積分法。然
而資料為 pdf 格式卻需耗費更多的時間進行相似度運算，因此非確定資料格式採用 eried 
較為省時。 
如下表格一所示，資料為 wine quality 資料庫，並將其資料個別模組為 eried 與 pdf
格式於同樣分群法求得相似度所需之時間。 
表格一、eried及 pdf格式相似度計算所花時間比較 
資料筆數 
eried格式配合 
KMean 群集法 
pdf 格式配合 
KMean 群集法 
100 5664.04 ms 42152.68 ms 
200 11263.73 ms 84315.07 ms 
 
2. 資料模型格式時間： 
在低維度時，eried格式以及 pdf 格式所需時間類似，然而當資料為高維度資料時， pdf 
格式將耗費比 eried 更多時間進行格式函數推算，也較不符合即時與現實發生之狀態。 
3. 群集正確率與純度： 
如表格二所示，可以看出 pdf 格式之資料進行積分相似度運算與 eried 擁有相似的正
確率與純度，因此可將資料格式架構成 eried 格式。 
 
表格二、eried及 pdf格式相似度計算正確率與純度比較 
 
eried 格式配
合 
KMean 群集
法 
pdf 格式配合 
KMean 群集法 
正確率(accuracy) 33.08 % 33.08 % 
純度(purity) 0.45 0.44 
3.4.2分群實作 
1. 相似度計算及改良： 
在多數的相似度計算中，多數研究多採用具距離以及非確定資料與群集間的涵蓋率作
為準則，然而多數分群時非確定資料依附於某些群集時，並不完全只倚賴上述之因素。在
21 
 
尤其在高維度中，所以我們提出新的索引(Index)方法來改善，除了改善新的索引之外，我們還
提出新的方法來改善效能，除了資料搜尋外還有資料探勘方面的實驗，下面我們會逐一呈現。 
4.1 US
+
-Tree及 S-Index 實驗結果 
1. 單點查詢 
我們利用新提出的 S-Index 改善 US+-Tree缺點和 R-Tree MBR 重疊的問題，我們在實
驗中的模擬結果得到驗證，圖十八為單點查詢的模擬實驗結果，x軸為物件個數 10K到 100K，
y軸為記憶體存取數和 CPU計算時間。在實驗中 R-Trees、US+-Trees 和 S-Index 之間效能
有明顯的差異。US+-Trees 和 S-Index 所需要的記憶體存取量遠低於 R-Trees，其原因是
US
+
-Trees 和 S-Index 中，節點與節點間的 MBR 是沒有重疊存在，因此在查詢上不需要花
費額外的記憶體存取。 
 
2. 範圍查詢 
機率性範圍查詢，將分別針對不同物件個數，來分析各索引下的機率性範圍查詢之效
能差異，為記憶體存取效能，並在不同物件個數下之實驗結果，在二維的資料集情形下，
S-Index 和 US+-Trees 其記憶體存取效能，依然是比 R-Trees 好，其主因還是因為 R-Trees
中節點MBR 間的覆蓋問題，S-Index 和 US+-Trees 的機率性範圍查詢，皆是經過一次的單
點查詢，再透過葉節點鏈結串列的走訪，因此無論在記憶體存取還是在 CPU算上皆比
R-Trees 來的有效率。 
  
(a) Memory I/Os (b) CPU times 
圖十八:單點查詢 
  
(a) Memory I/Os (b) CPU times 
圖十九:範圍查詢 
23 
 
 
4.3 反轉最近鄰居查詢 
如圖二十二在實驗中我們能得到驗證，現有最佳雙曲線方法由於建立 R-tree並且使用雙曲
線做排除，樹的高低都會影響結果，我們預設數高為三，但是樹的追蹤過於煩雜以至於降低搜
尋速度，而我們方法無須任何索引的方式，就可以在不確定資料上快速找出可能成為反轉最近
鄰居的候選者。 
 
資料集 方法 等分切割空間 雙曲線 
CAS Rtree建立 0  458.91  
執行時間 16.382  2970.852  
TCB Rtree建立 0  2768.756  
執行時間 93.721  76759.469  
圖二十二:資料為不確定上執行時間(second) 
   
(a) Independent (b)Anti-correlated (c)correlated 
圖二十一: 三種資料型態 
25 
 
4.4資料探勘 
在該次探勘中，我們採用 iris資料庫與wine quality資料庫進行正確率 RI(Random Index, 即
accuracy)與 purity測試。而比較之群集方法有 GSOM群集法、KMeans 配合最大距離進行之群
集法以及 KMeans 傳統積分法進行比較，如表格三所示。 
在 iris 資料庫中，此三種方法之正確率與純度如下表所示： 
表格三: eried及 pdf格式相似度計算正確率與純度比較(iris) 
 
GSOM eried格式配合 
KMean群集法 
pdf 格式配合 
KMean 群集法 
正確率
(accuracy) 
77.43% 47.79 % 47.43% 
純度(purity) 0.79 0.49 0.49 
在 wine quality資料庫中，此三中方法之正確率與純度如下表格四所示： 
表格四: eried及 pdf格式相似度計算正確率與純度比較(wine quality) 
 
GSOM eried格式配合 
KMean群集法 
pdf 格式配合 
KMean 群集法 
正確率
(accuracy) 
64.40% 33.08 % 33.08% 
純度(purity) 0.46 0.45 0.44 
從上可以發現，GSOM分群時於兩者資料庫分群時擁有較高之正確率，隨著資料資料維度
變大(Iris: 4, wine quality 資料維度:11)，GSOM 在純度部分有明顯下降，此意味著在低維度的
資料上 GSOM一就提供不錯的純度與正確率。 
另外在演算法上我們依舊測試了各種情況，如表格五。 
 表格五: GSOM與各因素交互比較 
 
GSOM+距離
因素 
GSOM+距離+
重力因素 
GSOM+距離+涵
蓋面積因素 
GSOM+全部因素 
正確率
(accuracy) 
71.53% 66.62 % 75.83% 77.43% 
threshing 50/150 26/150 48/150 10/150 
 
當只考量距離因素時，GSOM 正確率可高達 7成。若加上重力考量時，此時非確定資料
會因為較重之群集而使非確定群即吸引關係，因而減少少數非確定資料之正確率，然而在非確
定資料的晃動個數來看，其時許多資料已經較於被安定的分配。當只考慮距離加涵蓋面積時，
正確率可高達 75.83%，但非確定資料之晃動度與只單純考慮距離差不多，當在把重力因素加
入後，可以看的出正確率比之前提高，並且資料晃動度趨於安定。因此改良式之 GSOM擁有
較高之正確率及穩定度。 
27 
 
以下為計畫已發表、投稿、或準備中之論文 
 Kuan-Teng Liao and Chuan-Ming Lui. An Improved GSOM Approach for Uncertain Data 
Mining. Submitted to The 18th Pacific-Asia Conference on Knowledge Discovery and Data 
Mining, 2013. 
 Chih-Wu Chung and Chuan-Ming Liu. Sphere Index: An Effective Query Process for High 
Dimensional Uncertain Data. In Proceedings of the 18th Mobile Computing Workshop, 2013. 
 Ching-Hung Pan and Chuan-Ming Liu. Reverse Nearest Neighbors Search on Uncertain Data. 
In Proceedings of the 18th Mobile Computing Workshop, 2013. 
 Chi-Eng Sun and Chuan-Ming Liu. An Effective Method for Computing ε-join on Uncertain 
Data. In Proceedings of the 18th Mobile Computing Workshop, 2013. 
 Chuan-Chi Lai, Chuan-Ming Liu, and Ying-Chi Su. A Novel Mechanism to Construct a 
Compatible Overlay on Heterogeneous Mobile Peers. In Proceedings of the 2013 IEEE 
International Conference on Pervasive Computing and Communications (PERCOM) Workshops 
- the 9th International Workshop on Mobile Peer-to-Peer Computing, 2013. 
 Che-Lun Mak, Chuan-Ming Liu, and Wei-Chi Yeh. Reverse Nearest Neighbors Search in 
Wireless Broadcast Environments. In Proceedings of the fifth IEEE International Workshop on 
Wireless Network Algorithm and Theory (IEEE WiNA 12), 2012. 
 Chih-Wu Chung and Chuan-Ming Liu. Effective Update of US+-Trees for Indexing Uncertain 
Data. In Proceedings of the 17th Mobile Computing Workshop, 2012. 
 Fan-Ya Kao and Chuan-Ming Liu. Enhancing the Performance of Nearest Neighbors Search on 
Uncertain Data using US
+
-trees. In Proceedings of the 16th Mobile Computing Workshop, 2011. 
 Effective Methods for Indexing Uncertain Data. In Preparation. 
 An Index to Enhance the Query Performance for Probabilistic Skyline Search. In Preparation. 
 
六、參考文獻 
[1] C.C. Aggarwal. On Density Based Transforms for Uncertain Data Mining. Data Engineering, 
2007. ICDE 2007. IEEE 23rd International Conference on, pages 866–875, 2007. 
[2] C.C. Aggarwal and P.S. Yu. On indexing high dimensional data with uncertainty. In Proceedings 
of SIAM International Conference on Data Mining, 2008. 
[3] C.C. Aggarwal and P.S. Yu. A survey of uncertain data algorithms and applications. IEEE 
Transactions on Knowledge and Data Engineering, 21(5):609-623, 2009. 
[4] P.K. Agarwal, S.W. Cheng, Y. Tao, and K. Yi. Indexing uncertain data. In Proceedings of the 
28th ACM Symposium on Principles of Database Systems, pages 137-146, 2009. 
[5] D. Barbara, H. Garcia-Molina, and D. Porter. The management of probabilistic data. IEEE 
Transactions on Knowledge and Data Engineering, 4(5):487-502, 1992. 
[6] A. Guttman, R-trees: a dynamic index structure for spatial, in SIGMOD, 1984. 
[7] D. Kim, H. Im, and S. Park, "Computing Exact Skyline Probabilities for Uncertain Databases," 
in TKDE, 2011. 
29 
 
Machine Learning and Cybernetics (ICMLC), 2:804-809, 2011. 
[27] Guttman A. "R-Trees: A Dynamic Index Structure for Spatial Searching". Proceedings of the 
ACM SIGMOD international conference on Management of data, 14(2): pp.47-57, 1984. 
[28] A. El Abbadi, D. Agrawal and I.Stanoi.”Reverse Nearest  Neighbor Queries for Dynamic 
Databases”. ACM SIGMOD Workshop Research Issues in Data Mining and Knowledge 
Discovery, pp. 44-53, 2000. 
 2 
  會議第一天由主要的幾個工作坊揭開序幕，筆者論文發表的工作方式被安排在早上。
筆者有幸受邀於第一個 session 擔任主持人，主持三篇論文發表，主題環繞在影像與檔案分
享，並結合位置資訊以增加其效能。筆者的論文是發表在第二場 session，亦有三篇論文發
表，探討主題在於行動同儕網路之網路與資料及安全管理，筆者的論文在口頭報告後獲得
不少建議與肯定，發問的情形十分踴躍，使筆者對於相關的研究更具信心，亦獲得多角度
的觀點，獲益良多。下午筆者則參加了 Managing Ubiquitous Communications and Services 工
作坊的兩個 Sessions，主題分別是 Ubiquitous Sensing and Monitoring Services 與 Virtualisation 
and Management of Smart Environments，這兩個主題與筆者研究計畫主軸在應用方面有相當
的關係。 
  
圖一、筆者擔任 session 主持人實況一 圖二、筆者擔任 session 主持人實況二 
  
圖三、筆者論文報告後與來賓討論情形一 圖四、筆者論文報告後與來賓討論情形二 
 
第二天的的早上是正式開幕儀式，除介紹 PerCom 的發展與本屆的現況外，並邀請
Google的研究員—Roy Want 進行 Keynote Speech，Dr. Roy Want 曾是 Intel與 Xerox PARC
的資深主要工程師，同時也是 ACM 與 IEEE 的 Fellow，實務與學理研究的經驗十分豐富，
演說的主題是 The Golden Age of Pervasive Computing，回顧了 Ubiquitous (or Pervasive) 
Computing 的發展與未來的展望，讓筆者了解到未來可發展的研究方向與趨勢。接下來筆
者參與了接下來的 Sessions：Innovative applications, tools and software design 與 Context 
modeling and reasoning。 
 
國科會補助計畫衍生研發成果推廣資料表
日期:2013/10/30
國科會補助計畫
計畫名稱: 不確定資料之索引與查詢處理
計畫主持人: 劉傳銘
計畫編號: 100-2221-E-027-087-MY2 學門領域: 資料庫與資料探勘
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
