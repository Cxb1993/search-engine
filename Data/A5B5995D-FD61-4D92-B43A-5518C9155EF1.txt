investigated into two problem variants: one is 
whether the given graph has a rectilinear drawing, 
and the other is how to draw the given graph as a 
rectilinear drawing with minimum area. We obtain 
complexity results and polynomial-time algorithms. 
Let a ’k-graph’ be a graph of maximum vertex degree 
of k. Under the latter representation, We present 
quadratic-time algorithms to construct the orthogonal 
grid drawing of 5-graphs and 6-graphs such that each 
edge contains at most two bends, and to construct the 
orthogonal grid drawing of 8-graphs such that each 
edge contains at most three bends. Moreover, we show 
that the decision problem of determining whether an 
8-graph has an orthogonal grid drawing without edge-
bends is NP-complete. We have written these two 
results up as three papers.The three papers we 
obtained are entitled ’On Rectilinear Drawing of 
Graphs’,’Complexity of Finding Non-Planar 
Rectilinear Drawings of Graphs’ and ’Orthogonal 
Drawing with Vertices as Unit Squares and Few Bends 
per Edge’. The first two papers have been aceepted 
to ’International Symposium on Graph Drawing’ 
conference in year 2009 and year 2010 respectively, 
which is the top conference in the field of graph 
drawing. And the third paper has been submitted to a 
top computational geometry journal,’Computational 
Geometry: Theory & Applications’ for publication。 
英文關鍵詞： Orthogonal grid drawing, Rectilinear drawing, Edges 
with few bends, NP-completeness 
 
 !"#$
	

 !"	#$%&'()*+,-./0 
!"	1$%&'()2+	$340566789
$:;<=">?=@ABCDEFG=@
5HIJ"	KL+<MNOP<JQRSNOPT:UV
SWNXYOPSZH=[\"]?	^_+$`a;
b'cdefghijk	lmngop%q/r
stuvwtxyzu{|yx}$~Png	{zs)+
%&'() 05 !HIJ"	$
M'( {zs5{zs"]?	A$
M'(Z {zs5"	GP {zs )N
N t|ttwzuyzyw) {txsu}|}	
<	m
4q/ Z¡ szs}¢Z¡£¤¥g)¦w§}|yuyw}z
¨zywt©ªzs¢«txsu}¬y|vt©­ywywtw{uzwz§}|yuyw}z
¨zyw¢t©ªzs¢r¦|ttwzu¨zywy|®}|y}¢z¢¯wy|
°±²z}¢ zw ­} ³}w¢ s} ´}    ¡ £ ¤ 
 µ ¶ ·  
¸w|}wz|ytwzu°vxst¢y²xtwªzs¨zyw¹ºº» ¼a ¹º½º ¼¾¿ÀÁ
<Â) ªzs¨zywÃÄÅÆÀÁ]ÇZ¡£¤ÈÉÊTË
¾ÁÌÍ«txs²|z|ytwzuª}tx}|vÎÏ}tvÐÑssuyz|ytw¢ÒÁ

eÓÔÎ"ÕM"{txsu}|}w}¢¢Ö×¥Ø


Ù}zÚ}¢|²y}|}stÛu}xt©t|ttwzuyzywy|Ú}|y}¢
zw z¢ y styw|¢ t ²wy| y ¢±²z}¢Ü ¯¢yw |} ©tx}
}s}¢}w|z|ytw}zwtwuvzzs¢y|xz¬yx²xÚ}|}¬}}}Ý
tw|}suzw}ÞÛ²|²¢yw|}uz||}}s}¢}w|z|ytw}zwzzs¢
y|xz¬yx²xÚ}|}¬}}}ÜÙ}zw¢}}|z||}uz||}}s}¢}w|z|ytw
uz}uvÛtz}w|}uz¢¢}¢t©zs¢|z|}zwztw|}suzw}yu}
|} ¢zs} t© Ú}|y}¢ ¢|yuu }xzyw ¢yxsu}Ü ¯w} |} ©tx}
}s}¢}w|z|ytw}tw¢y}|}}y©©}}w|stÛu}x¢}||yw¢Î|}yÚ}w
zsz¢s}¢yÛ}¯s¨twß}©|§y|y}|ytw¢t|}yÚ}w
%&'$

äå¾æÀ /çèéêÈNë£5"$ ÑÝ ìíî"ï /çèð
ñjkò£óq/aqëVôõJZ¡'ö÷
jk /øùúûüýçè0;þ<Z¡ë£ðñ

úz Ü´z}¢°Ü{Ütwzw°Ü{ÜttwÜ¦w§}|yuyw}z¨zywt©
ªzs¢ÜtÜ	

	
	

sz}¢¹¹{¹ÝÜ

úÛ zwázw²á²zvz||}¢tw°}²w{²wttwzw«y¢Ïz²Ü
«txsu}¬y|vt©­ywywtw{uzwz§}|yuyw}z¨ zyw¢t©ªzs¢Ü
tÜ	

	
	
sz}¢
º{½Ü

ú ÜÑÜßywzw°Ü{ÜttwÜ¦|ttwzu¨ zywy|®}|y}¢z¢¯ wy|
°±²z}¢Ü°²Ûxy||}|t

		 
!"
#


e /	µ	Z¼
mq/	Ê
	¼ô4q/	¾æ
À !$"#7[\jk$%


On Rectilinear Drawing of Graphs 233
or vertical segment and no two edges cross. Garg and Tamassia [10] proved that
testing rectilinear planarity of a graph is NP-complete. Restricted cases of the
planar rectilinear drawing problem, sometimes called the “no-bend orthogonal
drawing problem”, have been well studied. Signiﬁcant examples include linear-
time algorithms to construct planar rectilinear drawings of plane graphs G of
maximum degree three [13], subdivisions of planar triconnected cubic graphs [14],
and series-parallel graphs of the maximum degree three [15].
Vijayan and Wigderson [16] considered the problem of rectilinear planar em-
bedding with edge direction constraints. They gave a linear time testing algo-
rithm and an O(n2) time embedding algorithm to construct such a drawing.
Hoﬀman and Kriegel [11] improved the running time by presenting a linear time
embedding algorithm. Bodlaender and Tel studied the connection between rec-
tilinearity and angular resolution of planar graphs [5]. Recently, Eppstein [8]
studied bendless orthogonal drawing problem in three dimensions, and showed
that it is NP-complete to determine whether an arbitrary graph has such an
embedding.
Many methods have been developed for constructing orthogonal drawings,
aiming to minimize crossings as well as bends; see, for example, the original
work of Batini et al. [2], or the “three phase method” of Biedl et al. [3]. However,
non-planar rectilinear drawing has not been so well studied. Formann et al. [9]
proved that given a graph G of maximum degree 4, it is NP-hard to decide
whether G has a straight-line drawing with angular resolution π2 . In this paper,
we investigate the problem of general non-planar rectilinear drawing.
Our work was also motivated by the recent development of RAC (Right Angle
Crossing) drawing [6]. A RAC-drawing is a straight-line drawing of a graph,
where all the crossings are at right angles. Research on RAC drawing arises
from the controversial human experiments on the eﬀects of crossing angles on
performance of path tracing tasks. In 2006, Huang et al. [12] found that task
response times decrease as the crossing angle increases, implying that drawings
with large crossing angles are better for visualization. A rectilinear drawing can
be regarded as an orthogonal-RAC drawing, that is, an orthogonal drawing with
right angle crossings.
In this paper we present NP-completeness results and a linear time algorithm.
The line between NP-completeness and a linear time algorithm is drawn with
the concept of a “4-cycle block”, deﬁned in Section 2. We prove that one can test
whether a graph that consists of a single 4-cycle block has a rectilinear drawing
in linear time, and we can construct such a drawing in linear time. In contrast,
we show that it is NP-complete to test whether a graph has a rectilinear drawing,
even when it consists of a set of 4-cycle blocks connected by single edges. The
NP-hardness remains even when the input graph consists of only degree-2 and
degree-4 vertices.
Further, we present a linear time ﬁxed-parameter tractable algorithm to test
whether a degree-4 graph has a rectilinear drawing, where the parameter is the
number of degree-3 and degree-4 vertices of the graph.
On Rectilinear Drawing of Graphs 235
(c) Every vertex of G is in exactly one path of Ghor and exactly one path of
Gvert. (Note that we regard a single vertex as a trivial path).
Proof. Items (a) and (b) follow from the assumption that edges cannot overlap,
and (c) is immediate.
From Lemma 2 we can deduce some properties of cycles.
Lemma 3. Suppose that G is a rectilinear graph. Then every cycle c in G con-
tains at least two vertical edges and at least two horizontal edges. If c is a 4-cycle
then the edges of c are alternately horizontal and vertical around c.
Proof. Direct the cycle c clockwise. It is clear that every leftward horizontal edge
has at least one corresponding rightward horizontal edge, and so c has at least
two horizontal edges. Similarly, c has at least two vertical edges. If c has 4 edges
then they must alternate.
2.2 Density
From Lemma 1 we can deduce that if G = (V,E) is a rectilinear graph with
n = |V | and m = |E|, then m ≤ 2n. We can show a tighter bound as follows.
Lemma 4. If G = (V,E) is a rectilinear graph with n = |V | and m = |E|, then
m ≤ 2n− 2√n. Further, for every n there is a rectilinear graph with n vertices
and 2n− 2√n edges.
Proof. Suppose that Xi is the set of vertices with x coordinate i; note that the
induced subgraph on Xi is a set of paths and thus has at most Xi − 1 edges.
Summing over all the sets Xi shows that the number of horizontal edges is at
most n−k, where k is the number of such sets Xi, that is, the number of diﬀerent
x-coordinates of vertices. Similarly, if  is the number of diﬀerent y-coordinates
of vertices, then the number of vertical edges is at most n− . Thus
m ≤ 2n− k − . (1)
Let x∗ denote maxi |Xi|. Now
∑
i |Xi| = n, and so k ≥ n/x∗. Also,  ≥ x∗, since
no two vertices are at the same location; it follows that k ≥ n/. We can deduce
from (1) that m ≤ 2n− ( + n/). Minimizing the term  + n/ over 1 ≤  ≤ n
gives the upper bound in the Lemma.
We can obtain the lower bound from grid graph of dimensions √n × √n;
this has at least n vertices and 2n− 2√n edges.
2.3 Area
Area bounds for planar rectilinear drawings are have a long history (see, for
example, [7]). It is straightforward to show that any rectilinear graph with n
vertices has a rectilinear drawing on an n×n grid, and for planar graphs there is
a corresponding lower bound. It could be tempting to suggest that allowing edge
crossings allows smaller area rectilinear drawings. However, there is a graph on
n vertices for which the minimum area grid drawing (planar or not) has area
Ω(n2); this is illustrated in Figure 1.
On Rectilinear Drawing of Graphs 237
p1
q1
(a)
p2
p3
p4
q2 q3
q4
p1
q1
(b)
p2
p3
p4
q2 q3
q4
Fig. 2. The directed paths
p1
qs
p2
p5
p6
p3
p4
p7
p8
qs qtqt
p1 and p2 are compatible
p5 is incompatible with both p6
and p6.
p3 and p4 are incompatible,
but p3 is compatible with p4.
p7 is neither compatible nor
incompatible with p8.
Fig. 3. Path direction examples
c > d then we say that pi is incompatible with pj; if a < b and c < d then we
say that pi is compatible with pj . In Figure 3, p1 is compatible with p2, and
p3 is incompatible with p4; note, however, that p3 is compatible with p¯4. The
relationship of compatibility does not apply to the pair p7, p8, because these two
paths share less than two paths in Q. Note that p5 and p6 are incompatible,
further, p5 and p¯6 are incompatible.
If there are two incompatible paths pi and pj, for which pi and p¯j are in-
compatible, then we reject G. Subsequently we assume that there are no such
pairs of paths. In other words, we are assuming that for each pair pi, pj, if the
compatibility relationship is deﬁned then pi is compatible with either pj or p¯j .
Then we associate a boolean formula f with G as follows. For each path pi we
have a boolean variable xi. If pi is compatible with pj then we insert the clause
(xi = xj) into f ; if pi is compatible with p¯j then we insert the clause (xi 	= xj)
into f . Now (xi = xj) = (xi∨ x¯j)∧(x¯i∨xj), and (xi 	= xj) = (xi∨xj)∧(x¯i∨ x¯j),
and thus f is a 2SAT formula. Satisﬁability for this formula can be tested in
linear time. If f is not satisﬁable, then we reject G; otherwise, a satisfying set
of values for the xi gives a direction for each path in Ghor so that every pair of
paths is compatible.
On Rectilinear Drawing of Graphs 239
x1 x2 x3 xn
cm
. . . . . .
...
c2
c1
Fig. 4. Skeleton containing ports for connecting to variable towers and clause gadgets
...
xi,2
xi
xi,1
xi,m
xi,2
xi,1
xi,m
xi = True
xi
xi = False
...
xi,2
xi,1
xi,m
xi,2
xi,1
xi,m
(a) (b)
Fig. 5. Variable tower for xi and the representation of its truth values
Figure 5(a), where we create a row of four consecutive 4-cycles Rj for each clause
cj and we set the two rightmost (resp. leftmost) vertices as connection ports for
literal xi,j (resp. xi,j), where xi,j takes the same truth value as xi. Moreover,
we connect these m rows of consecutive 4-cycles by two adjacent columns of
consecutive 4-cycles. See Figure 5(a).
This completes the construction of the variable tower for variable xi.
We then connect this variable tower to the corresponding upward spike. The
tower in Figure 5(a) represents the assignment of a true value to variable xi, and
its mirror image in Figure 5(b) represents the assignment of a false value to the
variable xi.
We then proceed to see how we construct the clause gadgets. Suppose that
we want to construct the gadget for clause cj = xi ∨ xk ∨ xl. First, let sj1, sj2 be
the two vertices on the 4-cycle σj at the connection port for cj and adjacent to
the connection edge between cycle σj and the skeleton. See Figure 6(a).
Note that the order of sj1 and s
j
2 are not essential since they are interchange-
able. Now we connect vertex sj1 to the upper ports of the two literals xi,j and
xk,j , respectively, by a two-bend path. Moreover, at each of the two bending
vertices of this connection path, we attach a 4-cycle. Then we perform the
On Rectilinear Drawing of Graphs 241
We then consider the backward direction. Suppose G has a rectilinear drawing.
Consider the embedded scenario of the gadget for clause cj = xi ∨ xk ∨ xl.
Without loss of generality, suppose that sj1 is a rightmost vertex of 4-cycle σj .
See Figure 6(a). As each connection path consists of two bends, the rightward
port of sj1 must connect to some rightward port of some variable tower. As such,
if we set the truth values for the variables according to the embedding positions
of their towers, all clauses will result in true values. Thus the given 3SAT formula
is satisﬁable. This ﬁnishes our NP-completeness proof.
4.2 Graphs with Degree-2 and Degree-4 Vertices
With our result on graphs with connected-4-cycle cover above, at the ﬁrst glance,
it is tempting to claim that the rectilinear drawability of a graph with only
degree-2 and degree-4 vertices may be polynomial-time solvable. However, by
slight modiﬁcation (see below) of the NP-hardness proof in [9], we obtain its
NP-completeness proof for this problem. The vertices with degree one or three
can be eliminated by connecting pairs of them by short paths. Finally, only
degree-2 and degree-4 vertices remain. We conclude in the following theorem.
Theorem 3. Let G be a graph with only degree-2 and degree-4 vertices. The
decision problem whether G has a rectilinear drawing is NP-complete.
5 Fixed-Parameter Algorithm
In this section, we show that the rectilinear drawing problem is ﬁxed-parameter
tractable, where the parameter is the number of degree-3 and degree-4 vertices
in the graph.
Theorem 4. Let Gk be a degree-4 graph with k vertices of degree 3 or 4 for
some constant k. The decision problem whether Gk has a rectilinear drawing can
be answered in linear time, or more precisely, in O(24k · k2k · n) time.
Proof. Let K be the set of these k degree-3 or degree-4 vertices. The vertices in
K can be distributed among k vertical columns. Considering these columns as
boxes, we can have at most kk diﬀerent ways to put these vertices into the boxes.
On the other hand, the vertices in K also can be distributed among k horizontal
rows, and there are also at most kk diﬀerent ways to put these vertices into the
corresponding rows. Hence, there are essentially at most k2k ways to embed the
vertices in K on the plane.
Now suppose that K is one such embedding of K in the plane. Each vertex v
has degree at most 4 and there are only 4 directions in which edges incident to
v can have; thus there are at most 4! = 24 possible choices of directions for the
edges incident to v. Therefore there are at most 24k ways to select the directions
of all edges incident to the vertices of K.
We can check the embeddability of the whole graph for each selection of edge
directions at each vertex of K. Suppose that we have selected the direction for all
On Rectilinear Drawing of Graphs 243
5. Bodlaender, H.L., Tel, G.: A note on rectilinearity and angular resolution. Journal
of Graph Algorithms and Applications 8, 89–94 (2004)
6. Didimo, W., Eades, P., Liotta, G.: Drawing graphs with right angle crossings.
In: Dehne, F., et al. (eds.) WADS 2009. LNCS, vol. 5664, pp. 206–217. Springer,
Heidelberg (2009)
7. Dolev, D., Leighton, F.T., Trickey, H.: Planar embedding of planar graphs. Ad-
vances in Computing Research 2, 147–161 (1984)
8. Eppstein, D.: The topology of bendless three-dimensional orthogonal graph draw-
ing. In: Tollis, I.G., Patrignani, M. (eds.) GD 2008. LNCS, vol. 5417, pp. 78–89.
Springer, Heidelberg (2008)
9. Formann, M., Hagerup, T., Haralambides, J., Kaufmann, M., Leighton, F.T.,
Symvonis, A., Welzl, E., Woeginger, G.J.: Drawing graphs in the plane with high
resolution. In: Proceedings of FOCS, pp. 86–95. IEEE, Los Alamitos (1990); SIAM
Journal on Computing 22(5), 1035–1052 (1993)
10. Garg, A., Tamassia, R.: On the computational complexity of upward and rectilinear
planarity testing. SIAM Journal on Computing 31(2), 601–625 (2002)
11. Hoﬀman, F., Kriegel, K.: Embedding rectilinear graphs in linear time. Information
Processing Letters 29(2), 75–79 (1988)
12. Huang, W., Hong, S., Eades, P.: Eﬀects of crossing angles. In: Proceedings of
PaciﬁcVis 2008, pp. 41–46. IEEE, Los Alamitos (2008)
13. Rahman, M. S., Naznin, M., Nishizeki, T.: Orthogonal drawings of plane graphs
without bends. In: Mutzel, P., Ju¨nger, M., Leipert, S. (eds.) GD 2001. LNCS,
vol. 2265, pp. 392–406. Springer, Heidelberg (2002)
14. Rahman, M.S., Egi, N., Nishizeki, T.: No-bend orthogonal drawings of series-
parallel graphs. In: Liotta, G. (ed.) GD 2003. LNCS, vol. 2912, pp. 387–392.
Springer, Heidelberg (2004)
15. Rahman, M.S., Egi, N., Nishizeki, T.: No-bend orthogonal drawings of series-
parallel graphs. In: Healy, P., Nikolov, N.S. (eds.) GD 2005. LNCS, vol. 3843,
pp. 409–420. Springer, Heidelberg (2006)
16. Vijayan, G., Wigderson, A.: Rectilinear graphs and their embeddings. SIAM Jour-
nal on Computing 14(2), 355–372 (1985)
306 J. Manˇuch et al.
drawing/embedding is called planar if none of embedded edges cross; otherwise,
it is called non-planar. We remark here that all embedded edges are straight,
and thus do not contain any bends.
There are several variants of the rectilinear drawing problem which put re-
strictions on how each edge is drawn. The most studied is the following variant.
Associated with the input graph G is a function λ which assigns each oriented
edge e = (u, v) ∈ E of G one of the following four labels: L, R, D, and U, where
λ(u, v) = L (R) means edge e should be drawn horizontally to the left (right)
of the source vertex u, and λ(u, v) = D (U) means edge e should be drawn
vertically below (above) the source vertex u. A graph with edges labeled in this
way will be called an LRDU-restricted graph and is speciﬁed as G = (V,E, λ).
An HV-restricted graph G = (V,E, λ) is a graph with each of its oriented edges
e = (u, v) labeled with H or V. An edge e = (u, v) labeled with λ(u, v) = H
should be drawn on the plane horizontally; whereas an edge labeled λ(u, v) = V
should be drawn vertically. Furthermore, we also consider a diﬀerent kind of
restriction on the edges of the input graph, in which the cyclic ordering of the
incident edges around each vertex is ﬁxed in every rectilinear drawing of this
graph. Such graphs will be called cyclic-restricted. Cyclic-restricted graphs with
a planar embedding are exactly the so-called graphs with a ﬁxed embedding.
On the other hand, a ﬁxed cyclic ordering of edges around a vertex is an impor-
tant constraint in the deﬁnition of a ﬁxed embedding condition for a non-planar
graph [1]. This motivates us to investigate rectilinear drawings of such a kind of
graphs. A graph with no restriction on the edges will be called unrestricted.
Planar rectilinear drawings have been extensively investigated in the literature
of graph drawing. Garg and Tamassia [5] showed that deciding whether a graph
is rectilinear planar is NP-complete. However, there are eﬃcient algorithms, in
fact linear-time algorithms, to ﬁnd (construct) planar rectilinear drawings of
plane graphs of maximum vertex degree three [13], subdivisions of planar tricon-
nected cubic graphs [11], and series-parallel graphs of maximum vertex degree
three [12]. These algorithms apply to unrestricted graphs. Some other research
also considered the restricted variants. Vijayan and Wigderson [14] present a
linear-time decision algorithm and a O(n2)-time algorithm for ﬁnding a planar
rectilinear drawing of an LRDU-restricted graph. Following this work, Hoﬀman
and Kriegel [6] present an improved linear-time algorithm that ﬁnds such a draw-
ing. However, Patrignani [10] showed that it is NP-complete to ﬁnd a planar
rectilinear drawing with minimum area for an LRDU-restricted graph. Recently,
Eppstein [3] investigated the rectilinear drawing problem in three dimensions,
and showed that it is NP-complete to determine whether an unrestricted graph
has a rectilinear drawing with the constraint that at most two vertices lie on the
same axis-parallel line.
On the other hand, non-planar rectilinear drawing has not been so well stud-
ied. Formann et al. [4] showed that it is NP-hard to decide whether a graph of
maximum vertex degree 4 has a straight-line drawing with angular resolution π2 .
This is equivalent to say that it is NP-hard to decide whether there is a draw-
ing/embedding of an unrestricted graph. Further, Eades, Hong and Poon [2]
308 J. Manˇuch et al.
v1,1 v1,2 v1,3
v2,1v2,2 v2,3
v3,1 v3,2v3,3
v4,1v4,2 v4,3
1 2 3 4 5
(a)
v1,1 v1,2 v1,3
v2,1v2,2v2,3
v3,1v3,2v3,3
v4,1 v4,2 v4,3
12 34 5
(b)
Fig. 1. (a) The input graph constructed for the instance of the BTW problem with
triples (2, 4, 5), (3, 1, 4), (3, 5, 1) and (2, 1, 3). The dashed lines represent edges labeled
with V. (b) Rectilinear drawing of this graph corresponding to the solution f(2) <
f(4) < f(1) < f(5) < f(3) of this instance.
x(vi,3). Now to ensure (ii), for every s ∈ S, let vi1,j1 , vi2,j2 , . . . , vip,jp be the ele-
ments of Vs ordered such that i1 < i2 < · · · < ip. For  ∈ {1, . . . , p− 1}, we set
λ(vi,j , vi+1,j+1) = V. This path containing vertical edges through the set Vs
ensures that they have the same x-coordinate for every rectilinear drawing x, y
of G. An example of a graph constructed for an instance of the BTW problem
is shown in Figure 1(a). Figure 1(b) shows a rectilinear drawing of this graph.
We now show that instance I has a solution if and only if G has a rectilinear
drawing.
If I has a solution f , then we draw G as follows. The x-coordinates of vertices
in V are set according to the injective mapping f and y-coordinates are set
according to the order on the triples: x(vi,j) = f(ti,j) and y(vi,j) = i. Obviously,
the pair x, y satisﬁes all restrictions on edges. To show that it is a rectilinear
drawing, we need the following lemma. For any v ∈ V , we denote (x, y)(v) =
(x(v), y(v)).
Lemma 1. For edge {vi,j , vi′,j′} ∈ E, there is no vertex vi′′,j′′ ∈ V \{vi,j , vi′,j′}
such that (x, y)(vi′′ ,j′′) lies on the line segment L = [(x, y)(vi,j), (x, y)(vi′ ,j′)].
Proof. Assume for contradiction that the image of vertex vi′′,j′′ ∈ V \{vi,j, vi′,j′}
lies on line segment L. If λ(vi,j , vi′,j′) = H, then i = y(vi,j) = y(vi′,j′) = i′ and
j = j′ ± 1. Since (x, y)(vi′′,j′′) lies on L, we have i′′ = y(vi′′,j′′) = i = i′,
i.e., ti,j , ti′,j′ and ti′′,j′′ are from the same triple ti, i.e., {j, j′, j′′} = {1, 2, 3}.
Furthermore, x(vi′′,j′′) = f(ti′′,j′′) is between x(vi,j) = f(ti,j) and x(vi′,j′) =
f(ti′,j′). Hence, j′′ = 2 which contradicts the fact that j = j′ ± 1.
If λ(vi,j , vi′,j′) = V, then we have ti,j = ti′,j′ = s and vi,j , vi′,j′ ∈ Vs. Since
(x, y)(vi′′,j′′ ) lies on L, f(ti′′,j′′) = f(s). Since f is injective, ti′′,j′′ = s, i.e.,
vi′′,j′′ ∈ Vs. It follows that vertices vi,j , vi′,j′ , vi′′,j′′ lie on the path of V-edges,
hence, (x, y)(vi′′,j′′) cannot lie on L in any rectilinear drawing of G. unionsq
Conversely, assume G has a rectilinear drawing x, y. Such a drawing must satisfy
conditions (i) and (ii) discussed above. By condition (ii), for every s ∈ S, every
310 J. Manˇuch et al.
x1 x2 x3 xn
. . . . . .
.
.
.
cm
c2
c1
K
Fig. 2. L-shaped skeleton with ports
that connect to variable towers and
clause gadgets
.
.
.
xi,2
xi
xi,1
xi,m
xi,2
xi,1
xi,m
xi = True
.
.
.
xi,2
xi,1
xi,m
xi,2
xi,1
xi,m
xi = False
K K
xi
(a) (b)
Fig. 3. Variable tower for xi and the represen-
tation of its truth values. Note that the literals
on the right have value true.
xi,jxi,j
xi = False
xk,j
xk
xk,j
xk = False
xl,j
xl
xl,j
xl = True
cj
cj = True
xi
K
Fig. 4. An example of a clause gadget for clause cj = xi ∨ xl ∨ xk. The port of cj is
bent down which forces the last literal xk to have value true.
tower to be in the conﬁguration that sets its literal in cj to true, in this exam-
ple, literal xk. Finally, it is easy to see that the 3SAT formula has a satisfying
assignment if and only if the constructed graph has a rectilinear drawing. Thus
this problem is NP-hard. unionsq
2.3 Rectilinear Drawings of LRDU-Restricted Graphs
Theorem 3. Given an LRDU-restricted graph G = (V,E, λ), the problem of
deciding if G has a rectilinear drawing and finding such a drawing can be done
in time O(|V ||E|).
Proof. We will give a polynomial-time algorithm for the problem. Given LRDU-
restricted graph G = (V,E, λ), we ﬁrst check to see if G satisﬁes the following
necessary conditions: for every u, v, w ∈ V and X ∈ {L,R,D,U}, (i) λ(u, v) ∈
{L,R,D,U} iﬀ {u, v} ∈ E; (ii) λ(u, v) = L iﬀ λ(v, u) = R and λ(u, v) = D
312 J. Manˇuch et al.
2.4 Fixed-Parameter Algorithms
In previous work, Eades, Hong and Poon showed that the problem of ﬁnding non-
planar rectilinear drawings is ﬁxed parameter tractable, where the parameter k
is the number of vertices of degree 3 or 4, more precisely, they obtained that it
can be solved in O(24k · k2k · n)-time [2]. In this work, we build on their idea
to improve the runtime complexity of the algorithm and in addition consider
rectilinear drawings for cyclic-restricted, and HV-restricted graphs. We sketch
our proof here, and leave its detailed proof for the full version of this paper.
Theorem 4. Given an unrestricted, cyclic-restricted, or HV-restricted degree-4
graph G of order n, a rectilinear drawing of G can be found in linear-time, or
more precisely, in O(24k ·k2k+1+n), O(12k·k2k+1+n), and O(4k ·k2k+1+n)-time,
respectively, where k, the number of vertices of degree 3 or 4, is a constant.
Proof (Sketch). Let K be the set of these k degree-3 or degree-4 vertices. We
refer to any vertex v ∈ K as a high degree vertex, or simply an hd-vertex. We
call a path of degree-2 vertices connecting two hd -vertices an hd-path.
We ﬁrst consider the case where G is unrestricted. Consider an hd -path p going
from vertex u to vertex v. Suppose eu and ev are the two end edges of p incident
to u and v, respectively. Depending on the current embedding of K, there are at
most four choices of orientation for each of the two edges eu and ev. Thus there
are at most 16 combinations. For each of these combinations, we know exactly
how many edges, say m, path p needs to possess so that the connection between
u and v can be built and routed around the other hd -vertices. We further know
that m is at most ﬁve: if p possesses at least ﬁve edges, then no matter what
the orientations of eu and ev are, the connection between u and v can be built.
Hence, we perform a prepossessing step by traversing input graph G, to compute
the lengths of all hd -paths. Since the maximum number of hd -paths is 2k, this
can be done in time proportional to the size of G, i.e., O(n).
Since ﬁnding a routing of all hd -paths is suﬃcient for ﬁnding a rectilinear em-
bedding of the entire graph G, we simply enumerate the number of possibilities
to be checked to give us the running time of this algorithm. For any embedding
of the vertices in K on the plane, it is possible that no two share a common coor-
dinate, thus resulting in k unique horizontal and vertical coordinates. Therefore,
any embedding in the plane can be considered a distribution of the vertices of
K on a k × k grid. Hence, there are no more than (k2)k = k2k possible embed-
dings to consider. Since each vertex v ∈ K is incident to at most four edges,
each having one of four possible orientations, there are at most 4! = 24 possible
orientations of edges incident to v, and at most 24k possible orientations for all
vertices in K. Therefore, considering this number of possibilities, the time to
check them and the initial length calculation of all O(k) hd -paths, a rectilinear
drawing for G (if one exists) can be found in O(24k · k2k+1 + n)-time.
Finding a rectilinear drawing when G is cyclic-restricted (resp. HV-restricted)
needs to consider at most 12 (resp. 4) possible orientations of edges incident to
314 J. Manˇuch et al.
(a) (b) (c)
Fig. 6. (a) The clause and variable lines passing through the no-occurrence block at
position (i, j), i.e., variable xi has no occurrence in cj . Note that if the block is in
the ﬁrst column (last column, ﬁrst row, last row) then the variable (variable, clause,
clause) line is attached to the left (right, top, bottom) of the frame. (b-c) The clause
and variable lines passing through the positive-occurrence block at position (i, j), i.e.,
variable xi has a positive occurrence in cj .
Now, let us analyze how the clause line for cj and the variable line for xi can
pass through the block at position (i, j). This will depend on the type of the
block. For the no-occurrence block depicted in Figure 5(a) there is only one way
that the clause and variable lines can pass through the block; see Figure 6(a).
Note that no internal vertex can be placed on the clause line and no bump can
occur on the variable line inside this block.
For the positive-occurrence block depicted in Figure 5(b) there are two ways
that the clause and variable lines can pass through the block. They are depicted
in Figure 6(b)–(c). Note that the variable line can contain at most one bump
inside this block. In the case where it contains no bump (passes through directly),
at most one internal vertex can be placed on the clause line inside this block.
If it contains a bump, then at most two internal vertices can be placed on the
clause line inside this block. Figure 6(b)–(c) depicts the possibilities with the
maximal number of internal vertices on the clause line.
(a) (b)
Fig. 7. The clause and variable lines passing through the negative-occurrence block at
position (i, j), i.e., variable xi has a negative occurrence in cj
For the negative-occurrence block depicted in Figure 5(c) there are two ways
that the clause and variable lines can pass through the block. They are depicted
in Figure 7. Note that the variable line contains either zero or two bumps in-
side this block. In the case where it contains no bump (passes through directly),
similarly as for the positive-occurrence block, at most one internal vertex can
be placed on the clause line inside this block. If it contains two bumps, then
316 J. Manˇuch et al.
we show that the existence problem, and thus the area-minimization problem,
is NP-complete. Finally, we have shown the NP-complete existence problems to
be ﬁxed parameter tractable in the number of vertices of degree 3 or 4.
It remains open whether or not the corresponding minimum-area drawing
cases are also ﬁxed parameter tractable. Since there are polynomial time al-
gorithms for ﬁnding planar rectilinear drawings for several diﬀerent classes of
maximum degree 3 graphs [13,11,12], it would be interesting to ﬁnd such classes
for the non-planar case. Further interesting open questions are the complexity of
ﬁnding planar rectilinear drawings of HV-restricted and cyclic-restricted graphs.
References
1. Didimo, W., Eades, P., Liotta, G.: Drawing graphs with right angle crossings.
In: Dehne, F., Gavrilova, M., Sack, J.-R., To´th, C.D. (eds.) WADS 2009. LNCS,
vol. 5664, pp. 206–217. Springer, Heidelberg (2009)
2. Eades, P., Hong, S.-H., Poon, S.-H.: On rectilinear drawing of graphs. In: Epp-
stein, D., Gansner, E.R. (eds.) GD 2009. LNCS, vol. 5849, pp. 232–243. Springer,
Heidelberg (2010)
3. Eppstein, D.: The topology of bendless three-dimensional orthogonal graph draw-
ing. In: Tollis, I.G., Patrignani, M. (eds.) GD 2008. LNCS, vol. 5417, pp. 78–89.
Springer, Heidelberg (2009)
4. Formann, M., Hagerup, T., Haralambides, J., Kaufmann, M., Leighton, F.T.,
Symvonis, A., Welzl, E., Woeginger, G.: Drawing graphs in the plane with high
resolution. SIAM Journal on Computing 22(5), 1035–1052 (1993)
5. Garg, A., Tamassia, R.: On the computational complexity of upward and rectilinear
planarity testing. SIAM Journal of Computing 31(2), 601–625 (2001)
6. Hoﬀman, F., Kriegel, K.: Embedding rectilinear graphs in linear time. Information
Processing Letters 29(2), 75–79 (1988)
7. Huang, W., Hong, S., Eades, P.: Eﬀects of crossing angles. In: Proc. of IEEE Paciﬁc
Visualization Symposium (PaciﬁcVis 2008), pp. 41–46 (2008)
8. Opatrny, J.: Total ordering problem. SIAM Journal of Computing 8(1), 111–114
(1979)
9. Papadimitriou, C.H.: Computational Complexity. Addison-Wesley, Reading (1994)
10. Patrignani, M.: On the complexity of orthogonal compaction. Computational Ge-
ometry 19, 47–67 (2001)
11. Rahman, M.S., Egi, N., Nishizeki, T.: No-bend orthogonal drawings of subdivisions
of planar triconnected cubic graphs. In: Liotta, G. (ed.) GD 2003. LNCS, vol. 2912,
pp. 387–392. Springer, Heidelberg (2004)
12. Rahman, M.S., Egi, N., Nishizeki, T.: No-bend orthogonal drawings of series-
parallel graphs. In: Healy, P., Nikolov, N.S. (eds.) GD 2005. LNCS, vol. 3843,
pp. 409–420. Springer, Heidelberg (2006)
13. Rahman, M.S., Naznin, M., Nishizeki, T.: Orthogonal drawings of plane graphs
without bends. Journal of Graph Algorithms and Applications 7(4), 335–362 (2003)
14. Vijayan, G., Wigderson, A.: Rectilinear graphs and their embeddings. SIAM Jour-
nal of Computing 14(2), 355–372 (1985)
quadratic time. However, any plane k-graph with k ≥ 5 does not have orthogonal
drawing. In order to draw graphs with higher vertex degree, and also with sim-
ple representation shapes for vertices, we investigate the orthogonal drawing with
vertices represented as unit grid squares. See Figure 1(b). Furthermore, researchers
(a) (b)
Fig. 1. Vertex drawn as (i)
a grid point; or (ii) a unit
grid square.
(a) (b)
Fig. 2. (a) Vertices drawn as unit grid squares. (b)
Vertices drawn as unit-diameter disks, and edges
cased.
also considered even more general objects like rectangles to represent the vertices
of the graph, for instance [4, 5, 7, 8, 11]. However, one clear disadvantage of using
rectangular shapes to represent vertices is that rectangles could be fat or skinny,
and hence irregular. This sometimes will hinder the readability of the whole draw-
ing of a graph. Our consideration is that with consistent shapes for all vertices, the
graphs drawn have the advantage of clarity for visualization. Some researchers [4,
7] also investigated the planar orthogonal drawing under the model of representing
vertices by uniformly small squares. However, in their drawings, adjacent edges are
allowed to run in parallel with very small gap between them, which hinders the
readability and clarity of some specific parts of the drawing. Instead, in our rep-
resentation model, only edges lying on the grid lines are allowed, which prevents
adjacent edges from congesting together. We emphasize here that we focus on draw-
ing non-planar graphs whereas some of the motivating work above only applies to
planar graphs. Moreover, with our current representation model, we can afford to
draw k-graphs, where k can be at most 8. Thus we have broadened the classes of
graphs which can be drawn. Note that in our drawings, edge crossings are allowed,
but edge overlapping is not allowed (see Figure 2(a)). In our original formulation,
nodes are represented as unit grid squares, and edges can cross each other; however,
in practice, nodes can in fact be represented as unit-diameter disks, and the inter-
secting edges can be drawn using some well-known techniques, such as edge-casing
(see Figure 2(b)).
Previous work. Due to our concerned topic, we focus here to overview the related
work on the non-planar orthogonal drawing. Let n and m be the number of vertices
and edges in the input graph. We first consider the research work under the model
of representing vertices by points on the plane. Schaffter [12] present an algorithm
to compute an orthogonal drawing, for 4-graphs, of 2n × 2n grid area and with at
most two bends on each edge. Biedl and Kant [3] gave a linear-time algorithm to
compute an orthogonal drawing of n × n grid area and with at most 2n + 2 total
2
it locates. See Figure 4. Suppose we are going to insert edge vivj by connecting unit
squares Vi and Vj (i < j). In order to obtain low bend number, it is always good to
connect a right or lower contact of Vi to a left or upper contact of Vj . Thus we give
these two categories of contacts different names for distinction. The left and upper
contacts of Vi are called incoming contacts of Vi, and its right and lower contacts
outgoing contacts. A contact is called occupied if it connects to some drawn edge;
otherwise, it is called unoccupied or free.
For the convenience of our description later on, we classify the edges with dif-
ferent number of bends into several categories. We call one-bend edges L-edges (see
Figure 5). Two-bend edges are classified into two types called Z-edges and U -edges,
(a) (b)
Fig. 5. An L-edge.
(a) (b)
Fig. 6. A Z-edge.
(a) (b)
Fig. 7. A U -edge.
respectively (see Figures 6 and 7). Three-bend edges are classified into two types
called C-edges and η-edges (see Figure 8). Finally, in Figure 9, we show two different
(a) (b)
Fig. 8. (a) A C-edge, and (b) an η-edge.
(a) (b)
Fig. 9. Two 4-bend S-edges.
orientations of the only kind of 4-bend edges, called S-edges.
3 Drawing 5-Graphs and 6-Graphs
In this section, we describe algorithms to draw 5-graphs and 6-graphs so that each
edge contains at most two bends. We insert edges incrementally, and each time
we insert an edge, we do modifications immediately so that no edges are drawn
with more than two bends. As 5-graphs are subset of 6-graphs, we first present
some common properties and operations for general 6-graphs. Then we proceed to
consider operations specific to either kinds of graphs.
Suppose that we are currently inserting edge vivj(i < j). If either (i) Vj has a
free incoming contact, or (ii) Vi has a free outgoing contact, then we will show that
edge vivj can be established as an edge of at most two bends. Here we only give
the proof for case (i) since the proof for case (ii) is symmetric. The contact of edge
vivj at Vj could be left or upper contact. In any case, a connection of at most two
4
However, there is the last case that there is a lower contact of Vi that connects
to Vk(k > i) with a U -edge (see Figure 15(a)), or symmetrically there is a left
contact of Vj that connects to Vk(k < j) with a U -edge. We only consider the
former subcase as the latter subcase is symmetric. Now, the C-edge between Vi and
Vj may not disappear immediately by making some local modifications. Exchanging
operations may only make the C-edge propagate to other edge wires. For example,
the C-edge reappears as edge vivk after we exchange the two contact ports at Vi
from edges vivj and vivk (see Figure 15). The difficulty we reach here is that the
Vi
Vj
Vk
(a) (b)
Vi
Vj
Vk
Fig. 15. (a) A lower contact of Vi connects
to Vk(k > i) with a U -edge. (b) The C-
edge reappears even after the exchanging
operation.
Vi
Vj
Vk
(a) (b)
V`
Vi
Vj
Vk
V`
Fig. 16. The C-edge vivk further prop-
agates to C-edge vkv`.
propagation of C-edges may repeat. See Figure 16 for an example, where C-edge
vivk further propagates to C-edge vkv`. The bad case we worry about is that if the
propagation goes into a loop, we may not be able to eliminate the C-edge ultimately.
We have to carefully choose how to proceed for further exchanging operations.
In fact, for example, if the next exchanging operation we execute is between the
C-edge of vivk and the U -edge vivj , then we really get into an infinite loop of
exchanging operations. To prevent such situation from happening, our idea is to
keep switching the focus vertex where contacts are examined. For example, at the
beginning of this case, we examine the lower contacts of Vi to look for candidate
edges for exchanging contacts with C-edge vivj ; but when vivk becomes a C-edge
after we exchange some contacts, we should switch our focus vertex to Vk to examine
its left contacts to look for edges for possible exchanging operations with C-edge
vivk. For the convenience of later descriptions, we define a leader vertex (resp.
follower vertex) to be the end vertex of a C-edge, whose outgoing (resp. incoming)
contacts are fully occupied. For example, the above mentioned Vi and Vj are leader
and follower vertex, respectively. We remark that for a leader vertex, we examine
its lower contacts for further exchanging operations; but for a follower vertex, we
have to examine its left contacts for further exchanging operations.
Now suppose that we result in the C-edge vivk after we make the above men-
tioned exchanging operations. When we are examining the left contacts of Vk, we
may immediately eliminate the C-edge in some good case as stated previously, or
in the bad case, the C-edge may propagate again even after some exchanging op-
eration. The question is whether this propagation can continue and ultimately get
trapped into a loop. We report negative answer to this question in the following sub-
sections. We plan to consider 5-graphs and 6-graphs separately since the arguments
for 5-graphs are relatively simpler.
6
case. Therefore the whole graph can be drawn in O(n2) time. We summarize our
result in the following theorem.
Theorem 1. A graph of maximum vertex degree 5 can be embedded orthogonally
on the plane with vertices as unit squares and with edges of at most two bends in
O(n2) drawing area and in O(n2) running time.
3.2 Drawing 6-graphs
In a 6-graph G, one main difference comparing to 5-graphs is that for a leader vertex
Vi, there can be two edges connecting the left contacts of Vi. If any of these two
edges is a C-edge, it needs to make some exchanges with some edge connecting to a
lower contact of Vi. Suppose that the C-edge propagation starts with vivj . Later on,
it may be possible that the C-edge propagates back to become vivk with connection
to the other left contact of Vi. Thus the situation here is more complicated than
what we reach in 5-graphs because the related vertices during the propagation of C-
edges may do repeat. However, we show below that the vertex Vi cannot be visited
for the third time during the propagation. Since the two edges connecting to the
two left contacts of Vi may make some exchanges with the two edges connecting
to the two lower contacts of Vi, for the convenience of our analysis, we pair up
the contact ports to form two fixed channels as shown in Figure 18(a). (The paired
contacts to form channels for follower vertex Vj is shown in Figure 18(b).) According
to the two fixed channels, we can treat the single vertex Vi as being split into two
small vertices, say V 1i and V
2
i . Thus when Vi does repeat for the first time in the
propagation sequence of the C-edges, we can treat this situation as if we reach a
new vertex by using the above split vertices. Hence, the similar arguments as in
Lemma 1 can be used to argue that there will be no repeats on the sequence of split
vertices along the propagation of C-edges. So we obtain the following lemma.
Lemma 2. Any vertex appeared during the propagation of C-edges cannot repeat
for the third time.
We use similar argument as for Theorem 1 to obtain the following theorem.
Theorem 2. A 6-graph can be embedded orthogonally in the plane with vertices as
unit squares and with edges of at most two bends in O(n2) drawing area and in
O(n2) running time.
4 Drawing 8-Graphs
In this section, we describe the algorithm to draw 8-graphs so that each edge con-
tains at most three bends. Again, we insert edges incrementally, and each time we
insert an edge, we do modifications immediately so that no edges are drawn with
more than three bends.
Suppose that we are currently inserting edge vivj(i < j). Since both unit squares
Vi and Vj have four sides, vivj has 16 combination ways to do connection depending
on the availability of the contact ports of Vi and Vj . Among all these combinations,
8
that the propagation sequence of S-edges does not get trapped into a loop. For this
purpose, we use the similar idea as in Section 3 by keeping switching the current
focus vertex for operations whenever some modifying operation is performed. We
take Figure 22 as an example to illustrate our propagation procedure. First, we
examine the lower contacts of Vi to look for candidate edges for exchanging contacts;
but when vivk becomes an S-edge after we exchange some contacts, we switch
our focus vertex to Vk to examine its upper contacts to look for edges for further
modifying operations, and so forth. For our convenience, we define a leader vertex
to be the upper end vertex Vi of an S-edge, whose six left, right, and lower contacts
connect to some lower contacts of some other vertices below Vi, respectively. A
follower vertex is defined to be the lower end vertex Vj of an S-edge, whose six left,
right, and upper contacts connect to some lower contacts of some other vertices
above Vj , respectively. See Figure 23 for an example.
Now, as in Section 3.2, we split each leader or follower vertex Vi to become two
small vertices, V 1i and V
2
i , as shown in Figure 19; and we establish two fixed channels
for the propagation of S-edges to go through Vi. Then using similar arguments as
for Lemma 2, we can obtain the following lemma, whose complete proof is in the
appendix.
Lemma 3. Any vertex appeared during the propagation of S-edges cannot repeat
for the third time.
Hence we have the following theorem.
Theorem 3. A 8-graph can be embedded orthogonally in the plane with vertices as
unit squares and with edges of at most three bends in O(n2) drawing area and in
O(n2) running time.
5 Hardness Result
In this section, we show the NP-hardness of deciding whether there is an orthogonal
drawing without bends under our vertex representation model for an 8-graph. We
provide a sketchy proof here, and the complete proof is in the appendix.
Theorem 4. The problem of deciding whether an 8-graph has an orthogonal draw-
ing with vertices as unit squares and no-bends on edges is NP-complete.
Proof. (Sketch.) The problem is clearly in NP. To prove the NP-hardness of our
problem, we will reduce from the 3SAT problem. Let {x1, x2, · · · , xn} be a set of n
variables, and let {c1, c2, · · · , ck} be a set of k clauses, each of which contains exactly
3 literals. The 3SAT problem is to decide whether there is a truth assignment to
the n variables so that all the k clauses are true.
In our polynomial-time reduction, we construct the basic construction unit called
a diamond, and three important gadgets called skeleton, variable tower, and clause
gadgets. The diamond structure as shown in Figure 24 can be shown to be stable in
the sense the relative positions of the eight surrounding vertex squares relative to
the center vertex square are fixed. (See appendix for the proof.) Using this structure
as basic construction units, we construct the skeleton as shown in Figure 25, where
10
xi,k
xi,2
xi = True
...
...
xi,1
xi,1
xi,2
xi,k
xi,k
xi,2
xi = False
...
...
xi,1
xi,1
xi,2
xi,k
xi xi
Fig. 26. Variable tower for
xi and its truth-value repre-
sentation.
xlxi
cj
xi,j
xi,j
xl,j
xl,j
xk,j
xk,j
xk
Fig. 27. Clause gadget for clause cj = xi ∨ xk ∨ xl.
4. T. Biedl and M. Kaufmann. Area-efficient static and incremental graph drawings. In
Proc. 5th European Symp. on Algorithms, 37–52, 1997.
5. T.C. Biedl, B.P. Madden, and I.G. Tollis Drawing high-degree graphs with small grid-
size. Technical Report 37–96, RUTCOR, Rutgers University, November 1996.
6. M. Formann, T. Hagerup, J. Haralambides, M. Kaufmann, F.T. Leighton, A. Symvonis,
E. Welzl, and G. J. Woeginger. Drawing graphs in the plane with high resolution. In
Proceedings IEEE Symposium on FOCS, 86–95, 1990; SIAM Journal on Computing,
22(5), 1035–1052, 1993.
7. U. Fossmeier and M. Kaufmann. Drawing high degree graphs with low bend numbers.
In Proc. Graph Drawing (GD), 254–266, 1995.
8. X. He. A simple linear time algorithm for proper box rectangular drawings of plane
graphs. Journal of Algorithms, 40(1), 82–101, 2001.
9. A.Papakostas and I.G. Tollis. A pairing technique for area-efficient orthogonal drawings.
In Proc. Graph Drawing (GD), 355–370, 1996.
10. A.Papakostas and I.G. Tollis. Algorithms for area-efficient orthogonal drawings. Com-
putational Geometry: Theory and Applications, 9(1-2), 83–110, 1998.
11. A. Papakostas and I. G. Tollis. Orthogonal drawing of high degree graphs with small
area and few bends. In Proc. 5th Workshop on Algorithms and Data Structures (WADS),
354–367, 1997.
12. M. Schaffter. Drawing graphs on rectangular grids. Discrete Applied Math., 63(1),
75–89, 1995.
13. R. Tamassia. On embedding a graph in the grid with the minimum number of bends,
SIAM Journal on Computing, 16(3), 421–444, 1987.
14. R. Tamassia. Planar orthogonal drawings of graphs. In Proc. of the IEEE International
Symposium on Circuits and Systems, 319–322, 1990.
15. L. Valiant. Universality considerations in VLSI circuits. IEEE Trans. on Computers,
30(2), 135–140, 1981.
12
Vk
Vi
Vj
Vk
Vi
Vj
(a) (b)
Fig. 28. Handling the cases where left contacts of Vi connect to upper vertex, Vk
immediately by performing some modifying operations on edges vivj and vivk as shown
in Figure 28.
Case 2: k > i but vivk is not a C-edge. As vivk is not a C-edge, it can only connect to
the left or upper contact of Vk. For all these two cases, the 4-bend S-edge can always be
eliminated immediately by performing some modifying operations on edges vivj and vivk
as shown in Figure 29.
Vi
Vk
Vj
Vi
Vk
Vj
(a) (b)
Fig. 29. Handling the cases where left contacts of Vi connect to lower vertex, Vk
Then we consider the case that an edge linked to a lower contact of Vi in the following
lemma.
Lemma 6. Let G be an 8-graph, and the drawn part of G contains only edges of at most
three bends. Suppose that neither Vi contains any free lower contact, nor Vj contains any
free upper contact. And suppose that we have just drawn the 4-bend S-edge vivj(i < j) by
connecting an upper contact of Vi to a lower contact of Vj. Then the 4-bend S-edge vivj
can be eliminated immediately if
(i) there is an edge vivk connecting a lower contact of Vi to Vk such that either k < i, or
k > i but vivk is not a U-edge; or
(ii) there is an edge vjvk connecting an upper contact of Vj to Vk such that either k > j,
or k < j but vjvk is not a U-edge.
Proof. We only give the proof for part (i), and the proof for (ii) is similar. We consider
the two cases below.
Case 1: k < i, i.e. Vk is above Vi. As vivk has at most three bends, it can only connect
to the left, right, or lower contact of Vk. For all these three cases, the 4-bend S-edge can
14
Case 1: k < i, i.e. Vk is above Vi. As vivk has at most three bends, it can only connect
to the right, upper, or lower contact of Vk. For all these three cases, the 4-bend S-edge
can always be eliminated immediately by performing some modifying operations on edges
vivj and vivk as shown in Figure 32.
Vk
Vi
Vj
(a) (b)
Vk
Vi
Vj
Fig. 32. Handling the cases where right contacts of Vi connect to upper vertex, Vk
Case 2: k > i but vivk is not an η-edge. As vivk is not an η-edge, it can only connect
to the left, right, or upper contact of Vk. For all these three cases, the 4-bend S-edge can
always be eliminated immediately by performing some modifying operations on edges vivj
and vivk as shown in Figure 33.
Vi
Vk
Vj
Vi
Vk
Vj
(a) (b)
Fig. 33. Handling the cases where right contacts of Vi connect to lower vertex, Vk
A.3 Proof of Lemma 5
Proof. Suppose to the contrary that some vertex in the order O repeats for the third time.
Then we let Vr be the first such vertex along order O. We treat the single vertex Vr as
being split into two small vertices, V 1r and V
2
r . Thus the first appearance of Vr could
correspond to either small split vertices, V 1r or V
2
r . Without loss of generality, we assume
that V 1r first appears. We also let Vp and Vq be the vertices just after the first and second
occurrences of Vr, respectively. And let Vs be the vertex just before third occurrence of
Vr. Now, O should appear as {Vj , Vi, . . . , V 1r , Vp, . . . , V 2r , Vq, . . . Vs, V 1r , . . .}. We have two
cases depending on whether V 1r is a leader or a follower. We first give the proof for former
case , and then afterwards we describe the difference in the proof for the latter case.
16
V 1r V
2
r
V 1r V
2
r
Vs
Vp
Vq
Fig. 35. Small vertex V 1r as a follower cannot repeat.
structure in Figure 24. It is in the sense the relative positions of the eight surrounding
vertex squares relative to the center vertex square are fixed. We prove that the diamond
structure is stable in the following lemma.
Lemma 8. The diamond structure in the graph is stable. The edge lengths between the
vertices are fixed.
Proof. We start by defining the structure of a diamond, the basic construction unit in
our reduction. In a diamond structure, there is a center vertex v of degree 8. There are
another eight vertices connecting to center vertex v. Their order satisfy the property that
a degree-3 vertex is adjacent to degree-5 vertex. We denote these eight vertices by u0, u1,
· · ·, u7 such that ui is adjacent to ui+1 for i = 0, · · · , 7 such that the degrees of ui change
alternatively with 3 and 5. We remark that in this proof, we will use the convention that
all additions are of modulus 8. Moreover, the connection edges between vertices u0, u1,
· · ·, u7 are as shown in Figure ??(a). Now let unit square V denote v, the center vertex
of the diamond structure. And the vertices u0, u1, · · ·, u7 are also represented by unit
grid squares U0, U1, · · · , U7, respectively. Let N(v) =}U0, U1, · · · , U7}. Moreover, for the
convenience of our following description, we number the contact ports of a vertex V as
shown in Figure 36.
V
12
3
4
5 6
7
8
Fig. 36. Numbering the contact ports around a vertex V .
Then we define the separation between Ui and Uj . Suppose the diamond structure
has an embedding on the plane under our representation model. We define the separation
18
Ui and Ui+1 is 0. We prove this by arguing that any non-zero separation between Ui and
Ui+1 cannot happen. We only need to consider three cases that their separation is either
1, 2, or 3. The reasons are as follows. The vertices in N(V ) forms a ring around center
vertex V . Thus the cases for Ui and Ui+1 with separation 4, 5, or 6 are in fact the cases for
Ui and Ui+1 with separation 2, 1, or 0, respectively, in clockwise order. Hence, their proof
arguments would be similar to the three cases we are going to investigate. We now proceed
to consider, one by one, the cases that the separation between Ui and Ui+1 is either 1, 2,
or 3.
Case 1: The separation between Ui and Ui+1 is 1. There are four situations of relative
positions for Ui and Ui+1 as shown in Figure 39. For the first two situations as shown
Ui+1
Ui
Ui+1
UiUi
Ui+1
Ui
Ui+1
(c) (d)(a) (b)
V V
Fig. 39. Four possible relative positions for Ui and Ui+1 when their separation is 1.
in Figure 39(a) and (b), we cannot draw a horizontal/vertical edge between Ui and Ui+1.
Thus these two situations cannot happen. For the other two situations in Figure 39(c) and
(d), there is only one way to establish the edge between Ui and Ui+1, which is shown in
the figure. The situation in Figure 39(c) is impossible since the horizontal edge along port
3 between the center vertex V and one of its neighbor cannot be established. Now the
remaining situation is the one in Figure 39(d), whose proof needs more arguments.
The arguments make use of two more vertices Uj and U
′
j we obtain in our claim above.
Since Uj connects to V , Ui, and Ui+1, it is not hard to see that Uj must locate at the
position as shown in Figure 40(b). However, now we cannot a suitable position to place U ′j
Ui+1
Ui
Uj
Ui+1
Ui
VV
(b)(a)
Uj U
′
j
Fig. 40. Two situations for the case in Figure 39(d).
so that U ′j are adjacent to both Uj and V (see Figure 39(d)). Hence, this situation again
cannot happen.
Case 2: The separation between Ui and Ui+1 is 2. We need to consider two cases. First
case is that Ui and Ui+1 connects to the two opposite corners of square V , which is as
shown in Figure 41. Figure 41 shows the four situations to place squares Ui and Ui+1. In
any of these situations, the horizontal/vertical between Ui and Ui+1 cannot be established.
Thus this case cannot happen.
20
Now, the ordering of the vertices in N(V ) around V is correct, and we will turn to
consider another issue, which is to show that the lengths of the edges between center vertex
V and the vertices in N(V ) must be exactly the same as shown in Figure 37. If we can
show this, then we would have completed our proof to show that the diamond structure
is stable.
We start with a degree-5 vertex, say Ui, in the diamond structure. Without loss of
generality, suppose that Ui connects to port 2 of V . The proof for the situations when Ui
connects to other port of V would be similar. In the following, we will try to embed the
vertices Ui, Ui+1, and Uj , one by one, onto the plane.
First, Ui is placed onto the plane at some location. Then we consider where to embed
V . We divides into two cases depending on whether the spans of Ui and V along the x-axis
on the plane coincide or not. If they are the same, then Ui either connects to at most
two vertices (see Figure 44(a)), or three vertices (see Figure 44(b)) via direct orthogonal
segments. This contradicts to the given condition that Ui has degree 5. Thus we have the
Ui
V
Ui
V
(a) (b)
Fig. 44. Spans of Ui and V along the x-axis coincide.
spans of Ui and V along the x-axis must not coincide. Now we proceed to embed the vertex
Ui+1. Due to the current positions of Ui and V , Ui+1 has to connect to Ui and port 3 of
Ui+1
Ui
V
Uj
Ui
V
Ui+1
Ui
V
(a) (b) (c)
Fig. 45. Embed Ui, V, Ui+1, and Uj one by one in this order.
V (see Figure 45(b)). Thus the spans of squares Ui, Ui+1 and V along the y-axis are three
consecutive unit-length vertical segments. However, note that the two horizontal edges
Ui+1Ui and Ui+1V can extend horizontally together. Thus their lengths are not fixed yet.
At last, we will embed Uj too onto the plane. Now Uj has to connect to Ui, Ui+1 and port 4
of V , respectively, with direct orthogonal segments. Thus the spans of squares Ui+1, Uj , Ui
and V along the x-axis are four consecutive unit-length vertical segments (see Figure 45(c)).
Hence, the subgraph induced by vertices ui+1, uj , ui and v has an orthogonal embedding
such that all its edges has fixed lengths as shown in Figure 45(c), i.e., the subgraph is
stable.
22
tower. The other 2-bend paths are using upper or lower side to do connection. And the
whole graph can be drawn by orthogonal lines. Conversely, suppose that the graph has
an orthogonal drawing without bends. We consider the 2-bend path that has contact with
right side of cj . The assignment of the tower xi will let cj be True. Each clause is satisfied,
and so Φ is satisfied. Hence, we obtain harness result as stated in the theorem.
24
software engineering, computational cartography, visual interfaces, 
bioinformatics, and networking. Researchers and practitioners working on 
theoretical and practical aspects of graph drawing are welcome to participate. 
This is my first time to attend this conference. During the conference, I attended 
many interesting talks, and knew more great researchers from Germany, 
Australia, Italy, and USA in the field of graph drawing. Moreover, I also met 
some of my old collaborators, for instance, Peter Eades and Seokhee Hong 
from Belgium, Bettina Speckmann from the Netherlands, Martin Nollenburg 
and Alexander Wolff from Germany. I had great conversations with all of them, 
and got many insights about what are the current trends in doing research in 
graph drawing in the near future. With some of them, we also made some 
progress working on some research problems together, and exchanged each 
other very nice ideas to attack the research problems, such as to minimize the 
number of crossings for a large amount of bus routes, to split clusters to get 
c-planarity, to have rectilinear drawing on a more general class of graphs. 
 
In all, this trip had been very fruitful to me in terms of becoming more visible 
internationally in the field of graph drawing, and strengthening my 
collaboration links with some researchers or professors from Australia, 
Germany and Italy. This is especially very nice to me since around two years 
ago, I started my assistant professorship in NTHU, Taiwan. Last but not least, I 
have also introduced our Department of Computer Science, and our university, 
NTHU, to the researchers I met, and hope that we will invite some of them to 
visit our university so as to increase the reputation of our university. 
 
 
Web computing, e-commerce, VLSI circuit design, information systems, 
software engineering, computational cartography, visual interfaces, 
bioinformatics, and networking. Researchers and practitioners working on 
theoretical and practical aspects of graph drawing are welcome to participate. 
During the conference, I attended many interesting talks, and knew more great 
researchers from Germany, Australia, Italy, and USA in the field of graph 
drawing, for instance, Prof. Giuseppe Liotta from University of Perugia, Prof. 
Roberto Tamassia form Brown University, and David Eppstein from University 
of California, Irvine. Moreover, I also met some of my old collaborators, for 
instance, Peter Eades and Seokhee Hong from Belgium, Bettina Speckmann 
from the Netherlands, Martin Nollenburg and Alexander Wolff from Germany. I 
had great conversations with all of them, and got many insights about what are 
the current trends in doing research in graph drawing in the near future. With 
some of them, we also made some progress working on some research 
problems together, and exchanged each other very nice ideas to attack the 
research problems, such as to minimize the number of crossings for a large 
amount of bus routes, to split clusters to get c-planarity, to have rectilinear 
drawing on a more general class of graphs. 
 
 
In all, this trip had been very fruitful to me in terms of becoming more visible 
internationally in the field of graph drawing, and strengthening my 
collaboration links with some researchers or professors from Australia, 
Germany and Italy. This is especially very nice to me since around three years 
ago, I started my assistant professorship in NTHU, Taiwan. Last but not least, I 
have also introduced our Department of Computer Science, and our university, 
NTHU, to the researchers I met, and hope that we will invite some of them to 
visit our university so as to increase the reputation of our university. 
 
 
 
 
 !"#$%
The conference is intended to provide a forum for researchers working in 
algorithms, computational geometry and theory of computation. Papers 
presenting there are original research in the areas of design and analysis of 
algorithms, computational complexity, theory of computation, graph theory, and 
their applications. During the conference, I attended many interesting talks, and 
knew more great researchers from Japan, Korea, Australia, and USA in the field 
of algorithms, graph drawing and computational geometry, for instance, Prof. 
Tetsuo Asano from JAIST, Prof. Nishizeki from Japan, Prof. Kazuo Iwama 
from Kyoto University, Prof. Takashi Horiyama from Saitama University, Prof. 
Peter Eades, Prof. Seok-Hee Hong from University of Sydney, Prof. Stefan 
Langerman from Belgium, Prof. Siu-Wing Cheng from HKUST, Prof. Heekap 
Ahn and Prof. Chwa from Korea, and David Eppstein from University of 
California, Irvine. Moreover, I also met some of my old collaborators, for 
instance, Prof. Peter Eades, Prof. Seokhee Hong, Prof. Siu-Wing Cheng. I had 
great conversations with all of them, and got many insights about what are the 
current trends in doing research in graph drawing and computational geometry 
in the near future. With some of them, we also made some progress working on 
some research problems together, and exchanged each other very nice ideas to 
attack the research problems, such as the k-hop dominating set problem, and 
the straight-line drawing of 1-planar graphs. 
 
After attending the conference, as I mentioned before, I visited Dr. Han in 
Yonsei University for one day. As my stay there for this time is short, I did not 
give a talk there. We had very nice discussions about some possible 
collaboration directions on some graph drawing or theory of computation 
problems, for example, the geometric embedding problem of graphs with 
circular arcs and large crossing angles, and the problem of finding minimizing 
number of states for unary regular languages. We formulate some interesting 
variants for further investigation, and we are currently thinking about how to 
solve them. We will continue our discussions via emails or next time we meet. 
 
In all, this trip had been very fruitful to me in terms of becoming more visible 
internationally in the field of algorithms, and strengthening my collaboration 
links with some researchers or professors from Japan, Korea, and Australia. 
This is especially very nice to me since around three years ago, I started my 
assistant professorship in NTHU, Taiwan. Last but not least, I have also 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/12/19
國科會補助計畫
計畫名稱: 圖的包含對角線之正交格線畫法
計畫主持人: 潘雙洪
計畫編號: 97-2221-E-007-054-MY3 學門領域: 計算機理論與演算法
無研發成果推廣資料
其他成果 
(無法以量化表達之
成果如辦理學術活
動、獲得獎項、重
要國際合作、研究
成果國際影響力及
其他協助產業技術
發展之具體效益事
項等，請以文字敘
述填列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
