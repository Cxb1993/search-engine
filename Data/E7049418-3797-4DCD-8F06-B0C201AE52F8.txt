中文摘要 
單晶片網路(NoC)是一個能新幫助我們符合複雜的系統單晶片(SoC)設計上的挑
戰的新型架構。在這份報告中，我們提出了用於多媒體資料處理之可重置低功
率 NoC 平台的路由器架構。在網路架構上，我們提供在系統擴充時有擴充性的
拓墣(topology)和低延遲的交換方式(switching technique)。為了能簡單地映射
aNoC 到二維的 layout，我們採用 2D mesh 的拓墣。我們也採用將單一實體通道
(physical channel)分割成多個虛擬通道(virtual channel)的蟲洞(wormhole)的交換
方式以減少封包在傳送時的延遲和阻擋效應。在路由器架構上，我們集中在路
由和解決競爭的仲裁機制。在我們提出的路由器的路由、仲裁單元以及階層化
的設計方法能夠讓我們在採用不同的路由和仲裁演算法時很容易地的抽換和模
組化，得以配合各種多媒體資料處理的應用來重置適應之。 
 
英文摘要 
Networks-on-a-chip (NoC) is a new architectural template, which helps us to meet 
many of challenges of designing a complex system-on-a-chip (SoC). In the report, 
we propose the router architecture for a low-power NoC template for multimedia 
processing. In the network architecture, we focus on the topology and the switching 
technique which provide scalability and low latency as the system expands. We 
adopt the 2D mesh topology for easily mapping the aNoC into 2D physical layout. 
We also adopt the wormhole switching technique which a physical channel is 
divided into several virtual channels to reduce the latency and blocking effect in 
packet transmitting. In the router architecture, we focus on the routing and 
arbitration mechanisms to solve contentions. The routing units, arbitration units and 
the hierarchical design methodology in our proposed router can be easily 
modularized when we adopt different routing and arbitration algorithms for all kinds 
of applications of multimedia processing. 
 
關鍵詞 
路由器(router)、網路單晶片(Network-on-Chip)、可重置性(reconfiguration)
 I
There are 2 hierarchical networks in the aNoC 
template, which are called local network and the 
global network from the lower to higher hierarchy 
respectively. The local network connects all adjacent 
nodes in the mesh and is used for the data 
transmission in the local area. For the scalability of 
the network and for reducing the latency of the 
transmission between 2 distant nodes, we add the 
extra global network between non-adjacent nodes [2]. 
The hop counts of the global network can be 
determined according to the size and the latency 
requirement of the system. Both in the local and the 
global network, there is a set of bidirectional 
full-duplex channel to connect 2 nodes. Take the 
Figure 1 for an example, this is a 16-node 2D mesh 
network and the pair of (x, y) represents the address 
of nodes in the network. The hop count of the global 
network is 4. 
 
2.2. Switching technique 
 
The switching technique of the aNoC network is 
the wormhole routing. In the regular packet 
switching, we divide a message into several packets. 
To decrease the latency of packet transmitting 
between the source and the destination node, we 
further divide each packet into several smaller flow 
control digits called flits, and only the head flit (i.e. 
the first flit of a packet) records the destination 
address of the packet for routing. Other flits in the 
same packet follow the path established by the head 
flit and these flits are transmitted in a 
pipelined-fashion. Besides, to increase the utilization 
of channels and to avoid deadlocks of the wormhole 
routing, we adopt a technique called virtual channel 
[3] which divides a single unidirectional physical 
channel into several virtual channels. 
 
3. Router design 
 
From the requirements of the switching 
technique, we proposed an input-buffered router and 
it provides the modularized routing module and 
arbitration units. Besides, the number of 
input/output ports (physical channels), the number 
of virtual channels per physical channel and the 
buffer size of each virtual channel can be 
parameterized in the design time. For the complex 
modules for virtual channel and switch allocation, 
we depict the dataflow of these modules to explain 
our design. The scheduling consideration is also 
mentioned. 
 
3.1. Router architecture 
 
…input port 0
routing
statestate buffer
virtual channel 
allocater
sovc0
xbr_ctrl
ivcid0
…
To virtual channel allocater
From other routing engine
sovc1
flit_in0 
state
state
ovcid0
flit_out0
flit_out(p-1)
ovcid_gen_opc0
tx_fsm_opc_0rx_fsm_ipc_0 routing
……
…
… sovcv-1routing
…
……
… state buffer
state buffer
rx0
rx_ack0
statestate bufferflit_in1
rx_fsm_ipc_1 …
…
……
… state buffer
state buffer
rx1
rx_ack1
sovcv
sovcv+1
sovc(2v-1)
routing
routing
routing
statestate bufferflit_in(p-1)
rx_fsm_ipc_(p-1) …
…
……
… state buffer
state buffer
rx(p-1)
rx_ack(p-1)
sovc(p-1)*v
sovc(p-1)*v+1
sovc(p-1)*v+(v-1)
routing
routing
routing
…
To virtual channel allocater
state
…
ivcid1
ivcid(p-1)
tx0
tx_ack0
state
state
ovcid1
flit_out1
ovcid_gen_opc1
tx_fsm_opc_1
state
…
tx1
tx_ack1
state
state
ovcid(p-1)ovcid_gen_opc(p-1)
tx_fsm_opc_(p-1)
state
…
tx(p-1)
tx_ack(p-1)
…
ivc_full0 ~ivc_full(v-1)
ivc_fullv ~ivc_full(2v-1)
ivc_full(p*v) ~ivc_full(p*v-1)
ovc_full0 ~ovc_full(v-1)
ovc_fullv ~ovc_full(2v-1)
ovc_full(p*v) ~ovc_full(p*v-1)
input port 1
input port (p-1)
output port 0
output port 1
output port (p-1)
p x p
Xbar
Xbar control
ovc0 ovc1 ovcp*v-1…
opc0 opc1 opcp*v-1…
switch 
allocater
ovc_one_sapce0 ~ovc_one_space(v-1)
ovc_one_sapcev ~ovc_one_space(2v-1)
ovc_one_sapce(p*v) ~ovc_one_space(p*v-1)
ivc_one_sapce0 ~ivc_one_space(v-1)
ivc_one_sapcev ~ivc_one_space(2v-1)
ivc_one_sapce(p*v) ~ivc_one_space(p*v-1)
 
Figure 2: Router architecture 
 
The general router architecture of p input/output 
ports, v virtual channels per port (physical channel) 
is shown in Figure 2. In the application of 2D mesh 
topology, p = 5. In each input port and output port 
there are modules dealing with the receiving and 
transmitting handshaking with other routers in the 
network. Each input/output virtual channel keeps its 
state.  
The state machine of each output virtual channel 
dominates the success of the virtual channel 
allocation and the switch allocation of each output 
virtual channel by maintaining the buffer usage of 
other routers via the ovc_full signal. The state 
machine of the input virtual channel dominates the 
operation of router and is mentioned latter.  
The input buffer of the router is separated into v 
individual lanes and supports an ivc_full signal to 
indicate other routers that the input buffer is full or 
not. Which lane the flits coming from other routers 
should be stored is decided by the ivcid (Input 
Virtual Channel IDentify) signal. There is a routing 
module belonging to each input virtual channel, 
which implements the routing algorithm of the router. 
The output of the routing module, sovc (Set of 
Output Virtual Channels) signal, sends to the virtual 
channel allocater for the virtual channel allocation to 
allocate 1 ovc (Output Virtual Channel) among 1 
sovc.  
The switch allocater handles the switch allocation 
by the outcome of virtual channel allocation to 
decide which input virtual channel can send a flit 
through the crossbar switch to the next router. The 
number of input/output port of the crossbar switch 
equals the number of the physical channel, so that 
the complexity of crossbar will not increase with the 
increasing of virtual channels. In each output port, 
there is a module generating the ovcid (Output 
Virtual Channel IDentify) signal to indicate which 
 2
only has to fit in with the following criterion: 
generating possible output virtual channels (i.e., a set 
of possible output virtual channels called sovc 
generated by the routing module) to the next router. 
In 2D mesh application of aNoC, we adopt the XY 
routing which is proven deadlock-free in 2D mesh 
topology and the routing module will generate all 
output virtual channels of a single output port as the 
sovc signal. 
 
4.2. Dataflow of proposed virtual channel 
allocation mechanism 
 
When there are several input virtual channels 
requesting the same output virtual channel for their 
individual packet transmission, we need a 
mechanism to solve the contention and the result of 
the allocation keeps during the transmission of an 
entire packet. The virtual channel allocation can be 
regarded as a matching problem [5] to match the 
maximum input/output virtual channel pairs, and we 
needs 2 arbitrations to accomplish the matching. 
The dataflow of a virtual channel allocater for 
p*n virtual channels is shown in Figure 4. From left 
to right, it contains p*n modules generating the 
request signal for output virtual channels, p*n grant 
arbiters for the 1st arbitration of conflicted request 
signals for the same output virtual channel, p*n 
accept arbiters for the 2nd arbitration of the conflicted 
grant signals form output virtual channels for the 
same input virtual channel, p*n modules generating 
the ovc signal, which means the allocated output 
virtual channel of each input virtual channel, to the 
switch allocater and p*n modules for each output 
virtual channel to receive the final matched input 
virtual channel of the allocation. 
acp_arb0
acp_arb1
acp_arbp*v-1
...
...
ovcP*v-1
ovc0
ovc1
vc_gnt0(p*v-1)
vc_gnt00
vc_gnt01
gnt_arbp*v-1
gnt_arb0
gnt_arb1
vc_req00
vc_req01
sovcp*v-1
vca_reqp*v-1
sovc0
vca_req0
vca_req1
... ...
vc_req0(p*v-1)
sovc1
......
......
......
vca_rece0
vca_rece1
vca_recep*v-1
vc_acp00
vc_acp01...
...
...
vc_acp00 ~ vc_acp0(p*v-1)
vc_acp10 ~ vc_acp0(p*v-1)
vc_acp90 ~ vc_acp0(p*v-1)
vc_req(p*v-1)0
vc_req(p*v-1)(p*v-1)
vc_acp0(p*v-1)
vc_gnt(p*v-1)(p*v-1)
(To switch allocater)
(To switch allocater)
(To switch allocater)
vc_acp(p*v-1)(p*v-1)
vc_req10
vc_req1(p*v-1)
vc_gnt10
vc_gnt1(p*v-1)
vc_acp(p*v-1)0
vc_acp10
Vca(p*v-1)
Vca1
Vca0
vc_gnt(p*v-1)0
(From routing module)
(From routing module)
(From routing module)
 
Figure 4: Dataflow of the virtual channel allocater 
for a router with p*n virtual channels 
 
Each grant arbiter maintains the priority of all 
input virtual channels that want to request this output 
virtual channel. Each accept arbiter maintains the 
priority of all output virtual channels that this input 
virtual channel can request. In order to avoid the 
starvation situation, we can adopt all kinds of fair 
arbitration algorithm in grant arbiters and accept 
arbiters to find a maximal matching in the virtual 
channel allocation. 
 
4.3. Dataflow of proposed switch allocation 
mechanism 
 
When there are several input virtual channels 
requesting the same output port of a crossbar switch 
for flit transmission, we need a mechanism to solve 
the contention and the result of the allocation keeps 
during the transmission of each flit. The switch 
allocation can be regarded as a matching problem [5] 
to match the maximum input/output virtual channel 
pairs, and we needs 2 arbitrations to accomplish the 
matching. The dataflow of a switch allocater for p 
port router, each port n virtual channels is shown in 
Figure 5. 
From left to right, it contains p*n modules 
generating the request signal for output virtual 
channels, p grant arbiters for the 1st arbitration of 
conflicted request signals for the same output port, p 
accept arbiters for the 2nd arbitration of the conflicted 
grant signals form output virtual channels for the 
same input port, p modules generating the opc signal, 
which means the input/output virtual channel pair 
that can transmit a flit,  and p modules for each 
output virtual channel to receive the final matched 
input virtual channel of the allocation. 
acp_arb1
...
acp_arbp-1
gnt_arb1
...
gnt_arbp-1
ovc2v sa_reqv
ovc2v-1 sa_req2v-1...
req0(p*v)
ovcp*v
sa_reqp*v
ovc(p*v-1)
sa_reqp*v-1
sa_rece1
...
acp_arb0
gnt00
gnt0(v-1)
gnt_arb0
req00
req0(v-1)
ovcv-1 sa_reqv-1
sa_req0ovc0
sa_rece0
sa_recep-1
opc0
opcv-1Sa0
opcv
opc2v-1
Sa1
Sap-1
acp00 ~ acp0(p*v-1)
acp(v-1)0 ~ acp(v-1)(p*v-1)
req0(p*v-1)
req0(v)
req0(2v-1)
...
...
...
...
...
...
...
...
...
gnt0(v)
gnt0(2v-1)
gnt0(p*v)
gnt0(p*v-1)
acp00
acp0(v-1)
acp0(v)acp0(2v-1)
acp0(p*v)
acp0(p*v-1)
...
...
opcp*v
opcp*v-1
...
...
acpv0 ~ acpv(p*v-1)
acp(2v-1)0 ~ acp(2v-1)(p*v-1)
acp(p*v)0 ~ acp(p*v)(p*v-1)
acp(p*v-1)0 ~ acp(p*v-1)(p*v-1)
...
...
...
... ...
...
...
...
(To Xbar_ctrl)
(From virtual 
channel allocater)
(To Xbar_ctrl)
(From virtual 
channel allocater)
(From virtual 
channel allocater)
(From virtual 
channel allocater)
(From virtual 
channel allocater)
(From virtual 
channel allocater)
 
Figure 5: Dataflow of the switch allocater for p 
port router, each port with n virtual channels 
 
Each accept and grant arbiter maintains the 
priority of each input virtual channel and output 
virtual channel on the same physical channel 
respectively. In order to avoid the starvation 
situation, we can adopt all kinds of fair arbitration 
algorithm in these grant arbiters and accept arbiters 
to find a maximal matching in the switch allocation. 
 
4.4. Scheduling of proposed router 
 
 4
To balance the time consuming among the virtual 
channel allocation, the switch allocation and the 
4-phase handshaking in the switch traverse, each 
operation of the router takes 4 cycles. For a packet 
which doesn’t face blocking, a head flit takes 16 
clocks to transmit, and other flits of the same packet 
take 8 clocks to transmit. With the pipeline design, 
the router takes 4 clocks to send a non head flit. After 
verifying the pre-synthesis code, we synthesized our 
router based on UMC Artisan 0.18μm cell-library 
by the Synopsys Design Analyzer. After verifying 
the correctness of the post-synthesis code, we also 
accomplished the physical layout of the router by 
Cadence SoC Encounter shown in Figure 8. 
 
Figure 8: Physical layout of the NoC router 
 
In the corner of typical operation, with rise/fall 
time and skew value of the clock signal of 0.1 nano 
second, the overall router chip spec. and the maximal 
delay of each stage are shown in the Table 1 and 
Table 2 respectively. 
 
Table 1:  Pipelined NoC router spec. 
Clock Frequency 200MHz 
Data Rate  (32-bit channel) 1.6Gbps 
Area (core) 1073945.125 µm2
Operating Voltage 1.8V 
Power Consumption 932.5797 mW 
Pipeline Latency 4 cycles 
Port Number 5 
Virtual Channel Number / Port 4 
Buffer Size / Input Virtual Channel 4 flits 
Routing Algorithm XY Routing 
Arbitration Algorithm Round-robin(fair)
 
Table 2: Maximal delay of each stage 
Operation Time (ns) 
RT 2.07 
VCA 3.13 
SA 3.19 
ST/RT, ST/SA 3.19 
ST/IDLE 1.93 
 
The bandwidth of each port of the benchmark 
router is calculated below, and the bandwidth is 
sufficient and better than the HDTV application 
mapped to an on-chip network mentioned in [6]. 
Bandwidth of each port = [(200MHz / 4)*32 bit] = 
1600 Mbps = 1.6 Gbps. 
 
6. Conclusion and Future Work 
 
In this paper, we presented the chip design of a 
pipelined NoC router. The router architecture, the 
transmission mechanism of a packet, the virtual 
channel allocation and switch allocation are 
introduced explicitly. The user can adopt the 
parameters (including port number, number of virtual 
channels in each port, bit number of each channel 
and buffer size), different routing algorithms for the 
routing module and fair arbitration algorithms for the 
virtual channel and switch allocation in our router to 
suit the application mapped in the aNoC. With these 
components, our router let the aNoC provide highly 
scalability and adaptivity. We are going to develop 
the high speed arbiter to overcome the bottleneck of 
the virtual channel and switch allocation and increase 
the overall operation speed of the router. The power 
analysis and low-power design is another research 
topic of the NoC router. 
 
Acknowledgements 
 
The research is partial supported by National 
Science Council under contract no. 
NSC-94-2213-E-006-107. 
 
References 
 
[1] Jer-Min Jou et al. “Adaptive Network-on-a-Chip 
Architecture System Design”, the 46th IEEE International 
Midwest Symposium on Circuits and Systems, 2003. 
 
[2] Hangsheng Wang et al. ”Power-driven Design of 
Router Microarchitectures in On-chip Networks”, 
IEEE/ACM on Microarchitecture, 2003. 
 
[3] William J. Dally, ”Virtual Channel Flow Control”, 
IEEE Transactions on  Parallel and Distributed Systems, 
vol. 3, no. 2, pp.194-205, March, 1992. 
 
[4] Li-Shiuan Peh et al. ”A delay model and speculative 
architecture for pipelined routers”, International 
Symposium on High-Performance Computer Architecture, 
January, 2001. 
 
[5] Shih-Hsun Hsu,et al. “New Routing Algorithms and 
Router Architecture Design for NoC”, the 15th VLSI 
Design/CAD Symposium, 2004. 
 
[6] Kangmin Lee, Se-Joong Lee, and Hoi-Jun Yoo, “A 
Distributed Crossbar Switch Scheduler for On-Chip 
Networks”, CICC 2003. 
 6
Communications Architecture. Proceedings of the IEEE International Conference on Parallel 
Architectures and Compilation Techniques , Philadelphia, PA. October 2000. 
[21]Derek Taylor, TJ Giuli, Paul Lassa, Tom Fountain. On-Chip Interconnection Network Topologies. 
http://cva.Stanford.edu/ee482b_spr99/docs/research/onchip.pdf 
[22] H. Zhang, et al. “A 1-V hererogeneous reconfigurable DSP IC for wireless baseband digital signal 
processing,” IEEE J. Solid State Circuits, vol. 35, Nov. 2000, pp. 1697-1704. 
[23]Andrew A. Chien, “A Cost and Speed Model for k-ary ncube Wormhole Routers”, In Proceedings 
of Hot Interconnects, Palo Alto, August 1993. 
[24]Andrew A. Chien, “A Cost and Speed Model for k-ary ncube Wormhole Routers”, IEEE 
Transactions of Parallel and Distributed Systems, vol. 9, no. 2, February 1998. 
[25]Jose Duato and Pedro Lopez, “Performance Evaluation of Adaptive Routing Algorithms for k-ary 
n-cubes”, In Proceedings of Parallel Computer Routing and Communication Workshop, May 1994. 
[26]D. R. Miller and W. A. Najjar, “Empirical Evaluation of Deterministic and Adaptive Routing with 
Constant-Area Routers”, In Proceedings of International Conference on Parallel Architectures and 
Compilation Techniques, San Francisco, November 1997. 
[27]Li-Shiuan Peh and William J. Dally, A Delay Model and Speculative Architecture for Pipelined 
Routers, In Proceedings of the 7th International Symposium on High-Performance Computer 
Architecture, Jan. 22-24, 2001, Monterrey, Mexico, pp. 255-266. 
[28] D. Filo, D. C. Ku ,C. N. Coelho, and G. D. Micheli. “Interface optimization for concurrent system 
under timing constraints”, IEEE Tr. On VLSI, l(3):268-281 1993. 
[29] R. Passerone, J. A. Rowson, and A. Sangiovanni-Vincentelli. “Automatic synthesis of interface 
between incompatible protocols”, in Proc. of the 35th DAC ,1998. 
[30] S. Narayan and D. D. Gajski. “Synthesis of system-level bus interfaces”, in Proc. of EDAC,1994. 
[31] B. Svantesson, S. Kumar, and A. Hemani. “A methodology and algorithm for efficient interprocess 
communication synthesis from system description in SDL”, in Proc. of VLSI Design conference 
1998. 
[32] J. Smith and G. D. Micheli. “Automated composition of hardware components”, in Proc. of the 35th 
DAC,1998. 
[33] S. Narayan and D. D. Gajski. “Interfacing incompatible protocols using interface process 
generation”, in Proc. of the 32nd DAC, 1995. 
[34] J. D. Kleinsmith and D. D. Gajski. “Communication synthesis for reuse”, technical report ICS 
98-06, University of California, Irvine, February 1998. 
[35] J. M. Daveau, G. F. Marchioro, T. Be-Ismail, and A. A. Jerraya. “Protocol selection and interface 
generation for hw-sw codesign“, IEEE Tr. On VLSI System,5(1):136-144, March 1997. 
[36] P. V. Knudsen and J. Madsen. “Integrating communication protocol selection with partitioning in 
Hardware/Software codesign”, in Proc. of ISSS, 1998. 
[37] M. Smith, Application Specific Integrated Circuits: Chapter 5.4. Altera MAX, Addison-Wesley, 
1997. 
[38] Bill Salefski and Levent Caglar, Re-Configurable Computing in Wireless, Chameleon System, Inc. 
[39] http://www.eettaiwan.com/ART_8800231033_617717,617718.HTM
[40] Faraydon Karim, Anh Nguyen, Sujit Dey, Ramesh Rao. On-chip Communication Architecture for 
OC-768 Network Processors. 
[41] William J. Dally, Brian Towles. Route Packets, Not Wires: On-Chip Interconnection Networks, 
 8
計畫成果自評 
經過一年的研究，我們研讀了上述的參考資料提出了一個適用於NoC平台之可重
置低功率路由器架構，並且發表於二○○六年國際電腦與通訊工程會議
(International Conference on Computer and Communication Engineering, ICCCE＇
06) (論文內容在本報告的第 1 至第 6 頁)。除此之外，本路由器的研究成果深受
肯定，獲二○○六年全國計算機會議的最佳論文獎，以及於VLSI Design/CAD 
Symposium 2006 所發表。我們的路由器架構經由階層化的設計，完成度已經實
現到晶片設計後段流程的佈局。整體來說，我們已達成本計劃這一年的研究進
度。
 10
