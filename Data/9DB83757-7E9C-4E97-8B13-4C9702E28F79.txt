 2
兆級晶片系統前瞻技術研究 
子計畫六：兆級晶片系統實體整合之研究(3/3) 
Physical Integration for Trillion-Transistor-Scale System-on-Chip 
計畫編號：NSC 96-2221-E-002-245 
執行期限：96 年 8 月 1 日至 97 年 7 月 31 日 
計畫主持人：張耀文教授   國立臺灣大學電子工程學研究所 
 
一､中文摘要 
因為奈米積體電路技術的持續進步，設計複雜度也
以一個驚人的速度在成長。一方面來說，包含了數十億
電晶體電路已經開始大量生產、智財模組被廣泛的使
用、以及大量的緩衝器被使用來最佳化電路延遲，這些
現象都加強了對能處理大量模組的工具軟體的需求。另
一方面，高度競爭的積體電路市場需要更快速的設計收
斂與漸進式設計改變，以及更高的矽片面積使用率，所
以快速且有效的設計方法與工具軟體對於大型電路設計
來說是必須的。因此，在此計劃中，我們提出了一個針
對大型混合尺寸積體電路設計的平面規劃與擺置系統來
對電路連線與可繞性作最佳化。這個系統包含了三個部
分：對連線作最佳化的平面規劃、以複數堆疊樹
（multi-packing tree）為基礎的大區塊擺置、以及對可繞
性作最佳化的擺置演算法。實驗結果也顯示了我們所提
出的演算法可以在大型混合尺寸的測試電路中，得到相
當不錯的結果。 
關鍵詞：實體設計、平面規劃、擺置、連線、可繞
性 
 
二､英文摘要(Abstract) 
Design complexities are growing at a breathtaking 
speed with the continued improvement of the nanometer IC 
technologies. On one hand, designs with billion transistors 
are already in production, IP modules are widely reused, and 
a large number of buffer blocks are used for delay 
optimization, which all drive the need of a tool to handle 
large-scale building modules. On the other hand, the highly 
competitive IC market requires faster design convergence, 
faster incremental design turnaround, and better silicon area 
utilization. Efficient and effective design methodology and 
tools capable of placing and optimizing large-scale modules 
are essential for such large designs. Therefore, in this project, 
we propose a large-scale mixed-size floorplanning and 
placement system for interconnect and routability 
optimization. This system consists of three important parts: 
the interconnect-driven multilevel floorplanning, the 
multi-packing tree based macro placement, and the 
routablity-driven placement. Experimental results have 
shown that our proposed methods have promising results on 
the large-scale mixed-size benchmark suites. 
Keywords: Physical Design, Floorplanning, Placement, 
Interconnect, Routability 
 
三､研究方法 
1. Interconnect-Driven Multilevel Floorplanning 
1.1 Background  
As nanometer IC technologies advance, design 
complexity is growing at a dramatic speed. Modern chip 
designs often consist of millions of transistors and designs 
with billions of transistors are already in production. To 
cope with the increasing design complexity, IP modules are 
widely reused for large-scale designs. Therefore, efficient 
and effective design methodology and tools capable of 
placing and optimizing large-scale modules are essential for 
modern chip designs. 
 
1.2. Framework Evaluation  
The floorplanning frameworks are evolving to tackle 
the challenges with constantly increasing design complexity. 
Three major frameworks have been extensively studied in 
the literature: the flat, hierarchical, and multilevel 
frameworks. Many flat algorithms based on various 
floorplan representations have been proposed in the 
literature. However, these algorithms do not scale well as 
the design size increases. To cope with the scalability 
problem, hierarchical approaches are proposed. The 
hierarchical approaches recursively divide a floorplanning 
region into a set of sub-regions and solve those 
sub-problems independently. Adya et al. [5] propose a 
“floorplacement” framework (used in their program Capo 9) 
that combines partitioning and floorplanning techniques to 
handle both floorplanning and placement problems. It first 
partitions a floorplan and then finds legal sub-floorplans. 
Cong et al. [14] present a fast floorplanner called PATOMA 
using look-ahead enabled recursive bipartitioning. It 
partitions a floorplan and uses row-oriented block (ROB) 
packing and zero-dead space (ZDS) floorplanning to find 
legal sub-floorplans. Both the floorplacement and PATOMA 
are based on the hierarchical framework in which the 
floorplanning stage is only used for legalization and overlap 
removal. The top-down hierarchical technique is efficient in 
handling large-scale problems. Nevertheless, a drawback of 
the hierarchical approaches is that they might lack the global 
information for the floorplanning interaction among 
different sub-regions. 
To remedy the deficiency, the multilevel framework is 
proposed to solve the floorplanning problems (e.g., 
MB*-tree [23] and MLGFA [17]) as well as graph/circuit 
partitioning, placement, and routing. All of the existing 
multilevel frameworks adopt a two-stage technique, 
bottom-up coarsening followed by top-down uncoarsening, 
which is known as the “Λ-shaped” framework. (Note that 
this framework is often called the “V-cycle” framework in 
the literature. To differentiate from our new multilevel 
framework presented in this paper, nevertheless, we think it 
is more appropriate to name it the “Λ-shaped” framework as 
it works bottom-up and then top-down.) Lee et al. [23] first 
proposed a Λ-shaped multilevel floorplanning algorithm 
based on the B*-tree representation [10], called MB*-tree. It 
adopts a two-stage technique, clustering followed by 
 4
previously clustered modules and uses simulated annealing 
to refine the solution. Experimental results showed that 
MB*-tree obtains solutions of very small dead space. For 
modern floorplanning, however, the interconnections among 
modules are a very important cost metric for routability and 
performance optimization and thus should be carefully 
considered. Since MB*-tree first works in a bottom-up 
manner by clustering local modules based on area and local 
connectivity, it does not have the view for the global 
configuration at the earlier stages. Therefore, it is very 
likely that MB*-tree can only obtain a sub-optimal solution 
since it may make a wrong choice during the clustering 
stage, and it may become very hard to further refine the 
floorplan solution during the declustering stage. 
Figure 1(b) illustrates our V-shaped interconnect-driven 
multilevel floorplanning framework (IMF). Unlike 
MB*-tree that adopts a Λ-shaped framework, our IMF uses 
the V-shaped of top-down partitioning followed by 
bottom-up merging. Partitioning determines the global 
locations of modules while merging legalizes and refines the 
floorplan. At the initial step, all the modules are located at 
the center of the chip. Then, the chip is partitioned into two 
sub-regions, and modules are moved from the chip center to 
the centers of new sub-regions. The partitioning continues 
until the number of modules in a region is smaller than a 
threshold. Then, we obtain a “partitioned floorplan,” and the 
partitioning stage finishes. At the merging stage, 
fixed-outline floorplanning is applied to every region. We 
use simulated annealing to find a feasible floorplan to fit all 
modules into the region and minimize the wirelength. Then, 
two neighboring regions are merged into one larger region, 
and fixed-outline floorplanning is used again to refine the 
floorplan. Merging and refining are performed recursively 
until all regions are merged into one single top-level 
floorplan. Finally, the final floorplan result is obtained. Note 
that the IMF framework is independent of the floorplan 
representation, so every existing floorplan representation 
can be used. 
Table 1 lists the characteristics of our IMF multilevel 
framework, the MB*-tree multilevel framework [23], the 
Capo floorplacement framework [5], and the PATOMA 
framework [14]. Our IMF framework and the MB*-tree 
framework are based on the multilevel framework while the 
Capo framework and the PATOMA framework are based on 
the hierarchical framework. Although Capo and PATOMA 
use partitioning, unlike IMF, they do not have the 
refinement stage to further improve their results. 
 
1.4. Techniques and Approaches 
The IMF algorithm consists of the following steps: (1) 
the partitioning stage and (2) the merging stage. 
 
1.4.1.  The Partitioning Stage 
At the initial level, the locations of all modules are set to 
the center of the chip region. To prevent from generating 
sub-regions of large aspect ratios, we choose the longer side 
to divide the region into two sub-regions. After the shapes 
of two sub-regions are determined, we move the modules to 
the two centers of the two sub-regions to minimize the 
half-perimeter wirelength (HPWL). 
The module-location determination problem can be 
formulated as a hypergraph partitioning problem. We first 
derive an exact net-weight modeling to map the HPWL cost 
exactly to the min-cut cost. With the exact modeling, in 
other words, minimizing HPWL is equivalent to finding the 
min-cut cost. Therefore, the given hypergraph is partitioned 
using a min-cut bipartitioner to obtain the minimum HPWL. 
The new locations of the modules are thus determined by 
the partitioner, and each sub-partition corresponds to a 
sub-region. 
 
1.4.2. Exact Net-Weight Modeling 
Since the net weight in the traditional terminal 
propagation for the min-cut based placement is a constant 
value, the weight with the change in HPWL cannot be 
exactly modelled, whether a net is cut or not. The 
underlying idea for our exact net-weight modeling (terminal 
propagation) is that we want to map the min-cut cost exactly 
to the HPWL change, which is similar to the ``bounding-box 
aware terminal propagation (BBTP)" proposed by 
Selvakkumaran and Karypis in [31]. They discussed the 
BBTP in detail under seven cases in [31]. However, they 
can obtain exact modeling only for two-terminal nets, i.e., 
they can only obtain suboptimal results for multi-terminal 
nets. Unlike the previous work that exhaustively enumerates 
of potential cases, we derive a unified model to assign the 
net weights to map the HPWL value exactly. Our unified 
HPWL model can even apply to the partitioning associated 
with two non-adjacent regions, for which the method 
presented in [31] would need to enumerate tens of cases for 
the HPWL modeling and thus is obviously much more 
complex and harder for implementation. 
We give our unified HPWL modeling as follows. A 
circuit is modelled as a hypergraph. Each node in the 
hypergraph corresponds to a module inside the target region, 
with the node weight being set to the area of the 
corresponding module. Each hyperedge denotes a two- or 
multi-terminal net in the circuit, with the hyperedge weight 
being set to the value of the HPWL contribution if the 
hyperedge is cut.  
Let w1 be the HPWL when all modules are at the side 
closer to the span of the terminals, w2 be the HPWL when 
all modules are at the opposite side, and w12 be the HPWL 
Figure 2: An example of determine a net weight. (a), (b), 
and (c) are three possible partitioning results. (d), (e), and (f) 
are corresponding partitioning hypergraphs. 
 6
the macro orientations can be optimized and the spacing 
between macros for routing can be reserved, which are 
important for practical applications. 
 
2.3. Macro Placement 
Our design strategy is to pack macros inside the given 
region and to reserve the center region for standard-cell 
placement and routing. Since macros are usually large and 
there are routing blockages above macros in real-world 
applications, the macros tend to block the routes if they are 
placed in the chip center. Further, by minimizing the macro 
displacement, we can keep the desired wirelength implicitly 
since the given global placement is optimized for 
wirelength. 
The traditional packing floorplanning techniques cannot 
apply to the macro placement problem directly since they 
usually pack all macros to one corner. To overcome this 
problem, we propose a new multi-packing tree (MP-tree) 
floorplan representation to place macros along the given 
region boundary. We shall first consider the packing-tree 
floorplan representation. 
 
2.3.1.  Packing-Tree Floorplan Representation 
A packing tree is a binary tree for modeling non-slicing 
or slicing floorplans. Each node in the packing tree 
corresponds to a macro. There are four types of packing for 
a packing tree. BL-, TL-, TR-, and BR-packing packs the 
blocks to the bottom-left, top-left, topright, and bottom-right 
corners, respectively. 
Figure 4 shows a packing tree and its corresponding four 
packing types. Let (xcorner, ycorner) be the coordinate of a 
corner (there are four corners in a rectangular region), (xi, yi) 
be the bottom-left coordinate of the block bi, and wi (hi) be 
the width (height) of the block bi. The coordinate of the root 
of a packing tree is at 
• (xcorner, ycorner) for BL-packing, 
• (xcorner, ycorner − hroot) for TL-packing, 
• (xcorner − wroot, ycorner − hroot) for TR-packing, and 
• (xcorner − wroot, ycorner) for BR-packing. 
If node nj is the right child of ni, the block bj is 
• the lowest adjacent block on the right with xj = xi + wi 
for BL-packing, 
• the highest adjacent block on the right with xj = xi + 
wi for TL-packing, 
• the highest adjacent block on the left with xj = xi − wj 
for TR-packing, and 
• the lowest adjacent block on the left with xj = xi − wj 
for BRpacking. 
If node nj is the left child of ni, the block bj is 
• the first block above bi with xj = xi for BL-packing, 
• the first block below bi with xj = xi for TL-packing, 
• the first block below bi with xj = xi + wi − wj for 
TR-packing, and 
• the first block above bi with xj = xi + wi − wj for 
BR-packing. 
Therefore, given a packing tree, the x-coordinates of all 
blocks can be determined by traversing the tree once in 
linear time. Further, a y-coordinate can be computed using 
the contour data structure in amortized constant time, 
similar to the method used in [10]. So the complexity of 
transforming a packing-tree to the corresponding placement 
is amortized linear time. Note that B*-tree floorplan 
representation [10] is a BL-type packing tree. 
 
 
Figure 4: A packing tree with its four types of packing. 
 
A packing tree handles only one direction of packing, 
and thus it is not suitable for our macro placement since all 
macros would be packed toward a chip corner. In the 
following section, we extend the packing tree to handle 
macro placement with placement constraints. 
 
2.3.2.  MP-tree Floorplan Representation 
Since a packing tree always packs macros to a corner, we 
could apply the traditional hierarchical method by 
subdividing the chip into four regions, and create four 
packing trees to handle different regions. However, this 
approach has some limitations. First, the macros in a region 
must be placed inside the given region, which is over 
constrained because there is no real boundary between the 
regions. Further, assigning the regions for macros greatly 
affects the resulting placement because a macro cannot 
change its region once its region is assigned. As a result, we 
may not obtain a desirable placement because there is no 
interaction among different regions. 
To implement the global optimization idea, we resort to 
the multipacking tree (MP-tree) to handle the global 
interaction among different regions. An MP-tree combines 
several packing trees for different corners. Figure 5 shows 
an example general MP-tree. There are k branch nodes in an 
MP-tree to integrate k + 1 packing subtrees. We use a 
right-skewed branch to integrate the packing subtrees for the 
purpose of easier implementation. By doing so, the packing 
order of the subtrees can be determined by the level of the 
parent node of the packing subtrees. With the depth-first 
search (DFS) order of the tree traversal for packing, the 
smaller the level, the earlier the packing subtree packs 
blocks. If the parent of two packing subtrees is the same, the 
left packing subtree will be handled first. The general 
MP-tree can be used to model the placement in any 
rectilinear floorplan region with each packing subtree 
packing to one convex corner. 
 
 
Figure 5: A general MP-tree. 
 
 8
can assign the initial packing subtree to which a node 
belongs according to the nearest corner for the macro. 
Otherwise, we randomly set the initial packing subtree to 
which a node belongs. Each packing subtree is then 
initialized as a complete binary tree. 
 
 
Figure 8: Our MP-tree macro placement flow. 
 
Simulated annealing is used to find the desired macro 
placement. We perturb an MP-tree to get another MP-tree 
by the aforementioned operations. After perturbing, we fix 
the tree structure to satisfy the given macro placement 
constraints, pack the MP-tree, evaluate the macro placement, 
and decide whether we should accept the new solution or 
not according to the difference of the macro placement 
quality and the current temperature of simulated annealing. 
Then, the MP-tree is perturbed again. The simulated 
annealing continues until the solution is good enough or no 
better solution can be found, and all positions of 
blocks/clusters are determined. Then, the positions of 
macros inside a cluster can be computed according to the 
matrix dimension of the cluster. 
Finally, we adjust the spacing between macros. If the 
demand of the routing resource between two macros is 
higher than the original spacing, we add more space 
between the two macros; otherwise, we can reduce the 
original spacing to make the macro placement area smaller. 
We also orientate macros by horizontal/vertical flipping to 
make the pins closer to the chip center. Then, we fix all 
macros and report the final macro placement solution. 
 
2.4. Experimental Results 
To show the effectiveness and robustness of MP-tree, we 
conducted four experiments on an Opteron 2.6GHz machine. 
We used three state-of-the-art publicly available academic 
mixed-size placers, NTUplace3 [13], Capo 10.2 [29], and 
mPL6 [9]. Note that NTUplace3 achieves the best published 
results in most public benchmarks [13], Capo is the best 
min-cut based placer and mPL6 obtains the best quality 
considering wirelength and density at the 2006 ISPD 
Placement Contest [2]; both NTUplace3 and mPL6 are 
analytical placers. Table 2 shows the statistics of the 
ISPD’06 benchmarks. 
 
 
Table 2: The statistics of the ISPD’06 benchmarks. 
2.4.1.  Comparison between MP-tree and Packing 
trees 
This experiment studies the difference between the 
MP-tree and the independent four packing trees. The 
method of using four packing trees is a simple extension to 
macro placement for a rectangular chip. We divided a chip 
into four sub-regions and created four different 
BL-/BR-/TL-/TR-packing trees in the corresponding 
sub-regions. Notice that although this extension for packing 
trees still can handle macro placement in a chip, it has many 
limitations; for example, it is much harder to deal with the 
region constraints that cross different regions. 
We used the ISPD’06 benchmarks with the 90% chip 
utilization rate, and the results are shown in Table 3. From 
the results, we observed that the MP-tree is more robust in 
finding legal placements for all benchmarks while the 
method with four packing trees cannot. For those 
benchmarks with legal placements, the MP-tree can further 
reduce the average HPWL by 8% under comparable running 
times, which shows the effectiveness of the MP-tree. 
 
 
Table 3: The resulting HPWL’s of using the MP-tree and 
four packing trees for macro placement (utilization rate = 
90%). NR: No legal results can be obtained. 
 
2.4.2.  Integration with Other Placers 
In addition to NTUplace3, we also integrated our 
MP-tree with Capo 10.2 and mPL6, which are based on the 
min-cut and analytical placement techniques, respectively. 
Table 4 shows the results without and with the MP-tree 
based on the ISPD’06 benchmarks. Again, we used the 90% 
chip utilization rate for all circuits. Capo is robust in finding 
legal placements since macro positions are guaranteed to be 
overlap-free during the global placement. However, the 
quality is not good. Integrated with the MP-tree, Capo 10.2 
reduced the average HPWL by 12% than that without the 
MP-tree. We tried several times, but mPL6 alone could not 
obtain legal solutions for seven circuits. With the MP-tree, 
however, mPL6 can obtain legal solutions for all circuits. 
This shows that the MP-tree is robust in finding legal 
solutions. 
 
 
Table 4: The resulting HPWL’s and CPU times for different 
placers without (“w/o”) and with MP-trees (“MPT”) 
(utilization rate = 90%). NR: No legal results can be 
obtained. 
 
 
 
 10
where tutil is the target utilization rate for each congestion 
bin, Wg (Hg) is the width (height) of the congestion bin g, 
and Bg is the base congestion that reduces the routing 
resources in g due to macro porosity. 
 
3.3. Routability-Driven Objective 
In order to optimize routability during placement, we 
formulate the routability-driven placement problem as a 
constrained minimization problem as follows. 
  (3) 
where W(x, y) is the wirelength function, Db(x, y) ≤ Mb is 
the potential constraint that tries to remove overlaps among 
blocks, and Cg(x, y) ≤ Rg is the congestion constraint that 
tries to increase the routability of the placement. 
With the congestion approximation model introduced in 
Section 3.2, we can express the function Cg(x, y) as 
( , ) ( , ) ( , )g s x ys SC k O g s O g s∈= ∑x y , where S is the set of all 
netboxes. We use the bell-shaped potential function [9] to 
smooth Cg(x, y). By applying the technique, the non-smooth 
function can be replaced by a smooth one, l ( , )gC =x y  
( , ) ( , )s s x ys S c k O g s O g s∈∑ , where cs is a normalization factor 
so that the total congestion of a netbox remains unchanged, 
and ox(g, s) and oy(g, s) are the smoothed functions of Ox(g, 
s) and Oy(g, s), respectively. 
The quadratic penalty method is used to solve Equation 
(3), implying that we solve a sequence of unconstrained 
minimization problems of the form 
       (4) 
 
3.4. Net Overlapping Removal 
The underlying meaning of the congestion constraint in 
Equation (3) is that we try to re-distribute all the netboxes 
such that the routing demand within each congestion bin is 
smaller than the available routing resources. For example, 
suppose that there exists a congested region which contains 
many netboxes, and there exists another sparse region 
around the congested one. The objective function will try to 
move the netboxes from the congested region to the sparse 
one. After such movements, the congestion can be alleviated 
since the routing resources in the sparse region are utilized 
more effectively. This is the manner of net overlapping 
removal for routability optimization during placement. 
Under the analytical placement framework, however, the 
netboxes cannot be moved directly. Only new block 
positions will be updated by the CG method to optimize the 
corresponding objective function. Therefore, we need to 
develop a method to transform the movement of netboxes 
into the movement of blocks. For net n with netbox s, we 
assume that there are u blocks v1, v2,..., vu connecting to n. 
Let φ(x) be the movement function of x, where x can be 
either a net or a block. For net n, the movement function φ(n) 
can be obtained by applying the conjugate gradient (CG) 
method on the congestion part of the objective function. 
Then we can define the transform function F(φ(s)) as 
follows: 
             (5) 
That is, when we need to move a netbox, we will move 
all blocks connected to the net at the same time by the same 
direction and the same distance. Figure 11 illustrates the 
transformation of the netbox movement to the block one. 
Figure 11(a) gives an example net connecting five blocks, 
and Figure 11(b) shows its corresponding netbox. Figure 
11(c) shows the vector that defines the movement of the 
netbox, obtained by the CG method. According to Equation 
(5), we then apply the same vector on all connected blocks 
(Figure 11(d)). By such a transformation method, we can 
now work on blocks and achieve the goal of re-distributing 
netboxes to optimize the placement routability under the 
analytical placement framework. 
 
 
Figure 11: (a) Five blocks connected by a hypernet. (b) The 
netbox of (a). (c) Gradient direction of the netbox. (d) 
Gradient direction of all blocks. 
 
3.5. Macro Porosity Handling 
Macro porosity [3] is the phenomenon that a macro 
occupies some of the routing resources above it. When we 
want to preserve routing resources for specific macros, or 
there are blockages in the metal layers right above macros, 
such a phenomenon occurs. Macro porosity is defined as the 
ratio of the available routing resources above a macro block, 
and it pre-defines the base congestions in Equation (2). We 
shall extend the concept introduced in Section 1 to define 
the base congestion. Let M be the set of all macros. For a 
congestion bin g, we define the resulting congestion 
contributed by the macro m as Bg = kmOx(g,m)Oy(g,m), 
where Ox(g,m)/Oy(g,m) is the amount of the overlap 
between g and m along the x/y direction, and km is a 
constant measuring the consumed resources above the 
macro m. km can be computed by 
           (6) 
where Cv(m)/Ch(m) is the total vertical/horizontal routing 
capacities in the region covered by the macro m, and 
R’v(m)/R’h(m) is the reduced vertical/horizontal routing 
capacities in the region covered by the macro m, which is 
caused by the macro porosity of m. 
Since the base congestion Bg is not smooth, we apply the 
Gaussian equation to smooth Bg before applying the CG 
method. The two-dimensional Gaussian has the form 
            (7) 
where σ is the standard deviation of the distribution. 
Applying convolution to the Gaussian function G with the 
base congestion B, we can obtain the smoothed base 
potential l( , ) ( , ) ( , )B x y G x y B x y= ∗ . 
 
3.6. Integration into the Analytical Placement 
Framework 
For the analytical placement framework the multilevel 
framework is usually applied to improve the scalability. The 
hierarchy of clusters is built by the clustering algorithm in 
the coarsening stage. Then the placement problem is solved 
from the coarsest level to the finest level. The placement for 
the current level provides the initial placement for the next 
level. When blocks are clustered together, the 
interconnections among blocks within the same cluster are 
 12
LZ-shaped global routing, our algorithm is much more 
efficient in finding placement solutions without any routing 
overflows (about a 6.28X speedup over ROOSTER on 
average). On the other hand, even if the NTHU router can 
find a legal global routing solution very easily in shorter 
time on the placement solutions of ROOSTER than ours 
(excluding “bigblue1” too), ROOSTER incurs a large 
wirelength penalty due to its tendency to spread the modules 
too much for routability optimization, which results in a 
very sparse net distribution. Moreover, though 
mPL-R+WSA spent about 4% less runtime to finish the 
routability-driven placement, its routing times for the 
placement solutions are much worse than ours due to its 
routing overflows. The experimental results have revealed 
the fact that our net overlapping removal technique is 
superior to the traditional whitespace allocation for 
routability optimization. 
 
四､成果 (Publications) 
I. ACM/IEEE Journal Papers: 
1. T.-C. Chen and Y.-W. Chang, “Modern Floorplanning Based on 
B*-trees and Fast Simulated Annealing,” IEEE Trans. 
Computer-Aided Design, Vol. 26, No. 4, April 2006. 
2. T.-C. Chen and Y.-W. Chang, "Multilevel full-chip gridless 
routing with applications to optical proximity correction," in 
IEEE Trans. Computer-Aided Design, Vol. 26, No. 6, pp. 
1041--1053, June 2007. 
3. T.-C. Chen and Y.-W. Chang, "Routability-driven and optical 
proximity correction-aware multilevel full-chip gridless 
routing," in IEEE Trans. Computer-Aided Design, Vol. 26, No. 
6, June 2007. 
4. H.-C. Lee, Y.-W. Chang, J.-M. Hsu, and H. Yang, “MB*-tree: A 
multilevel floorplanner for large-scale building-module design,” 
Vol. 26, No. 8, pp. 1430--1444, August 2007. 
5. K. S.-M. Li, C.-L. Lee, Y.-W. Chang, C.-C. Su, and J. E Chen, 
``Multilevel full-chip routing with testability and yield 
enhancement", in IEEE Trans. Computer-Aided Design, Vol. 26, 
No. 9, pp. 1625--1636, September 2007. 
6. T.-C. Chen, Y.-W. Chang, and S.-C. Lin, "A new multilevel 
framework for large-scale interconnect-driven floorplanning," in 
IEEE Trans. Computer-Aided Design, Vol. 27, No. 2, pp. 
286--294, February 2008. 
7. H.-Y. Chen, M.-F. Chiang, Y.-W. Chang, L. Chen, and B. Han, 
"Full-chip gridless routing considering double-via insertion," in 
IEEE Trans. Computer-Aided Design, Vol. 27, No. 5, pp. 
844--857, May 2008. 
8. T.-C. Chen, Z.-W. Jiang, T.-C. Hsu, H.-C. Chen, and Y.-W. 
Chang, "NTUplace3: An analytical placer for large-scale 
mixed-size designs with preplaced blocks and density 
constraints," in IEEE Trans. Computer-Aided Design, Vol. 27, 
No. 7, July 2008. 
9. T.-C. Chen, P.-H. Yuh, Y.-W. Chang, F.-J. Huang, and D. Liu, 
"MP-trees: A packing-based macro placement algorithm for 
modern mixed-size designs," accepted and to appear, IEEE 
Trans. Computer-Aided Design, 2008. 
10. I.-J.-Lin and Y.-W. Chang, "Statistical circuit optimization by 
simultaneous gate and wire sizing," in revision, IEEE Trans. 
Computer-Aided Design, 2008. 
11. H.-Y. Chen, S.-J. Chou, S.-L. Wang, and Y.-W. Chang, "Novel 
wire density driven full-chip routing for CMP variation control," 
in revision, IEEE Trans. Computer-Aided Design. 
12. T.-C. Chen, M. Cho, D. Z. Pan, and Y.-W. Chang, 
"Metal-density driven placement for CMP variation and 
routability," in revision, IEEE Trans. Computer-Aided Design. 
13. H.-Y. Liu, W.-P. Lee, and Y.-W. Chang, "An efficient voltage 
partitioning algorithm for power optimization using multiple 
supply voltages," in revision, IEEE Trans. Computer-Aided 
Design. 
 
II. ACM/IEEE Conference Papers 
1. T.-C. Chen, Y.-W. Chang, and C.-C. Lin, “IMF: 
Interconnect-driven multilevel floorplanning for large-scale 
building-module designs,” Proc. of the IEEE/ACM International 
Conference on Computer-Aided Design, pp. 159–164, San Jose, 
Nov. 2005. 
2. T.-C. Chen and Y.-W. Chang, “A new multilevel framework for 
large-scale interconnect-driven floorplanning,” The 16th VLSI 
Design/CAD Symposium, Hua-Lien, Taiwan, Aug. 2005. 
3. T.-C. Chen, Z.-W. Jiang, T.-C. Hsu, H.-C. Chen, and Y.-W. 
Chang, “NTUplace2: a hybrid placer using partitioning and 
analytical techniques,” in Proceedings of ACM/IEEE 
International Symposium on Physical Design, pp. 215--217, San 
Jose, CA, April 2006. (Won the 3rd place in the ACM ISPD 
Placement Contest.) 
4. T.-C. Chen, Z.-W. Jiang, T.-C. Hsu, H.-C. Chen, and Y.-W. 
Chang, "A high quality analytical placer considering preplaced 
blocks and density constraint," in Proceedings of IEEE/ACM 
International Conference on Computer-Aided Design 
(ICCAD-2006), pp. 187--192, San Jose, Nov. 2006. (Received 
the highest score in the partitioning / floorplanning / 
placement track) 
5. W.-P. Lee, H.-Y. Liu, and Y.-W. Chang, "Voltage island aware 
floorplanning for power and timing optimization," in 
Proceedings of IEEE/ACM International Conference on 
Computer-Aided Design (ICCAD-2006), pp. 389--394, San Jose, 
Nov. 2006. 
6. I.-J. Lin, T.-Y. Lin, and Y.-W. Chang, ``Statistical circuit 
optimization considering device and interconnect process 
variations," to appear in Proceedings of ACM International 
Workshop on System Level Interconnect Prediction 
(SLIP-2007), Austin, TX, March 2007 
7. T.-C. Chen, Y.-L. Chuang, and Y.-W. Chang, "X-architecture 
placement based on effective wire models," in Proceedings of 
ACM International Symposium on Physical Design 
(ISPD-2007), pp. 87--94, Austin, TX, March 2007. (best paper 
nominee; received the highest score) 
8. H.-Y. Liu, W.-P. Lee, and Y.-W. Chang, "A provably good 
approximation algorithm for power optimization using multiple 
supply voltages," in Proceedings of ACM/IEEE Design 
Automation Conference (DAC-2007), San Diego, CA, June 
2007. 
9. T.-C. Chen, P.-H. Yuh, Y.-W. Chang, F.-J. Liu, and D. Liu, " 
MP-trees: a packing-based macro placement algorithm for 
mixed-size designs," in Proceedings of ACM/IEEE Design 
Automation Conference (DAC-2007), San Diego, CA, June 
Table 6: Comparison with ROOSTER [30] and mPL-R+WSA [24]. Note that the average wirelength ratio of ROOSTER 
is computed excluding “bigblue1” since it generates routing overflows. 
 14
algorithm. In Proc. of Design Automation Conference, pages 
59-62, San Diego, CA, 2007. 
[29] J. Roy, D. Papa, A. Ng, and I. Markov. Satisfying whitespace 
requirements in top-down placement. In Proc. of ACM 
International Symposium on Physical Design, pages 206–208, 
San Jose, CA, Apr. 2006. 
[30] J. A. Roy, J. F. Lu, and I. L. Markov. Seeing the forest and the 
trees: Steiner wirelength optimization in placement. IEEE 
Trans. of Computer-Aided Design, 26(4):632–644, 2007. 
[31] N. Selvakkumaran and G. Karypis, “Theto - a fast and 
high-quality partitioning driven placement tool,” Technical 
Report 04-40, Dept of Computer Science and Engineering, 
University of Minnesota, October 2004. 
[32] P. Spindler and F. M. Johannes. Fast and robust quadratic 
placement combined with an exact linear net model. In Proc. 
of IEEE/ACM International Conference on Computer-Aided 
Design, pages 179 – 186, San Jose, CA, Nov. 2006. 
[33] P. Spindler and F. M. Johannes. Fast and accurate routing 
demand estimation for efficient routability-driven placement. 
In Proc. of Design, Automation and Test in Europe, pages 
1226 - 1231, Nice Acropolis, France, 2007. 
[34] T. Taghavi, X. Yang, B.-K. Choi, M. Wang, and M. 
Sarrafzadeh. Dragon2006: Blockage-aware congestion 
controlling mixed-size placer. In Proc. of ACM International 
Symposium on Physical Design, pages 209–211, San Jose, CA, 
Apr. 2006. 
[35] N. Viswanathan and C. C.-N. Chu. Fastplace: Efficient 
analytical placement using cell shifting, iterative local 
refinement and a hybrid net model. In Proc. of ACM 
International Symposium on Physical Design, pages 26–33, 
Apr. 2004. 
[36] E. Wein and J. Benkoski. Hard macros will revolutionize SoC 
design. EETimes Online, Aug. 2004. 
http://www.eetimes.com/showArticle.jhtml?articleID=268070
55. 
[37] G.-M. Wu, Y.-C. Chang, and Y.-W. Chang. Rectilinear block 
placement using B*-trees. ACM Transactions on Design 
Automation of Electronics Systems, 8(2):188–202, 2003. 
[38] X. Yang, B.-K. Choi, and M. Sarrafzadeh. Routability-driven 
white space allocation for fixed-die standard-cell placement. 
In Proc. of International Symposium on Physical Design, 
pages 42 – 47, San Diego, CA, 2002. 
[39] X. Yang, R. Kastner, and M. Sarrafzadeh. Congestion 
estimation during top-down placement. IEEE Trans. on 
Computer-Aided Design, 21(1):72–80, 2002. 
consider area, delay, power, noise, and manufacturability for the interconnect 
optimization in systems-on-a-chip design.  
三､建議 
I would like to suggest that NSC simplify the procedures for application for attending 
conferences abroad. Too much paper work or red-tape not only burdens the staff in 
NSC, but also affects the productivity and efficiency of a researcher. In my opinion, 
for example, writing a report like this one is absolutely unnecessary. 
A red-tape like this will just hurt the competitiveness of our country 
and benefits to nobody. I wish the requirement for writing such a 
report could be abolished in the near future. 
 
四､攜回資料名稱及內容 
1. Proceedings of the 2008 ACM International Symposium on Physical Design. 
2. Call-for-papers for the 2009 ACM/IEEE Design Automation and Test in Europe. 
