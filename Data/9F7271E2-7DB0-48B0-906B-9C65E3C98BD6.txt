2 
解決工程改變中所產生之輸入扭轉違規與輸出負載違規 
“A Metal-Only-ECO Solver for Input-Slew and Output-Loading Violations” 
計畫編號：NSC98-2221-E-9-183 
執行期間：98 年 8月 1 日 至 99 年 7 月 31 日 
主持人：趙家佐 交通大學電子工程系助理教授 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
4 
handle obstacles and constraints, but on accurately estimating 
the input slew and output loading of the buffers newly inserted 
with the adopted back-end tool. This framework can be applied 
based on any commercial back-end tool as long as the design 
database can be queried through an open interface, such as 
Milkyway for Synopsys, OpenAccess for Cadence, or Volcano 
for Magma.  
The proposed framework consists two buffer-insertion 
schemes applied sequentially. The first scheme utilizes the 
minimum-chain algorithm to minimize the number of spare 
gates in use, followed by the second scheme to solve timing 
violations created by the first scheme, if there is any. The 
framework has been silicon-validated through industrial designs 
with more than 1-million instances. The experimental results 
show that, compared to an EDA vendor’s solution, the proposed 
framework can solve more slew and loading violations with less 
spare gates and less CPU runtime. This framework is currently 
applied in industry. 
 
2. PRELIMINARIES 
2.1. Current Metal-Only ECO Flow 
Most current APR tools apply the following two steps to 
realize metal-only ECO: netlist difference followed by spare 
cell mapping. In the netlist-difference step, tools first identify 
the new added cells by comparing the new netlist to be ECO 
with the original netlist. The added cells are assumed to be 
placed in an ideal area, which may not be valid. In the 
spare-gate-mapping step, the tools map the new added cells to 
physical spare cells. However, when the ECO size is large, those 
spare cells may not always be found in the ideal area and tools 
need to search for the nearby gates to substitute. Thus, 
violations of slew, loading, and setup-time constraints may 
occur here. 
To eliminate these violations, APR tools use a similar 
approach, inserting buffers in the netlist and mapping buffers 
into spare gates. However, the spare buffers may not be found in 
the desired area. Hence the violations remain unsolved or even 
become worse since the wire loading of the new-added 
interconnect may exceed the constraint as well. This unexpected 
violation can be attributed to the insufficient number of 
available spare buffers and the lack of physical information on 
the spare buffers during the mapping step. 
 
2.2. Transfer Slew Constraint into Loading Constraint 
The output slew of a gate is determined by its input slew and 
its output loading. An excessive output loading at the current 
gate will result in an excessive input slew at its fanout gates. 
Therefore, to control the output loading of its fanin gates can 
avoid the input slew violation of the current gate. In other words, 
we can transfer the problem of solving input-slew violations for 
the current pin into the problem of solving output-loading 
violation for its fanin gates.  
We first define the output available load of a gate g, OALg, 
as the maximum output loading of g which can generate a output 
slew smaller than the slew constraint assuming that the input 
slew of g is equal to the slew constraint. Through table look-up 
of the timing library and interpolation, this OALg can be 
obtained after a binary search of the output slews corresponding 
to different output loadings. Figure 1 illustrates the detailed 
steps of obtaining this OALg. In step 1, input slew of gate g is set 
to the maximum allowed slew. In step 2, the output slew 
associated with a presumed OALg is obtained by table look-up. 
In step3, we check if the output slew is the same as the slew 
constraint. If yes, then stop searching. Otherwise, if the output 
slew is larger than the slew constraint, we presume a lower 
output loading and repeat step 2. If the output slew is less than 
the slew constraint, we presume a higher output loading and 
repeat step 2. 
In most cases, the obtained OALg associated with the slew 
constraint is smaller than the loading constraint of gate g, 
implying that satisfying the slew constraint can also satisfy the 
loading constraint. However, for some gates with weak driving 
capability, the OALg associated with the slew constraint may 
exceed the loading constraint. In this case, we set OALg to the 
loading constraint.  
 
Fig. 1. Flow and an example of converting a slew constraint 
to a loading constraint 
 
3. Overview of Proposed Metal-Only ECO Slew/Loading 
Solver  
3.1. Overall Flow of MOESS 
After the metal-only ECO is finished by using netlist 
difference and spare cell mapping, tools will report the pins 
violating slew and loading constraints. From this violation 
report, MOESS will automatically generate the corresponding 
command script of a commercial APR tool to solve the 
violations. Figure 2 shows the overall flow of MOESS, which is 
designed to solve slew, loading, and timing violations after 
metal-only ECO.  
 
Fig. 2. overall flow of MOESS 
The first stage of MOESS is to increase the candidate pool 
of spare buffers by collecting usable spare cells. Section 1.2 
describes the details. The second stage of MOESS is to apply 
ESB (Eco Save Buffer) buffer-insertion scheme to solve the 
slew and capacitance violations using minimum buffers. A 
minimum-chain algorithm is used in the ESB scheme to guide 
the order inserted buffers. After the slew violations are solved, 
most timing violations can be solved as well. Then a timing 
analysis tool will report the remaining critical paths violating 
6 
in Figure 4(c), one buffer is enough to drive both of t1 and t2. 
 
Fig. 4. Example of inserted buffers for different pin 
grouping. 
Figure 5 shows the flow of the ESB scheme. In step A, a 
minimum-chain algorithm is applied to obtain an order of 
terminal pins for the violation net, named MC order (detailed in 
Section 2.2). This MC order can guide the grouping of nearby 
terminal pins in step B (detailed in Section 2.2). Step C 
calculates the ideal location of the inserted buffer based on the 
grouped terminal pins (detailed in Section 2.3). In step D, we 
attempt to map a real spare buffer closest to the ideal location 
while satisfying the slew-transferred loading constraint (detailed 
in Section 2.4). After a real spare buffer is successfully inserted, 
we update the violation net and recalculate the MC order of its 
terminal pins in step E. We repeat step B to step E until the 
output loading of the violation gate meets the slew-transferred 
loading constraint. An overall algorithm is provided in Section 
2.5. We also discuss how to relax the searching criteria when no 
suitable buffer c an be found to solve the violation in Section 
2.6. Section 2.7 describes how to handle hard macros in the 
ESB scheme. 
 
Fig. 5. Flow of ESB buffer-insertion scheme. 
The ECT buffer-insertion scheme is applied after ESB 
scheme. The objective of ECT scheme is to eliminate the timing 
violations resulted from using ESB scheme. The flow of ECT is 
similar to the ESB scheme except the grouping method in step B. 
The details are described in Section 2.8. 
 
4.1. Obtain Minimum-Chain Order of Terminal Pins 
As the example in Figure 4 shows, we hope to group the 
terminal pins of the violation net not only in the same 
geometrical neighborhood but also in the same direction toward 
the violation gate. Otherwise the wire loading to drive the 
grouped pins may be too large. In order to obtain such grouping, 
we modified a minimum chain algorithm in [16] to get the MC 
order of terminal pins. The concept of this minimum-chain 
algorithm is to assign the closest pin as the next ordered pin 
each time, starting from the violation gate g (the order of g is 0). 
By connecting the terminal pins one by one with such order, 
their total wire length can approach to minimal. This property 
also implies that the terminal pins with adjacent MC order are 
more likely in the same direction toward the violation gates as 
well. Figure 6 lists this minimum-chain algorithm. 
 
Fig. 6. Minimum chain algorithm 
 
4.2. Group Terminal Pins Using MC Order 
In step B, terminal pins of the violation net are first grouped 
assuming a type-t buffer b is used. We start from the buffer type 
with the highest driving capability to the one with the lowest. 
Then, we follow the MC order to serially add the terminal pins 
into the group p_list. The objective here is to obtain a group of 
pins p_list such that the output loading of b for driving all 
grouped pins in p list is close to but not exceed the OALb. We 
estimate this output loading of b for driving p_list (denoted as 
GOLb(p_list)) by the following equation: 
GOLb(p_list) =∑i=1 to n (InCpi +WL(pi , pi-1))   (4) 
where n is the size of p_list, pi is the ith ordered pin in p list, 
InCpi is the input capacitance of pi, WL(pi, pi-1) is defined in 
Equation 3, and WL(p1, p0) is equal to 0. 
In this estimation, we assume that the terminal pins are 
piecewise connected one by one. However, the real routing of a 
net generated by commercial tools is like a Steiner tree, where 
multiple terminal pins may share one common wire. Therefore, 
this estimation is actually an upper bound, implying that the 
inserted buffer by ESB scheme can safely meet the loading 
constraint. 
 
4.3. Calculate Ideal Buffer Location 
We follows the following two rules when deciding the ideal 
location of the type-t buffer to drive all terminal pins in p_list:  
   R1  Use all buffer’s driving capability under the given 
constraint. 
R2   Locate the inserted buffer as close to the violation output 
as possible. 
To achieve R1, we first calculate the output remained load 
of the buffer b, denoted as ORLb, using the equation: 
ORLb = OALb - GOLb(p_list)       (5) 
The amount of ORLb determines the affordable wire length 
connecting from inserted buffer b to the last-ordered pin pn in p 
list. The higher ORLb, the longer wire length can be allowed 
between b and pn. Thus, the ideal location of the inserted buffer 
b must satisfy the following equation: 
|Xb - Xpn| • Uh(b, pn) + |Yb - Ypn| • Uv(b, pn) ≦ ORLb  (6) 
where Xa and Ya represents the X-axis and Y-axis 
coordinates of pin (or gate) a, respectively. 
To make the buffer b closer to the source pin g, we limit the 
ideal location of b on the straight line between g and pn. Then 
we adding another equation: 
    (Yb - Ypn) / (Xb - Xpn) = (Ypn - Yg)=(Xpn - Xg)           (7) 
Last, we can obtain the ideal location of b by solving both 
Equations 6 and 7, assuming the equality holds in Equations 6. 
 
8 
ESB scheme focuses on using a buffer to support as many 
terminal pins as possible. Although the slew or loading violation 
can be solved by ESB scheme, the delay of some paths may 
exceed the timing constraint due to the extra gate delay of 
inserted buffers. This case usually occurs when a new-added 
function is connected to a timing-critical net. After studying 
those timing-violation cases, we found that most violations 
result from the sharing of a common buffer between a 
timing-critical path and long new-added wires, such as the case 
in Figure 12(a). The labeled number for each pin represents its 
Manhattan distance to the source pin of the violation net. Those 
new-added wires can be designed as multi-cycle paths to meet 
the timing constraint but the original paths cannot. 
To avoid such cases, ECT buffer-insertion scheme will 
separate the grouping of long-wire terminal pins from the others. 
So the terminal pins on critical paths need not to share a 
common buffer with other long-wire terminal pins, such as the 
case in Figure 12(b). Therefore, ECT scheme basically follows 
the same flow of ESB scheme but change the step of 
terminal-pin grouping (step B). In ECT scheme, a terminal pin 
whose Manhattan distance to the source pin exceeds a threshold 
is defined as the long-wire terminal pins. Then, for only those 
long-wire terminal pins, we determine the pin grouping using 
the same procedure described in Section 2.2 and insert buffers 
accordingly. After that, the same procedure is applied to the 
other terminal pins again. As a result, the number of inserted 
buffers may be increased while the propagation delay for critical 
paths can be reduced.  
 
Fig. 12. Buffer insertion in a critical path by (a) ESB 
scheme 
 
The threshold of the Manhattan distance to the source pin is 
actually a parameter in ECT scheme. ECT scheme will try 
different thresholds within an empirical range to check if the 
timing violation can be solved. If not, ECT scheme will report 
the case with the best negative slack. 
5. Experimental result  
Our platform is Linux, kernel 2.6.9-11.elsmp, running on 
AMD Opteron processor 250 with 16GB memory. The ECO 
flow, including netlist difference, spare gate mapping, and 
routing, is performed based on a commercial APR platform [3]. 
After the metal-only ECO is performed, we first obtain the 
violation report on slew, loading, and timing constraints. Then 
MOESS will generate corresponding scripts based on this 
violation report to insert and map spare buffers onto violation 
nets. We compare the results of MOESS with a EDA vendor’s 
buffer-insertion solution for metal-only ECO [3]. In vendor’s 
solution, we use the command "run gate buffer wire -slew/cap 
-eco" to insert buffers for each violation net.  
The benchmarks used in this experiment are all industrial 
projects. The spare-cell count in each project is 3% to 5% of the 
total cell count. The spare cells are evenly placed within the 
chip by using an in-house tool before the base-layer tape-out. 
The slew constraint in use is a pre-defined constant associated 
with the process technology and the cell library. The loading 
constraint in use is defined as a ratio to the value of the 
library-suggested constraint. In our experiments, the slew and 
loading constraints are 2.2ns and the ratio of 1 for the .18um 
process; The slew and loading constraints are 1.0ns and the ratio 
of 1.2 for the .13um process.  
In Table 12, we first report the comparison results on 7 
industrial projects. Column 1 lists the project name and its ECO 
version in parentheses. Columns 2 to 5 list the instance count, 
the adopted process technology, the spare-cell count, and the 
size of ECO in instances for each project, respectively. Columns 
6 and 7 list the numbers of reported slew violations and loading 
violations, respectively, before any buffer-insertion scheme is 
applied. Column 8-10, 12-14, and 16-19 list the worst input 
slew, the worse output-loading ratio to the library-suggested 
constraint, and the worst slack, respectively, reported (1) before 
any buffer-insertion scheme is applied (denoted by ori.), (2) 
after a EDA vendor’s solution is applied (denoted by [3]), and 
(3) after MOESS is applied (denoted by MOESS). Column 11, 
15, and 19 also list the improvement of MOESS over [3] 
(denoted by imp.) in the worst input slew, the worse 
output-loading ratio, and the worst slack, respectively. The 
number followed by a "*" means that the corresponding value 
violates the constraint. In Column 20-22 and 23-25, we report 
the number of spare buffers in use and the CPU runtime for 
both [3] and MOESS, and the corresponding improvement or 
speedup of MOESS over [3].  
As the results show, MOESS can solve all the slew, loading, 
and setup-time violations for these seven projects while the 
vendor’s solution violates the slew constraint in 3 projects, the 
loading constraint in 2 projects, and the setup time constraint in 
4 projects. The average improvements of MOESS on the worst 
slew, worst loading, and worst slack are 24%, 21%, and 57%. 
Also, the number of used spare buffers by MOESS is smaller 
than that by [3] for each project, which saves more ECO 
TABLE I 
Comparison between MOESS and [3] on solving slew, loading, and timing violations for multiple metal-only ECO projects. 
無衍生研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
