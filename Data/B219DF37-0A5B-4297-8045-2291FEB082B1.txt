1報告內容：
一、前言：
In a distributed computation, if local checkpoints are taken independently, there is a risk
that no consistent global checkpoint can ever be formed from them. This is the well-known
problem of domino effect [1], in which cascading rollbacks will occur during the process of
finding the recovery line. Many protocols have been proposed to selectively take local
checkpoints to eliminate the possibility of domino effect [2]. One way to avoid the domino effect
is to prevent any checkpoint from becoming a useless checkpoint [3], i.e. a checkpoint that cannot
belong to any consistent global checkpoint. Coordinated checkpointing protocols [4, 5] achieve
this goal by synchronizing the checkpointing actions of all processes through explicit control
messages. In contrast, communication-induced checkpointing protocols [6] typically prevent
domino effect by piggybacking control information on application messages. Particularly, besides
taking basic checkpoints independently, each process can also be asked by the protocol to take
extra forced checkpoints according to a certain checkpoint-inducing condition in order to keep
any existing checkpoint from becoming useless. Such conditions are based on the piggybacked
information on a message as well as local control variables in a process.
Communication-induced checkpointing (CIC) protocols can be classified into two distinct
categories: index-based and model-based [2]. An index-based protocol associates local
checkpoints with sequence numbers similar to Lamport's logical clocks [7] in a way that
checkpoints with an equal sequence number are assured to be consistent; while a model-based
protocol is generally more sophisticated and tracks the checkpoint and communication pattern to
prevent the formation of certain patterns during the execution. Index-based protocols usually take
fewer forced checkpoints and piggyback less control information on messages than model-based
ones [8]. Among existing CIC protocols, those proposed in [3, 9, 10, 11, 12] belong to the
index-based category; whereas those introduced in [13, 14] belong to the model-based category.
二、研究目的：
In this project, we will design a new and efficient index-based CIC protocol, called NMMP.
Exploiting more information available from the causal past, a notable protocol, HMNR2,
proposed in [3] adopts some improvements to accomplish a better performance. Especially, a
process collects information about sequence numbers of other processes through control
information piggybacked on messages so as to make the checkpointing decision more precisely.
However, we find that in practice, such information has often been transmitted by messages for a
long time before a process intends to refer to it so that it could be too obsolete to be useful.
Therefore, we guess that this enhancement used by HMNR2 rarely takes effect in typical
computational environments. It may not be worthwhile to piggyback more control information on
messages just for implementing such an enhancement. By discarding this enhancement, we may
obtain a new protocol with less control information on a message. We think that such a protocol
can be almost as effective as HMNR2. Our protocol NMMP is introduced based on this idea. We
will conduct some simulation experiments to show that the difference between numbers of forced
checkpoints taken by the previous two protocols is very small, by using a C-based discrete-event
3takeni is an n-size Boolean array, where takeni[k] = True in the sense that there is a causal path
from the last checkpoint of Pk known by Pi to the next checkpoint of Pi and this causal path
includes a checkpoint. When Pi sends a message m, Pi also appends to m the current values of
ckpti and takeni. Here, m.ckpt and m.taken denote these two values, respectively. So the first term
of this part means that there is a causal path from a checkpoint of Pi to the succeeding one; while
the other term indicates this causal path includes a checkpoint.
Therefore, HMNR2 needs to piggyback n+1 integers and 2n Boolean flags on each
message. In addition, it was demonstrated in [18] that HMNR2 outperforms protocol HMNR1
proposed in [3] and HMNR1 outperforms protocol BCS introduced in [9]. However, both
HMNR1 and BCS only piggyback one integer on a message.
四、研究方法：
In practice, it is usually a long way for information about the sequence number of a process
to arrive at another process that will refer to it. Thus when the former's sequence number carried
on a message is referred by the latter, it is often too small to take effect such that the value of each
element in array m.greater used by protocol HMNR2 is generally True. So it may not be
worthwhile to piggyback such control information on application messages.
If we directly remove the term m.greater[k] from HMNR2's condition, we can obtain a
weaker condition as follows:
(k: sent_toi[k]m.sn > sni)(m.ckpt[i] = ckpti[i]m.taken[i]).
We conjecture that the previous condition has the following property.
Theorem 1: A ZM-cycle encountered by a CIC protocol based on the previous condition implies
the predicate (k: sent_toi[k]m.sn > sni).
We will try to demonstrate such a theorem. Consequently, the latter part of the foregoing
condition can be absorbed by the former part according to the absorption law, and then the
protocol based on such a condition is exactly protocol HMNR1.
In this project, we will try to propose a new CIC protocol based on the classical indexing
strategy. Our protocol is also designed according to the foregoing observation on array m.greater.
But its checkpoint-inducing condition is stronger than HMNR1's. Hence, such a protocol
outperforms HMNR1 because it has been proved in [18] that any protocol based on a stronger
condition than HMNR1 does not force more checkpoints than HMNR1. Moreover, we consider
that its control information carried on a message can be of constant size. First, it is important
trying to demonstrate the following property for HMNR2's condition.
Theorem 2: A ZM-cycle encountered by protocol HMNR2 implies the predicate (k: sent_toi[k]
m.sn > sni).
If we can achieve this goal, then according to the previous theorem and the absorption law, we
can rewrite HMNR2's condition as below:
k: sent_toi[k]m.sn > sni(m.greater[k](m.ckpt[i] = ckpti[i]m.taken[i]))
From the idempotent law and distributive law, the condition above is equivalent to:
k: sent_toi[k]m.sn > sni((jkm.greater[k])(j = km.greater[k])(jk
m.ckpt[i] = ckpti[i]m.taken[i])(j = km.ckpt[i] = ckpti[i]m.taken[i])),
where message m is assumed to be sent by Pj. The term “j = k m.greater[k]” is always false 
5behave like clients and servers. This environment is particularly interesting since its linear array
structure is a tree communication network. We will try to show that the simulation results of the
client-server environment are consistent with Theorem 3. Namely, NMMP exactly has the same
behavior as HMNR2 in a tree communication network.
五、結果與討論：
In this project, we have successfully proposed an efficient index-based CIC protocol. The
remarkable protocol HMNR2 proposed in the literature has been known to be the best
index-based CIC protocol that one can achieve since the optimal protocol needs to acquire the
future information. We discovered that the enhancement adopted by such a protocol rarely takes
effect in practice. By discarding this enhancement, we obtained a new protocol, called NMMP.
Simulation results showed that our protocol is almost as efficient as HMNR2 in some typical
computational environments. Especially, we have also demonstrated that the two protocols have
the same behavior over a tree communication network. Such a result is beneficial to parallel
applications since many of them run on top of a tree structure network. Surprisingly, NMMP
only has to piggyback on each message control information of constant size, regardless of the
number of processes. Hence, such a protocol is a good candidate for distributed computations in
an environment with low network bandwidth. Furthermore, upon message communication, using
NMMP can save much more time for converting data items to their associated standard network
representations. This means that our new protocol also goes well with embedded systems, which
have low processing capability.
參考文獻：
[1] B. Randel, “System structure for software fault-tolerant,” IEEE Trans. Software Eng.,
vol. 1, no. 2, pp. 220-232, June 1975.
[2] E. N. Elnozahy, D. B. Johnson, and Y. M. Wang, “A survey of rollback-recovery protocols in
message-passing systems,” ACM Computing Surveys, vol. 34, issue 3, pp. 375-408, Sep. 2002.
[3] A. Mostefaoui, J. M. Helary, R. H. B. Netzer, and M. Raynal, “Communication-based
prevention of useless checkpoints in distributed computations,” Distrib. Computing, vol. 13, issue
1, pp. 29-43, Jan. 2000.
[4] K. M. Chandy and L. Lamport, “Distributed snapshots: determining global states of 
distributed systems,” ACM Trans. Comput. Syst., vol. 3, no. 1, pp. 63-75, Feb. 1985.
[5] R. Koo and S. Toueg, “Checkpointing and rolback-recovery for distributed systems,” IEEE
Trans. Software Eng., vol. 13, no. 1, pp. 23-31, Jan. 1987.
[6] B. Janssens and W. K. Fuchs, “Experimental evaluation of multiprocessor cache-based error
recovery,” Proc. Int'l Conf. Parallel Processing, no. 1, pp. 505-508, 1991.
[7]L. Lamport, “Time, clocks and the ordering of events in a distributed system,” Commun. ACM,
vol. 21, no. 7, pp. 558-565, July 1978.
[8] L. Alvisi, E. Elnozahy, S. Rao, S. A. Husain, and A. De Mel, “An analysis of 
communication-induced checkpointing,” Fault-Tolerant Comput. Symp., pp. 242-249, 1999.
[9] D. Briatico, A. Ciufoleti, and L. Simoncini, “A distributed domino-effect free recovery
algorithm,” Proc. 4th IEEE Symp. on Reliability in Distributed Software and Database Syst., pp.
