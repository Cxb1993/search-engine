 
 
	

uID !"#$%&'()*+,	-./01
23456789:;<=>?2@ABCDEFG
EHIJKLMN-OP(Ubiquitous Computing);<QR+S#N-O
P'(T=U1VWJXY"#$Z['(+ 
 
\]^_`HJade&abc5d&a 012
e8=UJadefAndroidg)8%&hHi j2kl:
hHimnopqrstu v!=UJade&abcGwx
(task agents)yFG(device agents)z>)*+wx
klwx{I(workflow):2&a)*|}~z>
k+FG78s234BCFGZ
[uFG!T=U(web services)K678FG23
4?6+ 
 
72^_	e92^_x
K+=U2hHi=U$
BC 34¡v¢[2&aF
GhHi Androidg)a£y¤¥¦hHiBC
+ 
 
§uID bc$N-OP$¨$+
 Y04 
Service) R(Kjh²¡'L¢£F 
"ú¢£ÇMN#ËÌ%s[17]OPNêhk"²³´ú(Info 
Agent)QÇ²³RST%U¦kVñ³RWXY[18]PZN[T¦\
ú(Gateway Agent)j]H¦^ :ú(Act Agent)ìí_`ú
ijpabcFdeú[¢£Nfg!"_hijST_¢£k

Tlmn>o-pqrs[4]OPNêhtÈúu]+ú
(Interface Agent)8hi<ú(Helper Agent)vwú(Scheduler Agent)SGHv
wúxyijzÑ={0²útzH|}~u úxy~

>
[aaJ¦²ú¢£ü_[Ovwú>bFOP
I¢£NùV\ú(Gateway Agent)8³´ú(Interface Agent):ú
(Act Agent)Vk~iÇT¦ùìí\8]+³´zú: ³RmRê
F 
!"/IJ&'nM'N.¡'¢£QRQ=aJ
à-%sá>$¤ùVIº¸Þ#
[Woa'
¸Þµä%s&'"ú¢£kWeb¸ÞeT²=Fpk
I-.FT'"ú¢£(Multi-Agent System)kWeb¸Þ(Web Service)YZ[
}h²`KHJ/¢£(h² ~im&k_-mnWeb¸Þ
¡'L¢£F¢£ U~BÇ²i¡bhR¸Þmh¢aU~£²

¤¥;jm&Web¸Þs¦[16]B'N§¨[©Äª«'Ç²Web
¸ÞF 
 
 
H¬ç­®I-.NWêh²¥¦"ú§¨¸ÞÚ¯°(
R±-²¡'}³´"#²k³´C}FI-.(¯-. 2)&'
å-.ö¯-.I¯-.{¯-.Êµ¶ 2.1p·F 
 
 Y04 
	
 
I-.FTB"úWeb¸Þ'È¡'L¢£zH G
]H"ú¢£
ª«NJ¦úúöìím 'N§¨¸.
³´ ;ÑI¢£8¦<Bkk`s×R¹º¦'Np_Web¸
ÞFI-.p}¢£TB²úpzúij»[¼½/¾¿ÀGoichi I 
TABASHIêhvwú%b)½úijÁÂ=01/YkÃ¼Bú
Q~¾¿ÀJiang Tianêh®¯/C¢£Oú~Á hÄY
OP¢£FÅÆJuan A. FraileêhAMADE¢£)þÇ/:)ÈÉÊË/
úYÁTVñ¢£ÇF½5ÌÍV.G KoutkiasÝ§.¢£
kÎÏÈÐùÈäÑF-.NÒÓÔú(kWeb¸Þ&'
§¨¸.³R&ú²Õ_¦³RÓÖ¸³RA×FkØÙ¢£æç8(8±
-KjÚÛF 
 
3.1 ¢£æç 
I-.öKj¢£¥¦T'"ú¢£Web¸ÞKjh²¡'L¢£
(>I¢£ÉTu 
• úkJFÁijùVF 
• B ¸Þ[Ìª«Ü{"ÝõÍÞßF 
 
P(±-Nà<=T~i'jeH"ú¢£RÚTát=
FkØæçI¢£p¦úkâ¦u 
(1) ]+ú(Interface Agent)uH²¦<X_]+úâ
¦Tãäª«(Situation)åæ¼M\úçè³´ Ä³´kéã
¦<ê³´Tàëì¦^ úF 
(2) \ú(Gateway Agent)uí ]+úîBïÞåðãú
¼ÄúBpa³´ñã\ú\úpÌ
 Y04 
Agent)F 
• ¸A : ;Ñweb services}·¦< Çû'
A(G8
ô¼)kweb services~×(êë ¦+Húo
mF 
 
3.2.1"ú¢£ 
I-.Bú~0?uÇåúåú¶ 3.2FÇåú
NÒ_]+ú OT]+úÒTzH¦<:"ú¢£!"#]â
Hú$]+úpaÈÔÆU~¢Õ_PÂ=> B¦
<paÖkaÓ%Ä\úözH|}¼M´&ñ'pkÇå
úU~Ò(}]+úFûk¢£)?$`"²
'kCö
 º[Çåú*NVÛú·ú(Connect Agent)B
"²
¦<Ç]]^]+úQ·F 
 
 3.2	
 
 
 ]+ú!+ª«Ö(Situation Module)FT]+ú ÷¦<
 Y04 
CU'N
@}å
ASêë-õÍã Information AAû
N² SensorõÍBC¸DE½5¦ Sensor{
ARmÕ)Web 
Service:ëF 
 Information ANFG Sensor 1 A8Sensor 2 B…¼¼³´
¤O-

³´_-

¤¶N Information A
¤Tû Sensor 1N AÄHòó
[ÛØ²
¤uSensor 2 B¸ Sensor 3 CûÄHòó[ÛØ²
¤u
Sensor 4  BûÄHòó[ÛØ²
¤uSensor 5  AûÄHòó[·
Information Aòó~up!ÓãúQ*zúFû
¤NOÕ_Ä
Hòó>Õ_6ÄØ²
¤[ÒT Information A· Sensor 1Ä 5õÍFe>
59úp|ÄÒ_ Information A²
J|² Sensorm&õÍk¿Þß
ÈF 
 
3.2.3¢£
¤ 
GH¡'L¢£àFIJ:<KT'N§¨pk§¨Hh ¤³R
òBû_LªMJFBí÷Cö'Yû'sêºN$
Gü¤×kJ|'NTõL8§¨TõEOF 
 Y04 
 \ú ÷úÈékLõUïTõ$íCö\
ûaVG]+úí÷'kCöQ*zúF 
 W²¯RÚu' êXô'NYTõ_Êa{;ÑGÓã]+
úê|YZ[Ö³´[]+úÄî¯P'ªÅ|õ_
Informationk¦k;Ñ\ú:ú¹ÄWeb ServiceNZ[
ª«³´(³´\]@
×A:Y^\^j
×A)*__tõÍûÕ_z
Hòó~u[ÒJ|ÄõÍª/)àéÓñG·F 
 
3.2.3.2§¨þº 
 
¶ 3.4u§¨þº
¤¶ 
 
 Y04 
¸ÞÚ¯§¨'f0i¤%ss¦FGHú!"TÓ£f0pÕ_
>HpRqråf0_âs¦t@FOPý±-²¢£/
f0i¤s¦'Ó£f0â[8¸ÞÚ¯(k"ú§¨BµpRf0%s
s¦O²=u1vwFI-.k8C}¯±-²'ú
§¨k¾¿¸Þ(ö³´}°"#OPkxGP¢£pêë"#
*âÊ³´C}KÞ³RT~yF 
 
 
[1] M. Niederer and A. Schatten, “Agent-Based Meeting Scheduling Support using Mobile Clients”, 
Applications of Digital Information and Web Technologies, 2009. ICADIWT '09. Second International 
Conference, pp. 719-724, 2009 
[2] J. Aguero, M. Rebollo, C. Carrascosa and V. Julián, “Towards on embedded agent model for Android mobi
les”, The Fifth Annual International Conference on Mobile and Ubiquitous Systems: Computing, Networki
ng and Services (Mobiquitous 2008) Vol. CD Press, pp. 14. 2008  
[3] W. Wallach and C. Allen, “Android Ethics: Bottom-up and Top-down Approaches for Modeling Human 
Moral Faculties”, COGSCI 2005 workshop, Stresa, IItaly, pp. 149-159, July 25-26, 2005. 
[4] G. ITABASHI, M. Chiba, K. TAKAHASHI and Y. KATO, “A Support System for Home Care Service 
Based on Multi-agent System”, ICICS 2005. 
[5] J. Fraile, J. Bajo and J. Corchado, “Amade: Developing a multi-agent architecture for home care 
environments”, 7th Ibero-American Workshop in Multi-Agent Systems,  2008. 
[6] T. Jiang and T. Huaglory, “A Multi-agent Approach to the Design of an E-medicine System”, MATES 
2003, LNAI 2831, Springer-Verlag Berlin Heidelberg, pp. 85–94, 2003. 
[7] G.K. Vassilis, C. Ioanna, G.D. George and M.Nicos, "A Multi-Agent System Assisting Home Care 
Education and Surveillance Services for Chronic Patients", MEDINFO, 2004. 
[8] J.A. Fraile, J. Bajo, B. Pérez and E. Sanz, "HoCa Home Care Multi-Agent Architecture. In: International 
Symposium on Distributed Computing and Artificial Intelligence", DCAI, pp. 52–61, October, 2008. 
[9] A. Rammal and S. Trouilhet, “Keeping Elderly People at Home: A Multi-agent  Classification of 
Monitoring Data”, ICOST 2008, LNCS 5120, pp. 145–152, 2008. 
[10] V. Koutkias, I. Chouvarda, and N. Maglaveras, “Multi-agent system architecture for heart failure 
management in a home care environment”, IEEE Computers in Cardiology, 30(3), pp. 383–386, 2003. 
[11] G.B. Laleci, A. Dogac, M. Olduz, I. Tasyurt, M. Yuksel and A. Okcan, “SAPHIRE: A Multi-Agent System 
for Remote Healthcare Monitoring through Computerized Clinical Guidelines”, In R. Annicchiarico, U. 
Cortés, C. Urdiales, (Eds.) Agent Technology and e-Health. Whitestein Series in Software Agent 
Technologies and Autonomic Computing, pp. 25-44, Babel, Switzerland: Birkhäuser, Verlag, 2008. 
[12] M. Boulos, A. Rocha, A. Martins, M. Vicente, A. Bolz, R. Feld, I. Tchoudovski, M. Braecklein, J. Nelson, 
G. Laighin, C. Sdogati, F. Cesaroni, M. Antomarini, A. Jobes, and M. Kinirons. “Caalyx: a new generation 
of location-based services in healthcare”, International Journal of Health Geographics, December, 2007. 
[13] Intelligent Healthcare Monitoring based on Semantic Interoperability Platform (SAPHIRE), 
www.srdc.metu.edu.tr/webpage/projects/saphire 
[14] Jaime Martín, Ralf Seepold, Natividad Martínez Madrid, Juan Antonio Álvarez,  Alejandro 
Fernández-Montes and Juan Antonio Ortega, “A Home E-Health System for Dependent People Based on 
OSGI”, Intelligent Technical Systems, Lecture Notes in Electrical Engineering 38, Springer 
Science+Business Media B.V. 2009 
[15] S. Wang, W. Shen and Q. Hao, “An agent-based web service workflow model for inter-enterprise 
collaboration”, Expert Systems with Applications, 31(4), pp. 787–799, 2006. 
[16] D. Greenwood, M. Calisti, “Engineering Web Service – Agent Integration”, IEEE  Systems, Cybernetics 
and Man Conference, the Hague, Netherlands, pp. 10-13, October, 2004. 
[17] V. Koutkias, I. Chouvarda, and N. Maglaveras, “Agent-based monitoring and alert generation for a home 
表 Y04 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                         99 年 4 月 12 日 
報告人姓名  
范姜永益 
 
服務機構 
及職稱 
輔仁大學 資訊工程學系 
助理教授 
     時間 
會議 
     地點 
自民國 99年 3 月 21 日 至 
民國 99 年 3 月 27 日 
日本福岡縣 
本會核定 
補助文號 
國科會專題研究計畫 
NSC 98-2220-E-030-003 
會議 
名稱 
 (中文) 2010年國際計算科學暨應用研討會 
 (英文) The 2010 International Conference on Computational Science and Its 
Applications (ICCSA 2010) 
發表 
論文 
題目 
(中文) 應用於行動嵌入式軟體塑模  
(英文) An Aspect-Oriented Approach for Mobile Embedded Software Modeling 
附
件
三 
表 Y04 
二、與會心得 
 
本次會議，除了發表論文以外，大會邀請的 Keynote Speech 的確提供了很多未來
資訊應用系統領域的研究與發展之展望。本人亦參加了其中多場分組論文發表，從中學
習不少新的技術與知識，並與來自世界各國之學者互相交流彼此研究之成果與心得，此
乃此次參與國際學術與技術發展研討會之主要收穫之一。尤其是對第一天的專題演講題
目特別此感興趣，如何透過 Web技術展現虛擬與真實的互動，以及未來的發展。由於本
人近年對於行動手機上面實現擴增實境的應用有興趣，因此，該專題演講對於我未來的
研究具有相當程度的啟發。 
此外，本人此次除了在會議所在地福岡參訪外，同時也利用時間去北九州其他的地
點旅遊參訪，包含熊本、大分等地區。對於日本的各項服務與旅遊導覽資訊印象深刻，
因此回國後也將所見所聞與本人所指導的研究生討論交流。這次的出席，除了發表論文
以外，亦可與同領域獲不同領域的研究學者互相討論，在討論並接觸許多相關領域的研
究成果後，讓人高興的是，當在與會的過程時，自己竟會產很多有趣的想法，我想，這
應該算另外一種新的體驗吧。這次的 ICCSA 2010 之行，我相信能對未來的學術研究產
生更多良性衝擊、並能提升學術品質。 
 
 
三、考察參觀活動與建議 
 
此次會議在日本福岡九州產業大學舉行，本人利用會後時間，參觀九州產業大學，
熊本大學、以及一些旅遊景點，對於其校園以及旅遊服務業之傳統歷史留下深刻印象。
本次會議上，本人與一些研究學者、工業界研發人員以及部分舊識交換了一些擴增實境
系統的創新應用資訊，將對於本人未來在研究、教學及指導學生從事研究有相當大的幫
助。因此，在此特別感謝國科會之補助出席此次會議，也希望未來本人的持續研究能夠
對學術界及國內產業界有所貢獻。並且希望未來依舊有機會獲得此項補助。以下是一些
建議: 
1. 政府相關單位應該多鼓勵並補助國內學者參加大型學術研討會。 
2. 鼓勵國內各公私立大學爭取各學術研究學會來台舉辦國際學術研討會，提高台
灣的國際能見度，並能增加台灣觀光事業。 
3. 提升台灣國際語言如英語等外語能力。 
 
四、攜回資料名稱及內容 
 
本次 ICCSA2010 研討會共攜回資料如下： 
1. 研討會論文集光碟--Proceedings of the 2010 International Conference on 
Computational Science and Its Applications (ICCSA 2010) 紙本與 CD 。 
2. 研討會紙本手冊(內含研討會簡介以及議程表) 
3. 主題演講投影片--Slides of keynote speech。  
 
五、其他 
無。 
 
 
 
表 Y04 
complexity of embedded software [9][27]. There are more and more 
products such as intelligent mobile phone, car equipment or computer 
peripherals, which have evolved from single-chip microprocessor to 
complicated processor containing various peripherals and a small 
operating system [23]. Besides, embedded software developers must 
pay attention to not only performance and size but also extensibility 
and modifiability. In order to decrease the complexity and increase the 
quality and reusability of embedded software, therefore, how to provide 
a systematic approach for embedded software development becomes 
one of the most challenging fields in software engineering [15] [22]. 
On the hardware, resources of embedded system are limited, and need 
to be supported by various devices such as camera, RFID and other 
sensor equipments emphasized in higher performance and reliability 
[11]. In virtue of the rapidly growing of hardware and complexity of 
software, however, more and more researchers have to put much 
emphasis on early stages of development, and to that end, the software 
development and modeling become more and more important for the 
development of embedded software [11][17][25]. 
Dynamic context is one of the characteristics of mobile embedded 
systems pointed out from [3][11]. The context here means the status of 
the environment in which the system is operated. Since the location 
moving on the mobile embedded device is occurrence frequently which 
causes the status of the environment to change corresponding to the 
movement, therefore, the behavior of the embedded system is also 
provided the reactions responding to the environment converted. That is 
what we say the behavior of the mobile embedded software is dynamic 
context dependence. For example, the lamp senses the dark and then 
turns on the light or the handheld device launches the guiding system 
after the holder enters a museum [2], etc. Kishi and Noda [11] pointed 
out how to provide a systematic approach to modeling the mobile 
embedded software, especially on the crosscutting between the context, 
sensor and reactive behavior, has become an emerging issue. 
Numerous approaches [6][7][25][26] had been proposed the 
aspect-oriented technique for modeling real-time or embedded system, 
but few of them tackle the crosscutting concerns in the context 
dependency and lack of providing a systematic process to integrated 
aspects in the software development processes. In this paper, we 
attempt to propose an aspect-oriented modeling process and notations 
extended from UML for mobile embedded software modeling to deal 
with the context dependence between sensors and their corresponding 
reactive functionalities. For the aspect oriented modeling process, the 
aspects modeling processes are provided to separate the concerns of the 
表 Y04 
concerns), and tangled (multiple concerns are mixed in one model), 
together with elements of other concerns [4][20]. 
2.2   Aspect-oriented for Crosscutting Concerns 
In AOSD, a new unit for modularizing mechanism called aspects is 
used to deal with crosscutting concerns problem [14][21][27]. One of 
the main elements of an aspect-oriented programming is the joinpoint 
model. The join point describes the “hooks” where enhancements may 
be added to determine the structure of crosscutting concerns. The 
patterns that specify the set of join points intercepted for a given 
application are called as pointcut. The implementation of a crosscutting 
concern in an aspect module is named advice. The composition process 
that injects aspects (or advices) into the join points specified at the 
point cuts is known as weaving process. The aspect system can 
implement the weaving at compile, load or execution time 
[1][20][24][25]. 
Since scattering and tangling problems normally appear throughout the 
development process, AOSD promotes the separation of crosscutting 
concerns at every stage of the software lifecycle. Moreover, the explicit 
representation of crosscutting concerns from the early stages of 
software development would help us to reason about the 
modularization of an application design [19]. 
3   Aspect-oriented Process and Modeling Notations for Mobile 
Embedded Software 
A number of concerns in mobile embedded software design have the 
crosscutting relationships impact on the mobile embedded software 
model. These concerns inherently affect several core modules and their 
internal modeling elements, like action and context. Examples of 
crosscutting concerns in mobile embedded software design encompass 
both internal and systematic properties, such as timing, context, sensor, 
reaction, liveness, performance and other embedded properties (e.g., 
power consumption). Without an explicit modeling of such mobile 
embedded properties, designers cannot properly communicate with and 
reason about them and their broadly-scoped effects. In this section, we 
present a meta-modeling framework to support the modular 
representation of crosscutting concerns in embedded mobile software. 
The framework is centered on the notion of aspects to describe these 
concerns including the structural and behavioral aspect modeling 
表 Y04 
 
Fig. 1. Structural meta-modeling framework 
3.2 Structural Meta-Modeling Framework 
Fig. 1 shows the structural meta-modeling framework with aspects for 
embedded software and embedded mobile software. An element is a 
constituent of a model and it generates the NamedElement that may 
have a name. RedefinableElement is redefined in the context of a 
generation and NameSpace Feature declares a behavioral or structural 
characteristic of instances of classifiers. Classifier describes a set of 
instances that have features in common. BehaviorFeature and 
StructureFeature specify an aspect of the behavior of its instances and a 
typed feature of a classifier, respectively. Operation that is contained by 
Class is inherited from BehaviorFeature [18]. 
Aspect defined in this framework is a kind of Classifier, and it is 
denote the crosscutting concerns in the system. Aspect contains Advice 
that is a kind of BehaviorFeature and implements the behavior of aspect. 
Pointcut is a kind of StructureFeature and records the point of weaving. 
Advice could have three choices to decide the strategy, that are After, 
Before and Around, respectively. Moreover, Pointcut is composed by 
Joinpoint that actually contained by Operation. Weaving element 
inherits the BehaviorFeature, and it is an abstract metaclass that weaves 
the Advice into Operation. So, there are the navigable relationship 
between Weaving, Advice and Operation. 
 
表 Y04 
to present the behavior between aspect and core system and it has three 
kinds of weaving strategy named as Before, After and Around. An 
aspect may have many advices, but an advice would correspond to one 
of strategies that consist of after, before and around. Weaving and 
AspectLifeline are composed in an Interaction. 
 
 
Fig. 3. State Machine meta-modeling framework 
3.4 State Machine Meta-Modeling Framework 
Fig. 3 shows the state machine meta-modeling framework that can be 
used to express the behavior of part of a system with aspects for mobile 
embedded software. 
The model element StateMachine encompasses different types of transient vertices 
and Region. State means a situation during which some invariant condition holds. 
Transition means a directed relationship between a source vertex and a target vertex. 
FinalState is a special kind of state signifying that the enclosing region is completed, 
and Vertex that composes Region is an abstraction of a nod. A connection point 
reference represents a usage of an entry/exit point. 
AspectStateMachine including the Advice and Pointcut is composed by 
Weaving. The Before, After and Around could notify the timing to 
execute the Advice, i.e. the timing that executes in the (base) 
StateMachine to transform to Advice in the AspectStateMachine. The 
WeavingState is a kind of State to show the state in the (base) 
StateMachine that means execute flow has transformed to 
表 Y04 
activity is the starting point of the software development and can be 
realized by the core functions and other aspects.  
 
Core requirements and crosscutting requirements identification – 
in this phase, the core requirements are modeled by using the use case 
diagram to describe the system’s functional requirements as well as the 
crosscutting requirements are identified to provide the basis for aspects 
modeling.  
 
Use case modeling – after the functional and crosscutting requirements 
are identified, the use case model served as the core component of 
software requirements specification are specified. Detailed scenarios of 
each use case are designated and crosscutting relationship between use 
cases are pointed out.   
 
Core concerns modeling – in this activity, the core functional concerns 
are identified served as the basis for core modeling. The class diagram 
is used to model the main concepts and corresponding relationships of 
the system. 
 
Behavioral and state machine modeling to core concerns – in these 
tow activities, sequence diagrams and state machine diagrams are used 
to delineate the system’s dynamic interaction and state transition. These 
models could describe the system’s behavioral perspectives.  
 
Aspects identification of embedded software – in this activity, 
aspects are identified according to crosscutting requirements described 
in CRT. Each crosscutting concerns is the candidate aspects in the 
system. In this activity, designer can model the class diagram with 
aspects according the structural metamodel framework which is 
extended class diagram with aspects. If the target system is belonging 
to embedded mobile system, the aspects of embedded mobile software 
are modeled followed by this activity; otherwise, if the target system is 
not belonging to mobile software, the aspects identification to mobile 
software activity could be skipped over.  
 
Aspects identification of embedded mobile software – three kinds of 
structural mobile aspects, context aspect, sensor aspects, and reaction 
aspect, are identified and modeled in this activity by using the extended 
class diagram with aspects described in section 3.2.  
 
Behavioral and state machine modeling with aspects – in this 
表 Y04 
functionalities of the system, and the aspects model specifies the 
embedded mobile software aspects. Aspects of embedded software 
modeling are the general aspect for any kinds of mobile embedded 
software, and the aspects of embedded mobile software are special 
concerns identified from the particular embedded software.  
In this example, we will concentrate only on the context dependency 
modeling of embedded mobile software aspects. The core model 
contains three classes named SituationHandling, SensorInfo, and 
ActionsHandling, which are crosscut among contexts, sensors, and 
reactions using the «weaving» stereotype, respectively. We use 
composite structure diagram of UML 2.2 for this modeling. 
4.2 Structural Aspects Modeling on FARS 
The structural aspect modeling is based on the aspects of embedded mobile software 
analysis to model the corresponding crosscutting concerns, pointcut, advice, and 
weaving relationships. 
In this case, three aspects of context aspect named Normal Context, 
CaseJudgment Context, and Abnormal Context are identified, and the 
aspects on context, sensor, and reaction aspects are modeled in Fig. 6. 
 
表 Y04 
For example, in this case, the SensorInfo class has a join point 
within the operation getGValuew. When the getGValue operation is 
executed and triggered by the join point, the weaving process is 
activated and the corresponding advice getGValue implemented in the 
G-sensor aspect is composed (static or dynamic) into the SensorInfo 
class. The composite structure diagram is used to organize the structure 
of those aspects; furthermore, the dynamic behavior is exhibited in 
section 4.3. 
4.3 Behavioral Aspects Modeling on FARS 
We use two models, sequence diagram and state machine diagram, to 
specify the behavioral perspective for a mobile embedded software 
modeling with aspects. The sequence diagram is used to depict the 
interaction relationships among the core function objects as well as the 
weaving relationships between the core function object and aspect. The 
state machine diagram is used to present the internal states and 
transitions of an aspect object. 
 
 
Fig. 7. Sequence diagram for anti-robbing use case 
Sequence diagram. Fig. 7 shows the sequence diagram for the anti-robbing and Send 
location use case specified in Fig. 5, respectively. We provide two extensions to a 
sequence diagram. The first one is the «weaving» stereotype on the interaction for 
presenting the composition relationships weaving the aspect into the core function 
through a join point. The other one is the advice activation extended from the 
activation bar (blue activation in Fig. 7) to indicate the advice implementation and 
execution. 
 
State machine diagram. Fig. 8 shows the states and state transitions of 
the context aspect using the state machine diagram. In this diagram, 
there are three nested state diagrams to present the aspects. Besides, we 
表 Y04 
dependency, and examine problems in context modeling. They define 
three types of aspects, process, context and sensor, each of them 
corresponds to the conceptual part of context dependent system. A new 
modeling element called inter aspects relation are explicitly defined to 
specify the relationship among aspects. Although we also focus on 
context property of embedded system we more emphasize on the 
mobile embedded system that gives full play to this characteristic. 
Using the OMG UML spec. is more general then them, too. It is easy to 
follow our modeling approach to model the new system. 
Lichen Zhang [25] presents an aspect-oriented method to model the 
embedded real-time system based on UML and describes the real-time 
features as an independent aspect in order to make the multimedia 
system easier to design and develop and guarantee the time constraints. 
In the other hand, we can say it is a narrow sense to other system 
because it only emphasize on time aspect. Moreover it is vague of its 
modeling notations. Although there are provided some extension 
semantics in the paper. But that syntax would not clearly than diagram 
notations. 
Freitas et al. [7] present a proposal to use aspect orientation in the 
analysis and design of Distributed Real-time Embedded (DRE) systems. 
They performed an adaptation of a well-defined method called FRIDA 
(From Requirements to Design using Aspects), which was originally 
applied to the fault tolerant domain. The proposed adaptation includes 
the use of RT-UML together with aspect-oriented concepts in design 
phase, aiming to separate the handling of non-functional from 
functional requirements. In this paper, it only focuses on the 
non-functional requirement but the problem of crosscutting concern not 
only happened on the non-functional requirements but also the 
functional requirements probably.  
6   Conclusion 
In this paper, we proposed an aspect-oriented modeling process and 
notations extended from UML for mobile embedded software modeling 
to deal with the context dependence between sensors and their 
corresponding reactive functionalities. For the aspect oriented modeling 
process, the embedded and embedded mobile aspects modeling 
processes were provided to separate the concerns of the mobile 
embedded software. Meanwhile, the extended notations with 
meta-model framework under class diagram, sequence diagram, and 
state machine diagram were depicted to facilitate the aspects modeling 
表 Y04 
8  Fuentes, L., Gámez, N., Sánchez, P.: Aspect-oriented Executable 
UML Models for Context-aware Pervasive Applications. In: the 5th 
International Workshop on Model-based Methodologies for 
Pervasive and Embedded Software (MOMPES 2008), pp. 34--43. 
(2008) 
9.  Graaf, B., Lormans, M. Toetenel, H.: Embedded Software 
Engineering: the State of the Practice. IEEE Software, 20(6):61-69 
(2003) 
10.  Kiczales, G., Lamping, J., Mendhekar, A., Maeda, C., Lopes, C.V., 
Loingtier, J.-M., Irwin, J.: Aspect-oriented Programming. In M. 
Akcsit and S. Matsuoka (eds.): Proceedings of European 
Conference on Object-Oriented Programming (ECOOP’97). 
Lecture Notes in Computer Science, vol. 1241. Springer-Verlag, 
Berlin Heidelberg New York, pp. 220--241. (1997) 
11. Kishi, T., Noda, N.: Aspect-oriented Context Modeling for 
Embedded System. In: The the Workshop on Aspect-Oriented 
Requirements Engineering and Architecture Design (Early Aspects) 
(2004). 
12.  Korpipää, P.: Blackboard-based Software Framework and Tool for 
Mobile Device Context Awareness. PhD thesis. VTT Publications 
579, (2005) 
13. Lee, E.A.: Embedded Software. Advances in Computers (M. 
Zelkowitz, editor), Vol. 56, Academic Press, London (2002) 
14. Lee, J.-S., Bae, D.-H.: An Aspect-oriented Framework for 
Developing Component-based Software with the 
Collaboration-based Architectural Style. Information and Software 
Technology, 46(2): 81-97. (2004) 
15.  Liggesmeyer, P., Trapp, M.: Trends in Embedded Software 
Engineering. IEEE Software, 26(13):19-25. (2009) 
16.  Mousavi, M., Russello, G., Cursaro, A., Shukla, S., Gupta, R., 
Schmidt, D.C.: Using Aspect-GAMMA in the Design of Embedded 
Systems. In: the 7th Annual IEEE International Workshop on High 
Level Design Validation and Test. IEEE Computer Society Press, 
(2002) 
17.  Noda, N., Kishi, T.: Aspect-oriented Modeling for Embedded 
Software Design. Japan Advanced Institute of Science and 
Technology. (2007) 
18. Object Management Group, UML 2.2 Superstructure Specification, 
http://www.uml.org  
19. Ortin, F., Cueva, J.M.: Dynamic Adaptation of Application Aspects. 
Journal of Systems and Software, 71(3): 229-243. (2004) 
20. 
 
Ortin, F., Cueva, J.M.: Malaca: A Component and Aspect-oriented 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/01/04
國科會補助計畫
計畫名稱: 子計畫二:uID中介平台之服務導向架構與本體論服務目錄之建置: 以高齡者
緊急事件與位置偵測為例
計畫主持人: 范姜永益
計畫編號: 98-2220-E-030-003- 學門領域: 自由軟體暨嵌入式系統
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
培育 Android 相關人才，並指導學生參加教育部協辦的全國軟體競賽取得 2 組
佳作的成績。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
