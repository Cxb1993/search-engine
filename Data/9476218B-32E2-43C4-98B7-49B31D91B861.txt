2訊，只有在行動節點有需要，卻沒有路由資訊的情
況下才會發動路由路徑的找尋動作，所以又稱為需
求式路由協定(on-demand routing protocol)，與主動
式路由協定相較之下，比較不會浪費網路頻寬，不
過卻有著路由資訊太舊的問題。
二、路由可靠度
在MANET的路由協定中，大部分都是以最短
路徑為選擇路由路徑的主要依據，以節省並提高無
線網路頻寬的利用。然而，這種路由路徑卻承受著
較高的路徑斷裂機率，因此我們將著重於MANET
網路環境中路由路由可靠度(或路徑存活時間)的研
究。
如圖1所示，圖中的圓圈範圍代表著行動節點
的無線傳輸範圍，假設我們需要從S行動節點到D行
動節點間建立一條路由路徑，在MANET網路環境
中，我們有兩條路由路徑可以選擇，路徑1從跳躍數
目(hop count)觀點來看，是屬於最短路徑，不過卻
缺乏可靠度，因為行動節點A非常容易就會漫遊出S
行動節點和D行動節點的無線傳輸範圍，而造成路
由路徑斷裂；路徑2可能就會有比較高的可靠度，因
為其中間的行動節點B與C在路徑斷裂前，具有較大
的漫遊區域可供移動。
圖1 MANET網路環境中路由路徑的可靠度
路由可靠度定義可以在許多相關研究中得到
不同的解釋。在ABR[6]路由協定中，每一個行動節
點不需擁有路由資訊，而路徑的選擇是建立在所謂
的關聯穩定度(association stability)狀態，而此關聯穩
定狀態常常會暗示行動節點是否正處於一個穩定的
狀態下，因此路徑不需要時常被要求重新更新。在
SSA(Signal Stability-based Adaptive) [2]協定中，在選
擇路由路徑時，考慮訊號的穩定度。方向預測的方
法在[5]中被提出，其中也基於兩相鄰行動節點的現
在位置、漫遊方向及漫遊速度來定義了路由路徑存
活時間，亦被應用在多點傳送(multicast)的環境中
[3]。其它對於路由路徑選擇相關研究有[7][8]等等。
事實上就可靠度而言，選擇路由路徑時所可能參考
到的因子有很多，例如路由路徑的長度、路由品質、
訊號強度、路徑頻寬及路徑存活時間等等。
三、分環式路由機制設計
分環式概念是以行動節點為圓心，將無線傳輸
範圍以同心圓方式分成若干個環，如圖 2是以 5層
的環為範例。如有其它行動節點移動到此行動節點
的 無 線 傳 輸 範 圍 內 ， 此 行 動 節 點 可 依
RSS(Received-Signal-Strength)公式預估與其之間的
距離，進而得知其位於那一個環之中。
由於單純只考慮路由路徑長度或是路徑跳躍個數是
無法判別路由可靠度的，所以[9]將蜂巢式結構
(cellular structure)化簡後，再進行路徑存活時間的預
測，以改進路由可靠度，不過這樣的作法確太過於
複雜與不自然。[1]中提出一個環狀蜂巢結構，可應
用於預測路徑存活機制，但蜂巢結構與實際應用仍
有差距。事實上，在一般簡化的狀況下，任兩行動
節點間的距離狀態只會有三種變化，靠近、維持不
變以及更遠三種，都是三分之一的機率，若以此來
做考量，任兩行動節點間再也不會有方向性的問
題，只有相對距離狀態的改變。
圖 2 同心狀分環式結構
4圖 5 分環式路由路徑探索程序之流程圖
五、模擬結果
針對我們所提出的無線隨意行動網路之分環
式路由機制設計研究中，所提出的分環式路由路徑
選擇機制，我們將透過模擬的方式來討論這樣的機
制表現結果。在換算實際距離方面，我們使用常被
利用來求得距離的有效方法，即是利用無線電訊號
隨著距離長度而衰減的特性來求得距離，可依 RSS
(Received-Signal-Strength) 得到，只需利用一些已知
的訊號衰減公式，即可根據接收到的訊號強度來推
估訊號傳遞的距離長度；模擬時包含整體網路環境
的產能，進而討論三種封包傳輸間隔時間、五種網
路環境密度(density)與四種行動節點移動速度的影
響。我們的模擬軟體是採用 NS-2[4]網路模擬器，版
本為 2.29版。
我們所使用的模擬環境範圍是設定於一個
1000平方公尺的平面中，模擬時間設定為200秒，模
擬的行動節點個數分別設定為10、20、30、40與50，
行動節點的移動速度分別為5、10、15與20公尺/每
秒，每一個行動節點的傳輸半徑為250公尺，傳輸方
式則是設定為CBR(Constant Bit Rate)，封包的大小
為1024位元組(bytes)，行動節點移動的方向則是採
取隨機決定(random way point)，每一進行移動的節
點停留時間(pause time)則是設定為10秒，無線網路
的頻寬設定為2Mbps。
每一次模擬會依不同的網路密度而調整行動節點間
的通訊連線個數，每一條通訊連線的兩個行動節點
是由隨機產生，通訊連線起始時間亦是隨機產生，
並且持續一百秒，以 50 個行動節點的網路模擬為
例，會有 25條隨機配對的通訊傳輸連線，通訊傳輸
時間點隨機產生，持續一百秒，並且必需在實驗模
擬時間結束前，完成所有通訊傳輸連線；針對通訊
連線時，來源行動節點傳送封包的速率，我們也分
成每秒 2個、5個與 10個封包的速度，並分別模擬
與討論。以上所陳述的數值設定整理於表 1之中。
模擬環境區域範圍 1000平方公尺
模擬時間 200秒
無線網路頻寬 2Mbps
行動節點個數 10、20、30、40、50
傳送資料的行動節點個數 5、10、15、20、25
傳輸方式 CBR/UDP
行動節點移動模型 Random way point model
行動節點移動速度 5、10、15、20 m/s
停止時間 10秒
封包大小 1024位元組
表1 模擬環境數值設定
我們將所提出之分環式機制，整合到行動節點的無
線傳輸範圍，依距離長短將行動節點的無線傳輸範
圍等距分成 5、10與 15等不同密度的環，並各個別
做實驗模擬，並與標準 DSR路由協定做比較，以了
解分環式機制對路由協定的效能之提升。
在行動節點移動速度較慢時，例如移動速度每
秒 5公尺時，如圖 6所示，分環式機制的路由選擇
在效能上比較靠近標準 DSR協定，主要是因為行動
節點移動速度較慢，連結較不易斷裂，相對路由路
徑的變化也較少。不過，當行動節點的移動速度再
往上調升時，模擬結果也出現較大的轉變，如圖 7、
8 與 9 所示，我們所提之分環式路由機制，確實能
增強路由協定的可靠度，進而提升整體網路的產
能，如圖 9(a)所示，最高還比標準 DSR 協定高出
19.64%之多的產能，在其它條件下，分環式機制也
都有高出 10%以上的表現。圖 6到圖 9亦說明加了
分環式路由機制的協定，比標準 DSR協定更適合於
60
20
40
60
80
100
120
140
160
10 20 30 40 50
Number of Nodes
Th
ro
ug
hp
ut
(K
bi
ts
/s
ec
)
5R
10R
15R
DSR
(c) 封包傳輸間隔時間0.1s
圖8 行動節點移動速度每秒15公尺之Throughput比較
20
30
40
50
60
70
80
90
10 20 30 40 50
Number of Node
Th
ro
ug
hp
ut
(K
bi
ts
/s
ec
)
5R
10R
15R
DSR
(a) 封包傳輸間隔時間0.5s
40
50
60
70
80
90
100
110
10 20 30 40 50
Number of Nodes
Th
ro
ug
hp
ut
(K
bi
ts
/s
ec
)
5R
10R
15R
DSR
(b) 封包傳輸間隔時間0.2s
60
70
80
90
100
110
120
130
140
10 20 30 40 50
Number of Nodes
Th
ro
ug
hp
ut
(K
bi
ts
/s
ec
)
5R
10R
15R
DSR
(c) 封包傳輸間隔時間0.1s
圖9 行動節點移動速度每秒20公尺之Throughput比較
六、結論
在MANET網路環境中，路由路徑的長度與路
由可靠度一直是個兩難的問題，而在眾多 MANET
網路標準路由協定裡，都是以最短路由路徑為優
先，在某些網路條件下，例如在行動節點移動速度
較快的情況下，這種做法反而沒有效率，而降低網
路的產能；我們針對MANET網路中路由協定的可
靠度問題，提出了一個改良可靠度的路由機制，此
機制是藉由將行動節點的資料傳輸範圍分成若干個
環狀結構，在路由路徑的選擇時，可依此結構來挑
選可靠度較高的連結，如此一來整條路由路徑的可
靠度即可提高，模擬實驗結果顯示，加了分環式路
由機制的 MANET路由協定，比原來未加分環式機
制的 DSR，最高提升了 19.64%之多的平均網路產
能，分環式路徑選擇機制的確可提高路由可靠度。
參考文獻
[1] I. F. Akyildiz, S. M. Ho, and Y.-B. Lin,
Movement-Based Location Update and Selective
Paging for PCS Networks, IEEE/ACM
Transactions on Networking, vol. 4, no. 4, Aug.
1996.
[2] R. Dube, C. Rais, K. Wang, and S. Tripathi,
Signal Stability Based Adaptive Routing (SSA)
for Ad-Hoc Mobile Networks, IEEE Personal
Communications, Feb. 1997, pp. 36-45.
[3] S.-J. Lee, W. Su, and M. Gerla, Ad Hoc Wireless
Multicast with Mobility prediction, Proceedings
International Conference Computer
Communications and Networks, 1999, pp. 4-9.
[4] The network simulator–ns-2,
http://www.isi.edu/nsnam/ns/
[5] W. Su, S.-J. Lee, and M. Gerla, Mobility
Prediction in Wireless Networks, Proceedings
IEEE Military Communications Conference, vol.
1, 2000, pp. 491-495.
[6] C.-K. Toh, Associativity-Based Routing for Ad
Hoc Mobile Networks, Springer Wireless
Personal Communications, vol. 4, no. 2, Mar.
1997, pp. 103-139.
[7] Z. Wu, H. Song, S. Jiang, and X. Xu, A
這次前往澳洲荷巴特參加 The 2008 International Symposium on Ubiquitous
Multimedia Computing (UMC 2008) 國際研討會。會議期間為 2008年 10月 13日
至 2008年 10月 15日，並同時包含 UMC 2008與 CSA 2008此二研討會，三日
會議議題包含下列項目：.
1. Ubiquitous and Pervasive Computing
2. Dependable, Reliable and Autonomic Computing
3. Security and Trust
4. Multimedia
5. Networking and Communications
6. Database and Data Mining
7. Software Engineering
CSA會議主要探討計算機科學與應用之相關議題，UMC會議則探討計算機科學
於隨處可見的多媒體之應用，諸如無線廣播多媒體、網路搜尋引擎、多媒體影音
傳輸及家庭安全系統皆為此會議的探討範圍。
研討會共包含了 18個 Session。其中對 Session 7、12及 15尤感興趣，以下
將對各 Session做進一步地報告。
Session 7由 Dr. Naveen Chilamkurti主持，會議中除了探討計算機科學應用
於醫療系統，如監測心跳規律性以探知心律等問題外，更有不少論文針對 P2P
網路傳輸提出有效率的資料結構以增加傳輸效率與可靠度。
於 Dr. Nishat Ahmad主持的 Session 12中，Mr. Dong-Min Seo提出了一更有
效率的方法動態地更新移動物件之狀況；Mr. Dong-Young Lee與我們分享了新的
Heterogeneous安全系統之管理模型；Mr. Foon Chi Francts Chul 則分享了圖像辨
識的新技術。
延續 Session12，Dr. Byeong Ho Kang 主持的 Session 15中進一步地包含了
靜態與動態多媒體技術的改善，不僅在圖像辨識領域上，更深入地探討多媒體傳
輸效率的改善。此外更探討了 Google 搜尋引擎於中國市場中無法勝過百度搜尋
引擎。除了傳統計算機理論，Mr. Surtya Kaewarsa提出了以類神經網路架構取代
傳統計算機架構之電源品質偵測方法。
會議中我們報告所發表的論文「Efficient Perfectly Periodic Scheduling for
Data Broadcasting」，與與會者分享了我們在週期性無線廣播傳輸效率改善的技術
與成果。
在這三日的研討會中，主要參與了探討計算機科學應用於日常科技之 UMC
2008 研討會，於會議中獲得了許多影像辨識、網路傳輸效能改善以及計算機科
學應用於家庭生活與安全等相關新知。參與此會議，感到受益良多，感謝國科會
計畫的資助參與這內容豐富的研討會。
2.1 Problem Statement and Notation 
 
Given a set of n jobs, each job i associated with a 
requirement (bi, τi), where bi is the length (or 
execution time) of job i and τi is the requested period 
of job i. A set of n jobs J = {(bi, τi) | i=1,2, …, n} is 
called an instance. The maximum and minimum 
required period of J is denoted by TJ=max{τi | 
i=1,2, …, n} and tJ=min{τi | i=1,2, …, n} 
respectively. The required bandwidth of i is defined 
by βi = bi / τi and the requested bandwidth of an 
instance J is denoted as ∑= =ni iJ 1 ββ . 
A schedule S for an instance J is an infinite 
sequence s0, s1, s2, …, where sj={1, 2, …, n} for all j. 
A schedule is feasible if no two jobs are scheduled at 
the same time. A schedule is perfectly periodic if 
each job is scheduled exactly every τiS time slots, 
where τiS is the scheduled period for job i in S. 
Essentially, a perfectly periodic schedule can be 
viewed as an infinite concatenation of a cycle. The 
related symbols and the corresponding descriptions 
are summarized in Table 1. In this paper, we assume 
that the granted period is greater than or equal to the 
required period for all jobs. 
 
Table 1. Notation 
Symbols Descriptions 
n number of jobs. 
J an instance of the problem. 
bi length of job i. 
τi requested period of job i. 
TJ maximal requested period in J. 
tJ minimal requested period in J. 
βi requested bandwidth of job i. 
βJ total requested bandwidth in J. 
S a schedule. 
τiS granted period of job i in S. 
 
To study the performance of perfectly periodic 
schedule, we evaluate the weighted average 
distortion, a popular measure first proposed in [2]. 
The weighted average distortion defined as 
i
S
i
n
i
i
J
SJC
τ
τββ ∑
=
=
1
AVE
1),(  
where the ratio of τiS / τi represents the distortion of 
job i and the weight of job i, βi, is the requested 
bandwidth. Obviously, the best case of distortion 
occurs when the granted period equals to the 
requested period. 
 
2.2 Related Works 
 
In the perfectly periodic scheduling problem, 
Bar-Noy [2] first suggested a binary tree-based 
algorithm to schedule requests with unit length. Later 
in [5, 6], Brakerski et. al. considered a more general 
problem for scheduling a set of requests with 
different lengths and periods. Recently, for the same 
problem in [5, 6], Patil and Garg [9] proposed a more 
efficient algorithm Adaptmin that schedules n jobs 
requests in O(nlogn) time. 
In general, the requested period of each job may 
not be formed a power of two, algorithm Adaptmin 
rounds up all periods to the nearest power of two, i.e., 
⎡ ⎤i
i
ττ 2log2'= , and schedules the scaled jobs. Let the 
maximum period be T and the minimum period be t 
respectively. First, algorithm Adaptmin sorts the 
jobs in the nondecreasing order of requested periods 
and creates T/t intervals, each interval of length t 
slots, for a cycle. Next it processes the jobs in the 
nondecreasing order of requested periods. For job i, it 
scans the first ti /'τ intervals and choose the first 
interval with most free slots. If the number of free 
slots is less than 'iτ , the length of the interval is 
enlarged for job i. Since all intervals have the same 
length, all intervals are enlarged. Finally, the job is 
scheduled in all intervals that are at a multiple of 
ti /'τ .  
Figure 1 shows an instance of algorithm 
Adaptmin for J={(1, 8), (1, 4), (2, 7), (4, 13)}. 
After rounding up all periods to the nearest power of 
two and sorting the requested periods, we have the 
scaled jobs J’={(1, 4), (2, 8), (1, 8), (4, 16)}, T = 16, 
and t = 4, as shown in Figure 1(a). Next find interval 
1 with most free space and set the first job in interval 
1, as shown in Figure 1(b). Then insert the first job 
into all intervals at a multiple of 1 interval away, as 
shown in Figure 1(c). Repeat the same procedure, 
Adaptmin schedules two slots for the second job in 
intervals 1 and 3 and one slot for the third job in 
intervals 2 and 4, as shown in Figure 1(d) and Figure 
1(e). For the last job, since the free space of all 
intervals is less than the requested length of the 
fourth job, all intervals will be expanded so that the 
fourth job can be scheduled perfectly. In this case, 
the least number of slots to be expanded is two, so 
each interval will consist of six slots. Finally the 
,
30
Authorized licensed use limited to: IEEE Xplore. Downloaded on November 19, 2008 at 22:13 from IEEE Xplore.  Restrictions apply.
pseudo job is the greater total length of 
two merged sets. 
1.3 Record the scheduling order of jobs in 
pseudo jobs. 
1.4 Insert 2j-1 pseudo jobs into list Lj-1 in 
noninecreasing order of lengths.  
2. Let l be the sum the length of jobs in list L0 
3. If ∃ job i (τi < 2j × l), expand interval length to 
l=l + max{⎡(τi – (2j × l)) / 2j⎤}. 
Figure 4. Procedure Adjust 
 
 
Figure 5. An Example of Procedure Adjust 
For any list Lj, we distribute all jobs in list Lj into 
2j sets in noninecreasing order of lengths as evenly as 
possible. Next join two consecutive sets into a 
pseudo job and set the length of the pseudo job is the 
greater total length of two merged jobs. Then insert 
the 2j-1 pseudo jobs into list Lj-1 in noninecreasing 
order of lengths. We do this process for lists in the 
order of Lm-1, Lm-2, …, L1. Let l be the total length of 
jobs in list L0. Finally, procedure Adjust scans all 
jobs and adjusts the maximum interval. The size of 
the maximum interval is extended to l = l + 
max{⎡(τi – (2j × l)) / 2j⎤ } for all job i with period 
longer than 2j × l slots where job i is in Lj. 
 
An example of procedure Adjust is shown in 
Figure 5. Note that the interval length l = 41 obtained 
by the total length of jobs in L0. But, since the request 
period of job 5 is longer than l and job 5 is in L1, we 
extend interval to l = 41 + ⎡(96-21×41) / 2⎤ = 48, i.e. 
each interval is extended four slots. 
 
3.3 Procedure Schedule 
 
 The aim of procedure Schedule is to schedule all 
jobs according to the lists produced by procedure 
Adjust. The description of the procedure is given 
in Figure 6. The procedure first round all periods by 
τiS  = 2j × l, where job i is in the list Lj. Let the 
maximum scheduled period TS = max{τiS} and 
minimum scheduled period tS = min{τiS}. Next we 
create TS / tS intervals with equal length l. To 
schedule all jobs into intervals, the algorithm 
schedule jobs from L0 to Lm-1 and in decreasing order 
of length. At the begining of scheduling, all of the 
space of interval can be scheduled for list L0. But for 
list Lj(j≠0), the intervals to be scheduled is 
constrained to the reservation by pseudo jobs in list 
Lj-1. Then schedule jobs of list Lj into constrained 
intervals in nonincreasing order of length. For each 
job, find an interval with the position that belongs for 
current examined job in first τiS / tS constrained 
intervals. Insert the job in the interval and in the 
intervals at a multiple of τiS / tS away. 
 
Procedure Schedule 
 
Input: Lists L0,L1,…Lm-1 and length of interval l 
Output: A schedule S. 
1. For all jobs (including pseudo jobs), round all 
job periods to τiS  = 2j × l, if job i is in the list Lj. 
2. Let TS = max{τiS} and tS = min{τiS}. 
3. Produce TS / tS intervals with equal length l. 
4. Insert all jobs in L0 into all intervals directly. 
5. Let j = 1 and set the intervals for pseudo job in 
L0 as constrained interval. 
6. Schedule jobs of list Lj into constrained intervals 
in nonincreasing order of length. Search first τiS / 
tS constrained intervals and insert jobs into 
appropriate positions according to the related 
scheduling record. 
32
Authorized licensed use limited to: IEEE Xplore. Downloaded on November 19, 2008 at 22:13 from IEEE Xplore.  Restrictions apply.
