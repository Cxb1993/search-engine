 1
具時窗限制的多廠間收送貨問題之研究
The Multi-Site Pickup and Delivery Problem with time window
摘要
多廠間物流運輸的複雜性及成本考量，使得公司必須有效且有效率的安排車輛收送貨以追求競爭力。
本計畫考量具時窗限制的多廠間收送貨問題，其在實務上有許多應用，特別是在半導體製造產業。多
廠投資一直是半導體製造產業擴充產能最普遍的做法，也使得各廠之間因產能支援的晶圓運送、光罩
配送及成品入庫等多廠間收送貨活動更頻繁且複雜。此外，運送時窗決策隨顧客訂單等級不同而異。
因此，具時窗限制的多廠間收送貨問題具有產品／車輛相容、收貨與送貨、多部車、車輛產能及多訂
單等級等限制，其求解比傳統收送貨的車輛排程問題更加困難。本計畫探討具實務需求之具時窗限制
的多廠間收送貨問題，提出混和整數規劃與演算法以指派各訂單之運送車輛及收送貨排程所提出的演
算法將利用學術上及實務上的問題進行測試。
關鍵詞：具時窗限制的收送貨問題、多廠、混和整數規劃、演算法、晶圓製造。
Abstract
Due to the complexity and cost of transportation and distribution activities, a multi-site
manufacturer needs to schedule vehicles for pickup and delivery effectively and efficiently to increase a
company’s competition edge. In this project, we consider the multi-site pickup and delivery problem
with time window (MSPDPTW), which is often found in real-world practice, particularly, in the
integrated circuit (IC) manufacturing industry. In a multi-site semiconductor manufacturing company,
transportation activities, arisen from pickup-and-delivery of wafer, mask, or finished-goods, are
frequently and complicated. Since the MSPDPTW involves constraints on product/vehicle
compatibility, pickup and deliveries, multiple vehicles, vehicle capacity, and multiple-priority
constraints, it is more difficult to solve than the classical pickup and delivery problem. In this project,
we describe the MSPDPTW in detail and formulate the MSPDPTW as an integer programming
problem. An efficient heuristic algorithm is also proposed for solving large-scale problems.
Keywords: pickup and delivery; multi-site; routing; integer programming; heuristic algorithm.
1. Introduction
Multi-site investment has been a popular way to increase capacity, particularly, in the
semiconductor manufacturing industry.  As a result, in many of today’s multi-site companies,
transportation and distribution activities emerge as one of the central issues owing to their complexity
and costs. Due to the relative magnitude of the transportation and distribution costs is associated
 3
One of the importance classes of vehicle routing and scheduling problems is pickup and delivery
problems, in which commodities or people have to be collected and distributed (Berbeglia et al. 2007).
In the pickup and delivery problem, a set of routes has to be constructed in order to satisfy requests.
A fleet of vehicles is available to operate the routes. Each vehicle has a given capacity, a start location,
and an end location. Each request specifies the size of the load to be transported, the locations where
it is to be picked up and the locations where it is to be delivered. Each load has to be transported by
one vehicle from its set of origins to its set of destinations without any transshipment at other locations
(Savelsbergh and Sol, 1995).
A number of papers addressed the pickup and delivery problem with time window (PDPTW)
owing to the prevalence and importance in the practical applications. The survey papers (Bodin et al.
1983; Soloman and J. Desrosiers, 1988; Berbeglia et al. 2007) provide a comprehensive review of the
literature on PDPTW. There are two types of PDPTW, static PDPTW and dynamic PDPTW. In
the cases, the requests are known in advance, the problem is known as static PDPTW. In the cases,
the requests are received in real-time and eligible for consideration, the problem is known as dynamic
PDPTW. In this project, we focus on the static PDPTW problem. For static PDPTW, Nanry and
Barnes (2000) use hierarchical search methodology. Xu et al. (2003) present column generation based
solution approaches. Lu and Dessouky (2006) proposed an insertion-based construction heuristic.
Bent and Van Hentenryck (2006) present a two-stage hybrid algorithm, simulated annealing algorithm
first used in the first stage and Large neighborhood search used in the second stage.
Since the MSPDPTW involves constraints on product/vehicle compatibility, pickup and deliveries,
multiple vehicles, vehicle capacity, and multiple-priority constraints, it is more difficult to solve than the
classical pickup and delivery problem. In this project, we consider a more general version of
MSPDPTW and formulate the MSPDPTW as an integer programming problem. An efficient
heuristic is also proposed to obtain the near-optimal solution for large scale problems.
2. Description of the MSPDPTW
The MSPDPTW may be defined as follows. We are given a vehicle fleet in order to serve a set of
requests. The road network is represented by a graph ),( EVG , where )( n0 v,,vV  is a vertex set and
 ,:)( Vvvvvv,vE jijiji  is an arc set. The travel time of each arc Ev,v ji )( is represented by ijtt .
Vertex 0v denotes a depot at which the routes of K vehicles start and end. The set of vertices
)( 1 nv,,v  specify the possible pickup and/or delivery sites. We are also given a set of requests. Each
request specifies the product type (mask, wafer lots, or die lots) and its amount, the pickup site, a
planning-period for pickup, the site to be delivered, and a priority code.
The MSPDPTW consists of determining a set of routes for a fleet of vehicles in order to
accomplish transportation requests. The objective is to maximize total operations served, under
following constraints: (1) product/vehicle compatibility must be conformed, (2) each request must be
served entirely by one vehicle, (3) each pickup operation has to be served before its corresponding
 5
Planning horizon and planning period
In the MSPDPTW, we consider a planning horizon of one working day. To efficiently deal with
MSPDPTW, our idea is to divide the original planning horizon into several smaller planning periods. Time
length of each planning period is set with the considerations of the variety of lot size and transport
frequencies. Throughout this project, we have set the “minute” as the unit of the traveling time, loading
and unloading time, and maximum vehicle route times in our investigation.
Numbers of vehicles housed in the depot is pre-determined. On a daily basis, each vehicle must
start from depot in the beginning of the first planning-period, and return the depot in the end of the last
planning-period. For other planning-periods, there are different start and end sites for vehicles, i.e. the
ending site for period p will refer to the same site as the starting site for period 1p . The hollow
circles are sites to be pick-up and/or delivery for the requests assigned to vehicle A.
Problem Complexity
The MSPDPTW is NP-hard. Without the multiple priority constraint, both the capacitated
vehicle routing problem (CVRP) and the pickup-and-delivery problem (PDP) can be regarded as
particular instances of the MSPDPTW, and CVRP and PDP have been shown to be NP-hard
(Solomon, 1987; Goel and Gruhn, 2008).
3. An integer programming formulation
We first define },,,{ 10 Jj vvvvV  containing 1J nodes in the multi-site environment, in which
node 0v representing the depot node while remaining J nodes ( Jvv ,,1  ) representing J sites to be
visited. Let 'jjtt be the travel time from site jv to site 'jv . We also define F ={ Kkfk ,1, } as the
fleet of vehicles containing a set of K vehicles. Let kc be the vehicle-type code, with kc =0 if
vehicle kf is for general purpose, and kc equals a positive number if vehicle kf is dedicated for a
specific product type. Let W be the predetermined vehicle capacity and T be the time-length of the
planning period.
We define }1,2,...,{ QqrR q  containing Q requests to be scheduled in the planning period. To
model the problem, we represent an operation set }1,2{O ,...,Iioi  containing I operations,
QIQ 2 . In such a case, for hot requests and pickup requests, each request is represented by two
operations, io for pickup and 'io for delivery respectively. For delivery requests, each request is
represented by only one operation, io , for delivery.
Each operation io is associated with a request )( Rri  , product type id , lot size in , a visit-site
)( Vsi  , a pickup-or-delivery code ip , a priority code iwt , and an assigned vehicle, )( Ffk  , if goods of
request ir are already picked-up in the previous period by vehicle kf and to be delivered in this
period. Let ip be the pickup-or-delivery code, with ip =1 if operation io is a pickup operation, and
ip =-1 if operation io is a delivery operation. Let iwt be the priority code, with 1iwt if operation
 7
1
1 11







I
0i
I
0'i
k'ii
I
0i
ik zx , for all k , (16)
,)(z
1
0
1
0i'
))(( Ttt
I
i
I
ssk'ii 'ii





for all k , (17)
)(
1
0 


I
i
iiikk enxcw , for all k , (18)
M)(1)(  ik'iikiik'iik zxpncwcw , for all i,k , (19)
0 Wcwik  , for all ki, , (20)
{0,1}ikx , for all i,k , (21)
{0,1}ki'iy , for all i,k , (22)
{0,1}ki'iz , for all i,k . (23)
The objective function seeks to maximize the total numbers of operations served. The
constraints in (1) and (2) guarantee each vehicle starts from the initial node. The constraints in (3) and
(4) guarantee that the operation io is scheduled on one vehicle exactly once (if iwt =1) or operation
io can be at most scheduled on one vehicle exactly once (if iwt =0). The constraints in (5) ensure that
operation io and 'io need to be scheduled on the same vehicle ( k'iki xx  ) when two operations io and
'io are belong to the same request ( 'ii rr  ). The number M is a constant, which is chosen to be
sufficiently large.
The constraints in (6), (7), and (8) ensure that one operation can precede another ( 1 kii'k'ii yy ) if
two operations io and 'io are scheduled on the same vehicle kf ( 1kix and 1k'ix ). The
constraints in (9) ensure that operation io precedes operation *io ( k*iiy =1) when operation io
precedes operation 'io ( kiiy ' =1) and operation 'io precedes operations *io ( kiiy *' =1). The constraints
in (10) ensure that pickup-operation io ( ip =1) need to precede delivery-operation 'io ( kiiy ' =1) when
two operations io and 'io are belong to the same request ( 'ii rr  ) and scheduled on the vehicle kf
( kiki xx ' =2). The constraints in (11) ensure that pickup-operation io ( ip =1) need to directly-precede
delivery-operation 'io ( kiiz ' =1) when two operations io and 'io are belong to the same request and
with hot priority ( 'ii rr  and ih =1) and scheduled on the vehicle kf ( kiki xx ' =2). The constraints in
(12) ensure the product/vehicle compatibility.
The constraints in (13) ensure that operation io could precede operation 'io directly ( kiiz ' =1)
only when k'iiy =1 and operation io could not precede operation 'io directly ( kiiz ' =0) if operation io
is scheduled after operation 'io ( k'iiy =0). The constraints in (14) ensure that at most one operation
'io could be scheduled after operation io directly for all the operations scheduled on the vehicle kf .
The constraints in (15) ensure that at most one operation 'io could be scheduled precede operation io
directly for all the jobs scheduled on the vehicle kf . The constraints in (16) state that there should
exist 1-N directly-precedence variables, which set to one, on the schedule with N operations.
The constraints in (17) control the upper bound on the completion time of each route. The
constraints in (18) assign the initial vehicle load kcw0 which equals to the delivery-quantities for those
 9
Algorithm
Step 1. For each vehicle kf , set partial route kk ksPR )( 0 initially, where ks0 represents the initial
site-node for vehicle kf in the planning-period.
Step 2. Delivery requests assignment.
Step 2.1. For each delivery-request ir performed by vehicle kf , assign delivery-site, isd , to
cluster k until all delivery-requests are assigned.
Step 2.2. For each cluster k , form partial route kPR by solving a traveling salesman problem
over the delivery-site, isd , in the cluster k with start site ks0 .
Step 3. Hot request insertion:
Step 3.1. For each unscheduled hot-request ir , compute its best feasible insertion position for
pickup-site isp and delivery-site isd in which isp directly-preceding isd in each
partial route kPR .
Step 3.2. isp directly-preceding isd are inserted into the cheapest insertion cost position of
the route *kPR without violating the product/vehicle compatibility and capacity
restrictions. In this step, the maximum travel time of each route is set to
)(1 T .
Step 3.3. Repeat Step 3.1-3.2 until no feasible hot-requests can be inserted into any kPR .
Step 4. Pickup request insertion:
Step 4.1. For each unscheduled pickup-request ir , compute its best feasible insertion position
of isp and isd in which isp preceding isd in each partial route kPR .
Step 4.2. isp preceding isd are inserted into the cheapest insertion cost position of the route
*kPR without violating the product/vehicle compatibility and capacity restrictions.
In this step, the maximum travel time of each route is set to )(1 T .
Step 4.3. Repeat Step 4.1-4.2 until no feasible delivery-requests can be inserted into any kPR .
4.2 Phase II: Route improvement
By taking the merits of 1-move heuristic (Zhong and Cole, 2005), Phase II is to improve the
current solution by iteratively removing requests from the current positions and reinserting them to the
most profitable positions when total travel time is decreased. Note that, delivery-requests can only be
moved to another positions in the same route, while hot-requests and pickup-requests can be moved to
the positions in the same route or another route without violating the product/vehicle compatibility
and capacity restrictions.
 11
multiple-priority orders, pickup and deliveries, multiple vehicles, and vehicle capacity constraints,
therefore it is more difficult to solve than the classical pickup and delivery problem. The MSPDPTW
is NP-hard. In this project, we presented a heuristic algorithm to resolve the MSPDPTW. An
example is used to illustrate the performance of the proposed approach. A real world example taken
from an IC manufacturing company, where 120 requests to be served by 30 vehicles, is solved by the
proposed algorithm to obtain the near optimal solution within 0.01 CPU s.
References
Altinkemer, K. and Bavish, B., 1991. Parallel savings based heuristics for the delivery problem.
Operations Research 39(3), 456-469.
Bent R. and Van Hentenryck, P., 2006. A two-stage hybrid algorithm for pickup and delivery vehicle
routing problems with time windows. Computers & Operations Research 33, 875-893.
Berbeglia, G., Cordeau, J. F., Gribkovskaia, I., and Laporte, G., 2007. Static pickup and delivery
problems: a classification scheme and survey. TOP 15, 1-37.
Blazewicz, J., Dror, M., and Weglarz, J., 1991. Mathematical programming formulations for machine
scheduling: a survey. European Journal of Operational Research 51, 283-300.
Bodin, L. and Golden, B., 1981. Classification in vehicle routing and scheduling. Networks 11, 97-108.
Bodin, L., Golden, B., Assad, A., and Ball, M., 1983. Routing and scheduling of vehicles and crews:
the state of the art. Computers & Operations Research 10(2), 62-212.
Chang, T.-S. and Liao, Y.-F., 2008. Path finding with stowage planning consideration in a mixed
pickup-delivery and specified-node network. Transportation Research Part E 44, 970-985.
Clark. G. and Wright, J., 1964. Scheduling vehicles from a central depot to a number of delivery points.
Operations Research 12, 568-580.
Dethloff, J., 2001. Vehicle routing and reverse logistics: the vehicle routing problem with simultaneous
delivery and pick-up. OR Spektrum 23, 79-96.
Dondo, R., Méndez, C. A. and Cerdá, J., 2008. Optimal management of logistic activities in multi-site
environments. Computers & Chemical Engineering 32, 2547-2569.
Dondo, R., Méndez, C. A. and Cerdá, J., 2009. Managing distribution in supply chain networks.
Industrial & Engineering Chemistry Research 48, 9961-9978.
Freed, T. and Leachman, R. C., 1999. Scheduling semiconductor device test operations on multihead
testers. IEEE Transactions on Semiconductor Manufacturing 12(4), 523-530.
Goel, A. and Gruhn, V., 2008. A general vehicle routing problem. European Journal of Operational
Research 191, 650-660.
Gribkovskaia, I., Laporte G., and Shyshou, A., 2008. The single vehicle routing problem with
 13
Table 5
Travel times matrix in the real-world example
To
From 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
0 0 10 15 10 15 20 10 10 15 25 20 30 35 10 20 20
1 10 0 10 10 15 15 10 20 20 25 25 30 35 15 10 15
2 15 10 0 15 10 10 20 30 30 15 15 15 15 25 15 20
3 10 10 15 0 10 15 10 20 20 20 10 15 20 15 15 10
4 15 15 10 10 0 10 20 30 30 15 10 10 15 25 20 20
5 20 15 10 15 10 0 25 30 30 10 15 15 10 25 20 25
6 10 10 20 10 20 25 0 15 10 20 20 25 30 10 20 20
7 10 20 30 20 30 30 15 0 10 30 20 25 35 10 15 15
8 15 20 30 20 30 30 10 10 0 25 30 30 35 10 15 20
9 25 25 15 20 15 10 20 30 25 0 15 15 10 25 15 25
10 20 25 15 10 10 15 20 20 30 15 0 10 20 25 25 15
11 30 30 15 15 10 15 25 25 30 15 10 0 15 30 25 25
12 35 35 15 20 15 10 30 35 35 10 20 15 0 30 25 25
13 10 15 25 15 25 25 10 10 10 25 25 30 30 0 20 20
14 20 10 15 15 20 20 20 15 15 15 25 25 25 20 0 25
15 20 15 20 10 20 25 20 15 20 25 15 25 25 20 25 0
 15
request
ID
Product
type
Lot size Prickup
site
Delivery
site
priority Assigned
vehicle
request
ID
Product
type
Lot size Prickup
site
Delivery
site
priority Assigned
vehicle
request
ID
Product
type
Lot size Prickup
site
Delivery
site
priority Assigned
vehicle
22 0 3 13 2 2  62 1 4 4 3 2  102 1 6 7 4 2 6
23 2 5 2 11 2  63 1 6 9 5 2  103 1 1 8 5 2 8
24 2 2 6 4 2  64 0 4 11 2 2  104 0 7 4 13 2 25
25 2 10 14 9 2  65 2 7 7 6 2  105 1 8 8 6 2 1
26 0 5 10 13 2  66 0 10 15 6 2  106 1 10 14 15 2 7
27 0 7 14 13 2  67 1 3 15 4 2  107 1 5 15 7 2 5
28 1 5 11 7 2  68 0 9 10 15 2  108 1 5 13 5 2 5
29 2 7 7 4 2  69 1 8 14 10 2  109 0 5 12 4 2 26
30 2 5 14 12 2  70 1 1 9 5 2  110 2 10 2 11 2 12
31 2 4 12 14 2  71 2 10 15 7 2  111 0 10 6 5 2 19
32 2 10 4 3 2  72 2 2 13 9 2  112 2 6 1 3 2 14
33 1 6 14 11 2  73 0 2 12 1 2  113 1 6 14 13 2 25
34 0 9 11 15 2  74 1 5 11 6 2  114 0 4 5 9 2 18
35 2 2 2 13 2  75 2 8 3 6 2  115 2 2 14 12 2 10
36 1 8 12 4 2  76 0 5 8 15 2  116 0 10 13 8 2 17
37 0 3 3 8 2  77 2 2 9 5 2  117 2 2 3 1 2 15
38 1 1 14 3 2  78 0 5 13 3 2  118 1 2 7 14 2 2
39 1 9 5 15 2  79 0 6 4 10 2  119 2 10 3 15 2 11
40 2 10 4 2 2  80 2 8 4 14 2  120 0 7 6 11 2 20
表 Y04
四、 建議
藉由參加國際研討會，藉由學術交流機會可使研究視野更寬廣。尤其是結合各不同
主題或領域之研討會於一處，更可激盪出不同的思考與研究成果，提升競爭力。建議多
主動參加大型國際研討會，對學術研究能力的提升將有極大助益。
五、 攜回資料名稱及內容
1.Proceedings of the 2010 international conference on modeling, simulation & visualization
methods.
2.WORLDCOMP’10publicationsonCD-ROM.
3.Conference schedules of the 2010 world congress in computer science, computer engineering, and
applied computing (WORLDCOMP’10).
cluster analysis, heuristic algorithms, and optimal 
transportation rules for design and optimization of a 
multi echelon and multi level production/distribution 
system. 
  Dondo et al. [1] consider the multiple vehicle 
time-window-constrained pickup and delivery problem 
(MVPDPTW).  Their research takes many-to-many 
transportation requests, pure pickup and delivery tasks, 
heterogeneous vehicles and multiple depots into 
account and presents an exact MILP mathematical 
formulation.  For large-scale problems, a local search 
improvement algorithm is also presented.  Dondo et al. 
[6] further consider a more general vehicle routing 
problem in supply chain management (VRP-SCM), 
which better resembles the logistics activities to be 
planned at multisite manufacturing firms by allowing 
multiple events at every location.  In such a definition, 
both capacitated vehicle routing problem and the 
pickup-and-delivery problem can be regarded as a 
particular instances.  An MILP mathematical 
formulation is proposed for solving the VRP-SCM. 
  Rupp and Ristic [7] present a distributed planning 
methodology for semiconductor manufacturing supply 
chains.  The developed system is based on an approach 
that leaves as much responsibility and expertise for 
optimization as possible to the local planning systems 
while a global coordinating entity ensures best 
performance and efficiency of the whole supply chain. 
Chiang et al. [8] presented an empirical supply chain 
model to catch the relationship between the supply 
chain configuration and performance matrices. 
  This study considers a more general version of 
VRP-SSC.  The VRP-SSC is investigated by taking 
into account numbers of vehicle decision, multiple 
priorities, pickup and delivery, and vehicle capacity 
constraints.  The objective is to determine the number 
of vehicles and to find a set of routes and schedules for 
the vehicles in order to accomplish a set of requests at 
minimum total cost satisfying time window restrictions 
while without violating vehicle capacity constraints. 
2 Description of the VRP-SSC 
 The VRP-SSC may be defined as follows.  We 
are given a vehicle fleet in order to serve a set of 
requests.  On a daily basis, planners need to decide 
number of vehicles and to schedule the routes to 
accomplish the set of transportation requests. 
  The road network is represented by a graph 
),( EVG = , where ),,( 0 nvvV =  is a vertex set and 
{ } , :),( VvvvvvvE jijiji ∈∧≠=  is an arc set.  Vertex 
0v  denotes a depot at which the routes of K  vehicles 
of capacity W  start and end on a daily-basis.  The set 
of vertices ),,( 1 nvv   specify the possible pickup 
and/or delivery sites.  The set of arcs Evv ji ∈),(  
represent arcs correspond to road connecting these 
sites.  The travel time of each arc Evv ji ∈),(  is 
represented by ijtt  which satisfies the triangle 
inequality kjikij tttttt +≤ .  It may occur that the same 
site is associated to different requests for pickup and/or 
delivery.  The planning horizon is denoted the interval 
],[ 21 PP . 
  A set of requests is given.  Each request involves 
lot size to be transported by one of the vehicles and no 
transship is allowed, a pickup site V∈ , a delivery site 
V∈ , a time window ],[ 21 PP⊂  during which pickup 
has to take place, and a priority code.  Note that, lots 
must be taken at the pickup site before being brought 
to the delivery site.  Due to different product profit 
rates and the varied importance level of customers, 
there often exist more than one priority level of orders 
in most semiconductor companies.  Because lots with 
different priorities have different processing priority, 
the various priority lots also have a great influence on 
vehicle routing and scheduling.  That is, multiple-
priority scheduling decision will affect considerably 
the amount of time spend on vehicle routes.  In the 
VRP-SSC, the schedule of sequence is based on level 
of the order priority.  For those requests with hot 
priority, transportation would be allowed transport via 
shortest path between its pickup-site and delivery-site. 
While for those requests with normal priority, products 
need only to be picked-up and delivered in the 
assigned time-window.  Throughout this project, we 
assume that each request is assigned a value of 
processing priority, which is known at the beginning of 
the request released. 
  To optimally manage the complicated distribution 
systems, transportation activities between sites are 
coordinated by allowing multiple activities at each site.  
In this way, two or more vehicles may visit a given site 
to perform pickup and/or delivery operations, and 
vehicle routes may include more than one stop at the 
same site.  Note that, the capacity of a vehicle can 
never be exceeded after visiting a node.  Finally, the 
1=− ∑ ∑∑
= ==
I
0i
I
0'i
k'ii
I
0i
ik zx , for all k , (12) 
  ,)(z
0 0i'
))(( ' ' Ttt
I
i
I
sskii ii ≤×∑ ∑
= =
 for all k , (13) 
 0=k0cw , for all k ,  (14) 
M)(1)( '' ×−−××+≥ ikiikiikiik zxpncwcw ,  
for all i,k , (15) 
 0 Wcwik ≤≤ , for all ki, , (16) 
 00 =kct , for all k ,  (17) 
M)(1)( '))((' ' ×−−+≥ ikisskiik zttctct ii ,  
for all i,k , (18) 
M)()( ''))(('' ' ×−−−×+≥−× iiiisskiiiik rrppttctppct ii ,  
for all i,k , (19) 
 0 Tctik ≤≤ , for all ki, , (20) 
 {0,1}∈kc , for all k , (21) 
 {0,1}∈ikx , for all i,k , (22) 
 {0,1}  ∈ki'iz , for all i,k . (23) 
 The objective function seeks to minimize the total 
costs.  The constraints in (1)~(2) guarantee each 
vehicle starts from the initial node.  The constraints in 
(3) guarantee that the operation io  is scheduled on one 
vehicle exactly once.  The constraints in (4) and (5) 
control that whether vehicle kf  is assigned, if vehicle 
kf  is assigned ( 1=kc ) only when operations are 
scheduled on vehicle kf  ( 1x1 ≥∑ =
I
i ik ).  The 
constraints in (6) ensure that operation io  and 'io  need 
to be scheduled on the same vehicle ( k'iki xx = ) when 
two operations io  and 'io  are belong to the same 
request ( 'ii rr = ).  The number M  is a constant, which 
is chosen to be sufficiently large. 
  
The constraints in (7) and (8) ensure that one 
operation can directly-precede another ( 1  ' =+ kii'kii zz ) 
if two operations io  and 'io  are scheduled on the same 
vehicle kf  ( 1 =kix  and 1 =k'ix ).  The constraints in (9) 
ensure that pickup-operation io  directly-precedes 
delivery-operation 'io  ( kiiz ' =1 and ip =1) when 
operations io  and 'io  are belong to the same request 
with hot-priority ( ih =1).
 
  
The constraints in (10) ensure that at most one 
operation 'io  could be scheduled after operation io  
directly for all the operations scheduled on the vehicle 
kf .  The constraints in (11) ensure that at most one 
operation 'io  could be scheduled precede operation io  
directly for all the jobs scheduled on the vehicle kf .  
The constraints in (12) state that there should exist 
1-N  directly-precedence variables, which set to one, 
on the schedule with N  operations.
 
  
The constraints in (13) control the upper bound 
on the completion time of each route.  The constraints 
in (14) assign the initial vehicle load kcw0  which 
equals to zero.  The constraints in (15) define vehicle 
load ikcw  upon operation io  is completed by vehicle 
kf .  The constraints in (16) control the upper bound on 
the load of the vehicle.  The constraints in (17) assign 
the initial completion time kct0  for each vehicle.  The 
constraints in (18) define completion time ikct  upon 
operation io  is completed by vehicle kf .  The 
constraints in (19) ensure that lots must be taken at the 
pickup location before being brought to the delivery 
location.  The constraints in (20) control the upper 
bound on the load of the vehicle.
 
  The computational complexity of the integer 
programming model is as follows.  For a VRP-SSC 
with I  operations and K  vehicles, the integer 
programming model contains K  variables of kc , IK  
variables of ikcw , IK  variables of ikct , IK  variables 
of ikx , and KII 1)( −  variables of k'iiz .  Further, the 
constraint sets in (1), (4), (5), (12), (13), (14), and (17) 
each contains K  equations, the constraint sets in (3) 
each contains 1−I  equations, the constraint sets in (2) 
and (6) each contains KI )1( −  equations, the constraint 
sets in (16) and (20) each contains IK  equations, and 
the constrain sets in (7)~(11), (15), (18), and (19) each 
contains KI-I 1)(  equations.  Thus, the total number of 
variables is KIKKI ++ 22  and the total number of 
equations is 154-8 2 −++ KIIKKI . 
4 A Numerical Example 
 Considering the following VRP-SSC example 
comprises 12 requests, 10 sites, including one depot 
node, being served by five homogeneous vehicles ( 1f , 
Table 1. traverse time matrix 'jjtt  
 0v          
1v  5 1v         
2v  35 25 2v        
3v  5 35 35 3v       
4v  15 40 5 10 4v      
5v  15 5 20 5 40 5v     
6v  10 15 25 25 25 25 6v    
7v  5 35 25 35 20 15 10 7v   
8v  10 40 20 30 40 30 5 20 8v  
9v  10 35 20 15 30 30 30 25 20 
 
 
 
Table 2. Request related information 
ir  in  isp  isd  priority 
1r  3 2v  3v  Hot 
2r  5 2v  8v  Hot 
3r  6 0v  1v  Hot 
4r  7 3v  4v  Normal 
5r  3 4v  1v  Normal 
6r  3 2v  6v  Normal 
7r  2 2v  9v  Normal 
8r  5 8v  9v  Normal 
9r  4 7v  1v  Normal 
10r  3 3v  1v  Normal 
11r  3 4v  7v  Normal 
12r  6 6v  1v  Normal 
 
 
 
Table 3. Route for vehicle 2f  information 
sequence site ir  activity 
Completion 
time 
Vehicle 
load 
1 0v  － － 0 0 
2 4v  11r  pickup 15 3 
3 7v  
11r  delivery 35 4 
9r  pickup 
4 1v  9r  delivery 70 0 
 
 
國科會補助計畫衍生研發成果推廣資料表
日期 2010年10月25日
國科會補助計畫
研發成果名稱
發明人
(創作人)
技術說明
技術移轉可行性及
預期效益
技術/產品應用範圍
產業別
計畫名稱:
計畫主持人:
計畫編號: 學門領域:
(中文)
(英文)
成果歸屬機構
(中文)
(英文)
具時窗限制的多廠間收送貨問題之研究
賴春美
98 -2221-E -269 -010 - 作業研究
具時窗限制的多廠間收送貨的車輛排程方法
Vehicle scheduling methos for the multi-site pickup and delivery
problem with time window
遠東科技大學 賴春美
考量多廠間頻繁且複雜的收送貨活動，其中並包括運送時窗決策隨顧客訂單等
級不同而異。因此，具時窗限制的多廠間收送貨問題具有產品／車輛相容、收
貨與送貨、多部車、車輛產能及多訂單等級時窗等限制，其求解比傳統收送貨
的車輛排程問題更加困難。本研究探討具實務需求之具時窗限制的多廠間收送
貨問題，提出混和整數規劃以指派各訂單之運送車輛及收送貨排程。由於此問
題是NP-hard問題，當處理實務的大問題時，通常無法在合理時間內求得最佳解
，本研究提出啟發式演算法，依據各訂單等級特色以最低insertion cost來產
生起始解，再利用exchange的改善程序來改善排程，以使在合理時間內求得近
似解。本研究針對所提出演算法，利用學術上及實務上的問題進行測試，結果
顯示本演算法可有效且有效率的安排車輛收送貨。
Due to the complexity and cost of transportation and distribution
activities, a multi-site manufacturer needs to schedule vehicles for
pickup and delivery effectively and efficiently to increase a
company’s competition edge.  In this research, we consider the multi
-site pickup and delivery problem with time window (MSPDPTW).  Since
the MSPDPTW involves constraints on product/vehicle compatibility,
pickup and deliveries, multiple vehicles, vehicle capacity, and
multiple-priority constraints, it is more difficult to solve than the
classical pickup and delivery problem.  In this research, we
formulate the MSPDPTW as an integer programming problem.  An
efficient heuristic algorithm is also proposed for solving large-
scale problems.  By the execution of this project, the traditional陸上運輸業
多廠投資之半導體產業、LCD、光電等製造業；運輸物流
多廠間物流運輸的複雜性及成本考量，使得公司必須有效且有效率的安排車輛收送貨
以追求競爭力。本計畫考量具時窗限制的多廠間收送貨問題，其在實務上有許多應用
，特別是在半導體製造產業。多廠投資一直是半導體製造產業擴充產能最普遍的做法
，也使得各廠之間因產能支援的晶圓運送、光罩配送及成品入庫等多廠間收送貨活動
更頻繁且複雜。此外，運送時窗決策隨顧客訂單等級不同而異。本研究所提出的車輛
排程方法，有助於提升多廠企業或產業供應鏈間的生產效益及節省物流成本。
註：本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
