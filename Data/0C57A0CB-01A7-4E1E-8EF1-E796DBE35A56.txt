requirement. This system will utilize the movie‘s 
popularity to determine how much bandwidth is needed 
to broadcast the video, designed according to 
our ’Reverse-order Scheduling (ROS)’ broadcasting 
algorithm. It provides a low latency, low buffer 
requirements, and low cost system, and a practical 
application for the existing IPTV architecture, which 
provides users with popular video broadcasting 
services. With our system, users could obtain video 
on demand and other services with terminal units, 
such as computers and set top box, without worrying 
about a very long waiting time. The ROS method 
firstly partitions the video into equal-length 
segments, then divides these segments into groups, 
and finally broadcasts the segments in the same group 
over the same sub-channel in the reverse order of 
their indices. In accordance with our experiment 
analysis, we have been able to reduce the user‘s 
buffer requirements to 36%. When the bandwidth is up 
to 3b (b for consumption rate), we use 300 second(s), 
600s, and 900s length videos for experiment, and get 
the average waiting time of 24s, 47s, and 70s, while 
the maximum buffer size requirement at 28%, 36%, and 
29%. We also tested the waiting time in multi-users 
environment with 2 to 5 clients connecting to the 
server, and the waiting time does not increase too 
much which proved the feasibility of the proposed 
system. 
英文關鍵詞： Average waiting time, Multimedia broadcasting, Buffer 
requirement, Reverse-order scheduling, Video on 
demand 
 
 II
 
目錄 
中文摘要 ................................................................................................................................................. III 
ABSTRACT ........................................................................................................................................... IV 
一、 前言 .............................................................................................................................................. 1 
二、 研究目的 ...................................................................................................................................... 2 
三、 文獻探討 ...................................................................................................................................... 2 
四、 研究方法 ...................................................................................................................................... 8 
五、 實驗結果 ..................................................................................................................................... 17 
六、 結論與建議 .................................................................................................................................. 23 
七、 參考文獻 ..................................................................................................................................... 23 
 
 
 IV
Abstract 
The existing video-on-demand (VOD) techniques usually use a dedicated bandwidth to a single user, and this 
is not only using the bandwidth inefficiently but also increasing the waiting time when multiple users are 
simultaneously raising the same demand for the service and the bandwidth would become insufficient. 
Additionally with a longer waiting time, the users would be less motivated to watch the video. Therefore, how 
to utilize the limited bandwidth to serve more users has always been the subject of academic and industry 
studies. Broadcasting has always been one of the most effective techniques for VOD applications. Traditional 
broadcasting systems broadcast segments of a video periodically on different channels simultaneously. In this 
paper, we have developed a broadcasting based VOD on a single channel with low waiting time and low 
buffer requirement. This system will utilize the movie's popularity to determine how much bandwidth is 
needed to broadcast the video, designed according to our “Reverse-order Scheduling (ROS)” broadcasting 
algorithm. It provides a low latency, low buffer requirements, and low cost system, and a practical application 
for the existing IPTV architecture, which provides users with popular video broadcasting services. With our 
system, users could obtain video on demand and other services with terminal units, such as computers and set 
top box, without worrying about a very long waiting time. The ROS method firstly partitions the video into 
equal-length segments, then divides these segments into groups, and finally broadcasts the segments in the 
same group over the same sub-channel in the reverse order of their indices. In accordance with our experiment 
analysis, we have been able to reduce the user's buffer requirements to 36%. When the bandwidth is up to 3b 
(b for consumption rate), we use 300 second(s), 600s, and 900s length videos for experiment, and get the 
average waiting time of 24s, 47s, and 70s, while the maximum buffer size requirement at 28%, 36%, and 29%. 
We also tested the waiting time in multi-users environment with 2 to 5 clients connecting to the server, and the 
waiting time does not increase too much which proved the feasibility of the proposed system. 
 
Keywords: Average waiting time, Multimedia broadcasting, Buffer requirement, Reverse-order scheduling, 
Video on demand. 
 2
二、 研究目的 
隨著數位電視的進步，隨選視訊已經變成一種可行的服務，但由於頻寬配置的不足，以及業者成
本的考量，因此，目前大多也只局限於使用串流的方式來服務客戶端。根據[1]的研究顯示少數(10到20
部)熱門影片可以滿足八成的客戶端需求，因為資料廣播與客戶端何時到達無關，所以適合作為熱門影
片的傳送方式。傳統的資料廣播機制 [2]-[16]，主要是先將影片分成許多片(segment)，同時在多個資料
頻道上週期性的廣播，其中一個頻道會即時傳送第一個片段，而其他頻道則傳送剩下的片段。當客戶
端想要觀賞影片時，會先下載第一個片段後再開始觀賞。因此，客戶端至多等待第一個片段長度的時
間。當影片開始播放時，客戶端的電腦會從其他頻道下載並緩衝剩餘影片片段依序播放。 
近年來在行動通訊環境上提供多媒體資訊的服務正快速成長，有許多的系統如Wi-MAX、DVB-H、
Wireless LAN等，都可以選擇在單一頻道(single channel)的環境下傳送資料，因此傳統的廣播方法無法
直接應用到單一頻道上廣播影片。最近已有多個針對單一頻道設計的廣播演算法被提出，如 Alternative 
Broadcasting (AB) Method [25],Hopping-Insertion (HI) Scheme [26],和 SingBroad Method [27]等. 
 
利用資料廣播法於隨選視訊上所應注意的地方: 
 客戶端的Average waiting time 
當客戶端提出一需求服務，到正式開始觀賞影片的這段時間稱為等待時間，客戶端的等待時
間長短將取決於伺服器所提供的頻寬，當伺服器所提供的頻寬越大時，將會大幅降低客戶端的等
待時間，一旦等待時間拉長，有可能會降低客戶端的觀賞意願。 
 客戶端裝置的Maximum buffer requirement 
客戶端裝置的緩衝區大小也是值得探討的議題，一但緩衝區不足，就會使得後續的資料片段
無法預存在緩衝區中，進而照成影片的中斷。 
 
根據上述兩點描述，我們可以得知客戶端的等待時間以及最大緩衝需求(Maximum buffer 
requirement)是資料廣播的2個重大議題，因此本計劃宗旨在設計一套低等待時間以及低緩衝需求的演算
法，應用在目前數位電視環境中。具體而言，本計畫具備學理依據，也有應用價值，將可於計畫完成
後，進行商品化包裝，應用於現實生活中，增加實用性。 
三、 文獻探討 
Reverse-Order Scheduling [30]、Video Broadcasting Using Peer-to-Peer Approach [31]與多媒體串流應
用：產品比較與實例分析[28]等三篇論文。 
 Reverse-Order Scheduling 
SingBroad Broadcasting Protocol [32]的基本精神描述如下：把影片切割成 12 1 −−k 個片段。把頻道切
割成等長時槽，每一時槽剛好可廣播一個片段。定義時槽序列SS(α , β )表示α , βα + , βα 2+ …等時槽
的集合，如SS(1, 4)就表示時槽1, 5, 9, 13…等時槽的集合。若以一開始的時槽為第0個時槽，則片段 jiS +2
在{ }120,20)1(2)),1(( −≤≤−≤≤−⋅−⋅+ ii jkikkjiSS 上廣播。客戶端須等到廣播S1的時槽開始才可
開始接收且播放影片，如圖1所示。 
 4
Reception and Playback Protocol 
當客戶端提出請求，並開始播放此部影片開始，直至影片結束期間，需建立一接收規則，客戶端
需依此規則判斷是否接收此片段，這關係到客戶端緩衝區所需下載的最大片段數。其精神如下:從客戶
端提出請求開始，到開始播放影片期間，需先暫存S1片段，當開始播放影片時，再從緩衝區讀出片段
S1來收看，往後，當遇到一尚未接收的片段時，客戶端端會先判斷此片段在下播放前是否來的及再接
收，如果來來的及則在下一次再遇到此片段時再預存至緩衝區中，反之，則需要在此時槽接收此片段，
這個方法可以大幅降低客戶端端的緩衝需求。 
 
<Subscriber Reception and Playback Protocol> 
Initialize one receiving thread to download segments from the single channel and one consuming thread  
to read segments from a subscriber’s buffer and play them in order. The receiving thread starts  
performing the following steps after 1−sT , the beginning of the nearest time slot for broadcasting S1,  
while the consuming thread starts playing the video at sT . 
1. At 1−sT , the receiving thread starts downloading segment 1S . 
2. When the subscriber is watching segment ,1S  if 2S  comes in, then 2S  would be directly 
downloaded. If not, the subscriber has to wait until segment 1S finished playing, and then 2S
 
would be downloaded and watched at the same time. When the subscriber is watching segment 
,1S  if 3S
 
comes in, then it would not be downloaded until the next time slot. 
3. Let pS
 
be the segment that the subscriber is currently playing, and segment yS
 
of group iG  is 
the segment that the subscriber has not received yet. If yp i <⋅+ −323 , segment yS  is discarded; 
otherwise, yS  must be downloaded. 
4. After downloading all segments, the receiving thread terminates. 
<End of Subscriber Reception and Playback Protocol> 
圖 3 Subscriber’s reception and playback protocol. 
 6
當在看前半部的影片前，用戶端下載了恰好一段的片段的時間對應到一個特定區塊。因此緩衝區
所需在T21, T25, T29, T33 和 T37 分別為 1/4(=(12/4)*(1/12))，1/3 (=(16/4)*(1/12))，1/3 (=(16/4)*(1/12))，
1/3 (=(16/4)*(1/12)) 和 1/3 (=(16/4)*(1/12))。在T37後T，用戶端下載了恰好一段的片段的時間對應到一
個特定區塊。因此，T37是一緩衝區需求之轉戾點。 
 Video Broadcasting Using Peer-to-Peer Approach [31] 
本篇論文主要利用事先佈置在各地的內容快取伺服器 (Content Replica/Cache) 來儲存快取影片片
段，並且配合Hot-Video Broadcasting將影片廣播至各區的使用者，經由適當的快取，可以有效的降低連
至影片伺服器所需的頻寬及負載，並且減少影片起始延遲，圖3為熱門廣播法之三層式架構。 
 
 
圖 6 影片廣播的三層式架構 [8] 
 
主要的架構，如圖6分為Directory Service, Cache/Replica Service 及Video Service 三個部份。
Directory Service 負責找出使用者所請求影片所在的伺服器位置，並且將其導向至離本機最近的內容快
取伺服器 (Content Replica)，同時必須告訴新加入的使用者已有哪些人已經取得過該影片，讓使用者可
以向其它人來取得影片的內容。1. 內容快取伺服器 (Content Replica) 負責接受使用者的請求，若請求
的影片已存在快取中，則使用熱門廣播法將影片傳送出去，若影片不在快取中，則從影片所在的伺服
器將影片取回，廣播給使用者，並且快取在系統中，2. 使用者快取 (Peer Cache)，當使用者開始接收
影片後，他也可以成為一暫時性的快取，若有其它使用者進入系統欲收看同一部影片時，便可以將他
已接收過的部份取回，而不用再經過內容快取伺服器；Video Service 負責接收來自內容快取伺服器 
(Content Replica) 的請求，傳送其缺少的影片區段，並且也會根據系統要求，負責將影片主動遞送至各
個內容快取伺服器。 
 8
他們實作出整個系統之雛型，使用兩層式的 DNS 配合 dynamic update 來做為尋找影片和內容快
取伺服器以及尋找其它使用者的方法，並且實作影片伺服器、內容快取伺服器及使用者端的程式，在
網路上實際運作及播放測試。 
 
 多媒體串流應用：產品比較與實例分析 
我們藉由許多串流相關技術 [28]來實作ROS Broadcasting Method，本章節將介紹串流技術包含
Real-time Transfer Protocol(RTP) 、 Real-time Streaming Protocol (RTSP) 、 Session Description 
Protocol(SDP)、Synchronized Multimedia Integration Language(SMIL)，由於一開始實作傾向使用已開發
好的串流Server(ex: Darwin Streaming Server)來做為我們的實驗工具，但Client端的部分需要搭配相對應
的撥放器而無法達成實驗上所需的要求，最後使用自行撰寫的Streaming Server與Client來完成。 
串流媒體是建構在網際網路上的應用，其大致組成元件及流程如圖一所示，首先由媒體擷取裝置
取得數位化的媒體資訊，經過編碼過程產生可以支援串流的媒體格式，再經由串流伺服器透過網際網
路將串流媒體傳送到客戶端，客戶端經過解碼程序後即可播放。 
至於串流媒體在網際網路上的傳輸方式目前主要有兩種方式，一種是以HTTP/TCP 為基礎，另一
種是以RTP/UDP 為基礎。因為以HTTP 為基礎的WWW 是目前網際網路上使用最廣的服務之一，利
用HTTP 協定可以讓串流媒體得以穿過防火牆的阻隔，且將串流媒體放在WWW 上可以讓使用者方便
的取得這些內容，然其缺點在於TCP 通訊協定將會導致傳輸速度的減緩，進而增加串流媒體所需要的
頻寬，且串流資料必須事先放置於網頁上而無法達到真正即時的效果。 
使用RTP/UDP 的優點在於UDP 可以提供較好的傳輸效率，且可以達到真正即時的效果並提供群
播等有效率的傳輸方式，缺點則是必須架設另外的串流伺服器，同時如果有防火牆的問題則需要在防
火牆兩端加裝translator 的設備以便穿過防火牆。 
 
 
圖 9 串流媒體的組成元件 
四、 研究方法 
我們藉由許多串流相關技術 [28]來實作ROS Broadcasting Method，本章節將介紹串流技術包含
Real-time Transfer Protocol(RTP) 、 Real-time Streaming Protocol (RTSP) 、 Session Description 
Protocol(SDP)、Synchronized Multimedia Integration Language(SMIL)，由於一開始實作傾向使用已開發
好的串流Server(ex: Darwin Streaming Server)來做為我們的實驗工具，但Client端的部分需要搭配相對應
 10
 
圖 10 系統拓樸圖 
 
以下為逐一功能與內容: 
Client: 
Client端主要分為三個部分，Player、Client Send、Client Receive，先透過Client Send，Send一個request
給ROS Server再經由Client Receive來接收Streaming Server的串流影片，裡面並包含了一個Thread主要是
在Client Receive不斷的監聽是否Streaming Server是否有Send Request，最後再透過Player來撥放影片。
如圖11 
ROS Server: 
ROS Server端主要分為三個部分，Algorithm、ROS Server Send、ROS Server Receive，並擁有兩個
Thread，一個Thread主要是在ROS Server的Algorithm是不斷地將ROS的演算法進行排程並不斷地作廣播
的動作，另一個Thread是不斷的監聽是否有client連線，當Client連線到ROS Server並由ROS Server 
Receive接收，就看User是在哪個時間點進入，並透過ROS Server Send來傳送至Streaming Server串流影
片。如圖11 
Streaming Server: 
Streaming Server端主要也是分為三個部分，Streaming、Streaming Server Send、Streaming Server 
Receive，Streaming Server內也包含兩個Thread，Streaming Server Receive模組包含一個Thread，是不斷
的監聽是否有ROS Server送出Request，並得知ROS Server傳來看要串流哪格片段的影片，進而透過
Streaming來串流影片，再由Streaming Server Send來傳送至Client。如圖11 
 12
            if(i==1) 
   { 
      this.Groups_Array[i]=Integer.toString(i)+" "; 
   } 
   else if (i==2) 
   { 
String  movie_clips[]= this.Groups_Array[i-1].split(" "); 
     
    for(int j=i;j>=1;j--) 
 this.Groups_Array[i]+=Integer.toString(Integer.parseInt(movie_clips[0])+j
)+" "; 
    End for 
   } 
   else if (i>2)//3*2k-2 
  { 
Stringmovie_clips[]=this.Groups_Array[i-1].split(" "); 
     
    int temp=i-2; 
     
    temp=(int)Math.pow(2,temp); 
     
    first=3*temp; 
    for(int j=first;j>Integer.parseInt(movie_clips[0]);j--) 
     this.Groups_Array[i]+=j+" "; 
    End for     
  } 
  End for 
} 
3. Movie_Chips將 Group所傳來的陣列值進行排序，排序完成後就為 ROS 演算法的
排成，並在將其排成傳至一個 public function “Get_Movie_Chips”。 
    for(int i=1;i<Groups_Count.length;i++) 
   Groups_Count[i]=1; 
   System.out.println("Groups_Count["+i+"]"+Groups_Count[i]); 
   String[] Temp_Segement=this.Groups_Array[i].split(" "); 
   Movie_Chips_Temp+=Temp_Segement[Groups_Count[i]-1]+" "; 
 End for 
     while(true) 
   for(int i=1;i<Groups_Count.length-1;i++) 
    if(Groups_Count[i]==Groups_Count[i+1]) 
     G_C++; 
 14
    if (Temp_Segement.length==Groups_Count[i]) 
    { 
     Groups_Count[i]=1; 
    } 
    else 
    { 
     Groups_Count[i]++; 
    } 
    Movie_Chips_Temp+=Temp_Segement[Groups_Count[i]-1]+" "; 
   End for 
   if (G_C==(Groups_Array.length-2)) 
    Groups_Counts++; 
    
   if(Groups_Counts==2) 
    break; 
 End while 
6. 最後，透過 Get_Movie_Chips讓其他的 Function得到其排程演算法。 
    int[] get_Movie_Chips() 
 { 
  return Movie_Chips_I; 
 } 
<End of ROS Server Algorithm Protocol> 
 
 
<ROS Server Receive Protocol> 
三個系統模組內都各有一個  Receive Protocol 裡面的功能大同小異，在這說明本系統內的 
Receive Protocol: 
1. 當各模組啟動後，會先設定 Receive 監聽的 port。 
2. 並不斷監聽是否有連線需求。 
3. 當連線完成後並進行各模組的功能。 
4. 最後並進行 Send Protocol。 
ROS_Server_Receive() 
 { 
   try  
   { 
    System.out.println(ROS_Port); 
    server = new ServerSocket(ROS_Port);  
圖 13 ROS Server Algorithm Protocol 
 16
            }  
        End While    // TODO Auto-generated method stub 
} 
<End of ROS Server Receive Protocol> 
 
 
<ROS Server Send Protocol> 
三個系統模組內都各有一個 Send Protocol 裡面的功能大同小異，在這說明本系統內的 Send 
Protocol: 
1. 當 Receive Protocol一接收到其他模組的Send時，就會啟動模組內的主要功能。     
ROS_Server_Send(String send_string) 
 {  
     Socket client = new Socket(); 
        InetSocketAddress isa = new InetSocketAddress(IP, ROS_Port2); 
        try 
        { 
         client.connect(isa, 10000); 
         BufferedOutputStream out = new     BufferedOutputStream(client.getOutputStream()); 
         in = new java.io.BufferedInputStream(client.getInputStream()); 
          
         byte[] b = new byte[1024]; 
         String data = ""; 
            int length; 
             
           // Send_String="Movie_"+r.Get_number()+".Mjpeg"; 
            // 送出字串 
           if(first) 
            { 
             ROS_Server r=new ROS_Server(); 
             String temp=r.Fragment_number()+","; 
             temp+=send_string; 
             out.write(temp.getBytes()); 
             first=false; 
            } 
            else 
            { 
             out.write(send_string.getBytes()); 
            } 
         out.flush(); 
圖 14 ROS Server Receive Protocol 
 18
硬體設備: 
依據系統開發流程設計，規劃以以反向序列廣播法建構隨選視訊伺服器整合實作系統架構，各項
實作環境中使用的硬體規格及設備如下： 
 Server端的PC: CPU為Intel(R) Core(TM)2 Quad CPU Q9500 @2.83GHz 2.83GHz、RAM為2.00GB、
網卡為Intel ( R ) 82567LM-3 Gigabit Network Connection。 
 Clinet端的PC: CPU為Pentium 4 cpu 3.00GHz 2.99GHz、RAM 為1.00GB、網卡為Broadcom 
NetXtreme Gigabit Ethernet。 
開發環境: 
以下為系統開發與建置時所使用的軟體及API(Application Programming Interface): 
Eclipse (eclipse-jee-galileo)：撰寫JAVA、Servlet等一些程式的開發工具。 
1. Windows 7 Ultimate：架伺服器所放置的系統，方便管理者管理伺服器上的資訊與資料。 
2. Windows XP: Client端的系統，由於Client端較不需太大的資源，本研究選用Windows XP做為
Client端的系統 
3. 影片格式:MJPEG。 
 
 
圖 16 Client 
 
圖 17 Streaming Server 
 20
 
 
圖 21. Buffer Requirement(片長 900s) 
 
表 1. Waiting Time 
 
片長 300s 片長 600s 片長
900s 
第一次 27.312 49.287 73.093 
第二次 24.467 50.546 72.047 
第三次 23.094 45.437 70.157 
第四次 23.672 46.547 69.625 
第五次 22.25 46.266 70.0 
第六次 31.234 46.438 69.156 
第七次 22.5 46.891 69.453 
第八次 25.532 51.453 69.172 
第九次 22.594 45.593 69.265 
第十次 25.0 46.266 69.437 
平均(單
位:秒) 
24.7655 47.4724 70.1405 
 
 
圖 22 Transmission rate (片長 300s) 
 22
 
表 2 600 秒影片多人使用數據(單位:Sec) 
 使用者 
次數 
2人 3人 4人 5人 
第一次 49.287 52.456 55.466 50.667 
第二次 50.546 53.778 52.88 54.56 
第三次 47.687 52.786 51.46 52.778 
第四次 45.427 51.672 55.457 56.467 
第五次 49.067 50.69 50.56 53.556 
平均 48.4028 52.276 53.16474 53.6056 
 
表 3 900 秒影片多人使用數據(單位:Sec) 
 使用者 
次數 
2人 3人 4人 5人 
第一次 69.154 23.582 31.346 32.564 
第二次 69.188 24.776 29.787 30.676 
第三次 72.303 25.074 30.465 32.65 
第四次 69.679 26.468 28.575 28.447 
第五次 70.402 24.78 27.45 29.458 
平均 69.9452 71.965 75.1082 77.1706 
 
 24
[13]
 
Y. C. Tseng, M. H. Yang, C. M. Hsieh, W. H. Liao, and  J. P. sheu, Data broadcasting and seamless 
channel transition for highly demanded videos, IEEE Transactions on Communications 49 (2001) 
863-874. 
[14]
 
W. D. Chien, Y. S. Yeh, and J. S. Wang, Practical channel transition for near-VOD services, IEEE 
Transactions on Broadcasting 51 (2005) 360-365. 
[15]
 
C. J. Wu, Y. W. Chen, J. H. Yan, and Y. L. Wang, Seamless channel transition for slotted generalized 
fibonacci broadcasting, Multimedia Systems 13 (2007) 223-233. 
[16]
 
L. S. Juhn and L. M. Tseng, “Fast data broadcasting and receiving scheme for popular video services,” 
IEEE Transactions on Broadcasting, vol. 44, no. 1, pp. 100-105, Mar 1998. 
[17]
 
Y. C. Tseng, M. H. Yang and C. H. Chang, “A recursive frequency-splitting scheme for broadcasting hot 
videos in VOD service,” IEEE Transactions on Communications, vol. 50, no. 8, pp. 1348-1355, Aug 
2002. 
[18]
 
J. -F. Paris, “A simple low bandwidth broadcasting protocol for video on demand,” Proc. 7th Int. Conf. 
on Computer Communications and Networks, pp. 690-697, Oct 1999. 
[19]
 
H. I. Kim and S. K. Park, “A hybrid video-on-demand data broadcasting and receiving scheme of 
harmonic and staggered schemes,” IEEE Transactions on Broadcasting, vol. 54, no. 4, pp. 771-778, Dec. 
2008. 
[20]
 
Y. W. Chen, “An enhanced recursive frequency splitting broadcasting algorithm for near 
video-on-demand services,” Information Processing Letters, vol.92, no. 6, pp. 299-302, 2004. 
[21]
 
W. D. Chien, Y. S. Yeh, and J. S. Wang, “Practical channel transition for near-VOD services,” IEEE 
Transactions on Broadcasting, vol. 51, pp. 360-365, 2005. 
[22]
 
H.-F. Yu, P. –H. Ho, and H. –C. Yang, “Generalized sequence-based and reverse sequence-based models 
for broadcasting hot videos,” IEEE Transactions on Multimedia, vol. 11, no. 1, pp. 152-165, Jan. 2009. 
[23]
 
H.-F. Yu, H.-C. Yang, and L.-M. Tseng, “Reverse fast broadcasting for video-on-demand applications,” 
IEEE Transactions on Broadcasting, vol. 53, no. 1, pp. 103–111, March 2007. 
[24]
 
H.-F. Yu, “Hybrid broadcasting with small buffer demand and waiting time for video-on-demand 
applications,” IEEE Transactions on Broadcasting, vol. 54, no. 2, pp. 304-311, June 2008. 
[25]
 
T. Yoshihisa, M. Tsukamoto, and S. Nishio, “A scheduling scheme for continuous media data 
broadcasting with a single channel,” IEEE Transactions on Broadcasting, vol. 52, no. 1, pp. 1-10, march 
2006. 
[26]
 
T. Yoshihisa, M. Tsukamoto, and S. Nishio, “A scheduling protocol for continuous media data 
broadcasting with large-scale data segmentation,” IEEE Transactions on Broadcasting, vol. 53, no. 4, pp. 
780-788, Dec. 2007. 
[27]
 
Y. W. Chen and C. Y. Hsieh, “SingBroad: A scheduling scheme for broadcasting continuous multimedia 
data over a single channel,” Computer Networks, vol. 53, no. 9, pp. 1546-1554, June 2009. 
[28]
 
涂國祥
 
且
 
林盈達, “多媒體串流應用：產品比較與實例分析” 
[29]
 
"Streaming Video with RTSP and RTP," [Online]. Available: 
http://www.csee.umbc.edu/~pmundur/courses/CMSC691C/lab5-kurose-ross.html#appendix 
[30]
 
. B.-S. Wu, C.-C. Hsieh and Y.-W. Chen, "A Reverse-order Scheduling Scheme for Broadcasting 
Continuous Multimedia Data over a Single Channel," IEEE Transactions on Broadcasting, vol. 57, no. 3, 
pp. 721-728, Sep. 2011. 
 1
國科會補助專題研究計畫項下出席國際學術會議心得報告 
日期： 101 年 7 月 25 日 
一、參加會議經過 
第一次參與國際性的論文會議，與台灣、日本、韓國、泰國等國多位學者進行學術上的交流，論文
報告排在 7/17 大會第三天早上第三個 Section，由於是第一次參加研討會，對於學生來說，真的是大
開眼界，能蒐集到數量如此多的論文再將之集結成冊，可見主辦單位之用心，再者也吸引許多國際
人士來參與 ITC-CSCC 2012 這一年一度的學術盛會，從中觀察出日本舉辦研討會的經驗與吸引國際
期刊、研討會於日本舉行的實力，瀏覽論文集，也可以發現論文的品質也不錯，一直以來日本學者
的研究能力，於國際舞台上也是引人注目，對於日本學者提出的方法與實用性感到很有興趣，另也
有大企業的支持也是主因，東芝(TOSHIBA)研發中心也致力於 High Efficiency Video Coding (HEVC)
的研究發展給予相當的支援，希望帶給人們更好的視覺享受。 
 
二、與會心得 
由於是第一次參加研討會，學生心裡特別感到激動與震撼。先從舉辦地區談起，札幌舉辦國際性的
研討會會議，可見其軟硬體實力，而這僅是日本一個地區即有如此的實力，如果再放眼全日本地區，
真的可以想像日本這個科技大國的實力。本次研討會包含(1)電路與系統(2)計算機(3)通訊技術三個部
分來探討，讓世界各國的人才有著合作和人員交流的極好機會。影音傳播數位化為當前發燒的議題，
其研究方針牽扯到很多的領域，像是影像處理、傳輸方式、影音播放軟體等，雖然這些科學已經發
展很久，但是目前依使用者的立場於網路上觀賞影片，傳輸速度、影片轉換時的影像誤差或是放大
影像後出現的模糊情形，都是必須克服的問題。因此電腦視覺其實還有很多的研究可以進行探討，
且此類型的研究範圍相當廣泛。目前世界上有相當多的研究機關甚至是營利單位，都在積極的投入
計畫編號 NSC 100-2221-E-036-027 
計畫名稱 數位電視廣播環境下之單一頻道隨選視訊之研究與實作 
出國人員
姓名 
陳祥維 
服務機構
及職稱 
大同大學資訊工程系研究生 
會議時間 
101年 07月 15日
至 
101年 07月 18日 
會議地點 
日本北海道札幌 
會議名稱 
(中文) 國際技術會議上的電路/系統，計算機和通信 
(英文) Information on International Technical Conference on Circuits/Systems, 
Computers and Communications 2012( ITC-CSCC 2012) 
發表論文
題目 
(中文)以反向序列廣播建構隨選視訊伺服器 
(英文) An Implementation of ROS Scheme for Video Broadcasting over a Single 
Channel 
 3
ITC-CSCC 2012 接受函 
 
 5
 
 7
 
 
 
100 年度專題研究計畫研究成果彙整表 
計畫主持人：謝禎冏 計畫編號：100-2221-E-036-027- 
計畫名稱：反向序列廣播之單一頻道隨選視訊研究與實作 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 1 1 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 1 1 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 1 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
