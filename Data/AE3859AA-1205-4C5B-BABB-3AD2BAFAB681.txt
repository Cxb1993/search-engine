低功率預先計算內容可定址記憶體之設計與合成 (II) 
“Synthesis and Design of Low-Power Pre-computation-Based Content-Addressable Memory (II)” 
計畫編號：NSC 97-2221-E-11-141 
執行期間：97 年 8 月 1 日 至 98 年 7 月 31 日 
主持人：國立臺灣科技大學 電子工程系 阮聖彰 副教授 
 
中文摘要 
在此計畫中，我們提出了一個名為“區塊邏輯選擇
(Gate-Block Selection)＂的演算法。此演算法的最大目
的在於可針對特定的資料型態(例如：嵌入式系統等應
用 ) 去 合 成 預 先 計 算 內 容 可 定 址 記 憶 體
(Pre-computation-Based CAM, PB-CAM)內的特徵值擷
取器，使其能夠減少在進行資料比對時所需要的次數，
進而達到節省功率的目的。實驗結果顯示，對於特定的
資料型態而言，我們所提出的方法和“數一 (1’s 
Count)＂法相比，大約可減少 18.21%的資料比對次數。
為了進一步驗證我們所提出的方法的功率效能，我們在
台積電 0.35μm 的製程下，利用 Spice 去實現整個預先
計算內容可定址記憶體，並且使用 Nanosim 去模擬整個
系統的功率消耗。模擬的結果顯示，和“數一＂法相
比，採用我們所提出的方式的可以節省 16.75%的功率
消耗。 
 
Abstract 
This project presents a gate-block selection algorithm, 
which can synthesize a proper parameter extractor of the 
pre-computationbased content-addressable memory 
(PB-CAM) to enhance power efficiency for specific 
applications such as embedded systems, microprocessor 
and SOC, etc. Furthermore, a novel CAM cell design with 
single bit-line is proposed. The proposed CAM cell design 
requires only one heavy loading bitline and merely is 
constructed with eight transistors. The whole PB-CAM 
design was described in Spice with TSMC 0.35μm 
double-poly quadruplemetal CMOS process. We used 
Synopsys Nanosim to estimate power consumption. With a 
128 words by 32 bits CAM size, the experimental results 
showed that our proposed PB-CAM effectively reduces 
18.21% of comparison operations in the CAM and saves 
16.75% in power reduction by synthesizing a proper 
parameter extractor of the PB-CAM compared with the 1’s 
count PB-CAM. This implies that our proposed PB-CAM 
is more flexible and adaptive for specific applications. 
 
Introduction 
Content-addressable memory (CAM i.e. fully 
associative cache) is a storage device, which provides an 
efficiently fast data-search function. Due to the high-speed 
data-search capability of CAMs, it is used in a wide 
variety of applications requiring high-speed search such as 
translation lookaside buffers (TLB) [1], branch target 
buffers (BTB) [2], internet router [3], and data 
compression [4]. When a CAM performs a search 
operation, a new search data is sent to the memory array 
and is compared simultaneously with entire memory array. 
that, depending on search and stored data, one or more 
matching results indicate which stored data is a complete 
match with the input Therefore, a CAM provides a speed 
performance advantage over other memories. However, to 
achieve an effective data-search function, the data 
comparison architecture of CAMs is usually implemented 
in parallel operation structure. Power consumption is 
always an important concern when designing CAM 
circuitry. 
In the past decade, many articles have been devoted 
to the study of CAMs for low-power, in which power 
reduction has focused on the circuit and architecture 
domains [5]. Several techniques on reducing power 
consumption at circuit level have focused on reducing 
match-line (ML) power such as lowering the voltage 
swing of ML [6]–[7], reducing the switching capacitance 
on MLs by using the NAND ML architecture [8], and 
reducing the switching activity of MLs [9]. In addition, 
selective pre-charge is perhaps the most common method 
used to save power on MLs [10]–[12], since it is simple 
to implement. Although these techniques effectively save 
power, the power consumption of CAMs is still high 
compared with conventional memories (DRAMs and 
SRAMs). Meanwhile, research in CAM system designs for 
power efficiency at the architectural level continues to 
increase. For example, one architectural concept for saving 
power is to change the encoding of stored data [13]. 
Recently, pre-computation technique has been 
received as one of the most effective approaches for 
low-power designs. Pre-computation-Based CAM 
(PB-CAM) stores extra information along with data used 
in the data searching operation to eliminate most of the 
unnecessary comparison operations, thereby saving power. 
The pre-computation approach of [14] adopts the 1’s count 
function to extract the extra information from input data. 
Moreover, the authors proposed a specific CAM cell 
design to further reduce power consumption, but it is only 
suitable for the 1’s count PBCAM. 
In this project, we propose a gate-block selection 
algorithm to synthesize a proper parameter extractor of the 
PBCAM to reduce the number of comparison operations in 
the data comparison process for specific applications. The 
proposed approach reduces the number of comparison 
operations required than that of [14], which means we can 
reduce the number of search operations in data memory in 
Fig. 1. Furthermore, we present a novel CAM cell design 
  
Block-XOR PB-CAM 
In order to improve the deficiencies of the 1’s count 
approach, we have proposed the block-XOR approach to 
eliminate the normal distribution characteristic for random 
input data resulting from the 1’s count approach, and to 
reduce the delay and area of the parameter extractor of the 
1’s count PB-CAM [15]. In [15], we used several XOR 
gates instead of the 1’s counter to generate the parameter 
as shown in Fig. 3. For fair comparison, the same bit 
length of random input data and the parameter are set (15 
bits and 4 bits). Certainly, the block-XOR parameter 
extractor is preferred in terms of the area, power, and 
speed over those of the 1’s count parameter extractor 
implemented by 16 full adders. Moreover, according to the 
operation characteristic of XOR gate, Table 2 lists the 
number of data related to the same parameter and their 
average probabilities for 15-bit random input data. Each 
bit of parameter data are related to 3 or 4 bits of input data. 
For example, P3 related to D14, D13, and D12. There are 8 
combinations of input data (which are 000, 001, ..., 111) 
and 4 of them will generate 0 and the other 4 combinations 
will generate 1 as the result of P3. In Table 2, 4x8x8x8 
means 4 combinations will cause P3 to be 0 or 1 and 8 
combinations cause P2 to be 0 or 1, and so are the P1 and 
P0. As can be seen from Table 1 and Table 2, although the 
block-XOR approach is better than the 1’s count approach 
only for parameters are ranging between 5 and 10, we 
must draw attention to the fact that the total probability of 
these parameters occurs is 88%. Note that when the bit 
length of random input data is increased, the total 
probability of the failed parameters is increased as well, 
this is because the 1’s count approach results in the normal 
distribution characteristic. The detailed treatment can be 
found in [15]. However, the data distribution 
characteristics are specific rather than random for most 
real applications. 
 
 
 
Proposed Approach 
Parameter Extractor Architecture 
In order to make the parameter extractor of the 
block-XOR PB-CAM more adaptive for specific data type, 
we take into account the characteristic of the different 
logic gates to synthesize the parameter extractors for the 
different data types. As can be seen in Fig. 3, suppose that 
the input bits of each partition block are set to l, the bit 
length of the parameter (i.e. the number of blocks) will be 
[n/l], where n is the bit length of the input data. We 
observe that when the input bits of each partition block are 
decreased, the mismatch rate and the number of 
comparison operations in each data comparison process 
will be decreased as well (this is because that the 
parameter combinations are increased). Although we can 
decrease the mismatch rate and the number of comparison 
operations in each data comparison process by increasing 
the bit length of the parameter, the size of the parameter 
memory must be also increased. Therefore, the power 
  
the PB-CAM are the same. Therefore, to reduce the 
complexity of our proposed algorithm and enhance the 
performance of the parameter extractor, our proposed 
algorithm only selects NAND, NOR, and XOR gates to 
synthesize the parameter extractor for our implementation. 
This is because that NAND and NOR are better than AND 
and OR in terms of the area, power, and speed. Based on 
this mathematical analysis above, Fig. 6 shows our 
proposed gateblock selection algorithm. Note that when 
the input data is random, the synthesized result will be the 
same as the block-XOR approach. In other words, the 
block-XOR approach is a subset of our proposed 
algorithm. 
 
An Example 
In order to clearly understand our proposed algorithm, 
we give a simple example to illustrate the synthesis 
procedure of the parameter extractor as shown in Fig. 7. In 
this example, a 4-bit data is assigned as input data. 
Because the input data is only 4 bits, we set the input bits 
of each partition block to 4 and the levels in each partition 
block equal [log24] (i.e. two levels). First, we use three 
basic logic gates (NAND, NOR, and XOR) to generate the 
parameters for D1D0, and then record their generated 
parameters for each pattern as shown in Fig. 7 (a). After 
that, according to Equ. 5, we calculate the average number 
of comparison operations Cavg for each logic gate. 
Obviously, NAND gate is the best selection for D1D0, 
hence NAND gate is selected as a part of the parameter 
extractor. Similarly, NOR gate is selected to generate the 
parameter for D3D2 (see Fig. 7 (b)). Now, the parameter  
 
bits is 2, which is greater than [4/4] (expected bit lengths 
of the parameter). According to the proposed algorithm, 
we repeat Step 1 to Step 3 to determine the parameter bits 
for the next level. As shown in Fig.7 (c), XOR gate is the 
best selection for Y1Y0. Through the algorithm, the 
generated parameter is only 1 bit presently, which is no 
longer greater than [4/4], hence the synthesis procedure of 
the parameter extractor is done. Finally, Fig. 7 (d) shows 
the synthesized parameter extractor for the input data. We 
show a full size synthesized parameter extractor for the 
benchmark blowfish as an example in Fig. 8. 
 
Circuit Design 
CAM Word Structure 
In conventional CAMs, the circuit design of the CAM 
word structure uses a dynamic CMOS circuit to improve 
entire system performance and hardware cost [16]–[18]. 
Fig. 9 shows a traditional dynamic design of the CAM 
word structure. During operation phase, the output node 
(Match Sense Node) is pre-charged to Vdd by pMOS1, and 
conditionally dis-charged by both nMOS1 and nMOS2 
connected to ground. Obviously, the output node is 
charged and discharged at every cycle except for ML, 
hence it consumes a large mount of power dissipation. In 
 
nMOS3 of each CAM cell maintains off, then the ML will 
keep at a high value to indicate a data match result; 
otherwise, the signal of the ML is dis-charged to low value 
(i.e. a mismatched result). Table 4 shows the truth table of 
the typical, the specific, and our proposed CAM cell 
designs. 
Note that the nMOS3 of the proposed CAM cell can 
not be turned OFF completely due to the pMOS1 will 
transmit ‘Vthp’ to the gate of the nMOS3, when Qi and BLi 
are both equal to zero. It results in the voltage of ML 
dis-charging to low value slowly if the CAM word 
structure is designed by dynamic CMOS. However, the 
CAM word structure of our PB-CAM uses the static 
pseudo-nMOS design so that this condition can be 
eliminated by adjusting the transistor width of pMOS1 and 
nMOS2 to proper size in Fig. 10. 
 
Experimental Results 
In order to prove the proposed pre-computation 
approach reducing the number of comparison operations in 
the data comparison process, we simulated some 
benchmarks (Mibench (32-bit) [21]) for the 1’s count, the 
block-XOR, and our proposed pre-computation 
approaches in C Language for comparison. To minimize 
the CAM cell comparisons for our proposed approach, we 
set the bit length of each partition block to 8 bits (see Fig. 
4). Moreover, for fair comparison, the same bit length of 
the parameter of the block-XOR approach is set as our 
proposed approach. In our experiment, the CAM size is set 
to 128 words by 32 bits. Table 5 presents the number of 
comparison operations required in the data comparison 
process for three pre-computation approaches. Obviously, 
our proposed pre-computation approach effectively 
reduces the number of comparison operations (i.e. filter 
out most unmatched data) for specific applications 
compared with the 1’s count and the block-XOR 
approaches. In detail, compared to the 1’s count approach, 
our proposed approach reduces 21.2% on average of com 
parison operations in the data comparison process that is  
also preferred over the block-XOR approach (15.21% on 
average). 
In order to further verify the low-power efficiency of 
the proposed PB-CAM, we implemented, simulated, and 
compared the power consumption of the 1’s count, the 
block-XOR, and our proposed PB-CAMs. To make the 
comparison fair and accurate, three PB-CAMs were 
described in Spice in TSMC 0.35 μ m double-poly 
quadruple-metal CMOS process. We used Synopsys 
Nanosim to simulate power consumption. To illustrate the 
power consumption of three PB-CAMs in detail, we 
divided the simulation results into three parts (parameter 
extractor, parameter memory, and CAM) for comparison. 
First, Table 6 lists the critical path, cost, power, delay 
and the generated parameter bits of three parameter 
extractors. The “ FA ＂  and “ LG ＂  in Table 6 
represent full adder and logic gate (which is NAND, NOR, 
or XOR), respectively. As shown in Table 6, all features of 
our proposed parameter extractor are superior to those of 
the 1’s count and the block-XOR parameter extractors, 
especially for power consumption and delay. The critical 
[4] K.J. Lin and C.W. Wu, “A low-power CAM design for LZ data 
compression,” IEEE Trans. Computers, vol.49, pp.1139–1145, Oct. 
2000. 
[5] K. Pagiamtzis and A. Sheikholeslami, “Content-addressable memory 
(CAM) circuits and architectures: a tutorial and survey,” IEEE J. 
Solid-State Circuits, vol.41, pp.712–727, Mar. 2006. 
[6] Y.J. Chang, Y.H. Liao, and S.J. Ruan, “Improve CAM Power 
Efficiency Using Decoupled Match Line Scheme,” Proc. Design 
Automation and Test in Europe Conf. (DATE), pp.1–6, Apr. 2007. 
[7] I. Arsovski and A. Sheikholeslami, “A mismatch-dependent power 
allocation technique for match-line sensing in content-addressable 
memories,” IEEE J. Solid-State Circuits, vol.38, pp.1958–1966, Nov. 
2003.  
[8] F. Shafai, K.J. Schultz, G.F.R. Gibson, A.G. Bluschke, and D.E. 
Somppi, “Fully parallel 30-MHz, 2.5-Mb CAM,” IEEE J. Solid- State 
Circuits, vol.33, pp.1690–1696, Nov. 1998. 
[9] I.Y.L. Hsiao, D.H. Wang, and C.W. Jen, “Power modeling and 
lowpower design of content addressable memories,” Proc. IEEE Int. 
Symp. Circuits and Systems (ISCAS), pp.926–929, May 2001. 
[10] A. Efthymiou and J.D. Garside, “A CAM with mixed serial-parallel 
comparison for use in low energy caches,” IEEE Trans. Very Large 
Scale Integration (VLSI) Systems, vol.12, pp.325–329, Mar. 2004. 
[11] N. Mohan and M. Sachdev, “Low power dual matchline ternary 
content addressable memory,” Proc. IEEE Int. Symp. Circuits and 
Systems (ISCAS), pp.633–636, May 2004. 
[12] A. Roth, D. Foss, R. McKenzie, and D. Perry, “Advanced ternary 
CAM circuits on 0.13 um logic process technology,” Proc. IEEE 
Custom Integrated Circuits Conf., pp.465–468, Oct. 2004. 
[13] S. Hanzawa, T. Sakata, K. Kajigaya, R. Takemura, and T. Kawahara, 
“A large-scale and low-power CAM architecture featuring a 
one-hot-spot block code for IP-address lookup in a network router,” 
IEEE J. Solid-State Circuits, vol.40, pp.853–861, Apr. 2005. 
[14] C.S. Lin, J.C. Chang, and B.D. Liu, “A low-power 
precomputationbased fully parallel content-addressable memory,” 
IEEE J. Solid- State Circuits, vol.38, pp.654–662, Apr. 2003. 
[15] S.J. Ruan, C.Y. Wu, and J.Y. Hsieh, “Low Power Design of 
Precomputation-based Content Addressable Memory,” IEEE Trans. 
Very Large Scale Integration (VLSI) Systems, vol.16, no.3, pp.331– 
335, Mar. 2008. 
[16] G. Thirugnanam, N. Vijaykrishnan, and M.J. Irwin, “A novel low 
power CAM design,” Proc. IEEE Int. ASIC/SOC Conf., pp.198– 
202, Sep. 2001. 
[17] P.F. Lin and J.B. Kuo, “A 1-V 128-kb four-way set-associative 
CMOS cache memory using wordline-oriented tag-compare 
(WLOTC) structure with the content-addressable-memory (CAM) 
10-transistor tag cell,” IEEE J. Solid-State Circuits, vol.36, pp.666– 
675, Apr. 2001. 
[18] S.C. Liu, F.A. Wu, and J.B. Kuo, “A novel low-voltage 
contentaddressable- memory (CAM) cell with a fast tag-compare 
capability using partially depleted (PD) SOI CMOS 
dynamic-threshold (DTMOS) techniques,” IEEE J. Solid-State 
Circuits, vol.36, pp.712– 716, Apr. 2001. 
[19] C.S. Lin, K.H. Chen, and B.D. Liu, “Low-power and low-voltage 
fully parallel content-addressable memory,” Proc. Int. Symp. 
Circuits and Systems (ISCAS), pp.373–376, May 2003. 
[20] K.H. Cheng, C.H. Wei, and Y.W. Chen, “Design of low-power 
content-addressable memory cell,” Proc. IEEE Int. Midwest Symp. 
Circuits and Systems (MWSCAS), pp.1447–1450, Dec. 2003. 
[21] M.R. Guthaus, J.S. Ringenberg, D. Ernst, T.M. Austin, T. Mudge, 
and R.B. Brown, “MiBench: A free, commercially representative 
embedded benchmark suite,” Proc. IEEE Int. Workshop on 
Workload Characterization (WWC), pp.3–14, Dec. 2001. 
