sponding valid regions in client-side cache is a good way to
solve the above problems [9][10]. A valid region (abbrevi-
ated as VR) of an NN query is a region where the answer of
the NN query is valid. Consider the example shown in Fig-
ure 1(b). If the valid region of object O is cached in the mo-
bile device, the submissions of the second and the third NN
queries are unnecessary since their answers are unchanged
(i.e., still be object O). In fact, the submissions of all NN
queries whose query locations are within the valid region of
object O are all unnecessary. It is obvious that the power
consumption of the mobile devices and the workload of the
LBS server can be both reduced by caching valid regions in
client-side cache.
In addition to caching VRs in client-side cache, caching
VRs in server-side cache is also beneficial. In the real
world, the submissions of NN queries usually have the fol-
lowing localities.
• Spatial locality: The query locations of many NN
queries may be close. For example, passengers may
submit NN queries to search hotels nearby in railway
stations.
• Temporal locality: A set of NN queries with close
query locations may be received by a LBS server
within a short time interval. For example, a large num-
ber of NN queries on hotels nearby will arrive after a
train arrives.
Due to the following localities, we argue that caching valid
regions in server-side cache is able to reduce the load of
the LBS server. However, most LBS servers do not pro-
vide VRs services. Fortunately, researchers have found
that deploying a proxy between clients and servers to store
the VRs is able to decrease the total workload of the LBS
server [2][3]. The proxy builds estimate valid regions (ab-
breviated as EVRs) according to query history, and provides
EVRs to users. Although VRs are not available, the aver-
age waiting time of clients can still be reduced significantly
with the aide of EVRs.
We propose in this paper a design of the proxy which
is able to provide EVRs for NN queries. We also propose
several algorithms to create and extend EVRs. An EVR
degradation algorithm and a cache replacement policy are
proposed to reclaim cache space when the cache space is
insufficient. To evaluate the performance of the proposed
architecture and algorithms, several experiments are con-
ducted. The experimental results show that the our design
and algorithms are able to improve proxy hit rate and reduce
average waiting time.
The rest of this paper is organized as follows. An
overview of related work is given in Section 2. The pro-
posed system architecture is described in Section 3, while
the proposed algorithms are depicted in Section 4. We then
evaluate the performance of the proposed architecture and
O
VR
(a) An example VR
O
EVR
(b) An example EVR
Figure 2. Example VR and EVR
algorithms in Section 5. Finally, Section 6 concludes this
paper.
2 Related Work
In essence, the VR of an object is the Voronoi cell of the
object. Thus, an intuitive approach is to create the Voronoi
diagram of data objects in an off-line manner [10]. The
Voronoi cells (i.e., VRs) of all objects are then extracted
from the Voronoi diagram. When receiving an NN query,
the server checks which Voronoi cell covers the query lo-
cation of the NN query. Then, the corresponding object of
the Vornoi cell covering the query location is the answer of
the NN query. The advantages of the approach are that the
server constructs the Voronoi diagram once and uses many
times. The clients benefit by short response time. However,
when providing k-NN query processing, the server should
predetermine the maximal value of k and then build k-order
Voronoi diagrams. The challenge is that building Voronoi
diagrams of all possible values of k consumes much time
and storage space.
Another approach is to compute the VRs in an on-line
manner [8]. However, when the number of queries in-
creases, the average waiting time of the server becomes
longer, since the implementation of the approach needs ex-
tra I/O and computation resources for calculating the valid
regions of NN queries. Thus, this approach is not suitable
for large-scale LBS servers.
The third approach is to deploy a proxy between the
LBS server and mobile devices. Instead of building VRs
of objects, the proxy builds EVRs according to query his-
tory [2][3]. We use the example shown in Figure 2 to de-
scribe the estimation algorithm proposed in [2]. In Fig-
ure 2(a), each point indicates an NN query whose answer
is object O. It is obvious that these query points are within
the VR of object O. Since calculating the VR of object O is
of high cost, the proxy can establish the EVR of object O by
building the convex hull of these query points. Since each
EVR is totally covered by the corresponding VR, the proxy
2
NN Query <t, (xc,yc)>
NO
2-NN <t, (xc,yc)>
O1(x1,y1) and O2(x2,y2)
cache
O1, EVR(O1)
O1, EVR(O1)
Proxy
YES
EVR(O1)CM: Loop up<t, (xc,yc)>
(1)
CM: Get
<t, (xc,yc)>
(2)
YES
NOQT: Encase NN 
query to 
2-NN query (3)
CM: Looks
up O1
(4) EG: Generate 
EVR of O1
(5)
O1, EVR(O1)
CM: Store/Update 
EVR(O1)(8)
O1, EVR(O1)
CM: Get
EVR of O1
(6)
location: (xc,yc)
LBS Server
EG: Refine 
EVR of O1
(7)
EVR(O1)
O1, EVR(O1)
Figure 5. The activity diagram of the proposed architecture
(xc,yc) is within the cached EVR of object O1 (denoted
as EV R(O1)).
• Action (2): When cache hits, CM first gets EV R(O1)
from the cache, and then finishes the NN query by
transmitting O1 and EV R(O1) to the mobile client.
Otherwise, when cache miss occurs, the proxy will
perform action (3).
• Action (3): When the cache has been missed, QT en-
cases the NN query to a 2-NN query 〈t,(xc,yc)〉 and
transmits the query to the LBS server.
After processing the 2-NN query, the LBS server gets
the two nearest objects, say O1 (with location (x1,y1))
and O2 (with location (x2,y2)), and sends O1, O2 and
their locations to the proxy. Without loss of generality,
we assume that O1 is the nearest object. That is, O1 is
the answer of the NN query 〈t,(xc,yc)〉.
• Action (4): When the proxy receives O1, O2 and their
locations, CM checks whether EV R(O1) is stored in
the cache.
In action (4), if EV R(O1) is not cached, the proxy per-
forms the following actions.
• Action (5): EG creates EV R(O1) with the aide of the
location of O2. The algorithm to create the EVR is
depicted in Section 4.2. Then, the proxy performs ac-
tion (8).
• Action (8): CM stores EV R(O1) into the cache, and
then finishes the the NN query by transmitting O1 and
EV R(O1) to the mobile client.
In action (4), if EV R(O1) is cached, the proxy performs
the following actions.
• Action (6): CM gets EV R(O1) from the cache and sub-
mits it to EG.
• Action (7): EG extends EV R(O1) with the aide of the
locations of O2 and the mobile client (i.e., (x2,y2) and
(xc,yc)). The algorithm to extend the EVR is depicted
in Section 4.3.
• Action (8): CM updates the cached EV R(O1), and
then finishes the the NN query by transmitting O1 and
EV R(O1) to the mobile client.
While action (8) and action (8’) are executed, cache may
be of insufficient space. Thus, a storage release and cache
replacement algorithm is proposed to reclaim cache space.
The details of the storage release and cache replacement al-
gorithm are described in Section 4.4.
4
xnew3 = x1 + r2 cos
(
θ − pi
2
)
ynew3 = y1 + r2 sin
(
θ − pi
2
)
xnew4 = x1 + r2 cos
(
θ +
pi
2
)
ynew4 = y1 + r2 sin
(
θ +
pi
2
)
Finally, the polygon formed by pnew1, pnew2, pnew3 and
pnew4 is the new EVR of O1. The algorithmic form of the
proposed algorithm is given in Algorithm 1.
Algorithm 1 EVR-Creation(r,(xc,yc))
1: Send the 2-NN query 〈t,(xc,yc)〉 to the LBS server
2: Let O1(x1,y1) and O2(x2,y2) be the answer of the LBS
server
3: Form the circle C1
4: Send the 2-NN query 〈t,(x1,y1)〉 to the LBS server
5: Let O1(x1,y1) and O3(x3,y3) be the answer of the LBS
server
6: Form the circle C2
7: Calculate the coordinates of pnew1, pnew2, pnew3 and
pnew4
8: return the polygon formed by pnew1, pnew2, pnew3 and
pnew4
4.3 The Extension of EVRs
As mentioned in Section 4.2, when a cache miss occurs
in the proxy and EV R(O1) is cached, the proxy will encase
the NN query 〈t,(xc,yc)〉 into a 2-NN query (i.e., a k-NN
query where k = 2) and submit the 2-NN query to the LBS
server. When the LBS server responses, the proxy will form
the circle C1 and then perform the following algorithm to
extend the old EV R(O1).
The proxy first retrieves the old EV R(O1) from cache.
As shown in Figure 7(a), let (xold ,yold) be the center
of the old EV R(O1). As shown in Figure 6(b), two
points, pnew1(xnew1,ynew1) andpnew2(xnew2,ynew2), are then
obtained, where the coordinates of these points can be de-
termined as follows.
θ = tan−1
(
xc− xold
yc− yold
)
xnew1 = xc + r1 cos
(
θ +
pi
2
)
ynew1 = yc + r1 sin
(
θ +
pi
2
)
xnew2 = xc + r1 cos
(
θ − pi
2
)
ynew2 = yc + r1 sin
(
θ − pi
2
)
(xold,yold) (xc,yc)
Old EVR
C1
(a)
pnew1
(xnew1,ynew1)
New EVR
pnew2
(xnew2,ynew2)
(b)
Figure 7. Extending EVRs
Finally, the convex hull of pnew1, pnew2 and the vertices of
EV R(O1) is the new EV R(O1). The algorithmic form of the
proposed algorithm is given in Algorithm 2.
Algorithm 2 EVR-Extension(r,(xc,yc))
1: Retrieve the old EVR of O1, say OldEV R, from cache
2: Send the 2-NN query 〈t,(xc,yc)〉 to the LBS server
3: Let O1(x1,y1) and O2(x2,y2) be the answer of the LBS
server
4: Form the circle C1
5: Calculates the coordinates of pnew
6: return the convex hull of the vertices of OldEV R and
pnew
4.4 Storage Release and Cache Replace-
ment
The shortage of storage in proxy server happens when
the amount of data rises up to the boundary. Removing
the less valuable objects is a common approach to solve
the problem of storage shortage. However, removing EVRs
may cause many cache misses, and hence increase average
waiting time.
In light of this, when storage shortage occurs, instead of
removing the less valuable EVR immediately, we first try
6
010
20
30
40
50
60
360 720 1080 1440 1800 2160
Time (sec)
H
it 
R
at
io
 
(%
)
Our approach
Figure 9. Proxy hit rate
0
0.02
0.04
0.06
0.08
0.1
0.12
360 720 1080 1440 1800 2160
Time (sec)
A
v
er
ag
e 
W
ai
tin
g 
Ti
m
e 
(se
c)
Our approach
Figure 10. Average waiting time
When the client receives the answer of the issued query,
it will wait for some time called queryInterval. Each
client moves in a random walk fashion [1]. The speed
and direction of the client are limited by the values of
speedInterval and directionInterval, respectively. Let
databaseServiceTime be defined by the time in which the
database executes each query. Let proxyServiceTime be the
time in which the proxy determines whether or not each re-
ceived query is a cache hit. For better readability, the default
system parameters are listed in Table 1.
Figure 9 shows the proxy hit rate of our approach. It
is obvious that the hit rate is in proportion of the areas
of cached EVRs. Since the proxy will create and ex-
tend cached EVRs according to query history, the areas of
cached EVRs increases as time goes by. In our experiment,
the proxy hit rate increases from 23% to 53% as time goes
by. Figure 10 shows the average waiting time of our ap-
proach. It is intuitive that the average waiting time is in
inverse proportion of proxy hit rate. Thus, the average wait-
ing time decreases as the proxy hit rate increases. In our
experiment, the average waiting time decreases from 0.106
second to 0.068 second, and the reduction of average wait-
ing time increases from 24.29% to 51.43%.
6 Conclusion
In this paper, we proposed a proxy design for NN query
processing in mobile environments. Several algorithms
were proposed to establish EVRs. A storage release and
cache replacement algorithm was also proposed to manage
the content of cache. The experimental results showed that
the proposed architecture and algorithms are able to reduce
the response time of NN queries. Our future work is to ex-
tend the proposed approach to support k-NN queries.
References
[1] T. Camp, J. Boleng, and V. Davies. A Survey of Mo-
bility Models for Ad Hoc Network Research. Wireless
Communication and Mobile Computing, 2002.
[2] X. Gao and A. R. Hurson. Location Dependent Query
Proxy. In Proceedings of the ACM SAC Conference,
2005.
[3] X. Gao, J. Sustersic, and A. R. Hurson. Window
Query Processing with Proxy Cache. In Proceedings
of the 7th IEEE International Conference on Mobile
Data Management, 2006.
[4] G. R. Hjaltason and H. Samet. Distance Browsing in
Spatial Databases. ACM Transactions on Database
Systems, 24(2):265–318, June 1999.
[5] D. L. Lee, B. Zheng, and W.-C. Lee. Data Man-
agement in Location-Dependent Information Ser-
vices. IEEE Pervasive Computing, 1(3):65–72, July-
September 2002.
[6] Z. Song and N. Roussopoulos. K-Nearest Neighbor
Search for Moving Query Point. In Proceedings of the
7th International Symposium on Spatial and Temporal
Databases, pages 79–96, July 2001.
[7] Y. Tao, D. Papadias, and Q. Shen. Continuous Nearest
Neighbor Search. In Proceedings of the VLDB Con-
ference, August 2002.
[8] J. Zhang, M. Zhu, D. Papadias, Y. Tao, and D. L. Lee.
Location-based Spatial Queries. In Proceedings of the
ACM SIGMOD Conference, 2003.
[9] B. Zheng and D. L. Lee. Processing Location-
Dependent Queries in a Multi-Cell Wireless Environ-
ment. In Proceedings of the 2nd ACM International
Workshop on Data Engineering for Wireless and Mo-
bile Access, pages 54–65, May 2001.
[10] B. Zheng, J. Xu, and D. L. Lee. Cache Invalidation
and Replacement Strategies for Location-Dependent
Data in Mobile Environments. IEEE Transactions on
Computer, 2002.
8
