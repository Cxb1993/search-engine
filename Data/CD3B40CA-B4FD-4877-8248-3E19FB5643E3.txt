2力，要比學習複雜的語法與開發工具來的
重要的多。因此，選擇一個互動程度高而
且又能夠以簡單的語法，來訓練初學者邏
輯思考及程式設計能力的程式語言，對提
升程式語言的教學效益來說，便非常的重
要。
除了程式語言與開發環境的不適當，
傳統缺乏與學生互動的授課方式，也降低
了學生的學習效率。原因是學習程式設計
最有效的方式，不是在上課時聽講解，而
是在聽了講解後能透過練習，實際的體會
講授的內容。這種主動式「 learning by
doing」的學習方式，要比被動的聽課，更
適合程式語言的學習。不過，只是給學生
練習的機會還是不夠 ─ 初學者還需要
「個別化的指導」以有效的挪開許多阻礙
學生學習的問題。以初學者在電腦教室上
課的情境而言，一位老師需要同時指導數
十位甚至六、七十位同學，這種師生比過
低的現象，使得許多同學所面對的程式設
計問題，不能得到及時的指示或引導，降
低了學習效率，還可能喪失學習興趣。
為了解決這些程式語言的教學問題，
過去數十年，已經有相當多的 Intellgent
Tutoring System (ITS) 被開發出來 [2,
8]。基本上這些 ITS 系統可以概略的分為
單機版與網路版兩類。學生與單機版系統
的互動方式，完全是透過安裝在學生電腦
上的軟體提供的。網路版的 ITS 系統則容
許學生在任何時間、任何地點與伺服器端
的系統或其他同時上線的學習同伴進行互
動式學習。
然而在這兩種系統中間，還有一種尚
未被嘗試的方式。這種方式是提供給在同
一時間、一起利用電腦教室上課的老師與
學生使用的。這種系統扮演的角色，不單
是幫助學生，更是幫助老師能更有效的成
為所有上課學生的個別指導者。也就是這
個系統的目的是希望能透過網路提供老師
充分的學生學習狀況與個別輔導建議的資
訊，好讓老師能夠快速的幫助學生解決撰
寫程式的過程中所碰到的問題。就學生而
言，這個系統能夠讓每一位上課的同學都
覺得好像有一位專屬的「教師分身」在個
別的指導學生的學習一樣。與傳統一個老
師講課數十位學生聽課的被動式學習方式
相比，這個教學系統能夠讓每一位同學在
「learning by doing」的主動式學習過程
中，得到更多個別化的指導。
(二) 研究目的
「支援教師分身的智慧型程式語言教
學平台」便是在這樣的背景的下所提出的
研究。我們將開發一個 Scheme 程式語言
教學系統。Scheme 是一個能夠與學習者高
度互動的 dynamic type 的程式語言，它的
特色是可以用少數幾個簡單的語法、明確
的語意與高度互動的特性，快速的訓練學
生的邏輯思考能力 [4]。這些基本的語法
與語意，雖然基本但並非低能。這些基本
的語法與語意，還同時具備了足以支援功
能式、命令式與物件導向式程式設計觀念
的高度「表達能力」。這些特色加上其高互
動的特性，使得學生能迅速的得到學習的
回饋與成就感，增進其學習的效率。
「支援教師分身的智慧型程式語言教
學平台」之研究目標是為 Scheme 開發具
備學習能力的半自動偵錯及提供提示功能
的協助教學系統。這個系統能夠提供解答
學生程式設計問題的建議選項。在系統無
法產生適當建議的時候，教師可以用人工
的方式，將解決問題的建議或提示，輸入
系統並且透過網路快速地傳遞給學生。這
樣的安排不但可以讓教師在有限的上課時
間中，增加與學生互動的能力；而且能不
斷的累積系統的知識庫，增加其偵錯及提
供提示的能力，朝著成為全自動系統的目
標邁進。
完成「支援教師分身的智慧型程式語
言教學平台」對改進程式語言的教學而
言，可以有以下許多的好處：
1. 學生可以透過經過設計的程式設計練
習，一次的練習一個能夠日漸累積學習
效益及複雜度的程式，並且經由與系統
及老師的互動，提升學習成效。
2. 教師可以透過監控學生的答題狀況，掌
握學生的學習進度及困難。
3. 改變傳統被動式一對多的授課方式，成
為每一位學生都能分享一位「教師分
4研究所要建置的教學系統，將提供教師一
個簡易的輸入練習題目及解答的界面，以
供系統自動產生具備基本偵錯及諮詢能力
的資料庫。接著師生可以透過實際的使
用，逐步增加系統的知識庫。因此，在系
統初步上線時，我們期待教師需要以人工
回答學生問題的頻率會比較高。然而在經
過不斷的使用後，教師便可以更多的利用
系統自動產生的諮詢或提示來回答學生的
問題。這種「自動學習」的功能是「支援
教師分身的智慧型程式語言教學平台」與
傳統 Lisp-based ITS 的主要的不同之處。
最後一個與本研究相當有關連的研究
是一個用來學習 C、C++與 Java 的基本語
法與語意的程式語言學習網站。這個由
Turingscraft 公司所經營的網站提供了教
授程式語言的教師與學生一個教學管理與
學習的平台。教師可以透過該網站察看學
生的答題狀況，而學生也可以利用該網站
所提供的題目，練習撰寫符合 C、C++或
Java 語法與語意的程式片斷。這個網站的
特色是提供約二百個答案簡短又可以自動
偵測答案是否正確的程式設計練習。這些
練習可以用來訓練學生對程式語言基本語
法與語意的熟練程度。由於答案簡短，所
以學生可以快速的與該網站互動並得到學
習回饋，再加上教師可以將學生的答題狀
況算入學生的成績，使得該網站能夠以商
業化的方式進入許多美國大學的校園。然
而這個網站還沒有做到的地方是訓練學生
學習諸如 recursion、higher-order functions
等比較需要深入思考的程式設計觀念。雖
然如此，該網站還是驗證了「支援教師分
身的智慧型程式語言教學平台」的實用價
值及可行性。
三、系統設計
本研究所建置的「支援教師分身的智
慧型程式語言教學平台」的特色是它能夠
透過師生的使用而不斷的進步。就智慧型
偵錯與指導學生如何撰寫程式的能力而
言，可以因著紀錄學生的問題與教師的回
覆，而不斷的提升。因此，建置一個輸入、
儲存與展示練習題目的環境，然後透過實
際的使用以不斷的改進系統的功能與使用
的便利性，便是完成研究目標的主要方法。
以功能面來區分，「支援教師分身的智
慧型程式語言教學平台」之系統架構可分
為教師端與學生端兩個主要的部份。圖 1
為系統的活動圖，用來表示老師端與學生
端的運作流程。
1. 教師端
教師端的功能有二：編輯或挑選練習
題組，以及回答問題。在老師可以挑選練
習題組之前，老師必須事先編輯好練習題
組之內容。老師編輯練習題組時需要輸入
6輯錯誤診斷之方式為將事先存在於資料庫
中的測試案例丟入學生之程式中執行。若
執行結果與預期結果相同，則表示邏輯上
應該無誤，該學生之作答即可結束。另一
方面，若測試案例之結果有誤，則表示有
邏輯上之錯誤。系統會將學生程式送給一
個邏輯檢查程式(Checker)進行診斷。若
Checker 有找出邏輯錯誤之原因，其提示
訊息將回應給學生。學生可依 Checker 提
示之訊息重新回去修改程式。若 Checker
提示之訊息對學生沒有幫助或者是
Checker 找不到錯誤的原因，則學生可以
再透過網路提出自己所遭遇到的困難，尋
求老師的協助。學生可以選擇依照老師回
覆的訊息回去修改程式，或者繼續提問題。
在以上的幾個步驟中，如何讓Checker
為一個有邏輯錯誤的程式提供有教育意義
的提示，無疑是最困難的部分。我們的構
想是將正確解答建構出一個分析其邏輯架
構的文件。以稍早所提到的 remove 程式當
作範例，其解答經過處理之後，應會產生
如圖 2 之樹狀結構。
圖 2：程式經過處理後之樹狀結構範例
這棵樹提供了可行解的參數的個數、
程式碼中各個條件判斷式所使用到的
procedure 的名稱以及特性。其中 Embed
及 Tail 分別代表 embedded recursion 及 tail
recursion 的呼叫。這些資訊可以用來與學
生的程式比對並將學生程式中缺少的、多
出的或誤用的程序呼叫比對出來，然後產
生一些提示傳送給學生。以下面這個有錯
誤的程式為例：
(define remove
(lambda (a ls)
(cond
((null? ls) '())
((eq? a (car ls)) (remove a (cdr ls)))
(else (cons (car ls) (remove a ls)))))))
Checker 對 這 個 程 式 的 提 示
是：”Embedded recursive call incorrect:
(cons (car ls) (remove a ls))”
四、教學策略
對於程式語言來說，如果完全沒有限
制的話，相同的題目可以有很多種的解答
來得到相同的預期結果。為了可以將學生
的程式儘量控制在有限的範圍內，我們以
「循序漸進式程式練習題組」的教學策略
來搭配「支援教師分身的智慧型程式語言
教學平台」，讓邏輯錯誤判斷與提供有教育
意義的提示變得可行。
「循序漸進式練習題組」之教學策略
是以一連串的練習題讓學生在「learning
by doing」中學習，而這一連串的練習題
聯貫起來可以完成一個教學目標。「循序漸
進式練習題組」是以一支簡單的程式為基
礎，每往下一題只要加入少量的程式碼就
可以得到正確解答。當學生完成整個練習
題組之後，即可以達到該課程進度之目標。
以下是一個學習 abstraction 概念的練
習題組，以一個計算元素個數的程式為範
例。這個範例是在課程進度已經進入到大
約第 5 週，而且學生已經對於 Scheme 語
言和遞迴有基本的認識時所使用。題組中
的第 1 支程式 count-a 是在計算一個 list 當
中有多少個“a”字元。其解答如下：
(define count-a
8圖 3：老師編輯練習題之執行畫面
學生端的部份，依照本研究之系統設
計應包括下列元件：程式編輯器、Scheme
的 interpreter 與執行環境、診斷學生程式
邏輯錯誤的 Checker、以及提問題之訊息
溝通介面。這些元件的實作可以選擇在伺
服器端執行或是在客戶端執行。在客戶端
執行的好處是當同時上線的學生過多時，
可以減少伺服器的負荷；但缺點是必須將
元件下載到客戶端才能執行。在伺服器端
執行的好處是學生只要進入網站即可使
用，不必另外下載程式；但缺點是伺服器
的負荷較重。考量此兩種方式各有其優缺
點，因此本研究分別實作出在伺服器端執
行與在客戶端執行的學生編輯程式介面。
圖 4：在伺服器端執行的程式編輯畫面
在伺服器端執行的學生編輯程式畫面
如圖 4 所示。畫面左邊的樹狀結構列出所
有課程內容(lesson)的名稱，其課程內容是
依照「循序漸進式練習題組」所編排。每
一個課程內容即為一個練習題組，一個題
組內可能包含多個練習題。畫面的中間部
份顯示的是題組中的練習題，一次顯示一
題。學生完成一個練習題之後，即可按“下
一題”按鈕進入下一個練習題。當學生完成
練習題組中的每一個練習題之後，就結束
該課程內容，可以進入下一個課程內容。
當學生在程式編輯區撰寫程式完畢之
後，需要一個 Scheme 的 interpreter 與執行
環境來偵測語法錯誤與執行測試案例。
Second Interpreter of Scheme Code (SISC)
是一個 Java-based 的 Scheme interpreter
[7]，它提供 Scheme 語法的檢查與執行環
境。當學生在程式編輯區中完成練習題之
後即可按“執行”按鈕，系統會將程式編輯
區內的程式送到後端的伺服器以 SISC 檢
查語法並執行。若出現語法上的錯誤，
SISC 會傳回錯誤之訊息顯示在輸出區(圖
4 的下方)。若編譯之結果沒有發現錯誤，
則再將測試案例與學生程式一起丟入
SISC 中執行，看輸出是否與預期結果相
同。如果測試結果與預期結果相同，表示
學生程式在邏輯上應該也沒有問題(完成
作答)。但是，如果測試結果與預期結果不
同，則可以按“檢查”按鈕，將學生的程式
再丟入 Checker 當中診斷其錯誤的原因。
Checker 是由 Scheme 撰寫而成的程
式，老師可因練習題之形態不同而選擇不
同的 Checker 來診斷學生的程式(參照圖 3
接近下方處)。不同的 Checker 其診斷方式
卻大同小異，主要的概念如同第三章所描
述。
圖 5：教師端顯示學生問題之畫面
當學生撰寫程式的過程中碰到阻礙而
且系統自動提示之訊息無法幫助學生解決
問題時，學生可以按“提問”按鈕，透過網
路提出問題給老師。學生提問題時系統將
學生傳送之訊息、學生程式碼、以及電腦
的 IP 位址記錄下來。教師端即可看到學生
所提之問題列表(如圖 5 之後方所示)。老
師選擇要回答某一個問題之後，按查看按
10
為了可以讓老師迅速了解課堂上學生
學習的實際狀況，在教師端的介面中提供
一個顯示學生作答情形的燈號列表(如圖 7
所示)。綠色的燈號表示該學生已經作答完
畢，黃色的燈號表示該學生還沒有完成作
圖 7：學生作答情況燈號列表
答，紅色的燈號號表示該學生是處於閒置
的狀態，黑色的燈號表示該學生未開機。
燈號的判斷原則是：(1)當學生執行程
式完畢，並且通過測試案例的比對無誤，
即表示該學生已經作答完畢，應顯示綠
燈。(2)當學生已經開始作答，即進入未完
成的狀態，應顯示黃燈。(3)當學生已經開
始作答，且經過一段時間(時間長短由教師
端設定)沒有按“執行”按鈕，即示為閒置狀
態，應顯示為紅燈。(4)當學生沒有登入系
統時，視為未開機，應顯示為黑燈。
由這個燈號列表老師可以迅速地了解
學生作答的情況，以決定是否進入下一個
進度的參考。並且可以了解到那一些學生
在學習上有障礙，特別是顯示為紅燈的學
生，可以給予額外的指導。
六、結論
以教授 Scheme 語言而言，「支援教師
分身的智慧型程式語言教學平台」能充分
的支援在同一時間、同一地點一起利用電
腦教室上課的老師與學生能有效的透過
「learning by doing」的學習方式增進學習
的效率。在未來我們期待此平台能夠達到
不同時間、不同地點也不需要教師監控的
「非同步、全自動網路教學」的目標。
以將「支援教師分身的智慧型程式語
言教學平台」推廣到其他課程而言。我們
期望能夠透過物件化及模組化的原則，更
清楚的呈現能夠讓其他相關課程也能夠使
用的架構（framework）。並且實際的以 C、
C++、Java 或是 UML、SQL 等當作範例，
使得更完整的歸納出導入新課程的規範與
作法。
誌謝
感謝行政院國家科學委員會對本研究
經費的補助。計畫編號為 NSC 94-2213-E-
224-037。
參考文獻
[1] H. Abelson, G.J. Sussman, and J. Sussman,
“Structure and interpretation of computer
programs”, MIT Press, Boston, MA., 1984
[2] J.R Anderson and E. Skwarecki,“The automated
tutoring of introductory computer programming”,
Communications of the ACM, Vol. 29, No. 9, pp.
842-849, 1985
[3] M. Clancy, N. Titterton, C. Ryan, J. Slotta and M.
Linn,“New roles for students, instructors, and
computers in a lab-based introductory
programming course”, SIGCSE’03, Reno,
Nevada, February, 2003
[4] R.K. Dybvig,“The Scheme Programming
Language 2nd Edition”, Prentice Hall PTR, New
York, 1996
[5] M. Felleisen, R. B. Findler, M. Flatt and S.
Krishnamurthi,“The TeachScheme! project:
