efficiently provide dynamic update in WSN while 
reducing resource consumption of sensor nodes is the 
main concern of this project. 
In this project, for the resource limited WSN 
environment, we have developed a new and more 
effective diff-based approach named Two-Stage Diff to 
dynamically update software components of sensor 
nodes. This mechanism aims at effectively reducing 
the transmission size of the update data and 
improving the efficiency of the update processing. 
Especially, flash memory characteristics in erasing 
and data writing are considered in the design. 
Because, the diff script format is optimized to 
further decrease the transmitted update data size. 
Such that, our mechanism can reduce the resource 
consumption incurred by dynamic update mechanism and 
be more suitable for resource limited WSN 
environment. 
英文關鍵詞： Wireless Sensor Networks, Operating Systems, Embedded 
Systems, Dynamic Update 
 
 2 
are often of limited energy, memory, 
processing power, and communication 
bandwidth. How to efficiently provide dynamic 
update in WSN while reducing resource 
consumption of sensor nodes is the main 
concern of this project. 
In this project, for the resource limited 
WSN environment, we have developed a new 
and more effective diff-based approach named 
Two-Stage Diff to dynamically update software 
components of sensor nodes. This mechanism 
aims at effectively reducing the transmission 
size of the update data and improving the 
efficiency of the update processing. Especially, 
flash memory characteristics in erasing and 
data writing are considered in the design. 
Because, the diff script format is optimized to 
further decrease the transmitted update data 
size. Such that, our mechanism can reduce the 
resource consumption incurred by dynamic 
update mechanism and be more suitable for 
resource limited WSN environment. 
 
Keywords: Wireless Sensor Networks, 
Operating Systems, Embedded Systems, 
Dynamic Update 
 
一、前言 
無線網路動態更新在 WSN 的相關研究
中，是個非常重要且具有挑戰性的議題。感
測節點回收成本可能很高，甚至無法回收；
也因為要盡量避免回收感測節點，因此，
WSN 平台若能支援遠端動態更新的功能，
使得程式可以動態更新，才能符合更多實際
環境的應用與研究需求。然而，動態更新所
需的運算量，對於 WSN 而言是個龐大的負
擔，像是封包發送、資料儲存、計算處理等
等，都會消耗大量電力及網路資源，如何降
低資源的消耗，並且有效率的完成動態更新
的動作是具有挑戰性且重要的研究議題。目
前應用在 WSN 的動態更新模式中，主要可
以分成兩種模式：Full Image Replacement 
[1,2,3]及 Diff-based Approaches [4,5,6,7]。
Full Image Replacement 是指直接將舊的映
像檔案(image file)替換掉，這種方式架構較
簡單、容易實作，但因為傳送的是完整的檔
案，大量的封包傳遞是無法避免的，同時還
必須確保感測節點有足夠的記憶空間可以
儲 存 龐 大 的 映 像 檔 案 。 Diff-based 
Approaches 則改善 Full Image Replacement
的缺點，將舊檔案與新檔案透過工具找出不
同的部分，更新時只傳遞不同的部分，再透
過 Script 載入到系統中，這種模式雖然降低
了傳遞檔案的大小，但是執行 Script 可能必
需大量的 CPU 運算與記憶體的操作，而且
實作上會比 Full Image Replacement 複雜許
多，因為還必須考量到系統如何處理
Linking、Loading、與 Relocation 等等問題。
然而，在傳統的 Diff 演算法中大多專注於
Content的Diff，這種Diff的方式會因為Code 
Shift 的影響或是與位置有關的程式指令，必
須去更新許多並非真正改變的 Code。因此，
在更新的過程中為了追求更好的效率，我們
必須考量到 Component 的特性、程式指令的
特性等等。 
為了改善以上的問題，我們發展了一個
新的且更有效率的 Diff 機制稱為 Two-Stage 
Diff，進一步的提昇 Diff-based 更新機制的
效能，來降低傳送更新資料的大小與提昇更
新時的效率，以及節省感測節點的系統資
源，所以我們在動態更新過程中盡量將複雜
的運作和耗能的操作都在 Host Machine 端
完成，同時考量 Flash Memory 抹除與資料
寫入的特性與一些優化 Diff Script 的方式，
藉此減少資源的消耗。另一方面，為了減少
封包傳遞和減少 Flash Memory 的抹除與讀
寫量，則需透過有效率的 Diff 機制找出新
舊版 Program Image 真正差異的部分，讓所
要傳送的更新資料儘量減小。我們所發展新
的 Diff 方式，會針對 Program 的特性與新舊
Component 差異的程度提供不同的處理方
式。另外，透過使用 Add Slop Space、
Component Rearrange 與 Component 
Relocation 去降低 Code Shift 對 Diff 的影
響。當 Host Machine 將更新資料送達感測節
點後，我們必須以最有效率的方式完成更新
並且載入到系統中，也為了降低所傳送
Diff-Script 檔案的大小與提昇更新時的效
 4 
Opcodes 與硬體具有相依性。而 Jeong 與
Culler[5]則是參考了 Reijers 與 Langendoen
的研究[4]，將程式映像檔分割成 n 塊相同大
小的 Blocks，再運用 Rsync[11]演算法去計
算Blocks的Checksum及Hash Value 並存於
Hash Table 中，Script 指令則是依據 Hash 
Table 中是否有相同的 Checksum 及 Hash 
Value，來決定要使用 Copy指令或 Download
指令。這個模式減少映像檔傳送時的負擔，
用 Block 的方式使更新過程更有效率，但是
只實作在 Single-hop 上，且並沒有解決大量
的 Flash Memory Address Shift 的問題。 
Koshy 與Pandey[12]在Host Machine端
使用 Incremental Linking 的方式，只修改那
些功能真正改變的程式碼，這樣可以減少程
式碼的修改和傳遞的數量。為了避免程式碼
大小改變產生的 Flash Memory Address Shift
操作，在每個 Function 後面增加了 Slop 
Region[13]。這種方式 Linking 需在 Host 
Machine 端完成。 
FlexCup[7] 為 了 增 加 系 統 的
Flexibility，採用動態增量鏈結的方式，使用
一種 Meta-Data 記錄著 Dynamic Linking 所
需要的資訊，這樣可以減少感測節點在動態
更新時不必要的 Flash Memory Address 
Shift，但是這個動態更新的元件檔案相較其
它的動態更新模組還要大，原因是動態增量
鏈結是一種複雜的鍵結方式，間接的提升的
程式的複雜度，Sensor Node 必須確保有足
夠的記憶空間。另外在作者實作 Diff-based
與 Full Component 更新機制中，實驗的效益
並沒有太大差異，有時 Full Component 比
Diff-based 還要好，這是因為沒有考量到動
態更新的差異程度，在差異程度高的情況
下，使用 Diff-based 產生的 Processing 成本
可 能 遠 遠 超 過 Full Component 的
Transmission 成本，造成 Full Component 整
體效益比 Diff-based 還要優異的異常現象。 
有些研究[14-16]則使用其它架構來完
成在 WSN 環境下的動態更新，像 Mat’e[14]
是一個設計於無線感測網路上的 Virtual 
Machine(VM)，執行在 VM 上的應用程式的
Bytecode 比 Native Code 檔案小很多，所以
可以節省很多程式碼在傳輸上的資源，但是
這個優點卻沒辦法補足 VM 長時間執行所
耗費的資源。Impala[15]在作業系統與應用
程式之間增加了一個中介層(Middleware)，
這種架構使應用程式具有模組化、易替換、
跨平台等特性，中介層會根據系統資源去主
動調整應用程式的執行，包括對 Unlinked
的模組進行 Linking 等等，但是這種更新機
制只限於應用程式，且 Linking 必須耗費額
外的資源與儲存空間，因此，Impala 適用在
具有較龐大運算資源的節點上。 
此 外 有 研 究 [17-20] 使 用 壓 縮
(Compression)方式藉由減少動態更新所需
的資料傳輸量來降低動態更新所消耗的系
統 資 源 ， 但 是 需 要 Compression 與
Decompression 的 CPU Time。研究[7,17]中
指出，動態更新的過程中以 Transmission 與
CPU Processing 的資源消耗最為關鍵，
Transmission 包括封包的傳遞、接收及因傳
遞或接收過程的等待時間，若要降低
Transmission 成本最直接有效的方式即是減
少傳遞的封包數量。Processing 是指當動態
更新的資料送達感測節點後，系統將資料連
結 、 載 入 到 記 憶 體 所 耗 的 資 源 。 當
Transmission 愈少，代表 Update Data 愈精
簡，使得 Processing 愈大。  
除了上述研究之外，亦有許多嵌入式作
業系統提供動態更新機制或記憶體保護功
能的研究，如 LiteOS[21]、SOS[22]、OS 
Portal[23] 、 eCos[24] 、 Contiki[25] 、
EYES[26] 、 Mantis[27] 、 MagnetOS[28] 、
SenSpire OS[29] 、 t-Kernel[30] 、
Nano-RK[31]、…等，都值得做為我們研究
的參考。 
四、研究方法 
 
在本研究中，我們開發了一個新的且更
有效率的 Diff-based 動態元件更新機制稱為
Two-Stage Diff，進一步改善了 Diff-based 機
制的效能，以節省感測節點系統資源的消耗
與提昇元件動態更新時的效能。而在 Sensor 
Node 上還必須考量 Flash Memory 的儲存特
性，或是資料的清除時 Erase Unit 的議題。
 6 
在傳統的 Diff 演算法中大多專注於
Content的Diff，這種Diff的方式會因為Code 
Shift 的影響或是與位置有關的程式指令，必
須去更新許多非真正改變的 Code。但是在
更新的過程中為了追求更好的效率，我們必
須考量到 Component 的特性、程式指令的特
性等等。我們實作了一個 Two-Stage Diff 機
制，將分成 2 階段去執行 Diff，在第一階段
使用Symbol Diff來判斷Sensor Node上的舊
Component 的可再利用性，我們將使用
Component Rearrange 與 Reuse 來 達 成
Component 的再利用，並且透過 Relocation
去消除因為位置改變而造成目的位置碼不
同的指令。在第二階段則是 Symbol Diff 與
Content Diff，透過新舊版 Program Image 中
的 Component 與 Component 之間的差異比
較，去尋找那些真正修改過的程式碼。 
圖 1 與圖 2 顯示了我們動態更新機制運
行在 WSN 環境中的幾個主要步驟。在 Host 
Machine 端的實作，主要是需要實作 Tool
來分辨出新舊版 Program Image 的差異，並
產生更新所需的 Patch 檔案(Diff-Script)。而
在 Sensor Node 端的實作，主要包括下載
Diff-Script 到 External Flash，並且執行
Diff-Script 來更新舊的 Program Image。當更
新完成後，Sensor Node 即會開始運行更新
後的 Program Image。詳細說明如下: 
(1) Host Machine 端產生在 Sensor Node
上預設可執行的 Executable Image 
首先，在 Host Machine 端必須先產生一
個 在 Sensor Node 上 預 設 可 執 行 的
Executable Image。如圖 3 和 4，我們將要傳
送至 Sensor Node 的 Deluge Image 都預先做
了 3 項處理(加入 Slop Space、Component 
Rearrange、Relocation)，可以讓 Image 在更
新時更具有效率。目的是希望在動態更新的
Diff 的過程中，減少 Address Shift 在 Sensor 
Node 與 Host Machine 的影響。 
我們參考了 [6]的研究，將 Program 
Image 內的 Application Component 之間都提
供了 Slop Space，加入了 Slop Space 可以允
許當將來 Component 被更新，只要更新後的
Component Size 不要超過 Slop Space，就不
會影響其它的 Component 程式碼。同時，我
們考量到 Flash Erase 與寫入是以 Page 為單
位，所以我們會將部分的 Component 重新安
排(Rearrange)到適合的位置。除此之外，由
於加入了 Slop Space 會造成整個 Program 
Image 的 Size 變大，所以我們會在 Sensor 
Node 散 播 出 去之前，使用 In-System 
Programming 的方式將 Executable Image 寫
入到 Sensor Node 中，當作 Sensor Node 所預
設執行的應用程式。 
 
圖 2：Two-Stage Diff元件動態更新機制架構圖 
 8 
 2nd Symbol Diff and Content Diff: 
而在第二階段是做 Symbol Diff 和
Content Diff來找出新舊Executable Image之
中 Component 內容真正不同的部分，主要目
的 是 Diff 新 舊 Executable Image 中
Component 的內容部分，由於 Component
的內容可能因為更新而新增或是刪除一些
程式碼，我們透過 Content Diff 來找出差異
的部分，並且依據 Diff 的結果產生
Diff-Script 指令。由於我們在第一階段的
Symbol Diff消除了大部分與Address相關影
響的 Code，在這部分時我們可以更容易找
到真正被修改過的程式碼。 
我們實作了針對不同 Component 提供
較適合的 Content Diff 方式，像是 COPY 
algorithm 或 Byte Diff algorithm，主要考量
傳輸成本與處理成本的平衡。其中 COPY 
algorithm 意即指 Sensor Node 在更新時將
Diff-Script 檔案中某一段連續性的資料
Copy 到 Program Flash 指定的位置，這是一
種操作簡單但是傳輸成本較高的方式，這個
更新方式主要適合使用於一個新增的元件
或是一個區塊程式碼的複製。而 Byte Diff 
algorithm 則是一個 Byte 接著一個 Byte 的比
較新舊 Component 的內容是否相同。這種
Diff 方式較為精確且更新傳輸成本較低，但
是若 Component 更新的差異程度太大時，
Byte Diff 的更新效率可能會比 COPY 還要
差。這種更新方式適合用於更新程度較小的
Component。接著將 Diff-Script 指令輸出成
一個檔案，允許 Host Machine 將檔案散播出
去給 Sensor Node 來執行更新。 
(3) Diff-Script Format 
若要使 Diff-based 元件動態更新機制有
效率，Diff-Script 格式的設計就相當的重
要，因為它儲存了所有動態更新過程中在
Sensor Node 所需要的相關操作。我們設計
了一些優化的方式來降低 Diff-Script 檔案的
大 小 ， 並 且 讓 Sensor Node 在 執 行
Diff-Script 來進行 Component 更新時能獲得
更好的效率。例如，我們設計的 Diff-Script
主要支援兩種功能：Byte Diff 和 COPY。在
Diff algorithm 中，主要是考量 Flash Memory
的 Erase 和寫入是以 Page 為單位，我們則依
此特性使用以 Page 為單位的更新方式，將
同一個需要更新的 Page 資料使用一個 Page 
表 1：Diff-Script format 
Header Bytes 
Identify 
Data 
Length of 
Page Data 
Length of 
Ctrl Data 
Length of 
Copy Data 
Length of Diff 
Data 0 -23 
8 bytes 4 bytes(X) 4 bytes(Y) 4 bytes(Z) 4 bytes 
Page Data 
24 to 
(24+X)-1 
Page Number Ctrl Length 
2 bytes 1 byte 
Control Data 
24+X to 
(24+X+Y)-1 
Diff Address Diff Length 
1 byte 1 byte 
Copy Data 24+X+Y to 
(24+X+Y+Z)-
1 
Destination Address Copy Length 
4 bytes 2 bytes 
Diff Data 
24+X+Y+Z to 
End 
Data 
N bytes 
 
 10 
(1) 完成 Two-Stage Diff 的動態元件更新機
制的實作。 
(2) 完成在 Host Machine 執行，產生在 Sensor 
Node 上可執行的 Executable Image 相關
工具。 
(3) 完成 Diff-Script Format 的設計與優化，作
為 Two-Stage Diff 所產生的 Diff-Script
格式。 
(4) 完成在 Sensor Node 上執行更新的 Patch 
Agent 實作。 
(5) 完成支援Two-Stage Diff元件動態更新機
制的 Data Dissemination Protocol 的研究
與實作。 
(6) 完成效能評量工具的研究、Workload 的
設計。 
(7) 完成測試平台的建置、系統最佳化、效能
評估與效能提昇，以及研究技術報告的撰
寫。 
在進階的研究與實作中，我們的
Two-Stage Diff 機制能有效降低傳送更新資
料的大小與提昇更新時的效率，同時考量
Flash Memory 抹除與資料寫入的特性與一些
優化 Diff Script 的方式，使我們的機制更適
合使用在資源有限的 WSN 環境。 
六、參考文獻 
[1]. J. W. Hui and D. Culler, “The dynamic 
behavior of a data dissemination protocol 
for network programming at scale,” 2nd 
Intl. Conf. on Embedded Networked 
Sensor Systems, pp. 81-94, 2004. 
[2]. Crossbow Technology Inc. Mote 
In-Network Programming User 
Reference, 2003. http://www.xbow.com. 
[3]. T. Stathopoulos, J. Heidemann, and D. 
Estrin, “A remote code update 
mechanism for wireless Sensor 
networks,” Technical Report 
CENS-TR-30, University of California, 
Los Angeles, Center for Embedded 
Networked Computing, November 2003. 
[4]. N. Reijers and K. Langendoen, “Eﬃcient 
code distribution in wireless Sensor 
networks,” Proc. of the 2nd ACM Intl. 
Conf. on Wireless Sensor Networks and 
Applications, pp. 60-67, 2003. 
[5]. J. Jong and D. Culler, “Incremental 
network programming for wireless 
sensors,” First IEEE International 
Conference on Sensor and Ad Hoc 
Communications and Networks, Oct. 
2004. 
[6]. J. Koshy and R. Pandey, “Remote 
incremental linking for energy-efficient 
reprogramming of Sensor networks,” 2nd 
European Workshop on Wireless Sensor 
Networks, pp.  354-365, 2005. 
[7]. P. Marr´on et al., “FlexCup: A flexible 
and efficient code update mechanism for 
Sensor networks,” in European 
Workshop on Wireless Sensor Networks, 
2006. 
[8]. J. Hill, R. Szewczyk, A. Woo, S. Hollar, D. 
Culler, K. Pister, “System architecture 
directions for networked sensors,” In Proc. 
of the 9th Intl. Conf. on Architectural 
Support for Programming Languages and 
Operating Systems, pp. 93-104, 2000. 
[9]. Crossbow Technology Inc. Mote In-Network 
Programming User Reference, 2003. 
http://www.xbow.com. 
[10]. T. Stathopoulos, J. Heidemann, and D. Estrin, 
“A remote code update mechanism for 
wireless Sensor networks,” Technical Report 
CENS-TR-30, University of California, Los 
Angeles, Center for Embedded Networked 
Computing, November 2003. 
[11]. Andrew Tridgell, “Efﬁcient Algorithms 
for Sorting and Synchronization,” PhD 
thesis, Australian National University, 
1999. 
[12]. J. Koshy and R. Pandey, “Remote 
incremental linking for energy-efficient 
reprogramming of Sensor networks,” 2nd 
European Workshop on Wireless Sensor 
Networks, pp. 354-365, 2005. 
[13]. R. Quong and M. Linton, “Linking programs 
incrementally,” ACM Transactions on 
 12 
七、計畫成果自評 
本研究所架構於 TinyOS 上完成的
Two-Stage Diff 動態元件更新平台，可以支援
後續發展 WSN 相關的進階研究。計畫的成
果提昇了現有在WSN環境下Diff-based動態
元件更新的效能。此外，參與的人員也獲得
了嵌入式系統方面的實作經驗，並對嵌入式
系統架構、Diff-based 元件動態更新機制與
Recovery 策略有了深入的了解和研究訓練。
同時，藉由在 TinyOS 系統上的實作，參與
的人員也獲得了對 TinyOS 系統以及 TinyOS
核心程式的訓練，並且深入了解 WSN 的運
作原理與運作方式。同時也獲得對嵌入式系
統效能提昇進一步研究的基礎。 
目前，本計畫的成果已有 2 篇國際會議
(EUC’2011, UIC’2012)論文的發表，另有 1
篇碩士論文，列述如下： 
 
1. Mei-Ling Chiang and Tsung-Lin Lu, 
“Two-Stage Diff: An Efficient Dynamic 
Software Update Mechanism for Wireless 
Sensor Networks,” The 9th IEEE/IFIP 
International Conference on Embedded and 
Ubiquitous Computing (EUC’2011), 
Melbourne, Australia, October 24-26, 
2011. 
2. Shin-Lu Lien and Mei-Ling Chiang, 
“Recovery Mechanism for Diff-based 
Reprogramming in WSNs,” The 9th IEEE 
International Conference on Ubiquitous 
Intelligence and Computing (UIC’2012), 
Fukuoka, Japan, September 4-7, 2012. 
3. Tsung-Lin Lu, “Research on Improving the 
Efficiency of Dynamic Update in WSN 
Platform,” Master Thesis, Department of 
Information Management, National 
Chi-Nan University, Nantou, Taiwan, 
R.O.C. 2011. (改善 WSN 環境下動態更新
的效率的研究與實作) 
 
 
二、與會心得
本次的 Ubiquitous Intelligence and Computing (UIC 2012) 研討會與另外兩場研討會
(ATC 2012、ICA3PP 2012)舉辦於同一地點，讓本人能夠有機會觀摩其他主題。大會中
出席了相當多的國際學者，不僅有數位來自國內各大學相關領域的研究學者，此外也有
許多不同領域的業界專家出席。不論在會議中或場外大廳，各種學術討論及回應都相當
熱絡。其中 Compiler Optimization、Operating Systems and Intelligence Applications與
Embedded Systems and Fault Tolerance都是其中的主要議題，大會同一時間點都有數場
Technical Sessions在進行，每場 Session都有數篇會議論文發表，許多議題都受到各國
研究學者以及各業界人士的重視與討論。
本人於此次參加 UIC國際會議的收獲實在非常多，不僅有機會與來自各國的學者
交流，更有機會了解各國當前的研究概況，也多認識了數位國內的專家學者。國內外各
學者的創見及研究內涵，開拓了本人的視野，除了交流研究心得，亦提供了不同的思考
方向，國科會鼓勵及補助國內專家學者出席國際會議的用意相當好，此行使本人獲益良
多。
 
Figure1.     The Two-Stage Diff Update Mechanism. 
retransmission cost and prevent the recovery commands from 
affecting other normal nodes. The last principle makes it easy 
to use without extra learning effort and the recovery 
mechanism will not confuse the operator.  
We choose Two-Stage Diff [2] as our diff-based update 
mechanism to implement our proposed mechanisms because it 
improves TinyOS’s default remote update mechanism – 
Deluge which uses full image replacement for update. Our two 
recovery mechanisms backup patch files in unused volume of 
sensor storage and incrementally recover the failed node from 
reprogramming error. The proposed N Recovery is designed to 
recover the failed node without the assistance of host machine, 
which avoids any data retransmission. The proposed N-1 
Recovery is designed to minimize the data retransmission by 
sending only the latest version of patch file when the stored 
latest version of patch file is erroneous. 
Our two recovery mechanisms have been implemented in 
TinyOS. Experimental results show that the N Incremental 
Recovery can avoid any retransmission and the N-1 
Incremental Recovery can reduce 96.9%-96.8% extra 
transmission amount compared with the default Deluge’s 
recovery strategy with full image replacement. To compare the 
recovery time, the N Incremental Recovery can be 20.45 times 
faster than the default Deluge recovery with full image 
replacement strategy and the N-1 Incremental Recovery can be 
20.00 times faster. 
II. BACKGROUND AND RELATED WORK 
A. Network Reprogramming 
The distributed nature and scale make WSN difficult to 
reclaim nodes for local reprogramming because it is usually 
dangerous or the cost is higher than redeployment. After sensor 
nodes are deployed, remote parameter reconfiguration and 
debugging are needed for WSN to fit into the real operating 
environment. Several network reprogramming strategies had 
been proposed for reducing data transmission for update and 
increasing update reliability. A complete update process starts 
from disseminating new version of application data through 
reliable distribution protocols. According to different update 
approaches, the new version of data may be a full executable 
image or only the differences between two versions. After 
sensor node has finished receiving the update data, the update 
mechanism on each node will start to update its old image into 
the new version. 
B. Deluge 
Deluge [4] is a reliable dissemination protocol for distributing 
large amount of data through WSN. It uses full image 
replacement strategy to update all sensor nodes. The full image 
replacement steps work as follows. First, developer compiles 
and links the new version of application into a single image on 
host machine, and then disseminates the whole image to all 
sensor nodes through Deluge protocol. After all the image data 
is received by the sensor node, it will start the update procedure 
to replace the old image by this new one. Compared to other 
strategies, full image replacement strategy is easy to use and 
implement, but the amount of data transmission is the main 
drawback. Even if only one constant is changed, we must 
retransmit the whole new image to all sensor nodes. 
C. Two-Stage Diff 
Two-stage diff [2] update mechanism is based on Deluge 
dissemination protocol, whereas it uses a diff-based approach 
mechanism for remote reprogramming sensor nodes (Fig. 1). 
This approach is suitable for small update. Parameter 
reconfiguration and bugs fixing are representative examples 
because the change makes only slight difference between the 
original program image and the new one. After comparing old 
and new version of images on host machine, it sends only the 
different components or contents to all sensor nodes for 
updating. Compared to full image replacement approach, diff-
based approach can effectively reduce the amount of data 
most three times. If all the reload procedures fail, it would 
reload and rollback to the Golden Image application. These 
self-recovery steps (i.e. retry and rollback) are designed to 
minimize the communication overhead between the host 
machine and the failed node. Because Deluge is an update 
mechanism with full image replacement, one can simply 
perform recovery by retransmitting the whole new image or 
performing rollback to any previous version, but the diff-based 
update approaches have more problems when reprogramming 
failure occurs.  
In diff-based update mechanisms, only the differences of 
two executable images are sent for updating. After we update 
sensor nodes many times, the previous version of patch files 
are usually overwritten by the next one. Recovery mechanism 
will lack of the intermediate patch files for performing the 
incremental recovery from the first version of full image stored 
on sensor storage. To recover from this condition, a sensor 
node needs extra communication between host machine and 
sensor node for retransmitting the intermediate patch files. 
Take Two-stage Diff mechanism for example. When system 
initializes, the first version of full executable image stored in 
node’s storage (i.e. external flash) is loaded into program flash 
and runs on program flash. If any errors happen during the first 
reprogramming, the failed nodes can simply recover 
themselves by reloading the first version of full image from 
storage. After many times of updates, an error during 
reprogramming will cause some problem. Because it lacks of 
the intermediate version of patch files in sensor storage, it 
could not directly rollback to the previous version. Thus, the 
host machine must retransmit the patch files or full image to 
help it incremental recovery. In Deluge mechanism, issuing 
dissemination or reprogramming commands will be received 
by all nodes in network and all of them will check the received 
commands to prevent from performing any duplicated action. 
If sensor node can perform the recovery mechanism locally, 
host machine does not need to issue dissemination or 
reprogramming commands to affect other nodes. 
 
Figure 3.  The flow of incremental recovery. 
To solve the above problem, the main goal of this paper is 
to minimize the communications between host machine and 
failed node for data retransmission during reprogramming 
recovery. We propose two self-recovery mechanisms and 
implement it in TinyOS. These two mechanisms follow three 
principles. (1) Mechanisms must do their best to prevent any 
data retransmission. (2) Recovery procedures must be performed 
locally to minimize the communication between failed node 
and host machine. Sensor nodes can reload and retry the stored 
executable image, or perform checkpoint and rollback. (3) 
Mechanisms must avoid changing any default Deluge 
command or adding extra commands. The first two principles 
can efficiently reduce the retransmission cost and prevent 
issuing recovery command from affecting other normal nodes. 
The third principle makes the proposed recovery mechanisms 
easy to use for the operator without extra learning effort . 
B. Incremental Recovery Architecture 
The proposed recovery mechanisms are implemented in 
TinyOS on IRIS hardware platform. We choose Two-Stage 
Diff as our diff-based update mechanism which improves 
Deluge update mechanism that uses full image replacement 
approach.  
The original Deluge update mechanism splits sensor node’s 
external flash into four volumes by default. The first volume is 
called Golden Image, which is hardware protected and the 
application will be loaded to support minimal Deluge functions 
while all recovery mechanisms fail. The remaining three 
volumes called Deluge volumes can store three applications, so 
network administrator can switch between one of them by 
issuing Deluge command without retransmitting any 
executable image. In Two-Stage Diff update mechanism, one 
of the volumes is used to receive and store the last version of 
patch file, and the other supports Deluge default full image 
replacement mechanism.  
The diff-based approach are best suitable for small update 
and the patch files are usually small size, so the volume used to 
receive a patch file is usually at low utilization. Therefore, we 
further split the unused space in a volume to backup several 
versions of patch files for incremental recovery. Fig. 3 shows 
our recovery mechanism. We split the second volume that is 
used to store the patch file into four backup volumes by setting 
the application volume in the storage configuration file. The 
default size of second volume is 65536 bytes in TinyOS, so 
each of the backup volume is 16384 bytes now. As a result, if 
the patch file size is larger than 16384 bytes, we recommend 
network administrator to send full image to update sensor node 
by using the default Deluge’s reprogramming mechanism.  
In our experimental platform, a sensor node can operate 
both the Deluge update mechanism and the Two-Stage Diff 
update mechanism. The first backup volume is used to receive 
patch file sent from host machine since Two-Stage Diff would 
store the received file at this location. After sensor node 
finishes receiving patch file, it will copy the file into other 
backup volume according to the current backup pointer. The 
backup pointer always points to the next volume address for 
receiving a new patch file. Since there are total three backup 
volumes to store three versions of patch files (the first one is 
used to store received file), the backup pointer must rollback to 
the first backup volume address for starting the next backup 
cycle. Our recovery mechanism can preserve at most three 
patch files, so after three times of incremental update, the 
fourth update will rollback the pointer address back to the first 
backup volume. Network administrator must use the Deluge 
default update mechanism with full image replacement strategy 
to reprogram sensor nodes.  
C. Time Comparison for Recovery Data Retransmission  
We measure the time of data retransmission for different 
test cases. Fig. 5 shows that N Incremental Recovery Strategy 
does not need any data retransmission for three cases. The N-1 
Incremental Recovery only needs to retransmit the last version 
of patch file in the three cases, so it can reduce 91.2%-93.3% of 
retransmission time compared to the full image replacement 
recovery strategy. 
 
Figure 5.  Retransmission time comparison. 
D. Elapsed Time for Recovering a Failed Sensor Node 
 We measure the elapsed time for recovering a failed sensor 
node. The elapsed time we measure on sensor node consists of 
packet receiving time, processing time, and installation time. 
After data receiving and processing, the failed node will 
recover itself to normal state just like other nodes in WSN. The 
packet receiving time is the period from downloading new 
packets and storing them in the external flash. The critical 
factor affecting the packet receiving time is the size of the 
transmitted patch file. The time for processing and installation 
contains updating the original executable image and writing the 
updated image into the program flash.  
 
Figure 6.  Elapsed time of recovery. 
Fig. 6 shows that packet receiving time dominates the total 
execution time. N Incremental Recovery is 19.25, 20.45, and 
19.54 times faster than full image replacement in three cases. 
N-1 Incremental Recovery is 8.72, 7.88, and 20.00 times faster 
than full image replacement in three cases. 
V. CONCLUSIONS 
We have proposed and implemented two recovery 
mechanisms in TinyOS. Our recovery mechanisms use 
checkpoint/rollback strategies to avoid issuing recovery 
command to affect all sensor nodes in network. The N 
Incremental Recovery perform self-recovery to recover a failed 
node without any communication with host machine. The N-1 
Incremental Recovery can minimize the data retransmission 
when latest version of patch file received is incomplete. The 
retransmission of patch file will not affect other sensor nodes 
and the associated command will be ignored by other normal 
sensor nodes as well. The experimental results with various test 
cases all demonstrate that both our recovery mechanisms can 
effectively reduce the data retransmission and reduce recovery 
time in diff-based update mechanism. 
REFERENCES 
 
[1] A. Avizenis, “The N-Version Approach to Fault-Tolerant Software,” 
IEEE Transaction on Software Engineering, pp. 1491-1501, Dec. 1985. 
[2] M. L. Chiang and T. L. Lu, “Two-Stage Diff: An Efficient Dynamic 
Software Update Mechanism for Wireless Sensor Networks,” 2011 IFIP 
9th International Conference on Embedded and Ubiquitous Computing, 
pp. 294-299, Melbourne, Australia, 2011. 
[3] J. B. Dugan, S. A. Doyle, and F. A. Patterson-Hine, “Simple Models of 
hardware and Software Fault Tolerance,” Programming Annual 
Reliability and Maintainability Symposium, pp. 124-129, 1994. 
[4] J. W. Hui and D. Culler, “The dynamic behavior of a data dissemination 
protocol for network programming at scale,” 2nd Intl. Conf. on 
Embedded Networked Sensor Systems, pp. 81-94, 2004. 
[5] J. Hill, R. Szewczyk, A. Woo, S. Hollar, D. Culler, and K. Pister, 
“System architecture directions for networked sensors,” 9th Intl. Conf. 
on Architectural Support for Programming Languages and Operating 
Systems, pp. 93-104, 2000. 
[6] J. Jeong and D. Culler, “Incremental network programming for wireless 
sensors,” IEEE SECON, pp. 25-33, 2004. 
[7] F. Koushanfar, M. Otkonjak, and A. sangiovanni-Vincentelli, “Fault 
Tolerance in Wireless Ad-Hoc Sensor Networks,” In IEEE Sensors, pp. 
1491-1496, June 2002. 
[8] K. Marzullo, “Tolerating Failures of Continuous valued Sensors,” In 
ACM Transactions on Computer Systems, volume 8, pp. 284-304, 
November, 1990. 
[9] R. Panta and S. Bagchi, “Hermes: Fast and Energy Efficient Incremental 
Code Updates for Wireless Sensor Networks,” in IEEE Conference on 
Computer Communications (INFOCOM), 2009. 
[10] I. Saleh, A. Agbaria and M. Eltoweissy, “In-Network Fault Tolerance in 
Networked Sensor Systems,” In Proceedings of the 2006 workshop on 
Dependability issues in wireless ad hoc networks and sensor networks 
DIWANS’06, pp. 47-54, Los Angeles, CA, USA, Sep. 2006. 
[11] I. Saleh, H. El-Sayed, and M. Eltoweissy, “A Fault Tolerance 
Management Framework for Wireless Sensor Networks,” Innovations in 
Information Technology, Nov. 2006, ISBN: 1-4244-0674-9. 
[12] SourceForge Technology Inc., TinyOS CVS repository, 
http://tinyos.cvs.sourceforge.net/viewvc/tinyos/. 
100年度專題研究計畫研究成果彙整表 
計畫主持人：姜美玲 計畫編號：100-2221-E-260-025- 
計畫名稱：支援無線感測網路的有效率 Diff-based 元件動態更新機制與其相關課題的研究與實作 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 1 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 2 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
