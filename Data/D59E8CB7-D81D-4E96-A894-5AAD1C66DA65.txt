報  告  內  容 
 
一、 前言 
 
隨選視訊服務 (video-on-demand services，VoD)通常倚賴一個或一小群組的視訊主機去傳
送視訊內容。此方法對於視訊主機來說，是一個大量的處理負擔。一般使用集中管理主機的
相關的技術有 batching, patching [1]、broadcasting、IP broadcasting, IP multicasting, proxy 
caching，而另一種解決多媒體串流的可能方式則為 Peer-to-peer (P2P)。以點對點 (peer-to-peer) 
技術來實現隨選視訊服務 (video-on-demand services) 可獲得多項益處，例如將負載平均地分
配至各個節點上，並妥善利用各個節點間的網路頻寬，進而降低單一中央視訊伺服器 (video 
servers) 之負擔。 
除此之外，由於硬體技術持續的進步，使用者設備端所擁有的磁碟空間、處理運算能力
亦明顯增進。本計畫即充份利用此項優勢，分散視訊資料至各個使用者身上，允許任一使用
者快速地在此點對點網路中搜索特定視訊物件，並同時自多個節點上接收視訊片段直到完整
資料傳輸完成為止。串流議程 (streaming session) 中完全無中央視訊伺服器存在之觀念，進
而規避了單點故障風險 (single point of failure)。在傳統使用點對點技術設計的隨選視訊系統
中，通常僅考慮主動參與同一視訊流傳輸 (video streaming) 之使用者，並於該群節點間互相
傳遞串流資料；然而這些研究皆未考慮那些已結束視訊流之傳送但仍擁有片段視訊資料的使
用者。 
在本計畫中，我們提出了一個基於多層疊加網路 (multi-overlay networks) 觀念的新穎點
對點網路架構，稱之為 MegaDrop，並利用其建構出一個完全分散化的網路環境，有效地提供
隨選視訊服務。最後並藉由一系列實作在 MegaDrop 系統上的實驗評估可得知，本架構用於
大型視訊資料傳輸與多人串流協議特別有效率。當愈多使用者參與同一視訊流的傳送時，使
用者間的聚集頻寬 (aggregate bandwidth) 將有效地獲得提升，進而降低平均串流時間。除此
之外，本計畫所實作的 MegaDrop 系統不僅適用於隨選視訊傳輸，其亦適合於提供節點間的
檔案分享 (file sharing) 服務。 
 
I  1
規範。除此之外，HBn, 和 Hlen分指出對於媒體區塊Bn的hashed資料的值和長度，換句話說，
 
 HBn = H(Bn)及H 為HBlen n的長度。
 
 
 
 
 
 
 
 
block 2 block 3 block BNblock 1
H(x) H(x) H(x) H(x) 
media content 
Blen
A media object 1. Media content is divided into 
media blocks (for a media object). 
2. Each media block is hashed by the 
hash function H(x).  
 
 
 
 
 
 
 
H(x)
hashed blocks 
hash 1 hash 2 hash 3 hash BNmedia size hash scheme hash size
media-hash 
Hlen 
The length of a media-hash is also Hlen. 
3. media-hash is produced by 
taking the hashed blocks, 
media size, hash scheme, and 
hash size as inputs to H(x). 
 
Figure1. The flow for generating hashed blocks and media-hash 
z Media-Info 
 
Media-info 不僅可以提供唯一性的辨識給一個經過 media-hash 的特定媒體物件，還
可以有效率提供給得到此片段的節點下列資訊：(1)此媒體物件存在何處；(2)如何取得及
串連此媒體物件；及(3)一個媒體物件所具有效於解碼及呈現方式的特性。因此 media-info
應該可以在被串流開始前被重新得到。圖二顯示一個 media-info 的架構。media-info 也含
有 hashed 區塊，其可被使用來辨識每個媒體區塊的正確性及可用於錯誤回復功能。除此
之外，每個區塊告知節點如何取得及串連此媒體區塊。 
 
 
 
 
 
 
hash 1 hash 2 hash BNhash scheme hash size
media title date time comments creator
media size 
hashed blocks 
mandatory fields media header fields hashed blocks 
collected from original media header 
media-hash 
brokers 
brokers’ IP addresses 
 
Figure 2. The structure of media-info 
 3
四、 研
 
我們提出 點網路架
構，稱之為
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
多層疊加
點探索層 (P
Streaming La
MegaDrop 網
識別，以快速
二層疊加網路
輸中的視訊資
 
 
 
 
 
 
 
 
 究方法 
了一個基於多層疊加網路 (multi-overlay networks) 觀念的新穎點對
MegaDrop，如圖三。 網路 (multi-overlay networks) 觀念採用了分層概念將架構劃分為四個子層：節
eer Discovery Layer)、內容搜尋層 (Content Lookup Layer)、媒體串流層 (Media 
yer)、錄放控制層 (Playback Control Layer)。節點探索層負責發掘其它同位於 
路上的節點，其建構了第一層疊加網路；內容搜尋層建立每項視訊物件的唯一
地提供內容比對功能；媒體串流層處理使用者間的實際資料傳輸，其建構了第
，如圖四所呈現；錄放控制層則提供視訊操作介面，讓使用者可播放、控制傳
料。 
 
Figure 3. MegaDrop architecture 
 5
 
Figure 4. Media Streaming Layer 
 
Session 1
Session 2 
Suppliers 
Brokers 
Droppers 
Peers that have the 
whole media  
contents 
Peers that exchange 
peer information 
only 
Peers that have partial 
media content only 
The boundary of a 
session 
Brokering Links 
Media Streaming Links 
此程序包 物件前被建
立(2)連接 效傳送媒體
區塊，每個 media pieces
能在媒體 me 的一個變
化被使用
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 pe requires 
a object 
z 錄放
本計畫
一個建立在
圖形輸入及
為 Filter G
filter 指出可
置。此方法
series）因此
 
 
 
 
 
 
 
 含了三個子函數(1)致使一個 TCP/IP 連接可以在傳送節點服務媒體
狀態的看守 (3)控制媒體資料的溝通；第四步驟中為了在 MSL 上有
媒體區塊能被分解成多個較小的單位，稱為 media pieces，讓每個
傳輸時間內可視為一個單位的傳送；最後一步驟中，tit-for-tat sche
來實作 bartering。圖六說明了在 MSL 上一個傳輸時間中的存取。 
er1 peer2 broker query hitter nPeer1 (the requesting peer) 
media-info of the desired medi
from the query hitter. 
  
Figure 6.Access flows of the Media Streaming Layer 
o Brokering 
p Handshaking 
q Message Communication 
* 
* 
n Requesting media-info oAfter the broker addresses are extracted from recived media-info, peer1 attempts a 
connection to a broker in getting the peer 
list. 
 
pPeer1 selects a sending peer (peer2) from 
the peer list, and tries to connect to peer2 
through handshaking. 
 
qPeer1 and peer2 communicate and stream 
data through message exchanges, after 
handshaking is succeeded. 
控制層 (Playback Control Layer) 
藉由 Microsoft™ DirectShow media framework [16]來實作 PCL。DirectShow 是
一群 filter上，而每個 filter可視為串流媒體檔案的一個特定操作。藉由一個 filter
輸出的結果來連接多個 filter。在此實作中，我們加入一個高層級的物件，稱
raph Manager，來控制一個 Filter 圖形的流程。圖七顯示此方法，其中一個來源
能來自區域儲存上或網路上的媒體資料，因此一個媒體資料可輸出至一個裝
可以使得 MegaDrop 系統適用於多種解碼（像是 MPEG series、H.264、WMV 
增加了本系統的彈性。 
 7
Filter Graph Manager 
 
Figure 7. Topology of a DirectShow filter graph 
Source 
Filter 
Rendering 
Filter 
Transform 
Filter 
media blocks media blocks
output pin input pin output pin input pin 
的頻寬效能。 
 
 
 
 
 
 
 
z Effectiveness of Bandwidth Aggregation 
圖十中顯示一個模擬的結果。當越多節點參與此系統時，每增加一個媒體時間則減
少平均的傳輸時間，因此可加大聚集頻寬。特別針對較大的媒體物件，當越多節點參與
在一個媒體時間內時，一個平均傳輸時間越明顯的減少。 
 
s 
 
 
 
 
 
 
 
5 
kB
10
0 
kB
50
0 
kB
3 
M
B
50
 M
B
30
0 
M
B
1 
G
B
2 
G
B
5 
G
B
10
0 
G
B
1 
TB
64 kB
2048 kB
65536 kB
0.0%
0.4%
0.8%
1.2%
1.6%
2.0%
2.4%
O
ve
rh
ea
d 
R
at
io
Media Size
Block Length
2.00%-2.40%
1.60%-2.00%
1.20%-1.60%
.80%-1.20%
.40%-.80%
.00%-.40%
 
Figure 9. Overhead vs media size 
Media Size
0
1000
2000
3000
4000
5000
6000
2 4 6 8 10 12 14 16
Number of Peers
Str
ea
mi
ng
 T
im
e (
sec
on
ds
)
200 MB
400 MB 
600 MB
800 MB
1000 MB
 
Figure 10. Average transmission time vs number of participating peers in different media size 
從實作系統的效能評估結果可得，我們所提出的架構用於大型視訊資料傳輸與多人串流
協議特別有效率。愈多使用者參與同一視訊流的傳送，使用者間的聚集頻寬 (aggregate 
bandwidth) 將有效地獲得提升，進而降低平均串流時間。此外，實作之系統不僅適用於隨選
視訊傳輸，其亦適合提供節點間的檔案分享 (file sharing) 服務。 
I  9
計劃成果自評 
 
本計畫針對網際網路上點對點視訊串流的相關問題進行研究，並提出了分層概念將架構
劃分為四個子層：節點探索層 (Peer Discovery Layer)、內容搜尋層 (Content Lookup Layer)、
媒體串流層 (Media Streaming Layer)、錄放控制層 (Playback Control Layer)。從實作系統的效
能評估結果可得，我們所提出的架構用於大型視訊資料傳輸與多人串流協議特別有效率。愈
多使用者參與同一視訊流的傳送，使用者間的聚集頻寬 (aggregate bandwidth) 將有效地獲得
提升，進而降低平均串流時間。 
 本研究成果已整理成學術論文，現正投稿於國際學術期刊。 
 
I  11
2We first solve the problem of a smallest 2-edge-connectivity augmentation of bipartite
graphs, and then extend the proposed algorithms to deal with the componentwise
2-edge-connectivity case. To solve the first problem, we transform the input graph G into a
well-known data structure called a bridge-block forest. A block of a graph G is a maximal
2-edge-connected subgraph (or component) of G. We assume B and W are the two bipartite
sets of vertices in G. A block that only contains vertices in B (respectively, W) is called a
black (respectively, white) block, while a block that contains both vertices in B and W is
called a hybrid block. A vertex in the bridge-block forest is white if its corresponding block is
white. Black and hybrid vertices in the bridge-block forest are defined similarly. Hereafter,
we focus on a bridge-block forest, rather than a graph.
To add a smallest possible number of edges to make a bridge-block forest
2-edge-connected, we first categorize the input bridge-block forest into several cases. We
found that easy tree is the simplest case, where easy tree is defined to be a tree with an equal
number of black and white leaves and no hybrid leaves. Therefore, our main algorithm first
solves the problem on an easy tree. To solve the easy tree case, we divide the leaves of an
easy tree into two disjoint subsets followed the proposed rule, such that the edges added to
leaves in different subsets can make the resulting graph 2-edge-connected. We then solve
other cases by transforming the cases into easy tree case. During each phase, our approach
adds the smallest possible number of edges to perform the needed transformation in each
phase. Furthermore, the total number of added edges is proved to be minimal in all of the
cases. A high-level description of the algorithm for the 2-edge-connectivity case is given in
Algorithm 1. In addition, the edge set added to the bridge-block forest by our algorithms can
be transformed into the corresponding edge set added to the input graph G. The algorithms
run in sequential liner time and O(log n) parallel time on an EREW PRAM using a linear
number of processors.
Therefore, our paper addresses two augmentation problems related to bipartite
graphs. The first, a fundamental graph-theoretical problem, is how to add a set of
edges with the smallest possible cardinality so that the resulting graph is
2-edge-connected, i.e., bridge-connected, and still bipartite. The second problem,
which arises naturally from research on the security of statistical data, is how to add
edges so that the resulting graph is simple and does not contain any bridges. In both
cases, after adding edges, the graph can be either a simple graph or, if necessary, a
multi-graph. Our approach then determines whether or not such an augmentation is
possible. We propose a number of simple linear-time algorithms to solve both
problems. Given the well-known bridge-block data structure for an input graph, the
algorithms run in O(log n) parallel time on an EREW PRAM using a linear number of
processors, where n is the number of vertices in the input graph. We note that there is
already a polynomial time algorithm that solves the first augmentation problem
