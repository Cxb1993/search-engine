摘要 
本計畫緣起於近年來網際網路技術日益成熟，使網路成為生活的一部分，而各類的應
用成長迅速，Web Service 新技術的崛起，使得越來越多的程式開發都以Web Service架構
為主，因此對架構的需求也越來越多，也越來越多元化，例如軟體容錯功能(software 
fault-tolerance)、負載平衡（load balance）、資訊安全（informationsecurity）的功能。 
 
經由我們初步的研究發現，在Web Service 的應用上迫切的需要一個「泛用型資訊攔
檢架構（Information Interceptor and Inspection Framework, I3 Framework）」，使在Web Service 
上的應用，如資訊安全（information security）、電腦犯罪調查(Computer Forensics)、軟體
容錯(software fault-tolerance)、可信賴的網路服務(Reliable Web Service)及電腦審計
(continuous auditing )等，使其能提供完善的資訊攔檢功能。 
 
I 
目錄 
摘要...........................................................................................................................................I 
Abstract .....................................................................................................................................II 
目錄...........................................................................................................................................III 
前言...........................................................................................................................................1 
研究目的...................................................................................................................................1 
文獻探討...................................................................................................................................3 
研究方法...................................................................................................................................9 
結果與討論...............................................................................................................................12 
參考文獻： .............................................................................................................................14 
計畫成果自評部分...................................................................................................................16 
III 
研究一「泛用型資訊攔檢架構（Information Interceptor and Inspection Framework, I3 
Framework）」的需求，達到資訊攔檢的目的，並協助資訊科技的進一步發展。 
二. 實作「泛用型資訊攔檢架構（I3 Framework）」 
利用研究出來的需求及架構，將此架構建立在目前的中介平台系統上，以達泛用
化。 
 
2 
出[http://www.ubiq.com/nanotech/vonNeumann.html]。然而早期的容錯較著重於硬體方
面，軟體容錯則為較新的領域，目前已有相當多的技術，工具以及商業產品可用於提
升應用程式的可靠性(Reliability)及可復性(Recoverability)如 Firstwatch 
[http://www.veritas.com], watchd [HK93], WinFT [http://www.intrinsyc. com]和  
Wolfpack [http://www.microsoft.com].  
Firstwatch 針對不同的平台(如：Solaris， Windows NT，及 HP-UX)上重要應用服
務程式提供容錯的服務。Firstwatch 同時偵測硬體與軟體以確保應用服務程式的可供應
性(Availability)。一旦當錯誤發生，復原工作會自動執行，應用服務程式能在短時間內
重新提供服務。此類的應用服務程式例如：NFS Server, database server, Web server 和
corporate intranet servers。 
AT&T Bell Labs 在 UNIX 下發展 ”Watchd” 和 ”libft” 兩個元件提供軟體容錯技
術。Watchd 由一套分散式邏輯(Distributed Algorithm)所組成，可在單一或多台機器上
執行，它持續性的偵測應用程式的狀況，一旦偵測到錯誤，則負責將應用程式復原到
產生錯誤前的狀態。libft 則為一組 C 語言的 Library，負責提供應用程式作
Checkpointing，事件記錄(Log events)，例外處理及 N-Version 的程式設計。[HK93] 
此外 Intrinsyc 公司提出的 WinFT，專門針對 Win-32 的應用程式提供一組容錯的
Library。WinFT 所提供的功能有 : 自動偵測及 failed process 的重新啟動和對 critical 
data 作 checkpoint，以及回復(recovery)等。 
Wolfpack(亦即為 Microsoft Cluster Server)利用叢集(Clustering)發展而成。
Clustering 將一些較小的 Server 變成一組較大的群組 Servers，以提供較高的可供應性。
對使用者而言，Multiple Server 就像單一 Server 一樣，如果其中一個 Server 發生錯誤，
則其他 Server 將會接替其工作，而使用者僅會受到輕微的中斷。Wolfpack 擴充
Clustering 的觀念，新的 Server 不但能接替失誤 Server 的工作，且能監控應用程式及
其餘 Server 的執行情形。一旦發生失誤，應用程式的重要資料能在短時間內復原。 
我們在 87 年度起就已執行一個三年的國科會計畫並已提出一套相關的
FT-CORBA 雛形系統。而這套原型物件容錯服務系統已能支援一般 Passive Replication
的容錯能力，提高主機的可靠度，當主機發生異常狀況時，協助主機回復服務之功能。
其效能經測試亦達到我們預期的效能，其相關數據圖表已經詳細列在我們發表的論文
[LFY99]裡。但是在主要是為主動式容錯（Active Fault-Tolerant Replication）之 Web 
Service 卻會衍生出的巢狀呼叫重覆問題( Redundant Nested Invocation, RNI )。主動式
容錯是現今軟體為提高資料可靠性與服務持續性常使用的方法，重覆性呼叫（RNI）
問題是發生在當一個主動式容錯群組接受了客戶端要求並為完成客戶端要求而對群組
外的伺服器發出了巢狀呼叫而產生，因此在一個使用主動式容錯的伺服器群組內往往
需要一個 RNI 自動過濾機制以防止過多的重覆呼叫而發生不可預期的錯誤，不幸的，
現今大部份的作業系統為了多工及系統效能因素都使用多執行緒（Multi-Thread）以提
高 CPU 使用率，此舉大幅增加 RNI 檢測難度。因此一個受主動式容錯群組保護的 Web 
Service 亦會發上述問題，此問題將會破壞系統可移植性或降低系統執行效能等相關缺
點。 
4 
續執行自己預定的工作流程，不需要等待此訊息的接收端來接收或者處理此訊息。 
h.電腦審計 
國內外有關本計畫的研究情形 
有關於連續性審計，這是屬於新的審計技術層面,有助於革新現在的審計不週全之
處，現今討論相關技術的論文相當繁多，在此三篇有關於連續性審計研究論文： 
第一篇是 Continuous Online Auditing:A Program of Research[KSV99],其論文主要為
改善舊有的審計機制，提出連續性審計的方法，改善舊有會計資料不即時，資訊不對稱，
審計人員的道德風險，提出一個 Continuous Process Auditing System (CPAS)架構，可以即
時的紀錄各項流程的交易紀錄，改善舊有審計機制的缺點，並可以嵌入審計模組，監視
其資料流向，此優點符合圖 12.3 需求比較表第一、三點，不過因架構軟體技術層面高，
此缺點違背圖 12-3 需求比較表第二點,且因屬於內嵌式審計模組，審計規則若能依據審
計人員的要求而作即時變動更佳。 
第二篇是 Continuous audit Model development and implementation within a debt covenant 
compliance domain[WS01]，其論文主要為在現有的企業與銀行借貸環境中，如何應用在
Web service 所建立 Continuous audit model 可以讓銀行再對於企業借貸時，可以事先了解
借貸公司的財務狀況，可以盡量避免呆帳的發生，讓銀行處理相關的問題更有一份保
障。下面的圖示本篇論文提到模式的基本架構圖
Debt covenant compliance 
domain
Suppliers’
Web Server
Valuation Site’s
Web Server
Client’s
Web Server
Reliable system
Secure system
Auditor’s
Web Server
Reliable system
Secure system
Continuous Audit
Environment
Continuous 
Audit 
Agreement
Secure 
Transmission
Secure 
Transmission
Secure 
Transmission
•Integrity
•Security
•Availability
•Maintainability
•Authorization
•Confidentiality
•Integrity
•Authentication
Evergreen
Audit
Reports
1
5 2 3
4
 
 
圖 2: Debt covenant compliance domain 架構圖 
 
在此簡略說明其基本架構,其流程包括以下五個步驟: 
(a) 銀行須先和借貸公司委託的審計公司作聯絡,要求取得該借貸公司的基本財務
6 
出的警訊..等。 
(b) Client Application System 所提供的 WSDL Wrapper 來呼叫其 BPEL4WS 內部函式。 
(c) 透過 SOAP 中介平台當被審計系統在操作時，系統會紀錄正常和異常流程作業給
Audit Firm’s System。 
(d) Audit Firm’s System 是用 web service 當作基礎架構。 
¾ 審計的流程作業，包括以下三步驟： 
(a) 審計人員或審計公司的客戶(ex:投資者)藉由嵌入審計規則,提出要求至審計公司。 
(b) 審計公司查詢內部資料庫中公司回報的工作作業流程。 
(c) 藉由 xsl 轉成人性化網頁，讓審計公司客戶可以清楚了解其查詢結果。 
此架模模式可以讓審計人員可以針對不同的審計對象，提出不同的審計原則，且審計
人員可以輕易的了解查詢結果，不過其被審計端必須符合此基本架構，且必須是審計人員
或審計公司的客戶向審計公司嵌入審計規則，若發生弊端，是無法及時回應的,。 
本計畫提出的模式是以資訊攔截為基礎架構，可以在系統中嵌入審計原則，且隨時監
控，發生弊端會即時發出警訊，讓審計人員可以作即時回應。 
 
8 
用第一年的相關文獻探討的時間，研究各領域現有技術與需求差異（如圖 6 所示），並進一
步的研究本需求之不足處，確保需求之可行性及必要性，並修正不足之處，以達到需求完
整性。待需求研究完成時，再依據需求建構初步的泛用型資訊攔檢架構。因此，我們規劃
出此計劃三年的計畫時程表，如圖 7 所示。 
機制收集之資訊可以幫助輕易精準的判定
平台必須易於使用，軟體之技術門檻不能太高
透過自動化的程序，連續監測與分析通過系統的資料
系統需求
3
2
1
項目
 
圖 5: 系統需求表 
2
2
3
FT-SOAP
2
2
3
CORBA
Portable 
Interceptor
2
2
3
Software 
Fault-
tolerance
2
2
3
IDS
2
3
3
JMS
機制收集之資訊可以幫助輕易
精準的判定
平台必須易於使用，軟體之技
術門檻不能太高
透過自動化的程序，連續監測
與分析通過系統的資料
系統需求
3
2
1
項
目
 
圖 6:需求與現有技術比較表 
10 
結果與討論: 
計畫第一年: 我們認為要在應用程式層設計攔截(interceptor) 機制，需要了解程式的
運作，並要對不同的程式設計專屬的攔截。而在作業系統及硬體層設計攔截機制所需
要的程式能力及專業技術門檻高，且須對不同作業系統及硬體設計不同的攔截程式。
因此在中介層來設計攔截 (interceptor) 機制最符合連續性審計的系統需求。 
2322機制收集之資訊可以幫助輕易精準的判定
2322平台必須易於使用，軟體之技術門檻不能太高
3333透過自動化的程序，連續監測與分析通過系統的資料
Hardware Middleware OSApplication 
Interceptors at layer
Requirements
 
圖 8 : 需求比較結論表 
於計畫第二年: 我們主要建立一個能在 SOAP 環境下共同使用的攔檢架構，如圖 9所示。此
架構可在 SOAP 1.1 及 SOAP 1.2 環境中，利用定義出來的統一介面，完成資訊攔檢。 
API
…
C
Perl
VBA
Java
SOAP
Processor
Application
Server
H
T
T
P
XML
Parser
I3
 
圖 9 : SOAP 及泛用型攔檢器（I3 framework）架構圖 
第三年度：本年度完成二項工作進度，主要為將「泛用型資訊攔檢架構」擴充至主要的中
12 
參考文獻: 
[AAM03] Jim Alateras, Tim Anderson and Jim Mourikis, Open JMS User Guide, 
http://openjms.exolab.org, 2003. 
[ABB02]  Eric Armstrong, Jennifer Ball, Stephanie Bodoff and Debbie Carson, The J2EETM 1.4 
Tutorial, Addison-Wesley Professional, 2002. 
[AP02 ]   Apache Software Foundation, “Axis Architecture guide”, 2002. 
[FLC03]  John Fang, Deron Liang, C. H. Chen, and Fengyi Lin, “Fault-tolerant web service”, in 
Proceedings of 10th Asia Pacific Software Engineering Conference (ASPEC2003), 
Chiangmai, Thailand, pp. 310-319, December 2003. 
[FLF04]  John Fang, Deron Liang, and Fengyi Lin, “A Nested Invocation Suppression 
Mechanism for Active Replicated SOAP Systems”, in Proceedings of 11th Asia 
Pacific Software Engineering Conference (ASPEC2004), Busan, Korea, November 
2004. 
[GDB98]  Gary DeWard Brown, Advanced COBOL for Structured and Object- Oriented 
Programming, 3rd ed., Wiley, 1998. 
[HB99]   G. Hunt and D. Brubacher, Detours: Binary Interception of Win32 Functions, In 
Proceedings of the 3rd USENIX Windows NT Symposium, 1999. 
[HC01]   Richard Monson-Haefel and David A. Chappell, JAVA message service, O'Reilly, 
2000. 
[HK93]   Y. Huang and C. Kintala, “Software Implemented Fault Tolerance,” in Proc. of 22nd 
Fault-tolerance Computing Symposium, pp. 2-10, 1993. 
[IB02]    Romin Irani, and S. Jeelani Basha, AXIS: Next Generation JAVA SOAP, Wrox press 
inc., 2002. 
[ISACA02] ISACA Standards Board, Continuous Auditing: is it Fantasy or Reality?, Information   
Systems Control Journal, vol. 5, pp. 43-46, 2002. 
[JHG03]  Jeannine Hall Gailey, Understanding Web Services Specifications and the WSE, 
Microsoft Press, 2003.  
[KKJ02]  Kuchta, Kelly J., Forensic Fieldwork: Experience Is the Best Teacher., Information 
Systems Security, 2002, Vol. 3 Issue 1, p29-33。 
[KSV96]  Alexander KoGan, Ephram F. Sudit and Miklos A. Vasarhelyi, Implications of 
Internet Technology: On-Line Auditing and Cryptography, IS Audit & Control 
Journal, vol. 111, pp. 42-48, 1996.  
[KSV99]  Alexander Kogan, Ephraim F. Suit, and Miklos A. Vasarhelyi, Continuous Online 
Auditing: A program of Research, Journal of Information System, vol. 13, No. 2, pp. 
87-103, 1999. 
[LCY04]  D. Liang, P. E. Chung, Y. Huang, C. Kintala, W. J. Lee, T. K. Tsai and C. Y. Wang., 
NT-SwiFT: software implemented fault tolerance on Windows NT, Journal of 
Systems and Software, vol. 71, pp.127-141, 2004. 
14 
