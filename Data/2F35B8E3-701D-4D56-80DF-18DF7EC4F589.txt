 2
摘要 
以往在網路研究上討論的 QoS 主要專注於頻
寬大小、延遲長短、jitter 以及資料錯誤率等。對
雲端的 QoS 而言，除考量上述因素外，尚包括雲
間的 QoS、計費的公平性與正確性、資源運用的有
效性、資訊安全以及節能的重要議題。因此，全面
性探討雲端 QoS 時有其必要性。我們嘗試將雲端
的 QoS 分成六個類型，並分別依此六個類型進行
文獻探討、研究重點說明、可能的解決方案提出
等。此六類型分別為 Home Cloud QoS (HCQ)、
Solution Stack QoS (SSQ)、Inter-Cloud QoS (ICQ)、
Security with QoS (SecQ)、IO scheduling Quality 
(IOQ)以及 Energy Utility Quality (EUQ)。本成果為
國科會計畫「基於雲間網路跨層技術之雲端虛擬電
視服務品質管理」(NSC99-2221-E-327-050)第一年
之成果，依據原始規劃第一年針對多媒體應用(特
別是雲端虛擬電視)之「雲間網路跨層技術」進行
特性與需求分析、效能指標定義、建構虛擬平台測
試，其中“雲間”指的是 Inter-cloud communication，
我們將“多個雲”階層式分成多個 tiers，並結合跨層
技術，從實體層(硬體電路)到應用層(軟體服務)來
進行完整分析。我們從 MAC 層矽智財開發、Linux
驅動程式、Middleware、到 NS-2 中的軟體協定、
進行整體規劃多雲間之分散式計算。而整個虛擬平
台包含多核心實驗硬體平台、網路模擬器(Network 
Simulator, NS-2)軟體、以及 SDL-RT 規格描述語言
工具，用來完成能夠分析此六個類別效能的一個模
擬實驗平台。 
關鍵詞 
跨雲端服務品質、多雲雲端計算、雲間網路跨層技
術 
 
I. Introduction 
隨著有無線網路及硬體設備的普及，各式各
樣在網路上的應用不斷的推陳出新。在企業應用
上，如 ERP、CRM、EIP、EC、等，藉由網路將 B 
to B 及 B to C 的服務源源不絕的對外提供服務；
在個人服務上，如數位內容、行動導航、影音娛樂、
網路購物等，則因為網路而有蓬勃發展。由於網路
服務日趨重要，如何能夠提供一個穩定而有彈性的
網路應用服務架構也就是個重要的課題，雲端運算
也因此應運而生。顧名思義，雲端運算即是將各類
服務置於網際網路上，在前端，使用者只用連上網
路即可隨時隨地隨需求的取得所需資源及服務，而
無須介意服務提供者如何提供服務。而後端透過虛
擬化技術（virtualization），服務提供者可依據使用
者需求，快速的對資源進行調度與重整，以同時兼
顧成本與服務效能。一般而言，雲端運算架構主要
分成三的部份：IaaS、PaaS、SaaS。從最基礎的硬
體設施到最上層的應用服務，服務提供者可依需求
自由選擇建構自己的雲端服務，並對外提供公有
（public cloud）與私有（private cloud）之服務。
目前許多網路上知名的企業，如 Google、Yahoo、
Amazon、Facebook 等，皆已運用雲端運算對外提
供更好的服務，也實證了雲端的效益。 
雲端服務近年來成長迅速，各式各樣的服務
業者也應運而生。如何在眾多服務中自動的搜尋、
評估、建構、執行及終止，是一項挑戰。Johannes 
Kirschnick 等[10]即提出一個可自動視需求提供雲
端服務的架構，它主要將雲端的服務分成四個
layer：cloud infrastructure layer、abstraction layer、
orchestration layer 及 design layer。透過各項管理模
組的整理歸納，提供上一層的透通式服務，使用者
既無須了解下層負責的運作與關連，亦可依自身的
需求，由下一層管理模組量身訂做一組服務。這樣
的結構將使得使用者免於面對複雜的雲端服務環
境，從 deployment、installation、configuration、
execution、到 remove 都能達到自動化。然在其過
程中並未說明各個模組間在面臨 QoS 議題時如何
協同作業以確保需求被滿足。 
雲端運算日漸受到重視，也是各類研究爭相
探討的議題。Marios D. Dikaiakos 等[19]指出雲端
運算發展將面臨多項的關鍵性挑戰，包括 1.軟硬體
架構的重新設計思維：以往硬體發展所遵循的
Moore’s law 追求的是單一 chip 運算速度的成長，
將因此而移往運算單元及 tread 等個數的成長；
2.data management 的方式改變：資料儲存管理不再
受地域的侷限，透過 Internet，跨地理區域的資料
儲存、管理與運用，將是雲端運算的主要型態；3.
跨雲運作：對使用者而言，雲端運算是一個完整的
運算服務，不論它由單一雲提供或是由跨雲協力完
成，而這也跳脫傳統單一服務提供商提供全部服務
的概念；4.安全與隱私的確保：當資料由使用端搬
上雲端共通設備存取時，許多隱私及機敏性資料亦
 4
2. 解決方案堆疊QoS (Solution Stack QoS, SSQ) 
為針對特定應用之QoS，特定之應用如網路電
視，或網路電視中某一主要功能之應用程式進行資
源管理，因此屬於"intra-VM”之QoS，如同傳統所
說QoS，但在一個VM 內部必須依據1.中所述之
HCQ 所分配之資源，再進行資源管理與分配以提
供給特定之應用，因此是要針對雲端計算來說進行
規劃，因此也是PaaS QoS。 
為實現雲端運算效能的最佳化，Jim Li等[1]提
出在QoS保證下的performance model以達成雲端應
用服務在發展、部署及運作上的最佳化。在文中運
用了objective function 及feedback control機制來實
現。但似乎未將memory的配置、通訊的因素以及
運作成本做考量，這將使得機制的運作不符實際狀
況。 
 
3. 雲間QoS (Inter-Cloud QoS, ICQ)：  
雲與雲之間以排程或競爭方式取得資源之方
法，特別是cloud-servers 對cloud-clients 之頻寬與
其他各種資源之支援。如果是針對整個應用系統來
說，牽涉到的可能同時是家庭雲 (home cloud, 
private cloud)以及公眾雲(public clouds)。因此我們
以雲端計算之堆疊來說明。下圖二中，cloud clients 
與cloud servers 為一複雜之網路結構，某一server 
對client與之應用程式服務可能是一對一、一對
多、多對一、多對多，因此分成Application 應用
程式層、Platform 元件以及服務提供層、以及較實
體之計算、網路、儲存裝置、設備等之Infrastructure 
基礎建設層，也就是說可以由平台層提供各種軟體
元件以及服務(solution stack, service bundles 等)來
由應用程式呼叫以架構某個應用或虛擬電腦(提供
人機介面給user)，而且這些元件以及服務是在建置
有實體電腦、網路、以及儲存裝置上執行的。因此
由這三層我們將研究如何將QoS 控制平面(QoS 
control plane)，跨在這三層上進行品質管理。 
Maycon L. M. Peixoto等[6]則提出了metascheduler 
架構作為解決雲間QoS的方案。 
 
Definitions: 
 Ap plication = More Than YouTube, the TV blog 
(on/off line video sharing) 
   Platform = Services each comprising a Solution Stack 
(Solution Stack as a Service). The Application mount the 
stacks. 
 Infrastructure = union of {Virtual cores}, {Networks}, 
{Storages} 
圖二、雲端算之三個主要協定層以及跨此三層之
QoS 控制平面。(出處：Wikipedia) 
 
對使用者而言，如何在眾多雲端服務中找到合適的
服務提供者，且其至少要滿足對效能、成本、時間
上的要求，是需要被思考的。Rajkumar Buyy等[9]
則視電腦運算資源如同一般公用資源（如水、電、
瓦斯）需為一般使用，為因應商業市場需求而提出
了以市場導向之雲端架構，嘗試以高階的角度將雲
端的資源與需求管理加以描述與建構，並參考實際
市場交易的狀況提出了雲間交易市場的運作架
構。在文中主要定義了SLA Resource Allocator，其
中包含了 VM Monitor 、 Pricing 、 Dispatcher 、
Accounting、Service Request Monitor等5個模組已
同時滿足使用者與服務提供者的需求。但文中並未
針對細部需求的運作做說明，如QoS與服務資源效
能有所衝突時如何調和、跨雲間如何進行資源的搜
尋與配置、運作結果如何回饋以便能動態因應市場
需求變化等。Rafael Moreno-Vozmediano..等[20][21]
為因應多雲整合並能即時重組服務雲而提出了部
署多雲虛擬叢集的方式，透過前端接受 job 
request，並視任務需求動態地由多個雲抽出部分
node組成虛擬服務雲以完成需求任務。他們利用
Sun Grid Engine (SGE) cluster (包含一前端front 
end以及一些工作節點worker nodes)為運作基礎，
嘗試使用現有的雲機構，包括Amazon EC2 (Europe 
and US zones) and ElasticHosts進行實驗，並驗證其
在 不 同 組 合 下 的 throughput 、 Asymptotic 
 6
同傳統 Cross-layer control，跨 VMs 時，VMs 的
上層 (tier) 有 Inter-VM control module(ICV) 和
inter-VM inspection module(ICI)，分別是控制系統
中的 controller 和 observer，VMs 都是 plant。圖中
小圓圈是用來和 goal 比較的比較器，用來接收
services 分析模組或 service 應用程式本身的
requests，例如 bandwidth requests，以用來達成
HCQ。數個 home cloud 之上還有一層  cloud 
control module 和 cloud inspection module，一樣對
應到控制系統的 controller 和 observer，底下的
cloud 是 plant。
 
 
圖三、Multi-tier cloud computing architecture. 
 
1. Hardware execution module：實際負責執行各
VM的HW，並將執行結果回報給各VM。執行過
程 中 並 接 受 VM control module 的 control 
command以確保各項QoS的達成。 
2. VM control module：依據VM Inspection module
傳回的QoS監測 data，以及 Inter-VM control 
module所下達之control command，進行即時QoS
演算後，下達QoS相關的control給後續執行相關
module，作為動態調節以符合現時QoS之需求。
其內sub module包括SSQ、SecQ、IOQ、EUQ等
處理機制以及對HCQ的溝通介面。 
3. VM Inspection module：接受Hardware execution 
module傳回的QoS監測data，經過轉換分析後，
提供適當的QoS監測data給VM control module及
Inter-VM Inspection module，作為QoS需求滿足
之調整參考。 
4. Inter-VM control module ： 依 據 Inter-VM 
Inspection module傳回的QoS監測data，以及
could control module 所 下 達 之 control 
command，進行即時QoS演算後，下達QoS相關
的control給後續執行相關module，作為動態調節
以符合現時QoS之需求。內含sub module包括
SSQ、SecQ、EUQ、HCQ等處理機制以及對ICQ
的溝通介面。 
5. Inter-VM Inspection module ： 接 受 VM 
Inspection module傳回的QoS監測data，經過轉換
分析後，提供適當的QoS監測data給Inter-VM 
control module及cloud Inspection module，作為
QoS需求滿足之調整參考。 
6. cloud control module：依據 cloud Inspection 
 8
織架構的特性。以下分就四個部份來做說明： 
1. 產生：由於雲端是一個分散式系統，沒有所謂
global variable 的觀念，整個 system 中並不存在
可讓各個 block（在此稱模組）共同存取的空
間。而為使 system 內的 module instance 可彈性
增加，因此在本計畫中，我們運用上一層可組
織下一層模組的功能，任意的在任一階層產生
下一階層所需求的模組種類及數量，藉此來彈
性建構具有同一行為模式的同一模組數量與關
連性。 
 
圖五、使用者 request 時，產生之模組。 
 
2. 群組化：由於在 SDL 中，每一個產生的 block 
instance 都被自動賦予唯一的一個識別碼
（PID），並在產生的同時即獲得。因此為使未
來在運用及呼叫上能有所遵循，在建構子
instance 之後，父 instance 建立 PID mapping 
array，以使在系統運作時不論子 instance 如何
產生及消滅時都可透過 array 取得正確 PID 以
對其進行呼叫與運作。而在此 array 建立時則可
依需求將不同的 PID 組成不同的 array，以形成
不同群組。而群組內所對應的 PID 也可因需求
不同，彈性的與其他群組進行群組間 instance
重組甚至共用。亦即如同一VM可被不同的VM 
set 所包含並同時為其服務。惟使用 SDL 模擬
時，因 SDL 並非平行運算架構，因此同一時間
只能以一個 instance 進行 simulation。 
圖六、將動態產生之模組進行群組化。 
 
3. 任務執行：由於 PID 是唯一識別碼，故縱使
instance 的名稱相同，亦有不同的 PID 做為識
別，是 call by PID。（除非名稱唯一，則可以 call 
by name）。而任一階層的 instance 欲 call or send 
a signal 給任一個階層的任一 instance，皆需透
過先前建立的 PID mapping array 取得唯一的
PID 才能正確運作。 
4. 終止：當任一個 instance 需結束其 life 時，可進
行自我終止，而該 PID 亦將不再使用直到系統
重新啟動。 
透過此四個步驟，相信可讓未來在 dynamic 
cross-layer control 的模擬過程中更接近真實狀態。 
 
以虛擬電視所需的多媒體串流為例，各子系統彼此
signaling 流程如下： 
 
Always start at Tier-1’s application layer: 
1. Cross-layer: At Tier-1, user initiate (application 
layer) request  Virtual Machine (VM) serve 
cross-layer streaming  Physical Layer  Done. 
2. Inter-VM/Intra-cloud: User initiate (application 
layer)  Network Protocol and Virtual Machine 
(VM) Service not available  Start 
inter-VM/Intra-cloud control: 
Re-initiate request  Select VM from Tier-2 
VM set (Aggregated/Integrated) with 
TEPA/TEPI back to tier-1: VMx available, 
selected, and serve cross-layer streaming  
Physical Layer  Done 
3. Inter-Cloud: User initiate (application layer)  
Network Protocol and Virtual Machine (VM) 
Service not available  Tier-2 VM set 
(Aggregated/Integrated) service not available  
Start inter-cloud control: 
Send request of tier-2 to tier 3  re-initiate 
request (control command)  Select cloud from 
Tier-3 cloud set (Aggregated/Integrated) 
TEPA/TEPI  cloudx selected  back to tier-2: 
Start inter-VM/Intra-cloud control. 
4. 一般化之後流程 
Tier N send request to Tier N+1; Tier N+1 process 
re-initiates request (control command) at Tier-N+1 
 10
組織成 VM tier 的 control, inspection, 和 execution 
modules。透過 VM set control module 中所取得的
execution ID，第一組 VM 執行完畢並回覆半完成
之結果(ReturnResult)之後，將交下一個 VM 執行，
直至任務結束(ReplyResult)，一直返回最上層 Tier
為止。 
這個例子可以一般化為任意 Tier 時接收任務之
過程。舉例來說，如果將 VM set 和其下 VM 這兩
個 Tier 視為 Tier-n 和 Tier(n-1)，那麼 Tier(n-1)取得
execution ID 之後，執行過程發現需要其他 Tier 中
的 instance，那麼會由這個本地 Control module 發
出 request，重新傳遞 request。 
圖九和圖十為發送 request 時，透過 Inspection 
Module 檢查 QoS 狀態(可以為 6 個 QoS 其中之一
或者多目標)，繼續轉送 request 或執行 reqest 的情
形。單一 QoS 目標時，VM set controller 直接查詢
本地 VMs 的能力或屬性，多目標時，VM set control 
module 執行 compromise，以解決目標之間之衝
突，然後查詢本地 VMs 的能或屬性。圖九為透過
Inspection ID 取得 QoS inspection 結果，回報本地
VMs 無法滿足 QoS 要求，轉送 Request 到上一個
Tier 之 Inter-Cloud control module，再由 Inter-Could 
inspection module 取得新的 QoS 狀態，以查詢哪一
個新的 VM set 可以執行任務的過程。圖十則為，
本地 VMs 可以執行任務的過程。 
透過以上模擬，我們發現： 
1. 很容易估計使用者發出 request 到開始服務的
Initial Latency：透過 Inspection module 的統計
資料，可以快速找出可以提供服務的最後
instance。每一層 Tier 的 Inspection 只維護下一
個 Tier 的 QoS 狀況，透過我們所提出的
Hierarchy，整個 Global 的 QoS 是分散在各個
Tier 中的。 
2. 很容易估計 Addressibility (Availability)：如果將
Latency 設定 Timeout，此點變很容易估計。 
3. 很容易發現哪一個 instance 為害群之馬：我們
可以透過 Control module 的設計，讀取
inspection module 之資訊避開有害、或者 Initial 
Latency 太大、或者 QoS 遠不能滿足的
instance，程式容易設計。 
圖十一之後為各模組之模擬。 
 
 
IV. 結論 
階層式 Cross-Layer 控制觀念，我們延伸在跨
Cloud Tier 的 QoS 控制上，除了達到狹義
Cross-Layer 之 QoS 控制之外，也達到各種不同廣
義多重 QoS 目標之滿足(例如 Section I 之 6 種 QoS
要求)之外，甚至對於硬體以及嵌入式系統之設計
可以透過此架構來進行(如附錄發表論文)。 
未來我們將此架構應用在不同實例中加以實
作，以求個別以及同時達到： 
 提供 PaaS：動態群組 VM 提供服務。 
 提供 SaaS：執行 cross-layer 運算提供最佳服務。 
 提供 IaaS：動態利用實體網路與伺服器。 
 
References 
[1] Jim (Zhanwen) Li, John Chinneck, Marin Litoiu, and 
Gabriel Iszlai , “Performance Model Driven QoS 
Guarantees and Optimization in Clouds,” 
[2] Yunqi Ye, Nisha Jain, Longsheng Xia, Suhas Joshi I-Ling 
Yen, Farokh Bastani, Kenneth L Cureton and Mark K 
Bowler, “A Framework for QoS and Power Management 
in a Service Cloud Environment with Mobile Devices,” 
2010 Fifth IEEE International Symposium on Service 
Oriented System Engineering. 
[3] Hady S. Abdelsalam, Kurt Maly, Ravi Mukkamala, 
Mohammad Zubair and David Kaminsky, “Analysis of 
Energy Efficiency in Clouds,” 2009 Computation World: 
Future Computing, Service Computation, Cognitive, 
Adaptive, Content, Patterns, 
[4] Karthik Kumar and Yung-Hsiang Lu, “Cloud computing 
for mobile users: can offloading save energy?” IEEE 
Computer, vol. 43, no. 4, April 2010, pp. 51 – 56. 
[5] Anton Beloglazov and Rajkumar Buyya, “Energy Efficient 
Allocation of Virtual Machines in Cloud Data Centers,” 
2010 10th IEEE/ACM International Conference on Cluster, 
Cloud and Grid Computing, 
[6] Maycon L. M. Peixoto Marcos J. Santana J´ulio C. Estrella 
Thiago C. Tavares Bruno T. Kuehne and Regina H. C. 
Santana, “A Metascheduler Architecture to provide QoS 
on the Cloud Computing,” 2010 17th International 
Conference on Telecommunication, 
[7] Meng Xu, Lizhen Cui, Haiyang Wang and Yanbing Bi, “A 
Multiple QoS Constrained Scheduling Strategy of Multiple 
Workflows for Cloud Computing,” 2009 IEEE 
 12
Appendix A. SDL simulations with MSC 
 
圖八、Service assignment with multiple instances 
 
 14
 
圖十、本地端可滿足 QoS 要求，直接執行任務的流程。 
 
 16
 
圖十二、Multiple VM Instance 時各層 Inspector 取得廣義 QoS Status 的過程。 
 
 
 18
 
圖十四、單一 VM instance，本地端無法滿足 QoS 要求，轉發 Request 給其他 Tier 的流程。 
 
 
 20
 
圖十六、多重 VM instances 時 Request, Job assign, Execution, 即時回報 QoS Status 的過程。 
 
 22
國科會補助計畫衍生研發成果推廣資料表 
日期：   年  月  日 
國科會補助計畫 
計畫名稱：基於雲間網路跨層技術之雲端虛擬電視服務品質管理 
計畫主持人：陳朝烈 
計畫編號：NSC99-2221-E-327-050- 領域：資訊(雲端計算) 
研發成果名稱 
（中文）整合公私有雲端伺服器提供最佳服務品質之架構與方法 
（英文）Architecture and Method of Integrating Public and Private 
Clouds for Optimal Quality of Services 
成果歸屬機構 國立高雄第一科技大學 
發明人 
(創作人) 
陳朝烈、林志勳 
技術說明 
（中文） 
跨公私有雲端伺服器，可兼具多目標之服務品質指標，容易維護
之系統架構。可參考現有公有雲能提供之資源，來設計私有雲端
伺服器，大幅降低成本。 
（200-500 字） 
（英文） 
Integrating present public clouds’ resources, to design a very low-cost 
private cloud or clouds featuring easy maintenance. 
產業別 
資訊電子 
技術/產品應用範圍 
消費性電子、雲端計算、3C 
技術移轉可行性及預期
效益 
1. 施作簡單，容易產生產值。 
     註：本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。 
 
25
:úû?Z[\>]^_O¡
¢£À:
:`Ì0ÅÆab¨"NOócdefg¡
:sßààhijk¹lmn¹?@ÆÇopqrsktØáâtØuvO3µ
¶¡
:ÝÞ¨"¨ÈÌÍ«wZ[ÕÖx]Z[ÕÖy«ïëç¡
:efz{¡
:|àúû Tutorial>Plenary Talk>Keynote>Æüý demo¡
:01®?Z[\]^_O}~¡
2. ?=?@ poster^o«}]À%¼ SessionÕÙ·ô´µ¶
«pqOral  Session ¹«^o¹4 Sessions¦¸
¹àc`9^o¡
á>2
,"2pq23¯]®·¹#9pq¡"2pqÁ}
¨6[2?=Õó¯]4¡ª¬­®ó¯¨"2mn>?@Ù
·ô0123 ¡¡
¢>£w¤¥ !:¦§
pq¨.@©ª
«>x¬
 ARCHITECTURE EXPLORATION OF QOS CONTROL SILICON INTELLECTUAL 
PROPERTIES FOR CROSS-LAYER DESIGNS IN WIRELESS NETWORKS 
 
Chao-Lieh Chen, Li-Shin Chuo, Wu-Liang Cheng, Chun-Ching Wu, and Chien-Hao Lai 
 
Dept. EE, National Kaohsiung First University of Science and Technology, TAIWAN 
frederic@ieee.org 
 
ABSTRACT 
We propose an architecture exploration scheme for QoS 
control Silicon Intellectual Properties (SIPs). The scheme 
integrates network simulator (NS-2), embedded Linux 
operating system, Linux driver, Electronic Design Automation 
(EDA) tools, extended on-chip bus, and real Field 
Programmable Gate Array (FPGA) hardware for 
comprehension of how data bus width and clock rate affect QoS 
performance in wireless networks. Software and hardware 
co-design flow and programming paradigm for evolving the 
FPGA prototype toward a platform-based reusable SIP with 
driver and cross-layer interface are also depicted. Three QoS 
control experiments in video streaming over HCCA, EDCA, 
and WiMAX wireless technologies demonstrate the proposed 
exploration scheme effectively helps engineers comprehend 
impacts of architectural design parameters on networking 
performances in wireless multimedia communications. 
 
Index Terms—architecture exploration, silicon intellectual 
property, QoS, algorithm and architecture co-design 
1. INTRODUCTION 
Cross-Layer Designs (CLDs) provides novel improvement of 
wireless multimedia networks. Many of these CLDs comprise 
implementations of software and hardware. To the industry, the 
hardware part can be components of media access control 
(MAC), physical (PHY), multimedia encoders and multimedia 
decoders. These components are usually wrapped as silicon 
intellectual properties (SIPs) which are compliant to some 
on-chip bus protocols, such as AMBA [10]. Modern network 
processors integrate these SIPs with MCU and other 
peripherals on the on-chip bus platform. The network 
processors then become multimedia networking SoCs after the 
integration. 
In design of networking SIPs, it is essential to explore 
cross-layer algorithms and hardware architectures. However, 
traditionally it is cost-ineffective to perform realistic Electronic 
System Level (ESL) verification for a wireless network Silicon 
Intellectual Property (SIP) due to needing lots of costs. The 
costs include deployment of communication devices, 
implementation of physical layer (PHY) circuitry comprising 
RF and analog front-end of these devices, and expensive 
equipments for PHY circuitry measurements. Moreover, 
porting and debugging of embedded software including drivers, 
real-time operating systems, and protocols are also 
time-consuming. Co-exploration of CLD algorithms and 
hardware architectures becomes even more difficult. This is 
because the solution space expands extremely large when we 
consider collaboration of several protocol layers.  
Modern commercialized ESL tools, such as [1][2], provide 
abstractions as defined in [11]. In these tools, the abstraction 
comprising SystemC [7], Instruction Set Architecture (ISA), 
bus emulator, and virtual SIPs in order to let engineers to 
comprehend a SoC embedded system. Via these tools, SoC 
engineers are able to partition a system into software and 
hardware portions. As Fig. 1, programmers can perform 
hardware-software co-simulations of an SIP according to 
observable events and transactions by writing executable 
software programs and synthesizable Hardware Descriptions 
Language (HDL) codes. The ultimate objective of ESL is to 
provide highest level of abstraction while at the same time 
achieve more realistic measurement to enhance probability of 
implementation success. 
 
Programmer View
(event)
Programmer View
(transaction)
Cycle Accurate
(Logic Signal)
Synthesizable
Behavior
Cycle Accurate
Behavior  SoC Platform
Embedded Linux 
FPGA(s) with AMBA Extension
Target SIPs of MAC/PHY/Codec
Middleware
Driver
SoC bus protocol
signaling from/to SIPs  via Ethernet
Personal Computer
EDA NS-2
Fig. 1.Traditional ESL verification. Fig. 2. Proposed verification 
platform. 
 
However, modern ESL tools lack networking behavior 
verification, least of cross-layer design support. Currently, 
many SoC vendors extend on-chip bus outward to PCB and 
connect it to FPGA for SIP verification. Therefore, 
cycle-accurate and bus transaction verifications become easy 
and more realistic using true FPGA hardware. To comprehend 
true behavior of a networking embedded system featuring CLD, 
we convey events from network simulator, the NS-2 [9] and the 
NS-2 provides scenarios of video streaming over wireless 
network topologies. 
 the programming model, we see the proposed verification 
extends upward to networking level and downward to true 
FPGA hardware signals in addition to SoC bus transactions. On 
successful verification, the SIP is ready for SoC integration 
with its Linux driver as well as the cross-layer signaling 
interface. 
Traditionally, networking performances of an SIP are not 
measurable. With the proposed verification framework where 
we exploiting the network simulator, we see how the FPGA 
hardware behaves under cross-layer networking by tracing 
packet delay, jitter, throughput, and many other performance 
indices traceable in the network simulator. 
copy_to_user(buf,data)
Read(driver,data)
Write(Socket,data)
Read(Socket,data)
Control cn
Tn
Read(Socket,data)Write(Socket,data)
DATA
iowrite32(data,address)
Tn+1
Network
State sn
Write(driver,data) copy_from_user(data,buf)
ioread32(data,address)
Tend
…… …
…… … …
close(Socket)
close(Socket)
Remove_dev
close(Driver)
NS2
Socket Server
Middleware
Socket  Client Linux Driver
T0
Connect Socket n
Listen Socket n
Accept Socket n
SIP
in FPGA
QoS Controller 
SIP
DATA
On-chip bus write 
transaction
On-chip bus read
transaction
 
Fig. 3. The software/hardware Co-Programming Model. 
3. VERIFICATION OF QOS SIPS FOR WIRELESS NETWORKS 
In this section, we implement three MAC layer QoS 
controller designs in [12], [13], and [14] into SIPs and then 
perform the proposed verifications based on the cross-layer 
mechanisms proposed in these literatures for comprehension of 
how data bus width and clock rate affect video streaming over 
Hybrid Coordination Function (HCF) Controlled Channel 
Access (HCCA), contention-based Enhanced Distributed 
Channel Access (EDCA) and WiMAX OFDMA TDD 
scheduler-based wireless networks respectively. The 
environment and NS-2 simulation parameter settings remain 
the same as their respective original settings. The video encoder 
and transmitter module in NS-2 is the Evalvid [8]. 
3.1 Verification of modified EDF scheduling in HCCA 
The first is the modified Earliest-Deadline-First (EDF) 
scheduling [12] which is a representative of contention-free 
scheduling for Time-Division Multiplexing (TDM) 
communications. The modified EDF features four policy rules 
that assign higher score of emergency to a flow if the flow has 
been waited time intervals closer to the deadline. The deadline 
is adapted by upper layers according to instant packet length 
and traffic specification. 
Through the proposed verification, we find the behavior 
level difference between the software (labeled “SW”) and 
hardware EDFs (“HW”). Hardware EDF outperforms the 
software one because of using higher sampling frequency. 
Therefore, at the physical IC level, shown in Table 1 we further 
identify the clock (CLK) frequency lower bound in terms of the 
system clock (SCLK) for power saving purpose. However, we 
see the upper bound of the bandwidth utilization when we are 
using constant transmission opportunity (TXOP) and SI. 
3.2 Verification of MAC-centric controller in EDCA 
The second is the contention window minimum (CWmin) 
parameter adaption cooperating with upper layer’s goal 
back-off delay control again according to instant packet length 
and traffic specification of the flow [13]. 
Shown in Table 2, labels “-“ and “X” respectively stand for 
not using and using the cross-layer mechanism. Thus, a 
parenthesis (-, X) stands for applying cross-layer mechanism to 
video V2 but video V1. Through the proposed verification, we 
find that no matter the CWmin adaption is implemented in 
software (SW) or in hardware SIP (HW), the CLD not only 
helps video streaming but also helps background traffic having 
stable throughputs represented by mean µbk and standard 
deviation σbk in kbps. However, when using different data 
register size for MAC access delay, goal back-off delay, and 
specified deadline in unit of slots (one-slot = 9µ seconds), the 
truncating error do affect the streaming quality as shown in 
Table 3. 
3.3 Verification of MAC scheduler in WiMAX OFDMA 
The third SIP is a priority controller associated with 
additional TXOP and goal delay controls for WiMAX OFDMA 
system. The implementation of original design in [14] fails in 
maintaining quality of H.264 VBR video streaming. Therefore, 
we adopt the same rule base of EDCA in Section 3.2 for 
WiMAX priority and goal delay control. The average quality of 
downlink video streams becomes 33.1dB when performing 
cross-layer cooperation of the MAC layer priority and TXOP 
controllers and transport layer software goal delay controller. 
The goal delay controller observes packet length, loading, and 
normalized transmission rate as inputs to keep the goal delay 
below the deadline of an rtPS flow. If goal delay controller is 
not exploited, that is, without cross-layer mechanism by only 
using the MAC layer priority controller and TXOP controller, 
the streaming quality of the video becomes only 27.7 dB. Data 
register size variation from 7-bit to 11-bit does not obviously 
affect the PSNR quality. However, the intra-class fairness 
shown in Table 4 does show that data widths of the input 
variables have obvious impact. 
4. CONCLUSION 
We propose a verification method that explores hardware 
architectural parameters’ impacts on streaming and networking 
qualities. We implement three designs of MAC layer 
controllers which collaborate with upper layer protocols to 
form CLDs and through the proposed verification we 
comprehend the impacts of clock frequency and data bit-widths 
on quality of video streaming and networking. The verification 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/16
國科會補助計畫
計畫名稱: 基於雲間網路跨層技術之雲端虛擬電視服務品質管理
計畫主持人: 陳朝烈
計畫編號: 99-2221-E-327-050- 學門領域: 資訊
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
