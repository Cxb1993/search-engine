NSC Final Report
NSC 97-2221-E-001-006-MY3
Bow-Yaw Wang
Institute of Information Science
Academia Sinica
October 21, 2011
Abstract
Intuitionistic reasoning has been used in formal methods. In contrast to
classical reasoning, intuitionistic reasoning does not dictate the law of ex-
cluded middle. Subsequently, any statement must be proven constructively.
In theorem proving, intuitionistic type theory is the foundation of the proof
assistant COQ. Through Curry-Howard correspondence, a program can be
synthesized from a proof of a theorem. In this project, we aim to investigate
applications of intuitionistic reasoning in model checking. This report will
summarize our findings in the project.
1 Introduction
A high school student should be familiar with the following theorem:
Theorem 1. There are infinitely many prime numbers.
Proof. Suppose there are finitely many prime numbers p0, p1, . . . , pn. Consider
the number M = 1 + p0p1 · · · pn. Clearly, M 6= pi for every 0 ≤ i ≤ n. M is
not a prime number. Hence M is a product of prime numbers. However, pi does
not divide M for every 0 ≤ i ≤ n. M cannot be a product of prime numbers. A
contradiction.
1
program and vice versa. Indeed, intuitionistic logic-based proof assistants such as
COQ allows to extract programs from proofs. If one would like to write a program,
he or she first specifies intended properties of the program as a formal statement.
Then the person tries to construct a formal proof of the statement. If a proof is
found, COQ can extract a program from the proof. One immediately gets a correct
program by construction [3].
Intuitionsitic logic has also found its applications in model checking [9, 10].
Consider checking whether every reachable state satisfies a given state predicate.
Although the complexity of the verification problem is linear in the number of
reachable states, the number of reachable states is in fact exponential in system
description. The state explosion problem significantly impairs the capacity of
model checking algorithms. Many techniques have been proposed to alleviate the
problem. Assume-guarantee reasoning is one of the most promising techniques
among them.
In assume-guarantee reasoning, a system is decomposed into components. In-
stead of verifying the composition entirely, one tries to verify each component sep-
arately. However, a single component rarely satisfies the intended property alone.
It often makes contextual assumptions and works correctly only under such as-
sumptions. Assume-guarantee reasoning verifies a component under a given con-
textual assumption. If the component indeed is correct, one then checks whether
the contextual assumption is fulfilled by the other components of the system. One
represents the aforementioned steps in the following rule:
M0‖A |= pi M1 |= A
M0‖M1 |= pi
where M0,M1 are the components of a system, pi is a state predicate, and A is a
contextual assumption. M |= P denotes that M satisfies P .
Assume-guarantee reasoning rules are abundant. They depend on the compu-
tation model, the semantics of composition, and even properties of interest. The
soundness of assume-guarantee reasoning rules hence need be proved by cases.
Depending on the semantics, proof of soundness may be rather involved some-
times. In the setting where system behaviors are regular languages, compositions
are intersections, and satisfactions are language containments, soundness can be
established syntactically. Consider
M0 ∧ A =⇒ pi,M1 =⇒ A `M0 ∧M1 =⇒ pi.
The proof system LK for classical propositional logic gives a formal proof of
the statement automatically. Since regular languages form a Boolean algebra and
3
learning problem. In [12], the authors adopt the L∗ learning algorithm for regular
languages to synthesize contextual assumptions in assume-guarantee reasoning.
Finding contextual assumptions can now be carried out automatically.
The learning-based technique however is not very scalable. Since the L∗ algo-
rithm is an explicit algorithm, it enumerates every states in a contextual assump-
tion. If a contextual assumption has, say, thousands states, the L∗ algorithm may
need millions of queries to infer the contextual assumption. Since a model check-
ing algorithm is deployed to answer such queries, millions of model checking runs
are needed to infer a contextual assumption. This does not appear to be practical.
Indeed, empirical results suggest that automated assume-guarantee reasoning may
not perform in practice [11]. It is important to improve learning-based techniques
in automated assume-guarantee reasoning.
If one analyzes the scalability problem ofL∗-based automated assume-guarantee
reasoning, it is not hard to see that the explicit learning algorithm is the bottle-
neck. In model checking, it is known that explicit algorithms do not perform as
well as implicit ones. Adopting an explicit algorithm to infer contextual assump-
tions can hardly be scalable. Subsequently, it is questionable whether explicit
assume-guarantee reasoning can outperform implicit monolithic reasoning. Infer-
ring contextual assumptions explicitly may be too expensive to be competitive.
In [7, 6], we propose to adopt a learning algorithm for Boolean functions in
assume-guarantee reasoning. Instead of inferring contextual assumptions explic-
itly, our new technique generates an implicit representation of contextual assump-
tions. Since implicit representations can be exponentially compact than explicit
ones, our implicit learning-based technique is able to outperform implicit mono-
lithic reasoning in hardware test cases. To the best of our knowledge, implicit
learning is the first automated assume-guarantee reasoning technique that can per-
form better than monolithic reasoning.
Learning Boolean functions turns out to be useful in program verification as
well. Consider the following loop annotated with pre- and post-conditions
{δ} while γ do S done {}.
Our goal is to verify that the annotated loop indeed conforms to the given pre- and
post-conditions. One way to achieve this goal is to compute an inductive invariant
of the loop. An inductive invariant is an assertion that holds for every iteration
of the loop. If there is an inductive invariant weaker than the pre-condition but
stronger than the post-condition, we conclude that the annotated loop does con-
form to the given annotation.
5
3 Discussion
Our experiences in applying algorithmic learning to formal verification are pos-
itive. We are able to improve the capacity of automated assume-guarantee rea-
soning by adopting a new learning algorithm. We also develop a new framework
for program verification using the same learning algorithm for Boolean functions.
We certainly will investigate more applications of algorithmic learning in other
aspects of formal verification. Particularly, it will be most interesting to see if al-
gorithmic learning allows to avoid fixed point computation in most static analysis
techniques.
Integrating our learning-based technique with others is also interesting. Tech-
niques for alleviating the state explosion problem have been investigated in differ-
ent contexts. For instance, one can prove global properties by local proofs [26, 25,
13, 14, 15]. In local reasoning, local proofs are computed again by conventional
least fixed point computation. Yet it suffices to find just one local proof for global
properties. One wonders if the learning-based technique can be adopted to infer
local proofs without fixed point computation.
For assume-guarantee reasoning, our implicit learning technique works well
for synchronous computation models. Our experimental results show that implicit
learning may not perform for asynchronous models. Indeed, assume-guarantee
reasoning fails to improve the capacity of monolithic reasoning on asynchronous
examples such as dining philosophers. For L∗-based explicit techniques, they
appear to perform reasonably well for asynchronous models. It is unclear why
implicit learning fails to perform despite of its scalability. One of our collaborators
suggests us to investigate on this problem.
We recently learned of another interesting application of intuitionistic reason-
ing in circuit verification. For combinational circuits, it is well-known that com-
binational loops incur difficulties in their analysis. If one models combinational
loops in classical logic, one can easily get absurdity in the model. Yet some com-
binational loops are benign. How to analyze such benign loops in combinational
circuits is of practical importance. Interestingly, one can adopt intuitionistic logic
to break benign combinational loops. It would be interesting to identify the con-
nection between the applications in circuit analysis and assume-guarantee reason-
ing.
7
[6] Yu-Fang Chen, Edmund M. Clarke, Azadeh Farzan, Fei He, Ming-Hsien
Tsai, Yih-Kuen Tsay, Bow-Yaw Wang, and Lei Zhu. Comparing learning
algorithms in automated assume-guarantee reasoning. In ISoLA (1), volume
6415 of LNCS, pages 643–657. Springer, 2010.
[7] Yu-Fang Chen, Edmund M. Clarke, Azadeh Farzan, Ming-Hsien Tsai, Yih-
Kuen Tsay, and Bow-Yaw Wang. Automated assume-guarantee reasoning
through implicit learning. In Tayssir Touili, Byron Cook, and Paul Jackson,
editors, CAV, volume 6174 of LNCS, pages 511–526. Springer, 2010.
[8] Yu-Fang Chen, Azadeh Farzan, Edmund M. Clarke, Yih-Kuen Tsay, and
Bow-Yaw Wang. Learning minimal separating dfa’s for compositional veri-
fication. In Stefan Kowalewski and Anna Philippou, editors, TACAS, volume
5505 of LNCS, pages 31–45. Springer, 2009.
[9] E. Clarke, O. Grumberg, and K. Hamaguchi. Another look at LTL model
checking. In D. L. Dill, editor, Computer Aided Verification, volume 818 of
LNCS, pages 415–428. Springer, 1994.
[10] Edmund M. Clarke, E. Allen Emerson, and Joseph Sifakis. Model checking:
Algorithmic verification and debugging. CACM, 52(11):74–84, 2009.
[11] Jamieson M. Cobleigh, George S. Avrunin, and Lori A. Clarke. Breaking
up is hard to do: An evaluation of automated assume-guarantee reasoning.
ACM Trans. Software Engineering Methodology, 17(2), 2008.
[12] Jamieson M. Cobleigh, Dimitra Giannakopoulou, and Corina S. Pa˘sa˘reanu.
Learning assumptions for compositional verification. In Hubert Garavel
and John Hatcliff, editors, TACAS, volume 2619 of LNCS, pages 331–346.
Springer, 2003.
[13] Ariel Cohen and Kedar S. Namjoshi. Local proofs for global safety proper-
ties. In Werner Damm and Holger Hermanns, editors, CAV, volume 4590 of
LNCS, pages 55–67. Springer, 2007.
[14] Ariel Cohen and Kedar S. Namjoshi. Local proofs for global safety proper-
ties. Formal Methods in System Design, 34(2):104–125, 2009.
[15] Ariel Cohen, Kedar S. Namjoshi, and Yaniv Sa’ar. A dash of fairness for
compositional reasoning. In Tayssir Touili, Byron Cook, and Paul Jackson,
editors, CAV, volume 6174 of LNCS, pages 543–557. Springer, 2010.
9
[25] Kedar S. Namjoshi. Symmetry and completeness in the analysis of param-
eterized systems. In Byron Cook and Andreas Podelski, editors, VMCAI,
volume 4349 of LNCS, pages 299–313. Springer, 2007.
[26] Amir Pnueli, Sitvanit Ruah, and Lenore D. Zuck. Automatic deductive veri-
fication with invisible invariants. In Tiziana Margaria and Wang Yi, editors,
TACAS, volume 2031 of LNCS, pages 82–97. Springer, 2001.
[27] Hassen Saı´di and Susanne Graf. Construction of abstract state graphs with
PVS. In Grumberg, editor, Computer Aided Verification, volume 1254 of
LNCS, pages 72–83. Springer, 1997.
[28] Nishant Sinha and Edmund M. Clarke. SAT-based compositional verifica-
tion using lazy learning. In Werner Damm and Holger Hermanns, editors,
CAV, volume 4590 of LNCS, pages 39–54. Springer, 2007.
[29] Morten Heine Sørensen and Pawel Urzyczyn. Lectures on Curry-Howard
Isomorphism. Number 149 in Studies in Logic and the Foundations of Math-
ematics. Elsevier, 2006.
[30] Yih-Kuen Tsay and Bow-Yaw Wang. Automated compositional reasoning
of intuitionistically closed regular properties. In Oscar H. Ibarra and Bala
Ravikumar, editors, 13th International Conference on Implementation and
Application of Automata, volume 5148 of LNCS, pages 36–45. Springer,
2008.
[31] Bow-Yaw Wang. Automatic derivation of compositional rules in automated
compositional reasoning. In Luis Caires and Vasco T. Vasconcelos, editors,
CONCUR, volume 4703 of LNCS, pages 303–316. Springer, 2007.
11
97 年度專題研究計畫研究成果彙整表 
計畫主持人：王柏堯 計畫編號：97-2221-E-001-006-MY3 
計畫名稱：程式之模組性與擴充性：驗證方法與工具--子計畫四:關於直觀規則語言之組合式分析 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 7 7 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 6 6 100%  
博士生 2 2 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
