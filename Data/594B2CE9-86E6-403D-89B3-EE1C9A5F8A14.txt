 I
 
摘  要 
 
本計畫建立一個語意生醫分析系統，允許生物醫學的研究人員透過以自然語言查詢方
式，綜合查詢複雜的生物資訊數據及影像訊息。由於生醫資訊研究領域的多樣性，我們提
出ㄧ個具有語意功能的描述語言(SCDL)作為一個描述問題的通用語言與樣式。在本計畫中
我們提供許多查詢範例以及其對應的 SCDL。對於複雜的應用，多重 SCDL 查詢可以藉由
控制架構做連結，我們亦提出一個可以映對使用者的查詢到一個或多個現存的應用服務。
最後，我們將很快的將系統導成網頁服務系統並公開發表，這將使生醫資訊相關研究社群
更容易分享大家的相關研究成果。 
 
關鍵詞：語意計算、語意描述語言、生物醫學應用、知識系統 
 
 III
目  錄 
 
摘  要...............................................................................................................................................I 
Abstract .......................................................................................................................................... II 
目  錄............................................................................................................................................ III 
報告內容.......................................................................................................................................... 1 
參考文獻........................................................................................................................................ 19 
計畫成果自評................................................................................................................................ 21 
International Journal of Semantic Computing 
© World Scientific Publishing Company 
1 
USING SCDL FOR INTEGRATING TOOLS AND DATA FOR COMPLEX 
BIOMEDICAL APPLICATIONS 
Shu Wang1, Rouh-Mei Hu2, Han C.W. Hsiao3, David A. Hecht3,4, Albert K.L. Ng3, 
Rong-Ming Chen5, Phillip C.Y. Sheu1,3, Jeffrey J.P. Tsai3,6
 
1Department of Electrical Engineering & Computer Science, University of California at Irvine, USA 
2Department of Biotechnology, Asia University, Taiwan 
3Department of Bioinformatics, Asia University, Taiwan 
4Department of Chemistry, Southwestern College, USA 
5Department of Computer Science & Information Engineering, National University of Tainan, Taiwan 
6Department of Computer Science, University of Illinois at Chicago, USA 
 
Received 20 October 2007 
Revised 21 January 2008 
Accepted 23 March 2008 
Current bioinformatics tools or databases are very heterogeneous in terms of data formats, database 
schema, and terminologies. Additionally, most biomedical databases and analysis tools are scattered 
across different web sites making interoperability across such different services more difficult. It is 
desired that these diverse databases and analysis tools be normalized, integrated and encompassed 
with a semantic interface such that users of biological data and tools could communicate with the 
system in natural language and a workflow could be automatically generated and distributed into 
appropriate tools. In this paper, the BioSemantic System is presented to bridge complex 
biological/biomedical research problems and computational solutions via semantic computing. Due 
to the diversity of problems in various research fields, the semantic capability description language 
(SCDL) plays an important role as a common language and generic form for problem formalization. 
Several queries as well as their corresponding SCDL descriptions are provided as examples. For 
complex applications, multiple SCDL queries may be connected via control structures. We present 
an algorithm to map a user request to one or more existing services if exist. 
Keywords: Semantic computing; semantic capability description language; biomedical applications 
1.   Introduction 
Since the development of chain termination of a DNA sequencing method by Sanger and 
his colleagues in 1977 [1] and the subsequent development of computational methods for 
data retrieval and analysis [2-6], bioinformatics has become a new area of research. Many 
new experimental technologies have been rapidly developed that include: systematic 
analysis of gene expression profiles at the transcriptional level as well as the translational 
level using DNA microarrays, 2D protein gel electrophoresis and mass spectroscopy [7-
9]; yeast two-hybrid system for detection of protein-protein interactions [10]; and NMR 
Instructions for Typing Manuscripts (Paper’s Title)     3 
 
(Semantic Capability Description Language), a language the BioSemantic System uses to 
describe what a service does rather than what a service needs, with examples illustrating 
some representative biomedical applications. Section 4 discusses how multiple SCDL 
queries can be connected via control structures for complex applications and how user 
requests are processed in BioSemantic. These are followed by discussion and conclusions 
in Section 5. 
2.   BioSemantic System 
The ultimate objective of the BioSemantic System is to provide an integrated framework 
for prospective users to facilitate their works, such as biological and biomedical 
knowledge retrieval, management, discovery, capture, sharing, delivery and presentation. 
As illustrated in Figure 1, the system is able to provide a number of different web 
services (or service bases), which can be incrementally plugged in to the system. Each 
service has its own database as well as functions (or tools) to perform the tasks 
mentioned above. Accordingly, a common language for these supported service bases to 
communicate with the system is necessary to formalize and formulate a variety of 
problems. Semantic Capability Description Language (SCDL) is thus proposed to meet 
this requirement, and will be introduced in more detail in the next section. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
User Requests in 
SCDL
…Service Base
(data, tools)
Service Base
(data, tools)
Service Base
(data, tools)
Service Base
(data, tools)
SCDL Descriptions
BioSemantic
Service Search Service Synthesis
 
Figure 1.  Service framework of BioSemantic System. 
The current system relies on SemanticObjects™ [19] as the core technology, which is 
a development environment that provides an object relational layer on top of relational 
data sources that could assist designers generate a global schema to capture the semantics 
Instructions for Typing Manuscripts (Paper’s Title)     5 
 
more flexible, the present system also accommodates a matching mechanism that maps a 
query into multiple services (one-to-many mapping). In the following sections we shall 
illustrate the use of SCDL for describing some typical biomedical applications. 
3.1 Notations and Definitions 
The notations used in the rest of Section 3 are listed below: 
• A DNA sequence is a string of nucleotide bases qi, where qi ∈ NA = {A, T, C, G}, i = 
1, …, n; n∈Z+; 
• An RNA sequence is a string of nucleotide bases qi, where qi ∈ NB = {A, U, C, G}, i = 
1, …, n; n∈Z+, and each element has an attribute called charge and an attribute called 
molecular_weight; 
• A protein sequence is a string of amino acid ai, where ai ∈ AA = {F, Y, C, W, L, P, H, 
Q, I, M, T, N, K, S, R, V, A, D, E, G}, i= 1, …, n; n∈Z+; 
• The predicate blast(A,B) is true if nucleotide_sequence A blasts nucleotide_sequence B; 
• λNA designates the set of all possible DNA sequences; 
• λNB designates the set of all possible RNA sequences; 
• ξAA designates the set of all possible protein structures; 
• The function (su, sv).Similar() calculates the structural and/or sequence similarity to 
compare it with a predefined threshold t. 
3.2 Primary Sequence Analysis 
Primary sequence analyses of genes and proteins represent a fundamental class of 
applications that are routinely performed. These analyses depend solely on the underlying 
nucleic acid sequences for genes, and the amino acid sequence for proteins. These 
analyses often cover the BLAST, alignment, and prediction of protein families, domains 
and functions. Presented below are several examples chosen to demonstrate the wide 
applicability of SCDL and BioSemantic System to primary sequence, structural analyses 
and alignment problems. 
3.2.1 BLAST Problem 
Perhaps one of the most common tasks in biological research today is that of identifying 
genes and proteins related or similar to a particular sequence. The task is often performed 
with BLAST (NCBI, http://www.ncbi.nlm.nih.gov/blast/Blast.cgi). The SCDL describing 
a representative query is presented below: 
 
Example 1. Find nucleotide or amino acid sequences from a database that are similar to 
a given sequence. 
 
SELECT N 
Instructions for Typing Manuscripts (Paper’s Title)     7 
 
FROM ξAA(input) u, ξAA(input) v ∈ db, £(u)su, £(v)sv, £(u×db)(u, v), £(u×v)p(su, sv), 
float(input) t 
WHERE (su, sv).Similar() > t 
where u is an input protein that is a member of the protein structure database db, v is an 
input protein that is a member of the protein structure database db, su is any substructure 
that may be derived from u, and sv is any substructure that may be derived from v . The 
function (su, sv).Similar calculates the structural similarity to compare it with a predefined 
threshold t. The problem may be solved using one or more of the following services: 
• FSSP (http://www.chem.admu.edu.ph/~nina/rosby/fssp.htm), and 
• CATH (http://www.cathdb.info/). 
3.4 Microarray Analysis 
Microarray experiments are routinely used to study gene expression and metabolic 
pathways. They are also increasingly being used to identify biomarkers and to validate 
drug targets, as well as to study the metabolic and potential toxicological effects of 
compounds in a high-throughput mode. The amount of data generated from these 
experiments is astronomical and new tools like the BioSemantic System are needed for 
data-mining and knowledge retrieval and synthesis. 
Example 4. Given a set of microarray data c, select genes that are significantly over 
expressed. 
SELECT g 
FROM setof-microarray(input) MA, MA c, float(input) upper_threshold 
GROUP BY c.gene 
HAVING avg(c.value) > upper_threshold 
 
Example 5. Given a set of microarray data c, select genes that are significantly under 
expressed. 
SELECT g 
FROM setof-microarray(input) MA, MA c, float(input) lower_threshold 
GROUP BY c.gene 
HAVING avg(c.value) < lower_threshold 
3.5 Drug Discovery 
According to current estimates, it takes about $1.3 billion and 12~15 years to bring a new 
drug to market. The reason is that there are many incredible difficulties at every step of 
the discovery and development process. In recent years, computational approaches have 
been successfully applied to enhance efficiency and productivity. Again, we see this as an 
Instructions for Typing Manuscripts (Paper’s Title)     9 
 
In the above, the function Ψ(p) returns the set of genes included in the pathway p. 
 
Example 8. The risk of developing Alzheimer’s Disease (AD) increases and the risk of 
developing Huntington Disease (HD) decreases as the average tangle 
density in the front cortex decreases. This hypothesis may be verified by 
deriving, for example, the following dataset: 
 
Front-density AD Possibility HD Possibility 
0-20 100 80 
20-39 95 90 
40-59 90 100 
…. … … 
 
The following SCDL program segment can realize the above query composed by the user 
at run time: 
Let tdfc be the tangle density in the front cortex. 
SELECT s.AVG(tdfc) 
FROM patient s 
Call the result set0; 
 
SELECT s.MAX(AVG(tdfc)) 
FROM set0 s 
 
Call the result tdfcmax  // max tangle density in the front cortex 
 
SELECT s.MAX(AVG(tdfc)) 
FROM set0 s 
 
Call the result tdfcmin  // min tangle density in the front cortex 
a = tdfcmin
while (a < tdfcmax) 
{ 
a = a + 20; 
SELECT s.AVG(tdfc) 
FROM patient s 
WHERE a – 20 < s.AVG(tdfc) < a; 
Call the result set1; 
SELECT s.AVG(tdfc) 
FROM patient s 
WHERE s.diagnosis(“AD”) and a – 20 < s.AVG(tdfc) < a; 
Call the result set2; 
Calculate the ratio of set2 and set1; 
Instructions for Typing Manuscripts (Paper’s Title)     11 
 
The BioSemantic System defines five features for each SCDL-Pclient and the 
specification of each SCDL-Psystem: Inputs, Outputs, Control-Structure, Actions and 
DataTypes, where Inputs consist of a set of input variables, Outputs consist of a set of 
output variables, Control-Structure is the control flow, Actions consist of the actions and 
methods used in the program, and DataTypes are the types of the variables used. For 
example, the five features from Example 8 are: 
Inputs: blob 
Outputs: set-of-blob 
Control-Structure: NO 
Actions: satallite-like, brightness, … from … where…etc. 
DataTypes: blob 
Now, given an SCDL-Pclient, we will analyze and decompose it into one or more 
SCDL-Psystems in some sequence. The analysis is done in three steps. First, a program 
slicing technique [20] is applied based on the program dependency graph (PDG), where a 
program slice consists of the parts of a program that potentially affect the values 
computed at some point of interest referred to as a slicing criterion (Here we call it 
SCDL-Pslice). Second, we will calculate the “similarity” between an SCDL-Pslice and an 
SCDL-Psystem based on the features {Inputs, Outputs, Control-Structure, Actions, 
DataTypes} so that if the value of “similarity” is above certain threshold, the SCDL-
Pslice and SCDL-Psystem would have some matching potential. Subsequently, we will 
use the test cases provided with the SCDL-Psystem to verify whether the SCDL-Pslice 
and SCDL-Psystem are really matched. If so, the implementation of the corresponding 
SCDL-Psystem can be used to substitute the SCDL-Pslice. The core of the proposed 
approach therefore consists of two problems: how to slice an SCDL-Pclient into SCDL-
Pslices and how to define the similarity between an SCDL-Pslice and an SCDL-Psystem. 
Program slicing, first introduced by Weiser in 1979 [20], is a decomposition 
technique that extracts from those statements of a program relevant to a particular 
computation. Slicing was first developed to facilitate debugging, but it was then found 
helpful in many aspects of the software development life cycle, including debugging, 
testing, software measurement, program comprehension, maintenance, program 
parallelization, etc. 
For a complicated language with pointers like C (or an object-oriented language like 
C++ or Java), program slicing is very difficult. In most cases, it cannot be done in real-
time.  For SCDL, fortunately, it is possible to be done efficiently and accurately. Because, 
first, SCDL does not contain pointers or references, so variables can be easy to identified 
and traced. More importantly, SCDL is a query-based programming language, thus a lot 
of computational details may be hidden via object relational queries. 
Given an SCDL-Pslice or SCDL-Psystem, we can build a program dependency graph 
(PDG) by tracing the dataflow. Every node in the PDG is a subset of the program that 
includes only those program elements that may affect the values of the variables used in 
it. Previous research in program slicing has illustrated that a node in a PDG is a 
semantically meaningful subset of the original program. 
Instructions for Typing Manuscripts (Paper’s Title)     13 
 
  (2) 
 
Table 1. Features of Pclient3. 
 PSystem3 PClient3:SCDL-Pslice1 PClient3:SCDL-Pslice2 
PClient3:SCDL-
Pslice3 
Inputs int, int, density 
, disease, set 
int, int,set int, int,set int, int,set 
Outputs set set set set 
Control-
Structure 
While(){};  While(){}; While(){} While(){} While(){} 
Actions show… from …; 
AVG(density); 
show… from …; 
AVG(density); 
calculate the 
ratio of .. and 
..;  
add… to…;  
show… from …; 
AVG(tdfc); show… from 
…; 
AVG(tdfc);calculate 
the ratio of .. and 
..; add… to…; show… 
from …; 
AVG(tdfc); show… from 
…; 
AVG(tdfc);calculate 
the ratio of .. and 
..; add… to…; 
show… from …; 
AVG(tdfc); show… 
from …; 
AVG(tdfc);calculat
e the ratio of .. 
and ..; add… to…;  
show… from …; 
AVG(tdfc); show… 
from …; 
AVG(tdfc);calculat
e the ratio of .. 
and ..; add… to…; 
DataTypes, int, set, Patient int Set Patient int Set Patient int Set Patient 
 
Consider an SCDL-Pslice that has control-structures {CA1, CA2, …} and an SCDL-
Psystem that has control-structures {CB1, CB2, …}. Note that we will combine those 
different control-structures having the same semantic meanings, e.g., For each…. and 
Loop…, into one. We can define Scontrol as follows: 
  (4) 
Saction and Sdatatype can be calculated in a similar way. The similarity between Pclient3 and 
Psystem3 is calculated as follows. 
Instructions for Typing Manuscripts (Paper’s Title)     15 
 
< PClient3:SCDL-Pslice2, PSystem3> 0.700 
< PClient3:SCDL-Pslice3, PSystem3> 0.700 
< PClient1, PSystem1> 1.000 
< PClient2, PSystem1> < 0.6 
< PClient1, PSystem2> < 0.6 
< PClient2, PSystem2> 1.000 
 
If we set the threshold to 0.6, the following potential program mappings can be found: 
< PClient3:SCDL-Pslice2, PSystem3> 
< PClient3:SCDL-Pslice3, PSystem3> 
< PClient3:SCDL-Pslice1, PSystem1> 
< PClient3:SCDL-Pslice1, PSystem2> 
As illustrated in SCDL-Pclient2, an SCDL-Pclient may sometimes be an SCDL query. 
Because there is only one statement, so the slicing technique mentioned above cannot be 
applied. To address this, consider a single statement query in the following format: 
 
SCDLQuery: SELECT[output+] from [input+] where [condition] 
(AND/OR[condition] )*  HAVING (condition) 
condition: input.adjective() | logic composition of input.adjective() 
 
In SCDL-Pclient2, for example, we can find that the verb is “SELECT”, the output is “r”, 
the input is “2blob”, the condition is “c.satallite-like AND c.brightness.” We can slice the 
statement and extract two conditions as “c.satallite-like” and “c.brightness.” Using the 
verb, output, and input, we can build the following table: 
 
 verb output input condition 
Atomic_SCDL_Query1 Find blob set blob set blob is satellite-like 
Atomic_SCDL_Query2 Find blob set blob set blob is brighter than theta 
 
We call each of them an atomic SCDL query. As a result, we can find that the first query 
Atomic_SCDL_Query2 can be matched by SCDL-Psystem1, and the second one can be 
matched by SCDL-Psystem2. Finally we can take the intersection of the results returned 
by SCDL-Psystem1 and SCDL-Psystem2 to compute the final answers.  
5.   Discussions and Conclusions 
In this paper, semantic capability description language (SCDL) as implemented in the 
BioSemantic System is presented to bridge complex biological and biomedical research 
problems and computational solutions. Some typical biological/biomedical services as 
well as their corresponding SCDL descriptions are given to demonstrate the power of 
SCDL in formalizing diverse problems as well as facilitating semantic retrieval.  
For most “real-world” research, users will ask questions which are in essence 
complex queries. By comparing the functionality of an algorithm expressed in SCDL and 
Instructions for Typing Manuscripts (Paper’s Title)     17 
 
and A. Pandey, Human protein reference database-2006 update, Nucleic Acids Res. 34(2006) 
D411-D414. 
[9] O. Langella, M. Zivy, and J. Joets, The PROTICdb database for 2-DE proteomics, Methods 
Mol Biol. 355(2007) 279-303. 
[10] U. Stelzl, U. Worm, M. Lalowski, C. Haenig, F. H. Brembeck, H. Goehler, M. Stroedicke, M. 
Zenkner, A. Schoenherr, S. Koeppen, J. Timm, S. Mintzlaff, C. Abraham, N. Bock, S. 
Kietzmann, A. Goedde, E. Toksoz, A. Droege, S. Krobitsch, B. Korn, W. Birchmeier, H. 
Lehrach, and E. E. Wanker, A human protein-protein interaction network: a resource for 
annotating the proteome, Cell 122(6) (2005) 957-968. 
[11]  H. M. Berman., J. Westbrook, Z. Feng, G. Gilliland, T. N. Bhat, H. Weissig, I. N. 
Shindyalov, and P. E. Bourne, The Protein Data Bank, Nucleic Acids Res. 28(2000) 235-242. 
[12] D. L. Wheeler, T. Barrett, D. A. Benson, S. H. Bryant, K. Canese, V. Chetvernin, D. M. 
Church, M. Dicuccio, R. Edgar, S. Federhen, L. Y. Geer, Y. Kapustin, O. Khovayko, D. 
Landsman, D. J. Lipman, T. L. Madden, D. R. Maglott, J. Ostell, V. Miller, K. D. Pruitt, G. D. 
Schuler, E. Sequeira, S. T. Sherry, K. Sirotkin, A. Souvorov, G. Starchenko, R. L. Tatusov, T. 
A. Tatusova, L. Wagner, and E. Yaschenko, Database resources of the National Center for 
Biotechnology Information, Nucleic Acids Res. 33(2005) D39-D45. 
[13] R. D. Finn, J. Mistry, B. Schuster-Böckler, S. Griffiths-Jones, V. Hollich, T. Lassmann, S. 
Moxon, M. Marshall, A. Khanna, R. Durbin, S. R. Eddy, E. L. L. Sonnhammer, and A. 
Bateman, Pfam: clans, web tools and services, Nucleic Acids Res. 34(2006) D247-D251. 
[14] V. Matys, O. V. Kel-Margoulis, E. Fricke, I. Liebich, S. Land, A. Barre-Dirrie, I. Reuter, D. 
Chekmenev, M. Krull, K. Hornischer, N. Voss, P. Stegmaier, B. Lewicki-Potapov, H. Saxel, 
A. E. Kel, and E. Wingender, TRANSFAC and its module TRANSCompel: transcriptional 
gene regulation in eukaryotes, Nucleic Acids Res. 34(2006) D108-110. 
[15] Gene Ontology Consortium, The Gene Ontology (GO) project in 2006, NucleicAcids Res. 
34(2006) D322-D326. 
[16] H. Ogata, S. Goto, K. Sato, W. Fujibuchi, H. Bono, and M. Kanehisa, KEGG: Kyoto 
Encyclopedia of Genes and Genomes, Nucleic Acids Res. 27(1) (1999) 29-34. 
[17] D. J. Mayhew, Usability Engineering Lifecycle (Morgan Kauffman, San Francisco, 1999). 
[18] D. Hecht, R. M. Hu, R. M. Chen, J. W. Ou, C. Y. Hsu, H. Gong, K. L. Ng, H. C. W. Hsiao, J. 
J. P. Tsai, and P. C. Y. Sheu, BioSemantic system: applications of structured natural language 
to biological and biochemical research, Proc. Workshop on Ambient Semantic Computing, in 
conjunction with 2008 IEEE International Conference on Sensor Networks, Ubiquitous, and 
Trustworthy Computing, Taichung, Taiwan, 2008, pp. 386-393. 
[19] P. C. Y. Sheu and A. Kitazawa, From SemanticObjects to Semantic Software Engineering, 
International Journal of Semantic Computing, 1(1) 2007 11-28. 
[20] M. Weiser, Program Slicing, Proceedings of 5th International Conference on Software 
Engineering, San Diego, CA, Mar. 1981, pp. 439-449. 
  20
for Gene Regulatory Network Reconstruction Based on Microarray Data, The 
9th IEEE International Conference on Bioinformatics and Bioengineering, 
Taichung, Taiwan, June 22-24, 2009, pp.467-470.  
7. J. W. Ou, R. M. Chen, R. M. Hu, and Jeffrey J.P. Tsai ,A Systematic Gene 
Expression Explorer Tool for Multiple and Paired Chips Analysis, The Eleventh 
SDPS Transdisciplinary Conference on Integrated Systems, Design, & Process 
Science, pp. 298-302, 2008.  
8. C. Y. Hsu, R. M. Hu, R. M. Chen, and Jeffrey J.P. Tsai , IHCread: AN 
Automatic Immunohistochemistry Image Analysis Tool, The Eleventh SDPS 
Transdisciplinary Conference on Integrated Systems, Design, & Process Science, 
pp. 294-297, 2008. 
 
 
 
