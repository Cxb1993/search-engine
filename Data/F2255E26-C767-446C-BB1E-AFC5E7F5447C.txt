 1
1. 前言、研究目的 
近年來數位系統應用日益廣泛，電腦亦用來控制各種安全關鍵系統
(Safety-Critical system)。在這類系統中，一旦發生意外事件，其後果可能相當嚴
重。以往應用在關鍵控制系統的技術是類比式技術，所以類比式技術安全分析的
相關技術都已相當成熟；而電腦控制卻帶來新的故障模式及效應，是傳統安全分
析無法有效處理的。 
 
電腦控制所帶來的新的故障模式中，最主要的就是「程序互動錯誤」(process 
interaction errors)。此處程序(process)泛指軟體程序、硬體程序、及人員的行為。
傳統的安全分析法多著重在設備的故障上。而現行數位化系統意外事故，多涉及
設備、系統、與人之間的介面互動問題。程序互動錯誤可定義為程序(process)之
間的反應出現未預期狀態，或一方未按預定方式進行。程序互動錯誤的風險特性
(risk characteristics)為不可偵測性 (non-detectable)，即不能經由自動偵測機制(例
如 periodic tests or diagnostic tests)發現，須等效應擴散引起操作員注意時才能處
理。此類錯誤又可分為後果安全 (non-detectable and safe)及後果不安全
(non-detectable and unsafe)兩類。後者如果發現太晚，則可能導致嚴重事故。 
 
本研究將針對程序互動錯誤提出一套靜態故障樹分析方法、及以限制為基礎
的動態偵測方法。前者，我們發展出一套針對程序互動錯誤的故障樹模型；考慮
互動行為的事前及事後條件(precondition and post-  condition)之衝突。後者，我
們發展出一系列互動相關的限制，以偵測各類異常互動行為。更進一步，我們將
限制的違反視為故障樹的基本事件(basic events)，此增添後(augmented) 的故障樹
可於事前或事後分析出各類事故劇情。此外，我們亦探討限制的實際功效和量測
指標。 
 
2. 文獻探討 
程序互動錯誤可定義為系統組件(Component)在正常下所產生的未先計畫
(unplanned)或未預期(unexpected)的互動。在相關研究中，最可表達互動錯誤的為
MIT 教授 Nancy Leveson 發展的 STAMP(System-Throretic Accident Modeling and 
Processes)[3-5] 安全模型。STAMP 模型以系統理論(system theory)為中心，全面
性考慮組織管理、電腦、人因因素，著重因程序互動而破壞了安全限制(constraint)
所產生的事故 [3-5]。STAMP 的主要觀念為限制(Constraints)；意外的發生皆起
因於系統不能滿足階層結構間的安全限制。 
 
模式混淆為程序互動錯誤中主要一錯誤模式，模式混淆指操作員對目前系統
所處狀態混淆不清。Nancy Leveson 教授將安全關鍵系統中可能造成模式混淆的
 3
表 1. 各種互動錯誤類型代表事故案例 
事故 肇因 互動錯誤
Korean Air Lines Flight 007， 
1983 年 9 月 1 號[12] 
駕駛在輸入慣性導航系統的座標時輸入錯誤，導致客機
偏離預定航道誤飛進蘇聯領空而被攔截機擊落 
人員輸入
北美 814 大停電， 
2003 年 8 月 8 號[9] 
系統顯示未及時更新的過期資訊，致使監控人員誤信系
統正常以致無法及時修復故障設備而擴大災害 
介面輸出
Ariane 5 太空船升空中爆炸， 
1996 年 6 月 4 號[7] 
慣性參考系統輸出的例外資料被機上電腦系統以飛行資
料解讀而產生資料誤用 
訊息傳遞
火星探測船系統不斷重新啟
動，1992 年 1 月 20 號[13] 
高優先權程序欲存取的共享資源一直未被使用程序釋出
而無法於限制時間內完成工作，系統判定重啟 
共享資源
華航名古屋空難， 
1994 年 4 月 26 號[10] 
駕駛不知自動駕駛模式已開啟，而同時以手動控制飛
機，在兩方競爭控制下導致飛機失控墜毀 
模式混淆
Therac-25 放射治療儀器過量
照射，1986 年 4 月 11 號[6] 
操作員資料輸入速度過快導致系統非預期的異常，使病
人受到過量的輻射劑量 
設計缺失
 
 
6.Mode 
confusion
Computer Software 
Physical system
Human
process
process
resource
message
sensors actuators
display
input
display
messageinput
input /
command
1.
2.
5
3 
3
1
1
2
 
圖 1. 分析模型 
3.2. 程序互動故障樹樣板 
我們提出分析程序互動錯誤的故障樹樣板，如圖 2 所示。利用故障樹我們可
以事前分析可能的意外劇情，或事後鑑識發生的原因。我們的故障樹分析方法必
須先畫出系統狀態圖，再針對每個狀態加入事前假設(precondition)以及事後條件
(post-condition)。這些假設及條件包括： 
(a) 狀態所需的輸入限制(constraints) (來源、型態、時序、值、或範圍)  
(b) 要執行的動作限制(動作對象、呼叫的函式、用到的相關參數、存取的
資源)  
(c) 狀態完成的輸出資料限制 (目標、型態、時序、值、或範圍)。 
 
 5
invariants)、及實際上(pragmatic)的限制。 
 
表 2 所列為我們針對人員輸入相關的錯誤互動所提出的各個層次的限制。事
實上，對於介面輸出、訊息傳遞，以及共享資源存取方面的錯誤而言，在變數及
時序層次部分所具有的限制雷同性相當高，因此下面我們只列出較為不同的部
份，如表 3、表 4，以及表 5 所示。完整的限制請參照[14]。在此以一段簡單的
程式碼示意對應的限制： 
輸入變數資料與軟體程序變數時間相依關係 
If (INPUT_CONTROL == OPEN_PUMP) 
If (WATER_LV_NOW != WATER_LV_BEOFRE+TIME_INTERVAL*THROUGHPUT) 
Warning(); 
意義：當操作人員輸入控制為開啟加水幫浦，系統目前的水位應為（開啟幫浦時
的水位+經過時間*進水速率），如果條件式不成立，可能代表相關硬體設備故障。 
 
表 2. 各層次的人員輸入相關限制 
限制層次 「人員輸入」相關限制 
變數層次 1. 輸入資料值檢查(input data value) 
2. 輸入資料值範圍檢查(input data ranges) 
3. 輸入資料危險值檢查(input data hazardous value) 
4. 「」(input data hazardous ranges) 
5. 輸入資料最小變化量檢查(minimum value variation between two 
inputs) 
6. 輸入資料最大變化量檢查(maximum value variation between two 
inputs) 
7. 輸入資料型態檢查(input data types) 
時序層次 1. 允許輸入開始到輸入完成時間限制(data key in duration) 
2. 輸入最短時間間隔限制(minimum time between two inputs) 
3. 輸入最長時間間隔限制(maximum time between two inputs) 
4. 輸入資料有效時間(input data age) 
關係層次 1. 輸入資料目標及接收來源檢查(input data destination and source) 
2. 輸入變數資料與軟體程序變數時間相依關係 
(temporal dependency between input data and process variables) 
3. 操作輸入後系統應產生之對應動作檢查 
(relations between input control and device states) 
4. 輸入後應產生的回饋訊息確認(feedback message after input) 
5. 平行執行程序對相同目標進行控制動作的衝突性檢查 
(check for conflict of concurrent processes controlling the same 
device) 
全域層次 1.自然界中存在的守恆規則(conservation rules) 
2.系統恆真式(system invariants) 
 
 
 7
Display Error
Value Error Value RangeError
Value Is 
Hazardous
Min Data
In/Decrement
Error
Max Data
In/Decrement
Error
Value
Computation 
Relation
Error
Timing Error
Conflict Of
Conservation
Rules
Violate
Duration Of
Complete
Display 
Violate
Min Time
Between
Updates
Violate
Max Time
Between
Updates
Violate
Reply Time
Limit After
Display
 
圖 3. 違反介面輸出限制產生的基本事件 
 
Blackout
Interaction Error Hardware Error Other
Action errors
Message errors Shared resource errorsInput errors
Intention errors
(Conflicting conditions of processes A & B)
Display errors
Stopped
info-update
violated max time
between updates
…
 
圖 4. 北美 814 大停電劇情故障樹 
 
3.5. 限制的評估 
最後我們評估限制的有效性及足夠性。我們利用動態的錯誤植入方式[11]來
驗證限制的成效。我們利用數個的模擬程式以錯誤植入的方式，試驗在各種模式
混淆類型下限制如何防止錯誤發生。上述限制均能及時偵測出錯誤，個案細節請
見[14]。 
 
再者，我們提出涵蓋率、有效性，以及足夠性等指標[14] ，以評估限制的
 9
April 2004. 
10. Hiroshi Sogame and Peter Ladkin, “Aircraft accident investigation report 96-5: 
China airlines, Airbus Industrie A300B4-622R, B1816, Nagoya Airport, April 26, 
1994”, http://sunnyday.mit.edu/accidents/nag-contents.html. 
11. Jeffrey Voas and Gary McGraw, Software Fault Injection : Innoculating 
Programs Against Errors, John Wiley & Sons, 1997. 
12. “Korean Air Lines Flight 007,” 
http://en.wikipedia.org/wiki/Korean_Air_Lines_Flight_007. 
13.  “What really happened on Mars?”, 
http://research.microsoft.com/~mbj/Mars_Pathfinder/Authoritative_Account.htm
l. 
14. 蔡尚霖, “以限制為基礎之程序互動錯誤分析方法”, 元智大學資工系碩士論
文, July 2008. 
15. 蔡尚霖，范金鳳，易俗，”以限制為基礎之程序互動錯誤分析方法，”OOTA 
2008, Sept. 2008, pp. 44-51.  
16. 范金鳳, 易俗，戴嘉賢，蔡尚霖，”電腦人機互動事故分析技術,” 第 15 屆中
華民國人因工程學會年會暨學術研討會, March 15, 2008.  
17. Chin-Feng Fan and Shang-Lin Tsai, “Analysis and Detection of Process 
Interaction Errors,” to appear in Proceedings of ICS 2008, Dec. 2008. 
 
 
 
 
 
 
 
 
 
 
 
 
 
