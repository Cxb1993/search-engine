行政院國家科學委員會補助專題研究計畫成果報告 
計畫名稱：省電與性能最佳化技術:從應用面至系統面之探討— 
子計畫一：動態電源調整之即時程序排程及合成 
計畫編號：NSC  95－2221－E－002－094－MY3 
執行期間：95年 08月 01日至 98年 07月 31日 
計畫主持人：郭大維教授 
計畫參與人員：張原豪、盧永豐、徐秉毅、蔡坤益、呂學一、陳建佳、
楊川岳、呂維倫、張繼儒、黃柏鈞、張哲維、魏逸鴻 
 
中文摘要 
隨著超大型積體電路技術的高速發展，許多
先進的微處理器都已經具備動態電壓調整
的功能，讓使用者可以在系統的效能和耗電
量之間取得平衡。除了微處理外，許多系統
中的周邊裝置雖然不具動態電壓調整功
能，但卻能透過動態電源管理技術，讓裝置
可以動態在不同模式間切換以達到效能與
省電兼顧的目標。不過要達到省電目的，同
時又要滿足使用者對系統效能的要求時，除
了這些硬體技術的支援外，適當的程序排程
方法也是不可或缺的。本計畫為期三年，期
間我們分別以周邊裝置與處理器之混合整
體排程、多個處理器之即時省電程序排程與
多模程序(multiframe tasks)之省電排程為主
題進行研究，且每年皆有重要的系統研發成
果。 
由於系統周邊設備所造成的耗電在整
個系統的耗電量中佔了很重要的一個部
分，因此一個有效的省電排程演算法不止應
該考慮處理器的耗電，周邊系統所造成的耗
電也應該被一併考慮。在第一年的計畫中，
我們提出了多個可用於管理工作搶奪
（preemption）的排程演算法，並以此來達
到降低周邊設備的耗電量的目的。由模擬實
驗的結果顯示出，相較於最早截限時間優先
（earliest deadline first，EDF）排程演算法，
我們所提出來的演算法不但可以大幅降低
工作搶奪的次數，同時也能大幅的減少整體
系統的耗電量。 
 在第二年的計畫中，我們針對同質性多
核心處理器平台，探討執行時間之不確定性
可用機率分佈來描述的即時工作之工作分
配方式。在所有工作能符合截限時間的要求
為前提之下，導出一個工作分配方式（task 
partition），使其完成所有工作所消耗電量之
期望值最小化。模擬實驗結果顯示我們的
1.13 倍的近似演算法（ approximation 
algorithm）以及多項式執行時間的近似機制
（polynomial-time approximation scheme，
PTAS）不但提供最差情況下的效能保證也
能有效率地最小化耗電量的期望值。 
 今年是本研究計畫的最後一年，我們則
是進行多模程序的省電排程研究。不同於一
般的即時工作，具備多模性質的即時工作能
夠以一個數字陣列的循環來描述其執行時
間，而本計畫便是在探討如何對一群具備多
模性質的週期性即時工作進行排程以期有
效減少能量的消耗。在此報告中，我們分別
提出了以工作為基礎（task-based）或以框架
為基礎（frame-based）的兩種不同排程方
法。實驗結果顯示，相對於最省電的工作速
度設定，本計畫中所提出的方法能僅以些微
省電幅度的犧牲來大量降低對儲存空間的
需求，因此能夠應用於實際的系統當中。此
外，在計畫中我們也進行了部分於 Linux環
境下的檔案系統實做與整合。 
1 Introduction
As the complicated circuits and the huge
amount of electronic gates lead to high power
consumption density in modern circuit design,
low-power design has been an important issue for
hardware manufacturing, especially for embed-
ded systems which are mostly powered by bat-
teries. To reduce the power consumption without
the sacrifice of performance, architectural tech-
niques have been proposed to dynamically trade
the performance for power consumption. Dy-
namic voltage scaling (DVS) has been shown as
one of the promising techniques by adjusting the
supply voltage dynamically [1, 6, 14, 17, 22].
Energy-efficiency has been an important de-
sign issue for hardware and software implementa-
tions, especially for embedded or mobile systems.
Energy-efficient designs and scheduling could not
only extend the power-on duration of battery-
driven devices but also help in cutting down the
power bill of server systems significantly. In the
past decade, energy-efficient task scheduling with
various deadline constraints has received a lot of
attention. Various work has been done for unipro-
cessor task scheduling on DVS processors, such
as that in [1, 4, 6, 14, 17, 22]. In particular,
when the operating frequency/speed of the pro-
cessor can be adjusted continuously in a range,
Yao et al. [22] proposed an algorithm to derive
an optimal speed assignment for aperiodic real-
time jobs, whereas Aydin et al. [1, 2] proposed
algorithms to determine the optimal speed assign-
ments for periodic real-time tasks with identical
or different power characteristics. If the proces-
sor can only run in a finite number of speed lev-
els, Mejı´a-Alvarez et al. [14] proposed a heuris-
tic algorithm, and Chen et al. [6, 24] proposed
an approximation algorithm to select execution
speed for each periodic real-time task. Pillai et
al. [17] developed slack reclamation algorithms
for the minimization of energy consumption when
task instances might complete earlier than their
worst-case estimations.
This project considers systems with periodic
real-time tasks, in which a periodic task is an in-
finite sequence of task instances, where each task
instance of a task comes in a regular period [11,
12]. The periodic real-time task model char-
acterizes accurately many traditional hard real-
time applications, such as digital control, real-
time monitoring, and constant bit-rate voice/video
transmission [12]. In the literature of energy-
efficient scheduling for real-time tasks, most stud-
ies assume that the worst-case execution time of
every task instance that belongs to the same task
is the same. However, for many practical ap-
plications, the average execution time of a task
might be much shorter than its worst-case exe-
cution time, and the actual execution times of
the task instances conform to a particular pattern.
For example, the decoding of MPEG files can be
modeled as a periodic real-time task, while the de-
coding time of a task instance depends on the type
of the frame (I-frames, P-frames, and B-frames)
to be decoded. Since MPEG files have a regular
pattern on the sequence of frame types, such as,
”IBBPBBPBBIBBP”, the decoding time of the
file conforms to a regular pattern. To model such
applications properly, Mok and Chen [15, 16] de-
veloped the Multiframe Task Model. In the mul-
tiframe task model, the worst-case execution time
of a task is characterized by a vector with N ele-
ments, in which the execution pattern of the task
repeats after the completion of N task instances.
The vector represents the worst-case execution
times of N consecutive task instances. As a re-
sult, the multiframe task model can properly de-
scribe the task properties for tasks with regular
execution patterns.
We focus on energy-efficient scheduling for
multiframe tasks, which is more general than ex-
isting periodic real-time task models, e.g., [1, 6,
14]. One could apply the algorithm in [2] for off-
line speed determination by treating the execution
of each task instance as its worst-case estimation
and adopt slack reclamation algorithms, such as
those in [2, 17], to reduce the energy consumption
speed f can be modeled as follows:
Ψ(f) = Ψs + ~(Ψind +Ψd)
= Ψs + ~(Ψind + Ceff
m),
where Ψs, Ψind, and Ψd denote the static power,
speed-independent active power, and speed-
dependent active power, respectively. ~ is 0 or
1 to indicate whether the system is in the sleep
mode or in the active mode. Moreover, Cef and
2 ≤ m ≤ 3 are two system-dependent constants
that stand for the effective switching capacitance
and the dynamic power exponent, respectively.
The static power Ψs can only be removed by shut-
ting down the system. However, due to the exces-
sive time/energy overhead of turning on/off a sys-
tem, we consider systems that cannot be turned
off dynamically. Therefore, Ψs is not manage-
able, and we focus on how to manage the speed-
independent and speed-dependent active power,
i.e., Ψind and Ψd.
We assume that the system can operate at any
speed in the range of [fmin, fmax]. For such
systems, there exists a critical speed fcrit =
m
√
Ψind
Cef (m−1)
such that executing at the critical
speed fcrit followed by turning the system into the
sleep mode is more energy-efficient than execut-
ing at a speed lower than fcrit [3, 8, 9]. Thus,
only operating speeds from [f ∗min, fmax] should be
used, where f ∗min = min{max{fmin, fcrit}, fmax}.
The amount of CPU cycles executed in a time
interval is considered as linear to its operating
speed. For example, let f(t) and ~(t) denote the
operating speed of the system and the value of
~ at time t, respectively. The amount of CPU
cycles completed in the time interval (x1, x2] is∫ x2
x1
f(t)~(t)dt, and the amount of energy con-
sumed in the interval is
∫ x2
x1
Ψs + ~(t)(Ψind +
Ceff(t)
m)dt. As Ψs is a non-manageable con-
stant, we will simply set Ψs as 0 for presenting
our approaches.
2.2 A Motivational Example
According to the patterns of computation de-
mands of multiframe tasks, we can execute tasks
in a more energy-efficient manner. For a multi-
frame task, the nominal execution times at speed
fmax of different task instances could be different.
Therefore, we can adopt existing slack reclama-
tion algorithms for energy efficiency such as the
approaches in [2, 17] to reduce the energy con-
sumption without violating the timing constraints.
Consider a multiframe task set T which con-
sists of two multiframe tasks τ1 = ((4, 1), 10, 10)
and τ2 = ((8, 6), 20, 20). If we ignore the pat-
terns of nominal execution times of tasks τ1 and
τ2, we can just treat them as two tasks with the
worst-case nominal execution times 4 and 8, re-
spectively. Then, after executing the second in-
stance of task τ1, there is some slack time, but
there is no available task instance being able to
use the slack to reduce the energy consumption,
as shown in Figure 1(a). Therefore, applying the
slack reclamation algorithms in [2, 17] does not
help in this example. The resulting schedule has
energy consumption 15.0044 in the hyper-period
40 when Ψ(f) = ~f 3. However, if we take the
patterns of nominal execution times of tasks τ1
and τ2 into consideration properly, it is possible to
derive the schedule as shown in Figure 1(b) whose
energy consumption is 12.48 in a hyper-period.
The improvement, compared to slack reclamation
algorithms, is around 17%. With such an exam-
ple, we do not intend to show that our approaches
can always outperform the existing slack reclama-
tion algorithms for general cases, but, for multi-
frame tasks, it is possible to have some alterna-
tives with more energy savings.
As shown in Figure 1, the performance of
slack reclamation algorithms highly depends on
the behavior of tasks. For tasks in this exam-
ple, slack reclamation algorithms are unable to
reclaim slack at the completion of the second task
instance of task τ1, since there is no task instance
which is ready to reclaim it. Therefore, in order
to reduce the energy consumed by task execution
more effectively, the information of the execution
patterns of multiframe tasks should be taken into
consideration carefully.
instances under the EDF scheduling policy, and
the memory space required to store the auxiliary
information of the speed assignment can not ex-
ceed O(|T|).
Definition 2 Energy-Efficient Multiframe Task
Scheduling under the Frame-Based Approach:
Given a multiframe task set T, the object of this
problem is to derive a speed assignment for task
instances, such that the total energy consumption
within a hyper-period is minimized without vio-
lating timing constraints while we schedule task
instances under the EDF scheduling policy, and
the memory space required to store the auxiliary
information of the speed assignment can not ex-
ceed O(
∑
τi∈T
Ni).
3 Energy-Efficient Scheduling of
Multiframe Tasks
This section shows some algorithms that can
be adopted to implement the task-based or the
frame-based approach. In Section 3.1, we present
two algorithms for the task-based approach which
are simple but effective by assigning each multi-
frame task a proper reserved time for its execu-
tion. Then, two algorithms for the frame-based
approach which can further reduce the energy
consumption are presented in Section 3.2. By the
end of this section, we discuss some implementa-
tion issues.
3.1 The Task-Based Approach
The basic idea of the task-based approach is to
reserve a specific amount of time for every task
instance of each multiframe task such that the
deadline constraint of each task instance can be
met and, at the same time, the total energy con-
sumption is minimized. The rationale behind the
to-be-proposed energy-efficient multiframe task
scheduling algorithms is to have a simple im-
plementation and, at the same time, to provide
a flexible/engineering way to handle and isolate
the impacts of variable execution times of multi-
frame task executions on each another. In other
words, the execution speed of the j-th instance
of multiframe task τi is set as
Ci,(j−1) mod Ni
ti
if an
amount of time ti is reserved to execute any in-
stance of task τi in its period. Therefore, how
to derive a proper reserved time for each multi-
frame real-time task is the key procedure to mini-
mize the energy consumption under the real-time
constraints. There could be kinds of methods to
achieve the task-based approach. In this section,
we will present two algorithms in which one is
based on the worst-case nominal execution times
of tasks, the other one considers the patterns of
nominal execution times of tasks.
We first present a method that uses the worst-
case nominal execution times of tasks in the op-
timization of the total energy consumption. This
method is referred to as the task-based approach
with the worst-case consideration. When the rela-
tive deadline Di is equal to the period Pi for every
task τi in T, the energy consumption of task τi in a
hyper-periodL is no more than L
Pi
Ψ(
Cmaxi
ti
fmax)·ti
if ti is reserved for the executions of its task in-
stances. Thus, the optimization problem can be
reformulated as follows under the EDF schedul-
ing policy:
Minimize
∑
τi∈T
L
Pi
Ψ(
Cmaxi
ti
fmax) · ti (1a)
Subject to
∑
τi∈T
ti
Pi
≤ 1 (1b)
f ∗min ≤
Cmaxi
ti
fmax ≤ fmax
for all τi ∈ T,(1c)
where Equations (1a), (1b) and (1c) are the to-
tal energy consumption of the task set T in a
hyper-period, the EDF schedulability constraint,
and the constraint on the available speeds, re-
spectively. The non-linear programming shown in
Equation (1) can be resolved in O(|T|) by letting
Cmaxi
ti
=
Cmaxj
tj
for all τi, τj in T [2]. The algorithm
applying this method is shown in Algorithm 1.
However, results derived by Algorithm 1 are
not good enough in energy consumption because
instances of a multiframe task could have dif-
ferent nominal execution times. When different
speed
time
τ1
τ2
0 10 20 30 40
Figure 2. The schedule derived by Algorithm
TB-MT for tasks in Section 2.2.
Proof. According to Algorithm TB-WC or Algo-
rithm TB-MT, the execution time of each instance
of task τi in T will not exceed ti. Combined with
the schedulability condition of the EDF schedul-
ing policy specified in Equation (1b) or (3b), T
will be schedulable under the EDF scheduling
policy if there exists at least one feasible sched-
ule under the task-based approach.
We use the example in Section 2.2 to illustrate
the difference between Algorithms TB-WC and
TB-MT. When Algorithm 1 is adopted, the worst-
case nominal execution times of τ1 and τ2 are con-
sidered, i.e., Cmax1 = 4 and Cmax2 = 8. t1 and
t2 are derived as 5 and 10 by resolving the non-
linear programming shown in Equation (1) when
Ψ(f) = ~f 3. The resulting schedule is shown
in Figure 1(b). Different from Algorithm TB-
WC, Algorithm TB-MT considers different nom-
inal execution times of each multiframe real-time
task. With the consideration of C1,0 = 4, C1,1 = 1
and C2,0 = 8, C2,1 = 6, t1 and t2 are derived as
4.7199 and 10.5602, respectively. The schedule
derived by Algorithm TB-MT is shown in Fig-
ure 2. The total energy consumption in a hyper-
period becomes 12.3636.
Although the task-based approach is effective
in the implementation, its results are too conser-
vative in energy efficiency in some cases. For
example, when the nominal execution times of
tasks vary drastically instance by instance, forc-
ing instances of a task to have the same execution
time usually consumes more energy than apply-
ing slack reclamation algorithms. This is because
that the task-based approach excludes the possi-
bility of letting instances of a task have different
execution times. In order to achieve more energy
savings, we should make instances of a task hav-
ing different execution times possible. However,
spending too much memory space on storing exe-
cution times or speeds of task instances should be
avoided. Thus, we store only one execution speed
for each task frame and propose the frame-based
approach.
3.2 The Frame-Based Approach
The frame-based approach consists of an off-
line phase to derive a vector of execution speeds
for each multiframe task and an on-line EDF-
based scheduling policy. The rationale of this ap-
proach is to let each task frame have its own re-
served execution time. As a result, there will be
more flexibility in the determination of execution
speeds of task instances. The technical problem
is how to derive execution speed vectors of tasks
such that the total energy consumption can be
minimized. There could be many different types
of methods to derive such execution speed vec-
tors of tasks. This section presents two algorithms
which can achieve the frame-based approach by
deriving execution speed vectors of tasks based
on an optimal speed assignment of task instances
within a hyper-period which is derived by ignor-
ing the constraint on the usage of the memory
space.
The Basic Method The idea of the basic
method is to first transform each multiframe real-
time task τi in T into LPi task instances in a
hyper-period L. When the constraint on the us-
age of memory space is ignored, the scheduling
algorithm proposed by Yao, et al. [22] is then
adopted to derive an optimal speed assignment
for each task instance in a hyper-period. It re-
quires pseudo-polynomial space O(N ) to store
the speed assignment for all task instances, since
the number of task instances N =
∑
τi∈T
L
Pi
is
pseudo-polynomial in the input size. The memory
space requirement makes the optimal speed as-
signment for all task instances impractical for the
on-line usage. Thus, we propose to set the execu-
tion speed of the j-th task instance of task τi as the
maximum execution speed among all of its task
that are entirely contained in I . Moreover, let f ′i,j
denote the execution speed of a task Ji,j if the ex-
ecution speed of Ji,j is determined. The intensity
g(I) of an interval I = [x1, x2] is revised as fol-
lows: ∑
Ji,j∈JI
ci,j
(x2 − x1)−
∑
Ji,j∈J′I
ci,j
f ′i,j
. (4)
Then, Equation (4) is adopted to develop Algo-
rithm FB-EXT to derive the execution speeds for
multiframe tasks in a more energy-efficient way
as shown in Algorithm 4. Different from Algo-
rithm FB-MES, Algorithm FB-EXT divides tasks
entirely contained in an interval I into two parts
JI and J′I and calculates the intensity of I accord-
ing to Equation (4), while finding a critical inter-
val (Step 4). Whenever the critical interval I∗ is
found out, Algorithm FB-EXT sets the execution
speeds of not only each task Ji,j in JI∗ but also all
tasks belonging to the same task frame that Ji,j
belongs to (Step 5). Once the assignment of the
execution speeds has been finished, the update of
the information about the remaining tasks is done
accordingly, the same as that in the algorithm pre-
sented in [22] (Steps 6-15). The time complexity
of Algorithm FB-EXT is the same as that of Al-
gorithm FB-MES.
Theorem 3 Algorithm FB-EXT can schedule a
multiframe task set T without any violation of
timing constraints if there exists a feasible sched-
ule for T.
Proof. Similar to the algorithm presented in [22],
the maximum speed in the speed assignment for
task instances derived by Algorithm FB-EXT is
the same as the intensity of the first critical in-
terval I∗ found in Step 4 of Algorithm 4. Since
there is no task instance whose execution speed
has been determined while finding the first criti-
cal interval, J′I will be empty set for any interval
I , and the calculation of the intensity of a given
interval is exactly the same as that in the algo-
rithm in [22]. As a result, the maximum execu-
tion speed of the schedule derived by Algorithm
FB-EXT will be the same as that derived by the
algorithm in [22], i.e., the derived schedule will
Algorithm 4 : FB-EXT
1: Create an aperiodic task Ji,j with the ready
time ri,j = (j − 1)Pi, the absolute deadline
di,j = ri,j + Di, and the execution cycles
ci,j = Ci,((j−1) mod Ni) for the j-th instance of
task τi ∈ T in a hyper-period, i.e., jPi ≤ L;
2: let J be the set of all of the aperiodic tasks
Ji,j;
3: while J 6= ∅ do
4: find the critical interval I∗ = [a, b] within
[rmin, dmax] by applying Equation (4) to
calculate the intensity of an interval, where
rmin = minJi,j∈J{ri,j} and dmax =
maxJi,j∈J{di,j};
5: set fi,((j−1) mod Ni)+1, f ′i,j and f ′i,y as
max{g(I∗), f ∗min} for each Ji,j in JI∗ and
all of the tasks Ji,y in the hyper-period
with (y (mod Ni)) = (j (mod Ni));
6: J ← J− {JI∗
⋃
J
′
I∗};
7: for each Ji,j ∈ J do
8: if a < ri,j < b then
9: ri,j ← a;
10: if b ≤ ri,j then
11: ri,j ← ri,j − (b− a);
12: if a < di,j < b then
13: di,j ← a;
14: if b ≤ di,j then
15: di,j ← di,j − (b− a);
16: Schedule the task set by EDF and execute
the j-th task instance of task τi at the speed
fi,((j−1) mod Ni)+1;
not violate the speed constraint if there exists a
feasible schedule.
Moreover, consider a given critical interval
I∗ = [a, b] found in Step 4 of Algorithm 4, the
total execution time of task instances in JI∗ is
no more than (b − a) −
∑
Ji,j∈J′I∗
ci,j
f ′i,j
by set-
ting their execution speeds as max{g(I∗), f ∗min}.
Combined with the total execution time of task
instances in J′I∗ , which is
∑
Ji,j∈J′I∗
ci,j
f ′i,j
, the to-
tal execution time of task instances in JI∗ and
J
′
I∗ will not exceed the length of the interval, i.e.,
(b − a). Therefore, task instances in JI∗ and J′I∗
can be scheduled under the EDF scheduling pol-
Task J1,1 J1,2 J1,3 J1,4 J2,1 J2,2
ri,j 0 10 20 30 0 20
di,j 10 20 30 40 20 40
ci,j 4 1 4 1 8 6
Table 1. The constructed aperiodic tasks in a
hyper-period.
speed
time
τ1
τ2
0 10 20 30 40
Figure 3. An optimal schedule in terms of the
energy savings for tasks in Section 2.2.
fore, the solution derived by Algorithm TB-MT
is also a solution of the frame-based approach.
For most cases, Algorithm FB-EXT is better than
Algorithm TB-MT since it lets each task frame
have its own reserved execution time and thus
has more freedom. However, Algorithm TB-MT
is still possible to be better than Algorithm FB-
EXT in some cases. For example, consider the
example mentioned in Section 2.2 by modifying
the patterns of nominal execution times as τ1 =
((3), 10, 10) and τ2 = ((10, 6), 20, 20), the energy
consumption of the schedule derived by Algo-
rithm TB-MT as shown in Figure 5(a) is 15.1539
and is less than that derived by Algorithm FB-
EXT as shown in Figure 5(b) which is 15.4624.
3.3 Implementation Issues
As we only focus on ideal DVS systems so far
in this project, this subsection will present how to
cope with some implementation issues with slight
modifications of our proposed algorithms when
the assumptions in system models in Section 2.1
are imperfect. We will focus our discussions on
two issues: (1) Task instances might complete
earlier than their worst-case estimations, in which
slack (unused time) reclamation can be applied.
(2) The processor has only discrete speeds, non-
negligible overhead for turning on/off, or non-
speed
time
τ1
τ2
0 10 20 30 40
(a) The schedule derived by Algorithm FB-
MES
speed
time
τ1
τ2
0 10 20 30 40
(b) The schedule derived by Algorithm FB-
EXT
Figure 4. The frame-based approach for tasks
in Section 2.2.
speed
time
τ1
τ2
0 10 20 30 40
(a) The schedule derived by Algorithm TB-MT
speed
time
τ1
τ2
0 10 20 30 40
(b) The schedule derived by Algorithm FB-
EXT
Figure 5. Schedules for the modified execu-
tion patterns of tasks in Section 2.2.
negligible speed switch overhead.
Slack Reclamation By taking the regular exe-
cution patterns of tasks into consideration prop-
erly, our proposed approaches are able to achieve
more energy savings in most cases compared with
the existing slack reclamation algorithms. But, it
does not mean that slack reclamation is worthless
for multiframe tasks. For some applications, al-
though the execution times of task instances of a
task do conform to a regular pattern, it could still
have some variation between the actual execution
time and the nominal execution time. In such
not considered here. We evaluated for the mul-
tiframe task set T consisting of 10 or 20 tasks,
where the period Pi of a task was randomly se-
lected from a set P = {p|p ≥ 3, p|60} while
the time units were in the millisecond scale. The
number of frames Ni of a task τi was from 2 to
5. The variation of the nominal execution times
among frames of a task was specified by a con-
stant V , i.e., Ci,j was randomly set from Cmaxi
to (1 − V )Cmaxi in a uniform distribution, where
Cmaxi was the worst-case nominal execution time
of a task τi. Moreover, each task τi had a weight
µi ∈ [1, 5]. For a specified total utilization U , the
worst-case nominal execution time Cmaxi of a task
τi was set as
µiP
τj∈T
µj
U · Pi. In our simulations,
the range of the total utilization U and the varia-
tion among frames V were 0.5 ∼ 0.9 and 0.2 ∼
0.8, respectively. We simulated by applying the
power consumption profile of Intel XScale, in
which there are five speeds: (0.15, 0.4, 0.6, 0.8, 1)
GHz with corresponding power consumption
(80, 170, 400, 900, 1600) mWatt [5, 18, 19,
21]. The power consumption function can be
modeled approximately as Ψ(f) = 0.06 +
~
(
1.55( f
1GHz)
3
)
Watt (as adopted in [18, 19])
or Ψ(f) = 0.08 + ~
(
1.52( f
1GHz)
3
)
Watt (as
adopted in [5, 21]). As there was not much
difference between the above two approximated
power consumption functions, we would only
present our simulation results for Ψ(f) = 0.08 +
~
(
1.52( f
1GHz)
3
)
Watt, where fmin and fmax were
set as 0.15 GHz and 1 GHz, respectively.
A naı¨ve solution of the energy-efficient multi-
frame real-time task scheduling problem is to ig-
nore the information of the multiframe task set
and to use the total utilization U of the task set as
the execution speed for all task instances within
a hyper-period without adopting any slack recla-
mation. We used the result of the naı¨ve solu-
tion as the baseline. The normalized energy con-
sumption of an evaluated approach was defined
as the energy consumption for completing all task
instances within a hyper-period by applying the
evaluated approach divided by that by applying
the naı¨ve solution. We simulated each configu-
ration for 128 input instances independently and
reported the average value. In addition to our pro-
posed algorithms, slack reclamation algorithms,
ccEDF in [17], laEDF in [17], and GSlack in [2],
were also implemented for comparison. More-
over, the result of applying the algorithm in [22]
directly by ignoring the constraint on memory
space, referred to as LBound, was also adopted
as a lower bound of the energy consumption.
Note that, for the clarity of the figures, we will
only present those results to at most 100% average
normalized energy consumption. As laEDF might
have worse performance than the naı¨ve solution,
some data points might be omitted in the figures.
When the number of tasks in T is 10, Fig-
ure 6 shows our simulation results for different
variations of nominal execution times among task
frames. In our simulations, the frame-based ap-
proach always outperforms the slack reclamation
algorithms and is quite close to the lower bound.
When U is 0.9, Algorithm FB-EXT consumes
less than 6% additional energy compared with the
lower bound and can improve the slack reclama-
tion algorithms by 5 ∼ 16%. Even for the task-
based approach, Algorithms TB-WC and TB-MT
can perform better than the slack reclamation al-
gorithms when the variation of execution times
among task frames is limited. In general, the task-
based approach can achieve the maximum im-
provement when V is 0.4 ∼ 0.5. However, since
it is conservative to force all the task instances of
a task to have the same reserved execution time,
it might perform worse than the slack reclama-
tion. Moreover, as the variation of the nominal
execution times among task frames is increased,
the energy consumption of a task set will be dom-
inated by those task instances with large nominal
execution times. As a result, the task-based ap-
proach will derive schedules similar to the naı¨ve
solutions, and, thus, its improvement is degraded.
Unlike the task-based approach, the frame-based
approach has the flexibility to have different re-
served execution times for different frames in a
task. Therefore, the improvement of the frame-
based approach can rise as the variation of the
 40
 50
 60
 70
 80
 90
 100
 0.2  0.3  0.4  0.5  0.6  0.7  0.8
A
ve
ra
ge
 N
or
m
al
iz
ed
En
er
gy
 C
on
su
m
pt
io
n 
(%
)
V
ccEDF
laEDF
GSlack
TB_WC
TB_MT
FB_MES
FB_EXT
LBound
(a) |T| = 10, U = 0.7
 40
 50
 60
 70
 80
 90
 100
 0.2  0.3  0.4  0.5  0.6  0.7  0.8
A
ve
ra
ge
 N
or
m
al
iz
ed
En
er
gy
 C
on
su
m
pt
io
n 
(%
)
V
ccEDF
laEDF
GSlack
TB_WC
TB_MT
FB_MES
FB_EXT
LBound
(b) |T| = 20, U = 0.7
Figure 8. The results for different numbers of tasks.
5 Conclusion
This project explores how to efficiently cope
with multiframe real-time tasks for energy-
efficient scheduling in DVS systems. We have
shown that existing approaches use too much
space for storing the solution [22] or are too con-
servative by applying slack reclamation [2, 17].
By storing only one speed for each task frame
to reduce the space overhead, we propose algo-
rithms to derive energy-efficient schedules with-
out sacrificing too much performance in energy
optimization. Simulations show that our approach
can improve the slack reclamation algorithms by
5 ∼ 16%. Moreover, the gap between the en-
ergy consumption of our solutions and the lower
bound is less than 6%. However, we do not intend
to show that our approaches are always better than
slack reclamation for general cases, but, for mul-
tiframe tasks, we would like to show that existing
slack reclamation approaches might not perform
very well. For future researches, we will study
how to efficiently and effectively schedule multi-
frame real-time tasks over multiprocessor systems
in terms of energy efficiency.
References
[1] H. Aydin, R. Melhem, D. Mosse´, and
P. Mejı´a-Alvarez. Determining optimal
processor speeds for periodic real-time
tasks with different power characteristics.
In EuroMicro Conference on Real-Time
Systems, pages 225–232, 2001.
[2] H. Aydin, R. Melhem, D. Mosse´, and
P. Mejı´a-Alvarez. Dynamic and aggressive
scheduling techniques for power-aware
real-time systems. In Proceedings of the
22nd IEEE Real-Time Systems Symposium,
pages 95–105, 2001.
[3] J.-J. Chen, H.-R. Hsu, and T.-W. Kuo.
Leakage-aware energy-efficient scheduling
of real-time tasks in multiprocessor
systems. In IEEE Real-time and Embedded
Technology and Applications Symposium,
pages 408–417, 2006.
[4] J.-J. Chen and T.-W. Kuo. Procrastination
for leakage-aware rate-monotonic
scheduling on a dynamic voltage scaling
processor. In ACM SIGPLAN/SIGBED
Conference on Languages, Compilers, and
Tools for Embedded Systems (LCTES),
pages 153–162, 2006.
[5] J.-J. Chen and T.-W. Kuo. Procrastination
determination for periodic real-time tasks in
leakage-aware dynamic voltage scaling
systems. In ICCAD, pages 289–294, 2007.
[6] J.-J. Chen, T.-W. Kuo, and C.-S. Shih. 1+ǫ
approximation clock rate assignment for
periodic real-time tasks on a
可供推廣之研發成果資料表 
□ 可申請專利  ■ 可技術移轉                                      日期：98年 10月 28日 
國科會補助計畫 
計畫名稱：省電與性能最佳化技術:從應用面至系統面之探討— 
子計畫一：動態電源調整之即時程序排程及合成 
計畫主持人：郭大維教授 
計畫編號：NSC 95－2221－E－002－094－MY3 學門領域：資訊
技術/創作名稱 Energy-Efficiency for Multiframe Real-Time Tasks on a Dynamic Voltage Scaling Processor 
發明人/創作人 郭大維 
中文： 
為有效降低具多模（multiframe）性質的週期性即時工作之耗電量，
本計畫提出的兩種不同的排程方法。其中以工作為基礎的方法以相
同的時間來執行屬於同一工作的工作實體；而以框架為基礎的方法
則因為讓屬於不同框架的工作實體可以有各自的執行速度，故能更
進一步降低耗電量。在線上的應用上，兩種方法決定工作實體的執
行速度皆只需常數時間。 
技術說明 
英文： 
This project proposes two types of approaches: (1) the task-based 
approach and (2) the frame-based approach which efficiently and 
effectively minimize the energy consumption to schedule a set of 
periodic real-time tasks with the multiframe property, in which the 
execution times of task instances are characterized by a vector of 
elements that are repeated. The task-based approach allocates the same 
time length for the executions of task instances belonging to the same 
task. The frame-based approach can reduce the energy consumption 
further by assigning an execution speed to each task frame. For on-line 
use, the scheduling overhead for speed determination is constant in 
both types of the proposed approaches. 
可利用之產業 
及 
可開發之產品 
嵌入式系統設計產業 
技術特點 
當系統設計者所設計之系統中的週期性即時工作具有特殊重覆特
徵時，可利用本計畫所提出的排程方法來進行執行工作耗電量的最
佳化。相對於沒能適當考慮工作之多模特性的閒置時間回收演算法
（slack reclamation algorithms），我們的方法更能有效降低耗電
量，且在線上使用時，決定工作實體之執行速度的複雜度也較低。
而相對於需要大量的記憶體空間來儲存工作速度設定的最小能源
消耗排程，我們的方法僅犧牲些微的省電幅度便能將記憶體空間的
使用量限制在合理範圍。 
