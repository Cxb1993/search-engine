I 
 
中文摘要： 
在任何新的專案的生命週期裡，最重要的一個部份就是要定義出新系統的需求。需求
階段的活動，其實是最需要專業的投入，但我們通常都以非專業的方式來處理需求階段相
關之工作。在實例中，我們觀察到，與開發的案子有關的專案關係人(stakeholder)通常不是
沒有受過良好的訓練就是缺乏領域的相關知識和經驗。這樣的方式註定了失敗的高可能性，
在需求工程(Requirement Engineering)的領域中，有許多的方法都被提出來。而其中物件導
向需求工程(Object-Oriented Requirement Engineering)是將物件導向方法中好的特性用來幫
助需求階段的活動，像是需求擷取，分析，協商，文件化，驗證和確認，管理等等。有些
學者成功的應用了模糊理論的技術來處理不精確和不完整的需求。許多學者則著重在使用
者案例和情節來將需求有系統的模型化(modeling)。大多數的學者則只著重在需求工程的某
些片面方向(aspect)，而不是從整體來考量，像是整合(Integration)的問題，例如怎麼讓需求
文件與其他軟體工程生命週期階段的產物(Artifact)作整合。因此，實際上大多數的需求文
件仍然是以自然語言的文字格式 (text form)寫成的，這樣子會造成了充滿模稜兩可
(Ambiguity)、不一致(Inconsistency)、不精確(Imprecision)及不完整(Incompleteness)的情形。
除此之外，由於缺少精確的模型能力(modeling)，使得想要整合或追蹤其他階段的產物只能
倚賴人工，而造成時間上的浪費以及容易發生錯誤。這個缺點也讓我們在導入 CMMI 相關
活動，例如人工維護相關產物(Artifact)（文件）的追蹤性(Traceability)，的時候會花費相當
高的成本。為了能讓需求工程能夠有效的應用在實際的案例上，需求文件的模型化和與其
他階段的整合需要作深入的探討與研究。 
 
在這個計畫中，我們提出一個以實際模型為基礎的物件導向需求工程 (empirical 
Model-based Object-oriented Requirement Engineering(MORE))及與物件分析、設計、程式之
整合。這個計畫的主要目標為： 
 
I. 研究在需求階段中，以模型為基礎的物件導向模型(MORE)的可行性 
II. 從實務中來研究將‖以模型為基礎的物件導向需求工程‖(MORE)和‖物件導向
分析(OOA)、設計(OOD)、程式(OOP)‖的整合的可能性 
III. 分析整合物件導向需求、分析、設計、程式對軟體的發展及維護所造成的影
響 
IV. 設計和發展支援 MORE 的工具 
 
在這個計畫中，我們研究相關的研究和實際上需求階段的議題，也設計了MORE，並
實作支援MORE 工具的雛型。我們也將MORE 及其雛型工具應用在實際的系統上並證明
我們方法的可行性。 
 
關鍵詞: 需求工程，模型，物件導向分析，物件導向設計，物件導向程式設計，軟體 
發展及維護 
  
III 
 
 
Keyword: requirement engineering, model, OOA, OOD, OOP, Software development and 
Evolution 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
1 
 
一、前言 
近年來，國內資訊產業一直是我國外貿主力，在硬體方面，因產業硬體技術門檻的降
低，國外大廠的競爭以及大陸急貣直追，產品價值愈來愈低落，使得獲利已經大不如前(如
圖1所示)。從圖1 顯示，過去國內產業發展主要投資於低附加價值的硬體電子產業。 
 
 
圖1 2003 至2008 年全球資訊服務市場規模 
(Source: Gartner，資策會MIC 整理，2004 年11 月 ) 
 
根據研究顯示結果，未來資訊產業中軟體發展是未來的趨勢。軟體及相關服務產品及
資訊家電(IA)比例也不斷的成長。但是，軟體長久以來較少在國內受注目。近年來，亞太
市場成長顯著(如圖2所示)，更顯得日本、印度、大陸等國的競爭力大增，若不加強國內軟
體競爭力，國內資訊產業將會失去主導優勢。 
 
面對軟體需求的不斷增加，所帶來的相對問題，除了需要豐富且充足的人力資源外，
另外必頇考慮的是軟體是否具有品質(Quality)？軟體品質的好壞，絕大部分取決於軟體開
發流程。在世界趨勢中，目前軟體品質的標準是以美國卡內基美隆大學的軟體工程學院(SEI)
訂立的能力成熟度模型Capability Maturity Model(CMM)為評量指標。目前全球約有700 餘
個公司及組織的單位通過CMM認証。其中最高的四、五兩級，全球各自有73 與67 個單位
獲得，多數集中在美國及印度。中國大陸也相當積極。2000 年中國國務院發佈「鼓勵軟
體產業和積體電路產業發展的若干政策」中，明文規定對軟體出口型企業CMM 認證費用
予以適當支援。其大陸國內若干企業也已有獲得CMMI最高等級五的認證。 
 
過去，國內軟體產業普遍被視為艱苦行業。廠商規模偏小，且經營及獲利不易，大部
份套裝軟體業者均以發展中文相關處理工具(如倚天中文系統)及以文化區隔為藩籬的產品
(如華康字形、貿易財會等本土化商用軟體)爭取有限之內需市場，缺乏國際級旗艦產品，
產品外銷亦鮮少，而系統整合業者及專業服務業者除金融業軟體因國內自行開發較早，尚
可與國外廠商一較長短外，其餘皆只能在國外廠商爭食之夾縫中，以低廉之價錢承接技術
3 
 
� 缺乏世界級領導性產
品。 
� 軟體開發組織規模
小。 
� 客觀軟體評量標準未
被採用。 
� 土法煉鋼的軟體開
發。 
� 國內其他產業外移，
內在需求逐漸縮小。 
� 世界投資環境惡化，
企業領導人投資意願降
低。 
 
從表1軟體產業環境SWOT之分析，我們詴著利用管理學上的SWOT(Strength, Weakness, 
Opportunity and Threat)分析，分析台灣軟體產業外在環境的機會與威脅，及內部的優勢與
劣勢。我們可以得知，由於台灣軟體開發的可再使用性很低，而且水帄分工、垂直整合機
制並未形成，因此，台灣軟體產業如要進軍國際，則必頇要整合國際標準、導入軟體工程
方法以及相關工具之導入，組織團體才具其競爭力。因此，軟體工程的觀念在學、業界愈
來愈受到重視，許多軟體開發流程技術如雨後春筍般的被大量提出，例如RUP(Rational 
Unified Process)、OPEN(Object-orient Process Environment and Notation)、XP(eXtreme 
Process )、PRIME(Toward Process-Integrated Modeling Environments)等等。 
 
隨著軟體產業(Software Industry)重要性的提昇，軟體工程近幾年受到更多的重視，經
濟部最近幾年編了許多經費來推動能力成熟度整合模型 (Capability Maturity Model 
Integration, CMMI)相關之訓練課程及評鑑之補助，教育部也同時推動軟體工程之相關課程
之改善，期許能使產業在軟體技術及工程之提昇而能繼台灣在硬體方面的傲人成就，延續
至軟體產業。希望學界能在相關軟體工程人才之培育及訓練，過去幾年我們也看到許多產
業亦願意投入經費及資源來改善其軟體品質的相關活動，例如導入能力成熟度整合模型
(Capability Maturity Model Integration, CMMI)來提昇團隊之服務品質及團隊的成熟度。本計
畫希望從實務面來探討Model-based 之Object-Oriented Requirement Engineering(O.O.R.E.)
之相關議題及其於Object-Oriented Analysis (OOA) / Object-Oriented Design(OOD) / 
Object-Oriented Programming (OOP)之整合相關之議題，期許在理論與實務面皆有所突破，
亦同時解決軟體生命週期中最重要的一個階段—需求階段。 
過去在負責輔導公司提昇CMMI level之過程中，其中有一EPG團員，在未準備就緒即
急著進入CMMI預評，在受到很大的挫折之後，講出一句：『我們團隊真的還不夠”成熟”。』
道出CMMI之重要性，及對軟體團隊之提昇有如此重大之觀念及體質之改善，何其重要。
美國卡內基美隆大學的軟體工程學院(SEI)[67]雖提供Process Area的指引(guideline)，然而在
許多團隊仍面臨沒有適當的Tools及軟體工程方法，全世界的軟體工程界最近也重新檢討軟
體工程教育的問題，探討軟體人才訓練過程是否有問題，軟體有關課程的第一課程通常為
程式語言，不教需求(Requirement)及設計(Design)及流程(Process)的重要性，而直接教
programming language即實作(Implementation)，造成了許多人有了軟體等於程式的印象，甚
至在程式設計(Programming)的課程亦沒有教導何為好的程式或不好的程式，導致一般軟體
從事人員沒有品質觀念，更沒有教導如何測詴(Testing)。因此，軟體工程師的形成並沒有
經過完整的訓練，如果我們比較一位建築師的訓練過程，從基礎功的畫圖及相關設計，實
習及建築師證照的考取，絕無先蓋房子再畫圖的步驟，軟體工程的相關正確process及該有
5 
 
由於整個計劃所包含的環節對於目前軟體系統開發有相當的助益而且具備相當的急
迫性，在此我們希望能夠得到國科會在設備、人力經費上的惠予充分補助，使得可以加強
並擴充我們已有的研究成果經驗，進而發展出相關理論基礎及經驗，並落實應用於軟體系
統整合開發之中。日前於多個國際會議中與各國學者討論此計畫提出之概念，獲得多位各
國學者之迴響，英國、美國在此領域的專家也極為贊同此想法，美國UT Dallas 及CMU SEI 
幾位研究者, David Card 為輔導CMMI level 4及5 的專家 ，亦是Journal of System and 
Software 的Editor-in-Chief，ASU 的Professor W.T. Tsai 為SOA 之專家，香港大學的
Professor T.H. Tse 為Model-based testing 領域之專家，及北京大學多位教授，本計畫主持
人與之詳談此概念後，均獲得他們的贊同，也願意在未來一貣在此一計劃議題上共同合作，
此計畫之執行亦可提昇台灣軟體工程領域在國際之影響力。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
7 
 
的追蹤性(Traceability)的時候會花費相當高的成本。為了能讓需求工程能夠有效的應用在
實際的案例上，需求文件的模型化(Modeling)和與其他階段(Phase)的整合(Integration)需要
作深入的探討與研究。 
     
    在這個計畫中，我們提出一個以實際模型為基礎的物件導向需求工程 (Empirical 
Model-based Object-oriented Requirement Engineering(MORE))及與物件分析、設計、程式之
整合。這個計畫的主要目標為： 
 
I. 研究在需求階段中，以模型為基礎的物件導向模型(MORE)的可行性 
II. 從實務中來研究將”以模型為基礎的物件導向需求工程”(MORE)和”物件
導向分析(OOA)、設計(OOD)、程式(OOP)”的整合的可能性 
III. 分析整合物件導向需求、分析、設計、程式對軟體的發展及維護所造成的影
響 
IV. 設計和發展支援 MORE 的工具 
 
同時我們擴展物件導向的理念，將物件的觀念導入整個軟體工程的生命週期，並研究
其效益、影響及可行性。此程序最主要的精神就是累積軟體發展經驗並保存之。不同的軟
體發展階段需要不同的知識基礎，這些知識基礎來自很多經驗法則，有效的累積知識有助
於軟體成功，因此我們依循物件導向的理念，認為需求可以透過物件的方式描述，有效的
降低軟體開發初期之錯誤率，並達成需求再利用的效益。 
 
以下為本計畫所提出之 MORE 的特色： 
I. 提供一整合統一模組(Integration Unified Model)，供系統開發者設計軟體相關整合
模組(Integration Model)。我們將研發一個開發方法，可以彈性的針對每個不同階
段的軟體開發問題設計有效的整合模組。 
II. 提供一樣關係定義模組(Relation Definition Model)，提供系統開發者依據系統開發
不同的需求，建立需求間彼此的關係。現階段軟體開發強調協同合作，協同就是
為了達到開發團隊之間的合作機制。有此可見，彈性整合不同階段的模組，可以
連結所有相關的有效解決方案，以因應多變的軟體開發環境以及軟體需求。然而，
不同的需求間可能存在許多不同的依存關係，依照需求之間的關係依照物件的概
念建立模組，可以有效幫助系統開發者建立各需求間的相依模組(Relation Model)，
利用這些模組定義需求與需求關係。由此機制，可以將經驗的累積由一維的模組
再利用擴展到二維的流程再利用。 
III. 引入 CMMI 軟體流程作業模型準則。 
CMMI 是目前廣被接受的軟體發展流程標準，我們將把 CMMI 各等級的關鍵流
程(Key Process Area)包含在我們的方法與環境中，加強 Standard 及 M-based 協
助使用組織能自然地在開發流程中 Support of Measure，並符合 CMMI 的精神，
達到開發流程成熟度提昇的效果。 
IV. 提供電腦輔助軟體工程工具組(CASE Tool Set)，以支援系統開發流程內之各種活
動。我們將研發一個系統環境內建本計劃所研發之 CASE 工具，以幫助系統開
發使用者進行軟體工程各階段性工作、執行符合 CMMI 之標準開發流程、協調
9 
 
 
Lubars[55]等學者，研究出如何從一份使用自然語言（Natural language）的軟體
需求規格書中，發展出初始的物件導向需求規格文件(Object-Oriented Requirements)以
及初始的物件導向分析模組（Object-Oriented Analysis Model）。他們的方法是將軟體
需求規格文件連結到模組裡的物件，但是卻會發生段落重疊（Fragment Overlapped）
的現象，這是由於他們的方法是會出現所產生的物件導向需求規格文件會出現語意不
明確（Ambiguities）、遺漏（Omissions）以及重覆的描述（RedundantDescriptions）。
在本研究中，使用者可以根據專家所提出的物件導向模組（ Object-Oriented 
DomainModel），呈現使用者所需的物件導向軟體需求規格文件，由於已先將詞彙、
使用者需求定義、系統需求架構等預先定義並且物件化，因此較為完整，可以降低上
述的缺點發生。 
 
另外，也有相關研究指出[56]，大部分的軟體專案之所以會失敗，很大的原因是
由於軟體需求規格書的不完整(Incomplete)、語意模糊(Ambiguous)、以及不一致性
(Inconsistent)所造成的。在A.M.Salem的研究中[56] ，為了提升軟體需求規格書的正確
性(Accuracy)、一致性(Consistency)以及完整性(Completeness)，使用一個有規律、逐步
逼近並且有一個明確終點的解決方法來解決這個問題。但在A.M Salem的研究裡所提
出的方法，在自動化部分仍頇不足。因此本研究裡，我們除了提升軟體需求規格書的
正確性(Accuracy)、一致性(Consistency)以及完整性(Completeness)，我們也會提出一套
工具，以加強自動化的部分，讓軟體需求文件能更有效率的產生。 
在X. Zhu的研究[60]中指出，如何解決需求文件的不一致(Inconsistency)是軟體系
統開發的關鍵因素。而目前在偵測需求文件不一致的研究裡，大部分都侷限在語法層
面(Syntax Level)中[80][81][82][83]。因此，作者提出了以本體論為基礎(Ontology-Based)
的架構。透過此架構，可以從語意層面(Semantic Level)中偵測出需求不一致的部分。
但是此方法仍無法自動化，並且無法進行測量(Measurement)以及解決不一致性的部分。
而在我們的研究中，我們利用了功能點分析法來進行測量軟體大小，提出了利用軟體
物件導向的特性，來確保需求文件內容的一致性，以及最後會製作一套工具，強化自
動化的功能。 
 
H. Kaindl[1]在研究裡指出，大部分現實世界裡的專案，大部分都缺乏OOA的方
法，尤其是在早期的需求文件定義(Definition) 以及擷取(Elicitation) 部分。因此他結
合物件導向技術(Object-Oriented technology)與超文字(Hypertext)，發展出一套實用方
法，並提供一套工具(RETH)供使用者使用，改善了需求文件定義的架構以及完整性。
但此研究卻缺乏在處理過程中對使用者的引導，也就是說，使用者在定義需求規格文
件與OOA的期間，常會發生不知如何繼續處理。因此，本研究也會針對此問題，進行
研究、改善。 
 
一個導致計畫失敗的原因，主要的因素之一，就是缺乏良善的需求計畫文件
[84][85]。因此如何製造良善的工具，幫助開法者製作完善的軟體需求規格，便顯的相
當重要。然而，在已存在的軟體需求規格文件中，普遍存在同樣的問題[74]，那就是
使用者並無法分辨一份軟體需求文件之間的好壞差別。在本研究中，我們也會針對這
11 
 
應用軟體、多元的輸入模式，開發者可以自行制定符合己身需求的標記(tag)，做結構
性的描述，促使相同的一份文件呈現不同的規格，適用於不同的軟體，符合不同的設
備、滿足多重的輸入方式。 
 
再者，使用者可定義各種XML schema或者是根據W3C提供的DTD建構物件實體，
完成一份標準的XML文件，不管是開發者或是使用者都能解析這份文件，如：公司企
業經常使用不同的應用軟體，依此方法定義資料格式，企業間資料的傳輸便不是問題
[61]。 
因為XML 本身就是一種Meta Language，可利用XML 定義各種Model 的文件語言, 
在進行各種Model 轉換時可以利用XML 延伸出的XMI 來幫助文件的交換及存取。
XMI 是XML MetadataInterchange 的縮寫，在XMI 裡X 代表XML 跟eXtensible 雙重
意義。XMI 在1999 年三月二十三日正式W3C 被所建議為正式標準。 
 
XMI是一種提供以XML來交換Object-oriented Models 和資料的標準，XMI同時是
OMG(ObjectManagement Group)所認可的一種新的標準，讓使用者可以根據XMI 的標
準標籤(Tag)將UML 文件轉換為XML 及DTD 文件。XMI 讓XML 使用貣來更加的容
易，因為它應用了UML 圖形化的特性來產生XML 所需的文件及DTD 檔。而且XMI 讓
XML DTD 檔、軟體設計及XML 文件資料可以一致。XML 確實提供了一個很好的方
法來讓我們可以分享及交換資料，可是必頇要有一些額外的機制，才能讓這方法用來
分享或交換物件，而XMI 正是由OMG 認可的新標準可以讓我們使用XML來分享或交
換物件。 
 
在本計劃中將以XML 作為各階段的接著劑，進行資料格式的轉換，也將UML 轉
成結語言。 
 
7. 標準模式語言(Unified Modeling Language, UML) 
標準模式語言是一種Modeling language，結合了G. Booch，J. Rambaugh，與I. 
Jacobson 三人的物件導向方法論所提出的一種物件導向語言(OO Language)，並被
OMG 納入為標準。 
UML結合了Booch的OO method與Rambaugh的OMT與Jacobson的OOSE, 發展至
今(OMG UMLv1.3)已經包含了9 種diagram分別是[33][34][35]：USE-CASE diagram, 
Class Diagram, Object Diagram,Activity Diagram, State Diagram, Sequence Diagram, 
Collaboration Diagram, Deployment Diagram。 
目前UML 已成了一種通用的物件導向語言(Object Oriented Language) ，廣為被應
用在各類系統的描述及設計上，成為一種溝通設計理念的語言，除了主導廠商Rational 
的推廣及擴展之外，其它為數眾多的廠商及研究單位也利用UML 做為表達設計或研究
成果的語言。 
在軟體工程中，UML 已被應用在相關的研究中，譬如：Software Architecture、
Framework、Patterns、Software Process。應用在其它領域如：Real-Time system、embedded 
system 以及workflow。目前支援UML 的廠商與團體紛紛推出許多的工具，除了最著名
的 Rational 之 ROSE (Rational ObjectSoftware Engineering) 以外， TogetherSoft 與
13 
 
 
9. 軟體流程作業模型準則與國際標準 
A. CMMI[41][42][43][44][45]: 
CMMI是CMM模型的最新版本。早期的能力成熟度模型是一種單一的模型其英文縮寫
為CMM，較多用於軟體工程。隨著應用的推廣與模型本身的發展，該方法演繹成為一種被
廣泛應用的綜合性模型，因此改名為CMMI[44]。CMMI是應用於軟體業專案管理方法；實
際上，CMMI在軟體與系統整合外的領域，如科學研究，工程等等，甚至於日常的管理都
得到了廣泛的應用，並取得了相當好的效果。 
CMMI實際上可說是一種管理流程的標準化。CMMI有五個不同的等級，而每一個等級
對企業的管理力程度都有著不同的要求。企業可以改進管理模式，不斷地提高自己的CMMI
等級，從而達到提升管理水帄的目的。以下則是對於每一個等級作詳細敘述：[44][45] 
1. Level-1：初始級(Initial) 
企業對專案的目標很清楚明白。因此，專案的目標是可以實現。但是由於專案的完成
帶有很大的偶然性，企業無法保證在實施同類專案的時候仍然能夠完成任務。企業在初始
級上的項目實施對實施人員有很大的依賴性。 
2. Level-2：管理級(Managed) 
企業在專案實施上能夠遵孚既定的計畫與流程，有資源準備及權責負責人，對相關的項目 
實施人員有相應的培訓，對整個流程有監測與控制，並與上級單位對專案與流程進行審查。
企業在管理級水帄上體現了對專案的一系列的管理程式。這一系列的管理手段排除了企業
在初始級時完成任務的隨機性，保證了企業的所有專案實施都會得到成功。 
3. Level-3：定義級(Defined) 
企業不傴傴能夠對專案的實施有一整套的管理措施，並保障項目的完成；而且，企業能夠 
根據自身的特殊情況以及自己的標準流程，將這套管理體系與流程予以制度化。企業不傴
能夠在同類的專案上得到成功的實施， 在不同類的專案上一樣能夠得到成功的實施。科
學管理成為企業的一種文化，企業組織的財富。 
4. Level-4：量化管理級(Quantitatively Managed) 
企業的專案管理不傴傴形成了一種制度，而且要實現數位化的管理。對管理流程要做到量 
化與數位化。通過量化技術來實現流程的穩定性，實現管理的精確度，降低項目實施在品
質上的不確定。 
5. Level-5：優化級(Optimizing) 
15 
 
階段所需要達成目標的各種方法、限制，和其它的替代方案。 
4.Win Win螺旋模型[51]：Win Win螺旋模型(Win Win Spiral Mode)是藉由找出下一階段
的參與人員，參與人員所關心的事項，和整合這些事項等三個步驟來獲得下一階段所
需要達成目標的各種方法以及這些方法的限制，和其它的替代方案。 
5.RAD (Rapid Application Development )[51][52]：它是一種線性序列軟體開發過程模型，
能以元件為建構方法來快速的完成開發工作；其缺點乃在開發大系統時，則需要足夠
的人力資源來建立正確數量的RAD小組。 
6.同步開發模型 (Current Development Model)[51][53]：又稱為同步工程 (Concurrent 
Engineering)，可應用在所有型態的軟體開發上。它可以被大致描述成一系列的主要技
術活動、任務、及其結合狀態。此模型也定義了一串的事件，會對軟體工程中的活動
觸發狀態間的轉移。 
7.正規方法模型(Formal Methods Model)[51]：經由數學表示來說明、開發及驗證一個電
腦化系統，能排除含糊、矛盾的步驟，且提供了無缺陷軟體的承諾，此模型適用於需
要安全的環境。其缺點乃是其開發時間長，需要教育訓練，不容易將此模型使用來與
客戶作溝通。 
8.雛型法模型(Prototyping Model)[51] [54]：其最大的優點是可以確實掌握客戶需求，靈
活的修改。在傳統模式中，雖然也有強調雛型系統的重要，但是還不如採用物件導向
技術來的容易建構。 
上述軟體發展流程各有各的適用範圍，而一個軟體系統發展過程中，也有可能會
同時應用兩種以上的軟體發展模型，因此本計劃運用了物件導向技術的精神，讓系統
需求定義階段（SystemRequirement Definition）、分析階段(System Analysis Phase ) 、
軟體設計階段(Software DesignPhase) 、系統實作階段(System Implementation Phase)、系
統維護階段(System Maintenance Phase)整合串接貣來，提昇了異質開發模式下的元件再
利用性。 
 
11. 相關協助工具(CASE Tools)[68][69][70][71][72] 
電腦輔助軟體工程工具(Computer Aided Software Engineering Tool)，在軟體發展的生命
週期中逐漸受到重視[68][73]。良好的CASE Tool可以幫助軟體在開發、整合、維護的
過程中，提供高便利性，因此可見其重要性甚至大過硬體環境之良莠。 
 
CASE Tool 的開發，常是針對軟體系統生命週期中不同階段而設計。CASE Tool 可由
其功能、角色、支援的環境建構(硬體及軟體)或由來源、價格進行分類。如:專案管理、
程式編輯、雛形製作、分散式環境下物件導向資料庫設計、Date Warehouse 設計等都
有相關的CASE Tool 產品。 
 
由於購買CASE Tool的支出成本高，學習曲線陡峭，因此CASE Tool的評估、選擇適當
的CASETool 也成為現今探討的焦點。物件導向技術風行之後，也有OO (Object Oriented) 
CASE Tool的產品問世，並有套用Design Pattern 來開發、支援UML的發展趨勢。但隨
著企業軟體需求的日益強烈，CASE Tool卻是只能在局部的軟體開發階段發揮效用，再
加上和PSEE(Process Software EngineeringEnvironments)間還是有落差(Gap)存在，因此
整合性CASE Tool(I-CASE Tool)之需求更是日益增高[69][70]。 
17 
 
 
SPEM 的目的是定義具體的軟體發展流程，包括那些Process 或者UML 的指令，像是
RUP。在九十年代後期，統一流程和 UML 的產生，影響了軟體發展中的基本轉變。
Unified Process 的差異是被使用在廣泛的工業實施上，必頇加以訓練和實踐流程才會成
功。 
 
SPEM使用物件導向的方法來塑模相關的軟體流程，且SPEM以UML的語法格式表示之。
OMG定義成四層的組織架構： 
1、執行階段的流程，也就是說，意指真實世界的產物流程，正如同其所被制訂的。 
2、符合相關的流程之定義。這一層包含一般化的流程以及為特定專案量身打造的客
制化流程。 
3、流程之MetaModel(SPEM, UML)。 這一層提供template 予2。 
4、描述物件之工具 (MOF) 
 
 
 
三、研究方法 
在軟體開發流程(Software Process)的每一個階段(Phase)，從需求分析(Requirement 
Analysis)、規劃設計(Design)、實作(Implementation)一直到測詴(Testing)、維護(Maintenance)，
都有其適用的Model 及技術，例如物件導向分析(Object Oriented Analysis，OOA)、物件導
向設計(Object Oriented Design，OOD)、物件導向程式設計(Object Oriented Programming，
OOP)等等。而在需求擷取方面，雖然也有需求工程(Requirement Engineering)來幫助工程師
獲得客戶要求(Customer Needs)的相關資訊，再經由人工作業，來轉換整理成顧客的需求
(Customer Requirements)，然後得到最終的軟體需求規格 (SRS，Software Requirement 
Specification)。但是由於將顧客要求轉換成顧客需求必頇建立在經驗的基礎上，也就是說
如果工程師缺乏相關的經驗，在將要求轉成需求的過程當中，有可能會遺漏相關的資訊或
是必要之功能。本計劃的精神建立在經驗及實務的基礎上之外，另外也認為領域知識
(Domain Knowledge)在Requirement Engineering 中是不可或缺的，因為期望完整的需求來
自顧客是不可能，尤其在Non-functional 的方面的需求，如Security、Performance、Reliability，
除非顧客是在領域方面的專家(Domain Expert)，並且對於資訊領域非常熟悉。隨著E 化所
帶來的效益，需要開發的軟體越來越多樣化，包括醫療、國防，保全，經濟等等相關的軟
體套件，雖然都是用程式語言開發，但需要的知識背景皆不同。相同的詞彙在不同的領域
或許也會代表不同的意義，於是相關的專業知識也是成功地擷取需求重要的因素之ㄧ。在
實務面上訪談各樣各式不同的顧客時，可能同時由多位工程師負責，有些人有經驗，有些
人沒有或經驗不足。便很可能出現因為經驗不足或是沒有相關的專業背景，而造成所得到
的需求是錯誤的或是不完整，進而影響設計(Design)、實做(Implementation)階段，在無形
當中增加開發及維護成本。因此在需求階段取得精確、完整的需求將會是降低軟體開發成
本的關鍵，其重要性也是顯而易見。 
本計 劃所 提出 的實 際模 型基 礎物 件導 向需 求工 程 Empirical Model-based 
Object-oriented Requirement Engineering，MORE)，本計劃以用O.O. Technologies作為基礎，
主要原因是目前O.O.分析及設計語言如UML及相關O.O.程式語言，如Java，C++已被廣泛
19 
 
 
圖5 顧客需求擷取流程 
在需求開發初始階段，需求開發者收集所有顧客提供的相關資料，這些經由顧客
所提供的資料，通稱為顧客需求(Customer Needs) [44][45]，為了簡化顧客需求的擷取，
本計劃在此階段定義了一問題樣板(Customer Need Elicitation Template)，提供需求開發
者有效的擷取顧客需求，樣板的詳細內容如下所示: 
(1) Goal: What are the major goals of the project? 
(2) Functional Needs: What are the major functionalities of the targeted application? 
(3) Non-functional Needs: What are the non-functional expectations of the targeted 
application? 
(4) Operation concepts: What are the operation procedures (include the operation 
among legacy system and workflow application)? 
(5) Constraints: What are the constraints of the targeted application? 
(6) Environment: 
i. What kind of hardware will be used? (client/server) 
ii. What kind of operation system will be used? (client/server side) 
iii. What kind of application(s) will be used? (database/others) 
iv. What kind of network environment will be placed at? (internet/intranet) 
此樣板定義一系列的問題，問題的設計由軟體系統目標擷取為出發點，透過定義
軟體的最終目標，進而找出軟體主要需求(Software Requirement)，軟體需求包括功能
性需求(Functional Requirement)及非功能性需求(Non-functional Requirement)。上述三
要項(goal, Function Requirement and Nonfunctional Requirement)勾畫出此系統之主要
藍圖。 
除此之外，顧客需求還包含軟體運作環境(Environment)之定義，其主要元素包括
21 
 
詳情如表4所示。 
 
圖6 ATM system之使用案例圖 
表4以ATM系統中的取款功能為例子，描述此系統為達到提供顧客所需款項所做
的所有互動行為，其中包括驗證使用者密碼、要求輸入取款金額、確認取款金額及列
印交易明細等。在劇情的描述語法，本計劃強調從6W(Who、When、What、How、
Why、Where)面向觀之，以表二中的步驟一、二為例，Customer (Who)在任何時間(When)
都可以透過insert a cash表 C012 共 74 頁 第 26 頁card(How)來進行取款交易(What)，
cash card幫助ATM系統(Where)進行申份確認(Why)。 
表4 A scenario of withdrawing cash from ATM 
Function: Withdraw Cash from ATM 
Input: cash card, password 
Output: cash, receipt 
Scenario: detail of interaction behaviors 
One of Actors ATM 
1. The customer initiates a transaction for withdrawing 
cash by inserting a cash card into ATM at any time. 
 
 2. The ATM shall request the password through the 
user interface of ATM in English. 
3. The cash card owner presses the touch-keyboard of 
ATM to enter the password. 
 
4. The owner presses the OK button (on keyboard) to 
notify ATM the end of the password. 
 
 4. The ATM system shall verify the password got from 
the customer in an acceptable time 3 seconds. 
 5. If the data is OK, the ATM shall request the kind of 
23 
 
1.2 Identifying Involved Entities of Application Domain 
從功能需求之互動關係描述(如表4)擷取軟體元件包含以下這些步驟: 
首先，需求開發者依據Domain Object的定義(定義在Definition1,2)，擷取參雜在劇
情描述(scenario description)中的靜態元件(candidates)。接著，根據這些劇情描述找出
候選元件中的properties，同時建構元件間的靜態關係。在這階段，可能有些
properties-introducing domain object(定義在Definition)產生。接下來，開發者依據這些
被建構出來的properties-introducing domain object建立property-introducing area (定義在
Definition)，依據被定義出的property-introducing area，需求開發者可以有效的刪除多
餘的靜態元件，取得精確之靜態元件。最後，開發者再根據這些元件與相關的
stakeholder進行進一步的元件規格描述。其流程圖7所示: 
 
圖7 The process of identifying the involved entities of the application domain 
本計劃所使用的Model引用了物件導向的技術來建構Modularized Objects (描述在
scenario of use cases)，這些Objects描述了真實環境中有形或無形的實體(Entity)，這些
25 
 
 
圖9 Partial semantic network of withdrawing money scenario 
所有的軟體必定應用在某些特定的領域，每一特定領域一定隱含某些特殊概念，
這些特殊概念可以透過靜態資料或動態資料進行描述。在上述的階段，我們對於需求
描述中的靜態元件進行擷取，並建構其相互關係，這些被定義出來的Domain Objects，
是用來描述某特定領域之靜態資訊，所以接下來我們定義了一Domain Model，這個
Model收納了所有此領域中的Domain Objects，藉此來描述規範此領域所表示的靜態資
料。 
Definition 4 (Domain Model). A domain Model contains a set of domain objects. A 
Model represents the whole concepts of involved entities in the application domain 
through the domain objects. 
 
圖10 The semantic network of withdrawing money scenario 
圖10描述ATM系統中領取現金這個Domain Model的所有相關的Domain Objects。 
27 
 
然而不幸的是，軟體需求開發是一種循序漸進(Incremental)的模式，開發者協同相
關的需求提供者(Stakeholders)，擷取相關的軟體需求及互動行為，這些需求內容需要
經過一連串的分析與討論才得以一一釐清，得到最終的結果。 
現有的需求開發技術多半提供片面的紀錄如Petri Net, Activity Diagram，然而片面
的紀錄對於後續的需求開發有嚴重的不良影響。開發者往往在不自覺得情況下，漏失
了一些必要的資訊。也可以這麼說，現今所擁有的技術不符合需求開發的本質，因為
需求開發採循序漸進式，所有的不確定因子都是後續開發必頇考量的重要影響因素，
目前用於需求開發的技術多半不支援這樣的特質。 
過去，許多研究[4]詴圖改良Petri Net 或是 UML中的Activity Diagram來尋求突破，
他們多半以紀錄軟體需求開發的過程及開發產物為主軸，但至今仍未有重大突破。有
鑑於此，本計畫延伸顏色派翠網路(Color Petri Net)[99]，希望透過此派翠網路描述軟體
系統內部的行為，提供一支援漸進式需求開發之階層式物件導向派翠網路(Hierarchal 
Object Orient Petri Net)，此網路繼承物件導向之既有特性，並同時支援漸進式需求開
發。此網路主要特性如下所示: 
(1) 支援抽象性(Abstraction)描述 
本網路可紀錄需求開發中的中間產物及階段性產物，以抽象形態表述未明確
化之軟體需求，將這些抽象化的元素加駐在派翠網路的組成元件當中 (place, 
transition, token)。如此一來，只要可以透過此網路所描述的所有情況，都可以繼
承現有的網路分析方法來進行分析。也就是說，縱使現存的需求資訊不完整，開
發者可以利用抽象元件來描述不完整或是未明確的部分，同時透過派翠網路分析
方法進行階段性分析，換句話說，具備抽象性分析最大的好處在於，及早發現需
求內所隱含的問題，由此降低軟體開發風險。 
(2) 符合需求開發之漸進式(Incremental)特質 
需求提供者對需求的不確定，及需求開發者對特殊領域的知識不足，這兩項
因素是擴增需求開發時間。在需求期間，需求開發者詴圖從需求提供者所提供的
相關資訊中擷取必要資訊，這樣循序漸進的過程需要有適當的紀錄及開發工具有
效開發軟體需求，本計畫提供之改良式派翠網路，結合物件導向之既有觀念，承
接物件導向之再利用精神，將需求資訊進行物件化包裝，進而促使需求元件具備
抽象特質及階層式特性，特過這些功能輔助軟體需求的有效開發。 
(3) 此網路提供階層式呈現(Hierarchal Representation) 
過往，需求開發者往往透過一張或是幾張派翠網路或是動態圖描述系統所有
內部行為，透過這些圖形的描述，表達了此系統的最終行為結果，可想而知這些
圖形一定相當複雜，難以判讀。本計畫所提出的派翠網路可提供階層式描述，將
系統所提供的所有功能分為數個階層，由高階的系統功能，到低階之每項功能內
部運作。開發者透過圖形的輔助專注於部分功能的需求開發，如此一來可以減低
需求開發的複雜度。 
(4) 紀錄需求開發過程所產生的相關資訊(Record the Progress of Requirement 
Development) 
由於本計畫所提出的網路可支援抽象性描述及階層性表達，所以此網路必定
可以記錄所有需求開發中所產生的產物，紀錄所有需求的生產過程，最大的好處
在於了解這些需求的由來及發展過程，保持需求的抽象性描述到細節呈現的追朔
29 
 
為需求開發樣板，當真實的需求資訊(Token Instance)填入此樣板，表示樣板Instance即
被產生。所以在我們的定義裡，每一個不同的net擁有自己的名稱，每一個被建構出來
的Net Instance有其id，在第一個時間點放置在Place上的所有Token皆屬於 Token Class
的Instance，這些Token Class被定義在Token Set中。 
Definition 1. HPNet 
1. name is a variable for the unique name of a HPNet 
2. id is an identifier of the net instance to distinguish multiple instances of the net. 
3. M0: P � Di+ is a function for initial marking on each instance of the net, where 
for each place p∈P, there is di∈Di+ token instances set. 
本計畫所提出的階層式物件導向派翠網路與舊有的派翠網路之定義有些許相似，
基本的組成員素仍舊是Place、Transition、Token，在Place和Transition間由Arc進行連接，
在每一的Arc上透過WeightFunction給予不同的權重值，透過Label Function給予不同網
路間相同Place或Transition相同的Label。藉此來維護不同網路間相同元件的一致性。 
Definition 2. For a character set Σ, a HPNet is a 6-tuple Net = (P, T, D, F, W, L), where 
1. P is a set of places, 
2. T is a set of transitions, 
3. D is a set of tokens, 
4. F is a set of arcs known as a flow relation. The set F is subject to the constraint that 
no arc may connect two places or two transitions or more formally: F⊆(S× T)U (T
× S), 
5. W: F � D is a set of arc weights, which assigns to each arc f∈F, d∈D denoting 
what tokens are consumed from a place by a transition, or alternatively, what tokens 
are produced by a transition and put into each place, and 
6. L: P U T �Σ+ is a label function that associates a distinct label taken from strings 
(Σ+) with each and transition of P and T. 
然而，網路間的主要組成元素Place和Transition可以擁有兩種型態，一種是Primary 
Type，另一種是Abstract Type。對於Primary Type的元件而言，這樣元件不再需要經過
精細化(Refinement)，也就是說，這樣的需求已經是最終需求。對於未完整的需求描述，
開發者可採用Abstract的資料型態來進行描述。除此之外，本派翠網路，同時也記錄這
些抽象形態之需求的精化狀態，當這些抽象化需求有進一步的精化(Refine HPNets)，
本網路會利用Refine Variable來進行紀錄，並標示抽象的詳細狀況。 
Definition 3. A set of places and transitions in a HPNet is defined in P and T 
respectively, where 
1. abstract is a variable representing an abstract state of a p∈P and t∈T, respectively. 
2. refine is a flag variable denoting the refinement state of a p∈P and t∈T, 
respectively. 
如定義三所示，建構派翠網路的同時標註相同元件的Label，在定義四當中，利用
定義三所建立的Label來建構相同元件存在不同網路間的關聯性。這些被連結的相同元
件，會因為某一網路中的狀態改變而引貣連鎖反應，藉此保持網路與網路間的一致
性。 
Definition 4. Let { Neti | i = 1…n } be a set of HPNets. Node is a set of all the places 
31 
 
 
圖12 電話系統之部分派翠網路圖 
 
2. The Integration of MORE with the OOA/OOD/OOP 
物件導向技術(O.O. Technologies)雖然被廣泛的接受，然而很少被研究探討完全整
合後之 O.O. Model，尤其討論與 Requirement Phase 之整合，因此在實際運作上，大部
分 Requirement Document 仍然以 Text 的方式存在，雖然有許多人從事 Requirement 
Engineering[1][55]的研究，或亦有人投入 OORE[11][12][13][62][63]，較少人探討將整
合後之 Model 來呈現及對整個 Software Life Cycle 之各種活動之相互影響及效益。如
圖 13，在 Software Life Cycle 中之各項活動，各種 Artifact 均有非常高之相依性
(Dependency)及關連性(Relationship)，Information 的 Granularity 及 Completence 亦因軟
體發展及緩慢的進展有所不同，例如在 Requirement Phase，只有 High Level 及較
Abstract 的資訊與對應到較 Low Level 及較 Detail 的 Source Code，所以只研究某一階
段之問題常常無法真正解決問題，因此從整合之角度去分析各階段之間的差異及整合
之可能性，是非常重要的工作，也較能應用到實際的工作上。 
33 
 
 
圖14 A conceptual view of Integrated Unified Model(IUM) 
圖14描述此整合的統一模組結構Integrated Unified Model(IUM)，此概念圖表示透
過此模組可以記錄各階段之Model，例如:需求階段Model、軟體設計Model、系統實作
Model、系統測詴Model、軟體維護Model、與其他軟體相關Model等。透過這些Model
我們可以產生不同的Model實體(Instance)，以需求發展流程為例，我們可以將此流程
又細分為六個不同的階段，一為Inception階段，二為Requirement Elicitation階段，三為
Requirement Elaboration階段，四為Negotiation階段，五為Requirment Specification階段，
最後為需求驗證階段。不同的階段裡需要不同的技術與支援，所以圖14，我們列出在
需求發展階段，可能會有需求擷取Model實體、需求描述Model實體、需求驗證Model
等。 
圖15描述關聯模組Relation Definition Model(RDM)，此概念圖表示透過RDM所定
義之Template可以客製化出許多不同的鏈結關係，不同的鏈結關係代表不同的意義，
也聯結不同的Model元件。我們相信針對軟體發展，不同階段裡所發展出來的Model，
需要許多不同的鏈結關係建構他們彼此間之依存。因此透過RMD之協助，可以有效的
達到此目的。 
35 
 
Requirements來完成。最後驗證階段，則是經由Establish operational Concepts&Scenarios、
Establish a Definition of Required Functionality、Analyze Requirements、Analyze 
Requirement in achieve Balance和Validate Requirementswith Comprehensive Methods所
組合完成，詳細的情況如圖16所示。 
 
圖16 The activities of Requirement Development Process Area in SW-CMM 
經過整理後我們可以發現，需求發展的主要流程由四個主要的Activity所組成，而
且前後具相依性，在此主要流程中的每一個Activity又可被細分為一個子流程，其詳細
的情形如下圖17所示。同時在主要流程中的每一個Activity有其相對應的Artifacts，在
圖17也有詳細的描述出這些Artifacts與流程之間的關係。所以我們透過參考現行的有
效標準如CMMI，開發有效之需求發展流程Model。 
但是此需求發展流程Model傴止需求發展流程部份，並未描述其詳細的實作內容，
因此我們參考現行的需求發展之相關研究，針對需求發展相對應的技術、方法進行更
詳細的描述。 
 
37 
 
然而，軟體需求的發展是相當困難的一件事，單純透過正向(Forward)的軟體需求
發展，所需花費的成本相當的昂貴。很多相關的研究指出，新興的軟體系統可以完全
採用正向需求發展模式，其他的軟體系統，則可參考現行的軟體系統功能，進行分析
設計。因此，需求發展的反向工程相對重要，不傴如此，良好的資料保存與描述，更
能夠有效突顯現有資訊的可用性。 
我們有鑑於此，所以在此範例中，我們將現有的需求再使用(Reuse)方法，進行
Model設計，其詳細架構如圖19所示。此方法有效幫助分析同類型系統之必要軟體功
能，換句話說，軟體功能也就是在這邊所指的軟體需求。同時，它也針對輔助性功能
及非必要性功能提供評估方式。透過此Model的設計，系統開發者，可以參考現行系
統他們所具有的基本功能，並且評估這些現行系統隱藏之非功能性需求(Non-functional 
Requirements)。這些參考依據可以幫助開發者，快速擷取系統主要需求，針對這些主
要需求進行徹底了解。如此一來，不傴可以妥善利用現有經驗，同時可以減少需求擷
取時間，更能夠增加需求可信度，最後促使提升軟體成功的可能性。 
 
圖19 Domain requirement elicitation Model 
從前面的描述我們可以發現，系統需求需要描述他的六個因子(Who、Where、How、
What、Why、When)，然而如何才能將此六項主要因子描述的清楚明白呢?目前有許多
的研究指出，目前大部分需求均用自然語言(Natural Lanuage)Text Format呈現，包含許
多不好的特性，如模稜兩可(Ambiguous)、不明確(Incompleteness)、粗糙(Coarse-grained)，
39 
 
 
 
從上面的描述我們知道，我們已經建立需求發展流程Model、特定領域之需求擷
取Model以及需求描述Model，這樣Model之間存在合作的關係，如需求發展流程Model
中的Develop Product Requirement Activity，會利用需求描述Model進行系統需求描述，
在Develop Customer Requirement Activity中，會利用特定另領域之需求擷取Model進行
Customer Requriment Elicitation。在開發現有專案的情況下，我們會利用特定領域之需
求擷取Model分析現有系統之功能，這些資料將成為需求描述Model之主要參考依據。 
41 
 
為佐證本計劃所提出之以 Model 為基礎之需求工程 (Empirical Model-based 
Object-oriented Requirement Engineering, MORE)提出一個以 Model 為基礎之需求工程
協同開發環境(MORE Environment, MOREE)，此環境延續先前研究成果，針對不同問
題領域，Model 的建立、Model 的組合、及 Model 的使用，應用於系統規模的度量、
各相關子功能進行模組化之關聯性探討、模組分析與設計、整合分析與原型發展，利
用其理論設計一套具實用性質的工具與系統整合流程環境。其開發環境，如圖 23 所
示。 
 
圖 23 The architecture of MORE environment (MOREE) 
MOREE由三大設計功能組成： 1.OOR Modeling Definition Tool、2.OOR Relation 
Modeling Tool與3. Process Executing Domain，以下分別詳加描述： 
3.1 OOR Modeling Definition Tool 
在OOR Modeling Definition Tool (ORMDT)裡，提供使用者定義某特定領域的
Model，此Model包含各個靜態與動態元件的定義，如圖24所示。OOR定義模組(OOR 
Defination Model)定義了靜態與動態的元件，靜態元件工具定義模式、角色定義模式、
文件定義模式；動態原件則包含軟體流程定義模式及方法定義模式。Model設計者，
可以透過含有O.O. Definition Unfied Model的OOR Modeling Definition Tool來塑模一個
符合使用者需求並可信賴的“Specific Problem MOREE Unified Model”。 
43 
 
五個子模型。Foundation Model提供了基礎的語義和基本的元素，讓OOR Unified Model
能對其他四個子模型加以描述。Process Model 定義了結構化流程模型元素，Process 
Engineer 可以利用這些元素來建構軟體發展流程。然而一個流程是由多個不同的
Activity 所組成，一個 Activity 包含有一個或多個 Task，這些 Task 透過相對應的
Methodology 產生適當的 Artifact，因此，我們也定義 Artifact Model，其描述資料模型
元素，透過這些元素可以製造、修改、重新定義 Artifact。再者，一個恰當的 Methodology
需要有輔助的工具幫忙實作完成，所以我們在 Tool Model 裡的模型元素定義了在實際
執行軟體開發時，實踐 Methodology 的 Tool。最後，Role Model 則定義了參與 Activity
之各個成員角色。 
一個完整的 OOR Unified Model 交集了上述 5+1 個子模型，它們內部的關聯簡化
如下： 
I. Role Model 利用“is responsible for”結合關係連結了 Artifact Model。 
II. Artifact Model 利用“Be Used as Input”與“Produces as Output”關係來跟
Process Model 互相連結。 
III. Role Model 利用“performs”結合關係來連結 Process Model。 
V. Tool Model 利用“supports”關係支援其他三個 Sub Models。 
VI. Process Model 利用 Methodology Model 來定義 Task Execution Way. 
VII. 在 MOREE Unified Model 內所有的 Model elements 和 relationships 都是透
過 Foundation Model 裡的元素所描繪出來的。 
3.1.2 The Foundation Model 
Foundation Model 是 OOR Unified Model 裡最基本的 Sub Model， 它提供了 OOR 
Unified Model 所需要的基礎語義文法。Foundation Model 可以由三個不同的 Views 來
表現，即 The Core View、The Relationship View、The Basic Elements View 如圖 26，以
下將分別描述之。 
3.1.2.1 核心概觀(The Core View) 
The Core View 的結構類似 UML 1.4 的 Core Package，如圖 27 所示，這個 view 裡
面的元素模型(Model elements)與之間的關聯組成了 OOR Unified Model 的基礎支幹。
以下詳細說明： 
ModelElement是最原生的模型元素。在OOR Unified Model裡面所有的模型元素，
皆繼承於 ModelElement。ModelElement 有兩個基本屬性 (Attribute)，Name 和
Dependency。Name Attribute 代表此模型元素的名稱，而 Dependency Attribute 則賦予
了模型元素與其它模型元素彼此間能存在有相依關係。基礎於這個原則，在 OOR 
Unified Model 裡面所有的模型元素之間都可以擁有相依關係。 
Classifier 是所有 Class 的原生模型元素。在 OOR Unified Model 裡面所有的類別
元素(Class)，皆繼承於 Classifier。Classifier 有一個基本 attribute，Generalization。
Generalization Attribute 賦予了 ClassElement 繼承(Generalization)的能力。基於這個原
則，在 OOR Unified Model 裡面所有的 Class Element 都可以擁有繼承能力。 
45 
 
改變有可能會影響到另一個使用該事物的事物規格，但反過來則不一定成立。
Generalization 如UML所定義，Generalization是一般性事物和其特殊性事物之間關係。
Association 如 UML 所定義，Association 是一種結構關係，它可以訂定某一種事物的
物件是如何與另一種事物的物件之間互相連結的。 
3.1.2.3 基礎元素概觀(The Basic Element View) 
The Basic Element View，如圖 29 所示，詳細描述了在 MOREE Unified Model 裡
面，用來描述與引導流程元素的基本元素。以下詳細說明： 
 
圖 29 基礎元素概觀圖 
Guidance 用來連結模型元素，以提供更多詳細的資訊來引導使用者運作此模型元
素。Guidance 有兩個基本 Attribute，AnnotatedElement 和 Kind。AnnotatedElement 定
義了 Guidance 所連結的模型元素；Kind 定義了此 Guidance 的種類，屬於 GuidanceKind 
Element。模型元素根據不同的流程定義，可能連結數種可能的 GuidanceKind 子元素。 
GuidanceKind Guidance 的分類， 用以區別 Guidance 的中種類。而 GuidanceKind 
包括了 Technique、ToolMentor、CheckList、Guideline、Template、CASETool 六大類。 
3.1.3 流程模型(Process MetaModel) 
Process MetaModel 是用來定義軟體開發流程之所有活動(Activity)與其之間關聯
順序的模型。如圖 30。 
ProcessPerformer 泛指在軟體開發過程中，負責處理 WorkDefinition 的參與者。參
與者可能是一位或多位，由 ProcessRole 表示參與者的身分。 
47 
 
輔助系統開發流程活動中的下一階段順利執行。 
SourceCode 包含系統開發原始程式碼、中介碼以及可執行檔。在軟體開發的流程
中，所產出的程式碼，可能包括 Java bytecode 以及 Component( 含 Executable File 以
及 DLL(Dynamic Linking Library) )。 
 
圖 31 Artifact Model 靜態結構圖 
 
圖 32 Role Model 靜態結構 
49 
 
物即是 Workproduct 類別中 UMLModel 子類的實體，如 AnalysisModel 與 
DesignModel。 
LowerCASETool 表示低階的 CASE 工具，如整合性的開發環境。LowerCASETool
繼承於 CASETool 類別，在 MORE 系統中，延伸的子類別即是有具體功能的低階 CASE
工具如 JBUILDER。而低階 CASE 工具產出物即是 Workproduct 類別中 SourceCode 子
類的實體，如函式庫與可執行檔。 
DocumentationTool 在 MOREE 中，此類別表示用來編輯文件的工具軟體，繼承於
CASETool 類別，DocumentationTool 類別延伸的子類別即是有具體功能的文件編輯工
具，如 Microsoft Word。而低階 CASE 工具產出物即是 Workproduct 類別中 Document
子類的實體，如 MS WORD、Excel 檔或文字檔等等。 
3.1.7 MOREE 統一超模型 Sub Models 之整合 
基礎於3.1.1節所描述，MOREE統一超模型能利用Foundation Model提供的語意，
整合交集 Process Model、Role Model、Tool Model、WorkProduct Model、Methodology 
Model 五個 Sub Models 且包含足夠之文法語義以描述軟體開發專案型態、軟體開發組
織、軟體技術領域等各種影響軟體開發之因素，以重新組態適合之軟體開發流程，如
圖 34。 
 
圖 34 MOREE 統一超模型交集五個 Sub Models 之靜態結構圖 
3.1.8 MOREE Unified Model 之結構 
我們以基礎於 XUM 的 XML 表示法，來描述本計劃之 MOREE Unified Model。利
用 XUM 的語義文法的精神，設計了一個連結：Model_Link，用以描述 MOREE Unified 
Model 中之四個 Sub Models 間的交互參照關係。Model_Link 現階段的連結共有三種型
51 
 
  <Process_Role id=‖pr_001‖> 
  <Name> System Analyst </Name> 
   <Permission> Build UML Models </Permission> 
   <Permission> Modify UML Models </Permission> 
  </Process_Role> 
   <Process_Role id=‖pr_002‖>…</Process_Role> 
   … 
 </Role_Model> 
 <Artifact Model> 
  <Artifact id=‖wp_001‖> 
  <AF_Kind> UML Model </AF_Kind> 
  <Name> Use-Case Model </Name> 
  </Artifact> 
  <Artifact id=‖wd_002‖>…</WorkdProduct> 
 </Artifact Model> 
 <Tool Model> 
  <Tool id=‖to_001‖> 
   <Type> Upper CASE Tool </Type> 
   <Name> Rational ROSE </Name> 
  </Tool> 
  <Tool id=‖to_002‖>…</Tool> 
 </Tool Model> 
</MORE Model> 
圖 35 基礎於 XUM 的 MOREE Unified Model 之 XML 表示法 
3.1.9 MORE Modeling Tool： 
MORE Modeling Tool 是透過 MOREE Unified Model 裡的語意文法，來塑模一個
特定問題領域的 Specific Domain OOR Unified Model。根據 MOREE Unified MetaModel
之組成Sub MetaModels，OOR Modeling Tool亦必頇擁有Process Model、Artifact Model、
Role Model、Methodology Model、與 ToolModel 之塑模能力。詳細說明如下： 
53 
 
 
圖 37 整合流程角色示意圖 
 
圖 38 整合流程輔助工具示意圖 
3.2 OOR Relation Modeling Tool 
55 
 
Model 之間的 Relation，產生 Relation Model Definition。 
最後，所產出的即為各個領域所定義的 Problem OOR Models，並將之存入 Problem 
Model DB 當中，以供 Process Performing Domain 來處裡使用者操作作業的參考。 
3.3 Process Performing Domain 
 
圖 40 Process Performing Domain 
根據軟體開發特性，在此領域中除了存在一般已被大眾所接受的軟體開發流程，
也提供組態工具讓系統開發者能訂立符合特定領域需求的流程，如 Real-time system、
Embedded system 等等。而開發者除了單純流程制訂外，尚必頇根據相關軟體開發週
期，選擇各週期中使用的相關 CASE 工具，來輔助開發各步驟的進行。如：Requirement 
Tool（Drive metric socket set[36]、Joint Deployment Process Owner(JDPO)[37]）、Analysis 
& Design Tool（Solaris[93]、Heap Analysis Tool(HAT)[38]、UML[94]）、Testing Tool
（Junit[39]、RHiTech Code[95]）and Measurement Tool（TestDirector[96]、WinRunner[40]）。
同時，其各種產出物(Work Product)也必需被指定，如專案計畫書、系統測詴計畫書、
需求分析報告、系統設計文件等等。 
由於 Software Developer 對於 CASE Tool 的開發模式的不同，所開發出來的 Work 
Product 也不盡相同，我們打算將 MORE 所定義的各項 CASE Tool，導入 Model-based
的概念，針對每一個階段，定義出不同的 Model 讓 Software Developer 套用，這樣做
的主要目的，就是讓其他參與的 Software Developer 也能夠很快的進入狀況。尤其在
Model-based Requirement CASE tool，由於現在大部分需求文件都是由 Microsoft Office
的 Word 來做編輯的動作，而 word 跟大部分文字編輯器一樣，只能將使用者所想要的
需求記錄下來，而需求之間的關係也只能藉由文字來描述。而在 MORE 中，透過物件
導向技術與需求的結合，需求將會用物件的觀點來表示，每個需求是由最基本的物件
來表示，而需求所需要的相關數值或是條件可以利用物件導向技術當中的屬性來表示。
而物件與物件之間的關係可以經由整合物件導向技術的編輯器裡的格式，如字型、大
小、顏色等等來表現。而相較於傳統編輯器的不同，整合物件導向的編輯器可以表現
出物件導向之間的特性-繼承。而在撰寫需求時，如果需求文件裡面有相同的需求時，
亦或是有大部份相同的需求，就可以利用繼承的觀念，讓必頇有比較特殊限制的需求
去繼承比較一般化的需求，然後再藉由屬性的運用來達到需求特化的目的。而在需求
階段，如果當中的需求有所改變，根據繼承的特性，只要上層的需求修改，那麼底下
所有繼承的子需求，便會同步更新，就不會造成前後不一致的狀況發生。另外，由於
有繼承的特性，那麼便表示也會有階層的特性存在，如果真的在需求階段當中，出現
了不一致的狀況發生，或是其他的錯誤產生，那麼就可以逐層檢查，找出發生問題的
57 
 
的工具也能和 MOREE 系統協同運作。 
而在各種 CASE Tool 的整合階段，我們整理了幾項問題如下[97]： 
• 在整個軟體工程開發生命週期，無法輕易的結合各種 Tools。(譬如 Requirements 
Tool 與 Design 
Tool 具有不同的架構，也提供不一致的 Methods。) 
• 兩個或多個 Tools 間可能會有錯誤的結合(Misalignment)，也可能提供重複的
功能(Overlap)。 
• 對於將資料由某個 Tool 搬移到另一個 Tool 缺乏 Well-defined 的程序，對於
同步與一致性的 
控制也相當困難。 
• 對於專案進度以及任務(Task)在各 Tool 間的狀態難有顯著的管理。 
• 必頇有新的機制能夠修裁與轉換 Tool 間的差異，以適應不同開發組織的開發
需求 
(Development Needs)。 
• 沒有 Well-proven 的方式確認 Tool 之間的格式轉換是有效的。 
在 MOREE 裡我們提供具有完整語意與語法的 MetaModel 並以 XML 為基礎，來
對各個CASETool的產出物(Work Product)加以描述，也做為各Phase資料交換的依據，
並擴展 XUM 的機制加以串連，除了可以解決上述幾項問題外，更可以達到一致性之
自動化控管目的。 
 
圖 42 PPD 內部概念圖 
59 
 
文件的關聯與結構過於複雜，必需藉由資訊系統來統籌管理。因此基礎資訊架構需含
有文件管理的功能，如文件收集、版本控制、變更管理與文件發送等…而延伸的功能
如需求分析與設計規格的再利用，到工程知識與 Domain know-how 的知識管理，都必
頇基礎於一個文件管理架構，因此基礎資訊架構中必頇包和檔案/文件管理的模組。 
4. 工作流程塑模與執行引擎 
在 Process Performing Domain 中，工作流程代表工具的操作流程，基礎資訊架構
中需能協調與控制這些工具的作業流程，因此透過一個工作流程執行引擎(Workflow 
Engine)達成。而我們透過描述這個流程邏輯的 MetaModel 使開發者能彈性的規劃流程
邏輯，因此在系統中我們將規劃一個流程編輯器來編輯這個流程，而由工作流程執行
引擎(Workflow Engine)來執行之。 
本計劃中 Process Performing Domain 的研究目的，主要是根據本計劃的主要研究
目標，分析與設計出一個資訊系統架構來輔助實現該目標。PPD 之基礎資訊架構提供
了基礎功能與特定功能的 CASE 工具組。基礎功能 CASE 工具組如文件管理、需求管
理工具等提供了通用性之軟體工程輔助；而特定功能的 CASE 工具組如嵌入式系統模
型工具等，以符合不同型態之軟體專案、組織能使用這些軟體流程工具，並遵循特定
組態之軟體方法，來輔助執行特定專案之軟體開發流程。 
 
四、結果與討論 
本計畫所涉及的基礎理論與應用模組相當繁複、系統規模也甚為龐大。諸項之理論研
究開始至於實作結案，概約區分為三階段進程，分三年期進度完成，依序列述其各年期工
作項目如下： 
 
第一年：進行相關文獻之彙閱與理論之研究，並進行系統架構之設計。 
1. 研究、彙集主題基礎，進行統合研討、並制定整體與分項之細部方向，以及相關理論架
構建立。 
甲、研究主軸之建立。 
乙、細部方向之制訂。 
丙、相關理論架構之制訂。 
2. 系統規模度量之研究。 
甲、CMMI 相關資料的蒐集。 
乙、系統規模度量Methodology 之收集、分析與評估。 
丙、系統規模度量Tools 之收集、分析與評估。 
3. 模型導向軟體開發程序(Model Based Software Development Process)之分析與建立。 
甲、模型導向軟體開發程序之細部功能性分析。 
乙、模型導向軟體開發程序之塑模完成。 
4. 各 phase 的Model 之收集、分析與整合。 
甲、Requirement Model 之收集及分析。 
乙、OOD 之收集及分析。 
丙、OOP 之收集及分析。 
丁、Deployment Model 之收集及分析。 
戊、Model-based Testing 之收集及分析。 
61 
 
3. Process Model 系統雛型建置。 
4. 工作產出模型(Artifact Model)系統雛型建置。 
5. 角色模型(Role Model) 系統雛型建置。 
6. 輔助工具模型(Tool Model) 系統雛型建置。 
7. MOREE 統一超模型Sub Models 之整合。 
甲、整合交集五個Sub Models。 
乙、MORE 之塑模完成。 
8. CASE Tool 與Invocation Interface 系統雛型建置。 
甲、CASE Tool 之建置完成。 
乙、CASE Tool 之整合。 
丙、各種Model 之整合。 
丁、Invocation Interface 系統之建置完成。 
戊、串接動作完成。 
 
第三年：以實際案例的建立佐證Model Based Software Development Process。 
第三進程的目標是以一個實際的系統開發專案做為我們的研究驗證案例。以我們實作
的雛形系統做為開發環境，用以驗證我們的方法理論與系統。我們將紀錄專案執行的過程
與系統使用過程，以驗證本系統與理論的效果。我們在驗證的衡量上主要考量以下幾個議
題:流程塑模是否能完整表達流程、方法準則的支援是否有效、開發的效率的提昇度、CMMI 
標準的符合、CASE 工具是否有效幫助開發。具體的工作要點分述如下: 
1. OOR Modeling Definition Tool 雛形系統功能驗證與改善。 
甲、OOR Modeling Definition Tool 功能驗證評量。 
乙、OOR Modeling Definition Tool 系統功能改善。 
2. Relation Modeling Tool 雛形系統功能驗證與改善。 
甲、Relation Modeling Tool 功能驗證評量。 
乙、Relation Modeling Tool 系統功能改善。 
3. Process Performing Domain 雛形系統功能驗證與改善。 
甲、Process Performing Domain 功能驗證評量。 
乙、Process Performing Domain 系統功能改善。 
4. MOREE 雛形系統功能驗證與改善。 
甲、MOREE 功能驗證評量。 
乙、MOREE 系統功能改善。 
5. MOREE Unified Model 雛形系統功能驗證與改善。 
甲、MOREE Unified Model 功能驗證評量。 
乙、MOREE Unified Model 系統功能改善。 
6. 以 MOREE 實驗開發一個系統模組。 
 
成果討論 
我們研究成果中的，模型導向的軟體工程、實現理論方法的系統模型與工具的整合，
是MOREE的具體貢獻。本研究的流程方法知識庫含有通用軟體開發流程的知識與引導方
法，能提供開發組織軟體工程上的知識協助，其具CMMI 精神之流程模型亦可提供尋求流
63 
 
[11] J. Lee, and N.L. Xue, ―FOOM: A Fuzzy Object-Oriented Modeling for Imprecise 
Requirements,‖ Fuzzy Information Processing Society-NAFIPS, pp. 345-349, 1998. 
[12] J. Lee, J.I. Pan, and W.T. Huang, ―Integrating Object-Oriented Requirements Specifications 
with Formal Notations,‖ Proceedings of the Seventh International Conference on Tools with 
Artificial Intelligence, pp. 34-41, 1995. 
[13] J. Lee, Y.Y. Fanjiang, J.Y. Kuo, and Y.Y. Lin, ―Modeling Imprecise Requirements with 
XML,‖ Fuzzy Systems, vol. 2, pp. 861-866, 2002 
[14] M. Palo, ―Requirements Traceability,‖ Seminar Report, Department of Computer Science, 
University of Helsinki, 2003. 
[15] J.E. Kasser, ―Object-Oriented Requirements Engineering and Management,‖ Systems 
Engineering Test and Evaluation (SETE) Conference, pp. 1-15, 2003. 
[16] J.E. Kasser, ―Towards improving the recognition and correction of poor requirements,‖ 
SETE 2005 Brisbane Australia, pp. 1-13, 2005. 
[17] I. Hooks, ―Writing Good Requirements,‖ Proceedings of the 3rd NCOSE International 
Symposium, 1993. 
[18] S. Jacobs, ―Introducing Measurable Quality Requirements: A Case Study.‖ Proceedings of 
the IEEE International Symposium on Requirements Engineering, Limerick, Ireland, 1999. 
[19] R.S. Carson, ―Keeping the Focus During Requirements Analysis,‖ Proceedings of the 11th 
International Symposium of the International Council on Systems Engineering (INCOSE), 
Melbourne, Australia, 2001. 
[20] J. Kasser, E. Schermerhorn, and R. Schermerhorn, ―Determining Metrics for Systems 
Engineering,‖ The 4th Annual International Symposium of the NCOSE, San Jose, CA, 1994. 
[21] X. Zhu, and Z. Jin, ―Detecting of Requirements Inconsistency : An Ontology-Based 
Approach,‖ Computer and Information Technology(CIT), pp. 869-875, Sep. 21-23, 2005. 
[22] V. Harput, H. Kaindl, and S. Kramer, ―Extending Function Point Analysis to 
Object-Oriented Requirements Specifications,‖ IEEE International Software Metrics 
Symposium, pp. 39-48, 2005. 
[23] P.Coad, and E. Yourdon, ―OOA – Object-Oriented Analysis 2nd Edition‖, Prentice Hall, 
Englewood Cliffs, New Jensey, 1990. 
[24] G. Booch, ―The Unified Modeling Language User Guide,‖ Addison Wesley, 1999 
[25] B.H. Sellers, I.M. Graham, and D. Firesmith, ―Manuscript: ROAD966.TEX,‖ Knowledge 
Systems Corporation, Cary, NC, USA Printed: September 28, 1998. 
[26] B.H. Sellers, ―The OPEN Mentor Methodology‖, Printed: September 28, 1998. 
[27] B.H. Sellers, ―OPEN: Object-oriented Process, Environment and Notation. The first full 
lifecycle, third generation OO method,‖ Chapter for Handbook of Object Technology. 
[28] B.H. Sellers, H. Younessi, and I. Graham, ―The OPEN Process (Tasks, Techniques and 
Management),‖ Chapter for Handbook of Object Technology. 
[29] Available http://www.markv.com/OPEN/ 
[30] ―The OPEN alternative,‖ Object Expert, vol. 2, part 1, pp. 14-15, 1996. 
[31] B.H. Sellers, T. Simons, and H. Younessi. ―The OPEN Toolbox of Techniques,‖ 
Addison-Wesley, September, 1998. 
65 
 
[49] I. Sommerville, ―Software Engineering 6th Edition‖, 2000. 
[50] B. Boehm, ―A Spiral Model of Software Development and Enhancement‖, IEEE Computer, 
vol. 21, no. 5, 1988, pp. 61-72. 
[51] R.S. Pressman, ―Software Engineering A Practitioner’s Approach, 4/e‖, 1997. 
[52] J. Martin, ―Rapid Application Development,‖ Prentice-Hall, 1991. 
[53] A. Davis, and P. Sitaram, ―A Concurrent Process Model for Software Development, 
Software Engineering Notes, ACM Press, vol, 91, no.2, April 1994 , pp. 38-51. 
[54] Brooks , F. , The Mythical Man-Month , Addison-Wesley, 1975. 
[55] Lubars, M., C. Potts, and C. Richter (1993), ―Developing Initial OOA Models,‖ In 
Proceedings of the Fifteenth International Conference on Software Engineering (ICSE-15), 
IEEE Computer Society Press, Los Alamitos, CA, pp. 255–264. 
[56] A.M. Salem, M.O. Darter, and B. Ramanujam, ―A Practical Method for Performing Object 
Oriented Requirement Analysis,‖ Proceedings of International Conference on Computer 
Science, Software Engineering, Information Technology, 2005. 
[57] V. Harput, H. Kaindl, and S. Kramer, ―Extending Function Point Analysis of 
Object-Oriented Requirements Specifications,‖ Proceedings of the 11th IEEE International 
Software Metrics Symposium (METRICS'05), IEEE Computer Society, vol 00, 2005 
[58] Albrecht and J. Gaffney. Software Function, Source Lines of Code, and Development Effort 
Prediction: A Software Science Validation. IEEE Transactions on Software Engineering, 
9(6):639–647, 1983. 
[59] International Function Point Users Group. Function Point Counting Practices Manual, 
Release 4.1.1, 2000. 
[60] X. Zhu, and Z. Jin, ―Detecting of requirements inconsistency: an ontology-based approach,‖ 
Proceedings of the 2005 The Fifth International Conference on Computer and Information 
Technology, pp.869- 875, 2005 
[61] ―Cover Pages: Trang Multi-Format Schema Converter Supports DTD to W3C XML 
Schema Conversion‖, Available http://xml.coverpages.org/ni2003-01-23-b.html 
[62] J. Lee and Y.-Y. Fanjiang, ―Modeling imprecise requirements with XML,‖ Information and 
Software Technology , 45(7): 445-460 ,May, 2003 
[63] J. Lee, and N.L. Xue, ―FOOM: a fuzzy object-oriented Modeling for imprecise 
requirements,‖ Proceeding of Fuzzy Information, pp. 345-349, 1998 
[64] J. Lee and J.Y. Kuo. A new approach to requirements trade-off analysis for complex 
systems. (to appear) IEEE Transactions on Knowledge and Data Engineering,1998. 
[65] ―The ISO Survey of ISO 9000 and ISO 14000 Certificates,‖ Tenth cycle: up to and 
including 31 December 2000. 
[66] ISO 9000-3 and EssentialSET for Software Development. 
Available http://www.spc.ca/downloads/products/ISO9000-3.pdf 
[67] ―Cross-reference between ISO 9000-3 and ISO 9001 from Annex A in ISO 9000-3,‖ 
[68] O.K. Harri, ―Flexible CASE and hypertext‖, ACM Computing Surveys (CSUR), December 
1999. 
[69] J. Suzuki, and Y. Yamamoto, "Managing the Software Design Documents with XML", 
67 
 
in Trouble?,‖ Proceeding of Software Metrics (FESMA 98), Antwerp, Belgium, 1998. 
[86] D. Gelperin, ―Precise Use Cases,‖ LiveSpecs Software, 2004. 
[87] Stephane S. Some, ―Supporting use case based requirements engineering,‖ Information and 
Software Technology, Vol. 48, No. 1, Jan. 2006, pp. 43-58. 
[88] Whittle, J., Araujo J., “Scenario Modeling with Aspects,” Proceeding of IEE Software, 
Vol.151, No.4, Aug. 2004 
[89] G..D. Penna, B. Intrigila, A.R. Larurenzi, S. Orefice, “An XML Definition Language to 
Support Scenario-Based Requirements Engineering,” International Journal of Software 
Engineering and Knowledge Engineering,” Vol. 13, No. 3, Apr. 2003, pp.237-256. 
[90] L. Dai, K. Cooper, “Modeling and Analysis of Non-functional Requirements as Aspects 
in a UML Based Architecture Design,” Proceedings of the Sixth International Conference 
on Software Engineering, May 2005, pp.178-183. 
[91] C. Seybold, S. Meier, “Evolution of Requirements Models by Simulation,” Proceedings 
of the 7th International Workshop on Principles of Software Evolution, 2004, pp.43-48. 
[92] N. Maiden, S. Robertsoon, “Developing Use Cases and Scenarios in the Requirements 
Process,”  Proceedings of 27th International Conference on ICSE’05, May 2005, 
pp.15-21. 
[93] C.W. Chu, et. al , “The Integrated COmprehensive Reverse Reuse Engineering Coversion 
Tools (CORRECT) ” , Journal of Engineering Science and Technology Bulletin 
Vol.60 ,2002 pp 66-69 
[94] C.W. Chu, et. al., “UMPAL: An Unstructured Mesh Partitioner and Load Balancer on 
World Wide Web”, Journal of Information Science and Engineering Vol. 7, No. 4, 2001 
[95] C.W. Chu, C.W. Lu, C. H. Chang, and Y.C. Chung, ―Reverse Engineering‖, Vol. 2, 
Handbook of Software Engineering and Knowledge Engineering, World Scientific 
Publishing, USA, 2002 
[96] Y. Li, H. Yang, and C.W. Chu, ―A concept-oriented belief revision approach to domain 
knowledge recovery from source code,‖ Journal of Software Maintenance, Vol. 13, No. 1, 
Jan-Feb, 2001. 
[97] C.W. Chu, C. W. Lu, C. P. Shiu, X. He, ―Pattern-based Software Reengineering: A Case 
Study,‖Journal of Software Maintenance, Vol 12, No. 2 , pp. 121-141, March-April, 2000 
[98] H. Kaindl, ―Is object-oriented requirements engineering of interest? ,‖ Requirement 
Engineering, vol. 10, pp. 81-84, 2005. 
[99] W.J. Lee, S.D. Cha, Y.R. Kwon, ―Integration and Analysis of Use Cases Using Modular 
Petri Netsin Requirements Engineering,‖ IEEE TRANSACTIONS ON SOFTWARE 
ENGINEERING, vol. 24, no. 12, pp. 1115-1130, Dec. 1998. 
 
七、計畫成果自評 
通用軟體開發方法是軟體工程近年來重要的研究領域，參與人員由工程方法的研究中
學習到了目前各種軟體開發方法的優點，即軟體工程中各階段的運作方法。 
而透過雛形系統的實做，研究人員學到了如何以CASE 工具輔助軟體開發，以及從
CASE 工具的實作中了解一個開發專案的執行所需執行的工程活動是如何運作。 
69 
 
C.W. Chu, ―The application of Empirical Model-based Object-oriented Requirement Engineering 
(MORE) and its integration with OOA/OOD/OOP to real software projects‖, Engineering Science & 
Technology Bulletin, NSC, Vol.104. Feb., 2010 pp.28 , 
 
 
 
 
國內研討會論文 
C.J. You, T.Y Chao, P.Y. Lin, C.W. Wu, C.H. Chang, C.W. Chu "XML-based Embedded Software 
Reusable Component Repository", Object-Oriented Technology and Applications (OOTA) and 
Software Engineering (TCSE),July 22-23, 2010 
T.Y. Chao, P.Y. Lin, C.H. Chang, C.W. Chu, C.T. Hsien "以XML為基礎之嵌入式軟體再利用元件庫
", Object-Oriented Technology and Applications (OOTA) and Software Engineering (TCSE),July 
22-23, 2010 
C.H. Chang, Y.W. Chen, J.J. Chen, William C. Chu, C.W. Lu and T.Y. Chao , ―SysML-based Modeling 
Environment for Multicore Embedded System‖, The 20th Workshop on Object-Oriented Technology 
and Applications (OOTA 2009) , Taichung, Taiwan, pp.76-84, November 20, 2009 
C.H. Chang, W.B. Liao, William C. Chu, C.Q. Xu and C.Q. Tong ―XML-based Embedded Software 
Reusable Component Library System‖ The 20th Workshop on Object-Oriented Technology and 
Applications (OOTA 2009) , Taichung, Taiwan, pp.115-121, November 20, 2009 
M.U. Zhuang, N.L. Hsueh, P.H. Chu ,P.A. Hsiung, William C. Chu , S.C Hwang, C.H. Chang, C.H. 
Shih , C.S Ko , ―Using MDA Approach in Design Pattern Specification and Transformation‖ The 20th 
Workshop on Object-Oriented Technology and Applications (OOTA 2009) , Taichung, Taiwan, 
pp.345-353, November 20, 2009 
H.Yu. Tung, C.H. Chang, William C. Chu , ―Using UML to Implement Application on Different 
Embedded System‖, The 20th Workshop on Object-Oriented Technology and Applications (OOTA 
2009), Taichung, Taiwan, pp.1-6, November 20, 2009 
J.Q. Wei, C.H. Chang, Y.L. Huang, William C. Chu, ―再使用程式庫-以自動化倉管系統為例‖, The 
20th Workshop on Object-Oriented Technology and Applications (OOTA 2009), Taichung, Taiwan, 
pp.122-129, November 20, 2009 
C.H. Chang, C.W. Lu, C.W. Chu, Y.W. Chen, R.E. Ger "A SysML-based System Requirement 
Modeling Process" accepted by the 3rd Information Education and Technological Applications 
Conference, Taichung, Taiwan, November 6, 2009  
Y.W. Chen, J.J. Chen, C.H. Chang and C.W. Chu, " Prototyping Software Development with UI 
Modeling Adaption," to appear by the Fifth Taiwan Conference on Software Engineering, Taipei, 
Taiwan, June 19-20, 2009. 
Y.W. Chen, J.J. Chen, C.H. Chang and C.W. Chu, "User Requirement Modeling Process using 
SysML," to appear by the Fifth Taiwan Conference on Software Engineering, Taipei, Taiwan, June 
71 
 
its Support to Software Documents Integration," Proceedings of the 2008 International Conference on 
Software Engineering Research and Practice (SERP'08), Las Vegas, USA, pp.431-436, 14-17 July, 
2008. (EI) 
C.H. Chang, C. W. Lu, C.W. Chu, C.C. Chen, Y. W. Chen, ―Developing a RFID-based Warehouse 
Management System using Open Source Technology‖ proceedings of IETAC 2008, pp. 270-274 
C.W. Chu, ―Retrospect of Taiwan’s Software Industry and issues of Software Maintenance and 
Evolution,‖ The 24th IEEE International Conference on Software Maintenance(ICSM 2008), Beijing, 
China, pp.480-481, Sep. 28 to Oct. 4, 2008 
C.W. Lu, C.H. Chang C.W. Chu, Y.W. Cheng, H.C. Chang ―A Requirement Tool to Support 
Model-based Requirement Engineering,‖ The 32nd Annual IEEE International Computer Software and 
Applications Conference(COMPSAC 2008), Turku, Finland, July 28 - August 1, 2008. pp. 712-717, 28 
(EI) 
C.W. Chu, C.H. Chang, and C.W. Lu, "Model-based Object-oriented Requirement Engineering and its 
Support to Software Documents Integration," Proceedings of the 2008 International Conference on 
Software Engineering Research and Practice (SERP'08), 14-17 July 2008. (EI) 
Chang, C.H., Lu, C.W., and Chu, C.W. "Improving Software Integration from Requirement Process 
with a Model-based Object-oriented Approach," Proceedings of the Second IEEE International 
Conference on Secure System Integration and Reliability Improvement (SSIRI'08), pp. 175-176, 14-17 
July, 2008. 
C.W. Chu, C.H. Chang, C. Lu, ―Model-based Object-oriented Requirement Engineering (MORE) to 
Support Software Maintenance and Integration,‖ proceedings of the APSEC2007 AGTSE Workshop, 3 
Dec., 2007. pp.43-44 
Ho, T.C., Chu, C.W., Shih, C., Hsueh, N. L., and C.H. Chang,"Re-engineering a Legacy EDI system 
into SOA System: A Case Study," the proceedings of the APSEC2007 SOA Workshop, 4 Dec., 2007. 
pp.1-7. 
C.H. Chang, C.W. Lu, and C.W. Chu, "Model-based Object-oriented Requirement Engineering," 
Proceedings of the 1st Information Education and Technological Application Conference, pp. 168-173, 
6 Nov., 2007. 
C.W, Chu, C.H. Chang, C.W. Lu, C.H. Shih, and Cheng, Y.W., "Model-based Object-oriented 
Requirement Engineering(MORE) to support Software Maintenance," the proceedings of 18th 
Workshop on Object-Oriented Technology and Applications, 2007. 
W. T. Tsai, Xinyu Zhou, C. W. Chu, ―Roadmap to a Full Service Broker in Service-Oriented 
Architecture,‖ the proceedings of SOSE 2007, Hong Kung, Oct. 2007 
 
 
來東海參與，體驗台灣文化與了解本校的特色。 
 
三、考察參觀活動(無是項活動者略) 
無 
 
四、建議 
無 
 
五、攜回資料名稱及內容 
The 34th Annual IEEE Computer Software and Applications Conference (COMPSAC 
2010) proceeding 
六、其他 
無 
 
  
三、考察參觀活動(無是項活動者略) 
無 
四、建議 
無 
五、攜回資料名稱及內容 
The 16
th
 Asia-Pacific Software Engineering Conference proceeding 
六、其他 
無 
 
96年度專題研究計畫研究成果彙整表 
計畫主持人：朱正忠 計畫編號：96-2628-E-029-002-MY3 
計畫名稱：以實際模型基礎之物件導向需求工程及與物件分析/設計/程式整合及對軟體發展及維護衝
擊之研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 1 1 100%  
研究報告/技術報告 0 0 0%  
研討會論文 11 10 110% 
篇 
 
論文著作 
專書 0 0 0%   
申請中件數 0 0 0%  專利 已獲得件數 0 0 0% 件  
件數 0 0 0% 件  
技術移轉 
權利金 0 0 0% 千元  
碩士生 8 7 115%  
博士生 0 2 0%  
博士後研究員 0 0 0%  
國內 
參與計畫人力 
（本國籍） 
專任助理 1 0 100% 
人次 
 
期刊論文 12 10 120%  
研究報告/技術報告 0 0 0%  
研討會論文 20 20 100% 
篇 
 
論文著作 
專書 0 0 0% 章/本  
申請中件數 0 0 0%  專利 已獲得件數 0 0 0% 件  
件數 0 0 0% 件  
技術移轉 
權利金 0 0 0% 千元  
碩士生 0 0 0%  
博士生 0 0 0%  
博士後研究員 0 0 0%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 0% 
人次 
 
 
