對之效率不佳，往往成為網路吞吐量之瓶頸，文獻[4]分析了 Snort 在封包比對的每個步驟所
佔的時間百分比，其中的酬載分析的部分主要占了百分之五十一的時間，其效能只能達到網路
流量在 60Mbps 左右，當比對效能開始跟不上網路流量速度時，就會開始進行放棄封包，酬載
比對成為軟體實作之 NIDS 之比對瓶頸，任何惡意的攻擊者就可以利用此缺陷來躲避封包的比
對。然而依據 TWNIC 在 2010 年 4 月網路頻寬調查中[5]，國內有 80 個單位(營利、非營利、資
料交換中心)中有 75 單位的網路頻寬使用已達到或者超過 Gbps 以上，為能夠符合目前及日後
的網路環境。
因此目前，我們將針對網路型入侵偵測系統之封包酬載比對及 botnet 偵測及史丹佛大學
所開發的 openflow switch，透過採用 NetFPGA 在工作網路上建構一個虛擬網路，提供一個高
速且有效的平台去偵測這些攻擊。
3.相關研究探討
3.1NetFPG 基本介紹
NetFPGA 具高度模組化可供使用者加入使用者自訂模組，並且可重用由 NetFPGA 提供和網
路設備相關的子模組，例如網路實體層的電路模組，可為使用者節省開發時間，專注於開發使
用者自訂模組；此外，NetFPGA 是一個基於 Linux 的開放性平台，不僅是提供和電路設計相關
的原始檔並且提供和 OS 相關的核心程式都以開放原始碼的方式提供給使用者做適度的修改，
因此在 NetFPGA 上實作任何高速網路設備優於其他 FPGA。
圖 3-1 NetFPGA 區塊圖
(資料來源:[1])
NetFPGA 主要組成元件如圖 3-1，最主要 FPGA 的部分是採用 Xilinx Vertex2-Pro 50 提供
圖 3-3 NetFPGA 模組溝通
(資料來源:[2])
3.1.2 Generic Register 模組
NetFPGA 內的模組除了上個小節敘述的模組間溝通外，亦可進行模組與軟體間的暫存器存
取，Generic Register 模組做為模組間管線化處理實資料通訊的介面加速暫存器中數值的更
新，此模組將 NetFPGA 中每個模組串起來，在 user_data_path.v 中可發現從 InputArbiter 到
Output Queues 中每個模組皆必須引入此模組做為資料通訊介面，並且提供軟體透過經由 PCI
介面的驅動程式存取 NetFPGA 內任何暫存器，因此 NetFPGA 中每個模組必須引入此模組才能將
與軟體相互配合。
圖 3-4 Generic Register 模組
(資料來源:[17])
3.2 Ethane
Ethane [7]是史丹佛大學開發的一套用來方便管理和注重安全的網路，圖 3-5，
Ethane 提供給管理者權限去管理區域內所有的流量，並且可以針對底下特定的電腦
的封包做轉向或是丟棄的動作。Ethane 目前已佈署在史丹佛大學裡的電腦科學大
Memory)上，它可以是 line-rate 的且可以做防火牆、NAT 和狀態的蒐集。
圖 3-6 openflow switch 架構
一個 Openflow Switch 包含三個主要部份：
（一） Flow Table：針對每一個 flow entry 去定義行為（action），來告知 switch
如何處理每一個 flow。
（二） Secure Channel：連結 switch 和遠端的 controller，可以用來下達命令或
是傳送封包。
（三）OpenFlow Protocol：提供一個標準的方式讓 controller 和 switch 互相
作溝通。
在 Flow Table 之中，每一個 entry 有三個區域：
（一）Packet Header：定義了每一個 flow。
（二）Action：定義如何對每一個 flow 做的動作。
（三）Statistics：對於每一個 flow 去計算有多少 bytes 和 packets
符合，且當中的 time 是計算從最後一次有符合此 flow 的目前的時間差距，
可以幫助移除無用的 flow。
3.3Email 架構
電子郵件是一個在網路上熱門的應用程式。早期的電子郵件提供了兩台主機之間，一台主
機發送電子郵件，和其他接收電子郵件。但在網路普及率在整個非洲大陸乃至全球地區，電子
郵件無法保證交付給對方的時間。因此，有了“郵局”的概念的。
電郵架構主要由兩部分組成。他們被稱為的 MUA（郵件用戶代理）和 MTA（郵件傳輸代理）。
4 研究方法
本章節研究方法將分成三大部分做探討，4.1 節為網路惡意封包偵測及 4.2 節分
析 Spam mail 封包偵測 botnet 及 4.3 使用 Openflow 交換器偵測 Botnet 受害者與通知
機制
4.1 網路惡意封包偵測[17]
本研究以史丹佛大學與 Xilinx 合作開發的 NetFPGA 平台設計網路惡意封包偵測器以達到
快速比對效果，雖然在 FPGA 上設計之 IC 具有快速、平行比對、與快速雛型化之特性，但該平
台所能使用的資源有限，而特徵資料庫需要不斷的更新以達到比對成效，故本研究以決策樹檢
測封包之標頭節省電路資源消耗，再依標頭比對之架構建置多字串比對群組來進行封包酬載之
比對，並且在每個字串群組以布隆過濾器濾掉沒有惡意嫌疑的酬載內容，並以改良式
Karp-Rabin 演算法降低布隆過濾器存有之誤報率且達到多比對之效果，本研究經由實驗證明
此設計的確可以較少的資源利用達到快速且有效之比對結果。
4.1.1 系統架構
圖 4-1 基於 NetFPGA 加入 PAM 模組
(圖片來源:[17])
此系統架構基於 NetFPGA 之硬體架構，由於 NetFPGA BetaPlus 套件中並無提供 openflow
switch 和 router 之 原 始 碼 ， 因 此 本 研 究 主 要 參 考 套 件 中 檔 案 路 徑
/lib/verilog/core/user_data_path/reference_user_data_path/src 提 供 之
圖 4-4 封包處理狀態機
(圖片來源 [17])
在 Header Matching 電路主要延續[3]以決策樹針對封包標頭進行分類並且將酬載依照標
頭分類原則分為不同群組。當標頭比對結果輸出一訊號表示符合哪個規則。Payload Matching
模組依據由 HeaderMatching 模組輸出的序號通知該模組內要使用哪組字串樣式進行比對，而
酬載內容比對以群組為主，每個群組都有一組布隆過濾器(Bloom Filter Unit，BFU)事先過濾
掉不必要比較之酬載內容，而將字串酬載送入字串比對模組時，主要以 FIFO 控制器將要比對
之酬載送到板子上內建之記憶體做為緩衝。
4.1.3 Header Matching 模組設計
此模組主要延續[3]之標頭模組設計，將封包標頭內的協定、來源位址、來源埠、目的位
址和目的埠資訊送入標頭比對電路進行標頭比對，經由比對後，將比對結果放入相對應位元向
量當中，圖4-5中封包標頭經由標頭比對電路產生比對結果，放置比對結果的位元向量長度為
決策樹中葉節點的數目，位元陣列中標示1即代表封包符合該規則標頭。
標頭比對電路的設計是基於決策樹的建置，尋找分割節點的原則是取所有屬性中具有最大
共用及最具價值的屬性，代表該屬性所產生的分群數目最少，即表示在該屬性下的數值，是最
多規則共用的屬性。樹的建立會合併相同的電路比對，減少需要重覆比對的電路，在決策樹內
一個節點即為一個規則屬性的比對，從決策樹的根節點走訪到葉節點的路徑即是一個規則標頭
比對，規則標頭中則包含有五個屬性：協定、來源位址、來源埠、目的位址、目的埠。
(圖片來源 [17])
以圖 4-6 為例，應用於特徵比對，Pattern[1..n]為要尋找之惡意軸載長度為 n，Text[1..m]
則代表為酬載內容長度為 m，而 htext、hpattern 則代表為分別將 Pattern 和 Text 經由雜湊
函數計算出值，其主要作法為依據 Pattern之長度 n，從 1開始搜尋到 n-m+1為止代表，而其
迴圈每次設定 Text[i+1..i+m]並且計算出 htext 以比對是否符合找尋目標。本研究在酬載比
對模組以圖 4-7 作為演算法，同樣以字串長度 n、惡意特徵樣式 m，由左向右比對 n+m-1 次為
主，在每次比對時加入 BFU(Bloom Filter Unit)和 Merged NFA 狀態機，若是 BFU 沒有比對到
惡意特徵，則不會進入 Merged NFA 狀態機進行比對，進行下一次的比對，若有則代表該字串
具有惡意之嫌疑，基於布隆過濾器之具有誤報率之特性，例如，群組內惡意酬載
有”&&*z”、”*port1”、”*port2”、”*pass”，假設封包酬載中出現”*port3”，則有
可能計算出相同於”*port1”、”*port2”之雜湊值造成誤報，但基於本研究之酬載比對方
式，將原始 KarpRabin 雜湊函數的部分以布隆過濾器取代，若布隆過濾器比對到惡意酬載會則
以 MergedNFA 逐一檢查每個字元是否為惡意酬載，此步驟為有效的降低布隆過濾器之誤報率，
第四章節將會有實驗做進一步的討論。
1. Function MergedNFA-KarpRabin (String Text[1..m])
2. for i from 1 to n-m+1
3. if BFU(String Text[1..m])==True
4. if NFA(Pattern[i..i+m-1])
5. Return TRUE
6. htext := hash(Text[i+1..i+m])
7. Else
8. Retruen FALSE
9. End Function
圖 4-7 多比對 KarpRabin 演算法
(圖片來源: [17])
4.1.5 BFU 模組設計
當要比對酬載之內容之前，每個模組建立好之布隆過濾器進行計算雜湊值，每次檢查 4
個字元，32bits，檢查完後酬載向左移 1個 bit。每個群組內皆使用相同長度為 m之位元向量，
其預設值皆為 0，假設群組內有 k個雜湊函數，其計算方式主要參考 0，如圖 4-9，假設為每
個字串有 X i= <x1, x2, x3, …, xi> 位元，每次計算時透過其中一組 Hash 函數如下列式(2)
圖 4-10 布隆過濾器
(資料來源 [17])
4.1.6 Merged NFA 狀態機
在BFU中若被認定有嫌疑之字串則會使用此狀態機進行比對，本研究基於比對效率將Karp
Rabin 演算法以 Merged NFA 狀態機的方式改良為多比對演算法，其主要差異為依據每個群組
內酬載事先建好之 MergedNFA 狀態機，該狀態機主要可將從覆出現的字元合併成同個狀態，例
如，一個群組內有”&&*z”、”*port1”、”*port2”、”*pass”，如果依照 Merged NFA
方式建造狀態機則會如圖 4-11，若以是 NFA 狀態機建造則會如圖 4-12，相較之下 Merged NFA
有效的減少狀態的使用，再隨著惡意特徵擴增的情況下，不會使電路面積越來越大，使訊號不
至於衰減，使比對更有效率。
Merged NFA 狀態機以每個字元作為不同狀態，以轉換狀態的方式來進行字元的比對，每一個
單位時間封包會向前送入一個字元，封包酬載會以字元(8bits)為單位逐一進入有限狀態自動機，
若符合特徵字元，則狀態會進行轉換並儲存目前所在狀態，若字元比對不符合，則重新回到開頭，
再等下一個字元進入再進行比對，反覆以上的動作直到字串比對完畢。
圖 4-11 Merged NFA 狀態機
(資料來源 [17])
圖 4-14 NFA 狀態機
(圖片來源 [17])
4.2 透過分析郵件封包偵測 botnet [16]
研究顯示，超過 80% 的垃圾郵件是由 bot 發出的，這些發送垃圾郵件的。除此之外，這
些發送垃圾郵件的 bot 也會發動其它的攻擊，例如 DoS / DDoS 攻擊以及個人資料的竊取。
所以，上述問題的解決是關鍵且緊急的議題。因為多數發送垃圾郵件的 bot 並不是電子郵件
伺服器，而且它們通常只送信而不收信。在這我們基於這個觀察，提出了一個以垃圾郵件為出
發點的解決方案，來做 botnet 的偵測以及節省網路頻寬，取名為 SpamFinder。SpamFinder 觀
察經過 router 的電子郵件相關網路流量，來辨認只送信而不收信的主機。並對它們做進一步
的檢查，以過濾掉電子郵件伺服器，如此可以準確地辨認出發送垃圾郵件的 bot。最後
SpamFinder 禁止傳播垃圾郵件，藉由阻斷這些發送垃圾郵件 bot 的電子郵件相關網路流量，
來節省網路頻寬的浪費。我們己在 Linux router 上實作出 Spamfinder 而且實驗結果顯示
Spamfinder 沒有誤判且在最差的情況下只有 4％ 的效能開銷。
4.2.1 系統架構
Confirmer 將可疑的 IP 位址確認為是不是一個 SMTP 伺服器的結果傳回給 IPTLT，此時
packet analyzer 會去決定屬於這個 IP 相關的郵件封包的動作，假設這個 IP 是 SMTP 伺服器，
packet analyzer 會接受跟這個 IP 網路流量，反之如果是個 Spam bot，則進行丟棄的動作。
4.1.5 實作
SpamFinder 有兩個部分，packet analyzer 和 Confirmer，packet analyzer 是以
LKM(Loadable Kernel Module)實作在 linux router 上，而 Confirmer 則是在另一台 linux
的主機上，他們都在同一個區域網路中。
圖 4-16 Implement Details
4.2.6.1 Packet analyzer
Linux 核心從 2.4 版之後就開增加了 Netfiter 的架構[11][12]，如圖 4-17，我們藉由將
我們的 packet analyzer 掛勾在 PREROUTING 核心模組內，當 router 收到封包後，封包會經過
packet analyzer，然後先檢查其封包長度及 TCP protocol，如果封包符合我們訂定的規則，
則將 IP 位址利用雜湊函數轉換記錄下來，並給予這個 IP 位址一個初始的 credit Number，之
後只要 packet analyzer 捕捉到郵件封包，都會對其 IP 的 Credit Number 作加或減的動作，
圖 4-18
4.3.3 使用者已解毒之判定
網管人員要如何判斷中毒的電腦已經解毒呢？我們會判定此電腦中毒的依據是
紀錄常常去和 C&C 的可疑名單連線的電腦，透過分析來判斷哪一台電腦中毒，所以
用來判斷電腦是否已經解毒也是透過中毒電腦的中毒期間是否還有跟可疑名單上的
目的地來往來做判斷。所以不論是使用者上網更新防毒軟體來安裝或是自行設定防
火牆，將可疑的連線封鎖，都視為已解決中毒現象。所以本文也規劃出一具調整性
的判斷中毒的電腦是否已解毒的策略，供網管人員做調整。
4.3.4 系統設計
在這一節我們會詳細的描述設計的理念，並且說明實驗的架構目的，並假設使用
者皆會使用之 www 服務
4.3.5 使用 honeypot 誘捕系統蒐集到可疑位址之假設
借助 honeypot 誘捕系統，可以確認中毒者企圖對外所連的 C&Cserver 的名稱
與位址，也就是能蒐集到 C&C server 的黑名單名稱與可疑的位址。所以，本研究可
以將得到的可疑位址存進 nox controller，利用這些可疑的位址，將疑似中毒的電
腦透過 openflow 網路過濾出來，並且進一步分析是否已成為 bot。
由 Controller 來控制兩台 openflow switch，如圖 4-19 所示，虛線為
Controller 用來控制 openflow switch 的 secure channel，點線為側錄主機回傳
給 Controller 側錄到的資料供 Controller 作進一步分析，再定義出每一個 flow
的 action。實線為封包的傳遞路徑，若使用者正常使用網路且未中毒的情況的話，
封包傳遞的路徑會是使用者－openflow switch 1－openflow switch2－再送至外部
網路；若使用者被判定為已成為 botnet 中的一員的話，則當使用者有封包出來的時
候 openflow switch1 會先判斷是否會 port 80 的封包，如果是，則導至 Web server，
告知使用者中毒資訊，並在中毒時期，若網管人員決定開放已中毒的電腦對外連線
的話，則所有的封包皆會由 openflow switch1 連致側錄主機。
圖 4-20 系統流程
依照圖 4-19，分別架設了以下伺服器，並列出每台電腦上安裝軟體的版本。
表 4-1 電腦上安裝軟體的版本
控制伺服器
(Controller
Openflow-Switch1
(NetFPGA)
Openflow-Switch2(N
etFPGA)：
側錄伺服
器
OS Debian5.0.4
(140.115.10.111
)
CentOS 5.2
（140.115.10.112
)
CentOS 5.2
（140.115.10.113)
(CentOS)
核心版
本
Kernel:2.6.26-2
-686
Kernel
2.6.18-194.3.1.e
l5
Kernel
2.6.18-194.3.1.el5
使用版
本
NOX
0.8.0~full~beta
Openflow version
0.8.9-rev4
Openflow version
0.8.9-rev4
Netfpg
a 版本
netfpga-base-2.0
.0-beta.i386
netfpga-base-2.0.0
-beta.i386
4.3.7 系統架設
安裝好 NOX Controller 後，啟動 Controller 並等待 openflow switch 連線，
檢查 NOX Controller，是否所有的 openflow switch 連接上 Controller，如圖 4-21：
圖 4-21：察看是否正確連上 Controller
圖中表示，140.115.10.112 與 140.115.10.113 的 openflow switch，皆連接上
140.115.10.111 的 controller。
架設完成後，同個 subnet 下的電腦可以互 ping，可以透過 NOX(controller)
將 openflow_switch 之間傳遞的封包資訊擷取出來，如圖 4-22：
圖 4-24：印出封包來源、目的
我們要做的不只是可以印出來，而是要可以存成 log 檔，修改程式使
它能 output 至文件檔存起來。只要在 openflow 底下的電腦，有意圖與不正常的 ip
做連線的話，皆會被記錄下來，這裡我們以 140.115.10.115 來視為惡意的 ip。
圖 4-25：過濾 bot 之 log 檔
4.3.10 將特定來源封包轉向
要使得中毒的封包轉向我們利用 openflow switch 上提供的 datapath
control 介面來新增、修改或刪除一個 flow。我們要使得 140.115.10.114 的所
有封包皆導向至 140.115.10.115，所以設定的指令如下：
圖 4-26 封包轉向之設定
使得只要是來自這個網卡的封包，一律由 netfpga 的 port2 出去，而 port2 底下連
接的是一台特殊的 router，可以幫忙紀錄封包
4.3.11 通知使用者中毒資訊
可以利用 4.3.10 小節的轉向功能之後，我們要讓使用者在上網的時候被
導到中毒通知的網頁。
在通知頁面的主機同時是 NAT 和 web server，由 eth0 網卡去接收來自中毒機器的
封包，eth1 為連結外部網路的介面。
4.3.12 阻擋特定來源封包
對。
圖 5-1 以布隆過濾器做為酬載比對方式
(資料來源 本研究整理)
圖 5-2 以布隆過濾器與原始 KarpRabin 演算法做為酬載比對方式
(資料來源 本研究整理)
比對方式三 : BFMKR，以布隆過濾器搭配 Merged NFA based Karp Rabin，如圖 5-3，為
本研究酬載比對方式，先以布隆過濾器做為前過濾字串，若有符合再進行 Merged NFA based
Karp Rabin 演算法進行比對。
比對方式四 : KR，以原始 Karp Rabin 做為酬載比對方式，如圖 5-4，其比對相較於本研
究比對方式差異在於此比對方式並沒有使用布隆過濾器做為前過濾，也並非使用任何狀態機一
次比對多個特徵，而是以雜湊函數方式以字串的左到右以固定視窗大小(window size)進行比
對。
圖 5-5 send_pkts.c 執行畫面
(資料來源 本研究整理)
本研究主要依據 Snort2.6 版中所定義的規則加入發送的封包內做為實驗中量測偵測率與
誤報率的方法，在產生封包時在最後一個 word 的最後兩個 bit 標記上惡意封包為 01，非惡意
封包為 00，用於和 PEM 模組比對結果最一個比較，若相同則為正確偵測，若相異則為誤報並
且寫到暫存器內，而此工具主要依據式(4)(5)計算偵測率與誤報率。
誤報率 = (4)
偵測率 = (5)
 throughtput.c :在量測網路吞吐量的工具主修改 NetFPGA 套件，如圖 5-6，檔案路徑
/projects/ddr2_blk_rdwr_test/sw 中的工具，修改為本實驗用的量測工具，量測方式主要觀
察時間內輸出連接埠的暫存器中送出的封包數，計算方式如下式(6)，封包寬度為 64 bits，
網路吞吐量 = (6)
圖 5-7 實驗一 最佳情況實驗結果
(資料來源 本研究整理)
圖 5-8 實驗一 平均情況實驗結果
(資料來源 本研究整理)
圖 5-9 實驗一 最差情況實驗結果
群組內規則數量 130 增長到 530 時，誤報率也從 0.62 上升至 0.76，在 64bits 也有相同之情
況，雖然在 128bits 誤報率相對較低，但依然高於本研究(BFMKR)之方法，由此實驗可得知無
論在位元向量大或小的情況下，本研究之方法誤報率介於 0.06~0.1 之間，有效降低單以布隆
過濾器做為酬載比對之誤報率。
5.1.5 實驗三 本研究之偵測率與誤報率
本實驗主要用於比較本研究比對方式 BFMKR 與其他三種比對方法之偵測率，分別是 BF、
BFKR 與 KR，評估以單以布隆過濾器與結合改良式 KarpRabin 後相較於其他比對方式是否有較
好之偵測率。主要設定布隆過濾器之位元向量長度為 128bits、雜湊函數 3 個的情況下，以
send_pkts.c 從 nf2c0 發送 30 萬個封包到 nf2c1 接收，產生 30 萬個隨機從 12600 個 Snort 規
則中加入規則的封包並且在封包最後一個 word 的最後 2bit 標記為惡意封包，在經過
EventHandler 模組時檢查此兩個 bits 若和比對結果相同，則為正確偵測到惡意封包，若為不
同則為誤報。
本實驗結果如圖5-11與表 5-2為各比對方式之偵測率，本研究提出之酬載比對方式BFMKR
相較於其他比對方式有較佳之偵測率，當 PAM 模組內定義的 Snort 規則數越多時 BFMKR 在不同
的規則數 2600~12600 下皆有至少 90%以上良好之偵測率，而 BF 隨著規則增多雖然提高偵測率
但只介於 60%~70%之間，BFKR 有 80%~90%之偵測率，由於該比對方式經由布隆過濾器比對後的
酬載若為誤報還有 KarpRabin 演算法再做一次檢查，但原始 KarpRabin 演算法以雜湊函數的方
式比對時有機會產生雜湊值碰撞，因此偵測率仍然較差於本研究以 Merged NFA 狀態機逐一檢
查每個字元因此有效降低布隆過濾器的誤報機會。
圖 5-11 實驗三偵測率結果
(資料來源 本研究整理)
4600 5.34% 2.50% 3.60% 0.34%
6600 5.32% 2.70% 3.80% 0.32%
8600 5.29% 3.00% 4.10% 0.29%
10600 5.24% 3.24% 4.34% 0.24%
12600 5.60% 3.90% 5.00% 0.30%
(資料來源 [17])
5.1.6 實驗結論
綜合以上實驗在本研究提出之 BFMKR 比對方式雖然在比對速度上低於 BF 許多，但在偵測
率與誤報率的表現上都較 BF 與其他比對方式優良，BF 和 KR 雖然都以雜湊函數做為比對基礎，
相較於 BF 有較低之誤報率與較高之偵測率，而將上述兩者結合之 BFKR 雖然在比對速度上加快
了，但基於 KR 本身也存在誤報率的缺陷，因此在偵測率與誤報率仍然較本研究 BFMKR 遜色許
多。而在實驗二中 BFMKR 以 Merged NFA 狀態機的方式建構惡意特徵做為前過濾後的檢查機制，
在惡意特徵增加快速的情況下仍然不會對誤報率造成影響。
5.2 分析 Spam mail 封包偵測 botnet 結果與討論[16]
為了驗證 4.2 節中的 SpamFinder，我們分兩階段的實驗去證明其效能及有效性。
5.2.1 效能測試
在這實驗中，我們使用了三台電腦，包括終端使用著者(e-mail client)
router(SpamFinder)，SMTP 伺服器，測試情境是由終端使用者發送電子郵件會使用 SMTP 伺服
器，但中間一定會經過 SpamFinder，如下圖。整個環境架設好之後，我們分三種不同的情況
去測試，每此發送 10000 封郵件封包，並分成四種不同的封包大小，分別是 3.3KB、33KB、330KB、
3300KB，而根據賽門鐵克的分析[14]，平均垃圾郵件在沒有附件情況下大約是 3.3KB。
圖 5-13 實驗環境
而這些 Traffic logs 是在 2010/06/13 所儲存的，總共大小為 2TB，
根據我們的分析結果，SpamFinder 捕捉到的郵件封包的發送和接收的資料量大小為
26800Kb 及 76939KB，所以發送和接收封包的比例大約是 1:3，這個分析結果影響我們在 credit
number 的計算，也就是當我們收到是一個發送的郵件封包，我們會對 credit number 加 1，反
之，如果收到是一個接收的郵件封包，我們會對 credit number 減 3。
根據實驗的結果，當我們把 credit number 的 threshold 設定為 150，可節省 25%的 e-mail
流量且有較低的封包丟棄比率(平均封包丟棄比例為 0.31)。結果在下圖
圖 5-17 Effective Evaluation Result
透過分析交通大學一天的流量，SpamFinder 偵測到 3含有 Spam bot 行為的電腦，如圖 5-18
圖 5-18 Detected IP (1)
5.3 使用 NOX 控制 Openflow swith 交換器偵測 Botnet 效能分析[18]
為了測試建設好的 openflow_switch 網路，能否在流量很大的情況下，依舊可以把特定的
來源端或目的端抓出來，我們利用 smartbit 來做測試。首先，利用 smartbit 測試
openflowswitch 的 throughput test 可以達到多少，連接的架構如下圖：
圖 5. 25：smartbit 連接 openflow switch 和 bot 實驗架構
利用 smartbit 在灌封包的同時，將 bot 嘗試連向 C&C 的位址，當 Controller 判斷出此
目的地 IP 為不法 IP 時，則將封包 drop 掉，並計算此來源電腦嘗試連向黑名單的次數。
首先，測量此架構下，smartbit 的 throughtput 可以達到 100%，在 Controller
端設定 C&C 的位址為禁止通過名單。接著在灌封包的同時，bot 設定 1.5 秒發送
一次目的地為 C&C 的封包如圖 5.25，看 Controller 是否可以成功的攔截此封包。
下圖為 nox 攔截特定封包之程式。
圖 5. 26：nox 攔截特定封包之部份程式
在 smartbit 上，我們同樣測試 frame size 從 64 到 1518，並每種 frame 都持續
灌封包 10 秒，在這 10 秒內，一個 bot 同時發送給 C&C 封包，觀看結果看每種
frame 是否能夠成功攔截到封包。
下圖為 Controller 紀錄到的封包數量，與一開始設定要 bot 發送的封包數量一致。
圖 5. 28：controller 抓到的特定封包數
紀錄到的數量和 bot 所發送的一致，所以證實 Controller 可以有效的攔截特
定封包。利用 smartbit 灌封包的十秒中，下圖為每種 frame size 的流量圖。
情況下，測試其效能的上限，透過實驗證實了我們可以透過 NOX Controller 和 openflow
switch 來有效控制網路，即使在大量頻寬的傳輸下。
在下一期的計畫中，將與其他子計畫進行整合，子計畫五和子計畫一、二有密切關係，因
為我們將提供一些記錄攻擊封包所必要的功能需求給該兩個計畫，讓其實現在 NetFPGA 上。
工作項目三和子計畫一、二與三都有密切關係，因為在該工作項目中，我們對有嫌疑的封包進
行關聯與融合，這需要子計畫一與子計畫二提供高速的 NetFPGA 平台，另外，這也牽涉到多
個 NetFPGA 平台間的合作，這些合作所產生的流量如何迅速傳遞與交換將需要子計畫三在網
管與 traffic engineering 方面的協助。
7.參考文獻
[1] NetFPGA, http://www.netfpga.org/.
[2] Covington, G. A., Gibb, G., Naous, J., Lookwood, J. W. and McKeown, N., “Encouraging 
Reusable Network Hardware Design,” http://netfpga.org/ , 2009.
[3] 魏雅笛， 「利用決策樹改善以 FPGA 為基礎之入侵偵測系統資源利用」， 國立中央大學
資訊管理研究所碩士論文，2009。
[4] Yusuf, S., Luk W., Szeto, M. K. N., and Osborne, W. “UNITE: Uniform hardware-based
Network Intrusion deTection Engine,” Applied Reconfigurable Computing (ARC), March, 
2006.
[5] TWNIC-台灣網路資訊中心網路使用調查, http://map.twnic.net.tw/,2010.
[6] Nick McKeown, et. al., “Openflow : Enabling Innovation in Campus
Networks”, Openflow White Paper March 14, 2008
[7] Nick McKeown, et. al. , “Prototyping Fast, Simple, Secure Switches for
Ethane”, 15th IEEE Symposium on High-Performance Interconnects 2007,
pp.73–82
[8] Wikipedia. (Upgrading). Simple Mail Transfer Protocol [Online]. Available:
http://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol
[9] Wikipedia. (Upgrading). Post Office Protocol [Online]. Available:
http://en.wikipedia.org/wiki/Post_Office_Protocol
[10] Wikipedia. (Upgrading). Internet Message Access Protocol [Online]. Available:
http://en.wikipedia.org/wiki/Internet_Message_Access_Protocol
[11] netfilter, http://www.netfilter.org/
[12] iptables, http://www.netfilter.org/projects/iptables/index.html
國科會補助計畫衍生研發成果推廣資料表
日期:2011/03/08
國科會補助計畫
計畫名稱: 子計畫五：網路虛擬化架構之整合性安全測試研究(1/2)
計畫主持人: 曾黎明
計畫編號: 98-2219-E-008-001- 學門領域: 通訊軟體及平台(網通國家型)
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
