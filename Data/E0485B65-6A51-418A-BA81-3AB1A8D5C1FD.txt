 II
二、Abstract 
The concept of pervasive computing is to hide computer and to provide the users 
services that they need without human interaction. This brings us a new vision of 
computing, Clients can use recourses in environment through any device and any 
network. Through, we need to integrated mobile computing, distributed computing, 
and context-awareness to build a pervasive computing environment. 
We purpose a SIP-based pervasive computing environment, named FULL 
(Fantastic Ubiquitous Living Land), which divide the pervasive computing 
environment into four layers: network layer, service layer, invocation layer, and 
application layer. We integrate mobile computing and distributed computing to 
provide application a complete executing platform. Applications use resources in 
environment to complete their task. The recourses represent not only software objects 
but also real world objects. Thus, we need numerous sensing devices to interact 
between clients and the real world. How to manage and use objects in such 
rapid-changed environment becomes the new challenge.  
We also propose an application framework to solve this challenge based on the 
pervasive computing environment, FULL. According to the proposed framework, we 
reference the activities in campus and implement an application, called “Smart 
Campus”.  
 
Keyword: pervasive/ubiquitous computing, SIP, context-awareness, application 
framework 
 IV
5.2 系統實作 ..............................................................................................21 
6. 結果與討論.....................................................................................................23 
五、參考文獻 .............................................................................................................25 
附錄..............................................................................................................................27 
 
 
 2
3. 文獻探討 
3.1 普及運算 
在普及運算中，運算將不再只是在一台電腦上執行軟體，而是藉由周遭電
腦所提供的資源來完成運算。G. Banavar[5]說明了普及運算環境就是個充滿資
源的環境，因此在普及運算環境中，可移動性以及資源的管理衍生出許多很重
要的議題。 
(1.)可擴充性 
隨著普及運算技術的成熟，環境內使用者人數、應用程式、服務、裝置以
及他們之間的互動也將呈倍數成長，因此普及運算環境的設計上必須提供一機
制，讓新使用者、裝置、服務、應用程式的加入，不會影響整個環境的運作。 
(2.)異質環境的整合 
如同前面所說，環境內的裝置很多也很多樣，這些裝置各有其可支援的協
定，這些構成了環境的異質性，我們將其分成兩部份來看，一是網路另一則是
分散式環境。 
在 網 路 方 面 ， 現 在 的 有 線 無 線 網 路 標 準 很 多 ， 例 如 WiFi, 藍
芽,Zigbee,3G,WiMax 等等，基於頻寬、傳輸距離等等因素，這些網路各有各的
應用領域，因此普及運算環境必須整合這些異質網路，提供不同網路下的裝置
互通的機制。 
分散式環境部分，物件並非直接存在於網路上，需透過協定的包裝才能分
享讓網路上其他端點使用。參考其運作模式後，可以依目的將這些協定分為兩
種：如何讓其他端點知道物件的存在以及如何執行該物件。現有通用的協定很
多，為了適用於各種不同的環境，未來可預期地還會開發更多通用的協定，因
此如何讓各種不同協定包裝下的物件，都能讓環境內的端點使用，就成為很重
要的議題。 
(3.)資源管理 
由於環境內的裝置可任意漫遊，造成了環境的多變，資源(可能是軟體的物
件也可以是硬體的設施)隨著裝置的移動而從一個環境變更到另一個環境，因此
原先環境中想使用以及正在使用此資源的使用者，很可能就無法使用此資源。
因此普及運算環境必須提供一完善的資源管理方法，讓資源的移動不會影響到
使用者使用資源。 
(4.)移動性支援 
移動性(Mobility)可分為四類：Terminal、Session、Personal 以及 Service 移
動性。Terminal Mobility 即 Terminal 在網路上移動時，仍可與 correspondent host 
(CH)繼續通訊，不因移動而中斷。為了達到此目的，主要的問題在於當 MH 發
生漫遊時，要如何追蹤 Mobile Host(MH)目前位在何處，如果 MH 在通訊間發
生漫遊，必須再重新建立連線。Session Mobility 允許使用者即使換了通訊設
備，仍然可以保留相同的媒體通訊。Personal Mobility 允許一個使用者藉由同
樣的邏輯位址，對應到數個不同的終端設備(1-to-n)，或是利用數個不同的邏輯
 4
Active Space[19]與 Aura 有很多相同的設計理念，如圖 2 架構圖，Active 
Space 的中介軟體 Gaia 提供了五個最基本的服務； 
(1.) Event manager:負責管理環境中產生的變動，例如使用者進入 Active space、
應用程式移動到另一位址等等，Event manager 會將此變動透
過 event channel 通知需要此資訊的端點。 
(2.) Context service:應用程式需要利用 context 資訊才能根據使用者的行為做適
當的回應。這些 context 包含可直接取得的資訊(例如位址感
測器感應到的使用者位址、天氣狀況、房間使用狀態等等)，
以及一些較高階經過判斷後所得到的資訊(例如經由哪些人
在房間以及使用哪些設備來判斷此房間的使用狀態是在開
會、簡報或是看電影)，context service即提供應用程式 context
資訊。 
(3.) Presence service:負責偵測環境內 entity 的去留，Gaia 將所有 entity 分為四
類；應用程式、服務、裝置、人。Gaia 會持續不斷地發送
確認訊息，若未收到回應則判定該 entity 已離開系統 
(4.) Space repository:負責儲存 Active Space 內所有 entity 的屬性資訊，以供應用
程式查詢。 
(5.) Context File System:個人資訊的儲存空間，可提供應用程式關於使用者的資
訊，而不需詢問使用者，另外，也可作為應用程式執行
時的暫存空間，當使用者移動中，執行資料可暫存於此
而不致中斷。 
Active Space和Aura最大的不同點在於Gaia可以允許使用者動態定義應用
程式，使用者可以根據 context 而改變應用程式的動作。 
3.2 情境感知 
在異質環境中，context 的產生會是複雜且分散的，Ricardo Couto A. da 
Rocha , Markus Endler[8]提出了六個策略來管理且利用這些 context。這六個策
略詳述如下: 
(1.)Communication:制定 context 該如何散佈至各個 context-aware Application 或 
context-aware application 如何收集所需要之 contexts. 
(2.) Distribution :在整個網路中，如何去利用這些散佈各處的 contexts. 
(3.) Updating :當 context 改變時，如何對 context 作更新並針對有使用此 context
的 applications 進行通知。 
(4.) Context Service Placement : 制定 contexts 該以何種方式存放以提供存取，可
分為中央管理以及分散式存放兩種。 
(5.) Context Evaluation : Context-aware application 在得到 context 之後，如何分
析組成此 context 的各種屬性。 
(6.) Context Querying:如果 middleware 有提供 context querying 的功能，則
 6
(1) 呼叫端透過REGISTER的訊息跟SIP Registrar作註冊動作。 
(2) 將註冊資訊存到Location Server。 
(3)(4) 回應註冊成功訊息回去給UA。 
3.3.1.2 SIP Session 建立 
SIP環境設計者可以考量 Server 的負擔來選用Proxy Mode或Redirect 
Mode來幫助使用者建立 Sessions，這一節將會分別以 Proxy Server & 
Redirect Server 來描述如何建立 Session。 
 
圖 4、Proxy Server Mode 
圖 4中表示了 SIP 如何建立一個Session的過程，首先，呼叫者送出一
個INVITE的訊息（本例中是要呼叫andy@example.com），Proxy Server收到
這個SIP Message後，便向Location Server進行查詢，得知目前被呼叫者的實
際位址是在andy@195.37.78.173上，於是Proxy Server便代為以
andy@195.37.78.173為對象發出INVITE訊息，被呼叫者收到訊息後便回應
給Proxy Server一個SIP 200 OK的response訊息，Proxy Server再將該送回
200OK的response訊息，並在該訊息中告知呼叫者，目前被呼叫者的實際位
址是andy@195.37.78.173，於是，此時呼叫者便可以直接和被呼叫者進行通
訊了。 當然，Proxy Server之所以能夠得到被呼叫者目前的實際位址主要是
當被呼叫者移動時，必須有一套註冊的機制來完成讓Location Server保有被
呼叫者目前最新的位址資訊。 
在圖 5中，表示使用 Redirect Server 來幫助使用者建立 Session，當呼
叫者要與被呼叫者建立一個Session，一樣的，先送出一個INVITE的Request 
Message，和Proxy Server的差別在於，當Redirect Server向Location Server查
詢到目前被呼叫者的實際位址時，並不是像Proxy Server直接代為處理後續
的Session建立事宜，而是將被呼叫者的必要資訊告知呼叫者，由呼叫者自
 8
Message 中所包含的資訊。  
SDP用於描述多媒體會議的內容，以便實現會議宣告、邀請和其他形式
多媒體會議的啟動，傳達要建立一個多媒體會議前所需要的相關資訊，讓
雙方了解多媒體會議的型態，雙方再依照所描述的型態來進行多媒體會議
的資訊傳送，它能讓不同的傳輸協定所使用，如包括會話宣佈協定SAP、會
話啟動協定SIP、即時流協定RTSP、使用MIME擴展的電子郵件SMTP和超
文本傳輸協定HTTP。 
根據 SDP 的要求，我們可將 Session 描述分為以下兩種：會話級描述
和媒體級描述。會話級描述適用於整個會話和所有媒體流的細節資訊，媒
體級描述適用於單個媒體流的細節資訊。媒體描述使得接收方能夠使用所
有正確的標記和設置，從會話目錄直接啟動正確的媒體工具來加入該 
Session。  
一個 SDP 的訊息是由一個會話級描述部分及其後面的零個或多個媒體
級描述部分組成。當某種媒體被選擇時，應該同時選擇對應的媒體格式以
及IP 位址、傳輸協定和 Port，並且將它們傳送給相對應的媒體應用工具。
建立一個 Session 時，Session 應該具有一個名字、一段簡短的描述、範圍、
啟動時間和停止時間。例如，Caller 呼叫Callee，邀請其接受加入Session時，
為了提供足夠的資訊給 calee，我們便必須在INVITE 訊息中加入相關資訊
的描述。而這些描述包括了在Session中將接收的媒體型態與格式、是採用 
TCP 或 UDP 等相關資訊。  
歸納起來，我們可以利用SDP來攜帶以下資訊：  
(1)  Session的名稱及目的  
(2)  在這個Session所使用的頻寬資訊  
(3)  多媒體的型態  
(4)  傳輸協定，如使用RTP、UDP等  
(5)  多媒體格式，如H.261或MPEG  
SDP定義在RFC 2327當中，後來經過修訂及匯集draft之後，發表了RFC 
3264 “An Offer/Answer Model with SDP＂，RFC 3264明確的描述應該如何
將SIP與SDP一起使用。SDP簡單地提供一個描述session資訊的格式。基本
而言，一個session是由數個media stream所組成，因此，要描述一個session
必須要有數個相關的參數。SDP當中有session-level與media-level的參數如圖 
7， 
(1) Session-level的參數包含了 
a. session的名稱、 
b. session的發起者、 
c. session的期限等等。 
(2) Media-level的資訊包含了 
a. media的種類， 
 10
MH(Mobile Host)：行動電腦。 
CH(Correspondent Host)：與 MH 通訊的節點，可為一 MH 是有線網路上
的固定節點。 
HA(Home Agent)：對一 MH 來說，原始對應的 BS 叫 HA，即 HBS。 
FA(Foreign Agent)：對一 MH 來說，除了 HA 以外，所經過的其他 BS 都
算是此 MH 的 FA。 
MH 原先所在的網路稱之為 Home Network，在 Home Network 上有一個
Home Agent 即 HA 用來處理有關 MH 的所有相關運作，包括位置資訊的紀錄
及資料封包的轉送。當 MH 離開原先的網路區域，漫遊到另一個網路區域
Foreign Network 時，關於 MH 所有運作的處理，將交由 Foreign Network 的
Foreign Agent (FA)來處理。 
 
 
圖 9、資料傳送圖 
圖 9 說明了 MIP 如何傳送資料。當已和 MH 建立通訊連結的 CH 即圖中
的 FH，欲送資料給移動中的 MH 時，首先要將資料送至 MH 的 Home Network
的 HA，然後由 HA 利用 tunnel 的技術，將資料封包重新處理後再轉送至目
前 MH 所在的 Foreign Network，交由 FA 處理後，再轉送至 MH 處。而這樣
的傳輸方式便稱為三角繞徑傳輸 (Triangle Routing)。雖然 Mobile IP 解決了行
動主機漫遊的問題，但是卻造成了 Triangle Routing 這種沒效率的三角傳輸方
式。而為了增進效能，在 Routing Optimal in Mobile IP[17]以及 IPv6[18][19]
等後續研究中，有提出如何解決在原本 Mobile IP 機制中的 Triangle Routing
問題。但是，這些方法卻帶來了在通透性（Transparency）上的新問題，例如，
通訊軟體必須要被更改。MIP 的優點包括：對更上層的協定具有通透性
(Transparency)，另外 correspondent host (CH)不需做任何的修改。 
e 
 12
 
圖 10、FULL 架構 
FULL 整體架構如圖 10 所示，以下將細說各層結構 
4.1.3 基層網路 
基層網路須解決位址移動以及更換連結網路所產生的問題。我們採用 SIP
來開發基層網路，RFC SIP 系列協定可解決位址移動問題，我們提出一階層
式位址管理機制讓 hand-off 更迅速；而 SIP 應用層協定的特性也便於整合異
質網路，同時透過 SDP(Session Description Protocol)可知道該連線的傳輸內
容，便於情境感知應用程式的開發。 
一般使用 SIP 的系統都利用 SIP 分支的功能來管理使用者的位址，由使用
者預先設定數個可能會出現的位址[10],或是紀錄使用者曾經使用過的位址
[11],當有人要找這個使用者時，SIP proxy server 會將此 invite 訊息分送給這些
已紀錄的位址。但是這兩種方式都無法保證一定能找到使用者，而且也只適
用於區域性使用環境，無法適用於大範圍的使用環境下。 
因此我們讓系統內每個使用者擁有一專屬的 SIP URI，使用者可以用此
URI 在任何裝置上登入系統並在環境內移動，移動後的更新資訊將紀錄在
Location Server 上。為了加速移動的速度，我們建立了一階層式的架構，以
一 SIP Server 管理數個 SIP Proxy，藉此減少區域性移動的等待時間以及 SIP 
Server 的負荷。同時，我們也設計了 3G Gateway 來整合 3G 網路，讓使用者
也可以透過 3G 網路連結到系統。詳細的架構以及流程說明如下。 
 14
在普及運算中，服務即代表著提供資訊的基本元件，而服務將會隨著裝置
的移動而失去效用，因此如何管理服務，讓服務在移動後仍能被使用者察覺
而繼續提供資訊，就成為很重要的議題。現今已有多種協定被採用而開發服
務，例如 UDDI[6], Jini[7]…等等，有些協定有支援移動管理(如 Jini)，有些僅
針對固定網路設計(如 UDDI)，為達到真正的 pervasive,整合現有服務並提供
移動管理也是很重要的議題。因此我們設計 FSM(FULL Service Manager)來管
理服務,利用 SIP 訊息中紀錄 meta data 的欄位，當裝置移動後向 SIP Registrar
作位址註冊時，將服務資訊夾帶在註冊訊息中，由 SIP Registrar 將此資訊轉
傳到 FSM 作服務註冊，FSM 將記錄下服務描述、服務察覺協定、呼叫協定、
呼叫資訊等，client 向 FSM 查詢即可察覺此服務。如此一來可在作位址更新
註冊時，一併將服務資訊註冊到 FSM 中，不需另外再對 FSM 傳送註冊服務
訊息。 
 
圖 12、FSM 內部元件 
圖 12 是 FSM 內部元件示意圖，SIP Registrar 將服務資訊傳送到 FSM 後，
即由 Service Registry 接收此訊息，因為服務資訊是夾帶在 SIP 位址更新註冊
訊息內，為避免此訊息過於龐大造成網路負擔以及影響效能，夾帶的服務資
訊並不是完整的服務描述檔，而是該服務原始註冊的 Registrar 位址以及辨識
碼(例如 service id)，隨後 Multiple Discovery Manager(MDM)將會判斷此服務
是否已存在資料庫中，若不存在則 MDM 根據服務協定呼叫對應的 Service 
agent，到該服務原始註冊的 Registrar 取回完整的服務描述檔，存到資料庫中
並紀錄該使用者 SIP URI 可提供此服務；若該服務已存在資料庫中，則僅紀
錄此使用者 SIP URI 可提供此服務。 
也就是說，服務存在於裝置上，當使用者透過此裝置在環境中登入或移動
時，都將產生 SIP Register 訊息，也就會將該裝置所提供的簡短服務資訊註冊
到 FSM，FSM 將會取回完整服務描述並加以管理，讓此服務可提供給其他使
用者使用。 
4.1.5 呼叫層 
 16
根據當時的人、事、物以及地點來提供所需要之服務，藉此創造出具有 Context 
Awareness 特性的應用。 
(2.)主動式個人化服務 
在 Smart Campus 環境中，我們也提供了個人化的服務。使用者可以查詢
並得知環境內所有的服務並選擇需要的服務且訂閱。爾後，當使用者觸發定
Event 時，系統便根據使用者的訂閱紀錄，來得知使用者是否有訂閱此服務，
進而判斷是否該提供服務給使用者。 
(3.)Service Mobility 
在我們的環境中，每位使用者皆可以是服務的提供者。因此，在整個 Smart 
Campus 的環境中，除了原本固定式的服務之外，更加入了使用者所提供的服
務。由於使用者是會在環境中移動的，也因此達到 Service Mobility 的目標。 
4.2.2 整體架構 
普及運算應用程式是由兩種應用程式所組成：Event-Based Applications 以
及 Message-Based Applications。Event-Based Applications 是由 Event 來驅動，
而 Message-Based Applications 則是當有收到使用者的 invoke 時，才會執行工
作。如圖 2 所示。Event Manager 負責管理環境內的所有 Events 同時也接收
Event-Based Application 的訂閱。Event Generator 則負責將感應器所感測到的
資料轉成 Event 傳送給 Event Manager。FSM 負責管理環境內的所有 Services。
RSI 則提供單一介面，讓使用者透過此介面來 invoke Services。 
 
圖 14 、Application Framework 
4.2.3 Event-Based Component Management 
在 Event-Based 框架中，是由 Event Generator、Event Manager 及
Event-Based Applications 所組成。在此框架，我們利用 Event 發生與否，來判
斷何時將資訊發送給使用者。藉此來創造出一個 Context-Awareness 特性的環
 18
 
圖 15 Event-Based Application 循序圖 
4.2.4 Message-Based Component Management 
在 Message-Based 框架中，是由 FSM、RSI、Services 以及 Message-Based 
Applications 所組成。此部份框架是建立於 FULL：一個建制於 SIP 的普及運
算環境，透過 SIP 來解決 Mobility 的問題。 
4.2.4.1 FSM (FULL Service Manager) 
在 FULL 的環境中，存在著許多異質的服務。各種異質的服務皆擁有
屬於自己的服務描述(Service Description)以及自己的 Registry。其中，服務
描述可以讓應用程式的開發者更容易瞭解服務的內容。Registry 則是紀錄目
前系統中有哪些服務。應用程式開發者透過 Registrar，便可以快速搜尋所
需求之服務。在本環境中，當有新的服務進入環境時，必須向所屬的 SIP 
Server 作註冊。利用此特性，我們將服務描述夾帶在 SIP message 的 “entity 
header”中。因此，在服務向 SIP Server 作註冊時，同時也向 FSM 完成了服
務的註冊，而不用另外再多作一次註冊的動作。如此一來，FSM 便擁有了
環境內的所有異質的服務的資訊。應用程式開發者只需透過 FSM，就可以
搜尋環境內所有異質的服務，而不必向各個異質服務的 Registry 作搜尋。 
4.2.4.2 RSI (Remote Service Invocation) 
如同之前所述，環境內存在著許多異質性的服務。而每個異質的服務，
皆有屬於自己的服務呼叫方式。因此，程式開發者若想要使用服務，則必
須根據各個異質服務的標準，選擇不同的呼叫方式，也因此造成許多不便
 20
5. 應用實例-Smart Campus 
在 Smart Campus 中，使用者可以先透過入口網站，檢閱整個校園中有提供哪
些服務並訂閱。之後，當使用者在校園中活動時，系統便會根據使用者之前的設
定，在某個特定的 Event 觸發時，啟動特定的服務來服務使用者，而不需使用者
再次手動去要求使用這些服務，創造一個以使用者為中心的校園環境。下面的
Scenario，係一使用案例。當 Tom 進入校園時，Tom 攜帶在身上的手持式裝置自
動收到了來自個人信息系統的通知，裡面包含了學校內各處室要發送給 Tom 的
重要訊息。接著，”行程秘書”便會告知 Tom 今日的所有行程，並告知離目前時
間點最近的行程為何。接著，Tom 來到了圖書館，在進入圖書館的同時，Tom
的手持式裝置也同時收到圖書館的新書通知，提供 Tom 圖書館這一周內新進書
籍的相關資訊。此時，Tom 想利用圖書館內的列表機列印文件，離開圖書館後，
Tom 透過手持式裝置，點選了”Where are you”此應用程式並輸入自己以及 Bob
的 SIP uri。透過由”Location Server”所得到的位置資訊再與”NCKU Map”結合，
Tom 便可以透過手持式裝置螢幕所顯示的地圖來得知 Bob 以及自己目前的所在
位置的相關資訊。 
5.1 系統架構 
圖 5 為本系統之架構圖。RFID  Reader 則是負責來感測使用者身上所攜
帶的 RFID 晶片，並將此資訊送至 Location Server 及 Event Manager。Location 
Server 負責接收由 RFID 所傳來的資訊來紀錄使用者的所在位置。而”Where am 
I”服務則是可以向 Location Server 發出要求，取得目前使用者的位置。”New 
Books Info.”應用程式為 Event-Based Application，”Message Center”以
及＂Schedule Secretary＂應用程式為 Event-Based Application，而”Where are 
you”和”Service Discovery”為 Message-Based Application。 
New 
Books Info.
Where are 
you
Service 
Discovery
Schedule 
Secretary
Messsage
Center
Event 
Manager
RFID 
Reader
FSM
RSI
Location 
Server
Where am 
I
RFID 
Reader
NCKU Map  
Manager
Personal data 
Management
…
User’s Location Info.
Subscribe
Query
Return Service List
Events
Invoke User’s Location Info.
Invoke
User’s Schedule
Activate
Invoke
User’s Schedule
Portal
Subscribe
 
圖 5. 系統架構 
 22
是使用 Visual C#，撰寫平台為 Visual Studio 2005。在現實環境中，我們是以
Dopod CHT9000 作為我們的手持式裝置，此裝置上的作業系統為 Windows 
Mobile 5.0。此外，我們在特定地點設置 RFID Reader(型號為 AWID MPR- 
2010BN)且使用者身上皆攜帶 RFID 晶片。在實作上，我們建立一入口網站，
此入口網站可以供 Applications ㄋ和 Event Generators 來註冊，同時使用者也
可以在此網站瀏覽環境內所有的 Applications 並選擇想要訂閱或使用的
Application。圖 8 為 Event Generator 註冊的畫面，RFID Reader 必須提供其
ID 以及所在位置之資訊，讓 Application 在訂閱時能夠得知 Reader 的位置並
選擇訂閱。 
 
圖 8.Event Generator 註冊頁面 
如圖 9 所示，Application 在註冊時，必須輸入一個 unique 的 ID 來註冊。
Description 欄位是用來說明此 Application 可以提供何種資訊。而 URL 欄位
是可以讓使者直接連到此位址並作訂閱的動作。IP 欄位則是 Event 所要送到
的位址。而 Reader ID 表格則是顯示目前環境有哪些註冊的 Event Generator
可以讓 Application 來訂閱。 
 
圖 9.Application 註冊頁面 
圖 10 中，此表格顯示了目前環境中所有可以供使用者訂閱的
Event-Based Application 以及其說明，讓使者可以清楚瞭解各 Application 所能
夠提供的功能。 
 24
需要解決的問題，我們以階層式 SIP 網路環境來解決各種移動性的問題，階層式
架構並可改善 hand-off 延遲的問題，利用 SIP 註冊訊息夾帶服務資訊，更簡化了
解決服務移動的流程。同時我們也提出一可擴充的架構，整合現有的＂發現服
務＂以及＂呼叫服務＂協定，讓現有的服務不必重新開發，就可被應用在 FULL
環境中，達到各式服務程式的整合。 
在應用程式框架中，我們將環境內的所有服務分為兩種：Event-Based 以及
Message-Based。服務提供者可以將他的服務程式，依據主動或被動的特性加入
其中，應用程式的開發者利用這兩種不同特性的服務程式及框架，可以快速地開
發新的應用，如能善加利用移動以及情境感知的特性，應用程式的開發者可以容
易地創造出一個以使用者為中心的應用，文中我們以學校之老師、學生為中心，
設計出 Smart Campus 的雛型，做為應用實例，讓使用者可以充分了解我們設計
的系統。在未來，更多元化的服務加入後，應用程式的開發者可以開發出更多不
同的應用來給使用者使用。 
 26
[15] P. Tandler, “Software Infrastructure for Ubiquitous Computing Environments:Supporting 
Synchronous Collaboration with Heterogeneous Devices,” Proc. Ubiquitous Computing 
(Ubicomp 2001), Springer-Verlag, Heidelberg, 2001, pp. 96–115. 
[16] N. Streitz, J. Geissler, and T. Holmer, “Roomware for Cooperative Buildings: Integrated Design 
of Architectural Spaces and Information Spaces,” Proc. Workshop on Cooperative Buildings 
(CoBuild 1998), Springer-Verlag, Heidelberg, 1998, pp. 4–15. 
[17] A. Fox et al., “Integrating Information Appliances into an Interactive Workspace,” IEEE 
Computer Graphics & Applications, vol. 20, no. 3, May 2000, pp. 54–65. 
[18] J.P. Sousa and D. Garlan, “Aura: An Architectural Framework for User Mobility in Ubiquitous 
Computing Environments,” Proc. IEEE Conf. Software Architecture, IEEE CS Press, Los 
Alamitos, Calif., 2002, pp. 29–43.  
[19] Manuel Román et al.; ”A Middleware Infrastructure for Active Space”; IEEE Pervasive 
Computing, Vol 1., Issue 4, Oct.-Dec. 2002, Page(s):74 - 83 
[20] Li-Der Chou et.al.; “Seamless Streaming Media for Heterogeneous Mobile Networks”; Mobile 
Networks and Applications, Springer, 2006, pp. 873-887 
[21] Jakob E. Bardram, Henrick B. Christensen; “Pervasive Computing Support for Hospitals: An 
Overview of the Activity-Based Computing Project”; IEEE Pervasive Computing, Volume 
6,  Issue 1,  Jan.-March 2007, Page(s):44 – 51 
[22] Ron Shacham et.al.; “Ubiquitous Device personalization and Use: The Next Generation of IP 
Multimedia Communications”; ACM Transaction on Multimedia Computing, Communications 
and Applications, Vol.3, No. 2, Article 12, May 2007 
 28
these changes and make it transparent to each user. 
In this paper, we propose a pervasive computing environment, named FULL (Fantastic Ubiquitous 
Living Land), to address the above issues and to realize the vision of pervasive computing 
environment. 
The users of FULL include end-user, application developer, and service developer. FULL must 
make the end-user query services easily and transparently invoke heterogeneous services. For 
application developer, FULL will provide a unified interface to establish specific application by using 
services which are implemented by various mechanisms. And for service developer, he can individually 
choose one of the various service management protocols and invocation methods that FULL supports 
to build the service. 
In section 2 of this paper, we describe the architecture overview of FULL and the design purpose of 
the four layers. In section 3, we dilate on the components of each layer. Implementation detail is 
described in section 4. We finally conclude and compare with other projects in section 5. 
 
OVERVIEW OF FULL 
 
Conceptually, applications find and use services via middleware, and network platform deals with the 
commu-nication between services. Network platform provides mobility management, session initiation, 
and network integration. User can access the resource on network anytime, anywhere. Services under 
different mechanisms coexist on FULL.  Middleware deals with service management which includes 
discovering services registered by different mechanisms and invoking services by its invocation 
method. Applications complete their tasks by invoking services in various mechanisms.  
 
Fig. 1: conceptual model of FULL 
The middleware is further divided into two sub-layers: invocation and service layer.  Fig. 2 shows 
its layer structure. The function of each layer is as followed: 
(1) Network Layer 
It integrates individual networks using SIP [4] protocol, and provides users to connect to the integrated 
network at any time, any place, any device, and stay on it unless they break off the connection.  That 
means that the communication environment should provide not only the communication platform but 
also the ability of mobility, including horizontal and vertical hand-off, and therefore the network should 
be cross-layer network. A hierarchical architecture based on SIP is proposed to make hand-off more 
smoothly and efficiently. We extend the function of SIP registrar server to accept the registration of 
service information and forward to FULL Service Manager (FSM), so that the registrations of SIP 
 30
through the interface provided by invocation layer. 
 
THE DESIGN OF FULL 
 
Network Platform 
In order to support cross-layer network, we adapt application layer protocol, SIP, to build FULL 
network platform. Integrating heterogeneous networks from application layer has the advantage of 
flexibility, scalability, and easy-implementation.  SDP (session description protocol) can help 
applications to aware the session content. Besides, we use the term of “entity header” in SIP message to 
register service information. When UA registers to SIP Server, the registration of the services it 
provides is completed at the same time. 
In order to make hand-off more smooth and efficiently, we propose an architecture of hierarchical 
SIP environment, which is shown in  Fig. 3. It contains three major components: SIP Server, SIP 
Proxy, and SIP UA(User Agent). 
 
Fig. 3:  Architecture of hierarchical SIP environment 
(1.) SIP Server 
We raise location, registrar, and redirect function from Proxy Server to upper layer, and called the 
combination SIP Server. Location Server is used to maintain the location information of each SIP UA. 
It’s similar to mobile IP. Each UA should register to a SIP Server as its home. When UA roams around 
the network, the current (foreign) SIP server’s location will be recorded in UA’s home. And in the SIP 
message which is sent by UA, “FROM” tag will be filled in with the location of UA’s home. So that 
other UAs can query where the UA is by its home location server.  Registrar Server deals with the 
REGISTER message from UA, and updates location information to the Location Server. Redirect 
Server is responsible for querying Location Server about the location information of the queried UA. 
(2.) SIP Proxy 
Proxy acts as a virtual UAS (User Agent Server)/UAC (User Agent Client). UAS receives and deals 
with the request sent by UA, and UAC sends response message to UA. It implements the server state 
machine when receiving requests, and the client state machine for generating outgoing requests. 
 32
application program. Its main function accelerates the development of application and simplifies the 
specific problem. It can achieve reusability technology using Design Patterns to improve code 
reusability. 
We use the way of the Problem-Recipe to build RSI framework as first. The system finds out the 
key question according to different problems. And then we adopt design pattern or others methods to 
solve it. 
 
Fig. 5: RSI Invoke Operation using Bridge Pattern 
In order to increase the extension of the framework, we use Bridge Pattern to design the classes of 
invocation. Bridge Pattern is a kind of structure patterns. It avoids the permanent binding between an 
abstraction and implementation layer. The abstraction and the implementation should be extensible 
through subclassing and changes to the implementation should not impact clients. A Bridge is a 
decoupling of an abstraction from its implementation so the two can vary independently.  
As shown in Fig. 5, its relation changes form original inheritance relationship into aggregation 
relationship. It decides the specific kind of invocation using dynamic binding during the execution of 
program. In a fast-developing network service, it provides an elastic way. 
In an extension, there are new invocations to be joined into the RSI system using Factory Method 
Pattern [12]. As shown in Fig.6, RSI_InvokeCreator will reserve hook to increase various kinds of 
RSI_ConcreteCreator. It will generate a RSI_InvokeOperationImp to implement the details of 
Invocations. 
The Factory Method provides the mechanism for isolating the instantiation mechanism of each 
implementation class so the client application can remain compile-time independence from all 
implementations, requesting a particular implementation class at runtime. 
 
Fig. 6 RSI Invoke Operation using Factory Method Pattern 
 34
The registration of services is along with the registration of SIP. This brings convenience for both 
service provider and service requestor. We are confident that FULL is well suited for both local area 
network and large-scale environment. 
 
REFERENCES 
[1] G. Banavar et al.,”Challenges: An Application Model for Pervasive Computing”, Proc. 6th Ann. 
ACM/IEEE Int’l Conf. Mobile Computing and Networking(Mobicom 2000),ACM Press, 2000, 
Page(s):266-274. 
[2] M. Handley, H. Schulzrinne, E. Schooler, J. Rosenberg; ”SIP: Session Initiation Protocol”, 
Request for Comments: 2543,IETF,March 1999 
[3] Michael N.Huhns, Munindar, P.Singh; ”Service-Orient Computing : Key Concepts and 
Principles”, IEEE Internet Computing, Jan 2005, Page(s):75-81 
[4] J. Rosenberg, H. Schulzrinne, G. Camarillo; “SIP: Session Initiation Protocol,” Request for 
Comments: 3261, IETF, June 2002 
[5] “Universal Description, Discovery and Integration - Specification”, OASIS, 
http://uddi.org/pubs/uddi_v3.htm. 
[6] “Jini Network Technology - Specifications”, Sun Microsystems, 
http://www.sun.com/software/jini/specs/index.xml. 
[7] “Web Services Description Language (WSDL) Version 2.0”, W3C, 
http://www.w3.org/TR/wsdl20/. 
[8] “Simple Object Access Protocol”, W3C, http://www.w3.org/TR/soap/. 
[9] Uwe Zdun, Markus Voelter and Michael Kircher; ”Pattern-Based Design of an Asynchronous 
Invocation Framework for Web Services” International Journal of Web Services 
Research,1(3):42-62, July-Sept 2004 
[10] Yu, M.; Taleb-Bendiab, A.; Reilly, D.;”A Polyarchical Middleware for Self-Regenerative 
Invocation of Multi-Standard Ubiquitous Services” Web Services, 2004. Proceedings. IEEE 
International Conference on Publication Date: 6-9 July 2004, Page(s):410 – 417 
[11] Bellur, U.; Narendra, N.C.;” Towards service orientation in pervasive computing systems” , 
Information Technology: Coding and Computing, 2005. ITCC 2005. International Conference on 
Volume 2,  4-6 April 2005 Page(s):289 - 295 Vol. 2 
[12] Paul A. Buhler, Christopher Starr, William H. Schroder, Jose M. Vidal; ”Preparing for 
Service-Oriented Computing：a composite design pattern for stubless Web service invocation” , 
International Conference on Web Engineering, 2004 
[13] J.Allard et al, “Jini Meets UPnP: An Architecture for Jini/UPnP Interoperability”, 2003 
International Symposium on Applications and the Internet (SAINT 2003), 2003 
