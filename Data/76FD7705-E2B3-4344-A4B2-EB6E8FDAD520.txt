 2
計畫中文摘要 
 
關鍵詞： 人工智慧、電腦象棋、象棋，棋局盤面資料庫，資訊檢索、資料探勘、
智慧型代理人 
 
1997 年深藍戰勝了人類西洋棋冠軍，是人工智慧的一個重要的里程碑。
電腦象棋由於複雜度與西洋棋接近，被視為電腦對局的下一個目標。但是進
展卻沒有想像中的順利，因為象棋複雜度較高，在接近高段水準時，專家知
識的運用將更為重要，但目前的象棋程式只有在開局時能夠運用棋譜中的知
識，中盤及殘局階段幾乎無法利用專家知識。 
要讓象棋程式可以充分利用專家知識，最重要的工具就是象棋棋譜資訊檢
索技術，能夠在大量的專家棋譜中進行資訊檢索，才能利用其中的專家知識。
本計畫中首先將設計一個循序式的棋型檢索方法，主要是改進字串比對演算
法及影像壓縮演算法來完成，這個方法可作為第二年研究如何建立索引以加
速搜尋的基礎，前兩年的工作可幫助在棋譜資料庫中找到包含特定棋型的棋
局。但象棋高手思考、討論及學習的過程是建立在抽象棋型如馬後砲、悶殺
和吊子等。能夠解決抽象棋型查詢的問題，對象棋程式與象棋專家知識的結
合將有極大幫助，這是第三年的研究課題。 
在第ㄧ年中，我們完成了一個循序式棋譜檢索系統，包括棋譜資料庫的建
立，字串比對演算法的應用(如 KMP 演算法)，如何壓縮棋譜以縮小儲存空間
及增快搜尋速度，我們參考影像處理中的壓縮演算法，如 LZ 系列的演算法。
以及利用生物資訊中的字串比對演算法，如 suffix tree 等，來幫助搜尋比對棋
型，符合本三年計畫的進度。 
 4
行政院國家科學委員會專題研究計畫期中精簡報告 
象棋棋譜資訊檢索技術之研究(I) 
計畫編號：94-2213-E-259-015- 
 
執行期限：  94 年 08 月 01 日至 95 年 07 月 31 日 
 
計畫主持人：顏士淨 
計畫參與人員： 梁秦宜、羅仲耘、張歐丞、王凱澤、簡銘均 
 
執行機構及單位名稱 
 
國立東華大學資訊工程系與研究所 
 
 
一、前言 
 
電腦對局(computer game)的研究
自從 1950 年由 Shannon 提出利用電腦
來下西洋棋的概念以來，電腦對局就
成為人工智慧領域中最吸引人的課題
之一。1997 年 IBM 在超級電腦上開發
出來的”深藍”(Deepblue)戰勝了人類西
洋棋冠軍，可說是人工智慧的一個重
要的里程碑 [Herik et. al. 2002]。 
電腦象棋方面，由於其複雜度與
西洋棋最為接近，因此被視為電腦對
局的下一個最主要目標 [Yen et. al. 
2004]。但是其進展卻沒有想像中的順
利。其原因除了硬體速度發展趨緩之
外，最主要原因是象棋複雜度較高，
在接近高段水準時，專家知識的運用
將更為重要，目前的象棋程式只有在
開局時能夠充分運用棋譜中的專家知
識，中盤及殘局階段幾乎無法利用專
家知識，而一個象棋高手，可以以大
量的專家知識為思考的基礎進行跳躍
式思考，這些專家知識都是象棋發展
千年來研究的成果，這也是目前只倚
賴窮舉搜尋的下程式無法戰勝人類高
手的最主要原因。 
要讓一個象棋程式可以充分利用
象棋專家知識，所需要的一項最重要
的工具就是象棋棋譜資訊檢索技術，
能夠從現有的大量高手對局的棋譜很
快的找出相關的資訊，才能使得這些
棋譜中的專家知識得以利用。在本計
畫中，第一年首先將設計一個循序式
的棋譜檢索方法，主要將利用字串比
對演算法及影像壓縮演算法來完成，
這個棋譜檢索方法可作為第二年研究
如何建立索引以加速搜尋的基礎，前
兩年的工作將可幫助我們於最短的時
間內，在棋譜資料庫中找到包含特定
棋型的棋譜。但這仍不足以讓象棋程
式與現有的象棋專家知識結合，且應
用範圍也受限制。一般象棋高手是以
抽象棋型來思考，討論及學習象棋專
家知識，抽象棋型代表某一系列的棋
型，如馬後砲，悶殺，吊子等。能夠
解決抽象棋型查詢的問題，對象棋程
式與象棋專家知識的結合，將有極大
幫助，這將是第三年的主要研究課題。 
在本篇報告中，首先將敘述研究
目的，然後將敘述第一年的研究成
果。最後我們將列出成果及討論，並
且對計畫做一簡單的自評。 
 6
水準。這個系統將可以幫助以資料探
勘的方式，自大量的棋譜中找出特定
棋型與著手之間的關係與序列，建立
一套可以半自動產生有用棋型的系
統。另外在發展此系統時，也將開發
出一些字串比對，資料檢索方法，搜
尋演算法及機器學習理論，預計可發
表四篇以上的論文，而所製作出的象
棋棋譜檢索，將可幫助電腦象棋的發
展，預計在三年整合型計畫結束時，
棋力可達大師級水準。 
 
三、研究方法與成果 
本計劃(象棋棋譜資訊檢索技術之
研究)的研究方法、進行步驟及執行進
度將分為三年各四個階段： 
第一年：循序式棋譜檢索的研究與
設計 
包括棋譜資料庫的建立，字串比對
演算法的應用(如 KMP 演算法)，如何
壓縮棋譜以縮小儲存空間及增快搜尋
速度，此方面可參考影像處理中的壓
縮演算法，如 LZ 系列的演算法。或是
利用生物資訊中的字串比對演算法，
如 suffix tree 等，來幫助搜尋比對棋
型。預計進度如下：1.研究象棋的資料
結構表示方式 2.研究棋譜資料庫最有
效益的建立方式 3. 研究字串比對演算
法的應用 4. 研究如何在壓縮資料中尋
找特定資料的演算法，以減少儲存空
間及加快搜尋時間，並整合棋型比對
系統 
第二年：研究如何建立索引以加速
搜尋 
循序式棋譜檢索的速度與棋譜數
量呈線性成長，在棋譜數量到達某一
程度時，在棋譜資料庫中建立索引將
成為加速的必要工作，我們將參考多
媒體資料庫的方式，在棋譜資料庫中
建立索引。預計進度如下：1. 研究多
媒體資料庫中資訊檢索的方法 2. 研究
建立索引必須(可用)的象棋專家知識 
3. 將專家知識和索引方法作良好的結
合(系統架構,資料結構等等) 4. 研究本
索引方式的最佳搜尋(檢索)方法．並提
出效能測試結果 
第三年：研究解決抽象棋型查詢的
問題 
前兩年的工作將可幫助我們在棋
譜資料庫中找到包含特定棋型的棋
譜，但這仍不足以與現有的象棋專家
知識結合，且應用範圍也受限制。一
般象棋高手是以抽象棋型來思考，討
論及學習象棋專家知識，抽象棋型代
表某一系列的棋型，如馬後砲，悶殺，
吊子等。能夠解決抽象棋型查詢的問
題，對象棋程式與象棋專家知識的結
合，將有很大的幫助，這是第三年的
主要研究課題。預計進度如下：1. 研
究象棋程式中所需要的抽象棋型 2. 研
究抽象棋型的表示方式 3. 研究抽象棋
型的搜尋方法 4. 建立索引以增加抽象
棋型的搜尋速度 
在第一年中，我們將著重於循序式
棋譜檢索的研究與設計，研究方法及成
果如下： 
3.1. 象棋的資料結構表示方式 
象棋是一個複雜度相當高的棋，一
個好的資料結構，將可幫助各種搜尋演
算法執行，為了要讓電腦程式能夠了解
象棋的各種知識，我們首先介紹一下關
於象棋所使用的資料結構。 
棋盤表示法：象棋的棋盤大小為
9×10，在電腦中我們使用一維陣列的
mail box 方式表示棋盤，使用一維陣列
的原因是能加快運算的速度。另外在考
慮馬、炮的走法及炮的間接威脅時，為
了程式上撰寫的方便，我們將棋盤向外
擴張三層。 
 8
查是否有符合我們要尋找的盤面。以一
盤棋平均約經過 50~60 回合（約
100~120 手）結束，一張棋譜就擴張到
100~120 倍左右，所以選擇一個能使用
較少空間且高效率存取的儲存方式是
我們非常重要的一環，且一個合適的資
料庫系統在做棋譜索引時，也能避免不
必要或重複的儲存空間。 
3.3. 字串比對演算法的應用 
為了了解目前的盤面在棋譜中出現
的狀況，並藉此分析目前局面的優劣，
我們必須知道此盤面在那一張棋譜中
出現過。然而存放在資料庫中的棋譜數
量相當多，若不設計一快速的比對演算
法，則在比對時所花費的時間成本將相
當驚人。因此，我們必須用一種有效率
的方式從資料庫中找出特定的棋譜。 
在循序式的字串比對中，KMP 字串
比對演算法是一種相當有效率的字串
比對演算法[2001 Cormen]。KMP 字串
比對演算法的精神是先分析 pattern 的
組成字元，然後建出一張參考表，當字
元發生比對錯誤時，可以依據參考表來
決定要跳過多少個不需比對的字元。正
因為跳過一些不可能比對成功的字
元，減少需要比對的次數，進而加快比
對的時間，達到加速的效果。 
利用 KMP 字串比對演算法或比
KMP 字串比對演算法更有效率的方法
可以讓我們跳過許多不必要的比對，進
而節省搜尋時間。 
3.4 如何在壓縮資料中尋找特定資料的
演算法，以減少儲存空間及加快搜尋時
間，並整合棋型比對系統 
在比對棋譜的部份，除了利用 KMP
字串比對演算法減少比對的次數外，如
果能讓棋譜在不遺失資訊的情況下，減
少棋譜儲存的位元數。也就是減少在比
對時要比對的位元數，則理論上可以再
加快比對的速度。於是我們就思考在壓
縮後的棋譜裡，如果可以直接在壓縮文
件中做比對而不需要將壓縮文件解壓
縮，則比對棋譜的速度應該可以再加
快。 
在壓縮的文件中做字串比對，系統
相對於在未壓縮的文件中做循序字串
比對，勢必需要額外的花費來記錄一些
必要的資訊。關於這一部分需要實作出
系統，相對於循序比對演算法作一比
較，來實際比較加速的效果。目前有一
些字典式壓縮的方法，並有提出可在特
定壓縮模式下進行不解壓縮文件的字
串比對演算法[Ho and Yen 2002]，我們
針對這一部分的相關文獻進行我們的
系統設計，下面將介紹我們欲使用的
LZW 字典式壓縮演算法[陳 2001][鐘 
2002]。 
 LZ78 在 1978 年 由 J.Ziv 和
A.Lempel 提出，目的是要改善 LZ77 的
效能，在 LZ77 編碼法中，利用滑動視
窗及字典視窗的概念，對文件作編碼，
其滑動視窗包含一搜尋緩衝區（Search 
Buffer ）及預看緩衝區（ Lookahead 
bBuffer）。其缺點是當緩衝區設太大
時，效能較差且當在字典視窗中找不到
匹配時，壓縮後的位元數會比未壓縮之
前大。 
 而 LZ78 不採用滑動視窗的方式，
其採取每次編碼輸出一個記號後，就將
產生的片語加到字典中供後續編碼使
用，其字典初始內容是空的，其缺點是
仍有可能造成壓縮後的編碼比原來未
壓縮的位元數多。LZW 就是針對 LZ78
所提出改善的編碼法，其和 LZ78 不同
處在於初始字典並不是空的，在 LZW
中，字典的初始值是欲編碼文件中的字
元集合，下面將介紹其編碼過程。 
Step1: 使用資料源的輸入符號集合
A 中所有符號字元建立初始字典,其中
 10
參考文獻 
中文 
1. 徐國棟，2004，圍棋棋譜棋型
比對系統，國立東華大學資訊
工程研究所，碩士論文。 
2. 徐家亮，2004，初學者象棋教
室，國家出版社。 
3. 許舜欽, 1990a，電腦西洋棋和
電腦象棋的回顧與前瞻 , 電
腦學刊, 第二卷, 第二期, 頁
1─8, 1990。 
4. 許舜欽, 1990b，電腦象棋程式
的設計與製作, 電腦學刊, 第
二卷, 第四期, pp.1-11, 1990。 
5. 許舜欽, 1991，電腦對局的搜
尋技巧, 台大工程學刊, 第51
期, pp.17-31, 1991。 
6. 許舜欽、曹國明, 1991，電腦
象棋開局知識庫系統之研製 , 
台灣大學工程學刊 , 第五十
三期, 頁75─86, 1991。 
7. 許舜欽、林益興、1991，電腦
象棋的盲點解析 , 電腦學刊 , 
第三卷, 第四期, pp.1-6、1991  
8. 陳志昌，電腦象棋開局知識庫
系統之設計與製作，台灣大學
資訊工程研究所碩士論文，
1998。 
9. 陳志昌、許舜欽(2001)，電腦
象棋開局資料庫網路查詢應
用系統之研製”，第六屆人工
智慧與應用研討會論文集，
2001年11月16日，高雄，pages 
588-592。 
10. 陳志昌、徐明煒、顏士淨
(2002)，“Othello開局資料庫系
統之研製,"  第七屆人工智慧
與應用研討會，2002年11月15
日，台中，台灣。 
11. 陳再興(1995)，“電腦象棋停著
殺之研究”，元智工學院電機
與資訊工程研究所，碩士論
文。 
12. 陳培殷，資料壓縮論，滄海書
局，2001。 
13. 鍾國亮，2002，資料壓縮的原
理與應用，全華科技圖書，
2002。 
14. 曹國明，1988，智慧型中國象
棋程式的設計和製作，國立台
灣大學資訊工程學研究所，碩
士論文。 
15. 黃聖峰、陳人豪，2003，資料
庫系統理論與實務，文魁資
訊。 
16. 顏士淨、嚴礽麒、許舜欽
(2002a)，“電腦圍棋中盤著手
策略 ," 第七屆人工智慧與應
用研討會，2002年11月15日，
台中，台灣。 
17. 顏士淨(2002b)，國科會研究報
告：一個可自動擷取專家知識
的 象 棋 知 識 開 發 系 統 ，
90-2218-E-259-008-。 
18. 顏士淨 , 楊泰寧 , 董昱騰 , 
2003，電腦象棋程式達奕之設
計與製作 , 第八屆人工智慧
與應用研討會, 2003 
19. 顏春煌，資料庫系統，國立空
中大學，2003。 
20. 嚴礽麒，顏士淨，2003，棋形
知識庫之設計與製作，中華民
國 92 年全國計算機會議，
1784-1792頁。 
 
English 
1. Allis, L.V. (1994). Searching for 
Solutions in Games and Artificial 
Intelligence. Ph.D. Thesis, 
University of Limburg, Maastricht, 
The Netherlands. ISBN 
90-9007488-0. 
2. Asian Xiangqi Federation. (2003). 
http://tysung.cjb.net/xq/index.html. 
3. Bouzy, Bruno and Cazenave, Tristan 
(2001). Computer Go: An AI 
