 2
 
貳、 英文摘要 
In this research, we have proposed an architectural design for computing 64-bit LNS 
addition/subtraction. The significance of this research approach is that the FLP MAF unit and 
the FLP division unit can be fully shared by the LNS addition/subtraction unit, which will result 
in a saving of the hardware cost of the hybrid FLP/LNS processor [2]. The main research 
approach is the so-called early leading-zero detection method, which is used to solve the large 
hardware problem caused by the LNS subtraction.  
 We have designed and implemented the 64-bit hybrid FLP/LNS processor both with and 
without the leading-zero-bit detection method. The implementation results show that the 
proposed leading-zero-bit detection method is effective in saving the hardware cost and delay. 
We also have implemented the FLP and LNS addition/subtraction, multiplication, division 
arithmetic units with different word length (16, 20, 24, 28, and 32 bits). The implementation 
results show us the hardware cost and speed of the FLP and LNS units in different word length, 
which can be very valuable in choosing the arithmetic system used in designing high-speed 
computing systems. 
 
Keywords: Exponential function, Logarithmic function, Logarithmic number system (LNS), 
Floating-point number system, Hybrid floating-point/LNS processor 
 4
 In LNS arithmetic, multiplication, division, square and square root operations and some 
complex functions such as exponent and logarithm can be performed efficiently. However, the 
addition and subtraction in LNS arithmetic require the computation of the functions 2Φ  and 
2Ψ , which is usually performed by table-lookup operation. A problem in the development of 
very large word-length LNS arithmetic is the exponential increase of this table size as the word 
length of the LNS number increases.  
In this research, an architecture that can combine the FLP MAF unit, FLP division unit, 
and LNS unit into one single arithmetic processor is proposed. We call this arithmetic processor 
“hybrid FLP/LNS processor”. There are three advantages of the proposed architecture. First, 
the FLP and LNS number representations can be designed in a uniform and compatible manner. 
Furthermore, the hardware for performing the FLP-to-LNS and LNS-to-FLP conversions is 
embedded within the hybrid FLP/LNS processor. There is no extra software and hardware effort 
needed for the two conversions, which are usually required in practical applications. Secondly, 
the hybrid processor is a functionally versatile processor. It can perform FLP MAF operation 
which includes FLP addition/subtraction and FLP multiplication, FLP division, LNS 
addition/subtraction, and the FLP-to-LNS and LNS-to-FLP conversions. The two conversions 
can also be considered as the FLP logarithmic and FLP exponential operations, respectively. 
Thirdly, and most importantly, this architectural design approach can allow the FLP MAF unit 
and the FLP division unit be fully shared by the LNS unit. This advantage can effectively solve 
the large hardware problem and the large pipeline latency problem of LNS arithmetic, and result 
in a cost-effective and high-performance FLP/LNS arithmetic processor. 
 In the proposed hybrid processor, instead of using table lookup method [2], the 2Φ  and 
2Ψ  functions are computed by the following computations: exponential computation, right 
 6
      Unit
lExponentia
Register R1 Register  R3Register R2
CA B
1.0
d
111
1
000
0
Register d
Registers
MAF3
MAF2
MAF1
Registers
0.0
stRead_cntl_
FLP_MAF
MAF1_st
Result_MAF
Exp_st
Read_Exp
LNS_AS
Read3_stRead2_stRead1_st
FLP_MAF FLP_MAF
Read_Exp Read_Exp
MAF3_st
MAF2_stRegisters
bFLP_MAF_Su                          
 OR  dFLP_MAF_Ad   FLP_MAF 3.
Exp_st  ORRead_st     Read_Exp 2.
LNS_Sub  OR  LNS_Add      LNS_AS 1.
:Note
=
=
=
Register    
 WordControl
register R1 register R2
2 11
1 0
00
Registers
Registers
Registers
DIV1
DIV3
DIV2
DIV3_st
DIV1_st
DIV2_st
d
FLP_DIV
⎪⎩
⎪⎨
⎧
AS-LNS :0
DIV-to-FLP :1
LNS-to-FLP:2
Read2_stRead1_st
Result_MAF
Result_DIV
⎩⎨
⎧
DIV-FLP LNS,-to-FLP AS,-LNS :0
FLP-to-LNS MAF,-FLP:1
ltFinal_Resu
0.1
unit-MAF-fromResult −
 
Fig. 1 The block diagram of the hybrid FLP/LNS processor. 
The objective of this research is to extend the word length of the 32-bit hybrid processor to 
64 bits. However, for a 64-bit LNS processor implemented by direct-computation of the 
exponent and logarithm in the 2Φ  and 2Ψ  functions, the precision requirement of the 
exponential computation will become 106 fractional bits. Implementation of such a 
high-precision exponential computation will require a very large hardware. In Section 2, we will 
describe our proposed approach to solving this problem and the design of a 64-bit hybrid 
FLP/LNS processor. In this project, we also designed FLP units and LNS units with several 
different word lengths. The implementation results of this design, shown in Section 3, allow us 
to see the trend of the cost between FLP and LNS units thus may thus be very valuable in 
choosing the arithmetic system when designing high-speed computing systems.  
 
 
 8
 
 )2).0(
5!
12.0.0
6
12.0
4!
1                
2.02.0
2
12.02.0
2
1                
2.0
!3
1)2.0(
2
12.01(2222
65-5
2
65
2212
352
12
4
52
22
213
12
26
22
26
21
2
39
21
313
2
13
2
.02.0.0.0 1
13
21
FFFF
FFFF
FFF
vvvv
zzzz
zzzz
zzzFFFF
++⋅
+⋅⋅⋅⋅+⋅⋅⋅
+⋅+⋅+⋅+⋅≅⋅=
−−
−−−−
−−−⋅ −
 
If LZNv is larger than half the word-length of Fv.0 , we approximate the function F
v.02  as    
     
)2.0.032.0.03.0(
!3
1)2ln.0(
2
12ln.01
)2ln.0(
!3
1)2ln.0(
2
12ln.012
822
21
413
2
2
1
3
1
2
32).02(ln.0
−−
⋅
⋅⋅+⋅⋅++⋅+⋅+≅
⋅+⋅+⋅+≅=
FFFFFFF
FFF
vv
wwwwwvv
vvve FF
 
In contrast, if this early leading-zero detection method is not used, the exponent computation of 
Fv2  should be computed as 
  
713
2
205
2
4
2
4
11
164
2
82
2
2
1
2
1
123
2
3
1
6
1
213
2
142
21
2
1
284
2
7
2
3
11
5
1
393
2
13
2
2
1
52
1
782
2
2
1
524
1
50
12
2
11
612
1211
61
2
2
1
832
21
393
11
66
2221
262
21
13
2
2.02ln2.02.0
)2.0(
5040
1
)2.0
2.0.0(.0
120
1)2.02.0.0(.0
48
12.0.0
36
1.0
720
1
)2.02.0.0(.0
12
1)2.02.0.0(.0
24
1.0
120
1
)2.0
2
12.0.0
2
1(2.0
3
12.0.0
4
12.0
24
1
2.0.0
2
12.0.0
2
12.0.0
2
12.0.0
2
12.0
6
1
2.0.02.0
2
1)2.0(12
13
2
13
2
13
2
−
−
−−−−
−−−−
−−−−−
−−−−−
−−−⋅⋅⋅
⋅+
⋅+
⋅⋅+⋅+⋅⋅+⋅⋅++
⋅+⋅⋅+⋅+⋅⋅++
⋅⋅+⋅⋅⋅+⋅⋅+⋅+
⋅⋅+⋅⋅+⋅⋅⋅+⋅⋅⋅+⋅+
⋅⋅+⋅+⋅+≅== −−−
F
F
FFFFFFFFFF
FFFFFFFFF
FFFFFFF
FFFFFFFFF
FFFF
wvv
w
z
zzzzzzzzzz
yyyyyyyyy
xxxxxxx
aaaaaaaaa
wwwwee FFF
 
 Since the function )21(log2 F
v−− , when 22.0
F
Fv
−< , can be computed with accuracy up 
to double word-length of the Fv.0  by using the early leading-zero detection method, the 
accuracy requirement of the hardware for computing the function )21(log2 F
v−− , when 
22.0
F
Fv
−≥ , can be much more relaxed. Thus, the hardware cost in the Exponential unit and the 
FLP MAF unit will be greatly reduced. 
 
 10
development board. The arithmetic units are connected to the Microblaze processor through the 
FSL (fast Simplex Link).  
 
4. Implementation results 
 The hardware cost and critical path delay of the 32-bit and 64-bit hybrid FLP/LNS 
processors are shown in Table 1 and Table 2, respectively.  
Table 1 hardware cost of the 32-bit and 64-bit Hybrid FLP/LNS processors 
  Exp unit MAF Div unit Total 
32bit(μm2) 273137.34 491099.71 349138.94 1113375.99 
64bit(μm2) 4706542.29 1113079.96 1021524.11 6841146.36 
 
Table 2 The critical path delay of 32-bit and 64-bit Hybrid FLP/LNS processor 
  Exp unit MAF Div unit Total 
32bit(ns) 33.22 47.59 44.25 125.06 
64bit(ns) 75.81 79.49 76.85 232.15 
 
 The hardware cost and critical path delay of the 32-bit and 64-bit hybrid FLP/LNS 
processors with and without leading-zero-bit detection are shown in Table 3. The hardware cost 
and speed of the leading-zero detection can save about 13.2% and 11.3%, respectively, of the 
exponential unit in the 64-bit hybrid processor.  
Table 3. The hardware cost and critical path delay of the 32-bit and 64-bit hybrid FLP/LNS 
processors with and without the leading-zero-bit detection 
 32bit Exp unit 64bit Exp unit(with lzd) 64bit Exp unit(without lzd) 
Timing(ns) 33.22 75.81 85.82 
Area(um2) 273,137 4,706,542 5,240,389 
 
 The hardware cost and critical path delay of the FLP and LNS addition/subtraction units in 
five different word length are shown in Table 4 and 5, respectively. It shows us that the LNS 
 12
in a saving of the hardware cost of the hybrid FLP/LNS processor, without sacrificing the 
performance of the FLP arithmetic computation.  The main research approach is the so-called 
early leading-zero detection method, which is used to solve the large hardware problem caused 
by the LNS subtraction.  
 We have designed and implemented the 64-bit hybrid FLP/LNS processor both with and 
without the leading-zero-bit detection method. The implementation results show that the 
proposed leading-zero-bit detection method is effective in saving the hardware cost and delay. 
We also have implemented the FLP and LNS addition/subtraction, multiplication, division 
arithmetic units. The implementation results show us the hardware cost and speed of the FLP 
and LNS units in different word length, which can be very valuable in choosing which 
arithmetic system should be chosen in designing high-speed computing systems. 
 
6. References 
[1] Israel Koren, Computer Arithmetic Algorithms, New Jersey: Prentice-Hall Inc., 1993. 
[2] Chichyang Chen and Paul Chow, “Design of a Versatile Cost-Effective Hybrid 
Floating-Point/LNS Arithmetic Processor,” ACM Great Lakes Symposium on VLSI 
(GLSVLSI), Italy, Dec. 2006, pp. 540-545. 
[3] Albert A. Liddicoat and Michael J. Flynn, “High-Performance Floating Point Divide,” 
Proceeding of EuroMicro Symposium on Digital System Design, Sept. 2001, pp. 354-361. 
[4] F. J. Taylor, R. Gill, J. Joseph, and J. Radke, “A 20 bit logarithmic number system 
processor,” IEEE Transactions on Computers, Vol. 37, Issue 2, pp. 190-200, 1988. 
[5] C. H. Liu, ” A Comparative Study of Short Word-Length Fixed-Point, Floating-Point, and 
LNS Arithmetic Units,” MS dissertation, Feng-Chia University, 2005。 
 14
 
肆、計畫成果自評 
1. 研究內容與原計畫相符程度 
本研究計畫之執行與所提計畫書完全相符。 
2. 達成預期目標情況 
本研究計畫之執行成果已達成預期目標。我們最主要的研究方法在提出以前導零位元
偵測的技術，用來解決 LNS 減法所需之高精準度的需求以及導致的高硬體成本，並已設計
及實現 64 位元混合 FLP/LNS 處理器，包括使用與不使用前導零位元偵測的方法。Synopsys
合成結果顯示，使用前導零位元偵測法的 64 位元混合處理器可有效減少硬體面積並增快
其速度。我們並設計並實現五個不同位元長度（16、20、24、28 與 32 位元）之 FLP 與 LNS
之加減法器、乘法器與除法器。這些算術單元 都經過 Synopsys 合成、 實現、與測試於
Xilinx Microblaze SOPC 系統中。實現結果的數據對於在高速數位系統的設計時決定使
用浮點數算術或 LNS 算術有相當大的幫助。 
 
3. 研究成果的學術價值 
本研究計畫所設計及實現 64 位元混合 FLP/LNS 處理器從未在學術界及工業界被實現
過，而我們並設計及實現五個不同位元長度（16、20、24、28 與 32 位元）之 FLP 與 LNS
之加減法器、乘法器與除法器，這兩項實作結果都可以做為未來學術界及工業界在算術電
路設計的重要參考。 
4. 學術期刊發表 
本研究計畫已發表下列論文： 
Chih-Yen Fan and Chichyang Chen, "A Comparative Study of LNS and Floating- Point 
arithmetic," Proceedings of 18th VLSI Design/CAD Symposium, Aug. 2007.  Hualien, Taiwan. 
期刊論文尚在寫作中，將於未來投稿。 
 
Optimization and verification 
Arithmetic and coding 
Routing and buffer insertion 
Power estimation and modeling 
筆者較有興趣者為「Arithmetic and coding」，「System level design」, 及
「Architecture and memory」。 
  三月十二日共有四場Keynote speech： 
第一場題目為: Design challenges in 45nm and below: DFT, low power and design 
for reliability, 講者為Dr. Philippe Magarshack, STMicroelectronics, France.  
第二場題目為: Sleep transistor distribution in row-based MTCMOS designs, 講者
為Professor Massoud Pedram, University of Southern California, USA.  
第三場題目為: Multi-processor operating system emulation framework with 
thermal feedback for system-on-chip, 講者為Dr. Giovanni De Micheli, EPFL, 
Switzerland.  
 
三月十三日有三場Keynote speech，以及一個Tutorial: 
第一場題目為: Computer-aided design of 3D integrated circuits, 講者為Professor 
Sachin Sapatnekar, University of Minnesota, USA. 
第二場題目為: Low-voltage limitations of deep-sub-100-nm CMOS LSIs-view of 
memory designers, 講者為Dr. Kiyoo Itoh, Hitachi, Japan. 
第三場題目為: Future trends for wireless communication frontends in 
nanometer CMOS, 講者為Professor Geores G. E. Gielen, Katholieke University 
leuven, Belgium. 
 
Tutorial 的題目為: DFM issues for 65 nm and beyond, 講者為Dr. Jamil Kawa 
and Dr. Charles Chiang, Synopsys Inc., USA. 
 
