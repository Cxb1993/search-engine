22D/3D 物體形變、編輯技術與應用(3/3)
計畫編號：92-2213-E-006-026
執行期限：93 年08 月01 日至94 年09 月30 日
主持人：李同益 執行機構及單位名稱：成功大學資訊工程學系
中文摘要
今年為本計劃三年計劃中最後一年，今年提出一個利用模型protrusive Reeb
graph (PRG)結構之半自動3D多邊型切割方法與系統實現。我們利用所謂PRG可以提
供系統不錯拓樸資訊來切割多邊型。最後我們並將這些切割結果，應用於
morphing，使得morphing在不同pose的表現方法上更為簡易且多樣化。
關鍵字: 模型切割，變形，分群，邊界平滑最佳化
Abstract
In this paper, we propose an interactive model decomposition scheme. In preprocess, we
automatically build a protrusive Reeb graph (PRG) for any given 3D model. The purpose
of the PRG gives the user a good clue to partition the model into visually-significant parts.
Then, this scheme can interactively partition models according to the user-specified
partitioning requirement. Finally, an iterative clustering is used to stabilize our partitions
and a smoothing refinement is used to smooth the boundary between adjacent partitions.
The experimental results show that the proposed scheme is a flexible and powerful
method to decompose models into their significant components. Furthermore, we also
show its application to 3D mesh morphing.
Keywords: Mesh decomposition, protrusive Reeb graph (PRG), clustering, boundary
smoothing, Morphing
4is needed. In this paper, we present an interactive model decomposition scheme that
makes the following contributions:
 We automatically build a protrusive Reeb graph (PRG) for a given model to identify
all possible visually-protrusive parts.
 With user intuitive specification for several anchor points on the model or for
selecting some PRG nodes, the proposed PRG coloring algorithm is executed to
partition the given model. This coloring algorithm follows user guidance to avoid
over-segmentation and obtains desired sub-parts.
 We propose a new face clustering technique to stabilize final decomposition after
coloring PRG.
 The partitioning procedure can be executed in either hierarchical or non-hierarchical
manner. Our partitioned results can be either symmetric or asymmetric as shown in
Figure 12. We provide such flexibility to satisfy various needs for different
applications.
The rest of the paper is organized as follows. Section 2 describes how to establish a
protrusive Reeb graph (PRG) for a given mesh model. In Section 3, we present a novel
coloring algorithm to partition the obtained PRG and thus we can cut models into
subparts. Some minima rules are used to stabilize obtained partitions and are used to
refine the cutting borders in Section 4. Section 5 demonstrates results and its morphing
application. Finally, we conclude and discuss future directions in Section 6.
6how the domain of v
n is divided, a Reeb graph is built for an object at various levels of
detail. If the domain of v
n is not divided in an appropriate manner, i.e., too coarse
(Figure 1(a)) or too fine (Figure 1(b)), the Reeb graph can not describe the correct
topological representation of the model as shown in Figure 1. In the following, we
propose to find some protrusive feature points on the model and then use these points to
compute a protrusive Reeb graph (PRG) that can be used to represent a model well.
Once v
n is found for each v, it is used to select protrusive feature points of the model.
First, a simple watershed-like algorithm is applied to the mesh based on v
n , i.e., initial
water level for each v and a flagv=true. In contrast to conventional watershed algorithms,
our water flows from lower level to higher ones. Iteratively, for each v if flagv=true, we
select a vertex p with the largest water level among v’s 1-ring vertices. If the water level
of v is smaller than that of p, then water flows from v to p. As water flows from v to p, we
do not change their water levels but simply let flagv=false and flagp=true. Repeat the
above process until no more water flows, i.e., no flagv can be changed again and the
watershed becomes stable. Once the loop stops, for each vertex v with flagv=true, it
represents a local maximum v
n , i.e., a candidate for a protrusive point. Figure 2 shows
many candidates, i.e., green points, detected by the watershed algorithm. Among these
candidates, some of them can be considered as redundant protrusive points, e.g. small
protrusive features as shown in Armadilo’s feet and back areas circled in Figure 2(a)
and 2(c). Next, to choose the best representative ones from them, we use the following
step to filter these redundant candidates.
8Note that in Figure 3, we indicated the area with repeated high curvature bumps on
Armadilo’s lower leg area with a red circle. Our algorithm does not detect these bumps
as candidates, since vertices v illustrated as green points have larger v
n . If our watershed
method uses curvature information like [10] instead of v
n , many bumps are potentially
detected. Our goal is to detect the candidates that should be located on tips of protrusive
component of a given model. Therefore, these repeated high curvature bumps are not
necessary.
2.2 Building and Refining Protrusive Reeb Graph
The process to build a Reeb graph such as Figure 1(c) for a given model is described as
follows. Initially, a single node graph is built and, thereafter, the object is recursively re-
partitioned into regions based on the function v
n . For simplicity, the repartitioning is
done in a binary manner, i.e., v
n is evenly divided into two ranges. As shown in Figure
4, a node R of a Reeb graph will be recursively repartitioned, if any of the following two
criteria is met: 1) a leaf-node R contains more than one protrusive point (e.g. Figure 4(a))
found in Section 2.1 or 2) a non-leaf node R contains any protrusive point (e.g. Figure
4(b)). Guided by these two criteria, each leaf node R of a PRG contains a single
protrusive point at most and thereafter, a leaf node R with a protrusive point represents a
protrusive component of a given model.
10
Without losing generality, let us consider an example in Figure 6(a) where two protrusive
points EP1 and EP2, i.e, two tips (e.g. two shapes), in two white regions, the orange
region is a branch node Nbr, the green regions are two disjointed nodes, denoted as NEx1
and NEx2, that contact a branch node Nbr. Both NEx1 and NEx2 are considered as Nbr’ 
adjacent outer extensions to protrusive points EP1 and EP2, respectively. Similarly, the
purple region denoted as Nint is Nbr’ adjacent internal extension to the central part of a 
given model. Let Vbr be a vertex set contained in Nbr and we want to find a brVv such that
equation (4) has a minimum value.
    brVvvEPdistgeovEPdistgeo  2221 ,_,_ (4),
where distgeo _ returns the geodesic distance between two vertices.
Let VB be the vertex to have a minimum of equation (4). Next, if
    BVEPdistgeovEPdistgeo ,_,_ 11  is true brVv , then a vertex v is removed from Vbr and v
will be re-assigned to the vertex set of a node NEx1. Using a similar testing formula, we
can also determine if a v will be re-assigned to the vertex set of NEx2 from Vbr, too.
Figures 6(a)-(b) illustrate the idea of the proposed refinement procedure. Once Nbr is
shrunk, we can have further refinement between Nbr and Nint as shown in Figures 6(c)-(d).
For this pupose, we compute the central points for both nodes Nbr and Nint, denoted as Cbr
and Cint. Finally, intVVv br , if    int,, CvdistCvdist br  , then a vertex v will be assigned to Vbr.
Otherwise, a vertex v will be assigned to Vint that is the vertex set of Nint.
12
graph by breadth-first-search strategy to assign labels to the remaining nodes as shown in
Figure 8. In this traversal, once a remaining node is visited, a label is incremented by one
and then this label is assigned to this node.
Once the user selects K nodes on the PRG via the specification of anchor points, i.e., K
colors are assigned to K different nodes in the PRG, we attempt to cut this model into K
or K+1components, i.e., one more color is used for the core component. If any anchor
point is selected on the core node, this extra color is omitted. Based on the label value, we
sort these K+1nodes in a decreasing order, denoted as KNNN 10 , . In the proposed
coloring algorithm, each node of the PRG is painted using a single color. Once a node is
painted, its color cannot be changed. We use the following pseudo code to paint each
node in the PRG.
 Step 1: Paint nodes KNNN 10 , using K+1 different colors, KCCC 10 , , respectively.
Note that KN is the core component.
 Step 2: Loop for each iN , starting from 0N to KN :
 Step 2.1: Paint iN ’s remaining children sub-graphs, i.e., traverse downwards the sub-
graph, using iC in a recursive manner until we find a node that was painted using
another color.
 Step 2.2: Paint iN ’s parent sub-graphs, i.e., traverse upwards the sub-graph, using iC
in a recursive manner until we find a node that was painted using another color or we
find a branch node, i.e., its degree 2 .
 Step 2.3: Repeat above 2.1 and 2.2 steps for the next iN
14
(d)
Figure 8. (a): each node is assigned a label and 0 is assigned to the core node in the PRG.
(b): the user specifies K colors to K nodes and an extra blue color is assigned to the core
node. (c): the coloring scheme determines colors for the remaining nodes. Note that there
exists a cutting border between two adjacent nodes with different colors in (c). In (d), the
user paints a green color on the leg regardless of its exact position. As a result, the whole
leg is painted by the green color.
4. Clustering and Cutting-Border Smoothing
4.1 Clustering
After the coloring scheme, we have assigned a color to each node of PRG. In accordance
with this information, the triangles contained in any node with the same color can be
grouped into the same partition for a given model. To obtain a better and stable partition
of model, we use an iterative clustering to refine our partition.
After coloring, let us assume that the number of colors used to paint a PRG is n, denoted
as nCCC ,, 21 . Therefore, we will have n sub-graphs in the PRG and each sub-graph iG is
16
In equation (7), we use equation (6) for ),( iPfDist . Our cost minimization is
implemented in an iterative loop below and in this iterative loop, jiP means new iP after j
th
iterations.
 Step1: Initially, each 0iP consists of faces included in iF .
 Step2: For each face f in the model, we compute niPfDist ji 2,1),,(  using equation
(6).
 Step3: For each face f, we cluster it into 1jiP with the minimum of ),( jiPfDist .
 Step4: If there is a face f that changes its cluster, i.e., 1 jiji PP , then 1jj and we
repeat Step 2 to Step 4 again.
After executing the above loop, as the partitioning becomes stable, no face will be re-
clustered. Before the partitioning becomes stable, since  jiPfAvgDist , is changing as
iterations are executed, a face f potentially changes the cluster it belongs to.
4.2 Cutting-Border Smoothing
Once we finish clustering computation, we have n subparts for a given model. To have a
smoother border between adjacent subparts, we can perform further refinement on these
borders. For this purpose, we use Katz et al’s [8] approach by first growing a fuzzy
region along a given border. Then, in accordance with [8], we formulate the problem of
finding the exact boundary between two sub-parts as a graph partitioning problem, i.e.,
solving a minimum cut flow problem. To solve this minimization problem, we need to
build a dual graph for faces included in a fuzzy region. The capacity of each edge E in
18
how the model will be decomposed by coloring the PRG nodes or selecting anchors on
the model. Finally, the clustering algorithm stabilizes the partitions and smoothing
optimization yields visually pleasing cutting-borders.
Figure 10: Decomposition of various models.
We implement the proposed algorithm on an Intel Pentium4, 2.4GHz PC with 1G RAM.
During the partitioning procedure, the first step, i.e., building a PRG, usually can be
preprocessed before the user’s interactive partitioning. At this step, some measurements
such as all paired geodesic and angular distance can be recorded for further usage in the
final step for clustering and smoothing. For each object, we can store its PRG and
distance information on the disk for later usage. Then, at run-time, we load related
information from the disk and interactively paint the PRG with colors which can be done
immediately. Before clustering and smoothing, the user can interactively change his/her
desired partition but the partitions and borders are not yet optimized. Once the user is
satisfied with partitions, the user can proceed to the final step, i.e. clustering and
smoothing that may take few seconds or few minutes. The computational cost of the final
20
decomposed into asymmetric decompositions as shown (c) and (d). In (c), we purposely
decompose the left leg into more subparts and in (d) we partition the left hand into more
subparts. Katz et al.’s approach [8] does not support asymmetric partitions and their
approach tends to cut models into symmetric partitions in a hierarchical manner. In
addition, we also show their corresponding colored PRGs in Figures 12(a)’-(d)’.
In addition, we mention a useful optional implementation for our algorithm. We
automatically build a PRG for a given model. However, if the user is not satisfied with
this PRG, our system allows the user to directly select any node of the PRG for further
decomposition into several nodes, i.e., increasing the detailed resolution of the PRG.
Once we perform this refinement of PRG, we need to maintain the correct parent-child
relationships among nodes in PRG. This option provides user more control about the
resolution of the PRG.
Figure 13. The proposed method can be extended to handle non-genus-0 models.
Finally, our algorithm currently can handle genus-0 mesh models well from experimental
results presented in this paper. Also, it is not very difficult to extend the current method
22
Let us assume that we have n compatible partitions, and we will create n pairs of
embeddings, denoted as ),(),(),,( 2211 nn TSTSTS  , where iS and iT represent source and target
embeddings. After feature-warping, for each vertex of Sit on source embedding, we can
find its correspondence on the target embedding. Using the same connectivity of the
source model and these correspondences on the target model, we can get a approximated
model of the target model called T . If we can not get a good approximation of the target
model in this simple manner, we can use remeshing technique for better approximation.
But, it is out of the scope (i.e. model decomposition) in this paper. Now, for morphing
application, we have two meshes, S and T . Both source and target meshes are the same
number of triangles with the same connectivity. In Figure 14, we use the cat model to
approximate the lion model in Figure 10. The approximated lion model is shown in
Figure 13. So, it is very easy to compute morphing sequence between them as follows.
Given a corresponding triangle pair Sit and Tit on the source and target models, we can
relate these two triangles with iSiiTi tMt  , where iM is an affine transformation and iis
a translation vector. The translation vector i does not change the shape of a triangle but
iM does. Furthermore, the affine transformation iM can be decomposed into a rotation
matrix iR and a scaling-shearing matrix iH [17], i.e., iii HRM  . In morphing sequence, we
can find an intermediate transformation )(aM i :
))1)((()()()( iiiii aHIaaRaHaRaM  (9)
24
for the user to freely decompose models into desired subparts. This algorithm can be
potentially useful in various applications. We also demonstrate its application in 3D
metamorphosis. Several interesting work can be continued in near future. First, the
algorithm is applied to a static model currently. How to combine information in an
animation sequence to decompose animated meshes is an interesting topic. Second, we do
not consider material features such as color and texture in our algorithm. It can be further
explored in future. Finally, several interesting applications can benefit from our algorithm
and they will be investigated soon such as cross-parameterization of multiple models, 3D
model retrieval and editing animation models.
References
[1] Thomas Funkhouser, Michael Kazhdan, Philip Shilane, Patrick Min, William Kiefer,
Ayellet Tal, Szymon Rusinkiewicz, David Dobkin. Modeling by Example, SIGGRAPH
2004, ACM Transactions on Graphics, Vol 23, No 3, August 2004, 652-663.
[2] P. V. Sander, Z. Wood, S. J. Gortler, J. Snyder, H. Hoppe. Multi-Chart Geometry
Images. In Proceedings of the Eurographics Symposium on Geometry Processing, pp.
146. 155, 2003.
[3] A. Gregory, A. State, M. Lin, D. Manocha, and M. Livingston,.Interactive Surface
Decomposition for Polyhedral Morphing,. The Visual Computer, vol. 15, pp. 453.470,
1999.
[4] S. Shlafman, A. Tal, and S. Katz. Metamorphosis of Polyhedral Surfaces using
Decomposition. Computer Graphics forum, vol. 21, no. 3. Proceedings Eurographics
2002.
26
[14] Lee, Y., Lee, S., Shamir, A., Cohen-Or, D., Seidel, H.-P. Intelligent Mesh Scissoring
Using 3D Snakes Proceedings of the 12th Pacific Conference on Computer Graphics and
Applications, pp. 279-287, 2004
[15] Hilaga, M., Shinagawa, Y., Kohmura, T., and Kunii, T. L. Topology Matching for
Fully Automatic Similarity Estimation of 3D Shapes. SIGGRAPH 2001, pp. 203–212.
[16] Edmonds J., R.M. Karp. Theoretical Improvements in Algorithmic Efficiency For
Network Flow Problems. Journal of ACM, Volume 19, Issue 2, p248-264, 1972.
[17] Marc Alexa, Daniel Cohen-Or, David Levin. As-rigid-as-possible Shape
Interpolation. SIGGRAPH 2000, pp 157-164.
[18] Robert W. Sumner, Jovan Popovic. Deformation Transfer for Triangle Meshes.
ACM Transactions on Graphics. 23, 3 (SIGGRAPH 2004).
[19] Hsueh-Yi Sean Lin, Hong-Yuan Mark Liao, and Ja-Chen Lin, Visual Salience-
Guided Mesh Decomposition, in Proc. IEEE Int. Workshop on Multimedia Signal
Processing, Siena, Italy, Sept. 29-Oct. 1, 2004.
計畫成果自評部份
This is our last year of a 3-year project (2003/08-2006/10). Overall, our research results
match the original planning. We have developed many morphing-related techniques and
also published many papers. We believe our results have advanced morphing techniques.
In the following, we list all related publication from this three-year projects.
28
可供推廣之研發成果資料表
□ 可申請專利 █ 可技術移轉 日期：95 年 10 月 30 日
國科會補助計畫
計畫名稱：2D/3D 物體形變、編輯技術與應用
計畫主持人：李 同 益
計畫編號： NSC 94－2213－E－006－005
學門領域： 電腦圖學
技術/創作名稱 3D Mesh Morphing Technique
發明人/創作人 李 同 益
中文：
1. 新切割方式
2. 模型新對映方式
3. 漸近式變形架構
4. 不同 pose 之變形技術
技術說明
英文：
1. New partition method
2. New Correspondence method
3. Progressive morphing framework
4. Morphing with different poses
(more technical details, please see our papers.)
可利用之產業
及
可開發之產品
Game and animation products
技術特點
1. easy to use
2. fast
3. progressive
Patch-based Synthesis for Non-frontal-parallel Textures (NFPT)
Chung-Ren Yan and Tong-Yee Lee*
Dept. of CSIE
National Cheng-Kung University, Taiwan
tonylee@mail.ncku.edu.tw
Chao-Hung Lin
Dept. of Geomatics
National Cheng Kung University, Taiwan
linhung@mail.ncku.edu.tw
Abstract
In this paper, we propose a new patch-based texture
synthesis method. The proposed method consists of two
main components: a feature-weighted similarity and a
pixel-based re-synthesis step. Most existing patch-
based methods can only handle for frontal-parallel
textures (FPT) and generate poorly synthesized results
for non-frontal-parallel textures (NFPT). To better
synthesize NFPT, we enhance the proposed method
with a view warping technique. As a result, the
proposed method can handle well for FPT and NFPT.
1. Introduction
Texture synthesis is a popular research topic in
computer graphics. The kernel of the previous works is
structural similarity matching. Generally, there are two
classes of methods: pixel-based [1, 2, 6, 7, 8] and
patch-based [3, 4, 5, 9, 10, 11] methods, respectively.
Pixel-based algorithms synthesize only one pixel at a
time. Efros et al.[2] synthesize a new pixel by searching
the sample image and finding the pixel that has the
most similar neighborhood. This algorithm works fine
if a larger neighborhood size is chosen to measure
similarity. Therefore, it is very slow. Wei et al. [7]
utilize a pyramid synthesis and a tree-structured vector
quantization method to accelerate [2]. Later, Ashikhmin
[1] extends [7] by reducing the searching space of the
input image to several candidates. Hertmann [6]
presents a method to learn painting styles, based on [7].
Zelinka et al. [8] create a novel jump map, which stores
a set of matching input pixels (jumps) for each input
pixels. It allows their algorithm to synthesize texture in
real time.
In contrast to pixel-based methods, patch-based
methods synthesize a patch at a time. Xu et al. [3]
synthesize new textures by random patch pasting. The
* Corresponding author.
problem with random patch pasting algorithm is that
the discontinuity and artifacts at the overlapped region
of the adjacent patches. Efros et al. [4] present a
minimum-error-boundary-cut within the overlapped
regions to reduce the discontinuity and artifacts. Liang
et al. [5] apply feathering technique on the overlapped
regions and accelerate the search by a quad-tree
pyramid data structure. In contrast to most patch-based
methods, Nealen et al. [10] adaptively splits patches to
suitable sizes while satisfying user specified error for
the mismatching in the overlapped regions. A pixel-
based re-synthesis is then applied to the mismatched
pixels in overlapped regions. To reduce the problem of
broken features at the boundary of two adjacent patches,
Wu et al. [9] propose a feature map to guide texture
synthesis. For objects with regular or near-regular
textures (NRT), Liu el al. [11] use a deformation
technique to regularize an input NRT into a RT, then
perform synthesis on this RT and finally utilize
deformation information to convert this synthesized RT
to the original near-regular structure.
In this paper, we propose a patch-based texture
synthesis method. This method consists of two main
components: 1) a feature-weighted similarity measure
to search for the best match and 2) a pixel-based re-
synthesis is used to reduce discontinuity at the
boundary of adjacent patches. Liang et al [5] mention
that most patch-based algorithms can not handle non-
frontal-parallel sample textures that are usually
obtained by camera lens with non-vertical camera axis.
In this paper, we solve this problem using a view-
warping technique [12]. Therefore, the proposed
method still works well for synthesizing non-frontal-
parallel input textures. The rest of the paper is
organized as follows. In Section 2, we present the
proposed patch-based method. In Section 3, we
introduce our handling for non-frontal-parallel textures.
The texture synthesized results for non-frontal-parallel
textures are demonstrated in Section 4. Finally,
using a well-known view warping technique [12] depicted in Figure 2. In Figure 2, there
I0 I1
Pre-warping
I0' I1'
Warp I0' to I1'
Post-warping
(a) (b)
Figure 2. Warping system for non-frontal-parallel texture (NFPT) synthesis. (a): create a rectified
FPT for a given NFPT and texture synthesis, (b): generate a different view of the synthesized
texture.
are two major parts: 1) to generate a rectified FPT for a
given NFPT and texture synthesis in Figure 2(a), and 2)
to create a different view of texture synthesis in Figure
2(b), i.e., create another NFPT. The steps are described
as follows. First, the input NFPT, I0 will be
transformed into a FPT, I1. At this stage, the user must
specify a set of corresponding feature lines on I0 and a
blank image I1. We compute the intersections of these
feature lines as feature points, i.e., 8 or more
corresponding points are required on both I0 and I1.
Then, the fundamental matrix of two views can be
determined for pre-warping I0 and I1 into two parallel
views, I0’and I1’[12]. This pre-warping also changes
positions of corresponding points. Remember I1’is a
still empty image at this moment. But, we have
corresponding points on I0’and I1’. Next, with these
corresponding points and I0’, we use [13] to generate
an I0’. Thereafter, we proceed a post-warp, i.e., inverse
of pre-warp, to warp I1’to the original view of I1. This
warped image called Ir can be treated as a rectified
image of I0. Consequently, we use Ir as an input sample
for texture synthesis described in Section 2 and obtain
a new output texture Is. Finally, to generate different
views of Is, we apply the similar scenario to warp Is to
the desired view in Figure 2(b). The texture synthesis
for Non-frontal-parallel Textures (NFPT) is finished.
4. Experiment Results
In this section, we show our synthesized results for
handling NFPT in Figure 3-6. These results
demonstrate that our method does very well for NFPT.
In addition, we also show a failure example of handling
NFPT using our patch-based method without view-
warping in Figure 3(b) an 4(b). This shows the need of
view-warping for handling NFPT. Most existing
methods will generate similar failure results without
considering perspective effect on sample textures.
5. Conclusion and Future Work
In this paper, we introduce a patch-based method
with a view-warping to handle both frontal-parallel and
non-frontal-parallel textures. A comparison between
our method and other existing algorithms is
demonstrated to verify the proposed method. In near
future, we plan to research acceleration method to
speed up our texture synthesis. Other extension for
synthesizing texture on 3D surface or better/fast
method for handling NFPT will be investigated soon.
In addition, we would like to apply our technique to
synthesize texture for the expression change of head
animation [15] or for 3D morphing applications [16].
6. Acknowledgements
This project is supported by National Science
Council, Taiwan, R.O.C under contract No. 94-2213-E-
006-063 and 94-2213-E-006-005.
Transformations", IEEE Transactions on Visualization and
Computer Graphics, Vol. 11, No.1, Jan-Feb. 2005, pp. 2-12.
7ICICIC 2006年會
一、目的
ICICIC (International Conference on Innovative Computing, Information
and Control) 是由屬 ICICIC Society 與 IEEE 所主辦的大型國際研討
會。參加本次會議目的主要是: 1)發表論文與 2)擔任本次大會
International Technical Program Committee。本次大會投稿非常
踴躍共約 1400 篇只錄取約 400 篇文章。
二、過程
本次會議從 2006/8/30 至 2006/9/01，本次大會，會場是座落在中國
大陸北京市交通大學。本人(計畫主持人)從 2005/8/28 高雄小港機
場搭華航航空飛機並在香港轉機與會，本人並於 2006/9/02 回國。此
次會議，有來自大陸，臺，港，澳，日本，韓國，澳洲，新加坡等超
過 1 千人來參加。本人並利用大會開始前一天(8/31)時間參觀鄰近北
大與 故宮。
三、具體完成之工作與心得
本次會議從 8/30 至 9/01，議程十分緊湊，包括 53 場 technical
paper sections 與 3 場精彩 Keynote speeches 與中正大學張真誠教
