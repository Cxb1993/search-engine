2 
 
摘要 
編譯器的任務之一是將原始程式轉換為能夠發揮硬體功能的執行檔。對於一般個人電腦或伺服器，
編譯器的最佳化目標不外乎是空間、時間的最佳化。然而在嵌入式應用中，各裝置的硬體配置都是任
務導向的設計，彼此之間架構的差異極大。例如記憶體架構的差異是嵌入式系統中最明顯、影響很大
的一環。我們的研究認為編譯器應該要扮演更積極的角色，針對不同的記憶體架構提供目標不同的最
佳化能力。 
嵌入式系統程式開發者在開發程式時，往往需要依照硬體特殊的記憶體架構來分配程式可以使用
的記憶體空間，尤以開發大型的程式時，分配記憶體對程式設計師來說會是一件複雜且單調乏味的工
作，若能將之交由一套可以自動化分配記憶體空間的程式，對開發者來說，藉由減輕考慮程式的記憶
體分配，可以縮短開發時程。 
本研究藉由修改開源碼的 gcc 及 binutil，實作一個可以自動分配記憶體空間的系統，這套系統將
以函式為單位來做空間分配，搭配一個輔助的流程架構，可以幫助程式設計師在撰寫好程式之後，不
須花費額外心力去設定程式的空間分配。另外，我們使用的是 GNU開源軟體，可以應用在多數的嵌入
式系統程式開發上。 
最後經由實驗，我們可以看到，程式碼的確能依照程式的行為而被配置到合適的記憶體空間，也
證實了我們提出的方法的可行性。 
 
關鍵詞：編譯器、最佳化、嵌入式系統、程式碼排列、記憶體最佳化、開放原始碼軟體 
Abstract 
When developing a program on an embedded system, programmers often need to allocate memory 
manually for each segment of codes because of the special hardware architecture. Especially for a large-scale 
program, it is really a complicated and tedious work. If there is a tool that can help programmers easily adapt 
codes to different memory blocks, by alleviating programmers’ consideration of program memory distribution, 
it will save a lot of time for development schedule. 
In this project, we will implement an automated memory allocating system which allocates memory 
spaces based on functions. By using this system and following a framework we proposed, programmer can 
write codes with no considering of space allotment and then have the codes mapping to appropriate memory 
blocks. On the other hand, our system is constructed on the use of GNU open source software; it can be 
applied to developments on many kinds of embedded system. 
Finally we can see that program codes are arranged on appropriate memory blocks by examining address 
of each memory access, which indirectly verifies the feasibility of the method we propose. 
 
keyword：compiler, optimization, embedded system, source code arrange, memory optimization, open source 
software 
 
 
4 
 
 
 
 
 
我們的架構運作流程是先將原始程式分別交由主機平台(HOST GCC’)與目標平台(TARGET GCC)
編譯器編譯，產生出雙平台的執行檔，主機平台的執行檔(HOST EXE)是用來做程式側寫，雖然在主機
平台上做程式側寫不代表會與目標平台的程式側寫百分之百相同，但我們的焦點主要在各函式的執行
率上，即使平台不同，理論上，函式的叫用是可以參考的。又由 gprof的側寫主要是要提供函式的執行
過程資訊，使用者若需要實際目標平台的側寫資料，事實上，除了 GCC_LAYOUT與 HOST GCC’是必
須固定的部分，其餘部分包含側寫資料，都是可以彈性抽換的，這樣的架構有利於我們在不同平台的
程式開發上都能保有相同的運作流程。 
圖 3-1 system framework overview 
6 
 
 
圖 3-3 system framework pass1 
8 
 
 
除了上面提到的必要檔案，另須由使用者提供兩份檔案，如圖 3-6，第一份是連結器命令稿，它可
以是預設的連結器命令稿，也可以是使用者另行撰寫的版本，但我們建議使用預設的版本即可。 
圖 3-7顯示了GCC_LAYOUT的功能就是修改原始碼與連結器命令稿，並且由三個子系統所組成，
分別是Memory Allotment(MA), Source Code Modification (SCM), Ld Script Modification (LSM)。MA主
要工作就是對各函式做記憶體的分配；SCM則是依據MA的執行結果到原始程式碼中，對各函式新增
節區屬性設定的原型宣告；LSM則負責修改輸入的連結器命令稿，使該命令稿新增將特定節區置放到
指定記憶體區域的命令。GCC_LAYOUT運作流程是先由MA讀取前面所提及的函式相關檔案與資料，
然後進行記憶體的分配演算法，再對所有的函式分配給適合的記憶體，之後一邊交由 LSM修改連結器
命令稿使其具指派節區到記憶體區域的功能；另一邊交由 SCM去修改程式原始碼，讓程式在編譯過後
能將函式都指派給各種記憶體專屬的節區。 
我們採用GNU debugger (GDB)以及GDB Remote Protocol來進行遠端除錯，在遠端除錯的過程中，
我們可以抓出 program counter(PC)的值來得到目前正在存取的記憶體位址。最後我們統計所有的記憶
體存取，比較原始執行檔(TARGET EXE)與使用我們的系統所編譯出來的執行檔(TARGET EXE’’)，兩
者的記憶體存取分佈，透過一些簡單的公式計算，來評量執行效率是否有改善。 
 
圖 3-7 three subsystem of GCC_LAYOUT 
src’ 
extended 
target 
ld script 
GCC_LAYOUT 
LdScriptModification SourceCodeModification 
MemoryAllotment 
src 
default 
target 
ld script 
other 
files 
other 
files 
other 
files 
function 
location 
file 
text 
section 
file 
default 
target 
ld script GCC_LAYOUT 
LdScriptModification 
memory 
description 
file 
extended 
target 
ld script 
圖 3-6 two input files provide by user 
國科會補助計畫衍生研發成果推廣資料表
日期:2010/12/30
國科會補助計畫
計畫名稱: 利用GCC的程式模組配置工具
計畫主持人: 陳俊良
計畫編號: 98-2220-E-002-022- 學門領域: 自由軟體暨嵌入式系統
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
