1前言：
許多高效能計算的應用程式主要是由一些計算單元所組成，為了使程式的執行更有
效率，在某一個計算單元的陣列資料分配(array distribution)，可能需要與下一個計算單
元的陣列資料分配不同。如此就導致了在計算單元間的陣列資料的重分配 (data
redistribution)。陣列資料的重分配可以分為訊息傳送與訊接收兩部面。在訊息傳送方面，
一個機器節點必須要決定它的那些陣列資料要送到那些其它機器節點 (目的節點)，將這
些要送出的資料包裹成不同的訊息，以及將這些訊息傳送出去。在訊息接收方面，一個
機器節點必須要決定從那些機器節點(來源節點)接收它所需要的陣列資料，將傳送給它
的訊息解包裹，以及將訊息內的資料放置到正確的記憶體位置上。基本上，陣列資料的
重分配可以用非同步(asynchronous)傳輸模式或同步(synchronous)傳輸模式來進行。施行
陣列資料的重分配需要付上資料索引計算、訊息包裹解包裹、訊息傳送等代價。如果資
料重分配是以同步傳輸模式來完成的話，則還需要付上建構訊息傳送排程
(communication scheduling)的額外負擔。
研究目的：
在進行陣列資料重分配時，一個目的節點會由多個來源節點接收資料(一個來源節
點會傳送資料給多個目的節點)，若以非同步傳輸模式施行重分配，因其資料索引計算
與資料傳送方式的特性，各來源節點在傳送資料給目的節點時，可能會有同時要傳送
給同一目的節點的情況，此情況就是所謂的節點競爭(node contention)情況。節點競爭
的情況會造成資料傳輸的延遲，而導致較高的資料傳輸代價。以同步傳輸模式施行陣
列資料重分配時，各來源節點(目的節點)會對其內的資料進行傳送(接收)的排程，以避
免節點競爭的情況發生。目前已有的文獻中，並沒有此二種傳輸模式重分配訊息傳輸
代價的分析比較。在這個研究中，我們透過實作來比較此二種傳輸模式重分配訊息傳
輸的代價。另一方面，以同步傳輸模式施行陣列資料重分配時，各節點所建構的訊息
傳送排程，應該要使得在同一傳送步驟的各訊息具有相同的長度(這樣的排程即最佳訊
息傳送排程)，因為同一傳送步驟的訊息傳送代價，是以較長訊息的傳送代價為主。目
前已有的訊息傳送排程方法中，有的方法無法使在同一傳送步驟的各訊息具有相同的
長度，有的方法需要較多的傳輸步驟，或在某些情況下不適用。在這個研究中，我們
提出了節點對應方式的訊息傳送排程方法，以改善目前訊息傳送排程的缺點。
文獻探討：
如上所述，施行陣列資料重分配需要付上資料索引計算、訊息包裹解包裹、訊息傳
輸，或訊息傳輸排程等代價。因為陣列資料重分配是在程式執行期間進行的，所以開發
高效率的陣列資料重分配方法，對於資料平行程式語言的編譯器來說是很重要的。目前
已有許多陣列資料重分配的方法被提出。[1-7]等主要是對不同的陣列資料重分配提出了
有效率的資料索引計算方法，在使用這些方法計算出節點資料要傳送到何處或從何處來
接收後，基本上是以非同步傳輸模式來施行重分配。[8-12]等主要是對不同的陣列資料
重分配提出了有效率的訊息傳輸排程方法。[13-19]等主要是對不同的陣列資料重分配提
出了可以減少訊息傳輸代價的方法，這些方法基本上是要減少被重分配的陣列資料。
在具有 m 個機器節點的分散式記憶體電腦系統上，對一個一維陣列施行
Block-Cyclic(r) to Block-Cyclic(kr) 的資料重分配，目前已有的訊息傳送排程方法中，有
的方法能夠避免節點競爭的情況，但無法使在同一傳送步驟的各訊息具有相同的長度，
如在[9]中所提的方法，在[1]中所提出的訊息傳送排程方法也有相同的情況；有的方法
雖然也可以使在同一傳送步驟的各訊息具有相同的長度，但需要較多的傳送步驟，如在
[12]中所提的方法；有的方法則是在某些情況不適用,如[8,10,11]中所提的方法在重分配
3r5r (k=5) 的資料重分配。在此例子中 k<m，此重分配是一個 non-all-to-all 的重分
配。以下列出可能會發生節點競爭的情況，如(圖一)所示：
在第一個傳送步驟中(傳送資料區塊 0 的資料)，來源節點 P0、P1、P2、P3 及 P4 可
能會有節點競爭的情況，它們都要傳送到目的節點 P0。來源節點 P5 及 P6 也可能會
有節點競爭的情況，它們都要傳送到目的節點 P1。
在第二個傳送步驟中(傳送資料區塊 1 的資料)，來源節點 P0、P1 及 P2 可能會有節
點競爭的情況。來源節點 P3、P4、P5 及 P6 也可能會有節點競爭的情況。
在第三個傳送步驟中(傳送資料區塊 2 的資料)，來源節點 P1、P2、P3、P 4 及 P5 可
能會有節點競爭的情況。
在第四個傳送步驟中(傳送資料區塊 3 的資料)，來源節點 P0、P1、P2 及 P3 可能會有
節點競爭的情況。來源節點 P4、P5 及 P6 可能會有節點競爭的情況。
在第五個傳送步驟中(傳送資料區塊 4 的資料)，來源節點 P0 及 P1 可能會有節點競爭
的情況。來源節點 P2、P3、P4、P5 及 P6 可能會有節點競爭的情況。
(a) (b)
(圖一)在 7 個節點上以非同步模式執行 r5r 的資料重分配可能發生節點競爭的情況
理論上各節點在傳送資料區塊 0 的資料時，發生節點競爭的機率最高。對於其後的
資料區塊而言，有可能會因為各節點要成功傳送出資料區塊 0 所需的時間不同，導致各
節點傳送這些資料區塊的時間點有差異，而使得發生節點競爭的機率降低或不再發生。
又如：在具有 5 個節點的分散式記憶體電腦系統上 (m=5)，對一個一維陣列以非
同步模式執行 r7r (k=7) 的資料重分配。在此例子中 k>m，此重分配是一個 all-to-all
的重分配。
(a) (b)
(圖二)在 5 個節點上以非同步模式執行 r7r 的資料重分配可能發生節點競爭的情況
如(圖二)所示，在此例子中每一個傳送步驟各節點所傳送的訊息長度不一。與前例
相同的，各節點在傳送資料區塊 0 的資料時，發生節點競爭的機率最高。對於其後的資
料區塊而言，可能會因為各節點在傳送這些資料區塊的時間點有交錯的情形，而仍然會
有節點競爭的情況發生。
Source Distribution : Block-Cyclic(r)
lcc1
block index
ppid
0 1 2 3 4
0 0 7 14 21 28
1 1 8 15 22 29
2 2 9 16 23 30
3 3 10 17 24 31
4 4 11 18 25 32
5 5 12 19 26 33
6 6 13 20 27 34
Destination Distribution: Block-Cyclic(5r)
lcc1
block index
ppid
0 1 2 3 4
0 0 1 2 3 4
1 5 6 7 8 9
2 10 11 12 13 14
3 15 16 17 18 19
4 20 21 22 23 24
5 25 26 27 28 29
6 30 31 32 33 34
Source Distribution : Block-Cyclic(r)
lcc1
block index
ppid
0 1 2 3 4 5 6
0 0 5 10 15 20 25 30
1 1 6 11 16 21 26 31
2 2 7 12 17 22 27 32
3 3 8 13 18 23 28 33
4 4 9 14 19 24 29 34
Destination Distribution: Block-Cyclic (7r)
lcc1
block index
ppid
0 1 2 3 4 5 6
0 0 1 2 3 4 5 6
1 7 8 9 10 11 12 13
2 14 15 16 17 18 19 20
3 21 22 23 24 25 26 27
4 28 29 30 31 32 33 34
5同一群組的 g 個節點與連續 g 個相異值的結合，是以每一目的節點的節點順序為依
據。也就是說，ppid 為 j (0jm/g-1)的目的節點對應到 ppid 為 i 的來源節點，ppid 為
j+m/g 的目的節點對應到 ppid 為 i+1 的來源節點，ppid 為 j+2m/g 的目的節點對應到
ppid 為 i+2 的來源節點 ，ppid 為 j+(g-1)m/g 的目的節點對應到 ppid 為 i+(g-1)
的來源節點。因此，在 gcd(k,m)1 的情況下，來源節點與目的節點間的對應關係可
以下面 (Eq2) 的函式表示：
i=f(j)= mod(jk,m)+j/(m/g) (Eq2)
例如，在 6 個節點上對一個一維陣列施行 r9r 的資料重分配。在此例中，k=9，
m=6，g=gcd(k,m)=3。在資料重分配時，如果使用 (Eq1) 作為節點對應，那麼目的節
點 P0，P2 和 P4 會對應到來源節點 P0，目的節點 P1，P3 和 P5 會對應到來源節點
P3。然而使用 (Eq2) 作為節點對應的話，目的節點 P0，P2 和 P4 會分別對應到來源
節點 P0，P1 和 P2，目的節點 P1，P3 和 P5 會分別對應到來源節點 P3，P4 和 P5。
而每一節點第一個訊息的長度為二個資料區塊，如(圖四)所示。
(a) (b)
(圖四)使用(Eq2)的對應關係在6個節點上以同步模式執行 r9r的資料重分配第一個訊
息的傳輸情形
在 m 個節點上以同步訊息傳輸模式施行 rkr 的資料重分配時，每一節點我們依
據(Eq1)或(Eq2)的對應關係來傳輸它的第一個訊息，那麼在第一個傳輸步驟中的所有訊
息，分別是被不同的來源節點所傳送，並由不同的目的節點所接收，因為(Eq1)及(Eq2)
在 gcd(k,m)=1 與 gcd(k,m)1 的情況下是一對一的對應。對於所要施行的資料重分配，我
們的訊息傳送排程方法是將來源節點的每一個 lcc 資料片段的資料元素，看作是一個環
圈 (ring)，並且每一來源節點以上面的對應函數作為它傳送訊息的依據。
(1) 在 m 個節點上施行 rkr 的資料重分配時，若 gcd(k,m)=1 且 (Eq1) 被用作節點的
對應，在把來源節點的每一個 lcc 資料片段的資料元素看作是一個環圈的情況下，
安排每一個來源節點 Pi (0im-1) 的每一個 lcc 資料片段，從資料區塊 jk/m開
始傳送第一個訊息，並延沿著環圈傳送其它訊息，這樣的訊息傳輸排程是一個最佳
化的訊息傳輸排程。
如(圖五)所示，將上述的訊息傳輸排程方法應用於(圖三)中的資料重分配時，在每一
個傳輸步驟中，每一來源節點被安排傳送相同長度的訊息給不同的目的節點。例如：
在第一、第二、第三及第四個訊息傳輸步驟中，每一個來源節點分別傳送二個資料
區塊的訊息給不同的目的節點；而在第五個傳輸步驟中，每一個來源節點分別傳送
一個資料區塊的訊息給不同的目的節點。所以上述的訊息傳輸排程是一個最佳化的
訊息傳輸排程。
Source Distribution:Block-Cyclic(r)
lcc1
block index
ppid
0 1 2 3 4 5 6 7 8
0 0 6 12 18 24 30 36 42 48
1 1 7 13 19 25 31 37 43 49
2 2 8 14 20 26 32 38 44 50
3 3 9 15 21 27 33 39 45 51
4 4 10 16 22 28 34 40 46 52
5 5 11 17 23 29 35 41 47 53
Destination Distribution:Block-Cyclic(9r)
lcc1
block index
ppid
0 1 2 3 4 5 6 7 8
0 0 1 2 3 4 5 6 7 8
1 9 10 11 12 13 14 15 16 17
2 18 19 20 21 22 23 24 25 26
3 27 28 29 30 31 32 33 34 35
4 36 37 38 39 40 41 42 43 44
5 45 46 47 48 49 50 51 52 53
7節點數(m)=9，重分配因子(k)=6，資料片段(lcc)數=1
r=5000 r=25000 r=50000 r=60000 r=75000 r=90000
非同步 9.3 58.5 122.3 158.2 239.3 284.5
同步 12.9 65.7 132.7 160.3 186.7 220.4
(表一) 以同步及非同步模式在 9 個節點上施行 r6r資料重分配的訊息傳輸時間之比
較
由(表一)我們可以看出，在 non-all-to-all 重分配中，當所傳輸的訊息長度不大(資料
區塊長度較小時)，而網路頻寬又充足時，非同步模式的節點競爭並不所會導致明顯
的傳輸時間延遲。但是當所傳輸的訊息長度較大時，非同步模式的節點競爭所導致
的傳輸時間延遲就很明顯了。
b. all-to-all 重分配
在此實作中，對於同步傳輸模式，我們使用的是[1]的訊息傳輸排程方法。對於
all-to-all 的重分配，此法需要 m 個傳輸步驟。
節點數(m)=9，重分配因子(k)=30，資料片段(lcc)數=1
r=1000 r=5000 r=10000 r=15000 r=20000 r=25000
非同步 26.9 118.2 251.5 362.5 490.4 635.8
同步 33.6 121.2 240.6 326.4 382.6 481.2
(表二) 以同步及非同步模式在 9 個節點上施行 r30r 資料重分配的訊息傳輸時間之
比較
由(表二)我們可以看出，在 all-to-all 重分配中，雖然每個節點所要傳輸的資料量與
non-all-to-all 的重分配一樣，但因為要啟動傳輸的步驟數較多，所以整體的傳輸時
間較大。另外如我們前面的分析，因為 all-to-all 重分配發生節點競爭的機率比
non-all-to-all 的重分配高，所以即使所傳輸的訊息長度不大(資料區塊長度較小時)，
非同步模式的節點競爭也會導致很明顯的傳輸時間延遲。
2.比較我們的訊息傳輸排程方法與現有訊息傳輸排程方法同的資料重分配傳輸代價。
因為在 non-all-to-all 重分配中，我們訊息傳輸排程方法與[12]的訊息傳輸排程方法雷
同，所以我們只針對 all-to-all 的重分配進行比較。
節點數(m)=9，重分配因子(k)=30，資料片段(lcc)數=1
r=1000 r=5000 r=10000 r=15000 r=20000 r=25000
同步 28.8 102.6 192.2 293.7 351.8 414.7
(表三)使用我們的節點對應訊息傳輸排程方法於 9 個節點上施行 r30r資料重分配的
訊息傳輸時間
傳輸時間
(ms)
資料區塊
大小
傳輸模式
傳輸時間
(ms)
資料區塊
大小
傳輸模式
傳輸時間
(ms)
資料區塊
大小
傳輸模式
9Redistribution: Modeling and Evaluation. In Proceedings of International Parallel
Processing Symposium, pp. 441-445, April 1995.
18. A. Wakatani and M. Wolfe. Optimization of Array Redistribution for Distributed Memory
Multicomputers. Parallel Computing, Vol. 21, No. 9, pp. 1485-1490, 1995.
19. Michel Dion and Yves Robert. Mapping Affine Loop Nests: New Results. Parallel
Computing, Vol. 22, No. 10, pp. 1373-1397, December 1996.
20. The Message Passing Interface (MPI) standard, http//www-unix.mcs.anl.gov/mpi.
計畫成果自評：
我們的研究按原計畫內容完成了非同步與同步傳輸模式訊息傳輸代價的分析與實
作比較，也提出出一個可用於不同情況的最佳的訊息傳輸排程的方法，此訊息傳輸排程
方法是我們已發表期刊論文(如下所示)的延伸應用。我們的研究結果可再強化資料重分
配的不同應用，已期能在相關會議或期刊上發表。
J.-W. Huang, and C.-P. Chu. An Efficient Communication Scheduling Method for the
Processor Mapping Technique Applied Data Redistribution. The Journal of
Supercomputing, Vol. 37, No. 3, pp. 297-318, September 2006.
2第二屆創新計算資訊控制國際會議(ICICIC 2007)報告
朱治平
成功大學資訊工程學系
(一) 參加會議經過
第二屆創新計算資訊控制國際會議於九月四日至九月八日於日本熊本
舉行，此會議今年是由日本九州東海大學及台灣高雄應用科技大學共
同舉辦，是每年舉辦一次之國際研討會。會議討論之主題包括：
Innovative Computing and Information
- Signal and Image Processing
- Speech and Audio Processing
- Image and Video Coding and Transmission
- Video Processing and Analysis
- Image Video Storage
- Retrieval and Multimedia
- Digital Watermarking and DRM
- Artificial Intelligence
- Computing and Intelligent Systems
- Machine Learning
- Biometric and Biomedical Applications
- Sensor and Neural Networks
- Knowledge Discovery and Data Mining
- Others
Intelligent System and Control
- Fuzzy Mathematics and Applications
- Fuzzy Systems Modeling and Analysis
- Knowledge-based Systems
- Hybrid Systems Modeling and Design
