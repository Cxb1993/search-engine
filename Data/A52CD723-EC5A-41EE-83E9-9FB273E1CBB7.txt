2環境認知查詢技術之設計與製作(3/3)
Design and Implementation of Context-Aware Query Processing Tech-
niques
計畫編號：NSC95-2221-E-110-101
執行期限： 95 年 8 月 1 日至 96 年 7 月 31 日
主持人：張玉盈 中山大學資訊工程學系
E-mail: changyi@cse.nsysu.edu.tw
Fax: 07-5254301
(關鍵詞：索引，資訊過濾，個人化，使用
者設定檔，網頁挖掘)
在這個三年的計劃裡，第一年我們提
出以布林表示式為基礎的最近鄰居找尋。
第二年我們針對個人背景做資料分群。第
三年，為了支援個人化查詢，我們必須考
慮使用者設定檔的資訊過濾技術。資訊過
濾可用來在一堆資料中，過濾出有用的資
料。首先，使用者先描述他們需要的是什
麼，這叫做使用者設定檔（profile）。將這
些檔案建立出一個索引，一堆網頁將會和
這個索引作比對。經由網頁和使用者設定
檔的比對，使用者有興趣的網頁就可以被
找出來，並且可以主動通知給使用者。為
了有效減少 Yan 和 Garcia-Molina 的方
法所花的大量空間，我們將每一個關鍵字
的次數考慮進來。並且，我們提出三個以
大項目集為基礎的方法。我們採用 Apriori
演算法的概念，來降低空間的花費。但是，
我們修改了在 Apriori 演算法中，定義最
小贊成值的方式和最後的結果。因為在
Apriori 演算法中，最小贊成值是固定不變
的。但在我們的方法中，最小贊成值是動
態決定的。而且，我們不一定會選擇最大
長度的大項目集。另外，為了能夠減少 Wu
和 Chen 方法更新的花費，我們將每一個
關鍵字的權重考慮進來。每一個關鍵字會
根據不同的權重被區分為長期興趣或是短
期興趣。利用修改短期興趣的機會比修改
長期興趣的機會來的大很多這個特性，我
們可以局部地更新短期興趣，降低更新花
費。
(Key Words: index, information filtering,
personalization, profile, web usage mining)
In this project, in the first year, we propose a
new strategy with the bitwise operations to
do neighbor finding efficiently. In the
second year, we cluster user profiles. In the
third year, to support personalized queries,
we consider information filtering techniques
of profiles. Information Filtering can discri-
minate between relevant and irrelevant in-
formation. Users first give descriptions
about what they need, i.e., user profiles, to
start the services. A profile index is built on
these profiles. A series of incoming web
pages will be put into the matching process.
In this way, the users who are interested in
an incoming web page can be identified and
informed by comparing the descriptions of
the web page with each user profile. In order
to reduce the large storage space as needed
by the tree method proposed by Yan and
Garcia-Molina, we take the count of each
keyword into consideration. Moreover, we
propose three large-itemset-based methods.
We use the idea of Apriori algorithm to re-
duce the storage spaces. But, we modify the
minimum support and the goal in the Apriori
algorithm. That is, in the Apriori algorithm,
the minimum support is fixed. In our me-
thods, the minimum support is dynamically
decided. We may not always output the large
itemset Lk. We may only use Lw, where w <
k. Besides, we also take the weight of each
keyword into consideration to reduce the
update cost as needed by Wu and Chen' me-
thods. Each keyword can be distinguished
the long-term interest and short-term interest
according to the value of weight. By making
use of the property that short-term interests
have a higher probability to be changed than
long-term ones, we can locally update
short-term interests, resulting in the low up-
date cost.
4Apriori 演算法來得到大項目集，但是只有
這個關鍵字的權重大於某個門檻的時候，
才能成為候選的項目（candidate item）。圖
八顯示我們提出的 the large-itemset-based
approach to the incremental update。由圖九
看來，根據我們模擬的結果，我們的方法
確實可以減少 Wu 和 Chen 他們的方法
在更新上的花費。
四、結論與討論
在這個計劃中，為了提供個人化資訊
過濾服務，我們考慮如何建立一個索引可
以做有效率的比對。當一個使用者設定檔
的索引被建立之後，我們希望可以減少修
正使用者設定檔所需花的空間和時間。因
此，我們提出解決在 Yan 和 Gar-
cia-Molina 的方法中，花費大量空間的問
題。我們也解決了在 Wu 和 Chen 的方法
中，使用較少的更新花費。
五、參考文獻
[1] R. Agrawal and R. Srikant, “Fast Algorithms 
for Mining Association Rules in Large Data-
bases,” Proc. 20th Int. Conf. Very Large Data
Bases, pp. 490-501, Sept. 1994.
[2] E. Y. Chang, C. Li, H. Garcia-Molina and G.
Wiederhold, “Clustering for Approximate Si-
milarity Search in High-DimensionalSpaces,” 
IEEE Trans. on Knowledge and Data Eng.,
Vol. 14, No. 4, pp. 792-808, July 2002.
[3] Y. I. Chang, T. I. Chen and J. H. Shen, “A
Large-Itemset-Based Index Structure for
Supporting Personalized Information Filtering
on the Internet,”Journal of Systemics, Cyber-
netics and Informatics, Vol. 3, No. 1, pp.
13-18, 2006.
[4] Y. I. Chang, J. H. Shen and T. I. Chen, “A
Large-Itemset-Based Method for the Incre-
mental Update of Supporting Personalized
Information Filtering on the Internet,” Int.
Computer Symposium, pp. 943-948, 2006.
[5] M. S. Chen, J. S. Park and P. S. Yu, “Eficient 
Data Mining for Path Traversal Paterns,”
IEEE Trans. on Knowledge and Data Eng.,
Vol. 10, No. 2, pp. 209-221, March 1998.
[6] E. J. Glover, S. Lawrence, M. D. Gordon, W.
P. Birmingham and C. L. Giles, “Web Search 
-- Your Way,” Communications of the ACM,
Vol. 44, No. 12, pp. 97-102, 2001.
[7] M. Hammami, Y. Chahir, and L. Chen,
“Webguard: A Web Filtering Engine Combin-
ing Textual, Structural, and Visual Con-
tent-Based Analysis,”IEEE Trans. on Know-
ledge and Data Eng., Vol. 18, No. 2, pp.
272-284, Feb. 2006.
[8] D. H. Widyantoro, T. R. Ioerger and J. Yen,
“An Adaptive Algorithm for Learning
Changes in User Interests,” Proc. of the 8th
Int. Conf. on Information and Knowledge
Management, pp. 405-412, 1999.
[9] Y. H. Wu and A. L. P.Chen, “Index Structures 
of User Profiles for Efficient Web Page Fil-
tering Services,”Proc. of the 20th Int. Conf.
on Distributed Computing Systems,
pp.644-653, 2000.
[10] T. W. Yan and H. Garcia-Molina, “Index 
Structures for Information Filtering Under the
Vector Space Model,” Proc. of Int. Conf. on
Data Eng., pp. 337-347, 1994.
[11] T. W. Yan and H. Garcia-Molina, “Index 
Structures for Selective Dissemination of In-
formation Under the Boolean Model,'' ACM
Trans. on Database Systems, Vol. 19, No. 2,
pp. 322-364, Nov. 1994.
六、圖表
圖一、資訊過濾服務
profile index
user A
user B
user C
user
profiles
matching
process
filtered
result
incomimg web
pages
6可供推廣之研發成果資料表
□ 可申請專利 □ 可技術移轉 日期：96 年 07 月 31 日
國科會補助計畫
計畫名稱：環境認知查詢技術之設計與製作(3/3)
計畫主持人：張玉盈
計畫編號：NSC95-2221-E-110-101 學門領域：資訊工程
技術/創作名稱 Large-Itemset-Based Index Structures for Supporting Personalized In-formation Filtering on the Internet
發明人/創作人 張玉盈
技術說明
中文：
在這個計畫中，針對網際網路上個人化資訊過濾服務，我們提出考
慮關鍵字出現次數的索引。我們也提出三個以大項目集為基礎的方
法。我們利用改良版的 Apriori 演算法產生大項目集，來建構使用
者設定檔的索引，以減少儲存索引所需的空間。另外，針對使用者
設定檔索引更新的問題，我們將關鍵字的權重考慮進來，區分長期
興趣和短期興趣。先套用改良版的 Apriori 演算法於長期興趣，找
出大項目集，建構索引。接著，再將短期興趣加入索引內。
英文：
In this project, we propose an index structure that considers the count
of each keyword for personalized information filtering services on the
Internet. We also propose three large-item-set based methods. We use a
revised Apriori algorithm to get large itemsets to construct an index for
profiles, reducing storage space. Besides, for the update of the index of
profiles, we consider weights of keywords to discriminate between
long-term and short-term interests. We first apply the revised Apriori
algorithm to long-term interests to get large itemsets to construct an
index of profiles. Then, short-term interests are attached to this index.
可利用之產業
及
可開發之產品
網際地理資訊系統 (利用使用者設定檔索引來達到個人化服務)
資訊推薦系統 (利用使用者設定檔索引來主動提供資訊給使用者)
技術特點
利用改良版的 Apriori 演算法找出大項目集來建構以樹為基礎的使
用者設定檔索引，以減少儲存索引所需的空間。另外，也提出考慮
關鍵字權重並利用改良版的 Apriori 演算法來建構使用者設定檔索
引，以支援漸近式更新，來減少更新花費。
推廣及運用的價值
可以運用到資訊推薦系統，根據使用者設定檔內所提供的興趣，主
動提供相關的資訊給感興趣的使用者。
ˇ
表 Y04 
報告內容應包括下列各項： 
一、參加會議經過 
2007 IEEE Symposium Series on Computational Intelligence 是由 IEEE Computational 
Intelligence Society 所贊助。共包含 12 不同主題，分別為 image and signal processing, data 
mining, bioinformatics, games, scheduling, multicriteria decision-making, security and 
defense applications, foundations and theory, reinforcement learning, approximate dynamic 
programming, swarm intelligence, artificial life, and evolvable and adaptive hardware.開會地
點在美國夏威夷州歐胡島檀香山市的 Hilton Hawaiian Village Beach Resort & Spa 舉辦，
如圖表 1。會議時間從 4 月 1 日至 4 月 5 日。因為會議的內容包羅萬象涵蓋了許多熱門
或重要的前瞻性研究，學生得以與許多國外學者進行專題且深入地討論，並參與其它與
環境認知有關的 events。 
學生於4月2日晚上，發表” An ACGT-Words Tree for Efficient Data Access in Genomic 
Databases”論文一篇。與當場之國外學者進行深入地討論，獲得許多的寶貴意見，獲益
匪淺。此外，學生亦聆聽與環境認知研究相關的會議，涵蓋生物資訊與資料探勘等，瞭
解此領域最新的學術研究議題。 
二、與會心得 
首先，感謝國科會的補助，讓我有這個機會出國去發表論文，不但能夠與來自世界
各地的專家學者進行交流，也吸收了許多最新的知識。與他們互相交流研究心得，我得
到不同的觀點和建議。與留學生交流，知道在國內念博士班和在國外有什麼不同。 
第一次參與 poster presentation，與在場參觀的國外學者，一對一，或一對多的方式
互動。國外學者熱情地提供許多寶貴的建議，讓我能夠以更宏觀與嚴謹的態度，繼續探
究我的研究領域。 
在這次的參加會議中，看到了 Data Mining 技術，如何融入到環境認知的應用領域。
可見得 Data Mining 與環境認知是一個可以整合的研究領域。只要有創意，就能將現有
的技術，融入到另一個領域。 
三、考察參觀活動(無是項活動者省略) 
會議結束之後，我在歐胡島參觀 University of Hawaii at Manoa。由於夏威夷這個地
方是個民族大融爐，所以在 University of Hawaii at Manoa 校園，可以看到各國風情的建
築物。這所學校超過百分之二十的學生是日裔美國人、百分之十是華裔美國人，百分之
九是菲律賓裔美國人。夏威夷的種族多樣性，在這個學校一覽無遺。 
四、建議 
無 
 
五、攜回資料名稱及內容 
開會議程及論文光碟兩份 
六、其他 
 
 
 
An ACGT-Words Tree for Efficient Data Access in
Genomic Databases
Ye-In Chang, Wei-Horng Yeh, Jiun-Rung Chen, and Jen-Wei Hu
Dept. of Computer Science and Engineering, National Sun Yat-Sen University
Kaohsiung, Taiwan, R.O.C
Telephone: (886) 7–525–2000 (ext. 4334)
Fax: (886) 7–525–4301
Abstract— Genomic sequence databases, like GenBank [2],
EMBL, are widely used by molecular biologists for homology
searching. Because of the increase of the size of genomic sequence
databases, the importance of indexing the sequences for fast
queries grows. In this paper, we propose a new index structure,
ACGT-Words tree1, for efficiently support query processing in
genomic databases. We define the concept of words which is
different from the word definition given in the word suffix tree,
and separate the DNA sequences stored in the database and in
the query sequence into distinct words. Our approach does not
store all of the suffixes in the database sequences. Therefore, we
need less space than the suffix tree approach. We also propose
an efficient search algorithm to do the sequence match based
on the ACGT-Words tree index structure. Therefore, we could
take less time to finish the search than the suffix array approach.
Moreover, our approach avoids the missing cases occurring in the
word suffix tree. The simulation results show that our ACGT-
Words tree outperforms the suffix tree and the suffix array in
terms of storage and processing time, respectively.
I. INTRODUCTION
Bioinformatics has received increased publicity over the
past few years, in large part due to its importance to the
Human Genome Project. With the increase of genomic se-
quences, there are numerous databases holding these DNA and
protein sequences [5]. Basically, the primary structure of DNA
(Deoxyribonucleic acid) is represented as strings, or linear
sequences, which is composed of four basic molecules called
nucleotides with different nitrogen bases: Adenine (A), Gua-
nine (G), Cytosine (C), and Thymine (T) [9]. One characteristic
of the sequences in those public nucleotide databases is its long
length. The average sequence length is around 1,000 bases,
with sequences ranging from 10 to 700,000 bases in length.
The DNA sequences can not break into words, because each
character in sequences is important. Due to the long length of
sequences, the search in databases becomes more difficulty.
A general method for reducing searching costs is to store an
abstraction or index that can be used to assess broad similarity
to a query [9]. Given a set of database sequences, the well-
known Wilbur-Lipman approach [8] is first preprocess, through
hashing each interval in the query sequence. An interval in
this context is a fixed-length overlapping subsequence from
a sequence. In [9], they used an inverted index to select a
1This research was supported in part by the National Science Council of
Republic of China under Grant No. NSC-95-2221-E-110-101.
subset of sequences in a coarse search. The inverted index uses
hashing to store the intervals and search the query sequence.
However, it will have some missing cases. Weiner proposed
the suffix tree [7] that is a compact version of the suffix tries.
A suffix tree of a string with length n will have n leaf nodes,
one per suffix. Therefore, the disadvantage of the suffix tree is
its large storage space. To reduce the storage space, Manber
and Myers [6] proposed the suffix array. This data structure
is basically a sorted list of all the suffixes of strings. They
only store the sorted list. Although the suffix array reduces the
storage space for indexing DNA sequences, the construction
and search of the suffix array waste too much time. In [4],
Irving and Love proposed the suffix binary search tree to
efficiently construct a suffix array.
For most approaches mentioned above, they store all suf-
fixes of the sequences. They do not consider the concept of
words. Andersson and Nilsson designed the word suffix trees
[1], which breaks a sequence into words. Although the word
suffix tree stores less suffixes than traditional suffix trees, it
will lose information in the searching process. Take Figure 1
as an example. In Figure 1-(a), the sequence TGAGC occurs
at position 4. However, in Figure 1-(b), we can not find this
sequence in the tree structure.
In this paper, we design a new data structure to index
the DNA sequences. We use the concept of words, which is
different from the word definition given in the word suffix
tree [1], to construct our index structure. The definition of an
ACGT-Word is as follows: for a sequence which starts with
character k, k ∈ {A, C, G, T}, an ACGT-Word consists of the
successive characters from character k to the character which
is the previous one before the same character k appearing
again in the sequence. We will generate all ACGT-Words from
all suffixes of the given sequence according to the definition.
For example, for DNA sequence AGAGACT $, the related
ACGT-Words are {AG, GA, AG, GACT, ACT, CT, T}. Figure
2 shows the ACGT-Words tree index structure constructed by
the same DNA sequence shown in Figure 1-(a). Although the
number of words generated by the word suffix tree is less than
that of our index structure, the word suffix tree loses some
information as we mentioned previously. For any word which
occurs at many positions of the sequence, we only construct
the word once in our tree structure. For example, in Figure 2,
word ACGCTG is constructed only once in the tree structure,
143
Proceedings of the 2007 IEEE Symposium on Computational 
Intelligence in Bioinformatics and Computational Biology (CIBCB 2007)
1-4244-0710-9/07/$20.00 ©2007 IEEE
Procedure Construct(S);
/* Generate the words of input sequence S. */
/* P is an index of the input sequence S. */
begin
P := 0;
while ( S[P ] = ’$’) do
begin /* Create a new Node and a new Edge */
if ( S[P ] = ’A’ ) then
Split(A num,S, P );
else if ( S[P ] = ’C’ ) then
Split(C num,S, P );
else if ( S[P ] = ’G’ ) then
Split(G num,S, P );
else if ( S[P ] = ’T’ ) then
Split(T num,S, P );
P := P + 1;
end;
InsertRemainingWord();
end;
Fig. 3. Procedure Construct(S)
A T A C G $
Input sequence
0 1 2 3 4 5 6 7
(a)
A TA C
8 9
A T A C G $A TA C
A T A C G $A TA C
A T A C G $A TA C
A T A C G $A TA C
A T A C G $A TA C
A T A C G $A TA C
A T A C G $A TA C
A T A C G $A TA C
A T A C G $A TA C
A C G
1 0 -1 -1
2 0 -1 -1
3 2 -1 -1
4 2 3 -1
5 4 3 -1
6 4 5 -1
7 4 5 6
T
-1
1
1
1
1
1
1
step
var
8 7 5 6 1
A T
--
--
A C
--
A C G
A C A
A T
C
Output words
init -1 -1 -1 -1
(b)
9 7 5 6 8
10 7 5 6 8
C A
--
T C G A
G A T
T
G A T
Fig. 4. The steps for splitting the ACGT-Words: (a) scan input sequence;
(b) change the variables and generate the words.
Assume that P is a position of the sequence S. There are
four variables, A num, C num, G num, and T num, which
store the starting position for words beginning with A, C, G,
and T , respectively. Initially, let P be pointed at the starting
position of the sequence S, and variables A num, C num,
G num, and T num be set to -1, as shown in Figure 4-
(b). First, we find that the first character of the sequence
S is A. Then, we check whether the variable A num is -1
in Procedure Split. If A num is -1, we change the variable
A num to the value of P ; otherwise, a word will be generated.
Since A num is -1 now, we set A num = P = 0. After
changing the value of A num, position P points to the next
character of the sequence S. Because the pointed character
is T and the value of T num is -1, we change the value of
T num to 1, and P will point to the next character. Now,
P is at position 2, and the pointed character is A. Since
variable A num is 0, not -1, which implies that we find
a word which locates from A num to (P - 1). The first
ACGT-Word, W0 = AT , of the sequence S is generated.
The similar steps are processed until the ending symbol $ is
reached. When we reach the ending symbol $, the values of
variables A num, C num, G num, T num may not equal
to -1. It means that some ACGT-Words are not generated yet.
TABLE II
VARIABLES USED IN PROCEDURE SearchQS(QS)
QS the query sequence
SW an array which records all the searched words of QS
SW [i] the i-th searched word in SW
|SW [i]| the length of SW [i]
num the number of searched words
X an array which stores the result of function SearchSW
Y an array which stores the result of the searching process
flag true if QS is in the database
lastword true if the searched word is the last word of QS
E one edge in the ACGT-Words tree
E.label characters stored in edge E
E.endnode the connected node under edge E
k the length of the same prefix between the searched word
and E.label
suffix num occurring positions stored in one node of the ACGT-
Words tree
Therefore, as shown in Figure 4-(b), we generate the remaining
ACGT-Words AT , CGAT , GAT , and T by calling Procedure
InsertRemainingWord.
In procedures Split or InsertRemainingWord, if one
ACGT-Word is generated, we call procedure Insert to insert
the generated word into the ACGT-Words tree. Procedure
Insert is similar to the method used in the word suffix trees
[1], which inserts words into the word suffix tree. The only
difference is that in the word suffix trees method, they record
“in-order numbers” in nodes of the tree structure. However,
in our method, for each ACGT-Word, we record its occurring
positions of input sequence S in a node, where this node is at
the end of the path for this word in our tree structure. Take the
ACGT-words shown in Figure 4-(b) as an example. Figures
5 shows the process of inserting all the ACGT-Words. For
example, in Figure 5-(a), we insert word AT into the ACGT-
Words tree. Since word AT occurs at position 0 of the given
sequence ATACACGAT $, we create one edge with label
equal to AT and one node which records position 0. Then, in
Figure 5-(b), we insert word AC into the ACGT-Words tree.
Because the first character of AC, i.e., A, is the same as the
first character of label AT in the edge, we split this edge into
three edges, i.e., edges with labels “A”, “C”, and “T”. That
is, words AC and AT will share the same edge with label
A, but have the different edges with label C and T . We also
create a new node to store the occurring position of word AC,
i.e., position 2. Therefore, from Figure 5-(b), we could know
that word AC appears at position 2 and word AT appears at
position 0.
C. Search
Given a query sequence, QS, we apply procedure
SearchQS(QS) to do the searching process. Table II shows
variables used in procedure SearchQS, and Figure 6 shows
this procedure. This procedure cuts the query sequence, QS,
into searched words. Moreover, procedure SearchQS will set
flag lastword to true if the searched word is the last word of
QS. After generating the searched words, we call function
SearchSW (R,SW [i], lastword) to search one word from
our ACGT-Words tree, where R is the node that we are
145
Proceedings of the 2007 IEEE Symposium on Computational 
Intelligence in Bioinformatics and Computational Biology (CIBCB 2007)
1ACT
0 2
CT T
1 2 3
R
DB = ACT
Fig. 8. An example for Case 1 in the searching process (QS =GACGT ,
SW = GAC)
ACT
5
0 8
CT
3
R
CG
1
2
DB = ACTCGACTACTCT
Fig. 9. An example for Case 2 in the searching process (QS = AGTAC,
SW = AC)
the last searched word of the query sequence. In this case,
we apply function OutputAll(). This function traverses the
subtree from the last edge which the searched word SW meets,
and returns an array of suffix num’s which are stored in
those nodes that function OutputAll() traverses. In Figure 9,
assume that QS = AGTAC and SW = AC (i.e., the last
searched word). We traverse the tree from the root node, and
find that AC is the same as the prefix of E.label = ACT
(|E.label| > |SW |). Therefore, E.label = ACT is one output
that matches the condition SW = AC. Due to SW is the last
word of QS (lastword = true), it may have other outputs,
e.g., ACTCG and ACTCT in this example, which also match
the searched word. Function OutputAll() will also traverse
those nodes. Therefore, the output of this example is {0, 5,
8}. It means that positions 0, 5, and 8 match the last searched
word SW = AC.
3) Case 3 (as shown in Figure 7-(c)): This case occurs if
SW is the prefix of E.label, but is not the last searched word
of the query sequence. This means that no sequence matches
the query sequence. For example, in Figure 10, assume that
QS = ATACG and SW = AT . Since word AT is not the
last word of QS, word AT must exactly match the label of
edge E, i.e., SW = E.label. However, in this example, we
have SW = AT = E.label = ATG. Therefore, there is no
sequence matching query sequence QS.
4) Case 4 (as shown in Figure 7-(d)): This case occurs
if E.label is the prefix sequence of word SW . First, we
call function Shift(E.label, SW ) to cut the prefix sequence
between E.label and SW . Second, we change the searched
node R to the end node of E. Finally, we call function
SearchSW again to search the new searched word. For
example, in Figure 11, assume that QS = GTCTGA and
SW = GTCT . First, we traverse the tree from the root node.
We find that we will reach node 1 after searching GT (the
common prefix between E.label = GT and SW = GTCT ).
ATG
5
0 8
GC
3
R
CT
1
2
DB = ATGCTATGATGGC
Fig. 10. An example for Case 3 in the searching process (QS =ATACG,
SW = AT )
GT
0
2 6
CT
3
R
AC
1
2
DB = GTGTACGTCT
Fig. 11. An example for Case 4 in the searching process (QS =GTCTGA,
SW = GTCT )
Next, we change the searched node to node 1, and the new
search word becomes CT (due to |SW | > |E.label|). Then,
we call function SearchSW again to traverse the tree deeply
(from node 1 with SW = CT ). Finally, the searched word
GTCT is found in the database (i.e., position 6 stored in node
3).
5) Case 5 (as shown in Figure 7-(e)): This case occurs if
(1) word SW is exactly equal to E.label; (2) word SW is the
last searched word of the query sequence; (3) E.endnode has
no suffix num. It means that this node is created by two or
more edges that have the same prefix sequence. For example,
In Figure 12, sequence ATGATC constructs the tree. Let’s
consider the branch with the starting character A. It has two
ACGT-Words, ATG and ATC. These two ACGT-Words have
shared characters, AT . Hence, after constructing the ACGT-
Words tree, the tree contains one edge E.label = AT and
E.endnode (i.e., node 1) has no suffix num. Therefore,
in this case, we only call function OutputAll(). It traverses
the tree from the edge which the searching word meets. For
example, assume that SW = AT . In Figure 12, we traverse
the tree from the root node. Then, edge E with label AT
(E.label = AT ) matches the word SW , and E.endnode,
node 1, stores no suffix num. Therefore, we call function
OutputAll(). The result after calling function OutputAll()
is {0, 3}. It means that positions 0 and 3 of the database
sequence match the searched word SW = AT .
6) Case 6 (as shown in Figure 7-(f)): This case occurs if
(1) word SW is exactly equal to E.label; (2) word SW is not
the last searched word of the query sequence; (3) E.endnode
has no suffix num. In this case, there is one difference
with Case 5: word SW is not the last searched word of
the query sequence. This means that no sequence matches
the query sequence. For example, in Figure 13, assume that
QS = CACTG and SW = CA (lastword = false). We
traverse the tree from the root node, and SW matches edge
147
Proceedings of the 2007 IEEE Symposium on Computational 
Intelligence in Bioinformatics and Computational Biology (CIBCB 2007)
TABLE IV
A COMPARISON OF THE NUMBER OF NODES BETWEEN THE SUFFIX TREE
AND THE ACGT-WORDS TREE FOR THE REAL DNA SEQUENCES
Drosophila Part of human Chromosome 19
DNA length 14405 17010
ACGT-Words Tree 14992 17704
Suffix Tree 23509 27898
TABLE V
PARAMETERS USED IN SIMULATION MODEL
Parameter Meaning Value
PN the number of distinct patterns 6..10
PL(i) the length of the ith synthetic pattern
Min PL the minimum length of a synthetic pattern 5
Max PL the maximum length of a synthetic pattern 10
Mean PL the mean length of a synthetic pattern 7
Min TL the minimum length of the database sequence 10000
Max TL the maximum length of the database sequence 20000
Mean TL the mean length of the database sequence 15000
QN the number of query sequences 200
QL the length of query sequences
Min QL the minimum length of a query sequence 50
Max QL the maximum length of a query sequence 200
Mean QL the mean length of a query sequence 80
θ the probability for containing a pattern in 0.1..1.0
the DNA sequence
IV. PERFORMANCE STUDY
In this section, we study the performance of the proposed
ACGT-Words tree data structure, and make a comparison
with the suffix tree and the suffix array data structures by
simulation. First, we study the performance by using the real
DNA sequences in GenBank. Then, in order to evaluate the
performance of the algorithms over a large range of data
characteristics, we generate the synthetic data and study the
performance by using the synthetic data.
A. Experiment Results for Real Genomic Databases
In this subsection, we study the performance of the ACGT-
Words tree by using the real DNA sequences in GenBank
(http://www.ncbi.nlm.nih.gov). We use Drosophila and Human
Chromosome 19 as our database sequences. Table IV shows
the comparison of the number of nodes between the suffix tree
and the ACGT-Words tree. Obviously, the number of nodes
used in the ACGT-Words tree is less than that used in the
suffix tree.
B. Generation of Synthetic Data
In this subsection, we generate synthetic sequences to
evaluate the performance of the algorithms. The synthetic data
is used to simulate the occurrence of a DNA query sequence in
a genomic database. The parameters used in our performance
model are shown in Table V. The details of our performance
model are described in [3]. The simulation results is the
average of 2000 experiments for different parameters which
we consider.
10000
15000
20000
25000
30000
0 0.2 0.4 0.6 0.8 1
n
u
m
be
r o
f n
od
es ACGT-
Words Tree
Suffix Tree
Fig. 16. A comparison of the number of nodes between the ACGT-Words
tree and the suffix tree under the different probabilities of patterns (TL =
15000, PN = 6, PL = 7)
0
10000
20000
30000
40000
10
00
0
12
00
0
14
00
0
16
00
0
18
00
0
20
00
0
the length of the database
sequence (TL)
n
u
m
be
r o
f n
od
es ACGT-
Words Tree
Suffix Tree
Fig. 17. A comparison of the number of nodes between the ACGT-Words
tree and the suffix tree under the different length of the database sequence (θ
= 0.5, PN = 6, PL = 7).
C. Simulation Result
In this subsection, we show the simulation results of the
ACGT-Words tree.
1) The Suffix Tree vs. the ACGT-Words Tree: A comparison
of the number of nodes under the different occurring proba-
bilities of the same patterns is shown in Figure 16. From this
figure, we show that the ACGT-Words tree always requires less
number of nodes than the suffix tree no matter what value of
the probability θ is. That is, the ACGT-Words tree needs less
storage space than the suffix tree. Moreover, as the occurring
probability of the same patterns increases, the number of nodes
increases in the suffix tree, but decreases in the ACGT-Words
tree. This is because as the occurring probability of the same
patterns increases, the number of ACGT-Words is less than
the number of suffixes.
A comparison of the number of nodes under the different
length of database sequences is shown in Figure 17. From this
figure, we show that the ACGT-Words tree always requires
less number of nodes than the suffix tree no matter what
value the length of the database sequence (TL) is. As TL
increases, some patterns may occur for many times. Therefore,
the increasing rate of the number of nodes of the ACGT-Words
tree is slower than that of the suffix tree.
A comparison of the number of nodes under the different
number of patterns is shown in Figure 18. From this figure, we
show that the ACGT-Words tree always requires less number
of nodes than the suffix tree no matter what value the number
of database patterns (PN ) is. The simulation result does not
contain any obvious regulation. That is, the value of PN is not
the main factor for affecting the storage spaces of the suffix
tree and the ACGT-Words tree.
149
Proceedings of the 2007 IEEE Symposium on Computational 
Intelligence in Bioinformatics and Computational Biology (CIBCB 2007)
