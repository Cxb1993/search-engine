1 
 
中文摘要 
網際網路的普及化使得網際網路成為完美的惡意軟體傳染的平台，目前的情況顯示
現有安全防護技術是無法有效對抗惡意軟體的傳染。在本報告中我們將深入探討惡意軟
體偵測機制替代方法的研究進展。 
根據研究發現，目前的資安事件大多數是透過網路入侵的惡意軟體所造成，近幾年
來惡意軟體成為越來越普遍的攻擊媒介。根據實驗報告已經說明使用傳統技術的防毒軟
體，在面對幾乎每天出現新品種的惡意軟體並無法有效抵抗。因此本篇報告提出一分散
式入侵容錯系統，利用代理和生物啟發的演算法生的人工免疫系統 (AIS)，做為解決問
題的替代方案。AIS 系統提出了學習網路正常行為和異常峰值警報的自我調整機制，並
利用自動的分類技術以識別潛在的安全威脅，並對可能入侵違反做出反應。本文中提出
的架構用將採用先前的研究成果的元件和功能，並以分散體系結構和相互核查以避免元
件篡改和單一故障點的設計。 
 
關鍵字：殭屍網路、生物啟發的演算法、人工免疫系統、惡意程式、惡意程式偵測技術 
 
1 
 
 
1. Introduction 
 In recent years Internet has been rampantly affected by widespread epidemics of 
Malicious Software (malware). Such malicious software, also known as network worms, 
trojans, adware (advertisement software), is a combination of network tools developed with 
malicious purposes, such as gaining access and controlling user systems, collecting sensitive 
data, providing unauthorized services, such as spam mail relaying, proxy forwarding and so 
on. 
 The majority of today malware is developed with commercial interests, attempting to 
profit from malware infection, steal computing power or tradable information, such as 
authentication credentials, credit card numbers or personal information. Further, 
botnet ”business” is turning into extremely profitable activity by renting the distributed 
computing power for denial of service attacks, data harvesting, or serving as ”proxy” nodes 
for advertisement fraud and spamming. 
 Some of the recent attacks that involved malware, also demonstrated that targeted 
attacks for the purpose of financial espionage getting more and more common. Even such 
giants as Google and Adobe were affected in recent outbreaks[22]. 
 Most common methods of spreading malware utilize multi-step infection in order to 
plant malicious software on end-user PCs. The infection steps include infiltration of 
third-party web sites, planting of malicious code, which would typically exploit human or 
software weakness in order to plant malicious software on user PC. Another common vector 
that has been observed in targeted attacks in particular, is a “social engineering” methods, 
which typically use fake email messages with attachments that contain malicious code. Such 
messages are sent to the company employees asking them to review attached files. Once 
malicious files are opened by vulnerable software (such as Adobe Acrobat Reader) 
vulnerabilities in this software are exploited and malware bootstrap code is executed. 
 Consequentially, once deployed, such software uses various techniques in order to 
collect sensitive data (such as user credentials) or attempts to exploit trust-relationships to 
infiltrate and further propagate infection. Most of malwareprevention techniques focus purely 
on mitigating the risks at one of these multi-step propagation path nodes. In addition to that, 
most of these methods are based on fixed, predefined characteristics of malicious software, 
which makes these methods not to be extremely effective against unknown malware. This 
also explains the fact why the recent targeted attacks were not detected by any commercial 
antivirus software, unless signatures for new strains of malware were added to the antivirus 
software signature database. The anti-virus technology suffers from another major design 
problem - data overload. as a number of known malicious 
software grows, the signature databases also grow enormously, leading to heavier loads 
during malware detection and making it almost impossible to perform malicious software 
3 
 
by Dai Shih-Yao et al.[5] but is significantly extended with other components to cope with 
automated malware classification tasks, detection of dormant malware web sites, and 
disinfecting potentially affected system users. 
 
2. Malware Evolution 
 Rapid Internet growth, commercialization and accessibility of the global network 
brought another digital era phenomena: malicious woftware (malware). Computer 
programmers since the very early years of Internet have been interested in building 
self-replicating code, which would use particular system weaknesses to compromise and 
infect systems. 
 Before we go further, we would like to define the actual term of malware, since this term 
is frequently being used in various contexts with different associated meanings. In our 
opinion the most suitable definition was given my McGraw et al. [13] as “any code added, 
changed, or removed from a software system in order to intentionally cause harm or subvert 
the intended function of the system”. This definition would include both, actual malicious 
software executable, and any bootstrap code, such as PDF file with exploit code or an 
HTML/Javascript embedded in affected website to load malicious software. 
 A Morris worm[14] was one of the first examples of typical malicious software. 
Computer programmers never stopped developing malicious software since that time. The 
major worm outbreaks, such as Nimda and CodeRed in 2001, SQL Slammer and Blaster in 
2003, Netsky and Sasserin 2004, Conficker in 2008, Gumblar in 2009 continue to disrupt 
thousands of computers every year and increasingly cause bigger financial losses. This 
becoming especially true with rapid growth of malware infections, turning it into nearly 
pandemic last year and major change in primary motivation behind development of malicious 
code. With the experimental by nature in early developments, malware developers are more 
and more seeking for financial profit collected from renting botnets, built on the top of 
infected networks, collecting and selling sensitive information including online banking 
credentials, credentials to online services, access to web hosting accounts and so on. 
 While the early strains of malware were seen as merely “Proof-of-Concept” programs, 
deploying primitive, and often flawed spreading mechanisms, which led to easy detection 
with Anti-Virus and Network Intrusion Detection software, the recent malicious software uses 
advanced techniques, often using 0-day vulnerability exploits to penetrate target systems[22], 
self-decrypting binaries, robust peer-to-peer architecture and multiple infection vectors (email, 
web, usb storage media and so on). 
 Some of the known malware variants also use advanced masking techniques and 
separate malware functionality into malware bootstrap and loading code, that contains no 
actual “malicious” functions, except for downloading and executing other binaries from the 
Internet and could be hardly identified as “malicious software” even using behavior-based 
5 
 
“signature matching”, or “misuse detection” approaches, are rarely seen in plain and 
frequently are combined with dynamic analysis. The exception should be made for 
entropy-based analysis of malicious code, which aims at finding executable binaries, which 
were packed with software obfuscation and encryption tools in order to hide malicious 
payload. Entropy, or information density based approach allows to differentiate whether a 
binary is a native binary, a packed or an encrypted binary[1]. This method is extremely easy 
to implement, however, as many anomaly-based detection 
methods, is prone to high false-positive ratio. 
 
2.3. Behavior-based detection techniques 
 Most of behavior based detection techniques are using form of sandboxing mechanism 
to identify “Viral Gene Codes” of malicious software and profile its behavior. The “Viral 
Gene Codes” is basic semantic component of malicious software that demonstrates its 
malicious functions. While sounding extremely reasonable on paper, this method has a few 
major problems: 
 It is nearly impossible to detect dormant, but not active malware on infected web sites 
due to the fact that malware execution chain is interrupted and no “malicious action” 
would be visible in the engine. However, this malware may still be able to infect users, 
whenever all the components within malware-infecting chain come online. 
 It is extremely difficult to deal with malware that triggers its malicious functions using 
time and event-based mechanisms. 
 Many of current-day malware serving “loaders” are highly tuned to the actual target 
architecture and memorize visitors IP addresses. This means that the behavior-based 
sandbox should completely reproduce targeted environment and visit malicious website 
only once in order to trigger malicious action. 
 Since our aim is to be able to detect any components of malicious software, including 
the bootstrap code, that may not feature actual malicious semantics, we must combine 
behavior based detection techniques with other methods in order to achieve acceptable 
results. 
 
2.4. Related Works 
 There is a number of alternative techniques has been published in recent year to deal 
with overwhelming malicious software problem and utilize hybrid approaches. An interesting 
attempt to build worm containment framework was proposed by Microsoft Research team[4]. 
Another project Bouncer[3] uses similar concepts and builds a system for automated 
malformed input detection and blocking. Both authors state that worms need software defects 
to exploit vulnerabilities. Therefore by eliminating all software defects it would also be 
possible to eradicate worms. While this is partly true, we would argue that software defects is 
7 
 
 
Figure 1. Immunity Framework 
 The malware prevention framework is designed as distributed, intrusion-tolerant system 
and aims at protecting network assets (internal users, publicly accessible systems and so on) 
from malware intrusion attacks. The framework should seamlessly integrate with existing 
network security devices, such as Intrusion Detection Systems, Web Application Firewalls, 
Network Firewalls, Anti-Virus gateways and so on and uses these devices as additional input 
data sources, or policy enforcement control mechanisms. The brief architecture of BIMP 
framework is illustrated on Figure 
1. The key feature of BIMP are Immunity Agents, which are software agents running on 
protected systems or monitor network assents. The Immunity agents that are running on 
protected systems are capable of intercepting syscalls and stack cotext, similar to what we 
can capture with QEMU in [5] and are equipped with AIS (Artificial 
Immune System), which discovers normal system behavior and detects abnormalities. Other 
types of Immunity Agents may be placed on one of the nodes and are designed to detect 
abnormalities in network asset data (such as content of web page, intrusion detection or 
firewall log input and so on). 
9 
 
 
Figure 3. detection phase 
 Another function of Immunity Agents is to share successful “detectors” with its peers, 
so other nodes would gain “immunity” to potential attacks before worm attempts to 
propagate to those nodes. It is also possible that no detector would be able to match malicious 
software execution. That is the reason why the distributed system is equipped with static and 
behavior analysis components, which could be identified via peer discovery. The Immunity 
Agents also broadcast all the external inputs (data, which was received from outside of the 
distributed system) to these peers. These analysis components are rule-based systems, which 
perform batch analysis of these inputs in attempt to discover potentially malicious data. Shall 
such inputs be detected, submitting node is marked as “infected” and appropriate recovery 
commands are pushed to the network nodes. A typical scenario of dealing with malware 
attack in BIMP framework would be as following. The negative selection algorithm is trained 
to produce a set of “detectors”, which do not match the “self set” of syscall/context tuples. 
These activity samples may be pre-recorded to speed up learning process. Likewise the state 
of each of the network asset states is also considered as “benign” initially and may change 
based on Immunity agent judgements. This set of “detectors” is used 
to differentiate between self and non-self activity. Suppose that one of the network assets 
receives an email message or visits a web site, that contains active malicious software. Either 
vulnerability in the browser, or an action of opening email attachment triggers the malicious 
software execution and consequential infection of underlying system. In typical network 
attack scenario, such as Google compromise case[22], at this point attacker would be already 
inside the corporate network and would start attempting to compromise surrounding network 
environment. These actions would trigger unusual activity, which may be picked up by one of 
“detectors” (the probability of detection is directly dependent on the size of “detectors” pool). 
Also, in presence of BIMP framework, the data received by asset would be simultaneously 
11 
 
 For example, in situations when one of the company web servers was compromised and 
malicious software bootstrap code was added to compromised web page, the Immunity Agent 
would issue a policy to either recover the “benign” version of web server content, of filter out 
malicious content at Web Application Firewall. 
 In the following sections we discuss architecture specific details of BIMP components 
and reactive mechanisms. 
 
3.2. Immunity Agents 
 Each of the protected network assets is bundled with an “Immunity Agent”. The 
Immunity Agent may share the same physical hardware with monitored host system. 
However this would be a security/performance tradeoff, since a compromise of the user 
machine (including underlying hardware firmware compromise) might affect the Immunity 
Agent. On the other hand, it is an expensive operation to transfer voluminous event data from 
monitored host system to remote location and would lead to heavy performance degradation 
on active systems. 
 Immunity Agent keeps track of the “states” of the user machine, whenever available, the 
agent preserves snapshots of last known benign states and ensures that all user network 
activity goes gets replicated on the behavior analysis node. Whenever Immunity Agent 
receives notification of potential malware infection on protected agent, it uses a rulebased 
inference engine to select and execute proper recovery mechanism. The simplest recovery 
mechanism would be to revert to the last known benign state of protected asset. However in 
situations, when such state, or such feature is not available, alternative recovery methods 
could take place and affected node could be either brought down and called for manual 
analysis, or isolated from the network. In case of static resource compromise, the affected 
assets’ outgoing data stream could also be filtered to remove potentially malicious traffic, that 
could escalate infection to other network nodes. 
 
3.3. Behavior and Static Analyzers 
 The primary purpose of Behavior and Static Analyzer components is to serve as 
information source for Immunity Agent, which would allow Immunity Agent to reason about 
the current state of protected asset. In order to do so, Immunity Agent may replicate each of 
the data inputs (such as visited web pages, received emails and so on), on Behavior based 
analyzer, the proposed behavior analyzer engine is build using Holography sandboxing 
mechanism[5] and detected actions are classified using Negative Selection Algorithm based 
classifiers, which were initially trained on known malicious data samples. 
 Holography is a virtual hardware-level dynamic analysis tool that monitors and logs 
malware process’s actions. The logged data can be reviewed by security analysts to easily 
discover abnormal behavior models. Holography can not only log operating system calls with 
13 
 
 
Figure 8. Holography Architecture 
 A feedback mechanism exists to update classifiers knowledge, if any false-negative 
results are detected. 
 Static Analyzer in this architecture acts as “permanent memory” for behavior based 
analyzer and primarily focuses on detection of dormant malware, and malware chains, where 
one of the malicious code serving component is temporally broken. Static Analyzer should 
also be able to detect semantics of malicious actions within malware components in cases, 
when behavior analysis engine fails to do so (time and event based activities, detection of 
vulnerability exploit code, dormant malware and so on). 
 
3.4. Communication Channels 
 We experimented and built frame work for reliable communication channels using 
multiple protocols. For this we use a set of standard protocols (such as HTTP, XMPP) and 
implement covert channels on the top of them. Covert channels are secret communication 
paths, which existance is not expected in the original system design. Covert channels can be 
used as legimate tools of censorship resistance, anonymity and privacy preservation to 
address issues with ”national” firewalls, citizen profiling and other ”unethical” uses of 
Information Technology. Current steganographic methods that implement covert channels 
within network traffic, are highly dependent on particular media data or network protocol to 
hide data. In this paper we investigate the methods and an algorithm for implementing 
adaptive covert communication system that works on real-world Internet, capable of using 
multiple application-level protocols as its communication media and can be implemented as 
network application, therefore requires no system modifications of communicating nodes. 
The key difference from previous solutions is the use of adaptive redundant mechanism, 
which allows real-time underlying protocol switching and adaptation to the dynamic network 
configuration changes. 
 In our covert channel implementation we do not need to relay on any particular protocol 
in order to communicate and are able to use adaptive mechanism in order to switch between 
different protocols. 
 Our model would look as follows: we have two communicating agents A1 and A2 with 
subset of communicable protocols P1 and P2 respectevely. Agent A1, in order to 
communicate with Agent A2, must detect a subset of communicable protocols P1 so that P1 \ 
15 
 
error patching[16] or even automated network reconfiguration to prevent infected systems 
from attacking other nodes in the network. 
 
 However in an intrusion-tolerant network we also want to be able to automatically 
recover infected nodes. Since we are recording every execution step in form of syscalls and 
arguments, we are also able to produce recovery scenarios, which can be used to “undo” 
impact of certain data inputs on infected system and thus bring infected system into last 
known benign state. Actual implementation of automated recovery mechanism is still a theme 
for our future research work. 
 
4. Conclusion 
We strongly believe that it is possible to improve performance and precision rate of malware 
detection by applying hybrid approach to this process. This research is currently a 
work-in-progress state and we are in process of implementing environment to evaluate 
system effectiveness, however preliminary experiments demonstrated that by implementing 
 
Figure 9. Communication Channel Adaptive Mechanism 
17 
 
windows processes. In P. S. Andrews, J. Timmis, N. D. L. Owens, U. Aickelin, E. Hart, A. 
Hone, and A. M. Tyrrell, editors, ICARIS, volume 5666 of Lecture Notes in Computer 
Science, pages 220–233. Springer, 2009. 
[13] G. Mc Graw and G. Morrisett. Attacking malicious code: A report to the infosec research 
council. IEEE Software, 17(5):33–31, 2000. 
[14] H. Orman. The morris worm: A fifteen-year perspective. IEEE Security and Privacy, 
2003.  
[15] L. P. and J. E. Jo. Targeted web crawling for building a malicious javascript collection. 
Proceedings of the 1st ACM International Workshop on Data-intensive Software 
Management and Mining, 2009. 
[16] J. H. Perkins, S. Kim, S. Larsen, S. Amarasinghe, J. Bachrach, M. Carbin, C. Pacheco, F. 
Sherwood, S. Sidiroglou, G. Sullivan,W.-F.Wong, Y. Zibin, M. D. Ernst, and M. Rinard. 
Automatically patching errors in deployed software. In SOSP ’09: Proceedings of the ACM 
SIGOPS 22nd symposium on Operating systems principles, pages 87–102, New York, NY, 
USA, 2009. ACM. 
[17] M. D. Preda, S. Jha, and S. Debray. A semantics-based approach to malware detection. 
In Proceedings of the 34th Annual 
ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL’07), 
2007. 
[18] M. Siddiqui, M. C. Wang, and J. Lee. A survey of data mining techniques for malware 
detection using file features. In ACM-SE 46: Proceedings of the 46th Annual Southeast 
Regional Conference on XX, 2008. 
[19] M. W. Stephenson, R. Rangan, E. Yashchin, and E. Van Hensbergen. Statistically 
regulating program behavior via mainstream computing. In CGO ’10: Proceedings of the 8th 
annual IEEE/ACM international symposium on Code generation and optimization, pages 
238–247, New York, NY, USA, 2010. ACM. 
[20] T. Stibor, P. Mohr, J. Timmis, and C. Eckert. Is negative selection appropriate for 
anomaly detection? In Genetic and Evolutionary Computation Conference (GECCO), pages 
321–328, Washington DC, USA, June 2005. ACM Press. 
[21] T. Stibor, J. Timmis, and C. Eckert. On the appropriateness of negative selection defined 
over hamming shape-space as a network intrusion detection system. In Proceedings of the 
Congress on Evolutionary Computation (CEC-2005), Edinburgh, UK, Sept. 2005. IEEE 
Press. 
[22] K. Zetter. Google hack attack was ultra sophisticated, new details show. 
http://www.wired.com/threatlevel/2010/01/operationaurora/. 
2 
 
可供推廣之研發成果資料表 II 
 
□ 可申請專利  ■  可技術移轉                                    日期：99 年 10 月 21 日 
國科會補助計畫 
計畫名稱：為可靠計算設計之非集中式代理人容錯基礎架構 
計畫主持人：  郭斯彥       
計畫編號：NSC 96－2221－E002－289－MY3 學門領域：資訊一 
技術/創作名稱 異質網路環境下系統安全代理人之高可靠性通訊 
發明人/創作人 台大電機系 
技術說明 
中文：分散式生存網絡要求某個模塊進行及時，準確地收集信息的
保護和監測網絡。這樣做是通過一個 Xprobe 代理。該 Xprobe 代理
執行遠程操作系統指紋保護節點和生產收集的數據以 XML 格式，
從而進一步可以導入知識庫機作進一步分析。 
英文： 
It is essential to know type and version of operating systems and other 
software components installed on protected computers or networks. 
However it is not always straight forward to obtain this information 
directly. In this study we developed and evolved a new tool and an 
agent named Xprobe which allows remotely collecting such 
information, organizing it and producing XML data that can be further 
integrated with intrusion detection systems, correlation engine, 
knowledge base or inventory systems. Hopefully with development of 
this tool we are taking the technology of remote system fingerprinting 
to a new level. 
可利用之產業 
及 
可開發之產品 
可利用於監控系統。 
技術特點 
過一個 Xprobe++探測技術，可了解 target host 底層作業系統的版本
以及它具有的特性。 
推廣及運用的價值 
透過這些蒐集到的資料，我們可以了解該 host 的 vulnerability，已
進行保護。 
※ 1.每項研發成果請填寫一式二份，一份隨成果報告送繳本會，一份送 貴單
位研發成果推廣單位（如技術移轉中心）。 
※ 2.本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。 
※ 3.本表若不敷使用，請自行影印使用。 
96年度專題研究計畫研究成果彙整表 
計畫主持人：郭斯彥 計畫編號：96-2221-E-002-289-MY3 
計畫名稱：為可靠計算設計之非集中式代理人容錯基礎架構 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 1 1 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 1 1 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 2 2 100%  
研究報告/技術報告 0 0 100%  
研討會論文 3 3 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
