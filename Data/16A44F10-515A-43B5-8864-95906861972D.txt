Abstract
In this project, we combine the genetic algorithm and the trajectory method. The genetic algorithm is in
charge of the global search and the trajectory method is in charge of a somewhat larger region local search.
Since the crossover operator is important in the genetic algorithm, in order to make the search more
effective and efficient, we design good crossover operator utilizing the orthogonal array. Likewise, local
search methods are key components in the trajectory method. Hence we also design good and general local
search methods. We apply our method to the flow-shop scheduling problem, the experimental results on the
benchmark instances reveal that our method is very competitive.
We also design an OA-based local search method for the P-median problem and develop a two-phase
search algorithm using this local search method to solve this problem. The experimental results on the
benchmark instances also reveal that our method outperforms other methods.
Keyword：genetic algorithms, local search, tabu search, orthogonal array, flow-shop scheduling problem,
P-median problem.
的問題上，但在 problem size 較大的情況下只能找到近似最佳解。
近年來也許多學者應用 Meta Heuristic 的方法來解決此問題，Yamada and Reeves(1998)[12]
提出 Genetic Local Search（GLS）演算法，使用摸擬退火（Simulated Annealing）產生初始解，
結合禁忌搜尋（Tabu Search）產生精英族群，最後再以基因區域演算法進一步改進。Rajendran and
Ziegler (2004)[7]則是提出兩個以螞蟻演算法（Ant Approach）為基礎的方法：MMAS (based on
Max-Min Ant System)與 PACO (based on Ant-Colony Optimization)，實驗於相同的 90 題 benchmark
problem 中有 83 題的表現優於 Liu and Reeves (2001)所列出之 best-heuristic solution(以 heuristic
方法所找到最好的解)。Tasgetiren et al. (2005)錯誤! 找不到參照來源。 以 Particle Swarm
Optimization (PSO) 並結合 Variable Neighborhood Search 做為 Local Search，值得一提的是他們提
出 Small Position Value rule (SPV)將適用於 continuous 問題的 PSO 轉為可適用於離散問題的方
法，且於相同的 90 題 benchmark problems 中得到的效果更優於上述的兩種螞蟻演算法。
3.2 P-中位問題（P-median problem）
1 問題定義
在 P-median 問題上，我們假設每個顧客均有其需求量，因此必需尋找適合的供給設施，來滿
足其需求。此外我們也假設每個設施供給點的容量是無限制的，足以滿足任何顧客的需求。另
一方面我們限制每個顧客只能被一間設施所供給，但設施可以供給不只一個顧客。最後的目標
則是要選出 P個設施位置，來滿足所有顧客的需求，並使得整體的距離成本最小。
換言之就是給一個 N 個節點(vertex)的圖(Graph) ),( EVG 上，V 為G 上所有節點的集合，
且任兩點間有一個距離長度(Euclidean distance)，目的在於挑選出這 N 個點的子集
(subset)S，使得|S|=P，也就是要挑選出 P個點，並且將剩下的 SV  節點分配到所挑選出來的
P點上，並使得所分配而得的距離總和最小。
2 文獻回顧
過去有許多研究對 P-median 問題提出不同的解題方法，而最早被發展的方法以 heuristic 為
主，在 1968 年 M.B. Teitz, and P. Bart [8]針對 P-中位問題提出了一個點交換的啟發式演算法，此
外 J.E. Beasley [2][3]在 1988 年結合了拉格蘭茲鬆弛法(Lagrangean relaxation)以及次梯度最佳化
(subgradient optimization)，透過釋放原本限制式(constraint)，再將所釋放的限制式透過一個轉換
機制，可將限制式加到原本的目標函數中，再針對新的目標函數求解。求解出的新解就對應原
本目標函數裡的一組解，再加上次梯度最佳化的過程，可以得出一組參數值，並利用它來求得
一組新解。反覆求解一定次數後，便可得到近似最佳解。
而近年來也有許多 meta-heuristic 方法被應用到 p-median problem，在 1996 年 R. Erik、A.S.
David 及 R.C. John [4]應用禁忌搜尋法(tabu Search)解 P-中位問題，其中提到可以利用無效解
(infeasible solution)來加快搜尋的過程。此外 P. Hansen 以及 N. Ladenovic [5]在 1997 年提出了利
用多樣鄰域結構搜尋法(Variable Neighborhood Search)來解 P-中位問題。多樣鄰域結構搜尋法藉
由定義出多種不同的鄰域結構(Neighborhood Structure)，每次均在目前的所搜尋的解上，選定一
種結構，接著在這個鄰近的區域裡找出最好的另一組解。若比目前所搜尋的解還要來的好則將
解更新，反之如果沒有比較好，就再選擇另一種鄰域結構。再重複此一步驟，直到解到最佳解
或近似最佳解。由於 VNS 求解 problem size 較大的問題時效率不佳，因此在 2001 年時，P.
Hansen、N. Ladenovic 與 D. Perez-Brito[6]再度提出 Variable Neighborhood Decomposition Search，
利用分解問題的方式將 Neighborhood 的 search 範圍鎖定在幾個特定的解元素上以降低搜尋成
Sub-sequence 即參考該列的第 j 個因子，當 level 值為 0 時子代染色體將複製 parent 1 的第
j 段 Sub-sequence；而當 level 值為 1 時則複製 Parent 2，以此類推。
Step4.以評估函數計算所有測試子代的評估值 tE ，where t=1,2,..,x。評估函數就是按染色體所給的
順序依序執行完所有 Job 所需要的時間，即 makespan。
Step5.計算各因子的主效果 jkF ，where j=1, 2,.., x and k=0, 1。
Step6.找出每一個因子中最佳的 level 值，產生測試子代 1xC ，並計算評估值 1xE 。
Step7.從 tC 中依照 tE ，where t=1,2,..,x+1 選擇最佳的當做 Child。
本研究採用 Tabu Search 做為 Local Search，並以 Insertion operator 做為鄰域結構。其架構如
下：
Tabu Search procedure 接受兩個參數，π代表起始解；c 代表起始解的 Total flowtime。我們
用 π*與 c*來記錄目前找到的最佳解與其 Total flowtime，用 generation 來記錄執行了多少
iteration。第 9 行的 NSP(α)為 Neighborhood Search Procedure，它會傳回這目前這個解的
neighborhood 中最好的 move，而α則是代表 Search 的範圍(range)，是一個可由使用者自行設定
1. Procedure: Tabu Search(π, c)
2. begin
3. π*←π;
4. c*←c;
5. generation←0;   
6. stuck←0;
7. While (generation<maxGeneration) do
8. begin
9. BestMove← NSP(α);
10. addToTabuList(BestMove);
11. π← generateNewSchedule(BestMove);
12. c← evaluation(π); 
13. if (c<c*) then
14. begin
15. π*←π;
16. c*←c;
17. stuck←0;                
18. else begin
19. stuck←stuck+1;
20. if (stuck >= maxStuck) then
21. begin
22. perturbation( );
23. stuck←0;
24. end;
25. end;
26. generation← generation+1;
27. end;
28. returnπ*;
29. end;
OA_Mutation procedure 接受兩個參數，π代表欲執行 Mutation 的解；c 代表起始解的 Total
flowtime。同上述的 Local Search，我們使用π*與 c*來記錄目前找到的最佳解與其 Total flowtime，
Step 2.1 聯集 population 中 m 個 individual 的 median elite set
Step 2.2 對所有 individual 執行 m 次 OA-Local Search
}
swap(Pi,Vi) operator 的機制如下:
隨機取出要 swap 的 median Pi，且定義 Pi 所 Support 的顧客集合為 QPi
OA-Global Search
若 QPi 不為 O  50% Vi 隨機從 QPi 中挑選
 50% Vi 隨機從 V-S 中挑選，S 是 individual x 的 medians 的集合
若 QPi 為 O  100% Vi 隨機從 V-S 中挑選，S 是 individual x 的 medians 的集合
OA-Local Search
若 QPi 不為 O  50% Vi 隨機從 QPi 中挑選
 50% Vi 隨機從 elite set 中挑選
若 QPi 為 O  100% Vi 隨機從 elite set 中挑選
5. 實驗結果
5.1 流程工廠排程問題(Flow-Shop Sequencing Problem with minimized total flow-time)之實驗結果
本研究以 C++實作所提出之 GLS 演算法並且在 CPU 為 AMD K7 1.83GHz，記憶體為 512MB 的
個人電腦上進行實驗。第一組實驗，比較了幾種最近提出的 Meta-Heuristic 方法。各種方法所能找到
的最佳解，如 Table 1 所示。其中，第一個方法 LR 為 Liu and Reeves (2001)[4]在文獻中用來做為比較
標準的 best-heuristic solutions(以 heuristic 方法所找到最好的解)，不過這些解都不是用由同一種
heuristic 產生。M-MMAS 與 PACO 為由 Rajendran and Ziegler (2004)[7]所提出的兩種 Ant Colony
Algorithm，PSO 則是最近 Tasgetiren et al. (2005)錯誤! 找不到參照來源。 所提出的 Particle Swarm
Optimization Algorithm，而最後一欄為本研究所提出的 GLS 演算法。實驗一的實驗參數依問題大小
設定，當 problem 的 n=20 時:(1) GLS 的 Ps=50, Pm=10, TLS=5, stuck_Loop=10 and C_oaFactors=7；(2)
Tabu Search 的 maxGeneration=50, maxStuck=5, α=3； (3) OA_Mutation 的 maxGeneration=50,
maxStuck=5, replaceRate=105%, M_oaFactors=3。當 n=50 時，(1) GLS 的 Ps=200, Pm=10, TLS=5,
stuck_Loop=10 and C_oaFactors=15；(2) Tabu Search 的 maxGeneration=50, maxStuck=5, α=5；(3)
OA_Mutation 的 maxGeneration=100, maxStuck=5, replaceRate=105%, M_oaFactors=3。最後，當 n=100
時則是除了 C_oaFactors 增加為 31 之外其餘參數皆與 n=50 時相同。Table 1 的數據是根據上述的設定，
對每個問題執行了 10 次的獨立測試而得到的結果，其中以粗體字表現的部份代表所得到的最佳解優
於其他方法，於 90 題之中共計 53 題。
Table 3. 比較 GLS 與 PSO 的平均 CPU 時間。
第二組實驗我們與 Yamada and Reeves (YR)[12]於 1998 所提出的方法做比較。該方法同樣採
用 Genetic Local Search framework，並且針對Tailard’s benchmark problems 的前 5 個 Group 進行
測試(共 50 個 instance)。前 30 個 instances，該方法所找到的最佳解與 GLS 所找到的最佳解相同
(實驗於 HP workstation 執行，花費的時間在數秒鐘到數分鐘之間，但精確的時間在論文中並沒
有提供)。在此，我們也選擇相同大小的問題做測試，分別是 50*5 (ta031~ta040)與 50*10
(ta041~ta050)這兩個 Group。GLS 的實驗參數，則是針對 m 的大小而有所不同，50*5 的 problem
參數設定為：(1) GLS 的 Ps=1000, Pm=10, TLS=5, stuck_Loop=20 and C_oaFactors=15；(2) Tabu
Search 的 maxGeneration=100, maxStuck=5, α=5； (3) OA_Mutation 的 maxGeneration=100,
maxStuck=5, replaceRate=105%, M_oaFactors=3。對於 50*10 的 problem，除了 GLS 的 Pm=20 還
有 Tabu Search 的α=10之外其餘皆與 50*10 的參數相同。在對每個問題皆進行 10 次獨立的測試
後，結果如 Table 2 所示，GLS 在 20 個問題中找到了 17 個比 YR 更好的解(以粗體字表示)。在
時間的花費上，GLS 執行 50*5 的 problem 平均時間為 576.56 秒(約 10 分鐘)；50*10 的 problem
花費 3865.69 秒(約 64 分鐘)，YR 則是分別花費了 45 與 90 分鐘。由上述的兩個實驗可知，本研
究所提出的 GLS，不但可以在合理的時間內找到品質較好的解，在允許較長時間的情況下依然
可以找到更好的解。
Table 2. GLS 與 YR 的比較。
n*m PSO GLS
20,5 3.18 0.50
20,10 7.21 0.82
20,20 11.93 1.41
50,5 41.71 32.74
50,10 74.49 59.28
50,20 143.32 128.99
100,5 222.28 191.54
100,10 407.88 383.40
100,20 824.41 816.45
Mean 192.93 179.46
Instance YR GLS
min avg min avg
ta031 50,5 64860 64934.8 64838 64935
ta032 68134 68247.2 68135 68215
ta033 63304 63523.2 63258 63387
ta034 68259 68502.7 68226 68361
ta035 69491 69619.6 69397 69517
ta036 67006 6712736 66865 67008
ta037 66311 66450 66261 66336
ta038 64412 64550.1 64371 64538
ta039 63156 63223.8 62981 63096
ta040 68994 69137.4 68906 69020
ta041 50,10 87430 87561.4 87326 87627
ta042 83157 83305.8 83094 83434
ta043 79996 80303.4 79987 80235
ta044 86725 86822.4 96678 86907
ta045 86448 86703.7 86530 86841
ta046 86651 86888 86650 86917
ta047 89042 89220.7 89178 89434
ta048 86924 87180.5 86839 87035
ta049 85674 85924.3 85672 86018
ta050 88215 88438.6 88178 88658
ADE 三個方法而言有顯著的優勢，此外對 HY-DS 而言，其比較的基礎為 RUN 9 次實驗中取 median
的解，平均 deviation 為 0.022，相對於我們的方法而言，RUN 100 次實驗中，每個問題均有 69 次以
上能找到最佳解，因此 median 的平均 deviation 為 0，故在解品質部分也較 HY-DS 為佳。而在時間花
費的部分，OA-Search 平均只耗費 12.95 秒便可求解，均較其他的 5 個方法佳，而如同 P 較小的問題
一樣，雖然 RVNS 的時間花費非常少，然而其解品質仍然不佳。
Table 7. 與其他方法之比較 (對 P 大於 40 的問題)
OA-Search Lagrangean[3] RVNS [6] VNS [5] VNDS [6] ADE [1] HY-DS [7]
Problem Size # P OPT OPT
Reached
Best
Dev
AVG
Dev Time
Best
Dev Time
Best
Dev Time
Best
Dev Time
Best
Dev Time
Best
Dev Time
Medain
Dev Time
Pmed 9 200 40 2734 100 0 0 2.98 0 3.34 0.69 0.70 0 11.5 0.69 2.33 0 1.2 0 1.5
Pmed 10 200 67 1255 100 0 0 2.98 0 3.89 2.63 0.47 0 2.8 0.32 2.42 0.08 2 0 1.6
Pmed 14 300 60 2968 100 0 0 4.63 0 7.34 0.40 1.13 0.03 16.6 0.03 9.48 0 4.4 0 13.5
Pmed 15 300 100 1729 94 0 0.0035 4.53 0 11.11 0.75 0.95 0 30.48 0.12 10.08 0.23 6.3 0.006 4.3
Pmed 18 400 40 4809 92 0 0.0029 8.32 0 7.06 0.12 1.88 0 34.76 0.04 22.06 0 5.6 0.005 6.7
Pmed 19 400 80 2845 96 0 0.0042 7.59 0 11 0.60 2.09 0.04 138.46 0.14 24.32 0.04 13.3 0 7.5
Pmed 20 400 133 1789 100 0 0 7.78 0 18.52 0.39 2.22 0 80.5 0 26.13 0.17 16.3 0 8.6
Pmed 23 500 50 4619 100 0 0 12.96 0 10.89 0.09 4.27 0.09 46.44 0 15.9 0 11
Pmed 24 500 100 2961 90 0 0.0068 11.91 0 21.72 0.24 3.99 0 106.08 0 53.47 0.03 21.1 0 13.1
Pmed 25 500 167 1828 83 0 0.0268 12.04 0 32.73 0.77 2.90 0 103.97 0.11 54.94 0.22 31.6 0 16.2
Pmed 28 600 60 4498 99 0 0.0002 17.92 0 21.61 0.18 3.54 0 62.7 0.16 87.24 0.02 24.5 0 17.4
Pmed 29 600 120 3033 100 0 0 15.96 0 34.39 0.30 3.97 0 309.51 0.20 96.53 0.07 43.7 0 21
Pmed 30 600 200 1989 74 0 0.0236 15.88 0.101 76.19 0.75 4.30 0.15 261.06 0.05 101.45 0.4 79 0 26.9
Pmed 33 700 70 4700 96 0 0.0026 22.56 0 28.98 0.15 5.37 0 296.4 0.06 148.44 0 45.4 0 26.7
Pmed 34 700 140 3013 99 0 0.0003 21.12 0 54.01 0.27 9.23 0 423.98 0.10 166.46 0.07 65.2 0 30.8
Pmed 37 800 80 5057 94 0 0.0012 27.30 0 33.88 0.34 5.70 0 62.06 0.18 226.32 0.02 75.9 0 32.4
Pmed 40 900 90 5128 69 0 0.007 32.57 0.02 50.47 0.12 10.47 0.04 1027.5 0.12 326.62 0.1 132.2 0.011 43.4
SUM
Dev 0 0.0791 0.121 8.79 0.26 2.41 1.45 0.022
AVG
Time 13.47 25.13 3.71 174.61 82.63 34.33 15.86
6. 結論
如上所討論，本研究提出將基因演算法與軌跡搜尋法結合在一起，其中基因演算法負責大範圍
的整體搜尋（global search），而軌跡搜尋法則負責比一般所謂局部搜尋（local search）範圍較
大的局部搜尋；此外我們也著重地研究正交陣列交配運算子（orthogonal array crossover
operator），我們將所發展的方法應用到流程工廠排程問題（flow-shop scheduling problem）。
另外，我們也應用正交陣列之局部搜尋法當作軌跡搜尋法中所使用的局部搜尋法，利用兩階段式的
搜尋來解P-中位問題（P-median problem）。
用我們的方法來解benchmark instances好用來測試其效能，並將結果與其他方法之結果作比
較，我們的方法效能確實比較好。我們也將所發展的方法應用到旅行推銷員問題，但是結果並沒有
比我們先前所提出的ANGEL好，因此沒有將其結果放在本報告中。
根據我們的經驗全域搜尋法配合局部搜尋法一般都可以有不錯的結果，但是針對不同的問題，
P-中位問題
[1] ALP, E. Erkut, and Z. Drezner,“An efficient genetic algorithm for the p-median problem,”Annals
of Operations Research, Vol.122, pp.21-42, 2003
[2] J.E. Beasley, “A Note on Solving Large p-Median Problems,”European Journal of Operational
Research, Vol.21, pp.270-273, 1985
[3] J.E. Beasley, “Lagrangean heuristics for location problems,”European Journal of Operational
Research, Vol.65, pp.383-399, 1993
[4] R. Erik, A.S. David, and R.C John,“A efficient tabu search procedure for the P-Median Problem,”
European Journal of Operational Research, pp.329-342, 1996
[5] P. Hansen, and N. Mladenovic, “Variable neighbor search for P-median problem,”Elsevier,
Location Science, Vol.5, No.4, pp.207.226, 1998
[6] P. Hansen, N.Mladenovic, and D. Perez-Brito, “Variable neighborhood decomposition search,”
Journal of Heuristics, Vol.7, No.3, pp.335-350, 2001
[7] M.G..C. Resende, and R.F. Werneck, “A hybrid heuristic for the p-median problem,”Journal of
Heuristics, Vol.10, pp.59-88, 2004
[8] M.B. Teitz, and P. Bart, “Heuristic methods for estimating the generalized vertex median of a
weighted graph,”Operations research, Vol.15, pp.955-961, 1968
[9] R.Whitaker, “A fast algorithm for the greedy interchange of large-scale clustering and median
location problems,”INFOR, Vol.21, pp.95-108, 1983
計劃成果自評
本計劃發展了兩個方法分別解流程工廠排程問題與 P-中位問題，都得到比文獻上的方法好的結
果，至於解旅行推銷員問題，雖然也得到好的結果，但是沒有比我們先前提出的 ANGEL 好，所以就
沒有把結果放到這報告中。
基本上，本計畫所想達成的目標已達到了，但是，我們覺得在 metaheuristics 的研究上仍有許多
重要的議題應該被探討、研究，當愈來愈多的 metaheuristics 被提出來，而且各種 metaheuristics 也被
作 hybridization 來解問題，可是我們發現因為 metaheuristics 用到了 randomness，幾乎沒有一個
metaheuristics 是比較有系統而且較可控制的作搜尋，因此我們下一步的研究想就這個主題作更深入
的研究。
A Hybrid Genetic Algorithm for
the Flow-Shop Scheduling Problem*
Lin-Yu Tseng and Ya-Tai Lin
Department of Computer Science, National Chung Hsing University,
250 Kuo Kuang Road, Taichung, Taiwan
lytseng@cs.nchu.edu.tw
http://oblab.cs.nchu.edu.tw
Abstract. The flow-shop scheduling problem with the makespan criterion is an important production scheduling problem.
Although this problem has a simple formulation, it is NP-hard. Therefore many heuristic and metaheuristic methods had been
proposed to solve this problem. In this paper, a hybrid genetic algorithm is presented for the flow-shop scheduling problem. In
our method, a modified version of NEH with random re-start is used to generate the initial population. Also, a new orthogonal
array crossover is devised as the crossover operator of the genetic algorithm. The tabu search is hybridized with the genetic
algorithm and acts as the local search method. The proposed algorithm had been tested on two benchmarks. The results are
compared with those of other methods that had also been tested on these benchmarks. The comparison shows that our method
outperforms other methods on these benchmarks.
Keywords : Genetic Algorithms, Planning and Scheduling
1 Introduction
The flow-shop scheduling problem is one of the best known production scheduling problem. There are several optimization
criteria for this problem. The most common used criterion is to minimize the maximum completion time, i.e. the makespan. The
flow-shop scheduling problem with the makespan criterion is defined as follows:
Suppose that there are n jobs and m machines. Each of n jobs is to be sequentially processed on machines 1, 2... m. The
processing time of job i on machine j is given as Tij. At any time, each job can be processed on at most one machine and each
machine can process at most one job. Also, once a job is processed on a machine; it cannot be terminated before completion. The
sequence in which the jobs are to be processed is the same for each machine. And the objective is to find a permutation for jobs
such that makespan is minimized.
The formulation of the problem is simple, yet the problem is NP-hand [4]. Since this problem is an important problem both in
theory and in practice. Many methods had been proposed and they can be classified as in one of the following three classes.
(1)The exact methods [1]: Most of these methods use the branch-and-bound strategy. Although some easy instances having 200
jobs can be solved by these methods in reasonable time, the branch-and-bound scheme fails in finding the optimal solution of
many hard instances with only 50 jobs and 20 machines[14]. The exact methods had reach their limit. The computation time
for large instances and hard instances is not affordable.
(2)The heuristic methods[3][9]: These methods are constructive heuristic method. They in general are vary fast but suffer from
poor solution quality. The best method among these methods is NEH [9]. But the mean relative error of the makespan provided
by NEH to the lower bound of the optimal makespan is still above 5%.
(3)The metaheuristic methods: In recent years various metaheuristic methods had been applied to solve the flow-shop scheduling
problem. These include simulated annealing [7][11], tabu search [6][10][15], genetic algorithm [12] and hybrid metaheuristic
[13][16][17]. Metaheuristic methods in general obtain much better solution quality than heuristic methods do. And the
computation time is much less than that of the exact methods.
Begin form Taillard [15], tabu search [5] had been applied to the flow-shop scheduling problem rather successfully. Following
this line, Nowicki and Smutnicki [10] proposed the tabu search algorithm with back jump tracking (TSAB) based on a
neighborhood structure defined by the blocks on the critical path. Grabowski and Wodecki [6] also used tabu search but they
devised a method to estimate the lower bound of a local search operation in order that the time needed for local search can be
reduced. Reeves and Yamada [13] hybridized the genetic algorithm and the path relinking in solving this problem. Wang and
Zheng [16] used genetic algorithm but they partitioned the population into subsets and applied different crossover operators to
different subsets in order to sustain the diversity of the population. They also hybridized the simulated annealing with the genetic
algorithm as a local search method. Another hybrid algorithm of the genetic algorithm and the ordinal optimization was proposed
by Wang et al. [17].
In this paper, we proposed a hybrid algorithm for the flow-shop scheduling problem. This algorithm hybridizes the genetic
algorithm, which acts as the global search method and the tabu search, which acts as the local search method. The proposed
* This work was partially supported by the National science council, R.O.C. under contract NSC 94-2213-E-005-020.
2.2 The Orthogonal Array Crossover
In a flow-shop scheduling problem that has n jobs and m machines, the chromosome in our genetic algorithm is coded as a
permutation of 1, 2,…,n. The crossover operator applied for such chromosomes usually uses one or two cut point. But in this
study, we use six cut points in the crossover operator by utilizing an orthogonal array L8(2
7) as shown in Table 1. The orthogonal
array crossover operator is described in the following.
Step1. Given two parent chromosomes. Randomly choose six cut points for parents. So there are seven subsequences of each
parent chromosome.
Step2. Consulting the ith row of the orthogonal array L8(2
7) to produce child i, Ci for i=1, 2, …, 8. The jth subsequence of Ci
comes from the jth subsequence of parent 1 if the jth factor has level 0 in the ith row. Otherwise, the jth subsequence of Ci
comes from the jth subsequence of parent 2. When inheriting the jth subsequence from a parent, if a job in this
subsequence has already been inherited by Ci, then this job will not be inherited and a space will occupy this position of Ci.
After all subsequences were inherited, all space in Ci are filled by jobs not shown in Ci with the order that they appear in
parent 1.
Step3. Compute the makespan for each child Ci. Take this value as the evaluation value Ei.
Step4. Compute the main effect of factor j with level k, Fjk, for j=1, 2,…, 7 and k=0, 1.
Step5. Find the best combination of each factor’s level. Use the best combination to produce child C9. Evaluate the makespan of
C9.
Step6. Choose from C1, C2,…, C9 the one that has the best makespan as the child C of the crossover of parent 1 and parent 2.
3 The Hybrid Genetic Algorithm
In this section, we describe the proposed hybrid genetic algorithm for the flow-shop scheduling problem. The genetic algorithm
acts as a global search method in this algorithm. Especially the orthogonal array crossover is used as the crossover operator in
order to increase the strength of intensification. The tabu search is hybridized with the genetic algorithm in order to improve the
local search ability. The proposed algorithm is described in the following.
Step1. Set population size Ps, mutation rate Pm , the number of Max_Stuck and set Sl=0.
Step2. Use NEH-RS-M to generate the initial population. (NEH-RS-M will be described in section 3.1).
Step3. Compute the makespan of each chromosome in the population. Let the best chromosome beπ* and its makespan be C*.
Step4. For each chromosome P1 in the population, randomly choose another chromosome P2 (different from P1). Apply orthogonal
array crossover operator to P1 and P2 and obtain child C. If the makespan of C is better than that of P1 or P2, apply the local
search to C and replace the worse one of P1 and P2 by C. (The local search is a tabu search and will be described in section
3.2).
Step5. Randomly choose Ps*Pm chromosomes. Apply mutation operator to each chosen chromosome. (The mutation operator will
be described in subsection 3.3).
Step6. Compute the makespan of each chromosome in the population. Let the chromosome with the best makespan be π1 and its
makespan be C1. If C1<C
* then C*←C1 andπ*←π1. Otherwise, Sl←Sl+1.
Step7. If Sl > Max_Stuck then stop else go to Step4.
3.1 NEH-RS-M
Selecting a good set of chromosomes as the initial population usually improves the performance of a genetic algorithm. In order
to generate a good initial population for the genetic algorithm, a modified version NEH-RS-M of NEH-RS (NEH with random
re-start) [18] is applied. This algorithm is stated as follows.
Step1. Compute the total processing time 


m
j
iji TT
1
for each job i.
Step2. Sort Ti in nonascending order. Let L be the sorted list of jobs according to this ordering.
Step3. Randomly choose two jobs from the first half of L. Move these two jobs to L[1] and L[2]. Find the best scheduling of L[1]
and L[2], that is, a scheduling of these two jobs that has the best makespan. Denote this scheduling by S2.
Step4. For i=3 to n
1.πrepresents a solution.π(i)denotes the job in the ith position.
2. ajS denotes the critical block immediately before the critical block in which job j resides. Pa represents
the last position of ajS . ||
a
jS is the size of ajS .
3. bjS denotes the critical block immediately after the critical block in which job j resides. Pb represents the
first position of bjS . ||
b
jS is the size of
b
jS .
4. Ins(x, y) represents the insertion operator by which the job in position x is inserted in position y.
5. Exch(x, y) represents the exchange operator by which the jobs in position x and position y are
interchanged.
Procedure Find_Best_Move (π, C)
Step1. Set i=1, Cbest=C and BestMove=Ins(1,1).
Step2. Find a critical path ofπand find the critical blocks.
Step3. If i ≦ n (n is the number of jobs) then go to Step4 else return BestMove.
Step4. Evaluate the lower bound of Ins(π(i),π(Pa)). If this lower bound ≦ 0 then go to Step5 else go to Step6.
Step5. Evaluate the makespan ofπafter applying Ins(π(i),π(k)), where k= Pa, Pa -1,…, Pa-min(α, || ajS -1). If the best one among
these schedulings has a makespan better than Cbest, then update Cbest and store that insertion operator in BestMove.
Step6. Evaluate the lower bound of Ins(π(i),π(Pb)). If this lower bound ≦ 0 then go to Step7 else go to Step8.
Step7. Evaluate the makespan of πafter applying Ins(π(i),π(k)), where k= Pb, Pb +1,…, Pb+min(α, || bjS -1). If the best one
among these schedulings has a makespan better than Cbest, then update Cbest and store that insertion operator in BestMove.
Step8. i←i+1, go to step3.
The procedure perturbation( ) used in the tabu search is just the same as that in Grabowski and Wodecki
[6].
3.3 Mutation
The mutation operator is used to diversify the population in the genetic algorithm. Suitable application of the proper mutation
operator can prevent the premature convergence of the genetic algorithm. Since the insertion operator has been used in the local
search, we use the exchange operator as the mutation operator. Randomly choose Ps*Pm chromosomes from the population, where
Ps is the population size and Pm is the mutation rate. For each chosen chromosome, apply Exch(x, y) t times, where x, y are
randomly chosen positions and 1 ≦ t ≦ T with T being a predefined number.
4 Experimental Results
The proposed hybrid algorithm had been implemented with C++ language on a personal computer whose CUP is AMD 1.83GHz
and memory size is 512MB and the operating system is Windows XP. The algorithm had been tested on two benchmarks
developed by Carlien [2] (Car1 to Car8) and by Reeves [12] (rec0, rec3,… rec41). These two benchmarks include twenty-nine
instances in total.
In this experiment, the parameters in our algorithm are set as follows: population size Ps is 50; Mutation rate
Pm is 0.1; the max_generation in the tabu search is 50; the max_stuck in the tabu search is 3;αis set to 3 and
the length of tabu list is 6.
The algorithm was tested on each instance twenty times. The results are summarized in Table 2. In Table 2,
n is the number of jobs; m is the number of machines; Copt gives the makespan of the optimal solution;
maxStuck is the number of maximum stuck allowed in the main program; T is the maximum number of the
exchange operation; min, max and avg list the maximum, the minimum and the average makespans found in
the twenty runs; Avg Time gives the average CPU time and Opt. gives number of the optimum findings
within twenty runs.
