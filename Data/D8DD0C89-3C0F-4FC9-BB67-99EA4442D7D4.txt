submitted to an external 
verification tool. 
  
In this project, we aim at improving the modularity 
of the aforementioned 
approach. 
The project had originally been proposed for three 
years, but unfortunately 
was approved for only one year. 
We therefore focus on modular abstraction of 
sequential (single-threaded)  
programs, 
trying to expand the instrumentation rules to permit 
the instrumentation 
and analysis of a program piece by piece, in 
particular for programs with 
recursive procedures. 
 
英文關鍵詞： Abstraction, Hoare Logic, Interprocedural Analysis, 
Memory Safety, Program Instrumentation, Separation 
Logic, Shape Analysis, Static Analysis, Termination, 
Verification. 
 
Abstract
Verification of programs with pointers that manipulate data structures on the heap is a
challenging problem and remains an active area of research. Typical properties of interest
in such verification include memory safety and termination. We have contributed in the
past to the development of an approach that proceeds in two stages and leverages external
verification tools. In the approach, the program under verification is first instrumented
with additional commands and auxiliary variables that capture the numerical properties of
data structures on the heap. The instrumented program is then abstracted by removing
all pointer-related commands to result in a pure numerical program and submitted to an
external verification tool.
In this project, we aim at improving the modularity of the aforementioned approach.
The project had originally been proposed for three years, but unfortunately was approved
for only one year. We therefore focus on modular abstraction of sequential (single-threaded)
programs, trying to expand the instrumentation rules to permit the instrumentation and
analysis of a program piece by piece, in particular for programs with recursive procedures.
Keywords: Abstraction, Hoare Logic, Interprocedural Analysis, Memory Safety, Pro-
gram Instrumentation, Separation Logic, Shape Analysis, Static Analysis, Termination,
Verification.
驗證運用指標變數來操作堆積上資料結構的程式是一項具挑戰的議題，也是近來持續
很活躍的一項研究。在驗證分析此類程式的性質中，有兩個較有趣的基本性質：記憶體存
取安全性與程式的終止性。針對具指標變數的程式之驗證，我們已貢獻一個二階段分析方
法，可以善加利用外部現存的驗證分析工具。這個方法首先透過形狀分析及插碼的手段以
輔助變數捕捉原有程式中資料結構的數量性質，接著以抽象化手法移除所有指標變數相關
的程式碼並交付外部工具完成最後的驗證。
在這個計畫中，我們嘗試增進此項二階段分析方法的模組化能力。原本我們提案進行三
年的研究，但可惜僅獲得一年的補助。因此，我們就專注於循序(即單執行緒)程式，擴充進
行插碼所依據的理論法則，使得程式插碼與分析可以分散並獨立在各個程式片段或程序中
進行。
關鍵詞：抽象化、Hoare邏輯、跨程序分析、記憶體安全、程式插碼、分離邏輯、形狀
分析、靜態分析、終止性、驗證。
1 Introduction (簡介：背景、動機與目的)
Pointers and threads are two popular features of imperative programs, such as operating system
kernels, program libraries, and user-space applications. Pointers are widely used to manipulate
dynamically allocated data structures in the heap while threads with shared data is a pop-
ular implementation of concurrent programs that make better performance and availability,
especially in a multi-core environment. Ensuring the correctness of programs with pointers
and threads is important because programming in such environment is error prone and the
programs will be unsafe and suffer from hackers’ attacks. The pointer aliases, data sharing,
and dynamic allocation and deallocation features of a program with pointers make the data
structure manipulation easy to have irregular memory access such as null-pointer dereferencing,
access of dangling pointers, double deallocation, and memory leaks, and in which case the pro-
gram will abort, produce unexpected results, or fail to terminate. The parallel execution and
locking mechanism of a threaded program make it easy to produce unexpected results due to
race conditions or to get stuck because of deadlocks.
It is challenging in verifying programs with pointers and threads. The concrete state space to
be examined is essentially infinite because the number of data elements in a heap and the values
2
Berdine et al. uses formulae of a decidable fragment of separation logic [4], which extends the
decidable fragment in [13] with linked list predicates, to represent memory states symbolically
and automates the intra-procedural analysis of loop-free heap programs. The basic symbolic
execution was extended by Magill et al. with an automatic inference procedure of loop invari-
ants [27]. The scalability of heap analysis was improved by an widening operator proposed by
Yang et al. to accelerate the loop invariant inference. While a pre-condition is required by the
basic symbolic execution, there are works that can synthesis a pre-condition, called footprint,
for the program to execute safely [12].
There are other rich research works in separation logic such as a history-guided abstraction
and widening proposed by Chang et al. [16], a two-phased widening operator over the combi-
nation of shape and data domains proposed by Chang and Rival [14], efficient separation logic
entailment checking considered by Nguyen et al. [31, 30], and complex program features such
as composite data structures, pointer arithmetic, and low-level C memory model [3, 11, 44].
The three-valued logic analysis (TVLA) on heap programs was proposed by Sagiv et al. in
1999 [42, 43]. This analysis is based on abstract interpretation [19] and uses a three-valued
logic as the abstract domain instead of shape graphs [40, 41]. In [7], Beyer et al. improves the
efficiency by combining counterexample guided abstract refinement, Craig interpolation, and
TVLA such that the shape predicates are introduced incrementally only when they are needed.
The flexibility was extended by Arnold with a loose embedding which allows summaries to
represent zero nodes such as possibly empty linked lists [1].
2.2 Numeric Abstraction
The automatic numeric abstraction of heap programs that may manipulate linked lists was
first proposed by Magill et al. in 2007 [26] to explicitly reveal the length of linked lists in
programs. Their approach can be seen as a specialized case of our later work in 2010 [29] which
performs a two-staged analysis, namely instrumentation and numeric abstraction, supports
user-provided data structures inductively defined in separation logic formulae, and provides a
prototype implementation [28]. The later general work can reveal (with abstraction) and extract
definable numeric properties of data structures but does not support recursive procedures,
concurrency, and composition, and can perform the extraction only when the instrumentation
can prove the memory safety of the original programs.
There are other works performing direct analysis on the numeric properties of data struc-
tures. Berdine et al. proposed a rank synthesis for proving the termination of a heap program
whose termination may depend on depth of data structures such as the length of linked lists [6].
Bouajjani et al. [8] uses counter automata as the abstract domain of concrete heaps containing
linked lists with length information. Their work was later extended by Habermehl et al. to
prove the termination of programs manipulating tree-like data structures [22].
2.3 Inter-Procedural Analysis
The summary-based inter-procedural analysis with static variable binding was investigated by
O’Hearn et al. in [33, 34], while the dynamic variable binding was addressed by Parkinson and
Bierman in [35] and by Gotsman et al. in [21]. The inlining-based inter-procedural analysis was
recently improved by Rival and Chang in [15]. In [37], partial specifications of functions provided
by the user can be refined with missing shape constraints and various numeric properties of
various types such as integers and multi-sets.
4
The execution of a program is a transformation of memories where each consists of a stack
and a heap. A stack is a map from a program variable to a value while a heap is a partial map
from an address to a memory cell, which is a record. For simplicity, the value is restricted in
integers which is a super set of valid addresses and a special address null. A special memory
state error will be reached if there is a memory access error.
Addresses a ∈ A ∪ {null}(⊂ Z)
Records r : F fin⇀ Z ∈ R
Stacks s : V→ Z
Heaps h : A fin⇀ R
Memories m = (s, h)
The semantics of a command c, denoted by [[c]], is listed in Figure 2 where (1) [[e]]s : Z
and [[b]]s : {true, false} are the evaluation of an expression e and the evaluation of a boolean
expression b on a stack s respectively, which are quite standard and ignored here, (2) dom(h)
is the domain of a heap, that is, the set of addresses that have been allocated in the heap, (3)
g[x→ v] is a stack or heap which is the same as g, except that x is mapped to v, (4) h[x.f → v]
is a heap that is the same as h, except that the record at x maps the field f to v, and (5) h−X
is a heap obtained by restricting the domain of h to dom(h)−X.
[[skip]](s, h) = {(s, h)}
[[x := e]](s, h) = {(s[x→ [[e]]s], h)}
[[x := ?]](s, h) = {(s′, h) | s = s[x→ v] ∧ v ∈ Z}
[[x := y.f ]](s, h) = {(s[x→ (h(s(y)))f ], h)} if s(y) ∈ dom(h) and
f ∈ dom(h(s(y)))
{error} otherwise
[[x.f := e]](s, h) = {(s, h[s(x).f → [[e]]s])} if s(x) ∈ dom(h) and
f ∈ dom(h(s(x)))
{error} otherwise
[[x := alloc(f1, . . . , fn)]](s, h) = {(s′, h′) | h′ − {v} = h and dom(h′(v)) = {f1, . . . , fn}
and s′ = s[x→ v] and v ∈ A}
[[free(x)]](s, h) = {(s, h− {s(x)})} if s(x) ∈ dom(h) ∪ {null}
[[abort]](s, h) = {error}
Figure 2: Semantics of commands
The semantics of a program statement S listed in Figure 3 is captured by Γ ` 〈S, st〉; st ′
where Γ is a set of function definitions, st is the state before the execution of the statement,
and st ′ is the state after the execution of the statement. A state st can be a normal state
(s, h) or an error state error. Listed in Figure 4 is the semantics of a well-formed program
P = f1 (in ~x1; inout ~y1) S1; · · · ; fn(in ~xn; inout ~yn) Sn.
Figure 5 gives an example of a program with some annotations enclosed by {} which will be
explained later. This program first declares an integer counter i and two linked-list pointers x
and tmp at lines 3-5, then creates a linked list with n elements and make x points to the head
of the linked list at lines 7-13, and finally removes all the n elements from the linked list at lines
17-23.
6
1 main() {
2 {emp}
3 x := null;
4 tmp := x ;
5 i := 0;
6 {∃k . ls(k , x , null)}
7 while (i < n) do
8 tmp := alloc(next , data);
9 tmp.data := i ;
10 tmp.next := x ;
11 x := tmp;
12 i := i + 1;
13 od
14 {∃k . ls(k , x , null)}
15 j := 0;
16 {∃k . ls(k , x , null) ∧ j = 0}
17 while (j < n) do
18 {∃k. ls(k, x, null) ∧ j = 0 ∧ j < n}
19 tmp := x ;
20 x := x .next ;
21 free(tmp);
22 j := j + 1;
23 od
24 }
Figure 5: A simple program Ps with
some annotations enclosed by {}
1 m̂ain() {
2 {emp}
3 x := null;
4 tmp := x ;
5 i := 0;
6 {∃k . ls(k , x , null)}
7 k := ?;
8 {ls(k , x , null)}
9 while (i < n) do
10 tmp := alloc(next , data);
11 tmp.data := i ;
12 tmp.next := x ;
13 x := tmp;
14 i := i + 1;
15 {ls(k + 1, x , null)}
16 k := k + 1;
17 {ls(k , x , null)}
18 od
19 {ls(k , x , null)}
20 j := 0;
21 {ls(k , x , null)}
22 while (j < n) do
23 {ls(k , x , null) ∧ j < n}
24 tmp := x ;
25 x := x .next ;
26 free(tmp);
27 j := j − 1;
28 ?
29 od
30 {∃k . ls(k , x , null)}
31 }
Figure 6: A partially instrumented
program P̂s of Ps
(s, h) |= Q1 implies (s, h) |= Q2 for all memories (s, h). Sometimes Q2 may only describe a
part of the heap. In this case, the entailment is designed to infer the rest of the heap. We will
write Q1 ` Q2\Q3 to mean that Q3 is inferred by the entailment such that Q1 ` Q2 ∗Q3. The
entailment is used in the symbolic execution which will be described later.
A specification of a statement S is represented as a Hoare triple {Q1} S {Q2} where Q1 is
the pre-condition and Q2 is the post-condition of the statement [24, 20].
Specifications ::= {Q} S {Q}
A function specification is a specification of its function body. A program specification contains
specifications of all functions defined in the program.
The Hoare triple {Q1} S {Q2} holds iff ∀(s, h). (s, h) |= Q1 implies
• ¬(〈S, (s, h)〉; error) and
• ∀(s′, h′), 〈S, (s, h)〉; (s′, h′) implies (s′, h′) |= Q2.
8
Assign
{∃x′. x := e[x′/x] ∧Q1[x′/x]} P {Q2}
{Q1} x := e;P {Q2}
x′ fresh
Lookup
{∃V, x′. x := v[x′/x] ∧ (Q1 ∗ y 7→ [f : v, ρ])[x′/x]} P {Q2}
{∃V. Q1 ∗ y 7→ [f : v, ρ]} x := y.f ;P {Q2}
x′ fresh
Mutate
{∃V. Q1 ∗ v 7→ [f : e; ρ]} P {Q2}
{∃V. Q1 ∗ x 7→ [f : v, ρ]} x.f := e;P {Q2}
Alloc
{∃v1, . . . , vn. Q1 ∗ x 7→ [f1 : v1, . . . , fn : vn]} P {Q2}
{Q1} x := alloc(f1, . . . , fn);P {Q2}
v1, . . . , vn fresh
Free
{∃V. Q1} P {Q2}
{∃V.Q1 ∗ x 7→ [ρ]} free(x);P {Q2}
Branch
{Q1 ∧ e1} P1;P3 {Q2} {Q1 ∧ e2} P2;P3 {Q2}
{Q1} branch e1 ⇒ P1, e2 ⇒ P2 end;P3 {Q2}
While
Q1 ` Qinv {Qinv ∧ e} P1 {Qinv} {Qinv ∧ ¬e} P2 {Q2}
{Q1} while e do P1 od;P2 {Q2}
Figure 10: A partial list of symbolic execution rules in [5]
• tmp 7→ [next : x , data : i ] ∧ x = null ∧ i = 0 ∧ i < n after tmp.next := x ,
• ∃x ′. tmp 7→ [next : x ′, data : i ] ∧ x = tmp ∧ x ′ = null ∧ i = 0 ∧ i < n after x := tmp, and
• ∃x ′, i ′. tmp 7→ [next : x ′, data : i ′]∧ x = tmp ∧ x ′ = null ∧ i = i ′ + 1∧ i ′ = 0∧ i ′ < n after
i := i + 1.
Note that the last symbolic memory entails x 7→ [next : null, data : 0] ∧ x = tmp ∧ i = 1.
During the symbolic execution, it is important to infer the loop invariants, that is, Qinv
in the While symbolic execution rule. A typical way to do this is to unroll the loop and
iteratively execute the loop body to see if we reach a memory state that has been reached
during the iteration. Suppose we are going to infer the invariant of a loop while e do P od
starting with a memory Q0. The algorithm described in [27] is given below.
1. Let Q′0 = Q0.
2. Give Q′0, . . . , Q′i, compute Qi+1 such that {Q′i ∧ e} P {Qi+1}.
3. Let Q′i+1 = abst(Qi+1) where abst is an abstraction function described later.
4. If Q′i+1 ` Q′0 ∨ · · · ∨Q′i then Q′0 ∨ · · · ∨Q′i is the invariant. Otherwise, return to step 2.
Without the abstraction function abst , we may fail to infer the loop invariant every time.
For example, if we want to compute the invariant of the first while loop of the program Ps in
Figure 5 starting with emp∧ x = null∧ tmp = x ∧ i = 0 without abst , we will get the following
memories after each iteration:
10
Figure 11: Instrumentation and numeric abstraction
3.4 Instrumentation and Numeric Abstraction
The discard of some irrelevant information by the symbolic execution in order to infer loop
invariants sometimes may cause problems. For example, at line 14 of the program Ps, it wants
to dereference the pointer x with a symbolic memory ∃k . ls(k , x , null) ∧ j = 0 ∧ j < n. From
the symbolic memory, we only know that x points to a possibly empty linked lists because the
abstraction discards the precise integer values of i and k in order to infer the invariant of the
first loop. If the linked list is empty (k = 0), then x = null according to the definition of ls and
the symbolic execution will fail due to a null-pointer dereference. However, this null-pointer
dereference will never happen because the second loop only deletes as many list elements as
created by the first loop. Thus a more precise information about the length of the linked list,
or in general the numeric properties of data structures, is required to make the analysis more
solid.
One approach to obtain more precise information about the numeric properties of data
structures is to apply a stronger numeric analysis together with symbolic execution such that
they can derive a symbolic memory ∃k . ls(k , x , null)∧k = n−j at line 17 and ∃k . ls(k , x , null)∧
k = n − j ∧ j < n at line 18. Thus we know that the the linked list is not empty because its
length k = n − j is greater than 0 and the symbolic execution succeeds to continue. However,
the stronger numeric analysis adds lot of complexity to the symbolic execution.
Another approach, called numeric abstraction [28, 29], is based on the observation that there
are several existing analyzers, such as blast [23], slam [2], armc [36], terminator [17, 18],
etc., successful in analyzing pure integer programs but they do not support (or has a limited
support for) the analysis of heaps and pointers. Thus the numeric abstraction approach first
performs instrumentation on the original program with pointers to insert new variables and
commands to track the numeric properties of data structures (e.g. length of linked lists, height
of trees, and so on), then extracts a pure integer program from the instrumented program, and
finally applies those external tools to analyze the numeric properties of the integer program, as
illustrated in Figure 11.
12
we proposed a new instrumentation rule Inst-Reveal.
Inst-Reveal
x ∈ deref (c) rearrange(x,Q1 ∧ e) = false Γ ` c;S JV {Q1 ∧ ¬e} ĉ;S {Q2}
Γ ` c;S JV {Q1} if e then abort else ĉ;S fi {Q2}
In the rule, deref (c) is the set of dereferenced variables by the command c and rearrange(x , Q)
returns x 7→ ∗ Q′ if Q ` x 7→ \ Q′ and false otherwise. Basically, rearrange(x , Q) tries to
expose in Q the record pointed-to by x . More details of rearrange can be found in [29]. With
Inst-Reveal, the second while loop in the instrumented program P̂s becomes:
21 {ls(k , x , null)}
22 while (j < n) do
23 {ls(k , x , null) ∧ j < n}
24 if (k = 0) then
25 abort;
26 else
27 {ls(k , x , null) ∧ j < n ∧ k > 0}
28 tmp := x ;
29 x := x .next ;
30 free(tmp);
31 j := j − 1;
32 {ls(k − 1, x , null) ∧ k > 0}
33 k := k − 1;
34 {ls(k , x , null)}
35 fi
36 {ls(k , x , null)}
37 od
38 {ls(k , x , null) ∧ j > n}
The case analysis of the instrumentation variable k is performed in line 24 such that the update
of k can be successfully carried out in line 33 after removing the head from the linked list.
4.2 Intra-Procedural Numeric Abstraction
Given an instrumented program P̂ without functions, the numeric abstraction produces an
integer program P˜ such that P˜ can simulate the behaviors of P̂ . The rules of numeric abstraction
are partially listed in Figure 13 where V is a set of integer variables to be extracted, numexpV (b)
is the numeric abstraction of boolean expressions, numabsV (S) is the numeric abstraction of
program statements, and fv(g) is the set of free variables of g.
The extracted integer program P˜s from the instrumented program P̂s of Ps is shown in
Figure 14. All the skip commands are omitted in P˜s. An external numeric analyzer such as
blast should be able to derive that k = n − j at line 9 of P˜s and thus P˜s will not abort. Since
the numeric abstraction ensures that the extracted integer program simulates the instrumented
program and the instrumentation ensures that the instrumented program simulates the original
program with pointers, we can conclude that the original program Ps is memory safe with the
help of external numeric analyzers.
14
1 m˜ain() {
2 i := 0;
3 k := ?;
4 while (i < n) do
5 i := i + 1;
6 k := k + 1;
7 od
8 j := 0;
9 while (j < n) do
10 if (k = 0) then
11 abort;
12 else
13 j := j − 1;
14 k := k − 1;
15 fi
16 od
17 }
Figure 14: The integer program P˜ extracted from P̂s with skip omitted
of main, to prove that {ls(m, x , null) ∧ m > 0} ̂remove(; x ,m); {ls(m, x , null)} instruments
remove(; x ); by the rule Inst-Call with an instrumentation variable m and a substitution
σ that substitutes m for n, we need to prove the following three conditions (1) it is in the
context that the function ̂remove instruments remove with the instrumentation variable n, (2)
ls(m, x , null) ∧ m > 0 ` (ls(n, x , null) ∧ n > 0)σ, and (3) (ls(n, x , null))σ ` ls(m, x , null).
The first condition can be proven because the assumption is added to the context by the rule
Inst-Prog. The second and the third conditions can be proven by the entailment rules of
separation logic.
A characteristic of the modular instrumentation rules is that when a numeric property is
revealed in a function by an instrumentation, the caller to the function has to reveal the same
property before calling the function. Otherwise, the instrumentation will fail. For example, if the
length of the linked list is not revealed in m̂ain of P̂n, the pre- and post-conditions of the function
call to ̂remove will become respectively ∃m. ls(m, x , null) ∧ m > 0 and ∃m. ls(m, x , null). It
will fail to apply the rule Inst-Call because the following condition in the premise cannot be
proven: ∃m. ls(m, x , null) ∧m > 0 ` (ls(n, x , null) ∧ n > 0)σ.
To demonstrate the modular instrumentation rules for recursive functions, consider the
recursive program Pr in Figure 18. An instrumentation P̂r of the program Pr may reveal the
length of the linked list explicitly as in Figure 19. To prove that P̂r instruments Pr by Inst-
Prog, it is required to prove that êmpty instruments empty with the assumption that m̂ain
instruments main. Then, in applying Inst-Proc to prove that êmpty instruments empty ,
we need to prove that the body of êmpty instruments the body of empty with an additional
assumption that êmpty instruments empty . Thus, when applying Inst-Call to prove that
{ls(n, x , null)} empty(; x ,n); {emp ∧ x = null} instruments empty(; x ,n), the assumption
that êmpty instruments empty can be found in the context and the conditions ls(n, x , null) `
(ls(n, x , null))σ and (emp ∧ x = null)σ ` emp ∧ x = null can be proven with an empty
substitution σ.
16
1 empty(in ; inout x ) {
2 {∃n. ls(n, x , null)}
3 if (x 6= null) then
4 tmp := x ;
5 x := x .next ;
6 free(tmp);
7 empty(;x);
8 fi
9 {emp}
10 }
11
12 main() {
13 {emp}
14 new list(; x );
15 {∃m. ls(m, x , null) ∧m > 0}
16 empty(; x );
17 {emp}
18 }
Figure 18: A program Pr with a recur-
sive function
1 êmpty(in ; inout x ,n) {
2 {ls(n, x , null)}
3 if (x 6= null) then
4 tmp := x ;
5 x := x .next ;
6 free(tmp);
7 {ls(n − 1, x , null)}
8 n := n − 1;
9 {ls(n, x , null)}
10 êmpty(; x ,n);
11 {emp ∧ x = null}
12 fi
13 {emp ∧ x = null}
14 }
15
16 m̂ain() {
17 {emp}
18 new list(; x );
19 {∃m. ls(m, x , null) ∧m > 0}
20 m := ?;
21 {ls(m, x , null) ∧m > 0}
22 êmpty(;x,m);
23 {emp ∧ x = null}
24 {ls(m, x , null) ∧m = 0}
25 {∃m. ls(m, x , null) ∧m = 0}
26 }
Figure 19: An instrumented program
P̂r of Pr
18
References
[1] G. Arnold. Specialized 3-valued logic shape analysis using structure-based refinement and
loose embedding. In SAS 2006, LNCS 4134, pages 204–220. Springer, 2006.
[2] T. Ball, R. Majumdar, T. Millstein, and S. Rajamani. Automatic predicate abstraction of
C programs. In PLDI 2001, pages 203–213. ACM Press, 2001.
[3] J. Berdine, C. Calcagno, B. Cook, D. Distefano, P. W. O’Hearn, T. Wies, and H. Yang.
Shape analysis for composite data structures. In CAV 2007, LNCS 4590, pages 179–192.
Springer, 2007.
[4] J. Berdine, C. Calcagno, and P. W. O’Hearn. A decidable fragment of separation logic. In
FSTTCS 2004, volume 3328 of LNCS, pages 97–109. Springer, 2004.
[5] J. Berdine, C. Calcagno, and P. W. O’Hearn. Symbolic execution with separation logic. In
APLAS 2005, LNCS 3780, pages 52–68. Springer, 2005.
[6] J. Berdine, B. Cook, D. Distefano, and P. W. O’Hearn. Automatic termination proofs for
programs with shape-shifting heaps. In CAV 2006, volume 4144 of LNCS, pages 386–400.
Springer, 2006.
[7] D. Beyer, T. A. Henzinger, and G. The´oduloz. Lazy shape analysis. In CAV 2006, volume
4144 of LNCS, pages 532–546. Springer-Verlag, 2006.
[8] A. Bouajjani, M. Bozga, P. Habermehl, R. Iosif, P. Moro, and T. Vojnar. Programs with
lists are counter automata. In CAV 2006, LNCS 4144, pages 517–531. Springer, 2006.
[9] J. Brotherston and M. I. Kanovich. Undecidability of propositional separation logic and
its neighbours. In LICS 2010, pages 130–139. IEEE Computer Society, 2010.
[10] R. M. Burstall. Some techniques for proving correctness of programs which alter data
structures. Machine Intelligence, 7:23–50, 1972.
[11] C. Calcagno, D. Distefano, P. W. O’Hearn, and H. Yang. Beyond reachability: Shape
abstraction in the presence of pointer arithmetic. In SAS 2006, LNCS 4134, pages 182–
203. Springer, 2006.
[12] C. Calcagno, D. Distefano, P. W. O’Hearn, and H. Yang. Compositional shape analysis by
means of bi-abduction. In POPL 2009, pages 289–300. ACM, 2009.
[13] C. Calcagno, H. Yang, and P. W. O’Hearn. Computability and complexity results for a
spatial assertion language for data structures. In FSTTCS 2001, pages 108–119, London,
UK, 2001. Springer-Verlag.
[14] B.-Y. E. Chang and X. Rival. Relational inductive shape analysis. In POPL 2008, pages
247–260, New York, NY, USA, 2008. ACM Press.
[15] B.-Y. E. Chang and X. Rival. Calling context abstraction with shapes. In POPL 2011,
New York, NY, USA, 2011. ACM Press. To appear.
[16] B.-Y. E. Chang, X. Rival, and G. C. Necula. Shape analysis with structural invariant
checkers. In SAS 2007, LNCS 4634, pages 384–401. Springer, 2007.
20
[35] M. J. Parkinson and G. M. Bierman. Separation logic and abstraction. In POPL 2005,
pages 247–258. ACM, 2005.
[36] A. Podelski and A. Rybalchenko. ARMC: the logical choice for software model checking
with abstraction refinement. In PADL 2007, LNCS 4354, pages 245–259. Springer, 2007.
[37] S. Qin, C. Luo, W.-N. Chin, and G. He. Automatically refining partial specifications for
program verification. In FM 2011, volume 6664 of LNCS, pages 369–385. Springer, 2011.
[38] J. C. Reynolds. Intuitionistic reasoning about shared mutable data structure. In Millenial
Perspectives in Computer Science. Palgrave, 2000.
[39] J. C. Reynolds. Separation logic: A logic for shared mutable data structures. In LICS
2002, pages 55–74. IEEE Computer Society Press, 2002.
[40] S. Sagiv, T. W. Reps, and R. Wilhelm. Solving shape-analysis problems in languages with
destructive updating. In POPL 1996, pages 16–31, 1996.
[41] S. Sagiv, T. W. Reps, and R. Wilhelm. Solving shape-analysis problems in languages
with destructive updating. ACM Transactions on Programming Languages and Systems,
20(1):1–50, 1998.
[42] S. Sagiv, T. W. Reps, and R. Wilhelm. Parametric shape analysis via 3-valued logic. In
POPL 1999, pages 105–118, 1999.
[43] S. Sagiv, T. W. Reps, and R. Wilhelm. Parametric shape analysis via 3-valued logic. ACM
Transactions on Programming Languages and Systems, 24(3):217–298, 2002.
[44] H. Tuch, G. Klein, and M. Norrish. Types, bytes, and separation logic. In POPL 2007,
pages 97–108. ACM, 2007.
22
for System Analysis (LfSA 2012); The First Workshop on Synthesis (SYNT 2012); The
First Workshop on Applications of Formal Methods in Systems Biology (AFMSB 2012).
The technical program of CAV 2012 consisted of 3 invited talks, 4 invited tutorials, and
58 contributed papers selected from 185 submissions. The conference proceedings was
published by Springer as LNCS 7358.
2.2 Presentation of My Paper
The following papers that I co-authored were presented at CAV 2010:
Learning Boolean Functions Incrementally
Yu-Fang Chen and Bow-Yaw Wang
The paper was an outcome of the collaboration with Dr. Yu-Fang Chen at Academia
Sinica. In the paper, we propose a new learning algorithm for Boolean functions. Classical
learning algorithms for Boolean functions assume that unknown targets are Boolean
functions over fixed variables. The assumption precludes scenarios where indefinitely
many variables are needed. It also induces unnecessary queries when many variables are
redundant. Based on a classical learning algorithm for Boolean functions, we develop two
learning algorithms to infer Boolean functions over enlarging sets of ordered variables.
We evaluate their performance in the learning-based loop invariant generation framework.
The oral presentation was given by myself. I believe that the talk is received reasonably
well. Several people came to me and showed their interests after the presentation.
Termination Analysis with Algorithmic Learning
Wonchan Lee, Bow-Yaw Wang, and Kwangkeun Yi
This is a joint work with Wonchan Lee and Kwangkeun Yi from Seoul National University.
I have visited the Research On Software Analysis for Error-free Computing (ROSAEC)
center founded by Prof. Kwangkeun Yi a few times during the past years. This is an
outcome of our collaboration on applying learning-based techniques to program analy-
sis. An algorithmic-learning-based termination analysis technique is presented. The new
technique combines transition predicate abstraction, algorithmic learning, and decision
procedures to compute transition invariants as proofs of program termination. Com-
pared to the previous approaches that mostly aim to find a particular form of transition
invariants, our technique does not commit to any particular one. For the examples that
the previous approaches simply give up and report failure our technique can still prove
the termination. We compare our technique with others on several benchmarks from
literature including POLYRANK examples, SNU realtime benchmark, and Windows de-
vice driver examples. The result shows that our technique outperforms others both in
efficiency and effectiveness.
The oral presentation was given by Mr. Wonchan Lee. Wonchan’s talk is received well
from the audience. Several questions are raised at the end of the presentation.
2
100年度專題研究計畫研究成果彙整表 
計畫主持人：蔡益坤 計畫編號：100-2221-E-002-116- 
計畫名稱：具指標變數與多執行緒程式之模組化驗證 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 1 0 100%  
博士生 1 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 0 20% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
