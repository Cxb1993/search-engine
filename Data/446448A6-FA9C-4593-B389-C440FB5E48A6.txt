基於可逆邏輯的算術運算單元設計 
“Design of Arithmetic Units Based on Reversible Logic ” 
計畫編號：NSC95-2221-E-259-039 
執行期間：95 年 8 月 1日 至 96 年 7 月 31 日 
主持人：紀新洲 東華大學資訊工程系副教授 
 
一、 中文摘要 
隨著半導體製程的快速進步，超大型積體
電路晶片上的電子元件不停的微型化，但是這
個趨勢終究會走到盡頭，那時以積體電路為元
件的電腦便到達了其物理的極限，因此新的元
件需被開發來取代積體電路，成為下一代電腦
的主要元件。量子是近幾年來逐漸受到重視、
有可能成為下一代電腦元件的關鍵技術，因平
行處理、量子糾纏之特性，使其比傳統元件擁
有更強大的運算能力。然而其處理資料之運算
方式與傳統電腦相異，依量子力學所推演之演
算法也與傳統演算法不同，而實現演算法之電
路特性方面，亦當以量子之特性為主要依據，
才能發揮量子的特性、加快計算的速度。本計
畫之目的在於研究基於可逆邏輯之量子算術
運算單元的邏輯設計與電路合成，利用既有之
量子邏輯閘庫來設計更複雜的演算法與計算
模組，並探討如何將複雜演算法與計算模組的
邏輯設計自動化，合成為依量子理論所設計的
量子電路。我們也驗證合成電路之正確性，並
評估其運算速度與硬體複雜度。在合成演算法
中，我們改進過去所提出的方法，盡量減少額
外位元與暫時儲存體之使用，以其得到電路之
最佳化。 
英文摘要 
The unceasing miniaturization of 
semiconductor integrated circuits owing to 
technology innovation has been progressing 
rapidly in the past years. However, this trend is 
widely expected to end within the next 20 years. 
For building next generation computers, new 
components instead of semiconductor 
integrated circuits have been investigated by 
more and more researchers. Quantum 
computers have been recently considered to be 
a possible replacement for the classical 
computer in the future. However, the algorithm 
design for quantum computing has its own 
model and characteristics. Our project aims at 
investigating how to design and synthesis of 
quantum circuits based on reversible logic. We 
study if there is a possibility of coming up with 
new logic gates based on recent development of 
quantum components. Furthermore, we propose 
methodologies of logic designs for quantum 
circuits. The techniques for circuit synthesis of 
quantum circuits are researched in order to 
automate the design process.  
 
二、 計畫的緣由與目的 
隨著半導體製程的快速進步，超大型積體
電路晶片上的電子元件不停地微型化，在這近
五十年來，電腦的速度與密度幾乎不到兩年就
增加了一倍。根據估計，在 2010 年以前，一
個單晶片系統將可以使用 0.050 微米的電晶
體線寬，晶片上可以有四十億個電晶體，工作
頻率可以高達 10GHz。但是這個趨勢將不可
能永遠持續下去，摩爾定律勢必會走到盡頭。
無論如何快，訊號傳遞的速度不會快於光速。
無論積體電路做得如何小，總不會小過原子。
量子是可以用電子自旋翻轉來做邏輯運
算的，在 50 年代末期，用粒子自旋製造的二
位元量子邏輯元件就已經存在了。但是因為當
時並不是想製造量子邏輯元件，所以稱之為雙
共振 (double resonance)。 該邏輯元件用的是
氫原子的電子自旋及其質子自旋，只有當電子
自旋為「壹」時才將質子自旋翻轉，這就是 
Controlled-NOT。 
E. Barenco、D. DiVincenzo、T. Sleator 與 
H. Weinfurter 證明，如果能將電子及質子之自
旋只翻轉一半就可做到 AND。A. Ekert、D. 
Deutsch 、 E. Barenco 與 S. Lloyd 分別告訴
我們：一個量子電腦，只要能做 NOT 及任和
其它一種非線性運算，就可以達成全部的運算
功能了。因此，要找到可以製作量子電腦的物
理現象並不難，而且 C. H. Bennett 告訴我們，
如果量子電腦是以可逆邏輯元件組成的話，那
麼計算所需之最小能量，將與計算之複雜度無
關。 
由於量子電路是可逆的，因此我們對可逆
之邏輯閘與電路需作深入之了解。假如一個邏
輯閘之布林函數為 bijective，則該邏輯閘為可
逆的，一個可逆邏輯的必要條件為輸入與輸出
位元數必須相同，如果該邏輯閘之輸入與輸出
位元為 k 則稱為 k × k 閘。 
k-CNOT 閘為一個（k+1）×（k+1）閘：
當其他 k 輸入均為 1 時，其將第 k+1 輸入反
向，其中 k 個輸入均不變，且可視為控制訊號。
所有 k-CNOT 閘均具有可逆性，其中三個閘具
有特別的名稱：0-CNOT 稱為反相器或 NOT
閘，簡寫為 N，其完成之運算為（x）→（x 1♁ ），
♁為互斥或閘（XOR）運算；1-CNOT 完成之
運算為（y, x）→（y, x y♁ ），稱為 Controlled-NOT
或 CNOT，簡寫為 C；2-CNOT 通常稱為 Toffoli
閘，簡寫為 T，完成之運算為（z, y, x）→（z, 
y, x yz♁ ）。還有一個閘稱為 SWAP 閘，簡寫為
S，其為 2 × 2 之邏輯閘，其交換兩輸入之訊
號，即（y, x）→（x, y），因其常使用於量子
計算電路中。 
一個 well-formed 的可逆邏輯電路是由無
迴圈之組合邏輯電路（acyclic combinational 
logic circuit）所組成，該組合邏輯所使用之邏
輯閘均為可逆且其連接均無扇出（fan-out）。
一個可逆之邏輯閘之電路表示為：水平為其輸
入訊號線、垂直為邏輯閘符號，如圖一所示。
我們採用 Feynman 的表示法，♁代表反向，●
代表控制。當一條垂直線連接一個控制訊號到
反相器時表示：當此控制訊號為 1 時，該反向
器才會動作。 
 
 
圖 一、3×3 可逆邏輯電路，包含 2 個 Toffoli 閘和
2 個 N 閘。 
我們僅處理bijective函數亦即排列函數
（permutation）。圖二所示為圖一電路之真值
表，其可表示為（2, 3）（6, 7），因為該電路之
功能為交換 010（2）與 011（3）及 110（6）
與 111（7）的值，n個排列的集合簡寫為Sn，
所以n位元輸入之bijective函數所成之集合為
S2n，我們稱（2, 3）（6, 7）為CNT-constructible，
因其電路可由CNT (C, N, T) 閘庫所建構而
成。我們更正式的定義：假若L為一個可逆邏
輯閘庫，一個僅使用L中的邏輯閘所構成的電
路稱為L-circuit ，如果一個排列電路π ∈  S2n
能使用一個n×n之L-circuit所組成，稱該電路為
L-constructible。 
 
 
 
 
法之建立。傳統電路要合成，其由下而上的元
件庫，包含基本邏輯閘（如：NOT、AND、
OR、XOR 等）、巨集元件（如：加法器、多
工器、乘法器、移位器等）。在量子元件中，
有幾個基本邏輯閘，如 Toffoli 閘、Deutsch 閘
與 Fredkin 閘，在相關研究部分我們已描述了
一些，在此我們更進一步討論 Toffoli 閘： 
Toffoli 閘: 
所有 2 X 2 可反轉之邏輯閘，可使用線性
轉換來表示，例如：control-NOT 閘： 
{ 0, 1 }2 ∋（x, y）→（x, y +2 x ）
∈  { 0, 1 }2
若以矩陣可表示為： 
其中+2為modulo-2 加法。 
Toffoli Gate 是 一 個
controlled-controlled-NOT 閘，其電路圖如圖六
所示： 
圖六、Toffoli Gate 電路圖。 
工作原理如下：當 x、y 同時為 1 時，z
的值由輸入傳至輸出，否則 z 的輸出值不變，
而 x 與 y 的值不變，這個閘的非線性運算為最
底下的輸出為 z+2xy。 
當滿足下列兩個條件時，Toffoli 閘可被使
用作為布林代數邏輯（Boolean logic）中的萬
用閘（universal gate）： 
1. 固定某些輸入接腳輸入固定的值。 
2. 忽略某些輸出腳的值。 
我們可使用 3-bit 的 Toffoli 閘組成 4-bit
的 Toffoli 閘，其接法如圖七所示，當 w、x
同時為 1 時，0 輸入的中心點會轉換為 1，又
當 y 為 1 時則 z 便傳至其輸出腳。依此類推可
組成 n-bit 的 Toffoli 閘。我們將以此電路為基
礎設計相關之電路， 
 
 
圖七、4-bit Toffoli 閘電路圖。 
各種閘庫均有人使用，且均能合成達到現
有階段電路所能達成之功能，然若以 CNTS
（CNOT、NOT、Toffoli、SWAP）庫將可使
合成電路最為精簡。因此計畫先以這幾個量子
邏輯閘為基礎邏輯閘庫，合成所想要之電路。 
⎟⎟⎠
⎞
⎜⎜⎝
⎛
+=⎟⎟⎠
⎞
⎜⎜⎝
⎛
⎟⎟⎠
⎞
⎜⎜⎝
⎛
yx
x
y
x
211
10
由於一些基本的量子閘是萬用閘，所以可
以使用其合成量子電路，然而在合成中會使用
一些額外的訊號線與暫時儲存體，因此有效的
合成是一個重要的研究方向。我們已經研究出
一個有效合成量子電路的方法。在介紹我們的
方法之前要先整理與介紹一些基本的電路: 
圖八是一個 CNOT 量子閘，其中 ),( BAIv =
且 ),( QPOv = ,而  和 Qv 分別是輸入及輸
出向量。 
Iv
 
圖八、 一個 CNOT 量子閘 
圖九是 4個包含 CNOT 的量子電路。由圖
九(a)跟圖九(d)看出 CNOT 可以被用來當作
備份電路。而圖九(b)跟圖六(c)表示出 CNOT
可以被用來當作反向電路。 
設計更複雜的演算法與計算模組，並探討如何
將複雜演算法與計算模組的邏輯設計自動
化，合成為依可逆邏輯所設計的量子電路。我
們也驗證合成電路之正確性，並評估其運算速
度與硬體複雜度。在合成演算法中，我們改進
過去所提出的方法，以其得到電路之最佳化。 
本計畫研究群的國科會計畫研究結果，
2005 年刊發表 3 篇國際論文與 4 篇國內論文，
2006 年截至目前為止發表國際會議論文 3
篇，目前有兩篇已接受之期刊論文將於 2007
年刊出。 
 
五、參考文獻 
[1] D. Aharonov, A. Ambainis, J. Kempe, and U. 
Vazirani, “Quantum walks on graphs,” 2000.  
[2]  A. Barenco, C. H. Bennett, R. Cleve, D. P. 
DiVincenzo, N. Margolus, P. Shor, T. Sleator, J. A. 
Smolin, and H. Weinfurter, “Elementary gates for 
quantum computation,” Physical Review A, 
52(5):3457, 1995.  
[3] J. C. Bergquist, R. G. Hulet, W. M. Itano, and D. J. 
Wineland, ”Observation of quantum jumps in a 
single atom,” Physical Review Letters, 57:1699, 
1986.  
[4] J. W. Bruce, M. A. Thornton, L. Shivakumaraiah, P. 
S. Kokate, and X. Li, ”Efficient Adder Circuits 
Based on a Conservative Reversible Logic Gate,” 
2002. 
[5] T. Toffoli, “Reversible Computing,” Lab. for 
Computer Science, Mass. Inst. of Technol. , 
Cambridge, MA, Tech. Memo. MIT/LCS/TM-151, 
1980. 
[6] C. D’Helon and G. J. Milburn, “Measurements on 
trapped laser-cooled ions using quantum 
omputations,” Physical Review A, 54(6):5141, 1996. 
[7] F. Diedrich, J. C. Bergquist, W. M. Itano, and D. J. 
Wineland, “Laser cooling the zero-point energy of 
motion,” Physical Review Letters, 62:403, 1989.  
[8] E. Fredkin, T. Toffoli, "Conservative Logic", Int. 
Journal of Theor. Phys., 21 (1982), pp. 219-253.  
[9] S. Lloyd, “A Potentially Realizable Quantum 
Computer,” Science, 261, 1569-1571 1993. 
[10] L. K. Grover, “Quantum mechanics helps in 
searching for a needle in a haystack,” Physical 
Review Letters, 79(2):325, 1997.  
[11] R. J. Hughes, D. F. V. James, J. J. Gomez, M. S. 
Gulley, M. H. Holzscheiter, P. G. Kwiat, S. K. 
Lamoreaux, C. G. Peterson, V. D. Sandberg, M. M. 
Schauer, C. M. Simmons, C. E. S. Lloyd "Almost 
Any Quantum Logic Gate is Universal," Physical 
Review Letter, 75, 346-349 1995. 
[12] W. M. Itano, D. J. Wineland, and P. Gould 
“Resolved-sideband raman cooling of a bound atom 
to the 3D zero-point energy,” Physical Review 
Letters, 75(22):4011, 1995.  
[13] Deutsch D, “Quantum computational networks, 
“ Proc. Soc. Lond. A 425 73-90, 1989. 
[14] Pawel Kerntopf, “Synthesis of Multipurpose 
Reversible Logic Gates,” IEEE Proc. the Euromicro 
Symposium on Digital Design 2002. 
[15] C. Monroe, D. M. Meekhof, B. E. King, W. M. Itano 
and D. J. Wineland, "Demonstration of a 
Fundamental Quantum Logic Gate," Physical 
Review Letters, 75, 4714- 4717 1995. 
[16] L. Storme et al. , “Group theoretical aspects of 
reversible logic gates,” J. Universal Comput. Sci. , 
vol. 5, pp. 307–321, 1999. 
[17] Deutsch D, Barenco A and Elsert A, “Universality in 
quantum computation,” Proc. R. Soc Lond. A 449 
669-677, 1995.  
[18] M. A. Nielsen and I. L. Chuang, “Quantum 
Computation and Quantum Information,” Cambridge 
UniversityPress, Cambridge, 2000.  
[19] R. Feynman, “Quantum mechanical computers,” 
Optics News, vol. 11, pp. 11–20, 1985. 
[20] Fortschr Phys, “Special issues on quantum 
computation,“ 4-8 46 (1998) and 9-11 48 (2000). 
[21] J. A. Jones, “NMR Quantum Computing,” to appear 
in Progress in NMR Spectroscopy; also available at 
http://xxx.lanl.gov/abs/quant-ph/0009002. 
[22] C. Roos, T. Zeiger, H. Rohde, H. C. Nagerl, J. 
Eschner, D. Leibfried, F. Schmidt-Kaler, and R. 
Blatt, “Quantum state engineering on an optical 
transition and decoherence in a paul trap,” Physical 
Review Letters, 83:4713, 1999.  
[23] M. Steffen et al.: “Toward Quantum Computation: a 
Five-qubit Quantum Processor'', IEEE Micro, 
March-April 2001, pp. 24-34.  
[24] T. Sauter, W. Neuhauser, R. Blatt, and P. E. Toschek, 
“servation of quantum jumps. Physical Review 
Letters,” 57:1696, 1986.  
[25] Vivek V. Shende, Aditya K. Prasad, Igor L. Markov, 
and John P. Hayes, “Synthesis of Reversible Logic 
Circuits,” IEEE Trans. Computer-Aided Design of 
Integrated Circuits and System, Vol. 22, NO. 6, June 
2003. 
[26] P. W. Shor, “Algorithms for quantum computation: 
Discrete logarithms and factoring,”  Proc. 35th 
Annual Symposium on Foundations of Computer 
Science, page 124, 1994.  
[27] P. W. Shor, "Scheme for Reducing Decoherence in 
Quantum Computer Memory," Physical Review A, 
52, 2493-2496 1995. 
[28] S. Stenholm, “The semiclassical theory of laser 
cooling,” Review of Modern Physics, 58:699–739, 
1986.  
[29] D. R. Sypher, I. M. Brereton, H. M. Wiseman, B. L. 
Hollis, and B. C. Travaglione, 
出席國際學術會議心得報告 
                                                             
計畫編號 NSC95-2221-E-259-039 
計畫名稱 基於可逆邏輯的算術運算單元設計 
出國人員姓名 
服務機關及職稱 
紀新洲 
國立東華大學資工系副教授 
會議時間地點 2006/10/16 ~ 2006/10/18 
法國尼斯 
會議名稱 IFIP International Conference on Very Large Scale Integration and System-on-Chip 
發表論文題目 An Efficient Scheduler for Circuit-Switched Network-on-Chip Architectures 
 
一、參加會議經過 
本會議為在法國所舉辦有關超大型積體電路與系統晶片國際會議(VLSI-SoC)，舉辦的地
點在尼斯。會議所研討的課題主要包括系統晶片設計、數位訊號處理、測試與驗證、可重組
硬體設計、數位系統實體設計等，參加的學者大部份來自於美洲、歐洲、亞洲的國家，包括
美國、法國、台灣、日本、義大利、荷蘭與韓國等。 
整個會議的幾個重點課題有: Probabilistic Design, System on Chip, Hardware 
Reconfiguration, Digital Signal Processing, Verification, Physical Design & Modelling of Digital 
Circuits, Biosesing Technologies, Logic & High Level Synthesis, Test and Design for Test, Low 
Power Design, Reliable System-on-Chip Design, High Performance Analog & M/S Techniques, 
Precision Imaging 等。大會的 Keynote Presentation 為 J. Benkoski 的 “The system is really in the 
SoC”、A. Dommann 的 “An overview of where the fields of SOCs, HDI and MEMS are heading 
to and how to characterize them”與 J. Schoellkopf 的 “Design challenges for the 45nm node and 
below”。 
我們的論文發表是在會議的第一天的下午 session – System On Chip I。同一 session 的論
文發表者有來自義大利、荷蘭與韓國的學者，論文的題目大都是系統晶片上的連接網路問題。
在口頭報告完畢之後，session 主席 Coppola 博士與現場聽眾也與我有一些問題上的討論。 
 
 
二、與會心得 
參加這次會議最大的心得是學術圈已經是個地球村，各國的與會者可以透過網計際網路
獲得最新的訊息，因此交流比以往更密集與頻繁。由參加這次會議的機會，也多認識了歐美
亞地區的幾位學者。參加這類的國際會議活動，增加了我們在國際間的曝光度，並為以後的
交流奠定了些基礎。 
 
Abstract—Circuit-switched networks provide guaranteed
transmission latency and throughput, and hence are suitable for
many network-on-chip (NoC) architectures requiring
quality-of-service. A circuit-switched on-chip network needs a
scheduler to arrange communication paths and allocate a proper
bandwidth for each path. Such a scheduler offers an effective
solution for a critical step in the NoC design. In this paper, we
propose an efficient scheduler for pre-scheduled circuit-switched
on-chip networks. Based on simulations, we show that low delivery
latency for circuit-switched on-chip networks can be achieved with
our scheduler. Furthermore, with efficient scheduling, the cost of
the switches can be also minimized.
I. INTRODUCTION
System-on-chip (SoC) design provides designers to integrate
dozens of heterogeneous IP blocks together. One of the major
problems for SoC design is the communication infrastructure between
heterogeneous IP cores having different characteristics [1, 5, 15]. Most
current SoC designs use dedicated wires or shared buses to connect IPs
on a chip. However, these two approaches suffer from poor reusability
or limited scalability, respectively.
To solve the interconnect problems for modern SoC design, the
network-on-chip (NoC) architecture has been proposed. NoC
architectures with regular topology are suitable for interconnecting the
IPs in SoC. Such on-chip interconnection networks provide a
high-performance chip-level communication infrastructure with
regularity and modularity [1, 5, 6, 7, 10, 15, 18].
Fig. 1 shows an example NoC with 2D mesh topology. A routing
switch is embedded within each tile for transmitting packets between
tiles. The communication between IPs in a SoC chip can be
represented by a communication task graph (CTG). In this graph, the
vertex represents an IP, while the edge represents communication flow
between IPs. A weight can be associated with an edge to indicate the
communication bandwidth requirement for the system.
A mapping algorithm is used to assign the IPs in the CTG onto the
tiles of the NoC. Several mapping algorithms have been proposed [8,
11, 13, 19]. The communication paths are potentially existent when all
IPs have been mapped. A circuit-switched network can provide
guaranteed transmission latency and throughput in NoC, and hence is
particularly suitable for supporting traffic requiring quality-of-service.
Furthermore, the complexity of the switches in the circuit-switched
network is low since their main function is to connect incoming links
to outgoing links [3, 12, 14, 17]. The drawback of circuit-switched
networks is locking resources for the duration of data transfer.
However, this problem can be alleviated by using virtual circuits.
Although many algorithms have been proposed for NoC mapping
[8, 11, 13, 19], the scheduling problem for the circuit-switched NoC
has yet to be addressed. Furthermore, the proposed scheduling
algorithms for a single switch only solve the problem within the switch,
and do not provide a global solution for the whole on-chip network [2,
16]. In this paper, we propose a scheduler for circuit-switched on-chip
networks. The scheduler can efficiently allocate and schedule time
slots for the switches in order to minimize the latency of the
communication paths in the network. Our design provides an effective
scheduling solution for the circuit-switched NoC architectures.
The next section describes the problem model of our work. Our
scheduler design is presented in Section 3. Two phases of the
scheduler design are described, including local scheduling for the
switch and global scheduling for the network. Section 4 shows the
experimental results for our scheduler. Finally, our results are
summarized and future work is discussed in Section 5.
II. PROBLEM MODEL
The time division multiplexing (TDM) technique solves the
problem of link sharing in circuit-switched networks. Fig. 2(a) shows
two communication paths multiplexed through the link between nodes
X and Y. The bandwidth of a link can be divided into a certain number
of time slots in a periodical frame. We can allocate some time slots to
Path AB and some time slots to Path CD. The relationship between the
time slot and the frame is shown in Fig. 2(b).
After all IPs have been mapped, communication paths between the
tiles of the NoC architecture are potentially existent. Switches can use
tables to store the routing information for these communication paths.
Therefore, the network does not have to set up a circuit before
transmitting data for each communication path at run time. Fig. 3
illustrates a generic switch architecture supporting circuit-switched
networks. The switch architecture typically uses input buffers to store
the arriving data. If the input data cannot be forwarded immediately
due to output port conflict, they have to stay in the buffer and wait for
An Efficient Scheduler for Circuit-Switched
Network-on-Chip Architectures
Hsin-Chou Chi and Chia-Ming Wu
Department of Computer Science and Information Engineering
National Dong Hwa University
Hualien, Taiwan
T0
T4
T1
T2
T3
T5
Tile 0
S
Tile 1
S
Tile 2
S
Tile 3
S
Tile 4
S
Tile 5
S
Tile 6
S
Tile 7
S
Tile 8
S
Figure 1. An example of NoC architectures. The mapping algorithm
maps the CTG onto the tile-based architecture.
A
C
X Y
B
D
1 n
Frame
Time Slot
Path AB
Path CD
(a) (b)
Figure 2: TDM realizes link sharing of circuit-switched networks.
Table II shows the contention problem. If we directly assign the
required output to the input with demanded time slots for each circuit,
the conflict will happen. This arrangement has contention since Out 1,
Out 2, and Out 4 connect to In 0 at the same time slots. To mitigate the
contention problem, we can use multi-port buffers. However, the
access time of a multi-port buffer with more than five ports would be
too long to sustain high clock rate. Our scheduler uses rearrangement
to avoid contention instead.
The basic objective of arranging connection for a switch is to find
contention-free match based on the CRT. Consider an N×N switch
consisting of N inputs and N outputs. A CRT can be represented by a
traffic matrix T. Let Mk= (mi,j) be the matching matrix in each time slot,
which indicates the match between inputs and outputs at time slot k. If
inputs i and j are matched, then mi,j = 1; otherwise mi,j = 0. Such matrix
is a permutation matrix. The arrangement is admissible if and only if
the following equality is satisfied:
TM
S
k
k 


1
0
(1)
where S is number of time slots in a frame.
The arrangement problem can be reduced to the matrix
decomposition problem [2, 9, 16]. Fig. 7 shows an example of the
matrix decomposition. Birkhoff-von Neumann decomposition
theorem states that decomposing any NN doubly stochastic matrix
has the best upper bound N2-2N+2 on the number of permutation
matrices. A matrix R = (ri,j) is a doubly stochastic matrix if it satisfies:
jr
N
i
ji 


,1
1
0
, and ir
N
j
ji 


,1
1
0
, . In our problem, the number of
permutation matrices is not greater than the number of time slot in a
frame.
Because the matrix of the CRT is a special case that the sum of each
row and the sum of each column are not greater than the number of
time slots. We can decompose such matrix into P permutation matrices,
where P is not greater than the number of time slots. Before describing
our algorithm, some definitions related to our algorithm are as follows.
We define NN matrix F = (fi,j), and F is a full request matrix if
it satisfies:
jSf
N
i
ji 


,
1
0
, (2)
and
iSf
N
j
ji 


,
1
0
, (3)
where S is number of time slots in a frame. A full request matrix F can
be expressed as a linear combination of permutation matrices:

k
k kPF  (4)
where P(k) is a permutation matrix, and Sk 0 such that
S
k
k  .
The first step of our scheduler is to compensate the CRT to become
a full request matrix, which is called Construct_Full_Request_Matrix
(CFRM) in the following. N is the number of ports and S is the number
of time slots again. We use an example to show how it works. Fig. 8(a)
is the traffic matrix of Table I. After calculation, t1,0 , t1,2, t1,3, t2,3, and
t4,4 are added by 1, 4, 3, 5, and 4, respectively. Fig. 8(b) shows the
matrix after compensation. In this matrix, the sum of each row and the
sum of each column are equal to S. Thus, it is a full request matrix.
Construct_Full_Request_Matrix (CFRM):
Step 1. Let 



1
0
,
N
j
jii tu calculate ui for all i.
Step 2. Let 



1
0
,
N
i
jij tv calculate vj for all j.
Step 3. For all i, j =0 to N-1 {
If Sui  and Sv j 
If ij uv 
jjiji vStf  ,, ;
Else
ijiji uStf  ,, ;
jijijj tfvv ,,  ;
jijiii tfuu ,,  ;
Else
jiji tf ,,  ;
};
















00004
20060
00003
00000
20420
















00000
10000
00001
00000
00010
















00000
10000
00001
00000
00010
















00000
00010
00001
00000
00100
















00001
00010
00000
00000
10000
















00001
00010
00000
00000
10000
















00001
00010
00000
00000
00100
















00001
00010
00000
00000
00100
















00000
00010
00000
00000
00100
= +
+ +
+ +
++
T M0 M1 M2 M3
M4 M5 M6 M7
Figure 7. An example of matrix decomposition.
















00004
20060
00003
00000
20420
















40004
20060
05003
03401
20420
T = F =
(a) (b)
Figure 8. An example of the CFRM result.
TABLE I. CONNECTION REQUIREMENT TABLE FOR S4
Out 0 Out 1 Out 2 Out 3 Out 4
In 0 C12(2) C11(4) C13(2)
In 1
In 2 C1(3)
In 3 C10(2), C8(4) C9(2)
In 4 C20(4)
TABLE II. DIRECT ASSIGNMENT OF S4 TIME SLOTS FROM TABLE I
Out 0 Out 1 Out 2 Out 3 Out 4
In 2 C1 In 0 C12 In 0 C11 In 0 C13
In 2 C1 In 0 C12 In 0 C11 In 0 C13
In 2 C1 In 3 C10 In 0 C11 In 3 C9
In 4 C20 In 3 C10 In 0 C11 In 3 C9
In 4 C20 In 3 C8
In 4 C20 In 3 C8
In 4 C20 In 3 C8
In 3 C8
Time_Slots_Allocation (TSA):
Step 1. Initialization: Set i = 0.
Step 2. Set s=0.
Step 3. Output time slot assignment: Assign
O(i).OTS[s]=s.
Step 4. Input time assignment and waiting time
calculation:
For j = 0 to N {
If O(i).Out[j].I[s]=0 {
O(i).Out[j].ITS[s]=(s-1+S) mod S;
O(i).Out[j].WT[s]=0;
}
Else
Use O(i).Out[j].CN[s] as key to search
the related OTSTs corresponding to
O(i).Out[j];
Assign related ITS and calculate its WT.
Update related TWT;
}
Step 5. If s < S then s=s+1 and go to Step 3.
Step 6. Loop: If any OTST has not be allocated, i=i+1
and go to Step 2. Otherwise end.
To lower down the latency of the switch, the waiting time needs to
be reduced. The waiting time in a switch depends on when the input
data is forwarded by the output. We can swap the rows in the OTST to
reduce the total waiting time. Swapping rows in the OTST of a switch
changes the output times of the circuits in the swapped rows. Thus, the
related input time slots in OTSTs of four neighboring switches need to
be reassigned. Furthermore, decreasing the TWT for an OTST may
increase the TWTs of other OTSTs.
The algorithm Latency_Minimization (LM) in the following
minimizes the total waiting time by swapping rows in the OTST. In
this routine, the variable Local_Waiting keeps the total waiting time in
the swapped OTST. The variable Global_Waiting keeps the total
waiting time of all OTSTs. Firstly, this algorithm uses the
Local_Waiting as the key to construct a global max heap H. The OTST
corresponding to the root of H is selected to minimize its waiting time.
When an OTST is to be adjusted, we use the TWTs as the key
values to create a local max heap LH. The root of the max heap needs
to be swapped firstly. In each swapping step, the maximal value of the
field WT in the row of the root is used to decide which row is firstly
selected to be swapped. If, for instance, the maximum value of the WT
is 5 in row 7, we can swap row 7 with row 2 to eliminate the maximum
value of the WT in row 7. If this swap can reduce both Local_Waiting
and Global_Waiting, it is done. After two rows have been swapped,
the related fields in the neighbors’OTSTs are recalculated. The
Local_Waiting and Global_Waiting are updated. In addition, LH is
also adjusted.
If this swapping cannot lower down both Local_Waiting and
Global_Waiting, the algorithm selects the next row to swap. When all
other rows in this OTST have been selected, the root of LH is deleted.
The swapping operation repeats until LH is empty. Then, the algorithm
deletes the root of H and adjusts H. It selects the new root for
minimization. This operation repeats until H is empty.
Latency_Minimization (LM):
Step 1. Let Local_Waiting(i)= 


1
0
][).(
S
k
kTWTiO and
calculate Local_Waiting(i) for all i.
Step 2. Let Global_Waiting= 


1
0
_
T
i
iWaitingLocal
where T is total number of OTSTs .
Step 3. Use Local_Waiting(i) to construct a max heap
H.
Step 4. Select the OTST O(i) corresponding to the root
of H.
Step 5. Construct a local max heap LH using all TWT[s]
in O(i) as key values.
Step 6. Set R0=O(i).OTS[s] corresponding to the root
of LH. Search the maximum waiting time MWT
from R0. Set R1= (R0+S-MWT) mod S. Set
Number_of_Swap=1.
Step 7. Estimation: Estimate the Local_Waiting(i) and
Global_Waiting.
Step 8. If Local_Waiting(i) and Global_Waiting are
lowered down, swap R0 and R1, and update
Local_Waiting(i), related I in neighbors’OTSTs
and related Local_Waiting. Also update
Global_Waiting. Otherwise, if
Number_of_Swap<S, set R1= (R1+1) mod S
and go to Step 7. Otherwise, delete the root of
LH.
Step 9. If LH is nonempty, adjust LH and go to step 6.
Step 10. Delete the root of H.
Step 11. If H is nonempty, adjust H and go to Step 4.
IV. EXPERIMENTAL RESULTS
We have implemented a tool to generate task graph cases for NoC
designs. We have randomly generated dozens of synthetic tasks for
simulation to evaluate our scheduler with various mesh NoC
architectures. Before scheduling, these tasks are mapped on the NoC
architecture by our mapping algorithm. Because of the limited space
here, we only demonstrate some of the cases with our extensive
simulations.
Fig. 9 shows the simulation results for the TSA scheduler, our LM
scheduler and the optimal scheduler. The simulation results indicate
the waiting time, on the average, for a circuit through a switch in the
network. We use exhausted search to find the optimal scheduling
results. Only the simulations based on 3×3, 4×4 and 5×5 mesh NoC
architectures with 16 time slots per frame are shown here, which
reflect our typical results. As Fig. 9 shows, our LM scheduler
consistently outperforms the TSA scheduler. Furthermore, the LM
scheduler achieves 97%, 95%, and 93% of the performance of the
optimal scheduler on the average in the 3×3, 4×4, 5×5 NoC,
respectively. Since the computation time for simulating the optimal
scheduler for large NoCs is prohibitive, we only simulated for small
and medium-size networks. However, networks with such small and
medium sizes should be more typical for SoC design within near
future.
TABLE V. EXTENDED OTST OF S5
Out 0 Out 1 Out 2 Out 3 Out 4
OTS
I CN ITS WT I CN ITS WT I CN ITS WT I CN ITS WT I CN ITS WT
TWT
0 4 16 0 14 3 10
1 4 16 0 14 3 10
2 4 16 3 8 0 2 2 5 2
3 4 18 3 8 3 7 2 5 7
4 4 18 3 8 4 7 2 5 7
5 4 18 3 8 5 7 7
6 3 12 1 4 4
7 3 12 2 4 4
