行政院國家科學委員會專題研究計畫成果報告 
隨機專案網路中完成時間機率分佈、績效關鍵指標估算與 
資源分配最佳化問題之研究 
On the Estimation of the Probability Distribution of the Projection 
Completion Time, the Criticality Indices and the Optimal Resource 
Allocation in Stochastic Activity Networks 
計 畫 編 號：NSC 95-2221-E-029-026-MY2 
執 行 期 限：95 年 08 月 01 日至 97 年 07 月 31 日 
主 持 人：姚銘忠   東海大學 工業工程與經營資訊系 
計畫參與人員：褚文明、陳世杰   東海大學 工業工程與經營資訊系 
一、中文摘要 
現代企業處於高速變化與發展的環境中，大型
專案常在此趨勢下因應而生。面對專案中多有
不確定因素衍生，企業在資源有限的前提下，
必須倚賴專案管理技術有效管理專案的完成
時間與所需的總成本。專案經理人為使大型專
案如期完工，避免專案延遲造成懲罰成本，同
時兼顧投入資源所造成的成本負荷，在面對眾
多不確定因素的同時，適切地規劃資源分配的
決策，是專案經理人最重要的任務，但同時也
是最困難的挑戰。因此針對此議題，本研究計
畫關注在面對大型隨機專案網路，假設所有專
案作業的執行時間均為隨機變數，必須能夠有
效地估算專案網路的完成時間。另外，投入資
源量的多寡可以明顯影響專案作業的執行時
間，在有極多種資源量投入組合的前提下，選
擇最佳的資源投入策略，使專案資源期望的總
成本達到最低，是專案經理人另一個關心的重
點。針對上述兩個高度相關的研究主題，本研
究將提出兩年期的研究計畫進行探討；研究主
題的內容綱要簡述如下： 
研究主題一：「隨機專案網路完成時間估算之
研究」 
一般專案經理人面對隨機專案網路，通常
使用 PERT 模式分析估算專案完成時間。然此
方法受限於 PERT 模式使用不合理假設的限
制，無法精確地求得專案完成時間的機率分佈
函數。相關的文獻對於該問題，不外乎使用數
理分析方法或是模擬演算法，（其中許多方法
甚至要求作業時間分佈必須在特定機率分佈
函數的前提下），估算專案完成時間。但是運
用文獻中的方法，在面對大型的專案網路時，
通常遭遇計算時間過久或是無法獲得精確機
率分佈函數的困境。本研究的第一年計畫，將
專案網路以樹狀網路模型表示，提出明確的資
料結構為輔助，並參考修訂文獻中的網路模型
演算法，提出新的最有效率且最精準的演算法
來估算專案網路完成時間。 
研究主題二：「隨機專案網路最佳化資源分配
問題及績效關鍵指標之研究」 
    延續研究主題一所得的演算法，運用於隨
機專案網路資源分配的問題，為本研究的第二
年計畫。此部分的研究首先是針對專案網路中
「關鍵路徑」及前 K 條最長路徑問題進行深
入的分析，目的是要了解關鍵路徑與專案網路
完成時間彼此之關係；再者運用隨機專案網路
中前 K 條關鍵路徑產生績效關鍵指標，作為
訂定最佳資源分配調整的基準，提出快速有效
的演算法，求算最佳資源分配策略。 
期望本兩年期研究計畫的成果，可以提供
專案管理經理人，建立決策支援系統重要的基
礎。 
關鍵詞：隨機專案網路；專案完成時間；資源
1 
二、緣由與目的 
Usually, project managers have to pay close 
attentions to the randomness of the duration of 
the activities since it directly impacts the total 
costs and the completion time of the project (see 
Dawson and Dawson, 1998; Tavares and 
Ferreira, 1998 and Ward and Chapman, 2003). 
On the other hand, there usually exists a 
trade-off relation between the resource 
allocation and the duration of the activities. That 
is, one may allocate more resources to shorten 
the duration of an activity. The objective of the 
time-cost trade-off resource allocation problem 
is to get the optimal performance of the network 
by maintaining both the resources and the 
duration of activities in proper realization (see 
Basso and Peccati, 2001). In this paper, our 
concerned problem is to solve the resource 
allocation problem in PAN (which will be 
abbreviate it as the RAPP for the rest of this 
paper).  
In the literature, researchers proposed many 
approaches for solving the RAPP. One group of 
the researcher employed mathematical 
programming approaches as their solution 
approaches. For example, Tereso, Araújo, and 
Elmaghraby (2004a) proposed a dynamic 
programming approach for solving the RAPP. 
One may refer to Elmaghraby (1992) for a 
thorough review of relative literature. 
Theoretically, these mathematical programming 
approaches can obtain the optimal solution for 
the RAPP. However, they usually demand 
enormous computational efforts, and such a 
problem makes it impractical for the 
decision-makers when facing even a 
medium-size activity networks. 
The other group of researchers employed 
simulation-based meta-heuristics for solving the 
RAPP. Feng, Liu and Burns (2000) and Chu, et 
al. (2003) proposed to solve the RAPP using the 
Genetic Algorithm (GA) as the optimization tool. 
Recently, Terreso, Araújo and Elmaghraby 
(2004b) applied Electromagnetism Algorithms 
(EMA) for RAPP. We note that both GA and 
EMA belong to the category of so-called 
population-based methodology that employs a 
population of sample points in the solution 
space, utilizes the solution-improvement 
mechanisms of exploration and exploitation to 
search through the space and hopefully, 
converges to a close-to-optimal solution after 
iteratively implementing the 
solution-improvement mechanisms long enough. 
All of the aforementioned approaches employ 
the Monte Carlo Simulation (see van Slyke, 
1963 and Sigal, et al. 1979) for evaluating the 
objective function value of each solution 
obtained during the search process. However, 
the simulation-based approaches could also be 
impractical since they will spend tremendous 
amount of run time when applying Monte Carlo 
Simulation (MCS) for evaluating approximated 
values for the objective function. 
三、研究報告應含的內容 
1. The Mathematical Model 
In this section, we present a mathematical model 
of the resource allocation problem in 
probabilistic activity networks (namely, the 
RAPP).  
First, we present a summary of the 
decision-making scenario of the RAPP. (One 
may refer to Terreso, Araújo and Elmaghraby 
2004a for further details.) We are given a 
multi-modal activity network (that is, each 
activity can be performed at any number of 
levels of resource intensity applied to it, with 
resulting shorter or longer duration), with 
3 
( )
( ) ( ) z
min
( )
TS
U
a a P n
a A
E C
E C x C T
∈
∈∈
⎡ ⎤⎣ ⎦
⎧ ⎫= + ϒ⎨ ⎬⎩∑
x
x
x − ⎭
 
     (5) 
with the (bounded) feasible set S being given by  
{ }| 0 , 1,...,n k k kS l x u k= ∈ < ≤ ≤ < ∞ =x \ n
.        (6) 
2. A Brief Review of the EMA 
The Electromagnetism Algorithm (EMA) was 
developed by Birbil and Fang (2003). Later, 
Birbil, Fang and Sheu (2004) presented a 
modify version and also proved the convergence 
of the EMA. The EMA mimics the behavior of 
electrically charged particles and, after the 
consecutive attractive and repulsive actions, 
these particles will finally converge to the region 
where the global optimal solution locates. We 
utilize the EMA as the proposed methodology 
for solving the resource allocation problem in 
PAN since it not only has thorough theoretical 
foundation that guarantees its convergence to 
the global optimum, but also takes the advantage 
of ease in its coding. We present the details of 
this solution approach in the following 
discussions.   
The EMA is a population-based stochastic 
search algorithm that utilizes an 
attraction-repulsion mechanism of charged 
particles in the electromagnetism theory to move 
a population of points toward the global 
optimum. Birbil, Fang and Sheu (2004) 
indicated that the EMA works on the nonlinear 
optimization problems with bounded variables 
in the following form: 
min  ( )
. . 
f
s t S∈
x
x
      
       (7) 
where  is a nonlinear function and : nf →\
 
{ }| , 1,...,n k k kS l x u k= ∈ −∞ < ≤ ≤ < ∞ =x \ n
       (8) 
is a bounded feasible region.  
We note that the mathematical model for 
the RAPP in (5) and (6) matches well with the 
characteristics of the nonlinear optimization 
problem in (7) and (8). Since the EMA works on 
a population of sample-points, we first denote m 
as the size of the population (i.e., the numbers of 
the sample points). Also, we denote MAXITER 
as the maximum number of the iterations. We 
present the general scheme of the EMA in 
Algorithm 1 as follows.  
Algorithm 1. EM(m,ν ) 
1: Initialize() 
2: iteration = 1 
3: while iteration ＜ MAXITER do 
4: = CalcF( )νF  
5: Move(F) 
6: Local(LSITER,δ) 
7: iteration = iteration + 1 
8: end while 
The EMA usually consists of four 
procedures, namely, Initialize, CalcF, Move and 
Local.  The first procedure, Initialize, is used to 
sample m points from the feasible region and 
evaluate their objective functions. Also, Local is 
a local search procedure to look for improving 
one or many points at each iteration. We will 
have more detailed explanation on the 
implementation of CalcF and Move in the 
following subsections. Since our presentation is 
within one iteration of the while loop in 
Algorithm 1, we omit indicating the iteration 
index for the sample points here.  
For each one iteration of the EMA, there 
are a total of m points, and we denote them by 
. Following our expressions in (7) ,  1,...,i i =x m\
5 
suggests to selected a perturbed point  
which is the farthest point from the point  
in the current population, i.e., 
px
bestx
{ }
1,2,...,
arg maxp bes
i m=
= −x x t ix    
        (11) 
For this perturbed point , the exerted 
forces with the other particles will be perturbed 
by a random variable 
px
λ , i.e., 
    
( - ) , if  
-
( - ) , if  
-
i p
i p i p
2i p
p
i i p
p i p i
2i p
q q
F
q q
λ
λ
⎧ ⋅⎪⎪= ⎨⎪ ⋅⎪⎩
x x x x
x x
x x x x
x x
<
≤
 
        (12) 
where the λ  is uniformly distributed within 
(0,1). The direction the exerted forces are also 
perturbed by the parameter ν  which is 
uniformly distributed within (0,1). Whenever the 
λ  value is less than a threshold value ν , then 
change the force direction, i.e., 
,p pi iF F if λ ν= − <　     
        (13) 
By including the perturbation from , the 
EMA is equipped with one sort of mutation 
mechanism that effectively avoids the EMA 
being stuck in one of local optimal solutions. 
px
In a particular iteration of the EMA, each 
sample point  will move to a new position 
(say , and it then becomes a new point for the 
next iteration) following the expressions in (10) 
to (14). The EMA repeats its attractive and 
repulsive actions among the same points until it 
meets the termination conditions (e.g., after 
MAXITER iterations). The EMA updates the best 
solution in hand whenever it obtains any one 
which is better during its execution.  Finally, 
the EMA reports the (final) best solution in 
hand. 
ix
ix
    One may employ a local search for every 
sample point to improve the exploitation ability 
(though it is optional for the EMA) in each 
iteration. The local search assists to find “better” 
solutions around the neighborhood of a sample 
point to hopefully expedite the convergence of 
the EMA. For a sample point , the local 
search algorithm can be done in a simply way by 
randomly selecting an element 
ix
i
kx  and 
replacing it with a new feasible value if it 
secures a better solution. The local search 
algorithm keeps searching for a better solution 
for LSITER times for each sample point. 
3. A Label-Correcting Tracing Algorithm 
The evaluation of the pdf of the projection 
completion time (i.e., ) is one of the 
most critical issues when solving the RAPP. 
Obviously, the evaluation has to be done for 
each sample points obtained from the search of 
the EMA. Recall that there are m samples points 
for each iteration, and the EMA shall repeat for 
MAXITER iterations. For an extreme case that 
all the sample points are different, the EMA has 
to evaluate a total of MAXITER·m samples 
points if it is equipped without a local search 
procedure. (For example, we would have to do 
the evaluation for 20,000 times taking m =20 
and MAXITER=1,000, which is usually a 
reasonable specification for a 
small/medium-size activity network following 
the experience of our numerical experiments.) If 
the EMA utilizes MCS with 5,000 samples for 
the evaluation of 
( )nϒ x
( )nϒ x , one has to solve a 
total of  longest paths problems in the 
aforementioned case (in which the 
computational load is extremely demanding!)  
810
One has to face the dilemma between the 
7 
network while the procedures reach the terminal 
node.  
 The proposed modified LCTA is actually a 
variant of the label-correcting (LC) approaches 
for determining the shortest path (SP) in a 
deterministic network. In the LC approach for 
SP, each node i is assigned a label (usually a 
tentative distance to the terminal node n) and 
will be put into a queue. Then, the LC approach 
scans through the nodes in the queue and update 
(or correct) the labels if necessary. After a node 
is processed, the node will be removed from the 
queue, and then some nodes may be inserted or 
re-positioned in the queue. The LC approach 
repeats the process until the queue is empty at 
which all labels are correct (that is, the SP is 
found). There are several LC approaches in the 
literature, including the first-in-first-out 
algorithm of Bellman [3], the d-queue method of 
Pape [23], the two-queue method of Gallo and 
Pallottino [14], and the threshold methods of 
Glover, et al. [15]. Recently, Bertsekas [4] 
proposed a small-label-first principle to modify 
the approaches of [14] and [15], making them 
even faster. Our proposed modified LCTA is 
different from these LC approaches in two 
aspects: first, obviously, the modified LCTA 
pursues all the completion paths rather than the 
shortest path in the concern network; and second, 
the modified LCTA uses a data structure of stack 
(rather than data structures of queue) for the 
implementation of the label-correcting process. 
We have further discussions on using our stack 
structure next. 
As it stands, when using our node structure 
presented in Section 4.1, we do not have 
complete information of the neighborhood (i.e., 
those nodes in the same set of prec_node( )⋅ ) of a 
child node from its own data; it has to go to its 
parent node to get its neighborhood information. 
Therefore, the LCTA has to record the tracing 
sequence in order to let any child find its way 
back to its parent node position. We use the 
stack structure to record the tracing sequence. 
The stack structure actually is a serial memory 
where accessing the data follows the rule Last 
In/First Out (LIFO). There is a control pointer 
which could tell the LCTA the current position 
of the stack for the data accessing, and it could 
go upward or downward by following the 
requirement of the tracing algorithm. The 
push_stack(node) instruction saves the current 
node number into the contents of the stack, and 
the pointer increases by 1, and the pull_stack() 
instruction grabs its father node number, and the 
pointer decreases by 1. The node of the 
neighborhood can be found from the set of 
prec_node( )⋅ , which is one data item of its father 
node. 
The tracing scheme initially starts from the 
node with the largest index, which is also the 
terminal node of PAN. Then, the tracing will go 
downward until reach the starting node of PAN, 
and the order of the tracing path will be stored in 
the stack in sequence. By the time when the 
modified LCTA reaches the starting node, the 
tracing begins to bounce upward and starts to 
commit the path sequences accumulation. To 
satisfy the requirements of our tracing scheme, 
for any visited node i in the PAN, two conditions 
have to be checked: 
1. Condition 1: Have all the incidence nodes 
( )B i  of node i been traced down? 
(1)Yes: accumulate all the branch-paths 
,  ( )ikbranch k B i= of the node i from its 
precedent node set B(i). 
9 
Tereso, Araújo and Elmaghraby (2004c) for the 
details on the project networks of the 14 
instances (where the numbers of the activities in 
a project network ranges from 3 to 76). We note 
that the durations of all the activities are 
assumed to be exponential distributed. We 
conducted our experiments using a personal 
computer with a Pentium IV 3.6 GHz CPU and 
1GB RAM. Our program was coded by Matlab 
Ver. 6.5. 
    Our experiments will compare four settings 
of the EMA approaches. We define a notation 
 to indicate the setting of an EMA 
where the three parameters corresponds to the 
evaluation of , the initialization, and the 
local search, respectively. The details on the 
three parameters are presented as follows.  
EMA( , , )⋅ ⋅ ⋅
( )nϒ x
1. We compare two approaches for the 
evaluation of , namely, Monte Carlo 
Simulation (MCS), which was used in 
Tereso, Araújo and Elmaghraby (2004b), 
and a Label Correcting Tracing Algorithm 
(LCTA), proposed by Yao, Chu and Tseng 
(2007). Here, we also denote 
( )nϒ x
( )MCS S  
for using MCS with S samples. 
2. We would like to compare two settings of 
initialization for the EMA. In the first 
setting, all of the initial solutions are 
randomly generated. We denote the first 
setting by RI, which stands for Randomly 
Initialization. In the second setting, one 
half of the initial solutions were resulted 
from the KLP presented above, and the 
others are randomly generated. We denote 
the second setting by RI+KLP.  
3. The third parameter concerns the 
effectiveness from the local search in the 
EMA. If the EMA employs a local search 
algorithm for exploitation, we denote it 
“LS”, which stands for Local search for the 
third parameter.  
Following the definition above, we knows 
that ( )EMA( 100 , , )MCS ⋅ ⋅  corresponds to the 
EMA proposed in Tereso, Araújo and 
Elmaghraby (2004b). We propose to compare 
three EMA approaches using LCTA for the 
evaluation of ( )nϒ x  in this study, namely, 
EMA( , , )LCTA RI ⋅ , EMA( , , )LCTA RI KLP+ ⋅ , 
and EMA( , , )LCTA RI KLP LS+ .  
Using the 14 network instances in Tereso, 
Araújo and Elmaghraby (2004c), we compare 
the four EMA and summarize our numerical 
results in Table 1. We note that since the MCS 
with only 100 samples usually brings a poor 
estimation of ( )nϒ x  (especially, with a 
significantly large variance). Therefore, we 
re-evaluate the objective function value for the 
solution from  using MCS 
with 20,000 samples to obtain a more precise 
measure.  
( )EMA( 100 , , )MCS ⋅ ⋅
From Table 1, the EMA proposed in this 
study (namely, EMA( , , )LCTA RI ⋅ , 
EMA( , , )LCTA RI KLP+ ⋅ , and 
EMA( , , )LCTA RI KLP LS+ ) obviously much 
more effectively than ( )EMA( 100 , , )MCS ⋅ ⋅ . 
Also, one may observe that not only the solution 
quality of ( )EMA( 100 , , )MCS ⋅ ⋅  is worse than 
the proposed EMA, but also the solution quality 
of ( )EMA( 100 , , )MCS ⋅ ⋅  is not stable at all (in 
other words, with a significantly large variance).  
11 
www.dps.uminho.pt/pessoais/anabelat 
[20] Ward, S., Chapman, C. (2003). 
Transforming project risk management into 
project uncertainty management, 
International Journal of Project 
Management, 21(2), 97-105. 
[21] Weng-Ming Chu, Ming-Jong Yao, 
Tsueng-Yao Tseng, “An Improved Genetic 
Algorithm for Solving the Optimal 
Resource Allocation Problem in Stochastic 
Activity Networks”, the Fifth Asia-Pacific 
Industrial Engineering and Management 
Systems Conference (APIEMS 2004), 
December 12-15, 2004, Gold Coast, 
Australia. 
[22] Yao, M.J., Chu, W.M., Tseng, T.Y., (2007). 
A Label-Correcting Tracing Algorithm for 
the Approximation of the Probability 
Distribution Function of the Project 
Completion Time, Journal of Chinese 
Institute of Industrial Engineers, 24(2), 
153-165. 
 
 
 
 
 
 
13 
表 Y04   第2頁 
二、與會心得 
本人參加的 International Conference on Optimization: Techniques and Applications (ICOTA)是
在亞太地區最佳化領域的一個重要國際會議，早期該會議曾在 Singapore, Hong Kong, Perth
(Australia), Chengdu (China), Ballarat (Australia)舉辦，截至目前已經舉辦至第七屆。本次的
會議，有多位最佳化領域的著名（如：Prof. Shu-Cherng Fang 及 Prof. Lou Caccetta）出席。
根據大會的統計資料，目前參與該研討會的專家學者非常踴躍，在經過審核之後，總共收
納發表論文超出 150 篇。 
 
此次的 ICOTA 會議的議題非常豐富，在三天的議程中，共分為 30 個 Sessions。整體而言，
其重點在於探討先進的最佳化理論與運用於各種最佳化實務問題之應用；也強調以最佳化
進行跨領域的整合。因為本會議的機會，本人可以與數位重要的研究學者，如：國際學術
期刊 (SCI) Optimization Methods and Software 的編輯 Prof. Masao Fukushima，國際學術期
刊(SCI) Journal of Industrial and Management Optimization 的編輯 Prof. K. L. Teo，等學者。
對於在國際社群在最佳化領域的交流，本人恪盡個人的棉薄之力。 
 
三、考察參觀活動(無是項活動者省略) 
 
四、建議 
1. ICOTA 會議已經在亞太地區最佳化與作業研究與應用數學領域建立一個相當的口碑，
每次都能彙集作業研究與應用數學界重要的學者與會。國內相關的學者若能固定參加
一定有助於其加入該領域的國際社群。 
2. ICOTA 會議是與國際學術期刊 (SCI) Journal of Industrial and Management Optimization
關係密切。該期刊在亞太地區作業研究與應用數學領域，影響力與日具增，若台灣能
有學者積極參與該期刊的運作及其學術活動將是極好的事，也值得國內學者注意。 
 
五、攜回資料名稱及內容 
 
1. ICOTA 會議論文程序 
2. ICOTA 會議論文集光碟共一片 
 
六、其他 
 
 
 
The concept that spanning tree is applied to the design of mult-stage supply chain networks. 
In the literature, Syarif, Yun and Gen (2002) first utilized the characteristic of spanning tree to 
set up the encoding (viz. Prüfer encoding) in their genetic algorithm (GA) for solving the 
problem. Syarif, Yun and Gen (2002) cared about the topics of the places of manufacturing sites 
and DCs should be opened. In this paper, we would like to extend their study by taking into 
accounts the fixed cost for subcontracting the transportation vehicles operating between any two 
neighboring stages in the multi-stage supply chain network. In Section 3, we will show that the 
revised mathematical model is no longer a linear, binary integer program (which is unable to be 
solved by commercial optimizaion packages, e.g., LINGO or CPLEX, etc.).  
In order to solve the supply chain design problem in this study, we propose a new spanning 
tree-based GA using different encoding. We note that the GA using Prüfer encoding in Syarif, 
Yun and Gen (2002) still applies to solve the concerned problem in this study. Our numerical 
experiments will show that the proposed GA outperforms Syarif, Yun and Gen’s (2002) 
solution approach.    
The rest of this paper is organized as follows. Section 2 reviews the literature on the design 
of supply chain networks. Section 3 presents the mathematical model for concerned problem in 
this study. Section 4 provides the details on the proposed GA. The numerical experiments in 
Section 5 demonstrate that the proposed GA obtains better solutions than Syarif, Yun and Gen’s 
(2002). Finally, Section 6 gives the concluding remarks. 
2. Literature Review 
In order to fact the challenge from the global market, larger enterprise groups pay intensive 
attention to the design of supply chains since it grows to be one of the most important factors to 
gain advantage over other competitors. The management of flow of goods (including 
work-in-process and finished items) is one of the major concerns to improve the efficiency of 
the supply chain to meet the demand with a minimum cost, or to fill demand for maximum 
profit. Therefore, the modeling and analysis of multi-satge supply chains have been a very 
prosperous area of research in the past two decades.   
One may refer to Ro and Tcha (1984) and Pirkul and Jayaraman (1998) for the early 
studies on multi-stage logistic systems. An order plan model for a multi-stage production 
system was introduced by Azevedo and Sousa (2000). Such a system processes products and 
materials through different production units that are part of a logistics chain organized in several 
phases. In this case, they tried to determine, for each incoming order, an optimal path 
(concerning cost) through the network. Discussion of the production/distribution planning in 
relation to the supply chain management concept was given by Sim et al. (2000).  
Before this study, Syarif, Yun and Gen (2002) proposed a spanning tree-based GA to 
determine to choice the right locations for opening the plants and DCs and calculating minimum 
cost from suppliers to manufacturers, manufacturers to DCs and DCs to customers. One may 
refer to Figure 1 (illustrated by Yu, 1997) for the operations in a three-stage supply chain. We 
2 
encoding methods and found that determinant encoding provided better performance. Chou, 
Premkumar and Chu (2001) showed that determinant encoding is superior to Prüfer encoding 
when solving the degree-consrained minimum spanning tree problem.  
 
Figure 2. The illustration of a feasible Prüfer encoding. 
 Inspiring from the results of Chou, Premkumar and Chu (2001), we determined to apply 
determinant encoding for solving the concerned problem. Also, in order to expdite the 
convergence rate, we derive a cost-reduction heuristic that plays thwe role of a local search to 
improve the candidate solutions obtained in the evolutionary process. We will presesnt the 
details on the proposed GA in Section 4. 
3. The Mathematical Model 
In this section, we present a revised version of the model in Syarif, Yun and Gen (2002) by 
taking into accounts the fixed costs for subcontracting the transportation vehicles in the 
multi-stage supply chain network.  
When formulating the mathematical model in this study, we adopt all the assumptions in 
Syarif, Yun and Gen (2002) but employ two different assumptions as follows.  
1. We assume that the operations of transportation will be subcontracted to a third party logistic 
(3PL) service provider. According to the cases in the real world, the 3PL service provider 
charges the transportation cost by taking into account not only the unit cost for each ship 
item, but also the fixed cost for assigned designated vehicles for the transportation between 
two neighboring stages in a supply chain network.  
2. We allow unlimited number of opened plants and DCs in the multi-stage supply chain 
network.  
Suppose that the total amount of shipment between two neighboring stages in a supply chain 
network is AT. Following the first assumption above, the 3PL service provider will charge a 
fixed cost for subcontracting the transportation vehicles operating between the two neighboring 
stages, which is given by  
ATCT
FT
⎡⋅ ⎢⎢ ⎥
⎤⎥                (1) 
Following our second assumption, we remove the following two constraints, namely, 
j
j
p P≤∑  and  from Syarif, Yun and Gen’s (2002) model.  j
k
w W≤∑
Before presenting the revised model, we first introduce the nomenclature used later.  
Indices 
4 
, for all kl l
k
z d≥∑ l .             (6) 
jp , ={0, 1},  for all j, k.            (7) kw
ijx , jky , 0,  for all i, j, k, l.            (8) klz ≥
The last cost term in the objective function (2) is the sum of the fixed cost for 
subcontracting the transportation vehicles operating between any two neighboring stages in the 
multi-stage supply chain network. Constraints in (3) ensure that the suppliers’ capacity is 
sufficient. Constraints (4) and (5) are the capacity constraints for the plants and DCs, 
respectively. Constraints in (6) make sure that the demands of all customers are met.  
We note that after adding the last cost term, the objective function in our mathematical 
model turns to a nonlinear function. Since it is a mixed integer linear program, we are no longer 
able to solve the model using commercial software, e.g., LINGO or CPLEX as Syarif, Yun and 
Gen’s (2002) model did.  
4. The Genetic Algorithm 
In this section, we propose a new spanning tree-based GA for solving the design of a 
multi-stage supply chain as shown in (2) to (8).  
4.1 Determinant encoding  
Suppose that there are a total of n nodes in the supply chain network. Then, the length of 
determinant encoding of a chromosome should be n-1. The decoding algorithm treats each allele 
of chromosome to correspond to its position in the chromosome and the position represents its 
direct connecting node. The first gene is decoded as fixed-position 2, second as fixed-position 3, 
and so on. The procedure for decoding is as follows. 
1. Let S be the given determination string and l be its length. If S(j) is the jth allele in 
chromosome S and 1 j l≤ ≤ , the number of the nodes in the given graph G is , where 
a node is denoted as node x and 
1l +
1 1x l≤ ≤ +  
2. Set 1j = , if 0 1j l< ≤ + , go to Step 3, else Stop. 
3. Connect node ( 1j )+  with node S(j), set 1j j= + , go back to Step 2. 
For example, let S=[4 2 6 5 6] represent a chromosome coded by determinant encoding. It 
implies that there are six nodes in the network corresponding to each fixed position [2 3 4 5 6] 
with the links (2,4), (3,2), (4,6), (5,5) and (6,6) in the tree. (Each corresponding fixed position in 
the figure is equal to the order of the gene plus one. Each allele of chromosome can be 
connected to its corresponding fixed position as in Step 3 above.) The final layout of the tree is 
shown in Figure 3. The generated spanning tree may not be legal and need to be repaired by 
reallocating genes in appropriate positions to generate a legal tree. From Figure 3, one may 
detect that there exists no connecting link to node 1, which is called “missing node 1”. On the 
other hand, one may find “self-loop” in the tree since the links (5,5) and (6,6) leads to such a 
6 
Typically, there are two enlarged sampling strategies: ( )μ λ+  and ( , )μ λ . In ( )μ λ+  
strategy, μ parents and λ offsprings compete for survival and the μ best solutions are selected 
for the next generation. In ( , )μ λ  strategy, we select the μ best solutions from out of λ 
offspring solutions. We used the stochastic ( )μ λ+  method as recommended in Chou, 
Premkumar and Chu (2001). 
 On the genetic operators, we compare several combinations of crossover and mutation 
operators. In the GA braught by Syarif, Yun and Gen (2002), they employ single-point operator 
for crossover and both inversion and displacement operators for mutation. In one-point 
crossover, a random position is generated for a pair of chromosomes and the alleles of the first 
chromosome from this fixed position to the end are exchanged with the second chromosome in 
the same range. In this process, the alleles of the second chromosome are transferred to the 
respective alleles in the first chromosome.  
In order to look for a more efficient implementation for the proposed GA, we include 
two-point and uniform operators for crossover and both insetion and exchange operators for 
mutation. Two-point crossover generates two random positions, head and tail. The alleles of the 
first chromosome from the head position to the tail are exchanged with the second chromosome 
in the same range. Uniform crossover is a dynamic and nondeterministic method where a set of 
positions, called a mask, is chosen for each of the chromosomes and their alleles are exchanged 
with each other based on the generated positions. There are two random decisions—the 
positions to replace and the number of genes to replace. Insert mutation randomly generates two 
positions in a given chromosome and inserts the gene from the first position in the second 
position and shifts all the genes to the right by one position. Exchange mutation randomly 
selects two positions in a given chromosome and exchanges both genes. Insert mutation causes 
greater changes to the chromosome compared to exchange mutation. This is particularly true in 
our study since the genes in a chromosome are related to their fixed positions.  
 An important issue in the implemention of GA is the termination criterion. Several 
termination criteria are established from number of generations, computing time, and fitness 
convergence. Fitness convergence occurs when all the chromosomes in the population have the 
same fitness value. In this study, fitness convergence is selected as the termination criterion. 
Namely, we stop the evolutionary process in GA when the best chromsome on hand was not 
improved in the last 10 generations.  
The population size, crossover rate, and mutation rate are three other important control 
parameters for GA. For the sake of having a fair stand for comparison, we employed the same 
settings as Syarif, Yun and Gen (2002) did for the implementation of their GA.  
5. Numerical Experiments 
In this section, we will demonstrate that the proposed GA using determinant encoding and our 
cost-reduction heuristic, which is abbrevaited as Y&H, is superior to the GA using Prüfer 
encoding presented in Syarif, Yun and Gen (2002), which is is abbrevaited as SYG for the rest 
8 
On the other hand, one may observe that the run time of SYG becomes significantly longer 
than Y&H for the larger-size problems. The run time of SYG is almost twice of Y&H for 
problem 4. Therefore, we would comment that the proposed GA using determinant encoding 
and our cost-reduction heuristic performs better in the convergence rate of GA.     
6. Conclusion  
This study focuses on the configuration and the transportation planning in multi-stage supply 
chain networks. The decision makers need to determine the optimal locations of the hubs and 
the optimal transportation routes to minimize the total costs incurred in the whole system. We 
revise the mathematical model in Syarif, Yun and Gen (2002) by taking into accounts the fix for 
subcontracting the transportatyion vehicles between any two neighboring stages in the supply 
chain network. We note that this problem is formulated as a 0-1 mixed integer non-linear 
program that is not able to be efficiently solved by commercial packages due to its complexity. 
This study proposes a new spanning tree-based Genetic Algorithm (GA) using determinant 
encoding for solving this problem. Also, we employ a cost-reduction heuritic that plays the role 
of a local search to improve the candidate solutions obtained in the evolutionary process of the 
proposed GA. Our numerical experiments demonstrate that the proposed GA outperforms the 
GA of Syarif, Yun and Gen (2002) in the solution quality and convergence rate.  
References 
[1] Abuali F. N., R. L. Wainwright, and D. A. Schoenefeld. (1995). Determinant factorization: 
Anew encoding scheme for spanning trees applied to the probabilistic minimum spanning 
tree problem. Proceedings of The Sixth International Conference on Genetic Algorithms, L. 
J. Eshelman, Ed. San Mateo, CA: Morgan Kaufmann, pp. 470–477. 
[2] Azevedo, AL. and J.P. Sousa. (2000). Order planning for networked make-to-order 
enterprises: A case study. Journal of Operational Research Society, Vol. 51, pp. 
1116-1127. 
[3] Chou, H. , G. Premkumar, and Chu, C. H. (2001). Genetic Algorithm for Communications 
Network Design– An Empirical Study for the Factors that Influence Performance. IEEE 
Transactions On Evolutionary Computation, Vol. 5, No. 3, pp. 236-249. 
[4] Dengiz B., F. Altiparmak, and A. E. Smith. (1997). Local search genetic algorithm for 
optimal design of reliable networks. IEEE Transactions On Evolutionary Computation. Vol. 
1, pp. 179–188. 
[5] Gen M. and R. Cheng. (1997) Genetic Algorithms and Engineering Design. New York: 
Wiley. 
[6] Goldberg D. E. (1989). Genetic Algorithms in Search Optimization, and Machine Learning. 
Reading, MA: Addison-Wesley. 
[7] Marry, J. M. and Vidyaranya, B. G., (2005). Global supply chain design: A literature 
review and critique. Transportation Research Part E, Vol. 41, pp. 531-550. 
[8] Michalewicz, Z. (1994). Genetic Algorithm +Data Structures = Evolution Programs. New 
10 
An efficient search algorithm for obtaining the optimal replenishment 
strategies in multi-stage just-in-time supply chain systems 
 
Tien-Cheng Hsu 
Department of Industrial Engineering and Enterprise Information, Tunghai University, 
P.O. Box 985, Taichung 407, Taiwan 
d943304@thu.edu.tw
 
Ming-Jong Yao 
Department of Industrial Engineering and Enterprise Information, Tunghai University, 
P.O. Box 985, Taichung 407, Taiwan 
myao@thu.edu.tw 
 
 
Abstract 
 
In this study, our focus is on a multi-stage supply chain model in which Just-In-Time 
philosophy is extended to coordinate all firms in the supply chain system. In this model kanban 
is used to control information flows and material flows between two adjacent manufacturing 
plants, which is called a kanban stage. In addition, suppliers provide raw materials to the 
manufacturing plant in the first kanban stage and end-products are delivered from the plant in 
the last kanban stage to the warehouses or directly to the customers. The model is formulated as 
a Mixed-Integer Non-Linear Programming (MINLP) problem. The objective of this study is to 
propose an efficient search algorithm that obtains an optimal solution. We conduct theoretical 
analysis on the optimality structure of the model and assert that the optimal cost curve is 
piece-wise convex. The characteristics of the cost curve, especially junction points, provide 
essential foundation to our search algorithm. In the proposed search algorithm, the integer 
relaxation of the problem serves as an important step-stone to determine tight search bounds. 
Through extensive numerical experiments, we demonstrated that our algorithm out performs 
other heuristics. Impressively, our algorithm secures global optimal solution in linear time. 
 
Keywords: Kanban, Supply chain, Just-In-Time, Mixed integer nonlinear programming, 
Piece-wise convex, Junction points. 
 
 
1 Introduction 
 
JIT philosophy has been popularly applied to eliminate waste such as excess inventory in 
manufacturing systems. Kanban plays a key role of conveying information and controlling 
material flow in JIT systems. Typically, a supply chain system consists of a series of firms 
which is very similar to the case in JIT systems. Obviously, JIT philosophy can be easily 
extended to supply chain systems where kanbans are employed to propagate demands from 
customers to retailers, wholesalers, manufacturers and suppliers. The material flow and 
information flow between two adjacent manufacturing plants form a kanban stage. When there 
exist two or more kanban stages, it is called a multi-stage supply chain system (MSSCS). 
Therefore, the logistic managers can control the replenishment lots in supply chain systems 
utilizing kanban mechanisms. The focus of this study is to determine the optimal number of 
kanbans and coordinate the firms in a JIT supply chain system by obtaining the optimal 
replenishment strategy. 
 
In such a JIT supply chain, suppliers provide raw materials to the manufacturing plant in the 
first kanban stage, semi-finished products moved between the intermediate kanban stages and 
then end-products are delivered from the plant in the last kanban stage to the warehouses or 
directly to the customers. The logistic managers need to determine: (1) the number of kanbans 
1 
 
3 The model formulation 
 
In [1], Wang and Sarker formulated the model based on the following assumptions: 
 
1. The demands of the systems are known. 
2. The production rate of each plant is known. 
3. The total quantity of products at each stage over a period is constant. 
4. Shortage is not allowed. 
 
The total cost is formulated as (1). 
 
1
0 1 0
1 1
1 10 1
( , , , , , )
(1 ) (1 )
2
n n
n f r si i wi f f
i i
n n
fwir
wi f
i ii f i n
DTC n k k n Q n A A k A n A
Q
HHHQ DH H
n k n p p
+
= =
= = +
⎡ ⎤= + + +⎢ ⎥⎣ ⎦
⎡ ⎤+ + + + − + −⎢ ⎥⎢ ⎥⎣ ⎦
∑ ∑
∑ ∑
"
D
 (1) 
 
where n0, ki, i=1,2,…,n, and nf are integers, and Q is a real number. 
 
The notations used in the model are: 
n number of stages. 
D  demand rate, units/year. 
Q total quantity of finished goods over a period, units/year. 
n0 number of orders of raw material. 
nf number of shipments of finished goods.  
ki number of kanbans at stage i.  
Ar setup (ordering) cost for raw material, dollar/batch. 
Asi setup (manufacturing) cost at stage i, dollar/batch. 
Awi setup (shipping) cost at stage i, dollar/batch. 
Af setup (shipping) cost for end product, dollar/batch. 
Hr holding cost of raw material inventory, dollar/unit/year. 
Hwi holding cost of work-in-process inventory at stage i, dollar/unit/year.  
Hf holding cost of finished goods inventory, dollar/unit/year. 
pi production rate of plant i (i=1,2,…, n+1), units/year. 
 
Note that in order to make our model formulation more concise, we replace ( )0 , , ,f r rn n A H  in 
[1] with ( . Then we can refer )0 1 0 0, , ,n w wk k A H+ ( )0 1 1, , , ,n nk k k k +"  as the vector of integer 
variables, where k0 is the number of orders of raw materials and kn+1 is the number of shipments 
of finished goods. 
 
 
4 Theoretical analysis 
 
In this section we present some theoretical results that provide insights into the characteristics of 
the optimal-cost curve of this MINLP problem. Let  be the optimal cost function of 
the MINLP problem with respect to Q. We will show that there are ‘junction points’ on the 
curve of  and introduce some interesting properties of these junction points. These 
junction points assist us in obtaining the set of optimal integer variables for each given value of 
Q and they facilitate the design of our search algorithm. 
( )optTC Q
( )optTC Q
 
 
3 
is the addition of the minimum cost functions of all stages at Q. 
1
0
( ) ( )
n
opt i
i
TC Q SC Q
+
=
= ∑ . In 
another words, for a given Q, there is an optimal integer multiplier vector  
associated with minimum cost functions 
( )* * *0 1 1, , , nk k k +Κ = "
0 ( )SC Q  to 1( )nSC Q+  that adds up to . ( )optTC Q
 
 
Figure 2: The piece-wise convex curve of ( )iSC Q , 1, 2,..., 1i n= + . 
 
4.2  The junction points 
 
From Fig. 1 and Fig. 2 we see that two convex curve pieces of ( )iSC Q  joint at a particular 
value of Q. Therefore, we can define a junction point for the ( )iSC Q  function as a particular 
value of Q where two consecutive convex curves concatenate. These junction points determine 
at what value of Q where one should change the optimal integer multiplier, , in order to keep *ik
( )iSC Q  minimum. It is not difficult to see that the location of the junction points can be solved 
by equation (4). 
 
   (4) * *( 1, ) ( , )i i i iSC k Q SC k Q+ − = 0
 
Before trying to derive a closed-form to locate the junction points, let’s analyze how the optimal 
integer multipliers are distributed along the Q axis.  
 
 
THEOREM 1  At a given Q value, the integer optimal multiplier of each stage can be derived by 
2
* 21 1 1
2 2
wi
i
wi
H Q
k
DA
⎡ ⎤⎢ ⎥= − + +⎢ ⎥⎢ ⎥
, . 0,1,..., 1i n= +
 
 
Figure 3: The distribution of the optimal integer multipliers along the Q axis. 
5 
adjacent junction points. However, the optimal multiplier vectors on different side of a junction 
point must be different. At least one of the optimal multipliers on the left-side of a junction 
points will change to make the right-side convex curve optimal. This is stated as the following 
proposition. 
 
 
PROPOSITION 5  Suppose ω  is a junction point of . Let  
denote the optimal integer multiplier vector of . In addition, 
( )optTC Q ( )* * *0 1 1( ) , , , nQ k k k +Κ = "
( )optTC Q ( )0 1 1, , ,L L L Lnk k k +Κ = "  and 
 denote the optimal integer multiplier vectors for the left-side and 
right-side convex curves, respectively, regard to the junction point 
( 0 1 1, , ,R R R Rnk k k +Κ = " )
ω . Then, RΚ  is secured 
from LΚ  by increasing at least one of its optimal multipliers by one. , for some 
. 
1R Li ik k= +
{ }0,1,..., 1i n∈ +
 
 
5 The proposed search algorithm 
 
Based on the theoretical results in section 3, we present an efficient search scheme, which 
secures a global optimal solution in linear time. Recall that we assert that  function is 
piece-wise convex with respect to Q. In addition, the characteristics of the junction points reveal 
important properties about  function. It is these theoretical results that encourage us to 
solve the MINLP problem by searching along the Q axis. 
( )optTC Q
( )optTC Q
 
A few observations will help us design such a search scheme: 
 
1. All junction points with respect to each stage can be derived according to the theories in 
previous section and thus all junction points of  are derived. ( )optTC Q
2. Searching along the Q axis simply implies sorting all the junction points and exam   
function fragments of  in the order of the junction points. ( )optTC Q
3. Since  is piece-wise convex, we can find local minimum for each of the convex 
piece. 
( )optTC Q
4. While searching along the Q axis, we can make use of piece-wise local minima to find the 
global optimal solution. 
5. But, what range do we need to search in order to secure the global optima? 
 
From these observations, we see that there are two unresolved issues:  
 
1. How do we calculate the piece-wise local optimum of .  ( )optTC Q
2. How do we determine the search range in order to secure the global optimal solution. 
 
 
5.1  Local optima 
 
Between any two neighboring junction points of  is a convex curve. The convexity 
assures us that once we can find a minimum it is the global minimum of this convex curve. As 
we searching along , each piece-wise convex curve will be examined to locate the 
global optima. These piece-wise convex optima are regarded as local optima of . 
( )optTC Q
( )optTC Q
( )optTC Q
 
Since each piece-wise convex curve is bounded by junction points, the global minimum of each 
piece does not necessarily located between the junction points. If it is not, the convex piece does 
7 
2. The global minimum of the relaxed problem is very close to the global optimum of the 
original MINLP problem. This will make the search range tight and make the search 
algorithm efficient. 
 
Equation (2) is the concerned MINLP problem. The integer relaxed problem is rewritten as 
equation (5). 
 
 
1 1 1 1
0 1 1
1 0 0 1
( , , , , ) (1 )
2
n n n m
wi
n si wi i wi
i i i ii i
HD QZ x x x Q A A x H
Q x
+ + + +
+
= = = =
D
p
⎡ ⎤⎡ ⎤= + + + −⎢ ⎥⎢ ⎥⎣ ⎦ ⎣ ⎦∑ ∑ ∑ ∑"  (5) 
Where ix R
+∈ . 
 
 
THEOREM 3  The global optimum of the relaxed problem is located at 
1
* 1
1
1
2
(1 )
n
si
i
r n
wi
i i
D A
Q
DH
p
+
=
+
=
=
−
∑
∑
. 
 
 
Once we located the global optimum of the relaxed problem by THEOREM 3, we need to 
calculate the total cost value, , of the original MINLP problem at . Before doing 
that, we need to derive all the optimal integer multipliers of . This can be done by 
THEOREM 1. Let us denote this set of optimal integer multipliers as 
( )optTC Q
*
rQ
*( )opt rTC Q
Ropt
ik ’s. 
( )2*21 1 1
2 2
wi rRopt
i
wi
H Q
k
DA
⎡ ⎤⎢ ⎥= − + +⎢ ⎥⎢ ⎥⎢ ⎥
, . 0,1,..., 1i n= +
By plugging Roptik ’s and  into equation (2), we can derive the total cost that is going to be 
used to locate search bounds. Denote this total cost as . 
*
rQ
bound
rc
 
 
THEOREM 4  The search bounds of integer relaxation are located at 
2 4
2
L
bounds
b b a
Q
a
γ− − −=  and 
2 4
2
R
bounds
b b a
Q
a
γ− + −=  respectively,  
where 
1
1
1 (1 )
2
n
wi
i i
Da H
p
+
=
⎡ ⎤= −⎢ ⎥⎣ ⎦∑ , 
1
0
2
n
bound
r wi wi
i
b c D A H
+
=
⎡ ⎤= − −⎢ ⎥⎣ ⎦∑
1
1
n
, si
i
D Aγ +
=
= ∑ . 
 
 
PROPOSITION 6  The search bounds derived by integer relaxation must contain the global 
optimum of the original problem. 
 
 
5.3  The algorithm 
 
We summarize the step-by-step procedure of the proposed search algorithm as follows. 
 
1. By THEOREM 3, compute where the global minimum of the integer relaxation problem is 
located, . *rQ
2. Using  as the initial point to locate search bounds: *rQ
a) mapping back to the original total cost function, ; *( )opt rTC Q
9 
 
Figure 6: Solving the 3-stage example in [1] by the proposed search algorithm. 
 
 
Next, we conduct numerical experiments using randomly generated instances to demonstrate the 
effectiveness of the proposed algorithm. Extensive experiments are conducted with different 
ranges of parameter values. The results indicate that the complexity of the proposed algorithm is 
. Recall that N is the number of integer variables need to be determined, which is 
equivalent to the number of stages plus two. 
( )O N
 
Table 3 is one of the data ranges we used to generate parameters for our random instances. We 
randomly generate 100 problem instances each for 8, 48 and 98 kanban stages. Table 4 list the 
average number of convex intervals searched for each of the N =10, N =50 and N =100 
problems.  
 
 
Table 3: Data range for the randomly generated parameters. 
Demand rate 
(units/year) 
Production rate 
(units/year) 
Setup/shipping cost 
($/batch) 
Setup cost 
($/setup) 
Holding cost 
($/unit/year) 
[5000, 8000] [8000, 13000] [100, 600] [50, 350] [25, 225] 
 
 
Table 4: Average number of convex intervals searched for problems of different sizes. 
 N =10 problems N =50 problems N =100 problems 
Average number of convex 
intervals searched of 100 
random instances 
8.22 
(0.82 N) 
37.16 
(0.74 N) 
73.05 
(0.73 N) 
 
 
7 Conclusion 
 
To solve the discussed multi-stage supply chain system problem, recall that the complexity of 
B&B is  and its run time grows to extremely long when the size of the problem 
becomes large. Wang & Sarker [1] proposed a heuristic which solves sub-optimal solution with 
complexity . The algorithm that we proposed not only solves different sizes of the 
experimental instances, but also gains significant improvement on the solution quality over 
Wang & Sarker’s [1] heuristic. Moreover, our experimental results indicate that the complexity 
of the proposed algorithm is . Extensive experiments have been conducted to substantial 
large number of stages (up to 100) with all the parameters randomly generated. Almost all of the 
problems can be solved in less than N iterations and the average runtime is around 0.8N 
( NO N )
2( )O N
( )O N
11 
A Search Algorithm for an Imperfect Production-Inventory System 
Considering Production and Inspection Capacity 
 
Shih-Chieh Chen 
Department of Industrial Engineering and Enterprise Information, Tunghai University, 
P.O. Box 985, Taichung 407, Taiwan 
d943307@thu.edu.tw 
 
Ming-Jong Yao 
Department of Industrial Engineering and Enterprise Information, Tunghai University, 
P.O. Box 985, Taichung 407, Taiwan 
myao@thu.edu.tw 
 
Wen-Ming Chu 
Department of Electronic Commerce, Hsing Kuo University of Management, 
No. 89, Yuying St., Annan, Tainan 709, Taiwan 
chuwm@mail.hku.edu.tw 
 
 
Abstract 
we assume that the manufacturing process is imperfect, and when the production system gets 
into out-of-control status, it incurs extra costs from the defective products. In this study, we 
suggest to add multiple inspections during a run of production to have early detection if the 
production system gets into out-of-control status. However, inspections incur more costs at the 
meanwhile. The focus of this study is to determine the optimal production cycle time and the 
number of inspections during a production run to minimize the total costs per unit time. 
We formulate a mathematical model for the decision-making scenario discussed above. Then, 
we conduct a full analysis on the optimality structure of the optimal objective function curve. 
Interestingly, we show that it is piece-wise convex with respective to the value of production 
cycle time. By utilizing our theoretical results, we design the proposed search algorithm to 
obtain the optimal solution for the mathematical model. Then, we use a numerical example to 
verify our theoretical results and to demonstrate the implementation of the proposed algorithm. 
Also, by solving randomly generated instances, we conclude that the proposed search algorithm 
outperforms the existing solution approaches in the literature.  
This paper proposes a search algorithm to obtain the optimal replenishment cycles and 
inspection schedules to minimize the average total cost in an imperfect production-inventory 
system considering production and inspection capacity. We present full theoretical analysis on 
the mathematical model and use numerical examples to demonstrate the effectiveness of the 
proposed solution approach. 
 
Keywords: Imperfect production, Production capacity, Inspection capacity, Search Algorithm 
 
 
1  Introduction 
 
Most of studies in the past apply “perfect production” to their proposed models, viz., assume 
that no defective units produced by the production system. However, it is almost impossible to 
guarantee producing no defective unit for any production system in the real world cases.  
In 1915, Harris [2] contributed to our understanding of the economic order quantity (EOQ), 
then significant research have been undertaken on economic lot size production problem
（ELSP）. But most of them assumed that the manufacturing facility will never produce 
defective units in production run. Nahmias [6] and Silver [10] apply the assumption of perfect 
production in their ELSP models.  
Some research efforts also have been undertaken on imperfect production-inventory systems. 
  production of each unit of item , i
iN   The number of defective units of item  produced during a production cycle, i
( , )TC n T  The average cost per unit of time of all items, where 1 2( , , , )Ln n n n= " , 
( )TC T  The optimal cost function of this model with respect to  T
The model is derived with following properties: 
(1) All items are produced on the manufacturing facility.  
(2) Only one item can be produced at a time on the facility. 
(3) The number of product unit for inspection is determined by inspection schedule during a 
production run. 
(4) Demand rates, production rates, set-up costs and inventory costs are deterministic and 
constant.  
(5) Same inspection interval for each item.  
(6) Inspection and restoration time can be out of concern (Lee and Rosenblatt 1987).  
(7) The number of defective units can be determined as lot shift to next process and until 
the entire lot is completed. 
 
The purpose of this model is to obtain the optimal replenishment cycles and inspection 
schedules to minimize the average total cost in an imperfect production-inventory system 
considering production and inspection capacity. We formulate the objective function as 
following. 
 
( ) ( )2
1
1 1
( (1 ) 2
L
i i i i i i i i i i i i i
i
L L
i i
i i
2 )Min A n v T r D h TD D T n
subject to S T
α ρ α π
λ
=
= =
+ + + − +
+ ≤
∑
∑ ∑
         (1) 
 
3  Theoretical Analysis 
In this section, we present some theoretical results that provide insights into the characteristics 
of the optimal-cost curve of the ELSP problem under inspection policy. 
3.1 Properties of objective function 
The costs in objective function can be divided into two parts: (1) costs with decision variable  
and (2) costs without decision variable .We first investigate the characteristics of the minimum 
cost function for an inspection schedule with respect to T. We denote it as
in
in
),( TnTC  
2
1
2
1 1
1 2
( , )
(1 )
( )
2 2
(1 )
( ) (
2 2
( , , , ), , 1 , 2, , .
L
i i i i i i i i i
i i i
ii
L L
i i i i i i i i
i i i
ii i
L i
TC n T
A n v h TD D T
r D
T
)i
n
A h TD n v D T
r D
T T
where n n n n n i L
ρ α πα
ρ α πα
=
= =
+
+ −= + + +
−= + + + +
= ∈ =
∑
∑ ∑
" ` "
n
          (2) 
We define  is ),( TnTC ii
2
( , ) , 1 , 2, , .
2
i i i i i
i i
i
n v D T
TC n T i L
T n
α π= + = "            (3) 
Hence, the ),( TnTC  can be rewritten as 
right-side convex curves with regard to a junction point of the . Then . ),( TnTC ii 1)()( += LiRi nn
From Lemma 1, the optimal average cost curve can be defined following { }
  
)()1(,),(
)2()1(,),2(
)1(0,),1(
            
 )(,)),(()( ''''
⎪⎪
⎪
⎩
⎪⎪
⎪
⎨
⎧
≤<−
≤<
≤<
=
∈∈= ++
#
#
iiii
i
i
iiii
nTTnTTnTC
TTTTTC
TTTTC
NTnRTTTnTCTTC
           (7) 
)( 'Tni is satisfied with Lemma 1. )(TTCi is a piece-wise convex function of all items with 
respect to T .(Figure 2) 
 
Figure 2: A piece-wise convex curve with respect to the production cycle time (T) 
 
Lemma 2. )(TTCi is a piece-wise convex function with respect to T. In addition, for each, one 
can obtain the local minima for )(TTCi at 
( ) 2i i i i i i iT n n D v α π=              (8) 
With the minimum cost of )(TTCi is
22 iiii Dv πα  
The minimum cost of )(TTCi has no correlation with  from equation (8).  in
Let ( )TC T be the optimal-cost function of the ELSP problem in equation (1) with respect to T. 
Theorem 1 indicates the characteristics of the optimal-cost curve of the ELSP problem. 
Theorem 2. The ( )TC T function is piece-wise convex with respect toT . 
Proof.  Let  
1 1
1 1
(1 )
( ) ( )
2
( ) ( )
L L
i i i
i i ii
i i
L L
ii
i i
A h TD
TC T TC T r D
T
TC T TC T
iρα
= =
= =
−= + + +
= +
∑ ∑
∑ ∑
 
where (1 )( ) , 1 , 2 , ... ,
2
i i i i
i i i i
A h TD
TC T r D i L
T
ρα −= + + =  
A given T, the optimal value
1 1
( ) ( ) ( )
L L
iii i
TC T TC T TC T= == +∑ ∑ , where is convex 
functions and each 
( )iTC T
( )iTC T function is a piece-wise convex with respect to T by Lemma 2. 
1
1 2 2
1 1
2 ( )
( , , , )
( (1 )) (
L
i i i
i
L L L
i i i
i i i
ii i
A n v
T n n n
Dh D
n
α πρ
=
= =
+
=
− +
∑
∑ ∑
 "
)
         (11) 
Hence 
1
2
1
2 ( )
( (1 ) )
L
i i
i
cc L
i i i i i i
i
A v
T
h D Dρ α π
=
=
+
=
− +
∑
∑
1
2
1 1
2 ( )
( (1 )) (
L
i i i
i
L L
i i i
i i i
ii i
A n v
T
Dh D
n
α πρ
=
= =
+
≤ =
− +
∑
∑ ∑

)
 
LiDhvnA iiiiiiii ,...,2,1,,,,,,,, =∀ παρ  
It is obvious that  as  for all i . Therefore, there exists no local 
minima for . 
1 2( , , , ) CCLT n n n T≥
 " 1in ≥
ccTT <
Theorem 4 also implies that we may employ as an initial point for the search algorithm to 
start the search from toward higher values of T (until it meets an upper bound ). 
ccT
ccT UT
 
4.2 Proceeding with the search by junction points 
  In this section we show how to proceed with the search by utilizing a sequence of (sorted) 
junction points. By Theorem 1 and 3, each junction point provides the information that one 
should change the optimal multiplier of item i from to +1 at to secure the optimal value 
for the
( )iT n
in in ( )iT n
)(TTC function. Therefore, during the search, we need to keep an L-dimensional 
vector in which each value of indicates the location of the next 
junction point of each item i where the optimal multiplier of item i should be changed. As the 
algorithm search toward higher values of T, one should change the multiplier for the particular 
item i with small value of to currently update the vector of optimal multipliers. 
Let represents the current value of T where the search algorithm reaches. Denote as
* * *
1 2( ( ), ( ),..., ( ))Ln T n T n T ( )iT n
( )iT n
cT δ the item 
index for the item i with the smallest value of ,i.e.,( )iT n { }arg min ( )i i cT n Tδ = >
}δ +
..
. To proceed with 
the search from , by Theorem 1, we need to update the vector of optimal multiplier at 
by 
cT
( )iT n
( ) ( )( ) {( ) \{ } 1cn T T n nδ δ≡N N ∪            (12) 
where ‘\’denotes set subtraction. 
Let{ be the sequence of the points that the algorithm reaches. In addition, by the definition, 
we have . From another point of view, the algorithm search along{ , a sequence of 
junction points from , where . Note that this array is sorted on the 
location of the junction points in ascending order except that the initial point may not be a 
junction point. Section 4.2 asserts that the vector of optimal multipliers for the
}jw
0 ccw T≡ }jw
0w 1 , 0,1,2,.j jw w j+ ≥ =
ccT
)(TTC function is 
invariant between 1jw + and . Therefore, jw ( )jwN is the vector of optimal multipliers for 
the )(TTC  function in the interval . Denote as1( ,j jw w+ ] ( ( ))jT wN

the minimum for the vector of 
multipliers ( ( ))jT wN

.  
Lemma 4. 
(c) use equation (7) to obtain ; ( )ccTΝ
(d) if , set  and , calculate , and 
calculate the best-on-hand upper bound by ; otherwise, let  and; 
; 
1 ( ( )) [ , )cc ccT T T w∈Ν
 *=  ( ( ))ccT T TΝ
 *= ( )ccTΝ Ν * *( , )TC TΝ
UT ∞=UT
* *( , )TC T = ∞Ν
(e) set j = 1 and . c jT w=
 
2. The search procedure: 
(a) obtain by  and get the =  by 
; 
( )jwΝ ( ) ( )( ) {\{ } 1j cw T n nδ δ≡N N ∪ }+ )
>
1jw + ( 1iT n +
{ }arg min ( 1)i i cT n Tδ = +
(b) calculate ,  and try to revise the best-on-hand upper bound ; ( ( )jTC wΝ ( ))jwΝ
 *
UT
(c) if ,set * *( ( ), ( ( ))) ( , )j jTC w T w TC T<Ν Ν Ν
 *=T ( ( ))jT wΝ

and *= ( )jwΝ Ν . 
3. The termination condition of the search algorithm: 
(a) if 1jw + >  ,output , ,  and the algorithm terminates; *UT *T *Ν * *( , )TC TΝ
(b) otherwise, set j =j +1 and .Go to Step 2. =  c jT w
 
4.5 Production capacity checking 
  We consider the limitation of production capacity in this study. In other word, the sum of 
setup time and production time for each item i must equal or less than the production cycle time, 
otherwise, production lots of all items could not be completed during a production cycle. 
  The all local minima solutions obtained between lower and bounds are called “the candidates 
for the optimal solution’. Next, we perform production capacity checking with these candidates 
and find out they are feasible or infeasible solutions. If the candidate is feasible after production 
capacity checking, it is called “sure candidate”; otherwise, it is called ”infeasible solution”. 
  If infeasible outcome is obtained, that means the total time of production activities will excess 
the production capacity, we can make a modification by increasing production cycle time T. In 
other words, using the binary search to find the feasible solution with lowest total average cost 
between  ( ( ))jT wΝ

and .  *UT
 
5  Numerical experiments 
In this section, we first present a numerical example to demonstrate the implementation of 
proposed search algorithm. As the proposed algorithm can solve an optimal and feasible 
solution for the ELSP problem, we also compare the solution obtained by the proposed search 
algorithm with solution of Lin and Gong’s heuristic. We present another random experiment to 
find the critical range of sure candidates/ infeasible solutions for Lin and Gong’s heuristic in the 
second part of this section. 
5.1 A demonstrative example 
The numerical example presented in this subsection demonstrates the implementation of the 
proposed search algorithm. Table 2 presents a set of parameters used in this numerical example. 
We used a set of parameters of Table 2 applying to our search algorithm with considering 
production capacity and Lin & Gong’s heuristic. The sure candidates and infeasible solutions for 
our search algorithm are shown in Table 3 and 4. 
From Table 3, we get the global optimal also feasible production cycle time is 1.2880 day. 
The number of inspection for item 1, 2 and 3 is 5, 5, and 7. The best average total cost is 
$10,161.7. 
levels of the holding cost and four levels of the demand rate to perform cross analysis (Table 6). 
Table 5: The set range of parameters used in the random example 
iA  iv  ir  iπ  iD ip  iα  ih  iS  
(1.2,2) (0.05,0.08) (0.15,0.2) (0.1,0.18) (2,5) iD *U(12.5,25) (0.05,0.1) (0.05,0.1) (0.05 0.1)
 
Table 6: Four levels of versus four levels of (1) ih iD
  iD  
  (2,5) (5,8) (8,11) (11,14) 
(0.05 ,0.1) sure candidate sure candidate infeasible infeasible 
(0.1,0.15) sure candidate infeasible infeasible infeasible 
(0.15,0.2) infeasible infeasible infeasible infeasible i
h  
(0.2,0.25) infeasible infeasible infeasible infeasible 
From table 6, the total production time of all local optimal solutions for (0.05 ,0.1) 
(2,5), (0.1 ,0.15) (2,5)and (0.05 ,0.1) (5,8) do not excess the production capacity. 
Hence, they are all sure candidates. 
ih
iD ih iD ih iD
According to the result of Table 6, we tested five levels of the holding cost (0.15,0.2) and 
four levels of the demand rate (2,8) to perform cross analysis (Table 7). 
ih
iD
Table 7: Four levels of versus four levels of (2) ih iD
  iD  
  (2,3) (3,4) (4,5) 
(0.15 ,0.16) sure candidate sure candidate infeasible 
(0.16,0.17) sure candidate sure candidate infeasible 
(0.17,0.18) sure candidate sure candidate/infeasible infeasible 
(0.18,0.19) sure candidate infeasible infeasible 
ih  
(0.19,0.20) sure candidate infeasible infeasible 
 
From Table 7, we find some of local optimal solutions excess the production capacity but 
some of them do not for parameters ranges (0.17,0.18) and (3,4). This finding can help us to 
get the “boundary” of production capacity. In other words, we wish to obtain the parameter 
critical ranges of and . For during this parameter range, the global optimal solution that is 
feasible with considering production capacity by applying the search algorithm, but it is 
infeasible by applying Lin & Gong’s heuristic. 
ih iD
ih iD
According to the result of Table 7, we make smaller range of parameters testing. We tested 
three levels of the holding cost (0.165,0.180) and two levels of the demand rate (3,4) to 
perform cross analysis (Table 8). 
ih iD
Table 8: Four levels of versus four levels of (3) ih iD
  iD  
  (3,3.5) (3.5,4) 
(0.165,0.170) sure candidate/infeasible infeasible 
(0.170,0.175) infeasible infeasible ih  
(0.175,0.180) infeasible infeasible 
From Table 8, we find some of local optimal solutions excess the production capacity but 
