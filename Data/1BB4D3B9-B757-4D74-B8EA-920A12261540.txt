 2
到 兩 個 問 題 ： 第 一 個 問 題 是 解 析 度
（resolution），通常提供材質的解析度都很
小，若我們直接將材質貼於物體上，必然無
法將整個大型物體覆蓋。第二個問題是，記
憶體管理的問題，為了要呈現較佳的視覺效
果，我們通常會使用多組材質組合起來，這
便表示系統必須使用更多的記憶體空間來
儲存這些資料。材質合成（texture synthesis）
演算法解決了上述的兩項問題。然而，雖然
傳統材質合成技術可以減少資料擷取，但是
我們仍必須處理從材質合成過程中所產生
的大量資料。材質貼磚（texture tiling）提供
一種可貼圖在 3D 模型上的一種方法。材質
貼磚不直接將材質貼到 3D 模型上，而是利
用中間的表面分離材質合成過程為兩大部
分：表面映射（surface mapping）與磚瓦放
置（tile placement）。 
本計畫進行「三維模型上材質貼磚技術
之研究」，提出了全新的三維模型上材質貼
磚演算法。我們針對多立方體上鋪貼材質技
術研究，提出一個結合多立方體映射及王氏
磚的系統來做紋理貼圖，藉由自動建立的多
立方體及鋪磚方法讓多立方體佈滿紋理。不
像多立方體映射需要透過使用者來自定。此
外，我們在多立方體及 3D 模型間完成無縫
隙的紋理貼圖。首先，多立方體轉換成多細
胞結構，然後依投影結構所需將部分單位細
胞合併成長方形細胞（rectangular cell），接
著，個別處理 3D 模型的三角形，每個三角
形會依它和細胞的相交關係適當地切割成
幾個碎片，每個碎片僅僅被在一個細胞裡
面，最後依照每個細胞的投影方向來分別作
投影。 
 
二、 文獻探討 
材質貼磚（texture tiling）提供一種可貼圖在
3D 模型上的一種方法。材質貼圖演算法有
一些是多重圖（multi-chart or atlas）的方法，
這方法著重於分割（partitioning）、參數化
（parameterization）及填滿（packing）。 
Cignonoi 等人在 1999 年提出將一個 3D 模
型的表面切割成許多區塊，每個區塊包含一
或兩個三角形來作對應。之後 Carr 等人在
2002 年提出多重圖演算法，每個區塊包含
的三角形更多，並用參數化的方式對應，降
低扭曲的程度，如圖一所示。然而，這兩種
演算法皆會在區塊的邊界產生縫隙。 
材質貼磚不直接將材質貼到 3D 模型
上，而是利用中間的表面分離材質合成過程
為兩大部分：表面映射（surface mapping）
與磚瓦放置（tile placement）。立方體映射
（cube maps）能夠做到無縫隙的材質貼
圖，但是 3D 模型的形狀必須和立方體近
似。Tarini 等人在 2004 年提出一個延伸立
方體映射概念的新演算法，稱為多立方體映
射（polycube-maps），輸入一個 3D 模型，
使 用 者 會 自 訂 一 個 近 似 的 多 立 方 體
（polycube），使用者會透過系統去扭曲
（warp）多立方體的外型，讓它更逼近 3D
模型。 接著，系統會將 3D 模型上的頂點
（vertices）映射到多立方體上，最後將多立
方體反向扭曲（inverse warping）回原來的
形狀並做最佳化的修正。 
到了 2005 年，Fu 和 Leung 將王氏磚
（Wang tiles）和多立方體結合來達成無縫
隙的材質貼圖，圖五是演算法的流程圖。首
先，輸入一個 3D 模型，接著應用多立方體
映射來建構出多立方體。貼磚（tiling）的方
法適合用於方形（quad-based）的幾何結構，
因此，他們能進一步地將材質磚對映到模
型。最後，一個磚形材質（tiled textures）的
集合便能將材質貼到模型上。 
 
三、 研究方法 
首先蒐集與研讀文獻，了解國內外學者相關
技術，分析其優缺點並加以改進利用，找出
突破的技術。然後搜集各類基本的材質，以
利實驗時有足夠的材質做測試，藉此找出最
佳方法。接著進入開發核心技術，我們所提
出的方法系統架構描述如圖一所示： 
首先使用者輸入一個 3D 模型及一張材
質影像（texture image），兩個分別來處
理。接著，系統會在多立方體建立（polycube 
generation）的步驟中找出 3D 模型的多立
方體，而在樣本選取（select sample）的
步驟中，從輸入的材質隨機選出四個菱形的
樣本。在多立方體上鋪貼材質（texture 
tiling）這步驟中，我們沿用王氏磚的概念
將材質貼到多立方體，而且不會產生縫隙。
將材質投影到 3D 模型之前，我們必須先把
多立方體轉換成長方形細胞（rectangular 
cells）的結構，最後根據每個細胞內部結
構來決定投影方式，把多立方體表面上的材
質映射到 3D 模型上，產生最後的結果。 
 
 4
技術。 
 完成設計模型上的材質映射。 
 
規劃投稿到相關的會議論文與國
期刊。 
[Ala phics. 
[CH
ransactions on 
[Cha
訊科學研究所碩
[Che
資訊工程學系碩士論文，2004
[Chi
學資訊管理系碩
[CM
s. 
[CSH
ns on Graphics 22, 3, 
[Cul
iles. Discrete Mathematics 160, 
[Dou92] Douglas, V. 1992. Triangle-cube 
[EF0
eedings of SIGGRAPH 
[EL9
parametric 
[FL0
hics 
[Gri0
odeling International 2002, 
[GS8
nd Company. ISSN 
[HJO
logies. ACM SIGGRAPH 2001, 
[KFC
gs of SIGGRAPH 
[KSE
gs of ACM SIGGRAPH , 
[LPR
ransactions on 
[LL0
an 
[MY
ings of ACM SIGGRAPH 93, 
[NA03] Nealen, A. and Alexa, M. 2003. 
mposium on 
[PB0
y
z 完成設計邊緣上色演算法。 
z 完成設計磚瓦建構演算法。 
z 完成多立方體轉換成多細胞結構
z 完成長方形的細胞結構技術。 
z 完成設計細胞的投影方程式。 
z
由於整個計畫執行如期進行，達到預期
之目標，完成相關技術之核心技術。另外，
我們所開發之核心技術具有相當學術價
值，也達成應用不同領域之技術到電腦繪
圖，我們將
際
 
參考文獻 
00] Alan, W. 2000. 3D computer gra
3rd Ed., Addison Wesley, 245-247. 
02] Carr, N. A., and Hart, J. C. 2002. 
Meshed atlases for real-time procedural 
solid texturing. ACM T
Graphics 21, 2, 106-131. 
02] 張任烜（指導教授: 王宗銘），「有
效的材質合成與影像轉移技術之研
究」，國立中興大學資
士論文，2002 年。 
04] 陳之容（指導教授: 戴文凱），「採
用資料探勘技術的材質合成」，國立東
華大學
年。 
05] 邱家瑋（指導教授: 楊傳凱），「由
二維影像形成三維材質之自動合成系
統」，國立臺灣科技大
士論文，2005 年。 
R*99] Cignoni, P., Montani, C., Rocchini, 
C., Scopigno, R., and Tarini, M. 1999. 
Preserving attribute values on simplified 
meshes by resampling detail texture
The Visual Computer 15, 10, 519-539. 
D03]Cohen, M. F., Shade, J., Hiller, S., 
and Deussen, O. 2003. Wang tiles for 
image and texture generation. ACM 
Transactio
287-294. 
96] Culik II, K. 1996. An aperiodic set of 
13 Wang t
245-251. 
intersection. Graphics Gems III, 236-239 
1] Efros, A., and Freeman, W. 2001. 
Image quilting for texture synthesis and 
transfer. In Proc
2001, 341-346.  
9] Efros, A., and Leung, T. 1999. 
Texture synthesis by non-
sampling. ICCV, 1033-1038.  
5] Fu, C. W., and Leung, M. K., 2005. 
Texture tiling on arbitrary topological 
surfaces. Proceedings of Eurograp
Symposium on Rendering, 99-104.  
2] Grimm, C. M. 2002. Simple 
manifolds for surface modeling and 
parameterization. In Proceedings of 
Shape M
237-244. 
6] Grünbaum, B., and Shephard, G. C. 
1986. Tilings and patterns. W. H. 
Freeman a
0716711931. 
*01] Hertzmann, A., Jacobs, C., Oliver, 
N., Curless, B., and Salesin, D. 2001. 
Image ana
327-340. 
*07] Kopf, J., Fu, C.W., Cohen-Or, D., 
Deussen, O., Lischinski, D., and Wong, 
T.T. 2007. Solid texture synthesis from 
2D exemplars, ACM Transactions on 
Graphics (Proceedin
2007), vol. 26, no. 3. 
*03] Kwatra, V., Schodl, A., Essa, I., 
Turk, G., and Bobicks, A. 2003. 
Graphcut textures: image and video 
synthesis using graph cuts. In 
Proceedin
277-286. 
M02] Lévy, B., Petitjean, S., Ray, N., 
and Maillot, J. 2002. Least squares 
conformal maps for automatic texture 
atlas generation. ACM T
Graphics 21, 3, 362-371. 
6] Lin, W.C. and Liu, Y. 2006. Tracking 
dynamic near-regular textures under 
occlusion and rapid movements. In 
Proceedings of the 9th Europe
Conference on Computer Vision 2006. 
V93] Maillot, J., Yahia, H., and Verroust, 
A. 1993. Interactive texture mapping. In 
Proceed
27-34. 
Hybrid texture synthesis. In Proceedings 
of Eurographics Sy
Rendering 2003, 97-105. 
0] Piponi, D., and Borshukov, G. 2000. 
Seamless texture mapping of subdivision 
surfaces b  model pelting and texture 
2009 進階圖像技術國際研討會(IWAIT2009)出國報告 
 
張勤振 副教授 
國立聯合大學 資訊工程學系 
E-mail: ccchang@nuu.edu.tw 
 
一、會議經過 
 2009 進階圖像技術國際研討會(International Workshop on Advanced Imaging Technology 2009, 
IWAIT2009) 於 2009 年 1 月 12 日至 13 日在韓國首爾舉行。此會議是亞洲國家舉辦的主要進階
圖像技術國際研討會，每年集合影像與視訊處理、電腦視覺、電腦圖學、多媒體等的專家學者參
與，收錄目前相關技術研究論文。 
我個人參加會議主要任務是報告論文，於 1 月 13 日上午發表。整個研討會的內容相當豐富，
分為 2 個 Tutorials，12 個 Sessions 和 6 個 Poster Sessions，這些 Sessions 主要主題如下: 
z Image Processing 
z Computer Graphics  
z Computer Vision 
z Compression 
z Pattern Recognition 
z Multimedia Applications 
z Networked Multimedia & Virtual Reality 
z Computer Animation 
z Broadcasting 
z Medical Imaging 
 
 
A 3D TEXTURE SYNTHESIS APPROACH 
 
 
Ya-Lin Su, Chin-Chen Chang*, Zen-Chung Shih** 
                              
Institute of Multimedia Engineering, National Chiao Tung University  
Hsinchu 300, Taiwan (ROC) 
*Department of Computer Science and Information Engineering, National United University 
Miaoli 360, Taiwan (ROC) 
E-mail: ccchang@nuu.edu.tw 
**Department of Computer Science and Information Engineering, National Chiao Tung University 
Hsinchu 300, Taiwan (ROC) 
 
 
ABSTRACT 
 
In this paper, a new approach for solid texture synthesis 
from input volume data is presented. In the pre-process, 
feature vectors and a similarity set were constructed for 
input volume data. The feature vectors were used to 
construct neighboring vectors for more accurate 
neighborhood matching. The similarity set which recorded 
3 candidates for each voxel helped more effective 
neighborhood matching. In the synthesis process, the 
pyramid synthesis method was used to synthesize solid 
textures from coarse to fine level. The results of the 
proposed approach were satisfactory. 
 
Keywords: texture, texture synthesis, solid texture, 
texture control. 
 
1. INTRODUCTION 
 
There are many different techniques for 3D surface 
texturing, such as texture mapping [7], [20], [21], 
procedural texturing [4], [14] and image-based surface 
texturing [17], [18], [19]. Texture mapping is the easiest 
way for 3D surface texturing. However, it has the common 
problems of distortion, discontinuity, and unwanted seams. 
Procedural texturing can generate high quality 3D surface 
textures without distortion and discontinuity, but there are 
still some problems. First, procedural texturing models 
exclude some textures, such as marble. Second, there are 
too many parameters for users to know and control. Results 
depend on the designers. Image-based surface texturing 
synthesizes a wider range of textures, but it fails with large 
structural textures such as bricks. Further, it also distorts 
when the curvature is too large. As a result, when 2D 
textures are used in texturing 3D objects, there are some 
disadvantages such as discontinuity, distortion on 
large-curvature surfaces, and non-reusability. Thus, 
textures generated for one surface cannot be used for other 
surfaces.  
 
Solid textures can be used to overcome these problems. 
Peachey [13] and Perlin [14] introduced the idea of solid 
textures being blocks of colored points in 3D space to 
represent real-world materials. Solid textures obviate the 
need for finding a parameterization for the surface of the 
object to be textured while avoiding the problems of 
distortion and discontinuity. Moreover, solid textures 
provide texture information not only on surfaces, but also 
inside the entire volume. Several methods [3], [10], [15] 
use three orthogonal slices for neighborhood matching, but 
there are some drawbacks in these methods: They do not 
include the neighborhood information in 3D space and they 
are difficult to control in 3D space.  
 
In this paper, an approach for real 3D space texture 
synthesis based on input volume data is presented. 
Information-rich appearance vectors and cube 
neighborhoods are used for neighborhood matching. The 
results show that the proposed approach can model a wide 
range of solid textures.  
 
The rest of this paper is organized as follows: In Section 2, 
works related to solid texture synthesis are reviewed. In 
Section 3, the proposed approach for synthesizing solid 
textures from input volume textures is presented. Results 
are given in Section 4. Finally, conclusions are discussed in 
Section 5.   
 
2. RELATED WORKS 
 
Ashikhmin [1] presented an algorithm using an interactive 
painting-style interface for control over the texture 
synthesis process. Lefebvre and Hoppe [11] introduced a 
high-quality pyramid synthesis algorithm to achieve 
parallelism. Their method includes an upsampling step to 
maintain patch coherence, jittering of exemplar coordinates 
to make the texture varied, and an order-independent 
correction approach to improve texture quality. Lefebvre 
and Hoppe [12] presented a framework for exemplar-based 
texture synthesis with anisometric control. They used 
appearance vectors to replace traditional RGB color values 
for neighborhood matching. Their appearance space makes 
the synthesis more efficient because it reduces runtime 
neighborhood vectors from 5×5 grids to only 4 locations. 
They also combined their pyramid synthesis with this 
method to accelerate neighborhood matching and 
introduced novel techniques for coherent anisometric 
synthesis which reproduces arbitrary affine deformations in 
textures. They provided a convenient method for texture 
control. Kwatra et al. [8] presented a method for flow 
control on 2D textures. They presented an algorithm to 
achieve texture control on 3D surfaces [9].  
 
Jagnow et al. [6] presented a stereological technique for 
 

















































































1
1
1
,
1
1
0
,
1
0
1
,
1
0
0
,
0
1
1
,
0
1
0
,
0
0
1
,
0
0
0
,                
 
where lh  denotes the regular output spacing of exemplar 
coordinates in level l  and )(log22 lmlh
 ;   denotes the 
relative locations for 8 children. 
 
3.3.2 Jitter Method 
After upsampling the coordinates, the upsampled 
coordinates are jittered to achieve deterministic 
randomness. The upsampled coordinates at each level are 
perturbed by  
 
)(][][ pJpSpS lll  ,                                                         
 
where
lll rpHhpJ )()(   is a jitter function produced by a 
hash function  22 1,1:)( pH  and a user-defined 
per-level parameter lr . 
 
3.3.3 Voxel Correction 
 
To make the jittered coordinates similar to those in 
exemplar V , the jittered coordinates are used to recreate 
neighborhoods. There is a feature value for each voxel after 
constructing feature vectors. For each voxel p , the 
feature values of its neighborhoods at the current level are 
gathered to obtain a neighborhood vector )( pN
lS
. Then, 
the most similar voxel is searched from the transformed 
exemplar V
~
  to make the result similar to exemplar V . 
In neighborhood matching, 8 diagonal locations for voxel 
p are used to obtain the neighborhood vector )( pN
lS
: 
 
























1
1
1
]][[
~
)( ' pSVpN
lS
.                 
 
Then, the proposed approach applies Lefebvre and Hoppe’s 
approach [12] to perform 3D coordinate correction. First, 
the feature values from 4 synthesized voxels near 
neighboring voxels of voxel p , p , are averaged as 
the new feature value of voxel p . The averaged feature 
value );( pN
lS
of voxel p  is computed by  
 
]][[
~
4
1
);( ',    pSVpN MMSl ,        
  
where  
 
 









































100
000
000
,
000
010
000
,
000
000
001
,
000
000
000
.  
Second, the new feature values from 8 diagonal voxels are 
used to construct neighborhood vectors )( pN
lS
. 
 
A voxel u  which is most similar to voxel p  is searched 
by comparing neighborhood vectors )( pN
lS
 and )(uN
lS
. 
The similarity sets and coherence synthesis method are 
used in the searching process. The 8 neighboring voxels of 
voxel p  are used to infer where voxel u  is.  
 
In the same way, there are 8 neighboring voxels of voxel 
p  and each of them has 3 similar voxels. Therefore, 24 
candidates are inferred for voxel p . Then, the 24 
)(uN
lS
s are computed, where u  is a candidate. These 
)(uN
lS
s are compared with )( pN
lS
 for neighborhood 
matching and the most similar voxel u  is found to 
replace voxel p . 
 
4. RESULTS 
 
To evaluate the effectiveness of the proposed approach, 
several experiments were done. The proposed algorithm 
was implemented in MATLAB with a PC with 2.67GHz 
and 2.66GHz Core2 Quad CPU and 4.0GB of system 
memory.  
 
Fig. 2 shows (a) an input volume data (Case_1), (b) the 
cross section at X=32, Y=32, and Z=32 for the input 
volume data, (c) a resulting volume data and (d) the cross 
section at X=64, Y=64, and Z=64 for the resulting volume 
data. The input volume data was a stochastic and 
marble-like solid texture. It only contained two vivid colors. 
It was information-rich, only needing a small amount of 
data to represent the whole texture. The result was 
continuous and not the duplication of the input data. 
 
Fig. 3 shows (a) an input volume data (Case_2), (b) the 
cross section at X=32, Y=32, and Z=32 for the input 
volume data, (c) a resulting volume data and (d) the cross 
section at X=64, Y=64, and Z=64 for the resulting volume 
data. The input volume data was a particle-like solid 
texture. It contained few colors and there was a clear 
difference between particles and background. As long as 
there were few complete particle patterns in the input 
volume data, desirable synthesized results were obtained. 
 
 
Fig. 2. (a) input volume data (Case_1), (b) cross section at 
X=32, Y=32, and Z=32 for input volume data, (c) resulting 
volume data and (d) cross section at X=64, Y=64, and 
