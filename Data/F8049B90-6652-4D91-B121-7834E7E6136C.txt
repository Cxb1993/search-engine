列加法電路，以及周邊之測試電路，實現可應
用於 SoC晶片設計所採用之軟型矽智財電路。
乘法器有相當多種型式，依架構可分為序
列(重覆)型乘法器、陣列結構乘法器、以及平行
乘法器等。序列(重覆)結構乘法器主要以單一加
法器重覆累加部份乘積進行乘法運算，有人針
對改良型布斯乘法器提出序列結構之設計
[1-3]，雖然需要較少硬體面積，運算時間卻隨
計算位元數增加而顯得冗長。陣列乘法器之架
構較為規則，運算過程又可以導管運算方式進
行，加快整體運算速度，但硬體面積顯得龐大。
平行乘法器則先產生部份乘積，再以樹狀結構
累加部份乘積，達成快速又省面積之目的，因
此為此計畫考慮之設計方式。
為加速乘法過程，已有一些改良型布斯乘
法的重新編碼方式，而乘法器的規則性也使其
測試主題列入討論，例如採用特定的障礙模型
或者相關的內建自我測試電路[4-6]。作者們提
到只要使用一個規則的內建自我測試電路，即
可提供固定數目的測試圖樣，針對電路元件障
礙模型或是單一固定障礙模型，皆有非常高的
障礙涵蓋率。在此計畫中，吾人針對常用的三
位元重新編碼方式，設計改良型布斯乘法器，
加入內建自我測試電路，模擬與驗證此種電路
之正確性及可達到之實際目標。
因應系統單晶片之設計及測試需要，IEEE
於去年提供標準環繞測試電路之設計方式[7]，
給予設計者參考。吾人先前嘗試設計之環繞電
路與標準所提並不符合，於此計畫嘗試改變。
四、研究方法及成果
平行式乘法器具有較快的運作速度，使其
較為廣泛使用，其之架構主要包括三個部份：(1)
部份乘積產生電路：採用布斯方法，產生部份
乘積，以備後續累加使用。(2)樹狀加總電路：
採用如 Wallace Tree 架構，加總部份乘積。(3)
末端加總電路：採用一些加法器處理最後之加
總。圖一為基本電路結構。
Decoder
Ripple Carry Adder
Wallace Tree
multiplicand multiplier
Products
pppp
圖一：改良型布斯乘法器基本電路結構
所設計之乘法器係處理二進制正負數，由
乘數之最高位掃瞄至最低位，每次三位元，決
定乘數要乘上+2、-2、+1、-1、或 0，做為部份
乘積，如此可減少一半之部份乘積，以加快整
個運算過程。在部份乘積之加總部份，可使用
修正向量，簡化每個部份乘積正負號延伸問題
[8]。若部份乘積為負(正)，最高位元給予 0(1)，
修正向量(101010…1011)則配合位元數提供加
總。針對 m-bitn-bit之有號數乘法，部份乘積
若取 m+1 位元，當被乘數為-2m-1，乘數之三位
元決定要乘+2或-2於被乘數時，部份乘積會表
達錯誤，此主要原因為部份乘積之位元數在此
情形下會發生位元不足，產生溢位，無法正確
表達部份乘積值，因此吾人將部份乘積增加一
位元，以解決此問題，成為較完整之乘法器。
解碼器部份依乘數每三位元值，及被乘數
是否為-2m-1，以下面圖表方式決定 88 乘法器
中部份乘積值。其中 bi+1bibi-1是乘數每次考慮之
三位元值，pp[9..0] 是產生之部份乘積，a[7..0]
是被乘數值，c[7:0]則是 a[7..0]的二補數值。
bi+1 bi bi-1 pp9 pp8 pp7 pp6 pp5 pp4 pp3 pp2 pp1 pp0
0 0 0
0 0 1
0 1 0
0 1 1
1 0 0
1 0 1
1 1 0
1 1 1
1 0 0 0 0 0 0 0 0 0
~a7 a7 a7 a6 a5 a4 a3 a2 a1 a0
~a7 a7 a7 a6 a5 a4 a3 a2 a1 a0
~a7 a7 a6 a5 a4 a3 a2 a1 a0 0
~c7 c7 c6 c5 c4 c3 c2 c1 c0 0
~c7 c7 c7 c6 c5 c4 c3 c2 c1 c0
~c7 c7 c7 c6 c5 c4 c3 c2 c1 c0
1 0 0 0 0 0 0 0 0 0
