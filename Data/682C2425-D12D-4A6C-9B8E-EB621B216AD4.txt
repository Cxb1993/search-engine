 II 
一、 中英文摘要 
關鍵詞：System-in-package (SiP) 設計，測試方法，成本-品質評估系統，邊界測試，良率 
 
SoC的設計技術已持續進行研究很多年了，但是由於其成本一直無法降下來，所以 SoC設
計成功的例子尚不多見，也就是說 SoC之設計技術尚未成熟化，這個結果除了設計成本過高之
外，良率不佳也是另一項原因。這是因為 SoC晶片往往需要整合不同的製程在一顆晶片上，這
在製造的過程上，有一定的困難度。 
 
為了達到低成本及高品質的設計，同時又兼顧複雜設計的考量，System-in-package(SiP)
的設計已漸漸超越 SoC，甚至有取代 SoC的趨勢，而成為目前業界 IC產品之主流設計技術，例
如，目前許多手機晶片，都是採用 SiP的設計技術來實現的。 
 
測試對產品的開發及可靠度有關鍵性的影響，原因在於製程很難是完美的。總是不可避免
的，會有 defect發生在 die 上面。Testing的目的就是要將這些有 defect 的 die給找出來，
以避免送到顧客手上在使用時發生問題。但是測試是要花錢的，同時測的越完全，花費越高。
Cost- effective Testing 即是指在達成一定品質要求下，讓測試成本降到可接受的範圍。 
 
當 SiP設計的方向是 bottom up的，即先有個別的 die，再整合成一個 SiP。若相同功能的
die，依其品質(良率)有不同的 cost，良率高的貴，良率低的便宜。測試成本也依 test quality 
(fault coverage) 而有不同，那麼當要組成一個 SiP 設計時，面對品質( defect level )及成
本( overall cost )的考量。如何找到最佳的組合。本研究已建立起一個成本-品質評估系統，
供 SiP設計時參考。 
 
 
 
 
 
 
 
 
 
 IV 
目錄 
中文摘要 II 
英文摘要 III 
目錄 IV 
內容 V 
參考文獻 X 
計畫成果自評 XI 
附錄   
ICCAD 2009 .............................................................................................................  
ISOCC 2009 ..............................................................................................................  
VLSI-DAT 2010 .........................................................................................................  
DAC 2010 .................................................................................................................  
IEEE TRANSACTIONS ON CAD -I ...............................................................................  
IEEE TRANSACTIONS ON CAD -II (TO APPEAR) .........................................................  
 
 
 
 
 VI 
（二）研究目的 
 
測試是要花錢的，同時測的越完全，花費越高。若是針對人身安全相關的產品，測
試的成本往往可以不計代價，但是若是針對一般消費性的產品，如電視、遊樂器、音響、
玩具等，則花費過多測試成本，是業者無法接受的。Cost- effective testing 即是指
在達成一定品質要求下，讓測試成本降到可接受的範圍，本計劃即在探討 SiP 設計的測
試問題。 
 
目前 SiP 的設計，在業界已有許多產品使用，尤其是手機產品，其晶片通常有一塊
logic 加入一塊 flush memory。在與業界交換意見後，得知目前 SiP 的測試方法，仍然
是 Ad-Hoc，各家做法不一，良莠不齊，甚至有的也沒測( 超低價消費性電子產品 ) 。在
研究方面，由於 SiP 是屬於新發展的技術，也少有論文提及測試方法，儘管 Multi-chip 
Module( MCM )與 SiP具有些許相似之處，MCM的測試方法及觀念，也可部份用在 SiP 上，
但是整體來看，仍是不完全一樣的。 
 
當 SiP設計的方向是 bottom up的，即先有個別的 die，再整合成一個 SiP。若相同
功能的 die，依其品質(良率)有不同的 cost，良率高的貴，良率低的便宜，測試成本也
依 test quality (fault coverage) 而有不同，那麼當要組成一個 SiP 設計時，面對品
質(defect level)及成本(overall cost)的考量。如何找到最佳的組合。例如： 
 
1. 在滿足某一品質要求下，求得最低成本的組合方式。 
 
2. 在最高成本的限制下，求得最好的品質( defect level最低 )的組合方式。 
 
與此問題相關的因素(變數)有 bare die 之成本及良率，SiP所需之 die的個數，測
試成本及 fault coverage (FC)，assembly 之成本及良率，assembly 過程中引入新的
defect之機率及送出有問題之 SiP 產品給顧客的賠償金。因此，本計畫將研究建立起此
一多變數的成本-品質評估系統，供 SiP設計時參考。 
 
(三) 研究方法及成果 
SiP 設計的品質受到整合進去的元件、測試方法所能達到的瑕疵涵蓋率的影響。整合高品
質的 bare die 可以讓 SiP 設計品質更佳。因此，Known Good Die (KGD) 的獲得在設計 SiP
時是一個重要的關鍵課題。然而，以經濟觀點論來看，研發與製造的成本必頇被考量進 SiP
的整合設計中。所以在這份研究報告中，我們企圖以「品質-成本」評估模型來最佳化 SiP的
整合。在我們的模型中，我們將在最高成本的限制下，求得最好的品質( defect level 最低 )
的組合方式。在此，我們將具有相同功能性但不同良率的元件以及具有不同瑕疵涵蓋率的測
試方法，在整合 SiP設計中視為可獲得的。 
 VIII 
我們用一個範例來說明我們的方法，假設有三個元件將被整合在一個 SiP 設計，其中一
個為元件 A，兩個為元件 B。元件依據他們不同的 cost和 yields有三種不同的品質,A-1,A-2
和 A-3，元件 B也有兩種不同品質，此外，有很多不同的錯誤涵蓋率(fault coverages)和 cost
的測試選擇。給予 cost 的限制 Concost 為 200且 Fine 為$10,000，詳細的資料如表 I。 
 
 
 
 
     在執行完刪除多餘資料的程序後，結果如 Table II 所示。TC 為此一模型的容量，並且我
們記錄了 w 的乘積。在 Fig. 1(a)中，在容量 60 的格子中選擇了 ComA6，並且在這選擇中，
TC 由公式(4)計算出的值為 59.2。選擇了元素 A 之後，我們可以考慮 B1 的選擇，如 Fig. 1(b)
所示；當 row B1 的容量為 61 時，選擇了 ComB4 的 TC 為 60.6。而後，ComB6 將被選擇為
row B1 的第 71 個格子。然而，於 row B1 的 120 的格子，ComB6 將會被 ComB4 取代，由於
選擇了 ComB4 留下了適合的空間給 ComA6。但是當容量為 130 時，選擇 ComB6 比 ComB4
要來的好，B2 的選取程序如 Fig. 1(c)所示。我們在 rowB2 的第 189 格子內選擇了 ComB4，並
且至第 189 格子之 w 的乘積為 0.99129。然而，基於較大的 w，我們在 row B2 最後的格子(第
200 個)選擇了 ComB6。 
 
 
 X 
本研究群近 3年已發表之論文及競賽獲獎統計如下: 
 
 96.8-97.7 97.8-98.7 98.8-99.7 
IEEE/ACM Journal 3
@
 2
$
 2
**
 
Int. Conf 2
#
  5
&
  4
*
  
CAD Contest 特優 1,佳作 1  佳作 1 0 
**Ref.[1][18]  *Ref.[2~5]   #Ref.[6~7]   @Ref.[8~10]  &Ref.[11~15]  $Ref.[16~17] 
 2009 ASPDAC Best paper nominee, "Dependent Latch Identification in the Reachable State 
Space".  
 2009 IEICE VLD Student Forum at ASPDAC Best poster award, "An Implicit Approach to 
Minimizing Range-Equivalent Circuits". 
 2010 DAC Best paper nominee, "Node Addition and Removal in the Presence of Don’t 
Cares ".  
 
四、 結論與討論 
本研究建立起一多變數的成本-品質評估系統，供 SiP 設計時參考。依據此系統，
designer 可以設計出一符合成本與品質的 SiP 設計，此結果已經發表於國際學術會議
[12]。另外本研究群在本計畫之支持下，還同時進行了多項與邏輯合成，驗證，最高溫度
預估相關的研究，也已經/即將發表於國際學術會議[2~5]及 IEEE Transactions on CAD 期
刊[1][18]上。其論文名稱分別為" Fast Detection of Node Mergers Using Logic Implications 
"， " GA2CO: Peak Temperature Estimation of VLSI Circuits "， " Reachability Analysis of 
Sequential Circuits "，" Node Addition and Removal in the Presence of Don’t Cares " ，" Fast 
Node Merging with Don’t Cares Using Logic Implications" 及 " Dependent Latch Identification 
in Reachable State Space "。 
 
五、 參考文獻 
[1]  Y.-C. Chen, C.-Y. Wang, "Fast Node Merging with Don’t Cares Using Logic Implications", IEEE Transactions on 
Computer-Aided Design of Integrated Circuits and Systems.(to appear) 
[2]  Y.-C. Chen, C.-Y. Wang, "Fast Detection of Node Mergers Using Logic Implications" 2009 IEEE International 
Conference on Computer-aided Design. (ICCAD’09). 
[3]  Y.-H. Chang, C.-Y. Wang, Y.-A. Chen, "GA
2
CO: Peak Temperature Estimation of VLSI Circuits". 2009 IEEE 
International SOC Design Conference. (ISOCC’09) 
[4]  J.-T. Tsai, C.-Y. Wang, and K.-J. Chang, "Reachability Analysis of Sequential Circuits". 2010 IEEE International 
Symposium on VLSI Design, Automation, and Test. (VLSI-DAT'10) 
[5]  Y.-C. Chen, C.-Y. Wang, "Node Addition and Removal in the Presence of Don’t Cares". 2010 IEEE Design Automation 
Conference. (DAC'10, Best Paper Nominee) 
 12 
(五)主要發現或其他有關價值等: 另外本研究群在本計畫之支持下，還同時進行了多項與邏輯合
成，驗證，最高溫度預估相關的研究，也已經/即將發表於國際學術會議[2~5]及IEEE 
Transactions on CAD 期刊[1][18]上。其論文名稱分別為" Fast Detection of Node Mergers Using 
Logic Implications "， " GA2CO: Peak Temperature Estimation of VLSI Circuits "， " Reachability 
Analysis of Sequential Circuits "，" Node Addition and Removal in the Presence of Don’t Cares "，
"Fast Node Merging with Don’t Cares Using Logic Implications" 及  " Dependent Latch 
Identification in Reachable State Space "。 
 
 2
此次會議也遇見許多臺灣去的其它教授與學生，清華資工就
3位教授參加，很容易就在會中遇見認識的人。 
      
大會正式的晚宴也安排於第二天晚上舉辦，提供一個讓與會
者彼此認識以及分享研究成果與心得的社交機會。筆者覺得這種
活動很有意義，不但能和領域相近的學者專家就筆者發表的論文
成果進行意見交換，也對一些彼此感興趣或筆者未曾接觸之研究
題材有進一步的技術探討或初步認識。 
 
筆者在返國後攜回2009年國際電腦輔助設計會議論文光碟一
片。 
Figure 2: The misplaced wire error.
2. PRELIMINARIES
2.1 An example
We use an example in Fig. 1 to demonstrate ODC-based
node merging. The circuit in Fig. 1(a) is presented by using
an And-Inverter Graph (AIG), which is an efficient and scalable
representation for Boolean networks. Here, a, b, c, and d are
primary inputs (PIs). v1 ∼ v5 are 2-input and gates. Their
connectivities are presented by directed edges. A dot marked
on an edge indicates that an inverter (inv) is in between two
nodes.
In this circuit, v1 and v3 are not functionally equivalent, and
thus, merging them potentially affects the overall functionality
of the circuit. However, the values of v1 and v3 only differ
when d = 1 and b = c. Additionally, b = c implies v2 = 0.
Since v2 = 0 is an input-controlling value of v5, it prevents the
value of v3 from being observed at v5. This situation makes the
different value of v3 with respect to v1 never observed. Thus,
replacing v3 with v1 does not change the overall functionality.
The resultant circuit is shown in Fig. 1(b).
The problem formulation of this work is as follows: Given
a target node v in a circuit, find other nodes called substitute
nodes for v which can replace v without altering the function-
ality of the circuit.
For ease of discussion, we only consider circuits presented as
AIGs, which is a popular and simple representation. Circuits
having complex gates can also be handled by transforming them
into AIGs first.
2.2 Background
An input of a gate g has an input-controlling value of g if this
value determines the output value of g regardless of the other
inputs. The inverse of the input-controlling value is called the
input-noncontrolling value. For example, the input-controlling
value of an and gate is 0 and its input-noncontrolling value is
1. A gate g is in the transitive fanout cone of a gate gs if there
exists a path from gs to g, and gs is in the transitive fanin cone
of g.
The dominators [6] of a gate g are a set of gates G such that
all paths from g to any PO have to pass through all gates in G.
Consider the dominators G of a gate g, the side inputs of G are
the inputs of G that are not in the transitive fanout cone of g.
In VLSI testing, a stuck-at fault is a fault model used to
represent a manufacturing defect within a circuit. The effect of
the fault is as if the faulty wire were stuck at either 1 (stuck-
at 1) or 0 (stuck-at 0). A stuck-at fault test is a process to
find a test which can generate the different output values in
the fault-free and faulty circuits. Given a stuck-at fault f , if
there exists such a test, f is said to be testable; otherwise, f
is untestable. To make a stuck-at fault on a wire w testable, a
test needs to activate and propagate the fault effect to a PO. In
a combinational circuit, an untestable stuck-at fault on a wire
indicates that the wire is redundant and can be replaced with
a constant value 0 or 1.
The mandatory assignments (MAs) are the unique value as-
signments to nodes necessary for a test to exist. Consider a
stuck-at fault on a wire w; the assignments obtained by setting
w to the fault-activating value and by setting the side inputs of
dominators of w to the fault-propagating values are MAs. Then,
these assignments can be propagated forward or backward to in-
fer additional MAs by performing logic implications. Recursive
learning [8], a learning method in automatic test pattern gener-
ation (ATPG), can be used to perform logic implications more
completely. If the MAs of the fault are inconsistent, the fault is
untestable, and therefore, w is redundant [13].
Figure 3: An example of a test for a replacement error.
3. SUBSTITUTE NODE IDENTIFICATION
In this section, we first discuss the effect of merging two nodes
regarding to the functionality of circuit. Next, we present a suf-
ficient condition for correctly replacing one node with another
node. Finally, according to the condition, an algorithm is pre-
sented to identify substitute nodes for a given target node.
3.1 Effect of merging two nodes
Suppose C is a combinational circuit. Let’s consider the effect
of replacing a node nt with another node ns in C regarding to
the functionality of circuit. The behavior of the replacement is
to use ns to drive the wires originally driven by nt. We can
regard the replacement as setting an error in C, and it can
be modeled as the misplaced wire error which is included in the
typical design error models [1]. The design error models are very
popular and widely used in the techniques about design error
diagnosis and correction [12] [14] [15]. For example, in Fig. 2,
the left and right figures indicate the correct (original) circuit C
and incorrect (resultant) circuit C′, respectively. The misplaced
wire error is that the wires, w1 ∼ w3, should be connected with
nt instead of ns.
However, for some nt and ns nodes, the replacement error
is undetectable when the error effect is never observed at any
PO. Thus, nt can be correctly replaced with ns. Based on the
observation, the problem of finding the substitute nodes for nt
can be transformed to finding ns such that the replacement
error is undetectable.
To check whether a replacement error is detectable or not, we
can try to find an input pattern that can distinguish the func-
tional difference between C and C′. We name such an input
pattern a test for replacement error detection. Given a replace-
ment error, if no test exists for it, the error is undetectable.
As a result, to identify an undetectable replacement error, we
can prove that no test exists for it. Theorem 1 below states
the necessary and sufficient condition for an input pattern to
be a test of a replacement error. Here, we consider an input
pattern in C not in C′. This is because we do not first perform
the replacement and then check if the replacement is detectable.
Theorem 1: Let f denote an error of replacing nt with ns.
An input pattern t in C will be a test for f , if and only if t
generates the different values for nt and ns and propagates the
value of nt to a PO.
Proof: Generating the different values for nt and ns is equiv-
alent to activating the error effect of nt 6= ns, and propagating
the value of nt to a PO is equivalent to propagating the error
effect to a PO. If an input pattern t can simultaneously activate
and propagate the error effect, the error effect can be observed
at a PO, and hence, t can detect f . Otherwise, t cannot detect
f .
For example, Fig. 3 shows that same circuit as Fig. 1(a),
consider the error of replacing v3 (nt) with b (ns). Here, the
input vector (a = 1, b = 1, c = 0, d = 0) is a test, because it
generates v3 6= b (v3 = 0, b = 1) and propagates v3 = 0 to O2.
According to the value of nt, we can classify the complete
test set of f into two subsets: The first one T0 and the second
one T1 which consist of the input patterns having nt = 0 and
nt = 1, respectively. Since a test for f propagates the value of
nt to a PO, each pattern in T0 is exactly a test for the stuck-at
1 fault on nt. Similarly, each pattern in T1 is exactly a test for
the stuck-at 0 fault on nt. However, the converse relationship
does not hold because a test for the stuck-at fault on nt may
not satisfy generating the different values for nt and ns.
Based on the relationship between the test sets for f and the
stuck-at faults on nt, we can divide the detection of f into the
2009 IEEE/ACM International Conference on Computer-Aided Design Digest of Technical Papers786
a target node. We identify its substitute nodes by using the
proposed algorithm as shown in Fig. 4 and measure the CPU
time in seconds.
Table 1 summarizes the experimental results of substitute
node identification. Column 1 lists the benchmarks. Column
2 lists the number of nodes in each benchmark represented by
AIG N . Columns 3 and 4 list the number of target nodes identi-
fied having substitute nodes Nt and its percentage with respect
to N , respectively. Column 5 lists the number of pair of target
node and substitute node Ns. It also represents the total num-
ber of substitute nodes identified. Column 6 lists the ratio of
Ns with respect to Nt. Column 7 lists the CPU time.
According to Table 1, we can find the substitute nodes for an
average of 6.52% of nodes in a benchmark, with 2.79 substitute
nodes for each on average. Additionally, the experimental re-
sults also show that our approach can efficiently identify substi-
tute nodes. The most time-consuming benchmark is b17, which
costs only 174.49 seconds. All the other benchmarks cost less
than 100 seconds.
However, the alu4 benchmark takes much more CPU time,
54.87 seconds, than the other benchmarks of similar size such
as the des area and the s38417 benchmarks. This phenomenon
occurs due to the different logic structures. We find that an
logic implication computes an average of 1680.41 MAs for the
alu4 benchmark, but only an average of 581.06 and 35.72 MAs
for the des area and the s38417 benchmarks, respectively. Ad-
ditionally, 44.53 out of 54.87 seconds are spent on performing
recursive learning.
5.2 Area optimization
In the experiments, we compare our approach with that in
[11] for area optimization. To have a fair comparison, we ini-
tially optimize each benchmark by using the resyn2 script in the
ABC package as performed by [11], which performs local circuit
rewriting optimization [9]. After the initialization, we optimize
the benchmarks by using the proposed algorithm as shown in
Fig. 5. After the end of optimization, we also apply an equiva-
lence checking tool, cec [10], in the ABC package to verify the
correctness of our optimization. Among these benchmarks, the
b17 benchmark takes the most CPU time, 10.37 seconds, to
perform cec.
Table 2 summarizes the experimental results. Columns 1 and
2 list the benchmarks and the number of nodes in each bench-
mark represented by AIG, respectively. Columns 3 to 6 list the
results of our approach. These columns contain the number of
node mergers identified, the number of nodes in the resultant
benchmark Nr, the percentage of area reduction in terms of
node count, and the CPU time, respectively. Columns 7 and 8
list the corresponding results reported in [11], the percentage of
area reduction and the CPU time, respectively. The maximal
CPU time in Column 8 is 5 000 seconds, which is the run time
limit set by that work.
According to Table 2, our approach can obtain an average
of 3.94% area reduction for the benchmarks. However, because
our approach only focuses on area optimization, it may decrease
or increase the number of logic levels of the benchmarks. From
the aspect of quality comparison, the simplification capability
of our approach is not as strong as that of the approach in [11],
which obtains an average of 5.04% area reduction. The key
reason behinds this result is the completeness of MA compu-
tation. If MAs are inferred more completely in our approach,
more node mergers can be identified. Unfortunately, finding
all MAs of a stuck-at fault requires exponential time complex-
ity. It is equivalent to finding all patterns that can detect a
fault [5]. Therefore, the recursive learning technique is used in
our approach to infer more MAs for improving results. On the
other hand, from the aspect of efficiency comparison, our over-
all CPU time is only 254.24 seconds, which is much less than
21 887 seconds required by the approach in [11]. Our approach
has a speedup of 86 times.
6. CONCLUSION
In this paper, we propose an ODC-based node merging al-
gorithm that can quickly detect node mergers using logic im-
plications. The algorithm is based on a sufficient condition for
replacing a node with another node, and only two logic implica-
Table 2: The experimental results of our approach and
[12] for area optimization.
benchmark N
our approach [11]
# mergers Nr % time (s) % time (s)
pci spoci. 878 59 782 10.93 0.24 9.2 6
i2c 941 15 923 1.91 0.11 3.2 3
dalu 1057 37 985 6.81 0.3 12 10
C5315 1310 6 1304 0.46 0.09 0.7 2
s9234 1353 14 1331 1.63 0.16 1.2 8
C7552 1410 33 1371 2.77 0.28 3.4 8
i10 1852 72 1755 5.24 0.64 1.3 12
s13207 2108 36 2063 2.13 0.48 1.8 17
alu4 2471 164 1941 21.45 5.29 22.9 64
systemcdes 2641 33 2600 1.55 0.94 4.7 9
spi 3429 16 3411 0.52 2.71 1.3 84
tv80 7233 151 6960 3.77 10.6 7.1 1445
s38417 8185 41 8136 0.6 1.15 1 275
mem ctrl 8815 258 7257 17.67 6.76 18 738
s38584 9990 99 9846 1.44 11.44 0.8 223
ac97 ctrl 10395 16 10379 0.15 1.96 2 188
systemcaes 10585 50 10521 0.6 13.09 3.8 360
usb funct 13320 215 13026 2.21 5.89 1.4 681
pci bridge32 17814 83 17729 0.48 12.04 0.1 1134
aes core 20509 138 20371 0.67 13.23 8.6 1620
b17 34523 422 33979 1.58 72.4 1.6 5000
wb conmax 41070 1199 39266 4.39 31.88 6.2 5000
des perf 71327 1159 70081 1.75 62.56 3.7 5000
average 3.94 5.04
total 254.24 21887
ratio 1 86.09
tions are required for finding substitute nodes of a given target
node. Moreover, based on the node merging algorithm, we also
propose an efficient algorithm for area optimization in combina-
tional circuits. The experimental results show that the proposed
algorithm has a competitive capability of area optimization and
expends much less CPU time compared to the state-of-the-art.
7. REFERENCES
[1] M. S. Abadir, J. Ferguson, and T. E. Kirkland, “Logic Design
Verification via Test Generation,” IEEE Trans. Computer-Aided
Design, vol. 7, pp. 138-148, Jan. 1988.
[2] Berkeley Logic Synthesis and Verification Group, “ABC: A System
for Sequential Synthesis and Verification,”
http://www.eecs.berkeley.edu/ alanmi/abc/.
[3] P. Bjesse and A. Boralv, “DAG-Aware Circuit Compression for
Formal Verification”, in Proc. Int. Conf. on Computer-Aided
Design, 2004, pp. 42-49.
[4] M. Case, V. Kravets, A. Mishchenko, and R. Brayton, “Merging
Nodes Under Sequential Observability,” in Proc. Design
Automation Conf., 2008, pp. 540-545.
[5] C. W. Jim Chang, M. F. Hsiao, and M. M. Sadowska, “A New
Reasoning Scheme for Efficient Redundancy Addition and
Removal,” IEEE Trans. Computer-Aided Design, vol. 22,
pp. 945-952, July 2003.
[6] T. Kirkland and M. R. Mercer, “A Topological Search Algorithm
for ATPG,” in Proc. Design Automation Conf., 1987, pp. 502-508.
[7] A. Kuehlmann, “Dynamic Transition Relation Simplification for
Bounded Propery Checking,” in Proc. Int. Conf. on
Computer-Aided Design, 2004, pp. 50-57.
[8] W. Kunz and D. K. Pradhan, “Recursive Learning: An Attractive
Alternative to the Decision Tree for Test Generation for Digital
Circuits,” in Proc. Int. Test Conf., 1992, pp. 816-825.
[9] A. Mishchenko, S. Chatterjee, and R. Brayton, “DAG-Aware AIG
Rewriting: A Fresh Look at Combinational Logic Synthesis,” in
Proc. Design Automation Conf., 2006, pp. 532-536.
[10] A. Mishchenko, S. Chatterjee, R. Brayton, and N. Een,
“Improvements to Combinational Equivalence Checking, ” in
Proc. Int. Conf. on Computer-Aided Design, 2006, pp. 836-843.
[11] S. Plaza, K. H. Chang, I. Markov, and V. Bertacco, “Node Mergers
in the Presence of Don’t Cares,” in Proc. Asia South Pacific
Design Automation Conf., 2007, pp. 414-419.
[12] I. Pomeranz and S. M. Reddy, “On Correction of Multiple Design
Errors,” IEEE Trans. Computer-Aided Design, vol. 14,
pp. 255-264, Feb. 1995.
[13] M. H. Schulz amd E. Auth, “Advanced Automatic Test Pattern
Generation and Redundancy Identification Techniques,” in
Proc. Int. Fault-Tolerant Computing Symp., 1988, pp. 30-35.
[14] A. Veneris and I. N. Hajj, “Design Error Diagnosis and Correction
via Test Vector Simulation,” IEEE Trans. Computer-Aided
Design, vol. 18, pp. 1803-1816, Dec. 1999.
[15] A. Veneris, J. B. Liu, M. Amiri, and M. S. Abadir, “Incremental
Diagnosis and Correction of Multiple Faults and Errors,” in
Proc. Design, Automation and Test in Europe Conf., 2002,
pp. 716-721.
[16] Q. Zhu, N. Kitchen, A. Kuehlmann, and
A. Sangiovanni-Vincentelli, “SAT Sweeping with Local
Observability Don’t Cares,” in Proc. Design Automation Conf.,
2006, pp. 229-234.
[17] http://iwls.org/iwls2005/benchmarks.html.
2009 IEEE/ACM International Conference on Computer-Aided Design Digest of Technical Papers788
98年度專題研究計畫研究成果彙整表 
計畫主持人：王俊堯 計畫編號：98-2220-E-007-015- 
計畫名稱：在 System-in-Package 設計下之自動化工具研發--子計畫四：在 System-in-Package 設計
下之測試技術研發(3/3) 
量化 
成果項目 
實際已達
成數（被接
受或已發
表） 
預期總達成
數(含實際
已達成數)
本計畫
實際貢
獻百分
比 
單位
備註（質化說明：如數
個計畫共同成果、成果
列為該期刊之封面故
事...等） 
期刊論文 0 0 100%  
研究報告 /技術報
告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次
 
期刊論文 2 0 50% 
為與國科會計畫 熱能與
功率導向之研究方法－應
用於處理器之設計--子計
畫三：熱能導向的最大功率
估 計 和 分 析
(2/3)98-2220-E-007-023-
之共同研究成果 
研究報告 /技術報
告 0 0 100%  
研討會論文 4 0 50% 
篇 
為與國科會計畫 熱能與
功率導向之研究方法－應
用於處理器之設計--子計
畫三：熱能導向的最大功率
估 計 和 分 析
(2/3)98-2220-E-007-023-
之共同研究成果 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
國外 
技術移轉 
權利金 0 0 100% 千元  
 
