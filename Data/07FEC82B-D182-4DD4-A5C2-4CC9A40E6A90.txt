2 
 
Haar-like scheme [7], which will be performed by the integral image 
block in Figure 1(a). The face features are evaluated by summing the 
pixel values in the rectangular sub-region (shown in Figure 1(b)). 
The result will then be sent to the detection block which uses 
cascaded classifiers to scan and find the location of faces.  
 
Figure 1 (a) Viola-Jones face detection procedure  
    (b) Integral image computation. 
(1) Integral image: The integral image method was firstly 
introduced to the digital image processing by Crow [13]. In 
Viola-Jones face detection, it is used for rapid computation of 
Haar-like features [7], which are defined as the (weighted) intensity 
difference between two to four rectangles. The integral image is 
constructed as follow. I(ùë•,ùë¶) =  ÔøΩ ùëñ(ùë•‚Ä≤,ùë¶‚Ä≤)
ùë•‚Ä≤‚â§ùë•,ùë¶‚â§ùë¶‚Ä≤  
I(x,y) is the integral value of all the image pixels in the 
rectangular region from (0,0) to (x,y). And i(x‚Äô,y‚Äô) is the value of the 
pixel at location (x‚Äô, y‚Äô). It is fast and efficient to use the integral 
image to compute the value of the face features in a rectangular 
sub-region area. As shown in Figure 1(b), for example, the value of 
point 4 is the sum of the sub-region area A+B+C+D. The value of 
point 3 is the sum of A+C. If we want to compute the value of the 
region D, it can be easily obtained by the value of ( I(1) + I(4) ) ‚Äì 
( I(2) + I(3) ), which only requires four value references.  
(2) Cascaded classifier structure with Ada-Boost: Boost is a 
method of finding high accuracy by combing ‚Äúweak‚Äù classifiers with 
moderate accuracy [14]. Ada-boost algorithm is a kind of 
appearance-based method which have shown superior performance 
compared to others [9]. There are two types of classifiers, ‚Äúweak‚Äù 
classifiers and ‚Äústrong‚Äù classifiers. Weak classifiers have arithmetic 
value thresholds in recording human face features. A number of 
weak classifiers with similar features are combined together as a 
‚Äústrong‚Äù classifier. 
 
Figure 2 Cascaded structure of strong classifiers 
The cascade classifier structure, shown in Figure 2, is a critical 
component in the Viola-Jones detector. This structure rapidly and 
efficiently rejects most negative sub-window images while keeping 
almost all the positive ones. The input sub-window images pass 
through a series of nodes during detection. Each node represents a 
strong classifier, which would make a decision on whether the 
sub-window image should be kept for the next node or rejected. A 
strong classifier at a later stage contains more weak classifiers to 
provide better image checks and face detection.  
4. PARALLELISM IN DIFFERENT LEVELS 
The parallelism of the face detection exists in different 
algorithmic levels. This section discusses the potential parallelism at 
different levels of the face detection implementation. The face 
detection implementation is adopted and modified from OpenCV 
library[17], which applies the idea of Viola-Jones face detection 
algorithm. As shown Figure 3, the implementation can be divided 
into three parts. (1) Resize. The implementation uses the fixed-size 
scan window with a well-trained classifier library in the Ada-boost 
algorithm. Since the scan window size is fixed, an image needs to be 
resized into different resolutions. (2) Integral. This part performs the 
evaluation of the Haar-like features by using the integral image 
method. (3) Detect. By moving the scan window through the image, 
the sub-image is sent into the cascade classifier structure to detect the 
location of a face.  
 
Figure 3 The procedure of face detection implementation 
The parallelism of the algorithm can be extracted from different 
levels. This paper divides the parallelism into four levels (shown in 
Figure 4). Top level parallelism is demonstrated when different sizes 
of images are processed by different threads concurrently. Detection 
level parallelism can be exposed by performing the ‚Äúdetect‚Äù block on 
different sizes of images concurrently. Other parts (resize and 
integral) in the algorithm remain in the sequential scheme. Divided 
detection level is similar to the detection level, but the image is 
further divided into sub-images. The detection tasks of these 
sub-images are executed simultaneously by different threads. Weak 
classifier level exposes the parallelism by executing different weak 
classifiers in the cascaded structure concurrently. 
 
Figure 4 Different algorithmic levels of the face detection 
implementation 
4 
 
(2) Detection level parallelism. This level only parallelizes the 
detection block. The other parts, including the thread creation, are 
still executed sequentially. This strategy makes the speed of creating 
new threads too slow to sustain the demand of parallel execution. 
Processors are idled waiting for new threads to be created. Besides, 
the sequential part of the algorithm becomes the critical part of the 
program. The performance would not improve when the number 
processors increases. As shown in Figure8, the execution time does 
not improve when the system has more than 8 processors. 
(3) Divided detection level parallelism. This level returns a 
more satisfied result than the previous strategy. More parallelism of 
detection level can be extracted. Number of threads created in one 
time is sufficient and the size of different threads is more balanced. 
However, the sequential part is still plays the critical role in the 
program. Therefore the run time is similar to the detection level.  
(4) Weak classifier level parallelism. This is the lowest level in 
the algorithm. The number of threads is equal to the number of weak 
classifiers. Although it exposes the maximum potential parallelism, 
the overhead becomes the limiting factor of the performance 
enhancement. Since there could be thousands of weak classifiers, the 
time required to create these threads is already in average 8.17x of 
the total execution time of the sequential algorithm on a single 
processor. Another overhead is the sheer amount of synchronization 
transactions among the huge number of threads. 
 
Figure 8 Result of each parallelism level 
According to the experimental result, parallelizing the algorithm 
in higher levels poses the disadvantage of imbalance workload. 
When parallelizing the algorithm in lower levels, the overhead 
increases on the aspects of creating new threads and synchronization. 
The ratio of the sequential part to the algorithm also deteriorates the 
performance. To achieve the best performance, we should have a 
scheme to expose the significant parallelism in an appropriate level 
and avoid the overhead of having too many threads. 
 
7. A HYBRID PARALLEL SCHEME TO ACHIEVE 
HIGH PERFORMANCE 
Based on the experience from the previous section, we propose a 
multi-stages mixed-level parallelism scheme to achieve the 
maximum performance enhancement.  
 
Figure 9 Result of our modified programs 
The first implementation is a 2-stage scheme. Stages are executed 
sequentially. The second stage will start when the first stage is 
finished. The first stage will initiate multiple threads to perform the 
resize and integral blocks concurrently. The second stage implements 
the same scheme as in the ‚Äúdivided detection‚Äù level. Since the block 
‚Äúdetection‚Äù takes most of the execution time in the algorithm and its 
parallelism can be well scaled in divided detection level. As shown 
in Figure9, when compared with a single processor, the 2-stage 
strategy can reach around 16x speed-up on a 16-core system. 
However, the 2-stage scheme cannot achieve better performance 
when the processor number is more than 16, due to the imbalanced 
work load in the first stage. 
The 3-stage scheme is implemented to further improve the 
performance. The first stage now only contains a multi-threaded 
version of the resize block. The second stage will process the integral 
part and the third stage will perform the parallel execution of the 
detection block. This scheme has better balanced tasks, and achieve 
the superior performance scalability. As shown in Figure9, the 
3-stage parallel strategy reaches a 27.8x and 37.5x speed-up on a 
32-core and 64-core system respectively. 
8. CONCLUSION                                                                                                         
This paper performs a comprehensive analysis of the parallelism 
of a face detection algorithm at different levels. We have 
demonstrated that, each parallelism level has its own potential to 
enhance performance, but also imposes different limiting factors to 
the overall performance. The imbalanced execution loads among 
threads adversely impact the performance as well. Based on the 
analysis results and design experience, this paper proposes a 
multi-staged hybrid scheme to retain the parallel performance and 
avoid the limiting factor. With this scheme, we are able to achieve up 
to 37.5x performance enhancement on a 64-core system.  
9.  REFERENCES 
[1] FA626 ULTRA HIGH SPEED 32-BIT RISCCPU 
http://www.faraday-tech.com/techDocument/FA626_ProdBrief_v1.2.pdf 
[2] The TILE-Gx‚Ñ¢ processor family processor, http://www.tilera.com/  
[3] ARM cortex-A9 processor, http://www.arm.com/ 
[4] MIPS Technologies Announces Symmetric Multiprocessing (SMP) 
Support for Android‚Ñ¢ Platform on MIPS-Based‚Ñ¢ SoCs, 
http://www.mips.com/  
[5] Intel multicore technology, http://www.intel.com/ 
[6] AMD multi-core processing, http://www.amd.com/  
[7] C. Zhang and Z. Y. Zhang, ‚ÄúA Survey of Recent Advances in Face 
Detection ‚Äù, Microsoft Research, June 2010.  
[8] Y. Wei, X. Bing, C. Chareonsak, "FPGA Implementation of AdaBoost 
Algorithm for Detection of Face Biometrics", In Proc. IEEE International 
Workshop Biomedical Circuits and Systems, 2004. 
1 2 4 8 16 32 64
2stage 3.02 1.494 0.754 0.381 0.203 0.185 0.193
3stage 3.016 1.484 0.744 0.376 0.194 0.108 0.081
0
0.5
1
1.5
2
2.5
3
3.5
Execute Time
CORE_NUM
time(sec)
(sec/image)
 1 
ÂúãÁßëÊúÉË£úÂä©Â∞àÈ°åÁ†îÁ©∂Ë®àÁï´È†Ö‰∏ãÂá∫Â∏≠ÂúãÈöõÂ≠∏Ë°ìÊúÉË≠∞ÂøÉÂæóÂ†±Âëä 
                                     Êó•ÊúüÔºö100 Âπ¥ 1 Êúà 30 Êó• 
                                 
‰∏Ä„ÄÅÂèÉÂä†ÊúÉË≠∞Á∂ìÈÅé 
Ê≠§Ê¨°ÊúÉË≠∞ÊñºÂä†Â∑ûÊ¥õÊùâÁ£ØÈôÑËøëÁöÑÂÆâÁ¥çÁΩïÂüéÂ∏ÇËàâËæ¶„ÄÇÁ∏ΩÂÖ±ÂÖ≠Â§©ÁöÑÊúÉË≠∞‰∏≠ÂåÖÂê´‰∫Ü‰∏ÄÁôæ
Â§öÁØáÁöÑÁ†îÁ©∂Ë´ñÊñáÂ†±Âëä‰ª•ÂèäË®éË´ñ„ÄÇÂú®‰∏ÄÊ®ìÁöÑÂ±ïÁ§∫Â§ßÂª≥‰∏≠‰πüÊúâË∂ÖÈÅéÁôæÂÆ∂ÁöÑË®≠Ë®àËá™ÂãïÂåñ
Â§ßÂª†ÂèÉÂ±ï„ÄÇÊï¥ÂÄãÊúÉË≠∞ÂÖßÂÆπËàáË≠∞Á®ãÁöÑÂÆâÊéíÈùûÂ∏∏ÁöÑË±êÂØå„ÄÇ 
Âú®Ë´ñÊñáÂ†±ÂëäËàáÁ†îË®éÁöÑÈÉ®ÂàÜÔºåÊâÄÊúâÁöÑÁ†îÁ©∂Ë´ñÊñáË¢´ÂàÜÊàêË∂ÖÈÅé‰∫îÂçÅÂÄãË≠∞È°åÔºåÂàÜÂà•ÊñºÂõõ
Â§©ÁöÑË≠∞Á®ã‰∏≠ÈÄ≤Ë°åÂ†±ÂëäËàáÁ†îË®é„ÄÇÂú®Êú¨Âπ¥Â∫¶ÁöÑË®≠Ë®àËá™ÂãïÂåñÊúÉË≠∞‰∏≠ÔºåÂÖàÈÄ≤Ë£ΩÁ®ãÁöÑËÆäÁï∞ÊÄß
ËàáÈõªË∑ØÁöÑÂèØÈù†ÊÄßÊàêÁÇ∫Ë®±Â§öË≠∞È°å‰∏≠ÁöÑË®éË´ñÈáçÈªû„ÄÇÂ¶Ç‰ΩïÂú®ÂçäÂ∞éÈ´îË£ΩÁ®ãÊåÅÁ∫åÂæÆÁ∏ÆÂåñÁöÑÈÅé
Á®ã‰∏≠Á∂≠ÊåÅÁ≥ªÁµ±ÁöÑÂäüËÉΩÊÄßËàáÊèêÂçáÂèØÈù†Â∫¶Ôºå‰ªçËàäÊòØ‰∏ÄÂÄãÈùûÂ∏∏Èõ£ÁöÑÂïèÈ°å„ÄÇÂèÉËàáÂ†±ÂëäÁöÑÈô§
‰∫Ü‰∏ñÁïåÂêÑÂú∞‰∏ÄÊµÅÁöÑÈ†ÇÂ∞ñÂ§ßÂ≠∏‰πãÂ§ñÔºå‰πüÂåÖÂê´‰∫ÜÂæàÂ§öÊ•≠ÁïåÁöÑÁ†îÁ©∂ÊàêÊûú„ÄÇÈÄôËÆìË≠∞È°åÁöÑË®é
Ë´ñ‰∏çÊúÉÂè™‰æ∑ÈôêÂú®Á†îÁ©∂È°åÁõÆÁöÑÊé¢Ë®é‰∏≠ÔºåËÄåËÉΩÂ§†Ë∑üÊ•≠ÁïåÁõÆÂâçÊúÄÈúÄË¶ÅËß£Ê±∫ÁöÑÂõ∞Èõ£Áõ∏Áµê
ÂêàÔºå‰ª•ÊúüÂæÖËÉΩÂ§†ÁôºÂ±ïÂá∫Êõ¥Á¨¶ÂêàÁõÆÂâçÈúÄÊ±ÇÁöÑÁõ∏ÈóúË®≠Ë®àËá™ÂãïÂåñÊäÄË°ì„ÄÇ 
Âú®‰∏ÄÊ®ìÁöÑÂ±ïË¶ΩÊúÉÂ†¥‰∏≠ÔºåÊúâË∂ÖÈÅéÊï∏ÁôæÂÆ∂ÁöÑÂª†ÂïÜÂèÉÂ±ï„ÄÇÂèÉÂ±ïÁöÑÂª†ÂïÜÈô§‰∫ÜË®≠Ë®àËá™ÂãïÂåñ
Â∑•ÂÖ∑ÁöÑ‰∏ÄÁ∑öÂ§ßÂª†(Â¶Ç Cadence, Synopsys, Mentor Á≠â)‰πãÂ§ñÔºå‰πüÂåÖÂê´‰∫ÜË®±Â§öÂÖ∑ÊúâÂÖà
ÈÄ≤ÊäÄË°ìÁöÑÊñ∞ÊàêÁ´ãÂª†ÂïÜ„ÄÇÊúÉÂ†¥ÁöÑ‰ΩàÁΩÆÂíåÂêÑÂÄãÂª†ÂïÜÊî§‰ΩçÊ¥ªÂãïÁöÑÂÆâÊéí‰πüÂçÅÂàÜÁöÑÊ¥ªÊΩëÔºåÂú®
‰ªãÁ¥πÂÖ¨Âè∏ÁöÑÊñ∞ÊäÄË°ì‰πãÂâçÈÉΩÊúÉÂà©Áî®Ë®±Â§ö‰∏çÂêåÁöÑË°®Êºî‰æÜÂê∏Âºï‰∫∫ÊΩÆ„ÄÇÂÄºÂæó‰∏ÄÊèêÁöÑÊòØÔºå‰ªä
Âπ¥ÁöÑÂèÉÂ±ïÂª†ÂïÜ‰∏≠ÔºåÂè∞Á©çÈõªÁöÑÊî§‰ΩçÂç†‰∫ÜÈùûÂ∏∏Â§ßÂçÄÂüü„ÄÇÂè∞Á©çÈõª‰ªäÂπ¥ÁâπÂà•Âº∑ÊâìÊâÄÊèêÂá∫ÁöÑ
Êï¥ÂêàÊÄßË®≠Ë®àÁí∞Â¢É (Open Innovation Platform)ÔºåÂ∏åÊúõËÆìÊô∂Âúì‰ª£Â∑•Âª†‰∏çËÉΩÂÜçÂñÆÁ¥îÊèê
‰æõË£ΩÈÄ†ÊúçÂãô„ÄÇÂè∞Á©çÈõªÂ∞áÊï¥ÂêàÊú¨Ë∫´ÂèäÁ¨¨‰∏âËÄÖÁöÑË®≠Ë®àÂ∑•ÂÖ∑ EDAÈõªÂ≠êË®≠Ë®àËá™ÂãïÂåñ
ÔºàElectronic Design AutomationÔºâÂèäÁüΩÊô∫Ë≤°ÔºàIPÔºâ„ÄÅË£ΩÁ®ãÊäÄË°ìÂèäÊµÅÁ®ãÊúçÂãôÁ≠âÔºåÊé®
Ë®àÁï´Á∑®Ëôü NSC 98Ôºç 2218 ÔºçE Ôºç009  Ôºç 022 Ôºç 
Ë®àÁï´ÂêçÁ®± Â§öÊ†∏ÂøÉÁ≥ªÁµ±‰πãË∑®Â±§Á¥öÊï¥ÂêàË®≠Ë®àÁí∞Â¢ÉÂèäÊñπÊ≥ï 
Âá∫Âúã‰∫∫Âì°
ÂßìÂêç 
Ë≥¥‰ºØÊâø 
ÊúçÂãôÊ©üÊßã
ÂèäËÅ∑Á®± 
‰∫§ÈÄöÂ§ßÂ≠∏ÈõªÂ≠êÂ∑•Á®ãÁ≥ªÂä©ÁêÜÊïôÊéà 
ÊúÉË≠∞ÊôÇÈñì 
99Âπ¥ 6Êúà 13Êó•Ëá≥ 
99Âπ¥ 6Êúà 18Êó• 
ÊúÉË≠∞Âú∞Èªû 
Anaheim, CA, U.S.A 
ÊúÉË≠∞ÂêçÁ®± 
(‰∏≠Êñá) 2010 Ë®àÁÆóÊ©üÂô®Â≠∏ÊúÉË®≠Ë®àËá™ÂãïÂåñÂúãÈöõÊúÉË≠∞ 
(Ëã±Êñá) ACM Design Automation Conference 2010 
ÁôºË°®Ë´ñÊñá
È°åÁõÆ 
(‰∏≠Êñá)ÁÑ° 
(Ëã±Êñá) 
ÂúãÁßëÊúÉË£úÂä©Ë®àÁï´Ë°çÁîüÁ†îÁôºÊàêÊûúÊé®Âª£Ë≥áÊñôË°®
Êó•Êúü:2011/01/26
ÂúãÁßëÊúÉË£úÂä©Ë®àÁï´
Ë®àÁï´ÂêçÁ®±: Â§öÊ†∏ÂøÉÁ≥ªÁµ±‰πãË∑®Â±§Á¥öÊï¥ÂêàË®≠Ë®àÁí∞Â¢ÉÂèäÊñπÊ≥ï
Ë®àÁï´‰∏ªÊåÅ‰∫∫: Ë≥¥‰ºØÊâø
Ë®àÁï´Á∑®Ëôü: 98-2218-E-009-022- Â≠∏ÈñÄÈ†òÂüü: Á©çÈ´îÈõªË∑ØÂèäÁ≥ªÁµ±Ë®≠Ë®à
ÁÑ°Á†îÁôºÊàêÊûúÊé®Âª£Ë≥áÊñô
ÂÖ∂‰ªñÊàêÊûú 
(ÁÑ°Ê≥ï‰ª•Ô•æÂåñË°®ÈÅî‰πãÊàê
ÊûúÂ¶ÇËæ¶Ôß§Â≠∏Ë°ìÊ¥ªÂãï„ÄÅÁç≤
ÂæóÁçéÈ†Ö„ÄÅÈáçË¶ÅÂúãÈöõÂêà
‰Ωú„ÄÅÁ†îÁ©∂ÊàêÊûúÂúãÈöõÂΩ±Èüø
Ô¶äÂèäÂÖ∂‰ªñÂçîÂä©Áî¢Ê•≠ÊäÄ
Ë°ìÁôºÂ±ï‰πãÂÖ∑È´îÊïàÔ®ó‰∫ã
È†ÖÁ≠âÔºåË´ã‰ª•ÊñáÂ≠óÊïòËø∞Â°´
Ô¶ú„ÄÇ) 
ÁÑ° 
 ÊàêÊûúÈ†ÖÁõÆ Ô•æÂåñ ÂêçÁ®±ÊàñÂÖßÂÆπÊÄßË≥™Á∞°Ëø∞ 
Ê∏¨È©óÂ∑•ÂÖ∑(Âê´Ë≥™ÊÄßËàáÔ•æÊÄß) 0  
Ë™≤Á®ã/Ê®°ÁµÑ 0  
ÈõªËÖ¶ÂèäÁ∂≤Ô§∑Á≥ªÁµ±ÊàñÂ∑•ÂÖ∑ 0  
ÊïôÊùê 0  
ËàâËæ¶‰πãÊ¥ªÂãï/Á´∂Ë≥Ω 0  
Á†îË®éÊúÉ/Â∑•‰ΩúÂùä 0  
ÈõªÂ≠êÂ†±„ÄÅÁ∂≤Á´ô 0  
Áßë 
Êïô 
Ëôï 
Ë®à 
Áï´ 
Âä† 
Â°´ 
È†Ö 
ÁõÆ Ë®àÁï´ÊàêÊûúÊé®Âª£‰πãÔ•´ËàáÔºàÈñ±ËÅΩÔºâ‰∫∫Ô•© 0  
