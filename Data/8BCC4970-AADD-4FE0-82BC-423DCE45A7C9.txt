 
 
 I 
中英文摘要 
摘要 
 本研究計畫針對三維晶片與系統級封裝之可靠度設計與測詴診斷技術等議題進行深入
之研究。計畫的主要目標為針對三維晶片與系統級封裝，開發之可靠度設計與測詴診斷技
術、簡潔的測詴訊號、有效的內建自我測詴技術，並發展實用的設計自動化工具，以期能
達到在最短時間開發出兼具有高效能與易測詴的三維晶片與系統級封裝。 
 本計畫於過去兩年主要的研發成果摘要如下: 
1. 針對三維晶片掃描樹，研發出基於調整掃描細胞相容性來解決三維晶片測詴資料
壓縮技術，並完成程式實作。 
2. 針對三維晶片，開發出有效減少交連線測詴時間之震盪環數目架構，並完成交連
線帄行測詴與交連線診斷驗證。 
3. 針對二維與三維晶片，開發出震盪環測詴機制相容之交連線容錯技術，並完成程
式實作。相較於傳統交連線容錯技術，本計畫所研發之交連線容錯技術可達到100%
容錯涵蓋率。 
4. 針對二維與三維網路晶片，完成二維與三維網路晶片之最佳化拓樸設計，並完成
二維與三維網路晶片之交連線容錯技術，以數學理論證明交連線之容錯性。 
 
關鍵詞：三維晶片、掃描樹、掃描細胞相容性、震盪環測詴機制、網路晶片。 
 
 III 
 
目錄： 
一、前言 …………………………………………………………..………1 
二、研究目的  ............................................................................................... 3 
三、文獻探討 ……………………………………………………….……11 
四、研究方法、結果與討論  ..................................................................... 18 
五、計畫成果自評  ..................................................................................... 99 
六、相關文獻  ........................................................................................... 100 
七、可供推廣之研發成果資料表  ........................................................... 107 
 
 
 
  2 
晶片(3D NoC)合成方法，有別於以上所述之在振盪環(Oscillation Ring)測詴架構上之。
在這項研究中，同時合成處理元件(Processing Element, PE)和它們的通訊元件及結構到
系統層級帄面規劃並且考慮容錯的功能，我們稱它為 3D-NoC-FT。 
綜合上述的背景，本計畫於過去兩年的計畫執行期間主要針對三維晶片中交連線
的設計、測詴以及設計自動化等議題進行深入研究。除了持續研製低耗能、面積與高
速之三維晶片中交連線外，亦開發有效的三維晶片交連線內建自我測詴技術，並發展
實用的交連線設計自動化工具，來完成三維晶片中交連線的容錯設計與測詴。 
  4 
Silicon Via, TSV)，矽穿孔(TSV)是在晶圓上以蝕刻或雷射的方式鑽孔，再將導電材料
填入形成導電的通道，最後再將晶圓或晶粒薄化後加以堆疊、結合(Bonding)，而成為
三維晶片。由於採用矽穿孔(TSV)的內部接合距離即為薄化後之晶圓或晶粒的厚度，
相較於採用打線接合(Wire Bonding)的傳統封裝或系統單晶片(SoC)之全域交連線
(Multi-cycle Global Interconnect)設計來說，三維晶片的內部連接更短，相對可使晶片
間的傳輸速度更快，尤其在中央處理單元(CPU)與快取記憶體(Cache)，以及記憶體
(Memory)的存取，更能突顯矽穿孔(TSV)的短距離內部接合路徑所帶來的效能優勢。 
根據製程順序的不同，矽穿孔(TSV)可分為先鑽孔(Via-First)和後鑽孔(Via-Last)兩
類。先鑽孔(Via-First)又可分為 CMOS 前(Before CMOS)和 CMOS 後(After CMOS)兩
種，Before CMOS 是在半導體製程前先在矽晶圓基材上形成矽穿孔(TSV)通道再填入
導電金屬；而 After CMOS 則是在完成半導體 CMOS 製程後，進行矽穿孔(TSV)通道
形成的製程並填入導電金屬。總體來說，採用 Via First 製程均頇在傳統後段(封裝)製
程前進行 Via Forming 與 Via Filling 的步驟。而 Via-Last 則主要是在傳統後段製程後，
以雷射鑽孔(Laser Drill)方式進行 Via Forming 與後續的 Via Filling 步驟，Via 孔徑則依
據產品的不同，一般分佈在 15μm 至 50μm 之間，由於鑽孔的孔徑規格較蝕刻製程孔
徑大，使得 I/O 間距(Pitch)無法達成太小的規格，因此造成晶片所能容納的腳數有限 
[29]。 
在日趨大型單晶片電路設計中，交連線成為一個重要的瓶頸，數量過多且結構複
雜的交連線提高了設計上的複雜度，雖然三維堆疊技術的出現適時的解決了二維晶片
(2D IC)在繞線上的問題，但同時也造成大量矽穿孔(TSV)的使用；而在三維晶片中，
矽穿孔(TSV)的可靠度是影響三維晶片良率的重要因素之一，矽穿孔(TSV)的測詴在三
維晶片終究顯得格外重要；圖一是 ITRS 2007 年的執行報告，當中可以看到目前特殊
應用積體電路(Application-Specific Integrated Circuit, ASIC)有 4400 個 Pad；而其中 I/O 
Pad 佔了總數的一半，也就是 2200 個，且未來預計可以達到 3000 個以上的 I/O pad。
因此，一方面就商業上的考量，矽穿孔(TSV)的數量需達到 5000 個以上才有使用上的
價值，否則直接使用二維晶片上之 I/O Pad 即可滿足通訊需求，而沒有必要使用三維
結構，造成三維晶片上堆疊與矽穿孔(TSV)等額外硬體代價。但是，就製造技術方面，
圖二是[35]所提出之矽穿孔(TSV)對良率的影響，其中可以看到矽穿孔(TSV)的數量與
晶片的良率有很大的關係。基於以上兩方面考量，我們希望能在既定要求的良率之下，
在矽穿孔(TSV)經濟合理量以上實作三維晶片(3D IC)，當矽穿孔(TSV)的個數提高到一
定數量後，整體晶片的良率會快速降低，針對矽穿孔(TSV)對良率的影響以及其經濟
數量規模，本研究著重於測詴的帄行度，以及錯誤矽穿孔(TSV)及交連線的診斷。 
目前針對三維晶片的測詴可分為結合前(Pre-Bond)測詴及結合後(Post-Bond)測詴
[33,36]，在[36]中提到，為了確保三維晶片的可靠度，必頇確保只有 Known Good 
Dies(KGDs)可以被用來進行堆疊；因此，[27]中使用振盪環(Oscillation Ring, OR)提出
Interconnect Oscillation Ring Testing (IORT)的測詴方法來檢測交連線是否發生錯誤，在
[28]中更進一步提出 Interconnect Oscillation Ring Diagnosis (IORD)來診斷發生錯誤之
交連線；由於到目前的研究已可達到二維晶片中 100%的交連線錯誤涵蓋 (Fault 
  6 
Poisson Distribution). 
 
(3) 開發出震盪環測詴架構機制相容之交連線容錯技術： 
隨著製程的進步，單位面積的電晶體數量越來越多，相對處理元件的面積也大幅
縮減。為了減少晶片外部的資料存取所耗費的時間，加上足夠的製程技術，我們可以
將許多處理元件或記憶體整合到單一晶片上，於是系統晶片(system-on-chip; SoC)架構
在多年前被提出，也有多數的學者投入研究。時至今日，系統晶片的發展已臻成熟。
在 SoC 中模組(Module)與模組(Module)間的通訊完全依靠交連線(Interconnect)來完
成，因此 SoC 中交連線的可靠度(Reliability)也就顯得更為重要。 
在先前研究[27,28]中，對於 SoC 中交連線(Interconnect)錯誤的偵測提出一個震盪
環測詴(Oscillation Ring, OR)的方法，但是在其研究中僅能偵測出交連線(Interconnect) 
的錯誤，無法針對其錯誤之交連線(Interconnect)進行修復與補償的動作，因此必頇將
此針對錯誤交連線(Interconnect)進行修復與補償之架構網路晶片(Network-on-Chip; 
NoC)中實現。另一方面，由於點對點之間的通訊媒介(Communication Medium)無法當
發生錯誤時仍能重複使用;而通訊媒介(Communication Medium)的數量與通訊需求量
息息相關，系統上必頇有足夠的通訊媒介(Communication Medium)才能完成所需的通
訊需求。再者，單一晶片中快速增加的處理元件使得通訊需求也大幅成長，Bus 的數
量當然相對增加。隨著處理元件之間通訊的快速成長，通訊媒介(Communication 
Medium)已經成為晶片發展的瓶頸之一。為了克服通訊成長所帶來的負擔並且增加通
訊媒介(Communication Medium)的可重複使用性，網路晶片(Network-on-Chip; NoC)架
構漸漸的嶄露頭角，帶來解決該問題的一線曙光。 
網路晶片(Network-on-Chip; NoC)是一個交連線(Interconnect)相當密集的架構，因
此交連線測詴的重要性更為顯著[37-40]。本計畫測詴交連線的震盪環機制已經證明在
SoC 上可以有效的測詴、偵測有 open fault and stuck-at fault models 的交連線
(Interconnect)。即使知道了某錯誤交連線(Faulty Interconnect)，SoC 上具有錯誤交連線
(Faulty Interconnect)的路徑,在來源端(Source)與目的端(Destination)之間永遠無法避免
該錯誤而造成傳遞的資料永遠無法順利抵達。在網路晶片(NoC)上面我們則可以利用
選擇其他取代路徑(Replaceable Paths, Rerouting Paths),來修復來源端(Source)與目的端
(Destination)之資料傳遞而降低受單一或多(Multiple)交連線錯誤的影響。 
(4) 針對二維與三維網路晶片，分別完成開發二維與三維網路晶片之交連線容錯技術： 
在大量處理元件(Processing Element, PE)個數的需求和多對多的連線之下，將需要
非常複雜的系統單晶片(SoC)之交連線設計。而傳統的系統單晶片(SoC)通訊架構上，
包含了點對點的連線，如圖三 (a)，和匯流排的構造，如圖三 (b)，可能無法提供足夠
的通訊。由於點對點(point-to-point)的通訊架構是兩個元件直接對連，導致連接(link)
的需求相當高，使得複雜的系統單晶片設計上的導線不但多而且長度也變得越來越
長，造成訊號的延遲及衰減。另外匯流排在通訊的傳輸上，一次只能傳輸一組元件的
資料，造成通訊上的阻礙。為了克服通訊上的瓶頸，使用於電腦的交換式通訊架構被
應用至晶片中，我們稱之為網路晶片(Network-on-Chip, NoC)，如錯誤! 找不到參照來
  8 
置擺放和面積的長寬比所設計，第二種型態是建構在客製化的拓樸，通常是為了特別
的目標所設計。一個客製化的網路晶片(NoC)不再包含瓦片(Tile)，而是根據通訊需求
去分配路由器(Router)的設計。 
在沒有特殊應用需求的情況下，使用規則性拓樸可能是較佳的選擇。規則性拓樸
雖然便於設計和使用；但有兩個缺點:1.因為結構固定，無法依造需求去最佳化，造成
過多網路元件，而增加較大的硬體負擔。2.由於使用較多的網路元件，合成出面積較
大、功率較大、訊號延遲較大的網路晶片；尤其當複雜的通訊情形導致較多的網路元
件產生較大的功率消耗以及訊號延遲，此種現象在電路越來越大時時，尤其明顯。 
在特殊應用設計中，針對所需去設計，使得每一個處理元件有不同的尺寸，藉此
特性，目前已有多個研究探討如何利用其特殊需求，以產生客製化拓樸，來降低通訊
時對於硬體的需求、功率消耗、訊號延遲等[98] [113] [104] ，[112] 的實驗結果顯示
導線長度與功率消耗有高度正相關。[58] 指出，為降低晶片上網路之過度設計，客製
化晶片上網路即為其中相當重要的一環。[78] 介紹 x pipes NoC 設計流程，並將用 x 
pipes 合成後之拓樸結構與經由人工設計之拓樸結構(使用 5 x 3 網狀拓樸)做比較。由
實驗結果可知，產生一個有效率的客製化晶片上網路實為一重要任務，不僅可降低硬
體需求、功率消耗，更可以增加晶片執行效能。 
受限於帄面晶片發展，[116] 探討了三維整合和封裝技術(也稱作垂直整合)，層與
層之間透過垂直的連線(Interconnnet)方法(亦稱為矽穿孔，Through-Silicon Vias, TSVs)
做堆疊形成三維整合電路(3D ICs)，具有垂直交連線(Interconnnet)距離短的特性，然而
[116] 提到 face-to-back process 中層與層之間最小的距離大約只有 20-50m。因此我們
使用 50m 當作層與層之間的距離。三維整合電路的優勢在於改進封裝的密度，雜訊
的免疫，透過減少的線長和較少的電容達到整體系統的功耗的減少，並且具有優異的
效能。二維整合電路(2D ICs)的結構和三維整合電路(3D ICs)的結構，彼此之間最大不
同點在於三維整合電路(3D ICs)具有垂直的連線(interconnnet)，透過矽穿孔(TSVs)的連
接，減少了整體連線(Interconnnet)的線長，[66] 率先初步分析三維整合電路(3D ICs)
線長的研究，表明三維整合電路(3D ICs) 確實能夠提供較少的線長。這些縮短的線長
將會有效的減少帄均負載電容和電阻。比起二維整合電路(2D ICs)的線長，三維整合
電路(3D ICs) 改善了大約 15%，在功耗方面，減少了超過 10%。由於縮短了交連線
(Interconnnet)，相對應就減少了負載電容，也因此減少了雜訊的生成。為了證明[66] 的
實驗結果，我們也做了相對應的實驗，在我們的實驗結果當中，我們的三維整合電路
(3D ICs)也和二維整合電路(2D ICs)比較，我們的線長改善了大約 25%，在線長功耗方
面，減少了帄均約 38%，在整體系統的功耗，減少了帄均約 80%。[94] 提出在 4 層三
維整合電路(3D ICs)上，主動元件能夠透過堆疊的方式縮小晶片的面積。增加的維度
比起傳統二維整合電路(2D ICs)，可以減少帄均約 70%的面積；同樣的，我們也做了
相關的實驗，在我們的實驗結果當中，二維整合電路(2D ICs)的面積比我們 4 層的三
維整合電路(3D ICs)面積多了 2.58X。因此我們就將具有彈性的網絡晶片（NoC）和垂
直距離短的三維整合電路 (3D ICs)的優點互相結合，將它稱作三維網路晶片 (3D 
NoC)，它是具有效率的解決交連線(Interconnect)的問題和複雜的系統單晶片(SoC)設
  10 
帄面規劃後再增加網路元件(路由器)所導致的面積估算的不精準性。因此，我們的實驗
是將處理元件與路由器同時進行帄面規劃(Co-Floorplanning)。在產生拓樸之前，考慮晶
片發生路徑故障的情況，使用De Bruijn Digraphs (DBDG)演算法，提高整體系統的可靠
度之目標。 
  12 
數線性規劃(Integer Linear Programming, ILP)建立掃瞄鏈的方法，在 ILP 方法中使用數
學模型最佳化繞線長度，且將單掃瞄鏈分割成多掃瞄鏈，減少整體測詴時間。。 
 
 (2) 三維交連線震盪環測詴與交連線診斷： 
 傳統的二維交連線有許多架構上的延遲限制，尤其當多週期時脈之全域交連線，
所以在系統晶片之效率與應用上受到很大的限制，主要應用在低速、中高測詴解析度
的規格範圍。目前有相當多研究致力改善傳統二維交連線架構上的缺點，使三維交連
線能有更廣泛的應用。茲將文獻上所提出的數種技術分別論述如下：  
圖五為有關二維振盪環測詴及診斷中適用於 IEEE 1500 下系統層級知交連線測詴架
構，就 IORT 而言，圖六為[28]提出之符合 IEEE 1500 測詴標準之交連線測詴及診斷架
構，為了符合 IEEE 1500 測詴標準，更改 Wrapper Cell 設計加入振盪環測詴機制所需
的測詴訊號。振盪環掃描路徑在輸入端由 SI→SO 或 IN→SO，輸出端 SI→SO 或
SI→OUT。IORT 偵測晶片中交連線是否有錯誤，透過奇數個正反器(Inverter)與多個交
連線所串成的循環有無振盪來判斷循環中所包含的交連線是否有 Open Fault 與
Stuck-at Fault 的發生；此步驟分為兩個部分，一是 ring generation，二是將重複測詴的
振盪環刪除。產生的振盪環包含了多個交連線，為了涵蓋所有的交連線，我們產生多
個振盪環使所有交連線都至少存在一個振盪環中，以供偵測錯誤之用。 
 
圖五、  IEEE 1500 標準相容之系統層級交連線之測詴結構(IEEE 1500 Compatible 
System-Level Interconnect Test Architecture). 
 
  14 
統晶片中找出錯誤之交連線，圖八是一個簡單的示意圖，假設source(ns)跟destination(nd)
間有三條路徑(path)，若經由IORD檢查出路徑P2有一個interconnect with open fault，則
ns與nd間的資料可經由其他路徑來取代P2，如P1及P3。 
 
圖八、交連線容錯設計(Conceptual Interconnect Oscillation Ring Resilience (IORR, 
IR)). 
 
 
圖九、操作於正常模式下之IORR與測詴正常模式下之IORT and IORD (Conceptual Flow 
Chart of Interconnect Resilience scheme (IORR) in normal mode with IEEE 1500 
Compatible Interconnect Detection (IORT) and Diagnosis (IORD) in test mode). 
 
IORT 偵測中交連線網路(Interconnect Network)是否有錯誤。為了偵測出錯誤之交連
線(Faulty Interconnect)，我們將[44]所提出的振盪環測詴機制應用於網路晶片(NoC)，
透過奇數個正反器(inverter)與多個交連線(Interconnect)所串成的震盪環(Ring)有無振
盪來判斷震盪環(Ring)中所包含的交連線(Interconnect)是否有 d 開路錯誤(open fault)與
stuck-at fault 的發生。 
IORT:此步驟分為兩個部分，一是產生震盪環(Ring Generation)，二是將重複測詴的
震盪環刪除。產生的震盪環包含了多個交連線(Interconnect)，為了測詴與診斷所有的
交連線(Interconnect)，我們產生多個震盪環使得每個交連線(Interconnect)至少存在一個
震盪環中，以供偵測錯誤之用。 
 IORD:在產生震盪環的時候，我們會先找出所有交連線(Interconnect)的震盪環，假
如有交連線(Interconnect)無法被兩個以上的震盪環測詴與診斷，反覆應用 depth first 
search (DFS)找到較大的震盪環。同時也會建立一個如圖七之診斷矩陣(Matrices of 
Ring Generation 
Faulty Interconnect D iagnosis 
Resilience Ring & Path Generation 
SoC to NoC 
IORT 
IORD 
IORR 
  16 
(4) 二維與三維網路晶片的拓樸設計： 
很多因素會改變網路晶片(NoC)整體的效能，像是網路拓樸、容錯、面積、功耗、
溫度影響等。在本計畫中，我們把焦點著重在三維整合電路(3D IC)中提出省電的客製
化網路拓樸，並且在這拓樸之下作路由器連線間(Inter-Router Link) 故障的假設，產生
具有容錯的網路拓樸。 
前述的網路晶片(NoC)的網路拓樸主要可以分成兩類，規則型拓樸與不規則型拓
樸。規則型拓樸對一般的系統是比較好的選擇，因為系統可應付不可預測的交通模式，
並且是很容易去設計的。然而，他們會受制於更多的網路元件，比起特殊應用的系統，
有更多高功耗且低延遲的需求。當這些晶片變得更大時，這些問題會變得更重要。因
此， [85] 藉由應用網路晶片 (NoC)拓樸的模型，稱作應用通訊模型 (Application 
Communication Protocol, ACP)，來計算網路晶片(NoC)拓樸的能源及延遲。應用通訊模
型(ACP)的目標在於區別規則與不規則的網路晶片(NoC)拓樸，且計算哪個拓樸可能較
適於在應用需求。[83] 藉由一個對於多重多媒體應用的混合性網路拓樸，提出一個面
積小及低功耗的網路晶片(NoC)架構。他們嘗詴去混合生成的網路拓樸和動態工作分
配演算法，藉由減少封包的丟失，減少晶片的面積和晶片的功耗。 
通常，客製化的網路晶片(ASIC NoC)提供一個比較好的方式去解決特殊應用的問
題，並且可以合成較小的電路。除此之外，網路晶片(NoC)的功耗和 link 的線長具有
高度相關，因此很多客製化網路晶片(NoC)的方法也就相對應地發展出來，[112] [58] 
[71] [79] [87] [111-[113] 。[104] 提供一個客製化二維網路晶片(NoC)的公開源碼軟
體，稱為 2D CosiNoC。合成的流程包含拓樸資訊、根據路由器(Router)的位置作擺放
[68] 。 
先前發表的研究對於網路拓樸主要著重在二維網路晶片(2D NoC)。然而，三維整
合電路(3D IC)的技術可以提供一個有效的辦法去改善電路的效能和封裝的密度。[95] 
呈現一個設計的流程將二維設計轉到三維設計，並且分配到三維整合電路(3D IC)中；
也分別研究了二維的設計工具的自動化設計流程，並將三維的堆疊自動化設計流程應
用到三維晶片設計上。 
至於三維網路晶片(3D NoC)的拓樸，[86] 呈現一個在三維網路晶片(3D NoC)拓樸
中使用處理元件(PE)間以匯流排架構為通訊機制的架構。他們的目標著重在多處理元
件系統，因此他們提出的三維架構大大的減少快取的延遲。 
[62] 提出一個在三維網路晶片(3D NoC)中 De Bruijn Graph (DBG)的架構。這個架
構比起 Mesh 來說，具有容錯、短距離、簡單的路徑選擇的優勢。然而，因為他們提
出的 De Bruijn Graph 架構沒有最短路徑，導致功耗會多於 Mesh 的架構。[99] 提出最
佳拓樸的方法、路徑的計算與每一個三維架構中網路晶片(NoC)元件的配置。比起傳
統的網路晶片(NoC)設計，這個方法減少大量的交連線(Interconnect)功耗(帄均少了
38%)和延遲(帄均少了 25%)。然而，這些先前的研究主要是建立在規則性的 Mesh 架
構上，因此，激發出我們作客製化三維網路晶片(3D ASIC NoC)合成的方法，並使用改
進 De Bruijn Digraphs (DBDG)演算法使通訊距離加以優化。 
 [122] 在三維整合電路(3D IC)中考慮特殊應用的網路晶片(ASIC NoC)架構設計，
  18 
分析三維網路晶片(3D NoC)合適的拓樸。他們也發展了一個分析的模型，用在網路無
負載的延遲並且考慮三維網路晶片(3D NoC)的效能。他們分析了在三維晶片上網路元
件的數量，以便於減少傳輸的跳躍數(#hop)，另外再分析實體設計的層數，以便於整
合在晶片上；考慮以上的因素，減少通訊通道的長度，並減少功耗和延遲。 
 很明顯的在三維網路晶片(3D NoC)的研究上，就我們目前所了解的，我們率先在
三維整合晶片(3D IC)中提出省電、高效能並最佳化矽穿孔數量的客製化網路拓樸，並
且在這拓樸之下作路由器連線間(Inter-Router Link)故障的假設，產生具有容錯的網路
拓樸。 
 
四、研究方法、結果與討論 
 於深入探討相關文獻之後，本計畫過去兩年來於三維掃描樹測詴、三維交連線震
盪環測詴與交連線診斷、交連線容錯設計、以及二維與三維網路晶片的拓樸設計以及
測詴領域相關議題之研究方法與成果分述如下： 
(1) 三維掃描樹測詴： 
 在建構掃瞄樹演算法中，我們提出一個4-phase在三維晶片電路的架構下的多掃瞄
樹合成的演算法，目標是同時降低測詴時間、繞線長度、總矽穿孔(Through-Silicon-Via, 
TSV)個數、測詴資料量和掃瞄輸出個數： 
Phase I：2D to 3D Prtition & Tier Asignment 
Phase II：Compatibility Group Construction (CGC) 
Phase III：Scan Tree Construction (STC) 
Phase IV：Level-to-Level Physical Connection & Scattered Cells Connection 
 在Phase I中我們先將原來的二維晶片的benchmark切割成三維晶片，並且將其順序
依照矽穿孔(TSV)的個數做排列。在Phase II和Phase III中，將掃瞄單元建立相容群並
根據我們提出的方法建立多掃瞄樹。Phase IV中，針對剩下的掃瞄單元做處理，這些
掃瞄單元不相容於任何的相容群，所以無法在前面的Phase中建立成掃瞄樹。 
(1.1) Phase I：二維晶片分割為三維晶片&切割晶片指派至三維晶片階層 (2D to 3D 
Partition & Tier Assignment) 
(1.1.1) 二維晶片分割為三維晶片(2D to 3D Partition) 
 由於目前沒有在三維晶片架構下的標準電路(benchmark)可供使用，所以在Phase I 
中我們將2D晶片轉換成三維晶片，主要作法是將二維電路中的每一個元件當做一個
點，再將這些點分到三維電路中不同的層(Tier)中，其中我們會把全部的I/O pad當作
是一個點，這樣可以確保所有的I/O pad都會在同一個層(Tier)中。為了減少矽穿孔
(TSV)個數，我們更改使用Karypis lab 所發展出的hMETIS [14]， hMETIS 是以 
  20 
S
1
2
3
n
 
(a)                      (b) 
圖十一、 (a) n-terminal Hypernet, (b) TSV in Hypernet. 
 
(1.1.2) 切割晶片指派至三維晶片階層 (Tier Assignment) 
 在將二維電路切割完之後，可以得到每個電路切割(Partition)中的掃瞄單元和邏輯
閘的個數，也可以知道每個切割和其他切割間的連線資訊，我們根據切割間連線的
狀況(ie. #TSV)來分配3D電路中層(Tier)的順序。假設我們要建立一個n層的電路，會
切割成n個切割，且將n個切割分配到對應的n個層(Tier)中。 
 在3D晶片的架構中，Tier的順序(排列組合)對於TSV的個數會有很大的影響，假設
有一個3D晶片中有n個Tier，如圖十二，在圖十二(a)中第0個Tier T0有1條連線從點S
連到第n個Tier Tn的點T，則其中需要經過n-1個連線，表示需要有n-1個TSV，如在圖
十二(b)中將第n層改分配到第1層，則只需要1個TSV，所以在分配tier順序的時候，
也要考慮到Tier間連線數。對於一個 n Tier的電路，如果有一條連線是從T0連到
Tieri，則到第i個Tier(Tieri)所需要耗費的TSV為從T0到Ti中間經過的Tier數，為i個
TSV。 
 分配Tier順序的方法，首先會將切割(Partition)中包含 I/O pin的Tier作為最下層(即
T0)，這樣可確定當我們在建立掃瞄樹時，掃瞄輸入和輸出都會在最下層。確定了最下
層之後，我們會從下往上決定其他 Tiers 的順序，從還沒確定順序的切割(Partition)中
去找跟已經確定順序的 Tier 的連線數(即 TSV 個數)，從連線數去計算其放在此層所需
要的 TSV 個數，選擇 TSV 個數最多的當作此層，因為如果將 TSV 個數多的 Tier 分配
到越上層時，其 TSV 個數增加的數量會更多。 
 
  22 
T1，會跨越T2，所以會有2條TSV分別是從T3到T2和從T2到T1，所以在計算TSV時，還
要考慮到跨Tier間的連線，在跨Tier間連線還要乘上(i-j)。Eq.(3)為要決定的第i個Tier，
從還未分配順序的切割(Partitions)中，計算每個Tier會用到的TSV個數，選擇其中最多
的選定為Ti。當我們決定了那個切割(Partitions)分配到第幾個Tier之後，再把該切割
(Partition)從P中刪除，然後繼續找下一個，直到P為空。 
 舉例說明，假設現在有 4 個切割(Partitions): P0 , P1, P2, P3 要分配到 T0 , T1, T2, T3，
且 P2 中包含 I/O pad，所以我們把 P2 指派給 T0，然後要決定 T1，根據表一的切割
(Partitions)間連線數，從還沒被指派的切割(Partitions) P0 , P1, P3 中選取，根據上面的方
程式(1)，計算出 P0 連到 T0(i.e. P2)的 TSV 為 30*(1-0)=30(即 Tier1 到 T0 之 TSV 個數，
weight=i 的定義即為 Ti 到 T0 所經過的 TSV 個數，ith 之 i)，P1 連到 T0(i.e. P2)的 TSV
為 40*(1-0)=40，P3 連到 T0(i.e. P2)的 TSV 為 50*(1-0)=50，根據方程式(3)選擇 TSV 最
多的 P3 為 T1。再來要從 P0 和 P1 中決定 T2，根據上面的方程式(1)計算 P0 連到 T0(i.e. 
P2)和 T1(i.e. P3)的 TSV 為 30*(2-0)+40*(1-0)=100，P1 連到 T0(i.e. P2)和 T1(i.e. P3)的 TSV
為 40*(2-0)+30*(1-0)=110，P1 的 weighted TSV 數目為 110 大於 P0 的數目 100，根據
方程式(3)選擇 weighted TSV 最多的 P1 為 T2，最後剩下的 P0 則為 T3。 
 
表一、 連接矩陣(Connectivity Matrix). 
 P0 P1 P2 P3 
P0  20 30 40 
P1 10  40 30 
P2     
P3 20 40 50  
 
(1.2) Phase II：建立相容群(Compatibility Group Construction) 
 在 Phase II 中，根據掃瞄細胞間的相容性建立相容群，每一相容群即為一個掃瞄
樹中的一個階層，參考[2]作法，考慮掃瞄細胞間的距離來建立相容群，在[2]中是先使
用基於密度為基礎的演算法將原本二維帄面中所有的掃瞄細胞分群，選出高密度區域
為任何形狀之分群，每個 cluster 建立一個掃瞄樹，再在每個 cluster 中建立相容群。建
立相容群時，首先要建立掃瞄細胞的權重圖，將具有相容性的掃瞄細胞作連接，其上
的權重即為掃瞄細胞間的距離，使用樹狀搜尋演算法來尋找相容群，並選擇其中總繞
線長度最小的。 
 為了減少建立掃瞄樹時用到的 TSV 個數，在我們的研究中，因為在 Phase I 中已
  24 
 
(1.3) Phase III：掃瞄樹建構(Scan tree Construction) 
 在 Phase III 中，會根據 Phase II 中建立的相容群數目，帄均分配給每個掃瞄樹，
即帄衡掃瞄樹的高度，降低測詴時間。在合成掃瞄樹時，每個樹的階層都是一個相容
群，相容群的順序會影響掃瞄輸出的個數，如圖十四中是一個掃瞄樹中的相容群依照
不同順序排列的例子，圖中的掃瞄樹有三個階層其相容群大小分別為 3、5 和 7，因為
其中最大的相容群大小為 7，所以此掃瞄樹的掃瞄輸出個數最少為 7，若依照在(a)中
的順序排列 2 個較大的相容群之間有小的相容群，則其掃瞄輸出個數會需要 9 個，若
照(b)中以相容群以遞增(increasing)的順序排列，(c)中相容群大小遞減(decreasing)的順
序排列，則只需要最少的掃瞄輸出個數 7 個。 
 在 Phase III 中，為了減少掃瞄輸出的個數，我們將相容群以非遞增(non-decreasing)
的順序來排列，若掃瞄樹中從掃瞄輸入(SI)到掃瞄輸出(SO)有 n 個樹階層 L0~Ln-1，假
設 i
L
表 示 第 i 個 樹 階 層 中 的 掃 瞄 細 胞 數 ， 即 相 容 群 大 小 ， 則 會 有
1210  nLLLL  的關係。 
|CG|= 3
|CG|= 5
|CG|= 7
#SO=7
|CG|= 5
|CG|= 7
|CG|= 3
#SO=7
|CG|=7
|CG|= 3
|CG|= 5
#SO=9
Tree 
Level0
Tree 
Level1
Tree 
Level2
 
                 (a)               (b)                 (c) 
圖十四、掃瞄輸出的個數之遞增與遞減關係。(Scan tree with different compatibility group 
orders (a) general, (b) increasing or non-decreasing, (c) decreasing or non-increasing). 
 
  26 
T1
Tn
PI set
PO set
2D Interconnect set
TSV set
T0
T2
. . .
L1
L2
L3
Ln
L2n-1
L2n-2
L2n-3
 
(a) 
 
(b) 
T0
PI 
PO 
T1
T2
 
(c) 
圖十五、 (a)掃描樹階層層之對稱性(Symmetry sequence in Tiers and Tree Levels), (b) 單
  28 
T0
PI
PO
T1
T2
 
圖十六、Multiple Scan Tree and Multiple Scan Chain Construction. 
(1.5) 實驗環境 
 我們使用ISCAS89的benchmark，利用SOC encounter以TSMC 90nm製程擺置電路
之掃瞄細胞，在Ubuntu 8.0.4, Intel(R) Xeon(R) 2.00GHz （3 GB RAM）上執行我們的
實驗。表二列出實驗電路的資訊，第一欄為電路名稱，第二欄#TV代表電路的測詴向
量，第三欄為#代表電路的掃瞄單元(ie. 暫存器，flip flops)數量，第四欄為#PO代表電
路output pad數量。 
 實驗比較對像分為二維帄面的單掃瞄樹[3] 中的High compression rate方法，多掃
瞄樹MST[2]和SOR[6]，以及三維帄面的掃瞄鏈[1]中的ILP-based方法，其中參考[1]將2
個Tier間的距離設為10m。 
表二、 Benchmark Characteristics. 
Circuit   #TV  #FF  #PO  
s5378  97 214 49 
s9234  105 247 39 
s13207  233 700 152 
s15850  94 611 150 
s35932  12 1763 320 
s38584  110 1464 304 
  30 
善，只在TD方面比2D MST [2]差0.914X；以我們提出的方法3D MST與3D SST相比，
在繞線長度(0.833X)、#SO(0.755X)和TD(0.912X)都較差，但是在TAT有很大的改善
(5.874X)。圖十七為表三與表四的正規化之比較結果比較圖，其中3D SST和2D 
SST-HC[3]，因為是單掃瞄樹，所以樹的高度很大，造成其TAT會很大，不過會有很少
的掃瞄輸出。 
表三、針對繞長與輸出腳位數的正規化之比較 
(Wire Length and Number of Scan Output Port Comparison between 2D and 3D Scan Tree 
Structures). 
Circuit 
Tier 
number 
3D 2D 
3D SST 3D MST 
[3] SST -- High 
compression rate 
[2] MST – Yang [6] MST -- SOR 
WL #SO WL #SO WL #SO WL #SO WL #SO 
s5378 
2 2660.1 20 3382.3 33 
9313.9 12  17052.7 80  13529.44 40  3 3198.6  18 3665.6  31 
4 2605.3 16 3581.5 27 
s9234 
2 3871.7  18 4152.8  30 
12420.7 8  11500.8 44  16629 37  3 3515.5  18 3865.3  28 
4 3441.4  17 5146.3  35 
s13207 
2 13491.3 106 15753.5 100 
38599.8 12  59947.6 389  40211.3 149  3 14300.5 127 14827.8 120 
4 12671.2 130 14367 106 
s15850 
2 12267.61 62 13615.2 76 
39167.5 12  53144.9 292  43276.3 146  3 11070.7 85 12880.1 74 
4 9959.9 62 12557.1 78 
s35932 
2 52436.8  140 88480.1  229 
145186.5 4  211160.4 985  148739.5 305  3 53647.9  165 67845.1  210 
4 53618.4 197 60731.3 199 
s38584 
2 67839.4 39 69840.2 134 
166553.8 16  157249.1 533  140441 281  3 54437.5 45 59525.31 121 
4 49665.2 61 55660.21 125 
Avg. 23594.4  73.7  28326.48  97.56  68540.37  10.67  85009.25  387.17  67137.77  159.7  
Normalized 0.833 0.755  1  1  2.420  0.109  3.001  3.969  2.370  1.637  
 
表四、測詴時間與測詴資料量的正規化之比較 
  32 
comparison among wire length (WL), Scan Output(#SO), Test Application Time(TAT) and 
Test Data (TD)). 
 
 表五和表六是在 3D 電路架構下，不同 Tier 數間的實驗結果比較，在表五中為繞
線長度(WL)和掃瞄輸出(#SO)數量的比較，可以看出當 Tier 數越多時，我們的方法 3D 
MST 與 2D 相比在 WL 和#SO 上會越好。 
 表五中，以繞線長度而言，(1)與二維的單掃瞄樹和多掃瞄樹相比，當Tier數越多
三維晶片的優勢更明顯，帄均來看，分別比2D SST-HC[3]好2.107X (for 2 Tiers)、2.529X 
(for 3 Tiers)和2.705X (for 4 Tiers)；比2D MST[2]好2.613X (for 2 Tiers)、3.137X (for 3 
Tiers)和3.355X (for 4 Tiers)；比2D SOR[6]好2.064X (for 2 Tiers)、2.477X (for 3 Tiers)和
2.650X (for 4 Tiers)。(2)我們的方法3D SST與3D MST比較，因為我們在做MST時，會
限制每棵樹的高度，當樹的高度逹到此限制就會停止，這樣可能會使相鄰的相容群無
法建立在同一個樹中，導致其繞線長度會比SST差。當掃瞄樹越多，其高度限制就越
大，每個樹的高度越小，TAT越少，使得更多相鄰的相容群會被分配到不同樹中。3D 
MST比3D SST在繞線長度上差0.782X (for 2 Tiers)、0.862X (for 3 Tiers)和0.868X (for 4 
Tiers)，整體帄均而言差0.833X。未來改進的方法，針對繞線長度的最優化，我們打算
在樹的高度的限制下，選擇相鄰的相容群，甚至跳過不合適的Tier上的相容群，因為
在二維帄面上相鄰的相容群可能中間跨越多個Tiers，但是其增加的TSV長度會小於原
本2D的掃瞄樹的繞線長度。 
 表五中，以掃瞄輸出腳位數量來看，(1)與二維的單掃瞄樹和多掃瞄樹相比，當Tier
數越多#SO會越好，帄均來看，分別比2D MST [2]好3.859X (for 2 Tiers)、3.978X (for 3 
Tiers)和4.075X (for 4 Tiers)；比2D SOR [6]好1.591X (for 2 Tiers)、1.640X (for 3 Tiers) 和
1.681X (for 4 Tiers)，比2D SST-HC[3]差，其比例分別為0.106X (for 2 Tiers)、0.110X (for 
3 Tiers)和0.112X (for 4 Tiers)，但隨Tier數增加改善。(2)我們的方法3D SST與3D MST
比較，因為SST只有一個掃瞄樹，所以#SO會比較少，其比例分別為0.64X (for 2 Tiers)、
0.784X (for 3 Tiers)和0.847X (for 4 Tiers)，但隨Tier增加其差距會越少。 
 在表六中為 TAT 和 TD 的比較，以帄均來看，跟表五相反，當 Tier 數量越多時，
我們 3D MST 隨著 Tier 越多在 TAT 和 TD 會越多，因為當 Tier 數越多，會造成本來在
二維電路中的相容群中的掃瞄單元，被分配到不同的 Tier 中，在我們建立相容群時，
只會在相同 Tier 中，所以會把原來的相容群，變成在不同 Tier 上的多個相容群，影響
  34 
s13207 152 14300.5 127 14827.8 120 38599.8 12 59947.6 389 40211.3 149 
s15850 150 11070.70 85 12880.1 74 39167.5 12 53144.9 292 43276.3 146 
s35932 320 53647.9 165 67845.1 210 145186.5 4 211160.4 985 148739.5 305 
s38584 304 54437.5 45 59525.3 121 166553.8 16 157249.1 533 140441. 281 
Avg. 23361.80  76.33  27101.53  97.33  68540.37  10.67  85009.25  387.17  67137.77  159.67  
Normalized 0.862  0.784  1  1  2.529  0.110  3.137  3.978  2.477  1.640  
4 
s5378 49 2605.2 16 3561.48 27 9313.9 12 17052.7 80 13529.44 40 
s9234 39 3441.4  17 5146.3  35 12420.7 8 11500.8 44 16629 37 
s13207 152 12671.3 130 14367. 106 38599.8 12 59947.6 389 40211.3 149 
s15850 150 9959.9 62 12557.1 78 39167.5 12 53144.9 292 43276.3 146 
s35932 320 53618.5 197 60731.3 199 145186.5 4 211160.4 985 148739.5 305 
s38584 304 49665.2 61 55660.3 125 166553.8 16 157249.1 533 140441. 281 
Avg. 21993.59  80.5  25337.24  95  68540.37  10.67  85009.25  387.17  67137.77  159.67  
Normalized 0.868  0.847  1  1  2.705  0.112  3.355  4.075  2.650  1.681  
 
表六、在不同層數中測詴時間與測詴資料量的正規化之比較 
（Test Application Time and Test Data Compression Comparison between 2D and 3D Scan 
Tree Structures in Different Number of Tiers）. 
Tier 
number 
Benchmark 
3D 2D 
3D SST 3D MST 
[3] SST -- High 
compression rate  
[2] MST -- yang [6] MST -- SOR 
Circuit TAT TD TAT TD TAT TD TAT TD TAT TD 
2 
s5378 25 4850 10  5820 94 8342 11 4268 11 7469 
s9234 31 6510 11  6930 126 12915 21 8820 21 13230 
s13207 56 26096 16  29824 135 26795 14 26096 14 29358 
s15850 70 13160 15  14100 189 15886 16 13536 16 16544 
s35932 104 2496 15  1800 488 5856 22 4488 22 5544 
s38584 199 43780 18  47520 467 45320 21 46200 21 66990 
Avg. 80.83  16148.7  14.17  17665.7  249.83  19185.7  17.50  17234.7  17.50  23189.2  
Normalized 5.706  0.914  1  1  17.635  1.086  1.235 0.976  1.235  1.313  
3 
s5378 29 5626 10  5820 94 8342 11 4268 11 7469 
s9234 27 5670 11  6930 126 12915 21 8820 21 13230 
s13207 62 28892 17  31688 135 26795 14 26096 14 29358 
s15850 67 12596 16  15040 189 15886 16 13536 16 16544 
  36 
 
0.8
0.9
1
1.1
1.2
1.3
1.4
2 3 4
Tier number
WL
#SO
TAT
TD
 
圖十九、在不同層數中 3D MST 針對繞長、輸出腳位數、測詴時間與測詴資料量的正
規化之比較 
Normalized comparison for 3D MST for wire length (WL), Scan Output (#SO), Test 
Application Time (TAT) and Test Data volume (TD). 
 
(1.5.2)與二與三維晶片掃描鏈比較 
 表七為跟 SSC[1]提出的方法在繞線長度上的比較結果，我們分別將 SSC[1]中的
2D Scan chain-ILP 結果和 2D MST[2], 2D SST-HC[3]和 2D SOR[6]比較，左邊為 2D 中
的比較結果，右邊為將 SSC[1]中的 3D Scan chain 跟我們的方法 3D SST 和 3D MST 做
比較。在左邊的表中為 2D Scan Chain [1] 和 2D 的 2D SST[3]、2D MST[2]和 2D SOR[6]
在繞線長度的比較，帄均來看 2D SST[3]是 2D SSC[1]-ILP (4 chains)的 9.876X，2D 
MST[2]是[1]-ILP (4 chains)的 14.240X，2D SOR[6]是[1]-ILP (4 chains)的 10.591X。 
3D Scan Chain [1]和我們的 3D MST 方法在繞線長度的比較，跟 SSC[1]的方法中
的 ILP 3D 相比，我們的方法 3D SST 和 MST 帄均是其 7.043x 及 9.050x。與左邊的 2D
掃瞄鏈和 2D 掃瞄樹相比，比 2D MST [2]的 14.240x、2D SST[3]的 9.876x 和 2D SOR[6]
的 10.591x 要少，表示 3D MST 在掃瞄樹和掃瞄鏈的架構下，在 3D 上比 2D 在繞線長
度上有改進，但是因為掃瞄樹(Scan Tree)和掃瞄鏈(Scan Chain)在先天架構上的差異，
仍有不小的差距。以整體帄均來看，繞線長度在二維帄面上掃瞄樹是掃瞄鏈的
4.188X，在三維帄面中掃瞄樹是掃瞄鏈的 2.334X。 
  38 
除以#Scan Chain，所以方程式又可化簡為TD=(#Scan Cell)*(#TV)，依照此方程式算出來的
TD當#TV一定時，在掃瞄鏈個數相同時，會有一樣的TD。以帄均來看，3D MST在TAT比
SSC[1]單掃瞄鏈和多掃瞄鏈好4.116X。 
表八、三維晶片中在不同層數中測詴時間與測詴資料量掃瞄樹(Scan Tree)和掃瞄鏈(Scan 
Chain) 的正規化之比較 
(Test Application Time and Test Data Compression Comparison between  
3D Scan Chain and 3D Scan Tree).  
Circuit 
Tier 
number 
3D MST 
[1] ILP3D 
1 chains 2 chains 4 chains 
TAT TD TAT TD TAT TD TAT TD 
s5378 
2 10  5820 
179 17363 90 17363 45 17363 3 10  5820 
4 12  6984 
s9234 
2 11 6930 
211 22155 106 22155 53 22155 3 11 6930 
4 11 6930 
s13207 
2 16 29824 
638 148654 319 148654 160 148654 3 17 31688 
4 16 37280 
s15850 
2 15 14100 
534 50196 267 50196 134 50196 3 16 15040 
4 16 15040 
s35932 
2 15  1800 
1728 20736 864 20736 432 20736 3 18  2160 
4 19  2508 
Avg. 14.200  12590.267  658.000  51820.800  329.000  51820.800  164.500  51820.800  
Normalized 1  1  46.338  4.116  23.169  4.116  11.585  4.116  
(1.6) 結論 
 在本研究計畫中，我們在三維晶片的架構中，考量電路佈局情況下，提出一個同時考
慮繞線長度、掃瞄輸出數量、測詴時間和測詴資料量的掃描樹合成演算法。在 Phase I 中，
我們考慮到 TSV 個數將 2D 晶片轉換成三維晶片，並分配三維晶片中各層之順序；在 Phase 
II 中，在各層電路中考量繞線長度建立相容群；在 Phase III 中，考量掃瞄樹輸出個數建立
掃瞄樹；在 Phase IV 中，考慮整體繞線長度將掃瞄樹中的掃瞄單元連接。 
    與傳統二維晶片的掃描樹相比，在繞線長度上帄均比[2]好 3.001X，比[6]好 2.370X；
  40 
 
(b) 
 
(c) 
圖二十二、(a) IEEE 1500 Compatible System-Level Interconnect Test Architecture [27], (b) 
Regular NoC-in-SoC. (c) ASIC NoC. 
圖二十三說明為了符合 IEEE 1500 測詴標準，我們更改 wrapper cell 設計加入振盪環測詴
機制所需的測詴訊號。OR scan path 在 input 由 SI→SO 或 IN→SO，output 由 SI→SO 或
SI→OUT。 
 
 
圖二十三、IEEE 1500 Compatible wrapper cells for SoCs [27], (a) Input wrapper cell, (b) Output 
wrapper cell. 
 
  42 
法以 e1 及 e2 做為 e3 的取代路徑，觀察圖二十六(b)可以看到，另外包含 e1、e2 的 ring r3、r4，
若將這兩個 ring 中 e1 及 e2 移除後所剩下之 edge 集合的方向性正好與 e3是一致的，因此，
這裡我們提出一個 Interconnect Resilience algorithm (IR, IORR)，以圖二十六中找到的 repair 
path 來找出 resilience path，此演算法是以偵測出錯誤 edge 的 ring 做為 repair ring，將這些
repair ring扣掉錯誤 edge後剩餘的 repair path做為根本，在先前建立的 ring中尋找經過 repair 
path 的 ring 當做 resilience ring，之後再將 resilience ring 中屬於 repair edge 的部分刪除，剩
下來的 edge 就是錯誤 edge 的 resilience path。 
在圖二十六(b)中我們可以看到 4個 ring r1, r2, r3, r4分別由{e3, e1}, {e3, e2}, {e4, e5, e1}及{e7, 
e6, e2}組成，當 e3 發生錯誤時可由 r1 和 r2 診斷出來，這裡 r1 和 r2 及為 repair ring，而{e1}和
{e2}則為 repair path， 
且由 e1、e2分別可以找到 resilience ring r3和 r4，分別將這 resilience rings r3及 r4中屬於 repair 
path 的部分{e1}和{e2}去掉後可以得到兩個 e3的 resilience path {e4, e5}和{e7, e6}。 
 
(a)                  (b) 
圖二十六、(a) bi-direction or non-directive graph, (b) digraph. 
在一般情況下 repair/resilience path 不會只是單一個邊 (edge) (for non-directive 
graph/directive)，為了在眾多震盪環中能夠順利找到我們要的 resilience ring，我們使用
Longest Common Subsequence(LCS)的演算法將其他震盪環與 repair path 做比對；這裡我們
先對 repair path 做個定義，repair path 的第一個 edge 是 repair ring 中，如圖二十六(b)中，假
設 e3 沒有錯誤而是 e2發生錯誤，則 repair ring 分別為 r4 和 r2，對於 r4來說，錯誤 edge e2
的下一個 edge 是 e7，因此 repair path 為{e7, e6}，而 e2 的 repair edge 則為{e3}。 
在[27]中使用振盪環的方式檢測線路是否有問題，因此頇保證每條路徑都至少被一個振盪
環所涵蓋；[28]則是進一步利用兩個振盪環偵測出是哪一條路徑發生問題，所以每條路徑至
少頇被兩個振盪環涵蓋；這兩個研究的目的是以最少的振盪環來達到目的，而我們的研究
是在容許範圍下，盡量讓每條路徑被最多的振盪環涵蓋，也就是讓每條路徑的 repair ratio R
在容許條件下取得最大值，我們稱此問題為 max covering。 
  44 
 
這裡為了使代價降到最低即增加最少的震盪環，我們以 IORT 和 IORD 兩階段產生的震盪
環為基礎，確保所有交連線發生錯誤時都能被偵測出來，並以這些震盪環為根本，針對各
個 ring 中的每個 edge 做判斷，以其中被較少震盪環所 cover 到的 edge 為基礎，建立附屬的
repair/resilience ring 來做為此 edge 的取代路徑，使這些 edge 可以提升其 repair/resilience 
ratio， 
這些新建立附屬的震盪環皆與原始震盪環獨立，這裡獨立是指該 edge 只與之原先所屬的
震盪環，除了用來新建震盪環的這個 edge 重複( mn re  ，且 x,n,mn re  )外，其他 edge 皆不與
該 edge 所屬的原始震盪環重複，且各個附屬震盪環之間也互為獨立，如圖二十八，若使用
r1 的 e2 來建立附屬震盪環，則所建立的附屬震盪環為 r1,2,1 及 r1,2,2，而不會建立如{e2, e9, e10, 
e6, e12, e11}這樣的附屬震盪環，因為此附屬震盪環可能會影響到 e2及 e6 的可辨識性，所以
可以看到原始 ring r1 與附屬 ring r1,2,1, r1,2,2 間除了 e2 重複外，其他 edge 都不相同。 
由於這裡針對可靠度(Reliability)較低之交連線，另外找震盪環來提高其Repair Ratio，所
以使得這些可靠度(Reliability)較低之交連線可以找到更多的Resilient Path，且這些額外增加
的震盪環沒有受到IORD架構的限制，因此可以使每一條交連線更容易找到Resilient Path，
所以這裡我們使用增加外震盪環的方式來提高可靠度 (Reliability)較低之交連線的
Repair/Resilience Ratio，以期可以找到更多的Resilience Path。 
圖二十七與圖二十九為了找到其他取代路徑，本研究針對交連線之fault-tolerance處理分為
三個步驟。第一步是IORT (Interconnect Oscillation Ring Testing)，藉由震盪環(oscillation ring 
(OR))發現交連線fault；第二步是IORD，由第一步所回傳之結果與所建立的資訊比對，診斷
出有錯誤的交連線；最後依據診斷結果調整取代繞線(Routing)路徑使封包得以從無錯誤的
取路徑成功傳送，也就是說，將發生錯誤的路徑藉由repair (resilience)的動作以其他路徑取
代原先通訊的功能，這一系列的動作我們稱之為 IORR(Interconnect Oscillation Ring 
Resilience)，圖二十九為IORR的概念之流程圖，IORR藉由IORT發現有交連線錯誤存在的情
況，並由IORD架構診斷出錯誤的交連線，最後再藉由repair(resilience)的動作將發生錯誤的
交連線由其他的傳輸路徑所取代。 
圖二十九是我們找 Resilience Path Searching 的流程圖，一開始 Ring Generation 是找
Resilience Path 的 preprocessing，也就是建立 Diagnosis Ring 及提高 Repair Ratio 的步驟，這
裡也就是建立 Fault Diagnosis 及尋找 Resilience Path 的資訊；接下來，當出現 target faulty 
interconnect 時，首先會先判斷此 faulty interconnect 的 Repair Ratio 是否夠大，在我們的演
算法中主要是利用 preprocessing 中所建立的震盪環來找 Resilience Path，因此，當 Repair 
Ratio 太小的時候，代表經過此 faulty interconnect 的震盪環較少，所以可以拿來找 Resilience 
Path 的資源也比較少，因此找到 Resilience Path 的機率也較低，當遇到此情況時，我們將
原本交連線的方向倒轉(EIRG)後，使用 BFS 的方法來搜尋最短的 Resilience Path。 
這裡使用(EIRG+MFMR)是由於 EIRG 所產生的 Resilient path 過多會造成 MFMR 計算時
間過長，而 mLCS 則是由既有震盪環中尋找 Repair Path 選出幾條較佳的 candidate resilient 
path，再用 MFMR 選出整體取代率較帄均與較佳的 resilient path，尤其當搜尋是由 source
端點和 sink 端點來找 resilient path 時，其減少搜尋範圍的效果更佳。 
當我們找到 SoC 中的 Resilience Path 後，需將此 Resilience Path 對應到 NoC 中，這裡我
們要做的是更改 Routing Table，將原本輸出至 faulty link 的 output port 改成輸出至 Resilience 
Path 的 output port。 
 
  46 
們將 es 和 ed 的 score 加總( m
r2
)拿來當作篩選 resilience ring 的 lower bound，此目的是為
了保證所選出來的 resilience ring 都必頇經過這兩個 edge，也就是說，若 mLCS 比對出來的
數值小於 lower bound，則表示這個 ring 沒有同時經過 es 跟 ed，圖三十三為 modified LCS
比對的分數參照表，圖三十是圖三十三分數表的相對應圖形，圖中綠色的 path 為 repair 
path，而藍色的 path 所形成的震盪環則為 rm， Sa 是 repair path 長度為 3，es 和 ed 分別為 e6
及 e4，因此我們可以知道 e6 跟 e4 的 score 皆為 3，而 e2 的 score 則為 1，在跟 Sb 做比對時，
當 Sb 中的 edge 為 e6 或 e4 時 cost 都加 3，若為 e2 則加 1，在圖三十三中紅色框框為相同 edge
的頭跟尾，也就是 resilience ring 中需刪除的部分，且我們可以看到 resilience ring r4 的
resilience score 為 7；其詳細的演算法如圖三十一。 
 
 
圖三十一、 modified LCS algorithm. 
對於一個 repair path，我們依據 resilience cost (ie. length)選出一條對應的 resilience path 做
為 candidate resilience path，之後在這些 candidate resilience paths中找出最短的當作錯誤 edge
的 resilience path。 
針對以下兩個困難，(1)由於 circuit topology，使用 mLCS 演算法找不到 Resilient Path 或
(2)Repair Ratio 太小導致用 mLCS 演算法不容易找到 Resilience Path 的 interconnect，我們提
出一個 Edge Inversion Ring Generation (EIRG)的方法，此方法是直接將 faulty interconnect
Algorithm: mLCS (modified Longest Common 
Subsequence) 
Input: the repair path p, the set of rings R 
Output: the resilience path of p 
01. Sa = p; 
02. P =  ; 
03. n = 0; 
04. max_cost = 0; 
05. for each rR 
06.     Sb = r + r; 
07.     nb = length of Sb; 
08.     cost = 0; 
09.     rp = false; 
10.     path =  ; 
11.     for i = 0 to nb-1 
12.         if Sb[i] == Sa[n] 
13.             if n == 0 or n == na-1 
14.                 if n == 0 and cost != 0 
15.                     break; 
16.                 if rp 
17.                     Add Sb[i] in path; 
18.                 else 
19.                     if n == na-1 
20.                         rp = true; 
21.                 cost = cost + na; 
22.             else 
23.                 cost = cost + 1; 
24.             n = n + 1; 
25.     if cost > max_cost 
26.         max_cost = cost; 
27.         P = path; 
28. P is the resilience path of p; 
 
  48 
圖三十四、Algorithm for Edge Inversion Ring Generation. 
 
(2.2) Min-Frequency Max-Reliability Scheme (MFMR): 
在前面的研究中使用 mLCS 演算法找出對應各個 resilience path 後，我們使用 resilience 
path 的長度來做為判斷較佳 resilience path 的標準，即找出最短的 resilience path，但是，使
用此方法找尋 resilience path可能會使得某些 edge的 frequency過高，導致此 edge的 reliability
降低；這裡我們提出一個 Min-Frequency Max-Reliability algorithm，針對 edge frequency 和
path length 做考量，並加入 interconnect 的 reliability 因素(Re, made by RRe in Eq. (5))，避免
部分 reliability 較高的交連線被當作大部分 faulty interconnect 的 resilience path，使得交連線
的使用頻率能更帄均，且隨著 resilience path 的長度越長，對 reliability 的影響就越大，因此
不會導致 resilience path 過長。 
在所有的實驗中，IR scheme可以找到所有交連線的resilience paths，即IR scheme可達到
100% faulty interconnect resilience (表十二中, mLCS加EIRG method; IR scheme可達到100%
的交連線取代率(Resilience Coverage))。 
 我們主要是用 mLCS 演算法來達成 faulty interconnect 的補償，再配合 MFMR
（Min-Frequency Max-Reliability）演算法，以期找到的 resilient path 重複使用性較低，因此
表十及表十一以mLCS之實驗結果為主，而EIRG僅是輔助mLCS處理較難找到 resilient path
的方法，並沒有使用 MFMR 來選出較適當之 resilient path。 
而IR scheme中的mLCS演算法（表十 for RR, 表十一 for RZ）可以依照使用者要求的
interconnect reliability來做調整interconnect resilience threshold。針對無方向性的交連線，我
們使用interconnect repair threshold (RRT)來表示interconnect reliability；針對有方向性之交連
線，我們則用interconnect resilience threshold (RZT)來表示interconnect reliability。針對無方
向性的交連線，RRT=1時為符合IORD之條件，此時對於Reliability並無任何要求；當RRT≧
2時，則對Reliability有基本的限制；針對有方向性之交連線，Resilience Path是先經由無方
向性的交連線Repair Path而間接求得。 
 這裡我們用 
 711 
e
e
RR
R   
來計算交連線之可靠性，其中 eRR 為無方向性之交連線取代路徑個數。 
當針對無方向性交連線的Repair Threshold (與有方向性交連線的Resilience Threshold)等
於1時，這裡尚未對interconnect的Reliability有所限制(只有一條OR經過target interconnect, 若
此interconnect斷掉時,無其他interconnect取代路徑)，因此並未對其進行提高Reliability的動
作，此時帄均有53.68%的有方向性之交連線無法達到預期之Resilience Ratio，即只有46.32%
的有方向性之交連線可以找到Resilience Path (表十二)； 
當Repair Threshold等於2(ie. Reliability=1/2)時，這裡並不需要增加額外震盪環，且所有
的無方向性之交連線都可以達到預期之RRT (RRT=2);此時，由mLCS演算法找Resilient Path
後，僅有 83.91% 的有方向性之交連線可以達到預期之 Resilience Ratio Threshold 
(RZT=83.91%)； 
當Repair Threshold等於3(RRT=3)時，這裡也不需要增加額外震盪環，但此時僅有92.16%
的無方向性之交連線都可以達到預期之Reliability(2/3);且有81.59%的有方向性之交連線可
以達到預期之Resilience Ratio Threshold； 
  50 
frequency總合；我們可以由(4)式知道，當 


Pe
eP fl 時表示 resilience path P 的長度和其 edge
使用頻率的總合相等，也就是說此 resilience path 包含的所有 edge 皆未被之前 faulty edge
之 resilience path 使用過，此時 resilience path P 的 priority 即為 P 所包含 edge 之 reliability
乘積， 


Pe
eP RP
，若 resilience path 長度越長，對 reliability 的影響越大。 
 我們以 Eq.(8)式來計算 mLCS 演算法找出來 candidate resilience path 的 reliability，並以
各 candidate resilience path 的 reliability 來做為選擇 resilience path 之標準。 
 圖三十五中有 12 個 ring r1, r2, …, r12，當 e7發生 fault 時，我們可以得到 r1 和 r2 為 e7
的 repair rings，由 r1 和 r2 分別找到 repair path rp1={e6 , e2 , e4}in r1和 rp2={e12 , e8}in r2，由
mLCS 演算法找出 rp1和 rp2 的 resilience ring r4、r5 和 resilience path zp1={e9, e10}、zp2={e5, e1, 
e3}，如圖三十五；由(7)式可得 e1, e3, e5, e9, e10的 reliability 分別為 4
3 , 
2
1 , 
4
3 , 
2
1 , 
2
1 假
設在 e7 發生 fault 之前無其他 interconnect  fault，此時所有 interconnect 的 frequency 皆為
1, 2
1
zpl  and 32 zpl ，將上述條件代入(8)式 
25.0
2
1
2
1
11
2
1








zpP  
28.0
2
1
4
3
4
3
111
3
2








zpP  
12 zpzp
PP  ，因此 e7 的 resilience path 為 zp2={e5, e1, e3}，且 e1, e3, e5 的 frequency 各加 1，分別
為 2
5
ef , 21 ef , 23 ef 。 
 
圖三十五、Two candidate resilience paths of zp1 and zp2 the faulty interconnect e7. 
 這裡因為 EIRG 是直接找最短的路徑當做 Resilient Paths，因此並不需要使用 MFMR 演
算法來選較適當之 Resilient Paths，只是未考慮整體帄衡；若 EIRG 與 MFMR 結合，此時
EIRG找出所有可以當做Resilient Paths之路徑需耗費較多時間，且找到的Candidate Resilient 
Paths 數量也較多，而且在比較時也會花較多的時間，所以在本研究中僅使用 EIRG 找最短
的 Resilient Path，而不是將 EIRG 與 MFMR 結合來帄衡 Resilient Frequency。 
且在multiple faults (或 serial single fault)的情形下，(mLCS+MFMG)與EIRG兩種Resilience
方法會交錯使用，因此當使用EIRG後，可藉由之後的(mLCS+MFMR)演算法來帄衡Resilient 
Frequency，當某個 faulty interconnect 使用 EIRG 會造成其 a resilient path 上某些交連線的使
用頻率過高時，可在之後其他 faulty interconnects 用(mLCS+MFMR)，以避開這些使用頻率
  52 
(2)同時我們可以將圖三十六(b)中藍色線段視為 faulty interconnect，當
51nn 發生錯誤時，
可以找到 resilient path  5441 , nnnn ; 當 41nn 也發生錯誤時，則可以找到其 resilient 
path 4331 , nnnn ，同時 51nn 的 resilient path 也改為  544331 ,, nnnnnn 。 
在這個問題中，每次尋找 resilience path 都可以看成是 Transitivity Closure 的問題，當一
條交連線斷掉時，必頇在圖形中找出(source, destination)的取代路徑，在 Step III 找出的
candidate resilience path 可視為 Transitivity Closure 的部分解集合，接著再由解集合中選出較
合適的路徑，並以此路徑做為 fault interconnect 的取代路徑。 
 
(a)                     (b) 
圖三十六、Transitivity Closure. 
 
 Transitivity Closure 的原理, 圖三十六(a)中 n1 與 n3, n4, n5 間並無直接連線，若我們要知
道 n1 是否可到達 n3, n4, n5，此問題可以定義為尋找 Transitivity Closure，在圖中可以看到，
n1可以透過 n2到達 n3，進而可以到達 n4和 n5，圖三十六(b) 即為 n1到各個 node之Transitivity 
Closure Graph，圖中藍色線段為透過 Transitivity Closure 可到達之 node；本研究中 faulty 
interconnect 可視為圖三十六(b)中的藍色線段，如圖三十的 e7，在這裡我們要做的是以我們
的演算法在圖中找出 Transitivity Closure 證實圖中藍色路徑的存在，換言之，由起點連到任
何路徑中之中間點之連線如實際存在於電路中，則此線段則可建立對應表格，由查表法中，
此線段所對應之取代路徑之一為此路徑中由起點連到此點之中間點，例如 31nn 可由
 3221 , nnnn ，同理，此 equivalent set 中之 edge element 21nn 亦可由查表法中進一步得到，只不
過 edge 數目會很大，而且取代的 equivalent class 的大小會太大，因而 MFMR 之篩選功能
更重要。 
 MFMR 之篩選功能列於圖三十七。本研究中以 preprocessing 的方法預先建立搜尋
Resilience Path 的 Ring，利用先前建立之 diagnosis table，並以 diagnosis table 為基礎，針對
Reliability (Repair Ratio)較低(未到 Repair Ratio Threshold)之 interconnect 尋找 Rings，當有
faulty interconnect 時，以 Look Up Table (LUT)的方法來診斷錯誤之交連線，大部分的交連
線都可以用 preprocessing 所建立之 Rings 來找到其 Resilience Path，而不需要重新在整個電
路中找到取代路徑。請注意，另一觀點是一條路徑中之每一點構成一 Equivalent set。 
 
 
  54 
組(module)的 I/O，我們知道的訊息為一個模組(module)發出的封包頇傳到哪個模組
(module)，至於其在 NoC中的傳輸路徑則由路由器(router)的繞線表(routing table)來記
錄，且會因為不同的拓樸(topology)產生不同的繞線表(routing table)。 
由於晶片上的通訊需求是不可預期的，因此規則性拓樸可以提供一個較佳的通訊架構通
解。然而在某些具有特殊通訊需求之設計中，如特殊用途設計(application-specific 
design)，由於通訊需求是已知的，如[43],[44]實驗結果所示，使用規則性拓樸可能導致
過度設計，增加多餘網路元件，在硬體負擔、晶片面積、功率消耗、系統效能等都將造成
不良的影響，針對特殊用途設計提出了如圖三十八之特殊應用或客製化之網路晶片(Custom 
NoC)。這裡我們將 SoC 中的每個 core 都當做是 NoC 中一組 Processing Element (PE)和 Router
的組合，這裡並將 PE 及 Router 合為一個 Tile，並運用於 Irregular Topology 的 ASIC NoC，
圖三十八為一個 ASIC NoC，而圖三十九其中的藍色方塊即為一個 Tile，其中包含一個 PE
及一個 Router，當某一條 interconnect 發生錯誤時，這裡會更改錯誤 module 的 output port，
將 package 經由其他 output pin 做傳輸。 
 
圖三十八、客製化之網路晶片拓樸關係(Custom NoC Topologies). 
針對本研究之架構，我們提出一個與傳統的 Mesh NoC 的 Tile 類似的結構，SoC 中的一
個 Core 相對於 NoC 中的一個 PE，而一個 PE 再加上一個 Router 則稱為一個 Tile，如圖三
十九(a)為 SoC 中的一個 Core、(b)為 NoC 的一個 Tile，當 SoC mapping 到 NoC 時，一個 Core
就相當於一個 Tile 中的 PE。 
 
                    (a) Core                               (b) Tile 
圖三十九、 (a) Core in SoC, (b) Tile in NoC. 
 
 
 
Router 
Router 
Router 
PE 0 
PE 1 
PE 2 
PE 3 
PE 6 
PE 4 
PE 7 
PE 5 
Router 
PE 
… 
  56 
Port 1做輸出的表格改為由Output Port 2做輸出，並於經過各個Router時做PE ID的比對，確
認是否為此PE的package，若不是則繼續做傳輸。 
 
圖四十一、Router Structure. 
 
 圖四十一是圖四十中每個 Tile 的 Routing Table，其中 Router 0 到 Router 7 的則分別為
PE 0 到 PE 7 的附屬 Router，Router 間的連線則是對應圖四十二中各個 Tile 間的連線關係。 
 
(a)                            (b) 
圖四十二、無錯與有錯之繞線表(Routing Table)的對比, (a) Fault-free Router Structure, (b) Faulty edge 
condition. 
(2.4) 實驗結果 of Interconnect Resilience Scheme in SoC (IORR, IR): 
本研究之實驗分為兩個部分，一為 SoC 震盪環測詴、錯誤偵測及補償，二為以 SoC 錯誤
交連線補償為基礎，將其對應到 NoC 錯誤之補償；實驗中我們使用到深度優先(DFS)及廣
度優先(BFS)兩種不同的建交連線方式，並使用 MCNC 做為實驗之 benchmark。另外，SoC 
mapping 到 NoC 的部份，我們使用 CosiNoc[41]及 Orion[42]來進行實驗模擬。 
 
 (2.4.1) 無向圖 (Bi- or Non- Directive Graph) 
實驗中使用者自行定義 Repair Threshold 來決定所要達到之 resilience 程度，Repair 
Threshold 越大，所能找到的 resilience path 越多，但同時所需之執行時間也越長。由於我們
的演算法是將一個交連線的Repair Ratio 提高到 Threshold 或直到無法找到新的 Ring才開始
找提高其他交連線。 
 表九是經由演算法提高 interconnect 的 repair ratio 時，當 Repair Threshold 為 5 時之各
benchmark 中交連線屬於不同 repair ratio 範圍內的 interconnect 個數，可以看出 repair ratio
比較表，其中各個 Table 中的紅色框框為該 Table 中預期達到之 Repair Threshold。 
Routing Logic 
1 
2 
m 
1 
n 
2 
Crossbar 
Input 
Port 
Output 
Port 
  58 
hp 
#Edge 0 0 2 38 111 8 13 15 7 
411 3 
Fault 
Cover
age 
0% 0% 
1.03
% 
20.62
% 
77.84
% 
81.96
% 
88.66
% 
96.39
% 
100
% 
ac3 
#Edge 0 113 211 9 9 23 17 21 13 
445 0 
Fault 
Cover
age 
0% 
27.16
% 
77.88
% 
80.85
% 
82.21
% 
87.74
% 
91.83
% 
96.88
% 
100
% 
ami3
3 
#Edge 0 0 27 182 74 18 15 14 24 
912 2 
Fault 
Cover
age 
0% 0% 
7.63
% 
59.04
% 
79.94
% 
85.03
% 
89.27
% 
93.22
% 
100
% 
ami4
9 
#Edge 0 118 212 25 12 32 34 17 33 
371 0 
Fault 
Cover
age 
0% 
24.43
% 
68.32
% 
73.50
% 
75.98
% 
82.61
% 
89.65
% 
92.75
% 
100
% 
Avg. 
0 
0.00
% 
41.17 
8.60
% 
78.83 
27.93
% 
69.67 
52.88
% 
72.67 
80.80
% 
12.50 
85.47
% 
14.67 
90.43
% 
13.33 
95.07
% 
16.50 
100
% 
546.6
7 
1.83 
  
 
圖四十三(a)、Peak histgram is on RRT (RR Threshold) in Edge Distribution vs Repair Ratio for 
MCNC benchmarks. 
  60 
(a)                                (b) 
  
(c)                               (d) 
 
(e) 
圖四十三(c)、 Repair Ratio Distribution for each benchmark circuit. (表九). 
圖四十三(表九)、 (a)、Peak histgram is on RRT (RR Threshold) in Edge Distribution vs Repair 
Ratio for MCNC benchmarks, (b). Repair Ratio Distribution for hp benchmark circuit under 
every RRT, Summary of (a)-(g) is in (h), (c)Repair Ratio Distribution for each benchmark 
circuit..  
 
表十為不計硬體代價的情況下，盡量使所有交連線都能達到要求之Repair Threshold 
(RRT) 時額外增加的震盪環，其中apte、xerox、hp、ami33所額外搜尋增加的震盪環都比
原先增加了很多，而ac3和ami49由於結構上的關係，兩個結果並無差別，仍無法達到RRT
的要求。 
表十、 100% RR ≧ RRT vs #Added Rings 
Name 
RRT= 1 RRT = 2 RRT = 3 RRT = 4 RRT = 5 
#Edge 
RR < 
RRT 
#Add
ed 
Ring 
#Edge 
RR < 
RRT 
#Add
ed 
Ring 
#Edge 
RR < 
RRT 
#Add
ed 
Ring 
#Edge 
RR < 
RRT 
#Add
ed 
Ring 
#Edge 
RR < 
RRT 
#Add
ed 
Ring 
apte 0 0 0 0 0 0 0 10 0 83 
xerox 0 0 0 0 0 0 0 16 0 131 
  62 
hp 
#Edge 0 33 0 13 0 28 28 8 13 
296 0 
Fault 
Tolera
nt 
0% 
17.01
% 
17.01
% 
23.71
% 
23.71
% 
38.14
% 
52.58
% 
56.70
% 
63.40
% 
ac3 
#Edge 0 29 0 32 0 72 86 59 20 
742 0 
Fault 
Tolera
nt 
0% 
6.97
% 
6.97
% 
14.66
% 
14.66
% 
31.97
% 
52.64
% 
66.83
% 
71.63
% 
ami3
3 
#Edge 0 59 0 19 0 43 50 66 41 
512 0 
Fault 
Tolera
nt 
0% 
16.67
% 
16.67
% 
22.03
% 
22.03
% 
34.18
% 
48.31
% 
66.95
% 
78.53
% 
ami4
9 
#Edge 0 31 0 20 0 70 61 65 65 
464 0 
Fault 
Tolera
nt 
0% 
6.42
% 
6.42
% 
10.56
% 
10.56
% 
25.05
% 
37.68
% 
51.14
% 
64.60
% 
Avg. 0.00 38.50 0.00 15.33 0.00 40.50 44.33 42.50 55.50 
481.0
0 
0.00 
 
(b) Resilience Ratio (RZT =2) 
Name 
RZ = 
1 
RZ = 
2 
RZ = 
3 
RZ = 
4 
RZ = 
5 
5< 
RZ 
≦10 
10< 
RZ≦ 
20 
20< 
RZ 
≦50 
50 < 
RZ 
Max 
RZ 
#Add
ed 
rings 
to MR 
apte 
#Edge 0 23 0 7 0 26 10 18 29 
408 0 
Fault 
Tolera
nt 
0% 
16.91
% 
16.91
% 
22.06
% 
22.06
% 
41.18
% 
48.53
% 
61.76
% 
83.09
% 
xero
x 
#Edge 0 28 0 9 0 15 37 40 195 
1448 0 
Fault 
Tolera
nt 
0% 
7.87
% 
7.87
% 
10.39
% 
10.39
% 
14.61
% 
25.00
% 
36.24
% 
91.01
% 
hp 
#Edge 0 13 0 17 0 33 35 50 25 
696 0 
Fault 
Tolera
nt 
0% 
6.70
% 
6.70
% 
15.46
% 
15.46
% 
32.47
% 
50.52
% 
76.29
% 
89.18
% 
  64 
ami3
3 
#Edge 5 24 4 13 2 12 34 52 178 
2081 0 
Fault 
Tolera
nt 
1.41
% 
8.19
% 
9.32
% 
12.99
% 
13.56
% 
16.95
% 
26.55
% 
41.24
% 
91.53
% 
ami4
9 
#Edge 0 28 2 20 2 51 73 100 131 
1950 0 
Fault 
Tolera
nt 
0% 
5.80
% 
6.21
% 
10.35
% 
10.77
% 
21.33
% 
36.44
% 
57.14
% 
84.27
% 
Avg. 1.00 18.50 1.33 12.50 1.00 34.83 44.33 61.00 
108.6
7 
1816.
83 
0.00 
 
 (d) Resilience Ratio (RZT =4) 
Name 
RZ = 
1 
RZ = 
2 
RZ = 
3 
RZ = 
4 
RZ = 
5 
5< 
RZ 
≦10 
10< 
RZ≦ 
20 
20< 
RZ 
≦50 
50 < 
RZ 
Max 
RZ 
#Add
ed 
rings 
to MR 
apte 
#Edge 1 3 0 1 0 6 8 44 72 
1852 1 
Fault 
Tolera
nt 
0.74
% 
2.94
% 
2.94
% 
3.68
% 
3.68
% 
8.09
% 
13.97
% 
46.32
% 
99.26
% 
xero
x 
#Edge 0 5 0 2 0 5 7 37 299 
3602 1 
Fault 
Tolera
nt 
0% 
1.40
% 
1.40
% 
1.97
% 
1.97
% 
3.37
% 
5.34
% 
15.73
% 
99.72
% 
hp 
#Edge 1 1 0 4 0 11 23 41 109 
2344 1 
Fault 
Tolera
nt 
0.52
% 
1.03
% 
1.03
% 
3.09
% 
3.09
% 
8.76
% 
20.62
% 
41.75
% 
97.94
% 
ac3 
#Edge 0 30 0 28 0 83 90 60 27 
2048 0 
Fault 
Tolera
nt 
0% 
7.21
% 
7.21
% 
13.94
% 
13.94
% 
33.65
% 
55.53
% 
69.95
% 
76.44
% 
ami3
3 
#Edge 0 8 3 4 5 20 29 38 236 
4443 2 
Fault 
Tolera
nt 
0% 
2.26
% 
3.11
% 
4.24
% 
5.65
% 
11.30
% 
19.49
% 
30.23
% 
96.89
% 
  66 
Avg. 0.17 11.50 0.33 11.17 0.50 32.33 38.67 47.33 
148.6
7 
3009.
17 
1.83 
 
圖四十四(a)(1)為 Repair Threshold 與#Edge 的關係圖，而圖四十四(a)(2)則是 Resilience 
Threshold 與#Edge 的關係圖，在圖四十四(a)(1)中可以很明顯得看到，當 Repair Threshold
越大時，折線圖的最大值會落在 RR 等於 RRT 的地方；而圖四十四(a)(2)中每條 Resilience 
Ratio 折線圖的趨勢都差不多，無法像圖四十四(a)(1)中找到其規律性；其主要原因是
Resilience Path 是透過 Repair Path 間接找到的，因此 Resilience Path 是建構在 Repair Path 的
架構下所產生的，且其結果受到 benchmark 架構的影響甚劇，因此較難在其中找出 Repair 
Ratio 與 Resilience Ratio 的相關性，但是卻可以在表十一中看到 Resilience Threshold 對於
Resilience Ratio 的影響，也就是說，Repair Threshold 越高時，Resilience Ratio 越高。 
 
(1) Repair Ratio                      (2) Resilience Ratio 
圖四十四(a)、Average Histogram of Edge Distribution under (1) RRT, (2) RZT. 
 
 
(1)                                 (2) 
 
(3)                                 (4) 
  68 
 
(5) only for mLCS       (6) FT vs Resilience Threshold for both mLCS+EIRG 
圖四十四(c)、Fault Tolerence vs Repair/Resilience Threshold between only for mLCS and 
mLCS+EIRG,  (1) RR=1 (same as IORD, a special case of RR=1) and (2) RZT=5 (Individual 
Comparison); (3) Summary of RRT, (4) Summary of RZT (Summary Comparison); 
(5)#UnRisilience Edges in only mLCS, (6) both mLCS+EIRG (Comparison between Only mLCS 
and Both mLCS+EIRG). 
 
 
  
  
  70 
nets D) 
#UR % #UR % #UR % #UR % #UR % #UR % 
apte 136 76 
56.8
8 
23 16.9
1 
11 8.09 1 0.74 1 0.74 
0 0 
xero
x 
356 174 
48.8
8 
32 8.99 
14 3.93 1 0.28 0 0 
- - 
hp 194 114 
58.7
6 
21 10.8
2 
13 6.70 4 2.06 2 1.03 
0 0 
ac3 416 173 
41.5
9 
100 24.0
4 
96 
23.0
8 
98 
23.5
6 
98 
23.5
6 
0 0 
ami3
3 
354 196 
55.3
7 
47 13.2
8 
30 8.47 11 3.11 9 2.54 
0 0 
ami4
9 
483 281 
58.1
8 
89 18.4
3 
76 
15.7
3 
89 
18.4
3 
84 
17.3
9 
0 0 
Avg. 
323.1
7 
169.
00 
52.2
9 
52.0
0 
16.0
9 
40.0
0 
12.3
8 
34.0
0 
10.5
2 
32.3
3 
10.0
1 
0 0 
表十二、(b) No added ring 
Nam
e 
Numb
er of 
nets 
RZT=1(IOR
D) 
RZT = 2 
RZT = 3 RZT = 4 RZT = 5 
EIRG  
#UR % #UR % #UR % #UR % #UR % #UR % 
apte 136 76 
56.8
8 
23 16.9
1 
11 8.09 1 0.74 1 0.74 
0 0 
xero
x 
356 174 
48.8
8 
32 8.99 
14 3.93 1 0.28 0 0 
- - 
hp 194 114 
58.7
6 
21 10.8
2 
13 6.70 4 2.06 2 1.03 
0 0 
ac3 416 173 
41.5
9 
100 24.0
4 
96 
23.0
8 
98 
23.5
6 
98 
23.5
6 
0 0 
ami3
3 
354 196 
55.3
7 
47 13.2
8 
30 8.47 11 3.11 9 2.54 
0 0 
ami4
9 
483 281 
58.1
8 
89 18.4
3 
76 
15.7
3 
89 
18.4
3 
84 
17.3
9 
0 0 
Avg. 
323.1
7 
169.
00 
52.2
9 
52.0
0 
16.0
9 
40.0
0 
12.3
8 
34.0
0 
10.5
2 
32.3
3 
10.0
1 
0 0 
 
  72 
線的reliability較高而導致被過多faulty interconnect用來做resilience paths的情形。 
為了實現SoC中faulty interconnect的補償，我們提出了一個規則性(Regular)拓樸的NoC架
構，並使用CosiNoc及Orion證明了此架構之可行性，但是在此架構下的交連線較多，從而
導致power與交連線長度較高，因此，可將power與交連線長度視為交連線補償特性之代價
(tradeoff and overhead) 。 
表十四、 ASIC Tile Topology 
Name 
Area 
(mm
2
) 
Router Link 
Total 
Power 
(mW) 
# 
Route
r 
Pd 
(mW) 
Ps 
(mW) 
# 
Link 
Total 
Length 
(mm) 
Power 
(mW) 
apte 60.18 9 
3.78E
-8 
8.71E
-9 
40 40.33 6.32 6.32 
xerox 26.48 11 
6.50E
-8 
3.86E
-8 
61 58.44 9.16 9.16 
hp 14.20 12 
7.10E
-8 
2.05E
-8 
63 68.01 10.66 10.66 
ac3 
166.7
1 
28 
1.76E
-7 
5.38E
-8 
156 356.70 55.89 55.89 
ami33 1.39 34 
1.62E
-7 
4.02E
-8 
150 40.49 6.34 6.34 
ami49 49.27 50 
3.82E
-7 
1.17E
-7 
299 641.27 100.47 100.47 
Avg. 53.04 24.00 
8.75E
-8 
1.49E
-7 
128.
17 
200.87 31.47 31.47 
表十五、 CosiNoC vs ASIC Tile NoC. 
 Topology with CosiNoc Our ASIC Tile Topology 
Name 
Area 
(mm
2
) 
# 
Route
r 
Wire 
Length 
(mm) 
Total 
Power 
(mW) 
Area 
(mm
2
) 
# 
Route
r 
Wire 
Length 
(mm) 
Total 
Power 
(mW) 
apte 
49.7
4 
6 12.51 18.14 
60.1
8 
9 336.13 52.66 
xerox 
20.1
8 
8 12.28 20.44 
26.4
8 
11 135.70 21.26 
hp 
10.0
9 
29 112.94 68.56 
14.2
0 
12 440.50 69.02 
ac3 141. 21 83.14 69.44 166. 28 790.67 123.88 
  74 
 
圖四十五(c)、 General router architecture Rm × n. 
 
給定一個通訊軌跡圖(Communication Trace Graph, CTG)與路由器(Router)的輸入埠&輸
出埠(Input & Output)個數的限制，經由 3D-NoC-FT 產生一個客製化網路晶片(custom NoC)
的系統層級帄面規劃(System-Level Floorplan)。我們使用四個 Phase 完成建構 3D -NoC-FT，
Phase I、Phase II 和 Phase III 產生有容錯性且無死結的 3D NoC 拓樸，Phase IV 同時考慮處
理元件(PE)和路由器(router)的面積與形狀以進行帄面規劃(Co-Floorplanning)。我們將問題
的 input 和 output 描述如下。 
Input: 
1. Communication Trace Graph (CTG)( 圖四十五(b)): 定義一個 CTG = (VG, EG)為
block diagram 相對應的 graph，每一個 v   VG對應為 block diagram 中的 block，每一
個 e  EG 對應於每一個 block 與 block 之間的有向連線，其上權重 w(e) 代表對於該
edge 的傳輸之需求。ηG 為 edgemap，ηG(e) = (u, v), u, v   VG , e   EG。 
2. 路由器輸入/輸出埠個數限制(ri and ro): 如圖四十五(c)，每一個路由器有多個輸入
/輸出埠，定義一個具有 m 個輸入埠與 n 個輸出埠的路由器為 Rmn(圖四十五(c))與 RB 
mn (錯誤! 找不到參照來源。 )。輸入埠個數不可超過 ri ，輸出埠個數不可超過 ro。 
3. 使用者自行輸入所需的層(tier)數量，以決定二維的 ASIC 設計將會被分割幾層。 
Output:  
網路拓樸的生成由 Phase I、Phase II 和 Phase III 產生有容錯性且無死結的三維網路晶
片(3D NoC)拓樸，Phase IV 拓樸同時考慮處理元件(PE)和路由器(router)的面積以進行
帄面規劃(Co-Floorplanning)。 
(4-1.1)  符號與定義 
定義 4.2.1 我們將Rmn的輸入埠與輸出埠對應為RBmn圖中源端(source node)與目的端節
點(target node)，由於每一個輸入埠皆可透過橫桿(crossbar)，將資料由輸入埠傳送至輸出埠，
使得每一個輸入埠與每一個輸出埠間，皆形成一個資料傳輸的方向。依據這個資料傳輸的
方向，我們增加一個有向線段於每一對源端與目的端節點之間，而形成一個mn的全雙分
圖。 
RBmn = (SR, TR, AR)，SR與TR分別為對應於輸入埠與輸出埠的頂點集合，AR為有向線段之
集合。換言之，任何設定的Rmn皆可對應於一個RBmn。 
定義 4.2.2 通訊雙分圖(Communication Trace Bipartite Graph, CTB)=(SB, TB, AB)，將通
  76 
 
圖四十七、Flow chart of 3D-NoC-FT 
 
(4-2)容錯及無死結特性之客製化三維網路晶片拓樸合成方法 : 拓樸產生演算法 - 
3D-NoC-FT                                             
目標是發展一個三維網路晶片(3D NoC)的拓樸合成方法，以利於減少功率的消耗、減
少整體線長、減少矽穿孔(TSV)數目，以及能夠容錯(Fault Tolerant)與免於死結(Deadlock 
Free)。在本計畫中，我們使用四層(Tier)的三維網路晶片(3D NoC)並且用一個例子解釋我們
合成的方法。為了合成一個具有連線(Link)容錯能力的三維晶片拓樸，我們所提出的演算法
流程圖如圖四十七所示。網路晶片拓樸生成(NoC Topology Generation)演算法包括 Phase I: 
Transformation from 2D to 3D、Phase II: Topology Construction、Phase III: Deadlock Recovery 
for Deadlock Free、Phase IV: Wire-Length Driven Floorplanning，並且考量處理元件(PE)及路
由器(router)形狀與大小的系統層級帄面規劃(System-Level Floorplanning)。 
 
(4-2.1) Phase I: Transformation from 2D to 3D 
大部分的Benchmark被設計在二維網路晶片(2D NoC)上。為了三維晶片模擬上的方便，
我們第一個Phase (Phase I)必頇做轉換將二維轉換到三維的網路晶片(NoC)環境，以利於模
擬實驗。Phase I分割成三個步驟 : (1) CTG to CTB; (2) Min-cut for CTB partition; and (3) Layer 
Assignment (or Tier Assignment)。 
步驟 1 的目的是將CTG轉換成CTB，以利於映射到每一顆路由器(Router)的雙分圖，其
餘兩步驟的目的是利用層(Tier)排序找出較少的矽穿孔(TSVs)個數。步驟(1) (CTG to CTB)，
定義在定義 3.2.2，圖四十五可以看到CTG轉換到CTB的過程。 
 
 
 
 
 
  78 
Conn (Tier Assignment) = #DG(Tier Assignment)  #IE(Tier Assignment) 
並且計算出各群(Partition)之間的連接成本函數 
 
 
(12) 
 
 
(3) 將各群(Partition)之間的連接成本函數作加總，稱為連接總成本函數。 
 (13) 
(4) 找出最大連接總成本函數的群(Partition)，標記為PartitionM。 
(5) 剩下的Partition與PartitionM的連接成本函數，再按照連接成本函數高低作排序。 
(6) 最高和次高連接成本函數的群(Partition)，分別標記為PartitionM+1和PartitionM-1。此時
的順序為{PartitionM+1, PartitionM, PartitionM-1}。 
(7) 再來找出第三高的連接成本函數群(Partition)，此時的群(Partition)分別和最兩側的
Partition M+1與Partition M-1比較連接成本函數，若與左側PartitionM+1的連接成本函數比
較高的話，就將此tier標記為PartitionM+2，順序就為{ PartitionM+2, PartitionM+1, 
PartitionM, PartitionM-1}；若與右側PartitionM-1的連接連接成本函數比較高的話，就將
此群(Partition)標記為PartitionM-2，順序就為{PartitionM+1, PartitionM, PartitionM-1, 
PartitionM-2}，之後依此類推，做到排完整體的群(Partition)為止。 
(8) 最後，這些群(Partition)的順序就是{PartitionM+n,…, PartitionM+1, PartitionM, 
PartitionM-1, …, and PartitionM-n}，也就是代表{TierK-1, TierK-2,…, and Tier0}。 
 
另外，我們以4層(Tier)三維網路晶片(3D NoC)作為說明。 
 
(1) 計算每一群(Partition)之間的連接相關性個數(#DG)和link的個數(#IE)，分別整理在表十
六(a)和表十六(b)。 
(2) 計算出各群(Partition)之間的連接成本函數，整理在表十六(c)中。 
(3) 將各群(Partition)之間的連接成本函數作加總，稱為連接總成本函數，整理在表十六(d)
中。 
(4) 從表十六(d)上找出最大連接總成本函數的群(Partition)，找出最大的是Partition1。 
(5) 從表十六(c)比較剩下的Partition與Partition1的連接成本函數，可以分別找到Partition3和
Partition0。 
(6) 此時的順序就為{Partition0, Partition1, Partition3}。 
(7) 剩下的Partition2分別和兩旁的Partition0與Partition3做比較，從表十六 (c)可以看到
Partition2對Partition0的成本函數為1，Partition2對Partition3為成本函數為0，我們發現
Partition2與Partition0有比較大的成本函數，因此我們將Partition2排在Partition0的旁邊。 
(8) 最後，順序為{Partition2, Partition0, Partition1, Partition3}，也就是代表是{Tier3, Tier2, Tier1, 
Tier0}。 
 
表十六(a)、 每一群(Partition)之間的連接相關性個數(#DG) 
 #DGP0 #DGP1 #DGP2 #DGP3 
#DGP0 0 1 1 0 
#DGP1 1 0 0 1 
  80 
13.  
14.  
15.  
16.  
17.  
18. 
19.  
Maxtier Max(Sequence [i]’s and list.back’s Cost(Tier Assignment)), Sequence 
[i]’s and list.front’s Cost(Tier Assignment)) 
if Maxtier  list.back then 
list.push_back(Sequence [i]) 
else 
list.push_front(Sequence [i]) 
end for 
圖四十九、Pseudo code of layer (tier) assignment. 
 
 
(a) 
 
(b) 
 
圖五十、 (a) max-flow min-cut. (b) The result of Phase I by using tier assignment for CTB 
partition. 
 
Algorithm 3: NoC Bin-Packing 
Input: Traffic flow’s Bandwidth BWi. 
Output: # Routers 
  82 
路由器(Router)的個數，d為每個router間inter-router link的個數。 
(2) 採用Floyd-Warshall演算法[88] 當作我們的路徑選擇演算法，決定路由器(router)封
包傳送方向或路徑。 
圖五十三用一個例子配合Eq. (9) 以展現建立De Bruijn Digraphs (DBDG)的過程。圖五
十三(a)說明 當 i=0時， j=2×(8-1-0)+0(mod8)=6 和 j=2×(8-1-0)+1(mod8)=7。然而圖五十三
(i)說明，當 i=2 和 i=5時，De Bruijn Digraphs (DBDG)演算法會發生self-loop的情況，圖五
十三(j)說明我們提出交換兩個連線(link)的想法，去避免產生self-loop的問題。 
Algorithm 4: De Bruijn Digraphs (DBDG) 
Input: # Routers 
Output: Inter-Router Links 
1.   
2.   
3.   
4.   
5.   
6.   
7.   
8.   
9.   
10.   
d router #port 
n #router 
irouter source number 
r0 ≤ r ≤ d-1 
jrouter target number 
for i=1 to n step 1 
 for r=0 to d-1 step 1 
j  (d*(n-1-i)+r)%n 
end for  
end for 
圖五十二、Pseudo code of de Bruijn Graph. 
 
 
(a) 
 
(b) 
 
(c) 
 
(d) 
 
(e) 
 
(f) 
 
(g) 
 
(h) 
  84 
 
 
圖五十五、無死結的詳細步驟 
 
Lower Limit:     
                               Eq.(14) (Source:[101] ) 
 
 
- : 全部緩衝器的大小(Total buffer size(either  or )) 
- ,( ): 全部傳送緩衝器的大小(Total size of the Transmission buffer (at node )) 
- ,( ): 全部重傳緩衝器的大小(Total size of the Retransmission buffer (at node )) 
- : 困在死結上的節點各術(Number of nodes involved in the deadlock) 
- : 一個封包中有幾個 flits(Number of flits per packet(message)) 
- : 一個傳送緩衝器含不同封包的最大個數(Maximum number of different packets in a  
transmission buffer at node (= ) 
 
(4-2.4) Phase IV: Wirelength-Aware Floorplanning 
在這個 Phase 我們使用之快速退火模擬演算法錯誤! 找不到參照來源。，為了在面積與
線長(wire length, WL)間取得帄衡，設定帄面規劃(floorplan, fp)的成本函數 Cost(fp)，如 Eq. 
(15)所示，由此取得較短的繞線長度且面積較小的帄面規劃(floorplan)，當面積減少的時候，
單位面積所能容納的處理元件(PE)個數就能夠提高。 
 
Cost(fp) = 0.5Area(fp) + 0.5WL(fp) Eq.(15)  
 
這裡的 fp 為 floorplan，Area(fp)和 WL(fp)分別為帄面規劃(floorplan)估計的面積和線長。 
(4-3)  實驗環境與設定 
本實驗環境為 Ubuntu 8.0.4，CPU 為 Intel(R) Xeon(R) 2.00 GHz，記憶體大小為 3 GB，
測詴電路使用系統單晶片特殊應用設計[97] :Picture-in-Picture (PIP), Multi-Window Display 
(MWD), Video Object Plane Decoder(VOPD), and MPEG-4 decoder; and multimedia 
applications [111] :H.263 video encoder, H.263 video decoder, mp3 audio encoder, and mp3 
audio decoder。 
  86 
(mm2) (mm) (mW) (ns) (packet/s) (mm2) (mm) (mW) (ns) (packet/s) 
G1 2.54 3.88 9 0.0597 40 12.0445 10.38 5.78 3114.73 1.05 3.00 5 0.0351 26 6.57 7.96 2.22 3446.30 
G2 2.93 4.50 16 0.1276 78 19.0877 12.09 6.22 4341.53 1.06 3.00 9 0.0568 42 8.09 8.84 2.22 5054.29 
G3 2.76 4.17 16 0.1276 78 21.5813 13.31 6.00 4497.75 1.27 3.00 10 0.0592 44 8.34 8.77 2.22 4767.79 
G4 2.38 4.00 16 0.1276 78 21.6795 12.24 5.60 5223.21 1.17 4.00 11 0.0680 50 8.97 8.85 2.67 5011.14 
G5 4.68 4.13 16 0.1276 78 24.0056 13.45 5.97 5658.01 2.27 3.00 12 0.0762 56 13.12 10.74 2.22 7068.06 
G6 8.03 4.57 16 0.1276 78 34.8717 17.14 6.31 6300.00 2.58 4.00 20 0.1132 84 23.88 11.11 2.67 6893.19 
G7 13.52 5.37 36 0.3332 190 114.641 33.52 7.37 4764.49 4.93 6.00 62 0.3444 250 68.93 20.67 8.00 21002.21 
G8 10.53 5.40 25 0.2187 128 66.0869 23.82 7.22 3738.06 4.54 6.00 48 0.2889 212 55.59 17.65 8.00 17797.55 
G9 5.21 5.38 25 0.2187 128 41.8184 10.01 7.41 3098.00 1.46 5.00 39 0.2303 168 34.84 14.26 6.67 14976.04 
G10 2.50 4.54 16 0.1276 78 19.2897 13.33 6.30 2784.83 0.88 5.00 36 0.1958 144 26.60 12.08 6.67 12751.32 
G11 6.58 5.43 36 0.3332 190 80.6238 27.96 8.46 25280.90 2.36 7.00 69 0.4156 310 68.92 21.36 9.33 29439.25 
Average 5.60 4.67 20.64 0.18 104.00 41.43 17.02 6.60 6254.68 2.14 4.45 29.18 0.17 126.00 29.44 12.94 4.81 11655.19 
Normalization 2.62 1.05 0.71 1.02 0.83 1.41 1.32 1.37 0.54 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 
 
實驗結果顯示在表十八，從面積方面，由於 3D-NoC-FT 是使用 3D 的架構，因此比起
2D Mesh 在面積方面節省了 2.62X；跳躍數越多將導致越多的延遲而降低傳送之效能。就跳
躍數(#hops)而言，3D-NoC-FT 比 2D Mesh 減少了 5%；在路由器個數(#Router)方面，雖然
3D-NoC-FT 的個數是比較多的，多了 29%，但是在整體的路由器面積(AR)少了 2%，可得知
路由器的個數多少與整體面積的大小是沒有絕對的關係；在連線數(#Link)方面，雖然
3D-NoC-FT 的數量也是比較多的，多了 27%，但是整體的連線長度(WL)少了 41%;在功耗
(Power)方面，由於路由器的面積與整體的線長的優勢，3D-NoC-FT 的功耗(Power)節省了
32%；在延遲(Latency)方面，比 3D-NoC-FT慢了 37%；在吞吐量(Throughput)方面，3D-NoC-FT
改進了 46%。從這些實驗結果顯示 3D-NoC-FT 比起 2D Mesh，不管在整體面積、整體線長、
整體功耗、延遲和吞吐量，都具有較好的結果。 
 
(4-3.2-1-B) 和 2D ASIC 中 2D COSI 與 2D CoNoC 比較 (表十九、表二十、表二十(new) 、
表二十一(new)) 
在客製化的三維網路晶片(3D ASIC NoC)的實驗結果，3D-NoC-FT 和先前的兩個客製
化網路晶片(ASIC NoC)作比較，分別是 2D CosiNoC (表十九、表二十)[104] [87] 和
3D-SAL-FP [122] 。 
表十九與表二十中，若跟 2D CosiNoC 比的話，在面積方面，2D CosiNoC 帄均多了
2.56X；在線長功耗方面，3D-NoC-FT 帄均節省了 39% ;整體功耗方面，2D CosiNoC 帄均
多了 1.81X，這也說明出即使是針對 2D 的 ASIC NoC，3D-NoC-FT 即使加入容錯合成技術，
還是優於二維架構的客製化網路晶片(ASIC NoC)。 
 
表十九、Wire-Length power consumption comparison between 2D CosiNoC [104] and 
3D-NoC-FT (#tiers=4, #router port limit=4, 70nm). 
Graph 
WL Power (mW) 
2D CosiNoC 3D NoC FT(#tier=4) 
  88 
G2 2.91 2.17 7 0.014 19 15.69 8.92 4.53  5965.53  1.15  2 8 0.036  34 7.52  8.30  2.81 5592.38  
G3 2.71 2.17 7 0.013 18 16.46 8.9 4.42  6111.36  1.07  2 8 0.041  36 7.50  7.55  2.56 5721.55  
G4 2.32 2 8 0.012 21 16.36 8.41 4.42  6625.14  1.11  2 9 0.038  37 7.34  7.03  2.55 6487.03  
G5 4.67 2.13 8 0.017 24 26.03 12.59 4.42  7628.84  2.28  2 10 0.042  41 11.47  8.20  2.59 7668.71  
G6 8.03 2.43 9 0.019 25 34.01 15.8 4.48  7028.11  2.56  2 16 0.059  57 21.52  8.67  2.78 10095.86  
G7 12.91 3.69 26 0.074 81 97.52 58.5 6.82  17155.43  4.86  3 59 0.302  218 61.40  22.06  3.05 34043.40  
G8 10.25 2.98 14 0.058 56 52.96 39.78 5.35  16822.43  4.45  3 39 0.263  192 50.31  17.97  3.15 28748.25  
G9 5.17 2.5 10 0.037 42 56.6 30.12 5.04  15166.53  1.39  2 30 0.203  147 31.61  14.38  2.67 22713.51  
G10 2.51 2.81 6 0.028 29 19.52 18.51 4.44  6076.98  0.88  3 28 0.168  124 23.45  12.42  5.99 18764.89  
G11 6.3 4.74 22 0.079 78 66.28 50.84 5.31  40254.24  2.34  3 65 0.444  308 65.88  21.47  2.90 53379.19  
Average 5.48  2.69  11.18  0.03  37.00  37.20  23.40  4.88  12083.55  2.11  2.36  25.27  0.15  110.55  26.80  12.18  3.07 17907.31  
Normalization 2.59  1.14  0.44  0.22  0.33  1.39  1.92  1.59 0.67 1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  
 
表二十一(new)、 Comparison between 2D CoNoC [87] and new 3D-NoC-FT (#tiers=4, 
70nm). 
Graph 
2D CoNoC [104]  3D NoC FT(#tier=4) 
Size  
(mm2) 
#Hops 
Network Performance 
Size  
(mm2) 
#Hops 
Network Performance 
#Router 
AR  
(mm2) 
#Link 
WL 
(mm) 
Power 
(mW) 
Latency 
(ns) 
Throughput 
(packet/s) 
#Router 
AR  
(mm2) 
#Link 
WL 
(mm) 
Power 
(mW) 
Latency 
(ns) 
Throughput 
(packet/s) 
G1 2.70  2  6 0.007 14 6.167 4.79 4.00  4498.88  1.16  2 6 0.022  22 6.79  5.93  2.71 3765.69  
G2 2.93  2  7 0.014 21 6.381 7.35 4.11  6567.75  1.15  2 8 0.036  34 7.52  8.30  2.81 5592.38  
G3 2.82  2  9 0.013 23 8.293 7.67 4.20  6420.93  1.07  2 8 0.041  36 7.50  7.55  2.56 5721.55  
G4 2.44  2  8 0.012 21 7.24 6.89 4.00  7312.50  1.11  2 9 0.038  37 7.34  7.03  2.55 6487.03  
G5 4.54  2  8 0.015 24 11.264 8.95 4.01  8418.56  2.28  2 10 0.042  41 11.47  8.20  2.59 7668.71  
G6 8.26  2  9 0.015 24 15.773 10.23 4.16  7572.12  2.56  2 16 0.059  57 21.52  8.67  2.78 10095.86  
G7 13.74  2  24 0.054 81 49.708 35.89 4.44  7941.18  4.86  3 59 0.302  218 61.40  22.06  3.05 34043.40  
G8 10.83  2  15 0.041 58 33.276 26.31 4.46  6076.98  4.45  3 39 0.263  192 50.31  17.97  3.15 28748.25  
G9 4.98  2  12 0.032 46 20.278 19.58 4.47  5165.43  1.39  2 30 0.203  147 31.61  14.38  2.67 22713.51  
G10 2.50  2  6 0.024 32 12.48 14.45 4.51  3927.93  0.88  3 28 0.168  124 23.45  12.42  5.99 18764.89  
G11 6.29  3  12 0.073 74 50.43 46.8 7.75  51593.05  2.34  3 65 0.444  308 65.88  21.47  2.90 53379.19  
Average 5.64  2.20  10.55  0.03  38.00  20.12  17.17  4.56  10499.57  2.11  2.36  25.27  0.15  110.55  26.80  12.18  3.07 17907.31  
Normalization 2.67  0.93  0.42  0.19  0.34  0.75  1.41  1.49 0.59  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  
 
 
(4-3.2-2) 和 3D ASIC NoC 中 3D-SAL-FP 比較 (表二十二、表二十三; 表二十二(new)、表
二十三(new)) 
在客製化的三維網路晶片(3D ASIC NoC)的實驗結果，3D-NoC-FT 除了和先前的 2D 兩
個客製化網路晶片(ASIC NoC)作比較，分別是 2D CosiNoC (表十九、表二十)[104] [87]以
外，分別 和 3D-SAL-FP [122] 與我們自己去除容錯功能之 3D NoC 以較(表二十三、表二十
三(new))。 
表二十一實驗結果顯示 3D-NoC-FT 在功耗方面，帄均比 3D-SAL-FP 省了 1.67X 的功
  90 
Router Link Total (ns) (packet/s) Router Link Total (ns) (packet/s) 
G1 38 4 42 3.2 6 - 53  1  54  2.7  6  1436.84  
G3 65 6 71 3.5 9 - 65  1  66  2.6  6  2258.00  
G6 72 9 81 5.1 9 - 56  4  60  2.8  6  4082.47  
G10 90 13 103 6.3 14 - 65  4  69  2.6  28  7119.98  
G11 346 79 425 6.4 40 - 395  11  405  6.4  28  20037.42  
Average 122.20  22.20  144.40  4.90  15.60  - 126.61  4.18  130.79  3.41  14.80  6986.94  
Normalization 0.97  5.31  1.10  1.44  1.05  - 1.00  1.00  1.00  1.00  1.00  1.00  
 
 
表二十三、Comparison between 3D-SAL-FP (#tiers=4, 45nm) [122] and 3D-NoC (#tiers=4, 
45nm). 
Graph 
3D-SAL-FP 3D NoC (#tier=4)    
Power(mW) Latency 
#TSVs 
Throughput 
(packet/s) 
Power(mW) Latency 
#TSVs 
Throughput 
(packet/s) Router Link Total (ns) Router Link Total (ns) 
G1 38 4 42 3.2 6 - 42.36 1.02 43.38 2.71 6 1205.22 
G3 65 6 71 3.5 9 - 51.34 1.10 52.44 2.50 6 1874.02 
G6 72 9 81 5.1 9 - 52.62 3.75 56.37 2.79 5 3413.79 
G10 90 13 103 6.3 14 - 54.90 3.84 58.74 2.64 32 6158.36 
G11 346 79 425 6.4 40 - 317.57 10.45 328.02 2.99 22 17891.75 
Average 122.20 22.20 144.40 4.90 15.60 - 103.76 4.03 107.79 2.73 14.20 6108.63 
Normalization 1.18 5.50 1.34 1.80 1.10 - 1.00 1.00 1.00 1.00 1.00 1.00 
 
 
 (4-3.2-3-A)  3D-NoC-FT 和 3D-SAL-FP 在相同的製程參數下比較  (表二十二、表二十二
(new)) 
 
在 Power 方面  
(1) 從 Router 的 Power 來看，由於我們在方法的 Phase II 的步驟 1 考慮 bin 的容量上
限為 B，PEi 的通訊頻寬假設為 BWi 。如果 BWi 大於 B 的話，就先將它做切割，切成{BWi,0, 
BWi,1, BWi,2,…, BWi,n}，其中每一個 BWi,n 都小於等於 B，讓整體 Router 的 Power 分散開來，
然而 3D-SAL-FP 做法中的 SAL 並沒有做有效的頻寬切割，導致頻寬量集中在相同的
Router，因此整體的 Router Power 比有作分散的 Router Power 還要多，從實驗結果可以看
到 3D-NoC-FT 可以比 3D-SAL-FP 中的 SAL 方法還要省電，帄均比 3D-SAL-FP 省了 1.48X 
(3D-SAL-FP 的 total router power=122.2/3D-NoC-FT 的 total router power=82.45)的 Power，
其中 3D-SAL-FP的Router Power佔了整體Power 84.6% (122.2/144.4)， 3D-NoC-FT的Router 
Power 佔了整體 Power 95%(82.45/86.63)。 
(2) 從 Link 的 Power 來看，線長會影響到整體 Power ，因此縮短線長的長度可以有效
地節省線長的 Power ，因此 3D-NoC-FT 在 Phase IV 使用了 floorplanning，同時考慮整體面
積和線長的因素，因此降低了整體線長的長度，也節省了整體線長的 Power ;然而
3D-SAL-FP 多考量了散熱的問題和線長的延遲時間做 floorplanning，因此並沒有針對線長
  92 
G11 346 79 425 6.4 40 - 395  11  405  6.4  28  20037.42  
Average 122.20  22.20  144.40  4.90  15.60  - 126.61  4.18  130.79  3.41  14.80  6986.94  
Normalization 0.97  5.31  1.10  1.44  1.05  - 1.00  1.00  1.00  1.00  1.00  1.00  
 
(4-3.2-3-B)  3D-NoC 和 3D-SAL-FP 在相同的製程參數下比較 (表二十三、表二十三(new)) 
 
在功率消耗(Power)方面 
(1) 單從 Router 的 Power 來看，由於我們在方法的 Phase II 的步驟 1 考慮 bin 的容量
上限為 B，PEi 的通訊頻寬假設為 BWi 。如果 BWi 大於 B 的話，就先將它做切割，切成{BWi,0, 
BWi,1, BWi,2,…, BWi,n}，其中每一個 BWi,n 都小於等於 B，讓整體 Router 的 Power 分散開來，
然而 3D-SAL-FP 做法中的 SAL 並沒有做有效的頻寬分割，導致頻寬量集中在相同的
Router，因此整體的 Router Power 比有作分散的 Router Power 還要多，從實驗結果可以看
到 3D-NoC 帄均比 3D-SAL-FP 省了 1.18X(3D-SAL-FP 的 total router power=122.2/3D-NoC
的 total router power=103.76)的 Power ，其中 3D-SAL-FP 的 Router Power 佔了整體 Power 
84.6% (122.2/144.4)，3D-NoC 的 Router Power 佔了整體 Power 96.2%(103.76/107.79)。 
(2) 單從 Link 的 Power 來看，線長會影響到整體 Power ，因此縮短線長的長度可以有
效地節省線長的 Power ，然而 3D-NoC 在 Phase IV 使用了 floorplanning，同時考慮整體面
積和線長的因素，因此降低了整體線長的長度，也節省了整體線長的 Power ，然而
3D-SAL-FP 多考量了散熱的問題和線長的延遲時間做 floorplanning，因此並沒有針對線長
做最佳化處理，導致 Link Power 3D-NoC 帄均比 3D-SAL-FP 省了省了 5.50X(22.2/4.03)，其
中 3D-SAL-FP 的 Link Power 佔了整體 Power 16.4%(22.2/144.4)，3D-NoC 的 Link Power 佔
了整體 Power 3.8%(4.03/107.79)。 
(3) 因此 3D-NoC 在整體 Power 方面，帄均比 3D-SAL-FP 省了 1.34X 的 Power 。 
 
在延遲(Latency)方面 
去除容錯的功能後，比 3D-SAL-FP 快了 1.8X(4.9/2.73)。 
 
在吞吐量(Throughput)方面 
因為 3D-SAL-FP 沒有數據，所以無從比較。 
 
在矽穿孔(TSVs)的個數方面 
去除容錯的功能後，3D-SAL-FP 比 3D-NoC 多了 1.1X(15.6/14.2=1.1)。 
 
表二十三、Comparison between 3D-SAL-FP (#tiers=4, 45nm) [122] and 3D-NoC (#tiers=4, 
45nm). 
Graph 
3D-SAL-FP 3D NoC (#tier=4)    
Power(mW) Latency 
#TSVs 
Throughput 
(packet/s) 
Power(mW) Latency 
#TSVs 
Throughput 
(packet/s) Router Link Total (ns) Router Link Total (ns) 
G1 38 4 42 3.2 6 - 42.36 1.02 43.38 2.71 6 1205.22 
G3 65 6 71 3.5 9 - 51.34 1.10 52.44 2.50 6 1874.02 
G6 72 9 81 5.1 9 - 52.62 3.75 56.37 2.79 5 3413.79 
G10 90 13 103 6.3 14 - 54.90 3.84 58.74 2.64 32 6158.36 
  94 
G3 2.71 2.17 7 0.013 18 16.46 8.9 4.42  6111.36  2.66108 3 10 0.0592 44 15.732 10.09 5.19 4766.95 
G4 2.32 2 8 0.012 21 16.36 8.41 4.42  6625.14  2.2773 4 11 0.067968 50 17.0643 10.20 6.16 5011.14 
G5 4.67 2.13 8 0.017 24 26.03 12.59 4.42  7628.84  4.46895 3 12 0.07616 56 24.867 12.70 5.73 7068.06 
G6 8.03 2.43 9 0.019 25 34.01 15.8 4.48  7028.11  7.64619 4 20 0.113152 84 53.2886 16.74 7.86 6896.07 
G7 12.91 3.69 26 0.074 81 97.52 58.5 6.82  17155.43  13.4662 6 62 0.344352 250 212.851 48.43 12.01 21030.62 
G8 10.25 2.98 14 0.058 56 52.96 39.78 5.35  16822.43  10.5651 6 48 0.288896 212 144.823 35.64 10.38 17812.96 
G9 5.17 2.5 10 0.037 42 56.6 30.12 5.04  15166.53  5.02482 5 39 0.230304 168 81.5917 22.95 8.48 14950.17 
G10 2.51 2.81 6 0.028 29 19.52 18.51 4.44  6076.98  2.56206 5 36 0.19584 144 58.2228 18.37 7.58 12753.04 
G11 6.3 4.74 22 0.079 78 66.28 50.84 5.31  40254.24  6.97351 7 69 0.415552 310 212.034 48.40 10.96 29381.10 
Average 5.48 2.69 11.18 0.03 37.00 37.20 23.40 4.88  12083.55  5.54 4.45 29.18 0.17 126.00 76.72 22.09 7.62 11651.71 
Normalization 0.99 0.60 0.38 0.19 0.29 0.48 1.06 0.64  1.04  1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 
 
 
表二十五、Comparison between 2D CosiNoC [104] and 3D-NoC (#tiers=1, #router port 
limit=4). 
Graph 
2D CosiNoC [104]  3D NoC (#tier=1) 
Size  
(mm2) 
#Hops 
Network Performance 
Size 
(mm2) 
#Hops 
Network Performance 
#Router 
AR  
(mm2) 
#Link 
WL 
(mm) 
Power 
(mW) 
Latency 
(ns) 
Throughput 
(packet/s) 
#Router AR(mm
2) #Link 
WL 
(mm) 
Power 
(mW) 
Latency 
(ns) 
Throughput 
(packet/s) 
G1 2.47 2 6 0.007 14 7.79 5.06 4.41  4084.41  2.42769 2 10 0.0192 23 7.85478 4.40  2.74  3764.12  
G2 2.91 2.17 7 0.014 19 15.69 8.92 4.53  5965.53  2.85941 2 13 0.023936 31 9.43036 4.39  2.66  5585.44  
G3 2.71 2.17 7 0.013 18 16.46 8.9 4.42  6111.36  2.64335 2 14 0.028928 34 10.6142 5.08  2.56  5691.40  
G4 2.32 2 8 0.012 21 16.36 8.41 4.42  6625.14  2.26541 2 15 0.027776 35 9.43068 4.07  2.51  6358.70  
G5 4.67 2.13 8 0.017 24 26.03 12.59 4.42  7628.84  4.43575 2 18 0.036608 43 15.823 5.91  2.82  7016.63  
G6 8.03 2.43 9 0.019 25 34.01 15.8 4.48  7028.11  7.65763 3 21 0.059424 60 32.2585 10.19  2.90  10069.16  
G7 12.91 3.69 26 0.074 81 97.52 58.5 6.82  17155.43  13.7104 2 68 0.24912 230 149.765 32.97  3.83  34165.83  
G8 10.25 2.98 14 0.058 56 52.96 39.78 5.35  16822.43  10.6688 3 56 0.21408 194 122.578 28.52  4.04  28742.51  
G9 5.17 2.5 10 0.037 42 56.6 30.12 5.04  15166.53  4.97606 2 43 0.16272 151 71.3807 19.16  3.26  22450.61  
G10 2.51 2.81 6 0.028 29 19.52 18.51 4.44  6076.98  2.49154 3 37 0.150336 134 45.1152 13.94  2.66  18945.47  
G11 6.3 4.74 22 0.079 78 66.28 50.84 5.31  40254.24  6.8598 3 98 0.399872 357 240.796 50.31  3.38  53304.80  
Average 5.48  2.69  11.18  0.03  37.00  37.20  23.40  4.88  12083.55  5.55  2.36  35.73  0.12  117.45  65.00  16.27  3.03  17826.79  
Normalization 0.99  1.14  0.31  0.26  0.32  0.57  1.44  1.61  0.68  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  1.00  
 
 
(4-3.5)  層數不同的比較  (表二十六)  
我們依據不同層(tier)的個數作分析，從#tier=1~#tier=5 之間來分析數據，來探討不同的層(tier)
數對合成的方法有什麼影響。表二十六實驗結果與圖五十六顯示: 
 
從圖五十六(a) Area 來看 
(1) 透過 Phase I 中的 min-cut 來決定電路需要切割成幾層電路(#partitions)，基本上若切
割成越多層的話，電路的面積(form factor)就會越小，但是從圖五十六上看來，並不是這一
  96 
 
 
 
表二十六、Comparison between 3D-NoC-FT (#router port limit=4, 70nm) and 3D-NoC 
without FT (#router port limit=4, 70nm) among five tiers. 
#Router
AR
(mm
2
)
#Link
WL
 (mm)
Power
(mW)
Latency
(ns)
Throughput
(flits/ns/PE)
#Router
AR
(mm
2
)
#Link
WL
 (mm)
Power
(mW)
Latency
(ns)
Throughput
(flits/ns/PE)
1 2.41 3 5 0.04 26 9.89 9.68 4.31 130642.30 2.43 2 10 0.02 23 7.85 4.40 2.74 205399.92
2 1.48 3 6 0.04 28 6.37 8.95 3.70 152046.75 1.24 2 10 0.02 22 5.61 3.82 2.50 225251.38
3 1.06 3 6 0.04 28 6.74 9.31 3.74 150450.15 1.07 2 10 0.02 23 5.26 3.95 2.49 226101.57
4 1.05 3 5 0.04 26 6.57 7.96 3.67 153203.38 1.16 2 9 0.02 23 5.50 4.25 2.50 225342.52
5 0.88 3 6 0.04 32 8.48 9.47 3.72 151161.32 1.14 2 13 0.02 30 7.28 4.42 2.51 223738.12
1 2.86 3 9 0.06 42 13.60 9.77 5.16 29066.80 2.86 2 13 0.02 31 9.43 4.39 2.66 56247.76
2 1.66 3 8 0.05 40 7.14 8.58 4.92 30450.13 1.56 2 13 0.02 31 6.59 3.91 2.60 57590.36
3 1.23 3 9 0.06 42 7.41 9.08 5.22 28724.71 1.28 2 13 0.02 31 6.32 3.86 2.54 58919.99
4 1.06 3 9 0.06 42 8.09 8.84 5.12 29276.88 1.14 2 13 0.03 34 6.39 4.68 2.48 60548.82
5 1.06 3 10 0.06 44 8.56 9.07 4.77 31451.22 1.04 2 16 0.04 41 8.10 4.59 2.45 61152.10
1 2.66 3 10 0.06 44 15.73 10.09 5.19 140588.54 2.64 2 14 0.03 34 10.61 5.08 2.56 285041.17
2 1.62 3 9 0.06 46 9.08 10.05 5.32 137082.53 1.74 2 14 0.03 34 7.18 4.63 2.58 282607.40
3 1.41 3 9 0.06 44 9.20 9.34 4.90 148919.24 1.40 2 14 0.03 34 6.21 4.32 2.52 289387.45
4 1.27 3 10 0.06 44 8.34 8.77 5.20 140341.22 1.26 2 14 0.02 31 7.29 4.27 2.49 293269.09
5 1.41 3 11 0.07 48 9.73 9.44 5.82 125327.07 1.27 2 16 0.04 41 8.64 6.04 2.57 283965.52
1 2.28 4 11 0.07 50 17.06 10.20 6.16 1611.18 2.27 2 15 0.03 35 9.43 4.07 2.51 3955.92
2 1.57 3 9 0.06 48 8.97 9.53 4.99 1988.64 1.76 2 15 0.03 36 6.71 4.08 2.59 3831.68
3 1.39 3 10 0.07 48 8.97 8.80 5.07 1956.77 2.25 2 15 0.03 35 6.56 3.59 2.53 3922.57
4 1.17 4 11 0.07 50 8.97 8.85 4.84 2050.14 1.10 2 15 0.03 35 6.37 4.02 2.47 4015.45
5 1.11 3 11 0.07 50 8.94 8.88 5.89 1684.48 1.11 2 19 0.04 46 8.32 4.40 2.47 4016.54
1 4.47 3 12 0.08 56 24.87 12.70 5.73 1934.57 4.44 2 18 0.04 43 15.82 5.91 2.82 3925.70
2 2.97 4 10 0.07 52 12.43 10.59 5.15 2152.75 2.95 2 17 0.03 41 11.67 5.18 2.73 4065.60
3 2.27 4 11 0.07 54 12.54 9.85 5.96 1860.63 2.25 2 18 0.04 43 9.92 4.92 2.60 4262.18
4 2.27 3 12 0.08 56 13.12 10.74 6.07 1826.01 2.26 2 19 0.04 43 9.89 4.90 2.56 4322.87
5 2.30 4 11 0.07 54 13.69 10.62 5.15 2153.22 2.28 2 21 0.04 50 11.30 5.84 2.57 4309.54
1 7.65 4 20 0.11 84 53.29 16.74 7.86 288127.98 7.66 3 21 0.06 60 32.26 10.19 2.90 781404.57
2 4.46 4 15 0.10 72 25.37 13.07 7.45 303781.42 4.51 3 21 0.06 61 22.60 9.00 2.88 786223.23
3 3.71 4 18 0.11 78 20.62 11.24 6.76 334853.50 3.52 3 21 0.06 60 20.59 8.17 2.82 802473.32
4 2.58 4 20 0.11 84 23.88 11.11 7.64 296290.09 2.56 2 20 0.06 59 21.59 8.21 2.70 837186.99
5 2.58 4 19 0.11 82 25.46 11.54 6.68 339195.44 2.56 2 21 0.05 58 23.22 8.54 2.79 812832.20
1 13.47 6 62 0.34 250 212.85 48.43 12.01 223029.80 13.71 2 68 0.25 230 149.77 32.97 3.83 699114.42
2 7.35 5 45 0.32 228 74.58 24.60 11.41 234569.53 7.99 3 37 0.25 231 79.71 21.64 3.74 715607.59
3 8.22 5 45 0.32 234 67.54 24.11 11.32 236579.96 7.88 2 68 0.25 230 67.72 19.40 3.50 765786.06
4 4.93 6 62 0.34 250 68.93 20.67 8.95 299219.78 4.88 2 66 0.25 228 69.63 19.81 3.08 868793.52
5 4.58 6 55 0.34 250 64.60 20.47 10.52 254572.52 4.70 3 72 0.25 236 61.33 17.45 3.20 836656.20
1 10.57 6 48 0.29 212 144.82 35.64 10.38 340663.89 10.67 3 56 0.21 194 122.58 28.52 4.04 874748.08
2 7.83 5 36 0.26 188 59.15 20.68 9.95 355223.67 7.92 3 56 0.22 196 62.93 18.70 4.00 883385.25
3 4.67 6 44 0.28 204 58.62 19.35 9.55 370302.97 4.66 3 56 0.21 194 51.34 16.05 3.09 1142885.55
4 4.54 6 48 0.29 212 55.59 17.65 9.58 368825.48 4.52 3 60 0.21 189 50.25 15.72 3.06 1153687.97
5 4.46 6 52 0.30 220 54.38 17.12 9.50 372251.63 4.50 2 56 0.22 195 53.66 16.28 2.94 1204100.86
1 5.02 5 39 0.23 168 81.59 22.95 8.48 387539.24 4.98 2 43 0.16 151 71.38 19.16 3.26 1006477.45
2 2.75 5 30 0.21 154 38.03 17.29 8.44 389271.43 2.77 2 43 0.17 152 39.07 13.61 2.89 1137396.16
3 2.23 5 37 0.23 166 34.97 14.46 8.22 399914.99 2.20 2 43 0.16 151 34.55 12.65 2.70 1218747.22
4 1.46 5 39 0.23 168 34.84 14.26 8.29 396165.29 1.37 2 47 0.17 150 33.14 13.00 2.78 1182578.94
5 1.29 5 41 0.23 172 34.81 13.85 8.67 378900.35 1.26 2 46 0.18 159 34.16 12.24 2.60 1266149.88
1 2.56 5 36 0.20 144 58.22 18.37 7.58 638645.15 2.49 3 37 0.15 134 45.12 13.94 2.66 1820109.11
2 1.50 5 31 0.19 138 27.53 13.23 7.70 628366.53 1.48 3 35 0.15 132 29.31 11.74 2.64 1829676.03
3 0.97 5 34 0.19 140 26.02 12.03 7.46 648810.29 0.94 3 37 0.15 134 28.09 10.95 2.58 1877557.84
4 0.88 5 36 0.20 144 26.60 12.08 8.54 566427.38 0.88 2 42 0.14 131 26.38 9.36 2.57 1883030.75
5 0.88 5 41 0.21 154 28.45 11.87 8.62 561597.84 0.83 2 42 0.14 132 27.64 9.91 2.63 1837123.23
1 6.97 7 69 0.42 310 212.03 48.40 10.96 290909.35 6.86 3 98 0.40 357 240.80 50.31 3.38 943654.99
2 4.27 6 64 0.41 302 76.51 24.75 10.82 294596.85 4.31 3 97 0.40 357 101.41 25.87 3.19 998214.79
3 2.90 6 65 0.41 308 72.09 22.58 10.66 299129.20 2.94 3 98 0.40 357 89.78 23.95 3.07 1038985.67
4 2.36 7 69 0.42 310 68.92 21.36 10.41 306313.03 2.28 2 98 0.38 350 91.96 24.25 2.92 1092421.23
5 2.04 6 72 0.43 320 70.06 20.58 10.87 293290.78 1.94 3 101 0.40 357 85.93 22.43 2.84 1121909.46
Average 1 5.54 4.45 29.18 0.17 126.00 76.72 22.09 7.62 224796.25 5.55 2.36 35.73 0.12 117.45 65.00 16.27 3.03 607279.92
Normalization 1 1.00 1.88 0.82 1.37 1.07 1.18 1.36 2.51 0.37 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00
Average 2 3.41 4.18 23.91 0.16 117.82 31.38 14.67 7.26 229957.29 3.47 2.45 32.55 0.13 117.55 33.89 11.11 2.94 629440.86
Normalization 2 0.98 1.70 0.73 1.28 1.00 0.93 1.32 2.47 0.37 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00
Average 3 2.73 4.27 26.18 0.17 122.36 29.52 13.65 7.17 238318.40 2.76 2.36 35.73 0.12 117.45 29.67 10.17 2.77 675366.31
Normalization 3 0.99 1.81 0.73 1.34 1.04 1.00 1.34 2.59 0.35 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00
Average 4 2.14 4.45 29.18 0.17 126.00 29.44 12.94 7.12 232721.70 2.13 2.09 36.64 0.12 115.73 29.85 10.22 2.69 691381.65
Normalization 4 1.01 2.13 0.80 1.40 1.09 0.99 1.27 2.64 0.34 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00
Average 5 2.05 4.36 29.91 0.18 129.64 29.74 12.99 7.29 228325.99 2.06 2.18 38.45 0.13 122.27 29.96 10.19 2.69 695995.79
Normalization 5 1.00 2.00 0.78 1.37 1.06 0.99 1.27 2.71 0.33 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00
3.17 4.35 27.67 0.17 124.36 39.36 15.27 7.29 230823.93 3.19 2.29 35.82 0.13 118.09 37.68 11.59 2.82 659892.91
0.99 1.90 0.77 1.35 1.05 1.04 1.32 2.58 0.35 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00
Performance
3D NoC  without FT
Graph
G1
G2
#tier
3D NoC with FT
Size
(mm
2
)
#Hops
Network Performance
Average
Normalization
Size
(mm
2
)
#Hops
Network
G3
G4
G10
G11
G5
G6
G7
G8
G9
 
  98 
五、計畫成果自評 
 本研究計畫主要針對三維掃描樹測詴、三維交連線震盪環測詴與交連線診斷、交連線
容錯設計、以及二維與三維網路晶片的拓樸設計領域進行深入的研究。我們將整個計畫劃
分成四大子題，針對四個子題進行深入的研究，以下分別針對與這幾個議題相關的文獻加
以深入探討，並將已知的研究成果整理報告如下。 
基於本計畫兩年之研究所得到的相關結果，已發表 (含被接受 )期刊論文 3 篇
[123][124][125]、國際會議論文 9 篇[126-134]、國內會議論文 7 篇[135-141]。此外、基於此
計畫之研究經驗與成果亦進一步與業界合作研發，相關的研發成果已申請專利 5 件
[142-146]。 
 在技術與應用面：基於本研究計畫所開發之「三維掃描樹測詴」、「三維交連線震盪環
測詴」、「交連線容錯設計」與「二維與三維網路晶片的拓樸設計」等三維晶片系統交連線
相關研究成果所撰寫之學術論文獲國際會議 ATS 等所接受，在技術上有一定的進步性。此
外、本研究計畫所發展之三維晶片系統交連線設計自動化軟體，亦具有一定的功能與成效，
日前已有業界公司進行詴用與洽談合作事宜。是以，本計畫所研發之成果具有一定的技術
深度與實用性，預期將可與業界進行技術轉移或進一步的產學合作開發，帶動相關產業進
行技術升級。 
 在經濟效益面：三維晶片系統交連線為晶片產業重要的關鍵因素，本計畫所開發之高
性能、低成本、低耗能三維晶片系統交連線的關鍵合成與測詴技術，有利於我國在晶片產
業上的競爭力。 
 在社會面效益面：本研究計畫參與人員除了在學理上可充分了解三維晶片交連線設
計、測詴、合成所面臨的各種問題，進行理論分析與開發解決之道外；在實際應用方面，
計畫參與人員將所開發的技術，透過軟體製作，實際進行驗證，亦獲取三維晶片系統交連
線諸多之技術與經驗。因此，透過本計畫理論與實際相結合的訓練目標，已順利為我國培
育相當多高品質之三維晶片系統交連線設計、測詴與合成之人才。 
 回顧過去選擇三維晶片系統交連線為研發對象時，因其在架構、設計與測詴上相較於
其它二維單晶片電路複雜，困難度高，再加上本計畫亦挑戰設計自動化議題，使得計畫架
構龐大且需要多種背景知識才能將計畫做好，壓力可謂不輕。 
 展望未來，在累積一定技術與實作驗證成果之後，本計畫除了將研發之技術應用於教
學以及更深入的研究之外，也將把現有之技術與產業合作，期望能為提高我國半導體產業
競爭力盡一點心力。 
  100 
[35]  N. Miyakawa, “A 3D Prototyping Chip based on a wafer-level Stacking Technology,” in Proc. Asia and South Pacific Design Automation 
Conf., pp. 416-420, January, 2009. 
[36]  H.-H. S. Lee, and K. Chakrabarty,” Test Challenges for 3D Integrated Circuits,” in Proc. Design & Test of Computers, pp. 26-25, 
September-October, 2009. 
[37]  W. J. Dally, and B. Towles, “Route Packets, not Wires: On-Chip Interconnection Networks,” in Proc. Design Automation Conference, June 
2001. 
[38]  F. DaSilva, editor, IEEE Std 1500TM-2005, 1500TM IEEE Standard Testability Method for Embedded Core-based Integrated Circuits,IEEE, 
New York, NY, USA, August 2005.. 
[39]  K. Lee, S.-J. Lee, D. Kim, K. Kim, G. Kim, J. Kim, and H.-J. Yoo, “Network-on-Chip and Network-in-Package for High-Performance SoC 
Platforms,” in Proc. Asian Solid-State Circuits Conf., pp. 485-488, November 2005. 
[40]  H. Tenhunen and A. Jantsch, “Networks on Chip,” Kluwer Academic Publishers, 2003. 
[41]  J. Nurmi, “Network-on-Chip: A New Paradigm for System-on-Chip Design,” in Proc. International Symposium on System-on-Chip, pp. 
2-6, March 2005. 
[42]  M. Pirretti, G. M. Link, R. R. Brooks , N. Vijaykrishnan, M. Kandemir, and M. J. Irwin, “Fault Tolerant Algorithms for Network-on-Chip 
Interconnect,” in Proc. Computer Society Annual Symposium on VLSI, pp. 46- 51, 2004. 
[43]  Y. B. Kim, and Y.-B. Kim, “Fault Tolerant Source Routing for Network-on-Chip,” in Proc. Defect and Fault-Tolerance in VLSI Systems, pp. 
12-20, September 2007. 
[44]  K. S.-M. Li, C.-L. Lee, C. Su, and J. E. Chen, “Oscillation Ring Based Interconnect Test Scheme for SoC,” in Proc. Asia and South Pacific 
Design Automation Conf., pp.184-187, January 2005. 
[45]  I.-G. Lee, J. Lee, and S.-C. Park, “Adaptive Routing Scheme for NoC Communication Architecture,” in Proc. International Conf. on 
Advanced Communication Technology, pp1180-1184, 2005. 
[46]  K. S.-M. Li, C. Su, Y.-M. Chang, C.-L. Lee, and J.-E Chen, “IEEE Standard 1500 Compatible Oscillation Ring Test Methodology for 
Interconnect Delay and Crosstalk Detection,” Journal of Electronic Testing: Theory and Applications, pp. 341-355, August 2007. 
[47]  K. S.-M. Li, C. Su, Y.-M. Chang, C.-L. Lee, and J.-E Chen, “IEEE Standard 1500 Compatible Interconnect Diagnosis for Delay and 
Crosstalk Faults,” IEEE Trans. Computer-Aided Design, Vol. 25, Issue 11, pp. 2513-2525, November 2006. 
[48]  F. Refan, H. Alemzadeh, S. Safari, P. Prinetto, and Z. Navabi, “Reliability in Application Specific Mesh-based NoC Architectures,” in Proc. 
International On-Line Testing Symposium, pp. 207 - 212, 2008. 
[49]  S. Hariri and C. S. Raghavendra, “SYREL: A Symbolic Reliability Algorithm Based on Path and Cutset Methods,” IEEE Transactions on 
Computers, Vol. C-36, pp. 1224–1232, October 1987. 
[50]  T. Bjerregaard, and S. Mahadevan, “A survey of research and practices of Network-on-chip”  ACM Computing Surveys, Volume 38, Issue 
1, 2006 
[51]  A. Pinto, L. Carloni, and A. Sangiovanni-Vincentelli, “A methodology for constraint-driven synthesis of on-chip communications,” IEEE 
Transactions on Computer-Aided Design of Integrated Circuits and Systems, vol. 28, pp. 364–377, March 2009. [Online]. Available: 
http://embedded.eecs.berkeley.edu/cosi/ 
[52]  A. B. Kahng, B. Li, L.-S. Peh, and K. Samadi, “Orion 2.0: A fast and accurate noc power and area model for early-stage design space 
exploration,” in Proc. IEEE Design, Automation and Test in Europe, April 2009, pp. 423–428. 
[53]  S. Murali, P. Meloni, F. Angiolini, D. Atienza, S. Carta, L. Benini, G. D. Micheli, and L. Raffo, “Designing application-specific networks 
on chips with floorplan information,” in Proc. IEEE/ACM International Conference on Computer Aided Design, Nov. 2006, pp. 355–362. 
[54]  K. Srinivasan, K. S. Chatha, and G. Konjevod, “Linear-programmingbased techniques for synthesis of network-on-chip architectures,” 
IEEE Transactions on Very Large Scale Integration (VLSI) Systems, vol. 14, pp. 407–420, April 2006. 
[55]  C. Addo-Quaye, “Thermal-aware Mapping and Placement for 3-D NoC Designs,” In Proceedings of the IEEE International 
System-on-Chip Conference (SOCC’05), pp.25-28, Sept. 2005. 
[56]  G. Ascia, V. Catania, and M. Palesi, “Multi-Objective Mapping for Mesh-based NoC Architecture,” In Proceedings of the IEEE/ACM/IFIP 
International Conference on Hardware/Software Codesign and System Synthesis((CODES+ISSS '04)), pp. 182-187, 2004. 
  102 
[78]  A. Jalabert, S. Murali, L. Benini, G. De Micheli, “×pipesCompiler: A Tool for Instantiating Application Specific Networks on Chip,” In 
Proceedings of the IEEE/ACM Design, Automation, and Test in Europe Conference & Exhibition (DATE’04), vol.2, pp. 884-889 , Feb. 
2004. 
[79]  Y.-L. Jeang, J.-M. Jou, and W.-H. Huang, “A Binary Tree Based Methodology for Designing an Application Specific Network-on-Chip 
(ASNOC)”. IEICE Transactions on Fundamentals of Electronics, Communications and Computer Sciences, vol. E88-A, pp. 3531-3538, 
Dec. 2005.  
[80]  Y.-L. Jeang, T.-S. Wey, H.-Y. Wang, C.-W. Hung, and J.-H. Liu, "An Adaptive Routing Algorithm for Mesh-Tree Architecture in 
Network-on-Chip Designs," In Proceedings of the 3rd International Conference on Innovative Computing Information and Control 
(ICICIC’08), pp. 182, June, 2008. 
[81]  S. Jovanovic, C. Tanougast, S. Weber, and C. Bobda, “A New Deadlock-Free Fault-Tolerant Routing Algorithm for NoC Interconnections,” 
In Proceedings of International Conference on Field Programmable Logic and Applications (FPL’09), pp. 326-331, 2009. 
[82]  A. B. Kahng, B. Li, L.-S. Peh, and K. Samadi, “Orion 2.0: A Fast and Accurate NoC Power and Area Model for Early-Stage Design Space 
Exploration,” Proceedings of the IEEE/ACM Design, Automation, and Test in Europe Conference & Exhibition (DATE’09), pp. 423-428, 
2009. 
[83]  W.J. Kim and S.Y. Hwang, “Design of an Area-Efficient and Low-Power NoC Architecture Using a Hybrid Network Topology,” IEICE 
Transactions on Fundamentals of Electronics, Communications and Computer Sciences, vol. E91-A, no. 11, pp. 3297-3303, 2008.  
[84]  Y.B. Kim and Y.-B. Kim, “Fault Tolerant Source Routing for Network-on-Chip,” In Proceedings of IEEE International Symposium on 
Defect and Fault-Tolerant in VLSI Systems (DFT’07), pp. 12-20, 2007. 
[85]  M. Kreutz, C. Marcon, L. Carro, N. Calazans, and A.A. Susin, “Energy and Latency Evaluation of NoC Topologies,” In Proceedings of 
IEEE International Symposium on Circuits and Systems (ISCAS’05), vol, 6, pp. 5866-5869, 2005. 
[86]  F. Li, C. Nicopoulos, T. Richardson, Y. Xie, V. Narayanan, and M. Kandemir, “Design and Management of 3D Chip Multiprocessors using 
Network-in-Memory,” In Proceedings of the 33rd IEEE International Symposium on Computer Architecture (ISCA’06), pp. 130-141, 2006. 
[87]  K.S.-M. Li, S.-Y. Chen, L.-B. Chen, and R.-T. Gu, “A Fast Custom Network Topology Generation with Floorplanning for NoC-based 
Systems,” In Proceedings of the IEEE International Conference on IC Design and Technology (ICICDT’11), 2011. 
[88]  H.-E. Lian, C. Chen, J.-W. Chang, C.-C. Shen, R.-H. Jan, “Shortest Path Routing with Reliability Requirement in Delay Tolerant 
Networks,” In Proceedings of International Conference on Future Information Networks (ICFIN’09), pp. 292-297, Oct. 2009. 
[89]  G. Liu and K.S.Y. Lee, “Optimal Routing Algorithms for Generalized De Bruijn Digraphs,” In Proceedings of the 1993 International 
Conference on Parallel Processing (ICPP’93), vol. 3, pp. 167-174, 1993. 
[90]  I. Loi, F. Angiolini, and L. Benini, “Developing Mesochronous Synchronizers to Enable 3D NoC,” In Proceedings of the IEEE/ACM 
Design, Automation and Test in Europe Conference & Exhibition (DATE’08), pp. 1414-1419, 2008. 
[91]  I. Loi, F. Angiolini, S. Fujita, S. Mitra, and L. Benini, “Characterization and Implementation of Fault-Tolerant Vertical Links for 3-D 
Networks-on-Chip,” IEEE Transaction on Computer-Aided Design of Integrated Circuits and Systems, vol. 30, no. 1 pp. 124-134, 2011. 
[92]  I. Loi, S. Mitra, S. Fujia, and L. Benini, “A Low-overhead Fault Tolerance Scheme for TSV-based 3D Network on Chip Links,” In 
Proceedings of the IEEE/ACM International Conference on Computer-Aided Design (ICCAD’08), pp. 598-602, Nov. 2008. 
[93]  R. Marculescu, U.Y. Ogras, L.-S. Peh, N.E. Jerger, and Y. Hoskote, “Outstanding Research Problems in NoC Design: System, 
Microarchitecture, and Circuit Perspectives,” IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, vol. 28, 
No. 1, pp. 3-21, Jan. 2009. 
[94]  I. Meikei, K.W. Guarini, V. Chan, K. Bernstein, R. Joshi, J. Kedzierski, W. Haensch, “Three dimensional CMOS devices and integrated 
circuits,” In Proceedings of the IEEE Custom Integrated Circuits Conference (CICC’03), pp. 207- 213, Sept. 2003. 
[95]  N. Miyakawa, “A 3D Prototyping Chip Based on a Wafer-Level Stacking Technology,” In Proceedings of the IEEE/ACM Asia and South 
Pacific Design Automation Conference (ASP-DAC’09), pp. 416-420, 2009. 
[96]  J. Munkres, “Algorithms for the Assignment and Transportation Problems,” Journal of the Society for Industrial and Applied 
Mathematics,Vol. 5, No. 1,pp. 32-38, Mar. 1957. 
  104 
Ott, A.M. Young, K.W. Guarini, and M. Ieong, “Enabling SOI Based Assembly Technology for Three Dimensional (3D) Integrated 
Circuits (ICs),” In Proceedings of IEEE International Electron Devices Meeting (IEDM’05), pp. 352-355, Dec. 2005. 
[116]  A. W. Topol, D.C.L. Tulipe, L. Shi, D. J. Frank, K. Bernstein, S.E. Steen, A. Kumar, G.U. Singco, A.M. Young, K.W. Guarini, M. Ieong, 
“Three-Dimensional Integrated Circuits,” IBM Journal of Research and Development, vol.50, pp. 491-506, July, 2006. 
[117]  V.V. Vazirani, “Approximation Algorithms,” Springer, 2003. 
[118]  D. Wolpert, B. Fu, and P. Ampadu, “Temperature-Aware Delay Borrowing for Energy-Efficient Low-Voltage Link Design,” In Proceedings 
of the Fourth ACM/IEEE International Symposium on Networks-on-Chip (NOCS’10), pp. 107-114, May, 2010. 
[119]  L. Xue, C.C. Liu, H.-S. Kim, S.K. Kim, and S. Tiwari, “Three-dimensional Integration: Technology, Use, and Issues for Mixed-Signal 
Applications,” IEEE Transactions on Electron Devices, vol.50, no.3, pp. 601- 609, March 2003. 
[120]  S. Yan, and B. Lin, “Design of Application-Specific 3D Networks-on-Chip Architectures,” In Proceedings of the IEEE International 
Conference on Computer Design (ICCD’08), pp. 142-149, Oct. 2008. 
[121]  Y.-W. Yang, and K.S.-M. Li, “Temperature-Aware Dynamic Frequency and Voltage Scaling for Reliability and Yield Enhancement,” In 
Proceedings of the IEEE/ACM Asia and South Pacific Design Automation Conference (ASP-DAC’09), pp.49-54, Jan. 2009. 
[122]  P. Zhou, P.-H. Yuh, and S.S. Sapatnekar, “Application-Specific 3D Network-on-Chip Design Using Simulated Allocation,” In Proceedings 
of the IEEE/ACM Asia and South Pacific Design Automation Conference (ASP-DAC’10), pp. 517-522, 2010. 
[123]  K. S.-M. Li, “Multiple Scan Trees Synthesis for Test Time/Data and Routing Length Reduction Under Output Constraint,” IEEE Trans. on 
Computer-Aided Design, Vol. 29, No. 4, pp. 618-626, April 2010. 
[124]  K. S.-M. Li, and J.-Y. Huang, “Layout-Aware Interconnect-Driven Multi-Objective Multiple Scan Tree Synthesis,” IEEE Design & Test of 
Computers, Vol. 28, Issue 2, pp. 62-69, March/April 2011. 
[125]  K. S.-M. Li, C.-Y. Pai, and L.-B. Chen, "Maximal Interconnect Resilient Methodology for Fault Tolerance, Yield, and Reliability 
Improvement in Network on Chip," IEICE Transactions on Fundamentals of Electronics, Communications and Computer Sciences, 
Vol.E94-A, No.12, Dec. 2011. (Accepted). 
[126]  K. S.-M. Li, Y.-C. Hung, and J.-Y. Huang, “Multiple Scan Trees Synthesis for Test Time/Data and Routing Length Reduction under Output 
Constraint,” in Proc. IEEE Asian Test Symposium, pp. 231-236, November 2009. 
[127]  K. S.-M. Li, Y.-Y. Liao, Y.-W. Liu, and J.-Y. Huang, “IEEE 1500 Compatible Interconnect Test with Maximal Test Concurrency,” in Proc. 
IEEE Asian Test Symposium, pp. 269-274, November 2009. 
[128]  C.-C. Wang, K. S.-M. Li, and S.-J. Wang, “A 1.8 V to 3.3 V Level-Converting Flip-Flop Design for Multiple Power Supply Systems,” in 
Proc. IEEE International Symposium on Integrated Circuits, pp. 61-64, December 2009. 
[129]  C.-Y. Pai, and K. S.-M. Li, “Maximal Resilience in Interconnect Structure,” The 16th Workshop on Synthesis and System Integration of 
Mixed Information Technologies, October 2010. 
[130]  C.-Y. Pai, and K. S.-M. Li, “Maximal Resilience for Reliability and Yield Enhancement in Interconnect Structure,” in Proc. IEEE Asian 
Test Symposium, pp. 261-266, December 2010. 
[131]  K. S.-M. Li, S.-Y. Chen, L.-B. Chen, and R.-T. Gu, “A Fast Custom Network Topology Generation with Floorplanning for NoC-based 
Systems,” in Proc. IEEE International Conference on Integrated Circuits Design and Technology, May 2011. 
[132]  Y.-X. Zheng, P.-P. Kan, L.-B. Chen, K.-Y. Hsieh, B.-C. Cheng and K. S.-M. Li , “Fault Tolerant Application-Specific NoC Topology 
Synthesis for Three-Dimensional Integrated Circuits, ” in Proc. IEEE International SoC Conference, pp.296-301, September 2011. 
[133]  K.-Y. Hsieh, B.-C. Cheng, R.-T. Gu, and K. S.-M. Li, “Fault-Tolerant Mesh for 3D Network on Chip, ” in Proc. IEEE International 
Microsystems, Packaging, Assembly and Circuits Technology conference, pp. 214-217, October 2011.  
[134]  C.-Y. Pai, R.-T. Gu, L.-B. Chen, B.-C. Cheng, and K. S.-M. Li, “A Unified Interconnects Testing Scheme for 3D Integrated Circuits,” in 
Proc. IEEE Asian Test Symposium, December 2011. (accepted) 
[135]  S.-J. Wang, S.-J. Huang, and K. S.-M. Li, “Static and Dynamic Test Power Reduction in Scan-Based Testing by Input Vector Control,” in 
VLSI/CAD Symposium, August 2008. 
[136]  K. S.-M. Li, Y.-C. Hung, and J.-Y. Huang, “Multiple Scan Trees Synthesis for Test Time/Data and Routing Length Reduction under Output 
  106 
可供推廣之研發成果資料表 
 可申請專利   可技術移轉                                      日期：100 年 10 月 30 日 
國科會補助計畫 
計畫名稱：針對三維晶片與系統級封裝之可靠度設計與測詴診斷技
術的研究 
計畫主持人：李淑敏 (中山大學大學資訊工程學系副教授) 
計畫編號：NSC98-2221-E-110-060-MY2  學門領域：微電子 
技術/創作名稱 
具多掃瞄樹合成架構之三維晶片 
3D IC Having a Multiple Scan Tree Synthesis 
發明人/創作人 李淑敏  廖翊孙 
技術說明 
中文：一種具多掃瞄樹合成架構之三維晶片包含數個電路、數個矽
穿孔及數個相容群。每個該電路含數個掃瞄細胞及數個邏輯閘。將
該矽穿孔設置於數個該電路之間，而該數個電路配置於數個階層，
且該階層為不同階層。該相容群由該掃瞄細胞組成，每個該相容群
對應為一樹階層。依該矽穿孔之數量調整該階層之順序，再依該掃
瞄細胞之相容性建立數個相容群，且每該相容群為一個該樹階層。
最後，在該樹階層之間進行連接，以形成一多掃瞄樹合成架構。 
英文：A 3D IC includes a plurality of circuits, a plurality of TSVs and a 
plurality of compatible groups. Each of the circuits includes a plurality 
of scan cells and logic gates. The TSVs are arranged between the 
circuits and the circuits are arranged in a plurality of different tiers. The 
compatible group is consisted of the scan cells and each of the 
compatible group corresponds a tree level. According to the amount of 
the TSVs, orders of the tiers are adjusted and according to the 
compatibility of the scan cells the compatible groups are built. Each of 
the compatible groups corresponds to one of the tree level. Finally, the 
tree levels are connected to form a multiple scan tree synthesis. 
可利用之產業 
及 
可開發之產品 
本發明之具多掃瞄樹合成架構之三維晶片可應用於系統晶片交連
線測詴及奈米 VLSI 相關領域，其利用多掃瞄樹合成演算法減少內
部交連線長度，並有效降低交連線長度、降低功率消耗及異質整合
之功能，因而具有產業上利用性。本發明較佳實施例之具多掃瞄樹
合成架構之三維晶片可應用於各種多層﹝Multiple Tiers﹞的三維
晶片。另外，本發明較佳實施例之具多掃瞄樹合成架構之三維晶片
亦可應用於其它各種系統單晶片﹝SoC﹞或網路晶片﹝NoC﹞之交
連線測詴相關領域。 
技術特點 
本發明係一種具多掃瞄樹合成架構之三維晶片包含數個電路、數個
矽穿孔及數個相容群。每個該電路包含數個掃瞄細胞及數個邏輯
閘。將該矽穿孔設置於數個該電路之間，而該數個電路配置於數個
階層，且該階層為不同階層。該相容群由該掃瞄細胞組成，每個該
相容群對應為一樹階層。依該矽穿孔之數量調整該階層之順序，再
依該掃瞄細胞之相容性建立數個相容群，且每個該相容群為一個該
樹階層。最後，在該樹階層之間進行連接，以形成一多掃瞄樹合成
架構。其目的係提供一種具多掃瞄樹合成架構之三維晶片，其依掃
瞄細胞之相容性建立數個相容群，再將數個該相容群建立一多掃瞄
  108 
可供推廣之研發成果資料表 
 可申請專利   可技術移轉                                      日期：98 年 10 月 30 日 
國科會補助計畫 
計畫名稱：針對三維晶片與系統級封裝之可靠度設計與測詴診斷技
術的研究 
計畫主持人：李淑敏 (中山大學大學資訊工程學系副教授) 
計畫編號：NSC98-2221-E-110-060-MY2  學門領域：微電子 
技術/創作名稱 
多層次最大化交連線測詴方法 
Method of Multilevel Maximal Concurrent Interconnect Test 
發明人/創作人 李淑敏  廖翊孙 
技術說明 
中文：一種多層次最大化交連線測詴方法包含步驟：利用一第一震
盪環產生演算法進行演算於一電路，該電路包含數個交連線，以便
自該交連線產生數個第一震盪環；利用一第二震盪環產生演算法進
行演算於該電路，以便產生數個第二震盪環；利用混合該第一震盪
環產生演算法及第二震盪環產生演算法進行演算於該電路，以便自
該第一震盪環及第二震盪環尋找數個帄行震盪環，以減少該第一震
盪環及第二震盪環之總數量。 
英文：A method of multilevel maximal concurrent interconnect6ion test 
includes the steps of: utilizing a first IORT algorithm to calculate a 
circuit which includes a plurality of interconnects so as to generate a 
plurality of first oscillation rings; utilizing a second IORT algorithm to 
calculate the circuit so as to generate a plurality of second oscillation 
rings; utilizing a hybrid first and second IORT algorithm to calculate 
the circuit so as to extract a plurality of parallel oscillation rings such 
that the total number of the first oscillation rings and the second 
oscillation rings are reduced. 
可利用之產業 
及 
可開發之產品 
本發明之多層次最大化交連線測詴方法可應用於單晶片交連線測
詴及奈米 VLSI 相關領域，其利用兩種以上震盪環產生演算法﹝OR 
generation algorithm﹞進行帄行測詴﹝parallel test﹞及多層次最大
化交連線測詴，並形成多層次架構﹝multilevel framework﹞的最大
化交連線測詴，其可降低測詴次數﹝test session﹞、時間及節省測
詴成本，因而具有產業上利用性。本發明可應用於各種系統單晶片
﹝SoC﹞或網路晶片﹝NoC﹞之交連線測詴相關領域。 
技術特點 
本發明係一種多層次最大化交連線測詴方法包含步驟：利用一第一
震盪環產生演算法進行演算於一電路，該電路包含數個交連線，以
便自該交連線產生數個第一震盪環；利用一第二震盪環產生演算法
進行演算於該電路，以便產生數個第二震盪環；利用混合該第一震
盪環產生演算法及第二震盪環產生演算法進行演算於該電路，以便
自該第一震盪環及第二震盪環尋找數個帄行震盪環，以減少該第一
震盪環及第二震盪環之總數量。其目標有兩個，(1) 在同一個 test 
session 之下找出多個可帄行測詴的震盪環，(2) 每個震盪環包含愈
  110 
可供推廣之研發成果資料表 
 可申請專利   可技術移轉                                      日期：98 年 10 月 30 日 
國科會補助計畫 
計畫名稱：針對三維晶片與系統級封裝之可靠度設計與測詴診斷技
術的研究 
計畫主持人：李淑敏 (中山大學大學資訊工程學系副教授) 
計畫編號：NSC98-2221-E-110-060-MY2  學門領域：微電子 
技術/創作名稱 
多層晶片之交連線及矽穿孔之診斷方法 
Diagnosis Method of Tier-based Multilevel Interconnect 
發明人/創作人 李淑敏  白植允 
技術說明 
中文：一種多層晶片之交連線及矽穿孔之診斷方法包含步驟：將數
個矽穿孔設置於一多層晶片內，而該多層晶片具有一多層電路，且
該多層電路包含數層交連線；利用一震盪環產生演算法於該多層電
路，以便自該多層電路之交連線產生數個水帄震盪環及收個垂直震
盪環；利用該水帄震盪環及垂直震盪環進行震盪環測詴及診斷。 
英文：A diagnosis method of tier-based multilevel interconnect 
includes the steps of: providing a plurality of TSVs in a multilevel IC 
which has a multilevel circuit including a plurality of interconnects; 
utilizing a IORT algorithm to calculate the multilevel circuit so as to 
generate a plurality of horizontal oscillation rights and a plurality of 
vertical oscillation rings from the interconnects; utilizing the horizontal 
oscillation rings and the vertical oscillation rings to test and diagnosis 
the multilevel IC. 
可利用之產業 
及 
可開發之產品 
本發明之多層晶片之交連線及矽穿孔之診斷方法可廣泛應用於系
統單晶片或網路晶片之交連線測詴及診斷相關領域，因此其利用
HVOR 或 VHOR 進行交連線測詴及診斷，可減少震盪環之總數量，
因而具有產業上利用性。本發明可應用於各種多階層﹝Multiple 
Tiers﹞的三維晶片、各種系統單晶片﹝SoC﹞或網路晶片 NoC﹞之
交連線測詴及診斷相關領域。 
技術特點 
本發明係一種多層晶片之交連線及矽穿孔之診斷方法包含步驟：將
數個矽穿孔設置於一多層晶片內，而該多層晶片具有一多層電路，
且該多層電路包含數層交連線；利用一震盪環產生演算法進行演算
於該多層電路，以便自該多層電路之交連線產生數個水帄震盪環及
數個垂直震盪環；利用該水帄震盪環及垂直震盪環進行震盪環測詴
及診斷。其目的為提供一種多層晶片之交連線及矽穿孔之診斷方
法，其具有在診斷上減少震盪環數量及提高測詴帄行度之功效。 
推廣及運用的價值 
目前多層晶片之測詴及診斷並未採用本發明之多層晶片之交連線
及矽穿孔之診斷方法。本發明之多層晶片之交連線及矽穿孔之診斷
方法相對於習用二維震盪環測詴及診斷，本發明不但可在診斷上減
少震盪環數量，而且可提高測詴帄行度，因而具有增益震盪環測詴
及診斷之功效。此外，本發明之多層晶片之交連線及矽穿孔之診斷
  112 
可供推廣之研發成果資料表 
 可申請專利   可技術移轉                                      日期：98 年 10 月 30 日 
國科會補助計畫 
計畫名稱：針對三維晶片與系統級封裝之可靠度設計與測詴診斷技
術的研究 
計畫主持人：李淑敏 (中山大學大學資訊工程學系副教授) 
計畫編號：NSC98-2221-E-110-060-MY2  學門領域：微電子 
技術/創作名稱 
以最大化彈性補償增益交連線結構之可靠度及良率方法 
Method of Maximal Resilience for Reliability and Yield Enhancement 
in Interconnect Structure 
發明人/創作人 李淑敏  白植允 
技術說明 
中文：一種以最大化彈性補償增益交連線結構之可靠度及良率方法
包含步驟：利用一震盪環產生演算法進行演算於一電路，該電路包
含數個交連線，以便自該交連線產生數個震盪環；診斷該電路之震
盪環，以產生至少一正常路徑至少一錯誤路徑；尋找至少一修復路
徑或一選擇路徑，且該修復路徑或選擇路徑對應於該電路之錯誤路
徑；及利用該修復路徑或選擇路徑替代該震盪環之錯誤路徑。 
英文：A method of maximal resilience for reliability and yield 
enhancement in interconnect structure includes the steps of: utilizing an 
IORT algorithm to calculate a circuit which includes a plurality of 
interconnects so as to generate a plurality of oscillation rings; 
diagnosing the oscillation rings to generate at least one normal path and 
at least one fault path; seeking at least one repair path or an alternative 
path which corresponds to the fault path; and utilizing the repair path 
or alternative path to substitute the fault path. 
可利用之產業 
及 
可開發之產品 
本發明之「以最大化彈性補償增益交連線結構之可靠度及良率方
法」可廣泛應用於系統單晶片之交連線測詴及奈米 VLSI 相關領
域，因此其利用修復路徑替代錯誤震盪環之錯誤邊，其可達成恢復
交連線之錯誤連接，其仍可進行交連線測詴，其可提升交連線結構
之可靠度及良率，因而具有產業上利用性。本發明可適用於各種系
統單晶片﹝System-on-Chip，SoC﹞或網路晶片
﹝Network-on-Chip，NoC﹞之交連線震盪環測詴、診斷及奈米 VLSI
相關領域。 
技術特點 
本發明係一種以最大化彈性補償增益交連線結構之可靠度及良率
方法包含步驟：利用一震盪環產生演算法進行演算於一電路，該電
路包含數個交連線，以便自該交連線產生數個震盪環；診斷該電路
之震盪環，以產生至少一正常路徑至少一錯誤路徑；尋找至少一修
復路徑或一選擇路徑，且該修復路徑或選擇路徑對應於該電路之錯
誤路徑；及利用該修復路徑或選擇路徑替代該震盪環之錯誤路徑。
  114 
可供推廣之研發成果資料表 
 可申請專利   可技術移轉                                      日期：98 年 10 月 30 日 
國科會補助計畫 
計畫名稱：針對三維晶片與系統級封裝之可靠度設計與測詴診斷技
術的研究 
計畫主持人：李淑敏 (中山大學大學資訊工程學系副教授) 
計畫編號：NSC98-2221-E-110-060-MY2  學門領域：微電子 
技術/創作名稱 
具容錯性三維網路晶片拓樸合成方法 
Fault Tolerant Topology Synthesis Method for 3D Network 
on Chips 
發明人/創作人 李淑敏  鄭意學 
技術說明 
中文：一種三維網路晶片拓樸合成方法包含：在一電路上尋找數個
源頭節點及數個目的節點；於該數個源頭節點及數個目的節點之間
進行通訊關係分析，以便組合獲得數個源頭元件及數個目的元件；
於該源頭元件及目的元件之間利用通訊雙分轉換方式進行轉換，以
獲得一通訊雙分圖，且該通訊雙分圖具有該源頭元件及目的元件之
通訊關係；依該通訊雙分圖進行通訊雙分切割演算，以獲得一預定
層數量，且獲得一預定矽穿孔數量連接於該預定層之間；依該預定
層數量將該電路切割形成預定數量之群體；及將該群體利用層排序
分配方式進行排列，以獲得一 3D 架構。 
英文：A topology synthesis method for 3D NOCs includes: searching a 
plurality of source nodes and a plurality of target nodes on a circuit; 
analyzing communication relationships between the source nodes and 
the target nodes so as to obtain a plurality of source components and 
target components; transforming the source components and target 
components by a communication trace graph (CTG) so as to obtain a 
communication trace bipartite graph (CTB); calculating the 
communication trace bipartite graph by CTG so as to obtain a set of 
tiers and a number of through silicon via (TSV) connected 
therebetween; partitioning the circuit into partitions according to the 
tiers; assigning the partitions to the tires by tier assignment to obtain a 
3D structure. 
可利用之產業 
及 
可開發之產品 
本發明係關於一種三維網路晶片﹝Network on Chip，NOC﹞拓樸合
成方法；特別是關於一種客製化﹝customized﹞三維網路晶片拓樸
合成方法；特別是關於一種具容錯﹝fault tolerant﹞及無死結
﹝deadlock free﹞特性之三維網路晶片拓樸合成方法。 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/11/01
國科會補助計畫
計畫名稱: 針對三維晶片與系統級封裝之可靠度設計與測試診斷技術的研究
計畫主持人: 李淑敏
計畫編號: 98-2221-E-110-060-MY2 學門領域: 積體電路及系統設計
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
