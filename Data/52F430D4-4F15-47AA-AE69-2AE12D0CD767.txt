  
1 
 
摘要 
UCT (Upper Confidence bounds applies to Tree)是一種奠基於Monte Carlo Method的技術，非
常成功地被應用在電腦圍棋程式。2007年在荷蘭阿姆斯特丹舉辦的電腦奧林匹亞，9路圍棋
組的前三名Steenvreter、MoGo、CrazyStone等UCT程式全面擊敗以知識導向為主的Go 
Intellect、GoKing等程式，顯示UCT這個技術確實非常強大。UCT 程式使用數學統計的公
式選擇子節點，再用Monte Carlo Method 隨機取樣的方法來審局，不需要知識導向的模組、
alpha-beta search的架構與複雜domain knowledge的審局函數，不但簡化了程式設計的複雜
度，也使UCT程式超越傳統知識導向程式的棋力。在其它遊戲方面，由於本質極為不同，
目前尚無直接利用UCT策略來提昇棋力之研究，本研究計畫將UCT應用在四種具有不同特
性的電腦競局遊戲–六子棋、蜜月橋牌、吹牛骰子與三角殺棋，以了解其是否適用。經過
一段時間的嘗詴發現，受限於遊戲的型態與模擬的效能，直接應用UCT策略到此四種遊戲
效果並不十分顯著。後來我們針對各個遊戲的型態，重新發展解決各個遊戲的策略，效果
大幅改進。本計畫成果如下所述。 
(1) 六子棋–我們提出一個防禦性策略及一個結合破著搜尋演算法的策略性審局方案，此外
我們亦提出提升實作上效能與精確度的技術。基於我們的方法所實作出來的程式能與當
今頂尖的六子棋程式分庭抗禮、毫不遜色。 
(2) 蜜月橋牌–我們使用電腦模擬計算與參數演化的方法來決定出牌，目前實作程式的牌
力，對牌面局勢的價值分析已有一定的準確性，其牌力大約與一般業餘玩家相近。 
(3) 吹牛骰子–我們利用賽局理論，以一種簡單明快的作法來達到此遊戲的最佳玩法。並利
用貝式信賴網路，在連續的對局中對網路進行訓練，達成對手行為模擬的效果，藉此發
掘對手的弱點來提高勝率。 
(4) 三角殺棋–我們利用電腦倒推法證明了兩種規則的八層三角殺棋皆為先手勝，並提出一
個管理記憶體的方式來降低程式的記憶體使用量。 
 
關鍵詞：蒙地卡羅法、應用在遊戲樹的信賴度上限法、電腦圍棋、alpha beta 搜尋法 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  
3 
 
壹、前言 
 
蒙地卡羅法(Monte Carlo Method)與 UCT(Upper Confidence bounds applies to Tree)是近
年電腦圍棋研究領域的顯學，幾乎所有的圍棋程式都捨棄了過去的知識導向搜尋架構，採
取了以隨機模擬 (random simulation)為主要精神的蒙地卡羅搜尋法 (Monte Carlo Tree 
Search)，因而獲得了極大的成功。本研究在過去一年中嘗詴將這種在電腦圍棋上獲得成功
的方法應用在四種遊戲：(1)六子棋 (2)蜜月橋牌 (3)吹牛骰子 (4)三角殺棋，發現蒙地卡羅
搜尋法並不一定適用於所有的遊戲，我們也發展出其他方法來解決這些遊戲的難題。 
 
Monte Carlo Method(蒙地卡羅法)是一種透過隨機取樣來計算問題結果的演算法，被廣
泛的應在影像處理、物理模擬以及數學系統等等。1993 年 Bruegmann 首度將 Monte Carlo 
Method 應用於電腦圍棋程式，其方法是用大量隨機亂下的棋局取代審局函數，在幾乎完全
沒有實作任何圍棋知識的情況下，Bruegmann 的實驗結果顯示程式的棋力達到 25 級。
Bruegmann 將 Monte Carlo Method 應用在電腦圍棋，開啟了電腦圍棋研究的新紀元。2006
年，一種奠基於 Monte Carlo Method 的新技術–UCT (Upper Confidence bounds applies to 
Tree)被發展出來，並且被應用在許多九路的電腦圍棋程式，取得非常好的效果。MoGo、
CrazyStone、Mango 等電腦圍棋程式在 KGS 網路圍棋伺服器大量測詴，包括程式間互下以
及與人類棋手對局。CrazyStone 的作者 Rémi Coulom 表示 CrazyStone 的 19 路版本達到過 1
級的棋力。 
 
UCT (Upper Confidence bounds applies to Tree) 
Mogo 是第一個實作 UCT 的圍棋程式(2006/7)，而 UCT 是從 UCB algorithm (如下圖所
示)所發展而來，UCT 演算法的步驟如下： 
 
1.從根節點(目前的盤面)開始重覆下面兩個步驟，直到滿足停止條件： 
  (1)根據 UCB 公式選擇一個子節點(即一個走步) 
  (2)更新所選擇子節點的資料 
2.透過 Monte Carlo Simulation 得到目前節點的分數 
3.從目前節點由下往上更新所有經過節點的分數與資訊 
 
 
UCB algorithm 
 
  
5 
 
 
貳、研究方法 
 
本節將針對(1)六子棋 (2)蜜月橋牌 (3)吹牛骰子 (4)三角殺棋等四部分說明其研究方
法： 
 
(1) 六子棋 
 
六子棋(Connect6)於 2005 年由國立交通大學吳毅成教授所提出，而自 2006 年開始被
列為 ICGA 電腦奧林匹亞的主要比賽項目之一。六子棋為有鑑於五子棋(Go-Moku)和連珠棋
(Renju)的不公平性，和對更一般的 K子棋類(K-in-a-row)的研究應運而生。雖然目前為止
仍無決定性的論證證明其公平性，然而從許多實驗和統計中也並未發現其不公平的現象和
證據。     
 
圖 1.一局六子棋 
 
六子棋在一個十九路圍棋棋盤進行，由黑白兩方輪流行棋，由黑方先落子，除了第一
步黑方只能落一子以外，第二步開始，黑白雙方均輪流各落兩子。若有一方連成六子，則
該方為勝利者，而若棋盤上已無空點可落子，則宣告為和棋。圖 1 為一局六子棋的例子，
當中由黑方連六得勝。 
 
六子棋雖然規則簡單，其複雜度卻是相當地高，使其成為一個非常具有挑戰性的問題。
表 1為六子棋與其他棋類複雜度的比較和對照。 
 
表 1. 棋類複雜度之比較 
  
7 
 
一個盤面所下出的棋步仍有 20% 以上的機率下出壞步，比例算是相當高。 
 
UCT演算法會有如此不盡人意的表現，可能的原因推測與之前我們在黑白棋(Othello)
上應用 UCT 演算法的原因類似。而不良的表現反應相較之下更大，很有可能跟六子棋比黑
白棋的複雜度更高有關。 
 
當然也許針對 UCT 演算法應用在六子棋上，可以提出一些新的 heuristic 或資料結構
等，看看是否能有效地提升效能。然而現今大多數頂尖六子棋程式所需的運算資源並不大，
相較之下，應用 UCT 演算法在運算資源上的需求偏高，而且這個需求的距離相當大，因此
研究的重心便轉往他處，因此詳細的實驗數據結果等，在此便不多加討論贅述。     
 
2 六子棋上的一個防禦性策略 
 
我們從一顆棋子在棋盤上所能發揮的影響力開始。我們視棋盤為一個由長度為 6 的直線所
構成的集合，而這些直線即為有可能在其上連六而決定勝負結果的直線，我們稱這些直線
為 potential line。在這樣的觀點之下，一顆棋子所發揮最直接的影響為增加包含這顆棋
子的 potential lines 連成 6 的機會，而這些 potential lines 所構成的區域即為該顆棋
子所能發揮影響力的範圍，即為該棋子的 influential area。 一個棋子的 influential 
area 為以該棋子為中心，長度為 11 的四條直線所構成。圖 2 中標灰色方格的部份即為
influential area。當然 influential area 也會因一些情況調整，如該顆棋子的
influential area 裡碰到棋盤邊緣或對手的棋子，在他們之後的點對該顆棋子便無影響
力，因自方的棋子就算落在那些點上，也無法和該顆棋子在那直線上有所連結。圖 3 便是
influential area經過調整的一個例子。 
 
在定訂出範圍之後，接下來便要進一步能夠用能量化的模型來表示影響力的大小。除了
範圍以外，在這模型裡我們還需反映出二個基本的關係: 
1. 棋子之間的連結性 (connectivity) 需高於自由度 (degree of freedom)。 
2. 離該顆棋子愈遠的點，棋子所能發揮的影響力愈小。 
 
  
9 
 
若是一個空點則 Pj,ak 為 ε，若為所考量一方的棋子則為相對應的權重 Wk ，而若為對手的
棋子或邊緣或在這二者之後的點則為 1。圖 4 即為 Pj,ak 的相對應位置。 
 
圖 4. Pj,ak 的相對應位置。 
 
決定各權重之數值為由理論和實驗所推導而來。因空點亦有一個權重 ε, 若權重值沒
訂好會發生重要性排位錯亂的情形。圖 5 即為一例，其中二個棋盤中三角形所標示的點在
水平方向上，左邊全是空點的情況，需要小於右邊有一個 己方棋子(黑子)的情形。 
 
  
圖 5.左邊三角形的審局分需大於右邊 
 
而要解決這樣錯亂的情形，在訂定權重時，若能滿足下列關係即可避免: 
 
 
 
亦即所有點為空點的情況要小於某個有棋子的權重。經過理論推導和實戰調整，我們定空
點 ε=2, 而其他所得出的參數如下: 
  
11 
 
有鑑於棋盤的廣大，加上脫離戰場的一方未必能得利，甚至有可能反而給對手很大的
優勢的性質，我們可以有效得縮小我們考慮的候選棋步的範圍。對於對手的每一步棋，我
們可以合理地假設它都有它的目的和意義，意圖要和其他的棋子做連結。因此，我們只要
每次在其附近的點進行切斷即可。經由實驗和經驗，我們挑選候選步的範圍訂為以對手上
一步的兩顆子為中心，往四方展開 5x5範圍裡的空點即為我們的候選範圍，如圖 6所示。 
 
 
 
 
    
 
 
 
 
 
 
 
 
 
 
圖 6.灰色方格所標的點，即為白棋下一個候選範圍 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
圖 7.防禦性策略流程 
  
13 
 
 
圖 9.使用 pattern table 出現錯誤的情況 
 
 
圖 10.特殊處理的棋形例子 
 
圖 10為以上 3中(a)、(b)、和(c)的例子。其中 A為 3(a)情況，B為 3(b)的情況，而
C 為 3(c)的情形。A 為將原來錯誤算為 4 調整回為 2。B 則是錯誤算為 2 調整回為 1, 而這
個情形的調整最為重要，因為一連串迫著的序列會因為這個出現計算錯誤的情形而找到錯
誤的解，而使得程式判斷錯誤，以為能攻擊成功，其實是失敗，有可能因而造成對己方不
利的情形。C 則是因為二子的距離甚遠，不會互相重疊影響，因此沒有任何調整變動，還
  
15 
 
 
圖 12.找出防守棋步的 sliding window algorithm 
 
實驗結果 
I . 純粹防禦性策略 
 
第一個實驗是由純粹由防禦性策略對抗六子棋程式 NCTU6 和 X6，而無任何形式的搜
尋。這兩支程式皆在電腦奧林匹亞上得到過金牌，為當今一流之程式。 
對抗 NCTU6 的結果如下: 
 
表中的 Result 列中，D 為和棋，W 為我方贏棋，而 L 則為我方輸棋。因防禦性策略完全無
攻擊的考量，所以不會去贏棋，所以全部和棋為最好的結果。從表中可以看到純防禦性策
略即可以與 NCTU6 達到完美的和棋，顯示我們的策略相當有效。 
 
而對 X6 的結果如下: 
  
17 
 
 
表中 Re-Search的部分為需重新調整的次數，而 candidates為其每次調整考量過的候選棋
步數。可以發現結合迫著搜尋後即可與 X6 達到完美的和棋。另外其實大部分的情況下是不
需調整，就算要，考量的候選棋步數也不多，由此可見原防禦性本質上是非常有效，而非
光靠迫著搜尋的調整。 
 
對抗 MeinStein 的結果如下: 
 
對 meinStein 有較多的勝負而非和棋的結果，而我們的程式則是勝了 60%的棋局，不但顯
示防禦性策略的有效，也展示了迫著搜尋的成果。 
 
Kagami 為我們採用這些技術，再加上一些其他技巧如空步搜尋(Null-move heuristic)
等而設計出的六子棋程式。其於 2009 年於西班牙 Pamplona 所舉辦的 ICGA 電腦奧林匹亞
中獲得第四名。比賽當中其速度效能明顯高於其他程式，程式規模上也小於其他程式，而
Kagami跟銀牌程式 MeinStein 和了一局，另外也贏了銅牌程式 Bit2 一局，再次證明了防
禦性策略結合迫著搜尋的有效性。未來若結合一些攻擊性的策略，必定能更上一層樓。 
 
(2) 蜜月橋牌 
橋牌(Bridge)是一種非常普遍的撲克牌遊戲，玩家以牌技及運氣獲取牌磴。蜜月橋牌
則是橋牌的一種變型，只需要兩個玩家即可成局。蜜月橋牌的玩法大致上與一般橋牌相同，
只是多了一些變化，大致可分為叫牌、換牌以及打牌等步驟。以下對蜜月橋牌的玩法做簡
單的說明: 
1.遊戲使用標準的撲克牌(不含鬼牌)共 52 張牌，首先雙方各發 13張牌，並將剩餘的 26張
牌覆蓋放置在牌桌中，玩家僅能看見自己手中的 13張牌，雙方各以手中的牌來進行叫牌。 
  
19 
 
 
換牌階段示意圖 
 
蜜月橋牌出牌規則: 
第一輪由上一階段(叫牌)未叫到牌的玩家先出牌，先出牌的玩家打出的牌稱為「引
牌」。引牌可以是手上的任何一張牌，但後出牌的玩家則必頇「跟出」同一花色（亦即，必
頇打出和引牌同樣花色的牌），除非他已經沒有該花色的牌。兩人「牌型」較大者下一輪先
出牌。 
 
3. 換牌階段結束後(牌桌中的牌都抽完後)開始打牌階段，雙方手上各自擁有十三張牌，此
時比賽正式開始計分，共有十三回合，由未喊到合約的玩家先出牌，每回合出牌牌型較大
者獲得一牌磴，如同換牌階段，牌較大者下一回將會先出牌。十三回合結束時，雙方手牌
也出完了，最後計算喊到合約的玩家是否達成勝利條件。 
  
21 
 
 
 
     
    在程式模擬計算過程中，我們會對四個花色的叫牌做計算，記錄每一次模擬時各花色
的分數，最後取平均經由審局函數選出勝率最高的叫牌決策。 
  
23 
 
 
 
以下為我們的程式(com)和作者(player)測詴 19場的數據及結果，設定蒙地卡羅模擬
次數為 50次。 
合約 合約方 電腦評估 換牌結束 打牌結果 誤差 勝利方 
2♦ com 7.92 6 7 -1.92 player 
3♥ player 5.08 6 7 0.92 com 
2♦ player 5.34 5 7 -0.34 com 
1♥ player 6.02 4 4 -2.02 player 
1♠ player 5.84 4 5 -1.84 player 
2♣ com 7.42 7 7 -0.42 player 
2♥ player 6.88 4 5 -2.88 player 
4♠ player 4.5 4 4 -0.5 com 
1♠ player 6.1 6 7 -0.1 com 
2♥ com 9.25 10 10 0.75 com 
3♠ player 2.95 3 3 0.05 player 
3♦ player 3.56 3 5 -0.56 com 
2♥ com 8.6 9 9 0.4 com 
2♥ player 4.54 3 4 -1.54 player 
2♠ player 3.72 5 5 1.28 player 
  
25 
 
當參與遊戲的玩家為五人時，總複雜度約為  341.67 10 。吹牛骰子的遊戲歷程與規則
相較於其他遊戲都簡單的多，但卻由於過多的不確定性，使得賽局樹的分支度相當大，使
搜尋空間提高許多。 
以下我們詴著探討 UCT演算法運用在吹牛骰子遊戲上的可行性。 
若要對這個遊戲進行遊戲樹的展開，則此遊戲樹的節點可分為兩部份，第一部分為對
手的底牌牌型，緊接在根節點的下一層展開。第二部份為對手的各種行動。以兩人賽局為
例，大致如下圖。 
 
 
依 UCT 演算法的運作方式，在一次的模擬當中，當接下來要走訪的是玩家牌型的節點
時，就會隨機產生一副對手的牌組，而當要走訪玩家決策的節點時，就隨機從所有可行的
走法中挑選一個繼續展開。直到達到葉節點為止便將勝負結果回傳。如此重複進行大量的
模擬，等到達到了規定的模擬次數或時間用盡時，便依據模擬結果挑選認為勝率最高的決
策。 
而被挑選的決策，將會指向一條已經由 UCT 演算法探索到一定深度之後，確信有相當
高勝率的路徑，然而這麼作的問題在於，被挑選的那條路徑，是在已經於第二層的走訪時
假設了對手的牌型的前提下進行展開，其後我方所做的所有決策，都是針對該牌型。然而
實際上在遊戲過程中，關於對手底牌的一切資訊是始終被隱藏的。 
並且 UCT 在發現一條勝率較高的路線後，將會漸漸的減少對其他路線的關注，這麼一
來，可能會有相當多的牌型會沒有被展開足夠的次數，但事實上均勻且公平的骰子，被擲
輪到我方作決策 
對手的各種牌型 
雙方決策
交互展開 
  
27 
 
隨機的選取策略 
吹牛骰子也是非遞移性的遊戲：「總是說謊的玩家」會輸給「總是認為對手說謊的玩
家」。「總是認為對手說謊的玩家」會輸給「總是說實話的玩家」。....，依此類推。 
由於策略的非遞移性，並不存在使用單純策略的優勢策略。接下來考慮使用混合策略
的情形。當我們在考慮不同策略的混合比例時，若能事先知道對手的行為偏好，例如喜歡
說謊，那麼我們便能採取相對應的措施，調高認為對手說謊的機率來提高獲勝的機會。然
而達到這個目的的困難點在於沒有辦法事先知道對手的偏好。雖然常有以經驗法則來假設
對手行動意義的作法，但許多時候各種選擇的孰優孰劣難以釐清，若經驗法則的假設錯誤，
可能造成反效果。 
找不到單純優勢策略，而使用不同比例的混合策略仍有失敗的風險，也就是說並沒有
任何有把握能贏的策略。但我們能設法絕對不吃虧。 
以同樣的策略矩陣為例，由於不知道對手是以何種比例決定策略，於是我方也沒有任
何決定比例的根據，但當我們單純以各 50%的均等機率採取兩種策略，則無論對手採取任
何比例的分配，我方都能有至少 50%的勝利機率。 
 
 乙 
甲 
 策略 1 策略 2 策略 3 策略 4 …… 策略 k 
策略 1 平 乙 甲 甲  乙 
策略 2 甲 平 乙 甲  乙 
策略 3 乙 甲 平 乙  甲 
策略 4 乙 乙 甲 平  乙 
……       
策略 k 甲 甲 乙 甲  平 
若我們能將完整的策略矩陣全部畫出來，就可以達到這個目標，但跟簡化版的矩陣不
同的是，完整的策略矩陣非常的大，我們不可能將它全部畫完，於是只好退而求其次，希
望能夠採用某種方法，其所展現出來的效果，能夠近似於在所有的策略中隨機挑選。 
為達到這個目的，以下分成三個部份做討論：是否抓牌、如何叫牌、以及流程安排。 
一、是否抓牌 
「對手的叫牌成不成立？」面對這樣的問題時，第一感通常是直接計算機率，若叫牌
成立的機率大則判斷成立，反之則判斷不成立。 
  
29 
 
找出候選的叫牌方式來讓這個工具評估。 
這裡因為不能確定對手的牌，只能找出「期望上」成立的叫牌，也就是隨機產生對手
的牌組，與我方搭配後找出所有成立的叫牌，由其中依照成立機率的比例隨機選取一個，
再用上述的方法判斷對手會不會抓，若是符合「叫牌成立而對手會抓」的條件，則採用此
種叫牌。 
 
上圖為一叫牌的例子，對手叫牌「兩個 3」後，我方隨機產生一副對手的手牌，並找
出所有大於「兩個 3」的牌組當做候選叫牌，接下來依照每個候選牌組成立機率的比例從
中選取一個，選取的比例分配可參考下表。 
個數 5 4 3 2 1 0 
組合數 1 25 250 1250 3125 3125 
累積數 1 26 276 1526 4651 7776 
例如「兩個 5」的叫牌需要對手提供一顆 5 才能成立，而對手擁有一顆以上的 5 的手
牌種類數，根據表上所列為 4561種，而「兩個 6」需要對手提供兩顆 6，可能種類數為 1526
種，依此類推。 
假設我們選到「三個 4」，接下來則要再猜測對手的想法，從 0~5隨機挑選一個數當作
是對手所猜的「我方所擁有的 4的個數」，若猜測為一個，再加上之前所產生的對手牌組中
  
31 
 
果各自成立的機率，也就是希望擁有比較高正確率的一方也會有比較高的機率被選到。並
且必頇能夠一口氣解決上述提到的兩種固定流程時會遭遇的問題。 
分別考慮過抓牌及叫牌的結果後，可能會有以下四種組合： 
1. 決定不抓，且有牌可叫 
2. 決定抓牌，且無牌可叫 
3. 決定不抓，但也無牌可叫 
4. 決定抓牌，但也有牌可叫 
在情況 1及情況 2，較不會有疑慮，因為僅有一種選擇，而在情況 3，則是無路可走的
情況，不得已只好再重新考慮一次抓牌及叫牌。而情況 4 則是遇到兩種可選的路，雖然可
以找到許多方法來決定如何挑選其中一種，但在這裡我們採取的方法是捨棄這一輪的處理
並重新考慮一次抓牌及叫牌。依此流程直到有情況 1或 2出現時，就做出最後的決定。 
實驗結果 
目前並未找到他人有實作吹牛骰子遊戲的系統，為方便系統測詴、除錯與展示，我們
自行實作了純文字介面的電腦自動對局程式與圖形介面的人機對局程式。 
測詴程式所使用的手法為模擬人類玩家在進行遊戲時可能採取的玩法，得出幾種簡易
分類。對於吹牛骰子遊戲，以下列五點來當作參數： 
1.「誠實 or 說謊？」：輪到自己叫牌時，有比較大的機率說實話或謊話? 若設定為實
話，則每次的喊牌都有 70%的機率喊擁有個數最高的牌，30%的機率喊自己所缺門的牌。設
定為謊話時則相反。 
2.「信賴 or 猜忌？」：對於對手的叫牌，比較傾向相信與否? 若設定為信賴，則對於
對手的喊牌，會隨機認為對手擁有的個數為「等於對手所喊的」或「對手所喊的減一個」。
設定為猜忌時則隨機認為對手的個數為「對手所喊的減一個」或「對手所喊的減兩個」。 
3.「上限高 or低？」：對於一局遊戲，所能夠容忍的最大叫牌個數?也就是到達某個上
限個數就必定會抓，設定為高時，上限會隨機設定為 5或 6，設定為低時，則隨機設定為 4
或 5。 
4.「攻擊強 or 弱？」：即會不會有「跳叫」的行為發生?例如對於「兩個 3」，接著喊
「兩個 4」便可以壓過，若喊出「三個 4」便算是跳叫的喊法。設定為在有牌可喊的情況下，
絕不跳叫、或有一半機率跳叫。 
5.「傾向抓牌 or 叫牌？」：此測詴程式會先分別尋找抓牌及叫牌的可能性再做挑選，
  
33 
 
 
程式勝率為 245/500=49%，展現出約略與人類玩家相抗衡的實力。 
由於吹牛骰子遊戲的不完全資訊性與允許玩家的欺騙行為等要素，我們認為採取 UCT
演算法的成效或許不大。更進一步的，我們也捨棄了遊戲樹的搜尋，而改從賽局理論的角
度分析，找到了一個以隨機猜測為基礎的簡單明快做法，且發揮出不錯的成效。 
(4) 三角殺棋 
 
三角殺棋是兩人進行的益智遊戲，一開始的遊戲棋盤是排成正三角形，棋盤高度即為
此三角殺棋之層數。遊戲規則主要是有兩種，一種是從棋盤取得最後一顆子獲勝，另一種
是從棋盤取得最後一顆子為失敗。每次玩家選取的棋子，在取子的時候不限定遊戲者取子
數目，但必頇相連（不可斷掉）且成同方向的一直線，而且必頇至少取一子。決定好玩家
取子先後次序，雙方再不斷地輪流取子，總有一個時刻棋子會被取光而決定勝負。而此遊
戲只有贏或輸，並沒有和局這種狀況。 
 
文獻探討 
 
  在許舜欽教授的論文中[4][5]，因為該遊戲難以用傳統的分析方式解決，故直接使用
倒推法來解該問題。也就是說，並不使用估值函數及 MIN-MAX 搜尋，或配上 α-β切捨。
倒推法主要利用了電腦快速運算及大量記憶的特性，將遊戲的所有可能狀況全部計算出
  
35 
 
   
      (a) 編排成三角形棋盤               (b) 三角殺棋編碼盤面 
圖 14. 三角殺棋編碼 
 
  編碼完的三角殺棋對應到 36 bit整數的方式就如圖 15，每一個 bit為 0或 1。 
 
 
圖 15. 位置對應編碼示意圖 
 
  編號 2
36
-1代表棋盤上全部棋子皆被劃過，然後由此狀態的勝負倒推到 0，也就是倒推
到棋盤上所有棋子皆存在的起始狀態，便可以決定三角殺棋的勝負。這個演算法最早是許
舜欽教授提出[5]，如圖 16。 
 
  圖 16是解規則為劃掉最後一個棋子為負，若要將規則改為劃掉最後一個棋子為勝，我
們只需將一開始時 S(236-1)的狀態設為必敗即可。因為根據演算法一開始的設計原則，目
前狀態是由以前狀態推導出來。所以當 S(236-1)設為必敗時，也就是所有棋子被劃完的前
一個狀態皆為勝，也就符合了劃掉最後一個棋子為勝。 
 
  在使用倒推法之前，必頇先建立八層三角殺棋的可行著手集合。可行著手集合的建立，
也是延續許舜欽教授在「利用電腦研究七層三角殺棋的勝負問題」中所提到的建立方法。 
 
  可行著手集合的建立方法，是根據我們在倒推法一開始建立好的編碼盤面，如圖
17(a)。然後根據資料結構的狀態。如圖 17(b)可行著手劃掉了棋盤上的 7、8、9、10，再
根據圖 2-7的示意圖，我們可以知道 bit7、bit8、bit9、bit10 皆為 1，其他 bit 皆為 0，
這樣的著手編碼後二進位值為 000000000000000000000000001111000000，轉成整數值為
  
37 
 
  然後我們建立一個棋盤上每個棋子之間的位置關係圖，針對棋子的右邊、左下、右下
建立一個連結表格。因為三角殺棋有這三個方向的可行著手，我們建立這個表格的目的，
就是為了檢查各方向是否還有相鄰的棋子。建立的連結表格下表。其中 0 表示該方向並沒
有相鄰的棋子。 
位置 右邊 左下 右下 
1 0 2 3 
2 3 4 5 
3 0 5 6 
4 5 7 8 
5 6 8 9 
6 0 9 10 
7 8 11 12 
8 9 12 13 
9 10 13 14 
10 0 14 15 
11 12 16 17 
12 13 17 18 
13 14 18 19 
14 15 19 20 
15 0 20 21 
16 17 22 23 
17 18 23 24 
18 19 24 25 
19 20 25 26 
20 21 26 27 
21 0 27 28 
22 29 29 30 
23 24 30 31 
24 25 31 32 
25 26 32 33 
26 27 33 34 
27 28 34 35 
28 0 35 36 
29 30 0 0 
  
39 
 
本節將針對（1）Divide-and-Conquer（2）搜尋必勝著手（3）壓縮盤面狀態資料結構
（4）改進倒推法的記憶體管理（5）倒推法的修改等五部分說明其研究方法： 
 
（1） Divide-and-Conquer 
 
  在本研究過程中所使用的演算法與資料結構，是延續許舜欽教授在「利用電腦研究七
層三角殺棋的勝負問題」論文中所提到的演算法[2]，其演算法名稱為倒推法。在我們這個
研究中也是使用倒推法來判斷八層三角殺棋的勝負。在初期的研究中，是預期使用
Divide-and-Conquer 的概念下去尋找三角殺棋勝負結果，將大問題切割成一些小問題，先
去計算小問題的解，並儲存結果以供稍後的計算使用，然後建構成整個問題的解。在這裡
我們是切割為兩個子問題。 
 
  為了尋找八層三角殺棋勝負的方便性，我們首先考慮將遊戲規則變更為劃掉最後一個
棋子為勝，也就是三角殺棋在前言提到的另一個規則。這點與許舜欽教授的論文有些許不
同，該論文中是以劃掉最後一個棋子為負。所以，一層到七層的結論必頇重新尋找，但有
鑒於搜尋空間遠小於八層，此變更方式仍然是值得。而且也把另外一種遊戲規則的三角殺
棋結果給找出來，對學術上研究也是有幫助的。 
 
  在這裡之所以要變更遊戲規則的原因是，為了要運用 Divide-and-Conquer的概念，故
將整個三角殺棋盤面切割為兩個小區塊。如圖 20，一個小區塊是三角形，另一個小區塊是
梯形。如此一來，只要能找到三角殺棋上面三角形盤面為先手必敗，下面梯型為先手必敗，
則可證明出劃掉最後一子為勝的八層三角殺棋為先手必勝。當然會有這樣的推測，主要是
因為許舜欽教授在劃掉最後一子為負的三角殺棋中，一、三、五層的結論是為先手必敗。
而第六、第七層卻是先手必勝，這樣似乎可以歸納出越多層，對先手越有利。 
 
 
圖 20. Divide-and-Conquer 示意圖 
 
  但是我們將一到七層的勝負結果，使用程式分析完成之後，發現結果並不如預期一開
始猜想那樣，可以將分割結果拿來使用的並不多。而三角殺棋的勝負如下表，根據三角殺
  
41 
 
 
圖 21. 七種八層三角殺棋編碼表 
 
 
圖 22. 規則為下到最後一子為敗，八層三角殺棋必勝的第一步 
 
  
43 
 
憶體，而虛擬記憶體相對於實體記憶體的速度是極慢的。若我們一次向系統要求 8G Bytes，
則勢必會影響到八層三角殺棋求解的時間。 
 
 
圖 24.壓縮盤面狀態之資料處理示意圖 
 
 
  為了降低這個問題所造成的影響，我們使用一個記體體管理策略，程式有需要該記憶
體時才配置給它。前面我們已經將八層三角殺棋所需的 8G Bytes 盤面資訊分割成四段 2G 
Bytes 的記憶體，如圖 25。我們即可以在程式求解的過程中依程式的需求，根據記憶體的
需求再向系統要求記憶體。如此一來在八層三角殺棋求勝負解程式執行的過程中，該程式
的記憶體需求會隨著程式一步步求解的需要，依序向系統要求 2G Bytes，共四次。 
 
 
圖 25.記憶體要求示意圖 
  
45 
 
我們將程式的結束條件變更為「若找到第一手可行著手會造成三角殺棋先手勝」如此一來，
我們就可以再替八層三角殺棋求解程式減少一些時間。經由改良後的演算方法我們順利找
到了八層三角殺棋的結果，其必勝的第一步可行著手的結果如圖 27。 
 
 
圖 27. 規則為下到最後一子為勝，八層三角殺棋必勝的第一步 
 
  我們的研究過程到此，已經證明了八層三角殺棋在這兩個規則之下皆為先手勝，是一
個對先手有利的遊戲。而我們使用了這個方法共花費了 52431秒，也就是 14.56個小時。 
 
三角殺棋的結論 
 
  本研究證明了八層三角殺棋的兩個規則下的勝負問題，並且將其必勝的可行著手皆尋
找了出來。而我們主要的目標是是冀望能夠像 Nim遊戲一樣，尋找出一個通則來有效解各
層的三角殺棋，畢竟三角殺棋是 Nim遊戲的一種變形。在研究的過程中，我們也針對三角
殺棋的特性，提出了多種的改進方法。雖然研究過程中花費許多時間在倒推法上，但我們
也研究出來所有先前求出的盤面是可以運用到往後幾層的三角殺棋。所以在研究的角度
上，獲得了許多寶貴的經驗，對往後研究有很大幫助。我們也提出了一個管理記憶體的方
式，使得在求解多層三角殺棋的過程中，盤面資訊狀態可以儲存，這樣就可以利用較少量
記憶體解多層三角殺棋的結果了。希望這些經驗能作為未來三角殺棋演算法相關研究的參 
 
參考文獻 
[1] I -C. Wu and D.-Y. Huang, “A new family of k-in-a-row games,” in the 11th 
Advances in Computer Games Conference (ACG’11), Taipei, Taiwan, September 2005. 
 
[2] I.-C. Wu, D.-Y. Huang, and H.-C. Chang, “Connect6,” ICGA Journal, vol. 28, 
no. 4, pp. 234–241, Decemeber 2005. 
 
[3] S.-Y. Liou, “Design and implementation of computer connective 6 program x6,” 
  
47 
 
的金牌。另外有來自日本的程式 Zen，這個程式的作者為 Yamato，在 2009 年五月於西
班牙舉辦的 14th Computer Olympiad 的電腦圍棋比賽中，Zen 獲得了 19 路圍棋項目的
金牌。我們能有這樣的成績，殊為不易。 
II. Kagami 六子棋程式為我們採用本計畫所研發的技術，再加上一些其他技巧如空步搜尋
(Null-move heuristic)等而設計出的六子棋程式。其於 2009 年於西班牙 Pamplona 所
舉辦的 ICGA 電腦奧林匹亞中獲得第四名。比賽當中其速度效能明顯高於其他程式，
程式規模上也小於其他程式，而 Kagami 跟銀牌程式 MeinStein 和了一局，另外也贏
了銅牌程式 Bit2 一局，再次證明了防禦性策略結合迫著搜尋的有效性。未來若結合
一些攻擊性的策略，期望能更上一層樓。 
III. 由成果觀察，本研究的內容與原計畫相符，也達到原先預期的目標。此外我們使用本
計畫發展的部份相關技術實作成比賽程式參加國際比賽，亦有不錯的成績，未來可繼
續朝向改善演算法與加快實作效能等方向發展。 
詞。 
 
 
圖二：ICGA 主席 Herik 在開幕式致詞 
 
圖三：我在發表論文時的照片 
收穫豐富的西班牙之行，搭機返回台灣。 
 
 
圖五：Erica 對 Fudo Go 的比賽照片 
 
圖六：黃士傑學長的程式 Erica 之戰績(第 6 名) 
 
二、 與會心得 
 
在今年的 Advances in Computer Games 會議上，我聽聞許多競局問題或競局遊戲目前最
新的研究進度，其中吸引最多學者研究的是電腦圍棋程式的演算法開發與改良，在二年前由
於有學者提出將 Monte-Carlo Tree Search 演算法應用於圍棋程式上，使得電腦圍棋程式的棋
力有突破性的大幅增長，因此這幾年很多學者的研究主要是在探討如何 refine 這個演算法使
它有更好的表現或是探討這個演算法平行化的相關議題，此問題的研究在這幾年中蓬勃發
展、相關圍棋程式的棋力也一直進步中。 
 
國科會補助研究生出席國際學術會議與比賽報告 
 
參加會議與比賽：The 12th Conference on Advances in Computer Games (ACG12) and 14th 
Computer Olympiad 
 
時間：2009/5/11-2009/5/13 
 
地點：Pamplona, Spain 
出差人員：劉雲青 
 
參加組別：Connect6 
 
程式名稱：Kagami 
程式作者：劉雲青 
 
摘要 
 
此次本人開發程式 Kagami 赴西班牙 Pamplona 參與 2009 ICGA Tournaments 14th 
Computer Olympiad 中六子棋 Connect6 的比賽，旨在測詴我們所新發展的防禦性策略，還
有和各國團隊交流現今 Connect6 最新的發展和技術。這次我們所採用的防禦性策略為這領
域所首見，其再加上迫著搜尋(threat-space search)在國內的初步測詴中展示了很大的潛力。 
Kagami 為採用結合迫著搜尋的新防禦性策略的程式，另外還加上一些空步搜尋 (null-move 
heuristic)等技術而成。 
 
目的 
 
為了拓展國際視野和進行學術交流，因此在林順喜老師的指導和支持之下，學生劉雲
青和學長黃立德分別參加了 ICGA 電腦棋類奧林匹亞競賽(2009 ICGA Tournaments 13th 
Computer Olympiad)和 2009 年電腦棋類研討會(12 th Conference on Advances in Computer 
Games )。 
 
ICGA 電腦棋類奧林匹亞競賽是人工智慧中電腦棋類領域裡歷史最悠久也是最具權威
性的一項競賽，從 1989 年開始，每年舉辦一次，到現在已經是第 14 屆了，每屆世界上各項
棋類遊戲最頂尖的程式和專家學者都會參與這項盛會。電腦棋類研討會(ACG)則為電腦棋類
中最重要的研討會，每年這領域中的專家學者都會參加並交流最近的發展和探討最新的課
題。 
 
館後，收到在台灣實驗室學弟的一些後續的結果，當中發現了一個 bug，當天晚上便趕工修
復。 
 
第二天比賽第一、二場對上了北京理工的 Bit 和 Bit2，Kagami 均不幸敗陣下來。北京
理工為去年的銀牌隊伍，今年他們出了由二個不同團隊所開發的兩支程式 Bit 和 Bit2 實力都
相當堅強。 
 
其後的比賽便是雙循環的第二個循環，Kagami 再次從 Nomi6 手上取得勝利，然而對
MeinStein 和 Kavalan 便不幸敗陣。這兩局敗裡 Kagami 都是執黑棋，下出的棋步也有些出
乎意料，再之後回國的後續測詴中發現應該是 Null Move Heuristic 的地方出了問題。對 Bit 
則是沒有意外地吃了敗仗，然而對Bit2則是出呼意料的獲得勝利。Kagami 和 Bit2 原已是纏
鬥得難分難捨，眼看就要和棋了，然而最後 Kagami 找出了一著不易發現的奇著，獲得了勝
利。最後 Kagami 以四勝一和五敗的成績獲得了第四名，對剛發展尚未成熟的技術而言，這
算是滿意的成績。 
 
詳細的排名結果如下表： 
 
 
 
 
 
 
 
以下是我們在會場所拍攝的一些照片: 
 
學長黃立德報告關於 deductive game 論文 
 
  
Kagami 對上北京理工 Bit 
 
 
圍棋賽中黃士傑的 Erica 對上日本的 Fudo Go 
 
參加比賽心得 
 
這次比賽在歐洲舉辦，因此參賽隊伍較去年少一些，然而參賽的國家數量是增加的，
其中日本更是首次參加，往後應該也會在 Connect6 上多所琢磨。 
 
MeinStein 這次參賽的故事甚為特別，van der Storm 先生和 Krabbenbos 先生的友情讓
人感動。MeinStein 最後一次參賽獲得了銀牌的成績，最後將以 open source 的形式繼續在電
腦 Connect6 領域裡發光發熱，我想這是紀念 van der Storm 先生最好方式，也是對身為一個
programmer 的他的最高敬意。 
 
