 
 
 
basic strategy with the ability to locate and isolate 
malicious nodes. 
The remainder of this paper will be presented 
as follows: we introduce the path authentication 
mechanism in section II and provide a security 
and cost analysis in section III. 
II. PROPOSED SCHEME  
We propose a path authentication mechanism, 
Random Assignment Path Authentication 
(RAPA), with the flexibility of trading 
performance for enhanced security. Its 
non-repudiation feature allows it to resist a 
blackmail attack, whereby a malicious node 
deliberately incriminates a normal node. We will 
demonstrate a method to isolate a malicious node 
that attempts to modify the routing information. 
A. Security Assumptions  
We assume the underlying data link layer 
provides reliable bidirectional transmission. Each 
transmission is received by all neighbors, whom 
operate in promiscuous mode. Although the 
physical transmission medium in ad hoc networks 
has a fundamental Denial-of-Service 
vulnerability, such as jamming attack, we exclude 
this from our work. We also do not address 
attacks in the Medium Access Control layer.  
In addition, we assume the pre-distribution of 
the necessary public keys for broadcast 
authentication through techniques [9] outside the 
scope of this work. Furthermore, the initiator and 
target node are assumed to be trusted without loss 
of generality. 
B. Random Assignment Path Authentication 
(RAPA) 
To defend against the cooperative-n attack 
model, RAPA extends RAP [24] as a general 
secure routing component by utilizing HORS 
[13], an efficient authentication mechanism. For 
convenience, RAPA will focus on the behavior of 
delivering the Route Request message in the 
secure Neighbor Detection protocol of RAP. In 
designing a secure approach to forward Route 
Request messages, our scheme satisfies two main 
characteristics: the forwarder must (1) 
authenticate the initiator of a Route Request and 
(2) confirm the correctness of a Route Request’s 
source route field. Specifically, the forwarder 
must verify that each entity in the source route 
field did indeed deliver this Route Request. 
Before passing on the Route Request, the 
forwarder should sign the source route field. 
Instead of appending the full signature, however, 
we can lower the cost of generation and 
verification using evidence. Fig. 1 illustrates the 
basic flow process of a forwarder in RAPA. 
 
Fig. 1.  Flow process of a forwarder. 
Our scheme provides the initiator with the 
ability to adjust the security level of the Route 
Request path. A higher security level reduces the 
possibility of an attacker injecting bogus routing 
information into the Route Request message; 
however, it will degrade the routing performance. 
We suggest a strategy that raises the security 
level when construction of an authentication 
route path is in doubt. Fig. 2 depicts the decision 
process of an initiator in selecting a security level. 
C. Notations 
We use the following notation: 
z S denotes a source (initiator) node 
z D denotes a destination (target) node 
z AÆB [M] : node A sends message M to 
node B 
z AÆ* [M] : node A broadcasts message 
 2
 
 
 
performs RAPA_Verify to check the validity of 
the Route Request. Then, the forwarding node 
executes RAPA_Sign on valid messages to 
generate and append its signature to the Route 
Request. Otherwise, the node discards invalid 
messages. The forwarder may also announce the 
presence of a malicious node. 
Parameters: t, k, n, ,f’, f }{ , SK piSK si
ts : t public slices for standard signature 
ks : choose k private slices as signature 
n : n private slices assigned by initiator 
SK si  : node i’s private keys for standard signing 
SK pi  : node i’s private keys for path 
authentication  
f’ : previous hop node’s identity 
f : current forwarder’s identity 
init : initiator’s identity 
RAPA_Verify { 
Input: a route request message RREQ 
{j1…jk} = split Hash(RREQ[initiator, target, 
assigned random list]) into k indexes of index’ 
length is log2t bits 
IF ≠Hash( ) or 
≠Hash( ) 
1j
s
initPK
1j
s
initSK
kj
s
initPK
kj
s
initPK
THEN Output: FALSE 
End-IF 
{i1…ik} = split Hash(RREQ[initiator’s 
signature, source route, hops authenticator list]) 
into k indexes of index’ length is log2t bits 
IF =Hash( ) and =Hash( ) 
1
'
i
s
fPK
1
'
i
s
fSK
ki
s
fPK '
ki
s
fSK '
THEN select all nodes i in {source route} 
IF =Hash( ) and =Hash( ) 
1π
p
iPK
1π
p
iSK
n
p
iPK
π n
p
iSK
π
THEN Output: TRUE 
ELSE 
Broadcast RREQ to announce the previous 
node f’ as malicious nodes 
End-IF 
ELSE 
Output: FALSE 
End-IF 
} 
RAPA_Sign { 
Input: a route request message RREQ 
{π1…πn} = RREQ[assigned random list] 
σf = { , …, } 
1π
p
fSK
n
p
fSK
π
Append σf to RREQ 
Split Hash(RREQ) into k indexes and interpret 
as an integer ij for 1≦j≦k 
Σf = { , …, } 
1i
s
fSK
ki
s
fSK
Replace Σf in RREQ 
Forward RREQ 
} 
Fig. 4.  Signature verification and generation of 
forwarder. 
F. Defense against Cooperative Attackers  
We demonstrate how RAPA can protect the 
routing protocol from cooperative attacks. Fig. 5 
provides an example  
VerifyRAPAF
MMSsDSRREQM
MMSsM
SKM
MSsDSRREQM
ASsM
SKM
sDSRREQS
MMM
MM
S
M
MM
MM
A
S
M
MM
_:
],
,2,1,,,,,,[:*2
],2,1,,[:2
)]([:2
],,1,,,,,,[:*1
],,,[:1
)]([:1
],,,,,,[:*
22,1
2,12
22
11
1
11
Σ><
><Σℜ→
><><Σ⎯⎯←Σ
ℜ⎯⎯←
Σ><><Σℜ→
><><Σ⎯⎯←Σ
ℜ⎯⎯←
<><>Σℜ→
σσ
σσ
σ
σ
σ
σ
 
Fig. 5.  Cooperative attack scenario. 
of a cooperative attack scenario. Our protocol 
utilizes HORS to sign the route request, 
preventing malicious nodes M1 and M2 from 
impersonating an initiator. Since RAP 
piggybacks a signature one-hop away, it is not 
sufficient to prevent cooperative attackers from 
inserting a forged routing path, which can cause 
Route Discovery to fail. In RAPA, we ask each 
forwarding node (M1, M2, and F in our example) 
to piggyback their identifier, which is also signed 
using HORS. We provide a security analysis of 
our scheme in section 3. 
G. Reactive Security Adjustment Strategy  
During a routing disruption attack, an initiator 
may fail to find a working route using the 
underlying routing protocol. By applying RAPA, 
an initiator may discover a usable route at the cost 
of additional computational overhead from 
authentication. Since the security strength 
depends on the quantity of random numbers 
selected by the initiator, we suggest a simple, yet 
 4
 
 
 
appended by each forwarder of our path 
authentication mechanism because it does not 
require a signature operation. 
In the case of a non-adaptive chosen message 
attack, the attacker tries to forge the forwarder’s 
authenticator by choosing r released private 
slices, where r is related to the average number of 
neighboring nodes, the total number of nodes, 
and the density of the network. If a forwarder 
detects a duplicate random number set, it can 
refuse to append the corresponding authenticators 
and report back to the initiator. Since two 
initiators may accidentally issue the same random 
number set, we are interested in this collision 
probability. Let W(i, j) be the probability that no 
two route requests, i and j, contain the same 
random number set. That is, 
ii jij
j
j
ijjjjiW
)!(
!))1((...)2()1(),( −=
−−××−×−=  
The collision probability, which increases as the 
adversary accumulates released private slices, is 
ijij
jjiWjiP
)!(
!1),(1),( −−=−=
 
Since this is similar to the birthday problem 
analysis [19], we can estimate the collision 
probability as  
)1(6
,)
2
1(1
1),(
3
1
2/)1(
+−<−−≈
−≈
−
−−
ij
i
j
i
ejiP
i
jii
ε
 
This approximation probability is useful for 
determining a suitable time to re-key. Given a 
threshold value Pthreshold, we can use the following 
algorithm to estimate the average re-keying 
interval λ. 
Parameters: tp, kp, r, Pthreshold
tp : public slices 
kp : private slices 
r : private slices have been released 
n  : average number of neighbor nodes 
Pthreshold : max tolerated collision probability 
λ : average re-keying interval 
Estimate_RekeyInterval { 
Initialize: λÅ0 
DO λÅλ+1 
UNTIL  thresholdrnk
t
k PCCnP p
p
p
>− − ),( )1(λ
End-DO 
Output: λ 
} 
Fig. 7. Algorithm for estimating re-keying 
interval. 
Consider the example in [7] in which a network 
with two hundred nodes operates in an area of 
400 square meters. A node has a communication 
range of one meter. Furthermore, each node has 
an average of three neighbor nodes, which we 
obtained from the statistical study in [8]. We use 
similar security parameters as in HORS, setting 
tp=1024 and kp=16. Let Ψ(n) be the probability 
that an initiator’s random number set conflicts 
with another as follows: 
)!(!
)!(!)(
krt
ktrn
C
Cn
n
p
p
p
t
k
r
k
−
−×=×=Ψ  
We utilize Stirling’s approximation, 
NN eNNN −×××+≈ π)
3
12(!  
to simplify Ψ(n), obtaining 
ktr
kt
kr
t
kt
kr
r
krt
ktrnn )()()(
)(
)()( −
−×−×−×−⋅
−⋅×=Ψ  
Given the above parameters, we observe a 
probability of 9.8301e-006 and 0.015 after 512 
and 768 private slices have been disclosed, 
respectively. This probability is directly related to 
the rejecting request probability for a forwarder 
and reflects the adaptability of our proposed 
scheme. 
We model how Ψ(n) and the expected value of 
collisions changes.  The expected value reflects 
the number of disclosed private slices after 
initiating the re-keying procedure. In Fig. 9, we 
fix tp at 1024 and vary kp. From our results, we 
expect a collision after exposing 448 private 
slices for kp=16. By doubling kp , we can reveal an 
additional 200 exposed slices before observing a 
collision. Fig. 10, which sets kp at 16, shows that 
the tolerated number of exposed private slices 
only increase by 100 from tp=1024 to tp=1280. 
 6
 
 
 
our scheme reduces the cost as the route path 
increases. 
Table 1 generalizes the verification and 
signature cost of the forwarders for a route 
request path of length L. The symbol σi denotes 
the number of previous hops through which a 
route request packet has passed at the i-th 
intermediate node on the route request path. 
 
 RAPA Simple 
Sign 1 1 
Verify  )2()( ++× sip kk σ  )1())1(( ++×+ sip kk σ
Overal
l 
)3()1()(
2
+×−+× ∑ sL ip kLk σ  )2()1())1((
2
+×−+×+ ∑ sL ip kLk σ
Table 1 Generalized hash operation costs on a 
route request path of length L. 
The overall cost encompasses the signature 
generation and verification cost of each 
intermediate node along the route path. Fig. 11 
illustrates the difference in cost given parameters 
tp=1024 and varying values of kp. If the number of 
disclosed private slices is half the amount of total 
public slices, then the probability of forging a 
signature that HORS provides is 
162
1
− . Since 
RAPA exhibits a collision probability of 
1152
1
−
, we 
can reduce kp to achieve an equivalent security 
strength as HORS. By applying the 
Estimate_RekeyInterval procedure, we can 
estimate an appropriate value for kp. Assuming 
16
2/
2
1),3( −=− pppp
t
k
t
k CCP  and tp=1024, then kp is at most 
4. Our scheme can lower the collision probability 
if we settle for a larger value of kp. 
 
Fig. 11 RAPA and simple method cost difference 
As shown in Fig. 12, the number of hash 
operations increases rapidly as the path length of 
the route grows in the simple approach. This 
implies RAPA provides better scalability than the 
simple method. 
 
 
Fig. 12 Overall cost comparison 
REFERENCES 
[1] A. Perrig, R. Canetti, D. Song, and J. D. 
Tygar. “Efficient and Secure Source 
Authentication for Multicast.” In Network 
and Distributed System Security Symposium 
(NDSS '01), pp. 35-46, February 2001. 
[2] A. Perrig. “The BiBa one-time signature and 
broadcast authentication protocol.” In 
Proceedings of the 8th ACM conference on 
Computer and Communications Security, pp. 
28-37, November 2001. 
[3] A. A. Pirzada, C. McDonald. “Kerberos 
assisted Authentication in Mobile Ad-hoc 
Networks.” In Proceedings of the 27th 
conference on Australasian Computer 
Science, Volume 26, pp. 41-46, January 
2004. 
[4] B. Awerbuch, D. Holmer, C. Nita-Rotaru and 
H. Rubens. “An on-demand secure routing 
protocol resilient to byzantine failures.” In 
Proceedings of the ACM workshop on 
Wireless security (WiSe’02), pp. 21-30, 
September 2002. 
[5] C. E. Perkins, E. M. Belding-Royer, and S. R. 
Das. “Ad Hoc On-demand Distance Vector 
(AODV) Routing.” Internet-Draft, 
draft-ietf-manet-aodv-13.txt, February 2003. 
[6] D. B. Johnson, D. A. Maltz, and J. Broch, 
“DSR: The Dynamic Source Routing 
Protocol for Multi-Hop Wireless Ad Hoc 
 8
