propose a state of art design for the UWB 128-point FFT including algorithm, hardware structure, 
and performance analysis, parallel and pipeline FFT derivation and mapping, and a novel 
multiplier-less approach to get extremely low power complex multiplications. 
 
三、 結果與討論 
 
UWB 128-Point FFT Low Power Design Consideration: 
  It is well-known that most of the power for the FFT execution is consumed by the complex 
multiplications and memory access.  In the project, the short length FFT for the wireless LAN is 
implemented.  In this case, the power is especially dominated by the complex multiplications.  
Table 1 compares a wide variety of the FFT structures and lists the required number of complex 
multiplications for all the parameters.  Duhamel [7] claims that the split-radix algorithm has the 
lowest number of complex multiplications for the FFT.  Thus, these data could be good references 
for the architecture selection.  The structures marked with "*" means that the higher-radix (32 or 
64) butterfly is implemented by the split-radix method.  It can be seen from the table that if the 
structure includes one or more radix-2 stages, the number of complex multiplications is usually 
higher.  To get lower number of the FFT multiplications, mixed radix-4 and radix-8 structure or 
high radix will be an appropriate choice.  In [4], the paper compares the power consumption of 
two radix-16 structures in the 128-point FFT.  The result shows that the radix-2 followed by 
radix-8 has lower power consumption than radix-4 followed by radix-4.  Theoretically, the 
radix-28 has two more constant multiplications than the radix-44.  Our result shows the radix-44 is 
better based on power consumption. 
  It would be a good choice to select the structure with a low number of multiplications.  The 
split-radix algorithm would be a good candidate and has been wisely implemented by Yeh and Jen 
[8].  However, the control circuit is a little more complex because of the irregular structure.  The 
radix-8 followed by radix-16 and radix-16 followed by radix-8 both have regular structures and the 
number of real multiplication is only a little (3.1%) more than the split-radix.  Thus, we will 
discuss the implementation of the radix-8 followed by radix-16 structure in the paper.  From the 
table, twiddle factors w16 and w8 contains about half of the required complex multiplications.  In 
the CSD multiplier-less approach, if the power consumption for these two coefficients is reduced, 
the total power consumption could be lower in a good percentage.  It is part of our approaches to 
target the power consumption. 
 
Voltage Scaling for Low Power Consumption: 
ECMA-386 specifications suggest that the 128-point FFT has to be performed in every 312.5 ns 
with the power consumption below 10mW.  It means the traditional pipeline FFT architectures are 
not good enough to meet both the speed and power requirements.  Thus, both parallel and pipeline 
architectures have to be considered in the design.  As shown in Table 2, the level of parallel 
processing can increase the data throughput and reduce the system clock rate.  Thus, in highly 
parallel cases, the clock rate can be traded with the applied voltage to reduce the total power 
applied to the constant ( 2 2 ) multiplication in the radix-23 butterfly.  Currently, the published 
parallel FFT implementations usually adopt CSD or mixed CSD with other multiplier approaches..  
However, there is a lack of explanation why they choose their FFT models and how to decide good 
architectures as the depth of parallelism increased. 
  In the project, different multiplication approaches are evaluated.  The CSD approach will be 
emphasized because of his inherent property of parallelism.  As shown in Table 3, the total 
complexity of complex multiplication is increased slowly as the level of parallelism changed from 
single data path to 8 parallel data paths.  The complexity is increased a little fast from 8 to 16 
parallel paths.  It is assumed that the complexity of each complex twiddle factor multiplication 
except w16 is one.  The complexity of w16 is set to 0.5 because there are only two real 
multiplications required instead of four.  It can be seen that the complex multiplication hardware 
complexity increasing is less than 50% as the data throughput can have 8 times faster.  It would be 
a good deal based on the power consumption to trade the increased throughput for the lower applied 
voltage. 
 
Rounding Effects on FFT Structures: 
  The specifications of wireless LAN usually adopt the short length FFT.  Unlike the long 
length FFT in DVB, the block floating-point arithmetic is not used in the architecture.  The reason 
is that the extra hardware complexity for controlling the BFP cannot compensate the saving in 
memories.  This section will discuss the overall rounding effects on 7 different FFT structures.  
Thus, we can have more information to choose a good power saving structure. 
  Lots of researches [9-10] on FFT rounding error analysis have been done.  Some claims that 
the decimation-in-time algorithms have better SNR on rounding noise.  On the contrary, some 
claims that the decimation-in-frequency is better.  In the FFT structure design, we have to examine 
their assumption on the rounding analysis very carefully.  Figure 1 shows our results on the 
rounding error analysis for 7 different FFT structures.  It is assumed that there is no overflow in 
addition.  Thus, the bit-width will grow from stage to stage.  It can be seen for the 128-point FFT 
that the radix-2 DIT structure has almost the best performance and the radix-2 DIF has the worst 
performance based on the rounding errors.  The performance difference between these two 
structures is about 6 dB.  It means that the input data width of the DIT structure can be one-bit less 
than that of the DIF structure when both have about the same signal-to-noise ratio.  However, the 
DIT structure might have the higher hardware complexity because most of complex multiplications 
are in the later stages of the FFT and bit-width is usually larger at those stages. 
  The performance of all the other structures is between that of the DIT and the DIF.  From the 
theoretic and simulation results, the rounding error of an FFT structure is predictable and decided 
by the locations of complex multiplications.  It can be seen that the radix-8 followed by radix-16 
and radix-16 followed by radix-8 has about the same rounding performance.  The rounding error 
of these two is about 2dB worse than that of the DIT.  The rounding error of the 8-bit input data is 
about same for multiplier complexity from 10 bits to 16 bits.  Based on the simulation, if the 
precision of the hardware is 2-bit higher than the input data width, the rounding error is about 
     
Figure 2. Rounding and truncation effects on different FFT structures 
 
 
Figure 3. Comparison of a complex multiplication by 3-real and 4-real multiplications 
  
One or more stage scaling is also analyzed in detail.  It is obvious that the scaling effect on 
the performance in the first few stages is much worse than that in the last few stages.  Much more 
performance analysis is still working on including the simplified version of CSD or CORDIC 
multiplications.  All the analyses are based on the data from MATLAB floating-point simulations 
and the data from the practical fixed-point structure simulation. 
 Figure 4.. Example of FFT parallel-pipeline algorithm to 8-parallel-pipeline architecture mapping  
  
Figure 4 shows the parallel-pipeline block diagram of the parallel FFT equation (2).  It can be 
seen that the algorithm to the architecture mapping is pretty straightforward.  The radix-23 can be 
mapped into the 8 parallel delay feedback pipeline architectures.  The radix-24 is implemented as a 
single PE with 8 parallel inputs and each radix-16 can be finished in two cycles.  It can be seen 
that the throughput for radix-23 and radix-24 blocks is the same.  The CSD multiplier-less 
hardware is used for the twiddle factor parallel complex multiplications.  Since one group of CSD 
twiddle components is shared by the eight parallel complex data, there will be switching circuits for 
the input and output of the CSD block to perform the required permutation function.  The circuit 
will be much simple if general parallel booth multipliers or CORDIC processing elements are used 
because only one-to-one connection is necessary as labeled in the figure.  If you have some 
pre-designed butterfly cells, the parallel FFT equation can be easily factorized and mapped to adopt 
the cells in the design. 
  
四、 計劃成果自評 
In the past year, more MALAB simulation has been done in order to answer why and how we 
select the FFT architecture.  In addition, we build the parallel model based on matrix operations to 
simulate the parallel-pipeline FFT model directly as shown in Figure 4.  The permutation matrices 
can be used to represent the data flow.  Moreover, the different FFT structures can be transformed 
from one to the other based on the operations of permutation matrices.  The data generated by the 
MATLAB model can be farther used as test vectors for design verification. The proposed FFT 
