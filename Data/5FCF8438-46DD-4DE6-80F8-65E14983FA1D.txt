二、文獻探討 
 
Previous research on capacity estimation relied either on delay variations among probe 
packets as illustrated in Pathchar [4], or on dispersion among probe packets as described in 
Nettimer [6] and Pathrate [3]. Pathchar-like tools (such as pchar [2] and clink [1]) have 
limitations in accuracy and speed as shown in [5], [13]. Moreover, they evaluate the capacity 
of a link based on the estimates of previous links along the path, thus estimation errors 
accumulate and amplify with each measured link [7].  
 
Dispersion-based techniques suffer from other problems. In particular, Dovrolis’ analysis in 
[3] showed that the dispersion distribution can be multi-modal due to cross traffic, and that 
the strongest mode of such distribution may correspond to either (1) the capacity of the path, 
or (2) a “compressed” dispersion, resulting in capacity over-estimation, or (3) the Average 
Dispersion Rate (ADR), which is always lower than capacity. Another dispersion-based tool, 
SProbe [7], exploits SYN and RST packets of the TCP protocol to estimate the downstream 
link capacity, and employs two heuristics to filter out samples which have experienced cross 
traffic. However, SProbe does not work properly when the network is highly utilized [14]. 
 
Unlike the above approaches, CapProbe [5] uses both dispersion measurements and 
end-to-end delay measurements to filter out the packet pair samples that were distorted by 
cross traffic. This method has been shown to be both fast and accurate in a variety of 
scenarios. The original implementation of CapProbe uses ICMP packets as probing packets, 
and it measures the bottleneck capacity on a round-trip basis. As a result, the capacity 
estimate does not reflect the higher capacity link when the path is asymmetric. Other 
difficulties are encountered when intermediate nodes employ priority schemes to delay ICMP 
packet forwarding (e.g. Solaris operating system limits the rate of ICMP responses, and it is 
thus likely to perturb CapProbe measurements) [15]. 
 
Recent capacity estimation studies have extended the target network scenarios to more 
diverse environments. For instance, Lakshminarayanan et al. have evaluated estimation tools 
of capacity and available bandwidth in the emerging broadband access networks [16]. Chen 
et al. extended CapProbe to estimate effective path capacity in ad hoc wireless networks [10]. 
In addition, ABLP [9] and AsymProbe [8] have been proposed for capacity estimation on the 
increasingly popular asymmetric links (e.g. DSL and satellite links).  
 
Nonetheless, capacity estimation on high speed links remains a challenge. Though recent 
studies have verified the accuracy of Pathrate in estimating gigabit links [17], however, the 
evaluation was done on an emulator based testbed, which cannot represent realistic Internet 
dynamics. Thus, an experimental evaluation of capacity estimation on high speed links is still 
lacking. 
Therefore, the capacity estimate is made by using the dispersion of the m-th sample with the 
minimum delay sum: 
  
mD
kPC =                (4) 
where P denotes the packet size of each probing packet. Since the packet bulk samples are 
delivered only in the forward direction, the estimated capacity corresponds to the bottleneck 
in this direction. 
 
Once the first phase ends, B sends an END packet to A, and PBProbe enters the second phase 
(as shown in Fig. 1-b). In this phase, A first sends an RTS packet (every G time units) to B, 
and B replies a packet bulk of length k right upon the receipt of each RTS packet. Similar to 
the first phase, PBProbe measures the delay sum and dispersion for each sample, and 
estimates the capacity in the backward direction by using the minimum delay sum filter. 
 
四、研究成果 
 
So far, we have evaluated PBProbe in a variety of network scenarios. In this subsection, we 
compare the performance of PBProbe and Pathrate in terms of accuracy, speed, and 
bandwidth consumption (i.e. overhead). The experiments are performed on selected high 
speed Internet links as shown in Table I, and the results of capacity estimates and required 
time are shown in Table II. 
 
 
Table I: Description of the participating hosts in high speed Internet experiments. 
 
 Table III: Comparison of PBProbe and Pathrate overhead on high speed Internet Links.  
 
The experiment results suggest that there are tradeoffs between PBProbe and Pathrate for 
high speed path capacity estimation. On the one hand, PBProbe yields very good estimation 
results rapidly (e.g., less than 20 seconds in most cases). If given more time, it will 
progressively improve the estimates, since better samples can be obtained. On the other hand, 
Pathrate tends to produce accurate results, but the required time may vary from 
approximately 20 seconds to 20 minutes. Therefore, Pathrate may not be ideal in scenarios 
when an estimation of the bottleneck capacity needs to be obtained within a very short time.  
 
It should also be mentioned that the packet overhead of PBProbe is proportional to the 
employed bulk length, k. While measuring the link capacity of a high speed link, PBProbe 
increases its bulk length and in turn increases the packet overhead, in order to overcome the 
limited support of system timer resolution. Nonetheless, thank to the employed U parameter, 
the bandwidth consumption of PBProbe is restricted by the utilization upper bound. Hence, 
PBProbe can carefully control the trade-off between the bandwidth consumption and the 
required time in order to satisfy the requirement of different network applications. 
 
To summarize, PBProbe is scalable and adaptive to network link capacities, and it is 
applicable to asymmetric access links and one-hop wireless links. It is consistently fast, 
accurate, and non-intrusive. Therefore, PBProbe is indeed a feasible technique that can be 
deployed and applied in various emerging network applications. 
 
五、結論 
 
In this project, we studied a classic problem of link capacity estimation, and we proposed a 
technique, called PBProbe, to estimate bottleneck capacity for emerging high speed links. 
PBProbe is based on the CapProbe algorithm, but it uses “packet bulk” to adapt the number 
of packets in each probing according to different network characteristics. As a result, it 
preserves the simplicity, speed, and accuracy of CapProbe, as well as overcoming the poor 
system timer resolution problem on high speed links. Using extensive analysis, emulation, 
and Internet experiments, we evaluated the accuracy, speed, and overhead of PBProbe in 
