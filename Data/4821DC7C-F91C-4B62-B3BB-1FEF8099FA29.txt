game server, and the other is encapsulated game
group (EGG). It can not only accommodate
large-scale simultaneous online players but also
get rid of low system stability and complicated
synchronization problems. Moreover, we
propose a dynamic agent itinerary algorithm to
lead an autonomous mobile agent to complete
the operations of matching game resources. The
agent architecture comprises three kinds of
software agents to accomplish the specific tasks.
The purpose of dispatching a mobile business
agent (MBA) to remote peers is to provide
online game players with personalized game
resource matching services. Finally, the
proposed MOG system makes use of Java the
whole platform and game engine.
In this project report, we built the three
roles of our Mobile Agents for Resource
Transactions System. Those were Mobile
business Agent (MBA), peers in P2P network,
and itinerary. When game players were going to
transaction, the send out MBA which building
up itinerary and dynamically update it. The
peers which visited by MBAs on their tour, each
peer held an itinerary. When MBA had come,
their itinerary changing up a row of record was
updated dynamically. The MBAs would find the
information of game resource, such as location,
price, time register for the players want to do
transaction. We discussed the relation between
MBA, peers, itineraries and set up a simulation
environment using Java Applet and discussed
their behaviors.
Keywords: Mobile Agent, Itinerary,
Multiplayer Online Game, Peer-to-Peer
Network, Resource Transaction
一、 介紹
隨著數位科技以及多人連線網路遊戲發
展的普及化，利用網路來製作開發與遊玩線
上遊戲的人口也日益增多，線上遊戲的種
類、型態及其產生相關社會化影響愈益複雜
與多元，此外也由於行動代理人的技術日益
精進，應用也更為廣泛；本研究計畫採用行
動代理人為主體的混合式網路架構，期望能
夠為遊戲平台使用者發展出更便利及更有效
率的應用機制。
所謂代理人(agent)為傳輸一段可執行程
式碼，由某一使用者端節點傳送至另一使用
者端節點執行，其中行動代理人可以憑藉著
移動的能力而將程式或者狀態帶到橫跨網路
上的遠端節點上執行以取得資訊及執行工作
等，執行完畢後，再將結果送回原使用者端。
在這程式碼離開節點的期間，節點並不會因
為代理人的執行而閒置，指派任務由代理人
所處理，不論是發送端或者接收端節點，都
可以繼續執行自己的工作與進行遊戲，或與
其他遊戲玩家互動及處理目前已取得資源，
只有當代理人需要重新執行任務時候，才需
倚靠使用者端自己執行派遣動作，由使用者
端全權決定。而當行動代理人被派出離開自
身節點之際，所到其他節點會歡迎該代理人
的拜訪，同時亦無法控制或妨害其執行任務。
本研究計畫第二章為相關研究與架構，第
三章說明多人連線遊戲平台架構，第四章說
圖一、拓樸結構示意圖
每位玩家群組內會有一位遊戲玩家扮演
eM，由中央註冊伺服器紀錄其 IP位址，負責
在遊戲平台中把所有玩家群組內遊戲玩家的
位置及狀態廣播通知其他遊戲玩家，玩家群
組成立之初已取得所有遊戲玩家的 IP 位址，
除定期將整個玩家群組中的訊息回寫至中央
遊戲伺服器之外，在遊戲局結束後將該局所
有遊戲玩家資料回寫至中央遊戲伺服器，除
此之外群組管理人與其他所有遊戲玩家的功
能角色無異。
圖二、拓樸結構階層示意圖
3.2 群組加入機制
如圖一所示，本架構配合現今多數MOG
的遊戲平台，在遊戲玩家逐一加入時組成 P2P
玩 家 群 組 (Encapsulated Game Group)
[15][16]，每個群組會選出一個群組管理人
(Encapsulated Game Group Manager, eM)扮演
伺服器角色。每位使用者加入群組之初並未
具備行動代理人，須由群組管理人端給予行
動代理人後才能完成使用者所欲達到的目
標。而群組管理人端的身份確定與行動代理
人則由上一層的中央遊戲伺服器給予，自己
和其他群組管理人節點的關係則仍為 P2P 關
係，如圖二所示。
然而組中的遊戲玩家離開本群組，則區
分為兩種狀況：
狀況一：需要向該群組的群組管理人告知，
並且分解(dispose)自身擁有的所有代理人。
狀況二：如果離開者為群組管理人，則上一
層的中央遊戲伺服器會經由各節點間選舉
(election)產生新的群組管理人，並派遣行動代
理人協助其建立伺服器角色，同時方具有能
力分派行動代理人給新加入的遊戲玩家。
四、 代理人角色與分類
為完成遊戲玩家所欲達到的目標: 1. 透
過行動代理人尋找、蒐集、取得多人連線網
路遊戲 (MOG)中的資源，包含遊戲中的寶
物、虛擬貨幣、點數、遊戲玩家的意願和評
比等資訊。2. 建構一個可行的機制執行上述
功能。
有其一定的容納資料筆數之限制。
五、代理人的旅程
在每一個行動交易代理人被遊戲玩家派
遣之初，並無法知道遊戲過程從頭到尾必須
拜訪多少個節點，但藉著每到一個節點，即
交易系統中的賣方，就動態的更新下一個欲
到達的目標，逐步地完成整個旅程；也就是
說，每位行動交易代理人無法擁有完整的旅
行指南，但在旅程的每一站都加以更新片段
的旅行指南，讓旅行指南漸趨完整，直至完
成資源搜尋的旅途為止。
5.1 旅行指南
旅行指南實作上為僅供兩種代理人讀取寫
入的加密文件檔，亦即交易系統內，各節點
中由其他玩家寫入預售出物品紀錄的加密文
件檔。其功能如下：
1. 旅行指南提供一定容量(資料筆數)以
讓其他遊戲玩家寫入其原遊戲玩家欲
出售物品與該 IP位址。
2. 當旅行指南容量已滿，到達的行動交易
代理人會寫入取代時間戳記最舊的一
筆資料 (index=index%Num)。
3. 旅行指南亦是節點之間所出售物品資
訊的告示欄，但是分散在各玩家節點之
上。
下圖三說明行動交易代理人讀寫旅行指南的
程序。
圖三、行動交易代理人依據旅行指南完成旅
程
5.1.1 旅行指南的產生
當多人連線網路遊戲中，玩家欲派出行動
交易代理人搜尋所有節點之前，此時行動交
易代理人預設的第一站是群組管理人或某一
特定的節點，到達後將原遊戲玩家的預售物
品與原遊戲玩家節點的 IP位址寫入群組管理
人的旅行指南，此時已有數筆其他行動交易
代理人拜訪過所寫入的資料，旅行指南有其
一定的容納資料筆數限制，故將會覆蓋至最
舊的一筆資料，即為動態更新旅行指南。
表一、運算式之符號意義說明
符號 意義
M 行動代理人
C 溝通介面代理人
S 中央伺服器
D 動態節點代理人
dispose()方法，以確保系統的行動交易代理人
數量少於限制的數量內。
此外 cost function 對所有到過的節點其
cost( [ ]iP g ) 的累加必須小於等於一開始設定
的總預算。
影響 cost的因素：
1. 若 為 同 一 網 段 inD ( [ ]iP g ), 其
cost( inD ( [ ]iP g ))會比不同網段 outD ( [ ]iP g )
的 cost( outD ( [ ]iP g ))低。
2. 若為同一玩家群組其 cost( [ ]iP g )會比不同
玩家群組的 cost( [h]iP )低。
3. 若 節 點 i, 節 點 j 的 距 離 較 長 若
i jd(P ,P ) > i kd(P ,P )則 cost( jP )> cost( kP )，反
之則較小。
4. 若節點 i 比節點 j 的名聲評價較高則
cost( iRp )較小，反之則較大。
5. 計算拜訪成本為：
i
finished
P i
begin i=home
GoNext (Cost(P )) (1)
說明每一個行動代理人由出發製完成任
務所花費拜訪成本的計算。
5.1.2 旅行指南的更新
行動交易代理人功能為替使用者搜尋多
人連線網路遊戲中的資源，另一方面也行銷
原遊戲玩家欲售出的物品項目，不但讓線上
遊戲中的交易更為熱絡，也讓行動交易代理
人的旅行指南更趨完整。當行動交易代理人
每拜訪一個節點時，便會寫入原遊戲玩家欲
出售物品資訊與 IP 位址，同時取得其他節點
所留下的出售物品資訊。
5.1.3 資源交易搜尋
圖四為多人連線網路遊戲中群組的 Aglet
平台資源搜尋。說明要實作層面中真實 P2P
環境的行動代理人遷徙機制。
圖四、 IBM Aglet上之行動代理人實際運作畫
面
六、模擬實驗數據圖表
本實驗為模擬環境平台，採用 J2SDK 1.5
JAVA虛擬機器在Windows XP Professional系
統平台上執行，而後再以 NS2 網路模擬環境
作數據輸出。藉以參數設定而探討行動代理
人、旅行指南、與節點間三者的關係，與交
互作用的影響，說明行動代理人如何藉由旅
圖八、旅行指南容量筆數與拜訪節點數的關
係圖
七、結論與未來工作
本研究在多人連線網路遊戲(MOG)的遊
戲架構之下，提供一個可行的應用行動代理
人進行資源交易與搜尋的機制，透過自主式
行動交易代理人(MBA)攜帶使用者的交易需
求，依據旅行指南遷徙至其它遊戲玩家節點
搜尋是否有相符合的資源，提供使用作為交
易的依據，進而完成交易目的，同時將交易
成功的紀錄透過群組管理人經由中央遊戲伺
服器寫回交易資料庫，完成行動代理人於多
人連線網路遊戲平台之資源交易。
參考文獻
1. A.E. Rhalibi and M. Merabti,
“Agents-based modeling for a peer-to-peer
MMOG architecture,” Computers in
Entertainment, Vol. 3, No. 2, P. 3 , April
2005.
2. S. Yamamoto, Y. Murata, K. Yasumoto, M.
Ito,” A distributed event delivery method
with load balancing for MMORPG,” 
Proceedings of 4th ACM SIGCOMM
workshop on Network and system support
for games, pp. 1–8, 2005.
3. D. Banerjee, S. Saha, S. Sen, P. Dasgupta,
“Reciprocal resource sharing in P2P 
Environments,” International Conference 
on Autonomous Agents; Proceedings of the
fourth international joint conference on
Autonomous agents and multiagent
systems, The Netherlands, task and
resource allocation II, pp.853 - 859, 2005.
4. E. C. Efstathiou, G.C. Polyzos, “A 
peer-to-peer approach to wireless LAN
Roaming,” Wireless Mobile Applications 
And Services On WLAN Hotspots,
Proceedings of the 1st ACM international
workshop on Wireless mobile applications
and services on WLAN hotspots,
SESSION: Vision & challenges, pp.10–18,
2003.
5. L. S. Lima, A.T. A. Gomes, A. Ziviani, M.
Endler, L.F. G. Soares, B. Schulze,
“Peer-to-peer resource discovery in mobile
Grids,” Proceeding Series; Vol. 117,
Proceedings of the 3rd international
workshop on Middleware for grid
computing, pp. 1–6, 2005.
6. Ratsimor, D. Chakraborty, A. Joshi, T.
Finin, Y.Yesha, “Service discovery in
15. D. Fielding, B. Logan, S. Benford,
“Balancing the needs of players and
spectators in agent-based commentary
systems,” International Conference on
Autonomous Agents archive Proceedings
of the fifth international joint conference
on Autonomous agents and multiagent
systems, SESSION: Believable agents
table of contents, pp. 996 - 998, 2006.
16. P. Leong, M. Chunyan, ”Fuzzy Cognitive 
Agents in Shared Virtual Worlds,” CW, 
Proceedings of the 2005 International
Conference on Cyberworlds, pp. 368–372,
2005.
17. T. Fritsch, H. Ritter, J. Schiller, "The effect
of latency and network limitations on
MMORPGs: a field study of everquest2,"
Network and System Support for Games,
Proceedings of 4th ACM SIGCOMM
workshop on Network and system support
for games, Hawthorne, NY, SESSION:
Network effects on games, pp: 1 - 9, 2005.
計畫成果自評
本計畫部分成果已發表論文列表如下：
1. Tainchi Lu and Mingchi Fu, "Using
Autonomous Mobile Agents in
Decentralized Simulation Environment,"
Submitted to International Journal of
Computer Systems Science and
Engineering, Dec. 2006.
2. Tainchi Lu and Chinghao Hsu, "Mobile
Agents for Information Retrieval in Hybrid
Simulation Environment," Journal of
Network and Computer Applications, Vol.
30, No. 1, pp. 244-264, 2007.
3. Tainchi Lu and Minchih Tsai, "MOG
Platform Design and Game Resource
Transactions," In Proceedings of the 3rd
National Conference on Digital Contents,
June 8, 2007, Taiwan.
4. Tainchi Lu and Yuchieh Kao, "MOG
Platform using Mobile Agents for
Resource Transactions," In Proceedings of
the Second Conference on Digital Contents
Management and Applications, June 1-2,
2007, Taiwan.
5. Tainchi Lu and Mingchi Fu, "Using
Mobile Agents for Object Sharing in P2P
Networks," In Proceedings of the 2006
International Conference on Innovative
Computing, Information and Control, Vol.
1, pp. 741-744, Aug. 30 - Sept. 1, 2006,
Beijing, China.
Facial Expressions using 3D Mesh Morphing
in Virtual Worlds
Tainchi Lu, Daosheng Mu, and Minchih Tsai
Dept. Of Computer Science and Information Engineering
National Chiayi University
No. 300, University Rd., Chiayi, Taiwan 600, R.O.C.
email: tclu@mail.ncyu.edu.tw
Abstract ─Morphing is a process of smoothly transforming from one shape into another. In this paper, we
present a feature-based method of employing mesh morphing to compute two homeomorphic facial meshes for
animating 3D facial expressions in virtual worlds. We divide the method into five steps, including head
decomposition, mesh parameterization, feature specification, vertex correspondence, and point interpolation.
Relying on sparse sets of user specified feature points, a semi-automatic ripple searching algorithm is proposed
to cope with the problem of establishing a one-to-one correspondence between source and target meshes. After
the operation of correspondence establishment, we employ Bézier interpolation with four data control points to
transform from the source mesh to the target mesh. Finally, three pairs of facial meshes with surface textures are
demonstrated to produce a series of facial expressions by using the proposed method.
I. INTRODUCTION
In recent years, many sophisticated 3D graphics and animation techniques [1] have been rapidly developed to
bring virtual worlds to be more realistic and lifelike. In particular, people who are interested in watching computer
animated motion pictures or playing entertaining games desire to enjoy more expressive facial animations appearing on
the faces of characters. As far as the conventional 2D approaches are concerned, they render a number of facial images
in advance, and continuously display the images for facial animations. The pre-rendering method is very
straightforward, especially it is easy to implement in a wide variety of picture animations. However, the method is not
in a real-time manner and is applicable for 2D applications. Over the past few years, there are a lot of advanced
solutions to achieve 3D facial expressions, including morphing with key frames, blend shapes, motion capture, motion
dynamics simulations, and goal-oriented techniques. Concerning a 3D morphing or metamorphosis, it is the process to
continuously transform one object’s shape into another one. On the other hand, morphing techniques [2-6] have diverse
implementations on animations and effects in the field of TV commercials, special effects of movies, medical imaging,
scientific visualization, industrial manipulations, and so on. In addition, most 3D geometric models within scenes are
represented in a form of polyhedral meshes. Meshes have become a very popular representation of 3D models in the
field of computer graphics.
In comparison with 2D image warping [7-8] and 3D mesh morphing, image warping techniques are turned out to
be more easy-to-implement than 3D mesh morphing approaches. As for the mesh morphing, it has the strong ability to
independently animate 3D polyhedral models from one shape to another even though its computational load is larger
than 2D image warping. However, it seems that the computing problem is not a big trouble any more due to
high-performance computers with low-price acceleration cards are available to date. In this paper we aim to integrate
image warping with mesh morphing to realize facial expressions towards 3D human characters. We divide the proposed
technique into five steps, including head decomposition, mesh parameterization, feature specification, vertex
correspondence, and point interpolation. In the first step, a 3D geometric head is explicitly partitioned into two patches,
namely front patch and back patch. The purpose of the operation is to facilitate to hidden surface removal and reduce
the processing time of performing mesh parameterization. Subsequently, we make use of spherical projection to project
the front surfaces of two polyhedrons onto the surface of a unit sphere [9]. In order to make sure that the in-between
phases of morphing are under control, users need to manually specify any number of feature points on the projected
topologies. A ripple searching algorithm that belongs to a kind of semi-automatic method is devised to support users in
specifying their feature points easily. Furthermore, it is also used to automatically identify correspondences between
two front patches. After the above operations are finished, a one-to-one correspondence between points on the surface
of the two facial models is completed. Finally, we take advantage of Bezier interpolation [10] with four data control
points to interpolate between each pair of corresponding vertex locations for smoothly displaying the facial expressions.
a) sM and its  s pM
(b) tM and its  t pM
Fig. 2. Polyhedral models and their projected topologies on a unit sphere.
2.3 Feature Specification
As long as the mesh parameterization is finished, we need to align the projected topologies of the two models to
overlap with each other, as shown in Fig. 3 (a). Note that adjacent non-overlapped triangular polygons will be grouped
into with each other to aggregate some individual mesh fragments, as shown in Fig. 3 (b). Hence, users solely specify
any number of feature points on these mesh fragments of the projected topologies for the sake of carrying out the
process of establishing a one-to-one correspondence. In comparison with the conventional process of 3D mesh
morphing, we need not merge these two projected topologies for establishing a supermesh by finding out which face
contains the other model’s vertices and searching for any possible intersection points. This is because the facial
expression of the target mesh is modified from the source mesh by making use of a 3D character design tool called
Poser. As a result, the source and target meshes have a similar shape and a homeomorphic topology.
(a) The overlapping topologies of  s pM and  t pM
(b) A mesh fragment originated from fP
Fig. 4. The ripple searching algorithm.
Fig. 5. The pseudo codes of the ripple searching algorithm.
(Step1)
Assign the polygon no. to the selected feature point fP
Associate fP with the complex  , ,T V C of the selected polygon
 , ,a b cV v v v and  , ,C x y z , where C is the three-dimension
Cartesian coordinate system of a vertex
(Step2)
The first circle scan
 1fP c  the polygon no. of the first circle scan towards fP
Add fP ’s V to Candidate List
While  1fP c MaxPolyNum
If  1fP c ’s V = fP ’s V , but  1fP c ’s C  fP ’s C
Assign fP to  1fP c
End If
 1fP c ++
End While
(Step3)
The second circle scan
 2fP c  the polygon no. of the second circle scan towards  1fP c
Add  1fP c ’s V to Candidate List
While  2fP c MaxPolyNum
If  2fP c ’s V =  1fP c ’s V , but  2fP c ’s C
 1fP c ’s C
Assign  1fP c to  2fP c
End If
 2fP c ++
End While
Continue the operation until every extent is to cover a specific mesh
fragment
Table 1. Statistics for three models.
Models Statistics
# Vertices 437
# Polygons 803
Feature
points
20 30 40 50 60Bob
Elapsed
time (ms)
2519 2659 2719 2912 3012
# Vertices 1892
# Polygons 2796
Feature
points
30 40 50 60 70James
Elapsed
time (ms)
2775 3210 3216 3934 4100
# Vertices 5948
# Polygons 8541
Feature
points
40 50 60 70 80Carey
Elapsed
time (ms)
5191 5200 6419 6781 7289
Fig. 6. The elapsed time of specifying any number of feature points.
