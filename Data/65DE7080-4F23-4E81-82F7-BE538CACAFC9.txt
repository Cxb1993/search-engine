 摘要 
 
低功率設計在目前的大型電路設計上越來越重要。為了解決系統晶片所
面臨到的功率消耗問題，在本計畫執行過程中，第一年我們設計了低功率快
取記憶體架構，以及一系列的低功率運算元件。在第二年，我們提出了一個
結合基因演算法(genetic algorithm)與模擬退火法(simulated annealing algorithm)
的專用演算法，用以解決高階雙電壓排程(high-level dual-voltage scheduling)的
問題。第三年的計畫中，我們再將第二年所提出的方法加以改進並利用多重
供應電壓(multiple supply voltage)的元件進行排程。 
將系統晶片設計的流程提高到較高設計層次可以大幅地縮減設計時間，
也可以獲得較多的功率節省。因此，我們試圖將行為層次(Behavioral Level)的
設計方式以高階自動合成轉換成暫存器傳輸模式(Register-Transfer Level)。在
高階排程的過程中，安排合適的工作電壓給資料流程圖中的運算元件，使得
每個元件得以在給定的時間限制下節省電能消耗。利用第一年所設計的低功
率元件配合第二年及第三年所提出的設計方法，我們可以有效地減少功率消
耗約 47.6%。 
 
 
關鍵詞：低功率、高階合成、多重供應電壓、模擬退火法。 
 
I 
 目錄 
中文摘要.................................................................................................................. I 
英文摘要.................................................................................................................II 
1 Introduction...................................................................................................... 1 
2 High-Level Synthesis....................................................................................... 4 
3 Multiple Voltage Scheduling............................................................................ 5 
3.1  MVS Problem formulation................................................................... 5 
3.2  Data flow of MVS ................................................................................ 7 
3.3  Phase I: Scheduling .............................................................................. 8 
3.4  Phase II: Adjusting ............................................................................. 10 
3.5  An Example........................................................................................ 12 
4 Allocation and Binding.................................................................................. 14 
4.1  Conflict Graph Construction .............................................................. 14 
4.2  Most Expensive First Binding Algorithm .......................................... 16 
5 Experimental Result....................................................................................... 18 
6 Conclusion ..................................................................................................... 23 
參考文獻............................................................................................................... 23 
計畫成果自評(含學術成果發表) ........................................................................ 27 
附錄一、國際合作計畫出國人員心得報告....................................................... 29 
附錄二、出席國際會議心得報告....................................................................... 30 
 
III 
 voltages in high level synthesis are supply voltage scaling and multiple voltage 
scheduling. Supply voltage scaling is one popular approach for achieving high 
performance and reduced power dissipation [13]—[16]. Most voltage-scaling 
approaches require that the IC operate at a single supply voltage and adjust the 
voltage when the task is not in the critical path. Although substantial energy 
savings can be realized with a single minimum supply voltage, one cannot always 
take full advantage of the available schedule slack to reduce the voltage. 
Non-uniform path lengths and fixed control steps may prevent full exploitation of 
the scheduling slack time. 
The use of dual ([17]—[20]) and multiple ([21]—[31]) supply voltages on a 
chip has attracted much attention in recent years. In [21] and [22], the authors 
present resource and latency constrained scheduling algorithms to minimize power 
consumption when the resources operate at multiple voltages. The proposed 
algorithms are based on the efficient distribution of slack among the nodes in the 
data-flow graph. The technique proposed in [23] is based on dynamic 
programming and requires the availability of accurate timing and power models for 
the macro-modules in an RTL library. 
Most of the methods previously researched in this field use higher voltages on 
the critical path components and lower voltages on the non-critical path 
components, so that the total power dissipation can be reduced and the system can 
still meet performance constraints [21]—[24]. However, these techniques are often 
limited in the critical path thought; thus, the advantages of the multi-Vdd technique 
cannot be fully exploited. 
 
 
 
2 
 saving. To show that the proposed method is feasible, we also implement the 
multi-Vdd cell library and the level shifter circuits. The main contribution of this 
project is to show that the MVS method can be used practically in multiple voltage 
scheduling and takes the power consumption of the operations and the level 
shifters into account. Table I lists the abbreviations used throughout this project. 
The rest of this project is organized as follows. Section 2 describes the 
concept of high-level synthesis. The multiple voltage scheduling problem and the 
proposed scheduling method are described in Section 3. Section 4 discusses the 
allocation and binding method. In Section 5, seven CDFG benchmarks are used to 
demonstrate the feasibility of the proposed approach. Finally, Section 6 presents 
our conclusions. 
 
2. High-Level Synthesis 
 
High-level synthesis encompasses scheduling, allocation, and binding, and its 
goal is to map a high-level description of the hardware structure to meet design 
constraints, such as area, latency, and power consumption. The scheduling process 
sets the beginning and terminal times of all operational nodes in the CDFG. The 
allocation process determines the number and types of units (registers/memories 
for variables; functional units for arithmetic operations; and multiplexers/buses for 
interconnections) required for datapath implementation. The binding process 
finally binds the variables to available registers/memories, operations to available 
functional units, and interconnections to available multiplexers/buses. 
Unfortunately, performing all three phases simultaneously is NP-hard [10]. 
Separating the problem into three phases increases the probability of finding 
4 
 different voltage levels. In other words, P(LS)=0 when the nodes connected by ej 
are set at the same voltage level. In addition, an accurate estimate of power 
consumption by the interconnection wires is not generally obtainable in high-level 
circuit design. The data can only be obtained after the place-and-route phase. For 
this reason, P(wire) is not considered in the power cost function of this scheduling 
method and the power consumption of edge ej can be reduced to  
P(ej)=P(LS)+P(Reg)+P(Mux)                                 (3) 
We can also define the transmission time of ej as 
T(ej)=T(LS)+T(Reg)+T(Mux)                                 (4) 
where T(LS) is the voltage transform time of the level shifter (if needed), T(Reg) is 
the latency of the register, and T(Mux) is the latency of the multiplexer. 
With the above definitions, we may further define the total power 
consumption of a given CDFG G as 
∑∑
∈∀∈∈∀
+=
Ge
j
VSVGn
iV
jddkddi
kdd
ePnPTP )()(
)(,
,                  (5) 
and the total computational delay time as 
∑∑
∈∀∈∈∀
+=
Ge
j
VSVGn
iV
jddkddi
kdd
eTnTTD
 of CP )( and , of CP 
)()( .                 (6) 
In equation (6), CP represents the critical path of G which is the path of the 
longest computation time. Now, the multiple voltage scheduling (MVS) problem 
can be defined as: 
MVS: Given a CDFG G=<V, E>, a timing constraint TC, and m voltage 
levels . Assume all of the nodes in CDFG 
are initially set to the same voltage , which is the highest voltage in 
S(V
}...,  ,,{)(
21 mdddddddd
VVVVS =
1dd
V
dd). MVS is to assign different supply voltages to different nodes, so 
that TP is minimized and satisfies the constraint TD ＜ TC. 
6 
 CDFG
Scheduling
Setting SA
parameters
2nd level
adjusting
Parameters
Evaluate
Power and 
delay
TP & 
TD
Output
Yes
Allocation
Binding
1st level 
scheduling
Output
No
Cell 
Library
Scheduling
T > Tf
1 2
3
4
 
Fig. 1. The MVS flow. 
 
3. 3. Phase I: Scheduling 
 
Fig. 2 shows the scheduling algorithm. The inputs of this algorithm are the 
CDFG, m supply voltage levels, and the timing constraint factor (TCF). The output 
is the total power consumption (TP), the total delay (TD), and the new CDFG, in 
which each node has been assigned a voltage. The m voltage levels, 
, are sorted in ascending order by voltage level; that is, 
. In the beginning, we used the ASAP (As Soon As Possible) 
scheduling method to assign  values to each CDFG node. We then calculated 
the total power consumption TP and total delay TD to obtain the thresholds for 
later processes. In line 4 of Fig. 2, the timing constraint (TC) is set to TD × TCF. 
Afterward, the operational nodes are sorted according to their power dissipation 
}...,  ,,{
21 mdddddd
VVV
mdddddd
VVV >>> K
21
1dd
V
8 
 1: INPUT: CDFG; m voltage levels; Timing constraint factor TCF; 
2: First schedule the CDFG with ASAP method, and assign CDFG to voltage 
; 
1dd
V
3: Calculate the total power TP and total delay time TD of CDFG; 
4: Set the timing constraint TC = TD × TCF; 
5: According to the power consumption of each node, sort all of the nodes, and 
put them into the queue power-queue, with the decreasing order (High 
power consumption nodes in the front end, and low power consumption 
nodes in the rear end.); 
6:  while (power-queue is not empty) and (TD < TC) do 
7:      choose the first node ni of the power-queue; 
8:      set variable j = m; 
9:      while j ≠ 1 do 
10:         assign ni to voltage level ; jddV
11:         update the power and delay of ni, as well as its incoming and 
outgoing edges; 
12:          recalculate the total power TPnew and total delay time TDnew; 
13:          if (TPnew < TP and TDnew ≦ TC) 
14:            then {accept the assignment of ni; j = 1; TP = TPnew; TD = 
TDnew; escape the inner while loop;} 
15:            else {reject the assignment of ni; j = j-1;} 
16:       end while 
17:       delete ni from power-queue; 
18: end while 
19: OUTPUT: CDFG, in which each node has been assigned to certain voltage 
level; TP; TD;   
Fig. 2. The 1st level scheduling algorithm. 
 
3. 4. Phase II: Adjusting 
 
After the scheduling process, the SA-based algorithm is used to adjust the 
nodes for further power reduction. Simulated Annealing is an adaptive, iterative 
and nondeterministic algorithm that allows uphill moves to escape from the local 
10 
 range set between 0 and 1. The value of γ controls the cooling speed of SA 
algorithm. If γ is set to a large value, the temperature reduces slowly but the 
scheduling result is good. In our experiment, the γ is set to 0.99. 
 
1: INPUT: scheduled CDFG (G); starting temperature T; the terminating 
temperature Tf;  the cooling constant γ; 
2: while T ≧ Tf do 
3:   for (i=1; i ≦ K; i++) 
4:      p1 = random[0,1];  p2 = random[0,1]; 
5:      if (p1 < 0.5) then G’ = Reassign(G); 
6:         else G’ = Exchange(G); 
7:      ∆fp = TP(G) - TP(G’) 
8:      ∆fd = TC - TD(G’) 
9:      if (∆fp ≧ 0 and ∆fd ≧ 0) then G = G’ 
10:      else if (p2  T
fp
e
∆−
≤  and ∆fd ≧ 0) then G = G’; 
11:   end for 
12:      T = γ × T; 
13:  end while 
14:  OUTPUT: CDFG; TP; TD;     
Fig. 3. The simulated annealing based adjusting algorithm. 
 
3. 5. An Example 
 
This example assumes a CDFG of G=<V, E> and three voltages, , , 
and . We assume the highest supply voltage is , and the lowest voltage is 
. In Fig. 4, there are 8 nodes (n
1dd
V
2dd
V
3dd
V
1dd
V
3dd
V 1, n2, ..., n8) and 10 edges (e1, e2, ..., e10). Note 
that the voltage of every operational node is marked within the node, where V1 
represents , V2 represents , and V3 represents . Fig. 4 also shows the 
1 2 3dd
V ddV ddV
12 
 level shifters are not needed at e8 because n5 and n7 are working at the same 
voltage level. 
 
4. Allocation and Binding 
 
Resource allocation and binding, which determine the cost of final 
implementation, are two important steps in high-level synthesis. However, finding 
optimal solutions for these two problems is known to be computationally hard. In 
general, if a task can be represented as a conflict graph, the binding problem can be 
mapped onto the graph coloring problem; unfortunately, the optimal solution of the 
graph coloring problem requires exponential time and is therefore impractical. As a 
result, many greedy algorithms have been proposed to attempt to find the 
nonoptimal solution of this problem quickly [11]. In this project, we use a heuristic 
method to solve the allocation and binding problems. 
In most high-level synthesis approaches, the storage binding, functional unit 
binding, and interconnection binding problems are solved separately and 
sequentially. In this project, we exploit an algorithm for solving the binding 
problems in the unified manner proposed in [12]. This algorithm solves the graph 
coloring problem by working on a weighted conflict graph, and the unification of 
the binding subtasks is taken care of by the weighted values. 
 
4. 1. Conflict Graph Construction 
 
The conflict graph, which is constructed from a scheduled CDFG, is an 
undirected graph G=(V, E) and can be used for both functional unit binding and 
14 
 conflicting nodes of the graph, as shown in Fig. 5(b). After constructing the 
conflict graph, we can apply the coloring algorithm to solve allocation and binding 
problems. 
 
4. 2. Most Expensive First Binding Algorithm 
 
Our proposed heuristic algorithm is based on a greedy constructive approach 
in which colors are assigned sequentially to nodes. The greedy approach is the 
simplest, being easy to implement and of low computational complexity. 
Unfortunately, it is likely to produce inferior results because it takes into account 
only locally available information. 
 
1: INPUT: scheduled CDFG (G); register set REG;  multiplexer MUX; 
2: CG=Build_Conflict_Graph(G);  
3: while M = LargestUnBound(CG) ≠ Φ do 
4:   Draw_color(M, color);  
  //Use a existed color or create a new color to draw node M 
5:   Binding_Variable}(M, color); 
  // Binding the variable of node M to the register with the same color  
6: End while 
7: Mux_Generation(REG, MUX);  
   // Generate multiplexers for register inputs 
8: OUTPUT: variables, registers and multiplexers' interconnection graph   
 
Fig. 6. The most expensive first binding algorithm. 
 
For all allocation and binding tasks, a node in the conflict graph corresponds 
to a behavioral entity (variable, operation), and a color corresponds to the resource 
(register, functional unit) used for its implementation. The cost of the existing 
16 
 5. Experimental Result 
 
To show the feasibility of our proposed method, we estimated the power 
consumption of several CDFG benchmarks under delay constraints. Three voltage 
levels were used ( : 3.3V, : 2.4V, : 1.8V, provided by TSMC[35]), and 
the module library is shown in Table II. We chose a maximum of three operating 
voltages because using more than three does not significantly reduce power 
consumption [21], [31]. In this module library, each component was designed 
using the TSMC 0.18µm process. We also implemented the level shifter by using 
the methodology proposed in [34]. The energy of the level shifters between 
different voltages is shown in Table III. All the power and delay data in this project 
are measured using the Synopsys HSPICE. 
1 2 3dd
V ddV ddV
 
Table II. The delay (in ns) and power (in mW) of 16-bit components in 
different supply voltages. 
 
 3.3V 2.4V 1.8V 
Module Delay Power Delay Power Delay Power 
Adder 2.0 61.5 3.1 17.3 6.3 8.2 
Subtracter 2.0 61.5 3.1 17.3 6.3 8.2 
multiplier 7.1 177.8 11.8 85.1 18.9 31.2 
 
Table III. Energy consumption of 16-bit level shifters. (Energy: pJ) 
 
From \ To 1.8V 2.4V 3.3V 
1.8V - 10.32 14.40 
2.4V 3.78 - 6.93 
3.3V 2.42 2.30 - 
 
18 
 0
5
10
15
20
25
30
35
40
45
50
dc
t
dif
feq fi
r iir nc
wa
ve
let wd
f
S(Vdd)=2
S(Vdd)=3
Po
w
er
 S
av
in
g 
(%
)
Benchmarks  
Fig. 9. The power reduction percentage in different number of voltages. (TCF=1.0) 
 
Fig. 9 shows the power reduction percentage of different voltage settings 
(S(Vdd)={ =3.3V, =2.4V} and (S(V1ddV 2ddV dd)={ =3.3V, =2.4V, 
=1.8V}) under the timing constraint factor set at TCF=1.0 (i.e. no extra delay). 
The figure indicates that more power saving can be achieved when more voltages 
are used, because more voltage levels provide more selectivity for operational 
nodes. Therefore, more nodes operate at lower voltages and consume less power. 
However, the power and delay of the level shifters must also be considered because 
they increase scheduling complexity. 
3dd
V
2dd
V
3dd
V
 
Table IV. The processing time of MVS method. (TCF=1.0, S(Vdd)=3) 
Benchmark size Scheduling move Processing time 
Dct 42 2080 5027 
Diffeq 10 1189 702 
Fir 31 1266 2349 
Iir 36 1123 2332 
Nc 74 1893 7203 
Wavelet 67 1783 6274 
wdf 50 1827 4745 
20 
 the nodes in critical path and assigns different voltage to other nodes; however, 
such limitations are not applied in our method. As Fig. 11 shows, our proposed 
method obtains a better result than the latency constraint method with TCF=1.0. 
 
0
5
10
15
20
25
30
35
40
dc
t
dif
feq fir iir nc
wa
vel
et wd
f
MVS LC
Benchmarks
Po
w
er
 S
av
in
g 
(%
)
 
Fig. 11. The power reduction percentage comparison between MVS and Latency 
Constraint (LC) method. (TCF=1.0, S(Vdd)=3) 
 
The power reduction rate can be affected by many factors in high-level 
synthesis. One is that the power and delay of the wires between operational 
components are not considered in the proposed method, since they are available 
only after the place-and-route phase takes place. Thus, the wires will consume 
power and increase the total delay time. However, the experimental result still 
shows the feasibility of our proposed algorithm. 
 
 
 
 
 
22 
 2004. 
[8] S. P. Mohanty, N. Ranganathan, and K. Balakrishnan, “Design of a low power 
image watermarking encoder using dual voltage and frequency,” in IEEE Proc. 
of Int'l Conf. on VLSI Design, pp. 153－158, 2005.  
[9]  A. Raghunathan, N. K. Jha, and S. Dey, High-Level Power Analysis and 
Optimization. Norwell, MA: Kluwer, 1998. 
[10] J. M. Chang, and M. Pedram, Power Optimization and Synthesis at Behavioral 
and System Levels. Kluwer Academic Publishers, Boston, 1999.  
[11] J. P. Elliott, Understanding Behavioral Synthesis: A Practical Guide to 
High-Level Design. Kluwer Academic Publishers, Boston, 1999. 
[12] P. Ellervee, High-Level Synthesis of Control and Memory Intensive Applications. 
Doctoral dissertation, Dept. of Electronics, Royal Institute of Technology, 
Sweden, 2000. 
[13]  K. Choi, W. Lee, R. Soma, and M. Pedram, “Dynamic voltage and frequency 
scaling under a precise energy model considering variable and fixed components 
of the system power dissipation,” in IEEE Proc. of Int'l conf. on Computer Aided 
Design, pp. 29－34, Nov. 2004. 
[14]  J. Luo, and N Jha, “Static and dynamic variable voltage scheduling algorithm 
for real-time heterogeneous distributed embedded systems,” in IEEE Proc. of 
Int'l Conf. on VLSI Design, pp. 719－726, Jan. 2002. 
[15] N. K. Jha, “Low power system scheduling and synthesis,” in IEEE/ACM Proc. of 
Int'l Conf on Computer Aided Design, pp. 259－263, Nov. 2001. 
[16] A. K. Murugavel, and N. Ranganathan, “Game theoretic modeling of voltage and 
frequency scaling during behavioral synthesis,” in IEEE Proc. of Int'l conf. on 
VLSI Design, pp. 670－673, 2004.  
[17] K. Usami, and M. Igarashi, “Low-power design methodology and application 
utilizing dual supply voltages,” in IEEE Proc. of ASP-DAC, pp. 123－128, Jan. 
2000. 
[18] K. L. Tsai, S. W. Chang, F. Lai, and S. J. Ruan, “A low power scheduling 
method using dual Vdd and dual Vth,” in IEEE Proc. of Int'l Symp. on Circuits 
and Systems, pp. 684－687, May 2005. 
[19] C. Chen, A. Srivastava, and M. Sarrafzadeh, “On gate level power optimization 
using dual-supply voltages,” IEEE Trans. on VLSI systems, vol. 9, issue 5, pp. 
616－629, Oct. 2001. 
[20] D. Chen, J. Cong, “Delay optimal low-power circuit clustering for FPGAs with 
dual supply voltages,” in IEEE Proc. of Int'l Symp. on Low Power Electronics 
and Design, pp. 70－73, Aug. 2004. 
[21]  W. T. Shiue, and C. Chakrabarti, “Low-power scheduling with resources 
24 
 [34] C.-C. Yu, W.-P. Wang, and B.-D. Liu, “A new level converter for Low-power 
applications,” in IEEE Proc. of Int'l Symp. on Circuits and Systems, pp. 113－
116, May 2005. 
[35] Taiwan Semiconductor Manufacturing Company Limited (TSMC). http:// 
www.tsmc.com/ 
 
26 
  
IV. 學術成果發表 (2003/8~2006/7) 
(1) Yen-Jen Chang, Feipei Lai and Chia-Lin Yang, “Zero-Aware Asymmetric 
SRAM Cell for Reducing Cache Power in Writing Zero,” IEEE Transactions 
on Very Large Scale Integration Systems, Vol. 12, No. 8, pp. 827-836, Aug. 
2004. 
(2) Kun-Lin Tsai, Szu-Wei Chang, Feipei Lai, and Shanq-Jang Ruan, “A Low 
Power Scheduling Method using Dual Vdd and Dual Vth,” in Proc. of IEEE 
International Symposium on Circuits and Systems, Kobe, Japan, May 2005. 
(3) Kun-Lin Tsai, Shanq-Jang Ruan, Li-Wei Chen, Feipei Lai, and Edwin Naroska, 
“Low Power Dynamic Bus Encoding for Deep Sub-micron Design,” in Proc. of 
The 3rd International IEEE Northeast Workshop on Circuit & System, Canada, 
June 2005. 
(4) Yen-Jen Chang, Feipei Lai, “Dynamic Zero-Sensitivity Scheme for Low Power 
Cache Memories,” IEEE Micro, Vol. 25, No. 4, 20-32, Jul. 2005. 
(5) Kun-Lin Tsai, Ju-Yueh Lee, Shanq-Jang Ruan, and Feipei Lai, “Low Power 
Scheduling Method using Multiple Supply Voltages,” in Proc. of IEEE 
International Symposium on Circuits and Systems, Kos, Greece, May 2006. 
 
28 
 表 Y04 
附錄(二) 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                             95年 6 月  5 日 
報告人姓名 
 
李儒岳 
 
服務機構
及職稱 
國立台灣大學 
電機工程研究所 
     時間 
會議 
     地點 
95年 5 月 21~24 日 
希臘科斯島 
本會核定
補助文號 NSC 94-2213-E-002-004- 
會議 
名稱 
 (中文)2006 IEEE 電路與系統國際研討會 
 (英文)2006 IEEE International Symposium on Circuits and Systems 
發表論 
文題目 
 (中文)利用多重供應電壓之低功率排程方法 
 (英文)Low Power Scheduling Method Using Multiple Supply Voltages 
報告內容應包括下列各項： 
一、參加會議經過 
此次出席 2006 IEEE 電路與系統國際研討會 (2006 IEEE International 
Symposium on Circuits and Systems; ISCAS)，並以口頭演講方式發表一篇論文。
研討會的舉辦時間為 5月 21 日至 5月 24 日，舉辦地點在希臘科斯島(Kos, Greece)
的國際會議中心。本次研討會包含了三場 keynote talk，分別為 
 
(1) 主題：Mixed Domain Circuits and Systems (5/22) 
 講者：Yannis Tsividis (Columbia University) 
 
(2) 主題：Systems and Networks on Chips: Challenges and Solutions (5/23)
 講者：Giovanni De Micheli (Integrated Systems Center EPF Lausanne 
Switzerland) 
 
(3) 主題：Foundational research of intelligent systems in the European 
programmes (5/24) 
 講者：David Guedj (European Commission Future and Emerging Technologies)
 
這三場 keynote talk 的演講者都是國際知名的學者，其中，我最有興趣且收
穫最多的是第二場由 Micheli 教授所談論到的 NoC 設計部分。他指出 NoC 已經是一
個晶片系統設計的趨勢，在他的演講中也提到了許多設計 NoC 可能遇到的問題及可
能的解決方式。 
 
