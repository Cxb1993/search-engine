 2
increases the memory requirement by duplicating nodes and arcs which further prolongs the time for the IB (iteration 
bound) calculation of the equivalent SRDFG.  The iteration bound of the MRDFG can be determined faster if these 
redundancies in the equivalent SRDFG are first removed. [12] combined elimination of node and edge redundancies to 
propose a novel algorithm for faster determination of the iteration bound of the MRDFG.  This, however, incurs extra 
overhead and it only improves the efficiency of IB computation.  Before the reduction, the increased memory 
requirement is still required to generate the equivalent SRDFG. 
 It is generally an exponential time task to transform MRDFG into SRDFG [3] and the transformed SRDFG is 
much larger (grows exponentially) than the MRDFG.  Further, efforts to find the bound are wasted if the MRDFG is 
not live.  Also their algorithm considers only the case of resource-constrained scheduling.  In order to execute 
operations of the processing algorithm in parallel, the required number of processors or functional units required to 
execute the operations in parallel may be larger than the number of available resources. In that case, they have to give 
the order of executions, or the precedence, to these operations to reduce the parallelism. 
However, modern VLSI is able to put several hundred processors in a single chip like thinking machines and 
resource is no longer a limitation.  In this case, the algorithm proposed previously no longer holds.  We propose to 
develop an algorithm for such resource-rich situations and being able to handle resource-constrained cases under small 
twists. 
 In [7,8], we extended the technique to determine the IB for SRDFG to that for an MRDFG meeting some 
sufficient condition where the MRDFG behaves like an SRDFG.  There is no need to take the extra time to remove the 
node and arc redundancy. 
 We now propose to extend this technique to cases involving loop combinations with redundant nodes and 
edges much fewer than that in [3].  Loop combination refers to the fact that the IB of an MRDFG may be a linear 
additive combination of the loop bounds (LB's) of more than one loop.  We propose to convert it to another MRDFG 
(with some node and arc duplications) satisfying the above sufficient condition with no loop combination. 
  
2. We also propose to answer a question by Schoenen [4] as in Figure 2 of [4] which shows the normalized throughput 
as a function of the WST (weighted sum of tokens). The linear dependency is the bound confirming our theory in [8]. 
Above CM (Comfortable Marking), the same pattern repeats plus one full throughput step of value one and so on. We 
could consider decompose one cycle into several with integer multiples of CM plus one with the remaining delays, the 
throughput of them all accumulates algebraically. This explains the motif behind the IB study of MRDFG with 
loop-combinations. They observed from numerous simulations that a certain kind of point symmetry exists around a 
certain WST. They were not able to explain this. It seems like a kind of nonexistent-delay-brake that slows down the 
system if we have less than CM delays.  We propose to apply our theory in [8] to explain this.  Due to the 
symmetry, it is interesting to study the behavior around the symmetry point which has not been treated in any 
literature. 
3. Schoenen also stated that the liveness condition has to be checked to obtain the zeroes up to WST = 7, otherwise 
erraneous (but valid) bounds might be introduced.  None has considered this problem. As illustrated in [11], the 
problem for minimum live weighted marking is equivalent to the problem if there is a positive solution of a 
Diophantine equation, which takes exponential time.  We propose to investigate this issue and develop an efficient 
algorithm.  None has investigated the possibility of determining IB for a weighted loop with self loop-combination in 
an algebraic way.  It is interesting to investigate the IB when it is minimum (and above) marked to be live.   
 
三、Results 
I. Computation of IB of a Weighted Circuit (WC) 
  The problem is in general the NP-hard; however, when it is conservative and consistent, the loop is bounded and 
it must return to its initial marking in finite number of runs.  Thus, we attempt to find the best lower bounds followed 
by repeating reducing the bound to test the liveness until it is dead.  The testing also allows us to find the IB for the 
minimal marking. We have added one new – algebraic approach ⎯ in addition to the centralized and distributed ones  
⎯  to find the lower bound. We find that the distributed method produces lower bound than the centralized one 
because the former fires transitions more efficiently.  However, it is more difficult to estimate the lower bound in an 
algebraic way. The new algebraic approach derives lower bounds in terms of formulas as follows. 
Thus, we consider only the case where only p1 holds tokens. Define the corresponding weighted sum of tokens W 
(m0(p1), respectively), Ws, as the minimum W (marking at p1, respectively) to support one system iteration, i.e., 
m0(p1)=ao(p1)*R0.   
It, however, may overestimate the minimum W, Wmin, for liveness.  Note that one loop iteration is a minimum 
legal firing sequence that includes every transition in the loop.  It is minimal in the sense that any shorter firing 
sequence is not legal.   
Definition: Let N be a Weighted Circuit (WC), Wl (Ws, respectively) is the minimum W to support one system 
iteration (a consecutive loop iterations to reach one system iteration, respectively).  Wmin, is the minimum W for 
liveness.   
Lemma 1: For a circuit, Ws ≥Wl. 
 4
 
0) Using graph-transversal algorithms to divide the net into separate loop-combination free islands 
(lcf-islands). 
    
 Definition: A loop-combination free island (lcf-island) is a strongly connected subnet with no 
loop-combinations. 
 
Definition: Lf(pr)={L| pr∈L} is the set of all the elementary (forward) loops L passing through a common place, 
called the reference place pr.  N is said to be covered by L1f(pr1), L2f(pr2), …, Lkf(prk), if ∀i, j, Lif(pri)∩Ljf(prj) ≠Ф, iff i≠j 
and LN={L| L is an elementary (forward) loop in N}= L1f(pr1)∪L2f(pr2) ∪ …∪ Lkf(prk).  Lr(pr, p’r)={L| p’r∈N,∀ L’ ∈ 
Lf(pr), p’r∉L’, L∈ Lf(p’r), ∃L1∈Lf(pr), L1∩L≠Ф} is the set of all elementary (reverse) loops that pass through a reference 
node p’r not on any loop in Lf(pr).  L2 is a reverse loop with respect to L1 if ∃ p1, p2∈N, p1≠ p2, L2∈Lr(p1, p2), L1∈ Lf(p1), 
L1∩L2≠Ф. 
Lemma 4: Any Lf is a loop-combination free island (lcf-island). 
 Proof:  By the definition of loop-combination, ∃ t1∈L1, t2∈L2, L1∈ Lf, L2∈ Lf and a firing sequence σ where t2 
may firing more than once without firing t1.  This is impossible since both L1 and L2 pass through pr. 
It takes O(n) to find one lcf-island where n=| T| +|P |+|F|. In the worst case, there are O(n) lcf-islands. The 
total time complexity is hence O(n2). Because each lcf-island contains at least one place not in another 
lcf-island, the number of lcf-islands is O(|P |). 
1) For each lcf-island Ii, find its critical loop mark factor clmf using procedure clmf (Ii). 
   Definition: Ii is single-enabled (multiple-enabled) if there is only (more than one) one transition is initially 
enabled in Ii under M0. 
To simplify the presentation, we assume that Ii is single-enabled.  However, the results also apply to the case 
of multiple-enabled Ii using the retiming technique. 
Definition: Let (υ)i denote the υ (=t, p, R, …) for island Ii. Let t be a transition in Ii. Define the loop factor li of 
Ii to be li=R(t)/Ri(t), indicating the number of island iterations (or loop combinations) needed to complete one system 
iteration. Define the total enabling factor eti of Ii to be such that the initially enabled transition t in Ii is enabled etiRi(t) 
times under M0.  eti is the number of island iterations that can be performed by firing one round of all transitions in Ii to 
return to M0.  We say that Ii is said to be enabled eti times. 
In general, for a multiple-enabled Ii, eti is determined by the marking in the critical loop similar to the way 
iteration bound 
is determined 
except that the 
distance is 
replaced by 
setting distance 
from pa to pb, 
dab=M0(pb)/(ao(p
b)Ri(tk)) if 
tk∈pa●∩●pb else dab=0. Then, find the minimal or shortest distance from a node to itself dkk among all places and we 
have eti=mink dkk.  
 The total time complexity of this technique is O(|P |3). 
2) Duplicate each node in Ii clmf=li-eti+1 times using procedure duplicate(Ii). 
Notice that when eti<li, the island is unable to complete one system iteration by firing all transitions in one 
round and return to M0. li-eti indicates the corresponding deviation and in order to complete one system 
iteration, li-eti additional rounds must be performed.  Thus, we need to duplicate Ii li-eti times; this plus Ii 
itself constitutes li-eti duplicates of Ii. In the sequel, let {tα}=●pr. w=F(tα, pr). 
 
Definition: tk is the duplicate of t for the k-th firing of t. ta,b,…v is the duplicate of t for the a-th, b-th, …, and 
v-th firing of t indicating that ta=tb=…=tv. t is called to be incompatible if ∃Ii, Ij, Ii≠Ij, (tk-1)i=(tk)i, (tk-1)j≠(tk)j.  
The set of incompatible transitions in N is denoted by TI. 
 
 
 
procedure clmf (Ii) 
 { 
1. compute li= R(t)/Ri(t) 
2. in the Floyd Matrix, set dab=M0(pb)/(ao(pb)Ri(tk)) if tk∈pa●∩●pb else 
dab=0, ∀ pa, pb∈Pi  
3. find the shortest dkk  
4. set eti=mink dkk 
5. compute clmfi=li-eti+1 
     } 
 6
  
The time complexity for Step 1 in the worst case is O( | T | ( | T| + |P | )) which is polynomial.  The total time 
complexity is dominated by Step 7 and is O(n’3). 
 
四、參考文獻 
 
[1] E.A. Lee and D.A. Messerschmitt. Static scheduling of synchronous data flow programs for digital signal 
processing. IEEE Transactions on Computers (TOC), C36 (1):24--35, January 1987. 
[2] D. Y. Chao and D. Y. Wang, "Iteration bounds of single-rate data flow graphs for concurrent processing," IEEE 
Trans. Circuits Syst.-I, vol. CAS40, no. 9, pp. 629--634, Sept. 1993. 
[3] K. Ito and K.K. Parhi. Determining the iteration bounds of single-rate and multi-rate data-flow graphs. In IEEE 
Asia-Pacific Conference on Circuits and Systems, pages 163-- 168, Taipei, December 1994. 
[4] R. Schoenen, V. Zivojnovic, and H. Meyr. An upper bound of the throughput of multirate multiprocessor schedules. 
In Proceedings of the IEEE International Conference on Acoustics, Speech and Signal Processing, volume 1, pages 
655--658, 1997. 
[5] E. Teruel, P. Chrzastowski, J.M. Colom and M. Silva. On Weighted TSystems. LNCS 616: 348--367, 
Springer-Verlag, 1992.  
[6] D. Y. Chao,”A Fast Implementation For Recurrent DSP Scheduling Using Final Matrix,” Journal of Information 
Science and Engineering, Vol. 16, No.3, 2000, pp. 391-421. 
[7] D. Y. Chao,”Conversion, Iteration Bound and X-WINDOW Implementation for Multi-Rate Data Flow Graphs,” 
Proceedings of the National Science Council, Part A: Physical Science and Engineering, Vol. 22, No. 3, pp. 
362-371, May 1998.  
[8] D.Y. Chao, “Performance of Multi-Rate Data Flow Graphs for Concurrent Processing,” Journal of Information 
Science and Engineering, Vol. 13, No. 1, March 1997, pp. 85-123. 
[9] D. Y. Chao and David Wang, “A Synthesis Technique for General Petri Nets,” J. Systems Integration, Vol.4, No.1, 
1994, pp.67-102. 
[10] D. Y. Chao, M. C. Zhou, and D. Wang, “Multiple-weighted marked graphs,” 12th World IFAC Congress, Sydney, 
Australia, Vol.1 pp.259-264, July 1993. 
 
[11] Piotr Chrzastowski-Wachtel, Marek Raczunas: Liveness of Weighted Circuits and the Diophantine Problem of 
Frobenius. FCT 1993: 171-180. 
[12] K. Ito and K. K. Parhi, “Determining the minimum iteration period of an algorithm," Journal of VLSI Signal 
Algorithm I for WMG conversion into MG 
Input: A WMG 
Output: the equivalent MG and the IB 
1) Find Ri for each transition. 
2) Divide the net into separate loop-combination free islands (lcf-islands) (denoted by 
Ii). 
3) For each Ii, compute clmfi using the procedure clmf (Ii). 
4) Duplicate each Ii clmfi times using the procedure duplicate(Ii). 
5) Expand the duplicated Ii using the procedure expand(Ii). 
6) Merge all Ii along common transitions using procedure merge(). 
7) Output the resulting MG. N’. 
8) Compute and output the IB for N’. 
