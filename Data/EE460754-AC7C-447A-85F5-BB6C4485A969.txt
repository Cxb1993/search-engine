1中文摘要
關連法則探勘是資料探勘領域中一項重要的研究。隨著各種相關應用的興起，例如網
頁點選串流探勘、網路入侵偵測以及線上交易分析等，我們所要處理的資料不再是靜態的
資料，而是一連串即時且連續的動態資料流。傳統關連法則探勘的方法在處理資料的過程
中，經常需要多次讀取資料庫。然而在高速資料流的環境中，我們只允許資料被讀取一次，
並且要求在最短的時間內產生分析的結果。本研究考慮在移動視窗模式的資料流環境中，
設計一套有效率的方法來發掘資料流前 k 個頻繁封閉項目集。我們使用 “最大長度”來取
代 “最小支持度”。由於設定適當的支持度不是一件容易的事，因此先前相關的研究提出讓
使用者設定 “最小長度”來取代 “最小支持度”，目的是發掘長度大於或等於最小長度的項
目集。然而這種方式的探勘結果會遺失許多長度較小，但具有高支持度的項目集之重要資
訊。由於長度愈長的項目集，其支持度相對的也愈小，應用上的價值將會降低，因此我們
的研究是以 “最大長度”來取代 “最小支持度”，發掘出所有長度小於或等於最大長度的項
目集。
關鍵詞：資料探勘、資料流、移動視窗、頻繁封閉項目集、關連法則探勘
英文摘要
Association rule mining is an important research topic in the data mining community. With the
emergence of new applications, the data we need to process is not again static, but the continuous
dynamic data stream. Examples include network traffic analysis, Web click stream mining, and
on-line transaction analysis. In the process of mining association rules, traditional methods need
to read the database more than once. However, due to the consideration of performance and
storage constraints, on-line data stream mining algorithms are restricted to making only one pass
over the data. In this research, we design an efficient algorithm to mining top-k frequent closed
itemsets over a stream sliding window. We use“maximum length”to replace“minimum support”.
Because finding an appropriate support threshold is not easy, previous related researches use
“minimum length”to replace“minimum support”. That is to discover frequent closed itemsets of
length no less than the minimum length. However the method will lose information about
itemsets with short length but high support. Thus, we use “maximum length”to replace
“minimum support”in this study.
Keywords：data mining, data stream, sliding window, frequent closed itemset, association rule
mining
1. 前言
隨著各種新興應用的崛起，例如網路流量分析(network traffic analysis)、網頁點選串流
探勘(Web click stream mining)、網路入侵偵測(network intrusion detection)以及線上交易分析
(on-line transaction analysis)等，我們所要處理的資料不再是靜態的資料，而是一連串即時且
連續的動態資料流(dynamic data stream)[3,7]。由於資料流是以極快速的方式，大量且持續
產生的一連串資料，因此資料流探勘中必須滿足下列三個要求[15]：(1)資料流中的每一個
資料項目最多只能被檢視一次。(2)雖然在資料流中新資料不斷的產生，但是資料流探勘所
使用的記憶體是有限的。(3)最新的資料流探勘的結果必須要能夠配合使用者的要求快速地
產生。為了達到上述的需求，資料流探勘通常會允許分析的結果具有某種程度的誤差，以
達到縮短處理時間的目的。
在資料庫的領域裡，一項重要的應用是在大型交易資料庫中發掘相關物品(item)的關連
法則(association rules)[1]。具體地說，也就是從給定的交易資料裡（每一筆交易是由一組
item 所組成）發掘出類似這樣的法則︰ YX  ，其中 X 和 Y 是 item 所成的集合。Items
的集合稱之為“項目集”(itemset)。一個關連法則的例子如下：“80%的顧客如果購買 X，則
也會購買 Y”，在這裡，80% 被稱為法則的 “信心水準”(confidence)。關連法則探勘有下列
3環境不是資料流的環境，而且探勘的結果會遺失許多長度較小，但具有高支持度的項目集
之重要資訊。由於長度愈長的項目集，其支持度相對的也愈小，應用上的價值將會降低。
因此，我們的研究目標是在移動視窗的模式中，使用有限的記憶體空間設計一個 “one-pass” 
演算法，以 “最大長度”(maximum length) 來取代 “最小支持度”，有效率地從交易資料流
中發掘出前 k 個長度小於或等於最大長度的頻繁封閉項目集。
2. one-pass 演算法之設計
在這一節，我們考慮在移動視窗模式(sliding window model) 的資料流環境中，設計一
套有效率的方法來發掘資料流中前 k 個頻繁封閉項目集(top-k frequent closed itemsets)。研
究內容主要包含兩個部份：使用 “最大長度”(maximum length) 來取代 “最小支持
度”(minimum support)以及設計一個 one-pass 演算法來發掘資料流中前 k 個頻繁封閉項
目集。
2.1 使用 “最大長度”來取代 “最小支持度”
Wang et al.[13] 提出使用 “最小長度”(min_l) 來取代 “最小支持度”的方法，根據使用
者所設定的 “min_l”來發掘前 k 個長度大於或等於 min_l 的 frequent closed itemsets。但
是我們發現，使用 “最小長度”來取代 “最小支持度”會產生許多問題。以表 1 為例，考
慮下列兩個例子：
表 1: 交易資料
ID Items
1 a, d, e, g
2 a, b
3 a, b, c, e, h
4 a, b, c, d
5 a, b, c, d, f, i
6 a, b, c
7 a, b, c, d, f, i
8 a, b, c, e
 Case 1: 發掘 top-3 frequent closed itemsets with min_l = 2，得到的結果是: {ab: 7, abc:6,
ad:4}，它代表 closed itemset“ab”的支持個數為 7，“abc”的支持個數為 6，“ad”的支
持個數為 4。
 Case 2: 發掘 top-3 frequent closed itemsets with min_l = 3，得到的結果是: {abc: 6, abcd:3,
abe:2, ace:2}
Wang et al.[13] 的方法只尋找長度大於或等於 min_l 的 closed itemsets，所以造成在
Case 1 的結果中看不到 “a:8”的資訊(根據定義，“a”亦是 closed itemsets)。類似地，在
Case 2 的結果中無法得到 “a:8, ab:7, ad:4”的資訊。以 Case 2 為例，單純從 closed itemset
的定義來看結果，則可能會誤解 “ab”的支持個數為 6，“ad”的支持個數為 3，與事實情
況不符。造成這個問題的原因是：執行結果只列出長度大於或等於 “最小長度”的 closed
itemsets，導致在執行結果中失去了長度小於 “最小長度”但具有高支持度的 closed
itemsets 之相關重要資訊。
由於長度愈長的 closed itemsets，其支持度相對的也愈小，應用上的價值將會降低，因
此我們的研究是以 “最大長度”(max_l) 來取代 “最小支持度”，發掘前 k 個長度小於或等
於 “最大長度”的 frequent closed itemsets，k 值可由使用者根據需要自行設定。假設 X 是
出現在結果中的 closed itemset，對於任何 X 的 subset X’，若 X’亦為 closed itemset，則
X’也會出現在結果中，如此才不會遺失重要的資訊。以表 1 為例，考慮下列兩個例子：
 Case 1: 發掘 top-4 frequent closed itemsets with max_l = 3，得到的結果是: {a:8, ab:7,
abc:6, ad:4}。
522SP ({x})= 11SP ({x})。我們只需要掃描視窗 21w 中的資料一次，即可得到 21SP ({x})，而
CS2({x})=CS1({x})- 14SP ({x})+ 12SP ({x})。
圖一： 移動視窗模式
一旦得到每一個 item 的 CS2 和 SP2j 的值，即可產生所有在時間點 T2 的 potential
top-k frequent closed 1-itemsets。再根據 one-pass 演算法中的步驟(3)，即可找出所有 top-k
frequent closed itemsets with max_l = l。
3. 範例
假設使用者所設定的視窗個數 n = 4，每一個視窗所包含的時間 t = 5 分鐘，表 2 為時
間點 T1 時各視窗的交易資料。假設我們令 k =5，根據 2.2 節 one-pass 演算法的步驟，發掘
top-5 frequent closed itemsets with max_l = 4 的進行過程如下：
表 2：在時間點 T1 各視窗的交易資料
w14 w13 w12 w11
ID Items ID Items ID Items ID Items
1 {a,d,e,g} 3
{a,b,c,
e,h} 5
{a,b,c,
d,f,i} 7
{a,b,c,
d,f,i}
2 {a,b} 4 {a,b,c,d} 6 {a,b,c} 8
{a,b,c,
e }
在步驟 1，假設目前的時間點為 T1，掃描表 2 所有視窗中包含的交易資料一次，計算
每一個 item 的 SP1j、CS1 和| CS1|值，如表 3 所示。
表 3：時間點 T1－各項目的 SP1j、CS1 和| CS1|值
SP1j
items j=4 j=3 j=2 j=1 CS1 |CS1|
{a} {1,2} {3,4} {5,6} {7,8} {1,2,3,45,6,7,8} 8
{b} {2} {3,4} {5,6} {7,8} {2,3,4,5,6,7,8} 7
{c} ψ {3,4} {5,6} {7,8} {3,4,5,6,7,8} 6
{d} {1} {4} {5} {7} {1,4,5,7} 4
{e} {1} {3} ψ {8} {1,3,8} 3
{f} ψ ψ {5} {7} {5,7} 2
{g} {1} ψ ψ ψ {1} 1
{h} ψ {3} ψ ψ {3} 1
{i} ψ ψ {5} {7} {5,7} 2
在步驟 2，我們根據推論(1)和步驟(1)所得到的結果，得到 potential top-5 frequent closed
7{a,b,e} ψ {3} ψ {8} {3,8} 2
{a,c,d} ψ {4} {5} {7} {4,5,7} 3
{a,c,e} ψ {3} ψ {8} {3,8} 2
{a,d,e} {1} ψ ψ ψ {1} 1
{b,c,d} ψ {4} {5} {7} {4,5,7} 3
表 8：分析候選 3-項目集後所得到的 P 值－T1_P_3
S1 {a}：8
S2 {a,b}：7
S3 {a,b,c}：6
S4 {a,d}：4
S5 {a,e}：3
S6 {a,b,d}：3
S7 {a,c,d}：3
S8 {b,c,d}：3
表 9：時間點 T1－候選 4-項目集中各項目的 SP1j 和 CSi 值
SP1j
items j=4 j=3 j=2 j=1 CS1 |CS1|
{a,b,c,d} ψ {4} {5} {7} {4,5,7} 3
表 10：分析候選 4-項目集後所得到的 P 值－T1_P_4
S1 {a}：8
S2 {a,b}：7
S3 {a,b,c}：6
S4 {a,d}：4
S5 {a,e}：3
S6
{a,b,c,d}
：3
表 11：時間點 T1－各視窗在時間點 T1的交易資料
w24 w23 w22 w21
ID Items ID Items ID Items ID Items
3 {a,b,c,e,h } 5
{a,b,c,
d,f,i } 7
{a,b,c,
d,f,i } 9 {a,c,i}
4 {a,b,c,d } 6 {a,b,c } 8
{a,b,c,
e } 10 {b,c,d}
假設表11中，視窗W21 為T1 時間點之後五分鐘的交易視窗。假設現在開始進行時間點
T2 的探勘，視窗W24=W13，W23=W12，W22=W11，此時我們只要掃描視窗W21一次，即可得
到W21視窗中每個item 的SP21 值，如表12所示。每個 item x 的CS2 值為CS2({x}) = CS1({x})
- SP14({x}) + SP21({x})，如表13所示。
表12：SP21 的交易編號之集合
items ID
{a} {9}
{b} {10}
{c} {9,10}
{d} {10}
{i} {9}
9S4 {a,b }：6
S5 {a,i}：4
S6 {b,d}：4
S7 {c,d}：4
S8 {a,d}：3
S9 {c,i}：3
表 17：時間點 T2－候選 3-項目集中各項目的 SP2j和 CSi 值
SP2j
items j=4 j=3 j=2 j=1 CS2 |CS2|
{a,b,c} {3,4} {5,6} {7,8} ψ {3,4,5,6,7,8} 6
{a,b,d} {4} {5} {7} ψ {4,5,7} 3
{a,b,i} ψ {5} {7} ψ {5,7} 2
{a,c,d} {4} {5} {7} ψ {4,5,7} 3
{a,c,i} ψ {5} {7} {9} {5,7,9} 3
{a,d,i} ψ {5} {7} ψ {5,7} 2
{b,c,d} {4} {5} {7} {10} {4,5,7,10} 4
{c,d,i} ψ {5} {7} ψ {5,7} 2
表 18：P 值－T2_P_3
S1 {c}：8
S2 {a,c}：7
S3 {b,c}：7
S4 {a,b,c}：6
S5 {a,i}：4
S6 {b,c,d}：4
S7 {a,b,d}：3
S8 {a,c,d}：3
S9 {a,c,i}：3
表 19：時間點 T2－候選 4-項目集中各項目的 SP2j和 CSi 值
SP2j
items j=4 j=3 j=2 j=1 CS2 |CS2|
{a,b,c,d} {4} {5} {7} ψ {4,5,7} 3
{a,c,d,i} ψ {5} {7} ψ {5,7} 2
表 20：P 值－T2_P_r
S1 {c}：8
S2 {a,c}：7
S3 {b,c}：7
S4 {a,b,c}：6
S5 {a,i}：4
S6 {b,c,d}：4
S7 {a,c,i}：3
S8
{a,b,c,d}
：3
11
計畫成果自評
本計畫之研究成果與原計畫之預期目標相符，研究成果已發表在研討會中:
蔡秀滿, 彭雅筠, “在移動視窗模式中發掘資料流前 K個頻繁封閉項目集”, 第十九屆國際資
訊管理學術研討會, 2008. (NSC 96-2221-E-159-015)
可供推廣之研發成果資料表
□可申請專利 ▓可技術移轉 日期：97 年 7 月 22 日
國科會補助計畫
計畫名稱：在移動視窗模式中發掘資料流前K個頻繁封閉項目集之
研究
計畫主持人：蔡秀滿
計畫編號： NSC 96－2221－E－159－015 學門領域：資訊工程
技術/創作名稱 探勘頻繁項目集的新概念
發明人/創作人 蔡秀滿
中文：我們以 “移動視窗模式”為基礎，設計一套有效率的方法來
發掘資料流前 k 個頻繁封閉項目集(top-k frequent closed itemsets)。
我們設計的重點是使用 “最大長度”(maximum length) 來取代 “最
小支持度”(minimum support)。由於設定適當的支持度不是一件容
易的事，因此先前相關的研究提出讓使用者設定 “最小長度”來取
代 “最小支持度”，目的是發掘長度大於或等於最小長度的項目
集。然而這種方式的探勘結果會遺失許多長度較小，但具有高支持
度的項目集之重要資訊。由於長度愈長的項目集，其支持度相對的
也愈小，應用上的價值將會降低。因此，我們提出以 “最大長度”
來取代 “最小支持度”的觀念，發掘出所有長度小於或等於最大長
度的項目集。這將有助於提升探勘結果的可用性。
技術說明
英文：We design an efficient algorithm to mining top-k frequent closed
itemsets based on the sliding window model. We use “maximum
length”to replace“minimum support”. Because finding an appropriate
support threshold is not easy, previous related researches use
“minimum length”to replace “minimum support”. That is to discover
frequent closed itemsets of length no less than the minimum length.
However the method will lose information about itemsets with short
length but high support. Thus, we propose the idea of “maximum
length”, in order to discover all the itemsets with the length less than or
equal to the maximum length. The study will promote the usability of
the mining result.
可利用之產業
及
可開發之產品
資料探勘相關之應用
