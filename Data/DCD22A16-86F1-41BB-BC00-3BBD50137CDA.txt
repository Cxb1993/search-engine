 2 相關技術與理論介紹 
個人軟體流程  -  PSP (  Personal 
Software Process )，是一套改善軟體流程的
方法，由一系列的方法、表單、腳本等組
成，用以指導軟體開發人員計劃、度量和
管理他們的工作，同時它顯示了如何定義
過程及如何測量其質量和生產率。為了穩
定的生產高質量的產品，軟體開發人員必
須計劃、度量和追蹤產品的質量，而且必
須從工作的開始就關注產品的質量，最後
他們必須分析每一個工作的結果用以改善
其個人的流程。導入 PSP 的概念，可以幫
助程式設計師了解並且改善自己開發程式 
的時間。 
 
物件品質度量是評估物件導向程式設
計好壞的依據，以量化的數值分析指出物
件之間的相依程度、可重用性、物件複雜
度與聚合度，這些數值有效幫助我們評估
物件設計的優劣。目前物件導向領域裡最
普遍使用的品質衡量方法是由 Chidamber
與 Kemerer 教授所提出的 CK Metrics，本
系統會掃描並分析學生程式的 CK Metric 
並提供改善建議。 
 
程式重構的基本精神是在外觀不被更動的
前提下，進行內部結構最佳化的動作。而
重構的範圍通常是指軟體架構、演算邏
輯、物件關係及程式碼內容。Martin Fowler
所著的 Refactoring - Improving the Design 
of Existing Code 一書中提出了 22 種程式
的臭味，本系統會自動偵測出數種臭味並 
提供學生改進建議。 
 
3 系統簡述 
本系統以 Web-Base 的模式設計，並依功能
分成七個子系統：管理員管理子系統
(ADMS)、作業管理子系統(AMS)、作業繳
交子系統(ASS)、品質衡量子系統(QES)、
資料呈現子系統(DDS)、資料庫存取子系統
( D A S )、整合圖形使用者介面子系統
(IGUIS)。系統主要使用者是教師(指派、批
改作業)、助教(批改作業並給予學生改進建
議)、學生(繳交作業並完軟體流程和軟體品 
質衡量的程序)。 
 
我們的系統部署於 Apache Tomcat Web 
Container 之上，同時我們也導入 Apache 
Struts Web Framework，保持系統的靈活和
彈性。我們將七個子系統分別依照
M o d e l - V i e w - C o n t r o l l e r 分別部署於
Container 之上，Model 使用一般的 Java 
Bean 撰寫而成、View 則使用 HTML 和 Tag
組成，Controller 則使用 Struts 的提供類別
構成，藉此實現一個 Web MVC 的概念。
圖二是 JQAS 系統架構圖，主要使用者有
系統管理員、教師、助教和學生，使用者
透過網頁操作系統，進入系統後再依不同
功能進入不同子系統，接下來再透過資料 
庫存取子系統連結資料庫。 
 
 
圖二：JQAS 系統架構圖 
 
JQAS 的七個子系統分別負責的功能為下： 
 管理員管理子系統（Administrator 
Management Subsystem; ADMS）：提供
使用者作系統設定的功能。 
 作業管理子系統（Assignment 
Management Subsystem; AMS）：提供
教師和助教指派、批改作業及成績管
理的功能。 
 作業繳交子系統（Assignment Submit 
Management Subsystem; ASS）：提供學
生繳交作業，並整合個人軟體流程於
繳交作業的流程中。 
 品質衡量子系統（Quality Evaluation 
Subsystem; QES）：依據物件品質衡量
的方法和程式重構的理論衡量軟體的
品質，並提供學生程式改進的建議，
增進學生程式的品質。 
 資料呈現子系統（Data Display 
Subsystem; DDS）：將量化後的資料以
圖表輸出。 
 
圖七：作業開發心得 
 
 
圖八：作業上傳 
 
4.3 品質管理 
本系統的核心是軟體品質衡量子系
統，使用 Java Parser 實作。我們使用 open 
source 的 JavaCC (Java Compiler Compiler)
實 作 ， 此 套 件 可 於
https://javacc.dev.java.net/下載使用。JavaCC
是一個 Parser Generator，經由讀進特定的
語言描述檔產生 Parser，我們再利用這個
Parser 做品質分析。目前 JQAS 所使用的
Parser已經可以正確辨識 Java 5.0的語法如
Generic，經過修改之後也可正確辨識含有
中 文 字 串 和 A n n o t a t i o n 的 程 
式。 
 
圖九是從 QES 分析 source code 產生
metadata，到與教師指派的 measurement 做
比較，產生適當的改進建議供學生參考的 
過程。 
 
 
圖九：QES 流程圖 
 
本系統會分析類別的資訊並產生
metadata，metadata 包含的資訊及說明如 
下： 
 
表二：JQAS 蒐集的軟體品質資料 
項目 說明 
package 檢查 package declaration，如果欲將
Java Bean 放置於 Container 裡，沒有
package declaration 將無法執行，因此
我們加入這項檢查，可以幫助同學養
成良好的程式習慣。 
import 檢查此類別依賴哪些外部程式庫。 
owner 內部類別屬於哪個類別。 
implements 實作哪些介面。 
superclass 父類別檢查，如果教師指派的作業包
含繼承的需求，我們可以很快的由這
個檢查項目知道學生是否有完成這個
需求。 
subclass 子類別檢查，功能如上。 
CBO 與哪些外部類別偶合，過高的依賴關
係意味著程式難以維護。 
field 屬性數量檢查，理論上，一個好的物
件不應該有太多的屬性。 
constructor 建構元的參數列，我們不希望過長的
參數列降低建構元的可讀和可用性。 
 建構元的大小(以行數為單位)，我們不
希望過度冗長的建構元降低建構元的
可讀和可用性。 
method 方法的參數列，我們不希望過長的參
數列降低方法的可讀和可用性。 
 方法的大小(以行數為單位) ，我們不
希望過度冗長的方法降低方法的可讀
和可用性。 
primitive 原生型態檢查，部分的原生型態可以
可包裝成物件型態，以符合物件導向
的精神。 
condition 條件敘述句，過多條件敘述會降低程
式可讀性，可用多型或和 try - catch 取
代之。 
lcom 屬性和方法的成對關係檢查，如果偏
高則應該拆成多個物件，以利物件重
用。 
 改善軟體流程：有鑒於學生對軟體流
程的不重視，在設計系統時也必須考
慮如何讓學生更確實的填入軟體流程
資料，以確保系統所蒐集的資料是對
學生有幫助的。 
 改善軟體品質分析資料：我們將增強
軟體品質衡量子系統的功能，以分析
出更多有用的軟體品質資料，如是否
遵照 coding standard 撰寫程式。 
 自動測試：將 JUnit 整合至系統中讓學
生於系統中可以測試自己的程式，讓
學生學習更完整的軟體工程開發流
程。 
 抄襲辨識：程式作業抄襲是最常見的
情形了，人工閱讀程式來辨識抄襲將
是非常費力的工作，利用 Parser 以及
相關領域的知識實作自動化辨識抄襲
的功能，可以大幅減少人事成本。 
 Web Service：本系統必須經過安裝才
能供一個教師使用，未來將改寫成教
師只需註冊便可以使用此系統，增加
使用意願。 
 
除了改進系統的功能之外，教育學生
們的學習心態，闡述軟體流程與軟體品質
的重要性，使學生更有效的使用此系統，
與教師的課程相輔相成，也是很重要的。 
 
5. 效益 
本系統實際用於逢甲大學物件導向程式設
計的課堂上。透過非正式的調查，學生對
此系統相當滿意，認為可以提高學習的效
率。 
本研究成果目前已發表在一篇國外會
議論文[6]，預計再收集更多的學生學習狀
況後投稿期刊論文。 
參考文獻 
[1] Eva van Emden, Leon Moonen, “Java Quality 
Assurance by Detecting Code Smells”, Proceedings of 
the Ninth Working Conference on Reverse 
Engineering 2002. 
[2] Giulio Concas, Michele Marchesi, Sandro Pinna, 
and Nicola Serra, “ Power-Laws in a Large 
Object-Oriented Software System”, IEEE 
Transactions on Software Engineering, 33(10), 
October 2007. 
[3] Martin Fowler, Kent Beck, John Brant, William 
Opdyke, Don Roberts, “Refactoring: Improving the 
Design of Existing Code”, Pearson, 1999.M. Young. 
[4] Ted N. Husted, Cedric Dumoulin, George 
Franciscus, David Winterfeldt, “Struts In Action”, 
Manning, 2002 
[5] George Franciscus, Danilo Gurovich, “Struts 
Recipes”, Manning, 2002 
[6] Nien-Lin Hsueh, Peng Hua CHu, Hong Hsiang 
Shen and Chih Hung Chang. A Semi-Automatic 
Approach for Test Case Traceability in a Test-Driven 
Development. Workshop on Accountability and 
Traceability in Global Software Engineering (ATGSE 
2008), December 1-5, 2009, Beijing.  
 
致謝 
國科會計畫：支援Java軟體品質控管的數位
學習系統, An E-Learning System For Java 
Quality Assurance, NSC 96-2218-E-035-002 
