英文關鍵詞： Document Transformation, Graph Theory, Graph 
Homomorphism, Software/Program Verification, XML, ML.
 
article
section
paraorderedlist
emphasis
link
pcdata
listitem
html
body
p
div
ol
a em
span
pcdata
li
Figure 1: Parent–child constraints among DocBook Tiny elements and among XHTML Tiny ele-
ments.
</para>
<listitem>
<para>
This is a <link>link within a
<link>link</link></link>.
</para>
</listitem>
</orderedlist>
By the proposed straightforward mapping,
this structure–conforming DocBook Tiny doc-
ument fragment will be transformed into the
following XHTML document fragment which is
ill-structured.
<ol>
<ol>
<p>
A preface here and ...
</p>
</ol>
<p>
a preface there.
</p>
<li>
<p>
This is a <a>link within a
<a>link</a></a>.
</p>
</li>
</ol>
The output is ill–structured because accord-
ing to the parent–child constraints for XHTML
Tiny element types, ol element cannot have ol
or p elements as children. Nor can an a element
contain a elements as children.
In this paper, we propose to use and extend
2
target document types. Nodes in the
graphs are element types. Edges are
parent–child constraints. There is an edge
u → v whenever v appears in the content
model of u.
• Decompose g and h, respectively, into their
SCCs. Find a graph homomorphism from
the condensation of g to the condensation
of h. Note that,
– Each SCC node in the condensation of
g must be mapped to a SCC node in
the condensation of h (otherwise cy-
cles inside the source SCC may not
be preserved);
– One–to–one function is preferred over
many–to–one function when mapping
SCC nodes in the condensation of g to
those in the condensation of h (so as
to preserve more structural informa-
tion).
• For each pair of source and target SCCs in
the above mapping, find a graph homomor-
phism for nodes in the source SCC to those
in the target SCC.
• In the above, a loop in the source SCC must
be mapped to a loop in the target SCC.
Take the two graphs in Figure 1 as examples.
The two graphs represent the parent–child con-
straints as required by their respective content
models. The two content models are described
in Figure 2 by the two XML document type def-
initions, which we call DocBook Tiny DTD and
XHTML Tiny DTD. Element type definitions in
the two DTDs are extractions from those in the
Simplified Document DTD and XHTML Basic
DTD, but with only the involved element types.
Note that for elements with a mixed content
model or the EMPTY content model, they may
not have child elements. Each of these element
types are noted in the graphs by a node with an
enclosing ring.
Figure 3 shows the condensations of the two
graphs. The strongly connected components in
DocBook Tiny are colored in yellow, green, and
<!DOCTYPE article [
<!ELEMENT article (((orderedlist|para)+,(section)+)|
(section)+)>
<!ELEMENT section (((orderedlist|para)+,(section)+)|
(section)+)>
<!ELEMENT orderedlist ((orderedlist|para)*,(listitem)+)>
<!ELEMENT listitem ((orderedlist|para)+)>
<!ELEMENT para (#PCDATA|emphasis|link)*>
<!ELEMENT emphasis (#PCDATA|emphasis|link)*>
<!ELEMENT link (#PCDATA|emphasis|link)*>
]>
<!DOCTYPE html [
<!ELEMENT html (body)>
<!ELEMENT body (div|ol|p)*>
<!ELEMENT div (#PCDATA|a|em|div|ol|p|span)*>
<!ELEMENT ol ((li)+)>
<!ELEMENT li (#PCDATA|a|em|div|ol|p|span)*>
<!ELEMENT p (#PCDATA|a|em|span)*>
<!ELEMENT em (#PCDATA|a|em|span)*>
<!ELEMENT span (#PCDATA|a|em|span)*>
<!ELEMENT a (#PCDATA|em|span)*>
]>
Figure 2: The Document Type Definitions
(DTDs) for DocBook Tiny and XTHML Tiny.
violet, and those in the XHTML Tiny are in
orange and pink. For the graph homomorphism
from the the condensation of DocBook Tiny to
the condensations of XHTML Tiny, we use the
following function f :
f(article) = body
f(yellow) = orange
f(green) = orange
f(para) = p
f(violet) = pink
f(pcdata) = pcdata
It can be verified this is indeed a graph ho-
momorphism. For the mapping from the yellow
SCC to the orange SCC, one has no choice but
to map section to div as node section forms
a loop and div is the only looping node in the
target SCC. The same goes for the mapping
from orderedlist to div. From the above,
listitem can only be mapped to div too (oth-
erwise we will not be able to preserve the mutual
4
path from html to body. That is, we map the
node article to the subgraph consisting of the
edge html→ body.
3 Case Study
We perform an experiment on mapping the Sim-
plified DocBook element types to the XHTML
Basic element types. We aim to develop
and verify structure–conforming transforma-
tional programs based on extended graph homo-
morphism for XML document types where each
has a large number of element types. The Sim-
plified DocBook (PTO edition) DTD has 118 el-
ement types while XHTML Basic 1.1 DTD has
67 element types. Although the experiment is
not yet completed, we report here on some pre-
liminary findings.
We start with SCC decomposition of the two
graphs of element types. Perhaps not surpris-
ingly, there is a giant SCC including the ma-
jority of the nodes in each of the two graphs.
This is both good news and bad news for map-
ping element types from Simplified DocBook to
XHTML Basic. The good news is that it should
be easy to find mappings as the graphs are less
constrained (many a node for certain has paths
to many other nodes). The bad news is that
there would be less structural guidance from the
two graphs for finding good mappings.
We are in the process of completing a verifi-
ably structure–conforming mapping from Sim-
plified DocBook document type to XHTML Ba-
sic document type. As the specification of
such a mapping can be checked for structure–
conformance before it is implemented, we
can be ensured the resulting implementation
(which can be automatically generated from
the specification) will always produce structure–
conforming XML documents as output when
given valid XML documents as input.
4 Discussion
There is a wealth of research works on the mod-
eling of XML document types, as well as on the
techniques, tools, and languages for the expres-
sion of XML document transformation. Here we
can only mention a few, and hope to make an at-
tempt to put the current work in context. Since
late 1990s, there have been many works on us-
ing formal languages for modeling SGML/XML
document editing and transformation. This pa-
per is a continuation of these efforts. The for-
malism we use, graph homomorphism, seems to
be new in the document engineering community.
It is limited (as only parent–child constraints
are modeled) but effective and easy to use for
what it does.
Programming languages have been designed
and implemented to accommodate XML con-
tent models as native data types. Many of these
languages are high–level languages with expres-
sive type systems to help detect type errors at
compile–time. XML query and transformation
languages such as XPath, XSLT, and XQuery
have long been developed, standardized, and
put into use; but these languages do not have a
notion of document types for its input and out-
put. Our proposal is not specific to some pro-
gramming languages. Rather, we offer a method
to model XML document transformation before
the transformation is being programmed. We
consider our mapping method complementary
to the actual programming task.
Researchers in the database community have
used graph homomorphism for matching data
schema or for matching navigation paths. These
works focus on the similarity among graphs;
ours is on expressing transformation using
graphs. There have been works on analyz-
ing web applications in order to verify they
indeed only produce valid HTML/XML docu-
ments. These works seem to concentrate on the
target document types, while not taking into
consideration the source document types. Our
method takes both into consideration.
References
[1] Tyng–Ruey Chuang and Hui–Yin Wu.
Structure–conforming xml document trans-
formation based on graph homomorphism.
2011. Draft.
6
國科會補助計畫衍生研發成果推廣資料表
日期:2011/12/26
國科會補助計畫
計畫名稱: 子計畫一:ML 程式語言的模組化驗證
計畫主持人: 莊庭瑞
計畫編號: 97-2221-E-001-004-MY3 學門領域: 程式語言與軟體工程
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
於台灣舉辦 The 9th Asian Symposium on Programming Languages and Systems 
(APLAS 2011) 以 及 The 1st International Conference on Certified 
Programs and Proofs (CPP 2011) 。會議網址分別為： 
 
http://flolac.iis.sinica.edu.tw/aplas11/ 
http://formes.asia/cpp/ 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
