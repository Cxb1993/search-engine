ety of data types and arbitrary mappings between data and visual-
izations, xDIVA conducts a novel and meticulous object-oriented
design so that visualization metaphors are interactive, composable
and decoupled from data, i.e. a complicated visualization metaphor
can be composed and assembled from basic ones, each of which is
independently replaceable. The mappings between data types and
visualization metaphors can be customized and reconfigured on-
line, without the need to write annotations or rule-like notations to
specify the mappings. Some initial work of xDIVA has been pub-
lished in [2] as a tool paper.
xDIVA is built on an open source 3-D engine – Ogre[22], which
is an object-oriented graphics rendering engine. 3-D programming
from basic libraries such as OpenGL and DirectX is considered
difficult. A 3-D engine like Ogre considerably lowers the program-
ming effort and time. Ogre provides many 3-D effects, which en-
rich the possibility of visualization and improve the visual quality
beyond simple geometric shapes and colors.
This paper is organized as follows: Section 2 describes the back-
ground of xDIVA and a short overview of xDIVA is given in Sec-
tion 3. The design rationale and object-oriented framework behind
xDIVA are described in Section 4. Section 5 describes the novel
mapping system. Examples are shown in Section 6. Sections 7 and
8 complete the paper with related work and conclusions.
2. BACKGROUND
Conventional debuggers have not changed much in their visual-
ization power. Most IDEs support a “watch window” to display
values of watched variables in a textual and numerical form. Fig.
1 shows a watch window in which an image pixel array is watched
and each image pixel has three values R,G, and B. The folding and
unfolding of a compound variable (such as an object or an array)
are the basic functions seen in such windows. As can be seen from
Fig. 1, numerical representation is not a very helpful visualization
in this case. Displaying data in textual and numerical form is safe
and genuine but does not exploit the power of visualization.
Figure 1: The watch window.
Only recently have tools such as DDD [23] begun to interest pro-
grammers. DDD is an open-source debugger front-end which has
been used by developers. It renders pictures which are essentially
mirror images of how data is laid out in memory, that is, objects are
displayed as nodes and the variables inside a node are displayed
in numerical and textual representation and the relations between
objects (established by pointers) are displayed as directed arcs. Al-
though DDD provides additional visualizations to visualize limited
classes of data, such as rendering an array of integers by gnuplot,
the visualization metaphors are fixed and limited.
Other debugger-based visualization tools include Lens[15],
LIVE[1], JGRASP[8], and Travis[10], etc. Lens is an early system
that attempts to bridge the gap between debugger-based systems
and algorithm animation systems. Lens integrates debugger-based
visualization with an interesting event annotation model, where
event animation commands are attached to debugger breakpoints.
Animation can be created while breakpoints are hit.
LIVE uses similar visualization metaphors to DDD but it in-
cludes animation capability. jGRASP and Travis provide more vi-
sualization metaphors and try to support the automatic mappings
between data and visualization. Their approach can be categorized
as declarative approach. In this approach, a declarative language
is provided to describe data structures as patterns, where wildcards
may be used to allow some flexibility for matching. In other words,
declarative approaches prepare a set of fixed visualizations and at-
tempt to recognize the data structure so that a single visualization
can be selected to render the data. Although the mapping can be
done automatically, a visualization (called a viewer in jGRASP)
must be constructed for one pattern at a time. In jGRASP, limited
views (a.k.a. visualization metaphors) such as linked-list, binary-
tree, etc. are provided.
Conceptually, declarative approaches must have one pattern in
mind first, then the pattern is specified by a script language. After a
pattern is specified, a paired visualization is crafted for that pattern.
The strength of the approach is that the mappings between data and
visuals can be done automatically. While generally used for educa-
tional purposes (such as in a data structure course), this approach
can be an effective one. However, it is impractical to specify all the
patterns and implement their paired visualizations so that these vi-
sualizations will be available a priori to cover everything that might
be of interest.
As described in the previous section, the interpretations encoun-
tered by programmers in real-life can be arbitrary. Even though
meaningful variable names can provide some clues to “guess” the
right interpretation, in practice, poor automatic visualization map-
ping makes a tool unreliable. It is difficult for a programmer to tol-
erate a visualization system that may fail from time to time. Conse-
quently, it is easy to understand why DDD chooses to display data
by numerical and textual representation in the memory layout be-
cause such a visualization never fails. Such a conservative design
choice is critical when target users are not students but real pro-
grammers. However, it has a cost – the power and the advantages
of visualization are sacrificed.
3. AN OVERVIEW
xDIVA is a debugging visualization system, designed to visual-
ize program states during program execution. Currently, the sup-
ported debuggers include JDB and GDB. These command-line de-
buggers are wrapped by a GUI front-end called “Minerva”, which
is written by Java. Minerva wraps the debuggers and intercepts
the input/output of the debuggers by I/O redirection. In Minerva,
programmers can browse the source code, set break points, run the
debuggee, and display variable values in textual and numerical rep-
resentation. When users want to visualize a variable to xDIVA, a
button called “visualize” can be clicked. Once a variable is visu-
alized, the debugging information is transmitted from Minerva to
xDIVA by networking. xDIVA is built under Windows platform
(Ogre’s default platform). So, it is possible to debug a program
in Linux and visualize its program states in a Windows machine.
Screen-shots and demo clips of xDIVA can be accessed at xDIVA’s
website:
http://www.csie.ntnu.edu.tw/~ypc/xdiva.htm
When a variable is visualized the first time, a mapping dialog
(see Fig. 2) will pop up for a user to construct his visualization. In
Fig. 2, a binary tree node of class btnode
class btnode {
Figure 4: The visualization for btnode.
trolled by _vm_radius), no links are made. So, a default value of 50
is used. Third, two ball_laser VMs are added. The relative position
of the left ball_laser is set to be (-50, -50, 0), the southwest corner
of the sphere travel. The relative position of a VM is controlled by
three default IN ports, which are _vm_rx, _vm_ry, and _vm_rz. In-
stead of linking them to variables, in this case, we set the constants
to _vm_rx and _vm_ry. Simply put, if an IN port is not linked, a
constant can be set. If an IN port is not linked and no constant can
be set, a default value is used.
Fourth, the references of the three VMs are linked to a VM col-
lector, which can collect arbitrary numbers of VMs to produce an
output of type “vms”, which is a reference to a set of VMs. The pur-
pose of a VM collector will be explained in a later section. At last,
VM collector passes a reference to a set of VMs to a Container
VM, which positions each VM by its relative position, grouping
these VMs into a composite one, and making xDIVA acknowledge
that this composite object will represent this btnode object.
The mapping tree of a variable type is usually constructed once.
By clicking the “apply all” button (see Fig. 2), the mapping can
be automatically applied to variables of the same type. Mappings
can also be saved to files and loaded when needed. The result of the
mapping is shown in Fig. 4. The ball_laser is a special type of VM,
called “reference VM.” It can be clicked to unfold a pointer. When
a pointer is unfolded, xDIVA will attempt to visualize the pointed
object. Once the object is visualized, ball_laser emits a laser to it.
This visualization will be updated automatically when a new break
point is hit.
4. THE DESIGN PRINCIPLES
4.1 Design Rationale
The design rationale of xDIVA originates from within common
human wisdom. When facing infinite construction choices, humans
have learned to find common basic building blocks for all choices,
set up the interfaces between the basic building blocks, and then es-
tablish engineering methods or frameworks to assemble and com-
pose these building blocks. This wisdom can be explained by a
term – composability.
Composability, in general, refers to a system design principle
that deals with the inter-relationships of components. A highly
composable system provides recombinant components that can be
selected and assembled in various combinations to satisfy specific
user requirements. One essential attribute that makes a component
composable is that it is self-contained, i.e. it can be deployed in-
dependently. A component may cooperate with other components,
but dependent components are replaceable.
Technically, to achieve composability, a visualization compo-
nent should be constructed without the knowledge of how it will
be used or what kind of data it will visualize, i.e. it should be de-
coupled from data. Any dependency on data makes a visualization
component limited to render only that data, unless the data is of a
primitive type. Decoupling data from visualizations is not a new
problem. Observer pattern [5] is one well-known design pattern
that attempts to address the problem. However, observer pattern
was soon abandoned for the reasons explained below.
In Fig. 5, the well-known observer pattern is shown. In this pat-
tern, any ConcreteSubjects that are intended to be visualized should
inherit the interfaces from a base class Subject. A ConcreteOb-
server which wants to visualize a ConcreteSubject should inherit
a base class Observer and register at a ConcreteSubject. When a
ConcreteSubject changes its state, a ConcreteObserver is notified
by update(), which invokes subject->GetState() to get the newest
state to redraw the visualization. Since subject is a reference or
pointer to a ConcreteSubject, the source code of a ConcreteOb-
server is coupled and dependent on the type of a ConcreteSubject.
This dependency limits the ConcreteObserver to only visualizing
the type of a ConcreteSubject, which is against the principles of
composability and is thus unable to deal with the need of arbitrary
visualization interpretations .
So, xDIVA’s solution is to insert a novel mapping engine between
the data and visualization metaphors. A meticulous object-oriented
design is employed so that no references to data may appear in the
source code of the visualization metaphor. Such a principle may
seem obvious to follow but actually it is much more complicated
than it seems. Since the measures and efforts taken to fulfill the
principle involve too many coding details, they will be skipped in
this paper.
Figure 5: The observer pattern.
4.2 The Basic Building Blocks
Based on the composability principle described, basic building
blocks need to be defined and implemented. In xDIVA, these ba-
sic building blocks are called “ultimate basic VM” (UBVM). What
kind of shapes can be made to a UBVM? Most of the time, the an-
swer is straightforward. For example, a rectangular cuboid can be
constructed by scaling a cube on one of the XYZ axis; so it is not a
candidate for UBVM. An arrow shape like Fig. 8 can be assembled
from a cone shape and a cylindrical shape; so it is not a candi-
Figure 8: The arrow VM composed from a cone and a cylinder
UBVM.
binary relation VM called “ultimate basic reference VM (UBRVM)”
is introduced. Currently, line_ubrvm, laser_ubrvm, and
orbit_ogrehead_ubrvm are provided. Among them,
orbit_orgehead_ubrvm is particularly interesting. Suppose it is used
to visualize a relation between two VMs, namely vm1 and vm2.
When vm1 is clicked, an Ogrehead (the mascot of Ogre) will appear
to orbit vm2. The ball_laser VM in Section 3 is another example
that is composed from this type of VM. UBRVM can be viewed as
a specialized version of binary relation VM but its destination VM
is not known before the pointer is unfolded.
4.5 Layout Algorithms
In a visualization, layout is critical in most cases. In xDIVA, the
layout of a visualization can occur in several cases. These cases
are:
1. A new VM is added to the scene.
2. In mapping dialog or Composer, VMs are arranged to con-
stitute a composite VM by their relative positions.
3. A new VM is unfolded by clicking a reference VM.
4. Right-click a VM to pop up a layout selection menu and
choose one of the layout algorithms to apply, where the clicked
VM serves as a starting point.
In the above items, case 1 is not specifically handled. A new VM
is simply added to the center of the scene. In case 2, the layout
task is a choice of users. For the future, a new type of mapping
node called layout mapping node is planned. These nodes will be
inserted between vm collector and container_ubvm so that VMs
can be arranged by a layout algorithm automatically.
Concerning case 3, xDIVA currently has a simple layout which
can be explained by the btnode example. In a btnode, the center of
sphere VM and the center of ball_laser can form a vector. When
ball_laser is clicked, along the vector at some fixed distance D, the
position is used to place the unfolded VM.
Needless to say, the most important layout is described by case
4. Layout algorithms for different kinds of data have been re-
searched for a long time. Re-inventing the wheel is never the goal
of xDIVA. The focus, however, is to design a plug-in framework
so that layout algorithms can be ported to xDIVA in an easy and
straightforward manner. To test the framework, a pilot layout called
spring_dynamics is available for selection. The spring_dynamics
layout assumes a relation VM has an invisible spring. When a VM
is dragged, a force is added to the spring and then the spring dy-
namic begins to work. Dragging a VM would cause its adjacent
nodes to move because of the spring dynamics. The moved nodes
oscillate until the force is worn off. This layout is suitable for
graph visualization but encourages more interaction than conven-
tional static layout. In the near future, more layouts [6, 17] will be
added.
5. THE WORLD OF MAPPING NODES
In xDIVA, visualization metaphors play a key role but they need
to be carried by mapping nodes in order to work. A mapping node
can be viewed as a box with standard interfaces (IN ports and OUT
ports). Each box may carry an entity. This entity can be a VM,
a mathematical computation, etc. In this section, basic mapping
nodes are described.
5.1 Math mapping node
A mapping node that carries a computation is called a Math map-
ping node. This computation can be specified by a mathematical
formula. Fig. 9 shows a Math mapping node and its formula in-
put dialog. An arbitrary number of links can be linked to a Math
mapping node. A new IN port is automatically added after a link is
made. The unique OUT port contains the result of computation. In
the formula, an escape character “$” is used to access the variables,
which are indexed starting from 0.
Math nodes play a very important role in the visualization con-
struction. It is common that a variable’s structure and its visual-
ization do not have direct or explicit correlations. For example,
visualizing the class X in section 1 into Fig. 6 requires the calcula-
tions of a/(a + b + c) , b/(a + b + c) and c/(a + b + c). These
results can then be used to compute θ1and θ2 for each pie_ubvm.
Without Math mapping node, this is impossible.
Figure 9: A Math mapping node and its formula input dialog.
5.2 Collectors
A collector-type mapping node can collect an arbitrary number
of entities. These entities are usually of the same type. In the previ-
ous examples, a collector that collects a set of VMs called vm col-
lector is presented, which has an OUT port of type “vms”. Many
VM mapping nodes such as container_ubvm only accept “vms”
link if they deal with arbitrary numbers of VMs. The purpose of a
collector can be explained by programming. In programming lan-
guages, it is impossible to write a function whose number of param-
eters may vary from time to time.1 So, programmers must resolve
1printf(...) in C that uses special tricks to take arbitrary number of
parameters is an exception.
In Fig. 13(b), a Cube_ubvm which visualizes three integers (R,G,
and B) in a color pixel is demonstrated. In this mapping, all Cube_ubvms
are collected by a vmcollector and passed to a container VM which
arranges the its elements into a 2D array layout. This visualization
is suitable for applications like image processing. In the example,
when a color pixel is clicked, the pixel’s array index (x,y) is dis-
played by 2D-array container VM. Next, the mouse event is passed
to the clicked Cube_ubvm to display its R,G,B values. Fig. 13(c)
continues the example with the use of a larger image.
In Fig. 13(d), the same 2D array container VM is used but
each array element is replaced by a new VM which visualizes an
integer as a resizable cuboid with gradient color – the color is
brighter when its value is larger. This new VM is composed from
Cube_ubvm and Math mapping nodes.
Fig. 13(e) demonstrates the cases when positions of VMs are
controlled by the watched variables using links to the default prop-
erties, _vm_rx and _vm_ry. This visualization can be used in many
applications where the locations of entities matter, such as the trav-
eling salesman problem or computational geometry problems, to
name a few, which can benefit from such a visualization.
To make the visualization more exquisite, a green background
is added. Such a green background is called a background VM,
whose purpose is to enhance a visualization so that it is more infor-
mative. Background VMs are also composed by UBVMs but typ-
ically they are not controlled by the variables in the mapping. For
example, the green background is made by flattening a Cube_ubvm
and painting it green. At the end of mapping, this VM is added to
the Container_ubvm along with other foreground VMs.
Fig. 13(f) shows a practical application of xDIVA in an area of
the software industry called Electronic Design Automation (EDA).
This area of the software industry produces software tools for de-
signing and producing electronic systems ranging from printed cir-
cuit boards (PCBs) to integrated circuits (IC). These tools are also
known as CAD tools in the IC industry. The visualization in Fig.
13(f) is a VLSI layout which renders the data structures from an
EDA tool at a break point. These data structures describe the 2D
polygons that constitute the VLSI layout. Please note that this vi-
sualization is used by software tool developers, not the hardware
designers who use the EDA tools.
So far, all these examples use simple shapes to visualize debug-
ging objects. The visualization quality no doubt can be improved
by composing shapes into ones that are more delicate. However,
people should be reminded that as long as the debugging purpose
is achieved, it is not necessary for a debugging visualization to be
exquisite or precise to the actual meaning of a debugged object un-
less other purposes are intended.
7. RELATED WORK
Among the the research tools mentioned in Section 2, Lens [15]
is a debugger-based visualization system that is worth mentioning.
It is an early tool that attempts to bridge the gap between debugger
and algorithm animation systems, such as [21], so that the work
does not limit their use to pedagogy. The focus of Lens is to pro-
duce animation by associating animation actions to source code,
where interesting event animation commands are attached to de-
bugger breakpoints. The problems and difficulties that could be
encountered when using debugger-based systems for visualization
were well and thoroughly studied. Simple mappings can be config-
ured in a pop-up dialog, such as associating variable values with the
positions of graphic objects. Although Lens focuses on algorithm
animation (where graphic objects are represented by very simple
shapes) and does not address the arbitrary visualization interpreta-
tions, it is an influential work on later debugger-based visualization
systems.
In general, debugger-based visualization systems do not nec-
essarily include algorithm animation capability, though algorithm
animation is one of the debugging-aid approaches. More recent
research for algorithm animation includes JIVE[18], SWAN[20],
JAWAA [19], LIVE[1], SKA [8], etc. These tools, however, are
mostly limited to educational purposes.
Some systems, such as jGRASP[8], JIVE [7] and JaVis [14], pro-
vide limited views for data structure visualization and place more
emphasis on UML-style visualization
The large number of possible visualization variations is a prob-
lem faced by all visualization tools. As described in previous sec-
tions, it is expensive and impractical to build pre-defined visual-
izations for each task. So, suitable visualizations ought to be de-
veloped on demand. Online mapping configuration or customiza-
tion of visualization is a goal pursued by all visualization tools.
Much of the research in the field of software visualization [3, 9, 12,
16, 13] which support visualizations for software metrics can be
configurable in different degrees, within the limits of model-view
paradigm. For example, Vizz3D [16] proposes a model-view-scene-
controller paradigm, where the bindings are configurable and spec-
ified in an XML script. Different paradigm variations, such as
model-scene-controller and model-view-controller, are also stud-
ied in this research area. In general, the model-view approach is
inapplicable in debugging visualization because the data produced
in debugging has no models to which it should conform. In other
words, software visualization research has a clear knowledge and
understanding of what analysis data (e.g. software metric) is to
be collected and organized. The mapping flexibility is considered
constrained within the paradigm.
8. CONCLUSIONS AND FUTURE WORKS
The initial idea of xDIVA has been published as a tool paper
in [2], however, key progresses such as Composer, VMclone map-
ping node, Clock mapping node, the UBVM principle, etc. have
been developed since then. Specifically, Composer is considered
an important breakthrough because new VMs can be created with-
out programming and these VMs can be again used to compose
new VMs.
One question that has been raised repeatedly since the announce-
ment of xDIVA is whether the learning curve is too steep for map-
ping editing. Although there is not yet a formal usability study
on how easy it is to construct a mapping, once a programmer un-
derstands the basics of the mapping nodes from the tutorials, the
drag-and-drop is the last thing to learn. xDIVA tries its best to
block any invalid linking immediately. These user friendly mea-
sures have been continuously taken to smooth the learning curve.
Another answer to the above question is: Most users have no need
to learn mapping techniques thoroughly. In the near future, xDIVA
is heading toward supporting theme-based VM libraries. That is,
most VMs will be pre-made (by the xDIVA team or third parties)
using Composer and these VMs will be grouped and categorized
into themes. Users should be able to search the libraries for appli-
cable themes and find common VMs to use immediately.
Another question that is frequently raised is: Are there some
visualizations that cannot be created by assembling? This problem
can be answered with an analogy to shaping metal. In shaping
metal, the molding process can create a shape that is difficult to
produce using other processes like forging. However, the shape
can still be approximated by fusing several pieces of forged metal.
As pointed out in the previous section, it is not necessary for a
debugging visualization to be exquisite or accurate. However, if
any approximation is unacceptable, then new UBVMs should be
pages 662–663, New York, NY, USA, 2005. ACM Press.
[19] Susan H. Rodger. Introducing computer science through
animation and virtual worlds. In SIGCSE, pages 186–190,
2002.
[20] Clifford A. Shaffer, Lenwood S. Heath, and Jun Yang. Using
the swan data structure visualization system for computer
science education. In SIGCSE, pages 140–144, 1996.
[21] John T. Stasko. Tango: A framework and system for
algorithm animation. IEEE Computer, 23(9):27–39, 1990.
[22] Steve Streeting. The object-oriented graphics rendering
engine (ogre). available on http://www.ogre3d.org.
[23] Andreas Zeller and Dorothea Lutkehaus. DDD - a free
graphical front-end for UNIX debuggers. SIGPLAN Notices,
31(1):22–27, 1996.
國科會補助計畫衍生研發成果推廣資料表
日期:2011/01/03
國科會補助計畫
計畫名稱: xDIVA- 具備可合成與互動之除錯資訊視覺化軟體工具
計畫主持人: 鄭永斌
計畫編號: 98-2220-E-008-007- 學門領域: 自由軟體暨嵌入式系統
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
嵌入式系統暨自由軟體競賽 - 佳作 
 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
