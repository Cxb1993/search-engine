????????????????????  
Keywords: suffix tree, run- length encoding, repeat 
 
?????? 
 
??? 
????????????????????? O(n)???????? suffix link ? suffix 
tree?????????????????????????????????????
???????????????????????????????????????
????????????(run-length encoding)???????(repeat)???? 
??????? 
?? McCreight ? Kurtz?????????????????????????????
? suffix tree ???????????? suffix tree ???? binary tree?? 1?? 
 
 
 
? McCreight ??????????  1 ? suffix tree???????????? 5 ?
integers???????????????????????????? suffix link????
??????????????????????????????? 2 ? integers???
?????????????????????????????? integer??????
??????????? suffixes ?????????????????????????
????? suffix ???????????????????????????????
??????????????????????????? suffix ?????????
????????? suffix ?????????????????????? suffix ????
?????????? suffix ??????????? 
?????????? 
?????? Kurtz???????????????? large node ?? 4 ? integers??
? small node ?? 2 ? integers?????????? integer?????????????
? suffix trees ? large nodes ????????????????? 
 ???????????? suffix link ???????? top nodes????????
????????? suffix link ??????????????????????????
top nodes ???????????? suffix link ??????????????????
r
N1 N2
L1 L4 L2 L5
L3 L6
e
ab b
abcab$ bcab$
cab$
ab$ b$
$
? 1. ?? 1.? suffix tree?? binary tree???? 
procedureupdate (s , (k , i)):
(s, (k , i  - 1))is the canonical reference pair for the active point;
oldr ¬ root; (endpoint, r) ¬ test-and -split(s, (k , i - 1), ti);
while not (end-point) do
create new transition g' (r, (i, ¥)) = r' where r' is a new state;
if oldr ¹ root then create new suffix link f'(oldr ) = r ;
if r is a top node of a chain and oldr stand on a new node then
add all new nodes to the chain which r is standed
and set it's tailposition to i
oldr ¬ r;
(s , k ) ¬ canonize(f'(s),(k , i - 1));
(end-point , r)  ¬ test-and-split (s ,(k , i - 1), ti );
if oldr ¹ root then create new suffix link f'(oldr) = s;
if s is a top node of a chain and oldr stand on a new node then
add all new nodes to the chain which s is standed
and set it's tailposition to i
else
if number of new nodes ¹ 0
create a new chain which is composed of all new nodes;
return (s, k) .  
?? procedure ?????????????????????????????????
??????? chain ????? chain ? top node??????? chain ???? chain?
???? chain ? tailposition ??????????????????????????
?????? chain ? top node ?????? chain ? top node??????tailposition ?
?????? top node ???????????????????????? chain ???
????? chain ?????????????? chain ????? suffix tree ????
chain? 
????? 
?? 1 ????? suffix tree ??????????? Kurtz???????????? 
 
 ? 2 ??? FASTA ????????????????????????????
DNA ?????????????????????????????????????
??????????????????????????????gi number?????
????? 
 
? 1. ??????? suffix trees????? 
??????????? 
11.2812.58152261X14112
11.2912.6916569V00662
11.2412.5748102/48502V00636
11.2812.6294647M64239
11.2712.5256737M26434
11.2112.502657M13438
11.2512.5938059K02402
11.6112.3666495J03071
11.2212.564638690/4683839ecoli
OursKurtzLength
(Kurtz/Ours)
File
 
????????????????????? run- length??????????????
??????????[17]??? divide and conquer?????????????? square 
factors???? suffix tree ????????????????????????????
??????????????????????????? 
 
???????? 
??????????????????????Theoretical Computer Science?????
?????????????????????????????? 
 
1. Huang, G.S., Liu, J.J., Wang, Y.L.: Sequence alignment algorithms for run-length-encoded 
strings. In: Hu, X.D., Wang, J. (eds.): 14th Annual International Conference on Computing and 
Combinatorics (COCOON 2008). Springer-Verlag Berlin, Dalian, PEOPLES R CHINA (2008) 
319-330 
2. Liu, J.J., Huang, G.S., Wang, Y.L., Lee, R.C.T.: Edit distance for a run- length-encoded 
string and an uncompressed string. Inf. Process. Lett. 105 (2007) 12-16 
 
??? 
????????????? suffix tree ??????????????????????
? suffix tree ??????????????????????????????????
?????????????????????????????????????? 
 
????? 
[1] A. V. Aho, Algorithms for _finding patterns in strings, in: J. Van Leeuwen (Ed.), 
Handbook of Theoretical Computer Science, Elsevier, Amsterdam, 1990. 
[2] A. Apostolico and F. P. Preparata, Optimal o_-line detection of repetitions in a string, 
Theoretical Computer Science, 22(3)(1983):297{315. 
[3] M. A. Bender and M. Farach-Colton, The LCA problem revisited, in: Proceedings of the 
4th Latin American Symposium on Theoretical Informatics, Lecture Notes in Computer 
Science 1776, Springer-Verlag, 2000. 
[4] M. Crochemore, An optimal algorithm for computing the repetitions in a word, 
Information Processing Letters, 12(5)(1981):244{250. 
[5] M. Crochemore, Transducers and repetitions, Theoretical Computer Science, 
45(1)(1986):63{86. 
[6] M. Crochemore and W. Rytter, Jewels of Stringology, World Scientific, Singapore, 2002. 
[7] E. Delacourt, J. F. Myoupo, and D. Smem, A constant time parallel detection of 
repetitions, Parallel Processing Letters, 9(1)(1999):81{92. 
[8] M. Farach-Colton, P. Ferragina, and S. Muthukrishnan, On the sorting-complexity of 
suffix tree construction, Journal of the Association for Computing Machinery, 
47(6)(2000):987{1011. 
[9] T. Garcia and David Sem_e, A coarse-grained multicomputer algorithm for the detection 
of repetitions, Information Processing Letters, 93(6)(2005):307{313. 
[10] D. Gusfield, Algorithms on Strings, Trees and Sequences: Computer Science and 
Computational Biology, Cambridge University Press, Cambridge, 1997. 
? Y04 
???????????????????????????? 
                                                             97 ? 7 ? 8 ? 
????? ??? 
 
 
???? 
??? 
???????? 
?????? 
???? 
     ?? 
?? 
     ?? 
97 ? 6 ? 27 ?~29? 
????? 
???? 
???? 
NSC 95-2221-E-260-016-MY2 
?? 
?? 
 (??) The 14th Annual International Computing and Combinatorics 
Conference 
?? 
?? 
?? 
 (??) Sequence Alignment Algorithms for Run-Length-Encoded Strings 
???????????? 
???????? 
??????????????????????????????????????
??????????????????????????????????????
??????????????????????????????????????
?????????????????????????? 
 
?????? 
?????????????????????????????????????
??????????????????????????????????????
??????????????????????????????????????
??????????????????? 
 
????????(????????) 
? 
 
???? 
????????? 
 
 
??????????? 
????? Lecture Notes in Computer Science? 5092 ???????????
http://www.springerlink.com/content/l4630840uv75/?? 
 
???? 
???????????? 
 
 
 
320 G.S. Huang, J.J. Liu, and Y.L. Wang
under the assumption that the distance matrix is nonnegative and satisﬁes the
triangle inequality, in time O(m′n + mn′); Crochemore et al. [11] solved the
global alignment problem under the linear-gap model, and the latter can be eas-
ily converted to solving the general edit distance problem, also in O(m′n+mn′)
time. Finally, Liu et al. [19,20] proposed an O(min{m′n,mn′})-time algorithm
for the Levenshtein and LCS metrics.
The paper of Crochemore et al. [11] originally solves sequence alignment prob-
lems under the Lempel-Ziv encoding. Strings being compressed by LZ78 have
nice recursive structures. They employed the Monge property (which will be ex-
plained in Sect. 3) to solve the global and the local alignment problems in both
O(hn2/ lgn) time and space where 0 < h ≤ 1 is the entropy of input strings.
The trace [24] can also be recovered in the same time and space bounds. This
technique was also applied to run-length compressed strings for the global align-
ment problem. We remark that the approach of [11] has several advantages.
First, its assumption is rather general. It assumes the linear-gap model with un-
restricted scoring matrices. Second, this framework has great potential to solve
other related problems such as the local alignment problem.
We combine techniques from [11] and [19], and improve several results of
[21,11,19,20]. In addition, we propose an algorithm for the approximate match-
ing under the run-length encoding. Let T be a long text, which is run-length-
compressed into n′ runs. Let P be a pattern with m characters. This problem
asks one to ﬁnd out all occurrences of P in T such that their distances are under
some given threshold. Our algorithm takes O(n′m) time and O(m) space, which
improves the previous O(n′mm′)-time algorithm in [21]. Furthermore, we do not
need the entries in a distance matrix and the threshold for approximate match-
ing to be bounded by constants, which is implicitly assumed in the algorithm
proposed by [21]. A comparison of related results is listed in Table 1.
Table 1. A comparison of related results
Problem In This Paper Previous Results
Edit distance/
Global alignment
O(min{m′n,mn′}) timea O(m
′n + mn′) time [11]a
O(min{m′n,mn′}) time[19,20]b
Local alignment O(min{m′n,mn′}) timea only for LZW compression [11]c
Approximate
matching O(n
′m) timea O(n′mm′) time [21]d
a Linear gap cost with unrestricted scoring matrices.
b Limited to Levenshtein and LCS metrics.
c To the best of our knowledge.
d Assume the distance is a metric and the approximate threshold is a constant.
The organization of this paper is as follows. We explain the basic idea in Sect. 2
and give a quick review on related preliminaries in Sect. 3. Then subsequent
sections are followed for each problem. Finally, a conclusion ends in Sect. 8.
322 G.S. Huang, J.J. Liu, and Y.L. Wang
O(m + n), provided that each entry in the matrix can be accessed in time O(1).
(When there are many minima in a row or column, we can simply choose the
ﬁrst one.) Dually, all of the row and column maxima can also be found in the
same time bound.
The algorithm for Lemma 1, which is called the SMAWK algorithm, was ﬁrst in-
vented in [1] by applying the prune-and-search technique. Indeed, Aggarwal et al.
in [1] deﬁned a larger class called the total monotonicity. However, in real applica-
tions Monge or inverse Monge is suﬃcient for most cases. Extensions to higher di-
mensional arrays and on-line algorithms can be found in [2] and [6], respectively.
Lemma 2 (Aggarwal and Park [2]). The matrices DIST and OUT used in
(1) are Monge. When changing min to max, the corresponding DIST and OUT
matrices are inverse Monge.
In Appendix A, we give an informal proof of Lemma 2. As a consequence, if
entries in DIST can be accessed in O(1) time, from Lemmas 1 and 2, all cells of
OR can be evaluated in O(n) time for each strip R. In the following four sections,
we will show how to deﬁne appropriate OR, IR, DIST , OUT for various problems
related to sequence alignment under this framework. The key point is on how to
keep DIST (i, j) accessible in O(1) time.
4 Edit Distance with Unrestricted Scoring Matrices
Let E(x, y) be the edit distance of strings x and y in the linear-gap model
with scoring matrix δ. It accounts for the minimum number of weighted edit
operations (i.e., the insertions, deletions, and substitutions) that transform x
into y.
The traditional way to compute the edit distance is through the following
recurrence relation:
E(ua, vb) = min {E(ua, v) + δ(−, b), E(u, vb) + δ(a,−), E(u, v) + δ(a, b)} (3)
with base cases E(ua, ) = E(u, ) + δ(a,−), E(, vb) = E(, v) + δ(−, b), and
E(, ) = 0 where  is the empty string and − is the gap. We can replace (3) by
E(x′ak, y[1..j]) = min
0≤i≤j
{
E(x′, y[1..i]) + E(ak, y[(i + 1)..j])
}
(4)
when x = x′ak is run-length compressed and ak is the last run of x. In fact, (4)
is an instantiation of (1): set IR(i) = E(x′, y[1..i]) and DIST (i, j) = E(ak, y[(i+
1)..j]). All we have to do is to show that E(ak, y[(i + 1)..j]) can be evaluated in
constant time, and consequently, the Monge paradigm described in Sects 2 and
3 ensures the O(m′n) time and O(n) space complexity.
For simplicity, let us ﬁrst assume that the cost of an insertion or deletion is
d ≥ 0 and a substitution is s ≥ 0. Then we have
Lemma 3. Let a ∈ Σ and z ∈ Σ∗. Let the length of z be |z| and the number of
occurrences of a in z be σa(z). Then
324 G.S. Huang, J.J. Liu, and Y.L. Wang
A ·δ′(a, bu)+B ·δ′(−, bu)+
∑
1≤t≤u−1
δ′(a, bt) ·σbt(z)+
∑
u+1≤t≤|Σ|
δ′(−, bt) ·σbt(z) ,
which generalizes Lemma 3 and can be computed in O(u) = O(|Σ|) = O(1)
time.
Theorem 1. The edit distance problem in the linear-gap model with unrestricted
scoring matrices can be solved in O(min{mn′,m′n}) time for run-length-encoded
strings x and y with lengths m and n, being compressed into m′ and n′ runs,
respectively.
5 Global Alignment Algorithm
The algorithm for the global alignment problem is simply the dual of the one
described in Sect. 4. In this case, (1) is modiﬁed into
OR(j) = max
1≤i≤j
OUT (i, j) for 1 ≤ j ≤ n ,
and the inverse Monge property holds for the OUT matrix. Each entry in the
OUT matrix can be accessed in O(1) time by a similar greedy algorithm for the
edit distance problem, as long as the alphabet is bounded. Then all of the column
maxima, which are the values of OR, can be found by the SMAWK algorithm
in O(n) time and space. This process can be continued, and ﬁnally the value of
the optimal global alignment of x and y can be obtained in O(m′n) time and
O(n) space. The trace of an optimal alignment can also be found in the same
time and space bounds, by applying Hirschberg’s technique [13].
Theorem 2. The global alignment problem in the linear-gap model with unre-
stricted scoring matrices can be solved in O(min{mn′,m′n}) time for run-length-
encoded strings x and y with lengths m and n, being compressed into m′ and n′
runs, respectively.
6 Local Alignment Algorithm
In the local alignment problem, the goal is to identify a substring x′ of x and a
substring y′ of y such that the global alignment score of x′ and y′ is maximized.
Let L(x, y) denote the score of the optimal local alignment for x and y ending
at the ends of x and y. The traditional approach evaluates L(x, y) through the
following recurrence relation:
L(ua, vb) = max {0, L(ua, v) + δ(−, b), L(u, vb) + δ(a,−), L(u, v) + δ(a, b)} (7)
with base cases L(ua, ) = max{0, L(u, )+ δ(a,−)}, L(, vb) = max{0, L(, v)+
δ(−, b)}, and L(, ) = 0. The score of the optimal local alignment for x and y
can be obtained by ﬁnding the maximum over all cells in the induced alignment
graph.
There are two kinds of local alignment paths in the alignment graph. The ﬁrst
kind categorizes paths fully contained in a strip. The second kind has paths that
326 G.S. Huang, J.J. Liu, and Y.L. Wang
 



{{
{

Fig. 3. Paths need to be considered in a local alignment graph
The calculations of SR are closely related to max0≤i≤j DIST (i, j) for 0 ≤ j ≤
n. Given j, let i(j) be the ﬁrst i that maximizes DIST (i, j). It stands for the
score of an optimal local alignment ending at OR(j) under the constraint that it
must use exactly k copies of a’s from ak, a run of x. However, SR(j) stands for
the optimal local alignment ending at OR(j) that uses at most k copies of a’s.
This diﬀerence can be resolved by applying this simple idea: set δ(a,−) to be
zero; that is, the deletion of a’s from ak is free so that ‘exactly’ performs as well
as ‘at most’. This trick can be applied because we can always regroup all of the
deletions of a’s to its very beginning. As a consequence they can be truncated
if deleting an a causes a negative score. By the above discussion, we have to
consider two cases: (1) δ(a,−) < 0 and (2) δ(a,−) ≥ 0. For the ﬁrst case, let
δL(a,−) = 0 and keep all other scores the same as δ. Let DISTL(i, j) be the score
of the optimal global alignment of ak against y[(i+1)..j] under δL. Then DISTL
is inverse Monge and the resulting maxi DISTL(i, j), which is the required SR(j),
for 0 ≤ j ≤ n, can be computed in O(n) time and space. The second case deals
with δ(a,−) ≥ 0 (this could happen since δ is arbitrary). This case is much easier
since L(ak, y[(i+1)..j]) always uses all ak and thus, L(ak, y[(i+1)..j]) coincides
with DIST (i, j). Therefore SR(j) = maxi DIST (i, j).
So far, we know how to handle S and H parts in the local alignment graph. In
order to handle the E part, we need to create another array ER(i) for 0 ≤ i ≤ n
at IR such that ER(i) = L(ak, y[(i+1)..n]). This case can be processed similarly
as the procedure for the S part.
The ﬁnal optimal local alignment for L(x, y) can be found by a linear scan
over all entries in the output border OR plus the corresponding contributions
from the E part.
Analysis of the time and space complexity. It is easy to see that the time and
space complexity is the same as the algorithm for the global alignment problem.
The trace of an optimal local alignment can also be constructed in O(m′n) time
and O(n) space by Hirschberg’s technique [13].
7 Approximate Matchings
Given a text T , a pattern P , a distance matrix δ, and a bound K, the problem
of approximate matching is to ﬁnd all occurrences of substrings T ′ of T such
328 G.S. Huang, J.J. Liu, and Y.L. Wang
Another direction to extend the applicability of these algorithms is to intro-
duce the aﬃne gap penalty, which takes consecutive gaps as a whole unit and the
costs for opening and extending a gap are diﬀerent. In [15], Kim et al. proposed
an O(m′n + mn′)-time algorithm for the global alignment problem with aﬃne
gap penalty on run-length-encoded strings. It uses similar techniques as in [5,21].
However, Ledergerber et al. in [17] have pointed out that the matrix OUT (i, j)
described in Sect. 2 might not be (inverse) Monge. Therefore direct application
of the model provided in Sect. 2 seems impossible. We note that it is possible to
combine the results of [19] and [15] to get an O(min{mn′,m′n})-time algorithm
for the aﬃne gap penalty.
References
1. Aggarwal, A., Klawe, M.M., Moran, S., Shor, P., Wilher, R.: Geometric Applica-
tions of a Matrix-Searching Algorithm. Algorithmica 2(1), 195–208 (1987)
2. Aggarwal, A., Park, J.: Notes on Searching in Multidimensional Monotone Arrays.
In: Proceedings of the 29th IEEE Symposium on Foundations of Computer Science
(FOCS 1988), pp. 497–512 (1988)
3. Apostolico, A., Atallah, M.J., Larmore, L.L., Mcfaddin, S.: Eﬃcient Parallel Al-
gorithms for String Editing and Related Problems. SIAM Journal on Comput-
ing 19(5), 968–988 (1990)
4. Apostolico, A., Landau, G.M., Skiena, S.: Matching for Run-Length Encoded
Strings. Journal of Complexity 15(1), 4–16 (1999)
5. Arbell, O., Landau, G.M., Mitchell, J.S.B.: Edit Distance of Run-Length Encoded
Strings. Information Processing Letters 83(6), 307–314 (2002)
6. Bein, W.W., Golin, M.J., Larmore, L.L., Zhang, Y.: The Knuth-Yao Quadrangle-
Inequality Speedup is a Consequence of Total-Monotonicity. In: Proceedings of
the 7th annual ACM-SIAM Symposium on Discrete Algorithms (SODA 2006), pp.
31–40 (2006)
7. Benson, G.: A Space Eﬃcient Algorithm for Finding the Best Nonoverlapping
Alignment Score. Theoretical Computer Science 145(1–2), 357–369 (1995)
8. Bunke, H., Csirik, J.: An Improved Algorithm for Computing the Edit Distance of
Run-Length Coded Strings. Information Processing Letters 54(2), 93–96 (1995)
9. Burkard, R.E., Klinz, B., Rudolf, R.: Perspectives of Monge Properties in Opti-
mization. Discrete Applied Mathematics 70(2), 95–161 (1996)
10. Burkard, R.E.: Monge Properties, Discrete Convexity and Applications. European
Journal of Operational Research 176(1), 1–14 (2007)
11. Crochemore, M., Landau, G.M., Ziv-Ukelson, M.: A Subquadratic Sequence Align-
ment Algorithm for Unrestricted Scoring Matrices. SIAM Journal on Comput-
ing 32(6), 1654–1673 (2003)
12. Gusﬁeld, D.: Algorithms on Strings, Trees, and Sequences. Cambridge University
Press, Cambridge (1997)
13. Hirschberg, D.S.: A Linear Space Algorithm for Computing Maximal Common
Subsequences. Communications of the ACM 18(6), 341–343 (1975)
14. Kannan, S.K., Myers, E.W.: An Algorithm for Locating Nonoverlapping Regions
of Maximum Alignment Score. SIAM Journal on Computing 25(3), 648–662 (1996)
15. Kim, J.W., Amir, A., Landau, G.M., Park, K.: Computing Similarity of Run-
Length Encoded Strings with Aﬃne Gap Penalty. In: Consens, M.P., Navarro, G.
(eds.) SPIRE 2005. LNCS, vol. 3772, pp. 315–326. Springer, Heidelberg (2005)
