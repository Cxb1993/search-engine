 2
guarantees for all traffic patterns. 
 
Fig. 1. Load-balanced switch architecture 
  Figure 1 shows the load-balanced switch 
architecture based on two 
fully-interconnected meshes, with N = 4 
linecards interconnected by N2 links. It 
consists of a single stage of buffers 
sandwiched by two identical stages of 
switching, where each switch is built from a 
uniform mesh. Each linecard in the first stage 
is connected to each linecard in the center 
stage by a channel at rate R/N, where R is the 
line rate and N is the number of linecards. 
Likewise, each linecard in the center stage is 
connected to each linecard in the final stage 
by a channel at rate R/N. The buffer at each 
center stage is partitioned into N virtual 
output queues (VOQs). To understand its 
operation, consider a stream of packets from 
a given input to a given output. The first 
mesh sends packets in round-robin to all 
intermediate inputs, load-balancing traffic 
across them. Each packet is put into the VOQ 
in the intermediate input according to its 
eventual output. The second mesh services 
each VOQ at fixed rate R/N, regardless of its 
occupancy. Each packet is transferred across 
the second mesh to its output, from where it 
departs the system. Thus, the two meshes 
work identically, but perform two different 
functions: the first one load-balances packets 
across the center stages, sending 1/Nth of the 
traffic to each intermediate input, and the 
second one switches packets to their correct 
destination by servicing each VOQ at fixed 
rate R/N. 
B. The Throughput of Load-Balanced 
Switching 
  Perhaps the most interesting characteristic 
of the load-balanced switch is that it provably 
achieves 50% throughput (and therefore 
100% throughput with a speedup of two) for 
a broad class of weakly mixing, stochastic 
arrivals [8]. Intuitively, the first stage makes 
traffic (just) uniform enough for the second 
stage to provide the throughput guarantee. 
  It is not immediately obvious why a 
load-balancing stage built from a uniform 
mesh with N inputs and outputs can make the 
traffic uniform enough, regardless of the 
traffic matrix or the burstiness of the arrivals. 
And it’s even less obvious whether the mesh 
needs to be uniform (i.e. all links have the 
same capacity R/N); how does the 
throughput change if the mesh is 
non-uniform? What arrangement of link 
capacities maximizes the throughput? 
  More generally, we’re interested in 
comparing the architecture with other well 
known ways to interconnect linecards. For 
example, a ring, a torus or a hypercube. 
We’ll compare them by considering an 
interconnection network with a given total 
capacity. Packets are routed through the 
network to create a load-balanced switch, a 
ring, torus, or hypercube. We then determine 
which arrangement has the highest 
throughput. 
 
Fig. 2. Generic architecture of a load-balanced switch 
and of a load-balanced routing network 
  To make the comparison, we’ll use an 
arbitrary network with fixed capacities that 
we’ll call a load-balanced routing network. 
As in the load-balanced switch, linecards are 
interconnected using a network with a fixed 
configuration and fixed capacities (Figure 2). 
Each incoming flow can be load-balanced 
across the different possible paths to its 
output, as long as the rate needed on each 
link is within its capacity. For each flow, a 
decision has to be made: how should it be 
load-balanced across the different possible 
paths? 
 
Fig. 3. Example of load-balanced routing network 
 4
.
})(:{
p
ij
pjip
ij TL ∑
∈>−
=          (2) 
The effective load of a link is the sum of the 
loads of the paths sharing the link. A solution 
is feasible if and only if we can find a 
decomposition of T such that CL ≤ , i.e., no 
link is over-booked. 
B. Problem Definition 
  Our objective is to find the load-balanced 
network with the largest throughput 
guarantee. In other words, we want to find a 
network with a guaranteed throughput *θ , 
where *θ  satisfies two properties. First, 
given any admissible arrival traffic, the 
network guarantees a throughput *θ , i.e., it 
will switch a fraction *θ  of the traffic for 
any input-output flow. And second, no other 
network can have a better guaranteed 
throughput than *θ . We will define the 
problem by decomposing it into three 
successive optimization problems. First, we 
will find the throughput for a given network 
and a given rate matrix. Then, we will obtain 
the worst-case throughput of a network, 
which can be achieved for any rate matrix. 
Finally, we will provide *θ , which is the 
best guaranteed throughput among all 
networks. 
  In the first optimization, we want to find 
the maximum throughput for a given network 
and a given rate matrix. In other words, given 
capacity matrix C and rate matrix T, we want 
to find the best possible throughput ),( TCθ , 
such that the scaled-down rate demand 
matrix TTC ×),(θ  is feasible.  
Mathematically, 
}{max),( θθ θ=TC , subject to: 
(i)  ij
jiP
p
p
ij TT ×=∑ = θ),(1            ji,∀  
(ii) ijPjip
p
ij CTjiL ≤≡ ∑ ∈>− })(:{),(    ji,∀  
(iii) 0≥pijT                     pji ,,∀  
In words, the throughput ),( TCθ  is the 
maximum of the set of throughputs θ  that 
satisfy three feasibility conditions. First, the 
arriving traffic is a scaled-down version of T 
by a factor θ , such that it can be 
decomposed into several paths p. The second 
condition is that the sum of the loads of the 
paths must be less than C, i.e., that the load 
matrix is feasible. The last condition is that 
the rate on each path must be nonnegative. 
  The second optimization finds the 
guaranteed maximum throughput )(Cθ  for 
the network. This is the throughput that is 
achievable by any rate matrix in the network, 
and, therefore, 
)).,((min),(
:
TCTC
admissibleT
θθ =     (3) 
Finally, we find the maximum possible 
guaranteed throughput for any network, 
yielding a guaranteed throughput *θ , where 
)).((max),(
:
CTC
admissibleC
θθ =       (4) 
III. EXAMPLES OF GUARANTEED 
THROUGHPUTS 
A. Guaranteed Throughput of the Uniform 
Mesh 
The uniform mesh is an architecture in which 
all links have the same capacity, i.e., 
NijC 1=  for all i, j. We can show that the 
maximum guaranteed throughput of the 
uniform mesh is 50%. 
B. Guaranteed Throughput of a Ring 
  As a second example, consider a network 
in which the nodes are connected in a 
uni-directional ring, i.e., node i is connected 
to node (i + 1) mod N. We discovered that 
the throughput of the ring is N1 . 
C. Guaranteed Throughput of a Permutation 
Matrix 
  The ring is a special case of a permutation 
matrix σ  of the set {1, ...,N}, where σ  is 
the capacity matrix of a network. The matrix 
σ  can be represented as a 0−1 matrix with 
exactly one 1 in each row and column; i.e., 
1=ijσ  if ji =)(σ , and 0=ijσ  otherwise. 
We explored that the throughput of a 
permutation matrix is either N1  or 0. 
IV. PROPERTIES OF THE 
GUARANTEED THROUGHPUT 
 In the above examples, we computed the 
throughputs of several capacity matrices, but 
found that it is not straightforward in general 
to compute throughput directly. Since we 
want to find the capacity matrix with the 
largest guaranteed throughput, we will use 
general properties of the throughput function. 
We will start by showing that it is concave in 
C, scales linearly, and is strictly increasing. 
We list these properties as follows: 
A. Concavity: The guaranteed throughput 
