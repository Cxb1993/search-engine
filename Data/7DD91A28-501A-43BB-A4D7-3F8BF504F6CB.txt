 2 
 
Index 
Abstract ................................................................................................................. 1 
1. Introduction ........................................................................................................... 2 
2. Three Per-User Checkpointing Algorithms............................................................. 5 
3. Numeric Analysis................................................................................................... 7 
4. Numeric Results....................................................................................................13 
5. Conclusions ..........................................................................................................17 
 2 
always checkpointed when a user registers. Computer simulation has also been used to study a more 
general case where user registration interval has a gamma distribution. Similar results as above on 
the optimal checkpointing frequency have been obtained, except when the variance of user 
registration intervals is large, and the checkpointing cost and the paging cost almost balance, 
checkpointing timer of fixed duration should be used. 
 
Keywords: Personal Communications Services (PCS), Mobility Database, Per-user Checkpoint, 
Failure Restoration. 
 
1. Introduction 
To set up a call in time to a mobile user in a cellular network, such as GSM (Global System for 
Mobile Communications) and UMTS (Universal Mobile Telecommunications System), it is 
necessary to constantly keep track of the mobile user’s location. In GSM and UMTS, user location 
records are stored in a two-level database that consists of HLR (Home Location Register) and VLR 
(Visitor Location Register) [1]. The HLR resides in the user's home network and maintains mobile 
users' profile information and the current visited VLRs. For each visiting user in the location areas 
managed by a VLR, the VLR stores the user’s subscription information and current location. When 
a mobile user crosses a location area, the user needs to register to the VLR and/or the HLR. Thus, 
the mobility database, HLRs and VLRs, are frequently modified for location tracking and queried 
for call delivery.  If the mobility database fails, calls to mobile users may not be set up in time 
because of invalid location records. 
Many mobility database restoration schemes have been studied. ETSI (European 
Telecommunications Standards Institute) recommends periodically autonomous registration [2] 
where a mobile user is required to register its location with the mobility database periodically even 
if the user does not cross a location area. Therefore, after a location database fails, an invalid 
location record can be restored sooner by the autonomous registration, and the number of calls lost 
due to invalid location records is reduced. Haas and Lin [3] considered the tradeoff between the cost 
of autonomous registration and the penalty of lost calls due to invalid location records. They 
suggested that the autonomous registration interval should be chosen to be approximately equal to 
 4 
that aperiodic checkpointing outperforms periodic checkpointing when the threshold value is not 
large. Lin [11] proposed a per-user checkpointing algorithm where a user record is checkpointed 
only if the user record is modified when the checkpointing timer for the user expires. Otherwise, 
checkpointing is performed when the user registers for the next time. Since mobile users exhibit 
different characteristics in terms of registration and calling behavior, per-user checkpointing 
schemes can serve each user better than a whole-system scheme, but the system has to maintain a 
checkpointing timer for each user. This timer maintenance job seems to be a large overhead to the 
system, but the hashed and hierarchical timing wheels, designed by Varghese and Lauck [12], take 
constant (O(1)) time to maintain n outstanding timers, i.e., the time complexity is independent of 
the number of timers. 
In summary, per-user checkpointing schemes can serve each user best without much overhead. 
However, no analysis has been done on the choice of the checkpointing intervals for per-user 
checkpointing scheme. In this paper, we study three per-user checkpointing schemes and consider a 
cost function consisting of the checkpointing cost and the paging cost. Numeric analysis was used 
to derive the optimal checkpointing frequency when user registration interval is exponentially 
distributed. 
Note that checkpointing and rollback-recovery has long been used to reduce the expected 
execution time of long-running computation [13-16]. A job run on a computer can be modeled as a 
transition through a sequence of computation states enabled by computing of the processor(s). 
When a failure occurs, the computation of the job can be restarted from the most recent checkpoint 
(an error-free computation state saved before). The transition of computation state is extremely 
rapid given today’s computation power, typically trillions of times per second. On the other hand, 
the checkpointing of program state is costly due to its size and the relatively slow speed of 
nonvolatile memory. The question is how often to checkpoint so that the total computation time is 
minimized. This checkpointing and rollback-recovery problem becomes more complicated if one 
considers parallel processing issues of multi-processor system [17-18], or the checkpoint location 
 6 
in the figures is described as follows. tr denotes the interval between two consecutive registrations 
and TC denotes the checkpointing timer. In general, when TC expires, the user record is 
checkpointed if it has been updated. 
l Periodically checkpointing a modified record (FIXED) 
The first scheme is essentially the same as the UMTS checkpointing method except that it is 
performed on a per-user basis and that only a modified location record is checkpointed. It works as 
follows, 
1. When a user record is checkpointed, a timer, TC, of fixed expiration interval is set on (see t0 in 
Figure 1.a).  
2. When TC expires, if the user record has been modified, the user record is checkpointed (see t3 
and t6 in Figure 1.a). Otherwise, if the user record has not been modified when TC expires, TC is 
restarted (see t4 in Figure 1.a) and the process repeats.  
This scheme will be referred to as FIXED, because a timer of fixed expiration interval is used. 
Timer expire Registration Checkpoint
a) FIXED
b) LINEXP
c) LINFIX
tr tr
TC TC TC
t0 t1 t2 t3 t4 t5 t6
checkpointing
interval
checkpointing
interval
TC
tr tr
TC TC
t0 t1 t2 t3 t4 t5 t6
checkpointing
interval
checkpointing
interval
tr tr
l l l l
t0 t1 t2 t3 t4 t5 t6
checkpointing
interval
checkpointing
interval
 
Figure 1. Three per-user checkpointing algorithms. 
 8 
the expected length of the checkpointing interval. The checkpointing cost is proportional to I
1 . 
Let cb denote the cost of checkpointing a location record, and cp denote the expected cost to page a 
user with an invalid location record due to mobility database failure. For the cost function we 
consider, the checkpointing cost equals to ( )Icb 1 , and the paging cost equals to ÷ø
ö
ç
è
æ
f
ib
p t
Pc . The 
cost function is given as follows 
 ÷
ø
ö
ç
è
æ+×=
f
ib
pb t
PcIcC
1 .................................................................................... (1) 
We will study the effects of changing the expiration interval of TC on the total cost, and try to 
find the optimal timeout interval to minimize the total cost. In our analysis, tr is assumed to be 
exponentially distributed with mean u
1 . The failure of mobility database is assumed to be a random 
distribution with a mean value an order larger than u
1  (the expected inter-registration interval).  
l FIXED  
Let T denote the expiration interval of timer TC. Consider two consecutive checkpoints, 
checkpoints A and B, as shown in Figure 2. At checkpoint A, the user record is checkpointed and 
timer TC is activated. Since the user registers after TC expires for the (i-1)th time and before the i  th 
time, the user record is checkpointed when TC expires for the i  th time, at checkpoint B. 
Timer expire Registration Checkpoint
The user
registers
checkpoint A
tT
TC expires
1st time
(i-1)T
checkpoint B
.  .  .
iT
TC expires
(i-1)th time
TC expires
ith time
 
Figure 2. Two consecutive checkpoints (FIXED). 
 
Let Qi denote the probability that the interval between two consecutive checkpoints is of length 
iT, i.e., the user registers between time (i-1)T and iT. We have  
 10 
1. If 
f
p
b t
c
uc < , CFIXED is a monotonic increasing function of T. CFIXED can be minimized when 
0=T , i.e., the expiration interval of the timer is of length 0. At each user registration, since the 
timer must have expired, the user record should be checkpointed. In this case, bFIXIED ucC   = . 
2. If 
f
p
b t
c
uc > , CFIXED is a monotonic decreasing function of T. CFIXED can be minimized when 
¥=T , i.e., the expiration interval of the timer is of infinite length. Since the timer never 
expires, the user record should never be checkpointed. In this case 
f
p
FIXIED t
c
C   = . 
3. If 
f
p
b t
c
uc = , 
f
p
bFIXIED t
c
ucC ==  ; CFIXED is a constant independent of T. T can be any value, i.e., 
at a user registration, the user record can be either checkpointed or not checkpointed. The cost 
of checkpointing the record and the cost of not checkpointing (the expected paging cost) are the 
same. 
Note that the minimum cost that scheme FIXED can achieve equals to ÷
÷
ø
ö
ç
ç
è
æ
f
p
b t
c
ucMin ,  
l LINEXP 
The analysis of the LINEXP is similar to that of the FIXED. Considering two consecutive 
checkpoints, there are two possible conditions as shown in Figures 3. For Case I, shown in Figure 
3.a, the user registers before timer TC expires, so that the checkpointing interval is equal to the 
expiration interval of timer TC (s in Figure 3.a). For Case II, shown in Figure 3.b, the user registers 
after timer TC expires, so that the checkpointing interval is equal to the user registration interval (t 
in Figure 3.b).  
s s tt
checkpointing
interval
checkpointing
interval
? ?u u
a) Case I b) Case II
? ?
TC TC
 
Figure 3. Two possible cases of checkpointing (LINEXP). 
 12 
3. If 
f
p
b t
c
uc = , 
f
p
bLINEXP t
c
ucC ==  , a constant independent of ?. ? can be any value. 
l LINFIX 
Since this algorithm is identical to algorithm LINEXP except that it utilizes a checkpointing 
timer with fixed expiration interval. The two checkpointing cases of LINEXP shown in Figure 3 can 
also be used to analyze LINFIX. For Case I, the checkpointing interval is equal to the expiration 
interval of the timer, which is T. For the Case II, the checkpointing interval is equal to the user 
registration interval (t). The expected length of checkpointing interval can be obtained as follows. 
 
u
e
TdtuetdtueTI
uT
T
ut
T
ut
LINFIX
-¥
-- +=×+×= òò
0
.................................................. (8) 
Pib equals to the probability that the main database fails in Case I after the user registration. 
 ( ) uTLINFIX
T
ut
LINFIXib euT
IdtuetTP -
-
+
-=÷÷
ø
ö
çç
è
æ
×-= ò
1
1
0
_ ................................... (9) 
From (1), (8) and (9), the cost function can be obtained as follows, 
 uT
f
p
b
f
p
uT
f
p
uT
b
LINFIX euTt
c
uc
t
c
euTt
c
u
e
T
c
C --- +
×÷
÷
ø
ö
ç
ç
è
æ
-+=÷
ø
ö
ç
è
æ
+
-×+
+
=
11
1 .......... (10) 
Since 
( )
( )2
11
uT
uT
uT
euT
eu
euTdT
d
-
-
-
+
--
=÷
ø
ö
ç
è
æ
+
 and 1£- uTe  for ,0,0 ³³ uT  we get 
( )
( ) 0
1
2 £
+
--
-
-
uT
uT
euT
eu
. 
Thus, uTeuT -+
1
 is a monotonic decreasing function of T. We can obtain same results as in the 
FIXED and LINEXP. 
1. If 
f
p
b t
c
uc < , CLINFIX is a monotonic increasing function of T. The optimum bLINFIX ucC = , when 
0=T . 
2. If 
f
p
b t
c
uc > , CLINFIX is a monotonic increasing function of T. The optimum 
f
p
LINFIX t
c
C = , when  
¥=T . 
 14 
timer expiration interval. Furthermore, when b
f
p uc
t
c
> , the cost increases as the timeout interval, T, 
increases, and when 
f
p
b t
c
uc > , the cost decreases as T increases. 
Computer simulation has been used to study the effects of changing registration interval 
variance on Pib and I. The registration interval is assumed to have a gamma distribution with mean 
1 unit-of-time and variance ?. In order to speedup the simulation, the database failure rate is 
chosen to be 500
1 , which may be unrealistically large but is small enough (compared to the user 
registration rate) to obtain correct simulation results, i.e., the random observer property still holds. 
In each computer simulation, the database fails for at least 10,000 times until stable results are 
obtained. The results in Figure 6 indicate that for all algorithms, I increases as ? increases. This is 
because as ? increases, there are more short registration intervals that are shorter than the 
checkpointing timer, and no checkpointing is needed at registration. In addition, Pib drops as ? 
increases. This is because as ?increases, there are also more long registration intervals during 
which the backup record is always valid. As a random observer, the database failure is more likely 
to occur at long registration intervals. As a result, Pib drops. 
Figure 7 depicts the cost functions for various 
f
p
t
c
 values and different variance of registration 
intervals. The results in Figure 7.a, c, d, and f indicate that the optimal choice of the checkpointing 
timer is determined by the weighting ratio of the paging cost and the checkpointing cost; it is 
independent of the variance of registration intervals. The optimal expiration interval of the 
checkpointing timer is either of length 0 or infinity. Only when the checkpointing cost and the 
paging cost almost balance, i.e., when 
f
p
b t
c
uc » , the variance of registration intervals affects the 
choice of checkpointing algorithms. The results in Figure 7.b indicate that when ?( 5.0= ) is small, 
a duplicated database should be used (T =0). The results in Figure 7.e indicate that when ?( 2= ) is 
large, all algorithms can outperform a duplicated database scheme or a non-checkpointing database 
scheme. This is because as ?increases, there are more short registration intervals; By setting 
appropriate timer length, all three checkpointing schemes can skip the short registration intervals 
(shorter than the checkpointing timer) without checkpointing, and thus reduce the overall cost. Our 
 16 
0 2 4 6 8
0
2
4
6
8
a) FIXED T
I
s =1
s =0.5
s =2
0 2 4 6 8
0
0.2
0.4
0.6
0.8
1
d) FIXED T
P
ib
0 2 4 6 8
0
2
4
6
8
b) LINEXP T
I
0 2 4 6 8
0
0.2
0.4
0.6
0.8
1
e) LINEXP T
P
ib
0 2 4 6 8
0
2
4
6
8
c) LINFIX T
I
0 2 4 6 8
0
0.2
0.4
0.6
0.8
1
f) LINFIX T
P
ib
 
Figure 6. The effects of registration interval variance. 
0 2 4 6 8
0.5
1
1.5
a)        =0.5  s =0.5 T
C
os
t
FIXED
LINEXP
LINFIX
0 2 4 6 8
0.5
1
1.5
b)        =1.0  s =0.5 T
C
os
t
0 2 4 6 8
0.5
1
1.5
c)        =1.5  s =0.5 T
C
os
t
0 2 4 6 8
0.5
1
1.5
d)        =0.5  s =2.0 T
C
os
t
0 2 4 6 8
0.5
1
1.5
e)        =1.0  s =2.0 T
C
os
t
0 2 4 6 8
0.5
1
1.5
f)        =1.5  s =2.0 T
C
os
t
c
t
p 
f 
c
t
p 
f 
c
t
p 
f 
c
t
p 
f 
c
t
p 
f 
c
t
p 
f  
Figure 7. Cost functions for various paging costs and different variance of registration interval. 
 
 18 
(March 2000) pp. 757-764. 
[5] Y. Fang, I. Chlamtac and H. B. Fei, Analytical results for optimal choice of location update 
interval for mobility database failure restoration in PCS networks, IEEE Transactions on 
Parallel and Distributed Systems 11 (June 2000) 615-624. 
[6] Z. J. Haas and Y. -B. Lin, Demand re-registration for PCS database restoration, in: Proceedings 
Military Communications Conference 2 (October-November. 1999) pp. 887-892. 
[7] Y.-B. Lin and P. Lin, Performance modeling of location tracking systems, ACM Mobile 
Computing and Communications Review 2 (July-August 1998) 24-27. 
[8] 3GPP. 3rd generation partnership project: Technical specification group services and system 
aspects; General packet radio service (GPRS); Service description; Stage 2, Technical 
Specification 3G TS 23.060 version 4.1.0 (June 2001). 
[9] Y.-B. Lin, Failure restoration of mobility database for personal communication networks, 
ACM-Baltzer Wireless Networks 1 (March 1995) 365-372. 
[10] T.-P. Wang, C.-C. Tseng and W.-K. Chou, An aggressive approach to failure restoration of PCS 
mobility databases, ACM Mobile Computing and Communications Review 1 (September 1997) 
21-28. 
[11] Y.-B. Lin, Per-user checkpointing for mobility database failure restoration, IEEE Transactions 
on Mobile Computing 4 (March 2005) 189-194. 
[12] G. Varghese and A. Lauck, Hashed and hierarchical timing wheels: Efficient data structures for 
implementing a timer facility, IEEE/ACM Transactions on Networking 5 (December 1997) 
824-834. 
[13] J. W. Young, A first order approximation to the optimum checkpoint interval, ACM 
communications 17 (September 1974) 530-531. 
[14] E. Gelenbe, On the optimum checkpoint interval, Joural of the Association for Computing 
Machinery 26 (April 1979) 259-270. 
[15] J. S. Plank and W.R. Elwasif, Experimental assessment of workstation failures and their impact 
on checkpointing Systems, in: 28th International Symposium on Fault-Tolerant Computing 
