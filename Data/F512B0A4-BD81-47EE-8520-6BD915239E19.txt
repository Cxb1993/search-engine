aided computation benefits clients in two ways: One 
is that the server may have access to cryptographic 
hardware capable of performing cryptographic 
operations faster than the operation performed by the 
client, and the other is that the client cab be free 
for other operations. In this project, we review 
methods for delegation of computation, some server-
aided secret computation schemes, and their 
applications. We also propose new methods for server-
aided exponentiation and related applications. 
英文關鍵詞： exponentiation、sever-aided、Delegation of 
Computation、Security、Public key Cryptosystem 
 
I 
 
目錄： 
中、英文摘要及關鍵詞 ......................................................... 錯誤! 尚未定義書籤。 
1. 前言...........................................................................................................................1 
2. 基礎知識 ..................................................................................................................4 
2.1. 加速指數運算 .................................................................................................4 
2.2.1. Square-and-Multiply演算法 .............................................................4 
2.2.2. 位元表示法 ........................................................................................4 
2.2. 伺服器輔助簽章機制 .....................................................................................4 
2.2.1. Paillier signature scheme...................................................................4 
2.2.2. Paillier的同態特性 .............................................................................4 
2.2.3. Paillier-based scheme之特性.............................................................4 
3. 文獻回顧 ..................................................................................................................5 
3.1. 加速指數運算 – Van Dijk等學者之指數運算加速協定 .............................5 
3.1.1. 用戶端設定階段 .................................................................................6 
3.1.2. 伺服器輔助階段 .................................................................................6 
3.1.3. 用戶端驗證還原階段 .........................................................................6 
3.1.4. V-FBVE安全性與計算量分析： .......................................................7 
3.2. 伺服器輔助簽章機制 – Wang學者之伺服器輔助驗證機制 ......................7 
3.2.1. SAV-Σ機制 ..........................................................................................7 
3.2.2. Security model of SAV-Σ ...................................................................8 
3.2.3. Server-aided verification signature scheme.....................................8 
3.2.4. 正確性分析 ........................................................................................9 
3.2.5. 效能分析.............................................................................................9 
4. 提出的方法與討論 ..................................................................................................9 
4.1. 基於仲裁式委任計算的指數運算加速協定 .................................................9 
4.2. 伺服器輔助簽章產生機制 ...........................................................................14 
4.2.1. Generic construction for server-aided signature generation .......14 
4.2.2. SAS的要求 ........................................................................................15 
4.3.3. Related work.....................................................................................16 
4.4.4. 提出的方法 ......................................................................................16 
4.4.5. 正確性分析 ......................................................................................17 
4.4.6. 效能分析...........................................................................................18 
5. 結論.........................................................................................................................18 
參考文獻 .....................................................................................................................18 
國科會補助專題研究計畫成果報告自評表 .............................................................21 
國科會補助專題研究計畫項下出席國際學術會議心得報告 .................................23 
 
 
伺服器輔助秘密運算機置及其應用 
 
 中、英文摘要及關鍵詞 
無所不在運算是 21 世紀，資訊科技發展的趨勢。目前有很多，針對網路協
定，能源效能及分散式資料庫等的研究。相對而言，針對安全性的研究較少。但
在某些應用上，安全性議題與執行效能或能源消耗，同等重要。無所不在運算的
安全議題，比較複雜。原因是公開金鑰密碼系統，不適用於資源有限的裝置。不
過，我們可以利用這些裝置都有與伺服器相連通的特性，將所需耗時的運算，傳
送到伺服器上執行。主要的安全考量，是讓伺服器無法得到任何輸入與輸出的資
料。方法則是，運算外移。利用前處理，將輸入資料改頭換面之後再傳送伺服器。
最後再將伺服器所傳回的值，經過後處理，恢復所需之值。此方法也叫做，伺服
器輔助運算。它的好處有二：一是伺服器通常配備硬體密碼運算加速器，執行速
度比在使用者端快速。另一方面，使用者可利用這段時間處理其它事務。本研究
回顧基於仲裁式委任計算架構與伺服器輔助簽章驗證機制，兩種伺服器輔助秘密
運算機制及其應用，也提出了新的方法，提升指數運算速度與其應用。 
Ubiquitous computing (ubicomp) is seen as a fundamental development direction 
for the 21st century’s computing technology. A lot of recent research in ubicomp has 
focused on network protocols, energy efficiency, and distributed databases. There is 
relatively less attention given to security issues. However, in many applications the 
security aspects are at least as important as performance and low energy consumption. 
Security in ubicomp is a challenging problem because public key cryptosystems are 
unsuitable for resource constrained devices. Nevertheless, they can communicate and 
interact with servers effectively and seamlessly. Therefore, computation outsourcing, 
also called server-aided computation, offers a promising solution. The main security 
issue of a secure outsourcing is to delegate a computation to a set of untrusted servers 
without revealing neither the input nor the output. The key idea is for the client to do 
some pre-processing over the input before sending it to the servers, and then to do 
some post-processing over the servers result to recover the final computation output. 
Use of server-aided computation benefits clients in two ways: One is that the server 
may have access to cryptographic hardware capable of performing cryptographic 
operations faster than the operation performed by the client, and the other is that the 
client cab be free for other operations. In this project, we review methods for 
delegation of computation, some server-aided secret computation schemes, and their 
applications. We also propose new methods for server-aided exponentiation and 
related applications. 
 
關鍵字(Keywords)：指數運算(exponentiation)、伺服器輔助(sever-aided)、仲裁式
委任計算（Delegation of Computation）、安全(Security)、公開金鑰密碼系統(Public 
key Cryptosystem)。 
 
 1. 前言 
目前的計算環境，較引人注目的是無所不在的計算環境與雲端計算環境。這
兩種環境下，用戶端的環境通常是計算能力較弱的設備，如無線網路設備、平板
電腦、智慧型手機等等。當這些設備使用公開金鑰系統時，會面臨到很大的計算
成本，能力較弱的設備可能要花費相當多時間與資源才能獲得安全要求，因而衍
生出伺服器輔助運算來解決問題[3, 4, 6, 7 ,14, 16, 18, 20, 23, 28]。 
 1
用戶端
伺服器1
伺服器2
伺服器3
伺服器n
1. 送出計算要求
用戶端
伺服器1
伺服器2
伺服器3
伺服器n
2. 回傳計算結果
 
圖 三：仲裁式委任計算架構 
本文將伺服器輔助運算分兩個方向來討論，一個是加速指數運算；另一個為
把伺服器輔助運算運用在密碼系統上。現今常見的密碼系統，大多使用 RSA 系
統。RSA 使用大量的指數運算，指數運算所花的時間遠比一般計算來得高，成
為計算時間上的一個瓶頸[1, 13, 17, 21, 24, 25]。2006 年，Van Dijk 等學者[27]提
出如何利用一個不可信任的伺服器之輔助運算，來加速固定基底變動指數(Fixed 
base-variable exponent)之指數運算協定(稱為 V-FBVE 協定)。也將此協定延伸到
不同型態的指數運算，如變動基底變動指數之指數運算(Variable base-variable 
exponent)。 
1995 年，伺服器輔助簽章之概念被提出[5, 8, 9, 11, 14, 15, 19]，陸陸續續有
關伺服器輔助之議題廣為討論。1997 年，Asokan 等學者[2]利用 non-repudiation 
technique 的方式，提出伺服器輔助簽章機制(server supported signature scheme，
簡稱 SSS)。2007 年，Ding 等學者[12]利用 hash chain 提出一次性的伺服器輔助
簽章(server assisted one-time signature，簡稱 SAOTS)。2011 年，Wang 學者[29]
提出在 Paillier signature scheme 中加入伺服器驗證機制(server-aided verification，
簡稱 SAV)。 
綜合上述兩種方向，伺服器輔助運算是個值得探討的議題。本文在第二章簡
單介紹伺服器輔助運算會用到的基礎知識與安全性要求。第三章回顧這方面研究
的文獻，分成兩大類：加速指數運算與輔助簽章機制，第四章為我們提出來的方
法，改進加速指數運算之方法，也提出一個新的輔助簽章機制，最後在第五章作
 3
3.      2*1 2 1 2 1 2, , mog g gnw w Z w w w w n    d 。 
4. 
 
 
 
   
2
1
2
1
mod
mod
mod
n
g
n
L w n w
w n
gL g n






  。 
 
 3. 文獻回顧 
本章節將回顧將簡單回顧前人的研究，分為兩大類：一、加速指數運算；二、
伺服器輔助簽章機制。 
 3.1. 加速指數運算 – Van Dijk 等學者之指數運算加速協定 
首先為了方便討論起見，此處將 Van Dijk 等人[27]所使用的所有符號定
義列如下。 
符號︰ 
G：一循環群。 
g： G 的一個 base ( gG) 
a： 指數 
用戶端所解問題→ ga 
n： G 的 order 其因式分解為公開( gn = 1 , for all gG) 
s： 安全參數( s≦n ) 
w： 衍生參數( n = wq, w < s) 
q： 衍生參數( n = wq, q≧s) 
此協定含用戶端與伺服器。用戶端輸入一個要解決的困難問題 P 並希
望利用計算能力強大但不受信任的伺服器。由於不受信任，故用戶端希望對
伺服器隱藏部份或整個問題並且確認伺服器回傳結果的正確性，進而完成整
個問題。 
在用戶端輸入要解決的問題前所執行的運算定義為「offline work」而
用戶端開始解決問題所執行的運算定義為「online work」。 
對於這個 Model 他們提出了三點需求： 
1. Efficiency：在系統滿足安全的情況下，用戶端的 online work 成本會比
用戶端親自進行整個運算的成本還要低。 
2. Completeness：在伺服器為誠實的情況下，用戶端可以正確的得到問題
P 的答案。 
3. Soundness：用戶端在面對任何不同伺服器的情況下，能有高的機率得
到問題 P 的正確答案或是發現伺服器為不誠實的。 
由於此 Model 並非是針對特定應用環境所提出的。因此，並不特別說
明用戶端的記憶體容量還有用戶端與伺服器所需要的通訊成本。 
Fixed Base-Variable Exponent 指數運算協定： 
由下列三個階段組成，分別是用戶端設定階段、伺服器輔助階段以及用
戶端驗證還原階段。 
 5
 
圖 六：V-FBVE 用戶端驗證還原階段 
 V-FBVE 安全性與計算量分析： 
接下來針對 V-FBVE 的安全性與計算量作分析，根據他們的分析，成功攻擊
此協定的機率為 1/s＝2-logs。 
在還原階段的計算量方面，除了 xm × gr和 xw × gb 兩次乘法外用戶端還必須計
算 xm、gr、xw 和 gb。由於 g 固定且為已知，則用戶端可用 square-and-multiply 演
算法在 offline 階段先行計算 gr。 
offline 階段方面，用戶端首先計算花費  nlog 次乘法計算循環群 G 內的
個平方（ ）再利用 r的位元表示法花費
i
g 2
 ni log1     2/log n 次乘法算出 gr ，offline
階段的計算成本總共是 次的乘法（循環群 G 內）接著剩下 xm、xw 和 gb
必須於 online 階段計算。 
  2/log3 n
online 階段方面，仿照 offline 階段先用 square-and-multiply 演算法花費  
次乘法去計算 個平方（
slog
i
x2  si log1  ）後再利用 m 和 w 的位元表示法去計算
xm和 xw分別花費   2/log s 和 次乘法，接著利用 offline 階段算出的 個
平方及 b 的位元表示法計算 gb 花費
  2/log w ig 2
  2/wlog 次乘法，online 階段的計算成本一共
是 ＋ ＋2 次的乘法（循環群 G 內）。   2/log3 s  wlog
伺服器方面直接使用 square-and-multiply 演算法計算 x＝ge 及 y＝gem＋r共花
費 次的乘法（循環群 G 內）。  nlog2 
 3.2. 伺服器輔助簽章機制 – Wang 學者之伺服器輔助驗證機制[29] 
1. SAV-Σ機制： 
SAV-Σ機制包含 6 個多項式時間演算法： 
(1) ParamGen：輸入安全參數 k，輸出共同參數 param。 
(2) KeyGen：輸入共同參數 param，並回傳公私金鑰對(public/private 
key pair) (pk, sk)給使用者。 
(3) Sign：輸入共同參數 param、訊息 m 與金鑰對(pk, sk)，回傳簽
章 σ。 
(4) Verify：輸入共同參數 param、訊息簽章對(m, σ)與公鑰 pk，回
 7
4. 正確性分析 
在 SAV-Verify 中，如果   1 22 mods nH m g s n ，根據同態特性，可以得知 
   
 
1
1
2
2
mod 2
2
2
mod
mod mod
mod
na as r a
nas r n a
H m g ts n
g ts n
n







n  
5. 效能分析 
令 n 為 1024-bit，l 為 160-bit。在原始機制下，驗證者需要 1 次大
指數運算(1024-bit)。但在 SAV 機制下，驗證者只需 2 次小指數運算
(160-bit)即可。 
 
 4. 提出的方法與討論 
在這章節，針對本年對伺服器輔助秘密運算機置及其應用之議題，作個簡單
的報告與我們提出改進的方法。 
 4.1. 基於仲裁式委任計算的指數運算加速協定 
針對 Van Dijk 等人[27]提出的協定做出延伸，以下我們將提出兩個基於
仲裁式委任計算（RDoC）定義的指數運算加速協定，進而達到具有容錯性
質且需要更少的 online 計算量。 
我們將 Van Dijk 等人的 Model 延伸到 RDoC 上定義出我們協定所使用
的 Model。我們的協定由一個用戶端與多個（兩台以上）伺服器所組成，用
戶端輸入一個要解決的困難問題 P 並希望利用計算能力強大但不受信任的
伺服器們。由於伺服器們不受信任所以用戶端希望對伺服器們隱藏部份或完
整的問題並且能從所有伺服器回傳的答案中挑選出正確的結果藉以完成整
個問題。 
在用戶端輸入要解決的問題前所執行的運算定義為「offline work」而用
戶端開始解決問題所執行的運算定義為「online work」。 
基於 Van Dijk 等人在 Model 中提出的三點需求我們針對 RDoC 做出適
應性的重新定義後描述於此： 
1. Efficiency：在系統滿足安全的情況下，用戶端的 online work 成本會比
用戶端親自進行整個運算的成本還要低。 
2. Fault-tolerance：若伺服器中超過一定門檻數為誠實的，則用戶端可獲
得問題的正確解答並有高機率可知道有伺服器不誠實。 
如同 Van Dijk 等人的 Model，由於此 Model 具有一般性而並非是針對特
定應用環境所提出的，在此並不特別說明用戶端的記憶體容量還有用戶端與
伺服器溝通時所需要的通訊成本。我們提出的兩個協定分別稱之為基本法與
進階深度法。 
基本法：我們使用 t 台伺服器（t≧2），依序稱為 S1,…,St。如同 Van Dijk
 9
 
圖 八：基本法伺服器輔助階段 
 用戶端驗證還原階段 
用戶端接收並且比較所有的 R 值後選出現次數最多且大於 t/2 設定為 R’
用於復原的計算。最後，計算還原式子 ga＝R’wgb/grw。 
 
圖 九：基本法用戶端驗證還原階段 
由於基本法在「offline work」上計算 grw時增加了部份的計算成本，為了克
服此缺點我們提出了進階深度法。 
進階深度法我們一樣使用 t 台伺服器（t≧2），依序稱為 S1,…,St。如同
基本法也由三個階段所組成。用戶端設定階段：用戶端輸入（g , a）後計算
b＝a mod w 及 e＝(a－b)/w 並依照伺服器數量隨機選取 t 個截然不同的亂數
r1,…,rt←ZZn。若 i＝j 令 否則令 ，1≦i,j≦t；用戶端分iij red  jij rd 
 11
 
圖 十一：進階深度法伺服器輔助階段 
 用戶端驗證還原階段 
用戶端接收( |1≦i,j≦t)後計算 ，j={1,…,t} , i={1,…,t}－
{j}，將 中出現次數最多且大於 t(t-1)/2 的值設定為 R 用於復原的計算。
最後，計算還原式子 ga=Rwgb。
i
jx ijjjij xxR 
i
jR
 
圖 十二：進階深度法用戶端驗證還原階段 
正確性分析:  
Ⅰ基本法： 
R’wgb/grw ＝ (gd)wgb/grw  
          ＝ (ge+r)wgb/grw  
          ＝ gew+rwgb/grw  
          ＝ gew＋b  
 13
Signer Server
Verifier
ParamGen
1k,pk, sk Param
SAS-Init
pk, sk, m
SASInfo, SVInfo
SASInfo
SAS-Oper
pk, SASInfo
SASResultSASResult
SAS-Gen
SASResult,
SVInfo
Σ/⊥ Σ
Verify
pk, m,Σ
Valid / Invalid
1.
2. 3.
4. 5.
:entity
:alogrithm
A
A
A
B
B
B
S
S
S
: A executes B with parameter S
: A returns S to B
: A sends S to B  
圖 十三：簽章者、驗證者與伺服器，三方之間的互動關係。 
1. 簽章者執行 ParamGen 取得系統參數 param。 
2. 簽章者想簽署訊息 m，他執行 SAS-Init 來取得 SASInfo 與 SVInfo。 
3. 簽章者將 SASInfo 傳送給伺服器；伺服器接收要求後，執行 SAS-Oper，
並將輔助運算結果 SASResult 回傳給簽章者。 
4. 簽章者使用 SVInfo 來確認 SASResult。如果正確，簽章者產生簽章 Σ；
否則終止演算法。 
5. 驗證者收到簽章後，執行 SS 的 Verify 演算法。如果驗證式正確，回
傳 Valid；否則回傳 Invalid。 
2. SAS 的要求 
一個有效率的 SAS 機制，必須滿足下列要求： 
1. Completeness(完整性) 
任何由 SAS-Gen 演算法產生的簽章，必須滿足 Verify 演算法中
的驗證式。Verify(pk, m, SAS-Gen(pk, sk, SVInfo, SAS-Oper(pk, 
SASInfo))) = Valid. 
2. Soundness(強健性) 
如果訊息簽章對(m, Σ)，其中 Σ = SAS-Gen(pk, sk, SVInfo, 
SAS-Oper(pk, SASInfo)), 則 Pr[Verify(pk, m, Σ) = Invalid] < ε，其中 ε
為可忽略的機率。 
3. Security(安全性) 
安全的外部輔助計算，主要議題為：在使用者不透露任何私密
訊息下，如何讓伺服器輔助計算。在 SAS 的情況下，伺服器可能
是不可信任的。伺服器想要偽造使用者的簽章；或是竄改計算結
果，讓使用者產生錯誤的簽章。因此，我們將攻擊方式分成兩種：
偽造攻擊與竄改攻擊。 
TYPE I：伺服器偽造簽章。 
TYPE II：伺服器竄改 SASResult 的部份值，讓簽章者產生錯誤的簽 
 15
x2, y2}。SAS-Oper 的流程，如圖十四所示： 
 1 2, ,SASInfo k k 
     
     
   
 
   
 
   
   
   
2
1 1 1 1
2
1 2 1 1
2
1
1
1
2 1
2 1
mod , mod
mod , mod
mod , mod
mod mod
mod mod
mod mod
mod mod
,
g
g
n
n
n
g
g
Es w EsXG Es
Es tw EsYG Es Es
x k sw n L x sw n
y k tw n L y tw n
G g n L G g n
L x
XG n sw n
L G
L y
YG n tw n
L G
x k g n w g n
y k g n s w g n
SASResult XG Y










  
  
  
 
 
 
 
 
 2 2, , .G x y
 2 2, , ,SASResult XG YG x y
Singer Server
 
圖 十四：SAS-Oper 的流程 
SAS-Gen(SVInfo, SASResult) → Σ /⊥. 
簽章者接收伺服器回傳的結果，首先檢查驗證式 XG – YG + φ1 = φ2
是否成立，如果不成立，代表伺服器計算錯誤，終止演算法並輸出⊥。
接著檢查驗證式 x2y2φ3 = φ4 是否成立，如果不成立，終止演算法並輸出
⊥。計算 σ1 = XG – a = [w]g mod n，σ2 = x2。簽章者產生簽章 Σ = (σ1, σ2)。 
Verify(pk, m, Σ) → Valid / Invalid. 
驗証者檢查簽章驗證式   1 22 modnH m g n  。如果等式成立，代表
這是合法簽章，輸出 Valid；否則，輸出 Invalid。 
5. 正確性分析 
   (1) 在 SAS-Gen 中，XG – YG + φ1 = φ2 成立。 
     
           
   
1
2
2
2
2
g g
g g g g
g g
XG YG
sw tw b c
s w t w b
a w b w b c
a b c
c


 
   
     
     
  

 
   (2) 在 SAS-Gen 中，x2y2φ3 = φ4 成立。 
     
    
    
 
2 2 3
2
1 1
1 1 2
2
mod
mod
mod
mod
mod
g g
g g
Es Es EsXG YG a c
Esa w b w a c
Esa w b w a c
Esa b c
x y n
k g k g g n
4
swg s w g g n
g n
g n


  
    
     
 





 
 17
[4] J. Burns and C. J. Mitchell, Parameter selection for server-aided RSA 
computation schemes, IEEE Transactions on Computers, Vol. 43, No. 2, pp. 
163-174, 1994. 
[5] P. B´eguin and J-J. Quisquater, Fast server-aided RSA signatures secure against 
active attacks, Advances in Cryptology - Crypto’95 Proceedings, LNCS 963, pp. 
57-69, 1995. 
[6] K. Bicakcia and N. Baykalb, Improved server assisted signatures, Journal of 
Computer Networks, vol. 47, no. 3, pp. 351-366, 2005. 
[7] E. Brickell, D. M. Gordon, K. S. McCurley and D. Wilson, Fast exponentiation 
with precomputation, Advances in Cryptology - Eurocrypt’92 Proceedings, 
LNCS 658, pp. 200-207, 1993. 
[8] J. Burns and C. J. Mitchell, Parameter selection for server-aided RSA 
computation schemes, IEEE Transactions on Computers, Vol. 43, No. 2, pp. 
163-174, 1994. 
[9] D. Chaum, Blind signatures for untraceable payments, Advances in Cryptology - 
Crypto'82 Proceedings, pp. 199-203, 1982. 
[10] R. Canetti, B. Riva, G. N. Rothblum, Refereed Delegation of Computation, The 
Check Point Institute for Information Security 2011. 
[11] P. De Rooij, On Schnorr’s preprocessing for digital signature schemes, Journal of 
Cryptology, Vol. 10, No. 1, pp. 1-16, 1997. 
[12] X. Ding, D. Mazzocchi, and G. Tsudik, Equipping smart devices with public key 
signatures, ACM Transaction on Internet Technology, Vol. 7, No. 1, 2007. 
[13] T. ElGamal, A public key cryptosystem and a signature scheme based on discrete 
logarithms, IEEE Transactions on Information Theory, Vol. 31, No. 4, pp. 
469-472, 2002.  
[14] C. H. Lim and P. J. Lee, Server(prover/signer)-aided verification of identify 
proofs and signatures, Advances in Cryptology - EuroCrypt’95 Proceedings, 
LNCS 921, pp. 64-78, 1995. 
[15] G. Horng, Secure server-aided RSA signature computation protocol for smart 
cards, Journal of Information Science and Enginearing, Vol. 16, No. 6, pp. 
847-855, 2000. 
[16] S. Hohenberger and A. Lysyanskaya, How to securely outsource cryptographic 
computations, Theory of Cryptography, LNCS 3378, pp.264-282, 2005. 
[17] J-J. Quisquater and M. De Soete, Speeding up smart card RSA computation with 
insecure coprocessors. In Proc. Smart Card 2000, (1991) pp. 191–197. 
[18] S. Kawamura and A. Shimbo, Fast server-aided secret computation protocols for 
 19
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學
術或應用價值（簡要敘述成果所代表之意義、價值、影響或進一步發
展之可能性）、是否適合在學術期刊發表或申請專利、主要發現或其
他有關價值等，作一綜合評估。 
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評
估 
▓  達成目標 
□ 未達成目標（請說明，以 100 字為限） 
□ 實驗失敗 
□ 因故實驗中斷 
□ 其他原因 
說明： 
 
 
 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：□已發表 □未發表之文稿 ■撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100 字為限） 
 
部分研究成果已在學術研討會上發表: 
1 林志鴻、陳昱圻、陳國璋、洪國寶 “指數之私密加速運算於分散式伺
服器” 2011資訊科技國際研討會, 台中霧峰, 朝陽科技大學, 舉辦日期
100/4/22-23 
2 Kuo-Chang Chen, Yu-Chi Chen and Gwoboa Horng, “Server-aided 
Paillier's signature generation scheme,” the 5th International Conference 
on New Trends in Information Science and Service Science (NISS2011), 
held from October 24 - 26, 2011 in Macao. 
 
附件一 
 21
 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                       日期：  100 年 11 月 20 日 
計畫編
號 
NSC 99-2221-E-005-078 
計畫名
稱 
伺服器輔助秘密運算機置及其應用 
出國人
員姓名 
陳國璋 
服務機
構及職
稱 
中興大學資訊科學與工程
學系 
博士生 
會議時
間 
100 年 10 月
24 日至 
100 年 10 月
26 日 
會議地
點 
中國大陸 澳門 
會議名
稱 
(中文) 
(英文)  The 5th International Conference on New Trends 
in Information Science and Service Science 
發表論
文題目 
(中文) 
(英文 ) A Server-aided Paillier’s signature generation 
scheme 
附件二 
 23
與安全要求，利用 Paillier’s signature scheme，改變成可以支援
server-aided 的版本，並證明其安全性。 
 
二、與會心得: 
本人第一次出席參加國際研討會，對生長在台灣的我，可以藉此
機會到其他國家擴展視野，是個非常好的體驗。從文章投稿、註
冊、辦理出國手續等等，讓我學到很多經驗。 
在研討會的會場上，聽取來自各國研究學者報告他們的研究成
果，讓我在研究的領域上有了更多的感觸與見解，除此之外還可
以訓練自己的英文作簡報並與學者溝通與討論的能力。 
在這次研討會中，我感受到各國的研究學者積極且專注的從事研
究，讓我得到更多的啟發與衝動要做更好的研究。也希望未來有
機會還可以到其他地方參訪。 
參加國際性會議，不僅可以開拓自己的國際觀、充實學養之外，
更可以結識到相關領域之學者，對往後在研究都是一大助益。 
三、考察參觀活動(無是項活動者略): 無 
四、建議: 無 
五、攜回資料名稱及內容: 
1. 研討會論文集 
2. 研討會議程表 
 25
 
 
 
 27
首先在研討會網頁上線上投稿論文，經審查後，於 8/28 接獲
通知論文被接受，並於 9/15 前上傳完稿論文、上網註冊並繳交註
冊費。研討會議程表於 10 月中旬公告在研討會網頁上。 
本次研討會是由韓國的 AICIT (The International Association for 
Information, Culture, Human and Industry Technology)主辦 The 5th 
International Conference on New Trends in Information Science and 
Service Science (NISS2011)。會議時間為 10 月 24 日至 10 月 26 日
於澳門舉行，研討會討論的議題主要分成五大類： 
 ISC: Issues on Service Computing  
rmation Science  
us Computing/WSN/ 
tronics  
gement and 
Service  
e 
Science  
各分類又再細分 20 個以上的小議題，相當豐富且多元。 
Mobile Network, Network and Electronics，此場次主席為 Lee Pui 
Mun 教授，有 8 篇論文發表。本論文被安排在第三個順位作簡報。
 IIS: Issues on Info
 ISE: Issues on Communication, 
energy-efficiency in 
Communication/Ubiquito
Mobile Network, Network and Elec
 IMS: Issues on Information Mana
 IICS: Issues on Industry and Convergenc
本論文被安排在研討會第二天 10 月 25 日下午 3:30 ~ 5:30 的
SESSION 18，會中主要研討的主題為 Issues on Communication, 
energy-efficiency in Communication/Ubiquitous Computing/WSN/ 
2. 研討會議程表 
 
六、其他 
附上研討會時所攝照片三張 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/12/30
國科會補助計畫
計畫名稱: 伺服器輔助秘密運算機置及其應用
計畫主持人: 洪國寶
計畫編號: 99-2221-E-005-078- 學門領域: 資訊安全
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
