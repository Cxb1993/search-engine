I 
 
行政院國家科學委員會專題研究計畫成果報告 
異質多核心處理器之編譯器工具組開發（3/3） 
Compiler Toolkits for Heterogeneous Multi-core Processors (3/3) 
計畫編號：97-2220-E-007-002- 
執行期限：98 年 08 月 01 日至 99 年 07 月 31 日 
計畫主持人：李政崑教授 國立清華大學資訊工程學系 
中文摘要 
隨著消費性數位產品在影音、遊戲、多媒體，以及無線通訊等領域的發展與
普及，單一處理器的架構已越來越無法滿足功能上的需求。 
在開發高效能異質多處理器平台的過程中，對軟體開發人員而言最大的挑戰，
將是如何有效地將不同的工作分配到不同的處理器上，以獲得最佳的效能。若在
異質多核心開發平台之系統開發工具中沒有提供完善的工作分配機能，程式設計
者就必須花費較多的心思在手動分割程式的工作上﹔如此不但會影響應用軟體
開發的複雜度與方便性，手動分割程式的動作，也很有可能會因為缺乏編譯器的
分析與協助，造成無法完全發揮多核心平台的效能。因此有一套完整的編譯器工
具組來提供完整的支援，對異質多核心環境的軟體發展是非常重要的。編譯器工
具組涵蓋的工作相當廣泛，包括程式語言模型、編譯器最佳化、即時排程分析、
應用函式庫、效能評估等。 
本計畫為「前瞻多核心系統開發工具研發總計畫」的子計畫之一，針對許多
異質多核心環境發展的研究議題以及挑戰進行研究，我們研究成果包含：1. 提
出一串流機制叫做Streaming RPC，它用來支援在多核心平台上，使用遠端程序
呼叫（Remote Procedure Call）時，達到資料串流溝通的目的，更進一步提出Design 
Pattern以及Programming Model以利於使用者。2. 提出一套適用於嵌入式多核心
軟體的測試工具叫做 pTest， pTest是一個運用在採用主從程式開發架構
（master-slave programming model）的嵌入式多核心系統的測試工具。3. 一個ESL
多核心虛擬共通平台之偵錯開發環境：在第二年提出平台內部的Debugging 
Model，而今年則是做出一個完整的虛擬開發平台。4. 在編譯器的優化方面，則
是有Register Spilling的技巧，將暫存器檔案（register file）亦視為一種spilling 
destination，利用其溝通成本（communication cost）較記憶體低廉的特性，以達
到減少spill code額外負擔與提高整體效能的目的。 
本計畫主要的研究成果論文受到了國際上的肯定，並陸續發表在以下知名國
際學術研討會：2008 IEEE Workshop on Signal Processing Systems（SiPS 2008）[1]、
III 
 
Abstract 
As the market of consumer electronics grow in fields like multimedia, video 
game, and communication, "heterogeneous multiprocessor architecture" is becoming 
the more likely platform for the consumer electronics ahead. A typical example is TI 
OMAP with dual-core solutions using universally for Wi-Fi and dual-mode hand sets. 
Another example is the IBM CELL platform with 9 processors used to deliver 
performance for game processors. Coupling with heterogeneous processor IPs for 
control panels, data panels, memory architectures, special function units, etc, 
heterogeneous processor platforms look likely to stay and with challenge ahead for 
addressing programming models, languages, compilers, libraries, and performance 
tuning tools. 
The goal of this sub-project is to investigate research issues and challenges ahead 
for heterogeneous multi-core environments from viewpoints of Streaming Remote 
Procedure Call programming models, languages, ESL platform and compilers. We 
have made the following research:1. We proposed a Streaming RPC supported on 
multi-core platform. It calls remote functions by Remote Procedure Call to 
communicate each other with streaming data ; and furthermore, we create the Design 
Pattern and Programming Model for Streaming RPC which is friendly to users. 2. We 
proposed a testing tool called pTest which is run on the master-slave programming 
model of multi-core platform. 3. We proposed a multi-core ESL virtual platform : in 
the second year, we reached the Debugging Model inside the platform, and in this 
year, we implement a complete ESL by modified SID. 4. As to compiler optimization, 
we implement the technique called Register Spilling, which takes the register file as a 
spilling destination and with its advantage of low communication cost we reduce the 
instructions of spilling codes and thus gain performance. 
We are accepted on plenty of international conferences or journals, and the 
publications are the following:2008 IEEE Workshop on Signal Processing Systems
（SiPS 2008）[1]、2009 ACM/IEEE Design, Automation, and Test in Europe 
Conference & Exhibition（DATE'09）[2]、The 14th Workshop on Compilers for 
Parallel Computing（CPC 2009）[16]、2007 ACM Transactions on Design Automation 
of Electronic Systems（ACM TODAES 2007） [17]、 2009 Concurrency and 
Computation: Practice and Experience（CCPE 2009）[18]、2009 ACM Transactions 
on Embedded Computing Systems（ACM TECS 2009）、2010 Methods and Tools of 
Parallel Programming Multi-computers（MTPP 2010）[20]。 
V 
 
目錄 
中文摘要 .................................................................................................. I 
Abstract .................................................................................................. III 
目錄 ......................................................................................................... V 
報告內容 ................................................................................................. 1 
一、 前言 ....................................................................................... 1 
二、 研究目的 ................................................................................ 1 
三、 文獻探討 ................................................................................ 2 
四、 研究方法 ................................................................................ 2 
五、 結果與討論 .......................................................................... 14 
六、 研究成果自評 ...................................................................... 15 
七、 參考文獻 .............................................................................. 15 
 
2 
 
子。Cell 內的處理器核心主要有一個Power Core，以及八個SPE。其中每個SPE
上有256K的本地端記憶體（local memory）用來保存各自要運行的指令以及資料。
由於各個SPE 都可以獨立運作，因此如何協調溝通每個SPE的運作，就牽涉到如
何進行系統的資源管理，以使整體效能可以持續的提升。另一個Cell的特性是其
暫存器是由128個128-bit 的向量暫存器所構成。因此對軟體開發人員而言，如何
將程式要解的問題利用向量的方式來表達，就牽涉到是否能完全發揮這顆處理器
的效能。因此有一套完整的編譯器工具組來提供軟體發展人員這方面的支援，對
異質多核心環境的軟體發展是非常重要的。 
在本項子計畫之中，我們將針對異質多核心環境裡的重要議題進行研究，如
Streaming Remote Procedure Call程式模型、語言架構、ESL虛擬平台開發以及編
譯器最佳化等，並發展相關的編譯器工具組，以協助軟體發展人員設計出高效能
及低耗電的應用程式。 
三、 文獻探討 
針對上述的異質多核心環境之特點，傳統的程式語言如C、C++等，由於缺
乏許多相關的機制如type system、streaming、parallelization、reusable 等在design 
pattern 上的支援，因此引發學術界發展許多基於這些傳統語言的擴充，如MIT
的Cilk（R. D. Blumofe, C. F. Joerg, B.Kuszmaul, C. E. Leiserson, K. H. Randall, and 
Y. Zhou, "Cilk: An Efficient Multithreaded Runtime System," PPOPP, 1995）、
StreamIt語言（W. Thies, M. Karczmarek, and S. Amarasinghe, "StreamIt: A 
Language for Streaming Applications," LNCS, 2002）、UC Berkeley的nesC語言（D. 
Gay, P. Levis, R. v. Behren, M. Welsh, E. Brewer, and D. Culler, "The nesC 
Language: A Holistic Approach to Networked Embedded Systems," PLDI, 2003）、
Stanford的Brook語言（I. Buck, T. Foley, D. Horn, J. Sugerman, K. Fatahalian, M. 
Houston, and P. Hanrahan, "Brook for GPUs: Stream Computing on Graphics 
Hardware," ACM Transactions on Graphics, 2004）、TU Delft 的SP@CE語言（A. L. 
Varbanescu, M. Nijhuis, A. Gonzalez-Escribano, H. J. Sips, H. Bos, and H. A. Bal, 
"SP@CE - An SP-based programming model for consumer electronics streaming 
applications," LCPC, 2006）、國內也有中正大學所開發的CCC語言（N. W. Lin, 
"Design and Implementation of the Parallel Programming Language CCC," ICS, 2004）
等。由此可見對異質多核心環境，提供傳統語言所缺乏的功能如：異質環境、data 
passing、串流、省電等機制，是相當必要的。 
四、 研究方法 
1. Streaming Remote Procedure Call (Streaming RPC) Programming 
Model 
4 
 
遠端程序呼叫(remote procedure call, RPC)的機制上，所以MSA在嵌入式系統常見
的分散式記憶體平台上提供了function-offloading的programming model。 
 
圖表 2 Experiment Environment 
Remote procedure call(RPC)的programming model會把不同核心上的工作都
當作是一個遠端程序，並且允許每一個程序調用在其他核心上的程序，基於這個
model，我們提出了Multi-core Software API(MSA)，用以簡化在異質多核心平台
上遇到的問題。此外，為了在異質多核心的環境中分散並管理工作，MSA提供
了程式開發者一系列的RPC APIs(表格 1)，而為了在不同的核心間管理資料的搬
移，MSA也提供了message passing和data streaming兩種module，讓使用者管理data
和streaming data；除了上述關於程式功能的開發之外，我們也提供了high-level 
library的設計，讓軟體開發者能夠更有效率的在不同的平台上開發程式。 
RPC Module 
msa_load_procset(char *I, CoreID c) Load executable image “i” to ”c” core 
msa_RPC_start(char *p, CoreID c) Start procedure “p” on  ”c” core 
Message Module 
msa_msg_send(MsgID m, void *p, MsgAttr *a) Send data from pointer ”p” to message box “m” 
with given attribute “a” 
Msa_msg_recv(MsgID m, void *p) Receive data from message box “m” to pointer 
“p” 
Stream Module 
msa_stream_send(StrID s, void *p, StrAttr *a) send data from pointer ”p” to streaming 
channel ”s” with given attribute ”a” 
Msa_stream_recv(StrID s, void *p) Receive data from streaming channel ”s” to 
pointer ”p” 
圖表 3 Highlight of Multi-core Software API 
最後我們拿 BP（Belief Propagation）來作為我們測試的應用程式。我們將測
試的 BP 中所使用的時間分成三大類：分別是 MPU Computation、Major 
Computation、以及 MSA Overhead。Major Computation 為傳資料到 DSP 所花的
時間，MSA Overhead 則是 MSA 函數跑的時間，圖表 4 即為分別測試 MPU 加不
同數目的 DSP 的總共耗時。 
6 
 
以下我們將個別描述這三個元件所負責的工作以及彼此的關係: 
A. Pattern generator 
使用者可以用正規表示法來描述待測系統可發生的行為或是針對待測系
統的部分服務來設計出相對應的正規表示法，pattern generator將根據使
用者輸入的正規表示法以及待測系統的行為(服務)發生機率的分佈資訊
來建造出PFA。其中，待測系統的行為(服務)發生機率可以取得自profiling
資訊或是使用者自定的機率。pattern generator將利用PFA來自動產生出
大量的測試樣本，並將這些測試樣本送給pattern merger做後續處理。 
B. Pattern merger 
pTest考慮到多核心程式的並行執行的現象，因此pattern merger的設計目
的是交錯pattern generator所產生的測試樣本，交錯的測試樣本用來探查
多核心程式可能執行的每一條路徑，多核心程式的各種執行路徑都需要
探查，因為並行程式中不同的執行順序可能會導致程式發生錯誤，如
deadlock/livelock。 
C. Bug detector 
Bug detector 是一個全天候監視器，用來監視每一個測試樣本的執行狀
況。若在測試期間，程式執行發生不預期的錯誤，bug detector 將提供程
式測試過程的執行記錄給使用者，幫助使用者重建測試環境，以便於找
出多核心程式中的錯誤。 
Probabilistic finite state automata 是設計 pTest 的核心基礎，PFA 的應用型式
相當多，隱藏式馬可夫模型（hidden Markov model，HMM）便是一個典型的 PFA，
而 PFA 的定義如下: 
 A probabilistic finite-state automaton is a six tuple (Q, Σ, δ, q0, F, P), 
where:  
1) Q is a finite set of states; 
2) Σ is a finite alphabet; 
3) δ ⊆ Q × Σ × Q  is the state transition relation;  
4) q0 ∈ Q is the initial state; 
5) F ⊆ Q is the set of final states; 
6) P: δ → R+ is the transition probability function such that: 
 
 
∑
∈∑∈∀
∈=
Qqa
QqwhereqaqP
',
,1)',,(
8 
 
便能觀察目前系統的暫存器（register）內容，甚至可以更動暫存器的內容。藉由
除錯器所提供控制系統的方法，使用能從得到的資訊判斷程式是否按照使用者的
需求來執行，使執行結果錯誤的程式能夠有效的縮小可能的錯誤範圍，提供使用
者具體的方向來解決程式或系統的問題。 
以目前最廣為流傳的除錯器GNU debugger（GDB）為例，為了使除錯器的
發展能保有最大的可移植性，GDB將debugger劃分為兩部分：符號端（symbol side）
及目標端（target side）。在GDB中，目標向量（target Vector）負責的處理的部
分界於上述兩者之間。其發展概念類似於物件導向程式中的物件，利用相同對物
件的操控方法，重覆利用相同的上層程式碼，簡化開發時抽換底層機制的複雜度。
一個目標向量包含有，與目標平台相同暫存器數量大小的空間，負責傳輸暫存器
的內容及儲存其內容；反組譯（disassemble）硬體機械碼，提供解譯目標平台上
應用程式內容的方法；除此之外，並負責控管中斷點（breakpoint）及監視點
（watchpoint）的數量與使用情形。利用這樣的架構劃分，使GDB能夠同時兼備
有對多重語言的支援與多重平台的支援，讓GDB在不同平台的移植上更便利。 
針對嵌入式系統（embedded system）上的除錯，為了讓GDB能夠被使用在
嵌入式系統的除錯，GDB提出了遠端串列傳輸協定（remote serial protocal，RSP），
利用精簡化的單一指令封包，控制接在本端機器上的遠端硬體。在遠端串列傳輸
協定裡，所有的傳輸內容都利用ASCII碼來做為傳輸格式。在協定的設計上，考
慮了利用串列傳輸線傳輸封包時，資訊誤傳的可能性。為了實現多處理器平台上
的偵錯，將利用單獨的偵錯器來對應不同的處理器，同時在每個不同的區塊之間，
以不同的溝通介面連結，使系統達到整合的目的。 
實作內容，在整合 MPU Tool-Chain及 DSP Tool-Chain的部份，我們利用
CDT plugin上既有的延伸點（extension point）：org.eclipse.cdt.managedbuilder.core. 
buildDefinitions來做延伸，將我們既有的tool-chain：MPU跟DSP整合在我們的IDE
上，這部份主要透過修改 XML檔來達成如圖表8所示。藉由一套定義好的tool 
chain格式，我們可以將各種tool chain整合在IDE上。 
10 
 
圖表 9. Debug model 
 在 DebugElement 的部分，我們需要實作 fireEvent、fireCreationEvent、
fireSuspendEvent 等，讓我們能在 IDE 開創對應的 debugging target，如
MPU Debug Target、DSP Debug Target。 
 DebugTarget的部份，我們必須實作DSPDebugTarget及MPUDebugTarget
兩個部份，對一個 debug target 我們必須實作 debug 一整個的行為，如
thread、frame、variable、breakpoint。 
 實作 IThread 的 interface：對應一個 debugging program 只會有一個 gdb 
thread，在 thread 這部份，我們必需實作整個 gdb thread 的操作，如：
suspend、resume、isSuspended、getStackFrames 等。 
 DSPStackFrame 及 MPUStackFrame 的部份，我們必需去 parse 跟 cache 
stack frame 所回應的 message，根據這些 message，我們可以知道目前
的 line number, stack 的位置，在 stackframe 這個部份，我們必須實做 
step into 和 step over 的功能。 
 IVariable：我們在這個部份包裝了 variable 的名稱，並從 debug target 那
邊取得所需的 value。 
 IValue：value 的值包含各種型態，如：string、int、double、char 等。在
value 的部份，我們只需要將 value object 的值正確的呈現出來。 
 Breakpoint：breakpoint 的部份算是相當複雜的一塊 class，這邊必須實
作 linebreakpoint、addressbreakpoint，所幸 ECLIPSE 上面已經有一套優
良的 abstract LineBreakpoint implementation. 我們這裡的 MPU 及 DSP 
的 breakpoint 會是 LineBreakpoint 的一個 subclass. 
在整個多核心 debugger的設計上，我們有著各自獨立的 DSP Debugger 
Element 及 MPU Debugger Element，這兩個獨立的debugger element將有著自己
的variable view、memory view、disassemble view等，觀察到的debugging資訊並
不互相影響，以及有著各自的command queue，發出的command如suspend、resume、
step也不會互相產生影響，這讓我們可以同時在IDE上操作兩個不同的debugger，
順利的達成多核心debugging的功能。 
底下則是，我們實作在ECLIPSE上面，看到的多核心Debugging的情況，圖
表10為MPU view，而圖表11為DSP view。 
12 
 
（communication cost）較記憶體低廉的特性，以達到減少spill code額外負擔與提
高整體效能的目的。Register file spilling將會針對待spilling的live range，分析哪
個暫存器檔案或者記憶體最為合適，合適與否是以溝通成本及暫存器壓力
（register pressure）為評估基礎。而在評估暫存器壓力（register pressure）的實
作方式上，我們先在不同register file建立一個global interference graph，不同於local 
interference graph，其以多個register file間的溝通做為考量。而此global interference 
degree（GID）可以作為我們評估暫存器壓力的一個基礎，在這個基礎之上，我
們用GID/RA這個方法來提高我們預測暫存器壓力的準度，並且能夠作更大膽的
spill code。詳細的演算法如圖表所示。而評估完所有的暫存器的壓力後我們就能
以以最為合適者作為spilling destination。此演算法細節如圖表所示。 
 
圖表 12. The main algorithm of estimating the register pressure 
14 
 
的效能加強。由於這隻程式，暫存器檔案分配（register file assignment [12] [13] [14] 
[15]）分配得並不平均，使得我們的方法能將大量的記憶體的溝通成本，轉換成
記憶體檔案的溝通成本，而達到大幅提高效能。此研究發表於國際研討會：The 
14th Workshop on Compilers for Parallel Computing（CPC 2009）[16]。 
 
圖表 14. Open64 compiler 加入 RFA 後的架構流程圖 
 
圖表 15. Register file spilling 在 DSPStone 的效能表現 
五、 結果與討論 
首先，我們更進一步提出Streaming RPC的程式模型（Programming Model），
我們所提出的程式模型是依據長期在多核心平台上，利用Streaming RPC的機制，
開發高效能多媒體應用軟體所累積的經驗結晶，除了上述關於程式功能的開發之
外，我們也提供了high-level library的設計，讓軟體開發者能夠更有效率的在不同
的平台上開發程式。 
16 
 
Microprocessor Report, In-Stat/MDR, December 2004. 
[4] T.J. Lin, C.C. Chang. C.C. Lee, and C.W. Jen: An Efficient VLIW DSP 
Architecture for Baseband Processing. Proceedings of the 21th International 
Conference on Computer Design, 2003. 
[5] Tay-Jyi Lin, Chie-Min Chao, Chia-Hsien Liu, Pi-Chen Hsiao, Shin- Kai Chen, 
Li-Chun Lin, Chih-Wei Liu, Chein-Wei Jen: Computer architecture: A unified 
processor architecture for RISC & VLIW DSP. Proceedings of the 15th ACM 
Great Lakes symposium on VLSI, April 2005. 
[6] G.J. Chaitin, M.A. Auslander, A.K. Chandra, J. Cocke, M.E. Hopkins, and P.W. 
Markstein: Register allocation via coloring. Computer Languages, 6:47-57, 
1981. 
[7] G.J. Chaitin: Register allocation and spilling via graph coloring. Proceedings of 
the ACM SIGPLAN 1982 Symposium on Compiler Construction, pages 201-207, 
1982. 
[8] D. Bernstein, D.Q. Goldin, M.C. Golumbic, H. Krawczyk, Y. Mansour, I. 
Nahshon, and R.Y. Pinter: Spill code minimization techniques for optimizing 
compilers. Conference on Programming Language Design and Implementation, 
1989. 
[9] P. Briggs, K.D. Cooper, and L. Torczon: Rematerialization. Conference on 
Programming Language Design and Implementation, 1992. 
[10] S. Kurlander and C. Fisher: Zero-cost range splitting. Conference on 
Programming Language Design and Implementation, 1994. 
[11] V. Zivojnovic, J. Martinez, C. Schlager, and H. Meyr: DSPstone: A DSP oriented 
benchmarking methodology. Proceedings of the International Conference on 
Signal Processing and Technology, 715–720, 1995. 
[12] Yung-Chia Lin, Yi-Ping You, Jenq-Kuen Lee: PALF: Compiler Supports for 
Irregular Register Files in Clustered VLIW DSP Processors. Concurrency and 
Computation: Practice and Experience, 2007:19:1-16, Wiley, 2007. 
[13] Yung-Chia Lin, Yi-Ping You, Jenq-Kuen Lee: Register Allocation for VLIW DSP 
Processors with Irregular Register Files. International Workshop on Compilers 
for Parallel Computing, January 2006. 
[14] Chia-Han Lu, Yung-Chia Lin, Yi-Ping You, and Jenq-Kuen Lee: A 
Local-Conscious Global Register Allocator for VLIW DSP Processors with 
Distributed Register Files International Workshop on Compilers for Parallel 
Computing, January 2007. 
[15] Chia-Han Lu, Yung-Chia Lin, Yi-Ping You, and Jenq-Kuen Lee: LCGRFA: 
Global Register File Assignment with Local Consciousness for VLIW DSP 
Processors with Non-uniform Register Files. Concurrency and Computation: 
Practice and Experience, Volume 21, Issue 1, Pages 101-114, Wiley, January 
2009. 
[16] Expression Rematerialization for VLIW DSP Processors with Distributed 
Register File, Chung-Ju Wu, Chia Han Lu, and Jenq-Kuen Lee, CPC 2009, 
Zurich, Switzerland, Jan. 2009. 
[17] Compilation for Compact Power-Gating Controls, Yi-Ping You, Chung-Wen 
Huang, Jenq Kuen Lee, ACM Transactions on Design Automation of Electronic 
Systems, Vol. 12, No. 4, Article 51, Sep. 2007. (26 pages) 
[18] LC-GRFA: Global Register File Assignment with Local Consciousness for 
VLIW DSP Processors with Non-uniform Register Files, Chia-Han Lu, 
Young-Jia Lin, Yi-Ping You, and Jenq Kuen Lee, Concurrency and Computation: 
Practice and Experience, Volume 21, Issue 1, Pages 101-114, Wiley, January 
出席國際會議心得報告 
黃崇文 
清華大學資工系博士生 
1. 主要任務摘要： 
參加 Embedded and Ubiquitous Computing (EUC 2009)，本次會議舉行
於加拿大溫哥華，會議期間為 29-31 August 2009。會議主題包括：
嵌入式運算、嵌入式軟體、嵌入式架構、即時作業系統、可重組運算、
隨意運算與通訊，等。這些主題都是以嵌入式架構為基礎，然後沿著
嵌入式系統發展趨勢產生的研究與技術。本次參加會議與各界專家討
論嵌入式架構技術發展，包括：使用嵌入式軟體開發模型、多核心程
式技術、可變架構設計、等等。本次並參與技術研究發表，題目為
Support of Paged Register Files for Improving Context Switching on 
Embedded Processors，藉此向國際與會人員報告對於嵌入式處理器的
微架構技術。 
2. 與會心得： 
感受深刻的會議keynote有 Prof. Yau (Arizona State Univ.)講述在採用
SOA時需要面對的隱私權與安全性議題，Prof. Yau曾經來台參訪，當
時簡介SOA的技術，但這次更加深入提到安全議題。另外，Prof. Wang 
Yi 以Cache-Aware Scheduling and Analysis for Muticores來探討多核
心架構下，如何利用Cache分區的設計，讓多核心架構達到即時系統
的要求，而不會讓task互相影響彼此的執行。EUC會議首日以嵌入式
軟體硬體設計、中介軟體與P2P、無線通訊、嵌入式軟體及架構最佳
化，為主軸進行討論，我們的研究成果就在第一天的嵌入式架構最佳
化上報告。報告完我們設計的暫存器架構後，在場學者的回應相當踴
躍，其中不乏有些問題是在論文中沒有考慮到的情形。而這些意見在
當場有詳細討論，我們並把許多有幫助的意見帶回來跟研究團隊進行
分享。也因此這次透過參與EUC會議與國際學者的交流，得到很多豐
富的經驗分享。 
98年度專題研究計畫研究成果彙整表 
計畫主持人：李政崑 計畫編號：98-2220-E-007-002- 
計畫名稱：前瞻多核心系統開發工具研發--子計畫一：異質多核心處理器之編譯器工具組開發(3/3)
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 1 0 100% 件  
技術移轉 
權利金 1000 0 100% 千元  
碩士生 1 0 100%  
博士生 5 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 5 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
