 is simply through sorting the luminance of a color in the ascending order. The luminance Y of a color is 
calculated by the following equation. 
Y = 0.299R + 0.587G + 0.114B (1) 
where R, G, and B are the intensities of the red, green, and blue components, respectively.  
2. ???? 
Hadenfelt and Sayood [4] introduced the zero-order entropy to measure the performance of a 
re-indexing. In reference [9], a simulated annealing algorithm was proposed to reorder a palette by 
minimizing the corresponding zero-order entropy. The computational complexity of simulated annealing 
is very high and is not useful for practical applications. To reduce the computation of this kind of 
approach, Memon and Venkateswaran [6] presented a pairwise merge heuristic to determine a set of color 
indexes. The computational complexity of this method is in the order of O(N4) [1], where N is the number 
of colors in a palette and is still high, especially for N ≥ 64. It is noted that Memon’s approach has the 
best compression efficiency among the available heuristic approaches.  
Po and Tan used the “closest pairs ordering” technique to reorder colors that are close in the 3D 
color space [5]. This concept was also used by Spira and Malah [7] to reorder color palette. It is noted that 
this approach can be formulated as the well-known traveling salesman problem (TSP) [1]. Since the TSP 
is NP hard [10] and an exact solution of the TSP can only be found for a small value of N in practical 
applications. Therefore approximate solutions are usually obtained for this kind of problem. Po et al. [5] 
used a simple technique to generate an approximate solution of the TSP. However, this method, in general, 
generates poor solutions [11]. Battiato et al. proposed a TSP-based re-indexing scheme to solve the same 
 may be compressed efficiently by a lossless compression algorithm. It is noted that P can be obtained 
from V through permutations of colors in V.  
Given an image I and a color palette V, let c(i, j) be the number of occurrences that pixels with index 
i (color v(i)) are spatially adjacent to pixels with index j (color v(j)). Let 
w(i, j) = w(v(i), v(j)) = c(i, j) + c(j, i),  i ≠ j  
w(i, j) = w(v(i), v(j)) = 0,  i = j  
with i, j = 1, 2,.., N. Our purpose is to find a palette P = (p(1), p(2),…, p(N)) such that the following 
index cost is minimized [6]. 
f(P) = ∑
=
N
i 1
∑
=
N
i 1
w(p(i), p(j)) i – j= ∑
=
N
i 1
∑
=
N
i 1
w(l(i), l(j)) i – j (3) 
where w(p(i), p(j)) is the number of times that pixels with color p(i) have neighboring pixels whose color 
is p(j) and l(i), i = 1, 2,.., N, are the corresponding index of p(i). The problem of finding a palette that 
minimizes f(P) is NP complete [6].  
For a reasonable good color palette P, w(p(i), p(j)) = 0 for i – j ≥ d, where d is a number which is 
smaller than N in general. It is noted that the value of d can be determined using a set of images. In this 
case, equation (3) can be rewritten as  
f(P) = ∑
=
N
i 1
∑+
−=
di
dij
w(p(i), p(j)) i – j (4) 
with i–d ≥ 1 and i+d ≤ N. Comparing equations (3) and (4), we may conclude that some computations can 
be saved using equation (4) to solve the problem of palette reordering.  
In order to minimize f(P), an iterative is applied to determine the color palette P in our algorithm. In 
 lr(id+k-1), lr(id),…, lr(N)). We calculate fid,k(Pr) by the following equation: 
fid,k(Pr) = f (Pr) + W1 + W2 (7) 
where  
f (Pr) = ∑
=
N
i 1
∑+
−=
di
dij
w(lr(i), lr(j)) i – j with i–d ≥ 1 and i+d ≤ N, 
Wl = 2∑
=
2
1
m
mj
(w(lr(id+k), vj)- w( lr(id), lr(j))) id – j, 
W2 = 2∑
=
2
1
k
kj
(w(lr(id), vj)- w( lr(id+k), lr(j))) id+k – j 
with m1= max(1, id-d), m2 = min(N, id+d), k1= max(1, id+k-d) and k2 = min(N, id+k+d). 
Our algorithm starts from an initial color palette P0 and an improved color palette Pr with smaller 
index cost is obtained through the following iterations. The iterative process will be stopped if no 
significant decrement of index cost is found or the number of iterations is larger than a predefined value. 
For the purpose of clarity, the subscript r will be omitted for the index list Lr and its element lr(i). We will 
also use li instead of lr(i) to indicate the ith element of the index list Lr. The whole process may be 
summarized as follows: 
(1) Use the Pinho’s method to order a color palette and initialize the corresponding index list L = (l1, l2,…, 
lN). Set (v1, v2,…,vN) = (l1, l2,..., lN). Calculate w(li, lj), 1≤ i, j≤ N, where N is the number of colors in 
the palette. Input the values of m and d. 
(2) Set r = 1 and calculate  
Worgl(0) = ∑
=
N
i 1
∑
=
2
1
k
kj
w(li, lj) i – j, where k1= max(1, i-d) and k2 = min(N, i+d). 
(3) Set id = 1 and W' = Worgl (r-1). 
 Fig. 1 shows the average bit rates of index images re-indexed by our method with various values of d 
and m for two sets of images without dithering. From Fig. 1, we can see that lower average bit rates are 
achieved when m < d, especially when larger values of d and m are used. It is noted that the computing 
time is proportional to the values of d and m. Therefore larger values of d and m are not used in this 
project although it may result in a better compression performance. In the experiment, the color palette 
consists of 256 colors. In this project, the values of d and m being used are160 and 32, respectively. More 
experimental studies will be carried out in the second year. 
 
4.54
4.58
4.62
4.66
4.7
4.74
4.78
4.82
1
2
8
1
3
6
1
4
4
1
5
2
1
6
0
1
6
8
1
7
6
1
8
4
1
9
2
2
0
0
2
0
8
2
1
6
2
2
4
2
3
2
2
4
0
2
4
8
2
5
6Value of d
Av
er
ag
e 
Bi
t R
at
e
m=32
m=64
m=96
m=128
 
Fig. 1. Average bit rates of index images re-indexed with various values of d and m. 
5. ???? 
 [1]  A. J. Pinho and A. J. R. Neves, “A survey on palette reordering methods for improving the 
compression of color-indexed images,” IEEE Trans. on Image Processing, vol. 13, no. 11, pp. 
1411-1418, November 2004. 
[2] S. Battiato, G. Gallo, G.. Impoco, and F. Stanco, “An efficient re-indexing algorithm for 
color-mapped images,” IEEE Trans. on Image Processing, vol. 13, no. 11, pp. 1419-1423, 
November 2004. 
[3] A. Zaccarin and B. Liu, “A novel approach for coding color quantized images,” IEEE Trans. on 
Image Processing, vol. 2, no. 4, pp. 442-453, October 1993. 
[4] A. C. Hadenfelt and K. Sayood, “Compression of color-mapped images,” IEEE Trans. on Geosci. 
And Remote Sensing, vol. 32, no. 3, pp. 534-541, May, 1994.  
 ???????????? 
? ?????  ? ?????                         ???9911 ? 1 ? 
??????? 
??????????????????????? 
????????? 
?????NSC95-2221-E019-046    ??????? 
??/???? ?????????????????? 
???/??? ??? 
??? 
???????????????????????????
?????????????????????????????
?????????????????????????????
?????????????????????Memon?????
?????????????????????????????
????????????????????? Memon ????
???? Pinho??????????????????????
??????? 
? 
 ???? 
??? 
The compression efficiency of an indexed image depends on the palette 
ordering. However, obtaining an optimal palette ordering is not an easy 
task and approximate solutions are usually sought in practice. In this 
project, a novel algorithm will be developed to find an approximate 
solution of the palette reordering problem. Among the available 
methods, the pairwise merging technique proposed by Memon et al. is 
the best in terms of compression efficiency. However, this method 
needs extensive computations. It is expected that our approach will 
outperform the pairwise merging technique in terms of compression 
efficiency and computing time. Compared to Pinho’s method, our 
approach will have the much better compression efficiency although 
with longer computing time.  
?????? 
? 
?????? 
???????? 
???? 
?????????????????????????
Memon ???????? Pinho???????????????
?????????????? 
 
