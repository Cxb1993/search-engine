2 文獻探討
The motivation to study languages for reversible pro-
grams traditionally comes from the thermodynamics
view of computation. Baker’s PsiLisp [4] was pro-
posed in his series of papers to discuss thermody-
namics and garbage collection. Zuliani’s reversible
guarded-command language [44] was developed to
study the reasoning of quantum algorithms. Frank’s
R,  part  of  the  PISA project  [17]  aiming  to  build
energy-saving reversible computers, was designed as
a high level programming language suitable for com-
piling into machine instructions. However, all  of
these languages are either not implemented or not
maintained anymore, with the exception of R, which
is alive with the project although not seemingly in
active development.
Most of these languages use only reversible primi-
tive operators to construct reversible programs. To
ensure information preservation, however, we still
have to be sure that no variable is discarded, and that
when we execute a branch, there is always a way
to tell from the resulting state that which branch has
been taken. The two conditions are usually enforced
by syntactical restrictions in the language. Lutz and
Derby’s Janus [30] is an imperative language consist-
ing of invertible primitive operations. Being an im-
perative language, all variables are part of the state
so discarding variable is not an issue. All branching
constructs comes with an exit conditions to ensure
disjointness. For example, an IF statement is paired
with two predicates. One is used to choose a branch,
like ordinary IF statements. The other is supposed to
yield the same truth value after the execution of the
branches, so we could tell which branch was chosen
when we run the program backwards. It has a full
specification and an implementation on a DEC Sys-
tem 20. Unfortunately it is also not maintained any-
more. A different and successful approach to deal
with the branching problem was developed by Glu¨ck
and Kawabe [22, 21]. First  of  all, the branching
problem is reduced to predicting a branch to take in
the (inverted) program in an intermediate language.
They then noticed that the prediction of branches is
similar to determining which pro jection to use when
parsing with respect to a context grammar. Therefore
they used LR parsing to slice the inverted program
into pieces such that the choice of branches would be
deterministic. They also provided sufficient, though
not necessary, conditions for the range-disjointness
of branches. It would be interested to see whether
this approach could be integrated into a type system.
Our plan is to use a type system to perform the same
task. A number of previous works on type systems
and type theory may prove to be helpful.
We  intended  to  explore  a  type-based  approach
to program inversion and expected dependent type
to play a central role. There has been a trend in
recent years to bridge the gap between dependent
types and practical programming. Projects along this
line include Cayenne [2], Coq [13], Dependent ML
[43], Agda [40], Ωmega [41], Epigram [32], and the
GADT extension [10] to Haskell. It is believed that
dependent types have an important role in the next
generation of programming languages [42]. The con-
cept of Inductive Families [15], especially the iden-
tity type, is central to our applications. A recent de-
velopment of relations in dependent type theory was
carried out by Gonzal´ia [25], Ch. 5.
3 研究方法
The initial idea of the project is based on the au-
thor's previous work designing a toy language where
program  is  reversible  [35]. The  language  bor-
rowed plenty of experience from the field of pro-
gram derivation. This project plans to to adopt a type
system to check some properties that we could not
guarantee. Therefore, the project intends to be an
2
of derivation can be applied. This paper derives two
algorithms, by relational program calculation, solv-
ing MSSu and MSDl, after reviewing the classical
MSS for completeness. All three derivations follow
a similar pattern. The problem is first decomposed
to a sub-problem about prefixes, specified by a fold
returning the set of possible solutions. We then at-
tempt to reduce the number of possible solutions by
some monotonicity property. Finally, the specifica-
tion is refined to a linear-time algorithm by exploit-
ing the properties of the set of solutions. While the
Greedy Theorem is used to downsize the solution set
for MSS, the MSSu turns out to be a natural candi-
date for applying the Thinning Theorem, both theo-
rems proposed by Bird and de Moor [7]. To deal with
MSDl, on the other hand, we propose a variation of
thinning based on an extended notion of monotonic-
ity. The key concepts of left-negative and right-screw
segments proposed by Lin et al. [29] can both be seen
as consequences of the attempts to meet the mono-
tonicity conditions for the Thinning Theorem.
4.2 A Programming  Language  Approach  to  XML
Streaming
The second paper ``XML Stream Processing Using a
Lazy Concurrent Language'' was presented in PLAN-
X 2008 [37], co-organised with POPL 2008.
Functional programming languages that are suit-
able for XML processing, for example, XDuce [27]
and CDuce [6], have successfully developed a grow-
ing user base. In the authors' opinion, the languages
owe their success not only to their type systems de-
signed for XML, but also to their expressiveness for
general purpose computation. They allow program-
mers to implement an entire application for whatever
purpose that happens to make use of XML data.
XML processing languages with tree-based APIs
usually build the entire XML parse tree in memory
before processing. On the other hand, stream-based
APIs (e.g. SAX [8]), while enabling finer control
of space usage, are more cumbersome to use. To
achieve efficient heap usage in a tree-based language,
Nakano and Mu [38] designed a stream-based ab-
stract machine and showed how to compile a tree-
based program to the model. On the other hand,
Frisch and Nakano [18] described, using term rewrit-
ing, semantics for tree-based programs that process
XML input in a stream-based manner. The down-
side of both approaches, however, is the loss of gen-
erality. Users may not like to switch completely to
a specialised abstract machine or term-rewriting se-
mantics merely because the input of a program hap-
pens to be XML.
Motivated by previous work on XML stream pro-
cessing, we noticed that programmers need concur-
rency to save space, especially in a lazy language.
User-controllable concurrency provides the possibil-
ity of reducing space usage in many programs. With
lower  garbage-collection  overhead  resulting  from
concurrent execution, the elapsed time of programs,
stream processing ones in particular, is tremendously
decreased.
The challenge is how to encapsulate concurrency
without compromising expressiveness and flexibil-
ity of languages. We propose the idea of pushing
datatypes --- when a pushing closure is demanded, all
expressions referring to it are evaluated concurrently
to weak head normal forms. The closure is no more
alive and may thus be garbage collected. Semanti-
cally, it is a non-intruding extension because it does
not change the denotational semantics of an expres-
sion. It is also easy to be implemented on top of a lan-
guage providing concurrent threads and inter-thread
synchronisation. We have developed a prototype us-
ing Haskell and showed pushing datatypes can be
used to effectively reduce space usage and thus re-
sult in shorter elapsed time in many programs.
4
[6] V. Benzaken, G. Castagna, and  A. Frisch.
CDuce: an XML-centric general-purpose lan-
guage. In Proceedings of the 2003 ACM SIG-
PLAN International Conference on Functional
Programming. ACM Press, 2003.
[7] R. S. Bird and O. de Moor. Algebra of Pro-
gramming. International Series in Computer
Science. Prentice Hall, 1997.
[8] D. Brownell. SAX2. O'Reilly, January 2002.
[9] Y. H. Chen, H.-I. Lu, and C. Y. Tang. Dis-
joint segments with maximum density. In Pro-
ceedings of the 2005 International Workshop
on Bioinformatics Research and Applications
(IWBRA 05), number 3515 in Lecture Notes in
Computer Science, pages 845--850, May 2005.
[10] J. Cheney and R. Hinze. First-class phantom
types. Technical Report TR2003-1901, Cornell
University, 2003.
[11] K.-M. Chung and H.-I. Lu. An optimal algo-
rithm for the maximum-density segment prob-
lem. In Proceedings of the 11th Annual Eu-
ropean Symposium on Algorithms (ESA 2003),
number 2832 in Lecture Notes in Computer Sci-
ence, pages 136--147, September 2003.
[12] K.-M. Chung and H.-I. Lu. An optimal algo-
rithm for the maximum-density segment prob-
lem. SIAM Journal on Computing, 34(2):373--
387, 2004.
[13] The Coq Development Team, LogiCal Project.
The  Coq  Proof  Assistant  Reference  Manual,
2006.
[14] E. W. Dijkstra and W. H. J. Feijen. Een meth-
ode van programmeren. Academic Service, 's
Gravenhage, the Netherlands, 1984.
[15] P. Dybjer. Inductive families. Formal Aspects
of Computing, pages 440--465, 1994.
[16] T.-H. Fan, S. Lee, H.-I. Lu, T.-S. Tsou, T.-C.
Wang, and A. Yao. An optimal algorithm for
maximum-sum segment and its application in
bioinformatics. In Proceedings of the 8th In-
ternational Conference on Implementation and
Application of Automata (CIAA 2003), number
2759 in Lecture Notes in Computer Science,
pages 46--66. Springer-Verlag, July 2003.
[17] M. P. Frank. The R programming language and
compiler. MIT Reversible Computing Project
Memo #M8, Massachusetts Institute of Tech-
nology, 1997.
[18] A. Frisch and K. Nakano. Streaming XML
transformation using term rewriting. In Pro-
gramming  Language  Technologies  for  XML
(PLAN-X 2007), pages 2--13, January 2007.
[19] J. Gibbons. An  introduction  to  the  Bird-
Meertens  formalism. New Zealand  Formal
Program  Development  Colloquium  Seminar,
Hamilton, November 1994.
[20] J. Gibbons. Calculating functional programs.
In Proceedings of ISRG/SERG Research Collo-
quium. Oxford Brookes University, November
1997.
[21] R. Glu¨ck and M. Kawabe. A program inverter
for a functional language with equality and con-
structors. In  A. Ohori, editor, Programming
Languages and Systems. Proceedings, number
2895 in Lecture Notes in Computer Science,
pages 246--264. Springer-Verlag, 2003.
[22] R. Glu¨ck and M. Kawabe. Derivation of de-
terministic inverse programs based on LR pars-
ing (extended abstract). In Y. Kameyama and
6
[36] S.-C. Mu, H.-S.  Ko, and P. Jansson. Alge-
bra of programming using dependent types. In
Ninth International Conference on Mathemat-
ics of Program Construction, number 5133 in
Lecture Notes in Computer Science, pages 286-
-283. Springer-Verlag, 2008.
[37] S.-C. Mu, T.-C. Tsai, and K. Nakano. XML
stream processing using a lazy concurrent lan-
guage. In Programming Language Techniques
for XML (PLAN-X 2008), 2008.
[38] K. Nakano  and  S.-C.  Mu. A pushdown
machine  for  recursive  XML processing. In
N. Kobayashi, editor, The 4th Asian Sympo-
sium  on  Programming  Languages  and  Sys-
tems (APLAS 2006), number 4279 in Lecture
Notes in Computer Science, pages 340--356.
Springer-Verlag, 2006.
[39] B. Nordstro¨m. Terminating general recursion.
BIT Numerical Mathematics, 28(3):605--619,
September 1988.
[40] U. Norell. Towards a Practical Programming
Language Based on Dependent Type Theory.
PhD thesis, Chalmers University of Technol-
ogy, 2007.
[41] T. Sheard. Programming  in Ωmega. The
2nd Central European Functional Programming
School, June 2007.
[42] T. Sweeney. The next mainstream program-
ming language: a game developer's perspec-
tive. Invited Talk, The 33rd Annual Sympo-
sium on Principles of Programming Languages
(POPL), January 2006.
[43] H. Xi. Dependent ML: an approach to practical
programming with dependent types. Journal
of Functional Programming, 17(2):215--286,
March 2007.
[44] P. Zuliani. Quantum Programming. PhD the-
sis, Oxford University Computing Laboratory,
2001.
8
