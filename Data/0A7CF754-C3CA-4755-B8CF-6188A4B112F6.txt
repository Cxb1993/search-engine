1Ad-Hoc Intelligent Environments Using
Ubiquitous Sensing and Distributed Computing
Chih-Yu Wen
Department of Electrical Engineering
Graduate Institute of Communication Engineering
National Chung Hsing University
Abstract
Intelligent environments is a concept that, according to Mark Weiser is “a physical world which is
richly and invisibly interwoven with sensors, actuators, displays, and computational elements, embedded
seamlessly in the everyday objects of our lives, and connected through a continuous network” [1]. These
intelligent systems are envisioned as the byproduct of pervasive computing and the availability of cheap
computing power, making human interaction with the system a pleasant experience. In this project, we
examine the core technologies for building an intelligent environment, including adaptive wireless com-
munication algorithm design, autonomous distributed management, collaborative information processing,
and communication protocol engineering, and further propose an ad-hoc intelligent environment design.
I. INTRODUCTION
Networking sensors and creating intelligent environments [2] may revolutionize information gathering
in a variety of situations. In this project, an ad-hoc intelligent environment is considered to realize a vision
of “Intelligence”, where sensors will gather and process information from many different sources to both
control and physical processes and to interact with human users. For instance, consider future exploration
missions to the space or surface explorations in unknown areas. In these scenarios, it is critical that the
robot or human explorer is provided with reliable, fault-tolerant communication back to a central control
point, and also with navigation information, to allow the explorer to accurately track their progress, and
enable their return to identified features of interest. A robust, ad-hoc, combined communications and
navigation infrastructure, based on modular, self-powered, autonomous nodes, will be able to establish a
communication network and to measure physical characteristics of interest in energy-efficient operation.
The main advantage is the collaborative mapping of physical parameters for the exploration task.
Ad-hoc intelligent environments imposes two crucial challenges for communication and networking
design: (1) support for large numbers of self-configuring sensors, and (2) adaptivity to sensor tasking
and environmental dynamics. These environments present a difficult design problem since the sensors
may operate and response to dynamic environments without centralized control or a carefully planned
deployment. Moreover, human and environmental demands may also contribute to dynamics when what
is considered interesting alters. Therefore, ad-hoc intelligent environments must automatically adapt to
changes in the requirements of sensor tasking and environmental dynamics.
II. METHODOLOGY
A. Utility and Cost Model
In this subsection, utility and cost models [3] and techniques are introduced to find optimal assignments.
A utility function assigns a scalar value, or utility, to each data reading of a sensor, which is
U : I × T → R (1)
0 20 40 60 80 100
0
10
20
30
40
50
60
70
80
90
100
0 20 40 60 80 100
0
10
20
30
40
50
60
70
80
90
100
Fig. 1. The initial cluster formation of random networks of 100 (left) and 200 (right) sensors with R/` = 0.15 and R/` = 0.105,
respectively. A connection between a pair of distributed gateways is indicated by a dashed line.
range R to the side length ` = 100 of the square. The effect of mobility on the link down rate is examined
with varying transmission ranges. The various properties characterize the behavior of the links of mobile
sensors, which can be used as a basis for analyzing the performance bounds of the proposed SAMCA
protocol. Thus, the link dynamics may be used as an indicator of topology change and the distribution of
link available time can be used to examine the link stability in the network. Given the network density,
the transmission range RM, and the cluster formation parameters, Figure 2 illustrates the average number
of link down event Nout in a cluster (left) and the ratio of the average Nout to the average cluster size
(right) for varying the node speed, respectively. As expected, the average number of of link down event
Nout in a cluster increases with increasing the node mobility. Moreover, Figure 2 also implies that the
theoretical analysis and the simulation result match well and the characteristic of the link down event
can be roughly monitored and described by a function of the link lifetime distribution.
B. Asynchronous Two-Way Ranging
This section describes the Asynchronous Ranging via TH Precoding (ARTHP) technology to examine
the effect of multipath interference on ranging problems. The proposed method outlines one way to
estimate the distance using channel estimation and the notion of cooperation between pairs of wireless
sensors. For a pair of sensors, sensor A and sensor B, sensor A initiates communication by sending a
training sequence. Then, sensor B carries out a channel estimation based on maximizing the output of the
correlator. Based on channel estimation, sensor B generates a modified training sequence for correlating
with the training sequence sent from sensor A. Once sensor B detects the peak of the correlator output,
it triggers a time counter and initiates the TH precoding. After receiving the signal from sensor B, sensor
A stops the timer based on the performance of the correlator output and calculates the propagation time
tab. Thus, sensor B estimates the channel and applies the TH precoding using a training sequence sent
by sensor A, and allows A to accurately estimate the distance. The basic principle of the ARTHP method
is captured in Figure 3:
a. Sensor A sends training sequence s(t) for channel estimation and time synchronization in sensor
B.
b. Sensor B carries out a channel estimation based on maximizing the output of the correlator and
time synchronization using the time stamps of transmission and reception in sensors A and B.
3
Fig. 3. The ARTHP method: block diagram of a bidirectional communication and distance measurement system using channel
estimation and TH precoding.
with the parameters detailed in the caption and the clocks providing a resolution based on the symbol
rates of the training sequence, 1 Giga-symbol per second (Gsps) (i.e. 1 ns) and 10 Gsps (i.e. 0.1 ns),
respectively. Observe that as the distance dab = 30 m, the σab is about 6 cm with a timing resolution
0.1 ns. Note that an accurate clock with complicated hardware is required for distance estimation using
a higher symbol rate (higher timing resolution) though providing a higher measurement accuracy.
IV. PROJECT PUBLICATIONS
The following works are supported by the National Science Council under the grant No. NSC-96-
2221-E-005-011.
• Kai-Ting Chu, Chih-Yu Wen, Yen-Chieh Ouyang, and William A. Sethares, “Adaptive Distributed
Topology Control for Wireless Ad-Hoc Sensor Networks,” in Proceedings of the 2007 International
Conference on Sensor Technologies and Applications - SensorComm07, Valencia, Spain, October
2007. (EI)
• Chih-Yu Wen and Yu-Cheng Hsiao, “Decentralized Anchor-Free Localization for Wireless Ad-Hoc
Sensor Networks,” in Proc. of IEEE International Conference on Systems, Man, and Cybernetics,
Singapore, October 2008. (EI)
V. CONCLUSION
This project presents decentralized methods which simultaneously undertake synchronization and rang-
ing based on an asynchronous two-way TOA approach for wireless ad-hoc sensor networks. These
asynchronous and cooperative communication procedures may simplify the computational and circuitry
complexity of the ranging estimation in each sensor. In order to alleviate the multipath effect, Tomlinson-
Harashima precoding and UWB signaling are used for the distance measurement between pairs of
5
Adaptive Distributed Topology Control for Wireless
Ad-Hoc Sensor Networks
Kai-Ting Chu∗, Chih-Yu Wen∗, Yen-Chieh Ouyang∗, and William A. Sethares†
Abstract— This paper presents a decentralized clustering and
gateway selection algorithm for wireless ad-hoc sensor networks.
Each sensor uses a random waiting timer and local criteria
to determine whether to form a new cluster or to join a
current cluster and utilizes the messages transmitted during
hierarchical clustering to choose distributed gateways such that
communication for adjacent clusters and adaptive distributed
topology control can be achieved. The algorithm operates without
a centralized controller, it operates asynchronously, and does not
require that the location of the sensors be known a priori. A
performance analysis of the topology management and the energy
requirements of the algorithm are used to study the behaviors
of the proposed algorithm. The performance of the algorithm is
described analytically and via simulation.
I. INTRODUCTION
Without a robust infrastructure, sensors in an ad-hoc net-
work may be required to self-organize. Such sensor networks
are self-configuring distributed systems and, for reliability,
should also operate without centralized control. In addition,
because of the limited energy source, energy-efficiency is a
critical consideration.
There has been extensive research on the design and devel-
opment of energy efficient networking techniques. In [1], the
Low-Energy Adaptive Clustering Hierarchy (LEACH) utilizes
a randomized periodical rotation of clusterheads to balance the
energy load among the sensors. LEACH-C (Centralized) [2]
uses a centralized controller to select clusterheads. The main
drawbacks of this algorithm are nonautomatic clusterhead
selection and the requirement that the position of all sensors
must be known. LEACH’s stochastic algorithm is extended
in [3] with a deterministic clusterhead selection. Simulation
results demonstrate that an increase of network lifetime can be
achieved compared with the original LEACH protocol. The Ad
hoc Network Design Algorithm (ANDA) [4] maximizes the
network lifetime by determining the optimal cluster size and
the optimal assignment of sensors to clusterheads but requires
a priori knowledge of the number of clusterheads, number
of sensors in the network, and the location of all sensors.
The Weighted Clustering Algorithm (WCA) [5] considers the
number of neighbors, transmission power, mobility, and bat-
tery usage in choosing clusters. It limits the number of sensors
in a cluster so that clusterheads can handle the load without
degradation in performance. These clustering methods rely on
∗The Department of Electrical Engineering, Graduate Institute of Commu-
nication Engineering, National Chung Hsing University, Tai-Chung, Taiwan.
(email:cwen@dragon.nchu.edu.tw)
†The Department of Electrical and Computer Engineering,
University of Wisconsin-Madison, Madison, WI 53706, USA
(email:sethares@ece.wisc.edu)
synchronous clocking for the exchange of information among
sensors which typically limits these algorithms to smaller
networks [6]. In [7], the distributed topology control using
the cooperative communication (DTCC) algorithm is proposed
to provide a connected network topology with minimal total
energy consumption.
In order to provide reliable communication in wireless ad-
hoc networks, maintaining network connectivity is crucial [8]-
[15]. An implementation of the linked cluster architecture
may consider the following tasks: cluster formation, cluster
connectivity, and cluster reorganization. In order not to rely
on a central controller, clustering is carried out by adaptive
distributed control techniques via random waiting timers. To
this end, the Adaptive Distributed Topology Control Algo-
rithm (ADTCA) forms clusters and links in three phases: (I)
clusterhead selection; (II) gateway selection, and (III) cluster
reformation. In Phase I, clusterheads are selected and cluster
members are assigned. A decentralized algorithm [8] is used
to organize the network into clusters. Each sensor operates
independently, monitoring communication among its neigh-
bors. Based on the number of neighbors and a randomized
timer, each sensor either joins a nearby cluster, or else forms
a new cluster with itself as clusterhead. In Phase II, based on
bidirectional message exchanges and the cluster architecture,
sensors are selected as gateways in a fully distributed way.
Once the network topology is specified (as a hierarchical
collection of clusters and distributed gateways), maintenance
of the linked cluster architecture becomes an issue. In Phase
III, localized criterions governing cluster reformation are de-
scribed and illustrated via simulations.
This proposed self-configuration protocol is energy efficient,
scalable, and may extend the lifetime of the network. Several
aspects of this cluster-based topology control (such as the
time synchronization problem and efficient network routing)
are studied. A performance analysis and simplified models of
the algorithm are derived, and the results are compared to the
behavior of the algorithm in a number of settings.
II. THE ADAPTIVE DISTRIBUTED TOPOLOGY CONTROL
ALGORITHM (ADTCA)
This section describes a randomized distributed algorithm
that forms clusters and reselects clusterheads efficiently. The
network setup is performed in three phases: “clustering,”
“selecting gateways,” and “restructuring the clusters.” The
main assumptions on the network are that (a) the sensors are in
fixed but unknown locations, (b) all links between sensors are
bidirectional, and (c) all sensors have the same transmitting
TABLE I
DESCRIPTION OF GATEWAY SELECTION.
a) Based on the cluster formation in Phase I, each sensor broadcasts
its cluster ID information.
b) Initialize a vector of random waiting times WT (ni,k)ij , where
WT
(ni,k)
ij is the waiting time of sensor ni for cluster j at time step k.
c) Initialize a counter of sensor ni, C(ni)ij = 0, for gateway selection
in cluster i to cluster j.
d) If sensor ni receives a message from sensor mj .
(1) increase the counter
if ni is a clusterhead
C
(ni)
ij = C
(ni)
ij + 10β.
else
C
(ni)
ij = C
(ni)
ij + β.
end
where C(ni)ij is the counter of sensor ni for cluster j,
β = α(1− dnimj
R
) with a positive integer α,
dnimj is the distance between sensors ni and mj , and
R is the transmission range.
(2) decrease the waiting time
WT
(ni,k+1)
ij =WT
(ni,k)
ij − C(ni)ij .
e) Gateway check:
if WT (ni,k)ij = 0
(1) assign Gij = ni, and then
Gij broadcasts the gateway information to its neighbors.
(2) set C(xi)ij = 0 and stop the waiting timer for all neighboring
sensors xi in cluster i.
else
go to step d).
end
it transmits a message to start the reselection process. Each
cluster member then checks the energy constraint. As long
as the cluster member satisfies the constraint, it generates a
random waiting time:
WT
(k+1)
i = (1−
E
(k)
i
Emaxi
)N
c
i ·WT (k)i , (4)
which depends on the number of neighboring cluster members
N ci and the remaining energy level. The motivation for forming
subclusters is to provide a way to do multi-hop communication
within a cluster, which may be needed because sensors are no
more than 2 hops away from the initial clusterhead and sensors
may be up to 4 hops away from the new clusterhead. Hence,
sensors in a cluster may be further classified as: (1) subcluster
member, (2) subclusterhead, or (3) clusterhead. Subclusters
and subclusterheads are generated by applying this distributed
protocol to the cluster topology.
For real applications, it is possible that the clusterhead may
malfunction before broadcasting the reselection message. One
solution is that if a certain amount of time has passed with
no messages from the clusterhead, then all sensors begin their
timers and apply the algorithm. As a result, restructuring the
cluster formation of the network may be required when the
clusterhead malfunctions or when none of the cluster members
satisfy the energy constraint. In this case, it may necessary to
re-initialize the network into new clusters to help balance the
energy burden. Such reformation may also be useful in the
event that the network topology changes or the sensors move.
III. PERFORMANCE ANALYSIS
Because of the complexity of the ADTCA, it is difficult to
evaluate the algorithm directly other than via simulation. Since
the connectivity among sensors and the number of neighboring
sensors play important roles in the ADTCA, it is reasonable to
investigate the performance from the perspective of these para-
meters. The performance analysis of cluster formation (Phase
I) is derived in [8]. In this section, we abstract the behavior
of gateway selection (Phase II) protocol using two simplified
models which approximate the desired global behavior and
serve to analyze its performance.
A. The Density Model
The first simplified model is the Density Model which
is detailed in Table II. The basic idea of this model is to
suppose that the probability of sensor ni in cluster i of being
a distributed gateway to cluster j, p(ni)ij , is proportional to the
number of the neighboring sensors which belong to cluster j,
N
(ni)
ij . That is,
p
(ni)
ij ∝
N
(ni)
ij
Mj
, (5)
where Mj is the number of sensors in cluster j.
If sensor ni and its neighboring sensors are not already
chosen as a gateway to cluster j, then the sensor with the
largest p(ni)ij is chosen to be a gateway and it assigns proba-
bility 0 to its neighbors which have not yet become a gateway
to cluster j. Thus, a sensor becomes a gateway to cluster j
if it has the highest neighboring density among all sensors
which have not yet become gateways. After updating the
probability distribution of sensors, the procedure repeats until
all gateways are chosen. The rationale for this choice is that, if
the random waiting time of each sensor is long enough (in the
sense that each sensor is able to collect sufficient neighboring
information), then the model is likely to closely approximate
the behavior of Phase II in the ADTCA on any given ad-hoc
network. The close connection between the model and the
algorithm is explored via simulation.
B. The Distributed Randomized Model
Since a cluster is a small network, the behavior of the
algorithms may be analyzed (following our results in [8]) by
the Averaged Model to investigate and describe the clustering
behavior. Moreover, gateway selection is highly related to the
cluster formation such that distributed gateways can be applied
to connect adjacent clusters, which implies that the number
of gateways in a network may be induced by a probabilistic
model with the number of clusterheads and cluster-based
network topology.
1) Overview of The Averaged Model: The CAWT can be
modeled by a simplified averaging procedure. Assume that
a single clusterhead and an average number of neighboring
sensors E(k)[Ni] are removed during each iteration k. Assume
that each sensor will be removed with probability p(k)rm =
rk/mk, where rk is the number of sensors to be removed
and mk is the number of sensors remaining at iteration k.
where N (g)i is the number of the neighboring sensors for
sensor i during the procedure of gateway selection. Hence,
the average number of gateways Ng(avg) in a cluster is
Ng(avg) =
Ng
Nch
(11)
=
Ng
n
(dE[Ni]e+ 1). (12)
The relationship between the behavior of gateway selection
(Phase II) of the ADTCA and that of the Distributed Ran-
domized Model is shown experimentally in Section V.
IV. ENERGY CONSUMPTION ANALYSIS
This section analyzes the energy consumption of the
ADTCA when executing the three phases: clusterhead se-
lection, gateway selection, and cluster reorganization. The
total power requirements include both the power required
to transmit messages and the power required to receive (or
process) messages.
A. Phase I
The energy consumption of clusterhead selection assuming
homogenous sensors is examined. In the initialization phase,
each sensor broadcasts a Hello message to its neighboring
sensors. Therefore, the number of transmissions NTx is equal
to the number of sensors in the network, n, and the number
of receptions NRx is the sum of the neighboring sensors of
each sensor. That is,
NTx = n and NRx =
n∑
j=1
Nj . (13)
As a sensor, say sensor i, meets the conditions of being
a clusterhead, it broadcasts this and assigns cluster ID i to
its neighboring sensors. Its neighboring sensors then transmit
a signal to their neighbors to update cluster ID information.
During this clustering phase, (1+Ni) transmissions and (Ni+∑
j∈Ci Nj) receptions are executed, where Ci is the index set
of neighboring sensors of sensor i. This procedure is applied
to all clusterheads and their cluster members. Now let N cTx
and N cRx denote the number of transmissions and receptions
for all clusters, respectively. Hence,
N cTx =
∑
i∈I
(1 +Ni), (14)
N cRx =
∑
i∈I
(
∑
j∈Ci
Nj +Ni), (15)
where I is a index set of clusterheads. Therefore, the total
number of transmissions NT and the number of receptions
NR are
NT = NTx +N
c
Tx = n+
∑
i∈I
(1 +Ni), (16)
NR = NRx +N
c
Rx =
n∑
j=1
Nj +
∑
i∈I
(
∑
j∈Ci
Nj +Ni). (17)
Suppose that the energy needed to transmit is ET , which
depends on the transmitting range R, and the energy needed
to receive is ER. From (16) and (17), the total energy con-
sumption, Etotal, for cluster formation in the wireless sensor
network is
Etotal = NT · ET +NR · ER. (18)
Observe that the above analysis is suitable for any transmit-
ting range. However, overly small transmission ranges may
result in isolated clusters whereas overly large transmission
ranges may result in a single cluster. Therefore, in order to
optimize energy consumption and encourage linking between
clusters, it is sensible to consider the minimum transmission
power (or range R) which will result in a fully connected
network. The performance of the total energy consumption
of Phase I with different selections of R is examined via
simulation.
B. Phase II
The energy consumption for determining gateways is eval-
uated based on the description of Table I. Figure 2 shows The
possible determination of a gateway in a cluster. In order to
simplify the presentation, the main notations are introduced
as follows: let I denote the index set of clusterheads; let H
denote the index set of 1-hop cluster members in the network;
let Hi denote the index set of 1-hop cluster members of cluster
i (a subset of H); let M denote the index set of 2-hop cluster
members in the network; let Mi denote the index set of 2-
hop cluster members of cluster i (a subset of M); similarly, let
S be the index set of sensors neighboring with 2-hop cluster
members; let Si be the index set of sensors neighboring with
2-hop cluster members of cluster i (a subset of S); let G be
the index set of gateway nodes.
0 20 40 60 80 100
0
20
40
60
80
100
(a) Gateway (2−hop cluster member)
0 20 40 60 80 100
0
20
40
60
80
100
(b) Gateway (1−hop cluster member)
with a 2−hop cluster member
0 20 40 60 80 100
0
20
40
60
80
100
(c) Gateway (1−hop cluster member)
Gateway
Gateway
Gateway
Fig. 2. The possible determination of a gateway in a cluster: (a) a 2-hop
cluster member, (b) a 1-hop cluster member with a 2-hop member, and (3) a
1-hop cluster member.
When clusterheads broadcast messages to trigger the gate-
way selection procedure, the number of transmission NT1 and
reception NR1 can be expressed by
NT1 =
∑
i∈I
Ni +
∑
i∈I
∑
j∈Si
Nj (19)
0 10 20 30 40 50 60 70 80 90 100
0
10
20
30
40
50
60
70
80
90
100
0 10 20 30 40 50 60 70 80 90 100
0
10
20
30
40
50
60
70
80
90
100
Fig. 3. Gateway selection in a random network with 100 sensors: Phase II of
the ADTCA with R/l = 0.17 (top) and the Density Model with R/l = 0.17
(bottom).
sensors, and ratio of transmitting range R to the side length
l of the square, R/l, are investigated to provide a simulation-
based study of the ADTCA.
The first set of experiments in Figure 3 evaluates the
performance of the Density Model, which compares gateway
selection when using the Density Model and the operation of
Phase II. The outputs of the two methods are not identical
due to the randomness of the waiting timer. Nonetheless, both
clustering structures are qualitatively similar given the same
network settings, suggesting that the Density Model provides
a good approximation to Phase II of the ADTCA.
The second set of experiments compares the estimates of the
number of distributed gateways when applying the procedure
of Phase II, the Density Model, and the Distributed Random-
ized Model. In each method, the results of 200 typical runs are
merged. In order to compare the ADTCA and the simplified
models, Figure 4 shows the standard deviation of the mean
number of gateways. The plots vary the number of sensors n
and the transmission power R/l. Also shown in Figure 4 are
the confidence intervals for the mean number of gateways at
a 90% confidence level. The graphs suggest that the Density
Model approximates the ADTCA somewhat better than the
Distributed Randomized Model. This is reasonable because the
Density Model retains global connectivity information while
the Distributed Randomized Model uses only the average den-
sity information. Though the Density Model outperforms the
Distributed Randomized Model, these results provide evidence
that the Distributed Randomized Model provides a way to
roughly predict the performance of the ADTCA.
0 1 2 3 4
21
22
23
24
25
n = 100, R = 17.5
0 1 2 3 4
30
32
34
36
n = 150, R = 15.0
0 1 2 3 4
46
47
48
49
50
51
n = 200, R = 12.5
−500 0 500
0
0.01
0.02
0.03
n = 100, R = 17.5
−500 0 500
0
0.005
0.01
0.015
0.02
n = 150, R = 15.0
−500 0 500
0
0.005
0.01
0.015
n = 200, R = 12.5
ADTCA
ADTCA
ADTCA
Density Model
Density Model
Density Model
Distributed
Randomized
Model
Distributed
Randomized
Model
Distributed
Randomized
Model
Fig. 4. The number of gateways formed in a random network using the
(1) ADTCA, (2) Density Model, and (3) Distributed Randomized Model,
respectively, with varying R/l ratio. The right hand side shows the standard
deviation over 200 runs; the left hand side shows the confidence intervals at
the 90% level.
The third set of experiments considers the total energy
consumption of the ADTCA. Assume that the communication
channel is error-free. Since each sensor does not need to
retransmit any data, two transmissions are executed for clus-
terhead selection (Phase I), one for broadcasting the existence
and the other for assigning a cluster ID to its cluster mem-
bers or updating the cluster ID information of its neighbors.
Hence, the total number of transmissions is 2n. Under these
circumstances, sensor i will receive 2Ni messages. Then, the
total number of receptions is 2
∑n
i=1Ni. Figure 5 shows
the average number of receptions of random networks after
applying Phase I of the proposed algorithm. Figure 5 also
shows that the number of receptions tends to increase as the
ration R/l increases. This implies that energy consumption is
higher for the network with larger transmission power. This
can be attributed to the fact that larger transmission power
allows sensors to detect more neighbors, which increases the
number of receptions when assigning cluster ID or updating
cluster ID information. Therefore, in order to minimize energy
use and keep strong connectivity in the network, an appropriate
selection of the transmission range R is essential.
Figure 6 illustrates the average number of transmission and
reception in a cluster for executing gateway selection. Observe
that the operation of Phase II in the ADTCA may lead to a
minimal variation of the energy consumption with increased
network density, which may help to achieve balance the load
among the clusters.
For comparison, the same network topology and sensor
energy level are used to study the performance of the two
methods in Phase III during the first round. Let the threshold
level η be Emax/2. Samples from the distributions, Emax ·
U(0, 1) and Emax/2·(1+U(0, 1)) are assigned to clusterheads
REFERENCES
[1] W. R. Heinzelman, A. Chandrakasan and H. Balakrishnan, “Energy-
efficient communication protocol for wireless microsensor networks,”
in Proceedings of IEEE HICSS, January 2000.
[2] W. R. Heinzelman, A. Chandrakasan, H. Balakrishnan, “An application
specific protocol architecture for wireless microsensor network,” in
press: IEEE Transaction on Wireless Networking.
[3] M.J. Handy, M. Haase, D. Timmermann, “Low energy adaptive clus-
tering hierarchy with deterministic cluster-head selection,” 4th Interna-
tional Workshop on Mobile and Wireless Communications Network, pp.
9-11, September 2002.
[4] C.F. Chiasserini, I. Chlamtac, P. Monti and A. Nucci, “Energy efficient
design of wireless ad hoc networks,” in Proceedings of European
Wireless, February 2002.
[5] M. Chatterjee, S. K. Das, and D. Turgut, “WCA: A weighted clustering
algorithm for mobile ad hoc networks,” Journal of Cluster Computing,
Special issue on Mobile Ad hoc Networking, No. 5, pp. 193-204, 2002.
[6] J. Lundelius and N. Lynch, “An upper and lower bound for clock
synchronization.” Information and Control, Vol. 62 1984.
[7] M. Cardei, J. Wu, and S.-H. Yang, “Topology control in ad hoc wireless
networks using cooperative communication,” in IEEE Transactions on
Mobile Computing, vol. 5, no. 6, pp. 711-724, June 2006.
[8] C.-Y. Wen and W. A. Sethares, “Automatic decentralized clustering for
wireless sensor networks,” in EURASIP Journal on Wireless Communi-
cations and Networking, Volume 2005, Issue 5, pp. 686-697, December
2005.
[9] A.D. Amis, and R. Prakash, “Load-balancing clusters in wireless ad hoc
networks,” in Proceedings of ASSET 2000 , Richardson, Texas, March
2000.
[10] S. Basagni, “Distributed clustering for ad hoc networks,” in Proceedings
of International Symposium on Parallel Architectures, Algorithms and
Networks, pp. 310-315, June 1999.
[11] M.N. Halgamuge, S. M. Guru, and A. Jennings, “Energy efficient cluster
formation in wireless sensor networks,” 10th International Conference
on Telecommunications, vol.2, pp. 1571-1576, 2003.
[12] C. R. Lin and M. Gerla, “Adaptive clustering for mobile wireless
networks,” IEEE Journal on Selected Areas in Communication, Vol. 15
pp. 1265-1275, September 1997.
[13] A. B. McDonald, and T. Znati, “A mobility based framework for adaptive
clustering in wireless ad-hoc networks,” in IEEE Journal on Selected
Areas in Communications, Vol. 17, No. 8, pp. 1466-1487, Aug. 1999.
[14] L. Bao and J. J. Garcia-Luna-Aceves, “Topology management in ad hoc
networks,” in Proc. of MobiHoc’03, pp. 129-140, Maryland, June 2003.
[15] D. J. Baker, A. Ephremides, and J. A. Flynn, “The design and simulation
of a mobile radio network with distributed control,” in IEEE Journal on
Selected Areas in Communications, SAC-2(1): pp. 226-237, 1984.
[16] P. Billingsley, Probability and Measure, John-Wiley & Sons, Inc 1979.
[17] Paolo Santi, Douglas M. Blough, and Feodor Vainstein, “A probabilistic
analysis for the range assignment problem in ad hoc networks,” Pro-
ceedings of the 2nd ACM international symposium on Mobile ad hoc
networking and computing, pps: 212-220, 2001, Long Beach, CA.
[18] C.-Y. Wen, R. D. Morris, and W. A. Sethares, “Distance Estimation
Using Bidirectional Communications Without Synchronous Clocking,”
in IEEE Transactions on Signal Processing, vol. 55, no. 5, pp. 1927-
1939, May 2007.
2coordinate system. However, the computational burden of
these procedures is heavy and their communications overhead
is large.
There are several different refinement schemes that have
been proposed in the literature. [15] presents the collaborative
multilateration to enable ad-hoc deployed sensor nodes to
accurately estimate their locations by using known beacon
locations that are several hops away and distance measure-
ments to neighboring nodes. To prevent error accumulation
in the network, node locations are computed by setting up
and solving a global non-linear optimization problem. [10]
presents an approach called AHLoS (Ad-Hoc Localization
System) that enables sensor nodes to discover their locations
using a set distributed iterative algorithms. [16] proposes a
heuristic refinement approach to improve position estimates.
[17] proposes an iterative quality-based localization (IQL)
algorithm for location discovery. The IQL algorithm first de-
termines an initial position estimate, after which the Weighted
Least-Squares (WLS) algorithm is used iteratively to refine
the position. In the WLS algorithm the Gaussian distribution
is used to determine the reliability of measurements. [18]
attempts to find locations for the sensors which best fit the
set of all range measurements made in the network in a least-
mean-squares sense.
Though much research has studied the localization problem
with the emphasis on algorithms [5]-[24], very few works
focus on the fundamental performance limits of multihop
and GPS-free positioning. This paper outlines the technical
foundations of the localization techniques and presents the
tradeoffs in algorithm design.
III. DISTRIBUTED ANCHOR-FREE POSITIONING
ALGORITHM (DAPA)
This section describes a distributed algorithm that forms
a relative global coordinate system efficiently. The main
assumptions on the network are that (a) the sensors are in
fixed but unknown locations, (b) all links between sensors are
bidirectional, and (c) all sensors have the same transmitting
range. Observe that there is no base station or centralized
control to coordinate or supervise activities among sensors.
A. Phase I: Initial Local Position Estimation
When the estimation procedure starts in a cluster-based
network topology [4], a clusterhead called sensor 1 locates
itself at the origin (0, 0) and selects the left-hand or the right-
hand coordinate system as the local coordinate assignment.
Then sensor 1 detects its neighbors and deploys one of the
neighboring sensors, sensor 2, to the x-axis at (d12, 0) based
on the distance information d12. A third sensor is selected
to be sensor 3 which has connectivity to both sensors 1 and
sensor 2. Given the known positions of sensors 1 and 2 and
distance information, d13 and d23, sensor 3 can estimate its
own location to the responding coordinate system. Therefore,
sensors 1, 2 and 3 considered as a group form a basis for
this local coordinate system. The solvability of the network
localization problem is detailed in [25], which suggests that
if the three known sensors are no-three-in-line, the network
0 0.2 0.4 0.6 0.8 1
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
Fig. 1. Clusters are formed in a random network of 100 sensors with R/`
= 0.175, where R is the transmission range and ` is the side length of the
square (left); The estimation procedures of ad-hoc wireless sensor networks
in the two-dimensional space with sufficient connectivity. Sensor 1, 2 and 3
are considered as a group to form the basis for the local coordinate system.
Since there are two possible locations of sensor 3, either S3 or S
′
3, two related
local coordinate systems are formed due to the mirror property of the cluster
(right).
localization problem is solvable and the unknown position can
be determined in the two-dimensional space. Accordingly, all
other sensors which are within communication range of these
sensors can then estimate their positions with respect to this
local coordinate system. Similarly, as the cluster of known
sensors grows, the location of each of the unknown sensors
can be determined from three neighboring known sensors.
Thus, the sensor locations can be obtained by building a
local coordinate system from the clusterhead and applying
multilateration to enable ad-hoc deployed sensor nodes to
accurately estimate their locations by using known sensor
locations and neighboring distance measurements. Figure 1
shows an example of the cluster formation in a random
network of 100 sensors and the estimation procedures of ad-
hoc wireless sensor networks in the two-dimensional space
with sufficient connectivity.
Suppose that a sensor does not know its position but is able
to receive information from other sensors which are assumed
to have accurate position estimates. There are many ways
to ‘solve’ this sensor location problem. This section details
41) The Centralized Model: After running the particle filter
at each unknown sensor to obtain an estimated position, a
gradient algorithm may be used to adjust sensor locations. In
this approach, the clusterhead is elected as an accumulator
host. The location information and measured distance of
each cluster member is sent to the clusterhead to implement
this algorithm iteratively. Thus, the locations of the cluster
members are adjusted in each iteration. The adjustment vector
is
∆mk =
∑
`∈S
xmk − x`k
|xmk − x`k|
· (dm` − |xmk − x`k|) · α, (3)
where the sensor set S is the chosen sensors used to calculate
the adjustment vector and α is a convergence parameter (α
is less than 0.5). When the iteration converges (i.e. the value
of accuracy is less than a specified value), the clusterhead
terminates the iteration and informs each cluster member of its
‘new’ location. Accordingly, this is a communication intensive
solution. The steps of the algorithm are described in Table II.
TABLE II
THE GRADIENT ALGORITHM
1. Adjust sensor locations according to the distance constraints.
The location of the mth sensor, xmk , is adjusted in each
iteration.
xmk ← xmk +∆mk .
2. The adjustment vector ∆mk is
∆mk =
P
`∈S
xmk −x`k
|xm
k
−x`
k
| · (dm` − |xmk − x`k|) · α,
where the sensor set S is the chosen sensors used to calculate
the adjustment vector and α < 0.5 is a positive convergence
parameter.
3. The clusterhead calculates the accuracy, which is defined as
ech =
1
2
P
m∈N(i)
ch
P
j ∈Nm



|xmk − xjk| − dmj



,
where N(i)ch is the set of the cluster members of cluster i and
Nm is the set of neighboring sensors of sensor m.
4. Repeat Steps 1 and 2 until the value of accuracy is less than
a threshold. Then, the clusterhead informs each cluster
member of its ‘new’ location.
2) The Distributed Model: Because the particle filter looses
diversity in the samples for static models, the Metropolis-
Hastings (M-H) algorithm [27] may be used to generate new
samples and provide improved estimation accuracy. The basic
idea of the M-H algorithm is to simulate an ergodic Markov
chain whose samples are asymptotically distributed according
to the target probability distribution pi(·) and use a candidate
proposal distribution q(xk(i), ·) to select the candidate of the
current state independently with the acceptance probability
given by
α(xk(i), x
′
k(i)) = min
{
1,
pi(x
′
k(i))q(x
′
k(i), xk(i))
pi(xk(i))q(xk(i), x
′
k(i))
}
. (4)
Therefore, instead of using a centralized accumulator host
to adjust sensor locations, applying the Markov chain Monte
Carlo (MCMC) method on each estimated sensor right after
the location estimation allows estimation error and propagation
error to be reduced in a distributed way. Here we summarize
the M-H algorithm with the initial value x0(i) in Table III.
TABLE III
THE METROPOLIS-HASTINGS ALGORITHM
1. Set k = 0 and repeat for xk(i), i = 1, 2, . . . , N .
N is the number of samples.
2. Draw x′k(i) from the proposal density q(xk(i), ·).
3. Set u to a draw from a U(0, 1) distribution.
4. Acceptance probability:
α(xk(i), x
′
k(i)) = min

1,
pi(x
′
k(i))q(x
′
k(i),xk(i))
pi(xk(i))q(xk(i),x
′
k
(i))
ﬀ
,
where pi(·) is the target density from which samples
are desired.
5. If (u ≤ Acceptance Probability)
accept proposal and set xk+1(i) = x
′
k(i).
else
reject proposal and set xk+1(i) = xk(i).
end
6. Return the values {xk+1(1), xk+1(2), . . . , xk+1(N)}
and set k = k + 1.
C. Phase III: Relative Global Localization
This subsection shows how the geometrical and commu-
nication requirement changes when merging two coordinate
systems to a single one. At some point, as the position
estimation proceeds, the coverages of two coordinate systems
begin to overlap, at which time they may be merged together
into a single coordinate system. Eventually, all sensors have
been gathered into one coordinate system and the sensor
location problem is solved. If there are GPS (or other ab-
solute measures) available, then this coordinate system can
be referenced to standard measurements. If there are no GPS
available, then the coordinate system is relative.
1) The Information Flow: The information flow for achiev-
ing a global coordinate system in a sensor network is now
described. Table IV details the messages used to communicate
between sensors. The communication protocol starts when the
clusterhead sends a Localization signal to its cluster members
in order to establish a local coordinate system. When a sensor
has information to share, it can broadcast a Info signal to its
neighboring sensors. Based on the transmission and reception
of the Info signals, sensors disseminate and obtain preliminary
information such as estimates of position and distance between
nearby sensors. When a sensor has location information from
two coordinate systems, which means it is a shared border
sensor in two clusters, it sends a Merge signal that contains
information of its estimated positions from two clusters to its
neighboring sensors. After finishing the process of transmit-
ting and receiving the Merge signal, a shared border sensor
with the higher sensor ID is selected to calculate adjustment
information, the shifting vector
−→
dS and the rotation matrix
Rmerge (described in Subsection III-C.2), for reorienting the
coordinate system. Then it transmits an Adjust message that
contains adjustment information to the reoriented cluster in
order to convert the two coordinate systems into a single one,
this merging the two clusters into one.
2) Relative Global Coordinate System: Now we consider
two neighboring clusters generated from clusterheads A and
B. Denote the sensor which can communicate with more
than one cluster as a border sensor. If there are two border
sensors between cluster A and B, and if those two sensors
can communicate with each other, the two clusters can be
6As a result, the transformation errors are
errorp′′i
=
[
x
′′
i
y
′′
i
]
−
[
xi
yi
]
A
(17)
errorp′′j
=
[
x
′′
j
y
′′
j
]
−
[
xj
yj
]
A
. (18)
Given the transformation errors (10), (11), (17), and (18),
the boarder sensors may use a criterion with local preliminary
information such as neighboring connectivity to determine the
relationship between the coordinate systems of two clusters.
Considering the observations under the two hypotheses
H1 : Z1 = ||errorp′i ||+ ||errorp′j ||
H2 : Z2 = ||errorp′′i ||+ ||errorp′′j ||,
the decision rule for the registration process becomes
z1
H1
≶
H2
z2. (19)
Based on the decision rule, the boarder sensors are able to
compute the transformation errors for each case and to find the
desired adjustment information for reorienting the coordinate
system. Compared with the registration approaches in [13] and
[30], the computational complexity of the proposed method
is much lower since the calculation of these two techniques
is imposing and not easy to implement for wireless sensor
networks.
Once those calculations have been performed, sensor i
follows the communication protocol and transmits an Adjust
message to the sensors in the reoriented cluster in order to
update their coordinates so that two local coordinate systems
convert to a single one. This operation is applied repeatedly
until the global coordinate system is established. Figure 4
depicts the process of coordinate registration and how the co-
ordinate transformation is performed. To establish an absolute
coordinate system, the process can proceed identically to the
merging and adjusting of two clusters and follow the same
communication strategy with a minimum of three GPS sensors.
An example of the merging process is given in Section IV-C.
IV. SIMULATION AND NUMERICAL RESULTS
In order to assess the performance of the proposed method-
ology, the feasibility of the proposed schemes is examined via
simulation and numerical results.
A. Results of The Gradient Algorithm
Table V shows the scalability of the network and the
relationship between the number of sensors, n, and estimation
accuracy. Note that as the number of sensors increases, the
amount of propagation error also increases because of the
location estimation error. By using the Gradient Algorithm,
the location adjustment problem can be solved efficiently after
a few iterations. The performance of the algorithm is depicted
in Figure 5. However, the drawback is using a centralized
accumulator host to gather distance and position information
Fig. 4. The process of coordinate system registration. (a) The right-hand
coordinate hypothesis H1: cluster B is in the right-hand coordinate system;
(b) The left-hand coordinate hypothesis H2: cluster B is in the left-hand
coordinate system.
of each sensor such that it can adjust the estimated sensor
locations. The problem arises when some of the sensors can
not transmit the required information to the accumulator host
or the accumulator host malfunctions.
TABLE V
THE PERFORMANCE OF THE GRADIENT ALGORITHM
Number of Sensors 10 20 30
Number of Samples 10,000 10,000 10,000
Adjustment Parameter α 0.05 0.05 0.05
Accuracy Formula 10−5 9.7 · 10−5 5.3 · 10−4
Iteration Number 200 200 200
B. Results of The Metropolis-Hastings Algorithm
In our simulations, two proposal densities for the Markov
Chain Monte Carlo (MCMC) method are chosen. Proposal
density I is a normal distribution centered around the current
state estimate, N (xk, σ2ε1). Proposal density II is the sum of
all the current samples and noise. The distribution of the noise
8−0.5 0 0.5 1 1.5
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
Sensor 1
Sensor 2
Cluster B
Cluster A
−0.5 0 0.5 1 1.5
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
 Sensor 1   
in cluster B  Sensor 1   
in cluster A
Sensor positions of cluster B in 
the coordinate system of sensor A
Sensor positions of cluster B in 
the coordinate system of sensor B
Sensor positions of cluster A in 
the coordinate system of sensor A
Fig. 8. The global coordinate system of cluster A and cluster B (left); The
local coordinate systems of cluster A and cluster B and the shifting direction
of cluster B (right).
−0.5 0 0.5 1 1.5
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
The "Shift" step
 Sensor 1 
in cluster A
 Sensor 2 
in cluster A
 Sensor 2 in the 
shifted cluster B
−0.5 0 0.5 1 1.5
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
The "Rotation" step
Fig. 9. The shifted cluster B and the rotation angle θmerge (left); The
positions of the sensors in the reoriented cluster match the corresponding
positions in the coordinate system of sensor A using the rotation matrix
Rmerge (right).
clusters can be merged to establish a single global coordinate
system without GPS sensors using only distance information.
In order to adjust the sensor positions, the Gradient Algo-
rithm and MCMC steps are applied to reduce the estimation
error such that the propagation error can be suppressed.
Furthermore, the same basic approach can also solve the
tracking problem in which the decentralized sensors combine
their information to produce improved estimates of the target
location. Therefore, one of the strengths of the approach is that
(essentially) the same algorithm can be used to track slowly
moving targets with unknown positions.
REFERENCES
[1] A. Doucet, N de Freitas and N. Gordon, eds., Sequential Monte Carlo
Methods in Practice, Springer-Verlag 2001.
[2] N. J. Gordon, D .J. Salmond and A. F. M. Smith, “Novel approach to
nonlinear/non-Gaussian Bayesian state estimation,” IEEE Proceedings-
F, 140(2): 107-113, April 1993.
[3] T. Kitasuka, T. Nakanishi, and A. Fukuda, “Location Estimation System
using Wireless Ad-Hoc Network,” The 5th International Symposium on
Wireless Personal Multimedia Communications, Volume 1, Page(s): 305-
309, Oct. 2002.
[4] C.-Y. Wen and W. A. Sethares, “Automatic decentralized clustering for
wireless sensor networks,” in EURASIP Journal on Wireless Communi-
cations and Networking, Volume 2005, Issue 5, pp. 686-697.
[5] P. Bahl and V. N. Padmanabhan, “RADAR: An in-building RF based
user location and tracking system,” Proceedings of IEEE INFOCOM,
pp. 775-784, Tel Aviv, Israel, March, 2000.
[6] N. Bulusu, J. Heidemann, and D. Estrin, “GPS-less Low-Cost Outdoor
Localization for Very Small Devices”, IEEE Personal Communications,
vol. 7, no. 5, pp. 28-34, October 2000.
[7] D. Niculescu and B. Nath, “Ad hoc positioning system (APS),” Proceed-
ings of IEEE GLOBECOM, pp. 2926-2931, San Antonio, TX, November
2001.
[8] N. B. Priyantha, A. Chakraborty and H. Balakrishnan, “The cricket
location-support system,” Proceedings of ACM MOBICOM, pp 32-43,
Boston, MA, August 2000.
[9] C. Savarese, J. M. Rabaey, J. Beutel, “Locating in Distributed Ad-Hoc
Wireless Sensor Networks”, Proceedings of ICASSP, pp. 2037-2040,
Salt Lake City, UT, May 2001.
[10] A. Savvides, C-C Han, and M. B. Srivastava, “Dynamic fine-grained
localization in ad-hoc networks of sensors,” ACM SIGMOBILE, pp. 166-
179, Rome, Italy, July 2001.
[11] L. Doherty, K. Pister, L. El Ghaoui, “Convex Position Estimation in
Wireless Sensor Networks,” Proceeding IEEE Infocom 2001, April 2001.
[12] J. Werb and C. Lanzl, “Designing a positioning system for finding things
and people indoors,” IEEE Spectrum, Septemper 1998.
[13] S. Capkun, M. Hamdi, J.-P. Hubaux, “GPS-free positioning in mobile
Ad-Hoc networks”, Proceedings of the 34th Hawaii International Con-
ference on System Sciences, pp. 3481-3490, Maui, HW, January 2001.
[14] R. Iyengar and B. Sikdar, “Scalable and Distributed GPS free Positioning
for Sensor Networks,” IEEE International Conference on Communica-
tions, Volume 1, Page(s): 338-342, May 2003.
[15] A. Savvides, H. Park, and M. Srivastava, “The bits and flops of the N-
hop multilateration primitive for node localization problems,” in Proc.
ACM Int. Workshop Wireless Sensor Networks and Applications (WSNA),
Atlanta, GA, Sep. 2002, pp. 112-121.
[16] C. Savarese, J. Rabay and K. Langendoen, “Robust Positioning Al-
gorithms for Distributed Ad-Hoc Wireless Sensor Networks,” USENIX
Technical Annual Conference, Monterey, CA, June 2002”
[17] W. Bach, D. Dam, L. Evers, M. Jonker, H. Scholten, and P. Havinga, “An
Iterative Quality-Based Localization Algorithm for Ad Hoc Networks,”
Proceedings of the International Conference on Pervasive Computing,
August 2002, pp. 5561.
[18] K. Chintalapudi, A. Dhariwal, et al., “Ad-hoc localization using ranging
and sectoring,” - INFOCOM 2004 Twenty-third Annual Joint Conference
of the IEEE Computer and Communications Societies, pp. 2662-2672,
April, 2003.
[19] A. Savvides, M. Srivastava, L. Girod, and D. Estrin, “Localization in
sensor networks,” in C. R. Raghavendra, K. M. Sivalingam, and T. Znati,
ed. Wireless Sensor Networks, Kluwer Academic Publishers, 2004.
[20] R. Iyengar and B. Sikdar, “Scalable and Distributed GPS free Positioning
for Sensor Networks,” IEEE International Conference on Communica-
tions, Volume: 1, Pages:338-342, 2003.
[21] H. Wang, J. Elson, L. Girod, D. Estrin, K. Yao, and L. Vanderberge,
“Target Classification and Localization in Habitat Monitoring,” in IEEE
Proceedings of the International Conference on Speech and Signal
Processing, pp. II-597-II-600, April, 2003.
[22] A. H. Sayed, A. Tarighat, and N. Khajehnouri, “Network-Based Wireless
Location,” IEEE Signal Processing Magazine, Vol. 22, No. 4, pp. 24-40,
July 2005.
[23] Y. Shang, J. Meng, and H. Shi, “A New Algorithm for Relative
Localization in Wireless Sensor Networks,” Proceedings of the 18th
International Parallel and Distributed Processing Symposium 2004.
[24] F. Gustafsson and F. Gunnarsson, “Mobile Positioning using Wirelsss
Networks,” IEEE Signal Processing Magazine, Vol. 22, No. 4, pp. 41-53,
July 2005.
[25] Aspnes et al., “A theory of network localization,” in IEEE Transaction
on Mobile Computing, vol. 5, no. 12, pp. 1663-1678, December 2006.
[26] C.-Y. Wen, R. D. Morris, and W. A. Sethares, “Distance Estimation
Using Bidirectional Communications Without Synchronous Clocking,”
in IEEE Transactions on Signal Processing, vol. 55, no. 5, Part I, pp.
1927-1939, May 2007.
[27] S. Chib and E. Greenberg, “Understanding the Metropolis-Hastings
algorithm,” The American Statistician 49: 327-335, 1995.
[28] K.-T. Chu, C.-Y. Wen, Y.-C. Ouyang, and W. A. Sethares, “Adaptive
Distributed Topology Control for Wireless Ad-Hoc Sensor Networks,”
in Proceedings of the 2007 International Conference on Sensor Tech-
nologies and Applications - SensorComm07, Valencia, Spain, October
2007.
[29] J. Bachrach and C. Taylor, “Localization in sensor networks,” in
Handbooks of Sensor Networks: Algorithms and Architectures, Ivan
Stojmenovic, editor, John Wiley & Sons, New Jersey, 2005.
[30] B. K. P. Horn, H. Hilden, and S. Negahdaripour, “Closed-form solution
of absolute orientation using orthonormal matrices,” in Journal of the
Optical Society of America A, 5(7), 1988.
[31] Roberts, G.O., Gelman, A., and Gilks, W.R., “Weak convergence and
optimal scaling of random walk metropolis algorithms,” Technical
Report, University of Cambridge, 1994.
