 
中 文 摘 要 ： 本計畫之主要研究方向為以自動機進行靜態字串分析，以此
方法進行原碼檢測。偵測網頁應用程式可能招受的惡意攻擊
點與計算可能的惡意輸入，從而自動產生除錯的程式碼以預
防攻擊。我們採用正規驗證，相對於傳統的黑箱測試，我們
可以保證其除錯後的正確性但也增加偵錯分析的複雜度。在
這份報告中我們先講述自動機的字串分析技術並提出新的除
錯碼生成技術，接著提出字串抽象技術，其可顯著的減少計
算與記憶體需求從而進行更有效率的偵錯分析。最後結合行
動與視覺化技術，實現所提技術於一新的雲端網站應用程式
除錯服務。本研究之成果已發表于 ICSE, SPIN, HICSS 等國
際會議與 FMSD 和 IJFCS 二 SCI 期刊. 
中文關鍵詞： 字串分析, 自動機, 正規驗證, 資訊安全, 網路應用程式分
析, 跨腳本攻擊 
英 文 摘 要 ： Verifying string manipulating programs is a crucial 
problem for computer security. String operations are 
used extensively within web applications to 
manipulate user input, and their erroneous use is the 
most common cause of security vulnerabilities in web 
applications.  Unfortunately, verifying string 
manipulating programs is a difficult problem that has 
an inherent tension between practical efficiency and 
useful precision. We investigate a set of automata-
based string analysis techniques with sound 
abstractions for strings and string operations that 
allow for both efficient and precise verification of 
string manipulating programs. The project contributes 
in three folds. First, we propose forward and 
backward symbolic reachability analysis for detecting 
and patching string vulnerabilities in Web 
applications. Second, we investigate string 
abastrction techniques to adjuct precision and 
efficiency on regular model checking of realtional 
string analysis. Third, we realize the presented 
approach in a new online service for detecting, 
viewing and patching Web application vulnerabilities.
英文關鍵詞： automata, symbolic string analysis, web application 
security, patch synthesis, abstraction, verification 
 
 Content Index 
 
Abstract 
I. Introduction 
II. Automata-based Vulnerability Detection Techniques 
III. Patch Synthesis Techniques 
IV. String Abstraction Techniques 
V. The Patcher Service 
VI. Conclusion 
VII. References  
  
Symbolic String Verfication: Automatic Vulnerability Detection and Patch Synthesis 
of Web Application Vulnerabilities 
 
Fang Yu  
Software Security Lab 
Department of Management Information Systems 
National Chengchi University 
 
I. Introduction 
Software defects in web applications can result in compromised security.  Malicious users who 
successfully leverage software vulnerabilities can cause damage both at the server and the client side 
leading to catastrophic failures. Viewing web application vulnerabilities as a secure information flow 
problem, we proposed taint analysis [HYHTLK04a, HYHTLK04b] (the U.S. patent [HYHTLK11]), to 
detect such vulnerabilities without taking string contents into account. Taint analysis is a scalable 
technique for detecting vulnerabilities but suffers from poor precision, generating a large amount of false 
positives. Additionally, taint analysis is not capable of assessing the correctness of sanitization 
routines/filters that are inserted by developers to prevent attacks. In fact, taint analysis techniques can 
incorrectly report that an application using inadequate sanitization is not vulnerable, leading to unsound 
results. During my PhD study, I proposed symbolic string verification to analyze string manipulating 
programs (Web applications). We developed a sound automata-based approach based on symbolic string 
analysis [YBCI08][YAB09]. String analysis is a static analysis technique that determines the values that a 
string expression can take during program execution at a given program point. This information can be 
used to verify that string values are sanitized properly and to detect and prevent security vulnerabilities 
such as SQL Injections and Cross-Site Scripting (the top two vulnerabilities of Web Applications in 
OWASP Top 10 2007, 2010 and 2013). During my PhD study, we have also proposed the composite 
analysis [YBI09] to verify string and interger programs, and realize the string analysis approach in the 
tool Stranger [YAB10] to detect vulnerabilities in web applicaiotns. 
 
Funded by this NSC project (99-2218-E-004-002-MY3, 2010.11-2013.7), I have worked on automatic 
patch synthesis [YAB11], string abstraction [YBH11], relational string analysis [YBI11], and the 
develpoment of online service with vulnerability visualization [YY14]. The recent journal publication in 
FMSD [YABI13] gives detailed alogorithms on string analysis with theoretical proofs, as well as 
intensive experiments on large-scale (350000+ lines of code) applications.  
 
Particularly, in our ICSE paper [YAB11] (ICSE is listed as the top one conference in software 
engineering in all years by Microsoft academic search), we presented a set of techniques that (1) identify 
vulnerabilities that are due to string manipulation, (2) generate a characterization of inputs that can 
exploit the vulnerability, and (3) generate sanitization statements that eliminate the vulnerability 
approach. We construct sanitization statements that check if a given input matches the vulnerability 
signature and modify the input in a minimal way so that the modified input does not match the 
vulnerability signature. Our approach is capable of generating relational vulnerability signatures (and 
 1) Cross Site Scripting (XSS), 2) Injection Flaws (such as SQL Injection) and 3) Malicious File 
Execution (MFE). Even after it has been widely reported that web applications suffer from these 
vulnerabilities, the top two of the vulnerabilities were still listed in the top three of the OWASP's top ten 
list in 2010 and 2013. That is to say, in the past decade, even with the increased awareness about their 
importance due to OWAPS reports, these vulnerabilities continued to be widely spread in modern web 
applications, causing great damage.  
 
A XSS vulnerability results from the application inserting part of the user's input in the next HTML page 
that it renders. Once the attacker convinces a victim to click on a URL that contains malicious 
HTML/JavaScript code, the user's browser will then display HTML and execute JavaScript that can result 
in stealing of browser cookies and other sensitive data. An SQL Injection vulnerability, on the other hand, 
results from the application's use of user input in constructing database statements. The attacker can 
invoke the application with a malicious input that is part of an SQL command that the application 
executes. This permits the attacker to damage or get unauthorized access to data stored in a database. 
Finally, MFE vulnerabilities occur if developers directly use or concatenate potentially hostile input with 
file or stream functions, or improperly trust input files. 
 
One important observation is, all these vulnerabilities are caused by improper string manipulation.  
Programs that propagate and use malicious user inputs without sanitization or with improper sanitization 
are vulnerable to these well-known attacks. In this project, we focus on vulnerabilities related to string 
manipulation, and we propose a string analysis technique that identifies if a web application is vulnerable 
to the types of attacks we discussed above. 
 
Attacks that exploit the vulnerabilities related to string manipulation can be characterized as attack 
patterns, i.e., regular expressions that specify potential attack strings for sensitive operations (called sinks). 
Given an application and an attack pattern, our vulnerability analysis identifies if there are any input 
values that a user can provide to the application that could lead to an attack string to be passed to a 
sensitive operation. We use automata-based string analysis techniques for vulnerability analysis. Our tool 
takes an attack pattern specified as a regular expression and a PHP program as input and identifies if there 
is any vulnerability with respect to the given attack pattern. 
 
Our string analysis framework uses deterministic finite automaton (DFA) to represent values that string 
expressions can take. At each program point, each string variable is associated with a DFA. To determine 
if a program has any vulnerabilities, we use a symbolic forward reachability analysis that computes an 
over-approximation of all possible values that string variables can take at each program point.  
Intersecting the results of the forward analysis with the attack pattern gives us the potential attack strings 
if the program is vulnerable. 
 
The string analysis technique we present is a symbolic forward reachability computation that uses DFAs 
as a symbolic representation. Furthermore, we use the symbolic DFA representation provided by the 
MONA DFA library, in which transition relations of the DFAs are represented as Multi-terminal Binary 
Decision Diagrams (MBDDs). We iteratively compute an over approximation of the least fixpoint that 
 belonging to the same equivalence class identified by certain conditions. This widening operator was 
originally proposed for automata representation of arithmetic constraints but the intuition behind it is 
applicable to any symbolic fixpoint computation that uses automata. 
 
We implemented our approach in a tool called Stranger (STRing AutomatoN GEneratoR) that analyzes 
PHP programs. Stranger takes a PHP program as input and automatically analyzes it and outputs the 
possible XSS, SQL Injection, or MFE vulnerabilities in the program. For each input that leads to a 
vulnerability, it also outputs an automaton (in the dot format) that characterizes all possible string values 
for this sink which may exploit the vulnerability. Stranger uses the front-end of Pixy, a vulnerability 
analysis tool for PHP that is based on taint analysis [JKK06]. Stranger also uses the automata package of 
MONA to store the automata constructed during string analysis symbolically. We used Stranger to 
analyze public web applications downloaded from sourceforge including one with 350,000+ lines of code. 
Our results demonstrate that our tool not only detects vulnerabilities in vulnerable Web applications, but 
also proves the correctness of sanitization routines in secure Web applications. 
 
Contribution:  
In this research direction we extend the regular model checking techniques to verification of string 
manipulation operations in PHP programs. The results of this part have been published in the journal 
paper of Formal Methods in System Design [YABI13]. Our key contributions include: 
1. an automatic automata-based approach for detecting or proving the absence of vulnerabilities in string 
manipulating programs,  
2. a new algorithm to language-based replacement that can be used to model commonly used sanitization 
routines in Web applications,  
3. a new forward reachability analysis with automata widening to accelerate/guarantee termination of 
fixpoint computation on strings 
4. a new tool that implements our string analysis techniques, combined with a PHP front end and string 
manipulation library built on MONA. 
5. an experimental study on XSS vulnerability checking against public and large-size Web applications. 
 
III Patch Synthesis  
As we have mentioned, Web applications are notorious for security vulnerabilities that can be exploited 
by malicious users, and due to global accessibility of web applications, malicious users all around the 
world can exploit a vulnerable web application and cause serious damage. So, it is critical that 
vulnerabilities are not only discovered fast, but they are also repaired fast.  
 
In our ICSE paper [YAB11], we extend vulnerability detection to patch synthesis, presenting 
automata-based string analysis techniques for automatically detecting and patching string related 
vulnerabilities in web applications. We start with a set of attack patterns (regular expressions) that 
characterize possible attacks (either taken from an attack pattern specification library or written by the 
web application developer). Given an attack pattern, our string analysis approach works in three phases: 
 
Phase 1: Vulnerability Analysis: 
 inputs that can exploit the vulnerability. 
 
Once we generate the vulnerability signature we generate match and replace statements based on the 
vulnerability signature. The match statement basically simulates the vulnerability signature automaton 
and reports a match if the input string is accepted by the automaton. In the match-and-block strategy this 
is all we need, and we halt the execution if there is a match. In the match-and-sanitize strategy, however, 
we also generate a replace statement that will modify the input so that it does not match the vulnerability 
signature. Since inputs that match the vulnerability signature may come from normal, non-malicious users 
(who, for example, may have accidentally typed a suspicious character), it is preferable to change the 
input in a minimal way. We present an automata theoretic characterization of this minimality and show 
that solving it precisely is intractable. We show that we can generate a replace statement which is close to 
optimal in practice by adopting a polynomial-time min-cut algorithm. We implemented all the techniques 
mentioned above for PHP programs on top of Stranger [YAB10] and report our results in [YAB11] 
against several open source applications.  
 
Contribution 
In sum, most critical security vulnerabilities in web applications are caused by inadequate manipulation of 
input strings. The contribution of this work consists of the following: 
1. We identify severe vulnerabilities in Web applications that are due to string manipulation 
2. We generate a characterization of inputs that can exploit the vulnerability 
3. We generate sanitization statements that eliminate the vulnerability  
 
In our earlier work, we have used single-track DFA based symbolic reachability analysis to verify the 
correctness of string sanitization operations in PHP programs [YBCI08, YAB10]. Our preliminary results 
on generating (non-relational) vulnerability signatures using single-track DFA were reported earlier 
[YAB09]. We have also reported our results on foundations of string analysis using multi-track automata 
[YBI11]. These earlier results do not address the sanitization synthesis problem we discuss in this 
direction.  Moreover, to the best of our knowledge this is the first paper that presents a relational 
vulnerability signature (i.e., a vulnerability signature that involves more than one input) generation 
technique for strings.There has been previous work on automatically generating filters for blocking bad 
inputs [CCZ07]. Although this is similar to our match-and-block strategy, there are several significant 
differences with our work. First, earlier work [CCZ07] focuses on buffer-overflow vulnerabilities which 
are different than the string vulnerabilities we investigate here. Second, in earlier work [CCZ07] the 
generation of filters is done starting with an existing exploit, whereas we start with an attack pattern. 
Finally, unlike prior results, in this paper, we generate sanitization statements that repair bad inputs using 
the  match-and-sanitize strategy. We also give an automata-theoretic characterization of the 
match-and-sanitize strategy, prove that generating optimum modifications is an intractable problem, and 
present a heuristic approach based on a min-cut algorithm. 
 
IV. String Abstraction  
To deal with large scale applications, it is needed to have some light weight analysis. To resolve string 
properties, we focus on a relational string analysis that can be used to verify string manipulation 
 them as a single multi-track automata. For those that are not related, we use multiple single-track 
automata to encode their values, where relations among them are abstracted away. We further define an 
abstraction lattice that combines these abstractions under one framework and show that earlier results on   
string analysis can be mapped to several points in this abstraction lattice. We also extend our symbolic 
analysis technique by presenting algorithms for computing the post condition of complex string 
manipulation operations such as replacement.   
 
Both alphabet and relation abstractions form abstraction lattices which allow different levels of 
abstraction. Combining these abstractions leads to a product lattice where each point in this lattice 
corresponds to the combination of a particular alphabet abstraction with a particular relation abstraction.  
This creates an even larger set of Galois connections, one for each possible combination of alphabet and 
relation abstractions. Furthermore, we can select any abstraction class in the product lattice during our 
analysis.  The selected abstraction class $(\chi, \gs)$ determines the precision and efficiency of our 
analysis.  If we select the abstraction class $(\chi_\bot, \gs_\bot)$, we conduct our most precise 
relational string analysis.  The relations among $\overline{X}$ will be kept using one $n$-track DFA at 
each program point.  If we select $(\chi_\top, \gs_\top)$, we only keep track of the {\it length} of each 
string variable individually.  Although we abstract away almost all string relations and contents in this 
case, this kind of path-sensitive (w.r.t length conditions on a single variable) size analysis can be used to 
detect buffer overflow vulnerabilities [DRS03, WFBA00]. If we select $(\chi_\bot, \gs_\top)$, then we 
will be conducting relational size analysis.  Finally, earlier string analysis techniques that use DFA, such 
as [YBCI08], correspond to the abstraction class $(\chi_\top, \gs_\bot)$, where multiple single-track 
DFAs are used to encode reachable states. As shown in [YBCI08,YAB09], this type of analysis is useful 
for detecting XSS and SQLCI vulnerabilities. 
 
 
Figure 1. Some abstractions from the abstraction lattice and corresponding analyses 
 
Figure 1 summarizes the different types of abstractions that can be obtained using our abstraction 
framework. The alphabet and relation abstractions can be seen as two knobs that determine the level of 
the precision of our string analysis.  The alphabet abstraction knob determines how much of the string 
content is abstracted away.  In the limit, the only information left about the string values is their lengths. 
On the other hand, the relation abstraction knob determines which set of variables should be analyzed in 
relation to each other. In the limit, all values are projected to individual variables.  Different abstraction 
classes can be useful in different cases.   
 
( ȤŎ , ıŎ )
( ȤŎ , ıŏ )( Ȥŏ , ıŎ )
( Ȥŏ , ıŏ )
size 
analysis
relational
size analysis
string 
analysis
relational
string analysis
.  .  . 
 vulnerabilities. We incorporate the service with presented string analysis techniques. The service provides 
public users not only to check whether a web application is vulnerable to the types of attacks we 
discussed above, but also to generate the corresponding patches that ensure the applications free from 
malicious exploits of identified vulnerabilities. Users can access and upload their code to check potential 
vulnerabilities. Users can also insert patches that are automatically generated to prevent malicious 
exploits of their programs. While deploying new web services, it is essential to build the confidence on 
their security mechanisms. To the best of our knowledge, this is the first public online service that secures 
web applications using formal verification techniques. Another feature of Patcher is a user-friendly 
interface that aims at improving users’ comprehension on where the program vulnerabilities are and how 
they get exploited and patched. Particularly, we develop an interactive 3D interface/presentation for users 
to access and view the risk status of their applications and vulnerabilities. The service provides users a 
clear view of vulnerabilities of target applications and a quick fix to reduce their risks.  
 
The architecture of Patcher is shown in Figure 2. Patcher can automatically analyze PHP programs from 
end-to-end without user interventions. We have also provided the web version of Patcher so that users can 
directly upload their code and view the results through the web pages. One can first write the script or 
upload a local file to Patcher. Patcher analyzes the script, detects potential vulnerability in the program, 
and generates its patches as the sanitization statement(s) with proper positions to insert. Developers can 
also upload a compressed file of the whole application as a package. Patcher will check all the execution 
entries of PHP scripts in the application automatically, and report and synthesize all vulnerabilities and 
their sanitization statements. Figure 2 also shows the front end of Patcher that includes an app for mobile 
devices, a web site for the web service, and a display device for 3D graphic visualization. 
 
Figure 2. The architecture of Patcher 
 vulnerability, users can insert the corresponding patch code at the identified line to sanitize user inputs. 
 
Our main purpose of the design of Patcher is to enhance the comprehension about the vulnerability and 
the program execution of applications or files. We represent the result analysis in six levels as proposed in 
[Pacione 04]; each level provides analysis result of applications in different aspects.  
 
• Level 0: In this code level representation, the source code and lines related to a specific vulnerability 
is presented. Users can insert the generated patches to prevent malicious exploits of vulnerabilities.   
• Level 1: In this exploit execution level representation, the simulation of a potential exploit on the 
dependency graph is provided. Users can traverse how tainted data flows from user inputs to sensitive 
functions. 
• Level 2: In the vulnerability structure level representation, an interactive dependency graph is 
presented with sink nodes, function nodes, and input nodes in different shapes. Users can check the 
dependency graph as a whole to reason the structure of the vulnerability. 
• Level 3: In the file level representation, a list of vulnerabilities in a file is represented along with a 
brief summary on how many vulnerabilities exist for each kind. Each vulnerability also has a brief 
description on the variable, the sink location, the input location(s), etc. System developers can figure 
out what vulnerabilties exist in this file. 
• Level 4: In the application level representation, a bee comb is used to show the risk status from the 
entire view of an application. Users can realize the security status overall by viewing the bee comb 
and choose most dangerous files to patch. A list of files with a brief summary on total number of 
vulnerabilities is also presented. 
• Level 5: In the user level presentation, a list of applications that have been uploaded by the same user 
is presented along with a brief summary of status of each application. 
 
Information in a large-scale view (higher level) gives users a clear view about high level components and 
the architecture. Information in a small-scale view that provides users detailed information from specific 
aspects. Our visualization tool provides browsing facilities to answer users’ questions that are generally 
broad at beginning and then narrow down to specific issues. That is to say, users check the vulnerable file 
in applications when vulnerability is reported and then drill down to examine the source code to reveal 
how the vulnerability is raised. Program visualization also requests data from various sources to display 
different views as the dimension changes. It improves the comprehension to provide information from 
different platforms. 
 
Finally, to evaluate our platform, we have uploaded various open source Web applications to Patcher. 
Table 1 summarizes the analysis results. There are ten applications that contain 3000+ files in total. 
2800+ out of 3000+ PHP scripts have been analyzed successfully under 4000 seconds (1.3 second per file 
on average).  The success rate is about 95%. Within these applications, Patcher reveals 2823 
vulnerabilities. Most of them are previously unknown. The complete list can be found at 
http://soslab.nccu.edu.tw/patcher. 
  
  
VII. References  
 
[YT14] Fang Yu and Yi-Yang Tung. “Patcher: A New Online Service for Detecting, Viewing 
and Patching Web Application Vulnerabilities.” Accepted by the 47th Hawaii 
International Conference on System Sciences (HICSS 47). Big Island, U.S., Jan. 2014 
[YABI13] Fang Yu, Muath Alkhalaf, Tevfik Bultan, Oscar H. Ibarra. “Automata-based Symbolic 
String Analysis for Vulnerability Detection.” International Journal of Formal Methods 
in System Design, pp. 1-27, September 2013.  
[HYHTLK11] Yao-Wen Huang, Fang Yu, Christian Hang, Chung-Hung Tsai, Der-Tsai Lee, Sy-Yen 
Kuo. “System and Method for Securing Web Application Code and Verifying 
Correctness of Software.” US Patent 7,779,399. Published in August 2011. 
[YBI11] Fang Yu, Tevfik Bultan, Oscar H. Ibarra. “Relational String Verification Using 
Multi-track Automata.” International Journal of Foundations of Computer Science 22 
(8), pp. 1909-1924, 2011.  
[YBH11] Fang Yu, Tevfik Bultan, Ben Hardkopf. “String Abstractions for String Verification.” 
In Proceedings of the 18th International SPIN Workshop on Software Model Checking 
(SPIN 2011), Snowbird, Utah, U.S., July 2011. 
[YAB11] Fang Yu, Muath Alkhalaf, Tevfik Bultan. “Patching Vulnerabilities with Sanitization 
Synthesis.” In Proceedings of the 33th International Conference on Software 
Engineering (ICSE 2011), Honolulu, U.S., May 2011. 
[YAB10] Fang Yu, Muath Alkhalaf, Tevfik Bultan. “Stranger: An Automata-based String 
Analysis Tool for PHP.” Tool paper. In Proceedings of the 16th International 
Conference on Tools and Algorithms for the Construction and Analysis of Systems 
(TACAS 2010), Paphos, Cyprus, March 2010. 
[YAB09] Fang Yu, Muath Alkhalaf, Tevfik Bultan. “Generating Vulnerability Signatures for 
String Manipulating Programs Using Automata-based Forward and Backward 
Symbolic Analyses.” Short paper. In Proceedings of the 24th IEEE/ACM International 
Conference on Automated Software Engineering (ASE 2009), Auckland, NZ, 
November 2009. 
[YBI09] Fang Yu, Tevfik Bultan, and Oscar H. Ibarra. "Symbolic String Verification: 
Combining String Analysis and Size Analysis," In Proceedings of the 15th 
International Conference on Tools and Algorithms for the Construction and Analysis 
of Systems (TACAS 2009), York, U.K., March 2009. 
[YBCI08] Fang Yu, Tevfik Bultan, Marco Cova, Oscar H. Ibarra. "Symbolic String Verification: 
An Automata-based Approach," In Proceedings of the 15th International SPIN 
Workshop on Model Checking of Software (SPIN 2008), Los Angeles, CA, August 
2008.  
[HYHTLK04b] Yao-Wen Huang, Fang Yu, Christian Hang, Chung-Hung Tsai, Der-Tsai Lee, Sy-Yen 
Kuo. "Verifying Web Applications Using Bounded Model Checking." In Proceedings 
of the 2004 International Conference on Dependable Systems and Networks (DSN 
2004), pages 199-208, Florence, Italy, Jun 28-Jul 1, 2004. 
 
1 
國科會補助專題研究計畫項下出席國際學術會議心得報
告  
                               日期：2012年 11月 30日 
                                 
 
 
 
 
 
 
計畫編號 NSC 99-2218-E-004-002-MY3 
計畫名稱 
符號式字串驗證:對網路應用程式自動化弱點掃描與補正的正規方
法研究與工具開發 
出國人員姓名 郁方 服務機構及職稱 
國立政治大學資訊管理學系 
助理教授 
會議時間 2012/11/17至2012/11/20 會議地點 美國舊金山 
會議名稱 The 2012 Annual Meeting of Decision Sciences Institute (DSI)  
發表論文題目 The Dual Approach for Decision Support 
B
y 
By Fang Yu 
 Nov. 30, 2012 
 Department of Management 
Information Systems 
 National Chengchi University 
 
3 
pinpointing their potential fraud behaviors for further investigation.  
 
 
 
Talks 
Most decision making is superficial. I was surprised to hear the comment in the 
first keynote. In Prof. Liker’s keynote speech, he mentioned the famous book 
thinking fast and slow, and discussed the following two different systems. 
Sys1-Fast thinking: jump to conclusions and react to immediate associations, and 
Sys2- Slow thinking: take time to reflect and collect more information if needed. 
Toyota maintains a disciplined approach to developing slow thinking. Capable 
people and teams can be aligned to strategy, which is the key point for becoming a 
learning organization. On the other hand, he suggested us that “don’t jump to 
solutions when you don’t fully understand the question.” When you understand the 
question, jump and discover ideas. 
 
In the Monday morning session, researchers discuss more depth in the study of 
supply relationship. The theme is how to connect supply chains to those in the 
informal economy. The idea is to explore creative methods to improve efficiencies 
in emerging market supply chain activities, particularly for sustainable operation. 
There are also other concerns: moral and ethic considerations, sustainability 
idiosyncrasies, and mix of evaluative judgments, and legitimacy judgment 
outcomes. As for an innovation internalization process, it is rather important to 
discover a model, its management process, and its judgment process. 
 1 
  
出國報告（出國類別：會議論文發表） 
 
 
 
 
IEEE 2013 世界服務大會出國報告 
IEEE 2013 World Congress on Services 
The 9 th International Conference on Service Computing and The 2nd 
International Conference on Mobile Services 
Joint with International Conference on Cloud Computing/ 
International Conference on Web Services/International Conference 
on Big Data 
 
 
 
                      
服務機關：資訊管理系 
姓名職稱：郁方 助理教授 
派赴國家：美國 
出國期間：June 25-July 3 
報告日期：August 25 
  
 3 
 
本人首場發表的論文主題在多媒體串流服務的數量分析，尤針對雲端服務的線上
遊戲頻道與影音頻道以排隊理論為基礎推導出服務品質與資源配置的關係
公式, 透過模擬的方式呈現多個顧客滿意度指標作為系統開發者與決策者
設置系統的依據。本次演講獲得參與者廣大回響,尤對我們引用 80 年代的立
論至當今的雲端服務印象深刻。回餽意見如傳輸偏移的分佈也將納入作為日
後修改期刊論文的參考。本文是發表在服務計算國際會議的研究論文。 
 
 5 
 
 
會後與會者有諸多討論. 歷屆 IEEE Service Society 的主席進行合影。 
感想與建議 
本次與系上資深教授蔡老師同行,收獲頗豐。同住期間有多次對研究領域密集的
討論交換意見，對日後撰寫論文有顯著助益。會議期間也遇到多位不論是資
深或新進的研究學者, 也能對各個不同領域的研究有所涉獵。尤其與同是台
灣來的黃老師討論多媒體加解密的問題,對本人在故宮影音頻道的運用與資
安技術研發有所啓發。 
國科會補助計畫衍生研發成果推廣資料表
日期:2013/10/30
國科會補助計畫
計畫名稱: 符號式字串驗證:對網路應用程式自動化弱點掃描與補正的正規方法研究與工
具開發
計畫主持人: 郁方
計畫編號: 99-2218-E-004-002-MY3 學門領域: 程式語言與軟體工程
無研發成果推廣資料
已獲得件數 0 0 100%  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
