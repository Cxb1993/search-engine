 Optimal Design and Implementation of an H.264 Real Time Decoder on the 
Asymmetric Dual-Core Platform 
 
Chia-Ying Tseng, Kang-Yuan Liu, and Shieh-Jie Hsu 
Dept. of Computer Science and Engineering, Tatung University, Taipei, Taiwan ROC 
cytseng@ ttu.edu.tw 
 
 
Abstract 
Due to heavy computational requirements of 
multimedia communication tasks in the trend, the 
specific processors are needed in many consumer 
electronic products. These application processors 
often apply a dual-core (a RISC core plus a DSP core) 
design to increase the performance of multimedia 
processing. This paper presents the optimal 
partitioning techniques and results of implementing 
the H.264/AVC baseline profile decoder in software 
on the TI-OMAP 5910 platform. It has been 
implemented in ANSI C and optimized to exploit the 
architectural features of the dual-core processor. The 
software implementation enables the reusability of 
the processor and lowers the development costs. 
Keywords : real time decoder, asymmetric dual-core, 
embedded systems, H.264 decoder 
 
1. Introduction 
 
As the wireless industry movexs into a new era of 
differentiated services, developers are increasingly 
choosing Texas Instruments’ (TI) OMAP platform for 
innovative 2.5G and 3G wireless applications. OMAP 
uses specific dual-core architecture, combining 
control-based ARM core and high-performance, 
low-power consumption DSP core. OMAP is an open, 
programmable DSP-based architecture. The major 
goal is applied 2.5G and 3G mobile phone, audio and 
multimedia application using in PDA. 
Joint Video Team (JVT) has developed a new 
video coding standard called H.264/AVC (MPEG-4 
Part 10) that provides better compression than the 
earlier standards such as MPEG-4 and H.263. H.264 
is a recent video coding standard that makes use of 
several advanced video coding tools to provide better 
compression performance than existing video coding 
standards such as MPEG-2, MPEG-4, and H.263 [1]. 
The H.264 is focused on compression and 
transmission efficiency, and also used to popular 
consumer electronic market such as video conference, 
portable media player, etc. The H.264 provides 
several profiles to fit any condition of applications. 
This paper is organized as follows. The scheme of 
TI OMAP 5910 platform is presented in section II. 
An implementation of JM 10.0 decoder is described 
in section III. Experimental results and analysis are 
conducted in section IV. Finally, some discussions are 
given in section V. 
 
2. Background 
 
The OMAP hardware platform consists of DSP 
core, ARM core, and Traffic Controller. These three 
parts can apply time manager and control power 
consumption efficiency independently. The OMAP 
hardware platform uses dual technology to enhance 
operation system’s efficiency and optimize execution 
of multimedia codes. DSP run real-time task such as 
real-time video conference, and ARM run non 
real-time task and system control job such as 
operation system interface communication. For 
example, user can process video conference and 
operate system application software such as WORD, 
EXCEL simultaneously. The advantage of using DSP 
which is low-power consumption and has more data 
processing ability and ARM which has more control 
ability separately; comparing with traditional mobile 
client using ARM or DSP chip, OMAP treatment the 
best ratio of performance and consumption 
successfully. 
The advantages of dual-cores are the C55x DSP 
architecture achieves high performance and low 
power through increased parallelism and total focus 
on reduction in power dissipation. C55x is focus on 
target applications. The benefits of the dual-core 
architecture provide a high-computing TMS320C55x 
DSP core and a high-integrateTI925T ARM core. 
C55x has the image and video hardware extension 
can enhance some functions such as DCT/IDCT, 
Pixel Interpolation, and Motion Estimation. 
The OMAP software platform builds on two 
operating systems. One is base on ARM operating 
system such as WinCE, the other is base on DSP 
real-time operating system. DSP/BIOS Bridge is the 
key issue to connect two operating systems 
seamlessly. The connection made by DSP/BIOS 
Bridge let users on ARM client exchange information 
and date to DSP’s task. For software developers, 
DSP/BIOS Bridge apply a seamless interface to use 
standard coding interface and control DSP running 
environment on General purpose processor (GPP). 
Developing programs on OMAP usually divide 
two sides, one is ARM side, and the other is DSP side. 
For designing algorithm is compatible with xDAIS 
(eXpressDSP algorithm standard), the API functions 
●  nodeCreate()
●  nodeExecute()
●  nodeD elete()
●  Create Task
●  Create ARM  task object
●  task.init()
●  task.start()
●  task.suspend()
●  task.resum e()
●  task.kill()
Node
create
execute
delete
Resource
M anagement
Server
DSPARM
Task goal
OS
Resource 
managem ent
 
 
Figure 2. OMAP software model 
 
   We configure the H.264 reference code to process 
in the OMAP software model as shown in Fig 2. We 
then profile the application with the GNU “gprof” 
toolset. Next, we analyze the longest executing 
functions in the profile to determine which function 
code to be accelerated. The final step involves 
rewriting the application program where we 
reorganize the source code with the partitioning  
ARM code and DSP code. 
 
4. Implementation and Experiment 
 
We implemented an open source JM 10.0 
reference H.264 decoder for development. This 
application runs on a OMAP 5910 board which 
mainly consists of a 150 MHz ARM925 (TI925) and 
a 150 MHz TMS320C55x (C55x) DSP.  Figure 3 
shows the system block diagram. 
We have foreman scenes using H.264/AVE test 
model software JM10.0 applying a single QP for each 
test namely QP = 20, 24, 26, 28, 30 at frame rate 30 
fps without using any rate control algorithm. And we 
generated a software binary by compiling the H.264 
decoder using “gcc” ported to the ARM with the 
highest level of software optimizations (-O3).  
 
OS
code
Application
code
Input
stream
I-cache D-cache
OS code MC, Entropy coding, etc.
ARM925
Frame
buffer
TMS320C55x
 
Figure 3. H.264 Decoder system 
 
The relationship between the ideal speedup and 
the number of functions implemented in DSP is 
shown in Figure 4. The ideal speedup begins to 
increase very rapidly after 22 functions are 
implemented in DSP, which corresponds to 
approximately 68% of execution time. The figure 
shows how the actual speedup increases as more 
functions are implemented in DSP core. The overall 
application speedup from partitioning was 1.95 when 
the 22 most frequent regions were implemented in 
ideal hardware. And the C-level partitioning achieved 
a significantly larger speedup to 1.69. 
0
0.5
1
1.5
2
2.5
3
3.5
1 3 5 7 9 11 13 15 17 19 21
Number of Functions in DSP
Sp
ee
du
p
Ideal Speedup Speedup with DSP
 
Figure 4. Speedup when implementing 
multiple functions in DSP 
 
For the C-level partitioning, the main limitation 
of speedup was memory bandwidth. Many of the 
functions implemented in DSP core contained 
parallelizable loops. However, the synthesis tools 
could not take advantage of this parallelism because 
the DSP core had to wait for the data needed by the 
loops to be fetched from memory. Our synthesis tools 
fetch data for the DSP core by copying the data from 
main memory into multiple memories in the common 
shared memory, as early as dependencies allow. 
However, much of the data needed by these loops is 
passed to a function as a pointer. If other pointers are 
passed into the function, local alias analysis is unable 
to determine if copying the data to common shared 
memories will violate the dependencies of the 
original code. Global alias analysis may allow for 
