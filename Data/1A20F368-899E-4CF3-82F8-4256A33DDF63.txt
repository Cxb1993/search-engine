計畫中文摘要 
 
關鍵詞： 人工智慧、電腦象棋、棋局盤面資料庫，資訊檢索、數位內容 
 
1997 年深藍戰勝了人類西洋棋冠軍，是人工智慧的重要里程碑。電腦象棋由於
複雜度與西洋棋接近，被視為下一個目標。但是進展卻沒有想像中的順利，因為象
棋複雜度較高，在接近高段水準時，專家知識的運用將更為重要，但目前的象棋程
式只有在開局時能夠運用棋譜中的知識，中盤及殘局階段幾乎無法利用專家知識。 
要讓象棋程式可以充分利用專家知識，最重要的工具就是象棋棋譜資訊檢索技
術，能夠在大量的專家棋譜中進行資訊檢索，才能利用其中的專家知識。我們在 94
年國科會計畫象棋棋譜資訊檢索技術之研究(I)中將完成循序式的棋型檢索方法，這
可作為本計劃第一年研究如何建立索引以加速搜尋的基礎，第一年的成果可幫助在
棋譜資料庫中找到包含特定棋型的棋局。但象棋高手思考、討論及學習的過程是建
立在抽象棋型如馬後砲、悶殺和吊子等。能夠解決抽象棋型查詢的問題，才能夠以
資料探勘技術進行程式與象棋專家知識的結合，這是第二年的研究課題。 
本計劃內容符合資訊工程(二)學門重點規劃主題中的內容服務及科技化服務致
能核心技術等重點研究主題。進行計畫時將開發出關於資訊檢索，搜尋演算法及資
料庫知識探索的方法，預計將有三篇以上的相關論文發表。本系統完成後，可以建
立與象棋相關的數位內容，並且可幫助象棋程式的發展，可以幫助我們的象棋程式
挑戰人類高段棋士，在人工智慧電腦對局的發展上將有重大意義，這也將是本計畫
主要貢獻。 
行政院國家科學委員會專題研究計畫成果報告 
 
象棋棋譜資訊檢索技術之研究 
 
計畫編號：95-2221-E-259-028-MY2 
 
執行期限：  95 年 08 月 01 日至 97 年 07 月 31 日 
 
計畫主持人：顏士淨 
 
計畫參與人員：丘世元、蘇粲程、姜智傑、廖展逸、曾氏炫 
 
執行機構及單位名稱 
國立東華大學資訊工程系與研究所 
 
 
一、前言 
 
人工智慧自英國的計算機之父，A.Turing，提出計算理論、人工智慧理論後； Claude 
Shannon，將電腦科學上提出了二個有名的目標：1.電腦應用至下棋，2.老鼠走迷宮。經幾十
年的演變改進，至今這個傳統的目標依舊持續，各自成了一門專門領域「電腦對局 - 棋類競
賽」、「晶片控制 - 機械鼠走迷宮」，及公開競賽的指定項目。 
人腦與電腦的競爭，於 1997 年 3 月 11 日開始，長達數個月的比賽，最後由名為深藍(Deep 
Blue)的電腦在西洋棋公開比賽中正式打敗人類棋王 Kasparov 後，電腦對局的發光發熱達到第
一次的頂峰。之後除了西洋棋外，複雜度比西洋棋還高的中國象棋、將棋、圍棋、六子棋等，
也成為了電腦要打敗人類棋王的新目標。 [Yen et. al. 2004]。 
電腦象棋由於其複雜度與西洋棋最為接近，因此被視為電腦對局的下一個最主要目標。
但是其進展卻沒有想像中的順利，自 2000 年以來，電腦象棋的棋力還停留在六七段的水準，
離人類最強棋士，還有一段距離。其原因除了硬體速度發展趨緩之外，最主要原因是象棋複
雜度較高，在接近高段水準時，專家知識的運用將更為重要，目前的象棋程式只有在開局時
能夠充分運用棋譜中的專家知識，中盤及殘局階段幾乎無法利用專家知識，而一個象棋高手，
可以以大量的專家知識為思考的基礎進行跳躍式思考，這些專家知識都是象棋發展千年來研
究的成果，這也是目前只倚賴窮舉搜尋的下程式無法戰勝人類高手的最主要原因。[Yen et. al. 
2004] 
棋類名稱 log10(
E) 
log10(
A) 
與人類最強
棋士比較 
Checkers 17 32 Chinook>H
Othello 30 58 Logistello>H
9×9 Go 40 85 <H 
Chess 50 123 Deep 
Blue>=H 
Chinese 
Chess 
48 150 ELP<H 
15×15 
Go-moku
100 80 weak solved
19×19 Go 160 400 <<H 
表 1. 七種代表性棋類複雜度比較 
象棋程式遇到瓶頸的主要原因如下： 
一、象棋程式的搜尋所造成的資料量(稱為 node)很大，邏輯思考的步數(稱為搜尋深度)  
也需很多，目前與職業高段棋士對奕來說，多敗於思考的邏輯步數不夠多而誤判，或著落入
陷井中，導致失敗。由於要邁向勝利之路，搜尋深度必須達到 20 多層(即 20 多步)，以硬體
速度增加三倍約莫增加一層搜尋深度而言，無疑是硬體上的大瓶頸。 
二、在軟體程式方面，縱然有許多的理論及技術可作為依據來實作，然而要達到像人類
思考模式的下棋方法尚有不足，例如：陷阱的佈置、棄子攻殺的方法、及審局的觀念等，皆
為目前程式設計上遭遇的問題。以許舜欽教授開發的電腦知識庫而言，就是記錄了古代棋士
及現代大師們的對戰棋譜，來補足上述問題。雖如此，此種方法目前只能加強在開局和殘局
二方面，作出最大貢獻，而中局的攻殺方式，仍期待更好的程式設計方法來克服。 
以上的二點即為目前的問題所在，也正是我們發展本系統主要的原因。 
本計劃的內容符合資訊工程(二)學門重點規劃主題中的內容服務和科技化服務致能技術
之資訊搜尋、融合、擷取與管理，計畫的成果不僅可以幫助研發出棋力高強的電腦象棋程式，
應用於電腦遊戲上，而其中所開發出的棋譜資訊搜尋、融合、擷取與管理，也可應用在數位
棋藝博物館的建立等。 
完成此計畫有以下貢獻：下棋為一種公認高智慧的行為，而電腦象棋被認為是對局遊戲
中，困難度高且被發展到有很高水準表現的棋類之一，因此我們以資訊技術的方法來解決這
個問題，在人工智慧領域上，有相當大意義。而這個系統將可以幫助象棋程式的靜態評估函
數更為準確，唯有善用千百年來象棋的專家知識，才有可能到達人類特級大師的水準。這個
系統將可以幫助以資料探勘的方式，自大量的棋譜中找出特定棋型與著手之間的關係與序
儲存，常以多個屬性描述一個實體或物件，而多媒體資料庫則為涵義豐富的媒體，內容無法
單純以多個屬性將其描述.在資料展示上，傳統資料庫多為文字及表單，多媒體資料庫則需要
更豐富的視覺聽覺之展示。 
資料量大，媒體的特徵多，容易造成管理上的困難.因此在多媒體資料庫中建立一個有效
率的索引方法顯的更加重要，以下為多媒體資料庫面臨的挑戰。 [Dunckley, 2003]  
z 大量資料之處理多媒體資料所需之儲存空間比一般資料大得多 
z 多維資料之索引快速的搜尋技巧 
z 相似度之計算容錯式的查詢 
z 資料之展示 
 
因為資料量大，逐筆搜尋比對將耗費過多的時間，而避免逐筆比對搜尋的方式，就是對
資料建立索引加快查詢。所以第二項，也是這次計畫中，我們主要的課題之一。 
索引可視為一種分類的指標，依據索引的指示，即可找到與查詢相關的資料.以下為幾種
傳統資料庫中常見的索引結構 
–B+-tree  
•最廣為使用的索引結構 
–Hash 
•Static hashing 
•Dynamic hashing 
–Grid file 
–Bitmap index 
 
然而 B-tree， B+-tree–僅能對單一維度的資料做索引，不適用於多維度資料，如何對多
維度資料建立索引加速查詢，對多媒體資料的搜尋十分重要。 
3.2 建立索引必須(可用)的象棋專家知識 
 
音樂資料庫研究是多媒體資料庫研究中的一環，目前音樂資料庫相關的研究議題大多集
中在音樂特性的擷取與音樂檢索方面。在音樂擷取的研究中，幾乎都集中在如何從音樂資料
中擷取有意義的旋律，即主旋律(key melody)，來提升音樂資料檢索的效率.另外在音樂檢索方
面，則利用音樂資料的特徵萃取(feature extraction) 例如:旋律(melody)，節拍(rhythm)，合弦
以上提到的索引結構，都有可能被使用於棋譜盤面索引，(我們目前初步的想法，就是類
似 index tree 的索引方式)但仍有一些問題是必須克服的。迴圈節點便是一個顯而易見的問
題。會形成迴圈節點的原因是重複的盤面一再出現，一種可能的解決方法是:標記最後一組迴
圈重複的盤面，這些被標記的盤面，在索引樹的後續子節點內將不會再被考慮。 
3.4 本索引方法的最佳搜尋(檢索)方式．並提出效能測試結果 
 
系統初步完成後，我們將視索引結構，設計最適合的檢索”方式”.舉例來說，我們的索引
架構是以許多盤面上的特徵當作索引值，所以我們在檢索時必須先找出現在的盤面有多少”
特徵”在裡面.因此，我們可以將特徵加上尋找的”優先權”，從出現機率比較大，或是比較具鑑
別性的特徵優先尋找(這兩個數值，將視系統最後的情形而定) 然後，再利用一些效能評量的
方法，來分析系統效能。 
考慮資料庫檢索的效能時，我們會考慮以下幾點：資料庫大小和平均比較次數，藉由比
較不同檢索方法在資料庫變大時平均搜尋次數的變化，來分析它們的效能。比較不同索引結
構再資料庫大小相同時的平均磁碟存取次數，來分析它們的效能。 
 
3.4.1 系統實作，利用棋譜的資料結構，來做查尋的方法 
  
 目前棋譜的資料結構，可以分為棋譜名稱查尋、盤面狀態查尋二種，這二種的記錄
方式，用不同的方法，一起找出棋形的關鍵特徵，以求準確性。我們首先考慮棋譜名稱查尋，
及盤面查尋設計，每個棋譜都有其代表敘述，來描述這譜棋局是如何開局，以及大致走法，
透過語言的描述，讓我們在未進行讀入棋形棋步時，心中已有個棋譜開局的模樣，這是一種
抽象化的表現。 
 舉個例子來說，要找尋順手炮、屏風馬、橫車過宮、右炮過河等抽象棋形，會發現
這些用語是屬於象棋的專有名詞，目的是把棋形製作成有意義的形式儲存下來。以上是有意
義名詞查尋的想法，如表 2。 
 棋譜的領域中，有很多是有這種棋形出現，卻沒有相對應的名詞去形容它，當這種
狀況出現時，如表 3，就必需用另一種方式來解決這種問題。 
 
 
表 4. 用俥擋 7 路馬出動 
 
 以上圖來說，這種棋形非常易見，卻沒有專有名詞來形容，因此我們採用盤面比對，
找出這一組馬俥的棋形，方法如下。 
 
3.4.3 盤面查尋的資料結構 
 
 使用一組二維陣列，來記錄橫列、直行的棋譜資訊，因此馬在第三橫列，俥在第七
直行，表示如下。 
 
ChessYaxis[2]= ”0ch000h0c” 
ChessYaxis[3]= ”p000p0R0p” 
由上而下橫的十列，由陣列 0~9 表示。 
 
ChessXaxis[6]= ”e0hR0P0H0E” 
由左而右直的九行，由陣列 0~8 表示。 
因此定位出馬、俥位置各為 
 
ChessPos[6][2]= ”h”Æ馬的位置 
ChessPos[6][3]= ”R”Æ俥的位置 
在第二年中，我們藉由己建立好的棋譜資料庫，進行抽象棋形的查尋，研究方法及成果
如下： 
 
3.5 象棋程式中所需要的抽象棋型及抽象棋型的表示方式 
 
棋型本身並沒有抽象之分，"抽象"棋形的意思是指"專門用語"所指的棋形，如：馬(傌)後
包(炮)、臥槽馬(傌)等。因此在建立棋譜將盤面資訊儲存的同時，針對專有名詞的部份給予取
出記錄，以便後來有利於名稱查找。 
 如何在建立棋譜時就將專有名詞記錄？最有公信力的方式就是取得編製過的棋譜
書，好處有幾點： 
 
一、棋譜的資訊都有詳加記載，像是對局者、時間、地點、開局方式、優劣評判，在棋局的
簡介上都會有相關說明。 
二、棋局主要著手上出現的相關變化，有額外的解說，有助於了解關鍵著手的想法和建立。 
三、專有名詞等用語出現在解說過程中，更具有可讀性與方便學習。 
 
 在名稱設計上，分二個方向取得專有名詞：一個是開局名稱的設計，透過開局用語
很容易將關鍵字找出來，如「中炮過河炮邊傌對屏風馬高車捉炮」，可以看成「中炮」、「過河
炮」、「邊傌」、「屏風馬」、「高車捉炮」這幾個名詞；另一個是透過棋評的解說取得，如「卒
林線」、「打串」等。 
 僅管可以透過上述二個方向取得專有名詞來認識棋形，但仍有許多的棋形是沒有專
有名詞述敘它，因此在名稱上無法找出關聯的棋形，就必須直接用棋形比對來達到目的，如
圖 1。 
 
     
   圖 1：專有名詞與無專有名詞的棋形概念圖 
 
在此的名稱設計，是將上述書籍的開局棋譜名稱"類別"、"詳述"分析成為棋形專有名詞的
棋譜 
無專有名詞 
有專有
名詞 
3.6 抽象棋型的搜尋方法與建立索引以增加抽象棋型的搜尋速度 
 
盤面儲存方面用得是二維陣列來儲存，主要是利用 X 軸、Y 軸的資訊記錄來找出盤面的
位置比對。以圖 3 為例： 
 
                
    圖 3：找出以三路俥壓 7 路馬的盤面資訊 
  
用一組二維陣列記錄橫列、直行的棋盤資訊，因此要查尋的「三路俥與 7 路馬」，就會如
下記錄： 
 
帥 仕 相 俥 傌 炮 兵 將 士 象 車 馬 包 卒 
K A E R H C P k a e r h c p 
 
表 6：棋子子力代號 
 
橫列資訊：ChessYaxis[2]= "0ch000h0c"；ChessYaxis[3]="p000p0R0p"  
直行資訊：ChessXaxis[6]="e0hR0P0H0E" 
馬的位置：ChessPos[6][2]="h"；俥的位置：ChessPos[6][3]="R" 
橫列盤面資訊(B_YState)= ChessYaxis[0]+…+ChessYaxis[9] 
直行盤面資訊(B_XState)= ChessXaxis[0]+…+ChessXaxis[8] 
利用最直觀的記錄方式保留 X，Y 軸的資訊，以方便接下來的比對動作。 
 
3.7 建立、處理及轉換象棋棋譜資料庫知識探索所需的資料集 
 
棋形的比對方式，主要以"名稱比對"及"盤面比對"二個方向來架構。名稱比對是針對有專
有名詞的棋形來考量，像是「當頭炮」、「屏風馬」等都是這類的代表，因此幾乎可以透過已
建置完成的開局資料庫，找出這類專有名詞；而許多沒有專有名詞表示的棋形，就直接用盤
面比對去找出一樣盤面資訊的棋形，一但找到相同的盤面資訊，就可以透過棋譜資訊找出它
的關聯。示意圖如表 7： 
 
 
表 7：棋形比對流程示意圖 
 
在棋形比對過程中，先判斷是否有"專有名詞"可以查尋，如上段話述敘，若是有查到就
可以快速地找出相關棋譜，若是沒有就進行盤面比對。這時會把所有存入的棋譜比對過一遍，
一但有比對中則將此棋形給予"棋盤特徵名稱"，如圖 5：三路俥壓 7 路馬，然後回存到棋形資
料庫。如果還是沒有比對中，則選擇是否要"非精確比對"，這個方式就會有誤差產生。 
在盤面比對中，無論是"精確比對"或"非精確比對"，第一步都要先把要比對的棋形做分
析，給予權重值來決定比對的順序，做法如下列步驟：以圖 5 為例： 
開始 
是 
否 
棋形查尋 
 
 棋形資料庫 正確？ 
否 
盤面比對 
是
 找出相關棋譜
正確？ 
是
否
 更新棋形資料庫 
 回報使用者 
再次查尋？ 
否
結束 
是
線段 0 1 2 3 4 5 6 7 8 9 加總 
X 權重 0 1 1 0 6 0 1 1 0  10 
Y 權重 0 0 6 0 1 0 1 3 0 0 11 
 
表 9：X 座標、Y 座標線段權重值 
 
三、決定由橫列盤面、直行盤面資訊比對後，再決定哪一條線段資訊先比對。 
1. 將棋子權重值 1 加到所在線段(X 座標及 Y 座標)上，形成有棋子的線段，權重值在 1
以上。再將線段值由高到低排列後記錄起來，比對時由高到低，將權重大於 1 者依序
比對，為 0 者不比對。如表 10： 
2. Y 座標的線段資訊為 ChessYaxis[0]，…，ChessYaxis[9]記錄著；X 座標的線段資訊為
ChessXaxis[0]，…，ChessXaxis[8]記錄著。之後依權重值的高低，挑選所要的線段資
訊進來比對，只比對棋子個數的次數即可。 
 
線段 0 1 2 3 4 5 6 7 8 9 
Y_權重 0 0 10 0 3 1 3 6 0 0 
Sort 過 2 7 6 4 5 0 3 1 8 9 
Y_權重 10 6 3 3 1 0 0 0 0 0 
 
表 10：Y 座標線段加棋子權重值後，做的排序 
 
四、將棋形比對成功的盤面資訊"編號(ID)"、"著手數(PlyNumber)"分別記錄起來。 
1. 將同編號的盤面(指同一個開局棋譜)，只取著手數最少(第一次出現)的記錄，成為一
筆資料，並記載此編號重複的次數。 
2. 依照編號重複的次數由高到低排列，並且與比對的棋形記錄到「棋形資料庫」，將此
無專有名詞的棋形給予"棋盤位置敘述"當作其名稱。 
3. 玩家查尋時，每次只取前 30 筆編號不同的盤面下來給玩家查尋參考。 
五、將玩家點選中的盤面記錄，去找出「棋譜資料庫」的"開局名稱"、"棋盤畫面"，即可知道
要比對的棋形是出自於什麼的開局名稱(專有名詞)。 
 
 
 
 
七、用做"非精確比對"權重值的參數調整，是針對第六步驟做的改變。之前的步驟為了設計
方便，"棋子"、"線段"權重值設定為 1，但可以視需求而改變，如下表 11。權重值設定，
修改的依據是以"棋子活動空間的大小"為想法當例子，看出二個方式在圖 8 的非精確比
對的差別。 
 
 
名稱 將(帥) 士(仕) 象(相) 車(俥) 馬(傌) 包(炮) 卒(兵) 線段 
權重未改 1 1 1 1 1 1 1 1 
權重修改 1 2 2 7 4 5 3 1 
Sort 過 2 7 4 6 5 0 3 1 8 9 
Y_權重 22 17 11 9 3 0 0 0 0 0 
 
表 11：修改各項權重後，Y 座標線段的比對順序修正，參考圖 18 
 
 
圖 8：非精確比對時，所刪去的權重最小值後，找出的棋形不同 
 
Sort 過 6 9 7 3 4 5 0 1 8 2 
未改權重 3 3 1 0 0 0 0 0 0 0 
Sort 過 6 7 9 3 4 5 0 1 8 2 
改過權重 12 7 5 0 0 0 0 0 0 0 
 
表 12：表示圖 8 的權重修正值比較 
 
 非精確比對另外的方式，以下三個方法為參考： 
1 
1 
2 
2 
修改前 
修改後 
3.8 在棋譜資料集中，進行資料探勘，解釋與評估結果以及應用在我們的象棋程式 
 
資料探勘： 
我們以監督式學習(supervised learning)及非監督式分群(unsupervised clustering)兩種方式
來進行資料探勘，監督式學習部分將以決策樹來分析棋型與形勢判斷的關連性，並產生相關
規則。非監督式分群則將使用類神經網路來幫助我們區別各種棋型的相異程度。此外也將採
用 Apriori 演算法(Agrawal et al., 1993)來找出棋型之間的關聯法則。 
解釋與評估： 
我們對資料探勘的結果進行以下的分析： 
z 統計分析：分析用不同的屬性和資料範例所建路出的不同資料探勘模型的結果是否
存在重大差異。 
z 試探性分析：使用運算數值的試探法來幫助我們決定哪些程度的資料是屬於被探查
到的。 
z 人性分析：資料探勘的結果，將提供象棋高段棋士和象棋程式設計者驗證，並從中
選出有用的棋型。 
應用結果： 
在我們的象棋程式中，已經應用許多象棋棋型作為形勢判斷的輔助參考，資料探勘的結
果將可幫助我們加入更多有用的棋型，增加象棋程式的棋力。另一方面，這些結果也可提供
象棋愛好者研究象棋。 
 
 
圖 11：觀看棋譜介面 
 
下圖（圖 12）為棋譜搜尋介面，使用者可以選擇特定的項目或輸入關鍵字進行搜尋，搜
尋完成就會列出所有相關棋譜供使用者選擇。 
 
 
 
圖 12：棋譜搜尋功能 
 
下圖（圖 13）為盤面搜尋介面，使用者利用右方工具，將棋子放入棋盤中建立盤面，建
系統測試 
 
本系統將盤面搜尋資料表採用索引值加快搜尋效率，將測試有索引值與無索引值的效能
比較，並且比較搜尋時間的變化。以下將測試分為完全比對與模糊比對兩類： 
 
完整比對： 
下圖（圖 15）為測試用盤面，利用此盤面來測試，有索引值與無索引值的差別，並且列
出相關數據，因 SQL 會暫存搜尋過的相關資訊，所以每做一次測試會將搜尋暫存清除，以求
最正確數據。（資料數為 120 萬筆） 
 
 
 
圖 15：完整比對測試盤面 
 
下表（表 13）為實驗數據，可以發現有索引值的搜尋速度遠高於無索引值，所以利用索
引值的方式，的確能達到加速搜尋的目的。 
 
表 13：完整比對測試數據 
四、結果及討論 
 
本計劃執行期間為兩年，研究方法、進行步驟及執行進度如第二節所述，完成結果如下：
在第一年中為研究如何建立索引以加速搜尋：多媒體資料庫中資訊檢索的方法，研究建立索
引必須的象棋專家知識，將專家知識和索引方法作良好的結合，找出本索引方式的最佳搜尋
(檢索)方法．並提出效能測試結果。第二年主題為研究解決抽象棋型查詢的問題與象棋棋譜
資料庫知識探索技術：象棋程式中所需要的抽象棋型及抽象棋型的表示方式，抽象棋型的搜
尋方法與建立索引以增加抽象棋型的搜尋速度，建立、處理及轉換象棋棋譜資料庫知識探索
所需的資料集在棋譜資料集中，進行資料探勘，解釋與評估結果以及如何應用在我們的象棋
程式上。 
我們已將研究成果整理成網站，並且可供對象棋有興趣的使用者研究象棋(如 3.9 節所
述)，對於發展國內特有的數位文化內容，有很大的幫助。研究成果對於我們的象棋程式的設
計也很有幫助，使我們的象棋程式在世界上仍是名列前矛的程式，並且在 2008 人機對抗賽
中，擊敗象棋大師水準的棋士。另外已經有一篇相關論文發表，並且有數篇相關論文正在撰
寫中，可說是符合計畫預期之成果。 
 
五、計畫成果自評 
 
計畫成果與原申請計畫的內容相符，這個象棋棋譜資訊檢索技術完成之後，不但可以幫
助象棋程式的靜態評估函數更為準確，唯有善用千百年來象棋的專家知識，象棋程式才有可
能到達人類特級大師的水準。在發展此系統時，開發出一些字串比對，資料檢索方法，搜尋
演算法及機器學習理論，預計可發表三篇以上的論文。所製作出的象棋棋譜資訊檢索，將對
學習象棋有很大的幫助，可應用在電腦輔助教學方面。對於參與的人員，將對人工智慧中的
電腦對局、字串比對演算法，資料檢索方法，各種搜尋方式和機器學習方法有更深入的瞭解
及產生相關的研究成果。 
綜合四、五兩節內容，本計劃確實達到預期的成果。 
 
English 
[Agrawal 1993] Agrawal, R., Imielinski, T., and Swami, A. (1993). Mining Association Rules 
Between Sets of Items in Large Databases. In P. Buneman and S. Jajordia, eds., 
Proceedings of the ACM Sigmoid International conference on Management of Daa, 
New York:ACM. 
[Burns2003] Bruce D. Burns，"The Effects of Speed on Skilled Chess Performance"， 
Psychological Science，Department of Psychology Michigan State University，USA，
2003. 
[Carvalho2005] Joao Paulo Carvalho、Nuno Cavaco Horta、Daniel Chang Yan、Pedro Ramose 
Silva，"Fuzzy Chess Tactics"，DEEC IST-UTL，Lisboa，Portugal， Jul. 2005. 
[Fang 2001] Fang H.R., Hsu T.S., and Hsu S.C. (2001). Construction of Chinese Chess Endgame 
Databases by Retrograde Analysis. Computers and Games, Second International 
Conference, CG 2000 (eds. T.A. Marsland and I. Frank), pp. 96-114, Vol. 2063 of 
Lecture Notes in Computer Search. Springer-Verlag, Berlin. ISBN 3-540-43080-6. 
[Fang 2003] Fang H.R., Hsu T.S., and Hsu S.C. (2003). Indefinite Sequence of Moves in Chinese 
Chess Endgames. Lecture Notes in Computer Science: Proceedings of the 3rd 
International Conference on Computers and Games (eds. J. Schaeffer and M. Müller). 
Springer-Verlag, New York, N.Y. 
[Fogel2004] DAVID B. FOGEL、TIMOTHY J. HAYS、SARAH L. HAHN、JAMES  QUON，
"A Self-Learning Evolutionary Chess Program"， PROCEEDINGS OF THE IEEE, 
VOL. 92, NO. 12, DECEMBER 2004. 
[Kendall2001]Graham Kendall、Glenn Whitwell，"An Evolutionary Approach for the  Tuning of a 
Chess Evaluation Function using Population Dynamics"，Computer Science & IT 
Jubilee Campus，Nottingham，UK，2001. 
[Trinh1998] Thong B. Trinh、Anwer S. Bashi、Nikhil Deshpande， "TEMPORAL    
DIFFERENCE LEARNING IN CHINESE CHESS"，Department of Electrical 
Engineering University of New Orleans，New Orleans，LA，1998. 
[Walczak2003] Steven Walczak，"Knowledge-Based Search in Competitive  Domains"，IEEE 
TRANSACTIONS ON KNOWLEDGE AND DATA ENGINEERING，VOL.15, NO. 
3，MAY/JUNE 2003. 
[Yen2004] Shi-Jim Yen、Jr-Chang Chen、Tai-Ning Yang、Shun-Chin Hsu，"Computer  Chinese 
出席國際學術會議心得報告 
                                                             
計畫編號  95-2221-E-259-028-MY2 
計畫名稱 象棋棋譜資訊檢索技術之研究 
出國人員姓名 
服務機關及職稱 國立東華大學資訊工程系顏士淨副教授 
會議時間地點 2007/9/4—2007/9/7, 日本熊本市 
會議名稱 ICICIC2007, International Conference on Innovative Computing, Information and Control 
發表論文題目 Pattern matching in Go game Records 
 
一、參加會議經過 
 
參加 ICICIC2007, International Conference on Innovative Computing, Information and Control 國
際研討會，發表圍棋棋譜棋型比對論文。 
 
二、與會心得 
 
電腦科技日新月異，此會議中主題包括創新計算，資訊與控制。 都是目前資訊界最熱門的領
域。參加此次會議，與各國學者交流，感覺受益良多。 
 
三、考察參觀活動(無是項活動者省略) 
無 
 
四、建議 
 
日本在先進科技方面，資源投入相當多，使得研究人員都能專心做研究，值得我們效法。 
 
 
 
五、攜回資料名稱及內容 
Proceedings of 2007 Second International Conference on Innovative Computing, Information and 
Control. 
 36
Additionally, if a player wants to know the winning rate for open game strategies, the 
Go information retrieval system can provide that answer. For those who research 
computer Go, retrieving game records can be useful for correcting the content of the Go 
pattern database or assist in debugging Go programs. 
When retrieval information in game records, the most difficult part would be to find 
those task game records containing a desired Go pattern from numerous game records. 
This problem can be considered a pattern matching problems. A Go pattern is a 
particular arrangement of stones caused by their relative position. A pattern can be range 
from 3×3 to 19×19. Each position in a pattern can be white, black or empty, or a 
combination of white, black and empty. Through rotation, reflection, and changing color, 
one Go pattern can have 16 different variations on a game board.  
Pattern matching is an important problem in computer Go. Many pattern matching 
methods have been proposed in [1][5][12][13][14]. However, most approaches only 
discuss about that: given a substantial number of patterns, check which patterns are 
matched on a game board. This article presents a novel approach for finding game 
records containing a desired query pattern from a lot of game records. In this system, 
input is a query pattern and the output is game records containing this query pattern. 
From these output game records, game record information, such as the name of the game 
record, move sequences, player names and results, can be obtained.  
This article is organized as follows. The framework of proposed idea is shown in 
Section 2. Section 3 presents a novel Go pattern matching algorithm. Section 4 gives an 
index structure to increase the speed of Go pattern matching. Finally, Section 5 gives 
conclusions. 
2. Go Game Record Information Retrieval System 
The goal of this work was to develop an efficient Go game record information retrieval 
system that uses the proposed indexing structure. Figure 1 shows the system framework. 
Ability to process both pattern and text queries is a critical feature of the system, as it 
allows users to search information with more query forms. For example, a user may 
wants to identify the winning rate when a specific player uses a specific opening pattern, 
by sending a query contenting player name, result, and the opening pattern. The related 
game records will output, and the winning rate can be then be computed. It is practicable 
for the system to execute a pattern query with a logical operation such as and, or, not, 
etc. The proposed structure increases the speed of these operations. 
 38
3. A Go pattern matching algorithm 
Before pattern matching, each game board and n×m query pattern is transformed into a 
19×19 array and an n×m array, respectively. Each item in an array is represented by 3 
bits. For example, Figure 3 shows a 5×5 query patterns. Each position denoted by A, B 
and C can be a black stone or empty. Three bits are used to express four possible states 
at every intersection. Bit 1 indicates that this point could be empty or not; bit 2 signifies 
that this point could be black stone or not; bit 3 denotes that this point could be white 
stone or not. Each number in the array is generated from 3 bits. For example, a number 3 
in the array means that its relative binary number is 011, indicating that this point could 
be black stone or empty. 
 
   
Fig. 3. Format of a query pattern. 
The KMP string matching algorithm avoids unnecessary matching. [10] However, the 
KMP algorithm is a one-dimensional string matching algorithm. Hence, a 2-D pattern 
should be regarded as a set of 1-D patterns. The Go pattern matching algorithm is 
processed along following steps. 
 
Step1. Choose one row from the query pattern. This row is considered as a row 
pattern. It is a 1-D pattern and suitable for the KMP algorithm. Row patterns 
in the set are ranked according to the following criteria: 
 
State:  Choose the row pattern with a fixed state. (Patterns may contain 
elements with unfixed state. If each row pattern contains unfixed state, then 
we have to generate all possible row patterns. For example, a row pattern 
14131 will be turning it into 14111 and 14121. Because 3 means that point 
can be 1 (empty) or 2 (black) in the data structure of patterns.) 
 
Length: If there are more than one fixed state row pattern, choose the 
longest row pattern. If the row patterns have the same length, then choose the 
row pattern with the highest degree of repetition. That is, frequencies of the 
same substring appearing in the pattern. The prefix function of the KMP 
algorithm contains this information.  
 
Step2. Search the row pattern obtained in step 1 on the board (row by row) by 
11111 
14131 
21113 
14131 
11111  
 40
the query pattern through these actions must be found. 
An experiment applying the Go pattern matching algorithm was performed. Table 2 
shows the experimental environment. During the experiment, the pattern matching 
program will output all game boards containing the query pattern. When the query 
pattern did not include an edge, the average search time was 10－20 seconds in the 
environment. Figure 6 shows the searching times for the different query pattern sizes 
(3×3, 4×4,..., 19×19). Figure 6 also shows the relationship between searching time and 
pattern size. The curve first goes up and then drops down. Generally, the smaller query 
pattern the more time-consuming in a pattern matching algorithm. But in proposed Go 
pattern matching algorithm, a large query pattern will cause large searching area. 
According to experimental results, average time cost is too long for real applications. 
This problem is solved by indexing these game boards. 
Table 2. The environment of experiment. 
 
Relation between searching time and pattern size
0
10
20
30
3x3 5x5 7x7 9x9 11x
11
13x
13
15x
15
17x
17
19x
19
Sizes of query patterns
Se
arc
hin
g T
im
e(s
)
 
TFig. 6. Searching time at different query pattern sizes. 
4. Feature Patterns and Index Structure 
To construct index structure on the game record database, the features of many 
significant query patterns should be extracted and used as the index key. The proposed 
approach uses 400 featured patterns. Feature patterns are some patterns that appear 
frequently in Go games. These patterns are part of pattern database in the computer Go 
program JIMMY, which was developed from 1994[19]. The pattern database is 
maintained by S.J. Yen, who is a Taiwan amateur 6-dan Go player. Almost all 
significant moves can be recognized by the pattern database system. Each feature pattern 
has its own meaning in Go games and can be considered as jump, knight move, or 
diagonal move in a Go game; however, most of them are more complicated. 
These feature patterns are good indexing keys. Each has its own characteristics and 
meanings. By using them and a suitable indexing structure, game records can be 
Computer Pentium 4, 3.0 G, 1GB RAM 
Operating System Windows XP 
No. of Game record 6,292 game records(6.7MB)  
No. of game board 1,341,801 game boards(790.3MB)
Programming language 
& Database 
C++ 
MySQL 4.0.15 
 42
Go program JIMMY. This index structure increases the speed of pattern searching to a 
satisfactory time. 
The proposed approaches can solve the most difficult part of a Go game record 
information retrieval system. String matching for text in Go game records is easily 
implemented. The matching can be considered as text information retrieval. With the 
proposed methods and a string matching algorithm, a Go game record information 
retrieval system can be developed that accommodates both pattern view and text view 
queries. This system will be useful for Go players and computer Go researchers. 
References 
1. B. Bouzy, and T. Cazenave, “Computer Go: An AI oriented survey,” Artificial 
Intelligence 132, 2001, pp. 39-103. 
2. M. Boon, “A Pattern Matcher for Goliath,” Computer Go, No.13, 1990, pp.12-24. 
3. T. Cazenave, “Generation of patterns with expernal conditions for the game of Go,” 
Advances in Computer Games, Vol. 9 Uni. Of Limburg, Maastricht, 2001. 
4. W. Frakes and Y. R. Baeza, Information Retrieval: Data Structures and Algorithms, 
Prentice-Hall. 
5. GnuGo website. http://www.gnu.org/software/gnugo/ gnugo.html. 
6. Hollosi, A. SGF FF4-Smart Game Format, 2004. http://www.red-bean.com/sgf. 
7. K.T. Hsu Pattern recognization in Go game records, M.Sc. Thesis, Department of 
Computer Science and Information Engineering, National Taiwan University, 
Taiwan, 2004. (in Chinese). 
8. H. Iida, M. Sakuta and J. Rollason, “Computer shogi,” Artificial Intelligence 134, 
2002, pp. 121-144. 
9. J. Karkkainen and E. Sutinen, “An Efficient Index Structure for String Databases,” 
Proc. of the 27th VLDB Conference, pp. 351-160, 2001.  
10. D.E. Knuth, J.H. Morris, and V.R. Pratt, “Fast pattern matching in strings,” SIAM 
Journal on Computing, 6(2), 1997, pp323-350. 
11. T. Kojima and A. Yoshikawa “Knowledge Acquisition from Game Records. 
Johannes Fürnkranz and Miroslav Kubat,” editors. TWorkshop Notes: Machine 
Learning in Game PlayingT. 16th International Conference on Machine Learning 
(ICML-99), Bled, Slovenia, 1999. 
12. Y.T. Lee, Pattern Matching in Go based on Patricia Tree. M.Sc. Thesis, 
Department of Computer Science and Information Engineering, National Taiwan 
University, Taiwan, 2004. (in Chinese) 
13. M. Mueller, “Pattern Matching in Explorer,” Proceedings of the Game Playing 
System Workshop, pp.1-3, Tokyo, Japan, 1991. 
14. M. Muller “Computer Go,” Artificial Intelligence, 134(2003). pp. 145-179. 
15. T. Nakamura and T. Kajiyama, “Feature Extraction from Encoded Texts of Moves 
and Categorization of Game Records,” Game Informatics, Vol. GI-2-11, 2000. 
16. J. Nunn, “Extracting information from endgame databases,” International 
Computer Go Association (ICGA) Journal, 1993, pp. 191-200, ISSN 1389-6911. 
出席國際學術會議心得報告 
                                                             
計畫編號  95-2221-E-259-028-MY2 
計畫名稱 象棋棋譜資訊檢索技術之研究（第 2 年） 
出國人員姓名 
服務機關及職稱 
國立東華大學資訊工程系顏士淨副教授 
會議時間地點 2007/9/4—2007/9/7, 日本熊本市 
會議名稱 ICICIC2007, International Conference on Innovative Computing, Information and Control 
發表論文題目 Pattern matching in Go game Records 
 
一、參加會議經過 
 
參加 ICICIC2007, International Conference on Innovative Computing, Information and Control 國
際研討會，發表圍棋棋譜棋型比對論文。 
 
二、與會心得 
 
電腦科技日新月異，此會議中主題包括創新計算，資訊與控制。 都是目前資訊界最熱門的領
域。參加此次會議，與各國學者交流，感覺受益良多。 
 
三、考察參觀活動(無是項活動者省略) 
無 
 
四、建議 
 
日本在先進科技方面，資源投入相當多，使得研究人員都能專心做研究，值得我們效法。 
 
 
 
五、攜回資料名稱及內容 
Proceedings of 2007 Second International Conference on Innovative Computing, Information and 
Control. 
for finding game records containing a desired 
query pattern from a lot of game records. In 
this system, input is a query pattern and the 
output is game records containing this query 
pattern. From these output game records, game 
record information, such as the name of the 
game record, move sequences, player names 
and results, can be obtained.  
This article is organized as follows. The 
framework of proposed idea is shown in 
Section 2. Section 3 presents a novel Go pattern 
matching algorithm. Section 4 gives an index 
structure to increase the speed of Go pattern 
matching. Finally, Section 5 gives conclusions. 
2. Go Game Record Information Retrieval 
System 
The goal of this work was to develop an efficient Go 
game record information retrieval system that uses the 
proposed indexing structure. Figure 1 shows the system 
framework. Ability to process both pattern and text 
queries is a critical feature of the system, as it allows 
users to search information with more query forms. For 
example, a user may wants to identify the winning rate 
when a specific player uses a specific opening pattern, by 
sending a query contenting player name, result, and the 
opening pattern. The related game records will output, 
and the winning rate can be then be computed. It is 
practicable for the system to execute a pattern query with 
a logical operation such as and, or, not, etc. The 
proposed structure increases the speed of these 
operations. 
 
Fig. 1. Go game record information retrieval system. 
Figure 2 presents the procedure and major 
components of the proposed system. This 
approach is based on a sequential matching 
algorithm, which is used when construction the 
database and during searching. In addition to 
the searching algorithm, two principal factors 
affect system performance: feature patterns, 
and a feature 
tree.
 
 
Fig. 2. Constructing an index structure. 
 
3. A Go pattern matching algorithm 
Before pattern matching, each game board and 
n×m query pattern is transformed into a 19×19 
array and an n×m array, respectively. Each item 
in an array is represented by 3 bits. For 
example, Figure 3 shows a 5×5 query patterns. 
Each position denoted by A, B and C can be a 
black stone or empty. Three bits are used to 
express four possible states at every 
intersection. Bit 1 indicates that this point could 
be empty or not; bit 2 signifies that this point 
could be black stone or not; bit 3 denotes that 
this point could be white stone or not. Each 
number in the array is generated from 3 bits. 
For example, a number 3 in the array means 
that its relative binary number is 011, indicating 
that this point could be black stone or empty. 
 
   
Fig. 3. Format of a query pattern. 
The KMP string matching algorithm avoids 
unnecessary matching. [10] However, the KMP 
algorithm is a one-dimensional string matching 
algorithm. Hence, a 2-D pattern should be 
regarded as a set of 1-D patterns. The Go 
pattern matching algorithm is processed along 
11111 
14131 
21113 
14131 
11111  
time cost is too long for real applications. This 
problem is solved by indexing these game 
boards. 
Table 2. The environment of experiment. 
 
Relation between searching time and pattern size
0
10
20
30
3x3 5x5 7x7 9x9 11x
11
13x
13
15x
15
17x
17
19x
19
Sizes of query patterns
Se
arc
hin
g T
im
e(s
)
 
TFig. 6. Searching time at different query pattern sizes. 
4. Feature Patterns and Index Structure 
To construct index structure on the game record database, 
the features of many significant query patterns should be 
extracted and used as the index key. The proposed 
approach uses 400 featured patterns. Feature patterns are 
some patterns that appear frequently in Go games. These 
patterns are part of pattern database in the computer Go 
program JIMMY, which was developed from 1994[19]. 
The pattern database is maintained by S.J. Yen, who is a 
Taiwan amateur 6-dan Go player. Almost all significant 
moves can be recognized by the pattern database system. 
Each feature pattern has its own meaning in Go games 
and can be considered as jump, knight move, or diagonal 
move in a Go game; however, most of them are more 
complicated. 
These feature patterns are good indexing keys. 
Each has its own characteristics and meanings. 
By using them and a suitable indexing structure, 
game records can be classified systematically.  
The feature patterns are integrated by a popular 
index structure: the inverted list. [4] The 
proposed sequential matching algorithm is 
applied to find the game boards containing each 
feature pattern, and build an inverted file for 
our game records. (Fig. 7.) 
 
 
 
Fig. 7. Building inverted file using feature patterns. 
All game boards were classified according to 
the feature pattern(s) they contain. This will be 
a good characteristic for matching processing. 
Almost every reasonable query pattern contains 
at least one feature pattern, and it is easy to 
perform logical operations such like “AND” or 
“OR” under this structure. 
With a desired query pattern, we first check 
which feature patterns it contains. This can be 
done quickly by algorithm in [4]. Then we only 
need to apply the proposed Go pattern 
matching algorithm on this query pattern in 
those game boards containing the result feature 
patterns. For example, if the pattern matcher 
shows that the query pattern contains feature 
pattern 1 and feature pattern 3, we will only 
search those game boards in the set (1∩3). 
5. Conclusion 
This article presented a novel a Go pattern matching 
algorithm. If query patterns are edge patterns or corner 
patterns, game records containing this query pattern can 
Computer Pentium 4, 3.0 G, 1GB RAM 
Operating System Windows XP 
No. of Game record 6,292 game records(6.7MB)  
No. of game board 1,341,801 game boards(790.3MB)
Programming language 
& Database 
C++ 
MySQL 4.0.15 
