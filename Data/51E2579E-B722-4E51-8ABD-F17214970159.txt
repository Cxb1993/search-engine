 2
本文其他章節組織如下。第二節為背景介紹，
簡介 SyncFree的系統架構。第三節說明MAUT之
研究方法內容。在第四節中我們將以實際案例展示
MAUT 之應用方式。我們的研究心得將報告在第
五節之中。最後為結論與未來工作。 
 
二、背景介紹：SyncFree專案簡介 
圖 1 為 SyncFree 系統架構圖。在該專案中
我們套用了階層式架構（layered architecture）[3] 與
若干個設計樣式[8]。SyncFree 的詳細開發背景與
分析設計資料可參考[18]。在執行該計畫的過程中
我們遵循國科會 LightWeight CMMI 的要求撰寫
了完整的系統開發文件。目前，SyncFree的程式碼
約有三萬行。 
 
 
圖 1 SyncFree架構圖 
 
三、研究方法 
3.1多面向單元測試（MAUT） 
我們將單元測試擴充為下列六項，分別用以
表達不同層次的系統知識： 
 
 邏輯單元測試（logic unit test， LUT）：以單
一物件為測試對象，若物件與其他物件有相
依性，可使用 stub或 mock object 以達到單
獨測試的目的。若撰寫 stub 或 mock object
太過繁複或不可行，則以相依性的多寡，由
小而大依序測試。在此情況下，某物件對於
已經撰寫完成邏輯單元測試的物件，其相依
性可不被計算在內。 
 整合單元測試（integration unit test，IUT）：
又稱為合作單元測試（ collaboration unit 
test）。主要測試物件之間的介面與互動關係
是否正確。整合單元測試所涵蓋的範圍很
廣，凡是測試兩個或多個物件之間的互動關
係之測試，都可視為整合單元測試。在此我
們將整合單元測試區分為  intra-package 
integration unit test（ Intra UIT，同一個 
package 之 內 物 件 的 整 合 測 試 ） 與 
inter-package integration unit test（Inter UIT，
跨 package 之間物件的整合測試）。藉由區
分此兩類整合單元測試，我們可觀察系統模
組化的程度，並做為後續重整程式的參考。 
 劇情單元測試（scenario unit test，SUT）：以
使用案例（use case）或劇情為主的單元測
試，相當於傳統的功能測試（functional test）。
由於物件導向系統經常採用使用案例來撰寫
需求，因此測試使用案例中的每個劇情將可
較為有效的測試與記錄系統功能。 
 設計樣式單元測試（design pattern unit test，
DPUT）：為每一個設計樣式撰寫單元測試以
記錄此知識。以 Strategy 樣式為例 [8]，此
測試必須包含每一個參與者（participants）。 
 架構單元測試（architecture unit test，AUT）：
為每一個系統架構撰寫單元測試以記錄此知
識。以階層式架構為例，此測試必須反映出
階層與階層之介面的互動關係。 
 企業邏輯單元測試（business rule unit test，
BRUT）：為每一個企業邏輯撰寫單元測試以
記錄此知識。 
 
3.2 JUnit為基礎之自動化單元測試框架 
在本計劃中我們預計採用下列自動化單元測
試工具以達到單獨測試（減少測試執行的時間並降
低測試與系統的相依性）之目標： 
 
 JUnit：JUnit 為目前廣為使用的自動化單元
測試框架，它提供了自動化執行單一測試案
例的功能。此外，程式設計師可透過測試組
（test suite）來管理多個測試案例與測試組。
JUnit 提供了多個測試驅動程式，包含文字介
面與圖形使用者介面。 
 Mock Object：而為了達到單獨測試的目標，
以及測試物件內部互動關係，我們同時採用
了Mock Object 技術以協助程式設計師自動
產生 mock object。 
 
3.3多面向單元測試框架 (MAUT Framework) 
為了讓軟體開發人員能夠採用我們所提出的
方法來記錄軟體知識，首先我們必須先開發一個
MAUT Framework，用以將不同層次 MAUT 所要
表達的知識內含在該框架之中。軟體開發人員實際
上是基於框架之下來撰寫 MAUT（我們稱之為一
個 MAUT Instance）。例如，由於不同的 design 
patterns 其設計有其固定的物件結構與關係，因此
我 們 可 以 設 計 一 個 Design Pattern MAUT 
Framework，以支援體開發人員記錄軟體系統中有
那些設計套用了哪些 design patterns。因此，若一
個應用軟體套用 Strategy pattern，則我們可以應用
 4
映此錯誤狀況。其測試程式如圖 3所示（該測
試無法通過單元測試）。 
(2) 程式設計師修改程式碼。圖 4 為修改後之程
式。 
(3) 程式設計師執行步驟(2)所撰寫之測試程式，並
通過該測試。 
(4) 程式設計師應用從該錯誤所學習之知識，得知
原始程式對於中文處裡有問題，因此尋找原始
程式中有處裡檔案的程式，並撰寫測試程式確
定其對於中文處裡的能力。圖 5 為其為 FTP 
通訊協定所撰寫的測試程式。 
 
圖 3 重現錯誤狀況之測試 
 
 
圖 4 修改後之程式 
 
 
圖 5 利用修正錯誤所學習之知識，為 FTP 通訊協
定撰寫新的測試程式 
 
在此範例中軟體開發人員撰寫的 MAUT 
Instance屬於一種 IUT。我們發現由於 IUT的抽象
成次比較低（表達物件之間的互動），因此其所記
錄的知識可能僅包含物件之間正確的互動步驟或
資料傳遞的格式等。附帶說明，在此範例中物件傳
遞參數所造成的錯誤並無法被 LUT 所表達，因為
在 LUT 中我們會以 mock object 來代替真正的
HTTP 伺服器，因此並無法表現出因為未指定編碼
參數所產生的無法處理中文檔案的問題。該問題一
定要透過實際的物件互動才可被揭露出。 
 
4.2文件閱讀事件 
使用案例名稱：閱讀（SyncFree）使用案例—測試
簡單同步 
主要成功步驟： 
(1)  這個使用案例開始於程式設計師閱讀系統文
件，並依據所記載的簡單同步使用案例以及該
使用案例之 System Sequence Diagram [12]（圖
6）來測試該功能。 
(2)  程式設計師依據該文件撰寫劇情單元測試。由
於一個使用案例可產生若干個不同的劇情，在
此我們展示當來源與目的地資料相同的劇
情。由於系統已經開發完成，因此不需要為此
劇情單元測試撰寫 stubs 或 mock objects。圖
7為該測試之程式碼。 
(3)  程式設計師執行並且通過該測試。 
 
由於在 SyncFree 的設計中已套用了 use case 
controller pattern [1]，因此圖 7中的程式直接反
應出使用該 use case controller（ObjSyncService
物件）的順序。 
 
 
圖 6 簡單同步使用案例之 System Sequence 
Diagram 
 
