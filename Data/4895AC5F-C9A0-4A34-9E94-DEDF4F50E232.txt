2小型虛擬環境
A Small Virtual Environment
計畫編號：NSC 95-2221-E-009-141
執行期限：95 年 8 月 1 日至 96 年 7 月 31 日
主持人：李嘉晃 國立交通大學資訊工程
一、中文摘要
由於技術發展的快速，手機在外形上的呈現
變得更加的有創意，而且在功能上也比以往
更加的複雜。在該計畫中我們提出並設計了
一個可延伸性的人機介面系統 ( 稱為
XMMI 2.0)，可以讓手機使用者自行個人化
自己的手機介面以及操作介面。XMML 2.0
包含了人機介面系統 (稱為 MMIS)、人機介
面描述語言 (稱為 MMDL)以及一個編輯系
統。使用者可以使用該編輯系統去設計他們
的個人化界面，並產生 MMDL 檔案。當
MMDL 上傳到已經事先安裝 MMIS 的手
機裡，該手機的使用介面就會轉變為由使用
者自行製作的個人化界面。
二、英文摘要 (Abstract)
Due to the progress of technology, mobile
phone has become more creative in appearance
and complex in functions. We propose and
design an extensible man machine interface
system, referred to XMMI 2.0, to allow users
of mobile phone to personalize the visual
interface as well as operational interface of a
mobile device. The XMMI 2.0 consists of a
man machine interface system, referred to
MMIS, a man machine interface description
language, referred to MMDL, and an editing
system. Users can use editor to design their
own personalized interface and generate a
MMDL file. Once MMDL is uploaded to
mobile phone with MMIS, graphical user
interface becomes personalized.
三、計畫緣由與目的
Of the various interactions between user and
mobile devices, the study of personalization
and customization of the graphical user
interface is a very important and a demanding
task. The purpose is to cope with illusive and
dynamic demands of users, to allow users to be
able to change or adapt user interface. Without
it, the user interface must be redesigned,
reconfigured and tested by engineers in the
design house. This is a very challenging and
laborious because it often needs both engineers
and artists to communicate and collaborate.
The traditional user interface system often
bundles the configuration inside the software
due to the limitation of the speed and storage
capacity of embedded systems. This requires
the recompilations and linking whenever such
user interface elements as colors, images, and
layout need to be changed to user’s like. In
addition, the debugging phase of recompilation
is often difficult and laborious for engineers
since the number of states for the user interface
of the mobile phone is often quite huge. This
leads to the results that the user can only accept
the default UI without the ability of modifying
it to suit his own taste.
XMMI 2.0 aims to separate the task of both
artist and user from the UI engineers. The
system will allow the artist and user to
personalize the content and operations of UI
easily while the UI engineers can concentrate
on developing new control elements. It consists
of a module of man machine interface system,
referred to MMIS, an interface description
language, referred to MMDL, and a module of
graphical interface editing system. MMIS is
responsible for loading UI description files
written in MMDL, which describe the contents,
configuration and operation of user interfaces.
Graphical interface editor is used by artist and
user to design UI and to generate UI
description files.
4state while multiple links moves to different
states depending on the focus within the state.
The event element includes a type attribute and
parameter attribute. The type attribute specifies
the nature of event while parameter attribute
specifies the corresponding details of the event.
For example, type attribute can be used to
distinguish key event from counter event. The
parameter associated with the count event can
be used to describe the length of the time
elapse.
The control element contains the information
of using application program logic. Its type
attribute indicates the program to be used. Its
content consists of variable element, resource
element, and event element. The purpose of the
control element is to describe the aspects of
view and control of MVC model.
 Man-Machine Interface System
(MMIS)
Mobile Phone Man-Machine Interface System,
MMIS, takes MMDL file as input and outputs
the graphical user interface on the device. The
system, depicted in Fig. 3, contains MMIS
kernel, MMIS control element and MMIS
variable element. The kernel will load the
MMDL file and retrieve MMIS control element
as well as MMIS variable element.
Fig. 3. MMIS architecture
The kernel of MMIS includes a stack data
structure for MMIS nodes and three such
modules as node management, event handling,
and resource display. The MMIS control
element must possess the name for the control
element and contain four functions of alloc, init,
proc, free. MMIS kernel will invoke different
functions of control element based on different
types of events. MMIS variables are
distinguished into MMIS variables and MMIS
control variables.
 Interface Editor
The interface editor allows user to design UI
state graphically and ensure that the generated
MMDL will conform to the DTD of graphical
user interface. See Fig. 4 for a snapshot of an
editing process..
Fig. 4. MMDL Editor
By clicking left key of the mouse on the area of
A, user can add a new UI state, see Fig. . The
editor will show the thumbnail in B rectangle.
Double click on the left key of the mouse, C
window will pop up. At this stage, user can
select C, E, R, V, L in the state editing window.
Push the button to add new element, the
element editing window will pop up for user to
set up the attribute of the element. Because the
attributes of elements of MMDL are different,
the element editing window will pop up
different attribute setup item according to DTD.
See Fig. 5A and Fig. 5B.
A
B
C
