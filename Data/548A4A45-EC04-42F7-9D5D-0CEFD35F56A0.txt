the efficiency of connection between the local IoT 
platform and the remote cloud computing platform, 
routing and fault tolerance schemes should be well 
designed to realize the purpose of managing IoT 
information from heterogeneous sensor networks at the 
central cloud computing platform. 
英文關鍵詞： Internet of Things (IoT)； OSGi (Open Service Gateway 
Initiative)； Heterogeneous Sensor Network； Cloud 
Computing Platform； Access Routing； 
 
2 
 
一、研究計畫中文摘要：  
 隨著各式異質設備日益發展下，各設備需有一仲介者來平衡與協調，以有效提升感測設備間合作
之效能。在智慧建築中，各設備感測獨運作，而建築物周圍之約有數百至數千個感測點，將所有設
備點連接起來並使之可相互溝通(即為物聯網)，其工程極為複雜。OSGi(Open Service Gateway 
Initiative)可作為一區域彙集平台，藉由收集各感測器之資訊形成一區域物聯網路，而透過網際網路
連接，可將區域的異質感測物聯網路資訊彙集至遠端的雲端伺服器，以進行集中式管控，因而、在
各區域資訊彙集至雲端計算平台過程中，排程與接取路由技術為一值得探討之議題。在這個計畫中，
我們將先建立以 OSGi 為基礎的物聯網異質感測網路平台，提供彙集區域物聯網資訊的功能；再者、
透過物聯網平台與雲端計算平台的接取設計，可使區域物聯網資訊集中管理；然而為使區域物聯網
平台與雲端伺服器連接效能提升，路由接取及容錯機制亦需詳加設計，進而達成物聯網異質感測資
訊於雲端系統管理之目的。 
 
關鍵詞: 物聯網、OSGi、異質感測網路、雲端計算平台、接取路由 
 
二、研究計畫英文摘要：  
 With the development of heterogeneous sensor devices, all devices need a broker which can balance 
and coordinate these sensors to effectively enhance the cooperation among them. In a smart building, each 
sensor node independently functions. There are normally hundreds or thousands of sensors around the 
building. Forming an Internet of Things (IoT) by joining such a large amount of sensors to cooperate and 
communication with each other is quite complicated. OSGi (Open Service Gateway Initiative) can play a 
local aggregator platform by gathering all sensing information to establish a local IoT network. Through 
the Internet, all information from distinct IoT platform can be reported to the remote cloud computing 
platform and be managed centrally. Therefore, how to schedule and make the access routing to the cloud 
platform for collecting distributed information becomes an attractive research topic. In this project, we plan 
to construct a local OSGi based platform for heterogeneous IoT sensor network management first. 
Furthermore, we plan to well design the cloud access mechanism to manage the local IoT information 
centrally. To facilitate the efficiency of connection between the local IoT platform and the remote cloud 
computing platform, routing and fault tolerance schemes should be well designed to realize the purpose of 
managing IoT information from heterogeneous sensor networks at the central cloud computing platform. 
 
Keywords: Internet of Things (IoT); OSGi (Open Service Gateway Initiative); Heterogeneous Sensor 
Network; Cloud Computing Platform; Access Routing; 
 
三、前言： 
隨著生活品質進步，各種設備日益健全之情況下，在各系統間則需有一仲介者來平衡與協調，然
而此仲介者極為重要，它扮演一種系統間溝通之角色，在日常生活中總是需要一些設備來輔助我們，
使之方便、有效及快速達成目標，其為我們執著與期待的地方。在智慧建築中，各設備感測點可視
為一個別功能，因此一般個人或智慧建築周圍之設備點即可達到估計約一千至四千點左右，在如此
龐大之數字下，如須將所有設備點連接起來並使之可相互溝通(即為物聯網)，其工程極為複雜，此
4 
 
[3] Y. Imai, Y. Hori, and S. Masuda, "Development and a brief evaluation of a web-based surveillance 
system for cellular phones and other mobile computing clients," in Human System Interactions, 2008 
Conference on, 2008, pp. 526-531. 
[4] T. Yu-Chee, W. You-Cbiun, C. Kai-Yang, and H. Yao-Yu, "iMouse: An Integrated Mobile 
Surveillance and Wireless Sensor System," Computer, vol. 40, pp. 60-66, 2007. 
[5] P. Jung-Hyun and S. Kwee Bo, "A design of mobile robot based on Network Camera and sound source 
localization for intelligent surveillance system," in Control, Automation and Systems, 2008. ICCAS 
2008. International Conference on, 2008, pp. 674-678. 
[6]G. L. Foresti, "A real-time system for video surveillance of unattended outdoor environments," Circuits 
and Systems for Video Technology, IEEE Transactions on, vol. 8, pp. 697-704, 1998. 
[7] M. Esteve, C. E. Palau, J. Martinez-Nohales, and B. Molina, "A video streaming application for urban 
traffic management," Journal of Network and Computer Applications, vol. 30, pp. 479-498, 2007. 
[8] Y. Imai, Y. Hori, and S. Masuda, "Development and a brief evaluation of a web-based surveillance 
system for cellular phones and other mobile computing clients," in Human System Interactions, 2008 
Conference on, 2008, pp. 526-531. 
[9] T. Yu-Chee, W. You-Cbiun, C. Kai-Yang, and H. Yao-Yu, "iMouse: An Integrated Mobile 
Surveillance and Wireless Sensor System," Computer, vol. 40, pp. 60-66, 2007. 
[10] P. Jung-Hyun and S. Kwee Bo, "A design of mobile robot based on Network Camera and sound 
source localization for intelligent surveillance system," in Control, Automation and Systems, 2008. 
ICCAS 2008. International Conference on, 2008, pp. 674-678. 
[11]"The Technical BSD Conference," 
http://www.bsdcan.org/2008/schedule/events/91.en.html 
[12] Dinesh C. Verma “Data Backup Service”，Peer-to-Peer Networks, 2004 
[13] Jepson, T.C.;"The basics of reliable distributed storage networks,"，IT Professional， 
[14] Wei Zhou; , "LAN-Free backup program design based on SAN,"，ICNDS，2010 
[15] Keeton, K.; Merchant, A.; , "A framework for evaluating storage system dependability," Dependable 
Systems and Networks, 2004 
[16] Xu Wei;  Wang Min;  He Xiang;  Xu Lu “A Self-Adaptive Backup System Based on Data 
Integration Mechanism，ICCIT 2008 
[17] (Disaster Recovery Services) 
http://www.fujitsu.com/tw/services/solutions/management/managedservice/disaster.html 
[18] A. Chervenak, V. Vellanki, and Z. Kurmas. “Protecting file systems: A survey of backup techniques.” 
In Proc. IEEE/NASA Conf. MSS, pp. 17 – 31, Mar. 1998. 
[19] A. Azagury, M. E. Factor, and J. Satran. “Point-in-Time copy: Yesterday, today and tomorrow.” In 
Proc. IEEE/NASA Conf. Mass Storage Systems (MSS), pp. 259–270, Apr. 2002 
 
六、研究方法： 
6-1 OSGi 框架(Framework)： 
OSGi 是一種 Framework，它建構於 JVM(Java Virturl Machine)之上，因此 OSGi 必須運作於作業
系統(Operating System)之中，其架構如圖 1 所示。 
6 
 
感測系統架構圖如圖 3 所示，各搭配一個 Zigbee Slave 設備，並於 OSGi 服務平台上架設 Zigbee 
Master 設備與各個 Zigbee Sensor 節點溝通。 
 
圖 3. 感測系統架構 
此系統的感測目標具備下列功能： 
1. 可偵測瓦斯、一氧化碳、二氧化碳、煙霧，一旦有任何一個事件發生，立即將訊息傳送到 OSGi
服務平台，OSGi 服務平台在透過網路將事件通知使用者事件發生 
2. 可偵測大門及窗戶被打開之事件，即時將訊息傳送到 OSGi 服務平台，OSGi 服務平台在透過
網路通知使用者大門或是窗戶被打開之事件 
3. 可偵測電器目前是否有電流超載的情況，一旦超出上限值，立即傳送訊息給 OSGi 服務平台，
OSGi 服務平台在立刻傳送給使用者，使用者獲知後，可透過網路遠端關閉電器。 
6-2.1 感測模組(Sensor Bundle) 
Sensor bundle 可裝載各種不同 Sensor 模組，在此就溫度感測作為範例並進行一系列之論述及探
討。溫度感測顧名思義即為可偵測溫度之設備，其感測方式極為多種包含 ADC 數據轉換、紅外線
溫度感測以及熱敏電阻感測...等等，然而有著各式各樣之感測方式卻沒有將各種感測統整，其實質
之功能將會受限，因此必須將他們連結起來，並建構成感測網路(Sensor Networks)，相信在未來發展
中是必要的。 
硬體設備(Hardware)： 
在建立一個無線感測網路中，首先最重要的就是瞭解在該感測網路中所使用的硬體設備，而這
些硬體設備都是以 ZigBee 無線感測網路為基礎所設計出來的，ZigBee 設備具有可靠度高、高擴充
性以及省電等特性，此外根據設備使用的用途不同共可分成兩種型態，分別是全功能裝置
(Full-Function Device，FFD)和精簡型裝置(Reduced-Function Device，RFD)，FFD 之節點具備控制器
之功能提供資料交換，可稱得上是無線感測網路中的協調者，此外 FFD 除了做為一個協調者之外，
8 
 
如圖 5 所示，在智慧型手機上開發應用程式，使其可透過 Wireless Network 接收 OSGi 傳送過來
的各式各樣訊息。手機可透過 Wireless Network 接收 OSGi 傳送過來的各感測(Sensor)設備的事件，
並可在手機螢幕上觀看各個感測(Sensor)設備的狀態。 
 
圖 5. Smart Phone Application 
 
圖 6. 各種終端機與 Bundle 溝通 
基於 OSGi 服務平台上建立的 Bundle 之系統架構，如圖 6 所示，終端機與 Bundle 的溝通變得更
加重要，透過各種異質網路 GPRS、Wi-Fi、3GPP-LTE 或是目前最紅的 WiMAX 來作資料的傳遞，
終端機方可以從桌上型 PC、Android Phone、iPhone、Windows phone 7…等手機到 google 最新發展
的 Chrome OS 作應用。 
以下使用 ZigBee Bundle 與 Android Phone 為實例作介紹，在開發流程方面主要有四大步
驟:Protocol TCP/UDP、Set Socket、Set connection、Check and Application。 
Protocol TCP/UDP： 
使用異質網路作資料傳遞時，首先要決定雙方的網路溝通協議，在 TCP/IP 體系結構圖中，如圖
7 所示，傳輸層中由 TCP 和 UDP 兩個重要的協定組成，此層的作用是完成 A 端與 B 端的通信。
TCP(Transmission Control Protocol)提供一種連線導向的可靠資料傳輸協定，而 UDP(User Datagram 
Protocol)採用一種不需連線的協定，提供不可靠的資料封包服務，例如:應用於 Peer to Peer，本實例
10 
 
使用 socket()函數，初始畫一個通訊端。 
(2)  發起連接： 
使用 server 端的 IP 和連接埠填充 sockaddr_in 位址空間，同時使用 connect()函數向伺服器發起
連線。 
(3)  資料收發： 
假若連線成功，則使用 send()和 recv()函數進行資料資料收發。 
(4)  通訊端關閉： 
當通信完畢，使用 close()函數關閉通訊端。 
Set connection： 
Bundle 與終端機的連線主要透過 TCP 協定，建立 socket 作為網路溝通，而設定連線的方式主要
分如下三種：永久性持續連線、周期性間斷連線、觸發性連線，如圖 8 所示。 
t t
T
t
t t
T T
t t
持續性連線
週期性連線
T
t
觸發性連線
T: Connection Time
t: Send and Receive Data Time
 
圖 8.  bundle 與終端機連線方式 
(1)  持續性連線 
永久性持續連線即 client 與 server 端在程式一開始便建立 socket 連線，且每隔 t 秒接收一次 data。
缺點為長時間建立連線可能會因為某些外在因素導致連線品質不穩定，最後中斷連線。解決方法
為設定中斷後等待時間再次連線，但是此方法並無法徹底解決因長時間連線而中斷的問題，若是
採用第二種連線方式周期性間斷連線即可改善第一種連線的主要問題。 
(2)  週期性連線 
週期性連線為 client 與 server 端在建立連線後每隔 T 秒鐘中斷連線一次，連線期間每隔 t 秒接收
data 一次，如此可減少長時間連線造成中斷的問題。 
(3)  觸發性連線 
透過終端機的 UI(user interface)上的按鈕或事件來觸發與 bundle 的網路連線，一旦觸發連線後雙
12 
 
Unit, PMU)則為電力線乙太網路，透過電力線路連接至路由器傳輸乙太網路流量，並可測量與之連
接電器之電氣參數，包含電壓、電流以及能耗，並能夠控制電器開與關；四合一感測板即利用現成
感測警報裝置配合單晶片系統以序列埠連接至個人電腦，並可利用電位差得知環境有無煙霧、瓦斯、
一氧化碳及高溫；Zigbee 為 IEEE 802.15.4 之通訊協定，則透過 USB 連接之協調器(Coordinator)與五
個感測節點(Sensor nodes)透過 Zigbee 協定傳輸各點溫度及濕度資料。 
 
圖 10. 系統實際結構 
Broker 為單純之個人電腦，故其已具備多樣化之輸入輸出介面，若將之改用體積小且較為省電
裝置如嵌入式系統，更可使系統具備可攜並更富彈性。於是本計畫將選擇 Java 做為可跨平台之開發
語言，且其於網路傳輸方面也較具其他語言在開發上帶來許多方便，如使用企業版(Java 2 Enterprise 
Edition, J2EE)之 Servlet 技術可順利以 MVC Model 2 網頁服務設計模式開發。本計畫選擇在家庭、
車載網路已成熟之 OSGi 為基礎建立系統。在 OSGi 之定義中，系統服務元件稱為 Bundle，可藉由
已定義之不同生命週期開發元件於啟動、停止等狀態時之行為。本計畫選擇使用體積較輕巧之Eclipse 
Equinox 做為原形發展，並且透過內建之 Jetty 網頁容器將系統服務元件進一步開發成網頁服務形
式。本計畫實作系統之系統服務元件各別開發，如圖 11。 
 
圖 11. 系統軟體平台構造 
SymphonyUI 提供對外管理、存取介面以及負責控管其他元件生命週期，如圖 12 所示可利用瀏
覽器以拖拉方式管理可視化後各別的系統服務元件；而 SymphonyUtil 則可提供網頁美觀設計庫以及
利用 IoC/DI 抽象化之抽象介面，故其他服務元件必須依賴此元件提供其完整功能；最後四種設備因
14 
 
由於物聯網設備可依特性分為 Sensor 及 Actuator 與環境互動，並透過服務導向架構定義，將
軟體元件明確定義並透過 MVC Model 2 及 IoC/DI 之著名設計模式，可使硬體與軟體接應、資料分
享至網路過程上更無阻礙。搭配不同定義之系統服務元件可使元件間相依性降至最低，並可直接
透過網路互相溝通交換資料，達成物聯網之設備間互相溝通之目的。因此擴充其他服務的彈性極
高，可以利用此概念去實作其他與物聯網相關的應用，如家庭式監控系統、遠距醫療系統等。 
八、成果發表情形 
    計畫執行期間所發表之期刊論文如下： 
 M.-S. Lin, J.-S. Leu, K.-H. Li, and J.-L. C. Wu, “TABOA: Terrain-aware Beacon Order 
Adaptation Scheme in 3D Zigbee Sensor Networks,” IEEE Wireless Communications [SCI,EI] 
 M.-S. Lin, J.-S. Leu, K.-H. Li, and J.-L. C. Wu, “Zigbee-based Internet of Things in 3D 
Terrains,” Computers and Electrical Engineering (CEE), Elsevier [SCI,EI] 
 M.-S. Lin, J.-S. Leu, W.-C. Yu, M.-C. Yu, and J.-L. C. Wu, “BOB-RED Queue Management for 
IEEE 802.15.4 Wireless Sensor Networks,” EURASIP Journal on Wireless Communications 
and Networking 2011, 2011:107 doi:10.1186/1687-1499-2011-107 [SCI,EI] 
    計畫執行期間所發表之會議論文如下： 
 H.-Y. Shih and J.-S. Leu, 'Improving Resource Utilization in a Heterogeneous Cloud 
Environment,' The 18th Asia-Pacific Conference on Communications (APCC 2012), Jeju island, 
Korea, Oct. 15-17 2012. [EI] 
 J. Mora and J.-S. Leu, 'Intelligent Power Saving Technique for Mobile Devices,' The 18th 
Asia-Pacific Conference on Communications (APCC 2012), Jeju island, Korea, Oct. 15-17 
2012. [EI] 
 J.-S. Leu and H.-J. Tzeng, “Received Signal Strength Fingerprint and Footprint Assisted Indoor 
Positioning Based on Ambient Wi-Fi Signals,” The 75th IEEE Vehicular Technology 
Conference (IEEE VTC 2012 Spring), Yokohama, Japan, May 6-9, 2012. [EI] 
 M.-S. Lin, J.-S. Leu, W.-C. Yu, K.-H. Li, and J.-L. C. Wu, “TBRA: Termites Based Routing 
Algorithm in 3D Wireless Sensor Networks,” The 75th IEEE Vehicular Technology Conference 
(IEEE VTC 2012 Spring), Yokohama, Japan, May 6-9, 2012. [EI] 
 
 2 
本人於 10/15搭機直達濟州島，立即前往會議舉辦地點，到達會場(Ramada Plaza 
Hotel)後即立刻參與會議，聆聽大會特地邀請工業界的專家介紹當前重點發展技
術，包含巨量資、雲端計算及智慧電視，獲得許多新的研究資訊，可謂收獲甚多。
本人的第一篇論文被安排於 10/15 下午的”Future Internet and Networks”Session 中
發表，第二篇論文被安排於 10/16 下午的”Green Optical Networks”Session 中發表，
順利完成口頭報告外並回答聆聽者的提問。本次會議的進行係採取「多軌制」(multi 
track)的方式，亦即同時有多篇論文或海報論文的發表，在研究上可給予新的激發。
個人並參與聆聽第二天大會安排的 keynote speech，其中來自中國清華大學 Prof. 
Zhisheng Liu 與來自 Korea Telecom 的 Dr. James Won-Ki Hong 分享電信業者目前如何
進行綠能研究與營運上的挑戰，了解產學界專家對此議題的看法，讓曾在電信業者
工作過的我深覺心有戚戚焉之感，也產生一些未來可考慮發展的研究議題。此外、
本人並參與聆聽一些有關於與個人研究較相關的感測網路議題的論文發表，了解到
一些新的研究結果。議程結束後並於濟州島這極具觀光盛名的幾個著名景點參觀，
感受一些異國風情。於當地 10/17 晚上搭回程的飛機，於晚上 20:30 抵達台灣。 
二、與會心得 
 亞太通訊會議或許不算是大規模會議，但會議主持單位相當用心，安排許多實務
上的專家分享實際上的案例，讓會議不致只是學術上的討論，這可讓學者專家可更
務實的研究一些可用的技術，而透過發表自己的研究成果，有機會可取得與會人士
的不同看法，且會議中眾專家學者發表的內容大部分都是最新成果且經過審查，相
互分享與討論可刺激新的思考模式，對於目前網通技術蓬勃發展的研究有很大的助
益，另外，在交流過程中因此會議而認識各國一些從事類似研究的專家學者，將有
Improving Resource Utilization in a Heterogeneous 
Cloud Environment 
 
Hsin-Yu Shih 
Department of Electronic Engineering 
National Taiwan University of Science and Technology 
Taipei, Taiwan 
M9902105@mail.ntust.edu.tw 
Jenq-Shiou Leu, Member, IEEE 
Department of Electronic Engineering 
National Taiwan University of Science and Technology 
Taipei, Taiwan 
jsleu@mail.ntust.edu.tw
 
 
Abstract—Cloud computing features a flexible computing 
infrastructure for large-scale data processing. MapReduce is 
a typical model providing an logical framework for cloud 
computing and Hadoop, an open-source implementation of 
MapReduce, is a common platform to realize such kind of 
parallel computing model. Normally, a cloud computing 
service comprises many heterogeneous commodity machines. 
The original resource arrangement policy in Hadoop only 
focuses on the logical resources, such as free slot number, 
without considering the physical workload of comprehensive 
computing resources, such as the CPU utilization, network 
bandwidth, memory usuage on each working node. This 
paper aims at dispatching the computation load to all 
processing nodes in the cloud computing environment by 
considering the physical workload on each node so as to 
prevent bias in arranging computation resources and hence 
improve the overall computing performance in a 
heterogeneous cloud environment. 
Keywords-Cloud Computing, MapReduce, Large-Scale 
Data Processing, Hadoop 
I.  INTRODUCTION 
With the explosive development of web applications, 
petabytes of data generated by various kinds of network 
applications are processed in the Internet. Cloud 
computing is developed to process massive data, such as 
distributed data sorting, log analyzing, machine learning 
and so on. Analyzing these huge volumes of data requires 
a scalable solution, MapReduce [1], is one well-known 
cloud computing model, features an efficient framework to 
analyze data in parallel with flexible job decomposition 
and sub-tasks allocation. MapReduce can be deployed on a 
large number of commodity machines and can 
automatically handle node failures.  
Hadoop [2], a project maintained by Apache Software 
Foundation and an open-source implementation of 
MapReduce, is primarily used by Yahoo and also 
Facebook, Amazon and Baidu etc. Hadoop is a suitable 
platform to deal with various kinds of applications such as 
data mining and extraction on large-scale of data. In 
Hadoop, there are multiple Map and Reduce tasks in a 
MapReduce job. Each task is a single unit of work that can 
be performed together with other tasks in parallel. 
Assigning tasks to node assign is performed by a master 
node, which distributes tasks to slave nodes. Each slave 
node has a fixed number of Map and Reduce slots for 
executing Map and Reduce tasks. At any time, each slot 
can run only one task. Slot offers a simple abstraction of 
the available resources on a physical machine. The 
primary advantage of slots is the ease of implementation of 
the MapReduce programming model in Hadoop. However, 
this mechanism cannot fully exploit the processing 
capability among nodes especially in the heterogeneous 
environment due to the same slot setting. The original task 
assigning policy in Hadoop only considers the slot 
condition but not the workloads on each processing node 
for job dispatching where working loads should consider 
the CPU utilization, memory resources, network 
bandwidth, storage I/O and any other kinds of computation 
resources. 
In this paper, we design a new resource-aware policy 
in Hadoop to improve the resource utilization among 
nodes in the cloud. We focus on a dynamic slot 
configuration according to the resource availability on all 
processing nodes carrying out Map/Reduce operations. In 
the initialization phase, the proposed scheme creates slots 
in Hadoop nodes, based on the number of computing cores 
on each machine. In the runtime phase, the proposed 
scheme adjusts the number of slots individually by 
considering workload instead of fixing the number of slots 
on each node. Comprehensive experiments show the 
proposed scheme can effectively improve resource 
utilization in a heterogeneous cloud environment. 
The rest of this paper is organized as follows. We 
describe some related works and technical backgrounds in 
Section II and Section III. Section IV illustrates the 
proposed scheme to fairly utilize the node resources in the 
cloud. We then conduct some experiments to validate our 
design in Section V. Finally, a brief conclusion is shown in 
Section VI. 
978-1-4673-4728-0/12/$31.00 ©2012 IEEE APCC 2012185
of the data, and then submits the Map or Reduce task to 
the chosen TaskTracker nodes. When the job is completed, 
JobTracker updates its status and stores the output data.  
In Hadoop, resources are depicted by the concept of 
‘slot’. On the other hand, each TaskTracker is responsible 
for a specific number of slots on each node. The slot 
number determines the max running number of tasks 
which are allowed to be run in parallel on that node at a 
time. The scheduling policy in Hadoop is based on the 
fixed slot number for the lifetime of each node. The slot 
number depicts the computation ability on the node and 
can be configured in an XML file. 
Originally, JobTracker chooses the processing 
TaskTracker in the cluster by one rule - keeping the work 
as close to the data as possible. That is, when JobTracker 
tries to schedule a task with the MapReduce operations, it 
first looks for an empty slot on the same server that hosts 
the DataNode containing the processing data. If not, it 
allocates work to one TaskTracker nearest to the data with 
an available slot. 
During the processing time, each TaskTracker sends 
out heartbeat messages to JobTracker every certain time 
period to notice JobTracker that it is still alive. If 
JobTracker does not receive the heartbeat signals from 
TaskTracker because of node failure or timeout, the 
corresponding job would be rescheduled to another node. 
JobTracker is responsible for scheduling the tasks on the 
slaves, monitoring TaskTracker and rescheduling the 
failed tasks. TaskTracker only needs to execute the Map or 
Reduce task that is issued by JobTracker. 
IV. PROPOSED SCHEME 
A. Slot-Core Ratio / Slot Configuration 
In a typical Hadoop environment, JobTracker looks for 
any available slot on the computation node which owns 
the processing data or is close to the processed data. Each 
computation node initially creates a fixed and common 
slot number. By default, each node contains two Map slots 
and two Reduce slots. We found the default settings are 
too conservative and make Hadoop not fully utilize the 
resources, especially in a heterogeneous machine 
environment.  
As the computer hardware performance revolutionizes 
in recent years, a Hadoop cluster with heterogeneous 
nodes could exhibit significant diversity in processing 
power among nodes. On the other hand, the slot number 
needs to be configured before initialization. To achieve 
better system performance, the slot number on each node 
should therefore be configured on a processor core basis to 
reflect the actual processing power. That means the 
number of slots should be proportional to the number of 
processor cores on each node.  
Intuitively, as the Slot-Core Ratio (SCR) increases, 
more tasks can be executed in parallel on each node so that 
the throughput can increase due to the concurrent 
computation. For example, when a WordCount job with 
several tasks arrive at the node with dual cores, the 
average task execution time (the total task execution time 
divided by the number of parallel tasks) for SCR = 1 is 
higher than the one for SCR=2 due to the concurrent task 
execution as  Fig. 1 shows. However, unlimited increasing 
the Slot-Core Ratio would prolong the task execution time 
caused by too much data-swapping or too much context-
switching among tasks. An optimal SCR to reach better 
resource utilization should be found. 
 
Figure 1.  Parallel processing effect on a node with dual cores 
B. Resource-Aware Task Assigning Scheme 
Even if the slot number is configured optimally, the 
original task assigning policy only depends on the slot 
availability. When the TaskTracker on one node contains 
any free slots, it would get tasks assigned by JobTracker 
without considering the node’s current load. As the 
example shown in Fig. 2, each TaskTracker sends out its 
heartbeat messages to JobTracker to reassure its aliveness. 
JobtTracker uses the empty slot information within the 
heartbeat message to determine how to assign tasks to 
TaskTracker. 
 If TaskTracker n informs TaskTracker through the 
heardbeat message that it still has two free slots but a non-
Hadoop load occurs to cause a 100 percentages of CPU 
usage on the same node, JobTracker may still assign 
choose two tasks to TaskTracker n by the original task 
assigning policy even though the CPU is overloaded. If 
JobTracker assigns tasks to an overloaded TaskTracker, 
the whole job completion time might be prolonged since 
those tasks are processed by a heavy CPU. This fact is 
expected since the original TaskTracker does not consider 
the physical workload when assigning tasks to slots on 
each node. 
22.115
17.783
0
5
10
15
20
25
SCR = 1 SCR = 2
A
ve
ra
ge
 T
as
k 
E
xe
cu
tio
n 
T
im
e 
(s
)
187
B. Evaluating the Resource-Aware Task Assigning 
Scheme 
The experiment is to evaluate how the proposed 
resource-aware task assigning scheme can raise the system 
performance when assigning tasks to slots on each node. 
Our proposed scheme considers the physical workload 
instead of the free slots on each node to assign tasks. We 
assume some non-Hadoop job exists in some node in the 
cluster. To compare different situations, we submit two 
Hadoop jobs with one minute gap only but without non-
Hadoop loading first to form the comparison baseline. 
Next, we try to conduct another experiment evaluation by 
submitting two Hadoop jobs with one minute gap when 
some non-Hadoop job has existed in the cluster. But the 
task assigning policy just follows the default rule by 
considering the free slots on each node. Finally, we try to 
conduct the evaluation by exploiting our proposed 
resource-aware scheme. All evaluation results for these 
three situations are shown in Fig. 5. 
 
Figure 5.  Average Job Execution Time Comparsion for Different 
Situations 
Since the default task assigning policy considers the 
slot numbers only, the TaskTracker when facing an existed 
non-Hadoop job still assign the same volume of tasks to 
these free slots among nodes as the TaskTracker does 
when no non-Hadoop job exists in the cluster. The average 
job execution time might become higher since those tasks 
may be assigned to a heavy node. As shown in Fig. 5, the 
average job execution may take additional 9.4~10.7% 
more time.  
By our resource-aware policy, the actual workload 
instead of the number of free slots on each node is taken 
into consideration to determine how the hadoop tasks are 
assigned to nodes. That is, if the load on some node is 
heavier than other nodes, this node may receive less 
assigned tasks than others. In the evaluation, the proposed 
scheme determines how many tasks are assigned to each 
node based on the CPU and memory utilization of each 
node. Shown in Fig. 5, there is at most additional 5.4% of 
the execution time compared to the original policy.  
VI. CONCLUSION 
In this paper, we propose two schemes to improve the 
resource utilization in a heterogeneous Hadoop cluster. 
First, the number of slots on each node is initialized based 
on the CPU cores of each node to reflect the different 
processing power for different types of nodes. Second, 
instead of assigning tasks to free slots on each node, our 
resource-aware task assigning scheme dispatches the tasks 
to each node based on the physical workload of each node. 
Furthermore, we conduct comprehensive experiments to 
validate our proposed schemes. 
ACKNOWLEDGEMENT 
The authors gratefully acknowledge the support by the 
National Science Council, Taiwan, under grants 100-2221-
E-011-154-. 
REFERENCES 
[1] J. Dean and S. Ghemawat, “MapReduce: Simplified data 
processing on large clusters,” in USENIX Symposium on 
Operating Systems Design and Implementation, San Francisco, CA, 
Dec 2004, pp. 137–150. 
[2] Apache Software Foundation, “Hadoop,” 2007. Available: 
http://Hadoop.apache.org/core 
[3] M. Hong, Z. Zhenzhong, Z. Bin, X. Limin, and R. Li, "Towards 
Deploying Elastic Hadoop in the Cloud," in Cyber-Enabled 
Distributed Computing and Knowledge Discovery (CyberC), 2011 
International Conference on, 2011, pp. 476-482. 
[4] H. C. Lim, S. Babu, and J. S. Chase, "Automated control for elastic 
storage," presented at the Proceedings of the 7th international 
conference on Autonomic computing, Washington, DC, USA, 
2010. 
[5] M. Chowdhury, M. Zaharia, J. Ma, M. I. Jordan, and I. Stoica, 
"Managing data transfers in computer clusters with orchestra," 
SIGCOMM Comput. Commun. Rev., vol. 41, pp. 98-109, 2011. 
[6] D. Jiang, B. C. Ooi, L. Shi, and S. Wu, "The performance of 
MapReduce: an in-depth study," Proc. VLDB Endow., vol. 3, pp. 
472-483, 2010. 
[7] S. Babu, "Towards automatic optimization of MapReduce 
programs," presented at the Proceedings of the 1st ACM 
symposium on Cloud computing, Indianapolis, Indiana, USA, 
2010. 
[8] K. Kambatla, A. Pathak, and H. Pucha, "Towards optimizing 
hadoop provisioning in the cloud," presented at the Proceedings of 
the 2009 conference on Hot topics in cloud computing, San Diego, 
California, 2009. 
[9] R. Boutaba, L. Cheng, and Q. Zhang, "On Cloud computational 
models and the heterogeneity challenge," Journal of Internet 
Services and Applications, vol. 3, pp. 77-86, 2012. 
[10] J. Dean and S. Ghemawat, "MapReduce: simplified data 
processing on large clusters," Commun. ACM, vol. 51, pp. 107-113, 
2008. 
[11] M. Zaharia, A. Konwinski, A. D. Joseph, R. Katz, and I. Stoica, 
"Improving MapReduce performance in heterogeneous 
environments," presented at the Proceedings of the 8th USENIX 
conference on Operating systems design and implementation, San 
Diego, California, 2008. 
0
50
100
150
200
250
Scenario 1
(5G/5G)
Scenario 2
(5G/3G)
Scenario 3
(5G/1G)
A
ve
ra
ge
 J
ob
 E
xe
cu
tio
n 
T
im
e 
(s
)
SCR = 2 without non-Hadoop load
SCR = 2 with non-Hadoop load
proposed scheme with non-Hadoop load
189
other was ramping the CPU clock speed. These optimizations 
summed up to 10% of savings in power consumption. 
Nevertheless, the power measurement strategy didn’t consider 
random noise leaving an opening that could have affected the 
measurements obtained. 
One of the first approaches to implement Reinforcement 
Learning to optimize power consumption was made back in 
1999 by a joint research lead by Stanford Universtity [6]. 
Although it was focused on Laptops and the control was in 
charge of the administration of different power resources of the 
device, it is the start point for many other studies that have 
been published in recent years. 
[5-6] use a Markov Decision Process (Reinforcement 
Learning Technique) to maximize the cumulative reward until 
a specified battery charging time. The main idea of the power 
control is to keep running apps with higher quality or less delay 
as long as the remaining battery is sufficient. Otherwise, the 
system shall conserve energy to be available for phone 
calls.Two generic tasks were controlled through this method: 
Data synchronization and WiFi Radio control. However, each 
case was studied apart. Moreover, the power measurement 
implementation is not really well structured, so that there’s 
some margin for these data to be a bit inaccurate.Results were 
quite good as the implemented framework allowed the battery 
never get drained for complete in most simulations. Cons were 
delay due to request accumulation. 
[9] Introduces a reinforcement learning approach to 
implement a power aware collaborative execution for mobile 
phones. This allows the phones to share resources with other 
devices as long as this sharing won’t drain the battery. A 
Markov Decision Process is used to develop this 
method.Having in mind previous implementation, it can be said 
that there’s room for improving these control systems by going 
further into a general radio selection mode. 
[10] Implements batch scheduling for recurrent 
applications. The saving Energy strategy consists in 
accumulating requests and processing them at once, to save 
time in network connections. However, due to the considerable 
amount of connection requests, the Energy saved is relatively 
low (Less than 5%). 
Reference [11] implements an algorithm to switch between 
different networks. The focus of this study is on data flow 
control, and the selection is basically made based on bandwidth 
than any other variable. Also, it can be mentioned than there’s 
no intelligent management in the design.[12] is one of the best 
research studies done in the field of network radio selection for 
power saving. By implementing a statistical decision problem, 
the authors reached an improvement of up to 35% in battery 
lifetime. 
III. POWER CONSUMPTION CHARACTERIZATION 
The purpose of this section is to introduce a methodology to 
measure the power consumption of different modules of the 
phone. Developing a step by step method that intends to reduce 
the error and obtain accurate data is a key work to be done, not 
only to know which module consume power the most, but also 
to establish a measurement technique for similar research 
studies. 
Related work has deducted that the modules that consume 
Energy the most are the Wireless (802.11)  and Cellular 
Network Modules (GSM, Edge, 3G) [3][4]. There’s another 
study in which points the LCD module[5]. 
A. Power Measurement Methodology 
Having in mind the related work and the purpose of this 
study, this section will describe a methodology which consists 
in reaching the following goals: 
• Establishing a non-intrusive and accurate power 
measurement method. 
• Implementing a script based power measurement to 
diminish random noise. 
• Characterize the following phone modules: 
 Phone in idle State. 
 Phone working (No wireless radios on). 
 Screen (Minimum and maximum brightness). 
 Phone call. 
 3G Internet Connection. 
 Wifi Internet Connection. 
 SD Card. 
 Multimedia player. 
 
The equipment used to measure the power consumption of 
the phone was a Digital meter scope TECPEL OS-81B and a 
power supply GW-INSTEK GPS-30300. The phone used is a 
Samsung Galaxy S2 running Android 2.1. The basic 
configuration used to measure the current can be observed in 
Figure 1. 
 
Figure 1. Setup to measure power consumption 
The Power supply was set at a fixed voltage of 4.2Volts. In 
this way, we can work with constant voltage and only one 
variable parameter, the current. The meter OS-81B was used to 
measure the current and its log was sent via USB to a computer 
to register the power profile. An example ofdata acquisition 
profile can be seen in the following figure: 
 
Figure 2. Setup to measure power consumption 
 
505
Therefore, a way to control or regulate this draining is 
needed, if we want to maximize the phone usage and keep it 
available for phone calls. 
V. POWER SAVING TECHNIQUE DESIGN 
The information compiled by the previous method is a very 
important tool to proceed with the next step of this study, 
which is to design an Intelligent Power Saving Technique.  
There are already enough and well developed Intelligent 
Control techniques that can be used for this purpose.Therefore, 
this is when the technique called Reinforcement Learning 
comes in as a useful tool to approach a viable solution. 
[13]mentions, among other advantages, that we can count with 
evaluative feedback, exploration capabilities and online 
performance.Furthermore, Since we have stochastic variables 
involved (phone calls),previous related work [7, 8] and [13] 
have pointed that a Markov Decision Process system as one of 
the most suitable tools for the current scenario. 
A. Modeling the System 
The main functions that we are going to model through are 
systems are: 
• Granting access and administer the two modules that 
consume power the most: WIFI radio and Cellular/3G 
Radio. 
• Network connection. 
• Choose the less power consuming module. 
Our approach, although is based on the model exposed in 
[7, 8], differs from it since the purpose is to switch between 
networks and not only to switch off one network interface. 
Besides that, comparing to [10, 11] our work implements a 
reinforcement learning control system approach instead of 
statistical and or prediction strategy. 
Based on previous work made in [7], we can also define that 
the Input States of our model are: 
 
• : time since last recharge period. 
• : time when next recharge period will occur. 
• : remaining energy of phone. 
• : signal strength. 
• : download request at phone (0 no request, 1: 
request). 
• : call status of phone (0: no call, 1: call). 
• :power consumption at time t. 
 
The Rewards and Energy Costs involved in the system: 
 
• : reward for one unit of call time. 
• : reward for successful download. 
• : download energy cost with signal strength. 
• : energy for requester to receive download. 
 
Therefore, we have to analyze some possible scenarios. The 
first one is when there’s no call arrival nor download request. 
If so, the value function (directly related to the power 
consumption) is: 
 
, , , 0 = , ,  +  + 1,  − , , ′ 
 
When a phone call arrives then we have: 
 
, , ,  = , [ +  + 1, − , , 0] 
 
And when the phone is going to make  download, we have: 
 
, , ,  = , , ′[ +  + 1, − , , ] 
 
Therefore, we have to find an optimal action a for all possible 
combinations of E, S, Q states that can include immediate and 
future reward:, , , . 
 
The final value function when the phone doesn’t want to 
download will be given by: 
 
, , , 0 = , , , 0 + 1 − , , , 0 
 
When the phone wants to download, the value function comes 
given by: 
 
, , ,  = , , , 0
+ 1 − max	, , ,  
 
To solve our problem, boundary conditions are as follows: 
 
, , ,  = ; 
, 0, ,  = 0 
 
The system has to be solved through Backward Induction, 
and the results of the solution will be further explained in the 
following section. 
VI. RESULT ANALYSIS 
The paremeters used for the simulation are shown in the 
following table: 
Table 2 Simulation parameters 
Parameter  Value 
Unit time (t) 1 minute 
Target for next recharge(T)  8 hours 
Battery Energy 18000J 
Energy available (average)* 8500J 
 
The approximate energy that the battery our Smartphone 
provides is 18000J. However, we have to subtract the idle, 
phone call time (obtained in the log), and the screen 
consumption (based on [5]). That leaves 8500J for our system 
model to control. Making good use of this energy is vital to 
keep the battery life until the next recharging time. 
The intelligent control system works in such a way that we 
have to maximize the reward in order not to run out of the 
energy remaining. The results are shown in the following 
table: 
 
507
國科會補助計畫衍生研發成果推廣資料表
日期:2012/10/20
國科會補助計畫
計畫名稱: 子計畫二：基於物聯網異質感測器網路管理與雲端接取路由技術之研究(I)
計畫主持人: 呂政修
計畫編號: 100-2221-E-011-154- 學門領域: 計算機網路與網際網路
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
