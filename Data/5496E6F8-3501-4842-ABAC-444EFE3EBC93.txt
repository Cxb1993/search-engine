A Bottleneck-based Heuristic for Minimizing Makespan in a Flexible 
Flow Line with Unrelated Parallel Machines 
 
Abstract 
This study proposes the use of a bottleneck-based heuristic for a flexible flow line 
(BBFFL) to address a flexible flow line problem with a bottleneck stage, where 
unrelated parallel machines exist in all the stages, with the objective of minimizing the 
makespan. The essential idea of BBFFL is that scheduling jobs at the bottleneck stage 
may affect the performance of a heuristic for scheduling jobs in all the stages. Therefore, 
in BBFFL, a variant of Johnson’s rule was used to develop a bottleneck-based initial 
sequence generator (BBISG). Then, a bottleneck-based multiple insertion procedure 
(BBMIP) was applied to the initial sequence to control the order by which jobs enter the 
bottleneck stage to be the same as that at the first stage. Five experimental factors were 
used to design 243 different production scenarios and ten test problems were randomly 
generated in each scenario. These test problems were used to compare the performance 
of BBFFL with several well-known heuristics. Computational results show that the 
BBFFL significantly outperforms all the well-known heuristics. 
 
KEY WORDS: Bottleneck-based multiple insertion heuristic; Flexible flow line; 
Bottleneck, Unrelated parallel machines; Makespan 
 
 
1. Introduction 
This study considers the scheduling problems in a flexible flow line with a 
bottleneck stage and with unrelated parallel machines in all the stages.  A flexible flow 
line (FFL) is also called a flexible flow shop (FFS), a hybrid flow shop (HFS), or a flow 
shop with multiple processors (FSMP).  A typical FFL problem can be defined as 
follows: there are N jobs passing through a J-stage flow line with one or more parallel 
machines at each stage.   There are unlimited buffers between two successive stages.  
The flow of jobs through the shop is unidirectional and moves from the first stage to the 
last stage in order.  Flexible flow lines occur in many different manufacturing 
environments, including electronics manufacturing (Wittrock, 1988), the packaging 
industry (Adler et al., 1993), the pharmaceutical sector (Guinet and Solomon, 1996), 
glass container fabrication (Leon and Ramamoorthy, 1997), automobile assembly 
(Agnetis et al., 1997), printed circuit board (PCB) assembly (Jin et al., 2002; Sawik, 
2002), PCB fabrication (Alisantoso et al., 2003; Lee et al., 2003; Choi et al., 2005), 
multilayer ceramic capacitor (MLCC) manufacturing (Yang et al., 2004), leadframe 
manufacturing (Lee et al., 2004), ceramic tile manufacturing (Ruiz and Maroto, 2006), 
and metal forming, plastic injection, weaving, and assemblies (Jenabi et al., 2007). 
The bottleneck phenomena occur frequently in many manufacturing systems. 
Goldratt and Cox (1992) stated the idea that bottleneck resources govern overall system 
performance.  Bottleneck management is a very important task on the shop floor and is 
extremely effective in production scheduling.  Scheduling approaches for flow shop 
and job shop problems with bottleneck stages usually include three steps (Adler et al., 
1993; Pinedo, 2002): (1) identify bottleneck stage, (2) schedule bottleneck stage, and (3) 
schedule non-bottleneck stages.  The drum-buffer-rope (DBR) scheduling method 
proposed by Goldratt and Fox (1986), derived from the theory of constraint (TOC), is a 
renowned approach.  This method concentrates on scheduling constraint resources 
 2
describes and analyzes computational experiments.  Finally, section 5 summarizes the 
major findings of this research and proposes some further research. 
 
2. Literature review 
Heuristics can be classified into three types: index-development, solution- 
construction, and solution-improvement (Framinan et al., 2004).  However, some 
heuristics may consist of one or more of these types.  Dispatching rule belongs to the 
type of index-development, and multiple-insertion heuristic is a solution-construction 
type.  Meta-heuristic such as tabu search algorithm and simulated annealing algorithm 
can be regarded as a solution-improvement type.  Obviously, solution-improvement 
type heuristics take the longest computation time to find a solution, but index- 
development type heuristics find a solution fast.  A brief review of literature on the 
work in FFL problems using these three types of heuristics is presented below. 
Over the past several decades, many heuristics have been developed for FFL 
problems with identical parallel machines.  Dispatching rules are commonly used 
heuristics for FFL problems.  Hunsucker and Shah (1994) evaluated six priority rules 
under congestion levels in a constrained flow shop with multiple processors 
environments for makespan, mean flowtime and maximum flowtime.  The results of 
the simulation study indicated that the shortest processing time rule (SPT) yielded 
superior performance for makespan and mean flow time criteria.  However, for the 
maximum flow time criterion, clear superiority of a particular dispatching procedure 
was not established.  Kadipasaoglu et al. (1997) have also found the SPT rule to be the 
best rule on flow time and makespan.  Brah and Wheeler (1998) investigated the effect 
on mean flow time and makespan of scheduling rules with dynamically established 
priorities in a FFL.  Nine rules were tested and the SPT rule was consistently superior.  
Jayamohan and Rajendran (2000) studied many dispatching rules in flexible flow shops.  
They reported that PT +WINQ+AT (process time + work in next queue + arrival time) 
rule could offer good performance for the makespan.   
In addition, many heuristics have been developed for pure flow shop problems.  
Palmer (1965), CDS (Campbell et al., 1970), Gupta (1971), DAN (Dannenbring, 1977), 
NEH (Nawaz et al., 1983), and CDSD (Park et al., 1984) are well-known ones.  These 
heuristics have recently been applied to solve FFL problems.  Santos et al. (1996) 
evaluated the performance of the heuristics of Palmer, CDS, Gupta, and DAN on FFL 
problems.  Their results showed that the heuristics of CDS and DAN outperformed the 
other two heuristics.  Brah and Loo (1999) investigated the performance of the 
heuristics of CDS, Gupta, DAN, NEH and CDSD.  Their results showed that NEH 
dominated all other heuristics.  Note that NEH is a solution-construction type heuristic.   
Local searches or meta-heuristics such as tabu search, genetic algorithm, and 
simulated annealing algorithm are common approaches used to solve FFL problems.  
Chen et al. (1998) proposed a tabu search heuristic to solve flexible flow line scheduling 
problems with minimizing makespan.  Wardono and Fathi (2004) considered FFL 
problems with limited buffer capacities between stages.  Their primary objective was 
to find a schedule that would minimize makespan.  They developed a tabu search 
algorithm to solve problems.  Bertel and Billaut (2004) developed a genetic algorithm 
to solve a multi-processor flow shop problem involving recirculation and considered the 
objective of minimizing the total number of weighted tardy jobs.  Sivrikaya Serifoglu 
and Ulusoy (2004) also proposed a genetic algorithm to solve FFL problems with 
minimizing makespan.  Jin et al. (2006) proposed the simulated annealing algorithm to 
 4
ibsP = processing time of job i on machine s at bottleneck stage b  
RRj= the workload of stage j 
iJC = completion time of job i at last stage J 
min
ifP = total minimum processing time required for job i before the bottleneck stage b 
min
ilP = total minimum processing time required for job i after the bottleneck stage b 
 
3.2 Assumptions 
The FFL problem considered in this paper assumes that there are J stages and 
include a bottleneck stage b.  There are mj unrelated parallel machines in stage j and 
the number mj may vary from stage to stage.  There are n jobs to be processed and 
each job has the same routing and must visit all the stages consecutively.  All jobs are 
available at time zero.  The processing time of an operation of a job at a stage depends 
on the machine assigned at the stage, and it is known in advance.  A machine can 
process only one job at a time, and jobs cannot be preempted.  There are unlimited 
buffers between stages.  There is no machine breakdown and no set-up time required 
before jobs are processed on any machine. 
The workload is used as an indicator to identify the bottleneck stage.  Since the 
machines are unrelated at each stage, the processing time of an operation at a stage is 
dependent upon the machine assigned to the operation.  The workload of stage j is 
computed by the sum of the average processing times of all the operations processed at 
the stage divided by its number of machines, denoted as RRj = j
n
i ij
mp /)(
1∑= .  The stage 
with the largest Rj,R  is defined as the bottleneck stage.  
 
3.3 The Bottleneck-Based Heuristic for the Candidate FFL problem (BBFFL) 
Garey et al. (1976) proved that minimizing makespan for the flow shop problem 
with three machines is NP-hard in the strong sense. Hoogeveen et al. (1996) proved that 
minimizing makespan for two-stage FFL problems with stage 1 having one machine and 
stage 2 having two machines or with stage 1 having two machines and stage 2 having 
one machine is NP-hard. Therefore, the candidate FFL problem considered is at least 
NP-hard.    
A bottleneck-based heuristic (BBFFL) is proposed to solve the candidate FFL 
problem. The proposed heuristic belongs to the classification of solution construction.  
Its main idea is that scheduling the jobs at the bottleneck stage may affect the 
performance of a heuristic for scheduling the jobs in all the stages. Therefore, BBFFL 
generates schedules on the basis of the schedule produced at the bottleneck stage. This 
heuristic consists of three steps: (1) Identifying the bottleneck stage, (2) generating an 
initial sequence of the jobs by a bottleneck-based initial sequence generator (BBISG), 
and (3) applying a bottleneck-based multiple insertion procedure (BBMIP) to the initial 
sequence to generate the final schedule.   
Applying Johnson’s rule to solve the two-machine flow shop problem with 
makespan as the objective can obtain the optimal schedule. There have been many 
studies extending the idea of Johnson’s rule to construct several variant heuristics 
(Gupta, 1997; Chen and Lee, 1998; Kurz and Askin, 2003). The bottleneck-based initial 
sequence generator (BBISG) is also a variant of Johnson’s rule (SPT-LPT rule). The 
FFL can be divided into three subsystems: the upstream subsystem (the stages ahead of 
the bottleneck stage), the bottleneck subsystem (the bottleneck stage), and the 
 6
bottleneck stage to be the same as that at the first stage. The procedure of BBMIP is 
presented as follows. 
Step 1. Select the first job in the initial sequence generated by BBISG and let it be the 
current partial sequence. 
Step 2. Select the next job in the initial sequence and insert the job into the positions 
before, between and after every two consecutive jobs of the current partial 
sequence. 
Step 3. Calculate makespan for each partial sequence produced in Step 2 while 
adjusting jobs’ entering sequence at the bottleneck stage to be the same as that 
at the first stage. 
Step 4. Select the partial sequence with minimum makespan and let the partial 
sequence be the current partial sequence. 
Step 5. If the current partial schedule includes all the n jobs, then stop; otherwise go to 
Step 2. 
 
We use a simple example to illustrate the procedure of BBFFL.  This example 
includes three jobs and three stages; each stage has two machines.  The processing 
times of the jobs on each machine at each of the stages are shown in Figure 1.  The 
workloads of the stages are RR1 = 66.25, R2R  = 135, RR3 = 72.5; Stage 2 is the bottleneck 
stage.  ECALLM is the machine selection rule used in this example to select the 
machines at all the stages.  Figure 2 displays the procedure to generate the initial 
sequence by using BBISG for the example, and Figure 3 displays the procedure to 
generate the best schedule by using BBMIP for the example.  A four-field notation is 
used to express the schedule of a job at a stage in Figure 3.  The first field describes 
the job number and the second field describes the selected machine for the job at the 
stage.  The third and the fourth fields provide the start time and completion time of the 
job on the selected machine, respectively.  Note that, in Figure 3, while calculating the 
makespan for all the partial sequences, the entering sequence at the bottleneck stage, 
Stage 2, is adjusted to be the same as that at Stage 1.  However, as mentioned 
previously, jobs’ entering sequence at a stage is dependent on the jobs’ completion times 
at its previous stage, so jobs’ entering sequence at Stage 2 may not be the same as that at 
Stage 1 if BBMIP is not applied.  Figure 4 presents the two cases in Figure 3 whose 
jobs’ entering sequence at Stage 2 is not the same as that at Stage 1 if BBMIP is not 
applied.  For instance, in calculating the makespan for job sequence 3-1, the entering 
sequence of the two jobs at Stage 2 should be 1-3 if BBMIP is not applied because the 
completion time of job 1 at Stage 1 is 40, 1/M12/0/40, and the completion time of job 3 
at Stage 1 is 45, 3/M11/0/45.  With this entering sequence at Stage 2, if machine 1 is 
assigned to job 1, the completion time of job 1 is 130, and if machine 2 is assigned to 
job 1, the completion time of job 1 is 150.  Therefore, according to ECALLM, 
machine 1 is selected for job 1 at Stage 2 and denoted as 1/M21/40/130.  The first case 
in Figure 4 presents the result for calculating the makespan for partial sequence 3-1 
without the application of BBMIP; the makespan is 215, which is worse than that of the 
same sequence with the application of BBMIP.  The second case in Figure 4 presents 
the result for calculating makespan for partial sequence 3-1-2 without the application of 
BBMIP; the makespan is 240, which is worse than that for the same sequence with the 
application of BBMIP. 
 
4. Computational experiments  
 8
to around 31.08 to 45.58 when ECAM is used and further decrease to around 3.28 to 
10.78 when ECALLM is used.  Also, when EAAM is used, the NBS are all 0, and they 
increase to several hundred when ECAM and ECALLM are used.  As for BBFFL, 
when EAAM is used, the average RPD is around 70.16.  It significantly decreases to 
about 22.07 when ECAM is used and further decreases to about 0.70 when ECALLM is 
used.  The NBS shows the same tendency as that of the well-known heuristics.  When 
EAAM is used, the NBS is 0.  It increases to over 50 when ECAM is used and further 
increases to over 1,600 when ECALLM is used.  These results demonstrate the strong 
effect of the machine selection rule, ECALLM, on the performance of all the heuristics.  
This may be due to the fact that in a stage with unrelated parallel machines, an 
unavailable but more efficient machine may produce earlier completion time for a job.  
Second, within each of the machine selection rules, BBFFL outperforms the well-known 
heuristics.  When EAAM is used, the RPD produced by BBFFL is 70.16, and the RPD 
produced by the best well-known heuristic, CDS, is 79.34.  When ECAM is used, the 
RPD produced by BBFFL is 22.07, and the RPD produced by the best well-known 
heuristic, NEH, is 31.08.  When ECALLM is used, the RPD produced by BBFFL is 
0.70, while the RPD produced by the best well-known heuristic, NEH, is 3.28.  The 
NBS shows the same tendency; when ECALLM is used, the NBS produced by BBFFL 
is 1,639, and the NBS produced by the best well-known heuristic, NEH, is 470.  Note 
that although BBFFL using ECALLM is not able to produce best solutions for all the 
test examples, it deviates from the best solutions, on average, by only 0.7%.   
 
“Please Insert Table 2 about here” 
 
We further applied the analysis of variance (ANOVA) and the least significance 
difference method (LSD) to test the RPD of the 2,430 test problems to confirm the 
previous conclusions.  The four well-known heuristics and BBFFL are grouped into a 
factor and denoted as the algorithms.  Table 3, the ANOVA table, shows that machine 
selection rules significantly affect the performance of the well-known heuristics and 
BBFFL, and Table 4, the result of the LSD test, shows that ECALLM significantly 
dominates ECAM and EAAM.  Note that in Table 4, the machine selection rules are 
sequenced in descending order in terms of their average RPD, and the rules with the 
same letter represent that the performance of the rules are not significantly different.  
Then, within each of the machine selection rules, we applied the analysis of variance 
and the LSD test to test if BBFFL significantly outperforms the well-known heuristics.  
Since the test results for the three machine selection rules are about the same, we 
present only the results for ECALLM here.  Table 5, the ANOVA table, shows that the 
performance of BBFFL and the four well-known heuristics is significantly different, and 
Table 6, the result of the LSD test, shows that BBFFL significantly dominates all the 
well-known heuristics.   
 
“Please Insert Table 3 about here” 
“Please Insert Table 4 about here” 
“Please Insert Table 5 about here” 
“Please Insert Table 6 about here” 
 
According to the previous analyses, BBFFL working with ECALLM is the best 
heuristic for the candidate problem, and it is denoted as BBFFL/ECALLM.  We further 
 10
REFERENCES 
Adler, L., Fraiman, N., Kobacker, E., Pinedo, M., Plotnicoff, J. C. and Wu, T. P., 1993. 
BPSS: A scheduling support system for the packaging industry. Operations 
Research 41, 641–648. 
Agnetis, A., Pacifici, A., Rossi, F., Lucertini, M., Nicoletti, S., Nicolo, F., Oriolo, G., 
Pacciarelli, D. and Pesaro, E., 1997. Scheduling of flexible flow shop in an 
automobile assembly plant. European Journal of Operational Research 97, 
348–362. 
Alisantoso, D., Khoo, L. P. and Jiang, P. Y., 2003. An immune algorithm approach to 
the scheduling of a flexible PCB flow shop. International Journal of Advanced 
Manufacturing Technology 22, 819–827. 
Bertel, S. and Billaut, J. C., 2004. A genetic algorithm for an industrial multiprocessor 
flow shop scheduling problem with recirculation. European Journal of Operational 
Research 159, 651–662. 
Brah, S. A. and Loo, L. L., 1999. Heuristics for scheduling in a flow shop with multiple 
processors. European Journal of Operational Research 113, 113–122. 
Brah, S. A. and Wheeler, G. E., 1998. Comparison of scheduling rules in a flow shop 
with multiple processors: A simulation, Simulation 71, 302–311. 
Campbell, H. G., Dudek, R. A. and Smith, M. L., 1970. A heuristic algorithm for the 
n-job, m-machine sequencing problem. Management Science 16, 630–637. 
Chen, C. L., Usher, J. M. and Palanimuthu, N., 1998. A tabu search based heuristic for a 
flexible flow line with minimum flow time criterion. International Journal of 
Industrial Engineering 5, 157–168. 
Chen, Y. C. and Lee, C. E., 1998. Bottleneck-based group scheduling in a flow line cell. 
International Journal of Industrial Engineering-Applications and Practice 5, 
288–300. 
Choi, S. W., Kim, Y. D. and Lee, G. C., 2005. Minimizing total tardiness of orders with 
reentrant lots in a hybrid flowshop. International Journal of Production Research 
43, 2149–2167. 
Conway, R., 1997. Comments on an exposition of multiple constraint scheduling. 
Production and Operations Management 6, 23–24. 
Dannenbring, D. G., 1977. An evaluation of flow shop sequencing heuristics. 
Management Science 23, 1174–1182. 
Garey, M. R., Johnson, D. S. and Sahni, S., 1976. Fowshop and jobshop schedules: 
complexity and approximation. Mathematics of Operations Research 1, 117–127. 
Goldratt, E. and Fox, R., 1986. The Race. (North River Press: New York). 
Goldratt, E. and Cox, J., 1992. The Goal: A Process of Ongoing Improvement. (North 
River Press: New York).  
Guinet, A. G. P. and Solomon, M., 1996. Scheduling hybrid flowshops to minimize 
maximum tardiness or maximum completion time. International Journal of 
Production Research 34, 1643–1654. 
Gupta, J. N. D., 1971. A functional heuristic algorithm for the flow-shop scheduling 
problem. Operations Research Quarterly 22, 39–47. 
Gupta, J. N. D., 1997. A flowshop scheduling problem with two operations per job. 
International Journal of Production Research 35, 2309–2325. 
Hoogeveen, J. A., Lenstra, J. K. and Veltman, B., 1996. Preemption scheduling in a 
two-stage multiprocessor flowshop is NPhard. European Journal of Operational 
Research 89, 172–175. 
 12
Saddle River, New Jersey). 
Rajendran, C. and Alicke, K., 2007. Dispatching in flowshops with bottleneck 
machines. Computers and Industrial Engineering 52, 89–106. 
Ruiz, R. and Maroto, C., 2006. A genetic algorithm for hybrid flowshops with sequence 
dependent setup times and machine eligibility. European Journal of Operational 
Research 169, 781–800. 
Santos, D. L., Hunsucker, J. L. and Deal, D.E., 1996. An evaluation of sequencing 
heuristics in flow shops with multiple processors. Computers and Industrial 
Engineering 30, 681–692. 
Sawik, T., 2002. An exact approach for batch scheduling in flexible flow lines with 
limited intermediate buffers. Mathematical and Computer Modeling 36, 461–471. 
Sivrikaya Serifoglu, F. and Ulusoy, G., 2004. Multiprocessor task scheduling in 
multistage hybrid flow-shops: a genetic algorithm approach. Journal of the 
Operational Research Society 55, 504–512. 
Wardono, B. and Fathi, Y., 2004. A tabu search algorithm for the multi-stage parallel 
machine problem with limited buffer capacities. European Journal of Operational 
Research 155, 380–401. 
Wittrock, R.J., 1988. An adaptable scheduling algorithm for flexible flow lines. 
Operations Research 36, 445–453. 
Yang, T., Kuo, Y. and Chang, I., 2004. Tabu-search simulation optimization approach 
for flow-shop scheduling with multiple processors – a case study. International 
Journal of Production Research 42, 4015–4030. 
Yu, L., Shih, H. M., Pfund, M., Carlyle, W.M. and Fowler, J.W., 2002. Scheduling of 
unrelated parallel machines: an application to PWB manufacturing. IIE 
Transactions 34, 921–931. 
 
Table 1. Experimental design for generating test problems 
Experimental Factors Levels  
Number of jobs 30 
50 
100 
L 
M 
H 
Number of stages 5 
10 
20 
L 
M 
H 
Variation of processing 
times 
U[10, 50] 
U[10, 100] 
U[10, 200] 
L 
M 
H 
Position of bottleneck stage The first quarter of the flow line  
The second quarter of the flow line  
The third quarter of the flow line 
L 
M 
H 
Workload difference 1.1 
1.5 
2.0  
L 
M 
H 
 
 
 
 14
