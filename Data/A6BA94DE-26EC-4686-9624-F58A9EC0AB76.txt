二、 中、英文摘要及關鍵詞(keywords)。
摘要:
在無線網路的通訊應用上，手持式系統的使用在日常生活裡變得很普及。將資訊傳輸與嵌入
式的設計整合在手持式系統的需求變得越來越重要，尤其今日網路普及使得資訊的傳播更遠、取
得更容易。透過手持式系統，也可以將資訊完整的接收和傳送。但在資訊傳輸的過程中，如何確
保資訊的完整性及保密性變成最重要的議題。我們必須確保傳輸過程中不被外人竊取傳輸資料或
是不被破解其內容。因此，將加解密機制結合在手持式系統上變成很重要的趨勢。
但在有限處理能力的嵌入式處理器上，除了得負責系統的運作和控制外，還得兼顧資料運算
量大的資訊保密標準演算法，會造成系統嚴重的負擔且影響其整體電能的消耗。因此，本計畫在
於透過硬體化設計資訊保密標準演算法(採用先進加解密標準)外，用以降低系統的負擔外且兼具考
量低耗電的設計，以降低對整體電源的消耗。本計畫的重點為:
(1) 設計低耗電及小面積的 AES 硬體電路。
(2) 應用所設計的 AES 硬體電路在手持式通訊設備上。
運用以上的設計，將使得設備兼具有安全服務及低耗電之特性，也可達到低成本的設計目標。
關鍵詞: 低耗電、超大型積體電路、先進加密演算法、嵌入式系統。
Abstract:
In the applications of wireless communication network, the use of handheld appliances becomes
popular in our daily life. The requirement of integrating information transmission and embedded design
into a handheld system becomes more and more important. Especially, it is easy to obtain the
information under today’s network broadcasting. Through the handheld system, we can receive and
transmit information entirely. But in the transmission process, how to confirm the information integrity
and security becomes one of the most important issues. We need to make sure that no stranger can
destroy or intercept our transmitted data in transmission. Hence, the integration of encryption/decryption
mechanisms with handheld system becomes one of the important trends currently.
Low Cost Design of an Advanced Encryption Standard (AES) Processor
Using a New Common-Subexpression-Elimination Algorithm
Abstract - In this paper, we propose an area-efficient design of
Advanced Encryption Standard (AES) processor by applying a
new common-expression-elimination (CSE) method to the
sub-functions of various transformations in AES. The proposed
method reduces the area cost of realizing the sub-functions by
extracting the common factors in the bit-level expressions of
these sub-functions using a new CSE algorithm. Cell-based
implementation results show that the AES processor with our
proposed CSE method has significant area improvement
compared with previous designs.
I. Introduction
The Rijndael block cipher algorithm was selected as the
Advanced Encryption Standard (AES) to replace the former
data encryption standard (DES) [1]. The algorithm is a
symmetric block cipher that processes data blocks of 128
bits organized as a 44 matrix of bytes, called a state. A
state is operated by Nr=10, 12, or 14 rounds of
transformations with key length equal to 128, 192, or 256
bits respectively. Four transformations including SubBytes
(SB), ShiftRows (SR), MixColumns (MC), and
AddRoundKey (ARK) are performed in the encryption
process. A separate KeyExpansion (KE) unit is required to
generate the round key for each ARK. Fig. 1(a) shows the
encryption structure of the AES algorithm where the initial
key is added (bit-wise XOR operation) to the input plaintext,
followed by a sequence of transformations. After performing
the final round, the output ciphertext is generated. The direct
decryption algorithm in Fig. 1(b) performs the reverse data
flow where four inverse transformations, InvSubBytes (ISB),
InvShiftRows (ISR), InvMixColumns (IMC), and
AddRoundKey (ARK), are performed instead.
By exploiting common subexpression elimination (CSE)
in different levels of granularity (such as architecture-level,
byte-level or bit-level), the hardware complexity of AES
implementations can be reduced significantly [2-12]. This
paper presents a new bit-level CSE algorithm that results in
more efficient AES implementation compared with previous
designs.
The paper organization is as follows. Sec. II surveys
several previous implementation schemes for SB, ISB, MC,
and IMC. In Sec. III, a new bit-level substructure sharing
method is presented. Performance comparisons in both the
architecture-level designs and the cell-based
implementations are given in Sec. IV, followed by
conclusions in Sec. V.
(a) (b)
Fig. 1 AES (a) encryption and (b) direct decryption flows
Ming-Chih Chen
Dept. of Electronic Engineering
National Kaohsiung First University
of Science and Technology
Kaohsiung, Taiwan, 81164
Tel: 886-7-6011000 ext 2510
Fax: 886-7-6011386
e-mail: mjchen@ccms.nkfust.edu.tw
Shen-Fu Hsiao
Dept. of Computer Science and Engineering
National Sun Yat-Sen University
Kaohsiung, Taiwan, 80424
Tel: 886-7-5252000 ext 4314
Fax: 886-7-5254301
e-mail: sfhsiao@cse.nsysu.edu.tw
Fig. 3 The proposed CSE algorithm
As mentioned, major area costs in realizing the entire
AES cipher/decipher are from SB, ISB, MC, and IMC,
which can be expressed as XOR/AND-based bit-level
equations in terms of individual binary bits of the inputs. In
this paper, we propose a new bit-level CSE method to reduce
both the area and delay of these XOR/AND-based
sum-of-product (SoP) expressions.
III. Proposed CSE Method
Our CSE method is composed of two stages. In the first
stage, we extract the AND-based common factors ( ba ) if
available. In the second stage, we extract XOR-based
common factors ( ba ). In each stage, we determine the
selection of a common factor based on four priority rules as
shown in Fig. 3 in order to increase the chance of extracting
more shared subexpressions in the subsequent iterations,
leading to more area saving. The four rules are used with
priority in the order to select the common factors (CF) in the
bit-level SoP equations composed of AND and XOR
operations only. Each subsequent rule is applied only when
there is a tie in CF selection, i.e., only when there are two or
more C.F found using the previous rules.
In the following, we explain our CSE method using the
bit-level expression of the affine transformation:





























































76543
65432
54321
43210
73210
76210
76510
76540
7
6
5
4
3
2
1
0
1
1
1
1
aaaaa
aaaaa
aaaaa
aaaaa
aaaaa
aaaaa
aaaaa
aaaaa
w
w
w
w
w
w
w
w
(7)
Eqn. (7) has only XOR operations (+). Hence, we only
need to perform the second stage in Fig. 3 with the four
same rules shown in Fig. 3. After applying priority rule 1 in
Fig. 3, we find 9 candidates of two-term CFs with the same
maximum occurrence count of 4 across entire 8 bit-level
equations in Eqn. (7). These 9 candidates are
 10 ,aa ,  70 , aa ,  21 , aa ,  32 , aa ,  43 , aa ,
 54 , aa ,  65 , aa ,  1,5a ,  76 , aa (8)
Continuing for the 9 CFs in Eqn. (8), we apply priority
rule 2 in Fig. 3 and reduce the candidates to the following 7
CFs
 10 ,aa ,  70 , aa ,  21 , aa ,  32 , aa ,  43 , aa ,
 1,5a ,  76 , aa (9)
that have the same least correlation because the index pair of
each CF in Eqn. (9) appears only 3 times in the 9 CFs in Eqn.
(8) while the index pair (4,5) in CF  54 , aa appear 4
times in the 9 CFs in Eqn. (8). Similarly, the index pair (5, 6)
in  65 , aa appears 4 times in the CFs of Eqn. (8). Thus,
 54 , aa and  65 , aa that have more correlation with
other CFs are removed from the choices, leading to the
remaining 7 candidates in Eqn. (9).
Afterward, we apply priority rule 3 in Fig. 3 and find
that the extraction of CF  1,5a in Eqn. (9) leads to the
most terms in the 8 bit-level equations. Thus, the CF
  )(~1, 551 aaX  is selected in the first iteration.
After performing the entire CSE algorithm of Fig. 3 with
a total of 8 iterations, we can find all the shared CFs of
821 ,,, XXX  and the final results can be expressed as
318
517
426
225
104
763
432
51
325
76
71
54
673
63
84
840
7
6
5
4
3
2
1
0 )(~
with
XXX
XXX
XaX
XaX
aaX
aaX
aaX
aX
XXa
Xa
Xa
XX
Xaa
XX
XX
Xaa
w
w
w
w
w
w
w
w





































































(10)
We calculate the area cost and delay of the results by
using 2-input gates in architecture level. For example, the
AXOR is the area cost of 2-input AND gate and the TXOR is the
delay of the gate. The AINV is the area cost of inverter gate
and the TINV is the delay of the gate.
The original implementation of Eqn. (7) requires an area
of INVXOR AA 432  with critical path delay INVXOR TT 3 .
After applying the proposed CSE algorithm in Fig. 3, we
obtain Eqn. (10) that can be realized with area cost reduced
to INVXOR AA 118  while keeping the same critical path
delay.
Our CSE Algorithm
Input: A set of bit-level equations consists of SoPs.
Output: A set of modified equations with the extracted common factors (CF).
Stage 1: Extract the two-term CF of AND-based operations by using the following priority rules:
–Priority 1: Find the CF with highest occurrence count across all bit-level equations.
–Priority 2: Select CF with the index pair that has the least correlation with other CF index pairs.
–Priority 3: Chose CF that leads to the most remaining terms.
–Priority 4: Find the CF that leads to the largest CF occurrence count in the next iteration.
Stage 2: Extract the two-term CF of XOR-based operations by using the above priority rules.
Fig. 4 Iterative processor design for AES cipher and direct cipher
B. Comparison of AES Processor Implementations
Fig. 4 shows an iterative AES processor design by
merging the cipher process and the direct decipher process
with shared MI in GF((24)2) for the SB and ISB. The data
path is 128-bit wide with 128-bit keys, i.e., a total of 16
bytes are generated concurrently in each cycle. We first
derive the bit-level SoP equations for all the transformations
required in the AES architecture of Fig. 4, and then apply
the CES algorithm of Fig. 3 to these equations and extract as
many common factors as possible. As been shown in Tables
I and II, the area costs of realizing these transformations are
significantly reduced compared with other approaches.
Table III compares the area and delay of synthesized
individual components in the AES processor with and
without using the proposed CSE. The total area is reduced
by a factor of 12% at the cost of slightly increased critical
path delay compared with Synopsys area-optimized
synthesis without CSE. We also compare different AES
processor designs as shown in Table IV. The design in [2]
adopts ROM-based S-box implementation method and
allows the selections of 128/192/256-bit data blocks with
128/192/256-bit key. So, it spends more area cost in
realizing the major transformations for processing different
lengths of data blocks. Besides, the ROM-based S-box
implementation in [2] takes more area cost in the realization
compared with other methods.
In [6], a substantial portion of the area cost is spent on
memory used to store the lookup value of SB, ISB, MC,
IMC, and round keys. The AES design in [4] has relatively
small area cost due to the sharing of the MI logic in SB and
ISB, and the merging of MC and IMC. The T-box method in
[7] uses many ROMs to store different values of the
combined SB/MC and ISB/IMC. Compared with the
previous methods, our AES design has the smallest area cost
due to the efficient CSE algorithm for the extraction of
common factors.
Table V shows the chip information of the designed AES
processor. Due to the limitation of pin counts, we adopts the
128-bit AES core and design two 8-bit wide bus interfaces
(one for input, the other for output) for transferring 8-bit
data per cycle. So, it will spend 16 cycles for transferring
128-bit data block. The fabrication of the chip uses UMC
0.18um 1P6M (one-poly six-metal) process and the die size
is about 1.197mm2. The total gate count of the proposed
AES design is approximately 25.4K including the scan chain
for testability, the 8-bit wide bus interfaces, and the 128-bit
AES core. Our AES core can operate at 90 MHz with area of
17.1K gates, leading to a throughput rate of 1.05Gbps.
TABLE III
Synthesis results of all 128-bit AES components using Synopsys
Design Compiler with Artisan UMC 0.18um library
Without CSE With Our CSELevels
Modules
Area
(gate)
Delay
(ns)
Area
(gate)
Delay
(ns)
IMC 3260 1.37 1800 2.14
ISR/AF 592 0.49 528 0.49
T 512 0.47 512 0.47
MI in
GF(24)
4032 2.71 3776 2.49
MI
in
GF((24)2)
T-1 864 0.76 640 0.80
AF/SR 912 1.18 768 1.13
MC 1300 0.73 1152 0.83
32-b SB 1308 4.35 1233 3.93KE
Reg.& MUX 2988 3.22 2988 3.22
2*ARK (256AXOR) 682 0.14 682 0.14
5*128-b MUX
(640AMUX)
1920 0.14 1920 0.14
Round Control 79 2.92 79 2.92
128-b Reg. 981 0.23 981 0.23
Total 19430 10.47 17059 11.04
KE: the key expansion unit;
四、計畫成果自評
本計畫先進加密演算法之低耗電設計與實作 (I)，在國科會經費的支持下，自 97
年 08 月 01 日執行至 98 年 07 月 31 日止計畫執行，共產出一篇期刊論文及五篇會議論
文，且透過 CIC 國家晶片中心，下線一顆 AES 晶片。
(1) 期刊論文：
[1] Ming-Chih Chen, Shen-Fu Hsiao, “Low Cost Design of an Advanced Encryption
Standard (AES) Processor Using a New Common-Subexpression-Elimination
Algorithm,” IEICE Transactions on Fundamentals of Electronics,
Communications and Computer Sciences, Dec. 2009. (Accepted)
(2) 研討會論文：
[1] Ming-Chih Chen, and Shen-Fu Hsiao, “Low Cost Design of an Advanced
Encryption Standard (AES) Processor Using a New
Common-Subexpression-Elimination,”Proceedings of The 15th Workshop on
Synthesis And System Integration of Mixed Information Technologies (SASIMI 2009),
pp. 242-247, March 2009. (Japan)
[2] 張肇軒, 陳銘志, 32 位元低面積先進加密晶片實作, No. 269, 2009 年資訊科技
國際研討會, April 2009. (Taiwan)
[3] 張肇軒, 陳銘志, 低成本先進加密晶片實作, 2009 年高科大電機資訊學院師生
研發成果研討會, pp. 124-129, May 2009. (Taiwan)
[4] 陳建興, 李余耀, 王正廷, 陳銘志, RFID 技術應用於降低總牛乳受污染之風險,
2009全國暨兩岸 RFID科技論文研討會.
[5] Ming-Chih Chen, and Shen-Fu Hsiao, “Eficient Hardware Realization of 
Transformations in Advanced Encryption Standard Using a New
Common-Subexpression-Elimination Algorithm,” Proceedings of The 16th
National Conference on Automation Technology, pp. 1201-1205, June 2008.
(Taiwan)
[6] Ming-Chih Chen, “Low Cost Design of An Advanced Encryption Standard (AES) 
Processor Using Efficient Bit-Level Common Sub-expression Elimination,” 2008
年高科大電機資訊學院師生研發成果研討會, May 2008. (Taiwan)
[7] 陳建興, 李余耀, 王正廷, 陳銘志, 無線射頻辨識技術應用於乳牛分房搾乳的
管理, 2008年民生電子研討會, pp. 436-438, Dec., 2008.
(3) 晶片下線：
[1] 低成本之 8 位元 AES 晶片設計(T18-98C-11a)。
技術說明
中文：
在本設計裡，我們實現三種不同位元數之先進加密標準
(Advanced Encryption Standard，簡稱 AES)演算法，包：32 位元、
16 位元及 8 位元等三種不同資料路徑寬度的硬體設計。而在 AES
演算法裡，共有三種流程：加密流程、直接解密流程及改良式解密
流程等。在結合加密與解密流程時，一般有兩種方式：加密與直接
解密流程結合、加密與改良式解密流程結合。因此，當實現 32 位
元資料路徑寬的 AES 演算法時，便有兩種不同的實現方式，而包
含 16 位元及 8 位元也是。在本論文裡，我們將實現上述所有的架
構且與其他文獻所提之結果做比較。
在很多文獻內提到，如何改良 AES 所需要的電路面積或是運
算速度，透過利用不同的架構設計，針對 AES 部分的轉換函數做
化簡以達到節省面積或是利用管線化技術提高其運算能力，而本論
文的重點則是著重在如何在不大幅降低其運算能力，可以符合一般
嵌入式系統的應用，且可以進一步節省 AES 的電路面積，使效能
與電路面積予以平衡。
在我們的設計裡，對 AES 的電路面積有兩個改良的方式：第
一，是利用架構上的設計，在不犧牲運算的回合數(cycle)下，設計
出相關的轉換函數架構；第二，是利用一個共同子運算式化簡
(Common Sub-expression Elimination,CSE)演算法來精簡轉換函數
內的 AND 及 XOR 邏輯閘數目，以達到電路面積更精簡。三種不
同位元的架構上和先前的文獻作比較，32 位元、16 位元及 8 位元
架構確實有達到一個低成本考量的設計，且我們提出的 8 位元架構
設計是以最少運算的 cycle 數為前提來做低成本設計，其面積和效
能比，皆比其他現有的設計更好。
可利用之產業
及
可開發之產品
可利用產業: IC 設計產業
可開發產品: network security, hardware encryption, storage devices.
技術特點
1. 128/32/16/8-bit AES versions
2. Low area cost designs
3. Balanced area cost and performance designs
推廣及運用的價值
我們的設計為小面積及兼顧效能之設計，可使用在嵌入式系統、網
路通訊及儲存裝置的硬體加解密上。
※ 1.每項研發成果請填寫一式二份，一份隨成果報告送繳本會，一份送 貴單位
研發成果推廣單位（如技術移轉中心）。
※ 2.本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。
※ 3.本表若不敷使用，請自行影印使用。
Low Cost Design of an Advanced Encryption Standard (AES) Processor
Using a New Common-Subexpression-Elimination Algorithm
Abstract - In this paper, we propose an area-efficient design of
Advanced Encryption Standard (AES) processor by applying a
new common-expression-elimination (CSE) method to the
sub-functions of various transformations in AES. The proposed
method reduces the area cost of realizing the sub-functions by
extracting the common factors in the bit-level expressions of
these sub-functions using a new CSE algorithm. Cell-based
implementation results show that the AES processor with our
proposed CSE method has significant area improvement
compared with previous designs.
I. Introduction
The Rijndael block cipher algorithm was selected as the
Advanced Encryption Standard (AES) to replace the former
data encryption standard (DES) [1]. The algorithm is a
symmetric block cipher that processes data blocks of 128
bits organized as a 44u matrix of bytes, called a state. A
state is operated by Nr=10, 12, or 14 rounds of
transformations with key length equal to 128, 192, or 256
bits respectively. Four transformations including SubBytes
(SB), ShiftRows (SR), MixColumns (MC), and
AddRoundKey (ARK) are performed in the encryption
process. A separate KeyExpansion (KE) unit is required to
generate the round key for each ARK. Fig. 1(a) shows the
encryption structure of the AES algorithm where the initial
key is added (bit-wise XOR operation) to the input plaintext,
followed by a sequence of transformations. After performing
the final round, the output ciphertext is generated. The direct
decryption algorithm in Fig. 1(b) performs the reverse data
flow where four inverse transformations, InvSubBytes (ISB),
InvShiftRows (ISR), InvMixColumns (IMC), and
AddRoundKey (ARK), are performed instead.
By exploiting common subexpression elimination (CSE)
in different levels of granularity (such as architecture-level,
byte-level or bit-level), the hardware complexity of AES
implementations can be reduced significantly [2-12]. This
paper presents a new bit-level CSE algorithm that results in
more efficient AES implementation compared with previous
designs.
The paper organization is as follows. Sec. II surveys
several previous implementation schemes for SB, ISB, MC,
and IMC. In Sec. III, a new bit-level substructure sharing
method is presented. Performance comparisons in both the
architecture-level designs and the cell-based
implementations are given in Sec. IV, followed by
conclusions in Sec. V.
(a) (b)
Fig. 1 AES (a) encryption and (b) direct decryption flows
Ming-Chih Chen
Dept. of Electronic Engineering
National Kaohsiung First University
of Science and Technology
Kaohsiung, Taiwan, 81164
Tel: 886-7-6011000 ext 2510
Fax: 886-7-6011386
e-mail: mjchen@ccms.nkfust.edu.tw
Shen-Fu Hsiao
Dept. of Computer Science and Engineering
National Sun Yat-Sen University
Kaohsiung, Taiwan, 80424
Tel: 886-7-5252000 ext 4314
Fax: 886-7-5254301
e-mail: sfhsiao@cse.nsysu.edu.tw
Fig. 3 The proposed CSE algorithm
As mentioned, major area costs in realizing the entire
AES cipher/decipher are from SB, ISB, MC, and IMC,
which can be expressed as XOR/AND-based bit-level
equations in terms of individual binary bits of the inputs. In
this paper, we propose a new bit-level CSE method to reduce
both the area and delay of these XOR/AND-based
sum-of-product (SoP) expressions.
III. Proposed CSE Method
Our CSE method is composed of two stages. In the first
stage, we extract the AND-based common factors ( ba x ) if
available. In the second stage, we extract XOR-based
common factors ( ba ). In each stage, we determine the
selection of a common factor based on four priority rules as
shown in Fig. 3 in order to increase the chance of extracting
more shared subexpressions in the subsequent iterations,
leading to more area saving. The four rules are used with
priority in the order to select the common factors (CF) in the
bit-level SoP equations composed of AND and XOR
operations only. Each subsequent rule is applied only when
there is a tie in CF selection, i.e., only when there are two or
more C.F found using the previous rules.
In the following, we explain our CSE method using the
bit-level expression of the affine transformation:
»»
»»
»»
»»
»»
»
¼
º
««
««
««
««
««
«
¬
ª








 
»»
»»
»»
»»
»»
»
¼
º
««
««
««
««
««
«
¬
ª
76543
65432
54321
43210
73210
76210
76510
76540
7
6
5
4
3
2
1
0
1
1
1
1
aaaaa
aaaaa
aaaaa
aaaaa
aaaaa
aaaaa
aaaaa
aaaaa
w
w
w
w
w
w
w
w
(7)
Eqn. (7) has only XOR operations (+). Hence, we only
need to perform the second stage in Fig. 3 with the four
same rules shown in Fig. 3. After applying priority rule 1 in
Fig. 3, we find 9 candidates of two-term CFs with the same
maximum occurrence count of 4 across entire 8 bit-level
equations in Eqn. (7). These 9 candidates are 10 ,aa ,  70 ,aa ,  21 , aa ,  32 ,aa ,  43 ,aa , 54 ,aa ,  65 ,aa ,  1,5a ,  76 ,aa (8)
Continuing for the 9 CFs in Eqn. (8), we apply priority
rule 2 in Fig. 3 and reduce the candidates to the following 7
CFs 10 ,aa ,  70 , aa ,  21 , aa ,  32 ,aa ,  43 ,aa , 1,5a ,  76 ,aa (9)
that have the same least correlation because the index pair of
each CF in Eqn. (9) appears only 3 times in the 9 CFs in Eqn.
(8) while the index pair (4,5) in CF  54 ,aa appear 4
times in the 9 CFs in Eqn. (8). Similarly, the index pair (5, 6)
in  65 ,aa appears 4 times in the CFs of Eqn. (8). Thus, 54 , aa and  65 ,aa that have more correlation with
other CFs are removed from the choices, leading to the
remaining 7 candidates in Eqn. (9).
Afterward, we apply priority rule 3 in Fig. 3 and find
that the extraction of CF  1,5a in Eqn. (9) leads to the
most terms in the 8 bit-level equations. Thus, the CF  )(~1, 551 aaX   is selected in the first iteration.
After performing the entire CSE algorithm of Fig. 3 with
a total of 8 iterations, we can find all the shared CFs of
821 ,,, XXX  and the final results can be expressed as
318
517
426
225
104
763
432
51
325
76
71
54
673
63
84
840
7
6
5
4
3
2
1
0 )(~
with
XXX
XXX
XaX
XaX
aaX
aaX
aaX
aX
XXa
Xa
Xa
XX
Xaa
XX
XX
Xaa
w
w
w
w
w
w
w
w
 
 
 
 
 
 
 
 
»»
»»
»»
»»
»»
»
¼
º
««
««
««
««
««
«
¬
ª








 
»»
»»
»»
»»
»»
»
¼
º
««
««
««
««
««
«
¬
ª
(10)
We calculate the area cost and delay of the results by
using 2-input gates in architecture level. For example, the
AXOR is the area cost of 2-input AND gate and the TXOR is the
delay of the gate. The AINV is the area cost of inverter gate
and the TINV is the delay of the gate.
The original implementation of Eqn. (7) requires an area
of INVXOR AA 432  with critical path delay INVXOR TT 3 .
After applying the proposed CSE algorithm in Fig. 3, we
obtain Eqn. (10) that can be realized with area cost reduced
to INVXOR AA 118  while keeping the same critical path
delay.
Our CSE Algorithm
Input:A set of bit-level equations consists of SoPs.
Output:A set of modified equations with the extracted common factors (CF).
Stage 1: Extract the two-term CF of AND-based operations by using the following priority rules:
± Priority 1: Find the CF with highest occurrence count across all bit-level equations.
± Priority 2: Select CF with the index pair that has the least correlation with other CF index pairs.
± Priority 3: Chose CF that leads to the most remaining terms.
± Priority 4: Find the CF that leads to the largest CF occurrence count in the next iteration.
Stage 2: Extract the two-term CF of XOR-based operations by using the above priority rules.
Fig. 4 Iterative processor design for AES cipher and direct cipher
B. Comparison of AES Processor Implementations
Fig. 4 shows an iterative AES processor design by
merging the cipher process and the direct decipher process
with shared MI in GF((24)2) for the SB and ISB. The data
path is 128-bit wide with 128-bit keys, i.e., a total of 16
bytes are generated concurrently in each cycle. We first
derive the bit-level SoP equations for all the transformations
required in the AES architecture of Fig. 4, and then apply
the CES algorithm of Fig. 3 to these equations and extract as
many common factors as possible. As been shown in Tables
I and II, the area costs of realizing these transformations are
significantly reduced compared with other approaches.
Table III compares the area and delay of synthesized
individual components in the AES processor with and
without using the proposed CSE. The total area is reduced
by a factor of 12% at the cost of slightly increased critical
path delay compared with Synopsys area-optimized
synthesis without CSE. We also compare different AES
processor designs as shown in Table IV. The design in [2]
adopts ROM-based S-box implementation method and
allows the selections of 128/192/256-bit data blocks with
128/192/256-bit key. So, it spends more area cost in
realizing the major transformations for processing different
lengths of data blocks. Besides, the ROM-based S-box
implementation in [2] takes more area cost in the realization
compared with other methods.
In [6], a substantial portion of the area cost is spent on
memory used to store the lookup value of SB, ISB, MC,
IMC, and round keys. The AES design in [4] has relatively
small area cost due to the sharing of the MI logic in SB and
ISB, and the merging of MC and IMC. The T-box method in
[7] uses many ROMs to store different values of the
combined SB/MC and ISB/IMC. Compared with the
previous methods, our AES design has the smallest area cost
due to the efficient CSE algorithm for the extraction of
common factors.
Table V shows the chip information of the designed AES
processor. Due to the limitation of pin counts, we adopts the
128-bit AES core and design two 8-bit wide bus interfaces
(one for input, the other for output) for transferring 8-bit
data per cycle. So, it will spend 16 cycles for transferring
128-bit data block. The fabrication of the chip uses UMC
0.18um 1P6M (one-poly six-metal) process and the die size
is about 1.197mm2. The total gate count of the proposed
AES design is approximately 25.4K including the scan chain
for testability, the 8-bit wide bus interfaces, and the 128-bit
AES core. Our AES core can operate at 90 MHz with area of
17.1K gates, leading to a throughput rate of 1.05Gbps.
TABLE III
Synthesis results of all 128-bit AES components using Synopsys
Design Compiler with Artisan UMC 0.18um library
Without CSE With Our CSELevels
Modules
Area
(gate)
Delay
(ns)
Area
(gate)
Delay
(ns)
IMC 3260 1.37 1800 2.14
ISR/AF 592 0.49 528 0.49
T 512 0.47 512 0.47
MI in
GF(24)
4032 2.71 3776 2.49
MI
in
GF((24)2)
T-1 864 0.76 640 0.80
AF/SR 912 1.18 768 1.13
MC 1300 0.73 1152 0.83
32-b SB 1308 4.35 1233 3.93KE
Reg.& MUX 2988 3.22 2988 3.22
2*ARK (256AXOR) 682 0.14 682 0.14
5*128-b MUX
(640AMUX)
1920 0.14 1920 0.14
Round Control 79 2.92 79 2.92
128-b Reg. 981 0.23 981 0.23
Total 19430 10.47 17059 11.04
KE: the key expansion unit;
