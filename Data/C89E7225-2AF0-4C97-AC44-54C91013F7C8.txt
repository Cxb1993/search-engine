摘要: 平行工作計算(Job-Parallel Computing)式的網格系統將每個需要執行的程
式當成工作(Job)送往網格上適合的機器上面執行，其優點就是管理容易而且程式
不必重寫即可在網格上執行，缺點則是無法在計算期間使用複雜的通訊而限制其
可程式化的能力。相反的，全球計算(Worldwide Computing)式的網格系統透過網
路與虛擬機器(Virtual Machine)的技術，將所有的異質性計算資源整合成一個具
有單一性質計算平台。這種網格系統提供強大的通訊、同步與分散式計算、動態
系統重組等等功能。在本研究計畫提出一個嶄新的網格計算系統，將 Condor 當
成系統的主骨幹，然後把 SALSA 的虛擬機器與 SALSA 應用程式一起上傳到
Condor 上的不特定計算資源上面執行。因此這種計算架構將具有更大的彈性、
管理容易、而且可保有全球計算的各項優點。利用 Condor 的工具將可以使用的
計算資源整合成可執行的一個集合，也就是 Condor Pool，並建立一個即時監控
與管理虛擬機器與 SALSA 虛擬機器的機制。結合平行計算與全球計算的優點，
建立一個全新的網格計算平台。 
關鍵字: 平行化處理、平行工作計算、全球計算、SALSA、Condor 
 
一、 前言 
隨著時代的演進，資訊科學的進展日新月異，電腦硬體的技術不斷快速地發
展著，同時也提供愈來愈快的處理速度和愈來愈大的儲存空間，過去需要大量計
算能力的複雜系統相對變得容易解決；然而，這些成長的科技和技術同時也造成
科學研究在硬體資源上更大的需求。更精密的觀測技術、更快速的處理速度，讓
科學家得以進一步探討研究更複雜的系統，相對地也對於硬體資源的需求也變得
更龐大、更重要。在過去幾十年中，大型計算的平台持續的不停發展，從二十世
紀中的超級電腦(Supercomputer)演變到二十世紀末的叢集電腦(Cluster Computer)，
再進一步演化至目前的計算網格(Computational Grid)[1, 2]－計算網格平台是透
過網際網路將許許多多分散在各地且具有異質性的各種計算資源連結起來，形成
一個具有強大計算能力與動態調整能力的虛擬超級電腦。 
計算網格的發展建立在科學研究的需求上，而使用者對計算網格的需求大致
上可分為兩類：第一類的要求是可以方便的集合計算資源並且以最省力的方式將
現存程式移植到計算網格上執行；另一類的要求則是可以方便簡單地控制正在執
行中的程式，例如 Processes 之間訊息的交換、Processes 之間的同步控制等，進
而達到整體程式設計效能的改善。這兩類的要求雖然針對著不同的方向，但是都
明確地指向同一個概念，那就是計算網格程式設計模型的重要性。目前計算網格
系統的設計理念在不同使用者需求之下，發展方向可以約略分為以下三種： 
z 平行工作計算(Job-Parallel Computing)的方式：這類型的計算網格系統
將需要執行的程式當成不同的工作(Job)，並根據程式的軟硬體需求將這
些工作送往適合的機器上執行。這種作法的好處就是工作易於管理而且
程式不需重寫即可送到計算網格系統上執行，其缺點就是程式在計算過
程中無法使用複雜的通訊。可以歸類在這方面的系統有 Condor[3, 4]、
者將一連串欲執行工作上傳到 Condor 系統中，Condor 會將工作置入工作隊列
裡，並為這些工作決定開始執行的時間和使用哪些執行資源，並且小心地監視工
作執行過程直到工作完成為止。Condor 可以在 Linux、Unix、Mac OS X、FreeBSD 
和 Windows 等多種作業系統中執行，更可以有效地將分散在不同地點上，由不
同機構擁有的計算資源透過網路整合起來，無論是個人電腦、叢集式電腦或是大
型工作站，都可以透過 Condor 加入同一個 Job-Parallel System 中，形成一個規
模龐大的分散式計算平台。而這一個能有效管理工作和計算資源的計算環境，正
是需要大量計算和需要處理大量資料的科學研究所必需的。 
 
2. Distributed Programming Language：SALSA 
SALSA 程式語言具備著適合網格計算、行動計算(Mobile Computing)和無所
不在運算(Pervasive Computing)的能力，換句話說 SALSA 程式語言十分適合在
快速變動的執行環境和系統組態下開發應用程式。因此，SALSA 能夠有效地整
合經網際網路連結的異質電腦，使得分散各地的計算資源能有效地用於相同的任
務，並且能快速且有彈性地處理網際網路中資源隨時可能新增及消失的情形。 
由 SALSA 程式語言建構的Worldwide Computing 系統是由WWC Naming 
Server、WWC Theater 和 SALSA 應用程式 (actor) 所構成的。WWC Naming 
Server 負責記錄在 SALSA系統中執行的應用程式名稱及應用程式所執行的位置
資訊。SALSA 所使用的全域計算元件命名機制 (Universal Actor Naming Protocol) 
包含： 
(1) 每個Actor 都有一個Universal Actor Name (UAN) 和一個Universal Actor 
Location (UAL)。 
(2) 將每個 Actor 的 UAN 與 UAL 綁定在一起。 
(3) 從一個 Actor 的 UAN 可以得到此 Actor 實際執行的位置。 
(4) 當 Actor 轉移到其他位置執行時，更新該 Actor 的 UAL。 
(5)  Actor 執行完畢後移除它在WWC Naming Server 的資訊。 
 
圖1. SALSA and JAVA 
 
使用的方法是建立一個 Naming Server 提供虛擬機器命名服務 (Virtual 
Machine Naming Service)。虛擬機器命名服務具有以下三種功能： 
(1) 紀錄各個虛擬機器所在位置相關資訊：當一個新的 SALSA 虛擬機器透
過 Condor System 上傳到 Condor Pool 中，在虛擬機器開始執行前，虛
擬機器會向 Virtual Machine Naming Server 註冊以提供完整的訊息。 
(2) 定時檢查虛擬機器狀態並更新虛擬機器所在位置相關資訊：虛擬機器的
生命週期並不固定，由於 SALSA 虛擬機器被視為一般的 Condor Job，
因此使用者或 Condor 的 Job Scheduler 可以透過指令或是管理策略上
的考量暫停虛擬機器的執行或是將虛擬機器直接移除。為了確保
Naming Server 內所保存的虛擬機器列表的正確性、記錄中所有虛擬機
器的可靠性；NamingServer 會定時檢查各個虛擬機器狀態，一旦發現
某個虛擬機器遭到暫停或砍除，Naming Server 便立即更新虛擬機器列
表資訊，維持虛擬機器資訊的正確性，避免Worldwide Computing應用
程式執行過程中得到錯誤的資訊，造成系統效能的下降和不穩定。 
(3) 提供虛擬機器與 Worldwide Computing 使用者動態查詢虛擬機器位置
資訊：Virtual Machine Naming Service 中最重要的一環，就是虛擬機器
和Worldwide Computing 使用者都能隨時動態查詢目前Condor Pool 中
不定點分布虛擬機器的資訊，除了可以提供完整的虛擬機器分佈資訊外，
任一虛擬機器也可以向 Virtual Machine Naming Service 查詢，取得目前
Condor Pool 中屬於它的鄰近節點(Neighbors)。 
 
圖3. Virtual Machine naming Service 
2. Environment Status Report Service 
在任何的分散式計算環境中，計算資源分配的適當與否都是影響系統效
能的一個重要關鍵，在資源分配不適當的分散式計算環境中執行的應用程式
效能甚至可能比在傳統環境下執行的效能還差。由於本研究計畫提出的分散
式執行環境是整合傳統 Job-Parallel 網格系統和Worldwide Computing 系統，
所以在計算資源分配是否適當必須要由實體機器代表計算資源和由虛擬機
器代表計算資源兩個不同角度進行衡量。 
(1) 實體機器代表計算資源：在 Condor Pool 中虛擬機器分佈不均，由於
元件 (SALSA Actor) ，提供計算元件全域名稱 (Universal Name) 和全
域位置 (Universal location) 的對應資訊，也只處理 SALSA Actor 所在
位置的查詢和更新。 
 
圖4. Two Layers of Naming Services 
 
3. Worldwide Computing 應用程式的轉移 
SALSA 應用程式在轉移上並未受到上述的限制，這是因為 SALSA 是
以 Actor Model 為概念設計的程式語言。在 Actor Model 中，每一個計算元
件都有自己的Message box 用來存放其他計算元件傳遞過來的訊息。當計算
元件轉移時，Message box 也會隨著 Actor 一起轉移，因此在轉移前仍
Message box 裡尚未處理的訊息並不會因為轉移的關係遺失，而是在轉移完
成後繼續執行；而另一個狀況是，從其它 Actor 傳遞過來 Message 尚未抵
達時，Actor 就連同本身的 Message box 一起轉移了，此時還在傳遞中的
Message 並不會因此遺失，系統會將此類 Message 轉傳到 Actor 轉移後的
新位置上；不管 SALSA 的應用程式轉移到任何位置上執行，都可以透過應
用程式的全域名稱(UAN)得到它執行位置的資訊(全域位置)。這樣的特性使
得 SALSA 應用程式先天上就很適合動態轉移，因此當虛擬機器需要停止提
供服務或是當計算元件分配不均時，使用者只需要傳送一個轉移的訊息和轉
移的全域位置(UAL)給計算元件，計算元件就可以在不影響應用程式運作的
前提下轉移到其他虛擬機器上，圖 5 為 SALSA Actor 轉移的示意圖。 
 
圖5. The Migration of SALSA Actor 
(1) Virtual Machine Naming Server：Naming Server 分別對虛擬機器和使用者提
供服務，當虛擬機器收到訊息時會先進行判斷，如果訊息是來自使用者，則
將目前 Naming Server 裡保有的虛擬機器列表傳送給使用者；如果訊息是來
自虛擬機器，則將虛擬機器傳過來的訊息保存在 Naming Server 裡，除此之
外 Naming Server 還有一項任務，就是針對在虛擬機器列表上的虛擬機器不
斷進行 heart-beat test；當 Naming Server 發現任一虛擬機器被暫停或是被移
除時，就將此虛擬機器的資料從虛擬機器列表上刪除。 
(2) Client：Client 元件負責代表 SALSA 虛擬機器和 Naming Server進行溝通，
任一虛擬機器要啟動之前，會先由 Client 和 Naming Server 聯繫，如果無法
和 Naming Server 聯繫上，將停止 36虛擬機器的啟動；如果成功的和 Naming 
Server 聯繫上，則繼續啟動虛擬機器，Client 並將虛擬機器資料傳送給
Naming Server。 
(3) Query 程式：Query 為使用者和 Naming Server 溝通的管道，透過 Query 程
式，使用者可以傳送索取虛擬機器列表的要求給 Naming Server，並由 Query 
程式接收 Naming Server 傳送回來的結果供使用者使用。 
3. Environment Status Report Service 
Environment Status Report Service 包括三個項目：(1)監測實體機器的運作狀
態、(2)監測虛擬機器在實體機器上的分佈狀況、(3)監測計算元件(Actors)在虛擬
機器上的分佈情形。從實體機器、虛擬機器和計算元件三方面同時進行監測才能
更完整的掌控系統資源。虛擬機器在實體機器上的分佈狀況在實作虛擬機器命名
服務的過程中也已經實現了，針對監測實體機器的運作狀態的實作，我們所採用
的作法是在Naming Server 中增加一個功能，讓Naming Server 能透過Condor 向
Central Manager 取得Condor Pool 中所有Host 目前的狀態；當使用者透過Query 
程式對 Naming Server 發出實體機器運作狀態的要求時，Naming Server 會先跟
Condor Pool 中的 Central Manager 索取資訊，然後再將資訊傳送給 Query 程式
供使用者使用。 
4. 應用程式的轉移 
Worldwide Computing 應用程式的轉移測試，將利用撰寫一個會快速的在給
定的虛擬機器間來回轉移的應用程式來測試，來確認我們所建構的計算平台是否
能支援應用程式自由的轉移。為了確認應用程式是否有轉移成功，我們利用
Environment Status Report Service 裡對計算元件的監控來掌握這個特定計算元
件的行蹤。用來測試的應用程式會快速的在我們指定的虛擬機器間來回轉移
100000 次，圖 7為開始執行後程式的 Universal Actor Location 改變情形。應用
程式的全域位置一直不斷的在 140.115.52.19:4221 和 140.115.52.21:4286 之間改
變，全域位置最後面的數字代表應用程式接下來還剩下幾次轉移。從這個測試可
以發現，Worldwide Computing 應用程式不僅可以在虛擬機器間轉移，來回轉移
的頻率也可以達到很高。 
 
Experience, Vol. 17, No. 2-4, pages 323-356, February-April, 2005. 
[5]  James Frey, Todd Tannenbaum, Miron Livny, Ian Foster, Steven Tuecke. 
Condor-G: A Computation Management Agent for MultiInstitutional Grids, 
Proceedings of the Tenth IEEE Symposium on High Performance Distributed 
Computing (HPDC10). 
[6]  PBS GridWorks, http://www.pbsgridworks.com/Default.aspx. 
[7]  Globus. http://www.globus.org/. 
[8]  Carlos A. Varela, Gul Agha, Wei-Jen Wang, Travis Desell, Kaoutar El 
Maghraoui, Jason LaPorte, and Abe Stephens. 2007. The SALSA Programming 
Language 1.1.2 Release Tutorial. Technical report 07-12, Dept. of Computer 
Science, R.P.I.. 
[9]  Andrew S. Grimshaw, Wm. A. Wulf, and CORPORATE The Legion Team. The 
legion vision of a worldwide virtual computer. Commun. ACM, 40(1):39–45, 
1997. 
[10]  Travis Desell, Nathan Cole, Malik Magdon-Ismail, Heidi Newberg, Boleslaw 
Szymanski, and Carlos Varela. Distributed and Generic Maximum Likelihood 
Evaluation. In 3rd IEEE International Conference on e-Science and Grid 
Computing (eScience2007), Bangalore, India, December,  2007. 
[11]  W. Wang, K. E. Maghraoui, J. Cummings, J. Napolitano, B. Szymanski, and C. 
Varela. A middleware framework for maximum likelihood evaluation over 
dynamic grids. In Second IEEE International Conference on e-Science and Grid 
Computing, Amsterdam, Netherlands, December , 2006. 
[12]  J.-P. Goux, S. Kulkarni, J. Linderoth, M. Yoder, “An enabling framework for 
master-worker applications on the computational grid”, Tech. Report, University 
of Wisconsin – Madison, March, 2000. 
[13]  Anderson, D.P., Christensen, C., Allen, B.. Designing a Runtime System for 
Volunteer Computing. Supercomputing, 2006. SC '06. Proceedings of the 
ACM/IEEE SC 2006 Conference, vol., no., pp.33-33, 11-17 Nov. 2006. 
[14]  Jian-hao Chiou, A Dynamic Worldwide Computing Platform on Job-Parallel 
Computing System, 2008. 
今的多核心、可用網際網路互相通訊的分散式環境，而且核心的處理速度更是進
步了上百萬倍。但相對於硬體方面的高度進步，軟體方面對於程式的概念仍停滯
在「命令的集合」，每個程式似乎只為完成某一特定任務而存在，除此之外別無
功能。在此應有兩方面的發展: 
z 分散式系統軟體的發展: 運用分散式系統軟體支援其他軟體的執行，並
能將硬體的細節隱藏住，方便其他軟體以高階的方式研發。 
z 應用軟體的發展: 應用軟體必須能充分利用分散式系統所提供的資
源，以加速其執行效率。 
這次非常榮幸有機會參與研討會，也發表了一篇論文。報告論文的時候，主
持人給了許多意見。返國後，跟指導教授討論許多平行化處理的技術，目前研究
也朝著此目標前進，希望可以藉由我們研發的分散式系統軟體來發展更多的應用
軟體。 
在此次會議場上，除了幾個電腦發展的先進國家，如美國、英國、香港，韓
國，大陸，日本、加拿大、與歐洲各國外，中華民國在此次會議中也有多篇論文
的發表。由此可見，國內除了電腦電子工業的進步外，在無所不在計算的資訊管
理與通訊科技研究的方面其實也並不落於世界各國之人後。 
 
三、 建議 
此次會議中，本參與人獲益良多。除了跟各國學者有不少的意見交流外，本
參與人並獲得不少的研究改進意見與新的研究方針。本參與人希望國科會未來能
多補助博士班學生出席國際會議經費，讓國內博士班學生可以透過國際會議的交
流而加速國際化，進而培養國際性的人才。 
 
四、 攜回資料名稱及內容 
研討會光碟及會議手冊 
presented in Section 3, and the experimental results are shown in 
Section 4. Finally, the conclusion is made in Section 5. 
2. RELATED WORK 
2.1 Vector quantization 
Vector quantization (VQ) is a lossy compression technique for 
digital images using the block-based quantization algorithm 
proposed by Linde et al.’s [9]. VQ technique reducing the original 
image size, compress the original image into block-based index 
table. In VQ algorithm, the image is divided into several k × k 
non-overlapping blocks, where k is number of pixels in each 
block. Each block finds out the closest codeword to replace by 
using the closest codeword’s index from the codebook. The 
codebook is trained by LBG algorithm [10]. After VQ encoding, 
the original image is replaced by the index table. We can to do 
something process with the index table to achieve the data hiding. 
It has high compression rate and good visual quality. 
2.2 Side match vector quantization 
Side match vector quantization (SMVQ) is an extension based on 
VQ technique. SMVQ technique use the neighbor block’s pixel to 
forecast and generate state codebook. And find the index which is 
the closest codewords to replace block pixels, generate the index 
table. Figure 2 shows the relationship of three 4 × 4 blocks, where 
block U is the upper adjacent block of X and block L is the left 
adjacent block of X. Both U and L have been encoded. First, the 
border values of X are temporarily assigned by its upper and left 
adjacent blocks U and L, such that x0 = (u12 + l3)/2, x1 = u13, x2 = 
u14, x3 = u15, x4 = l7, x8 = l11, and x12 = l15. Second, the seven 
assigned values are used to search the n closest codewords Yi’s 
according to the following equation:  
∑ ∑
= =
−+−=
3
0
3
1
2
4,4
2
, )()(),(
j j
jijjiji yxyxYXD ,    (1) 
where n is the size of the state codebook, xj and yi,j are jth 
elements of X and Yi. Then, the n closest codewords are used to 
construct a state codebook. Finally, the codeword of the state 
codebook with the minimum Euclidean distance from X is used to 
encode X. 
 
Fig. 1 The block X, left block L, and upper block U 
 
3. OUR PROPOSED SCHEME 
In Wang et al.’s method [8], they used joint neighboring coding 
(JNC) method to embed the secret messages. Although the JNC 
method has high correlation with adjacent indices, the effect is not 
better than using the neighbor block to construct the state 
codebook method. In this paper, we propose a scheme of data 
hiding based on side match neighbor (SMN) block in VQ 
compressed images, where the state codebook is generated by 
side match concept. It is subject to the reversible data hiding to 
enable the reconstructed image to be the same as the original one.  
 
3.1 Reversible hiding scheme 
We first define the neighbor block encoding. The gray block 
construct the state codebook SC from the main codebook C, and 
each neighbor blocks to find the own location from state 
codebook SC to encode. Figure 2 shows the main concept of 
neighbor block encoding. Figure 3 shows the side match neighbor 
(SMN) encoding rules.  
In Figure 2, the gray block is always unchanged in the course of 
encoding procedure. The gray block that can reconstruct the 
original index easily. The gray block is used to create the state 
codebook SC from the main codebook C and reconstruct neighbor 
blocks. The white blocks use the state codebook SC of gray block 
to encode, and also can use the state codebook SC of gray block 
to decode. The detailed steps are described in the following Sec. 
Figure 3 shows the rule of neighbor block to find related the 
neighbor blocks, where it is set off from the center red block of 
index table. The encoding rule is from external to internal areas. 
For example, first of all, the white block finds the same codeword 
from the state codebook of gray block. Next, the gray block finds 
the same codeword from the state codebook of yellow block. 
Eventually, the yellow block finds the same codeword from the 
state codebook of red block. Each block find the same codewords 
S from the state codebook of neighbor block, and output the index 
of state codebook. The algorithms of embedding and extracting 
are shown in the following.  
 
 
Fig. 2 The encoding concept of neighboring block 
 
 
Fig. 3 Encoding rule of each index to define the neighbor block 
 
 
Fig. 5 Decoding rule  
 
4. EMPIRICAL EXPERIMENTS  
In this section, some experiments are performed in the platform of 
Intel Core 2, T5500 1.66 GHz NB with 2 GB RAM with the 
Microsoft Vista operating system. The programming enabled in 
our scheme is the C language. In the experiments, cover images 
are w × h (512× 51 2) of gray images. The codebook is set as size 
of 512 and created by the Linde-Buzo-Gray (LBG) algorithm. 
Without loss of generality, the peak signal-to-noise ratio (PSNR) 
is used to evaluate the stego-image quality. And we used the bit 
rate (BR) to compute the compression rates. The BR can be 
obtained by the following equation: 
BR = (Number of total SMN code stream) / (w × h)        (1) 
The VQ cover images: Lena, Peppers, Baboon, Boat, Goldhill, 
and F16 are shown in Figure 6.  
  
(a) Lena (b) Peppers 
  
(c) Baboon (d) Boat 
  
  
(e) Goldhill (f) F16 
Fig. 6 VQ cover images: Lena, Peppers, Baboon, Boat, Goldhill, 
and F16 
 
Table 1 shows the results of our proposed method (when d is 
equal to 4) and Wang et al.’s method with similar capacity. The 
result presents our bit rate is better than Wang and Lu’s method 
[8]. The average bit rate using our scheme reduces about 17%, it 
means that we can embedded more secret bits into image when bit 
rate is at the same value. In other words, more data, extra secret 
bits, 2785 (16384 × 17% = 2785), are embedded in our scheme.  
 
 
Table 1. Comparisons between our method (d = 4) and 
Wang and Lu’s scheme [8] 
 
 
Table 2 shows the bit rate of our proposed method with no secret 
embedded and different SM bits. The VQ compression bit rate is 
0.5625 (log2512 × ((512 × 512) / (4 × 4)) / (512 × 512) with the 
codebook size of 512. Table 2 presents our bit rate is good . When 
the cover image is smooth (e.g. Lena, Peppers, and Boat), the bit 
rate has a better performance. 
 
Table 2. The bit rate of our proposed method with no 
secret embedded and different SM bits 
 
 
無研發成果推廣資料 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
